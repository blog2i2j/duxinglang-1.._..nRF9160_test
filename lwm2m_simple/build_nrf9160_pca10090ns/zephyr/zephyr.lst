
zephyr.elf:     file format elf32-littlearm


Disassembly of section rom_start:

0001c200 <_vector_table>:
   1c200:	2002ed40 	.word	0x2002ed40
   1c204:	00026905 	.word	0x00026905
   1c208:	00042ba3 	.word	0x00042ba3
   1c20c:	0002652d 	.word	0x0002652d
   1c210:	0002652d 	.word	0x0002652d
   1c214:	0002652d 	.word	0x0002652d
   1c218:	0002652d 	.word	0x0002652d
   1c21c:	0002652d 	.word	0x0002652d
   1c220:	0002652d 	.word	0x0002652d
   1c224:	0002652d 	.word	0x0002652d
   1c228:	0002652d 	.word	0x0002652d
   1c22c:	000264f5 	.word	0x000264f5
   1c230:	0002652d 	.word	0x0002652d
   1c234:	0002652d 	.word	0x0002652d
   1c238:	00026445 	.word	0x00026445
   1c23c:	00026081 	.word	0x00026081

0001c240 <_irq_vector_table>:
   1c240:	00026549 00026549 00026549 00026549     Ie..Ie..Ie..Ie..
   1c250:	00026549 00026549 00026549 00026549     Ie..Ie..Ie..Ie..
   1c260:	00026549 00026549 00026549 00026549     Ie..Ie..Ie..Ie..
   1c270:	00026549 00026549 00026549 00026549     Ie..Ie..Ie..Ie..
   1c280:	00026549 00026549 00026549 00026549     Ie..Ie..Ie..Ie..
   1c290:	00026549 00026549 00026549 00026549     Ie..Ie..Ie..Ie..
   1c2a0:	00026549 00026549 00026549 00026549     Ie..Ie..Ie..Ie..
   1c2b0:	00030025 00043f2f 00026549 00026549     %.../?..Ie..Ie..
   1c2c0:	00026549 00026549 00026549 00026549     Ie..Ie..Ie..Ie..
   1c2d0:	00026549 00026549 00026549 00026549     Ie..Ie..Ie..Ie..
   1c2e0:	00026549 00026549 00043f4d 00026549     Ie..Ie..M?..Ie..
   1c2f0:	00026549 00026549 00026549 00026549     Ie..Ie..Ie..Ie..
   1c300:	00026549 00026549 00026549 00026549     Ie..Ie..Ie..Ie..
   1c310:	00026549 00026549 00026549 00026549     Ie..Ie..Ie..Ie..
   1c320:	00026549 00026549 00026549 00026549     Ie..Ie..Ie..Ie..
   1c330:	00026549 00026549 00026549 00026549     Ie..Ie..Ie..Ie..
   1c340:	00026549                                Ie..

0001c344 <_vector_end>:
	...

0001c400 <m_firmware_info>:
   1c400:	281ee6de 8fcebb4c 00005b02 0000003c     ...(L....[..<...
   1c410:	000321a8 00000001 0001c200 0001c200     .!..............
   1c420:	9102ffff 00000000 00000000 00000000     ................
	...

Disassembly of section text:

0001c440 <__aeabi_drsub>:
   1c440:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   1c444:	e002      	b.n	1c44c <__adddf3>
   1c446:	bf00      	nop

0001c448 <__aeabi_dsub>:
   1c448:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0001c44c <__adddf3>:
   1c44c:	b530      	push	{r4, r5, lr}
   1c44e:	ea4f 0441 	mov.w	r4, r1, lsl #1
   1c452:	ea4f 0543 	mov.w	r5, r3, lsl #1
   1c456:	ea94 0f05 	teq	r4, r5
   1c45a:	bf08      	it	eq
   1c45c:	ea90 0f02 	teqeq	r0, r2
   1c460:	bf1f      	itttt	ne
   1c462:	ea54 0c00 	orrsne.w	ip, r4, r0
   1c466:	ea55 0c02 	orrsne.w	ip, r5, r2
   1c46a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   1c46e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   1c472:	f000 80e2 	beq.w	1c63a <__adddf3+0x1ee>
   1c476:	ea4f 5454 	mov.w	r4, r4, lsr #21
   1c47a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   1c47e:	bfb8      	it	lt
   1c480:	426d      	neglt	r5, r5
   1c482:	dd0c      	ble.n	1c49e <__adddf3+0x52>
   1c484:	442c      	add	r4, r5
   1c486:	ea80 0202 	eor.w	r2, r0, r2
   1c48a:	ea81 0303 	eor.w	r3, r1, r3
   1c48e:	ea82 0000 	eor.w	r0, r2, r0
   1c492:	ea83 0101 	eor.w	r1, r3, r1
   1c496:	ea80 0202 	eor.w	r2, r0, r2
   1c49a:	ea81 0303 	eor.w	r3, r1, r3
   1c49e:	2d36      	cmp	r5, #54	; 0x36
   1c4a0:	bf88      	it	hi
   1c4a2:	bd30      	pophi	{r4, r5, pc}
   1c4a4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   1c4a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
   1c4ac:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   1c4b0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   1c4b4:	d002      	beq.n	1c4bc <__adddf3+0x70>
   1c4b6:	4240      	negs	r0, r0
   1c4b8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   1c4bc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   1c4c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
   1c4c4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   1c4c8:	d002      	beq.n	1c4d0 <__adddf3+0x84>
   1c4ca:	4252      	negs	r2, r2
   1c4cc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   1c4d0:	ea94 0f05 	teq	r4, r5
   1c4d4:	f000 80a7 	beq.w	1c626 <__adddf3+0x1da>
   1c4d8:	f1a4 0401 	sub.w	r4, r4, #1
   1c4dc:	f1d5 0e20 	rsbs	lr, r5, #32
   1c4e0:	db0d      	blt.n	1c4fe <__adddf3+0xb2>
   1c4e2:	fa02 fc0e 	lsl.w	ip, r2, lr
   1c4e6:	fa22 f205 	lsr.w	r2, r2, r5
   1c4ea:	1880      	adds	r0, r0, r2
   1c4ec:	f141 0100 	adc.w	r1, r1, #0
   1c4f0:	fa03 f20e 	lsl.w	r2, r3, lr
   1c4f4:	1880      	adds	r0, r0, r2
   1c4f6:	fa43 f305 	asr.w	r3, r3, r5
   1c4fa:	4159      	adcs	r1, r3
   1c4fc:	e00e      	b.n	1c51c <__adddf3+0xd0>
   1c4fe:	f1a5 0520 	sub.w	r5, r5, #32
   1c502:	f10e 0e20 	add.w	lr, lr, #32
   1c506:	2a01      	cmp	r2, #1
   1c508:	fa03 fc0e 	lsl.w	ip, r3, lr
   1c50c:	bf28      	it	cs
   1c50e:	f04c 0c02 	orrcs.w	ip, ip, #2
   1c512:	fa43 f305 	asr.w	r3, r3, r5
   1c516:	18c0      	adds	r0, r0, r3
   1c518:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   1c51c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   1c520:	d507      	bpl.n	1c532 <__adddf3+0xe6>
   1c522:	f04f 0e00 	mov.w	lr, #0
   1c526:	f1dc 0c00 	rsbs	ip, ip, #0
   1c52a:	eb7e 0000 	sbcs.w	r0, lr, r0
   1c52e:	eb6e 0101 	sbc.w	r1, lr, r1
   1c532:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   1c536:	d31b      	bcc.n	1c570 <__adddf3+0x124>
   1c538:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   1c53c:	d30c      	bcc.n	1c558 <__adddf3+0x10c>
   1c53e:	0849      	lsrs	r1, r1, #1
   1c540:	ea5f 0030 	movs.w	r0, r0, rrx
   1c544:	ea4f 0c3c 	mov.w	ip, ip, rrx
   1c548:	f104 0401 	add.w	r4, r4, #1
   1c54c:	ea4f 5244 	mov.w	r2, r4, lsl #21
   1c550:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   1c554:	f080 809a 	bcs.w	1c68c <__adddf3+0x240>
   1c558:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   1c55c:	bf08      	it	eq
   1c55e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   1c562:	f150 0000 	adcs.w	r0, r0, #0
   1c566:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   1c56a:	ea41 0105 	orr.w	r1, r1, r5
   1c56e:	bd30      	pop	{r4, r5, pc}
   1c570:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   1c574:	4140      	adcs	r0, r0
   1c576:	eb41 0101 	adc.w	r1, r1, r1
   1c57a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   1c57e:	f1a4 0401 	sub.w	r4, r4, #1
   1c582:	d1e9      	bne.n	1c558 <__adddf3+0x10c>
   1c584:	f091 0f00 	teq	r1, #0
   1c588:	bf04      	itt	eq
   1c58a:	4601      	moveq	r1, r0
   1c58c:	2000      	moveq	r0, #0
   1c58e:	fab1 f381 	clz	r3, r1
   1c592:	bf08      	it	eq
   1c594:	3320      	addeq	r3, #32
   1c596:	f1a3 030b 	sub.w	r3, r3, #11
   1c59a:	f1b3 0220 	subs.w	r2, r3, #32
   1c59e:	da0c      	bge.n	1c5ba <__adddf3+0x16e>
   1c5a0:	320c      	adds	r2, #12
   1c5a2:	dd08      	ble.n	1c5b6 <__adddf3+0x16a>
   1c5a4:	f102 0c14 	add.w	ip, r2, #20
   1c5a8:	f1c2 020c 	rsb	r2, r2, #12
   1c5ac:	fa01 f00c 	lsl.w	r0, r1, ip
   1c5b0:	fa21 f102 	lsr.w	r1, r1, r2
   1c5b4:	e00c      	b.n	1c5d0 <__adddf3+0x184>
   1c5b6:	f102 0214 	add.w	r2, r2, #20
   1c5ba:	bfd8      	it	le
   1c5bc:	f1c2 0c20 	rsble	ip, r2, #32
   1c5c0:	fa01 f102 	lsl.w	r1, r1, r2
   1c5c4:	fa20 fc0c 	lsr.w	ip, r0, ip
   1c5c8:	bfdc      	itt	le
   1c5ca:	ea41 010c 	orrle.w	r1, r1, ip
   1c5ce:	4090      	lslle	r0, r2
   1c5d0:	1ae4      	subs	r4, r4, r3
   1c5d2:	bfa2      	ittt	ge
   1c5d4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   1c5d8:	4329      	orrge	r1, r5
   1c5da:	bd30      	popge	{r4, r5, pc}
   1c5dc:	ea6f 0404 	mvn.w	r4, r4
   1c5e0:	3c1f      	subs	r4, #31
   1c5e2:	da1c      	bge.n	1c61e <__adddf3+0x1d2>
   1c5e4:	340c      	adds	r4, #12
   1c5e6:	dc0e      	bgt.n	1c606 <__adddf3+0x1ba>
   1c5e8:	f104 0414 	add.w	r4, r4, #20
   1c5ec:	f1c4 0220 	rsb	r2, r4, #32
   1c5f0:	fa20 f004 	lsr.w	r0, r0, r4
   1c5f4:	fa01 f302 	lsl.w	r3, r1, r2
   1c5f8:	ea40 0003 	orr.w	r0, r0, r3
   1c5fc:	fa21 f304 	lsr.w	r3, r1, r4
   1c600:	ea45 0103 	orr.w	r1, r5, r3
   1c604:	bd30      	pop	{r4, r5, pc}
   1c606:	f1c4 040c 	rsb	r4, r4, #12
   1c60a:	f1c4 0220 	rsb	r2, r4, #32
   1c60e:	fa20 f002 	lsr.w	r0, r0, r2
   1c612:	fa01 f304 	lsl.w	r3, r1, r4
   1c616:	ea40 0003 	orr.w	r0, r0, r3
   1c61a:	4629      	mov	r1, r5
   1c61c:	bd30      	pop	{r4, r5, pc}
   1c61e:	fa21 f004 	lsr.w	r0, r1, r4
   1c622:	4629      	mov	r1, r5
   1c624:	bd30      	pop	{r4, r5, pc}
   1c626:	f094 0f00 	teq	r4, #0
   1c62a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   1c62e:	bf06      	itte	eq
   1c630:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   1c634:	3401      	addeq	r4, #1
   1c636:	3d01      	subne	r5, #1
   1c638:	e74e      	b.n	1c4d8 <__adddf3+0x8c>
   1c63a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   1c63e:	bf18      	it	ne
   1c640:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   1c644:	d029      	beq.n	1c69a <__adddf3+0x24e>
   1c646:	ea94 0f05 	teq	r4, r5
   1c64a:	bf08      	it	eq
   1c64c:	ea90 0f02 	teqeq	r0, r2
   1c650:	d005      	beq.n	1c65e <__adddf3+0x212>
   1c652:	ea54 0c00 	orrs.w	ip, r4, r0
   1c656:	bf04      	itt	eq
   1c658:	4619      	moveq	r1, r3
   1c65a:	4610      	moveq	r0, r2
   1c65c:	bd30      	pop	{r4, r5, pc}
   1c65e:	ea91 0f03 	teq	r1, r3
   1c662:	bf1e      	ittt	ne
   1c664:	2100      	movne	r1, #0
   1c666:	2000      	movne	r0, #0
   1c668:	bd30      	popne	{r4, r5, pc}
   1c66a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   1c66e:	d105      	bne.n	1c67c <__adddf3+0x230>
   1c670:	0040      	lsls	r0, r0, #1
   1c672:	4149      	adcs	r1, r1
   1c674:	bf28      	it	cs
   1c676:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   1c67a:	bd30      	pop	{r4, r5, pc}
   1c67c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   1c680:	bf3c      	itt	cc
   1c682:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   1c686:	bd30      	popcc	{r4, r5, pc}
   1c688:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   1c68c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   1c690:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   1c694:	f04f 0000 	mov.w	r0, #0
   1c698:	bd30      	pop	{r4, r5, pc}
   1c69a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   1c69e:	bf1a      	itte	ne
   1c6a0:	4619      	movne	r1, r3
   1c6a2:	4610      	movne	r0, r2
   1c6a4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   1c6a8:	bf1c      	itt	ne
   1c6aa:	460b      	movne	r3, r1
   1c6ac:	4602      	movne	r2, r0
   1c6ae:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   1c6b2:	bf06      	itte	eq
   1c6b4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   1c6b8:	ea91 0f03 	teqeq	r1, r3
   1c6bc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   1c6c0:	bd30      	pop	{r4, r5, pc}
   1c6c2:	bf00      	nop

0001c6c4 <__aeabi_ui2d>:
   1c6c4:	f090 0f00 	teq	r0, #0
   1c6c8:	bf04      	itt	eq
   1c6ca:	2100      	moveq	r1, #0
   1c6cc:	4770      	bxeq	lr
   1c6ce:	b530      	push	{r4, r5, lr}
   1c6d0:	f44f 6480 	mov.w	r4, #1024	; 0x400
   1c6d4:	f104 0432 	add.w	r4, r4, #50	; 0x32
   1c6d8:	f04f 0500 	mov.w	r5, #0
   1c6dc:	f04f 0100 	mov.w	r1, #0
   1c6e0:	e750      	b.n	1c584 <__adddf3+0x138>
   1c6e2:	bf00      	nop

0001c6e4 <__aeabi_i2d>:
   1c6e4:	f090 0f00 	teq	r0, #0
   1c6e8:	bf04      	itt	eq
   1c6ea:	2100      	moveq	r1, #0
   1c6ec:	4770      	bxeq	lr
   1c6ee:	b530      	push	{r4, r5, lr}
   1c6f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
   1c6f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
   1c6f8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   1c6fc:	bf48      	it	mi
   1c6fe:	4240      	negmi	r0, r0
   1c700:	f04f 0100 	mov.w	r1, #0
   1c704:	e73e      	b.n	1c584 <__adddf3+0x138>
   1c706:	bf00      	nop

0001c708 <__aeabi_f2d>:
   1c708:	0042      	lsls	r2, r0, #1
   1c70a:	ea4f 01e2 	mov.w	r1, r2, asr #3
   1c70e:	ea4f 0131 	mov.w	r1, r1, rrx
   1c712:	ea4f 7002 	mov.w	r0, r2, lsl #28
   1c716:	bf1f      	itttt	ne
   1c718:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   1c71c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   1c720:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   1c724:	4770      	bxne	lr
   1c726:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
   1c72a:	bf08      	it	eq
   1c72c:	4770      	bxeq	lr
   1c72e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
   1c732:	bf04      	itt	eq
   1c734:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
   1c738:	4770      	bxeq	lr
   1c73a:	b530      	push	{r4, r5, lr}
   1c73c:	f44f 7460 	mov.w	r4, #896	; 0x380
   1c740:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   1c744:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   1c748:	e71c      	b.n	1c584 <__adddf3+0x138>
   1c74a:	bf00      	nop

0001c74c <__aeabi_ul2d>:
   1c74c:	ea50 0201 	orrs.w	r2, r0, r1
   1c750:	bf08      	it	eq
   1c752:	4770      	bxeq	lr
   1c754:	b530      	push	{r4, r5, lr}
   1c756:	f04f 0500 	mov.w	r5, #0
   1c75a:	e00a      	b.n	1c772 <__aeabi_l2d+0x16>

0001c75c <__aeabi_l2d>:
   1c75c:	ea50 0201 	orrs.w	r2, r0, r1
   1c760:	bf08      	it	eq
   1c762:	4770      	bxeq	lr
   1c764:	b530      	push	{r4, r5, lr}
   1c766:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   1c76a:	d502      	bpl.n	1c772 <__aeabi_l2d+0x16>
   1c76c:	4240      	negs	r0, r0
   1c76e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   1c772:	f44f 6480 	mov.w	r4, #1024	; 0x400
   1c776:	f104 0432 	add.w	r4, r4, #50	; 0x32
   1c77a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   1c77e:	f43f aed8 	beq.w	1c532 <__adddf3+0xe6>
   1c782:	f04f 0203 	mov.w	r2, #3
   1c786:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   1c78a:	bf18      	it	ne
   1c78c:	3203      	addne	r2, #3
   1c78e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   1c792:	bf18      	it	ne
   1c794:	3203      	addne	r2, #3
   1c796:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   1c79a:	f1c2 0320 	rsb	r3, r2, #32
   1c79e:	fa00 fc03 	lsl.w	ip, r0, r3
   1c7a2:	fa20 f002 	lsr.w	r0, r0, r2
   1c7a6:	fa01 fe03 	lsl.w	lr, r1, r3
   1c7aa:	ea40 000e 	orr.w	r0, r0, lr
   1c7ae:	fa21 f102 	lsr.w	r1, r1, r2
   1c7b2:	4414      	add	r4, r2
   1c7b4:	e6bd      	b.n	1c532 <__adddf3+0xe6>
   1c7b6:	bf00      	nop

0001c7b8 <__aeabi_dmul>:
   1c7b8:	b570      	push	{r4, r5, r6, lr}
   1c7ba:	f04f 0cff 	mov.w	ip, #255	; 0xff
   1c7be:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   1c7c2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   1c7c6:	bf1d      	ittte	ne
   1c7c8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   1c7cc:	ea94 0f0c 	teqne	r4, ip
   1c7d0:	ea95 0f0c 	teqne	r5, ip
   1c7d4:	f000 f8de 	bleq	1c994 <__aeabi_dmul+0x1dc>
   1c7d8:	442c      	add	r4, r5
   1c7da:	ea81 0603 	eor.w	r6, r1, r3
   1c7de:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   1c7e2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   1c7e6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   1c7ea:	bf18      	it	ne
   1c7ec:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   1c7f0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   1c7f4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   1c7f8:	d038      	beq.n	1c86c <__aeabi_dmul+0xb4>
   1c7fa:	fba0 ce02 	umull	ip, lr, r0, r2
   1c7fe:	f04f 0500 	mov.w	r5, #0
   1c802:	fbe1 e502 	umlal	lr, r5, r1, r2
   1c806:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   1c80a:	fbe0 e503 	umlal	lr, r5, r0, r3
   1c80e:	f04f 0600 	mov.w	r6, #0
   1c812:	fbe1 5603 	umlal	r5, r6, r1, r3
   1c816:	f09c 0f00 	teq	ip, #0
   1c81a:	bf18      	it	ne
   1c81c:	f04e 0e01 	orrne.w	lr, lr, #1
   1c820:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   1c824:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   1c828:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   1c82c:	d204      	bcs.n	1c838 <__aeabi_dmul+0x80>
   1c82e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   1c832:	416d      	adcs	r5, r5
   1c834:	eb46 0606 	adc.w	r6, r6, r6
   1c838:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   1c83c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   1c840:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   1c844:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   1c848:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   1c84c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   1c850:	bf88      	it	hi
   1c852:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   1c856:	d81e      	bhi.n	1c896 <__aeabi_dmul+0xde>
   1c858:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   1c85c:	bf08      	it	eq
   1c85e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   1c862:	f150 0000 	adcs.w	r0, r0, #0
   1c866:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   1c86a:	bd70      	pop	{r4, r5, r6, pc}
   1c86c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   1c870:	ea46 0101 	orr.w	r1, r6, r1
   1c874:	ea40 0002 	orr.w	r0, r0, r2
   1c878:	ea81 0103 	eor.w	r1, r1, r3
   1c87c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   1c880:	bfc2      	ittt	gt
   1c882:	ebd4 050c 	rsbsgt	r5, r4, ip
   1c886:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   1c88a:	bd70      	popgt	{r4, r5, r6, pc}
   1c88c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   1c890:	f04f 0e00 	mov.w	lr, #0
   1c894:	3c01      	subs	r4, #1
   1c896:	f300 80ab 	bgt.w	1c9f0 <__aeabi_dmul+0x238>
   1c89a:	f114 0f36 	cmn.w	r4, #54	; 0x36
   1c89e:	bfde      	ittt	le
   1c8a0:	2000      	movle	r0, #0
   1c8a2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   1c8a6:	bd70      	pople	{r4, r5, r6, pc}
   1c8a8:	f1c4 0400 	rsb	r4, r4, #0
   1c8ac:	3c20      	subs	r4, #32
   1c8ae:	da35      	bge.n	1c91c <__aeabi_dmul+0x164>
   1c8b0:	340c      	adds	r4, #12
   1c8b2:	dc1b      	bgt.n	1c8ec <__aeabi_dmul+0x134>
   1c8b4:	f104 0414 	add.w	r4, r4, #20
   1c8b8:	f1c4 0520 	rsb	r5, r4, #32
   1c8bc:	fa00 f305 	lsl.w	r3, r0, r5
   1c8c0:	fa20 f004 	lsr.w	r0, r0, r4
   1c8c4:	fa01 f205 	lsl.w	r2, r1, r5
   1c8c8:	ea40 0002 	orr.w	r0, r0, r2
   1c8cc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   1c8d0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   1c8d4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   1c8d8:	fa21 f604 	lsr.w	r6, r1, r4
   1c8dc:	eb42 0106 	adc.w	r1, r2, r6
   1c8e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   1c8e4:	bf08      	it	eq
   1c8e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   1c8ea:	bd70      	pop	{r4, r5, r6, pc}
   1c8ec:	f1c4 040c 	rsb	r4, r4, #12
   1c8f0:	f1c4 0520 	rsb	r5, r4, #32
   1c8f4:	fa00 f304 	lsl.w	r3, r0, r4
   1c8f8:	fa20 f005 	lsr.w	r0, r0, r5
   1c8fc:	fa01 f204 	lsl.w	r2, r1, r4
   1c900:	ea40 0002 	orr.w	r0, r0, r2
   1c904:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   1c908:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   1c90c:	f141 0100 	adc.w	r1, r1, #0
   1c910:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   1c914:	bf08      	it	eq
   1c916:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   1c91a:	bd70      	pop	{r4, r5, r6, pc}
   1c91c:	f1c4 0520 	rsb	r5, r4, #32
   1c920:	fa00 f205 	lsl.w	r2, r0, r5
   1c924:	ea4e 0e02 	orr.w	lr, lr, r2
   1c928:	fa20 f304 	lsr.w	r3, r0, r4
   1c92c:	fa01 f205 	lsl.w	r2, r1, r5
   1c930:	ea43 0302 	orr.w	r3, r3, r2
   1c934:	fa21 f004 	lsr.w	r0, r1, r4
   1c938:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   1c93c:	fa21 f204 	lsr.w	r2, r1, r4
   1c940:	ea20 0002 	bic.w	r0, r0, r2
   1c944:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   1c948:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   1c94c:	bf08      	it	eq
   1c94e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   1c952:	bd70      	pop	{r4, r5, r6, pc}
   1c954:	f094 0f00 	teq	r4, #0
   1c958:	d10f      	bne.n	1c97a <__aeabi_dmul+0x1c2>
   1c95a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   1c95e:	0040      	lsls	r0, r0, #1
   1c960:	eb41 0101 	adc.w	r1, r1, r1
   1c964:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   1c968:	bf08      	it	eq
   1c96a:	3c01      	subeq	r4, #1
   1c96c:	d0f7      	beq.n	1c95e <__aeabi_dmul+0x1a6>
   1c96e:	ea41 0106 	orr.w	r1, r1, r6
   1c972:	f095 0f00 	teq	r5, #0
   1c976:	bf18      	it	ne
   1c978:	4770      	bxne	lr
   1c97a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   1c97e:	0052      	lsls	r2, r2, #1
   1c980:	eb43 0303 	adc.w	r3, r3, r3
   1c984:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   1c988:	bf08      	it	eq
   1c98a:	3d01      	subeq	r5, #1
   1c98c:	d0f7      	beq.n	1c97e <__aeabi_dmul+0x1c6>
   1c98e:	ea43 0306 	orr.w	r3, r3, r6
   1c992:	4770      	bx	lr
   1c994:	ea94 0f0c 	teq	r4, ip
   1c998:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   1c99c:	bf18      	it	ne
   1c99e:	ea95 0f0c 	teqne	r5, ip
   1c9a2:	d00c      	beq.n	1c9be <__aeabi_dmul+0x206>
   1c9a4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   1c9a8:	bf18      	it	ne
   1c9aa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   1c9ae:	d1d1      	bne.n	1c954 <__aeabi_dmul+0x19c>
   1c9b0:	ea81 0103 	eor.w	r1, r1, r3
   1c9b4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   1c9b8:	f04f 0000 	mov.w	r0, #0
   1c9bc:	bd70      	pop	{r4, r5, r6, pc}
   1c9be:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   1c9c2:	bf06      	itte	eq
   1c9c4:	4610      	moveq	r0, r2
   1c9c6:	4619      	moveq	r1, r3
   1c9c8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   1c9cc:	d019      	beq.n	1ca02 <__aeabi_dmul+0x24a>
   1c9ce:	ea94 0f0c 	teq	r4, ip
   1c9d2:	d102      	bne.n	1c9da <__aeabi_dmul+0x222>
   1c9d4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   1c9d8:	d113      	bne.n	1ca02 <__aeabi_dmul+0x24a>
   1c9da:	ea95 0f0c 	teq	r5, ip
   1c9de:	d105      	bne.n	1c9ec <__aeabi_dmul+0x234>
   1c9e0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   1c9e4:	bf1c      	itt	ne
   1c9e6:	4610      	movne	r0, r2
   1c9e8:	4619      	movne	r1, r3
   1c9ea:	d10a      	bne.n	1ca02 <__aeabi_dmul+0x24a>
   1c9ec:	ea81 0103 	eor.w	r1, r1, r3
   1c9f0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   1c9f4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   1c9f8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   1c9fc:	f04f 0000 	mov.w	r0, #0
   1ca00:	bd70      	pop	{r4, r5, r6, pc}
   1ca02:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   1ca06:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   1ca0a:	bd70      	pop	{r4, r5, r6, pc}

0001ca0c <__aeabi_ddiv>:
   1ca0c:	b570      	push	{r4, r5, r6, lr}
   1ca0e:	f04f 0cff 	mov.w	ip, #255	; 0xff
   1ca12:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   1ca16:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   1ca1a:	bf1d      	ittte	ne
   1ca1c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   1ca20:	ea94 0f0c 	teqne	r4, ip
   1ca24:	ea95 0f0c 	teqne	r5, ip
   1ca28:	f000 f8a7 	bleq	1cb7a <__aeabi_ddiv+0x16e>
   1ca2c:	eba4 0405 	sub.w	r4, r4, r5
   1ca30:	ea81 0e03 	eor.w	lr, r1, r3
   1ca34:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   1ca38:	ea4f 3101 	mov.w	r1, r1, lsl #12
   1ca3c:	f000 8088 	beq.w	1cb50 <__aeabi_ddiv+0x144>
   1ca40:	ea4f 3303 	mov.w	r3, r3, lsl #12
   1ca44:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   1ca48:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   1ca4c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   1ca50:	ea4f 2202 	mov.w	r2, r2, lsl #8
   1ca54:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   1ca58:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   1ca5c:	ea4f 2600 	mov.w	r6, r0, lsl #8
   1ca60:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   1ca64:	429d      	cmp	r5, r3
   1ca66:	bf08      	it	eq
   1ca68:	4296      	cmpeq	r6, r2
   1ca6a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   1ca6e:	f504 7440 	add.w	r4, r4, #768	; 0x300
   1ca72:	d202      	bcs.n	1ca7a <__aeabi_ddiv+0x6e>
   1ca74:	085b      	lsrs	r3, r3, #1
   1ca76:	ea4f 0232 	mov.w	r2, r2, rrx
   1ca7a:	1ab6      	subs	r6, r6, r2
   1ca7c:	eb65 0503 	sbc.w	r5, r5, r3
   1ca80:	085b      	lsrs	r3, r3, #1
   1ca82:	ea4f 0232 	mov.w	r2, r2, rrx
   1ca86:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   1ca8a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   1ca8e:	ebb6 0e02 	subs.w	lr, r6, r2
   1ca92:	eb75 0e03 	sbcs.w	lr, r5, r3
   1ca96:	bf22      	ittt	cs
   1ca98:	1ab6      	subcs	r6, r6, r2
   1ca9a:	4675      	movcs	r5, lr
   1ca9c:	ea40 000c 	orrcs.w	r0, r0, ip
   1caa0:	085b      	lsrs	r3, r3, #1
   1caa2:	ea4f 0232 	mov.w	r2, r2, rrx
   1caa6:	ebb6 0e02 	subs.w	lr, r6, r2
   1caaa:	eb75 0e03 	sbcs.w	lr, r5, r3
   1caae:	bf22      	ittt	cs
   1cab0:	1ab6      	subcs	r6, r6, r2
   1cab2:	4675      	movcs	r5, lr
   1cab4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   1cab8:	085b      	lsrs	r3, r3, #1
   1caba:	ea4f 0232 	mov.w	r2, r2, rrx
   1cabe:	ebb6 0e02 	subs.w	lr, r6, r2
   1cac2:	eb75 0e03 	sbcs.w	lr, r5, r3
   1cac6:	bf22      	ittt	cs
   1cac8:	1ab6      	subcs	r6, r6, r2
   1caca:	4675      	movcs	r5, lr
   1cacc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   1cad0:	085b      	lsrs	r3, r3, #1
   1cad2:	ea4f 0232 	mov.w	r2, r2, rrx
   1cad6:	ebb6 0e02 	subs.w	lr, r6, r2
   1cada:	eb75 0e03 	sbcs.w	lr, r5, r3
   1cade:	bf22      	ittt	cs
   1cae0:	1ab6      	subcs	r6, r6, r2
   1cae2:	4675      	movcs	r5, lr
   1cae4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   1cae8:	ea55 0e06 	orrs.w	lr, r5, r6
   1caec:	d018      	beq.n	1cb20 <__aeabi_ddiv+0x114>
   1caee:	ea4f 1505 	mov.w	r5, r5, lsl #4
   1caf2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   1caf6:	ea4f 1606 	mov.w	r6, r6, lsl #4
   1cafa:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   1cafe:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   1cb02:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   1cb06:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   1cb0a:	d1c0      	bne.n	1ca8e <__aeabi_ddiv+0x82>
   1cb0c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   1cb10:	d10b      	bne.n	1cb2a <__aeabi_ddiv+0x11e>
   1cb12:	ea41 0100 	orr.w	r1, r1, r0
   1cb16:	f04f 0000 	mov.w	r0, #0
   1cb1a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   1cb1e:	e7b6      	b.n	1ca8e <__aeabi_ddiv+0x82>
   1cb20:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   1cb24:	bf04      	itt	eq
   1cb26:	4301      	orreq	r1, r0
   1cb28:	2000      	moveq	r0, #0
   1cb2a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   1cb2e:	bf88      	it	hi
   1cb30:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   1cb34:	f63f aeaf 	bhi.w	1c896 <__aeabi_dmul+0xde>
   1cb38:	ebb5 0c03 	subs.w	ip, r5, r3
   1cb3c:	bf04      	itt	eq
   1cb3e:	ebb6 0c02 	subseq.w	ip, r6, r2
   1cb42:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   1cb46:	f150 0000 	adcs.w	r0, r0, #0
   1cb4a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   1cb4e:	bd70      	pop	{r4, r5, r6, pc}
   1cb50:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   1cb54:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   1cb58:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   1cb5c:	bfc2      	ittt	gt
   1cb5e:	ebd4 050c 	rsbsgt	r5, r4, ip
   1cb62:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   1cb66:	bd70      	popgt	{r4, r5, r6, pc}
   1cb68:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   1cb6c:	f04f 0e00 	mov.w	lr, #0
   1cb70:	3c01      	subs	r4, #1
   1cb72:	e690      	b.n	1c896 <__aeabi_dmul+0xde>
   1cb74:	ea45 0e06 	orr.w	lr, r5, r6
   1cb78:	e68d      	b.n	1c896 <__aeabi_dmul+0xde>
   1cb7a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   1cb7e:	ea94 0f0c 	teq	r4, ip
   1cb82:	bf08      	it	eq
   1cb84:	ea95 0f0c 	teqeq	r5, ip
   1cb88:	f43f af3b 	beq.w	1ca02 <__aeabi_dmul+0x24a>
   1cb8c:	ea94 0f0c 	teq	r4, ip
   1cb90:	d10a      	bne.n	1cba8 <__aeabi_ddiv+0x19c>
   1cb92:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   1cb96:	f47f af34 	bne.w	1ca02 <__aeabi_dmul+0x24a>
   1cb9a:	ea95 0f0c 	teq	r5, ip
   1cb9e:	f47f af25 	bne.w	1c9ec <__aeabi_dmul+0x234>
   1cba2:	4610      	mov	r0, r2
   1cba4:	4619      	mov	r1, r3
   1cba6:	e72c      	b.n	1ca02 <__aeabi_dmul+0x24a>
   1cba8:	ea95 0f0c 	teq	r5, ip
   1cbac:	d106      	bne.n	1cbbc <__aeabi_ddiv+0x1b0>
   1cbae:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   1cbb2:	f43f aefd 	beq.w	1c9b0 <__aeabi_dmul+0x1f8>
   1cbb6:	4610      	mov	r0, r2
   1cbb8:	4619      	mov	r1, r3
   1cbba:	e722      	b.n	1ca02 <__aeabi_dmul+0x24a>
   1cbbc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   1cbc0:	bf18      	it	ne
   1cbc2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   1cbc6:	f47f aec5 	bne.w	1c954 <__aeabi_dmul+0x19c>
   1cbca:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   1cbce:	f47f af0d 	bne.w	1c9ec <__aeabi_dmul+0x234>
   1cbd2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   1cbd6:	f47f aeeb 	bne.w	1c9b0 <__aeabi_dmul+0x1f8>
   1cbda:	e712      	b.n	1ca02 <__aeabi_dmul+0x24a>

0001cbdc <__gedf2>:
   1cbdc:	f04f 3cff 	mov.w	ip, #4294967295
   1cbe0:	e006      	b.n	1cbf0 <__cmpdf2+0x4>
   1cbe2:	bf00      	nop

0001cbe4 <__ledf2>:
   1cbe4:	f04f 0c01 	mov.w	ip, #1
   1cbe8:	e002      	b.n	1cbf0 <__cmpdf2+0x4>
   1cbea:	bf00      	nop

0001cbec <__cmpdf2>:
   1cbec:	f04f 0c01 	mov.w	ip, #1
   1cbf0:	f84d cd04 	str.w	ip, [sp, #-4]!
   1cbf4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   1cbf8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   1cbfc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   1cc00:	bf18      	it	ne
   1cc02:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
   1cc06:	d01b      	beq.n	1cc40 <__cmpdf2+0x54>
   1cc08:	b001      	add	sp, #4
   1cc0a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
   1cc0e:	bf0c      	ite	eq
   1cc10:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
   1cc14:	ea91 0f03 	teqne	r1, r3
   1cc18:	bf02      	ittt	eq
   1cc1a:	ea90 0f02 	teqeq	r0, r2
   1cc1e:	2000      	moveq	r0, #0
   1cc20:	4770      	bxeq	lr
   1cc22:	f110 0f00 	cmn.w	r0, #0
   1cc26:	ea91 0f03 	teq	r1, r3
   1cc2a:	bf58      	it	pl
   1cc2c:	4299      	cmppl	r1, r3
   1cc2e:	bf08      	it	eq
   1cc30:	4290      	cmpeq	r0, r2
   1cc32:	bf2c      	ite	cs
   1cc34:	17d8      	asrcs	r0, r3, #31
   1cc36:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
   1cc3a:	f040 0001 	orr.w	r0, r0, #1
   1cc3e:	4770      	bx	lr
   1cc40:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   1cc44:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   1cc48:	d102      	bne.n	1cc50 <__cmpdf2+0x64>
   1cc4a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   1cc4e:	d107      	bne.n	1cc60 <__cmpdf2+0x74>
   1cc50:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   1cc54:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   1cc58:	d1d6      	bne.n	1cc08 <__cmpdf2+0x1c>
   1cc5a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   1cc5e:	d0d3      	beq.n	1cc08 <__cmpdf2+0x1c>
   1cc60:	f85d 0b04 	ldr.w	r0, [sp], #4
   1cc64:	4770      	bx	lr
   1cc66:	bf00      	nop

0001cc68 <__aeabi_cdrcmple>:
   1cc68:	4684      	mov	ip, r0
   1cc6a:	4610      	mov	r0, r2
   1cc6c:	4662      	mov	r2, ip
   1cc6e:	468c      	mov	ip, r1
   1cc70:	4619      	mov	r1, r3
   1cc72:	4663      	mov	r3, ip
   1cc74:	e000      	b.n	1cc78 <__aeabi_cdcmpeq>
   1cc76:	bf00      	nop

0001cc78 <__aeabi_cdcmpeq>:
   1cc78:	b501      	push	{r0, lr}
   1cc7a:	f7ff ffb7 	bl	1cbec <__cmpdf2>
   1cc7e:	2800      	cmp	r0, #0
   1cc80:	bf48      	it	mi
   1cc82:	f110 0f00 	cmnmi.w	r0, #0
   1cc86:	bd01      	pop	{r0, pc}

0001cc88 <__aeabi_dcmpeq>:
   1cc88:	f84d ed08 	str.w	lr, [sp, #-8]!
   1cc8c:	f7ff fff4 	bl	1cc78 <__aeabi_cdcmpeq>
   1cc90:	bf0c      	ite	eq
   1cc92:	2001      	moveq	r0, #1
   1cc94:	2000      	movne	r0, #0
   1cc96:	f85d fb08 	ldr.w	pc, [sp], #8
   1cc9a:	bf00      	nop

0001cc9c <__aeabi_dcmplt>:
   1cc9c:	f84d ed08 	str.w	lr, [sp, #-8]!
   1cca0:	f7ff ffea 	bl	1cc78 <__aeabi_cdcmpeq>
   1cca4:	bf34      	ite	cc
   1cca6:	2001      	movcc	r0, #1
   1cca8:	2000      	movcs	r0, #0
   1ccaa:	f85d fb08 	ldr.w	pc, [sp], #8
   1ccae:	bf00      	nop

0001ccb0 <__aeabi_dcmple>:
   1ccb0:	f84d ed08 	str.w	lr, [sp, #-8]!
   1ccb4:	f7ff ffe0 	bl	1cc78 <__aeabi_cdcmpeq>
   1ccb8:	bf94      	ite	ls
   1ccba:	2001      	movls	r0, #1
   1ccbc:	2000      	movhi	r0, #0
   1ccbe:	f85d fb08 	ldr.w	pc, [sp], #8
   1ccc2:	bf00      	nop

0001ccc4 <__aeabi_dcmpge>:
   1ccc4:	f84d ed08 	str.w	lr, [sp, #-8]!
   1ccc8:	f7ff ffce 	bl	1cc68 <__aeabi_cdrcmple>
   1cccc:	bf94      	ite	ls
   1ccce:	2001      	movls	r0, #1
   1ccd0:	2000      	movhi	r0, #0
   1ccd2:	f85d fb08 	ldr.w	pc, [sp], #8
   1ccd6:	bf00      	nop

0001ccd8 <__aeabi_dcmpgt>:
   1ccd8:	f84d ed08 	str.w	lr, [sp, #-8]!
   1ccdc:	f7ff ffc4 	bl	1cc68 <__aeabi_cdrcmple>
   1cce0:	bf34      	ite	cc
   1cce2:	2001      	movcc	r0, #1
   1cce4:	2000      	movcs	r0, #0
   1cce6:	f85d fb08 	ldr.w	pc, [sp], #8
   1ccea:	bf00      	nop

0001ccec <__aeabi_d2iz>:
   1ccec:	ea4f 0241 	mov.w	r2, r1, lsl #1
   1ccf0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   1ccf4:	d215      	bcs.n	1cd22 <__aeabi_d2iz+0x36>
   1ccf6:	d511      	bpl.n	1cd1c <__aeabi_d2iz+0x30>
   1ccf8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   1ccfc:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   1cd00:	d912      	bls.n	1cd28 <__aeabi_d2iz+0x3c>
   1cd02:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   1cd06:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   1cd0a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   1cd0e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   1cd12:	fa23 f002 	lsr.w	r0, r3, r2
   1cd16:	bf18      	it	ne
   1cd18:	4240      	negne	r0, r0
   1cd1a:	4770      	bx	lr
   1cd1c:	f04f 0000 	mov.w	r0, #0
   1cd20:	4770      	bx	lr
   1cd22:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   1cd26:	d105      	bne.n	1cd34 <__aeabi_d2iz+0x48>
   1cd28:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
   1cd2c:	bf08      	it	eq
   1cd2e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   1cd32:	4770      	bx	lr
   1cd34:	f04f 0000 	mov.w	r0, #0
   1cd38:	4770      	bx	lr
   1cd3a:	bf00      	nop

0001cd3c <__aeabi_ldivmod>:
   1cd3c:	b97b      	cbnz	r3, 1cd5e <__aeabi_ldivmod+0x22>
   1cd3e:	b972      	cbnz	r2, 1cd5e <__aeabi_ldivmod+0x22>
   1cd40:	2900      	cmp	r1, #0
   1cd42:	bfbe      	ittt	lt
   1cd44:	2000      	movlt	r0, #0
   1cd46:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
   1cd4a:	e006      	blt.n	1cd5a <__aeabi_ldivmod+0x1e>
   1cd4c:	bf08      	it	eq
   1cd4e:	2800      	cmpeq	r0, #0
   1cd50:	bf1c      	itt	ne
   1cd52:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
   1cd56:	f04f 30ff 	movne.w	r0, #4294967295
   1cd5a:	f000 b9bb 	b.w	1d0d4 <__aeabi_idiv0>
   1cd5e:	f1ad 0c08 	sub.w	ip, sp, #8
   1cd62:	e96d ce04 	strd	ip, lr, [sp, #-16]!
   1cd66:	2900      	cmp	r1, #0
   1cd68:	db09      	blt.n	1cd7e <__aeabi_ldivmod+0x42>
   1cd6a:	2b00      	cmp	r3, #0
   1cd6c:	db1a      	blt.n	1cda4 <__aeabi_ldivmod+0x68>
   1cd6e:	f000 f84d 	bl	1ce0c <__udivmoddi4>
   1cd72:	f8dd e004 	ldr.w	lr, [sp, #4]
   1cd76:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   1cd7a:	b004      	add	sp, #16
   1cd7c:	4770      	bx	lr
   1cd7e:	4240      	negs	r0, r0
   1cd80:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   1cd84:	2b00      	cmp	r3, #0
   1cd86:	db1b      	blt.n	1cdc0 <__aeabi_ldivmod+0x84>
   1cd88:	f000 f840 	bl	1ce0c <__udivmoddi4>
   1cd8c:	f8dd e004 	ldr.w	lr, [sp, #4]
   1cd90:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   1cd94:	b004      	add	sp, #16
   1cd96:	4240      	negs	r0, r0
   1cd98:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   1cd9c:	4252      	negs	r2, r2
   1cd9e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   1cda2:	4770      	bx	lr
   1cda4:	4252      	negs	r2, r2
   1cda6:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   1cdaa:	f000 f82f 	bl	1ce0c <__udivmoddi4>
   1cdae:	f8dd e004 	ldr.w	lr, [sp, #4]
   1cdb2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   1cdb6:	b004      	add	sp, #16
   1cdb8:	4240      	negs	r0, r0
   1cdba:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   1cdbe:	4770      	bx	lr
   1cdc0:	4252      	negs	r2, r2
   1cdc2:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   1cdc6:	f000 f821 	bl	1ce0c <__udivmoddi4>
   1cdca:	f8dd e004 	ldr.w	lr, [sp, #4]
   1cdce:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   1cdd2:	b004      	add	sp, #16
   1cdd4:	4252      	negs	r2, r2
   1cdd6:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   1cdda:	4770      	bx	lr

0001cddc <__aeabi_uldivmod>:
   1cddc:	b953      	cbnz	r3, 1cdf4 <__aeabi_uldivmod+0x18>
   1cdde:	b94a      	cbnz	r2, 1cdf4 <__aeabi_uldivmod+0x18>
   1cde0:	2900      	cmp	r1, #0
   1cde2:	bf08      	it	eq
   1cde4:	2800      	cmpeq	r0, #0
   1cde6:	bf1c      	itt	ne
   1cde8:	f04f 31ff 	movne.w	r1, #4294967295
   1cdec:	f04f 30ff 	movne.w	r0, #4294967295
   1cdf0:	f000 b970 	b.w	1d0d4 <__aeabi_idiv0>
   1cdf4:	f1ad 0c08 	sub.w	ip, sp, #8
   1cdf8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
   1cdfc:	f000 f806 	bl	1ce0c <__udivmoddi4>
   1ce00:	f8dd e004 	ldr.w	lr, [sp, #4]
   1ce04:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   1ce08:	b004      	add	sp, #16
   1ce0a:	4770      	bx	lr

0001ce0c <__udivmoddi4>:
   1ce0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1ce10:	9e09      	ldr	r6, [sp, #36]	; 0x24
   1ce12:	4604      	mov	r4, r0
   1ce14:	4689      	mov	r9, r1
   1ce16:	2b00      	cmp	r3, #0
   1ce18:	f040 8083 	bne.w	1cf22 <__udivmoddi4+0x116>
   1ce1c:	428a      	cmp	r2, r1
   1ce1e:	4615      	mov	r5, r2
   1ce20:	d945      	bls.n	1ceae <__udivmoddi4+0xa2>
   1ce22:	fab2 f282 	clz	r2, r2
   1ce26:	b14a      	cbz	r2, 1ce3c <__udivmoddi4+0x30>
   1ce28:	f1c2 0720 	rsb	r7, r2, #32
   1ce2c:	fa01 f302 	lsl.w	r3, r1, r2
   1ce30:	4095      	lsls	r5, r2
   1ce32:	4094      	lsls	r4, r2
   1ce34:	fa20 f707 	lsr.w	r7, r0, r7
   1ce38:	ea47 0903 	orr.w	r9, r7, r3
   1ce3c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
   1ce40:	0c23      	lsrs	r3, r4, #16
   1ce42:	fa1f f885 	uxth.w	r8, r5
   1ce46:	fbb9 fcfe 	udiv	ip, r9, lr
   1ce4a:	fb0e 991c 	mls	r9, lr, ip, r9
   1ce4e:	fb0c f108 	mul.w	r1, ip, r8
   1ce52:	ea43 4309 	orr.w	r3, r3, r9, lsl #16
   1ce56:	4299      	cmp	r1, r3
   1ce58:	d90a      	bls.n	1ce70 <__udivmoddi4+0x64>
   1ce5a:	18eb      	adds	r3, r5, r3
   1ce5c:	bf2c      	ite	cs
   1ce5e:	2001      	movcs	r0, #1
   1ce60:	2000      	movcc	r0, #0
   1ce62:	4299      	cmp	r1, r3
   1ce64:	d902      	bls.n	1ce6c <__udivmoddi4+0x60>
   1ce66:	2800      	cmp	r0, #0
   1ce68:	f000 811d 	beq.w	1d0a6 <__udivmoddi4+0x29a>
   1ce6c:	f10c 3cff 	add.w	ip, ip, #4294967295
   1ce70:	1a59      	subs	r1, r3, r1
   1ce72:	b2a3      	uxth	r3, r4
   1ce74:	fbb1 f0fe 	udiv	r0, r1, lr
   1ce78:	fb0e 1110 	mls	r1, lr, r0, r1
   1ce7c:	fb00 f808 	mul.w	r8, r0, r8
   1ce80:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
   1ce84:	45a0      	cmp	r8, r4
   1ce86:	d905      	bls.n	1ce94 <__udivmoddi4+0x88>
   1ce88:	192c      	adds	r4, r5, r4
   1ce8a:	d202      	bcs.n	1ce92 <__udivmoddi4+0x86>
   1ce8c:	45a0      	cmp	r8, r4
   1ce8e:	f200 810e 	bhi.w	1d0ae <__udivmoddi4+0x2a2>
   1ce92:	3801      	subs	r0, #1
   1ce94:	eba4 0408 	sub.w	r4, r4, r8
   1ce98:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
   1ce9c:	2700      	movs	r7, #0
   1ce9e:	b11e      	cbz	r6, 1cea8 <__udivmoddi4+0x9c>
   1cea0:	40d4      	lsrs	r4, r2
   1cea2:	2300      	movs	r3, #0
   1cea4:	e9c6 4300 	strd	r4, r3, [r6]
   1cea8:	4639      	mov	r1, r7
   1ceaa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1ceae:	2a00      	cmp	r2, #0
   1ceb0:	d051      	beq.n	1cf56 <__udivmoddi4+0x14a>
   1ceb2:	fab2 f282 	clz	r2, r2
   1ceb6:	2a00      	cmp	r2, #0
   1ceb8:	f040 80af 	bne.w	1d01a <__udivmoddi4+0x20e>
   1cebc:	1b49      	subs	r1, r1, r5
   1cebe:	ea4f 4e15 	mov.w	lr, r5, lsr #16
   1cec2:	fa1f f885 	uxth.w	r8, r5
   1cec6:	2701      	movs	r7, #1
   1cec8:	0c23      	lsrs	r3, r4, #16
   1ceca:	fbb1 fcfe 	udiv	ip, r1, lr
   1cece:	fb0e 111c 	mls	r1, lr, ip, r1
   1ced2:	fb08 f00c 	mul.w	r0, r8, ip
   1ced6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
   1ceda:	4298      	cmp	r0, r3
   1cedc:	d90a      	bls.n	1cef4 <__udivmoddi4+0xe8>
   1cede:	18eb      	adds	r3, r5, r3
   1cee0:	bf2c      	ite	cs
   1cee2:	2101      	movcs	r1, #1
   1cee4:	2100      	movcc	r1, #0
   1cee6:	4298      	cmp	r0, r3
   1cee8:	d902      	bls.n	1cef0 <__udivmoddi4+0xe4>
   1ceea:	2900      	cmp	r1, #0
   1ceec:	f000 80d7 	beq.w	1d09e <__udivmoddi4+0x292>
   1cef0:	f10c 3cff 	add.w	ip, ip, #4294967295
   1cef4:	1a19      	subs	r1, r3, r0
   1cef6:	b2a3      	uxth	r3, r4
   1cef8:	fbb1 f0fe 	udiv	r0, r1, lr
   1cefc:	fb0e 1110 	mls	r1, lr, r0, r1
   1cf00:	fb08 f800 	mul.w	r8, r8, r0
   1cf04:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
   1cf08:	45a0      	cmp	r8, r4
   1cf0a:	d905      	bls.n	1cf18 <__udivmoddi4+0x10c>
   1cf0c:	192c      	adds	r4, r5, r4
   1cf0e:	d202      	bcs.n	1cf16 <__udivmoddi4+0x10a>
   1cf10:	45a0      	cmp	r8, r4
   1cf12:	f200 80c1 	bhi.w	1d098 <__udivmoddi4+0x28c>
   1cf16:	3801      	subs	r0, #1
   1cf18:	eba4 0408 	sub.w	r4, r4, r8
   1cf1c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
   1cf20:	e7bd      	b.n	1ce9e <__udivmoddi4+0x92>
   1cf22:	428b      	cmp	r3, r1
   1cf24:	d908      	bls.n	1cf38 <__udivmoddi4+0x12c>
   1cf26:	2e00      	cmp	r6, #0
   1cf28:	d074      	beq.n	1d014 <__udivmoddi4+0x208>
   1cf2a:	2700      	movs	r7, #0
   1cf2c:	e9c6 0100 	strd	r0, r1, [r6]
   1cf30:	4638      	mov	r0, r7
   1cf32:	4639      	mov	r1, r7
   1cf34:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1cf38:	fab3 f783 	clz	r7, r3
   1cf3c:	b967      	cbnz	r7, 1cf58 <__udivmoddi4+0x14c>
   1cf3e:	428b      	cmp	r3, r1
   1cf40:	f0c0 80a4 	bcc.w	1d08c <__udivmoddi4+0x280>
   1cf44:	4282      	cmp	r2, r0
   1cf46:	f240 80a1 	bls.w	1d08c <__udivmoddi4+0x280>
   1cf4a:	4638      	mov	r0, r7
   1cf4c:	2e00      	cmp	r6, #0
   1cf4e:	d0ab      	beq.n	1cea8 <__udivmoddi4+0x9c>
   1cf50:	e9c6 4900 	strd	r4, r9, [r6]
   1cf54:	e7a8      	b.n	1cea8 <__udivmoddi4+0x9c>
   1cf56:	deff      	udf	#255	; 0xff
   1cf58:	f1c7 0520 	rsb	r5, r7, #32
   1cf5c:	40bb      	lsls	r3, r7
   1cf5e:	fa02 fc07 	lsl.w	ip, r2, r7
   1cf62:	fa01 f407 	lsl.w	r4, r1, r7
   1cf66:	40ea      	lsrs	r2, r5
   1cf68:	fa20 f805 	lsr.w	r8, r0, r5
   1cf6c:	40e9      	lsrs	r1, r5
   1cf6e:	fa00 fe07 	lsl.w	lr, r0, r7
   1cf72:	431a      	orrs	r2, r3
   1cf74:	ea48 0404 	orr.w	r4, r8, r4
   1cf78:	ea4f 4812 	mov.w	r8, r2, lsr #16
   1cf7c:	0c20      	lsrs	r0, r4, #16
   1cf7e:	fa1f f982 	uxth.w	r9, r2
   1cf82:	fbb1 faf8 	udiv	sl, r1, r8
   1cf86:	fb08 111a 	mls	r1, r8, sl, r1
   1cf8a:	fb0a fb09 	mul.w	fp, sl, r9
   1cf8e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
   1cf92:	458b      	cmp	fp, r1
   1cf94:	d90a      	bls.n	1cfac <__udivmoddi4+0x1a0>
   1cf96:	1851      	adds	r1, r2, r1
   1cf98:	bf2c      	ite	cs
   1cf9a:	2301      	movcs	r3, #1
   1cf9c:	2300      	movcc	r3, #0
   1cf9e:	458b      	cmp	fp, r1
   1cfa0:	d902      	bls.n	1cfa8 <__udivmoddi4+0x19c>
   1cfa2:	2b00      	cmp	r3, #0
   1cfa4:	f000 8088 	beq.w	1d0b8 <__udivmoddi4+0x2ac>
   1cfa8:	f10a 3aff 	add.w	sl, sl, #4294967295
   1cfac:	eba1 010b 	sub.w	r1, r1, fp
   1cfb0:	b2a4      	uxth	r4, r4
   1cfb2:	fbb1 f0f8 	udiv	r0, r1, r8
   1cfb6:	fb08 1110 	mls	r1, r8, r0, r1
   1cfba:	fb00 f909 	mul.w	r9, r0, r9
   1cfbe:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
   1cfc2:	4589      	cmp	r9, r1
   1cfc4:	d904      	bls.n	1cfd0 <__udivmoddi4+0x1c4>
   1cfc6:	1851      	adds	r1, r2, r1
   1cfc8:	d201      	bcs.n	1cfce <__udivmoddi4+0x1c2>
   1cfca:	4589      	cmp	r9, r1
   1cfcc:	d87b      	bhi.n	1d0c6 <__udivmoddi4+0x2ba>
   1cfce:	3801      	subs	r0, #1
   1cfd0:	ea40 400a 	orr.w	r0, r0, sl, lsl #16
   1cfd4:	eba1 0109 	sub.w	r1, r1, r9
   1cfd8:	fba0 890c 	umull	r8, r9, r0, ip
   1cfdc:	4549      	cmp	r1, r9
   1cfde:	4644      	mov	r4, r8
   1cfe0:	464b      	mov	r3, r9
   1cfe2:	d302      	bcc.n	1cfea <__udivmoddi4+0x1de>
   1cfe4:	d106      	bne.n	1cff4 <__udivmoddi4+0x1e8>
   1cfe6:	45c6      	cmp	lr, r8
   1cfe8:	d204      	bcs.n	1cff4 <__udivmoddi4+0x1e8>
   1cfea:	3801      	subs	r0, #1
   1cfec:	ebb8 040c 	subs.w	r4, r8, ip
   1cff0:	eb69 0302 	sbc.w	r3, r9, r2
   1cff4:	2e00      	cmp	r6, #0
   1cff6:	d05d      	beq.n	1d0b4 <__udivmoddi4+0x2a8>
   1cff8:	ebbe 0204 	subs.w	r2, lr, r4
   1cffc:	eb61 0103 	sbc.w	r1, r1, r3
   1d000:	fa01 f505 	lsl.w	r5, r1, r5
   1d004:	fa22 f307 	lsr.w	r3, r2, r7
   1d008:	40f9      	lsrs	r1, r7
   1d00a:	2700      	movs	r7, #0
   1d00c:	431d      	orrs	r5, r3
   1d00e:	e9c6 5100 	strd	r5, r1, [r6]
   1d012:	e749      	b.n	1cea8 <__udivmoddi4+0x9c>
   1d014:	4637      	mov	r7, r6
   1d016:	4630      	mov	r0, r6
   1d018:	e746      	b.n	1cea8 <__udivmoddi4+0x9c>
   1d01a:	f1c2 0020 	rsb	r0, r2, #32
   1d01e:	4095      	lsls	r5, r2
   1d020:	fa01 f702 	lsl.w	r7, r1, r2
   1d024:	fa21 f300 	lsr.w	r3, r1, r0
   1d028:	ea4f 4e15 	mov.w	lr, r5, lsr #16
   1d02c:	fa24 f100 	lsr.w	r1, r4, r0
   1d030:	fa1f f885 	uxth.w	r8, r5
   1d034:	4094      	lsls	r4, r2
   1d036:	4339      	orrs	r1, r7
   1d038:	fbb3 f0fe 	udiv	r0, r3, lr
   1d03c:	0c0f      	lsrs	r7, r1, #16
   1d03e:	fb0e 3310 	mls	r3, lr, r0, r3
   1d042:	fb00 fc08 	mul.w	ip, r0, r8
   1d046:	ea47 4303 	orr.w	r3, r7, r3, lsl #16
   1d04a:	459c      	cmp	ip, r3
   1d04c:	d907      	bls.n	1d05e <__udivmoddi4+0x252>
   1d04e:	18eb      	adds	r3, r5, r3
   1d050:	bf2c      	ite	cs
   1d052:	2701      	movcs	r7, #1
   1d054:	2700      	movcc	r7, #0
   1d056:	459c      	cmp	ip, r3
   1d058:	d900      	bls.n	1d05c <__udivmoddi4+0x250>
   1d05a:	b38f      	cbz	r7, 1d0c0 <__udivmoddi4+0x2b4>
   1d05c:	3801      	subs	r0, #1
   1d05e:	eba3 030c 	sub.w	r3, r3, ip
   1d062:	b289      	uxth	r1, r1
   1d064:	fbb3 f7fe 	udiv	r7, r3, lr
   1d068:	fb0e 3317 	mls	r3, lr, r7, r3
   1d06c:	fb07 fc08 	mul.w	ip, r7, r8
   1d070:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
   1d074:	458c      	cmp	ip, r1
   1d076:	d904      	bls.n	1d082 <__udivmoddi4+0x276>
   1d078:	1869      	adds	r1, r5, r1
   1d07a:	d201      	bcs.n	1d080 <__udivmoddi4+0x274>
   1d07c:	458c      	cmp	ip, r1
   1d07e:	d825      	bhi.n	1d0cc <__udivmoddi4+0x2c0>
   1d080:	3f01      	subs	r7, #1
   1d082:	eba1 010c 	sub.w	r1, r1, ip
   1d086:	ea47 4700 	orr.w	r7, r7, r0, lsl #16
   1d08a:	e71d      	b.n	1cec8 <__udivmoddi4+0xbc>
   1d08c:	1a84      	subs	r4, r0, r2
   1d08e:	eb61 0303 	sbc.w	r3, r1, r3
   1d092:	2001      	movs	r0, #1
   1d094:	4699      	mov	r9, r3
   1d096:	e759      	b.n	1cf4c <__udivmoddi4+0x140>
   1d098:	3802      	subs	r0, #2
   1d09a:	442c      	add	r4, r5
   1d09c:	e73c      	b.n	1cf18 <__udivmoddi4+0x10c>
   1d09e:	f1ac 0c02 	sub.w	ip, ip, #2
   1d0a2:	442b      	add	r3, r5
   1d0a4:	e726      	b.n	1cef4 <__udivmoddi4+0xe8>
   1d0a6:	f1ac 0c02 	sub.w	ip, ip, #2
   1d0aa:	442b      	add	r3, r5
   1d0ac:	e6e0      	b.n	1ce70 <__udivmoddi4+0x64>
   1d0ae:	3802      	subs	r0, #2
   1d0b0:	442c      	add	r4, r5
   1d0b2:	e6ef      	b.n	1ce94 <__udivmoddi4+0x88>
   1d0b4:	4637      	mov	r7, r6
   1d0b6:	e6f7      	b.n	1cea8 <__udivmoddi4+0x9c>
   1d0b8:	f1aa 0a02 	sub.w	sl, sl, #2
   1d0bc:	4411      	add	r1, r2
   1d0be:	e775      	b.n	1cfac <__udivmoddi4+0x1a0>
   1d0c0:	3802      	subs	r0, #2
   1d0c2:	442b      	add	r3, r5
   1d0c4:	e7cb      	b.n	1d05e <__udivmoddi4+0x252>
   1d0c6:	3802      	subs	r0, #2
   1d0c8:	4411      	add	r1, r2
   1d0ca:	e781      	b.n	1cfd0 <__udivmoddi4+0x1c4>
   1d0cc:	3f02      	subs	r7, #2
   1d0ce:	4429      	add	r1, r5
   1d0d0:	e7d7      	b.n	1d082 <__udivmoddi4+0x276>
   1d0d2:	bf00      	nop

0001d0d4 <__aeabi_idiv0>:
   1d0d4:	4770      	bx	lr
   1d0d6:	bf00      	nop

0001d0d8 <__aeabi_dcmpun>:
   1d0d8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   1d0dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   1d0e0:	d102      	bne.n	1d0e8 <__aeabi_dcmpun+0x10>
   1d0e2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   1d0e6:	d10a      	bne.n	1d0fe <__aeabi_dcmpun+0x26>
   1d0e8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   1d0ec:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   1d0f0:	d102      	bne.n	1d0f8 <__aeabi_dcmpun+0x20>
   1d0f2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   1d0f6:	d102      	bne.n	1d0fe <__aeabi_dcmpun+0x26>
   1d0f8:	f04f 0000 	mov.w	r0, #0
   1d0fc:	4770      	bx	lr
   1d0fe:	f04f 0001 	mov.w	r0, #1
   1d102:	4770      	bx	lr

0001d104 <strcmp>:
   1d104:	f810 2b01 	ldrb.w	r2, [r0], #1
   1d108:	f811 3b01 	ldrb.w	r3, [r1], #1
   1d10c:	2a01      	cmp	r2, #1
   1d10e:	bf28      	it	cs
   1d110:	429a      	cmpcs	r2, r3
   1d112:	d0f7      	beq.n	1d104 <strcmp>
   1d114:	1ad0      	subs	r0, r2, r3
   1d116:	4770      	bx	lr

0001d118 <strlen>:
   1d118:	4603      	mov	r3, r0
   1d11a:	f813 2b01 	ldrb.w	r2, [r3], #1
   1d11e:	2a00      	cmp	r2, #0
   1d120:	d1fb      	bne.n	1d11a <strlen+0x2>
   1d122:	1a18      	subs	r0, r3, r0
   1d124:	3801      	subs	r0, #1
   1d126:	4770      	bx	lr

0001d128 <orientation_detector_poll>:
static struct k_delayed_work flip_poll_work;
static u32_t timestamp;

int orientation_detector_poll(
	struct orientation_detector_sensor_data *sensor_data)
{
   1d128:	b5f0      	push	{r4, r5, r6, r7, lr}
	double aggregated_data[3] = {0};
	struct sensor_value accel_data[3];
	enum orientation_state current_orientation;

	for (i = 0; i < MEASUREMENT_ITERATIONS; i++) {
		err = sensor_sample_fetch_chan(accel_dev, SENSOR_CHAN_ACCEL_Z);
   1d12a:	4e35      	ldr	r6, [pc, #212]	; (1d200 <orientation_detector_poll+0xd8>)
{
   1d12c:	4605      	mov	r5, r0
   1d12e:	b087      	sub	sp, #28
		err = sensor_sample_fetch_chan(accel_dev, SENSOR_CHAN_ACCEL_Z);
   1d130:	6830      	ldr	r0, [r6, #0]
						 enum sensor_channel type)
{
	const struct sensor_driver_api *api =
		(const struct sensor_driver_api *)dev->driver_api;

	return api->sample_fetch(dev, type);
   1d132:	6843      	ldr	r3, [r0, #4]
   1d134:	2102      	movs	r1, #2
   1d136:	689b      	ldr	r3, [r3, #8]
   1d138:	4798      	blx	r3
		if (err) {
   1d13a:	4604      	mov	r4, r0
   1d13c:	b1a0      	cbz	r0, 1d168 <orientation_detector_poll+0x40>
			LOG_ERR("sensor_sample_fetch failed");
   1d13e:	4b31      	ldr	r3, [pc, #196]	; (1d204 <orientation_detector_poll+0xdc>)
   1d140:	681b      	ldr	r3, [r3, #0]
   1d142:	075a      	lsls	r2, r3, #29
   1d144:	d00d      	beq.n	1d162 <orientation_detector_poll+0x3a>
   1d146:	2301      	movs	r3, #1
   1d148:	f04f 0100 	mov.w	r1, #0
 * @return Source ID.
 */
static inline u32_t log_const_source_id(
				const struct log_source_const_data *data)
{
	return ((u8_t *)data - (u8_t *)__log_const_start)/
   1d14c:	4a2e      	ldr	r2, [pc, #184]	; (1d208 <orientation_detector_poll+0xe0>)
   1d14e:	f363 0107 	bfi	r1, r3, #0, #8
   1d152:	4b2e      	ldr	r3, [pc, #184]	; (1d20c <orientation_detector_poll+0xe4>)
   1d154:	482e      	ldr	r0, [pc, #184]	; (1d210 <orientation_detector_poll+0xe8>)
   1d156:	1a9b      	subs	r3, r3, r2
   1d158:	08db      	lsrs	r3, r3, #3
   1d15a:	f363 118f 	bfi	r1, r3, #6, #10
		}

		err = sensor_channel_get(accel_dev,
				SENSOR_CHAN_ACCEL_Z, &accel_data[2]);
		if (err) {
			LOG_ERR("sensor_channel_get failed");
   1d15e:	f023 fc70 	bl	40a42 <log_0>
	}

	sensor_data->orientation = current_orientation;

	return 0;
}
   1d162:	4620      	mov	r0, r4
   1d164:	b007      	add	sp, #28
   1d166:	bdf0      	pop	{r4, r5, r6, r7, pc}
		err = sensor_channel_get(accel_dev,
   1d168:	6830      	ldr	r0, [r6, #0]
					   struct sensor_value *val)
{
	const struct sensor_driver_api *api =
		(const struct sensor_driver_api *)dev->driver_api;

	return api->channel_get(dev, chan, val);
   1d16a:	6843      	ldr	r3, [r0, #4]
   1d16c:	aa04      	add	r2, sp, #16
   1d16e:	68db      	ldr	r3, [r3, #12]
   1d170:	2102      	movs	r1, #2
   1d172:	4798      	blx	r3
		if (err) {
   1d174:	4604      	mov	r4, r0
   1d176:	b180      	cbz	r0, 1d19a <orientation_detector_poll+0x72>
			LOG_ERR("sensor_channel_get failed");
   1d178:	4b22      	ldr	r3, [pc, #136]	; (1d204 <orientation_detector_poll+0xdc>)
   1d17a:	681b      	ldr	r3, [r3, #0]
   1d17c:	075b      	lsls	r3, r3, #29
   1d17e:	d0f0      	beq.n	1d162 <orientation_detector_poll+0x3a>
   1d180:	2301      	movs	r3, #1
   1d182:	f04f 0100 	mov.w	r1, #0
   1d186:	4a20      	ldr	r2, [pc, #128]	; (1d208 <orientation_detector_poll+0xe0>)
   1d188:	f363 0107 	bfi	r1, r3, #0, #8
   1d18c:	4b1f      	ldr	r3, [pc, #124]	; (1d20c <orientation_detector_poll+0xe4>)
   1d18e:	4821      	ldr	r0, [pc, #132]	; (1d214 <orientation_detector_poll+0xec>)
   1d190:	1a9b      	subs	r3, r3, r2
   1d192:	08db      	lsrs	r3, r3, #3
   1d194:	f363 118f 	bfi	r1, r3, #6, #10
   1d198:	e7e1      	b.n	1d15e <orientation_detector_poll+0x36>
 * @param val A pointer to a sensor_value struct.
 * @return The converted value.
 */
static inline double sensor_value_to_double(struct sensor_value *val)
{
	return (double)val->val1 + (double)val->val2 / 1000000;
   1d19a:	9805      	ldr	r0, [sp, #20]
   1d19c:	f7ff faa2 	bl	1c6e4 <__aeabi_i2d>
   1d1a0:	a315      	add	r3, pc, #84	; (adr r3, 1d1f8 <orientation_detector_poll+0xd0>)
   1d1a2:	e9d3 2300 	ldrd	r2, r3, [r3]
   1d1a6:	f7ff fc31 	bl	1ca0c <__aeabi_ddiv>
   1d1aa:	4606      	mov	r6, r0
   1d1ac:	9804      	ldr	r0, [sp, #16]
   1d1ae:	460f      	mov	r7, r1
   1d1b0:	f7ff fa98 	bl	1c6e4 <__aeabi_i2d>
   1d1b4:	4602      	mov	r2, r0
   1d1b6:	460b      	mov	r3, r1
   1d1b8:	4630      	mov	r0, r6
   1d1ba:	4639      	mov	r1, r7
   1d1bc:	f7ff f946 	bl	1c44c <__adddf3>
		aggregated_data[2] += sensor_value_to_double(&accel_data[2]);
   1d1c0:	2200      	movs	r2, #0
   1d1c2:	2300      	movs	r3, #0
   1d1c4:	f7ff f942 	bl	1c44c <__adddf3>
   1d1c8:	4606      	mov	r6, r0
   1d1ca:	460f      	mov	r7, r1
	if (sensor_data->z >= FLIP_ACCELERATION_THRESHOLD) {
   1d1cc:	2200      	movs	r2, #0
	sensor_data->z = (aggregated_data[2] / (double)MEASUREMENT_ITERATIONS) -
   1d1ce:	e9c5 6704 	strd	r6, r7, [r5, #16]
	if (sensor_data->z >= FLIP_ACCELERATION_THRESHOLD) {
   1d1d2:	4b11      	ldr	r3, [pc, #68]	; (1d218 <orientation_detector_poll+0xf0>)
   1d1d4:	f7ff fd76 	bl	1ccc4 <__aeabi_dcmpge>
   1d1d8:	b958      	cbnz	r0, 1d1f2 <orientation_detector_poll+0xca>
	} else if (sensor_data->z <= -FLIP_ACCELERATION_THRESHOLD) {
   1d1da:	4b10      	ldr	r3, [pc, #64]	; (1d21c <orientation_detector_poll+0xf4>)
   1d1dc:	2200      	movs	r2, #0
   1d1de:	4630      	mov	r0, r6
   1d1e0:	4639      	mov	r1, r7
   1d1e2:	f7ff fd65 	bl	1ccb0 <__aeabi_dcmple>
		current_orientation = ORIENTATION_ON_SIDE;
   1d1e6:	2800      	cmp	r0, #0
   1d1e8:	bf14      	ite	ne
   1d1ea:	2302      	movne	r3, #2
   1d1ec:	2303      	moveq	r3, #3
	sensor_data->orientation = current_orientation;
   1d1ee:	762b      	strb	r3, [r5, #24]
	return 0;
   1d1f0:	e7b7      	b.n	1d162 <orientation_detector_poll+0x3a>
			current_orientation = ORIENTATION_NORMAL;
   1d1f2:	2301      	movs	r3, #1
   1d1f4:	e7fb      	b.n	1d1ee <orientation_detector_poll+0xc6>
   1d1f6:	bf00      	nop
   1d1f8:	00000000 	.word	0x00000000
   1d1fc:	412e8480 	.word	0x412e8480
   1d200:	20021e24 	.word	0x20021e24
   1d204:	20032a88 	.word	0x20032a88
   1d208:	00045f08 	.word	0x00045f08
   1d20c:	00045f10 	.word	0x00045f10
   1d210:	00048077 	.word	0x00048077
   1d214:	00048092 	.word	0x00048092
   1d218:	40140000 	.word	0x40140000
   1d21c:	c0140000 	.word	0xc0140000

0001d220 <handle_channel_by_name>:
	[SENSOR_CHAN_ROTATION] =	"rotation",
};

static int handle_channel_by_name(const struct shell *shell, struct device *dev,
					const char *channel_name)
{
   1d220:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1d224:	4f44      	ldr	r7, [pc, #272]	; (1d338 <handle_channel_by_name+0x118>)
   1d226:	4606      	mov	r6, r0
   1d228:	4688      	mov	r8, r1
   1d22a:	4691      	mov	r9, r2
	int i;
	struct sensor_value value[3];
	int err;

	for (i = 0; i < ARRAY_SIZE(sensor_channel_name); i++) {
   1d22c:	2400      	movs	r4, #0
   1d22e:	46ba      	mov	sl, r7
{
   1d230:	b08f      	sub	sp, #60	; 0x3c
		if (strcmp(channel_name, sensor_channel_name[i]) == 0) {
   1d232:	f857 1b04 	ldr.w	r1, [r7], #4
   1d236:	4648      	mov	r0, r9
   1d238:	f7ff ff64 	bl	1d104 <strcmp>
   1d23c:	4605      	mov	r5, r0
   1d23e:	2800      	cmp	r0, #0
   1d240:	d069      	beq.n	1d316 <handle_channel_by_name+0xf6>
	for (i = 0; i < ARRAY_SIZE(sensor_channel_name); i++) {
   1d242:	3401      	adds	r4, #1
   1d244:	2c25      	cmp	r4, #37	; 0x25
   1d246:	d1f4      	bne.n	1d232 <handle_channel_by_name+0x12>
			break;
		}
	}

	if (i == ARRAY_SIZE(sensor_channel_name)) {
		shell_error(shell, "Channel not supported (%s)", channel_name);
   1d248:	464b      	mov	r3, r9
   1d24a:	4a3c      	ldr	r2, [pc, #240]	; (1d33c <handle_channel_by_name+0x11c>)
   1d24c:	2102      	movs	r1, #2
   1d24e:	4630      	mov	r0, r6
   1d250:	f006 fae2 	bl	23818 <shell_fprintf>
		return -ENOTSUP;
   1d254:	f06f 0585 	mvn.w	r5, #133	; 0x85
   1d258:	e025      	b.n	1d2a6 <handle_channel_by_name+0x86>
	err = sensor_channel_get(dev, i, value);
	if (err < 0) {
		return err;
	}

	if (i != SENSOR_CHAN_ACCEL_XYZ &&
   1d25a:	9809      	ldr	r0, [sp, #36]	; 0x24
   1d25c:	f7ff fa42 	bl	1c6e4 <__aeabi_i2d>
   1d260:	a333      	add	r3, pc, #204	; (adr r3, 1d330 <handle_channel_by_name+0x110>)
   1d262:	e9d3 2300 	ldrd	r2, r3, [r3]
   1d266:	f7ff fbd1 	bl	1ca0c <__aeabi_ddiv>
   1d26a:	4680      	mov	r8, r0
   1d26c:	9808      	ldr	r0, [sp, #32]
   1d26e:	4689      	mov	r9, r1
   1d270:	f7ff fa38 	bl	1c6e4 <__aeabi_i2d>
   1d274:	460b      	mov	r3, r1
   1d276:	4602      	mov	r2, r0
   1d278:	4649      	mov	r1, r9
   1d27a:	4640      	mov	r0, r8
   1d27c:	f7ff f8e6 	bl	1c44c <__adddf3>
   1d280:	f024 0304 	bic.w	r3, r4, #4
   1d284:	2b03      	cmp	r3, #3
   1d286:	f85a 7024 	ldr.w	r7, [sl, r4, lsl #2]
   1d28a:	4680      	mov	r8, r0
   1d28c:	4689      	mov	r9, r1
   1d28e:	d00e      	beq.n	1d2ae <handle_channel_by_name+0x8e>
		i != SENSOR_CHAN_GYRO_XYZ &&
   1d290:	2c0b      	cmp	r4, #11
   1d292:	d00c      	beq.n	1d2ae <handle_channel_by_name+0x8e>
		i != SENSOR_CHAN_MAGN_XYZ) {
		shell_print(shell,
   1d294:	e9cd 8902 	strd	r8, r9, [sp, #8]
   1d298:	9700      	str	r7, [sp, #0]
   1d29a:	4623      	mov	r3, r4
   1d29c:	4a28      	ldr	r2, [pc, #160]	; (1d340 <handle_channel_by_name+0x120>)
   1d29e:	4629      	mov	r1, r5
   1d2a0:	4630      	mov	r0, r6
   1d2a2:	f006 fab9 	bl	23818 <shell_fprintf>
			sensor_value_to_double(&value[1]),
			sensor_value_to_double(&value[2]));
	}

	return 0;
}
   1d2a6:	4628      	mov	r0, r5
   1d2a8:	b00f      	add	sp, #60	; 0x3c
   1d2aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1d2ae:	980d      	ldr	r0, [sp, #52]	; 0x34
   1d2b0:	f7ff fa18 	bl	1c6e4 <__aeabi_i2d>
   1d2b4:	a31e      	add	r3, pc, #120	; (adr r3, 1d330 <handle_channel_by_name+0x110>)
   1d2b6:	e9d3 2300 	ldrd	r2, r3, [r3]
   1d2ba:	f7ff fba7 	bl	1ca0c <__aeabi_ddiv>
   1d2be:	4682      	mov	sl, r0
   1d2c0:	980c      	ldr	r0, [sp, #48]	; 0x30
   1d2c2:	468b      	mov	fp, r1
   1d2c4:	f7ff fa0e 	bl	1c6e4 <__aeabi_i2d>
   1d2c8:	4602      	mov	r2, r0
   1d2ca:	460b      	mov	r3, r1
   1d2cc:	4650      	mov	r0, sl
   1d2ce:	4659      	mov	r1, fp
   1d2d0:	f7ff f8bc 	bl	1c44c <__adddf3>
		shell_print(shell,
   1d2d4:	e9cd 0106 	strd	r0, r1, [sp, #24]
   1d2d8:	980b      	ldr	r0, [sp, #44]	; 0x2c
   1d2da:	f7ff fa03 	bl	1c6e4 <__aeabi_i2d>
   1d2de:	a314      	add	r3, pc, #80	; (adr r3, 1d330 <handle_channel_by_name+0x110>)
   1d2e0:	e9d3 2300 	ldrd	r2, r3, [r3]
   1d2e4:	f7ff fb92 	bl	1ca0c <__aeabi_ddiv>
   1d2e8:	4682      	mov	sl, r0
   1d2ea:	980a      	ldr	r0, [sp, #40]	; 0x28
   1d2ec:	468b      	mov	fp, r1
   1d2ee:	f7ff f9f9 	bl	1c6e4 <__aeabi_i2d>
   1d2f2:	4602      	mov	r2, r0
   1d2f4:	460b      	mov	r3, r1
   1d2f6:	4650      	mov	r0, sl
   1d2f8:	4659      	mov	r1, fp
   1d2fa:	f7ff f8a7 	bl	1c44c <__adddf3>
   1d2fe:	e9cd 8902 	strd	r8, r9, [sp, #8]
   1d302:	e9cd 0104 	strd	r0, r1, [sp, #16]
   1d306:	9700      	str	r7, [sp, #0]
   1d308:	4623      	mov	r3, r4
   1d30a:	4a0e      	ldr	r2, [pc, #56]	; (1d344 <handle_channel_by_name+0x124>)
   1d30c:	2100      	movs	r1, #0
   1d30e:	4630      	mov	r0, r6
   1d310:	f006 fa82 	bl	23818 <shell_fprintf>
   1d314:	e7c7      	b.n	1d2a6 <handle_channel_by_name+0x86>
	return api->channel_get(dev, chan, val);
   1d316:	f8d8 3004 	ldr.w	r3, [r8, #4]
   1d31a:	aa08      	add	r2, sp, #32
   1d31c:	68db      	ldr	r3, [r3, #12]
   1d31e:	b2a1      	uxth	r1, r4
   1d320:	4640      	mov	r0, r8
   1d322:	4798      	blx	r3
	if (err < 0) {
   1d324:	2800      	cmp	r0, #0
   1d326:	da98      	bge.n	1d25a <handle_channel_by_name+0x3a>
   1d328:	4605      	mov	r5, r0
   1d32a:	e7bc      	b.n	1d2a6 <handle_channel_by_name+0x86>
   1d32c:	f3af 8000 	nop.w
   1d330:	00000000 	.word	0x00000000
   1d334:	412e8480 	.word	0x412e8480
   1d338:	20032408 	.word	0x20032408
   1d33c:	00049715 	.word	0x00049715
   1d340:	000496c5 	.word	0x000496c5
   1d344:	000496e1 	.word	0x000496e1

0001d348 <lwm2m_f64_to_b64>:
{
	s64_t v, f = 0;
	s32_t e = -1;
	int i;

	if (len != 8) {
   1d348:	2a08      	cmp	r2, #8
{
   1d34a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1d34e:	4682      	mov	sl, r0
   1d350:	460e      	mov	r6, r1
	if (len != 8) {
   1d352:	f040 80a2 	bne.w	1d49a <lwm2m_f64_to_b64+0x152>
		return -EINVAL;
	}

	/* handle zero value special case */
	if (f64->val1 == 0LL && f64->val2 == 0LL) {
   1d356:	e9d0 0100 	ldrd	r0, r1, [r0]
   1d35a:	ea50 0301 	orrs.w	r3, r0, r1
   1d35e:	d109      	bne.n	1d374 <lwm2m_f64_to_b64+0x2c>
   1d360:	e9da 2302 	ldrd	r2, r3, [sl, #8]
   1d364:	4313      	orrs	r3, r2
   1d366:	d105      	bne.n	1d374 <lwm2m_f64_to_b64+0x2c>

__BEGIN_DECLS
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
__ssp_bos_icheck3(memmove, void *, const void *)
__ssp_bos_icheck3_restrict(mempcpy, void *, const void *)
__ssp_bos_icheck3(memset, void *, int)
   1d368:	2000      	movs	r0, #0
   1d36a:	6030      	str	r0, [r6, #0]
   1d36c:	6070      	str	r0, [r6, #4]
	b64[5] = (f >> 16) & 0xFF;
	b64[6] = (f >> 8) & 0xFF;
	b64[7] = f & 0xFF;

	return 0;
}
   1d36e:	b003      	add	sp, #12
   1d370:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	v = abs(f64->val1);
   1d374:	f027 fd48 	bl	44e08 <abs>
	s32_t e = -1;
   1d378:	f04f 37ff 	mov.w	r7, #4294967295
	s64_t v, f = 0;
   1d37c:	2400      	movs	r4, #0
   1d37e:	2500      	movs	r5, #0
		if (v & 1) {
   1d380:	2200      	movs	r2, #0
	v = abs(f64->val1);
   1d382:	17c1      	asrs	r1, r0, #31
	while (v > 0) {
   1d384:	2801      	cmp	r0, #1
   1d386:	f171 0300 	sbcs.w	r3, r1, #0
   1d38a:	da31      	bge.n	1d3f0 <lwm2m_f64_to_b64+0xa8>
	v = abs(f64->val2);
   1d38c:	f8da 0008 	ldr.w	r0, [sl, #8]
   1d390:	f027 fd3a 	bl	44e08 <abs>
	while (v > 0 && i < 52) {
   1d394:	46bc      	mov	ip, r7
			f |= (s64_t)1 << (51 - i);
   1d396:	f04f 0e01 	mov.w	lr, #1
	v = abs(f64->val2);
   1d39a:	17c1      	asrs	r1, r0, #31
	while (v > 0 && i < 52) {
   1d39c:	2801      	cmp	r0, #1
   1d39e:	f171 0300 	sbcs.w	r3, r1, #0
   1d3a2:	db02      	blt.n	1d3aa <lwm2m_f64_to_b64+0x62>
   1d3a4:	f1bc 0f33 	cmp.w	ip, #51	; 0x33
   1d3a8:	dd3f      	ble.n	1d42a <lwm2m_f64_to_b64+0xe2>
   1d3aa:	2300      	movs	r3, #0
   1d3ac:	6033      	str	r3, [r6, #0]
   1d3ae:	6073      	str	r3, [r6, #4]
	if (f64->val1 == 0) {
   1d3b0:	e9da 2300 	ldrd	r2, r3, [sl]
   1d3b4:	ea52 0103 	orrs.w	r1, r2, r3
		b64[0] = f64->val2 < 0 ? 0x80 : 0;
   1d3b8:	bf0c      	ite	eq
   1d3ba:	f99a 300f 	ldrsbeq.w	r3, [sl, #15]
		b64[0] = f64->val1 < 0 ? 0x80 : 0;
   1d3be:	161b      	asrne	r3, r3, #24
	e += 1023;
   1d3c0:	f207 37ff 	addw	r7, r7, #1023	; 0x3ff
		b64[0] = f64->val1 < 0 ? 0x80 : 0;
   1d3c4:	f003 0380 	and.w	r3, r3, #128	; 0x80
	b64[0] |= (e >> 4);
   1d3c8:	ea43 1327 	orr.w	r3, r3, r7, asr #4
   1d3cc:	7033      	strb	r3, [r6, #0]
	b64[1] |= ((f >> 48) & 0xF);
   1d3ce:	f3c5 4303 	ubfx	r3, r5, #16, #4
   1d3d2:	ea43 1707 	orr.w	r7, r3, r7, lsl #4
	b64[2] = (f >> 40) & 0xFF;
   1d3d6:	122b      	asrs	r3, r5, #8
   1d3d8:	70b3      	strb	r3, [r6, #2]
	b64[4] = (f >> 24) & 0xFF;
   1d3da:	0e23      	lsrs	r3, r4, #24
   1d3dc:	7133      	strb	r3, [r6, #4]
	b64[5] = (f >> 16) & 0xFF;
   1d3de:	0c23      	lsrs	r3, r4, #16
   1d3e0:	7173      	strb	r3, [r6, #5]
	b64[6] = (f >> 8) & 0xFF;
   1d3e2:	0a23      	lsrs	r3, r4, #8
	b64[1] |= ((f >> 48) & 0xF);
   1d3e4:	7077      	strb	r7, [r6, #1]
	b64[3] = (f >> 32) & 0xFF;
   1d3e6:	70f5      	strb	r5, [r6, #3]
	b64[6] = (f >> 8) & 0xFF;
   1d3e8:	71b3      	strb	r3, [r6, #6]
	b64[7] = f & 0xFF;
   1d3ea:	71f4      	strb	r4, [r6, #7]
	return 0;
   1d3ec:	2000      	movs	r0, #0
   1d3ee:	e7be      	b.n	1d36e <lwm2m_f64_to_b64+0x26>
		f >>= 1;
   1d3f0:	0863      	lsrs	r3, r4, #1
   1d3f2:	ea43 73c5 	orr.w	r3, r3, r5, lsl #31
		if (v & 1) {
   1d3f6:	4691      	mov	r9, r2
		f >>= 1;
   1d3f8:	461c      	mov	r4, r3
   1d3fa:	ea4f 0c65 	mov.w	ip, r5, asr #1
   1d3fe:	4665      	mov	r5, ip
		if (v & 1) {
   1d400:	f000 0801 	and.w	r8, r0, #1
   1d404:	ea58 0309 	orrs.w	r3, r8, r9
			f |= ((s64_t)1 << 52);
   1d408:	bf1e      	ittt	ne
   1d40a:	46a4      	movne	ip, r4
   1d40c:	f445 1380 	orrne.w	r3, r5, #1048576	; 0x100000
   1d410:	461d      	movne	r5, r3
		v >>= 1;
   1d412:	ea4f 0350 	mov.w	r3, r0, lsr #1
   1d416:	ea43 73c1 	orr.w	r3, r3, r1, lsl #31
			f |= ((s64_t)1 << 52);
   1d41a:	bf18      	it	ne
   1d41c:	4664      	movne	r4, ip
		v >>= 1;
   1d41e:	ea4f 0c61 	mov.w	ip, r1, asr #1
   1d422:	4618      	mov	r0, r3
   1d424:	4661      	mov	r1, ip
		e++;
   1d426:	3701      	adds	r7, #1
   1d428:	e7ac      	b.n	1d384 <lwm2m_f64_to_b64+0x3c>
		v *= 2;
   1d42a:	1803      	adds	r3, r0, r0
   1d42c:	9300      	str	r3, [sp, #0]
   1d42e:	eb41 0301 	adc.w	r3, r1, r1
   1d432:	9301      	str	r3, [sp, #4]
		if (!f && e < 0 && v < LWM2M_FLOAT64_DEC_MAX) {
   1d434:	ea54 0305 	orrs.w	r3, r4, r5
		v *= 2;
   1d438:	e9dd 0100 	ldrd	r0, r1, [sp]
		if (!f && e < 0 && v < LWM2M_FLOAT64_DEC_MAX) {
   1d43c:	a319      	add	r3, pc, #100	; (adr r3, 1d4a4 <lwm2m_f64_to_b64+0x15c>)
   1d43e:	e9d3 2300 	ldrd	r2, r3, [r3]
   1d442:	d106      	bne.n	1d452 <lwm2m_f64_to_b64+0x10a>
   1d444:	2f00      	cmp	r7, #0
   1d446:	da04      	bge.n	1d452 <lwm2m_f64_to_b64+0x10a>
   1d448:	4282      	cmp	r2, r0
   1d44a:	418b      	sbcs	r3, r1
   1d44c:	db07      	blt.n	1d45e <lwm2m_f64_to_b64+0x116>
			e--;
   1d44e:	3f01      	subs	r7, #1
			continue;
   1d450:	e7a4      	b.n	1d39c <lwm2m_f64_to_b64+0x54>
		} else if (v >= LWM2M_FLOAT64_DEC_MAX) {
   1d452:	e9dd 8900 	ldrd	r8, r9, [sp]
   1d456:	4542      	cmp	r2, r8
   1d458:	eb73 0309 	sbcs.w	r3, r3, r9
   1d45c:	da1a      	bge.n	1d494 <lwm2m_f64_to_b64+0x14c>
			v -= LWM2M_FLOAT64_DEC_MAX;
   1d45e:	9b00      	ldr	r3, [sp, #0]
   1d460:	4a0f      	ldr	r2, [pc, #60]	; (1d4a0 <lwm2m_f64_to_b64+0x158>)
   1d462:	1898      	adds	r0, r3, r2
   1d464:	9b01      	ldr	r3, [sp, #4]
			f |= (s64_t)1 << (51 - i);
   1d466:	f1cc 0233 	rsb	r2, ip, #51	; 0x33
			v -= LWM2M_FLOAT64_DEC_MAX;
   1d46a:	f143 31ff 	adc.w	r1, r3, #4294967295
			f |= (s64_t)1 << (51 - i);
   1d46e:	f1a2 0b20 	sub.w	fp, r2, #32
   1d472:	f1c2 0320 	rsb	r3, r2, #32
   1d476:	fa0e fb0b 	lsl.w	fp, lr, fp
   1d47a:	fa2e f303 	lsr.w	r3, lr, r3
   1d47e:	ea4b 0303 	orr.w	r3, fp, r3
   1d482:	432b      	orrs	r3, r5
   1d484:	fa0e f202 	lsl.w	r2, lr, r2
   1d488:	4322      	orrs	r2, r4
   1d48a:	461d      	mov	r5, r3
		if (v == 0) {
   1d48c:	ea50 0301 	orrs.w	r3, r0, r1
			f |= (s64_t)1 << (51 - i);
   1d490:	4614      	mov	r4, r2
		if (v == 0) {
   1d492:	d08a      	beq.n	1d3aa <lwm2m_f64_to_b64+0x62>
		i++;
   1d494:	f10c 0c01 	add.w	ip, ip, #1
   1d498:	e780      	b.n	1d39c <lwm2m_f64_to_b64+0x54>
		return -EINVAL;
   1d49a:	f06f 0015 	mvn.w	r0, #21
   1d49e:	e766      	b.n	1d36e <lwm2m_f64_to_b64+0x26>
   1d4a0:	c4653600 	.word	0xc4653600
   1d4a4:	3b9ac9ff 	.word	0x3b9ac9ff
	...

0001d4b0 <lwm2m_b64_to_f64>:
	return 0;
}

/* convert from binary64 to float64 */
int lwm2m_b64_to_f64(u8_t *b64, size_t len, float64_value_t *f64)
{
   1d4b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	s64_t f, k;
	int i, e;
	bool sign = false;

	if (len != 8) {
   1d4b4:	2908      	cmp	r1, #8
{
   1d4b6:	b085      	sub	sp, #20
	if (len != 8) {
   1d4b8:	f040 80be 	bne.w	1d638 <lwm2m_b64_to_f64+0x188>
		return -EINVAL;
	}

	f64->val1 = 0LL;
   1d4bc:	2300      	movs	r3, #0
	f += ((s64_t)b64[2] << 40);
	f += ((s64_t)b64[3] << 32);
	f += ((s64_t)b64[4] << 24);
	f += ((s64_t)b64[5] << 16);
	f += ((s64_t)b64[6] << 8);
	f += b64[7];
   1d4be:	2700      	movs	r7, #0
	f64->val1 = 0LL;
   1d4c0:	e9c2 3300 	strd	r3, r3, [r2]
	f64->val2 = 0LL;
   1d4c4:	e9c2 3302 	strd	r3, r3, [r2, #8]
	f += ((s64_t)b64[2] << 40);
   1d4c8:	7886      	ldrb	r6, [r0, #2]
   1d4ca:	461c      	mov	r4, r3
   1d4cc:	ea4f 2906 	mov.w	r9, r6, lsl #8
	f += b64[7];
   1d4d0:	79c6      	ldrb	r6, [r0, #7]
	e += SHIFT_RIGHT(b64[1], 4, 0xF);
   1d4d2:	7845      	ldrb	r5, [r0, #1]
	f += b64[7];
   1d4d4:	eb16 0a03 	adds.w	sl, r6, r3
   1d4d8:	f547 1680 	adc.w	r6, r7, #1048576	; 0x100000
   1d4dc:	eb13 0a0a 	adds.w	sl, r3, sl
	f += ((s64_t)b64[3] << 32);
   1d4e0:	78c7      	ldrb	r7, [r0, #3]
	f += b64[7];
   1d4e2:	eb49 0906 	adc.w	r9, r9, r6
   1d4e6:	eb1a 0a03 	adds.w	sl, sl, r3
   1d4ea:	eb49 0907 	adc.w	r9, r9, r7
	f += ((s64_t)b64[4] << 24);
   1d4ee:	2700      	movs	r7, #0
   1d4f0:	7906      	ldrb	r6, [r0, #4]
	sign = SHIFT_RIGHT(b64[0], 7, 0x1);
   1d4f2:	f890 c000 	ldrb.w	ip, [r0]
	f += ((s64_t)b64[4] << 24);
   1d4f6:	e9cd 6700 	strd	r6, r7, [sp]
   1d4fa:	9b00      	ldr	r3, [sp, #0]
	f += ((s64_t)b64[5] << 16);
   1d4fc:	7946      	ldrb	r6, [r0, #5]
	f += ((s64_t)b64[4] << 24);
   1d4fe:	ea4f 6b03 	mov.w	fp, r3, lsl #24
   1d502:	0a1f      	lsrs	r7, r3, #8
	f += b64[7];
   1d504:	eb1a 0a0b 	adds.w	sl, sl, fp
   1d508:	eb49 0907 	adc.w	r9, r9, r7
	f += ((s64_t)b64[5] << 16);
   1d50c:	2700      	movs	r7, #0
   1d50e:	e9cd 6700 	strd	r6, r7, [sp]
   1d512:	9b00      	ldr	r3, [sp, #0]
	f += ((s64_t)b64[6] << 8);
   1d514:	7986      	ldrb	r6, [r0, #6]
	f += ((s64_t)b64[5] << 16);
   1d516:	ea4f 4b03 	mov.w	fp, r3, lsl #16
   1d51a:	0c1f      	lsrs	r7, r3, #16
	f += b64[7];
   1d51c:	eb1a 0a0b 	adds.w	sl, sl, fp
	f += ((s64_t)b64[6] << 8);
   1d520:	ea4f 2306 	mov.w	r3, r6, lsl #8
	e += SHIFT_RIGHT(b64[1], 4, 0xF);
   1d524:	ea4f 1e15 	mov.w	lr, r5, lsr #4
	f += b64[7];
   1d528:	eb49 0907 	adc.w	r9, r9, r7
	f += ((s64_t)b64[6] << 8);
   1d52c:	0e31      	lsrs	r1, r6, #24
	f += b64[7];
   1d52e:	eb1a 0a03 	adds.w	sl, sl, r3
	e  = SHIFT_LEFT((u16_t)b64[0], 4, 0x7F0);
   1d532:	ea4f 180c 	mov.w	r8, ip, lsl #4
	f += ((s64_t)(b64[1] & 0xF) << 48);
   1d536:	ea4f 4505 	mov.w	r5, r5, lsl #16
	f += b64[7];
   1d53a:	eb49 0901 	adc.w	r9, r9, r1
	e  = SHIFT_LEFT((u16_t)b64[0], 4, 0x7F0);
   1d53e:	f408 68fe 	and.w	r8, r8, #2032	; 0x7f0
	f += b64[7];
   1d542:	eb1a 0a04 	adds.w	sl, sl, r4
	e -= 1023;
   1d546:	f2ae 3eff 	subw	lr, lr, #1023	; 0x3ff
	f += ((s64_t)(b64[1] & 0xF) << 48);
   1d54a:	f405 2170 	and.w	r1, r5, #983040	; 0xf0000
	f += b64[7];
   1d54e:	eb49 0901 	adc.w	r9, r9, r1

	/* handle whole number */
	if (e > -1) {
   1d552:	eb1e 0e08 	adds.w	lr, lr, r8
   1d556:	d442      	bmi.n	1d5de <lwm2m_b64_to_f64+0x12e>
		/* precision overflow */
		if (e > 52) {
   1d558:	f1be 0f34 	cmp.w	lr, #52	; 0x34
   1d55c:	bfa8      	it	ge
   1d55e:	f04f 0e34 	movge.w	lr, #52	; 0x34
			e = 52;
		}

		f64->val1 = (f >> (52 - e)) * (sign ? -1 : 1);
   1d562:	f1ce 0334 	rsb	r3, lr, #52	; 0x34
   1d566:	f1c3 0420 	rsb	r4, r3, #32
   1d56a:	f1b3 0120 	subs.w	r1, r3, #32
   1d56e:	fa2a f003 	lsr.w	r0, sl, r3
   1d572:	fa09 f404 	lsl.w	r4, r9, r4
   1d576:	bf58      	it	pl
   1d578:	fa49 f101 	asrpl.w	r1, r9, r1
   1d57c:	ea40 0004 	orr.w	r0, r0, r4
   1d580:	bf58      	it	pl
   1d582:	4308      	orrpl	r0, r1
   1d584:	ea5f 1cdc 	movs.w	ip, ip, lsr #7
   1d588:	bf1a      	itte	ne
   1d58a:	f04f 31ff 	movne.w	r1, #4294967295
   1d58e:	468c      	movne	ip, r1
   1d590:	2101      	moveq	r1, #1
   1d592:	fb00 fc0c 	mul.w	ip, r0, ip
   1d596:	fa49 f303 	asr.w	r3, r9, r3
   1d59a:	fb01 cc03 	mla	ip, r1, r3, ip
   1d59e:	fba0 0101 	umull	r0, r1, r0, r1
   1d5a2:	4461      	add	r1, ip
   1d5a4:	e9c2 0100 	strd	r0, r1, [r2]
	}

	/* calculate the rest of the decimal */
	k = LWM2M_FLOAT64_DEC_MAX;
   1d5a8:	a125      	add	r1, pc, #148	; (adr r1, 1d640 <lwm2m_b64_to_f64+0x190>)
   1d5aa:	e9d1 0100 	ldrd	r0, r1, [r1]
		e++;
	}

	for (i = 51 - e; i >= 0; i--) {
		k /= 2;
		if (f & ((s64_t)1 << i)) {
   1d5ae:	2600      	movs	r6, #0
	for (i = 51 - e; i >= 0; i--) {
   1d5b0:	f1ce 0e33 	rsb	lr, lr, #51	; 0x33
   1d5b4:	f1be 3fff 	cmp.w	lr, #4294967295
   1d5b8:	d115      	bne.n	1d5e6 <lwm2m_b64_to_f64+0x136>
			f64->val2 += k;

		}
	}

	return 0;
   1d5ba:	2000      	movs	r0, #0
}
   1d5bc:	b005      	add	sp, #20
   1d5be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		k /= 2;
   1d5c2:	0fcb      	lsrs	r3, r1, #31
   1d5c4:	18c4      	adds	r4, r0, r3
   1d5c6:	f141 0500 	adc.w	r5, r1, #0
   1d5ca:	0863      	lsrs	r3, r4, #1
   1d5cc:	ea43 70c5 	orr.w	r0, r3, r5, lsl #31
   1d5d0:	1069      	asrs	r1, r5, #1
		e++;
   1d5d2:	f10e 0e01 	add.w	lr, lr, #1
	while (e < -1) {
   1d5d6:	f1be 3fff 	cmp.w	lr, #4294967295
   1d5da:	d1f2      	bne.n	1d5c2 <lwm2m_b64_to_f64+0x112>
   1d5dc:	e7e7      	b.n	1d5ae <lwm2m_b64_to_f64+0xfe>
	k = LWM2M_FLOAT64_DEC_MAX;
   1d5de:	a118      	add	r1, pc, #96	; (adr r1, 1d640 <lwm2m_b64_to_f64+0x190>)
   1d5e0:	e9d1 0100 	ldrd	r0, r1, [r1]
   1d5e4:	e7f7      	b.n	1d5d6 <lwm2m_b64_to_f64+0x126>
		k /= 2;
   1d5e6:	0fcb      	lsrs	r3, r1, #31
   1d5e8:	18c4      	adds	r4, r0, r3
   1d5ea:	f141 0500 	adc.w	r5, r1, #0
   1d5ee:	0863      	lsrs	r3, r4, #1
   1d5f0:	ea43 70c5 	orr.w	r0, r3, r5, lsl #31
   1d5f4:	1069      	asrs	r1, r5, #1
		if (f & ((s64_t)1 << i)) {
   1d5f6:	f1ce 0520 	rsb	r5, lr, #32
   1d5fa:	f1be 0420 	subs.w	r4, lr, #32
   1d5fe:	fa2a f30e 	lsr.w	r3, sl, lr
   1d602:	fa09 f505 	lsl.w	r5, r9, r5
   1d606:	bf58      	it	pl
   1d608:	fa49 f404 	asrpl.w	r4, r9, r4
   1d60c:	ea43 0305 	orr.w	r3, r3, r5
   1d610:	bf58      	it	pl
   1d612:	4323      	orrpl	r3, r4
   1d614:	f003 0301 	and.w	r3, r3, #1
   1d618:	e9cd 3602 	strd	r3, r6, [sp, #8]
   1d61c:	e9dd 3402 	ldrd	r3, r4, [sp, #8]
   1d620:	4323      	orrs	r3, r4
   1d622:	d006      	beq.n	1d632 <lwm2m_b64_to_f64+0x182>
			f64->val2 += k;
   1d624:	e9d2 3402 	ldrd	r3, r4, [r2, #8]
   1d628:	181b      	adds	r3, r3, r0
   1d62a:	eb41 0404 	adc.w	r4, r1, r4
   1d62e:	e9c2 3402 	strd	r3, r4, [r2, #8]
	for (i = 51 - e; i >= 0; i--) {
   1d632:	f10e 3eff 	add.w	lr, lr, #4294967295
   1d636:	e7bd      	b.n	1d5b4 <lwm2m_b64_to_f64+0x104>
		return -EINVAL;
   1d638:	f06f 0015 	mvn.w	r0, #21
   1d63c:	e7be      	b.n	1d5bc <lwm2m_b64_to_f64+0x10c>
   1d63e:	bf00      	nop
   1d640:	3b9aca00 	.word	0x3b9aca00
   1d644:	00000000 	.word	0x00000000

0001d648 <double_to_sensor_value>:
 * @param val Sensor value to convert.
 * @param sense_val Pointer to sensor_value to store the converted data.
 */
static void double_to_sensor_value(double val,
				struct sensor_value *sense_val)
{
   1d648:	b5d0      	push	{r4, r6, r7, lr}
   1d64a:	4614      	mov	r4, r2
   1d64c:	460f      	mov	r7, r1
   1d64e:	4606      	mov	r6, r0
	sense_val->val1 = (int)val;
   1d650:	f7ff fb4c 	bl	1ccec <__aeabi_d2iz>
   1d654:	6020      	str	r0, [r4, #0]
	sense_val->val2 = (val - (int)val) * 1000000;
   1d656:	f7ff f845 	bl	1c6e4 <__aeabi_i2d>
   1d65a:	4602      	mov	r2, r0
   1d65c:	460b      	mov	r3, r1
   1d65e:	4630      	mov	r0, r6
   1d660:	4639      	mov	r1, r7
   1d662:	f7fe fef1 	bl	1c448 <__aeabi_dsub>
   1d666:	a304      	add	r3, pc, #16	; (adr r3, 1d678 <double_to_sensor_value+0x30>)
   1d668:	e9d3 2300 	ldrd	r2, r3, [r3]
   1d66c:	f7ff f8a4 	bl	1c7b8 <__aeabi_dmul>
   1d670:	f7ff fb3c 	bl	1ccec <__aeabi_d2iz>
   1d674:	6060      	str	r0, [r4, #4]
}
   1d676:	bdd0      	pop	{r4, r6, r7, pc}
   1d678:	00000000 	.word	0x00000000
   1d67c:	412e8480 	.word	0x412e8480

0001d680 <sensor_sim_sample_fetch>:
	return 0;
}

static int sensor_sim_sample_fetch(struct device *dev,
				enum sensor_channel chan)
{
   1d680:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	switch (chan) {
   1d682:	2910      	cmp	r1, #16
   1d684:	f200 80a6 	bhi.w	1d7d4 <sensor_sim_sample_fetch+0x154>
   1d688:	e8df f001 	tbb	[pc, r1]
   1d68c:	40302009 	.word	0x40302009
   1d690:	a4a4a4a4 	.word	0xa4a4a4a4
   1d694:	a4a4a4a4 	.word	0xa4a4a4a4
   1d698:	a49068a4 	.word	0xa49068a4
   1d69c:	7d          	.byte	0x7d
   1d69d:	00          	.byte	0x00
			accel_samples[0] = static_val_coeff * max_variation;
   1d69e:	4c54      	ldr	r4, [pc, #336]	; (1d7f0 <sensor_sim_sample_fetch+0x170>)
			accel_samples[0] = generate_sine(base_accel_samples[0],
   1d6a0:	f014 ffc0 	bl	32624 <generate_sine.constprop.2>
			accel_samples[0] = static_val_coeff * max_variation;
   1d6a4:	6820      	ldr	r0, [r4, #0]
   1d6a6:	f7ff f81d 	bl	1c6e4 <__aeabi_i2d>
   1d6aa:	4b52      	ldr	r3, [pc, #328]	; (1d7f4 <sensor_sim_sample_fetch+0x174>)
   1d6ac:	2200      	movs	r2, #0
   1d6ae:	4606      	mov	r6, r0
   1d6b0:	460f      	mov	r7, r1
   1d6b2:	f7ff f881 	bl	1c7b8 <__aeabi_dmul>
   1d6b6:	4b50      	ldr	r3, [pc, #320]	; (1d7f8 <sensor_sim_sample_fetch+0x178>)
   1d6b8:	e9c3 0100 	strd	r0, r1, [r3]
		static_val_coeff *= -1.0;
   1d6bc:	4630      	mov	r0, r6
   1d6be:	f107 4100 	add.w	r1, r7, #2147483648	; 0x80000000
   1d6c2:	f7ff fb13 	bl	1ccec <__aeabi_d2iz>
   1d6c6:	6020      	str	r0, [r4, #0]
	return 0;
   1d6c8:	2000      	movs	r0, #0
	return sensor_sim_generate_data(chan);
}
   1d6ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			accel_samples[1] = static_val_coeff * max_variation;
   1d6cc:	4c48      	ldr	r4, [pc, #288]	; (1d7f0 <sensor_sim_sample_fetch+0x170>)
			accel_samples[1] = generate_sine(base_accel_samples[1],
   1d6ce:	f014 ffa9 	bl	32624 <generate_sine.constprop.2>
			accel_samples[1] = static_val_coeff * max_variation;
   1d6d2:	6820      	ldr	r0, [r4, #0]
   1d6d4:	f7ff f806 	bl	1c6e4 <__aeabi_i2d>
   1d6d8:	4b46      	ldr	r3, [pc, #280]	; (1d7f4 <sensor_sim_sample_fetch+0x174>)
   1d6da:	2200      	movs	r2, #0
   1d6dc:	4606      	mov	r6, r0
   1d6de:	460f      	mov	r7, r1
   1d6e0:	f7ff f86a 	bl	1c7b8 <__aeabi_dmul>
   1d6e4:	4b44      	ldr	r3, [pc, #272]	; (1d7f8 <sensor_sim_sample_fetch+0x178>)
   1d6e6:	e9c3 0102 	strd	r0, r1, [r3, #8]
		static_val_coeff *= -1.0;
   1d6ea:	e7e7      	b.n	1d6bc <sensor_sim_sample_fetch+0x3c>
			accel_samples[2] = static_val_coeff * max_variation;
   1d6ec:	4c40      	ldr	r4, [pc, #256]	; (1d7f0 <sensor_sim_sample_fetch+0x170>)
			accel_samples[2] = generate_sine(base_accel_samples[2],
   1d6ee:	f014 ff99 	bl	32624 <generate_sine.constprop.2>
			accel_samples[2] = static_val_coeff * max_variation;
   1d6f2:	6820      	ldr	r0, [r4, #0]
   1d6f4:	f7fe fff6 	bl	1c6e4 <__aeabi_i2d>
   1d6f8:	4b3e      	ldr	r3, [pc, #248]	; (1d7f4 <sensor_sim_sample_fetch+0x174>)
   1d6fa:	2200      	movs	r2, #0
   1d6fc:	4606      	mov	r6, r0
   1d6fe:	460f      	mov	r7, r1
   1d700:	f7ff f85a 	bl	1c7b8 <__aeabi_dmul>
   1d704:	4b3c      	ldr	r3, [pc, #240]	; (1d7f8 <sensor_sim_sample_fetch+0x178>)
   1d706:	e9c3 0104 	strd	r0, r1, [r3, #16]
   1d70a:	e7d7      	b.n	1d6bc <sensor_sim_sample_fetch+0x3c>
			accel_samples[0] = generate_sine(base_accel_samples[0],
   1d70c:	f014 ff8a 	bl	32624 <generate_sine.constprop.2>
   1d710:	4c39      	ldr	r4, [pc, #228]	; (1d7f8 <sensor_sim_sample_fetch+0x178>)
   1d712:	e9c4 0100 	strd	r0, r1, [r4]
	if (z_syscall_trap()) {
		return (s32_t) arch_syscall_invoke1(*(uintptr_t *)&ms, K_SYSCALL_K_SLEEP);
	}
#endif
	compiler_barrier();
	return z_impl_k_sleep(ms);
   1d716:	2001      	movs	r0, #1
   1d718:	f01f fe72 	bl	3d400 <z_impl_k_sleep>
			accel_samples[1] = generate_sine(base_accel_samples[1],
   1d71c:	f014 ff82 	bl	32624 <generate_sine.constprop.2>
   1d720:	e9c4 0102 	strd	r0, r1, [r4, #8]
			accel_samples[0] = static_val_coeff * max_variation;
   1d724:	4d32      	ldr	r5, [pc, #200]	; (1d7f0 <sensor_sim_sample_fetch+0x170>)
   1d726:	2001      	movs	r0, #1
   1d728:	f01f fe6a 	bl	3d400 <z_impl_k_sleep>
			accel_samples[2] = generate_sine(base_accel_samples[2],
   1d72c:	f014 ff7a 	bl	32624 <generate_sine.constprop.2>
			accel_samples[0] = static_val_coeff * max_variation;
   1d730:	6828      	ldr	r0, [r5, #0]
   1d732:	f7fe ffd7 	bl	1c6e4 <__aeabi_i2d>
   1d736:	2200      	movs	r2, #0
   1d738:	4b2e      	ldr	r3, [pc, #184]	; (1d7f4 <sensor_sim_sample_fetch+0x174>)
   1d73a:	4606      	mov	r6, r0
   1d73c:	460f      	mov	r7, r1
   1d73e:	f7ff f83b 	bl	1c7b8 <__aeabi_dmul>
   1d742:	e9c4 0100 	strd	r0, r1, [r4]
			accel_samples[1] = static_val_coeff * max_variation;
   1d746:	e9c4 0102 	strd	r0, r1, [r4, #8]
			accel_samples[2] = static_val_coeff * max_variation;
   1d74a:	e9c4 0104 	strd	r0, r1, [r4, #16]
		static_val_coeff *= -1.0;
   1d74e:	4630      	mov	r0, r6
   1d750:	f107 4100 	add.w	r1, r7, #2147483648	; 0x80000000
   1d754:	f7ff faca 	bl	1ccec <__aeabi_d2iz>
   1d758:	6028      	str	r0, [r5, #0]
	return retval;
   1d75a:	e7b5      	b.n	1d6c8 <sensor_sim_sample_fetch+0x48>
	return (double)rand() / ((double)RAND_MAX / 2.0) - 1.0;
   1d75c:	f021 fdde 	bl	3f31c <rand>
   1d760:	f7fe ffc0 	bl	1c6e4 <__aeabi_i2d>
   1d764:	a31e      	add	r3, pc, #120	; (adr r3, 1d7e0 <sensor_sim_sample_fetch+0x160>)
   1d766:	e9d3 2300 	ldrd	r2, r3, [r3]
   1d76a:	f7ff f94f 	bl	1ca0c <__aeabi_ddiv>
   1d76e:	2200      	movs	r2, #0
   1d770:	4b22      	ldr	r3, [pc, #136]	; (1d7fc <sensor_sim_sample_fetch+0x17c>)
   1d772:	f7fe fe69 	bl	1c448 <__aeabi_dsub>
	temp_sample = base_temp_sample + generate_pseudo_random();
   1d776:	4b22      	ldr	r3, [pc, #136]	; (1d800 <sensor_sim_sample_fetch+0x180>)
   1d778:	2200      	movs	r2, #0
   1d77a:	f7fe fe67 	bl	1c44c <__adddf3>
   1d77e:	4b21      	ldr	r3, [pc, #132]	; (1d804 <sensor_sim_sample_fetch+0x184>)
	pressure_sample = base_pressure_sample + generate_pseudo_random();
   1d780:	e9c3 0100 	strd	r0, r1, [r3]
   1d784:	e7a0      	b.n	1d6c8 <sensor_sim_sample_fetch+0x48>
	return (double)rand() / ((double)RAND_MAX / 2.0) - 1.0;
   1d786:	f021 fdc9 	bl	3f31c <rand>
   1d78a:	f7fe ffab 	bl	1c6e4 <__aeabi_i2d>
   1d78e:	a314      	add	r3, pc, #80	; (adr r3, 1d7e0 <sensor_sim_sample_fetch+0x160>)
   1d790:	e9d3 2300 	ldrd	r2, r3, [r3]
   1d794:	f7ff f93a 	bl	1ca0c <__aeabi_ddiv>
   1d798:	2200      	movs	r2, #0
   1d79a:	4b18      	ldr	r3, [pc, #96]	; (1d7fc <sensor_sim_sample_fetch+0x17c>)
   1d79c:	f7fe fe54 	bl	1c448 <__aeabi_dsub>
	humidity_sample = base_humidity_sample + generate_pseudo_random();
   1d7a0:	4b19      	ldr	r3, [pc, #100]	; (1d808 <sensor_sim_sample_fetch+0x188>)
   1d7a2:	2200      	movs	r2, #0
   1d7a4:	f7fe fe52 	bl	1c44c <__adddf3>
   1d7a8:	4b18      	ldr	r3, [pc, #96]	; (1d80c <sensor_sim_sample_fetch+0x18c>)
   1d7aa:	e7e9      	b.n	1d780 <sensor_sim_sample_fetch+0x100>
	return (double)rand() / ((double)RAND_MAX / 2.0) - 1.0;
   1d7ac:	f021 fdb6 	bl	3f31c <rand>
   1d7b0:	f7fe ff98 	bl	1c6e4 <__aeabi_i2d>
   1d7b4:	a30a      	add	r3, pc, #40	; (adr r3, 1d7e0 <sensor_sim_sample_fetch+0x160>)
   1d7b6:	e9d3 2300 	ldrd	r2, r3, [r3]
   1d7ba:	f7ff f927 	bl	1ca0c <__aeabi_ddiv>
   1d7be:	2200      	movs	r2, #0
   1d7c0:	4b0e      	ldr	r3, [pc, #56]	; (1d7fc <sensor_sim_sample_fetch+0x17c>)
   1d7c2:	f7fe fe41 	bl	1c448 <__aeabi_dsub>
	pressure_sample = base_pressure_sample + generate_pseudo_random();
   1d7c6:	a308      	add	r3, pc, #32	; (adr r3, 1d7e8 <sensor_sim_sample_fetch+0x168>)
   1d7c8:	e9d3 2300 	ldrd	r2, r3, [r3]
   1d7cc:	f7fe fe3e 	bl	1c44c <__adddf3>
   1d7d0:	4b0f      	ldr	r3, [pc, #60]	; (1d810 <sensor_sim_sample_fetch+0x190>)
   1d7d2:	e7d5      	b.n	1d780 <sensor_sim_sample_fetch+0x100>
		return -ENOTSUP;
   1d7d4:	f06f 0085 	mvn.w	r0, #133	; 0x85
	return sensor_sim_generate_data(chan);
   1d7d8:	e777      	b.n	1d6ca <sensor_sim_sample_fetch+0x4a>
   1d7da:	bf00      	nop
   1d7dc:	f3af 8000 	nop.w
   1d7e0:	ffc00000 	.word	0xffc00000
   1d7e4:	41cfffff 	.word	0x41cfffff
   1d7e8:	cccccccd 	.word	0xcccccccd
   1d7ec:	40588ccc 	.word	0x40588ccc
   1d7f0:	200324c8 	.word	0x200324c8
   1d7f4:	40340000 	.word	0x40340000
   1d7f8:	20020da8 	.word	0x20020da8
   1d7fc:	3ff00000 	.word	0x3ff00000
   1d800:	40350000 	.word	0x40350000
   1d804:	200210b8 	.word	0x200210b8
   1d808:	404a0000 	.word	0x404a0000
   1d80c:	20020dc0 	.word	0x20020dc0
   1d810:	20020dc8 	.word	0x20020dc8
   1d814:	00000000 	.word	0x00000000

0001d818 <fix_work_fn>:

	notify_event(drv_data->dev, &evt);
}

static void fix_work_fn(struct k_work *work)
{
   1d818:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1d81c:	b0bf      	sub	sp, #252	; 0xfc
   1d81e:	4604      	mov	r4, r0
	struct gps_sim_data *drv_data =
		CONTAINER_OF(work, struct gps_sim_data, fix_work);
	struct gps_event evt = {
   1d820:	22c0      	movs	r2, #192	; 0xc0
   1d822:	2100      	movs	r1, #0
   1d824:	a80e      	add	r0, sp, #56	; 0x38
   1d826:	f027 fb4d 	bl	44ec4 <memset>
   1d82a:	2306      	movs	r3, #6
   1d82c:	f88d 3038 	strb.w	r3, [sp, #56]	; 0x38
		.type = GPS_EVT_NMEA_FIX,
	};

	if (drv_data->state != GPS_SIM_ACTIVE_SEARCH) {
   1d830:	f814 3ccc 	ldrb.w	r3, [r4, #-204]
   1d834:	2b02      	cmp	r3, #2
   1d836:	f040 80e5 	bne.w	1da04 <fix_work_fn+0x1ec>
		return;
	}

	k_delayed_work_cancel(&drv_data->timeout_work);
   1d83a:	f1a4 0020 	sub.w	r0, r4, #32
   1d83e:	f020 f97f 	bl	3db40 <k_delayed_work_cancel>

	generate_gps_data(&drv_data->nmea_sample,
   1d842:	f1a4 07b4 	sub.w	r7, r4, #180	; 0xb4
		(void)arch_syscall_invoke1((uintptr_t)&ret64, K_SYSCALL_K_UPTIME_GET);
		return (s64_t)ret64;
	}
#endif
	compiler_barrier();
	return z_impl_k_uptime_get();
   1d846:	f027 fa3c 	bl	44cc2 <z_impl_k_uptime_get>
	u32_t time = k_uptime_get_32() / K_MSEC(CONFIG_GPS_SIM_FIX_TIME);
   1d84a:	f44f 767a 	mov.w	r6, #1000	; 0x3e8
	return offset + amplitude * sin(time % UINT16_MAX);
   1d84e:	f64f 75ff 	movw	r5, #65535	; 0xffff
	u32_t time = k_uptime_get_32() / K_MSEC(CONFIG_GPS_SIM_FIX_TIME);
   1d852:	fbb0 f0f6 	udiv	r0, r0, r6
	return offset + amplitude * sin(time % UINT16_MAX);
   1d856:	fbb0 f3f5 	udiv	r3, r0, r5
   1d85a:	ebc3 4303 	rsb	r3, r3, r3, lsl #16
   1d85e:	1ac0      	subs	r0, r0, r3
   1d860:	f7fe ff30 	bl	1c6c4 <__aeabi_ui2d>
   1d864:	ec41 0b10 	vmov	d0, r0, r1
   1d868:	f000 f962 	bl	1db30 <sin>
   1d86c:	a377      	add	r3, pc, #476	; (adr r3, 1da4c <fix_work_fn+0x234>)
   1d86e:	e9d3 2300 	ldrd	r2, r3, [r3]
   1d872:	ec51 0b10 	vmov	r0, r1, d0
   1d876:	f7fe ff9f 	bl	1c7b8 <__aeabi_dmul>
   1d87a:	a376      	add	r3, pc, #472	; (adr r3, 1da54 <fix_work_fn+0x23c>)
   1d87c:	e9d3 2300 	ldrd	r2, r3, [r3]
   1d880:	f7fe fde4 	bl	1c44c <__adddf3>
   1d884:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
   1d888:	f027 fa1b 	bl	44cc2 <z_impl_k_uptime_get>
	u32_t time = k_uptime_get_32() / K_MSEC(CONFIG_GPS_SIM_FIX_TIME);
   1d88c:	fbb0 f0f6 	udiv	r0, r0, r6
	return offset + amplitude * cos(time % UINT16_MAX);
   1d890:	fbb0 f5f5 	udiv	r5, r0, r5
   1d894:	ebc5 4505 	rsb	r5, r5, r5, lsl #16
   1d898:	1b40      	subs	r0, r0, r5
   1d89a:	f7fe ff13 	bl	1c6c4 <__aeabi_ui2d>
   1d89e:	ec41 0b10 	vmov	d0, r0, r1
   1d8a2:	f000 f8e5 	bl	1da70 <cos>
   1d8a6:	a36d      	add	r3, pc, #436	; (adr r3, 1da5c <fix_work_fn+0x244>)
   1d8a8:	e9d3 2300 	ldrd	r2, r3, [r3]
   1d8ac:	ec51 0b10 	vmov	r0, r1, d0
   1d8b0:	f7fe ff82 	bl	1c7b8 <__aeabi_dmul>
   1d8b4:	a36b      	add	r3, pc, #428	; (adr r3, 1da64 <fix_work_fn+0x24c>)
   1d8b6:	e9d3 2300 	ldrd	r2, r3, [r3]
   1d8ba:	f7fe fdc7 	bl	1c44c <__adddf3>
   1d8be:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
   1d8c2:	f027 f9fe 	bl	44cc2 <z_impl_k_uptime_get>
	uptime = k_uptime_get_32() / MSEC_PER_SEC;
   1d8c6:	fbb0 f0f6 	udiv	r0, r0, r6
	second += (uptime - last_uptime);
   1d8ca:	4d5b      	ldr	r5, [pc, #364]	; (1da38 <fix_work_fn+0x220>)
   1d8cc:	495b      	ldr	r1, [pc, #364]	; (1da3c <fix_work_fn+0x224>)
   1d8ce:	782b      	ldrb	r3, [r5, #0]
   1d8d0:	680a      	ldr	r2, [r1, #0]
	last_uptime = uptime;
   1d8d2:	6008      	str	r0, [r1, #0]
	second += (uptime - last_uptime);
   1d8d4:	1a9b      	subs	r3, r3, r2
   1d8d6:	4403      	add	r3, r0
   1d8d8:	b2db      	uxtb	r3, r3
	if (second > 59) {
   1d8da:	2b3b      	cmp	r3, #59	; 0x3b
	second += (uptime - last_uptime);
   1d8dc:	702b      	strb	r3, [r5, #0]
	if (second > 59) {
   1d8de:	d91b      	bls.n	1d918 <fix_work_fn+0x100>
		second = second % 60;
   1d8e0:	213c      	movs	r1, #60	; 0x3c
   1d8e2:	fbb3 f2f1 	udiv	r2, r3, r1
   1d8e6:	fb01 3312 	mls	r3, r1, r2, r3
		minute += 1;
   1d8ea:	4e55      	ldr	r6, [pc, #340]	; (1da40 <fix_work_fn+0x228>)
		second = second % 60;
   1d8ec:	702b      	strb	r3, [r5, #0]
		minute += 1;
   1d8ee:	7833      	ldrb	r3, [r6, #0]
   1d8f0:	3301      	adds	r3, #1
   1d8f2:	b2db      	uxtb	r3, r3
		if (minute > 59) {
   1d8f4:	2b3b      	cmp	r3, #59	; 0x3b
		minute += 1;
   1d8f6:	7033      	strb	r3, [r6, #0]
		if (minute > 59) {
   1d8f8:	d90e      	bls.n	1d918 <fix_work_fn+0x100>
			minute = minute % 60;
   1d8fa:	fbb3 fcf1 	udiv	ip, r3, r1
   1d8fe:	fb01 331c 	mls	r3, r1, ip, r3
			hour = hour % 24;
   1d902:	2118      	movs	r1, #24
   1d904:	484f      	ldr	r0, [pc, #316]	; (1da44 <fix_work_fn+0x22c>)
			minute = minute % 60;
   1d906:	7033      	strb	r3, [r6, #0]
   1d908:	7802      	ldrb	r2, [r0, #0]
			hour += 1;
   1d90a:	1c53      	adds	r3, r2, #1
			hour = hour % 24;
   1d90c:	b2db      	uxtb	r3, r3
   1d90e:	fbb3 f2f1 	udiv	r2, r3, r1
   1d912:	fb01 3312 	mls	r3, r1, r2, r3
   1d916:	7003      	strb	r3, [r0, #0]
	if (lat < 0) {
   1d918:	2200      	movs	r2, #0
   1d91a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
   1d91e:	2300      	movs	r3, #0
   1d920:	f7ff f9bc 	bl	1cc9c <__aeabi_dcmplt>
   1d924:	2800      	cmp	r0, #0
   1d926:	d070      	beq.n	1da0a <fix_work_fn+0x1f2>
		lat *= -1.0;
   1d928:	e9dd 210a 	ldrd	r2, r1, [sp, #40]	; 0x28
		lat_heading = 'S';
   1d92c:	f04f 0a53 	mov.w	sl, #83	; 0x53
		lat *= -1.0;
   1d930:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   1d934:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
	if (lng < 0) {
   1d938:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
   1d93c:	2200      	movs	r2, #0
   1d93e:	2300      	movs	r3, #0
   1d940:	f7ff f9ac 	bl	1cc9c <__aeabi_dcmplt>
   1d944:	2800      	cmp	r0, #0
   1d946:	d063      	beq.n	1da10 <fix_work_fn+0x1f8>
		lng *= -1.0;
   1d948:	e9dd 210c 	ldrd	r2, r1, [sp, #48]	; 0x30
		lng_heading = 'W';
   1d94c:	f04f 0b57 	mov.w	fp, #87	; 0x57
		lng *= -1.0;
   1d950:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   1d954:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
	snprintf(gps_data->buf,
   1d958:	ed9d 7b0c 	vldr	d7, [sp, #48]	; 0x30
   1d95c:	ed8d 7b06 	vstr	d7, [sp, #24]
   1d960:	ed9d 7b0a 	vldr	d7, [sp, #40]	; 0x28
   1d964:	2600      	movs	r6, #0
   1d966:	ed8d 7b02 	vstr	d7, [sp, #8]
   1d96a:	e9cd b608 	strd	fp, r6, [sp, #32]
   1d96e:	f8cd a010 	str.w	sl, [sp, #16]
   1d972:	782b      	ldrb	r3, [r5, #0]
   1d974:	f8df 90c8 	ldr.w	r9, [pc, #200]	; 1da40 <fix_work_fn+0x228>
   1d978:	9301      	str	r3, [sp, #4]
   1d97a:	f8df 80c8 	ldr.w	r8, [pc, #200]	; 1da44 <fix_work_fn+0x22c>
   1d97e:	f899 3000 	ldrb.w	r3, [r9]
   1d982:	4a31      	ldr	r2, [pc, #196]	; (1da48 <fix_work_fn+0x230>)
   1d984:	9300      	str	r3, [sp, #0]
   1d986:	2153      	movs	r1, #83	; 0x53
   1d988:	f898 3000 	ldrb.w	r3, [r8]
   1d98c:	4638      	mov	r0, r7
   1d98e:	f021 fcf9 	bl	3f384 <sniprintf>
	while (*i != '*') {
   1d992:	f1a4 03b3 	sub.w	r3, r4, #179	; 0xb3
   1d996:	461a      	mov	r2, r3
   1d998:	f813 1b01 	ldrb.w	r1, [r3], #1
   1d99c:	292a      	cmp	r1, #42	; 0x2a
   1d99e:	d13a      	bne.n	1da16 <fix_work_fn+0x1fe>
		snprintf(gps_data->buf, GPS_NMEA_SENTENCE_MAX_LENGTH,
   1d9a0:	ed9d 7b0c 	vldr	d7, [sp, #48]	; 0x30
   1d9a4:	ed8d 7b06 	vstr	d7, [sp, #24]
   1d9a8:	ed9d 7b0a 	vldr	d7, [sp, #40]	; 0x28
   1d9ac:	ed8d 7b02 	vstr	d7, [sp, #8]
   1d9b0:	e9cd b608 	strd	fp, r6, [sp, #32]
   1d9b4:	f8cd a010 	str.w	sl, [sp, #16]
   1d9b8:	782b      	ldrb	r3, [r5, #0]
   1d9ba:	4a23      	ldr	r2, [pc, #140]	; (1da48 <fix_work_fn+0x230>)
   1d9bc:	9301      	str	r3, [sp, #4]
   1d9be:	f899 3000 	ldrb.w	r3, [r9]
   1d9c2:	2153      	movs	r1, #83	; 0x53
   1d9c4:	9300      	str	r3, [sp, #0]
   1d9c6:	4638      	mov	r0, r7
   1d9c8:	f898 3000 	ldrb.w	r3, [r8]
   1d9cc:	f021 fcda 	bl	3f384 <sniprintf>
	gps_data->len =
   1d9d0:	b2c2      	uxtb	r2, r0
   1d9d2:	f804 2c61 	strb.w	r2, [r4, #-97]
			  CONFIG_GPS_SIM_MAX_STEP / 1000.0);

	evt.nmea.len = drv_data->nmea_sample.len;

	memcpy(evt.nmea.buf, drv_data->nmea_sample.buf,
   1d9d6:	23b8      	movs	r3, #184	; 0xb8
   1d9d8:	4639      	mov	r1, r7
   1d9da:	a810      	add	r0, sp, #64	; 0x40
	evt.nmea.len = drv_data->nmea_sample.len;
   1d9dc:	f88d 2093 	strb.w	r2, [sp, #147]	; 0x93
	memcpy(evt.nmea.buf, drv_data->nmea_sample.buf,
   1d9e0:	f027 fa43 	bl	44e6a <__memcpy_chk>
	       drv_data->nmea_sample.len);
	notify_event(drv_data->dev, &evt);
   1d9e4:	a90e      	add	r1, sp, #56	; 0x38
   1d9e6:	f854 0cd0 	ldr.w	r0, [r4, #-208]
   1d9ea:	f027 f81a 	bl	44a22 <notify_event>

	if (drv_data->cfg.nav_mode == GPS_NAV_MODE_CONTINUOUS) {
   1d9ee:	f814 2cc4 	ldrb.w	r2, [r4, #-196]
   1d9f2:	2a01      	cmp	r2, #1
   1d9f4:	d116      	bne.n	1da24 <fix_work_fn+0x20c>
		k_delayed_work_submit_to_queue(&drv_data->work_q,
   1d9f6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   1d9fa:	4621      	mov	r1, r4
   1d9fc:	f504 6002 	add.w	r0, r4, #2080	; 0x820
					       &drv_data->fix_work,
					       CONFIG_GPS_SIM_FIX_TIME);
	} else if (drv_data->cfg.nav_mode == GPS_NAV_MODE_SINGLE_FIX) {
		drv_data->state = GPS_SIM_IDLE;
		k_delayed_work_submit_to_queue(&drv_data->work_q,
   1da00:	f020 f812 	bl	3da28 <k_delayed_work_submit_to_queue>
					       &drv_data->stop_work,
					       K_NO_WAIT);
	}
}
   1da04:	b03f      	add	sp, #252	; 0xfc
   1da06:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	char lat_heading = 'N';
   1da0a:	f04f 0a4e 	mov.w	sl, #78	; 0x4e
   1da0e:	e793      	b.n	1d938 <fix_work_fn+0x120>
	char lng_heading = 'E';
   1da10:	f04f 0b45 	mov.w	fp, #69	; 0x45
   1da14:	e7a0      	b.n	1d958 <fix_work_fn+0x140>
		if ((i - gps_data) > GPS_NMEA_SENTENCE_MAX_LENGTH) {
   1da16:	1bd2      	subs	r2, r2, r7
   1da18:	2a53      	cmp	r2, #83	; 0x53
   1da1a:	dc01      	bgt.n	1da20 <fix_work_fn+0x208>
		checksum ^= *i;
   1da1c:	404e      	eors	r6, r1
		i++;
   1da1e:	e7ba      	b.n	1d996 <fix_work_fn+0x17e>
			return 0;
   1da20:	2600      	movs	r6, #0
   1da22:	e7bd      	b.n	1d9a0 <fix_work_fn+0x188>
	} else if (drv_data->cfg.nav_mode == GPS_NAV_MODE_SINGLE_FIX) {
   1da24:	2a00      	cmp	r2, #0
   1da26:	d1ed      	bne.n	1da04 <fix_work_fn+0x1ec>
		drv_data->state = GPS_SIM_IDLE;
   1da28:	2301      	movs	r3, #1
		k_delayed_work_submit_to_queue(&drv_data->work_q,
   1da2a:	f1a4 0140 	sub.w	r1, r4, #64	; 0x40
		drv_data->state = GPS_SIM_IDLE;
   1da2e:	f804 3ccc 	strb.w	r3, [r4, #-204]
		k_delayed_work_submit_to_queue(&drv_data->work_q,
   1da32:	f504 6002 	add.w	r0, r4, #2080	; 0x820
   1da36:	e7e3      	b.n	1da00 <fix_work_fn+0x1e8>
   1da38:	200328c6 	.word	0x200328c6
   1da3c:	20024e58 	.word	0x20024e58
   1da40:	200328c5 	.word	0x200328c5
   1da44:	200328c4 	.word	0x200328c4
   1da48:	0004ce38 	.word	0x0004ce38
   1da4c:	9999999a 	.word	0x9999999a
   1da50:	3fa99999 	.word	0x3fa99999
   1da54:	ae147ae1 	.word	0xae147ae1
   1da58:	40b8b547 	.word	0x40b8b547
   1da5c:	9999999a 	.word	0x9999999a
   1da60:	3fb99999 	.word	0x3fb99999
   1da64:	d2f1a9fc 	.word	0xd2f1a9fc
   1da68:	409008cd 	.word	0x409008cd
   1da6c:	00000000 	.word	0x00000000

0001da70 <cos>:
   1da70:	ec51 0b10 	vmov	r0, r1, d0
   1da74:	4a2c      	ldr	r2, [pc, #176]	; (1db28 <cos+0xb8>)
   1da76:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
   1da7a:	4293      	cmp	r3, r2
   1da7c:	b500      	push	{lr}
   1da7e:	b085      	sub	sp, #20
   1da80:	dd20      	ble.n	1dac4 <cos+0x54>
   1da82:	4a2a      	ldr	r2, [pc, #168]	; (1db2c <cos+0xbc>)
   1da84:	4293      	cmp	r3, r2
   1da86:	dd09      	ble.n	1da9c <cos+0x2c>
   1da88:	ee10 2a10 	vmov	r2, s0
   1da8c:	460b      	mov	r3, r1
   1da8e:	f7fe fcdb 	bl	1c448 <__aeabi_dsub>
   1da92:	ec41 0b10 	vmov	d0, r0, r1
   1da96:	b005      	add	sp, #20
   1da98:	f85d fb04 	ldr.w	pc, [sp], #4
   1da9c:	4668      	mov	r0, sp
   1da9e:	f000 f8a7 	bl	1dbf0 <__ieee754_rem_pio2>
   1daa2:	f000 0003 	and.w	r0, r0, #3
   1daa6:	2801      	cmp	r0, #1
   1daa8:	d017      	beq.n	1dada <cos+0x6a>
   1daaa:	2802      	cmp	r0, #2
   1daac:	d02f      	beq.n	1db0e <cos+0x9e>
   1daae:	b328      	cbz	r0, 1dafc <cos+0x8c>
   1dab0:	2001      	movs	r0, #1
   1dab2:	ed9d 1b02 	vldr	d1, [sp, #8]
   1dab6:	ed9d 0b00 	vldr	d0, [sp]
   1daba:	f001 f80d 	bl	1ead8 <__kernel_sin>
   1dabe:	ec51 0b10 	vmov	r0, r1, d0
   1dac2:	e7e6      	b.n	1da92 <cos+0x22>
   1dac4:	ed9f 1b16 	vldr	d1, [pc, #88]	; 1db20 <cos+0xb0>
   1dac8:	f000 faae 	bl	1e028 <__kernel_cos>
   1dacc:	ec51 0b10 	vmov	r0, r1, d0
   1dad0:	ec41 0b10 	vmov	d0, r0, r1
   1dad4:	b005      	add	sp, #20
   1dad6:	f85d fb04 	ldr.w	pc, [sp], #4
   1dada:	ed9d 1b02 	vldr	d1, [sp, #8]
   1dade:	ed9d 0b00 	vldr	d0, [sp]
   1dae2:	f000 fff9 	bl	1ead8 <__kernel_sin>
   1dae6:	ee10 0a10 	vmov	r0, s0
   1daea:	ec53 2b10 	vmov	r2, r3, d0
   1daee:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
   1daf2:	ec41 0b10 	vmov	d0, r0, r1
   1daf6:	b005      	add	sp, #20
   1daf8:	f85d fb04 	ldr.w	pc, [sp], #4
   1dafc:	ed9d 1b02 	vldr	d1, [sp, #8]
   1db00:	ed9d 0b00 	vldr	d0, [sp]
   1db04:	f000 fa90 	bl	1e028 <__kernel_cos>
   1db08:	ec51 0b10 	vmov	r0, r1, d0
   1db0c:	e7c1      	b.n	1da92 <cos+0x22>
   1db0e:	ed9d 1b02 	vldr	d1, [sp, #8]
   1db12:	ed9d 0b00 	vldr	d0, [sp]
   1db16:	f000 fa87 	bl	1e028 <__kernel_cos>
   1db1a:	e7e4      	b.n	1dae6 <cos+0x76>
   1db1c:	f3af 8000 	nop.w
	...
   1db28:	3fe921fb 	.word	0x3fe921fb
   1db2c:	7fefffff 	.word	0x7fefffff

0001db30 <sin>:
   1db30:	ec51 0b10 	vmov	r0, r1, d0
   1db34:	4a2c      	ldr	r2, [pc, #176]	; (1dbe8 <sin+0xb8>)
   1db36:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
   1db3a:	4293      	cmp	r3, r2
   1db3c:	b500      	push	{lr}
   1db3e:	b085      	sub	sp, #20
   1db40:	dd27      	ble.n	1db92 <sin+0x62>
   1db42:	4a2a      	ldr	r2, [pc, #168]	; (1dbec <sin+0xbc>)
   1db44:	4293      	cmp	r3, r2
   1db46:	dd09      	ble.n	1db5c <sin+0x2c>
   1db48:	ee10 2a10 	vmov	r2, s0
   1db4c:	460b      	mov	r3, r1
   1db4e:	f7fe fc7b 	bl	1c448 <__aeabi_dsub>
   1db52:	ec41 0b10 	vmov	d0, r0, r1
   1db56:	b005      	add	sp, #20
   1db58:	f85d fb04 	ldr.w	pc, [sp], #4
   1db5c:	4668      	mov	r0, sp
   1db5e:	f000 f847 	bl	1dbf0 <__ieee754_rem_pio2>
   1db62:	f000 0003 	and.w	r0, r0, #3
   1db66:	2801      	cmp	r0, #1
   1db68:	d01f      	beq.n	1dbaa <sin+0x7a>
   1db6a:	2802      	cmp	r0, #2
   1db6c:	d030      	beq.n	1dbd0 <sin+0xa0>
   1db6e:	b328      	cbz	r0, 1dbbc <sin+0x8c>
   1db70:	ed9d 1b02 	vldr	d1, [sp, #8]
   1db74:	ed9d 0b00 	vldr	d0, [sp]
   1db78:	f000 fa56 	bl	1e028 <__kernel_cos>
   1db7c:	ee10 0a10 	vmov	r0, s0
   1db80:	ec53 2b10 	vmov	r2, r3, d0
   1db84:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
   1db88:	ec41 0b10 	vmov	d0, r0, r1
   1db8c:	b005      	add	sp, #20
   1db8e:	f85d fb04 	ldr.w	pc, [sp], #4
   1db92:	2000      	movs	r0, #0
   1db94:	ed9f 1b12 	vldr	d1, [pc, #72]	; 1dbe0 <sin+0xb0>
   1db98:	f000 ff9e 	bl	1ead8 <__kernel_sin>
   1db9c:	ec51 0b10 	vmov	r0, r1, d0
   1dba0:	ec41 0b10 	vmov	d0, r0, r1
   1dba4:	b005      	add	sp, #20
   1dba6:	f85d fb04 	ldr.w	pc, [sp], #4
   1dbaa:	ed9d 1b02 	vldr	d1, [sp, #8]
   1dbae:	ed9d 0b00 	vldr	d0, [sp]
   1dbb2:	f000 fa39 	bl	1e028 <__kernel_cos>
   1dbb6:	ec51 0b10 	vmov	r0, r1, d0
   1dbba:	e7ca      	b.n	1db52 <sin+0x22>
   1dbbc:	2001      	movs	r0, #1
   1dbbe:	ed9d 1b02 	vldr	d1, [sp, #8]
   1dbc2:	ed9d 0b00 	vldr	d0, [sp]
   1dbc6:	f000 ff87 	bl	1ead8 <__kernel_sin>
   1dbca:	ec51 0b10 	vmov	r0, r1, d0
   1dbce:	e7c0      	b.n	1db52 <sin+0x22>
   1dbd0:	2001      	movs	r0, #1
   1dbd2:	ed9d 1b02 	vldr	d1, [sp, #8]
   1dbd6:	ed9d 0b00 	vldr	d0, [sp]
   1dbda:	f000 ff7d 	bl	1ead8 <__kernel_sin>
   1dbde:	e7cd      	b.n	1db7c <sin+0x4c>
	...
   1dbe8:	3fe921fb 	.word	0x3fe921fb
   1dbec:	7fefffff 	.word	0x7fefffff

0001dbf0 <__ieee754_rem_pio2>:
   1dbf0:	ec53 2b10 	vmov	r2, r3, d0
   1dbf4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1dbf8:	4999      	ldr	r1, [pc, #612]	; (1de60 <__ieee754_rem_pio2+0x270>)
   1dbfa:	f023 4500 	bic.w	r5, r3, #2147483648	; 0x80000000
   1dbfe:	b08f      	sub	sp, #60	; 0x3c
   1dc00:	428d      	cmp	r5, r1
   1dc02:	f340 8088 	ble.w	1dd16 <__ieee754_rem_pio2+0x126>
   1dc06:	4997      	ldr	r1, [pc, #604]	; (1de64 <__ieee754_rem_pio2+0x274>)
   1dc08:	461e      	mov	r6, r3
   1dc0a:	4604      	mov	r4, r0
   1dc0c:	428d      	cmp	r5, r1
   1dc0e:	dc29      	bgt.n	1dc64 <__ieee754_rem_pio2+0x74>
   1dc10:	2e00      	cmp	r6, #0
   1dc12:	4619      	mov	r1, r3
   1dc14:	ee10 0a10 	vmov	r0, s0
   1dc18:	a387      	add	r3, pc, #540	; (adr r3, 1de38 <__ieee754_rem_pio2+0x248>)
   1dc1a:	e9d3 2300 	ldrd	r2, r3, [r3]
   1dc1e:	f340 81ae 	ble.w	1df7e <__ieee754_rem_pio2+0x38e>
   1dc22:	f7fe fc11 	bl	1c448 <__aeabi_dsub>
   1dc26:	4b90      	ldr	r3, [pc, #576]	; (1de68 <__ieee754_rem_pio2+0x278>)
   1dc28:	4680      	mov	r8, r0
   1dc2a:	4689      	mov	r9, r1
   1dc2c:	429d      	cmp	r5, r3
   1dc2e:	f000 8088 	beq.w	1dd42 <__ieee754_rem_pio2+0x152>
   1dc32:	2701      	movs	r7, #1
   1dc34:	a382      	add	r3, pc, #520	; (adr r3, 1de40 <__ieee754_rem_pio2+0x250>)
   1dc36:	e9d3 2300 	ldrd	r2, r3, [r3]
   1dc3a:	f7fe fc05 	bl	1c448 <__aeabi_dsub>
   1dc3e:	4602      	mov	r2, r0
   1dc40:	460b      	mov	r3, r1
   1dc42:	4640      	mov	r0, r8
   1dc44:	4649      	mov	r1, r9
   1dc46:	e9c4 2300 	strd	r2, r3, [r4]
   1dc4a:	f7fe fbfd 	bl	1c448 <__aeabi_dsub>
   1dc4e:	a37c      	add	r3, pc, #496	; (adr r3, 1de40 <__ieee754_rem_pio2+0x250>)
   1dc50:	e9d3 2300 	ldrd	r2, r3, [r3]
   1dc54:	f7fe fbf8 	bl	1c448 <__aeabi_dsub>
   1dc58:	e9c4 0102 	strd	r0, r1, [r4, #8]
   1dc5c:	4638      	mov	r0, r7
   1dc5e:	b00f      	add	sp, #60	; 0x3c
   1dc60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1dc64:	4981      	ldr	r1, [pc, #516]	; (1de6c <__ieee754_rem_pio2+0x27c>)
   1dc66:	428d      	cmp	r5, r1
   1dc68:	f340 808b 	ble.w	1dd82 <__ieee754_rem_pio2+0x192>
   1dc6c:	4980      	ldr	r1, [pc, #512]	; (1de70 <__ieee754_rem_pio2+0x280>)
   1dc6e:	428d      	cmp	r5, r1
   1dc70:	dc5c      	bgt.n	1dd2c <__ieee754_rem_pio2+0x13c>
   1dc72:	152f      	asrs	r7, r5, #20
   1dc74:	ee10 0a10 	vmov	r0, s0
   1dc78:	ee10 8a10 	vmov	r8, s0
   1dc7c:	f2a7 4716 	subw	r7, r7, #1046	; 0x416
   1dc80:	eba5 5907 	sub.w	r9, r5, r7, lsl #20
   1dc84:	4649      	mov	r1, r9
   1dc86:	f7ff f831 	bl	1ccec <__aeabi_d2iz>
   1dc8a:	f7fe fd2b 	bl	1c6e4 <__aeabi_i2d>
   1dc8e:	4682      	mov	sl, r0
   1dc90:	468b      	mov	fp, r1
   1dc92:	4640      	mov	r0, r8
   1dc94:	4649      	mov	r1, r9
   1dc96:	4652      	mov	r2, sl
   1dc98:	465b      	mov	r3, fp
   1dc9a:	e9cd ab08 	strd	sl, fp, [sp, #32]
   1dc9e:	f7fe fbd3 	bl	1c448 <__aeabi_dsub>
   1dca2:	2200      	movs	r2, #0
   1dca4:	4b73      	ldr	r3, [pc, #460]	; (1de74 <__ieee754_rem_pio2+0x284>)
   1dca6:	f7fe fd87 	bl	1c7b8 <__aeabi_dmul>
   1dcaa:	4689      	mov	r9, r1
   1dcac:	4680      	mov	r8, r0
   1dcae:	f7ff f81d 	bl	1ccec <__aeabi_d2iz>
   1dcb2:	4605      	mov	r5, r0
   1dcb4:	f7fe fd16 	bl	1c6e4 <__aeabi_i2d>
   1dcb8:	4602      	mov	r2, r0
   1dcba:	460b      	mov	r3, r1
   1dcbc:	4640      	mov	r0, r8
   1dcbe:	4649      	mov	r1, r9
   1dcc0:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
   1dcc4:	f7fe fbc0 	bl	1c448 <__aeabi_dsub>
   1dcc8:	2200      	movs	r2, #0
   1dcca:	4b6a      	ldr	r3, [pc, #424]	; (1de74 <__ieee754_rem_pio2+0x284>)
   1dccc:	f7fe fd74 	bl	1c7b8 <__aeabi_dmul>
   1dcd0:	2200      	movs	r2, #0
   1dcd2:	2300      	movs	r3, #0
   1dcd4:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
   1dcd8:	f7fe ffd6 	bl	1cc88 <__aeabi_dcmpeq>
   1dcdc:	2800      	cmp	r0, #0
   1dcde:	f000 814c 	beq.w	1df7a <__ieee754_rem_pio2+0x38a>
   1dce2:	2d00      	cmp	r5, #0
   1dce4:	bf0c      	ite	eq
   1dce6:	2301      	moveq	r3, #1
   1dce8:	2302      	movne	r3, #2
   1dcea:	4963      	ldr	r1, [pc, #396]	; (1de78 <__ieee754_rem_pio2+0x288>)
   1dcec:	2002      	movs	r0, #2
   1dcee:	463a      	mov	r2, r7
   1dcf0:	9101      	str	r1, [sp, #4]
   1dcf2:	4621      	mov	r1, r4
   1dcf4:	9000      	str	r0, [sp, #0]
   1dcf6:	a808      	add	r0, sp, #32
   1dcf8:	f000 fada 	bl	1e2b0 <__kernel_rem_pio2>
   1dcfc:	2e00      	cmp	r6, #0
   1dcfe:	4607      	mov	r7, r0
   1dd00:	daac      	bge.n	1dc5c <__ieee754_rem_pio2+0x6c>
   1dd02:	6862      	ldr	r2, [r4, #4]
   1dd04:	4247      	negs	r7, r0
   1dd06:	68e3      	ldr	r3, [r4, #12]
   1dd08:	f102 4200 	add.w	r2, r2, #2147483648	; 0x80000000
   1dd0c:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
   1dd10:	6062      	str	r2, [r4, #4]
   1dd12:	60e3      	str	r3, [r4, #12]
   1dd14:	e7a2      	b.n	1dc5c <__ieee754_rem_pio2+0x6c>
   1dd16:	2700      	movs	r7, #0
   1dd18:	2400      	movs	r4, #0
   1dd1a:	2500      	movs	r5, #0
   1dd1c:	ed80 0b00 	vstr	d0, [r0]
   1dd20:	e9c0 4502 	strd	r4, r5, [r0, #8]
   1dd24:	4638      	mov	r0, r7
   1dd26:	b00f      	add	sp, #60	; 0x3c
   1dd28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1dd2c:	ee10 0a10 	vmov	r0, s0
   1dd30:	4619      	mov	r1, r3
   1dd32:	f7fe fb89 	bl	1c448 <__aeabi_dsub>
   1dd36:	2700      	movs	r7, #0
   1dd38:	e9c4 0102 	strd	r0, r1, [r4, #8]
   1dd3c:	e9c4 0100 	strd	r0, r1, [r4]
   1dd40:	e78c      	b.n	1dc5c <__ieee754_rem_pio2+0x6c>
   1dd42:	a341      	add	r3, pc, #260	; (adr r3, 1de48 <__ieee754_rem_pio2+0x258>)
   1dd44:	e9d3 2300 	ldrd	r2, r3, [r3]
   1dd48:	f7fe fb7e 	bl	1c448 <__aeabi_dsub>
   1dd4c:	4606      	mov	r6, r0
   1dd4e:	460f      	mov	r7, r1
   1dd50:	a33f      	add	r3, pc, #252	; (adr r3, 1de50 <__ieee754_rem_pio2+0x260>)
   1dd52:	e9d3 2300 	ldrd	r2, r3, [r3]
   1dd56:	f7fe fb77 	bl	1c448 <__aeabi_dsub>
   1dd5a:	4602      	mov	r2, r0
   1dd5c:	460b      	mov	r3, r1
   1dd5e:	4630      	mov	r0, r6
   1dd60:	4639      	mov	r1, r7
   1dd62:	2701      	movs	r7, #1
   1dd64:	e9c4 2300 	strd	r2, r3, [r4]
   1dd68:	f7fe fb6e 	bl	1c448 <__aeabi_dsub>
   1dd6c:	a338      	add	r3, pc, #224	; (adr r3, 1de50 <__ieee754_rem_pio2+0x260>)
   1dd6e:	e9d3 2300 	ldrd	r2, r3, [r3]
   1dd72:	f7fe fb69 	bl	1c448 <__aeabi_dsub>
   1dd76:	e9c4 0102 	strd	r0, r1, [r4, #8]
   1dd7a:	4638      	mov	r0, r7
   1dd7c:	b00f      	add	sp, #60	; 0x3c
   1dd7e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1dd82:	f020 fe07 	bl	3e994 <fabs>
   1dd86:	ee10 0a10 	vmov	r0, s0
   1dd8a:	ec59 8b10 	vmov	r8, r9, d0
   1dd8e:	a332      	add	r3, pc, #200	; (adr r3, 1de58 <__ieee754_rem_pio2+0x268>)
   1dd90:	e9d3 2300 	ldrd	r2, r3, [r3]
   1dd94:	4649      	mov	r1, r9
   1dd96:	f7fe fd0f 	bl	1c7b8 <__aeabi_dmul>
   1dd9a:	2200      	movs	r2, #0
   1dd9c:	4b37      	ldr	r3, [pc, #220]	; (1de7c <__ieee754_rem_pio2+0x28c>)
   1dd9e:	f7fe fb55 	bl	1c44c <__adddf3>
   1dda2:	f7fe ffa3 	bl	1ccec <__aeabi_d2iz>
   1dda6:	4607      	mov	r7, r0
   1dda8:	f7fe fc9c 	bl	1c6e4 <__aeabi_i2d>
   1ddac:	a322      	add	r3, pc, #136	; (adr r3, 1de38 <__ieee754_rem_pio2+0x248>)
   1ddae:	e9d3 2300 	ldrd	r2, r3, [r3]
   1ddb2:	e9cd 0104 	strd	r0, r1, [sp, #16]
   1ddb6:	f7fe fcff 	bl	1c7b8 <__aeabi_dmul>
   1ddba:	4602      	mov	r2, r0
   1ddbc:	460b      	mov	r3, r1
   1ddbe:	4640      	mov	r0, r8
   1ddc0:	4649      	mov	r1, r9
   1ddc2:	f7fe fb41 	bl	1c448 <__aeabi_dsub>
   1ddc6:	4682      	mov	sl, r0
   1ddc8:	468b      	mov	fp, r1
   1ddca:	a31d      	add	r3, pc, #116	; (adr r3, 1de40 <__ieee754_rem_pio2+0x250>)
   1ddcc:	e9d3 2300 	ldrd	r2, r3, [r3]
   1ddd0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   1ddd4:	f7fe fcf0 	bl	1c7b8 <__aeabi_dmul>
   1ddd8:	2f1f      	cmp	r7, #31
   1ddda:	e9cd 0102 	strd	r0, r1, [sp, #8]
   1ddde:	dc51      	bgt.n	1de84 <__ieee754_rem_pio2+0x294>
   1dde0:	4602      	mov	r2, r0
   1dde2:	460b      	mov	r3, r1
   1dde4:	4650      	mov	r0, sl
   1dde6:	4659      	mov	r1, fp
   1dde8:	f7fe fb2e 	bl	1c448 <__aeabi_dsub>
   1ddec:	4b24      	ldr	r3, [pc, #144]	; (1de80 <__ieee754_rem_pio2+0x290>)
   1ddee:	1e7a      	subs	r2, r7, #1
   1ddf0:	4680      	mov	r8, r0
   1ddf2:	4689      	mov	r9, r1
   1ddf4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   1ddf8:	42ab      	cmp	r3, r5
   1ddfa:	d04b      	beq.n	1de94 <__ieee754_rem_pio2+0x2a4>
   1ddfc:	4642      	mov	r2, r8
   1ddfe:	464b      	mov	r3, r9
   1de00:	4650      	mov	r0, sl
   1de02:	4659      	mov	r1, fp
   1de04:	e9c4 8900 	strd	r8, r9, [r4]
   1de08:	f7fe fb1e 	bl	1c448 <__aeabi_dsub>
   1de0c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   1de10:	f7fe fb1a 	bl	1c448 <__aeabi_dsub>
   1de14:	2e00      	cmp	r6, #0
   1de16:	e9c4 0102 	strd	r0, r1, [r4, #8]
   1de1a:	f6bf af1f 	bge.w	1dc5c <__ieee754_rem_pio2+0x6c>
   1de1e:	f109 4500 	add.w	r5, r9, #2147483648	; 0x80000000
   1de22:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   1de26:	427f      	negs	r7, r7
   1de28:	e9c4 8500 	strd	r8, r5, [r4]
   1de2c:	e9c4 0302 	strd	r0, r3, [r4, #8]
   1de30:	e714      	b.n	1dc5c <__ieee754_rem_pio2+0x6c>
   1de32:	bf00      	nop
   1de34:	f3af 8000 	nop.w
   1de38:	54400000 	.word	0x54400000
   1de3c:	3ff921fb 	.word	0x3ff921fb
   1de40:	1a626331 	.word	0x1a626331
   1de44:	3dd0b461 	.word	0x3dd0b461
   1de48:	1a600000 	.word	0x1a600000
   1de4c:	3dd0b461 	.word	0x3dd0b461
   1de50:	2e037073 	.word	0x2e037073
   1de54:	3ba3198a 	.word	0x3ba3198a
   1de58:	6dc9c883 	.word	0x6dc9c883
   1de5c:	3fe45f30 	.word	0x3fe45f30
   1de60:	3fe921fb 	.word	0x3fe921fb
   1de64:	4002d97b 	.word	0x4002d97b
   1de68:	3ff921fb 	.word	0x3ff921fb
   1de6c:	413921fb 	.word	0x413921fb
   1de70:	7fefffff 	.word	0x7fefffff
   1de74:	41700000 	.word	0x41700000
   1de78:	00047364 	.word	0x00047364
   1de7c:	3fe00000 	.word	0x3fe00000
   1de80:	000472e4 	.word	0x000472e4
   1de84:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   1de88:	4650      	mov	r0, sl
   1de8a:	4659      	mov	r1, fp
   1de8c:	f7fe fadc 	bl	1c448 <__aeabi_dsub>
   1de90:	4680      	mov	r8, r0
   1de92:	4689      	mov	r9, r1
   1de94:	152d      	asrs	r5, r5, #20
   1de96:	f3c9 530a 	ubfx	r3, r9, #20, #11
   1de9a:	1aeb      	subs	r3, r5, r3
   1de9c:	2b10      	cmp	r3, #16
   1de9e:	ddad      	ble.n	1ddfc <__ieee754_rem_pio2+0x20c>
   1dea0:	a357      	add	r3, pc, #348	; (adr r3, 1e000 <__ieee754_rem_pio2+0x410>)
   1dea2:	e9d3 2300 	ldrd	r2, r3, [r3]
   1dea6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   1deaa:	f7fe fc85 	bl	1c7b8 <__aeabi_dmul>
   1deae:	4680      	mov	r8, r0
   1deb0:	4689      	mov	r9, r1
   1deb2:	4602      	mov	r2, r0
   1deb4:	460b      	mov	r3, r1
   1deb6:	4650      	mov	r0, sl
   1deb8:	4659      	mov	r1, fp
   1deba:	f7fe fac5 	bl	1c448 <__aeabi_dsub>
   1debe:	4602      	mov	r2, r0
   1dec0:	460b      	mov	r3, r1
   1dec2:	4650      	mov	r0, sl
   1dec4:	4659      	mov	r1, fp
   1dec6:	e9cd 2306 	strd	r2, r3, [sp, #24]
   1deca:	f7fe fabd 	bl	1c448 <__aeabi_dsub>
   1dece:	4642      	mov	r2, r8
   1ded0:	464b      	mov	r3, r9
   1ded2:	f7fe fab9 	bl	1c448 <__aeabi_dsub>
   1ded6:	4680      	mov	r8, r0
   1ded8:	4689      	mov	r9, r1
   1deda:	a34b      	add	r3, pc, #300	; (adr r3, 1e008 <__ieee754_rem_pio2+0x418>)
   1dedc:	e9d3 2300 	ldrd	r2, r3, [r3]
   1dee0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   1dee4:	f7fe fc68 	bl	1c7b8 <__aeabi_dmul>
   1dee8:	4642      	mov	r2, r8
   1deea:	464b      	mov	r3, r9
   1deec:	f7fe faac 	bl	1c448 <__aeabi_dsub>
   1def0:	460b      	mov	r3, r1
   1def2:	4602      	mov	r2, r0
   1def4:	e9dd ab06 	ldrd	sl, fp, [sp, #24]
   1def8:	e9cd 0102 	strd	r0, r1, [sp, #8]
   1defc:	4650      	mov	r0, sl
   1defe:	4659      	mov	r1, fp
   1df00:	f7fe faa2 	bl	1c448 <__aeabi_dsub>
   1df04:	f3c1 530a 	ubfx	r3, r1, #20, #11
   1df08:	4680      	mov	r8, r0
   1df0a:	4689      	mov	r9, r1
   1df0c:	1aed      	subs	r5, r5, r3
   1df0e:	2d31      	cmp	r5, #49	; 0x31
   1df10:	f77f af74 	ble.w	1ddfc <__ieee754_rem_pio2+0x20c>
   1df14:	a33f      	add	r3, pc, #252	; (adr r3, 1e014 <__ieee754_rem_pio2+0x424>)
   1df16:	e9d3 2300 	ldrd	r2, r3, [r3]
   1df1a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   1df1e:	f7fe fc4b 	bl	1c7b8 <__aeabi_dmul>
   1df22:	4680      	mov	r8, r0
   1df24:	4689      	mov	r9, r1
   1df26:	4602      	mov	r2, r0
   1df28:	460b      	mov	r3, r1
   1df2a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
   1df2e:	f7fe fa8b 	bl	1c448 <__aeabi_dsub>
   1df32:	4602      	mov	r2, r0
   1df34:	460b      	mov	r3, r1
   1df36:	4682      	mov	sl, r0
   1df38:	468b      	mov	fp, r1
   1df3a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
   1df3e:	f7fe fa83 	bl	1c448 <__aeabi_dsub>
   1df42:	4642      	mov	r2, r8
   1df44:	464b      	mov	r3, r9
   1df46:	f7fe fa7f 	bl	1c448 <__aeabi_dsub>
   1df4a:	4680      	mov	r8, r0
   1df4c:	4689      	mov	r9, r1
   1df4e:	a333      	add	r3, pc, #204	; (adr r3, 1e01c <__ieee754_rem_pio2+0x42c>)
   1df50:	e9d3 2300 	ldrd	r2, r3, [r3]
   1df54:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   1df58:	f7fe fc2e 	bl	1c7b8 <__aeabi_dmul>
   1df5c:	4642      	mov	r2, r8
   1df5e:	464b      	mov	r3, r9
   1df60:	f7fe fa72 	bl	1c448 <__aeabi_dsub>
   1df64:	4602      	mov	r2, r0
   1df66:	460b      	mov	r3, r1
   1df68:	4650      	mov	r0, sl
   1df6a:	4659      	mov	r1, fp
   1df6c:	e9cd 2302 	strd	r2, r3, [sp, #8]
   1df70:	f7fe fa6a 	bl	1c448 <__aeabi_dsub>
   1df74:	4680      	mov	r8, r0
   1df76:	4689      	mov	r9, r1
   1df78:	e740      	b.n	1ddfc <__ieee754_rem_pio2+0x20c>
   1df7a:	2303      	movs	r3, #3
   1df7c:	e6b5      	b.n	1dcea <__ieee754_rem_pio2+0xfa>
   1df7e:	f7fe fa65 	bl	1c44c <__adddf3>
   1df82:	4b23      	ldr	r3, [pc, #140]	; (1e010 <__ieee754_rem_pio2+0x420>)
   1df84:	4680      	mov	r8, r0
   1df86:	4689      	mov	r9, r1
   1df88:	429d      	cmp	r5, r3
   1df8a:	d016      	beq.n	1dfba <__ieee754_rem_pio2+0x3ca>
   1df8c:	f04f 37ff 	mov.w	r7, #4294967295
   1df90:	a319      	add	r3, pc, #100	; (adr r3, 1dff8 <__ieee754_rem_pio2+0x408>)
   1df92:	e9d3 2300 	ldrd	r2, r3, [r3]
   1df96:	f7fe fa59 	bl	1c44c <__adddf3>
   1df9a:	4602      	mov	r2, r0
   1df9c:	460b      	mov	r3, r1
   1df9e:	4640      	mov	r0, r8
   1dfa0:	4649      	mov	r1, r9
   1dfa2:	e9c4 2300 	strd	r2, r3, [r4]
   1dfa6:	f7fe fa4f 	bl	1c448 <__aeabi_dsub>
   1dfaa:	a313      	add	r3, pc, #76	; (adr r3, 1dff8 <__ieee754_rem_pio2+0x408>)
   1dfac:	e9d3 2300 	ldrd	r2, r3, [r3]
   1dfb0:	f7fe fa4c 	bl	1c44c <__adddf3>
   1dfb4:	e9c4 0102 	strd	r0, r1, [r4, #8]
   1dfb8:	e650      	b.n	1dc5c <__ieee754_rem_pio2+0x6c>
   1dfba:	a311      	add	r3, pc, #68	; (adr r3, 1e000 <__ieee754_rem_pio2+0x410>)
   1dfbc:	e9d3 2300 	ldrd	r2, r3, [r3]
   1dfc0:	f7fe fa44 	bl	1c44c <__adddf3>
   1dfc4:	460f      	mov	r7, r1
   1dfc6:	4606      	mov	r6, r0
   1dfc8:	a30f      	add	r3, pc, #60	; (adr r3, 1e008 <__ieee754_rem_pio2+0x418>)
   1dfca:	e9d3 2300 	ldrd	r2, r3, [r3]
   1dfce:	f7fe fa3d 	bl	1c44c <__adddf3>
   1dfd2:	4602      	mov	r2, r0
   1dfd4:	460b      	mov	r3, r1
   1dfd6:	4630      	mov	r0, r6
   1dfd8:	4639      	mov	r1, r7
   1dfda:	f04f 37ff 	mov.w	r7, #4294967295
   1dfde:	e9c4 2300 	strd	r2, r3, [r4]
   1dfe2:	f7fe fa31 	bl	1c448 <__aeabi_dsub>
   1dfe6:	a308      	add	r3, pc, #32	; (adr r3, 1e008 <__ieee754_rem_pio2+0x418>)
   1dfe8:	e9d3 2300 	ldrd	r2, r3, [r3]
   1dfec:	f7fe fa2e 	bl	1c44c <__adddf3>
   1dff0:	e9c4 0102 	strd	r0, r1, [r4, #8]
   1dff4:	e632      	b.n	1dc5c <__ieee754_rem_pio2+0x6c>
   1dff6:	bf00      	nop
   1dff8:	1a626331 	.word	0x1a626331
   1dffc:	3dd0b461 	.word	0x3dd0b461
   1e000:	1a600000 	.word	0x1a600000
   1e004:	3dd0b461 	.word	0x3dd0b461
   1e008:	2e037073 	.word	0x2e037073
   1e00c:	3ba3198a 	.word	0x3ba3198a
   1e010:	3ff921fb 	.word	0x3ff921fb
   1e014:	2e000000 	.word	0x2e000000
   1e018:	3ba3198a 	.word	0x3ba3198a
   1e01c:	252049c1 	.word	0x252049c1
   1e020:	397b839a 	.word	0x397b839a
   1e024:	00000000 	.word	0x00000000

0001e028 <__kernel_cos>:
   1e028:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1e02c:	ec57 6b10 	vmov	r6, r7, d0
   1e030:	f027 4900 	bic.w	r9, r7, #2147483648	; 0x80000000
   1e034:	f1b9 5f79 	cmp.w	r9, #1044381696	; 0x3e400000
   1e038:	ed2d 8b02 	vpush	{d8}
   1e03c:	eeb0 8a41 	vmov.f32	s16, s2
   1e040:	eef0 8a61 	vmov.f32	s17, s3
   1e044:	b083      	sub	sp, #12
   1e046:	da72      	bge.n	1e12e <__kernel_cos+0x106>
   1e048:	ee10 0a10 	vmov	r0, s0
   1e04c:	4639      	mov	r1, r7
   1e04e:	f7fe fe4d 	bl	1ccec <__aeabi_d2iz>
   1e052:	2800      	cmp	r0, #0
   1e054:	f000 80f6 	beq.w	1e244 <__kernel_cos+0x21c>
   1e058:	4632      	mov	r2, r6
   1e05a:	463b      	mov	r3, r7
   1e05c:	4630      	mov	r0, r6
   1e05e:	4639      	mov	r1, r7
   1e060:	f7fe fbaa 	bl	1c7b8 <__aeabi_dmul>
   1e064:	4604      	mov	r4, r0
   1e066:	460d      	mov	r5, r1
   1e068:	a37b      	add	r3, pc, #492	; (adr r3, 1e258 <__kernel_cos+0x230>)
   1e06a:	e9d3 2300 	ldrd	r2, r3, [r3]
   1e06e:	f7fe fba3 	bl	1c7b8 <__aeabi_dmul>
   1e072:	a37b      	add	r3, pc, #492	; (adr r3, 1e260 <__kernel_cos+0x238>)
   1e074:	e9d3 2300 	ldrd	r2, r3, [r3]
   1e078:	f7fe f9e8 	bl	1c44c <__adddf3>
   1e07c:	4622      	mov	r2, r4
   1e07e:	462b      	mov	r3, r5
   1e080:	f7fe fb9a 	bl	1c7b8 <__aeabi_dmul>
   1e084:	a378      	add	r3, pc, #480	; (adr r3, 1e268 <__kernel_cos+0x240>)
   1e086:	e9d3 2300 	ldrd	r2, r3, [r3]
   1e08a:	f7fe f9dd 	bl	1c448 <__aeabi_dsub>
   1e08e:	4622      	mov	r2, r4
   1e090:	462b      	mov	r3, r5
   1e092:	f7fe fb91 	bl	1c7b8 <__aeabi_dmul>
   1e096:	a376      	add	r3, pc, #472	; (adr r3, 1e270 <__kernel_cos+0x248>)
   1e098:	e9d3 2300 	ldrd	r2, r3, [r3]
   1e09c:	f7fe f9d6 	bl	1c44c <__adddf3>
   1e0a0:	4622      	mov	r2, r4
   1e0a2:	462b      	mov	r3, r5
   1e0a4:	f7fe fb88 	bl	1c7b8 <__aeabi_dmul>
   1e0a8:	a373      	add	r3, pc, #460	; (adr r3, 1e278 <__kernel_cos+0x250>)
   1e0aa:	e9d3 2300 	ldrd	r2, r3, [r3]
   1e0ae:	f7fe f9cb 	bl	1c448 <__aeabi_dsub>
   1e0b2:	4622      	mov	r2, r4
   1e0b4:	462b      	mov	r3, r5
   1e0b6:	f7fe fb7f 	bl	1c7b8 <__aeabi_dmul>
   1e0ba:	a371      	add	r3, pc, #452	; (adr r3, 1e280 <__kernel_cos+0x258>)
   1e0bc:	e9d3 2300 	ldrd	r2, r3, [r3]
   1e0c0:	f7fe f9c4 	bl	1c44c <__adddf3>
   1e0c4:	4622      	mov	r2, r4
   1e0c6:	462b      	mov	r3, r5
   1e0c8:	f7fe fb76 	bl	1c7b8 <__aeabi_dmul>
   1e0cc:	4682      	mov	sl, r0
   1e0ce:	468b      	mov	fp, r1
   1e0d0:	2200      	movs	r2, #0
   1e0d2:	4b71      	ldr	r3, [pc, #452]	; (1e298 <__kernel_cos+0x270>)
   1e0d4:	4620      	mov	r0, r4
   1e0d6:	4629      	mov	r1, r5
   1e0d8:	f7fe fb6e 	bl	1c7b8 <__aeabi_dmul>
   1e0dc:	4652      	mov	r2, sl
   1e0de:	4680      	mov	r8, r0
   1e0e0:	4689      	mov	r9, r1
   1e0e2:	465b      	mov	r3, fp
   1e0e4:	4620      	mov	r0, r4
   1e0e6:	4629      	mov	r1, r5
   1e0e8:	f7fe fb66 	bl	1c7b8 <__aeabi_dmul>
   1e0ec:	4604      	mov	r4, r0
   1e0ee:	460d      	mov	r5, r1
   1e0f0:	4630      	mov	r0, r6
   1e0f2:	4639      	mov	r1, r7
   1e0f4:	ec53 2b18 	vmov	r2, r3, d8
   1e0f8:	f7fe fb5e 	bl	1c7b8 <__aeabi_dmul>
   1e0fc:	4602      	mov	r2, r0
   1e0fe:	460b      	mov	r3, r1
   1e100:	4620      	mov	r0, r4
   1e102:	4629      	mov	r1, r5
   1e104:	f7fe f9a0 	bl	1c448 <__aeabi_dsub>
   1e108:	4602      	mov	r2, r0
   1e10a:	460b      	mov	r3, r1
   1e10c:	4640      	mov	r0, r8
   1e10e:	4649      	mov	r1, r9
   1e110:	f7fe f99a 	bl	1c448 <__aeabi_dsub>
   1e114:	4602      	mov	r2, r0
   1e116:	460b      	mov	r3, r1
   1e118:	2000      	movs	r0, #0
   1e11a:	4960      	ldr	r1, [pc, #384]	; (1e29c <__kernel_cos+0x274>)
   1e11c:	f7fe f994 	bl	1c448 <__aeabi_dsub>
   1e120:	ec41 0b10 	vmov	d0, r0, r1
   1e124:	b003      	add	sp, #12
   1e126:	ecbd 8b02 	vpop	{d8}
   1e12a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1e12e:	ee10 2a10 	vmov	r2, s0
   1e132:	ee10 0a10 	vmov	r0, s0
   1e136:	463b      	mov	r3, r7
   1e138:	4639      	mov	r1, r7
   1e13a:	f7fe fb3d 	bl	1c7b8 <__aeabi_dmul>
   1e13e:	4604      	mov	r4, r0
   1e140:	460d      	mov	r5, r1
   1e142:	a345      	add	r3, pc, #276	; (adr r3, 1e258 <__kernel_cos+0x230>)
   1e144:	e9d3 2300 	ldrd	r2, r3, [r3]
   1e148:	f7fe fb36 	bl	1c7b8 <__aeabi_dmul>
   1e14c:	a344      	add	r3, pc, #272	; (adr r3, 1e260 <__kernel_cos+0x238>)
   1e14e:	e9d3 2300 	ldrd	r2, r3, [r3]
   1e152:	f7fe f97b 	bl	1c44c <__adddf3>
   1e156:	4622      	mov	r2, r4
   1e158:	462b      	mov	r3, r5
   1e15a:	f7fe fb2d 	bl	1c7b8 <__aeabi_dmul>
   1e15e:	a342      	add	r3, pc, #264	; (adr r3, 1e268 <__kernel_cos+0x240>)
   1e160:	e9d3 2300 	ldrd	r2, r3, [r3]
   1e164:	f7fe f970 	bl	1c448 <__aeabi_dsub>
   1e168:	4622      	mov	r2, r4
   1e16a:	462b      	mov	r3, r5
   1e16c:	f7fe fb24 	bl	1c7b8 <__aeabi_dmul>
   1e170:	a33f      	add	r3, pc, #252	; (adr r3, 1e270 <__kernel_cos+0x248>)
   1e172:	e9d3 2300 	ldrd	r2, r3, [r3]
   1e176:	f7fe f969 	bl	1c44c <__adddf3>
   1e17a:	4622      	mov	r2, r4
   1e17c:	462b      	mov	r3, r5
   1e17e:	f7fe fb1b 	bl	1c7b8 <__aeabi_dmul>
   1e182:	a33d      	add	r3, pc, #244	; (adr r3, 1e278 <__kernel_cos+0x250>)
   1e184:	e9d3 2300 	ldrd	r2, r3, [r3]
   1e188:	f7fe f95e 	bl	1c448 <__aeabi_dsub>
   1e18c:	4622      	mov	r2, r4
   1e18e:	462b      	mov	r3, r5
   1e190:	f7fe fb12 	bl	1c7b8 <__aeabi_dmul>
   1e194:	a33a      	add	r3, pc, #232	; (adr r3, 1e280 <__kernel_cos+0x258>)
   1e196:	e9d3 2300 	ldrd	r2, r3, [r3]
   1e19a:	f7fe f957 	bl	1c44c <__adddf3>
   1e19e:	462b      	mov	r3, r5
   1e1a0:	4622      	mov	r2, r4
   1e1a2:	f7fe fb09 	bl	1c7b8 <__aeabi_dmul>
   1e1a6:	4b3e      	ldr	r3, [pc, #248]	; (1e2a0 <__kernel_cos+0x278>)
   1e1a8:	4682      	mov	sl, r0
   1e1aa:	468b      	mov	fp, r1
   1e1ac:	4599      	cmp	r9, r3
   1e1ae:	dd8f      	ble.n	1e0d0 <__kernel_cos+0xa8>
   1e1b0:	4b3c      	ldr	r3, [pc, #240]	; (1e2a4 <__kernel_cos+0x27c>)
   1e1b2:	4599      	cmp	r9, r3
   1e1b4:	dc3d      	bgt.n	1e232 <__kernel_cos+0x20a>
   1e1b6:	2200      	movs	r2, #0
   1e1b8:	f5a9 1300 	sub.w	r3, r9, #2097152	; 0x200000
   1e1bc:	2000      	movs	r0, #0
   1e1be:	4937      	ldr	r1, [pc, #220]	; (1e29c <__kernel_cos+0x274>)
   1e1c0:	4690      	mov	r8, r2
   1e1c2:	4699      	mov	r9, r3
   1e1c4:	f7fe f940 	bl	1c448 <__aeabi_dsub>
   1e1c8:	e9cd 0100 	strd	r0, r1, [sp]
   1e1cc:	2200      	movs	r2, #0
   1e1ce:	4b32      	ldr	r3, [pc, #200]	; (1e298 <__kernel_cos+0x270>)
   1e1d0:	4620      	mov	r0, r4
   1e1d2:	4629      	mov	r1, r5
   1e1d4:	f7fe faf0 	bl	1c7b8 <__aeabi_dmul>
   1e1d8:	4642      	mov	r2, r8
   1e1da:	464b      	mov	r3, r9
   1e1dc:	f7fe f934 	bl	1c448 <__aeabi_dsub>
   1e1e0:	4652      	mov	r2, sl
   1e1e2:	4680      	mov	r8, r0
   1e1e4:	4689      	mov	r9, r1
   1e1e6:	465b      	mov	r3, fp
   1e1e8:	4620      	mov	r0, r4
   1e1ea:	4629      	mov	r1, r5
   1e1ec:	f7fe fae4 	bl	1c7b8 <__aeabi_dmul>
   1e1f0:	4604      	mov	r4, r0
   1e1f2:	460d      	mov	r5, r1
   1e1f4:	4630      	mov	r0, r6
   1e1f6:	4639      	mov	r1, r7
   1e1f8:	ec53 2b18 	vmov	r2, r3, d8
   1e1fc:	f7fe fadc 	bl	1c7b8 <__aeabi_dmul>
   1e200:	4602      	mov	r2, r0
   1e202:	460b      	mov	r3, r1
   1e204:	4620      	mov	r0, r4
   1e206:	4629      	mov	r1, r5
   1e208:	f7fe f91e 	bl	1c448 <__aeabi_dsub>
   1e20c:	4602      	mov	r2, r0
   1e20e:	460b      	mov	r3, r1
   1e210:	4640      	mov	r0, r8
   1e212:	4649      	mov	r1, r9
   1e214:	f7fe f918 	bl	1c448 <__aeabi_dsub>
   1e218:	4602      	mov	r2, r0
   1e21a:	460b      	mov	r3, r1
   1e21c:	e9dd 0100 	ldrd	r0, r1, [sp]
   1e220:	f7fe f912 	bl	1c448 <__aeabi_dsub>
   1e224:	ec41 0b10 	vmov	d0, r0, r1
   1e228:	b003      	add	sp, #12
   1e22a:	ecbd 8b02 	vpop	{d8}
   1e22e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1e232:	ed9f 7b15 	vldr	d7, [pc, #84]	; 1e288 <__kernel_cos+0x260>
   1e236:	f04f 0800 	mov.w	r8, #0
   1e23a:	f8df 906c 	ldr.w	r9, [pc, #108]	; 1e2a8 <__kernel_cos+0x280>
   1e23e:	ed8d 7b00 	vstr	d7, [sp]
   1e242:	e7c3      	b.n	1e1cc <__kernel_cos+0x1a4>
   1e244:	ed9f 0b12 	vldr	d0, [pc, #72]	; 1e290 <__kernel_cos+0x268>
   1e248:	b003      	add	sp, #12
   1e24a:	ecbd 8b02 	vpop	{d8}
   1e24e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1e252:	bf00      	nop
   1e254:	f3af 8000 	nop.w
   1e258:	be8838d4 	.word	0xbe8838d4
   1e25c:	bda8fae9 	.word	0xbda8fae9
   1e260:	bdb4b1c4 	.word	0xbdb4b1c4
   1e264:	3e21ee9e 	.word	0x3e21ee9e
   1e268:	809c52ad 	.word	0x809c52ad
   1e26c:	3e927e4f 	.word	0x3e927e4f
   1e270:	19cb1590 	.word	0x19cb1590
   1e274:	3efa01a0 	.word	0x3efa01a0
   1e278:	16c15177 	.word	0x16c15177
   1e27c:	3f56c16c 	.word	0x3f56c16c
   1e280:	5555554c 	.word	0x5555554c
   1e284:	3fa55555 	.word	0x3fa55555
   1e288:	00000000 	.word	0x00000000
   1e28c:	3fe70000 	.word	0x3fe70000
   1e290:	00000000 	.word	0x00000000
   1e294:	3ff00000 	.word	0x3ff00000
   1e298:	3fe00000 	.word	0x3fe00000
   1e29c:	3ff00000 	.word	0x3ff00000
   1e2a0:	3fd33332 	.word	0x3fd33332
   1e2a4:	3fe90000 	.word	0x3fe90000
   1e2a8:	3fd20000 	.word	0x3fd20000
   1e2ac:	00000000 	.word	0x00000000

0001e2b0 <__kernel_rem_pio2>:
   1e2b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1e2b4:	461c      	mov	r4, r3
   1e2b6:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
   1e2ba:	f112 0f14 	cmn.w	r2, #20
   1e2be:	910b      	str	r1, [sp, #44]	; 0x2c
   1e2c0:	f104 31ff 	add.w	r1, r4, #4294967295
   1e2c4:	9308      	str	r3, [sp, #32]
   1e2c6:	9103      	str	r1, [sp, #12]
   1e2c8:	4bb1      	ldr	r3, [pc, #708]	; (1e590 <__kernel_rem_pio2+0x2e0>)
   1e2ca:	99a2      	ldr	r1, [sp, #648]	; 0x288
   1e2cc:	9004      	str	r0, [sp, #16]
   1e2ce:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
   1e2d2:	9305      	str	r3, [sp, #20]
   1e2d4:	f2c0 82c1 	blt.w	1e85a <__kernel_rem_pio2+0x5aa>
   1e2d8:	1ed3      	subs	r3, r2, #3
   1e2da:	49ae      	ldr	r1, [pc, #696]	; (1e594 <__kernel_rem_pio2+0x2e4>)
   1e2dc:	fb81 0103 	smull	r0, r1, r1, r3
   1e2e0:	17db      	asrs	r3, r3, #31
   1e2e2:	ebc3 03a1 	rsb	r3, r3, r1, asr #2
   1e2e6:	9307      	str	r3, [sp, #28]
   1e2e8:	3301      	adds	r3, #1
   1e2ea:	eba3 0383 	sub.w	r3, r3, r3, lsl #2
   1e2ee:	00db      	lsls	r3, r3, #3
   1e2f0:	18d3      	adds	r3, r2, r3
   1e2f2:	9a07      	ldr	r2, [sp, #28]
   1e2f4:	9306      	str	r3, [sp, #24]
   1e2f6:	9b03      	ldr	r3, [sp, #12]
   1e2f8:	1ad6      	subs	r6, r2, r3
   1e2fa:	9a05      	ldr	r2, [sp, #20]
   1e2fc:	eb12 0803 	adds.w	r8, r2, r3
   1e300:	d414      	bmi.n	1e32c <__kernel_rem_pio2+0x7c>
   1e302:	f108 0801 	add.w	r8, r8, #1
   1e306:	af20      	add	r7, sp, #128	; 0x80
   1e308:	2400      	movs	r4, #0
   1e30a:	2500      	movs	r5, #0
   1e30c:	44b0      	add	r8, r6
   1e30e:	f8dd 928c 	ldr.w	r9, [sp, #652]	; 0x28c
   1e312:	2e00      	cmp	r6, #0
   1e314:	4620      	mov	r0, r4
   1e316:	4629      	mov	r1, r5
   1e318:	db03      	blt.n	1e322 <__kernel_rem_pio2+0x72>
   1e31a:	f859 0026 	ldr.w	r0, [r9, r6, lsl #2]
   1e31e:	f7fe f9e1 	bl	1c6e4 <__aeabi_i2d>
   1e322:	3601      	adds	r6, #1
   1e324:	4546      	cmp	r6, r8
   1e326:	e8e7 0102 	strd	r0, r1, [r7], #8
   1e32a:	d1f2      	bne.n	1e312 <__kernel_rem_pio2+0x62>
   1e32c:	9b05      	ldr	r3, [sp, #20]
   1e32e:	2b00      	cmp	r3, #0
   1e330:	9b08      	ldr	r3, [sp, #32]
   1e332:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   1e336:	9301      	str	r3, [sp, #4]
   1e338:	db29      	blt.n	1e38e <__kernel_rem_pio2+0xde>
   1e33a:	9a04      	ldr	r2, [sp, #16]
   1e33c:	a920      	add	r1, sp, #128	; 0x80
   1e33e:	f50d 7ae0 	add.w	sl, sp, #448	; 0x1c0
   1e342:	eb02 0803 	add.w	r8, r2, r3
   1e346:	eb01 0903 	add.w	r9, r1, r3
   1e34a:	aa72      	add	r2, sp, #456	; 0x1c8
   1e34c:	9b05      	ldr	r3, [sp, #20]
   1e34e:	eb02 0bc3 	add.w	fp, r2, r3, lsl #3
   1e352:	9b03      	ldr	r3, [sp, #12]
   1e354:	2b00      	cmp	r3, #0
   1e356:	f2c0 819e 	blt.w	1e696 <__kernel_rem_pio2+0x3e6>
   1e35a:	464d      	mov	r5, r9
   1e35c:	9c04      	ldr	r4, [sp, #16]
   1e35e:	2600      	movs	r6, #0
   1e360:	2700      	movs	r7, #0
   1e362:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
   1e366:	e8f4 0102 	ldrd	r0, r1, [r4], #8
   1e36a:	f7fe fa25 	bl	1c7b8 <__aeabi_dmul>
   1e36e:	4602      	mov	r2, r0
   1e370:	460b      	mov	r3, r1
   1e372:	4630      	mov	r0, r6
   1e374:	4639      	mov	r1, r7
   1e376:	f7fe f869 	bl	1c44c <__adddf3>
   1e37a:	4544      	cmp	r4, r8
   1e37c:	4606      	mov	r6, r0
   1e37e:	460f      	mov	r7, r1
   1e380:	d1ef      	bne.n	1e362 <__kernel_rem_pio2+0xb2>
   1e382:	f109 0908 	add.w	r9, r9, #8
   1e386:	e8ea 6702 	strd	r6, r7, [sl], #8
   1e38a:	45da      	cmp	sl, fp
   1e38c:	d1e1      	bne.n	1e352 <__kernel_rem_pio2+0xa2>
   1e38e:	9905      	ldr	r1, [sp, #20]
   1e390:	9a01      	ldr	r2, [sp, #4]
   1e392:	9804      	ldr	r0, [sp, #16]
   1e394:	008b      	lsls	r3, r1, #2
   1e396:	9101      	str	r1, [sp, #4]
   1e398:	4402      	add	r2, r0
   1e39a:	a80b      	add	r0, sp, #44	; 0x2c
   1e39c:	4693      	mov	fp, r2
   1e39e:	f1a3 0208 	sub.w	r2, r3, #8
   1e3a2:	18c3      	adds	r3, r0, r3
   1e3a4:	930a      	str	r3, [sp, #40]	; 0x28
   1e3a6:	ab0c      	add	r3, sp, #48	; 0x30
   1e3a8:	4413      	add	r3, r2
   1e3aa:	9309      	str	r3, [sp, #36]	; 0x24
   1e3ac:	9a01      	ldr	r2, [sp, #4]
   1e3ae:	a998      	add	r1, sp, #608	; 0x260
   1e3b0:	2a00      	cmp	r2, #0
   1e3b2:	eb01 03c2 	add.w	r3, r1, r2, lsl #3
   1e3b6:	e953 4528 	ldrd	r4, r5, [r3, #-160]	; 0xa0
   1e3ba:	dd29      	ble.n	1e410 <__kernel_rem_pio2+0x160>
   1e3bc:	f50d 7ae0 	add.w	sl, sp, #448	; 0x1c0
   1e3c0:	f10d 0930 	add.w	r9, sp, #48	; 0x30
   1e3c4:	eb0a 08c2 	add.w	r8, sl, r2, lsl #3
   1e3c8:	2200      	movs	r2, #0
   1e3ca:	4b73      	ldr	r3, [pc, #460]	; (1e598 <__kernel_rem_pio2+0x2e8>)
   1e3cc:	4620      	mov	r0, r4
   1e3ce:	4629      	mov	r1, r5
   1e3d0:	f7fe f9f2 	bl	1c7b8 <__aeabi_dmul>
   1e3d4:	f7fe fc8a 	bl	1ccec <__aeabi_d2iz>
   1e3d8:	f7fe f984 	bl	1c6e4 <__aeabi_i2d>
   1e3dc:	2200      	movs	r2, #0
   1e3de:	4b6f      	ldr	r3, [pc, #444]	; (1e59c <__kernel_rem_pio2+0x2ec>)
   1e3e0:	4606      	mov	r6, r0
   1e3e2:	460f      	mov	r7, r1
   1e3e4:	f7fe f9e8 	bl	1c7b8 <__aeabi_dmul>
   1e3e8:	4602      	mov	r2, r0
   1e3ea:	460b      	mov	r3, r1
   1e3ec:	4620      	mov	r0, r4
   1e3ee:	4629      	mov	r1, r5
   1e3f0:	f7fe f82a 	bl	1c448 <__aeabi_dsub>
   1e3f4:	f7fe fc7a 	bl	1ccec <__aeabi_d2iz>
   1e3f8:	4639      	mov	r1, r7
   1e3fa:	f849 0b04 	str.w	r0, [r9], #4
   1e3fe:	4630      	mov	r0, r6
   1e400:	e978 2302 	ldrd	r2, r3, [r8, #-8]!
   1e404:	f7fe f822 	bl	1c44c <__adddf3>
   1e408:	4604      	mov	r4, r0
   1e40a:	45d0      	cmp	r8, sl
   1e40c:	460d      	mov	r5, r1
   1e40e:	d1db      	bne.n	1e3c8 <__kernel_rem_pio2+0x118>
   1e410:	f8dd 9018 	ldr.w	r9, [sp, #24]
   1e414:	ec45 4b10 	vmov	d0, r4, r5
   1e418:	4648      	mov	r0, r9
   1e41a:	f000 fcad 	bl	1ed78 <scalbn>
   1e41e:	2200      	movs	r2, #0
   1e420:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
   1e424:	ee10 0a10 	vmov	r0, s0
   1e428:	ec55 4b10 	vmov	r4, r5, d0
   1e42c:	4629      	mov	r1, r5
   1e42e:	f7fe f9c3 	bl	1c7b8 <__aeabi_dmul>
   1e432:	ec41 0b10 	vmov	d0, r0, r1
   1e436:	f000 fc1b 	bl	1ec70 <floor>
   1e43a:	2200      	movs	r2, #0
   1e43c:	4b58      	ldr	r3, [pc, #352]	; (1e5a0 <__kernel_rem_pio2+0x2f0>)
   1e43e:	ec51 0b10 	vmov	r0, r1, d0
   1e442:	f7fe f9b9 	bl	1c7b8 <__aeabi_dmul>
   1e446:	4602      	mov	r2, r0
   1e448:	460b      	mov	r3, r1
   1e44a:	4620      	mov	r0, r4
   1e44c:	4629      	mov	r1, r5
   1e44e:	f7fd fffb 	bl	1c448 <__aeabi_dsub>
   1e452:	460d      	mov	r5, r1
   1e454:	4604      	mov	r4, r0
   1e456:	f7fe fc49 	bl	1ccec <__aeabi_d2iz>
   1e45a:	4680      	mov	r8, r0
   1e45c:	f7fe f942 	bl	1c6e4 <__aeabi_i2d>
   1e460:	460b      	mov	r3, r1
   1e462:	4602      	mov	r2, r0
   1e464:	4629      	mov	r1, r5
   1e466:	4620      	mov	r0, r4
   1e468:	f7fd ffee 	bl	1c448 <__aeabi_dsub>
   1e46c:	464b      	mov	r3, r9
   1e46e:	4606      	mov	r6, r0
   1e470:	460f      	mov	r7, r1
   1e472:	2b00      	cmp	r3, #0
   1e474:	f340 8096 	ble.w	1e5a4 <__kernel_rem_pio2+0x2f4>
   1e478:	9a01      	ldr	r2, [sp, #4]
   1e47a:	a90c      	add	r1, sp, #48	; 0x30
   1e47c:	f1c9 0318 	rsb	r3, r9, #24
   1e480:	f1c9 0517 	rsb	r5, r9, #23
   1e484:	3a01      	subs	r2, #1
   1e486:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
   1e48a:	fa41 f003 	asr.w	r0, r1, r3
   1e48e:	fa00 f303 	lsl.w	r3, r0, r3
   1e492:	4480      	add	r8, r0
   1e494:	1acb      	subs	r3, r1, r3
   1e496:	a90c      	add	r1, sp, #48	; 0x30
   1e498:	fa43 f505 	asr.w	r5, r3, r5
   1e49c:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
   1e4a0:	2d00      	cmp	r5, #0
   1e4a2:	f300 8089 	bgt.w	1e5b8 <__kernel_rem_pio2+0x308>
   1e4a6:	2200      	movs	r2, #0
   1e4a8:	2300      	movs	r3, #0
   1e4aa:	4630      	mov	r0, r6
   1e4ac:	4639      	mov	r1, r7
   1e4ae:	f7fe fbeb 	bl	1cc88 <__aeabi_dcmpeq>
   1e4b2:	2800      	cmp	r0, #0
   1e4b4:	f000 8297 	beq.w	1e9e6 <__kernel_rem_pio2+0x736>
   1e4b8:	9901      	ldr	r1, [sp, #4]
   1e4ba:	9b05      	ldr	r3, [sp, #20]
   1e4bc:	f101 39ff 	add.w	r9, r1, #4294967295
   1e4c0:	454b      	cmp	r3, r9
   1e4c2:	dc10      	bgt.n	1e4e6 <__kernel_rem_pio2+0x236>
   1e4c4:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
   1e4c8:	2200      	movs	r2, #0
   1e4ca:	980a      	ldr	r0, [sp, #40]	; 0x28
   1e4cc:	440b      	add	r3, r1
   1e4ce:	a90c      	add	r1, sp, #48	; 0x30
   1e4d0:	eb01 0383 	add.w	r3, r1, r3, lsl #2
   1e4d4:	f853 1904 	ldr.w	r1, [r3], #-4
   1e4d8:	4283      	cmp	r3, r0
   1e4da:	ea42 0201 	orr.w	r2, r2, r1
   1e4de:	d1f9      	bne.n	1e4d4 <__kernel_rem_pio2+0x224>
   1e4e0:	2a00      	cmp	r2, #0
   1e4e2:	f040 80e2 	bne.w	1e6aa <__kernel_rem_pio2+0x3fa>
   1e4e6:	9b05      	ldr	r3, [sp, #20]
   1e4e8:	aa0c      	add	r2, sp, #48	; 0x30
   1e4ea:	3b01      	subs	r3, #1
   1e4ec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1e4f0:	2b00      	cmp	r3, #0
   1e4f2:	f040 80cb 	bne.w	1e68c <__kernel_rem_pio2+0x3dc>
   1e4f6:	9a09      	ldr	r2, [sp, #36]	; 0x24
   1e4f8:	2301      	movs	r3, #1
   1e4fa:	f852 1904 	ldr.w	r1, [r2], #-4
   1e4fe:	3301      	adds	r3, #1
   1e500:	2900      	cmp	r1, #0
   1e502:	d0fa      	beq.n	1e4fa <__kernel_rem_pio2+0x24a>
   1e504:	9901      	ldr	r1, [sp, #4]
   1e506:	1c4a      	adds	r2, r1, #1
   1e508:	18cb      	adds	r3, r1, r3
   1e50a:	4691      	mov	r9, r2
   1e50c:	9302      	str	r3, [sp, #8]
   1e50e:	9b07      	ldr	r3, [sp, #28]
   1e510:	f06f 4a40 	mvn.w	sl, #3221225472	; 0xc0000000
   1e514:	9901      	ldr	r1, [sp, #4]
   1e516:	18d3      	adds	r3, r2, r3
   1e518:	9808      	ldr	r0, [sp, #32]
   1e51a:	449a      	add	sl, r3
   1e51c:	4401      	add	r1, r0
   1e51e:	ab20      	add	r3, sp, #128	; 0x80
   1e520:	eb03 05c1 	add.w	r5, r3, r1, lsl #3
   1e524:	9ba3      	ldr	r3, [sp, #652]	; 0x28c
   1e526:	eb03 0a8a 	add.w	sl, r3, sl, lsl #2
   1e52a:	ab70      	add	r3, sp, #448	; 0x1c0
   1e52c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   1e530:	9301      	str	r3, [sp, #4]
   1e532:	f85a 0f04 	ldr.w	r0, [sl, #4]!
   1e536:	46a8      	mov	r8, r5
   1e538:	f7fe f8d4 	bl	1c6e4 <__aeabi_i2d>
   1e53c:	460b      	mov	r3, r1
   1e53e:	9903      	ldr	r1, [sp, #12]
   1e540:	4602      	mov	r2, r0
   1e542:	2900      	cmp	r1, #0
   1e544:	e8e8 2302 	strd	r2, r3, [r8], #8
   1e548:	db1f      	blt.n	1e58a <__kernel_rem_pio2+0x2da>
   1e54a:	9c04      	ldr	r4, [sp, #16]
   1e54c:	2600      	movs	r6, #0
   1e54e:	2700      	movs	r7, #0
   1e550:	e001      	b.n	1e556 <__kernel_rem_pio2+0x2a6>
   1e552:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
   1e556:	e8f4 0102 	ldrd	r0, r1, [r4], #8
   1e55a:	f7fe f92d 	bl	1c7b8 <__aeabi_dmul>
   1e55e:	4602      	mov	r2, r0
   1e560:	460b      	mov	r3, r1
   1e562:	4630      	mov	r0, r6
   1e564:	4639      	mov	r1, r7
   1e566:	f7fd ff71 	bl	1c44c <__adddf3>
   1e56a:	455c      	cmp	r4, fp
   1e56c:	4606      	mov	r6, r0
   1e56e:	460f      	mov	r7, r1
   1e570:	d1ef      	bne.n	1e552 <__kernel_rem_pio2+0x2a2>
   1e572:	9b01      	ldr	r3, [sp, #4]
   1e574:	f109 0901 	add.w	r9, r9, #1
   1e578:	4645      	mov	r5, r8
   1e57a:	e8e3 6702 	strd	r6, r7, [r3], #8
   1e57e:	9301      	str	r3, [sp, #4]
   1e580:	9b02      	ldr	r3, [sp, #8]
   1e582:	4599      	cmp	r9, r3
   1e584:	ddd5      	ble.n	1e532 <__kernel_rem_pio2+0x282>
   1e586:	9301      	str	r3, [sp, #4]
   1e588:	e710      	b.n	1e3ac <__kernel_rem_pio2+0xfc>
   1e58a:	2600      	movs	r6, #0
   1e58c:	2700      	movs	r7, #0
   1e58e:	e7f0      	b.n	1e572 <__kernel_rem_pio2+0x2c2>
   1e590:	0004746c 	.word	0x0004746c
   1e594:	2aaaaaab 	.word	0x2aaaaaab
   1e598:	3e700000 	.word	0x3e700000
   1e59c:	41700000 	.word	0x41700000
   1e5a0:	40200000 	.word	0x40200000
   1e5a4:	d169      	bne.n	1e67a <__kernel_rem_pio2+0x3ca>
   1e5a6:	9b01      	ldr	r3, [sp, #4]
   1e5a8:	aa0c      	add	r2, sp, #48	; 0x30
   1e5aa:	3b01      	subs	r3, #1
   1e5ac:	f852 5023 	ldr.w	r5, [r2, r3, lsl #2]
   1e5b0:	15ed      	asrs	r5, r5, #23
   1e5b2:	2d00      	cmp	r5, #0
   1e5b4:	f77f af77 	ble.w	1e4a6 <__kernel_rem_pio2+0x1f6>
   1e5b8:	9b01      	ldr	r3, [sp, #4]
   1e5ba:	f108 0801 	add.w	r8, r8, #1
   1e5be:	2b00      	cmp	r3, #0
   1e5c0:	f340 820f 	ble.w	1e9e2 <__kernel_rem_pio2+0x732>
   1e5c4:	9c0c      	ldr	r4, [sp, #48]	; 0x30
   1e5c6:	2c00      	cmp	r4, #0
   1e5c8:	d13a      	bne.n	1e640 <__kernel_rem_pio2+0x390>
   1e5ca:	9b01      	ldr	r3, [sp, #4]
   1e5cc:	2b01      	cmp	r3, #1
   1e5ce:	d009      	beq.n	1e5e4 <__kernel_rem_pio2+0x334>
   1e5d0:	a90c      	add	r1, sp, #48	; 0x30
   1e5d2:	2201      	movs	r2, #1
   1e5d4:	f851 4f04 	ldr.w	r4, [r1, #4]!
   1e5d8:	1c53      	adds	r3, r2, #1
   1e5da:	bb9c      	cbnz	r4, 1e644 <__kernel_rem_pio2+0x394>
   1e5dc:	461a      	mov	r2, r3
   1e5de:	9b01      	ldr	r3, [sp, #4]
   1e5e0:	4293      	cmp	r3, r2
   1e5e2:	d1f7      	bne.n	1e5d4 <__kernel_rem_pio2+0x324>
   1e5e4:	9b06      	ldr	r3, [sp, #24]
   1e5e6:	2b00      	cmp	r3, #0
   1e5e8:	dd0e      	ble.n	1e608 <__kernel_rem_pio2+0x358>
   1e5ea:	2b01      	cmp	r3, #1
   1e5ec:	f000 811a 	beq.w	1e824 <__kernel_rem_pio2+0x574>
   1e5f0:	2b02      	cmp	r3, #2
   1e5f2:	d109      	bne.n	1e608 <__kernel_rem_pio2+0x358>
   1e5f4:	9b01      	ldr	r3, [sp, #4]
   1e5f6:	a90c      	add	r1, sp, #48	; 0x30
   1e5f8:	1e5a      	subs	r2, r3, #1
   1e5fa:	ab0c      	add	r3, sp, #48	; 0x30
   1e5fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   1e600:	f3c3 0315 	ubfx	r3, r3, #0, #22
   1e604:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
   1e608:	2d02      	cmp	r5, #2
   1e60a:	f47f af4c 	bne.w	1e4a6 <__kernel_rem_pio2+0x1f6>
   1e60e:	4632      	mov	r2, r6
   1e610:	463b      	mov	r3, r7
   1e612:	2000      	movs	r0, #0
   1e614:	4998      	ldr	r1, [pc, #608]	; (1e878 <__kernel_rem_pio2+0x5c8>)
   1e616:	f7fd ff17 	bl	1c448 <__aeabi_dsub>
   1e61a:	4606      	mov	r6, r0
   1e61c:	460f      	mov	r7, r1
   1e61e:	2c00      	cmp	r4, #0
   1e620:	f43f af41 	beq.w	1e4a6 <__kernel_rem_pio2+0x1f6>
   1e624:	9806      	ldr	r0, [sp, #24]
   1e626:	ed9f 0b90 	vldr	d0, [pc, #576]	; 1e868 <__kernel_rem_pio2+0x5b8>
   1e62a:	f000 fba5 	bl	1ed78 <scalbn>
   1e62e:	4630      	mov	r0, r6
   1e630:	4639      	mov	r1, r7
   1e632:	ec53 2b10 	vmov	r2, r3, d0
   1e636:	f7fd ff07 	bl	1c448 <__aeabi_dsub>
   1e63a:	4606      	mov	r6, r0
   1e63c:	460f      	mov	r7, r1
   1e63e:	e732      	b.n	1e4a6 <__kernel_rem_pio2+0x1f6>
   1e640:	2301      	movs	r3, #1
   1e642:	2200      	movs	r2, #0
   1e644:	a90c      	add	r1, sp, #48	; 0x30
   1e646:	f1c4 7480 	rsb	r4, r4, #16777216	; 0x1000000
   1e64a:	f841 4022 	str.w	r4, [r1, r2, lsl #2]
   1e64e:	9901      	ldr	r1, [sp, #4]
   1e650:	4299      	cmp	r1, r3
   1e652:	dd10      	ble.n	1e676 <__kernel_rem_pio2+0x3c6>
   1e654:	a80c      	add	r0, sp, #48	; 0x30
   1e656:	aa0c      	add	r2, sp, #48	; 0x30
   1e658:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
   1e65c:	eb00 0383 	add.w	r3, r0, r3, lsl #2
   1e660:	eb00 0081 	add.w	r0, r0, r1, lsl #2
   1e664:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
   1e668:	e000      	b.n	1e66c <__kernel_rem_pio2+0x3bc>
   1e66a:	681a      	ldr	r2, [r3, #0]
   1e66c:	1a8a      	subs	r2, r1, r2
   1e66e:	f843 2b04 	str.w	r2, [r3], #4
   1e672:	4283      	cmp	r3, r0
   1e674:	d1f9      	bne.n	1e66a <__kernel_rem_pio2+0x3ba>
   1e676:	2401      	movs	r4, #1
   1e678:	e7b4      	b.n	1e5e4 <__kernel_rem_pio2+0x334>
   1e67a:	2200      	movs	r2, #0
   1e67c:	4b7f      	ldr	r3, [pc, #508]	; (1e87c <__kernel_rem_pio2+0x5cc>)
   1e67e:	f7fe fb21 	bl	1ccc4 <__aeabi_dcmpge>
   1e682:	2800      	cmp	r0, #0
   1e684:	f040 80d9 	bne.w	1e83a <__kernel_rem_pio2+0x58a>
   1e688:	4605      	mov	r5, r0
   1e68a:	e70c      	b.n	1e4a6 <__kernel_rem_pio2+0x1f6>
   1e68c:	9b01      	ldr	r3, [sp, #4]
   1e68e:	1c5a      	adds	r2, r3, #1
   1e690:	4691      	mov	r9, r2
   1e692:	9202      	str	r2, [sp, #8]
   1e694:	e73b      	b.n	1e50e <__kernel_rem_pio2+0x25e>
   1e696:	2600      	movs	r6, #0
   1e698:	2700      	movs	r7, #0
   1e69a:	f109 0908 	add.w	r9, r9, #8
   1e69e:	e8ea 6702 	strd	r6, r7, [sl], #8
   1e6a2:	45da      	cmp	sl, fp
   1e6a4:	f47f ae55 	bne.w	1e352 <__kernel_rem_pio2+0xa2>
   1e6a8:	e671      	b.n	1e38e <__kernel_rem_pio2+0xde>
   1e6aa:	9a06      	ldr	r2, [sp, #24]
   1e6ac:	ab0c      	add	r3, sp, #48	; 0x30
   1e6ae:	f8cd 801c 	str.w	r8, [sp, #28]
   1e6b2:	3a18      	subs	r2, #24
   1e6b4:	f853 3029 	ldr.w	r3, [r3, r9, lsl #2]
   1e6b8:	9504      	str	r5, [sp, #16]
   1e6ba:	9206      	str	r2, [sp, #24]
   1e6bc:	b973      	cbnz	r3, 1e6dc <__kernel_rem_pio2+0x42c>
   1e6be:	4b70      	ldr	r3, [pc, #448]	; (1e880 <__kernel_rem_pio2+0x5d0>)
   1e6c0:	9901      	ldr	r1, [sp, #4]
   1e6c2:	4419      	add	r1, r3
   1e6c4:	460b      	mov	r3, r1
   1e6c6:	a90c      	add	r1, sp, #48	; 0x30
   1e6c8:	eb01 0383 	add.w	r3, r1, r3, lsl #2
   1e6cc:	f853 1904 	ldr.w	r1, [r3], #-4
   1e6d0:	f109 39ff 	add.w	r9, r9, #4294967295
   1e6d4:	3a18      	subs	r2, #24
   1e6d6:	2900      	cmp	r1, #0
   1e6d8:	d0f8      	beq.n	1e6cc <__kernel_rem_pio2+0x41c>
   1e6da:	9206      	str	r2, [sp, #24]
   1e6dc:	9806      	ldr	r0, [sp, #24]
   1e6de:	ed9f 0b62 	vldr	d0, [pc, #392]	; 1e868 <__kernel_rem_pio2+0x5b8>
   1e6e2:	f000 fb49 	bl	1ed78 <scalbn>
   1e6e6:	f1b9 0f00 	cmp.w	r9, #0
   1e6ea:	ec55 4b10 	vmov	r4, r5, d0
   1e6ee:	f2c0 81da 	blt.w	1eaa6 <__kernel_rem_pio2+0x7f6>
   1e6f2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
   1e6f6:	aa70      	add	r2, sp, #448	; 0x1c0
   1e6f8:	f109 0601 	add.w	r6, r9, #1
   1e6fc:	f04f 0a00 	mov.w	sl, #0
   1e700:	eb02 0803 	add.w	r8, r2, r3
   1e704:	9306      	str	r3, [sp, #24]
   1e706:	ab0c      	add	r3, sp, #48	; 0x30
   1e708:	f8df b178 	ldr.w	fp, [pc, #376]	; 1e884 <__kernel_rem_pio2+0x5d4>
   1e70c:	f108 0708 	add.w	r7, r8, #8
   1e710:	eb03 0686 	add.w	r6, r3, r6, lsl #2
   1e714:	f856 0d04 	ldr.w	r0, [r6, #-4]!
   1e718:	f7fd ffe4 	bl	1c6e4 <__aeabi_i2d>
   1e71c:	4622      	mov	r2, r4
   1e71e:	462b      	mov	r3, r5
   1e720:	f7fe f84a 	bl	1c7b8 <__aeabi_dmul>
   1e724:	465b      	mov	r3, fp
   1e726:	4652      	mov	r2, sl
   1e728:	e967 0102 	strd	r0, r1, [r7, #-8]!
   1e72c:	4620      	mov	r0, r4
   1e72e:	4629      	mov	r1, r5
   1e730:	f7fe f842 	bl	1c7b8 <__aeabi_dmul>
   1e734:	ab0c      	add	r3, sp, #48	; 0x30
   1e736:	4604      	mov	r4, r0
   1e738:	460d      	mov	r5, r1
   1e73a:	429e      	cmp	r6, r3
   1e73c:	d1ea      	bne.n	1e714 <__kernel_rem_pio2+0x464>
   1e73e:	ab48      	add	r3, sp, #288	; 0x120
   1e740:	46c3      	mov	fp, r8
   1e742:	f04f 0a00 	mov.w	sl, #0
   1e746:	9303      	str	r3, [sp, #12]
   1e748:	e9cd 3901 	strd	r3, r9, [sp, #4]
   1e74c:	f8dd 9014 	ldr.w	r9, [sp, #20]
   1e750:	f1b9 0f00 	cmp.w	r9, #0
   1e754:	db2b      	blt.n	1e7ae <__kernel_rem_pio2+0x4fe>
   1e756:	f8df 8130 	ldr.w	r8, [pc, #304]	; 1e888 <__kernel_rem_pio2+0x5d8>
   1e75a:	465d      	mov	r5, fp
   1e75c:	2400      	movs	r4, #0
   1e75e:	2600      	movs	r6, #0
   1e760:	2700      	movs	r7, #0
   1e762:	a343      	add	r3, pc, #268	; (adr r3, 1e870 <__kernel_rem_pio2+0x5c0>)
   1e764:	e9d3 2300 	ldrd	r2, r3, [r3]
   1e768:	e003      	b.n	1e772 <__kernel_rem_pio2+0x4c2>
   1e76a:	4554      	cmp	r4, sl
   1e76c:	dc10      	bgt.n	1e790 <__kernel_rem_pio2+0x4e0>
   1e76e:	e8f8 2302 	ldrd	r2, r3, [r8], #8
   1e772:	3401      	adds	r4, #1
   1e774:	e8f5 0102 	ldrd	r0, r1, [r5], #8
   1e778:	f7fe f81e 	bl	1c7b8 <__aeabi_dmul>
   1e77c:	4602      	mov	r2, r0
   1e77e:	460b      	mov	r3, r1
   1e780:	4630      	mov	r0, r6
   1e782:	4639      	mov	r1, r7
   1e784:	f7fd fe62 	bl	1c44c <__adddf3>
   1e788:	45a1      	cmp	r9, r4
   1e78a:	4606      	mov	r6, r0
   1e78c:	460f      	mov	r7, r1
   1e78e:	daec      	bge.n	1e76a <__kernel_rem_pio2+0x4ba>
   1e790:	9a02      	ldr	r2, [sp, #8]
   1e792:	f1ab 0b08 	sub.w	fp, fp, #8
   1e796:	9b01      	ldr	r3, [sp, #4]
   1e798:	4592      	cmp	sl, r2
   1e79a:	e8e3 6702 	strd	r6, r7, [r3], #8
   1e79e:	9301      	str	r3, [sp, #4]
   1e7a0:	f10a 0301 	add.w	r3, sl, #1
   1e7a4:	d006      	beq.n	1e7b4 <__kernel_rem_pio2+0x504>
   1e7a6:	f1b9 0f00 	cmp.w	r9, #0
   1e7aa:	469a      	mov	sl, r3
   1e7ac:	dad3      	bge.n	1e756 <__kernel_rem_pio2+0x4a6>
   1e7ae:	2600      	movs	r6, #0
   1e7b0:	2700      	movs	r7, #0
   1e7b2:	e7ed      	b.n	1e790 <__kernel_rem_pio2+0x4e0>
   1e7b4:	9ba2      	ldr	r3, [sp, #648]	; 0x288
   1e7b6:	f8dd 9008 	ldr.w	r9, [sp, #8]
   1e7ba:	2b03      	cmp	r3, #3
   1e7bc:	d82b      	bhi.n	1e816 <__kernel_rem_pio2+0x566>
   1e7be:	e8df f013 	tbh	[pc, r3, lsl #1]
   1e7c2:	00f5      	.short	0x00f5
   1e7c4:	00e400e4 	.word	0x00e400e4
   1e7c8:	0067      	.short	0x0067
   1e7ca:	ab48      	add	r3, sp, #288	; 0x120
   1e7cc:	2400      	movs	r4, #0
   1e7ce:	2500      	movs	r5, #0
   1e7d0:	9303      	str	r3, [sp, #12]
   1e7d2:	9903      	ldr	r1, [sp, #12]
   1e7d4:	462b      	mov	r3, r5
   1e7d6:	4622      	mov	r2, r4
   1e7d8:	e9d1 0100 	ldrd	r0, r1, [r1]
   1e7dc:	f7fd fe34 	bl	1c448 <__aeabi_dsub>
   1e7e0:	9b04      	ldr	r3, [sp, #16]
   1e7e2:	2b00      	cmp	r3, #0
   1e7e4:	f040 813e 	bne.w	1ea64 <__kernel_rem_pio2+0x7b4>
   1e7e8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   1e7ea:	f1b9 0f00 	cmp.w	r9, #0
   1e7ee:	e9c3 4500 	strd	r4, r5, [r3]
   1e7f2:	dd0d      	ble.n	1e810 <__kernel_rem_pio2+0x560>
   1e7f4:	ad4a      	add	r5, sp, #296	; 0x128
   1e7f6:	2401      	movs	r4, #1
   1e7f8:	3401      	adds	r4, #1
   1e7fa:	e8f5 2302 	ldrd	r2, r3, [r5], #8
   1e7fe:	f7fd fe25 	bl	1c44c <__adddf3>
   1e802:	45a1      	cmp	r9, r4
   1e804:	daf8      	bge.n	1e7f8 <__kernel_rem_pio2+0x548>
   1e806:	9b04      	ldr	r3, [sp, #16]
   1e808:	b113      	cbz	r3, 1e810 <__kernel_rem_pio2+0x560>
   1e80a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   1e80e:	4619      	mov	r1, r3
   1e810:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   1e812:	e9c3 0102 	strd	r0, r1, [r3, #8]
   1e816:	9b07      	ldr	r3, [sp, #28]
   1e818:	f003 0007 	and.w	r0, r3, #7
   1e81c:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
   1e820:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1e824:	9b01      	ldr	r3, [sp, #4]
   1e826:	a90c      	add	r1, sp, #48	; 0x30
   1e828:	1e5a      	subs	r2, r3, #1
   1e82a:	ab0c      	add	r3, sp, #48	; 0x30
   1e82c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   1e830:	f3c3 0316 	ubfx	r3, r3, #0, #23
   1e834:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
   1e838:	e6e6      	b.n	1e608 <__kernel_rem_pio2+0x358>
   1e83a:	9b01      	ldr	r3, [sp, #4]
   1e83c:	f108 0801 	add.w	r8, r8, #1
   1e840:	2502      	movs	r5, #2
   1e842:	2b00      	cmp	r3, #0
   1e844:	f73f aebe 	bgt.w	1e5c4 <__kernel_rem_pio2+0x314>
   1e848:	4632      	mov	r2, r6
   1e84a:	463b      	mov	r3, r7
   1e84c:	2000      	movs	r0, #0
   1e84e:	490a      	ldr	r1, [pc, #40]	; (1e878 <__kernel_rem_pio2+0x5c8>)
   1e850:	f7fd fdfa 	bl	1c448 <__aeabi_dsub>
   1e854:	4606      	mov	r6, r0
   1e856:	460f      	mov	r7, r1
   1e858:	e625      	b.n	1e4a6 <__kernel_rem_pio2+0x1f6>
   1e85a:	2100      	movs	r1, #0
   1e85c:	f06f 0317 	mvn.w	r3, #23
   1e860:	9107      	str	r1, [sp, #28]
   1e862:	e545      	b.n	1e2f0 <__kernel_rem_pio2+0x40>
   1e864:	f3af 8000 	nop.w
   1e868:	00000000 	.word	0x00000000
   1e86c:	3ff00000 	.word	0x3ff00000
   1e870:	40000000 	.word	0x40000000
   1e874:	3ff921fb 	.word	0x3ff921fb
   1e878:	3ff00000 	.word	0x3ff00000
   1e87c:	3fe00000 	.word	0x3fe00000
   1e880:	3ffffffe 	.word	0x3ffffffe
   1e884:	3e700000 	.word	0x3e700000
   1e888:	00046140 	.word	0x00046140
   1e88c:	ab48      	add	r3, sp, #288	; 0x120
   1e88e:	9303      	str	r3, [sp, #12]
   1e890:	f1b9 0f00 	cmp.w	r9, #0
   1e894:	f340 8119 	ble.w	1eaca <__kernel_rem_pio2+0x81a>
   1e898:	9a03      	ldr	r2, [sp, #12]
   1e89a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
   1e89e:	eb02 08c9 	add.w	r8, r2, r9, lsl #3
   1e8a2:	9301      	str	r3, [sp, #4]
   1e8a4:	e9d8 ab00 	ldrd	sl, fp, [r8]
   1e8a8:	e978 6702 	ldrd	r6, r7, [r8, #-8]!
   1e8ac:	4652      	mov	r2, sl
   1e8ae:	465b      	mov	r3, fp
   1e8b0:	4630      	mov	r0, r6
   1e8b2:	4639      	mov	r1, r7
   1e8b4:	f7fd fdca 	bl	1c44c <__adddf3>
   1e8b8:	4604      	mov	r4, r0
   1e8ba:	460d      	mov	r5, r1
   1e8bc:	4602      	mov	r2, r0
   1e8be:	460b      	mov	r3, r1
   1e8c0:	4630      	mov	r0, r6
   1e8c2:	4639      	mov	r1, r7
   1e8c4:	f7fd fdc0 	bl	1c448 <__aeabi_dsub>
   1e8c8:	465b      	mov	r3, fp
   1e8ca:	4652      	mov	r2, sl
   1e8cc:	46ab      	mov	fp, r5
   1e8ce:	f7fd fdbd 	bl	1c44c <__adddf3>
   1e8d2:	9b03      	ldr	r3, [sp, #12]
   1e8d4:	46a2      	mov	sl, r4
   1e8d6:	4543      	cmp	r3, r8
   1e8d8:	e9c8 0102 	strd	r0, r1, [r8, #8]
   1e8dc:	e9c8 4500 	strd	r4, r5, [r8]
   1e8e0:	d1e2      	bne.n	1e8a8 <__kernel_rem_pio2+0x5f8>
   1e8e2:	f1b9 0f01 	cmp.w	r9, #1
   1e8e6:	f340 80f0 	ble.w	1eaca <__kernel_rem_pio2+0x81a>
   1e8ea:	f06f 4260 	mvn.w	r2, #3758096384	; 0xe0000000
   1e8ee:	9b01      	ldr	r3, [sp, #4]
   1e8f0:	9903      	ldr	r1, [sp, #12]
   1e8f2:	f50d 7a94 	add.w	sl, sp, #296	; 0x128
   1e8f6:	444a      	add	r2, r9
   1e8f8:	440b      	add	r3, r1
   1e8fa:	00d2      	lsls	r2, r2, #3
   1e8fc:	f102 0b08 	add.w	fp, r2, #8
   1e900:	9201      	str	r2, [sp, #4]
   1e902:	e9d3 6700 	ldrd	r6, r7, [r3]
   1e906:	448b      	add	fp, r1
   1e908:	4632      	mov	r2, r6
   1e90a:	463b      	mov	r3, r7
   1e90c:	e97b 8902 	ldrd	r8, r9, [fp, #-8]!
   1e910:	4640      	mov	r0, r8
   1e912:	4649      	mov	r1, r9
   1e914:	f7fd fd9a 	bl	1c44c <__adddf3>
   1e918:	4604      	mov	r4, r0
   1e91a:	460d      	mov	r5, r1
   1e91c:	4602      	mov	r2, r0
   1e91e:	460b      	mov	r3, r1
   1e920:	4640      	mov	r0, r8
   1e922:	4649      	mov	r1, r9
   1e924:	f7fd fd90 	bl	1c448 <__aeabi_dsub>
   1e928:	4632      	mov	r2, r6
   1e92a:	463b      	mov	r3, r7
   1e92c:	4626      	mov	r6, r4
   1e92e:	f7fd fd8d 	bl	1c44c <__adddf3>
   1e932:	45da      	cmp	sl, fp
   1e934:	462f      	mov	r7, r5
   1e936:	e9cb 0102 	strd	r0, r1, [fp, #8]
   1e93a:	e9cb 4500 	strd	r4, r5, [fp]
   1e93e:	d1e3      	bne.n	1e908 <__kernel_rem_pio2+0x658>
   1e940:	9c01      	ldr	r4, [sp, #4]
   1e942:	2000      	movs	r0, #0
   1e944:	9b03      	ldr	r3, [sp, #12]
   1e946:	2100      	movs	r1, #0
   1e948:	3410      	adds	r4, #16
   1e94a:	f103 0510 	add.w	r5, r3, #16
   1e94e:	441c      	add	r4, r3
   1e950:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
   1e954:	f7fd fd7a 	bl	1c44c <__adddf3>
   1e958:	42a5      	cmp	r5, r4
   1e95a:	d1f9      	bne.n	1e950 <__kernel_rem_pio2+0x6a0>
   1e95c:	9c03      	ldr	r4, [sp, #12]
   1e95e:	9e04      	ldr	r6, [sp, #16]
   1e960:	e9d4 2300 	ldrd	r2, r3, [r4]
   1e964:	e9d4 4502 	ldrd	r4, r5, [r4, #8]
   1e968:	2e00      	cmp	r6, #0
   1e96a:	f040 8086 	bne.w	1ea7a <__kernel_rem_pio2+0x7ca>
   1e96e:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
   1e970:	e9c6 2300 	strd	r2, r3, [r6]
   1e974:	9b07      	ldr	r3, [sp, #28]
   1e976:	e9c6 0104 	strd	r0, r1, [r6, #16]
   1e97a:	f003 0007 	and.w	r0, r3, #7
   1e97e:	e9c6 4502 	strd	r4, r5, [r6, #8]
   1e982:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
   1e986:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1e98a:	9e06      	ldr	r6, [sp, #24]
   1e98c:	2400      	movs	r4, #0
   1e98e:	9f03      	ldr	r7, [sp, #12]
   1e990:	2500      	movs	r5, #0
   1e992:	3608      	adds	r6, #8
   1e994:	443e      	add	r6, r7
   1e996:	4620      	mov	r0, r4
   1e998:	4629      	mov	r1, r5
   1e99a:	e976 2302 	ldrd	r2, r3, [r6, #-8]!
   1e99e:	f7fd fd55 	bl	1c44c <__adddf3>
   1e9a2:	4604      	mov	r4, r0
   1e9a4:	42b7      	cmp	r7, r6
   1e9a6:	460d      	mov	r5, r1
   1e9a8:	d1f5      	bne.n	1e996 <__kernel_rem_pio2+0x6e6>
   1e9aa:	e712      	b.n	1e7d2 <__kernel_rem_pio2+0x522>
   1e9ac:	9c06      	ldr	r4, [sp, #24]
   1e9ae:	2000      	movs	r0, #0
   1e9b0:	9d03      	ldr	r5, [sp, #12]
   1e9b2:	2100      	movs	r1, #0
   1e9b4:	3408      	adds	r4, #8
   1e9b6:	442c      	add	r4, r5
   1e9b8:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
   1e9bc:	f7fd fd46 	bl	1c44c <__adddf3>
   1e9c0:	42a5      	cmp	r5, r4
   1e9c2:	d1f9      	bne.n	1e9b8 <__kernel_rem_pio2+0x708>
   1e9c4:	9b04      	ldr	r3, [sp, #16]
   1e9c6:	b113      	cbz	r3, 1e9ce <__kernel_rem_pio2+0x71e>
   1e9c8:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   1e9cc:	4619      	mov	r1, r3
   1e9ce:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   1e9d0:	e9c3 0100 	strd	r0, r1, [r3]
   1e9d4:	9b07      	ldr	r3, [sp, #28]
   1e9d6:	f003 0007 	and.w	r0, r3, #7
   1e9da:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
   1e9de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1e9e2:	2400      	movs	r4, #0
   1e9e4:	e5fe      	b.n	1e5e4 <__kernel_rem_pio2+0x334>
   1e9e6:	9c06      	ldr	r4, [sp, #24]
   1e9e8:	f8cd 801c 	str.w	r8, [sp, #28]
   1e9ec:	4260      	negs	r0, r4
   1e9ee:	9504      	str	r5, [sp, #16]
   1e9f0:	ec47 6b10 	vmov	d0, r6, r7
   1e9f4:	f000 f9c0 	bl	1ed78 <scalbn>
   1e9f8:	2200      	movs	r2, #0
   1e9fa:	ee10 0a10 	vmov	r0, s0
   1e9fe:	4b34      	ldr	r3, [pc, #208]	; (1ead0 <__kernel_rem_pio2+0x820>)
   1ea00:	ec57 6b10 	vmov	r6, r7, d0
   1ea04:	4639      	mov	r1, r7
   1ea06:	f7fe f95d 	bl	1ccc4 <__aeabi_dcmpge>
   1ea0a:	b308      	cbz	r0, 1ea50 <__kernel_rem_pio2+0x7a0>
   1ea0c:	3418      	adds	r4, #24
   1ea0e:	2200      	movs	r2, #0
   1ea10:	4b30      	ldr	r3, [pc, #192]	; (1ead4 <__kernel_rem_pio2+0x824>)
   1ea12:	4630      	mov	r0, r6
   1ea14:	4639      	mov	r1, r7
   1ea16:	9406      	str	r4, [sp, #24]
   1ea18:	f7fd fece 	bl	1c7b8 <__aeabi_dmul>
   1ea1c:	9d01      	ldr	r5, [sp, #4]
   1ea1e:	f7fe f965 	bl	1ccec <__aeabi_d2iz>
   1ea22:	4604      	mov	r4, r0
   1ea24:	f7fd fe5e 	bl	1c6e4 <__aeabi_i2d>
   1ea28:	2200      	movs	r2, #0
   1ea2a:	4b29      	ldr	r3, [pc, #164]	; (1ead0 <__kernel_rem_pio2+0x820>)
   1ea2c:	f105 0901 	add.w	r9, r5, #1
   1ea30:	f7fd fec2 	bl	1c7b8 <__aeabi_dmul>
   1ea34:	460b      	mov	r3, r1
   1ea36:	4602      	mov	r2, r0
   1ea38:	4639      	mov	r1, r7
   1ea3a:	4630      	mov	r0, r6
   1ea3c:	f7fd fd04 	bl	1c448 <__aeabi_dsub>
   1ea40:	f7fe f954 	bl	1ccec <__aeabi_d2iz>
   1ea44:	ab0c      	add	r3, sp, #48	; 0x30
   1ea46:	f843 0025 	str.w	r0, [r3, r5, lsl #2]
   1ea4a:	f843 4029 	str.w	r4, [r3, r9, lsl #2]
   1ea4e:	e645      	b.n	1e6dc <__kernel_rem_pio2+0x42c>
   1ea50:	4630      	mov	r0, r6
   1ea52:	4639      	mov	r1, r7
   1ea54:	9c01      	ldr	r4, [sp, #4]
   1ea56:	f7fe f949 	bl	1ccec <__aeabi_d2iz>
   1ea5a:	aa0c      	add	r2, sp, #48	; 0x30
   1ea5c:	46a1      	mov	r9, r4
   1ea5e:	f842 0024 	str.w	r0, [r2, r4, lsl #2]
   1ea62:	e63b      	b.n	1e6dc <__kernel_rem_pio2+0x42c>
   1ea64:	4622      	mov	r2, r4
   1ea66:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
   1ea6a:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
   1ea6c:	f1b9 0f00 	cmp.w	r9, #0
   1ea70:	e9c4 2300 	strd	r2, r3, [r4]
   1ea74:	f73f aebe 	bgt.w	1e7f4 <__kernel_rem_pio2+0x544>
   1ea78:	e6c7      	b.n	1e80a <__kernel_rem_pio2+0x55a>
   1ea7a:	f103 4700 	add.w	r7, r3, #2147483648	; 0x80000000
   1ea7e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   1ea82:	990b      	ldr	r1, [sp, #44]	; 0x2c
   1ea84:	4626      	mov	r6, r4
   1ea86:	4694      	mov	ip, r2
   1ea88:	f105 4400 	add.w	r4, r5, #2147483648	; 0x80000000
   1ea8c:	e9c1 0304 	strd	r0, r3, [r1, #16]
   1ea90:	9b07      	ldr	r3, [sp, #28]
   1ea92:	f003 0007 	and.w	r0, r3, #7
   1ea96:	e9c1 c700 	strd	ip, r7, [r1]
   1ea9a:	e9c1 6402 	strd	r6, r4, [r1, #8]
   1ea9e:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
   1eaa2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1eaa6:	9ba2      	ldr	r3, [sp, #648]	; 0x288
   1eaa8:	2b03      	cmp	r3, #3
   1eaaa:	f63f aeb4 	bhi.w	1e816 <__kernel_rem_pio2+0x566>
   1eaae:	a201      	add	r2, pc, #4	; (adr r2, 1eab4 <__kernel_rem_pio2+0x804>)
   1eab0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   1eab4:	0001eac5 	.word	0x0001eac5
   1eab8:	0001e7cb 	.word	0x0001e7cb
   1eabc:	0001e7cb 	.word	0x0001e7cb
   1eac0:	0001e88d 	.word	0x0001e88d
   1eac4:	2000      	movs	r0, #0
   1eac6:	2100      	movs	r1, #0
   1eac8:	e77c      	b.n	1e9c4 <__kernel_rem_pio2+0x714>
   1eaca:	2000      	movs	r0, #0
   1eacc:	2100      	movs	r1, #0
   1eace:	e745      	b.n	1e95c <__kernel_rem_pio2+0x6ac>
   1ead0:	41700000 	.word	0x41700000
   1ead4:	3e700000 	.word	0x3e700000

0001ead8 <__kernel_sin>:
   1ead8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1eadc:	ec55 4b10 	vmov	r4, r5, d0
   1eae0:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
   1eae4:	4682      	mov	sl, r0
   1eae6:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
   1eaea:	ed2d 8b02 	vpush	{d8}
   1eaee:	eeb0 8a41 	vmov.f32	s16, s2
   1eaf2:	eef0 8a61 	vmov.f32	s17, s3
   1eaf6:	b083      	sub	sp, #12
   1eaf8:	da07      	bge.n	1eb0a <__kernel_sin+0x32>
   1eafa:	ee10 0a10 	vmov	r0, s0
   1eafe:	4629      	mov	r1, r5
   1eb00:	f7fe f8f4 	bl	1ccec <__aeabi_d2iz>
   1eb04:	2800      	cmp	r0, #0
   1eb06:	f000 808e 	beq.w	1ec26 <__kernel_sin+0x14e>
   1eb0a:	4622      	mov	r2, r4
   1eb0c:	462b      	mov	r3, r5
   1eb0e:	4620      	mov	r0, r4
   1eb10:	4629      	mov	r1, r5
   1eb12:	f7fd fe51 	bl	1c7b8 <__aeabi_dmul>
   1eb16:	4606      	mov	r6, r0
   1eb18:	460f      	mov	r7, r1
   1eb1a:	4602      	mov	r2, r0
   1eb1c:	460b      	mov	r3, r1
   1eb1e:	4620      	mov	r0, r4
   1eb20:	4629      	mov	r1, r5
   1eb22:	f7fd fe49 	bl	1c7b8 <__aeabi_dmul>
   1eb26:	4680      	mov	r8, r0
   1eb28:	4689      	mov	r9, r1
   1eb2a:	4630      	mov	r0, r6
   1eb2c:	4639      	mov	r1, r7
   1eb2e:	a345      	add	r3, pc, #276	; (adr r3, 1ec44 <__kernel_sin+0x16c>)
   1eb30:	e9d3 2300 	ldrd	r2, r3, [r3]
   1eb34:	f7fd fe40 	bl	1c7b8 <__aeabi_dmul>
   1eb38:	a344      	add	r3, pc, #272	; (adr r3, 1ec4c <__kernel_sin+0x174>)
   1eb3a:	e9d3 2300 	ldrd	r2, r3, [r3]
   1eb3e:	f7fd fc83 	bl	1c448 <__aeabi_dsub>
   1eb42:	4632      	mov	r2, r6
   1eb44:	463b      	mov	r3, r7
   1eb46:	f7fd fe37 	bl	1c7b8 <__aeabi_dmul>
   1eb4a:	a342      	add	r3, pc, #264	; (adr r3, 1ec54 <__kernel_sin+0x17c>)
   1eb4c:	e9d3 2300 	ldrd	r2, r3, [r3]
   1eb50:	f7fd fc7c 	bl	1c44c <__adddf3>
   1eb54:	4632      	mov	r2, r6
   1eb56:	463b      	mov	r3, r7
   1eb58:	f7fd fe2e 	bl	1c7b8 <__aeabi_dmul>
   1eb5c:	a33f      	add	r3, pc, #252	; (adr r3, 1ec5c <__kernel_sin+0x184>)
   1eb5e:	e9d3 2300 	ldrd	r2, r3, [r3]
   1eb62:	f7fd fc71 	bl	1c448 <__aeabi_dsub>
   1eb66:	4632      	mov	r2, r6
   1eb68:	463b      	mov	r3, r7
   1eb6a:	f7fd fe25 	bl	1c7b8 <__aeabi_dmul>
   1eb6e:	a33d      	add	r3, pc, #244	; (adr r3, 1ec64 <__kernel_sin+0x18c>)
   1eb70:	e9d3 2300 	ldrd	r2, r3, [r3]
   1eb74:	f7fd fc6a 	bl	1c44c <__adddf3>
   1eb78:	e9cd 0100 	strd	r0, r1, [sp]
   1eb7c:	f1ba 0f00 	cmp.w	sl, #0
   1eb80:	d037      	beq.n	1ebf2 <__kernel_sin+0x11a>
   1eb82:	2200      	movs	r2, #0
   1eb84:	4b2e      	ldr	r3, [pc, #184]	; (1ec40 <__kernel_sin+0x168>)
   1eb86:	ec51 0b18 	vmov	r0, r1, d8
   1eb8a:	f7fd fe15 	bl	1c7b8 <__aeabi_dmul>
   1eb8e:	4682      	mov	sl, r0
   1eb90:	468b      	mov	fp, r1
   1eb92:	4640      	mov	r0, r8
   1eb94:	4649      	mov	r1, r9
   1eb96:	e9dd 2300 	ldrd	r2, r3, [sp]
   1eb9a:	f7fd fe0d 	bl	1c7b8 <__aeabi_dmul>
   1eb9e:	4602      	mov	r2, r0
   1eba0:	460b      	mov	r3, r1
   1eba2:	4650      	mov	r0, sl
   1eba4:	4659      	mov	r1, fp
   1eba6:	f7fd fc4f 	bl	1c448 <__aeabi_dsub>
   1ebaa:	4632      	mov	r2, r6
   1ebac:	463b      	mov	r3, r7
   1ebae:	f7fd fe03 	bl	1c7b8 <__aeabi_dmul>
   1ebb2:	ec53 2b18 	vmov	r2, r3, d8
   1ebb6:	f7fd fc47 	bl	1c448 <__aeabi_dsub>
   1ebba:	4606      	mov	r6, r0
   1ebbc:	460f      	mov	r7, r1
   1ebbe:	4640      	mov	r0, r8
   1ebc0:	4649      	mov	r1, r9
   1ebc2:	a31d      	add	r3, pc, #116	; (adr r3, 1ec38 <__kernel_sin+0x160>)
   1ebc4:	e9d3 2300 	ldrd	r2, r3, [r3]
   1ebc8:	f7fd fdf6 	bl	1c7b8 <__aeabi_dmul>
   1ebcc:	4602      	mov	r2, r0
   1ebce:	460b      	mov	r3, r1
   1ebd0:	4630      	mov	r0, r6
   1ebd2:	4639      	mov	r1, r7
   1ebd4:	f7fd fc3a 	bl	1c44c <__adddf3>
   1ebd8:	4602      	mov	r2, r0
   1ebda:	460b      	mov	r3, r1
   1ebdc:	4620      	mov	r0, r4
   1ebde:	4629      	mov	r1, r5
   1ebe0:	f7fd fc32 	bl	1c448 <__aeabi_dsub>
   1ebe4:	ec41 0b10 	vmov	d0, r0, r1
   1ebe8:	b003      	add	sp, #12
   1ebea:	ecbd 8b02 	vpop	{d8}
   1ebee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1ebf2:	4602      	mov	r2, r0
   1ebf4:	460b      	mov	r3, r1
   1ebf6:	4630      	mov	r0, r6
   1ebf8:	4639      	mov	r1, r7
   1ebfa:	f7fd fddd 	bl	1c7b8 <__aeabi_dmul>
   1ebfe:	a30e      	add	r3, pc, #56	; (adr r3, 1ec38 <__kernel_sin+0x160>)
   1ec00:	e9d3 2300 	ldrd	r2, r3, [r3]
   1ec04:	f7fd fc20 	bl	1c448 <__aeabi_dsub>
   1ec08:	4642      	mov	r2, r8
   1ec0a:	464b      	mov	r3, r9
   1ec0c:	f7fd fdd4 	bl	1c7b8 <__aeabi_dmul>
   1ec10:	4622      	mov	r2, r4
   1ec12:	462b      	mov	r3, r5
   1ec14:	f7fd fc1a 	bl	1c44c <__adddf3>
   1ec18:	ec41 0b10 	vmov	d0, r0, r1
   1ec1c:	b003      	add	sp, #12
   1ec1e:	ecbd 8b02 	vpop	{d8}
   1ec22:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1ec26:	ec45 4b10 	vmov	d0, r4, r5
   1ec2a:	b003      	add	sp, #12
   1ec2c:	ecbd 8b02 	vpop	{d8}
   1ec30:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1ec34:	f3af 8000 	nop.w
   1ec38:	55555549 	.word	0x55555549
   1ec3c:	3fc55555 	.word	0x3fc55555
   1ec40:	3fe00000 	.word	0x3fe00000
   1ec44:	5acfd57c 	.word	0x5acfd57c
   1ec48:	3de5d93a 	.word	0x3de5d93a
   1ec4c:	8a2b9ceb 	.word	0x8a2b9ceb
   1ec50:	3e5ae5e6 	.word	0x3e5ae5e6
   1ec54:	57b1fe7d 	.word	0x57b1fe7d
   1ec58:	3ec71de3 	.word	0x3ec71de3
   1ec5c:	19c161d5 	.word	0x19c161d5
   1ec60:	3f2a01a0 	.word	0x3f2a01a0
   1ec64:	1110f8a6 	.word	0x1110f8a6
   1ec68:	3f811111 	.word	0x3f811111
   1ec6c:	00000000 	.word	0x00000000

0001ec70 <floor>:
   1ec70:	ec51 0b10 	vmov	r0, r1, d0
   1ec74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1ec76:	f3c1 530a 	ubfx	r3, r1, #20, #11
   1ec7a:	460c      	mov	r4, r1
   1ec7c:	ee10 6a10 	vmov	r6, s0
   1ec80:	f2a3 35ff 	subw	r5, r3, #1023	; 0x3ff
   1ec84:	2d13      	cmp	r5, #19
   1ec86:	dc30      	bgt.n	1ecea <floor+0x7a>
   1ec88:	2d00      	cmp	r5, #0
   1ec8a:	db1e      	blt.n	1ecca <floor+0x5a>
   1ec8c:	4f38      	ldr	r7, [pc, #224]	; (1ed70 <floor+0x100>)
   1ec8e:	412f      	asrs	r7, r5
   1ec90:	ea07 0301 	and.w	r3, r7, r1
   1ec94:	4303      	orrs	r3, r0
   1ec96:	d02d      	beq.n	1ecf4 <floor+0x84>
   1ec98:	a333      	add	r3, pc, #204	; (adr r3, 1ed68 <floor+0xf8>)
   1ec9a:	e9d3 2300 	ldrd	r2, r3, [r3]
   1ec9e:	f7fd fbd5 	bl	1c44c <__adddf3>
   1eca2:	2200      	movs	r2, #0
   1eca4:	2300      	movs	r3, #0
   1eca6:	f7fe f817 	bl	1ccd8 <__aeabi_dcmpgt>
   1ecaa:	b148      	cbz	r0, 1ecc0 <floor+0x50>
   1ecac:	2c00      	cmp	r4, #0
   1ecae:	da04      	bge.n	1ecba <floor+0x4a>
   1ecb0:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
   1ecb4:	fa43 f505 	asr.w	r5, r3, r5
   1ecb8:	442c      	add	r4, r5
   1ecba:	ea24 0407 	bic.w	r4, r4, r7
   1ecbe:	2600      	movs	r6, #0
   1ecc0:	4623      	mov	r3, r4
   1ecc2:	4632      	mov	r2, r6
   1ecc4:	ec43 2b10 	vmov	d0, r2, r3
   1ecc8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1ecca:	a327      	add	r3, pc, #156	; (adr r3, 1ed68 <floor+0xf8>)
   1eccc:	e9d3 2300 	ldrd	r2, r3, [r3]
   1ecd0:	f7fd fbbc 	bl	1c44c <__adddf3>
   1ecd4:	2200      	movs	r2, #0
   1ecd6:	2300      	movs	r3, #0
   1ecd8:	f7fd fffe 	bl	1ccd8 <__aeabi_dcmpgt>
   1ecdc:	2800      	cmp	r0, #0
   1ecde:	d0ef      	beq.n	1ecc0 <floor+0x50>
   1ece0:	2c00      	cmp	r4, #0
   1ece2:	db29      	blt.n	1ed38 <floor+0xc8>
   1ece4:	2600      	movs	r6, #0
   1ece6:	4634      	mov	r4, r6
   1ece8:	e7ea      	b.n	1ecc0 <floor+0x50>
   1ecea:	2d33      	cmp	r5, #51	; 0x33
   1ecec:	dd05      	ble.n	1ecfa <floor+0x8a>
   1ecee:	f5b5 6f80 	cmp.w	r5, #1024	; 0x400
   1ecf2:	d019      	beq.n	1ed28 <floor+0xb8>
   1ecf4:	ec41 0b10 	vmov	d0, r0, r1
   1ecf8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1ecfa:	f2a3 4313 	subw	r3, r3, #1043	; 0x413
   1ecfe:	f04f 37ff 	mov.w	r7, #4294967295
   1ed02:	40df      	lsrs	r7, r3
   1ed04:	4207      	tst	r7, r0
   1ed06:	d0f5      	beq.n	1ecf4 <floor+0x84>
   1ed08:	a317      	add	r3, pc, #92	; (adr r3, 1ed68 <floor+0xf8>)
   1ed0a:	e9d3 2300 	ldrd	r2, r3, [r3]
   1ed0e:	f7fd fb9d 	bl	1c44c <__adddf3>
   1ed12:	2200      	movs	r2, #0
   1ed14:	2300      	movs	r3, #0
   1ed16:	f7fd ffdf 	bl	1ccd8 <__aeabi_dcmpgt>
   1ed1a:	2800      	cmp	r0, #0
   1ed1c:	d0d0      	beq.n	1ecc0 <floor+0x50>
   1ed1e:	2c00      	cmp	r4, #0
   1ed20:	db13      	blt.n	1ed4a <floor+0xda>
   1ed22:	ea26 0607 	bic.w	r6, r6, r7
   1ed26:	e7cb      	b.n	1ecc0 <floor+0x50>
   1ed28:	ee10 2a10 	vmov	r2, s0
   1ed2c:	460b      	mov	r3, r1
   1ed2e:	f7fd fb8d 	bl	1c44c <__adddf3>
   1ed32:	ec41 0b10 	vmov	d0, r0, r1
   1ed36:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1ed38:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
   1ed3c:	4a0d      	ldr	r2, [pc, #52]	; (1ed74 <floor+0x104>)
   1ed3e:	4333      	orrs	r3, r6
   1ed40:	2600      	movs	r6, #0
   1ed42:	42b3      	cmp	r3, r6
   1ed44:	bf18      	it	ne
   1ed46:	4614      	movne	r4, r2
   1ed48:	e7ba      	b.n	1ecc0 <floor+0x50>
   1ed4a:	2d14      	cmp	r5, #20
   1ed4c:	d008      	beq.n	1ed60 <floor+0xf0>
   1ed4e:	2301      	movs	r3, #1
   1ed50:	f1c5 0534 	rsb	r5, r5, #52	; 0x34
   1ed54:	fa03 f505 	lsl.w	r5, r3, r5
   1ed58:	19ae      	adds	r6, r5, r6
   1ed5a:	bf28      	it	cs
   1ed5c:	18e4      	addcs	r4, r4, r3
   1ed5e:	e7e0      	b.n	1ed22 <floor+0xb2>
   1ed60:	3401      	adds	r4, #1
   1ed62:	e7de      	b.n	1ed22 <floor+0xb2>
   1ed64:	f3af 8000 	nop.w
   1ed68:	8800759c 	.word	0x8800759c
   1ed6c:	7e37e43c 	.word	0x7e37e43c
   1ed70:	000fffff 	.word	0x000fffff
   1ed74:	bff00000 	.word	0xbff00000

0001ed78 <scalbn>:
   1ed78:	b538      	push	{r3, r4, r5, lr}
   1ed7a:	ec53 2b10 	vmov	r2, r3, d0
   1ed7e:	f3c3 510a 	ubfx	r1, r3, #20, #11
   1ed82:	461c      	mov	r4, r3
   1ed84:	4605      	mov	r5, r0
   1ed86:	bb81      	cbnz	r1, 1edea <scalbn+0x72>
   1ed88:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
   1ed8c:	ee10 1a10 	vmov	r1, s0
   1ed90:	4321      	orrs	r1, r4
   1ed92:	d029      	beq.n	1ede8 <scalbn+0x70>
   1ed94:	4c3c      	ldr	r4, [pc, #240]	; (1ee88 <scalbn+0x110>)
   1ed96:	4619      	mov	r1, r3
   1ed98:	2200      	movs	r2, #0
   1ed9a:	4b3c      	ldr	r3, [pc, #240]	; (1ee8c <scalbn+0x114>)
   1ed9c:	ee10 0a10 	vmov	r0, s0
   1eda0:	f7fd fd0a 	bl	1c7b8 <__aeabi_dmul>
   1eda4:	42a5      	cmp	r5, r4
   1eda6:	4602      	mov	r2, r0
   1eda8:	460b      	mov	r3, r1
   1edaa:	db16      	blt.n	1edda <scalbn+0x62>
   1edac:	460c      	mov	r4, r1
   1edae:	f3c1 510a 	ubfx	r1, r1, #20, #11
   1edb2:	3936      	subs	r1, #54	; 0x36
   1edb4:	4429      	add	r1, r5
   1edb6:	f240 70fe 	movw	r0, #2046	; 0x7fe
   1edba:	4281      	cmp	r1, r0
   1edbc:	dc21      	bgt.n	1ee02 <scalbn+0x8a>
   1edbe:	2900      	cmp	r1, #0
   1edc0:	dc45      	bgt.n	1ee4e <scalbn+0xd6>
   1edc2:	f111 0f35 	cmn.w	r1, #53	; 0x35
   1edc6:	da34      	bge.n	1ee32 <scalbn+0xba>
   1edc8:	f24c 3150 	movw	r1, #50000	; 0xc350
   1edcc:	428d      	cmp	r5, r1
   1edce:	dc18      	bgt.n	1ee02 <scalbn+0x8a>
   1edd0:	2b00      	cmp	r3, #0
   1edd2:	a125      	add	r1, pc, #148	; (adr r1, 1ee68 <scalbn+0xf0>)
   1edd4:	e9d1 0100 	ldrd	r0, r1, [r1]
   1edd8:	db40      	blt.n	1ee5c <scalbn+0xe4>
   1edda:	a323      	add	r3, pc, #140	; (adr r3, 1ee68 <scalbn+0xf0>)
   1eddc:	e9d3 2300 	ldrd	r2, r3, [r3]
   1ede0:	f7fd fcea 	bl	1c7b8 <__aeabi_dmul>
   1ede4:	ec41 0b10 	vmov	d0, r0, r1
   1ede8:	bd38      	pop	{r3, r4, r5, pc}
   1edea:	f240 70ff 	movw	r0, #2047	; 0x7ff
   1edee:	4281      	cmp	r1, r0
   1edf0:	d1e0      	bne.n	1edb4 <scalbn+0x3c>
   1edf2:	ee10 0a10 	vmov	r0, s0
   1edf6:	4619      	mov	r1, r3
   1edf8:	f7fd fb28 	bl	1c44c <__adddf3>
   1edfc:	ec41 0b10 	vmov	d0, r0, r1
   1ee00:	bd38      	pop	{r3, r4, r5, pc}
   1ee02:	2b00      	cmp	r3, #0
   1ee04:	a11a      	add	r1, pc, #104	; (adr r1, 1ee70 <scalbn+0xf8>)
   1ee06:	e9d1 0100 	ldrd	r0, r1, [r1]
   1ee0a:	db07      	blt.n	1ee1c <scalbn+0xa4>
   1ee0c:	a318      	add	r3, pc, #96	; (adr r3, 1ee70 <scalbn+0xf8>)
   1ee0e:	e9d3 2300 	ldrd	r2, r3, [r3]
   1ee12:	f7fd fcd1 	bl	1c7b8 <__aeabi_dmul>
   1ee16:	ec41 0b10 	vmov	d0, r0, r1
   1ee1a:	bd38      	pop	{r3, r4, r5, pc}
   1ee1c:	a116      	add	r1, pc, #88	; (adr r1, 1ee78 <scalbn+0x100>)
   1ee1e:	e9d1 0100 	ldrd	r0, r1, [r1]
   1ee22:	a313      	add	r3, pc, #76	; (adr r3, 1ee70 <scalbn+0xf8>)
   1ee24:	e9d3 2300 	ldrd	r2, r3, [r3]
   1ee28:	f7fd fcc6 	bl	1c7b8 <__aeabi_dmul>
   1ee2c:	ec41 0b10 	vmov	d0, r0, r1
   1ee30:	e7f3      	b.n	1ee1a <scalbn+0xa2>
   1ee32:	4817      	ldr	r0, [pc, #92]	; (1ee90 <scalbn+0x118>)
   1ee34:	3136      	adds	r1, #54	; 0x36
   1ee36:	4020      	ands	r0, r4
   1ee38:	ea40 5301 	orr.w	r3, r0, r1, lsl #20
   1ee3c:	4610      	mov	r0, r2
   1ee3e:	2200      	movs	r2, #0
   1ee40:	4619      	mov	r1, r3
   1ee42:	4b14      	ldr	r3, [pc, #80]	; (1ee94 <scalbn+0x11c>)
   1ee44:	f7fd fcb8 	bl	1c7b8 <__aeabi_dmul>
   1ee48:	ec41 0b10 	vmov	d0, r0, r1
   1ee4c:	bd38      	pop	{r3, r4, r5, pc}
   1ee4e:	4810      	ldr	r0, [pc, #64]	; (1ee90 <scalbn+0x118>)
   1ee50:	4020      	ands	r0, r4
   1ee52:	ea40 5301 	orr.w	r3, r0, r1, lsl #20
   1ee56:	ec43 2b10 	vmov	d0, r2, r3
   1ee5a:	bd38      	pop	{r3, r4, r5, pc}
   1ee5c:	a108      	add	r1, pc, #32	; (adr r1, 1ee80 <scalbn+0x108>)
   1ee5e:	e9d1 0100 	ldrd	r0, r1, [r1]
   1ee62:	e7ba      	b.n	1edda <scalbn+0x62>
   1ee64:	f3af 8000 	nop.w
   1ee68:	c2f8f359 	.word	0xc2f8f359
   1ee6c:	01a56e1f 	.word	0x01a56e1f
   1ee70:	8800759c 	.word	0x8800759c
   1ee74:	7e37e43c 	.word	0x7e37e43c
   1ee78:	8800759c 	.word	0x8800759c
   1ee7c:	fe37e43c 	.word	0xfe37e43c
   1ee80:	c2f8f359 	.word	0xc2f8f359
   1ee84:	81a56e1f 	.word	0x81a56e1f
   1ee88:	ffff3cb0 	.word	0xffff3cb0
   1ee8c:	43500000 	.word	0x43500000
   1ee90:	800fffff 	.word	0x800fffff
   1ee94:	3c900000 	.word	0x3c900000

0001ee98 <_dtoa_r>:
   1ee98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1ee9c:	6a47      	ldr	r7, [r0, #36]	; 0x24
   1ee9e:	b099      	sub	sp, #100	; 0x64
   1eea0:	4683      	mov	fp, r0
   1eea2:	9108      	str	r1, [sp, #32]
   1eea4:	920d      	str	r2, [sp, #52]	; 0x34
   1eea6:	9314      	str	r3, [sp, #80]	; 0x50
   1eea8:	9e22      	ldr	r6, [sp, #136]	; 0x88
   1eeaa:	ec55 4b10 	vmov	r4, r5, d0
   1eeae:	e9cd 4500 	strd	r4, r5, [sp]
   1eeb2:	b947      	cbnz	r7, 1eec6 <_dtoa_r+0x2e>
   1eeb4:	2010      	movs	r0, #16
   1eeb6:	f020 fe41 	bl	3fb3c <malloc>
   1eeba:	f8cb 0024 	str.w	r0, [fp, #36]	; 0x24
   1eebe:	6007      	str	r7, [r0, #0]
   1eec0:	60c7      	str	r7, [r0, #12]
   1eec2:	e9c0 7701 	strd	r7, r7, [r0, #4]
   1eec6:	f8db 3024 	ldr.w	r3, [fp, #36]	; 0x24
   1eeca:	6819      	ldr	r1, [r3, #0]
   1eecc:	b159      	cbz	r1, 1eee6 <_dtoa_r+0x4e>
   1eece:	685a      	ldr	r2, [r3, #4]
   1eed0:	2301      	movs	r3, #1
   1eed2:	4658      	mov	r0, fp
   1eed4:	4093      	lsls	r3, r2
   1eed6:	604a      	str	r2, [r1, #4]
   1eed8:	608b      	str	r3, [r1, #8]
   1eeda:	f026 fab5 	bl	45448 <_Bfree>
   1eede:	f8db 3024 	ldr.w	r3, [fp, #36]	; 0x24
   1eee2:	2200      	movs	r2, #0
   1eee4:	601a      	str	r2, [r3, #0]
   1eee6:	1e2b      	subs	r3, r5, #0
   1eee8:	bfb7      	itett	lt
   1eeea:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
   1eeee:	2300      	movge	r3, #0
   1eef0:	2201      	movlt	r2, #1
   1eef2:	9301      	strlt	r3, [sp, #4]
   1eef4:	bfa8      	it	ge
   1eef6:	6033      	strge	r3, [r6, #0]
   1eef8:	9c01      	ldr	r4, [sp, #4]
   1eefa:	4bb1      	ldr	r3, [pc, #708]	; (1f1c0 <_dtoa_r+0x328>)
   1eefc:	bfb8      	it	lt
   1eefe:	6032      	strlt	r2, [r6, #0]
   1ef00:	43a3      	bics	r3, r4
   1ef02:	d11a      	bne.n	1ef3a <_dtoa_r+0xa2>
   1ef04:	f242 730f 	movw	r3, #9999	; 0x270f
   1ef08:	9a14      	ldr	r2, [sp, #80]	; 0x50
   1ef0a:	6013      	str	r3, [r2, #0]
   1ef0c:	f3c4 0313 	ubfx	r3, r4, #0, #20
   1ef10:	9a00      	ldr	r2, [sp, #0]
   1ef12:	4313      	orrs	r3, r2
   1ef14:	f000 8547 	beq.w	1f9a6 <_dtoa_r+0xb0e>
   1ef18:	9b23      	ldr	r3, [sp, #140]	; 0x8c
   1ef1a:	b953      	cbnz	r3, 1ef32 <_dtoa_r+0x9a>
   1ef1c:	4ba9      	ldr	r3, [pc, #676]	; (1f1c4 <_dtoa_r+0x32c>)
   1ef1e:	e023      	b.n	1ef68 <_dtoa_r+0xd0>
   1ef20:	4ba9      	ldr	r3, [pc, #676]	; (1f1c8 <_dtoa_r+0x330>)
   1ef22:	9303      	str	r3, [sp, #12]
   1ef24:	3308      	adds	r3, #8
   1ef26:	9a23      	ldr	r2, [sp, #140]	; 0x8c
   1ef28:	6013      	str	r3, [r2, #0]
   1ef2a:	9803      	ldr	r0, [sp, #12]
   1ef2c:	b019      	add	sp, #100	; 0x64
   1ef2e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1ef32:	4ba4      	ldr	r3, [pc, #656]	; (1f1c4 <_dtoa_r+0x32c>)
   1ef34:	9303      	str	r3, [sp, #12]
   1ef36:	3303      	adds	r3, #3
   1ef38:	e7f5      	b.n	1ef26 <_dtoa_r+0x8e>
   1ef3a:	ed9d 7b00 	vldr	d7, [sp]
   1ef3e:	2200      	movs	r2, #0
   1ef40:	2300      	movs	r3, #0
   1ef42:	ec51 0b17 	vmov	r0, r1, d7
   1ef46:	ed8d 7b0e 	vstr	d7, [sp, #56]	; 0x38
   1ef4a:	f7fd fe9d 	bl	1cc88 <__aeabi_dcmpeq>
   1ef4e:	4607      	mov	r7, r0
   1ef50:	b160      	cbz	r0, 1ef6c <_dtoa_r+0xd4>
   1ef52:	2301      	movs	r3, #1
   1ef54:	9a14      	ldr	r2, [sp, #80]	; 0x50
   1ef56:	6013      	str	r3, [r2, #0]
   1ef58:	9b23      	ldr	r3, [sp, #140]	; 0x8c
   1ef5a:	2b00      	cmp	r3, #0
   1ef5c:	f000 8520 	beq.w	1f9a0 <_dtoa_r+0xb08>
   1ef60:	4b9a      	ldr	r3, [pc, #616]	; (1f1cc <_dtoa_r+0x334>)
   1ef62:	9a23      	ldr	r2, [sp, #140]	; 0x8c
   1ef64:	6013      	str	r3, [r2, #0]
   1ef66:	3b01      	subs	r3, #1
   1ef68:	9303      	str	r3, [sp, #12]
   1ef6a:	e7de      	b.n	1ef2a <_dtoa_r+0x92>
   1ef6c:	f3c4 560a 	ubfx	r6, r4, #20, #11
   1ef70:	aa16      	add	r2, sp, #88	; 0x58
   1ef72:	a917      	add	r1, sp, #92	; 0x5c
   1ef74:	4658      	mov	r0, fp
   1ef76:	ed9d 0b0e 	vldr	d0, [sp, #56]	; 0x38
   1ef7a:	f026 fc6e 	bl	4585a <__d2b>
   1ef7e:	4680      	mov	r8, r0
   1ef80:	2e00      	cmp	r6, #0
   1ef82:	d07d      	beq.n	1f080 <_dtoa_r+0x1e8>
   1ef84:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   1ef86:	f2a6 36ff 	subw	r6, r6, #1023	; 0x3ff
   1ef8a:	9715      	str	r7, [sp, #84]	; 0x54
   1ef8c:	f3c3 0313 	ubfx	r3, r3, #0, #20
   1ef90:	e9dd 450e 	ldrd	r4, r5, [sp, #56]	; 0x38
   1ef94:	f043 557f 	orr.w	r5, r3, #1069547520	; 0x3fc00000
   1ef98:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
   1ef9c:	2200      	movs	r2, #0
   1ef9e:	4b8c      	ldr	r3, [pc, #560]	; (1f1d0 <_dtoa_r+0x338>)
   1efa0:	4620      	mov	r0, r4
   1efa2:	4629      	mov	r1, r5
   1efa4:	f7fd fa50 	bl	1c448 <__aeabi_dsub>
   1efa8:	a37f      	add	r3, pc, #508	; (adr r3, 1f1a8 <_dtoa_r+0x310>)
   1efaa:	e9d3 2300 	ldrd	r2, r3, [r3]
   1efae:	f7fd fc03 	bl	1c7b8 <__aeabi_dmul>
   1efb2:	a37f      	add	r3, pc, #508	; (adr r3, 1f1b0 <_dtoa_r+0x318>)
   1efb4:	e9d3 2300 	ldrd	r2, r3, [r3]
   1efb8:	f7fd fa48 	bl	1c44c <__adddf3>
   1efbc:	4604      	mov	r4, r0
   1efbe:	460d      	mov	r5, r1
   1efc0:	4630      	mov	r0, r6
   1efc2:	f7fd fb8f 	bl	1c6e4 <__aeabi_i2d>
   1efc6:	a37c      	add	r3, pc, #496	; (adr r3, 1f1b8 <_dtoa_r+0x320>)
   1efc8:	e9d3 2300 	ldrd	r2, r3, [r3]
   1efcc:	f7fd fbf4 	bl	1c7b8 <__aeabi_dmul>
   1efd0:	4602      	mov	r2, r0
   1efd2:	460b      	mov	r3, r1
   1efd4:	4620      	mov	r0, r4
   1efd6:	4629      	mov	r1, r5
   1efd8:	f7fd fa38 	bl	1c44c <__adddf3>
   1efdc:	4604      	mov	r4, r0
   1efde:	460d      	mov	r5, r1
   1efe0:	f7fd fe84 	bl	1ccec <__aeabi_d2iz>
   1efe4:	2200      	movs	r2, #0
   1efe6:	4682      	mov	sl, r0
   1efe8:	2300      	movs	r3, #0
   1efea:	4620      	mov	r0, r4
   1efec:	4629      	mov	r1, r5
   1efee:	f7fd fe55 	bl	1cc9c <__aeabi_dcmplt>
   1eff2:	b148      	cbz	r0, 1f008 <_dtoa_r+0x170>
   1eff4:	4650      	mov	r0, sl
   1eff6:	f7fd fb75 	bl	1c6e4 <__aeabi_i2d>
   1effa:	4622      	mov	r2, r4
   1effc:	462b      	mov	r3, r5
   1effe:	f7fd fe43 	bl	1cc88 <__aeabi_dcmpeq>
   1f002:	b908      	cbnz	r0, 1f008 <_dtoa_r+0x170>
   1f004:	f10a 3aff 	add.w	sl, sl, #4294967295
   1f008:	f1ba 0f16 	cmp.w	sl, #22
   1f00c:	d857      	bhi.n	1f0be <_dtoa_r+0x226>
   1f00e:	4b71      	ldr	r3, [pc, #452]	; (1f1d4 <_dtoa_r+0x33c>)
   1f010:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
   1f014:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
   1f018:	e9d3 2300 	ldrd	r2, r3, [r3]
   1f01c:	f7fd fe3e 	bl	1cc9c <__aeabi_dcmplt>
   1f020:	2800      	cmp	r0, #0
   1f022:	d04e      	beq.n	1f0c2 <_dtoa_r+0x22a>
   1f024:	f10a 3aff 	add.w	sl, sl, #4294967295
   1f028:	2300      	movs	r3, #0
   1f02a:	9311      	str	r3, [sp, #68]	; 0x44
   1f02c:	9b16      	ldr	r3, [sp, #88]	; 0x58
   1f02e:	1b9e      	subs	r6, r3, r6
   1f030:	1e73      	subs	r3, r6, #1
   1f032:	9307      	str	r3, [sp, #28]
   1f034:	bf49      	itett	mi
   1f036:	f1c6 0301 	rsbmi	r3, r6, #1
   1f03a:	2300      	movpl	r3, #0
   1f03c:	9306      	strmi	r3, [sp, #24]
   1f03e:	2300      	movmi	r3, #0
   1f040:	bf54      	ite	pl
   1f042:	9306      	strpl	r3, [sp, #24]
   1f044:	9307      	strmi	r3, [sp, #28]
   1f046:	f1ba 0f00 	cmp.w	sl, #0
   1f04a:	db3c      	blt.n	1f0c6 <_dtoa_r+0x22e>
   1f04c:	9b07      	ldr	r3, [sp, #28]
   1f04e:	f8cd a040 	str.w	sl, [sp, #64]	; 0x40
   1f052:	4453      	add	r3, sl
   1f054:	9307      	str	r3, [sp, #28]
   1f056:	2300      	movs	r3, #0
   1f058:	9309      	str	r3, [sp, #36]	; 0x24
   1f05a:	9b08      	ldr	r3, [sp, #32]
   1f05c:	2b09      	cmp	r3, #9
   1f05e:	f200 808d 	bhi.w	1f17c <_dtoa_r+0x2e4>
   1f062:	2b05      	cmp	r3, #5
   1f064:	bfc5      	ittet	gt
   1f066:	3b04      	subgt	r3, #4
   1f068:	2400      	movgt	r4, #0
   1f06a:	2401      	movle	r4, #1
   1f06c:	9308      	strgt	r3, [sp, #32]
   1f06e:	9b08      	ldr	r3, [sp, #32]
   1f070:	3b02      	subs	r3, #2
   1f072:	2b03      	cmp	r3, #3
   1f074:	f200 808d 	bhi.w	1f192 <_dtoa_r+0x2fa>
   1f078:	e8df f003 	tbb	[pc, r3]
   1f07c:	7e3a3c2f 	.word	0x7e3a3c2f
   1f080:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	; 0x58
   1f084:	441e      	add	r6, r3
   1f086:	f206 4032 	addw	r0, r6, #1074	; 0x432
   1f08a:	2820      	cmp	r0, #32
   1f08c:	dd11      	ble.n	1f0b2 <_dtoa_r+0x21a>
   1f08e:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
   1f092:	9b00      	ldr	r3, [sp, #0]
   1f094:	4084      	lsls	r4, r0
   1f096:	f206 4012 	addw	r0, r6, #1042	; 0x412
   1f09a:	fa23 f000 	lsr.w	r0, r3, r0
   1f09e:	4320      	orrs	r0, r4
   1f0a0:	f7fd fb10 	bl	1c6c4 <__aeabi_ui2d>
   1f0a4:	2301      	movs	r3, #1
   1f0a6:	4604      	mov	r4, r0
   1f0a8:	f1a1 75f8 	sub.w	r5, r1, #32505856	; 0x1f00000
   1f0ac:	3e01      	subs	r6, #1
   1f0ae:	9315      	str	r3, [sp, #84]	; 0x54
   1f0b0:	e774      	b.n	1ef9c <_dtoa_r+0x104>
   1f0b2:	f1c0 0020 	rsb	r0, r0, #32
   1f0b6:	9b00      	ldr	r3, [sp, #0]
   1f0b8:	fa03 f000 	lsl.w	r0, r3, r0
   1f0bc:	e7f0      	b.n	1f0a0 <_dtoa_r+0x208>
   1f0be:	2301      	movs	r3, #1
   1f0c0:	e7b3      	b.n	1f02a <_dtoa_r+0x192>
   1f0c2:	9011      	str	r0, [sp, #68]	; 0x44
   1f0c4:	e7b2      	b.n	1f02c <_dtoa_r+0x194>
   1f0c6:	9b06      	ldr	r3, [sp, #24]
   1f0c8:	eba3 030a 	sub.w	r3, r3, sl
   1f0cc:	9306      	str	r3, [sp, #24]
   1f0ce:	f1ca 0300 	rsb	r3, sl, #0
   1f0d2:	9309      	str	r3, [sp, #36]	; 0x24
   1f0d4:	2300      	movs	r3, #0
   1f0d6:	9310      	str	r3, [sp, #64]	; 0x40
   1f0d8:	e7bf      	b.n	1f05a <_dtoa_r+0x1c2>
   1f0da:	2300      	movs	r3, #0
   1f0dc:	930c      	str	r3, [sp, #48]	; 0x30
   1f0de:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   1f0e0:	2b00      	cmp	r3, #0
   1f0e2:	dc59      	bgt.n	1f198 <_dtoa_r+0x300>
   1f0e4:	2301      	movs	r3, #1
   1f0e6:	4699      	mov	r9, r3
   1f0e8:	461a      	mov	r2, r3
   1f0ea:	9304      	str	r3, [sp, #16]
   1f0ec:	920d      	str	r2, [sp, #52]	; 0x34
   1f0ee:	e00c      	b.n	1f10a <_dtoa_r+0x272>
   1f0f0:	2301      	movs	r3, #1
   1f0f2:	e7f3      	b.n	1f0dc <_dtoa_r+0x244>
   1f0f4:	2300      	movs	r3, #0
   1f0f6:	930c      	str	r3, [sp, #48]	; 0x30
   1f0f8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   1f0fa:	4453      	add	r3, sl
   1f0fc:	f103 0901 	add.w	r9, r3, #1
   1f100:	9304      	str	r3, [sp, #16]
   1f102:	464b      	mov	r3, r9
   1f104:	2b01      	cmp	r3, #1
   1f106:	bfb8      	it	lt
   1f108:	2301      	movlt	r3, #1
   1f10a:	2200      	movs	r2, #0
   1f10c:	f8db 5024 	ldr.w	r5, [fp, #36]	; 0x24
   1f110:	606a      	str	r2, [r5, #4]
   1f112:	2204      	movs	r2, #4
   1f114:	f102 0014 	add.w	r0, r2, #20
   1f118:	6869      	ldr	r1, [r5, #4]
   1f11a:	4298      	cmp	r0, r3
   1f11c:	d940      	bls.n	1f1a0 <_dtoa_r+0x308>
   1f11e:	4658      	mov	r0, fp
   1f120:	f026 f95e 	bl	453e0 <_Balloc>
   1f124:	f8db 3024 	ldr.w	r3, [fp, #36]	; 0x24
   1f128:	6028      	str	r0, [r5, #0]
   1f12a:	f1b9 0f0e 	cmp.w	r9, #14
   1f12e:	681b      	ldr	r3, [r3, #0]
   1f130:	9303      	str	r3, [sp, #12]
   1f132:	f200 80d4 	bhi.w	1f2de <_dtoa_r+0x446>
   1f136:	2c00      	cmp	r4, #0
   1f138:	f000 80d1 	beq.w	1f2de <_dtoa_r+0x446>
   1f13c:	f1ba 0f00 	cmp.w	sl, #0
   1f140:	dd66      	ble.n	1f210 <_dtoa_r+0x378>
   1f142:	4a24      	ldr	r2, [pc, #144]	; (1f1d4 <_dtoa_r+0x33c>)
   1f144:	f00a 030f 	and.w	r3, sl, #15
   1f148:	ea4f 142a 	mov.w	r4, sl, asr #4
   1f14c:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
   1f150:	06e2      	lsls	r2, r4, #27
   1f152:	ed93 7b00 	vldr	d7, [r3]
   1f156:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
   1f15a:	d557      	bpl.n	1f20c <_dtoa_r+0x374>
   1f15c:	4b1e      	ldr	r3, [pc, #120]	; (1f1d8 <_dtoa_r+0x340>)
   1f15e:	f004 040f 	and.w	r4, r4, #15
   1f162:	2603      	movs	r6, #3
   1f164:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
   1f168:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
   1f16c:	f7fd fc4e 	bl	1ca0c <__aeabi_ddiv>
   1f170:	e9cd 0100 	strd	r0, r1, [sp]
   1f174:	4d18      	ldr	r5, [pc, #96]	; (1f1d8 <_dtoa_r+0x340>)
   1f176:	e03e      	b.n	1f1f6 <_dtoa_r+0x35e>
   1f178:	2301      	movs	r3, #1
   1f17a:	e7bc      	b.n	1f0f6 <_dtoa_r+0x25e>
   1f17c:	2401      	movs	r4, #1
   1f17e:	2300      	movs	r3, #0
   1f180:	940c      	str	r4, [sp, #48]	; 0x30
   1f182:	9308      	str	r3, [sp, #32]
   1f184:	f04f 33ff 	mov.w	r3, #4294967295
   1f188:	2200      	movs	r2, #0
   1f18a:	9304      	str	r3, [sp, #16]
   1f18c:	4699      	mov	r9, r3
   1f18e:	2312      	movs	r3, #18
   1f190:	e7ac      	b.n	1f0ec <_dtoa_r+0x254>
   1f192:	2301      	movs	r3, #1
   1f194:	930c      	str	r3, [sp, #48]	; 0x30
   1f196:	e7f5      	b.n	1f184 <_dtoa_r+0x2ec>
   1f198:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   1f19a:	9304      	str	r3, [sp, #16]
   1f19c:	4699      	mov	r9, r3
   1f19e:	e7b4      	b.n	1f10a <_dtoa_r+0x272>
   1f1a0:	3101      	adds	r1, #1
   1f1a2:	0052      	lsls	r2, r2, #1
   1f1a4:	6069      	str	r1, [r5, #4]
   1f1a6:	e7b5      	b.n	1f114 <_dtoa_r+0x27c>
   1f1a8:	636f4361 	.word	0x636f4361
   1f1ac:	3fd287a7 	.word	0x3fd287a7
   1f1b0:	8b60c8b3 	.word	0x8b60c8b3
   1f1b4:	3fc68a28 	.word	0x3fc68a28
   1f1b8:	509f79fb 	.word	0x509f79fb
   1f1bc:	3fd34413 	.word	0x3fd34413
   1f1c0:	7ff00000 	.word	0x7ff00000
   1f1c4:	0004d9cd 	.word	0x0004d9cd
   1f1c8:	0004d9c4 	.word	0x0004d9c4
   1f1cc:	0004d39c 	.word	0x0004d39c
   1f1d0:	3ff80000 	.word	0x3ff80000
   1f1d4:	000461a0 	.word	0x000461a0
   1f1d8:	00046178 	.word	0x00046178
   1f1dc:	07e3      	lsls	r3, r4, #31
   1f1de:	d508      	bpl.n	1f1f2 <_dtoa_r+0x35a>
   1f1e0:	3601      	adds	r6, #1
   1f1e2:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
   1f1e6:	e9d5 2300 	ldrd	r2, r3, [r5]
   1f1ea:	f7fd fae5 	bl	1c7b8 <__aeabi_dmul>
   1f1ee:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
   1f1f2:	1064      	asrs	r4, r4, #1
   1f1f4:	3508      	adds	r5, #8
   1f1f6:	2c00      	cmp	r4, #0
   1f1f8:	d1f0      	bne.n	1f1dc <_dtoa_r+0x344>
   1f1fa:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
   1f1fe:	e9dd 0100 	ldrd	r0, r1, [sp]
   1f202:	f7fd fc03 	bl	1ca0c <__aeabi_ddiv>
   1f206:	e9cd 0100 	strd	r0, r1, [sp]
   1f20a:	e01a      	b.n	1f242 <_dtoa_r+0x3aa>
   1f20c:	2602      	movs	r6, #2
   1f20e:	e7b1      	b.n	1f174 <_dtoa_r+0x2dc>
   1f210:	f000 809f 	beq.w	1f352 <_dtoa_r+0x4ba>
   1f214:	f1ca 0400 	rsb	r4, sl, #0
   1f218:	4b9e      	ldr	r3, [pc, #632]	; (1f494 <_dtoa_r+0x5fc>)
   1f21a:	4d9f      	ldr	r5, [pc, #636]	; (1f498 <_dtoa_r+0x600>)
   1f21c:	2602      	movs	r6, #2
   1f21e:	f004 020f 	and.w	r2, r4, #15
   1f222:	1124      	asrs	r4, r4, #4
   1f224:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   1f228:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
   1f22c:	e9d3 2300 	ldrd	r2, r3, [r3]
   1f230:	f7fd fac2 	bl	1c7b8 <__aeabi_dmul>
   1f234:	2300      	movs	r3, #0
   1f236:	e9cd 0100 	strd	r0, r1, [sp]
   1f23a:	2c00      	cmp	r4, #0
   1f23c:	d17e      	bne.n	1f33c <_dtoa_r+0x4a4>
   1f23e:	2b00      	cmp	r3, #0
   1f240:	d1e1      	bne.n	1f206 <_dtoa_r+0x36e>
   1f242:	9b11      	ldr	r3, [sp, #68]	; 0x44
   1f244:	2b00      	cmp	r3, #0
   1f246:	f000 8086 	beq.w	1f356 <_dtoa_r+0x4be>
   1f24a:	2200      	movs	r2, #0
   1f24c:	4b93      	ldr	r3, [pc, #588]	; (1f49c <_dtoa_r+0x604>)
   1f24e:	e9dd 4500 	ldrd	r4, r5, [sp]
   1f252:	4620      	mov	r0, r4
   1f254:	4629      	mov	r1, r5
   1f256:	f7fd fd21 	bl	1cc9c <__aeabi_dcmplt>
   1f25a:	2800      	cmp	r0, #0
   1f25c:	d07b      	beq.n	1f356 <_dtoa_r+0x4be>
   1f25e:	f1b9 0f00 	cmp.w	r9, #0
   1f262:	d078      	beq.n	1f356 <_dtoa_r+0x4be>
   1f264:	9b04      	ldr	r3, [sp, #16]
   1f266:	2b00      	cmp	r3, #0
   1f268:	dd35      	ble.n	1f2d6 <_dtoa_r+0x43e>
   1f26a:	f10a 33ff 	add.w	r3, sl, #4294967295
   1f26e:	4620      	mov	r0, r4
   1f270:	2200      	movs	r2, #0
   1f272:	4629      	mov	r1, r5
   1f274:	930a      	str	r3, [sp, #40]	; 0x28
   1f276:	3601      	adds	r6, #1
   1f278:	4b89      	ldr	r3, [pc, #548]	; (1f4a0 <_dtoa_r+0x608>)
   1f27a:	f7fd fa9d 	bl	1c7b8 <__aeabi_dmul>
   1f27e:	9c04      	ldr	r4, [sp, #16]
   1f280:	e9cd 0100 	strd	r0, r1, [sp]
   1f284:	4630      	mov	r0, r6
   1f286:	f7fd fa2d 	bl	1c6e4 <__aeabi_i2d>
   1f28a:	e9dd 2300 	ldrd	r2, r3, [sp]
   1f28e:	f7fd fa93 	bl	1c7b8 <__aeabi_dmul>
   1f292:	2200      	movs	r2, #0
   1f294:	4b83      	ldr	r3, [pc, #524]	; (1f4a4 <_dtoa_r+0x60c>)
   1f296:	f7fd f8d9 	bl	1c44c <__adddf3>
   1f29a:	4606      	mov	r6, r0
   1f29c:	f1a1 7750 	sub.w	r7, r1, #54525952	; 0x3400000
   1f2a0:	2c00      	cmp	r4, #0
   1f2a2:	d15c      	bne.n	1f35e <_dtoa_r+0x4c6>
   1f2a4:	2200      	movs	r2, #0
   1f2a6:	4b80      	ldr	r3, [pc, #512]	; (1f4a8 <_dtoa_r+0x610>)
   1f2a8:	e9dd 0100 	ldrd	r0, r1, [sp]
   1f2ac:	f7fd f8cc 	bl	1c448 <__aeabi_dsub>
   1f2b0:	4632      	mov	r2, r6
   1f2b2:	463b      	mov	r3, r7
   1f2b4:	e9cd 0100 	strd	r0, r1, [sp]
   1f2b8:	f7fd fd0e 	bl	1ccd8 <__aeabi_dcmpgt>
   1f2bc:	2800      	cmp	r0, #0
   1f2be:	f040 8289 	bne.w	1f7d4 <_dtoa_r+0x93c>
   1f2c2:	4632      	mov	r2, r6
   1f2c4:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
   1f2c8:	e9dd 0100 	ldrd	r0, r1, [sp]
   1f2cc:	f7fd fce6 	bl	1cc9c <__aeabi_dcmplt>
   1f2d0:	2800      	cmp	r0, #0
   1f2d2:	f040 827d 	bne.w	1f7d0 <_dtoa_r+0x938>
   1f2d6:	e9dd 340e 	ldrd	r3, r4, [sp, #56]	; 0x38
   1f2da:	e9cd 3400 	strd	r3, r4, [sp]
   1f2de:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   1f2e0:	2b00      	cmp	r3, #0
   1f2e2:	f2c0 814c 	blt.w	1f57e <_dtoa_r+0x6e6>
   1f2e6:	f1ba 0f0e 	cmp.w	sl, #14
   1f2ea:	f300 8148 	bgt.w	1f57e <_dtoa_r+0x6e6>
   1f2ee:	4b69      	ldr	r3, [pc, #420]	; (1f494 <_dtoa_r+0x5fc>)
   1f2f0:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
   1f2f4:	ed93 7b00 	vldr	d7, [r3]
   1f2f8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   1f2fa:	2b00      	cmp	r3, #0
   1f2fc:	ed8d 7b04 	vstr	d7, [sp, #16]
   1f300:	f280 80d6 	bge.w	1f4b0 <_dtoa_r+0x618>
   1f304:	f1b9 0f00 	cmp.w	r9, #0
   1f308:	f300 80d2 	bgt.w	1f4b0 <_dtoa_r+0x618>
   1f30c:	f040 825f 	bne.w	1f7ce <_dtoa_r+0x936>
   1f310:	2200      	movs	r2, #0
   1f312:	4b65      	ldr	r3, [pc, #404]	; (1f4a8 <_dtoa_r+0x610>)
   1f314:	464c      	mov	r4, r9
   1f316:	464e      	mov	r6, r9
   1f318:	ec51 0b17 	vmov	r0, r1, d7
   1f31c:	f7fd fa4c 	bl	1c7b8 <__aeabi_dmul>
   1f320:	e9dd 2300 	ldrd	r2, r3, [sp]
   1f324:	f7fd fcce 	bl	1ccc4 <__aeabi_dcmpge>
   1f328:	2800      	cmp	r0, #0
   1f32a:	f040 8238 	bne.w	1f79e <_dtoa_r+0x906>
   1f32e:	9d03      	ldr	r5, [sp, #12]
   1f330:	2331      	movs	r3, #49	; 0x31
   1f332:	f10a 0a01 	add.w	sl, sl, #1
   1f336:	f805 3b01 	strb.w	r3, [r5], #1
   1f33a:	e234      	b.n	1f7a6 <_dtoa_r+0x90e>
   1f33c:	07e7      	lsls	r7, r4, #31
   1f33e:	d505      	bpl.n	1f34c <_dtoa_r+0x4b4>
   1f340:	3601      	adds	r6, #1
   1f342:	e9d5 2300 	ldrd	r2, r3, [r5]
   1f346:	f7fd fa37 	bl	1c7b8 <__aeabi_dmul>
   1f34a:	2301      	movs	r3, #1
   1f34c:	1064      	asrs	r4, r4, #1
   1f34e:	3508      	adds	r5, #8
   1f350:	e773      	b.n	1f23a <_dtoa_r+0x3a2>
   1f352:	2602      	movs	r6, #2
   1f354:	e775      	b.n	1f242 <_dtoa_r+0x3aa>
   1f356:	f8cd a028 	str.w	sl, [sp, #40]	; 0x28
   1f35a:	464c      	mov	r4, r9
   1f35c:	e792      	b.n	1f284 <_dtoa_r+0x3ec>
   1f35e:	4b4d      	ldr	r3, [pc, #308]	; (1f494 <_dtoa_r+0x5fc>)
   1f360:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
   1f364:	e953 0102 	ldrd	r0, r1, [r3, #-8]
   1f368:	9b03      	ldr	r3, [sp, #12]
   1f36a:	441c      	add	r4, r3
   1f36c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   1f36e:	2b00      	cmp	r3, #0
   1f370:	d046      	beq.n	1f400 <_dtoa_r+0x568>
   1f372:	4602      	mov	r2, r0
   1f374:	460b      	mov	r3, r1
   1f376:	2000      	movs	r0, #0
   1f378:	494c      	ldr	r1, [pc, #304]	; (1f4ac <_dtoa_r+0x614>)
   1f37a:	f7fd fb47 	bl	1ca0c <__aeabi_ddiv>
   1f37e:	4632      	mov	r2, r6
   1f380:	463b      	mov	r3, r7
   1f382:	f7fd f861 	bl	1c448 <__aeabi_dsub>
   1f386:	9d03      	ldr	r5, [sp, #12]
   1f388:	4606      	mov	r6, r0
   1f38a:	460f      	mov	r7, r1
   1f38c:	e9dd 0100 	ldrd	r0, r1, [sp]
   1f390:	f7fd fcac 	bl	1ccec <__aeabi_d2iz>
   1f394:	9012      	str	r0, [sp, #72]	; 0x48
   1f396:	f7fd f9a5 	bl	1c6e4 <__aeabi_i2d>
   1f39a:	4602      	mov	r2, r0
   1f39c:	460b      	mov	r3, r1
   1f39e:	e9dd 0100 	ldrd	r0, r1, [sp]
   1f3a2:	f7fd f851 	bl	1c448 <__aeabi_dsub>
   1f3a6:	9b12      	ldr	r3, [sp, #72]	; 0x48
   1f3a8:	4632      	mov	r2, r6
   1f3aa:	3330      	adds	r3, #48	; 0x30
   1f3ac:	f805 3b01 	strb.w	r3, [r5], #1
   1f3b0:	463b      	mov	r3, r7
   1f3b2:	e9cd 0100 	strd	r0, r1, [sp]
   1f3b6:	f7fd fc71 	bl	1cc9c <__aeabi_dcmplt>
   1f3ba:	2800      	cmp	r0, #0
   1f3bc:	d15f      	bne.n	1f47e <_dtoa_r+0x5e6>
   1f3be:	2000      	movs	r0, #0
   1f3c0:	4936      	ldr	r1, [pc, #216]	; (1f49c <_dtoa_r+0x604>)
   1f3c2:	e9dd 2300 	ldrd	r2, r3, [sp]
   1f3c6:	f7fd f83f 	bl	1c448 <__aeabi_dsub>
   1f3ca:	4632      	mov	r2, r6
   1f3cc:	463b      	mov	r3, r7
   1f3ce:	f7fd fc65 	bl	1cc9c <__aeabi_dcmplt>
   1f3d2:	2800      	cmp	r0, #0
   1f3d4:	f040 80b2 	bne.w	1f53c <_dtoa_r+0x6a4>
   1f3d8:	42a5      	cmp	r5, r4
   1f3da:	f43f af7c 	beq.w	1f2d6 <_dtoa_r+0x43e>
   1f3de:	2200      	movs	r2, #0
   1f3e0:	4b2f      	ldr	r3, [pc, #188]	; (1f4a0 <_dtoa_r+0x608>)
   1f3e2:	4630      	mov	r0, r6
   1f3e4:	4639      	mov	r1, r7
   1f3e6:	f7fd f9e7 	bl	1c7b8 <__aeabi_dmul>
   1f3ea:	2200      	movs	r2, #0
   1f3ec:	4606      	mov	r6, r0
   1f3ee:	460f      	mov	r7, r1
   1f3f0:	4b2b      	ldr	r3, [pc, #172]	; (1f4a0 <_dtoa_r+0x608>)
   1f3f2:	e9dd 0100 	ldrd	r0, r1, [sp]
   1f3f6:	f7fd f9df 	bl	1c7b8 <__aeabi_dmul>
   1f3fa:	e9cd 0100 	strd	r0, r1, [sp]
   1f3fe:	e7c5      	b.n	1f38c <_dtoa_r+0x4f4>
   1f400:	4632      	mov	r2, r6
   1f402:	463b      	mov	r3, r7
   1f404:	f7fd f9d8 	bl	1c7b8 <__aeabi_dmul>
   1f408:	4625      	mov	r5, r4
   1f40a:	9e03      	ldr	r6, [sp, #12]
   1f40c:	e9cd 0112 	strd	r0, r1, [sp, #72]	; 0x48
   1f410:	e9dd 0100 	ldrd	r0, r1, [sp]
   1f414:	f7fd fc6a 	bl	1ccec <__aeabi_d2iz>
   1f418:	4607      	mov	r7, r0
   1f41a:	f7fd f963 	bl	1c6e4 <__aeabi_i2d>
   1f41e:	4602      	mov	r2, r0
   1f420:	3730      	adds	r7, #48	; 0x30
   1f422:	460b      	mov	r3, r1
   1f424:	e9dd 0100 	ldrd	r0, r1, [sp]
   1f428:	f7fd f80e 	bl	1c448 <__aeabi_dsub>
   1f42c:	f806 7b01 	strb.w	r7, [r6], #1
   1f430:	42a6      	cmp	r6, r4
   1f432:	f04f 0200 	mov.w	r2, #0
   1f436:	e9cd 0100 	strd	r0, r1, [sp]
   1f43a:	d125      	bne.n	1f488 <_dtoa_r+0x5f0>
   1f43c:	4b1b      	ldr	r3, [pc, #108]	; (1f4ac <_dtoa_r+0x614>)
   1f43e:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
   1f442:	f7fd f803 	bl	1c44c <__adddf3>
   1f446:	4602      	mov	r2, r0
   1f448:	460b      	mov	r3, r1
   1f44a:	e9dd 0100 	ldrd	r0, r1, [sp]
   1f44e:	f7fd fc43 	bl	1ccd8 <__aeabi_dcmpgt>
   1f452:	2800      	cmp	r0, #0
   1f454:	d172      	bne.n	1f53c <_dtoa_r+0x6a4>
   1f456:	2000      	movs	r0, #0
   1f458:	4914      	ldr	r1, [pc, #80]	; (1f4ac <_dtoa_r+0x614>)
   1f45a:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
   1f45e:	f7fc fff3 	bl	1c448 <__aeabi_dsub>
   1f462:	4602      	mov	r2, r0
   1f464:	460b      	mov	r3, r1
   1f466:	e9dd 0100 	ldrd	r0, r1, [sp]
   1f46a:	f7fd fc17 	bl	1cc9c <__aeabi_dcmplt>
   1f46e:	2800      	cmp	r0, #0
   1f470:	f43f af31 	beq.w	1f2d6 <_dtoa_r+0x43e>
   1f474:	f815 3c01 	ldrb.w	r3, [r5, #-1]
   1f478:	1e6a      	subs	r2, r5, #1
   1f47a:	2b30      	cmp	r3, #48	; 0x30
   1f47c:	d002      	beq.n	1f484 <_dtoa_r+0x5ec>
   1f47e:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
   1f482:	e049      	b.n	1f518 <_dtoa_r+0x680>
   1f484:	4615      	mov	r5, r2
   1f486:	e7f5      	b.n	1f474 <_dtoa_r+0x5dc>
   1f488:	4b05      	ldr	r3, [pc, #20]	; (1f4a0 <_dtoa_r+0x608>)
   1f48a:	f7fd f995 	bl	1c7b8 <__aeabi_dmul>
   1f48e:	e9cd 0100 	strd	r0, r1, [sp]
   1f492:	e7bd      	b.n	1f410 <_dtoa_r+0x578>
   1f494:	000461a0 	.word	0x000461a0
   1f498:	00046178 	.word	0x00046178
   1f49c:	3ff00000 	.word	0x3ff00000
   1f4a0:	40240000 	.word	0x40240000
   1f4a4:	401c0000 	.word	0x401c0000
   1f4a8:	40140000 	.word	0x40140000
   1f4ac:	3fe00000 	.word	0x3fe00000
   1f4b0:	e9dd 6700 	ldrd	r6, r7, [sp]
   1f4b4:	9d03      	ldr	r5, [sp, #12]
   1f4b6:	4630      	mov	r0, r6
   1f4b8:	4639      	mov	r1, r7
   1f4ba:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   1f4be:	f7fd faa5 	bl	1ca0c <__aeabi_ddiv>
   1f4c2:	f7fd fc13 	bl	1ccec <__aeabi_d2iz>
   1f4c6:	4604      	mov	r4, r0
   1f4c8:	f7fd f90c 	bl	1c6e4 <__aeabi_i2d>
   1f4cc:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   1f4d0:	f7fd f972 	bl	1c7b8 <__aeabi_dmul>
   1f4d4:	4602      	mov	r2, r0
   1f4d6:	4630      	mov	r0, r6
   1f4d8:	f104 0630 	add.w	r6, r4, #48	; 0x30
   1f4dc:	460b      	mov	r3, r1
   1f4de:	4639      	mov	r1, r7
   1f4e0:	f7fc ffb2 	bl	1c448 <__aeabi_dsub>
   1f4e4:	f805 6b01 	strb.w	r6, [r5], #1
   1f4e8:	9e03      	ldr	r6, [sp, #12]
   1f4ea:	4602      	mov	r2, r0
   1f4ec:	460b      	mov	r3, r1
   1f4ee:	1bae      	subs	r6, r5, r6
   1f4f0:	45b1      	cmp	r9, r6
   1f4f2:	d137      	bne.n	1f564 <_dtoa_r+0x6cc>
   1f4f4:	f7fc ffaa 	bl	1c44c <__adddf3>
   1f4f8:	4606      	mov	r6, r0
   1f4fa:	460f      	mov	r7, r1
   1f4fc:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   1f500:	f7fd fbea 	bl	1ccd8 <__aeabi_dcmpgt>
   1f504:	b9c0      	cbnz	r0, 1f538 <_dtoa_r+0x6a0>
   1f506:	4630      	mov	r0, r6
   1f508:	4639      	mov	r1, r7
   1f50a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   1f50e:	f7fd fbbb 	bl	1cc88 <__aeabi_dcmpeq>
   1f512:	b108      	cbz	r0, 1f518 <_dtoa_r+0x680>
   1f514:	07e1      	lsls	r1, r4, #31
   1f516:	d40f      	bmi.n	1f538 <_dtoa_r+0x6a0>
   1f518:	4641      	mov	r1, r8
   1f51a:	4658      	mov	r0, fp
   1f51c:	f025 ff94 	bl	45448 <_Bfree>
   1f520:	2300      	movs	r3, #0
   1f522:	9a14      	ldr	r2, [sp, #80]	; 0x50
   1f524:	702b      	strb	r3, [r5, #0]
   1f526:	f10a 0301 	add.w	r3, sl, #1
   1f52a:	6013      	str	r3, [r2, #0]
   1f52c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
   1f52e:	2b00      	cmp	r3, #0
   1f530:	f43f acfb 	beq.w	1ef2a <_dtoa_r+0x92>
   1f534:	601d      	str	r5, [r3, #0]
   1f536:	e4f8      	b.n	1ef2a <_dtoa_r+0x92>
   1f538:	f8cd a028 	str.w	sl, [sp, #40]	; 0x28
   1f53c:	f815 2c01 	ldrb.w	r2, [r5, #-1]
   1f540:	1e6b      	subs	r3, r5, #1
   1f542:	2a39      	cmp	r2, #57	; 0x39
   1f544:	d108      	bne.n	1f558 <_dtoa_r+0x6c0>
   1f546:	9a03      	ldr	r2, [sp, #12]
   1f548:	429a      	cmp	r2, r3
   1f54a:	d109      	bne.n	1f560 <_dtoa_r+0x6c8>
   1f54c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   1f54e:	9903      	ldr	r1, [sp, #12]
   1f550:	3201      	adds	r2, #1
   1f552:	920a      	str	r2, [sp, #40]	; 0x28
   1f554:	2230      	movs	r2, #48	; 0x30
   1f556:	700a      	strb	r2, [r1, #0]
   1f558:	781a      	ldrb	r2, [r3, #0]
   1f55a:	3201      	adds	r2, #1
   1f55c:	701a      	strb	r2, [r3, #0]
   1f55e:	e78e      	b.n	1f47e <_dtoa_r+0x5e6>
   1f560:	461d      	mov	r5, r3
   1f562:	e7eb      	b.n	1f53c <_dtoa_r+0x6a4>
   1f564:	2200      	movs	r2, #0
   1f566:	4b9d      	ldr	r3, [pc, #628]	; (1f7dc <_dtoa_r+0x944>)
   1f568:	f7fd f926 	bl	1c7b8 <__aeabi_dmul>
   1f56c:	2200      	movs	r2, #0
   1f56e:	2300      	movs	r3, #0
   1f570:	4606      	mov	r6, r0
   1f572:	460f      	mov	r7, r1
   1f574:	f7fd fb88 	bl	1cc88 <__aeabi_dcmpeq>
   1f578:	2800      	cmp	r0, #0
   1f57a:	d09c      	beq.n	1f4b6 <_dtoa_r+0x61e>
   1f57c:	e7cc      	b.n	1f518 <_dtoa_r+0x680>
   1f57e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   1f580:	2a00      	cmp	r2, #0
   1f582:	f000 80cb 	beq.w	1f71c <_dtoa_r+0x884>
   1f586:	9a08      	ldr	r2, [sp, #32]
   1f588:	2a01      	cmp	r2, #1
   1f58a:	f300 80ae 	bgt.w	1f6ea <_dtoa_r+0x852>
   1f58e:	9a15      	ldr	r2, [sp, #84]	; 0x54
   1f590:	2a00      	cmp	r2, #0
   1f592:	f000 80a6 	beq.w	1f6e2 <_dtoa_r+0x84a>
   1f596:	f203 4333 	addw	r3, r3, #1075	; 0x433
   1f59a:	9c09      	ldr	r4, [sp, #36]	; 0x24
   1f59c:	9d06      	ldr	r5, [sp, #24]
   1f59e:	9a06      	ldr	r2, [sp, #24]
   1f5a0:	2101      	movs	r1, #1
   1f5a2:	4658      	mov	r0, fp
   1f5a4:	441a      	add	r2, r3
   1f5a6:	9206      	str	r2, [sp, #24]
   1f5a8:	9a07      	ldr	r2, [sp, #28]
   1f5aa:	441a      	add	r2, r3
   1f5ac:	9207      	str	r2, [sp, #28]
   1f5ae:	f025 ffef 	bl	45590 <__i2b>
   1f5b2:	4606      	mov	r6, r0
   1f5b4:	2d00      	cmp	r5, #0
   1f5b6:	dd0c      	ble.n	1f5d2 <_dtoa_r+0x73a>
   1f5b8:	9b07      	ldr	r3, [sp, #28]
   1f5ba:	2b00      	cmp	r3, #0
   1f5bc:	dd09      	ble.n	1f5d2 <_dtoa_r+0x73a>
   1f5be:	42ab      	cmp	r3, r5
   1f5c0:	9a06      	ldr	r2, [sp, #24]
   1f5c2:	bfa8      	it	ge
   1f5c4:	462b      	movge	r3, r5
   1f5c6:	1ad2      	subs	r2, r2, r3
   1f5c8:	1aed      	subs	r5, r5, r3
   1f5ca:	9206      	str	r2, [sp, #24]
   1f5cc:	9a07      	ldr	r2, [sp, #28]
   1f5ce:	1ad3      	subs	r3, r2, r3
   1f5d0:	9307      	str	r3, [sp, #28]
   1f5d2:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1f5d4:	b1f3      	cbz	r3, 1f614 <_dtoa_r+0x77c>
   1f5d6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   1f5d8:	2b00      	cmp	r3, #0
   1f5da:	f000 80a3 	beq.w	1f724 <_dtoa_r+0x88c>
   1f5de:	2c00      	cmp	r4, #0
   1f5e0:	dd10      	ble.n	1f604 <_dtoa_r+0x76c>
   1f5e2:	4631      	mov	r1, r6
   1f5e4:	4622      	mov	r2, r4
   1f5e6:	4658      	mov	r0, fp
   1f5e8:	f020 fab0 	bl	3fb4c <__pow5mult>
   1f5ec:	4642      	mov	r2, r8
   1f5ee:	4601      	mov	r1, r0
   1f5f0:	4606      	mov	r6, r0
   1f5f2:	4658      	mov	r0, fp
   1f5f4:	f025 ffd5 	bl	455a2 <__multiply>
   1f5f8:	4607      	mov	r7, r0
   1f5fa:	4641      	mov	r1, r8
   1f5fc:	4658      	mov	r0, fp
   1f5fe:	46b8      	mov	r8, r7
   1f600:	f025 ff22 	bl	45448 <_Bfree>
   1f604:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1f606:	1b1a      	subs	r2, r3, r4
   1f608:	d004      	beq.n	1f614 <_dtoa_r+0x77c>
   1f60a:	4641      	mov	r1, r8
   1f60c:	4658      	mov	r0, fp
   1f60e:	f020 fa9d 	bl	3fb4c <__pow5mult>
   1f612:	4680      	mov	r8, r0
   1f614:	2101      	movs	r1, #1
   1f616:	4658      	mov	r0, fp
   1f618:	f025 ffba 	bl	45590 <__i2b>
   1f61c:	9b10      	ldr	r3, [sp, #64]	; 0x40
   1f61e:	4604      	mov	r4, r0
   1f620:	2b00      	cmp	r3, #0
   1f622:	f340 8081 	ble.w	1f728 <_dtoa_r+0x890>
   1f626:	461a      	mov	r2, r3
   1f628:	4601      	mov	r1, r0
   1f62a:	4658      	mov	r0, fp
   1f62c:	f020 fa8e 	bl	3fb4c <__pow5mult>
   1f630:	9b08      	ldr	r3, [sp, #32]
   1f632:	4604      	mov	r4, r0
   1f634:	2b01      	cmp	r3, #1
   1f636:	dd7a      	ble.n	1f72e <_dtoa_r+0x896>
   1f638:	2700      	movs	r7, #0
   1f63a:	6923      	ldr	r3, [r4, #16]
   1f63c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
   1f640:	6918      	ldr	r0, [r3, #16]
   1f642:	f025 ff55 	bl	454f0 <__hi0bits>
   1f646:	f1c0 0020 	rsb	r0, r0, #32
   1f64a:	9b07      	ldr	r3, [sp, #28]
   1f64c:	4418      	add	r0, r3
   1f64e:	f010 001f 	ands.w	r0, r0, #31
   1f652:	f000 808b 	beq.w	1f76c <_dtoa_r+0x8d4>
   1f656:	f1c0 0320 	rsb	r3, r0, #32
   1f65a:	2b04      	cmp	r3, #4
   1f65c:	f340 8084 	ble.w	1f768 <_dtoa_r+0x8d0>
   1f660:	f1c0 001c 	rsb	r0, r0, #28
   1f664:	9b06      	ldr	r3, [sp, #24]
   1f666:	4405      	add	r5, r0
   1f668:	4403      	add	r3, r0
   1f66a:	9306      	str	r3, [sp, #24]
   1f66c:	9b07      	ldr	r3, [sp, #28]
   1f66e:	4403      	add	r3, r0
   1f670:	9307      	str	r3, [sp, #28]
   1f672:	9b06      	ldr	r3, [sp, #24]
   1f674:	2b00      	cmp	r3, #0
   1f676:	dd05      	ble.n	1f684 <_dtoa_r+0x7ec>
   1f678:	4641      	mov	r1, r8
   1f67a:	461a      	mov	r2, r3
   1f67c:	4658      	mov	r0, fp
   1f67e:	f026 f81f 	bl	456c0 <__lshift>
   1f682:	4680      	mov	r8, r0
   1f684:	9b07      	ldr	r3, [sp, #28]
   1f686:	2b00      	cmp	r3, #0
   1f688:	dd05      	ble.n	1f696 <_dtoa_r+0x7fe>
   1f68a:	4621      	mov	r1, r4
   1f68c:	461a      	mov	r2, r3
   1f68e:	4658      	mov	r0, fp
   1f690:	f026 f816 	bl	456c0 <__lshift>
   1f694:	4604      	mov	r4, r0
   1f696:	9b11      	ldr	r3, [sp, #68]	; 0x44
   1f698:	2b00      	cmp	r3, #0
   1f69a:	d069      	beq.n	1f770 <_dtoa_r+0x8d8>
   1f69c:	4621      	mov	r1, r4
   1f69e:	4640      	mov	r0, r8
   1f6a0:	f026 f861 	bl	45766 <__mcmp>
   1f6a4:	2800      	cmp	r0, #0
   1f6a6:	da63      	bge.n	1f770 <_dtoa_r+0x8d8>
   1f6a8:	2300      	movs	r3, #0
   1f6aa:	4641      	mov	r1, r8
   1f6ac:	220a      	movs	r2, #10
   1f6ae:	4658      	mov	r0, fp
   1f6b0:	f025 fee1 	bl	45476 <__multadd>
   1f6b4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   1f6b6:	f10a 3aff 	add.w	sl, sl, #4294967295
   1f6ba:	4680      	mov	r8, r0
   1f6bc:	2b00      	cmp	r3, #0
   1f6be:	f000 8179 	beq.w	1f9b4 <_dtoa_r+0xb1c>
   1f6c2:	2300      	movs	r3, #0
   1f6c4:	4631      	mov	r1, r6
   1f6c6:	220a      	movs	r2, #10
   1f6c8:	4658      	mov	r0, fp
   1f6ca:	f025 fed4 	bl	45476 <__multadd>
   1f6ce:	9b04      	ldr	r3, [sp, #16]
   1f6d0:	4606      	mov	r6, r0
   1f6d2:	2b00      	cmp	r3, #0
   1f6d4:	f300 808a 	bgt.w	1f7ec <_dtoa_r+0x954>
   1f6d8:	9b08      	ldr	r3, [sp, #32]
   1f6da:	2b02      	cmp	r3, #2
   1f6dc:	f340 8086 	ble.w	1f7ec <_dtoa_r+0x954>
   1f6e0:	e04e      	b.n	1f780 <_dtoa_r+0x8e8>
   1f6e2:	9b16      	ldr	r3, [sp, #88]	; 0x58
   1f6e4:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
   1f6e8:	e757      	b.n	1f59a <_dtoa_r+0x702>
   1f6ea:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1f6ec:	f109 34ff 	add.w	r4, r9, #4294967295
   1f6f0:	42a3      	cmp	r3, r4
   1f6f2:	bfb7      	itett	lt
   1f6f4:	9b09      	ldrlt	r3, [sp, #36]	; 0x24
   1f6f6:	1b1c      	subge	r4, r3, r4
   1f6f8:	9409      	strlt	r4, [sp, #36]	; 0x24
   1f6fa:	1ae2      	sublt	r2, r4, r3
   1f6fc:	bfbf      	itttt	lt
   1f6fe:	9b10      	ldrlt	r3, [sp, #64]	; 0x40
   1f700:	2400      	movlt	r4, #0
   1f702:	189b      	addlt	r3, r3, r2
   1f704:	9310      	strlt	r3, [sp, #64]	; 0x40
   1f706:	f1b9 0f00 	cmp.w	r9, #0
   1f70a:	bfb3      	iteet	lt
   1f70c:	9b06      	ldrlt	r3, [sp, #24]
   1f70e:	464b      	movge	r3, r9
   1f710:	9d06      	ldrge	r5, [sp, #24]
   1f712:	eba3 0509 	sublt.w	r5, r3, r9
   1f716:	bfb8      	it	lt
   1f718:	2300      	movlt	r3, #0
   1f71a:	e740      	b.n	1f59e <_dtoa_r+0x706>
   1f71c:	9c09      	ldr	r4, [sp, #36]	; 0x24
   1f71e:	9d06      	ldr	r5, [sp, #24]
   1f720:	9e0c      	ldr	r6, [sp, #48]	; 0x30
   1f722:	e747      	b.n	1f5b4 <_dtoa_r+0x71c>
   1f724:	9a09      	ldr	r2, [sp, #36]	; 0x24
   1f726:	e770      	b.n	1f60a <_dtoa_r+0x772>
   1f728:	9b08      	ldr	r3, [sp, #32]
   1f72a:	2b01      	cmp	r3, #1
   1f72c:	dc18      	bgt.n	1f760 <_dtoa_r+0x8c8>
   1f72e:	9b00      	ldr	r3, [sp, #0]
   1f730:	b9b3      	cbnz	r3, 1f760 <_dtoa_r+0x8c8>
   1f732:	9b01      	ldr	r3, [sp, #4]
   1f734:	f3c3 0313 	ubfx	r3, r3, #0, #20
   1f738:	b9a3      	cbnz	r3, 1f764 <_dtoa_r+0x8cc>
   1f73a:	9b01      	ldr	r3, [sp, #4]
   1f73c:	f023 4700 	bic.w	r7, r3, #2147483648	; 0x80000000
   1f740:	0d3f      	lsrs	r7, r7, #20
   1f742:	053f      	lsls	r7, r7, #20
   1f744:	b137      	cbz	r7, 1f754 <_dtoa_r+0x8bc>
   1f746:	9b06      	ldr	r3, [sp, #24]
   1f748:	2701      	movs	r7, #1
   1f74a:	3301      	adds	r3, #1
   1f74c:	9306      	str	r3, [sp, #24]
   1f74e:	9b07      	ldr	r3, [sp, #28]
   1f750:	3301      	adds	r3, #1
   1f752:	9307      	str	r3, [sp, #28]
   1f754:	9b10      	ldr	r3, [sp, #64]	; 0x40
   1f756:	2b00      	cmp	r3, #0
   1f758:	f47f af6f 	bne.w	1f63a <_dtoa_r+0x7a2>
   1f75c:	2001      	movs	r0, #1
   1f75e:	e774      	b.n	1f64a <_dtoa_r+0x7b2>
   1f760:	2700      	movs	r7, #0
   1f762:	e7f7      	b.n	1f754 <_dtoa_r+0x8bc>
   1f764:	9f00      	ldr	r7, [sp, #0]
   1f766:	e7f5      	b.n	1f754 <_dtoa_r+0x8bc>
   1f768:	d083      	beq.n	1f672 <_dtoa_r+0x7da>
   1f76a:	4618      	mov	r0, r3
   1f76c:	301c      	adds	r0, #28
   1f76e:	e779      	b.n	1f664 <_dtoa_r+0x7cc>
   1f770:	f1b9 0f00 	cmp.w	r9, #0
   1f774:	dc34      	bgt.n	1f7e0 <_dtoa_r+0x948>
   1f776:	9b08      	ldr	r3, [sp, #32]
   1f778:	2b02      	cmp	r3, #2
   1f77a:	dd31      	ble.n	1f7e0 <_dtoa_r+0x948>
   1f77c:	f8cd 9010 	str.w	r9, [sp, #16]
   1f780:	9b04      	ldr	r3, [sp, #16]
   1f782:	b963      	cbnz	r3, 1f79e <_dtoa_r+0x906>
   1f784:	4621      	mov	r1, r4
   1f786:	2205      	movs	r2, #5
   1f788:	4658      	mov	r0, fp
   1f78a:	f025 fe74 	bl	45476 <__multadd>
   1f78e:	4601      	mov	r1, r0
   1f790:	4604      	mov	r4, r0
   1f792:	4640      	mov	r0, r8
   1f794:	f025 ffe7 	bl	45766 <__mcmp>
   1f798:	2800      	cmp	r0, #0
   1f79a:	f73f adc8 	bgt.w	1f32e <_dtoa_r+0x496>
   1f79e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   1f7a0:	9d03      	ldr	r5, [sp, #12]
   1f7a2:	ea6f 0a03 	mvn.w	sl, r3
   1f7a6:	2700      	movs	r7, #0
   1f7a8:	4621      	mov	r1, r4
   1f7aa:	4658      	mov	r0, fp
   1f7ac:	f025 fe4c 	bl	45448 <_Bfree>
   1f7b0:	2e00      	cmp	r6, #0
   1f7b2:	f43f aeb1 	beq.w	1f518 <_dtoa_r+0x680>
   1f7b6:	b12f      	cbz	r7, 1f7c4 <_dtoa_r+0x92c>
   1f7b8:	42b7      	cmp	r7, r6
   1f7ba:	d003      	beq.n	1f7c4 <_dtoa_r+0x92c>
   1f7bc:	4639      	mov	r1, r7
   1f7be:	4658      	mov	r0, fp
   1f7c0:	f025 fe42 	bl	45448 <_Bfree>
   1f7c4:	4631      	mov	r1, r6
   1f7c6:	4658      	mov	r0, fp
   1f7c8:	f025 fe3e 	bl	45448 <_Bfree>
   1f7cc:	e6a4      	b.n	1f518 <_dtoa_r+0x680>
   1f7ce:	2400      	movs	r4, #0
   1f7d0:	4626      	mov	r6, r4
   1f7d2:	e7e4      	b.n	1f79e <_dtoa_r+0x906>
   1f7d4:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
   1f7d8:	4626      	mov	r6, r4
   1f7da:	e5a8      	b.n	1f32e <_dtoa_r+0x496>
   1f7dc:	40240000 	.word	0x40240000
   1f7e0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   1f7e2:	f8cd 9010 	str.w	r9, [sp, #16]
   1f7e6:	2b00      	cmp	r3, #0
   1f7e8:	f000 80eb 	beq.w	1f9c2 <_dtoa_r+0xb2a>
   1f7ec:	2d00      	cmp	r5, #0
   1f7ee:	dd05      	ble.n	1f7fc <_dtoa_r+0x964>
   1f7f0:	4631      	mov	r1, r6
   1f7f2:	462a      	mov	r2, r5
   1f7f4:	4658      	mov	r0, fp
   1f7f6:	f025 ff63 	bl	456c0 <__lshift>
   1f7fa:	4606      	mov	r6, r0
   1f7fc:	2f00      	cmp	r7, #0
   1f7fe:	d056      	beq.n	1f8ae <_dtoa_r+0xa16>
   1f800:	6871      	ldr	r1, [r6, #4]
   1f802:	4658      	mov	r0, fp
   1f804:	f025 fdec 	bl	453e0 <_Balloc>
   1f808:	6932      	ldr	r2, [r6, #16]
   1f80a:	4605      	mov	r5, r0
   1f80c:	f106 010c 	add.w	r1, r6, #12
   1f810:	3202      	adds	r2, #2
   1f812:	300c      	adds	r0, #12
   1f814:	0092      	lsls	r2, r2, #2
   1f816:	f025 fb1b 	bl	44e50 <memcpy>
   1f81a:	2201      	movs	r2, #1
   1f81c:	4629      	mov	r1, r5
   1f81e:	4658      	mov	r0, fp
   1f820:	f025 ff4e 	bl	456c0 <__lshift>
   1f824:	9b03      	ldr	r3, [sp, #12]
   1f826:	4637      	mov	r7, r6
   1f828:	4606      	mov	r6, r0
   1f82a:	f103 0901 	add.w	r9, r3, #1
   1f82e:	e9dd 2303 	ldrd	r2, r3, [sp, #12]
   1f832:	4413      	add	r3, r2
   1f834:	9309      	str	r3, [sp, #36]	; 0x24
   1f836:	9b00      	ldr	r3, [sp, #0]
   1f838:	f003 0301 	and.w	r3, r3, #1
   1f83c:	9307      	str	r3, [sp, #28]
   1f83e:	f109 33ff 	add.w	r3, r9, #4294967295
   1f842:	4621      	mov	r1, r4
   1f844:	4640      	mov	r0, r8
   1f846:	9300      	str	r3, [sp, #0]
   1f848:	f025 fce1 	bl	4520e <quorem>
   1f84c:	4603      	mov	r3, r0
   1f84e:	9004      	str	r0, [sp, #16]
   1f850:	4639      	mov	r1, r7
   1f852:	4640      	mov	r0, r8
   1f854:	3330      	adds	r3, #48	; 0x30
   1f856:	930a      	str	r3, [sp, #40]	; 0x28
   1f858:	f025 ff85 	bl	45766 <__mcmp>
   1f85c:	4632      	mov	r2, r6
   1f85e:	9006      	str	r0, [sp, #24]
   1f860:	4621      	mov	r1, r4
   1f862:	4658      	mov	r0, fp
   1f864:	f025 ff99 	bl	4579a <__mdiff>
   1f868:	68c2      	ldr	r2, [r0, #12]
   1f86a:	4605      	mov	r5, r0
   1f86c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   1f86e:	bb02      	cbnz	r2, 1f8b2 <_dtoa_r+0xa1a>
   1f870:	4601      	mov	r1, r0
   1f872:	4640      	mov	r0, r8
   1f874:	f025 ff77 	bl	45766 <__mcmp>
   1f878:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   1f87a:	4602      	mov	r2, r0
   1f87c:	4629      	mov	r1, r5
   1f87e:	4658      	mov	r0, fp
   1f880:	920c      	str	r2, [sp, #48]	; 0x30
   1f882:	464d      	mov	r5, r9
   1f884:	930a      	str	r3, [sp, #40]	; 0x28
   1f886:	f025 fddf 	bl	45448 <_Bfree>
   1f88a:	9b08      	ldr	r3, [sp, #32]
   1f88c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   1f88e:	ea43 0102 	orr.w	r1, r3, r2
   1f892:	9b07      	ldr	r3, [sp, #28]
   1f894:	430b      	orrs	r3, r1
   1f896:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   1f898:	d10d      	bne.n	1f8b6 <_dtoa_r+0xa1e>
   1f89a:	2b39      	cmp	r3, #57	; 0x39
   1f89c:	d027      	beq.n	1f8ee <_dtoa_r+0xa56>
   1f89e:	9a06      	ldr	r2, [sp, #24]
   1f8a0:	2a00      	cmp	r2, #0
   1f8a2:	dd01      	ble.n	1f8a8 <_dtoa_r+0xa10>
   1f8a4:	9b04      	ldr	r3, [sp, #16]
   1f8a6:	3331      	adds	r3, #49	; 0x31
   1f8a8:	9a00      	ldr	r2, [sp, #0]
   1f8aa:	7013      	strb	r3, [r2, #0]
   1f8ac:	e77c      	b.n	1f7a8 <_dtoa_r+0x910>
   1f8ae:	4630      	mov	r0, r6
   1f8b0:	e7b8      	b.n	1f824 <_dtoa_r+0x98c>
   1f8b2:	2201      	movs	r2, #1
   1f8b4:	e7e2      	b.n	1f87c <_dtoa_r+0x9e4>
   1f8b6:	9906      	ldr	r1, [sp, #24]
   1f8b8:	2900      	cmp	r1, #0
   1f8ba:	db04      	blt.n	1f8c6 <_dtoa_r+0xa2e>
   1f8bc:	9808      	ldr	r0, [sp, #32]
   1f8be:	4301      	orrs	r1, r0
   1f8c0:	9807      	ldr	r0, [sp, #28]
   1f8c2:	4301      	orrs	r1, r0
   1f8c4:	d11d      	bne.n	1f902 <_dtoa_r+0xa6a>
   1f8c6:	2a00      	cmp	r2, #0
   1f8c8:	ddee      	ble.n	1f8a8 <_dtoa_r+0xa10>
   1f8ca:	4641      	mov	r1, r8
   1f8cc:	2201      	movs	r2, #1
   1f8ce:	4658      	mov	r0, fp
   1f8d0:	9306      	str	r3, [sp, #24]
   1f8d2:	f025 fef5 	bl	456c0 <__lshift>
   1f8d6:	4621      	mov	r1, r4
   1f8d8:	4680      	mov	r8, r0
   1f8da:	f025 ff44 	bl	45766 <__mcmp>
   1f8de:	2800      	cmp	r0, #0
   1f8e0:	9b06      	ldr	r3, [sp, #24]
   1f8e2:	dc02      	bgt.n	1f8ea <_dtoa_r+0xa52>
   1f8e4:	d1e0      	bne.n	1f8a8 <_dtoa_r+0xa10>
   1f8e6:	07da      	lsls	r2, r3, #31
   1f8e8:	d5de      	bpl.n	1f8a8 <_dtoa_r+0xa10>
   1f8ea:	2b39      	cmp	r3, #57	; 0x39
   1f8ec:	d1da      	bne.n	1f8a4 <_dtoa_r+0xa0c>
   1f8ee:	2339      	movs	r3, #57	; 0x39
   1f8f0:	9a00      	ldr	r2, [sp, #0]
   1f8f2:	7013      	strb	r3, [r2, #0]
   1f8f4:	f815 3c01 	ldrb.w	r3, [r5, #-1]
   1f8f8:	1e6a      	subs	r2, r5, #1
   1f8fa:	2b39      	cmp	r3, #57	; 0x39
   1f8fc:	d046      	beq.n	1f98c <_dtoa_r+0xaf4>
   1f8fe:	3301      	adds	r3, #1
   1f900:	e7d3      	b.n	1f8aa <_dtoa_r+0xa12>
   1f902:	2a00      	cmp	r2, #0
   1f904:	dd03      	ble.n	1f90e <_dtoa_r+0xa76>
   1f906:	2b39      	cmp	r3, #57	; 0x39
   1f908:	d0f1      	beq.n	1f8ee <_dtoa_r+0xa56>
   1f90a:	3301      	adds	r3, #1
   1f90c:	e7cc      	b.n	1f8a8 <_dtoa_r+0xa10>
   1f90e:	9a09      	ldr	r2, [sp, #36]	; 0x24
   1f910:	f809 3c01 	strb.w	r3, [r9, #-1]
   1f914:	4591      	cmp	r9, r2
   1f916:	d021      	beq.n	1f95c <_dtoa_r+0xac4>
   1f918:	4641      	mov	r1, r8
   1f91a:	2300      	movs	r3, #0
   1f91c:	220a      	movs	r2, #10
   1f91e:	4658      	mov	r0, fp
   1f920:	f025 fda9 	bl	45476 <__multadd>
   1f924:	42b7      	cmp	r7, r6
   1f926:	4680      	mov	r8, r0
   1f928:	f04f 0300 	mov.w	r3, #0
   1f92c:	f04f 020a 	mov.w	r2, #10
   1f930:	4639      	mov	r1, r7
   1f932:	4658      	mov	r0, fp
   1f934:	d106      	bne.n	1f944 <_dtoa_r+0xaac>
   1f936:	f025 fd9e 	bl	45476 <__multadd>
   1f93a:	4607      	mov	r7, r0
   1f93c:	4606      	mov	r6, r0
   1f93e:	f109 0901 	add.w	r9, r9, #1
   1f942:	e77c      	b.n	1f83e <_dtoa_r+0x9a6>
   1f944:	f025 fd97 	bl	45476 <__multadd>
   1f948:	4631      	mov	r1, r6
   1f94a:	4607      	mov	r7, r0
   1f94c:	2300      	movs	r3, #0
   1f94e:	220a      	movs	r2, #10
   1f950:	4658      	mov	r0, fp
   1f952:	f025 fd90 	bl	45476 <__multadd>
   1f956:	4606      	mov	r6, r0
   1f958:	e7f1      	b.n	1f93e <_dtoa_r+0xaa6>
   1f95a:	2700      	movs	r7, #0
   1f95c:	4641      	mov	r1, r8
   1f95e:	2201      	movs	r2, #1
   1f960:	4658      	mov	r0, fp
   1f962:	9300      	str	r3, [sp, #0]
   1f964:	f025 feac 	bl	456c0 <__lshift>
   1f968:	4621      	mov	r1, r4
   1f96a:	4680      	mov	r8, r0
   1f96c:	f025 fefb 	bl	45766 <__mcmp>
   1f970:	2800      	cmp	r0, #0
   1f972:	dcbf      	bgt.n	1f8f4 <_dtoa_r+0xa5c>
   1f974:	d102      	bne.n	1f97c <_dtoa_r+0xae4>
   1f976:	9b00      	ldr	r3, [sp, #0]
   1f978:	07db      	lsls	r3, r3, #31
   1f97a:	d4bb      	bmi.n	1f8f4 <_dtoa_r+0xa5c>
   1f97c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
   1f980:	1e6a      	subs	r2, r5, #1
   1f982:	2b30      	cmp	r3, #48	; 0x30
   1f984:	f47f af10 	bne.w	1f7a8 <_dtoa_r+0x910>
   1f988:	4615      	mov	r5, r2
   1f98a:	e7f7      	b.n	1f97c <_dtoa_r+0xae4>
   1f98c:	9b03      	ldr	r3, [sp, #12]
   1f98e:	4293      	cmp	r3, r2
   1f990:	d104      	bne.n	1f99c <_dtoa_r+0xb04>
   1f992:	f10a 0a01 	add.w	sl, sl, #1
   1f996:	2331      	movs	r3, #49	; 0x31
   1f998:	9a03      	ldr	r2, [sp, #12]
   1f99a:	e786      	b.n	1f8aa <_dtoa_r+0xa12>
   1f99c:	4615      	mov	r5, r2
   1f99e:	e7a9      	b.n	1f8f4 <_dtoa_r+0xa5c>
   1f9a0:	4b13      	ldr	r3, [pc, #76]	; (1f9f0 <_dtoa_r+0xb58>)
   1f9a2:	f7ff bae1 	b.w	1ef68 <_dtoa_r+0xd0>
   1f9a6:	9b23      	ldr	r3, [sp, #140]	; 0x8c
   1f9a8:	2b00      	cmp	r3, #0
   1f9aa:	f47f aab9 	bne.w	1ef20 <_dtoa_r+0x88>
   1f9ae:	4b11      	ldr	r3, [pc, #68]	; (1f9f4 <_dtoa_r+0xb5c>)
   1f9b0:	f7ff bada 	b.w	1ef68 <_dtoa_r+0xd0>
   1f9b4:	9b04      	ldr	r3, [sp, #16]
   1f9b6:	2b00      	cmp	r3, #0
   1f9b8:	dc03      	bgt.n	1f9c2 <_dtoa_r+0xb2a>
   1f9ba:	9b08      	ldr	r3, [sp, #32]
   1f9bc:	2b02      	cmp	r3, #2
   1f9be:	f73f aedf 	bgt.w	1f780 <_dtoa_r+0x8e8>
   1f9c2:	9d03      	ldr	r5, [sp, #12]
   1f9c4:	4621      	mov	r1, r4
   1f9c6:	4640      	mov	r0, r8
   1f9c8:	f025 fc21 	bl	4520e <quorem>
   1f9cc:	9a03      	ldr	r2, [sp, #12]
   1f9ce:	f100 0330 	add.w	r3, r0, #48	; 0x30
   1f9d2:	9904      	ldr	r1, [sp, #16]
   1f9d4:	f805 3b01 	strb.w	r3, [r5], #1
   1f9d8:	1aaa      	subs	r2, r5, r2
   1f9da:	4291      	cmp	r1, r2
   1f9dc:	ddbd      	ble.n	1f95a <_dtoa_r+0xac2>
   1f9de:	4641      	mov	r1, r8
   1f9e0:	2300      	movs	r3, #0
   1f9e2:	220a      	movs	r2, #10
   1f9e4:	4658      	mov	r0, fp
   1f9e6:	f025 fd46 	bl	45476 <__multadd>
   1f9ea:	4680      	mov	r8, r0
   1f9ec:	e7ea      	b.n	1f9c4 <_dtoa_r+0xb2c>
   1f9ee:	bf00      	nop
   1f9f0:	0004d39b 	.word	0x0004d39b
   1f9f4:	0004d9c4 	.word	0x0004d9c4

0001f9f8 <rd_client_event>:
}

static void rd_client_event(struct lwm2m_ctx *client,
			    enum lwm2m_rd_client_event client_event)
{
	switch (client_event) {
   1f9f8:	3901      	subs	r1, #1
   1f9fa:	2908      	cmp	r1, #8
   1f9fc:	f200 80ac 	bhi.w	1fb58 <rd_client_event+0x160>
   1fa00:	e8df f001 	tbb	[pc, r1]
   1fa04:	3e2c1905 	.word	0x3e2c1905
   1fa08:	86746250 	.word	0x86746250
   1fa0c:	98          	.byte	0x98
   1fa0d:	00          	.byte	0x00
	case LWM2M_RD_CLIENT_EVENT_NONE:
		/* do nothing */
		break;

	case LWM2M_RD_CLIENT_EVENT_BOOTSTRAP_REG_FAILURE:
		LOG_DBG("Bootstrap registration failure!");
   1fa0e:	4b53      	ldr	r3, [pc, #332]	; (1fb5c <rd_client_event+0x164>)
   1fa10:	681b      	ldr	r3, [r3, #0]
   1fa12:	075b      	lsls	r3, r3, #29
   1fa14:	f140 80a0 	bpl.w	1fb58 <rd_client_event+0x160>
   1fa18:	2304      	movs	r3, #4
   1fa1a:	f04f 0200 	mov.w	r2, #0
   1fa1e:	4950      	ldr	r1, [pc, #320]	; (1fb60 <rd_client_event+0x168>)
   1fa20:	f363 0207 	bfi	r2, r3, #0, #8
   1fa24:	4b4f      	ldr	r3, [pc, #316]	; (1fb64 <rd_client_event+0x16c>)
   1fa26:	4850      	ldr	r0, [pc, #320]	; (1fb68 <rd_client_event+0x170>)
   1fa28:	1a5b      	subs	r3, r3, r1
   1fa2a:	08db      	lsrs	r3, r3, #3
   1fa2c:	494f      	ldr	r1, [pc, #316]	; (1fb6c <rd_client_event+0x174>)
   1fa2e:	f363 128f 	bfi	r2, r3, #6, #10
	case LWM2M_RD_CLIENT_EVENT_DEREGISTER_FAILURE:
		LOG_DBG("Deregister failure!");
		break;

	case LWM2M_RD_CLIENT_EVENT_DISCONNECT:
		LOG_DBG("Disconnected");
   1fa32:	f021 b813 	b.w	40a5c <log_1>
		LOG_DBG("Bootstrap registration complete");
   1fa36:	4b49      	ldr	r3, [pc, #292]	; (1fb5c <rd_client_event+0x164>)
   1fa38:	681b      	ldr	r3, [r3, #0]
   1fa3a:	0758      	lsls	r0, r3, #29
   1fa3c:	f140 808c 	bpl.w	1fb58 <rd_client_event+0x160>
   1fa40:	2304      	movs	r3, #4
   1fa42:	f04f 0200 	mov.w	r2, #0
   1fa46:	4946      	ldr	r1, [pc, #280]	; (1fb60 <rd_client_event+0x168>)
   1fa48:	f363 0207 	bfi	r2, r3, #0, #8
   1fa4c:	4b45      	ldr	r3, [pc, #276]	; (1fb64 <rd_client_event+0x16c>)
   1fa4e:	4848      	ldr	r0, [pc, #288]	; (1fb70 <rd_client_event+0x178>)
   1fa50:	1a5b      	subs	r3, r3, r1
   1fa52:	08db      	lsrs	r3, r3, #3
   1fa54:	f363 128f 	bfi	r2, r3, #6, #10
   1fa58:	4944      	ldr	r1, [pc, #272]	; (1fb6c <rd_client_event+0x174>)
   1fa5a:	e7ea      	b.n	1fa32 <rd_client_event+0x3a>
		LOG_DBG("Bootstrap transfer complete");
   1fa5c:	4b3f      	ldr	r3, [pc, #252]	; (1fb5c <rd_client_event+0x164>)
   1fa5e:	681b      	ldr	r3, [r3, #0]
   1fa60:	0759      	lsls	r1, r3, #29
   1fa62:	d579      	bpl.n	1fb58 <rd_client_event+0x160>
   1fa64:	2304      	movs	r3, #4
   1fa66:	f04f 0200 	mov.w	r2, #0
   1fa6a:	493d      	ldr	r1, [pc, #244]	; (1fb60 <rd_client_event+0x168>)
   1fa6c:	f363 0207 	bfi	r2, r3, #0, #8
   1fa70:	4b3c      	ldr	r3, [pc, #240]	; (1fb64 <rd_client_event+0x16c>)
   1fa72:	4840      	ldr	r0, [pc, #256]	; (1fb74 <rd_client_event+0x17c>)
   1fa74:	1a5b      	subs	r3, r3, r1
   1fa76:	08db      	lsrs	r3, r3, #3
   1fa78:	f363 128f 	bfi	r2, r3, #6, #10
   1fa7c:	493b      	ldr	r1, [pc, #236]	; (1fb6c <rd_client_event+0x174>)
   1fa7e:	e7d8      	b.n	1fa32 <rd_client_event+0x3a>
		LOG_DBG("Registration failure!");
   1fa80:	4b36      	ldr	r3, [pc, #216]	; (1fb5c <rd_client_event+0x164>)
   1fa82:	681b      	ldr	r3, [r3, #0]
   1fa84:	075a      	lsls	r2, r3, #29
   1fa86:	d567      	bpl.n	1fb58 <rd_client_event+0x160>
   1fa88:	2304      	movs	r3, #4
   1fa8a:	f04f 0200 	mov.w	r2, #0
   1fa8e:	4934      	ldr	r1, [pc, #208]	; (1fb60 <rd_client_event+0x168>)
   1fa90:	f363 0207 	bfi	r2, r3, #0, #8
   1fa94:	4b33      	ldr	r3, [pc, #204]	; (1fb64 <rd_client_event+0x16c>)
   1fa96:	4838      	ldr	r0, [pc, #224]	; (1fb78 <rd_client_event+0x180>)
   1fa98:	1a5b      	subs	r3, r3, r1
   1fa9a:	08db      	lsrs	r3, r3, #3
   1fa9c:	f363 128f 	bfi	r2, r3, #6, #10
   1faa0:	4932      	ldr	r1, [pc, #200]	; (1fb6c <rd_client_event+0x174>)
   1faa2:	e7c6      	b.n	1fa32 <rd_client_event+0x3a>
		LOG_DBG("Registration complete");
   1faa4:	4b2d      	ldr	r3, [pc, #180]	; (1fb5c <rd_client_event+0x164>)
   1faa6:	681b      	ldr	r3, [r3, #0]
   1faa8:	075b      	lsls	r3, r3, #29
   1faaa:	d555      	bpl.n	1fb58 <rd_client_event+0x160>
   1faac:	2304      	movs	r3, #4
   1faae:	f04f 0200 	mov.w	r2, #0
   1fab2:	492b      	ldr	r1, [pc, #172]	; (1fb60 <rd_client_event+0x168>)
   1fab4:	f363 0207 	bfi	r2, r3, #0, #8
   1fab8:	4b2a      	ldr	r3, [pc, #168]	; (1fb64 <rd_client_event+0x16c>)
   1faba:	4830      	ldr	r0, [pc, #192]	; (1fb7c <rd_client_event+0x184>)
   1fabc:	1a5b      	subs	r3, r3, r1
   1fabe:	08db      	lsrs	r3, r3, #3
   1fac0:	f363 128f 	bfi	r2, r3, #6, #10
   1fac4:	4929      	ldr	r1, [pc, #164]	; (1fb6c <rd_client_event+0x174>)
   1fac6:	e7b4      	b.n	1fa32 <rd_client_event+0x3a>
		LOG_DBG("Registration update failure!");
   1fac8:	4b24      	ldr	r3, [pc, #144]	; (1fb5c <rd_client_event+0x164>)
   1faca:	681b      	ldr	r3, [r3, #0]
   1facc:	0758      	lsls	r0, r3, #29
   1face:	d543      	bpl.n	1fb58 <rd_client_event+0x160>
   1fad0:	2304      	movs	r3, #4
   1fad2:	f04f 0200 	mov.w	r2, #0
   1fad6:	4922      	ldr	r1, [pc, #136]	; (1fb60 <rd_client_event+0x168>)
   1fad8:	f363 0207 	bfi	r2, r3, #0, #8
   1fadc:	4b21      	ldr	r3, [pc, #132]	; (1fb64 <rd_client_event+0x16c>)
   1fade:	4828      	ldr	r0, [pc, #160]	; (1fb80 <rd_client_event+0x188>)
   1fae0:	1a5b      	subs	r3, r3, r1
   1fae2:	08db      	lsrs	r3, r3, #3
   1fae4:	f363 128f 	bfi	r2, r3, #6, #10
   1fae8:	4920      	ldr	r1, [pc, #128]	; (1fb6c <rd_client_event+0x174>)
   1faea:	e7a2      	b.n	1fa32 <rd_client_event+0x3a>
		LOG_DBG("Registration update complete");
   1faec:	4b1b      	ldr	r3, [pc, #108]	; (1fb5c <rd_client_event+0x164>)
   1faee:	681b      	ldr	r3, [r3, #0]
   1faf0:	0759      	lsls	r1, r3, #29
   1faf2:	d531      	bpl.n	1fb58 <rd_client_event+0x160>
   1faf4:	2304      	movs	r3, #4
   1faf6:	f04f 0200 	mov.w	r2, #0
   1fafa:	4919      	ldr	r1, [pc, #100]	; (1fb60 <rd_client_event+0x168>)
   1fafc:	f363 0207 	bfi	r2, r3, #0, #8
   1fb00:	4b18      	ldr	r3, [pc, #96]	; (1fb64 <rd_client_event+0x16c>)
   1fb02:	4820      	ldr	r0, [pc, #128]	; (1fb84 <rd_client_event+0x18c>)
   1fb04:	1a5b      	subs	r3, r3, r1
   1fb06:	08db      	lsrs	r3, r3, #3
   1fb08:	f363 128f 	bfi	r2, r3, #6, #10
   1fb0c:	4917      	ldr	r1, [pc, #92]	; (1fb6c <rd_client_event+0x174>)
   1fb0e:	e790      	b.n	1fa32 <rd_client_event+0x3a>
		LOG_DBG("Deregister failure!");
   1fb10:	4b12      	ldr	r3, [pc, #72]	; (1fb5c <rd_client_event+0x164>)
   1fb12:	681b      	ldr	r3, [r3, #0]
   1fb14:	075a      	lsls	r2, r3, #29
   1fb16:	d51f      	bpl.n	1fb58 <rd_client_event+0x160>
   1fb18:	2304      	movs	r3, #4
   1fb1a:	f04f 0200 	mov.w	r2, #0
   1fb1e:	4910      	ldr	r1, [pc, #64]	; (1fb60 <rd_client_event+0x168>)
   1fb20:	f363 0207 	bfi	r2, r3, #0, #8
   1fb24:	4b0f      	ldr	r3, [pc, #60]	; (1fb64 <rd_client_event+0x16c>)
   1fb26:	4818      	ldr	r0, [pc, #96]	; (1fb88 <rd_client_event+0x190>)
   1fb28:	1a5b      	subs	r3, r3, r1
   1fb2a:	08db      	lsrs	r3, r3, #3
   1fb2c:	f363 128f 	bfi	r2, r3, #6, #10
   1fb30:	490e      	ldr	r1, [pc, #56]	; (1fb6c <rd_client_event+0x174>)
   1fb32:	e77e      	b.n	1fa32 <rd_client_event+0x3a>
		LOG_DBG("Disconnected");
   1fb34:	4b09      	ldr	r3, [pc, #36]	; (1fb5c <rd_client_event+0x164>)
   1fb36:	681b      	ldr	r3, [r3, #0]
   1fb38:	075b      	lsls	r3, r3, #29
   1fb3a:	d50d      	bpl.n	1fb58 <rd_client_event+0x160>
   1fb3c:	2304      	movs	r3, #4
   1fb3e:	f04f 0200 	mov.w	r2, #0
   1fb42:	4907      	ldr	r1, [pc, #28]	; (1fb60 <rd_client_event+0x168>)
   1fb44:	f363 0207 	bfi	r2, r3, #0, #8
   1fb48:	4b06      	ldr	r3, [pc, #24]	; (1fb64 <rd_client_event+0x16c>)
   1fb4a:	4810      	ldr	r0, [pc, #64]	; (1fb8c <rd_client_event+0x194>)
   1fb4c:	1a5b      	subs	r3, r3, r1
   1fb4e:	08db      	lsrs	r3, r3, #3
   1fb50:	f363 128f 	bfi	r2, r3, #6, #10
   1fb54:	4905      	ldr	r1, [pc, #20]	; (1fb6c <rd_client_event+0x174>)
   1fb56:	e76c      	b.n	1fa32 <rd_client_event+0x3a>
		break;

	}
}
   1fb58:	4770      	bx	lr
   1fb5a:	bf00      	nop
   1fb5c:	20032a94 	.word	0x20032a94
   1fb60:	00045f08 	.word	0x00045f08
   1fb64:	00045f28 	.word	0x00045f28
   1fb68:	000476ce 	.word	0x000476ce
   1fb6c:	000474fb 	.word	0x000474fb
   1fb70:	000476f2 	.word	0x000476f2
   1fb74:	00047716 	.word	0x00047716
   1fb78:	00047736 	.word	0x00047736
   1fb7c:	00047750 	.word	0x00047750
   1fb80:	0004776a 	.word	0x0004776a
   1fb84:	0004778b 	.word	0x0004778b
   1fb88:	000477ac 	.word	0x000477ac
   1fb8c:	000477c4 	.word	0x000477c4

0001fb90 <ui_evt_handler>:
{
   1fb90:	b510      	push	{r4, lr}
	if (!evt) {
   1fb92:	4604      	mov	r4, r0
   1fb94:	b1e0      	cbz	r0, 1fbd0 <ui_evt_handler+0x40>
	LOG_DBG("Event: %d", evt->button);
   1fb96:	4b0f      	ldr	r3, [pc, #60]	; (1fbd4 <ui_evt_handler+0x44>)
   1fb98:	681b      	ldr	r3, [r3, #0]
   1fb9a:	075b      	lsls	r3, r3, #29
   1fb9c:	d50f      	bpl.n	1fbbe <ui_evt_handler+0x2e>
   1fb9e:	2204      	movs	r2, #4
   1fba0:	f04f 0300 	mov.w	r3, #0
   1fba4:	490c      	ldr	r1, [pc, #48]	; (1fbd8 <ui_evt_handler+0x48>)
   1fba6:	f362 0307 	bfi	r3, r2, #0, #8
   1fbaa:	4a0c      	ldr	r2, [pc, #48]	; (1fbdc <ui_evt_handler+0x4c>)
   1fbac:	1a52      	subs	r2, r2, r1
   1fbae:	08d2      	lsrs	r2, r2, #3
   1fbb0:	f362 138f 	bfi	r3, r2, #6, #10
   1fbb4:	490a      	ldr	r1, [pc, #40]	; (1fbe0 <ui_evt_handler+0x50>)
   1fbb6:	6842      	ldr	r2, [r0, #4]
   1fbb8:	480a      	ldr	r0, [pc, #40]	; (1fbe4 <ui_evt_handler+0x54>)
   1fbba:	f020 ff63 	bl	40a84 <log_2>
	if (handle_button_events(evt) == 0) {
   1fbbe:	4620      	mov	r0, r4
   1fbc0:	f001 f970 	bl	20ea4 <handle_button_events>
   1fbc4:	b120      	cbz	r0, 1fbd0 <ui_evt_handler+0x40>
	if (handle_accel_events(evt) == 0) {
   1fbc6:	4620      	mov	r0, r4
}
   1fbc8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	if (handle_accel_events(evt) == 0) {
   1fbcc:	f020 ba4c 	b.w	40068 <handle_accel_events>
}
   1fbd0:	bd10      	pop	{r4, pc}
   1fbd2:	bf00      	nop
   1fbd4:	20032a94 	.word	0x20032a94
   1fbd8:	00045f08 	.word	0x00045f08
   1fbdc:	00045f28 	.word	0x00045f28
   1fbe0:	000474ec 	.word	0x000474ec
   1fbe4:	000477e6 	.word	0x000477e6

0001fbe8 <main>:

void main(void)
{
   1fbe8:	b5f0      	push	{r4, r5, r6, r7, lr}
	int ret;

	LOG_INF(APP_BANNER);
   1fbea:	4c77      	ldr	r4, [pc, #476]	; (1fdc8 <main+0x1e0>)
{
   1fbec:	b085      	sub	sp, #20
	LOG_INF(APP_BANNER);
   1fbee:	6823      	ldr	r3, [r4, #0]
   1fbf0:	f003 0307 	and.w	r3, r3, #7
   1fbf4:	2b02      	cmp	r3, #2
   1fbf6:	d90d      	bls.n	1fc14 <main+0x2c>
   1fbf8:	2303      	movs	r3, #3
   1fbfa:	f04f 0100 	mov.w	r1, #0
   1fbfe:	4a73      	ldr	r2, [pc, #460]	; (1fdcc <main+0x1e4>)
   1fc00:	f363 0107 	bfi	r1, r3, #0, #8
   1fc04:	4b72      	ldr	r3, [pc, #456]	; (1fdd0 <main+0x1e8>)
   1fc06:	4873      	ldr	r0, [pc, #460]	; (1fdd4 <main+0x1ec>)
   1fc08:	1a9b      	subs	r3, r3, r2
   1fc0a:	08db      	lsrs	r3, r3, #3
   1fc0c:	f363 118f 	bfi	r1, r3, #6, #10
   1fc10:	f020 ff17 	bl	40a42 <log_0>
	if (z_syscall_trap()) {
		return (int) arch_syscall_invoke3(*(uintptr_t *)&sem, *(uintptr_t *)&initial_count, *(uintptr_t *)&limit, K_SYSCALL_K_SEM_INIT);
	}
#endif
	compiler_barrier();
	return z_impl_k_sem_init(sem, initial_count, limit);
   1fc14:	2100      	movs	r1, #0
   1fc16:	f04f 32ff 	mov.w	r2, #4294967295
   1fc1a:	486f      	ldr	r0, [pc, #444]	; (1fdd8 <main+0x1f0>)
   1fc1c:	f024 ffbe 	bl	44b9c <z_impl_k_sem_init>

	k_sem_init(&quit_lock, 0, UINT_MAX);

	ui_init(ui_evt_handler);
   1fc20:	486e      	ldr	r0, [pc, #440]	; (1fddc <main+0x1f4>)
   1fc22:	f001 fb33 	bl	2128c <ui_init>

	ret = fota_settings_init();
   1fc26:	f000 fa1f 	bl	20068 <fota_settings_init>
	if (ret < 0) {
   1fc2a:	1e01      	subs	r1, r0, #0
   1fc2c:	da12      	bge.n	1fc54 <main+0x6c>
		LOG_ERR("Unable to init settings (%d)", ret);
   1fc2e:	6823      	ldr	r3, [r4, #0]
   1fc30:	075b      	lsls	r3, r3, #29
   1fc32:	d00d      	beq.n	1fc50 <main+0x68>
   1fc34:	2301      	movs	r3, #1
   1fc36:	f04f 0200 	mov.w	r2, #0
   1fc3a:	4864      	ldr	r0, [pc, #400]	; (1fdcc <main+0x1e4>)
   1fc3c:	f363 0207 	bfi	r2, r3, #0, #8
   1fc40:	4b63      	ldr	r3, [pc, #396]	; (1fdd0 <main+0x1e8>)
   1fc42:	1a1b      	subs	r3, r3, r0
   1fc44:	08db      	lsrs	r3, r3, #3
   1fc46:	4866      	ldr	r0, [pc, #408]	; (1fde0 <main+0x1f8>)
   1fc48:	f363 128f 	bfi	r2, r3, #6, #10
		return;
	}

	ret = lwm2m_init_image();
	if (ret < 0) {
		LOG_ERR("Failed to setup image properties (%d)", ret);
   1fc4c:	f020 ff06 	bl	40a5c <log_1>
	}
#endif

	lwm2m_rd_client_start(&client, endpoint_name, rd_client_event);
	k_sem_take(&quit_lock, K_FOREVER);
}
   1fc50:	b005      	add	sp, #20
   1fc52:	bdf0      	pop	{r4, r5, r6, r7, pc}
	settings_load();
   1fc54:	f022 fead 	bl	429b2 <settings_load>
	LOG_INF("Initializing modem.");
   1fc58:	6823      	ldr	r3, [r4, #0]
   1fc5a:	f003 0307 	and.w	r3, r3, #7
   1fc5e:	2b02      	cmp	r3, #2
   1fc60:	d90d      	bls.n	1fc7e <main+0x96>
   1fc62:	2303      	movs	r3, #3
   1fc64:	f04f 0100 	mov.w	r1, #0
   1fc68:	4a58      	ldr	r2, [pc, #352]	; (1fdcc <main+0x1e4>)
   1fc6a:	f363 0107 	bfi	r1, r3, #0, #8
   1fc6e:	4b58      	ldr	r3, [pc, #352]	; (1fdd0 <main+0x1e8>)
   1fc70:	485c      	ldr	r0, [pc, #368]	; (1fde4 <main+0x1fc>)
   1fc72:	1a9b      	subs	r3, r3, r2
   1fc74:	08db      	lsrs	r3, r3, #3
   1fc76:	f363 118f 	bfi	r1, r3, #6, #10
   1fc7a:	f020 fee2 	bl	40a42 <log_0>
	ret = lte_lc_init();
   1fc7e:	f024 feba 	bl	449f6 <lte_lc_init>
	if (ret < 0) {
   1fc82:	1e01      	subs	r1, r0, #0
   1fc84:	da0f      	bge.n	1fca6 <main+0xbe>
		LOG_ERR("Unable to init modem (%d)", ret);
   1fc86:	6823      	ldr	r3, [r4, #0]
   1fc88:	075f      	lsls	r7, r3, #29
   1fc8a:	d0e1      	beq.n	1fc50 <main+0x68>
   1fc8c:	2301      	movs	r3, #1
   1fc8e:	f04f 0200 	mov.w	r2, #0
   1fc92:	484e      	ldr	r0, [pc, #312]	; (1fdcc <main+0x1e4>)
   1fc94:	f363 0207 	bfi	r2, r3, #0, #8
   1fc98:	4b4d      	ldr	r3, [pc, #308]	; (1fdd0 <main+0x1e8>)
   1fc9a:	1a1b      	subs	r3, r3, r0
   1fc9c:	08db      	lsrs	r3, r3, #3
   1fc9e:	f363 128f 	bfi	r2, r3, #6, #10
   1fca2:	4851      	ldr	r0, [pc, #324]	; (1fde8 <main+0x200>)
   1fca4:	e7d2      	b.n	1fc4c <main+0x64>
	ret = at_cmd_write(cmd, buf, buf_len, &at_state);
   1fca6:	f10d 030f 	add.w	r3, sp, #15
   1fcaa:	2214      	movs	r2, #20
   1fcac:	494f      	ldr	r1, [pc, #316]	; (1fdec <main+0x204>)
   1fcae:	4850      	ldr	r0, [pc, #320]	; (1fdf0 <main+0x208>)
   1fcb0:	f011 fa5a 	bl	31168 <at_cmd_write>
	if (ret) {
   1fcb4:	4e4d      	ldr	r6, [pc, #308]	; (1fdec <main+0x204>)
   1fcb6:	4605      	mov	r5, r0
   1fcb8:	2800      	cmp	r0, #0
   1fcba:	d06c      	beq.n	1fd96 <main+0x1ae>
		LOG_ERR("at_cmd_write [%s] error:%d, at_state: %d",
   1fcbc:	6823      	ldr	r3, [r4, #0]
   1fcbe:	075e      	lsls	r6, r3, #29
   1fcc0:	d013      	beq.n	1fcea <main+0x102>
   1fcc2:	2301      	movs	r3, #1
   1fcc4:	f04f 0200 	mov.w	r2, #0
   1fcc8:	4940      	ldr	r1, [pc, #256]	; (1fdcc <main+0x1e4>)
   1fcca:	f363 0207 	bfi	r2, r3, #0, #8
   1fcce:	4b40      	ldr	r3, [pc, #256]	; (1fdd0 <main+0x1e8>)
   1fcd0:	1a5b      	subs	r3, r3, r1
   1fcd2:	08db      	lsrs	r3, r3, #3
   1fcd4:	f363 128f 	bfi	r2, r3, #6, #10
   1fcd8:	f8ad 2000 	strh.w	r2, [sp]
   1fcdc:	f89d 300f 	ldrb.w	r3, [sp, #15]
   1fce0:	4602      	mov	r2, r0
   1fce2:	4943      	ldr	r1, [pc, #268]	; (1fdf0 <main+0x208>)
   1fce4:	4843      	ldr	r0, [pc, #268]	; (1fdf4 <main+0x20c>)
   1fce6:	f020 fee5 	bl	40ab4 <log_3>
		strncpy(buf, "error", buf_len);
   1fcea:	2214      	movs	r2, #20
   1fcec:	4942      	ldr	r1, [pc, #264]	; (1fdf8 <main+0x210>)
   1fcee:	483f      	ldr	r0, [pc, #252]	; (1fdec <main+0x204>)
   1fcf0:	f025 fa48 	bl	45184 <strncpy>
	snprintf(endpoint_name, sizeof(endpoint_name), "nrf-%s", imei_buf);
   1fcf4:	4b3d      	ldr	r3, [pc, #244]	; (1fdec <main+0x204>)
   1fcf6:	4a41      	ldr	r2, [pc, #260]	; (1fdfc <main+0x214>)
   1fcf8:	2118      	movs	r1, #24
   1fcfa:	4841      	ldr	r0, [pc, #260]	; (1fe00 <main+0x218>)
   1fcfc:	f01f fb42 	bl	3f384 <sniprintf>
	LOG_INF("endpoint: %s", log_strdup(endpoint_name));
   1fd00:	6823      	ldr	r3, [r4, #0]
   1fd02:	f003 0307 	and.w	r3, r3, #7
   1fd06:	2b02      	cmp	r3, #2
   1fd08:	d912      	bls.n	1fd30 <main+0x148>
   1fd0a:	2303      	movs	r3, #3
   1fd0c:	f04f 0500 	mov.w	r5, #0
   1fd10:	4a2e      	ldr	r2, [pc, #184]	; (1fdcc <main+0x1e4>)
   1fd12:	f363 0507 	bfi	r5, r3, #0, #8
   1fd16:	4b2e      	ldr	r3, [pc, #184]	; (1fdd0 <main+0x1e8>)
   1fd18:	4839      	ldr	r0, [pc, #228]	; (1fe00 <main+0x218>)
   1fd1a:	1a9b      	subs	r3, r3, r2
   1fd1c:	08db      	lsrs	r3, r3, #3
   1fd1e:	f363 158f 	bfi	r5, r3, #6, #10
   1fd22:	f001 ffc3 	bl	21cac <log_strdup>
   1fd26:	462a      	mov	r2, r5
   1fd28:	4601      	mov	r1, r0
   1fd2a:	4836      	ldr	r0, [pc, #216]	; (1fe04 <main+0x21c>)
   1fd2c:	f020 fe96 	bl	40a5c <log_1>
	(void)memset(&client, 0x0, sizeof(client));
   1fd30:	4d35      	ldr	r5, [pc, #212]	; (1fe08 <main+0x220>)
   1fd32:	f44f 7298 	mov.w	r2, #304	; 0x130
   1fd36:	2100      	movs	r1, #0
   1fd38:	4628      	mov	r0, r5
   1fd3a:	f025 f8c3 	bl	44ec4 <memset>
	lwm2m_init_device(imei_buf);
   1fd3e:	482b      	ldr	r0, [pc, #172]	; (1fdec <main+0x204>)
   1fd40:	f000 fa14 	bl	2016c <lwm2m_init_device>
	lwm2m_init_security(&client, endpoint_name);
   1fd44:	492e      	ldr	r1, [pc, #184]	; (1fe00 <main+0x218>)
   1fd46:	4628      	mov	r0, r5
   1fd48:	f000 fac0 	bl	202cc <lwm2m_init_security>
	lwm2m_init_location();
   1fd4c:	f000 fb70 	bl	20430 <lwm2m_init_location>
	lwm2m_init_firmware();
   1fd50:	f000 fd4e 	bl	207f0 <lwm2m_init_firmware>
	lwm2m_init_connmon();
   1fd54:	f000 ff84 	bl	20c60 <lwm2m_init_connmon>
	lwm2m_init_light_control();
   1fd58:	f000 ffe2 	bl	20d20 <lwm2m_init_light_control>
	lwm2m_init_temp();
   1fd5c:	f001 f81e 	bl	20d9c <lwm2m_init_temp>
	lwm2m_init_buzzer();
   1fd60:	f001 f886 	bl	20e70 <lwm2m_init_buzzer>
	lwm2m_init_button();
   1fd64:	f001 f8ea 	bl	20f3c <lwm2m_init_button>
	lwm2m_init_accel();
   1fd68:	f001 fa06 	bl	21178 <lwm2m_init_accel>
	ret = lwm2m_init_image();
   1fd6c:	f000 fd56 	bl	2081c <lwm2m_init_image>
	if (ret < 0) {
   1fd70:	1e01      	subs	r1, r0, #0
   1fd72:	da4d      	bge.n	1fe10 <main+0x228>
		LOG_ERR("Failed to setup image properties (%d)", ret);
   1fd74:	6823      	ldr	r3, [r4, #0]
   1fd76:	0758      	lsls	r0, r3, #29
   1fd78:	f43f af6a 	beq.w	1fc50 <main+0x68>
   1fd7c:	2301      	movs	r3, #1
   1fd7e:	f04f 0200 	mov.w	r2, #0
   1fd82:	4812      	ldr	r0, [pc, #72]	; (1fdcc <main+0x1e4>)
   1fd84:	f363 0207 	bfi	r2, r3, #0, #8
   1fd88:	4b11      	ldr	r3, [pc, #68]	; (1fdd0 <main+0x1e8>)
   1fd8a:	1a1b      	subs	r3, r3, r0
   1fd8c:	08db      	lsrs	r3, r3, #3
   1fd8e:	f363 128f 	bfi	r2, r3, #6, #10
   1fd92:	481e      	ldr	r0, [pc, #120]	; (1fe0c <main+0x224>)
   1fd94:	e75a      	b.n	1fc4c <main+0x64>
	len = strlen(buf);
   1fd96:	4630      	mov	r0, r6
   1fd98:	f7fd f9be 	bl	1d118 <strlen>
	for (i = 0; i < len; i++) {
   1fd9c:	4631      	mov	r1, r6
	size_t i, j = 0, len;
   1fd9e:	462a      	mov	r2, r5
	for (i = 0; i < len; i++) {
   1fda0:	462b      	mov	r3, r5
   1fda2:	4298      	cmp	r0, r3
   1fda4:	d104      	bne.n	1fdb0 <main+0x1c8>
	if (j < len) {
   1fda6:	4290      	cmp	r0, r2
		buf[j] = '\0';
   1fda8:	bf84      	itt	hi
   1fdaa:	2300      	movhi	r3, #0
   1fdac:	54b3      	strbhi	r3, [r6, r2]
   1fdae:	e7a1      	b.n	1fcf4 <main+0x10c>
		if (buf[i] >= 32 && buf[i] <= 126) {
   1fdb0:	f811 5b01 	ldrb.w	r5, [r1], #1
   1fdb4:	f1a5 0720 	sub.w	r7, r5, #32
   1fdb8:	2f5e      	cmp	r7, #94	; 0x5e
   1fdba:	d803      	bhi.n	1fdc4 <main+0x1dc>
			if (j != i) {
   1fdbc:	4293      	cmp	r3, r2
				buf[j] = buf[i];
   1fdbe:	bf18      	it	ne
   1fdc0:	54b5      	strbne	r5, [r6, r2]
			j++;
   1fdc2:	3201      	adds	r2, #1
	for (i = 0; i < len; i++) {
   1fdc4:	3301      	adds	r3, #1
   1fdc6:	e7ec      	b.n	1fda2 <main+0x1ba>
   1fdc8:	20032a94 	.word	0x20032a94
   1fdcc:	00045f08 	.word	0x00045f08
   1fdd0:	00045f28 	.word	0x00045f28
   1fdd4:	0004750b 	.word	0x0004750b
   1fdd8:	20021bb0 	.word	0x20021bb0
   1fddc:	0001fb91 	.word	0x0001fb91
   1fde0:	0004751c 	.word	0x0004751c
   1fde4:	00047539 	.word	0x00047539
   1fde8:	0004754d 	.word	0x0004754d
   1fdec:	2002986a 	.word	0x2002986a
   1fdf0:	00047567 	.word	0x00047567
   1fdf4:	0004756f 	.word	0x0004756f
   1fdf8:	00049bfe 	.word	0x00049bfe
   1fdfc:	00047598 	.word	0x00047598
   1fe00:	20029852 	.word	0x20029852
   1fe04:	0004759f 	.word	0x0004759f
   1fe08:	20021a80 	.word	0x20021a80
   1fe0c:	000475ac 	.word	0x000475ac
				   client_psk, strlen(client_psk));
   1fe10:	485a      	ldr	r0, [pc, #360]	; (1ff7c <main+0x394>)
	ret = modem_key_mgmt_write(client.tls_tag,
   1fe12:	f8d5 6118 	ldr.w	r6, [r5, #280]	; 0x118
				   client_psk, strlen(client_psk));
   1fe16:	f7fd f97f 	bl	1d118 <strlen>
	ret = modem_key_mgmt_write(client.tls_tag,
   1fe1a:	4a58      	ldr	r2, [pc, #352]	; (1ff7c <main+0x394>)
   1fe1c:	b283      	uxth	r3, r0
   1fe1e:	2103      	movs	r1, #3
   1fe20:	4630      	mov	r0, r6
   1fe22:	f012 fb11 	bl	32448 <modem_key_mgmt_write>
	if (ret < 0) {
   1fe26:	1e03      	subs	r3, r0, #0
   1fe28:	da15      	bge.n	1fe56 <main+0x26e>
		LOG_ERR("Error setting cred tag %d type %d: Error %d",
   1fe2a:	6822      	ldr	r2, [r4, #0]
   1fe2c:	0751      	lsls	r1, r2, #29
   1fe2e:	d012      	beq.n	1fe56 <main+0x26e>
   1fe30:	2201      	movs	r2, #1
   1fe32:	f04f 0100 	mov.w	r1, #0
   1fe36:	4852      	ldr	r0, [pc, #328]	; (1ff80 <main+0x398>)
   1fe38:	f362 0107 	bfi	r1, r2, #0, #8
   1fe3c:	4a51      	ldr	r2, [pc, #324]	; (1ff84 <main+0x39c>)
   1fe3e:	1a12      	subs	r2, r2, r0
   1fe40:	08d2      	lsrs	r2, r2, #3
   1fe42:	f362 118f 	bfi	r1, r2, #6, #10
   1fe46:	f8ad 1000 	strh.w	r1, [sp]
   1fe4a:	2203      	movs	r2, #3
   1fe4c:	f8d5 1118 	ldr.w	r1, [r5, #280]	; 0x118
   1fe50:	484d      	ldr	r0, [pc, #308]	; (1ff88 <main+0x3a0>)
   1fe52:	f020 fe2f 	bl	40ab4 <log_3>
				   endpoint_name, strlen(endpoint_name));
   1fe56:	484d      	ldr	r0, [pc, #308]	; (1ff8c <main+0x3a4>)
	ret = modem_key_mgmt_write(client.tls_tag,
   1fe58:	f8d5 6118 	ldr.w	r6, [r5, #280]	; 0x118
				   endpoint_name, strlen(endpoint_name));
   1fe5c:	f7fd f95c 	bl	1d118 <strlen>
	ret = modem_key_mgmt_write(client.tls_tag,
   1fe60:	4a4a      	ldr	r2, [pc, #296]	; (1ff8c <main+0x3a4>)
   1fe62:	b283      	uxth	r3, r0
   1fe64:	2104      	movs	r1, #4
   1fe66:	4630      	mov	r0, r6
   1fe68:	f012 faee 	bl	32448 <modem_key_mgmt_write>
	if (ret < 0) {
   1fe6c:	1e03      	subs	r3, r0, #0
   1fe6e:	da15      	bge.n	1fe9c <main+0x2b4>
		LOG_ERR("Error setting cred tag %d type %d: Error %d",
   1fe70:	6822      	ldr	r2, [r4, #0]
   1fe72:	0752      	lsls	r2, r2, #29
   1fe74:	d035      	beq.n	1fee2 <main+0x2fa>
   1fe76:	2201      	movs	r2, #1
   1fe78:	f04f 0100 	mov.w	r1, #0
   1fe7c:	4840      	ldr	r0, [pc, #256]	; (1ff80 <main+0x398>)
   1fe7e:	f362 0107 	bfi	r1, r2, #0, #8
   1fe82:	4a40      	ldr	r2, [pc, #256]	; (1ff84 <main+0x39c>)
   1fe84:	1a12      	subs	r2, r2, r0
   1fe86:	08d2      	lsrs	r2, r2, #3
   1fe88:	f362 118f 	bfi	r1, r2, #6, #10
   1fe8c:	f8ad 1000 	strh.w	r1, [sp]
   1fe90:	2204      	movs	r2, #4
   1fe92:	f8d5 1118 	ldr.w	r1, [r5, #280]	; 0x118
   1fe96:	483c      	ldr	r0, [pc, #240]	; (1ff88 <main+0x3a0>)
   1fe98:	f020 fe0c 	bl	40ab4 <log_3>
	LOG_INF("Connecting to LTE network.");
   1fe9c:	6823      	ldr	r3, [r4, #0]
   1fe9e:	f003 0307 	and.w	r3, r3, #7
   1fea2:	2b02      	cmp	r3, #2
   1fea4:	d91d      	bls.n	1fee2 <main+0x2fa>
   1fea6:	2303      	movs	r3, #3
   1fea8:	f04f 0100 	mov.w	r1, #0
   1feac:	4d35      	ldr	r5, [pc, #212]	; (1ff84 <main+0x39c>)
   1feae:	f363 0107 	bfi	r1, r3, #0, #8
   1feb2:	4b33      	ldr	r3, [pc, #204]	; (1ff80 <main+0x398>)
   1feb4:	4836      	ldr	r0, [pc, #216]	; (1ff90 <main+0x3a8>)
   1feb6:	1aed      	subs	r5, r5, r3
   1feb8:	f3c5 05c9 	ubfx	r5, r5, #3, #10
   1febc:	f365 118f 	bfi	r1, r5, #6, #10
   1fec0:	f020 fdbf 	bl	40a42 <log_0>
	LOG_INF("This may take several minutes.");
   1fec4:	6823      	ldr	r3, [r4, #0]
   1fec6:	f003 0307 	and.w	r3, r3, #7
   1feca:	2b02      	cmp	r3, #2
   1fecc:	d909      	bls.n	1fee2 <main+0x2fa>
   1fece:	f04f 0100 	mov.w	r1, #0
   1fed2:	2303      	movs	r3, #3
   1fed4:	f363 0107 	bfi	r1, r3, #0, #8
   1fed8:	f365 118f 	bfi	r1, r5, #6, #10
   1fedc:	482d      	ldr	r0, [pc, #180]	; (1ff94 <main+0x3ac>)
   1fede:	f020 fdb0 	bl	40a42 <log_0>
	ui_led_set_pattern(UI_LTE_CONNECTING);
   1fee2:	f44f 6080 	mov.w	r0, #1024	; 0x400
   1fee6:	f001 f9bb 	bl	21260 <ui_led_set_pattern>
	ret = lte_lc_connect();
   1feea:	f024 fd86 	bl	449fa <lte_lc_connect>
	__ASSERT(ret == 0, "LTE link could not be established.");
   1feee:	b170      	cbz	r0, 1ff0e <main+0x326>
   1fef0:	4929      	ldr	r1, [pc, #164]	; (1ff98 <main+0x3b0>)
   1fef2:	f240 1309 	movw	r3, #265	; 0x109
   1fef6:	4a29      	ldr	r2, [pc, #164]	; (1ff9c <main+0x3b4>)
   1fef8:	4829      	ldr	r0, [pc, #164]	; (1ffa0 <main+0x3b8>)
   1fefa:	f020 fb82 	bl	40602 <printk>
   1fefe:	4829      	ldr	r0, [pc, #164]	; (1ffa4 <main+0x3bc>)
   1ff00:	f020 fb7f 	bl	40602 <printk>
   1ff04:	f240 1109 	movw	r1, #265	; 0x109
   1ff08:	4824      	ldr	r0, [pc, #144]	; (1ff9c <main+0x3b4>)
   1ff0a:	f020 fc3d 	bl	40788 <assert_post_action>
	LOG_INF("Connected to LTE network");
   1ff0e:	6823      	ldr	r3, [r4, #0]
   1ff10:	f003 0307 	and.w	r3, r3, #7
   1ff14:	2b02      	cmp	r3, #2
   1ff16:	d90d      	bls.n	1ff34 <main+0x34c>
   1ff18:	2303      	movs	r3, #3
   1ff1a:	f04f 0100 	mov.w	r1, #0
   1ff1e:	4a18      	ldr	r2, [pc, #96]	; (1ff80 <main+0x398>)
   1ff20:	f363 0107 	bfi	r1, r3, #0, #8
   1ff24:	4b17      	ldr	r3, [pc, #92]	; (1ff84 <main+0x39c>)
   1ff26:	4820      	ldr	r0, [pc, #128]	; (1ffa8 <main+0x3c0>)
   1ff28:	1a9b      	subs	r3, r3, r2
   1ff2a:	08db      	lsrs	r3, r3, #3
   1ff2c:	f363 118f 	bfi	r1, r3, #6, #10
   1ff30:	f020 fd87 	bl	40a42 <log_0>
	ui_led_set_pattern(UI_LTE_CONNECTED);
   1ff34:	2004      	movs	r0, #4
   1ff36:	f001 f993 	bl	21260 <ui_led_set_pattern>
	ret = lwm2m_start_connmon();
   1ff3a:	f000 fecd 	bl	20cd8 <lwm2m_start_connmon>
	if (ret < 0) {
   1ff3e:	1e01      	subs	r1, r0, #0
   1ff40:	da10      	bge.n	1ff64 <main+0x37c>
		LOG_ERR("Error registering rsrp handler (%d)", ret);
   1ff42:	6823      	ldr	r3, [r4, #0]
   1ff44:	075b      	lsls	r3, r3, #29
   1ff46:	d00d      	beq.n	1ff64 <main+0x37c>
   1ff48:	2301      	movs	r3, #1
   1ff4a:	f04f 0200 	mov.w	r2, #0
   1ff4e:	480c      	ldr	r0, [pc, #48]	; (1ff80 <main+0x398>)
   1ff50:	f363 0207 	bfi	r2, r3, #0, #8
   1ff54:	4b0b      	ldr	r3, [pc, #44]	; (1ff84 <main+0x39c>)
   1ff56:	1a1b      	subs	r3, r3, r0
   1ff58:	08db      	lsrs	r3, r3, #3
   1ff5a:	f363 128f 	bfi	r2, r3, #6, #10
   1ff5e:	4813      	ldr	r0, [pc, #76]	; (1ffac <main+0x3c4>)
   1ff60:	f020 fd7c 	bl	40a5c <log_1>
	lwm2m_rd_client_start(&client, endpoint_name, rd_client_event);
   1ff64:	4a12      	ldr	r2, [pc, #72]	; (1ffb0 <main+0x3c8>)
   1ff66:	4909      	ldr	r1, [pc, #36]	; (1ff8c <main+0x3a4>)
   1ff68:	4812      	ldr	r0, [pc, #72]	; (1ffb4 <main+0x3cc>)
   1ff6a:	f00d f9eb 	bl	2d344 <lwm2m_rd_client_start>
	if (z_syscall_trap()) {
		return (int) arch_syscall_invoke2(*(uintptr_t *)&sem, *(uintptr_t *)&timeout, K_SYSCALL_K_SEM_TAKE);
	}
#endif
	compiler_barrier();
	return z_impl_k_sem_take(sem, timeout);
   1ff6e:	f04f 31ff 	mov.w	r1, #4294967295
   1ff72:	4811      	ldr	r0, [pc, #68]	; (1ffb8 <main+0x3d0>)
   1ff74:	f01d fad0 	bl	3d518 <z_impl_k_sem_take>
   1ff78:	e66a      	b.n	1fc50 <main+0x68>
   1ff7a:	bf00      	nop
   1ff7c:	20032868 	.word	0x20032868
   1ff80:	00045f08 	.word	0x00045f08
   1ff84:	00045f28 	.word	0x00045f28
   1ff88:	000475d2 	.word	0x000475d2
   1ff8c:	20029852 	.word	0x20029852
   1ff90:	000475fe 	.word	0x000475fe
   1ff94:	00047619 	.word	0x00047619
   1ff98:	00047646 	.word	0x00047646
   1ff9c:	00047638 	.word	0x00047638
   1ffa0:	0004764f 	.word	0x0004764f
   1ffa4:	0004766c 	.word	0x0004766c
   1ffa8:	00047691 	.word	0x00047691
   1ffac:	000476aa 	.word	0x000476aa
   1ffb0:	0001f9f9 	.word	0x0001f9f9
   1ffb4:	20021a80 	.word	0x20021a80
   1ffb8:	20021bb0 	.word	0x20021bb0

0001ffbc <set>:
	return settings_save_one("fota/counter", &uc, sizeof(uc));
}

static int set(const char *key, size_t len_rd, settings_read_cb read_cb,
	       void *cb_arg)
{
   1ffbc:	b573      	push	{r0, r1, r4, r5, r6, lr}
   1ffbe:	4615      	mov	r5, r2
   1ffc0:	461e      	mov	r6, r3
	int len;
	int key_len;
	const char *next;

	if (!key) {
   1ffc2:	4604      	mov	r4, r0
   1ffc4:	b920      	cbnz	r0, 1ffd0 <set+0x14>
		return -ENOENT;
   1ffc6:	f06f 0401 	mvn.w	r4, #1

		return 0;
	}

	return -ENOENT;
}
   1ffca:	4620      	mov	r0, r4
   1ffcc:	b002      	add	sp, #8
   1ffce:	bd70      	pop	{r4, r5, r6, pc}
	key_len = settings_name_next(key, &next);
   1ffd0:	a901      	add	r1, sp, #4
   1ffd2:	f022 fd11 	bl	429f8 <settings_name_next>
	if (!strncmp(key, "counter", key_len)) {
   1ffd6:	4912      	ldr	r1, [pc, #72]	; (20020 <__kernel_ram_size+0x20>)
   1ffd8:	4602      	mov	r2, r0
   1ffda:	4620      	mov	r0, r4
   1ffdc:	f025 f8c0 	bl	45160 <strncmp>
   1ffe0:	4604      	mov	r4, r0
   1ffe2:	2800      	cmp	r0, #0
   1ffe4:	d1ef      	bne.n	1ffc6 <set+0xa>
		len = read_cb(cb_arg, &uc, sizeof(uc));
   1ffe6:	2208      	movs	r2, #8
   1ffe8:	490e      	ldr	r1, [pc, #56]	; (20024 <__kernel_ram_size+0x24>)
   1ffea:	4630      	mov	r0, r6
   1ffec:	47a8      	blx	r5
		if (len < sizeof(uc)) {
   1ffee:	2807      	cmp	r0, #7
   1fff0:	d8eb      	bhi.n	1ffca <set+0xe>
			LOG_ERR("Unable to read update counter.  Resetting.");
   1fff2:	4b0d      	ldr	r3, [pc, #52]	; (20028 <__kernel_ram_size+0x28>)
   1fff4:	681b      	ldr	r3, [r3, #0]
   1fff6:	075b      	lsls	r3, r3, #29
   1fff8:	d00d      	beq.n	20016 <__kernel_ram_size+0x16>
   1fffa:	2301      	movs	r3, #1
   1fffc:	f04f 0100 	mov.w	r1, #0
   20000:	4a0a      	ldr	r2, [pc, #40]	; (2002c <__kernel_ram_size+0x2c>)
   20002:	f363 0107 	bfi	r1, r3, #0, #8
   20006:	4b0a      	ldr	r3, [pc, #40]	; (20030 <__kernel_ram_size+0x30>)
   20008:	480a      	ldr	r0, [pc, #40]	; (20034 <__kernel_ram_size+0x34>)
   2000a:	1a9b      	subs	r3, r3, r2
   2000c:	08db      	lsrs	r3, r3, #3
   2000e:	f363 118f 	bfi	r1, r3, #6, #10
   20012:	f020 fd16 	bl	40a42 <log_0>
			memset(&uc, 0, sizeof(uc));
   20016:	2200      	movs	r2, #0
   20018:	4b02      	ldr	r3, [pc, #8]	; (20024 <__kernel_ram_size+0x24>)
   2001a:	e9c3 2200 	strd	r2, r2, [r3]
   2001e:	e7d4      	b.n	1ffca <set+0xe>
   20020:	00047bb5 	.word	0x00047bb5
   20024:	20021bc8 	.word	0x20021bc8
   20028:	20032a84 	.word	0x20032a84
   2002c:	00045f08 	.word	0x00045f08
   20030:	00045f08 	.word	0x00045f08
   20034:	00047848 	.word	0x00047848

00020038 <fota_update_counter_read>:
{
   20038:	4602      	mov	r2, r0
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   2003a:	4b03      	ldr	r3, [pc, #12]	; (20048 <fota_update_counter_read+0x10>)
   2003c:	cb03      	ldmia	r3!, {r0, r1}
   2003e:	6010      	str	r0, [r2, #0]
   20040:	6051      	str	r1, [r2, #4]
}
   20042:	2000      	movs	r0, #0
   20044:	4770      	bx	lr
   20046:	bf00      	nop
   20048:	20021bc8 	.word	0x20021bc8

0002004c <fota_update_counter_update>:
	if (type == COUNTER_UPDATE) {
   2004c:	4b04      	ldr	r3, [pc, #16]	; (20060 <fota_update_counter_update+0x14>)
   2004e:	2801      	cmp	r0, #1
		uc.update = new_value;
   20050:	bf0c      	ite	eq
   20052:	6059      	streq	r1, [r3, #4]
		uc.current = new_value;
   20054:	6019      	strne	r1, [r3, #0]
	return settings_save_one("fota/counter", &uc, sizeof(uc));
   20056:	2208      	movs	r2, #8
   20058:	4901      	ldr	r1, [pc, #4]	; (20060 <fota_update_counter_update+0x14>)
   2005a:	4802      	ldr	r0, [pc, #8]	; (20064 <fota_update_counter_update+0x18>)
   2005c:	f005 b8c2 	b.w	251e4 <settings_save_one>
   20060:	20021bc8 	.word	0x20021bc8
   20064:	0004783b 	.word	0x0004783b

00020068 <fota_settings_init>:
	.name = "fota",
	.h_set = set,
};

int fota_settings_init(void)
{
   20068:	b510      	push	{r4, lr}
	int err;

	err = settings_subsys_init();
   2006a:	f005 fa95 	bl	25598 <settings_subsys_init>
	if (err) {
   2006e:	4604      	mov	r4, r0
   20070:	b1a0      	cbz	r0, 2009c <fota_settings_init+0x34>
		LOG_ERR("settings_subsys_init failed (err %d)", err);
   20072:	4b16      	ldr	r3, [pc, #88]	; (200cc <fota_settings_init+0x64>)
   20074:	681b      	ldr	r3, [r3, #0]
   20076:	075a      	lsls	r2, r3, #29
   20078:	d00e      	beq.n	20098 <fota_settings_init+0x30>
   2007a:	2301      	movs	r3, #1
   2007c:	f04f 0200 	mov.w	r2, #0
   20080:	4913      	ldr	r1, [pc, #76]	; (200d0 <fota_settings_init+0x68>)
   20082:	f363 0207 	bfi	r2, r3, #0, #8
   20086:	4b13      	ldr	r3, [pc, #76]	; (200d4 <fota_settings_init+0x6c>)
   20088:	1a5b      	subs	r3, r3, r1
   2008a:	08db      	lsrs	r3, r3, #3
   2008c:	4601      	mov	r1, r0
   2008e:	4812      	ldr	r0, [pc, #72]	; (200d8 <fota_settings_init+0x70>)
   20090:	f363 128f 	bfi	r2, r3, #6, #10
		return err;
	}

	err = settings_register(&fota_settings);
	if (err) {
		LOG_ERR("settings_register failed (err %d)", err);
   20094:	f020 fce2 	bl	40a5c <log_1>
		return err;
	}

	return 0;
}
   20098:	4620      	mov	r0, r4
   2009a:	bd10      	pop	{r4, pc}
	err = settings_register(&fota_settings);
   2009c:	480f      	ldr	r0, [pc, #60]	; (200dc <fota_settings_init+0x74>)
   2009e:	f005 f91d 	bl	252dc <settings_register>
	if (err) {
   200a2:	4604      	mov	r4, r0
   200a4:	2800      	cmp	r0, #0
   200a6:	d0f7      	beq.n	20098 <fota_settings_init+0x30>
		LOG_ERR("settings_register failed (err %d)", err);
   200a8:	4b08      	ldr	r3, [pc, #32]	; (200cc <fota_settings_init+0x64>)
   200aa:	681b      	ldr	r3, [r3, #0]
   200ac:	075b      	lsls	r3, r3, #29
   200ae:	d0f3      	beq.n	20098 <fota_settings_init+0x30>
   200b0:	2301      	movs	r3, #1
   200b2:	f04f 0200 	mov.w	r2, #0
   200b6:	4906      	ldr	r1, [pc, #24]	; (200d0 <fota_settings_init+0x68>)
   200b8:	f363 0207 	bfi	r2, r3, #0, #8
   200bc:	4b05      	ldr	r3, [pc, #20]	; (200d4 <fota_settings_init+0x6c>)
   200be:	1a5b      	subs	r3, r3, r1
   200c0:	08db      	lsrs	r3, r3, #3
   200c2:	4601      	mov	r1, r0
   200c4:	f363 128f 	bfi	r2, r3, #6, #10
   200c8:	4805      	ldr	r0, [pc, #20]	; (200e0 <fota_settings_init+0x78>)
   200ca:	e7e3      	b.n	20094 <fota_settings_init+0x2c>
   200cc:	20032a84 	.word	0x20032a84
   200d0:	00045f08 	.word	0x00045f08
   200d4:	00045f08 	.word	0x00045f08
   200d8:	000477f4 	.word	0x000477f4
   200dc:	20032310 	.word	0x20032310
   200e0:	00047819 	.word	0x00047819

000200e4 <device_reboot_cb>:
static int usb_ma = 900;
static u8_t bat_status = LWM2M_DEVICE_BATTERY_STATUS_CHARGING;
static int mem_total = (CLIENT_FLASH_SIZE / 1024);

static int device_reboot_cb(u16_t obj_inst_id)
{
   200e4:	b508      	push	{r3, lr}
	LOG_INF("DEVICE: Reboot in progress");
   200e6:	4b0d      	ldr	r3, [pc, #52]	; (2011c <device_reboot_cb+0x38>)
   200e8:	681b      	ldr	r3, [r3, #0]
   200ea:	f003 0307 	and.w	r3, r3, #7
   200ee:	2b02      	cmp	r3, #2
   200f0:	d90d      	bls.n	2010e <device_reboot_cb+0x2a>
   200f2:	2303      	movs	r3, #3
   200f4:	f04f 0100 	mov.w	r1, #0
   200f8:	4a09      	ldr	r2, [pc, #36]	; (20120 <device_reboot_cb+0x3c>)
   200fa:	f363 0107 	bfi	r1, r3, #0, #8
   200fe:	4b09      	ldr	r3, [pc, #36]	; (20124 <device_reboot_cb+0x40>)
   20100:	4809      	ldr	r0, [pc, #36]	; (20128 <device_reboot_cb+0x44>)
   20102:	1a9b      	subs	r3, r3, r2
   20104:	08db      	lsrs	r3, r3, #3
   20106:	f363 118f 	bfi	r1, r3, #6, #10
   2010a:	f020 fc9a 	bl	40a42 <log_0>
		arch_syscall_invoke0(K_SYSCALL_LOG_PANIC);
		return;
	}
#endif
	compiler_barrier();
	z_impl_log_panic();
   2010e:	f001 ff57 	bl	21fc0 <z_impl_log_panic>
	LOG_PANIC();
	sys_reboot(0);
   20112:	2000      	movs	r0, #0
   20114:	f005 fd74 	bl	25c00 <sys_reboot>

	/* wont reach this */
	return 0;
}
   20118:	2000      	movs	r0, #0
   2011a:	bd08      	pop	{r3, pc}
   2011c:	20032a9c 	.word	0x20032a9c
   20120:	00045f08 	.word	0x00045f08
   20124:	00045f38 	.word	0x00045f38
   20128:	000478a9 	.word	0x000478a9

0002012c <device_factory_default_cb>:

static int device_factory_default_cb(u16_t obj_inst_id)
{
   2012c:	b508      	push	{r3, lr}
	LOG_INF("DEVICE: FACTORY DEFAULT (TODO)");
   2012e:	4b0b      	ldr	r3, [pc, #44]	; (2015c <device_factory_default_cb+0x30>)
   20130:	681b      	ldr	r3, [r3, #0]
   20132:	f003 0307 	and.w	r3, r3, #7
   20136:	2b02      	cmp	r3, #2
   20138:	d90d      	bls.n	20156 <device_factory_default_cb+0x2a>
   2013a:	2303      	movs	r3, #3
   2013c:	f04f 0100 	mov.w	r1, #0
   20140:	4a07      	ldr	r2, [pc, #28]	; (20160 <device_factory_default_cb+0x34>)
   20142:	f363 0107 	bfi	r1, r3, #0, #8
   20146:	4b07      	ldr	r3, [pc, #28]	; (20164 <device_factory_default_cb+0x38>)
   20148:	4807      	ldr	r0, [pc, #28]	; (20168 <device_factory_default_cb+0x3c>)
   2014a:	1a9b      	subs	r3, r3, r2
   2014c:	08db      	lsrs	r3, r3, #3
   2014e:	f363 118f 	bfi	r1, r3, #6, #10
   20152:	f020 fc76 	bl	40a42 <log_0>

	return 0;
}
   20156:	2000      	movs	r0, #0
   20158:	bd08      	pop	{r3, pc}
   2015a:	bf00      	nop
   2015c:	20032a9c 	.word	0x20032a9c
   20160:	00045f08 	.word	0x00045f08
   20164:	00045f38 	.word	0x00045f38
   20168:	0004788a 	.word	0x0004788a

0002016c <lwm2m_init_device>:

int lwm2m_init_device(char *serial_num)
{
   2016c:	b510      	push	{r4, lr}
   2016e:	4604      	mov	r4, r0
	lwm2m_engine_set_res_data("3/0/0", CLIENT_MANUFACTURER,
   20170:	2301      	movs	r3, #1
   20172:	2219      	movs	r2, #25
   20174:	4938      	ldr	r1, [pc, #224]	; (20258 <lwm2m_init_device+0xec>)
   20176:	4839      	ldr	r0, [pc, #228]	; (2025c <lwm2m_init_device+0xf0>)
   20178:	f00a f9ba 	bl	2a4f0 <lwm2m_engine_set_res_data>
				  sizeof(CLIENT_MANUFACTURER),
				  LWM2M_RES_DATA_FLAG_RO);
	lwm2m_engine_set_res_data("3/0/1", CLIENT_MODEL_NUMBER,
   2017c:	2301      	movs	r3, #1
   2017e:	2211      	movs	r2, #17
   20180:	4937      	ldr	r1, [pc, #220]	; (20260 <lwm2m_init_device+0xf4>)
   20182:	4838      	ldr	r0, [pc, #224]	; (20264 <lwm2m_init_device+0xf8>)
   20184:	f00a f9b4 	bl	2a4f0 <lwm2m_engine_set_res_data>
				  sizeof(CLIENT_MODEL_NUMBER),
				  LWM2M_RES_DATA_FLAG_RO);
	lwm2m_engine_set_res_data("3/0/2", serial_num, strlen(serial_num),
   20188:	4620      	mov	r0, r4
   2018a:	f7fc ffc5 	bl	1d118 <strlen>
   2018e:	2301      	movs	r3, #1
   20190:	b282      	uxth	r2, r0
   20192:	4621      	mov	r1, r4
   20194:	4834      	ldr	r0, [pc, #208]	; (20268 <lwm2m_init_device+0xfc>)
   20196:	f00a f9ab 	bl	2a4f0 <lwm2m_engine_set_res_data>
				  LWM2M_RES_DATA_FLAG_RO);
	lwm2m_engine_register_exec_callback("3/0/4", device_reboot_cb);
   2019a:	4934      	ldr	r1, [pc, #208]	; (2026c <lwm2m_init_device+0x100>)
   2019c:	4834      	ldr	r0, [pc, #208]	; (20270 <lwm2m_init_device+0x104>)
   2019e:	f022 ffa7 	bl	430f0 <lwm2m_engine_register_exec_callback>
	lwm2m_engine_register_exec_callback("3/0/5", device_factory_default_cb);
   201a2:	4934      	ldr	r1, [pc, #208]	; (20274 <lwm2m_init_device+0x108>)
   201a4:	4834      	ldr	r0, [pc, #208]	; (20278 <lwm2m_init_device+0x10c>)
   201a6:	f022 ffa3 	bl	430f0 <lwm2m_engine_register_exec_callback>
	lwm2m_engine_set_res_data("3/0/17", CLIENT_DEVICE_TYPE,
   201aa:	2301      	movs	r3, #1
   201ac:	2211      	movs	r2, #17
   201ae:	4933      	ldr	r1, [pc, #204]	; (2027c <lwm2m_init_device+0x110>)
   201b0:	4833      	ldr	r0, [pc, #204]	; (20280 <lwm2m_init_device+0x114>)
   201b2:	f00a f99d 	bl	2a4f0 <lwm2m_engine_set_res_data>
				  sizeof(CLIENT_DEVICE_TYPE),
				  LWM2M_RES_DATA_FLAG_RO);
	lwm2m_engine_set_res_data("3/0/18", CLIENT_HW_VER,
   201b6:	2301      	movs	r3, #1
   201b8:	220d      	movs	r2, #13
   201ba:	4932      	ldr	r1, [pc, #200]	; (20284 <lwm2m_init_device+0x118>)
   201bc:	4832      	ldr	r0, [pc, #200]	; (20288 <lwm2m_init_device+0x11c>)
   201be:	f00a f997 	bl	2a4f0 <lwm2m_engine_set_res_data>
				  LWM2M_RES_DATA_FLAG_RO);
	lwm2m_engine_set_res_data("3/0/20", &bat_status, sizeof(bat_status), 0);
	lwm2m_engine_set_res_data("3/0/21", &mem_total, sizeof(mem_total), 0);

	/* add power source resource instances */
	lwm2m_engine_create_res_inst("3/0/6/0");
   201c2:	4c32      	ldr	r4, [pc, #200]	; (2028c <lwm2m_init_device+0x120>)
	lwm2m_engine_set_res_data("3/0/20", &bat_status, sizeof(bat_status), 0);
   201c4:	2300      	movs	r3, #0
   201c6:	2201      	movs	r2, #1
   201c8:	4931      	ldr	r1, [pc, #196]	; (20290 <lwm2m_init_device+0x124>)
   201ca:	4832      	ldr	r0, [pc, #200]	; (20294 <lwm2m_init_device+0x128>)
   201cc:	f00a f990 	bl	2a4f0 <lwm2m_engine_set_res_data>
	lwm2m_engine_set_res_data("3/0/21", &mem_total, sizeof(mem_total), 0);
   201d0:	2300      	movs	r3, #0
   201d2:	2204      	movs	r2, #4
   201d4:	4930      	ldr	r1, [pc, #192]	; (20298 <lwm2m_init_device+0x12c>)
   201d6:	4831      	ldr	r0, [pc, #196]	; (2029c <lwm2m_init_device+0x130>)
   201d8:	f00a f98a 	bl	2a4f0 <lwm2m_engine_set_res_data>
	lwm2m_engine_create_res_inst("3/0/6/0");
   201dc:	4620      	mov	r0, r4
   201de:	f00a fadd 	bl	2a79c <lwm2m_engine_create_res_inst>
	lwm2m_engine_set_res_data("3/0/6/0", &bat_idx, sizeof(bat_idx), 0);
   201e2:	4620      	mov	r0, r4
	lwm2m_engine_create_res_inst("3/0/7/0");
   201e4:	4c2e      	ldr	r4, [pc, #184]	; (202a0 <lwm2m_init_device+0x134>)
	lwm2m_engine_set_res_data("3/0/6/0", &bat_idx, sizeof(bat_idx), 0);
   201e6:	2300      	movs	r3, #0
   201e8:	2201      	movs	r2, #1
   201ea:	492e      	ldr	r1, [pc, #184]	; (202a4 <lwm2m_init_device+0x138>)
   201ec:	f00a f980 	bl	2a4f0 <lwm2m_engine_set_res_data>
	lwm2m_engine_create_res_inst("3/0/7/0");
   201f0:	4620      	mov	r0, r4
   201f2:	f00a fad3 	bl	2a79c <lwm2m_engine_create_res_inst>
	lwm2m_engine_set_res_data("3/0/7/0", &bat_mv, sizeof(bat_mv), 0);
   201f6:	4620      	mov	r0, r4
	lwm2m_engine_create_res_inst("3/0/8/0");
   201f8:	4c2b      	ldr	r4, [pc, #172]	; (202a8 <lwm2m_init_device+0x13c>)
	lwm2m_engine_set_res_data("3/0/7/0", &bat_mv, sizeof(bat_mv), 0);
   201fa:	2300      	movs	r3, #0
   201fc:	2204      	movs	r2, #4
   201fe:	492b      	ldr	r1, [pc, #172]	; (202ac <lwm2m_init_device+0x140>)
   20200:	f00a f976 	bl	2a4f0 <lwm2m_engine_set_res_data>
	lwm2m_engine_create_res_inst("3/0/8/0");
   20204:	4620      	mov	r0, r4
   20206:	f00a fac9 	bl	2a79c <lwm2m_engine_create_res_inst>
	lwm2m_engine_set_res_data("3/0/8/0", &bat_ma, sizeof(bat_ma), 0);
   2020a:	4620      	mov	r0, r4
	lwm2m_engine_create_res_inst("3/0/6/1");
   2020c:	4c28      	ldr	r4, [pc, #160]	; (202b0 <lwm2m_init_device+0x144>)
	lwm2m_engine_set_res_data("3/0/8/0", &bat_ma, sizeof(bat_ma), 0);
   2020e:	2300      	movs	r3, #0
   20210:	2204      	movs	r2, #4
   20212:	4928      	ldr	r1, [pc, #160]	; (202b4 <lwm2m_init_device+0x148>)
   20214:	f00a f96c 	bl	2a4f0 <lwm2m_engine_set_res_data>
	lwm2m_engine_create_res_inst("3/0/6/1");
   20218:	4620      	mov	r0, r4
   2021a:	f00a fabf 	bl	2a79c <lwm2m_engine_create_res_inst>
	lwm2m_engine_set_res_data("3/0/6/1", &usb_idx, sizeof(usb_idx), 0);
   2021e:	4620      	mov	r0, r4
	lwm2m_engine_create_res_inst("3/0/7/1");
   20220:	4c25      	ldr	r4, [pc, #148]	; (202b8 <lwm2m_init_device+0x14c>)
	lwm2m_engine_set_res_data("3/0/6/1", &usb_idx, sizeof(usb_idx), 0);
   20222:	2300      	movs	r3, #0
   20224:	2201      	movs	r2, #1
   20226:	4925      	ldr	r1, [pc, #148]	; (202bc <lwm2m_init_device+0x150>)
   20228:	f00a f962 	bl	2a4f0 <lwm2m_engine_set_res_data>
	lwm2m_engine_create_res_inst("3/0/7/1");
   2022c:	4620      	mov	r0, r4
   2022e:	f00a fab5 	bl	2a79c <lwm2m_engine_create_res_inst>
	lwm2m_engine_set_res_data("3/0/7/1", &usb_mv, sizeof(usb_mv), 0);
   20232:	4620      	mov	r0, r4
	lwm2m_engine_create_res_inst("3/0/8/1");
   20234:	4c22      	ldr	r4, [pc, #136]	; (202c0 <lwm2m_init_device+0x154>)
	lwm2m_engine_set_res_data("3/0/7/1", &usb_mv, sizeof(usb_mv), 0);
   20236:	2300      	movs	r3, #0
   20238:	2204      	movs	r2, #4
   2023a:	4922      	ldr	r1, [pc, #136]	; (202c4 <lwm2m_init_device+0x158>)
   2023c:	f00a f958 	bl	2a4f0 <lwm2m_engine_set_res_data>
	lwm2m_engine_create_res_inst("3/0/8/1");
   20240:	4620      	mov	r0, r4
   20242:	f00a faab 	bl	2a79c <lwm2m_engine_create_res_inst>
	lwm2m_engine_set_res_data("3/0/8/1", &usb_ma, sizeof(usb_ma), 0);
   20246:	2300      	movs	r3, #0
   20248:	2204      	movs	r2, #4
   2024a:	491f      	ldr	r1, [pc, #124]	; (202c8 <lwm2m_init_device+0x15c>)
   2024c:	4620      	mov	r0, r4
   2024e:	f00a f94f 	bl	2a4f0 <lwm2m_engine_set_res_data>

	return 0;
}
   20252:	2000      	movs	r0, #0
   20254:	bd10      	pop	{r4, pc}
   20256:	bf00      	nop
   20258:	000478c4 	.word	0x000478c4
   2025c:	000478dd 	.word	0x000478dd
   20260:	000478e3 	.word	0x000478e3
   20264:	000478f4 	.word	0x000478f4
   20268:	000478fa 	.word	0x000478fa
   2026c:	000200e5 	.word	0x000200e5
   20270:	00047900 	.word	0x00047900
   20274:	0002012d 	.word	0x0002012d
   20278:	00047906 	.word	0x00047906
   2027c:	0004790c 	.word	0x0004790c
   20280:	0004791d 	.word	0x0004791d
   20284:	00047924 	.word	0x00047924
   20288:	00047931 	.word	0x00047931
   2028c:	00047946 	.word	0x00047946
   20290:	2003288a 	.word	0x2003288a
   20294:	00047938 	.word	0x00047938
   20298:	20032330 	.word	0x20032330
   2029c:	0004793f 	.word	0x0004793f
   202a0:	0004794e 	.word	0x0004794e
   202a4:	20032889 	.word	0x20032889
   202a8:	00047956 	.word	0x00047956
   202ac:	2003232c 	.word	0x2003232c
   202b0:	0004795e 	.word	0x0004795e
   202b4:	20032328 	.word	0x20032328
   202b8:	00047966 	.word	0x00047966
   202bc:	2003288b 	.word	0x2003288b
   202c0:	0004796e 	.word	0x0004796e
   202c4:	20032338 	.word	0x20032338
   202c8:	20032334 	.word	0x20032334

000202cc <lwm2m_init_security>:
	return 0;
}
#endif

int lwm2m_init_security(struct lwm2m_ctx *ctx, char *endpoint)
{
   202cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   202d0:	b086      	sub	sp, #24
   202d2:	4605      	mov	r5, r0
   202d4:	460f      	mov	r7, r1
	u8_t server_url_flags;

	/* setup SECURITY object */

	/* Server URL */
	ret = lwm2m_engine_get_res_data("0/0/0",
   202d6:	f10d 0311 	add.w	r3, sp, #17
   202da:	f10d 0212 	add.w	r2, sp, #18
   202de:	a905      	add	r1, sp, #20
   202e0:	481e      	ldr	r0, [pc, #120]	; (2035c <lwm2m_init_security+0x90>)
   202e2:	f00a f95d 	bl	2a5a0 <lwm2m_engine_get_res_data>
					(void **)&server_url, &server_url_len,
					&server_url_flags);
	if (ret < 0) {
   202e6:	1e06      	subs	r6, r0, #0
   202e8:	db33      	blt.n	20352 <lwm2m_init_security+0x86>
		return ret;
	}

	snprintk(server_url, server_url_len, "coap%s//%s%s%s",
		 IS_ENABLED(CONFIG_LWM2M_DTLS_SUPPORT) ? "s:" : ":",
		 strchr(SERVER_ADDR, ':') ? "[" : "", SERVER_ADDR,
   202ea:	213a      	movs	r1, #58	; 0x3a
   202ec:	481c      	ldr	r0, [pc, #112]	; (20360 <lwm2m_init_security+0x94>)
	snprintk(server_url, server_url_len, "coap%s//%s%s%s",
   202ee:	f8dd 8014 	ldr.w	r8, [sp, #20]
   202f2:	f8bd 9012 	ldrh.w	r9, [sp, #18]
		 strchr(SERVER_ADDR, ':') ? "[" : "", SERVER_ADDR,
   202f6:	f024 ff1e 	bl	45136 <strchr>
	snprintk(server_url, server_url_len, "coap%s//%s%s%s",
   202fa:	f8df a090 	ldr.w	sl, [pc, #144]	; 2038c <lwm2m_init_security+0xc0>
   202fe:	4c19      	ldr	r4, [pc, #100]	; (20364 <lwm2m_init_security+0x98>)
		 strchr(SERVER_ADDR, ':') ? "]" : "");
   20300:	213a      	movs	r1, #58	; 0x3a
	snprintk(server_url, server_url_len, "coap%s//%s%s%s",
   20302:	2800      	cmp	r0, #0
   20304:	bf08      	it	eq
   20306:	4654      	moveq	r4, sl
		 strchr(SERVER_ADDR, ':') ? "]" : "");
   20308:	4815      	ldr	r0, [pc, #84]	; (20360 <lwm2m_init_security+0x94>)
   2030a:	f024 ff14 	bl	45136 <strchr>
	snprintk(server_url, server_url_len, "coap%s//%s%s%s",
   2030e:	4b16      	ldr	r3, [pc, #88]	; (20368 <lwm2m_init_security+0x9c>)
   20310:	4a16      	ldr	r2, [pc, #88]	; (2036c <lwm2m_init_security+0xa0>)
   20312:	2800      	cmp	r0, #0
   20314:	bf14      	ite	ne
   20316:	4618      	movne	r0, r3
   20318:	4650      	moveq	r0, sl
   2031a:	4b11      	ldr	r3, [pc, #68]	; (20360 <lwm2m_init_security+0x94>)
   2031c:	9002      	str	r0, [sp, #8]
   2031e:	e9cd 4300 	strd	r4, r3, [sp]
   20322:	4649      	mov	r1, r9
   20324:	4b12      	ldr	r3, [pc, #72]	; (20370 <lwm2m_init_security+0xa4>)
   20326:	4640      	mov	r0, r8
   20328:	f020 f978 	bl	4061c <snprintk>

	/* Security Mode */
	lwm2m_engine_set_u8("0/0/2",
   2032c:	2100      	movs	r1, #0
   2032e:	4811      	ldr	r0, [pc, #68]	; (20374 <lwm2m_init_security+0xa8>)
   20330:	f022 fe60 	bl	42ff4 <lwm2m_engine_set_u8>
			    IS_ENABLED(CONFIG_LWM2M_DTLS_SUPPORT) ? 0 : 3);
#if defined(CONFIG_LWM2M_DTLS_SUPPORT)
	ctx->tls_tag = TLS_TAG;
   20334:	4b10      	ldr	r3, [pc, #64]	; (20378 <lwm2m_init_security+0xac>)
	ctx->load_credentials = load_credentials_dummy;

	lwm2m_engine_set_string("0/0/3", endpoint);
   20336:	4639      	mov	r1, r7
	ctx->tls_tag = TLS_TAG;
   20338:	f8c5 3118 	str.w	r3, [r5, #280]	; 0x118
	ctx->load_credentials = load_credentials_dummy;
   2033c:	4b0f      	ldr	r3, [pc, #60]	; (2037c <lwm2m_init_security+0xb0>)
	lwm2m_engine_set_string("0/0/3", endpoint);
   2033e:	4810      	ldr	r0, [pc, #64]	; (20380 <lwm2m_init_security+0xb4>)
	ctx->load_credentials = load_credentials_dummy;
   20340:	f8c5 311c 	str.w	r3, [r5, #284]	; 0x11c
	lwm2m_engine_set_string("0/0/3", endpoint);
   20344:	f022 fe49 	bl	42fda <lwm2m_engine_set_string>
	lwm2m_engine_set_opaque("0/0/5",
   20348:	2221      	movs	r2, #33	; 0x21
   2034a:	490e      	ldr	r1, [pc, #56]	; (20384 <lwm2m_init_security+0xb8>)
   2034c:	480e      	ldr	r0, [pc, #56]	; (20388 <lwm2m_init_security+0xbc>)
   2034e:	f022 fe42 	bl	42fd6 <lwm2m_engine_set_opaque>
				(void *)client_psk, sizeof(client_psk));
#endif /* CONFIG_LWM2M_DTLS_SUPPORT */
	return ret;
}
   20352:	4630      	mov	r0, r6
   20354:	b006      	add	sp, #24
   20356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   2035a:	bf00      	nop
   2035c:	00047989 	.word	0x00047989
   20360:	0004798f 	.word	0x0004798f
   20364:	00047987 	.word	0x00047987
   20368:	0004b39d 	.word	0x0004b39d
   2036c:	000479a9 	.word	0x000479a9
   20370:	00048b2a 	.word	0x00048b2a
   20374:	000479b8 	.word	0x000479b8
   20378:	02211e3d 	.word	0x02211e3d
   2037c:	00040065 	.word	0x00040065
   20380:	000479be 	.word	0x000479be
   20384:	2003288c 	.word	0x2003288c
   20388:	000479c4 	.word	0x000479c4
   2038c:	0004a299 	.word	0x0004a299

00020390 <gps_event_handler>:
static void gps_event_handler(struct device *dev, struct gps_event *evt)
{
	ARG_UNUSED(dev);
	static u32_t timestamp_prev;

	if (evt->type != GPS_EVT_NMEA_FIX) {
   20390:	780b      	ldrb	r3, [r1, #0]
{
   20392:	b510      	push	{r4, lr}
	if (evt->type != GPS_EVT_NMEA_FIX) {
   20394:	2b06      	cmp	r3, #6
   20396:	d138      	bne.n	2040a <gps_event_handler+0x7a>
	return z_impl_k_uptime_get();
   20398:	f024 fc93 	bl	44cc2 <z_impl_k_uptime_get>
		return;
	}

	if (k_uptime_get_32() - timestamp_prev <
   2039c:	4c1b      	ldr	r4, [pc, #108]	; (2040c <gps_event_handler+0x7c>)
   2039e:	6823      	ldr	r3, [r4, #0]
   203a0:	1ac0      	subs	r0, r0, r3
   203a2:	f64e 235f 	movw	r3, #59999	; 0xea5f
   203a6:	4298      	cmp	r0, r3
   203a8:	d92f      	bls.n	2040a <gps_event_handler+0x7a>
	    K_SECONDS(CONFIG_APP_HOLD_TIME_GPS)) {
		return;
	}

	if (gps_dev == NULL) {
   203aa:	4a19      	ldr	r2, [pc, #100]	; (20410 <gps_event_handler+0x80>)
   203ac:	4b19      	ldr	r3, [pc, #100]	; (20414 <gps_event_handler+0x84>)
   203ae:	6812      	ldr	r2, [r2, #0]
   203b0:	681b      	ldr	r3, [r3, #0]
   203b2:	b9b2      	cbnz	r2, 203e2 <gps_event_handler+0x52>
		LOG_ERR("Could not get %s device",
   203b4:	075a      	lsls	r2, r3, #29
   203b6:	d028      	beq.n	2040a <gps_event_handler+0x7a>
   203b8:	2301      	movs	r3, #1
   203ba:	f04f 0400 	mov.w	r4, #0
   203be:	4a16      	ldr	r2, [pc, #88]	; (20418 <gps_event_handler+0x88>)
   203c0:	f363 0407 	bfi	r4, r3, #0, #8
   203c4:	4b15      	ldr	r3, [pc, #84]	; (2041c <gps_event_handler+0x8c>)
   203c6:	4816      	ldr	r0, [pc, #88]	; (20420 <gps_event_handler+0x90>)
   203c8:	1a9b      	subs	r3, r3, r2
   203ca:	08db      	lsrs	r3, r3, #3
   203cc:	f363 148f 	bfi	r4, r3, #6, #10
   203d0:	f001 fc6c 	bl	21cac <log_strdup>
   203d4:	4622      	mov	r2, r4

	memcpy(&nmea_data, &evt->nmea, sizeof(struct gps_nmea));

	update_location_data(&nmea_data);
	timestamp_prev = k_uptime_get_32();
}
   203d6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		LOG_ERR("Could not get %s device",
   203da:	4601      	mov	r1, r0
   203dc:	4811      	ldr	r0, [pc, #68]	; (20424 <gps_event_handler+0x94>)
   203de:	f020 bb3d 	b.w	40a5c <log_1>
	LOG_DBG("nmea_data");
   203e2:	075b      	lsls	r3, r3, #29
   203e4:	d50e      	bpl.n	20404 <gps_event_handler+0x74>
   203e6:	2304      	movs	r3, #4
   203e8:	f04f 0200 	mov.w	r2, #0
   203ec:	490a      	ldr	r1, [pc, #40]	; (20418 <gps_event_handler+0x88>)
   203ee:	f363 0207 	bfi	r2, r3, #0, #8
   203f2:	4b0a      	ldr	r3, [pc, #40]	; (2041c <gps_event_handler+0x8c>)
   203f4:	480c      	ldr	r0, [pc, #48]	; (20428 <gps_event_handler+0x98>)
   203f6:	1a5b      	subs	r3, r3, r1
   203f8:	08db      	lsrs	r3, r3, #3
   203fa:	f363 128f 	bfi	r2, r3, #6, #10
   203fe:	490b      	ldr	r1, [pc, #44]	; (2042c <gps_event_handler+0x9c>)
   20400:	f020 fb2c 	bl	40a5c <log_1>
   20404:	f024 fc5d 	bl	44cc2 <z_impl_k_uptime_get>
 *
 * @return The low 32 bits of the current uptime, in milliseconds.
 */
static inline u32_t k_uptime_get_32(void)
{
	return (u32_t)k_uptime_get();
   20408:	6020      	str	r0, [r4, #0]
}
   2040a:	bd10      	pop	{r4, pc}
   2040c:	20021bd4 	.word	0x20021bd4
   20410:	20021bd0 	.word	0x20021bd0
   20414:	20032aa8 	.word	0x20032aa8
   20418:	00045f08 	.word	0x00045f08
   2041c:	00045f50 	.word	0x00045f50
   20420:	00047a06 	.word	0x00047a06
   20424:	00047a0e 	.word	0x00047a0e
   20428:	00047a26 	.word	0x00047a26
   2042c:	000479dd 	.word	0x000479dd

00020430 <lwm2m_init_location>:

int lwm2m_init_location(void)
{
   20430:	b570      	push	{r4, r5, r6, lr}
	if (z_syscall_trap()) {
		return (struct device *) arch_syscall_invoke1(*(uintptr_t *)&name, K_SYSCALL_DEVICE_GET_BINDING);
	}
#endif
	compiler_barrier();
	return z_impl_device_get_binding(name);
   20432:	482c      	ldr	r0, [pc, #176]	; (204e4 <lwm2m_init_location+0xb4>)
   20434:	f01a fe28 	bl	3b088 <z_impl_device_get_binding>
	int err;

	gps_dev = device_get_binding(CONFIG_GPS_DEV_NAME);
   20438:	4e2b      	ldr	r6, [pc, #172]	; (204e8 <lwm2m_init_location+0xb8>)
   2043a:	4d2c      	ldr	r5, [pc, #176]	; (204ec <lwm2m_init_location+0xbc>)
   2043c:	6030      	str	r0, [r6, #0]
	if (gps_dev == NULL) {
		LOG_ERR("Could not get %s device",
   2043e:	682b      	ldr	r3, [r5, #0]
	if (gps_dev == NULL) {
   20440:	b9b8      	cbnz	r0, 20472 <lwm2m_init_location+0x42>
		LOG_ERR("Could not get %s device",
   20442:	0759      	lsls	r1, r3, #29
   20444:	d012      	beq.n	2046c <lwm2m_init_location+0x3c>
   20446:	2301      	movs	r3, #1
   20448:	f04f 0400 	mov.w	r4, #0
   2044c:	4a28      	ldr	r2, [pc, #160]	; (204f0 <lwm2m_init_location+0xc0>)
   2044e:	f363 0407 	bfi	r4, r3, #0, #8
   20452:	4b28      	ldr	r3, [pc, #160]	; (204f4 <lwm2m_init_location+0xc4>)
   20454:	4823      	ldr	r0, [pc, #140]	; (204e4 <lwm2m_init_location+0xb4>)
   20456:	1a9b      	subs	r3, r3, r2
   20458:	08db      	lsrs	r3, r3, #3
   2045a:	f363 148f 	bfi	r4, r3, #6, #10
   2045e:	f001 fc25 	bl	21cac <log_strdup>
   20462:	4622      	mov	r2, r4
   20464:	4601      	mov	r1, r0
   20466:	4824      	ldr	r0, [pc, #144]	; (204f8 <lwm2m_init_location+0xc8>)
   20468:	f020 faf8 	bl	40a5c <log_1>
			log_strdup(CONFIG_GPS_DEV_NAME));
		return -EINVAL;
   2046c:	f06f 0415 	mvn.w	r4, #21
   20470:	e030      	b.n	204d4 <lwm2m_init_location+0xa4>
	}

	LOG_DBG("GPS device found: %s", log_strdup(CONFIG_GPS_DEV_NAME));
   20472:	075a      	lsls	r2, r3, #29
   20474:	d513      	bpl.n	2049e <lwm2m_init_location+0x6e>
   20476:	2304      	movs	r3, #4
   20478:	f04f 0400 	mov.w	r4, #0
   2047c:	4a1d      	ldr	r2, [pc, #116]	; (204f4 <lwm2m_init_location+0xc4>)
   2047e:	f363 0407 	bfi	r4, r3, #0, #8
   20482:	4b1b      	ldr	r3, [pc, #108]	; (204f0 <lwm2m_init_location+0xc0>)
   20484:	4817      	ldr	r0, [pc, #92]	; (204e4 <lwm2m_init_location+0xb4>)
   20486:	1ad2      	subs	r2, r2, r3
   20488:	08d2      	lsrs	r2, r2, #3
   2048a:	f362 148f 	bfi	r4, r2, #6, #10
   2048e:	f001 fc0d 	bl	21cac <log_strdup>
   20492:	4623      	mov	r3, r4
   20494:	4602      	mov	r2, r0
   20496:	4919      	ldr	r1, [pc, #100]	; (204fc <lwm2m_init_location+0xcc>)
   20498:	4819      	ldr	r0, [pc, #100]	; (20500 <lwm2m_init_location+0xd0>)
   2049a:	f020 faf3 	bl	40a84 <log_2>

	err = gps_init(gps_dev, gps_event_handler);
   2049e:	6830      	ldr	r0, [r6, #0]
 */
static inline int gps_init(struct device *dev, gps_event_handler_t handler)
{
	struct gps_driver_api *api;

	if ((dev == NULL) || (handler == NULL)) {
   204a0:	b1d0      	cbz	r0, 204d8 <lwm2m_init_location+0xa8>
		return -EINVAL;
	}

	api = (struct gps_driver_api *)dev->driver_api;

	if (api->init == NULL) {
   204a2:	6843      	ldr	r3, [r0, #4]
   204a4:	68db      	ldr	r3, [r3, #12]
   204a6:	b1d3      	cbz	r3, 204de <lwm2m_init_location+0xae>
		return -ENOTSUP;
	}

	return api->init(dev, handler);
   204a8:	4916      	ldr	r1, [pc, #88]	; (20504 <lwm2m_init_location+0xd4>)
   204aa:	4798      	blx	r3
	if (err) {
   204ac:	4604      	mov	r4, r0
   204ae:	b188      	cbz	r0, 204d4 <lwm2m_init_location+0xa4>
		LOG_ERR("Could not set trigger, error code: %d", err);
   204b0:	682b      	ldr	r3, [r5, #0]
   204b2:	075b      	lsls	r3, r3, #29
   204b4:	d00e      	beq.n	204d4 <lwm2m_init_location+0xa4>
   204b6:	2301      	movs	r3, #1
   204b8:	f04f 0200 	mov.w	r2, #0
   204bc:	490c      	ldr	r1, [pc, #48]	; (204f0 <lwm2m_init_location+0xc0>)
   204be:	f363 0207 	bfi	r2, r3, #0, #8
   204c2:	4b0c      	ldr	r3, [pc, #48]	; (204f4 <lwm2m_init_location+0xc4>)
   204c4:	4810      	ldr	r0, [pc, #64]	; (20508 <lwm2m_init_location+0xd8>)
   204c6:	1a5b      	subs	r3, r3, r1
   204c8:	08db      	lsrs	r3, r3, #3
   204ca:	f363 128f 	bfi	r2, r3, #6, #10
   204ce:	4621      	mov	r1, r4
   204d0:	f020 fac4 	bl	40a5c <log_1>
		return err;
	}

	return 0;
}
   204d4:	4620      	mov	r0, r4
   204d6:	bd70      	pop	{r4, r5, r6, pc}
		return -EINVAL;
   204d8:	f06f 0415 	mvn.w	r4, #21
   204dc:	e7e8      	b.n	204b0 <lwm2m_init_location+0x80>
		return -ENOTSUP;
   204de:	f06f 0485 	mvn.w	r4, #133	; 0x85
   204e2:	e7e5      	b.n	204b0 <lwm2m_init_location+0x80>
   204e4:	00047a06 	.word	0x00047a06
   204e8:	20021bd0 	.word	0x20021bd0
   204ec:	20032aa8 	.word	0x20032aa8
   204f0:	00045f08 	.word	0x00045f08
   204f4:	00045f50 	.word	0x00045f50
   204f8:	00047a0e 	.word	0x00047a0e
   204fc:	000479f2 	.word	0x000479f2
   20500:	00047a34 	.word	0x00047a34
   20504:	00020391 	.word	0x00020391
   20508:	00047a4d 	.word	0x00047a4d

0002050c <firmware_get_buf>:
}

static void *firmware_get_buf(u16_t obj_inst_id, u16_t res_id,
			      u16_t res_inst_id, size_t *data_len)
{
	*data_len = sizeof(firmware_buf);
   2050c:	f44f 7280 	mov.w	r2, #256	; 0x100
	return firmware_buf;
}
   20510:	4801      	ldr	r0, [pc, #4]	; (20518 <firmware_get_buf+0xc>)
	*data_len = sizeof(firmware_buf);
   20512:	601a      	str	r2, [r3, #0]
}
   20514:	4770      	bx	lr
   20516:	bf00      	nop
   20518:	2002987e 	.word	0x2002987e

0002051c <firmware_block_received_cb>:

static int firmware_block_received_cb(u16_t obj_inst_id,
				      u16_t res_id, u16_t res_inst_id,
				      u8_t *data, u16_t data_len,
				      bool last_block, size_t total_size)
{
   2051c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   20520:	9d0c      	ldr	r5, [sp, #48]	; 0x30
   20522:	4699      	mov	r9, r3
	static u8_t percent_downloaded;
	static u32_t bytes_downloaded;
	u8_t downloaded;
	int ret = 0;

	if (total_size > FLASH_BANK_SIZE) {
   20524:	f5b5 2fee 	cmp.w	r5, #487424	; 0x77000
{
   20528:	f8bd 7028 	ldrh.w	r7, [sp, #40]	; 0x28
   2052c:	f89d 802c 	ldrb.w	r8, [sp, #44]	; 0x2c
	if (total_size > FLASH_BANK_SIZE) {
   20530:	d915      	bls.n	2055e <firmware_block_received_cb+0x42>
		LOG_ERR("Artifact file size too big (%d)", total_size);
   20532:	4b5e      	ldr	r3, [pc, #376]	; (206ac <firmware_block_received_cb+0x190>)
   20534:	681b      	ldr	r3, [r3, #0]
   20536:	075c      	lsls	r4, r3, #29
   20538:	d00e      	beq.n	20558 <firmware_block_received_cb+0x3c>
   2053a:	2301      	movs	r3, #1
   2053c:	f04f 0200 	mov.w	r2, #0
   20540:	495b      	ldr	r1, [pc, #364]	; (206b0 <firmware_block_received_cb+0x194>)
   20542:	f363 0207 	bfi	r2, r3, #0, #8
   20546:	4b5b      	ldr	r3, [pc, #364]	; (206b4 <firmware_block_received_cb+0x198>)
   20548:	485b      	ldr	r0, [pc, #364]	; (206b8 <firmware_block_received_cb+0x19c>)
   2054a:	1a5b      	subs	r3, r3, r1
   2054c:	08db      	lsrs	r3, r3, #3
   2054e:	f363 128f 	bfi	r2, r3, #6, #10
   20552:	4629      	mov	r1, r5
   20554:	f020 fa82 	bl	40a5c <log_1>
		return -EINVAL;
   20558:	f06f 0a15 	mvn.w	sl, #21
   2055c:	e049      	b.n	205f2 <firmware_block_received_cb+0xd6>
	}

	if (!data_len) {
   2055e:	b997      	cbnz	r7, 20586 <firmware_block_received_cb+0x6a>
		LOG_ERR("Data len is zero, nothing to write.");
   20560:	4b52      	ldr	r3, [pc, #328]	; (206ac <firmware_block_received_cb+0x190>)
   20562:	681b      	ldr	r3, [r3, #0]
   20564:	0758      	lsls	r0, r3, #29
   20566:	d0f7      	beq.n	20558 <firmware_block_received_cb+0x3c>
   20568:	2301      	movs	r3, #1
   2056a:	f04f 0100 	mov.w	r1, #0
   2056e:	4a50      	ldr	r2, [pc, #320]	; (206b0 <firmware_block_received_cb+0x194>)
   20570:	f363 0107 	bfi	r1, r3, #0, #8
   20574:	4b4f      	ldr	r3, [pc, #316]	; (206b4 <firmware_block_received_cb+0x198>)
   20576:	4851      	ldr	r0, [pc, #324]	; (206bc <firmware_block_received_cb+0x1a0>)
   20578:	1a9b      	subs	r3, r3, r2
   2057a:	08db      	lsrs	r3, r3, #3
   2057c:	f363 118f 	bfi	r1, r3, #6, #10
   20580:	f020 fa5f 	bl	40a42 <log_0>
   20584:	e7e8      	b.n	20558 <firmware_block_received_cb+0x3c>
		return -EINVAL;
	}

	/* Erase bank 1 before starting the write process */
	if (bytes_downloaded == 0) {
   20586:	4c4e      	ldr	r4, [pc, #312]	; (206c0 <firmware_block_received_cb+0x1a4>)
   20588:	4e4e      	ldr	r6, [pc, #312]	; (206c4 <firmware_block_received_cb+0x1a8>)
   2058a:	6823      	ldr	r3, [r4, #0]
   2058c:	bba3      	cbnz	r3, 205f8 <firmware_block_received_cb+0xdc>
		flash_img_init(&dfu_ctx);
   2058e:	484e      	ldr	r0, [pc, #312]	; (206c8 <firmware_block_received_cb+0x1ac>)
   20590:	f021 fcb3 	bl	41efa <flash_img_init>
#if defined(CONFIG_FOTA_ERASE_PROGRESSIVELY)
		LOG_INF("Download firmware started, erasing progressively.");
#else
		LOG_INF("Download firmware started, erasing second bank");
   20594:	4a45      	ldr	r2, [pc, #276]	; (206ac <firmware_block_received_cb+0x190>)
   20596:	6813      	ldr	r3, [r2, #0]
   20598:	4693      	mov	fp, r2
   2059a:	f003 0307 	and.w	r3, r3, #7
   2059e:	2b02      	cmp	r3, #2
   205a0:	d90d      	bls.n	205be <firmware_block_received_cb+0xa2>
   205a2:	2303      	movs	r3, #3
   205a4:	f04f 0100 	mov.w	r1, #0
   205a8:	4a41      	ldr	r2, [pc, #260]	; (206b0 <firmware_block_received_cb+0x194>)
   205aa:	f363 0107 	bfi	r1, r3, #0, #8
   205ae:	4b41      	ldr	r3, [pc, #260]	; (206b4 <firmware_block_received_cb+0x198>)
   205b0:	4846      	ldr	r0, [pc, #280]	; (206cc <firmware_block_received_cb+0x1b0>)
   205b2:	1a9b      	subs	r3, r3, r2
   205b4:	08db      	lsrs	r3, r3, #3
   205b6:	f363 118f 	bfi	r1, r3, #6, #10
   205ba:	f020 fa42 	bl	40a42 <log_0>
		ret = boot_erase_img_bank(FLASH_AREA_IMAGE_SECONDARY);
   205be:	2006      	movs	r0, #6
   205c0:	f021 fc3c 	bl	41e3c <boot_erase_img_bank>
		if (ret != 0) {
   205c4:	4682      	mov	sl, r0
   205c6:	b1b8      	cbz	r0, 205f8 <firmware_block_received_cb+0xdc>
			LOG_ERR("Failed to erase flash bank 1");
   205c8:	f8db 3000 	ldr.w	r3, [fp]
   205cc:	0759      	lsls	r1, r3, #29
   205ce:	d00d      	beq.n	205ec <firmware_block_received_cb+0xd0>
   205d0:	2301      	movs	r3, #1
   205d2:	f04f 0100 	mov.w	r1, #0
   205d6:	4a36      	ldr	r2, [pc, #216]	; (206b0 <firmware_block_received_cb+0x194>)
   205d8:	f363 0107 	bfi	r1, r3, #0, #8
   205dc:	4b35      	ldr	r3, [pc, #212]	; (206b4 <firmware_block_received_cb+0x198>)
   205de:	483c      	ldr	r0, [pc, #240]	; (206d0 <firmware_block_received_cb+0x1b4>)
   205e0:	1a9b      	subs	r3, r3, r2
   205e2:	08db      	lsrs	r3, r3, #3
   205e4:	f363 118f 	bfi	r1, r3, #6, #10
		LOG_INF("%d%%", percent_downloaded);
	}

	ret = flash_img_buffered_write(&dfu_ctx, data, data_len, last_block);
	if (ret < 0) {
		LOG_ERR("Failed to write flash block");
   205e8:	f020 fa2b 	bl	40a42 <log_0>
			bytes_downloaded, total_size);
		ret = -EIO;
	}

cleanup:
	bytes_downloaded = 0;
   205ec:	2300      	movs	r3, #0
   205ee:	6023      	str	r3, [r4, #0]
	percent_downloaded = 0;
   205f0:	7033      	strb	r3, [r6, #0]

	return ret;
}
   205f2:	4650      	mov	r0, sl
   205f4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	bytes_downloaded += data_len;
   205f8:	6821      	ldr	r1, [r4, #0]
   205fa:	187b      	adds	r3, r7, r1
   205fc:	6023      	str	r3, [r4, #0]
	if (total_size) {
   205fe:	2164      	movs	r1, #100	; 0x64
   20600:	b11d      	cbz	r5, 2060a <firmware_block_received_cb+0xee>
		downloaded = bytes_downloaded * 100 / total_size;
   20602:	4359      	muls	r1, r3
   20604:	fbb1 f1f5 	udiv	r1, r1, r5
   20608:	b2c9      	uxtb	r1, r1
	if (downloaded > percent_downloaded) {
   2060a:	7833      	ldrb	r3, [r6, #0]
   2060c:	428b      	cmp	r3, r1
   2060e:	d214      	bcs.n	2063a <firmware_block_received_cb+0x11e>
		LOG_INF("%d%%", percent_downloaded);
   20610:	4b26      	ldr	r3, [pc, #152]	; (206ac <firmware_block_received_cb+0x190>)
		percent_downloaded = downloaded;
   20612:	7031      	strb	r1, [r6, #0]
		LOG_INF("%d%%", percent_downloaded);
   20614:	681b      	ldr	r3, [r3, #0]
   20616:	f003 0307 	and.w	r3, r3, #7
   2061a:	2b02      	cmp	r3, #2
   2061c:	d90d      	bls.n	2063a <firmware_block_received_cb+0x11e>
   2061e:	2303      	movs	r3, #3
   20620:	f04f 0200 	mov.w	r2, #0
   20624:	4822      	ldr	r0, [pc, #136]	; (206b0 <firmware_block_received_cb+0x194>)
   20626:	f363 0207 	bfi	r2, r3, #0, #8
   2062a:	4b22      	ldr	r3, [pc, #136]	; (206b4 <firmware_block_received_cb+0x198>)
   2062c:	1a1b      	subs	r3, r3, r0
   2062e:	08db      	lsrs	r3, r3, #3
   20630:	f363 128f 	bfi	r2, r3, #6, #10
   20634:	4827      	ldr	r0, [pc, #156]	; (206d4 <firmware_block_received_cb+0x1b8>)
   20636:	f020 fa11 	bl	40a5c <log_1>
	ret = flash_img_buffered_write(&dfu_ctx, data, data_len, last_block);
   2063a:	4643      	mov	r3, r8
   2063c:	463a      	mov	r2, r7
   2063e:	4649      	mov	r1, r9
   20640:	4821      	ldr	r0, [pc, #132]	; (206c8 <firmware_block_received_cb+0x1ac>)
   20642:	f021 fc0d 	bl	41e60 <flash_img_buffered_write>
	if (ret < 0) {
   20646:	f1b0 0a00 	subs.w	sl, r0, #0
   2064a:	da10      	bge.n	2066e <firmware_block_received_cb+0x152>
		LOG_ERR("Failed to write flash block");
   2064c:	4b17      	ldr	r3, [pc, #92]	; (206ac <firmware_block_received_cb+0x190>)
   2064e:	681b      	ldr	r3, [r3, #0]
   20650:	075a      	lsls	r2, r3, #29
   20652:	d0cb      	beq.n	205ec <firmware_block_received_cb+0xd0>
   20654:	2301      	movs	r3, #1
   20656:	f04f 0100 	mov.w	r1, #0
   2065a:	4a15      	ldr	r2, [pc, #84]	; (206b0 <firmware_block_received_cb+0x194>)
   2065c:	f363 0107 	bfi	r1, r3, #0, #8
   20660:	4b14      	ldr	r3, [pc, #80]	; (206b4 <firmware_block_received_cb+0x198>)
   20662:	481d      	ldr	r0, [pc, #116]	; (206d8 <firmware_block_received_cb+0x1bc>)
   20664:	1a9b      	subs	r3, r3, r2
   20666:	08db      	lsrs	r3, r3, #3
   20668:	f363 118f 	bfi	r1, r3, #6, #10
   2066c:	e7bc      	b.n	205e8 <firmware_block_received_cb+0xcc>
	if (!last_block) {
   2066e:	f1b8 0f00 	cmp.w	r8, #0
   20672:	d0be      	beq.n	205f2 <firmware_block_received_cb+0xd6>
	if (total_size && (bytes_downloaded != total_size)) {
   20674:	2d00      	cmp	r5, #0
   20676:	d0b9      	beq.n	205ec <firmware_block_received_cb+0xd0>
   20678:	6821      	ldr	r1, [r4, #0]
   2067a:	428d      	cmp	r5, r1
   2067c:	d0b6      	beq.n	205ec <firmware_block_received_cb+0xd0>
		LOG_ERR("Early last block, downloaded %d, expecting %d",
   2067e:	4b0b      	ldr	r3, [pc, #44]	; (206ac <firmware_block_received_cb+0x190>)
   20680:	681b      	ldr	r3, [r3, #0]
   20682:	075b      	lsls	r3, r3, #29
   20684:	d00e      	beq.n	206a4 <firmware_block_received_cb+0x188>
   20686:	2201      	movs	r2, #1
   20688:	f04f 0300 	mov.w	r3, #0
   2068c:	4808      	ldr	r0, [pc, #32]	; (206b0 <firmware_block_received_cb+0x194>)
   2068e:	f362 0307 	bfi	r3, r2, #0, #8
   20692:	4a08      	ldr	r2, [pc, #32]	; (206b4 <firmware_block_received_cb+0x198>)
   20694:	1a12      	subs	r2, r2, r0
   20696:	08d2      	lsrs	r2, r2, #3
   20698:	f362 138f 	bfi	r3, r2, #6, #10
   2069c:	480f      	ldr	r0, [pc, #60]	; (206dc <firmware_block_received_cb+0x1c0>)
   2069e:	462a      	mov	r2, r5
   206a0:	f020 f9f0 	bl	40a84 <log_2>
		ret = -EIO;
   206a4:	f06f 0a04 	mvn.w	sl, #4
   206a8:	e7a0      	b.n	205ec <firmware_block_received_cb+0xd0>
   206aa:	bf00      	nop
   206ac:	20032aa0 	.word	0x20032aa0
   206b0:	00045f08 	.word	0x00045f08
   206b4:	00045f40 	.word	0x00045f40
   206b8:	00047aa5 	.word	0x00047aa5
   206bc:	00047ac5 	.word	0x00047ac5
   206c0:	20021bd8 	.word	0x20021bd8
   206c4:	2002997e 	.word	0x2002997e
   206c8:	20021bdc 	.word	0x20021bdc
   206cc:	00047ae9 	.word	0x00047ae9
   206d0:	00047b18 	.word	0x00047b18
   206d4:	00047b35 	.word	0x00047b35
   206d8:	00047b3a 	.word	0x00047b3a
   206dc:	00047b56 	.word	0x00047b56

000206e0 <firmware_update_cb>:
{
   206e0:	b537      	push	{r0, r1, r2, r4, r5, lr}
	LOG_DBG("Executing firmware update");
   206e2:	4c3a      	ldr	r4, [pc, #232]	; (207cc <firmware_update_cb+0xec>)
   206e4:	6823      	ldr	r3, [r4, #0]
   206e6:	0759      	lsls	r1, r3, #29
   206e8:	d50e      	bpl.n	20708 <firmware_update_cb+0x28>
   206ea:	2304      	movs	r3, #4
   206ec:	f04f 0200 	mov.w	r2, #0
   206f0:	4937      	ldr	r1, [pc, #220]	; (207d0 <firmware_update_cb+0xf0>)
   206f2:	f363 0207 	bfi	r2, r3, #0, #8
   206f6:	4b37      	ldr	r3, [pc, #220]	; (207d4 <firmware_update_cb+0xf4>)
   206f8:	4837      	ldr	r0, [pc, #220]	; (207d8 <firmware_update_cb+0xf8>)
   206fa:	1a5b      	subs	r3, r3, r1
   206fc:	08db      	lsrs	r3, r3, #3
   206fe:	f363 128f 	bfi	r2, r3, #6, #10
   20702:	4936      	ldr	r1, [pc, #216]	; (207dc <firmware_update_cb+0xfc>)
   20704:	f020 f9aa 	bl	40a5c <log_1>
	ret = fota_update_counter_read(&update_counter);
   20708:	4668      	mov	r0, sp
   2070a:	f7ff fc95 	bl	20038 <fota_update_counter_read>
		LOG_ERR("Failed read update counter");
   2070e:	6823      	ldr	r3, [r4, #0]
	if (ret) {
   20710:	4605      	mov	r5, r0
   20712:	b190      	cbz	r0, 2073a <firmware_update_cb+0x5a>
		LOG_ERR("Failed read update counter");
   20714:	075a      	lsls	r2, r3, #29
   20716:	d00d      	beq.n	20734 <firmware_update_cb+0x54>
   20718:	2301      	movs	r3, #1
   2071a:	f04f 0100 	mov.w	r1, #0
   2071e:	4a2c      	ldr	r2, [pc, #176]	; (207d0 <firmware_update_cb+0xf0>)
   20720:	f363 0107 	bfi	r1, r3, #0, #8
   20724:	4b2b      	ldr	r3, [pc, #172]	; (207d4 <firmware_update_cb+0xf4>)
   20726:	482e      	ldr	r0, [pc, #184]	; (207e0 <firmware_update_cb+0x100>)
   20728:	1a9b      	subs	r3, r3, r2
   2072a:	08db      	lsrs	r3, r3, #3
   2072c:	f363 118f 	bfi	r1, r3, #6, #10
   20730:	f020 f987 	bl	40a42 <log_0>
}
   20734:	4628      	mov	r0, r5
   20736:	b003      	add	sp, #12
   20738:	bd30      	pop	{r4, r5, pc}
	LOG_INF("Update Counter: current %d, update %d",
   2073a:	f003 0307 	and.w	r3, r3, #7
   2073e:	2b02      	cmp	r3, #2
   20740:	d90f      	bls.n	20762 <firmware_update_cb+0x82>
   20742:	2203      	movs	r2, #3
   20744:	f04f 0300 	mov.w	r3, #0
   20748:	4921      	ldr	r1, [pc, #132]	; (207d0 <firmware_update_cb+0xf0>)
   2074a:	f362 0307 	bfi	r3, r2, #0, #8
   2074e:	4a21      	ldr	r2, [pc, #132]	; (207d4 <firmware_update_cb+0xf4>)
   20750:	4824      	ldr	r0, [pc, #144]	; (207e4 <firmware_update_cb+0x104>)
   20752:	1a52      	subs	r2, r2, r1
   20754:	08d2      	lsrs	r2, r2, #3
   20756:	f362 138f 	bfi	r3, r2, #6, #10
   2075a:	e9dd 1200 	ldrd	r1, r2, [sp]
   2075e:	f020 f991 	bl	40a84 <log_2>
	ret = fota_update_counter_update(COUNTER_UPDATE,
   20762:	9900      	ldr	r1, [sp, #0]
   20764:	2001      	movs	r0, #1
   20766:	3101      	adds	r1, #1
   20768:	f7ff fc70 	bl	2004c <fota_update_counter_update>
	if (ret) {
   2076c:	4605      	mov	r5, r0
   2076e:	b190      	cbz	r0, 20796 <firmware_update_cb+0xb6>
		LOG_ERR("Failed to update the update counter: %d", ret);
   20770:	6823      	ldr	r3, [r4, #0]
   20772:	075b      	lsls	r3, r3, #29
   20774:	d0de      	beq.n	20734 <firmware_update_cb+0x54>
   20776:	2301      	movs	r3, #1
   20778:	f04f 0200 	mov.w	r2, #0
   2077c:	4914      	ldr	r1, [pc, #80]	; (207d0 <firmware_update_cb+0xf0>)
   2077e:	f363 0207 	bfi	r2, r3, #0, #8
   20782:	4b14      	ldr	r3, [pc, #80]	; (207d4 <firmware_update_cb+0xf4>)
   20784:	1a5b      	subs	r3, r3, r1
   20786:	08db      	lsrs	r3, r3, #3
   20788:	4601      	mov	r1, r0
   2078a:	f363 128f 	bfi	r2, r3, #6, #10
   2078e:	4816      	ldr	r0, [pc, #88]	; (207e8 <firmware_update_cb+0x108>)
   20790:	f020 f964 	bl	40a5c <log_1>
   20794:	e7ce      	b.n	20734 <firmware_update_cb+0x54>
	boot_request_upgrade(false);
   20796:	f004 fa93 	bl	24cc0 <boot_request_upgrade>
	LOG_INF("Rebooting device");
   2079a:	6823      	ldr	r3, [r4, #0]
   2079c:	f003 0307 	and.w	r3, r3, #7
   207a0:	2b02      	cmp	r3, #2
   207a2:	d90d      	bls.n	207c0 <firmware_update_cb+0xe0>
   207a4:	2303      	movs	r3, #3
   207a6:	f04f 0100 	mov.w	r1, #0
   207aa:	4a09      	ldr	r2, [pc, #36]	; (207d0 <firmware_update_cb+0xf0>)
   207ac:	f363 0107 	bfi	r1, r3, #0, #8
   207b0:	4b08      	ldr	r3, [pc, #32]	; (207d4 <firmware_update_cb+0xf4>)
   207b2:	480e      	ldr	r0, [pc, #56]	; (207ec <firmware_update_cb+0x10c>)
   207b4:	1a9b      	subs	r3, r3, r2
   207b6:	08db      	lsrs	r3, r3, #3
   207b8:	f363 118f 	bfi	r1, r3, #6, #10
   207bc:	f020 f941 	bl	40a42 <log_0>
   207c0:	f001 fbfe 	bl	21fc0 <z_impl_log_panic>
	sys_reboot(0);
   207c4:	2000      	movs	r0, #0
   207c6:	f005 fa1b 	bl	25c00 <sys_reboot>
	return 0;
   207ca:	e7b3      	b.n	20734 <firmware_update_cb+0x54>
   207cc:	20032aa0 	.word	0x20032aa0
   207d0:	00045f08 	.word	0x00045f08
   207d4:	00045f40 	.word	0x00045f40
   207d8:	00047b84 	.word	0x00047b84
   207dc:	00047a81 	.word	0x00047a81
   207e0:	00047ba2 	.word	0x00047ba2
   207e4:	00047bbd 	.word	0x00047bbd
   207e8:	00047be3 	.word	0x00047be3
   207ec:	00047c0b 	.word	0x00047c0b

000207f0 <lwm2m_init_firmware>:
#endif

int lwm2m_init_firmware(void)
{
   207f0:	b508      	push	{r3, lr}
#if defined(CONFIG_LWM2M_FIRMWARE_UPDATE_OBJ_SUPPORT)
	lwm2m_firmware_set_update_cb(firmware_update_cb);
   207f2:	4806      	ldr	r0, [pc, #24]	; (2080c <lwm2m_init_firmware+0x1c>)
   207f4:	f00d f8e6 	bl	2d9c4 <lwm2m_firmware_set_update_cb>
	/* setup data buffer for block-wise transfer */
	lwm2m_engine_register_pre_write_callback("5/0/0", firmware_get_buf);
   207f8:	4905      	ldr	r1, [pc, #20]	; (20810 <lwm2m_init_firmware+0x20>)
   207fa:	4806      	ldr	r0, [pc, #24]	; (20814 <lwm2m_init_firmware+0x24>)
   207fc:	f022 fc5c 	bl	430b8 <lwm2m_engine_register_pre_write_callback>
	lwm2m_firmware_set_write_cb(firmware_block_received_cb);
   20800:	4805      	ldr	r0, [pc, #20]	; (20818 <lwm2m_init_firmware+0x28>)
   20802:	f00d f8d3 	bl	2d9ac <lwm2m_firmware_set_write_cb>
#endif

	return 0;
}
   20806:	2000      	movs	r0, #0
   20808:	bd08      	pop	{r3, pc}
   2080a:	bf00      	nop
   2080c:	000206e1 	.word	0x000206e1
   20810:	0002050d 	.word	0x0002050d
   20814:	00047c1c 	.word	0x00047c1c
   20818:	0002051d 	.word	0x0002051d

0002081c <lwm2m_init_image>:

int lwm2m_init_image(void)
{
   2081c:	b573      	push	{r0, r1, r4, r5, r6, lr}
	int ret = 0;
	struct update_counter counter;
	bool image_ok;

	/* Update boot status and update counter */
	ret = fota_update_counter_read(&counter);
   2081e:	4668      	mov	r0, sp
   20820:	f7ff fc0a 	bl	20038 <fota_update_counter_read>
	if (ret) {
   20824:	4c8a      	ldr	r4, [pc, #552]	; (20a50 <lwm2m_init_image+0x234>)
   20826:	4605      	mov	r5, r0
		LOG_ERR("Failed read update counter");
   20828:	6823      	ldr	r3, [r4, #0]
	if (ret) {
   2082a:	b190      	cbz	r0, 20852 <lwm2m_init_image+0x36>
		LOG_ERR("Failed read update counter");
   2082c:	0758      	lsls	r0, r3, #29
   2082e:	d00d      	beq.n	2084c <lwm2m_init_image+0x30>
   20830:	2301      	movs	r3, #1
   20832:	f04f 0100 	mov.w	r1, #0
   20836:	4a87      	ldr	r2, [pc, #540]	; (20a54 <lwm2m_init_image+0x238>)
   20838:	f363 0107 	bfi	r1, r3, #0, #8
   2083c:	4b86      	ldr	r3, [pc, #536]	; (20a58 <lwm2m_init_image+0x23c>)
   2083e:	4887      	ldr	r0, [pc, #540]	; (20a5c <lwm2m_init_image+0x240>)
   20840:	1a9b      	subs	r3, r3, r2
   20842:	08db      	lsrs	r3, r3, #3
   20844:	f363 118f 	bfi	r1, r3, #6, #10
   20848:	f020 f8fb 	bl	40a42 <log_0>
		LOG_INF("Firmware failed to be updated");
		lwm2m_engine_set_u8("5/0/5", RESULT_UPDATE_FAILED);
	}

	return ret;
}
   2084c:	4628      	mov	r0, r5
   2084e:	b002      	add	sp, #8
   20850:	bd70      	pop	{r4, r5, r6, pc}
	LOG_INF("Update Counter: current %d, update %d",
   20852:	f003 0307 	and.w	r3, r3, #7
   20856:	2b02      	cmp	r3, #2
   20858:	d90f      	bls.n	2087a <lwm2m_init_image+0x5e>
   2085a:	2203      	movs	r2, #3
   2085c:	f04f 0300 	mov.w	r3, #0
   20860:	497c      	ldr	r1, [pc, #496]	; (20a54 <lwm2m_init_image+0x238>)
   20862:	f362 0307 	bfi	r3, r2, #0, #8
   20866:	4a7c      	ldr	r2, [pc, #496]	; (20a58 <lwm2m_init_image+0x23c>)
   20868:	487d      	ldr	r0, [pc, #500]	; (20a60 <lwm2m_init_image+0x244>)
   2086a:	1a52      	subs	r2, r2, r1
   2086c:	08d2      	lsrs	r2, r2, #3
   2086e:	f362 138f 	bfi	r3, r2, #6, #10
   20872:	e9dd 1200 	ldrd	r1, r2, [sp]
   20876:	f020 f905 	bl	40a84 <log_2>
	image_ok = boot_is_img_confirmed();
   2087a:	f021 fac2 	bl	41e02 <boot_is_img_confirmed>
	LOG_INF("Image is%s confirmed OK", image_ok ? "" : " not");
   2087e:	6823      	ldr	r3, [r4, #0]
	image_ok = boot_is_img_confirmed();
   20880:	4606      	mov	r6, r0
	LOG_INF("Image is%s confirmed OK", image_ok ? "" : " not");
   20882:	f003 0307 	and.w	r3, r3, #7
   20886:	2b02      	cmp	r3, #2
   20888:	d912      	bls.n	208b0 <lwm2m_init_image+0x94>
   2088a:	2303      	movs	r3, #3
   2088c:	f04f 0200 	mov.w	r2, #0
   20890:	4970      	ldr	r1, [pc, #448]	; (20a54 <lwm2m_init_image+0x238>)
   20892:	f363 0207 	bfi	r2, r3, #0, #8
   20896:	4b70      	ldr	r3, [pc, #448]	; (20a58 <lwm2m_init_image+0x23c>)
   20898:	1a5b      	subs	r3, r3, r1
   2089a:	08db      	lsrs	r3, r3, #3
   2089c:	f363 128f 	bfi	r2, r3, #6, #10
   208a0:	4970      	ldr	r1, [pc, #448]	; (20a64 <lwm2m_init_image+0x248>)
   208a2:	4b71      	ldr	r3, [pc, #452]	; (20a68 <lwm2m_init_image+0x24c>)
   208a4:	2800      	cmp	r0, #0
   208a6:	bf18      	it	ne
   208a8:	4619      	movne	r1, r3
   208aa:	4870      	ldr	r0, [pc, #448]	; (20a6c <lwm2m_init_image+0x250>)
   208ac:	f020 f8d6 	bl	40a5c <log_1>
	if (!image_ok) {
   208b0:	2e00      	cmp	r6, #0
   208b2:	f040 8096 	bne.w	209e2 <lwm2m_init_image+0x1c6>
		ret = boot_write_img_confirmed();
   208b6:	f021 faab 	bl	41e10 <boot_write_img_confirmed>
			LOG_ERR("Couldn't confirm this image: %d", ret);
   208ba:	6823      	ldr	r3, [r4, #0]
		if (ret) {
   208bc:	4606      	mov	r6, r0
   208be:	b188      	cbz	r0, 208e4 <lwm2m_init_image+0xc8>
			LOG_ERR("Couldn't confirm this image: %d", ret);
   208c0:	0759      	lsls	r1, r3, #29
   208c2:	d039      	beq.n	20938 <lwm2m_init_image+0x11c>
   208c4:	2301      	movs	r3, #1
   208c6:	f04f 0200 	mov.w	r2, #0
   208ca:	4962      	ldr	r1, [pc, #392]	; (20a54 <lwm2m_init_image+0x238>)
   208cc:	f363 0207 	bfi	r2, r3, #0, #8
   208d0:	4b61      	ldr	r3, [pc, #388]	; (20a58 <lwm2m_init_image+0x23c>)
   208d2:	1a5b      	subs	r3, r3, r1
   208d4:	08db      	lsrs	r3, r3, #3
   208d6:	4601      	mov	r1, r0
   208d8:	4865      	ldr	r0, [pc, #404]	; (20a70 <lwm2m_init_image+0x254>)
   208da:	f363 128f 	bfi	r2, r3, #6, #10
				LOG_ERR("Failed to read update counter: %d",
   208de:	f020 f8bd 	bl	40a5c <log_1>
   208e2:	e029      	b.n	20938 <lwm2m_init_image+0x11c>
		LOG_INF("Marked image as OK");
   208e4:	f003 0307 	and.w	r3, r3, #7
   208e8:	2b02      	cmp	r3, #2
   208ea:	d90d      	bls.n	20908 <lwm2m_init_image+0xec>
   208ec:	2303      	movs	r3, #3
   208ee:	f04f 0100 	mov.w	r1, #0
   208f2:	4a58      	ldr	r2, [pc, #352]	; (20a54 <lwm2m_init_image+0x238>)
   208f4:	f363 0107 	bfi	r1, r3, #0, #8
   208f8:	4b57      	ldr	r3, [pc, #348]	; (20a58 <lwm2m_init_image+0x23c>)
   208fa:	485e      	ldr	r0, [pc, #376]	; (20a74 <lwm2m_init_image+0x258>)
   208fc:	1a9b      	subs	r3, r3, r2
   208fe:	08db      	lsrs	r3, r3, #3
   20900:	f363 118f 	bfi	r1, r3, #6, #10
   20904:	f020 f89d 	bl	40a42 <log_0>
		ret = boot_erase_img_bank(FLASH_AREA_IMAGE_SECONDARY);
   20908:	2006      	movs	r0, #6
   2090a:	f021 fa97 	bl	41e3c <boot_erase_img_bank>
			LOG_ERR("Flash area %d erase: error %d",
   2090e:	6823      	ldr	r3, [r4, #0]
		if (ret) {
   20910:	4606      	mov	r6, r0
   20912:	b198      	cbz	r0, 2093c <lwm2m_init_image+0x120>
			LOG_ERR("Flash area %d erase: error %d",
   20914:	075a      	lsls	r2, r3, #29
   20916:	d00f      	beq.n	20938 <lwm2m_init_image+0x11c>
   20918:	2201      	movs	r2, #1
   2091a:	f04f 0300 	mov.w	r3, #0
   2091e:	494d      	ldr	r1, [pc, #308]	; (20a54 <lwm2m_init_image+0x238>)
   20920:	f362 0307 	bfi	r3, r2, #0, #8
   20924:	4a4c      	ldr	r2, [pc, #304]	; (20a58 <lwm2m_init_image+0x23c>)
   20926:	1a52      	subs	r2, r2, r1
   20928:	08d2      	lsrs	r2, r2, #3
   2092a:	f362 138f 	bfi	r3, r2, #6, #10
   2092e:	2106      	movs	r1, #6
   20930:	4602      	mov	r2, r0
   20932:	4851      	ldr	r0, [pc, #324]	; (20a78 <lwm2m_init_image+0x25c>)
   20934:	f020 f8a6 	bl	40a84 <log_2>
   20938:	4635      	mov	r5, r6
   2093a:	e787      	b.n	2084c <lwm2m_init_image+0x30>
		LOG_DBG("Erased flash area %d", FLASH_AREA_IMAGE_SECONDARY);
   2093c:	075b      	lsls	r3, r3, #29
   2093e:	d50f      	bpl.n	20960 <lwm2m_init_image+0x144>
   20940:	2204      	movs	r2, #4
   20942:	f04f 0300 	mov.w	r3, #0
   20946:	4943      	ldr	r1, [pc, #268]	; (20a54 <lwm2m_init_image+0x238>)
   20948:	f362 0307 	bfi	r3, r2, #0, #8
   2094c:	4a42      	ldr	r2, [pc, #264]	; (20a58 <lwm2m_init_image+0x23c>)
   2094e:	484b      	ldr	r0, [pc, #300]	; (20a7c <lwm2m_init_image+0x260>)
   20950:	1a52      	subs	r2, r2, r1
   20952:	08d2      	lsrs	r2, r2, #3
   20954:	f362 138f 	bfi	r3, r2, #6, #10
   20958:	4949      	ldr	r1, [pc, #292]	; (20a80 <lwm2m_init_image+0x264>)
   2095a:	2206      	movs	r2, #6
   2095c:	f020 f892 	bl	40a84 <log_2>
		if (counter.update != -1) {
   20960:	9901      	ldr	r1, [sp, #4]
   20962:	1c4e      	adds	r6, r1, #1
   20964:	d03d      	beq.n	209e2 <lwm2m_init_image+0x1c6>
			ret = fota_update_counter_update(COUNTER_CURRENT,
   20966:	2000      	movs	r0, #0
   20968:	f7ff fb70 	bl	2004c <fota_update_counter_update>
			if (ret) {
   2096c:	4606      	mov	r6, r0
   2096e:	b180      	cbz	r0, 20992 <lwm2m_init_image+0x176>
				LOG_ERR("Failed to update the update "
   20970:	6823      	ldr	r3, [r4, #0]
   20972:	075c      	lsls	r4, r3, #29
   20974:	d0e0      	beq.n	20938 <lwm2m_init_image+0x11c>
   20976:	2301      	movs	r3, #1
   20978:	f04f 0200 	mov.w	r2, #0
   2097c:	4935      	ldr	r1, [pc, #212]	; (20a54 <lwm2m_init_image+0x238>)
   2097e:	f363 0207 	bfi	r2, r3, #0, #8
   20982:	4b35      	ldr	r3, [pc, #212]	; (20a58 <lwm2m_init_image+0x23c>)
   20984:	1a5b      	subs	r3, r3, r1
   20986:	08db      	lsrs	r3, r3, #3
   20988:	4601      	mov	r1, r0
   2098a:	f363 128f 	bfi	r2, r3, #6, #10
   2098e:	483d      	ldr	r0, [pc, #244]	; (20a84 <lwm2m_init_image+0x268>)
   20990:	e7a5      	b.n	208de <lwm2m_init_image+0xc2>
			ret = fota_update_counter_read(&counter);
   20992:	4668      	mov	r0, sp
   20994:	f7ff fb50 	bl	20038 <fota_update_counter_read>
				LOG_ERR("Failed to read update counter: %d",
   20998:	6823      	ldr	r3, [r4, #0]
			if (ret) {
   2099a:	4606      	mov	r6, r0
   2099c:	b178      	cbz	r0, 209be <lwm2m_init_image+0x1a2>
				LOG_ERR("Failed to read update counter: %d",
   2099e:	0758      	lsls	r0, r3, #29
   209a0:	d0ca      	beq.n	20938 <lwm2m_init_image+0x11c>
   209a2:	2301      	movs	r3, #1
   209a4:	f04f 0200 	mov.w	r2, #0
   209a8:	492a      	ldr	r1, [pc, #168]	; (20a54 <lwm2m_init_image+0x238>)
   209aa:	f363 0207 	bfi	r2, r3, #0, #8
   209ae:	4b2a      	ldr	r3, [pc, #168]	; (20a58 <lwm2m_init_image+0x23c>)
   209b0:	4835      	ldr	r0, [pc, #212]	; (20a88 <lwm2m_init_image+0x26c>)
   209b2:	1a5b      	subs	r3, r3, r1
   209b4:	08db      	lsrs	r3, r3, #3
   209b6:	f363 128f 	bfi	r2, r3, #6, #10
   209ba:	4631      	mov	r1, r6
   209bc:	e78f      	b.n	208de <lwm2m_init_image+0xc2>
			LOG_INF("Update Counter updated");
   209be:	f003 0307 	and.w	r3, r3, #7
   209c2:	2b02      	cmp	r3, #2
   209c4:	d90d      	bls.n	209e2 <lwm2m_init_image+0x1c6>
   209c6:	2303      	movs	r3, #3
   209c8:	f04f 0100 	mov.w	r1, #0
   209cc:	4a21      	ldr	r2, [pc, #132]	; (20a54 <lwm2m_init_image+0x238>)
   209ce:	f363 0107 	bfi	r1, r3, #0, #8
   209d2:	4b21      	ldr	r3, [pc, #132]	; (20a58 <lwm2m_init_image+0x23c>)
   209d4:	482d      	ldr	r0, [pc, #180]	; (20a8c <lwm2m_init_image+0x270>)
   209d6:	1a9b      	subs	r3, r3, r2
   209d8:	08db      	lsrs	r3, r3, #3
   209da:	f363 118f 	bfi	r1, r3, #6, #10
   209de:	f020 f830 	bl	40a42 <log_0>
	if (counter.update != -1 &&
   209e2:	e9dd 2300 	ldrd	r2, r3, [sp]
   209e6:	1c59      	adds	r1, r3, #1
   209e8:	d019      	beq.n	20a1e <lwm2m_init_image+0x202>
   209ea:	429a      	cmp	r2, r3
   209ec:	d117      	bne.n	20a1e <lwm2m_init_image+0x202>
		LOG_INF("Firmware updated successfully");
   209ee:	6823      	ldr	r3, [r4, #0]
   209f0:	f003 0307 	and.w	r3, r3, #7
   209f4:	2b02      	cmp	r3, #2
   209f6:	d90d      	bls.n	20a14 <lwm2m_init_image+0x1f8>
   209f8:	2303      	movs	r3, #3
   209fa:	f04f 0100 	mov.w	r1, #0
   209fe:	4a15      	ldr	r2, [pc, #84]	; (20a54 <lwm2m_init_image+0x238>)
   20a00:	f363 0107 	bfi	r1, r3, #0, #8
   20a04:	4b14      	ldr	r3, [pc, #80]	; (20a58 <lwm2m_init_image+0x23c>)
   20a06:	4822      	ldr	r0, [pc, #136]	; (20a90 <lwm2m_init_image+0x274>)
   20a08:	1a9b      	subs	r3, r3, r2
   20a0a:	08db      	lsrs	r3, r3, #3
   20a0c:	f363 118f 	bfi	r1, r3, #6, #10
   20a10:	f020 f817 	bl	40a42 <log_0>
		lwm2m_engine_set_u8("5/0/5", RESULT_SUCCESS);
   20a14:	2101      	movs	r1, #1
		lwm2m_engine_set_u8("5/0/5", RESULT_UPDATE_FAILED);
   20a16:	481f      	ldr	r0, [pc, #124]	; (20a94 <lwm2m_init_image+0x278>)
   20a18:	f022 faec 	bl	42ff4 <lwm2m_engine_set_u8>
   20a1c:	e716      	b.n	2084c <lwm2m_init_image+0x30>
	} else if (counter.update > counter.current) {
   20a1e:	429a      	cmp	r2, r3
   20a20:	f6bf af14 	bge.w	2084c <lwm2m_init_image+0x30>
		LOG_INF("Firmware failed to be updated");
   20a24:	6823      	ldr	r3, [r4, #0]
   20a26:	f003 0307 	and.w	r3, r3, #7
   20a2a:	2b02      	cmp	r3, #2
   20a2c:	d90d      	bls.n	20a4a <lwm2m_init_image+0x22e>
   20a2e:	2303      	movs	r3, #3
   20a30:	f04f 0100 	mov.w	r1, #0
   20a34:	4a07      	ldr	r2, [pc, #28]	; (20a54 <lwm2m_init_image+0x238>)
   20a36:	f363 0107 	bfi	r1, r3, #0, #8
   20a3a:	4b07      	ldr	r3, [pc, #28]	; (20a58 <lwm2m_init_image+0x23c>)
   20a3c:	4816      	ldr	r0, [pc, #88]	; (20a98 <lwm2m_init_image+0x27c>)
   20a3e:	1a9b      	subs	r3, r3, r2
   20a40:	08db      	lsrs	r3, r3, #3
   20a42:	f363 118f 	bfi	r1, r3, #6, #10
   20a46:	f01f fffc 	bl	40a42 <log_0>
		lwm2m_engine_set_u8("5/0/5", RESULT_UPDATE_FAILED);
   20a4a:	2108      	movs	r1, #8
   20a4c:	e7e3      	b.n	20a16 <lwm2m_init_image+0x1fa>
   20a4e:	bf00      	nop
   20a50:	20032aa0 	.word	0x20032aa0
   20a54:	00045f08 	.word	0x00045f08
   20a58:	00045f40 	.word	0x00045f40
   20a5c:	00047ba2 	.word	0x00047ba2
   20a60:	00047bbd 	.word	0x00047bbd
   20a64:	00047c22 	.word	0x00047c22
   20a68:	0004a299 	.word	0x0004a299
   20a6c:	00047c27 	.word	0x00047c27
   20a70:	00047c3f 	.word	0x00047c3f
   20a74:	00047c5f 	.word	0x00047c5f
   20a78:	00047c72 	.word	0x00047c72
   20a7c:	00047c90 	.word	0x00047c90
   20a80:	00047a94 	.word	0x00047a94
   20a84:	00047be3 	.word	0x00047be3
   20a88:	00047ca9 	.word	0x00047ca9
   20a8c:	00047ccb 	.word	0x00047ccb
   20a90:	00047ce2 	.word	0x00047ce2
   20a94:	00047d00 	.word	0x00047d00
   20a98:	00047d06 	.word	0x00047d06

00020a9c <modem_data_update>:

/* LTE-FDD bearer & NB-IoT bearer */
static u8_t bearers[2] = { 6U, 7U };

static void modem_data_update(struct k_work *work)
{
   20a9c:	b570      	push	{r4, r5, r6, lr}
	int ret;

	ret = modem_info_params_get(&modem_param);
   20a9e:	4c34      	ldr	r4, [pc, #208]	; (20b70 <modem_data_update+0xd4>)
   20aa0:	4620      	mov	r0, r4
   20aa2:	f011 fb65 	bl	32170 <modem_info_params_get>
	if (ret < 0) {
   20aa6:	1e01      	subs	r1, r0, #0
   20aa8:	da13      	bge.n	20ad2 <modem_data_update+0x36>
		LOG_ERR("Unable to obtain modem parameters: %d", ret);
   20aaa:	4b32      	ldr	r3, [pc, #200]	; (20b74 <modem_data_update+0xd8>)
   20aac:	681b      	ldr	r3, [r3, #0]
   20aae:	075b      	lsls	r3, r3, #29
   20ab0:	d05d      	beq.n	20b6e <modem_data_update+0xd2>
	/* set "Software Version" as NCS APP_VERSION in device object */
	lwm2m_engine_set_res_data("3/0/19",
		(char *)modem_param.device.app_version,
		strlen(modem_param.device.app_version),
		LWM2M_RES_DATA_FLAG_RO);
}
   20ab2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		LOG_ERR("Unable to obtain modem parameters: %d", ret);
   20ab6:	2301      	movs	r3, #1
   20ab8:	f04f 0200 	mov.w	r2, #0
   20abc:	482e      	ldr	r0, [pc, #184]	; (20b78 <modem_data_update+0xdc>)
   20abe:	f363 0207 	bfi	r2, r3, #0, #8
   20ac2:	4b2e      	ldr	r3, [pc, #184]	; (20b7c <modem_data_update+0xe0>)
   20ac4:	1a1b      	subs	r3, r3, r0
   20ac6:	08db      	lsrs	r3, r3, #3
   20ac8:	f363 128f 	bfi	r2, r3, #6, #10
   20acc:	482c      	ldr	r0, [pc, #176]	; (20b80 <modem_data_update+0xe4>)
   20ace:	f01f bfc5 	b.w	40a5c <log_1>
	lwm2m_engine_set_s8("4/0/0", bearers[0]);
   20ad2:	4d2c      	ldr	r5, [pc, #176]	; (20b84 <modem_data_update+0xe8>)
   20ad4:	482c      	ldr	r0, [pc, #176]	; (20b88 <modem_data_update+0xec>)
   20ad6:	f995 1000 	ldrsb.w	r1, [r5]
   20ada:	f022 faa1 	bl	43020 <lwm2m_engine_set_s8>
	lwm2m_engine_create_res_inst("4/0/1/0");
   20ade:	482b      	ldr	r0, [pc, #172]	; (20b8c <modem_data_update+0xf0>)
   20ae0:	f009 fe5c 	bl	2a79c <lwm2m_engine_create_res_inst>
	lwm2m_engine_set_res_data("4/0/1/0", &bearers[0], sizeof(bearers[0]),
   20ae4:	2301      	movs	r3, #1
   20ae6:	4629      	mov	r1, r5
   20ae8:	461a      	mov	r2, r3
   20aea:	4828      	ldr	r0, [pc, #160]	; (20b8c <modem_data_update+0xf0>)
   20aec:	f009 fd00 	bl	2a4f0 <lwm2m_engine_set_res_data>
	lwm2m_engine_create_res_inst("4/0/1/1");
   20af0:	4827      	ldr	r0, [pc, #156]	; (20b90 <modem_data_update+0xf4>)
   20af2:	f009 fe53 	bl	2a79c <lwm2m_engine_create_res_inst>
	lwm2m_engine_set_res_data("4/0/1/1", &bearers[1], sizeof(bearers[1]),
   20af6:	2301      	movs	r3, #1
   20af8:	4825      	ldr	r0, [pc, #148]	; (20b90 <modem_data_update+0xf4>)
   20afa:	18e9      	adds	r1, r5, r3
   20afc:	461a      	mov	r2, r3
   20afe:	f009 fcf7 	bl	2a4f0 <lwm2m_engine_set_res_data>
	lwm2m_engine_create_res_inst("4/0/4/0");
   20b02:	4824      	ldr	r0, [pc, #144]	; (20b94 <modem_data_update+0xf8>)
   20b04:	f009 fe4a 	bl	2a79c <lwm2m_engine_create_res_inst>
	lwm2m_engine_set_res_data("4/0/4/0",
   20b08:	f204 3112 	addw	r1, r4, #786	; 0x312
   20b0c:	2301      	movs	r3, #1
   20b0e:	2264      	movs	r2, #100	; 0x64
   20b10:	4820      	ldr	r0, [pc, #128]	; (20b94 <modem_data_update+0xf8>)
   20b12:	f009 fced 	bl	2a4f0 <lwm2m_engine_set_res_data>
	lwm2m_engine_create_res_inst("4/0/7/0");
   20b16:	4820      	ldr	r0, [pc, #128]	; (20b98 <modem_data_update+0xfc>)
   20b18:	f009 fe40 	bl	2a79c <lwm2m_engine_create_res_inst>
	lwm2m_engine_set_res_data("4/0/7/0",
   20b1c:	2301      	movs	r3, #1
   20b1e:	2264      	movs	r2, #100	; 0x64
   20b20:	f504 71a9 	add.w	r1, r4, #338	; 0x152
   20b24:	481c      	ldr	r0, [pc, #112]	; (20b98 <modem_data_update+0xfc>)
   20b26:	f009 fce3 	bl	2a4f0 <lwm2m_engine_set_res_data>
	lwm2m_engine_set_u16("4/0/9", modem_param.network.mnc.value);
   20b2a:	f8b4 1230 	ldrh.w	r1, [r4, #560]	; 0x230
   20b2e:	481b      	ldr	r0, [pc, #108]	; (20b9c <modem_data_update+0x100>)
   20b30:	f022 fa6b 	bl	4300a <lwm2m_engine_set_u16>
	lwm2m_engine_set_u16("4/0/10", modem_param.network.mcc.value);
   20b34:	f8b4 11c0 	ldrh.w	r1, [r4, #448]	; 0x1c0
   20b38:	4819      	ldr	r0, [pc, #100]	; (20ba0 <modem_data_update+0x104>)
   20b3a:	f022 fa66 	bl	4300a <lwm2m_engine_set_u16>
		strlen(modem_param.device.modem_fw.value_string),
   20b3e:	f204 701a 	addw	r0, r4, #1818	; 0x71a
   20b42:	f7fc fae9 	bl	1d118 <strlen>
	lwm2m_engine_set_res_data("3/0/3",
   20b46:	f204 711a 	addw	r1, r4, #1818	; 0x71a
   20b4a:	b282      	uxth	r2, r0
   20b4c:	2301      	movs	r3, #1
   20b4e:	4815      	ldr	r0, [pc, #84]	; (20ba4 <modem_data_update+0x108>)
   20b50:	f009 fcce 	bl	2a4f0 <lwm2m_engine_set_res_data>
		(char *)modem_param.device.app_version,
   20b54:	f8d4 486c 	ldr.w	r4, [r4, #2156]	; 0x86c
		strlen(modem_param.device.app_version),
   20b58:	4620      	mov	r0, r4
   20b5a:	f7fc fadd 	bl	1d118 <strlen>
	lwm2m_engine_set_res_data("3/0/19",
   20b5e:	4621      	mov	r1, r4
}
   20b60:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	lwm2m_engine_set_res_data("3/0/19",
   20b64:	b282      	uxth	r2, r0
   20b66:	2301      	movs	r3, #1
   20b68:	480f      	ldr	r0, [pc, #60]	; (20ba8 <modem_data_update+0x10c>)
   20b6a:	f009 bcc1 	b.w	2a4f0 <lwm2m_engine_set_res_data>
}
   20b6e:	bd70      	pop	{r4, r5, r6, pc}
   20b70:	20020000 	.word	0x20020000
   20b74:	20032a98 	.word	0x20032a98
   20b78:	00045f08 	.word	0x00045f08
   20b7c:	00045f30 	.word	0x00045f30
   20b80:	00047d74 	.word	0x00047d74
   20b84:	200328ad 	.word	0x200328ad
   20b88:	00047d9a 	.word	0x00047d9a
   20b8c:	00047da0 	.word	0x00047da0
   20b90:	00047da8 	.word	0x00047da8
   20b94:	00047db0 	.word	0x00047db0
   20b98:	00047db8 	.word	0x00047db8
   20b9c:	00047dc0 	.word	0x00047dc0
   20ba0:	00047dc6 	.word	0x00047dc6
   20ba4:	00047dcd 	.word	0x00047dcd
   20ba8:	00047dd3 	.word	0x00047dd3

00020bac <k_work_submit_to_queue.constprop.2>:
 * @param work Address of work item.
 *
 * @return N/A
 * @req K-WORK-001
 */
static inline void k_work_submit_to_queue(struct k_work_q *work_q,
   20bac:	4601      	mov	r1, r0
 * @return Previous value of @a target.
 */
#ifdef CONFIG_ATOMIC_OPERATIONS_BUILTIN
static inline atomic_val_t atomic_or(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   20bae:	f100 0308 	add.w	r3, r0, #8
   20bb2:	e8d3 2fef 	ldaex	r2, [r3]
   20bb6:	f042 0001 	orr.w	r0, r2, #1
   20bba:	e8c3 0fec 	stlex	ip, r0, [r3]
   20bbe:	f1bc 0f00 	cmp.w	ip, #0
   20bc2:	d1f6      	bne.n	20bb2 <k_work_submit_to_queue.constprop.2+0x6>
					  struct k_work *work)
{
	if (!atomic_test_and_set_bit(work->flags, K_WORK_STATE_PENDING)) {
   20bc4:	07d3      	lsls	r3, r2, #31
   20bc6:	d402      	bmi.n	20bce <k_work_submit_to_queue.constprop.2+0x22>
		k_queue_append(&work_q->queue, work);
   20bc8:	4801      	ldr	r0, [pc, #4]	; (20bd0 <k_work_submit_to_queue.constprop.2+0x24>)
   20bca:	f023 bf9e 	b.w	44b0a <k_queue_append>
	}
}
   20bce:	4770      	bx	lr
   20bd0:	20029754 	.word	0x20029754

00020bd4 <modem_signal_handler>:

/**@brief Callback handler for LTE RSRP data. */
static void modem_signal_handler(char rsrp_value)
{
   20bd4:	b508      	push	{r3, lr}
	modem_rsrp = (s8_t)rsrp_value - MODEM_INFO_RSRP_OFFSET_VAL;
   20bd6:	b242      	sxtb	r2, r0
   20bd8:	4b0d      	ldr	r3, [pc, #52]	; (20c10 <modem_signal_handler+0x3c>)
   20bda:	3a8d      	subs	r2, #141	; 0x8d
   20bdc:	601a      	str	r2, [r3, #0]
	LOG_DBG("rsrp:%d", modem_rsrp);
   20bde:	4b0d      	ldr	r3, [pc, #52]	; (20c14 <modem_signal_handler+0x40>)
   20be0:	681b      	ldr	r3, [r3, #0]
   20be2:	075b      	lsls	r3, r3, #29
   20be4:	d50e      	bpl.n	20c04 <modem_signal_handler+0x30>
   20be6:	2104      	movs	r1, #4
   20be8:	f04f 0300 	mov.w	r3, #0
   20bec:	480a      	ldr	r0, [pc, #40]	; (20c18 <modem_signal_handler+0x44>)
   20bee:	f361 0307 	bfi	r3, r1, #0, #8
   20bf2:	490a      	ldr	r1, [pc, #40]	; (20c1c <modem_signal_handler+0x48>)
   20bf4:	1a09      	subs	r1, r1, r0
   20bf6:	08c9      	lsrs	r1, r1, #3
   20bf8:	f361 138f 	bfi	r3, r1, #6, #10
   20bfc:	4808      	ldr	r0, [pc, #32]	; (20c20 <modem_signal_handler+0x4c>)
   20bfe:	4909      	ldr	r1, [pc, #36]	; (20c24 <modem_signal_handler+0x50>)
   20c00:	f01f ff40 	bl	40a84 <log_2>
	k_work_submit(&modem_signal_work);
}
   20c04:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 * @return N/A
 * @req K-WORK-001
 */
static inline void k_work_submit(struct k_work *work)
{
	k_work_submit_to_queue(&k_sys_work_q, work);
   20c08:	4807      	ldr	r0, [pc, #28]	; (20c28 <modem_signal_handler+0x54>)
   20c0a:	f7ff bfcf 	b.w	20bac <k_work_submit_to_queue.constprop.2>
   20c0e:	bf00      	nop
   20c10:	20021df8 	.word	0x20021df8
   20c14:	20032a98 	.word	0x20032a98
   20c18:	00045f08 	.word	0x00045f08
   20c1c:	00045f30 	.word	0x00045f30
   20c20:	00047dda 	.word	0x00047dda
   20c24:	00047d37 	.word	0x00047d37
   20c28:	20021dfc 	.word	0x20021dfc

00020c2c <modem_signal_update>:

static void modem_signal_update(struct k_work *work)
{
   20c2c:	b510      	push	{r4, lr}
   20c2e:	f024 f848 	bl	44cc2 <z_impl_k_uptime_get>
	static u32_t timestamp_prev;

	if (k_uptime_get_32() - timestamp_prev <
   20c32:	4c08      	ldr	r4, [pc, #32]	; (20c54 <modem_signal_update+0x28>)
   20c34:	6823      	ldr	r3, [r4, #0]
   20c36:	1ac0      	subs	r0, r0, r3
   20c38:	f64e 235f 	movw	r3, #59999	; 0xea5f
   20c3c:	4298      	cmp	r0, r3
   20c3e:	d908      	bls.n	20c52 <modem_signal_update+0x26>
	    K_SECONDS(CONFIG_APP_HOLD_TIME_RSRP)) {
		return;
	}

	lwm2m_engine_set_s8("4/0/2", modem_rsrp);
   20c40:	4b05      	ldr	r3, [pc, #20]	; (20c58 <modem_signal_update+0x2c>)
   20c42:	4806      	ldr	r0, [pc, #24]	; (20c5c <modem_signal_update+0x30>)
   20c44:	f993 1000 	ldrsb.w	r1, [r3]
   20c48:	f022 f9ea 	bl	43020 <lwm2m_engine_set_s8>
   20c4c:	f024 f839 	bl	44cc2 <z_impl_k_uptime_get>
	return (u32_t)k_uptime_get();
   20c50:	6020      	str	r0, [r4, #0]
	timestamp_prev = k_uptime_get_32();
}
   20c52:	bd10      	pop	{r4, pc}
   20c54:	20021e08 	.word	0x20021e08
   20c58:	20021df8 	.word	0x20021df8
   20c5c:	00047de6 	.word	0x00047de6

00020c60 <lwm2m_init_connmon>:
	*work = (struct k_work)Z_WORK_INITIALIZER(handler);
   20c60:	2300      	movs	r3, #0
   20c62:	4a14      	ldr	r2, [pc, #80]	; (20cb4 <lwm2m_init_connmon+0x54>)
   20c64:	4914      	ldr	r1, [pc, #80]	; (20cb8 <lwm2m_init_connmon+0x58>)

int lwm2m_init_connmon(void)
{
   20c66:	b510      	push	{r4, lr}
   20c68:	e9c2 1301 	strd	r1, r3, [r2, #4]
   20c6c:	6013      	str	r3, [r2, #0]
   20c6e:	4913      	ldr	r1, [pc, #76]	; (20cbc <lwm2m_init_connmon+0x5c>)
   20c70:	4a13      	ldr	r2, [pc, #76]	; (20cc0 <lwm2m_init_connmon+0x60>)
   20c72:	6013      	str	r3, [r2, #0]
   20c74:	e9c2 1301 	strd	r1, r3, [r2, #4]
	int ret;

	k_work_init(&modem_data_work, modem_data_update);
	k_work_init(&modem_signal_work, modem_signal_update);

	ret = modem_info_init();
   20c78:	f011 f9d4 	bl	32024 <modem_info_init>
	if (ret) {
   20c7c:	4604      	mov	r4, r0
   20c7e:	b1a0      	cbz	r0, 20caa <lwm2m_init_connmon+0x4a>
		LOG_ERR("Modem info could not be established: %d", ret);
   20c80:	4b10      	ldr	r3, [pc, #64]	; (20cc4 <lwm2m_init_connmon+0x64>)
   20c82:	681b      	ldr	r3, [r3, #0]
   20c84:	075b      	lsls	r3, r3, #29
   20c86:	d00e      	beq.n	20ca6 <lwm2m_init_connmon+0x46>
   20c88:	2301      	movs	r3, #1
   20c8a:	f04f 0200 	mov.w	r2, #0
   20c8e:	490e      	ldr	r1, [pc, #56]	; (20cc8 <lwm2m_init_connmon+0x68>)
   20c90:	f363 0207 	bfi	r2, r3, #0, #8
   20c94:	4b0d      	ldr	r3, [pc, #52]	; (20ccc <lwm2m_init_connmon+0x6c>)
   20c96:	1a5b      	subs	r3, r3, r1
   20c98:	08db      	lsrs	r3, r3, #3
   20c9a:	4601      	mov	r1, r0
   20c9c:	f363 128f 	bfi	r2, r3, #6, #10
   20ca0:	480b      	ldr	r0, [pc, #44]	; (20cd0 <lwm2m_init_connmon+0x70>)
   20ca2:	f01f fedb 	bl	40a5c <log_1>
		return ret;
	}

	modem_info_params_init(&modem_param);
	return 0;
}
   20ca6:	4620      	mov	r0, r4
   20ca8:	bd10      	pop	{r4, pc}
	modem_info_params_init(&modem_param);
   20caa:	480a      	ldr	r0, [pc, #40]	; (20cd4 <lwm2m_init_connmon+0x74>)
   20cac:	f011 fa10 	bl	320d0 <modem_info_params_init>
	return 0;
   20cb0:	e7f9      	b.n	20ca6 <lwm2m_init_connmon+0x46>
   20cb2:	bf00      	nop
   20cb4:	20021dec 	.word	0x20021dec
   20cb8:	00020a9d 	.word	0x00020a9d
   20cbc:	00020c2d 	.word	0x00020c2d
   20cc0:	20021dfc 	.word	0x20021dfc
   20cc4:	20032a98 	.word	0x20032a98
   20cc8:	00045f08 	.word	0x00045f08
   20ccc:	00045f30 	.word	0x00045f30
   20cd0:	00047d4c 	.word	0x00047d4c
   20cd4:	20020000 	.word	0x20020000

00020cd8 <lwm2m_start_connmon>:

int lwm2m_start_connmon(void)
{
   20cd8:	b508      	push	{r3, lr}
	k_work_submit_to_queue(&k_sys_work_q, work);
   20cda:	4804      	ldr	r0, [pc, #16]	; (20cec <lwm2m_start_connmon+0x14>)
   20cdc:	f7ff ff66 	bl	20bac <k_work_submit_to_queue.constprop.2>
	k_work_submit(&modem_data_work);
	return modem_info_rsrp_register(modem_signal_handler);
}
   20ce0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	return modem_info_rsrp_register(modem_signal_handler);
   20ce4:	4802      	ldr	r0, [pc, #8]	; (20cf0 <lwm2m_start_connmon+0x18>)
   20ce6:	f011 b965 	b.w	31fb4 <modem_info_rsrp_register>
   20cea:	bf00      	nop
   20cec:	20021dec 	.word	0x20021dec
   20cf0:	00020bd5 	.word	0x00020bd5

00020cf4 <lc_on_off_cb>:

/* TODO: Move to a pre write hook that can handle ret codes once available */
static int lc_on_off_cb(u16_t obj_inst_id, u16_t res_id, u16_t res_inst_id,
			u8_t *data, u16_t data_len,
			bool last_block, size_t total_size)
{
   20cf4:	b538      	push	{r3, r4, r5, lr}
	u32_t led_val;

	led_val = *(u8_t *) data;
	if (led_val != led_state) {
   20cf6:	4d08      	ldr	r5, [pc, #32]	; (20d18 <lc_on_off_cb+0x24>)
	led_val = *(u8_t *) data;
   20cf8:	781c      	ldrb	r4, [r3, #0]
	if (led_val != led_state) {
   20cfa:	682b      	ldr	r3, [r5, #0]
   20cfc:	42a3      	cmp	r3, r4
   20cfe:	d008      	beq.n	20d12 <lc_on_off_cb+0x1e>
		ui_led_set_state(UI_LED_1, led_val);
   20d00:	4621      	mov	r1, r4
   20d02:	2001      	movs	r0, #1
   20d04:	f000 fab2 	bl	2126c <ui_led_set_state>
		led_state = led_val;
		/* TODO: Move to be set by an internal post write function */
		lwm2m_engine_set_s32("3311/0/5852", 0);
   20d08:	2100      	movs	r1, #0
   20d0a:	4804      	ldr	r0, [pc, #16]	; (20d1c <lc_on_off_cb+0x28>)
		led_state = led_val;
   20d0c:	602c      	str	r4, [r5, #0]
		lwm2m_engine_set_s32("3311/0/5852", 0);
   20d0e:	f022 f992 	bl	43036 <lwm2m_engine_set_s32>
	}

	return 0;
}
   20d12:	2000      	movs	r0, #0
   20d14:	bd38      	pop	{r3, r4, r5, pc}
   20d16:	bf00      	nop
   20d18:	20021e0c 	.word	0x20021e0c
   20d1c:	00047dfe 	.word	0x00047dfe

00020d20 <lwm2m_init_light_control>:

int lwm2m_init_light_control(void)
{
   20d20:	b508      	push	{r3, lr}
	/* start with LED off */
	ui_led_set_state(UI_LED_1, 0);
   20d22:	2100      	movs	r1, #0
   20d24:	2001      	movs	r0, #1
   20d26:	f000 faa1 	bl	2126c <ui_led_set_state>

	/* create light control device */
	lwm2m_engine_create_obj_inst("3311/0");
   20d2a:	4807      	ldr	r0, [pc, #28]	; (20d48 <lwm2m_init_light_control+0x28>)
   20d2c:	f009 fbae 	bl	2a48c <lwm2m_engine_create_obj_inst>
	lwm2m_engine_register_post_write_callback("3311/0/5850", lc_on_off_cb);
   20d30:	4906      	ldr	r1, [pc, #24]	; (20d4c <lwm2m_init_light_control+0x2c>)
   20d32:	4807      	ldr	r0, [pc, #28]	; (20d50 <lwm2m_init_light_control+0x30>)
   20d34:	f022 f9ce 	bl	430d4 <lwm2m_engine_register_post_write_callback>
	lwm2m_engine_set_res_data("3311/0/5750",
   20d38:	2301      	movs	r3, #1
   20d3a:	2205      	movs	r2, #5
   20d3c:	4905      	ldr	r1, [pc, #20]	; (20d54 <lwm2m_init_light_control+0x34>)
   20d3e:	4806      	ldr	r0, [pc, #24]	; (20d58 <lwm2m_init_light_control+0x38>)
   20d40:	f009 fbd6 	bl	2a4f0 <lwm2m_engine_set_res_data>
				  LIGHT_NAME, sizeof(LIGHT_NAME),
				  LWM2M_RES_DATA_FLAG_RO);

	return 0;
}
   20d44:	2000      	movs	r0, #0
   20d46:	bd08      	pop	{r3, pc}
   20d48:	00047e0a 	.word	0x00047e0a
   20d4c:	00020cf5 	.word	0x00020cf5
   20d50:	00047e11 	.word	0x00047e11
   20d54:	00047e1d 	.word	0x00047e1d
   20d58:	00047e22 	.word	0x00047e22

00020d5c <temp_read_cb>:
}
#endif

static void *temp_read_cb(u16_t obj_inst_id, u16_t res_id, u16_t res_inst_id,
			  size_t *data_len)
{
   20d5c:	b513      	push	{r0, r1, r4, lr}
   20d5e:	461c      	mov	r4, r3
	s32_t ts;

	/* Only object instance 0 is currently used */
	if (obj_inst_id != 0) {
   20d60:	b118      	cbz	r0, 20d6a <temp_read_cb+0xe>
		*data_len = 0;
   20d62:	2000      	movs	r0, #0
   20d64:	6018      	str	r0, [r3, #0]
	lwm2m_engine_get_s32("3/0/13", &ts);
	/* set timestamp */
	lwm2m_engine_set_s32("3303/0/5518", ts);

	return &temp_float;
}
   20d66:	b002      	add	sp, #8
   20d68:	bd10      	pop	{r4, pc}
	lwm2m_engine_set_float32("3303/0/5700", &temp_float);
   20d6a:	4908      	ldr	r1, [pc, #32]	; (20d8c <temp_read_cb+0x30>)
   20d6c:	4808      	ldr	r0, [pc, #32]	; (20d90 <temp_read_cb+0x34>)
   20d6e:	f022 f977 	bl	43060 <lwm2m_engine_set_float32>
	*data_len = sizeof(temp_float);
   20d72:	2308      	movs	r3, #8
	lwm2m_engine_get_s32("3/0/13", &ts);
   20d74:	a901      	add	r1, sp, #4
	*data_len = sizeof(temp_float);
   20d76:	6023      	str	r3, [r4, #0]
	lwm2m_engine_get_s32("3/0/13", &ts);
   20d78:	4806      	ldr	r0, [pc, #24]	; (20d94 <temp_read_cb+0x38>)
   20d7a:	f022 f97a 	bl	43072 <lwm2m_engine_get_s32>
	lwm2m_engine_set_s32("3303/0/5518", ts);
   20d7e:	9901      	ldr	r1, [sp, #4]
   20d80:	4805      	ldr	r0, [pc, #20]	; (20d98 <temp_read_cb+0x3c>)
   20d82:	f022 f958 	bl	43036 <lwm2m_engine_set_s32>
	return &temp_float;
   20d86:	4801      	ldr	r0, [pc, #4]	; (20d8c <temp_read_cb+0x30>)
   20d88:	e7ed      	b.n	20d66 <temp_read_cb+0xa>
   20d8a:	bf00      	nop
   20d8c:	2003233c 	.word	0x2003233c
   20d90:	00047e71 	.word	0x00047e71
   20d94:	00047e7d 	.word	0x00047e7d
   20d98:	00047e84 	.word	0x00047e84

00020d9c <lwm2m_init_temp>:

int lwm2m_init_temp(void)
{
   20d9c:	b508      	push	{r3, lr}
	LOG_INF("%s on-die temperature sensor %s",
		die_dev ? "Found" : "Did not find", CONFIG_TEMP_NRF5_NAME);
#endif

	if (!die_dev) {
		LOG_ERR("No temperature device found.");
   20d9e:	4b10      	ldr	r3, [pc, #64]	; (20de0 <lwm2m_init_temp+0x44>)
   20da0:	681b      	ldr	r3, [r3, #0]
   20da2:	075b      	lsls	r3, r3, #29
   20da4:	d00d      	beq.n	20dc2 <lwm2m_init_temp+0x26>
   20da6:	2301      	movs	r3, #1
   20da8:	f04f 0100 	mov.w	r1, #0
   20dac:	4a0d      	ldr	r2, [pc, #52]	; (20de4 <CONFIG_GPS_SIM_BASE_TIMESTAMP+0x1>)
   20dae:	f363 0107 	bfi	r1, r3, #0, #8
   20db2:	4b0d      	ldr	r3, [pc, #52]	; (20de8 <CONFIG_GPS_SIM_BASE_TIMESTAMP+0x5>)
   20db4:	480d      	ldr	r0, [pc, #52]	; (20dec <CONFIG_GPS_SIM_BASE_TIMESTAMP+0x9>)
   20db6:	1a9b      	subs	r3, r3, r2
   20db8:	08db      	lsrs	r3, r3, #3
   20dba:	f363 118f 	bfi	r1, r3, #6, #10
   20dbe:	f01f fe40 	bl	40a42 <log_0>
	}

	lwm2m_engine_create_obj_inst("3303/0");
   20dc2:	480b      	ldr	r0, [pc, #44]	; (20df0 <CONFIG_GPS_SIM_BASE_TIMESTAMP+0xd>)
   20dc4:	f009 fb62 	bl	2a48c <lwm2m_engine_create_obj_inst>
	lwm2m_engine_register_read_callback("3303/0/5700", temp_read_cb);
   20dc8:	490a      	ldr	r1, [pc, #40]	; (20df4 <CONFIG_GPS_SIM_BASE_TIMESTAMP+0x11>)
   20dca:	480b      	ldr	r0, [pc, #44]	; (20df8 <CONFIG_GPS_SIM_BASE_TIMESTAMP+0x15>)
   20dcc:	f022 f966 	bl	4309c <lwm2m_engine_register_read_callback>
	lwm2m_engine_set_res_data("3303/0/5518",
   20dd0:	2300      	movs	r3, #0
   20dd2:	2204      	movs	r2, #4
   20dd4:	4909      	ldr	r1, [pc, #36]	; (20dfc <CONFIG_GPS_SIM_BASE_TIMESTAMP+0x19>)
   20dd6:	480a      	ldr	r0, [pc, #40]	; (20e00 <CONFIG_GPS_SIM_BASE_TIMESTAMP+0x1d>)
   20dd8:	f009 fb8a 	bl	2a4f0 <lwm2m_engine_set_res_data>
				  &timestamp, sizeof(timestamp), 0);
	return 0;
}
   20ddc:	2000      	movs	r0, #0
   20dde:	bd08      	pop	{r3, pc}
   20de0:	20032ab0 	.word	0x20032ab0
   20de4:	00045f08 	.word	0x00045f08
   20de8:	00045f60 	.word	0x00045f60
   20dec:	00047e3e 	.word	0x00047e3e
   20df0:	00047e5b 	.word	0x00047e5b
   20df4:	00020d5d 	.word	0x00020d5d
   20df8:	00047e71 	.word	0x00047e71
   20dfc:	20021e10 	.word	0x20021e10
   20e00:	00047e84 	.word	0x00047e84

00020e04 <buzzer_state_cb>:

static int buzzer_state_cb(u16_t obj_inst_id,
			   u16_t res_id, u16_t res_inst_id,
			   u8_t *data, u16_t data_len,
			   bool last_block, size_t total_size)
{
   20e04:	b508      	push	{r3, lr}
   20e06:	4a14      	ldr	r2, [pc, #80]	; (20e58 <buzzer_state_cb+0x54>)
	if (*data == 0) {
   20e08:	781b      	ldrb	r3, [r3, #0]
   20e0a:	6812      	ldr	r2, [r2, #0]
   20e0c:	f002 0204 	and.w	r2, r2, #4
   20e10:	b98b      	cbnz	r3, 20e36 <buzzer_state_cb+0x32>
		LOG_DBG("Buzzer OFF");
   20e12:	b172      	cbz	r2, 20e32 <buzzer_state_cb+0x2e>
   20e14:	2304      	movs	r3, #4
   20e16:	f04f 0200 	mov.w	r2, #0
   20e1a:	4910      	ldr	r1, [pc, #64]	; (20e5c <buzzer_state_cb+0x58>)
   20e1c:	f363 0207 	bfi	r2, r3, #0, #8
   20e20:	4b0f      	ldr	r3, [pc, #60]	; (20e60 <buzzer_state_cb+0x5c>)
   20e22:	4810      	ldr	r0, [pc, #64]	; (20e64 <buzzer_state_cb+0x60>)
   20e24:	1a5b      	subs	r3, r3, r1
   20e26:	08db      	lsrs	r3, r3, #3
   20e28:	490f      	ldr	r1, [pc, #60]	; (20e68 <buzzer_state_cb+0x64>)
   20e2a:	f363 128f 	bfi	r2, r3, #6, #10
		/* TODO: Fix secure memory access crash */
		/* ui_buzzer_set_frequency(0, 0); */
	} else {
		LOG_DBG("Buzzer ON");
   20e2e:	f01f fe15 	bl	40a5c <log_1>
		/* TODO: Fix secure memory access crash */
		/* ui_buzzer_set_frequency(5000, 35); */
	}

	return 0;
}
   20e32:	2000      	movs	r0, #0
   20e34:	bd08      	pop	{r3, pc}
		LOG_DBG("Buzzer ON");
   20e36:	2a00      	cmp	r2, #0
   20e38:	d0fb      	beq.n	20e32 <buzzer_state_cb+0x2e>
   20e3a:	2304      	movs	r3, #4
   20e3c:	f04f 0200 	mov.w	r2, #0
   20e40:	4906      	ldr	r1, [pc, #24]	; (20e5c <buzzer_state_cb+0x58>)
   20e42:	f363 0207 	bfi	r2, r3, #0, #8
   20e46:	4b06      	ldr	r3, [pc, #24]	; (20e60 <buzzer_state_cb+0x5c>)
   20e48:	4808      	ldr	r0, [pc, #32]	; (20e6c <buzzer_state_cb+0x68>)
   20e4a:	1a5b      	subs	r3, r3, r1
   20e4c:	08db      	lsrs	r3, r3, #3
   20e4e:	f363 128f 	bfi	r2, r3, #6, #10
   20e52:	4905      	ldr	r1, [pc, #20]	; (20e68 <buzzer_state_cb+0x64>)
   20e54:	e7eb      	b.n	20e2e <buzzer_state_cb+0x2a>
   20e56:	bf00      	nop
   20e58:	20032a90 	.word	0x20032a90
   20e5c:	00045f08 	.word	0x00045f08
   20e60:	00045f20 	.word	0x00045f20
   20e64:	00047ea0 	.word	0x00047ea0
   20e68:	00047e90 	.word	0x00047e90
   20e6c:	00047eaf 	.word	0x00047eaf

00020e70 <lwm2m_init_buzzer>:

int lwm2m_init_buzzer(void)
{
   20e70:	b508      	push	{r3, lr}
	/* create buzzer object */
	lwm2m_engine_create_obj_inst("3338/0");
   20e72:	4807      	ldr	r0, [pc, #28]	; (20e90 <lwm2m_init_buzzer+0x20>)
   20e74:	f009 fb0a 	bl	2a48c <lwm2m_engine_create_obj_inst>
	lwm2m_engine_register_post_write_callback("3338/0/5500",
   20e78:	4906      	ldr	r1, [pc, #24]	; (20e94 <lwm2m_init_buzzer+0x24>)
   20e7a:	4807      	ldr	r0, [pc, #28]	; (20e98 <lwm2m_init_buzzer+0x28>)
   20e7c:	f022 f92a 	bl	430d4 <lwm2m_engine_register_post_write_callback>
						  buzzer_state_cb);
	lwm2m_engine_set_res_data("3338/0/5750",
   20e80:	2301      	movs	r3, #1
   20e82:	2207      	movs	r2, #7
   20e84:	4905      	ldr	r1, [pc, #20]	; (20e9c <lwm2m_init_buzzer+0x2c>)
   20e86:	4806      	ldr	r0, [pc, #24]	; (20ea0 <lwm2m_init_buzzer+0x30>)
   20e88:	f009 fb32 	bl	2a4f0 <lwm2m_engine_set_res_data>
				  BUZZER_NAME, sizeof(BUZZER_NAME),
				  LWM2M_RES_DATA_FLAG_RO);

	return 0;
}
   20e8c:	2000      	movs	r0, #0
   20e8e:	bd08      	pop	{r3, pc}
   20e90:	00047ebd 	.word	0x00047ebd
   20e94:	00020e05 	.word	0x00020e05
   20e98:	00047ec4 	.word	0x00047ec4
   20e9c:	00047ed0 	.word	0x00047ed0
   20ea0:	00047ed7 	.word	0x00047ed7

00020ea4 <handle_button_events>:
#define SWITCH2_NAME	"SWITCH2"

static s32_t timestamp[4];

int handle_button_events(struct ui_evt *evt)
{
   20ea4:	b513      	push	{r0, r1, r4, lr}
	s32_t ts;
	bool state;

	if (!evt) {
   20ea6:	4604      	mov	r4, r0
   20ea8:	2800      	cmp	r0, #0
   20eaa:	d02e      	beq.n	20f0a <handle_button_events+0x66>
		return -EINVAL;
	}

	/* skip input handling for flip sensor */
#if CONFIG_FLIP_INPUT > 0
	if (evt->button == CONFIG_FLIP_INPUT) {
   20eac:	6843      	ldr	r3, [r0, #4]
   20eae:	2b03      	cmp	r3, #3
   20eb0:	d02e      	beq.n	20f10 <handle_button_events+0x6c>
		return -ENOENT;
	}
#endif

	/* get current time from device */
	lwm2m_engine_get_s32("3/0/13", &ts);
   20eb2:	a901      	add	r1, sp, #4
   20eb4:	4818      	ldr	r0, [pc, #96]	; (20f18 <handle_button_events+0x74>)
   20eb6:	f022 f8dc 	bl	43072 <lwm2m_engine_get_s32>
	state = (evt->type == UI_EVT_BUTTON_ACTIVE);
   20eba:	7821      	ldrb	r1, [r4, #0]
	switch (evt->button) {
   20ebc:	6863      	ldr	r3, [r4, #4]
	state = (evt->type == UI_EVT_BUTTON_ACTIVE);
   20ebe:	fab1 f181 	clz	r1, r1
	switch (evt->button) {
   20ec2:	3b01      	subs	r3, #1
	state = (evt->type == UI_EVT_BUTTON_ACTIVE);
   20ec4:	0949      	lsrs	r1, r1, #5
	switch (evt->button) {
   20ec6:	2b03      	cmp	r3, #3
   20ec8:	d822      	bhi.n	20f10 <handle_button_events+0x6c>
   20eca:	e8df f003 	tbb	[pc, r3]
   20ece:	0c02      	.short	0x0c02
   20ed0:	1812      	.short	0x1812
	case UI_BUTTON_1:
		lwm2m_engine_set_bool("3347/0/5500", state);
   20ed2:	4812      	ldr	r0, [pc, #72]	; (20f1c <handle_button_events+0x78>)
   20ed4:	f022 f8b9 	bl	4304a <lwm2m_engine_set_bool>
		lwm2m_engine_set_s32("3347/0/5518", ts);
   20ed8:	9901      	ldr	r1, [sp, #4]
   20eda:	4811      	ldr	r0, [pc, #68]	; (20f20 <handle_button_events+0x7c>)
		return 0;
	case UI_BUTTON_2:
		lwm2m_engine_set_bool("3347/1/5500", state);
		lwm2m_engine_set_s32("3347/1/5518", ts);
   20edc:	f022 f8ab 	bl	43036 <lwm2m_engine_set_s32>
		return 0;
   20ee0:	2000      	movs	r0, #0
		lwm2m_engine_set_s32("3342/1/5518", ts);
		return 0;
	}

	return -ENOENT;
}
   20ee2:	b002      	add	sp, #8
   20ee4:	bd10      	pop	{r4, pc}
		lwm2m_engine_set_bool("3347/1/5500", state);
   20ee6:	480f      	ldr	r0, [pc, #60]	; (20f24 <handle_button_events+0x80>)
   20ee8:	f022 f8af 	bl	4304a <lwm2m_engine_set_bool>
		lwm2m_engine_set_s32("3347/1/5518", ts);
   20eec:	9901      	ldr	r1, [sp, #4]
   20eee:	480e      	ldr	r0, [pc, #56]	; (20f28 <handle_button_events+0x84>)
   20ef0:	e7f4      	b.n	20edc <handle_button_events+0x38>
		lwm2m_engine_set_bool("3342/0/5500", state);
   20ef2:	480e      	ldr	r0, [pc, #56]	; (20f2c <handle_button_events+0x88>)
   20ef4:	f022 f8a9 	bl	4304a <lwm2m_engine_set_bool>
		lwm2m_engine_set_s32("3342/0/5518", ts);
   20ef8:	9901      	ldr	r1, [sp, #4]
   20efa:	480d      	ldr	r0, [pc, #52]	; (20f30 <handle_button_events+0x8c>)
   20efc:	e7ee      	b.n	20edc <handle_button_events+0x38>
		lwm2m_engine_set_bool("3342/1/5500", state);
   20efe:	480d      	ldr	r0, [pc, #52]	; (20f34 <handle_button_events+0x90>)
   20f00:	f022 f8a3 	bl	4304a <lwm2m_engine_set_bool>
		lwm2m_engine_set_s32("3342/1/5518", ts);
   20f04:	9901      	ldr	r1, [sp, #4]
   20f06:	480c      	ldr	r0, [pc, #48]	; (20f38 <handle_button_events+0x94>)
   20f08:	e7e8      	b.n	20edc <handle_button_events+0x38>
		return -EINVAL;
   20f0a:	f06f 0015 	mvn.w	r0, #21
   20f0e:	e7e8      	b.n	20ee2 <handle_button_events+0x3e>
	return -ENOENT;
   20f10:	f06f 0001 	mvn.w	r0, #1
   20f14:	e7e5      	b.n	20ee2 <handle_button_events+0x3e>
   20f16:	bf00      	nop
   20f18:	00047e7d 	.word	0x00047e7d
   20f1c:	00047ef4 	.word	0x00047ef4
   20f20:	00047f00 	.word	0x00047f00
   20f24:	00047f0c 	.word	0x00047f0c
   20f28:	00047f18 	.word	0x00047f18
   20f2c:	00047f24 	.word	0x00047f24
   20f30:	00047f30 	.word	0x00047f30
   20f34:	00047f3c 	.word	0x00047f3c
   20f38:	00047f48 	.word	0x00047f48

00020f3c <lwm2m_init_button>:

int lwm2m_init_button(void)
{
   20f3c:	b510      	push	{r4, lr}
#if CONFIG_FLIP_INPUT != UI_BUTTON_1
	/* create button1 object */
	lwm2m_engine_create_obj_inst("3347/0");
   20f3e:	4823      	ldr	r0, [pc, #140]	; (20fcc <lwm2m_init_button+0x90>)
   20f40:	f009 faa4 	bl	2a48c <lwm2m_engine_create_obj_inst>
	lwm2m_engine_set_bool("3347/0/5500", ui_button_is_active(UI_BUTTON_1));
   20f44:	2001      	movs	r0, #1
   20f46:	f01f f89e 	bl	40086 <ui_button_is_active>
	lwm2m_engine_set_res_data("3347/0/5750",
				  BUTTON1_NAME, sizeof(BUTTON1_NAME),
				  LWM2M_RES_DATA_FLAG_RO);
	lwm2m_engine_set_res_data("3347/0/5518",
   20f4a:	4c21      	ldr	r4, [pc, #132]	; (20fd0 <lwm2m_init_button+0x94>)
	lwm2m_engine_set_bool("3347/0/5500", ui_button_is_active(UI_BUTTON_1));
   20f4c:	4601      	mov	r1, r0
   20f4e:	4821      	ldr	r0, [pc, #132]	; (20fd4 <lwm2m_init_button+0x98>)
   20f50:	f022 f87b 	bl	4304a <lwm2m_engine_set_bool>
	lwm2m_engine_set_res_data("3347/0/5750",
   20f54:	2301      	movs	r3, #1
   20f56:	2208      	movs	r2, #8
   20f58:	491f      	ldr	r1, [pc, #124]	; (20fd8 <lwm2m_init_button+0x9c>)
   20f5a:	4820      	ldr	r0, [pc, #128]	; (20fdc <lwm2m_init_button+0xa0>)
   20f5c:	f009 fac8 	bl	2a4f0 <lwm2m_engine_set_res_data>
	lwm2m_engine_set_res_data("3347/0/5518",
   20f60:	2300      	movs	r3, #0
   20f62:	2204      	movs	r2, #4
   20f64:	4621      	mov	r1, r4
   20f66:	481e      	ldr	r0, [pc, #120]	; (20fe0 <lwm2m_init_button+0xa4>)
   20f68:	f009 fac2 	bl	2a4f0 <lwm2m_engine_set_res_data>
				  &timestamp[0], sizeof(timestamp[0]), 0);
#endif

#if CONFIG_FLIP_INPUT != UI_BUTTON_2
	/* create button2 object */
	lwm2m_engine_create_obj_inst("3347/1");
   20f6c:	481d      	ldr	r0, [pc, #116]	; (20fe4 <lwm2m_init_button+0xa8>)
   20f6e:	f009 fa8d 	bl	2a48c <lwm2m_engine_create_obj_inst>
	lwm2m_engine_set_bool("3347/1/5500", ui_button_is_active(UI_BUTTON_2));
   20f72:	2002      	movs	r0, #2
   20f74:	f01f f887 	bl	40086 <ui_button_is_active>
   20f78:	4601      	mov	r1, r0
   20f7a:	481b      	ldr	r0, [pc, #108]	; (20fe8 <lwm2m_init_button+0xac>)
   20f7c:	f022 f865 	bl	4304a <lwm2m_engine_set_bool>
	lwm2m_engine_set_res_data("3347/1/5750",
   20f80:	2301      	movs	r3, #1
   20f82:	2208      	movs	r2, #8
   20f84:	4919      	ldr	r1, [pc, #100]	; (20fec <lwm2m_init_button+0xb0>)
   20f86:	481a      	ldr	r0, [pc, #104]	; (20ff0 <lwm2m_init_button+0xb4>)
   20f88:	f009 fab2 	bl	2a4f0 <lwm2m_engine_set_res_data>
				  BUTTON2_NAME, sizeof(BUTTON2_NAME),
				  LWM2M_RES_DATA_FLAG_RO);
	lwm2m_engine_set_res_data("3347/1/5518",
   20f8c:	2204      	movs	r2, #4
   20f8e:	2300      	movs	r3, #0
   20f90:	18a1      	adds	r1, r4, r2
   20f92:	4818      	ldr	r0, [pc, #96]	; (20ff4 <lwm2m_init_button+0xb8>)
   20f94:	f009 faac 	bl	2a4f0 <lwm2m_engine_set_res_data>
				  &timestamp[2], sizeof(timestamp[2]), 0);
#endif

#if CONFIG_FLIP_INPUT != UI_SWITCH_2
	/* create switch2 object */
	lwm2m_engine_create_obj_inst("3342/1");
   20f98:	4817      	ldr	r0, [pc, #92]	; (20ff8 <lwm2m_init_button+0xbc>)
   20f9a:	f009 fa77 	bl	2a48c <lwm2m_engine_create_obj_inst>
	lwm2m_engine_set_bool("3342/1/5500", ui_button_is_active(UI_SWITCH_2));
   20f9e:	2004      	movs	r0, #4
   20fa0:	f01f f871 	bl	40086 <ui_button_is_active>
   20fa4:	4601      	mov	r1, r0
   20fa6:	4815      	ldr	r0, [pc, #84]	; (20ffc <lwm2m_init_button+0xc0>)
   20fa8:	f022 f84f 	bl	4304a <lwm2m_engine_set_bool>
	lwm2m_engine_set_res_data("3342/1/5750",
   20fac:	2301      	movs	r3, #1
   20fae:	2208      	movs	r2, #8
   20fb0:	4913      	ldr	r1, [pc, #76]	; (21000 <lwm2m_init_button+0xc4>)
   20fb2:	4814      	ldr	r0, [pc, #80]	; (21004 <lwm2m_init_button+0xc8>)
   20fb4:	f009 fa9c 	bl	2a4f0 <lwm2m_engine_set_res_data>
				  SWITCH2_NAME, sizeof(SWITCH2_NAME),
				  LWM2M_RES_DATA_FLAG_RO);
	lwm2m_engine_set_res_data("3342/1/5518",
   20fb8:	2300      	movs	r3, #0
   20fba:	2204      	movs	r2, #4
   20fbc:	f104 010c 	add.w	r1, r4, #12
   20fc0:	4811      	ldr	r0, [pc, #68]	; (21008 <lwm2m_init_button+0xcc>)
   20fc2:	f009 fa95 	bl	2a4f0 <lwm2m_engine_set_res_data>
				  &timestamp[3], sizeof(timestamp[3]), 0);
#endif

	return 0;
}
   20fc6:	2000      	movs	r0, #0
   20fc8:	bd10      	pop	{r4, pc}
   20fca:	bf00      	nop
   20fcc:	00047f54 	.word	0x00047f54
   20fd0:	20021e14 	.word	0x20021e14
   20fd4:	00047ef4 	.word	0x00047ef4
   20fd8:	00047f5b 	.word	0x00047f5b
   20fdc:	00047f63 	.word	0x00047f63
   20fe0:	00047f00 	.word	0x00047f00
   20fe4:	00047f6f 	.word	0x00047f6f
   20fe8:	00047f0c 	.word	0x00047f0c
   20fec:	00047f76 	.word	0x00047f76
   20ff0:	00047f7e 	.word	0x00047f7e
   20ff4:	00047f18 	.word	0x00047f18
   20ff8:	00047f8a 	.word	0x00047f8a
   20ffc:	00047f3c 	.word	0x00047f3c
   21000:	00047f91 	.word	0x00047f91
   21004:	00047f99 	.word	0x00047f99
   21008:	00047f48 	.word	0x00047f48

0002100c <flip_work.constprop.0>:

/**@brief Poll flip orientation and update object if flip mode is enabled. */
static void flip_work(struct k_work *work)
   2100c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	static enum orientation_state last_orientation_state =
		ORIENTATION_NOT_KNOWN;
	static struct orientation_detector_sensor_data sensor_data;
	struct float32_value f32;

	if (orientation_detector_poll(&sensor_data) == 0) {
   2100e:	4c4c      	ldr	r4, [pc, #304]	; (21140 <flip_work.constprop.0+0x134>)
   21010:	4620      	mov	r0, r4
   21012:	f7fc f889 	bl	1d128 <orientation_detector_poll>
   21016:	4606      	mov	r6, r0
   21018:	2800      	cmp	r0, #0
   2101a:	d139      	bne.n	21090 <flip_work.constprop.0+0x84>
		if (sensor_data.orientation == last_orientation_state) {
   2101c:	4d49      	ldr	r5, [pc, #292]	; (21144 <flip_work.constprop.0+0x138>)
   2101e:	7e22      	ldrb	r2, [r4, #24]
   21020:	782b      	ldrb	r3, [r5, #0]
   21022:	429a      	cmp	r2, r3
   21024:	d034      	beq.n	21090 <flip_work.constprop.0+0x84>
			goto exit;
		}

		/* get current time from device */
		lwm2m_engine_get_s32("3/0/13", &ts);
   21026:	a901      	add	r1, sp, #4
   21028:	4847      	ldr	r0, [pc, #284]	; (21148 <flip_work.constprop.0+0x13c>)
   2102a:	f022 f822 	bl	43072 <lwm2m_engine_get_s32>

		f32.val1 = 0;
   2102e:	4b47      	ldr	r3, [pc, #284]	; (2114c <flip_work.constprop.0+0x140>)
		f32.val2 = 0;
		switch (sensor_data.orientation) {
   21030:	7e22      	ldrb	r2, [r4, #24]
			f32.val1 = 1;
			lwm2m_engine_set_float32("3313/0/5703", &f32);
			break;
		default:
			/* X=0, Y=0, Z=0 */
			LOG_INF("accelerometer in unknown position");
   21032:	681b      	ldr	r3, [r3, #0]
		switch (sensor_data.orientation) {
   21034:	2a02      	cmp	r2, #2
		f32.val2 = 0;
   21036:	e9cd 6602 	strd	r6, r6, [sp, #8]
			LOG_INF("accelerometer in unknown position");
   2103a:	f003 0307 	and.w	r3, r3, #7
		switch (sensor_data.orientation) {
   2103e:	d029      	beq.n	21094 <flip_work.constprop.0+0x88>
   21040:	2a03      	cmp	r2, #3
   21042:	d042      	beq.n	210ca <flip_work.constprop.0+0xbe>
   21044:	2a01      	cmp	r2, #1
   21046:	d15d      	bne.n	21104 <flip_work.constprop.0+0xf8>
			LOG_INF("accelerometer normal");
   21048:	2b02      	cmp	r3, #2
   2104a:	d90d      	bls.n	21068 <flip_work.constprop.0+0x5c>
   2104c:	2303      	movs	r3, #3
   2104e:	f04f 0100 	mov.w	r1, #0
   21052:	4a3f      	ldr	r2, [pc, #252]	; (21150 <flip_work.constprop.0+0x144>)
   21054:	f363 0107 	bfi	r1, r3, #0, #8
   21058:	4b3e      	ldr	r3, [pc, #248]	; (21154 <flip_work.constprop.0+0x148>)
   2105a:	483f      	ldr	r0, [pc, #252]	; (21158 <flip_work.constprop.0+0x14c>)
   2105c:	1a9b      	subs	r3, r3, r2
   2105e:	08db      	lsrs	r3, r3, #3
   21060:	f363 118f 	bfi	r1, r3, #6, #10
   21064:	f01f fced 	bl	40a42 <log_0>
			lwm2m_engine_set_float32("3313/0/5702", &f32);
   21068:	a902      	add	r1, sp, #8
   2106a:	483c      	ldr	r0, [pc, #240]	; (2115c <flip_work.constprop.0+0x150>)
   2106c:	f021 fff8 	bl	43060 <lwm2m_engine_set_float32>
			lwm2m_engine_set_float32("3313/0/5703", &f32);
   21070:	a902      	add	r1, sp, #8
   21072:	483b      	ldr	r0, [pc, #236]	; (21160 <flip_work.constprop.0+0x154>)
   21074:	f021 fff4 	bl	43060 <lwm2m_engine_set_float32>
			f32.val1 = 1;
   21078:	2301      	movs	r3, #1
			lwm2m_engine_set_float32("3313/0/5704", &f32);
   2107a:	483a      	ldr	r0, [pc, #232]	; (21164 <flip_work.constprop.0+0x158>)
			f32.val1 = -1;
   2107c:	9302      	str	r3, [sp, #8]
			lwm2m_engine_set_float32("3313/0/5704", &f32);
   2107e:	a902      	add	r1, sp, #8
			lwm2m_engine_set_float32("3313/0/5703", &f32);
   21080:	f021 ffee 	bl	43060 <lwm2m_engine_set_float32>
			lwm2m_engine_set_float32("3313/0/5704", &f32);
			goto exit;
		}

		/* set timestamp */
		lwm2m_engine_set_s32("3313/0/5518", ts);
   21084:	9901      	ldr	r1, [sp, #4]
   21086:	4838      	ldr	r0, [pc, #224]	; (21168 <flip_work.constprop.0+0x15c>)
   21088:	f021 ffd5 	bl	43036 <lwm2m_engine_set_s32>
		last_orientation_state = sensor_data.orientation;
   2108c:	7e23      	ldrb	r3, [r4, #24]
   2108e:	702b      	strb	r3, [r5, #0]

exit:
	if (work) {
		k_delayed_work_submit(&flip_poll_work, FLIP_POLL_INTERVAL);
	}
}
   21090:	b004      	add	sp, #16
   21092:	bd70      	pop	{r4, r5, r6, pc}
			LOG_INF("accelerometer upside down");
   21094:	2b02      	cmp	r3, #2
   21096:	d90d      	bls.n	210b4 <flip_work.constprop.0+0xa8>
   21098:	2303      	movs	r3, #3
   2109a:	f04f 0100 	mov.w	r1, #0
   2109e:	4a2c      	ldr	r2, [pc, #176]	; (21150 <flip_work.constprop.0+0x144>)
   210a0:	f363 0107 	bfi	r1, r3, #0, #8
   210a4:	4b2b      	ldr	r3, [pc, #172]	; (21154 <flip_work.constprop.0+0x148>)
   210a6:	4831      	ldr	r0, [pc, #196]	; (2116c <flip_work.constprop.0+0x160>)
   210a8:	1a9b      	subs	r3, r3, r2
   210aa:	08db      	lsrs	r3, r3, #3
   210ac:	f363 118f 	bfi	r1, r3, #6, #10
   210b0:	f01f fcc7 	bl	40a42 <log_0>
			lwm2m_engine_set_float32("3313/0/5702", &f32);
   210b4:	a902      	add	r1, sp, #8
   210b6:	4829      	ldr	r0, [pc, #164]	; (2115c <flip_work.constprop.0+0x150>)
   210b8:	f021 ffd2 	bl	43060 <lwm2m_engine_set_float32>
			lwm2m_engine_set_float32("3313/0/5703", &f32);
   210bc:	a902      	add	r1, sp, #8
   210be:	4828      	ldr	r0, [pc, #160]	; (21160 <flip_work.constprop.0+0x154>)
   210c0:	f021 ffce 	bl	43060 <lwm2m_engine_set_float32>
			f32.val1 = -1;
   210c4:	f04f 33ff 	mov.w	r3, #4294967295
   210c8:	e7d7      	b.n	2107a <flip_work.constprop.0+0x6e>
			LOG_INF("accelerometer on side");
   210ca:	2b02      	cmp	r3, #2
   210cc:	d90d      	bls.n	210ea <flip_work.constprop.0+0xde>
   210ce:	2303      	movs	r3, #3
   210d0:	f04f 0100 	mov.w	r1, #0
   210d4:	4a1e      	ldr	r2, [pc, #120]	; (21150 <flip_work.constprop.0+0x144>)
   210d6:	f363 0107 	bfi	r1, r3, #0, #8
   210da:	4b1e      	ldr	r3, [pc, #120]	; (21154 <flip_work.constprop.0+0x148>)
   210dc:	4824      	ldr	r0, [pc, #144]	; (21170 <flip_work.constprop.0+0x164>)
   210de:	1a9b      	subs	r3, r3, r2
   210e0:	08db      	lsrs	r3, r3, #3
   210e2:	f363 118f 	bfi	r1, r3, #6, #10
   210e6:	f01f fcac 	bl	40a42 <log_0>
			lwm2m_engine_set_float32("3313/0/5702", &f32);
   210ea:	a902      	add	r1, sp, #8
   210ec:	481b      	ldr	r0, [pc, #108]	; (2115c <flip_work.constprop.0+0x150>)
   210ee:	f021 ffb7 	bl	43060 <lwm2m_engine_set_float32>
			lwm2m_engine_set_float32("3313/0/5704", &f32);
   210f2:	a902      	add	r1, sp, #8
   210f4:	481b      	ldr	r0, [pc, #108]	; (21164 <flip_work.constprop.0+0x158>)
   210f6:	f021 ffb3 	bl	43060 <lwm2m_engine_set_float32>
			f32.val1 = 1;
   210fa:	2301      	movs	r3, #1
			lwm2m_engine_set_float32("3313/0/5703", &f32);
   210fc:	a902      	add	r1, sp, #8
			f32.val1 = 1;
   210fe:	9302      	str	r3, [sp, #8]
			lwm2m_engine_set_float32("3313/0/5703", &f32);
   21100:	4817      	ldr	r0, [pc, #92]	; (21160 <flip_work.constprop.0+0x154>)
   21102:	e7bd      	b.n	21080 <flip_work.constprop.0+0x74>
			LOG_INF("accelerometer in unknown position");
   21104:	2b02      	cmp	r3, #2
   21106:	d90d      	bls.n	21124 <flip_work.constprop.0+0x118>
   21108:	2303      	movs	r3, #3
   2110a:	f04f 0100 	mov.w	r1, #0
   2110e:	4a10      	ldr	r2, [pc, #64]	; (21150 <flip_work.constprop.0+0x144>)
   21110:	f363 0107 	bfi	r1, r3, #0, #8
   21114:	4b0f      	ldr	r3, [pc, #60]	; (21154 <flip_work.constprop.0+0x148>)
   21116:	4817      	ldr	r0, [pc, #92]	; (21174 <flip_work.constprop.0+0x168>)
   21118:	1a9b      	subs	r3, r3, r2
   2111a:	08db      	lsrs	r3, r3, #3
   2111c:	f363 118f 	bfi	r1, r3, #6, #10
   21120:	f01f fc8f 	bl	40a42 <log_0>
			lwm2m_engine_set_float32("3313/0/5702", &f32);
   21124:	a902      	add	r1, sp, #8
   21126:	480d      	ldr	r0, [pc, #52]	; (2115c <flip_work.constprop.0+0x150>)
   21128:	f021 ff9a 	bl	43060 <lwm2m_engine_set_float32>
			lwm2m_engine_set_float32("3313/0/5703", &f32);
   2112c:	a902      	add	r1, sp, #8
   2112e:	480c      	ldr	r0, [pc, #48]	; (21160 <flip_work.constprop.0+0x154>)
   21130:	f021 ff96 	bl	43060 <lwm2m_engine_set_float32>
			lwm2m_engine_set_float32("3313/0/5704", &f32);
   21134:	a902      	add	r1, sp, #8
   21136:	480b      	ldr	r0, [pc, #44]	; (21164 <flip_work.constprop.0+0x158>)
   21138:	f021 ff92 	bl	43060 <lwm2m_engine_set_float32>
			goto exit;
   2113c:	e7a8      	b.n	21090 <flip_work.constprop.0+0x84>
   2113e:	bf00      	nop
   21140:	20020878 	.word	0x20020878
   21144:	2002997f 	.word	0x2002997f
   21148:	00047e7d 	.word	0x00047e7d
   2114c:	20032a88 	.word	0x20032a88
   21150:	00045f08 	.word	0x00045f08
   21154:	00045f10 	.word	0x00045f10
   21158:	00047fb6 	.word	0x00047fb6
   2115c:	00047fcb 	.word	0x00047fcb
   21160:	00047fd7 	.word	0x00047fd7
   21164:	00047fe3 	.word	0x00047fe3
   21168:	00048041 	.word	0x00048041
   2116c:	00047fef 	.word	0x00047fef
   21170:	00048009 	.word	0x00048009
   21174:	0004801f 	.word	0x0004801f

00021178 <lwm2m_init_accel>:

	return -ENOENT;
}

int lwm2m_init_accel(void)
{
   21178:	b508      	push	{r3, lr}
   2117a:	4817      	ldr	r0, [pc, #92]	; (211d8 <lwm2m_init_accel+0x60>)
   2117c:	f019 ff84 	bl	3b088 <z_impl_device_get_binding>

	if (IS_ENABLED(CONFIG_FLIP_POLL)) {
		k_delayed_work_init(&flip_poll_work, flip_work);
	}

	accel_dev = device_get_binding(CONFIG_ACCEL_DEV_NAME);
   21180:	4b16      	ldr	r3, [pc, #88]	; (211dc <lwm2m_init_accel+0x64>)
   21182:	6018      	str	r0, [r3, #0]
	if (accel_dev == NULL) {
   21184:	b9a8      	cbnz	r0, 211b2 <lwm2m_init_accel+0x3a>
		LOG_ERR("Could not get %s device", CONFIG_ACCEL_DEV_NAME);
   21186:	4b16      	ldr	r3, [pc, #88]	; (211e0 <lwm2m_init_accel+0x68>)
   21188:	681b      	ldr	r3, [r3, #0]
   2118a:	075b      	lsls	r3, r3, #29
   2118c:	d00e      	beq.n	211ac <lwm2m_init_accel+0x34>
   2118e:	2301      	movs	r3, #1
   21190:	f04f 0200 	mov.w	r2, #0
   21194:	4913      	ldr	r1, [pc, #76]	; (211e4 <lwm2m_init_accel+0x6c>)
   21196:	f363 0207 	bfi	r2, r3, #0, #8
   2119a:	4b13      	ldr	r3, [pc, #76]	; (211e8 <lwm2m_init_accel+0x70>)
   2119c:	4813      	ldr	r0, [pc, #76]	; (211ec <lwm2m_init_accel+0x74>)
   2119e:	1a5b      	subs	r3, r3, r1
   211a0:	08db      	lsrs	r3, r3, #3
   211a2:	f363 128f 	bfi	r2, r3, #6, #10
   211a6:	490c      	ldr	r1, [pc, #48]	; (211d8 <lwm2m_init_accel+0x60>)
   211a8:	f01f fc58 	bl	40a5c <log_1>
		return -ENOENT;
   211ac:	f06f 0001 	mvn.w	r0, #1
   211b0:	e011      	b.n	211d6 <lwm2m_init_accel+0x5e>
			return ret;
		}
	}

	/* create accel object */
	lwm2m_engine_create_obj_inst("3313/0");
   211b2:	480f      	ldr	r0, [pc, #60]	; (211f0 <lwm2m_init_accel+0x78>)
   211b4:	f009 f96a 	bl	2a48c <lwm2m_engine_create_obj_inst>
	lwm2m_engine_set_res_data("3313/0/5701",
   211b8:	2301      	movs	r3, #1
   211ba:	220c      	movs	r2, #12
   211bc:	490d      	ldr	r1, [pc, #52]	; (211f4 <lwm2m_init_accel+0x7c>)
   211be:	480e      	ldr	r0, [pc, #56]	; (211f8 <lwm2m_init_accel+0x80>)
   211c0:	f009 f996 	bl	2a4f0 <lwm2m_engine_set_res_data>
				  SENSOR_UNIT_NAME, sizeof(SENSOR_UNIT_NAME),
				  LWM2M_RES_DATA_FLAG_RO);
	lwm2m_engine_set_res_data("3313/0/5518",
   211c4:	2300      	movs	r3, #0
   211c6:	2204      	movs	r2, #4
   211c8:	490c      	ldr	r1, [pc, #48]	; (211fc <lwm2m_init_accel+0x84>)
   211ca:	480d      	ldr	r0, [pc, #52]	; (21200 <lwm2m_init_accel+0x88>)
   211cc:	f009 f990 	bl	2a4f0 <lwm2m_engine_set_res_data>
	if (IS_ENABLED(CONFIG_FLIP_POLL)) {
		k_delayed_work_submit(&flip_poll_work, K_NO_WAIT);
	}

	if (IS_ENABLED(CONFIG_ACCEL_USE_SIM)) {
		flip_work(NULL);
   211d0:	f7ff ff1c 	bl	2100c <flip_work.constprop.0>
	}

	return 0;
   211d4:	2000      	movs	r0, #0
}
   211d6:	bd08      	pop	{r3, pc}
   211d8:	0004804d 	.word	0x0004804d
   211dc:	20021e24 	.word	0x20021e24
   211e0:	20032a88 	.word	0x20032a88
   211e4:	00045f08 	.word	0x00045f08
   211e8:	00045f10 	.word	0x00045f10
   211ec:	00047a0e 	.word	0x00047a0e
   211f0:	00048058 	.word	0x00048058
   211f4:	0004805f 	.word	0x0004805f
   211f8:	0004806b 	.word	0x0004806b
   211fc:	20021e28 	.word	0x20021e28
   21200:	00048041 	.word	0x00048041

00021204 <leds_update>:
{
	static bool led_on;
	static u8_t current_led_on_mask;
	u8_t led_on_mask;

	led_on_mask = UI_LED_GET_ON(current_led_state);
   21204:	4b11      	ldr	r3, [pc, #68]	; (2124c <leds_update+0x48>)
{
   21206:	b570      	push	{r4, r5, r6, lr}
	led_on_mask = UI_LED_GET_ON(current_led_state);
   21208:	881c      	ldrh	r4, [r3, #0]
	led_on = !led_on;
   2120a:	4b11      	ldr	r3, [pc, #68]	; (21250 <leds_update+0x4c>)
{
   2120c:	4606      	mov	r6, r0
	led_on = !led_on;
   2120e:	781a      	ldrb	r2, [r3, #0]
   21210:	f082 0201 	eor.w	r2, r2, #1
   21214:	701a      	strb	r2, [r3, #0]

	if (led_on) {
   21216:	f344 2307 	sbfx	r3, r4, #8, #8
   2121a:	b264      	sxtb	r4, r4
   2121c:	b192      	cbz	r2, 21244 <leds_update+0x40>
		led_on_mask |= UI_LED_GET_BLINK(current_led_state);
   2121e:	431c      	orrs	r4, r3
	} else {
		led_on_mask &= ~UI_LED_GET_BLINK(current_led_state);
	}

	if (led_on_mask != current_led_on_mask) {
   21220:	4d0c      	ldr	r5, [pc, #48]	; (21254 <leds_update+0x50>)
		led_on_mask &= ~UI_LED_GET_BLINK(current_led_state);
   21222:	b2e4      	uxtb	r4, r4
	if (led_on_mask != current_led_on_mask) {
   21224:	782b      	ldrb	r3, [r5, #0]
   21226:	42a3      	cmp	r3, r4
   21228:	d003      	beq.n	21232 <leds_update+0x2e>
#if defined(CONFIG_DK_LIBRARY)
		dk_set_leds(led_on_mask);
   2122a:	4620      	mov	r0, r4
   2122c:	f023 fa9f 	bl	4476e <dk_set_leds>
#endif
		current_led_on_mask = led_on_mask;
   21230:	702c      	strb	r4, [r5, #0]
	}

	if (work) {
   21232:	b156      	cbz	r6, 2124a <leds_update+0x46>
		} else {
			k_delayed_work_submit(&leds_update_work,
						UI_LED_OFF_PERIOD_NORMAL);
		}
	}
}
   21234:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 * @req K-DWORK-001
 */
static inline int k_delayed_work_submit(struct k_delayed_work *work,
					s32_t delay)
{
	return k_delayed_work_submit_to_queue(&k_sys_work_q, work, delay);
   21238:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
   2123c:	4906      	ldr	r1, [pc, #24]	; (21258 <leds_update+0x54>)
   2123e:	4807      	ldr	r0, [pc, #28]	; (2125c <leds_update+0x58>)
   21240:	f01c bbf2 	b.w	3da28 <k_delayed_work_submit_to_queue>
		led_on_mask &= ~UI_LED_GET_BLINK(current_led_state);
   21244:	ea24 0403 	bic.w	r4, r4, r3
   21248:	e7ea      	b.n	21220 <leds_update+0x1c>
}
   2124a:	bd70      	pop	{r4, r5, r6, pc}
   2124c:	20029834 	.word	0x20029834
   21250:	20029981 	.word	0x20029981
   21254:	20029980 	.word	0x20029980
   21258:	20021e2c 	.word	0x20021e2c
   2125c:	20029754 	.word	0x20029754

00021260 <ui_led_set_pattern>:
#endif /* CONFIG_UI_LED_USE_PWM */

void ui_led_set_pattern(enum ui_led_pattern state)
{
	current_led_state = state;
   21260:	4b01      	ldr	r3, [pc, #4]	; (21268 <ui_led_set_pattern+0x8>)
   21262:	8018      	strh	r0, [r3, #0]
#ifdef CONFIG_UI_LED_USE_PWM
	ui_led_set_effect(state);
#else
	current_led_state = state;
#endif /* CONFIG_UI_LED_USE_PWM */
}
   21264:	4770      	bx	lr
   21266:	bf00      	nop
   21268:	20029834 	.word	0x20029834

0002126c <ui_led_set_state>:
}

void ui_led_set_state(u32_t led, u8_t value)
{
#if !defined(CONFIG_UI_LED_USE_PWM)
	if (value) {
   2126c:	2301      	movs	r3, #1
   2126e:	3801      	subs	r0, #1
   21270:	4a05      	ldr	r2, [pc, #20]	; (21288 <ui_led_set_state+0x1c>)
   21272:	fa03 f000 	lsl.w	r0, r3, r0
   21276:	b280      	uxth	r0, r0
   21278:	8813      	ldrh	r3, [r2, #0]
   2127a:	b111      	cbz	r1, 21282 <ui_led_set_state+0x16>
		current_led_state |= BIT(led - 1);
   2127c:	4318      	orrs	r0, r3
   2127e:	8010      	strh	r0, [r2, #0]
	} else {
		current_led_state &= ~BIT(led - 1);
	}
#endif
}
   21280:	4770      	bx	lr
		current_led_state &= ~BIT(led - 1);
   21282:	ea23 0000 	bic.w	r0, r3, r0
   21286:	e7fa      	b.n	2127e <ui_led_set_state+0x12>
   21288:	20029834 	.word	0x20029834

0002128c <ui_init>:

int ui_init(ui_callback_t cb)
{
   2128c:	b538      	push	{r3, r4, r5, lr}
   2128e:	4605      	mov	r5, r0
	if (err) {
		LOG_ERR("Error when initializing PWM controlled LEDs");
		return err;
	}
#else
	err = dk_leds_init();
   21290:	f00f fb24 	bl	308dc <dk_leds_init>
	if (err) {
   21294:	4604      	mov	r4, r0
   21296:	b1a0      	cbz	r0, 212c2 <ui_init+0x36>
		LOG_ERR("Could not initialize leds, err code: %d", err);
   21298:	4b27      	ldr	r3, [pc, #156]	; (21338 <ui_init+0xac>)
   2129a:	681b      	ldr	r3, [r3, #0]
   2129c:	0759      	lsls	r1, r3, #29
   2129e:	d00e      	beq.n	212be <ui_init+0x32>
   212a0:	2301      	movs	r3, #1
   212a2:	f04f 0200 	mov.w	r2, #0
   212a6:	4925      	ldr	r1, [pc, #148]	; (2133c <ui_init+0xb0>)
   212a8:	f363 0207 	bfi	r2, r3, #0, #8
   212ac:	4b24      	ldr	r3, [pc, #144]	; (21340 <ui_init+0xb4>)
   212ae:	1a5b      	subs	r3, r3, r1
   212b0:	08db      	lsrs	r3, r3, #3
   212b2:	4601      	mov	r1, r0
   212b4:	4823      	ldr	r0, [pc, #140]	; (21344 <ui_init+0xb8>)
   212b6:	f363 128f 	bfi	r2, r3, #6, #10
#endif /* CONFIG_UI_BUTTONS */

#ifdef CONFIG_UI_BUZZER
	err = ui_buzzer_init();
	if (err) {
		LOG_ERR("Could not enable buzzer, err code: %d", err);
   212ba:	f01f fbcf 	bl	40a5c <log_1>
		return err;
	}
#endif /* CONFIG_UI_BUZZER */

	return err;
}
   212be:	4620      	mov	r0, r4
   212c0:	bd38      	pop	{r3, r4, r5, pc}
	err = dk_set_leds_state(0x00, DK_ALL_LEDS_MSK);
   212c2:	210f      	movs	r1, #15
   212c4:	f023 fa49 	bl	4475a <dk_set_leds_state>
	if (err) {
   212c8:	4604      	mov	r4, r0
   212ca:	b188      	cbz	r0, 212f0 <ui_init+0x64>
		LOG_ERR("Could not set leds state, err code: %d", err);
   212cc:	4b1a      	ldr	r3, [pc, #104]	; (21338 <ui_init+0xac>)
   212ce:	681b      	ldr	r3, [r3, #0]
   212d0:	075a      	lsls	r2, r3, #29
   212d2:	d0f4      	beq.n	212be <ui_init+0x32>
   212d4:	2301      	movs	r3, #1
   212d6:	f04f 0200 	mov.w	r2, #0
   212da:	4918      	ldr	r1, [pc, #96]	; (2133c <ui_init+0xb0>)
   212dc:	f363 0207 	bfi	r2, r3, #0, #8
   212e0:	4b17      	ldr	r3, [pc, #92]	; (21340 <ui_init+0xb4>)
   212e2:	1a5b      	subs	r3, r3, r1
   212e4:	08db      	lsrs	r3, r3, #3
   212e6:	4601      	mov	r1, r0
   212e8:	f363 128f 	bfi	r2, r3, #6, #10
   212ec:	4816      	ldr	r0, [pc, #88]	; (21348 <ui_init+0xbc>)
   212ee:	e7e4      	b.n	212ba <ui_init+0x2e>
	k_delayed_work_init(&leds_update_work, leds_update);
   212f0:	4916      	ldr	r1, [pc, #88]	; (2134c <ui_init+0xc0>)
   212f2:	4817      	ldr	r0, [pc, #92]	; (21350 <ui_init+0xc4>)
   212f4:	f023 fcd9 	bl	44caa <k_delayed_work_init>
   212f8:	4622      	mov	r2, r4
   212fa:	4915      	ldr	r1, [pc, #84]	; (21350 <ui_init+0xc4>)
   212fc:	4815      	ldr	r0, [pc, #84]	; (21354 <ui_init+0xc8>)
   212fe:	f01c fb93 	bl	3da28 <k_delayed_work_submit_to_queue>
	err = ui_button_init(cb);
   21302:	4628      	mov	r0, r5
   21304:	f000 f852 	bl	213ac <ui_button_init>
	err = ui_buzzer_init();
   21308:	f000 f87e 	bl	21408 <ui_buzzer_init>
	if (err) {
   2130c:	4604      	mov	r4, r0
   2130e:	2800      	cmp	r0, #0
   21310:	d0d5      	beq.n	212be <ui_init+0x32>
		LOG_ERR("Could not enable buzzer, err code: %d", err);
   21312:	4b09      	ldr	r3, [pc, #36]	; (21338 <ui_init+0xac>)
   21314:	681b      	ldr	r3, [r3, #0]
   21316:	075b      	lsls	r3, r3, #29
   21318:	d0d1      	beq.n	212be <ui_init+0x32>
   2131a:	2301      	movs	r3, #1
   2131c:	f04f 0200 	mov.w	r2, #0
   21320:	4906      	ldr	r1, [pc, #24]	; (2133c <ui_init+0xb0>)
   21322:	f363 0207 	bfi	r2, r3, #0, #8
   21326:	4b06      	ldr	r3, [pc, #24]	; (21340 <ui_init+0xb4>)
   21328:	1a5b      	subs	r3, r3, r1
   2132a:	08db      	lsrs	r3, r3, #3
   2132c:	4601      	mov	r1, r0
   2132e:	f363 128f 	bfi	r2, r3, #6, #10
   21332:	4809      	ldr	r0, [pc, #36]	; (21358 <ui_init+0xcc>)
   21334:	e7c1      	b.n	212ba <ui_init+0x2e>
   21336:	bf00      	nop
   21338:	20032b5c 	.word	0x20032b5c
   2133c:	00045f08 	.word	0x00045f08
   21340:	000460b8 	.word	0x000460b8
   21344:	000480bf 	.word	0x000480bf
   21348:	000480e7 	.word	0x000480e7
   2134c:	00021205 	.word	0x00021205
   21350:	20021e2c 	.word	0x20021e2c
   21354:	20029754 	.word	0x20029754
   21358:	0004810e 	.word	0x0004810e

0002135c <button_handler>:

static ui_callback_t callback;

/**@brief Callback for button events from the DK buttons and LEDs library. */
static void button_handler(u32_t button_states, u32_t has_changed)
{
   2135c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   2135e:	4605      	mov	r5, r0
   21360:	460c      	mov	r4, r1
				break;
			}
		}

		/* Button number has been stored, remove from bitmask. */
		has_changed &= ~(1UL << (btn_num - 1));
   21362:	2601      	movs	r6, #1
		evt.button = btn_num;
		evt.type = (button_states & BIT(btn_num - 1))
				? UI_EVT_BUTTON_ACTIVE
				: UI_EVT_BUTTON_INACTIVE;

		callback(&evt);
   21364:	4f10      	ldr	r7, [pc, #64]	; (213a8 <button_handler+0x4c>)
	while (has_changed) {
   21366:	b90c      	cbnz	r4, 2136c <button_handler+0x10>
	}
}
   21368:	b003      	add	sp, #12
   2136a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   2136c:	2300      	movs	r3, #0
			if (has_changed & BIT(i)) {
   2136e:	1c59      	adds	r1, r3, #1
   21370:	fa24 f303 	lsr.w	r3, r4, r3
   21374:	f013 0001 	ands.w	r0, r3, #1
   21378:	b2ca      	uxtb	r2, r1
   2137a:	d103      	bne.n	21384 <button_handler+0x28>
		for (u8_t i = 0; i < 32; i++) {
   2137c:	2920      	cmp	r1, #32
   2137e:	460b      	mov	r3, r1
   21380:	d1f5      	bne.n	2136e <button_handler+0x12>
		btn_num = 0;
   21382:	4602      	mov	r2, r0
		has_changed &= ~(1UL << (btn_num - 1));
   21384:	1e53      	subs	r3, r2, #1
   21386:	fa06 f103 	lsl.w	r1, r6, r3
				? UI_EVT_BUTTON_ACTIVE
   2138a:	fa25 f303 	lsr.w	r3, r5, r3
				: UI_EVT_BUTTON_INACTIVE;
   2138e:	43db      	mvns	r3, r3
   21390:	f003 0301 	and.w	r3, r3, #1
   21394:	f88d 3000 	strb.w	r3, [sp]
		evt.button = btn_num;
   21398:	9201      	str	r2, [sp, #4]
		callback(&evt);
   2139a:	683b      	ldr	r3, [r7, #0]
   2139c:	4668      	mov	r0, sp
		has_changed &= ~(1UL << (btn_num - 1));
   2139e:	ea24 0401 	bic.w	r4, r4, r1
		callback(&evt);
   213a2:	4798      	blx	r3
   213a4:	e7df      	b.n	21366 <button_handler+0xa>
   213a6:	bf00      	nop
   213a8:	20021e4c 	.word	0x20021e4c

000213ac <ui_button_init>:

int ui_button_init(ui_callback_t cb)
{
   213ac:	b510      	push	{r4, lr}
	int err = 0;

	if (cb) {
   213ae:	b910      	cbnz	r0, 213b6 <ui_button_init+0xa>
	int err = 0;
   213b0:	2400      	movs	r4, #0
			return err;
		}
	}

	return err;
}
   213b2:	4620      	mov	r0, r4
   213b4:	bd10      	pop	{r4, pc}
		callback  = cb;
   213b6:	4b0e      	ldr	r3, [pc, #56]	; (213f0 <ui_button_init+0x44>)
   213b8:	6018      	str	r0, [r3, #0]
		err = dk_buttons_init(button_handler);
   213ba:	480e      	ldr	r0, [pc, #56]	; (213f4 <ui_button_init+0x48>)
   213bc:	f00f faf2 	bl	309a4 <dk_buttons_init>
		if (err) {
   213c0:	4604      	mov	r4, r0
   213c2:	2800      	cmp	r0, #0
   213c4:	d0f4      	beq.n	213b0 <ui_button_init+0x4>
			LOG_ERR("Could not initialize buttons, err code: %d\n",
   213c6:	4b0c      	ldr	r3, [pc, #48]	; (213f8 <ui_button_init+0x4c>)
   213c8:	681b      	ldr	r3, [r3, #0]
   213ca:	075b      	lsls	r3, r3, #29
   213cc:	d0f1      	beq.n	213b2 <ui_button_init+0x6>
   213ce:	2301      	movs	r3, #1
   213d0:	f04f 0200 	mov.w	r2, #0
   213d4:	4909      	ldr	r1, [pc, #36]	; (213fc <ui_button_init+0x50>)
   213d6:	f363 0207 	bfi	r2, r3, #0, #8
   213da:	4b09      	ldr	r3, [pc, #36]	; (21400 <ui_button_init+0x54>)
   213dc:	1a5b      	subs	r3, r3, r1
   213de:	08db      	lsrs	r3, r3, #3
   213e0:	4601      	mov	r1, r0
   213e2:	f363 128f 	bfi	r2, r3, #6, #10
   213e6:	4807      	ldr	r0, [pc, #28]	; (21404 <ui_button_init+0x58>)
   213e8:	f01f fb38 	bl	40a5c <log_1>
   213ec:	e7e1      	b.n	213b2 <ui_button_init+0x6>
   213ee:	bf00      	nop
   213f0:	20021e4c 	.word	0x20021e4c
   213f4:	0002135d 	.word	0x0002135d
   213f8:	20032ac0 	.word	0x20032ac0
   213fc:	00045f08 	.word	0x00045f08
   21400:	00045f80 	.word	0x00045f80
   21404:	00048134 	.word	0x00048134

00021408 <ui_buzzer_init>:

	return err;
}

int ui_buzzer_init(void)
{
   21408:	b510      	push	{r4, lr}
   2140a:	4815      	ldr	r0, [pc, #84]	; (21460 <ui_buzzer_init+0x58>)
   2140c:	f019 fe3c 	bl	3b088 <z_impl_device_get_binding>
	const char *dev_name = CONFIG_UI_BUZZER_PWM_DEV_NAME;
	int err = 0;

	pwm_dev = device_get_binding(dev_name);
   21410:	4b14      	ldr	r3, [pc, #80]	; (21464 <ui_buzzer_init+0x5c>)
   21412:	6018      	str	r0, [r3, #0]
	if (!pwm_dev) {
   21414:	b9c8      	cbnz	r0, 2144a <ui_buzzer_init+0x42>
		LOG_ERR("Could not bind to device %s", log_strdup(dev_name));
   21416:	4b14      	ldr	r3, [pc, #80]	; (21468 <ui_buzzer_init+0x60>)
   21418:	681b      	ldr	r3, [r3, #0]
   2141a:	075b      	lsls	r3, r3, #29
   2141c:	d012      	beq.n	21444 <ui_buzzer_init+0x3c>
   2141e:	2301      	movs	r3, #1
   21420:	f04f 0400 	mov.w	r4, #0
   21424:	4a11      	ldr	r2, [pc, #68]	; (2146c <ui_buzzer_init+0x64>)
   21426:	f363 0407 	bfi	r4, r3, #0, #8
   2142a:	4b11      	ldr	r3, [pc, #68]	; (21470 <ui_buzzer_init+0x68>)
   2142c:	480c      	ldr	r0, [pc, #48]	; (21460 <ui_buzzer_init+0x58>)
   2142e:	1a9b      	subs	r3, r3, r2
   21430:	08db      	lsrs	r3, r3, #3
   21432:	f363 148f 	bfi	r4, r3, #6, #10
   21436:	f000 fc39 	bl	21cac <log_strdup>
   2143a:	4622      	mov	r2, r4
   2143c:	4601      	mov	r1, r0
   2143e:	480d      	ldr	r0, [pc, #52]	; (21474 <ui_buzzer_init+0x6c>)
   21440:	f01f fb0c 	bl	40a5c <log_1>
		err = -ENODEV;
   21444:	f06f 0012 	mvn.w	r0, #18
   21448:	e000      	b.n	2144c <ui_buzzer_init+0x44>
	int err = 0;
   2144a:	2000      	movs	r0, #0
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   2144c:	2201      	movs	r2, #1
   2144e:	4b0a      	ldr	r3, [pc, #40]	; (21478 <ui_buzzer_init+0x70>)
   21450:	e8d3 1fef 	ldaex	r1, [r3]
   21454:	e8c3 2fe4 	stlex	r4, r2, [r3]
   21458:	2c00      	cmp	r4, #0
   2145a:	d1f9      	bne.n	21450 <ui_buzzer_init+0x48>
	}

	buzzer_enable();

	return err;
}
   2145c:	bd10      	pop	{r4, pc}
   2145e:	bf00      	nop
   21460:	0004a299 	.word	0x0004a299
   21464:	20021e54 	.word	0x20021e54
   21468:	20032ac4 	.word	0x20032ac4
   2146c:	00045f08 	.word	0x00045f08
   21470:	00045f88 	.word	0x00045f88
   21474:	00048160 	.word	0x00048160
   21478:	20021e50 	.word	0x20021e50

0002147c <crc8_ccitt>:
	0x00, 0x07, 0x0e, 0x09, 0x1c, 0x1b, 0x12, 0x15,
	0x38, 0x3f, 0x36, 0x31, 0x24, 0x23, 0x2a, 0x2d
};

u8_t crc8_ccitt(u8_t val, const void *buf, size_t cnt)
{
   2147c:	b510      	push	{r4, lr}
	int i;
	const u8_t *p = buf;

	for (i = 0; i < cnt; i++) {
		val ^= p[i];
		val = (val << 4) ^ crc8_ccitt_small_table[val >> 4];
   2147e:	4c09      	ldr	r4, [pc, #36]	; (214a4 <crc8_ccitt+0x28>)
   21480:	440a      	add	r2, r1
	for (i = 0; i < cnt; i++) {
   21482:	4291      	cmp	r1, r2
   21484:	d100      	bne.n	21488 <crc8_ccitt+0xc>
		val = (val << 4) ^ crc8_ccitt_small_table[val >> 4];
	}
	return val;
}
   21486:	bd10      	pop	{r4, pc}
		val ^= p[i];
   21488:	f811 3b01 	ldrb.w	r3, [r1], #1
   2148c:	4043      	eors	r3, r0
		val = (val << 4) ^ crc8_ccitt_small_table[val >> 4];
   2148e:	0918      	lsrs	r0, r3, #4
   21490:	5c20      	ldrb	r0, [r4, r0]
   21492:	ea80 1003 	eor.w	r0, r0, r3, lsl #4
   21496:	b2c3      	uxtb	r3, r0
		val = (val << 4) ^ crc8_ccitt_small_table[val >> 4];
   21498:	0918      	lsrs	r0, r3, #4
   2149a:	5c20      	ldrb	r0, [r4, r0]
   2149c:	ea80 1003 	eor.w	r0, r0, r3, lsl #4
   214a0:	b2c0      	uxtb	r0, r0
   214a2:	e7ee      	b.n	21482 <crc8_ccitt+0x6>
   214a4:	0004817c 	.word	0x0004817c

000214a8 <z_sys_mem_pool_block_free>:
	return 0;
}

void z_sys_mem_pool_block_free(struct sys_mem_pool_base *p, u32_t level,
			      u32_t block)
{
   214a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   214ac:	b085      	sub	sp, #20
	size_t lsizes[LVL_ARRAY_SZ(p->n_levels)];
   214ae:	7a83      	ldrb	r3, [r0, #10]
{
   214b0:	af00      	add	r7, sp, #0
	size_t lsizes[LVL_ARRAY_SZ(p->n_levels)];
   214b2:	009b      	lsls	r3, r3, #2
   214b4:	3307      	adds	r3, #7
   214b6:	f403 63ff 	and.w	r3, r3, #2040	; 0x7f8
   214ba:	ebad 0d03 	sub.w	sp, sp, r3
   214be:	46eb      	mov	fp, sp
	 * to avoid having to store it in precious RAM bytes.
	 * Overhead here is somewhat higher because block_free()
	 * doesn't inherently need to traverse all the larger
	 * sublevels.
	 */
	lsizes[0] = p->max_sz;
   214c0:	6843      	ldr	r3, [r0, #4]
{
   214c2:	4606      	mov	r6, r0
	lsizes[0] = p->max_sz;
   214c4:	465c      	mov	r4, fp
	for (i = 1; i <= level; i++) {
   214c6:	2001      	movs	r0, #1
	lsizes[0] = p->max_sz;
   214c8:	f8cb 3000 	str.w	r3, [fp]
	for (i = 1; i <= level; i++) {
   214cc:	4281      	cmp	r1, r0
   214ce:	d222      	bcs.n	21516 <z_sys_mem_pool_block_free+0x6e>
	if (p->flags & SYS_MEM_POOL_KERNEL) {
   214d0:	7c30      	ldrb	r0, [r6, #16]
		lsizes[i] = WB_DN(lsizes[i-1] / 4);
	}

	block_free(p, level, lsizes, block);
   214d2:	4688      	mov	r8, r1
	if (p->flags & SYS_MEM_POOL_KERNEL) {
   214d4:	f010 0001 	ands.w	r0, r0, #1
	block_free(p, level, lsizes, block);
   214d8:	4615      	mov	r5, r2
	if (p->flags & SYS_MEM_POOL_KERNEL) {
   214da:	d001      	beq.n	214e0 <z_sys_mem_pool_block_free+0x38>
   214dc:	f01e fdf6 	bl	400cc <pool_irq_lock.isra.2.part.3>
	unsigned int key = pool_irq_lock(p);
   214e0:	4604      	mov	r4, r0
	while (level >= 0) {
   214e2:	f1b8 0f00 	cmp.w	r8, #0
   214e6:	da1e      	bge.n	21526 <z_sys_mem_pool_block_free+0x7e>
	__ASSERT(0, "out of levels");
   214e8:	23bc      	movs	r3, #188	; 0xbc
   214ea:	4a50      	ldr	r2, [pc, #320]	; (2162c <z_sys_mem_pool_block_free+0x184>)
   214ec:	4950      	ldr	r1, [pc, #320]	; (21630 <z_sys_mem_pool_block_free+0x188>)
   214ee:	4851      	ldr	r0, [pc, #324]	; (21634 <z_sys_mem_pool_block_free+0x18c>)
   214f0:	f01f f887 	bl	40602 <printk>
   214f4:	4850      	ldr	r0, [pc, #320]	; (21638 <z_sys_mem_pool_block_free+0x190>)
   214f6:	f01f f884 	bl	40602 <printk>
   214fa:	21bc      	movs	r1, #188	; 0xbc
   214fc:	484b      	ldr	r0, [pc, #300]	; (2162c <z_sys_mem_pool_block_free+0x184>)
   214fe:	f01f f943 	bl	40788 <assert_post_action>
	return -1;
   21502:	f04f 34ff 	mov.w	r4, #4294967295
	pool_irq_unlock(p, key);
   21506:	4621      	mov	r1, r4
   21508:	7c30      	ldrb	r0, [r6, #16]
   2150a:	f01e fde8 	bl	400de <pool_irq_unlock.isra.4>
}
   2150e:	3714      	adds	r7, #20
   21510:	46bd      	mov	sp, r7
   21512:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		lsizes[i] = WB_DN(lsizes[i-1] / 4);
   21516:	6823      	ldr	r3, [r4, #0]
	for (i = 1; i <= level; i++) {
   21518:	3001      	adds	r0, #1
		lsizes[i] = WB_DN(lsizes[i-1] / 4);
   2151a:	089b      	lsrs	r3, r3, #2
   2151c:	f023 0303 	bic.w	r3, r3, #3
   21520:	f844 3f04 	str.w	r3, [r4, #4]!
   21524:	e7d2      	b.n	214cc <z_sys_mem_pool_block_free+0x24>
		int i, lsz = lsizes[level];
   21526:	f85b 3028 	ldr.w	r3, [fp, r8, lsl #2]
	int bit = get_bit_ptr(p, level, bn, &word);
   2152a:	462a      	mov	r2, r5
	return (u8_t *)p->buf + lsz * block;
   2152c:	fb03 fa05 	mul.w	sl, r3, r5
		int i, lsz = lsizes[level];
   21530:	607b      	str	r3, [r7, #4]
	return (u8_t *)p->buf + lsz * block;
   21532:	6833      	ldr	r3, [r6, #0]
	int bit = get_bit_ptr(p, level, bn, &word);
   21534:	4641      	mov	r1, r8
	return (u8_t *)p->buf + lsz * block;
   21536:	603b      	str	r3, [r7, #0]
   21538:	eb03 090a 	add.w	r9, r3, sl
	int bit = get_bit_ptr(p, level, bn, &word);
   2153c:	4630      	mov	r0, r6
   2153e:	f107 030c 	add.w	r3, r7, #12
   21542:	f01e fdac 	bl	4009e <get_bit_ptr>
	return (*word >> bit) & 1;
   21546:	68fb      	ldr	r3, [r7, #12]
   21548:	681b      	ldr	r3, [r3, #0]
   2154a:	fa23 f000 	lsr.w	r0, r3, r0
		__ASSERT(alloc_bit_is_set(p, level, bn),
   2154e:	07c3      	lsls	r3, r0, #31
   21550:	d40d      	bmi.n	2156e <z_sys_mem_pool_block_free+0xc6>
   21552:	23a3      	movs	r3, #163	; 0xa3
   21554:	4a35      	ldr	r2, [pc, #212]	; (2162c <z_sys_mem_pool_block_free+0x184>)
   21556:	4939      	ldr	r1, [pc, #228]	; (2163c <z_sys_mem_pool_block_free+0x194>)
   21558:	4836      	ldr	r0, [pc, #216]	; (21634 <z_sys_mem_pool_block_free+0x18c>)
   2155a:	f01f f852 	bl	40602 <printk>
   2155e:	4649      	mov	r1, r9
   21560:	4837      	ldr	r0, [pc, #220]	; (21640 <z_sys_mem_pool_block_free+0x198>)
   21562:	f01f f84e 	bl	40602 <printk>
   21566:	21a3      	movs	r1, #163	; 0xa3
   21568:	4830      	ldr	r0, [pc, #192]	; (2162c <z_sys_mem_pool_block_free+0x184>)
   2156a:	f01f f90d 	bl	40788 <assert_post_action>
	int bit = get_bit_ptr(p, level, bn, &word);
   2156e:	f107 030c 	add.w	r3, r7, #12
   21572:	462a      	mov	r2, r5
   21574:	4641      	mov	r1, r8
   21576:	4630      	mov	r0, r6
   21578:	f01e fd91 	bl	4009e <get_bit_ptr>
	*word &= ~(1<<bit);
   2157c:	2301      	movs	r3, #1
   2157e:	68fa      	ldr	r2, [r7, #12]
   21580:	fa03 f000 	lsl.w	r0, r3, r0
   21584:	6813      	ldr	r3, [r2, #0]
 * @return N/A
 */

static inline void sys_dlist_append(sys_dlist_t *list, sys_dnode_t *node)
{
	node->next = list;
   21586:	6839      	ldr	r1, [r7, #0]
   21588:	ea23 0300 	bic.w	r3, r3, r0
   2158c:	6013      	str	r3, [r2, #0]
		sys_dlist_append(&p->levels[level].free_list, block);
   2158e:	230c      	movs	r3, #12
   21590:	68f2      	ldr	r2, [r6, #12]
   21592:	fb03 2308 	mla	r3, r3, r8, r2
   21596:	1d1a      	adds	r2, r3, #4
   21598:	f841 200a 	str.w	r2, [r1, sl]
	node->prev = list->tail;
   2159c:	689a      	ldr	r2, [r3, #8]
		pool_irq_unlock(p, key);
   2159e:	4621      	mov	r1, r4
   215a0:	f8c9 2004 	str.w	r2, [r9, #4]

	list->tail->next = node;
   215a4:	689a      	ldr	r2, [r3, #8]
   215a6:	f8c2 9000 	str.w	r9, [r2]
	list->tail = node;
   215aa:	f8c3 9008 	str.w	r9, [r3, #8]
   215ae:	7c30      	ldrb	r0, [r6, #16]
   215b0:	f01e fd95 	bl	400de <pool_irq_unlock.isra.4>
	if (p->flags & SYS_MEM_POOL_KERNEL) {
   215b4:	7c30      	ldrb	r0, [r6, #16]
   215b6:	f010 0001 	ands.w	r0, r0, #1
   215ba:	d001      	beq.n	215c0 <z_sys_mem_pool_block_free+0x118>
   215bc:	f01e fd86 	bl	400cc <pool_irq_lock.isra.2.part.3>
		key = pool_irq_lock(p);
   215c0:	4604      	mov	r4, r0
		if (level == 0 || partner_alloc_bits(p, level, bn) != 0) {
   215c2:	f1b8 0f00 	cmp.w	r8, #0
   215c6:	d09e      	beq.n	21506 <z_sys_mem_pool_block_free+0x5e>
	int bit = get_bit_ptr(p, level, bn, &word);
   215c8:	f107 030c 	add.w	r3, r7, #12
   215cc:	462a      	mov	r2, r5
   215ce:	4641      	mov	r1, r8
   215d0:	4630      	mov	r0, r6
   215d2:	f01e fd64 	bl	4009e <get_bit_ptr>
	return (*word >> (4*(bit / 4))) & 0xf;
   215d6:	68fb      	ldr	r3, [r7, #12]
   215d8:	2800      	cmp	r0, #0
   215da:	bfb8      	it	lt
   215dc:	3003      	addlt	r0, #3
   215de:	681b      	ldr	r3, [r3, #0]
   215e0:	f020 0003 	bic.w	r0, r0, #3
   215e4:	fa23 f000 	lsr.w	r0, r3, r0
		if (level == 0 || partner_alloc_bits(p, level, bn) != 0) {
   215e8:	f010 000f 	ands.w	r0, r0, #15
   215ec:	d18b      	bne.n	21506 <z_sys_mem_pool_block_free+0x5e>
	node->next = NULL;
   215ee:	4684      	mov	ip, r0
			int b = (bn & ~3) + i;
   215f0:	f025 0a03 	bic.w	sl, r5, #3
	return (u8_t *)p->buf + lsz * block;
   215f4:	687a      	ldr	r2, [r7, #4]
			int b = (bn & ~3) + i;
   215f6:	eb0a 0300 	add.w	r3, sl, r0
	return (u8_t *)p->buf + lsz * block;
   215fa:	4353      	muls	r3, r2
   215fc:	6832      	ldr	r2, [r6, #0]
		for (i = 0; i < 4; i++) {
   215fe:	3001      	adds	r0, #1
	return (u8_t *)p->buf + lsz * block;
   21600:	18d1      	adds	r1, r2, r3
 * @return N/A
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	node->prev->next = node->next;
   21602:	f8d1 9004 	ldr.w	r9, [r1, #4]
   21606:	f852 e003 	ldr.w	lr, [r2, r3]
		for (i = 0; i < 4; i++) {
   2160a:	2804      	cmp	r0, #4
   2160c:	f8c9 e000 	str.w	lr, [r9]
	node->next->prev = node->prev;
   21610:	f8ce 9004 	str.w	r9, [lr, #4]
	node->next = NULL;
   21614:	f842 c003 	str.w	ip, [r2, r3]
	node->prev = NULL;
   21618:	f8c1 c004 	str.w	ip, [r1, #4]
   2161c:	d1ea      	bne.n	215f4 <z_sys_mem_pool_block_free+0x14c>
		bn = bn / 4;
   2161e:	2d00      	cmp	r5, #0
   21620:	bfb8      	it	lt
   21622:	3503      	addlt	r5, #3
		level = level - 1;
   21624:	f108 38ff 	add.w	r8, r8, #4294967295
		bn = bn / 4;
   21628:	10ad      	asrs	r5, r5, #2
   2162a:	e75a      	b.n	214e2 <z_sys_mem_pool_block_free+0x3a>
   2162c:	0004818c 	.word	0x0004818c
   21630:	0004d39b 	.word	0x0004d39b
   21634:	0004764f 	.word	0x0004764f
   21638:	000481f4 	.word	0x000481f4
   2163c:	000481b0 	.word	0x000481b0
   21640:	000481cf 	.word	0x000481cf

00021644 <char_out>:

static int char_out(int c, void *ctx_p)
{
	struct out_context *ctx = ctx_p;

	ctx->count++;
   21644:	680b      	ldr	r3, [r1, #0]
   21646:	3301      	adds	r3, #1
   21648:	600b      	str	r3, [r1, #0]
	return _char_out(c);
   2164a:	4b01      	ldr	r3, [pc, #4]	; (21650 <char_out+0xc>)
   2164c:	681b      	ldr	r3, [r3, #0]
   2164e:	4718      	bx	r3
   21650:	20032344 	.word	0x20032344

00021654 <_printk_dec_ulong>:
 * @return N/A
 */
static void _printk_dec_ulong(out_func_t out, void *ctx,
			      const unsigned long num, enum pad_type padding,
			      int min_width)
{
   21654:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   21658:	b085      	sub	sp, #20
   2165a:	9c0e      	ldr	r4, [sp, #56]	; 0x38
   2165c:	469b      	mov	fp, r3
   2165e:	2c01      	cmp	r4, #1
   21660:	bfb8      	it	lt
   21662:	2401      	movlt	r4, #1
   21664:	2b01      	cmp	r3, #1
   21666:	bf0c      	ite	eq
   21668:	2330      	moveq	r3, #48	; 0x30
   2166a:	2320      	movne	r3, #32
   2166c:	4616      	mov	r6, r2
   2166e:	4682      	mov	sl, r0
   21670:	4688      	mov	r8, r1
   21672:	2501      	movs	r5, #1
   21674:	270a      	movs	r7, #10
   21676:	2200      	movs	r2, #0
   21678:	f8df 906c 	ldr.w	r9, [pc, #108]	; 216e8 <_printk_dec_ulong+0x94>
   2167c:	9302      	str	r3, [sp, #8]
	if (min_width <= 0) {
		min_width = 1;
	}

	while (pos >= 10) {
		if (found_largest_digit != 0 || remainder >= pos) {
   2167e:	fbb6 f3f9 	udiv	r3, r6, r9
   21682:	9301      	str	r3, [sp, #4]
   21684:	b90a      	cbnz	r2, 2168a <_printk_dec_ulong+0x36>
   21686:	45b1      	cmp	r9, r6
   21688:	d81c      	bhi.n	216c4 <_printk_dec_ulong+0x70>
			found_largest_digit = 1;
			out((int)(remainder / pos + 48), ctx);
   2168a:	9b01      	ldr	r3, [sp, #4]
   2168c:	4641      	mov	r1, r8
   2168e:	f103 0030 	add.w	r0, r3, #48	; 0x30
   21692:	47d0      	blx	sl
			found_largest_digit = 1;
   21694:	2201      	movs	r2, #1
			digits++;
   21696:	3501      	adds	r5, #1
				&& padding < PAD_SPACE_AFTER) {
			out((int)(padding == PAD_ZERO_BEFORE ? '0' : ' '), ctx);
			digits++;
		}
		remaining--;
		remainder %= pos;
   21698:	9b01      	ldr	r3, [sp, #4]
		remaining--;
   2169a:	3f01      	subs	r7, #1
		remainder %= pos;
   2169c:	fb09 6613 	mls	r6, r9, r3, r6
		pos /= 10;
   216a0:	230a      	movs	r3, #10
	while (pos >= 10) {
   216a2:	2f01      	cmp	r7, #1
		pos /= 10;
   216a4:	fbb9 f9f3 	udiv	r9, r9, r3
	while (pos >= 10) {
   216a8:	d1e9      	bne.n	2167e <_printk_dec_ulong+0x2a>
	}
	out((int)(remainder + 48), ctx);
   216aa:	4641      	mov	r1, r8
   216ac:	f106 0030 	add.w	r0, r6, #48	; 0x30
   216b0:	47d0      	blx	sl

	if (padding == PAD_SPACE_AFTER) {
   216b2:	f1bb 0f03 	cmp.w	fp, #3
   216b6:	d102      	bne.n	216be <_printk_dec_ulong+0x6a>
		remaining = min_width - digits;
   216b8:	1b64      	subs	r4, r4, r5
		while (remaining-- > 0) {
   216ba:	2c00      	cmp	r4, #0
   216bc:	dc0e      	bgt.n	216dc <_printk_dec_ulong+0x88>
			out(' ', ctx);
		}
	}
}
   216be:	b005      	add	sp, #20
   216c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		} else if (remaining <= min_width
   216c4:	42bc      	cmp	r4, r7
   216c6:	dbe7      	blt.n	21698 <_printk_dec_ulong+0x44>
				&& padding < PAD_SPACE_AFTER) {
   216c8:	f1bb 0f02 	cmp.w	fp, #2
   216cc:	d8e4      	bhi.n	21698 <_printk_dec_ulong+0x44>
			out((int)(padding == PAD_ZERO_BEFORE ? '0' : ' '), ctx);
   216ce:	4641      	mov	r1, r8
   216d0:	9802      	ldr	r0, [sp, #8]
   216d2:	9203      	str	r2, [sp, #12]
			digits++;
   216d4:	3501      	adds	r5, #1
			out((int)(padding == PAD_ZERO_BEFORE ? '0' : ' '), ctx);
   216d6:	47d0      	blx	sl
			digits++;
   216d8:	9a03      	ldr	r2, [sp, #12]
   216da:	e7dd      	b.n	21698 <_printk_dec_ulong+0x44>
			out(' ', ctx);
   216dc:	4641      	mov	r1, r8
   216de:	2020      	movs	r0, #32
   216e0:	47d0      	blx	sl
   216e2:	3c01      	subs	r4, #1
   216e4:	e7e9      	b.n	216ba <_printk_dec_ulong+0x66>
   216e6:	bf00      	nop
   216e8:	3b9aca00 	.word	0x3b9aca00

000216ec <__printk_hook_install>:
	_char_out = fn;
   216ec:	4b01      	ldr	r3, [pc, #4]	; (216f4 <__printk_hook_install+0x8>)
   216ee:	6018      	str	r0, [r3, #0]
}
   216f0:	4770      	bx	lr
   216f2:	bf00      	nop
   216f4:	20032344 	.word	0x20032344

000216f8 <vprintk>:
	struct out_context ctx = { 0 };
   216f8:	2300      	movs	r3, #0
{
   216fa:	b507      	push	{r0, r1, r2, lr}
	z_vprintk(char_out, &ctx, fmt, ap);
   216fc:	4602      	mov	r2, r0
	struct out_context ctx = { 0 };
   216fe:	9301      	str	r3, [sp, #4]
	z_vprintk(char_out, &ctx, fmt, ap);
   21700:	4803      	ldr	r0, [pc, #12]	; (21710 <vprintk+0x18>)
   21702:	460b      	mov	r3, r1
   21704:	a901      	add	r1, sp, #4
   21706:	f01e fe0c 	bl	40322 <z_vprintk>
}
   2170a:	b003      	add	sp, #12
   2170c:	f85d fb04 	ldr.w	pc, [sp], #4
   21710:	00021645 	.word	0x00021645

00021714 <vsnprintk>:

	return ret;
}

int vsnprintk(char *str, size_t size, const char *fmt, va_list ap)
{
   21714:	b530      	push	{r4, r5, lr}
	struct str_context ctx = { str, size, 0 };
   21716:	2500      	movs	r5, #0
{
   21718:	b085      	sub	sp, #20
	struct str_context ctx = { str, size, 0 };
   2171a:	e9cd 0101 	strd	r0, r1, [sp, #4]
{
   2171e:	4604      	mov	r4, r0

	z_vprintk((out_func_t)str_out, &ctx, fmt, ap);
   21720:	a901      	add	r1, sp, #4
   21722:	4805      	ldr	r0, [pc, #20]	; (21738 <vsnprintk+0x24>)
	struct str_context ctx = { str, size, 0 };
   21724:	9503      	str	r5, [sp, #12]
	z_vprintk((out_func_t)str_out, &ctx, fmt, ap);
   21726:	f01e fdfc 	bl	40322 <z_vprintk>

	if (ctx.count < ctx.max) {
   2172a:	e9dd 3002 	ldrd	r3, r0, [sp, #8]
   2172e:	4298      	cmp	r0, r3
		str[ctx.count] = '\0';
   21730:	bfb8      	it	lt
   21732:	5425      	strblt	r5, [r4, r0]
	}

	return ctx.count;
}
   21734:	b005      	add	sp, #20
   21736:	bd30      	pop	{r4, r5, pc}
   21738:	000402fd 	.word	0x000402fd

0002173c <ring_buf_put>:

	return 0;
}

u32_t ring_buf_put(struct ring_buf *buf, const u8_t *data, u32_t size)
{
   2173c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   21740:	4680      	mov	r8, r0
   21742:	460f      	mov	r7, r1
   21744:	4616      	mov	r6, r2
	u8_t *dst;
	u32_t partial_size;
	u32_t total_size = 0U;
   21746:	2500      	movs	r5, #0
	int err;

	do {
		partial_size = ring_buf_put_claim(buf, &dst, size);
   21748:	4632      	mov	r2, r6
   2174a:	a901      	add	r1, sp, #4
   2174c:	4640      	mov	r0, r8
   2174e:	f01e ffb7 	bl	406c0 <ring_buf_put_claim>
   21752:	4604      	mov	r4, r0
   21754:	4602      	mov	r2, r0
   21756:	4639      	mov	r1, r7
   21758:	9801      	ldr	r0, [sp, #4]
   2175a:	f023 fb79 	bl	44e50 <memcpy>
		memcpy(dst, data, partial_size);
		total_size += partial_size;
		size -= partial_size;
		data += partial_size;
	} while (size && partial_size);
   2175e:	1b36      	subs	r6, r6, r4
		total_size += partial_size;
   21760:	4425      	add	r5, r4
		data += partial_size;
   21762:	4427      	add	r7, r4
	} while (size && partial_size);
   21764:	d001      	beq.n	2176a <ring_buf_put+0x2e>
   21766:	2c00      	cmp	r4, #0
   21768:	d1ee      	bne.n	21748 <ring_buf_put+0xc>

	err = ring_buf_put_finish(buf, total_size);
   2176a:	4629      	mov	r1, r5
   2176c:	4640      	mov	r0, r8
   2176e:	f01e ffc2 	bl	406f6 <ring_buf_put_finish>
	__ASSERT_NO_MSG(err == 0);
   21772:	b148      	cbz	r0, 21788 <ring_buf_put+0x4c>
   21774:	4906      	ldr	r1, [pc, #24]	; (21790 <ring_buf_put+0x54>)
   21776:	4807      	ldr	r0, [pc, #28]	; (21794 <ring_buf_put+0x58>)
   21778:	239e      	movs	r3, #158	; 0x9e
   2177a:	4a07      	ldr	r2, [pc, #28]	; (21798 <ring_buf_put+0x5c>)
   2177c:	f01e ff41 	bl	40602 <printk>
   21780:	219e      	movs	r1, #158	; 0x9e
   21782:	4805      	ldr	r0, [pc, #20]	; (21798 <ring_buf_put+0x5c>)
   21784:	f01f f800 	bl	40788 <assert_post_action>

	return total_size;
}
   21788:	4628      	mov	r0, r5
   2178a:	b002      	add	sp, #8
   2178c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   21790:	0004822c 	.word	0x0004822c
   21794:	0004764f 	.word	0x0004764f
   21798:	00048204 	.word	0x00048204

0002179c <ring_buf_get>:

	return 0;
}

u32_t ring_buf_get(struct ring_buf *buf, u8_t *data, u32_t size)
{
   2179c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   217a0:	4680      	mov	r8, r0
   217a2:	460f      	mov	r7, r1
   217a4:	4616      	mov	r6, r2
	u8_t *src;
	u32_t partial_size;
	u32_t total_size = 0U;
   217a6:	2500      	movs	r5, #0
	int err;

	do {
		partial_size = ring_buf_get_claim(buf, &src, size);
   217a8:	4632      	mov	r2, r6
   217aa:	a901      	add	r1, sp, #4
   217ac:	4640      	mov	r0, r8
   217ae:	f01e ffb5 	bl	4071c <ring_buf_get_claim>
   217b2:	4604      	mov	r4, r0
   217b4:	4602      	mov	r2, r0
   217b6:	9901      	ldr	r1, [sp, #4]
   217b8:	4638      	mov	r0, r7
   217ba:	f023 fb49 	bl	44e50 <memcpy>
		memcpy(data, src, partial_size);
		total_size += partial_size;
		size -= partial_size;
		data += partial_size;
	} while (size && partial_size);
   217be:	1b36      	subs	r6, r6, r4
		total_size += partial_size;
   217c0:	4425      	add	r5, r4
		data += partial_size;
   217c2:	4427      	add	r7, r4
	} while (size && partial_size);
   217c4:	d001      	beq.n	217ca <ring_buf_get+0x2e>
   217c6:	2c00      	cmp	r4, #0
   217c8:	d1ee      	bne.n	217a8 <ring_buf_get+0xc>

	err = ring_buf_get_finish(buf, total_size);
   217ca:	4629      	mov	r1, r5
   217cc:	4640      	mov	r0, r8
   217ce:	f01e ffc6 	bl	4075e <ring_buf_get_finish>
	__ASSERT_NO_MSG(err == 0);
   217d2:	b148      	cbz	r0, 217e8 <ring_buf_get+0x4c>
   217d4:	4906      	ldr	r1, [pc, #24]	; (217f0 <ring_buf_get+0x54>)
   217d6:	4807      	ldr	r0, [pc, #28]	; (217f4 <ring_buf_get+0x58>)
   217d8:	23d8      	movs	r3, #216	; 0xd8
   217da:	4a07      	ldr	r2, [pc, #28]	; (217f8 <ring_buf_get+0x5c>)
   217dc:	f01e ff11 	bl	40602 <printk>
   217e0:	21d8      	movs	r1, #216	; 0xd8
   217e2:	4805      	ldr	r0, [pc, #20]	; (217f8 <ring_buf_get+0x5c>)
   217e4:	f01e ffd0 	bl	40788 <assert_post_action>

	return total_size;
}
   217e8:	4628      	mov	r0, r5
   217ea:	b002      	add	sp, #8
   217ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   217f0:	0004822c 	.word	0x0004822c
   217f4:	0004764f 	.word	0x0004764f
   217f8:	00048204 	.word	0x00048204

000217fc <nordicsemi_nrf91_init>:
		:
		: "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	unsigned int tmp;

	__asm__ volatile(
   217fc:	f04f 0220 	mov.w	r2, #32
   21800:	f3ef 8311 	mrs	r3, BASEPRI
   21804:	f382 8811 	msr	BASEPRI, r2
   21808:	f3bf 8f6f 	isb	sy

	key = irq_lock();

#ifdef CONFIG_NRF_ENABLE_ICACHE
	/* Enable the instruction cache */
	NRF_NVMC->ICACHECNF = NVMC_ICACHECNF_CACHEEN_Msk;
   2180c:	2101      	movs	r1, #1
   2180e:	4a04      	ldr	r2, [pc, #16]	; (21820 <nordicsemi_nrf91_init+0x24>)
   21810:	f8c2 1540 	str.w	r1, [r2, #1344]	; 0x540
	__asm__ volatile(
		"cpsie i;"
		"isb"
		: : : "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile(
   21814:	f383 8811 	msr	BASEPRI, r3
   21818:	f3bf 8f6f 	isb	sy
	NMI_INIT();

	irq_unlock(key);

	return 0;
}
   2181c:	2000      	movs	r0, #0
   2181e:	4770      	bx	lr
   21820:	40039000 	.word	0x40039000

00021824 <arch_busy_wait>:

#else // NRFX_CHECK(NRFX_DELAY_DWT_BASED)

NRF_STATIC_INLINE void nrfx_coredep_delay_us(uint32_t time_us)
{
    if (time_us == 0)
   21824:	b120      	cbz	r0, 21830 <arch_busy_wait+0xc>
    };

    typedef void (* delay_func_t)(uint32_t);
    const delay_func_t delay_cycles =
        // Set LSB to 1 to execute the code in the Thumb mode.
        (delay_func_t)((((uint32_t)delay_machine_code) | 1));
   21826:	4b03      	ldr	r3, [pc, #12]	; (21834 <arch_busy_wait+0x10>)
    uint32_t cycles = time_us * NRFX_DELAY_CPU_FREQ_MHZ;
    delay_cycles(cycles);
   21828:	0180      	lsls	r0, r0, #6
   2182a:	f043 0301 	orr.w	r3, r3, #1
   2182e:	4718      	bx	r3

void arch_busy_wait(u32_t time_us)
{
	nrfx_coredep_delay_us(time_us);
}
   21830:	4770      	bx	lr
   21832:	bf00      	nop
   21834:	00046130 	.word	0x00046130

00021838 <foldcase>:
#define EOS    '\0'

static inline int foldcase(int ch, int flags)
{

    if ((flags & FNM_CASEFOLD) != 0 && isupper(ch))
   21838:	070b      	lsls	r3, r1, #28
   2183a:	d506      	bpl.n	2184a <foldcase+0x12>
   2183c:	4b03      	ldr	r3, [pc, #12]	; (2184c <foldcase+0x14>)
   2183e:	5cc3      	ldrb	r3, [r0, r3]
   21840:	f003 0303 	and.w	r3, r3, #3
   21844:	2b01      	cmp	r3, #1
        return tolower(ch);
   21846:	bf08      	it	eq
   21848:	3020      	addeq	r0, #32
    return ch;
}
   2184a:	4770      	bx	lr
   2184c:	0004d857 	.word	0x0004d857

00021850 <log_backend_id_get>:
 *
 * @param[in] backend  Pointer to the backend instance.
 * @return    Id.
 */
static inline u8_t log_backend_id_get(const struct log_backend *const backend)
{
   21850:	b510      	push	{r4, lr}
	__ASSERT_NO_MSG(backend != NULL);
   21852:	4604      	mov	r4, r0
   21854:	b948      	cbnz	r0, 2186a <log_backend_id_get+0x1a>
   21856:	4906      	ldr	r1, [pc, #24]	; (21870 <log_backend_id_get+0x20>)
   21858:	4806      	ldr	r0, [pc, #24]	; (21874 <log_backend_id_get+0x24>)
   2185a:	23ce      	movs	r3, #206	; 0xce
   2185c:	4a06      	ldr	r2, [pc, #24]	; (21878 <log_backend_id_get+0x28>)
   2185e:	f01e fed0 	bl	40602 <printk>
   21862:	21ce      	movs	r1, #206	; 0xce
   21864:	4804      	ldr	r0, [pc, #16]	; (21878 <log_backend_id_get+0x28>)
   21866:	f01e ff8f 	bl	40788 <assert_post_action>
	return backend->cb->id;
   2186a:	6863      	ldr	r3, [r4, #4]
}
   2186c:	7918      	ldrb	r0, [r3, #4]
   2186e:	bd10      	pop	{r4, pc}
   21870:	00048298 	.word	0x00048298
   21874:	0004764f 	.word	0x0004764f
   21878:	00048267 	.word	0x00048267

0002187c <enable_logger>:

K_THREAD_STACK_DEFINE(logging_stack, CONFIG_LOG_PROCESS_THREAD_STACK_SIZE);
struct k_thread logging_thread;

static int enable_logger(struct device *arg)
{
   2187c:	b530      	push	{r4, r5, lr}
	ARG_UNUSED(arg);

	if (IS_ENABLED(CONFIG_LOG_PROCESS_THREAD)) {
		k_timer_init(&log_process_thread_timer,
   2187e:	2200      	movs	r2, #0
{
   21880:	b087      	sub	sp, #28
		k_timer_init(&log_process_thread_timer,
   21882:	490d      	ldr	r1, [pc, #52]	; (218b8 <enable_logger+0x3c>)
   21884:	480d      	ldr	r0, [pc, #52]	; (218bc <enable_logger+0x40>)
   21886:	f023 fa2a 	bl	44cde <k_timer_init>
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   2188a:	2400      	movs	r4, #0
   2188c:	230e      	movs	r3, #14
   2188e:	4d0c      	ldr	r5, [pc, #48]	; (218c0 <enable_logger+0x44>)
   21890:	e9cd 4302 	strd	r4, r3, [sp, #8]
   21894:	e9cd 4404 	strd	r4, r4, [sp, #16]
   21898:	e9cd 4400 	strd	r4, r4, [sp]
   2189c:	4b09      	ldr	r3, [pc, #36]	; (218c4 <enable_logger+0x48>)
   2189e:	f44f 7240 	mov.w	r2, #768	; 0x300
   218a2:	4909      	ldr	r1, [pc, #36]	; (218c8 <enable_logger+0x4c>)
   218a4:	4628      	mov	r0, r5
   218a6:	f01b ff69 	bl	3d77c <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread_id, value);
   218aa:	4908      	ldr	r1, [pc, #32]	; (218cc <enable_logger+0x50>)
   218ac:	4628      	mov	r0, r5
   218ae:	f023 f98d 	bl	44bcc <z_impl_k_thread_name_set>
	} else {
		log_init();
	}

	return 0;
}
   218b2:	4620      	mov	r0, r4
   218b4:	b007      	add	sp, #28
   218b6:	bd30      	pop	{r4, r5, pc}
   218b8:	000218d1 	.word	0x000218d1
   218bc:	20021e6c 	.word	0x20021e6c
   218c0:	20021eb4 	.word	0x20021eb4
   218c4:	00021f49 	.word	0x00021f49
   218c8:	2002b640 	.word	0x2002b640
   218cc:	00048773 	.word	0x00048773

000218d0 <log_process_thread_timer_expiry_fn>:
		arch_syscall_invoke1(*(uintptr_t *)&sem, K_SYSCALL_K_SEM_GIVE);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_sem_give(sem);
   218d0:	4801      	ldr	r0, [pc, #4]	; (218d8 <log_process_thread_timer_expiry_fn+0x8>)
   218d2:	f01b bdd7 	b.w	3d484 <z_impl_k_sem_give>
   218d6:	bf00      	nop
   218d8:	20032b98 	.word	0x20032b98

000218dc <z_log_get_s_mask>:
	__ASSERT_NO_MSG(nargs <= 8*sizeof(mask));
   218dc:	2920      	cmp	r1, #32
{
   218de:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   218e0:	4605      	mov	r5, r0
   218e2:	460c      	mov	r4, r1
	__ASSERT_NO_MSG(nargs <= 8*sizeof(mask));
   218e4:	d909      	bls.n	218fa <z_log_get_s_mask+0x1e>
   218e6:	4914      	ldr	r1, [pc, #80]	; (21938 <z_log_get_s_mask+0x5c>)
   218e8:	4814      	ldr	r0, [pc, #80]	; (2193c <z_log_get_s_mask+0x60>)
   218ea:	235b      	movs	r3, #91	; 0x5b
   218ec:	4a14      	ldr	r2, [pc, #80]	; (21940 <z_log_get_s_mask+0x64>)
   218ee:	f01e fe88 	bl	40602 <printk>
   218f2:	215b      	movs	r1, #91	; 0x5b
   218f4:	4812      	ldr	r0, [pc, #72]	; (21940 <z_log_get_s_mask+0x64>)
   218f6:	f01e ff47 	bl	40788 <assert_post_action>
			arm = false;
   218fa:	2000      	movs	r0, #0
				mask |= BIT(arg);
   218fc:	2701      	movs	r7, #1
			arm = false;
   218fe:	4603      	mov	r3, r0
   21900:	4602      	mov	r2, r0
		} else if (arm && isalpha((int)curr)) {
   21902:	4e10      	ldr	r6, [pc, #64]	; (21944 <z_log_get_s_mask+0x68>)
	while ((curr = *str++) && arg < nargs) {
   21904:	f815 1b01 	ldrb.w	r1, [r5], #1
   21908:	b109      	cbz	r1, 2190e <z_log_get_s_mask+0x32>
   2190a:	42a3      	cmp	r3, r4
   2190c:	d300      	bcc.n	21910 <z_log_get_s_mask+0x34>
}
   2190e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (curr == '%') {
   21910:	2925      	cmp	r1, #37	; 0x25
   21912:	d102      	bne.n	2191a <z_log_get_s_mask+0x3e>
			arm = !arm;
   21914:	f082 0201 	eor.w	r2, r2, #1
   21918:	e7f4      	b.n	21904 <z_log_get_s_mask+0x28>
		} else if (arm && isalpha((int)curr)) {
   2191a:	2a00      	cmp	r2, #0
   2191c:	d0f2      	beq.n	21904 <z_log_get_s_mask+0x28>
   2191e:	f811 c006 	ldrb.w	ip, [r1, r6]
   21922:	f01c 0f03 	tst.w	ip, #3
   21926:	d0ed      	beq.n	21904 <z_log_get_s_mask+0x28>
			if (curr == 's') {
   21928:	2973      	cmp	r1, #115	; 0x73
				mask |= BIT(arg);
   2192a:	bf04      	itt	eq
   2192c:	fa07 f203 	lsleq.w	r2, r7, r3
   21930:	4310      	orreq	r0, r2
			arg++;
   21932:	3301      	adds	r3, #1
			arm = false;
   21934:	2200      	movs	r2, #0
   21936:	e7e5      	b.n	21904 <z_log_get_s_mask+0x28>
   21938:	0004839e 	.word	0x0004839e
   2193c:	0004764f 	.word	0x0004764f
   21940:	00048371 	.word	0x00048371
   21944:	0004d857 	.word	0x0004d857

00021948 <log_core_init>:
{
   21948:	b538      	push	{r3, r4, r5, lr}
		log_msg_pool_init();
   2194a:	f000 fb75 	bl	22038 <log_msg_pool_init>
		log_list_init(&list);
   2194e:	4813      	ldr	r0, [pc, #76]	; (2199c <log_core_init+0x54>)
   21950:	f01f f851 	bl	409f6 <log_list_init>
		k_mem_slab_init(&log_strdup_pool, log_strdup_pool_buf,
   21954:	4912      	ldr	r1, [pc, #72]	; (219a0 <log_core_init+0x58>)
   21956:	2320      	movs	r3, #32
   21958:	2248      	movs	r2, #72	; 0x48
   2195a:	4812      	ldr	r0, [pc, #72]	; (219a4 <log_core_init+0x5c>)
   2195c:	f023 f871 	bl	44a42 <k_mem_slab_init>
		timestamp_func = k_cycle_get_32_wrapper;
   21960:	4b11      	ldr	r3, [pc, #68]	; (219a8 <log_core_init+0x60>)
   21962:	4a12      	ldr	r2, [pc, #72]	; (219ac <log_core_init+0x64>)
	log_output_timestamp_freq_set(freq);
   21964:	f44f 4000 	mov.w	r0, #32768	; 0x8000
		timestamp_func = k_cycle_get_32_wrapper;
   21968:	601a      	str	r2, [r3, #0]
	log_output_timestamp_freq_set(freq);
   2196a:	f000 fe55 	bl	22618 <log_output_timestamp_freq_set>
		for (int i = 0; i < log_sources_count(); i++) {
   2196e:	2100      	movs	r1, #0
   21970:	480f      	ldr	r0, [pc, #60]	; (219b0 <log_core_init+0x68>)
   21972:	4b10      	ldr	r3, [pc, #64]	; (219b4 <log_core_init+0x6c>)
   21974:	4c10      	ldr	r4, [pc, #64]	; (219b8 <log_core_init+0x70>)
   21976:	1a1b      	subs	r3, r3, r0
   21978:	08db      	lsrs	r3, r3, #3
	return __log_const_start[source_id].level;
   2197a:	3004      	adds	r0, #4
   2197c:	4299      	cmp	r1, r3
   2197e:	d100      	bne.n	21982 <log_core_init+0x3a>
}
   21980:	bd38      	pop	{r3, r4, r5, pc}
			LOG_FILTER_SLOT_SET(filters,
   21982:	f810 2031 	ldrb.w	r2, [r0, r1, lsl #3]
   21986:	6825      	ldr	r5, [r4, #0]
   21988:	f002 0207 	and.w	r2, r2, #7
   2198c:	f025 0507 	bic.w	r5, r5, #7
   21990:	432a      	orrs	r2, r5
   21992:	f844 2b04 	str.w	r2, [r4], #4
		for (int i = 0; i < log_sources_count(); i++) {
   21996:	3101      	adds	r1, #1
   21998:	e7f0      	b.n	2197c <log_core_init+0x34>
   2199a:	bf00      	nop
   2199c:	20021e64 	.word	0x20021e64
   219a0:	2002fe80 	.word	0x2002fe80
   219a4:	20021e98 	.word	0x20021e98
   219a8:	20032348 	.word	0x20032348
   219ac:	00040a3b 	.word	0x00040a3b
   219b0:	00045f08 	.word	0x00045f08
   219b4:	000460c0 	.word	0x000460c0
   219b8:	20032a84 	.word	0x20032a84

000219bc <dropped_notify>:
{
   219bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   219be:	2500      	movs	r5, #0
   219c0:	4b0d      	ldr	r3, [pc, #52]	; (219f8 <dropped_notify+0x3c>)
   219c2:	e8d3 7fef 	ldaex	r7, [r3]
   219c6:	e8c3 5fe2 	stlex	r2, r5, [r3]
   219ca:	2a00      	cmp	r2, #0
   219cc:	d1f9      	bne.n	219c2 <dropped_notify+0x6>
 *
 * @return Number of backends.
 */
static inline int log_backend_count_get(void)
{
	return __log_backends_end - __log_backends_start;
   219ce:	4c0b      	ldr	r4, [pc, #44]	; (219fc <dropped_notify+0x40>)
   219d0:	4e0b      	ldr	r6, [pc, #44]	; (21a00 <dropped_notify+0x44>)
   219d2:	1b36      	subs	r6, r6, r4
   219d4:	1136      	asrs	r6, r6, #4
	for (int i = 0; i < log_backend_count_get(); i++) {
   219d6:	42b5      	cmp	r5, r6
   219d8:	db00      	blt.n	219dc <dropped_notify+0x20>
}
   219da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (log_backend_is_active(backend)) {
   219dc:	4620      	mov	r0, r4
   219de:	f01f f820 	bl	40a22 <log_backend_is_active>
   219e2:	b128      	cbz	r0, 219f0 <dropped_notify+0x34>
	if (backend->api->dropped != NULL) {
   219e4:	6823      	ldr	r3, [r4, #0]
   219e6:	68db      	ldr	r3, [r3, #12]
   219e8:	b113      	cbz	r3, 219f0 <dropped_notify+0x34>
		backend->api->dropped(backend, cnt);
   219ea:	4639      	mov	r1, r7
   219ec:	4620      	mov	r0, r4
   219ee:	4798      	blx	r3
	for (int i = 0; i < log_backend_count_get(); i++) {
   219f0:	3501      	adds	r5, #1
   219f2:	3410      	adds	r4, #16
   219f4:	e7ef      	b.n	219d6 <dropped_notify+0x1a>
   219f6:	bf00      	nop
   219f8:	20021e5c 	.word	0x20021e5c
   219fc:	000460c0 	.word	0x000460c0
   21a00:	000460d0 	.word	0x000460d0

00021a04 <log_dropped>:
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
   21a04:	4b04      	ldr	r3, [pc, #16]	; (21a18 <log_dropped+0x14>)
   21a06:	e8d3 2fef 	ldaex	r2, [r3]
   21a0a:	3201      	adds	r2, #1
   21a0c:	e8c3 2fe1 	stlex	r1, r2, [r3]
   21a10:	2900      	cmp	r1, #0
   21a12:	d1f8      	bne.n	21a06 <log_dropped+0x2>
}
   21a14:	4770      	bx	lr
   21a16:	bf00      	nop
   21a18:	20021e5c 	.word	0x20021e5c

00021a1c <log_source_name_get>:
	return ((u8_t *)data - (u8_t *)__log_const_start)/
   21a1c:	4a04      	ldr	r2, [pc, #16]	; (21a30 <log_source_name_get+0x14>)
   21a1e:	4b05      	ldr	r3, [pc, #20]	; (21a34 <log_source_name_get+0x18>)
   21a20:	1a9b      	subs	r3, r3, r2
	return src_id < log_sources_count() ? log_name_get(src_id) : NULL;
   21a22:	ebb1 0fd3 	cmp.w	r1, r3, lsr #3
	return __log_const_start[source_id].name;
   21a26:	bf34      	ite	cc
   21a28:	f852 0031 	ldrcc.w	r0, [r2, r1, lsl #3]
   21a2c:	2000      	movcs	r0, #0
}
   21a2e:	4770      	bx	lr
   21a30:	00045f08 	.word	0x00045f08
   21a34:	000460c0 	.word	0x000460c0

00021a38 <z_impl_log_filter_set>:
{
   21a38:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   21a3c:	4615      	mov	r5, r2
   21a3e:	4698      	mov	r8, r3
	return ((u8_t *)data - (u8_t *)__log_const_start)/
   21a40:	4a2e      	ldr	r2, [pc, #184]	; (21afc <z_impl_log_filter_set+0xc4>)
   21a42:	4b2f      	ldr	r3, [pc, #188]	; (21b00 <z_impl_log_filter_set+0xc8>)
   21a44:	4607      	mov	r7, r0
   21a46:	1ad2      	subs	r2, r2, r3
	assert(src_id < log_sources_count());
   21a48:	ebb5 0fd2 	cmp.w	r5, r2, lsr #3
{
   21a4c:	4689      	mov	r9, r1
	assert(src_id < log_sources_count());
   21a4e:	d306      	bcc.n	21a5e <z_impl_log_filter_set+0x26>
   21a50:	4b2c      	ldr	r3, [pc, #176]	; (21b04 <z_impl_log_filter_set+0xcc>)
   21a52:	4a2d      	ldr	r2, [pc, #180]	; (21b08 <z_impl_log_filter_set+0xd0>)
   21a54:	f240 21d9 	movw	r1, #729	; 0x2d9
   21a58:	482c      	ldr	r0, [pc, #176]	; (21b0c <z_impl_log_filter_set+0xd4>)
   21a5a:	f01c ffa5 	bl	3e9a8 <__assert_func>
		if (backend == NULL) {
   21a5e:	b9b0      	cbnz	r0, 21a8e <z_impl_log_filter_set+0x56>
	return __log_backends_end - __log_backends_start;
   21a60:	4b2b      	ldr	r3, [pc, #172]	; (21b10 <z_impl_log_filter_set+0xd8>)
			u32_t max = 0U;
   21a62:	4604      	mov	r4, r0
   21a64:	469a      	mov	sl, r3
   21a66:	4e2b      	ldr	r6, [pc, #172]	; (21b14 <z_impl_log_filter_set+0xdc>)
   21a68:	1af6      	subs	r6, r6, r3
   21a6a:	1136      	asrs	r6, r6, #4
			for (int i = 0; i < log_backend_count_get(); i++) {
   21a6c:	42b7      	cmp	r7, r6
   21a6e:	db02      	blt.n	21a76 <z_impl_log_filter_set+0x3e>
}
   21a70:	4620      	mov	r0, r4
   21a72:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	if (z_syscall_trap()) {
		return (u32_t) arch_syscall_invoke4(*(uintptr_t *)&backend, *(uintptr_t *)&domain_id, *(uintptr_t *)&src_id, *(uintptr_t *)&level, K_SYSCALL_LOG_FILTER_SET);
	}
#endif
	compiler_barrier();
	return z_impl_log_filter_set(backend, domain_id, src_id, level);
   21a76:	eb0a 1007 	add.w	r0, sl, r7, lsl #4
   21a7a:	4643      	mov	r3, r8
   21a7c:	462a      	mov	r2, r5
   21a7e:	4649      	mov	r1, r9
   21a80:	f7ff ffda 	bl	21a38 <z_impl_log_filter_set>
				max = MAX(current, max);
   21a84:	4284      	cmp	r4, r0
   21a86:	bf38      	it	cc
   21a88:	4604      	movcc	r4, r0
			for (int i = 0; i < log_backend_count_get(); i++) {
   21a8a:	3701      	adds	r7, #1
   21a8c:	e7ee      	b.n	21a6c <z_impl_log_filter_set+0x34>
	return __log_const_start[source_id].level;
   21a8e:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
		return log_compiled_level_get(src_id);
   21a92:	791c      	ldrb	r4, [r3, #4]
			LOG_FILTER_SLOT_SET(filters,
   21a94:	4e20      	ldr	r6, [pc, #128]	; (21b18 <z_impl_log_filter_set+0xe0>)
			level = MIN(level, max);
   21a96:	4544      	cmp	r4, r8
   21a98:	bf28      	it	cs
   21a9a:	4644      	movcs	r4, r8
			LOG_FILTER_SLOT_SET(filters,
   21a9c:	f7ff fed8 	bl	21850 <log_backend_id_get>
   21aa0:	2307      	movs	r3, #7
   21aa2:	b200      	sxth	r0, r0
   21aa4:	eb00 0040 	add.w	r0, r0, r0, lsl #1
   21aa8:	fa03 f000 	lsl.w	r0, r3, r0
   21aac:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
   21ab0:	ea23 0300 	bic.w	r3, r3, r0
   21ab4:	f846 3025 	str.w	r3, [r6, r5, lsl #2]
   21ab8:	4638      	mov	r0, r7
   21aba:	f7ff fec9 	bl	21850 <log_backend_id_get>
   21abe:	b200      	sxth	r0, r0
   21ac0:	f004 0307 	and.w	r3, r4, #7
   21ac4:	eb00 0040 	add.w	r0, r0, r0, lsl #1
   21ac8:	fa03 f000 	lsl.w	r0, r3, r0
   21acc:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
   21ad0:	2203      	movs	r2, #3
   21ad2:	4318      	orrs	r0, r3
	u32_t max_filter = LOG_LEVEL_NONE;
   21ad4:	2100      	movs	r1, #0
   21ad6:	4633      	mov	r3, r6
		u32_t tmp_filter = LOG_FILTER_SLOT_GET(&filters, i);
   21ad8:	fa20 f602 	lsr.w	r6, r0, r2
   21adc:	f006 0607 	and.w	r6, r6, #7
   21ae0:	42b1      	cmp	r1, r6
   21ae2:	f102 0203 	add.w	r2, r2, #3
   21ae6:	bf38      	it	cc
   21ae8:	4631      	movcc	r1, r6
	for (i = first_slot; i < LOG_FILTERS_NUM_OF_SLOTS; i++) {
   21aea:	2a1e      	cmp	r2, #30
   21aec:	d1f4      	bne.n	21ad8 <z_impl_log_filter_set+0xa0>
			LOG_FILTER_SLOT_SET(filters,
   21aee:	f020 0007 	bic.w	r0, r0, #7
   21af2:	4308      	orrs	r0, r1
   21af4:	f843 0025 	str.w	r0, [r3, r5, lsl #2]
	return level;
   21af8:	e7ba      	b.n	21a70 <z_impl_log_filter_set+0x38>
   21afa:	bf00      	nop
   21afc:	000460c0 	.word	0x000460c0
   21b00:	00045f08 	.word	0x00045f08
   21b04:	0004831c 	.word	0x0004831c
   21b08:	00048242 	.word	0x00048242
   21b0c:	00048371 	.word	0x00048371
   21b10:	000460c0 	.word	0x000460c0
   21b14:	000460d0 	.word	0x000460d0
   21b18:	20032a84 	.word	0x20032a84

00021b1c <backend_filter_set>:
{
   21b1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   21b1e:	4606      	mov	r6, r0
   21b20:	460f      	mov	r7, r1
		for (int i = 0; i < log_sources_count(); i++) {
   21b22:	2500      	movs	r5, #0
	return ((u8_t *)data - (u8_t *)__log_const_start)/
   21b24:	4c07      	ldr	r4, [pc, #28]	; (21b44 <backend_filter_set+0x28>)
   21b26:	4b08      	ldr	r3, [pc, #32]	; (21b48 <backend_filter_set+0x2c>)
   21b28:	1ae4      	subs	r4, r4, r3
   21b2a:	08e4      	lsrs	r4, r4, #3
   21b2c:	42a5      	cmp	r5, r4
   21b2e:	d100      	bne.n	21b32 <backend_filter_set+0x16>
}
   21b30:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   21b32:	2100      	movs	r1, #0
   21b34:	462a      	mov	r2, r5
   21b36:	463b      	mov	r3, r7
   21b38:	4630      	mov	r0, r6
   21b3a:	f7ff ff7d 	bl	21a38 <z_impl_log_filter_set>
		for (int i = 0; i < log_sources_count(); i++) {
   21b3e:	3501      	adds	r5, #1
   21b40:	e7f4      	b.n	21b2c <backend_filter_set+0x10>
   21b42:	bf00      	nop
   21b44:	000460c0 	.word	0x000460c0
   21b48:	00045f08 	.word	0x00045f08

00021b4c <log_backend_enable>:
{
   21b4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	id += backend - log_backend_get(0);
   21b4e:	4c13      	ldr	r4, [pc, #76]	; (21b9c <log_backend_enable+0x50>)
{
   21b50:	4605      	mov	r5, r0
	id += backend - log_backend_get(0);
   21b52:	1b04      	subs	r4, r0, r4
   21b54:	1124      	asrs	r4, r4, #4
   21b56:	3401      	adds	r4, #1
{
   21b58:	460e      	mov	r6, r1
   21b5a:	4617      	mov	r7, r2
	log_backend_id_set(backend, id);
   21b5c:	b2e4      	uxtb	r4, r4
	__ASSERT_NO_MSG(backend != NULL);
   21b5e:	b948      	cbnz	r0, 21b74 <log_backend_enable+0x28>
   21b60:	490f      	ldr	r1, [pc, #60]	; (21ba0 <log_backend_enable+0x54>)
   21b62:	4810      	ldr	r0, [pc, #64]	; (21ba4 <log_backend_enable+0x58>)
   21b64:	23c0      	movs	r3, #192	; 0xc0
   21b66:	4a10      	ldr	r2, [pc, #64]	; (21ba8 <log_backend_enable+0x5c>)
   21b68:	f01e fd4b 	bl	40602 <printk>
   21b6c:	21c0      	movs	r1, #192	; 0xc0
   21b6e:	480e      	ldr	r0, [pc, #56]	; (21ba8 <log_backend_enable+0x5c>)
   21b70:	f01e fe0a 	bl	40788 <assert_post_action>
	backend->cb->id = id;
   21b74:	686b      	ldr	r3, [r5, #4]
	backend_filter_set(backend, level);
   21b76:	4639      	mov	r1, r7
   21b78:	711c      	strb	r4, [r3, #4]
   21b7a:	4628      	mov	r0, r5
   21b7c:	f7ff ffce 	bl	21b1c <backend_filter_set>
static inline void log_backend_activate(const struct log_backend *const backend,
					void *ctx)
{
	__ASSERT_NO_MSG(backend != NULL);
	backend->cb->ctx = ctx;
	backend->cb->active = true;
   21b80:	2201      	movs	r2, #1
	backend->cb->ctx = ctx;
   21b82:	686b      	ldr	r3, [r5, #4]
	if (!backend_attached) {
   21b84:	4c09      	ldr	r4, [pc, #36]	; (21bac <log_backend_enable+0x60>)
	backend->cb->active = true;
   21b86:	715a      	strb	r2, [r3, #5]
   21b88:	7822      	ldrb	r2, [r4, #0]
	backend->cb->ctx = ctx;
   21b8a:	601e      	str	r6, [r3, #0]
   21b8c:	b912      	cbnz	r2, 21b94 <log_backend_enable+0x48>
   21b8e:	4808      	ldr	r0, [pc, #32]	; (21bb0 <log_backend_enable+0x64>)
   21b90:	f01b fc78 	bl	3d484 <z_impl_k_sem_give>
	backend_attached = true;
   21b94:	2301      	movs	r3, #1
   21b96:	7023      	strb	r3, [r4, #0]
}
   21b98:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   21b9a:	bf00      	nop
   21b9c:	000460c0 	.word	0x000460c0
   21ba0:	00048298 	.word	0x00048298
   21ba4:	0004764f 	.word	0x0004764f
   21ba8:	00048267 	.word	0x00048267
   21bac:	20029982 	.word	0x20029982
   21bb0:	20032b98 	.word	0x20032b98

00021bb4 <log_init>:
{
   21bb4:	b570      	push	{r4, r5, r6, lr}
	return __log_backends_end - __log_backends_start;
   21bb6:	4b13      	ldr	r3, [pc, #76]	; (21c04 <log_init+0x50>)
   21bb8:	4c13      	ldr	r4, [pc, #76]	; (21c08 <log_init+0x54>)
   21bba:	1b1b      	subs	r3, r3, r4
	assert(log_backend_count_get() < LOG_FILTERS_NUM_OF_SLOTS);
   21bbc:	2b90      	cmp	r3, #144	; 0x90
   21bbe:	dd06      	ble.n	21bce <log_init+0x1a>
   21bc0:	4b12      	ldr	r3, [pc, #72]	; (21c0c <log_init+0x58>)
   21bc2:	4a13      	ldr	r2, [pc, #76]	; (21c10 <log_init+0x5c>)
   21bc4:	f240 11ed 	movw	r1, #493	; 0x1ed
   21bc8:	4812      	ldr	r0, [pc, #72]	; (21c14 <log_init+0x60>)
   21bca:	f01c feed 	bl	3e9a8 <__assert_func>
   21bce:	4a12      	ldr	r2, [pc, #72]	; (21c18 <log_init+0x64>)
   21bd0:	e8d2 6fef 	ldaex	r6, [r2]
   21bd4:	1c71      	adds	r1, r6, #1
   21bd6:	e8c2 1fe0 	stlex	r0, r1, [r2]
   21bda:	2800      	cmp	r0, #0
   21bdc:	d1f8      	bne.n	21bd0 <log_init+0x1c>
	if (atomic_inc(&initialized) != 0) {
   21bde:	b916      	cbnz	r6, 21be6 <log_init+0x32>
   21be0:	111d      	asrs	r5, r3, #4
	for (i = 0; i < log_backend_count_get(); i++) {
   21be2:	42ae      	cmp	r6, r5
   21be4:	db00      	blt.n	21be8 <log_init+0x34>
}
   21be6:	bd70      	pop	{r4, r5, r6, pc}
		if (backend->autostart) {
   21be8:	7b23      	ldrb	r3, [r4, #12]
   21bea:	b143      	cbz	r3, 21bfe <log_init+0x4a>
			if (backend->api->init != NULL) {
   21bec:	6823      	ldr	r3, [r4, #0]
   21bee:	695b      	ldr	r3, [r3, #20]
   21bf0:	b103      	cbz	r3, 21bf4 <log_init+0x40>
				backend->api->init();
   21bf2:	4798      	blx	r3
			log_backend_enable(backend, NULL, CONFIG_LOG_MAX_LEVEL);
   21bf4:	2204      	movs	r2, #4
   21bf6:	2100      	movs	r1, #0
   21bf8:	4620      	mov	r0, r4
   21bfa:	f7ff ffa7 	bl	21b4c <log_backend_enable>
	for (i = 0; i < log_backend_count_get(); i++) {
   21bfe:	3601      	adds	r6, #1
   21c00:	3410      	adds	r4, #16
   21c02:	e7ee      	b.n	21be2 <log_init+0x2e>
   21c04:	000460d0 	.word	0x000460d0
   21c08:	000460c0 	.word	0x000460c0
   21c0c:	000482af 	.word	0x000482af
   21c10:	00048239 	.word	0x00048239
   21c14:	00048371 	.word	0x00048371
   21c18:	20021e60 	.word	0x20021e60

00021c1c <log_backend_disable>:
{
   21c1c:	b510      	push	{r4, lr}
 * @param[in] backend  Pointer to the backend instance.
 */
static inline void log_backend_deactivate(
				const struct log_backend *const backend)
{
	__ASSERT_NO_MSG(backend != NULL);
   21c1e:	4604      	mov	r4, r0
   21c20:	b948      	cbnz	r0, 21c36 <log_backend_disable+0x1a>
   21c22:	4909      	ldr	r1, [pc, #36]	; (21c48 <log_backend_disable+0x2c>)
   21c24:	4809      	ldr	r0, [pc, #36]	; (21c4c <log_backend_disable+0x30>)
   21c26:	23fe      	movs	r3, #254	; 0xfe
   21c28:	4a09      	ldr	r2, [pc, #36]	; (21c50 <log_backend_disable+0x34>)
   21c2a:	f01e fcea 	bl	40602 <printk>
   21c2e:	21fe      	movs	r1, #254	; 0xfe
   21c30:	4807      	ldr	r0, [pc, #28]	; (21c50 <log_backend_disable+0x34>)
   21c32:	f01e fda9 	bl	40788 <assert_post_action>
	backend->cb->active = false;
   21c36:	2100      	movs	r1, #0
   21c38:	6863      	ldr	r3, [r4, #4]
	backend_filter_set(backend, LOG_LEVEL_NONE);
   21c3a:	4620      	mov	r0, r4
}
   21c3c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   21c40:	7159      	strb	r1, [r3, #5]
	backend_filter_set(backend, LOG_LEVEL_NONE);
   21c42:	f7ff bf6b 	b.w	21b1c <backend_filter_set>
   21c46:	bf00      	nop
   21c48:	00048298 	.word	0x00048298
   21c4c:	0004764f 	.word	0x0004764f
   21c50:	00048267 	.word	0x00048267

00021c54 <log_filter_get>:
{
   21c54:	b510      	push	{r4, lr}
   21c56:	490f      	ldr	r1, [pc, #60]	; (21c94 <log_filter_get+0x40>)
   21c58:	4c0f      	ldr	r4, [pc, #60]	; (21c98 <log_filter_get+0x44>)
   21c5a:	1a64      	subs	r4, r4, r1
	assert(src_id < log_sources_count());
   21c5c:	ebb2 0fd4 	cmp.w	r2, r4, lsr #3
   21c60:	d306      	bcc.n	21c70 <log_filter_get+0x1c>
   21c62:	4b0e      	ldr	r3, [pc, #56]	; (21c9c <log_filter_get+0x48>)
   21c64:	4a0e      	ldr	r2, [pc, #56]	; (21ca0 <log_filter_get+0x4c>)
   21c66:	f240 3146 	movw	r1, #838	; 0x346
   21c6a:	480e      	ldr	r0, [pc, #56]	; (21ca4 <log_filter_get+0x50>)
   21c6c:	f01c fe9c 	bl	3e9a8 <__assert_func>
	if (IS_ENABLED(CONFIG_LOG_RUNTIME_FILTERING) && runtime) {
   21c70:	b163      	cbz	r3, 21c8c <log_filter_get+0x38>
		return LOG_FILTER_SLOT_GET(filters,
   21c72:	4b0d      	ldr	r3, [pc, #52]	; (21ca8 <log_filter_get+0x54>)
   21c74:	f853 4022 	ldr.w	r4, [r3, r2, lsl #2]
   21c78:	f7ff fdea 	bl	21850 <log_backend_id_get>
   21c7c:	b200      	sxth	r0, r0
   21c7e:	eb00 0040 	add.w	r0, r0, r0, lsl #1
   21c82:	fa24 f000 	lsr.w	r0, r4, r0
   21c86:	f000 0007 	and.w	r0, r0, #7
}
   21c8a:	bd10      	pop	{r4, pc}
	return __log_const_start[source_id].level;
   21c8c:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
		return log_compiled_level_get(src_id);
   21c90:	7908      	ldrb	r0, [r1, #4]
   21c92:	e7fa      	b.n	21c8a <log_filter_get+0x36>
   21c94:	00045f08 	.word	0x00045f08
   21c98:	000460c0 	.word	0x000460c0
   21c9c:	0004831c 	.word	0x0004831c
   21ca0:	00048258 	.word	0x00048258
   21ca4:	00048371 	.word	0x00048371
   21ca8:	20032a84 	.word	0x20032a84

00021cac <log_strdup>:
	return (((const char *)addr >= (const char *)RO_START) &&
   21cac:	4b14      	ldr	r3, [pc, #80]	; (21d00 <log_strdup+0x54>)
{
   21cae:	b573      	push	{r0, r1, r4, r5, r6, lr}
	return (((const char *)addr >= (const char *)RO_START) &&
   21cb0:	4298      	cmp	r0, r3
{
   21cb2:	4604      	mov	r4, r0
	return (((const char *)addr >= (const char *)RO_START) &&
   21cb4:	d302      	bcc.n	21cbc <log_strdup+0x10>
	if (IS_ENABLED(CONFIG_LOG_IMMEDIATE) ||
   21cb6:	4b13      	ldr	r3, [pc, #76]	; (21d04 <log_strdup+0x58>)
   21cb8:	4298      	cmp	r0, r3
   21cba:	d31b      	bcc.n	21cf4 <log_strdup+0x48>
	err = k_mem_slab_alloc(&log_strdup_pool, (void **)&dup, K_NO_WAIT);
   21cbc:	2200      	movs	r2, #0
   21cbe:	a901      	add	r1, sp, #4
   21cc0:	4811      	ldr	r0, [pc, #68]	; (21d08 <log_strdup+0x5c>)
   21cc2:	f019 fbbd 	bl	3b440 <k_mem_slab_alloc>
	if (err != 0) {
   21cc6:	4606      	mov	r6, r0
   21cc8:	b9b8      	cbnz	r0, 21cfa <log_strdup+0x4e>
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   21cca:	2201      	movs	r2, #1
   21ccc:	9b01      	ldr	r3, [sp, #4]
   21cce:	e8d3 1fef 	ldaex	r1, [r3]
   21cd2:	e8c3 2fe0 	stlex	r0, r2, [r3]
   21cd6:	2800      	cmp	r0, #0
   21cd8:	d1f9      	bne.n	21cce <log_strdup+0x22>
	strncpy(dup->buf, str, sizeof(dup->buf) - 2);
   21cda:	9d01      	ldr	r5, [sp, #4]
#if __GNUC_PREREQ__(4,8) || defined(__clang__)
__ssp_bos_icheck3_restrict(stpncpy, char *, const char *)
#endif
__ssp_bos_icheck2_restrict(strcpy, char *, const char *)
__ssp_bos_icheck2_restrict(strcat, char *, const char *)
__ssp_bos_icheck3_restrict(strncpy, char *, const char *)
   21cdc:	223f      	movs	r2, #63	; 0x3f
   21cde:	1d2b      	adds	r3, r5, #4
   21ce0:	4621      	mov	r1, r4
   21ce2:	4618      	mov	r0, r3
   21ce4:	f023 fa4e 	bl	45184 <strncpy>
	dup->buf[sizeof(dup->buf) - 2] = '~';
   21ce8:	227e      	movs	r2, #126	; 0x7e
	return dup->buf;
   21cea:	4604      	mov	r4, r0
	dup->buf[sizeof(dup->buf) - 2] = '~';
   21cec:	f885 2043 	strb.w	r2, [r5, #67]	; 0x43
	dup->buf[sizeof(dup->buf) - 1] = '\0';
   21cf0:	f885 6044 	strb.w	r6, [r5, #68]	; 0x44
}
   21cf4:	4620      	mov	r0, r4
   21cf6:	b002      	add	sp, #8
   21cf8:	bd70      	pop	{r4, r5, r6, pc}
		return (char *)log_strdup_fail_msg;
   21cfa:	4c04      	ldr	r4, [pc, #16]	; (21d0c <log_strdup+0x60>)
   21cfc:	e7fa      	b.n	21cf4 <log_strdup+0x48>
   21cfe:	bf00      	nop
   21d00:	00045b44 	.word	0x00045b44
   21d04:	0004d9dc 	.word	0x0004d9dc
   21d08:	20021e98 	.word	0x20021e98
   21d0c:	000482fe 	.word	0x000482fe

00021d10 <log_is_strdup>:
	return PART_OF_ARRAY(log_strdup_pool_buf, (u8_t *)buf);
   21d10:	b150      	cbz	r0, 21d28 <log_is_strdup+0x18>
   21d12:	4b06      	ldr	r3, [pc, #24]	; (21d2c <log_is_strdup+0x1c>)
   21d14:	4298      	cmp	r0, r3
   21d16:	d306      	bcc.n	21d26 <log_is_strdup+0x16>
   21d18:	f503 6310 	add.w	r3, r3, #2304	; 0x900
   21d1c:	4298      	cmp	r0, r3
   21d1e:	bf2c      	ite	cs
   21d20:	2000      	movcs	r0, #0
   21d22:	2001      	movcc	r0, #1
   21d24:	4770      	bx	lr
   21d26:	2000      	movs	r0, #0
}
   21d28:	4770      	bx	lr
   21d2a:	bf00      	nop
   21d2c:	2002fe80 	.word	0x2002fe80

00021d30 <z_impl_log_process>:
{
   21d30:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (!backend_attached && !bypass) {
   21d34:	4b4a      	ldr	r3, [pc, #296]	; (21e60 <z_impl_log_process+0x130>)
{
   21d36:	4606      	mov	r6, r0
	if (!backend_attached && !bypass) {
   21d38:	781b      	ldrb	r3, [r3, #0]
   21d3a:	b903      	cbnz	r3, 21d3e <z_impl_log_process+0xe>
   21d3c:	b340      	cbz	r0, 21d90 <z_impl_log_process+0x60>
	__asm__ volatile(
   21d3e:	f04f 0320 	mov.w	r3, #32
   21d42:	f3ef 8511 	mrs	r5, BASEPRI
   21d46:	f383 8811 	msr	BASEPRI, r3
   21d4a:	f3bf 8f6f 	isb	sy
	msg = log_list_head_get(&list);
   21d4e:	4845      	ldr	r0, [pc, #276]	; (21e64 <z_impl_log_process+0x134>)
   21d50:	f01e fe61 	bl	40a16 <log_list_head_get>
   21d54:	4604      	mov	r4, r0
	__asm__ volatile(
   21d56:	f385 8811 	msr	BASEPRI, r5
   21d5a:	f3bf 8f6f 	isb	sy
	if (msg != NULL) {
   21d5e:	b158      	cbz	r0, 21d78 <z_impl_log_process+0x48>
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
   21d60:	4b41      	ldr	r3, [pc, #260]	; (21e68 <z_impl_log_process+0x138>)
   21d62:	e8d3 2fef 	ldaex	r2, [r3]
   21d66:	3a01      	subs	r2, #1
   21d68:	e8c3 2fe1 	stlex	r1, r2, [r3]
   21d6c:	2900      	cmp	r1, #0
   21d6e:	d1f8      	bne.n	21d62 <z_impl_log_process+0x32>
	if (!bypass) {
   21d70:	b18e      	cbz	r6, 21d96 <z_impl_log_process+0x66>
	log_msg_put(msg);
   21d72:	4620      	mov	r0, r4
   21d74:	f01e ff3f 	bl	40bf6 <log_msg_put>
	if (!bypass && dropped_cnt) {
   21d78:	b926      	cbnz	r6, 21d84 <z_impl_log_process+0x54>
   21d7a:	4b3c      	ldr	r3, [pc, #240]	; (21e6c <z_impl_log_process+0x13c>)
   21d7c:	681b      	ldr	r3, [r3, #0]
   21d7e:	b10b      	cbz	r3, 21d84 <z_impl_log_process+0x54>
		dropped_notify();
   21d80:	f7ff fe1c 	bl	219bc <dropped_notify>
	return (log_list_head_peek(&list) != NULL);
   21d84:	4837      	ldr	r0, [pc, #220]	; (21e64 <z_impl_log_process+0x134>)
   21d86:	f01e fe44 	bl	40a12 <log_list_head_peek>
   21d8a:	1c06      	adds	r6, r0, #0
   21d8c:	bf18      	it	ne
   21d8e:	2601      	movne	r6, #1
}
   21d90:	4630      	mov	r0, r6
   21d92:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		    !panic_mode) {
   21d96:	4b36      	ldr	r3, [pc, #216]	; (21e70 <z_impl_log_process+0x140>)
		if (IS_ENABLED(CONFIG_LOG_DETECT_MISSED_STRDUP) &&
   21d98:	781b      	ldrb	r3, [r3, #0]
   21d9a:	b9a3      	cbnz	r3, 21dc6 <z_impl_log_process+0x96>
 * @retval true  Standard message.
 * @retval false Hexdump message.
 */
static inline bool log_msg_is_std(struct log_msg *msg)
{
	return  (msg->hdr.params.generic.type == LOG_MSG_TYPE_STD);
   21d9c:	7a23      	ldrb	r3, [r4, #8]
	if (!log_msg_is_std(msg)) {
   21d9e:	07db      	lsls	r3, r3, #31
   21da0:	d411      	bmi.n	21dc6 <z_impl_log_process+0x96>
	msg_str = log_msg_str_get(msg);
   21da2:	f01e ff37 	bl	40c14 <log_msg_str_get>
   21da6:	4680      	mov	r8, r0
	mask = z_log_get_s_mask(msg_str, log_msg_nargs_get(msg));
   21da8:	4620      	mov	r0, r4
   21daa:	f01e ff04 	bl	40bb6 <log_msg_nargs_get>
   21dae:	4601      	mov	r1, r0
   21db0:	4640      	mov	r0, r8
   21db2:	f7ff fd93 	bl	218dc <z_log_get_s_mask>
   21db6:	4607      	mov	r7, r0
	return (((const char *)addr >= (const char *)RO_START) &&
   21db8:	f8df a0d0 	ldr.w	sl, [pc, #208]	; 21e8c <z_impl_log_process+0x15c>
		if (!is_rodata(str) && !log_is_strdup(str) &&
   21dbc:	f8df b0d0 	ldr.w	fp, [pc, #208]	; 21e90 <z_impl_log_process+0x160>
				__ASSERT(0, ERR_MSG, idx, msg_str);
   21dc0:	f8df 90d0 	ldr.w	r9, [pc, #208]	; 21e94 <z_impl_log_process+0x164>
	while (mask) {
   21dc4:	b937      	cbnz	r7, 21dd4 <z_impl_log_process+0xa4>
	return __log_backends_end - __log_backends_start;
   21dc6:	4d2b      	ldr	r5, [pc, #172]	; (21e74 <z_impl_log_process+0x144>)
   21dc8:	4b2b      	ldr	r3, [pc, #172]	; (21e78 <z_impl_log_process+0x148>)
   21dca:	2700      	movs	r7, #0
   21dcc:	1b5b      	subs	r3, r3, r5
   21dce:	ea4f 1823 	mov.w	r8, r3, asr #4
   21dd2:	e041      	b.n	21e58 <z_impl_log_process+0x128>
		idx = 31 - __builtin_clz(mask);
   21dd4:	fab7 f587 	clz	r5, r7
   21dd8:	f1c5 051f 	rsb	r5, r5, #31
		str = (const char *)log_msg_arg_get(msg, idx);
   21ddc:	4629      	mov	r1, r5
   21dde:	4620      	mov	r0, r4
   21de0:	f01e feec 	bl	40bbc <log_msg_arg_get>
	return (((const char *)addr >= (const char *)RO_START) &&
   21de4:	4550      	cmp	r0, sl
		str = (const char *)log_msg_arg_get(msg, idx);
   21de6:	4602      	mov	r2, r0
	return (((const char *)addr >= (const char *)RO_START) &&
   21de8:	d302      	bcc.n	21df0 <z_impl_log_process+0xc0>
		if (!is_rodata(str) && !log_is_strdup(str) &&
   21dea:	4b24      	ldr	r3, [pc, #144]	; (21e7c <z_impl_log_process+0x14c>)
   21dec:	4298      	cmp	r0, r3
   21dee:	d314      	bcc.n	21e1a <z_impl_log_process+0xea>
   21df0:	4610      	mov	r0, r2
   21df2:	f7ff ff8d 	bl	21d10 <log_is_strdup>
   21df6:	b980      	cbnz	r0, 21e1a <z_impl_log_process+0xea>
   21df8:	455a      	cmp	r2, fp
   21dfa:	d00e      	beq.n	21e1a <z_impl_log_process+0xea>
				__ASSERT(0, ERR_MSG, idx, msg_str);
   21dfc:	23a8      	movs	r3, #168	; 0xa8
   21dfe:	464a      	mov	r2, r9
   21e00:	491f      	ldr	r1, [pc, #124]	; (21e80 <z_impl_log_process+0x150>)
   21e02:	4820      	ldr	r0, [pc, #128]	; (21e84 <z_impl_log_process+0x154>)
   21e04:	f01e fbfd 	bl	40602 <printk>
   21e08:	4629      	mov	r1, r5
   21e0a:	481f      	ldr	r0, [pc, #124]	; (21e88 <z_impl_log_process+0x158>)
   21e0c:	4642      	mov	r2, r8
   21e0e:	f01e fbf8 	bl	40602 <printk>
   21e12:	21a8      	movs	r1, #168	; 0xa8
   21e14:	4648      	mov	r0, r9
   21e16:	f01e fcb7 	bl	40788 <assert_post_action>
		mask &= ~BIT(idx);
   21e1a:	2301      	movs	r3, #1
   21e1c:	fa03 f505 	lsl.w	r5, r3, r5
   21e20:	ea27 0705 	bic.w	r7, r7, r5
   21e24:	e7ce      	b.n	21dc4 <z_impl_log_process+0x94>
			if (log_backend_is_active(backend) &&
   21e26:	4628      	mov	r0, r5
   21e28:	f01e fdfb 	bl	40a22 <log_backend_is_active>
   21e2c:	b190      	cbz	r0, 21e54 <z_impl_log_process+0x124>
	return msg->hdr.ids.source_id;
   21e2e:	8962      	ldrh	r2, [r4, #10]
	return msg->hdr.ids.domain_id;
   21e30:	7aa1      	ldrb	r1, [r4, #10]
		backend_level = log_filter_get(backend,
   21e32:	2301      	movs	r3, #1
   21e34:	0992      	lsrs	r2, r2, #6
   21e36:	f3c1 01c2 	ubfx	r1, r1, #3, #3
   21e3a:	4628      	mov	r0, r5
   21e3c:	f7ff ff0a 	bl	21c54 <log_filter_get>
	return msg->hdr.ids.level;
   21e40:	7aa3      	ldrb	r3, [r4, #10]
   21e42:	f003 0307 	and.w	r3, r3, #7
			if (log_backend_is_active(backend) &&
   21e46:	4298      	cmp	r0, r3
   21e48:	d304      	bcc.n	21e54 <z_impl_log_process+0x124>
	backend->api->put(backend, msg);
   21e4a:	682b      	ldr	r3, [r5, #0]
   21e4c:	4621      	mov	r1, r4
   21e4e:	681b      	ldr	r3, [r3, #0]
   21e50:	4628      	mov	r0, r5
   21e52:	4798      	blx	r3
		for (int i = 0; i < log_backend_count_get(); i++) {
   21e54:	3701      	adds	r7, #1
   21e56:	3510      	adds	r5, #16
   21e58:	4547      	cmp	r7, r8
   21e5a:	dbe4      	blt.n	21e26 <z_impl_log_process+0xf6>
   21e5c:	e789      	b.n	21d72 <z_impl_log_process+0x42>
   21e5e:	bf00      	nop
   21e60:	20029982 	.word	0x20029982
   21e64:	20021e64 	.word	0x20021e64
   21e68:	20021e58 	.word	0x20021e58
   21e6c:	20021e5c 	.word	0x20021e5c
   21e70:	20029983 	.word	0x20029983
   21e74:	000460c0 	.word	0x000460c0
   21e78:	000460d0 	.word	0x000460d0
   21e7c:	0004d9dc 	.word	0x0004d9dc
   21e80:	0004d39b 	.word	0x0004d39b
   21e84:	0004764f 	.word	0x0004764f
   21e88:	00048339 	.word	0x00048339
   21e8c:	00045b44 	.word	0x00045b44
   21e90:	000482fe 	.word	0x000482fe
   21e94:	00048371 	.word	0x00048371

00021e98 <msg_finalize>:
	msg->hdr.timestamp = timestamp_func();
   21e98:	4b24      	ldr	r3, [pc, #144]	; (21f2c <msg_finalize+0x94>)
{
   21e9a:	b570      	push	{r4, r5, r6, lr}
	msg->hdr.timestamp = timestamp_func();
   21e9c:	681b      	ldr	r3, [r3, #0]
	msg->hdr.ids = src_level;
   21e9e:	8141      	strh	r1, [r0, #10]
{
   21ea0:	4605      	mov	r5, r0
	msg->hdr.timestamp = timestamp_func();
   21ea2:	4798      	blx	r3
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
   21ea4:	4c22      	ldr	r4, [pc, #136]	; (21f30 <msg_finalize+0x98>)
   21ea6:	60e8      	str	r0, [r5, #12]
   21ea8:	e8d4 3fef 	ldaex	r3, [r4]
   21eac:	3301      	adds	r3, #1
   21eae:	e8c4 3fe2 	stlex	r2, r3, [r4]
   21eb2:	2a00      	cmp	r2, #0
   21eb4:	d1f8      	bne.n	21ea8 <msg_finalize+0x10>
	__asm__ volatile(
   21eb6:	f04f 0320 	mov.w	r3, #32
   21eba:	f3ef 8611 	mrs	r6, BASEPRI
   21ebe:	f383 8811 	msr	BASEPRI, r3
   21ec2:	f3bf 8f6f 	isb	sy
	log_list_add_tail(&list, msg);
   21ec6:	481b      	ldr	r0, [pc, #108]	; (21f34 <msg_finalize+0x9c>)
   21ec8:	4629      	mov	r1, r5
   21eca:	f01e fd98 	bl	409fe <log_list_add_tail>
	__asm__ volatile(
   21ece:	f386 8811 	msr	BASEPRI, r6
   21ed2:	f3bf 8f6f 	isb	sy
	if (panic_mode) {
   21ed6:	4b18      	ldr	r3, [pc, #96]	; (21f38 <msg_finalize+0xa0>)
   21ed8:	781a      	ldrb	r2, [r3, #0]
   21eda:	b17a      	cbz	r2, 21efc <msg_finalize+0x64>
	__asm__ volatile(
   21edc:	f04f 0320 	mov.w	r3, #32
   21ee0:	f3ef 8411 	mrs	r4, BASEPRI
   21ee4:	f383 8811 	msr	BASEPRI, r3
   21ee8:	f3bf 8f6f 	isb	sy
	return z_impl_log_process(bypass);
   21eec:	2000      	movs	r0, #0
   21eee:	f7ff ff1f 	bl	21d30 <z_impl_log_process>
	__asm__ volatile(
   21ef2:	f384 8811 	msr	BASEPRI, r4
   21ef6:	f3bf 8f6f 	isb	sy
}
   21efa:	bd70      	pop	{r4, r5, r6, pc}
	} else if (proc_tid != NULL && buffered_cnt == 1) {
   21efc:	490f      	ldr	r1, [pc, #60]	; (21f3c <msg_finalize+0xa4>)
   21efe:	6823      	ldr	r3, [r4, #0]
   21f00:	6809      	ldr	r1, [r1, #0]
   21f02:	2900      	cmp	r1, #0
   21f04:	d0f9      	beq.n	21efa <msg_finalize+0x62>
   21f06:	2b01      	cmp	r3, #1
   21f08:	d106      	bne.n	21f18 <msg_finalize+0x80>
}
   21f0a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	z_impl_k_timer_start(timer, duration, period);
   21f0e:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   21f12:	480b      	ldr	r0, [pc, #44]	; (21f40 <msg_finalize+0xa8>)
   21f14:	f01c b952 	b.w	3e1bc <z_impl_k_timer_start>
		if ((buffered_cnt == CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD) &&
   21f18:	2b0a      	cmp	r3, #10
   21f1a:	d1ee      	bne.n	21efa <msg_finalize+0x62>
	z_impl_k_timer_stop(timer);
   21f1c:	4808      	ldr	r0, [pc, #32]	; (21f40 <msg_finalize+0xa8>)
   21f1e:	f022 feea 	bl	44cf6 <z_impl_k_timer_stop>
}
   21f22:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	z_impl_k_sem_give(sem);
   21f26:	4807      	ldr	r0, [pc, #28]	; (21f44 <msg_finalize+0xac>)
   21f28:	f01b baac 	b.w	3d484 <z_impl_k_sem_give>
   21f2c:	20032348 	.word	0x20032348
   21f30:	20021e58 	.word	0x20021e58
   21f34:	20021e64 	.word	0x20021e64
   21f38:	20029983 	.word	0x20029983
   21f3c:	20021f64 	.word	0x20021f64
   21f40:	20021e6c 	.word	0x20021e6c
   21f44:	20032b98 	.word	0x20032b98

00021f48 <log_process_thread_func>:
{
   21f48:	b508      	push	{r3, lr}
	return __log_backends_end - __log_backends_start;
   21f4a:	4a15      	ldr	r2, [pc, #84]	; (21fa0 <log_process_thread_func+0x58>)
   21f4c:	4b15      	ldr	r3, [pc, #84]	; (21fa4 <log_process_thread_func+0x5c>)
   21f4e:	1a9b      	subs	r3, r3, r2
	__ASSERT_NO_MSG(log_backend_count_get() > 0);
   21f50:	2b00      	cmp	r3, #0
   21f52:	dc0b      	bgt.n	21f6c <log_process_thread_func+0x24>
   21f54:	4914      	ldr	r1, [pc, #80]	; (21fa8 <log_process_thread_func+0x60>)
   21f56:	4815      	ldr	r0, [pc, #84]	; (21fac <log_process_thread_func+0x64>)
   21f58:	f240 437a 	movw	r3, #1146	; 0x47a
   21f5c:	4a14      	ldr	r2, [pc, #80]	; (21fb0 <log_process_thread_func+0x68>)
   21f5e:	f01e fb50 	bl	40602 <printk>
   21f62:	f240 417a 	movw	r1, #1146	; 0x47a
   21f66:	4812      	ldr	r0, [pc, #72]	; (21fb0 <log_process_thread_func+0x68>)
   21f68:	f01e fc0e 	bl	40788 <assert_post_action>
	log_init();
   21f6c:	f7ff fe22 	bl	21bb4 <log_init>
	return z_impl_k_current_get();
   21f70:	f01b fa82 	bl	3d478 <z_impl_k_current_get>
	proc_tid = process_tid;
   21f74:	4b0f      	ldr	r3, [pc, #60]	; (21fb4 <log_process_thread_func+0x6c>)
   21f76:	6018      	str	r0, [r3, #0]
	if (CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD &&
   21f78:	b130      	cbz	r0, 21f88 <log_process_thread_func+0x40>
	    buffered_cnt >= CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD) {
   21f7a:	4b0f      	ldr	r3, [pc, #60]	; (21fb8 <log_process_thread_func+0x70>)
	    process_tid &&
   21f7c:	681b      	ldr	r3, [r3, #0]
   21f7e:	2b09      	cmp	r3, #9
   21f80:	dd02      	ble.n	21f88 <log_process_thread_func+0x40>
	z_impl_k_sem_give(sem);
   21f82:	480e      	ldr	r0, [pc, #56]	; (21fbc <log_process_thread_func+0x74>)
   21f84:	f01b fa7e 	bl	3d484 <z_impl_k_sem_give>
	return z_impl_k_sem_take(sem, timeout);
   21f88:	4c0c      	ldr	r4, [pc, #48]	; (21fbc <log_process_thread_func+0x74>)
   21f8a:	2000      	movs	r0, #0
   21f8c:	f7ff fed0 	bl	21d30 <z_impl_log_process>
		if (log_process(false) == false) {
   21f90:	2800      	cmp	r0, #0
   21f92:	d1fa      	bne.n	21f8a <log_process_thread_func+0x42>
   21f94:	f04f 31ff 	mov.w	r1, #4294967295
   21f98:	4620      	mov	r0, r4
   21f9a:	f01b fabd 	bl	3d518 <z_impl_k_sem_take>
   21f9e:	e7f4      	b.n	21f8a <log_process_thread_func+0x42>
   21fa0:	000460c0 	.word	0x000460c0
   21fa4:	000460d0 	.word	0x000460d0
   21fa8:	000482e2 	.word	0x000482e2
   21fac:	0004764f 	.word	0x0004764f
   21fb0:	00048371 	.word	0x00048371
   21fb4:	20021f64 	.word	0x20021f64
   21fb8:	20021e58 	.word	0x20021e58
   21fbc:	20032b98 	.word	0x20032b98

00021fc0 <z_impl_log_panic>:
{
   21fc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (panic_mode) {
   21fc2:	4f0f      	ldr	r7, [pc, #60]	; (22000 <z_impl_log_panic+0x40>)
   21fc4:	783d      	ldrb	r5, [r7, #0]
   21fc6:	b975      	cbnz	r5, 21fe6 <z_impl_log_panic+0x26>
	log_init();
   21fc8:	f7ff fdf4 	bl	21bb4 <log_init>
   21fcc:	4c0d      	ldr	r4, [pc, #52]	; (22004 <z_impl_log_panic+0x44>)
   21fce:	4e0e      	ldr	r6, [pc, #56]	; (22008 <z_impl_log_panic+0x48>)
   21fd0:	1b36      	subs	r6, r6, r4
   21fd2:	1136      	asrs	r6, r6, #4
	for (int i = 0; i < log_backend_count_get(); i++) {
   21fd4:	42b5      	cmp	r5, r6
   21fd6:	db07      	blt.n	21fe8 <z_impl_log_panic+0x28>
   21fd8:	2000      	movs	r0, #0
   21fda:	f7ff fea9 	bl	21d30 <z_impl_log_process>
		while (log_process(false) == true) {
   21fde:	2800      	cmp	r0, #0
   21fe0:	d1fa      	bne.n	21fd8 <z_impl_log_panic+0x18>
	panic_mode = true;
   21fe2:	2301      	movs	r3, #1
   21fe4:	703b      	strb	r3, [r7, #0]
}
   21fe6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (log_backend_is_active(backend)) {
   21fe8:	4620      	mov	r0, r4
   21fea:	f01e fd1a 	bl	40a22 <log_backend_is_active>
   21fee:	b118      	cbz	r0, 21ff8 <z_impl_log_panic+0x38>
	backend->api->panic(backend);
   21ff0:	6823      	ldr	r3, [r4, #0]
   21ff2:	4620      	mov	r0, r4
   21ff4:	691b      	ldr	r3, [r3, #16]
   21ff6:	4798      	blx	r3
	for (int i = 0; i < log_backend_count_get(); i++) {
   21ff8:	3501      	adds	r5, #1
   21ffa:	3410      	adds	r4, #16
   21ffc:	e7ea      	b.n	21fd4 <z_impl_log_panic+0x14>
   21ffe:	bf00      	nop
   22000:	20029983 	.word	0x20029983
   22004:	000460c0 	.word	0x000460c0
   22008:	000460d0 	.word	0x000460d0

0002200c <log_free>:
{
   2200c:	b507      	push	{r0, r1, r2, lr}
	struct log_strdup_buf *dup = CONTAINER_OF(str, struct log_strdup_buf,
   2200e:	3804      	subs	r0, #4
   22010:	9001      	str	r0, [sp, #4]
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
   22012:	e8d0 3fef 	ldaex	r3, [r0]
   22016:	1e5a      	subs	r2, r3, #1
   22018:	e8c0 2fe1 	stlex	r1, r2, [r0]
   2201c:	2900      	cmp	r1, #0
   2201e:	d1f8      	bne.n	22012 <log_free+0x6>
	if (atomic_dec(&dup->refcount) == 1) {
   22020:	2b01      	cmp	r3, #1
   22022:	d103      	bne.n	2202c <log_free+0x20>
		k_mem_slab_free(&log_strdup_pool, (void **)&dup);
   22024:	a901      	add	r1, sp, #4
   22026:	4803      	ldr	r0, [pc, #12]	; (22034 <log_free+0x28>)
   22028:	f019 fa6e 	bl	3b508 <k_mem_slab_free>
}
   2202c:	b003      	add	sp, #12
   2202e:	f85d fb04 	ldr.w	pc, [sp], #4
   22032:	bf00      	nop
   22034:	20021e98 	.word	0x20021e98

00022038 <log_msg_pool_init>:
static u8_t __noinit __aligned(sizeof(void *))
		log_msg_pool_buf[CONFIG_LOG_BUFFER_SIZE];

void log_msg_pool_init(void)
{
	k_mem_slab_init(&log_msg_pool, log_msg_pool_buf, MSG_SIZE, NUM_OF_MSGS);
   22038:	2320      	movs	r3, #32
   2203a:	4902      	ldr	r1, [pc, #8]	; (22044 <log_msg_pool_init+0xc>)
   2203c:	461a      	mov	r2, r3
   2203e:	4802      	ldr	r0, [pc, #8]	; (22048 <log_msg_pool_init+0x10>)
   22040:	f022 bcff 	b.w	44a42 <k_mem_slab_init>
   22044:	20030780 	.word	0x20030780
   22048:	20021f68 	.word	0x20021f68

0002204c <log_msg_no_space_handle>:
	k_mem_slab_free(&log_msg_pool, (void **)&msg);
}

union log_msg_chunk *log_msg_no_space_handle(void)
{
	union log_msg_chunk *msg = NULL;
   2204c:	2300      	movs	r3, #0
{
   2204e:	b537      	push	{r0, r1, r2, r4, r5, lr}

	if (IS_ENABLED(CONFIG_LOG_MODE_OVERFLOW)) {
		do {
			more = log_process(true);
			log_dropped();
			err = k_mem_slab_alloc(&log_msg_pool,
   22050:	4d09      	ldr	r5, [pc, #36]	; (22078 <log_msg_no_space_handle+0x2c>)
	union log_msg_chunk *msg = NULL;
   22052:	9301      	str	r3, [sp, #4]
   22054:	2001      	movs	r0, #1
   22056:	f7ff fe6b 	bl	21d30 <z_impl_log_process>
   2205a:	4604      	mov	r4, r0
			log_dropped();
   2205c:	f7ff fcd2 	bl	21a04 <log_dropped>
			err = k_mem_slab_alloc(&log_msg_pool,
   22060:	2200      	movs	r2, #0
   22062:	a901      	add	r1, sp, #4
   22064:	4628      	mov	r0, r5
   22066:	f019 f9eb 	bl	3b440 <k_mem_slab_alloc>
					       (void **)&msg,
					       K_NO_WAIT);
		} while ((err != 0) && more);
   2206a:	b108      	cbz	r0, 22070 <log_msg_no_space_handle+0x24>
   2206c:	2c00      	cmp	r4, #0
   2206e:	d1f1      	bne.n	22054 <log_msg_no_space_handle+0x8>
	} else {
		log_dropped();
	}
	return msg;

}
   22070:	9801      	ldr	r0, [sp, #4]
   22072:	b003      	add	sp, #12
   22074:	bd30      	pop	{r4, r5, pc}
   22076:	bf00      	nop
   22078:	20021f68 	.word	0x20021f68

0002207c <log_msg_chunk_alloc>:
{
   2207c:	b507      	push	{r0, r1, r2, lr}
	union log_msg_chunk *msg = NULL;
   2207e:	2200      	movs	r2, #0
	int err = k_mem_slab_alloc(&log_msg_pool, (void **)&msg,
   22080:	a901      	add	r1, sp, #4
   22082:	4806      	ldr	r0, [pc, #24]	; (2209c <log_msg_chunk_alloc+0x20>)
	union log_msg_chunk *msg = NULL;
   22084:	9201      	str	r2, [sp, #4]
	int err = k_mem_slab_alloc(&log_msg_pool, (void **)&msg,
   22086:	f019 f9db 	bl	3b440 <k_mem_slab_alloc>
	if (err != 0) {
   2208a:	b110      	cbz	r0, 22092 <log_msg_chunk_alloc+0x16>
		msg = log_msg_no_space_handle();
   2208c:	f7ff ffde 	bl	2204c <log_msg_no_space_handle>
   22090:	9001      	str	r0, [sp, #4]
}
   22092:	9801      	ldr	r0, [sp, #4]
   22094:	b003      	add	sp, #12
   22096:	f85d fb04 	ldr.w	pc, [sp], #4
   2209a:	bf00      	nop
   2209c:	20021f68 	.word	0x20021f68

000220a0 <msg_free>:
{
   220a0:	b5f0      	push	{r4, r5, r6, r7, lr}
	return  (msg->hdr.params.generic.type == LOG_MSG_TYPE_STD);
   220a2:	7a04      	ldrb	r4, [r0, #8]
	}
}

u32_t log_msg_nargs_get(struct log_msg *msg)
{
	return msg->hdr.params.std.nargs;
   220a4:	7a46      	ldrb	r6, [r0, #9]
{
   220a6:	b085      	sub	sp, #20
	if (log_msg_is_std(msg) && nargs) {
   220a8:	f014 0401 	ands.w	r4, r4, #1
{
   220ac:	9001      	str	r0, [sp, #4]
	return msg->hdr.params.std.nargs;
   220ae:	ea4f 1616 	mov.w	r6, r6, lsr #4
	if (log_msg_is_std(msg) && nargs) {
   220b2:	d00e      	beq.n	220d2 <msg_free+0x32>
	if (msg->hdr.params.generic.ext == 1) {
   220b4:	9b01      	ldr	r3, [sp, #4]
   220b6:	7a1a      	ldrb	r2, [r3, #8]
   220b8:	0792      	lsls	r2, r2, #30
   220ba:	d504      	bpl.n	220c6 <msg_free+0x26>
		cont_free(msg->payload.ext.next);
   220bc:	695b      	ldr	r3, [r3, #20]
		k_mem_slab_free(&log_msg_pool, (void **)&cont);
   220be:	4c18      	ldr	r4, [pc, #96]	; (22120 <msg_free+0x80>)
   220c0:	9303      	str	r3, [sp, #12]
	while (cont != NULL) {
   220c2:	9b03      	ldr	r3, [sp, #12]
   220c4:	bb2b      	cbnz	r3, 22112 <msg_free+0x72>
	k_mem_slab_free(&log_msg_pool, (void **)&msg);
   220c6:	a901      	add	r1, sp, #4
   220c8:	4815      	ldr	r0, [pc, #84]	; (22120 <msg_free+0x80>)
   220ca:	f019 fa1d 	bl	3b508 <k_mem_slab_free>
}
   220ce:	b005      	add	sp, #20
   220d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (log_msg_is_std(msg) && nargs) {
   220d2:	2e00      	cmp	r6, #0
   220d4:	d0ee      	beq.n	220b4 <msg_free+0x14>
		for (i = 0; i < nargs; i++) {
   220d6:	4625      	mov	r5, r4
   220d8:	e017      	b.n	2210a <msg_free+0x6a>
			void *buf = (void *)log_msg_arg_get(msg, i);
   220da:	4629      	mov	r1, r5
   220dc:	f01e fd6e 	bl	40bbc <log_msg_arg_get>
   220e0:	4607      	mov	r7, r0
			if (log_is_strdup(buf)) {
   220e2:	f7ff fe15 	bl	21d10 <log_is_strdup>
   220e6:	b178      	cbz	r0, 22108 <msg_free+0x68>
				if (smask == 0) {
   220e8:	b93c      	cbnz	r4, 220fa <msg_free+0x5a>
					smask = z_log_get_s_mask(
   220ea:	9b01      	ldr	r3, [sp, #4]
   220ec:	4631      	mov	r1, r6
   220ee:	6918      	ldr	r0, [r3, #16]
   220f0:	f7ff fbf4 	bl	218dc <z_log_get_s_mask>
					if (smask == 0) {
   220f4:	4604      	mov	r4, r0
   220f6:	2800      	cmp	r0, #0
   220f8:	d0dc      	beq.n	220b4 <msg_free+0x14>
				if (smask & BIT(i)) {
   220fa:	fa24 f305 	lsr.w	r3, r4, r5
   220fe:	07db      	lsls	r3, r3, #31
   22100:	d502      	bpl.n	22108 <msg_free+0x68>
					log_free(buf);
   22102:	4638      	mov	r0, r7
   22104:	f7ff ff82 	bl	2200c <log_free>
		for (i = 0; i < nargs; i++) {
   22108:	3501      	adds	r5, #1
   2210a:	42ae      	cmp	r6, r5
   2210c:	9801      	ldr	r0, [sp, #4]
   2210e:	d8e4      	bhi.n	220da <msg_free+0x3a>
   22110:	e7d0      	b.n	220b4 <msg_free+0x14>
		next = cont->next;
   22112:	681d      	ldr	r5, [r3, #0]
		k_mem_slab_free(&log_msg_pool, (void **)&cont);
   22114:	a903      	add	r1, sp, #12
   22116:	4620      	mov	r0, r4
   22118:	f019 f9f6 	bl	3b508 <k_mem_slab_free>
		cont = next;
   2211c:	9503      	str	r5, [sp, #12]
   2211e:	e7d0      	b.n	220c2 <msg_free+0x22>
   22120:	20021f68 	.word	0x20021f68

00022124 <log_msg_create_n>:
	}
}

struct log_msg *log_msg_create_n(const char *str, log_arg_t *args, u32_t nargs)
{
	__ASSERT_NO_MSG(nargs < LOG_MAX_NARGS);
   22124:	2a0e      	cmp	r2, #14
{
   22126:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2212a:	4682      	mov	sl, r0
   2212c:	4688      	mov	r8, r1
   2212e:	4615      	mov	r5, r2
	__ASSERT_NO_MSG(nargs < LOG_MAX_NARGS);
   22130:	d90b      	bls.n	2214a <log_msg_create_n+0x26>
   22132:	492d      	ldr	r1, [pc, #180]	; (221e8 <log_msg_create_n+0xc4>)
   22134:	482d      	ldr	r0, [pc, #180]	; (221ec <log_msg_create_n+0xc8>)
   22136:	f240 1335 	movw	r3, #309	; 0x135
   2213a:	4a2d      	ldr	r2, [pc, #180]	; (221f0 <log_msg_create_n+0xcc>)
   2213c:	f01e fa61 	bl	40602 <printk>
   22140:	f240 1135 	movw	r1, #309	; 0x135
   22144:	482a      	ldr	r0, [pc, #168]	; (221f0 <log_msg_create_n+0xcc>)
   22146:	f01e fb1f 	bl	40788 <assert_post_action>
 *
 *  @return Allocated chunk of NULL.
 */
static inline struct log_msg *z_log_msg_std_alloc(void)
{
	struct  log_msg *msg = (struct  log_msg *)log_msg_chunk_alloc();
   2214a:	f7ff ff97 	bl	2207c <log_msg_chunk_alloc>

	if (msg != NULL) {
   2214e:	4604      	mov	r4, r0
   22150:	b330      	cbz	r0, 221a0 <log_msg_create_n+0x7c>
		/* all fields reset to 0, reference counter to 1 */
		msg->hdr.ref_cnt = 1;
   22152:	2301      	movs	r3, #1
		msg->hdr.params.raw = 0U;
   22154:	2600      	movs	r6, #0
	if ((msg == NULL) || nargs <= LOG_MSG_NARGS_SINGLE_CHUNK) {
   22156:	2d03      	cmp	r5, #3
		msg->hdr.ref_cnt = 1;
   22158:	6043      	str	r3, [r0, #4]
		msg->hdr.params.raw = 0U;
   2215a:	8106      	strh	r6, [r0, #8]
   2215c:	d909      	bls.n	22172 <log_msg_create_n+0x4e>
	msg->hdr.params.generic.ext = 1;
   2215e:	2202      	movs	r2, #2
	n -= LOG_MSG_NARGS_HEAD_CHUNK;
   22160:	f1a5 0902 	sub.w	r9, r5, #2
	msg->hdr.params.generic.ext = 1;
   22164:	8102      	strh	r2, [r0, #8]
	next = &msg->payload.ext.next;
   22166:	f100 0b14 	add.w	fp, r0, #20
	*next = NULL;
   2216a:	6146      	str	r6, [r0, #20]
	while (n > 0) {
   2216c:	f1b9 0f00 	cmp.w	r9, #0
   22170:	dc0e      	bgt.n	22190 <log_msg_create_n+0x6c>

	msg = msg_alloc(nargs);

	if (msg != NULL) {
		msg->str = str;
		msg->hdr.params.std.nargs = nargs;
   22172:	7a63      	ldrb	r3, [r4, #9]
	if (nargs > LOG_MSG_NARGS_SINGLE_CHUNK) {
   22174:	2d03      	cmp	r5, #3
		msg->hdr.params.std.nargs = nargs;
   22176:	f365 1307 	bfi	r3, r5, #4, #4
		msg->str = str;
   2217a:	f8c4 a010 	str.w	sl, [r4, #16]
		msg->hdr.params.std.nargs = nargs;
   2217e:	7263      	strb	r3, [r4, #9]
	if (nargs > LOG_MSG_NARGS_SINGLE_CHUNK) {
   22180:	d818      	bhi.n	221b4 <log_msg_create_n+0x90>
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   22182:	00aa      	lsls	r2, r5, #2
   22184:	4641      	mov	r1, r8
   22186:	f104 0014 	add.w	r0, r4, #20
   2218a:	f022 fe61 	bl	44e50 <memcpy>
   2218e:	e007      	b.n	221a0 <log_msg_create_n+0x7c>
		cont = (struct log_msg_cont *)log_msg_chunk_alloc();
   22190:	f7ff ff74 	bl	2207c <log_msg_chunk_alloc>
		if (cont == NULL) {
   22194:	4607      	mov	r7, r0
   22196:	b930      	cbnz	r0, 221a6 <log_msg_create_n+0x82>
			msg_free(msg);
   22198:	4620      	mov	r0, r4
   2219a:	f7ff ff81 	bl	220a0 <msg_free>
			return NULL;
   2219e:	463c      	mov	r4, r7
		copy_args_to_msg(msg, args, nargs);
	}

	return msg;
}
   221a0:	4620      	mov	r0, r4
   221a2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		*next = cont;
   221a6:	f8cb 0000 	str.w	r0, [fp]
		cont->next = NULL;
   221aa:	f1a9 0907 	sub.w	r9, r9, #7
   221ae:	6006      	str	r6, [r0, #0]
		next = &cont->next;
   221b0:	4683      	mov	fp, r0
		n -= ARGS_CONT_MSG;
   221b2:	e7db      	b.n	2216c <log_msg_create_n+0x48>
   221b4:	f8d8 3000 	ldr.w	r3, [r8]
	struct log_msg_cont *cont = msg->payload.ext.next;
   221b8:	6967      	ldr	r7, [r4, #20]
   221ba:	61a3      	str	r3, [r4, #24]
   221bc:	f8d8 3004 	ldr.w	r3, [r8, #4]
		nargs -= LOG_MSG_NARGS_HEAD_CHUNK;
   221c0:	3d02      	subs	r5, #2
   221c2:	61e3      	str	r3, [r4, #28]
		args += LOG_MSG_NARGS_HEAD_CHUNK;
   221c4:	f108 0808 	add.w	r8, r8, #8
		u32_t cpy_args = MIN(nargs, ARGS_CONT_MSG);
   221c8:	2d07      	cmp	r5, #7
   221ca:	462e      	mov	r6, r5
   221cc:	bf28      	it	cs
   221ce:	2607      	movcs	r6, #7
		(void)memcpy(cont->payload.args, args,
   221d0:	ea4f 0986 	mov.w	r9, r6, lsl #2
   221d4:	4641      	mov	r1, r8
   221d6:	1d38      	adds	r0, r7, #4
   221d8:	464a      	mov	r2, r9
   221da:	f022 fe39 	bl	44e50 <memcpy>
	while (nargs != 0U) {
   221de:	1bad      	subs	r5, r5, r6
		args += cpy_args;
   221e0:	44c8      	add	r8, r9
		cont = cont->next;
   221e2:	683f      	ldr	r7, [r7, #0]
	while (nargs != 0U) {
   221e4:	d1f0      	bne.n	221c8 <log_msg_create_n+0xa4>
   221e6:	e7db      	b.n	221a0 <log_msg_create_n+0x7c>
   221e8:	000483e2 	.word	0x000483e2
   221ec:	0004764f 	.word	0x0004764f
   221f0:	000483b6 	.word	0x000483b6

000221f4 <print_formatted>:
	return 0;
}

static int print_formatted(const struct log_output *log_output,
			   const char *fmt, ...)
{
   221f4:	b40e      	push	{r1, r2, r3}
   221f6:	b503      	push	{r0, r1, lr}
   221f8:	ab03      	add	r3, sp, #12
   221fa:	f853 2b04 	ldr.w	r2, [r3], #4
	va_start(args, fmt);
#if !defined(CONFIG_NEWLIB_LIBC) && !defined(CONFIG_ARCH_POSIX) && \
    defined(CONFIG_LOG_ENABLE_FANCY_OUTPUT_FORMATTING)
	length = z_prf(out_func, (void *)log_output, (char *)fmt, args);
#else
	z_vprintk(out_func, (void *)log_output, fmt, args);
   221fe:	4601      	mov	r1, r0
   22200:	4804      	ldr	r0, [pc, #16]	; (22214 <print_formatted+0x20>)
	va_start(args, fmt);
   22202:	9301      	str	r3, [sp, #4]
	z_vprintk(out_func, (void *)log_output, fmt, args);
   22204:	f01e f88d 	bl	40322 <z_vprintk>
#endif
	va_end(args);

	return length;
}
   22208:	2000      	movs	r0, #0
   2220a:	b002      	add	sp, #8
   2220c:	f85d eb04 	ldr.w	lr, [sp], #4
   22210:	b003      	add	sp, #12
   22212:	4770      	bx	lr
   22214:	00022451 	.word	0x00022451

00022218 <prefix_print>:
}

static u32_t prefix_print(const struct log_output *log_output,
			 u32_t flags, bool func_on, u32_t timestamp, u8_t level,
			 u8_t domain_id, u16_t source_id)
{
   22218:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
			"<%d>1 ",
			facility * 8 +
			level_to_rfc5424_severity(level));
	}

	if (stamp) {
   2221c:	f011 0402 	ands.w	r4, r1, #2
{
   22220:	b085      	sub	sp, #20
   22222:	4606      	mov	r6, r0
   22224:	4690      	mov	r8, r2
   22226:	f89d 7038 	ldrb.w	r7, [sp, #56]	; 0x38
	bool colors_on = flags & LOG_OUTPUT_FLAG_COLORS;
   2222a:	f001 0901 	and.w	r9, r1, #1
	bool level_on = flags & LOG_OUTPUT_FLAG_LEVEL;
   2222e:	f001 0508 	and.w	r5, r1, #8
	if (stamp) {
   22232:	d007      	beq.n	22244 <prefix_print+0x2c>
	if (!format) {
   22234:	f011 0f44 	tst.w	r1, #68	; 0x44
   22238:	d137      	bne.n	222aa <prefix_print+0x92>
		length = print_formatted(log_output, "[%08lu] ", timestamp);
   2223a:	461a      	mov	r2, r3
   2223c:	4932      	ldr	r1, [pc, #200]	; (22308 <prefix_print+0xf0>)
   2223e:	f7ff ffd9 	bl	221f4 <print_formatted>
		length += timestamp_print(log_output, flags, timestamp);
   22242:	4604      	mov	r4, r0
	if (color) {
   22244:	f1b9 0f00 	cmp.w	r9, #0
   22248:	d00a      	beq.n	22260 <prefix_print+0x48>
		const char *color = start && (colors[level] != NULL) ?
   2224a:	4b30      	ldr	r3, [pc, #192]	; (2230c <prefix_print+0xf4>)
		print_formatted(log_output, "%s", color);
   2224c:	4930      	ldr	r1, [pc, #192]	; (22310 <prefix_print+0xf8>)
		const char *color = start && (colors[level] != NULL) ?
   2224e:	f853 2027 	ldr.w	r2, [r3, r7, lsl #2]
		print_formatted(log_output, "%s", color);
   22252:	4b30      	ldr	r3, [pc, #192]	; (22314 <prefix_print+0xfc>)
   22254:	4630      	mov	r0, r6
   22256:	2a00      	cmp	r2, #0
   22258:	bf08      	it	eq
   2225a:	461a      	moveq	r2, r3
   2225c:	f7ff ffca 	bl	221f4 <print_formatted>
	if (level_on) {
   22260:	b13d      	cbz	r5, 22272 <prefix_print+0x5a>
		total += print_formatted(log_output, "<%s> ", severity[level]);
   22262:	4b2d      	ldr	r3, [pc, #180]	; (22318 <prefix_print+0x100>)
   22264:	492d      	ldr	r1, [pc, #180]	; (2231c <prefix_print+0x104>)
   22266:	f853 2027 	ldr.w	r2, [r3, r7, lsl #2]
   2226a:	4630      	mov	r0, r6
   2226c:	f7ff ffc2 	bl	221f4 <print_formatted>
   22270:	4605      	mov	r5, r0
	total += print_formatted(log_output,
   22272:	f1b8 0f00 	cmp.w	r8, #0
   22276:	d044      	beq.n	22302 <prefix_print+0xea>
				((1 << level) & LOG_FUNCTION_PREFIX_MASK)) ?
   22278:	2301      	movs	r3, #1
   2227a:	fa03 f707 	lsl.w	r7, r3, r7
	total += print_formatted(log_output,
   2227e:	4b28      	ldr	r3, [pc, #160]	; (22320 <prefix_print+0x108>)
   22280:	f017 0f10 	tst.w	r7, #16
   22284:	4f27      	ldr	r7, [pc, #156]	; (22324 <prefix_print+0x10c>)
   22286:	bf18      	it	ne
   22288:	461f      	movne	r7, r3
   2228a:	f8bd 1040 	ldrh.w	r1, [sp, #64]	; 0x40
   2228e:	f89d 003c 	ldrb.w	r0, [sp, #60]	; 0x3c
   22292:	f7ff fbc3 	bl	21a1c <log_source_name_get>
   22296:	4639      	mov	r1, r7
   22298:	4602      	mov	r2, r0
   2229a:	4630      	mov	r0, r6
   2229c:	f7ff ffaa 	bl	221f4 <print_formatted>
   222a0:	4428      	add	r0, r5
		length += ids_print(log_output, level_on, func_on,
				    domain_id, source_id, level);
	}

	return length;
}
   222a2:	4420      	add	r0, r4
   222a4:	b005      	add	sp, #20
   222a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	} else if (freq != 0U) {
   222aa:	4a1f      	ldr	r2, [pc, #124]	; (22328 <prefix_print+0x110>)
   222ac:	6811      	ldr	r1, [r2, #0]
   222ae:	b331      	cbz	r1, 222fe <prefix_print+0xe6>
		timestamp /= timestamp_div;
   222b0:	4a1e      	ldr	r2, [pc, #120]	; (2232c <prefix_print+0x114>)
   222b2:	f44f 6e61 	mov.w	lr, #3600	; 0xe10
   222b6:	6814      	ldr	r4, [r2, #0]
		ms = (remainder * 1000U) / freq;
   222b8:	f44f 7c7a 	mov.w	ip, #1000	; 0x3e8
		timestamp /= timestamp_div;
   222bc:	fbb3 f3f4 	udiv	r3, r3, r4
		seconds = timestamp / freq;
   222c0:	fbb3 f4f1 	udiv	r4, r3, r1
		seconds -= hours * 3600U;
   222c4:	fbb4 f2fe 	udiv	r2, r4, lr
   222c8:	fb0e 4e12 	mls	lr, lr, r2, r4
		remainder = timestamp % freq;
   222cc:	fb01 3414 	mls	r4, r1, r4, r3
		ms = (remainder * 1000U) / freq;
   222d0:	fb0c f404 	mul.w	r4, ip, r4
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
   222d4:	fbb4 fbf1 	udiv	fp, r4, r1
		mins = seconds / 60U;
   222d8:	f04f 0a3c 	mov.w	sl, #60	; 0x3c
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
   222dc:	fb01 441b 	mls	r4, r1, fp, r4
   222e0:	fb0c f404 	mul.w	r4, ip, r4
		mins = seconds / 60U;
   222e4:	fbbe f3fa 	udiv	r3, lr, sl
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
   222e8:	fbb4 f1f1 	udiv	r1, r4, r1
			length = print_formatted(log_output,
   222ec:	e9cd b101 	strd	fp, r1, [sp, #4]
   222f0:	fb0a e113 	mls	r1, sl, r3, lr
   222f4:	9100      	str	r1, [sp, #0]
   222f6:	490e      	ldr	r1, [pc, #56]	; (22330 <prefix_print+0x118>)
   222f8:	f7ff ff7c 	bl	221f4 <print_formatted>
   222fc:	e7a1      	b.n	22242 <prefix_print+0x2a>
		length = 0;
   222fe:	4608      	mov	r0, r1
   22300:	e79f      	b.n	22242 <prefix_print+0x2a>
	total += print_formatted(log_output,
   22302:	4f08      	ldr	r7, [pc, #32]	; (22324 <prefix_print+0x10c>)
   22304:	e7c1      	b.n	2228a <prefix_print+0x72>
   22306:	bf00      	nop
   22308:	00048496 	.word	0x00048496
   2230c:	00046268 	.word	0x00046268
   22310:	00047a4a 	.word	0x00047a4a
   22314:	00048488 	.word	0x00048488
   22318:	0004627c 	.word	0x0004627c
   2231c:	000484bb 	.word	0x000484bb
   22320:	00048492 	.word	0x00048492
   22324:	0004848d 	.word	0x0004848d
   22328:	20021f84 	.word	0x20021f84
   2232c:	20021f88 	.word	0x20021f88
   22330:	0004849f 	.word	0x0004849f

00022334 <postfix_print>:

static void postfix_print(const struct log_output *log_output,
			  u32_t flags, u8_t level)
{
   22334:	b538      	push	{r3, r4, r5, lr}
   22336:	460c      	mov	r4, r1
	if (color) {
   22338:	07e1      	lsls	r1, r4, #31
{
   2233a:	4605      	mov	r5, r0
	if (color) {
   2233c:	d503      	bpl.n	22346 <postfix_print+0x12>
		print_formatted(log_output, "%s", color);
   2233e:	4a08      	ldr	r2, [pc, #32]	; (22360 <postfix_print+0x2c>)
   22340:	4908      	ldr	r1, [pc, #32]	; (22364 <postfix_print+0x30>)
   22342:	f7ff ff57 	bl	221f4 <print_formatted>
	if ((flags & LOG_OUTPUT_FLAG_CRLF_NONE) != 0U) {
   22346:	06e2      	lsls	r2, r4, #27
   22348:	d408      	bmi.n	2235c <postfix_print+0x28>
	if ((flags & LOG_OUTPUT_FLAG_CRLF_LFONLY) != 0U) {
   2234a:	06a3      	lsls	r3, r4, #26
		print_formatted(ctx, "\r\n");
   2234c:	4628      	mov	r0, r5
	color_postfix(log_output, (flags & LOG_OUTPUT_FLAG_COLORS),
			      level);
	newline_print(log_output, flags);
}
   2234e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		print_formatted(ctx, "\n");
   22352:	bf4c      	ite	mi
   22354:	4904      	ldrmi	r1, [pc, #16]	; (22368 <postfix_print+0x34>)
		print_formatted(ctx, "\r\n");
   22356:	4905      	ldrpl	r1, [pc, #20]	; (2236c <postfix_print+0x38>)
   22358:	f7ff bf4c 	b.w	221f4 <print_formatted>
}
   2235c:	bd38      	pop	{r3, r4, r5, pc}
   2235e:	bf00      	nop
   22360:	00048488 	.word	0x00048488
   22364:	00047a4a 	.word	0x00047a4a
   22368:	0004a298 	.word	0x0004a298
   2236c:	00048510 	.word	0x00048510

00022370 <hexdump_line_print>:
{
   22370:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   22374:	4698      	mov	r8, r3
   22376:	9b08      	ldr	r3, [sp, #32]
   22378:	4604      	mov	r4, r0
	if ((flags & LOG_OUTPUT_FLAG_CRLF_NONE) != 0U) {
   2237a:	06dd      	lsls	r5, r3, #27
{
   2237c:	460e      	mov	r6, r1
   2237e:	4617      	mov	r7, r2
	if ((flags & LOG_OUTPUT_FLAG_CRLF_NONE) != 0U) {
   22380:	d405      	bmi.n	2238e <hexdump_line_print+0x1e>
	if ((flags & LOG_OUTPUT_FLAG_CRLF_LFONLY) != 0U) {
   22382:	0699      	lsls	r1, r3, #26
		print_formatted(ctx, "\n");
   22384:	bf4c      	ite	mi
   22386:	492a      	ldrmi	r1, [pc, #168]	; (22430 <hexdump_line_print+0xc0>)
		print_formatted(ctx, "\r\n");
   22388:	492a      	ldrpl	r1, [pc, #168]	; (22434 <hexdump_line_print+0xc4>)
   2238a:	f7ff ff33 	bl	221f4 <print_formatted>
{
   2238e:	2500      	movs	r5, #0
		print_formatted(log_output, " ");
   22390:	f8df 90a8 	ldr.w	r9, [pc, #168]	; 2243c <hexdump_line_print+0xcc>
	for (int i = 0; i < prefix_offset; i++) {
   22394:	4545      	cmp	r5, r8
   22396:	db2d      	blt.n	223f4 <hexdump_line_print+0x84>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
   22398:	2500      	movs	r5, #0
			print_formatted(log_output, "   ");
   2239a:	f8df 80a4 	ldr.w	r8, [pc, #164]	; 22440 <hexdump_line_print+0xd0>
			print_formatted(log_output, "%02x ", data[i]);
   2239e:	f8df 90a4 	ldr.w	r9, [pc, #164]	; 22444 <hexdump_line_print+0xd4>
			print_formatted(log_output, " ");
   223a2:	f8df a098 	ldr.w	sl, [pc, #152]	; 2243c <hexdump_line_print+0xcc>
		if (i < length) {
   223a6:	42bd      	cmp	r5, r7
   223a8:	d231      	bcs.n	2240e <hexdump_line_print+0x9e>
			print_formatted(log_output, "%02x ", data[i]);
   223aa:	5d72      	ldrb	r2, [r6, r5]
   223ac:	4649      	mov	r1, r9
   223ae:	4620      	mov	r0, r4
   223b0:	f7ff ff20 	bl	221f4 <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
   223b4:	3501      	adds	r5, #1
   223b6:	2d10      	cmp	r5, #16
   223b8:	d122      	bne.n	22400 <hexdump_line_print+0x90>
	print_formatted(log_output, "|");
   223ba:	491f      	ldr	r1, [pc, #124]	; (22438 <hexdump_line_print+0xc8>)
   223bc:	4620      	mov	r0, r4
   223be:	f7ff ff19 	bl	221f4 <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
   223c2:	2500      	movs	r5, #0
			print_formatted(log_output, " ");
   223c4:	f8df 8074 	ldr.w	r8, [pc, #116]	; 2243c <hexdump_line_print+0xcc>
			      isprint((int)c) ? c : '.');
   223c8:	f8df 907c 	ldr.w	r9, [pc, #124]	; 22448 <hexdump_line_print+0xd8>
			print_formatted(log_output, "%c",
   223cc:	f8df a07c 	ldr.w	sl, [pc, #124]	; 2244c <hexdump_line_print+0xdc>
		if (i < length) {
   223d0:	42af      	cmp	r7, r5
   223d2:	d928      	bls.n	22426 <hexdump_line_print+0xb6>
			char c = (char)data[i];
   223d4:	5d72      	ldrb	r2, [r6, r5]
			print_formatted(log_output, "%c",
   223d6:	4651      	mov	r1, sl
   223d8:	f812 3009 	ldrb.w	r3, [r2, r9]
   223dc:	4620      	mov	r0, r4
   223de:	f013 0f97 	tst.w	r3, #151	; 0x97
   223e2:	bf08      	it	eq
   223e4:	222e      	moveq	r2, #46	; 0x2e
   223e6:	f7ff ff05 	bl	221f4 <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
   223ea:	3501      	adds	r5, #1
   223ec:	2d10      	cmp	r5, #16
   223ee:	d113      	bne.n	22418 <hexdump_line_print+0xa8>
}
   223f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		print_formatted(log_output, " ");
   223f4:	4649      	mov	r1, r9
   223f6:	4620      	mov	r0, r4
   223f8:	f7ff fefc 	bl	221f4 <print_formatted>
	for (int i = 0; i < prefix_offset; i++) {
   223fc:	3501      	adds	r5, #1
   223fe:	e7c9      	b.n	22394 <hexdump_line_print+0x24>
		if (i > 0 && !(i % 8)) {
   22400:	076a      	lsls	r2, r5, #29
   22402:	d1d0      	bne.n	223a6 <hexdump_line_print+0x36>
			print_formatted(log_output, " ");
   22404:	4651      	mov	r1, sl
   22406:	4620      	mov	r0, r4
   22408:	f7ff fef4 	bl	221f4 <print_formatted>
   2240c:	e7cb      	b.n	223a6 <hexdump_line_print+0x36>
			print_formatted(log_output, "   ");
   2240e:	4641      	mov	r1, r8
   22410:	4620      	mov	r0, r4
   22412:	f7ff feef 	bl	221f4 <print_formatted>
   22416:	e7cd      	b.n	223b4 <hexdump_line_print+0x44>
		if (i > 0 && !(i % 8)) {
   22418:	076b      	lsls	r3, r5, #29
   2241a:	d1d9      	bne.n	223d0 <hexdump_line_print+0x60>
			print_formatted(log_output, " ");
   2241c:	4641      	mov	r1, r8
   2241e:	4620      	mov	r0, r4
   22420:	f7ff fee8 	bl	221f4 <print_formatted>
   22424:	e7d4      	b.n	223d0 <hexdump_line_print+0x60>
			print_formatted(log_output, " ");
   22426:	4641      	mov	r1, r8
   22428:	4620      	mov	r0, r4
   2242a:	f7ff fee3 	bl	221f4 <print_formatted>
   2242e:	e7dc      	b.n	223ea <hexdump_line_print+0x7a>
   22430:	0004a298 	.word	0x0004a298
   22434:	00048510 	.word	0x00048510
   22438:	000483f7 	.word	0x000483f7
   2243c:	000483f5 	.word	0x000483f5
   22440:	000483f3 	.word	0x000483f3
   22444:	000483ed 	.word	0x000483ed
   22448:	0004d857 	.word	0x0004d857
   2244c:	00048a52 	.word	0x00048a52

00022450 <out_func>:
{
   22450:	b538      	push	{r3, r4, r5, lr}
	if (out_ctx->control_block->offset == out_ctx->size) {
   22452:	684b      	ldr	r3, [r1, #4]
{
   22454:	4605      	mov	r5, r0
	if (out_ctx->control_block->offset == out_ctx->size) {
   22456:	681a      	ldr	r2, [r3, #0]
   22458:	68cb      	ldr	r3, [r1, #12]
{
   2245a:	460c      	mov	r4, r1
	if (out_ctx->control_block->offset == out_ctx->size) {
   2245c:	429a      	cmp	r2, r3
   2245e:	d102      	bne.n	22466 <out_func+0x16>
		log_output_flush(out_ctx);
   22460:	4608      	mov	r0, r1
   22462:	f01e fd4a 	bl	40efa <log_output_flush>
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
   22466:	6863      	ldr	r3, [r4, #4]
   22468:	e8d3 2fef 	ldaex	r2, [r3]
   2246c:	1c51      	adds	r1, r2, #1
   2246e:	e8c3 1fe0 	stlex	r0, r1, [r3]
   22472:	2800      	cmp	r0, #0
   22474:	d1f8      	bne.n	22468 <out_func+0x18>
	out_ctx->buf[idx] = (u8_t)c;
   22476:	68a3      	ldr	r3, [r4, #8]
   22478:	549d      	strb	r5, [r3, r2]
	__ASSERT_NO_MSG(out_ctx->control_block->offset <= out_ctx->size);
   2247a:	6863      	ldr	r3, [r4, #4]
   2247c:	681a      	ldr	r2, [r3, #0]
   2247e:	68e3      	ldr	r3, [r4, #12]
   22480:	429a      	cmp	r2, r3
   22482:	d909      	bls.n	22498 <out_func+0x48>
   22484:	4905      	ldr	r1, [pc, #20]	; (2249c <out_func+0x4c>)
   22486:	4806      	ldr	r0, [pc, #24]	; (224a0 <out_func+0x50>)
   22488:	2378      	movs	r3, #120	; 0x78
   2248a:	4a06      	ldr	r2, [pc, #24]	; (224a4 <out_func+0x54>)
   2248c:	f01e f8b9 	bl	40602 <printk>
   22490:	2178      	movs	r1, #120	; 0x78
   22492:	4804      	ldr	r0, [pc, #16]	; (224a4 <out_func+0x54>)
   22494:	f01e f978 	bl	40788 <assert_post_action>
}
   22498:	2000      	movs	r0, #0
   2249a:	bd38      	pop	{r3, r4, r5, pc}
   2249c:	0004843b 	.word	0x0004843b
   224a0:	0004764f 	.word	0x0004764f
   224a4:	0004840c 	.word	0x0004840c

000224a8 <log_output_msg_process>:

void log_output_msg_process(const struct log_output *log_output,
			    struct log_msg *msg,
			    u32_t flags)
{
   224a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return msg->hdr.ids.level;
   224ac:	7a8b      	ldrb	r3, [r1, #10]
   224ae:	4617      	mov	r7, r2
		log_output_msg_syst_process(log_output, msg, flags);
		return;
	}

	prefix_offset = raw_string ?
			0 : prefix_print(log_output, flags, std_msg, timestamp,
   224b0:	f013 0607 	ands.w	r6, r3, #7
{
   224b4:	b08a      	sub	sp, #40	; 0x28
   224b6:	4604      	mov	r4, r0
   224b8:	460d      	mov	r5, r1
	return  (msg->hdr.params.generic.type == LOG_MSG_TYPE_STD);
   224ba:	7a0a      	ldrb	r2, [r1, #8]
			0 : prefix_print(log_output, flags, std_msg, timestamp,
   224bc:	d01d      	beq.n	224fa <log_output_msg_process+0x52>
   224be:	43d2      	mvns	r2, r2
	return msg->hdr.ids.source_id;
   224c0:	8949      	ldrh	r1, [r1, #10]
   224c2:	f3c3 03c2 	ubfx	r3, r3, #3, #3
   224c6:	0989      	lsrs	r1, r1, #6
   224c8:	9102      	str	r1, [sp, #8]
   224ca:	e9cd 6300 	strd	r6, r3, [sp]
   224ce:	f002 0201 	and.w	r2, r2, #1
   224d2:	68eb      	ldr	r3, [r5, #12]
   224d4:	4639      	mov	r1, r7
   224d6:	f7ff fe9f 	bl	22218 <prefix_print>
   224da:	4681      	mov	r9, r0
	return  (msg->hdr.params.generic.type == LOG_MSG_TYPE_STD);
   224dc:	7a2b      	ldrb	r3, [r5, #8]
					 level, domain_id, source_id);

	if (log_msg_is_std(msg)) {
   224de:	07da      	lsls	r2, r3, #31
   224e0:	d40d      	bmi.n	224fe <log_output_msg_process+0x56>
		std_print(msg, log_output);
   224e2:	4621      	mov	r1, r4
   224e4:	4628      	mov	r0, r5
   224e6:	f01e fbab 	bl	40c40 <std_print>
		raw_string_print(msg, log_output);
	} else {
		hexdump_print(msg, log_output, prefix_offset, flags);
	}

	if (!raw_string) {
   224ea:	2e00      	cmp	r6, #0
   224ec:	d039      	beq.n	22562 <log_output_msg_process+0xba>
		postfix_print(log_output, flags, level);
   224ee:	4632      	mov	r2, r6
   224f0:	4639      	mov	r1, r7
   224f2:	4620      	mov	r0, r4
   224f4:	f7ff ff1e 	bl	22334 <postfix_print>
   224f8:	e033      	b.n	22562 <log_output_msg_process+0xba>
			0 : prefix_print(log_output, flags, std_msg, timestamp,
   224fa:	46b1      	mov	r9, r6
   224fc:	e7ee      	b.n	224dc <log_output_msg_process+0x34>
	} else if (raw_string) {
   224fe:	2e00      	cmp	r6, #0
   22500:	d135      	bne.n	2256e <log_output_msg_process+0xc6>
	__ASSERT_NO_MSG(log_output->size);
   22502:	68e3      	ldr	r3, [r4, #12]
   22504:	b95b      	cbnz	r3, 2251e <log_output_msg_process+0x76>
   22506:	492a      	ldr	r1, [pc, #168]	; (225b0 <log_output_msg_process+0x108>)
   22508:	482a      	ldr	r0, [pc, #168]	; (225b4 <log_output_msg_process+0x10c>)
   2250a:	f240 13b9 	movw	r3, #441	; 0x1b9
   2250e:	4a2a      	ldr	r2, [pc, #168]	; (225b8 <log_output_msg_process+0x110>)
   22510:	f01e f877 	bl	40602 <printk>
   22514:	f240 11b9 	movw	r1, #441	; 0x1b9
   22518:	4827      	ldr	r0, [pc, #156]	; (225b8 <log_output_msg_process+0x110>)
   2251a:	f01e f935 	bl	40788 <assert_post_action>
			0 : prefix_print(log_output, flags, std_msg, timestamp,
   2251e:	2600      	movs	r6, #0
   22520:	4637      	mov	r7, r6
		length = log_output->size;
   22522:	68e3      	ldr	r3, [r4, #12]
		log_msg_hexdump_data_get(msg, log_output->buf, &length, offset);
   22524:	aa06      	add	r2, sp, #24
		length = log_output->size;
   22526:	9306      	str	r3, [sp, #24]
		log_msg_hexdump_data_get(msg, log_output->buf, &length, offset);
   22528:	68a1      	ldr	r1, [r4, #8]
   2252a:	463b      	mov	r3, r7
   2252c:	4628      	mov	r0, r5
   2252e:	f01e fb73 	bl	40c18 <log_msg_hexdump_data_get>
		log_output->control_block->offset = length;
   22532:	9a06      	ldr	r2, [sp, #24]
   22534:	6863      	ldr	r3, [r4, #4]
   22536:	601a      	str	r2, [r3, #0]
		if (length != 0) {
   22538:	b13a      	cbz	r2, 2254a <log_output_msg_process+0xa2>
			eol = (log_output->buf[length - 1] == '\n');
   2253a:	68a3      	ldr	r3, [r4, #8]
   2253c:	4413      	add	r3, r2
   2253e:	f813 6c01 	ldrb.w	r6, [r3, #-1]
   22542:	f1a6 030a 	sub.w	r3, r6, #10
   22546:	425e      	negs	r6, r3
   22548:	415e      	adcs	r6, r3
		log_output_flush(log_output);
   2254a:	4620      	mov	r0, r4
   2254c:	f01e fcd5 	bl	40efa <log_output_flush>
		offset += length;
   22550:	9b06      	ldr	r3, [sp, #24]
   22552:	441f      	add	r7, r3
	} while (length > 0);
   22554:	2b00      	cmp	r3, #0
   22556:	d1e4      	bne.n	22522 <log_output_msg_process+0x7a>
	if (eol) {
   22558:	b11e      	cbz	r6, 22562 <log_output_msg_process+0xba>
		print_formatted(log_output, "\r");
   2255a:	4918      	ldr	r1, [pc, #96]	; (225bc <log_output_msg_process+0x114>)
   2255c:	4620      	mov	r0, r4
   2255e:	f7ff fe49 	bl	221f4 <print_formatted>
	}

	log_output_flush(log_output);
   22562:	4620      	mov	r0, r4
   22564:	f01e fcc9 	bl	40efa <log_output_flush>
}
   22568:	b00a      	add	sp, #40	; 0x28
   2256a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	print_formatted(log_output, "%s", log_msg_str_get(msg));
   2256e:	4628      	mov	r0, r5
   22570:	f01e fb50 	bl	40c14 <log_msg_str_get>
   22574:	4912      	ldr	r1, [pc, #72]	; (225c0 <log_output_msg_process+0x118>)
   22576:	4602      	mov	r2, r0
   22578:	4620      	mov	r0, r4
   2257a:	f7ff fe3b 	bl	221f4 <print_formatted>
	u32_t offset = 0U;
   2257e:	f04f 0800 	mov.w	r8, #0
		length = sizeof(buf);
   22582:	f04f 0a10 	mov.w	sl, #16
		log_msg_hexdump_data_get(msg, buf, &length, offset);
   22586:	aa05      	add	r2, sp, #20
   22588:	4643      	mov	r3, r8
   2258a:	a906      	add	r1, sp, #24
   2258c:	4628      	mov	r0, r5
		length = sizeof(buf);
   2258e:	f8cd a014 	str.w	sl, [sp, #20]
		log_msg_hexdump_data_get(msg, buf, &length, offset);
   22592:	f01e fb41 	bl	40c18 <log_msg_hexdump_data_get>
		if (length) {
   22596:	9a05      	ldr	r2, [sp, #20]
   22598:	2a00      	cmp	r2, #0
   2259a:	d0a8      	beq.n	224ee <log_output_msg_process+0x46>
			hexdump_line_print(log_output, buf, length,
   2259c:	464b      	mov	r3, r9
   2259e:	9700      	str	r7, [sp, #0]
   225a0:	a906      	add	r1, sp, #24
   225a2:	4620      	mov	r0, r4
   225a4:	f7ff fee4 	bl	22370 <hexdump_line_print>
			offset += length;
   225a8:	9b05      	ldr	r3, [sp, #20]
   225aa:	4498      	add	r8, r3
   225ac:	e7eb      	b.n	22586 <log_output_msg_process+0xde>
   225ae:	bf00      	nop
   225b0:	000483f9 	.word	0x000483f9
   225b4:	0004764f 	.word	0x0004764f
   225b8:	0004840c 	.word	0x0004840c
   225bc:	0004840a 	.word	0x0004840a
   225c0:	00047a4a 	.word	0x00047a4a

000225c4 <log_output_dropped_process>:
	postfix_print(log_output, flags, level);
	log_output_flush(log_output);
}

void log_output_dropped_process(const struct log_output *log_output, u32_t cnt)
{
   225c4:	b573      	push	{r0, r1, r4, r5, r6, lr}
	int len;
	static const char prefix[] = DROPPED_COLOR_PREFIX "--- ";
	static const char postfix[] =
			" messages dropped ---\r\n" DROPPED_COLOR_POSTFIX;
	log_output_func_t outf = log_output->func;
	struct device *dev = (struct device *)log_output->control_block->ctx;
   225c6:	e9d0 4300 	ldrd	r4, r3, [r0]
   225ca:	685d      	ldr	r5, [r3, #4]

	cnt = MIN(cnt, 9999);
	len = snprintf(buf, sizeof(buf), "%d", cnt);
   225cc:	f242 730f 	movw	r3, #9999	; 0x270f
   225d0:	428b      	cmp	r3, r1
   225d2:	bf28      	it	cs
   225d4:	460b      	movcs	r3, r1
   225d6:	4a0d      	ldr	r2, [pc, #52]	; (2260c <log_output_dropped_process+0x48>)
   225d8:	2105      	movs	r1, #5
   225da:	4668      	mov	r0, sp
   225dc:	f01c fed2 	bl	3f384 <sniprintf>
   225e0:	4606      	mov	r6, r0

	buffer_write(outf, (u8_t *)prefix, sizeof(prefix) - 1, dev);
   225e2:	462b      	mov	r3, r5
   225e4:	4620      	mov	r0, r4
   225e6:	2204      	movs	r2, #4
   225e8:	4909      	ldr	r1, [pc, #36]	; (22610 <log_output_dropped_process+0x4c>)
   225ea:	f01e fb1c 	bl	40c26 <buffer_write>
	buffer_write(outf, buf, len, dev);
   225ee:	462b      	mov	r3, r5
   225f0:	4632      	mov	r2, r6
   225f2:	4669      	mov	r1, sp
   225f4:	4620      	mov	r0, r4
   225f6:	f01e fb16 	bl	40c26 <buffer_write>
	buffer_write(outf, (u8_t *)postfix, sizeof(postfix) - 1, dev);
   225fa:	462b      	mov	r3, r5
   225fc:	2217      	movs	r2, #23
   225fe:	4905      	ldr	r1, [pc, #20]	; (22614 <log_output_dropped_process+0x50>)
   22600:	4620      	mov	r0, r4
   22602:	f01e fb10 	bl	40c26 <buffer_write>
}
   22606:	b002      	add	sp, #8
   22608:	bd70      	pop	{r4, r5, r6, pc}
   2260a:	bf00      	nop
   2260c:	0004cad4 	.word	0x0004cad4
   22610:	00048483 	.word	0x00048483
   22614:	0004846b 	.word	0x0004846b

00022618 <log_output_timestamp_freq_set>:

void log_output_timestamp_freq_set(u32_t frequency)
{
	timestamp_div = 1U;
   22618:	2301      	movs	r3, #1
	/* There is no point to have frequency higher than 1MHz (ns are not
	 * printed) and too high frequency leads to overflows in calculations.
	 */
	while (frequency > 1000000) {
   2261a:	2100      	movs	r1, #0
	timestamp_div = 1U;
   2261c:	4a07      	ldr	r2, [pc, #28]	; (2263c <log_output_timestamp_freq_set+0x24>)
{
   2261e:	b510      	push	{r4, lr}
	while (frequency > 1000000) {
   22620:	4c07      	ldr	r4, [pc, #28]	; (22640 <log_output_timestamp_freq_set+0x28>)
	timestamp_div = 1U;
   22622:	6013      	str	r3, [r2, #0]
	while (frequency > 1000000) {
   22624:	42a0      	cmp	r0, r4
   22626:	d804      	bhi.n	22632 <log_output_timestamp_freq_set+0x1a>
   22628:	b101      	cbz	r1, 2262c <log_output_timestamp_freq_set+0x14>
   2262a:	6013      	str	r3, [r2, #0]
		frequency /= 2U;
		timestamp_div *= 2U;
	}

	freq = frequency;
   2262c:	4b05      	ldr	r3, [pc, #20]	; (22644 <log_output_timestamp_freq_set+0x2c>)
   2262e:	6018      	str	r0, [r3, #0]
}
   22630:	bd10      	pop	{r4, pc}
		frequency /= 2U;
   22632:	0840      	lsrs	r0, r0, #1
		timestamp_div *= 2U;
   22634:	005b      	lsls	r3, r3, #1
   22636:	2101      	movs	r1, #1
   22638:	e7f4      	b.n	22624 <log_output_timestamp_freq_set+0xc>
   2263a:	bf00      	nop
   2263c:	20021f88 	.word	0x20021f88
   22640:	000f4240 	.word	0x000f4240
   22644:	20021f84 	.word	0x20021f84

00022648 <severity_lvl_get>:
}


static void severity_lvl_get(size_t idx, struct shell_static_entry *entry)
{
	entry->handler = NULL;
   22648:	2300      	movs	r3, #0
	entry->help  = NULL;
	entry->subcmd = &dsub_module_name;
	entry->syntax = (idx < ARRAY_SIZE(severity_lvls_sorted)) ?
					severity_lvls_sorted[idx] : NULL;
   2264a:	2804      	cmp	r0, #4
	entry->handler = NULL;
   2264c:	60cb      	str	r3, [r1, #12]
	entry->help  = NULL;
   2264e:	604b      	str	r3, [r1, #4]
					severity_lvls_sorted[idx] : NULL;
   22650:	bf98      	it	ls
   22652:	4b04      	ldrls	r3, [pc, #16]	; (22664 <severity_lvl_get+0x1c>)
	entry->subcmd = &dsub_module_name;
   22654:	4a04      	ldr	r2, [pc, #16]	; (22668 <severity_lvl_get+0x20>)
					severity_lvls_sorted[idx] : NULL;
   22656:	bf98      	it	ls
   22658:	f853 3020 	ldrls.w	r3, [r3, r0, lsl #2]
	entry->subcmd = &dsub_module_name;
   2265c:	608a      	str	r2, [r1, #8]
	entry->syntax = (idx < ARRAY_SIZE(severity_lvls_sorted)) ?
   2265e:	600b      	str	r3, [r1, #0]
}
   22660:	4770      	bx	lr
   22662:	bf00      	nop
   22664:	000462d0 	.word	0x000462d0
   22668:	000462ac 	.word	0x000462ac

0002266c <backend_name_get>:
	SHELL_SUBCMD_SET_END
);

static void backend_name_get(size_t idx, struct shell_static_entry *entry)
{
	entry->handler = NULL;
   2266c:	2200      	movs	r2, #0
	entry->help  = NULL;
	entry->subcmd = &sub_log_backend;
   2266e:	4b08      	ldr	r3, [pc, #32]	; (22690 <backend_name_get+0x24>)
	entry->syntax  = NULL;
   22670:	600a      	str	r2, [r1, #0]
	entry->handler = NULL;
   22672:	60ca      	str	r2, [r1, #12]
	entry->help  = NULL;
   22674:	604a      	str	r2, [r1, #4]
	entry->subcmd = &sub_log_backend;
   22676:	608b      	str	r3, [r1, #8]
	return __log_backends_end - __log_backends_start;
   22678:	4a06      	ldr	r2, [pc, #24]	; (22694 <backend_name_get+0x28>)
   2267a:	4b07      	ldr	r3, [pc, #28]	; (22698 <backend_name_get+0x2c>)
   2267c:	1ad2      	subs	r2, r2, r3

	if (idx < log_backend_count_get()) {
   2267e:	ebb0 1f22 	cmp.w	r0, r2, asr #4
		const struct log_backend *backend = log_backend_get(idx);

		entry->syntax = backend->name;
   22682:	bf3e      	ittt	cc
   22684:	eb03 1300 	addcc.w	r3, r3, r0, lsl #4
   22688:	689b      	ldrcc	r3, [r3, #8]
   2268a:	600b      	strcc	r3, [r1, #0]
	}
}
   2268c:	4770      	bx	lr
   2268e:	bf00      	nop
   22690:	00046410 	.word	0x00046410
   22694:	000460d0 	.word	0x000460d0
   22698:	000460c0 	.word	0x000460c0

0002269c <cmd_log_backends_list>:
{
   2269c:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   226a0:	4607      	mov	r7, r0
	for (int i = 0; i < backend_count; i++) {
   226a2:	2600      	movs	r6, #0
   226a4:	4c10      	ldr	r4, [pc, #64]	; (226e8 <cmd_log_backends_list+0x4c>)
   226a6:	4d11      	ldr	r5, [pc, #68]	; (226ec <cmd_log_backends_list+0x50>)
		shell_fprintf(shell, SHELL_NORMAL,
   226a8:	f8df 8044 	ldr.w	r8, [pc, #68]	; 226f0 <cmd_log_backends_list+0x54>
   226ac:	1b2d      	subs	r5, r5, r4
   226ae:	f8df 9044 	ldr.w	r9, [pc, #68]	; 226f4 <cmd_log_backends_list+0x58>
   226b2:	f8df a044 	ldr.w	sl, [pc, #68]	; 226f8 <cmd_log_backends_list+0x5c>
   226b6:	112d      	asrs	r5, r5, #4
	for (int i = 0; i < backend_count; i++) {
   226b8:	42ae      	cmp	r6, r5
   226ba:	db03      	blt.n	226c4 <cmd_log_backends_list+0x28>
}
   226bc:	2000      	movs	r0, #0
   226be:	b002      	add	sp, #8
   226c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			      backend->cb->active ? "enabled" : "disabled",
   226c4:	6862      	ldr	r2, [r4, #4]
		shell_fprintf(shell, SHELL_NORMAL,
   226c6:	2100      	movs	r1, #0
   226c8:	7953      	ldrb	r3, [r2, #5]
   226ca:	7912      	ldrb	r2, [r2, #4]
   226cc:	2b00      	cmp	r3, #0
   226ce:	bf14      	ite	ne
   226d0:	4643      	movne	r3, r8
   226d2:	464b      	moveq	r3, r9
   226d4:	4638      	mov	r0, r7
   226d6:	e9cd 3200 	strd	r3, r2, [sp]
   226da:	68a3      	ldr	r3, [r4, #8]
   226dc:	4652      	mov	r2, sl
   226de:	f001 f89b 	bl	23818 <shell_fprintf>
	for (int i = 0; i < backend_count; i++) {
   226e2:	3601      	adds	r6, #1
   226e4:	3410      	adds	r4, #16
   226e6:	e7e7      	b.n	226b8 <cmd_log_backends_list+0x1c>
   226e8:	000460c0 	.word	0x000460c0
   226ec:	000460d0 	.word	0x000460d0
   226f0:	000484e1 	.word	0x000484e1
   226f4:	000484e9 	.word	0x000484e9
   226f8:	000484f2 	.word	0x000484f2

000226fc <module_name_get>:
	entry->handler = NULL;
   226fc:	2300      	movs	r3, #0
	entry->subcmd = &dsub_module_name;
   226fe:	4a06      	ldr	r2, [pc, #24]	; (22718 <module_name_get+0x1c>)
{
   22700:	b510      	push	{r4, lr}
   22702:	460c      	mov	r4, r1
	entry->handler = NULL;
   22704:	60cb      	str	r3, [r1, #12]
	entry->help  = NULL;
   22706:	604b      	str	r3, [r1, #4]
	entry->subcmd = &dsub_module_name;
   22708:	608a      	str	r2, [r1, #8]
	entry->syntax = log_source_name_get(CONFIG_LOG_DOMAIN_ID, idx);
   2270a:	4601      	mov	r1, r0
   2270c:	4618      	mov	r0, r3
   2270e:	f7ff f985 	bl	21a1c <log_source_name_get>
   22712:	6020      	str	r0, [r4, #0]
}
   22714:	bd10      	pop	{r4, pc}
   22716:	bf00      	nop
   22718:	000462ac 	.word	0x000462ac

0002271c <log_status>:
{
   2271c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	return ((u8_t *)data - (u8_t *)__log_const_start)/
   22720:	4b28      	ldr	r3, [pc, #160]	; (227c4 <log_status+0xa8>)
   22722:	4d29      	ldr	r5, [pc, #164]	; (227c8 <log_status+0xac>)
   22724:	4606      	mov	r6, r0
   22726:	1aed      	subs	r5, r5, r3
   22728:	08ed      	lsrs	r5, r5, #3
 * @return True if backend is active, false otherwise.
 */
static inline bool log_backend_is_active(
				const struct log_backend *const backend)
{
	__ASSERT_NO_MSG(backend != NULL);
   2272a:	460f      	mov	r7, r1
   2272c:	b959      	cbnz	r1, 22746 <log_status+0x2a>
   2272e:	4927      	ldr	r1, [pc, #156]	; (227cc <log_status+0xb0>)
   22730:	4827      	ldr	r0, [pc, #156]	; (227d0 <log_status+0xb4>)
   22732:	f44f 7386 	mov.w	r3, #268	; 0x10c
   22736:	4a27      	ldr	r2, [pc, #156]	; (227d4 <log_status+0xb8>)
   22738:	f01d ff63 	bl	40602 <printk>
   2273c:	f44f 7186 	mov.w	r1, #268	; 0x10c
   22740:	4824      	ldr	r0, [pc, #144]	; (227d4 <log_status+0xb8>)
   22742:	f01e f821 	bl	40788 <assert_post_action>
	return backend->cb->active;
   22746:	687b      	ldr	r3, [r7, #4]
	if (!log_backend_is_active(backend)) {
   22748:	795b      	ldrb	r3, [r3, #5]
   2274a:	b923      	cbnz	r3, 22756 <log_status+0x3a>
		shell_warn(shell, "Logs are halted!");
   2274c:	4a22      	ldr	r2, [pc, #136]	; (227d8 <log_status+0xbc>)
   2274e:	2104      	movs	r1, #4
   22750:	4630      	mov	r0, r6
   22752:	f001 f861 	bl	23818 <shell_fprintf>
	shell_fprintf(shell, SHELL_NORMAL, "%-40s | current | built-in \r\n",
   22756:	4b21      	ldr	r3, [pc, #132]	; (227dc <log_status+0xc0>)
   22758:	4a21      	ldr	r2, [pc, #132]	; (227e0 <log_status+0xc4>)
   2275a:	2100      	movs	r1, #0
   2275c:	4630      	mov	r0, r6
   2275e:	f001 f85b 	bl	23818 <shell_fprintf>
	shell_fprintf(shell, SHELL_NORMAL,
   22762:	4a20      	ldr	r2, [pc, #128]	; (227e4 <log_status+0xc8>)
   22764:	2100      	movs	r1, #0
   22766:	4630      	mov	r0, r6
   22768:	f001 f856 	bl	23818 <shell_fprintf>
	for (i = 0U; i < modules_cnt; i++) {
   2276c:	2400      	movs	r4, #0
		shell_fprintf(shell, SHELL_NORMAL, "%-40s | %-7s | %s\r\n",
   2276e:	f8df 8078 	ldr.w	r8, [pc, #120]	; 227e8 <log_status+0xcc>
   22772:	f8df 9078 	ldr.w	r9, [pc, #120]	; 227ec <log_status+0xd0>
	for (i = 0U; i < modules_cnt; i++) {
   22776:	42ac      	cmp	r4, r5
   22778:	d103      	bne.n	22782 <log_status+0x66>
}
   2277a:	2000      	movs	r0, #0
   2277c:	b003      	add	sp, #12
   2277e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		dynamic_lvl = log_filter_get(backend, CONFIG_LOG_DOMAIN_ID,
   22782:	4622      	mov	r2, r4
   22784:	2301      	movs	r3, #1
   22786:	2100      	movs	r1, #0
   22788:	4638      	mov	r0, r7
   2278a:	f7ff fa63 	bl	21c54 <log_filter_get>
		compiled_lvl = log_filter_get(backend, CONFIG_LOG_DOMAIN_ID,
   2278e:	2300      	movs	r3, #0
   22790:	4622      	mov	r2, r4
   22792:	4619      	mov	r1, r3
		dynamic_lvl = log_filter_get(backend, CONFIG_LOG_DOMAIN_ID,
   22794:	4682      	mov	sl, r0
		compiled_lvl = log_filter_get(backend, CONFIG_LOG_DOMAIN_ID,
   22796:	4638      	mov	r0, r7
   22798:	f7ff fa5c 	bl	21c54 <log_filter_get>
   2279c:	4683      	mov	fp, r0
		shell_fprintf(shell, SHELL_NORMAL, "%-40s | %-7s | %s\r\n",
   2279e:	4621      	mov	r1, r4
   227a0:	2000      	movs	r0, #0
   227a2:	f7ff f93b 	bl	21a1c <log_source_name_get>
   227a6:	f858 302b 	ldr.w	r3, [r8, fp, lsl #2]
   227aa:	464a      	mov	r2, r9
   227ac:	9301      	str	r3, [sp, #4]
   227ae:	f858 302a 	ldr.w	r3, [r8, sl, lsl #2]
   227b2:	2100      	movs	r1, #0
   227b4:	9300      	str	r3, [sp, #0]
   227b6:	4603      	mov	r3, r0
   227b8:	4630      	mov	r0, r6
   227ba:	f001 f82d 	bl	23818 <shell_fprintf>
	for (i = 0U; i < modules_cnt; i++) {
   227be:	3401      	adds	r4, #1
   227c0:	e7d9      	b.n	22776 <log_status+0x5a>
   227c2:	bf00      	nop
   227c4:	00045f08 	.word	0x00045f08
   227c8:	000460c0 	.word	0x000460c0
   227cc:	00048298 	.word	0x00048298
   227d0:	0004764f 	.word	0x0004764f
   227d4:	00048267 	.word	0x00048267
   227d8:	0004856e 	.word	0x0004856e
   227dc:	00048580 	.word	0x00048580
   227e0:	0004858c 	.word	0x0004858c
   227e4:	000485aa 	.word	0x000485aa
   227e8:	000462bc 	.word	0x000462bc
   227ec:	000485e7 	.word	0x000485e7

000227f0 <log_backend_deactivate>:
{
   227f0:	b510      	push	{r4, lr}
	__ASSERT_NO_MSG(backend != NULL);
   227f2:	4604      	mov	r4, r0
   227f4:	b948      	cbnz	r0, 2280a <log_backend_deactivate+0x1a>
   227f6:	4907      	ldr	r1, [pc, #28]	; (22814 <log_backend_deactivate+0x24>)
   227f8:	4807      	ldr	r0, [pc, #28]	; (22818 <log_backend_deactivate+0x28>)
   227fa:	23fe      	movs	r3, #254	; 0xfe
   227fc:	4a07      	ldr	r2, [pc, #28]	; (2281c <log_backend_deactivate+0x2c>)
   227fe:	f01d ff00 	bl	40602 <printk>
   22802:	21fe      	movs	r1, #254	; 0xfe
   22804:	4805      	ldr	r0, [pc, #20]	; (2281c <log_backend_deactivate+0x2c>)
   22806:	f01d ffbf 	bl	40788 <assert_post_action>
	backend->cb->active = false;
   2280a:	2200      	movs	r2, #0
   2280c:	6863      	ldr	r3, [r4, #4]
   2280e:	715a      	strb	r2, [r3, #5]
}
   22810:	bd10      	pop	{r4, pc}
   22812:	bf00      	nop
   22814:	00048298 	.word	0x00048298
   22818:	0004764f 	.word	0x0004764f
   2281c:	00048267 	.word	0x00048267

00022820 <log_backend_activate>:
{
   22820:	b538      	push	{r3, r4, r5, lr}
   22822:	460d      	mov	r5, r1
	__ASSERT_NO_MSG(backend != NULL);
   22824:	4604      	mov	r4, r0
   22826:	b948      	cbnz	r0, 2283c <log_backend_activate+0x1c>
   22828:	4907      	ldr	r1, [pc, #28]	; (22848 <log_backend_activate+0x28>)
   2282a:	4808      	ldr	r0, [pc, #32]	; (2284c <log_backend_activate+0x2c>)
   2282c:	23f1      	movs	r3, #241	; 0xf1
   2282e:	4a08      	ldr	r2, [pc, #32]	; (22850 <log_backend_activate+0x30>)
   22830:	f01d fee7 	bl	40602 <printk>
   22834:	21f1      	movs	r1, #241	; 0xf1
   22836:	4806      	ldr	r0, [pc, #24]	; (22850 <log_backend_activate+0x30>)
   22838:	f01d ffa6 	bl	40788 <assert_post_action>
	backend->cb->active = true;
   2283c:	2201      	movs	r2, #1
	backend->cb->ctx = ctx;
   2283e:	6863      	ldr	r3, [r4, #4]
   22840:	601d      	str	r5, [r3, #0]
	backend->cb->active = true;
   22842:	715a      	strb	r2, [r3, #5]
}
   22844:	bd38      	pop	{r3, r4, r5, pc}
   22846:	bf00      	nop
   22848:	00048298 	.word	0x00048298
   2284c:	0004764f 	.word	0x0004764f
   22850:	00048267 	.word	0x00048267

00022854 <shell_backend_cmd_execute>:
{
   22854:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	char const *name = argv[-1];
   22858:	f852 7c04 	ldr.w	r7, [r2, #-4]
{
   2285c:	b085      	sub	sp, #20
   2285e:	4680      	mov	r8, r0
	size_t slen = strlen(name);
   22860:	4638      	mov	r0, r7
{
   22862:	4691      	mov	r9, r2
   22864:	9302      	str	r3, [sp, #8]
   22866:	468b      	mov	fp, r1
	size_t slen = strlen(name);
   22868:	f7fa fc56 	bl	1d118 <strlen>
	return __log_backends_end - __log_backends_start;
   2286c:	4c15      	ldr	r4, [pc, #84]	; (228c4 <shell_backend_cmd_execute+0x70>)
   2286e:	4603      	mov	r3, r0
	for (int i = 0; i < log_backend_count_get(); i++) {
   22870:	2500      	movs	r5, #0
   22872:	46a2      	mov	sl, r4
   22874:	4a14      	ldr	r2, [pc, #80]	; (228c8 <shell_backend_cmd_execute+0x74>)
   22876:	1b12      	subs	r2, r2, r4
   22878:	1112      	asrs	r2, r2, #4
   2287a:	9201      	str	r2, [sp, #4]
   2287c:	9a01      	ldr	r2, [sp, #4]
   2287e:	4295      	cmp	r5, r2
   22880:	db08      	blt.n	22894 <shell_backend_cmd_execute+0x40>
		shell_error(shell, "Invalid backend: %s", name);
   22882:	463b      	mov	r3, r7
   22884:	4a11      	ldr	r2, [pc, #68]	; (228cc <shell_backend_cmd_execute+0x78>)
   22886:	2102      	movs	r1, #2
   22888:	4640      	mov	r0, r8
   2288a:	f000 ffc5 	bl	23818 <shell_fprintf>
		return -ENOEXEC;
   2288e:	f06f 0607 	mvn.w	r6, #7
   22892:	e012      	b.n	228ba <shell_backend_cmd_execute+0x66>
		if (strncmp(name, backend->name, slen) == 0) {
   22894:	68a1      	ldr	r1, [r4, #8]
   22896:	461a      	mov	r2, r3
   22898:	4638      	mov	r0, r7
   2289a:	9303      	str	r3, [sp, #12]
   2289c:	f022 fc60 	bl	45160 <strncmp>
   228a0:	3410      	adds	r4, #16
   228a2:	4606      	mov	r6, r0
   228a4:	b110      	cbz	r0, 228ac <shell_backend_cmd_execute+0x58>
	for (int i = 0; i < log_backend_count_get(); i++) {
   228a6:	3501      	adds	r5, #1
   228a8:	9b03      	ldr	r3, [sp, #12]
   228aa:	e7e7      	b.n	2287c <shell_backend_cmd_execute+0x28>
		func(shell, backend, argc, argv);
   228ac:	464b      	mov	r3, r9
   228ae:	465a      	mov	r2, fp
   228b0:	eb0a 1105 	add.w	r1, sl, r5, lsl #4
   228b4:	4640      	mov	r0, r8
   228b6:	9c02      	ldr	r4, [sp, #8]
   228b8:	47a0      	blx	r4
}
   228ba:	4630      	mov	r0, r6
   228bc:	b005      	add	sp, #20
   228be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   228c2:	bf00      	nop
   228c4:	000460c0 	.word	0x000460c0
   228c8:	000460d0 	.word	0x000460d0
   228cc:	000485fb 	.word	0x000485fb

000228d0 <cmd_log_backend_status>:
{
   228d0:	b508      	push	{r3, lr}
	shell_backend_cmd_execute(shell, argc, argv, log_status);
   228d2:	4b02      	ldr	r3, [pc, #8]	; (228dc <cmd_log_backend_status+0xc>)
   228d4:	f7ff ffbe 	bl	22854 <shell_backend_cmd_execute>
}
   228d8:	2000      	movs	r0, #0
   228da:	bd08      	pop	{r3, pc}
   228dc:	0002271d 	.word	0x0002271d

000228e0 <cmd_log_backend_halt>:
	return shell_backend_cmd_execute(shell, argc, argv, log_halt);
   228e0:	4b01      	ldr	r3, [pc, #4]	; (228e8 <cmd_log_backend_halt+0x8>)
   228e2:	f7ff bfb7 	b.w	22854 <shell_backend_cmd_execute>
   228e6:	bf00      	nop
   228e8:	00040f15 	.word	0x00040f15

000228ec <cmd_log_backend_go>:
	return shell_backend_cmd_execute(shell, argc, argv, log_go);
   228ec:	4b01      	ldr	r3, [pc, #4]	; (228f4 <cmd_log_backend_go+0x8>)
   228ee:	f7ff bfb1 	b.w	22854 <shell_backend_cmd_execute>
   228f2:	bf00      	nop
   228f4:	00040f21 	.word	0x00040f21

000228f8 <cmd_log_backend_enable>:
	return shell_backend_cmd_execute(shell, argc, argv, log_enable);
   228f8:	4b01      	ldr	r3, [pc, #4]	; (22900 <cmd_log_backend_enable+0x8>)
   228fa:	f7ff bfab 	b.w	22854 <shell_backend_cmd_execute>
   228fe:	bf00      	nop
   22900:	00022a01 	.word	0x00022a01

00022904 <cmd_log_backend_disable>:
	return shell_backend_cmd_execute(shell, argc, argv, log_disable);
   22904:	4b01      	ldr	r3, [pc, #4]	; (2290c <cmd_log_backend_disable+0x8>)
   22906:	f7ff bfa5 	b.w	22854 <shell_backend_cmd_execute>
   2290a:	bf00      	nop
   2290c:	00040fa3 	.word	0x00040fa3

00022910 <shell_state_precheck>:
	if (shell->log_backend->control_block->state
   22910:	69c3      	ldr	r3, [r0, #28]
{
   22912:	b510      	push	{r4, lr}
	if (shell->log_backend->control_block->state
   22914:	68db      	ldr	r3, [r3, #12]
   22916:	791c      	ldrb	r4, [r3, #4]
   22918:	b92c      	cbnz	r4, 22926 <shell_state_precheck+0x16>
		shell_error(shell, "Shell log backend not initialized.");
   2291a:	4a04      	ldr	r2, [pc, #16]	; (2292c <shell_state_precheck+0x1c>)
   2291c:	2102      	movs	r1, #2
   2291e:	f000 ff7b 	bl	23818 <shell_fprintf>
   22922:	4620      	mov	r0, r4
}
   22924:	bd10      	pop	{r4, pc}
	return true;
   22926:	2001      	movs	r0, #1
   22928:	e7fc      	b.n	22924 <shell_state_precheck+0x14>
   2292a:	bf00      	nop
   2292c:	00048610 	.word	0x00048610

00022930 <filters_set>:
{
   22930:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   22934:	461f      	mov	r7, r3
   22936:	4d2c      	ldr	r5, [pc, #176]	; (229e8 <filters_set+0xb8>)
   22938:	4b2c      	ldr	r3, [pc, #176]	; (229ec <filters_set+0xbc>)
	int cnt = all ? log_sources_count() : argc;
   2293a:	1e16      	subs	r6, r2, #0
   2293c:	eba5 0503 	sub.w	r5, r5, r3
   22940:	ea4f 05d5 	mov.w	r5, r5, lsr #3
   22944:	bf14      	ite	ne
   22946:	4633      	movne	r3, r6
   22948:	462b      	moveq	r3, r5
{
   2294a:	b085      	sub	sp, #20
	int cnt = all ? log_sources_count() : argc;
   2294c:	9303      	str	r3, [sp, #12]
	if (!backend->cb->active) {
   2294e:	684b      	ldr	r3, [r1, #4]
{
   22950:	4680      	mov	r8, r0
	if (!backend->cb->active) {
   22952:	795b      	ldrb	r3, [r3, #5]
{
   22954:	4689      	mov	r9, r1
	if (!backend->cb->active) {
   22956:	b91b      	cbnz	r3, 22960 <filters_set+0x30>
		shell_warn(shell, "Backend not active.");
   22958:	4a25      	ldr	r2, [pc, #148]	; (229f0 <filters_set+0xc0>)
   2295a:	2104      	movs	r1, #4
   2295c:	f000 ff5c 	bl	23818 <shell_fprintf>
	for (i = 0U; i < modules_cnt; i++) {
   22960:	2400      	movs	r4, #0
				shell_warn(shell, "%s: level set to %s.",
   22962:	f8df a098 	ldr.w	sl, [pc, #152]	; 229fc <filters_set+0xcc>
	for (i = 0; i < cnt; i++) {
   22966:	9b03      	ldr	r3, [sp, #12]
   22968:	429c      	cmp	r4, r3
   2296a:	db02      	blt.n	22972 <filters_set+0x42>
}
   2296c:	b005      	add	sp, #20
   2296e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		id = all ? i : module_id_get(argv[i]);
   22972:	b3be      	cbz	r6, 229e4 <filters_set+0xb4>
	for (i = 0U; i < modules_cnt; i++) {
   22974:	f04f 0b00 	mov.w	fp, #0
		id = all ? i : module_id_get(argv[i]);
   22978:	f857 3024 	ldr.w	r3, [r7, r4, lsl #2]
   2297c:	9302      	str	r3, [sp, #8]
	for (i = 0U; i < modules_cnt; i++) {
   2297e:	455d      	cmp	r5, fp
   22980:	d107      	bne.n	22992 <filters_set+0x62>
			shell_error(shell, "%s: unknown source name.", argv[i]);
   22982:	f857 3024 	ldr.w	r3, [r7, r4, lsl #2]
   22986:	4a1b      	ldr	r2, [pc, #108]	; (229f4 <filters_set+0xc4>)
   22988:	2102      	movs	r1, #2
   2298a:	4640      	mov	r0, r8
   2298c:	f000 ff44 	bl	23818 <shell_fprintf>
   22990:	e020      	b.n	229d4 <filters_set+0xa4>
		tmp_name = log_source_name_get(CONFIG_LOG_DOMAIN_ID, i);
   22992:	4659      	mov	r1, fp
   22994:	2000      	movs	r0, #0
   22996:	f7ff f841 	bl	21a1c <log_source_name_get>
		if (strncmp(tmp_name, name, 64) == 0) {
   2299a:	2240      	movs	r2, #64	; 0x40
   2299c:	9902      	ldr	r1, [sp, #8]
   2299e:	f022 fbdf 	bl	45160 <strncmp>
   229a2:	b9c8      	cbnz	r0, 229d8 <filters_set+0xa8>
			return i;
   229a4:	465a      	mov	r2, fp
	return z_impl_log_filter_set(backend, domain_id, src_id, level);
   229a6:	2100      	movs	r1, #0
   229a8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   229aa:	4648      	mov	r0, r9
   229ac:	f7ff f844 	bl	21a38 <z_impl_log_filter_set>
			if (set_lvl != level) {
   229b0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   229b2:	4683      	mov	fp, r0
   229b4:	4283      	cmp	r3, r0
   229b6:	d00d      	beq.n	229d4 <filters_set+0xa4>
						CONFIG_LOG_DOMAIN_ID, i) :
   229b8:	b98e      	cbnz	r6, 229de <filters_set+0xae>
					log_source_name_get(
   229ba:	4621      	mov	r1, r4
   229bc:	4630      	mov	r0, r6
   229be:	f7ff f82d 	bl	21a1c <log_source_name_get>
   229c2:	4603      	mov	r3, r0
				shell_warn(shell, "%s: level set to %s.",
   229c4:	f85a 202b 	ldr.w	r2, [sl, fp, lsl #2]
   229c8:	2104      	movs	r1, #4
   229ca:	9200      	str	r2, [sp, #0]
   229cc:	4640      	mov	r0, r8
   229ce:	4a0a      	ldr	r2, [pc, #40]	; (229f8 <filters_set+0xc8>)
   229d0:	f000 ff22 	bl	23818 <shell_fprintf>
	for (i = 0; i < cnt; i++) {
   229d4:	3401      	adds	r4, #1
   229d6:	e7c6      	b.n	22966 <filters_set+0x36>
	for (i = 0U; i < modules_cnt; i++) {
   229d8:	f10b 0b01 	add.w	fp, fp, #1
   229dc:	e7cf      	b.n	2297e <filters_set+0x4e>
						CONFIG_LOG_DOMAIN_ID, i) :
   229de:	f857 3024 	ldr.w	r3, [r7, r4, lsl #2]
   229e2:	e7ef      	b.n	229c4 <filters_set+0x94>
   229e4:	4622      	mov	r2, r4
   229e6:	e7de      	b.n	229a6 <filters_set+0x76>
   229e8:	000460c0 	.word	0x000460c0
   229ec:	00045f08 	.word	0x00045f08
   229f0:	00048513 	.word	0x00048513
   229f4:	0004853e 	.word	0x0004853e
   229f8:	00048528 	.word	0x00048528
   229fc:	000462bc 	.word	0x000462bc

00022a00 <log_enable>:
{
   22a00:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   22a04:	4607      	mov	r7, r0
   22a06:	4689      	mov	r9, r1
   22a08:	4692      	mov	sl, r2
   22a0a:	461e      	mov	r6, r3
	for (i = 0; i < ARRAY_SIZE(severity_lvls); i++) {
   22a0c:	2400      	movs	r4, #0
	severity_level = severity_level_get(argv[1]);
   22a0e:	f8d3 b004 	ldr.w	fp, [r3, #4]
	for (i = 0; i < ARRAY_SIZE(severity_lvls); i++) {
   22a12:	f8df 8048 	ldr.w	r8, [pc, #72]	; 22a5c <log_enable+0x5c>
		if (strncmp(str, severity_lvls[i], 4) == 0) {
   22a16:	2204      	movs	r2, #4
   22a18:	f858 1b04 	ldr.w	r1, [r8], #4
   22a1c:	4658      	mov	r0, fp
   22a1e:	f022 fb9f 	bl	45160 <strncmp>
   22a22:	4605      	mov	r5, r0
   22a24:	b170      	cbz	r0, 22a44 <log_enable+0x44>
	for (i = 0; i < ARRAY_SIZE(severity_lvls); i++) {
   22a26:	3401      	adds	r4, #1
   22a28:	2c05      	cmp	r4, #5
   22a2a:	d1f4      	bne.n	22a16 <log_enable+0x16>
		shell_error(shell, "Invalid severity: %s", argv[1]);
   22a2c:	6873      	ldr	r3, [r6, #4]
   22a2e:	4a0a      	ldr	r2, [pc, #40]	; (22a58 <log_enable+0x58>)
   22a30:	2102      	movs	r1, #2
   22a32:	4638      	mov	r0, r7
   22a34:	f000 fef0 	bl	23818 <shell_fprintf>
   22a38:	f06f 0507 	mvn.w	r5, #7
}
   22a3c:	4628      	mov	r0, r5
   22a3e:	b003      	add	sp, #12
   22a40:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	filters_set(shell, backend, argc - 2, &argv[2], severity_level);
   22a44:	9400      	str	r4, [sp, #0]
   22a46:	f106 0308 	add.w	r3, r6, #8
   22a4a:	f1aa 0202 	sub.w	r2, sl, #2
   22a4e:	4649      	mov	r1, r9
   22a50:	4638      	mov	r0, r7
   22a52:	f7ff ff6d 	bl	22930 <filters_set>
	return 0;
   22a56:	e7f1      	b.n	22a3c <log_enable+0x3c>
   22a58:	00048558 	.word	0x00048558
   22a5c:	000462bc 	.word	0x000462bc

00022a60 <kill_handler>:
		handler(shell);
	}
}

static void kill_handler(const struct shell *shell)
{
   22a60:	b538      	push	{r3, r4, r5, lr}
	__ASSERT_NO_MSG(shell);
   22a62:	4604      	mov	r4, r0
   22a64:	b958      	cbnz	r0, 22a7e <kill_handler+0x1e>
   22a66:	491a      	ldr	r1, [pc, #104]	; (22ad0 <kill_handler+0x70>)
   22a68:	481a      	ldr	r0, [pc, #104]	; (22ad4 <kill_handler+0x74>)
   22a6a:	f240 4356 	movw	r3, #1110	; 0x456
   22a6e:	4a1a      	ldr	r2, [pc, #104]	; (22ad8 <kill_handler+0x78>)
   22a70:	f01d fdc7 	bl	40602 <printk>
   22a74:	f240 4156 	movw	r1, #1110	; 0x456
   22a78:	4817      	ldr	r0, [pc, #92]	; (22ad8 <kill_handler+0x78>)
   22a7a:	f01d fe85 	bl	40788 <assert_post_action>
	__ASSERT_NO_MSG(shell->ctx && shell->iface);
   22a7e:	68a3      	ldr	r3, [r4, #8]
   22a80:	b10b      	cbz	r3, 22a86 <kill_handler+0x26>
   22a82:	6863      	ldr	r3, [r4, #4]
   22a84:	b95b      	cbnz	r3, 22a9e <kill_handler+0x3e>
   22a86:	4915      	ldr	r1, [pc, #84]	; (22adc <kill_handler+0x7c>)
   22a88:	4812      	ldr	r0, [pc, #72]	; (22ad4 <kill_handler+0x74>)
   22a8a:	f240 4357 	movw	r3, #1111	; 0x457
   22a8e:	4a12      	ldr	r2, [pc, #72]	; (22ad8 <kill_handler+0x78>)
   22a90:	f01d fdb7 	bl	40602 <printk>
   22a94:	f240 4157 	movw	r1, #1111	; 0x457
   22a98:	480f      	ldr	r0, [pc, #60]	; (22ad8 <kill_handler+0x78>)
   22a9a:	f01d fe75 	bl	40788 <assert_post_action>
	if (flag_processing_get(shell)) {
   22a9e:	68a3      	ldr	r3, [r4, #8]
	shell->ctx->internal.flags.echo = val ? 1 : 0;
}

static inline bool flag_processing_get(const struct shell *shell)
{
	return shell->ctx->internal.flags.processing == 1 ? true : false;
   22aa0:	f8d3 3258 	ldr.w	r3, [r3, #600]	; 0x258
   22aa4:	071b      	lsls	r3, r3, #28
   22aa6:	d40d      	bmi.n	22ac4 <kill_handler+0x64>
		shell_log_backend_disable(shell->log_backend);
   22aa8:	69e0      	ldr	r0, [r4, #28]
   22aaa:	f01e fe12 	bl	416d2 <shell_log_backend_disable>
	err = shell->iface->api->uninit(shell->iface);
   22aae:	6860      	ldr	r0, [r4, #4]
   22ab0:	6803      	ldr	r3, [r0, #0]
   22ab2:	685b      	ldr	r3, [r3, #4]
   22ab4:	4798      	blx	r3
	if (err != 0) {
   22ab6:	4605      	mov	r5, r0
   22ab8:	b920      	cbnz	r0, 22ac4 <kill_handler+0x64>
	shell_history_purge(shell->history);
   22aba:	68e0      	ldr	r0, [r4, #12]
   22abc:	f01e fdc9 	bl	41652 <shell_history_purge>
	shell->ctx->state = SHELL_STATE_UNINITIALIZED;
   22ac0:	68a3      	ldr	r3, [r4, #8]
   22ac2:	711d      	strb	r5, [r3, #4]
	return z_impl_k_current_get();
   22ac4:	f01a fcd8 	bl	3d478 <z_impl_k_current_get>
	(void)instance_uninit(shell);
	k_thread_abort(k_current_get());
}
   22ac8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_impl_k_thread_abort(thread);
   22acc:	f004 baec 	b.w	270a8 <z_impl_k_thread_abort>
   22ad0:	0004adfa 	.word	0x0004adfa
   22ad4:	0004764f 	.word	0x0004764f
   22ad8:	0004886c 	.word	0x0004886c
   22adc:	00048894 	.word	0x00048894

00022ae0 <history_handle>:
{
   22ae0:	b537      	push	{r0, r1, r2, r4, r5, lr}
	if (flag_history_exit_get(shell)) {
   22ae2:	6883      	ldr	r3, [r0, #8]
{
   22ae4:	4604      	mov	r4, r0
	shell->ctx->internal.flags.mode_delete = val ? 1 : 0;
}

static inline bool flag_history_exit_get(const struct shell *shell)
{
	return shell->ctx->internal.flags.history_exit == 1 ? true : false;
   22ae6:	f8d3 2258 	ldr.w	r2, [r3, #600]	; 0x258
   22aea:	460d      	mov	r5, r1
	if (flag_history_exit_get(shell)) {
   22aec:	0652      	lsls	r2, r2, #25
   22aee:	d508      	bpl.n	22b02 <history_handle+0x22>
}

static inline void flag_history_exit_set(const struct shell *shell, bool val)
{
	shell->ctx->internal.flags.history_exit = val ? 1 : 0;
   22af0:	f8b3 2258 	ldrh.w	r2, [r3, #600]	; 0x258
   22af4:	68c0      	ldr	r0, [r0, #12]
   22af6:	f36f 1286 	bfc	r2, #6, #1
   22afa:	f8a3 2258 	strh.w	r2, [r3, #600]	; 0x258
		shell_history_mode_exit(shell->history);
   22afe:	f01e fd7a 	bl	415f6 <shell_history_mode_exit>
	if (!shell_history_active(shell->history)) {
   22b02:	68e3      	ldr	r3, [r4, #12]
   22b04:	68db      	ldr	r3, [r3, #12]
   22b06:	b963      	cbnz	r3, 22b22 <history_handle+0x42>
		if (up) {
   22b08:	b39d      	cbz	r5, 22b72 <history_handle+0x92>
			u16_t cmd_len = shell_strlen(shell->ctx->cmd_buff);
   22b0a:	68a0      	ldr	r0, [r4, #8]
   22b0c:	3038      	adds	r0, #56	; 0x38
   22b0e:	f01e fa7a 	bl	41006 <shell_strlen>
			if (cmd_len) {
   22b12:	68a3      	ldr	r3, [r4, #8]
   22b14:	b378      	cbz	r0, 22b76 <history_handle+0x96>
__ssp_bos_icheck2_restrict(strcpy, char *, const char *)
   22b16:	f103 0138 	add.w	r1, r3, #56	; 0x38
   22b1a:	f503 709c 	add.w	r0, r3, #312	; 0x138
   22b1e:	f022 fb17 	bl	45150 <strcpy>
					 shell->ctx->cmd_buff, &len);
   22b22:	68a2      	ldr	r2, [r4, #8]
	history_mode = shell_history_get(shell->history, up,
   22b24:	f10d 0306 	add.w	r3, sp, #6
   22b28:	3238      	adds	r2, #56	; 0x38
   22b2a:	4629      	mov	r1, r5
   22b2c:	68e0      	ldr	r0, [r4, #12]
   22b2e:	f01e fd65 	bl	415fc <shell_history_get>
	if (!history_mode) {
   22b32:	b958      	cbnz	r0, 22b4c <history_handle+0x6c>
		strcpy(shell->ctx->cmd_buff, shell->ctx->temp_buff);
   22b34:	68a0      	ldr	r0, [r4, #8]
   22b36:	f500 719c 	add.w	r1, r0, #312	; 0x138
   22b3a:	3038      	adds	r0, #56	; 0x38
   22b3c:	f022 fb08 	bl	45150 <strcpy>
		len = shell_strlen(shell->ctx->cmd_buff);
   22b40:	68a0      	ldr	r0, [r4, #8]
   22b42:	3038      	adds	r0, #56	; 0x38
   22b44:	f01e fa5f 	bl	41006 <shell_strlen>
   22b48:	f8ad 0006 	strh.w	r0, [sp, #6]
	shell_op_cursor_home_move(shell);
   22b4c:	4620      	mov	r0, r4
   22b4e:	f01e fbd9 	bl	41304 <shell_op_cursor_home_move>
	SHELL_VT100_CMD(shell, SHELL_VT100_CLEAREOS);
   22b52:	4a0a      	ldr	r2, [pc, #40]	; (22b7c <history_handle+0x9c>)
   22b54:	490a      	ldr	r1, [pc, #40]	; (22b80 <history_handle+0xa0>)
   22b56:	6960      	ldr	r0, [r4, #20]
   22b58:	f01e fa5b 	bl	41012 <shell_raw_fprintf>
	shell_print_cmd(shell);
   22b5c:	4620      	mov	r0, r4
   22b5e:	f001 f92b 	bl	23db8 <shell_print_cmd>
	shell->ctx->cmd_buff_pos = len;
   22b62:	68a3      	ldr	r3, [r4, #8]
   22b64:	f8bd 2006 	ldrh.w	r2, [sp, #6]
	shell_op_cond_next_line(shell);
   22b68:	4620      	mov	r0, r4
	shell->ctx->cmd_buff_pos = len;
   22b6a:	869a      	strh	r2, [r3, #52]	; 0x34
	shell->ctx->cmd_buff_len = len;
   22b6c:	865a      	strh	r2, [r3, #50]	; 0x32
	shell_op_cond_next_line(shell);
   22b6e:	f001 f8ad 	bl	23ccc <shell_op_cond_next_line>
}
   22b72:	b003      	add	sp, #12
   22b74:	bd30      	pop	{r4, r5, pc}
				shell->ctx->temp_buff[0] = '\0';
   22b76:	f883 0138 	strb.w	r0, [r3, #312]	; 0x138
   22b7a:	e7d2      	b.n	22b22 <history_handle+0x42>
   22b7c:	000487c5 	.word	0x000487c5
   22b80:	00047a4a 	.word	0x00047a4a

00022b84 <execute>:
{
   22b84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	const struct shell_static_entry *p_static_entry = NULL;
   22b88:	2300      	movs	r3, #0
{
   22b8a:	4604      	mov	r4, r0
   22b8c:	b09d      	sub	sp, #116	; 0x74
	const struct shell_static_entry *p_static_entry = NULL;
   22b8e:	9303      	str	r3, [sp, #12]
	shell_op_cursor_end_move(shell);
   22b90:	f01e fbbe 	bl	41310 <shell_op_cursor_end_move>
	if (!shell_cursor_in_empty_line(shell)) {
   22b94:	4620      	mov	r0, r4
   22b96:	f01e fb7d 	bl	41294 <shell_cursor_in_empty_line>
   22b9a:	b918      	cbnz	r0, 22ba4 <execute+0x20>
	shell_raw_fprintf(shell->fprintf_ctx, "\n");
   22b9c:	498c      	ldr	r1, [pc, #560]	; (22dd0 <execute+0x24c>)
   22b9e:	6960      	ldr	r0, [r4, #20]
   22ba0:	f01e fa37 	bl	41012 <shell_raw_fprintf>
__ssp_bos_icheck3(memset, void *, int)
   22ba4:	68a0      	ldr	r0, [r4, #8]
   22ba6:	2214      	movs	r2, #20
   22ba8:	2100      	movs	r1, #0
   22baa:	3008      	adds	r0, #8
   22bac:	f022 f98a 	bl	44ec4 <memset>
	shell_cmd_trim(shell);
   22bb0:	4620      	mov	r0, r4
   22bb2:	f001 f82f 	bl	23c14 <shell_cmd_trim>
	history_put(shell, shell->ctx->cmd_buff,
   22bb6:	68a1      	ldr	r1, [r4, #8]
	shell_history_put(shell->history, line, length);
   22bb8:	68e0      	ldr	r0, [r4, #12]
   22bba:	8e4a      	ldrh	r2, [r1, #50]	; 0x32
   22bbc:	3138      	adds	r1, #56	; 0x38
   22bbe:	f001 fe4b 	bl	24858 <shell_history_put>
		shell_wildcard_prepare(shell);
   22bc2:	4620      	mov	r0, r4
   22bc4:	f01e fe1a 	bl	417fc <shell_wildcard_prepare>
	quote = shell_make_argv(&argc, &argv[0], shell->ctx->cmd_buff,
   22bc8:	68a2      	ldr	r2, [r4, #8]
   22bca:	230c      	movs	r3, #12
   22bcc:	3238      	adds	r2, #56	; 0x38
   22bce:	a90f      	add	r1, sp, #60	; 0x3c
   22bd0:	a804      	add	r0, sp, #16
   22bd2:	f000 fed5 	bl	23980 <shell_make_argv>
	if (!argc) {
   22bd6:	9a04      	ldr	r2, [sp, #16]
	quote = shell_make_argv(&argc, &argv[0], shell->ctx->cmd_buff,
   22bd8:	4603      	mov	r3, r0
	if (!argc) {
   22bda:	b92a      	cbnz	r2, 22be8 <execute+0x64>
		return -ENOEXEC;
   22bdc:	f06f 0507 	mvn.w	r5, #7
}
   22be0:	4628      	mov	r0, r5
   22be2:	b01d      	add	sp, #116	; 0x74
   22be4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (quote != 0) {
   22be8:	b128      	cbz	r0, 22bf6 <execute+0x72>
		shell_internal_fprintf(shell, SHELL_ERROR,
   22bea:	4a7a      	ldr	r2, [pc, #488]	; (22dd4 <execute+0x250>)
   22bec:	2102      	movs	r1, #2
   22bee:	4620      	mov	r0, r4
   22bf0:	f001 f9a4 	bl	23f3c <shell_internal_fprintf>
   22bf4:	e7f2      	b.n	22bdc <execute+0x58>
	help_entry.help = NULL;
   22bf6:	4605      	mov	r5, r0
	size_t cmd_idx = 0;
   22bf8:	4607      	mov	r7, r0
	bool wildcard_found = false;
   22bfa:	4681      	mov	r9, r0
	size_t cmd_with_handler_lvl = 0;
   22bfc:	4682      	mov	sl, r0
	size_t cmd_lvl = SHELL_CMD_ROOT_LVL;
   22bfe:	4606      	mov	r6, r0
	const struct shell_cmd_entry *p_cmd = NULL;
   22c00:	4683      	mov	fp, r0
   22c02:	e03e      	b.n	22c82 <execute+0xfe>
		     !strcmp(argv[cmd_lvl], "--help"))) {
   22c04:	4974      	ldr	r1, [pc, #464]	; (22dd8 <execute+0x254>)
   22c06:	f858 0c34 	ldr.w	r0, [r8, #-52]
   22c0a:	f7fa fa7b 	bl	1d104 <strcmp>
		    (!strcmp(argv[cmd_lvl], "-h") ||
   22c0e:	2800      	cmp	r0, #0
   22c10:	d045      	beq.n	22c9e <execute+0x11a>
			status = shell_wildcard_process(shell, p_cmd,
   22c12:	f858 2c34 	ldr.w	r2, [r8, #-52]
   22c16:	4659      	mov	r1, fp
   22c18:	4620      	mov	r0, r4
   22c1a:	f001 ff15 	bl	24a48 <shell_wildcard_process>
			if (status == SHELL_WILDCARD_CMD_NO_MATCH_FOUND) {
   22c1e:	2802      	cmp	r0, #2
   22c20:	d128      	bne.n	22c74 <execute+0xf0>
	if (IS_ENABLED(CONFIG_SHELL_WILDCARD) && wildcard_found) {
   22c22:	f1b9 0f00 	cmp.w	r9, #0
   22c26:	d009      	beq.n	22c3c <execute+0xb8>
		shell_wildcard_finalize(shell);
   22c28:	4620      	mov	r0, r4
   22c2a:	f01e fe09 	bl	41840 <shell_wildcard_finalize>
				      shell->ctx->cmd_buff,
   22c2e:	68a2      	ldr	r2, [r4, #8]
		(void)shell_make_argv(&argc, &argv[0],
   22c30:	230c      	movs	r3, #12
   22c32:	3238      	adds	r2, #56	; 0x38
   22c34:	a90f      	add	r1, sp, #60	; 0x3c
   22c36:	a804      	add	r0, sp, #16
   22c38:	f000 fea2 	bl	23980 <shell_make_argv>
	if (shell->ctx->active_cmd.handler == NULL) {
   22c3c:	68a0      	ldr	r0, [r4, #8]
   22c3e:	6943      	ldr	r3, [r0, #20]
   22c40:	2b00      	cmp	r3, #0
   22c42:	f040 808f 	bne.w	22d64 <execute+0x1e0>
			if (help_entry->help == NULL) {
   22c46:	2d00      	cmp	r5, #0
   22c48:	d0c8      	beq.n	22bdc <execute+0x58>
			if (help_entry->help != shell->ctx->active_cmd.help) {
   22c4a:	68c3      	ldr	r3, [r0, #12]
   22c4c:	429d      	cmp	r5, r3
   22c4e:	d00c      	beq.n	22c6a <execute+0xe6>
				shell->ctx->active_cmd = *help_entry;
   22c50:	950b      	str	r5, [sp, #44]	; 0x2c
   22c52:	f100 0508 	add.w	r5, r0, #8
   22c56:	e003      	b.n	22c60 <execute+0xdc>
				shell->ctx->active_cmd = help_entry;
   22c58:	68a3      	ldr	r3, [r4, #8]
   22c5a:	950b      	str	r5, [sp, #44]	; 0x2c
   22c5c:	f103 0508 	add.w	r5, r3, #8
				shell->ctx->active_cmd = *help_entry;
   22c60:	ae0a      	add	r6, sp, #40	; 0x28
   22c62:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   22c64:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   22c66:	6833      	ldr	r3, [r6, #0]
   22c68:	602b      	str	r3, [r5, #0]
			shell_internal_help_print(shell);
   22c6a:	4620      	mov	r0, r4
   22c6c:	f01e f9de 	bl	4102c <shell_internal_help_print>
			return SHELL_CMD_HELP_PRINTED;
   22c70:	2501      	movs	r5, #1
   22c72:	e7b5      	b.n	22be0 <execute+0x5c>
			if (status != SHELL_WILDCARD_NOT_FOUND) {
   22c74:	2803      	cmp	r0, #3
   22c76:	d01a      	beq.n	22cae <execute+0x12a>
				continue;
   22c78:	46b8      	mov	r8, r7
				wildcard_found = true;
   22c7a:	f04f 0901 	mov.w	r9, #1
				++cmd_lvl;
   22c7e:	3601      	adds	r6, #1
				wildcard_found = true;
   22c80:	4647      	mov	r7, r8
		if (cmd_lvl >= argc) {
   22c82:	9b04      	ldr	r3, [sp, #16]
   22c84:	42b3      	cmp	r3, r6
   22c86:	d9cc      	bls.n	22c22 <execute+0x9e>
		if (IS_ENABLED(CONFIG_SHELL_HELP) && (cmd_lvl > 0) &&
   22c88:	b18e      	cbz	r6, 22cae <execute+0x12a>
		    (!strcmp(argv[cmd_lvl], "-h") ||
   22c8a:	ab1c      	add	r3, sp, #112	; 0x70
   22c8c:	eb03 0886 	add.w	r8, r3, r6, lsl #2
   22c90:	4952      	ldr	r1, [pc, #328]	; (22ddc <execute+0x258>)
   22c92:	f858 0c34 	ldr.w	r0, [r8, #-52]
   22c96:	f7fa fa35 	bl	1d104 <strcmp>
		if (IS_ENABLED(CONFIG_SHELL_HELP) && (cmd_lvl > 0) &&
   22c9a:	2800      	cmp	r0, #0
   22c9c:	d1b2      	bne.n	22c04 <execute+0x80>
			if (help_entry.help) {
   22c9e:	2d00      	cmp	r5, #0
   22ca0:	d1da      	bne.n	22c58 <execute+0xd4>
			shell_internal_fprintf(shell, SHELL_ERROR,
   22ca2:	4a4f      	ldr	r2, [pc, #316]	; (22de0 <execute+0x25c>)
					shell_internal_fprintf(shell,
   22ca4:	2102      	movs	r1, #2
   22ca6:	4620      	mov	r0, r4
   22ca8:	f001 f948 	bl	23f3c <shell_internal_fprintf>
					return -ENOEXEC;
   22cac:	e796      	b.n	22bdc <execute+0x58>
		shell_cmd_get(shell, p_cmd, cmd_lvl, cmd_idx++, &p_static_entry,
   22cae:	ab05      	add	r3, sp, #20
   22cb0:	9301      	str	r3, [sp, #4]
   22cb2:	ab03      	add	r3, sp, #12
   22cb4:	f107 0801 	add.w	r8, r7, #1
   22cb8:	9300      	str	r3, [sp, #0]
   22cba:	4632      	mov	r2, r6
   22cbc:	463b      	mov	r3, r7
   22cbe:	4659      	mov	r1, fp
   22cc0:	4620      	mov	r0, r4
   22cc2:	f000 ff23 	bl	23b0c <shell_cmd_get>
		if ((cmd_idx == 0) || (p_static_entry == NULL)) {
   22cc6:	f1b8 0f00 	cmp.w	r8, #0
   22cca:	d001      	beq.n	22cd0 <execute+0x14c>
   22ccc:	9b03      	ldr	r3, [sp, #12]
   22cce:	b983      	cbnz	r3, 22cf2 <execute+0x16e>
			if (cmd_lvl == 0 &&
   22cd0:	2e00      	cmp	r6, #0
   22cd2:	d1a6      	bne.n	22c22 <execute+0x9e>

void shell_cmd_trim(const struct shell *shell);

static inline bool shell_in_select_mode(const struct shell *shell)
{
	return shell->ctx->selected_cmd == NULL ? false : true;
   22cd4:	68a3      	ldr	r3, [r4, #8]
   22cd6:	69db      	ldr	r3, [r3, #28]
   22cd8:	b113      	cbz	r3, 22ce0 <execute+0x15c>
				(!shell_in_select_mode(shell) ||
   22cda:	68db      	ldr	r3, [r3, #12]
   22cdc:	2b00      	cmp	r3, #0
   22cde:	d1a0      	bne.n	22c22 <execute+0x9e>
				shell_internal_fprintf(shell, SHELL_ERROR,
   22ce0:	4b40      	ldr	r3, [pc, #256]	; (22de4 <execute+0x260>)
   22ce2:	4a41      	ldr	r2, [pc, #260]	; (22de8 <execute+0x264>)
   22ce4:	9300      	str	r3, [sp, #0]
   22ce6:	2102      	movs	r1, #2
   22ce8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   22cea:	4620      	mov	r0, r4
   22cec:	f001 f926 	bl	23f3c <shell_internal_fprintf>
				return -ENOEXEC;
   22cf0:	e774      	b.n	22bdc <execute+0x58>
		if (strcmp(argv[cmd_lvl], p_static_entry->syntax) == 0) {
   22cf2:	6819      	ldr	r1, [r3, #0]
   22cf4:	ab1c      	add	r3, sp, #112	; 0x70
   22cf6:	eb03 0386 	add.w	r3, r3, r6, lsl #2
   22cfa:	f853 0c34 	ldr.w	r0, [r3, #-52]
   22cfe:	f7fa fa01 	bl	1d104 <strcmp>
   22d02:	2800      	cmp	r0, #0
   22d04:	d1bc      	bne.n	22c80 <execute+0xfc>
			if (p_static_entry->handler != NULL) {
   22d06:	9f03      	ldr	r7, [sp, #12]
   22d08:	68fb      	ldr	r3, [r7, #12]
   22d0a:	b1bb      	cbz	r3, 22d3c <execute+0x1b8>
				if (IS_ENABLED(CONFIG_SHELL_WILDCARD) &&
   22d0c:	f1b9 0f00 	cmp.w	r9, #0
   22d10:	d007      	beq.n	22d22 <execute+0x19e>
					shell_op_cursor_end_move(shell);
   22d12:	4620      	mov	r0, r4
   22d14:	f01e fafc 	bl	41310 <shell_op_cursor_end_move>
					shell_op_cond_next_line(shell);
   22d18:	4620      	mov	r0, r4
   22d1a:	f000 ffd7 	bl	23ccc <shell_op_cond_next_line>
					shell_internal_fprintf(shell,
   22d1e:	4a33      	ldr	r2, [pc, #204]	; (22dec <execute+0x268>)
   22d20:	e7c0      	b.n	22ca4 <execute+0x120>
				shell->ctx->active_cmd = *p_static_entry;
   22d22:	46be      	mov	lr, r7
   22d24:	46b2      	mov	sl, r6
   22d26:	68a3      	ldr	r3, [r4, #8]
   22d28:	f103 0c08 	add.w	ip, r3, #8
   22d2c:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
   22d30:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   22d34:	f8de 3000 	ldr.w	r3, [lr]
   22d38:	f8cc 3000 	str.w	r3, [ip]
			if (p_static_entry->help != NULL) {
   22d3c:	f8d7 c004 	ldr.w	ip, [r7, #4]
   22d40:	f1bc 0f00 	cmp.w	ip, #0
   22d44:	d008      	beq.n	22d58 <execute+0x1d4>
				help_entry = *p_static_entry;
   22d46:	46be      	mov	lr, r7
   22d48:	ad0a      	add	r5, sp, #40	; 0x28
   22d4a:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
   22d4e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   22d50:	f8de 3000 	ldr.w	r3, [lr]
   22d54:	602b      	str	r3, [r5, #0]
   22d56:	4665      	mov	r5, ip
			cmd_lvl++;
   22d58:	3601      	adds	r6, #1
			p_cmd = p_static_entry->subcmd;
   22d5a:	f8d7 b008 	ldr.w	fp, [r7, #8]
			cmd_idx = 0;
   22d5e:	f04f 0800 	mov.w	r8, #0
   22d62:	e78d      	b.n	22c80 <execute+0xfc>
	return exec_cmd(shell, argc - cmd_with_handler_lvl,
   22d64:	9d04      	ldr	r5, [sp, #16]
	if (shell->ctx->active_cmd.args.mandatory) {
   22d66:	7e03      	ldrb	r3, [r0, #24]
	return exec_cmd(shell, argc - cmd_with_handler_lvl,
   22d68:	eba5 050a 	sub.w	r5, r5, sl
	if (shell->ctx->active_cmd.args.mandatory) {
   22d6c:	b18b      	cbz	r3, 22d92 <execute+0x20e>
		bool in_range = (argc >= mand) && (argc <= (mand + opt));
   22d6e:	429d      	cmp	r5, r3
		u8_t opt = shell->ctx->active_cmd.args.optional;
   22d70:	7e42      	ldrb	r2, [r0, #25]
		bool in_range = (argc >= mand) && (argc <= (mand + opt));
   22d72:	d302      	bcc.n	22d7a <execute+0x1f6>
   22d74:	4413      	add	r3, r2
	if (!arg_cnt_ok) {
   22d76:	429d      	cmp	r5, r3
   22d78:	d90b      	bls.n	22d92 <execute+0x20e>
		shell_internal_fprintf(shell, SHELL_ERROR,
   22d7a:	6883      	ldr	r3, [r0, #8]
   22d7c:	4a1c      	ldr	r2, [pc, #112]	; (22df0 <execute+0x26c>)
   22d7e:	2102      	movs	r1, #2
   22d80:	4620      	mov	r0, r4
   22d82:	f001 f8db 	bl	23f3c <shell_internal_fprintf>
			shell_internal_help_print(shell);
   22d86:	4620      	mov	r0, r4
   22d88:	f01e f950 	bl	4102c <shell_internal_help_print>
		return -EINVAL;
   22d8c:	f06f 0515 	mvn.w	r5, #21
   22d90:	e726      	b.n	22be0 <execute+0x5c>
		k_mutex_unlock(&shell->ctx->wr_mtx);
   22d92:	f500 703b 	add.w	r0, r0, #748	; 0x2ec
   22d96:	f01e f934 	bl	41002 <k_mutex_unlock>
		flag_cmd_ctx_set(shell, 1);
   22d9a:	68a3      	ldr	r3, [r4, #8]
		ret_val = shell->ctx->active_cmd.handler(shell, argc, argv);
   22d9c:	4629      	mov	r1, r5
	return shell->ctx->internal.flags.cmd_ctx == 1 ? true : false;
}

static inline void flag_cmd_ctx_set(const struct shell *shell, bool val)
{
	shell->ctx->internal.flags.cmd_ctx = val ? 1 : 0;
   22d9e:	f8b3 2258 	ldrh.w	r2, [r3, #600]	; 0x258
   22da2:	4620      	mov	r0, r4
   22da4:	f042 0280 	orr.w	r2, r2, #128	; 0x80
   22da8:	f8a3 2258 	strh.w	r2, [r3, #600]	; 0x258
   22dac:	aa0f      	add	r2, sp, #60	; 0x3c
   22dae:	695b      	ldr	r3, [r3, #20]
   22db0:	eb02 028a 	add.w	r2, r2, sl, lsl #2
   22db4:	4798      	blx	r3
   22db6:	4605      	mov	r5, r0
		flag_cmd_ctx_set(shell, 0);
   22db8:	68a0      	ldr	r0, [r4, #8]
   22dba:	f8b0 3258 	ldrh.w	r3, [r0, #600]	; 0x258
		k_mutex_lock(&shell->ctx->wr_mtx, K_FOREVER);
   22dbe:	f500 703b 	add.w	r0, r0, #748	; 0x2ec
   22dc2:	f36f 13c7 	bfc	r3, #7, #1
   22dc6:	f820 3c94 	strh.w	r3, [r0, #-148]
   22dca:	f01e f942 	bl	41052 <k_mutex_lock.constprop.35>
   22dce:	e707      	b.n	22be0 <execute+0x5c>
   22dd0:	0004a298 	.word	0x0004a298
   22dd4:	000487d2 	.word	0x000487d2
   22dd8:	000487e9 	.word	0x000487e9
   22ddc:	000487e6 	.word	0x000487e6
   22de0:	000487f0 	.word	0x000487f0
   22de4:	0004880e 	.word	0x0004880e
   22de8:	00048b4c 	.word	0x00048b4c
   22dec:	00048822 	.word	0x00048822
   22df0:	00048851 	.word	0x00048851

00022df4 <shell_process>:

	return 0;
}

void shell_process(const struct shell *shell)
{
   22df4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	__ASSERT_NO_MSG(shell);
   22df8:	4604      	mov	r4, r0
{
   22dfa:	b0ad      	sub	sp, #180	; 0xb4
	__ASSERT_NO_MSG(shell);
   22dfc:	b958      	cbnz	r0, 22e16 <shell_process+0x22>
   22dfe:	499c      	ldr	r1, [pc, #624]	; (23070 <shell_process+0x27c>)
   22e00:	489c      	ldr	r0, [pc, #624]	; (23074 <shell_process+0x280>)
   22e02:	f240 530a 	movw	r3, #1290	; 0x50a
   22e06:	4a9c      	ldr	r2, [pc, #624]	; (23078 <shell_process+0x284>)
   22e08:	f01d fbfb 	bl	40602 <printk>
   22e0c:	f240 510a 	movw	r1, #1290	; 0x50a
   22e10:	4899      	ldr	r0, [pc, #612]	; (23078 <shell_process+0x284>)
   22e12:	f01d fcb9 	bl	40788 <assert_post_action>
	__ASSERT_NO_MSG(shell->ctx);
   22e16:	68a3      	ldr	r3, [r4, #8]
   22e18:	b95b      	cbnz	r3, 22e32 <shell_process+0x3e>
   22e1a:	4998      	ldr	r1, [pc, #608]	; (2307c <shell_process+0x288>)
   22e1c:	4895      	ldr	r0, [pc, #596]	; (23074 <shell_process+0x280>)
   22e1e:	f240 530b 	movw	r3, #1291	; 0x50b
   22e22:	4a95      	ldr	r2, [pc, #596]	; (23078 <shell_process+0x284>)
   22e24:	f01d fbed 	bl	40602 <printk>
   22e28:	f240 510b 	movw	r1, #1291	; 0x50b
   22e2c:	4892      	ldr	r0, [pc, #584]	; (23078 <shell_process+0x284>)
   22e2e:	f01d fcab 	bl	40788 <assert_post_action>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   22e32:	68a3      	ldr	r3, [r4, #8]
   22e34:	f503 7316 	add.w	r3, r3, #600	; 0x258
   22e38:	e8d3 2fef 	ldaex	r2, [r3]
   22e3c:	f042 0208 	orr.w	r2, r2, #8
   22e40:	e8c3 2fe1 	stlex	r1, r2, [r3]
   22e44:	2900      	cmp	r1, #0
   22e46:	d1f7      	bne.n	22e38 <shell_process+0x44>
	internal.flags.processing = 1U;

	(void)atomic_or((atomic_t *)&shell->ctx->internal.value,
			internal.value);

	switch (shell->ctx->state) {
   22e48:	68a3      	ldr	r3, [r4, #8]
   22e4a:	791b      	ldrb	r3, [r3, #4]
   22e4c:	2b02      	cmp	r3, #2
   22e4e:	f040 8380 	bne.w	23552 <shell_process+0x75e>
	size_t count = 0;
   22e52:	2300      	movs	r3, #0
   22e54:	930b      	str	r3, [sp, #44]	; 0x2c
		(void)shell->iface->api->read(shell->iface, &data,
   22e56:	6860      	ldr	r0, [r4, #4]
   22e58:	2201      	movs	r2, #1
   22e5a:	6803      	ldr	r3, [r0, #0]
   22e5c:	f10d 012b 	add.w	r1, sp, #43	; 0x2b
   22e60:	691d      	ldr	r5, [r3, #16]
   22e62:	ab0b      	add	r3, sp, #44	; 0x2c
   22e64:	47a8      	blx	r5
		if (count == 0) {
   22e66:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   22e68:	2b00      	cmp	r3, #0
   22e6a:	f000 8372 	beq.w	23552 <shell_process+0x75e>
		if (ascii_filter(data) != 0) {
   22e6e:	f89d 102b 	ldrb.w	r1, [sp, #43]	; 0x2b
	return (u8_t) data > SHELL_ASCII_MAX_CHAR ? -EINVAL : 0;
   22e72:	060d      	lsls	r5, r1, #24
   22e74:	d4ef      	bmi.n	22e56 <shell_process+0x62>
		switch (shell->ctx->receive_state) {
   22e76:	68a0      	ldr	r0, [r4, #8]
   22e78:	7943      	ldrb	r3, [r0, #5]
   22e7a:	2b02      	cmp	r3, #2
   22e7c:	f200 8367 	bhi.w	2354e <shell_process+0x75a>
   22e80:	e8df f013 	tbh	[pc, r3, lsl #1]
   22e84:	02e40003 	.word	0x02e40003
   22e88:	02fb      	.short	0x02fb
	if ((data != '\r') && (data != '\n')) {
   22e8a:	290d      	cmp	r1, #13
   22e8c:	d01c      	beq.n	22ec8 <shell_process+0xd4>
   22e8e:	290a      	cmp	r1, #10
   22e90:	d01a      	beq.n	22ec8 <shell_process+0xd4>
	return shell->ctx->internal.flags.last_nl;
}

static inline void flag_last_nl_set(const struct shell *shell, u8_t val)
{
	shell->ctx->internal.flags.last_nl = val;
   22e92:	f8b0 3258 	ldrh.w	r3, [r0, #600]	; 0x258
   22e96:	f36f 230f 	bfc	r3, #8, #8
   22e9a:	f8a0 3258 	strh.w	r3, [r0, #600]	; 0x258
			switch (data) {
   22e9e:	2909      	cmp	r1, #9
   22ea0:	d056      	beq.n	22f50 <shell_process+0x15c>
   22ea2:	d83b      	bhi.n	22f1c <shell_process+0x128>
   22ea4:	2900      	cmp	r1, #0
   22ea6:	d0d6      	beq.n	22e56 <shell_process+0x62>
   22ea8:	2908      	cmp	r1, #8
   22eaa:	f000 8227 	beq.w	232fc <shell_process+0x508>
				if (isprint((int) data)) {
   22eae:	4b74      	ldr	r3, [pc, #464]	; (23080 <shell_process+0x28c>)
   22eb0:	5ccb      	ldrb	r3, [r1, r3]
   22eb2:	f013 0f97 	tst.w	r3, #151	; 0x97
   22eb6:	f000 8230 	beq.w	2331a <shell_process+0x526>
	shell->ctx->internal.flags.history_exit = val ? 1 : 0;
   22eba:	f8b0 3258 	ldrh.w	r3, [r0, #600]	; 0x258
   22ebe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   22ec2:	f8a0 3258 	strh.w	r3, [r0, #600]	; 0x258
   22ec6:	e125      	b.n	23114 <shell_process+0x320>
	return shell->ctx->internal.flags.last_nl;
   22ec8:	f8d0 3258 	ldr.w	r3, [r0, #600]	; 0x258
	if ((flag_last_nl_get(shell) == 0U) ||
   22ecc:	f413 4f7f 	tst.w	r3, #65280	; 0xff00
   22ed0:	d005      	beq.n	22ede <shell_process+0xea>
   22ed2:	f8d0 3258 	ldr.w	r3, [r0, #600]	; 0x258
   22ed6:	f3c3 2307 	ubfx	r3, r3, #8, #8
   22eda:	4299      	cmp	r1, r3
   22edc:	d1df      	bne.n	22e9e <shell_process+0xaa>
	shell->ctx->internal.flags.last_nl = val;
   22ede:	f8b0 3258 	ldrh.w	r3, [r0, #600]	; 0x258
   22ee2:	f361 230f 	bfi	r3, r1, #8, #8
   22ee6:	f8a0 3258 	strh.w	r3, [r0, #600]	; 0x258
				if (!shell->ctx->cmd_buff_len &&
   22eea:	8e43      	ldrh	r3, [r0, #50]	; 0x32
   22eec:	b993      	cbnz	r3, 22f14 <shell_process+0x120>
   22eee:	69c2      	ldr	r2, [r0, #28]
   22ef0:	b982      	cbnz	r2, 22f14 <shell_process+0x120>
	shell->ctx->internal.flags.history_exit = val ? 1 : 0;
   22ef2:	f8b0 3258 	ldrh.w	r3, [r0, #600]	; 0x258
   22ef6:	f362 1386 	bfi	r3, r2, #6, #1
   22efa:	f8a0 3258 	strh.w	r3, [r0, #600]	; 0x258
	shell_history_mode_exit(shell->history);
   22efe:	68e0      	ldr	r0, [r4, #12]
   22f00:	f01e fb79 	bl	415f6 <shell_history_mode_exit>
	shell_raw_fprintf(shell->fprintf_ctx, "\n");
   22f04:	495f      	ldr	r1, [pc, #380]	; (23084 <shell_process+0x290>)
   22f06:	6960      	ldr	r0, [r4, #20]
   22f08:	f01e f883 	bl	41012 <shell_raw_fprintf>
		state_set(shell, SHELL_STATE_ACTIVE);
   22f0c:	4620      	mov	r0, r4
   22f0e:	f01e f896 	bl	4103e <state_set.constprop.31>
		break;
   22f12:	e7a0      	b.n	22e56 <shell_process+0x62>
					(void)execute(shell);
   22f14:	4620      	mov	r0, r4
   22f16:	f7ff fe35 	bl	22b84 <execute>
				state_set(shell, SHELL_STATE_ACTIVE);
   22f1a:	e7f7      	b.n	22f0c <shell_process+0x118>
   22f1c:	291b      	cmp	r1, #27
   22f1e:	d014      	beq.n	22f4a <shell_process+0x156>
   22f20:	297f      	cmp	r1, #127	; 0x7f
   22f22:	d1c4      	bne.n	22eae <shell_process+0xba>
	return shell->ctx->internal.flags.echo == 1 ? true : false;
   22f24:	f8d0 3258 	ldr.w	r3, [r0, #600]	; 0x258
				if (flag_echo_get(shell)) {
   22f28:	075f      	lsls	r7, r3, #29
   22f2a:	d594      	bpl.n	22e56 <shell_process+0x62>
	shell->ctx->internal.flags.history_exit = val ? 1 : 0;
   22f2c:	f8b0 3258 	ldrh.w	r3, [r0, #600]	; 0x258
   22f30:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   22f34:	f8a0 3258 	strh.w	r3, [r0, #600]	; 0x258
	return shell->ctx->internal.flags.mode_delete == 1 ? true : false;
   22f38:	f8d0 3258 	ldr.w	r3, [r0, #600]	; 0x258
					if (flag_mode_delete_get(shell)) {
   22f3c:	069e      	lsls	r6, r3, #26
   22f3e:	f100 81e8 	bmi.w	23312 <shell_process+0x51e>
		shell_op_char_delete(shell);
   22f42:	4620      	mov	r0, r4
   22f44:	f01e fa79 	bl	4143a <shell_op_char_delete>
		break;
   22f48:	e785      	b.n	22e56 <shell_process+0x62>
	shell->ctx->receive_state = state;
   22f4a:	2301      	movs	r3, #1
   22f4c:	7143      	strb	r3, [r0, #5]
   22f4e:	e782      	b.n	22e56 <shell_process+0x62>
	return shell->ctx->internal.flags.echo == 1 ? true : false;
   22f50:	f8d0 3258 	ldr.w	r3, [r0, #600]	; 0x258
   22f54:	f3c3 0980 	ubfx	r9, r3, #2, #1
				if (flag_echo_get(shell)) {
   22f58:	f1b9 0f00 	cmp.w	r9, #0
   22f5c:	f43f af7b 	beq.w	22e56 <shell_process+0x62>
	shell->ctx->internal.flags.history_exit = val ? 1 : 0;
   22f60:	f8b0 3258 	ldrh.w	r3, [r0, #600]	; 0x258
   22f64:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   22f68:	f8a0 3258 	strh.w	r3, [r0, #600]	; 0x258
	if (compl_space == 0U) {
   22f6c:	8e43      	ldrh	r3, [r0, #50]	; 0x32
   22f6e:	2bff      	cmp	r3, #255	; 0xff
   22f70:	f43f af71 	beq.w	22e56 <shell_process+0x62>
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   22f74:	8e82      	ldrh	r2, [r0, #52]	; 0x34
   22f76:	f100 0138 	add.w	r1, r0, #56	; 0x38
   22f7a:	f500 709c 	add.w	r0, r0, #312	; 0x138
   22f7e:	f021 ff67 	bl	44e50 <memcpy>
	shell->ctx->temp_buff[shell->ctx->cmd_buff_pos] = '\0';
   22f82:	2100      	movs	r1, #0
   22f84:	68a2      	ldr	r2, [r4, #8]
	(void)shell_make_argv(argc, *argv, shell->ctx->temp_buff,
   22f86:	a80d      	add	r0, sp, #52	; 0x34
	shell->ctx->temp_buff[shell->ctx->cmd_buff_pos] = '\0';
   22f88:	8e93      	ldrh	r3, [r2, #52]	; 0x34
   22f8a:	4413      	add	r3, r2
   22f8c:	f883 1138 	strb.w	r1, [r3, #312]	; 0x138
	(void)shell_make_argv(argc, *argv, shell->ctx->temp_buff,
   22f90:	f502 729c 	add.w	r2, r2, #312	; 0x138
   22f94:	a91f      	add	r1, sp, #124	; 0x7c
   22f96:	230c      	movs	r3, #12
   22f98:	f000 fcf2 	bl	23980 <shell_make_argv>
	if ((*argc == 0) || ((space == 0) && (*argc == 1))) {
   22f9c:	990d      	ldr	r1, [sp, #52]	; 0x34
   22f9e:	b151      	cbz	r1, 22fb6 <shell_process+0x1c2>
	int space = isspace((int)shell->ctx->cmd_buff[
   22fa0:	68a3      	ldr	r3, [r4, #8]
   22fa2:	8e9a      	ldrh	r2, [r3, #52]	; 0x34
   22fa4:	4413      	add	r3, r2
   22fa6:	f893 2037 	ldrb.w	r2, [r3, #55]	; 0x37
   22faa:	4b35      	ldr	r3, [pc, #212]	; (23080 <shell_process+0x28c>)
	if ((*argc == 0) || ((space == 0) && (*argc == 1))) {
   22fac:	5cd3      	ldrb	r3, [r2, r3]
   22fae:	0718      	lsls	r0, r3, #28
   22fb0:	d44c      	bmi.n	2304c <shell_process+0x258>
   22fb2:	2901      	cmp	r1, #1
   22fb4:	d149      	bne.n	2304a <shell_process+0x256>
		*complete_arg_idx = SHELL_CMD_ROOT_LVL;
   22fb6:	2500      	movs	r5, #0
   22fb8:	950c      	str	r5, [sp, #48]	; 0x30
	*cnt = 0;
   22fba:	2600      	movs	r6, #0
	find_completion_candidates(shell, cmd, argv[arg_idx], &first, &cnt,
   22fbc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   22fbe:	aa2c      	add	r2, sp, #176	; 0xb0
   22fc0:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   22fc4:	f853 ac34 	ldr.w	sl, [r3, #-52]
	size_t idx = 0;
   22fc8:	46b0      	mov	r8, r6
	size_t incompl_cmd_len = shell_strlen(incompl_cmd);
   22fca:	4650      	mov	r0, sl
   22fcc:	f01e f81b 	bl	41006 <shell_strlen>
	bool found = false;
   22fd0:	46b3      	mov	fp, r6
	size_t incompl_cmd_len = shell_strlen(incompl_cmd);
   22fd2:	9004      	str	r0, [sp, #16]
	*longest = 0U;
   22fd4:	9605      	str	r6, [sp, #20]
	size_t first = 0;
   22fd6:	9603      	str	r6, [sp, #12]
		shell_cmd_get(shell, cmd ? cmd->subcmd : NULL, cmd ? 1 : 0,
   22fd8:	af1a      	add	r7, sp, #104	; 0x68
   22fda:	2d00      	cmp	r5, #0
   22fdc:	d043      	beq.n	23066 <shell_process+0x272>
   22fde:	68a9      	ldr	r1, [r5, #8]
   22fe0:	1c2b      	adds	r3, r5, #0
   22fe2:	bf18      	it	ne
   22fe4:	2301      	movne	r3, #1
   22fe6:	e9cd 7301 	strd	r7, r3, [sp, #4]
   22fea:	ab15      	add	r3, sp, #84	; 0x54
   22fec:	9300      	str	r3, [sp, #0]
   22fee:	9a02      	ldr	r2, [sp, #8]
   22ff0:	4643      	mov	r3, r8
   22ff2:	4620      	mov	r0, r4
   22ff4:	f000 fd8a 	bl	23b0c <shell_cmd_get>
		if (!candidate) {
   22ff8:	9b15      	ldr	r3, [sp, #84]	; 0x54
   22ffa:	2b00      	cmp	r3, #0
   22ffc:	d044      	beq.n	23088 <shell_process+0x294>
	return entry->syntax &&
   22ffe:	6818      	ldr	r0, [r3, #0]
		(entry->handler == NULL) && (entry->subcmd == NULL);
   23000:	2800      	cmp	r0, #0
   23002:	d032      	beq.n	2306a <shell_process+0x276>
	return entry->syntax &&
   23004:	68da      	ldr	r2, [r3, #12]
   23006:	2a00      	cmp	r2, #0
   23008:	d12f      	bne.n	2306a <shell_process+0x276>
		(entry->handler == NULL) && (entry->subcmd == NULL);
   2300a:	689b      	ldr	r3, [r3, #8]
   2300c:	fab3 f383 	clz	r3, r3
   23010:	095b      	lsrs	r3, r3, #5
	return (strncmp(candidate, str, len) == 0) ? true : false;
   23012:	9a04      	ldr	r2, [sp, #16]
   23014:	4651      	mov	r1, sl
   23016:	9302      	str	r3, [sp, #8]
   23018:	f022 f8a2 	bl	45160 <strncmp>
		if (!is_empty && is_candidate) {
   2301c:	9b02      	ldr	r3, [sp, #8]
   2301e:	4303      	orrs	r3, r0
   23020:	d110      	bne.n	23044 <shell_process+0x250>
			size_t slen = strlen(candidate->syntax);
   23022:	9b15      	ldr	r3, [sp, #84]	; 0x54
			(*cnt)++;
   23024:	3601      	adds	r6, #1
			size_t slen = strlen(candidate->syntax);
   23026:	6818      	ldr	r0, [r3, #0]
   23028:	f7fa f876 	bl	1d118 <strlen>
			*longest = (slen > *longest) ? slen : *longest;
   2302c:	9b05      	ldr	r3, [sp, #20]
   2302e:	4283      	cmp	r3, r0
   23030:	bf38      	it	cc
   23032:	4603      	movcc	r3, r0
   23034:	b29b      	uxth	r3, r3
   23036:	9305      	str	r3, [sp, #20]
			if (!found) {
   23038:	f1bb 0f00 	cmp.w	fp, #0
   2303c:	d102      	bne.n	23044 <shell_process+0x250>
			found = true;
   2303e:	46cb      	mov	fp, r9
				*first_idx = idx;
   23040:	f8cd 800c 	str.w	r8, [sp, #12]
		idx++;
   23044:	f108 0801 	add.w	r8, r8, #1
   23048:	e7c7      	b.n	22fda <shell_process+0x1e6>
	search_argc = space ? *argc : *argc - 1;
   2304a:	3901      	subs	r1, #1
	*cmd = shell_get_last_command(shell, search_argc, *argv,
   2304c:	2300      	movs	r3, #0
   2304e:	9301      	str	r3, [sp, #4]
   23050:	ab10      	add	r3, sp, #64	; 0x40
   23052:	9300      	str	r3, [sp, #0]
   23054:	aa1f      	add	r2, sp, #124	; 0x7c
   23056:	ab0c      	add	r3, sp, #48	; 0x30
   23058:	4620      	mov	r0, r4
   2305a:	f01e f8af 	bl	411bc <shell_get_last_command>
	if ((*cmd == NULL) && (search_argc != 0)) {
   2305e:	4605      	mov	r5, r0
   23060:	2800      	cmp	r0, #0
   23062:	d1aa      	bne.n	22fba <shell_process+0x1c6>
   23064:	e6f7      	b.n	22e56 <shell_process+0x62>
		shell_cmd_get(shell, cmd ? cmd->subcmd : NULL, cmd ? 1 : 0,
   23066:	4629      	mov	r1, r5
   23068:	e7ba      	b.n	22fe0 <shell_process+0x1ec>
		(entry->handler == NULL) && (entry->subcmd == NULL);
   2306a:	2300      	movs	r3, #0
   2306c:	e7d1      	b.n	23012 <shell_process+0x21e>
   2306e:	bf00      	nop
   23070:	0004adfa 	.word	0x0004adfa
   23074:	0004764f 	.word	0x0004764f
   23078:	0004886c 	.word	0x0004886c
   2307c:	000489d3 	.word	0x000489d3
   23080:	0004d857 	.word	0x0004d857
   23084:	0004a298 	.word	0x0004a298
	if (cnt == 1) {
   23088:	2e01      	cmp	r6, #1
   2308a:	d14c      	bne.n	23126 <shell_process+0x332>
		autocomplete(shell, cmd, argv[arg_idx], first);
   2308c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   2308e:	aa2c      	add	r2, sp, #176	; 0xb0
   23090:	eb02 0383 	add.w	r3, r2, r3, lsl #2
	u16_t arg_len = shell_strlen(arg);
   23094:	f853 0c34 	ldr.w	r0, [r3, #-52]
   23098:	f01d ffb5 	bl	41006 <shell_strlen>
   2309c:	4606      	mov	r6, r0
	shell_cmd_get(shell, cmd ? cmd->subcmd : NULL, cmd ? 1 : 0,
   2309e:	b105      	cbz	r5, 230a2 <shell_process+0x2ae>
   230a0:	68ad      	ldr	r5, [r5, #8]
   230a2:	68a3      	ldr	r3, [r4, #8]
   230a4:	4629      	mov	r1, r5
   230a6:	3308      	adds	r3, #8
   230a8:	e9cd 7300 	strd	r7, r3, [sp]
   230ac:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   230b0:	4620      	mov	r0, r4
   230b2:	f000 fd2b 	bl	23b0c <shell_cmd_get>
	cmd_len = shell_strlen(match->syntax);
   230b6:	9b1a      	ldr	r3, [sp, #104]	; 0x68
   230b8:	6818      	ldr	r0, [r3, #0]
   230ba:	f01d ffa4 	bl	41006 <shell_strlen>
	if (cmd_len != arg_len) {
   230be:	4286      	cmp	r6, r0
   230c0:	d007      	beq.n	230d2 <shell_process+0x2de>
					   match->syntax + arg_len,
   230c2:	9b1a      	ldr	r3, [sp, #104]	; 0x68
		shell_op_completion_insert(shell,
   230c4:	1b82      	subs	r2, r0, r6
   230c6:	6819      	ldr	r1, [r3, #0]
   230c8:	b292      	uxth	r2, r2
   230ca:	4431      	add	r1, r6
   230cc:	4620      	mov	r0, r4
   230ce:	f01e f9b2 	bl	41436 <shell_op_completion_insert>
	if (!isspace((int) shell->ctx->cmd_buff[
   230d2:	68a3      	ldr	r3, [r4, #8]
   230d4:	8e9a      	ldrh	r2, [r3, #52]	; 0x34
   230d6:	441a      	add	r2, r3
   230d8:	f892 1038 	ldrb.w	r1, [r2, #56]	; 0x38
   230dc:	4abc      	ldr	r2, [pc, #752]	; (233d0 <shell_process+0x5dc>)
   230de:	5c8a      	ldrb	r2, [r1, r2]
   230e0:	f012 0208 	ands.w	r2, r2, #8
   230e4:	d11a      	bne.n	2311c <shell_process+0x328>
	return ((shell->ctx->internal.flags.insert_mode == 1) ? true : false);
   230e6:	f8d3 1258 	ldr.w	r1, [r3, #600]	; 0x258
		if (flag_insert_mode_get(shell)) {
   230ea:	07c9      	lsls	r1, r1, #31
   230ec:	d511      	bpl.n	23112 <shell_process+0x31e>
	shell->ctx->internal.flags.insert_mode = val ? 1 : 0;
   230ee:	f8b3 1258 	ldrh.w	r1, [r3, #600]	; 0x258
			shell_op_char_insert(shell, ' ');
   230f2:	4620      	mov	r0, r4
   230f4:	f362 0100 	bfi	r1, r2, #0, #1
   230f8:	f8a3 1258 	strh.w	r1, [r3, #600]	; 0x258
   230fc:	2120      	movs	r1, #32
   230fe:	f001 f805 	bl	2410c <shell_op_char_insert>
			flag_insert_mode_set(shell, true);
   23102:	68a2      	ldr	r2, [r4, #8]
   23104:	f8b2 3258 	ldrh.w	r3, [r2, #600]	; 0x258
   23108:	f043 0301 	orr.w	r3, r3, #1
	shell->ctx->internal.flags.history_exit = val ? 1 : 0;
   2310c:	f8a2 3258 	strh.w	r3, [r2, #600]	; 0x258
   23110:	e6a1      	b.n	22e56 <shell_process+0x62>
			shell_op_char_insert(shell, ' ');
   23112:	2120      	movs	r1, #32
					shell_op_char_insert(shell, data);
   23114:	4620      	mov	r0, r4
   23116:	f000 fff9 	bl	2410c <shell_op_char_insert>
   2311a:	e69c      	b.n	22e56 <shell_process+0x62>
		shell_op_cursor_move(shell, 1);
   2311c:	2101      	movs	r1, #1
   2311e:	4620      	mov	r0, r4
   23120:	f01e f8cc 	bl	412bc <shell_op_cursor_move>
   23124:	e697      	b.n	22e56 <shell_process+0x62>
   23126:	9306      	str	r3, [sp, #24]
	} else if (cnt > 1) {
   23128:	f67f ae95 	bls.w	22e56 <shell_process+0x62>
		tab_options_print(shell, cmd, argv[arg_idx], first, cnt,
   2312c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   2312e:	ab2c      	add	r3, sp, #176	; 0xb0
   23130:	eb03 0282 	add.w	r2, r3, r2, lsl #2
   23134:	f852 3c34 	ldr.w	r3, [r2, #-52]
	longest_option += shell_strlen(tab);
   23138:	f8df 82a4 	ldr.w	r8, [pc, #676]	; 233e0 <shell_process+0x5ec>
	size_t str_len = shell_strlen(str);
   2313c:	4618      	mov	r0, r3
		tab_options_print(shell, cmd, argv[arg_idx], first, cnt,
   2313e:	9304      	str	r3, [sp, #16]
	size_t str_len = shell_strlen(str);
   23140:	f01d ff61 	bl	41006 <shell_strlen>
		shell->ctx->vt100_ctx.printed_cmd = 0;
   23144:	9b06      	ldr	r3, [sp, #24]
   23146:	68a2      	ldr	r2, [r4, #8]
   23148:	f8dd 900c 	ldr.w	r9, [sp, #12]
	size_t str_len = shell_strlen(str);
   2314c:	9008      	str	r0, [sp, #32]
		shell->ctx->vt100_ctx.printed_cmd = 0;
   2314e:	8613      	strh	r3, [r2, #48]	; 0x30
   23150:	9606      	str	r6, [sp, #24]
		shell_cmd_get(shell, cmd ? cmd->subcmd : NULL, cmd ? 1 : 0,
   23152:	2d00      	cmp	r5, #0
   23154:	d078      	beq.n	23248 <shell_process+0x454>
   23156:	68a9      	ldr	r1, [r5, #8]
   23158:	68a3      	ldr	r3, [r4, #8]
   2315a:	4620      	mov	r0, r4
   2315c:	3308      	adds	r3, #8
   2315e:	9301      	str	r3, [sp, #4]
   23160:	ab1a      	add	r3, sp, #104	; 0x68
   23162:	9300      	str	r3, [sp, #0]
   23164:	9a02      	ldr	r2, [sp, #8]
   23166:	464b      	mov	r3, r9
   23168:	f000 fcd0 	bl	23b0c <shell_cmd_get>
		is_empty = is_empty_cmd(match);
   2316c:	9b1a      	ldr	r3, [sp, #104]	; 0x68
		idx++;
   2316e:	f109 0901 	add.w	r9, r9, #1
	return entry->syntax &&
   23172:	6818      	ldr	r0, [r3, #0]
		(entry->handler == NULL) && (entry->subcmd == NULL);
   23174:	2800      	cmp	r0, #0
   23176:	d169      	bne.n	2324c <shell_process+0x458>
		tab_item_print(shell, match->syntax, longest);
   23178:	9b1a      	ldr	r3, [sp, #104]	; 0x68
   2317a:	f8d3 a000 	ldr.w	sl, [r3]
	if (option == NULL) {
   2317e:	f1ba 0f00 	cmp.w	sl, #0
   23182:	d173      	bne.n	2326c <shell_process+0x478>
		shell->ctx->vt100_ctx.printed_cmd = 0;
   23184:	68a3      	ldr	r3, [r4, #8]
   23186:	f8a3 a030 	strh.w	sl, [r3, #48]	; 0x30
	while (cnt) {
   2318a:	9b06      	ldr	r3, [sp, #24]
   2318c:	3b01      	subs	r3, #1
   2318e:	9306      	str	r3, [sp, #24]
   23190:	d1df      	bne.n	23152 <shell_process+0x35e>
	shell_raw_fprintf(shell->fprintf_ctx, "\n");
   23192:	4990      	ldr	r1, [pc, #576]	; (233d4 <shell_process+0x5e0>)
   23194:	6960      	ldr	r0, [r4, #20]
   23196:	f01d ff3c 	bl	41012 <shell_raw_fprintf>
	shell_print_prompt_and_cmd(shell);
   2319a:	4620      	mov	r0, r4
   2319c:	f000 ffe8 	bl	24170 <shell_print_prompt_and_cmd>
		partial_autocomplete(shell, cmd, argv[arg_idx], first, cnt);
   231a0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   231a2:	aa2c      	add	r2, sp, #176	; 0xb0
   231a4:	eb02 0383 	add.w	r3, r2, r3, lsl #2
	u16_t arg_len = shell_strlen(arg);
   231a8:	f853 0c34 	ldr.w	r0, [r3, #-52]
   231ac:	f01d ff2b 	bl	41006 <shell_strlen>
	size_t idx = first + 1;
   231b0:	9b03      	ldr	r3, [sp, #12]
	u16_t arg_len = shell_strlen(arg);
   231b2:	4680      	mov	r8, r0
	size_t idx = first + 1;
   231b4:	f103 0901 	add.w	r9, r3, #1
	shell_cmd_get(shell, cmd ? cmd->subcmd : NULL, cmd ? 1 : 0,
   231b8:	2d00      	cmp	r5, #0
   231ba:	f000 808f 	beq.w	232dc <shell_process+0x4e8>
   231be:	68a9      	ldr	r1, [r5, #8]
   231c0:	ab15      	add	r3, sp, #84	; 0x54
   231c2:	9301      	str	r3, [sp, #4]
   231c4:	ab0e      	add	r3, sp, #56	; 0x38
   231c6:	9300      	str	r3, [sp, #0]
   231c8:	4620      	mov	r0, r4
   231ca:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   231ce:	f000 fc9d 	bl	23b0c <shell_cmd_get>
	strncpy(shell->ctx->temp_buff, match->syntax,
   231d2:	9f0e      	ldr	r7, [sp, #56]	; 0x38
__ssp_bos_icheck3_restrict(strncpy, char *, const char *)
   231d4:	68a0      	ldr	r0, [r4, #8]
   231d6:	6839      	ldr	r1, [r7, #0]
   231d8:	22ff      	movs	r2, #255	; 0xff
   231da:	f500 709c 	add.w	r0, r0, #312	; 0x138
   231de:	f021 ffd1 	bl	45184 <strncpy>
	*str = match->syntax;
   231e2:	f8d7 a000 	ldr.w	sl, [r7]
	u16_t common = UINT16_MAX;
   231e6:	f64f 77ff 	movw	r7, #65535	; 0xffff
		shell_cmd_get(shell, cmd ? cmd->subcmd : NULL, cmd ? 1 : 0,
   231ea:	2d00      	cmp	r5, #0
   231ec:	d078      	beq.n	232e0 <shell_process+0x4ec>
   231ee:	68a9      	ldr	r1, [r5, #8]
   231f0:	ab1a      	add	r3, sp, #104	; 0x68
   231f2:	9301      	str	r3, [sp, #4]
   231f4:	ab0f      	add	r3, sp, #60	; 0x3c
   231f6:	9300      	str	r3, [sp, #0]
   231f8:	9a02      	ldr	r2, [sp, #8]
   231fa:	464b      	mov	r3, r9
   231fc:	4620      	mov	r0, r4
   231fe:	f000 fc85 	bl	23b0c <shell_cmd_get>
		if (match2 == NULL) {
   23202:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
		shell_cmd_get(shell, cmd ? cmd->subcmd : NULL, cmd ? 1 : 0,
   23204:	f109 0b01 	add.w	fp, r9, #1
		if (match2 == NULL) {
   23208:	2b00      	cmp	r3, #0
   2320a:	d06b      	beq.n	232e4 <shell_process+0x4f0>
	size_t common = 0;
   2320c:	2200      	movs	r2, #0
		curr_common = str_common(shell->ctx->temp_buff, match2->syntax,
   2320e:	6818      	ldr	r0, [r3, #0]
static size_t str_common(const char *s1, const char *s2, size_t n)
   23210:	68a3      	ldr	r3, [r4, #8]
   23212:	f503 739c 	add.w	r3, r3, #312	; 0x138
	while ((n > 0) && (*s1 == *s2) && (*s1 != '\0')) {
   23216:	f813 cb01 	ldrb.w	ip, [r3], #1
   2321a:	5c81      	ldrb	r1, [r0, r2]
   2321c:	4561      	cmp	r1, ip
   2321e:	d105      	bne.n	2322c <shell_process+0x438>
   23220:	b121      	cbz	r1, 2322c <shell_process+0x438>
   23222:	f64f 71ff 	movw	r1, #65535	; 0xffff
		common++;
   23226:	3201      	adds	r2, #1
	while ((n > 0) && (*s1 == *s2) && (*s1 != '\0')) {
   23228:	428a      	cmp	r2, r1
   2322a:	d1f4      	bne.n	23216 <shell_process+0x422>
		if ((arg_len == 0U) || (curr_common >= arg_len)) {
   2322c:	f1b8 0f00 	cmp.w	r8, #0
   23230:	d001      	beq.n	23236 <shell_process+0x442>
   23232:	4542      	cmp	r2, r8
   23234:	db06      	blt.n	23244 <shell_process+0x450>
			common = (curr_common < common) ? curr_common : common;
   23236:	4297      	cmp	r7, r2
   23238:	bfa8      	it	ge
   2323a:	4617      	movge	r7, r2
			--cnt;
   2323c:	3e01      	subs	r6, #1
	while (cnt > 1) {
   2323e:	2e01      	cmp	r6, #1
			common = (curr_common < common) ? curr_common : common;
   23240:	b2bf      	uxth	r7, r7
	while (cnt > 1) {
   23242:	d04f      	beq.n	232e4 <shell_process+0x4f0>
		shell_cmd_get(shell, cmd ? cmd->subcmd : NULL, cmd ? 1 : 0,
   23244:	46d9      	mov	r9, fp
   23246:	e7d0      	b.n	231ea <shell_process+0x3f6>
		shell_cmd_get(shell, cmd ? cmd->subcmd : NULL, cmd ? 1 : 0,
   23248:	4629      	mov	r1, r5
   2324a:	e785      	b.n	23158 <shell_process+0x364>
	return entry->syntax &&
   2324c:	68da      	ldr	r2, [r3, #12]
   2324e:	b91a      	cbnz	r2, 23258 <shell_process+0x464>
		(entry->handler == NULL) && (entry->subcmd == NULL);
   23250:	689b      	ldr	r3, [r3, #8]
   23252:	2b00      	cmp	r3, #0
   23254:	f43f af7d 	beq.w	23152 <shell_process+0x35e>
		if (is_empty || (str && match->syntax &&
   23258:	9b04      	ldr	r3, [sp, #16]
   2325a:	2b00      	cmp	r3, #0
   2325c:	d08c      	beq.n	23178 <shell_process+0x384>
	return (strncmp(candidate, str, len) == 0) ? true : false;
   2325e:	9a08      	ldr	r2, [sp, #32]
   23260:	9904      	ldr	r1, [sp, #16]
   23262:	f021 ff7d 	bl	45160 <strncmp>
		if (is_empty || (str && match->syntax &&
   23266:	2800      	cmp	r0, #0
   23268:	d086      	beq.n	23178 <shell_process+0x384>
   2326a:	e772      	b.n	23152 <shell_process+0x35e>
	longest_option += shell_strlen(tab);
   2326c:	4640      	mov	r0, r8
   2326e:	f01d feca 	bl	41006 <shell_strlen>
   23272:	9b05      	ldr	r3, [sp, #20]
   23274:	4418      	add	r0, r3
	columns = (shell->ctx->vt100_ctx.cons.terminal_wid
   23276:	68a3      	ldr	r3, [r4, #8]
	longest_option += shell_strlen(tab);
   23278:	fa1f fb80 	uxth.w	fp, r0
			- shell_strlen(tab)) / longest_option;
   2327c:	4640      	mov	r0, r8
	columns = (shell->ctx->vt100_ctx.cons.terminal_wid
   2327e:	8d5f      	ldrh	r7, [r3, #42]	; 0x2a
			- shell_strlen(tab)) / longest_option;
   23280:	f01d fec1 	bl	41006 <shell_strlen>
   23284:	9009      	str	r0, [sp, #36]	; 0x24
	diff = longest_option - shell_strlen(option);
   23286:	4650      	mov	r0, sl
   23288:	f01d febd 	bl	41006 <shell_strlen>
   2328c:	ebab 0000 	sub.w	r0, fp, r0
   23290:	b283      	uxth	r3, r0
   23292:	9307      	str	r3, [sp, #28]
			- shell_strlen(tab)) / longest_option;
   23294:	9b09      	ldr	r3, [sp, #36]	; 0x24
	if (shell->ctx->vt100_ctx.printed_cmd++ % columns == 0U) {
   23296:	68a1      	ldr	r1, [r4, #8]
			- shell_strlen(tab)) / longest_option;
   23298:	1aff      	subs	r7, r7, r3
   2329a:	fb97 fbfb 	sdiv	fp, r7, fp
	if (shell->ctx->vt100_ctx.printed_cmd++ % columns == 0U) {
   2329e:	8e0a      	ldrh	r2, [r1, #48]	; 0x30
   232a0:	fa1f fb8b 	uxth.w	fp, fp
   232a4:	fbb2 f3fb 	udiv	r3, r2, fp
   232a8:	1c50      	adds	r0, r2, #1
   232aa:	fb0b 2213 	mls	r2, fp, r3, r2
   232ae:	b292      	uxth	r2, r2
   232b0:	8608      	strh	r0, [r1, #48]	; 0x30
   232b2:	b962      	cbnz	r2, 232ce <shell_process+0x4da>
		shell_internal_fprintf(shell, SHELL_OPTION, "\n%s%s", tab,
   232b4:	f8cd a000 	str.w	sl, [sp]
   232b8:	4643      	mov	r3, r8
   232ba:	4a47      	ldr	r2, [pc, #284]	; (233d8 <shell_process+0x5e4>)
   232bc:	2107      	movs	r1, #7
   232be:	4620      	mov	r0, r4
   232c0:	f000 fe3c 	bl	23f3c <shell_internal_fprintf>
	shell_op_cursor_horiz_move(shell, diff);
   232c4:	9907      	ldr	r1, [sp, #28]
   232c6:	4620      	mov	r0, r4
   232c8:	f000 fcf0 	bl	23cac <shell_op_cursor_horiz_move>
   232cc:	e75d      	b.n	2318a <shell_process+0x396>
		shell_internal_fprintf(shell, SHELL_OPTION, "%s", option);
   232ce:	4653      	mov	r3, sl
   232d0:	4a42      	ldr	r2, [pc, #264]	; (233dc <shell_process+0x5e8>)
   232d2:	2107      	movs	r1, #7
   232d4:	4620      	mov	r0, r4
   232d6:	f000 fe31 	bl	23f3c <shell_internal_fprintf>
   232da:	e7f3      	b.n	232c4 <shell_process+0x4d0>
	shell_cmd_get(shell, cmd ? cmd->subcmd : NULL, cmd ? 1 : 0,
   232dc:	4629      	mov	r1, r5
   232de:	e76f      	b.n	231c0 <shell_process+0x3cc>
		shell_cmd_get(shell, cmd ? cmd->subcmd : NULL, cmd ? 1 : 0,
   232e0:	4629      	mov	r1, r5
   232e2:	e785      	b.n	231f0 <shell_process+0x3fc>
	if (common) {
   232e4:	2f00      	cmp	r7, #0
   232e6:	f43f adb6 	beq.w	22e56 <shell_process+0x62>
		shell_op_completion_insert(shell, &completion[arg_len],
   232ea:	eba7 0208 	sub.w	r2, r7, r8
   232ee:	b292      	uxth	r2, r2
   232f0:	eb0a 0108 	add.w	r1, sl, r8
   232f4:	4620      	mov	r0, r4
   232f6:	f01e f89e 	bl	41436 <shell_op_completion_insert>
   232fa:	e5ac      	b.n	22e56 <shell_process+0x62>
	return shell->ctx->internal.flags.echo == 1 ? true : false;
   232fc:	f8d0 3258 	ldr.w	r3, [r0, #600]	; 0x258
				if (flag_echo_get(shell)) {
   23300:	075b      	lsls	r3, r3, #29
   23302:	f57f ada8 	bpl.w	22e56 <shell_process+0x62>
	shell->ctx->internal.flags.history_exit = val ? 1 : 0;
   23306:	f8b0 3258 	ldrh.w	r3, [r0, #600]	; 0x258
   2330a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   2330e:	f8a0 3258 	strh.w	r3, [r0, #600]	; 0x258
						shell_op_char_backspace(shell);
   23312:	4620      	mov	r0, r4
   23314:	f01e f8ac 	bl	41470 <shell_op_char_backspace>
   23318:	e59d      	b.n	22e56 <shell_process+0x62>
	return shell->ctx->internal.flags.echo == 1 ? true : false;
   2331a:	f8d0 3258 	ldr.w	r3, [r0, #600]	; 0x258
				} else if (flag_echo_get(shell)) {
   2331e:	075d      	lsls	r5, r3, #29
   23320:	f57f ad99 	bpl.w	22e56 <shell_process+0x62>
	switch (data) {
   23324:	3901      	subs	r1, #1
   23326:	2916      	cmp	r1, #22
   23328:	f63f ad95 	bhi.w	22e56 <shell_process+0x62>
   2332c:	a301      	add	r3, pc, #4	; (adr r3, 23334 <shell_process+0x540>)
   2332e:	f853 f021 	ldr.w	pc, [r3, r1, lsl #2]
   23332:	bf00      	nop
   23334:	00023519 	.word	0x00023519
   23338:	00023391 	.word	0x00023391
   2333c:	00023399 	.word	0x00023399
   23340:	00022f43 	.word	0x00022f43
   23344:	0002350d 	.word	0x0002350d
   23348:	000233bf 	.word	0x000233bf
   2334c:	00022e57 	.word	0x00022e57
   23350:	00022e57 	.word	0x00022e57
   23354:	00022e57 	.word	0x00022e57
   23358:	00022e57 	.word	0x00022e57
   2335c:	000233c7 	.word	0x000233c7
   23360:	000233e5 	.word	0x000233e5
   23364:	00022e57 	.word	0x00022e57
   23368:	00023401 	.word	0x00023401
   2336c:	00022e57 	.word	0x00022e57
   23370:	0002340b 	.word	0x0002340b
   23374:	00022e57 	.word	0x00022e57
   23378:	00022e57 	.word	0x00022e57
   2337c:	00022e57 	.word	0x00022e57
   23380:	00022e57 	.word	0x00022e57
   23384:	0002340f 	.word	0x0002340f
   23388:	00022e57 	.word	0x00022e57
   2338c:	0002343b 	.word	0x0002343b
		shell_op_left_arrow(shell);
   23390:	4620      	mov	r0, r4
   23392:	f01d ffc4 	bl	4131e <shell_op_left_arrow>
		break;
   23396:	e55e      	b.n	22e56 <shell_process+0x62>
		shell_op_cursor_end_move(shell);
   23398:	4620      	mov	r0, r4
   2339a:	f01d ffb9 	bl	41310 <shell_op_cursor_end_move>
		if (!shell_cursor_in_empty_line(shell)) {
   2339e:	4620      	mov	r0, r4
   233a0:	f01d ff78 	bl	41294 <shell_cursor_in_empty_line>
   233a4:	b918      	cbnz	r0, 233ae <shell_process+0x5ba>
	shell_raw_fprintf(shell->fprintf_ctx, "\n");
   233a6:	490b      	ldr	r1, [pc, #44]	; (233d4 <shell_process+0x5e0>)
   233a8:	6960      	ldr	r0, [r4, #20]
   233aa:	f01d fe32 	bl	41012 <shell_raw_fprintf>
		flag_history_exit_set(shell, true);
   233ae:	68a2      	ldr	r2, [r4, #8]
	shell->ctx->internal.flags.history_exit = val ? 1 : 0;
   233b0:	f8b2 3258 	ldrh.w	r3, [r2, #600]	; 0x258
   233b4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   233b8:	f8a2 3258 	strh.w	r3, [r2, #600]	; 0x258
   233bc:	e5a6      	b.n	22f0c <shell_process+0x118>
		shell_op_right_arrow(shell);
   233be:	4620      	mov	r0, r4
   233c0:	f01d ffb5 	bl	4132e <shell_op_right_arrow>
		break;
   233c4:	e547      	b.n	22e56 <shell_process+0x62>
		shell_op_delete_from_cursor(shell);
   233c6:	4620      	mov	r0, r4
   233c8:	f01d ffba 	bl	41340 <shell_op_delete_from_cursor>
		break;
   233cc:	e543      	b.n	22e56 <shell_process+0x62>
   233ce:	bf00      	nop
   233d0:	0004d857 	.word	0x0004d857
   233d4:	0004a298 	.word	0x0004a298
   233d8:	000489de 	.word	0x000489de
   233dc:	00047a4a 	.word	0x00047a4a
   233e0:	000483f4 	.word	0x000483f4
		SHELL_VT100_CMD(shell, SHELL_VT100_CURSORHOME);
   233e4:	6960      	ldr	r0, [r4, #20]
   233e6:	4a62      	ldr	r2, [pc, #392]	; (23570 <shell_process+0x77c>)
   233e8:	4962      	ldr	r1, [pc, #392]	; (23574 <shell_process+0x780>)
   233ea:	f01d fe12 	bl	41012 <shell_raw_fprintf>
		SHELL_VT100_CMD(shell, SHELL_VT100_CLEARSCREEN);
   233ee:	6960      	ldr	r0, [r4, #20]
   233f0:	4a61      	ldr	r2, [pc, #388]	; (23578 <shell_process+0x784>)
   233f2:	4960      	ldr	r1, [pc, #384]	; (23574 <shell_process+0x780>)
   233f4:	f01d fe0d 	bl	41012 <shell_raw_fprintf>
		shell_print_prompt_and_cmd(shell);
   233f8:	4620      	mov	r0, r4
   233fa:	f000 feb9 	bl	24170 <shell_print_prompt_and_cmd>
		break;
   233fe:	e52a      	b.n	22e56 <shell_process+0x62>
		history_handle(shell, false);
   23400:	2100      	movs	r1, #0
		history_handle(shell, true);
   23402:	4620      	mov	r0, r4
   23404:	f7ff fb6c 	bl	22ae0 <history_handle>
		break;
   23408:	e525      	b.n	22e56 <shell_process+0x62>
		history_handle(shell, true);
   2340a:	2101      	movs	r1, #1
   2340c:	e7f9      	b.n	23402 <shell_process+0x60e>
		shell_op_cursor_home_move(shell);
   2340e:	4620      	mov	r0, r4
   23410:	f01d ff78 	bl	41304 <shell_op_cursor_home_move>
	shell->ctx->cmd_buff[0] = '\0'; /* clear command buffer */
   23414:	2200      	movs	r2, #0
		cmd_buffer_clear(shell);
   23416:	68a3      	ldr	r3, [r4, #8]
	SHELL_VT100_CMD(shell, SHELL_VT100_CLEAREOS);
   23418:	4956      	ldr	r1, [pc, #344]	; (23574 <shell_process+0x780>)
	shell->ctx->cmd_buff[0] = '\0'; /* clear command buffer */
   2341a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
	shell->ctx->cmd_buff_pos = 0;
   2341e:	869a      	strh	r2, [r3, #52]	; 0x34
	shell->ctx->cmd_buff_len = 0;
   23420:	865a      	strh	r2, [r3, #50]	; 0x32
		flag_history_exit_set(shell, true);
   23422:	68a2      	ldr	r2, [r4, #8]
	shell->ctx->internal.flags.history_exit = val ? 1 : 0;
   23424:	f8b2 3258 	ldrh.w	r3, [r2, #600]	; 0x258
   23428:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   2342c:	f8a2 3258 	strh.w	r3, [r2, #600]	; 0x258
	SHELL_VT100_CMD(shell, SHELL_VT100_CLEAREOS);
   23430:	6960      	ldr	r0, [r4, #20]
   23432:	4a52      	ldr	r2, [pc, #328]	; (2357c <shell_process+0x788>)
   23434:	f01d fded 	bl	41012 <shell_raw_fprintf>
   23438:	e50d      	b.n	22e56 <shell_process+0x62>
		shell_op_word_remove(shell);
   2343a:	4620      	mov	r0, r4
   2343c:	f000 fde8 	bl	24010 <shell_op_word_remove>
		flag_history_exit_set(shell, true);
   23440:	68a2      	ldr	r2, [r4, #8]
	shell->ctx->internal.flags.history_exit = val ? 1 : 0;
   23442:	f8b2 3258 	ldrh.w	r3, [r2, #600]	; 0x258
   23446:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   2344a:	e65f      	b.n	2310c <shell_process+0x318>
			if (data == '[') {
   2344c:	295b      	cmp	r1, #91	; 0x5b
   2344e:	d101      	bne.n	23454 <shell_process+0x660>
	shell->ctx->receive_state = state;
   23450:	2302      	movs	r3, #2
   23452:	e57b      	b.n	22f4c <shell_process+0x158>
	return shell->ctx->internal.flags.echo == 1 ? true : false;
   23454:	f8d0 3258 	ldr.w	r3, [r0, #600]	; 0x258
			} else if (flag_echo_get(shell)) {
   23458:	0758      	lsls	r0, r3, #29
   2345a:	d506      	bpl.n	2346a <shell_process+0x676>
	if (data == SHELL_VT100_ASCII_ALT_B) {
   2345c:	2962      	cmp	r1, #98	; 0x62
   2345e:	d108      	bne.n	23472 <shell_process+0x67e>
		shell_op_cursor_word_move(shell, -1);
   23460:	f04f 31ff 	mov.w	r1, #4294967295
		shell_op_cursor_word_move(shell, 1);
   23464:	4620      	mov	r0, r4
   23466:	f000 fc6f 	bl	23d48 <shell_op_cursor_word_move>
	shell->ctx->receive_state = state;
   2346a:	2200      	movs	r2, #0
   2346c:	68a3      	ldr	r3, [r4, #8]
   2346e:	715a      	strb	r2, [r3, #5]
   23470:	e4f1      	b.n	22e56 <shell_process+0x62>
	} else if (data == SHELL_VT100_ASCII_ALT_F) {
   23472:	2966      	cmp	r1, #102	; 0x66
   23474:	d1f9      	bne.n	2346a <shell_process+0x676>
		shell_op_cursor_word_move(shell, 1);
   23476:	2101      	movs	r1, #1
   23478:	e7f4      	b.n	23464 <shell_process+0x670>
	shell->ctx->receive_state = state;
   2347a:	2300      	movs	r3, #0
   2347c:	7143      	strb	r3, [r0, #5]
   2347e:	f8d0 3258 	ldr.w	r3, [r0, #600]	; 0x258
			if (!flag_echo_get(shell)) {
   23482:	075a      	lsls	r2, r3, #29
   23484:	f57f ace7 	bpl.w	22e56 <shell_process+0x62>
			switch (data) {
   23488:	3931      	subs	r1, #49	; 0x31
   2348a:	291b      	cmp	r1, #27
   2348c:	f63f ace3 	bhi.w	22e56 <shell_process+0x62>
   23490:	a301      	add	r3, pc, #4	; (adr r3, 23498 <shell_process+0x6a4>)
   23492:	f853 f021 	ldr.w	pc, [r3, r1, lsl #2]
   23496:	bf00      	nop
   23498:	00023515 	.word	0x00023515
   2349c:	00023521 	.word	0x00023521
   234a0:	0002353f 	.word	0x0002353f
   234a4:	00023509 	.word	0x00023509
   234a8:	00022e57 	.word	0x00022e57
   234ac:	00022e57 	.word	0x00022e57
   234b0:	00022e57 	.word	0x00022e57
   234b4:	00022e57 	.word	0x00022e57
   234b8:	00022e57 	.word	0x00022e57
   234bc:	00022e57 	.word	0x00022e57
   234c0:	00022e57 	.word	0x00022e57
   234c4:	00022e57 	.word	0x00022e57
   234c8:	00022e57 	.word	0x00022e57
   234cc:	00022e57 	.word	0x00022e57
   234d0:	00022e57 	.word	0x00022e57
   234d4:	00022e57 	.word	0x00022e57
   234d8:	0002340b 	.word	0x0002340b
   234dc:	00023401 	.word	0x00023401
   234e0:	000233bf 	.word	0x000233bf
   234e4:	00023391 	.word	0x00023391
   234e8:	00022e57 	.word	0x00022e57
   234ec:	0002350d 	.word	0x0002350d
   234f0:	00022e57 	.word	0x00022e57
   234f4:	00023519 	.word	0x00023519
   234f8:	00022e57 	.word	0x00022e57
   234fc:	00022e57 	.word	0x00022e57
   23500:	00022e57 	.word	0x00022e57
   23504:	00023525 	.word	0x00023525
	shell->ctx->receive_state = state;
   23508:	2303      	movs	r3, #3
   2350a:	7143      	strb	r3, [r0, #5]
		shell_op_cursor_end_move(shell);
   2350c:	4620      	mov	r0, r4
   2350e:	f01d feff 	bl	41310 <shell_op_cursor_end_move>
		break;
   23512:	e4a0      	b.n	22e56 <shell_process+0x62>
	shell->ctx->receive_state = state;
   23514:	2303      	movs	r3, #3
   23516:	7143      	strb	r3, [r0, #5]
		shell_op_cursor_home_move(shell);
   23518:	4620      	mov	r0, r4
   2351a:	f01d fef3 	bl	41304 <shell_op_cursor_home_move>
		break;
   2351e:	e49a      	b.n	22e56 <shell_process+0x62>
	shell->ctx->receive_state = state;
   23520:	2303      	movs	r3, #3
   23522:	7143      	strb	r3, [r0, #5]
	return ((shell->ctx->internal.flags.insert_mode == 1) ? true : false);
   23524:	f8d0 3258 	ldr.w	r3, [r0, #600]	; 0x258
	shell->ctx->internal.flags.insert_mode = val ? 1 : 0;
   23528:	f8b0 2258 	ldrh.w	r2, [r0, #600]	; 0x258
	return ((shell->ctx->internal.flags.insert_mode == 1) ? true : false);
   2352c:	f003 0301 	and.w	r3, r3, #1
				flag_insert_mode_set(shell, !status);
   23530:	f083 0301 	eor.w	r3, r3, #1
	shell->ctx->internal.flags.insert_mode = val ? 1 : 0;
   23534:	f363 0200 	bfi	r2, r3, #0, #1
   23538:	f8a0 2258 	strh.w	r2, [r0, #600]	; 0x258
   2353c:	e48b      	b.n	22e56 <shell_process+0x62>
	shell->ctx->receive_state = state;
   2353e:	2303      	movs	r3, #3
   23540:	7143      	strb	r3, [r0, #5]
	return shell->ctx->internal.flags.echo == 1 ? true : false;
   23542:	f8d0 3258 	ldr.w	r3, [r0, #600]	; 0x258
				if (flag_echo_get(shell)) {
   23546:	075b      	lsls	r3, r3, #29
   23548:	f57f ac85 	bpl.w	22e56 <shell_process+0x62>
   2354c:	e4f9      	b.n	22f42 <shell_process+0x14e>
	shell->ctx->receive_state = state;
   2354e:	2300      	movs	r3, #0
   23550:	e4fc      	b.n	22f4c <shell_process+0x158>
 * @return Previous value of @a target.
 */
#ifdef CONFIG_ATOMIC_OPERATIONS_BUILTIN
static inline atomic_val_t atomic_and(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   23552:	68a3      	ldr	r3, [r4, #8]
   23554:	f503 7316 	add.w	r3, r3, #600	; 0x258
   23558:	e8d3 2fef 	ldaex	r2, [r3]
   2355c:	f022 0208 	bic.w	r2, r2, #8
   23560:	e8c3 2fe1 	stlex	r1, r2, [r3]
   23564:	2900      	cmp	r1, #0
   23566:	d1f7      	bne.n	23558 <shell_process+0x764>

	internal.value = 0xFFFFFFFF;
	internal.flags.processing = 0U;
	(void)atomic_and((atomic_t *)&shell->ctx->internal.value,
			 internal.value);
}
   23568:	b02d      	add	sp, #180	; 0xb4
   2356a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2356e:	bf00      	nop
   23570:	000487c9 	.word	0x000487c9
   23574:	00047a4a 	.word	0x00047a4a
   23578:	000487cd 	.word	0x000487cd
   2357c:	000487c5 	.word	0x000487c5

00023580 <shell_init>:
{
   23580:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   23584:	460f      	mov	r7, r1
   23586:	b086      	sub	sp, #24
   23588:	461e      	mov	r6, r3
	__ASSERT_NO_MSG(shell);
   2358a:	4604      	mov	r4, r0
   2358c:	b958      	cbnz	r0, 235a6 <shell_init+0x26>
   2358e:	494e      	ldr	r1, [pc, #312]	; (236c8 <shell_init+0x148>)
   23590:	484e      	ldr	r0, [pc, #312]	; (236cc <shell_init+0x14c>)
   23592:	f240 43bf 	movw	r3, #1215	; 0x4bf
   23596:	4a4e      	ldr	r2, [pc, #312]	; (236d0 <shell_init+0x150>)
   23598:	f01d f833 	bl	40602 <printk>
   2359c:	f240 41bf 	movw	r1, #1215	; 0x4bf
   235a0:	484b      	ldr	r0, [pc, #300]	; (236d0 <shell_init+0x150>)
   235a2:	f01d f8f1 	bl	40788 <assert_post_action>
	__ASSERT_NO_MSG(shell->ctx && shell->iface && shell->default_prompt);
   235a6:	68a3      	ldr	r3, [r4, #8]
   235a8:	b11b      	cbz	r3, 235b2 <shell_init+0x32>
   235aa:	6863      	ldr	r3, [r4, #4]
   235ac:	b10b      	cbz	r3, 235b2 <shell_init+0x32>
   235ae:	6823      	ldr	r3, [r4, #0]
   235b0:	b95b      	cbnz	r3, 235ca <shell_init+0x4a>
   235b2:	4948      	ldr	r1, [pc, #288]	; (236d4 <shell_init+0x154>)
   235b4:	4845      	ldr	r0, [pc, #276]	; (236cc <shell_init+0x14c>)
   235b6:	f44f 6398 	mov.w	r3, #1216	; 0x4c0
   235ba:	4a45      	ldr	r2, [pc, #276]	; (236d0 <shell_init+0x150>)
   235bc:	f01d f821 	bl	40602 <printk>
   235c0:	f44f 6198 	mov.w	r1, #1216	; 0x4c0
   235c4:	4842      	ldr	r0, [pc, #264]	; (236d0 <shell_init+0x150>)
   235c6:	f01d f8df 	bl	40788 <assert_post_action>
	__ASSERT_NO_MSG((shell->shell_flag == SHELL_FLAG_CRLF_DEFAULT) ||
   235ca:	7c23      	ldrb	r3, [r4, #16]
   235cc:	3b01      	subs	r3, #1
   235ce:	2b01      	cmp	r3, #1
   235d0:	d90b      	bls.n	235ea <shell_init+0x6a>
   235d2:	4941      	ldr	r1, [pc, #260]	; (236d8 <shell_init+0x158>)
   235d4:	483d      	ldr	r0, [pc, #244]	; (236cc <shell_init+0x14c>)
   235d6:	f44f 6386 	mov.w	r3, #1072	; 0x430
   235da:	4a3d      	ldr	r2, [pc, #244]	; (236d0 <shell_init+0x150>)
   235dc:	f01d f811 	bl	40602 <printk>
   235e0:	f44f 6186 	mov.w	r1, #1072	; 0x430
   235e4:	483a      	ldr	r0, [pc, #232]	; (236d0 <shell_init+0x150>)
   235e6:	f01d f8cf 	bl	40788 <assert_post_action>
__ssp_bos_icheck3(memset, void *, int)
   235ea:	2100      	movs	r1, #0
   235ec:	f44f 7241 	mov.w	r2, #772	; 0x304
   235f0:	68a0      	ldr	r0, [r4, #8]
   235f2:	f021 fc67 	bl	44ec4 <memset>
	shell->ctx->prompt = shell->default_prompt;
   235f6:	68a3      	ldr	r3, [r4, #8]
   235f8:	6822      	ldr	r2, [r4, #0]
	shell_history_init(shell->history);
   235fa:	68e0      	ldr	r0, [r4, #12]
	shell->ctx->prompt = shell->default_prompt;
   235fc:	601a      	str	r2, [r3, #0]
	shell_history_init(shell->history);
   235fe:	f01e f834 	bl	4166a <shell_history_init>
	k_mutex_init(&shell->ctx->wr_mtx);
   23602:	68a0      	ldr	r0, [r4, #8]
   23604:	f500 703b 	add.w	r0, r0, #748	; 0x2ec
	return z_impl_k_mutex_init(mutex);
   23608:	f021 fa63 	bl	44ad2 <z_impl_k_mutex_init>
   2360c:	f44f 7827 	mov.w	r8, #668	; 0x29c
   23610:	f44f 7517 	mov.w	r5, #604	; 0x25c
		k_poll_signal_init(&shell->ctx->signals[i]);
   23614:	68a0      	ldr	r0, [r4, #8]
   23616:	4428      	add	r0, r5
		arch_syscall_invoke1(*(uintptr_t *)&signal, K_SYSCALL_K_POLL_SIGNAL_INIT);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_poll_signal_init(signal);
   23618:	f021 fbeb 	bl	44df2 <z_impl_k_poll_signal_init>
		k_poll_event_init(&shell->ctx->events[i],
   2361c:	68a0      	ldr	r0, [r4, #8]
   2361e:	2200      	movs	r2, #0
   23620:	1943      	adds	r3, r0, r5
   23622:	2101      	movs	r1, #1
   23624:	4440      	add	r0, r8
   23626:	3510      	adds	r5, #16
   23628:	f01b f800 	bl	3e62c <k_poll_event_init>
	for (int i = 0; i < SHELL_SIGNALS; i++) {
   2362c:	f5b5 7f27 	cmp.w	r5, #668	; 0x29c
   23630:	f108 0814 	add.w	r8, r8, #20
   23634:	d1ee      	bne.n	23614 <shell_init+0x94>
		shell->stats->log_lost_cnt = 0;
   23636:	2200      	movs	r2, #0
   23638:	69a3      	ldr	r3, [r4, #24]
   2363a:	601a      	str	r2, [r3, #0]
	flag_tx_rdy_set(shell, true);
   2363c:	68a3      	ldr	r3, [r4, #8]
	shell->ctx->internal.flags.tx_rdy = val ? 1 : 0;
   2363e:	f8b3 2258 	ldrh.w	r2, [r3, #600]	; 0x258
	shell->ctx->vt100_ctx.cons.name_len = shell_strlen(shell->ctx->prompt);
   23642:	6818      	ldr	r0, [r3, #0]
   23644:	f042 0210 	orr.w	r2, r2, #16
   23648:	f8a3 2258 	strh.w	r2, [r3, #600]	; 0x258
	shell->ctx->internal.flags.echo = val ? 1 : 0;
   2364c:	f8b3 2258 	ldrh.w	r2, [r3, #600]	; 0x258
   23650:	f042 0204 	orr.w	r2, r2, #4
   23654:	f8a3 2258 	strh.w	r2, [r3, #600]	; 0x258
	shell->ctx->internal.flags.mode_delete = val ? 1 : 0;
   23658:	f8b3 2258 	ldrh.w	r2, [r3, #600]	; 0x258
   2365c:	f042 0220 	orr.w	r2, r2, #32
   23660:	f8a3 2258 	strh.w	r2, [r3, #600]	; 0x258
	shell->ctx->state = SHELL_STATE_INITIALIZED;
   23664:	2201      	movs	r2, #1
   23666:	711a      	strb	r2, [r3, #4]
	shell->ctx->vt100_ctx.cons.terminal_hei = SHELL_DEFAULT_TERMINAL_HEIGHT;
   23668:	4a1c      	ldr	r2, [pc, #112]	; (236dc <shell_init+0x15c>)
   2366a:	629a      	str	r2, [r3, #40]	; 0x28
	shell->ctx->vt100_ctx.cons.name_len = shell_strlen(shell->ctx->prompt);
   2366c:	f01d fccb 	bl	41006 <shell_strlen>
   23670:	68a3      	ldr	r3, [r4, #8]
	return shell->iface->api->init(shell->iface, p_config,
   23672:	4639      	mov	r1, r7
	shell->ctx->vt100_ctx.cons.name_len = shell_strlen(shell->ctx->prompt);
   23674:	f883 002c 	strb.w	r0, [r3, #44]	; 0x2c
	flag_use_colors_set(shell, IS_ENABLED(CONFIG_SHELL_VT100_COLORS));
   23678:	68a2      	ldr	r2, [r4, #8]
	shell->ctx->internal.flags.use_colors = val ? 1 : 0;
   2367a:	f8b2 3258 	ldrh.w	r3, [r2, #600]	; 0x258
   2367e:	f043 0302 	orr.w	r3, r3, #2
   23682:	f8a2 3258 	strh.w	r3, [r2, #600]	; 0x258
	return shell->iface->api->init(shell->iface, p_config,
   23686:	6860      	ldr	r0, [r4, #4]
   23688:	4a15      	ldr	r2, [pc, #84]	; (236e0 <shell_init+0x160>)
   2368a:	6803      	ldr	r3, [r0, #0]
   2368c:	681d      	ldr	r5, [r3, #0]
   2368e:	4623      	mov	r3, r4
   23690:	47a8      	blx	r5
	if (err != 0) {
   23692:	4605      	mov	r5, r0
   23694:	b9a0      	cbnz	r0, 236c0 <shell_init+0x140>
	k_tid_t tid = k_thread_create(shell->thread,
   23696:	e9d4 010a 	ldrd	r0, r1, [r4, #40]	; 0x28
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   2369a:	230e      	movs	r3, #14
   2369c:	9303      	str	r3, [sp, #12]
   2369e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   236a0:	e9cd 5504 	strd	r5, r5, [sp, #16]
   236a4:	e9cd 6301 	strd	r6, r3, [sp, #4]
   236a8:	9400      	str	r4, [sp, #0]
   236aa:	4b0e      	ldr	r3, [pc, #56]	; (236e4 <shell_init+0x164>)
   236ac:	f44f 6200 	mov.w	r2, #2048	; 0x800
   236b0:	f01a f864 	bl	3d77c <z_impl_k_thread_create>
	shell->ctx->tid = tid;
   236b4:	68a3      	ldr	r3, [r4, #8]
	k_thread_name_set(tid, shell->thread_name);
   236b6:	6a61      	ldr	r1, [r4, #36]	; 0x24
	shell->ctx->tid = tid;
   236b8:	f8c3 0300 	str.w	r0, [r3, #768]	; 0x300
	return z_impl_k_thread_name_set(thread_id, value);
   236bc:	f021 fa86 	bl	44bcc <z_impl_k_thread_name_set>
}
   236c0:	4628      	mov	r0, r5
   236c2:	b006      	add	sp, #24
   236c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   236c8:	0004adfa 	.word	0x0004adfa
   236cc:	0004764f 	.word	0x0004764f
   236d0:	0004886c 	.word	0x0004886c
   236d4:	00048942 	.word	0x00048942
   236d8:	00048976 	.word	0x00048976
   236dc:	00500018 	.word	0x00500018
   236e0:	0004109f 	.word	0x0004109f
   236e4:	00023769 	.word	0x00023769

000236e8 <shell_start>:
{
   236e8:	b510      	push	{r4, lr}
	__ASSERT_NO_MSG(shell);
   236ea:	4604      	mov	r4, r0
   236ec:	b958      	cbnz	r0, 23706 <shell_start+0x1e>
   236ee:	4919      	ldr	r1, [pc, #100]	; (23754 <shell_start+0x6c>)
   236f0:	4819      	ldr	r0, [pc, #100]	; (23758 <shell_start+0x70>)
   236f2:	f240 43e7 	movw	r3, #1255	; 0x4e7
   236f6:	4a19      	ldr	r2, [pc, #100]	; (2375c <shell_start+0x74>)
   236f8:	f01c ff83 	bl	40602 <printk>
   236fc:	f240 41e7 	movw	r1, #1255	; 0x4e7
   23700:	4816      	ldr	r0, [pc, #88]	; (2375c <shell_start+0x74>)
   23702:	f01d f841 	bl	40788 <assert_post_action>
	__ASSERT_NO_MSG(shell->ctx && shell->iface && shell->default_prompt);
   23706:	68a3      	ldr	r3, [r4, #8]
   23708:	b11b      	cbz	r3, 23712 <shell_start+0x2a>
   2370a:	6863      	ldr	r3, [r4, #4]
   2370c:	b10b      	cbz	r3, 23712 <shell_start+0x2a>
   2370e:	6823      	ldr	r3, [r4, #0]
   23710:	b95b      	cbnz	r3, 2372a <shell_start+0x42>
   23712:	4913      	ldr	r1, [pc, #76]	; (23760 <shell_start+0x78>)
   23714:	4810      	ldr	r0, [pc, #64]	; (23758 <shell_start+0x70>)
   23716:	f44f 639d 	mov.w	r3, #1256	; 0x4e8
   2371a:	4a10      	ldr	r2, [pc, #64]	; (2375c <shell_start+0x74>)
   2371c:	f01c ff71 	bl	40602 <printk>
   23720:	f44f 619d 	mov.w	r1, #1256	; 0x4e8
   23724:	480d      	ldr	r0, [pc, #52]	; (2375c <shell_start+0x74>)
   23726:	f01d f82f 	bl	40788 <assert_post_action>
	if (shell->ctx->state != SHELL_STATE_INITIALIZED) {
   2372a:	68a3      	ldr	r3, [r4, #8]
   2372c:	791b      	ldrb	r3, [r3, #4]
   2372e:	2b01      	cmp	r3, #1
   23730:	d10c      	bne.n	2374c <shell_start+0x64>
		shell_vt100_color_set(shell, SHELL_NORMAL);
   23732:	2100      	movs	r1, #0
   23734:	4620      	mov	r0, r4
   23736:	f000 fbb7 	bl	23ea8 <shell_vt100_color_set>
	shell_raw_fprintf(shell->fprintf_ctx, "\n\n");
   2373a:	490a      	ldr	r1, [pc, #40]	; (23764 <shell_start+0x7c>)
   2373c:	6960      	ldr	r0, [r4, #20]
   2373e:	f01d fc68 	bl	41012 <shell_raw_fprintf>
	state_set(shell, SHELL_STATE_ACTIVE);
   23742:	4620      	mov	r0, r4
   23744:	f01d fc7b 	bl	4103e <state_set.constprop.31>
	return 0;
   23748:	2000      	movs	r0, #0
}
   2374a:	bd10      	pop	{r4, pc}
		return -ENOTSUP;
   2374c:	f06f 0085 	mvn.w	r0, #133	; 0x85
   23750:	e7fb      	b.n	2374a <shell_start+0x62>
   23752:	bf00      	nop
   23754:	0004adfa 	.word	0x0004adfa
   23758:	0004764f 	.word	0x0004764f
   2375c:	0004886c 	.word	0x0004886c
   23760:	00048942 	.word	0x00048942
   23764:	0004a171 	.word	0x0004a171

00023768 <shell_thread>:
{
   23768:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2376c:	4604      	mov	r4, r0
	err = shell->iface->api->enable(shell->iface, false);
   2376e:	6840      	ldr	r0, [r0, #4]
{
   23770:	460e      	mov	r6, r1
	err = shell->iface->api->enable(shell->iface, false);
   23772:	6803      	ldr	r3, [r0, #0]
   23774:	2100      	movs	r1, #0
   23776:	689b      	ldr	r3, [r3, #8]
{
   23778:	4615      	mov	r5, r2
	err = shell->iface->api->enable(shell->iface, false);
   2377a:	4798      	blx	r3
	if (err != 0) {
   2377c:	2800      	cmp	r0, #0
   2377e:	d140      	bne.n	23802 <shell_thread+0x9a>
	if (log_backend && IS_ENABLED(CONFIG_SHELL_LOG_BACKEND)) {
   23780:	b126      	cbz	r6, 2378c <shell_thread+0x24>
		shell_log_backend_enable(shell->log_backend, (void *)shell,
   23782:	462a      	mov	r2, r5
   23784:	4621      	mov	r1, r4
   23786:	69e0      	ldr	r0, [r4, #28]
   23788:	f01d ff94 	bl	416b4 <shell_log_backend_enable>
	err = shell_start(shell);
   2378c:	4620      	mov	r0, r4
   2378e:	f7ff ffab 	bl	236e8 <shell_start>
	if (err != 0) {
   23792:	2800      	cmp	r0, #0
   23794:	d135      	bne.n	23802 <shell_thread+0x9a>
		shell_signal_handle(shell, SHELL_SIGNAL_KILL, kill_handler);
   23796:	4f1c      	ldr	r7, [pc, #112]	; (23808 <shell_thread+0xa0>)
		shell_signal_handle(shell, SHELL_SIGNAL_RXRDY, shell_process);
   23798:	4e1c      	ldr	r6, [pc, #112]	; (2380c <shell_thread+0xa4>)
			shell_signal_handle(shell, SHELL_SIGNAL_LOG_MSG,
   2379a:	4d1d      	ldr	r5, [pc, #116]	; (23810 <shell_thread+0xa8>)
		err = k_poll(shell->ctx->events, SHELL_SIGNAL_TXDONE,
   2379c:	68a0      	ldr	r0, [r4, #8]
   2379e:	f500 7027 	add.w	r0, r0, #668	; 0x29c
	return z_impl_k_poll(events, num_events, timeout);
   237a2:	f04f 32ff 	mov.w	r2, #4294967295
   237a6:	2103      	movs	r1, #3
   237a8:	f01a ff92 	bl	3e6d0 <z_impl_k_poll>
   237ac:	4680      	mov	r8, r0
		k_mutex_lock(&shell->ctx->wr_mtx, K_FOREVER);
   237ae:	68a0      	ldr	r0, [r4, #8]
   237b0:	f500 703b 	add.w	r0, r0, #748	; 0x2ec
   237b4:	f01d fc4d 	bl	41052 <k_mutex_lock.constprop.35>
		if (err != 0) {
   237b8:	f1b8 0f00 	cmp.w	r8, #0
   237bc:	d007      	beq.n	237ce <shell_thread+0x66>
			shell_internal_fprintf(shell, SHELL_ERROR,
   237be:	4643      	mov	r3, r8
   237c0:	4620      	mov	r0, r4
}
   237c2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
			shell_internal_fprintf(shell, SHELL_ERROR,
   237c6:	4a13      	ldr	r2, [pc, #76]	; (23814 <shell_thread+0xac>)
   237c8:	2102      	movs	r1, #2
   237ca:	f000 bbb7 	b.w	23f3c <shell_internal_fprintf>
		if (shell->iface->api->update) {
   237ce:	6860      	ldr	r0, [r4, #4]
   237d0:	6803      	ldr	r3, [r0, #0]
   237d2:	695b      	ldr	r3, [r3, #20]
   237d4:	b103      	cbz	r3, 237d8 <shell_thread+0x70>
			shell->iface->api->update(shell->iface);
   237d6:	4798      	blx	r3
		shell_signal_handle(shell, SHELL_SIGNAL_KILL, kill_handler);
   237d8:	463a      	mov	r2, r7
   237da:	4620      	mov	r0, r4
   237dc:	2102      	movs	r1, #2
   237de:	f01d fbfb 	bl	40fd8 <shell_signal_handle>
		shell_signal_handle(shell, SHELL_SIGNAL_RXRDY, shell_process);
   237e2:	4632      	mov	r2, r6
   237e4:	4620      	mov	r0, r4
   237e6:	2100      	movs	r1, #0
   237e8:	f01d fbf6 	bl	40fd8 <shell_signal_handle>
			shell_signal_handle(shell, SHELL_SIGNAL_LOG_MSG,
   237ec:	4620      	mov	r0, r4
   237ee:	462a      	mov	r2, r5
   237f0:	2101      	movs	r1, #1
   237f2:	f01d fbf1 	bl	40fd8 <shell_signal_handle>
		k_mutex_unlock(&shell->ctx->wr_mtx);
   237f6:	68a0      	ldr	r0, [r4, #8]
   237f8:	f500 703b 	add.w	r0, r0, #748	; 0x2ec
   237fc:	f01d fc01 	bl	41002 <k_mutex_unlock>
   23800:	e7cc      	b.n	2379c <shell_thread+0x34>
}
   23802:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   23806:	bf00      	nop
   23808:	00022a61 	.word	0x00022a61
   2380c:	00022df5 	.word	0x00022df5
   23810:	0004105b 	.word	0x0004105b
   23814:	000489e4 	.word	0x000489e4

00023818 <shell_fprintf>:
/* This function mustn't be used from shell context to avoid deadlock.
 * However it can be used in shell command handlers.
 */
void shell_fprintf(const struct shell *shell, enum shell_vt100_color color,
		   const char *fmt, ...)
{
   23818:	b40c      	push	{r2, r3}
   2381a:	b573      	push	{r0, r1, r4, r5, r6, lr}
   2381c:	9d06      	ldr	r5, [sp, #24]
   2381e:	460e      	mov	r6, r1
	__ASSERT_NO_MSG(shell);
   23820:	4604      	mov	r4, r0
   23822:	b958      	cbnz	r0, 2383c <shell_fprintf+0x24>
   23824:	4943      	ldr	r1, [pc, #268]	; (23934 <shell_fprintf+0x11c>)
   23826:	4844      	ldr	r0, [pc, #272]	; (23938 <shell_fprintf+0x120>)
   23828:	f240 532e 	movw	r3, #1326	; 0x52e
   2382c:	4a43      	ldr	r2, [pc, #268]	; (2393c <shell_fprintf+0x124>)
   2382e:	f01c fee8 	bl	40602 <printk>
   23832:	f240 512e 	movw	r1, #1326	; 0x52e
   23836:	4841      	ldr	r0, [pc, #260]	; (2393c <shell_fprintf+0x124>)
   23838:	f01c ffa6 	bl	40788 <assert_post_action>
	__ASSERT(!k_is_in_isr(), "Thread context required.");
   2383c:	f021 f9be 	bl	44bbc <k_is_in_isr>
   23840:	b170      	cbz	r0, 23860 <shell_fprintf+0x48>
   23842:	493f      	ldr	r1, [pc, #252]	; (23940 <shell_fprintf+0x128>)
   23844:	f240 532f 	movw	r3, #1327	; 0x52f
   23848:	4a3c      	ldr	r2, [pc, #240]	; (2393c <shell_fprintf+0x124>)
   2384a:	483b      	ldr	r0, [pc, #236]	; (23938 <shell_fprintf+0x120>)
   2384c:	f01c fed9 	bl	40602 <printk>
   23850:	483c      	ldr	r0, [pc, #240]	; (23944 <shell_fprintf+0x12c>)
   23852:	f01c fed6 	bl	40602 <printk>
   23856:	f240 512f 	movw	r1, #1327	; 0x52f
   2385a:	4838      	ldr	r0, [pc, #224]	; (2393c <shell_fprintf+0x124>)
   2385c:	f01c ff94 	bl	40788 <assert_post_action>
	__ASSERT_NO_MSG((shell->ctx->internal.flags.cmd_ctx == 1) ||
   23860:	68a3      	ldr	r3, [r4, #8]
   23862:	f8d3 3258 	ldr.w	r3, [r3, #600]	; 0x258
   23866:	0619      	lsls	r1, r3, #24
   23868:	d420      	bmi.n	238ac <shell_fprintf+0x94>
	return z_impl_k_current_get();
   2386a:	f019 fe05 	bl	3d478 <z_impl_k_current_get>
   2386e:	68a3      	ldr	r3, [r4, #8]
   23870:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
   23874:	4283      	cmp	r3, r0
   23876:	d119      	bne.n	238ac <shell_fprintf+0x94>
   23878:	f240 5331 	movw	r3, #1329	; 0x531
   2387c:	4a2f      	ldr	r2, [pc, #188]	; (2393c <shell_fprintf+0x124>)
   2387e:	4932      	ldr	r1, [pc, #200]	; (23948 <shell_fprintf+0x130>)
   23880:	482d      	ldr	r0, [pc, #180]	; (23938 <shell_fprintf+0x120>)
   23882:	f01c febe 	bl	40602 <printk>
   23886:	f240 5131 	movw	r1, #1329	; 0x531
   2388a:	482c      	ldr	r0, [pc, #176]	; (2393c <shell_fprintf+0x124>)
   2388c:	f01c ff7c 	bl	40788 <assert_post_action>
			(k_current_get() != shell->ctx->tid));
	__ASSERT_NO_MSG(shell->ctx);
   23890:	68a3      	ldr	r3, [r4, #8]
   23892:	b95b      	cbnz	r3, 238ac <shell_fprintf+0x94>
   23894:	492d      	ldr	r1, [pc, #180]	; (2394c <shell_fprintf+0x134>)
   23896:	4828      	ldr	r0, [pc, #160]	; (23938 <shell_fprintf+0x120>)
   23898:	f240 5332 	movw	r3, #1330	; 0x532
   2389c:	4a27      	ldr	r2, [pc, #156]	; (2393c <shell_fprintf+0x124>)
   2389e:	f01c feb0 	bl	40602 <printk>
   238a2:	f240 5132 	movw	r1, #1330	; 0x532
   238a6:	4825      	ldr	r0, [pc, #148]	; (2393c <shell_fprintf+0x124>)
   238a8:	f01c ff6e 	bl	40788 <assert_post_action>
	__ASSERT_NO_MSG(shell->fprintf_ctx);
   238ac:	6963      	ldr	r3, [r4, #20]
   238ae:	b95b      	cbnz	r3, 238c8 <shell_fprintf+0xb0>
   238b0:	4927      	ldr	r1, [pc, #156]	; (23950 <shell_fprintf+0x138>)
   238b2:	4821      	ldr	r0, [pc, #132]	; (23938 <shell_fprintf+0x120>)
   238b4:	f240 5333 	movw	r3, #1331	; 0x533
   238b8:	4a20      	ldr	r2, [pc, #128]	; (2393c <shell_fprintf+0x124>)
   238ba:	f01c fea2 	bl	40602 <printk>
   238be:	f240 5133 	movw	r1, #1331	; 0x533
   238c2:	481e      	ldr	r0, [pc, #120]	; (2393c <shell_fprintf+0x124>)
   238c4:	f01c ff60 	bl	40788 <assert_post_action>
	__ASSERT_NO_MSG(fmt);
   238c8:	b95d      	cbnz	r5, 238e2 <shell_fprintf+0xca>
   238ca:	4922      	ldr	r1, [pc, #136]	; (23954 <shell_fprintf+0x13c>)
   238cc:	481a      	ldr	r0, [pc, #104]	; (23938 <shell_fprintf+0x120>)
   238ce:	f240 5334 	movw	r3, #1332	; 0x534
   238d2:	4a1a      	ldr	r2, [pc, #104]	; (2393c <shell_fprintf+0x124>)
   238d4:	f01c fe95 	bl	40602 <printk>
   238d8:	f240 5134 	movw	r1, #1332	; 0x534
   238dc:	4817      	ldr	r0, [pc, #92]	; (2393c <shell_fprintf+0x124>)
   238de:	f01c ff53 	bl	40788 <assert_post_action>

	va_list args;

	k_mutex_lock(&shell->ctx->wr_mtx, K_FOREVER);
   238e2:	68a0      	ldr	r0, [r4, #8]
   238e4:	f500 703b 	add.w	r0, r0, #748	; 0x2ec
   238e8:	f01d fbb3 	bl	41052 <k_mutex_lock.constprop.35>
	if (!flag_cmd_ctx_get(shell)) {
   238ec:	68a3      	ldr	r3, [r4, #8]
	return shell->ctx->internal.flags.cmd_ctx == 1 ? true : false;
   238ee:	f8d3 3258 	ldr.w	r3, [r3, #600]	; 0x258
   238f2:	061a      	lsls	r2, r3, #24
   238f4:	d402      	bmi.n	238fc <shell_fprintf+0xe4>
		shell_cmd_line_erase(shell);
   238f6:	4620      	mov	r0, r4
   238f8:	f01d fd2c 	bl	41354 <shell_cmd_line_erase>
	}

	va_start(args, fmt);
   238fc:	ab07      	add	r3, sp, #28
	shell_internal_vfprintf(shell, color, fmt, args);
   238fe:	462a      	mov	r2, r5
   23900:	4631      	mov	r1, r6
   23902:	4620      	mov	r0, r4
	va_start(args, fmt);
   23904:	9301      	str	r3, [sp, #4]
	shell_internal_vfprintf(shell, color, fmt, args);
   23906:	f01d fd41 	bl	4138c <shell_internal_vfprintf>
	va_end(args);

	if (!flag_cmd_ctx_get(shell)) {
   2390a:	68a3      	ldr	r3, [r4, #8]
   2390c:	f8d3 3258 	ldr.w	r3, [r3, #600]	; 0x258
   23910:	061b      	lsls	r3, r3, #24
   23912:	d402      	bmi.n	2391a <shell_fprintf+0x102>
		shell_print_prompt_and_cmd(shell);
   23914:	4620      	mov	r0, r4
   23916:	f000 fc2b 	bl	24170 <shell_print_prompt_and_cmd>
	shell_fprintf_buffer_flush(shell->fprintf_ctx);
   2391a:	6960      	ldr	r0, [r4, #20]
   2391c:	f01d fbc9 	bl	410b2 <shell_fprintf_buffer_flush>
	}
	transport_buffer_flush(shell);
	k_mutex_unlock(&shell->ctx->wr_mtx);
   23920:	68a0      	ldr	r0, [r4, #8]
   23922:	f500 703b 	add.w	r0, r0, #748	; 0x2ec
   23926:	f01d fb6c 	bl	41002 <k_mutex_unlock>
}
   2392a:	b002      	add	sp, #8
   2392c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   23930:	b002      	add	sp, #8
   23932:	4770      	bx	lr
   23934:	0004adfa 	.word	0x0004adfa
   23938:	0004764f 	.word	0x0004764f
   2393c:	0004886c 	.word	0x0004886c
   23940:	000488af 	.word	0x000488af
   23944:	000488be 	.word	0x000488be
   23948:	000488d9 	.word	0x000488d9
   2394c:	000489d3 	.word	0x000489d3
   23950:	0004892b 	.word	0x0004892b
   23954:	0004893e 	.word	0x0004893e

00023958 <shell_fprintf_fmt>:
	return 0;
}

void shell_fprintf_fmt(const struct shell_fprintf *sh_fprintf,
		       const char *fmt, va_list args)
{
   23958:	b510      	push	{r4, lr}
   2395a:	4604      	mov	r4, r0
#if !defined(CONFIG_NEWLIB_LIBC) && !defined(CONFIG_ARCH_POSIX)
	(void)z_prf(out_func, (void *)sh_fprintf, (char *)fmt, args);
#else
	z_vprintk(out_func, (void *)sh_fprintf, fmt, args);
   2395c:	4613      	mov	r3, r2
   2395e:	460a      	mov	r2, r1
   23960:	4601      	mov	r1, r0
   23962:	4806      	ldr	r0, [pc, #24]	; (2397c <shell_fprintf_fmt+0x24>)
   23964:	f01c fcdd 	bl	40322 <z_vprintk>
#endif

	if (sh_fprintf->ctrl_blk->autoflush) {
   23968:	6923      	ldr	r3, [r4, #16]
   2396a:	791b      	ldrb	r3, [r3, #4]
   2396c:	b123      	cbz	r3, 23978 <shell_fprintf_fmt+0x20>
		shell_fprintf_buffer_flush(sh_fprintf);
   2396e:	4620      	mov	r0, r4
	}
}
   23970:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		shell_fprintf_buffer_flush(sh_fprintf);
   23974:	f01d bb9d 	b.w	410b2 <shell_fprintf_buffer_flush>
}
   23978:	bd10      	pop	{r4, pc}
   2397a:	bf00      	nop
   2397c:	000410cb 	.word	0x000410cb

00023980 <shell_make_argv>:
	return quote;
}


char shell_make_argv(size_t *argc, char **argv, char *cmd, u8_t max_argc)
{
   23980:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   23984:	4698      	mov	r8, r3
	char quote = 0;
	char c;

	*argc = 0;
   23986:	2300      	movs	r3, #0
{
   23988:	4605      	mov	r5, r0
   2398a:	460e      	mov	r6, r1
   2398c:	4614      	mov	r4, r2
	char quote = 0;
   2398e:	469a      	mov	sl, r3
	char quote = 0;
   23990:	4699      	mov	r9, r3
		c = *cmd;
		if (c == '\0') {
			break;
		}

		if (isspace((int) c)) {
   23992:	4f5d      	ldr	r7, [pc, #372]	; (23b08 <shell_make_argv+0x188>)
	*argc = 0;
   23994:	6003      	str	r3, [r0, #0]
		c = *cmd;
   23996:	7823      	ldrb	r3, [r4, #0]
		if (c == '\0') {
   23998:	b143      	cbz	r3, 239ac <shell_make_argv+0x2c>
		if (isspace((int) c)) {
   2399a:	5ddb      	ldrb	r3, [r3, r7]
   2399c:	f013 0308 	ands.w	r3, r3, #8
   239a0:	d00c      	beq.n	239bc <shell_make_argv+0x3c>
			*cmd++ = '\0';
   239a2:	f804 9b01 	strb.w	r9, [r4], #1
			continue;
		}

		argv[(*argc)++] = cmd;
		quote = make_argv(&cmd, c);
	} while (*argc < max_argc);
   239a6:	682b      	ldr	r3, [r5, #0]
   239a8:	4543      	cmp	r3, r8
   239aa:	d3f4      	bcc.n	23996 <shell_make_argv+0x16>

	argv[*argc] = 0;
   239ac:	2200      	movs	r2, #0

	return quote;
}
   239ae:	4650      	mov	r0, sl
	argv[*argc] = 0;
   239b0:	682b      	ldr	r3, [r5, #0]
   239b2:	f846 2023 	str.w	r2, [r6, r3, lsl #2]
}
   239b6:	b003      	add	sp, #12
   239b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	char quote = 0;
   239bc:	469a      	mov	sl, r3
		argv[(*argc)++] = cmd;
   239be:	682a      	ldr	r2, [r5, #0]
   239c0:	1c51      	adds	r1, r2, #1
   239c2:	6029      	str	r1, [r5, #0]
   239c4:	f846 4022 	str.w	r4, [r6, r2, lsl #2]
		c = *cmd;
   239c8:	f894 b000 	ldrb.w	fp, [r4]
		if (c == '\0') {
   239cc:	f1bb 0f00 	cmp.w	fp, #0
   239d0:	d0e9      	beq.n	239a6 <shell_make_argv+0x26>
		if (!quote) {
   239d2:	f1ba 0f00 	cmp.w	sl, #0
   239d6:	f040 8083 	bne.w	23ae0 <shell_make_argv+0x160>
			switch (c) {
   239da:	f1bb 0f27 	cmp.w	fp, #39	; 0x27
   239de:	d006      	beq.n	239ee <shell_make_argv+0x6e>
   239e0:	f1bb 0f5c 	cmp.w	fp, #92	; 0x5c
   239e4:	f000 8084 	beq.w	23af0 <shell_make_argv+0x170>
   239e8:	f1bb 0f22 	cmp.w	fp, #34	; 0x22
   239ec:	d171      	bne.n	23ad2 <shell_make_argv+0x152>
				memmove(cmd, cmd + 1,
   239ee:	4620      	mov	r0, r4
   239f0:	f01d fb87 	bl	41102 <shell_strlen>
__ssp_bos_icheck3(memmove, void *, const void *)
   239f4:	1c61      	adds	r1, r4, #1
   239f6:	4602      	mov	r2, r0
   239f8:	4620      	mov	r0, r4
   239fa:	f021 fa49 	bl	44e90 <memmove>
   239fe:	46da      	mov	sl, fp
   23a00:	e7e2      	b.n	239c8 <shell_make_argv+0x48>
			memmove(cmd, cmd + 1, shell_strlen(cmd));
   23a02:	4620      	mov	r0, r4
   23a04:	f01d fb7d 	bl	41102 <shell_strlen>
   23a08:	1c61      	adds	r1, r4, #1
   23a0a:	4602      	mov	r2, r0
   23a0c:	4620      	mov	r0, r4
   23a0e:	f021 fa3f 	bl	44e90 <memmove>
			quote = 0;
   23a12:	f04f 0a00 	mov.w	sl, #0
   23a16:	e7d7      	b.n	239c8 <shell_make_argv+0x48>
			if (t == '0') {
   23a18:	2930      	cmp	r1, #48	; 0x30
   23a1a:	d126      	bne.n	23a6a <shell_make_argv+0xea>
				u8_t v = 0U;
   23a1c:	f04f 0b00 	mov.w	fp, #0
			if (t == '0') {
   23a20:	2302      	movs	r3, #2
					t = *(cmd + i);
   23a22:	5ce1      	ldrb	r1, [r4, r3]
   23a24:	b2da      	uxtb	r2, r3
					if (t >= '0' && t <= '7') {
   23a26:	f1a1 0030 	sub.w	r0, r1, #48	; 0x30
   23a2a:	fa5f fc80 	uxtb.w	ip, r0
   23a2e:	f1bc 0f07 	cmp.w	ip, #7
   23a32:	d818      	bhi.n	23a66 <shell_make_argv+0xe6>
						v = (v << 3) | (t - '0');
   23a34:	3301      	adds	r3, #1
   23a36:	ea40 0bcb 	orr.w	fp, r0, fp, lsl #3
				for (i = 2U; i < (2 + 3); i++) {
   23a3a:	2b05      	cmp	r3, #5
						v = (v << 3) | (t - '0');
   23a3c:	fa5f fb8b 	uxtb.w	fp, fp
				for (i = 2U; i < (2 + 3); i++) {
   23a40:	d1ef      	bne.n	23a22 <shell_make_argv+0xa2>
   23a42:	461a      	mov	r2, r3
					memmove(cmd, cmd + (i - 1),
   23a44:	1e51      	subs	r1, r2, #1
   23a46:	4421      	add	r1, r4
   23a48:	4620      	mov	r0, r4
   23a4a:	9201      	str	r2, [sp, #4]
   23a4c:	9100      	str	r1, [sp, #0]
   23a4e:	f01d fb58 	bl	41102 <shell_strlen>
   23a52:	9a01      	ldr	r2, [sp, #4]
   23a54:	3002      	adds	r0, #2
   23a56:	1a82      	subs	r2, r0, r2
   23a58:	4620      	mov	r0, r4
   23a5a:	9900      	ldr	r1, [sp, #0]
   23a5c:	f021 fa18 	bl	44e90 <memmove>
					*cmd++ = v;
   23a60:	f804 bb01 	strb.w	fp, [r4], #1
					continue;
   23a64:	e7b0      	b.n	239c8 <shell_make_argv+0x48>
				if (i > 2) {
   23a66:	2a02      	cmp	r2, #2
   23a68:	d1ec      	bne.n	23a44 <shell_make_argv+0xc4>
			if (t == 'x') {
   23a6a:	2978      	cmp	r1, #120	; 0x78
   23a6c:	d136      	bne.n	23adc <shell_make_argv+0x15c>
				u8_t v = 0U;
   23a6e:	f04f 0b00 	mov.w	fp, #0
			if (t == 'x') {
   23a72:	2202      	movs	r2, #2
					t = *(cmd + i);
   23a74:	5ca3      	ldrb	r3, [r4, r2]
   23a76:	b2d0      	uxtb	r0, r2
					if (t >= '0' && t <= '9') {
   23a78:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
   23a7c:	fa5f fc81 	uxtb.w	ip, r1
   23a80:	f1bc 0f09 	cmp.w	ip, #9
   23a84:	d813      	bhi.n	23aae <shell_make_argv+0x12e>
						v = (v << 4) | (t - '0');
   23a86:	ea41 130b 	orr.w	r3, r1, fp, lsl #4
				for (i = 2U; i < (2 + 2); i++) {
   23a8a:	2a03      	cmp	r2, #3
						v = (v << 4) | (t - 'A' + 10);
   23a8c:	fa5f fb83 	uxtb.w	fp, r3
				for (i = 2U; i < (2 + 2); i++) {
   23a90:	d10b      	bne.n	23aaa <shell_make_argv+0x12a>
   23a92:	2304      	movs	r3, #4
					memmove(cmd, cmd + (i - 1),
   23a94:	1e59      	subs	r1, r3, #1
   23a96:	4421      	add	r1, r4
   23a98:	4620      	mov	r0, r4
   23a9a:	9301      	str	r3, [sp, #4]
   23a9c:	9100      	str	r1, [sp, #0]
   23a9e:	f01d fb30 	bl	41102 <shell_strlen>
   23aa2:	9b01      	ldr	r3, [sp, #4]
   23aa4:	1c82      	adds	r2, r0, #2
   23aa6:	1ad2      	subs	r2, r2, r3
   23aa8:	e7d6      	b.n	23a58 <shell_make_argv+0xd8>
				for (i = 2U; i < (2 + 2); i++) {
   23aaa:	2203      	movs	r2, #3
   23aac:	e7e2      	b.n	23a74 <shell_make_argv+0xf4>
					} else if ((t >= 'a') &&
   23aae:	f1a3 0161 	sub.w	r1, r3, #97	; 0x61
   23ab2:	2905      	cmp	r1, #5
   23ab4:	d803      	bhi.n	23abe <shell_make_argv+0x13e>
						v = (v << 4) | (t - 'a' + 10);
   23ab6:	3b57      	subs	r3, #87	; 0x57
						v = (v << 4) | (t - 'A' + 10);
   23ab8:	ea43 130b 	orr.w	r3, r3, fp, lsl #4
   23abc:	e7e5      	b.n	23a8a <shell_make_argv+0x10a>
					} else if ((t >= 'A') && (t <= 'F')) {
   23abe:	f1a3 0141 	sub.w	r1, r3, #65	; 0x41
   23ac2:	2905      	cmp	r1, #5
   23ac4:	d801      	bhi.n	23aca <shell_make_argv+0x14a>
						v = (v << 4) | (t - 'A' + 10);
   23ac6:	3b37      	subs	r3, #55	; 0x37
   23ac8:	e7f6      	b.n	23ab8 <shell_make_argv+0x138>
				if (i > 2) {
   23aca:	2802      	cmp	r0, #2
   23acc:	d006      	beq.n	23adc <shell_make_argv+0x15c>
   23ace:	2303      	movs	r3, #3
   23ad0:	e7e0      	b.n	23a94 <shell_make_argv+0x114>
		if (!quote && isspace((int) c)) {
   23ad2:	f817 300b 	ldrb.w	r3, [r7, fp]
   23ad6:	071b      	lsls	r3, r3, #28
   23ad8:	f53f af65 	bmi.w	239a6 <shell_make_argv+0x26>
		cmd += 1;
   23adc:	3401      	adds	r4, #1
   23ade:	e773      	b.n	239c8 <shell_make_argv+0x48>
		if (quote == c) {
   23ae0:	45d3      	cmp	fp, sl
   23ae2:	d08e      	beq.n	23a02 <shell_make_argv+0x82>
		if (quote && c == '\\') {
   23ae4:	f1bb 0f5c 	cmp.w	fp, #92	; 0x5c
   23ae8:	d1f8      	bne.n	23adc <shell_make_argv+0x15c>
   23aea:	7861      	ldrb	r1, [r4, #1]
			if (t == quote) {
   23aec:	458a      	cmp	sl, r1
   23aee:	d193      	bne.n	23a18 <shell_make_argv+0x98>
				memmove(cmd, cmd + 1,
   23af0:	4620      	mov	r0, r4
   23af2:	f01d fb06 	bl	41102 <shell_strlen>
   23af6:	f104 0b01 	add.w	fp, r4, #1
   23afa:	4602      	mov	r2, r0
   23afc:	4659      	mov	r1, fp
   23afe:	4620      	mov	r0, r4
   23b00:	f021 f9c6 	bl	44e90 <memmove>
   23b04:	465c      	mov	r4, fp
   23b06:	e75f      	b.n	239c8 <shell_make_argv+0x48>
   23b08:	0004d857 	.word	0x0004d857

00023b0c <shell_cmd_get>:

void shell_cmd_get(const struct shell *shell,
		   const struct shell_cmd_entry *command, size_t lvl,
		   size_t idx, const struct shell_static_entry **entry,
		   struct shell_static_entry *d_entry)
{
   23b0c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   23b10:	460f      	mov	r7, r1
   23b12:	e9dd 4606 	ldrd	r4, r6, [sp, #24]
   23b16:	4690      	mov	r8, r2
   23b18:	461d      	mov	r5, r3
	__ASSERT_NO_MSG(entry != NULL);
   23b1a:	b94c      	cbnz	r4, 23b30 <shell_cmd_get+0x24>
   23b1c:	491d      	ldr	r1, [pc, #116]	; (23b94 <shell_cmd_get+0x88>)
   23b1e:	481e      	ldr	r0, [pc, #120]	; (23b98 <shell_cmd_get+0x8c>)
   23b20:	23f9      	movs	r3, #249	; 0xf9
   23b22:	4a1e      	ldr	r2, [pc, #120]	; (23b9c <shell_cmd_get+0x90>)
   23b24:	f01c fd6d 	bl	40602 <printk>
   23b28:	21f9      	movs	r1, #249	; 0xf9
   23b2a:	481c      	ldr	r0, [pc, #112]	; (23b9c <shell_cmd_get+0x90>)
   23b2c:	f01c fe2c 	bl	40788 <assert_post_action>
	__ASSERT_NO_MSG(d_entry != NULL);
   23b30:	b94e      	cbnz	r6, 23b46 <shell_cmd_get+0x3a>
   23b32:	491b      	ldr	r1, [pc, #108]	; (23ba0 <shell_cmd_get+0x94>)
   23b34:	4818      	ldr	r0, [pc, #96]	; (23b98 <shell_cmd_get+0x8c>)
   23b36:	23fa      	movs	r3, #250	; 0xfa
   23b38:	4a18      	ldr	r2, [pc, #96]	; (23b9c <shell_cmd_get+0x90>)
   23b3a:	f01c fd62 	bl	40602 <printk>
   23b3e:	21fa      	movs	r1, #250	; 0xfa
   23b40:	4816      	ldr	r0, [pc, #88]	; (23b9c <shell_cmd_get+0x90>)
   23b42:	f01c fe21 	bl	40788 <assert_post_action>

	*entry = NULL;
   23b46:	2300      	movs	r3, #0
   23b48:	6023      	str	r3, [r4, #0]

	if (lvl == SHELL_CMD_ROOT_LVL) {
   23b4a:	f1b8 0f00 	cmp.w	r8, #0
   23b4e:	d10b      	bne.n	23b68 <shell_cmd_get+0x5c>
	return ((u8_t *)__shell_root_cmds_end -
   23b50:	4b14      	ldr	r3, [pc, #80]	; (23ba4 <shell_cmd_get+0x98>)
   23b52:	4a15      	ldr	r2, [pc, #84]	; (23ba8 <shell_cmd_get+0x9c>)
   23b54:	1ad2      	subs	r2, r2, r3
			const struct shell_static_entry *ptr =
						       shell->ctx->selected_cmd;
			if (ptr->subcmd->u.entry[idx].syntax != NULL) {
				*entry = &ptr->subcmd->u.entry[idx];
			}
		} else if (idx < shell_root_cmd_count()) {
   23b56:	ebb5 0fd2 	cmp.w	r5, r2, lsr #3
   23b5a:	d203      	bcs.n	23b64 <shell_cmd_get+0x58>
			const struct shell_cmd_entry *cmd;

			cmd = shell_root_cmd_get(idx);
			*entry = cmd->u.entry;
   23b5c:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
   23b60:	685b      	ldr	r3, [r3, #4]
   23b62:	6023      	str	r3, [r4, #0]
	} else {
		if (command->u.entry[idx].syntax != NULL) {
			*entry = &command->u.entry[idx];
		}
	}
}
   23b64:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (command == NULL) {
   23b68:	2f00      	cmp	r7, #0
   23b6a:	d0fb      	beq.n	23b64 <shell_cmd_get+0x58>
	if (command->is_dynamic) {
   23b6c:	783b      	ldrb	r3, [r7, #0]
   23b6e:	687a      	ldr	r2, [r7, #4]
   23b70:	b13b      	cbz	r3, 23b82 <shell_cmd_get+0x76>
		command->u.dynamic_get(idx, d_entry);
   23b72:	4631      	mov	r1, r6
   23b74:	4628      	mov	r0, r5
   23b76:	4790      	blx	r2
		if (d_entry->syntax != NULL) {
   23b78:	6833      	ldr	r3, [r6, #0]
   23b7a:	2b00      	cmp	r3, #0
   23b7c:	d0f2      	beq.n	23b64 <shell_cmd_get+0x58>
			*entry = d_entry;
   23b7e:	6026      	str	r6, [r4, #0]
   23b80:	e7f0      	b.n	23b64 <shell_cmd_get+0x58>
		if (command->u.entry[idx].syntax != NULL) {
   23b82:	2314      	movs	r3, #20
   23b84:	436b      	muls	r3, r5
   23b86:	18d1      	adds	r1, r2, r3
   23b88:	58d3      	ldr	r3, [r2, r3]
   23b8a:	2b00      	cmp	r3, #0
   23b8c:	d0ea      	beq.n	23b64 <shell_cmd_get+0x58>
			*entry = &command->u.entry[idx];
   23b8e:	6021      	str	r1, [r4, #0]
   23b90:	e7e8      	b.n	23b64 <shell_cmd_get+0x58>
   23b92:	bf00      	nop
   23b94:	00048a2b 	.word	0x00048a2b
   23b98:	0004764f 	.word	0x0004764f
   23b9c:	000489fb 	.word	0x000489fb
   23ba0:	00048a29 	.word	0x00048a29
   23ba4:	000460d0 	.word	0x000460d0
   23ba8:	00046110 	.word	0x00046110

00023bac <shell_spaces_trim>:

	return 0;
}

void shell_spaces_trim(char *str)
{
   23bac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   23bb0:	4607      	mov	r7, r0
	u16_t len = shell_strlen(str);
   23bb2:	f01d faa6 	bl	41102 <shell_strlen>
   23bb6:	4606      	mov	r6, r0
	u16_t shift = 0U;

	if (!str) {
   23bb8:	bb2f      	cbnz	r7, 23c06 <shell_spaces_trim+0x5a>

				break;
			}
		}
	}
}
   23bba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				if (shift > 0) {
   23bbe:	b144      	cbz	r4, 23bd2 <shell_spaces_trim+0x26>
					memmove(&str[i + 1],
   23bc0:	1c72      	adds	r2, r6, #1
   23bc2:	3001      	adds	r0, #1
   23bc4:	1b12      	subs	r2, r2, r4
   23bc6:	4438      	add	r0, r7
					len -= shift;
   23bc8:	1b36      	subs	r6, r6, r4
   23bca:	f021 f961 	bl	44e90 <memmove>
					shift = 0U;
   23bce:	4644      	mov	r4, r8
					len -= shift;
   23bd0:	b2b6      	uxth	r6, r6
	for (u16_t i = 0; i < len - 1; i++) {
   23bd2:	1e73      	subs	r3, r6, #1
   23bd4:	429d      	cmp	r5, r3
   23bd6:	daf0      	bge.n	23bba <shell_spaces_trim+0xe>
		if (isspace((int)str[i])) {
   23bd8:	4628      	mov	r0, r5
   23bda:	5c3b      	ldrb	r3, [r7, r0]
   23bdc:	3501      	adds	r5, #1
   23bde:	f813 3009 	ldrb.w	r3, [r3, r9]
   23be2:	b2ad      	uxth	r5, r5
   23be4:	071b      	lsls	r3, r3, #28
   23be6:	d5f4      	bpl.n	23bd2 <shell_spaces_trim+0x26>
			for (u16_t j = i + 1; j < len; j++) {
   23be8:	462b      	mov	r3, r5
   23bea:	b29a      	uxth	r2, r3
   23bec:	4296      	cmp	r6, r2
   23bee:	d9f0      	bls.n	23bd2 <shell_spaces_trim+0x26>
				if (isspace((int)str[j])) {
   23bf0:	5cfa      	ldrb	r2, [r7, r3]
   23bf2:	18f9      	adds	r1, r7, r3
   23bf4:	f819 2002 	ldrb.w	r2, [r9, r2]
   23bf8:	3301      	adds	r3, #1
   23bfa:	f012 0808 	ands.w	r8, r2, #8
   23bfe:	d0de      	beq.n	23bbe <shell_spaces_trim+0x12>
					shift++;
   23c00:	3401      	adds	r4, #1
   23c02:	b2a4      	uxth	r4, r4
					continue;
   23c04:	e7f1      	b.n	23bea <shell_spaces_trim+0x3e>
	for (u16_t i = 0; i < len - 1; i++) {
   23c06:	2500      	movs	r5, #0
		if (isspace((int)str[i])) {
   23c08:	f8df 9004 	ldr.w	r9, [pc, #4]	; 23c10 <shell_spaces_trim+0x64>
	u16_t shift = 0U;
   23c0c:	462c      	mov	r4, r5
   23c0e:	e7e0      	b.n	23bd2 <shell_spaces_trim+0x26>
   23c10:	0004d857 	.word	0x0004d857

00023c14 <shell_cmd_trim>:
		*buff_len = *buff_len - i;
	}
}

void shell_cmd_trim(const struct shell *shell)
{
   23c14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	buffer_trim(shell->ctx->cmd_buff, &shell->ctx->cmd_buff_len);
   23c16:	6884      	ldr	r4, [r0, #8]
{
   23c18:	4605      	mov	r5, r0
	if (buff[0] == '\0') {
   23c1a:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
   23c1e:	b953      	cbnz	r3, 23c36 <shell_cmd_trim+0x22>
	shell->ctx->cmd_buff_pos = shell->ctx->cmd_buff_len;
   23c20:	68ab      	ldr	r3, [r5, #8]
   23c22:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
   23c24:	869a      	strh	r2, [r3, #52]	; 0x34
}
   23c26:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		*buff_len -= 1U;
   23c28:	3a01      	subs	r2, #1
   23c2a:	b292      	uxth	r2, r2
   23c2c:	8662      	strh	r2, [r4, #50]	; 0x32
		if (*buff_len == 0U) {
   23c2e:	b932      	cbnz	r2, 23c3e <shell_cmd_trim+0x2a>
			buff[0] = '\0';
   23c30:	f884 2038 	strb.w	r2, [r4, #56]	; 0x38
			return;
   23c34:	e7f4      	b.n	23c20 <shell_cmd_trim+0xc>
	while (isspace((int) buff[*buff_len - 1U])) {
   23c36:	4910      	ldr	r1, [pc, #64]	; (23c78 <shell_cmd_trim+0x64>)
	buffer_trim(shell->ctx->cmd_buff, &shell->ctx->cmd_buff_len);
   23c38:	f104 0038 	add.w	r0, r4, #56	; 0x38
   23c3c:	460e      	mov	r6, r1
	while (isspace((int) buff[*buff_len - 1U])) {
   23c3e:	8e62      	ldrh	r2, [r4, #50]	; 0x32
   23c40:	1883      	adds	r3, r0, r2
   23c42:	f813 3c01 	ldrb.w	r3, [r3, #-1]
   23c46:	5c5b      	ldrb	r3, [r3, r1]
   23c48:	f013 0308 	ands.w	r3, r3, #8
   23c4c:	d1ec      	bne.n	23c28 <shell_cmd_trim+0x14>
	buff[*buff_len] = '\0';
   23c4e:	5483      	strb	r3, [r0, r2]
	while (isspace((int) buff[i++])) {
   23c50:	b29f      	uxth	r7, r3
   23c52:	f810 c007 	ldrb.w	ip, [r0, r7]
   23c56:	19c1      	adds	r1, r0, r7
   23c58:	f816 c00c 	ldrb.w	ip, [r6, ip]
   23c5c:	3301      	adds	r3, #1
   23c5e:	f01c 0f08 	tst.w	ip, #8
   23c62:	d1f5      	bne.n	23c50 <shell_cmd_trim+0x3c>
	if (--i > 0) {
   23c64:	2f00      	cmp	r7, #0
   23c66:	d0db      	beq.n	23c20 <shell_cmd_trim+0xc>
		memmove(buff, buff + i, (*buff_len + 1U) - i); /* +1 for '\0' */
   23c68:	8e66      	ldrh	r6, [r4, #50]	; 0x32
   23c6a:	1c73      	adds	r3, r6, #1
   23c6c:	1bda      	subs	r2, r3, r7
		*buff_len = *buff_len - i;
   23c6e:	1bf6      	subs	r6, r6, r7
   23c70:	f021 f90e 	bl	44e90 <memmove>
   23c74:	8666      	strh	r6, [r4, #50]	; 0x32
   23c76:	e7d3      	b.n	23c20 <shell_cmd_trim+0xc>
   23c78:	0004d857 	.word	0x0004d857

00023c7c <clear_eos.isra.6>:
	SHELL_VT100_CMD(shell, SHELL_VT100_CLEAREOS);
   23c7c:	4a01      	ldr	r2, [pc, #4]	; (23c84 <clear_eos.isra.6+0x8>)
   23c7e:	4902      	ldr	r1, [pc, #8]	; (23c88 <clear_eos.isra.6+0xc>)
   23c80:	f01d bae7 	b.w	41252 <shell_raw_fprintf>
   23c84:	00048a40 	.word	0x00048a40
   23c88:	00047a4a 	.word	0x00047a4a

00023c8c <shell_op_cursor_vert_move>:
#include <ctype.h>
#include "shell_ops.h"

void shell_op_cursor_vert_move(const struct shell *shell, s32_t delta)
{
	if (delta != 0) {
   23c8c:	b159      	cbz	r1, 23ca6 <shell_op_cursor_vert_move+0x1a>
		shell_raw_fprintf(shell->fprintf_ctx, "\033[%d%c",
   23c8e:	2900      	cmp	r1, #0
   23c90:	ea81 72e1 	eor.w	r2, r1, r1, asr #31
   23c94:	eba2 72e1 	sub.w	r2, r2, r1, asr #31
   23c98:	bfcc      	ite	gt
   23c9a:	2341      	movgt	r3, #65	; 0x41
   23c9c:	2342      	movle	r3, #66	; 0x42
   23c9e:	4902      	ldr	r1, [pc, #8]	; (23ca8 <shell_op_cursor_vert_move+0x1c>)
   23ca0:	6940      	ldr	r0, [r0, #20]
   23ca2:	f01d bad6 	b.w	41252 <shell_raw_fprintf>
				  delta > 0 ? delta : -delta,
				  delta > 0 ? 'A' : 'B');
	}
}
   23ca6:	4770      	bx	lr
   23ca8:	00048a4e 	.word	0x00048a4e

00023cac <shell_op_cursor_horiz_move>:

void shell_op_cursor_horiz_move(const struct shell *shell, s32_t delta)
{
	if (delta != 0) {
   23cac:	b159      	cbz	r1, 23cc6 <shell_op_cursor_horiz_move+0x1a>
		shell_raw_fprintf(shell->fprintf_ctx, "\033[%d%c",
   23cae:	2900      	cmp	r1, #0
   23cb0:	ea81 72e1 	eor.w	r2, r1, r1, asr #31
   23cb4:	eba2 72e1 	sub.w	r2, r2, r1, asr #31
   23cb8:	bfcc      	ite	gt
   23cba:	2343      	movgt	r3, #67	; 0x43
   23cbc:	2344      	movle	r3, #68	; 0x44
   23cbe:	4902      	ldr	r1, [pc, #8]	; (23cc8 <shell_op_cursor_horiz_move+0x1c>)
   23cc0:	6940      	ldr	r0, [r0, #20]
   23cc2:	f01d bac6 	b.w	41252 <shell_raw_fprintf>
				  delta > 0 ? delta : -delta,
				  delta > 0 ? 'C' : 'D');
	}
}
   23cc6:	4770      	bx	lr
   23cc8:	00048a4e 	.word	0x00048a4e

00023ccc <shell_op_cond_next_line>:
	return ((shell->ctx->cmd_buff_pos + shell_strlen(shell->ctx->prompt))
			% shell->ctx->vt100_ctx.cons.terminal_wid == 0U);
}

void shell_op_cond_next_line(const struct shell *shell)
{
   23ccc:	b510      	push	{r4, lr}
   23cce:	4604      	mov	r4, r0
	if (shell_cursor_in_empty_line(shell) || full_line_cmd(shell)) {
   23cd0:	f01d fae0 	bl	41294 <shell_cursor_in_empty_line>
   23cd4:	b128      	cbz	r0, 23ce2 <shell_op_cond_next_line+0x16>
	shell_raw_fprintf(shell->fprintf_ctx, "\n");
   23cd6:	6960      	ldr	r0, [r4, #20]
   23cd8:	4905      	ldr	r1, [pc, #20]	; (23cf0 <shell_op_cond_next_line+0x24>)
		cursor_next_line_move(shell);
	}
}
   23cda:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   23cde:	f01d bab8 	b.w	41252 <shell_raw_fprintf>
	if (shell_cursor_in_empty_line(shell) || full_line_cmd(shell)) {
   23ce2:	f104 0008 	add.w	r0, r4, #8
   23ce6:	f01d fac1 	bl	4126c <full_line_cmd.isra.8>
   23cea:	2800      	cmp	r0, #0
   23cec:	d1f3      	bne.n	23cd6 <shell_op_cond_next_line+0xa>
}
   23cee:	bd10      	pop	{r4, pc}
   23cf0:	0004a298 	.word	0x0004a298

00023cf4 <shell_op_cursor_position_synchronize>:

void shell_op_cursor_position_synchronize(const struct shell *shell)
{
   23cf4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	struct shell_multiline_cons *cons = &shell->ctx->vt100_ctx.cons;
   23cf8:	4606      	mov	r6, r0
   23cfa:	f856 4f08 	ldr.w	r4, [r6, #8]!
{
   23cfe:	4605      	mov	r5, r0
	bool last_line;

	shell_multiline_data_calc(cons, shell->ctx->cmd_buff_pos,
   23d00:	8e62      	ldrh	r2, [r4, #50]	; 0x32
   23d02:	f104 0020 	add.w	r0, r4, #32
   23d06:	8ea1      	ldrh	r1, [r4, #52]	; 0x34
   23d08:	f01d fa1b 	bl	41142 <shell_multiline_data_calc>
	last_line = (cons->cur_y == cons->cur_y_end);

	/* In case cursor reaches the bottom line of a terminal, it will
	 * be moved to the next line.
	 */
	if (full_line_cmd(shell)) {
   23d0c:	4630      	mov	r0, r6
	last_line = (cons->cur_y == cons->cur_y_end);
   23d0e:	f8b4 8024 	ldrh.w	r8, [r4, #36]	; 0x24
   23d12:	8ce7      	ldrh	r7, [r4, #38]	; 0x26
	if (full_line_cmd(shell)) {
   23d14:	f01d faaa 	bl	4126c <full_line_cmd.isra.8>
   23d18:	b118      	cbz	r0, 23d22 <shell_op_cursor_position_synchronize+0x2e>
   23d1a:	490a      	ldr	r1, [pc, #40]	; (23d44 <shell_op_cursor_position_synchronize+0x50>)
   23d1c:	6968      	ldr	r0, [r5, #20]
   23d1e:	f01d fa98 	bl	41252 <shell_raw_fprintf>
		cursor_next_line_move(shell);
	}

	if (last_line) {
   23d22:	45b8      	cmp	r8, r7
   23d24:	d107      	bne.n	23d36 <shell_op_cursor_position_synchronize+0x42>
		shell_op_cursor_horiz_move(shell, cons->cur_x -
							       cons->cur_x_end);
	} else {
		shell_op_cursor_vert_move(shell, cons->cur_y_end - cons->cur_y);
		shell_op_cursor_horiz_move(shell, cons->cur_x -
   23d26:	8c21      	ldrh	r1, [r4, #32]
							       cons->cur_x_end);
   23d28:	8c63      	ldrh	r3, [r4, #34]	; 0x22
		shell_op_cursor_horiz_move(shell, cons->cur_x -
   23d2a:	4628      	mov	r0, r5
	}
}
   23d2c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		shell_op_cursor_horiz_move(shell, cons->cur_x -
   23d30:	1ac9      	subs	r1, r1, r3
   23d32:	f7ff bfbb 	b.w	23cac <shell_op_cursor_horiz_move>
		shell_op_cursor_vert_move(shell, cons->cur_y_end - cons->cur_y);
   23d36:	8ce1      	ldrh	r1, [r4, #38]	; 0x26
   23d38:	8ca3      	ldrh	r3, [r4, #36]	; 0x24
   23d3a:	4628      	mov	r0, r5
   23d3c:	1ac9      	subs	r1, r1, r3
   23d3e:	f7ff ffa5 	bl	23c8c <shell_op_cursor_vert_move>
   23d42:	e7f0      	b.n	23d26 <shell_op_cursor_position_synchronize+0x32>
   23d44:	0004a298 	.word	0x0004a298

00023d48 <shell_op_cursor_word_move>:

	return ret;
}

void shell_op_cursor_word_move(const struct shell *shell, s16_t val)
{
   23d48:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	s16_t shift;
	s16_t sign;

	if (val < 0) {
   23d4c:	1e0c      	subs	r4, r1, #0
{
   23d4e:	4606      	mov	r6, r0
	if (val < 0) {
   23d50:	da2e      	bge.n	23db0 <shell_op_cursor_word_move+0x68>
		val = -val;
		sign = -1;
   23d52:	f04f 35ff 	mov.w	r5, #4294967295
		val = -val;
   23d56:	4264      	negs	r4, r4
   23d58:	b224      	sxth	r4, r4
		sign = -1;
   23d5a:	b2af      	uxth	r7, r5
		if (isalnum((int)str[idx]) != 0) {
   23d5c:	f8df 8054 	ldr.w	r8, [pc, #84]	; 23db4 <shell_op_cursor_word_move+0x6c>
   23d60:	e01c      	b.n	23d9c <shell_op_cursor_word_move+0x54>
	} else {
		sign = 1;
	}

	while (val--) {
		shift = shift_calc(shell->ctx->cmd_buff,
   23d62:	68b3      	ldr	r3, [r6, #8]
	bool found = false;
   23d64:	2000      	movs	r0, #0
		shift = shift_calc(shell->ctx->cmd_buff,
   23d66:	8e9a      	ldrh	r2, [r3, #52]	; 0x34
   23d68:	f103 0c38 	add.w	ip, r3, #56	; 0x38
   23d6c:	f8b3 e032 	ldrh.w	lr, [r3, #50]	; 0x32
   23d70:	4613      	mov	r3, r2
		idx = pos + ret * sign;
   23d72:	1a99      	subs	r1, r3, r2
   23d74:	b209      	sxth	r1, r1
		if (((idx == 0U) && (sign < 0)) ||
   23d76:	b913      	cbnz	r3, 23d7e <shell_op_cursor_word_move+0x36>
   23d78:	f1b5 3fff 	cmp.w	r5, #4294967295
   23d7c:	d00b      	beq.n	23d96 <shell_op_cursor_word_move+0x4e>
   23d7e:	459e      	cmp	lr, r3
   23d80:	d101      	bne.n	23d86 <shell_op_cursor_word_move+0x3e>
		    ((idx == len) && (sign > 0))) {
   23d82:	2d01      	cmp	r5, #1
   23d84:	d007      	beq.n	23d96 <shell_op_cursor_word_move+0x4e>
		if (isalnum((int)str[idx]) != 0) {
   23d86:	f81c 9003 	ldrb.w	r9, [ip, r3]
   23d8a:	f819 9008 	ldrb.w	r9, [r9, r8]
   23d8e:	f019 0f07 	tst.w	r9, #7
   23d92:	d109      	bne.n	23da8 <shell_op_cursor_word_move+0x60>
			if (found) {
   23d94:	b148      	cbz	r0, 23daa <shell_op_cursor_word_move+0x62>
				   shell->ctx->cmd_buff_pos,
				   shell->ctx->cmd_buff_len, sign);
		shell_op_cursor_move(shell, sign * shift);
   23d96:	4630      	mov	r0, r6
   23d98:	f01d fa90 	bl	412bc <shell_op_cursor_move>
	while (val--) {
   23d9c:	3c01      	subs	r4, #1
   23d9e:	b224      	sxth	r4, r4
   23da0:	1c63      	adds	r3, r4, #1
   23da2:	d1de      	bne.n	23d62 <shell_op_cursor_word_move+0x1a>
	}
}
   23da4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			found = true;
   23da8:	2001      	movs	r0, #1
		ret++;
   23daa:	443b      	add	r3, r7
   23dac:	b29b      	uxth	r3, r3
   23dae:	e7e0      	b.n	23d72 <shell_op_cursor_word_move+0x2a>
		sign = 1;
   23db0:	2501      	movs	r5, #1
   23db2:	e7d2      	b.n	23d5a <shell_op_cursor_word_move+0x12>
   23db4:	0004d857 	.word	0x0004d857

00023db8 <shell_print_cmd>:
	shell_internal_fprintf(shell, SHELL_INFO, "%s", shell->ctx->prompt);
}

void shell_print_cmd(const struct shell *shell)
{
	shell_raw_fprintf(shell->fprintf_ctx, "%s", shell->ctx->cmd_buff);
   23db8:	6882      	ldr	r2, [r0, #8]
   23dba:	4902      	ldr	r1, [pc, #8]	; (23dc4 <shell_print_cmd+0xc>)
   23dbc:	3238      	adds	r2, #56	; 0x38
   23dbe:	6940      	ldr	r0, [r0, #20]
   23dc0:	f01d ba47 	b.w	41252 <shell_raw_fprintf>
   23dc4:	00047a4a 	.word	0x00047a4a

00023dc8 <shell_write>:
	}
}

void shell_write(const struct shell *shell, const void *data,
		 size_t length)
{
   23dc8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   23dcc:	4688      	mov	r8, r1
   23dce:	4614      	mov	r4, r2
	__ASSERT_NO_MSG(shell && data);
   23dd0:	4605      	mov	r5, r0
   23dd2:	b100      	cbz	r0, 23dd6 <shell_write+0xe>
   23dd4:	b959      	cbnz	r1, 23dee <shell_write+0x26>
   23dd6:	492f      	ldr	r1, [pc, #188]	; (23e94 <shell_write+0xcc>)
   23dd8:	482f      	ldr	r0, [pc, #188]	; (23e98 <shell_write+0xd0>)
   23dda:	f44f 73bb 	mov.w	r3, #374	; 0x176
   23dde:	4a2f      	ldr	r2, [pc, #188]	; (23e9c <shell_write+0xd4>)
   23de0:	f01c fc0f 	bl	40602 <printk>
   23de4:	f44f 71bb 	mov.w	r1, #374	; 0x176
   23de8:	482c      	ldr	r0, [pc, #176]	; (23e9c <shell_write+0xd4>)
   23dea:	f01c fccd 	bl	40788 <assert_post_action>
{
   23dee:	2700      	movs	r7, #0
	while (length) {
		int err = shell->iface->api->write(shell->iface,
				&((const u8_t *) data)[offset], length,
				&tmp_cnt);
		(void)err;
		__ASSERT_NO_MSG(err == 0);
   23df0:	4e2a      	ldr	r6, [pc, #168]	; (23e9c <shell_write+0xd4>)
   23df2:	f8df a0b0 	ldr.w	sl, [pc, #176]	; 23ea4 <shell_write+0xdc>
   23df6:	f8df 90a0 	ldr.w	r9, [pc, #160]	; 23e98 <shell_write+0xd0>
	while (length) {
   23dfa:	b914      	cbnz	r4, 23e02 <shell_write+0x3a>
		if (tmp_cnt == 0 &&
		    (shell->ctx->state != SHELL_STATE_PANIC_MODE_ACTIVE)) {
			shell_pend_on_txdone(shell);
		}
	}
}
   23dfc:	b003      	add	sp, #12
   23dfe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		int err = shell->iface->api->write(shell->iface,
   23e02:	6868      	ldr	r0, [r5, #4]
   23e04:	4622      	mov	r2, r4
   23e06:	6803      	ldr	r3, [r0, #0]
   23e08:	eb08 0107 	add.w	r1, r8, r7
   23e0c:	f8d3 b00c 	ldr.w	fp, [r3, #12]
   23e10:	ab01      	add	r3, sp, #4
   23e12:	47d8      	blx	fp
		__ASSERT_NO_MSG(err == 0);
   23e14:	b158      	cbz	r0, 23e2e <shell_write+0x66>
   23e16:	4651      	mov	r1, sl
   23e18:	4648      	mov	r0, r9
   23e1a:	f44f 73c0 	mov.w	r3, #384	; 0x180
   23e1e:	4632      	mov	r2, r6
   23e20:	f01c fbef 	bl	40602 <printk>
   23e24:	f44f 71c0 	mov.w	r1, #384	; 0x180
   23e28:	4630      	mov	r0, r6
   23e2a:	f01c fcad 	bl	40788 <assert_post_action>
		__ASSERT_NO_MSG(length >= tmp_cnt);
   23e2e:	9b01      	ldr	r3, [sp, #4]
   23e30:	42a3      	cmp	r3, r4
   23e32:	d90b      	bls.n	23e4c <shell_write+0x84>
   23e34:	491a      	ldr	r1, [pc, #104]	; (23ea0 <shell_write+0xd8>)
   23e36:	4648      	mov	r0, r9
   23e38:	f240 1381 	movw	r3, #385	; 0x181
   23e3c:	4632      	mov	r2, r6
   23e3e:	f01c fbe0 	bl	40602 <printk>
   23e42:	f240 1181 	movw	r1, #385	; 0x181
   23e46:	4630      	mov	r0, r6
   23e48:	f01c fc9e 	bl	40788 <assert_post_action>
		offset += tmp_cnt;
   23e4c:	f8dd b004 	ldr.w	fp, [sp, #4]
   23e50:	445f      	add	r7, fp
		length -= tmp_cnt;
   23e52:	eba4 040b 	sub.w	r4, r4, fp
		if (tmp_cnt == 0 &&
   23e56:	f1bb 0f00 	cmp.w	fp, #0
   23e5a:	d1ce      	bne.n	23dfa <shell_write+0x32>
		    (shell->ctx->state != SHELL_STATE_PANIC_MODE_ACTIVE)) {
   23e5c:	68a8      	ldr	r0, [r5, #8]
   23e5e:	7903      	ldrb	r3, [r0, #4]
		if (tmp_cnt == 0 &&
   23e60:	2b03      	cmp	r3, #3
   23e62:	d0ca      	beq.n	23dfa <shell_write+0x32>
	if (IS_ENABLED(CONFIG_MULTITHREADING) &&
   23e64:	2b02      	cmp	r3, #2
   23e66:	d80a      	bhi.n	23e7e <shell_write+0xb6>
	return z_impl_k_poll(events, num_events, timeout);
   23e68:	f04f 32ff 	mov.w	r2, #4294967295
   23e6c:	2101      	movs	r1, #1
   23e6e:	f500 7036 	add.w	r0, r0, #728	; 0x2d8
   23e72:	f01a fc2d 	bl	3e6d0 <z_impl_k_poll>
		k_poll_signal_reset(&shell->ctx->signals[SHELL_SIGNAL_TXDONE]);
   23e76:	68ab      	ldr	r3, [r5, #8]
 */
__syscall void k_poll_signal_reset(struct k_poll_signal *signal);

static inline void z_impl_k_poll_signal_reset(struct k_poll_signal *signal)
{
	signal->signaled = 0U;
   23e78:	f8c3 b294 	str.w	fp, [r3, #660]	; 0x294
   23e7c:	e7bd      	b.n	23dfa <shell_write+0x32>
	return shell->ctx->internal.flags.tx_rdy == 1 ? true : false;
   23e7e:	f8d0 3258 	ldr.w	r3, [r0, #600]	; 0x258
		while (!flag_tx_rdy_get(shell)) {
   23e82:	06db      	lsls	r3, r3, #27
   23e84:	d5fb      	bpl.n	23e7e <shell_write+0xb6>
	shell->ctx->internal.flags.tx_rdy = val ? 1 : 0;
   23e86:	f8b0 3258 	ldrh.w	r3, [r0, #600]	; 0x258
   23e8a:	f36f 1304 	bfc	r3, #4, #1
   23e8e:	f8a0 3258 	strh.w	r3, [r0, #600]	; 0x258
   23e92:	e7b2      	b.n	23dfa <shell_write+0x32>
   23e94:	00048a81 	.word	0x00048a81
   23e98:	0004764f 	.word	0x0004764f
   23e9c:	00048a55 	.word	0x00048a55
   23ea0:	00048a8f 	.word	0x00048a8f
   23ea4:	0004822c 	.word	0x0004822c

00023ea8 <shell_vt100_color_set>:

void shell_vt100_color_set(const struct shell *shell,
			   enum shell_vt100_color color)
{

	if (shell->ctx->vt100_ctx.col.col == color) {
   23ea8:	6883      	ldr	r3, [r0, #8]
{
   23eaa:	b507      	push	{r0, r1, r2, lr}
	if (shell->ctx->vt100_ctx.col.col == color) {
   23eac:	f893 202e 	ldrb.w	r2, [r3, #46]	; 0x2e
   23eb0:	428a      	cmp	r2, r1
   23eb2:	d012      	beq.n	23eda <shell_vt100_color_set+0x32>
		return;
	}

	shell->ctx->vt100_ctx.col.col = color;
   23eb4:	f883 102e 	strb.w	r1, [r3, #46]	; 0x2e

	if (color != SHELL_NORMAL) {
   23eb8:	6940      	ldr	r0, [r0, #20]
   23eba:	b189      	cbz	r1, 23ee0 <shell_vt100_color_set+0x38>

		u8_t cmd[] = SHELL_VT100_COLOR(color - 1);
   23ebc:	4b09      	ldr	r3, [pc, #36]	; (23ee4 <shell_vt100_color_set+0x3c>)

		shell_raw_fprintf(shell->fprintf_ctx, "%s", cmd);
   23ebe:	466a      	mov	r2, sp
		u8_t cmd[] = SHELL_VT100_COLOR(color - 1);
   23ec0:	9300      	str	r3, [sp, #0]
   23ec2:	2333      	movs	r3, #51	; 0x33
   23ec4:	f88d 3004 	strb.w	r3, [sp, #4]
   23ec8:	236d      	movs	r3, #109	; 0x6d
   23eca:	312f      	adds	r1, #47	; 0x2f
   23ecc:	f88d 1005 	strb.w	r1, [sp, #5]
   23ed0:	f8ad 3006 	strh.w	r3, [sp, #6]
	} else {
		static const u8_t cmd[] = SHELL_VT100_MODESOFF;

		shell_raw_fprintf(shell->fprintf_ctx, "%s", cmd);
   23ed4:	4904      	ldr	r1, [pc, #16]	; (23ee8 <shell_vt100_color_set+0x40>)
   23ed6:	f01d f9bc 	bl	41252 <shell_raw_fprintf>
	}
}
   23eda:	b003      	add	sp, #12
   23edc:	f85d fb04 	ldr.w	pc, [sp], #4
		shell_raw_fprintf(shell->fprintf_ctx, "%s", cmd);
   23ee0:	4a02      	ldr	r2, [pc, #8]	; (23eec <shell_vt100_color_set+0x44>)
   23ee2:	e7f7      	b.n	23ed4 <shell_vt100_color_set+0x2c>
   23ee4:	3b315b1b 	.word	0x3b315b1b
   23ee8:	00047a4a 	.word	0x00047a4a
   23eec:	00048a4a 	.word	0x00048a4a

00023ef0 <shell_vt100_colors_restore>:

void shell_vt100_colors_restore(const struct shell *shell,
				       const struct shell_vt100_colors *color)
{
   23ef0:	b537      	push	{r0, r1, r2, r4, r5, lr}
   23ef2:	460d      	mov	r5, r1
	shell_vt100_color_set(shell, color->col);
   23ef4:	7809      	ldrb	r1, [r1, #0]
{
   23ef6:	4604      	mov	r4, r0
	shell_vt100_color_set(shell, color->col);
   23ef8:	f7ff ffd6 	bl	23ea8 <shell_vt100_color_set>
	vt100_bgcolor_set(shell, color->bgcol);
   23efc:	786b      	ldrb	r3, [r5, #1]
	if ((bgcolor == SHELL_NORMAL) ||
   23efe:	b1cb      	cbz	r3, 23f34 <shell_vt100_colors_restore+0x44>
	    (shell->ctx->vt100_ctx.col.bgcol == bgcolor)) {
   23f00:	68a2      	ldr	r2, [r4, #8]
	if ((bgcolor == SHELL_NORMAL) ||
   23f02:	f892 102f 	ldrb.w	r1, [r2, #47]	; 0x2f
   23f06:	4299      	cmp	r1, r3
   23f08:	d014      	beq.n	23f34 <shell_vt100_colors_restore+0x44>
	u8_t cmd[] = SHELL_VT100_BGCOLOR(bgcolor - 1);
   23f0a:	f645 311b 	movw	r1, #23323	; 0x5b1b
   23f0e:	f8ad 1000 	strh.w	r1, [sp]
   23f12:	2134      	movs	r1, #52	; 0x34
   23f14:	f88d 1002 	strb.w	r1, [sp, #2]
   23f18:	f103 012f 	add.w	r1, r3, #47	; 0x2f
   23f1c:	f88d 1003 	strb.w	r1, [sp, #3]
   23f20:	216d      	movs	r1, #109	; 0x6d
	shell->ctx->vt100_ctx.col.bgcol = bgcolor;
   23f22:	f882 302f 	strb.w	r3, [r2, #47]	; 0x2f
	u8_t cmd[] = SHELL_VT100_BGCOLOR(bgcolor - 1);
   23f26:	f8ad 1004 	strh.w	r1, [sp, #4]
	shell_raw_fprintf(shell->fprintf_ctx, "%s", cmd);
   23f2a:	466a      	mov	r2, sp
   23f2c:	4902      	ldr	r1, [pc, #8]	; (23f38 <shell_vt100_colors_restore+0x48>)
   23f2e:	6960      	ldr	r0, [r4, #20]
   23f30:	f01d f98f 	bl	41252 <shell_raw_fprintf>
}
   23f34:	b003      	add	sp, #12
   23f36:	bd30      	pop	{r4, r5, pc}
   23f38:	00047a4a 	.word	0x00047a4a

00023f3c <shell_internal_fprintf>:
}

void shell_internal_fprintf(const struct shell *shell,
			    enum shell_vt100_color color,
			    const char *fmt, ...)
{
   23f3c:	b40c      	push	{r2, r3}
   23f3e:	b573      	push	{r0, r1, r4, r5, r6, lr}
   23f40:	9d06      	ldr	r5, [sp, #24]
   23f42:	460e      	mov	r6, r1
	__ASSERT_NO_MSG(shell);
   23f44:	4604      	mov	r4, r0
   23f46:	b958      	cbnz	r0, 23f60 <shell_internal_fprintf+0x24>
   23f48:	4929      	ldr	r1, [pc, #164]	; (23ff0 <shell_internal_fprintf+0xb4>)
   23f4a:	482a      	ldr	r0, [pc, #168]	; (23ff4 <shell_internal_fprintf+0xb8>)
   23f4c:	f240 13d7 	movw	r3, #471	; 0x1d7
   23f50:	4a29      	ldr	r2, [pc, #164]	; (23ff8 <shell_internal_fprintf+0xbc>)
   23f52:	f01c fb56 	bl	40602 <printk>
   23f56:	f240 11d7 	movw	r1, #471	; 0x1d7
   23f5a:	4827      	ldr	r0, [pc, #156]	; (23ff8 <shell_internal_fprintf+0xbc>)
   23f5c:	f01c fc14 	bl	40788 <assert_post_action>
	__ASSERT(!k_is_in_isr(), "Thread context required.");
   23f60:	f020 fe2c 	bl	44bbc <k_is_in_isr>
   23f64:	b170      	cbz	r0, 23f84 <shell_internal_fprintf+0x48>
   23f66:	4925      	ldr	r1, [pc, #148]	; (23ffc <shell_internal_fprintf+0xc0>)
   23f68:	f44f 73ec 	mov.w	r3, #472	; 0x1d8
   23f6c:	4a22      	ldr	r2, [pc, #136]	; (23ff8 <shell_internal_fprintf+0xbc>)
   23f6e:	4821      	ldr	r0, [pc, #132]	; (23ff4 <shell_internal_fprintf+0xb8>)
   23f70:	f01c fb47 	bl	40602 <printk>
   23f74:	4822      	ldr	r0, [pc, #136]	; (24000 <shell_internal_fprintf+0xc4>)
   23f76:	f01c fb44 	bl	40602 <printk>
   23f7a:	f44f 71ec 	mov.w	r1, #472	; 0x1d8
   23f7e:	481e      	ldr	r0, [pc, #120]	; (23ff8 <shell_internal_fprintf+0xbc>)
   23f80:	f01c fc02 	bl	40788 <assert_post_action>
	__ASSERT_NO_MSG(shell->ctx);
   23f84:	68a3      	ldr	r3, [r4, #8]
   23f86:	b95b      	cbnz	r3, 23fa0 <shell_internal_fprintf+0x64>
   23f88:	491e      	ldr	r1, [pc, #120]	; (24004 <shell_internal_fprintf+0xc8>)
   23f8a:	481a      	ldr	r0, [pc, #104]	; (23ff4 <shell_internal_fprintf+0xb8>)
   23f8c:	f240 13d9 	movw	r3, #473	; 0x1d9
   23f90:	4a19      	ldr	r2, [pc, #100]	; (23ff8 <shell_internal_fprintf+0xbc>)
   23f92:	f01c fb36 	bl	40602 <printk>
   23f96:	f240 11d9 	movw	r1, #473	; 0x1d9
   23f9a:	4817      	ldr	r0, [pc, #92]	; (23ff8 <shell_internal_fprintf+0xbc>)
   23f9c:	f01c fbf4 	bl	40788 <assert_post_action>
	__ASSERT_NO_MSG(shell->fprintf_ctx);
   23fa0:	6963      	ldr	r3, [r4, #20]
   23fa2:	b95b      	cbnz	r3, 23fbc <shell_internal_fprintf+0x80>
   23fa4:	4918      	ldr	r1, [pc, #96]	; (24008 <shell_internal_fprintf+0xcc>)
   23fa6:	4813      	ldr	r0, [pc, #76]	; (23ff4 <shell_internal_fprintf+0xb8>)
   23fa8:	f44f 73ed 	mov.w	r3, #474	; 0x1da
   23fac:	4a12      	ldr	r2, [pc, #72]	; (23ff8 <shell_internal_fprintf+0xbc>)
   23fae:	f01c fb28 	bl	40602 <printk>
   23fb2:	f44f 71ed 	mov.w	r1, #474	; 0x1da
   23fb6:	4810      	ldr	r0, [pc, #64]	; (23ff8 <shell_internal_fprintf+0xbc>)
   23fb8:	f01c fbe6 	bl	40788 <assert_post_action>
	__ASSERT_NO_MSG(fmt);
   23fbc:	b95d      	cbnz	r5, 23fd6 <shell_internal_fprintf+0x9a>
   23fbe:	4913      	ldr	r1, [pc, #76]	; (2400c <shell_internal_fprintf+0xd0>)
   23fc0:	480c      	ldr	r0, [pc, #48]	; (23ff4 <shell_internal_fprintf+0xb8>)
   23fc2:	f240 13db 	movw	r3, #475	; 0x1db
   23fc6:	4a0c      	ldr	r2, [pc, #48]	; (23ff8 <shell_internal_fprintf+0xbc>)
   23fc8:	f01c fb1b 	bl	40602 <printk>
   23fcc:	f240 11db 	movw	r1, #475	; 0x1db
   23fd0:	4809      	ldr	r0, [pc, #36]	; (23ff8 <shell_internal_fprintf+0xbc>)
   23fd2:	f01c fbd9 	bl	40788 <assert_post_action>

	va_list args;

	va_start(args, fmt);
   23fd6:	ab07      	add	r3, sp, #28
	shell_internal_vfprintf(shell, color, fmt, args);
   23fd8:	462a      	mov	r2, r5
   23fda:	4631      	mov	r1, r6
   23fdc:	4620      	mov	r0, r4
	va_start(args, fmt);
   23fde:	9301      	str	r3, [sp, #4]
	shell_internal_vfprintf(shell, color, fmt, args);
   23fe0:	f01d f9d4 	bl	4138c <shell_internal_vfprintf>
	va_end(args);
}
   23fe4:	b002      	add	sp, #8
   23fe6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   23fea:	b002      	add	sp, #8
   23fec:	4770      	bx	lr
   23fee:	bf00      	nop
   23ff0:	0004adfa 	.word	0x0004adfa
   23ff4:	0004764f 	.word	0x0004764f
   23ff8:	00048a55 	.word	0x00048a55
   23ffc:	000488af 	.word	0x000488af
   24000:	000488be 	.word	0x000488be
   24004:	000489d3 	.word	0x000489d3
   24008:	0004892b 	.word	0x0004892b
   2400c:	0004893e 	.word	0x0004893e

00024010 <shell_op_word_remove>:
{
   24010:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	char *str = &shell->ctx->cmd_buff[shell->ctx->cmd_buff_pos - 1];
   24012:	6883      	ldr	r3, [r0, #8]
{
   24014:	4605      	mov	r5, r0
	if ((shell->ctx->cmd_buff_len == 0) ||
   24016:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
   24018:	2a00      	cmp	r2, #0
   2401a:	d046      	beq.n	240aa <shell_op_word_remove+0x9a>
	char *str = &shell->ctx->cmd_buff[shell->ctx->cmd_buff_pos - 1];
   2401c:	8e98      	ldrh	r0, [r3, #52]	; 0x34
	if ((shell->ctx->cmd_buff_len == 0) ||
   2401e:	2800      	cmp	r0, #0
   24020:	d043      	beq.n	240aa <shell_op_word_remove+0x9a>
	char *str = &shell->ctx->cmd_buff[shell->ctx->cmd_buff_pos - 1];
   24022:	3037      	adds	r0, #55	; 0x37
   24024:	4418      	add	r0, r3
	char *str_start = &shell->ctx->cmd_buff[0];
   24026:	f103 0638 	add.w	r6, r3, #56	; 0x38
   2402a:	4603      	mov	r3, r0
   2402c:	1ac4      	subs	r4, r0, r3
	while ((str >= str_start) && (*str == ' ')) {
   2402e:	42b3      	cmp	r3, r6
   24030:	b2a4      	uxth	r4, r4
   24032:	4619      	mov	r1, r3
   24034:	d30d      	bcc.n	24052 <shell_op_word_remove+0x42>
   24036:	f811 7901 	ldrb.w	r7, [r1], #-1
   2403a:	2f20      	cmp	r7, #32
   2403c:	d033      	beq.n	240a6 <shell_op_word_remove+0x96>
   2403e:	4619      	mov	r1, r3
	while ((str >= str_start) && (*str != ' ')) {
   24040:	7808      	ldrb	r0, [r1, #0]
   24042:	3b01      	subs	r3, #1
   24044:	2820      	cmp	r0, #32
   24046:	d004      	beq.n	24052 <shell_op_word_remove+0x42>
		++chars_to_delete;
   24048:	3401      	adds	r4, #1
	while ((str >= str_start) && (*str != ' ')) {
   2404a:	429e      	cmp	r6, r3
		++chars_to_delete;
   2404c:	b2a4      	uxth	r4, r4
		--str;
   2404e:	4619      	mov	r1, r3
	while ((str >= str_start) && (*str != ' ')) {
   24050:	d9f5      	bls.n	2403e <shell_op_word_remove+0x2e>
	shell->ctx->cmd_buff[shell->ctx->cmd_buff_len] = '\0';
   24052:	2700      	movs	r7, #0
	memmove(str + 1, str + 1 + chars_to_delete,
   24054:	1c63      	adds	r3, r4, #1
   24056:	1c4e      	adds	r6, r1, #1
   24058:	1b12      	subs	r2, r2, r4
   2405a:	4419      	add	r1, r3
   2405c:	4630      	mov	r0, r6
   2405e:	f020 ff17 	bl	44e90 <memmove>
	shell->ctx->cmd_buff_len -= chars_to_delete;
   24062:	68a9      	ldr	r1, [r5, #8]
	shell_op_cursor_move(shell, -chars_to_delete);
   24064:	4628      	mov	r0, r5
	shell->ctx->cmd_buff_len -= chars_to_delete;
   24066:	8e4a      	ldrh	r2, [r1, #50]	; 0x32
   24068:	1b12      	subs	r2, r2, r4
   2406a:	b292      	uxth	r2, r2
   2406c:	864a      	strh	r2, [r1, #50]	; 0x32
	shell->ctx->cmd_buff[shell->ctx->cmd_buff_len] = '\0';
   2406e:	440a      	add	r2, r1
	shell_op_cursor_move(shell, -chars_to_delete);
   24070:	4261      	negs	r1, r4
	shell->ctx->cmd_buff[shell->ctx->cmd_buff_len] = '\0';
   24072:	f882 7038 	strb.w	r7, [r2, #56]	; 0x38
	shell_op_cursor_move(shell, -chars_to_delete);
   24076:	b209      	sxth	r1, r1
   24078:	f01d f920 	bl	412bc <shell_op_cursor_move>
	SHELL_VT100_CMD(shell, SHELL_VT100_SAVECURSOR);
   2407c:	6968      	ldr	r0, [r5, #20]
   2407e:	4a0b      	ldr	r2, [pc, #44]	; (240ac <shell_op_word_remove+0x9c>)
   24080:	490b      	ldr	r1, [pc, #44]	; (240b0 <shell_op_word_remove+0xa0>)
   24082:	f01d f8e6 	bl	41252 <shell_raw_fprintf>
	shell_internal_fprintf(shell, SHELL_NORMAL, "%s", str + 1);
   24086:	4639      	mov	r1, r7
   24088:	4633      	mov	r3, r6
   2408a:	4a09      	ldr	r2, [pc, #36]	; (240b0 <shell_op_word_remove+0xa0>)
   2408c:	4628      	mov	r0, r5
   2408e:	f7ff ff55 	bl	23f3c <shell_internal_fprintf>
	clear_eos(shell);
   24092:	6968      	ldr	r0, [r5, #20]
   24094:	f7ff fdf2 	bl	23c7c <clear_eos.isra.6>
	SHELL_VT100_CMD(shell, SHELL_VT100_RESTORECURSOR);
   24098:	6968      	ldr	r0, [r5, #20]
   2409a:	4a06      	ldr	r2, [pc, #24]	; (240b4 <shell_op_word_remove+0xa4>)
   2409c:	4904      	ldr	r1, [pc, #16]	; (240b0 <shell_op_word_remove+0xa0>)
}
   2409e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   240a2:	f01d b8d6 	b.w	41252 <shell_raw_fprintf>
   240a6:	460b      	mov	r3, r1
   240a8:	e7c0      	b.n	2402c <shell_op_word_remove+0x1c>
   240aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   240ac:	00048a44 	.word	0x00048a44
   240b0:	00047a4a 	.word	0x00047a4a
   240b4:	00048a47 	.word	0x00048a47

000240b8 <reprint_from_cursor>:
{
   240b8:	b570      	push	{r4, r5, r6, lr}
   240ba:	4604      	mov	r4, r0
   240bc:	460d      	mov	r5, r1
	if (data_removed) {
   240be:	4616      	mov	r6, r2
   240c0:	b112      	cbz	r2, 240c8 <reprint_from_cursor+0x10>
		clear_eos(shell);
   240c2:	6940      	ldr	r0, [r0, #20]
   240c4:	f7ff fdda 	bl	23c7c <clear_eos.isra.6>
		      &shell->ctx->cmd_buff[shell->ctx->cmd_buff_pos]);
   240c8:	68a2      	ldr	r2, [r4, #8]
	shell_internal_fprintf(shell, SHELL_NORMAL, "%s",
   240ca:	4620      	mov	r0, r4
   240cc:	8e93      	ldrh	r3, [r2, #52]	; 0x34
   240ce:	2100      	movs	r1, #0
   240d0:	3338      	adds	r3, #56	; 0x38
   240d2:	4413      	add	r3, r2
   240d4:	4a0b      	ldr	r2, [pc, #44]	; (24104 <reprint_from_cursor+0x4c>)
   240d6:	f7ff ff31 	bl	23f3c <shell_internal_fprintf>
	shell->ctx->cmd_buff_pos = shell->ctx->cmd_buff_len;
   240da:	4620      	mov	r0, r4
   240dc:	f850 3f08 	ldr.w	r3, [r0, #8]!
   240e0:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
   240e2:	869a      	strh	r2, [r3, #52]	; 0x34
	if (full_line_cmd(shell)) {
   240e4:	f01d f8c2 	bl	4126c <full_line_cmd.isra.8>
   240e8:	b128      	cbz	r0, 240f6 <reprint_from_cursor+0x3e>
		if (((data_removed) && (diff > 0)) || (!data_removed)) {
   240ea:	b106      	cbz	r6, 240ee <reprint_from_cursor+0x36>
   240ec:	b11d      	cbz	r5, 240f6 <reprint_from_cursor+0x3e>
	shell_raw_fprintf(shell->fprintf_ctx, "\n");
   240ee:	4906      	ldr	r1, [pc, #24]	; (24108 <reprint_from_cursor+0x50>)
   240f0:	6960      	ldr	r0, [r4, #20]
   240f2:	f01d f8ae 	bl	41252 <shell_raw_fprintf>
	shell_op_cursor_move(shell, -diff);
   240f6:	4269      	negs	r1, r5
   240f8:	4620      	mov	r0, r4
}
   240fa:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	shell_op_cursor_move(shell, -diff);
   240fe:	b209      	sxth	r1, r1
   24100:	f01d b8dc 	b.w	412bc <shell_op_cursor_move>
   24104:	00047a4a 	.word	0x00047a4a
   24108:	0004a298 	.word	0x0004a298

0002410c <shell_op_char_insert>:
{
   2410c:	b513      	push	{r0, r1, r4, lr}
	if (shell->ctx->internal.flags.insert_mode &&
   2410e:	6883      	ldr	r3, [r0, #8]
{
   24110:	f88d 1007 	strb.w	r1, [sp, #7]
	if (shell->ctx->internal.flags.insert_mode &&
   24114:	f8d3 2258 	ldr.w	r2, [r3, #600]	; 0x258
{
   24118:	4604      	mov	r4, r0
	if (shell->ctx->internal.flags.insert_mode &&
   2411a:	07d2      	lsls	r2, r2, #31
   2411c:	d51d      	bpl.n	2415a <shell_op_char_insert+0x4e>
		(shell->ctx->cmd_buff_len != shell->ctx->cmd_buff_pos)) {
   2411e:	8e99      	ldrh	r1, [r3, #52]	; 0x34
	if (shell->ctx->internal.flags.insert_mode &&
   24120:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
   24122:	428a      	cmp	r2, r1
   24124:	d019      	beq.n	2415a <shell_op_char_insert+0x4e>
		char_replace(shell, data);
   24126:	f89d 2007 	ldrb.w	r2, [sp, #7]
	shell->ctx->cmd_buff[shell->ctx->cmd_buff_pos++] = data;
   2412a:	1c48      	adds	r0, r1, #1
   2412c:	8698      	strh	r0, [r3, #52]	; 0x34
   2412e:	440b      	add	r3, r1
   24130:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
	if (!flag_echo_get(shell)) {
   24134:	68a3      	ldr	r3, [r4, #8]
	return shell->ctx->internal.flags.echo == 1 ? true : false;
   24136:	f8d3 3258 	ldr.w	r3, [r3, #600]	; 0x258
   2413a:	075b      	lsls	r3, r3, #29
   2413c:	d50b      	bpl.n	24156 <shell_op_char_insert+0x4a>
	shell_raw_fprintf(shell->fprintf_ctx, "%c", data);
   2413e:	6960      	ldr	r0, [r4, #20]
   24140:	4909      	ldr	r1, [pc, #36]	; (24168 <shell_op_char_insert+0x5c>)
   24142:	f01d f886 	bl	41252 <shell_raw_fprintf>
	if (shell_cursor_in_empty_line(shell)) {
   24146:	4620      	mov	r0, r4
   24148:	f01d f8a4 	bl	41294 <shell_cursor_in_empty_line>
   2414c:	b118      	cbz	r0, 24156 <shell_op_char_insert+0x4a>
	shell_raw_fprintf(shell->fprintf_ctx, "\n");
   2414e:	4907      	ldr	r1, [pc, #28]	; (2416c <shell_op_char_insert+0x60>)
   24150:	6960      	ldr	r0, [r4, #20]
   24152:	f01d f87e 	bl	41252 <shell_raw_fprintf>
}
   24156:	b002      	add	sp, #8
   24158:	bd10      	pop	{r4, pc}
		data_insert(shell, &data, 1);
   2415a:	2201      	movs	r2, #1
   2415c:	f10d 0107 	add.w	r1, sp, #7
   24160:	4620      	mov	r0, r4
   24162:	f01d f936 	bl	413d2 <data_insert>
}
   24166:	e7f6      	b.n	24156 <shell_op_char_insert+0x4a>
   24168:	00048a52 	.word	0x00048a52
   2416c:	0004a298 	.word	0x0004a298

00024170 <shell_print_prompt_and_cmd>:
{
   24170:	b510      	push	{r4, lr}
   24172:	4604      	mov	r4, r0
	shell_internal_fprintf(shell, SHELL_INFO, "%s", shell->ctx->prompt);
   24174:	6883      	ldr	r3, [r0, #8]
   24176:	4a09      	ldr	r2, [pc, #36]	; (2419c <shell_print_prompt_and_cmd+0x2c>)
   24178:	681b      	ldr	r3, [r3, #0]
   2417a:	2103      	movs	r1, #3
   2417c:	f7ff fede 	bl	23f3c <shell_internal_fprintf>
	if (flag_echo_get(shell)) {
   24180:	68a3      	ldr	r3, [r4, #8]
	return shell->ctx->internal.flags.echo == 1 ? true : false;
   24182:	f8d3 3258 	ldr.w	r3, [r3, #600]	; 0x258
   24186:	075b      	lsls	r3, r3, #29
   24188:	d507      	bpl.n	2419a <shell_print_prompt_and_cmd+0x2a>
		shell_print_cmd(shell);
   2418a:	4620      	mov	r0, r4
   2418c:	f7ff fe14 	bl	23db8 <shell_print_cmd>
		shell_op_cursor_position_synchronize(shell);
   24190:	4620      	mov	r0, r4
}
   24192:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		shell_op_cursor_position_synchronize(shell);
   24196:	f7ff bdad 	b.w	23cf4 <shell_op_cursor_position_synchronize>
}
   2419a:	bd10      	pop	{r4, pc}
   2419c:	00047a4a 	.word	0x00047a4a

000241a0 <init>:

static int init(const struct shell_transport *transport,
		const void *config,
		shell_transport_handler_t evt_handler,
		void *context)
{
   241a0:	b510      	push	{r4, lr}
   241a2:	460c      	mov	r4, r1
	const struct shell_uart *sh_uart = (struct shell_uart *)transport->ctx;
   241a4:	6840      	ldr	r0, [r0, #4]

	sh_uart->ctrl_blk->dev = (struct device *)config;
   241a6:	6801      	ldr	r1, [r0, #0]
	sh_uart->ctrl_blk->handler = evt_handler;
	sh_uart->ctrl_blk->context = context;
   241a8:	608b      	str	r3, [r1, #8]
static inline void uart_irq_callback_user_data_set(
					struct device *dev,
					uart_irq_callback_user_data_t cb,
					void *user_data)
{
	const struct uart_driver_api *api =
   241aa:	6863      	ldr	r3, [r4, #4]
	sh_uart->ctrl_blk->handler = evt_handler;
   241ac:	e9c1 4200 	strd	r4, r2, [r1]
		(const struct uart_driver_api *)dev->driver_api;

	if ((api != NULL) && (api->irq_callback_set != NULL)) {
   241b0:	b12b      	cbz	r3, 241be <init+0x1e>
   241b2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   241b4:	b11b      	cbz	r3, 241be <init+0x1e>
		api->irq_callback_set(dev, cb, user_data);
   241b6:	4602      	mov	r2, r0
   241b8:	4904      	ldr	r1, [pc, #16]	; (241cc <init+0x2c>)
   241ba:	4620      	mov	r0, r4
   241bc:	4798      	blx	r3
	if (api->irq_rx_enable) {
   241be:	6863      	ldr	r3, [r4, #4]
   241c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   241c2:	b10b      	cbz	r3, 241c8 <init+0x28>
		api->irq_rx_enable(dev);
   241c4:	4620      	mov	r0, r4
   241c6:	4798      	blx	r3
		k_timer_user_data_set(sh_uart->timer, (void *)sh_uart);
		k_timer_start(sh_uart->timer, RX_POLL_PERIOD, RX_POLL_PERIOD);
	}

	return 0;
}
   241c8:	2000      	movs	r0, #0
   241ca:	bd10      	pop	{r4, pc}
   241cc:	000241f9 	.word	0x000241f9

000241d0 <enable_shell_uart>:
	.update = update,
#endif /* CONFIG_MCUMGR_SMP_SHELL */
};

static int enable_shell_uart(struct device *arg)
{
   241d0:	b507      	push	{r0, r1, r2, lr}
   241d2:	4807      	ldr	r0, [pc, #28]	; (241f0 <enable_shell_uart+0x20>)
   241d4:	f016 ff58 	bl	3b088 <z_impl_device_get_binding>
	bool log_backend = CONFIG_SHELL_BACKEND_SERIAL_LOG_LEVEL > 0;
	u32_t level =
		(CONFIG_SHELL_BACKEND_SERIAL_LOG_LEVEL > LOG_LEVEL_DBG) ?
		CONFIG_LOG_MAX_LEVEL : CONFIG_SHELL_BACKEND_SERIAL_LOG_LEVEL;

	shell_init(&shell_uart, dev, true, log_backend, level);
   241d8:	2304      	movs	r3, #4
   241da:	9300      	str	r3, [sp, #0]
   241dc:	2301      	movs	r3, #1
   241de:	4601      	mov	r1, r0
   241e0:	461a      	mov	r2, r3
   241e2:	4804      	ldr	r0, [pc, #16]	; (241f4 <enable_shell_uart+0x24>)
   241e4:	f7ff f9cc 	bl	23580 <shell_init>

	return 0;
}
   241e8:	2000      	movs	r0, #0
   241ea:	b003      	add	sp, #12
   241ec:	f85d fb04 	ldr.w	pc, [sp], #4
   241f0:	00048aa1 	.word	0x00048aa1
   241f4:	00046430 	.word	0x00046430

000241f8 <uart_callback>:
{
   241f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	struct device *dev = sh_uart->ctrl_blk->dev;
   241fc:	6803      	ldr	r3, [r0, #0]
{
   241fe:	b085      	sub	sp, #20
   24200:	4605      	mov	r5, r0
	struct device *dev = sh_uart->ctrl_blk->dev;
   24202:	681e      	ldr	r6, [r3, #0]
	if (api->irq_update) {
   24204:	6873      	ldr	r3, [r6, #4]
   24206:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   24208:	b10b      	cbz	r3, 2420e <uart_callback+0x16>
		return api->irq_update(dev);
   2420a:	4630      	mov	r0, r6
   2420c:	4798      	blx	r3
	if (api->irq_rx_ready) {
   2420e:	6873      	ldr	r3, [r6, #4]
   24210:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   24212:	2b00      	cmp	r3, #0
   24214:	d03a      	beq.n	2428c <uart_callback+0x94>
		return api->irq_rx_ready(dev);
   24216:	4630      	mov	r0, r6
   24218:	4798      	blx	r3
	if (uart_irq_rx_ready(dev)) {
   2421a:	2800      	cmp	r0, #0
   2421c:	d036      	beq.n	2428c <uart_callback+0x94>
	bool new_data = false;
   2421e:	2700      	movs	r7, #0
   24220:	4b46      	ldr	r3, [pc, #280]	; (2433c <uart_callback+0x144>)
			LOG_WRN("RX ring buffer full.");
   24222:	4a47      	ldr	r2, [pc, #284]	; (24340 <uart_callback+0x148>)
   24224:	f8df b12c 	ldr.w	fp, [pc, #300]	; 24354 <uart_callback+0x15c>
   24228:	1a9b      	subs	r3, r3, r2
   2422a:	f3c3 03c9 	ubfx	r3, r3, #3, #10
			__ASSERT_NO_MSG(err == 0);
   2422e:	f8df a11c 	ldr.w	sl, [pc, #284]	; 2434c <uart_callback+0x154>
			LOG_WRN("RX ring buffer full.");
   24232:	9301      	str	r3, [sp, #4]
		len = ring_buf_put_claim(sh_uart->rx_ringbuf, &data,
   24234:	68e8      	ldr	r0, [r5, #12]
   24236:	a903      	add	r1, sp, #12
   24238:	6902      	ldr	r2, [r0, #16]
   2423a:	f01c fa41 	bl	406c0 <ring_buf_put_claim>
		if (len > 0) {
   2423e:	4680      	mov	r8, r0
   24240:	2800      	cmp	r0, #0
   24242:	d054      	beq.n	242ee <uart_callback+0xf6>
			rd_len = uart_fifo_read(sh_uart->ctrl_blk->dev,
   24244:	682b      	ldr	r3, [r5, #0]
   24246:	6818      	ldr	r0, [r3, #0]
	if (api->fifo_read) {
   24248:	6843      	ldr	r3, [r0, #4]
   2424a:	699c      	ldr	r4, [r3, #24]
   2424c:	2c00      	cmp	r4, #0
   2424e:	d04c      	beq.n	242ea <uart_callback+0xf2>
		return api->fifo_read(dev, rx_data, size);
   24250:	4642      	mov	r2, r8
   24252:	9903      	ldr	r1, [sp, #12]
   24254:	47a0      	blx	r4
				new_data = true;
   24256:	1e04      	subs	r4, r0, #0
			int err = ring_buf_put_finish(sh_uart->rx_ringbuf,
   24258:	4621      	mov	r1, r4
   2425a:	68e8      	ldr	r0, [r5, #12]
				new_data = true;
   2425c:	bf18      	it	ne
   2425e:	2701      	movne	r7, #1
			int err = ring_buf_put_finish(sh_uart->rx_ringbuf,
   24260:	f01c fa49 	bl	406f6 <ring_buf_put_finish>
			__ASSERT_NO_MSG(err == 0);
   24264:	b148      	cbz	r0, 2427a <uart_callback+0x82>
   24266:	4937      	ldr	r1, [pc, #220]	; (24344 <uart_callback+0x14c>)
   24268:	4837      	ldr	r0, [pc, #220]	; (24348 <uart_callback+0x150>)
   2426a:	2348      	movs	r3, #72	; 0x48
   2426c:	4652      	mov	r2, sl
   2426e:	f01c f9c8 	bl	40602 <printk>
   24272:	2148      	movs	r1, #72	; 0x48
   24274:	4650      	mov	r0, sl
   24276:	f01c fa87 	bl	40788 <assert_post_action>
	} while (rd_len && (rd_len == len));
   2427a:	b10c      	cbz	r4, 24280 <uart_callback+0x88>
   2427c:	45a0      	cmp	r8, r4
   2427e:	d0d9      	beq.n	24234 <uart_callback+0x3c>
	if (new_data) {
   24280:	b127      	cbz	r7, 2428c <uart_callback+0x94>
		sh_uart->ctrl_blk->handler(SHELL_TRANSPORT_EVT_RX_RDY,
   24282:	682b      	ldr	r3, [r5, #0]
   24284:	2000      	movs	r0, #0
   24286:	e9d3 2101 	ldrd	r2, r1, [r3, #4]
   2428a:	4790      	blx	r2
	if (api->irq_tx_ready) {
   2428c:	6873      	ldr	r3, [r6, #4]
   2428e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   24290:	b343      	cbz	r3, 242e4 <uart_callback+0xec>
		return api->irq_tx_ready(dev);
   24292:	4630      	mov	r0, r6
   24294:	4798      	blx	r3
	if (uart_irq_tx_ready(dev)) {
   24296:	b328      	cbz	r0, 242e4 <uart_callback+0xec>
	len = ring_buf_get_claim(sh_uart->tx_ringbuf, (u8_t **)&data,
   24298:	68a8      	ldr	r0, [r5, #8]
	struct device *dev = sh_uart->ctrl_blk->dev;
   2429a:	682b      	ldr	r3, [r5, #0]
	len = ring_buf_get_claim(sh_uart->tx_ringbuf, (u8_t **)&data,
   2429c:	6902      	ldr	r2, [r0, #16]
   2429e:	a903      	add	r1, sp, #12
	struct device *dev = sh_uart->ctrl_blk->dev;
   242a0:	681e      	ldr	r6, [r3, #0]
	len = ring_buf_get_claim(sh_uart->tx_ringbuf, (u8_t **)&data,
   242a2:	f01c fa3b 	bl	4071c <ring_buf_get_claim>
	if (len) {
   242a6:	4604      	mov	r4, r0
   242a8:	2800      	cmp	r0, #0
   242aa:	d041      	beq.n	24330 <uart_callback+0x138>
	if (api->fifo_fill) {
   242ac:	6873      	ldr	r3, [r6, #4]
   242ae:	695b      	ldr	r3, [r3, #20]
   242b0:	2b00      	cmp	r3, #0
   242b2:	d03b      	beq.n	2432c <uart_callback+0x134>
		return api->fifo_fill(dev, tx_data, size);
   242b4:	4602      	mov	r2, r0
   242b6:	9903      	ldr	r1, [sp, #12]
   242b8:	4630      	mov	r0, r6
   242ba:	4798      	blx	r3
   242bc:	4601      	mov	r1, r0
		err = ring_buf_get_finish(sh_uart->tx_ringbuf, len);
   242be:	68a8      	ldr	r0, [r5, #8]
   242c0:	f01c fa4d 	bl	4075e <ring_buf_get_finish>
		__ASSERT_NO_MSG(err == 0);
   242c4:	b148      	cbz	r0, 242da <uart_callback+0xe2>
   242c6:	491f      	ldr	r1, [pc, #124]	; (24344 <uart_callback+0x14c>)
   242c8:	481f      	ldr	r0, [pc, #124]	; (24348 <uart_callback+0x150>)
   242ca:	236c      	movs	r3, #108	; 0x6c
   242cc:	4a1f      	ldr	r2, [pc, #124]	; (2434c <uart_callback+0x154>)
   242ce:	f01c f998 	bl	40602 <printk>
   242d2:	216c      	movs	r1, #108	; 0x6c
   242d4:	481d      	ldr	r0, [pc, #116]	; (2434c <uart_callback+0x154>)
   242d6:	f01c fa57 	bl	40788 <assert_post_action>
	sh_uart->ctrl_blk->handler(SHELL_TRANSPORT_EVT_TX_RDY,
   242da:	682b      	ldr	r3, [r5, #0]
   242dc:	2001      	movs	r0, #1
   242de:	e9d3 2101 	ldrd	r2, r1, [r3, #4]
   242e2:	4790      	blx	r2
}
   242e4:	b005      	add	sp, #20
   242e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	return 0;
   242ea:	4620      	mov	r0, r4
   242ec:	e7b3      	b.n	24256 <uart_callback+0x5e>
			LOG_WRN("RX ring buffer full.");
   242ee:	f8db 3000 	ldr.w	r3, [fp]
   242f2:	f013 0f06 	tst.w	r3, #6
   242f6:	d00c      	beq.n	24312 <uart_callback+0x11a>
   242f8:	f029 033f 	bic.w	r3, r9, #63	; 0x3f
   242fc:	f043 0302 	orr.w	r3, r3, #2
   24300:	f363 0907 	bfi	r9, r3, #0, #8
   24304:	9b01      	ldr	r3, [sp, #4]
   24306:	4812      	ldr	r0, [pc, #72]	; (24350 <uart_callback+0x158>)
   24308:	f363 198f 	bfi	r9, r3, #6, #10
   2430c:	4649      	mov	r1, r9
   2430e:	f01c fb98 	bl	40a42 <log_0>
			rd_len = uart_fifo_read(sh_uart->ctrl_blk->dev,
   24312:	682b      	ldr	r3, [r5, #0]
   24314:	6818      	ldr	r0, [r3, #0]
	if (api->fifo_read) {
   24316:	6843      	ldr	r3, [r0, #4]
   24318:	699c      	ldr	r4, [r3, #24]
   2431a:	b12c      	cbz	r4, 24328 <uart_callback+0x130>
		return api->fifo_read(dev, rx_data, size);
   2431c:	2201      	movs	r2, #1
   2431e:	f10d 010b 	add.w	r1, sp, #11
   24322:	47a0      	blx	r4
   24324:	4604      	mov	r4, r0
   24326:	e7a8      	b.n	2427a <uart_callback+0x82>
	return 0;
   24328:	4620      	mov	r0, r4
   2432a:	e7fb      	b.n	24324 <uart_callback+0x12c>
	return 0;
   2432c:	4619      	mov	r1, r3
   2432e:	e7c6      	b.n	242be <uart_callback+0xc6>
		arch_syscall_invoke1(*(uintptr_t *)&dev, K_SYSCALL_UART_IRQ_TX_DISABLE);
		return;
	}
#endif
	compiler_barrier();
	z_impl_uart_irq_tx_disable(dev);
   24330:	4630      	mov	r0, r6
   24332:	f01d f8ae 	bl	41492 <z_impl_uart_irq_tx_disable>
		sh_uart->ctrl_blk->tx_busy = 0;
   24336:	682b      	ldr	r3, [r5, #0]
   24338:	60dc      	str	r4, [r3, #12]
   2433a:	e7ce      	b.n	242da <uart_callback+0xe2>
   2433c:	000460a0 	.word	0x000460a0
   24340:	00045f08 	.word	0x00045f08
   24344:	0004822c 	.word	0x0004822c
   24348:	0004764f 	.word	0x0004764f
   2434c:	00048ad5 	.word	0x00048ad5
   24350:	00048b02 	.word	0x00048b02
   24354:	20032b50 	.word	0x20032b50

00024358 <formatted_text_print.constprop.2>:
 *   shell		Pointer to shell instance.
 *   p_str		Pointer to string to be printed.
 *   terminal_offset	Requested left margin.
 *   offset_first_line	Add margin to the first printed line.
 */
static void formatted_text_print(const struct shell *shell, const char *str,
   24358:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2435c:	4605      	mov	r5, r0
   2435e:	4690      	mov	r8, r2
				 size_t terminal_offset, bool offset_first_line)
{
	size_t offset = 0;
	size_t length;

	if (str == NULL) {
   24360:	460f      	mov	r7, r1
   24362:	2900      	cmp	r1, #0
   24364:	d06b      	beq.n	2443e <formatted_text_print.constprop.2+0xe6>
		shell_op_cursor_horiz_move(shell, terminal_offset);
	}


	/* Skipping whitespace. */
	while (isspace((int) *(str + offset))) {
   24366:	4b37      	ldr	r3, [pc, #220]	; (24444 <formatted_text_print.constprop.2+0xec>)
	if (str == NULL) {
   24368:	2400      	movs	r4, #0
   2436a:	469a      	mov	sl, r3
	while (isspace((int) *(str + offset))) {
   2436c:	5d3a      	ldrb	r2, [r7, r4]
   2436e:	5cd2      	ldrb	r2, [r2, r3]
   24370:	0712      	lsls	r2, r2, #28
   24372:	d420      	bmi.n	243b6 <formatted_text_print.constprop.2+0x5e>
	shell_raw_fprintf(shell->fprintf_ctx, "\n");
   24374:	f8df b0d0 	ldr.w	fp, [pc, #208]	; 24448 <formatted_text_print.constprop.2+0xf0>
	return str == NULL ? 0U : (u16_t)strlen(str);
   24378:	4638      	mov	r0, r7
   2437a:	f7f8 fecd 	bl	1d118 <strlen>
		size_t idx = 0;

		length = shell_strlen(str) - offset;

		if (length <=
		    shell->ctx->vt100_ctx.cons.terminal_wid - terminal_offset) {
   2437e:	68ab      	ldr	r3, [r5, #8]
		length = shell_strlen(str) - offset;
   24380:	b280      	uxth	r0, r0
		    shell->ctx->vt100_ctx.cons.terminal_wid - terminal_offset) {
   24382:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
		length = shell_strlen(str) - offset;
   24384:	1b00      	subs	r0, r0, r4
		    shell->ctx->vt100_ctx.cons.terminal_wid - terminal_offset) {
   24386:	eba2 0308 	sub.w	r3, r2, r8
		if (length <=
   2438a:	4298      	cmp	r0, r3
   2438c:	eb07 0904 	add.w	r9, r7, r4
   24390:	d913      	bls.n	243ba <formatted_text_print.constprop.2+0x62>
   24392:	4649      	mov	r1, r9
		size_t idx = 0;
   24394:	2600      	movs	r6, #0
		length = shell->ctx->vt100_ctx.cons.terminal_wid
				- terminal_offset;

		while (true) {
			/* Determining line break. */
			if (isspace((int) (*(str + offset + idx)))) {
   24396:	f811 0b01 	ldrb.w	r0, [r1], #1
   2439a:	f81a c000 	ldrb.w	ip, [sl, r0]
   2439e:	f01c 0f08 	tst.w	ip, #8
   243a2:	d002      	beq.n	243aa <formatted_text_print.constprop.2+0x52>
				length = idx;
				if (*(str + offset + idx) == '\n') {
   243a4:	280a      	cmp	r0, #10
   243a6:	d031      	beq.n	2440c <formatted_text_print.constprop.2+0xb4>
   243a8:	4633      	mov	r3, r6
					break;
				}
			}

			if ((idx + terminal_offset) >=
   243aa:	eb08 0006 	add.w	r0, r8, r6
   243ae:	4282      	cmp	r2, r0
   243b0:	d92b      	bls.n	2440a <formatted_text_print.constprop.2+0xb2>
			    shell->ctx->vt100_ctx.cons.terminal_wid) {
				/* End of line reached. */
				break;
			}

			++idx;
   243b2:	3601      	adds	r6, #1
   243b4:	e7ef      	b.n	24396 <formatted_text_print.constprop.2+0x3e>
		++offset;
   243b6:	3401      	adds	r4, #1
   243b8:	e7d8      	b.n	2436c <formatted_text_print.constprop.2+0x14>
   243ba:	464b      	mov	r3, r9
			for (idx = 0; idx < length; idx++) {
   243bc:	2600      	movs	r6, #0
   243be:	42b0      	cmp	r0, r6
   243c0:	d017      	beq.n	243f2 <formatted_text_print.constprop.2+0x9a>
				if (*(str + offset + idx) == '\n') {
   243c2:	f813 2b01 	ldrb.w	r2, [r3], #1
   243c6:	eb04 0a06 	add.w	sl, r4, r6
   243ca:	2a0a      	cmp	r2, #10
   243cc:	d11b      	bne.n	24406 <formatted_text_print.constprop.2+0xae>
	shell_fprintf_buffer_flush(shell->fprintf_ctx);
   243ce:	6968      	ldr	r0, [r5, #20]
   243d0:	f01c fe6f 	bl	410b2 <shell_fprintf_buffer_flush>
					shell_write(shell, str + offset, idx);
   243d4:	4632      	mov	r2, r6
   243d6:	4649      	mov	r1, r9
   243d8:	4628      	mov	r0, r5
   243da:	f7ff fcf5 	bl	23dc8 <shell_write>
   243de:	491a      	ldr	r1, [pc, #104]	; (24448 <formatted_text_print.constprop.2+0xf0>)
   243e0:	6968      	ldr	r0, [r5, #20]
   243e2:	f01d f8a2 	bl	4152a <shell_raw_fprintf>
					shell_op_cursor_horiz_move(shell,
   243e6:	4641      	mov	r1, r8
   243e8:	4628      	mov	r0, r5
					offset += idx + 1;
   243ea:	f10a 0401 	add.w	r4, sl, #1
					shell_op_cursor_horiz_move(shell,
   243ee:	f7ff fc5d 	bl	23cac <shell_op_cursor_horiz_move>
			shell_raw_fprintf(shell->fprintf_ctx, str + offset);
   243f2:	1939      	adds	r1, r7, r4
   243f4:	6968      	ldr	r0, [r5, #20]
   243f6:	f01d f898 	bl	4152a <shell_raw_fprintf>
   243fa:	6968      	ldr	r0, [r5, #20]
   243fc:	4912      	ldr	r1, [pc, #72]	; (24448 <formatted_text_print.constprop.2+0xf0>)
		cursor_next_line_move(shell);
		shell_op_cursor_horiz_move(shell, terminal_offset);

	}
	cursor_next_line_move(shell);
}
   243fe:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   24402:	f01d b892 	b.w	4152a <shell_raw_fprintf>
			for (idx = 0; idx < length; idx++) {
   24406:	3601      	adds	r6, #1
   24408:	e7d9      	b.n	243be <formatted_text_print.constprop.2+0x66>
			if ((idx + terminal_offset) >=
   2440a:	461e      	mov	r6, r3
   2440c:	6968      	ldr	r0, [r5, #20]
   2440e:	f01c fe50 	bl	410b2 <shell_fprintf_buffer_flush>
		shell_write(shell, str + offset, length);
   24412:	4632      	mov	r2, r6
   24414:	4649      	mov	r1, r9
   24416:	4628      	mov	r0, r5
   24418:	f7ff fcd6 	bl	23dc8 <shell_write>
		offset += length;
   2441c:	4434      	add	r4, r6
		while (isspace((int) (*(str + offset)))) {
   2441e:	5d3b      	ldrb	r3, [r7, r4]
   24420:	f81a 3003 	ldrb.w	r3, [sl, r3]
   24424:	071b      	lsls	r3, r3, #28
   24426:	d408      	bmi.n	2443a <formatted_text_print.constprop.2+0xe2>
   24428:	4659      	mov	r1, fp
   2442a:	6968      	ldr	r0, [r5, #20]
   2442c:	f01d f87d 	bl	4152a <shell_raw_fprintf>
		shell_op_cursor_horiz_move(shell, terminal_offset);
   24430:	4641      	mov	r1, r8
   24432:	4628      	mov	r0, r5
   24434:	f7ff fc3a 	bl	23cac <shell_op_cursor_horiz_move>
   24438:	e79e      	b.n	24378 <formatted_text_print.constprop.2+0x20>
			++offset;
   2443a:	3401      	adds	r4, #1
   2443c:	e7ef      	b.n	2441e <formatted_text_print.constprop.2+0xc6>
}
   2443e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   24442:	bf00      	nop
   24444:	0004d857 	.word	0x0004d857
   24448:	0004a298 	.word	0x0004a298

0002444c <shell_help_subcmd_print>:
/* Function is printing command help, its subcommands name and subcommands
 * help string.
 */
void shell_help_subcmd_print(const struct shell *shell)
{
	const struct shell_static_entry *entry = NULL;
   2444c:	2300      	movs	r3, #0
{
   2444e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	struct shell_static_entry static_entry;
	u16_t longest_syntax = 0U;
	size_t cmd_idx = 0;

	/* Checking if there are any subcommands available. */
	if (!shell->ctx->active_cmd.subcmd) {
   24452:	6882      	ldr	r2, [r0, #8]
{
   24454:	b08f      	sub	sp, #60	; 0x3c
	if (!shell->ctx->active_cmd.subcmd) {
   24456:	6912      	ldr	r2, [r2, #16]
{
   24458:	4604      	mov	r4, r0
	const struct shell_static_entry *entry = NULL;
   2445a:	9308      	str	r3, [sp, #32]
	if (!shell->ctx->active_cmd.subcmd) {
   2445c:	2a00      	cmp	r2, #0
   2445e:	d063      	beq.n	24528 <shell_help_subcmd_print+0xdc>
	size_t cmd_idx = 0;
   24460:	4698      	mov	r8, r3
	u16_t longest_syntax = 0U;
   24462:	461d      	mov	r5, r3
		return;
	}

	/* Searching for the longest subcommand to print. */
	do {
		shell_cmd_get(shell, shell->ctx->active_cmd.subcmd,
   24464:	ae09      	add	r6, sp, #36	; 0x24
   24466:	af08      	add	r7, sp, #32
   24468:	e9cd 7600 	strd	r7, r6, [sp]
   2446c:	68a1      	ldr	r1, [r4, #8]
   2446e:	4643      	mov	r3, r8
   24470:	2201      	movs	r2, #1
   24472:	6909      	ldr	r1, [r1, #16]
   24474:	4620      	mov	r0, r4
   24476:	f7ff fb49 	bl	23b0c <shell_cmd_get>
			      !SHELL_CMD_ROOT_LVL,
			      cmd_idx++, &entry, &static_entry);

		if (!entry) {
   2447a:	9b08      	ldr	r3, [sp, #32]
		shell_cmd_get(shell, shell->ctx->active_cmd.subcmd,
   2447c:	f108 0901 	add.w	r9, r8, #1
		if (!entry) {
   24480:	2b00      	cmp	r3, #0
   24482:	d04e      	beq.n	24522 <shell_help_subcmd_print+0xd6>
			break;
		}

		u16_t len = shell_strlen(entry->syntax);
   24484:	6818      	ldr	r0, [r3, #0]
	return str == NULL ? 0U : (u16_t)strlen(str);
   24486:	b110      	cbz	r0, 2448e <shell_help_subcmd_print+0x42>
   24488:	f7f8 fe46 	bl	1d118 <strlen>
   2448c:	b280      	uxth	r0, r0

		longest_syntax = longest_syntax > len ? longest_syntax : len;
   2448e:	4285      	cmp	r5, r0
   24490:	bf38      	it	cc
   24492:	4605      	movcc	r5, r0
	} while (cmd_idx != 0); /* too many commands */
   24494:	f1b8 3fff 	cmp.w	r8, #4294967295
   24498:	d141      	bne.n	2451e <shell_help_subcmd_print+0xd2>

	if (cmd_idx == 1) {
		return;
	}

	shell_internal_fprintf(shell, SHELL_NORMAL, "Subcommands:\n");
   2449a:	4a2e      	ldr	r2, [pc, #184]	; (24554 <shell_help_subcmd_print+0x108>)
   2449c:	2100      	movs	r1, #0
   2449e:	4620      	mov	r0, r4
   244a0:	f7ff fd4c 	bl	23f3c <shell_internal_fprintf>

	/* Printing subcommands and help string (if exists). */
	cmd_idx = 0;
   244a4:	2300      	movs	r3, #0
	const u16_t offset = 2 * strlen(tabulator) + item_name_width + 1;
   244a6:	f8df 80bc 	ldr.w	r8, [pc, #188]	; 24564 <shell_help_subcmd_print+0x118>

	while (true) {
		shell_cmd_get(shell, shell->ctx->active_cmd.subcmd,
   244aa:	e9cd 7600 	strd	r7, r6, [sp]
   244ae:	68a1      	ldr	r1, [r4, #8]
   244b0:	1c5a      	adds	r2, r3, #1
   244b2:	9203      	str	r2, [sp, #12]
   244b4:	6909      	ldr	r1, [r1, #16]
   244b6:	2201      	movs	r2, #1
   244b8:	4620      	mov	r0, r4
   244ba:	f7ff fb27 	bl	23b0c <shell_cmd_get>
			      !SHELL_CMD_ROOT_LVL,
			      cmd_idx++, &entry, &static_entry);

		if (entry == NULL) {
   244be:	9a08      	ldr	r2, [sp, #32]
   244c0:	b392      	cbz	r2, 24528 <shell_help_subcmd_print+0xdc>
			break;
		}

		help_item_print(shell, entry->syntax, longest_syntax,
   244c2:	e9d2 9a00 	ldrd	r9, sl, [r2]
	const u16_t offset = 2 * strlen(tabulator) + item_name_width + 1;
   244c6:	4640      	mov	r0, r8
   244c8:	f7f8 fe26 	bl	1d118 <strlen>
   244cc:	4683      	mov	fp, r0
	if (item_name == NULL) {
   244ce:	f1b9 0f00 	cmp.w	r9, #0
   244d2:	d022      	beq.n	2451a <shell_help_subcmd_print+0xce>
		u16_t tmp = item_name_width - strlen(item_name);
   244d4:	4648      	mov	r0, r9
   244d6:	f7f8 fe1f 	bl	1d118 <strlen>
		char space = ' ';
   244da:	2220      	movs	r2, #32
		u16_t tmp = item_name_width - strlen(item_name);
   244dc:	1a28      	subs	r0, r5, r0
   244de:	b283      	uxth	r3, r0
   244e0:	9304      	str	r3, [sp, #16]
		char space = ' ';
   244e2:	f88d 201f 	strb.w	r2, [sp, #31]
		shell_internal_fprintf(shell, SHELL_NORMAL, "%s%s", tabulator,
   244e6:	4643      	mov	r3, r8
   244e8:	f8cd 9000 	str.w	r9, [sp]
   244ec:	4a1a      	ldr	r2, [pc, #104]	; (24558 <shell_help_subcmd_print+0x10c>)
   244ee:	2100      	movs	r1, #0
   244f0:	4620      	mov	r0, r4
   244f2:	f7ff fd23 	bl	23f3c <shell_internal_fprintf>
   244f6:	2300      	movs	r3, #0
		for (u16_t i = 0; i < tmp; i++) {
   244f8:	9904      	ldr	r1, [sp, #16]
   244fa:	b29a      	uxth	r2, r3
   244fc:	428a      	cmp	r2, r1
   244fe:	d316      	bcc.n	2452e <shell_help_subcmd_print+0xe2>
		shell_internal_fprintf(shell, SHELL_NORMAL, "%s:", tabulator);
   24500:	4643      	mov	r3, r8
   24502:	4a16      	ldr	r2, [pc, #88]	; (2455c <shell_help_subcmd_print+0x110>)
   24504:	2100      	movs	r1, #0
   24506:	4620      	mov	r0, r4
   24508:	f7ff fd18 	bl	23f3c <shell_internal_fprintf>
	if (item_help == NULL) {
   2450c:	f1ba 0f00 	cmp.w	sl, #0
   24510:	d117      	bne.n	24542 <shell_help_subcmd_print+0xf6>
   24512:	4913      	ldr	r1, [pc, #76]	; (24560 <shell_help_subcmd_print+0x114>)
   24514:	6960      	ldr	r0, [r4, #20]
   24516:	f01d f808 	bl	4152a <shell_raw_fprintf>
   2451a:	9b03      	ldr	r3, [sp, #12]
   2451c:	e7c5      	b.n	244aa <shell_help_subcmd_print+0x5e>
		shell_cmd_get(shell, shell->ctx->active_cmd.subcmd,
   2451e:	46c8      	mov	r8, r9
   24520:	e7a2      	b.n	24468 <shell_help_subcmd_print+0x1c>
	if (cmd_idx == 1) {
   24522:	f1b9 0f01 	cmp.w	r9, #1
   24526:	d1b8      	bne.n	2449a <shell_help_subcmd_print+0x4e>
				entry->help);
	}
}
   24528:	b00f      	add	sp, #60	; 0x3c
   2452a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			shell_write(shell, &space, 1);
   2452e:	2201      	movs	r2, #1
   24530:	f10d 011f 	add.w	r1, sp, #31
   24534:	4620      	mov	r0, r4
   24536:	9305      	str	r3, [sp, #20]
   24538:	f7ff fc46 	bl	23dc8 <shell_write>
   2453c:	9b05      	ldr	r3, [sp, #20]
   2453e:	3301      	adds	r3, #1
   24540:	e7da      	b.n	244f8 <shell_help_subcmd_print+0xac>
	const u16_t offset = 2 * strlen(tabulator) + item_name_width + 1;
   24542:	1c6a      	adds	r2, r5, #1
   24544:	eb02 024b 	add.w	r2, r2, fp, lsl #1
	formatted_text_print(shell, item_help, offset, false);
   24548:	b292      	uxth	r2, r2
   2454a:	4651      	mov	r1, sl
   2454c:	4620      	mov	r0, r4
   2454e:	f7ff ff03 	bl	24358 <formatted_text_print.constprop.2>
   24552:	e7e2      	b.n	2451a <shell_help_subcmd_print+0xce>
   24554:	00048b1b 	.word	0x00048b1b
   24558:	000489df 	.word	0x000489df
   2455c:	00048b29 	.word	0x00048b29
   24560:	0004a298 	.word	0x0004a298
   24564:	00048b2d 	.word	0x00048b2d

00024568 <shell_help_cmd_print>:

void shell_help_cmd_print(const struct shell *shell)
{
	static const char cmd_sep[] = " - ";	/* commands separator */

	u16_t field_width = shell_strlen(shell->ctx->active_cmd.syntax) +
   24568:	6883      	ldr	r3, [r0, #8]
{
   2456a:	b573      	push	{r0, r1, r4, r5, r6, lr}
   2456c:	4605      	mov	r5, r0
	u16_t field_width = shell_strlen(shell->ctx->active_cmd.syntax) +
   2456e:	6898      	ldr	r0, [r3, #8]
   24570:	b1c8      	cbz	r0, 245a6 <shell_help_cmd_print+0x3e>
   24572:	f7f8 fdd1 	bl	1d118 <strlen>
   24576:	b284      	uxth	r4, r0
   24578:	4e0c      	ldr	r6, [pc, #48]	; (245ac <shell_help_cmd_print+0x44>)
   2457a:	4630      	mov	r0, r6
   2457c:	f7f8 fdcc 	bl	1d118 <strlen>
							  shell_strlen(cmd_sep);

	shell_internal_fprintf(shell, SHELL_NORMAL, "%s%s",
   24580:	68ab      	ldr	r3, [r5, #8]
   24582:	9600      	str	r6, [sp, #0]
	u16_t field_width = shell_strlen(shell->ctx->active_cmd.syntax) +
   24584:	4404      	add	r4, r0
   24586:	b2a4      	uxth	r4, r4
	shell_internal_fprintf(shell, SHELL_NORMAL, "%s%s",
   24588:	4628      	mov	r0, r5
   2458a:	689b      	ldr	r3, [r3, #8]
   2458c:	4a08      	ldr	r2, [pc, #32]	; (245b0 <shell_help_cmd_print+0x48>)
   2458e:	2100      	movs	r1, #0
   24590:	f7ff fcd4 	bl	23f3c <shell_internal_fprintf>
			       shell->ctx->active_cmd.syntax, cmd_sep);

	formatted_text_print(shell, shell->ctx->active_cmd.help,
   24594:	4622      	mov	r2, r4
   24596:	4628      	mov	r0, r5
   24598:	68ab      	ldr	r3, [r5, #8]
   2459a:	68d9      	ldr	r1, [r3, #12]
			     field_width, false);
}
   2459c:	b002      	add	sp, #8
   2459e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	formatted_text_print(shell, shell->ctx->active_cmd.help,
   245a2:	f7ff bed9 	b.w	24358 <formatted_text_print.constprop.2>
   245a6:	4604      	mov	r4, r0
   245a8:	e7e6      	b.n	24578 <shell_help_cmd_print+0x10>
   245aa:	bf00      	nop
   245ac:	00048b17 	.word	0x00048b17
   245b0:	000489df 	.word	0x000489df

000245b4 <cmd_clear>:
	cursor_restore(shell);
	return ret_val;
}

static int cmd_clear(const struct shell *shell, size_t argc, char **argv)
{
   245b4:	b538      	push	{r3, r4, r5, lr}
   245b6:	4604      	mov	r4, r0
	ARG_UNUSED(argv);

	SHELL_VT100_CMD(shell, SHELL_VT100_CURSORHOME);
   245b8:	4d06      	ldr	r5, [pc, #24]	; (245d4 <cmd_clear+0x20>)
   245ba:	4a07      	ldr	r2, [pc, #28]	; (245d8 <cmd_clear+0x24>)
   245bc:	4629      	mov	r1, r5
   245be:	6940      	ldr	r0, [r0, #20]
   245c0:	f01c fffa 	bl	415b8 <shell_raw_fprintf>
	SHELL_VT100_CMD(shell, SHELL_VT100_CLEARSCREEN);
   245c4:	6960      	ldr	r0, [r4, #20]
   245c6:	4a05      	ldr	r2, [pc, #20]	; (245dc <cmd_clear+0x28>)
   245c8:	4629      	mov	r1, r5
   245ca:	f01c fff5 	bl	415b8 <shell_raw_fprintf>

	return 0;
}
   245ce:	2000      	movs	r0, #0
   245d0:	bd38      	pop	{r3, r4, r5, pc}
   245d2:	bf00      	nop
   245d4:	00047a4a 	.word	0x00047a4a
   245d8:	00048b36 	.word	0x00048b36
   245dc:	00048b3a 	.word	0x00048b3a

000245e0 <cmd_resize_default>:
	return 0;
}

static int cmd_resize_default(const struct shell *shell,
			      size_t argc, char **argv)
{
   245e0:	b510      	push	{r4, lr}
   245e2:	4604      	mov	r4, r0
	ARG_UNUSED(argc);
	ARG_UNUSED(argv);

	SHELL_VT100_CMD(shell, SHELL_VT100_SETCOL_80);
   245e4:	4a04      	ldr	r2, [pc, #16]	; (245f8 <cmd_resize_default+0x18>)
   245e6:	4905      	ldr	r1, [pc, #20]	; (245fc <cmd_resize_default+0x1c>)
   245e8:	6940      	ldr	r0, [r0, #20]
   245ea:	f01c ffe5 	bl	415b8 <shell_raw_fprintf>
	shell->ctx->vt100_ctx.cons.terminal_wid =  SHELL_DEFAULT_TERMINAL_WIDTH;
	shell->ctx->vt100_ctx.cons.terminal_hei = SHELL_DEFAULT_TERMINAL_HEIGHT;
   245ee:	68a3      	ldr	r3, [r4, #8]
   245f0:	4a03      	ldr	r2, [pc, #12]	; (24600 <cmd_resize_default+0x20>)

	return 0;
}
   245f2:	2000      	movs	r0, #0
	shell->ctx->vt100_ctx.cons.terminal_hei = SHELL_DEFAULT_TERMINAL_HEIGHT;
   245f4:	629a      	str	r2, [r3, #40]	; 0x28
}
   245f6:	bd10      	pop	{r4, pc}
   245f8:	00048b3f 	.word	0x00048b3f
   245fc:	00047a4a 	.word	0x00047a4a
   24600:	00500018 	.word	0x00500018

00024604 <cmd_shell_stats_show>:
{
   24604:	b508      	push	{r3, lr}
	shell_print(shell, "Lost logs: %u", shell->stats->log_lost_cnt);
   24606:	6983      	ldr	r3, [r0, #24]
   24608:	4a03      	ldr	r2, [pc, #12]	; (24618 <cmd_shell_stats_show+0x14>)
   2460a:	681b      	ldr	r3, [r3, #0]
   2460c:	2100      	movs	r1, #0
   2460e:	f7ff f903 	bl	23818 <shell_fprintf>
}
   24612:	2000      	movs	r0, #0
   24614:	bd08      	pop	{r3, pc}
   24616:	bf00      	nop
   24618:	00048d78 	.word	0x00048d78

0002461c <cmd_help>:
{
   2461c:	b510      	push	{r4, lr}
   2461e:	4604      	mov	r4, r0
	shell_print(shell,
   24620:	4a05      	ldr	r2, [pc, #20]	; (24638 <cmd_help+0x1c>)
   24622:	2100      	movs	r1, #0
   24624:	f7ff f8f8 	bl	23818 <shell_fprintf>
	shell_print(shell,
   24628:	4620      	mov	r0, r4
   2462a:	4a04      	ldr	r2, [pc, #16]	; (2463c <cmd_help+0x20>)
   2462c:	2100      	movs	r1, #0
   2462e:	f7ff f8f3 	bl	23818 <shell_fprintf>
}
   24632:	2000      	movs	r0, #0
   24634:	bd10      	pop	{r4, pc}
   24636:	bf00      	nop
   24638:	00048b7d 	.word	0x00048b7d
   2463c:	00048c6c 	.word	0x00048c6c

00024640 <cmd_history>:
{
   24640:	b5f0      	push	{r4, r5, r6, r7, lr}
   24642:	4604      	mov	r4, r0
	size_t i = 0;
   24644:	2500      	movs	r5, #0
			shell_print(shell, "[%3d] %s",
   24646:	4f0f      	ldr	r7, [pc, #60]	; (24684 <cmd_history+0x44>)
{
   24648:	b085      	sub	sp, #20
				  shell->ctx->temp_buff, &len);
   2464a:	68a2      	ldr	r2, [r4, #8]
		shell_history_get(shell->history, true,
   2464c:	f10d 030e 	add.w	r3, sp, #14
   24650:	f502 729c 	add.w	r2, r2, #312	; 0x138
   24654:	2101      	movs	r1, #1
   24656:	68e0      	ldr	r0, [r4, #12]
   24658:	f01c ffd0 	bl	415fc <shell_history_get>
		if (len) {
   2465c:	f8bd 000e 	ldrh.w	r0, [sp, #14]
   24660:	68a3      	ldr	r3, [r4, #8]
   24662:	b158      	cbz	r0, 2467c <cmd_history+0x3c>
			shell_print(shell, "[%3d] %s",
   24664:	f503 739c 	add.w	r3, r3, #312	; 0x138
   24668:	9300      	str	r3, [sp, #0]
   2466a:	1c6e      	adds	r6, r5, #1
   2466c:	462b      	mov	r3, r5
   2466e:	463a      	mov	r2, r7
   24670:	2100      	movs	r1, #0
   24672:	4620      	mov	r0, r4
   24674:	f7ff f8d0 	bl	23818 <shell_fprintf>
   24678:	4635      	mov	r5, r6
		shell_history_get(shell->history, true,
   2467a:	e7e6      	b.n	2464a <cmd_history+0xa>
	shell->ctx->temp_buff[0] = '\0';
   2467c:	f883 0138 	strb.w	r0, [r3, #312]	; 0x138
}
   24680:	b005      	add	sp, #20
   24682:	bdf0      	pop	{r4, r5, r6, r7, pc}
   24684:	00048d34 	.word	0x00048d34

00024688 <cmd_echo>:
	if (argc == 2) {
   24688:	2902      	cmp	r1, #2
{
   2468a:	b507      	push	{r0, r1, r2, lr}
	if (argc == 2) {
   2468c:	d10c      	bne.n	246a8 <cmd_echo+0x20>
		shell_error(shell, "%s:%s%s", argv[0],
   2468e:	6853      	ldr	r3, [r2, #4]
   24690:	9301      	str	r3, [sp, #4]
   24692:	4b0d      	ldr	r3, [pc, #52]	; (246c8 <cmd_echo+0x40>)
   24694:	9300      	str	r3, [sp, #0]
   24696:	6813      	ldr	r3, [r2, #0]
   24698:	4a0c      	ldr	r2, [pc, #48]	; (246cc <cmd_echo+0x44>)
   2469a:	f7ff f8bd 	bl	23818 <shell_fprintf>
   2469e:	f06f 0015 	mvn.w	r0, #21
}
   246a2:	b003      	add	sp, #12
   246a4:	f85d fb04 	ldr.w	pc, [sp], #4
	shell_print(shell, "Echo status: %s",
   246a8:	6883      	ldr	r3, [r0, #8]
   246aa:	4a09      	ldr	r2, [pc, #36]	; (246d0 <cmd_echo+0x48>)
	return shell->ctx->internal.flags.echo == 1 ? true : false;
   246ac:	f8d3 3258 	ldr.w	r3, [r3, #600]	; 0x258
   246b0:	2100      	movs	r1, #0
   246b2:	f013 0f04 	tst.w	r3, #4
   246b6:	4b07      	ldr	r3, [pc, #28]	; (246d4 <cmd_echo+0x4c>)
   246b8:	bf18      	it	ne
   246ba:	4613      	movne	r3, r2
   246bc:	4a06      	ldr	r2, [pc, #24]	; (246d8 <cmd_echo+0x50>)
   246be:	f7ff f8ab 	bl	23818 <shell_fprintf>
	return 0;
   246c2:	2000      	movs	r0, #0
   246c4:	e7ed      	b.n	246a2 <cmd_echo+0x1a>
   246c6:	bf00      	nop
   246c8:	00048b52 	.word	0x00048b52
   246cc:	00048b49 	.word	0x00048b49
   246d0:	0004d409 	.word	0x0004d409
   246d4:	00048b45 	.word	0x00048b45
   246d8:	00048b67 	.word	0x00048b67

000246dc <cmd_resize>:

static int cmd_resize(const struct shell *shell, size_t argc, char **argv)
{
   246dc:	b5f0      	push	{r4, r5, r6, r7, lr}
	int err;

	if (argc != 1) {
   246de:	2901      	cmp	r1, #1
{
   246e0:	b085      	sub	sp, #20
   246e2:	4605      	mov	r5, r0
	if (argc != 1) {
   246e4:	d00d      	beq.n	24702 <cmd_resize+0x26>
		shell_error(shell, "%s:%s%s", argv[0],
   246e6:	6853      	ldr	r3, [r2, #4]
   246e8:	2102      	movs	r1, #2
   246ea:	9301      	str	r3, [sp, #4]
   246ec:	4b52      	ldr	r3, [pc, #328]	; (24838 <cmd_resize+0x15c>)
			    SHELL_MSG_UNKNOWN_PARAMETER, argv[1]);
		return -EINVAL;
   246ee:	f06f 0415 	mvn.w	r4, #21
		shell_error(shell, "%s:%s%s", argv[0],
   246f2:	9300      	str	r3, [sp, #0]
   246f4:	6813      	ldr	r3, [r2, #0]
   246f6:	4a51      	ldr	r2, [pc, #324]	; (2483c <cmd_resize+0x160>)
   246f8:	f7ff f88e 	bl	23818 <shell_fprintf>
			   " screen size");
		return -ENOEXEC;
	}

	return 0;
}
   246fc:	4620      	mov	r0, r4
   246fe:	b005      	add	sp, #20
   24700:	bdf0      	pop	{r4, r5, r6, r7, pc}
	char c = 0;
   24702:	2400      	movs	r4, #0
	SHELL_VT100_CMD(shell, SHELL_VT100_SAVECURSOR);
   24704:	4a4e      	ldr	r2, [pc, #312]	; (24840 <cmd_resize+0x164>)
   24706:	494f      	ldr	r1, [pc, #316]	; (24844 <cmd_resize+0x168>)
   24708:	6940      	ldr	r0, [r0, #20]
   2470a:	f01c ff55 	bl	415b8 <shell_raw_fprintf>
	shell_op_cursor_vert_move(shell, -SHELL_MAX_TERMINAL_SIZE);
   2470e:	f06f 01f9 	mvn.w	r1, #249	; 0xf9
   24712:	4628      	mov	r0, r5
   24714:	f7ff faba 	bl	23c8c <shell_op_cursor_vert_move>
	shell_op_cursor_horiz_move(shell, SHELL_MAX_TERMINAL_SIZE);
   24718:	21fa      	movs	r1, #250	; 0xfa
   2471a:	4628      	mov	r0, r5
   2471c:	f7ff fac6 	bl	23cac <shell_op_cursor_horiz_move>
__ssp_bos_icheck3(memset, void *, int)
   24720:	68a8      	ldr	r0, [r5, #8]
   24722:	f44f 7280 	mov.w	r2, #256	; 0x100
   24726:	4621      	mov	r1, r4
   24728:	f500 709c 	add.w	r0, r0, #312	; 0x138
	char c = 0;
   2472c:	f88d 400b 	strb.w	r4, [sp, #11]
   24730:	f020 fbc8 	bl	44ec4 <memset>
	shell_raw_fprintf(shell->fprintf_ctx, cmd_get_terminal_size);
   24734:	4944      	ldr	r1, [pc, #272]	; (24848 <cmd_resize+0x16c>)
   24736:	6968      	ldr	r0, [r5, #20]
   24738:	f01c ff3e 	bl	415b8 <shell_raw_fprintf>
	shell_fprintf_buffer_flush(shell->fprintf_ctx);
   2473c:	6968      	ldr	r0, [r5, #20]
   2473e:	f01c fcb8 	bl	410b2 <shell_fprintf_buffer_flush>
   24742:	f44f 767a 	mov.w	r6, #1000	; 0x3e8
			(void)shell->iface->api->read(shell->iface, &c,
   24746:	6868      	ldr	r0, [r5, #4]
   24748:	2201      	movs	r2, #1
   2474a:	6803      	ldr	r3, [r0, #0]
   2474c:	f10d 010b 	add.w	r1, sp, #11
   24750:	691f      	ldr	r7, [r3, #16]
   24752:	ab03      	add	r3, sp, #12
   24754:	47b8      	blx	r7
			if (cnt == 0) {
   24756:	9b03      	ldr	r3, [sp, #12]
   24758:	b953      	cbnz	r3, 24770 <cmd_resize+0x94>
	z_impl_k_busy_wait(usec_to_wait);
   2475a:	3e01      	subs	r6, #1
   2475c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   24760:	b2b6      	uxth	r6, r6
   24762:	f020 fa31 	bl	44bc8 <z_impl_k_busy_wait>
	for (u16_t i = 0; i < 1000; i++) {
   24766:	2e00      	cmp	r6, #0
   24768:	d1ed      	bne.n	24746 <cmd_resize+0x6a>
		ret_val = -ENOTSUP;
   2476a:	f06f 0485 	mvn.w	r4, #133	; 0x85
   2476e:	e031      	b.n	247d4 <cmd_resize+0xf8>
			if ((c != SHELL_VT100_ASCII_ESC) &&
   24770:	f89d 300b 	ldrb.w	r3, [sp, #11]
   24774:	68aa      	ldr	r2, [r5, #8]
   24776:	2b1b      	cmp	r3, #27
   24778:	d053      	beq.n	24822 <cmd_resize+0x146>
   2477a:	f892 1138 	ldrb.w	r1, [r2, #312]	; 0x138
   2477e:	291b      	cmp	r1, #27
   24780:	d1e1      	bne.n	24746 <cmd_resize+0x6a>
			if (c == 'R') { /* End of response from the terminal. */
   24782:	2b52      	cmp	r3, #82	; 0x52
   24784:	d14d      	bne.n	24822 <cmd_resize+0x146>
				shell->ctx->temp_buff[buff_idx] = '\0';
   24786:	2300      	movs	r3, #0
   24788:	4414      	add	r4, r2
   2478a:	f884 3138 	strb.w	r3, [r4, #312]	; 0x138
				if (shell->ctx->temp_buff[1] != '[') {
   2478e:	f892 1139 	ldrb.w	r1, [r2, #313]	; 0x139
   24792:	295b      	cmp	r1, #91	; 0x5b
   24794:	d14d      	bne.n	24832 <cmd_resize+0x156>
	*y = 0U;
   24796:	461f      	mov	r7, r3
				buff_idx = 2U;
   24798:	2602      	movs	r6, #2
   2479a:	f502 709d 	add.w	r0, r2, #314	; 0x13a
				while (shell->ctx->temp_buff[buff_idx] != ';') {
   2479e:	f810 1b01 	ldrb.w	r1, [r0], #1
   247a2:	3601      	adds	r6, #1
   247a4:	293b      	cmp	r1, #59	; 0x3b
   247a6:	b2b6      	uxth	r6, r6
   247a8:	d126      	bne.n	247f8 <cmd_resize+0x11c>
				if (++buff_idx >= CONFIG_SHELL_CMD_BUFF_SIZE) {
   247aa:	f5b6 7f80 	cmp.w	r6, #256	; 0x100
   247ae:	d0dc      	beq.n	2476a <cmd_resize+0x8e>
	*x = 0U;
   247b0:	2300      	movs	r3, #0
   247b2:	f506 709c 	add.w	r0, r6, #312	; 0x138
   247b6:	4410      	add	r0, r2
				while (shell->ctx->temp_buff[buff_idx]
   247b8:	f810 4b01 	ldrb.w	r4, [r0], #1
   247bc:	bb34      	cbnz	r4, 2480c <cmd_resize+0x130>
		shell->ctx->vt100_ctx.cons.terminal_wid = x;
   247be:	2bfa      	cmp	r3, #250	; 0xfa
   247c0:	bf28      	it	cs
   247c2:	23fa      	movcs	r3, #250	; 0xfa
		shell->ctx->vt100_ctx.cons.terminal_hei = y;
   247c4:	2ffa      	cmp	r7, #250	; 0xfa
		shell->ctx->vt100_ctx.cons.terminal_wid = x;
   247c6:	8553      	strh	r3, [r2, #42]	; 0x2a
		shell->ctx->vt100_ctx.cons.terminal_hei = y;
   247c8:	463b      	mov	r3, r7
   247ca:	bf28      	it	cs
   247cc:	23fa      	movcs	r3, #250	; 0xfa
				shell->ctx->temp_buff[0] = 0;
   247ce:	f882 4138 	strb.w	r4, [r2, #312]	; 0x138
		shell->ctx->vt100_ctx.cons.terminal_hei = y;
   247d2:	8513      	strh	r3, [r2, #40]	; 0x28
	SHELL_VT100_CMD(shell, SHELL_VT100_RESTORECURSOR);
   247d4:	4a1d      	ldr	r2, [pc, #116]	; (2484c <cmd_resize+0x170>)
   247d6:	491b      	ldr	r1, [pc, #108]	; (24844 <cmd_resize+0x168>)
   247d8:	6968      	ldr	r0, [r5, #20]
   247da:	f01c feed 	bl	415b8 <shell_raw_fprintf>
	if (err != 0) {
   247de:	2c00      	cmp	r4, #0
   247e0:	d08c      	beq.n	246fc <cmd_resize+0x20>
		shell->ctx->vt100_ctx.cons.terminal_hei =
   247e2:	68ab      	ldr	r3, [r5, #8]
   247e4:	4a1a      	ldr	r2, [pc, #104]	; (24850 <cmd_resize+0x174>)
		shell_warn(shell, "No response from the terminal, assumed 80x24"
   247e6:	2104      	movs	r1, #4
		shell->ctx->vt100_ctx.cons.terminal_hei =
   247e8:	629a      	str	r2, [r3, #40]	; 0x28
		shell_warn(shell, "No response from the terminal, assumed 80x24"
   247ea:	4628      	mov	r0, r5
   247ec:	4a19      	ldr	r2, [pc, #100]	; (24854 <cmd_resize+0x178>)
   247ee:	f7ff f813 	bl	23818 <shell_fprintf>
   247f2:	f06f 0407 	mvn.w	r4, #7
   247f6:	e781      	b.n	246fc <cmd_resize+0x20>
					*y = *y * 10U +
   247f8:	eb07 0387 	add.w	r3, r7, r7, lsl #2
   247fc:	eb01 0343 	add.w	r3, r1, r3, lsl #1
   24800:	3b30      	subs	r3, #48	; 0x30
					if (buff_idx >=
   24802:	f5b6 7f80 	cmp.w	r6, #256	; 0x100
					*y = *y * 10U +
   24806:	b29f      	uxth	r7, r3
					if (buff_idx >=
   24808:	d1c9      	bne.n	2479e <cmd_resize+0xc2>
   2480a:	e7ae      	b.n	2476a <cmd_resize+0x8e>
					*x = *x * 10U +
   2480c:	eb03 0383 	add.w	r3, r3, r3, lsl #2
					(shell->ctx->temp_buff[buff_idx++] -
   24810:	3601      	adds	r6, #1
					*x = *x * 10U +
   24812:	eb04 0443 	add.w	r4, r4, r3, lsl #1
					(shell->ctx->temp_buff[buff_idx++] -
   24816:	b2b6      	uxth	r6, r6
					*x = *x * 10U +
   24818:	3c30      	subs	r4, #48	; 0x30
					if (buff_idx >=
   2481a:	2eff      	cmp	r6, #255	; 0xff
					*x = *x * 10U +
   2481c:	b2a3      	uxth	r3, r4
					if (buff_idx >=
   2481e:	d9cb      	bls.n	247b8 <cmd_resize+0xdc>
   24820:	e7a3      	b.n	2476a <cmd_resize+0x8e>
			shell->ctx->temp_buff[buff_idx] = c;
   24822:	1911      	adds	r1, r2, r4
			if (++buff_idx > SHELL_CURSOR_POSITION_BUFFER - 1) {
   24824:	3401      	adds	r4, #1
   24826:	b2a4      	uxth	r4, r4
   24828:	2c09      	cmp	r4, #9
			shell->ctx->temp_buff[buff_idx] = c;
   2482a:	f881 3138 	strb.w	r3, [r1, #312]	; 0x138
			if (++buff_idx > SHELL_CURSOR_POSITION_BUFFER - 1) {
   2482e:	d98a      	bls.n	24746 <cmd_resize+0x6a>
				shell->ctx->temp_buff[0] = 0;
   24830:	2300      	movs	r3, #0
   24832:	f882 3138 	strb.w	r3, [r2, #312]	; 0x138
				return -ENOMEM;
   24836:	e798      	b.n	2476a <cmd_resize+0x8e>
   24838:	00048b52 	.word	0x00048b52
   2483c:	00048b49 	.word	0x00048b49
   24840:	00048b30 	.word	0x00048b30
   24844:	00047a4a 	.word	0x00047a4a
   24848:	00048b78 	.word	0x00048b78
   2484c:	00048b33 	.word	0x00048b33
   24850:	00500018 	.word	0x00500018
   24854:	00048d3e 	.word	0x00048d3e

00024858 <shell_history_put>:
	u16_t padding = (~total_len + 1) & (sizeof(void *) - 1);

	/* align to word. */
	total_len += padding;

	if (total_len > ring_buf_capacity_get(history->ring_buf)) {
   24858:	6803      	ldr	r3, [r0, #0]
{
   2485a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	u32_t total_len = len + offsetof(struct shell_history_item, data);
   2485e:	f102 050c 	add.w	r5, r2, #12
	u16_t padding = (~total_len + 1) & (sizeof(void *) - 1);
   24862:	426e      	negs	r6, r5
 * @return Ring buffer capacity (in 32-bit words or bytes).
 */
static inline u32_t ring_buf_capacity_get(struct ring_buf *buf)
{
	/* One element is used to distinguish between empty and full state. */
	return buf->size - 1;
   24864:	691b      	ldr	r3, [r3, #16]
   24866:	f006 0603 	and.w	r6, r6, #3
	total_len += padding;
   2486a:	4435      	add	r5, r6
   2486c:	3b01      	subs	r3, #1
	if (total_len > ring_buf_capacity_get(history->ring_buf)) {
   2486e:	429d      	cmp	r5, r3
{
   24870:	4604      	mov	r4, r0
   24872:	468a      	mov	sl, r1
   24874:	4617      	mov	r7, r2
	if (total_len > ring_buf_capacity_get(history->ring_buf)) {
   24876:	d83f      	bhi.n	248f8 <shell_history_put+0xa0>
	history->current = NULL;
   24878:	2300      	movs	r3, #0
   2487a:	60c3      	str	r3, [r0, #12]
		return;
	}

	shell_history_mode_exit(history);

	if (len == 0) {
   2487c:	2a00      	cmp	r2, #0
   2487e:	d03b      	beq.n	248f8 <shell_history_put+0xa0>
		return;
	}

	l_item = sys_dlist_peek_head(&history->list);
   24880:	f100 0804 	add.w	r8, r0, #4
	return list->head == list;
   24884:	6840      	ldr	r0, [r0, #4]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   24886:	4580      	cmp	r8, r0
   24888:	d12b      	bne.n	248e2 <shell_history_put+0x8a>
	h_item = CONTAINER_OF(l_item, struct shell_history_item, dnode);
   2488a:	9301      	str	r3, [sp, #4]
			break;
		}

		ring_buf_put_finish(history->ring_buf, 0);
		if (remove_from_tail(history) == false) {
			__ASSERT_NO_MSG(ring_buf_is_empty(history->ring_buf));
   2488c:	f8df 90c0 	ldr.w	r9, [pc, #192]	; 24950 <shell_history_put+0xf8>
		claim_len = ring_buf_put_claim(history->ring_buf,
   24890:	462a      	mov	r2, r5
   24892:	a901      	add	r1, sp, #4
   24894:	6820      	ldr	r0, [r4, #0]
   24896:	f01b ff13 	bl	406c0 <ring_buf_put_claim>
		if (claim_len < total_len) {
   2489a:	4285      	cmp	r5, r0
		claim_len = ring_buf_put_claim(history->ring_buf,
   2489c:	4683      	mov	fp, r0
		if (claim_len < total_len) {
   2489e:	d92e      	bls.n	248fe <shell_history_put+0xa6>
				ring_buf_put_claim(history->ring_buf,
   248a0:	462a      	mov	r2, r5
   248a2:	a901      	add	r1, sp, #4
   248a4:	6820      	ldr	r0, [r4, #0]
   248a6:	f01b ff0b 	bl	406c0 <ring_buf_put_claim>
			if (claim2_len == total_len) {
   248aa:	4285      	cmp	r5, r0
   248ac:	d128      	bne.n	24900 <shell_history_put+0xa8>
				ring_buf_put_finish(history->ring_buf,
   248ae:	4659      	mov	r1, fp
   248b0:	6820      	ldr	r0, [r4, #0]
				padding += claim_len;
   248b2:	445e      	add	r6, fp
				ring_buf_put_finish(history->ring_buf,
   248b4:	f01b ff1f 	bl	406f6 <ring_buf_put_finish>
				padding += claim_len;
   248b8:	46ab      	mov	fp, r5
   248ba:	b2b6      	uxth	r6, r6
			add_to_head(history, h_item, line, len, padding);
   248bc:	9d01      	ldr	r5, [sp, #4]
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   248be:	463a      	mov	r2, r7
   248c0:	4651      	mov	r1, sl
	item->len = len;
   248c2:	812f      	strh	r7, [r5, #8]
	item->padding = padding;
   248c4:	816e      	strh	r6, [r5, #10]
   248c6:	f105 000c 	add.w	r0, r5, #12
   248ca:	f020 fac1 	bl	44e50 <memcpy>
	node->next = list->head;
   248ce:	6862      	ldr	r2, [r4, #4]
			ring_buf_put_finish(history->ring_buf, claim_len);
   248d0:	4659      	mov	r1, fp
	node->prev = list;
   248d2:	e9c5 2800 	strd	r2, r8, [r5]
   248d6:	6820      	ldr	r0, [r4, #0]
	list->head->prev = node;
   248d8:	6055      	str	r5, [r2, #4]
	list->head = node;
   248da:	6065      	str	r5, [r4, #4]
   248dc:	f01b ff0b 	bl	406f6 <ring_buf_put_finish>
			break;
   248e0:	e00a      	b.n	248f8 <shell_history_put+0xa0>
	h_item = CONTAINER_OF(l_item, struct shell_history_item, dnode);
   248e2:	9001      	str	r0, [sp, #4]
	if (l_item &&
   248e4:	2800      	cmp	r0, #0
   248e6:	d0d1      	beq.n	2488c <shell_history_put+0x34>
	   (h_item->len == len) &&
   248e8:	8903      	ldrh	r3, [r0, #8]
	if (l_item &&
   248ea:	4293      	cmp	r3, r2
   248ec:	d1ce      	bne.n	2488c <shell_history_put+0x34>
	   (memcmp(h_item->data, line, len) == 0)) {
   248ee:	300c      	adds	r0, #12
   248f0:	f020 faa0 	bl	44e34 <memcmp>
	   (h_item->len == len) &&
   248f4:	2800      	cmp	r0, #0
   248f6:	d1c9      	bne.n	2488c <shell_history_put+0x34>
			 * of ring buffer capacity length.
			 */
			ring_buf_reset(history->ring_buf);
		}
	} while (1);
}
   248f8:	b003      	add	sp, #12
   248fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (claim_len == total_len) {
   248fe:	d0dd      	beq.n	248bc <shell_history_put+0x64>
		ring_buf_put_finish(history->ring_buf, 0);
   24900:	2100      	movs	r1, #0
   24902:	6820      	ldr	r0, [r4, #0]
   24904:	f01b fef7 	bl	406f6 <ring_buf_put_finish>
	if (sys_dlist_is_empty(&history->list)) {
   24908:	6863      	ldr	r3, [r4, #4]
   2490a:	4598      	cmp	r8, r3
   2490c:	d115      	bne.n	2493a <shell_history_put+0xe2>
			__ASSERT_NO_MSG(ring_buf_is_empty(history->ring_buf));
   2490e:	6823      	ldr	r3, [r4, #0]
   24910:	e9d3 2300 	ldrd	r2, r3, [r3]
   24914:	429a      	cmp	r2, r3
   24916:	d009      	beq.n	2492c <shell_history_put+0xd4>
   24918:	490b      	ldr	r1, [pc, #44]	; (24948 <shell_history_put+0xf0>)
   2491a:	480c      	ldr	r0, [pc, #48]	; (2494c <shell_history_put+0xf4>)
   2491c:	23bc      	movs	r3, #188	; 0xbc
   2491e:	464a      	mov	r2, r9
   24920:	f01b fe6f 	bl	40602 <printk>
   24924:	21bc      	movs	r1, #188	; 0xbc
   24926:	4648      	mov	r0, r9
   24928:	f01b ff2e 	bl	40788 <assert_post_action>
	buf->head = 0;
   2492c:	2200      	movs	r2, #0
			ring_buf_reset(history->ring_buf);
   2492e:	6823      	ldr	r3, [r4, #0]
	buf->tail = 0;
   24930:	e9c3 2200 	strd	r2, r2, [r3]
__ssp_bos_icheck3(memset, void *, int)
   24934:	609a      	str	r2, [r3, #8]
   24936:	60da      	str	r2, [r3, #12]
   24938:	e7aa      	b.n	24890 <shell_history_put+0x38>
   2493a:	4620      	mov	r0, r4
   2493c:	f01c fe49 	bl	415d2 <remove_from_tail.part.4>
		if (remove_from_tail(history) == false) {
   24940:	2800      	cmp	r0, #0
   24942:	d1a5      	bne.n	24890 <shell_history_put+0x38>
   24944:	e7e3      	b.n	2490e <shell_history_put+0xb6>
   24946:	bf00      	nop
   24948:	00049185 	.word	0x00049185
   2494c:	0004764f 	.word	0x0004764f
   24950:	00049155 	.word	0x00049155

00024954 <put>:

	return true;
}

static void put(const struct log_backend *const backend, struct log_msg *msg)
{
   24954:	b5f0      	push	{r4, r5, r6, r7, lr}
	const struct shell *shell = (const struct shell *)backend->cb->ctx;
   24956:	6843      	ldr	r3, [r0, #4]
{
   24958:	b087      	sub	sp, #28
	const struct shell *shell = (const struct shell *)backend->cb->ctx;
   2495a:	681c      	ldr	r4, [r3, #0]
	bool colors = IS_ENABLED(CONFIG_SHELL_VT100_COLORS) &&
			shell->ctx->internal.flags.use_colors;
	struct k_poll_signal *signal;

	log_msg_get(msg);
   2495c:	4608      	mov	r0, r1
			shell->ctx->internal.flags.use_colors;
   2495e:	68a3      	ldr	r3, [r4, #8]
{
   24960:	460d      	mov	r5, r1
			shell->ctx->internal.flags.use_colors;
   24962:	f8d3 6258 	ldr.w	r6, [r3, #600]	; 0x258
	log_msg_get(msg);
   24966:	f01c f91d 	bl	40ba4 <log_msg_get>

	switch (shell->log_backend->control_block->state) {
   2496a:	69e3      	ldr	r3, [r4, #28]
			shell->ctx->internal.flags.use_colors;
   2496c:	f3c6 0640 	ubfx	r6, r6, #1, #1
	switch (shell->log_backend->control_block->state) {
   24970:	68db      	ldr	r3, [r3, #12]
   24972:	791b      	ldrb	r3, [r3, #4]
   24974:	2b01      	cmp	r3, #1
   24976:	d005      	beq.n	24984 <put+0x30>
   24978:	2b03      	cmp	r3, #3
   2497a:	d052      	beq.n	24a22 <put+0xce>
	case SHELL_LOG_BACKEND_DISABLED:
		/* fall through */
		/* no break */
	default:
		/* Discard message. */
		log_msg_put(msg);
   2497c:	4628      	mov	r0, r5
   2497e:	f01c f93a 	bl	40bf6 <log_msg_put>
	}
}
   24982:	e044      	b.n	24a0e <put+0xba>
	struct shell_log_backend_msg t_msg = {
   24984:	e9cd 5501 	strd	r5, r5, [sp, #4]
	return z_impl_k_uptime_get();
   24988:	f020 f99b 	bl	44cc2 <z_impl_k_uptime_get>
	err = k_msgq_put(shell->log_backend->msgq, &t_msg,
   2498c:	69e3      	ldr	r3, [r4, #28]
	return (u32_t)k_uptime_get();
   2498e:	9003      	str	r0, [sp, #12]
   24990:	691a      	ldr	r2, [r3, #16]
   24992:	6858      	ldr	r0, [r3, #4]
	return z_impl_k_msgq_put(msgq, data, timeout);
   24994:	a902      	add	r1, sp, #8
   24996:	f016 ff29 	bl	3b7ec <z_impl_k_msgq_put>
	switch (err) {
   2499a:	f110 0f0b 	cmn.w	r0, #11
   2499e:	d003      	beq.n	249a8 <put+0x54>
   249a0:	2800      	cmp	r0, #0
   249a2:	d02e      	beq.n	24a02 <put+0xae>
   249a4:	3023      	adds	r0, #35	; 0x23
   249a6:	d134      	bne.n	24a12 <put+0xbe>
	struct k_msgq *msgq = shell->log_backend->msgq;
   249a8:	69e3      	ldr	r3, [r4, #28]
   249aa:	685d      	ldr	r5, [r3, #4]
	u32_t timeout = shell->log_backend->timeout;
   249ac:	691e      	ldr	r6, [r3, #16]
	return z_impl_k_uptime_get();
   249ae:	f020 f988 	bl	44cc2 <z_impl_k_uptime_get>
   249b2:	4607      	mov	r7, r0
	return z_impl_k_msgq_peek(msgq, data);
   249b4:	a904      	add	r1, sp, #16
   249b6:	4628      	mov	r0, r5
   249b8:	f017 f864 	bl	3ba84 <z_impl_k_msgq_peek>
		if (err == 0 && ((now - msg.timestamp) > timeout)) {
   249bc:	4602      	mov	r2, r0
   249be:	b978      	cbnz	r0, 249e0 <put+0x8c>
   249c0:	9b05      	ldr	r3, [sp, #20]
   249c2:	1afb      	subs	r3, r7, r3
   249c4:	429e      	cmp	r6, r3
   249c6:	d20b      	bcs.n	249e0 <put+0x8c>
	return z_impl_k_msgq_get(msgq, data, timeout);
   249c8:	a904      	add	r1, sp, #16
   249ca:	4628      	mov	r0, r5
   249cc:	f016 ffae 	bl	3b92c <z_impl_k_msgq_get>
			log_msg_put(msg.msg);
   249d0:	9804      	ldr	r0, [sp, #16]
   249d2:	f01c f910 	bl	40bf6 <log_msg_put>
				shell->stats->log_lost_cnt++;
   249d6:	69a2      	ldr	r2, [r4, #24]
   249d8:	6813      	ldr	r3, [r2, #0]
   249da:	3301      	adds	r3, #1
   249dc:	6013      	str	r3, [r2, #0]
   249de:	e7e9      	b.n	249b4 <put+0x60>
		err = k_msgq_put(shell->log_backend->msgq, &msg, K_NO_WAIT);
   249e0:	69e3      	ldr	r3, [r4, #28]
   249e2:	6858      	ldr	r0, [r3, #4]
	return z_impl_k_msgq_put(msgq, data, timeout);
   249e4:	2200      	movs	r2, #0
   249e6:	a901      	add	r1, sp, #4
   249e8:	f016 ff00 	bl	3b7ec <z_impl_k_msgq_put>
		if (err) {
   249ec:	b148      	cbz	r0, 24a02 <put+0xae>
			__ASSERT_NO_MSG(0);
   249ee:	4913      	ldr	r1, [pc, #76]	; (24a3c <put+0xe8>)
   249f0:	236d      	movs	r3, #109	; 0x6d
   249f2:	4a13      	ldr	r2, [pc, #76]	; (24a40 <put+0xec>)
   249f4:	4813      	ldr	r0, [pc, #76]	; (24a44 <put+0xf0>)
   249f6:	f01b fe04 	bl	40602 <printk>
   249fa:	216d      	movs	r1, #109	; 0x6d
		__ASSERT_NO_MSG(0);
   249fc:	4810      	ldr	r0, [pc, #64]	; (24a40 <put+0xec>)
   249fe:	f01b fec3 	bl	40788 <assert_post_action>
			signal = &shell->ctx->signals[SHELL_SIGNAL_LOG_MSG];
   24a02:	68a0      	ldr	r0, [r4, #8]
   24a04:	f500 701b 	add.w	r0, r0, #620	; 0x26c
	if (z_syscall_trap()) {
		return (int) arch_syscall_invoke2(*(uintptr_t *)&signal, *(uintptr_t *)&result, K_SYSCALL_K_POLL_SIGNAL_RAISE);
	}
#endif
	compiler_barrier();
	return z_impl_k_poll_signal_raise(signal, result);
   24a08:	2100      	movs	r1, #0
   24a0a:	f019 ff67 	bl	3e8dc <z_impl_k_poll_signal_raise>
}
   24a0e:	b007      	add	sp, #28
   24a10:	bdf0      	pop	{r4, r5, r6, r7, pc}
		__ASSERT_NO_MSG(0);
   24a12:	490a      	ldr	r1, [pc, #40]	; (24a3c <put+0xe8>)
   24a14:	2373      	movs	r3, #115	; 0x73
   24a16:	4a0a      	ldr	r2, [pc, #40]	; (24a40 <put+0xec>)
   24a18:	480a      	ldr	r0, [pc, #40]	; (24a44 <put+0xf0>)
   24a1a:	f01b fdf2 	bl	40602 <printk>
   24a1e:	2173      	movs	r1, #115	; 0x73
   24a20:	e7ec      	b.n	249fc <put+0xa8>
		shell_cmd_line_erase(shell);
   24a22:	4620      	mov	r0, r4
   24a24:	f01c fc96 	bl	41354 <shell_cmd_line_erase>
		msg_process(shell->log_backend->log_output, msg, colors);
   24a28:	69e3      	ldr	r3, [r4, #28]
		flags |= LOG_OUTPUT_FLAG_COLORS;
   24a2a:	2e00      	cmp	r6, #0
	log_output_msg_process(log_output, msg, flags);
   24a2c:	bf0c      	ite	eq
   24a2e:	220e      	moveq	r2, #14
   24a30:	220f      	movne	r2, #15
   24a32:	4629      	mov	r1, r5
   24a34:	6898      	ldr	r0, [r3, #8]
   24a36:	f7fd fd37 	bl	224a8 <log_output_msg_process>
	log_msg_put(msg);
   24a3a:	e79f      	b.n	2497c <put+0x28>
   24a3c:	0004d39b 	.word	0x0004d39b
   24a40:	000491aa 	.word	0x000491aa
   24a44:	0004764f 	.word	0x0004764f

00024a48 <shell_wildcard_process>:


enum shell_wildcard_status shell_wildcard_process(const struct shell *shell,
					      const struct shell_cmd_entry *cmd,
					      const char *pattern)
{
   24a48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   24a4c:	4682      	mov	sl, r0
   24a4e:	b089      	sub	sp, #36	; 0x24
   24a50:	4616      	mov	r6, r2
	enum shell_wildcard_status ret_val = SHELL_WILDCARD_NOT_FOUND;

	if (cmd == NULL) {
   24a52:	468b      	mov	fp, r1
   24a54:	b921      	cbnz	r1, 24a60 <shell_wildcard_process+0x18>
		return ret_val;
   24a56:	2403      	movs	r4, #3
	 * and it will try to add matching commands.
	 */
	ret_val = commands_expand(shell, cmd, pattern);

	return ret_val;
}
   24a58:	4620      	mov	r0, r4
   24a5a:	b009      	add	sp, #36	; 0x24
   24a5c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (!shell_wildcard_character_exist(pattern)) {
   24a60:	4610      	mov	r0, r2
   24a62:	f01c feb7 	bl	417d4 <shell_wildcard_character_exist>
   24a66:	2800      	cmp	r0, #0
   24a68:	d0f5      	beq.n	24a56 <shell_wildcard_process+0xe>
   24a6a:	2500      	movs	r5, #0
	enum shell_wildcard_status ret_val = SHELL_WILDCARD_CMD_NO_MATCH_FOUND;
   24a6c:	2402      	movs	r4, #2
	size_t cnt = 0;
   24a6e:	9501      	str	r5, [sp, #4]
	if (cmd->is_dynamic) {
   24a70:	f89b 2000 	ldrb.w	r2, [fp]
   24a74:	4268      	negs	r0, r5
   24a76:	f8db 3004 	ldr.w	r3, [fp, #4]
   24a7a:	b18a      	cbz	r2, 24aa0 <shell_wildcard_process+0x58>
		cmd->u.dynamic_get(idx, d_entry);
   24a7c:	a903      	add	r1, sp, #12
   24a7e:	4798      	blx	r3
		*entry = (d_entry->syntax != NULL) ? d_entry : NULL;
   24a80:	9b03      	ldr	r3, [sp, #12]
   24a82:	2b00      	cmp	r3, #0
   24a84:	d15b      	bne.n	24b3e <shell_wildcard_process+0xf6>
	if (cnt > 0) {
   24a86:	9b01      	ldr	r3, [sp, #4]
   24a88:	2b00      	cmp	r3, #0
   24a8a:	d0e5      	beq.n	24a58 <shell_wildcard_process+0x10>
		shell_pattern_remove(shell->ctx->temp_buff,
   24a8c:	f8da 0008 	ldr.w	r0, [sl, #8]
   24a90:	4632      	mov	r2, r6
   24a92:	f100 0136 	add.w	r1, r0, #54	; 0x36
   24a96:	f500 709c 	add.w	r0, r0, #312	; 0x138
   24a9a:	f01c fb68 	bl	4116e <shell_pattern_remove>
	return ret_val;
   24a9e:	e7db      	b.n	24a58 <shell_wildcard_process+0x10>
		*entry = (cmd->u.entry[idx].syntax != NULL) ?
   24aa0:	f06f 0213 	mvn.w	r2, #19
   24aa4:	436a      	muls	r2, r5
   24aa6:	eb03 0802 	add.w	r8, r3, r2
				&cmd->u.entry[idx] : NULL;
   24aaa:	589b      	ldr	r3, [r3, r2]
   24aac:	2b00      	cmp	r3, #0
   24aae:	d0ea      	beq.n	24a86 <shell_wildcard_process+0x3e>
		if (fnmatch(pattern, p_static_entry->syntax, 0) == 0) {
   24ab0:	2200      	movs	r2, #0
   24ab2:	f8d8 1000 	ldr.w	r1, [r8]
   24ab6:	4630      	mov	r0, r6
   24ab8:	f01b ff9a 	bl	409f0 <fnmatch>
   24abc:	bb80      	cbnz	r0, 24b20 <shell_wildcard_process+0xd8>
			ret_val = command_add(shell->ctx->temp_buff,
   24abe:	f8d8 9000 	ldr.w	r9, [r8]
   24ac2:	f8da 7008 	ldr.w	r7, [sl, #8]
	return str == NULL ? 0U : (u16_t)strlen(str);
   24ac6:	f1b9 0f00 	cmp.w	r9, #0
   24aca:	d02c      	beq.n	24b26 <shell_wildcard_process+0xde>
   24acc:	4648      	mov	r0, r9
   24ace:	f7f8 fb23 	bl	1d118 <strlen>
   24ad2:	b284      	uxth	r4, r0
	if ((*buff_len + cmd_len + 1) > CONFIG_SHELL_CMD_BUFF_SIZE) {
   24ad4:	8efb      	ldrh	r3, [r7, #54]	; 0x36
   24ad6:	3301      	adds	r3, #1
   24ad8:	4423      	add	r3, r4
   24ada:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
   24ade:	dc24      	bgt.n	24b2a <shell_wildcard_process+0xe2>
	completion_addr = strstr(buff, pattern);
   24ae0:	4631      	mov	r1, r6
   24ae2:	f507 709c 	add.w	r0, r7, #312	; 0x138
   24ae6:	f020 fb74 	bl	451d2 <strstr>
	if (!completion_addr) {
   24aea:	4680      	mov	r8, r0
   24aec:	b328      	cbz	r0, 24b3a <shell_wildcard_process+0xf2>
   24aee:	f7f8 fb13 	bl	1d118 <strlen>
	memmove(completion_addr + cmd_len + 1, completion_addr, shift + 1);
   24af2:	b282      	uxth	r2, r0
   24af4:	1c60      	adds	r0, r4, #1
__ssp_bos_icheck3(memmove, void *, const void *)
   24af6:	3201      	adds	r2, #1
   24af8:	4641      	mov	r1, r8
   24afa:	4440      	add	r0, r8
   24afc:	f020 f9c8 	bl	44e90 <memmove>
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   24b00:	4622      	mov	r2, r4
   24b02:	4649      	mov	r1, r9
   24b04:	4640      	mov	r0, r8
   24b06:	f020 f9a3 	bl	44e50 <memcpy>
	completion_addr[cmd_len] = ' ';
   24b0a:	2320      	movs	r3, #32
   24b0c:	f808 3004 	strb.w	r3, [r8, r4]
	*buff_len += cmd_len + 1; /* + 1 for space */
   24b10:	8efb      	ldrh	r3, [r7, #54]	; 0x36
   24b12:	441c      	add	r4, r3
   24b14:	3401      	adds	r4, #1
   24b16:	86fc      	strh	r4, [r7, #54]	; 0x36
			ret_val = command_add(shell->ctx->temp_buff,
   24b18:	2400      	movs	r4, #0
			cnt++;
   24b1a:	9b01      	ldr	r3, [sp, #4]
   24b1c:	3301      	adds	r3, #1
   24b1e:	9301      	str	r3, [sp, #4]
	} while (cmd_idx);
   24b20:	3d01      	subs	r5, #1
   24b22:	d1a5      	bne.n	24a70 <shell_wildcard_process+0x28>
   24b24:	e7af      	b.n	24a86 <shell_wildcard_process+0x3e>
   24b26:	464c      	mov	r4, r9
   24b28:	e7d4      	b.n	24ad4 <shell_wildcard_process+0x8c>
				shell_internal_fprintf(shell,
   24b2a:	4633      	mov	r3, r6
   24b2c:	4a05      	ldr	r2, [pc, #20]	; (24b44 <shell_wildcard_process+0xfc>)
   24b2e:	2104      	movs	r1, #4
   24b30:	4650      	mov	r0, sl
   24b32:	f7ff fa03 	bl	23f3c <shell_internal_fprintf>
			ret_val = command_add(shell->ctx->temp_buff,
   24b36:	2401      	movs	r4, #1
   24b38:	e7a5      	b.n	24a86 <shell_wildcard_process+0x3e>
		return SHELL_WILDCARD_CMD_NO_MATCH_FOUND;
   24b3a:	2402      	movs	r4, #2
   24b3c:	e7a3      	b.n	24a86 <shell_wildcard_process+0x3e>
		*entry = (d_entry->syntax != NULL) ? d_entry : NULL;
   24b3e:	f10d 080c 	add.w	r8, sp, #12
   24b42:	e7b5      	b.n	24ab0 <shell_wildcard_process+0x68>
   24b44:	000491de 	.word	0x000491de

00024b48 <fcb_append>:
	return 0;
}

int
fcb_append(struct fcb *fcb, u16_t len, struct fcb_entry *append_loc)
{
   24b48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   24b4c:	b085      	sub	sp, #20
   24b4e:	4604      	mov	r4, r0
	struct fcb_entry *active;
	int cnt;
	int rc;
	u8_t tmp_str[8];

	cnt = fcb_put_len(tmp_str, len);
   24b50:	a802      	add	r0, sp, #8
{
   24b52:	460d      	mov	r5, r1
   24b54:	4617      	mov	r7, r2
	cnt = fcb_put_len(tmp_str, len);
   24b56:	f01c ff19 	bl	4198c <fcb_put_len>
	if (cnt < 0) {
   24b5a:	f1b0 0800 	subs.w	r8, r0, #0
   24b5e:	db72      	blt.n	24c46 <fcb_append+0xfe>
		return cnt;
	}
	cnt = fcb_len_in_flash(fcb, cnt);
   24b60:	f894 3036 	ldrb.w	r3, [r4, #54]	; 0x36
int fcb_put_len(u8_t *buf, u16_t len);
int fcb_get_len(u8_t *buf, u16_t *len);

static inline int fcb_len_in_flash(struct fcb *fcb, u16_t len)
{
	if (fcb->f_align <= 1U) {
   24b64:	fa1f f688 	uxth.w	r6, r8
   24b68:	2b01      	cmp	r3, #1
   24b6a:	d906      	bls.n	24b7a <fcb_append+0x32>
		return len;
	}
	return (len + (fcb->f_align - 1U)) & ~(fcb->f_align - 1U);
   24b6c:	1e59      	subs	r1, r3, #1
   24b6e:	441d      	add	r5, r3
   24b70:	425a      	negs	r2, r3
   24b72:	440e      	add	r6, r1
   24b74:	3d01      	subs	r5, #1
   24b76:	4016      	ands	r6, r2
   24b78:	4015      	ands	r5, r2
	if (fcb->f_align <= 1U) {
   24b7a:	2b01      	cmp	r3, #1
		return len;
   24b7c:	bf92      	itee	ls
   24b7e:	2301      	movls	r3, #1
	return (len + (fcb->f_align - 1U)) & ~(fcb->f_align - 1U);
   24b80:	425a      	neghi	r2, r3
   24b82:	4013      	andhi	r3, r2
	len = fcb_len_in_flash(fcb, len) + fcb_len_in_flash(fcb, FCB_CRC_SZ);
   24b84:	b22d      	sxth	r5, r5
   24b86:	441d      	add	r5, r3

	__ASSERT_NO_MSG(cnt <= sizeof(tmp_str));
   24b88:	2e08      	cmp	r6, #8
	len = fcb_len_in_flash(fcb, len) + fcb_len_in_flash(fcb, FCB_CRC_SZ);
   24b8a:	b2ad      	uxth	r5, r5
	__ASSERT_NO_MSG(cnt <= sizeof(tmp_str));
   24b8c:	dd09      	ble.n	24ba2 <fcb_append+0x5a>
   24b8e:	4935      	ldr	r1, [pc, #212]	; (24c64 <fcb_append+0x11c>)
   24b90:	4835      	ldr	r0, [pc, #212]	; (24c68 <fcb_append+0x120>)
   24b92:	234b      	movs	r3, #75	; 0x4b
   24b94:	4a35      	ldr	r2, [pc, #212]	; (24c6c <fcb_append+0x124>)
   24b96:	f01b fd34 	bl	40602 <printk>
   24b9a:	214b      	movs	r1, #75	; 0x4b
   24b9c:	4833      	ldr	r0, [pc, #204]	; (24c6c <fcb_append+0x124>)
   24b9e:	f01b fdf3 	bl	40788 <assert_post_action>

	rc = k_mutex_lock(&fcb->f_mtx, K_FOREVER);
   24ba2:	f104 0a0c 	add.w	sl, r4, #12
	return z_impl_k_mutex_lock(mutex, timeout);
   24ba6:	f04f 31ff 	mov.w	r1, #4294967295
   24baa:	4650      	mov	r0, sl
   24bac:	f016 ffbc 	bl	3bb28 <z_impl_k_mutex_lock>
	if (rc) {
   24bb0:	4680      	mov	r8, r0
   24bb2:	2800      	cmp	r0, #0
   24bb4:	d153      	bne.n	24c5e <fcb_append+0x116>
		return -EINVAL;
	}
	active = &fcb->f_active;
	if (active->fe_elem_off + len + cnt > active->fe_sector->fs_size) {
   24bb6:	e9d4 1309 	ldrd	r1, r3, [r4, #36]	; 0x24
   24bba:	4433      	add	r3, r6
   24bbc:	684a      	ldr	r2, [r1, #4]
   24bbe:	442b      	add	r3, r5
   24bc0:	4293      	cmp	r3, r2
   24bc2:	d92b      	bls.n	24c1c <fcb_append+0xd4>
	prev = NULL;
   24bc4:	4681      	mov	r9, r0
		sector = fcb_new_sector(fcb, fcb->f_scratch_cnt);
   24bc6:	f894 b006 	ldrb.w	fp, [r4, #6]
		cur = fcb_getnext_sector(fcb, cur);
   24bca:	4620      	mov	r0, r4
   24bcc:	f01d f859 	bl	41c82 <fcb_getnext_sector>
		if (cur == fcb->f_oldest) {
   24bd0:	6a23      	ldr	r3, [r4, #32]
		cur = fcb_getnext_sector(fcb, cur);
   24bd2:	f1b9 0f00 	cmp.w	r9, #0
   24bd6:	bf08      	it	eq
   24bd8:	4681      	moveq	r9, r0
		if (cur == fcb->f_oldest) {
   24bda:	4298      	cmp	r0, r3
		cur = fcb_getnext_sector(fcb, cur);
   24bdc:	4601      	mov	r1, r0
		if (cur == fcb->f_oldest) {
   24bde:	d038      	beq.n	24c52 <fcb_append+0x10a>
	} while (i++ < cnt);
   24be0:	45c3      	cmp	fp, r8
   24be2:	f108 0301 	add.w	r3, r8, #1
   24be6:	dc32      	bgt.n	24c4e <fcb_append+0x106>
		if (!sector || (sector->fs_size <
   24be8:	f1b9 0f00 	cmp.w	r9, #0
   24bec:	d031      	beq.n	24c52 <fcb_append+0x10a>
			sizeof(struct fcb_disk_area) + len + cnt)) {
   24bee:	f106 0308 	add.w	r3, r6, #8
		if (!sector || (sector->fs_size <
   24bf2:	f8d9 2004 	ldr.w	r2, [r9, #4]
			sizeof(struct fcb_disk_area) + len + cnt)) {
   24bf6:	442b      	add	r3, r5
		if (!sector || (sector->fs_size <
   24bf8:	429a      	cmp	r2, r3
   24bfa:	d32a      	bcc.n	24c52 <fcb_append+0x10a>
			rc = -ENOSPC;
			goto err;
		}
		rc = fcb_sector_hdr_init(fcb, sector, fcb->f_active_id + 1);
   24bfc:	8ea2      	ldrh	r2, [r4, #52]	; 0x34
   24bfe:	4649      	mov	r1, r9
   24c00:	3201      	adds	r2, #1
   24c02:	b292      	uxth	r2, r2
   24c04:	4620      	mov	r0, r4
   24c06:	f01c fee9 	bl	419dc <fcb_sector_hdr_init>
		if (rc) {
   24c0a:	4680      	mov	r8, r0
   24c0c:	b9c0      	cbnz	r0, 24c40 <fcb_append+0xf8>
			goto err;
		}
		fcb->f_active.fe_sector = sector;
		fcb->f_active.fe_elem_off = sizeof(struct fcb_disk_area);
   24c0e:	2308      	movs	r3, #8
   24c10:	62a3      	str	r3, [r4, #40]	; 0x28
		fcb->f_active_id++;
   24c12:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
		fcb->f_active.fe_sector = sector;
   24c14:	f8c4 9024 	str.w	r9, [r4, #36]	; 0x24
		fcb->f_active_id++;
   24c18:	3301      	adds	r3, #1
   24c1a:	86a3      	strh	r3, [r4, #52]	; 0x34
	}

	rc = fcb_flash_write(fcb, active->fe_sector, active->fe_elem_off, tmp_str, cnt);
   24c1c:	9600      	str	r6, [sp, #0]
   24c1e:	ab02      	add	r3, sp, #8
   24c20:	e9d4 1209 	ldrd	r1, r2, [r4, #36]	; 0x24
   24c24:	4620      	mov	r0, r4
   24c26:	f01c fe7f 	bl	41928 <fcb_flash_write>
	if (rc) {
   24c2a:	4680      	mov	r8, r0
   24c2c:	b9a0      	cbnz	r0, 24c58 <fcb_append+0x110>
		rc = -EIO;
		goto err;
	}
	append_loc->fe_sector = active->fe_sector;
   24c2e:	6a63      	ldr	r3, [r4, #36]	; 0x24
   24c30:	603b      	str	r3, [r7, #0]
	append_loc->fe_elem_off = active->fe_elem_off;
   24c32:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   24c34:	607b      	str	r3, [r7, #4]
	append_loc->fe_data_off = active->fe_elem_off + cnt;
   24c36:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   24c38:	441e      	add	r6, r3
   24c3a:	60be      	str	r6, [r7, #8]

	active->fe_elem_off = append_loc->fe_data_off + len;
   24c3c:	442e      	add	r6, r5
   24c3e:	62a6      	str	r6, [r4, #40]	; 0x28
	return z_impl_k_mutex_unlock(mutex);
   24c40:	4650      	mov	r0, sl
   24c42:	f017 f84f 	bl	3bce4 <z_impl_k_mutex_unlock>

	return 0;
err:
	k_mutex_unlock(&fcb->f_mtx);
	return rc;
}
   24c46:	4640      	mov	r0, r8
   24c48:	b005      	add	sp, #20
   24c4a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	} while (i++ < cnt);
   24c4e:	4698      	mov	r8, r3
   24c50:	e7bb      	b.n	24bca <fcb_append+0x82>
			rc = -ENOSPC;
   24c52:	f06f 081b 	mvn.w	r8, #27
   24c56:	e7f3      	b.n	24c40 <fcb_append+0xf8>
		rc = -EIO;
   24c58:	f06f 0804 	mvn.w	r8, #4
   24c5c:	e7f0      	b.n	24c40 <fcb_append+0xf8>
		return -EINVAL;
   24c5e:	f06f 0815 	mvn.w	r8, #21
   24c62:	e7f0      	b.n	24c46 <fcb_append+0xfe>
   24c64:	0004925e 	.word	0x0004925e
   24c68:	0004764f 	.word	0x0004764f
   24c6c:	00049230 	.word	0x00049230

00024c70 <boot_write_trailer_byte>:
	}
}

static int boot_write_trailer_byte(const struct flash_area *fa, u32_t off,
				   u8_t val)
{
   24c70:	b573      	push	{r0, r1, r4, r5, r6, lr}
   24c72:	4604      	mov	r4, r0
   24c74:	460d      	mov	r5, r1
   24c76:	4616      	mov	r6, r2
	u8_t buf[BOOT_MAX_ALIGN];
	u8_t align;
	u8_t erased_val;
	int rc;

	align = flash_area_align(fa);
   24c78:	f01d fe91 	bl	4299e <flash_area_align>
	assert(align <= BOOT_MAX_ALIGN);
   24c7c:	2808      	cmp	r0, #8
	align = flash_area_align(fa);
   24c7e:	4603      	mov	r3, r0
	assert(align <= BOOT_MAX_ALIGN);
   24c80:	d906      	bls.n	24c90 <boot_write_trailer_byte+0x20>
   24c82:	4b0c      	ldr	r3, [pc, #48]	; (24cb4 <boot_write_trailer_byte+0x44>)
   24c84:	4a0c      	ldr	r2, [pc, #48]	; (24cb8 <boot_write_trailer_byte+0x48>)
   24c86:	f44f 719d 	mov.w	r1, #314	; 0x13a
   24c8a:	480c      	ldr	r0, [pc, #48]	; (24cbc <boot_write_trailer_byte+0x4c>)
   24c8c:	f019 fe8c 	bl	3e9a8 <__assert_func>
	erased_val = flash_area_erased_val(fa);
	memset(buf, erased_val, BOOT_MAX_ALIGN);
   24c90:	f04f 30ff 	mov.w	r0, #4294967295
	buf[0] = val;

	rc = flash_area_write(fa, off, buf, align);
   24c94:	466a      	mov	r2, sp
	memset(buf, erased_val, BOOT_MAX_ALIGN);
   24c96:	e9cd 0000 	strd	r0, r0, [sp]
	rc = flash_area_write(fa, off, buf, align);
   24c9a:	4629      	mov	r1, r5
   24c9c:	4620      	mov	r0, r4
	buf[0] = val;
   24c9e:	f88d 6000 	strb.w	r6, [sp]
	rc = flash_area_write(fa, off, buf, align);
   24ca2:	f01d fe2d 	bl	42900 <flash_area_write>
	if (rc != 0) {
   24ca6:	2800      	cmp	r0, #0
		return -EIO;
	}

	return 0;
}
   24ca8:	bf18      	it	ne
   24caa:	f06f 0004 	mvnne.w	r0, #4
   24cae:	b002      	add	sp, #8
   24cb0:	bd70      	pop	{r4, r5, r6, pc}
   24cb2:	bf00      	nop
   24cb4:	0004928d 	.word	0x0004928d
   24cb8:	00049275 	.word	0x00049275
   24cbc:	000492a5 	.word	0x000492a5

00024cc0 <boot_request_upgrade>:

	return BOOT_SWAP_TYPE_NONE;
}

int boot_request_upgrade(int permanent)
{
   24cc0:	b537      	push	{r0, r1, r2, r4, r5, lr}
   24cc2:	4605      	mov	r5, r0
	rc = flash_area_open(bank_id, &fa);
   24cc4:	a901      	add	r1, sp, #4
   24cc6:	2006      	movs	r0, #6
   24cc8:	f000 fa50 	bl	2516c <flash_area_open>
	if (rc) {
   24ccc:	4604      	mov	r4, r0
   24cce:	bb10      	cbnz	r0, 24d16 <boot_request_upgrade+0x56>
	offs = MAGIC_OFFS(fa);
   24cd0:	9801      	ldr	r0, [sp, #4]
	rc = flash_area_write(fa, offs, boot_img_magic, BOOT_MAGIC_SZ);
   24cd2:	2310      	movs	r3, #16
	offs = MAGIC_OFFS(fa);
   24cd4:	6881      	ldr	r1, [r0, #8]
	rc = flash_area_write(fa, offs, boot_img_magic, BOOT_MAGIC_SZ);
   24cd6:	4a12      	ldr	r2, [pc, #72]	; (24d20 <boot_request_upgrade+0x60>)
   24cd8:	3910      	subs	r1, #16
   24cda:	f01d fe11 	bl	42900 <flash_area_write>
   24cde:	4604      	mov	r4, r0
	flash_area_close(fa);
   24ce0:	9801      	ldr	r0, [sp, #4]
   24ce2:	f01d fdef 	bl	428c4 <flash_area_close>
	u8_t swap_type;
#endif
	int rc;

	rc = boot_magic_write(FLASH_AREA_IMAGE_SECONDARY);
	if (rc) {
   24ce6:	b9b4      	cbnz	r4, 24d16 <boot_request_upgrade+0x56>
		goto op_end;
	}

	if (permanent) {
   24ce8:	b1c5      	cbz	r5, 24d1c <boot_request_upgrade+0x5c>
	return boot_flag_write(BOOT_FLAG_IMAGE_OK, bank_id);
   24cea:	2006      	movs	r0, #6
   24cec:	f01d f876 	bl	41ddc <boot_flag_write.constprop.7>
		rc = boot_image_ok_write(FLASH_AREA_IMAGE_SECONDARY);

#ifdef CONFIG_MCUBOOT_TRAILER_SWAP_TYPE
		if (rc) {
   24cf0:	4604      	mov	r4, r0
   24cf2:	b980      	cbnz	r0, 24d16 <boot_request_upgrade+0x56>
			goto op_end;
		}

		swap_type = BOOT_SWAP_TYPE_PERM;
   24cf4:	2503      	movs	r5, #3
	rc = flash_area_open(bank_id, &fa);
   24cf6:	a901      	add	r1, sp, #4
   24cf8:	2006      	movs	r0, #6
   24cfa:	f000 fa37 	bl	2516c <flash_area_open>
	if (rc) {
   24cfe:	4604      	mov	r4, r0
   24d00:	b948      	cbnz	r0, 24d16 <boot_request_upgrade+0x56>
	offs = SWAP_TYPE_OFFS(fa);
   24d02:	9801      	ldr	r0, [sp, #4]
	rc = boot_write_trailer_byte(fa, offs, swap_type);
   24d04:	462a      	mov	r2, r5
	offs = SWAP_TYPE_OFFS(fa);
   24d06:	6881      	ldr	r1, [r0, #8]
	rc = boot_write_trailer_byte(fa, offs, swap_type);
   24d08:	3928      	subs	r1, #40	; 0x28
   24d0a:	f7ff ffb1 	bl	24c70 <boot_write_trailer_byte>
   24d0e:	4604      	mov	r4, r0
	flash_area_close(fa);
   24d10:	9801      	ldr	r0, [sp, #4]
   24d12:	f01d fdd7 	bl	428c4 <flash_area_close>
#else
	}
#endif
op_end:
	return rc;
}
   24d16:	4620      	mov	r0, r4
   24d18:	b003      	add	sp, #12
   24d1a:	bd30      	pop	{r4, r5, pc}
		swap_type = BOOT_SWAP_TYPE_TEST;
   24d1c:	2502      	movs	r5, #2
   24d1e:	e7ea      	b.n	24cf6 <boot_request_upgrade+0x36>
   24d20:	000466d8 	.word	0x000466d8

00024d24 <flash_progressive_erase>:
 * @param[in] off offset from the beginning of the image flash area beginning
 *
 * @return  0 on success, negative errno code on fail.
 */
static int flash_progressive_erase(struct flash_img_context *ctx, off_t off)
{
   24d24:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct flash_sector sector;
	int rc;

	rc = flash_sector_from_off(ctx->flash_area, off, &sector);
   24d26:	f8d0 5200 	ldr.w	r5, [r0, #512]	; 0x200
{
   24d2a:	b085      	sub	sp, #20
   24d2c:	4606      	mov	r6, r0
	flash_dev = flash_area_get_device(fap);
   24d2e:	4628      	mov	r0, r5
{
   24d30:	460c      	mov	r4, r1
	flash_dev = flash_area_get_device(fap);
   24d32:	f01d fe3b 	bl	429ac <flash_area_get_device>
	off += fap->fa_off; /* flash driver uses offset from memory beginning */
   24d36:	6869      	ldr	r1, [r5, #4]
   24d38:	4421      	add	r1, r4
	if (flash_dev) {
   24d3a:	b9a0      	cbnz	r0, 24d66 <flash_progressive_erase+0x42>
	int rc = -ENODEV;
   24d3c:	f06f 0412 	mvn.w	r4, #18
	if (rc) {
		LOG_ERR("Unable to determine flash sector size");
   24d40:	4b2b      	ldr	r3, [pc, #172]	; (24df0 <flash_progressive_erase+0xcc>)
   24d42:	681b      	ldr	r3, [r3, #0]
   24d44:	075a      	lsls	r2, r3, #29
   24d46:	d019      	beq.n	24d7c <flash_progressive_erase+0x58>
   24d48:	2301      	movs	r3, #1
   24d4a:	f04f 0100 	mov.w	r1, #0
   24d4e:	4a29      	ldr	r2, [pc, #164]	; (24df4 <flash_progressive_erase+0xd0>)
   24d50:	f363 0107 	bfi	r1, r3, #0, #8
   24d54:	4b28      	ldr	r3, [pc, #160]	; (24df8 <flash_progressive_erase+0xd4>)
   24d56:	4829      	ldr	r0, [pc, #164]	; (24dfc <flash_progressive_erase+0xd8>)
   24d58:	1a9b      	subs	r3, r3, r2
   24d5a:	08db      	lsrs	r3, r3, #3
   24d5c:	f363 118f 	bfi	r1, r3, #6, #10
   24d60:	f01b fe6f 	bl	40a42 <log_0>
   24d64:	e00a      	b.n	24d7c <flash_progressive_erase+0x58>
	if (z_syscall_trap()) {
		return (int) arch_syscall_invoke3(*(uintptr_t *)&dev, *(uintptr_t *)&offset, *(uintptr_t *)&info, K_SYSCALL_FLASH_GET_PAGE_INFO_BY_OFFS);
	}
#endif
	compiler_barrier();
	return z_impl_flash_get_page_info_by_offs(dev, offset, info);
   24d66:	aa01      	add	r2, sp, #4
   24d68:	f01e ffbf 	bl	43cea <z_impl_flash_get_page_info_by_offs>
		if (rc == 0) {
   24d6c:	b948      	cbnz	r0, 24d82 <flash_progressive_erase+0x5e>
			sector->fs_size = page.size;
   24d6e:	e9dd 4701 	ldrd	r4, r7, [sp, #4]
	} else {
		if (ctx->off_last != sector.fs_off) {
   24d72:	f8d6 320c 	ldr.w	r3, [r6, #524]	; 0x20c
   24d76:	42a3      	cmp	r3, r4
   24d78:	d105      	bne.n	24d86 <flash_progressive_erase+0x62>
	rc = flash_sector_from_off(ctx->flash_area, off, &sector);
   24d7a:	2400      	movs	r4, #0
			}
		}
	}

	return rc;
}
   24d7c:	4620      	mov	r0, r4
   24d7e:	b005      	add	sp, #20
   24d80:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (rc) {
   24d82:	4604      	mov	r4, r0
   24d84:	e7dc      	b.n	24d40 <flash_progressive_erase+0x1c>
			LOG_INF("Erasing sector at offset 0x%08lx",
   24d86:	4d1a      	ldr	r5, [pc, #104]	; (24df0 <flash_progressive_erase+0xcc>)
			ctx->off_last = sector.fs_off;
   24d88:	f8c6 420c 	str.w	r4, [r6, #524]	; 0x20c
			LOG_INF("Erasing sector at offset 0x%08lx",
   24d8c:	682b      	ldr	r3, [r5, #0]
   24d8e:	f003 0307 	and.w	r3, r3, #7
   24d92:	2b02      	cmp	r3, #2
   24d94:	d90e      	bls.n	24db4 <flash_progressive_erase+0x90>
   24d96:	2303      	movs	r3, #3
   24d98:	f04f 0200 	mov.w	r2, #0
   24d9c:	4915      	ldr	r1, [pc, #84]	; (24df4 <flash_progressive_erase+0xd0>)
   24d9e:	f363 0207 	bfi	r2, r3, #0, #8
   24da2:	4b15      	ldr	r3, [pc, #84]	; (24df8 <flash_progressive_erase+0xd4>)
   24da4:	4816      	ldr	r0, [pc, #88]	; (24e00 <flash_progressive_erase+0xdc>)
   24da6:	1a5b      	subs	r3, r3, r1
   24da8:	08db      	lsrs	r3, r3, #3
   24daa:	f363 128f 	bfi	r2, r3, #6, #10
   24dae:	4621      	mov	r1, r4
   24db0:	f01b fe54 	bl	40a5c <log_1>
			rc = flash_area_erase(ctx->flash_area,
   24db4:	f8d6 0200 	ldr.w	r0, [r6, #512]	; 0x200
   24db8:	463a      	mov	r2, r7
   24dba:	6841      	ldr	r1, [r0, #4]
   24dbc:	1a61      	subs	r1, r4, r1
   24dbe:	f01d fdc8 	bl	42952 <flash_area_erase>
			if (rc) {
   24dc2:	4604      	mov	r4, r0
   24dc4:	2800      	cmp	r0, #0
   24dc6:	d0d8      	beq.n	24d7a <flash_progressive_erase+0x56>
				LOG_ERR("Error %d while erasing sector", rc);
   24dc8:	682b      	ldr	r3, [r5, #0]
   24dca:	075b      	lsls	r3, r3, #29
   24dcc:	d0d6      	beq.n	24d7c <flash_progressive_erase+0x58>
   24dce:	2301      	movs	r3, #1
   24dd0:	f04f 0200 	mov.w	r2, #0
   24dd4:	4907      	ldr	r1, [pc, #28]	; (24df4 <flash_progressive_erase+0xd0>)
   24dd6:	f363 0207 	bfi	r2, r3, #0, #8
   24dda:	4b07      	ldr	r3, [pc, #28]	; (24df8 <flash_progressive_erase+0xd4>)
   24ddc:	1a5b      	subs	r3, r3, r1
   24dde:	08db      	lsrs	r3, r3, #3
   24de0:	4601      	mov	r1, r0
   24de2:	f363 128f 	bfi	r2, r3, #6, #10
   24de6:	4807      	ldr	r0, [pc, #28]	; (24e04 <flash_progressive_erase+0xe0>)
   24de8:	f01b fe38 	bl	40a5c <log_1>
	return rc;
   24dec:	e7c6      	b.n	24d7c <flash_progressive_erase+0x58>
   24dee:	bf00      	nop
   24df0:	20032ad4 	.word	0x20032ad4
   24df4:	00045f08 	.word	0x00045f08
   24df8:	00045fa8 	.word	0x00045fa8
   24dfc:	000492d2 	.word	0x000492d2
   24e00:	000492f8 	.word	0x000492f8
   24e04:	00049319 	.word	0x00049319

00024e08 <flash_sync>:

#endif /* CONFIG_IMG_ERASE_PROGRESSIVELY */

static int flash_sync(struct flash_img_context *ctx)
{
   24e08:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
   24e0c:	4604      	mov	r4, r0
	int rc = 0;

	if (ctx->buf_bytes < CONFIG_IMG_BLOCK_BUF_SIZE) {
   24e0e:	f8b0 0208 	ldrh.w	r0, [r0, #520]	; 0x208
   24e12:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
   24e16:	d205      	bcs.n	24e24 <flash_sync+0x1c>
__ssp_bos_icheck3(memset, void *, int)
   24e18:	f5c0 7200 	rsb	r2, r0, #512	; 0x200
   24e1c:	21ff      	movs	r1, #255	; 0xff
   24e1e:	4420      	add	r0, r4
   24e20:	f020 f850 	bl	44ec4 <memset>
		(void)memset(ctx->buf + ctx->buf_bytes, 0xFF,
			     CONFIG_IMG_BLOCK_BUF_SIZE - ctx->buf_bytes);
	}

#ifdef CONFIG_IMG_ERASE_PROGRESSIVELY
	rc = flash_progressive_erase(ctx, ctx->bytes_written +
   24e24:	f8d4 1204 	ldr.w	r1, [r4, #516]	; 0x204
   24e28:	4620      	mov	r0, r4
   24e2a:	f501 7100 	add.w	r1, r1, #512	; 0x200
   24e2e:	f7ff ff79 	bl	24d24 <flash_progressive_erase>
				     CONFIG_IMG_BLOCK_BUF_SIZE);
	if (rc) {
   24e32:	4605      	mov	r5, r0
   24e34:	b1c0      	cbz	r0, 24e68 <flash_sync+0x60>
		LOG_ERR("flash_progressive_erase error %d offset=0x%08zx", rc,
   24e36:	4b46      	ldr	r3, [pc, #280]	; (24f50 <flash_sync+0x148>)
   24e38:	681b      	ldr	r3, [r3, #0]
   24e3a:	0758      	lsls	r0, r3, #29
   24e3c:	d010      	beq.n	24e60 <flash_sync+0x58>
   24e3e:	2201      	movs	r2, #1
   24e40:	f04f 0300 	mov.w	r3, #0
   24e44:	4943      	ldr	r1, [pc, #268]	; (24f54 <flash_sync+0x14c>)
   24e46:	f362 0307 	bfi	r3, r2, #0, #8
   24e4a:	4a43      	ldr	r2, [pc, #268]	; (24f58 <flash_sync+0x150>)
   24e4c:	4843      	ldr	r0, [pc, #268]	; (24f5c <flash_sync+0x154>)
   24e4e:	1a52      	subs	r2, r2, r1
   24e50:	4629      	mov	r1, r5
   24e52:	08d2      	lsrs	r2, r2, #3
   24e54:	f362 138f 	bfi	r3, r2, #6, #10
   24e58:	f8d4 2204 	ldr.w	r2, [r4, #516]	; 0x204
#endif

	rc = flash_area_write(ctx->flash_area, ctx->bytes_written, ctx->buf,
			      CONFIG_IMG_BLOCK_BUF_SIZE);
	if (rc) {
		LOG_ERR("flash_write error %d offset=0x%08zx", rc,
   24e5c:	f01b fe12 	bl	40a84 <log_2>

	ctx->bytes_written += ctx->buf_bytes;
	ctx->buf_bytes = 0U;

	return rc;
}
   24e60:	4628      	mov	r0, r5
   24e62:	b004      	add	sp, #16
   24e64:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	rc = flash_area_write(ctx->flash_area, ctx->bytes_written, ctx->buf,
   24e68:	f44f 7300 	mov.w	r3, #512	; 0x200
   24e6c:	e9d4 0180 	ldrd	r0, r1, [r4, #512]	; 0x200
   24e70:	4622      	mov	r2, r4
   24e72:	f01d fd45 	bl	42900 <flash_area_write>
   24e76:	46a1      	mov	r9, r4
	if (rc) {
   24e78:	4605      	mov	r5, r0
   24e7a:	b198      	cbz	r0, 24ea4 <flash_sync+0x9c>
		LOG_ERR("flash_write error %d offset=0x%08zx", rc,
   24e7c:	4b34      	ldr	r3, [pc, #208]	; (24f50 <flash_sync+0x148>)
   24e7e:	681b      	ldr	r3, [r3, #0]
   24e80:	0759      	lsls	r1, r3, #29
   24e82:	d0ed      	beq.n	24e60 <flash_sync+0x58>
   24e84:	2201      	movs	r2, #1
   24e86:	f04f 0300 	mov.w	r3, #0
   24e8a:	4932      	ldr	r1, [pc, #200]	; (24f54 <flash_sync+0x14c>)
   24e8c:	f362 0307 	bfi	r3, r2, #0, #8
   24e90:	4a31      	ldr	r2, [pc, #196]	; (24f58 <flash_sync+0x150>)
   24e92:	1a52      	subs	r2, r2, r1
   24e94:	08d2      	lsrs	r2, r2, #3
   24e96:	f362 138f 	bfi	r3, r2, #6, #10
   24e9a:	4601      	mov	r1, r0
   24e9c:	f8d4 2204 	ldr.w	r2, [r4, #516]	; 0x204
   24ea0:	482f      	ldr	r0, [pc, #188]	; (24f60 <flash_sync+0x158>)
   24ea2:	e7db      	b.n	24e5c <flash_sync+0x54>
	if (!flash_verify(ctx->flash_area, ctx->bytes_written, ctx->buf,
   24ea4:	f44f 7700 	mov.w	r7, #512	; 0x200
   24ea8:	e9d4 a880 	ldrd	sl, r8, [r4, #512]	; 0x200
		size = (len >= sizeof(temp)) ? sizeof(temp) : len;
   24eac:	2f04      	cmp	r7, #4
   24eae:	463e      	mov	r6, r7
   24eb0:	bf28      	it	cs
   24eb2:	2604      	movcs	r6, #4
		rc = flash_area_read(fa, offset, &temp, size);
   24eb4:	4641      	mov	r1, r8
   24eb6:	4633      	mov	r3, r6
   24eb8:	aa03      	add	r2, sp, #12
   24eba:	4650      	mov	r0, sl
   24ebc:	f01d fd03 	bl	428c6 <flash_area_read>
		if (rc) {
   24ec0:	4601      	mov	r1, r0
   24ec2:	b1b0      	cbz	r0, 24ef2 <flash_sync+0xea>
			LOG_ERR("flash_read error %d offset=0x%08lx",
   24ec4:	4b22      	ldr	r3, [pc, #136]	; (24f50 <flash_sync+0x148>)
   24ec6:	681b      	ldr	r3, [r3, #0]
   24ec8:	075a      	lsls	r2, r3, #29
   24eca:	d00e      	beq.n	24eea <flash_sync+0xe2>
   24ecc:	2201      	movs	r2, #1
   24ece:	f04f 0300 	mov.w	r3, #0
   24ed2:	4820      	ldr	r0, [pc, #128]	; (24f54 <flash_sync+0x14c>)
   24ed4:	f362 0307 	bfi	r3, r2, #0, #8
   24ed8:	4a1f      	ldr	r2, [pc, #124]	; (24f58 <flash_sync+0x150>)
   24eda:	1a12      	subs	r2, r2, r0
   24edc:	08d2      	lsrs	r2, r2, #3
   24ede:	f362 138f 	bfi	r3, r2, #6, #10
   24ee2:	4820      	ldr	r0, [pc, #128]	; (24f64 <flash_sync+0x15c>)
   24ee4:	4642      	mov	r2, r8
   24ee6:	f01b fdcd 	bl	40a84 <log_2>
	if (!flash_verify(ctx->flash_area, ctx->bytes_written, ctx->buf,
   24eea:	b32f      	cbz	r7, 24f38 <flash_sync+0x130>
		return -EIO;
   24eec:	f06f 0504 	mvn.w	r5, #4
   24ef0:	e7b6      	b.n	24e60 <flash_sync+0x58>
		if (memcmp(data, &temp, size)) {
   24ef2:	4632      	mov	r2, r6
   24ef4:	a903      	add	r1, sp, #12
   24ef6:	4648      	mov	r0, r9
   24ef8:	f01f ff9c 	bl	44e34 <memcmp>
   24efc:	b1c0      	cbz	r0, 24f30 <flash_sync+0x128>
			LOG_ERR("offset=0x%08lx VERIFY FAIL. "
   24efe:	4b14      	ldr	r3, [pc, #80]	; (24f50 <flash_sync+0x148>)
   24f00:	681b      	ldr	r3, [r3, #0]
   24f02:	075b      	lsls	r3, r3, #29
   24f04:	d0f1      	beq.n	24eea <flash_sync+0xe2>
   24f06:	2301      	movs	r3, #1
   24f08:	f04f 0200 	mov.w	r2, #0
   24f0c:	4911      	ldr	r1, [pc, #68]	; (24f54 <flash_sync+0x14c>)
   24f0e:	f363 0207 	bfi	r2, r3, #0, #8
   24f12:	4b11      	ldr	r3, [pc, #68]	; (24f58 <flash_sync+0x150>)
   24f14:	4814      	ldr	r0, [pc, #80]	; (24f68 <flash_sync+0x160>)
   24f16:	1a5b      	subs	r3, r3, r1
   24f18:	08db      	lsrs	r3, r3, #3
   24f1a:	f363 128f 	bfi	r2, r3, #6, #10
   24f1e:	f8ad 2000 	strh.w	r2, [sp]
   24f22:	f899 3000 	ldrb.w	r3, [r9]
   24f26:	9a03      	ldr	r2, [sp, #12]
   24f28:	4641      	mov	r1, r8
   24f2a:	f01b fdc3 	bl	40ab4 <log_3>
   24f2e:	e7dc      	b.n	24eea <flash_sync+0xe2>
	while (len) {
   24f30:	1bbf      	subs	r7, r7, r6
		offset += size;
   24f32:	44b0      	add	r8, r6
		data += size;
   24f34:	44b1      	add	r9, r6
	while (len) {
   24f36:	d1b9      	bne.n	24eac <flash_sync+0xa4>
	ctx->bytes_written += ctx->buf_bytes;
   24f38:	f8b4 2208 	ldrh.w	r2, [r4, #520]	; 0x208
   24f3c:	f8d4 3204 	ldr.w	r3, [r4, #516]	; 0x204
   24f40:	4413      	add	r3, r2
   24f42:	f8c4 3204 	str.w	r3, [r4, #516]	; 0x204
	ctx->buf_bytes = 0U;
   24f46:	2300      	movs	r3, #0
   24f48:	f8a4 3208 	strh.w	r3, [r4, #520]	; 0x208
	return rc;
   24f4c:	e788      	b.n	24e60 <flash_sync+0x58>
   24f4e:	bf00      	nop
   24f50:	20032ad4 	.word	0x20032ad4
   24f54:	00045f08 	.word	0x00045f08
   24f58:	00045fa8 	.word	0x00045fa8
   24f5c:	00049337 	.word	0x00049337
   24f60:	00049367 	.word	0x00049367
   24f64:	0004938b 	.word	0x0004938b
   24f68:	000493ae 	.word	0x000493ae

00024f6c <coap_append_option_int>:
	return 0;
}

int coap_append_option_int(struct coap_packet *cpkt, u16_t code,
			   unsigned int val)
{
   24f6c:	b573      	push	{r0, r1, r4, r5, r6, lr}
	u8_t data[4], len;

	if (val == 0U) {
   24f6e:	b93a      	cbnz	r2, 24f80 <coap_append_option_int+0x14>
		data[0] = 0U;
		len = 0U;
   24f70:	4613      	mov	r3, r2
		data[0] = 0U;
   24f72:	f88d 2004 	strb.w	r2, [sp, #4]
	} else {
		sys_put_be32(val, data);
		len = 4U;
	}

	return coap_packet_append_option(cpkt, code, data, len);
   24f76:	aa01      	add	r2, sp, #4
   24f78:	f01d f934 	bl	421e4 <coap_packet_append_option>
}
   24f7c:	b002      	add	sp, #8
   24f7e:	bd70      	pop	{r4, r5, r6, pc}
	} else if (val < 0xFF) {
   24f80:	2afe      	cmp	r2, #254	; 0xfe
   24f82:	b2d3      	uxtb	r3, r2
   24f84:	d803      	bhi.n	24f8e <coap_append_option_int+0x22>
		data[0] = (u8_t) val;
   24f86:	f88d 3004 	strb.w	r3, [sp, #4]
		len = 1U;
   24f8a:	2301      	movs	r3, #1
   24f8c:	e7f3      	b.n	24f76 <coap_append_option_int+0xa>
	} else if (val < 0xFFFF) {
   24f8e:	f64f 74fe 	movw	r4, #65534	; 0xfffe
   24f92:	42a2      	cmp	r2, r4
   24f94:	f3c2 2507 	ubfx	r5, r2, #8, #8
   24f98:	d804      	bhi.n	24fa4 <coap_append_option_int+0x38>
 *  @param val 16-bit integer in host endianness.
 *  @param dst Destination memory address to store the result.
 */
static inline void sys_put_be16(u16_t val, u8_t dst[2])
{
	dst[0] = val >> 8;
   24f9a:	ba52      	rev16	r2, r2
   24f9c:	f8ad 2004 	strh.w	r2, [sp, #4]
		len = 2U;
   24fa0:	2302      	movs	r3, #2
   24fa2:	e7e8      	b.n	24f76 <coap_append_option_int+0xa>
	} else if (val < 0xFFFFFF) {
   24fa4:	4e08      	ldr	r6, [pc, #32]	; (24fc8 <coap_append_option_int+0x5c>)
   24fa6:	f3c2 4407 	ubfx	r4, r2, #16, #8
   24faa:	42b2      	cmp	r2, r6
   24fac:	bf8f      	iteee	hi
   24fae:	ba12      	revhi	r2, r2
	dst[1] = val;
   24fb0:	f88d 3006 	strbls.w	r3, [sp, #6]
	dst[0] = val >> 8;
   24fb4:	f88d 5005 	strbls.w	r5, [sp, #5]
		data[0] = val >> 16;
   24fb8:	f88d 4004 	strbls.w	r4, [sp, #4]
		len = 3U;
   24fbc:	bf92      	itee	ls
   24fbe:	2303      	movls	r3, #3
   24fc0:	9201      	strhi	r2, [sp, #4]
		len = 4U;
   24fc2:	2304      	movhi	r3, #4
   24fc4:	e7d7      	b.n	24f76 <coap_append_option_int+0xa>
   24fc6:	bf00      	nop
   24fc8:	00fffffe 	.word	0x00fffffe

00024fcc <coap_next_token>:
{
	return append(cpkt, payload, payload_len) ? 0 : -EINVAL;
}

u8_t *coap_next_token(void)
{
   24fcc:	b510      	push	{r4, lr}
	static u32_t rand[2];

	rand[0] = sys_rand32_get();
   24fce:	f00a fba3 	bl	2f718 <sys_rand32_get>
   24fd2:	4c03      	ldr	r4, [pc, #12]	; (24fe0 <coap_next_token+0x14>)
   24fd4:	6020      	str	r0, [r4, #0]
	rand[1] = sys_rand32_get();
   24fd6:	f00a fb9f 	bl	2f718 <sys_rand32_get>
   24fda:	6060      	str	r0, [r4, #4]

	return (u8_t *) rand;
}
   24fdc:	4620      	mov	r0, r4
   24fde:	bd10      	pop	{r4, pc}
   24fe0:	20022374 	.word	0x20022374

00024fe4 <coap_pending_cycle>:
 */
#define INIT_ACK_TIMEOUT	CONFIG_COAP_INIT_ACK_TIMEOUT_MS

static s32_t next_timeout(s32_t previous)
{
	switch (previous) {
   24fe4:	f644 6320 	movw	r3, #20000	; 0x4e20
	return INIT_ACK_TIMEOUT;
}

bool coap_pending_cycle(struct coap_pending *pending)
{
	s32_t old = pending->timeout;
   24fe8:	6882      	ldr	r2, [r0, #8]
	switch (previous) {
   24fea:	429a      	cmp	r2, r3
   24fec:	d014      	beq.n	25018 <coap_pending_cycle+0x34>
   24fee:	dc08      	bgt.n	25002 <coap_pending_cycle+0x1e>
   24ff0:	f242 7310 	movw	r3, #10000	; 0x2710
   24ff4:	429a      	cmp	r2, r3
   24ff6:	d00f      	beq.n	25018 <coap_pending_cycle+0x34>

	pending->timeout = next_timeout(pending->timeout);
   24ff8:	6083      	str	r3, [r0, #8]

	return (old != pending->timeout);
}
   24ffa:	1ad0      	subs	r0, r2, r3
   24ffc:	bf18      	it	ne
   24ffe:	2001      	movne	r0, #1
   25000:	4770      	bx	lr
	switch (previous) {
   25002:	f649 4340 	movw	r3, #40000	; 0x9c40
   25006:	429a      	cmp	r2, r3
   25008:	d006      	beq.n	25018 <coap_pending_cycle+0x34>
	return INIT_ACK_TIMEOUT;
   2500a:	f242 7110 	movw	r1, #10000	; 0x2710
	switch (previous) {
   2500e:	4b03      	ldr	r3, [pc, #12]	; (2501c <coap_pending_cycle+0x38>)
	return INIT_ACK_TIMEOUT;
   25010:	429a      	cmp	r2, r3
   25012:	bf18      	it	ne
   25014:	460b      	movne	r3, r1
   25016:	e7ef      	b.n	24ff8 <coap_pending_cycle+0x14>
		return previous << 1;
   25018:	0053      	lsls	r3, r2, #1
   2501a:	e7ed      	b.n	24ff8 <coap_pending_cycle+0x14>
   2501c:	00013880 	.word	0x00013880

00025020 <net_coap_init>:
 * use and should therefore not be exposed to applications.
 *
 * @return N/A
 */
void net_coap_init(void)
{
   25020:	b508      	push	{r3, lr}
	/* Initialize message_id to a random number */
	message_id = (u16_t)sys_rand32_get();
   25022:	f00a fb79 	bl	2f718 <sys_rand32_get>
   25026:	4b01      	ldr	r3, [pc, #4]	; (2502c <net_coap_init+0xc>)
   25028:	8018      	strh	r0, [r3, #0]
}
   2502a:	bd08      	pop	{r3, pc}
   2502c:	20029836 	.word	0x20029836

00025030 <coap_next_id>:

u16_t coap_next_id(void)
{
	return message_id++;
   25030:	4b02      	ldr	r3, [pc, #8]	; (2503c <coap_next_id+0xc>)
   25032:	8818      	ldrh	r0, [r3, #0]
   25034:	1c42      	adds	r2, r0, #1
   25036:	801a      	strh	r2, [r3, #0]
}
   25038:	4770      	bx	lr
   2503a:	bf00      	nop
   2503c:	20029836 	.word	0x20029836

00025040 <socket_offload_register>:

/* Only one provider may register socket operations upon boot. */
const struct socket_offload *socket_ops;

void socket_offload_register(const struct socket_offload *ops)
{
   25040:	b538      	push	{r3, r4, r5, lr}
	__ASSERT_NO_MSG(ops);
   25042:	4605      	mov	r5, r0
   25044:	b948      	cbnz	r0, 2505a <socket_offload_register+0x1a>
   25046:	490c      	ldr	r1, [pc, #48]	; (25078 <socket_offload_register+0x38>)
   25048:	480c      	ldr	r0, [pc, #48]	; (2507c <socket_offload_register+0x3c>)
   2504a:	2311      	movs	r3, #17
   2504c:	4a0c      	ldr	r2, [pc, #48]	; (25080 <socket_offload_register+0x40>)
   2504e:	f01b fad8 	bl	40602 <printk>
   25052:	2111      	movs	r1, #17
   25054:	480a      	ldr	r0, [pc, #40]	; (25080 <socket_offload_register+0x40>)
   25056:	f01b fb97 	bl	40788 <assert_post_action>
	__ASSERT_NO_MSG(socket_ops == NULL);
   2505a:	4c0a      	ldr	r4, [pc, #40]	; (25084 <socket_offload_register+0x44>)
   2505c:	6822      	ldr	r2, [r4, #0]
   2505e:	b14a      	cbz	r2, 25074 <socket_offload_register+0x34>
   25060:	4909      	ldr	r1, [pc, #36]	; (25088 <socket_offload_register+0x48>)
   25062:	4806      	ldr	r0, [pc, #24]	; (2507c <socket_offload_register+0x3c>)
   25064:	2312      	movs	r3, #18
   25066:	4a06      	ldr	r2, [pc, #24]	; (25080 <socket_offload_register+0x40>)
   25068:	f01b facb 	bl	40602 <printk>
   2506c:	2112      	movs	r1, #18
   2506e:	4804      	ldr	r0, [pc, #16]	; (25080 <socket_offload_register+0x40>)
   25070:	f01b fb8a 	bl	40788 <assert_post_action>

	socket_ops = ops;
   25074:	6025      	str	r5, [r4, #0]
}
   25076:	bd38      	pop	{r3, r4, r5, pc}
   25078:	0004b747 	.word	0x0004b747
   2507c:	0004764f 	.word	0x0004764f
   25080:	000493fc 	.word	0x000493fc
   25084:	2002237c 	.word	0x2002237c
   25088:	00049437 	.word	0x00049437

0002508c <credentials_init>:

/* A mutex for protecting access to the credentials array. */
static struct k_mutex credential_lock;

static int credentials_init(struct device *unused)
{
   2508c:	b508      	push	{r3, lr}
	(void)memset(credentials, 0, sizeof(credentials));
   2508e:	2240      	movs	r2, #64	; 0x40
   25090:	2100      	movs	r1, #0
   25092:	4804      	ldr	r0, [pc, #16]	; (250a4 <credentials_init+0x18>)
   25094:	f01f ff16 	bl	44ec4 <memset>
	return z_impl_k_mutex_init(mutex);
   25098:	4803      	ldr	r0, [pc, #12]	; (250a8 <credentials_init+0x1c>)
   2509a:	f01f fd1a 	bl	44ad2 <z_impl_k_mutex_init>

	k_mutex_init(&credential_lock);

	return 0;
}
   2509e:	2000      	movs	r0, #0
   250a0:	bd08      	pop	{r3, pc}
   250a2:	bf00      	nop
   250a4:	20022394 	.word	0x20022394
   250a8:	20022380 	.word	0x20022380

000250ac <credential_get>:
struct tls_credential *credential_get(sec_tag_t tag,
				      enum tls_credential_type type)
{
	int i;

	for (i = 0; i < ARRAY_SIZE(credentials); i++) {
   250ac:	4b09      	ldr	r3, [pc, #36]	; (250d4 <credential_get+0x28>)
{
   250ae:	b530      	push	{r4, r5, lr}
   250b0:	461a      	mov	r2, r3
	for (i = 0; i < ARRAY_SIZE(credentials); i++) {
   250b2:	2400      	movs	r4, #0
		if (credentials[i].type == type && credentials[i].tag == tag) {
   250b4:	781d      	ldrb	r5, [r3, #0]
   250b6:	428d      	cmp	r5, r1
   250b8:	d105      	bne.n	250c6 <credential_get+0x1a>
   250ba:	685d      	ldr	r5, [r3, #4]
   250bc:	4285      	cmp	r5, r0
   250be:	d102      	bne.n	250c6 <credential_get+0x1a>
			return &credentials[i];
   250c0:	eb02 1004 	add.w	r0, r2, r4, lsl #4
		}
	}

	return NULL;
}
   250c4:	bd30      	pop	{r4, r5, pc}
	for (i = 0; i < ARRAY_SIZE(credentials); i++) {
   250c6:	3401      	adds	r4, #1
   250c8:	2c04      	cmp	r4, #4
   250ca:	f103 0310 	add.w	r3, r3, #16
   250ce:	d1f1      	bne.n	250b4 <credential_get+0x8>
	return NULL;
   250d0:	2000      	movs	r0, #0
   250d2:	e7f7      	b.n	250c4 <credential_get+0x18>
   250d4:	20022394 	.word	0x20022394

000250d8 <credentials_lock>:
	return z_impl_k_mutex_lock(mutex, timeout);
   250d8:	f04f 31ff 	mov.w	r1, #4294967295
   250dc:	4801      	ldr	r0, [pc, #4]	; (250e4 <credentials_lock+0xc>)
   250de:	f016 bd23 	b.w	3bb28 <z_impl_k_mutex_lock>
   250e2:	bf00      	nop
   250e4:	20022380 	.word	0x20022380

000250e8 <credentials_unlock>:
	return z_impl_k_mutex_unlock(mutex);
   250e8:	4801      	ldr	r0, [pc, #4]	; (250f0 <credentials_unlock+0x8>)
   250ea:	f016 bdfb 	b.w	3bce4 <z_impl_k_mutex_unlock>
   250ee:	bf00      	nop
   250f0:	20022380 	.word	0x20022380

000250f4 <tls_credential_add>:
	k_mutex_unlock(&credential_lock);
}

int tls_credential_add(sec_tag_t tag, enum tls_credential_type type,
		       const void *cred, size_t credlen)
{
   250f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   250f8:	4606      	mov	r6, r0
   250fa:	460f      	mov	r7, r1
   250fc:	4690      	mov	r8, r2
   250fe:	4699      	mov	r9, r3
	struct tls_credential *credential;
	int ret = 0;

	credentials_lock();
   25100:	f7ff ffea 	bl	250d8 <credentials_lock>

	credential = credential_get(tag, type);
   25104:	4639      	mov	r1, r7
   25106:	4630      	mov	r0, r6
   25108:	f7ff ffd0 	bl	250ac <credential_get>
	if (credential != NULL) {
   2510c:	b998      	cbnz	r0, 25136 <tls_credential_add+0x42>
		if (credentials[i].type == TLS_CREDENTIAL_NONE) {
   2510e:	490b      	ldr	r1, [pc, #44]	; (2513c <tls_credential_add+0x48>)
   25110:	0105      	lsls	r5, r0, #4
   25112:	5c6c      	ldrb	r4, [r5, r1]
   25114:	b94c      	cbnz	r4, 2512a <tls_credential_add+0x36>
	if (credential == NULL) {
		ret = -ENOMEM;
		goto exit;
	}

	credential->tag = tag;
   25116:	1948      	adds	r0, r1, r5
	credential->type = type;
	credential->buf = cred;
	credential->len = credlen;
   25118:	e9c0 8902 	strd	r8, r9, [r0, #8]
	credential->tag = tag;
   2511c:	6046      	str	r6, [r0, #4]
	credential->type = type;
   2511e:	554f      	strb	r7, [r1, r5]

exit:
	credentials_unlock();
   25120:	f7ff ffe2 	bl	250e8 <credentials_unlock>

	return ret;
}
   25124:	4620      	mov	r0, r4
   25126:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	for (i = 0; i < ARRAY_SIZE(credentials); i++) {
   2512a:	3001      	adds	r0, #1
   2512c:	2804      	cmp	r0, #4
   2512e:	d1ef      	bne.n	25110 <tls_credential_add+0x1c>
		ret = -ENOMEM;
   25130:	f06f 040b 	mvn.w	r4, #11
   25134:	e7f4      	b.n	25120 <tls_credential_add+0x2c>
		ret = -EEXIST;
   25136:	f06f 0410 	mvn.w	r4, #16
   2513a:	e7f1      	b.n	25120 <tls_credential_add+0x2c>
   2513c:	20022394 	.word	0x20022394

00025140 <get_flash_area_from_id>:
extern const struct flash_area *flash_map;
extern const int flash_map_entries;

static struct flash_area const *get_flash_area_from_id(int idx)
{
	for (int i = 0; i < flash_map_entries; i++) {
   25140:	4b08      	ldr	r3, [pc, #32]	; (25164 <get_flash_area_from_id+0x24>)
{
   25142:	b530      	push	{r4, r5, lr}
	for (int i = 0; i < flash_map_entries; i++) {
   25144:	681d      	ldr	r5, [r3, #0]
		if (flash_map[i].fa_id == idx) {
   25146:	4b08      	ldr	r3, [pc, #32]	; (25168 <get_flash_area_from_id+0x28>)
   25148:	6819      	ldr	r1, [r3, #0]
	for (int i = 0; i < flash_map_entries; i++) {
   2514a:	2300      	movs	r3, #0
   2514c:	429d      	cmp	r5, r3
   2514e:	dc02      	bgt.n	25156 <get_flash_area_from_id+0x16>
			return &flash_map[i];
		}
	}

	return NULL;
   25150:	2200      	movs	r2, #0
}
   25152:	4610      	mov	r0, r2
   25154:	bd30      	pop	{r4, r5, pc}
		if (flash_map[i].fa_id == idx) {
   25156:	011c      	lsls	r4, r3, #4
   25158:	190a      	adds	r2, r1, r4
   2515a:	5d0c      	ldrb	r4, [r1, r4]
   2515c:	4284      	cmp	r4, r0
   2515e:	d0f8      	beq.n	25152 <get_flash_area_from_id+0x12>
	for (int i = 0; i < flash_map_entries; i++) {
   25160:	3301      	adds	r3, #1
   25162:	e7f3      	b.n	2514c <get_flash_area_from_id+0xc>
   25164:	00046768 	.word	0x00046768
   25168:	200323c0 	.word	0x200323c0

0002516c <flash_area_open>:

int flash_area_open(u8_t id, const struct flash_area **fap)
{
	const struct flash_area *area;

	if (flash_map == NULL) {
   2516c:	4b08      	ldr	r3, [pc, #32]	; (25190 <flash_area_open+0x24>)
{
   2516e:	b510      	push	{r4, lr}
	if (flash_map == NULL) {
   25170:	681b      	ldr	r3, [r3, #0]
{
   25172:	460c      	mov	r4, r1
	if (flash_map == NULL) {
   25174:	b12b      	cbz	r3, 25182 <flash_area_open+0x16>
		return -EACCES;
	}

	area = get_flash_area_from_id(id);
   25176:	f7ff ffe3 	bl	25140 <get_flash_area_from_id>
	if (area == NULL) {
   2517a:	b128      	cbz	r0, 25188 <flash_area_open+0x1c>
		return -ENOENT;
	}

	*fap = area;
   2517c:	6020      	str	r0, [r4, #0]
	return 0;
   2517e:	2000      	movs	r0, #0
}
   25180:	bd10      	pop	{r4, pc}
		return -EACCES;
   25182:	f06f 000c 	mvn.w	r0, #12
   25186:	e7fb      	b.n	25180 <flash_area_open+0x14>
		return -ENOENT;
   25188:	f06f 0001 	mvn.w	r0, #1
   2518c:	e7f8      	b.n	25180 <flash_area_open+0x14>
   2518e:	bf00      	nop
   25190:	200323c0 	.word	0x200323c0

00025194 <flash_area_get_sectors>:

	return true;
}

int flash_area_get_sectors(int idx, u32_t *cnt, struct flash_sector *ret)
{
   25194:	b530      	push	{r4, r5, lr}
   25196:	b089      	sub	sp, #36	; 0x24
   25198:	460c      	mov	r4, r1
   2519a:	4615      	mov	r5, r2
	cb_data->area_idx = idx;
   2519c:	9001      	str	r0, [sp, #4]
	fa = get_flash_area_from_id(idx);
   2519e:	f7ff ffcf 	bl	25140 <get_flash_area_from_id>
	if (fa == NULL) {
   251a2:	b1b8      	cbz	r0, 251d4 <flash_area_get_sectors+0x40>
	cb_data->area_off = fa->fa_off;
   251a4:	6843      	ldr	r3, [r0, #4]
	cb_data->ret_len = *cnt;
   251a6:	6822      	ldr	r2, [r4, #0]
	cb_data->area_off = fa->fa_off;
   251a8:	9302      	str	r3, [sp, #8]
	cb_data->area_len = fa->fa_size;
   251aa:	6883      	ldr	r3, [r0, #8]
	flash_dev = device_get_binding(fa->fa_dev_name);
   251ac:	68c0      	ldr	r0, [r0, #12]
	cb_data->ret = ret;
   251ae:	e9cd 3503 	strd	r3, r5, [sp, #12]
	cb_data->ret_idx = 0U;
   251b2:	2300      	movs	r3, #0
   251b4:	9305      	str	r3, [sp, #20]
	cb_data->status = 0;
   251b6:	e9cd 2306 	strd	r2, r3, [sp, #24]
   251ba:	f015 ff65 	bl	3b088 <z_impl_device_get_binding>
	if (flash_dev == NULL) {
   251be:	b160      	cbz	r0, 251da <flash_area_get_sectors+0x46>
	flash_page_foreach(flash_dev, cb, cb_data);
   251c0:	aa01      	add	r2, sp, #4
   251c2:	4907      	ldr	r1, [pc, #28]	; (251e0 <flash_area_get_sectors+0x4c>)
   251c4:	f01e fd95 	bl	43cf2 <flash_page_foreach>
	if (cb_data->status == 0) {
   251c8:	9807      	ldr	r0, [sp, #28]
   251ca:	b908      	cbnz	r0, 251d0 <flash_area_get_sectors+0x3c>
		*cnt = cb_data->ret_idx;
   251cc:	9b05      	ldr	r3, [sp, #20]
   251ce:	6023      	str	r3, [r4, #0]
	struct layout_data data;

	return flash_area_layout(idx, cnt, ret, get_sectors_cb, &data);
}
   251d0:	b009      	add	sp, #36	; 0x24
   251d2:	bd30      	pop	{r4, r5, pc}
		return -EINVAL;
   251d4:	f06f 0015 	mvn.w	r0, #21
   251d8:	e7fa      	b.n	251d0 <flash_area_get_sectors+0x3c>
		return -ENODEV;
   251da:	f06f 0012 	mvn.w	r0, #18
	return flash_area_layout(idx, cnt, ret, get_sectors_cb, &data);
   251de:	e7f7      	b.n	251d0 <flash_area_get_sectors+0x3c>
   251e0:	00042889 	.word	0x00042889

000251e4 <settings_save_one>:
int settings_save_one(const char *name, const void *value, size_t val_len)
{
	int rc;
	struct settings_store *cs;

	cs = settings_save_dst;
   251e4:	4b0e      	ldr	r3, [pc, #56]	; (25220 <settings_save_one+0x3c>)
{
   251e6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	cs = settings_save_dst;
   251ea:	681c      	ldr	r4, [r3, #0]
{
   251ec:	4606      	mov	r6, r0
   251ee:	460f      	mov	r7, r1
   251f0:	4690      	mov	r8, r2
	if (!cs) {
   251f2:	b194      	cbz	r4, 2521a <settings_save_one+0x36>
	return z_impl_k_mutex_lock(mutex, timeout);
   251f4:	f04f 31ff 	mov.w	r1, #4294967295
   251f8:	480a      	ldr	r0, [pc, #40]	; (25224 <settings_save_one+0x40>)
   251fa:	f016 fc95 	bl	3bb28 <z_impl_k_mutex_lock>
		return -ENOENT;
	}

	k_mutex_lock(&settings_lock, K_FOREVER);

	rc = cs->cs_itf->csi_save(cs, name, (char *)value, val_len);
   251fe:	6863      	ldr	r3, [r4, #4]
   25200:	463a      	mov	r2, r7
   25202:	689d      	ldr	r5, [r3, #8]
   25204:	4631      	mov	r1, r6
   25206:	4643      	mov	r3, r8
   25208:	4620      	mov	r0, r4
   2520a:	47a8      	blx	r5
   2520c:	4604      	mov	r4, r0
	return z_impl_k_mutex_unlock(mutex);
   2520e:	4805      	ldr	r0, [pc, #20]	; (25224 <settings_save_one+0x40>)
   25210:	f016 fd68 	bl	3bce4 <z_impl_k_mutex_unlock>

	k_mutex_unlock(&settings_lock);

	return rc;
}
   25214:	4620      	mov	r0, r4
   25216:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -ENOENT;
   2521a:	f06f 0401 	mvn.w	r4, #1
   2521e:	e7f9      	b.n	25214 <settings_save_one+0x30>
   25220:	200223dc 	.word	0x200223dc
   25224:	20032c0c 	.word	0x20032c0c

00025228 <settings_src_register>:
	SYS_SLIST_FOR_EACH_NODE(&settings_load_srcs, cur) {
   25228:	4b0e      	ldr	r3, [pc, #56]	; (25264 <settings_src_register+0x3c>)
{
   2522a:	b510      	push	{r4, lr}
	SYS_SLIST_FOR_EACH_NODE(&settings_load_srcs, cur) {
   2522c:	681c      	ldr	r4, [r3, #0]
	prev = NULL;
   2522e:	2100      	movs	r1, #0
	SYS_SLIST_FOR_EACH_NODE(&settings_load_srcs, cur) {
   25230:	4622      	mov	r2, r4
   25232:	b932      	cbnz	r2, 25242 <settings_src_register+0x1a>
 */
static inline void sys_slist_insert(sys_slist_t *list,
				    sys_snode_t *prev,
				    sys_snode_t *node);

Z_GENLIST_INSERT(slist, snode)
   25234:	b941      	cbnz	r1, 25248 <settings_src_register+0x20>
	parent->next = child;
   25236:	6004      	str	r4, [r0, #0]
Z_GENLIST_PREPEND(slist, snode)
   25238:	685a      	ldr	r2, [r3, #4]
	list->head = node;
   2523a:	6018      	str	r0, [r3, #0]
Z_GENLIST_PREPEND(slist, snode)
   2523c:	b95a      	cbnz	r2, 25256 <settings_src_register+0x2e>
	list->tail = node;
   2523e:	6058      	str	r0, [r3, #4]
   25240:	e009      	b.n	25256 <settings_src_register+0x2e>
   25242:	4611      	mov	r1, r2
   25244:	6812      	ldr	r2, [r2, #0]
   25246:	e7f4      	b.n	25232 <settings_src_register+0xa>
Z_GENLIST_INSERT(slist, snode)
   25248:	680c      	ldr	r4, [r1, #0]
   2524a:	b93c      	cbnz	r4, 2525c <settings_src_register+0x34>
	parent->next = child;
   2524c:	6002      	str	r2, [r0, #0]
Z_GENLIST_APPEND(slist, snode)
   2524e:	685a      	ldr	r2, [r3, #4]
   25250:	b912      	cbnz	r2, 25258 <settings_src_register+0x30>
	list->head = node;
   25252:	e9c3 0000 	strd	r0, r0, [r3]
}
   25256:	bd10      	pop	{r4, pc}
	parent->next = child;
   25258:	6010      	str	r0, [r2, #0]
   2525a:	e7f0      	b.n	2523e <settings_src_register+0x16>
   2525c:	6004      	str	r4, [r0, #0]
   2525e:	6008      	str	r0, [r1, #0]
   25260:	e7f9      	b.n	25256 <settings_src_register+0x2e>
   25262:	bf00      	nop
   25264:	200223d4 	.word	0x200223d4

00025268 <settings_dst_register>:
	settings_save_dst = cs;
   25268:	4b01      	ldr	r3, [pc, #4]	; (25270 <settings_dst_register+0x8>)
   2526a:	6018      	str	r0, [r3, #0]
}
   2526c:	4770      	bx	lr
   2526e:	bf00      	nop
   25270:	200223dc 	.word	0x200223dc

00025274 <settings_load_subtree>:
	const struct settings_load_arg arg = {
   25274:	2300      	movs	r3, #0
{
   25276:	b530      	push	{r4, r5, lr}
   25278:	b085      	sub	sp, #20
   2527a:	4605      	mov	r5, r0
	const struct settings_load_arg arg = {
   2527c:	e9cd 3302 	strd	r3, r3, [sp, #8]
   25280:	9001      	str	r0, [sp, #4]
	return z_impl_k_mutex_lock(mutex, timeout);
   25282:	f04f 31ff 	mov.w	r1, #4294967295
   25286:	480b      	ldr	r0, [pc, #44]	; (252b4 <settings_load_subtree+0x40>)
   25288:	f016 fc4e 	bl	3bb28 <z_impl_k_mutex_lock>
	SYS_SLIST_FOR_EACH_CONTAINER(&settings_load_srcs, cs, cs_next) {
   2528c:	4b0a      	ldr	r3, [pc, #40]	; (252b8 <settings_load_subtree+0x44>)
   2528e:	681c      	ldr	r4, [r3, #0]
   25290:	b134      	cbz	r4, 252a0 <settings_load_subtree+0x2c>
		cs->cs_itf->csi_load(cs, &arg);
   25292:	6863      	ldr	r3, [r4, #4]
   25294:	4620      	mov	r0, r4
   25296:	681b      	ldr	r3, [r3, #0]
   25298:	a901      	add	r1, sp, #4
   2529a:	4798      	blx	r3
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   2529c:	6824      	ldr	r4, [r4, #0]
	return node->next;
   2529e:	e7f7      	b.n	25290 <settings_load_subtree+0x1c>
	rc = settings_commit_subtree(subtree);
   252a0:	4628      	mov	r0, r5
   252a2:	f000 f925 	bl	254f0 <settings_commit_subtree>
   252a6:	4604      	mov	r4, r0
	return z_impl_k_mutex_unlock(mutex);
   252a8:	4802      	ldr	r0, [pc, #8]	; (252b4 <settings_load_subtree+0x40>)
   252aa:	f016 fd1b 	bl	3bce4 <z_impl_k_mutex_unlock>
}
   252ae:	4620      	mov	r0, r4
   252b0:	b005      	add	sp, #20
   252b2:	bd30      	pop	{r4, r5, pc}
   252b4:	20032c0c 	.word	0x20032c0c
   252b8:	200223d4 	.word	0x200223d4

000252bc <settings_store_init>:
	list->head = NULL;
   252bc:	2200      	movs	r2, #0
   252be:	4b02      	ldr	r3, [pc, #8]	; (252c8 <settings_store_init+0xc>)
	list->tail = NULL;
   252c0:	e9c3 2200 	strd	r2, r2, [r3]
}

void settings_store_init(void)
{
	sys_slist_init(&settings_load_srcs);
}
   252c4:	4770      	bx	lr
   252c6:	bf00      	nop
   252c8:	200223d4 	.word	0x200223d4

000252cc <settings_init>:
	list->head = NULL;
   252cc:	2200      	movs	r2, #0
   252ce:	4b02      	ldr	r3, [pc, #8]	; (252d8 <settings_init+0xc>)
	list->tail = NULL;
   252d0:	e9c3 2200 	strd	r2, r2, [r3]
void settings_init(void)
{
#if defined(CONFIG_SETTINGS_DYNAMIC_HANDLERS)
	sys_slist_init(&settings_handlers);
#endif /* CONFIG_SETTINGS_DYNAMIC_HANDLERS */
	settings_store_init();
   252d4:	f7ff bff2 	b.w	252bc <settings_store_init>
   252d8:	200223e0 	.word	0x200223e0

000252dc <settings_register>:
}

#if defined(CONFIG_SETTINGS_DYNAMIC_HANDLERS)
int settings_register(struct settings_handler *handler)
{
   252dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   252e0:	4606      	mov	r6, r0
	int rc;

	k_mutex_lock(&settings_lock, K_FOREVER);

	Z_STRUCT_SECTION_FOREACH(settings_handler_static, ch) {
   252e2:	4d22      	ldr	r5, [pc, #136]	; (2536c <settings_register+0x90>)
	return z_impl_k_mutex_lock(mutex, timeout);
   252e4:	f04f 31ff 	mov.w	r1, #4294967295
   252e8:	4821      	ldr	r0, [pc, #132]	; (25370 <settings_register+0x94>)
   252ea:	f016 fc1d 	bl	3bb28 <z_impl_k_mutex_lock>
   252ee:	46a8      	mov	r8, r5
   252f0:	4c20      	ldr	r4, [pc, #128]	; (25374 <settings_register+0x98>)
   252f2:	4f21      	ldr	r7, [pc, #132]	; (25378 <settings_register+0x9c>)
   252f4:	42ac      	cmp	r4, r5
   252f6:	d90c      	bls.n	25312 <settings_register+0x36>
   252f8:	4920      	ldr	r1, [pc, #128]	; (2537c <settings_register+0xa0>)
   252fa:	232d      	movs	r3, #45	; 0x2d
   252fc:	463a      	mov	r2, r7
   252fe:	4820      	ldr	r0, [pc, #128]	; (25380 <settings_register+0xa4>)
   25300:	f01b f97f 	bl	40602 <printk>
   25304:	481f      	ldr	r0, [pc, #124]	; (25384 <settings_register+0xa8>)
   25306:	f01b f97c 	bl	40602 <printk>
   2530a:	212d      	movs	r1, #45	; 0x2d
   2530c:	4638      	mov	r0, r7
   2530e:	f01b fa3b 	bl	40788 <assert_post_action>
   25312:	4544      	cmp	r4, r8
   25314:	d30c      	bcc.n	25330 <settings_register+0x54>
			goto end;
		}
	}

	struct settings_handler *ch;
	SYS_SLIST_FOR_EACH_CONTAINER(&settings_handlers, ch, node) {
   25316:	4d1c      	ldr	r5, [pc, #112]	; (25388 <settings_register+0xac>)
   25318:	682c      	ldr	r4, [r5, #0]
   2531a:	b9c4      	cbnz	r4, 2534e <settings_register+0x72>
	parent->next = child;
   2531c:	2400      	movs	r4, #0
Z_GENLIST_APPEND(slist, snode)
   2531e:	686a      	ldr	r2, [r5, #4]
		if (strcmp(handler->name, ch->name) == 0) {
			rc = -EEXIST;
			goto end;
		}
	}
	sys_slist_append(&settings_handlers, &handler->node);
   25320:	f106 0314 	add.w	r3, r6, #20
	parent->next = child;
   25324:	6174      	str	r4, [r6, #20]
Z_GENLIST_APPEND(slist, snode)
   25326:	b9ea      	cbnz	r2, 25364 <settings_register+0x88>
	list->head = node;
   25328:	e9c5 3300 	strd	r3, r3, [r5]
	rc = 0;
   2532c:	4614      	mov	r4, r2
   2532e:	e006      	b.n	2533e <settings_register+0x62>
		if (strcmp(handler->name, ch->name) == 0) {
   25330:	6821      	ldr	r1, [r4, #0]
   25332:	6830      	ldr	r0, [r6, #0]
   25334:	f7f7 fee6 	bl	1d104 <strcmp>
   25338:	b938      	cbnz	r0, 2534a <settings_register+0x6e>
			rc = -EEXIST;
   2533a:	f06f 0410 	mvn.w	r4, #16
	return z_impl_k_mutex_unlock(mutex);
   2533e:	480c      	ldr	r0, [pc, #48]	; (25370 <settings_register+0x94>)
   25340:	f016 fcd0 	bl	3bce4 <z_impl_k_mutex_unlock>
end:
	k_mutex_unlock(&settings_lock);
	return rc;
}
   25344:	4620      	mov	r0, r4
   25346:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	Z_STRUCT_SECTION_FOREACH(settings_handler_static, ch) {
   2534a:	3414      	adds	r4, #20
   2534c:	e7d2      	b.n	252f4 <settings_register+0x18>
	SYS_SLIST_FOR_EACH_CONTAINER(&settings_handlers, ch, node) {
   2534e:	3c14      	subs	r4, #20
   25350:	2c00      	cmp	r4, #0
   25352:	d0e3      	beq.n	2531c <settings_register+0x40>
		if (strcmp(handler->name, ch->name) == 0) {
   25354:	6821      	ldr	r1, [r4, #0]
   25356:	6830      	ldr	r0, [r6, #0]
   25358:	f7f7 fed4 	bl	1d104 <strcmp>
   2535c:	2800      	cmp	r0, #0
   2535e:	d0ec      	beq.n	2533a <settings_register+0x5e>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   25360:	6964      	ldr	r4, [r4, #20]
	return node->next;
   25362:	e7da      	b.n	2531a <settings_register+0x3e>
	parent->next = child;
   25364:	6013      	str	r3, [r2, #0]
	list->tail = node;
   25366:	606b      	str	r3, [r5, #4]
   25368:	e7e9      	b.n	2533e <settings_register+0x62>
   2536a:	bf00      	nop
   2536c:	00045f08 	.word	0x00045f08
   25370:	20032c0c 	.word	0x20032c0c
   25374:	00045f08 	.word	0x00045f08
   25378:	00049489 	.word	0x00049489
   2537c:	000494bb 	.word	0x000494bb
   25380:	0004764f 	.word	0x0004764f
   25384:	000494e3 	.word	0x000494e3
   25388:	200223e0 	.word	0x200223e0

0002538c <settings_parse_and_lookup>:
	return rc;
}

struct settings_handler_static *settings_parse_and_lookup(const char *name,
							const char **next)
{
   2538c:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   25390:	4607      	mov	r7, r0
	struct settings_handler_static *bestmatch;
	const char *tmpnext;

	bestmatch = NULL;
	if (next) {
   25392:	460e      	mov	r6, r1
   25394:	b109      	cbz	r1, 2539a <settings_parse_and_lookup+0xe>
		*next = NULL;
   25396:	2300      	movs	r3, #0
   25398:	600b      	str	r3, [r1, #0]
	}

	Z_STRUCT_SECTION_FOREACH(settings_handler_static, ch) {
   2539a:	f8df 80a8 	ldr.w	r8, [pc, #168]	; 25444 <settings_parse_and_lookup+0xb8>
   2539e:	2500      	movs	r5, #0
   253a0:	46c2      	mov	sl, r8
   253a2:	4c23      	ldr	r4, [pc, #140]	; (25430 <settings_parse_and_lookup+0xa4>)
   253a4:	f8df 90a0 	ldr.w	r9, [pc, #160]	; 25448 <settings_parse_and_lookup+0xbc>
   253a8:	4544      	cmp	r4, r8
   253aa:	d90c      	bls.n	253c6 <settings_parse_and_lookup+0x3a>
   253ac:	4921      	ldr	r1, [pc, #132]	; (25434 <settings_parse_and_lookup+0xa8>)
   253ae:	2395      	movs	r3, #149	; 0x95
   253b0:	464a      	mov	r2, r9
   253b2:	4821      	ldr	r0, [pc, #132]	; (25438 <settings_parse_and_lookup+0xac>)
   253b4:	f01b f925 	bl	40602 <printk>
   253b8:	4820      	ldr	r0, [pc, #128]	; (2543c <settings_parse_and_lookup+0xb0>)
   253ba:	f01b f922 	bl	40602 <printk>
   253be:	2195      	movs	r1, #149	; 0x95
   253c0:	4648      	mov	r0, r9
   253c2:	f01b f9e1 	bl	40788 <assert_post_action>
   253c6:	4554      	cmp	r4, sl
   253c8:	d308      	bcc.n	253dc <settings_parse_and_lookup+0x50>
	}

#if defined(CONFIG_SETTINGS_DYNAMIC_HANDLERS)
	struct settings_handler *ch;

	SYS_SLIST_FOR_EACH_CONTAINER(&settings_handlers, ch, node) {
   253ca:	4b1d      	ldr	r3, [pc, #116]	; (25440 <settings_parse_and_lookup+0xb4>)
   253cc:	681c      	ldr	r4, [r3, #0]
   253ce:	b10c      	cbz	r4, 253d4 <settings_parse_and_lookup+0x48>
   253d0:	3c14      	subs	r4, #20
   253d2:	b9c4      	cbnz	r4, 25406 <settings_parse_and_lookup+0x7a>
			}
		}
	}
#endif /* CONFIG_SETTINGS_DYNAMIC_HANDLERS */
	return bestmatch;
}
   253d4:	4628      	mov	r0, r5
   253d6:	b002      	add	sp, #8
   253d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		if (!settings_name_steq(name, ch->name, &tmpnext)) {
   253dc:	aa01      	add	r2, sp, #4
   253de:	6821      	ldr	r1, [r4, #0]
   253e0:	4638      	mov	r0, r7
   253e2:	f01d fae9 	bl	429b8 <settings_name_steq>
   253e6:	b160      	cbz	r0, 25402 <settings_parse_and_lookup+0x76>
		if (!bestmatch) {
   253e8:	b925      	cbnz	r5, 253f4 <settings_parse_and_lookup+0x68>
			if (next) {
   253ea:	b10e      	cbz	r6, 253f0 <settings_parse_and_lookup+0x64>
				*next = tmpnext;
   253ec:	9b01      	ldr	r3, [sp, #4]
   253ee:	6033      	str	r3, [r6, #0]
   253f0:	4625      	mov	r5, r4
   253f2:	e006      	b.n	25402 <settings_parse_and_lookup+0x76>
		if (settings_name_steq(ch->name, bestmatch->name, NULL)) {
   253f4:	2200      	movs	r2, #0
   253f6:	6829      	ldr	r1, [r5, #0]
   253f8:	6820      	ldr	r0, [r4, #0]
   253fa:	f01d fadd 	bl	429b8 <settings_name_steq>
   253fe:	2800      	cmp	r0, #0
   25400:	d1f3      	bne.n	253ea <settings_parse_and_lookup+0x5e>
	Z_STRUCT_SECTION_FOREACH(settings_handler_static, ch) {
   25402:	3414      	adds	r4, #20
   25404:	e7d0      	b.n	253a8 <settings_parse_and_lookup+0x1c>
		if (!settings_name_steq(name, ch->name, &tmpnext)) {
   25406:	aa01      	add	r2, sp, #4
   25408:	6821      	ldr	r1, [r4, #0]
   2540a:	4638      	mov	r0, r7
   2540c:	f01d fad4 	bl	429b8 <settings_name_steq>
   25410:	b160      	cbz	r0, 2542c <settings_parse_and_lookup+0xa0>
		if (!bestmatch) {
   25412:	b925      	cbnz	r5, 2541e <settings_parse_and_lookup+0x92>
			if (next) {
   25414:	b10e      	cbz	r6, 2541a <settings_parse_and_lookup+0x8e>
				*next = tmpnext;
   25416:	9b01      	ldr	r3, [sp, #4]
   25418:	6033      	str	r3, [r6, #0]
   2541a:	4625      	mov	r5, r4
   2541c:	e006      	b.n	2542c <settings_parse_and_lookup+0xa0>
		if (settings_name_steq(ch->name, bestmatch->name, NULL)) {
   2541e:	2200      	movs	r2, #0
   25420:	6829      	ldr	r1, [r5, #0]
   25422:	6820      	ldr	r0, [r4, #0]
   25424:	f01d fac8 	bl	429b8 <settings_name_steq>
   25428:	2800      	cmp	r0, #0
   2542a:	d1f3      	bne.n	25414 <settings_parse_and_lookup+0x88>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   2542c:	6964      	ldr	r4, [r4, #20]
   2542e:	e7ce      	b.n	253ce <settings_parse_and_lookup+0x42>
   25430:	00045f08 	.word	0x00045f08
   25434:	000494bb 	.word	0x000494bb
   25438:	0004764f 	.word	0x0004764f
   2543c:	000494e3 	.word	0x000494e3
   25440:	200223e0 	.word	0x200223e0
   25444:	00045f08 	.word	0x00045f08
   25448:	00049489 	.word	0x00049489

0002544c <settings_call_set_handler>:
int settings_call_set_handler(const char *name,
			      size_t len,
			      settings_read_cb read_cb,
			      void *read_cb_arg,
			      const struct settings_load_arg *load_arg)
{
   2544c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   25450:	b085      	sub	sp, #20
   25452:	9c0c      	ldr	r4, [sp, #48]	; 0x30
   25454:	4605      	mov	r5, r0
   25456:	460e      	mov	r6, r1
   25458:	4617      	mov	r7, r2
   2545a:	4698      	mov	r8, r3
	int rc;
	const char *name_key = name;
   2545c:	9003      	str	r0, [sp, #12]

	if (load_arg && load_arg->subtree &&
   2545e:	b1b4      	cbz	r4, 2548e <settings_call_set_handler+0x42>
   25460:	6821      	ldr	r1, [r4, #0]
   25462:	b179      	cbz	r1, 25484 <settings_call_set_handler+0x38>
	    !settings_name_steq(name, load_arg->subtree, &name_key)) {
   25464:	aa03      	add	r2, sp, #12
   25466:	f01d faa7 	bl	429b8 <settings_name_steq>
	if (load_arg && load_arg->subtree &&
   2546a:	b958      	cbnz	r0, 25484 <settings_call_set_handler+0x38>

		if (rc != 0) {
			LOG_ERR("set-value failure. key: %s error(%d)",
				log_strdup(name), rc);
			/* Ignoring the error */
			rc = 0;
   2546c:	2000      	movs	r0, #0
   2546e:	e006      	b.n	2547e <settings_call_set_handler+0x32>
		rc = load_arg->cb(name_key, len, read_cb, read_cb_arg,
   25470:	68a3      	ldr	r3, [r4, #8]
   25472:	463a      	mov	r2, r7
   25474:	9300      	str	r3, [sp, #0]
   25476:	4631      	mov	r1, r6
   25478:	4643      	mov	r3, r8
   2547a:	9803      	ldr	r0, [sp, #12]
   2547c:	47c8      	blx	r9
			LOG_DBG("set-value OK. key: %s",
				log_strdup(name));
		}
	}
	return rc;
}
   2547e:	b005      	add	sp, #20
   25480:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (load_arg && load_arg->cb) {
   25484:	f8d4 9004 	ldr.w	r9, [r4, #4]
   25488:	f1b9 0f00 	cmp.w	r9, #0
   2548c:	d1f0      	bne.n	25470 <settings_call_set_handler+0x24>
		ch = settings_parse_and_lookup(name, &name_key);
   2548e:	a903      	add	r1, sp, #12
   25490:	4628      	mov	r0, r5
   25492:	f7ff ff7b 	bl	2538c <settings_parse_and_lookup>
		if (!ch) {
   25496:	2800      	cmp	r0, #0
   25498:	d0e8      	beq.n	2546c <settings_call_set_handler+0x20>
		rc = ch->h_set(name_key, len, read_cb, read_cb_arg);
   2549a:	6884      	ldr	r4, [r0, #8]
   2549c:	4631      	mov	r1, r6
   2549e:	4643      	mov	r3, r8
   254a0:	463a      	mov	r2, r7
   254a2:	9803      	ldr	r0, [sp, #12]
   254a4:	47a0      	blx	r4
		if (rc != 0) {
   254a6:	4606      	mov	r6, r0
   254a8:	2800      	cmp	r0, #0
   254aa:	d0df      	beq.n	2546c <settings_call_set_handler+0x20>
			LOG_ERR("set-value failure. key: %s error(%d)",
   254ac:	4b0c      	ldr	r3, [pc, #48]	; (254e0 <settings_call_set_handler+0x94>)
   254ae:	681b      	ldr	r3, [r3, #0]
   254b0:	075b      	lsls	r3, r3, #29
   254b2:	d0db      	beq.n	2546c <settings_call_set_handler+0x20>
   254b4:	2301      	movs	r3, #1
   254b6:	f04f 0400 	mov.w	r4, #0
   254ba:	490a      	ldr	r1, [pc, #40]	; (254e4 <settings_call_set_handler+0x98>)
   254bc:	f363 0407 	bfi	r4, r3, #0, #8
   254c0:	4b09      	ldr	r3, [pc, #36]	; (254e8 <settings_call_set_handler+0x9c>)
   254c2:	4628      	mov	r0, r5
   254c4:	1ac9      	subs	r1, r1, r3
   254c6:	08c9      	lsrs	r1, r1, #3
   254c8:	f361 148f 	bfi	r4, r1, #6, #10
   254cc:	f7fc fbee 	bl	21cac <log_strdup>
   254d0:	4623      	mov	r3, r4
   254d2:	4601      	mov	r1, r0
   254d4:	4632      	mov	r2, r6
   254d6:	4805      	ldr	r0, [pc, #20]	; (254ec <settings_call_set_handler+0xa0>)
   254d8:	f01b fad4 	bl	40a84 <log_2>
   254dc:	e7c6      	b.n	2546c <settings_call_set_handler+0x20>
   254de:	bf00      	nop
   254e0:	20032b48 	.word	0x20032b48
   254e4:	00046090 	.word	0x00046090
   254e8:	00045f08 	.word	0x00045f08
   254ec:	00049464 	.word	0x00049464

000254f0 <settings_commit_subtree>:
{
	return settings_commit_subtree(NULL);
}

int settings_commit_subtree(const char *subtree)
{
   254f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	int rc;
	int rc2;

	rc = 0;

	Z_STRUCT_SECTION_FOREACH(settings_handler_static, ch) {
   254f4:	4f21      	ldr	r7, [pc, #132]	; (2557c <settings_commit_subtree+0x8c>)
{
   254f6:	4606      	mov	r6, r0
	rc = 0;
   254f8:	2500      	movs	r5, #0
   254fa:	46b9      	mov	r9, r7
	Z_STRUCT_SECTION_FOREACH(settings_handler_static, ch) {
   254fc:	4c20      	ldr	r4, [pc, #128]	; (25580 <settings_commit_subtree+0x90>)
   254fe:	f8df 8094 	ldr.w	r8, [pc, #148]	; 25594 <settings_commit_subtree+0xa4>
   25502:	42bc      	cmp	r4, r7
   25504:	d90c      	bls.n	25520 <settings_commit_subtree+0x30>
   25506:	491f      	ldr	r1, [pc, #124]	; (25584 <settings_commit_subtree+0x94>)
   25508:	23f5      	movs	r3, #245	; 0xf5
   2550a:	4642      	mov	r2, r8
   2550c:	481e      	ldr	r0, [pc, #120]	; (25588 <settings_commit_subtree+0x98>)
   2550e:	f01b f878 	bl	40602 <printk>
   25512:	481e      	ldr	r0, [pc, #120]	; (2558c <settings_commit_subtree+0x9c>)
   25514:	f01b f875 	bl	40602 <printk>
   25518:	21f5      	movs	r1, #245	; 0xf5
   2551a:	4640      	mov	r0, r8
   2551c:	f01b f934 	bl	40788 <assert_post_action>
   25520:	454c      	cmp	r4, r9
   25522:	d307      	bcc.n	25534 <settings_commit_subtree+0x44>
		}
	}

#if defined(CONFIG_SETTINGS_DYNAMIC_HANDLERS)
	struct settings_handler *ch;
	SYS_SLIST_FOR_EACH_CONTAINER(&settings_handlers, ch, node) {
   25524:	4b1a      	ldr	r3, [pc, #104]	; (25590 <settings_commit_subtree+0xa0>)
   25526:	681c      	ldr	r4, [r3, #0]
   25528:	b10c      	cbz	r4, 2552e <settings_commit_subtree+0x3e>
   2552a:	3c14      	subs	r4, #20
   2552c:	b9a4      	cbnz	r4, 25558 <settings_commit_subtree+0x68>
		}
	}
#endif /* CONFIG_SETTINGS_DYNAMIC_HANDLERS */

	return rc;
}
   2552e:	4628      	mov	r0, r5
   25530:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		if (subtree && !settings_name_steq(ch->name, subtree, NULL)) {
   25534:	b91e      	cbnz	r6, 2553e <settings_commit_subtree+0x4e>
		if (ch->h_commit) {
   25536:	68e3      	ldr	r3, [r4, #12]
   25538:	b94b      	cbnz	r3, 2554e <settings_commit_subtree+0x5e>
	Z_STRUCT_SECTION_FOREACH(settings_handler_static, ch) {
   2553a:	3414      	adds	r4, #20
   2553c:	e7e1      	b.n	25502 <settings_commit_subtree+0x12>
		if (subtree && !settings_name_steq(ch->name, subtree, NULL)) {
   2553e:	2200      	movs	r2, #0
   25540:	4631      	mov	r1, r6
   25542:	6820      	ldr	r0, [r4, #0]
   25544:	f01d fa38 	bl	429b8 <settings_name_steq>
   25548:	2800      	cmp	r0, #0
   2554a:	d1f4      	bne.n	25536 <settings_commit_subtree+0x46>
   2554c:	e7f5      	b.n	2553a <settings_commit_subtree+0x4a>
			rc2 = ch->h_commit();
   2554e:	4798      	blx	r3
				rc = rc2;
   25550:	2d00      	cmp	r5, #0
   25552:	bf08      	it	eq
   25554:	4605      	moveq	r5, r0
   25556:	e7f0      	b.n	2553a <settings_commit_subtree+0x4a>
		if (subtree && !settings_name_steq(ch->name, subtree, NULL)) {
   25558:	b91e      	cbnz	r6, 25562 <settings_commit_subtree+0x72>
		if (ch->h_commit) {
   2555a:	68e3      	ldr	r3, [r4, #12]
   2555c:	b94b      	cbnz	r3, 25572 <settings_commit_subtree+0x82>
   2555e:	6964      	ldr	r4, [r4, #20]
   25560:	e7e2      	b.n	25528 <settings_commit_subtree+0x38>
		if (subtree && !settings_name_steq(ch->name, subtree, NULL)) {
   25562:	2200      	movs	r2, #0
   25564:	4631      	mov	r1, r6
   25566:	6820      	ldr	r0, [r4, #0]
   25568:	f01d fa26 	bl	429b8 <settings_name_steq>
   2556c:	2800      	cmp	r0, #0
   2556e:	d1f4      	bne.n	2555a <settings_commit_subtree+0x6a>
   25570:	e7f5      	b.n	2555e <settings_commit_subtree+0x6e>
			rc2 = ch->h_commit();
   25572:	4798      	blx	r3
				rc = rc2;
   25574:	2d00      	cmp	r5, #0
   25576:	bf08      	it	eq
   25578:	4605      	moveq	r5, r0
   2557a:	e7f0      	b.n	2555e <settings_commit_subtree+0x6e>
   2557c:	00045f08 	.word	0x00045f08
   25580:	00045f08 	.word	0x00045f08
   25584:	000494bb 	.word	0x000494bb
   25588:	0004764f 	.word	0x0004764f
   2558c:	000494e3 	.word	0x000494e3
   25590:	200223e0 	.word	0x200223e0
   25594:	00049489 	.word	0x00049489

00025598 <settings_subsys_init>:
void settings_init(void);

int settings_backend_init(void);

int settings_subsys_init(void)
{
   25598:	b510      	push	{r4, lr}

	int err = 0;

	if (settings_subsys_initialized) {
   2559a:	4c06      	ldr	r4, [pc, #24]	; (255b4 <settings_subsys_init+0x1c>)
   2559c:	7823      	ldrb	r3, [r4, #0]
   2559e:	b93b      	cbnz	r3, 255b0 <settings_subsys_init+0x18>
		return 0;
	}

	settings_init();
   255a0:	f7ff fe94 	bl	252cc <settings_init>

	err = settings_backend_init(); /* func rises kernel panic once error */
   255a4:	f000 fade 	bl	25b64 <settings_backend_init>

	if (!err) {
   255a8:	b908      	cbnz	r0, 255ae <settings_subsys_init+0x16>
		settings_subsys_initialized = true;
   255aa:	2301      	movs	r3, #1
   255ac:	7023      	strb	r3, [r4, #0]
	}

	return err;
}
   255ae:	bd10      	pop	{r4, pc}
		return 0;
   255b0:	2000      	movs	r0, #0
   255b2:	e7fc      	b.n	255ae <settings_subsys_init+0x16>
   255b4:	200299ea 	.word	0x200299ea

000255b8 <settings_line_raw_read_until>:
 * -ERCODE on storage errors
 */
static int settings_line_raw_read_until(off_t seek, char *out, size_t len_req,
				 size_t *len_read, char const *until_char,
				 void *cb_arg)
{
   255b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   255bc:	b08b      	sub	sp, #44	; 0x2c
   255be:	9302      	str	r3, [sp, #8]
	size_t rem_size, len;
	char temp_buf[16]; /* buffer for fit read-block-size requirements */
	size_t exp_size, read_size;
	u8_t rbs = settings_io_cb.rwbs;
   255c0:	4b29      	ldr	r3, [pc, #164]	; (25668 <settings_line_raw_read_until+0xb0>)
{
   255c2:	468a      	mov	sl, r1
	u8_t rbs = settings_io_cb.rwbs;
   255c4:	7b19      	ldrb	r1, [r3, #12]
{
   255c6:	4680      	mov	r8, r0
	u8_t rbs = settings_io_cb.rwbs;
   255c8:	9101      	str	r1, [sp, #4]
	off_t off;
	int rc;

	if (len_req == 0) {
   255ca:	4615      	mov	r5, r2
   255cc:	2a00      	cmp	r2, #0
   255ce:	d045      	beq.n	2565c <settings_line_raw_read_until+0xa4>
   255d0:	4616      	mov	r6, r2
		off = seek / rbs * rbs;

		read_size = sizeof(temp_buf);
		exp_size = read_size;

		rc = settings_io_cb.read_cb(cb_arg, off, temp_buf, &read_size);
   255d2:	4699      	mov	r9, r3
		read_size = sizeof(temp_buf);
   255d4:	2310      	movs	r3, #16
   255d6:	9305      	str	r3, [sp, #20]
		off = seek / rbs * rbs;
   255d8:	9b01      	ldr	r3, [sp, #4]
		rc = settings_io_cb.read_cb(cb_arg, off, temp_buf, &read_size);
   255da:	f8d9 7000 	ldr.w	r7, [r9]
		off = seek / rbs * rbs;
   255de:	fb98 f4f3 	sdiv	r4, r8, r3
   255e2:	435c      	muls	r4, r3
		rc = settings_io_cb.read_cb(cb_arg, off, temp_buf, &read_size);
   255e4:	aa06      	add	r2, sp, #24
   255e6:	ab05      	add	r3, sp, #20
   255e8:	4621      	mov	r1, r4
   255ea:	9815      	ldr	r0, [sp, #84]	; 0x54
   255ec:	47b8      	blx	r7
		if (rc) {
   255ee:	4607      	mov	r7, r0
   255f0:	2800      	cmp	r0, #0
   255f2:	d136      	bne.n	25662 <settings_line_raw_read_until+0xaa>
			return -EIO;
		}

		off = seek - off;
		len = read_size - off;
   255f4:	eba8 0b04 	sub.w	fp, r8, r4
   255f8:	9c05      	ldr	r4, [sp, #20]
   255fa:	ab06      	add	r3, sp, #24
   255fc:	eba4 040b 	sub.w	r4, r4, fp
		len = MIN(rem_size, len);
   25600:	449b      	add	fp, r3

		if (until_char != NULL) {
   25602:	9b14      	ldr	r3, [sp, #80]	; 0x50
		len = MIN(rem_size, len);
   25604:	42b4      	cmp	r4, r6
   25606:	bf28      	it	cs
   25608:	4634      	movcs	r4, r6
		if (until_char != NULL) {
   2560a:	b31b      	cbz	r3, 25654 <settings_line_raw_read_until+0x9c>
			char *pend;
			pend = memchr(&temp_buf[off], *until_char, len);
   2560c:	4622      	mov	r2, r4
   2560e:	7819      	ldrb	r1, [r3, #0]
   25610:	4658      	mov	r0, fp
   25612:	f01f fc01 	bl	44e18 <memchr>
			if (pend != NULL) {
   25616:	b1f8      	cbz	r0, 25658 <settings_line_raw_read_until+0xa0>
				len = pend - &temp_buf[off];
				rc = 1; /* will cause loop expiration */
   25618:	2301      	movs	r3, #1
				len = pend - &temp_buf[off];
   2561a:	eba0 040b 	sub.w	r4, r0, fp
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   2561e:	4622      	mov	r2, r4
   25620:	4659      	mov	r1, fp
   25622:	4650      	mov	r0, sl
   25624:	9303      	str	r3, [sp, #12]
   25626:	f01f fc13 	bl	44e50 <memcpy>

		memcpy(out, &temp_buf[off], len);

		rem_size -= len;

		if (exp_size > read_size || rc) {
   2562a:	9a05      	ldr	r2, [sp, #20]
		rem_size -= len;
   2562c:	1b36      	subs	r6, r6, r4
		if (exp_size > read_size || rc) {
   2562e:	2a0f      	cmp	r2, #15
   25630:	9b03      	ldr	r3, [sp, #12]
   25632:	d904      	bls.n	2563e <settings_line_raw_read_until+0x86>
   25634:	b91b      	cbnz	r3, 2563e <settings_line_raw_read_until+0x86>
			break;
		}

		out += len;
   25636:	44a2      	add	sl, r4
		seek += len;
   25638:	44a0      	add	r8, r4
	while (rem_size) {
   2563a:	2e00      	cmp	r6, #0
   2563c:	d1ca      	bne.n	255d4 <settings_line_raw_read_until+0x1c>
	}

	*len_read = len_req - rem_size;
   2563e:	9a02      	ldr	r2, [sp, #8]
   25640:	1bad      	subs	r5, r5, r6
   25642:	6015      	str	r5, [r2, #0]

	if (until_char != NULL) {
   25644:	9a14      	ldr	r2, [sp, #80]	; 0x50
   25646:	b10a      	cbz	r2, 2564c <settings_line_raw_read_until+0x94>
		return (rc) ? 0 : 1;
   25648:	f083 0701 	eor.w	r7, r3, #1
	}

	return 0;
}
   2564c:	4638      	mov	r0, r7
   2564e:	b00b      	add	sp, #44	; 0x2c
   25650:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		rc = settings_io_cb.read_cb(cb_arg, off, temp_buf, &read_size);
   25654:	9b14      	ldr	r3, [sp, #80]	; 0x50
   25656:	e7e2      	b.n	2561e <settings_line_raw_read_until+0x66>
   25658:	463b      	mov	r3, r7
   2565a:	e7e0      	b.n	2561e <settings_line_raw_read_until+0x66>
		return -EINVAL;
   2565c:	f06f 0715 	mvn.w	r7, #21
   25660:	e7f4      	b.n	2564c <settings_line_raw_read_until+0x94>
			return -EIO;
   25662:	f06f 0704 	mvn.w	r7, #4
   25666:	e7f1      	b.n	2564c <settings_line_raw_read_until+0x94>
   25668:	200223e8 	.word	0x200223e8

0002566c <settings_line_write>:
{
   2566c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	u8_t wbs = settings_io_cb.rwbs;
   25670:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 25730 <settings_line_write+0xc4>
{
   25674:	b087      	sub	sp, #28
	u8_t wbs = settings_io_cb.rwbs;
   25676:	f89a 700c 	ldrb.w	r7, [sl, #12]
{
   2567a:	4683      	mov	fp, r0
   2567c:	4689      	mov	r9, r1
   2567e:	4690      	mov	r8, r2
   25680:	9301      	str	r3, [sp, #4]
	rem = strlen(name);
   25682:	f7f7 fd49 	bl	1d118 <strlen>
	w_size = rem - rem % wbs;
   25686:	fbb0 f4f7 	udiv	r4, r0, r7
   2568a:	fb07 0414 	mls	r4, r7, r4, r0
   2568e:	1b05      	subs	r5, r0, r4
	rc = settings_io_cb.write_cb(cb_arg, w_loc, name, w_size);
   25690:	462b      	mov	r3, r5
   25692:	465a      	mov	r2, fp
   25694:	9901      	ldr	r1, [sp, #4]
   25696:	9810      	ldr	r0, [sp, #64]	; 0x40
   25698:	f8da 6004 	ldr.w	r6, [sl, #4]
   2569c:	47b0      	blx	r6
	w_loc += w_size;
   2569e:	9b01      	ldr	r3, [sp, #4]
   256a0:	442b      	add	r3, r5
   256a2:	9301      	str	r3, [sp, #4]
	if (rem) {
   256a4:	b134      	cbz	r4, 256b4 <settings_line_write+0x48>
		memcpy(w_buf, name, rem);
   256a6:	2310      	movs	r3, #16
   256a8:	4622      	mov	r2, r4
   256aa:	eb0b 0105 	add.w	r1, fp, r5
   256ae:	a802      	add	r0, sp, #8
   256b0:	f01f fbdb 	bl	44e6a <__memcpy_chk>
	w_buf[rem] = '=';
   256b4:	223d      	movs	r2, #61	; 0x3d
   256b6:	ab06      	add	r3, sp, #24
   256b8:	4423      	add	r3, r4
   256ba:	f803 2c10 	strb.w	r2, [r3, #-16]
	w_size++;
   256be:	3401      	adds	r4, #1
		while (w_size < sizeof(w_buf)) {
   256c0:	2c0f      	cmp	r4, #15
   256c2:	d90d      	bls.n	256e0 <settings_line_write+0x74>
   256c4:	2500      	movs	r5, #0
		rc = settings_io_cb.write_cb(cb_arg, w_loc, w_buf, w_size);
   256c6:	4623      	mov	r3, r4
   256c8:	aa02      	add	r2, sp, #8
   256ca:	9901      	ldr	r1, [sp, #4]
   256cc:	9810      	ldr	r0, [sp, #64]	; 0x40
   256ce:	f8da 6004 	ldr.w	r6, [sl, #4]
   256d2:	47b0      	blx	r6
		if (rc) {
   256d4:	bb30      	cbnz	r0, 25724 <settings_line_write+0xb8>
		if (done) {
   256d6:	bb3d      	cbnz	r5, 25728 <settings_line_write+0xbc>
		w_loc += w_size;
   256d8:	9b01      	ldr	r3, [sp, #4]
   256da:	4423      	add	r3, r4
		w_size = 0;
   256dc:	462c      	mov	r4, r5
		w_loc += w_size;
   256de:	9301      	str	r3, [sp, #4]
				if (rem) {
   256e0:	f1b8 0f00 	cmp.w	r8, #0
   256e4:	d00f      	beq.n	25706 <settings_line_write+0x9a>
					add = MIN(rem, sizeof(w_buf) - w_size);
   256e6:	f1c4 0510 	rsb	r5, r4, #16
   256ea:	4545      	cmp	r5, r8
   256ec:	bf28      	it	cs
   256ee:	4645      	movcs	r5, r8
   256f0:	ab02      	add	r3, sp, #8
   256f2:	4649      	mov	r1, r9
   256f4:	1918      	adds	r0, r3, r4
   256f6:	462a      	mov	r2, r5
   256f8:	f01f fbaa 	bl	44e50 <memcpy>
					value += add;
   256fc:	44a9      	add	r9, r5
					rem -= add;
   256fe:	eba8 0805 	sub.w	r8, r8, r5
					w_size += add;
   25702:	442c      	add	r4, r5
   25704:	e7dc      	b.n	256c0 <settings_line_write+0x54>
					add = (w_size) % wbs;
   25706:	fbb4 f5f7 	udiv	r5, r4, r7
   2570a:	fb07 4515 	mls	r5, r7, r5, r4
					if (add) {
   2570e:	b13d      	cbz	r5, 25720 <settings_line_write+0xb4>
						add = wbs - add;
   25710:	1b7d      	subs	r5, r7, r5
__ssp_bos_icheck3(memset, void *, int)
   25712:	ab02      	add	r3, sp, #8
   25714:	1918      	adds	r0, r3, r4
   25716:	462a      	mov	r2, r5
   25718:	4641      	mov	r1, r8
   2571a:	f01f fbd3 	bl	44ec4 <memset>
						w_size += add;
   2571e:	442c      	add	r4, r5
					done = true;
   25720:	2501      	movs	r5, #1
   25722:	e7d0      	b.n	256c6 <settings_line_write+0x5a>
			return -EIO;
   25724:	f06f 0004 	mvn.w	r0, #4
}
   25728:	b007      	add	sp, #28
   2572a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2572e:	bf00      	nop
   25730:	200223e8 	.word	0x200223e8

00025734 <settings_line_val_get_len>:

size_t settings_line_val_get_len(off_t val_off, void *read_cb_ctx)
{
	size_t len;

	len = settings_io_cb.get_len_cb(read_cb_ctx);
   25734:	4b03      	ldr	r3, [pc, #12]	; (25744 <settings_line_val_get_len+0x10>)
{
   25736:	b510      	push	{r4, lr}
	len = settings_io_cb.get_len_cb(read_cb_ctx);
   25738:	689b      	ldr	r3, [r3, #8]
{
   2573a:	4604      	mov	r4, r0
	len = settings_io_cb.get_len_cb(read_cb_ctx);
   2573c:	4608      	mov	r0, r1
   2573e:	4798      	blx	r3
		return 0;
	}
#else
	return len - val_off;
#endif
}
   25740:	1b00      	subs	r0, r0, r4
   25742:	bd10      	pop	{r4, pc}
   25744:	200223e8 	.word	0x200223e8

00025748 <settings_line_entry_copy>:
}


int settings_line_entry_copy(void *dst_ctx, off_t dst_off, void *src_ctx,
			     off_t src_off, size_t len)
{
   25748:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   2574c:	4681      	mov	r9, r0
   2574e:	4688      	mov	r8, r1
   25750:	4692      	mov	sl, r2
   25752:	461e      	mov	r6, r3
   25754:	b086      	sub	sp, #24
   25756:	9c0e      	ldr	r4, [sp, #56]	; 0x38
	size_t chunk_size;

	while (len) {
		chunk_size = MIN(len, sizeof(buf));

		rc = settings_io_cb.read_cb(src_ctx, src_off, buf, &chunk_size);
   25758:	4f0f      	ldr	r7, [pc, #60]	; (25798 <settings_line_entry_copy+0x50>)
	while (len) {
   2575a:	b91c      	cbnz	r4, 25764 <settings_line_entry_copy+0x1c>
   2575c:	4620      	mov	r0, r4
		dst_off += chunk_size;
		len -= chunk_size;
	}

	return rc;
}
   2575e:	b006      	add	sp, #24
   25760:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		chunk_size = MIN(len, sizeof(buf));
   25764:	2c10      	cmp	r4, #16
   25766:	4623      	mov	r3, r4
   25768:	bf28      	it	cs
   2576a:	2310      	movcs	r3, #16
		rc = settings_io_cb.read_cb(src_ctx, src_off, buf, &chunk_size);
   2576c:	aa02      	add	r2, sp, #8
		chunk_size = MIN(len, sizeof(buf));
   2576e:	9301      	str	r3, [sp, #4]
		rc = settings_io_cb.read_cb(src_ctx, src_off, buf, &chunk_size);
   25770:	4631      	mov	r1, r6
   25772:	ab01      	add	r3, sp, #4
   25774:	4650      	mov	r0, sl
   25776:	683d      	ldr	r5, [r7, #0]
   25778:	47a8      	blx	r5
		if (rc) {
   2577a:	2800      	cmp	r0, #0
   2577c:	d1ef      	bne.n	2575e <settings_line_entry_copy+0x16>
		rc = settings_io_cb.write_cb(dst_ctx, dst_off, buf, chunk_size);
   2577e:	9b01      	ldr	r3, [sp, #4]
   25780:	aa02      	add	r2, sp, #8
   25782:	4641      	mov	r1, r8
   25784:	4648      	mov	r0, r9
   25786:	687d      	ldr	r5, [r7, #4]
   25788:	47a8      	blx	r5
		if (rc) {
   2578a:	2800      	cmp	r0, #0
   2578c:	d1e7      	bne.n	2575e <settings_line_entry_copy+0x16>
		src_off += chunk_size;
   2578e:	9b01      	ldr	r3, [sp, #4]
   25790:	441e      	add	r6, r3
		dst_off += chunk_size;
   25792:	4498      	add	r8, r3
		len -= chunk_size;
   25794:	1ae4      	subs	r4, r4, r3
   25796:	e7e0      	b.n	2575a <settings_line_entry_copy+0x12>
   25798:	200223e8 	.word	0x200223e8

0002579c <settings_line_io_init>:
					  size_t *len),
			  int (*write_cb)(void *ctx, off_t off, char const *buf,
					  size_t len),
			  size_t (*get_len_cb)(void *ctx),
			  u8_t io_rwbs)
{
   2579c:	b510      	push	{r4, lr}
	settings_io_cb.read_cb = read_cb;
   2579e:	4c03      	ldr	r4, [pc, #12]	; (257ac <settings_line_io_init+0x10>)
	settings_io_cb.write_cb = write_cb;
   257a0:	e9c4 0100 	strd	r0, r1, [r4]
	settings_io_cb.get_len_cb = get_len_cb;
   257a4:	60a2      	str	r2, [r4, #8]
	settings_io_cb.rwbs = io_rwbs;
   257a6:	7323      	strb	r3, [r4, #12]
}
   257a8:	bd10      	pop	{r4, pc}
   257aa:	bf00      	nop
   257ac:	200223e8 	.word	0x200223e8

000257b0 <settings_line_load_cb>:
	return -1;
}

int settings_line_load_cb(const char *name, void *val_read_cb_ctx, off_t off,
			  void *cb_arg)
{
   257b0:	b530      	push	{r4, r5, lr}
   257b2:	4604      	mov	r4, r0
   257b4:	b085      	sub	sp, #20
	size_t len;
	struct settings_line_read_value_cb_ctx value_ctx;
	struct settings_load_arg *arg = cb_arg;
	value_ctx.read_cb_ctx = val_read_cb_ctx;
	value_ctx.off = off;
	len = settings_line_val_get_len(off, val_read_cb_ctx);
   257b6:	4610      	mov	r0, r2
{
   257b8:	461d      	mov	r5, r3
	value_ctx.off = off;
   257ba:	e9cd 1202 	strd	r1, r2, [sp, #8]
	len = settings_line_val_get_len(off, val_read_cb_ctx);
   257be:	f7ff ffb9 	bl	25734 <settings_line_val_get_len>

	return settings_call_set_handler(name, len, settings_line_read_cb,
   257c2:	9500      	str	r5, [sp, #0]
   257c4:	4601      	mov	r1, r0
   257c6:	ab02      	add	r3, sp, #8
   257c8:	4a02      	ldr	r2, [pc, #8]	; (257d4 <settings_line_load_cb+0x24>)
   257ca:	4620      	mov	r0, r4
   257cc:	f7ff fe3e 	bl	2544c <settings_call_set_handler>
					 &value_ctx, arg);
}
   257d0:	b005      	add	sp, #20
   257d2:	bd30      	pop	{r4, r5, pc}
   257d4:	00042a45 	.word	0x00042a45

000257d8 <settings_fcb_load_priv>:

static int settings_fcb_load_priv(struct settings_store *cs,
				  line_load_cb cb,
				  void *cb_arg,
				  bool filter_duplicates)
{
   257d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   257dc:	4692      	mov	sl, r2
	struct settings_fcb *cf = (struct settings_fcb *)cs;
	struct fcb_entry_ctx entry_ctx = {
   257de:	2210      	movs	r2, #16
{
   257e0:	4680      	mov	r8, r0
   257e2:	b0b5      	sub	sp, #212	; 0xd4
   257e4:	9101      	str	r1, [sp, #4]
	struct fcb_entry_ctx entry_ctx = {
   257e6:	eb0d 0002 	add.w	r0, sp, r2
   257ea:	2100      	movs	r1, #0
{
   257ec:	469b      	mov	fp, r3
	struct fcb_entry_ctx entry_ctx = {
   257ee:	f01f fb69 	bl	44ec4 <memset>
   257f2:	f8d8 3040 	ldr.w	r3, [r8, #64]	; 0x40
			LOG_ERR("failed to load line");
   257f6:	4c3b      	ldr	r4, [pc, #236]	; (258e4 <settings_fcb_load_priv+0x10c>)
	struct fcb_entry_ctx entry_ctx = {
   257f8:	9308      	str	r3, [sp, #32]
			LOG_ERR("failed to load line");
   257fa:	4b3b      	ldr	r3, [pc, #236]	; (258e8 <settings_fcb_load_priv+0x110>)
   257fc:	f8df 90f4 	ldr.w	r9, [pc, #244]	; 258f4 <settings_fcb_load_priv+0x11c>
   25800:	1ae4      	subs	r4, r4, r3
   25802:	f3c4 04c9 	ubfx	r4, r4, #3, #10
		{.fe_sector = NULL, .fe_elem_off = 0},
		.fap = cf->cf_fcb.fap
	};
	int rc;

	while ((rc = fcb_getnext(&cf->cf_fcb, &entry_ctx.loc)) == 0) {
   25806:	f108 0708 	add.w	r7, r8, #8
   2580a:	a904      	add	r1, sp, #16
   2580c:	4638      	mov	r0, r7
   2580e:	f01c fa82 	bl	41d16 <fcb_getnext>
   25812:	b118      	cbz	r0, 2581c <settings_fcb_load_priv+0x44>
	}
	if (rc == -ENOTSUP) {
		rc = 0;
	}
	return 0;
}
   25814:	2000      	movs	r0, #0
   25816:	b035      	add	sp, #212	; 0xd4
   25818:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		rc = settings_line_name_read(name, sizeof(name), &name_len,
   2581c:	214a      	movs	r1, #74	; 0x4a
   2581e:	ab04      	add	r3, sp, #16
   25820:	aa02      	add	r2, sp, #8
   25822:	a80e      	add	r0, sp, #56	; 0x38
   25824:	f01d f91d 	bl	42a62 <settings_line_name_read>
		if (rc) {
   25828:	4601      	mov	r1, r0
   2582a:	b180      	cbz	r0, 2584e <settings_fcb_load_priv+0x76>
			LOG_ERR("Failed to load line name: %d", rc);
   2582c:	f8d9 3000 	ldr.w	r3, [r9]
   25830:	075a      	lsls	r2, r3, #29
   25832:	d0e8      	beq.n	25806 <settings_fcb_load_priv+0x2e>
   25834:	f026 033f 	bic.w	r3, r6, #63	; 0x3f
   25838:	f043 0301 	orr.w	r3, r3, #1
   2583c:	f363 0607 	bfi	r6, r3, #0, #8
   25840:	f364 168f 	bfi	r6, r4, #6, #10
   25844:	4632      	mov	r2, r6
   25846:	4829      	ldr	r0, [pc, #164]	; (258ec <settings_fcb_load_priv+0x114>)
   25848:	f01b f908 	bl	40a5c <log_1>
   2584c:	e7db      	b.n	25806 <settings_fcb_load_priv+0x2e>
		name[name_len] = '\0';
   2584e:	9b02      	ldr	r3, [sp, #8]
   25850:	aa34      	add	r2, sp, #208	; 0xd0
   25852:	441a      	add	r2, r3
   25854:	f802 0c98 	strb.w	r0, [r2, #-152]
		if (filter_duplicates &&
   25858:	f1bb 0f00 	cmp.w	fp, #0
   2585c:	d015      	beq.n	2588a <settings_fcb_load_priv+0xb2>
	if (off >= entry_ctx->loc.fe_data_len) {
   2585e:	f8bd 201c 	ldrh.w	r2, [sp, #28]
   25862:	3301      	adds	r3, #1
   25864:	429a      	cmp	r2, r3
   25866:	ddce      	ble.n	25806 <settings_fcb_load_priv+0x2e>
	struct fcb_entry_ctx entry2_ctx = *entry_ctx;
   25868:	f10d 0c24 	add.w	ip, sp, #36	; 0x24
   2586c:	f10d 0e10 	add.w	lr, sp, #16
   25870:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
   25874:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   25878:	f8de 3000 	ldr.w	r3, [lr]
   2587c:	f8cc 3000 	str.w	r3, [ip]
	while (fcb_getnext(&cf->cf_fcb, &entry2_ctx.loc) == 0) {
   25880:	a909      	add	r1, sp, #36	; 0x24
   25882:	4638      	mov	r0, r7
   25884:	f01c fa47 	bl	41d16 <fcb_getnext>
   25888:	b138      	cbz	r0, 2589a <settings_fcb_load_priv+0xc2>
			cb(name, &entry_ctx, name_len + 1, cb_arg);
   2588a:	9a02      	ldr	r2, [sp, #8]
   2588c:	4653      	mov	r3, sl
   2588e:	3201      	adds	r2, #1
   25890:	a904      	add	r1, sp, #16
   25892:	a80e      	add	r0, sp, #56	; 0x38
   25894:	9f01      	ldr	r7, [sp, #4]
   25896:	47b8      	blx	r7
			continue;
   25898:	e7b5      	b.n	25806 <settings_fcb_load_priv+0x2e>
		if (settings_line_name_read(name2, sizeof(name2), &name2_len,
   2589a:	ab09      	add	r3, sp, #36	; 0x24
   2589c:	aa03      	add	r2, sp, #12
   2589e:	214a      	movs	r1, #74	; 0x4a
   258a0:	a821      	add	r0, sp, #132	; 0x84
   258a2:	f01d f8de 	bl	42a62 <settings_line_name_read>
   258a6:	b180      	cbz	r0, 258ca <settings_fcb_load_priv+0xf2>
			LOG_ERR("failed to load line");
   258a8:	f8d9 3000 	ldr.w	r3, [r9]
   258ac:	075b      	lsls	r3, r3, #29
   258ae:	d0e7      	beq.n	25880 <settings_fcb_load_priv+0xa8>
   258b0:	f025 033f 	bic.w	r3, r5, #63	; 0x3f
   258b4:	f043 0301 	orr.w	r3, r3, #1
   258b8:	f363 0507 	bfi	r5, r3, #0, #8
   258bc:	f364 158f 	bfi	r5, r4, #6, #10
   258c0:	4629      	mov	r1, r5
   258c2:	480b      	ldr	r0, [pc, #44]	; (258f0 <settings_fcb_load_priv+0x118>)
   258c4:	f01b f8bd 	bl	40a42 <log_0>
   258c8:	e7da      	b.n	25880 <settings_fcb_load_priv+0xa8>
		name2[name2_len] = '\0';
   258ca:	9b03      	ldr	r3, [sp, #12]
   258cc:	aa34      	add	r2, sp, #208	; 0xd0
   258ce:	4413      	add	r3, r2
   258d0:	f803 0c4c 	strb.w	r0, [r3, #-76]
		if (!strcmp(name, name2)) {
   258d4:	a921      	add	r1, sp, #132	; 0x84
   258d6:	a80e      	add	r0, sp, #56	; 0x38
   258d8:	f7f7 fc14 	bl	1d104 <strcmp>
   258dc:	2800      	cmp	r0, #0
   258de:	d1cf      	bne.n	25880 <settings_fcb_load_priv+0xa8>
   258e0:	e791      	b.n	25806 <settings_fcb_load_priv+0x2e>
   258e2:	bf00      	nop
   258e4:	00046090 	.word	0x00046090
   258e8:	00045f08 	.word	0x00045f08
   258ec:	00049502 	.word	0x00049502
   258f0:	0004951f 	.word	0x0004951f
   258f4:	20032b48 	.word	0x20032b48

000258f8 <settings_fcb_load>:

static int settings_fcb_load(struct settings_store *cs,
			     const struct settings_load_arg *arg)
{
	return settings_fcb_load_priv(
   258f8:	460a      	mov	r2, r1
   258fa:	2301      	movs	r3, #1
   258fc:	4901      	ldr	r1, [pc, #4]	; (25904 <settings_fcb_load+0xc>)
   258fe:	f7ff bf6b 	b.w	257d8 <settings_fcb_load_priv>
   25902:	bf00      	nop
   25904:	000257b1 	.word	0x000257b1

00025908 <settings_fcb_save>:
	return rc;
}

static int settings_fcb_save(struct settings_store *cs, const char *name,
			     const char *value, size_t val_len)
{
   25908:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2590c:	b0c3      	sub	sp, #268	; 0x10c
   2590e:	4605      	mov	r5, r0
   25910:	460e      	mov	r6, r1
   25912:	9203      	str	r2, [sp, #12]
	struct settings_line_dup_check_arg cdca;

	if (val_len > 0 && value == NULL) {
   25914:	461f      	mov	r7, r3
   25916:	b103      	cbz	r3, 2591a <settings_fcb_save+0x12>
   25918:	b182      	cbz	r2, 2593c <settings_fcb_save+0x34>
	/*
	 * Check if we're writing the same value again.
	 */
	cdca.name = name;
	cdca.val = (char *)value;
	cdca.is_dup = 0;
   2591a:	2400      	movs	r4, #0
	cdca.val = (char *)value;
   2591c:	9b03      	ldr	r3, [sp, #12]
	cdca.val_len = val_len;
	settings_fcb_load_priv(cs, settings_line_dup_check_cb, &cdca, false);
   2591e:	aa09      	add	r2, sp, #36	; 0x24
	cdca.val = (char *)value;
   25920:	930a      	str	r3, [sp, #40]	; 0x28
	settings_fcb_load_priv(cs, settings_line_dup_check_cb, &cdca, false);
   25922:	496e      	ldr	r1, [pc, #440]	; (25adc <settings_fcb_save+0x1d4>)
   25924:	4623      	mov	r3, r4
   25926:	4628      	mov	r0, r5
	cdca.name = name;
   25928:	9609      	str	r6, [sp, #36]	; 0x24
	cdca.val_len = val_len;
   2592a:	e9cd 740b 	strd	r7, r4, [sp, #44]	; 0x2c
	settings_fcb_load_priv(cs, settings_line_dup_check_cb, &cdca, false);
   2592e:	f7ff ff53 	bl	257d8 <settings_fcb_load_priv>
	if (cdca.is_dup == 1) {
   25932:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   25934:	2b01      	cmp	r3, #1
   25936:	f000 80cf 	beq.w	25ad8 <settings_fcb_save+0x1d0>
	if (!name) {
   2593a:	b916      	cbnz	r6, 25942 <settings_fcb_save+0x3a>
		return -EINVAL;
   2593c:	f06f 0515 	mvn.w	r5, #21
   25940:	e0c6      	b.n	25ad0 <settings_fcb_save+0x1c8>
	len = settings_line_len_calc(name, val_len);
   25942:	4639      	mov	r1, r7
   25944:	4630      	mov	r0, r6
   25946:	f01d f86d 	bl	42a24 <settings_line_len_calc>
			LOG_ERR("Failed to finish fcb_append (%d)", rc);
   2594a:	4b65      	ldr	r3, [pc, #404]	; (25ae0 <settings_fcb_save+0x1d8>)
   2594c:	4a65      	ldr	r2, [pc, #404]	; (25ae4 <settings_fcb_save+0x1dc>)
   2594e:	f8df b1a0 	ldr.w	fp, [pc, #416]	; 25af0 <settings_fcb_save+0x1e8>
   25952:	1a9b      	subs	r3, r3, r2
   25954:	f3c3 03c9 	ubfx	r3, r3, #3, #10
	len = settings_line_len_calc(name, val_len);
   25958:	9005      	str	r0, [sp, #20]
			LOG_ERR("Failed to finish fcb_append (%d)", rc);
   2595a:	9304      	str	r3, [sp, #16]
	for (i = 0; i < cf->cf_fcb.f_sector_cnt - 1; i++) {
   2595c:	9402      	str	r4, [sp, #8]
   2595e:	7b6b      	ldrb	r3, [r5, #13]
   25960:	9a02      	ldr	r2, [sp, #8]
   25962:	3b01      	subs	r3, #1
   25964:	429a      	cmp	r2, r3
   25966:	dae9      	bge.n	2593c <settings_fcb_save+0x34>
		rc = fcb_append(&cf->cf_fcb, len, &loc.loc);
   25968:	f105 0408 	add.w	r4, r5, #8
   2596c:	f10d 0834 	add.w	r8, sp, #52	; 0x34
   25970:	4642      	mov	r2, r8
   25972:	f8bd 1014 	ldrh.w	r1, [sp, #20]
   25976:	4620      	mov	r0, r4
   25978:	f7ff f8e6 	bl	24b48 <fcb_append>
		if (rc != -ENOSPC) {
   2597c:	f110 0f1c 	cmn.w	r0, #28
		rc = fcb_append(&cf->cf_fcb, len, &loc.loc);
   25980:	4603      	mov	r3, r0
		if (rc != -ENOSPC) {
   25982:	f040 808f 	bne.w	25aa4 <settings_fcb_save+0x19c>
	rc = fcb_append_to_scratch(&cf->cf_fcb);
   25986:	4620      	mov	r0, r4
   25988:	f01b ff67 	bl	4185a <fcb_append_to_scratch>
	if (rc) {
   2598c:	4680      	mov	r8, r0
   2598e:	b118      	cbz	r0, 25998 <settings_fcb_save+0x90>
	for (i = 0; i < cf->cf_fcb.f_sector_cnt - 1; i++) {
   25990:	9b02      	ldr	r3, [sp, #8]
   25992:	3301      	adds	r3, #1
   25994:	9302      	str	r3, [sp, #8]
   25996:	e7e2      	b.n	2595e <settings_fcb_save+0x56>
	rbs = flash_area_align(cf->cf_fcb.fap);
   25998:	6c28      	ldr	r0, [r5, #64]	; 0x40
   2599a:	f01d f800 	bl	4299e <flash_area_align>
	loc1.fap = cf->cf_fcb.fap;
   2599e:	6c2b      	ldr	r3, [r5, #64]	; 0x40
	loc1.loc.fe_elem_off = 0U;
   259a0:	e9cd 8812 	strd	r8, r8, [sp, #72]	; 0x48
	loc1.fap = cf->cf_fcb.fap;
   259a4:	9316      	str	r3, [sp, #88]	; 0x58
	while (fcb_getnext(&cf->cf_fcb, &loc1.loc) == 0) {
   259a6:	a912      	add	r1, sp, #72	; 0x48
   259a8:	4620      	mov	r0, r4
   259aa:	f01c f9b4 	bl	41d16 <fcb_getnext>
   259ae:	b1b8      	cbz	r0, 259e0 <settings_fcb_save+0xd8>
	rc = fcb_rotate(&cf->cf_fcb);
   259b0:	4620      	mov	r0, r4
   259b2:	f01c f9c8 	bl	41d46 <fcb_rotate>
	if (rc != 0) {
   259b6:	4601      	mov	r1, r0
   259b8:	2800      	cmp	r0, #0
   259ba:	d0e9      	beq.n	25990 <settings_fcb_save+0x88>
		LOG_ERR("Failed to fcb rotate (%d)", rc);
   259bc:	f8db 3000 	ldr.w	r3, [fp]
   259c0:	075a      	lsls	r2, r3, #29
   259c2:	d0e5      	beq.n	25990 <settings_fcb_save+0x88>
   259c4:	f02a 033f 	bic.w	r3, sl, #63	; 0x3f
   259c8:	f043 0301 	orr.w	r3, r3, #1
   259cc:	f363 0a07 	bfi	sl, r3, #0, #8
   259d0:	9b04      	ldr	r3, [sp, #16]
   259d2:	4845      	ldr	r0, [pc, #276]	; (25ae8 <settings_fcb_save+0x1e0>)
   259d4:	f363 1a8f 	bfi	sl, r3, #6, #10
   259d8:	4652      	mov	r2, sl
   259da:	f01b f83f 	bl	40a5c <log_1>
   259de:	e7d7      	b.n	25990 <settings_fcb_save+0x88>
		if (loc1.loc.fe_sector != cf->cf_fcb.f_oldest) {
   259e0:	6aab      	ldr	r3, [r5, #40]	; 0x28
   259e2:	9a12      	ldr	r2, [sp, #72]	; 0x48
   259e4:	429a      	cmp	r2, r3
   259e6:	d1e3      	bne.n	259b0 <settings_fcb_save+0xa8>
		rc = settings_line_name_read(name1, sizeof(name1), &val1_off,
   259e8:	ab12      	add	r3, sp, #72	; 0x48
   259ea:	aa07      	add	r2, sp, #28
   259ec:	2149      	movs	r1, #73	; 0x49
   259ee:	a81c      	add	r0, sp, #112	; 0x70
   259f0:	f01d f837 	bl	42a62 <settings_line_name_read>
		if (rc) {
   259f4:	2800      	cmp	r0, #0
   259f6:	d1d6      	bne.n	259a6 <settings_fcb_save+0x9e>
		if (val1_off + 1 == loc1.loc.fe_data_len) {
   259f8:	9b07      	ldr	r3, [sp, #28]
   259fa:	f8bd 2054 	ldrh.w	r2, [sp, #84]	; 0x54
   259fe:	3301      	adds	r3, #1
   25a00:	4293      	cmp	r3, r2
   25a02:	d0d0      	beq.n	259a6 <settings_fcb_save+0x9e>
		loc2 = loc1;
   25a04:	f10d 0c5c 	add.w	ip, sp, #92	; 0x5c
   25a08:	f10d 0e48 	add.w	lr, sp, #72	; 0x48
   25a0c:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
   25a10:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   25a14:	f8de 3000 	ldr.w	r3, [lr]
   25a18:	f8cc 3000 	str.w	r3, [ip]
		while (fcb_getnext(&cf->cf_fcb, &loc2.loc) == 0) {
   25a1c:	a917      	add	r1, sp, #92	; 0x5c
   25a1e:	4620      	mov	r0, r4
   25a20:	f01c f979 	bl	41d16 <fcb_getnext>
   25a24:	b358      	cbz	r0, 25a7e <settings_fcb_save+0x176>
		rc = fcb_append(&cf->cf_fcb, loc1.loc.fe_data_len, &loc2.loc);
   25a26:	aa17      	add	r2, sp, #92	; 0x5c
   25a28:	f8bd 1054 	ldrh.w	r1, [sp, #84]	; 0x54
   25a2c:	4620      	mov	r0, r4
   25a2e:	f7ff f88b 	bl	24b48 <fcb_append>
		if (rc) {
   25a32:	4603      	mov	r3, r0
   25a34:	2800      	cmp	r0, #0
   25a36:	d1b6      	bne.n	259a6 <settings_fcb_save+0x9e>
		rc = settings_line_entry_copy(&loc2, 0, &loc1, 0,
   25a38:	f8bd 2054 	ldrh.w	r2, [sp, #84]	; 0x54
   25a3c:	4601      	mov	r1, r0
   25a3e:	9200      	str	r2, [sp, #0]
   25a40:	a817      	add	r0, sp, #92	; 0x5c
   25a42:	aa12      	add	r2, sp, #72	; 0x48
   25a44:	f7ff fe80 	bl	25748 <settings_line_entry_copy>
		if (rc) {
   25a48:	2800      	cmp	r0, #0
   25a4a:	d1ac      	bne.n	259a6 <settings_fcb_save+0x9e>
		rc = fcb_append_finish(&cf->cf_fcb, &loc2.loc);
   25a4c:	a917      	add	r1, sp, #92	; 0x5c
   25a4e:	4620      	mov	r0, r4
   25a50:	f01b ff1f 	bl	41892 <fcb_append_finish>
		if (rc != 0) {
   25a54:	4601      	mov	r1, r0
   25a56:	2800      	cmp	r0, #0
   25a58:	d0a5      	beq.n	259a6 <settings_fcb_save+0x9e>
			LOG_ERR("Failed to finish fcb_append (%d)", rc);
   25a5a:	f8db 3000 	ldr.w	r3, [fp]
   25a5e:	0758      	lsls	r0, r3, #29
   25a60:	d0a1      	beq.n	259a6 <settings_fcb_save+0x9e>
   25a62:	f029 033f 	bic.w	r3, r9, #63	; 0x3f
   25a66:	f043 0301 	orr.w	r3, r3, #1
   25a6a:	f363 0907 	bfi	r9, r3, #0, #8
   25a6e:	9b04      	ldr	r3, [sp, #16]
   25a70:	481e      	ldr	r0, [pc, #120]	; (25aec <settings_fcb_save+0x1e4>)
   25a72:	f363 198f 	bfi	r9, r3, #6, #10
   25a76:	464a      	mov	r2, r9
   25a78:	f01a fff0 	bl	40a5c <log_1>
   25a7c:	e793      	b.n	259a6 <settings_fcb_save+0x9e>
			rc = settings_line_name_read(name2, sizeof(name2),
   25a7e:	ab17      	add	r3, sp, #92	; 0x5c
   25a80:	aa08      	add	r2, sp, #32
   25a82:	2149      	movs	r1, #73	; 0x49
   25a84:	a82f      	add	r0, sp, #188	; 0xbc
   25a86:	f01c ffec 	bl	42a62 <settings_line_name_read>
			if (rc) {
   25a8a:	2800      	cmp	r0, #0
   25a8c:	d1c6      	bne.n	25a1c <settings_fcb_save+0x114>
			if ((val1_off == val2_off) &&
   25a8e:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
   25a92:	429a      	cmp	r2, r3
   25a94:	d1c2      	bne.n	25a1c <settings_fcb_save+0x114>
			    !memcmp(name1, name2, val1_off)) {
   25a96:	a92f      	add	r1, sp, #188	; 0xbc
   25a98:	a81c      	add	r0, sp, #112	; 0x70
   25a9a:	f01f f9cb 	bl	44e34 <memcmp>
			if ((val1_off == val2_off) &&
   25a9e:	2800      	cmp	r0, #0
   25aa0:	d1bc      	bne.n	25a1c <settings_fcb_save+0x114>
   25aa2:	e780      	b.n	259a6 <settings_fcb_save+0x9e>
	if (rc) {
   25aa4:	2800      	cmp	r0, #0
   25aa6:	f47f af49 	bne.w	2593c <settings_fcb_save+0x34>
	loc.fap = cf->cf_fcb.fap;
   25aaa:	6c2a      	ldr	r2, [r5, #64]	; 0x40
	rc = settings_line_write(name, value, val_len, 0, (void *)&loc);
   25aac:	9903      	ldr	r1, [sp, #12]
	loc.fap = cf->cf_fcb.fap;
   25aae:	9211      	str	r2, [sp, #68]	; 0x44
	rc = settings_line_write(name, value, val_len, 0, (void *)&loc);
   25ab0:	f8cd 8000 	str.w	r8, [sp]
   25ab4:	463a      	mov	r2, r7
   25ab6:	4630      	mov	r0, r6
   25ab8:	f7ff fdd8 	bl	2566c <settings_line_write>
	if (rc != -EIO) {
   25abc:	1d43      	adds	r3, r0, #5
	rc = settings_line_write(name, value, val_len, 0, (void *)&loc);
   25abe:	4605      	mov	r5, r0
	if (rc != -EIO) {
   25ac0:	d006      	beq.n	25ad0 <settings_fcb_save+0x1c8>
		i = fcb_append_finish(&cf->cf_fcb, &loc.loc);
   25ac2:	4641      	mov	r1, r8
   25ac4:	4620      	mov	r0, r4
   25ac6:	f01b fee4 	bl	41892 <fcb_append_finish>
			rc = i;
   25aca:	2d00      	cmp	r5, #0
   25acc:	bf08      	it	eq
   25ace:	4605      	moveq	r5, r0
		return 0;
	}
	return settings_fcb_save_priv(cs, name, (char *)value, val_len);
}
   25ad0:	4628      	mov	r0, r5
   25ad2:	b043      	add	sp, #268	; 0x10c
   25ad4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return 0;
   25ad8:	4625      	mov	r5, r4
   25ada:	e7f9      	b.n	25ad0 <settings_fcb_save+0x1c8>
   25adc:	00042a83 	.word	0x00042a83
   25ae0:	00046090 	.word	0x00046090
   25ae4:	00045f08 	.word	0x00045f08
   25ae8:	00049554 	.word	0x00049554
   25aec:	00049533 	.word	0x00049533
   25af0:	20032b48 	.word	0x20032b48

00025af4 <settings_fcb_src>:
	cf->cf_fcb.f_version = SETTINGS_FCB_VERS;
   25af4:	2301      	movs	r3, #1
{
   25af6:	b570      	push	{r4, r5, r6, lr}
   25af8:	4604      	mov	r4, r0
	cf->cf_fcb.f_version = SETTINGS_FCB_VERS;
   25afa:	7303      	strb	r3, [r0, #12]
	cf->cf_fcb.f_scratch_cnt = 1;
   25afc:	7383      	strb	r3, [r0, #14]
		rc = fcb_init(FLASH_AREA_STORAGE_ID, &cf->cf_fcb);
   25afe:	f100 0608 	add.w	r6, r0, #8
   25b02:	4631      	mov	r1, r6
   25b04:	2007      	movs	r0, #7
   25b06:	f01b ff9c 	bl	41a42 <fcb_init>
		if (rc) {
   25b0a:	4605      	mov	r5, r0
   25b0c:	b9b0      	cbnz	r0, 25b3c <settings_fcb_src+0x48>
		if (fcb_free_sector_cnt(&cf->cf_fcb) < 1) {
   25b0e:	4630      	mov	r0, r6
   25b10:	f01b ff2a 	bl	41968 <fcb_free_sector_cnt>
   25b14:	2800      	cmp	r0, #0
   25b16:	dc0a      	bgt.n	25b2e <settings_fcb_src+0x3a>
					cf->cf_fcb.f_active.fe_sector->fs_off,
   25b18:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
			rc = flash_area_erase(cf->cf_fcb.fap,
   25b1a:	6c20      	ldr	r0, [r4, #64]	; 0x40
   25b1c:	e9d3 1200 	ldrd	r1, r2, [r3]
   25b20:	f01c ff17 	bl	42952 <flash_area_erase>
			if (rc) {
   25b24:	2800      	cmp	r0, #0
   25b26:	d0ec      	beq.n	25b02 <settings_fcb_src+0xe>
				return -EIO;
   25b28:	f06f 0504 	mvn.w	r5, #4
   25b2c:	e004      	b.n	25b38 <settings_fcb_src+0x44>
	cf->cf_store.cs_itf = &settings_fcb_itf;
   25b2e:	4b05      	ldr	r3, [pc, #20]	; (25b44 <settings_fcb_src+0x50>)
	settings_src_register(&cf->cf_store);
   25b30:	4620      	mov	r0, r4
	cf->cf_store.cs_itf = &settings_fcb_itf;
   25b32:	6063      	str	r3, [r4, #4]
	settings_src_register(&cf->cf_store);
   25b34:	f7ff fb78 	bl	25228 <settings_src_register>
}
   25b38:	4628      	mov	r0, r5
   25b3a:	bd70      	pop	{r4, r5, r6, pc}
			return -EINVAL;
   25b3c:	f06f 0515 	mvn.w	r5, #21
   25b40:	e7fa      	b.n	25b38 <settings_fcb_src+0x44>
   25b42:	bf00      	nop
   25b44:	0004676c 	.word	0x0004676c

00025b48 <settings_mount_fcb_backend>:
{
	u8_t rbs;

	rbs = cf->cf_fcb.f_align;

	settings_line_io_init(read_handler, write_handler, get_len_cb, rbs);
   25b48:	f890 303e 	ldrb.w	r3, [r0, #62]	; 0x3e
   25b4c:	4a02      	ldr	r2, [pc, #8]	; (25b58 <settings_mount_fcb_backend+0x10>)
   25b4e:	4903      	ldr	r1, [pc, #12]	; (25b5c <settings_mount_fcb_backend+0x14>)
   25b50:	4803      	ldr	r0, [pc, #12]	; (25b60 <settings_mount_fcb_backend+0x18>)
   25b52:	f7ff be23 	b.w	2579c <settings_line_io_init>
   25b56:	bf00      	nop
   25b58:	00042aff 	.word	0x00042aff
   25b5c:	00042b03 	.word	0x00042b03
   25b60:	00042b17 	.word	0x00042b17

00025b64 <settings_backend_init>:
		settings_fcb_area[CONFIG_SETTINGS_FCB_NUM_AREAS + 1];
	static struct settings_fcb config_init_settings_fcb = {
		.cf_fcb.f_magic = CONFIG_SETTINGS_FCB_MAGIC,
		.cf_fcb.f_sectors = settings_fcb_area,
	};
	u32_t cnt = sizeof(settings_fcb_area) /
   25b64:	2309      	movs	r3, #9
{
   25b66:	b537      	push	{r0, r1, r2, r4, r5, lr}
		    sizeof(settings_fcb_area[0]);
	int rc;
	const struct flash_area *fap;

	rc = flash_area_get_sectors(FLASH_AREA_STORAGE_ID, &cnt,
   25b68:	4a22      	ldr	r2, [pc, #136]	; (25bf4 <settings_backend_init+0x90>)
   25b6a:	4669      	mov	r1, sp
   25b6c:	2007      	movs	r0, #7
	u32_t cnt = sizeof(settings_fcb_area) /
   25b6e:	9300      	str	r3, [sp, #0]
	rc = flash_area_get_sectors(FLASH_AREA_STORAGE_ID, &cnt,
   25b70:	f7ff fb10 	bl	25194 <flash_area_get_sectors>
				    settings_fcb_area);
	if (rc == -ENODEV) {
   25b74:	f110 0f13 	cmn.w	r0, #19
   25b78:	d03a      	beq.n	25bf0 <settings_backend_init+0x8c>
		return rc;
	} else if (rc != 0 && rc != -ENOMEM) {
   25b7a:	b138      	cbz	r0, 25b8c <settings_backend_init+0x28>
   25b7c:	300c      	adds	r0, #12
   25b7e:	d005      	beq.n	25b8c <settings_backend_init+0x28>
		k_panic();
   25b80:	4040      	eors	r0, r0
   25b82:	f380 8811 	msr	BASEPRI, r0
   25b86:	f04f 0004 	mov.w	r0, #4
   25b8a:	df02      	svc	2
	}

	config_init_settings_fcb.cf_fcb.f_sector_cnt = cnt;
   25b8c:	4c1a      	ldr	r4, [pc, #104]	; (25bf8 <settings_backend_init+0x94>)
   25b8e:	9b00      	ldr	r3, [sp, #0]

	rc = settings_fcb_src(&config_init_settings_fcb);
   25b90:	4620      	mov	r0, r4
	config_init_settings_fcb.cf_fcb.f_sector_cnt = cnt;
   25b92:	7363      	strb	r3, [r4, #13]
	rc = settings_fcb_src(&config_init_settings_fcb);
   25b94:	f7ff ffae 	bl	25af4 <settings_fcb_src>

	if (rc != 0) {
   25b98:	b308      	cbz	r0, 25bde <settings_backend_init+0x7a>
		rc = flash_area_open(FLASH_AREA_STORAGE_ID, &fap);
   25b9a:	a901      	add	r1, sp, #4
   25b9c:	2007      	movs	r0, #7
   25b9e:	f7ff fae5 	bl	2516c <flash_area_open>

		if (rc == 0) {
   25ba2:	4601      	mov	r1, r0
   25ba4:	b160      	cbz	r0, 25bc0 <settings_backend_init+0x5c>
			rc = flash_area_erase(fap, 0, fap->fa_size);
			flash_area_close(fap);
		}

		if (rc != 0) {
			k_panic();
   25ba6:	4040      	eors	r0, r0
   25ba8:	f380 8811 	msr	BASEPRI, r0
   25bac:	f04f 0004 	mov.w	r0, #4
   25bb0:	df02      	svc	2
			rc = settings_fcb_src(&config_init_settings_fcb);
		}
	}

	if (rc != 0) {
		k_panic();
   25bb2:	4040      	eors	r0, r0
   25bb4:	f380 8811 	msr	BASEPRI, r0
   25bb8:	f04f 0004 	mov.w	r0, #4
   25bbc:	df02      	svc	2
   25bbe:	e00e      	b.n	25bde <settings_backend_init+0x7a>
			rc = flash_area_erase(fap, 0, fap->fa_size);
   25bc0:	9801      	ldr	r0, [sp, #4]
   25bc2:	6882      	ldr	r2, [r0, #8]
   25bc4:	f01c fec5 	bl	42952 <flash_area_erase>
   25bc8:	4605      	mov	r5, r0
			flash_area_close(fap);
   25bca:	9801      	ldr	r0, [sp, #4]
   25bcc:	f01c fe7a 	bl	428c4 <flash_area_close>
		if (rc != 0) {
   25bd0:	2d00      	cmp	r5, #0
   25bd2:	d1e8      	bne.n	25ba6 <settings_backend_init+0x42>
			rc = settings_fcb_src(&config_init_settings_fcb);
   25bd4:	4620      	mov	r0, r4
   25bd6:	f7ff ff8d 	bl	25af4 <settings_fcb_src>
	if (rc != 0) {
   25bda:	2800      	cmp	r0, #0
   25bdc:	d1e9      	bne.n	25bb2 <settings_backend_init+0x4e>
	cf->cf_store.cs_itf = &settings_fcb_itf;
   25bde:	4b07      	ldr	r3, [pc, #28]	; (25bfc <settings_backend_init+0x98>)
	settings_dst_register(&cf->cf_store);
   25be0:	4805      	ldr	r0, [pc, #20]	; (25bf8 <settings_backend_init+0x94>)
	cf->cf_store.cs_itf = &settings_fcb_itf;
   25be2:	6063      	str	r3, [r4, #4]
	settings_dst_register(&cf->cf_store);
   25be4:	f7ff fb40 	bl	25268 <settings_dst_register>

	if (rc != 0) {
		k_panic();
	}

	settings_mount_fcb_backend(&config_init_settings_fcb);
   25be8:	4803      	ldr	r0, [pc, #12]	; (25bf8 <settings_backend_init+0x94>)
   25bea:	f7ff ffad 	bl	25b48 <settings_mount_fcb_backend>

	return rc;
   25bee:	2000      	movs	r0, #0
}
   25bf0:	b003      	add	sp, #12
   25bf2:	bd30      	pop	{r4, r5, pc}
   25bf4:	200223f8 	.word	0x200223f8
   25bf8:	200323c4 	.word	0x200323c4
   25bfc:	0004676c 	.word	0x0004676c

00025c00 <sys_reboot>:

extern void sys_arch_reboot(int type);
extern void sys_clock_disable(void);

void sys_reboot(int type)
{
   25c00:	b508      	push	{r3, lr}
   25c02:	4604      	mov	r4, r0
	__asm__ volatile(
   25c04:	f04f 0220 	mov.w	r2, #32
   25c08:	f3ef 8311 	mrs	r3, BASEPRI
   25c0c:	f382 8811 	msr	BASEPRI, r2
   25c10:	f3bf 8f6f 	isb	sy
	(void)irq_lock();
#ifdef CONFIG_SYS_CLOCK_EXISTS
	sys_clock_disable();
   25c14:	f01c ffbe 	bl	42b94 <sys_clock_disable>
#endif

	sys_arch_reboot(type);
   25c18:	4620      	mov	r0, r4
   25c1a:	f001 fa27 	bl	2706c <sys_arch_reboot>

	/* should never get here */
	printk("Failed to reboot: spinning endlessly...\n");
   25c1e:	4803      	ldr	r0, [pc, #12]	; (25c2c <sys_reboot+0x2c>)
   25c20:	f01a fcef 	bl	40602 <printk>
 * @return N/A
 * @req K-CPU-IDLE-001
 */
static inline void k_cpu_idle(void)
{
	arch_cpu_idle();
   25c24:	f000 fc7c 	bl	26520 <arch_cpu_idle>
   25c28:	e7fc      	b.n	25c24 <sys_reboot+0x24>
   25c2a:	bf00      	nop
   25c2c:	00049574 	.word	0x00049574

00025c30 <console_out>:
		return c;
	}

#endif  /* CONFIG_UART_CONSOLE_DEBUG_SERVER_HOOKS */

	if ('\n' == c) {
   25c30:	280a      	cmp	r0, #10
{
   25c32:	b538      	push	{r3, r4, r5, lr}
   25c34:	4604      	mov	r4, r0
   25c36:	4d07      	ldr	r5, [pc, #28]	; (25c54 <console_out+0x24>)
	if ('\n' == c) {
   25c38:	d104      	bne.n	25c44 <console_out+0x14>
   25c3a:	6828      	ldr	r0, [r5, #0]
	api->poll_out(dev, out_char);
   25c3c:	6843      	ldr	r3, [r0, #4]
   25c3e:	210d      	movs	r1, #13
   25c40:	685b      	ldr	r3, [r3, #4]
   25c42:	4798      	blx	r3
		uart_poll_out(uart_console_dev, '\r');
	}
	uart_poll_out(uart_console_dev, c);
   25c44:	6828      	ldr	r0, [r5, #0]
   25c46:	6843      	ldr	r3, [r0, #4]
   25c48:	b2e1      	uxtb	r1, r4
   25c4a:	685b      	ldr	r3, [r3, #4]
   25c4c:	4798      	blx	r3

	return c;
}
   25c4e:	4620      	mov	r0, r4
   25c50:	bd38      	pop	{r3, r4, r5, pc}
   25c52:	bf00      	nop
   25c54:	20022440 	.word	0x20022440

00025c58 <uart_console_hook_install>:
 *
 * @return N/A
 */

void uart_console_hook_install(void)
{
   25c58:	b510      	push	{r4, lr}
	__stdout_hook_install(console_out);
   25c5a:	4c04      	ldr	r4, [pc, #16]	; (25c6c <uart_console_hook_install+0x14>)
   25c5c:	4620      	mov	r0, r4
   25c5e:	f001 fcd5 	bl	2760c <__stdout_hook_install>
	__printk_hook_install(console_out);
   25c62:	4620      	mov	r0, r4
}
   25c64:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	__printk_hook_install(console_out);
   25c68:	f7fb bd40 	b.w	216ec <__printk_hook_install>
   25c6c:	00025c31 	.word	0x00025c31

00025c70 <uart_console_init>:
 * @brief Initialize one UART as the console/debug port
 *
 * @return 0 if successful, otherwise failed.
 */
static int uart_console_init(struct device *arg)
{
   25c70:	b508      	push	{r3, lr}
   25c72:	4804      	ldr	r0, [pc, #16]	; (25c84 <uart_console_init+0x14>)
   25c74:	f015 fa08 	bl	3b088 <z_impl_device_get_binding>

	ARG_UNUSED(arg);

	uart_console_dev = device_get_binding(CONFIG_UART_CONSOLE_ON_DEV_NAME);
   25c78:	4b03      	ldr	r3, [pc, #12]	; (25c88 <uart_console_init+0x18>)
   25c7a:	6018      	str	r0, [r3, #0]
		}
	}
	k_busy_wait(1000000);
#endif

	uart_console_hook_install();
   25c7c:	f7ff ffec 	bl	25c58 <uart_console_hook_install>

	return 0;
}
   25c80:	2000      	movs	r0, #0
   25c82:	bd08      	pop	{r3, pc}
   25c84:	00048aa1 	.word	0x00048aa1
   25c88:	20022440 	.word	0x20022440

00025c8c <clk_init>:
 * symbol.
 */
void nrf_power_clock_isr(void *arg);

static int clk_init(struct device *dev)
{
   25c8c:	b510      	push	{r4, lr}
	IRQ_CONNECT(DT_INST_0_NORDIC_NRF_CLOCK_IRQ_0,
   25c8e:	2200      	movs	r2, #0
{
   25c90:	4604      	mov	r4, r0
	IRQ_CONNECT(DT_INST_0_NORDIC_NRF_CLOCK_IRQ_0,
   25c92:	2101      	movs	r1, #1
   25c94:	2005      	movs	r0, #5
   25c96:	f000 fca1 	bl	265dc <z_arm_irq_priority_set>
		    DT_INST_0_NORDIC_NRF_CLOCK_IRQ_0_PRIORITY,
		    nrf_power_clock_isr, 0, 0);

	irq_enable(DT_INST_0_NORDIC_NRF_CLOCK_IRQ_0);
   25c9a:	2005      	movs	r0, #5
   25c9c:	f000 fc8e 	bl	265bc <arch_irq_enable>
    return false;
}

NRF_STATIC_INLINE void nrf_clock_lf_src_set(NRF_CLOCK_Type * p_reg, nrf_clock_lfclk_t source)
{
    p_reg->LFCLKSRC = (uint32_t)(source);
   25ca0:	2202      	movs	r2, #2
   25ca2:	4b07      	ldr	r3, [pc, #28]	; (25cc0 <clk_init+0x34>)
	list->head = NULL;
   25ca4:	2000      	movs	r0, #0
   25ca6:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    p_reg->INTENSET = mask;
   25caa:	2203      	movs	r2, #3
   25cac:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304

	clock_irqs_enable();

	for (enum clock_control_nrf_type i = 0;
		i < CLOCK_CONTROL_NRF_TYPE_COUNT; i++) {
		sys_slist_init(&(get_sub_data(dev, i)->list));
   25cb0:	68a3      	ldr	r3, [r4, #8]
	list->tail = NULL;
   25cb2:	e9c3 0000 	strd	r0, r0, [r3]
   25cb6:	68a3      	ldr	r3, [r4, #8]
   25cb8:	e9c3 0003 	strd	r0, r0, [r3, #12]
	}

	return 0;
}
   25cbc:	bd10      	pop	{r4, pc}
   25cbe:	bf00      	nop
   25cc0:	40005000 	.word	0x40005000

00025cc4 <get_status>:
{
   25cc4:	b538      	push	{r3, r4, r5, lr}
	__ASSERT_NO_MSG(type < CLOCK_CONTROL_NRF_TYPE_COUNT);
   25cc6:	b2cc      	uxtb	r4, r1
   25cc8:	2c01      	cmp	r4, #1
{
   25cca:	4605      	mov	r5, r0
	__ASSERT_NO_MSG(type < CLOCK_CONTROL_NRF_TYPE_COUNT);
   25ccc:	d909      	bls.n	25ce2 <get_status+0x1e>
   25cce:	490b      	ldr	r1, [pc, #44]	; (25cfc <get_status+0x38>)
   25cd0:	480b      	ldr	r0, [pc, #44]	; (25d00 <get_status+0x3c>)
   25cd2:	2384      	movs	r3, #132	; 0x84
   25cd4:	4a0b      	ldr	r2, [pc, #44]	; (25d04 <get_status+0x40>)
   25cd6:	f01a fc94 	bl	40602 <printk>
   25cda:	2184      	movs	r1, #132	; 0x84
   25cdc:	4809      	ldr	r0, [pc, #36]	; (25d04 <get_status+0x40>)
   25cde:	f01a fd53 	bl	40788 <assert_post_action>
	if (data->started) {
   25ce2:	210c      	movs	r1, #12
	data = get_sub_data(dev, type);
   25ce4:	68ab      	ldr	r3, [r5, #8]
	if (data->started) {
   25ce6:	fb04 3101 	mla	r1, r4, r1, r3
   25cea:	7a4b      	ldrb	r3, [r1, #9]
   25cec:	b923      	cbnz	r3, 25cf8 <get_status+0x34>
	if (data->ref > 0) {
   25cee:	7a08      	ldrb	r0, [r1, #8]
		return CLOCK_CONTROL_STATUS_ON;
   25cf0:	fab0 f080 	clz	r0, r0
   25cf4:	0940      	lsrs	r0, r0, #5
}
   25cf6:	bd38      	pop	{r3, r4, r5, pc}
		return CLOCK_CONTROL_STATUS_ON;
   25cf8:	2002      	movs	r0, #2
   25cfa:	e7fc      	b.n	25cf6 <get_status+0x32>
   25cfc:	00049638 	.word	0x00049638
   25d00:	0004764f 	.word	0x0004764f
   25d04:	000495fd 	.word	0x000495fd

00025d08 <clock_async_start>:
{
   25d08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	enum clock_control_nrf_type type = (enum clock_control_nrf_type)subsys;
   25d0c:	b2ce      	uxtb	r6, r1
	__ASSERT_NO_MSG(type < CLOCK_CONTROL_NRF_TYPE_COUNT);
   25d0e:	2e01      	cmp	r6, #1
{
   25d10:	4607      	mov	r7, r0
   25d12:	4614      	mov	r4, r2
	__ASSERT_NO_MSG(type < CLOCK_CONTROL_NRF_TYPE_COUNT);
   25d14:	d909      	bls.n	25d2a <clock_async_start+0x22>
   25d16:	4949      	ldr	r1, [pc, #292]	; (25e3c <clock_async_start+0x134>)
   25d18:	4849      	ldr	r0, [pc, #292]	; (25e40 <clock_async_start+0x138>)
   25d1a:	23fd      	movs	r3, #253	; 0xfd
   25d1c:	4a49      	ldr	r2, [pc, #292]	; (25e44 <clock_async_start+0x13c>)
   25d1e:	f01a fc70 	bl	40602 <printk>
   25d22:	21fd      	movs	r1, #253	; 0xfd
   25d24:	4847      	ldr	r0, [pc, #284]	; (25e44 <clock_async_start+0x13c>)
   25d26:	f01a fd2f 	bl	40788 <assert_post_action>
	const struct nrf_clock_control_config *config =
   25d2a:	683b      	ldr	r3, [r7, #0]
	clk_data = get_sub_data(dev, type);
   25d2c:	f8d7 8008 	ldr.w	r8, [r7, #8]
	const struct nrf_clock_control_config *config =
   25d30:	f8d3 9008 	ldr.w	r9, [r3, #8]
	__ASSERT_NO_MSG((data == NULL) ||
   25d34:	2c00      	cmp	r4, #0
   25d36:	d157      	bne.n	25de8 <clock_async_start+0xe0>
   25d38:	f04f 0320 	mov.w	r3, #32
   25d3c:	f3ef 8a11 	mrs	sl, BASEPRI
   25d40:	f383 8811 	msr	BASEPRI, r3
   25d44:	f3bf 8f6f 	isb	sy
	ref = ++clk_data->ref;
   25d48:	230c      	movs	r3, #12
   25d4a:	fb03 8306 	mla	r3, r3, r6, r8
   25d4e:	7a1d      	ldrb	r5, [r3, #8]
   25d50:	3501      	adds	r5, #1
   25d52:	b2ed      	uxtb	r5, r5
   25d54:	721d      	strb	r5, [r3, #8]
	__ASSERT_NO_MSG(clk_data->ref > 0);
   25d56:	b95d      	cbnz	r5, 25d70 <clock_async_start+0x68>
   25d58:	493b      	ldr	r1, [pc, #236]	; (25e48 <clock_async_start+0x140>)
   25d5a:	4839      	ldr	r0, [pc, #228]	; (25e40 <clock_async_start+0x138>)
   25d5c:	f44f 7387 	mov.w	r3, #270	; 0x10e
   25d60:	4a38      	ldr	r2, [pc, #224]	; (25e44 <clock_async_start+0x13c>)
   25d62:	f01a fc4e 	bl	40602 <printk>
   25d66:	f44f 7187 	mov.w	r1, #270	; 0x10e
   25d6a:	4836      	ldr	r0, [pc, #216]	; (25e44 <clock_async_start+0x13c>)
   25d6c:	f01a fd0c 	bl	40788 <assert_post_action>
	__asm__ volatile(
   25d70:	f38a 8811 	msr	BASEPRI, sl
   25d74:	f3bf 8f6f 	isb	sy
	if (data) {
   25d78:	b32c      	cbz	r4, 25dc6 <clock_async_start+0xbe>
    p_reg->INTENCLR = mask;
   25d7a:	2203      	movs	r2, #3
   25d7c:	4b33      	ldr	r3, [pc, #204]	; (25e4c <clock_async_start+0x144>)
   25d7e:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
		already_started = clk_data->started;
   25d82:	220c      	movs	r2, #12
   25d84:	4372      	muls	r2, r6
   25d86:	eb08 0302 	add.w	r3, r8, r2
   25d8a:	7a59      	ldrb	r1, [r3, #9]
		if (!already_started) {
   25d8c:	b991      	cbnz	r1, 25db4 <clock_async_start+0xac>
	__asm__ volatile(
   25d8e:	f04f 0020 	mov.w	r0, #32
   25d92:	f3ef 8c11 	mrs	ip, BASEPRI
   25d96:	f380 8811 	msr	BASEPRI, r0
   25d9a:	f3bf 8f6f 	isb	sy
	parent->next = child;
   25d9e:	6021      	str	r1, [r4, #0]
Z_GENLIST_APPEND(slist, snode)
   25da0:	6858      	ldr	r0, [r3, #4]
   25da2:	2800      	cmp	r0, #0
   25da4:	d13a      	bne.n	25e1c <clock_async_start+0x114>
	list->tail = node;
   25da6:	605c      	str	r4, [r3, #4]
	list->head = node;
   25da8:	f848 4002 	str.w	r4, [r8, r2]
	__asm__ volatile(
   25dac:	f38c 8811 	msr	BASEPRI, ip
   25db0:	f3bf 8f6f 	isb	sy
    p_reg->INTENSET = mask;
   25db4:	2203      	movs	r2, #3
   25db6:	4b25      	ldr	r3, [pc, #148]	; (25e4c <clock_async_start+0x144>)
   25db8:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
		if (already_started) {
   25dbc:	b119      	cbz	r1, 25dc6 <clock_async_start+0xbe>
			data->cb(dev, data->user_data);
   25dbe:	e9d4 3101 	ldrd	r3, r1, [r4, #4]
   25dc2:	4638      	mov	r0, r7
   25dc4:	4798      	blx	r3
	if (ref == 1) {
   25dc6:	2d01      	cmp	r5, #1
   25dc8:	d10c      	bne.n	25de4 <clock_async_start+0xdc>
		do_start =  (config->start_handler) ?
   25dca:	0135      	lsls	r5, r6, #4
   25dcc:	f859 3005 	ldr.w	r3, [r9, r5]
				config->start_handler(dev) : true;
   25dd0:	bb3b      	cbnz	r3, 25e22 <clock_async_start+0x11a>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   25dd2:	2201      	movs	r2, #1
			nrf_clock_task_trigger(NRF_CLOCK,
   25dd4:	44a9      	add	r9, r5
   25dd6:	f899 300a 	ldrb.w	r3, [r9, #10]
   25dda:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   25dde:	f503 43a0 	add.w	r3, r3, #20480	; 0x5000
   25de2:	601a      	str	r2, [r3, #0]
	return 0;
   25de4:	2000      	movs	r0, #0
   25de6:	e027      	b.n	25e38 <clock_async_start+0x130>
	__ASSERT_NO_MSG((data == NULL) ||
   25de8:	6863      	ldr	r3, [r4, #4]
   25dea:	b95b      	cbnz	r3, 25e04 <clock_async_start+0xfc>
   25dec:	4918      	ldr	r1, [pc, #96]	; (25e50 <clock_async_start+0x148>)
   25dee:	4814      	ldr	r0, [pc, #80]	; (25e40 <clock_async_start+0x138>)
   25df0:	f44f 7381 	mov.w	r3, #258	; 0x102
   25df4:	4a13      	ldr	r2, [pc, #76]	; (25e44 <clock_async_start+0x13c>)
   25df6:	f01a fc04 	bl	40602 <printk>
   25dfa:	f44f 7181 	mov.w	r1, #258	; 0x102
   25dfe:	4811      	ldr	r0, [pc, #68]	; (25e44 <clock_async_start+0x13c>)
   25e00:	f01a fcc2 	bl	40788 <assert_post_action>
	sys_snode_t *item = sys_slist_peek_head(list);
   25e04:	230c      	movs	r3, #12
   25e06:	4373      	muls	r3, r6
   25e08:	f858 3003 	ldr.w	r3, [r8, r3]
		if (item == node) {
   25e0c:	429c      	cmp	r4, r3
   25e0e:	d011      	beq.n	25e34 <clock_async_start+0x12c>
Z_GENLIST_PEEK_NEXT(slist, snode)
   25e10:	2b00      	cmp	r3, #0
   25e12:	d091      	beq.n	25d38 <clock_async_start+0x30>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   25e14:	681b      	ldr	r3, [r3, #0]
	} while (item);
   25e16:	2b00      	cmp	r3, #0
   25e18:	d1f8      	bne.n	25e0c <clock_async_start+0x104>
   25e1a:	e78d      	b.n	25d38 <clock_async_start+0x30>
	parent->next = child;
   25e1c:	6004      	str	r4, [r0, #0]
	list->tail = node;
   25e1e:	605c      	str	r4, [r3, #4]
   25e20:	e7c4      	b.n	25dac <clock_async_start+0xa4>
				config->start_handler(dev) : true;
   25e22:	4638      	mov	r0, r7
   25e24:	4798      	blx	r3
   25e26:	2800      	cmp	r0, #0
   25e28:	d1d3      	bne.n	25dd2 <clock_async_start+0xca>
			clkstarted_handle(dev, type);
   25e2a:	4631      	mov	r1, r6
   25e2c:	4638      	mov	r0, r7
   25e2e:	f01c fe8a 	bl	42b46 <clkstarted_handle>
   25e32:	e7d7      	b.n	25de4 <clock_async_start+0xdc>
		return -EBUSY;
   25e34:	f06f 000f 	mvn.w	r0, #15
}
   25e38:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   25e3c:	00049638 	.word	0x00049638
   25e40:	0004764f 	.word	0x0004764f
   25e44:	000495fd 	.word	0x000495fd
   25e48:	000495eb 	.word	0x000495eb
   25e4c:	40005000 	.word	0x40005000
   25e50:	0004959d 	.word	0x0004959d

00025e54 <clock_stop>:
{
   25e54:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	__ASSERT_NO_MSG(type < CLOCK_CONTROL_NRF_TYPE_COUNT);
   25e58:	b2cd      	uxtb	r5, r1
   25e5a:	2d01      	cmp	r5, #1
{
   25e5c:	4680      	mov	r8, r0
	__ASSERT_NO_MSG(type < CLOCK_CONTROL_NRF_TYPE_COUNT);
   25e5e:	d909      	bls.n	25e74 <clock_stop+0x20>
   25e60:	4925      	ldr	r1, [pc, #148]	; (25ef8 <clock_stop+0xa4>)
   25e62:	4826      	ldr	r0, [pc, #152]	; (25efc <clock_stop+0xa8>)
   25e64:	2399      	movs	r3, #153	; 0x99
   25e66:	4a26      	ldr	r2, [pc, #152]	; (25f00 <clock_stop+0xac>)
   25e68:	f01a fbcb 	bl	40602 <printk>
   25e6c:	2199      	movs	r1, #153	; 0x99
   25e6e:	4824      	ldr	r0, [pc, #144]	; (25f00 <clock_stop+0xac>)
   25e70:	f01a fc8a 	bl	40788 <assert_post_action>
	const struct nrf_clock_control_config *config =
   25e74:	f8d8 3000 	ldr.w	r3, [r8]
	data = get_sub_data(dev, type);
   25e78:	f8d8 7008 	ldr.w	r7, [r8, #8]
	const struct nrf_clock_control_config *config =
   25e7c:	f8d3 9008 	ldr.w	r9, [r3, #8]
	__asm__ volatile(
   25e80:	f04f 0320 	mov.w	r3, #32
   25e84:	f3ef 8611 	mrs	r6, BASEPRI
   25e88:	f383 8811 	msr	BASEPRI, r3
   25e8c:	f3bf 8f6f 	isb	sy
	if (data->ref == 0) {
   25e90:	220c      	movs	r2, #12
   25e92:	436a      	muls	r2, r5
   25e94:	18b9      	adds	r1, r7, r2
   25e96:	7a0b      	ldrb	r3, [r1, #8]
   25e98:	b34b      	cbz	r3, 25eee <clock_stop+0x9a>
	data->ref--;
   25e9a:	3b01      	subs	r3, #1
   25e9c:	b2db      	uxtb	r3, r3
   25e9e:	720b      	strb	r3, [r1, #8]
	if (data->ref == 0) {
   25ea0:	bb43      	cbnz	r3, 25ef4 <clock_stop+0xa0>
		do_stop =  (config->stop_handler) ?
   25ea2:	012c      	lsls	r4, r5, #4
	list->head = NULL;
   25ea4:	50bb      	str	r3, [r7, r2]
	list->tail = NULL;
   25ea6:	604b      	str	r3, [r1, #4]
   25ea8:	eb09 0304 	add.w	r3, r9, r4
   25eac:	685b      	ldr	r3, [r3, #4]
				config->stop_handler(dev) : true;
   25eae:	b9cb      	cbnz	r3, 25ee4 <clock_stop+0x90>
   25eb0:	2201      	movs	r2, #1
			nrf_clock_task_trigger(NRF_CLOCK, config->stop_tsk);
   25eb2:	444c      	add	r4, r9
   25eb4:	7ae3      	ldrb	r3, [r4, #11]
   25eb6:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   25eba:	f503 43a0 	add.w	r3, r3, #20480	; 0x5000
   25ebe:	601a      	str	r2, [r3, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   25ec0:	2200      	movs	r2, #0
   25ec2:	8923      	ldrh	r3, [r4, #8]
   25ec4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   25ec8:	f503 43a0 	add.w	r3, r3, #20480	; 0x5000
   25ecc:	601a      	str	r2, [r3, #0]
		data->started = false;
   25ece:	230c      	movs	r3, #12
   25ed0:	2000      	movs	r0, #0
   25ed2:	fb05 7503 	mla	r5, r5, r3, r7
   25ed6:	7268      	strb	r0, [r5, #9]
	__asm__ volatile(
   25ed8:	f386 8811 	msr	BASEPRI, r6
   25edc:	f3bf 8f6f 	isb	sy
}
   25ee0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				config->stop_handler(dev) : true;
   25ee4:	4640      	mov	r0, r8
   25ee6:	4798      	blx	r3
   25ee8:	2800      	cmp	r0, #0
   25eea:	d1e1      	bne.n	25eb0 <clock_stop+0x5c>
   25eec:	e7ef      	b.n	25ece <clock_stop+0x7a>
		err = -EALREADY;
   25eee:	f06f 0077 	mvn.w	r0, #119	; 0x77
   25ef2:	e7f1      	b.n	25ed8 <clock_stop+0x84>
	int err = 0;
   25ef4:	2000      	movs	r0, #0
   25ef6:	e7ef      	b.n	25ed8 <clock_stop+0x84>
   25ef8:	00049638 	.word	0x00049638
   25efc:	0004764f 	.word	0x0004764f
   25f00:	000495fd 	.word	0x000495fd

00025f04 <nrf_power_clock_isr>:
	}
#endif
}

void nrf_power_clock_isr(void *arg)
{
   25f04:	b508      	push	{r3, lr}
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
   25f06:	4b10      	ldr	r3, [pc, #64]	; (25f48 <nrf_power_clock_isr+0x44>)
   25f08:	681a      	ldr	r2, [r3, #0]
	bool ret = nrf_clock_event_check(NRF_CLOCK, evt) &&
   25f0a:	b162      	cbz	r2, 25f26 <nrf_power_clock_isr+0x22>
    return p_reg->INTENSET & mask;
   25f0c:	4a0f      	ldr	r2, [pc, #60]	; (25f4c <nrf_power_clock_isr+0x48>)
   25f0e:	f8d2 2304 	ldr.w	r2, [r2, #772]	; 0x304
	if (ret) {
   25f12:	07d1      	lsls	r1, r2, #31
   25f14:	d507      	bpl.n	25f26 <nrf_power_clock_isr+0x22>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   25f16:	2200      	movs	r2, #0
	struct device *dev = DEVICE_GET(clock_nrf);

	if (clock_event_check_and_clean(NRF_CLOCK_EVENT_HFCLKSTARTED,
					NRF_CLOCK_INT_HF_STARTED_MASK)) {
		struct nrf_clock_control_sub_data *data =
				get_sub_data(dev, CLOCK_CONTROL_NRF_TYPE_HFCLK);
   25f18:	480d      	ldr	r0, [pc, #52]	; (25f50 <nrf_power_clock_isr+0x4c>)
   25f1a:	601a      	str	r2, [r3, #0]

		/* Check needed due to anomaly 201:
		 * HFCLKSTARTED may be generated twice.
		 */
		if (!data->started) {
   25f1c:	6883      	ldr	r3, [r0, #8]
   25f1e:	7a59      	ldrb	r1, [r3, #9]
   25f20:	b909      	cbnz	r1, 25f26 <nrf_power_clock_isr+0x22>
			clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_HFCLK);
   25f22:	f01c fe10 	bl	42b46 <clkstarted_handle>
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
   25f26:	4b0b      	ldr	r3, [pc, #44]	; (25f54 <nrf_power_clock_isr+0x50>)
   25f28:	681a      	ldr	r2, [r3, #0]
	bool ret = nrf_clock_event_check(NRF_CLOCK, evt) &&
   25f2a:	b162      	cbz	r2, 25f46 <nrf_power_clock_isr+0x42>
    return p_reg->INTENSET & mask;
   25f2c:	4a07      	ldr	r2, [pc, #28]	; (25f4c <nrf_power_clock_isr+0x48>)
   25f2e:	f8d2 2304 	ldr.w	r2, [r2, #772]	; 0x304
	if (ret) {
   25f32:	0792      	lsls	r2, r2, #30
   25f34:	d507      	bpl.n	25f46 <nrf_power_clock_isr+0x42>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   25f36:	2200      	movs	r2, #0
					NRF_CLOCK_INT_LF_STARTED_MASK)) {
		if (IS_ENABLED(
			CONFIG_CLOCK_CONTROL_NRF_K32SRC_RC_CALIBRATION)) {
			z_nrf_clock_calibration_lfclk_started(dev);
		}
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_LFCLK);
   25f38:	2101      	movs	r1, #1
   25f3a:	601a      	str	r2, [r3, #0]
   25f3c:	4804      	ldr	r0, [pc, #16]	; (25f50 <nrf_power_clock_isr+0x4c>)
	usb_power_isr();

	if (IS_ENABLED(CONFIG_CLOCK_CONTROL_NRF_K32SRC_RC_CALIBRATION)) {
		z_nrf_clock_calibration_isr();
	}
}
   25f3e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_LFCLK);
   25f42:	f01c be00 	b.w	42b46 <clkstarted_handle>
}
   25f46:	bd08      	pop	{r3, pc}
   25f48:	40005100 	.word	0x40005100
   25f4c:	40005000 	.word	0x40005000
   25f50:	200328f8 	.word	0x200328f8
   25f54:	40005104 	.word	0x40005104

00025f58 <channel_name_get>:

static void channel_name_get(size_t idx, struct shell_static_entry *entry)
{
	int cnt = 0;

	entry->syntax = NULL;
   25f58:	2300      	movs	r3, #0
	entry->handler = NULL;
	entry->help  = NULL;
	entry->subcmd = &dsub_channel_name;
   25f5a:	4a0a      	ldr	r2, [pc, #40]	; (25f84 <channel_name_get+0x2c>)
{
   25f5c:	b530      	push	{r4, r5, lr}
	entry->subcmd = &dsub_channel_name;
   25f5e:	608a      	str	r2, [r1, #8]
	int cnt = 0;
   25f60:	461a      	mov	r2, r3
   25f62:	4c09      	ldr	r4, [pc, #36]	; (25f88 <channel_name_get+0x30>)
	entry->syntax = NULL;
   25f64:	600b      	str	r3, [r1, #0]
	entry->handler = NULL;
   25f66:	60cb      	str	r3, [r1, #12]
	entry->help  = NULL;
   25f68:	604b      	str	r3, [r1, #4]

	for (int i = 0; i < SENSOR_CHAN_ALL; i++) {
		if (sensor_channel_name[i] != NULL) {
   25f6a:	f854 5b04 	ldr.w	r5, [r4], #4
   25f6e:	b125      	cbz	r5, 25f7a <channel_name_get+0x22>
			if (cnt == idx) {
   25f70:	4282      	cmp	r2, r0
   25f72:	d101      	bne.n	25f78 <channel_name_get+0x20>
				entry->syntax = sensor_channel_name[i];
   25f74:	600d      	str	r5, [r1, #0]
				break;
			}
			cnt++;
		}
	}
}
   25f76:	bd30      	pop	{r4, r5, pc}
			cnt++;
   25f78:	3201      	adds	r2, #1
	for (int i = 0; i < SENSOR_CHAN_ALL; i++) {
   25f7a:	3301      	adds	r3, #1
   25f7c:	2b25      	cmp	r3, #37	; 0x25
   25f7e:	d1f4      	bne.n	25f6a <channel_name_get+0x12>
   25f80:	e7f9      	b.n	25f76 <channel_name_get+0x1e>
   25f82:	bf00      	nop
   25f84:	000467c4 	.word	0x000467c4
   25f88:	20032408 	.word	0x20032408

00025f8c <device_name_get>:
static void device_name_get(size_t idx, struct shell_static_entry *entry);

SHELL_DYNAMIC_CMD_CREATE(dsub_device_name, device_name_get);

static void device_name_get(size_t idx, struct shell_static_entry *entry)
{
   25f8c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	int device_idx = 0;
	struct device *dev;

	entry->syntax = NULL;
   25f90:	2400      	movs	r4, #0
{
   25f92:	4680      	mov	r8, r0
   25f94:	460e      	mov	r6, r1
	entry->handler = NULL;
	entry->help  = NULL;
	entry->subcmd = &dsub_channel_name;
   25f96:	4a0f      	ldr	r2, [pc, #60]	; (25fd4 <device_name_get+0x48>)

	for (dev = __device_init_start; dev != __device_init_end; dev++) {
   25f98:	4d0f      	ldr	r5, [pc, #60]	; (25fd8 <device_name_get+0x4c>)
   25f9a:	4f10      	ldr	r7, [pc, #64]	; (25fdc <device_name_get+0x50>)
		if ((dev->driver_api != NULL) &&
		strcmp(dev->config->name, "") && (dev->config->name != NULL)) {
   25f9c:	f8df 9040 	ldr.w	r9, [pc, #64]	; 25fe0 <device_name_get+0x54>
	entry->syntax = NULL;
   25fa0:	600c      	str	r4, [r1, #0]
	entry->handler = NULL;
   25fa2:	60cc      	str	r4, [r1, #12]
	entry->help  = NULL;
   25fa4:	604c      	str	r4, [r1, #4]
	entry->subcmd = &dsub_channel_name;
   25fa6:	608a      	str	r2, [r1, #8]
	for (dev = __device_init_start; dev != __device_init_end; dev++) {
   25fa8:	42bd      	cmp	r5, r7
   25faa:	d00d      	beq.n	25fc8 <device_name_get+0x3c>
		if ((dev->driver_api != NULL) &&
   25fac:	686b      	ldr	r3, [r5, #4]
   25fae:	b173      	cbz	r3, 25fce <device_name_get+0x42>
		strcmp(dev->config->name, "") && (dev->config->name != NULL)) {
   25fb0:	682b      	ldr	r3, [r5, #0]
   25fb2:	4649      	mov	r1, r9
   25fb4:	6818      	ldr	r0, [r3, #0]
   25fb6:	f7f7 f8a5 	bl	1d104 <strcmp>
		if ((dev->driver_api != NULL) &&
   25fba:	b140      	cbz	r0, 25fce <device_name_get+0x42>
		strcmp(dev->config->name, "") && (dev->config->name != NULL)) {
   25fbc:	682b      	ldr	r3, [r5, #0]
   25fbe:	681b      	ldr	r3, [r3, #0]
   25fc0:	b12b      	cbz	r3, 25fce <device_name_get+0x42>
			if (idx == device_idx) {
   25fc2:	4544      	cmp	r4, r8
   25fc4:	d102      	bne.n	25fcc <device_name_get+0x40>
				entry->syntax = dev->config->name;
   25fc6:	6033      	str	r3, [r6, #0]
				break;
			}
			device_idx++;
		}
	}
}
   25fc8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			device_idx++;
   25fcc:	3401      	adds	r4, #1
	for (dev = __device_init_start; dev != __device_init_end; dev++) {
   25fce:	350c      	adds	r5, #12
   25fd0:	e7ea      	b.n	25fa8 <device_name_get+0x1c>
   25fd2:	bf00      	nop
   25fd4:	000467c4 	.word	0x000467c4
   25fd8:	200328c8 	.word	0x200328c8
   25fdc:	20032a84 	.word	0x20032a84
   25fe0:	0004a299 	.word	0x0004a299

00025fe4 <cmd_get_sensor>:
{
   25fe4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   25fe8:	4606      	mov	r6, r0
   25fea:	4688      	mov	r8, r1
   25fec:	4617      	mov	r7, r2
	dev = device_get_binding(argv[1]);
   25fee:	6850      	ldr	r0, [r2, #4]
   25ff0:	f015 f84a 	bl	3b088 <z_impl_device_get_binding>
	if (dev == NULL) {
   25ff4:	4605      	mov	r5, r0
   25ff6:	b928      	cbnz	r0, 26004 <cmd_get_sensor+0x20>
		shell_error(shell, "Device unknown (%s)", argv[1]);
   25ff8:	687b      	ldr	r3, [r7, #4]
   25ffa:	4a1d      	ldr	r2, [pc, #116]	; (26070 <cmd_get_sensor+0x8c>)
   25ffc:	2102      	movs	r1, #2
   25ffe:	4630      	mov	r0, r6
   26000:	f7fd fc0a 	bl	23818 <shell_fprintf>
	return api->sample_fetch(dev, SENSOR_CHAN_ALL);
   26004:	686b      	ldr	r3, [r5, #4]
   26006:	2125      	movs	r1, #37	; 0x25
   26008:	689b      	ldr	r3, [r3, #8]
   2600a:	4628      	mov	r0, r5
   2600c:	4798      	blx	r3
	if (err < 0) {
   2600e:	2800      	cmp	r0, #0
   26010:	da04      	bge.n	2601c <cmd_get_sensor+0x38>
		shell_error(shell, "Failed to read sensor");
   26012:	4a18      	ldr	r2, [pc, #96]	; (26074 <cmd_get_sensor+0x90>)
   26014:	2102      	movs	r1, #2
   26016:	4630      	mov	r0, r6
   26018:	f7fd fbfe 	bl	23818 <shell_fprintf>
	if (argc == 2) {
   2601c:	f1b8 0f02 	cmp.w	r8, #2
   26020:	d121      	bne.n	26066 <cmd_get_sensor+0x82>
		for (int i = 0; i < ARRAY_SIZE(sensor_channel_name); i++) {
   26022:	2400      	movs	r4, #0
   26024:	4f14      	ldr	r7, [pc, #80]	; (26078 <cmd_get_sensor+0x94>)
			if (sensor_channel_name[i]) {
   26026:	f857 2b04 	ldr.w	r2, [r7], #4
   2602a:	b11a      	cbz	r2, 26034 <cmd_get_sensor+0x50>
				handle_channel_by_name(shell, dev,
   2602c:	4629      	mov	r1, r5
   2602e:	4630      	mov	r0, r6
   26030:	f7f7 f8f6 	bl	1d220 <handle_channel_by_name>
		for (int i = 0; i < ARRAY_SIZE(sensor_channel_name); i++) {
   26034:	3401      	adds	r4, #1
   26036:	2c25      	cmp	r4, #37	; 0x25
   26038:	d1f5      	bne.n	26026 <cmd_get_sensor+0x42>
}
   2603a:	2000      	movs	r0, #0
   2603c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			err = handle_channel_by_name(shell, dev, argv[i]);
   26040:	f857 2024 	ldr.w	r2, [r7, r4, lsl #2]
   26044:	4629      	mov	r1, r5
   26046:	4630      	mov	r0, r6
   26048:	f7f7 f8ea 	bl	1d220 <handle_channel_by_name>
			if (err < 0) {
   2604c:	2800      	cmp	r0, #0
   2604e:	da06      	bge.n	2605e <cmd_get_sensor+0x7a>
				shell_error(shell,
   26050:	f857 3024 	ldr.w	r3, [r7, r4, lsl #2]
   26054:	464a      	mov	r2, r9
   26056:	2102      	movs	r1, #2
   26058:	4630      	mov	r0, r6
   2605a:	f7fd fbdd 	bl	23818 <shell_fprintf>
		for (int i = 2; i < argc; i++) {
   2605e:	3401      	adds	r4, #1
   26060:	45a0      	cmp	r8, r4
   26062:	d8ed      	bhi.n	26040 <cmd_get_sensor+0x5c>
   26064:	e7e9      	b.n	2603a <cmd_get_sensor+0x56>
   26066:	2402      	movs	r4, #2
				shell_error(shell,
   26068:	f8df 9010 	ldr.w	r9, [pc, #16]	; 2607c <cmd_get_sensor+0x98>
   2606c:	e7f8      	b.n	26060 <cmd_get_sensor+0x7c>
   2606e:	bf00      	nop
   26070:	0004967c 	.word	0x0004967c
   26074:	00049691 	.word	0x00049691
   26078:	20032408 	.word	0x20032408
   2607c:	000496a8 	.word	0x000496a8

00026080 <z_clock_isr>:
#include <drivers/timer/system_timer.h>

/* Weak-linked noop defaults for optional driver interfaces: */

void __weak z_clock_isr(void *arg)
{
   26080:	b510      	push	{r4, lr}
	__ASSERT_NO_MSG(false);
   26082:	4c06      	ldr	r4, [pc, #24]	; (2609c <z_clock_isr+0x1c>)
   26084:	4906      	ldr	r1, [pc, #24]	; (260a0 <z_clock_isr+0x20>)
   26086:	4622      	mov	r2, r4
   26088:	4806      	ldr	r0, [pc, #24]	; (260a4 <z_clock_isr+0x24>)
   2608a:	2317      	movs	r3, #23
   2608c:	f01a fab9 	bl	40602 <printk>
   26090:	4620      	mov	r0, r4
}
   26092:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	__ASSERT_NO_MSG(false);
   26096:	2117      	movs	r1, #23
   26098:	f01a bb76 	b.w	40788 <assert_post_action>
   2609c:	000498c9 	.word	0x000498c9
   260a0:	0004d39b 	.word	0x0004d39b
   260a4:	0004764f 	.word	0x0004764f

000260a8 <rtc1_nrf_isr>:
 * symbol.
 */
void rtc1_nrf_isr(void *arg)
{
	ARG_UNUSED(arg);
	RTC->EVENTS_COMPARE[0] = 0;
   260a8:	2200      	movs	r2, #0
{
   260aa:	b538      	push	{r3, r4, r5, lr}
	RTC->EVENTS_COMPARE[0] = 0;
   260ac:	4b22      	ldr	r3, [pc, #136]	; (26138 <rtc1_nrf_isr+0x90>)
   260ae:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
	__asm__ volatile(
   260b2:	f04f 0320 	mov.w	r3, #32
   260b6:	f3ef 8511 	mrs	r5, BASEPRI
   260ba:	f383 8811 	msr	BASEPRI, r3
   260be:	f3bf 8f6f 	isb	sy
	 * actually a wrapper for a global spinlock!
	 */
	k.key = arch_irq_lock();

#ifdef CONFIG_SPIN_VALIDATE
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   260c2:	481e      	ldr	r0, [pc, #120]	; (2613c <rtc1_nrf_isr+0x94>)
   260c4:	f017 fadc 	bl	3d680 <z_spin_lock_valid>
   260c8:	b968      	cbnz	r0, 260e6 <rtc1_nrf_isr+0x3e>
   260ca:	234a      	movs	r3, #74	; 0x4a
   260cc:	4a1c      	ldr	r2, [pc, #112]	; (26140 <rtc1_nrf_isr+0x98>)
   260ce:	491d      	ldr	r1, [pc, #116]	; (26144 <rtc1_nrf_isr+0x9c>)
   260d0:	481d      	ldr	r0, [pc, #116]	; (26148 <rtc1_nrf_isr+0xa0>)
   260d2:	f01a fa96 	bl	40602 <printk>
   260d6:	4919      	ldr	r1, [pc, #100]	; (2613c <rtc1_nrf_isr+0x94>)
   260d8:	481c      	ldr	r0, [pc, #112]	; (2614c <rtc1_nrf_isr+0xa4>)
   260da:	f01a fa92 	bl	40602 <printk>
   260de:	214a      	movs	r1, #74	; 0x4a
   260e0:	4817      	ldr	r0, [pc, #92]	; (26140 <rtc1_nrf_isr+0x98>)
   260e2:	f01a fb51 	bl	40788 <assert_post_action>
	while (!atomic_cas(&l->locked, 0, 1)) {
	}
#endif

#ifdef CONFIG_SPIN_VALIDATE
	z_spin_lock_set_owner(l);
   260e6:	4815      	ldr	r0, [pc, #84]	; (2613c <rtc1_nrf_isr+0x94>)
   260e8:	f017 fae8 	bl	3d6bc <z_spin_lock_set_owner>
#endif
}

NRF_STATIC_INLINE uint32_t nrf_rtc_counter_get(NRF_RTC_Type const * p_reg)
{
     return p_reg->COUNTER;
   260ec:	4b12      	ldr	r3, [pc, #72]	; (26138 <rtc1_nrf_isr+0x90>)

	k_spinlock_key_t key = k_spin_lock(&lock);
	u32_t t = counter();
	u32_t dticks = counter_sub(t, last_count) / CYC_PER_TICK;
   260ee:	4a18      	ldr	r2, [pc, #96]	; (26150 <rtc1_nrf_isr+0xa8>)
   260f0:	f8d3 4504 	ldr.w	r4, [r3, #1284]	; 0x504
   260f4:	6813      	ldr	r3, [r2, #0]
static ALWAYS_INLINE void k_spin_unlock(struct k_spinlock *l,
					k_spinlock_key_t key)
{
	ARG_UNUSED(l);
#ifdef CONFIG_SPIN_VALIDATE
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   260f6:	4811      	ldr	r0, [pc, #68]	; (2613c <rtc1_nrf_isr+0x94>)
	return (a - b) & COUNTER_MAX;
   260f8:	1ae4      	subs	r4, r4, r3
   260fa:	f024 447f 	bic.w	r4, r4, #4278190080	; 0xff000000

	last_count += dticks * CYC_PER_TICK;
   260fe:	4423      	add	r3, r4
   26100:	6013      	str	r3, [r2, #0]
   26102:	f017 facb 	bl	3d69c <z_spin_unlock_valid>
   26106:	b968      	cbnz	r0, 26124 <rtc1_nrf_isr+0x7c>
   26108:	235d      	movs	r3, #93	; 0x5d
   2610a:	4a0d      	ldr	r2, [pc, #52]	; (26140 <rtc1_nrf_isr+0x98>)
   2610c:	4911      	ldr	r1, [pc, #68]	; (26154 <rtc1_nrf_isr+0xac>)
   2610e:	480e      	ldr	r0, [pc, #56]	; (26148 <rtc1_nrf_isr+0xa0>)
   26110:	f01a fa77 	bl	40602 <printk>
   26114:	4909      	ldr	r1, [pc, #36]	; (2613c <rtc1_nrf_isr+0x94>)
   26116:	4810      	ldr	r0, [pc, #64]	; (26158 <rtc1_nrf_isr+0xb0>)
   26118:	f01a fa73 	bl	40602 <printk>
   2611c:	215d      	movs	r1, #93	; 0x5d
   2611e:	4808      	ldr	r0, [pc, #32]	; (26140 <rtc1_nrf_isr+0x98>)
   26120:	f01a fb32 	bl	40788 <assert_post_action>
	__asm__ volatile(
   26124:	f385 8811 	msr	BASEPRI, r5
   26128:	f3bf 8f6f 	isb	sy
		}
		set_comparator(next);
	}

	k_spin_unlock(&lock, key);
	z_clock_announce(IS_ENABLED(CONFIG_TICKLESS_KERNEL) ? dticks : 1);
   2612c:	4620      	mov	r0, r4
}
   2612e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_clock_announce(IS_ENABLED(CONFIG_TICKLESS_KERNEL) ? dticks : 1);
   26132:	f017 bf1b 	b.w	3df6c <z_clock_announce>
   26136:	bf00      	nop
   26138:	40015000 	.word	0x40015000
   2613c:	20022460 	.word	0x20022460
   26140:	000498fb 	.word	0x000498fb
   26144:	00049921 	.word	0x00049921
   26148:	0004764f 	.word	0x0004764f
   2614c:	00049936 	.word	0x00049936
   26150:	2002245c 	.word	0x2002245c
   26154:	0004994e 	.word	0x0004994e
   26158:	00049965 	.word	0x00049965

0002615c <z_clock_driver_init>:

int z_clock_driver_init(struct device *device)
{
   2615c:	b570      	push	{r4, r5, r6, lr}
   2615e:	4815      	ldr	r0, [pc, #84]	; (261b4 <z_clock_driver_init+0x58>)
   26160:	f014 ff92 	bl	3b088 <z_impl_device_get_binding>
	struct device *clock;

	ARG_UNUSED(device);

	clock = device_get_binding(DT_INST_0_NORDIC_NRF_CLOCK_LABEL);
	if (!clock) {
   26164:	b310      	cbz	r0, 261ac <z_clock_driver_init+0x50>
				   clock_control_subsys_t sys)
{
	const struct clock_control_driver_api *api =
		(const struct clock_control_driver_api *)dev->driver_api;

	return api->on(dev, sys);
   26166:	6843      	ldr	r3, [r0, #4]
   26168:	2101      	movs	r1, #1
   2616a:	681b      	ldr	r3, [r3, #0]
   2616c:	4798      	blx	r3
}

NRF_STATIC_INLINE void nrf_rtc_prescaler_set(NRF_RTC_Type * p_reg, uint32_t val)
{
    NRFX_ASSERT(val <= (RTC_PRESCALER_PRESCALER_Msk >> RTC_PRESCALER_PRESCALER_Pos));
    p_reg->PRESCALER = val;
   2616e:	2400      	movs	r4, #0
    p_reg->CC[ch] = cc_val;
   26170:	2601      	movs	r6, #1
    p_reg->INTENSET = mask;
   26172:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   26176:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
    p_reg->PRESCALER = val;
   2617a:	4d0f      	ldr	r5, [pc, #60]	; (261b8 <z_clock_driver_init+0x5c>)

	/* Clear the event flag and possible pending interrupt */
	nrf_rtc_event_clear(RTC, NRF_RTC_EVENT_COMPARE_0);
	NVIC_ClearPendingIRQ(RTC1_IRQn);

	IRQ_CONNECT(RTC1_IRQn, 1, rtc1_nrf_isr, 0, 0);
   2617c:	4631      	mov	r1, r6
   2617e:	f8c5 4508 	str.w	r4, [r5, #1288]	; 0x508
    p_reg->CC[ch] = cc_val;
   26182:	f8c5 6540 	str.w	r6, [r5, #1344]	; 0x540
    p_reg->INTENSET = mask;
   26186:	f8c5 3304 	str.w	r3, [r5, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   2618a:	4b0c      	ldr	r3, [pc, #48]	; (261bc <z_clock_driver_init+0x60>)
   2618c:	2015      	movs	r0, #21
   2618e:	601c      	str	r4, [r3, #0]
   26190:	4b0b      	ldr	r3, [pc, #44]	; (261c0 <z_clock_driver_init+0x64>)
   26192:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
   26196:	4622      	mov	r2, r4
   26198:	f000 fa20 	bl	265dc <z_arm_irq_priority_set>
	irq_enable(RTC1_IRQn);
   2619c:	2015      	movs	r0, #21
   2619e:	f000 fa0d 	bl	265bc <arch_irq_enable>

	if (!IS_ENABLED(CONFIG_TICKLESS_KERNEL)) {
		set_comparator(counter() + CYC_PER_TICK);
	}

	return 0;
   261a2:	4620      	mov	r0, r4
    return (uint32_t)p_reg + task;
}

NRF_STATIC_INLINE void nrf_rtc_task_trigger(NRF_RTC_Type * p_reg, nrf_rtc_task_t task)
{
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
   261a4:	4b07      	ldr	r3, [pc, #28]	; (261c4 <z_clock_driver_init+0x68>)
   261a6:	601e      	str	r6, [r3, #0]
   261a8:	602e      	str	r6, [r5, #0]
}
   261aa:	bd70      	pop	{r4, r5, r6, pc}
		return -1;
   261ac:	f04f 30ff 	mov.w	r0, #4294967295
   261b0:	e7fb      	b.n	261aa <z_clock_driver_init+0x4e>
   261b2:	bf00      	nop
   261b4:	0004965c 	.word	0x0004965c
   261b8:	40015000 	.word	0x40015000
   261bc:	40015140 	.word	0x40015140
   261c0:	e000e100 	.word	0xe000e100
   261c4:	40015008 	.word	0x40015008

000261c8 <z_clock_set_timeout>:

void z_clock_set_timeout(s32_t ticks, bool idle)
{
   261c8:	b570      	push	{r4, r5, r6, lr}
	ARG_UNUSED(idle);

#ifdef CONFIG_TICKLESS_KERNEL
	ticks = (ticks == K_FOREVER) ? MAX_TICKS : ticks;
   261ca:	4c3a      	ldr	r4, [pc, #232]	; (262b4 <z_clock_set_timeout+0xec>)
   261cc:	f1b0 3fff 	cmp.w	r0, #4294967295
   261d0:	bf18      	it	ne
   261d2:	4604      	movne	r4, r0
	__asm__ volatile(
   261d4:	f04f 0320 	mov.w	r3, #32
   261d8:	f3ef 8511 	mrs	r5, BASEPRI
   261dc:	f383 8811 	msr	BASEPRI, r3
   261e0:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   261e4:	4834      	ldr	r0, [pc, #208]	; (262b8 <z_clock_set_timeout+0xf0>)
   261e6:	f017 fa4b 	bl	3d680 <z_spin_lock_valid>
   261ea:	b968      	cbnz	r0, 26208 <z_clock_set_timeout+0x40>
   261ec:	234a      	movs	r3, #74	; 0x4a
   261ee:	4a33      	ldr	r2, [pc, #204]	; (262bc <z_clock_set_timeout+0xf4>)
   261f0:	4933      	ldr	r1, [pc, #204]	; (262c0 <z_clock_set_timeout+0xf8>)
   261f2:	4834      	ldr	r0, [pc, #208]	; (262c4 <z_clock_set_timeout+0xfc>)
   261f4:	f01a fa05 	bl	40602 <printk>
   261f8:	492f      	ldr	r1, [pc, #188]	; (262b8 <z_clock_set_timeout+0xf0>)
   261fa:	4833      	ldr	r0, [pc, #204]	; (262c8 <z_clock_set_timeout+0x100>)
   261fc:	f01a fa01 	bl	40602 <printk>
   26200:	214a      	movs	r1, #74	; 0x4a
   26202:	482e      	ldr	r0, [pc, #184]	; (262bc <z_clock_set_timeout+0xf4>)
   26204:	f01a fac0 	bl	40788 <assert_post_action>
	z_spin_lock_set_owner(l);
   26208:	482b      	ldr	r0, [pc, #172]	; (262b8 <z_clock_set_timeout+0xf0>)
   2620a:	f017 fa57 	bl	3d6bc <z_spin_lock_set_owner>
     return p_reg->COUNTER;
   2620e:	4b2f      	ldr	r3, [pc, #188]	; (262cc <z_clock_set_timeout+0x104>)
   26210:	4e28      	ldr	r6, [pc, #160]	; (262b4 <z_clock_set_timeout+0xec>)
   26212:	f8d3 2504 	ldr.w	r2, [r3, #1284]	; 0x504
	ticks = MAX(MIN(ticks - 1, (s32_t)MAX_TICKS), 0);

	k_spinlock_key_t key = k_spin_lock(&lock);
	u32_t cyc, dt, t = counter();
	u32_t unannounced = counter_sub(t, last_count);
   26216:	4b2e      	ldr	r3, [pc, #184]	; (262d0 <z_clock_set_timeout+0x108>)
   26218:	681b      	ldr	r3, [r3, #0]
	return (a - b) & COUNTER_MAX;
   2621a:	1ad0      	subs	r0, r2, r3
	/* If we haven't announced for more than half the 24-bit wrap
	 * duration, then force an announce to avoid loss of a wrap
	 * event.  This can happen if new timeouts keep being set
	 * before the existing one triggers the interrupt.
	 */
	if (unannounced >= COUNTER_HALF_SPAN) {
   2621c:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
	return (a - b) & COUNTER_MAX;
   26220:	f020 417f 	bic.w	r1, r0, #4278190080	; 0xff000000
	if (unannounced >= COUNTER_HALF_SPAN) {
   26224:	d12c      	bne.n	26280 <z_clock_set_timeout+0xb8>
	ticks = MAX(MIN(ticks - 1, (s32_t)MAX_TICKS), 0);
   26226:	1e60      	subs	r0, r4, #1
   26228:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   2622c:	42b0      	cmp	r0, r6
   2622e:	bfa8      	it	ge
   26230:	4630      	movge	r0, r6
	}

	/* Get the cycles from last_count to the tick boundary after
	 * the requested ticks have passed starting now.
	 */
	cyc = ticks * CYC_PER_TICK + 1 + unannounced;
   26232:	3101      	adds	r1, #1
   26234:	4408      	add	r0, r1
	 */
	if (cyc > MAX_CYCLES) {
		cyc = MAX_CYCLES;
	}

	cyc += last_count;
   26236:	42b0      	cmp	r0, r6
   26238:	bf94      	ite	ls
   2623a:	181b      	addls	r3, r3, r0
   2623c:	199b      	addhi	r3, r3, r6
	return (a - b) & COUNTER_MAX;
   2623e:	1a9a      	subs	r2, r3, r2
   26240:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
   26244:	4921      	ldr	r1, [pc, #132]	; (262cc <z_clock_set_timeout+0x104>)
   26246:	f023 407f 	bic.w	r0, r3, #4278190080	; 0xff000000
	 * least on nRF52.  Some experimentation on nrf52840 shows
	 * that you need to be early by about 400 processor cycles
	 * (about 1/5th of a RTC cycle) in order to reliably get the
	 * interrupt.  The docs say two cycles, they mean two cycles.
	 */
	if (counter_sub(cyc, t) > 2) {
   2624a:	2a02      	cmp	r2, #2
    p_reg->CC[ch] = cc_val;
   2624c:	f8c1 0540 	str.w	r0, [r1, #1344]	; 0x540
   26250:	d918      	bls.n	26284 <z_clock_set_timeout+0xbc>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   26252:	4819      	ldr	r0, [pc, #100]	; (262b8 <z_clock_set_timeout+0xf0>)
   26254:	f017 fa22 	bl	3d69c <z_spin_unlock_valid>
   26258:	b968      	cbnz	r0, 26276 <z_clock_set_timeout+0xae>
   2625a:	235d      	movs	r3, #93	; 0x5d
   2625c:	4a17      	ldr	r2, [pc, #92]	; (262bc <z_clock_set_timeout+0xf4>)
   2625e:	491d      	ldr	r1, [pc, #116]	; (262d4 <z_clock_set_timeout+0x10c>)
   26260:	4818      	ldr	r0, [pc, #96]	; (262c4 <z_clock_set_timeout+0xfc>)
   26262:	f01a f9ce 	bl	40602 <printk>
   26266:	4914      	ldr	r1, [pc, #80]	; (262b8 <z_clock_set_timeout+0xf0>)
   26268:	481b      	ldr	r0, [pc, #108]	; (262d8 <z_clock_set_timeout+0x110>)
   2626a:	f01a f9ca 	bl	40602 <printk>
   2626e:	215d      	movs	r1, #93	; 0x5d
   26270:	4812      	ldr	r0, [pc, #72]	; (262bc <z_clock_set_timeout+0xf4>)
   26272:	f01a fa89 	bl	40788 <assert_post_action>
	__asm__ volatile(
   26276:	f385 8811 	msr	BASEPRI, r5
   2627a:	f3bf 8f6f 	isb	sy
	}
#endif

	k_spin_unlock(&lock, key);
#endif /* CONFIG_TICKLESS_KERNEL */
}
   2627e:	bd70      	pop	{r4, r5, r6, pc}
		ticks = 0;
   26280:	2000      	movs	r0, #0
   26282:	e7d6      	b.n	26232 <z_clock_set_timeout+0x6a>
     return p_reg->COUNTER;
   26284:	f8d1 2504 	ldr.w	r2, [r1, #1284]	; 0x504
		if (dt == 0 || dt > 0x7fffff) {
   26288:	4814      	ldr	r0, [pc, #80]	; (262dc <z_clock_set_timeout+0x114>)
	return (a - b) & COUNTER_MAX;
   2628a:	1a9a      	subs	r2, r3, r2
   2628c:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
		if (dt == 0 || dt > 0x7fffff) {
   26290:	1e54      	subs	r4, r2, #1
   26292:	4284      	cmp	r4, r0
   26294:	d905      	bls.n	262a2 <z_clock_set_timeout+0xda>
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   26296:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
   2629a:	4b11      	ldr	r3, [pc, #68]	; (262e0 <z_clock_set_timeout+0x118>)
   2629c:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
   262a0:	e7d7      	b.n	26252 <z_clock_set_timeout+0x8a>
		} else if (dt == 1) {
   262a2:	2a01      	cmp	r2, #1
			set_comparator(cyc + 2);
   262a4:	bf02      	ittt	eq
   262a6:	3302      	addeq	r3, #2
	nrf_rtc_cc_set(RTC, 0, cyc & COUNTER_MAX);
   262a8:	f023 437f 	biceq.w	r3, r3, #4278190080	; 0xff000000
    p_reg->CC[ch] = cc_val;
   262ac:	f8c1 3540 	streq.w	r3, [r1, #1344]	; 0x540
   262b0:	e7cf      	b.n	26252 <z_clock_set_timeout+0x8a>
   262b2:	bf00      	nop
   262b4:	00fffffe 	.word	0x00fffffe
   262b8:	20022460 	.word	0x20022460
   262bc:	000498fb 	.word	0x000498fb
   262c0:	00049921 	.word	0x00049921
   262c4:	0004764f 	.word	0x0004764f
   262c8:	00049936 	.word	0x00049936
   262cc:	40015000 	.word	0x40015000
   262d0:	2002245c 	.word	0x2002245c
   262d4:	0004994e 	.word	0x0004994e
   262d8:	00049965 	.word	0x00049965
   262dc:	007ffffe 	.word	0x007ffffe
   262e0:	e000e100 	.word	0xe000e100

000262e4 <z_clock_elapsed>:

u32_t z_clock_elapsed(void)
{
   262e4:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
   262e6:	f04f 0320 	mov.w	r3, #32
   262ea:	f3ef 8511 	mrs	r5, BASEPRI
   262ee:	f383 8811 	msr	BASEPRI, r3
   262f2:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   262f6:	481a      	ldr	r0, [pc, #104]	; (26360 <z_clock_elapsed+0x7c>)
   262f8:	f017 f9c2 	bl	3d680 <z_spin_lock_valid>
   262fc:	b968      	cbnz	r0, 2631a <z_clock_elapsed+0x36>
   262fe:	234a      	movs	r3, #74	; 0x4a
   26300:	4a18      	ldr	r2, [pc, #96]	; (26364 <z_clock_elapsed+0x80>)
   26302:	4919      	ldr	r1, [pc, #100]	; (26368 <z_clock_elapsed+0x84>)
   26304:	4819      	ldr	r0, [pc, #100]	; (2636c <z_clock_elapsed+0x88>)
   26306:	f01a f97c 	bl	40602 <printk>
   2630a:	4915      	ldr	r1, [pc, #84]	; (26360 <z_clock_elapsed+0x7c>)
   2630c:	4818      	ldr	r0, [pc, #96]	; (26370 <z_clock_elapsed+0x8c>)
   2630e:	f01a f978 	bl	40602 <printk>
   26312:	214a      	movs	r1, #74	; 0x4a
   26314:	4813      	ldr	r0, [pc, #76]	; (26364 <z_clock_elapsed+0x80>)
   26316:	f01a fa37 	bl	40788 <assert_post_action>
	z_spin_lock_set_owner(l);
   2631a:	4811      	ldr	r0, [pc, #68]	; (26360 <z_clock_elapsed+0x7c>)
   2631c:	f017 f9ce 	bl	3d6bc <z_spin_lock_set_owner>
     return p_reg->COUNTER;
   26320:	4b14      	ldr	r3, [pc, #80]	; (26374 <z_clock_elapsed+0x90>)
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   26322:	480f      	ldr	r0, [pc, #60]	; (26360 <z_clock_elapsed+0x7c>)
   26324:	f8d3 4504 	ldr.w	r4, [r3, #1284]	; 0x504
	if (!IS_ENABLED(CONFIG_TICKLESS_KERNEL)) {
		return 0;
	}

	k_spinlock_key_t key = k_spin_lock(&lock);
	u32_t ret = counter_sub(counter(), last_count) / CYC_PER_TICK;
   26328:	4b13      	ldr	r3, [pc, #76]	; (26378 <z_clock_elapsed+0x94>)
	return (a - b) & COUNTER_MAX;
   2632a:	681b      	ldr	r3, [r3, #0]
   2632c:	1ae4      	subs	r4, r4, r3
   2632e:	f024 447f 	bic.w	r4, r4, #4278190080	; 0xff000000
   26332:	f017 f9b3 	bl	3d69c <z_spin_unlock_valid>
   26336:	b968      	cbnz	r0, 26354 <z_clock_elapsed+0x70>
   26338:	235d      	movs	r3, #93	; 0x5d
   2633a:	4a0a      	ldr	r2, [pc, #40]	; (26364 <z_clock_elapsed+0x80>)
   2633c:	490f      	ldr	r1, [pc, #60]	; (2637c <z_clock_elapsed+0x98>)
   2633e:	480b      	ldr	r0, [pc, #44]	; (2636c <z_clock_elapsed+0x88>)
   26340:	f01a f95f 	bl	40602 <printk>
   26344:	4906      	ldr	r1, [pc, #24]	; (26360 <z_clock_elapsed+0x7c>)
   26346:	480e      	ldr	r0, [pc, #56]	; (26380 <z_clock_elapsed+0x9c>)
   26348:	f01a f95b 	bl	40602 <printk>
   2634c:	215d      	movs	r1, #93	; 0x5d
   2634e:	4805      	ldr	r0, [pc, #20]	; (26364 <z_clock_elapsed+0x80>)
   26350:	f01a fa1a 	bl	40788 <assert_post_action>
	__asm__ volatile(
   26354:	f385 8811 	msr	BASEPRI, r5
   26358:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&lock, key);
	return ret;
}
   2635c:	4620      	mov	r0, r4
   2635e:	bd38      	pop	{r3, r4, r5, pc}
   26360:	20022460 	.word	0x20022460
   26364:	000498fb 	.word	0x000498fb
   26368:	00049921 	.word	0x00049921
   2636c:	0004764f 	.word	0x0004764f
   26370:	00049936 	.word	0x00049936
   26374:	40015000 	.word	0x40015000
   26378:	2002245c 	.word	0x2002245c
   2637c:	0004994e 	.word	0x0004994e
   26380:	00049965 	.word	0x00049965

00026384 <z_timer_cycle_get_32>:

u32_t z_timer_cycle_get_32(void)
{
   26384:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
   26386:	f04f 0320 	mov.w	r3, #32
   2638a:	f3ef 8511 	mrs	r5, BASEPRI
   2638e:	f383 8811 	msr	BASEPRI, r3
   26392:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   26396:	481b      	ldr	r0, [pc, #108]	; (26404 <z_timer_cycle_get_32+0x80>)
   26398:	f017 f972 	bl	3d680 <z_spin_lock_valid>
   2639c:	b968      	cbnz	r0, 263ba <z_timer_cycle_get_32+0x36>
   2639e:	234a      	movs	r3, #74	; 0x4a
   263a0:	4a19      	ldr	r2, [pc, #100]	; (26408 <z_timer_cycle_get_32+0x84>)
   263a2:	491a      	ldr	r1, [pc, #104]	; (2640c <z_timer_cycle_get_32+0x88>)
   263a4:	481a      	ldr	r0, [pc, #104]	; (26410 <z_timer_cycle_get_32+0x8c>)
   263a6:	f01a f92c 	bl	40602 <printk>
   263aa:	4916      	ldr	r1, [pc, #88]	; (26404 <z_timer_cycle_get_32+0x80>)
   263ac:	4819      	ldr	r0, [pc, #100]	; (26414 <z_timer_cycle_get_32+0x90>)
   263ae:	f01a f928 	bl	40602 <printk>
   263b2:	214a      	movs	r1, #74	; 0x4a
   263b4:	4814      	ldr	r0, [pc, #80]	; (26408 <z_timer_cycle_get_32+0x84>)
   263b6:	f01a f9e7 	bl	40788 <assert_post_action>
	z_spin_lock_set_owner(l);
   263ba:	4812      	ldr	r0, [pc, #72]	; (26404 <z_timer_cycle_get_32+0x80>)
   263bc:	f017 f97e 	bl	3d6bc <z_spin_lock_set_owner>
   263c0:	4b15      	ldr	r3, [pc, #84]	; (26418 <z_timer_cycle_get_32+0x94>)
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   263c2:	4810      	ldr	r0, [pc, #64]	; (26404 <z_timer_cycle_get_32+0x80>)
   263c4:	f8d3 4504 	ldr.w	r4, [r3, #1284]	; 0x504
	k_spinlock_key_t key = k_spin_lock(&lock);
	u32_t ret = counter_sub(counter(), last_count) + last_count;
   263c8:	4b14      	ldr	r3, [pc, #80]	; (2641c <z_timer_cycle_get_32+0x98>)
   263ca:	681b      	ldr	r3, [r3, #0]
	return (a - b) & COUNTER_MAX;
   263cc:	1ae4      	subs	r4, r4, r3
   263ce:	f024 447f 	bic.w	r4, r4, #4278190080	; 0xff000000
	u32_t ret = counter_sub(counter(), last_count) + last_count;
   263d2:	441c      	add	r4, r3
   263d4:	f017 f962 	bl	3d69c <z_spin_unlock_valid>
   263d8:	b968      	cbnz	r0, 263f6 <z_timer_cycle_get_32+0x72>
   263da:	235d      	movs	r3, #93	; 0x5d
   263dc:	4a0a      	ldr	r2, [pc, #40]	; (26408 <z_timer_cycle_get_32+0x84>)
   263de:	4910      	ldr	r1, [pc, #64]	; (26420 <z_timer_cycle_get_32+0x9c>)
   263e0:	480b      	ldr	r0, [pc, #44]	; (26410 <z_timer_cycle_get_32+0x8c>)
   263e2:	f01a f90e 	bl	40602 <printk>
   263e6:	4907      	ldr	r1, [pc, #28]	; (26404 <z_timer_cycle_get_32+0x80>)
   263e8:	480e      	ldr	r0, [pc, #56]	; (26424 <z_timer_cycle_get_32+0xa0>)
   263ea:	f01a f90a 	bl	40602 <printk>
   263ee:	215d      	movs	r1, #93	; 0x5d
   263f0:	4805      	ldr	r0, [pc, #20]	; (26408 <z_timer_cycle_get_32+0x84>)
   263f2:	f01a f9c9 	bl	40788 <assert_post_action>
	__asm__ volatile(
   263f6:	f385 8811 	msr	BASEPRI, r5
   263fa:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&lock, key);
	return ret;
}
   263fe:	4620      	mov	r0, r4
   26400:	bd38      	pop	{r3, r4, r5, pc}
   26402:	bf00      	nop
   26404:	20022460 	.word	0x20022460
   26408:	000498fb 	.word	0x000498fb
   2640c:	00049921 	.word	0x00049921
   26410:	0004764f 	.word	0x0004764f
   26414:	00049936 	.word	0x00049936
   26418:	40015000 	.word	0x40015000
   2641c:	2002245c 	.word	0x2002245c
   26420:	0004994e 	.word	0x0004994e
   26424:	00049965 	.word	0x00049965

00026428 <z_arm_exc_exit>:
    /* r0 contains the caller mode */
    push {r0, lr}
#endif

#ifdef CONFIG_PREEMPT_ENABLED
    ldr r0, =_kernel
   26428:	4804      	ldr	r0, [pc, #16]	; (2643c <_EXIT_EXC+0x2>)

    ldr r1, [r0, #_kernel_offset_to_current]
   2642a:	6881      	ldr	r1, [r0, #8]

    ldr r0, [r0, #_kernel_offset_to_ready_q_cache]
   2642c:	6a40      	ldr	r0, [r0, #36]	; 0x24
    cmp r0, r1
   2642e:	4288      	cmp	r0, r1
    beq _EXIT_EXC
   26430:	d003      	beq.n	2643a <_EXIT_EXC>

#if defined(CONFIG_CPU_CORTEX_M)
    /* context switch required, pend the PendSV exception */
    ldr r1, =_SCS_ICSR
   26432:	4903      	ldr	r1, [pc, #12]	; (26440 <_EXIT_EXC+0x6>)
    ldr r2, =_SCS_ICSR_PENDSV
   26434:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    str r2, [r1]
   26438:	600a      	str	r2, [r1, #0]

0002643a <_EXIT_EXC>:
    bl z_check_stack_sentinel
#endif /* CONFIG_CPU_CORTEX_M */
#endif /* CONFIG_STACK_SENTINEL */

#if defined(CONFIG_CPU_CORTEX_M)
    bx lr
   2643a:	4770      	bx	lr
    ldr r0, =_kernel
   2643c:	2002970c 	.word	0x2002970c
    ldr r1, =_SCS_ICSR
   26440:	e000ed04 	.word	0xe000ed04

00026444 <z_arm_pendsv>:
    pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_TRACING */

    /* load _kernel into r1 and current k_thread into r2 */
    ldr r1, =_kernel
   26444:	4929      	ldr	r1, [pc, #164]	; (264ec <in_fp_endif+0x2c>)
    ldr r2, [r1, #_kernel_offset_to_current]
   26446:	688a      	ldr	r2, [r1, #8]

    /* addr of callee-saved regs in thread in r0 */
    ldr r0, =_thread_offset_to_callee_saved
   26448:	f04f 0028 	mov.w	r0, #40	; 0x28
    add r0, r2
   2644c:	4410      	add	r0, r2

    /* save callee-saved + psp in thread */
#if defined(CONFIG_CPU_CORTEX_M)
    mrs ip, PSP
   2644e:	f3ef 8c09 	mrs	ip, PSP
    mov r6, r11
    mov r7, ip
    /* store r8-12 */
    stmea r0!, {r3-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    stmia r0, {v1-v8, ip}
   26452:	e880 1ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
#ifdef CONFIG_FP_SHARING
    /* Assess whether switched-out thread had been using the FP registers. */
    ldr r0, =0x10 /* EXC_RETURN.F_Type Mask */
   26456:	f04f 0010 	mov.w	r0, #16
    tst lr, r0    /* EXC_RETURN & EXC_RETURN.F_Type_Msk */
   2645a:	ea1e 0f00 	tst.w	lr, r0
    beq out_fp_active
   2645e:	d004      	beq.n	2646a <out_fp_active>
    /* FP context inactive: clear FP state */
    ldr r0, [r2, #_thread_offset_to_mode]
   26460:	f8d2 00ac 	ldr.w	r0, [r2, #172]	; 0xac
    bic r0, #0x4 /* _current->arch.mode &= ~(CONTROL_FPCA_Msk) */
   26464:	f020 0004 	bic.w	r0, r0, #4
    b out_fp_endif
   26468:	e007      	b.n	2647a <out_fp_endif>

0002646a <out_fp_active>:

out_fp_active:
    /* FP context active: set FP state and store callee-saved registers */
    add r0, r2, #_thread_offset_to_preempt_float
   2646a:	f102 006c 	add.w	r0, r2, #108	; 0x6c
    vstmia r0, {s16-s31}
   2646e:	ec80 8a10 	vstmia	r0, {s16-s31}
    ldr r0, [r2, #_thread_offset_to_mode]
   26472:	f8d2 00ac 	ldr.w	r0, [r2, #172]	; 0xac
    orrs r0, r0, #0x4 /* _current->arch.mode |= CONTROL_FPCA_Msk */
   26476:	f050 0004 	orrs.w	r0, r0, #4

0002647a <out_fp_endif>:

out_fp_endif:
    str r0, [r2, #_thread_offset_to_mode]
   2647a:	f8c2 00ac 	str.w	r0, [r2, #172]	; 0xac

    /* Protect the kernel state while we play with the thread lists */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
   2647e:	2020      	movs	r0, #32
    msr BASEPRI, r0
   26480:	f380 8811 	msr	BASEPRI, r0
    isb /* Make the effect of disabling interrupts be realized immediately */
   26484:	f3bf 8f6f 	isb	sy
     * the new thread is context-switched in since all decisions
     * to pend PendSV have been taken with the current kernel
     * state and this is what we're handling currently.
     */
#if defined(CONFIG_CPU_CORTEX_M)
    ldr v4, =_SCS_ICSR
   26488:	4f19      	ldr	r7, [pc, #100]	; (264f0 <in_fp_endif+0x30>)
    ldr v3, =_SCS_ICSR_UNPENDSV
   2648a:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000
#endif

    /* _kernel is still in r1 */

    /* fetch the thread to run from the ready queue cache */
    ldr r2, [r1, #_kernel_offset_to_ready_q_cache]
   2648e:	6a4a      	ldr	r2, [r1, #36]	; 0x24

    str r2, [r1, #_kernel_offset_to_current]
   26490:	608a      	str	r2, [r1, #8]
     * has been handled.
     */

    /* _SCS_ICSR is still in v4 and _SCS_ICSR_UNPENDSV in v3 */
#if defined(CONFIG_CPU_CORTEX_M)
    str v3, [v4, #0]
   26492:	603e      	str	r6, [r7, #0]

    ldr r0, [r4]
    movs.n r3, #0
    str r3, [r4]
#else
    ldr r0, [r2, #_thread_offset_to_basepri]
   26494:	6e50      	ldr	r0, [r2, #100]	; 0x64
    movs r3, #0
   26496:	2300      	movs	r3, #0
    str r3, [r2, #_thread_offset_to_basepri]
   26498:	6653      	str	r3, [r2, #100]	; 0x64
    /* restore r4-r7, go back 9*4 bytes to the start of the stored block */
    subs r0, #36
    ldmia r0!, {r4-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    /* restore BASEPRI for the incoming thread */
    msr BASEPRI, r0
   2649a:	f380 8811 	msr	BASEPRI, r0

#ifdef CONFIG_FP_SHARING
    /* Assess whether switched-in thread had been using the FP registers. */
    ldr r0, [r2, #_thread_offset_to_mode]
   2649e:	f8d2 00ac 	ldr.w	r0, [r2, #172]	; 0xac
    tst r0, #0x04 /* thread.arch.mode & CONTROL.FPCA Msk */
   264a2:	f010 0f04 	tst.w	r0, #4
    bne in_fp_active
   264a6:	d105      	bne.n	264b4 <in_fp_active>
    /* FP context inactive for swapped-in thread:
     * - reset FPSCR to 0
     * - set EXC_RETURN.F_Type (prevents FP frame un-stacking when returning
     *   from pendSV)
     */
    movs.n r3, #0
   264a8:	2300      	movs	r3, #0
    vmsr fpscr, r3
   264aa:	eee1 3a10 	vmsr	fpscr, r3
    orrs lr, lr, #0x10 /* EXC_RETURN & EXC_RETURN.F_Type_Msk */
   264ae:	f05e 0e10 	orrs.w	lr, lr, #16
    b in_fp_endif
   264b2:	e005      	b.n	264c0 <in_fp_endif>

000264b4 <in_fp_active>:
    /* FP context active:
     * - clear EXC_RETURN.F_Type
     * - FPSCR and caller-saved registers will be restored automatically
     * - restore callee-saved FP registers
     */
    bic lr, #0x10 /* EXC_RETURN | (~EXC_RETURN.F_Type_Msk) */
   264b4:	f02e 0e10 	bic.w	lr, lr, #16
    add r0, r2, #_thread_offset_to_preempt_float
   264b8:	f102 006c 	add.w	r0, r2, #108	; 0x6c
    vldmia r0, {s16-s31}
   264bc:	ec90 8a10 	vldmia	r0, {s16-s31}

000264c0 <in_fp_endif>:
in_fp_endif:
    /* Clear CONTROL.FPCA that may have been set by FP instructions */
    mrs r3, CONTROL
   264c0:	f3ef 8314 	mrs	r3, CONTROL
    bic r3, #0x4 /* CONTROL.FPCA Msk */
   264c4:	f023 0304 	bic.w	r3, r3, #4
    msr CONTROL, r3
   264c8:	f383 8814 	msr	CONTROL, r3
    isb
   264cc:	f3bf 8f6f 	isb	sy
#endif

#if defined (CONFIG_ARM_MPU)
    /* Re-program dynamic memory map */
    push {r2,lr}
   264d0:	b504      	push	{r2, lr}
    mov r0, r2 /* _current thread */
   264d2:	4610      	mov	r0, r2
    bl z_arm_configure_dynamic_mpu_regions
   264d4:	f01c fb6c 	bl	42bb0 <z_arm_configure_dynamic_mpu_regions>
    pop {r2,lr}
   264d8:	e8bd 4004 	ldmia.w	sp!, {r2, lr}
    isb

#endif

    /* load callee-saved + psp from thread */
    add r0, r2, #_thread_offset_to_callee_saved
   264dc:	f102 0028 	add.w	r0, r2, #40	; 0x28
    ldmia r0, {v1-v8, ip}
   264e0:	e890 1ff0 	ldmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
    mov r0, #0
    msr PSPLIM, r0
#endif /* CONFIG_BUILTIN_STACK_GUARD */

#if defined(CONFIG_CPU_CORTEX_M)
    msr PSP, ip
   264e4:	f38c 8809 	msr	PSP, ip

    /*
     * Cortex-M: return from PendSV exception
     * Cortex-R: return to the caller (_IntExit or z_arm_svc)
     */
    bx lr
   264e8:	4770      	bx	lr
   264ea:	0000      	.short	0x0000
    ldr r1, =_kernel
   264ec:	2002970c 	.word	0x2002970c
    ldr v4, =_SCS_ICSR
   264f0:	e000ed04 	.word	0xe000ed04

000264f4 <z_arm_svc>:
  bne _stack_frame_endif
_stack_frame_msp:
  mrs r0, MSP
_stack_frame_endif:
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    tst lr, #0x4    /* did we come from thread mode ? */
   264f4:	f01e 0f04 	tst.w	lr, #4
    ite eq  /* if zero (equal), came from handler mode */
   264f8:	bf0c      	ite	eq
        mrseq r0, MSP   /* handler mode, stack frame is on MSP */
   264fa:	f3ef 8008 	mrseq	r0, MSP
        mrsne r0, PSP   /* thread mode, stack frame is on PSP */
   264fe:	f3ef 8009 	mrsne	r0, PSP
#endif


    /* Figure out what SVC call number was invoked */

    ldr r1, [r0, #24]   /* grab address of PC from stack frame */
   26502:	6981      	ldr	r1, [r0, #24]
     */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    subs r1, r1, #2
    ldrb r1, [r1]
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    ldrb r1, [r1, #-2]
   26504:	f811 1c02 	ldrb.w	r1, [r1, #-2]
#endif
    bne _oops

#endif /* CONFIG_USERSPACE */

    cmp r1, #2
   26508:	2902      	cmp	r1, #2
    beq _oops
   2650a:	d0ff      	beq.n	2650c <_oops>

0002650c <_oops>:
    /* exception return is done in z_arm_int_exit() */
    b z_arm_int_exit
#endif

_oops:
    push {r0, lr}
   2650c:	b501      	push	{r0, lr}
    bl z_do_kernel_oops
   2650e:	f01c fb44 	bl	42b9a <z_do_kernel_oops>
    /* return from SVC exception is done here */
    pop {r0, pc}
   26512:	bd01      	pop	{r0, pc}

00026514 <z_arm_cpu_idle_init>:
 * void z_arm_cpu_idle_init(void);
 */

SECTION_FUNC(TEXT, z_arm_cpu_idle_init)
#if defined(CONFIG_CPU_CORTEX_M)
	ldr r1, =_SCB_SCR
   26514:	4901      	ldr	r1, [pc, #4]	; (2651c <z_arm_cpu_idle_init+0x8>)
	movs.n r2, #_SCR_INIT_BITS
   26516:	2210      	movs	r2, #16
	str r2, [r1]
   26518:	600a      	str	r2, [r1, #0]
#endif
	bx lr
   2651a:	4770      	bx	lr
	ldr r1, =_SCB_SCR
   2651c:	e000ed10 	.word	0xe000ed10

00026520 <arch_cpu_idle>:
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE) \
	|| defined(CONFIG_ARMV7_R)
	cpsie i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* clear BASEPRI so wfi is awakened by incoming interrupts */
	eors.n r0, r0
   26520:	4040      	eors	r0, r0
	msr BASEPRI, r0
   26522:	f380 8811 	msr	BASEPRI, r0
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	wfi
   26526:	bf30      	wfi

	bx lr
   26528:	4770      	bx	lr
   2652a:	bf00      	nop

0002652c <z_arm_bus_fault>:
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
SECTION_SUBSEC_FUNC(TEXT,__fault,z_arm_reserved)

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE) || \
	defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	mrs r0, MSP
   2652c:	f3ef 8008 	mrs	r0, MSP
	mrs r1, PSP
   26530:	f3ef 8109 	mrs	r1, PSP
	mov r2, lr /* EXC_RETURN */
   26534:	4672      	mov	r2, lr

	push {r0, lr}
   26536:	b501      	push	{r0, lr}
	mov r0, #0
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE || CONFIG_ARMv7_M_ARMV8_M_MAINLINE */

	bl z_arm_fault
   26538:	f000 fc66 	bl	26e08 <z_arm_fault>

#if defined(CONFIG_CPU_CORTEX_M)
	pop {r0, pc}
   2653c:	bd01      	pop	{r0, pc}
   2653e:	bf00      	nop

00026540 <z_SysNmiOnReset>:
_ASM_FILE_PROLOGUE

GTEXT(z_SysNmiOnReset)

SECTION_FUNC(TEXT, z_SysNmiOnReset)
    wfi
   26540:	bf30      	wfi
    b z_SysNmiOnReset
   26542:	f7ff bffd 	b.w	26540 <z_SysNmiOnReset>
   26546:	bf00      	nop

00026548 <_isr_wrapper>:
 * @return N/A
 */
SECTION_FUNC(TEXT, _isr_wrapper)

#if defined(CONFIG_CPU_CORTEX_M)
	push {r0,lr}		/* r0, lr are now the first items on the stack */
   26548:	b501      	push	{r0, lr}
      * FIXME: Remove the Cortex-M conditional compilation checks for `cpsid i`
      *        and `cpsie i` after the Cortex-R port is updated to support
      *        interrupt nesting.  For more details, refer to the issue #21758.
      */
#if defined(CONFIG_CPU_CORTEX_M)
	cpsid i  /* PRIMASK = 1 */
   2654a:	b672      	cpsid	i
#endif

	/* is this a wakeup from idle ? */
	ldr r2, =_kernel
   2654c:	4a0b      	ldr	r2, [pc, #44]	; (2657c <_isr_wrapper+0x34>)
	/* requested idle duration, in ticks */
	ldr r0, [r2, #_kernel_offset_to_idle]
   2654e:	6a10      	ldr	r0, [r2, #32]
	cmp r0, #0
   26550:	2800      	cmp	r0, #0
	str r1, [r2, #_kernel_offset_to_idle]
	bl z_sys_power_save_idle_exit
_idle_state_cleared:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	ittt ne
   26552:	bf1e      	ittt	ne
	movne	r1, #0
   26554:	2100      	movne	r1, #0
		/* clear kernel idle state */
		strne	r1, [r2, #_kernel_offset_to_idle]
   26556:	6211      	strne	r1, [r2, #32]
		blne	z_sys_power_save_idle_exit
   26558:	f01e fa71 	blne	44a3e <z_sys_power_save_idle_exit>
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
	cpsie i		/* re-enable interrupts (PRIMASK = 0) */
   2655c:	b662      	cpsie	i
#endif

#endif /* CONFIG_SYS_POWER_MANAGEMENT */

#if defined(CONFIG_CPU_CORTEX_M)
	mrs r0, IPSR	/* get exception number */
   2655e:	f3ef 8005 	mrs	r0, IPSR
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r1, =16
	subs r0, r1	/* get IRQ number */
	lsls r0, #3	/* table is 8-byte wide */
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	sub r0, r0, #16	/* get IRQ number */
   26562:	f1a0 0010 	sub.w	r0, r0, #16
	lsl r0, r0, #3	/* table is 8-byte wide */
   26566:	ea4f 00c0 	mov.w	r0, r0, lsl #3
	 */
	mov r0, #0
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
	ldr r1, =_sw_isr_table
   2656a:	4905      	ldr	r1, [pc, #20]	; (26580 <_isr_wrapper+0x38>)
	add r1, r1, r0	/* table entry: ISRs must have their MSB set to stay
   2656c:	4401      	add	r1, r0
			 * in thumb mode */

	ldm r1!,{r0,r3}	/* arg in r0, ISR in r3 */
   2656e:	c909      	ldmia	r1!, {r0, r3}
#else
	pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
	ldm sp!,{r0-r3} /* Restore r0 to r3 regs */
#endif /* CONFIG_EXECUTION_BENCHMARKING */
	blx r3		/* call ISR */
   26570:	4798      	blx	r3

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	pop {r0, r3}
	mov lr, r3
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	pop {r0, lr}
   26572:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
#endif

	/* Use 'bx' instead of 'b' because 'bx' can jump further, and use
	 * 'bx' instead of 'blx' because exception return is done in
	 * z_arm_int_exit() */
	ldr r1, =z_arm_int_exit
   26576:	4903      	ldr	r1, [pc, #12]	; (26584 <_isr_wrapper+0x3c>)
	bx r1
   26578:	4708      	bx	r1
   2657a:	0000      	.short	0x0000
	ldr r2, =_kernel
   2657c:	2002970c 	.word	0x2002970c
	ldr r1, =_sw_isr_table
   26580:	00045b44 	.word	0x00045b44
	ldr r1, =z_arm_int_exit
   26584:	00026429 	.word	0x00026429

00026588 <arch_swap>:
#ifdef CONFIG_EXECUTION_BENCHMARKING
	read_timer_start_of_swap();
#endif

	/* store off key and return value */
	_current->arch.basepri = key;
   26588:	4a09      	ldr	r2, [pc, #36]	; (265b0 <arch_swap+0x28>)
	_current->arch.swap_return_value = _k_neg_eagain;
   2658a:	490a      	ldr	r1, [pc, #40]	; (265b4 <arch_swap+0x2c>)
	_current->arch.basepri = key;
   2658c:	6893      	ldr	r3, [r2, #8]
	_current->arch.swap_return_value = _k_neg_eagain;
   2658e:	6809      	ldr	r1, [r1, #0]
	_current->arch.basepri = key;
   26590:	6658      	str	r0, [r3, #100]	; 0x64
	_current->arch.swap_return_value = _k_neg_eagain;
   26592:	6699      	str	r1, [r3, #104]	; 0x68

#if defined(CONFIG_CPU_CORTEX_M)
	/* set pending bit to make sure we will take a PendSV exception */
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
   26594:	4908      	ldr	r1, [pc, #32]	; (265b8 <arch_swap+0x30>)
   26596:	684b      	ldr	r3, [r1, #4]
   26598:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
   2659c:	604b      	str	r3, [r1, #4]
   2659e:	2300      	movs	r3, #0
   265a0:	f383 8811 	msr	BASEPRI, r3
   265a4:	f3bf 8f6f 	isb	sy
#endif

	/* Context switch is performed here. Returning implies the
	 * thread has been context-switched-in again.
	 */
	return _current->arch.swap_return_value;
   265a8:	6893      	ldr	r3, [r2, #8]
}
   265aa:	6e98      	ldr	r0, [r3, #104]	; 0x68
   265ac:	4770      	bx	lr
   265ae:	bf00      	nop
   265b0:	2002970c 	.word	0x2002970c
   265b4:	000472cc 	.word	0x000472cc
   265b8:	e000ed00 	.word	0xe000ed00

000265bc <arch_irq_enable>:
#define REG_FROM_IRQ(irq) (irq / NUM_IRQS_PER_REG)
#define BIT_FROM_IRQ(irq) (irq % NUM_IRQS_PER_REG)

void arch_irq_enable(unsigned int irq)
{
	NVIC_EnableIRQ((IRQn_Type)irq);
   265bc:	b243      	sxtb	r3, r0
  if ((int32_t)(IRQn) >= 0)
   265be:	2b00      	cmp	r3, #0
   265c0:	db08      	blt.n	265d4 <arch_irq_enable+0x18>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   265c2:	2201      	movs	r2, #1
   265c4:	f000 001f 	and.w	r0, r0, #31
   265c8:	fa02 f000 	lsl.w	r0, r2, r0
   265cc:	4a02      	ldr	r2, [pc, #8]	; (265d8 <arch_irq_enable+0x1c>)
   265ce:	095b      	lsrs	r3, r3, #5
   265d0:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
}
   265d4:	4770      	bx	lr
   265d6:	bf00      	nop
   265d8:	e000e100 	.word	0xe000e100

000265dc <z_arm_irq_priority_set>:
 * priority levels which are reserved.
 *
 * @return N/A
 */
void z_arm_irq_priority_set(unsigned int irq, unsigned int prio, u32_t flags)
{
   265dc:	b570      	push	{r4, r5, r6, lr}
	} else {
		prio += _IRQ_PRIO_OFFSET;
	}
#else
	ARG_UNUSED(flags);
	prio += _IRQ_PRIO_OFFSET;
   265de:	1c4c      	adds	r4, r1, #1
	/* The last priority level is also used by PendSV exception, but
	 * allow other interrupts to use the same level, even if it ends up
	 * affecting performance (can still be useful on systems with a
	 * reduced set of priorities, like Cortex-M0/M0+).
	 */
	__ASSERT(prio <= (BIT(DT_NUM_IRQ_PRIO_BITS) - 1),
   265e0:	2c07      	cmp	r4, #7
{
   265e2:	4605      	mov	r5, r0
   265e4:	460e      	mov	r6, r1
	__ASSERT(prio <= (BIT(DT_NUM_IRQ_PRIO_BITS) - 1),
   265e6:	d90e      	bls.n	26606 <z_arm_irq_priority_set+0x2a>
   265e8:	235f      	movs	r3, #95	; 0x5f
   265ea:	4a10      	ldr	r2, [pc, #64]	; (2662c <z_arm_irq_priority_set+0x50>)
   265ec:	4910      	ldr	r1, [pc, #64]	; (26630 <z_arm_irq_priority_set+0x54>)
   265ee:	4811      	ldr	r0, [pc, #68]	; (26634 <z_arm_irq_priority_set+0x58>)
   265f0:	f01a f807 	bl	40602 <printk>
   265f4:	4631      	mov	r1, r6
   265f6:	4810      	ldr	r0, [pc, #64]	; (26638 <z_arm_irq_priority_set+0x5c>)
   265f8:	2207      	movs	r2, #7
   265fa:	f01a f802 	bl	40602 <printk>
   265fe:	215f      	movs	r1, #95	; 0x5f
   26600:	480a      	ldr	r0, [pc, #40]	; (2662c <z_arm_irq_priority_set+0x50>)
   26602:	f01a f8c1 	bl	40788 <assert_post_action>
		 "invalid priority %d! values must be less than %lu\n",
		 prio - _IRQ_PRIO_OFFSET,
		 BIT(DT_NUM_IRQ_PRIO_BITS) - (_IRQ_PRIO_OFFSET));
	NVIC_SetPriority((IRQn_Type)irq, prio);
   26606:	b26b      	sxtb	r3, r5
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
   26608:	2b00      	cmp	r3, #0
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   2660a:	bfa8      	it	ge
   2660c:	f103 4360 	addge.w	r3, r3, #3758096384	; 0xe0000000
   26610:	ea4f 1444 	mov.w	r4, r4, lsl #5
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   26614:	bfb8      	it	lt
   26616:	4b09      	ldrlt	r3, [pc, #36]	; (2663c <z_arm_irq_priority_set+0x60>)
   26618:	b2e4      	uxtb	r4, r4
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   2661a:	bfab      	itete	ge
   2661c:	f503 4361 	addge.w	r3, r3, #57600	; 0xe100
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   26620:	f005 050f 	andlt.w	r5, r5, #15
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   26624:	f883 4300 	strbge.w	r4, [r3, #768]	; 0x300
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   26628:	555c      	strblt	r4, [r3, r5]
}
   2662a:	bd70      	pop	{r4, r5, r6, pc}
   2662c:	0004997a 	.word	0x0004997a
   26630:	000499b0 	.word	0x000499b0
   26634:	0004764f 	.word	0x0004764f
   26638:	000499cb 	.word	0x000499cb
   2663c:	e000ed14 	.word	0xe000ed14

00026640 <_arch_isr_direct_pm>:
	z_arm_reserved();
}

#ifdef CONFIG_SYS_POWER_MANAGEMENT
void _arch_isr_direct_pm(void)
{
   26640:	b508      	push	{r3, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Lock all interrupts. irq_lock() will on this CPU only disable those
	 * lower than BASEPRI, which is not what we want. See comments in
	 * arch/arm/core/aarch32/isr_wrapper.S
	 */
	__asm__ volatile("cpsid i" : : : "memory");
   26642:	b672      	cpsid	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	if (_kernel.idle) {
   26644:	4b04      	ldr	r3, [pc, #16]	; (26658 <_arch_isr_direct_pm+0x18>)
   26646:	6a18      	ldr	r0, [r3, #32]
   26648:	b118      	cbz	r0, 26652 <_arch_isr_direct_pm+0x12>
		s32_t idle_val = _kernel.idle;

		_kernel.idle = 0;
   2664a:	2200      	movs	r2, #0
   2664c:	621a      	str	r2, [r3, #32]
		z_sys_power_save_idle_exit(idle_val);
   2664e:	f01e f9f6 	bl	44a3e <z_sys_power_save_idle_exit>

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE) \
	|| defined(CONFIG_ARMV7_R)
	irq_unlock(key);
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile("cpsie i" : : : "memory");
   26652:	b662      	cpsie	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

}
   26654:	bd08      	pop	{r3, pc}
   26656:	bf00      	nop
   26658:	2002970c 	.word	0x2002970c

0002665c <arch_new_thread>:
 */
void arch_new_thread(struct k_thread *thread, k_thread_stack_t *stack,
		     size_t stackSize, k_thread_entry_t pEntry,
		     void *parameter1, void *parameter2, void *parameter3,
		     int priority, unsigned int options)
{
   2665c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   26660:	9e0d      	ldr	r6, [sp, #52]	; 0x34
   26662:	4605      	mov	r5, r0
	char *pStackMem = Z_THREAD_STACK_BUFFER(stack);
	char *stackEnd;
	/* Offset between the top of stack and the high end of stack area. */
	u32_t top_of_stack_offset = 0U;

	Z_ASSERT_VALID_PRIO(priority, pEntry);
   26664:	2e0f      	cmp	r6, #15
{
   26666:	4688      	mov	r8, r1
   26668:	4691      	mov	r9, r2
   2666a:	461f      	mov	r7, r3
	Z_ASSERT_VALID_PRIO(priority, pEntry);
   2666c:	d126      	bne.n	266bc <arch_new_thread+0x60>
   2666e:	4b1e      	ldr	r3, [pc, #120]	; (266e8 <arch_new_thread+0x8c>)
   26670:	429f      	cmp	r7, r3
   26672:	d127      	bne.n	266c4 <arch_new_thread+0x68>
#endif
	stackEnd = pStackMem + stackSize;

	struct __esf *pInitCtx;

	z_new_thread_init(thread, pStackMem, stackSize, priority,
   26674:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   26676:	464a      	mov	r2, r9
   26678:	9300      	str	r3, [sp, #0]
   2667a:	4641      	mov	r1, r8
   2667c:	4633      	mov	r3, r6
   2667e:	4628      	mov	r0, r5
   26680:	f01e faa9 	bl	44bd6 <z_new_thread_init>
	stackEnd = pStackMem + stackSize;
   26684:	eb08 0409 	add.w	r4, r8, r9
	pInitCtx->basic.pc = (u32_t)z_thread_entry;
#endif

#if defined(CONFIG_CPU_CORTEX_M)
	/* force ARM mode by clearing LSB of address */
	pInitCtx->basic.pc &= 0xfffffffe;
   26688:	4a18      	ldr	r2, [pc, #96]	; (266ec <arch_new_thread+0x90>)
	pInitCtx = (struct __esf *)(STACK_ROUND_DOWN(stackEnd -
   2668a:	f1a4 0320 	sub.w	r3, r4, #32
   2668e:	f023 0307 	bic.w	r3, r3, #7
	pInitCtx->basic.pc &= 0xfffffffe;
   26692:	f022 0201 	bic.w	r2, r2, #1
   26696:	619a      	str	r2, [r3, #24]
#endif

	pInitCtx->basic.a1 = (u32_t)pEntry;
	pInitCtx->basic.a2 = (u32_t)parameter1;
   26698:	9a0a      	ldr	r2, [sp, #40]	; 0x28
	pInitCtx->basic.a1 = (u32_t)pEntry;
   2669a:	601f      	str	r7, [r3, #0]
	pInitCtx->basic.a2 = (u32_t)parameter1;
   2669c:	605a      	str	r2, [r3, #4]
	pInitCtx->basic.a3 = (u32_t)parameter2;
   2669e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   266a0:	609a      	str	r2, [r3, #8]
	pInitCtx->basic.a4 = (u32_t)parameter3;
   266a2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   266a4:	60da      	str	r2, [r3, #12]
	pInitCtx->basic.xpsr =
   266a6:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
   266aa:	61da      	str	r2, [r3, #28]
		0x01000000UL; /* clear all, thumb bit is 1, even if RO */

	thread->callee_saved.psp = (u32_t)pInitCtx;
   266ac:	64ab      	str	r3, [r5, #72]	; 0x48
#if defined(CONFIG_CPU_CORTEX_R)
	pInitCtx->basic.lr = (u32_t)pInitCtx->basic.pc;
	thread->callee_saved.spsr = A_BIT | T_BIT | MODE_SYS;
	thread->callee_saved.lr = (u32_t)pInitCtx->basic.pc;
#endif
	thread->arch.basepri = 0;
   266ae:	2300      	movs	r3, #0
   266b0:	666b      	str	r3, [r5, #100]	; 0x64

#if defined(CONFIG_USERSPACE) || defined(CONFIG_FP_SHARING)
	thread->arch.mode = 0;
   266b2:	f8c5 30ac 	str.w	r3, [r5, #172]	; 0xac

	/*
	 * initial values in all other registers/thread entries are
	 * irrelevant.
	 */
}
   266b6:	b003      	add	sp, #12
   266b8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	Z_ASSERT_VALID_PRIO(priority, pEntry);
   266bc:	f106 0310 	add.w	r3, r6, #16
   266c0:	2b1e      	cmp	r3, #30
   266c2:	d9d7      	bls.n	26674 <arch_new_thread+0x18>
   266c4:	232d      	movs	r3, #45	; 0x2d
   266c6:	4a0a      	ldr	r2, [pc, #40]	; (266f0 <arch_new_thread+0x94>)
   266c8:	490a      	ldr	r1, [pc, #40]	; (266f4 <arch_new_thread+0x98>)
   266ca:	480b      	ldr	r0, [pc, #44]	; (266f8 <arch_new_thread+0x9c>)
   266cc:	f019 ff99 	bl	40602 <printk>
   266d0:	4631      	mov	r1, r6
   266d2:	f06f 030f 	mvn.w	r3, #15
   266d6:	220e      	movs	r2, #14
   266d8:	4808      	ldr	r0, [pc, #32]	; (266fc <arch_new_thread+0xa0>)
   266da:	f019 ff92 	bl	40602 <printk>
   266de:	212d      	movs	r1, #45	; 0x2d
   266e0:	4803      	ldr	r0, [pc, #12]	; (266f0 <arch_new_thread+0x94>)
   266e2:	f01a f851 	bl	40788 <assert_post_action>
   266e6:	e7c5      	b.n	26674 <arch_new_thread+0x18>
   266e8:	0003b1fd 	.word	0x0003b1fd
   266ec:	0004065f 	.word	0x0004065f
   266f0:	00049a00 	.word	0x00049a00
   266f4:	00049a32 	.word	0x00049a32
   266f8:	0004764f 	.word	0x0004764f
   266fc:	00049abf 	.word	0x00049abf

00026700 <arch_switch_to_main_thread>:

void arch_switch_to_main_thread(struct k_thread *main_thread,
				k_thread_stack_t *main_stack,
				size_t main_stack_size,
				k_thread_entry_t _main)
{
   26700:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   26704:	461f      	mov	r7, r3
   26706:	4606      	mov	r6, r0
   26708:	460c      	mov	r4, r1
   2670a:	4690      	mov	r8, r2
// Re-enable using built-in when GCC has been fixed
// || (__GNUC__ > 7) || (__GNUC__ == 7 && __GNUC_MINOR__ >= 2)
  /* see https://gcc.gnu.org/ml/gcc-patches/2017-04/msg00443.html */
  __builtin_arm_set_fpscr(fpscr);
#else
  __ASM volatile ("VMSR fpscr, %0" : : "r" (fpscr) : "vfpcc", "memory");
   2670c:	2300      	movs	r3, #0
   2670e:	eee1 3a10 	vmsr	fpscr, r3
  __ASM volatile ("MRS %0, control" : "=r" (result) );
   26712:	f3ef 8514 	mrs	r5, CONTROL
	 * initialized at thread creation for threads that make use of the FP).
	 */
	__set_FPSCR(0);
#if defined(CONFIG_FP_SHARING)
	/* In Sharing mode clearing FPSCR may set the CONTROL.FPCA flag. */
	__set_CONTROL(__get_CONTROL() & (~(CONTROL_FPCA_Msk)));
   26716:	f025 0504 	bic.w	r5, r5, #4
  __ASM volatile ("MSR control, %0" : : "r" (control) : "memory");
   2671a:	f385 8814 	msr	CONTROL, r5
           so that all instructions following the ISB are fetched from cache or memory,
           after the instruction has been completed.
 */
__STATIC_FORCEINLINE void __ISB(void)
{
  __ASM volatile ("isb 0xF":::"memory");
   2671e:	f3bf 8f6f 	isb	sy
	 * to set up access permissions for fixed memory sections, such
	 * as Application Memory or No-Cacheable SRAM area.
	 *
	 * This function is invoked once, upon system initialization.
	 */
	z_arm_configure_static_mpu_regions();
   26722:	f000 fcff 	bl	27124 <z_arm_configure_static_mpu_regions>
	start_of_main_stack =
		Z_THREAD_STACK_BUFFER(main_stack) + main_stack_size;

	start_of_main_stack = (char *)STACK_ROUND_DOWN(start_of_main_stack);

	_current = main_thread;
   26726:	4b0a      	ldr	r3, [pc, #40]	; (26750 <arch_switch_to_main_thread+0x50>)
	start_of_main_stack =
   26728:	4444      	add	r4, r8
#ifdef CONFIG_ARM_MPU
	/*
	 * If stack protection is enabled, make sure to set it
	 * before jumping to thread entry function
	 */
	z_arm_configure_dynamic_mpu_regions(main_thread);
   2672a:	4630      	mov	r0, r6
	_current = main_thread;
   2672c:	609e      	str	r6, [r3, #8]
	start_of_main_stack = (char *)STACK_ROUND_DOWN(start_of_main_stack);
   2672e:	f024 0407 	bic.w	r4, r4, #7
	z_arm_configure_dynamic_mpu_regions(main_thread);
   26732:	f01c fa3d 	bl	42bb0 <z_arm_configure_dynamic_mpu_regions>

	/*
	 * Set PSP to the highest address of the main stack
	 * before enabling interrupts and jumping to main.
	 */
	__asm__ volatile (
   26736:	4638      	mov	r0, r7
   26738:	f384 8809 	msr	PSP, r4
   2673c:	2100      	movs	r1, #0
   2673e:	b663      	cpsie	if
   26740:	f381 8811 	msr	BASEPRI, r1
   26744:	f3bf 8f6f 	isb	sy
   26748:	2200      	movs	r2, #0
   2674a:	2300      	movs	r3, #0
   2674c:	f019 ff87 	bl	4065e <z_thread_entry>
	:
	: "r" (_main), "r" (start_of_main_stack)
	: "r0" /* not to be overwritten by msr PSP, %1 */
	);

	CODE_UNREACHABLE;
   26750:	2002970c 	.word	0x2002970c

00026754 <z_arm_fatal_error>:
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
		esf->basic.pc);
}

void z_arm_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
   26754:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   26758:	4681      	mov	r9, r0
   2675a:	b08b      	sub	sp, #44	; 0x2c

	if (esf != NULL) {
   2675c:	460c      	mov	r4, r1
   2675e:	2900      	cmp	r1, #0
   26760:	f000 808e 	beq.w	26880 <z_arm_fatal_error+0x12c>
	LOG_ERR("r0/a1:  0x%08x  r1/a2:  0x%08x  r2/a3:  0x%08x",
   26764:	4b4a      	ldr	r3, [pc, #296]	; (26890 <z_arm_fatal_error+0x13c>)
   26766:	4d4b      	ldr	r5, [pc, #300]	; (26894 <z_arm_fatal_error+0x140>)
   26768:	4e4b      	ldr	r6, [pc, #300]	; (26898 <z_arm_fatal_error+0x144>)
   2676a:	1aed      	subs	r5, r5, r3
   2676c:	6833      	ldr	r3, [r6, #0]
   2676e:	f3c5 05c9 	ubfx	r5, r5, #3, #10
   26772:	075b      	lsls	r3, r3, #29
   26774:	d02e      	beq.n	267d4 <z_arm_fatal_error+0x80>
   26776:	2201      	movs	r2, #1
   26778:	f04f 0300 	mov.w	r3, #0
   2677c:	f362 0307 	bfi	r3, r2, #0, #8
   26780:	f365 138f 	bfi	r3, r5, #6, #10
   26784:	f8ad 3000 	strh.w	r3, [sp]
   26788:	e9d1 2301 	ldrd	r2, r3, [r1, #4]
   2678c:	4843      	ldr	r0, [pc, #268]	; (2689c <z_arm_fatal_error+0x148>)
   2678e:	6809      	ldr	r1, [r1, #0]
   26790:	f01a f990 	bl	40ab4 <log_3>
	LOG_ERR("r3/a4:  0x%08x r12/ip:  0x%08x r14/lr:  0x%08x",
   26794:	6833      	ldr	r3, [r6, #0]
   26796:	075f      	lsls	r7, r3, #29
   26798:	d01c      	beq.n	267d4 <z_arm_fatal_error+0x80>
   2679a:	2201      	movs	r2, #1
   2679c:	f04f 0300 	mov.w	r3, #0
   267a0:	f362 0307 	bfi	r3, r2, #0, #8
   267a4:	f365 138f 	bfi	r3, r5, #6, #10
   267a8:	f8ad 3000 	strh.w	r3, [sp]
   267ac:	e9d4 2304 	ldrd	r2, r3, [r4, #16]
   267b0:	483b      	ldr	r0, [pc, #236]	; (268a0 <z_arm_fatal_error+0x14c>)
   267b2:	68e1      	ldr	r1, [r4, #12]
   267b4:	f01a f97e 	bl	40ab4 <log_3>
	LOG_ERR(" xpsr:  0x%08x", esf->basic.xpsr);
   267b8:	6833      	ldr	r3, [r6, #0]
   267ba:	0758      	lsls	r0, r3, #29
   267bc:	d00a      	beq.n	267d4 <z_arm_fatal_error+0x80>
   267be:	f04f 0200 	mov.w	r2, #0
   267c2:	2301      	movs	r3, #1
   267c4:	f363 0207 	bfi	r2, r3, #0, #8
   267c8:	f365 128f 	bfi	r2, r5, #6, #10
   267cc:	69e1      	ldr	r1, [r4, #28]
   267ce:	4835      	ldr	r0, [pc, #212]	; (268a4 <z_arm_fatal_error+0x150>)
   267d0:	f01a f944 	bl	40a5c <log_1>
   267d4:	46a0      	mov	r8, r4
{
   267d6:	2700      	movs	r7, #0
		LOG_ERR("s[%2d]:  0x%08x  s[%2d]:  0x%08x"
   267d8:	f8df b0d4 	ldr.w	fp, [pc, #212]	; 268b0 <z_arm_fatal_error+0x15c>
   267dc:	6833      	ldr	r3, [r6, #0]
   267de:	0759      	lsls	r1, r3, #29
   267e0:	d02d      	beq.n	2683e <z_arm_fatal_error+0xea>
   267e2:	edd8 7a08 	vldr	s15, [r8, #32]
   267e6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
   267ea:	edcd 7a03 	vstr	s15, [sp, #12]
   267ee:	edd8 7a09 	vldr	s15, [r8, #36]	; 0x24
   267f2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
   267f6:	edcd 7a05 	vstr	s15, [sp, #20]
   267fa:	edd8 7a0a 	vldr	s15, [r8, #40]	; 0x28
   267fe:	eefc 7ae7 	vcvt.u32.f32	s15, s15
   26802:	edcd 7a07 	vstr	s15, [sp, #28]
   26806:	edd8 7a0b 	vldr	s15, [r8, #44]	; 0x2c
   2680a:	2208      	movs	r2, #8
   2680c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
   26810:	f02a 033f 	bic.w	r3, sl, #63	; 0x3f
   26814:	f043 0301 	orr.w	r3, r3, #1
   26818:	f363 0a07 	bfi	sl, r3, #0, #8
   2681c:	1c7b      	adds	r3, r7, #1
   2681e:	9304      	str	r3, [sp, #16]
   26820:	1cbb      	adds	r3, r7, #2
   26822:	f365 1a8f 	bfi	sl, r5, #6, #10
   26826:	9306      	str	r3, [sp, #24]
   26828:	1cfb      	adds	r3, r7, #3
   2682a:	9308      	str	r3, [sp, #32]
   2682c:	eb0d 0102 	add.w	r1, sp, r2
   26830:	4653      	mov	r3, sl
   26832:	4658      	mov	r0, fp
   26834:	9702      	str	r7, [sp, #8]
   26836:	edcd 7a09 	vstr	s15, [sp, #36]	; 0x24
   2683a:	f01a f956 	bl	40aea <log_n>
	for (int i = 0; i < 16; i += 4) {
   2683e:	3704      	adds	r7, #4
   26840:	2f10      	cmp	r7, #16
   26842:	f108 0810 	add.w	r8, r8, #16
   26846:	d1c9      	bne.n	267dc <z_arm_fatal_error+0x88>
	LOG_ERR("fpscr:  0x%08x", esf->fpscr);
   26848:	6833      	ldr	r3, [r6, #0]
   2684a:	075a      	lsls	r2, r3, #29
   2684c:	d018      	beq.n	26880 <z_arm_fatal_error+0x12c>
   2684e:	2301      	movs	r3, #1
   26850:	f04f 0200 	mov.w	r2, #0
   26854:	f363 0207 	bfi	r2, r3, #0, #8
   26858:	f365 128f 	bfi	r2, r5, #6, #10
   2685c:	6e21      	ldr	r1, [r4, #96]	; 0x60
   2685e:	4812      	ldr	r0, [pc, #72]	; (268a8 <z_arm_fatal_error+0x154>)
   26860:	f01a f8fc 	bl	40a5c <log_1>
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
   26864:	6833      	ldr	r3, [r6, #0]
   26866:	075b      	lsls	r3, r3, #29
   26868:	d00a      	beq.n	26880 <z_arm_fatal_error+0x12c>
   2686a:	f04f 0200 	mov.w	r2, #0
   2686e:	2301      	movs	r3, #1
   26870:	f363 0207 	bfi	r2, r3, #0, #8
   26874:	f365 128f 	bfi	r2, r5, #6, #10
   26878:	69a1      	ldr	r1, [r4, #24]
   2687a:	480c      	ldr	r0, [pc, #48]	; (268ac <z_arm_fatal_error+0x158>)
   2687c:	f01a f8ee 	bl	40a5c <log_1>
		esf_dump(esf);
	}
	z_fatal_error(reason, esf);
   26880:	4621      	mov	r1, r4
   26882:	4648      	mov	r0, r9
   26884:	f014 fc2c 	bl	3b0e0 <z_fatal_error>
}
   26888:	b00b      	add	sp, #44	; 0x2c
   2688a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2688e:	bf00      	nop
   26890:	00045f08 	.word	0x00045f08
   26894:	00046078 	.word	0x00046078
   26898:	20032b3c 	.word	0x20032b3c
   2689c:	00049af0 	.word	0x00049af0
   268a0:	00049b1f 	.word	0x00049b1f
   268a4:	00049b4e 	.word	0x00049b4e
   268a8:	00049ba0 	.word	0x00049ba0
   268ac:	00049baf 	.word	0x00049baf
   268b0:	00049b5d 	.word	0x00049b5d

000268b4 <z_arm_prep_c>:
#else
#define VECTOR_ADDRESS CONFIG_SRAM_BASE_ADDRESS
#endif
static inline void relocate_vector_table(void)
{
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
   268b4:	4a11      	ldr	r2, [pc, #68]	; (268fc <z_arm_prep_c+0x48>)
 * This routine prepares for the execution of and runs C code.
 *
 * @return N/A
 */
void z_arm_prep_c(void)
{
   268b6:	b508      	push	{r3, lr}
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
   268b8:	4b11      	ldr	r3, [pc, #68]	; (26900 <z_arm_prep_c+0x4c>)
   268ba:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
   268be:	609a      	str	r2, [r3, #8]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
   268c0:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   268c4:	f3bf 8f6f 	isb	sy
	SCB->CPACR |= CPACR_CP10_PRIV_ACCESS | CPACR_CP11_PRIV_ACCESS;
   268c8:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
   268cc:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
   268d0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	FPU->FPCCR = FPU_FPCCR_ASPEN_Msk | FPU_FPCCR_LSPEN_Msk;
   268d4:	f04f 4240 	mov.w	r2, #3221225472	; 0xc0000000
   268d8:	f8c3 2234 	str.w	r2, [r3, #564]	; 0x234
  __ASM volatile ("dsb 0xF":::"memory");
   268dc:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   268e0:	f3bf 8f6f 	isb	sy
  __ASM volatile ("VMSR fpscr, %0" : : "r" (fpscr) : "vfpcc", "memory");
   268e4:	2300      	movs	r3, #0
   268e6:	eee1 3a10 	vmsr	fpscr, r3
	relocate_vector_table();
	enable_floating_point();
	z_bss_zero();
   268ea:	f014 fca1 	bl	3b230 <z_bss_zero>
	z_data_copy();
   268ee:	f014 fca9 	bl	3b244 <z_data_copy>
#if defined(CONFIG_ARMV7_R) && defined(CONFIG_INIT_STACKS)
	z_arm_init_stacks();
#endif
	z_arm_int_lib_init();
   268f2:	f000 fbcd 	bl	27090 <z_arm_int_lib_init>
	z_cstart();
   268f6:	f014 fce3 	bl	3b2c0 <z_cstart>
   268fa:	bf00      	nop
   268fc:	0001c200 	.word	0x0001c200
   26900:	e000ed00 	.word	0xe000ed00

00026904 <__start>:
 * search for a __start symbol instead, so create that alias here.
 */
SECTION_SUBSEC_FUNC(TEXT,_reset_section,__start)

#if defined(CONFIG_PLATFORM_SPECIFIC_INIT)
    bl z_platform_init
   26904:	f019 ff48 	bl	40798 <z_platform_init>

    /* lock interrupts: will get unlocked when switch to main task */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
   26908:	2020      	movs	r0, #32
    msr BASEPRI, r0
   2690a:	f380 8811 	msr	BASEPRI, r0

    /*
     * Set PSP and use it to boot without using MSP, so that it
     * gets set to _interrupt_stack during initialization.
     */
    ldr r0, =_interrupt_stack
   2690e:	4808      	ldr	r0, [pc, #32]	; (26930 <__start+0x2c>)
    ldr r1, =CONFIG_ISR_STACK_SIZE
   26910:	f44f 6100 	mov.w	r1, #2048	; 0x800
    adds r0, r0, r1
   26914:	1840      	adds	r0, r0, r1
    msr PSP, r0
   26916:	f380 8809 	msr	PSP, r0
    mrs r0, CONTROL
   2691a:	f3ef 8014 	mrs	r0, CONTROL
    movs r1, #2
   2691e:	2102      	movs	r1, #2
    orrs r0, r1 /* CONTROL_SPSEL_Msk */
   26920:	4308      	orrs	r0, r1
    msr CONTROL, r0
   26922:	f380 8814 	msr	CONTROL, r0
    /*
     * When changing the stack pointer, software must use an ISB instruction
     * immediately after the MSR instruction. This ensures that instructions
     * after the ISB instruction execute using the new stack pointer.
     */
    isb
   26926:	f3bf 8f6f 	isb	sy
    /*
     * 'bl' jumps the furthest of the branch instructions that are
     * supported on all platforms. So it is used when jumping to z_arm_prep_c
     * (even though we do not intend to return).
     */
    bl z_arm_prep_c
   2692a:	f7ff ffc3 	bl	268b4 <z_arm_prep_c>
   2692e:	0000      	.short	0x0000
    ldr r0, =_interrupt_stack
   26930:	2002ee80 	.word	0x2002ee80

00026934 <usage_fault.isra.2>:
 *
 * See z_arm_fault_dump() for example.
 *
 * @return error code to identify the fatal error reason
 */
static u32_t usage_fault(const z_arch_esf_t *esf)
   26934:	b510      	push	{r4, lr}
{
	u32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** USAGE FAULT *****");
   26936:	4c57      	ldr	r4, [pc, #348]	; (26a94 <usage_fault.isra.2+0x160>)
   26938:	6823      	ldr	r3, [r4, #0]
   2693a:	0759      	lsls	r1, r3, #29
   2693c:	d00d      	beq.n	2695a <usage_fault.isra.2+0x26>
   2693e:	2301      	movs	r3, #1
   26940:	f04f 0100 	mov.w	r1, #0
   26944:	4a54      	ldr	r2, [pc, #336]	; (26a98 <usage_fault.isra.2+0x164>)
   26946:	f363 0107 	bfi	r1, r3, #0, #8
   2694a:	4b54      	ldr	r3, [pc, #336]	; (26a9c <usage_fault.isra.2+0x168>)
   2694c:	4854      	ldr	r0, [pc, #336]	; (26aa0 <usage_fault.isra.2+0x16c>)
   2694e:	1a9b      	subs	r3, r3, r2
   26950:	08db      	lsrs	r3, r3, #3
   26952:	f363 118f 	bfi	r1, r3, #6, #10
   26956:	f01a f874 	bl	40a42 <log_0>

	/* bits are sticky: they stack and must be reset */
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
   2695a:	4b52      	ldr	r3, [pc, #328]	; (26aa4 <usage_fault.isra.2+0x170>)
   2695c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   2695e:	019a      	lsls	r2, r3, #6
   26960:	d510      	bpl.n	26984 <usage_fault.isra.2+0x50>
		PR_FAULT_INFO("  Division by zero");
   26962:	6823      	ldr	r3, [r4, #0]
   26964:	075b      	lsls	r3, r3, #29
   26966:	d00d      	beq.n	26984 <usage_fault.isra.2+0x50>
   26968:	2301      	movs	r3, #1
   2696a:	f04f 0100 	mov.w	r1, #0
   2696e:	4a4a      	ldr	r2, [pc, #296]	; (26a98 <usage_fault.isra.2+0x164>)
   26970:	f363 0107 	bfi	r1, r3, #0, #8
   26974:	4b49      	ldr	r3, [pc, #292]	; (26a9c <usage_fault.isra.2+0x168>)
   26976:	484c      	ldr	r0, [pc, #304]	; (26aa8 <usage_fault.isra.2+0x174>)
   26978:	1a9b      	subs	r3, r3, r2
   2697a:	08db      	lsrs	r3, r3, #3
   2697c:	f363 118f 	bfi	r1, r3, #6, #10
   26980:	f01a f85f 	bl	40a42 <log_0>
	}
	if ((SCB->CFSR & SCB_CFSR_UNALIGNED_Msk) != 0) {
   26984:	4b47      	ldr	r3, [pc, #284]	; (26aa4 <usage_fault.isra.2+0x170>)
   26986:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   26988:	01d8      	lsls	r0, r3, #7
   2698a:	d510      	bpl.n	269ae <usage_fault.isra.2+0x7a>
		PR_FAULT_INFO("  Unaligned memory access");
   2698c:	6823      	ldr	r3, [r4, #0]
   2698e:	0759      	lsls	r1, r3, #29
   26990:	d00d      	beq.n	269ae <usage_fault.isra.2+0x7a>
   26992:	2301      	movs	r3, #1
   26994:	f04f 0100 	mov.w	r1, #0
   26998:	4a3f      	ldr	r2, [pc, #252]	; (26a98 <usage_fault.isra.2+0x164>)
   2699a:	f363 0107 	bfi	r1, r3, #0, #8
   2699e:	4b3f      	ldr	r3, [pc, #252]	; (26a9c <usage_fault.isra.2+0x168>)
   269a0:	4842      	ldr	r0, [pc, #264]	; (26aac <usage_fault.isra.2+0x178>)
   269a2:	1a9b      	subs	r3, r3, r2
   269a4:	08db      	lsrs	r3, r3, #3
   269a6:	f363 118f 	bfi	r1, r3, #6, #10
   269aa:	f01a f84a 	bl	40a42 <log_0>
	}
#if defined(CONFIG_ARMV8_M_MAINLINE)
	if ((SCB->CFSR & SCB_CFSR_STKOF_Msk) != 0) {
   269ae:	4b3d      	ldr	r3, [pc, #244]	; (26aa4 <usage_fault.isra.2+0x170>)
   269b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   269b2:	02da      	lsls	r2, r3, #11
   269b4:	d510      	bpl.n	269d8 <usage_fault.isra.2+0xa4>
		PR_FAULT_INFO("  Stack overflow (context area not valid)");
   269b6:	6823      	ldr	r3, [r4, #0]
   269b8:	075b      	lsls	r3, r3, #29
   269ba:	d00d      	beq.n	269d8 <usage_fault.isra.2+0xa4>
   269bc:	2301      	movs	r3, #1
   269be:	f04f 0100 	mov.w	r1, #0
   269c2:	4a35      	ldr	r2, [pc, #212]	; (26a98 <usage_fault.isra.2+0x164>)
   269c4:	f363 0107 	bfi	r1, r3, #0, #8
   269c8:	4b34      	ldr	r3, [pc, #208]	; (26a9c <usage_fault.isra.2+0x168>)
   269ca:	4839      	ldr	r0, [pc, #228]	; (26ab0 <usage_fault.isra.2+0x17c>)
   269cc:	1a9b      	subs	r3, r3, r2
   269ce:	08db      	lsrs	r3, r3, #3
   269d0:	f363 118f 	bfi	r1, r3, #6, #10
   269d4:	f01a f835 	bl	40a42 <log_0>
		 */
		reason = K_ERR_STACK_CHK_FAIL;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
	}
#endif /* CONFIG_ARMV8_M_MAINLINE */
	if ((SCB->CFSR & SCB_CFSR_NOCP_Msk) != 0) {
   269d8:	4b32      	ldr	r3, [pc, #200]	; (26aa4 <usage_fault.isra.2+0x170>)
   269da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   269dc:	0318      	lsls	r0, r3, #12
   269de:	d510      	bpl.n	26a02 <usage_fault.isra.2+0xce>
		PR_FAULT_INFO("  No coprocessor instructions");
   269e0:	6823      	ldr	r3, [r4, #0]
   269e2:	0759      	lsls	r1, r3, #29
   269e4:	d00d      	beq.n	26a02 <usage_fault.isra.2+0xce>
   269e6:	2301      	movs	r3, #1
   269e8:	f04f 0100 	mov.w	r1, #0
   269ec:	4a2a      	ldr	r2, [pc, #168]	; (26a98 <usage_fault.isra.2+0x164>)
   269ee:	f363 0107 	bfi	r1, r3, #0, #8
   269f2:	4b2a      	ldr	r3, [pc, #168]	; (26a9c <usage_fault.isra.2+0x168>)
   269f4:	482f      	ldr	r0, [pc, #188]	; (26ab4 <usage_fault.isra.2+0x180>)
   269f6:	1a9b      	subs	r3, r3, r2
   269f8:	08db      	lsrs	r3, r3, #3
   269fa:	f363 118f 	bfi	r1, r3, #6, #10
   269fe:	f01a f820 	bl	40a42 <log_0>
	}
	if ((SCB->CFSR & SCB_CFSR_INVPC_Msk) != 0) {
   26a02:	4b28      	ldr	r3, [pc, #160]	; (26aa4 <usage_fault.isra.2+0x170>)
   26a04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   26a06:	035a      	lsls	r2, r3, #13
   26a08:	d510      	bpl.n	26a2c <usage_fault.isra.2+0xf8>
		PR_FAULT_INFO("  Illegal load of EXC_RETURN into PC");
   26a0a:	6823      	ldr	r3, [r4, #0]
   26a0c:	075b      	lsls	r3, r3, #29
   26a0e:	d00d      	beq.n	26a2c <usage_fault.isra.2+0xf8>
   26a10:	2301      	movs	r3, #1
   26a12:	f04f 0100 	mov.w	r1, #0
   26a16:	4a20      	ldr	r2, [pc, #128]	; (26a98 <usage_fault.isra.2+0x164>)
   26a18:	f363 0107 	bfi	r1, r3, #0, #8
   26a1c:	4b1f      	ldr	r3, [pc, #124]	; (26a9c <usage_fault.isra.2+0x168>)
   26a1e:	4826      	ldr	r0, [pc, #152]	; (26ab8 <usage_fault.isra.2+0x184>)
   26a20:	1a9b      	subs	r3, r3, r2
   26a22:	08db      	lsrs	r3, r3, #3
   26a24:	f363 118f 	bfi	r1, r3, #6, #10
   26a28:	f01a f80b 	bl	40a42 <log_0>
	}
	if ((SCB->CFSR & SCB_CFSR_INVSTATE_Msk) != 0) {
   26a2c:	4b1d      	ldr	r3, [pc, #116]	; (26aa4 <usage_fault.isra.2+0x170>)
   26a2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   26a30:	0398      	lsls	r0, r3, #14
   26a32:	d510      	bpl.n	26a56 <usage_fault.isra.2+0x122>
		PR_FAULT_INFO("  Illegal use of the EPSR");
   26a34:	6823      	ldr	r3, [r4, #0]
   26a36:	0759      	lsls	r1, r3, #29
   26a38:	d00d      	beq.n	26a56 <usage_fault.isra.2+0x122>
   26a3a:	2301      	movs	r3, #1
   26a3c:	f04f 0100 	mov.w	r1, #0
   26a40:	4a15      	ldr	r2, [pc, #84]	; (26a98 <usage_fault.isra.2+0x164>)
   26a42:	f363 0107 	bfi	r1, r3, #0, #8
   26a46:	4b15      	ldr	r3, [pc, #84]	; (26a9c <usage_fault.isra.2+0x168>)
   26a48:	481c      	ldr	r0, [pc, #112]	; (26abc <usage_fault.isra.2+0x188>)
   26a4a:	1a9b      	subs	r3, r3, r2
   26a4c:	08db      	lsrs	r3, r3, #3
   26a4e:	f363 118f 	bfi	r1, r3, #6, #10
   26a52:	f019 fff6 	bl	40a42 <log_0>
	}
	if ((SCB->CFSR & SCB_CFSR_UNDEFINSTR_Msk) != 0) {
   26a56:	4b13      	ldr	r3, [pc, #76]	; (26aa4 <usage_fault.isra.2+0x170>)
   26a58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   26a5a:	03da      	lsls	r2, r3, #15
   26a5c:	d510      	bpl.n	26a80 <usage_fault.isra.2+0x14c>
		PR_FAULT_INFO("  Attempt to execute undefined instruction");
   26a5e:	6823      	ldr	r3, [r4, #0]
   26a60:	075b      	lsls	r3, r3, #29
   26a62:	d00d      	beq.n	26a80 <usage_fault.isra.2+0x14c>
   26a64:	2301      	movs	r3, #1
   26a66:	f04f 0100 	mov.w	r1, #0
   26a6a:	4a0b      	ldr	r2, [pc, #44]	; (26a98 <usage_fault.isra.2+0x164>)
   26a6c:	f363 0107 	bfi	r1, r3, #0, #8
   26a70:	4b0a      	ldr	r3, [pc, #40]	; (26a9c <usage_fault.isra.2+0x168>)
   26a72:	4813      	ldr	r0, [pc, #76]	; (26ac0 <usage_fault.isra.2+0x18c>)
   26a74:	1a9b      	subs	r3, r3, r2
   26a76:	08db      	lsrs	r3, r3, #3
   26a78:	f363 118f 	bfi	r1, r3, #6, #10
   26a7c:	f019 ffe1 	bl	40a42 <log_0>
	}

	/* clear UFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
   26a80:	4a08      	ldr	r2, [pc, #32]	; (26aa4 <usage_fault.isra.2+0x170>)

	return reason;
}
   26a82:	2000      	movs	r0, #0
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
   26a84:	6a93      	ldr	r3, [r2, #40]	; 0x28
   26a86:	ea6f 4303 	mvn.w	r3, r3, lsl #16
   26a8a:	ea6f 4313 	mvn.w	r3, r3, lsr #16
   26a8e:	6293      	str	r3, [r2, #40]	; 0x28
}
   26a90:	bd10      	pop	{r4, pc}
   26a92:	bf00      	nop
   26a94:	20032b3c 	.word	0x20032b3c
   26a98:	00045f08 	.word	0x00045f08
   26a9c:	00046078 	.word	0x00046078
   26aa0:	00049db1 	.word	0x00049db1
   26aa4:	e000ed00 	.word	0xe000ed00
   26aa8:	00049dc9 	.word	0x00049dc9
   26aac:	00049ddc 	.word	0x00049ddc
   26ab0:	00049df6 	.word	0x00049df6
   26ab4:	00049e20 	.word	0x00049e20
   26ab8:	00049e3e 	.word	0x00049e3e
   26abc:	00049e63 	.word	0x00049e63
   26ac0:	00049e7d 	.word	0x00049e7d

00026ac4 <mem_manage_fault.isra.4>:
static u32_t mem_manage_fault(z_arch_esf_t *esf, int from_hard_fault,
   26ac4:	b570      	push	{r4, r5, r6, lr}
	PR_FAULT_INFO("***** MPU FAULT *****");
   26ac6:	4c5a      	ldr	r4, [pc, #360]	; (26c30 <mem_manage_fault.isra.4+0x16c>)
static u32_t mem_manage_fault(z_arch_esf_t *esf, int from_hard_fault,
   26ac8:	4606      	mov	r6, r0
	PR_FAULT_INFO("***** MPU FAULT *****");
   26aca:	6823      	ldr	r3, [r4, #0]
static u32_t mem_manage_fault(z_arch_esf_t *esf, int from_hard_fault,
   26acc:	460d      	mov	r5, r1
	PR_FAULT_INFO("***** MPU FAULT *****");
   26ace:	075b      	lsls	r3, r3, #29
   26ad0:	d00d      	beq.n	26aee <mem_manage_fault.isra.4+0x2a>
   26ad2:	2301      	movs	r3, #1
   26ad4:	f04f 0100 	mov.w	r1, #0
   26ad8:	4a56      	ldr	r2, [pc, #344]	; (26c34 <mem_manage_fault.isra.4+0x170>)
   26ada:	f363 0107 	bfi	r1, r3, #0, #8
   26ade:	4b56      	ldr	r3, [pc, #344]	; (26c38 <mem_manage_fault.isra.4+0x174>)
   26ae0:	4856      	ldr	r0, [pc, #344]	; (26c3c <mem_manage_fault.isra.4+0x178>)
   26ae2:	1a9b      	subs	r3, r3, r2
   26ae4:	08db      	lsrs	r3, r3, #3
   26ae6:	f363 118f 	bfi	r1, r3, #6, #10
   26aea:	f019 ffaa 	bl	40a42 <log_0>
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
   26aee:	4b54      	ldr	r3, [pc, #336]	; (26c40 <mem_manage_fault.isra.4+0x17c>)
   26af0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   26af2:	06d8      	lsls	r0, r3, #27
   26af4:	d510      	bpl.n	26b18 <mem_manage_fault.isra.4+0x54>
		PR_FAULT_INFO("  Stacking error (context area might be"
   26af6:	6823      	ldr	r3, [r4, #0]
   26af8:	0759      	lsls	r1, r3, #29
   26afa:	d00d      	beq.n	26b18 <mem_manage_fault.isra.4+0x54>
   26afc:	2301      	movs	r3, #1
   26afe:	f04f 0100 	mov.w	r1, #0
   26b02:	4a4c      	ldr	r2, [pc, #304]	; (26c34 <mem_manage_fault.isra.4+0x170>)
   26b04:	f363 0107 	bfi	r1, r3, #0, #8
   26b08:	4b4b      	ldr	r3, [pc, #300]	; (26c38 <mem_manage_fault.isra.4+0x174>)
   26b0a:	484e      	ldr	r0, [pc, #312]	; (26c44 <mem_manage_fault.isra.4+0x180>)
   26b0c:	1a9b      	subs	r3, r3, r2
   26b0e:	08db      	lsrs	r3, r3, #3
   26b10:	f363 118f 	bfi	r1, r3, #6, #10
   26b14:	f019 ff95 	bl	40a42 <log_0>
	if ((SCB->CFSR & SCB_CFSR_MUNSTKERR_Msk) != 0) {
   26b18:	4b49      	ldr	r3, [pc, #292]	; (26c40 <mem_manage_fault.isra.4+0x17c>)
   26b1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   26b1c:	071a      	lsls	r2, r3, #28
   26b1e:	d510      	bpl.n	26b42 <mem_manage_fault.isra.4+0x7e>
		PR_FAULT_INFO("  Unstacking error");
   26b20:	6823      	ldr	r3, [r4, #0]
   26b22:	075b      	lsls	r3, r3, #29
   26b24:	d00d      	beq.n	26b42 <mem_manage_fault.isra.4+0x7e>
   26b26:	2301      	movs	r3, #1
   26b28:	f04f 0100 	mov.w	r1, #0
   26b2c:	4a41      	ldr	r2, [pc, #260]	; (26c34 <mem_manage_fault.isra.4+0x170>)
   26b2e:	f363 0107 	bfi	r1, r3, #0, #8
   26b32:	4b41      	ldr	r3, [pc, #260]	; (26c38 <mem_manage_fault.isra.4+0x174>)
   26b34:	4844      	ldr	r0, [pc, #272]	; (26c48 <mem_manage_fault.isra.4+0x184>)
   26b36:	1a9b      	subs	r3, r3, r2
   26b38:	08db      	lsrs	r3, r3, #3
   26b3a:	f363 118f 	bfi	r1, r3, #6, #10
   26b3e:	f019 ff80 	bl	40a42 <log_0>
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
   26b42:	4b3f      	ldr	r3, [pc, #252]	; (26c40 <mem_manage_fault.isra.4+0x17c>)
   26b44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   26b46:	0798      	lsls	r0, r3, #30
   26b48:	d52c      	bpl.n	26ba4 <mem_manage_fault.isra.4+0xe0>
		PR_FAULT_INFO("  Data Access Violation");
   26b4a:	6823      	ldr	r3, [r4, #0]
   26b4c:	0759      	lsls	r1, r3, #29
   26b4e:	d00d      	beq.n	26b6c <mem_manage_fault.isra.4+0xa8>
   26b50:	2301      	movs	r3, #1
   26b52:	f04f 0100 	mov.w	r1, #0
   26b56:	4a37      	ldr	r2, [pc, #220]	; (26c34 <mem_manage_fault.isra.4+0x170>)
   26b58:	f363 0107 	bfi	r1, r3, #0, #8
   26b5c:	4b36      	ldr	r3, [pc, #216]	; (26c38 <mem_manage_fault.isra.4+0x174>)
   26b5e:	483b      	ldr	r0, [pc, #236]	; (26c4c <mem_manage_fault.isra.4+0x188>)
   26b60:	1a9b      	subs	r3, r3, r2
   26b62:	08db      	lsrs	r3, r3, #3
   26b64:	f363 118f 	bfi	r1, r3, #6, #10
   26b68:	f019 ff6b 	bl	40a42 <log_0>
		mmfar = SCB->MMFAR;
   26b6c:	4b34      	ldr	r3, [pc, #208]	; (26c40 <mem_manage_fault.isra.4+0x17c>)
   26b6e:	6b59      	ldr	r1, [r3, #52]	; 0x34
		if ((SCB->CFSR & SCB_CFSR_MMARVALID_Msk) != 0) {
   26b70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   26b72:	061a      	lsls	r2, r3, #24
   26b74:	d516      	bpl.n	26ba4 <mem_manage_fault.isra.4+0xe0>
			PR_EXC("  MMFAR Address: 0x%x", mmfar);
   26b76:	6823      	ldr	r3, [r4, #0]
   26b78:	075b      	lsls	r3, r3, #29
   26b7a:	d00d      	beq.n	26b98 <mem_manage_fault.isra.4+0xd4>
   26b7c:	2301      	movs	r3, #1
   26b7e:	f04f 0200 	mov.w	r2, #0
   26b82:	482c      	ldr	r0, [pc, #176]	; (26c34 <mem_manage_fault.isra.4+0x170>)
   26b84:	f363 0207 	bfi	r2, r3, #0, #8
   26b88:	4b2b      	ldr	r3, [pc, #172]	; (26c38 <mem_manage_fault.isra.4+0x174>)
   26b8a:	1a1b      	subs	r3, r3, r0
   26b8c:	08db      	lsrs	r3, r3, #3
   26b8e:	f363 128f 	bfi	r2, r3, #6, #10
   26b92:	482f      	ldr	r0, [pc, #188]	; (26c50 <mem_manage_fault.isra.4+0x18c>)
   26b94:	f019 ff62 	bl	40a5c <log_1>
			if (from_hard_fault) {
   26b98:	b126      	cbz	r6, 26ba4 <mem_manage_fault.isra.4+0xe0>
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
   26b9a:	4a29      	ldr	r2, [pc, #164]	; (26c40 <mem_manage_fault.isra.4+0x17c>)
   26b9c:	6a93      	ldr	r3, [r2, #40]	; 0x28
   26b9e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
   26ba2:	6293      	str	r3, [r2, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_IACCVIOL_Msk) != 0) {
   26ba4:	4b26      	ldr	r3, [pc, #152]	; (26c40 <mem_manage_fault.isra.4+0x17c>)
   26ba6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   26ba8:	07de      	lsls	r6, r3, #31
   26baa:	d510      	bpl.n	26bce <mem_manage_fault.isra.4+0x10a>
		PR_FAULT_INFO("  Instruction Access Violation");
   26bac:	6823      	ldr	r3, [r4, #0]
   26bae:	0758      	lsls	r0, r3, #29
   26bb0:	d00d      	beq.n	26bce <mem_manage_fault.isra.4+0x10a>
   26bb2:	2301      	movs	r3, #1
   26bb4:	f04f 0100 	mov.w	r1, #0
   26bb8:	4a1e      	ldr	r2, [pc, #120]	; (26c34 <mem_manage_fault.isra.4+0x170>)
   26bba:	f363 0107 	bfi	r1, r3, #0, #8
   26bbe:	4b1e      	ldr	r3, [pc, #120]	; (26c38 <mem_manage_fault.isra.4+0x174>)
   26bc0:	4824      	ldr	r0, [pc, #144]	; (26c54 <mem_manage_fault.isra.4+0x190>)
   26bc2:	1a9b      	subs	r3, r3, r2
   26bc4:	08db      	lsrs	r3, r3, #3
   26bc6:	f363 118f 	bfi	r1, r3, #6, #10
   26bca:	f019 ff3a 	bl	40a42 <log_0>
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
   26bce:	4b1c      	ldr	r3, [pc, #112]	; (26c40 <mem_manage_fault.isra.4+0x17c>)
   26bd0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   26bd2:	0699      	lsls	r1, r3, #26
   26bd4:	d510      	bpl.n	26bf8 <mem_manage_fault.isra.4+0x134>
		PR_FAULT_INFO(
   26bd6:	6823      	ldr	r3, [r4, #0]
   26bd8:	075a      	lsls	r2, r3, #29
   26bda:	d00d      	beq.n	26bf8 <mem_manage_fault.isra.4+0x134>
   26bdc:	2301      	movs	r3, #1
   26bde:	f04f 0100 	mov.w	r1, #0
   26be2:	4a14      	ldr	r2, [pc, #80]	; (26c34 <mem_manage_fault.isra.4+0x170>)
   26be4:	f363 0107 	bfi	r1, r3, #0, #8
   26be8:	4b13      	ldr	r3, [pc, #76]	; (26c38 <mem_manage_fault.isra.4+0x174>)
   26bea:	481b      	ldr	r0, [pc, #108]	; (26c58 <mem_manage_fault.isra.4+0x194>)
   26bec:	1a9b      	subs	r3, r3, r2
   26bee:	08db      	lsrs	r3, r3, #3
   26bf0:	f363 118f 	bfi	r1, r3, #6, #10
   26bf4:	f019 ff25 	bl	40a42 <log_0>
	if (SCB->CFSR & SCB_CFSR_MSTKERR_Msk) {
   26bf8:	4b11      	ldr	r3, [pc, #68]	; (26c40 <mem_manage_fault.isra.4+0x17c>)
   26bfa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   26bfc:	06db      	lsls	r3, r3, #27
   26bfe:	d50e      	bpl.n	26c1e <mem_manage_fault.isra.4+0x15a>
	__ASSERT(0,
   26c00:	4916      	ldr	r1, [pc, #88]	; (26c5c <mem_manage_fault.isra.4+0x198>)
   26c02:	f44f 739b 	mov.w	r3, #310	; 0x136
   26c06:	4a16      	ldr	r2, [pc, #88]	; (26c60 <mem_manage_fault.isra.4+0x19c>)
   26c08:	4816      	ldr	r0, [pc, #88]	; (26c64 <mem_manage_fault.isra.4+0x1a0>)
   26c0a:	f019 fcfa 	bl	40602 <printk>
   26c0e:	4816      	ldr	r0, [pc, #88]	; (26c68 <mem_manage_fault.isra.4+0x1a4>)
   26c10:	f019 fcf7 	bl	40602 <printk>
   26c14:	f44f 719b 	mov.w	r1, #310	; 0x136
   26c18:	4811      	ldr	r0, [pc, #68]	; (26c60 <mem_manage_fault.isra.4+0x19c>)
   26c1a:	f019 fdb5 	bl	40788 <assert_post_action>
	*recoverable = memory_fault_recoverable(esf);
   26c1e:	2000      	movs	r0, #0
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
   26c20:	4a07      	ldr	r2, [pc, #28]	; (26c40 <mem_manage_fault.isra.4+0x17c>)
   26c22:	6a93      	ldr	r3, [r2, #40]	; 0x28
   26c24:	f043 03ff 	orr.w	r3, r3, #255	; 0xff
   26c28:	6293      	str	r3, [r2, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf);
   26c2a:	7028      	strb	r0, [r5, #0]
}
   26c2c:	bd70      	pop	{r4, r5, r6, pc}
   26c2e:	bf00      	nop
   26c30:	20032b3c 	.word	0x20032b3c
   26c34:	00045f08 	.word	0x00045f08
   26c38:	00046078 	.word	0x00046078
   26c3c:	00049c65 	.word	0x00049c65
   26c40:	e000ed00 	.word	0xe000ed00
   26c44:	00049c7b 	.word	0x00049c7b
   26c48:	00049cae 	.word	0x00049cae
   26c4c:	00049cc1 	.word	0x00049cc1
   26c50:	00049cd9 	.word	0x00049cd9
   26c54:	00049cef 	.word	0x00049cef
   26c58:	00049d0e 	.word	0x00049d0e
   26c5c:	0004d39b 	.word	0x0004d39b
   26c60:	00049d3d 	.word	0x00049d3d
   26c64:	0004764f 	.word	0x0004764f
   26c68:	00049d77 	.word	0x00049d77

00026c6c <bus_fault.isra.5>:
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
   26c6c:	b570      	push	{r4, r5, r6, lr}
	PR_FAULT_INFO("***** BUS FAULT *****");
   26c6e:	4c5a      	ldr	r4, [pc, #360]	; (26dd8 <bus_fault.isra.5+0x16c>)
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
   26c70:	460d      	mov	r5, r1
	PR_FAULT_INFO("***** BUS FAULT *****");
   26c72:	6823      	ldr	r3, [r4, #0]
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
   26c74:	4606      	mov	r6, r0
	PR_FAULT_INFO("***** BUS FAULT *****");
   26c76:	0759      	lsls	r1, r3, #29
   26c78:	d00d      	beq.n	26c96 <bus_fault.isra.5+0x2a>
   26c7a:	2301      	movs	r3, #1
   26c7c:	f04f 0100 	mov.w	r1, #0
   26c80:	4a56      	ldr	r2, [pc, #344]	; (26ddc <bus_fault.isra.5+0x170>)
   26c82:	f363 0107 	bfi	r1, r3, #0, #8
   26c86:	4b56      	ldr	r3, [pc, #344]	; (26de0 <bus_fault.isra.5+0x174>)
   26c88:	4856      	ldr	r0, [pc, #344]	; (26de4 <bus_fault.isra.5+0x178>)
   26c8a:	1a9b      	subs	r3, r3, r2
   26c8c:	08db      	lsrs	r3, r3, #3
   26c8e:	f363 118f 	bfi	r1, r3, #6, #10
   26c92:	f019 fed6 	bl	40a42 <log_0>
	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
   26c96:	4b54      	ldr	r3, [pc, #336]	; (26de8 <bus_fault.isra.5+0x17c>)
   26c98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   26c9a:	04da      	lsls	r2, r3, #19
   26c9c:	d510      	bpl.n	26cc0 <bus_fault.isra.5+0x54>
		PR_FAULT_INFO("  Stacking error");
   26c9e:	6823      	ldr	r3, [r4, #0]
   26ca0:	075b      	lsls	r3, r3, #29
   26ca2:	d00d      	beq.n	26cc0 <bus_fault.isra.5+0x54>
   26ca4:	2301      	movs	r3, #1
   26ca6:	f04f 0100 	mov.w	r1, #0
   26caa:	4a4c      	ldr	r2, [pc, #304]	; (26ddc <bus_fault.isra.5+0x170>)
   26cac:	f363 0107 	bfi	r1, r3, #0, #8
   26cb0:	4b4b      	ldr	r3, [pc, #300]	; (26de0 <bus_fault.isra.5+0x174>)
   26cb2:	484e      	ldr	r0, [pc, #312]	; (26dec <bus_fault.isra.5+0x180>)
   26cb4:	1a9b      	subs	r3, r3, r2
   26cb6:	08db      	lsrs	r3, r3, #3
   26cb8:	f363 118f 	bfi	r1, r3, #6, #10
   26cbc:	f019 fec1 	bl	40a42 <log_0>
	if (SCB->CFSR & SCB_CFSR_UNSTKERR_Msk) {
   26cc0:	4b49      	ldr	r3, [pc, #292]	; (26de8 <bus_fault.isra.5+0x17c>)
   26cc2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   26cc4:	0518      	lsls	r0, r3, #20
   26cc6:	d510      	bpl.n	26cea <bus_fault.isra.5+0x7e>
		PR_FAULT_INFO("  Unstacking error");
   26cc8:	6823      	ldr	r3, [r4, #0]
   26cca:	0759      	lsls	r1, r3, #29
   26ccc:	d00d      	beq.n	26cea <bus_fault.isra.5+0x7e>
   26cce:	2301      	movs	r3, #1
   26cd0:	f04f 0100 	mov.w	r1, #0
   26cd4:	4a41      	ldr	r2, [pc, #260]	; (26ddc <bus_fault.isra.5+0x170>)
   26cd6:	f363 0107 	bfi	r1, r3, #0, #8
   26cda:	4b41      	ldr	r3, [pc, #260]	; (26de0 <bus_fault.isra.5+0x174>)
   26cdc:	4844      	ldr	r0, [pc, #272]	; (26df0 <bus_fault.isra.5+0x184>)
   26cde:	1a9b      	subs	r3, r3, r2
   26ce0:	08db      	lsrs	r3, r3, #3
   26ce2:	f363 118f 	bfi	r1, r3, #6, #10
   26ce6:	f019 feac 	bl	40a42 <log_0>
	if (SCB->CFSR & SCB_CFSR_PRECISERR_Msk) {
   26cea:	4b3f      	ldr	r3, [pc, #252]	; (26de8 <bus_fault.isra.5+0x17c>)
   26cec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   26cee:	059a      	lsls	r2, r3, #22
   26cf0:	d52c      	bpl.n	26d4c <bus_fault.isra.5+0xe0>
		PR_FAULT_INFO("  Precise data bus error");
   26cf2:	6823      	ldr	r3, [r4, #0]
   26cf4:	075b      	lsls	r3, r3, #29
   26cf6:	d00d      	beq.n	26d14 <bus_fault.isra.5+0xa8>
   26cf8:	2301      	movs	r3, #1
   26cfa:	f04f 0100 	mov.w	r1, #0
   26cfe:	4a37      	ldr	r2, [pc, #220]	; (26ddc <bus_fault.isra.5+0x170>)
   26d00:	f363 0107 	bfi	r1, r3, #0, #8
   26d04:	4b36      	ldr	r3, [pc, #216]	; (26de0 <bus_fault.isra.5+0x174>)
   26d06:	483b      	ldr	r0, [pc, #236]	; (26df4 <bus_fault.isra.5+0x188>)
   26d08:	1a9b      	subs	r3, r3, r2
   26d0a:	08db      	lsrs	r3, r3, #3
   26d0c:	f363 118f 	bfi	r1, r3, #6, #10
   26d10:	f019 fe97 	bl	40a42 <log_0>
		STORE_xFAR(bfar, SCB->BFAR);
   26d14:	4b34      	ldr	r3, [pc, #208]	; (26de8 <bus_fault.isra.5+0x17c>)
   26d16:	6b99      	ldr	r1, [r3, #56]	; 0x38
		if ((SCB->CFSR & SCB_CFSR_BFARVALID_Msk) != 0) {
   26d18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   26d1a:	0418      	lsls	r0, r3, #16
   26d1c:	d516      	bpl.n	26d4c <bus_fault.isra.5+0xe0>
			PR_EXC("  BFAR Address: 0x%x", bfar);
   26d1e:	6823      	ldr	r3, [r4, #0]
   26d20:	075a      	lsls	r2, r3, #29
   26d22:	d00d      	beq.n	26d40 <bus_fault.isra.5+0xd4>
   26d24:	2301      	movs	r3, #1
   26d26:	f04f 0200 	mov.w	r2, #0
   26d2a:	482c      	ldr	r0, [pc, #176]	; (26ddc <bus_fault.isra.5+0x170>)
   26d2c:	f363 0207 	bfi	r2, r3, #0, #8
   26d30:	4b2b      	ldr	r3, [pc, #172]	; (26de0 <bus_fault.isra.5+0x174>)
   26d32:	1a1b      	subs	r3, r3, r0
   26d34:	08db      	lsrs	r3, r3, #3
   26d36:	f363 128f 	bfi	r2, r3, #6, #10
   26d3a:	482f      	ldr	r0, [pc, #188]	; (26df8 <bus_fault.isra.5+0x18c>)
   26d3c:	f019 fe8e 	bl	40a5c <log_1>
			if (from_hard_fault) {
   26d40:	b126      	cbz	r6, 26d4c <bus_fault.isra.5+0xe0>
				SCB->CFSR &= ~SCB_CFSR_BFARVALID_Msk;
   26d42:	4a29      	ldr	r2, [pc, #164]	; (26de8 <bus_fault.isra.5+0x17c>)
   26d44:	6a93      	ldr	r3, [r2, #40]	; 0x28
   26d46:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
   26d4a:	6293      	str	r3, [r2, #40]	; 0x28
	if (SCB->CFSR & SCB_CFSR_IMPRECISERR_Msk) {
   26d4c:	4b26      	ldr	r3, [pc, #152]	; (26de8 <bus_fault.isra.5+0x17c>)
   26d4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   26d50:	055b      	lsls	r3, r3, #21
   26d52:	d510      	bpl.n	26d76 <bus_fault.isra.5+0x10a>
		PR_FAULT_INFO("  Imprecise data bus error");
   26d54:	6823      	ldr	r3, [r4, #0]
   26d56:	075e      	lsls	r6, r3, #29
   26d58:	d00d      	beq.n	26d76 <bus_fault.isra.5+0x10a>
   26d5a:	2301      	movs	r3, #1
   26d5c:	f04f 0100 	mov.w	r1, #0
   26d60:	4a1e      	ldr	r2, [pc, #120]	; (26ddc <bus_fault.isra.5+0x170>)
   26d62:	f363 0107 	bfi	r1, r3, #0, #8
   26d66:	4b1e      	ldr	r3, [pc, #120]	; (26de0 <bus_fault.isra.5+0x174>)
   26d68:	4824      	ldr	r0, [pc, #144]	; (26dfc <bus_fault.isra.5+0x190>)
   26d6a:	1a9b      	subs	r3, r3, r2
   26d6c:	08db      	lsrs	r3, r3, #3
   26d6e:	f363 118f 	bfi	r1, r3, #6, #10
   26d72:	f019 fe66 	bl	40a42 <log_0>
	if ((SCB->CFSR & SCB_CFSR_IBUSERR_Msk) != 0) {
   26d76:	4b1c      	ldr	r3, [pc, #112]	; (26de8 <bus_fault.isra.5+0x17c>)
   26d78:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   26d7a:	05d0      	lsls	r0, r2, #23
   26d7c:	d518      	bpl.n	26db0 <bus_fault.isra.5+0x144>
		PR_FAULT_INFO("  Instruction bus error");
   26d7e:	6823      	ldr	r3, [r4, #0]
   26d80:	0759      	lsls	r1, r3, #29
   26d82:	d00d      	beq.n	26da0 <bus_fault.isra.5+0x134>
   26d84:	2301      	movs	r3, #1
   26d86:	f04f 0100 	mov.w	r1, #0
   26d8a:	4a14      	ldr	r2, [pc, #80]	; (26ddc <bus_fault.isra.5+0x170>)
   26d8c:	f363 0107 	bfi	r1, r3, #0, #8
   26d90:	4b13      	ldr	r3, [pc, #76]	; (26de0 <bus_fault.isra.5+0x174>)
   26d92:	481b      	ldr	r0, [pc, #108]	; (26e00 <bus_fault.isra.5+0x194>)
   26d94:	1a9b      	subs	r3, r3, r2
   26d96:	08db      	lsrs	r3, r3, #3
   26d98:	f363 118f 	bfi	r1, r3, #6, #10
		PR_FAULT_INFO("  Floating-point lazy state preservation error");
   26d9c:	f019 fe51 	bl	40a42 <log_0>
	*recoverable = memory_fault_recoverable(esf);
   26da0:	2000      	movs	r0, #0
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
   26da2:	4a11      	ldr	r2, [pc, #68]	; (26de8 <bus_fault.isra.5+0x17c>)
   26da4:	6a93      	ldr	r3, [r2, #40]	; 0x28
   26da6:	f443 437f 	orr.w	r3, r3, #65280	; 0xff00
   26daa:	6293      	str	r3, [r2, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf);
   26dac:	7028      	strb	r0, [r5, #0]
}
   26dae:	bd70      	pop	{r4, r5, r6, pc}
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
   26db0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   26db2:	049a      	lsls	r2, r3, #18
   26db4:	d5f4      	bpl.n	26da0 <bus_fault.isra.5+0x134>
		PR_FAULT_INFO("  Floating-point lazy state preservation error");
   26db6:	6823      	ldr	r3, [r4, #0]
   26db8:	075b      	lsls	r3, r3, #29
   26dba:	d0f1      	beq.n	26da0 <bus_fault.isra.5+0x134>
   26dbc:	2301      	movs	r3, #1
   26dbe:	f04f 0100 	mov.w	r1, #0
   26dc2:	4a06      	ldr	r2, [pc, #24]	; (26ddc <bus_fault.isra.5+0x170>)
   26dc4:	f363 0107 	bfi	r1, r3, #0, #8
   26dc8:	4b05      	ldr	r3, [pc, #20]	; (26de0 <bus_fault.isra.5+0x174>)
   26dca:	480e      	ldr	r0, [pc, #56]	; (26e04 <bus_fault.isra.5+0x198>)
   26dcc:	1a9b      	subs	r3, r3, r2
   26dce:	08db      	lsrs	r3, r3, #3
   26dd0:	f363 118f 	bfi	r1, r3, #6, #10
   26dd4:	e7e2      	b.n	26d9c <bus_fault.isra.5+0x130>
   26dd6:	bf00      	nop
   26dd8:	20032b3c 	.word	0x20032b3c
   26ddc:	00045f08 	.word	0x00045f08
   26de0:	00046078 	.word	0x00046078
   26de4:	00049bdd 	.word	0x00049bdd
   26de8:	e000ed00 	.word	0xe000ed00
   26dec:	00049bf3 	.word	0x00049bf3
   26df0:	00049cae 	.word	0x00049cae
   26df4:	00049c04 	.word	0x00049c04
   26df8:	00049c1d 	.word	0x00049c1d
   26dfc:	00049c32 	.word	0x00049c32
   26e00:	00049c4d 	.word	0x00049c4d
   26e04:	00049d0e 	.word	0x00049d0e

00026e08 <z_arm_fault>:
 * @param psp PSP value immediately after the exception occurred
 * @param exc_return EXC_RETURN value present in LR after exception entry.
 *
 */
void z_arm_fault(u32_t msp, u32_t psp, u32_t exc_return)
{
   26e08:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	u32_t reason = K_ERR_CPU_EXCEPTION;
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
   26e0c:	4b80      	ldr	r3, [pc, #512]	; (27010 <z_arm_fault+0x208>)
{
   26e0e:	b09d      	sub	sp, #116	; 0x74
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
   26e10:	f8d3 8004 	ldr.w	r8, [r3, #4]
{
   26e14:	4606      	mov	r6, r0
   26e16:	4689      	mov	r9, r1
   26e18:	4614      	mov	r4, r2
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
   26e1a:	f3c8 0708 	ubfx	r7, r8, #0, #9
   26e1e:	2500      	movs	r5, #0
   26e20:	f385 8811 	msr	BASEPRI, r5
   26e24:	f3bf 8f6f 	isb	sy
	if ((exc_return & EXC_RETURN_INDICATOR_PREFIX) !=
   26e28:	f002 437f 	and.w	r3, r2, #4278190080	; 0xff000000
   26e2c:	f1b3 4f7f 	cmp.w	r3, #4278190080	; 0xff000000
   26e30:	d11f      	bne.n	26e72 <z_arm_fault+0x6a>
	if (exc_return & EXC_RETURN_EXCEPTION_SECURE_Secure) {
   26e32:	07d3      	lsls	r3, r2, #31
   26e34:	d41d      	bmi.n	26e72 <z_arm_fault+0x6a>
	if (exc_return & EXC_RETURN_RETURN_STACK_Secure) {
   26e36:	0655      	lsls	r5, r2, #25
   26e38:	d403      	bmi.n	26e42 <z_arm_fault+0x3a>
		if (exc_return & EXC_RETURN_MODE_THREAD) {
   26e3a:	0724      	lsls	r4, r4, #28
   26e3c:	d416      	bmi.n	26e6c <z_arm_fault+0x64>
			*nested_exc = true;
   26e3e:	2501      	movs	r5, #1
   26e40:	e016      	b.n	26e70 <z_arm_fault+0x68>
		PR_FAULT_INFO("Exception occurred in Secure State");
   26e42:	4b74      	ldr	r3, [pc, #464]	; (27014 <z_arm_fault+0x20c>)
   26e44:	681b      	ldr	r3, [r3, #0]
   26e46:	0758      	lsls	r0, r3, #29
   26e48:	d00d      	beq.n	26e66 <z_arm_fault+0x5e>
   26e4a:	2301      	movs	r3, #1
   26e4c:	f04f 0100 	mov.w	r1, #0
   26e50:	4a71      	ldr	r2, [pc, #452]	; (27018 <z_arm_fault+0x210>)
   26e52:	f363 0107 	bfi	r1, r3, #0, #8
   26e56:	4b71      	ldr	r3, [pc, #452]	; (2701c <z_arm_fault+0x214>)
   26e58:	4871      	ldr	r0, [pc, #452]	; (27020 <z_arm_fault+0x218>)
   26e5a:	1a9b      	subs	r3, r3, r2
   26e5c:	08db      	lsrs	r3, r3, #3
   26e5e:	f363 118f 	bfi	r1, r3, #6, #10
   26e62:	f019 fdee 	bl	40a42 <log_0>
		if (exc_return & EXC_RETURN_SPSEL_PROCESS) {
   26e66:	f014 0504 	ands.w	r5, r4, #4
   26e6a:	d001      	beq.n	26e70 <z_arm_fault+0x68>
			ptr_esf = (z_arch_esf_t *)psp;
   26e6c:	464e      	mov	r6, r9
	*nested_exc = false;
   26e6e:	2500      	movs	r5, #0

	/* Retrieve the Exception Stack Frame (ESF) to be supplied
	 * as argument to the remainder of the fault handling process.
	 */
	 esf = get_esf(msp, psp, exc_return, &nested_exc);
	__ASSERT(esf != NULL,
   26e70:	b97e      	cbnz	r6, 26e92 <z_arm_fault+0x8a>
   26e72:	f240 33b1 	movw	r3, #945	; 0x3b1
   26e76:	4a6b      	ldr	r2, [pc, #428]	; (27024 <z_arm_fault+0x21c>)
   26e78:	496b      	ldr	r1, [pc, #428]	; (27028 <z_arm_fault+0x220>)
   26e7a:	486c      	ldr	r0, [pc, #432]	; (2702c <z_arm_fault+0x224>)
   26e7c:	f019 fbc1 	bl	40602 <printk>
   26e80:	486b      	ldr	r0, [pc, #428]	; (27030 <z_arm_fault+0x228>)
   26e82:	f019 fbbe 	bl	40602 <printk>
   26e86:	f240 31b1 	movw	r1, #945	; 0x3b1
   26e8a:	4866      	ldr	r0, [pc, #408]	; (27024 <z_arm_fault+0x21c>)
   26e8c:	f019 fc7c 	bl	40788 <assert_post_action>
   26e90:	2600      	movs	r6, #0
	*recoverable = false;
   26e92:	2300      	movs	r3, #0
   26e94:	f88d 3007 	strb.w	r3, [sp, #7]
	switch (fault) {
   26e98:	1efb      	subs	r3, r7, #3
   26e9a:	2b09      	cmp	r3, #9
   26e9c:	f200 8097 	bhi.w	26fce <z_arm_fault+0x1c6>
   26ea0:	e8df f003 	tbb	[pc, r3]
   26ea4:	767e7a05 	.word	0x767e7a05
   26ea8:	95959595 	.word	0x95959595
   26eac:	8295      	.short	0x8295
	PR_FAULT_INFO("***** HARD FAULT *****");
   26eae:	4f59      	ldr	r7, [pc, #356]	; (27014 <z_arm_fault+0x20c>)
   26eb0:	683b      	ldr	r3, [r7, #0]
   26eb2:	0759      	lsls	r1, r3, #29
   26eb4:	d00d      	beq.n	26ed2 <z_arm_fault+0xca>
   26eb6:	2301      	movs	r3, #1
   26eb8:	f04f 0100 	mov.w	r1, #0
   26ebc:	4a56      	ldr	r2, [pc, #344]	; (27018 <z_arm_fault+0x210>)
   26ebe:	f363 0107 	bfi	r1, r3, #0, #8
   26ec2:	4b56      	ldr	r3, [pc, #344]	; (2701c <z_arm_fault+0x214>)
   26ec4:	485b      	ldr	r0, [pc, #364]	; (27034 <z_arm_fault+0x22c>)
   26ec6:	1a9b      	subs	r3, r3, r2
   26ec8:	08db      	lsrs	r3, r3, #3
   26eca:	f363 118f 	bfi	r1, r3, #6, #10
   26ece:	f019 fdb8 	bl	40a42 <log_0>
	*recoverable = false;
   26ed2:	2400      	movs	r4, #0
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
   26ed4:	4b4e      	ldr	r3, [pc, #312]	; (27010 <z_arm_fault+0x208>)
	*recoverable = false;
   26ed6:	f88d 4007 	strb.w	r4, [sp, #7]
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
   26eda:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   26edc:	0792      	lsls	r2, r2, #30
   26ede:	d52c      	bpl.n	26f3a <z_arm_fault+0x132>
		PR_EXC("  Bus fault on vector table read");
   26ee0:	683b      	ldr	r3, [r7, #0]
   26ee2:	075f      	lsls	r7, r3, #29
   26ee4:	d101      	bne.n	26eea <z_arm_fault+0xe2>
	u32_t reason = K_ERR_CPU_EXCEPTION;
   26ee6:	2400      	movs	r4, #0
   26ee8:	e00d      	b.n	26f06 <z_arm_fault+0xfe>
		PR_EXC("  Bus fault on vector table read");
   26eea:	2301      	movs	r3, #1
   26eec:	f04f 0100 	mov.w	r1, #0
   26ef0:	4a49      	ldr	r2, [pc, #292]	; (27018 <z_arm_fault+0x210>)
   26ef2:	f363 0107 	bfi	r1, r3, #0, #8
   26ef6:	4b49      	ldr	r3, [pc, #292]	; (2701c <z_arm_fault+0x214>)
   26ef8:	484f      	ldr	r0, [pc, #316]	; (27038 <z_arm_fault+0x230>)
   26efa:	1a9b      	subs	r3, r3, r2
   26efc:	08db      	lsrs	r3, r3, #3
   26efe:	f363 118f 	bfi	r1, r3, #6, #10
   26f02:	f019 fd9e 	bl	40a42 <log_0>
		"ESF could not be retrieved successfully. Shall never occur.");

	reason = fault_handle(esf, fault, &recoverable);
	if (recoverable) {
   26f06:	f89d 3007 	ldrb.w	r3, [sp, #7]
   26f0a:	b99b      	cbnz	r3, 26f34 <z_arm_fault+0x12c>
		return;
	}

	/* Copy ESF */
	memcpy(&esf_copy, esf, sizeof(z_arch_esf_t));
   26f0c:	2268      	movs	r2, #104	; 0x68
   26f0e:	4631      	mov	r1, r6
   26f10:	a802      	add	r0, sp, #8
   26f12:	f01d ff9d 	bl	44e50 <memcpy>
	/* Overwrite stacked IPSR to mark a nested exception,
	 * or a return to Thread mode. Note that this may be
	 * required, if the retrieved ESF contents are invalid
	 * due to, for instance, a stacking error.
	 */
	if (nested_exc) {
   26f16:	9b09      	ldr	r3, [sp, #36]	; 0x24
   26f18:	2d00      	cmp	r5, #0
   26f1a:	d073      	beq.n	27004 <z_arm_fault+0x1fc>
		if ((esf_copy.basic.xpsr & IPSR_ISR_Msk) == 0) {
   26f1c:	f3c3 0208 	ubfx	r2, r3, #0, #9
   26f20:	b922      	cbnz	r2, 26f2c <z_arm_fault+0x124>
			esf_copy.basic.xpsr |= IPSR_ISR_Msk;
   26f22:	ea6f 2353 	mvn.w	r3, r3, lsr #9
   26f26:	ea6f 2343 	mvn.w	r3, r3, lsl #9
		}
	} else {
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
   26f2a:	9309      	str	r3, [sp, #36]	; 0x24
	}

	z_arm_fatal_error(reason, &esf_copy);
   26f2c:	a902      	add	r1, sp, #8
   26f2e:	4620      	mov	r0, r4
   26f30:	f7ff fc10 	bl	26754 <z_arm_fatal_error>
}
   26f34:	b01d      	add	sp, #116	; 0x74
   26f36:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	} else if ((SCB->HFSR & SCB_HFSR_FORCED_Msk) != 0) {
   26f3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   26f3c:	0058      	lsls	r0, r3, #1
   26f3e:	d5d2      	bpl.n	26ee6 <z_arm_fault+0xde>
		PR_EXC("  Fault escalation (see below)");
   26f40:	683b      	ldr	r3, [r7, #0]
   26f42:	0759      	lsls	r1, r3, #29
   26f44:	d00d      	beq.n	26f62 <z_arm_fault+0x15a>
   26f46:	2301      	movs	r3, #1
   26f48:	f04f 0100 	mov.w	r1, #0
   26f4c:	4a32      	ldr	r2, [pc, #200]	; (27018 <z_arm_fault+0x210>)
   26f4e:	f363 0107 	bfi	r1, r3, #0, #8
   26f52:	4b32      	ldr	r3, [pc, #200]	; (2701c <z_arm_fault+0x214>)
   26f54:	4839      	ldr	r0, [pc, #228]	; (2703c <z_arm_fault+0x234>)
   26f56:	1a9b      	subs	r3, r3, r2
   26f58:	08db      	lsrs	r3, r3, #3
   26f5a:	f363 118f 	bfi	r1, r3, #6, #10
   26f5e:	f019 fd70 	bl	40a42 <log_0>
		if (SCB_MMFSR != 0) {
   26f62:	4b37      	ldr	r3, [pc, #220]	; (27040 <z_arm_fault+0x238>)
   26f64:	781b      	ldrb	r3, [r3, #0]
   26f66:	b12b      	cbz	r3, 26f74 <z_arm_fault+0x16c>
			reason = mem_manage_fault(esf, 1, recoverable);
   26f68:	2001      	movs	r0, #1
   26f6a:	f10d 0107 	add.w	r1, sp, #7
		reason = mem_manage_fault(esf, 0, recoverable);
   26f6e:	f7ff fda9 	bl	26ac4 <mem_manage_fault.isra.4>
   26f72:	e00f      	b.n	26f94 <z_arm_fault+0x18c>
		} else if (SCB_BFSR != 0) {
   26f74:	4b33      	ldr	r3, [pc, #204]	; (27044 <z_arm_fault+0x23c>)
   26f76:	781b      	ldrb	r3, [r3, #0]
   26f78:	b12b      	cbz	r3, 26f86 <z_arm_fault+0x17e>
			reason = bus_fault(esf, 1, recoverable);
   26f7a:	2001      	movs	r0, #1
   26f7c:	f10d 0107 	add.w	r1, sp, #7
		reason = bus_fault(esf, 0, recoverable);
   26f80:	f7ff fe74 	bl	26c6c <bus_fault.isra.5>
   26f84:	e006      	b.n	26f94 <z_arm_fault+0x18c>
		} else if (SCB_UFSR != 0) {
   26f86:	4b30      	ldr	r3, [pc, #192]	; (27048 <z_arm_fault+0x240>)
   26f88:	881b      	ldrh	r3, [r3, #0]
   26f8a:	b29b      	uxth	r3, r3
   26f8c:	2b00      	cmp	r3, #0
   26f8e:	d0aa      	beq.n	26ee6 <z_arm_fault+0xde>
			reason = usage_fault(esf);
   26f90:	f7ff fcd0 	bl	26934 <usage_fault.isra.2>
   26f94:	4604      	mov	r4, r0
   26f96:	e7b6      	b.n	26f06 <z_arm_fault+0xfe>
		reason = mem_manage_fault(esf, 0, recoverable);
   26f98:	f10d 0107 	add.w	r1, sp, #7
   26f9c:	2000      	movs	r0, #0
   26f9e:	e7e6      	b.n	26f6e <z_arm_fault+0x166>
		reason = bus_fault(esf, 0, recoverable);
   26fa0:	f10d 0107 	add.w	r1, sp, #7
   26fa4:	2000      	movs	r0, #0
   26fa6:	e7eb      	b.n	26f80 <z_arm_fault+0x178>
	PR_FAULT_INFO(
   26fa8:	4b1a      	ldr	r3, [pc, #104]	; (27014 <z_arm_fault+0x20c>)
   26faa:	681b      	ldr	r3, [r3, #0]
   26fac:	075a      	lsls	r2, r3, #29
   26fae:	d09a      	beq.n	26ee6 <z_arm_fault+0xde>
   26fb0:	2301      	movs	r3, #1
   26fb2:	f04f 0100 	mov.w	r1, #0
   26fb6:	4a18      	ldr	r2, [pc, #96]	; (27018 <z_arm_fault+0x210>)
   26fb8:	f363 0107 	bfi	r1, r3, #0, #8
   26fbc:	4b17      	ldr	r3, [pc, #92]	; (2701c <z_arm_fault+0x214>)
   26fbe:	4823      	ldr	r0, [pc, #140]	; (2704c <z_arm_fault+0x244>)
   26fc0:	1a9b      	subs	r3, r3, r2
   26fc2:	08db      	lsrs	r3, r3, #3
   26fc4:	f363 118f 	bfi	r1, r3, #6, #10
   26fc8:	f019 fd3b 	bl	40a42 <log_0>
   26fcc:	e78b      	b.n	26ee6 <z_arm_fault+0xde>
	PR_FAULT_INFO("***** %s %d) *****",
   26fce:	4b11      	ldr	r3, [pc, #68]	; (27014 <z_arm_fault+0x20c>)
   26fd0:	681b      	ldr	r3, [r3, #0]
   26fd2:	075b      	lsls	r3, r3, #29
   26fd4:	d087      	beq.n	26ee6 <z_arm_fault+0xde>
   26fd6:	2201      	movs	r2, #1
   26fd8:	f04f 0300 	mov.w	r3, #0
   26fdc:	490e      	ldr	r1, [pc, #56]	; (27018 <z_arm_fault+0x210>)
   26fde:	f362 0307 	bfi	r3, r2, #0, #8
   26fe2:	4a0e      	ldr	r2, [pc, #56]	; (2701c <z_arm_fault+0x214>)
   26fe4:	481a      	ldr	r0, [pc, #104]	; (27050 <z_arm_fault+0x248>)
   26fe6:	1a52      	subs	r2, r2, r1
   26fe8:	08d2      	lsrs	r2, r2, #3
   26fea:	f418 7ff8 	tst.w	r8, #496	; 0x1f0
   26fee:	f362 138f 	bfi	r3, r2, #6, #10
   26ff2:	4918      	ldr	r1, [pc, #96]	; (27054 <z_arm_fault+0x24c>)
   26ff4:	f1a7 0210 	sub.w	r2, r7, #16
   26ff8:	bf18      	it	ne
   26ffa:	4601      	movne	r1, r0
   26ffc:	4816      	ldr	r0, [pc, #88]	; (27058 <z_arm_fault+0x250>)
   26ffe:	f019 fd41 	bl	40a84 <log_2>
   27002:	e770      	b.n	26ee6 <z_arm_fault+0xde>
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
   27004:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
   27008:	f023 0301 	bic.w	r3, r3, #1
   2700c:	e78d      	b.n	26f2a <z_arm_fault+0x122>
   2700e:	bf00      	nop
   27010:	e000ed00 	.word	0xe000ed00
   27014:	20032b3c 	.word	0x20032b3c
   27018:	00045f08 	.word	0x00045f08
   2701c:	00046078 	.word	0x00046078
   27020:	00049ea8 	.word	0x00049ea8
   27024:	00049d3d 	.word	0x00049d3d
   27028:	00049ecb 	.word	0x00049ecb
   2702c:	0004764f 	.word	0x0004764f
   27030:	00049ede 	.word	0x00049ede
   27034:	00049f1c 	.word	0x00049f1c
   27038:	00049f33 	.word	0x00049f33
   2703c:	00049f54 	.word	0x00049f54
   27040:	e000ed28 	.word	0xe000ed28
   27044:	e000ed29 	.word	0xe000ed29
   27048:	e000ed2a 	.word	0xe000ed2a
   2704c:	00049f73 	.word	0x00049f73
   27050:	00049fbe 	.word	0x00049fbe
   27054:	00049fa9 	.word	0x00049fa9
   27058:	00049fd7 	.word	0x00049fd7

0002705c <z_arm_fault_init>:
 */
void z_arm_fault_init(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
   2705c:	4a02      	ldr	r2, [pc, #8]	; (27068 <z_arm_fault_init+0xc>)
   2705e:	6953      	ldr	r3, [r2, #20]
   27060:	f043 0310 	orr.w	r3, r3, #16
   27064:	6153      	str	r3, [r2, #20]
	 * Stack to attempt to descend into secure region, in which case a
	 * Secure Hard Fault will occur and we can track the fault from there.
	 */
	SCB->CCR |= SCB_CCR_STKOFHFNMIGN_Msk;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
}
   27066:	4770      	bx	lr
   27068:	e000ed00 	.word	0xe000ed00

0002706c <sys_arch_reboot>:
  __ASM volatile ("dsb 0xF":::"memory");
   2706c:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
   27070:	4905      	ldr	r1, [pc, #20]	; (27088 <sys_arch_reboot+0x1c>)
   27072:	4b06      	ldr	r3, [pc, #24]	; (2708c <sys_arch_reboot+0x20>)
   27074:	68ca      	ldr	r2, [r1, #12]
   27076:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
   2707a:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
   2707c:	60cb      	str	r3, [r1, #12]
   2707e:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
   27082:	bf00      	nop
   27084:	e7fd      	b.n	27082 <sys_arch_reboot+0x16>
   27086:	bf00      	nop
   27088:	e000ed00 	.word	0xe000ed00
   2708c:	05fa0004 	.word	0x05fa0004

00027090 <z_arm_int_lib_init>:
 * @return N/A
 */

void z_arm_int_lib_init(void)
{
	int irq = 0;
   27090:	2300      	movs	r3, #0
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   27092:	2120      	movs	r1, #32
   27094:	4803      	ldr	r0, [pc, #12]	; (270a4 <z_arm_int_lib_init+0x14>)
   27096:	18c2      	adds	r2, r0, r3

	for (; irq < CONFIG_NUM_IRQS; irq++) {
   27098:	3301      	adds	r3, #1
   2709a:	2b41      	cmp	r3, #65	; 0x41
   2709c:	f882 1300 	strb.w	r1, [r2, #768]	; 0x300
   270a0:	d1f9      	bne.n	27096 <z_arm_int_lib_init+0x6>
		NVIC_SetPriority((IRQn_Type)irq, _IRQ_PRIO_OFFSET);
	}
}
   270a2:	4770      	bx	lr
   270a4:	e000e100 	.word	0xe000e100

000270a8 <z_impl_k_thread_abort>:
#include <sys/__assert.h>

extern void z_thread_single_abort(struct k_thread *thread);

void z_impl_k_thread_abort(k_tid_t thread)
{
   270a8:	b538      	push	{r3, r4, r5, lr}
   270aa:	4604      	mov	r4, r0
	__asm__ volatile(
   270ac:	f04f 0320 	mov.w	r3, #32
   270b0:	f3ef 8511 	mrs	r5, BASEPRI
   270b4:	f383 8811 	msr	BASEPRI, r3
   270b8:	f3bf 8f6f 	isb	sy
	unsigned int key;

	key = irq_lock();

	__ASSERT(!(thread->base.user_options & K_ESSENTIAL),
   270bc:	7b03      	ldrb	r3, [r0, #12]
   270be:	07db      	lsls	r3, r3, #31
   270c0:	d50c      	bpl.n	270dc <z_impl_k_thread_abort+0x34>
   270c2:	4912      	ldr	r1, [pc, #72]	; (2710c <z_impl_k_thread_abort+0x64>)
   270c4:	2324      	movs	r3, #36	; 0x24
   270c6:	4a12      	ldr	r2, [pc, #72]	; (27110 <z_impl_k_thread_abort+0x68>)
   270c8:	4812      	ldr	r0, [pc, #72]	; (27114 <z_impl_k_thread_abort+0x6c>)
   270ca:	f019 fa9a 	bl	40602 <printk>
   270ce:	4812      	ldr	r0, [pc, #72]	; (27118 <z_impl_k_thread_abort+0x70>)
   270d0:	f019 fa97 	bl	40602 <printk>
   270d4:	2124      	movs	r1, #36	; 0x24
   270d6:	480e      	ldr	r0, [pc, #56]	; (27110 <z_impl_k_thread_abort+0x68>)
   270d8:	f019 fb56 	bl	40788 <assert_post_action>
		 "essential thread aborted");

	z_thread_single_abort(thread);
   270dc:	4620      	mov	r0, r4
   270de:	f015 fd53 	bl	3cb88 <z_thread_single_abort>
	z_thread_monitor_exit(thread);

	if (_current == thread) {
   270e2:	4b0e      	ldr	r3, [pc, #56]	; (2711c <z_impl_k_thread_abort+0x74>)
   270e4:	689b      	ldr	r3, [r3, #8]
   270e6:	42a3      	cmp	r3, r4
   270e8:	d10b      	bne.n	27102 <z_impl_k_thread_abort+0x5a>
		if ((SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk) == 0) {
   270ea:	4b0d      	ldr	r3, [pc, #52]	; (27120 <z_impl_k_thread_abort+0x78>)
   270ec:	685a      	ldr	r2, [r3, #4]
   270ee:	f3c2 0208 	ubfx	r2, r2, #0, #9
   270f2:	b912      	cbnz	r2, 270fa <z_impl_k_thread_abort+0x52>
	int ret;
	z_check_stack_sentinel();
#ifndef CONFIG_ARM
	sys_trace_thread_switched_out();
#endif
	ret = arch_swap(key);
   270f4:	4628      	mov	r0, r5
   270f6:	f7ff fa47 	bl	26588 <arch_swap>
			(void)z_swap_irqlock(key);
			CODE_UNREACHABLE;
		} else {
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
   270fa:	685a      	ldr	r2, [r3, #4]
   270fc:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
   27100:	605a      	str	r2, [r3, #4]
		}
	}

	/* The abort handler might have altered the ready queue. */
	z_reschedule_irqlock(key);
   27102:	4628      	mov	r0, r5
}
   27104:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule_irqlock(key);
   27108:	f01d bd16 	b.w	44b38 <z_reschedule_irqlock>
   2710c:	0004a02b 	.word	0x0004a02b
   27110:	00049fea 	.word	0x00049fea
   27114:	0004764f 	.word	0x0004764f
   27118:	0004a059 	.word	0x0004a059
   2711c:	2002970c 	.word	0x2002970c
   27120:	e000ed00 	.word	0xe000ed00

00027124 <z_arm_configure_static_mpu_regions>:
 *
 * For some MPU architectures, such as the unmodified ARMv8-M MPU,
 * the function must execute with MPU enabled.
 */
void z_arm_configure_static_mpu_regions(void)
{
   27124:	b510      	push	{r4, lr}
		.size = (u32_t)&_nocache_ram_size,
		.attr = K_MEM_PARTITION_P_RW_U_NA_NOCACHE,
		};
#endif /* CONFIG_NOCACHE_MEMORY */
#if defined(CONFIG_ARCH_HAS_RAMFUNC_SUPPORT)
		const struct k_mem_partition ramfunc_region =
   27126:	4b0e      	ldr	r3, [pc, #56]	; (27160 <z_arm_configure_static_mpu_regions+0x3c>)
{
   27128:	b088      	sub	sp, #32
		const struct k_mem_partition ramfunc_region =
   2712a:	9302      	str	r3, [sp, #8]
   2712c:	4b0d      	ldr	r3, [pc, #52]	; (27164 <z_arm_configure_static_mpu_regions+0x40>)
	/* Configure the static MPU regions within firmware SRAM boundaries.
	 * Start address of the image is given by _image_ram_start. The end
	 * of the firmware SRAM area is marked by __kernel_ram_end, taking
	 * into account the unused SRAM area, as well.
	 */
	arm_core_mpu_configure_static_mpu_regions(static_regions,
   2712e:	4c0e      	ldr	r4, [pc, #56]	; (27168 <z_arm_configure_static_mpu_regions+0x44>)
		const struct k_mem_partition ramfunc_region =
   27130:	9303      	str	r3, [sp, #12]
   27132:	4b0e      	ldr	r3, [pc, #56]	; (2716c <z_arm_configure_static_mpu_regions+0x48>)
	arm_core_mpu_configure_static_mpu_regions(static_regions,
   27134:	4a0e      	ldr	r2, [pc, #56]	; (27170 <z_arm_configure_static_mpu_regions+0x4c>)
		const struct k_mem_partition ramfunc_region =
   27136:	9304      	str	r3, [sp, #16]
	const struct k_mem_partition *static_regions[] = {
   27138:	ab02      	add	r3, sp, #8
   2713a:	9301      	str	r3, [sp, #4]
	arm_core_mpu_configure_static_mpu_regions(static_regions,
   2713c:	a801      	add	r0, sp, #4
   2713e:	4623      	mov	r3, r4
   27140:	2101      	movs	r1, #1
   27142:	f000 f995 	bl	27470 <arm_core_mpu_configure_static_mpu_regions>
	/* Define a constant array of k_mem_partition objects that holds the
	 * boundaries of the areas, inside which dynamic region programming
	 * is allowed. The information is passed to the underlying driver at
	 * initialization.
	 */
	const struct k_mem_partition dyn_region_areas[] = {
   27146:	2300      	movs	r3, #0
   27148:	9307      	str	r3, [sp, #28]
		{
		.start = _MPU_DYNAMIC_REGIONS_AREA_START,
   2714a:	4b0a      	ldr	r3, [pc, #40]	; (27174 <z_arm_configure_static_mpu_regions+0x50>)
		.size =  _MPU_DYNAMIC_REGIONS_AREA_SIZE,
		}
	};

	arm_core_mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
   2714c:	2101      	movs	r1, #1
		.size =  _MPU_DYNAMIC_REGIONS_AREA_SIZE,
   2714e:	1ae4      	subs	r4, r4, r3
	arm_core_mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
   27150:	a805      	add	r0, sp, #20
	const struct k_mem_partition dyn_region_areas[] = {
   27152:	9305      	str	r3, [sp, #20]
   27154:	9406      	str	r4, [sp, #24]
	arm_core_mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
   27156:	f000 f9af 	bl	274b8 <arm_core_mpu_mark_areas_for_dynamic_regions>
		ARRAY_SIZE(dyn_region_areas));
#endif /* CONFIG_MPU_REQUIRES_NON_OVERLAPPING_REGIONS */
}
   2715a:	b008      	add	sp, #32
   2715c:	bd10      	pop	{r4, pc}
   2715e:	bf00      	nop
   27160:	20020000 	.word	0x20020000
   27164:	00000000 	.word	0x00000000
   27168:	20040000 	.word	0x20040000
   2716c:	00010006 	.word	0x00010006
   27170:	20020000 	.word	0x20020000
   27174:	20020000 	.word	0x20020000

00027178 <region_init>:
 * Note:
 *   The caller must provide a valid region index.
 */
static void region_init(const u32_t index,
	const struct arm_mpu_region *region_conf)
{
   27178:	b510      	push	{r4, lr}
	ARM_MPU_SetRegion(
		/* RNR */
		index,
		/* RBAR */
		(region_conf->base & MPU_RBAR_BASE_Msk)
   2717a:	680b      	ldr	r3, [r1, #0]
		| (region_conf->attr.rbar &
   2717c:	7a0c      	ldrb	r4, [r1, #8]
		(region_conf->base & MPU_RBAR_BASE_Msk)
   2717e:	f023 021f 	bic.w	r2, r3, #31
		| (region_conf->attr.rbar &
   27182:	f004 031f 	and.w	r3, r4, #31
   27186:	431a      	orrs	r2, r3
			(MPU_RBAR_XN_Msk | MPU_RBAR_AP_Msk | MPU_RBAR_SH_Msk)),
		/* RLAR */
		(region_conf->attr.r_limit & MPU_RLAR_LIMIT_Msk)
   27188:	68cb      	ldr	r3, [r1, #12]
		| ((region_conf->attr.mair_idx << MPU_RLAR_AttrIndx_Pos)
   2718a:	0964      	lsrs	r4, r4, #5
		(region_conf->attr.r_limit & MPU_RLAR_LIMIT_Msk)
   2718c:	f023 031f 	bic.w	r3, r3, #31
* \param rbar Value for RBAR register.
* \param rlar Value for RLAR register.
*/   
__STATIC_INLINE void ARM_MPU_SetRegionEx(MPU_Type* mpu, uint32_t rnr, uint32_t rbar, uint32_t rlar)
{
  mpu->RNR = rnr;
   27190:	4904      	ldr	r1, [pc, #16]	; (271a4 <region_init+0x2c>)
		| ((region_conf->attr.mair_idx << MPU_RLAR_AttrIndx_Pos)
   27192:	ea43 0344 	orr.w	r3, r3, r4, lsl #1
			& MPU_RLAR_AttrIndx_Msk)
		| MPU_RLAR_EN_Msk
   27196:	f043 0301 	orr.w	r3, r3, #1
   2719a:	6088      	str	r0, [r1, #8]
  mpu->RBAR = rbar;
   2719c:	60ca      	str	r2, [r1, #12]
  mpu->RLAR = rlar;
   2719e:	610b      	str	r3, [r1, #16]
	);

	LOG_DBG("[%d] 0x%08x 0x%08x 0x%08x 0x%08x",
			index, region_conf->base, region_conf->attr.rbar,
			region_conf->attr.mair_idx, region_conf->attr.r_limit);
}
   271a0:	bd10      	pop	{r4, pc}
   271a2:	bf00      	nop
   271a4:	e000ed90 	.word	0xe000ed90

000271a8 <region_allocate_and_init.part.0>:
#include <arm_mpu_v8_internal.h>
#else
#error "Unsupported ARM CPU"
#endif

static int region_allocate_and_init(const u8_t index,
   271a8:	b508      	push	{r3, lr}
{
	/* Attempt to allocate new region index. */
	if (index > (get_num_regions() - 1)) {

		/* No available MPU region index. */
		LOG_ERR("Failed to allocate new MPU region %u\n", index);
   271aa:	4b0b      	ldr	r3, [pc, #44]	; (271d8 <region_allocate_and_init.part.0+0x30>)
static int region_allocate_and_init(const u8_t index,
   271ac:	4601      	mov	r1, r0
		LOG_ERR("Failed to allocate new MPU region %u\n", index);
   271ae:	681b      	ldr	r3, [r3, #0]
   271b0:	075b      	lsls	r3, r3, #29
   271b2:	d00d      	beq.n	271d0 <region_allocate_and_init.part.0+0x28>
   271b4:	2301      	movs	r3, #1
   271b6:	f04f 0200 	mov.w	r2, #0
   271ba:	4808      	ldr	r0, [pc, #32]	; (271dc <region_allocate_and_init.part.0+0x34>)
   271bc:	f363 0207 	bfi	r2, r3, #0, #8
   271c0:	4b07      	ldr	r3, [pc, #28]	; (271e0 <region_allocate_and_init.part.0+0x38>)
   271c2:	1a1b      	subs	r3, r3, r0
   271c4:	08db      	lsrs	r3, r3, #3
   271c6:	f363 128f 	bfi	r2, r3, #6, #10
   271ca:	4806      	ldr	r0, [pc, #24]	; (271e4 <region_allocate_and_init.part.0+0x3c>)
   271cc:	f019 fc46 	bl	40a5c <log_1>

	/* Program region */
	region_init(index, region_conf);

	return index;
}
   271d0:	f06f 0015 	mvn.w	r0, #21
   271d4:	bd08      	pop	{r3, pc}
   271d6:	bf00      	nop
   271d8:	20032aec 	.word	0x20032aec
   271dc:	00045f08 	.word	0x00045f08
   271e0:	00045fd8 	.word	0x00045fd8
   271e4:	0004a22c 	.word	0x0004a22c

000271e8 <mpu_configure_regions_and_partition.constprop.3>:
 * sanity check of the memory regions to be programmed.
 *
 * The function performs a full partition of the background memory
 * area, effectively, leaving no space in this area uncovered by MPU.
 */
static int mpu_configure_regions_and_partition(const struct k_mem_partition
   271e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   271ec:	4607      	mov	r7, r0
   271ee:	4688      	mov	r8, r1
   271f0:	4614      	mov	r4, r2
	bool do_sanity_check)
{
	int i;
	int reg_index = start_reg_index;

	for (i = 0; i < regions_num; i++) {
   271f2:	2600      	movs	r6, #0
	MPU->RNR = index;
   271f4:	4d63      	ldr	r5, [pc, #396]	; (27384 <mpu_configure_regions_and_partition.constprop.3+0x19c>)
static int mpu_configure_regions_and_partition(const struct k_mem_partition
   271f6:	b085      	sub	sp, #20
	for (i = 0; i < regions_num; i++) {
   271f8:	4546      	cmp	r6, r8
   271fa:	da36      	bge.n	2726a <mpu_configure_regions_and_partition.constprop.3+0x82>
		if (regions[i]->size == 0U) {
   271fc:	f857 3026 	ldr.w	r3, [r7, r6, lsl #2]
   27200:	f8d3 9004 	ldr.w	r9, [r3, #4]
   27204:	f1b9 0f00 	cmp.w	r9, #0
   27208:	d062      	beq.n	272d0 <mpu_configure_regions_and_partition.constprop.3+0xe8>
		&&
   2720a:	f1b9 0f1f 	cmp.w	r9, #31
   2720e:	d926      	bls.n	2725e <mpu_configure_regions_and_partition.constprop.3+0x76>
		&&
   27210:	f019 0f1f 	tst.w	r9, #31
   27214:	d123      	bne.n	2725e <mpu_configure_regions_and_partition.constprop.3+0x76>
		((part->start &
   27216:	f8d3 a000 	ldr.w	sl, [r3]
		&&
   2721a:	f01a 0f1f 	tst.w	sl, #31
   2721e:	d11e      	bne.n	2725e <mpu_configure_regions_and_partition.constprop.3+0x76>
	u32_t region_start_addr = arm_cmse_mpu_region_get(start);
   27220:	4650      	mov	r0, sl
   27222:	f01b fcf0 	bl	42c06 <arm_cmse_mpu_region_get>
   27226:	4683      	mov	fp, r0
	u32_t region_end_addr = arm_cmse_mpu_region_get(start + size - 1);
   27228:	eb09 000a 	add.w	r0, r9, sl
   2722c:	3801      	subs	r0, #1
   2722e:	f01b fcea 	bl	42c06 <arm_cmse_mpu_region_get>
	if (region_start_addr == region_end_addr) {
   27232:	4583      	cmp	fp, r0
   27234:	d02d      	beq.n	27292 <mpu_configure_regions_and_partition.constprop.3+0xaa>
	return -EINVAL;
   27236:	f06f 0b15 	mvn.w	fp, #21
		int u_reg_index =
			get_region_index(regions[i]->start, regions[i]->size);

		if ((u_reg_index == -EINVAL) ||
			(u_reg_index > (reg_index - 1))) {
			LOG_ERR("Invalid underlying region index %u",
   2723a:	4b53      	ldr	r3, [pc, #332]	; (27388 <mpu_configure_regions_and_partition.constprop.3+0x1a0>)
   2723c:	681b      	ldr	r3, [r3, #0]
   2723e:	075b      	lsls	r3, r3, #29
   27240:	d011      	beq.n	27266 <mpu_configure_regions_and_partition.constprop.3+0x7e>
   27242:	2301      	movs	r3, #1
   27244:	f04f 0200 	mov.w	r2, #0
   27248:	4950      	ldr	r1, [pc, #320]	; (2738c <mpu_configure_regions_and_partition.constprop.3+0x1a4>)
   2724a:	f363 0207 	bfi	r2, r3, #0, #8
   2724e:	4b50      	ldr	r3, [pc, #320]	; (27390 <mpu_configure_regions_and_partition.constprop.3+0x1a8>)
   27250:	4850      	ldr	r0, [pc, #320]	; (27394 <mpu_configure_regions_and_partition.constprop.3+0x1ac>)
   27252:	1a5b      	subs	r3, r3, r1
   27254:	08db      	lsrs	r3, r3, #3
   27256:	f363 128f 	bfi	r2, r3, #6, #10
   2725a:	4659      	mov	r1, fp
   2725c:	e016      	b.n	2728c <mpu_configure_regions_and_partition.constprop.3+0xa4>
			LOG_ERR("Partition %u: sanity check failed.", i);
   2725e:	4b4a      	ldr	r3, [pc, #296]	; (27388 <mpu_configure_regions_and_partition.constprop.3+0x1a0>)
   27260:	681b      	ldr	r3, [r3, #0]
   27262:	075a      	lsls	r2, r3, #29
   27264:	d105      	bne.n	27272 <mpu_configure_regions_and_partition.constprop.3+0x8a>

			reg_index =
				mpu_configure_region(reg_index, regions[i]);

			if (reg_index == -EINVAL) {
				return reg_index;
   27266:	f06f 0415 	mvn.w	r4, #21
			reg_index++;
		}
	}

	return reg_index;
}
   2726a:	4620      	mov	r0, r4
   2726c:	b005      	add	sp, #20
   2726e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			LOG_ERR("Partition %u: sanity check failed.", i);
   27272:	2301      	movs	r3, #1
   27274:	f04f 0200 	mov.w	r2, #0
   27278:	4944      	ldr	r1, [pc, #272]	; (2738c <mpu_configure_regions_and_partition.constprop.3+0x1a4>)
   2727a:	f363 0207 	bfi	r2, r3, #0, #8
   2727e:	4b44      	ldr	r3, [pc, #272]	; (27390 <mpu_configure_regions_and_partition.constprop.3+0x1a8>)
   27280:	4845      	ldr	r0, [pc, #276]	; (27398 <mpu_configure_regions_and_partition.constprop.3+0x1b0>)
   27282:	1a5b      	subs	r3, r3, r1
   27284:	4631      	mov	r1, r6
   27286:	08db      	lsrs	r3, r3, #3
   27288:	f363 128f 	bfi	r2, r3, #6, #10
			LOG_ERR("Invalid underlying region index %u",
   2728c:	f019 fbe6 	bl	40a5c <log_1>
   27290:	e7e9      	b.n	27266 <mpu_configure_regions_and_partition.constprop.3+0x7e>
		if ((u_reg_index == -EINVAL) ||
   27292:	f11b 0f16 	cmn.w	fp, #22
   27296:	d0d0      	beq.n	2723a <mpu_configure_regions_and_partition.constprop.3+0x52>
			(u_reg_index > (reg_index - 1))) {
   27298:	1e63      	subs	r3, r4, #1
		if ((u_reg_index == -EINVAL) ||
   2729a:	455b      	cmp	r3, fp
   2729c:	dbcd      	blt.n	2723a <mpu_configure_regions_and_partition.constprop.3+0x52>
	MPU->RNR = index;
   2729e:	f8c5 b008 	str.w	fp, [r5, #8]
	return MPU->RBAR & MPU_RBAR_BASE_Msk;
   272a2:	68e8      	ldr	r0, [r5, #12]
	MPU->RNR = index;
   272a4:	f8c5 b008 	str.w	fp, [r5, #8]
	return (MPU->RLAR & MPU_RLAR_LIMIT_Msk) | (~MPU_RLAR_LIMIT_Msk);
   272a8:	692b      	ldr	r3, [r5, #16]
		u32_t reg_last = regions[i]->start + regions[i]->size - 1;
   272aa:	f857 1026 	ldr.w	r1, [r7, r6, lsl #2]
	return MPU->RBAR & MPU_RBAR_BASE_Msk;
   272ae:	f020 001f 	bic.w	r0, r0, #31
	return (MPU->RLAR & MPU_RLAR_LIMIT_Msk) | (~MPU_RLAR_LIMIT_Msk);
   272b2:	f043 0a1f 	orr.w	sl, r3, #31
		u32_t reg_last = regions[i]->start + regions[i]->size - 1;
   272b6:	e9d1 3200 	ldrd	r3, r2, [r1]
   272ba:	441a      	add	r2, r3
		if ((regions[i]->start == u_reg_base) &&
   272bc:	4298      	cmp	r0, r3
		u32_t reg_last = regions[i]->start + regions[i]->size - 1;
   272be:	f102 39ff 	add.w	r9, r2, #4294967295
		if ((regions[i]->start == u_reg_base) &&
   272c2:	d118      	bne.n	272f6 <mpu_configure_regions_and_partition.constprop.3+0x10e>
   272c4:	45ca      	cmp	sl, r9
   272c6:	d105      	bne.n	272d4 <mpu_configure_regions_and_partition.constprop.3+0xec>
			mpu_configure_region(u_reg_index, regions[i]);
   272c8:	fa5f f08b 	uxtb.w	r0, fp
   272cc:	f01b fc78 	bl	42bc0 <mpu_configure_region>
	for (i = 0; i < regions_num; i++) {
   272d0:	3601      	adds	r6, #1
   272d2:	e791      	b.n	271f8 <mpu_configure_regions_and_partition.constprop.3+0x10>
	MPU->RNR = index;
   272d4:	f8c5 b008 	str.w	fp, [r5, #8]
	MPU->RBAR = (MPU->RBAR & (~MPU_RBAR_BASE_Msk))
   272d8:	68eb      	ldr	r3, [r5, #12]
		| (base & MPU_RBAR_BASE_Msk);
   272da:	f022 021f 	bic.w	r2, r2, #31
	MPU->RBAR = (MPU->RBAR & (~MPU_RBAR_BASE_Msk))
   272de:	f003 031f 	and.w	r3, r3, #31
		| (base & MPU_RBAR_BASE_Msk);
   272e2:	431a      	orrs	r2, r3
	MPU->RBAR = (MPU->RBAR & (~MPU_RBAR_BASE_Msk))
   272e4:	60ea      	str	r2, [r5, #12]
				mpu_configure_region(reg_index, regions[i]);
   272e6:	b2e0      	uxtb	r0, r4
				mpu_configure_region(reg_index, regions[i]);
   272e8:	f01b fc6a 	bl	42bc0 <mpu_configure_region>
			if (reg_index == -EINVAL) {
   272ec:	f110 0f16 	cmn.w	r0, #22
   272f0:	d0b9      	beq.n	27266 <mpu_configure_regions_and_partition.constprop.3+0x7e>
			reg_index++;
   272f2:	1c44      	adds	r4, r0, #1
   272f4:	e7ec      	b.n	272d0 <mpu_configure_regions_and_partition.constprop.3+0xe8>
	MPU->RNR = index;
   272f6:	f8c5 b008 	str.w	fp, [r5, #8]
	MPU->RLAR = (MPU->RLAR & (~MPU_RLAR_LIMIT_Msk))
   272fa:	692a      	ldr	r2, [r5, #16]
   272fc:	3b01      	subs	r3, #1
   272fe:	f023 031f 	bic.w	r3, r3, #31
   27302:	f002 021f 	and.w	r2, r2, #31
		| (limit & MPU_RLAR_LIMIT_Msk);
   27306:	4313      	orrs	r3, r2
		} else if (reg_last == u_reg_last) {
   27308:	45ca      	cmp	sl, r9
   2730a:	b2e0      	uxtb	r0, r4
	MPU->RLAR = (MPU->RLAR & (~MPU_RLAR_LIMIT_Msk))
   2730c:	612b      	str	r3, [r5, #16]
		} else if (reg_last == u_reg_last) {
   2730e:	d0eb      	beq.n	272e8 <mpu_configure_regions_and_partition.constprop.3+0x100>
				mpu_configure_region(reg_index, regions[i]);
   27310:	f01b fc56 	bl	42bc0 <mpu_configure_region>
			if (reg_index == -EINVAL) {
   27314:	f110 0f16 	cmn.w	r0, #22
   27318:	d0a5      	beq.n	27266 <mpu_configure_regions_and_partition.constprop.3+0x7e>
	MPU->RNR = index;
   2731a:	f8c5 b008 	str.w	fp, [r5, #8]
	attr->rbar = MPU->RBAR &
   2731e:	68ea      	ldr	r2, [r5, #12]
   27320:	f89d 3008 	ldrb.w	r3, [sp, #8]
			REGION_LIMIT_ADDR((regions[i]->start +
   27324:	f10a 3aff 	add.w	sl, sl, #4294967295
	attr->rbar = MPU->RBAR &
   27328:	f362 0304 	bfi	r3, r2, #0, #5
   2732c:	f88d 3008 	strb.w	r3, [sp, #8]
	attr->mair_idx = (MPU->RLAR & MPU_RLAR_AttrIndx_Msk) >>
   27330:	692b      	ldr	r3, [r5, #16]
   27332:	f89d 2008 	ldrb.w	r2, [sp, #8]
   27336:	085b      	lsrs	r3, r3, #1
   27338:	f363 1247 	bfi	r2, r3, #5, #3
			fill_region.base = regions[i]->start +
   2733c:	f857 3026 	ldr.w	r3, [r7, r6, lsl #2]
	attr->mair_idx = (MPU->RLAR & MPU_RLAR_AttrIndx_Msk) >>
   27340:	f88d 2008 	strb.w	r2, [sp, #8]
			fill_region.base = regions[i]->start +
   27344:	e9d3 1300 	ldrd	r1, r3, [r3]
   27348:	440b      	add	r3, r1
   2734a:	9300      	str	r3, [sp, #0]
			REGION_LIMIT_ADDR((regions[i]->start +
   2734c:	f023 031f 	bic.w	r3, r3, #31
			reg_index++;
   27350:	1c44      	adds	r4, r0, #1
			REGION_LIMIT_ADDR((regions[i]->start +
   27352:	4453      	add	r3, sl
   27354:	eba3 0309 	sub.w	r3, r3, r9
				region_allocate_and_init(reg_index,
   27358:	b2e4      	uxtb	r4, r4
			REGION_LIMIT_ADDR((regions[i]->start +
   2735a:	f023 031f 	bic.w	r3, r3, #31
	if (index > (get_num_regions() - 1)) {
   2735e:	2c0f      	cmp	r4, #15
			fill_region.attr.r_limit =
   27360:	9303      	str	r3, [sp, #12]
   27362:	d909      	bls.n	27378 <mpu_configure_regions_and_partition.constprop.3+0x190>
   27364:	4620      	mov	r0, r4
   27366:	f7ff ff1f 	bl	271a8 <region_allocate_and_init.part.0>
			if (reg_index == -EINVAL) {
   2736a:	f110 0f16 	cmn.w	r0, #22
   2736e:	4604      	mov	r4, r0
   27370:	f43f af79 	beq.w	27266 <mpu_configure_regions_and_partition.constprop.3+0x7e>
			reg_index++;
   27374:	3401      	adds	r4, #1
   27376:	e7ab      	b.n	272d0 <mpu_configure_regions_and_partition.constprop.3+0xe8>
	region_init(index, region_conf);
   27378:	4669      	mov	r1, sp
   2737a:	4620      	mov	r0, r4
   2737c:	f7ff fefc 	bl	27178 <region_init>
			if (reg_index == -EINVAL) {
   27380:	e7f8      	b.n	27374 <mpu_configure_regions_and_partition.constprop.3+0x18c>
   27382:	bf00      	nop
   27384:	e000ed90 	.word	0xe000ed90
   27388:	20032aec 	.word	0x20032aec
   2738c:	00045f08 	.word	0x00045f08
   27390:	00045fd8 	.word	0x00045fd8
   27394:	0004a209 	.word	0x0004a209
   27398:	0004a1e6 	.word	0x0004a1e6

0002739c <arm_core_mpu_enable>:
void arm_core_mpu_enable(void)
{
	/* Enable MPU and use the default memory map as a
	 * background region for privileged software access.
	 */
	MPU->CTRL = MPU_CTRL_ENABLE_Msk | MPU_CTRL_PRIVDEFENA_Msk;
   2739c:	2205      	movs	r2, #5
   2739e:	4b03      	ldr	r3, [pc, #12]	; (273ac <arm_core_mpu_enable+0x10>)
   273a0:	605a      	str	r2, [r3, #4]
   273a2:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   273a6:	f3bf 8f6f 	isb	sy

	/* Make sure that all the registers are set before proceeding */
	__DSB();
	__ISB();
}
   273aa:	4770      	bx	lr
   273ac:	e000ed90 	.word	0xe000ed90

000273b0 <arm_core_mpu_disable>:
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
   273b0:	f3bf 8f5f 	dmb	sy
{
	/* Force any outstanding transfers to complete before disabling MPU */
	__DMB();

	/* Disable MPU */
	MPU->CTRL = 0;
   273b4:	2200      	movs	r2, #0
   273b6:	4b01      	ldr	r3, [pc, #4]	; (273bc <arm_core_mpu_disable+0xc>)
   273b8:	605a      	str	r2, [r3, #4]
}
   273ba:	4770      	bx	lr
   273bc:	e000ed90 	.word	0xe000ed90

000273c0 <arm_mpu_init>:
 *
 * This function provides the default configuration mechanism for the Memory
 * Protection Unit (MPU).
 */
static int arm_mpu_init(struct device *arg)
{
   273c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	u32_t r_index;

	if (mpu_config.num_regions > get_num_regions()) {
   273c2:	4f21      	ldr	r7, [pc, #132]	; (27448 <arm_mpu_init+0x88>)
   273c4:	683e      	ldr	r6, [r7, #0]
   273c6:	2e10      	cmp	r6, #16
   273c8:	d913      	bls.n	273f2 <arm_mpu_init+0x32>
		 * what is supported by hardware. As this operation
		 * is executed during system (pre-kernel) initialization,
		 * we want to ensure we can detect an attempt to
		 * perform invalid configuration.
		 */
		__ASSERT(0,
   273ca:	f240 132d 	movw	r3, #301	; 0x12d
   273ce:	4a1f      	ldr	r2, [pc, #124]	; (2744c <arm_mpu_init+0x8c>)
   273d0:	491f      	ldr	r1, [pc, #124]	; (27450 <arm_mpu_init+0x90>)
   273d2:	4820      	ldr	r0, [pc, #128]	; (27454 <arm_mpu_init+0x94>)
   273d4:	f019 f915 	bl	40602 <printk>
   273d8:	2210      	movs	r2, #16
   273da:	4631      	mov	r1, r6
   273dc:	481e      	ldr	r0, [pc, #120]	; (27458 <arm_mpu_init+0x98>)
   273de:	f019 f910 	bl	40602 <printk>
   273e2:	481a      	ldr	r0, [pc, #104]	; (2744c <arm_mpu_init+0x8c>)
   273e4:	f240 112d 	movw	r1, #301	; 0x12d
   273e8:	f019 f9ce 	bl	40788 <assert_post_action>
			"Request to configure: %u regions (supported: %u)\n",
			mpu_config.num_regions,
			get_num_regions()
		);
		return -1;
   273ec:	f04f 30ff 	mov.w	r0, #4294967295
		(MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos ==
		DT_NUM_MPU_REGIONS,
		"Invalid number of MPU regions\n");
#endif /* CORTEX_M0PLUS || CPU_CORTEX_M3 || CPU_CORTEX_M4 */
	return 0;
}
   273f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
   273f2:	2400      	movs	r4, #0
	arm_core_mpu_disable();
   273f4:	f7ff ffdc 	bl	273b0 <arm_core_mpu_disable>
	MPU->MAIR0 =
   273f8:	4d18      	ldr	r5, [pc, #96]	; (2745c <arm_mpu_init+0x9c>)
   273fa:	4a19      	ldr	r2, [pc, #100]	; (27460 <arm_mpu_init+0xa0>)
   273fc:	632a      	str	r2, [r5, #48]	; 0x30
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
   273fe:	42a6      	cmp	r6, r4
   27400:	d119      	bne.n	27436 <arm_mpu_init+0x76>
	static_regions_num = mpu_config.num_regions;
   27402:	4b18      	ldr	r3, [pc, #96]	; (27464 <arm_mpu_init+0xa4>)
   27404:	701e      	strb	r6, [r3, #0]
	arm_core_mpu_enable();
   27406:	f7ff ffc9 	bl	2739c <arm_core_mpu_enable>
	__ASSERT(
   2740a:	682b      	ldr	r3, [r5, #0]
   2740c:	f3c3 2307 	ubfx	r3, r3, #8, #8
   27410:	2b10      	cmp	r3, #16
   27412:	d00e      	beq.n	27432 <arm_mpu_init+0x72>
   27414:	4914      	ldr	r1, [pc, #80]	; (27468 <arm_mpu_init+0xa8>)
   27416:	f44f 73a7 	mov.w	r3, #334	; 0x14e
   2741a:	4a0c      	ldr	r2, [pc, #48]	; (2744c <arm_mpu_init+0x8c>)
   2741c:	480d      	ldr	r0, [pc, #52]	; (27454 <arm_mpu_init+0x94>)
   2741e:	f019 f8f0 	bl	40602 <printk>
   27422:	4812      	ldr	r0, [pc, #72]	; (2746c <arm_mpu_init+0xac>)
   27424:	f019 f8ed 	bl	40602 <printk>
   27428:	f44f 71a7 	mov.w	r1, #334	; 0x14e
   2742c:	4807      	ldr	r0, [pc, #28]	; (2744c <arm_mpu_init+0x8c>)
   2742e:	f019 f9ab 	bl	40788 <assert_post_action>
	return 0;
   27432:	2000      	movs	r0, #0
   27434:	e7dc      	b.n	273f0 <arm_mpu_init+0x30>
		region_init(r_index, &mpu_config.mpu_regions[r_index]);
   27436:	6879      	ldr	r1, [r7, #4]
   27438:	4620      	mov	r0, r4
   2743a:	eb01 1104 	add.w	r1, r1, r4, lsl #4
   2743e:	f7ff fe9b 	bl	27178 <region_init>
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
   27442:	3401      	adds	r4, #1
   27444:	e7db      	b.n	273fe <arm_mpu_init+0x3e>
   27446:	bf00      	nop
   27448:	00046804 	.word	0x00046804
   2744c:	0004a100 	.word	0x0004a100
   27450:	0004d39b 	.word	0x0004d39b
   27454:	0004764f 	.word	0x0004764f
   27458:	0004a140 	.word	0x0004a140
   2745c:	e000ed90 	.word	0xe000ed90
   27460:	0044ffaa 	.word	0x0044ffaa
   27464:	200299eb 	.word	0x200299eb
   27468:	0004a174 	.word	0x0004a174
   2746c:	0004a1c5 	.word	0x0004a1c5

00027470 <arm_core_mpu_configure_static_mpu_regions>:
{
   27470:	b538      	push	{r3, r4, r5, lr}
static int mpu_configure_static_mpu_regions(const struct k_mem_partition
	*static_regions[], const u8_t regions_num,
	const u32_t background_area_base,
	const u32_t background_area_end)
{
	int mpu_reg_index = static_regions_num;
   27472:	4c0c      	ldr	r4, [pc, #48]	; (274a4 <arm_core_mpu_configure_static_mpu_regions+0x34>)
   27474:	460d      	mov	r5, r1
	 * given boundaries.
	 */
	ARG_UNUSED(background_area_base);
	ARG_UNUSED(background_area_end);

	mpu_reg_index = mpu_configure_regions_and_partition(static_regions,
   27476:	7822      	ldrb	r2, [r4, #0]
   27478:	f7ff feb6 	bl	271e8 <mpu_configure_regions_and_partition.constprop.3>
		regions_num, mpu_reg_index, true);

	static_regions_num = mpu_reg_index;
   2747c:	7020      	strb	r0, [r4, #0]
	if (mpu_configure_static_mpu_regions(static_regions, regions_num,
   2747e:	3016      	adds	r0, #22
   27480:	d10f      	bne.n	274a2 <arm_core_mpu_configure_static_mpu_regions+0x32>
		__ASSERT(0, "Configuring %u static MPU regions failed\n",
   27482:	23f3      	movs	r3, #243	; 0xf3
   27484:	4a08      	ldr	r2, [pc, #32]	; (274a8 <arm_core_mpu_configure_static_mpu_regions+0x38>)
   27486:	4909      	ldr	r1, [pc, #36]	; (274ac <arm_core_mpu_configure_static_mpu_regions+0x3c>)
   27488:	4809      	ldr	r0, [pc, #36]	; (274b0 <arm_core_mpu_configure_static_mpu_regions+0x40>)
   2748a:	f019 f8ba 	bl	40602 <printk>
   2748e:	4629      	mov	r1, r5
   27490:	4808      	ldr	r0, [pc, #32]	; (274b4 <arm_core_mpu_configure_static_mpu_regions+0x44>)
   27492:	f019 f8b6 	bl	40602 <printk>
}
   27496:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		__ASSERT(0, "Configuring %u static MPU regions failed\n",
   2749a:	21f3      	movs	r1, #243	; 0xf3
   2749c:	4802      	ldr	r0, [pc, #8]	; (274a8 <arm_core_mpu_configure_static_mpu_regions+0x38>)
   2749e:	f019 b973 	b.w	40788 <assert_post_action>
}
   274a2:	bd38      	pop	{r3, r4, r5, pc}
   274a4:	200299eb 	.word	0x200299eb
   274a8:	0004a100 	.word	0x0004a100
   274ac:	0004d39b 	.word	0x0004d39b
   274b0:	0004764f 	.word	0x0004764f
   274b4:	0004a0a5 	.word	0x0004a0a5

000274b8 <arm_core_mpu_mark_areas_for_dynamic_regions>:
{
   274b8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   274bc:	4c2e      	ldr	r4, [pc, #184]	; (27578 <arm_core_mpu_mark_areas_for_dynamic_regions+0xc0>)
   274be:	4689      	mov	r9, r1
{
	/* In ARMv8-M architecture we need to store the index values
	 * and the default configuration of the MPU regions, inside
	 * which dynamic memory regions may be programmed at run-time.
	 */
	for (int i = 0; i < dyn_region_areas_num; i++) {
   274c0:	4680      	mov	r8, r0
   274c2:	2700      	movs	r7, #0
   274c4:	46a2      	mov	sl, r4
	attr->rbar = MPU->RBAR &
   274c6:	f04f 0b14 	mov.w	fp, #20
	MPU->RNR = index;
   274ca:	4d2c      	ldr	r5, [pc, #176]	; (2757c <arm_core_mpu_mark_areas_for_dynamic_regions+0xc4>)
	for (int i = 0; i < dyn_region_areas_num; i++) {
   274cc:	454f      	cmp	r7, r9
   274ce:	db02      	blt.n	274d6 <arm_core_mpu_mark_areas_for_dynamic_regions+0x1e>
}
   274d0:	b003      	add	sp, #12
   274d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (dyn_region_areas[i].size == 0U) {
   274d6:	f8d8 3004 	ldr.w	r3, [r8, #4]
   274da:	9301      	str	r3, [sp, #4]
   274dc:	2b00      	cmp	r3, #0
   274de:	d046      	beq.n	2756e <arm_core_mpu_mark_areas_for_dynamic_regions+0xb6>
		}
		/* Non-empty area */

		/* Retrieve HW MPU region index */
		dyn_reg_info[i].index =
			get_region_index(dyn_region_areas[i].start,
   274e0:	f8d8 1000 	ldr.w	r1, [r8]
	u32_t region_start_addr = arm_cmse_mpu_region_get(start);
   274e4:	4608      	mov	r0, r1
   274e6:	9100      	str	r1, [sp, #0]
   274e8:	f01b fb8d 	bl	42c06 <arm_cmse_mpu_region_get>
	u32_t region_end_addr = arm_cmse_mpu_region_get(start + size - 1);
   274ec:	e9dd 1300 	ldrd	r1, r3, [sp]
	u32_t region_start_addr = arm_cmse_mpu_region_get(start);
   274f0:	4606      	mov	r6, r0
	u32_t region_end_addr = arm_cmse_mpu_region_get(start + size - 1);
   274f2:	1858      	adds	r0, r3, r1
   274f4:	3801      	subs	r0, #1
   274f6:	f01b fb86 	bl	42c06 <arm_cmse_mpu_region_get>
	if (region_start_addr == region_end_addr) {
   274fa:	4286      	cmp	r6, r0
   274fc:	4a20      	ldr	r2, [pc, #128]	; (27580 <arm_core_mpu_mark_areas_for_dynamic_regions+0xc8>)
   274fe:	d018      	beq.n	27532 <arm_core_mpu_mark_areas_for_dynamic_regions+0x7a>
		dyn_reg_info[i].index =
   27500:	2314      	movs	r3, #20
   27502:	435f      	muls	r7, r3
   27504:	f06f 0315 	mvn.w	r3, #21
   27508:	f84a 3007 	str.w	r3, [sl, r7]
		__ASSERT(0, "Marking %u areas for dynamic regions failed\n",
   2750c:	f240 1303 	movw	r3, #259	; 0x103
   27510:	4a1c      	ldr	r2, [pc, #112]	; (27584 <arm_core_mpu_mark_areas_for_dynamic_regions+0xcc>)
   27512:	491d      	ldr	r1, [pc, #116]	; (27588 <arm_core_mpu_mark_areas_for_dynamic_regions+0xd0>)
   27514:	481d      	ldr	r0, [pc, #116]	; (2758c <arm_core_mpu_mark_areas_for_dynamic_regions+0xd4>)
   27516:	f019 f874 	bl	40602 <printk>
   2751a:	4649      	mov	r1, r9
   2751c:	481c      	ldr	r0, [pc, #112]	; (27590 <arm_core_mpu_mark_areas_for_dynamic_regions+0xd8>)
   2751e:	f019 f870 	bl	40602 <printk>
   27522:	f240 1103 	movw	r1, #259	; 0x103
   27526:	4817      	ldr	r0, [pc, #92]	; (27584 <arm_core_mpu_mark_areas_for_dynamic_regions+0xcc>)
}
   27528:	b003      	add	sp, #12
   2752a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		__ASSERT(0, "Marking %u areas for dynamic regions failed\n",
   2752e:	f019 b92b 	b.w	40788 <assert_post_action>
					dyn_region_areas[i].size);

		if (dyn_reg_info[i].index == -EINVAL) {
   27532:	f116 0f16 	cmn.w	r6, #22
		dyn_reg_info[i].index =
   27536:	6026      	str	r6, [r4, #0]
		if (dyn_reg_info[i].index == -EINVAL) {
   27538:	d0e8      	beq.n	2750c <arm_core_mpu_mark_areas_for_dynamic_regions+0x54>

			return -EINVAL;
		}

		if (dyn_reg_info[i].index >= static_regions_num) {
   2753a:	7813      	ldrb	r3, [r2, #0]
   2753c:	42b3      	cmp	r3, r6
   2753e:	dde5      	ble.n	2750c <arm_core_mpu_mark_areas_for_dynamic_regions+0x54>
	attr->rbar = MPU->RBAR &
   27540:	fb0b a307 	mla	r3, fp, r7, sl
	MPU->RNR = index;
   27544:	60ae      	str	r6, [r5, #8]
	MPU->RNR = index;
   27546:	60ae      	str	r6, [r5, #8]
	attr->rbar = MPU->RBAR &
   27548:	68e8      	ldr	r0, [r5, #12]
   2754a:	7b19      	ldrb	r1, [r3, #12]
   2754c:	f360 0104 	bfi	r1, r0, #0, #5
   27550:	7319      	strb	r1, [r3, #12]
	attr->mair_idx = (MPU->RLAR & MPU_RLAR_AttrIndx_Msk) >>
   27552:	6929      	ldr	r1, [r5, #16]
   27554:	7b18      	ldrb	r0, [r3, #12]
   27556:	0849      	lsrs	r1, r1, #1
   27558:	f361 1047 	bfi	r0, r1, #5, #3
   2755c:	7318      	strb	r0, [r3, #12]
	region_conf->base = (MPU->RBAR & MPU_RBAR_BASE_Msk);
   2755e:	68eb      	ldr	r3, [r5, #12]
   27560:	f023 031f 	bic.w	r3, r3, #31
   27564:	6063      	str	r3, [r4, #4]
	region_conf->attr.r_limit = MPU->RLAR & MPU_RLAR_LIMIT_Msk;
   27566:	692b      	ldr	r3, [r5, #16]
   27568:	f023 031f 	bic.w	r3, r3, #31
   2756c:	6123      	str	r3, [r4, #16]
	for (int i = 0; i < dyn_region_areas_num; i++) {
   2756e:	3701      	adds	r7, #1
   27570:	3414      	adds	r4, #20
   27572:	f108 080c 	add.w	r8, r8, #12
   27576:	e7a9      	b.n	274cc <arm_core_mpu_mark_areas_for_dynamic_regions+0x14>
   27578:	20022464 	.word	0x20022464
   2757c:	e000ed90 	.word	0xe000ed90
   27580:	200299eb 	.word	0x200299eb
   27584:	0004a100 	.word	0x0004a100
   27588:	0004d39b 	.word	0x0004d39b
   2758c:	0004764f 	.word	0x0004764f
   27590:	0004a0d1 	.word	0x0004a0d1

00027594 <arm_core_mpu_configure_dynamic_mpu_regions>:
{
   27594:	b570      	push	{r4, r5, r6, lr}
 * performed, the error signal is propagated to the caller of the function.
 */
static int mpu_configure_dynamic_mpu_regions(const struct k_mem_partition
	*dynamic_regions[], u8_t regions_num)
{
	int mpu_reg_index = static_regions_num;
   27596:	4b16      	ldr	r3, [pc, #88]	; (275f0 <arm_core_mpu_configure_dynamic_mpu_regions+0x5c>)
   27598:	460c      	mov	r4, r1
   2759a:	781d      	ldrb	r5, [r3, #0]
   2759c:	4606      	mov	r6, r0
   2759e:	462b      	mov	r3, r5
  mpu->RLAR = 0U;
   275a0:	2100      	movs	r1, #0
  mpu->RNR = rnr;
   275a2:	4a14      	ldr	r2, [pc, #80]	; (275f4 <arm_core_mpu_configure_dynamic_mpu_regions+0x60>)

	/* Disable all MPU regions except for the static ones. */
	for (int i = mpu_reg_index; i < get_num_regions(); i++) {
   275a4:	2b0f      	cmp	r3, #15
   275a6:	dd1d      	ble.n	275e4 <arm_core_mpu_configure_dynamic_mpu_regions+0x50>
#if defined(CONFIG_MPU_GAP_FILLING)
	/* Reset MPU regions inside which dynamic memory regions may
	 * be programmed.
	 */
	for (int i = 0; i < MPU_DYNAMIC_REGION_AREAS_NUM; i++) {
		region_init(dyn_reg_info[i].index,
   275a8:	4913      	ldr	r1, [pc, #76]	; (275f8 <arm_core_mpu_configure_dynamic_mpu_regions+0x64>)
   275aa:	f851 0b04 	ldr.w	r0, [r1], #4
   275ae:	f7ff fde3 	bl	27178 <region_init>

	/* In ARMv8-M architecture the dynamic regions are programmed on SRAM,
	 * forming a full partition of the background area, specified by the
	 * given boundaries.
	 */
	mpu_reg_index = mpu_configure_regions_and_partition(dynamic_regions,
   275b2:	462a      	mov	r2, r5
   275b4:	4621      	mov	r1, r4
   275b6:	4630      	mov	r0, r6
   275b8:	f7ff fe16 	bl	271e8 <mpu_configure_regions_and_partition.constprop.3>
	if (mpu_configure_dynamic_mpu_regions(dynamic_regions, regions_num)
   275bc:	3016      	adds	r0, #22
   275be:	d115      	bne.n	275ec <arm_core_mpu_configure_dynamic_mpu_regions+0x58>
		__ASSERT(0, "Configuring %u dynamic MPU regions failed\n",
   275c0:	f44f 7389 	mov.w	r3, #274	; 0x112
   275c4:	4a0d      	ldr	r2, [pc, #52]	; (275fc <arm_core_mpu_configure_dynamic_mpu_regions+0x68>)
   275c6:	490e      	ldr	r1, [pc, #56]	; (27600 <arm_core_mpu_configure_dynamic_mpu_regions+0x6c>)
   275c8:	480e      	ldr	r0, [pc, #56]	; (27604 <arm_core_mpu_configure_dynamic_mpu_regions+0x70>)
   275ca:	f019 f81a 	bl	40602 <printk>
   275ce:	4621      	mov	r1, r4
   275d0:	480d      	ldr	r0, [pc, #52]	; (27608 <arm_core_mpu_configure_dynamic_mpu_regions+0x74>)
   275d2:	f019 f816 	bl	40602 <printk>
}
   275d6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		__ASSERT(0, "Configuring %u dynamic MPU regions failed\n",
   275da:	f44f 7189 	mov.w	r1, #274	; 0x112
   275de:	4807      	ldr	r0, [pc, #28]	; (275fc <arm_core_mpu_configure_dynamic_mpu_regions+0x68>)
   275e0:	f019 b8d2 	b.w	40788 <assert_post_action>
   275e4:	6093      	str	r3, [r2, #8]
  mpu->RLAR = 0U;
   275e6:	6111      	str	r1, [r2, #16]
	for (int i = mpu_reg_index; i < get_num_regions(); i++) {
   275e8:	3301      	adds	r3, #1
   275ea:	e7db      	b.n	275a4 <arm_core_mpu_configure_dynamic_mpu_regions+0x10>
}
   275ec:	bd70      	pop	{r4, r5, r6, pc}
   275ee:	bf00      	nop
   275f0:	200299eb 	.word	0x200299eb
   275f4:	e000ed90 	.word	0xe000ed90
   275f8:	20022464 	.word	0x20022464
   275fc:	0004a100 	.word	0x0004a100
   27600:	0004d39b 	.word	0x0004d39b
   27604:	0004764f 	.word	0x0004764f
   27608:	0004a078 	.word	0x0004a078

0002760c <__stdout_hook_install>:

static int (*_stdout_hook)(int) = _stdout_hook_default;

void __stdout_hook_install(int (*hook)(int))
{
	_stdout_hook = hook;
   2760c:	4b01      	ldr	r3, [pc, #4]	; (27614 <__stdout_hook_install+0x8>)
   2760e:	6018      	str	r0, [r3, #0]
}
   27610:	4770      	bx	lr
   27612:	bf00      	nop
   27614:	200324a0 	.word	0x200324a0

00027618 <z_impl_zephyr_read_stdin>:
{
	_stdin_hook = hook;
}

int z_impl_zephyr_read_stdin(char *buf, int nbytes)
{
   27618:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2761a:	4606      	mov	r6, r0
   2761c:	460d      	mov	r5, r1
	int i = 0;

	for (i = 0; i < nbytes; i++) {
   2761e:	2400      	movs	r4, #0
		*(buf + i) = _stdin_hook();
   27620:	4f06      	ldr	r7, [pc, #24]	; (2763c <z_impl_zephyr_read_stdin+0x24>)
	for (i = 0; i < nbytes; i++) {
   27622:	42ac      	cmp	r4, r5
   27624:	da08      	bge.n	27638 <z_impl_zephyr_read_stdin+0x20>
		*(buf + i) = _stdin_hook();
   27626:	683b      	ldr	r3, [r7, #0]
   27628:	4798      	blx	r3
		if ((*(buf + i) == '\n') || (*(buf + i) == '\r')) {
   2762a:	280a      	cmp	r0, #10
		*(buf + i) = _stdin_hook();
   2762c:	5530      	strb	r0, [r6, r4]
		if ((*(buf + i) == '\n') || (*(buf + i) == '\r')) {
   2762e:	f104 0401 	add.w	r4, r4, #1
   27632:	d001      	beq.n	27638 <z_impl_zephyr_read_stdin+0x20>
   27634:	280d      	cmp	r0, #13
   27636:	d1f4      	bne.n	27622 <z_impl_zephyr_read_stdin+0xa>
			i++;
			break;
		}
	}
	return i;
}
   27638:	4620      	mov	r0, r4
   2763a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   2763c:	2003249c 	.word	0x2003249c

00027640 <z_impl_zephyr_write_stdout>:
}
#include <syscalls/z_zephyr_read_stdin_mrsh.c>
#endif

int z_impl_zephyr_write_stdout(const void *buffer, int nbytes)
{
   27640:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   27642:	460e      	mov	r6, r1
   27644:	4f09      	ldr	r7, [pc, #36]	; (2766c <z_impl_zephyr_write_stdout+0x2c>)
   27646:	1e44      	subs	r4, r0, #1
	const char *buf = buffer;
	int i;

	for (i = 0; i < nbytes; i++) {
   27648:	f1c0 0501 	rsb	r5, r0, #1
   2764c:	192b      	adds	r3, r5, r4
   2764e:	429e      	cmp	r6, r3
   27650:	dc01      	bgt.n	27656 <z_impl_zephyr_write_stdout+0x16>
			_stdout_hook('\r');
		}
		_stdout_hook(*(buf + i));
	}
	return nbytes;
}
   27652:	4630      	mov	r0, r6
   27654:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (*(buf + i) == '\n') {
   27656:	7863      	ldrb	r3, [r4, #1]
   27658:	2b0a      	cmp	r3, #10
   2765a:	d102      	bne.n	27662 <z_impl_zephyr_write_stdout+0x22>
			_stdout_hook('\r');
   2765c:	683b      	ldr	r3, [r7, #0]
   2765e:	200d      	movs	r0, #13
   27660:	4798      	blx	r3
		_stdout_hook(*(buf + i));
   27662:	683b      	ldr	r3, [r7, #0]
   27664:	f814 0f01 	ldrb.w	r0, [r4, #1]!
   27668:	4798      	blx	r3
   2766a:	e7ef      	b.n	2764c <z_impl_zephyr_write_stdout+0xc>
   2766c:	200324a0 	.word	0x200324a0

00027670 <_exit>:
	return 0;
}
__weak FUNC_ALIAS(_fstat, fstat, int);

__weak void _exit(int status)
{
   27670:	b508      	push	{r3, lr}
	return z_impl_zephyr_write_stdout(buf, nbytes);
   27672:	2105      	movs	r1, #5
   27674:	4801      	ldr	r0, [pc, #4]	; (2767c <_exit+0xc>)
   27676:	f7ff ffe3 	bl	27640 <z_impl_zephyr_write_stdout>
	_write(1, "exit\n", 5);
	while (1) {
		;
   2767a:	e7fe      	b.n	2767a <_exit+0xa>
   2767c:	0004a252 	.word	0x0004a252

00027680 <_sbrk>:
}

static LIBC_DATA SYS_SEM_DEFINE(heap_sem, 1, 1);

void *_sbrk(int count)
{
   27680:	b538      	push	{r3, r4, r5, lr}
   27682:	4605      	mov	r5, r0
	void *ret, *ptr;

	sys_sem_take(&heap_sem, K_FOREVER);
   27684:	f04f 31ff 	mov.w	r1, #4294967295
   27688:	480b      	ldr	r0, [pc, #44]	; (276b8 <_sbrk+0x38>)
   2768a:	f018 ffd9 	bl	40640 <sys_sem_take>

#if CONFIG_NEWLIB_LIBC_ALIGNED_HEAP_SIZE
	ptr = heap_base + heap_sz;
#else
	ptr = ((char *)HEAP_BASE) + heap_sz;
   2768e:	4a0b      	ldr	r2, [pc, #44]	; (276bc <_sbrk+0x3c>)
#endif

	if ((heap_sz + count) < MAX_HEAP_SIZE) {
   27690:	490b      	ldr	r1, [pc, #44]	; (276c0 <_sbrk+0x40>)
	ptr = ((char *)HEAP_BASE) + heap_sz;
   27692:	6814      	ldr	r4, [r2, #0]
	if ((heap_sz + count) < MAX_HEAP_SIZE) {
   27694:	f1c1 5300 	rsb	r3, r1, #536870912	; 0x20000000
   27698:	4425      	add	r5, r4
   2769a:	f503 2380 	add.w	r3, r3, #262144	; 0x40000
   2769e:	429d      	cmp	r5, r3
		heap_sz += count;
		ret = ptr;
	} else {
		ret = (void *)-1;
   276a0:	bf2c      	ite	cs
   276a2:	f04f 34ff 	movcs.w	r4, #4294967295
	ptr = ((char *)HEAP_BASE) + heap_sz;
   276a6:	1864      	addcc	r4, r4, r1
	}

	sys_sem_give(&heap_sem);
   276a8:	4803      	ldr	r0, [pc, #12]	; (276b8 <_sbrk+0x38>)
		heap_sz += count;
   276aa:	bf38      	it	cc
   276ac:	6015      	strcc	r5, [r2, #0]
	sys_sem_give(&heap_sem);
   276ae:	f018 ffc2 	bl	40636 <sys_sem_give>

	return ret;
}
   276b2:	4620      	mov	r0, r4
   276b4:	bd38      	pop	{r3, r4, r5, pc}
   276b6:	bf00      	nop
   276b8:	20032be0 	.word	0x20032be0
   276bc:	20022478 	.word	0x20022478
   276c0:	20032cdc 	.word	0x20032cdc

000276c4 <net_if_flag_is_set>:
 *
 * @return True if the value is set, false otherwise
 */
static inline bool net_if_flag_is_set(struct net_if *iface,
				      enum net_if_flag value)
{
   276c4:	b538      	push	{r3, r4, r5, lr}
   276c6:	460d      	mov	r5, r1
	NET_ASSERT(iface);
   276c8:	4604      	mov	r4, r0
   276ca:	b970      	cbnz	r0, 276ea <net_if_flag_is_set+0x26>
   276cc:	490b      	ldr	r1, [pc, #44]	; (276fc <net_if_flag_is_set+0x38>)
   276ce:	f240 2311 	movw	r3, #529	; 0x211
   276d2:	4a0b      	ldr	r2, [pc, #44]	; (27700 <net_if_flag_is_set+0x3c>)
   276d4:	480b      	ldr	r0, [pc, #44]	; (27704 <net_if_flag_is_set+0x40>)
   276d6:	f018 ff94 	bl	40602 <printk>
   276da:	480b      	ldr	r0, [pc, #44]	; (27708 <net_if_flag_is_set+0x44>)
   276dc:	f018 ff91 	bl	40602 <printk>
   276e0:	f240 2111 	movw	r1, #529	; 0x211
   276e4:	4806      	ldr	r0, [pc, #24]	; (27700 <net_if_flag_is_set+0x3c>)
   276e6:	f019 f84f 	bl	40788 <assert_post_action>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   276ea:	6823      	ldr	r3, [r4, #0]
   276ec:	330c      	adds	r3, #12
   276ee:	e8d3 0faf 	lda	r0, [r3]
 */
static inline bool atomic_test_bit(const atomic_t *target, int bit)
{
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));

	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
   276f2:	4128      	asrs	r0, r5

	return atomic_test_bit(iface->if_dev->flags, value);
}
   276f4:	f000 0001 	and.w	r0, r0, #1
   276f8:	bd38      	pop	{r3, r4, r5, pc}
   276fa:	bf00      	nop
   276fc:	000488a9 	.word	0x000488a9
   27700:	0004a26f 	.word	0x0004a26f
   27704:	0004764f 	.word	0x0004764f
   27708:	0004a297 	.word	0x0004a297

0002770c <net_if_flag_clear>:
{
   2770c:	b538      	push	{r3, r4, r5, lr}
   2770e:	460d      	mov	r5, r1
	NET_ASSERT(iface);
   27710:	4604      	mov	r4, r0
   27712:	b970      	cbnz	r0, 27732 <net_if_flag_clear+0x26>
   27714:	490d      	ldr	r1, [pc, #52]	; (2774c <net_if_flag_clear+0x40>)
   27716:	f240 2301 	movw	r3, #513	; 0x201
   2771a:	4a0d      	ldr	r2, [pc, #52]	; (27750 <net_if_flag_clear+0x44>)
   2771c:	480d      	ldr	r0, [pc, #52]	; (27754 <net_if_flag_clear+0x48>)
   2771e:	f018 ff70 	bl	40602 <printk>
   27722:	480d      	ldr	r0, [pc, #52]	; (27758 <net_if_flag_clear+0x4c>)
   27724:	f018 ff6d 	bl	40602 <printk>
   27728:	f240 2101 	movw	r1, #513	; 0x201
   2772c:	4808      	ldr	r0, [pc, #32]	; (27750 <net_if_flag_clear+0x44>)
   2772e:	f019 f82b 	bl	40788 <assert_post_action>
 *
 * @return N/A
 */
static inline void atomic_clear_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);
   27732:	2101      	movs	r1, #1
   27734:	40a9      	lsls	r1, r5

	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   27736:	43c9      	mvns	r1, r1
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   27738:	6823      	ldr	r3, [r4, #0]
   2773a:	330c      	adds	r3, #12
   2773c:	e8d3 2fef 	ldaex	r2, [r3]
   27740:	400a      	ands	r2, r1
   27742:	e8c3 2fe0 	stlex	r0, r2, [r3]
   27746:	2800      	cmp	r0, #0
   27748:	d1f8      	bne.n	2773c <net_if_flag_clear+0x30>
}
   2774a:	bd38      	pop	{r3, r4, r5, pc}
   2774c:	000488a9 	.word	0x000488a9
   27750:	0004a26f 	.word	0x0004a26f
   27754:	0004764f 	.word	0x0004764f
   27758:	0004a297 	.word	0x0004a297

0002775c <net_if_flag_set.constprop.23>:
static inline void net_if_flag_set(struct net_if *iface,
   2775c:	b510      	push	{r4, lr}
	NET_ASSERT(iface);
   2775e:	4604      	mov	r4, r0
   27760:	b970      	cbnz	r0, 27780 <net_if_flag_set.constprop.23+0x24>
   27762:	490d      	ldr	r1, [pc, #52]	; (27798 <net_if_flag_set.constprop.23+0x3c>)
   27764:	f240 13e3 	movw	r3, #483	; 0x1e3
   27768:	4a0c      	ldr	r2, [pc, #48]	; (2779c <net_if_flag_set.constprop.23+0x40>)
   2776a:	480d      	ldr	r0, [pc, #52]	; (277a0 <net_if_flag_set.constprop.23+0x44>)
   2776c:	f018 ff49 	bl	40602 <printk>
   27770:	480c      	ldr	r0, [pc, #48]	; (277a4 <net_if_flag_set.constprop.23+0x48>)
   27772:	f018 ff46 	bl	40602 <printk>
   27776:	f240 11e3 	movw	r1, #483	; 0x1e3
   2777a:	4808      	ldr	r0, [pc, #32]	; (2779c <net_if_flag_set.constprop.23+0x40>)
   2777c:	f019 f804 	bl	40788 <assert_post_action>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   27780:	6823      	ldr	r3, [r4, #0]
   27782:	330c      	adds	r3, #12
   27784:	e8d3 2fef 	ldaex	r2, [r3]
   27788:	f042 0201 	orr.w	r2, r2, #1
   2778c:	e8c3 2fe1 	stlex	r1, r2, [r3]
   27790:	2900      	cmp	r1, #0
   27792:	d1f7      	bne.n	27784 <net_if_flag_set.constprop.23+0x28>
}
   27794:	bd10      	pop	{r4, pc}
   27796:	bf00      	nop
   27798:	000488a9 	.word	0x000488a9
   2779c:	0004a26f 	.word	0x0004a26f
   277a0:	0004764f 	.word	0x0004764f
   277a4:	0004a297 	.word	0x0004a297

000277a8 <net_if_get_by_index>:
	return need_calc_checksum(iface, ETHERNET_HW_RX_CHKSUM_OFFLOAD);
}

struct net_if *net_if_get_by_index(int index)
{
	if (index <= 0) {
   277a8:	2800      	cmp	r0, #0
   277aa:	dd08      	ble.n	277be <net_if_get_by_index+0x16>
		return NULL;
	}

	if (&__net_if_start[index - 1] >= __net_if_end) {
   277ac:	1e43      	subs	r3, r0, #1
   277ae:	4805      	ldr	r0, [pc, #20]	; (277c4 <net_if_get_by_index+0x1c>)
   277b0:	eb00 1043 	add.w	r0, r0, r3, lsl #5
		return NULL;
   277b4:	4b04      	ldr	r3, [pc, #16]	; (277c8 <net_if_get_by_index+0x20>)
   277b6:	4298      	cmp	r0, r3
   277b8:	bf28      	it	cs
   277ba:	2000      	movcs	r0, #0
   277bc:	4770      	bx	lr
   277be:	2000      	movs	r0, #0
		NET_DBG("Index %d is too large", index);
		return NULL;
	}

	return &__net_if_start[index - 1];
}
   277c0:	4770      	bx	lr
   277c2:	bf00      	nop
   277c4:	20032ca0 	.word	0x20032ca0
   277c8:	20032cc0 	.word	0x20032cc0

000277cc <net_if_foreach>:

	return (iface - __net_if_start) + 1;
}

void net_if_foreach(net_if_cb_t cb, void *user_data)
{
   277cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   277ce:	4606      	mov	r6, r0
   277d0:	460f      	mov	r7, r1
	struct net_if *iface;

	for (iface = __net_if_start; iface != __net_if_end; iface++) {
   277d2:	4c05      	ldr	r4, [pc, #20]	; (277e8 <net_if_foreach+0x1c>)
   277d4:	4d05      	ldr	r5, [pc, #20]	; (277ec <net_if_foreach+0x20>)
   277d6:	42ac      	cmp	r4, r5
   277d8:	d100      	bne.n	277dc <net_if_foreach+0x10>
		cb(iface, user_data);
	}
}
   277da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		cb(iface, user_data);
   277dc:	4620      	mov	r0, r4
   277de:	4639      	mov	r1, r7
   277e0:	47b0      	blx	r6
	for (iface = __net_if_start; iface != __net_if_end; iface++) {
   277e2:	3420      	adds	r4, #32
   277e4:	e7f7      	b.n	277d6 <net_if_foreach+0xa>
   277e6:	bf00      	nop
   277e8:	20032ca0 	.word	0x20032ca0
   277ec:	20032cc0 	.word	0x20032cc0

000277f0 <net_if_up>:

int net_if_up(struct net_if *iface)
{
   277f0:	b538      	push	{r3, r4, r5, lr}
	int status;

	NET_DBG("iface %p", iface);

	if (net_if_flag_is_set(iface, NET_IF_UP)) {
   277f2:	2100      	movs	r1, #0
{
   277f4:	4605      	mov	r5, r0
	if (net_if_flag_is_set(iface, NET_IF_UP)) {
   277f6:	f7ff ff65 	bl	276c4 <net_if_flag_is_set>
   277fa:	b928      	cbnz	r0, 27808 <net_if_up+0x18>
 * @return True if socket offloading is active, false otherwise.
 */
static inline bool net_if_is_socket_offloaded(struct net_if *iface)
{
#if defined(CONFIG_NET_SOCKETS_OFFLOAD)
	return iface->if_dev->offloaded;
   277fc:	682b      	ldr	r3, [r5, #0]

	if ((IS_ENABLED(CONFIG_NET_OFFLOAD) &&
	     net_if_is_ip_offloaded(iface)) ||
	    (IS_ENABLED(CONFIG_NET_SOCKETS_OFFLOAD) &&
	     net_if_is_socket_offloaded(iface))) {
		net_if_flag_set(iface, NET_IF_UP);
   277fe:	4628      	mov	r0, r5
	if ((IS_ENABLED(CONFIG_NET_OFFLOAD) &&
   27800:	7e9b      	ldrb	r3, [r3, #26]
   27802:	b11b      	cbz	r3, 2780c <net_if_up+0x1c>
		net_if_flag_set(iface, NET_IF_UP);
   27804:	f7ff ffaa 	bl	2775c <net_if_flag_set.constprop.23>
		return 0;
   27808:	2000      	movs	r0, #0
   2780a:	e023      	b.n	27854 <net_if_up+0x64>
		goto exit;
	}

	/* If the L2 does not support enable just set the flag */
	if (!net_if_l2(iface) || !net_if_l2(iface)->enable) {
   2780c:	f01b fa2e 	bl	42c6c <net_if_l2>
   27810:	b9c0      	cbnz	r0, 27844 <net_if_up+0x54>

done:
	/* In many places it's assumed that link address was set with
	 * net_if_set_link_addr(). Better check that now.
	 */
	NET_ASSERT(net_if_get_link_addr(iface)->addr != NULL);
   27812:	682b      	ldr	r3, [r5, #0]
   27814:	691b      	ldr	r3, [r3, #16]
   27816:	b973      	cbnz	r3, 27836 <net_if_up+0x46>
   27818:	490f      	ldr	r1, [pc, #60]	; (27858 <net_if_up+0x68>)
   2781a:	f640 538f 	movw	r3, #3471	; 0xd8f
   2781e:	4a0f      	ldr	r2, [pc, #60]	; (2785c <net_if_up+0x6c>)
   27820:	480f      	ldr	r0, [pc, #60]	; (27860 <net_if_up+0x70>)
   27822:	f018 feee 	bl	40602 <printk>
   27826:	480f      	ldr	r0, [pc, #60]	; (27864 <net_if_up+0x74>)
   27828:	f018 feeb 	bl	40602 <printk>
   2782c:	f640 518f 	movw	r1, #3471	; 0xd8f
   27830:	480a      	ldr	r0, [pc, #40]	; (2785c <net_if_up+0x6c>)
   27832:	f018 ffa9 	bl	40788 <assert_post_action>

	net_if_flag_set(iface, NET_IF_UP);
   27836:	4628      	mov	r0, r5
   27838:	f7ff ff90 	bl	2775c <net_if_flag_set.constprop.23>

	/* If the interface is only having point-to-point traffic then we do
	 * not need to run DAD etc for it.
	 */
	if (!(l2_flags_get(iface) & NET_L2_POINT_TO_POINT)) {
   2783c:	4628      	mov	r0, r5
   2783e:	f01b fa1a 	bl	42c76 <l2_flags_get>
   27842:	e7e1      	b.n	27808 <net_if_up+0x18>
	if (!net_if_l2(iface) || !net_if_l2(iface)->enable) {
   27844:	6883      	ldr	r3, [r0, #8]
   27846:	2b00      	cmp	r3, #0
   27848:	d0e3      	beq.n	27812 <net_if_up+0x22>
	status = net_if_l2(iface)->enable(iface, true);
   2784a:	2101      	movs	r1, #1
   2784c:	4628      	mov	r0, r5
   2784e:	4798      	blx	r3
	if (status < 0) {
   27850:	2800      	cmp	r0, #0
   27852:	dade      	bge.n	27812 <net_if_up+0x22>

exit:
	net_mgmt_event_notify(NET_EVENT_IF_UP, iface);

	return 0;
}
   27854:	bd38      	pop	{r3, r4, r5, pc}
   27856:	bf00      	nop
   27858:	0004a29a 	.word	0x0004a29a
   2785c:	0004a2cb 	.word	0x0004a2cb
   27860:	0004764f 	.word	0x0004764f
   27864:	0004a297 	.word	0x0004a297

00027868 <net_if_init>:
	k_fifo_put(&tx_ts_queue, pkt);
}
#endif /* CONFIG_NET_PKT_TIMESTAMP_THREAD */

void net_if_init(void)
{
   27868:	b538      	push	{r3, r4, r5, lr}

	NET_DBG("");

	net_tc_tx_init();

	for (iface = __net_if_start, if_count = 0; iface != __net_if_end;
   2786a:	4c07      	ldr	r4, [pc, #28]	; (27888 <net_if_init+0x20>)
   2786c:	4d07      	ldr	r5, [pc, #28]	; (2788c <net_if_init+0x24>)
   2786e:	42ac      	cmp	r4, r5
   27870:	d100      	bne.n	27874 <net_if_init+0xc>
		NET_WARN("You have configured only %d VLAN interfaces"
			 " but you have %d network interfaces.",
			 CONFIG_NET_VLAN_COUNT, if_count);
	}
#endif
}
   27872:	bd38      	pop	{r3, r4, r5, pc}
	return iface->if_dev->dev;
   27874:	6823      	ldr	r3, [r4, #0]
	const struct net_if_api *api = net_if_get_device(iface)->driver_api;
   27876:	681b      	ldr	r3, [r3, #0]
   27878:	685b      	ldr	r3, [r3, #4]
	if (!api || !api->init) {
   2787a:	b11b      	cbz	r3, 27884 <net_if_init+0x1c>
   2787c:	681b      	ldr	r3, [r3, #0]
   2787e:	b10b      	cbz	r3, 27884 <net_if_init+0x1c>
	api->init(iface);
   27880:	4620      	mov	r0, r4
   27882:	4798      	blx	r3
	     iface++, if_count++) {
   27884:	3420      	adds	r4, #32
   27886:	e7f2      	b.n	2786e <net_if_init+0x6>
   27888:	20032ca0 	.word	0x20032ca0
   2788c:	20032cc0 	.word	0x20032cc0

00027890 <net_if_post_init>:

void net_if_post_init(void)
{
   27890:	b538      	push	{r3, r4, r5, lr}
	struct net_if *iface;

	NET_DBG("");

	/* After TX is running, attempt to bring the interface up */
	for (iface = __net_if_start; iface != __net_if_end; iface++) {
   27892:	4c07      	ldr	r4, [pc, #28]	; (278b0 <net_if_post_init+0x20>)
   27894:	4d07      	ldr	r5, [pc, #28]	; (278b4 <net_if_post_init+0x24>)
   27896:	42ac      	cmp	r4, r5
   27898:	d100      	bne.n	2789c <net_if_post_init+0xc>
		if (!net_if_flag_is_set(iface, NET_IF_NO_AUTO_START)) {
			net_if_up(iface);
		}
	}
}
   2789a:	bd38      	pop	{r3, r4, r5, pc}
		if (!net_if_flag_is_set(iface, NET_IF_NO_AUTO_START)) {
   2789c:	2103      	movs	r1, #3
   2789e:	4620      	mov	r0, r4
   278a0:	f7ff ff10 	bl	276c4 <net_if_flag_is_set>
   278a4:	b910      	cbnz	r0, 278ac <net_if_post_init+0x1c>
			net_if_up(iface);
   278a6:	4620      	mov	r0, r4
   278a8:	f7ff ffa2 	bl	277f0 <net_if_up>
	for (iface = __net_if_start; iface != __net_if_end; iface++) {
   278ac:	3420      	adds	r4, #32
   278ae:	e7f2      	b.n	27896 <net_if_post_init+0x6>
   278b0:	20032ca0 	.word	0x20032ca0
   278b4:	20032cc0 	.word	0x20032cc0

000278b8 <cmd_net_websocket>:
}
#endif /* CONFIG_WEBSOCKET_CLIENT */

static int cmd_net_websocket(const struct shell *shell, size_t argc,
			     char *argv[])
{
   278b8:	b507      	push	{r0, r1, r2, lr}

	if (count == 0) {
		PR("No connections\n");
	}
#else
	PR_INFO("Set %s to enable %s support.\n", "CONFIG_WEBSOCKET_CLIENT",
   278ba:	4b05      	ldr	r3, [pc, #20]	; (278d0 <cmd_net_websocket+0x18>)
   278bc:	4a05      	ldr	r2, [pc, #20]	; (278d4 <cmd_net_websocket+0x1c>)
   278be:	9300      	str	r3, [sp, #0]
   278c0:	2103      	movs	r1, #3
   278c2:	4b05      	ldr	r3, [pc, #20]	; (278d8 <cmd_net_websocket+0x20>)
   278c4:	f7fb ffa8 	bl	23818 <shell_fprintf>
		"Websocket");
#endif /* CONFIG_WEBSOCKET_CLIENT */

	return 0;
}
   278c8:	2000      	movs	r0, #0
   278ca:	b003      	add	sp, #12
   278cc:	f85d fb04 	ldr.w	pc, [sp], #4
   278d0:	0004a686 	.word	0x0004a686
   278d4:	0004a668 	.word	0x0004a668
   278d8:	0004a650 	.word	0x0004a650

000278dc <cmd_net_vlan>:
{
   278dc:	b507      	push	{r0, r1, r2, lr}
	PR_INFO("Set %s to enable %s support.\n", "CONFIG_NET_VLAN", "VLAN");
   278de:	4b05      	ldr	r3, [pc, #20]	; (278f4 <cmd_net_vlan+0x18>)
   278e0:	4a05      	ldr	r2, [pc, #20]	; (278f8 <cmd_net_vlan+0x1c>)
   278e2:	9300      	str	r3, [sp, #0]
   278e4:	2103      	movs	r1, #3
   278e6:	4b05      	ldr	r3, [pc, #20]	; (278fc <cmd_net_vlan+0x20>)
   278e8:	f7fb ff96 	bl	23818 <shell_fprintf>
}
   278ec:	2000      	movs	r0, #0
   278ee:	b003      	add	sp, #12
   278f0:	f85d fb04 	ldr.w	pc, [sp], #4
   278f4:	0004a64b 	.word	0x0004a64b
   278f8:	0004a668 	.word	0x0004a668
   278fc:	0004a640 	.word	0x0004a640

00027900 <cmd_net_tcp_connect>:
{
   27900:	b507      	push	{r0, r1, r2, lr}
	PR_INFO("Set %s to enable %s support.\n",
   27902:	4b05      	ldr	r3, [pc, #20]	; (27918 <cmd_net_tcp_connect+0x18>)
   27904:	4a05      	ldr	r2, [pc, #20]	; (2791c <cmd_net_tcp_connect+0x1c>)
   27906:	9300      	str	r3, [sp, #0]
   27908:	2103      	movs	r1, #3
   2790a:	4b05      	ldr	r3, [pc, #20]	; (27920 <cmd_net_tcp_connect+0x20>)
   2790c:	f7fb ff84 	bl	23818 <shell_fprintf>
}
   27910:	2000      	movs	r0, #0
   27912:	b003      	add	sp, #12
   27914:	f85d fb04 	ldr.w	pc, [sp], #4
   27918:	0004a63c 	.word	0x0004a63c
   2791c:	0004a668 	.word	0x0004a668
   27920:	0004a617 	.word	0x0004a617

00027924 <cmd_net_stats_all>:
{
   27924:	b507      	push	{r0, r1, r2, lr}
	PR_INFO("Set %s to enable %s support.\n", "CONFIG_NET_STATISTICS",
   27926:	4b05      	ldr	r3, [pc, #20]	; (2793c <cmd_net_stats_all+0x18>)
   27928:	4a05      	ldr	r2, [pc, #20]	; (27940 <cmd_net_stats_all+0x1c>)
   2792a:	9300      	str	r3, [sp, #0]
   2792c:	2103      	movs	r1, #3
   2792e:	4b05      	ldr	r3, [pc, #20]	; (27944 <cmd_net_stats_all+0x20>)
   27930:	f7fb ff72 	bl	23818 <shell_fprintf>
}
   27934:	2000      	movs	r0, #0
   27936:	b003      	add	sp, #12
   27938:	f85d fb04 	ldr.w	pc, [sp], #4
   2793c:	0004a60c 	.word	0x0004a60c
   27940:	0004a668 	.word	0x0004a668
   27944:	0004a5f6 	.word	0x0004a5f6

00027948 <cmd_net_stacks>:
{
   27948:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   2794a:	4605      	mov	r5, r0
	for (info = __net_stack_start; info != __net_stack_end; info++) {
   2794c:	4c0d      	ldr	r4, [pc, #52]	; (27984 <cmd_net_stacks+0x3c>)
   2794e:	4e0e      	ldr	r6, [pc, #56]	; (27988 <cmd_net_stacks+0x40>)
		PR("%s [%s] stack size %zu usage not available\n",
   27950:	4f0e      	ldr	r7, [pc, #56]	; (2798c <cmd_net_stacks+0x44>)
	for (info = __net_stack_start; info != __net_stack_end; info++) {
   27952:	42b4      	cmp	r4, r6
   27954:	d10a      	bne.n	2796c <cmd_net_stacks+0x24>
	PR_INFO("Set %s to enable %s support.\n", "CONFIG_INIT_STACKS",
   27956:	4b0e      	ldr	r3, [pc, #56]	; (27990 <cmd_net_stacks+0x48>)
   27958:	4628      	mov	r0, r5
   2795a:	9300      	str	r3, [sp, #0]
   2795c:	4a0d      	ldr	r2, [pc, #52]	; (27994 <cmd_net_stacks+0x4c>)
   2795e:	4b0e      	ldr	r3, [pc, #56]	; (27998 <cmd_net_stacks+0x50>)
   27960:	2103      	movs	r1, #3
   27962:	f7fb ff59 	bl	23818 <shell_fprintf>
}
   27966:	2000      	movs	r0, #0
   27968:	b003      	add	sp, #12
   2796a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		PR("%s [%s] stack size %zu usage not available\n",
   2796c:	68e3      	ldr	r3, [r4, #12]
   2796e:	463a      	mov	r2, r7
   27970:	9301      	str	r3, [sp, #4]
   27972:	68a3      	ldr	r3, [r4, #8]
   27974:	2100      	movs	r1, #0
   27976:	9300      	str	r3, [sp, #0]
   27978:	4628      	mov	r0, r5
   2797a:	6863      	ldr	r3, [r4, #4]
   2797c:	f7fb ff4c 	bl	23818 <shell_fprintf>
	for (info = __net_stack_start; info != __net_stack_end; info++) {
   27980:	3420      	adds	r4, #32
   27982:	e7e6      	b.n	27952 <cmd_net_stacks+0xa>
   27984:	20032cdc 	.word	0x20032cdc
   27988:	20032cdc 	.word	0x20032cdc
   2798c:	0004a5a5 	.word	0x0004a5a5
   27990:	0004a5e4 	.word	0x0004a5e4
   27994:	0004a668 	.word	0x0004a668
   27998:	0004a5d1 	.word	0x0004a5d1

0002799c <cmd_net_ppp_status>:
{
   2799c:	b507      	push	{r0, r1, r2, lr}
	PR_INFO("Set %s to enable %s support.\n",
   2799e:	4b05      	ldr	r3, [pc, #20]	; (279b4 <cmd_net_ppp_status+0x18>)
   279a0:	4a05      	ldr	r2, [pc, #20]	; (279b8 <cmd_net_ppp_status+0x1c>)
   279a2:	9300      	str	r3, [sp, #0]
   279a4:	2103      	movs	r1, #3
   279a6:	4b05      	ldr	r3, [pc, #20]	; (279bc <cmd_net_ppp_status+0x20>)
   279a8:	f7fb ff36 	bl	23818 <shell_fprintf>
}
   279ac:	2000      	movs	r0, #0
   279ae:	b003      	add	sp, #12
   279b0:	f85d fb04 	ldr.w	pc, [sp], #4
   279b4:	0004a57c 	.word	0x0004a57c
   279b8:	0004a668 	.word	0x0004a668
   279bc:	0004a580 	.word	0x0004a580

000279c0 <cmd_net_ppp_ping>:
{
   279c0:	b507      	push	{r0, r1, r2, lr}
	PR_INFO("Set %s to enable %s support.\n", "CONFIG_NET_L2_PPP", "PPP");
   279c2:	4b05      	ldr	r3, [pc, #20]	; (279d8 <cmd_net_ppp_ping+0x18>)
   279c4:	4a05      	ldr	r2, [pc, #20]	; (279dc <cmd_net_ppp_ping+0x1c>)
   279c6:	9300      	str	r3, [sp, #0]
   279c8:	2103      	movs	r1, #3
   279ca:	4b05      	ldr	r3, [pc, #20]	; (279e0 <cmd_net_ppp_ping+0x20>)
   279cc:	f7fb ff24 	bl	23818 <shell_fprintf>
}
   279d0:	2000      	movs	r0, #0
   279d2:	b003      	add	sp, #12
   279d4:	f85d fb04 	ldr.w	pc, [sp], #4
   279d8:	0004a57c 	.word	0x0004a57c
   279dc:	0004a668 	.word	0x0004a668
   279e0:	0004a56e 	.word	0x0004a56e

000279e4 <cmd_net_nbr_rm>:
{
   279e4:	b508      	push	{r3, lr}
	PR_INFO("IPv6 not enabled.\n");
   279e6:	4a03      	ldr	r2, [pc, #12]	; (279f4 <cmd_net_nbr_rm+0x10>)
   279e8:	2103      	movs	r1, #3
   279ea:	f7fb ff15 	bl	23818 <shell_fprintf>
}
   279ee:	2000      	movs	r0, #0
   279f0:	bd08      	pop	{r3, pc}
   279f2:	bf00      	nop
   279f4:	0004a51a 	.word	0x0004a51a

000279f8 <cmd_net_mem>:
{
   279f8:	b507      	push	{r0, r1, r2, lr}
	PR_INFO("Set %s to enable %s support.\n",
   279fa:	4b05      	ldr	r3, [pc, #20]	; (27a10 <cmd_net_mem+0x18>)
   279fc:	4a05      	ldr	r2, [pc, #20]	; (27a14 <cmd_net_mem+0x1c>)
   279fe:	9300      	str	r3, [sp, #0]
   27a00:	2103      	movs	r1, #3
   27a02:	4b05      	ldr	r3, [pc, #20]	; (27a18 <cmd_net_mem+0x20>)
   27a04:	f7fb ff08 	bl	23818 <shell_fprintf>
}
   27a08:	2000      	movs	r0, #0
   27a0a:	b003      	add	sp, #12
   27a0c:	f85d fb04 	ldr.w	pc, [sp], #4
   27a10:	0004a50d 	.word	0x0004a50d
   27a14:	0004a668 	.word	0x0004a668
   27a18:	0004a4e5 	.word	0x0004a4e5

00027a1c <cmd_net_ipv6>:
{
   27a1c:	b508      	push	{r3, lr}
	PR("IPv6 support                              : %s\n",
   27a1e:	4a04      	ldr	r2, [pc, #16]	; (27a30 <cmd_net_ipv6+0x14>)
   27a20:	4b04      	ldr	r3, [pc, #16]	; (27a34 <cmd_net_ipv6+0x18>)
   27a22:	2100      	movs	r1, #0
   27a24:	f7fb fef8 	bl	23818 <shell_fprintf>
}
   27a28:	f06f 0007 	mvn.w	r0, #7
   27a2c:	bd08      	pop	{r3, pc}
   27a2e:	bf00      	nop
   27a30:	0004a4b5 	.word	0x0004a4b5
   27a34:	000484e9 	.word	0x000484e9

00027a38 <cmd_net_gptp_port>:
{
   27a38:	b507      	push	{r0, r1, r2, lr}
	PR_INFO("Set %s to enable %s support.\n", "CONFIG_NET_GPTP", "gPTP");
   27a3a:	4b05      	ldr	r3, [pc, #20]	; (27a50 <cmd_net_gptp_port+0x18>)
   27a3c:	4a05      	ldr	r2, [pc, #20]	; (27a54 <cmd_net_gptp_port+0x1c>)
   27a3e:	9300      	str	r3, [sp, #0]
   27a40:	2103      	movs	r1, #3
   27a42:	4b05      	ldr	r3, [pc, #20]	; (27a58 <cmd_net_gptp_port+0x20>)
   27a44:	f7fb fee8 	bl	23818 <shell_fprintf>
}
   27a48:	2000      	movs	r0, #0
   27a4a:	b003      	add	sp, #12
   27a4c:	f85d fb04 	ldr.w	pc, [sp], #4
   27a50:	0004a404 	.word	0x0004a404
   27a54:	0004a668 	.word	0x0004a668
   27a58:	0004a3f4 	.word	0x0004a3f4

00027a5c <cmd_net_dns_query>:
{
   27a5c:	b508      	push	{r3, lr}
	PR_INFO("DNS resolver not supported. Set CONFIG_DNS_RESOLVER to "
   27a5e:	4a03      	ldr	r2, [pc, #12]	; (27a6c <cmd_net_dns_query+0x10>)
   27a60:	2103      	movs	r1, #3
   27a62:	f7fb fed9 	bl	23818 <shell_fprintf>
}
   27a66:	2000      	movs	r0, #0
   27a68:	bd08      	pop	{r3, pc}
   27a6a:	bf00      	nop
   27a6c:	0004a3b1 	.word	0x0004a3b1

00027a70 <cmd_net_dns_cancel>:
{
   27a70:	b507      	push	{r0, r1, r2, lr}
	PR_INFO("Set %s to enable %s support.\n", "CONFIG_DNS_RESOLVER",
   27a72:	4b05      	ldr	r3, [pc, #20]	; (27a88 <cmd_net_dns_cancel+0x18>)
   27a74:	4a05      	ldr	r2, [pc, #20]	; (27a8c <cmd_net_dns_cancel+0x1c>)
   27a76:	9300      	str	r3, [sp, #0]
   27a78:	2103      	movs	r1, #3
   27a7a:	4b05      	ldr	r3, [pc, #20]	; (27a90 <cmd_net_dns_cancel+0x20>)
   27a7c:	f7fb fecc 	bl	23818 <shell_fprintf>
}
   27a80:	2000      	movs	r0, #0
   27a82:	b003      	add	sp, #12
   27a84:	f85d fb04 	ldr.w	pc, [sp], #4
   27a88:	0004a3a4 	.word	0x0004a3a4
   27a8c:	0004a668 	.word	0x0004a668
   27a90:	0004a390 	.word	0x0004a390

00027a94 <cmd_net_conn>:
{
   27a94:	b507      	push	{r0, r1, r2, lr}
	PR_INFO("Set %s to enable %s support.\n",
   27a96:	4b05      	ldr	r3, [pc, #20]	; (27aac <cmd_net_conn+0x18>)
   27a98:	4a05      	ldr	r2, [pc, #20]	; (27ab0 <cmd_net_conn+0x1c>)
   27a9a:	9300      	str	r3, [sp, #0]
   27a9c:	2103      	movs	r1, #3
   27a9e:	4b05      	ldr	r3, [pc, #20]	; (27ab4 <cmd_net_conn+0x20>)
   27aa0:	f7fb feba 	bl	23818 <shell_fprintf>
}
   27aa4:	2000      	movs	r0, #0
   27aa6:	b003      	add	sp, #12
   27aa8:	f85d fb04 	ldr.w	pc, [sp], #4
   27aac:	0004a379 	.word	0x0004a379
   27ab0:	0004a668 	.word	0x0004a668
   27ab4:	0004a4e5 	.word	0x0004a4e5

00027ab8 <cmd_net_allocs>:
{
   27ab8:	b507      	push	{r0, r1, r2, lr}
	PR_INFO("Set %s to enable %s support.\n",
   27aba:	4b05      	ldr	r3, [pc, #20]	; (27ad0 <cmd_net_allocs+0x18>)
   27abc:	4a05      	ldr	r2, [pc, #20]	; (27ad4 <cmd_net_allocs+0x1c>)
   27abe:	9300      	str	r3, [sp, #0]
   27ac0:	2103      	movs	r1, #3
   27ac2:	4b05      	ldr	r3, [pc, #20]	; (27ad8 <cmd_net_allocs+0x20>)
   27ac4:	f7fb fea8 	bl	23818 <shell_fprintf>
}
   27ac8:	2000      	movs	r0, #0
   27aca:	b003      	add	sp, #12
   27acc:	f85d fb04 	ldr.w	pc, [sp], #4
   27ad0:	0004a314 	.word	0x0004a314
   27ad4:	0004a668 	.word	0x0004a668
   27ad8:	0004a2f5 	.word	0x0004a2f5

00027adc <cmd_net_ping>:
	for (size_t i = 1; i < argc; ++i) {
   27adc:	2301      	movs	r3, #1
{
   27ade:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   27ae0:	4605      	mov	r5, r0
   27ae2:	460e      	mov	r6, r1
   27ae4:	4614      	mov	r4, r2
	char *host = NULL;
   27ae6:	2700      	movs	r7, #0
	for (size_t i = 1; i < argc; ++i) {
   27ae8:	9301      	str	r3, [sp, #4]
   27aea:	9b01      	ldr	r3, [sp, #4]
   27aec:	42b3      	cmp	r3, r6
   27aee:	d306      	bcc.n	27afe <cmd_net_ping+0x22>
	if (!host) {
   27af0:	bb07      	cbnz	r7, 27b34 <cmd_net_ping+0x58>
		PR_WARNING("Target host missing\n");
   27af2:	4a15      	ldr	r2, [pc, #84]	; (27b48 <cmd_net_ping+0x6c>)
   27af4:	2104      	movs	r1, #4
   27af6:	4628      	mov	r0, r5
   27af8:	f7fb fe8e 	bl	23818 <shell_fprintf>
		return -ENOEXEC;
   27afc:	e01a      	b.n	27b34 <cmd_net_ping+0x58>
		if (*argv[i] != '-') {
   27afe:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
   27b02:	781a      	ldrb	r2, [r3, #0]
   27b04:	2a2d      	cmp	r2, #45	; 0x2d
   27b06:	d119      	bne.n	27b3c <cmd_net_ping+0x60>
		switch (argv[i][1]) {
   27b08:	785a      	ldrb	r2, [r3, #1]
   27b0a:	2a63      	cmp	r2, #99	; 0x63
   27b0c:	d003      	beq.n	27b16 <cmd_net_ping+0x3a>
   27b0e:	2a69      	cmp	r2, #105	; 0x69
   27b10:	d001      	beq.n	27b16 <cmd_net_ping+0x3a>
			PR_WARNING("Unrecognized argument: %s\n", argv[i]);
   27b12:	4a0e      	ldr	r2, [pc, #56]	; (27b4c <cmd_net_ping+0x70>)
   27b14:	e00a      	b.n	27b2c <cmd_net_ping+0x50>
			interval = parse_arg(&i, argc, argv);
   27b16:	4622      	mov	r2, r4
   27b18:	4631      	mov	r1, r6
   27b1a:	a801      	add	r0, sp, #4
   27b1c:	f01b f99b 	bl	42e56 <parse_arg>
			if (interval < 0) {
   27b20:	2800      	cmp	r0, #0
   27b22:	da0c      	bge.n	27b3e <cmd_net_ping+0x62>
				PR_WARNING("Parse error: %s\n", argv[i]);
   27b24:	9b01      	ldr	r3, [sp, #4]
   27b26:	4a0a      	ldr	r2, [pc, #40]	; (27b50 <cmd_net_ping+0x74>)
   27b28:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
			PR_WARNING("Unrecognized argument: %s\n", argv[i]);
   27b2c:	2104      	movs	r1, #4
   27b2e:	4628      	mov	r0, r5
   27b30:	f7fb fe72 	bl	23818 <shell_fprintf>
}
   27b34:	f06f 0007 	mvn.w	r0, #7
   27b38:	b003      	add	sp, #12
   27b3a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   27b3c:	461f      	mov	r7, r3
	for (size_t i = 1; i < argc; ++i) {
   27b3e:	9b01      	ldr	r3, [sp, #4]
   27b40:	3301      	adds	r3, #1
   27b42:	9301      	str	r3, [sp, #4]
   27b44:	e7d1      	b.n	27aea <cmd_net_ping+0xe>
   27b46:	bf00      	nop
   27b48:	0004a559 	.word	0x0004a559
   27b4c:	0004a53e 	.word	0x0004a53e
   27b50:	0004a52d 	.word	0x0004a52d

00027b54 <iface_index_get>:

SHELL_DYNAMIC_CMD_CREATE(iface_index, iface_index_get);

static void iface_index_get(size_t idx, struct shell_static_entry *entry)
{
	entry->handler = NULL;
   27b54:	2300      	movs	r3, #0
{
   27b56:	b573      	push	{r0, r1, r4, r5, r6, lr}
	entry->handler = NULL;
   27b58:	60cb      	str	r3, [r1, #12]
{
   27b5a:	4606      	mov	r6, r0
   27b5c:	460d      	mov	r5, r1
	struct net_if *iface = net_if_get_by_index(idx);
   27b5e:	f7ff fe23 	bl	277a8 <net_if_get_by_index>
	if (!iface) {
   27b62:	b150      	cbz	r0, 27b7a <iface_index_get+0x26>
	snprintk(iface_help_buffer[idx], MAX_IFACE_HELP_STR_LEN,
   27b64:	211c      	movs	r1, #28
   27b66:	4c0f      	ldr	r4, [pc, #60]	; (27ba4 <iface_index_get+0x50>)
   27b68:	9000      	str	r0, [sp, #0]
   27b6a:	fb01 4406 	mla	r4, r1, r6, r4
   27b6e:	4b0e      	ldr	r3, [pc, #56]	; (27ba8 <iface_index_get+0x54>)
   27b70:	4a0e      	ldr	r2, [pc, #56]	; (27bac <iface_index_get+0x58>)
   27b72:	4620      	mov	r0, r4
   27b74:	f018 fd52 	bl	4061c <snprintk>
	return iface_help_buffer[idx];
   27b78:	4620      	mov	r0, r4
	entry->help  = set_iface_index_help(idx);
	entry->subcmd = &iface_index;
   27b7a:	4b0d      	ldr	r3, [pc, #52]	; (27bb0 <iface_index_get+0x5c>)
	entry->help  = set_iface_index_help(idx);
   27b7c:	6068      	str	r0, [r5, #4]
	entry->subcmd = &iface_index;
   27b7e:	60ab      	str	r3, [r5, #8]
	struct net_if *iface = net_if_get_by_index(idx);
   27b80:	4630      	mov	r0, r6
   27b82:	f7ff fe11 	bl	277a8 <net_if_get_by_index>
	if (!iface) {
   27b86:	4604      	mov	r4, r0
   27b88:	b140      	cbz	r0, 27b9c <iface_index_get+0x48>
	snprintk(iface_index_buffer[idx], MAX_IFACE_STR_LEN, "%zu", idx);
   27b8a:	4c0a      	ldr	r4, [pc, #40]	; (27bb4 <iface_index_get+0x60>)
   27b8c:	4633      	mov	r3, r6
   27b8e:	eb04 0486 	add.w	r4, r4, r6, lsl #2
   27b92:	4a09      	ldr	r2, [pc, #36]	; (27bb8 <iface_index_get+0x64>)
   27b94:	2104      	movs	r1, #4
   27b96:	4620      	mov	r0, r4
   27b98:	f018 fd40 	bl	4061c <snprintk>
	entry->syntax = set_iface_index_buffer(idx);
   27b9c:	602c      	str	r4, [r5, #0]
}
   27b9e:	b002      	add	sp, #8
   27ba0:	bd70      	pop	{r4, r5, r6, pc}
   27ba2:	bf00      	nop
   27ba4:	200299ec 	.word	0x200299ec
   27ba8:	0004a6d1 	.word	0x0004a6d1
   27bac:	0004a6e0 	.word	0x0004a6e0
   27bb0:	00046840 	.word	0x00046840
   27bb4:	20029a08 	.word	0x20029a08
   27bb8:	0004a6e8 	.word	0x0004a6e8

00027bbc <get_iface_idx>:
{
   27bbc:	b537      	push	{r0, r1, r2, r4, r5, lr}
   27bbe:	4605      	mov	r5, r0
	if (!index_str) {
   27bc0:	460c      	mov	r4, r1
   27bc2:	b939      	cbnz	r1, 27bd4 <get_iface_idx+0x18>
		PR_WARNING("Interface index is missing.\n");
   27bc4:	4a11      	ldr	r2, [pc, #68]	; (27c0c <get_iface_idx+0x50>)
   27bc6:	2104      	movs	r1, #4
   27bc8:	f7fb fe26 	bl	23818 <shell_fprintf>
   27bcc:	f06f 0015 	mvn.w	r0, #21
}
   27bd0:	b003      	add	sp, #12
   27bd2:	bd30      	pop	{r4, r5, pc}
	idx = strtol(index_str, &endptr, 10);
   27bd4:	220a      	movs	r2, #10
   27bd6:	a901      	add	r1, sp, #4
   27bd8:	4620      	mov	r0, r4
   27bda:	f017 fc7f 	bl	3f4dc <strtol>
	if (*endptr != '\0') {
   27bde:	9b01      	ldr	r3, [sp, #4]
   27be0:	781b      	ldrb	r3, [r3, #0]
   27be2:	b143      	cbz	r3, 27bf6 <get_iface_idx+0x3a>
		PR_WARNING("Invalid index %s\n", index_str);
   27be4:	4628      	mov	r0, r5
   27be6:	4623      	mov	r3, r4
   27be8:	4a09      	ldr	r2, [pc, #36]	; (27c10 <get_iface_idx+0x54>)
   27bea:	2104      	movs	r1, #4
   27bec:	f7fb fe14 	bl	23818 <shell_fprintf>
		return -ENOENT;
   27bf0:	f06f 0001 	mvn.w	r0, #1
   27bf4:	e7ec      	b.n	27bd0 <get_iface_idx+0x14>
	if (idx < 0 || idx > 255) {
   27bf6:	28ff      	cmp	r0, #255	; 0xff
   27bf8:	d9ea      	bls.n	27bd0 <get_iface_idx+0x14>
		PR_WARNING("Invalid index %d\n", idx);
   27bfa:	4603      	mov	r3, r0
   27bfc:	4a05      	ldr	r2, [pc, #20]	; (27c14 <get_iface_idx+0x58>)
   27bfe:	4628      	mov	r0, r5
   27c00:	2104      	movs	r1, #4
   27c02:	f7fb fe09 	bl	23818 <shell_fprintf>
		return -ERANGE;
   27c06:	f06f 0021 	mvn.w	r0, #33	; 0x21
   27c0a:	e7e1      	b.n	27bd0 <get_iface_idx+0x14>
   27c0c:	0004a690 	.word	0x0004a690
   27c10:	0004a6ad 	.word	0x0004a6ad
   27c14:	0004a6bf 	.word	0x0004a6bf

00027c18 <cmd_net_iface>:
{
   27c18:	b537      	push	{r0, r1, r2, r4, r5, lr}
	if (argv[1]) {
   27c1a:	6851      	ldr	r1, [r2, #4]
{
   27c1c:	4604      	mov	r4, r0
	if (argv[1]) {
   27c1e:	b181      	cbz	r1, 27c42 <cmd_net_iface+0x2a>
		idx = get_iface_idx(shell, argv[1]);
   27c20:	f7ff ffcc 	bl	27bbc <get_iface_idx>
		if (idx < 0) {
   27c24:	1e05      	subs	r5, r0, #0
   27c26:	db09      	blt.n	27c3c <cmd_net_iface+0x24>
		iface = net_if_get_by_index(idx);
   27c28:	f7ff fdbe 	bl	277a8 <net_if_get_by_index>
		if (!iface) {
   27c2c:	4601      	mov	r1, r0
   27c2e:	b940      	cbnz	r0, 27c42 <cmd_net_iface+0x2a>
			PR_WARNING("No such interface in index %d\n", idx);
   27c30:	462b      	mov	r3, r5
   27c32:	4a08      	ldr	r2, [pc, #32]	; (27c54 <cmd_net_iface+0x3c>)
   27c34:	2104      	movs	r1, #4
   27c36:	4620      	mov	r0, r4
   27c38:	f7fb fdee 	bl	23818 <shell_fprintf>
			return -ENOEXEC;
   27c3c:	f06f 0007 	mvn.w	r0, #7
   27c40:	e006      	b.n	27c50 <cmd_net_iface+0x38>
	user_data.user_data = iface;
   27c42:	e9cd 4100 	strd	r4, r1, [sp]
	net_if_foreach(iface_cb, &user_data);
   27c46:	4804      	ldr	r0, [pc, #16]	; (27c58 <cmd_net_iface+0x40>)
   27c48:	4669      	mov	r1, sp
   27c4a:	f7ff fdbf 	bl	277cc <net_if_foreach>
	return 0;
   27c4e:	2000      	movs	r0, #0
}
   27c50:	b003      	add	sp, #12
   27c52:	bd30      	pop	{r4, r5, pc}
   27c54:	0004a409 	.word	0x0004a409
   27c58:	00042e35 	.word	0x00042e35

00027c5c <cmd_net_iface_down>:
{
   27c5c:	b573      	push	{r0, r1, r4, r5, r6, lr}
	idx = get_iface_idx(shell, argv[1]);
   27c5e:	6851      	ldr	r1, [r2, #4]
{
   27c60:	4605      	mov	r5, r0
	idx = get_iface_idx(shell, argv[1]);
   27c62:	f7ff ffab 	bl	27bbc <get_iface_idx>
	if (idx < 0) {
   27c66:	1e06      	subs	r6, r0, #0
   27c68:	db08      	blt.n	27c7c <cmd_net_iface_down+0x20>
	iface = net_if_get_by_index(idx);
   27c6a:	f7ff fd9d 	bl	277a8 <net_if_get_by_index>
	if (!iface) {
   27c6e:	b940      	cbnz	r0, 27c82 <cmd_net_iface_down+0x26>
		PR_WARNING("No such interface in index %d\n", idx);
   27c70:	4633      	mov	r3, r6
   27c72:	4a0e      	ldr	r2, [pc, #56]	; (27cac <cmd_net_iface_down+0x50>)
   27c74:	2104      	movs	r1, #4
   27c76:	4628      	mov	r0, r5
   27c78:	f7fb fdce 	bl	23818 <shell_fprintf>
		return -ENOEXEC;
   27c7c:	f06f 0407 	mvn.w	r4, #7
   27c80:	e011      	b.n	27ca6 <cmd_net_iface_down+0x4a>
	ret = net_if_down(iface);
   27c82:	f01b f805 	bl	42c90 <net_if_down>
	if (ret) {
   27c86:	4604      	mov	r4, r0
   27c88:	b138      	cbz	r0, 27c9a <cmd_net_iface_down+0x3e>
		PR_WARNING("Cannot take interface %d down (%d)\n", idx, ret);
   27c8a:	9000      	str	r0, [sp, #0]
   27c8c:	4633      	mov	r3, r6
   27c8e:	4a08      	ldr	r2, [pc, #32]	; (27cb0 <cmd_net_iface_down+0x54>)
   27c90:	2104      	movs	r1, #4
   27c92:	4628      	mov	r0, r5
   27c94:	f7fb fdc0 	bl	23818 <shell_fprintf>
		return -ENOEXEC;
   27c98:	e7f0      	b.n	27c7c <cmd_net_iface_down+0x20>
		PR("Interface %d is down\n", idx);
   27c9a:	4601      	mov	r1, r0
   27c9c:	4633      	mov	r3, r6
   27c9e:	4a05      	ldr	r2, [pc, #20]	; (27cb4 <cmd_net_iface_down+0x58>)
   27ca0:	4628      	mov	r0, r5
   27ca2:	f7fb fdb9 	bl	23818 <shell_fprintf>
}
   27ca6:	4620      	mov	r0, r4
   27ca8:	b002      	add	sp, #8
   27caa:	bd70      	pop	{r4, r5, r6, pc}
   27cac:	0004a409 	.word	0x0004a409
   27cb0:	0004a428 	.word	0x0004a428
   27cb4:	0004a44c 	.word	0x0004a44c

00027cb8 <cmd_net_iface_up>:
{
   27cb8:	b573      	push	{r0, r1, r4, r5, r6, lr}
	idx = get_iface_idx(shell, argv[1]);
   27cba:	6851      	ldr	r1, [r2, #4]
{
   27cbc:	4605      	mov	r5, r0
	idx = get_iface_idx(shell, argv[1]);
   27cbe:	f7ff ff7d 	bl	27bbc <get_iface_idx>
	if (idx < 0) {
   27cc2:	1e06      	subs	r6, r0, #0
   27cc4:	db08      	blt.n	27cd8 <cmd_net_iface_up+0x20>
	iface = net_if_get_by_index(idx);
   27cc6:	f7ff fd6f 	bl	277a8 <net_if_get_by_index>
	if (!iface) {
   27cca:	b940      	cbnz	r0, 27cde <cmd_net_iface_up+0x26>
		PR_WARNING("No such interface in index %d\n", idx);
   27ccc:	4633      	mov	r3, r6
   27cce:	4a13      	ldr	r2, [pc, #76]	; (27d1c <cmd_net_iface_up+0x64>)
		PR_WARNING("Interface %d is already up.\n", idx);
   27cd0:	2104      	movs	r1, #4
   27cd2:	4628      	mov	r0, r5
   27cd4:	f7fb fda0 	bl	23818 <shell_fprintf>
		return -ENOEXEC;
   27cd8:	f06f 0407 	mvn.w	r4, #7
   27cdc:	e01a      	b.n	27d14 <cmd_net_iface_up+0x5c>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   27cde:	6803      	ldr	r3, [r0, #0]
   27ce0:	330c      	adds	r3, #12
   27ce2:	e8d3 3faf 	lda	r3, [r3]
	if (net_if_is_up(iface)) {
   27ce6:	07db      	lsls	r3, r3, #31
   27ce8:	d502      	bpl.n	27cf0 <cmd_net_iface_up+0x38>
		PR_WARNING("Interface %d is already up.\n", idx);
   27cea:	4633      	mov	r3, r6
   27cec:	4a0c      	ldr	r2, [pc, #48]	; (27d20 <cmd_net_iface_up+0x68>)
   27cee:	e7ef      	b.n	27cd0 <cmd_net_iface_up+0x18>
	ret = net_if_up(iface);
   27cf0:	f7ff fd7e 	bl	277f0 <net_if_up>
	if (ret) {
   27cf4:	4604      	mov	r4, r0
   27cf6:	b138      	cbz	r0, 27d08 <cmd_net_iface_up+0x50>
		PR_WARNING("Cannot take interface %d up (%d)\n", idx, ret);
   27cf8:	9000      	str	r0, [sp, #0]
   27cfa:	4633      	mov	r3, r6
   27cfc:	4a09      	ldr	r2, [pc, #36]	; (27d24 <cmd_net_iface_up+0x6c>)
   27cfe:	2104      	movs	r1, #4
   27d00:	4628      	mov	r0, r5
   27d02:	f7fb fd89 	bl	23818 <shell_fprintf>
		return -ENOEXEC;
   27d06:	e7e7      	b.n	27cd8 <cmd_net_iface_up+0x20>
		PR("Interface %d is up\n", idx);
   27d08:	4601      	mov	r1, r0
   27d0a:	4633      	mov	r3, r6
   27d0c:	4a06      	ldr	r2, [pc, #24]	; (27d28 <cmd_net_iface_up+0x70>)
   27d0e:	4628      	mov	r0, r5
   27d10:	f7fb fd82 	bl	23818 <shell_fprintf>
}
   27d14:	4620      	mov	r0, r4
   27d16:	b002      	add	sp, #8
   27d18:	bd70      	pop	{r4, r5, r6, pc}
   27d1a:	bf00      	nop
   27d1c:	0004a409 	.word	0x0004a409
   27d20:	0004a462 	.word	0x0004a462
   27d24:	0004a47f 	.word	0x0004a47f
   27d28:	0004a4a1 	.word	0x0004a4a1

00027d2c <cmd_net_arp_flush>:
   27d2c:	b507      	push	{r0, r1, r2, lr}
   27d2e:	4b05      	ldr	r3, [pc, #20]	; (27d44 <cmd_net_arp_flush+0x18>)
   27d30:	4a05      	ldr	r2, [pc, #20]	; (27d48 <cmd_net_arp_flush+0x1c>)
   27d32:	9300      	str	r3, [sp, #0]
   27d34:	2103      	movs	r1, #3
   27d36:	4b05      	ldr	r3, [pc, #20]	; (27d4c <cmd_net_arp_flush+0x20>)
   27d38:	f7fb fd6e 	bl	23818 <shell_fprintf>
   27d3c:	2000      	movs	r0, #0
   27d3e:	b003      	add	sp, #12
   27d40:	f85d fb04 	ldr.w	pc, [sp], #4
   27d44:	0004a375 	.word	0x0004a375
   27d48:	0004a668 	.word	0x0004a668
   27d4c:	0004a327 	.word	0x0004a327

00027d50 <cmd_net_dns>:
   27d50:	b508      	push	{r3, lr}
   27d52:	4a03      	ldr	r2, [pc, #12]	; (27d60 <cmd_net_dns+0x10>)
   27d54:	2103      	movs	r1, #3
   27d56:	f7fb fd5f 	bl	23818 <shell_fprintf>
   27d5a:	2000      	movs	r0, #0
   27d5c:	bd08      	pop	{r3, pc}
   27d5e:	bf00      	nop
   27d60:	0004a3b1 	.word	0x0004a3b1

00027d64 <cmd_net_nbr>:
   27d64:	b508      	push	{r3, lr}
   27d66:	4a03      	ldr	r2, [pc, #12]	; (27d74 <cmd_net_nbr+0x10>)
   27d68:	2103      	movs	r1, #3
   27d6a:	f7fb fd55 	bl	23818 <shell_fprintf>
   27d6e:	2000      	movs	r0, #0
   27d70:	bd08      	pop	{r3, pc}
   27d72:	bf00      	nop
   27d74:	0004a51a 	.word	0x0004a51a

00027d78 <cmd_net_arp>:
{
   27d78:	b507      	push	{r0, r1, r2, lr}
	PR_INFO("Set %s to enable %s support.\n",
   27d7a:	4b05      	ldr	r3, [pc, #20]	; (27d90 <cmd_net_arp+0x18>)
   27d7c:	4a05      	ldr	r2, [pc, #20]	; (27d94 <cmd_net_arp+0x1c>)
   27d7e:	9300      	str	r3, [sp, #0]
   27d80:	2103      	movs	r1, #3
   27d82:	4b05      	ldr	r3, [pc, #20]	; (27d98 <cmd_net_arp+0x20>)
   27d84:	f7fb fd48 	bl	23818 <shell_fprintf>
}
   27d88:	2000      	movs	r0, #0
   27d8a:	b003      	add	sp, #12
   27d8c:	f85d fb04 	ldr.w	pc, [sp], #4
   27d90:	0004a375 	.word	0x0004a375
   27d94:	0004a668 	.word	0x0004a668
   27d98:	0004a327 	.word	0x0004a327

00027d9c <get_engine_obj>:

static struct lwm2m_engine_obj *get_engine_obj(int obj_id)
{
	struct lwm2m_engine_obj *obj;

	SYS_SLIST_FOR_EACH_CONTAINER(&engine_obj_list, obj, node) {
   27d9c:	4b03      	ldr	r3, [pc, #12]	; (27dac <get_engine_obj+0x10>)
   27d9e:	681b      	ldr	r3, [r3, #0]
   27da0:	b113      	cbz	r3, 27da8 <get_engine_obj+0xc>
		if (obj->obj_id == obj_id) {
   27da2:	8b1a      	ldrh	r2, [r3, #24]
   27da4:	4282      	cmp	r2, r0
   27da6:	d1fa      	bne.n	27d9e <get_engine_obj+0x2>
			return obj;
		}
	}

	return NULL;
}
   27da8:	4618      	mov	r0, r3
   27daa:	4770      	bx	lr
   27dac:	20022484 	.word	0x20022484

00027db0 <get_engine_obj_inst>:
static struct lwm2m_engine_obj_inst *get_engine_obj_inst(int obj_id,
							 int obj_inst_id)
{
	struct lwm2m_engine_obj_inst *obj_inst;

	SYS_SLIST_FOR_EACH_CONTAINER(&engine_obj_inst_list, obj_inst,
   27db0:	4b05      	ldr	r3, [pc, #20]	; (27dc8 <get_engine_obj_inst+0x18>)
   27db2:	681b      	ldr	r3, [r3, #0]
   27db4:	b133      	cbz	r3, 27dc4 <get_engine_obj_inst+0x14>
				     node) {
		if (obj_inst->obj->obj_id == obj_id &&
   27db6:	685a      	ldr	r2, [r3, #4]
   27db8:	8b12      	ldrh	r2, [r2, #24]
   27dba:	4282      	cmp	r2, r0
   27dbc:	d1f9      	bne.n	27db2 <get_engine_obj_inst+0x2>
		    obj_inst->obj_inst_id == obj_inst_id) {
   27dbe:	899a      	ldrh	r2, [r3, #12]
		if (obj_inst->obj->obj_id == obj_id &&
   27dc0:	428a      	cmp	r2, r1
   27dc2:	d1f6      	bne.n	27db2 <get_engine_obj_inst+0x2>
			return obj_inst;
		}
	}

	return NULL;
}
   27dc4:	4618      	mov	r0, r3
   27dc6:	4770      	bx	lr
   27dc8:	2002247c 	.word	0x2002247c

00027dcc <next_engine_obj_inst>:
static struct lwm2m_engine_obj_inst *
next_engine_obj_inst(int obj_id, int obj_inst_id)
{
	struct lwm2m_engine_obj_inst *obj_inst, *next = NULL;

	SYS_SLIST_FOR_EACH_CONTAINER(&engine_obj_inst_list, obj_inst,
   27dcc:	4b0c      	ldr	r3, [pc, #48]	; (27e00 <next_engine_obj_inst+0x34>)
{
   27dce:	b530      	push	{r4, r5, lr}
	SYS_SLIST_FOR_EACH_CONTAINER(&engine_obj_inst_list, obj_inst,
   27dd0:	681b      	ldr	r3, [r3, #0]
   27dd2:	b183      	cbz	r3, 27df6 <next_engine_obj_inst+0x2a>
   27dd4:	2200      	movs	r2, #0
				     node) {
		if (obj_inst->obj->obj_id == obj_id &&
   27dd6:	685c      	ldr	r4, [r3, #4]
   27dd8:	8b24      	ldrh	r4, [r4, #24]
   27dda:	4284      	cmp	r4, r0
   27ddc:	d107      	bne.n	27dee <next_engine_obj_inst+0x22>
		    obj_inst->obj_inst_id > obj_inst_id &&
   27dde:	899c      	ldrh	r4, [r3, #12]
		if (obj_inst->obj->obj_id == obj_id &&
   27de0:	428c      	cmp	r4, r1
   27de2:	dd04      	ble.n	27dee <next_engine_obj_inst+0x22>
		    obj_inst->obj_inst_id > obj_inst_id &&
   27de4:	b14a      	cbz	r2, 27dfa <next_engine_obj_inst+0x2e>
		    (!next || next->obj_inst_id > obj_inst->obj_inst_id)) {
   27de6:	8995      	ldrh	r5, [r2, #12]
   27de8:	42a5      	cmp	r5, r4
   27dea:	bf88      	it	hi
   27dec:	461a      	movhi	r2, r3
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   27dee:	681b      	ldr	r3, [r3, #0]
	SYS_SLIST_FOR_EACH_CONTAINER(&engine_obj_inst_list, obj_inst,
   27df0:	2b00      	cmp	r3, #0
   27df2:	d1f0      	bne.n	27dd6 <next_engine_obj_inst+0xa>
   27df4:	4613      	mov	r3, r2
			next = obj_inst;
		}
	}

	return next;
}
   27df6:	4618      	mov	r0, r3
   27df8:	bd30      	pop	{r4, r5, pc}
   27dfa:	461a      	mov	r2, r3
   27dfc:	e7f7      	b.n	27dee <next_engine_obj_inst+0x22>
   27dfe:	bf00      	nop
   27e00:	2002247c 	.word	0x2002247c

00027e04 <atou16>:

	return coap_option_value_to_int(&option);
}

static u16_t atou16(u8_t *buf, u16_t buflen, u16_t *len)
{
   27e04:	b5f0      	push	{r4, r5, r6, r7, lr}
	u16_t val = 0U;
	u16_t pos = 0U;

	/* we should get a value first - consume all numbers */
	while (pos < buflen && isdigit(buf[pos])) {
   27e06:	2500      	movs	r5, #0
	u16_t val = 0U;
   27e08:	462b      	mov	r3, r5
	while (pos < buflen && isdigit(buf[pos])) {
   27e0a:	f8df c028 	ldr.w	ip, [pc, #40]	; 27e34 <atou16+0x30>
   27e0e:	b2ae      	uxth	r6, r5
   27e10:	42b1      	cmp	r1, r6
   27e12:	d905      	bls.n	27e20 <atou16+0x1c>
   27e14:	5d44      	ldrb	r4, [r0, r5]
   27e16:	3501      	adds	r5, #1
   27e18:	f814 700c 	ldrb.w	r7, [r4, ip]
   27e1c:	077f      	lsls	r7, r7, #29
   27e1e:	d402      	bmi.n	27e26 <atou16+0x22>
		val = val * 10U + (buf[pos] - '0');
		pos++;
	}

	*len = pos;
   27e20:	8016      	strh	r6, [r2, #0]
	return val;
}
   27e22:	4618      	mov	r0, r3
   27e24:	bdf0      	pop	{r4, r5, r6, r7, pc}
		val = val * 10U + (buf[pos] - '0');
   27e26:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   27e2a:	eb04 0343 	add.w	r3, r4, r3, lsl #1
   27e2e:	3b30      	subs	r3, #48	; 0x30
   27e30:	b29b      	uxth	r3, r3
		pos++;
   27e32:	e7ec      	b.n	27e0e <atou16+0xa>
   27e34:	0004d857 	.word	0x0004d857

00027e38 <find_msg>:
	return options_count == path->level ? 0 : -EINVAL;
}

static struct lwm2m_message *find_msg(struct coap_pending *pending,
				      struct coap_reply *reply)
{
   27e38:	b530      	push	{r4, r5, lr}
	size_t i;

	if (!pending && !reply) {
   27e3a:	b900      	cbnz	r0, 27e3e <find_msg+0x6>
   27e3c:	b161      	cbz	r1, 27e58 <find_msg+0x20>
   27e3e:	4b0d      	ldr	r3, [pc, #52]	; (27e74 <find_msg+0x3c>)
{
   27e40:	2200      	movs	r2, #0
   27e42:	461c      	mov	r4, r3
		return NULL;
	}

	for (i = 0; i < CONFIG_LWM2M_ENGINE_MAX_MESSAGES; i++) {
		if (messages[i].ctx && messages[i].pending == pending) {
   27e44:	681d      	ldr	r5, [r3, #0]
   27e46:	b16d      	cbz	r5, 27e64 <find_msg+0x2c>
   27e48:	f8d3 516c 	ldr.w	r5, [r3, #364]	; 0x16c
   27e4c:	4285      	cmp	r5, r0
   27e4e:	d105      	bne.n	27e5c <find_msg+0x24>
			return &messages[i];
		}

		if (messages[i].ctx && messages[i].reply == reply) {
			return &messages[i];
   27e50:	f44f 71c4 	mov.w	r1, #392	; 0x188
   27e54:	fb01 4102 	mla	r1, r1, r2, r4
		}
	}

	return NULL;
}
   27e58:	4608      	mov	r0, r1
   27e5a:	bd30      	pop	{r4, r5, pc}
		if (messages[i].ctx && messages[i].reply == reply) {
   27e5c:	f8d3 5170 	ldr.w	r5, [r3, #368]	; 0x170
   27e60:	428d      	cmp	r5, r1
   27e62:	d0f5      	beq.n	27e50 <find_msg+0x18>
	for (i = 0; i < CONFIG_LWM2M_ENGINE_MAX_MESSAGES; i++) {
   27e64:	3201      	adds	r2, #1
   27e66:	2a0a      	cmp	r2, #10
   27e68:	f503 73c4 	add.w	r3, r3, #392	; 0x188
   27e6c:	d1ea      	bne.n	27e44 <find_msg+0xc>
		return NULL;
   27e6e:	2100      	movs	r1, #0
   27e70:	e7f2      	b.n	27e58 <find_msg+0x20>
   27e72:	bf00      	nop
   27e74:	2002254c 	.word	0x2002254c

00027e78 <update_attrs>:
{
   27e78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   27e7a:	4684      	mov	ip, r0
   27e7c:	460a      	mov	r2, r1
	for (i = 0; i < CONFIG_LWM2M_NUM_ATTR; i++) {
   27e7e:	2500      	movs	r5, #0
		out->flags |= BIT(write_attr_pool[i].type);
   27e80:	f04f 0e01 	mov.w	lr, #1
   27e84:	4b23      	ldr	r3, [pc, #140]	; (27f14 <update_attrs+0x9c>)
			out->st = write_attr_pool[i].float_val;
   27e86:	f101 0610 	add.w	r6, r1, #16
			out->lt = write_attr_pool[i].float_val;
   27e8a:	f101 0708 	add.w	r7, r1, #8
		if (ref != write_attr_pool[i].ref) {
   27e8e:	6819      	ldr	r1, [r3, #0]
   27e90:	4561      	cmp	r1, ip
   27e92:	d110      	bne.n	27eb6 <update_attrs+0x3e>
		switch (write_attr_pool[i].type) {
   27e94:	7b1c      	ldrb	r4, [r3, #12]
   27e96:	2c04      	cmp	r4, #4
   27e98:	d826      	bhi.n	27ee8 <update_attrs+0x70>
   27e9a:	e8df f004 	tbb	[pc, r4]
   27e9e:	1303      	.short	0x1303
   27ea0:	161b      	.short	0x161b
   27ea2:	20          	.byte	0x20
   27ea3:	00          	.byte	0x00
			out->pmin = write_attr_pool[i].int_val;
   27ea4:	6859      	ldr	r1, [r3, #4]
   27ea6:	6191      	str	r1, [r2, #24]
		out->flags |= BIT(write_attr_pool[i].type);
   27ea8:	f892 1020 	ldrb.w	r1, [r2, #32]
   27eac:	fa0e f404 	lsl.w	r4, lr, r4
   27eb0:	430c      	orrs	r4, r1
   27eb2:	f882 4020 	strb.w	r4, [r2, #32]
	for (i = 0; i < CONFIG_LWM2M_NUM_ATTR; i++) {
   27eb6:	3501      	adds	r5, #1
   27eb8:	2d14      	cmp	r5, #20
   27eba:	f103 0310 	add.w	r3, r3, #16
   27ebe:	d1e6      	bne.n	27e8e <update_attrs+0x16>
	return 0;
   27ec0:	2000      	movs	r0, #0
}
   27ec2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			out->pmax = write_attr_pool[i].int_val;
   27ec4:	6859      	ldr	r1, [r3, #4]
   27ec6:	61d1      	str	r1, [r2, #28]
			break;
   27ec8:	e7ee      	b.n	27ea8 <update_attrs+0x30>
			out->lt = write_attr_pool[i].float_val;
   27eca:	1d19      	adds	r1, r3, #4
   27ecc:	c903      	ldmia	r1, {r0, r1}
   27ece:	e887 0003 	stmia.w	r7, {r0, r1}
			break;
   27ed2:	e7e9      	b.n	27ea8 <update_attrs+0x30>
			out->gt = write_attr_pool[i].float_val;
   27ed4:	1d19      	adds	r1, r3, #4
   27ed6:	c903      	ldmia	r1, {r0, r1}
   27ed8:	e882 0003 	stmia.w	r2, {r0, r1}
			break;
   27edc:	e7e4      	b.n	27ea8 <update_attrs+0x30>
			out->st = write_attr_pool[i].float_val;
   27ede:	1d19      	adds	r1, r3, #4
   27ee0:	c903      	ldmia	r1, {r0, r1}
   27ee2:	e886 0003 	stmia.w	r6, {r0, r1}
			break;
   27ee6:	e7df      	b.n	27ea8 <update_attrs+0x30>
			LOG_ERR("Unrecognize attr: %d",
   27ee8:	4b0b      	ldr	r3, [pc, #44]	; (27f18 <update_attrs+0xa0>)
   27eea:	681b      	ldr	r3, [r3, #0]
   27eec:	075b      	lsls	r3, r3, #29
   27eee:	d00e      	beq.n	27f0e <update_attrs+0x96>
   27ef0:	2301      	movs	r3, #1
   27ef2:	f04f 0200 	mov.w	r2, #0
   27ef6:	4909      	ldr	r1, [pc, #36]	; (27f1c <update_attrs+0xa4>)
   27ef8:	f363 0207 	bfi	r2, r3, #0, #8
   27efc:	4b08      	ldr	r3, [pc, #32]	; (27f20 <update_attrs+0xa8>)
   27efe:	4809      	ldr	r0, [pc, #36]	; (27f24 <update_attrs+0xac>)
   27f00:	1a5b      	subs	r3, r3, r1
   27f02:	08db      	lsrs	r3, r3, #3
   27f04:	f363 128f 	bfi	r2, r3, #6, #10
   27f08:	4621      	mov	r1, r4
   27f0a:	f018 fda7 	bl	40a5c <log_1>
			return -EINVAL;
   27f0e:	f06f 0015 	mvn.w	r0, #21
   27f12:	e7d6      	b.n	27ec2 <update_attrs+0x4a>
   27f14:	200234c4 	.word	0x200234c4
   27f18:	20032b0c 	.word	0x20032b0c
   27f1c:	00045f08 	.word	0x00045f08
   27f20:	00046018 	.word	0x00046018
   27f24:	0004b864 	.word	0x0004b864

00027f28 <engine_remove_observer_by_id>:
{
   27f28:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(
   27f2c:	4e0f      	ldr	r6, [pc, #60]	; (27f6c <engine_remove_observer_by_id+0x44>)
{
   27f2e:	4680      	mov	r8, r0
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(
   27f30:	6833      	ldr	r3, [r6, #0]
{
   27f32:	4689      	mov	r9, r1
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(
   27f34:	b1c3      	cbz	r3, 27f68 <engine_remove_observer_by_id+0x40>
   27f36:	2700      	movs	r7, #0
   27f38:	681c      	ldr	r4, [r3, #0]
		if (!(obj_id == obs->path.obj_id &&
   27f3a:	891a      	ldrh	r2, [r3, #8]
   27f3c:	461d      	mov	r5, r3
   27f3e:	4542      	cmp	r2, r8
   27f40:	d10d      	bne.n	27f5e <engine_remove_observer_by_id+0x36>
		      obj_inst_id == obs->path.obj_inst_id)) {
   27f42:	895b      	ldrh	r3, [r3, #10]
		if (!(obj_id == obs->path.obj_id &&
   27f44:	454b      	cmp	r3, r9
   27f46:	d10a      	bne.n	27f5e <engine_remove_observer_by_id+0x36>
		sys_slist_remove(&engine_observer_list, prev_node, &obs->node);
   27f48:	462a      	mov	r2, r5
   27f4a:	4639      	mov	r1, r7
   27f4c:	4630      	mov	r0, r6
   27f4e:	f01a ffb1 	bl	42eb4 <sys_slist_remove>
   27f52:	4628      	mov	r0, r5
   27f54:	2240      	movs	r2, #64	; 0x40
   27f56:	2100      	movs	r1, #0
   27f58:	f01c ffb4 	bl	44ec4 <memset>
   27f5c:	463d      	mov	r5, r7
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(
   27f5e:	b11c      	cbz	r4, 27f68 <engine_remove_observer_by_id+0x40>
   27f60:	4623      	mov	r3, r4
   27f62:	462f      	mov	r7, r5
   27f64:	6824      	ldr	r4, [r4, #0]
   27f66:	e7e8      	b.n	27f3a <engine_remove_observer_by_id+0x12>
}
   27f68:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   27f6c:	2002248c 	.word	0x2002248c

00027f70 <clear_attrs>:
{
   27f70:	b570      	push	{r4, r5, r6, lr}
   27f72:	4606      	mov	r6, r0
   27f74:	2400      	movs	r4, #0
		if (ref == write_attr_pool[i].ref) {
   27f76:	4d07      	ldr	r5, [pc, #28]	; (27f94 <clear_attrs+0x24>)
   27f78:	5963      	ldr	r3, [r4, r5]
   27f7a:	42b3      	cmp	r3, r6
   27f7c:	d104      	bne.n	27f88 <clear_attrs+0x18>
   27f7e:	2210      	movs	r2, #16
   27f80:	2100      	movs	r1, #0
   27f82:	1928      	adds	r0, r5, r4
   27f84:	f01c ff9e 	bl	44ec4 <memset>
   27f88:	3410      	adds	r4, #16
	for (i = 0; i < CONFIG_LWM2M_NUM_ATTR; i++) {
   27f8a:	f5b4 7fa0 	cmp.w	r4, #320	; 0x140
   27f8e:	d1f3      	bne.n	27f78 <clear_attrs+0x8>
}
   27f90:	bd70      	pop	{r4, r5, r6, pc}
   27f92:	bf00      	nop
   27f94:	200234c4 	.word	0x200234c4

00027f98 <engine_remove_observer>:
	if (!token || (tkl == 0U || tkl > MAX_TOKEN_LEN)) {
   27f98:	1e4b      	subs	r3, r1, #1
   27f9a:	2b07      	cmp	r3, #7
{
   27f9c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   27fa0:	4607      	mov	r7, r0
   27fa2:	460e      	mov	r6, r1
	if (!token || (tkl == 0U || tkl > MAX_TOKEN_LEN)) {
   27fa4:	d916      	bls.n	27fd4 <engine_remove_observer+0x3c>
		LOG_ERR("token(%p) and token length(%u) must be valid.",
   27fa6:	4b1d      	ldr	r3, [pc, #116]	; (2801c <engine_remove_observer+0x84>)
   27fa8:	681b      	ldr	r3, [r3, #0]
   27faa:	075b      	lsls	r3, r3, #29
   27fac:	d00f      	beq.n	27fce <engine_remove_observer+0x36>
   27fae:	2201      	movs	r2, #1
   27fb0:	f04f 0300 	mov.w	r3, #0
   27fb4:	491a      	ldr	r1, [pc, #104]	; (28020 <engine_remove_observer+0x88>)
   27fb6:	f362 0307 	bfi	r3, r2, #0, #8
   27fba:	4a1a      	ldr	r2, [pc, #104]	; (28024 <engine_remove_observer+0x8c>)
   27fbc:	1a52      	subs	r2, r2, r1
   27fbe:	08d2      	lsrs	r2, r2, #3
   27fc0:	f362 138f 	bfi	r3, r2, #6, #10
   27fc4:	4601      	mov	r1, r0
   27fc6:	4632      	mov	r2, r6
   27fc8:	4817      	ldr	r0, [pc, #92]	; (28028 <engine_remove_observer+0x90>)
   27fca:	f018 fd5b 	bl	40a84 <log_2>
		return -EINVAL;
   27fce:	f06f 0515 	mvn.w	r5, #21
   27fd2:	e004      	b.n	27fde <engine_remove_observer+0x46>
	SYS_SLIST_FOR_EACH_CONTAINER(&engine_observer_list, obs, node) {
   27fd4:	4b15      	ldr	r3, [pc, #84]	; (2802c <engine_remove_observer+0x94>)
   27fd6:	681c      	ldr	r4, [r3, #0]
   27fd8:	b924      	cbnz	r4, 27fe4 <engine_remove_observer+0x4c>
		return -ENOENT;
   27fda:	f06f 0501 	mvn.w	r5, #1
}
   27fde:	4628      	mov	r0, r5
   27fe0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   27fe4:	f04f 0800 	mov.w	r8, #0
		if (memcmp(obs->token, token, tkl) == 0) {
   27fe8:	4632      	mov	r2, r6
   27fea:	4639      	mov	r1, r7
   27fec:	f104 0012 	add.w	r0, r4, #18
   27ff0:	f01c ff20 	bl	44e34 <memcmp>
   27ff4:	4623      	mov	r3, r4
   27ff6:	4605      	mov	r5, r0
   27ff8:	b120      	cbz	r0, 28004 <engine_remove_observer+0x6c>
   27ffa:	6824      	ldr	r4, [r4, #0]
	return node->next;
   27ffc:	4698      	mov	r8, r3
	SYS_SLIST_FOR_EACH_CONTAINER(&engine_observer_list, obs, node) {
   27ffe:	2c00      	cmp	r4, #0
   28000:	d1f2      	bne.n	27fe8 <engine_remove_observer+0x50>
   28002:	e7ea      	b.n	27fda <engine_remove_observer+0x42>
	sys_slist_remove(&engine_observer_list, prev_node, &found_obj->node);
   28004:	4622      	mov	r2, r4
   28006:	4641      	mov	r1, r8
   28008:	4808      	ldr	r0, [pc, #32]	; (2802c <engine_remove_observer+0x94>)
   2800a:	f01a ff53 	bl	42eb4 <sys_slist_remove>
   2800e:	2240      	movs	r2, #64	; 0x40
   28010:	4629      	mov	r1, r5
   28012:	4620      	mov	r0, r4
   28014:	f01c ff56 	bl	44ec4 <memset>
   28018:	e7e1      	b.n	27fde <engine_remove_observer+0x46>
   2801a:	bf00      	nop
   2801c:	20032b0c 	.word	0x20032b0c
   28020:	00045f08 	.word	0x00045f08
   28024:	00046018 	.word	0x00046018
   28028:	0004ae24 	.word	0x0004ae24
   2802c:	2002248c 	.word	0x2002248c

00028030 <select_writer.isra.7>:
	return pos;
}

/* input / output selection */

static int select_writer(struct lwm2m_output_context *out, u16_t accept)
   28030:	b508      	push	{r3, lr}
{
	switch (accept) {
   28032:	f240 6305 	movw	r3, #1541	; 0x605
   28036:	4299      	cmp	r1, r3
   28038:	d023      	beq.n	28082 <select_writer.isra.7+0x52>
   2803a:	d818      	bhi.n	2806e <select_writer.isra.7+0x3e>
   2803c:	b309      	cbz	r1, 28082 <select_writer.isra.7+0x52>
   2803e:	2928      	cmp	r1, #40	; 0x28
   28040:	d021      	beq.n	28086 <select_writer.isra.7+0x56>
		out->writer = &json_writer;
		break;
#endif

	default:
		LOG_WRN("Unknown content type %u", accept);
   28042:	4b12      	ldr	r3, [pc, #72]	; (2808c <select_writer.isra.7+0x5c>)
   28044:	681b      	ldr	r3, [r3, #0]
   28046:	f013 0f06 	tst.w	r3, #6
   2804a:	d00d      	beq.n	28068 <select_writer.isra.7+0x38>
   2804c:	2302      	movs	r3, #2
   2804e:	f04f 0200 	mov.w	r2, #0
   28052:	480f      	ldr	r0, [pc, #60]	; (28090 <select_writer.isra.7+0x60>)
   28054:	f363 0207 	bfi	r2, r3, #0, #8
   28058:	4b0e      	ldr	r3, [pc, #56]	; (28094 <select_writer.isra.7+0x64>)
   2805a:	1a1b      	subs	r3, r3, r0
   2805c:	08db      	lsrs	r3, r3, #3
   2805e:	f363 128f 	bfi	r2, r3, #6, #10
   28062:	480d      	ldr	r0, [pc, #52]	; (28098 <select_writer.isra.7+0x68>)
   28064:	f018 fcfa 	bl	40a5c <log_1>
		return -ENOMSG;
   28068:	f06f 0022 	mvn.w	r0, #34	; 0x22
   2806c:	e00c      	b.n	28088 <select_writer.isra.7+0x58>
	switch (accept) {
   2806e:	f240 6306 	movw	r3, #1542	; 0x606
   28072:	4299      	cmp	r1, r3
   28074:	d003      	beq.n	2807e <select_writer.isra.7+0x4e>
   28076:	f642 5316 	movw	r3, #11542	; 0x2d16
   2807a:	4299      	cmp	r1, r3
   2807c:	d1e1      	bne.n	28042 <select_writer.isra.7+0x12>
		out->writer = &oma_tlv_writer;
   2807e:	4b07      	ldr	r3, [pc, #28]	; (2809c <select_writer.isra.7+0x6c>)
   28080:	e000      	b.n	28084 <select_writer.isra.7+0x54>
		out->writer = &plain_text_writer;
   28082:	4b07      	ldr	r3, [pc, #28]	; (280a0 <select_writer.isra.7+0x70>)
		out->writer = &oma_tlv_writer;
   28084:	6003      	str	r3, [r0, #0]

	}

	return 0;
   28086:	2000      	movs	r0, #0
}
   28088:	bd08      	pop	{r3, pc}
   2808a:	bf00      	nop
   2808c:	20032b0c 	.word	0x20032b0c
   28090:	00045f08 	.word	0x00045f08
   28094:	00046018 	.word	0x00046018
   28098:	0004b6e7 	.word	0x0004b6e7
   2809c:	00046cc8 	.word	0x00046cc8
   280a0:	00046c68 	.word	0x00046c68

000280a4 <get_block_ctx>:
{
   280a4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   280a8:	4d1d      	ldr	r5, [pc, #116]	; (28120 <get_block_ctx+0x7c>)
	*ctx = NULL;
   280aa:	2400      	movs	r4, #0
{
   280ac:	4681      	mov	r9, r0
   280ae:	4688      	mov	r8, r1
   280b0:	4617      	mov	r7, r2
   280b2:	462e      	mov	r6, r5
   280b4:	f04f 0a28 	mov.w	sl, #40	; 0x28
	*ctx = NULL;
   280b8:	6014      	str	r4, [r2, #0]
		if (block1_contexts[i].tkl == tkl &&
   280ba:	f895 3020 	ldrb.w	r3, [r5, #32]
   280be:	4543      	cmp	r3, r8
   280c0:	d125      	bne.n	2810e <get_block_ctx+0x6a>
		    memcmp(token, block1_contexts[i].token, tkl) == 0) {
   280c2:	4642      	mov	r2, r8
   280c4:	f105 0118 	add.w	r1, r5, #24
   280c8:	4648      	mov	r0, r9
   280ca:	fb0a fb04 	mul.w	fp, sl, r4
   280ce:	f01c feb1 	bl	44e34 <memcmp>
		if (block1_contexts[i].tkl == tkl &&
   280d2:	b9e0      	cbnz	r0, 2810e <get_block_ctx+0x6a>
			*ctx = &block1_contexts[i];
   280d4:	445e      	add	r6, fp
   280d6:	603e      	str	r6, [r7, #0]
			(*ctx)->timestamp = k_uptime_get();
   280d8:	f01a ff0f 	bl	42efa <k_uptime_get>
   280dc:	e9c6 0104 	strd	r0, r1, [r6, #16]
	if (*ctx == NULL) {
   280e0:	683b      	ldr	r3, [r7, #0]
   280e2:	b9d3      	cbnz	r3, 2811a <get_block_ctx+0x76>
		LOG_ERR("Cannot find block context");
   280e4:	4b0f      	ldr	r3, [pc, #60]	; (28124 <get_block_ctx+0x80>)
   280e6:	681b      	ldr	r3, [r3, #0]
   280e8:	075b      	lsls	r3, r3, #29
   280ea:	d00d      	beq.n	28108 <get_block_ctx+0x64>
   280ec:	2301      	movs	r3, #1
   280ee:	f04f 0100 	mov.w	r1, #0
   280f2:	4a0d      	ldr	r2, [pc, #52]	; (28128 <get_block_ctx+0x84>)
   280f4:	f363 0107 	bfi	r1, r3, #0, #8
   280f8:	4b0c      	ldr	r3, [pc, #48]	; (2812c <get_block_ctx+0x88>)
   280fa:	480d      	ldr	r0, [pc, #52]	; (28130 <get_block_ctx+0x8c>)
   280fc:	1a9b      	subs	r3, r3, r2
   280fe:	08db      	lsrs	r3, r3, #3
   28100:	f363 118f 	bfi	r1, r3, #6, #10
   28104:	f018 fc9d 	bl	40a42 <log_0>
   28108:	f06f 0001 	mvn.w	r0, #1
   2810c:	e006      	b.n	2811c <get_block_ctx+0x78>
	for (i = 0; i < NUM_BLOCK1_CONTEXT; i++) {
   2810e:	3401      	adds	r4, #1
   28110:	2c03      	cmp	r4, #3
   28112:	f105 0528 	add.w	r5, r5, #40	; 0x28
   28116:	d1d0      	bne.n	280ba <get_block_ctx+0x16>
   28118:	e7e2      	b.n	280e0 <get_block_ctx+0x3c>
	return 0;
   2811a:	2000      	movs	r0, #0
}
   2811c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   28120:	20020898 	.word	0x20020898
   28124:	20032b0c 	.word	0x20032b0c
   28128:	00045f08 	.word	0x00045f08
   2812c:	00046018 	.word	0x00046018
   28130:	0004af26 	.word	0x0004af26

00028134 <do_read_op>:

	return ret;
}

static int do_read_op(struct lwm2m_message *msg, u16_t content_format)
{
   28134:	b508      	push	{r3, lr}
	switch (content_format) {
   28136:	f240 6305 	movw	r3, #1541	; 0x605
   2813a:	4299      	cmp	r1, r3
   2813c:	d003      	beq.n	28146 <do_read_op+0x12>
   2813e:	d806      	bhi.n	2814e <do_read_op+0x1a>
   28140:	b109      	cbz	r1, 28146 <do_read_op+0x12>
   28142:	292a      	cmp	r1, #42	; 0x2a
   28144:	d10b      	bne.n	2815e <do_read_op+0x2a>
	default:
		LOG_ERR("Unsupported content-format: %u", content_format);
		return -ENOMSG;

	}
}
   28146:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		return do_read_op_plain_text(msg, content_format);
   2814a:	f01b b8e3 	b.w	43314 <do_read_op_plain_text>
	switch (content_format) {
   2814e:	f240 6306 	movw	r3, #1542	; 0x606
   28152:	4299      	cmp	r1, r3
   28154:	d018      	beq.n	28188 <do_read_op+0x54>
   28156:	f642 5316 	movw	r3, #11542	; 0x2d16
   2815a:	4299      	cmp	r1, r3
   2815c:	d014      	beq.n	28188 <do_read_op+0x54>
		LOG_ERR("Unsupported content-format: %u", content_format);
   2815e:	4b0c      	ldr	r3, [pc, #48]	; (28190 <do_read_op+0x5c>)
   28160:	681b      	ldr	r3, [r3, #0]
   28162:	075b      	lsls	r3, r3, #29
   28164:	d00d      	beq.n	28182 <do_read_op+0x4e>
   28166:	2301      	movs	r3, #1
   28168:	f04f 0200 	mov.w	r2, #0
   2816c:	4809      	ldr	r0, [pc, #36]	; (28194 <do_read_op+0x60>)
   2816e:	f363 0207 	bfi	r2, r3, #0, #8
   28172:	4b09      	ldr	r3, [pc, #36]	; (28198 <do_read_op+0x64>)
   28174:	1a1b      	subs	r3, r3, r0
   28176:	08db      	lsrs	r3, r3, #3
   28178:	f363 128f 	bfi	r2, r3, #6, #10
   2817c:	4807      	ldr	r0, [pc, #28]	; (2819c <do_read_op+0x68>)
   2817e:	f018 fc6d 	bl	40a5c <log_1>
}
   28182:	f06f 0022 	mvn.w	r0, #34	; 0x22
   28186:	bd08      	pop	{r3, pc}
   28188:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		return do_read_op_tlv(msg, content_format);
   2818c:	f01b bc2d 	b.w	439ea <do_read_op_tlv>
   28190:	20032b0c 	.word	0x20032b0c
   28194:	00045f08 	.word	0x00045f08
   28198:	00046018 	.word	0x00046018
   2819c:	0004ae05 	.word	0x0004ae05

000281a0 <notify_message_reply_cb>:
}

static int notify_message_reply_cb(const struct coap_packet *response,
				   struct coap_reply *reply,
				   const struct sockaddr *from)
{
   281a0:	b570      	push	{r4, r5, r6, lr}
   281a2:	4606      	mov	r6, r0
   281a4:	460c      	mov	r4, r1
	int ret = 0;
	u8_t type, code;

	type = coap_header_get_type(response);
   281a6:	f01a f98c 	bl	424c2 <coap_header_get_type>
   281aa:	4605      	mov	r5, r0
	code = coap_header_get_code(response);
   281ac:	4630      	mov	r0, r6
   281ae:	f01a f9a3 	bl	424f8 <coap_header_get_code>
		COAP_RESPONSE_CODE_CLASS(code),
		COAP_RESPONSE_CODE_DETAIL(code),
		log_strdup(sprint_token(reply->token, reply->tkl)));

	/* remove observer on COAP_TYPE_RESET */
	if (type == COAP_TYPE_RESET) {
   281b2:	2d03      	cmp	r5, #3
   281b4:	d119      	bne.n	281ea <notify_message_reply_cb+0x4a>
		if (reply->tkl > 0) {
   281b6:	7da1      	ldrb	r1, [r4, #22]
   281b8:	b1c9      	cbz	r1, 281ee <notify_message_reply_cb+0x4e>
			ret = engine_remove_observer(reply->token, reply->tkl);
   281ba:	f104 000e 	add.w	r0, r4, #14
   281be:	f7ff feeb 	bl	27f98 <engine_remove_observer>
			if (ret) {
   281c2:	4601      	mov	r1, r0
   281c4:	b188      	cbz	r0, 281ea <notify_message_reply_cb+0x4a>
				LOG_ERR("remove observe error: %d", ret);
   281c6:	4b13      	ldr	r3, [pc, #76]	; (28214 <notify_message_reply_cb+0x74>)
   281c8:	681b      	ldr	r3, [r3, #0]
   281ca:	075a      	lsls	r2, r3, #29
   281cc:	d00d      	beq.n	281ea <notify_message_reply_cb+0x4a>
   281ce:	2301      	movs	r3, #1
   281d0:	f04f 0200 	mov.w	r2, #0
   281d4:	4810      	ldr	r0, [pc, #64]	; (28218 <notify_message_reply_cb+0x78>)
   281d6:	f363 0207 	bfi	r2, r3, #0, #8
   281da:	4b10      	ldr	r3, [pc, #64]	; (2821c <notify_message_reply_cb+0x7c>)
   281dc:	1a1b      	subs	r3, r3, r0
   281de:	08db      	lsrs	r3, r3, #3
   281e0:	f363 128f 	bfi	r2, r3, #6, #10
   281e4:	480e      	ldr	r0, [pc, #56]	; (28220 <notify_message_reply_cb+0x80>)
   281e6:	f018 fc39 	bl	40a5c <log_1>
			LOG_ERR("notify reply missing token -- ignored.");
		}
	}

	return 0;
}
   281ea:	2000      	movs	r0, #0
   281ec:	bd70      	pop	{r4, r5, r6, pc}
			LOG_ERR("notify reply missing token -- ignored.");
   281ee:	4b09      	ldr	r3, [pc, #36]	; (28214 <notify_message_reply_cb+0x74>)
   281f0:	681b      	ldr	r3, [r3, #0]
   281f2:	075b      	lsls	r3, r3, #29
   281f4:	d0f9      	beq.n	281ea <notify_message_reply_cb+0x4a>
   281f6:	2301      	movs	r3, #1
   281f8:	f04f 0100 	mov.w	r1, #0
   281fc:	4a06      	ldr	r2, [pc, #24]	; (28218 <notify_message_reply_cb+0x78>)
   281fe:	f363 0107 	bfi	r1, r3, #0, #8
   28202:	4b06      	ldr	r3, [pc, #24]	; (2821c <notify_message_reply_cb+0x7c>)
   28204:	4807      	ldr	r0, [pc, #28]	; (28224 <notify_message_reply_cb+0x84>)
   28206:	1a9b      	subs	r3, r3, r2
   28208:	08db      	lsrs	r3, r3, #3
   2820a:	f363 118f 	bfi	r1, r3, #6, #10
   2820e:	f018 fc18 	bl	40a42 <log_0>
   28212:	e7ea      	b.n	281ea <notify_message_reply_cb+0x4a>
   28214:	20032b0c 	.word	0x20032b0c
   28218:	00045f08 	.word	0x00045f08
   2821c:	00046018 	.word	0x00046018
   28220:	0004b5d8 	.word	0x0004b5d8
   28224:	0004b5f1 	.word	0x0004b5f1

00028228 <string_to_path.constprop.19>:
static int string_to_path(char *pathstr, struct lwm2m_obj_path *path,
   28228:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   2822c:	460d      	mov	r5, r1
   2822e:	4607      	mov	r7, r0
	int end_index = strlen(pathstr) - 1;
   28230:	f7f4 ff72 	bl	1d118 <strlen>
   28234:	2400      	movs	r4, #0
   28236:	1e46      	subs	r6, r0, #1
   28238:	f04f 30ff 	mov.w	r0, #4294967295
   2823c:	e9c5 4400 	strd	r4, r4, [r5]
			if (!isdigit((unsigned char)pathstr[i])) {
   28240:	f8df 80a0 	ldr.w	r8, [pc, #160]	; 282e4 <string_to_path.constprop.19+0xbc>
   28244:	812c      	strh	r4, [r5, #8]
	for (i = 0; i <= end_index; i++) {
   28246:	42a6      	cmp	r6, r4
   28248:	da03      	bge.n	28252 <string_to_path.constprop.19+0x2a>
	return 0;
   2824a:	2000      	movs	r0, #0
}
   2824c:	b002      	add	sp, #8
   2824e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (tokstart == -1) {
   28252:	1c41      	adds	r1, r0, #1
   28254:	5d3b      	ldrb	r3, [r7, r4]
   28256:	d104      	bne.n	28262 <string_to_path.constprop.19+0x3a>
			if (!isdigit((unsigned char)pathstr[i])) {
   28258:	f813 2008 	ldrb.w	r2, [r3, r8]
   2825c:	0752      	lsls	r2, r2, #29
   2825e:	d51c      	bpl.n	2829a <string_to_path.constprop.19+0x72>
   28260:	4620      	mov	r0, r4
		if (pathstr[i] == delim || i == end_index) {
   28262:	2b2f      	cmp	r3, #47	; 0x2f
   28264:	d001      	beq.n	2826a <string_to_path.constprop.19+0x42>
   28266:	42a6      	cmp	r6, r4
   28268:	d117      	bne.n	2829a <string_to_path.constprop.19+0x72>
			toklen = i - tokstart + 1;
   2826a:	1a21      	subs	r1, r4, r0
			if (pathstr[i] == delim) {
   2826c:	2b2f      	cmp	r3, #47	; 0x2f
			toklen = i - tokstart + 1;
   2826e:	bf18      	it	ne
   28270:	3101      	addne	r1, #1
			if (toklen <= 0) {
   28272:	2900      	cmp	r1, #0
   28274:	dd11      	ble.n	2829a <string_to_path.constprop.19+0x72>
			value = atou16(&pathstr[tokstart], toklen, &len);
   28276:	b289      	uxth	r1, r1
   28278:	f10d 0206 	add.w	r2, sp, #6
   2827c:	4438      	add	r0, r7
   2827e:	f7ff fdc1 	bl	27e04 <atou16>
			switch (path->level) {
   28282:	7a29      	ldrb	r1, [r5, #8]
   28284:	2903      	cmp	r1, #3
   28286:	d810      	bhi.n	282aa <string_to_path.constprop.19+0x82>
   28288:	e8df f001 	tbb	[pc, r1]
   2828c:	0d0b0902 	.word	0x0d0b0902
				path->obj_id = value;
   28290:	8028      	strh	r0, [r5, #0]
			tokstart = -1;
   28292:	f04f 30ff 	mov.w	r0, #4294967295
			path->level++;
   28296:	3101      	adds	r1, #1
   28298:	7229      	strb	r1, [r5, #8]
	for (i = 0; i <= end_index; i++) {
   2829a:	3401      	adds	r4, #1
   2829c:	e7d3      	b.n	28246 <string_to_path.constprop.19+0x1e>
				path->obj_inst_id = value;
   2829e:	8068      	strh	r0, [r5, #2]
				break;
   282a0:	e7f7      	b.n	28292 <string_to_path.constprop.19+0x6a>
				path->res_id = value;
   282a2:	80a8      	strh	r0, [r5, #4]
				break;
   282a4:	e7f5      	b.n	28292 <string_to_path.constprop.19+0x6a>
				path->res_inst_id = value;
   282a6:	80e8      	strh	r0, [r5, #6]
				break;
   282a8:	e7f3      	b.n	28292 <string_to_path.constprop.19+0x6a>
				LOG_ERR("invalid level (%d)", path->level);
   282aa:	4b0a      	ldr	r3, [pc, #40]	; (282d4 <string_to_path.constprop.19+0xac>)
   282ac:	681b      	ldr	r3, [r3, #0]
   282ae:	075b      	lsls	r3, r3, #29
   282b0:	d00d      	beq.n	282ce <string_to_path.constprop.19+0xa6>
   282b2:	2301      	movs	r3, #1
   282b4:	f04f 0200 	mov.w	r2, #0
   282b8:	4807      	ldr	r0, [pc, #28]	; (282d8 <string_to_path.constprop.19+0xb0>)
   282ba:	f363 0207 	bfi	r2, r3, #0, #8
   282be:	4b07      	ldr	r3, [pc, #28]	; (282dc <string_to_path.constprop.19+0xb4>)
   282c0:	1a1b      	subs	r3, r3, r0
   282c2:	08db      	lsrs	r3, r3, #3
   282c4:	f363 128f 	bfi	r2, r3, #6, #10
   282c8:	4805      	ldr	r0, [pc, #20]	; (282e0 <string_to_path.constprop.19+0xb8>)
   282ca:	f018 fbc7 	bl	40a5c <log_1>
				return -EINVAL;
   282ce:	f06f 0015 	mvn.w	r0, #21
   282d2:	e7bb      	b.n	2824c <string_to_path.constprop.19+0x24>
   282d4:	20032b0c 	.word	0x20032b0c
   282d8:	00045f08 	.word	0x00045f08
   282dc:	00046018 	.word	0x00046018
   282e0:	0004b851 	.word	0x0004b851
   282e4:	0004d857 	.word	0x0004d857

000282e8 <lwm2m_engine_init>:
	lwm2m_engine_context_init(client_ctx);
	return lwm2m_socket_start(client_ctx);
}

static int lwm2m_engine_init(struct device *dev)
{
   282e8:	b530      	push	{r4, r5, lr}
	int ret = 0;

	(void)memset(block1_contexts, 0,
   282ea:	2278      	movs	r2, #120	; 0x78
{
   282ec:	b087      	sub	sp, #28
	(void)memset(block1_contexts, 0,
   282ee:	2100      	movs	r1, #0
   282f0:	480d      	ldr	r0, [pc, #52]	; (28328 <lwm2m_engine_init+0x40>)
   282f2:	f01c fde7 	bl	44ec4 <memset>
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   282f6:	2400      	movs	r4, #0
   282f8:	f04f 33ff 	mov.w	r3, #4294967295
   282fc:	4d0b      	ldr	r5, [pc, #44]	; (2832c <lwm2m_engine_init+0x44>)
   282fe:	e9cd 4302 	strd	r4, r3, [sp, #8]
   28302:	e9cd 4404 	strd	r4, r4, [sp, #16]
   28306:	e9cd 4400 	strd	r4, r4, [sp]
   2830a:	4b09      	ldr	r3, [pc, #36]	; (28330 <lwm2m_engine_init+0x48>)
   2830c:	f44f 6200 	mov.w	r2, #2048	; 0x800
   28310:	4908      	ldr	r1, [pc, #32]	; (28334 <lwm2m_engine_init+0x4c>)
   28312:	4628      	mov	r0, r5
   28314:	f015 fa32 	bl	3d77c <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread_id, value);
   28318:	4907      	ldr	r1, [pc, #28]	; (28338 <lwm2m_engine_init+0x50>)
   2831a:	4628      	mov	r0, r5
   2831c:	f01c fc56 	bl	44bcc <z_impl_k_thread_name_set>
			0, K_NO_WAIT);
	k_thread_name_set(&engine_thread_data, "lwm2m-sock-recv");
	LOG_DBG("LWM2M engine socket receive thread started");

	return ret;
}
   28320:	4620      	mov	r0, r4
   28322:	b007      	add	sp, #28
   28324:	bd30      	pop	{r4, r5, pc}
   28326:	bf00      	nop
   28328:	20020898 	.word	0x20020898
   2832c:	2002249c 	.word	0x2002249c
   28330:	0002afd9 	.word	0x0002afd9
   28334:	2002c140 	.word	0x2002c140
   28338:	0004b2ea 	.word	0x0004b2ea

0002833c <socket.constprop.28>:
extern "C" {
#endif

extern const struct socket_offload *socket_ops;

static inline int socket(int family, int type, int proto)
   2833c:	b570      	push	{r4, r5, r6, lr}
{
	__ASSERT_NO_MSG(socket_ops);
   2833e:	4c12      	ldr	r4, [pc, #72]	; (28388 <socket.constprop.28+0x4c>)
static inline int socket(int family, int type, int proto)
   28340:	4605      	mov	r5, r0
	__ASSERT_NO_MSG(socket_ops);
   28342:	6823      	ldr	r3, [r4, #0]
static inline int socket(int family, int type, int proto)
   28344:	460e      	mov	r6, r1
	__ASSERT_NO_MSG(socket_ops);
   28346:	b94b      	cbnz	r3, 2835c <socket.constprop.28+0x20>
   28348:	4910      	ldr	r1, [pc, #64]	; (2838c <socket.constprop.28+0x50>)
   2834a:	4811      	ldr	r0, [pc, #68]	; (28390 <socket.constprop.28+0x54>)
   2834c:	2319      	movs	r3, #25
   2834e:	4a11      	ldr	r2, [pc, #68]	; (28394 <socket.constprop.28+0x58>)
   28350:	f018 f957 	bl	40602 <printk>
   28354:	2119      	movs	r1, #25
   28356:	480f      	ldr	r0, [pc, #60]	; (28394 <socket.constprop.28+0x58>)
   28358:	f018 fa16 	bl	40788 <assert_post_action>
	__ASSERT_NO_MSG(socket_ops->socket);
   2835c:	6823      	ldr	r3, [r4, #0]
   2835e:	681b      	ldr	r3, [r3, #0]
   28360:	b94b      	cbnz	r3, 28376 <socket.constprop.28+0x3a>
   28362:	490d      	ldr	r1, [pc, #52]	; (28398 <socket.constprop.28+0x5c>)
   28364:	480a      	ldr	r0, [pc, #40]	; (28390 <socket.constprop.28+0x54>)
   28366:	231a      	movs	r3, #26
   28368:	4a0a      	ldr	r2, [pc, #40]	; (28394 <socket.constprop.28+0x58>)
   2836a:	f018 f94a 	bl	40602 <printk>
   2836e:	211a      	movs	r1, #26
   28370:	4808      	ldr	r0, [pc, #32]	; (28394 <socket.constprop.28+0x58>)
   28372:	f018 fa09 	bl	40788 <assert_post_action>

	return socket_ops->socket(family, type, proto);
   28376:	6823      	ldr	r3, [r4, #0]
   28378:	4632      	mov	r2, r6
   2837a:	4628      	mov	r0, r5
}
   2837c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return socket_ops->socket(family, type, proto);
   28380:	681b      	ldr	r3, [r3, #0]
   28382:	2102      	movs	r1, #2
   28384:	4718      	bx	r3
   28386:	bf00      	nop
   28388:	2002237c 	.word	0x2002237c
   2838c:	0004b740 	.word	0x0004b740
   28390:	0004764f 	.word	0x0004764f
   28394:	0004b710 	.word	0x0004b710
   28398:	0004b74b 	.word	0x0004b74b

0002839c <print_attr.isra.9.constprop.29>:
static int print_attr(struct lwm2m_output_context *out,
   2839c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
   283a0:	4607      	mov	r7, r0
   283a2:	4688      	mov	r8, r1
	for (i = 0; i < CONFIG_LWM2M_NUM_ATTR; i++) {
   283a4:	2600      	movs	r6, #0
   283a6:	4c29      	ldr	r4, [pc, #164]	; (2844c <print_attr.isra.9.constprop.29+0xb0>)
		used = snprintk(buf, buflen, ";%s=%s%d%s",
   283a8:	f8df 90bc 	ldr.w	r9, [pc, #188]	; 28468 <print_attr.isra.9.constprop.29+0xcc>
   283ac:	4d28      	ldr	r5, [pc, #160]	; (28450 <print_attr.isra.9.constprop.29+0xb4>)
		if (ref != write_attr_pool[i].ref) {
   283ae:	6823      	ldr	r3, [r4, #0]
   283b0:	4543      	cmp	r3, r8
   283b2:	d008      	beq.n	283c6 <print_attr.isra.9.constprop.29+0x2a>
	for (i = 0; i < CONFIG_LWM2M_NUM_ATTR; i++) {
   283b4:	3601      	adds	r6, #1
   283b6:	2e14      	cmp	r6, #20
   283b8:	f104 0410 	add.w	r4, r4, #16
   283bc:	d1f7      	bne.n	283ae <print_attr.isra.9.constprop.29+0x12>
	return 0;
   283be:	2000      	movs	r0, #0
}
   283c0:	b004      	add	sp, #16
   283c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
				LWM2M_ATTR_STR[attr->type],
   283c6:	7b23      	ldrb	r3, [r4, #12]
   283c8:	e9d4 0201 	ldrd	r0, r2, [r4, #4]
		used = snprintk(buf, buflen, ";%s=%s%d%s",
   283cc:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
   283d0:	b908      	cbnz	r0, 283d6 <print_attr.isra.9.constprop.29+0x3a>
				attr->float_val.val1 == 0 &&
   283d2:	2a00      	cmp	r2, #0
   283d4:	db28      	blt.n	28428 <print_attr.isra.9.constprop.29+0x8c>
		used = snprintk(buf, buflen, ";%s=%s%d%s",
   283d6:	bb52      	cbnz	r2, 2842e <print_attr.isra.9.constprop.29+0x92>
   283d8:	4a1e      	ldr	r2, [pc, #120]	; (28454 <print_attr.isra.9.constprop.29+0xb8>)
   283da:	4611      	mov	r1, r2
   283dc:	e9cd 0101 	strd	r0, r1, [sp, #4]
   283e0:	9200      	str	r2, [sp, #0]
   283e2:	2118      	movs	r1, #24
   283e4:	4a1c      	ldr	r2, [pc, #112]	; (28458 <print_attr.isra.9.constprop.29+0xbc>)
   283e6:	4628      	mov	r0, r5
   283e8:	f018 f918 	bl	4061c <snprintk>
			base /= 10;
   283ec:	f04f 0e0a 	mov.w	lr, #10
		fraction = attr->float_val.val2 < 0 ?
   283f0:	68a3      	ldr	r3, [r4, #8]
		base = 100000;
   283f2:	4a1a      	ldr	r2, [pc, #104]	; (2845c <print_attr.isra.9.constprop.29+0xc0>)
		fraction = attr->float_val.val2 < 0 ?
   283f4:	2b00      	cmp	r3, #0
   283f6:	bfb8      	it	lt
   283f8:	425b      	neglt	r3, r3
		while (fraction && used < buflen && base > 0) {
   283fa:	f100 0c06 	add.w	ip, r0, #6
   283fe:	b11b      	cbz	r3, 28408 <print_attr.isra.9.constprop.29+0x6c>
   28400:	2817      	cmp	r0, #23
   28402:	dc01      	bgt.n	28408 <print_attr.isra.9.constprop.29+0x6c>
   28404:	4560      	cmp	r0, ip
   28406:	d114      	bne.n	28432 <print_attr.isra.9.constprop.29+0x96>
		ret = buf_append(CPKT_BUF_WRITE(out->out_cpkt), buf, used);
   28408:	f8d7 c000 	ldr.w	ip, [r7]
   2840c:	b280      	uxth	r0, r0
   2840e:	f8bc 2006 	ldrh.w	r2, [ip, #6]
   28412:	9000      	str	r0, [sp, #0]
   28414:	462b      	mov	r3, r5
   28416:	f10c 0104 	add.w	r1, ip, #4
   2841a:	f8dc 0000 	ldr.w	r0, [ip]
   2841e:	f01a fd87 	bl	42f30 <buf_append>
		if (ret < 0) {
   28422:	2800      	cmp	r0, #0
   28424:	dac6      	bge.n	283b4 <print_attr.isra.9.constprop.29+0x18>
   28426:	e7cb      	b.n	283c0 <print_attr.isra.9.constprop.29+0x24>
		used = snprintk(buf, buflen, ";%s=%s%d%s",
   28428:	4a0d      	ldr	r2, [pc, #52]	; (28460 <print_attr.isra.9.constprop.29+0xc4>)
   2842a:	490e      	ldr	r1, [pc, #56]	; (28464 <print_attr.isra.9.constprop.29+0xc8>)
   2842c:	e7d6      	b.n	283dc <print_attr.isra.9.constprop.29+0x40>
   2842e:	4a09      	ldr	r2, [pc, #36]	; (28454 <print_attr.isra.9.constprop.29+0xb8>)
   28430:	e7fb      	b.n	2842a <print_attr.isra.9.constprop.29+0x8e>
			digit = fraction / base;
   28432:	fb93 f1f2 	sdiv	r1, r3, r2
			buf[used++] = '0' + digit;
   28436:	f101 0a30 	add.w	sl, r1, #48	; 0x30
			fraction -= digit * base;
   2843a:	b2c9      	uxtb	r1, r1
			buf[used++] = '0' + digit;
   2843c:	f800 a005 	strb.w	sl, [r0, r5]
			fraction -= digit * base;
   28440:	fb02 3311 	mls	r3, r2, r1, r3
			base /= 10;
   28444:	3001      	adds	r0, #1
   28446:	fb92 f2fe 	sdiv	r2, r2, lr
   2844a:	e7d8      	b.n	283fe <print_attr.isra.9.constprop.29+0x62>
   2844c:	200234c4 	.word	0x200234c4
   28450:	20029a0c 	.word	0x20029a0c
   28454:	0004a299 	.word	0x0004a299
   28458:	0004b682 	.word	0x0004b682
   2845c:	000186a0 	.word	0x000186a0
   28460:	0004b680 	.word	0x0004b680
   28464:	0004b496 	.word	0x0004b496
   28468:	00046c38 	.word	0x00046c38

0002846c <send.constprop.30>:
	__ASSERT_NO_MSG(socket_ops->recvfrom);

	return socket_ops->recvfrom(sock, buf, len, flags, from, fromlen);
}

static inline ssize_t send(int sock, const void *buf, size_t len,
   2846c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
			   int flags)
{
	__ASSERT_NO_MSG(socket_ops);
   28470:	4c13      	ldr	r4, [pc, #76]	; (284c0 <send.constprop.30+0x54>)
static inline ssize_t send(int sock, const void *buf, size_t len,
   28472:	4605      	mov	r5, r0
	__ASSERT_NO_MSG(socket_ops);
   28474:	6823      	ldr	r3, [r4, #0]
static inline ssize_t send(int sock, const void *buf, size_t len,
   28476:	460e      	mov	r6, r1
   28478:	4617      	mov	r7, r2
	__ASSERT_NO_MSG(socket_ops);
   2847a:	b94b      	cbnz	r3, 28490 <send.constprop.30+0x24>
   2847c:	4911      	ldr	r1, [pc, #68]	; (284c4 <send.constprop.30+0x58>)
   2847e:	4812      	ldr	r0, [pc, #72]	; (284c8 <send.constprop.30+0x5c>)
   28480:	237e      	movs	r3, #126	; 0x7e
   28482:	4a12      	ldr	r2, [pc, #72]	; (284cc <send.constprop.30+0x60>)
   28484:	f018 f8bd 	bl	40602 <printk>
   28488:	217e      	movs	r1, #126	; 0x7e
   2848a:	4810      	ldr	r0, [pc, #64]	; (284cc <send.constprop.30+0x60>)
   2848c:	f018 f97c 	bl	40788 <assert_post_action>
	__ASSERT_NO_MSG(socket_ops->send);
   28490:	6823      	ldr	r3, [r4, #0]
   28492:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   28494:	b94b      	cbnz	r3, 284aa <send.constprop.30+0x3e>
   28496:	490e      	ldr	r1, [pc, #56]	; (284d0 <send.constprop.30+0x64>)
   28498:	480b      	ldr	r0, [pc, #44]	; (284c8 <send.constprop.30+0x5c>)
   2849a:	237f      	movs	r3, #127	; 0x7f
   2849c:	4a0b      	ldr	r2, [pc, #44]	; (284cc <send.constprop.30+0x60>)
   2849e:	f018 f8b0 	bl	40602 <printk>
   284a2:	217f      	movs	r1, #127	; 0x7f
   284a4:	4809      	ldr	r0, [pc, #36]	; (284cc <send.constprop.30+0x60>)
   284a6:	f018 f96f 	bl	40788 <assert_post_action>

	return socket_ops->send(sock, buf, len, flags);
   284aa:	6823      	ldr	r3, [r4, #0]
   284ac:	463a      	mov	r2, r7
   284ae:	6adc      	ldr	r4, [r3, #44]	; 0x2c
   284b0:	4631      	mov	r1, r6
   284b2:	4628      	mov	r0, r5
   284b4:	46a4      	mov	ip, r4
}
   284b6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	return socket_ops->send(sock, buf, len, flags);
   284ba:	2300      	movs	r3, #0
   284bc:	4760      	bx	ip
   284be:	bf00      	nop
   284c0:	2002237c 	.word	0x2002237c
   284c4:	0004b740 	.word	0x0004b740
   284c8:	0004764f 	.word	0x0004764f
   284cc:	0004b710 	.word	0x0004b710
   284d0:	0004b6ff 	.word	0x0004b6ff

000284d4 <lwm2m_notify_observer>:
	SYS_SLIST_FOR_EACH_CONTAINER(&engine_observer_list, obs, node) {
   284d4:	4b10      	ldr	r3, [pc, #64]	; (28518 <lwm2m_notify_observer+0x44>)
{
   284d6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	SYS_SLIST_FOR_EACH_CONTAINER(&engine_observer_list, obs, node) {
   284da:	681c      	ldr	r4, [r3, #0]
{
   284dc:	4606      	mov	r6, r0
   284de:	460f      	mov	r7, r1
   284e0:	4690      	mov	r8, r2
	SYS_SLIST_FOR_EACH_CONTAINER(&engine_observer_list, obs, node) {
   284e2:	b1bc      	cbz	r4, 28514 <lwm2m_notify_observer+0x40>
   284e4:	2500      	movs	r5, #0
		if (obs->path.obj_id == obj_id &&
   284e6:	8923      	ldrh	r3, [r4, #8]
   284e8:	42b3      	cmp	r3, r6
   284ea:	d10d      	bne.n	28508 <lwm2m_notify_observer+0x34>
   284ec:	8963      	ldrh	r3, [r4, #10]
   284ee:	42bb      	cmp	r3, r7
   284f0:	d10a      	bne.n	28508 <lwm2m_notify_observer+0x34>
		    obs->path.obj_inst_id == obj_inst_id &&
   284f2:	7c23      	ldrb	r3, [r4, #16]
   284f4:	2b02      	cmp	r3, #2
   284f6:	d902      	bls.n	284fe <lwm2m_notify_observer+0x2a>
		    (obs->path.level < 3 ||
   284f8:	89a3      	ldrh	r3, [r4, #12]
   284fa:	4543      	cmp	r3, r8
   284fc:	d104      	bne.n	28508 <lwm2m_notify_observer+0x34>
			obs->event_timestamp = k_uptime_get();
   284fe:	f01a fcfc 	bl	42efa <k_uptime_get>
   28502:	e9c4 0108 	strd	r0, r1, [r4, #32]
			ret++;
   28506:	3501      	adds	r5, #1
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   28508:	6824      	ldr	r4, [r4, #0]
	SYS_SLIST_FOR_EACH_CONTAINER(&engine_observer_list, obs, node) {
   2850a:	2c00      	cmp	r4, #0
   2850c:	d1eb      	bne.n	284e6 <lwm2m_notify_observer+0x12>
}
   2850e:	4628      	mov	r0, r5
   28510:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   28514:	4625      	mov	r5, r4
	return ret;
   28516:	e7fa      	b.n	2850e <lwm2m_notify_observer+0x3a>
   28518:	2002248c 	.word	0x2002248c

0002851c <lwm2m_register_obj>:
	sys_slist_append(&engine_obj_list, &obj->node);
   2851c:	4601      	mov	r1, r0
   2851e:	4801      	ldr	r0, [pc, #4]	; (28524 <lwm2m_register_obj+0x8>)
   28520:	f01a bcbe 	b.w	42ea0 <sys_slist_append>
   28524:	20022484 	.word	0x20022484

00028528 <path_to_objs>:
{
   28528:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	oi = get_engine_obj_inst(path->obj_id, path->obj_inst_id);
   2852c:	f8b0 b002 	ldrh.w	fp, [r0, #2]
   28530:	f8b0 a000 	ldrh.w	sl, [r0]
{
   28534:	4605      	mov	r5, r0
   28536:	4688      	mov	r8, r1
	oi = get_engine_obj_inst(path->obj_id, path->obj_inst_id);
   28538:	4650      	mov	r0, sl
   2853a:	4659      	mov	r1, fp
{
   2853c:	4617      	mov	r7, r2
   2853e:	461e      	mov	r6, r3
	oi = get_engine_obj_inst(path->obj_id, path->obj_inst_id);
   28540:	f7ff fc36 	bl	27db0 <get_engine_obj_inst>
{
   28544:	9c0c      	ldr	r4, [sp, #48]	; 0x30
	if (!oi) {
   28546:	4681      	mov	r9, r0
   28548:	b9b0      	cbnz	r0, 28578 <path_to_objs+0x50>
		LOG_ERR("obj instance %d/%d not found",
   2854a:	4b47      	ldr	r3, [pc, #284]	; (28668 <path_to_objs+0x140>)
   2854c:	681b      	ldr	r3, [r3, #0]
   2854e:	0758      	lsls	r0, r3, #29
   28550:	d00f      	beq.n	28572 <path_to_objs+0x4a>
   28552:	2201      	movs	r2, #1
   28554:	f04f 0300 	mov.w	r3, #0
   28558:	4944      	ldr	r1, [pc, #272]	; (2866c <path_to_objs+0x144>)
   2855a:	f362 0307 	bfi	r3, r2, #0, #8
   2855e:	4a44      	ldr	r2, [pc, #272]	; (28670 <path_to_objs+0x148>)
   28560:	4844      	ldr	r0, [pc, #272]	; (28674 <path_to_objs+0x14c>)
   28562:	1a89      	subs	r1, r1, r2
   28564:	08c9      	lsrs	r1, r1, #3
   28566:	f361 138f 	bfi	r3, r1, #6, #10
   2856a:	465a      	mov	r2, fp
   2856c:	4651      	mov	r1, sl
   2856e:	f018 fa89 	bl	40a84 <log_2>
		return -ENOENT;
   28572:	f06f 0001 	mvn.w	r0, #1
   28576:	e051      	b.n	2861c <path_to_objs+0xf4>
	if (!oi->resources || oi->resource_count == 0U) {
   28578:	6883      	ldr	r3, [r0, #8]
   2857a:	b123      	cbz	r3, 28586 <path_to_objs+0x5e>
   2857c:	f8b0 b00e 	ldrh.w	fp, [r0, #14]
   28580:	f1bb 0f00 	cmp.w	fp, #0
   28584:	d114      	bne.n	285b0 <path_to_objs+0x88>
		LOG_ERR("obj instance has no resources");
   28586:	4b38      	ldr	r3, [pc, #224]	; (28668 <path_to_objs+0x140>)
   28588:	681b      	ldr	r3, [r3, #0]
   2858a:	0759      	lsls	r1, r3, #29
   2858c:	d00d      	beq.n	285aa <path_to_objs+0x82>
   2858e:	2301      	movs	r3, #1
   28590:	f04f 0100 	mov.w	r1, #0
   28594:	4a36      	ldr	r2, [pc, #216]	; (28670 <path_to_objs+0x148>)
   28596:	f363 0107 	bfi	r1, r3, #0, #8
   2859a:	4b34      	ldr	r3, [pc, #208]	; (2866c <path_to_objs+0x144>)
   2859c:	4836      	ldr	r0, [pc, #216]	; (28678 <path_to_objs+0x150>)
   2859e:	1a9b      	subs	r3, r3, r2
   285a0:	08db      	lsrs	r3, r3, #3
   285a2:	f363 118f 	bfi	r1, r3, #6, #10
   285a6:	f018 fa4c 	bl	40a42 <log_0>
		return -EINVAL;
   285aa:	f06f 0015 	mvn.w	r0, #21
   285ae:	e035      	b.n	2861c <path_to_objs+0xf4>
	of = lwm2m_get_engine_obj_field(oi->obj, path->res_id);
   285b0:	f8b5 a004 	ldrh.w	sl, [r5, #4]
   285b4:	6840      	ldr	r0, [r0, #4]
   285b6:	4651      	mov	r1, sl
   285b8:	9301      	str	r3, [sp, #4]
   285ba:	f01a fcd9 	bl	42f70 <lwm2m_get_engine_obj_field>
	if (!of) {
   285be:	9b01      	ldr	r3, [sp, #4]
   285c0:	b998      	cbnz	r0, 285ea <path_to_objs+0xc2>
		LOG_ERR("obj field %d not found", path->res_id);
   285c2:	4b29      	ldr	r3, [pc, #164]	; (28668 <path_to_objs+0x140>)
   285c4:	681b      	ldr	r3, [r3, #0]
   285c6:	075a      	lsls	r2, r3, #29
   285c8:	d0d3      	beq.n	28572 <path_to_objs+0x4a>
   285ca:	2301      	movs	r3, #1
   285cc:	f04f 0200 	mov.w	r2, #0
   285d0:	4927      	ldr	r1, [pc, #156]	; (28670 <path_to_objs+0x148>)
   285d2:	f363 0207 	bfi	r2, r3, #0, #8
   285d6:	4b25      	ldr	r3, [pc, #148]	; (2866c <path_to_objs+0x144>)
   285d8:	4828      	ldr	r0, [pc, #160]	; (2867c <path_to_objs+0x154>)
   285da:	1a5b      	subs	r3, r3, r1
   285dc:	4651      	mov	r1, sl
   285de:	08db      	lsrs	r3, r3, #3
   285e0:	f363 128f 	bfi	r2, r3, #6, #10
		LOG_ERR("resource %d not found", path->res_id);
   285e4:	f018 fa3a 	bl	40a5c <log_1>
   285e8:	e7c3      	b.n	28572 <path_to_objs+0x4a>
	for (i = 0; i < oi->resource_count; i++) {
   285ea:	2200      	movs	r2, #0
		if (oi->resources[i].res_id == path->res_id) {
   285ec:	8a99      	ldrh	r1, [r3, #20]
   285ee:	4551      	cmp	r1, sl
   285f0:	d117      	bne.n	28622 <path_to_objs+0xfa>
	for (i = 0; i < r->res_inst_count; i++) {
   285f2:	2100      	movs	r1, #0
		if (r->res_instances[i].res_inst_id == path->res_inst_id) {
   285f4:	f04f 0e0c 	mov.w	lr, #12
	for (i = 0; i < r->res_inst_count; i++) {
   285f8:	f893 c016 	ldrb.w	ip, [r3, #22]
   285fc:	4561      	cmp	r1, ip
   285fe:	db27      	blt.n	28650 <path_to_objs+0x128>
	struct lwm2m_engine_res_inst *ri = NULL;
   28600:	2200      	movs	r2, #0
	if (obj_inst) {
   28602:	f1b8 0f00 	cmp.w	r8, #0
   28606:	d001      	beq.n	2860c <path_to_objs+0xe4>
		*obj_inst = oi;
   28608:	f8c8 9000 	str.w	r9, [r8]
	if (obj_field) {
   2860c:	b107      	cbz	r7, 28610 <path_to_objs+0xe8>
		*obj_field = of;
   2860e:	6038      	str	r0, [r7, #0]
	if (res) {
   28610:	b106      	cbz	r6, 28614 <path_to_objs+0xec>
		*res = r;
   28612:	6033      	str	r3, [r6, #0]
	if (ri && res_inst) {
   28614:	b10a      	cbz	r2, 2861a <path_to_objs+0xf2>
   28616:	b104      	cbz	r4, 2861a <path_to_objs+0xf2>
		*res_inst = ri;
   28618:	6022      	str	r2, [r4, #0]
	return 0;
   2861a:	2000      	movs	r0, #0
}
   2861c:	b003      	add	sp, #12
   2861e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	for (i = 0; i < oi->resource_count; i++) {
   28622:	3201      	adds	r2, #1
   28624:	455a      	cmp	r2, fp
   28626:	f103 0318 	add.w	r3, r3, #24
   2862a:	dbdf      	blt.n	285ec <path_to_objs+0xc4>
		LOG_ERR("resource %d not found", path->res_id);
   2862c:	4b0e      	ldr	r3, [pc, #56]	; (28668 <path_to_objs+0x140>)
   2862e:	681b      	ldr	r3, [r3, #0]
   28630:	075b      	lsls	r3, r3, #29
   28632:	d09e      	beq.n	28572 <path_to_objs+0x4a>
   28634:	2301      	movs	r3, #1
   28636:	f04f 0200 	mov.w	r2, #0
   2863a:	490d      	ldr	r1, [pc, #52]	; (28670 <path_to_objs+0x148>)
   2863c:	f363 0207 	bfi	r2, r3, #0, #8
   28640:	4b0a      	ldr	r3, [pc, #40]	; (2866c <path_to_objs+0x144>)
   28642:	480f      	ldr	r0, [pc, #60]	; (28680 <path_to_objs+0x158>)
   28644:	1a5b      	subs	r3, r3, r1
   28646:	08db      	lsrs	r3, r3, #3
   28648:	f363 128f 	bfi	r2, r3, #6, #10
   2864c:	4651      	mov	r1, sl
   2864e:	e7c9      	b.n	285e4 <path_to_objs+0xbc>
		if (r->res_instances[i].res_inst_id == path->res_inst_id) {
   28650:	691a      	ldr	r2, [r3, #16]
   28652:	f8b5 a006 	ldrh.w	sl, [r5, #6]
   28656:	fb0e 2201 	mla	r2, lr, r1, r2
   2865a:	f8b2 b006 	ldrh.w	fp, [r2, #6]
   2865e:	45d3      	cmp	fp, sl
   28660:	d0cf      	beq.n	28602 <path_to_objs+0xda>
	for (i = 0; i < r->res_inst_count; i++) {
   28662:	3101      	adds	r1, #1
   28664:	e7ca      	b.n	285fc <path_to_objs+0xd4>
   28666:	bf00      	nop
   28668:	20032b0c 	.word	0x20032b0c
   2866c:	00046018 	.word	0x00046018
   28670:	00045f08 	.word	0x00045f08
   28674:	0004b618 	.word	0x0004b618
   28678:	0004b635 	.word	0x0004b635
   2867c:	0004b653 	.word	0x0004b653
   28680:	0004b66a 	.word	0x0004b66a

00028684 <lwm2m_engine_set>:
	struct lwm2m_engine_res *res = NULL;
   28684:	2300      	movs	r3, #0
{
   28686:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2868a:	b092      	sub	sp, #72	; 0x48
   2868c:	460d      	mov	r5, r1
	ret = string_to_path(pathstr, &path, '/');
   2868e:	a90a      	add	r1, sp, #40	; 0x28
{
   28690:	4617      	mov	r7, r2
	struct lwm2m_engine_res_inst *res_inst = NULL;
   28692:	e9cd 3307 	strd	r3, r3, [sp, #28]
	size_t data_len = 0;
   28696:	9309      	str	r3, [sp, #36]	; 0x24
	ret = string_to_path(pathstr, &path, '/');
   28698:	f7ff fdc6 	bl	28228 <string_to_path.constprop.19>
	if (ret < 0) {
   2869c:	1e06      	subs	r6, r0, #0
   2869e:	db09      	blt.n	286b4 <lwm2m_engine_set+0x30>
	if (path.level < 3) {
   286a0:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
   286a4:	2b02      	cmp	r3, #2
   286a6:	d818      	bhi.n	286da <lwm2m_engine_set+0x56>
		LOG_ERR("path must have at least 3 parts");
   286a8:	4b93      	ldr	r3, [pc, #588]	; (288f8 <lwm2m_engine_set+0x274>)
   286aa:	681b      	ldr	r3, [r3, #0]
   286ac:	075e      	lsls	r6, r3, #29
   286ae:	d105      	bne.n	286bc <lwm2m_engine_set+0x38>
		return -EINVAL;
   286b0:	f06f 0615 	mvn.w	r6, #21
}
   286b4:	4630      	mov	r0, r6
   286b6:	b012      	add	sp, #72	; 0x48
   286b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		LOG_ERR("path must have at least 3 parts");
   286bc:	2301      	movs	r3, #1
   286be:	f04f 0100 	mov.w	r1, #0
   286c2:	4a8e      	ldr	r2, [pc, #568]	; (288fc <lwm2m_engine_set+0x278>)
   286c4:	f363 0107 	bfi	r1, r3, #0, #8
   286c8:	4b8d      	ldr	r3, [pc, #564]	; (28900 <lwm2m_engine_set+0x27c>)
   286ca:	488e      	ldr	r0, [pc, #568]	; (28904 <lwm2m_engine_set+0x280>)
   286cc:	1a9b      	subs	r3, r3, r2
   286ce:	08db      	lsrs	r3, r3, #3
   286d0:	f363 118f 	bfi	r1, r3, #6, #10
   286d4:	f018 f9b5 	bl	40a42 <log_0>
   286d8:	e7ea      	b.n	286b0 <lwm2m_engine_set+0x2c>
	ret = path_to_objs(&path, &obj_inst, &obj_field, &res, &res_inst);
   286da:	ab08      	add	r3, sp, #32
   286dc:	9300      	str	r3, [sp, #0]
   286de:	aa06      	add	r2, sp, #24
   286e0:	ab07      	add	r3, sp, #28
   286e2:	a905      	add	r1, sp, #20
   286e4:	a80a      	add	r0, sp, #40	; 0x28
   286e6:	f7ff ff1f 	bl	28528 <path_to_objs>
	if (ret < 0) {
   286ea:	1e06      	subs	r6, r0, #0
   286ec:	dbe2      	blt.n	286b4 <lwm2m_engine_set+0x30>
	if (!res_inst) {
   286ee:	9a08      	ldr	r2, [sp, #32]
   286f0:	b9a2      	cbnz	r2, 2871c <lwm2m_engine_set+0x98>
		LOG_ERR("res instance %d not found", path.res_inst_id);
   286f2:	4b81      	ldr	r3, [pc, #516]	; (288f8 <lwm2m_engine_set+0x274>)
   286f4:	681b      	ldr	r3, [r3, #0]
   286f6:	075d      	lsls	r5, r3, #29
   286f8:	d00d      	beq.n	28716 <lwm2m_engine_set+0x92>
   286fa:	2301      	movs	r3, #1
   286fc:	497f      	ldr	r1, [pc, #508]	; (288fc <lwm2m_engine_set+0x278>)
   286fe:	f363 0207 	bfi	r2, r3, #0, #8
   28702:	4b7f      	ldr	r3, [pc, #508]	; (28900 <lwm2m_engine_set+0x27c>)
   28704:	4880      	ldr	r0, [pc, #512]	; (28908 <lwm2m_engine_set+0x284>)
   28706:	1a5b      	subs	r3, r3, r1
   28708:	08db      	lsrs	r3, r3, #3
   2870a:	f363 128f 	bfi	r2, r3, #6, #10
   2870e:	f8bd 102e 	ldrh.w	r1, [sp, #46]	; 0x2e
   28712:	f018 f9a3 	bl	40a5c <log_1>
		return -ENOENT;
   28716:	f06f 0601 	mvn.w	r6, #1
   2871a:	e7cb      	b.n	286b4 <lwm2m_engine_set+0x30>
	if (LWM2M_HAS_RES_FLAG(res_inst, LWM2M_RES_DATA_FLAG_RO)) {
   2871c:	7a13      	ldrb	r3, [r2, #8]
   2871e:	07dc      	lsls	r4, r3, #31
   28720:	d525      	bpl.n	2876e <lwm2m_engine_set+0xea>
		LOG_ERR("res instance data pointer is read-only "
   28722:	4b75      	ldr	r3, [pc, #468]	; (288f8 <lwm2m_engine_set+0x274>)
   28724:	681b      	ldr	r3, [r3, #0]
   28726:	0758      	lsls	r0, r3, #29
   28728:	d01e      	beq.n	28768 <lwm2m_engine_set+0xe4>
   2872a:	2201      	movs	r2, #1
   2872c:	f04f 0300 	mov.w	r3, #0
   28730:	4972      	ldr	r1, [pc, #456]	; (288fc <lwm2m_engine_set+0x278>)
   28732:	f362 0307 	bfi	r3, r2, #0, #8
   28736:	4a72      	ldr	r2, [pc, #456]	; (28900 <lwm2m_engine_set+0x27c>)
   28738:	4874      	ldr	r0, [pc, #464]	; (2890c <lwm2m_engine_set+0x288>)
   2873a:	1a52      	subs	r2, r2, r1
   2873c:	08d2      	lsrs	r2, r2, #3
   2873e:	f362 138f 	bfi	r3, r2, #6, #10
   28742:	f8bd 2028 	ldrh.w	r2, [sp, #40]	; 0x28
   28746:	a90d      	add	r1, sp, #52	; 0x34
   28748:	920d      	str	r2, [sp, #52]	; 0x34
   2874a:	f8bd 202a 	ldrh.w	r2, [sp, #42]	; 0x2a
   2874e:	920e      	str	r2, [sp, #56]	; 0x38
   28750:	f8bd 202c 	ldrh.w	r2, [sp, #44]	; 0x2c
   28754:	920f      	str	r2, [sp, #60]	; 0x3c
   28756:	f8bd 202e 	ldrh.w	r2, [sp, #46]	; 0x2e
   2875a:	9210      	str	r2, [sp, #64]	; 0x40
   2875c:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
   28760:	9211      	str	r2, [sp, #68]	; 0x44
   28762:	2205      	movs	r2, #5
   28764:	f018 f9c1 	bl	40aea <log_n>
		return -EACCES;
   28768:	f06f 060c 	mvn.w	r6, #12
   2876c:	e7a2      	b.n	286b4 <lwm2m_engine_set+0x30>
	if (res->pre_write_cb) {
   2876e:	9907      	ldr	r1, [sp, #28]
	data_len = res_inst->data_len;
   28770:	8893      	ldrh	r3, [r2, #4]
	if (res->pre_write_cb) {
   28772:	f8d1 8004 	ldr.w	r8, [r1, #4]
	data_ptr = res_inst->data_ptr;
   28776:	6814      	ldr	r4, [r2, #0]
	data_len = res_inst->data_len;
   28778:	9309      	str	r3, [sp, #36]	; 0x24
	if (res->pre_write_cb) {
   2877a:	f1b8 0f00 	cmp.w	r8, #0
   2877e:	d006      	beq.n	2878e <lwm2m_engine_set+0x10a>
		data_ptr = res->pre_write_cb(obj_inst->obj_inst_id,
   28780:	9805      	ldr	r0, [sp, #20]
   28782:	ab09      	add	r3, sp, #36	; 0x24
   28784:	88d2      	ldrh	r2, [r2, #6]
   28786:	8a89      	ldrh	r1, [r1, #20]
   28788:	8980      	ldrh	r0, [r0, #12]
   2878a:	47c0      	blx	r8
   2878c:	4604      	mov	r4, r0
	if (!data_ptr) {
   2878e:	bb1c      	cbnz	r4, 287d8 <lwm2m_engine_set+0x154>
		LOG_ERR("res instance data pointer is NULL [%u/%u/%u/%u:%u]",
   28790:	4b59      	ldr	r3, [pc, #356]	; (288f8 <lwm2m_engine_set+0x274>)
   28792:	681b      	ldr	r3, [r3, #0]
   28794:	0759      	lsls	r1, r3, #29
   28796:	d08b      	beq.n	286b0 <lwm2m_engine_set+0x2c>
   28798:	2201      	movs	r2, #1
   2879a:	f04f 0300 	mov.w	r3, #0
   2879e:	4957      	ldr	r1, [pc, #348]	; (288fc <lwm2m_engine_set+0x278>)
   287a0:	f362 0307 	bfi	r3, r2, #0, #8
   287a4:	4a56      	ldr	r2, [pc, #344]	; (28900 <lwm2m_engine_set+0x27c>)
   287a6:	485a      	ldr	r0, [pc, #360]	; (28910 <lwm2m_engine_set+0x28c>)
   287a8:	1a52      	subs	r2, r2, r1
   287aa:	08d2      	lsrs	r2, r2, #3
   287ac:	f362 138f 	bfi	r3, r2, #6, #10
   287b0:	f8bd 2028 	ldrh.w	r2, [sp, #40]	; 0x28
   287b4:	a90d      	add	r1, sp, #52	; 0x34
   287b6:	920d      	str	r2, [sp, #52]	; 0x34
   287b8:	f8bd 202a 	ldrh.w	r2, [sp, #42]	; 0x2a
   287bc:	920e      	str	r2, [sp, #56]	; 0x38
   287be:	f8bd 202c 	ldrh.w	r2, [sp, #44]	; 0x2c
   287c2:	920f      	str	r2, [sp, #60]	; 0x3c
   287c4:	f8bd 202e 	ldrh.w	r2, [sp, #46]	; 0x2e
   287c8:	9210      	str	r2, [sp, #64]	; 0x40
   287ca:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
   287ce:	9211      	str	r2, [sp, #68]	; 0x44
   287d0:	2205      	movs	r2, #5
   287d2:	f018 f98a 	bl	40aea <log_n>
   287d6:	e76b      	b.n	286b0 <lwm2m_engine_set+0x2c>
	if (len > res_inst->data_len -
   287d8:	9b08      	ldr	r3, [sp, #32]
		(obj_field->data_type == LWM2M_RES_TYPE_STRING ? 1 : 0)) {
   287da:	9a06      	ldr	r2, [sp, #24]
	if (len > res_inst->data_len -
   287dc:	889b      	ldrh	r3, [r3, #4]
		(obj_field->data_type == LWM2M_RES_TYPE_STRING ? 1 : 0)) {
   287de:	78d2      	ldrb	r2, [r2, #3]
	if (len > res_inst->data_len -
   287e0:	2a02      	cmp	r2, #2
   287e2:	bf08      	it	eq
   287e4:	3b01      	subeq	r3, #1
   287e6:	429f      	cmp	r7, r3
   287e8:	dd17      	ble.n	2881a <lwm2m_engine_set+0x196>
		LOG_ERR("length %u is too long for res instance %d data",
   287ea:	4b43      	ldr	r3, [pc, #268]	; (288f8 <lwm2m_engine_set+0x274>)
   287ec:	681b      	ldr	r3, [r3, #0]
   287ee:	075a      	lsls	r2, r3, #29
   287f0:	d010      	beq.n	28814 <lwm2m_engine_set+0x190>
   287f2:	2201      	movs	r2, #1
   287f4:	f04f 0300 	mov.w	r3, #0
   287f8:	4940      	ldr	r1, [pc, #256]	; (288fc <lwm2m_engine_set+0x278>)
   287fa:	f362 0307 	bfi	r3, r2, #0, #8
   287fe:	4a40      	ldr	r2, [pc, #256]	; (28900 <lwm2m_engine_set+0x27c>)
   28800:	4844      	ldr	r0, [pc, #272]	; (28914 <lwm2m_engine_set+0x290>)
   28802:	1a52      	subs	r2, r2, r1
   28804:	08d2      	lsrs	r2, r2, #3
   28806:	f362 138f 	bfi	r3, r2, #6, #10
   2880a:	4639      	mov	r1, r7
   2880c:	f8bd 202c 	ldrh.w	r2, [sp, #44]	; 0x2c
   28810:	f018 f938 	bl	40a84 <log_2>
		return -ENOMEM;
   28814:	f06f 060b 	mvn.w	r6, #11
   28818:	e74c      	b.n	286b4 <lwm2m_engine_set+0x30>
	if (memcmp(data_ptr, value, len) !=  0) {
   2881a:	4629      	mov	r1, r5
   2881c:	463a      	mov	r2, r7
   2881e:	4620      	mov	r0, r4
   28820:	f01c fb08 	bl	44e34 <memcmp>
	switch (obj_field->data_type) {
   28824:	9b06      	ldr	r3, [sp, #24]
	if (memcmp(data_ptr, value, len) !=  0) {
   28826:	4680      	mov	r8, r0
	switch (obj_field->data_type) {
   28828:	78d9      	ldrb	r1, [r3, #3]
   2882a:	1e4b      	subs	r3, r1, #1
   2882c:	2b0d      	cmp	r3, #13
   2882e:	d84e      	bhi.n	288ce <lwm2m_engine_set+0x24a>
   28830:	e8df f003 	tbb	[pc, r3]
   28834:	332e2307 	.word	0x332e2307
   28838:	332e3d2b 	.word	0x332e3d2b
   2883c:	333d3936 	.word	0x333d3936
   28840:	443f      	.short	0x443f
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   28842:	463a      	mov	r2, r7
   28844:	4629      	mov	r1, r5
   28846:	4620      	mov	r0, r4
   28848:	f01c fb02 	bl	44e50 <memcpy>
	if (res->post_write_cb) {
   2884c:	9b07      	ldr	r3, [sp, #28]
   2884e:	689d      	ldr	r5, [r3, #8]
   28850:	b15d      	cbz	r5, 2886a <lwm2m_engine_set+0x1e6>
		ret = res->post_write_cb(obj_inst->obj_inst_id,
   28852:	8a99      	ldrh	r1, [r3, #20]
   28854:	9b05      	ldr	r3, [sp, #20]
   28856:	9a08      	ldr	r2, [sp, #32]
   28858:	8998      	ldrh	r0, [r3, #12]
   2885a:	2300      	movs	r3, #0
   2885c:	88d2      	ldrh	r2, [r2, #6]
   2885e:	e9cd 3301 	strd	r3, r3, [sp, #4]
   28862:	9700      	str	r7, [sp, #0]
   28864:	4623      	mov	r3, r4
   28866:	47a8      	blx	r5
   28868:	4606      	mov	r6, r0
	if (changed) {
   2886a:	f1b8 0f00 	cmp.w	r8, #0
   2886e:	f43f af21 	beq.w	286b4 <lwm2m_engine_set+0x30>
		NOTIFY_OBSERVER_PATH(&path);
   28872:	a80a      	add	r0, sp, #40	; 0x28
   28874:	f01a fb77 	bl	42f66 <lwm2m_notify_observer_path>
   28878:	e71c      	b.n	286b4 <lwm2m_engine_set+0x30>
   2887a:	463a      	mov	r2, r7
   2887c:	4629      	mov	r1, r5
   2887e:	4620      	mov	r0, r4
   28880:	f01c fae6 	bl	44e50 <memcpy>
		((u8_t *)data_ptr)[len] = '\0';
   28884:	2300      	movs	r3, #0
   28886:	55e3      	strb	r3, [r4, r7]
		break;
   28888:	e7e0      	b.n	2884c <lwm2m_engine_set+0x1c8>
		*((u16_t *)data_ptr) = *(u16_t *)value;
   2888a:	882b      	ldrh	r3, [r5, #0]
		*((s16_t *)data_ptr) = *(s16_t *)value;
   2888c:	8023      	strh	r3, [r4, #0]
		break;
   2888e:	e7dd      	b.n	2884c <lwm2m_engine_set+0x1c8>
		*((s64_t *)data_ptr) = *(s64_t *)value;
   28890:	e9d5 2300 	ldrd	r2, r3, [r5]
   28894:	e9c4 2300 	strd	r2, r3, [r4]
		break;
   28898:	e7d8      	b.n	2884c <lwm2m_engine_set+0x1c8>
		*((s32_t *)data_ptr) = *(s32_t *)value;
   2889a:	682b      	ldr	r3, [r5, #0]
   2889c:	6023      	str	r3, [r4, #0]
		break;
   2889e:	e7d5      	b.n	2884c <lwm2m_engine_set+0x1c8>
		*((s16_t *)data_ptr) = *(s16_t *)value;
   288a0:	f9b5 3000 	ldrsh.w	r3, [r5]
   288a4:	e7f2      	b.n	2888c <lwm2m_engine_set+0x208>
		*((s8_t *)data_ptr) = *(s8_t *)value;
   288a6:	f995 3000 	ldrsb.w	r3, [r5]
		*((bool *)data_ptr) = *(bool *)value;
   288aa:	7023      	strb	r3, [r4, #0]
		break;
   288ac:	e7ce      	b.n	2884c <lwm2m_engine_set+0x1c8>
		*((bool *)data_ptr) = *(bool *)value;
   288ae:	782b      	ldrb	r3, [r5, #0]
   288b0:	e7fb      	b.n	288aa <lwm2m_engine_set+0x226>
				((float32_value_t *)value)->val1;
   288b2:	682b      	ldr	r3, [r5, #0]
		((float32_value_t *)data_ptr)->val1 =
   288b4:	6023      	str	r3, [r4, #0]
				((float32_value_t *)value)->val2;
   288b6:	686b      	ldr	r3, [r5, #4]
		((float32_value_t *)data_ptr)->val2 =
   288b8:	6063      	str	r3, [r4, #4]
		break;
   288ba:	e7c7      	b.n	2884c <lwm2m_engine_set+0x1c8>
				((float64_value_t *)value)->val1;
   288bc:	e9d5 2300 	ldrd	r2, r3, [r5]
		((float64_value_t *)data_ptr)->val1 =
   288c0:	e9c4 2300 	strd	r2, r3, [r4]
				((float64_value_t *)value)->val2;
   288c4:	e9d5 2302 	ldrd	r2, r3, [r5, #8]
		((float64_value_t *)data_ptr)->val2 =
   288c8:	e9c4 2302 	strd	r2, r3, [r4, #8]
		break;
   288cc:	e7be      	b.n	2884c <lwm2m_engine_set+0x1c8>
		LOG_ERR("unknown obj data_type %d", obj_field->data_type);
   288ce:	4b0a      	ldr	r3, [pc, #40]	; (288f8 <lwm2m_engine_set+0x274>)
   288d0:	681b      	ldr	r3, [r3, #0]
   288d2:	075b      	lsls	r3, r3, #29
   288d4:	f43f aeec 	beq.w	286b0 <lwm2m_engine_set+0x2c>
   288d8:	2301      	movs	r3, #1
   288da:	f04f 0200 	mov.w	r2, #0
   288de:	4807      	ldr	r0, [pc, #28]	; (288fc <lwm2m_engine_set+0x278>)
   288e0:	f363 0207 	bfi	r2, r3, #0, #8
   288e4:	4b06      	ldr	r3, [pc, #24]	; (28900 <lwm2m_engine_set+0x27c>)
   288e6:	1a1b      	subs	r3, r3, r0
   288e8:	08db      	lsrs	r3, r3, #3
   288ea:	f363 128f 	bfi	r2, r3, #6, #10
   288ee:	480a      	ldr	r0, [pc, #40]	; (28918 <lwm2m_engine_set+0x294>)
   288f0:	f018 f8b4 	bl	40a5c <log_1>
   288f4:	e6dc      	b.n	286b0 <lwm2m_engine_set+0x2c>
   288f6:	bf00      	nop
   288f8:	20032b0c 	.word	0x20032b0c
   288fc:	00045f08 	.word	0x00045f08
   28900:	00046018 	.word	0x00046018
   28904:	0004b2fa 	.word	0x0004b2fa
   28908:	0004b31a 	.word	0x0004b31a
   2890c:	0004b334 	.word	0x0004b334
   28910:	0004b36c 	.word	0x0004b36c
   28914:	0004b39f 	.word	0x0004b39f
   28918:	0004b3ce 	.word	0x0004b3ce

0002891c <lwm2m_engine_get>:
	struct lwm2m_engine_res *res = NULL;
   2891c:	2300      	movs	r3, #0
{
   2891e:	b570      	push	{r4, r5, r6, lr}
   28920:	b08a      	sub	sp, #40	; 0x28
   28922:	460c      	mov	r4, r1
	ret = string_to_path(pathstr, &path, '/');
   28924:	a907      	add	r1, sp, #28
{
   28926:	4615      	mov	r5, r2
	struct lwm2m_engine_res_inst *res_inst = NULL;
   28928:	e9cd 3304 	strd	r3, r3, [sp, #16]
	size_t data_len = 0;
   2892c:	9306      	str	r3, [sp, #24]
	ret = string_to_path(pathstr, &path, '/');
   2892e:	f7ff fc7b 	bl	28228 <string_to_path.constprop.19>
	if (ret < 0) {
   28932:	2800      	cmp	r0, #0
   28934:	db09      	blt.n	2894a <lwm2m_engine_get+0x2e>
	if (path.level < 3) {
   28936:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
   2893a:	2b02      	cmp	r3, #2
   2893c:	d816      	bhi.n	2896c <lwm2m_engine_get+0x50>
		LOG_ERR("path must have at least 3 parts");
   2893e:	4b4e      	ldr	r3, [pc, #312]	; (28a78 <lwm2m_engine_get+0x15c>)
   28940:	681b      	ldr	r3, [r3, #0]
   28942:	0758      	lsls	r0, r3, #29
   28944:	d103      	bne.n	2894e <lwm2m_engine_get+0x32>
		return -EINVAL;
   28946:	f06f 0015 	mvn.w	r0, #21
}
   2894a:	b00a      	add	sp, #40	; 0x28
   2894c:	bd70      	pop	{r4, r5, r6, pc}
		LOG_ERR("path must have at least 3 parts");
   2894e:	2301      	movs	r3, #1
   28950:	f04f 0100 	mov.w	r1, #0
   28954:	4a49      	ldr	r2, [pc, #292]	; (28a7c <lwm2m_engine_get+0x160>)
   28956:	f363 0107 	bfi	r1, r3, #0, #8
   2895a:	4b49      	ldr	r3, [pc, #292]	; (28a80 <lwm2m_engine_get+0x164>)
   2895c:	4849      	ldr	r0, [pc, #292]	; (28a84 <lwm2m_engine_get+0x168>)
   2895e:	1a9b      	subs	r3, r3, r2
   28960:	08db      	lsrs	r3, r3, #3
   28962:	f363 118f 	bfi	r1, r3, #6, #10
   28966:	f018 f86c 	bl	40a42 <log_0>
   2896a:	e7ec      	b.n	28946 <lwm2m_engine_get+0x2a>
	ret = path_to_objs(&path, &obj_inst, &obj_field, &res, &res_inst);
   2896c:	ab05      	add	r3, sp, #20
   2896e:	9300      	str	r3, [sp, #0]
   28970:	aa03      	add	r2, sp, #12
   28972:	ab04      	add	r3, sp, #16
   28974:	a902      	add	r1, sp, #8
   28976:	a807      	add	r0, sp, #28
   28978:	f7ff fdd6 	bl	28528 <path_to_objs>
	if (ret < 0) {
   2897c:	2800      	cmp	r0, #0
   2897e:	dbe4      	blt.n	2894a <lwm2m_engine_get+0x2e>
	if (!res_inst) {
   28980:	9a05      	ldr	r2, [sp, #20]
   28982:	b9a2      	cbnz	r2, 289ae <lwm2m_engine_get+0x92>
		LOG_ERR("res instance %d not found", path.res_inst_id);
   28984:	4b3c      	ldr	r3, [pc, #240]	; (28a78 <lwm2m_engine_get+0x15c>)
   28986:	681b      	ldr	r3, [r3, #0]
   28988:	0759      	lsls	r1, r3, #29
   2898a:	d00d      	beq.n	289a8 <lwm2m_engine_get+0x8c>
   2898c:	2301      	movs	r3, #1
   2898e:	493b      	ldr	r1, [pc, #236]	; (28a7c <lwm2m_engine_get+0x160>)
   28990:	f363 0207 	bfi	r2, r3, #0, #8
   28994:	4b3a      	ldr	r3, [pc, #232]	; (28a80 <lwm2m_engine_get+0x164>)
   28996:	483c      	ldr	r0, [pc, #240]	; (28a88 <lwm2m_engine_get+0x16c>)
   28998:	1a5b      	subs	r3, r3, r1
   2899a:	08db      	lsrs	r3, r3, #3
   2899c:	f363 128f 	bfi	r2, r3, #6, #10
   289a0:	f8bd 1022 	ldrh.w	r1, [sp, #34]	; 0x22
   289a4:	f018 f85a 	bl	40a5c <log_1>
		return -ENOENT;
   289a8:	f06f 0001 	mvn.w	r0, #1
   289ac:	e7cd      	b.n	2894a <lwm2m_engine_get+0x2e>
	if (res->read_cb) {
   289ae:	9904      	ldr	r1, [sp, #16]
	data_len = res_inst->data_len;
   289b0:	8893      	ldrh	r3, [r2, #4]
	if (res->read_cb) {
   289b2:	680e      	ldr	r6, [r1, #0]
	data_ptr = res_inst->data_ptr;
   289b4:	6810      	ldr	r0, [r2, #0]
	data_len = res_inst->data_len;
   289b6:	9306      	str	r3, [sp, #24]
	if (res->read_cb) {
   289b8:	b12e      	cbz	r6, 289c6 <lwm2m_engine_get+0xaa>
		data_ptr = res->read_cb(obj_inst->obj_inst_id,
   289ba:	9802      	ldr	r0, [sp, #8]
   289bc:	ab06      	add	r3, sp, #24
   289be:	88d2      	ldrh	r2, [r2, #6]
   289c0:	8a89      	ldrh	r1, [r1, #20]
   289c2:	8980      	ldrh	r0, [r0, #12]
   289c4:	47b0      	blx	r6
	if (data_ptr && data_len > 0) {
   289c6:	2800      	cmp	r0, #0
   289c8:	d0bf      	beq.n	2894a <lwm2m_engine_get+0x2e>
   289ca:	9a06      	ldr	r2, [sp, #24]
   289cc:	b19a      	cbz	r2, 289f6 <lwm2m_engine_get+0xda>
		switch (obj_field->data_type) {
   289ce:	9b03      	ldr	r3, [sp, #12]
   289d0:	78d9      	ldrb	r1, [r3, #3]
   289d2:	1e4b      	subs	r3, r1, #1
   289d4:	2b0d      	cmp	r3, #13
   289d6:	d838      	bhi.n	28a4a <lwm2m_engine_get+0x12e>
   289d8:	e8df f003 	tbb	[pc, r3]
   289dc:	1d180f07 	.word	0x1d180f07
   289e0:	1d182715 	.word	0x1d182715
   289e4:	1d272320 	.word	0x1d272320
   289e8:	2e29      	.short	0x2e29
			if (data_len > buflen) {
   289ea:	42aa      	cmp	r2, r5
   289ec:	d841      	bhi.n	28a72 <lwm2m_engine_get+0x156>
   289ee:	4601      	mov	r1, r0
   289f0:	4620      	mov	r0, r4
   289f2:	f01c fa2d 	bl	44e50 <memcpy>
	return 0;
   289f6:	2000      	movs	r0, #0
   289f8:	e7a7      	b.n	2894a <lwm2m_engine_get+0x2e>
__ssp_bos_icheck3_restrict(strncpy, char *, const char *)
   289fa:	4601      	mov	r1, r0
   289fc:	462a      	mov	r2, r5
   289fe:	4620      	mov	r0, r4
   28a00:	f01c fbc0 	bl	45184 <strncpy>
   28a04:	e7f7      	b.n	289f6 <lwm2m_engine_get+0xda>
			*(u16_t *)buf = *(u16_t *)data_ptr;
   28a06:	8803      	ldrh	r3, [r0, #0]
			*(s16_t *)buf = *(s16_t *)data_ptr;
   28a08:	8023      	strh	r3, [r4, #0]
			break;
   28a0a:	e7f4      	b.n	289f6 <lwm2m_engine_get+0xda>
			*(s64_t *)buf = *(s64_t *)data_ptr;
   28a0c:	e9d0 2300 	ldrd	r2, r3, [r0]
   28a10:	e9c4 2300 	strd	r2, r3, [r4]
			break;
   28a14:	e7ef      	b.n	289f6 <lwm2m_engine_get+0xda>
			*(s32_t *)buf = *(s32_t *)data_ptr;
   28a16:	6803      	ldr	r3, [r0, #0]
   28a18:	6023      	str	r3, [r4, #0]
			break;
   28a1a:	e7ec      	b.n	289f6 <lwm2m_engine_get+0xda>
			*(s16_t *)buf = *(s16_t *)data_ptr;
   28a1c:	f9b0 3000 	ldrsh.w	r3, [r0]
   28a20:	e7f2      	b.n	28a08 <lwm2m_engine_get+0xec>
			*(s8_t *)buf = *(s8_t *)data_ptr;
   28a22:	f990 3000 	ldrsb.w	r3, [r0]
			*(bool *)buf = *(bool *)data_ptr;
   28a26:	7023      	strb	r3, [r4, #0]
			break;
   28a28:	e7e5      	b.n	289f6 <lwm2m_engine_get+0xda>
			*(bool *)buf = *(bool *)data_ptr;
   28a2a:	7803      	ldrb	r3, [r0, #0]
   28a2c:	e7fb      	b.n	28a26 <lwm2m_engine_get+0x10a>
				((float32_value_t *)data_ptr)->val1;
   28a2e:	6803      	ldr	r3, [r0, #0]
			((float32_value_t *)buf)->val1 =
   28a30:	6023      	str	r3, [r4, #0]
				((float32_value_t *)data_ptr)->val2;
   28a32:	6843      	ldr	r3, [r0, #4]
			((float32_value_t *)buf)->val2 =
   28a34:	6063      	str	r3, [r4, #4]
			break;
   28a36:	e7de      	b.n	289f6 <lwm2m_engine_get+0xda>
				((float64_value_t *)data_ptr)->val1;
   28a38:	e9d0 2300 	ldrd	r2, r3, [r0]
			((float64_value_t *)buf)->val1 =
   28a3c:	e9c4 2300 	strd	r2, r3, [r4]
				((float64_value_t *)data_ptr)->val2;
   28a40:	e9d0 2302 	ldrd	r2, r3, [r0, #8]
			((float64_value_t *)buf)->val2 =
   28a44:	e9c4 2302 	strd	r2, r3, [r4, #8]
			break;
   28a48:	e7d5      	b.n	289f6 <lwm2m_engine_get+0xda>
			LOG_ERR("unknown obj data_type %d",
   28a4a:	4b0b      	ldr	r3, [pc, #44]	; (28a78 <lwm2m_engine_get+0x15c>)
   28a4c:	681b      	ldr	r3, [r3, #0]
   28a4e:	075b      	lsls	r3, r3, #29
   28a50:	f43f af79 	beq.w	28946 <lwm2m_engine_get+0x2a>
   28a54:	2301      	movs	r3, #1
   28a56:	f04f 0200 	mov.w	r2, #0
   28a5a:	4808      	ldr	r0, [pc, #32]	; (28a7c <lwm2m_engine_get+0x160>)
   28a5c:	f363 0207 	bfi	r2, r3, #0, #8
   28a60:	4b07      	ldr	r3, [pc, #28]	; (28a80 <lwm2m_engine_get+0x164>)
   28a62:	1a1b      	subs	r3, r3, r0
   28a64:	08db      	lsrs	r3, r3, #3
   28a66:	f363 128f 	bfi	r2, r3, #6, #10
   28a6a:	4808      	ldr	r0, [pc, #32]	; (28a8c <lwm2m_engine_get+0x170>)
   28a6c:	f017 fff6 	bl	40a5c <log_1>
   28a70:	e769      	b.n	28946 <lwm2m_engine_get+0x2a>
				return -ENOMEM;
   28a72:	f06f 000b 	mvn.w	r0, #11
   28a76:	e768      	b.n	2894a <lwm2m_engine_get+0x2e>
   28a78:	20032b0c 	.word	0x20032b0c
   28a7c:	00045f08 	.word	0x00045f08
   28a80:	00046018 	.word	0x00046018
   28a84:	0004b2fa 	.word	0x0004b2fa
   28a88:	0004b31a 	.word	0x0004b31a
   28a8c:	0004b3ce 	.word	0x0004b3ce

00028a90 <lwm2m_delete_obj_inst>:
{
   28a90:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   28a94:	4680      	mov	r8, r0
   28a96:	460f      	mov	r7, r1
	obj = get_engine_obj(obj_id);
   28a98:	f7ff f980 	bl	27d9c <get_engine_obj>
	if (!obj) {
   28a9c:	4606      	mov	r6, r0
   28a9e:	2800      	cmp	r0, #0
   28aa0:	d053      	beq.n	28b4a <lwm2m_delete_obj_inst+0xba>
	obj_inst = get_engine_obj_inst(obj_id, obj_inst_id);
   28aa2:	4640      	mov	r0, r8
   28aa4:	f7ff f984 	bl	27db0 <get_engine_obj_inst>
	if (!obj_inst) {
   28aa8:	4605      	mov	r5, r0
   28aaa:	2800      	cmp	r0, #0
   28aac:	d04d      	beq.n	28b4a <lwm2m_delete_obj_inst+0xba>
	if (obj->user_delete_cb) {
   28aae:	6974      	ldr	r4, [r6, #20]
   28ab0:	b1d4      	cbz	r4, 28ae8 <lwm2m_delete_obj_inst+0x58>
		ret = obj->user_delete_cb(obj_inst_id);
   28ab2:	4608      	mov	r0, r1
   28ab4:	47a0      	blx	r4
		if (ret < 0) {
   28ab6:	1e04      	subs	r4, r0, #0
   28ab8:	da16      	bge.n	28ae8 <lwm2m_delete_obj_inst+0x58>
			LOG_ERR("Error in user obj delete %u/%u: %d",
   28aba:	4b25      	ldr	r3, [pc, #148]	; (28b50 <lwm2m_delete_obj_inst+0xc0>)
   28abc:	681b      	ldr	r3, [r3, #0]
   28abe:	075b      	lsls	r3, r3, #29
   28ac0:	d012      	beq.n	28ae8 <lwm2m_delete_obj_inst+0x58>
   28ac2:	2301      	movs	r3, #1
   28ac4:	f04f 0200 	mov.w	r2, #0
   28ac8:	4922      	ldr	r1, [pc, #136]	; (28b54 <lwm2m_delete_obj_inst+0xc4>)
   28aca:	f363 0207 	bfi	r2, r3, #0, #8
   28ace:	4b22      	ldr	r3, [pc, #136]	; (28b58 <lwm2m_delete_obj_inst+0xc8>)
   28ad0:	4822      	ldr	r0, [pc, #136]	; (28b5c <lwm2m_delete_obj_inst+0xcc>)
   28ad2:	1a5b      	subs	r3, r3, r1
   28ad4:	08db      	lsrs	r3, r3, #3
   28ad6:	f363 128f 	bfi	r2, r3, #6, #10
   28ada:	f8ad 2000 	strh.w	r2, [sp]
   28ade:	4623      	mov	r3, r4
   28ae0:	463a      	mov	r2, r7
   28ae2:	4641      	mov	r1, r8
   28ae4:	f017 ffe6 	bl	40ab4 <log_3>
	engine_remove_observer_by_id(
   28ae8:	686b      	ldr	r3, [r5, #4]
   28aea:	89a9      	ldrh	r1, [r5, #12]
   28aec:	8b18      	ldrh	r0, [r3, #24]
   28aee:	f7ff fa1b 	bl	27f28 <engine_remove_observer_by_id>
	sys_slist_find_and_remove(&engine_obj_inst_list, &obj_inst->node);
   28af2:	4629      	mov	r1, r5
   28af4:	481a      	ldr	r0, [pc, #104]	; (28b60 <lwm2m_delete_obj_inst+0xd0>)
   28af6:	f01a f9ed 	bl	42ed4 <sys_slist_find_and_remove>
	obj->instance_count--;
   28afa:	8bb3      	ldrh	r3, [r6, #28]
   28afc:	3b01      	subs	r3, #1
   28afe:	83b3      	strh	r3, [r6, #28]
	if (obj->delete_cb) {
   28b00:	68f3      	ldr	r3, [r6, #12]
   28b02:	b113      	cbz	r3, 28b0a <lwm2m_delete_obj_inst+0x7a>
		ret = obj->delete_cb(obj_inst_id);
   28b04:	4638      	mov	r0, r7
   28b06:	4798      	blx	r3
   28b08:	4604      	mov	r4, r0
	for (i = 0; i < obj_inst->resource_count; i++) {
   28b0a:	2600      	movs	r6, #0
   28b0c:	f04f 0818 	mov.w	r8, #24
   28b10:	89eb      	ldrh	r3, [r5, #14]
   28b12:	429e      	cmp	r6, r3
   28b14:	db0b      	blt.n	28b2e <lwm2m_delete_obj_inst+0x9e>
	clear_attrs(obj_inst);
   28b16:	4628      	mov	r0, r5
   28b18:	f7ff fa2a 	bl	27f70 <clear_attrs>
__ssp_bos_icheck3(memset, void *, int)
   28b1c:	2210      	movs	r2, #16
   28b1e:	2100      	movs	r1, #0
   28b20:	4628      	mov	r0, r5
   28b22:	f01c f9cf 	bl	44ec4 <memset>
}
   28b26:	4620      	mov	r0, r4
   28b28:	b002      	add	sp, #8
   28b2a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		clear_attrs(&obj_inst->resources[i]);
   28b2e:	fb08 f706 	mul.w	r7, r8, r6
   28b32:	68a8      	ldr	r0, [r5, #8]
	for (i = 0; i < obj_inst->resource_count; i++) {
   28b34:	3601      	adds	r6, #1
		clear_attrs(&obj_inst->resources[i]);
   28b36:	4438      	add	r0, r7
   28b38:	f7ff fa1a 	bl	27f70 <clear_attrs>
		(void)memset(obj_inst->resources + i, 0,
   28b3c:	68a8      	ldr	r0, [r5, #8]
   28b3e:	2218      	movs	r2, #24
   28b40:	2100      	movs	r1, #0
   28b42:	4438      	add	r0, r7
   28b44:	f01c f9be 	bl	44ec4 <memset>
   28b48:	e7e2      	b.n	28b10 <lwm2m_delete_obj_inst+0x80>
		return -ENOENT;
   28b4a:	f06f 0401 	mvn.w	r4, #1
   28b4e:	e7ea      	b.n	28b26 <lwm2m_delete_obj_inst+0x96>
   28b50:	20032b0c 	.word	0x20032b0c
   28b54:	00045f08 	.word	0x00045f08
   28b58:	00046018 	.word	0x00046018
   28b5c:	0004b220 	.word	0x0004b220
   28b60:	2002247c 	.word	0x2002247c

00028b64 <lwm2m_create_obj_inst>:
	*obj_inst = NULL;
   28b64:	2300      	movs	r3, #0
{
   28b66:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	*obj_inst = NULL;
   28b68:	6013      	str	r3, [r2, #0]
{
   28b6a:	4605      	mov	r5, r0
   28b6c:	460e      	mov	r6, r1
   28b6e:	4617      	mov	r7, r2
	obj = get_engine_obj(obj_id);
   28b70:	f7ff f914 	bl	27d9c <get_engine_obj>
	if (!obj) {
   28b74:	4604      	mov	r4, r0
   28b76:	b9a8      	cbnz	r0, 28ba4 <lwm2m_create_obj_inst+0x40>
		LOG_ERR("unable to find obj: %u", obj_id);
   28b78:	4b48      	ldr	r3, [pc, #288]	; (28c9c <lwm2m_create_obj_inst+0x138>)
   28b7a:	681b      	ldr	r3, [r3, #0]
   28b7c:	075c      	lsls	r4, r3, #29
   28b7e:	d00e      	beq.n	28b9e <lwm2m_create_obj_inst+0x3a>
   28b80:	2301      	movs	r3, #1
   28b82:	f04f 0200 	mov.w	r2, #0
   28b86:	4946      	ldr	r1, [pc, #280]	; (28ca0 <lwm2m_create_obj_inst+0x13c>)
   28b88:	f363 0207 	bfi	r2, r3, #0, #8
   28b8c:	4b45      	ldr	r3, [pc, #276]	; (28ca4 <lwm2m_create_obj_inst+0x140>)
   28b8e:	4846      	ldr	r0, [pc, #280]	; (28ca8 <lwm2m_create_obj_inst+0x144>)
   28b90:	1a5b      	subs	r3, r3, r1
   28b92:	08db      	lsrs	r3, r3, #3
   28b94:	f363 128f 	bfi	r2, r3, #6, #10
   28b98:	4629      	mov	r1, r5
   28b9a:	f017 ff5f 	bl	40a5c <log_1>
		return -ENOENT;
   28b9e:	f06f 0401 	mvn.w	r4, #1
   28ba2:	e057      	b.n	28c54 <lwm2m_create_obj_inst+0xf0>
	if (!obj->create_cb) {
   28ba4:	6882      	ldr	r2, [r0, #8]
   28ba6:	b99a      	cbnz	r2, 28bd0 <lwm2m_create_obj_inst+0x6c>
		LOG_ERR("obj %u has no create_cb", obj_id);
   28ba8:	4b3c      	ldr	r3, [pc, #240]	; (28c9c <lwm2m_create_obj_inst+0x138>)
   28baa:	681b      	ldr	r3, [r3, #0]
   28bac:	0758      	lsls	r0, r3, #29
   28bae:	d00c      	beq.n	28bca <lwm2m_create_obj_inst+0x66>
   28bb0:	2301      	movs	r3, #1
   28bb2:	493b      	ldr	r1, [pc, #236]	; (28ca0 <lwm2m_create_obj_inst+0x13c>)
   28bb4:	f363 0207 	bfi	r2, r3, #0, #8
   28bb8:	4b3a      	ldr	r3, [pc, #232]	; (28ca4 <lwm2m_create_obj_inst+0x140>)
   28bba:	483c      	ldr	r0, [pc, #240]	; (28cac <lwm2m_create_obj_inst+0x148>)
   28bbc:	1a5b      	subs	r3, r3, r1
   28bbe:	08db      	lsrs	r3, r3, #3
   28bc0:	f363 128f 	bfi	r2, r3, #6, #10
   28bc4:	4629      	mov	r1, r5
   28bc6:	f017 ff49 	bl	40a5c <log_1>
		return -EINVAL;
   28bca:	f06f 0415 	mvn.w	r4, #21
   28bce:	e041      	b.n	28c54 <lwm2m_create_obj_inst+0xf0>
	if (obj->instance_count + 1 > obj->max_instance_count) {
   28bd0:	8b83      	ldrh	r3, [r0, #28]
   28bd2:	8bc1      	ldrh	r1, [r0, #30]
   28bd4:	3301      	adds	r3, #1
   28bd6:	428b      	cmp	r3, r1
   28bd8:	dd15      	ble.n	28c06 <lwm2m_create_obj_inst+0xa2>
		LOG_ERR("no more instances available for obj %u", obj_id);
   28bda:	4b30      	ldr	r3, [pc, #192]	; (28c9c <lwm2m_create_obj_inst+0x138>)
   28bdc:	681b      	ldr	r3, [r3, #0]
   28bde:	0759      	lsls	r1, r3, #29
   28be0:	d00e      	beq.n	28c00 <lwm2m_create_obj_inst+0x9c>
   28be2:	2301      	movs	r3, #1
   28be4:	f04f 0200 	mov.w	r2, #0
   28be8:	492d      	ldr	r1, [pc, #180]	; (28ca0 <lwm2m_create_obj_inst+0x13c>)
   28bea:	f363 0207 	bfi	r2, r3, #0, #8
   28bee:	4b2d      	ldr	r3, [pc, #180]	; (28ca4 <lwm2m_create_obj_inst+0x140>)
   28bf0:	482f      	ldr	r0, [pc, #188]	; (28cb0 <lwm2m_create_obj_inst+0x14c>)
   28bf2:	1a5b      	subs	r3, r3, r1
   28bf4:	08db      	lsrs	r3, r3, #3
   28bf6:	f363 128f 	bfi	r2, r3, #6, #10
   28bfa:	4629      	mov	r1, r5
   28bfc:	f017 ff2e 	bl	40a5c <log_1>
		return -ENOMEM;
   28c00:	f06f 040b 	mvn.w	r4, #11
   28c04:	e026      	b.n	28c54 <lwm2m_create_obj_inst+0xf0>
	*obj_inst = obj->create_cb(obj_inst_id);
   28c06:	4630      	mov	r0, r6
   28c08:	4790      	blx	r2
   28c0a:	4601      	mov	r1, r0
   28c0c:	6038      	str	r0, [r7, #0]
	if (!*obj_inst) {
   28c0e:	b9b0      	cbnz	r0, 28c3e <lwm2m_create_obj_inst+0xda>
		LOG_ERR("unable to create obj %u instance %u",
   28c10:	4b22      	ldr	r3, [pc, #136]	; (28c9c <lwm2m_create_obj_inst+0x138>)
   28c12:	681b      	ldr	r3, [r3, #0]
   28c14:	075a      	lsls	r2, r3, #29
   28c16:	d00f      	beq.n	28c38 <lwm2m_create_obj_inst+0xd4>
   28c18:	2201      	movs	r2, #1
   28c1a:	f04f 0300 	mov.w	r3, #0
   28c1e:	4920      	ldr	r1, [pc, #128]	; (28ca0 <lwm2m_create_obj_inst+0x13c>)
   28c20:	f362 0307 	bfi	r3, r2, #0, #8
   28c24:	4a1f      	ldr	r2, [pc, #124]	; (28ca4 <lwm2m_create_obj_inst+0x140>)
   28c26:	4823      	ldr	r0, [pc, #140]	; (28cb4 <lwm2m_create_obj_inst+0x150>)
   28c28:	1a52      	subs	r2, r2, r1
   28c2a:	08d2      	lsrs	r2, r2, #3
   28c2c:	f362 138f 	bfi	r3, r2, #6, #10
   28c30:	4629      	mov	r1, r5
   28c32:	4632      	mov	r2, r6
   28c34:	f017 ff26 	bl	40a84 <log_2>
		return -EEXIST;
   28c38:	f06f 0410 	mvn.w	r4, #16
   28c3c:	e00a      	b.n	28c54 <lwm2m_create_obj_inst+0xf0>
	obj->instance_count++;
   28c3e:	8ba3      	ldrh	r3, [r4, #28]
   28c40:	3301      	adds	r3, #1
   28c42:	83a3      	strh	r3, [r4, #28]
	(*obj_inst)->obj = obj;
   28c44:	6044      	str	r4, [r0, #4]
	(*obj_inst)->obj_inst_id = obj_inst_id;
   28c46:	8186      	strh	r6, [r0, #12]
	sys_slist_append(&engine_obj_inst_list, &obj_inst->node);
   28c48:	481b      	ldr	r0, [pc, #108]	; (28cb8 <lwm2m_create_obj_inst+0x154>)
   28c4a:	f01a f929 	bl	42ea0 <sys_slist_append>
	if (obj->user_create_cb) {
   28c4e:	6923      	ldr	r3, [r4, #16]
   28c50:	b91b      	cbnz	r3, 28c5a <lwm2m_create_obj_inst+0xf6>
	return 0;
   28c52:	2400      	movs	r4, #0
}
   28c54:	4620      	mov	r0, r4
   28c56:	b003      	add	sp, #12
   28c58:	bdf0      	pop	{r4, r5, r6, r7, pc}
		ret = obj->user_create_cb(obj_inst_id);
   28c5a:	4630      	mov	r0, r6
   28c5c:	4798      	blx	r3
		if (ret < 0) {
   28c5e:	1e04      	subs	r4, r0, #0
   28c60:	daf7      	bge.n	28c52 <lwm2m_create_obj_inst+0xee>
			LOG_ERR("Error in user obj create %u/%u: %d",
   28c62:	4b0e      	ldr	r3, [pc, #56]	; (28c9c <lwm2m_create_obj_inst+0x138>)
   28c64:	681b      	ldr	r3, [r3, #0]
   28c66:	075b      	lsls	r3, r3, #29
   28c68:	d012      	beq.n	28c90 <lwm2m_create_obj_inst+0x12c>
   28c6a:	2301      	movs	r3, #1
   28c6c:	f04f 0200 	mov.w	r2, #0
   28c70:	490b      	ldr	r1, [pc, #44]	; (28ca0 <lwm2m_create_obj_inst+0x13c>)
   28c72:	f363 0207 	bfi	r2, r3, #0, #8
   28c76:	4b0b      	ldr	r3, [pc, #44]	; (28ca4 <lwm2m_create_obj_inst+0x140>)
   28c78:	4810      	ldr	r0, [pc, #64]	; (28cbc <lwm2m_create_obj_inst+0x158>)
   28c7a:	1a5b      	subs	r3, r3, r1
   28c7c:	08db      	lsrs	r3, r3, #3
   28c7e:	f363 128f 	bfi	r2, r3, #6, #10
   28c82:	f8ad 2000 	strh.w	r2, [sp]
   28c86:	4623      	mov	r3, r4
   28c88:	4632      	mov	r2, r6
   28c8a:	4629      	mov	r1, r5
   28c8c:	f017 ff12 	bl	40ab4 <log_3>
			lwm2m_delete_obj_inst(obj_id, obj_inst_id);
   28c90:	4631      	mov	r1, r6
   28c92:	4628      	mov	r0, r5
   28c94:	f7ff fefc 	bl	28a90 <lwm2m_delete_obj_inst>
			return ret;
   28c98:	e7dc      	b.n	28c54 <lwm2m_create_obj_inst+0xf0>
   28c9a:	bf00      	nop
   28c9c:	20032b0c 	.word	0x20032b0c
   28ca0:	00045f08 	.word	0x00045f08
   28ca4:	00046018 	.word	0x00046018
   28ca8:	0004b183 	.word	0x0004b183
   28cac:	0004b19a 	.word	0x0004b19a
   28cb0:	0004b1b2 	.word	0x0004b1b2
   28cb4:	0004b1d9 	.word	0x0004b1d9
   28cb8:	2002247c 	.word	0x2002247c
   28cbc:	0004b1fd 	.word	0x0004b1fd

00028cc0 <lwm2m_get_message>:
{
   28cc0:	b530      	push	{r4, r5, lr}
	for (i = 0; i < CONFIG_LWM2M_ENGINE_MAX_MESSAGES; i++) {
   28cc2:	2200      	movs	r2, #0
   28cc4:	f44f 74c4 	mov.w	r4, #392	; 0x188
		if (!messages[i].ctx) {
   28cc8:	4b06      	ldr	r3, [pc, #24]	; (28ce4 <lwm2m_get_message+0x24>)
   28cca:	fb04 f102 	mul.w	r1, r4, r2
   28cce:	58cd      	ldr	r5, [r1, r3]
   28cd0:	b915      	cbnz	r5, 28cd8 <lwm2m_get_message+0x18>
			messages[i].ctx = client_ctx;
   28cd2:	5058      	str	r0, [r3, r1]
			return &messages[i];
   28cd4:	1858      	adds	r0, r3, r1
}
   28cd6:	bd30      	pop	{r4, r5, pc}
	for (i = 0; i < CONFIG_LWM2M_ENGINE_MAX_MESSAGES; i++) {
   28cd8:	3201      	adds	r2, #1
   28cda:	2a0a      	cmp	r2, #10
   28cdc:	d1f5      	bne.n	28cca <lwm2m_get_message+0xa>
	return NULL;
   28cde:	2000      	movs	r0, #0
   28ce0:	e7f9      	b.n	28cd6 <lwm2m_get_message+0x16>
   28ce2:	bf00      	nop
   28ce4:	2002254c 	.word	0x2002254c

00028ce8 <retransmit_request>:
{
   28ce8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	pending = coap_pending_next_to_expire(client_ctx->pendings,
   28cea:	2105      	movs	r1, #5
{
   28cec:	4605      	mov	r5, r0
	pending = coap_pending_next_to_expire(client_ctx->pendings,
   28cee:	38f0      	subs	r0, #240	; 0xf0
   28cf0:	f019 fd3c 	bl	4276c <coap_pending_next_to_expire>
	if (!pending) {
   28cf4:	4606      	mov	r6, r0
   28cf6:	2800      	cmp	r0, #0
   28cf8:	d067      	beq.n	28dca <retransmit_request+0xe2>
	msg = find_msg(pending, NULL);
   28cfa:	2100      	movs	r1, #0
   28cfc:	f7ff f89c 	bl	27e38 <find_msg>
	if (!msg) {
   28d00:	4604      	mov	r4, r0
   28d02:	b998      	cbnz	r0, 28d2c <retransmit_request+0x44>
		LOG_ERR("pending has no valid LwM2M message!");
   28d04:	4b31      	ldr	r3, [pc, #196]	; (28dcc <retransmit_request+0xe4>)
   28d06:	681b      	ldr	r3, [r3, #0]
   28d08:	075a      	lsls	r2, r3, #29
   28d0a:	d05e      	beq.n	28dca <retransmit_request+0xe2>
   28d0c:	2301      	movs	r3, #1
   28d0e:	f04f 0100 	mov.w	r1, #0
   28d12:	4a2f      	ldr	r2, [pc, #188]	; (28dd0 <retransmit_request+0xe8>)
   28d14:	f363 0107 	bfi	r1, r3, #0, #8
   28d18:	4b2e      	ldr	r3, [pc, #184]	; (28dd4 <retransmit_request+0xec>)
   28d1a:	482f      	ldr	r0, [pc, #188]	; (28dd8 <retransmit_request+0xf0>)
   28d1c:	1a9b      	subs	r3, r3, r2
   28d1e:	08db      	lsrs	r3, r3, #3
   28d20:	f363 118f 	bfi	r1, r3, #6, #10
}
   28d24:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		LOG_ERR("pending has no valid LwM2M message!");
   28d28:	f017 be8b 	b.w	40a42 <log_0>
	if (!coap_pending_cycle(pending)) {
   28d2c:	4630      	mov	r0, r6
   28d2e:	f7fc f959 	bl	24fe4 <coap_pending_cycle>
   28d32:	b950      	cbnz	r0, 28d4a <retransmit_request+0x62>
		if (msg->message_timeout_cb) {
   28d34:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
   28d38:	b10b      	cbz	r3, 28d3e <retransmit_request+0x56>
			msg->message_timeout_cb(msg);
   28d3a:	4620      	mov	r0, r4
   28d3c:	4798      	blx	r3
		lwm2m_reset_message(msg, true);
   28d3e:	4620      	mov	r0, r4
}
   28d40:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		lwm2m_reset_message(msg, true);
   28d44:	2101      	movs	r1, #1
   28d46:	f01a b927 	b.w	42f98 <lwm2m_reset_message>
	LOG_INF("Resending message: %p", msg);
   28d4a:	4f20      	ldr	r7, [pc, #128]	; (28dcc <retransmit_request+0xe4>)
   28d4c:	683b      	ldr	r3, [r7, #0]
   28d4e:	f003 0307 	and.w	r3, r3, #7
   28d52:	2b02      	cmp	r3, #2
   28d54:	d90e      	bls.n	28d74 <retransmit_request+0x8c>
   28d56:	2303      	movs	r3, #3
   28d58:	f04f 0200 	mov.w	r2, #0
   28d5c:	491c      	ldr	r1, [pc, #112]	; (28dd0 <retransmit_request+0xe8>)
   28d5e:	f363 0207 	bfi	r2, r3, #0, #8
   28d62:	4b1c      	ldr	r3, [pc, #112]	; (28dd4 <retransmit_request+0xec>)
   28d64:	481d      	ldr	r0, [pc, #116]	; (28ddc <retransmit_request+0xf4>)
   28d66:	1a5b      	subs	r3, r3, r1
   28d68:	08db      	lsrs	r3, r3, #3
   28d6a:	f363 128f 	bfi	r2, r3, #6, #10
   28d6e:	4621      	mov	r1, r4
   28d70:	f017 fe74 	bl	40a5c <log_1>
	msg->send_attempts++;
   28d74:	f894 3186 	ldrb.w	r3, [r4, #390]	; 0x186
	if (send(msg->ctx->sock_fd, msg->cpkt.data, msg->cpkt.offset, 0) < 0) {
   28d78:	8e22      	ldrh	r2, [r4, #48]	; 0x30
	msg->send_attempts++;
   28d7a:	3301      	adds	r3, #1
   28d7c:	f884 3186 	strb.w	r3, [r4, #390]	; 0x186
	if (send(msg->ctx->sock_fd, msg->cpkt.data, msg->cpkt.offset, 0) < 0) {
   28d80:	6823      	ldr	r3, [r4, #0]
   28d82:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
   28d84:	f8d3 012c 	ldr.w	r0, [r3, #300]	; 0x12c
   28d88:	f7ff fb70 	bl	2846c <send.constprop.30>
   28d8c:	2800      	cmp	r0, #0
   28d8e:	da15      	bge.n	28dbc <retransmit_request+0xd4>
		LOG_ERR("Error sending lwm2m message: %d", -errno);
   28d90:	683b      	ldr	r3, [r7, #0]
   28d92:	075b      	lsls	r3, r3, #29
   28d94:	d012      	beq.n	28dbc <retransmit_request+0xd4>
   28d96:	2301      	movs	r3, #1
   28d98:	f04f 0400 	mov.w	r4, #0
   28d9c:	4a0c      	ldr	r2, [pc, #48]	; (28dd0 <retransmit_request+0xe8>)
   28d9e:	f363 0407 	bfi	r4, r3, #0, #8
   28da2:	4b0c      	ldr	r3, [pc, #48]	; (28dd4 <retransmit_request+0xec>)
   28da4:	1a9b      	subs	r3, r3, r2
   28da6:	08db      	lsrs	r3, r3, #3
   28da8:	f363 148f 	bfi	r4, r3, #6, #10
   28dac:	f019 ff51 	bl	42c52 <__errno>
   28db0:	6801      	ldr	r1, [r0, #0]
   28db2:	4622      	mov	r2, r4
   28db4:	4249      	negs	r1, r1
   28db6:	480a      	ldr	r0, [pc, #40]	; (28de0 <retransmit_request+0xf8>)
   28db8:	f017 fe50 	bl	40a5c <log_1>
	return k_delayed_work_submit_to_queue(&k_sys_work_q, work, delay);
   28dbc:	68b2      	ldr	r2, [r6, #8]
   28dbe:	4629      	mov	r1, r5
}
   28dc0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   28dc4:	4807      	ldr	r0, [pc, #28]	; (28de4 <retransmit_request+0xfc>)
   28dc6:	f014 be2f 	b.w	3da28 <k_delayed_work_submit_to_queue>
   28dca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   28dcc:	20032b0c 	.word	0x20032b0c
   28dd0:	00045f08 	.word	0x00045f08
   28dd4:	00046018 	.word	0x00046018
   28dd8:	0004b68d 	.word	0x0004b68d
   28ddc:	0004b6b1 	.word	0x0004b6b1
   28de0:	0004b6c7 	.word	0x0004b6c7
   28de4:	20029754 	.word	0x20029754

00028de8 <lwm2m_init_message>:
{
   28de8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	if (!msg || !msg->ctx) {
   28dec:	4604      	mov	r4, r0
{
   28dee:	b086      	sub	sp, #24
	if (!msg || !msg->ctx) {
   28df0:	b108      	cbz	r0, 28df6 <lwm2m_init_message+0xe>
   28df2:	6803      	ldr	r3, [r0, #0]
   28df4:	b9a3      	cbnz	r3, 28e20 <lwm2m_init_message+0x38>
		LOG_ERR("LwM2M message is invalid.");
   28df6:	4b5f      	ldr	r3, [pc, #380]	; (28f74 <lwm2m_init_message+0x18c>)
   28df8:	681b      	ldr	r3, [r3, #0]
   28dfa:	075c      	lsls	r4, r3, #29
   28dfc:	d00d      	beq.n	28e1a <lwm2m_init_message+0x32>
   28dfe:	2301      	movs	r3, #1
   28e00:	f04f 0100 	mov.w	r1, #0
   28e04:	4a5c      	ldr	r2, [pc, #368]	; (28f78 <lwm2m_init_message+0x190>)
   28e06:	f363 0107 	bfi	r1, r3, #0, #8
   28e0a:	4b5c      	ldr	r3, [pc, #368]	; (28f7c <lwm2m_init_message+0x194>)
   28e0c:	485c      	ldr	r0, [pc, #368]	; (28f80 <lwm2m_init_message+0x198>)
   28e0e:	1a9b      	subs	r3, r3, r2
   28e10:	08db      	lsrs	r3, r3, #3
   28e12:	f363 118f 	bfi	r1, r3, #6, #10
   28e16:	f017 fe14 	bl	40a42 <log_0>
		return -EINVAL;
   28e1a:	f06f 0515 	mvn.w	r5, #21
   28e1e:	e041      	b.n	28ea4 <lwm2m_init_message+0xbc>
	if (msg->tkl == 0U) {
   28e20:	f890 6184 	ldrb.w	r6, [r0, #388]	; 0x184
   28e24:	bb96      	cbnz	r6, 28e8c <lwm2m_init_message+0xa4>
		token = coap_next_token();
   28e26:	f7fc f8d1 	bl	24fcc <coap_next_token>
   28e2a:	4605      	mov	r5, r0
			     (msg->mid > 0 ? msg->mid : coap_next_id()));
   28e2c:	f8b4 0180 	ldrh.w	r0, [r4, #384]	; 0x180
	r = coap_packet_init(&msg->cpkt, msg->msg_data, sizeof(msg->msg_data),
   28e30:	f104 072c 	add.w	r7, r4, #44	; 0x2c
   28e34:	f104 083c 	add.w	r8, r4, #60	; 0x3c
   28e38:	f894 9182 	ldrb.w	r9, [r4, #386]	; 0x182
   28e3c:	f894 a183 	ldrb.w	sl, [r4, #387]	; 0x183
   28e40:	b908      	cbnz	r0, 28e46 <lwm2m_init_message+0x5e>
			     (msg->mid > 0 ? msg->mid : coap_next_id()));
   28e42:	f7fc f8f5 	bl	25030 <coap_next_id>
	r = coap_packet_init(&msg->cpkt, msg->msg_data, sizeof(msg->msg_data),
   28e46:	e9cd a003 	strd	sl, r0, [sp, #12]
   28e4a:	e9cd 6501 	strd	r6, r5, [sp, #4]
   28e4e:	f8cd 9000 	str.w	r9, [sp]
   28e52:	2301      	movs	r3, #1
   28e54:	f44f 7298 	mov.w	r2, #304	; 0x130
   28e58:	4641      	mov	r1, r8
   28e5a:	4638      	mov	r0, r7
   28e5c:	f019 f981 	bl	42162 <coap_packet_init>
	if (r < 0) {
   28e60:	1e05      	subs	r5, r0, #0
   28e62:	da1b      	bge.n	28e9c <lwm2m_init_message+0xb4>
		LOG_ERR("coap packet init error (err:%d)", r);
   28e64:	4b43      	ldr	r3, [pc, #268]	; (28f74 <lwm2m_init_message+0x18c>)
   28e66:	681b      	ldr	r3, [r3, #0]
   28e68:	0758      	lsls	r0, r3, #29
   28e6a:	d02d      	beq.n	28ec8 <lwm2m_init_message+0xe0>
   28e6c:	2301      	movs	r3, #1
   28e6e:	f04f 0200 	mov.w	r2, #0
   28e72:	4941      	ldr	r1, [pc, #260]	; (28f78 <lwm2m_init_message+0x190>)
   28e74:	f363 0207 	bfi	r2, r3, #0, #8
   28e78:	4b40      	ldr	r3, [pc, #256]	; (28f7c <lwm2m_init_message+0x194>)
   28e7a:	4842      	ldr	r0, [pc, #264]	; (28f84 <lwm2m_init_message+0x19c>)
   28e7c:	1a5b      	subs	r3, r3, r1
   28e7e:	4629      	mov	r1, r5
   28e80:	08db      	lsrs	r3, r3, #3
   28e82:	f363 128f 	bfi	r2, r3, #6, #10
		LOG_ERR("Unable to initialize a pending "
   28e86:	f017 fde9 	bl	40a5c <log_1>
   28e8a:	e01d      	b.n	28ec8 <lwm2m_init_message+0xe0>
	} else if (msg->token && msg->tkl != LWM2M_MSG_TOKEN_LEN_SKIP) {
   28e8c:	f8d0 5174 	ldr.w	r5, [r0, #372]	; 0x174
   28e90:	b115      	cbz	r5, 28e98 <lwm2m_init_message+0xb0>
   28e92:	2eff      	cmp	r6, #255	; 0xff
   28e94:	d1ca      	bne.n	28e2c <lwm2m_init_message+0x44>
	u8_t *token = NULL;
   28e96:	2500      	movs	r5, #0
	u8_t tokenlen = 0U;
   28e98:	462e      	mov	r6, r5
   28e9a:	e7c7      	b.n	28e2c <lwm2m_init_message+0x44>
	if (msg->type != COAP_TYPE_CON) {
   28e9c:	f894 6182 	ldrb.w	r6, [r4, #386]	; 0x182
   28ea0:	b126      	cbz	r6, 28eac <lwm2m_init_message+0xc4>
		return 0;
   28ea2:	2500      	movs	r5, #0
}
   28ea4:	4628      	mov	r0, r5
   28ea6:	b006      	add	sp, #24
   28ea8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
				msg->ctx->pendings,
   28eac:	6820      	ldr	r0, [r4, #0]
	msg->pending = coap_pending_next_unused(
   28eae:	2105      	movs	r1, #5
   28eb0:	3008      	adds	r0, #8
   28eb2:	f019 fc34 	bl	4271e <coap_pending_next_unused>
   28eb6:	f8c4 016c 	str.w	r0, [r4, #364]	; 0x16c
	if (!msg->pending) {
   28eba:	b9c8      	cbnz	r0, 28ef0 <lwm2m_init_message+0x108>
		LOG_ERR("Unable to find a free pending to track "
   28ebc:	4b2d      	ldr	r3, [pc, #180]	; (28f74 <lwm2m_init_message+0x18c>)
   28ebe:	681b      	ldr	r3, [r3, #0]
   28ec0:	0759      	lsls	r1, r3, #29
   28ec2:	d106      	bne.n	28ed2 <lwm2m_init_message+0xea>
		r = -ENOMEM;
   28ec4:	f06f 050b 	mvn.w	r5, #11
	lwm2m_reset_message(msg, true);
   28ec8:	2101      	movs	r1, #1
   28eca:	4620      	mov	r0, r4
   28ecc:	f01a f864 	bl	42f98 <lwm2m_reset_message>
	return r;
   28ed0:	e7e8      	b.n	28ea4 <lwm2m_init_message+0xbc>
		LOG_ERR("Unable to find a free pending to track "
   28ed2:	2301      	movs	r3, #1
   28ed4:	f04f 0100 	mov.w	r1, #0
   28ed8:	4a27      	ldr	r2, [pc, #156]	; (28f78 <lwm2m_init_message+0x190>)
   28eda:	f363 0107 	bfi	r1, r3, #0, #8
   28ede:	4b27      	ldr	r3, [pc, #156]	; (28f7c <lwm2m_init_message+0x194>)
   28ee0:	4829      	ldr	r0, [pc, #164]	; (28f88 <lwm2m_init_message+0x1a0>)
   28ee2:	1a9b      	subs	r3, r3, r2
   28ee4:	08db      	lsrs	r3, r3, #3
   28ee6:	f363 118f 	bfi	r1, r3, #6, #10
   28eea:	f017 fdaa 	bl	40a42 <log_0>
   28eee:	e7e9      	b.n	28ec4 <lwm2m_init_message+0xdc>
	r = coap_pending_init(msg->pending, &msg->cpkt, &msg->ctx->remote_addr);
   28ef0:	6822      	ldr	r2, [r4, #0]
   28ef2:	4639      	mov	r1, r7
   28ef4:	f019 fbfd 	bl	426f2 <coap_pending_init>
	if (r < 0) {
   28ef8:	1e05      	subs	r5, r0, #0
   28efa:	da11      	bge.n	28f20 <lwm2m_init_message+0x138>
		LOG_ERR("Unable to initialize a pending "
   28efc:	4b1d      	ldr	r3, [pc, #116]	; (28f74 <lwm2m_init_message+0x18c>)
   28efe:	681b      	ldr	r3, [r3, #0]
   28f00:	075a      	lsls	r2, r3, #29
   28f02:	d0e1      	beq.n	28ec8 <lwm2m_init_message+0xe0>
   28f04:	2301      	movs	r3, #1
   28f06:	f04f 0200 	mov.w	r2, #0
   28f0a:	491b      	ldr	r1, [pc, #108]	; (28f78 <lwm2m_init_message+0x190>)
   28f0c:	f363 0207 	bfi	r2, r3, #0, #8
   28f10:	4b1a      	ldr	r3, [pc, #104]	; (28f7c <lwm2m_init_message+0x194>)
   28f12:	481e      	ldr	r0, [pc, #120]	; (28f8c <lwm2m_init_message+0x1a4>)
   28f14:	1a5b      	subs	r3, r3, r1
   28f16:	08db      	lsrs	r3, r3, #3
   28f18:	f363 128f 	bfi	r2, r3, #6, #10
   28f1c:	4629      	mov	r1, r5
   28f1e:	e7b2      	b.n	28e86 <lwm2m_init_message+0x9e>
	if (msg->reply_cb) {
   28f20:	f8d4 3178 	ldr.w	r3, [r4, #376]	; 0x178
   28f24:	2b00      	cmp	r3, #0
   28f26:	d0bc      	beq.n	28ea2 <lwm2m_init_message+0xba>
				msg->ctx->replies,
   28f28:	6820      	ldr	r0, [r4, #0]
		msg->reply = coap_reply_next_unused(
   28f2a:	2105      	movs	r1, #5
   28f2c:	3080      	adds	r0, #128	; 0x80
   28f2e:	f019 fc01 	bl	42734 <coap_reply_next_unused>
   28f32:	f8c4 0170 	str.w	r0, [r4, #368]	; 0x170
		if (!msg->reply) {
   28f36:	b980      	cbnz	r0, 28f5a <lwm2m_init_message+0x172>
			LOG_ERR("No resources for waiting for replies.");
   28f38:	4b0e      	ldr	r3, [pc, #56]	; (28f74 <lwm2m_init_message+0x18c>)
   28f3a:	681b      	ldr	r3, [r3, #0]
   28f3c:	075b      	lsls	r3, r3, #29
   28f3e:	d0c1      	beq.n	28ec4 <lwm2m_init_message+0xdc>
   28f40:	2301      	movs	r3, #1
   28f42:	f04f 0100 	mov.w	r1, #0
   28f46:	4a0c      	ldr	r2, [pc, #48]	; (28f78 <lwm2m_init_message+0x190>)
   28f48:	f363 0107 	bfi	r1, r3, #0, #8
   28f4c:	4b0b      	ldr	r3, [pc, #44]	; (28f7c <lwm2m_init_message+0x194>)
   28f4e:	4810      	ldr	r0, [pc, #64]	; (28f90 <lwm2m_init_message+0x1a8>)
   28f50:	1a9b      	subs	r3, r3, r2
   28f52:	08db      	lsrs	r3, r3, #3
   28f54:	f363 118f 	bfi	r1, r3, #6, #10
   28f58:	e7c7      	b.n	28eea <lwm2m_init_message+0x102>
		coap_reply_clear(msg->reply);
   28f5a:	f019 fc76 	bl	4284a <coap_reply_clear>
		coap_reply_init(msg->reply, &msg->cpkt);
   28f5e:	4639      	mov	r1, r7
   28f60:	f8d4 0170 	ldr.w	r0, [r4, #368]	; 0x170
   28f64:	f019 fc55 	bl	42812 <coap_reply_init>
		msg->reply->reply = msg->reply_cb;
   28f68:	f8d4 3170 	ldr.w	r3, [r4, #368]	; 0x170
   28f6c:	f8d4 2178 	ldr.w	r2, [r4, #376]	; 0x178
   28f70:	601a      	str	r2, [r3, #0]
   28f72:	e796      	b.n	28ea2 <lwm2m_init_message+0xba>
   28f74:	20032b0c 	.word	0x20032b0c
   28f78:	00045f08 	.word	0x00045f08
   28f7c:	00046018 	.word	0x00046018
   28f80:	0004b3ee 	.word	0x0004b3ee
   28f84:	0004b408 	.word	0x0004b408
   28f88:	0004b428 	.word	0x0004b428
   28f8c:	0004b460 	.word	0x0004b460
   28f90:	0004b498 	.word	0x0004b498

00028f94 <handle_request>:
	struct block_context *block_ctx = NULL;
   28f94:	2300      	movs	r3, #0
{
   28f96:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   28f9a:	b0d1      	sub	sp, #324	; 0x144
	struct block_context *block_ctx = NULL;
   28f9c:	930d      	str	r3, [sp, #52]	; 0x34
	u16_t payload_len = 0U;
   28f9e:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
	msg->out.out_cpkt = &msg->cpkt;
   28fa2:	f101 032c 	add.w	r3, r1, #44	; 0x2c
   28fa6:	618b      	str	r3, [r1, #24]
	msg->in.reader = &plain_text_reader;
   28fa8:	4eb1      	ldr	r6, [pc, #708]	; (29270 <handle_request+0x2dc>)
	msg->out.writer = &plain_text_writer;
   28faa:	4bb2      	ldr	r3, [pc, #712]	; (29274 <handle_request+0x2e0>)
	msg->in.in_cpkt = request;
   28fac:	6088      	str	r0, [r1, #8]
	msg->out.writer = &plain_text_writer;
   28fae:	614b      	str	r3, [r1, #20]
	msg->in.reader = &plain_text_reader;
   28fb0:	604e      	str	r6, [r1, #4]
{
   28fb2:	460c      	mov	r4, r1
	code = coap_header_get_code(msg->in.in_cpkt);
   28fb4:	f019 faa0 	bl	424f8 <coap_header_get_code>
	tkl = coap_header_get_token(msg->in.in_cpkt, token);
   28fb8:	ad10      	add	r5, sp, #64	; 0x40
	code = coap_header_get_code(msg->in.in_cpkt);
   28fba:	4682      	mov	sl, r0
	tkl = coap_header_get_token(msg->in.in_cpkt, token);
   28fbc:	4629      	mov	r1, r5
   28fbe:	68a0      	ldr	r0, [r4, #8]
   28fc0:	f019 fa86 	bl	424d0 <coap_header_get_token>
	if (tkl) {
   28fc4:	46b1      	mov	r9, r6
   28fc6:	4680      	mov	r8, r0
   28fc8:	b118      	cbz	r0, 28fd2 <handle_request+0x3e>
		msg->tkl = tkl;
   28fca:	f884 0184 	strb.w	r0, [r4, #388]	; 0x184
		msg->token = token;
   28fce:	f8c4 5174 	str.w	r5, [r4, #372]	; 0x174
	r = coap_find_options(msg->in.in_cpkt, COAP_OPTION_URI_PATH, options,
   28fd2:	2304      	movs	r3, #4
   28fd4:	aa2c      	add	r2, sp, #176	; 0xb0
   28fd6:	210b      	movs	r1, #11
   28fd8:	68a0      	ldr	r0, [r4, #8]
   28fda:	f019 fa13 	bl	42404 <coap_find_options>
	if (r <= 0) {
   28fde:	1e06      	subs	r6, r0, #0
   28fe0:	f341 8029 	ble.w	2a036 <handle_request+0x10a2>
	if (r == 2 &&
   28fe4:	2e02      	cmp	r6, #2
   28fe6:	d152      	bne.n	2908e <handle_request+0xfa>
   28fe8:	f89d 20b2 	ldrb.w	r2, [sp, #178]	; 0xb2
   28fec:	2a0b      	cmp	r2, #11
   28fee:	d14e      	bne.n	2908e <handle_request+0xfa>
	     strncmp(options[0].value, ".well-known", 11) == 0) &&
   28ff0:	49a1      	ldr	r1, [pc, #644]	; (29278 <handle_request+0x2e4>)
   28ff2:	f10d 00b3 	add.w	r0, sp, #179	; 0xb3
   28ff6:	f01c f8b3 	bl	45160 <strncmp>
	    (options[0].len == 11U &&
   28ffa:	2800      	cmp	r0, #0
   28ffc:	d147      	bne.n	2908e <handle_request+0xfa>
	     strncmp(options[0].value, ".well-known", 11) == 0) &&
   28ffe:	f89d 20c2 	ldrb.w	r2, [sp, #194]	; 0xc2
   29002:	2a04      	cmp	r2, #4
   29004:	d143      	bne.n	2908e <handle_request+0xfa>
	     strncmp(options[1].value, "core", 4) == 0)) {
   29006:	499d      	ldr	r1, [pc, #628]	; (2927c <handle_request+0x2e8>)
   29008:	f10d 00c3 	add.w	r0, sp, #195	; 0xc3
   2900c:	f01c f8a8 	bl	45160 <strncmp>
	    (options[1].len == 4U &&
   29010:	2800      	cmp	r0, #0
   29012:	d13c      	bne.n	2908e <handle_request+0xfa>
		if ((code & COAP_REQUEST_MASK) != COAP_METHOD_GET) {
   29014:	f00a 0607 	and.w	r6, sl, #7
   29018:	2e01      	cmp	r6, #1
   2901a:	f041 800c 	bne.w	2a036 <handle_request+0x10a2>
	r = coap_find_options(msg->in.in_cpkt, COAP_OPTION_CONTENT_FORMAT,
   2901e:	2301      	movs	r3, #1
   29020:	aa2c      	add	r2, sp, #176	; 0xb0
   29022:	210c      	movs	r1, #12
   29024:	68a0      	ldr	r0, [r4, #8]
   29026:	f019 f9ed 	bl	42404 <coap_find_options>
	if (r > 0) {
   2902a:	2800      	cmp	r0, #0
   2902c:	f340 8081 	ble.w	29132 <handle_request+0x19e>
		format = coap_option_value_to_int(&options[0]);
   29030:	a82c      	add	r0, sp, #176	; 0xb0
   29032:	f019 f967 	bl	42304 <coap_option_value_to_int>
	switch (format) {
   29036:	f240 6305 	movw	r3, #1541	; 0x605
		format = coap_option_value_to_int(&options[0]);
   2903a:	b287      	uxth	r7, r0
	switch (format) {
   2903c:	429f      	cmp	r7, r3
   2903e:	d003      	beq.n	29048 <handle_request+0xb4>
   29040:	d855      	bhi.n	290ee <handle_request+0x15a>
   29042:	b10f      	cbz	r7, 29048 <handle_request+0xb4>
   29044:	2f2a      	cmp	r7, #42	; 0x2a
   29046:	d15a      	bne.n	290fe <handle_request+0x16a>
		in->reader = &plain_text_reader;
   29048:	f8c4 9004 	str.w	r9, [r4, #4]
	r = coap_find_options(msg->in.in_cpkt, COAP_OPTION_ACCEPT, options, 1);
   2904c:	2301      	movs	r3, #1
   2904e:	aa2c      	add	r2, sp, #176	; 0xb0
   29050:	2111      	movs	r1, #17
   29052:	68a0      	ldr	r0, [r4, #8]
   29054:	f019 f9d6 	bl	42404 <coap_find_options>
	if (r > 0) {
   29058:	2800      	cmp	r0, #0
   2905a:	dd6d      	ble.n	29138 <handle_request+0x1a4>
		accept = coap_option_value_to_int(&options[0]);
   2905c:	a82c      	add	r0, sp, #176	; 0xb0
   2905e:	f019 f951 	bl	42304 <coap_option_value_to_int>
   29062:	fa1f f980 	uxth.w	r9, r0
	r = select_writer(&msg->out, accept);
   29066:	4649      	mov	r1, r9
   29068:	f104 0014 	add.w	r0, r4, #20
   2906c:	f7fe ffe0 	bl	28030 <select_writer.isra.7>
	if (r < 0) {
   29070:	f1b0 0b00 	subs.w	fp, r0, #0
   29074:	f2c0 8164 	blt.w	29340 <handle_request+0x3ac>
	if (!well_known) {
   29078:	2e00      	cmp	r6, #0
   2907a:	d160      	bne.n	2913e <handle_request+0x1aa>
		obj = get_engine_obj(msg->path.obj_id);
   2907c:	8c20      	ldrh	r0, [r4, #32]
   2907e:	f7fe fe8d 	bl	27d9c <get_engine_obj>
		if (!obj) {
   29082:	9004      	str	r0, [sp, #16]
   29084:	2800      	cmp	r0, #0
   29086:	d15c      	bne.n	29142 <handle_request+0x1ae>
			r = -ENOENT;
   29088:	f06f 0b01 	mvn.w	fp, #1
   2908c:	e158      	b.n	29340 <handle_request+0x3ac>
	for (int i = 0; i < options_count; i++) {
   2908e:	2700      	movs	r7, #0
		r = coap_options_to_path(options, r, &msg->path);
   29090:	f104 0320 	add.w	r3, r4, #32
	u16_t len, *id[4] = { &path->obj_id, &path->obj_inst_id,
   29094:	933c      	str	r3, [sp, #240]	; 0xf0
   29096:	f104 0322 	add.w	r3, r4, #34	; 0x22
   2909a:	933d      	str	r3, [sp, #244]	; 0xf4
			      &path->res_id, &path->res_inst_id };
   2909c:	f104 0324 	add.w	r3, r4, #36	; 0x24
	u16_t len, *id[4] = { &path->obj_id, &path->obj_inst_id,
   290a0:	933e      	str	r3, [sp, #248]	; 0xf8
			      &path->res_id, &path->res_inst_id };
   290a2:	f104 0326 	add.w	r3, r4, #38	; 0x26
	u16_t len, *id[4] = { &path->obj_id, &path->obj_inst_id,
   290a6:	933f      	str	r3, [sp, #252]	; 0xfc
	path->level = options_count;
   290a8:	f884 6028 	strb.w	r6, [r4, #40]	; 0x28
	for (int i = 0; i < options_count; i++) {
   290ac:	ad2c      	add	r5, sp, #176	; 0xb0
   290ae:	f10d 0bf0 	add.w	fp, sp, #240	; 0xf0
		*id[i] = atou16(opt[i].value, opt[i].len, &len);
   290b2:	f85b 3b04 	ldr.w	r3, [fp], #4
   290b6:	aa23      	add	r2, sp, #140	; 0x8c
   290b8:	78a9      	ldrb	r1, [r5, #2]
   290ba:	1ce8      	adds	r0, r5, #3
   290bc:	9304      	str	r3, [sp, #16]
   290be:	f7fe fea1 	bl	27e04 <atou16>
   290c2:	9b04      	ldr	r3, [sp, #16]
   290c4:	8018      	strh	r0, [r3, #0]
		if (len == 0U || opt[i].len != len) {
   290c6:	f8bd 308c 	ldrh.w	r3, [sp, #140]	; 0x8c
   290ca:	b113      	cbz	r3, 290d2 <handle_request+0x13e>
   290cc:	78aa      	ldrb	r2, [r5, #2]
   290ce:	429a      	cmp	r2, r3
   290d0:	d007      	beq.n	290e2 <handle_request+0x14e>
			path->level = i;
   290d2:	f884 7028 	strb.w	r7, [r4, #40]	; 0x28
	return options_count == path->level ? 0 : -EINVAL;
   290d6:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
   290da:	429e      	cmp	r6, r3
   290dc:	d1d4      	bne.n	29088 <handle_request+0xf4>
	bool well_known = false;
   290de:	2600      	movs	r6, #0
   290e0:	e79d      	b.n	2901e <handle_request+0x8a>
	for (int i = 0; i < options_count; i++) {
   290e2:	3701      	adds	r7, #1
   290e4:	42be      	cmp	r6, r7
   290e6:	f105 0510 	add.w	r5, r5, #16
   290ea:	d1e2      	bne.n	290b2 <handle_request+0x11e>
   290ec:	e7f3      	b.n	290d6 <handle_request+0x142>
	switch (format) {
   290ee:	f240 6306 	movw	r3, #1542	; 0x606
   290f2:	429f      	cmp	r7, r3
   290f4:	d01a      	beq.n	2912c <handle_request+0x198>
   290f6:	f642 5316 	movw	r3, #11542	; 0x2d16
   290fa:	429f      	cmp	r7, r3
   290fc:	d016      	beq.n	2912c <handle_request+0x198>
		LOG_WRN("Unknown content type %u", format);
   290fe:	4b60      	ldr	r3, [pc, #384]	; (29280 <handle_request+0x2ec>)
   29100:	681b      	ldr	r3, [r3, #0]
   29102:	f013 0f06 	tst.w	r3, #6
   29106:	d00e      	beq.n	29126 <handle_request+0x192>
   29108:	2302      	movs	r3, #2
   2910a:	f04f 0200 	mov.w	r2, #0
   2910e:	495d      	ldr	r1, [pc, #372]	; (29284 <handle_request+0x2f0>)
   29110:	f363 0207 	bfi	r2, r3, #0, #8
   29114:	4b5c      	ldr	r3, [pc, #368]	; (29288 <handle_request+0x2f4>)
   29116:	1a5b      	subs	r3, r3, r1
   29118:	08db      	lsrs	r3, r3, #3
   2911a:	b281      	uxth	r1, r0
   2911c:	485b      	ldr	r0, [pc, #364]	; (2928c <handle_request+0x2f8>)
   2911e:	f363 128f 	bfi	r2, r3, #6, #10
		LOG_ERR("Unsupported format: %u", format);
   29122:	f017 fc9b 	bl	40a5c <log_1>
		return -ENOMSG;
   29126:	f06f 0b22 	mvn.w	fp, #34	; 0x22
   2912a:	e109      	b.n	29340 <handle_request+0x3ac>
		in->reader = &oma_tlv_reader;
   2912c:	4b58      	ldr	r3, [pc, #352]	; (29290 <handle_request+0x2fc>)
   2912e:	6063      	str	r3, [r4, #4]
		if (r < 0) {
   29130:	e78c      	b.n	2904c <handle_request+0xb8>
	u16_t format = LWM2M_FORMAT_NONE, accept;
   29132:	f64f 77ff 	movw	r7, #65535	; 0xffff
   29136:	e789      	b.n	2904c <handle_request+0xb8>
		accept = LWM2M_FORMAT_OMA_TLV;
   29138:	f642 5916 	movw	r9, #11542	; 0x2d16
   2913c:	e793      	b.n	29066 <handle_request+0xd2>
	struct lwm2m_engine_obj *obj = NULL;
   2913e:	2300      	movs	r3, #0
   29140:	9304      	str	r3, [sp, #16]
	switch (code & COAP_REQUEST_MASK) {
   29142:	f00a 0a07 	and.w	sl, sl, #7
   29146:	f10a 3aff 	add.w	sl, sl, #4294967295
   2914a:	f1ba 0f03 	cmp.w	sl, #3
   2914e:	d874      	bhi.n	2923a <handle_request+0x2a6>
   29150:	e8df f00a 	tbb	[pc, sl]
   29154:	887e6902 	.word	0x887e6902
		if (well_known || accept == LWM2M_FORMAT_APP_LINK_FORMAT) {
   29158:	2e00      	cmp	r6, #0
   2915a:	d160      	bne.n	2921e <handle_request+0x28a>
			msg->operation = LWM2M_OP_DISCOVER;
   2915c:	f1b9 0f28 	cmp.w	r9, #40	; 0x28
   29160:	bf14      	ite	ne
   29162:	2300      	movne	r3, #0
   29164:	2308      	moveq	r3, #8
   29166:	f884 3185 	strb.w	r3, [r4, #389]	; 0x185
		observe = get_option_int(msg->in.in_cpkt, COAP_OPTION_OBSERVE);
   2916a:	2106      	movs	r1, #6
   2916c:	68a0      	ldr	r0, [r4, #8]
   2916e:	f019 fec6 	bl	42efe <get_option_int>
		msg->code = COAP_RESPONSE_CODE_CONTENT;
   29172:	2345      	movs	r3, #69	; 0x45
		observe = get_option_int(msg->in.in_cpkt, COAP_OPTION_OBSERVE);
   29174:	4605      	mov	r5, r0
		msg->code = COAP_RESPONSE_CODE_CONTENT;
   29176:	f884 3183 	strb.w	r3, [r4, #387]	; 0x183
	msg->in.offset = msg->in.in_cpkt->hdr_len + msg->in.in_cpkt->opt_len;
   2917a:	68a0      	ldr	r0, [r4, #8]
	coap_packet_get_payload(msg->in.in_cpkt, &payload_len);
   2917c:	f10d 0132 	add.w	r1, sp, #50	; 0x32
	msg->in.offset = msg->in.in_cpkt->hdr_len + msg->in.in_cpkt->opt_len;
   29180:	8942      	ldrh	r2, [r0, #10]
   29182:	7a03      	ldrb	r3, [r0, #8]
   29184:	4413      	add	r3, r2
   29186:	81a3      	strh	r3, [r4, #12]
	coap_packet_get_payload(msg->in.in_cpkt, &payload_len);
   29188:	f019 f9eb 	bl	42562 <coap_packet_get_payload>
	r = get_option_int(msg->in.in_cpkt, COAP_OPTION_BLOCK1);
   2918c:	211b      	movs	r1, #27
   2918e:	68a0      	ldr	r0, [r4, #8]
   29190:	f019 feb5 	bl	42efe <get_option_int>
	if (r > 0) {
   29194:	2800      	cmp	r0, #0
   29196:	f340 811a 	ble.w	293ce <handle_request+0x43a>
		last_block = !GET_MORE(r);
   2919a:	f000 0308 	and.w	r3, r0, #8
   2919e:	2b00      	cmp	r3, #0
   291a0:	9305      	str	r3, [sp, #20]
   291a2:	bf0c      	ite	eq
   291a4:	2301      	moveq	r3, #1
   291a6:	2300      	movne	r3, #0
   291a8:	9308      	str	r3, [sp, #32]
		if (!last_block &&
   291aa:	d00a      	beq.n	291c2 <handle_request+0x22e>
 * @return The size in bytes that the block_size represents
 */
static inline u16_t coap_block_size_to_bytes(
	enum coap_block_size block_size)
{
	return (1 << (block_size + 4));
   291ac:	f000 0307 	and.w	r3, r0, #7
   291b0:	1d1a      	adds	r2, r3, #4
   291b2:	2301      	movs	r3, #1
   291b4:	4093      	lsls	r3, r2
   291b6:	f8bd 2032 	ldrh.w	r2, [sp, #50]	; 0x32
   291ba:	b29b      	uxth	r3, r3
   291bc:	429a      	cmp	r2, r3
   291be:	f0c0 8736 	bcc.w	2a02e <handle_request+0x109a>
		if (GET_BLOCK_NUM(r) == 0) {
   291c2:	ea5f 1a20 	movs.w	sl, r0, asr #4
   291c6:	f040 80b3 	bne.w	29330 <handle_request+0x39c>
	*ctx = NULL;
   291ca:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
	timestamp = k_uptime_get();
   291ce:	f019 fe94 	bl	42efa <k_uptime_get>
   291d2:	460b      	mov	r3, r1
   291d4:	9009      	str	r0, [sp, #36]	; 0x24
   291d6:	482f      	ldr	r0, [pc, #188]	; (29294 <handle_request+0x300>)
		if (block1_contexts[i].tkl == 0U) {
   291d8:	f890 2020 	ldrb.w	r2, [r0, #32]
   291dc:	2a00      	cmp	r2, #0
   291de:	d15d      	bne.n	2929c <handle_request+0x308>
			*ctx = &block1_contexts[i];
   291e0:	2028      	movs	r0, #40	; 0x28
   291e2:	4a2c      	ldr	r2, [pc, #176]	; (29294 <handle_request+0x300>)
   291e4:	fb00 200a 	mla	r0, r0, sl, r2
   291e8:	900d      	str	r0, [sp, #52]	; 0x34
	if (*ctx == NULL) {
   291ea:	f8dd a034 	ldr.w	sl, [sp, #52]	; 0x34
   291ee:	f1ba 0f00 	cmp.w	sl, #0
   291f2:	d16f      	bne.n	292d4 <handle_request+0x340>
		LOG_ERR("Cannot find free block context");
   291f4:	4b22      	ldr	r3, [pc, #136]	; (29280 <handle_request+0x2ec>)
   291f6:	681b      	ldr	r3, [r3, #0]
   291f8:	0759      	lsls	r1, r3, #29
   291fa:	d00d      	beq.n	29218 <handle_request+0x284>
   291fc:	2301      	movs	r3, #1
   291fe:	f04f 0100 	mov.w	r1, #0
   29202:	4a20      	ldr	r2, [pc, #128]	; (29284 <handle_request+0x2f0>)
   29204:	f363 0107 	bfi	r1, r3, #0, #8
   29208:	4b1f      	ldr	r3, [pc, #124]	; (29288 <handle_request+0x2f4>)
   2920a:	4823      	ldr	r0, [pc, #140]	; (29298 <handle_request+0x304>)
   2920c:	1a9b      	subs	r3, r3, r2
   2920e:	08db      	lsrs	r3, r3, #3
   29210:	f363 118f 	bfi	r1, r3, #6, #10
   29214:	f017 fc15 	bl	40a42 <log_0>
		return -ENOMEM;
   29218:	f06f 0b0b 	mvn.w	fp, #11
   2921c:	e090      	b.n	29340 <handle_request+0x3ac>
			msg->operation = LWM2M_OP_DISCOVER;
   2921e:	2308      	movs	r3, #8
			accept = LWM2M_FORMAT_APP_LINK_FORMAT;
   29220:	f04f 0928 	mov.w	r9, #40	; 0x28
   29224:	e79f      	b.n	29166 <handle_request+0x1d2>
		if (msg->path.level == 1U) {
   29226:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
   2922a:	2b01      	cmp	r3, #1
   2922c:	d108      	bne.n	29240 <handle_request+0x2ac>
			msg->operation = LWM2M_OP_CREATE;
   2922e:	2302      	movs	r3, #2
   29230:	f884 3185 	strb.w	r3, [r4, #389]	; 0x185
			msg->code = COAP_RESPONSE_CODE_CREATED;
   29234:	2341      	movs	r3, #65	; 0x41
		msg->code = COAP_RESPONSE_CODE_DELETED;
   29236:	f884 3183 	strb.w	r3, [r4, #387]	; 0x183
	int observe = -1; /* default to -1, 0 = ENABLE, 1 = DISABLE */
   2923a:	f04f 35ff 	mov.w	r5, #4294967295
   2923e:	e79c      	b.n	2917a <handle_request+0x1e6>
		} else if (msg->path.level == 2U) {
   29240:	2b02      	cmp	r3, #2
			msg->operation = LWM2M_OP_WRITE;
   29242:	bf0c      	ite	eq
   29244:	2201      	moveq	r2, #1
			msg->operation = LWM2M_OP_EXECUTE;
   29246:	2204      	movne	r2, #4
   29248:	2344      	movs	r3, #68	; 0x44
   2924a:	f884 2185 	strb.w	r2, [r4, #389]	; 0x185
			msg->code = COAP_RESPONSE_CODE_CHANGED;
   2924e:	e7f2      	b.n	29236 <handle_request+0x2a2>
			msg->operation = LWM2M_OP_WRITE_ATTR;
   29250:	f64f 73ff 	movw	r3, #65535	; 0xffff
   29254:	429f      	cmp	r7, r3
   29256:	bf14      	ite	ne
   29258:	2301      	movne	r3, #1
   2925a:	2309      	moveq	r3, #9
   2925c:	f884 3185 	strb.w	r3, [r4, #389]	; 0x185
		msg->code = COAP_RESPONSE_CODE_CHANGED;
   29260:	2344      	movs	r3, #68	; 0x44
   29262:	e7e8      	b.n	29236 <handle_request+0x2a2>
		msg->operation = LWM2M_OP_DELETE;
   29264:	2303      	movs	r3, #3
   29266:	f884 3185 	strb.w	r3, [r4, #389]	; 0x185
		msg->code = COAP_RESPONSE_CODE_DELETED;
   2926a:	2342      	movs	r3, #66	; 0x42
   2926c:	e7e3      	b.n	29236 <handle_request+0x2a2>
   2926e:	bf00      	nop
   29270:	00046c4c 	.word	0x00046c4c
   29274:	00046c68 	.word	0x00046c68
   29278:	0004af42 	.word	0x0004af42
   2927c:	0004af4e 	.word	0x0004af4e
   29280:	20032b0c 	.word	0x20032b0c
   29284:	00045f08 	.word	0x00045f08
   29288:	00046018 	.word	0x00046018
   2928c:	0004b6e7 	.word	0x0004b6e7
   29290:	00046cac 	.word	0x00046cac
   29294:	20020898 	.word	0x20020898
   29298:	0004af53 	.word	0x0004af53
		if (timestamp - block1_contexts[i].timestamp >
   2929c:	6902      	ldr	r2, [r0, #16]
   2929e:	4611      	mov	r1, r2
   292a0:	6942      	ldr	r2, [r0, #20]
   292a2:	920a      	str	r2, [sp, #40]	; 0x28
   292a4:	9a09      	ldr	r2, [sp, #36]	; 0x24
   292a6:	1a52      	subs	r2, r2, r1
   292a8:	9206      	str	r2, [sp, #24]
   292aa:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   292ac:	f247 5130 	movw	r1, #30000	; 0x7530
   292b0:	eb63 0202 	sbc.w	r2, r3, r2
   292b4:	9207      	str	r2, [sp, #28]
   292b6:	2200      	movs	r2, #0
   292b8:	e9dd bc06 	ldrd	fp, ip, [sp, #24]
   292bc:	4559      	cmp	r1, fp
   292be:	eb72 020c 	sbcs.w	r2, r2, ip
   292c2:	db8d      	blt.n	291e0 <handle_request+0x24c>
	for (i = 0; i < NUM_BLOCK1_CONTEXT; i++) {
   292c4:	f10a 0a01 	add.w	sl, sl, #1
   292c8:	f1ba 0f03 	cmp.w	sl, #3
   292cc:	f100 0028 	add.w	r0, r0, #40	; 0x28
   292d0:	d182      	bne.n	291d8 <handle_request+0x244>
   292d2:	e78a      	b.n	291ea <handle_request+0x256>
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   292d4:	4642      	mov	r2, r8
   292d6:	a910      	add	r1, sp, #64	; 0x40
	(*ctx)->tkl = tkl;
   292d8:	f88a 8020 	strb.w	r8, [sl, #32]
   292dc:	f10a 0018 	add.w	r0, sl, #24
   292e0:	9306      	str	r3, [sp, #24]
   292e2:	f01b fdb5 	bl	44e50 <memcpy>
	coap_block_transfer_init(&(*ctx)->ctx, lwm2m_default_block_size(), 0);
   292e6:	2200      	movs	r2, #0
   292e8:	2104      	movs	r1, #4
   292ea:	4650      	mov	r0, sl
   292ec:	f019 f94f 	bl	4258e <coap_block_transfer_init>
	(*ctx)->timestamp = timestamp;
   292f0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   292f2:	9b09      	ldr	r3, [sp, #36]	; 0x24
   292f4:	6113      	str	r3, [r2, #16]
   292f6:	9b06      	ldr	r3, [sp, #24]
   292f8:	6153      	str	r3, [r2, #20]
		r = coap_update_from_block(msg->in.in_cpkt, &block_ctx->ctx);
   292fa:	990d      	ldr	r1, [sp, #52]	; 0x34
   292fc:	68a0      	ldr	r0, [r4, #8]
   292fe:	f019 f98d 	bl	4261c <coap_update_from_block>
		if (r < 0) {
   29302:	f1b0 0b00 	subs.w	fp, r0, #0
   29306:	da46      	bge.n	29396 <handle_request+0x402>
			LOG_ERR("Error from block update: %d", r);
   29308:	4ab2      	ldr	r2, [pc, #712]	; (295d4 <handle_request+0x640>)
   2930a:	6812      	ldr	r2, [r2, #0]
   2930c:	0752      	lsls	r2, r2, #29
   2930e:	d017      	beq.n	29340 <handle_request+0x3ac>
   29310:	2101      	movs	r1, #1
   29312:	f04f 0200 	mov.w	r2, #0
   29316:	48b0      	ldr	r0, [pc, #704]	; (295d8 <handle_request+0x644>)
   29318:	f361 0207 	bfi	r2, r1, #0, #8
   2931c:	49af      	ldr	r1, [pc, #700]	; (295dc <handle_request+0x648>)
   2931e:	1a09      	subs	r1, r1, r0
   29320:	08c9      	lsrs	r1, r1, #3
   29322:	f361 128f 	bfi	r2, r1, #6, #10
   29326:	4659      	mov	r1, fp
   29328:	48ad      	ldr	r0, [pc, #692]	; (295e0 <handle_request+0x64c>)
					LOG_ERR("OBSERVE option error: %d", r);
   2932a:	f017 fb97 	bl	40a5c <log_1>
   2932e:	e007      	b.n	29340 <handle_request+0x3ac>
			r = get_block_ctx(token, tkl, &block_ctx);
   29330:	aa0d      	add	r2, sp, #52	; 0x34
   29332:	4641      	mov	r1, r8
   29334:	a810      	add	r0, sp, #64	; 0x40
   29336:	f7fe feb5 	bl	280a4 <get_block_ctx>
		if (r < 0) {
   2933a:	f1b0 0b00 	subs.w	fp, r0, #0
   2933e:	dadc      	bge.n	292fa <handle_request+0x366>
	lwm2m_reset_message(msg, false);
   29340:	2100      	movs	r1, #0
   29342:	4620      	mov	r0, r4
   29344:	f019 fe28 	bl	42f98 <lwm2m_reset_message>
	if (r == -ENOENT) {
   29348:	f11b 0f02 	cmn.w	fp, #2
   2934c:	f040 8677 	bne.w	2a03e <handle_request+0x10aa>
		msg->code = COAP_RESPONSE_CODE_NOT_FOUND;
   29350:	2384      	movs	r3, #132	; 0x84
		msg->code = COAP_RESPONSE_CODE_INTERNAL_ERROR;
   29352:	f884 3183 	strb.w	r3, [r4, #387]	; 0x183
	r = lwm2m_init_message(msg);
   29356:	4620      	mov	r0, r4
   29358:	f7ff fd46 	bl	28de8 <lwm2m_init_message>
	if (r < 0) {
   2935c:	1e01      	subs	r1, r0, #0
   2935e:	da11      	bge.n	29384 <handle_request+0x3f0>
		LOG_ERR("Error recreating message: %d", r);
   29360:	4b9c      	ldr	r3, [pc, #624]	; (295d4 <handle_request+0x640>)
   29362:	681b      	ldr	r3, [r3, #0]
   29364:	075b      	lsls	r3, r3, #29
   29366:	d00d      	beq.n	29384 <handle_request+0x3f0>
   29368:	2301      	movs	r3, #1
   2936a:	f04f 0200 	mov.w	r2, #0
   2936e:	489a      	ldr	r0, [pc, #616]	; (295d8 <handle_request+0x644>)
   29370:	f363 0207 	bfi	r2, r3, #0, #8
   29374:	4b99      	ldr	r3, [pc, #612]	; (295dc <handle_request+0x648>)
   29376:	1a1b      	subs	r3, r3, r0
   29378:	08db      	lsrs	r3, r3, #3
   2937a:	f363 128f 	bfi	r2, r3, #6, #10
   2937e:	4899      	ldr	r0, [pc, #612]	; (295e4 <handle_request+0x650>)
   29380:	f017 fb6c 	bl	40a5c <log_1>
	free_block_ctx(block_ctx);
   29384:	9b0d      	ldr	r3, [sp, #52]	; 0x34
	if (ctx == NULL) {
   29386:	2b00      	cmp	r3, #0
   29388:	f000 864d 	beq.w	2a026 <handle_request+0x1092>
	ctx->tkl = 0U;
   2938c:	2200      	movs	r2, #0
   2938e:	f883 2020 	strb.w	r2, [r3, #32]
   29392:	f000 be48 	b.w	2a026 <handle_request+0x1092>
		if (!last_block) {
   29396:	9b05      	ldr	r3, [sp, #20]
   29398:	b113      	cbz	r3, 293a0 <handle_request+0x40c>
			msg->code = COAP_RESPONSE_CODE_CONTINUE;
   2939a:	235f      	movs	r3, #95	; 0x5f
   2939c:	f884 3183 	strb.w	r3, [r4, #387]	; 0x183
	r = lwm2m_init_message(msg);
   293a0:	4620      	mov	r0, r4
   293a2:	f7ff fd21 	bl	28de8 <lwm2m_init_message>
	if (r < 0) {
   293a6:	f1b0 0b00 	subs.w	fp, r0, #0
   293aa:	dbc9      	blt.n	29340 <handle_request+0x3ac>
	switch (msg->operation) {
   293ac:	f894 1185 	ldrb.w	r1, [r4, #389]	; 0x185
   293b0:	2909      	cmp	r1, #9
   293b2:	f200 8620 	bhi.w	29ff6 <handle_request+0x1062>
   293b6:	e8df f011 	tbh	[pc, r1, lsl #1]
   293ba:	000d      	.short	0x000d
   293bc:	03190319 	.word	0x03190319
   293c0:	05f5060c 	.word	0x05f5060c
   293c4:	061e061e 	.word	0x061e061e
   293c8:	01b0061e 	.word	0x01b0061e
   293cc:	0345      	.short	0x0345
	bool last_block = false;
   293ce:	2300      	movs	r3, #0
   293d0:	9308      	str	r3, [sp, #32]
   293d2:	e7e5      	b.n	293a0 <handle_request+0x40c>
		if (observe == 0) {
   293d4:	2d00      	cmp	r5, #0
   293d6:	f040 8182 	bne.w	296de <handle_request+0x74a>
			if (msg->token) {
   293da:	f8d4 3174 	ldr.w	r3, [r4, #372]	; 0x174
   293de:	2b00      	cmp	r3, #0
   293e0:	f000 8168 	beq.w	296b4 <handle_request+0x720>
				r = coap_append_option_int(msg->out.out_cpkt,
   293e4:	2201      	movs	r2, #1
   293e6:	2106      	movs	r1, #6
   293e8:	69a0      	ldr	r0, [r4, #24]
   293ea:	f7fb fdbf 	bl	24f6c <coap_append_option_int>
				if (r < 0) {
   293ee:	f1b0 0b00 	subs.w	fp, r0, #0
   293f2:	da11      	bge.n	29418 <handle_request+0x484>
					LOG_ERR("OBSERVE option error: %d", r);
   293f4:	4a77      	ldr	r2, [pc, #476]	; (295d4 <handle_request+0x640>)
   293f6:	6812      	ldr	r2, [r2, #0]
   293f8:	0753      	lsls	r3, r2, #29
   293fa:	d0a1      	beq.n	29340 <handle_request+0x3ac>
   293fc:	2101      	movs	r1, #1
   293fe:	f04f 0200 	mov.w	r2, #0
   29402:	4875      	ldr	r0, [pc, #468]	; (295d8 <handle_request+0x644>)
   29404:	f361 0207 	bfi	r2, r1, #0, #8
   29408:	4974      	ldr	r1, [pc, #464]	; (295dc <handle_request+0x648>)
   2940a:	1a09      	subs	r1, r1, r0
   2940c:	08c9      	lsrs	r1, r1, #3
   2940e:	f361 128f 	bfi	r2, r1, #6, #10
   29412:	4875      	ldr	r0, [pc, #468]	; (295e8 <handle_request+0x654>)
   29414:	4659      	mov	r1, fp
   29416:	e788      	b.n	2932a <handle_request+0x396>
	struct notification_attrs attrs = {
   29418:	2224      	movs	r2, #36	; 0x24
   2941a:	4629      	mov	r1, r5
   2941c:	a83c      	add	r0, sp, #240	; 0xf0
   2941e:	f01b fd51 	bl	44ec4 <memset>
   29422:	2303      	movs	r3, #3
	if (!msg || !msg->ctx) {
   29424:	6822      	ldr	r2, [r4, #0]
	struct notification_attrs attrs = {
   29426:	f88d 3110 	strb.w	r3, [sp, #272]	; 0x110
	if (!msg || !msg->ctx) {
   2942a:	bb3a      	cbnz	r2, 2947c <handle_request+0x4e8>
		LOG_ERR("valid lwm2m message is required");
   2942c:	4b69      	ldr	r3, [pc, #420]	; (295d4 <handle_request+0x640>)
   2942e:	681b      	ldr	r3, [r3, #0]
   29430:	075f      	lsls	r7, r3, #29
   29432:	d114      	bne.n	2945e <handle_request+0x4ca>
		return -EINVAL;
   29434:	f06f 0b15 	mvn.w	fp, #21
					LOG_ERR("add OBSERVE error: %d", r);
   29438:	4a66      	ldr	r2, [pc, #408]	; (295d4 <handle_request+0x640>)
   2943a:	6812      	ldr	r2, [r2, #0]
   2943c:	0756      	lsls	r6, r2, #29
   2943e:	f43f af7f 	beq.w	29340 <handle_request+0x3ac>
   29442:	2101      	movs	r1, #1
   29444:	f04f 0200 	mov.w	r2, #0
   29448:	4863      	ldr	r0, [pc, #396]	; (295d8 <handle_request+0x644>)
   2944a:	f361 0207 	bfi	r2, r1, #0, #8
   2944e:	4963      	ldr	r1, [pc, #396]	; (295dc <handle_request+0x648>)
   29450:	1a09      	subs	r1, r1, r0
   29452:	08c9      	lsrs	r1, r1, #3
   29454:	f361 128f 	bfi	r2, r1, #6, #10
   29458:	4864      	ldr	r0, [pc, #400]	; (295ec <handle_request+0x658>)
   2945a:	4659      	mov	r1, fp
   2945c:	e765      	b.n	2932a <handle_request+0x396>
		LOG_ERR("valid lwm2m message is required");
   2945e:	2301      	movs	r3, #1
   29460:	f04f 0100 	mov.w	r1, #0
   29464:	4a5c      	ldr	r2, [pc, #368]	; (295d8 <handle_request+0x644>)
   29466:	f363 0107 	bfi	r1, r3, #0, #8
   2946a:	4b5c      	ldr	r3, [pc, #368]	; (295dc <handle_request+0x648>)
   2946c:	4860      	ldr	r0, [pc, #384]	; (295f0 <handle_request+0x65c>)
   2946e:	1a9b      	subs	r3, r3, r2
   29470:	08db      	lsrs	r3, r3, #3
   29472:	f363 118f 	bfi	r1, r3, #6, #10
   29476:	f017 fae4 	bl	40a42 <log_0>
				if (r < 0) {
   2947a:	e7db      	b.n	29434 <handle_request+0x4a0>
	if (!token || (tkl == 0U || tkl > MAX_TOKEN_LEN)) {
   2947c:	f108 33ff 	add.w	r3, r8, #4294967295
   29480:	b2db      	uxtb	r3, r3
   29482:	2b07      	cmp	r3, #7
   29484:	d914      	bls.n	294b0 <handle_request+0x51c>
		LOG_ERR("token(%p) and token length(%u) must be valid.",
   29486:	4b53      	ldr	r3, [pc, #332]	; (295d4 <handle_request+0x640>)
   29488:	681b      	ldr	r3, [r3, #0]
   2948a:	075e      	lsls	r6, r3, #29
   2948c:	d0d2      	beq.n	29434 <handle_request+0x4a0>
   2948e:	2201      	movs	r2, #1
   29490:	f04f 0300 	mov.w	r3, #0
   29494:	4950      	ldr	r1, [pc, #320]	; (295d8 <handle_request+0x644>)
   29496:	f362 0307 	bfi	r3, r2, #0, #8
   2949a:	4a50      	ldr	r2, [pc, #320]	; (295dc <handle_request+0x648>)
   2949c:	4855      	ldr	r0, [pc, #340]	; (295f4 <handle_request+0x660>)
   2949e:	1a52      	subs	r2, r2, r1
   294a0:	08d2      	lsrs	r2, r2, #3
   294a2:	f362 138f 	bfi	r3, r2, #6, #10
   294a6:	a910      	add	r1, sp, #64	; 0x40
   294a8:	4642      	mov	r2, r8
   294aa:	f017 faeb 	bl	40a84 <log_2>
   294ae:	e7c1      	b.n	29434 <handle_request+0x4a0>
	attrs.pmin = lwm2m_server_get_pmin(msg->ctx->sec_obj_inst);
   294b0:	f8b2 0124 	ldrh.w	r0, [r2, #292]	; 0x124
   294b4:	f002 fca6 	bl	2be04 <lwm2m_server_get_pmin>
	attrs.pmax = lwm2m_server_get_pmax(msg->ctx->sec_obj_inst);
   294b8:	6823      	ldr	r3, [r4, #0]
	attrs.pmin = lwm2m_server_get_pmin(msg->ctx->sec_obj_inst);
   294ba:	9042      	str	r0, [sp, #264]	; 0x108
	attrs.pmax = lwm2m_server_get_pmax(msg->ctx->sec_obj_inst);
   294bc:	f8b3 0124 	ldrh.w	r0, [r3, #292]	; 0x124
   294c0:	f002 fcb0 	bl	2be24 <lwm2m_server_get_pmax>
	SYS_SLIST_FOR_EACH_CONTAINER(&engine_observer_list, obs, node) {
   294c4:	4b4c      	ldr	r3, [pc, #304]	; (295f8 <handle_request+0x664>)
	attrs.pmax = lwm2m_server_get_pmax(msg->ctx->sec_obj_inst);
   294c6:	9043      	str	r0, [sp, #268]	; 0x10c
	SYS_SLIST_FOR_EACH_CONTAINER(&engine_observer_list, obs, node) {
   294c8:	681e      	ldr	r6, [r3, #0]
   294ca:	b30e      	cbz	r6, 29510 <handle_request+0x57c>
		    memcmp(&obs->path, &msg->path, sizeof(msg->path)) == 0) {
   294cc:	f104 0720 	add.w	r7, r4, #32
		if (obs->ctx == msg->ctx &&
   294d0:	6872      	ldr	r2, [r6, #4]
   294d2:	6823      	ldr	r3, [r4, #0]
   294d4:	429a      	cmp	r2, r3
   294d6:	d118      	bne.n	2950a <handle_request+0x576>
		    memcmp(&obs->path, &msg->path, sizeof(msg->path)) == 0) {
   294d8:	220a      	movs	r2, #10
   294da:	4639      	mov	r1, r7
   294dc:	f106 0008 	add.w	r0, r6, #8
   294e0:	f01b fca8 	bl	44e34 <memcmp>
		if (obs->ctx == msg->ctx &&
   294e4:	b988      	cbnz	r0, 2950a <handle_request+0x576>
   294e6:	4642      	mov	r2, r8
   294e8:	a910      	add	r1, sp, #64	; 0x40
   294ea:	f106 0012 	add.w	r0, r6, #18
   294ee:	f01b fcaf 	bl	44e50 <memcpy>
			obs->tkl = tkl;
   294f2:	f886 803e 	strb.w	r8, [r6, #62]	; 0x3e
		r = do_read_op(msg, accept);
   294f6:	4649      	mov	r1, r9
   294f8:	4620      	mov	r0, r4
   294fa:	f7fe fe1b 	bl	28134 <do_read_op>
		return res->execute_cb(obj_inst->obj_inst_id);
   294fe:	4683      	mov	fp, r0
	if (r < 0) {
   29500:	f1bb 0f00 	cmp.w	fp, #0
   29504:	f280 8170 	bge.w	297e8 <handle_request+0x854>
   29508:	e71a      	b.n	29340 <handle_request+0x3ac>
   2950a:	6836      	ldr	r6, [r6, #0]
	SYS_SLIST_FOR_EACH_CONTAINER(&engine_observer_list, obs, node) {
   2950c:	2e00      	cmp	r6, #0
   2950e:	d1df      	bne.n	294d0 <handle_request+0x53c>
	obj = get_engine_obj(msg->path.obj_id);
   29510:	8c21      	ldrh	r1, [r4, #32]
   29512:	4608      	mov	r0, r1
   29514:	f7fe fc42 	bl	27d9c <get_engine_obj>
	if (!obj) {
   29518:	4606      	mov	r6, r0
   2951a:	b9a8      	cbnz	r0, 29548 <handle_request+0x5b4>
		LOG_ERR("unable to find obj: %u", msg->path.obj_id);
   2951c:	4b2d      	ldr	r3, [pc, #180]	; (295d4 <handle_request+0x640>)
   2951e:	681b      	ldr	r3, [r3, #0]
   29520:	075d      	lsls	r5, r3, #29
   29522:	d102      	bne.n	2952a <handle_request+0x596>
			return -ENOENT;
   29524:	f06f 0b01 	mvn.w	fp, #1
   29528:	e786      	b.n	29438 <handle_request+0x4a4>
		LOG_ERR("unable to find obj: %u", msg->path.obj_id);
   2952a:	2301      	movs	r3, #1
   2952c:	f04f 0200 	mov.w	r2, #0
   29530:	4829      	ldr	r0, [pc, #164]	; (295d8 <handle_request+0x644>)
   29532:	f363 0207 	bfi	r2, r3, #0, #8
   29536:	4b29      	ldr	r3, [pc, #164]	; (295dc <handle_request+0x648>)
   29538:	1a1b      	subs	r3, r3, r0
   2953a:	08db      	lsrs	r3, r3, #3
   2953c:	f363 128f 	bfi	r2, r3, #6, #10
   29540:	482e      	ldr	r0, [pc, #184]	; (295fc <handle_request+0x668>)
   29542:	f017 fa8b 	bl	40a5c <log_1>
				if (r < 0) {
   29546:	e7ed      	b.n	29524 <handle_request+0x590>
	ret = update_attrs(obj, &attrs);
   29548:	a93c      	add	r1, sp, #240	; 0xf0
   2954a:	f7fe fc95 	bl	27e78 <update_attrs>
	if (ret < 0) {
   2954e:	f1b0 0b00 	subs.w	fp, r0, #0
   29552:	f6ff af71 	blt.w	29438 <handle_request+0x4a4>
	if (msg->path.level >= 2U) {
   29556:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
   2955a:	2b01      	cmp	r3, #1
   2955c:	d937      	bls.n	295ce <handle_request+0x63a>
		obj_inst = get_engine_obj_inst(msg->path.obj_id,
   2955e:	f8b4 a020 	ldrh.w	sl, [r4, #32]
					       msg->path.obj_inst_id);
   29562:	f8b4 b022 	ldrh.w	fp, [r4, #34]	; 0x22
		obj_inst = get_engine_obj_inst(msg->path.obj_id,
   29566:	4650      	mov	r0, sl
   29568:	4659      	mov	r1, fp
   2956a:	f7fe fc21 	bl	27db0 <get_engine_obj_inst>
		if (!obj_inst) {
   2956e:	4607      	mov	r7, r0
   29570:	b9a0      	cbnz	r0, 2959c <handle_request+0x608>
			LOG_ERR("unable to find obj_inst: %u/%u",
   29572:	4b18      	ldr	r3, [pc, #96]	; (295d4 <handle_request+0x640>)
   29574:	681b      	ldr	r3, [r3, #0]
   29576:	0758      	lsls	r0, r3, #29
   29578:	d0d4      	beq.n	29524 <handle_request+0x590>
   2957a:	2201      	movs	r2, #1
   2957c:	f04f 0300 	mov.w	r3, #0
   29580:	4915      	ldr	r1, [pc, #84]	; (295d8 <handle_request+0x644>)
   29582:	f362 0307 	bfi	r3, r2, #0, #8
   29586:	4a15      	ldr	r2, [pc, #84]	; (295dc <handle_request+0x648>)
   29588:	481d      	ldr	r0, [pc, #116]	; (29600 <handle_request+0x66c>)
   2958a:	1a52      	subs	r2, r2, r1
   2958c:	08d2      	lsrs	r2, r2, #3
   2958e:	f362 138f 	bfi	r3, r2, #6, #10
   29592:	4651      	mov	r1, sl
   29594:	465a      	mov	r2, fp
   29596:	f017 fa75 	bl	40a84 <log_2>
				if (r < 0) {
   2959a:	e7c3      	b.n	29524 <handle_request+0x590>
		ret = update_attrs(obj_inst, &attrs);
   2959c:	a93c      	add	r1, sp, #240	; 0xf0
   2959e:	f7fe fc6b 	bl	27e78 <update_attrs>
		if (ret < 0) {
   295a2:	f1b0 0b00 	subs.w	fp, r0, #0
   295a6:	f6ff af47 	blt.w	29438 <handle_request+0x4a4>
	if (msg->path.level >= 3U) {
   295aa:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
   295ae:	2b02      	cmp	r3, #2
   295b0:	d82a      	bhi.n	29608 <handle_request+0x674>
	for (i = 0; i < CONFIG_LWM2M_ENGINE_MAX_OBSERVER; i++) {
   295b2:	4b14      	ldr	r3, [pc, #80]	; (29604 <handle_request+0x670>)
   295b4:	461f      	mov	r7, r3
		if (!observe_node_data[i].ctx) {
   295b6:	685a      	ldr	r2, [r3, #4]
   295b8:	2a00      	cmp	r2, #0
   295ba:	f000 8565 	beq.w	2a088 <handle_request+0x10f4>
	for (i = 0; i < CONFIG_LWM2M_ENGINE_MAX_OBSERVER; i++) {
   295be:	3501      	adds	r5, #1
   295c0:	2d0a      	cmp	r5, #10
   295c2:	f103 0340 	add.w	r3, r3, #64	; 0x40
   295c6:	d1f6      	bne.n	295b6 <handle_request+0x622>
		return -ENOMEM;
   295c8:	f06f 0b0b 	mvn.w	fp, #11
   295cc:	e734      	b.n	29438 <handle_request+0x4a4>
	struct lwm2m_engine_obj_inst *obj_inst = NULL;
   295ce:	2700      	movs	r7, #0
   295d0:	e7eb      	b.n	295aa <handle_request+0x616>
   295d2:	bf00      	nop
   295d4:	20032b0c 	.word	0x20032b0c
   295d8:	00045f08 	.word	0x00045f08
   295dc:	00046018 	.word	0x00046018
   295e0:	0004af72 	.word	0x0004af72
   295e4:	0004b139 	.word	0x0004b139
   295e8:	0004af8e 	.word	0x0004af8e
   295ec:	0004b029 	.word	0x0004b029
   295f0:	0004afa7 	.word	0x0004afa7
   295f4:	0004ae24 	.word	0x0004ae24
   295f8:	2002248c 	.word	0x2002248c
   295fc:	0004b183 	.word	0x0004b183
   29600:	0004afc7 	.word	0x0004afc7
   29604:	20020910 	.word	0x20020910
		for (i = 0; i < obj_inst->resource_count; i++) {
   29608:	2300      	movs	r3, #0
			if (obj_inst->resources[i].res_id == msg->path.res_id) {
   2960a:	2018      	movs	r0, #24
		for (i = 0; i < obj_inst->resource_count; i++) {
   2960c:	89f9      	ldrh	r1, [r7, #14]
   2960e:	428b      	cmp	r3, r1
   29610:	db18      	blt.n	29644 <handle_request+0x6b0>
		if (i == obj_inst->resource_count) {
   29612:	d121      	bne.n	29658 <handle_request+0x6c4>
			LOG_ERR("unable to find res_id: %u/%u/%u",
   29614:	4b84      	ldr	r3, [pc, #528]	; (29828 <handle_request+0x894>)
   29616:	681b      	ldr	r3, [r3, #0]
   29618:	0759      	lsls	r1, r3, #29
   2961a:	d083      	beq.n	29524 <handle_request+0x590>
   2961c:	2301      	movs	r3, #1
   2961e:	f04f 0200 	mov.w	r2, #0
   29622:	4982      	ldr	r1, [pc, #520]	; (2982c <handle_request+0x898>)
   29624:	f363 0207 	bfi	r2, r3, #0, #8
   29628:	4b81      	ldr	r3, [pc, #516]	; (29830 <handle_request+0x89c>)
   2962a:	4882      	ldr	r0, [pc, #520]	; (29834 <handle_request+0x8a0>)
   2962c:	1a5b      	subs	r3, r3, r1
   2962e:	08db      	lsrs	r3, r3, #3
   29630:	f363 128f 	bfi	r2, r3, #6, #10
   29634:	f8ad 2000 	strh.w	r2, [sp]
   29638:	8ca3      	ldrh	r3, [r4, #36]	; 0x24
   2963a:	8c62      	ldrh	r2, [r4, #34]	; 0x22
   2963c:	8c21      	ldrh	r1, [r4, #32]
			LOG_ERR("unable to find obj_field: %u/%u/%u",
   2963e:	f017 fa39 	bl	40ab4 <log_3>
   29642:	e76f      	b.n	29524 <handle_request+0x590>
			if (obj_inst->resources[i].res_id == msg->path.res_id) {
   29644:	68ba      	ldr	r2, [r7, #8]
   29646:	fb00 2203 	mla	r2, r0, r3, r2
   2964a:	f8b2 c014 	ldrh.w	ip, [r2, #20]
   2964e:	8ca2      	ldrh	r2, [r4, #36]	; 0x24
   29650:	4594      	cmp	ip, r2
   29652:	d001      	beq.n	29658 <handle_request+0x6c4>
		for (i = 0; i < obj_inst->resource_count; i++) {
   29654:	3301      	adds	r3, #1
   29656:	e7da      	b.n	2960e <handle_request+0x67a>
				obj_inst->resources[i].res_id);
   29658:	2218      	movs	r2, #24
   2965a:	68bf      	ldr	r7, [r7, #8]
		obj_field = lwm2m_get_engine_obj_field(obj,
   2965c:	4630      	mov	r0, r6
				obj_inst->resources[i].res_id);
   2965e:	fb02 7703 	mla	r7, r2, r3, r7
		obj_field = lwm2m_get_engine_obj_field(obj,
   29662:	8ab9      	ldrh	r1, [r7, #20]
   29664:	f019 fc84 	bl	42f70 <lwm2m_get_engine_obj_field>
		if (!obj_field) {
   29668:	b9b0      	cbnz	r0, 29698 <handle_request+0x704>
			LOG_ERR("unable to find obj_field: %u/%u/%u",
   2966a:	4b6f      	ldr	r3, [pc, #444]	; (29828 <handle_request+0x894>)
   2966c:	681b      	ldr	r3, [r3, #0]
   2966e:	075a      	lsls	r2, r3, #29
   29670:	f43f af58 	beq.w	29524 <handle_request+0x590>
   29674:	2301      	movs	r3, #1
   29676:	f04f 0200 	mov.w	r2, #0
   2967a:	496c      	ldr	r1, [pc, #432]	; (2982c <handle_request+0x898>)
   2967c:	f363 0207 	bfi	r2, r3, #0, #8
   29680:	4b6b      	ldr	r3, [pc, #428]	; (29830 <handle_request+0x89c>)
   29682:	486d      	ldr	r0, [pc, #436]	; (29838 <handle_request+0x8a4>)
   29684:	1a5b      	subs	r3, r3, r1
   29686:	08db      	lsrs	r3, r3, #3
   29688:	f363 128f 	bfi	r2, r3, #6, #10
   2968c:	f8ad 2000 	strh.w	r2, [sp]
   29690:	8ca3      	ldrh	r3, [r4, #36]	; 0x24
   29692:	8c62      	ldrh	r2, [r4, #34]	; 0x22
   29694:	8c21      	ldrh	r1, [r4, #32]
   29696:	e7d2      	b.n	2963e <handle_request+0x6aa>
		if (!LWM2M_HAS_PERM(obj_field, LWM2M_PERM_R)) {
   29698:	7883      	ldrb	r3, [r0, #2]
   2969a:	07db      	lsls	r3, r3, #31
   2969c:	d507      	bpl.n	296ae <handle_request+0x71a>
		ret = update_attrs(&obj_inst->resources[i], &attrs);
   2969e:	a93c      	add	r1, sp, #240	; 0xf0
   296a0:	4638      	mov	r0, r7
   296a2:	f7fe fbe9 	bl	27e78 <update_attrs>
		if (ret < 0) {
   296a6:	f1b0 0b00 	subs.w	fp, r0, #0
   296aa:	da82      	bge.n	295b2 <handle_request+0x61e>
   296ac:	e6c4      	b.n	29438 <handle_request+0x4a4>
			return -EPERM;
   296ae:	f04f 3bff 	mov.w	fp, #4294967295
   296b2:	e6c1      	b.n	29438 <handle_request+0x4a4>
				LOG_ERR("OBSERVE request missing token");
   296b4:	4b5c      	ldr	r3, [pc, #368]	; (29828 <handle_request+0x894>)
   296b6:	681b      	ldr	r3, [r3, #0]
   296b8:	075d      	lsls	r5, r3, #29
   296ba:	d00d      	beq.n	296d8 <handle_request+0x744>
   296bc:	2301      	movs	r3, #1
   296be:	f04f 0100 	mov.w	r1, #0
   296c2:	4a5a      	ldr	r2, [pc, #360]	; (2982c <handle_request+0x898>)
   296c4:	f363 0107 	bfi	r1, r3, #0, #8
   296c8:	4b59      	ldr	r3, [pc, #356]	; (29830 <handle_request+0x89c>)
   296ca:	485c      	ldr	r0, [pc, #368]	; (2983c <handle_request+0x8a8>)
   296cc:	1a9b      	subs	r3, r3, r2
   296ce:	08db      	lsrs	r3, r3, #3
   296d0:	f363 118f 	bfi	r1, r3, #6, #10
   296d4:	f017 f9b5 	bl	40a42 <log_0>
		r = -EINVAL;
   296d8:	f06f 0b15 	mvn.w	fp, #21
   296dc:	e630      	b.n	29340 <handle_request+0x3ac>
		} else if (observe == 1) {
   296de:	2d01      	cmp	r5, #1
   296e0:	f47f af09 	bne.w	294f6 <handle_request+0x562>
			r = engine_remove_observer(token, tkl);
   296e4:	4641      	mov	r1, r8
   296e6:	a810      	add	r0, sp, #64	; 0x40
   296e8:	f7fe fc56 	bl	27f98 <engine_remove_observer>
			if (r < 0) {
   296ec:	1e01      	subs	r1, r0, #0
   296ee:	f6bf af02 	bge.w	294f6 <handle_request+0x562>
				LOG_ERR("remove observe error: %d", r);
   296f2:	4b4d      	ldr	r3, [pc, #308]	; (29828 <handle_request+0x894>)
   296f4:	681b      	ldr	r3, [r3, #0]
   296f6:	0758      	lsls	r0, r3, #29
   296f8:	f43f aefd 	beq.w	294f6 <handle_request+0x562>
   296fc:	2301      	movs	r3, #1
   296fe:	f04f 0200 	mov.w	r2, #0
   29702:	484a      	ldr	r0, [pc, #296]	; (2982c <handle_request+0x898>)
   29704:	f363 0207 	bfi	r2, r3, #0, #8
   29708:	4b49      	ldr	r3, [pc, #292]	; (29830 <handle_request+0x89c>)
   2970a:	1a1b      	subs	r3, r3, r0
   2970c:	08db      	lsrs	r3, r3, #3
   2970e:	f363 128f 	bfi	r2, r3, #6, #10
   29712:	484b      	ldr	r0, [pc, #300]	; (29840 <handle_request+0x8ac>)
   29714:	f017 f9a2 	bl	40a5c <log_1>
   29718:	e6ed      	b.n	294f6 <handle_request+0x562>
	if (!msg->ctx->bootstrap_mode && !well_known &&
   2971a:	6823      	ldr	r3, [r4, #0]
   2971c:	f893 3128 	ldrb.w	r3, [r3, #296]	; 0x128
   29720:	b94b      	cbnz	r3, 29736 <handle_request+0x7a2>
   29722:	b946      	cbnz	r6, 29736 <handle_request+0x7a2>
   29724:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
   29728:	2b00      	cmp	r3, #0
   2972a:	f000 8484 	beq.w	2a036 <handle_request+0x10a2>
	    (msg->path.level == 0U ||
   2972e:	8c23      	ldrh	r3, [r4, #32]
   29730:	2b00      	cmp	r3, #0
   29732:	f000 8480 	beq.w	2a036 <handle_request+0x10a2>
	ret = coap_append_option_int(msg->out.out_cpkt,
   29736:	2228      	movs	r2, #40	; 0x28
   29738:	210c      	movs	r1, #12
   2973a:	69a0      	ldr	r0, [r4, #24]
   2973c:	f7fb fc16 	bl	24f6c <coap_append_option_int>
	if (ret < 0) {
   29740:	f1b0 0b00 	subs.w	fp, r0, #0
   29744:	da12      	bge.n	2976c <handle_request+0x7d8>
		LOG_ERR("Error setting response content-format: %d", ret);
   29746:	4a38      	ldr	r2, [pc, #224]	; (29828 <handle_request+0x894>)
   29748:	6812      	ldr	r2, [r2, #0]
   2974a:	0752      	lsls	r2, r2, #29
   2974c:	f43f adf8 	beq.w	29340 <handle_request+0x3ac>
   29750:	2101      	movs	r1, #1
   29752:	f04f 0200 	mov.w	r2, #0
   29756:	4835      	ldr	r0, [pc, #212]	; (2982c <handle_request+0x898>)
   29758:	f361 0207 	bfi	r2, r1, #0, #8
   2975c:	4934      	ldr	r1, [pc, #208]	; (29830 <handle_request+0x89c>)
   2975e:	1a09      	subs	r1, r1, r0
   29760:	08c9      	lsrs	r1, r1, #3
   29762:	f361 128f 	bfi	r2, r1, #6, #10
   29766:	4837      	ldr	r0, [pc, #220]	; (29844 <handle_request+0x8b0>)
   29768:	4659      	mov	r1, fp
   2976a:	e5de      	b.n	2932a <handle_request+0x396>
	ret = coap_packet_append_payload_marker(msg->out.out_cpkt);
   2976c:	69a0      	ldr	r0, [r4, #24]
   2976e:	f018 fde6 	bl	4233e <coap_packet_append_payload_marker>
	if (ret < 0) {
   29772:	f1b0 0b00 	subs.w	fp, r0, #0
   29776:	f6ff ade3 	blt.w	29340 <handle_request+0x3ac>
	if (well_known) {
   2977a:	2e00      	cmp	r6, #0
   2977c:	d06e      	beq.n	2985c <handle_request+0x8c8>
		ret = buf_append(CPKT_BUF_WRITE(msg->out.out_cpkt),
   2977e:	69a5      	ldr	r5, [r4, #24]
				 strlen(WELL_KNOWN_CORE_PATH));
   29780:	4831      	ldr	r0, [pc, #196]	; (29848 <handle_request+0x8b4>)
		ret = buf_append(CPKT_BUF_WRITE(msg->out.out_cpkt),
   29782:	682e      	ldr	r6, [r5, #0]
   29784:	88ef      	ldrh	r7, [r5, #6]
				 strlen(WELL_KNOWN_CORE_PATH));
   29786:	f7f3 fcc7 	bl	1d118 <strlen>
		ret = buf_append(CPKT_BUF_WRITE(msg->out.out_cpkt),
   2978a:	b280      	uxth	r0, r0
   2978c:	9000      	str	r0, [sp, #0]
   2978e:	4b2e      	ldr	r3, [pc, #184]	; (29848 <handle_request+0x8b4>)
   29790:	463a      	mov	r2, r7
   29792:	1d29      	adds	r1, r5, #4
   29794:	4630      	mov	r0, r6
   29796:	f019 fbcb 	bl	42f30 <buf_append>
		if (ret < 0) {
   2979a:	f1b0 0b00 	subs.w	fp, r0, #0
   2979e:	f6ff adcf 	blt.w	29340 <handle_request+0x3ac>
		SYS_SLIST_FOR_EACH_CONTAINER(&engine_obj_list, obj, node) {
   297a2:	4b2a      	ldr	r3, [pc, #168]	; (2984c <handle_request+0x8b8>)
   297a4:	681d      	ldr	r5, [r3, #0]
   297a6:	b1fd      	cbz	r5, 297e8 <handle_request+0x854>
			snprintk(disc_buf, sizeof(disc_buf), ",</%u>",
   297a8:	f8df 80ac 	ldr.w	r8, [pc, #172]	; 29858 <handle_request+0x8c4>
   297ac:	4e28      	ldr	r6, [pc, #160]	; (29850 <handle_request+0x8bc>)
   297ae:	8b2b      	ldrh	r3, [r5, #24]
   297b0:	4642      	mov	r2, r8
   297b2:	2118      	movs	r1, #24
   297b4:	4630      	mov	r0, r6
   297b6:	f016 ff31 	bl	4061c <snprintk>
			ret = buf_append(CPKT_BUF_WRITE(msg->out.out_cpkt),
   297ba:	69a7      	ldr	r7, [r4, #24]
					 disc_buf, strlen(disc_buf));
   297bc:	4630      	mov	r0, r6
			ret = buf_append(CPKT_BUF_WRITE(msg->out.out_cpkt),
   297be:	f8d7 9000 	ldr.w	r9, [r7]
   297c2:	f8b7 a006 	ldrh.w	sl, [r7, #6]
					 disc_buf, strlen(disc_buf));
   297c6:	f7f3 fca7 	bl	1d118 <strlen>
			ret = buf_append(CPKT_BUF_WRITE(msg->out.out_cpkt),
   297ca:	b280      	uxth	r0, r0
   297cc:	9000      	str	r0, [sp, #0]
   297ce:	4633      	mov	r3, r6
   297d0:	4652      	mov	r2, sl
   297d2:	1d39      	adds	r1, r7, #4
   297d4:	4648      	mov	r0, r9
   297d6:	f019 fbab 	bl	42f30 <buf_append>
			if (ret < 0) {
   297da:	f1b0 0b00 	subs.w	fp, r0, #0
   297de:	f6ff adaf 	blt.w	29340 <handle_request+0x3ac>
   297e2:	682d      	ldr	r5, [r5, #0]
		SYS_SLIST_FOR_EACH_CONTAINER(&engine_obj_list, obj, node) {
   297e4:	2d00      	cmp	r5, #0
   297e6:	d1e2      	bne.n	297ae <handle_request+0x81a>
	if (block_ctx) {
   297e8:	990d      	ldr	r1, [sp, #52]	; 0x34
   297ea:	2900      	cmp	r1, #0
   297ec:	f000 841b 	beq.w	2a026 <handle_request+0x1092>
		if (!last_block) {
   297f0:	9b08      	ldr	r3, [sp, #32]
   297f2:	2b00      	cmp	r3, #0
   297f4:	f040 8414 	bne.w	2a020 <handle_request+0x108c>
			r = coap_append_block1_option(msg->out.out_cpkt,
   297f8:	69a0      	ldr	r0, [r4, #24]
   297fa:	f018 fece 	bl	4259a <coap_append_block1_option>
			if (r < 0) {
   297fe:	1e01      	subs	r1, r0, #0
   29800:	f280 8411 	bge.w	2a026 <handle_request+0x1092>
				LOG_ERR("Fail adding block1 option: %d", r);
   29804:	4b08      	ldr	r3, [pc, #32]	; (29828 <handle_request+0x894>)
   29806:	681b      	ldr	r3, [r3, #0]
   29808:	075a      	lsls	r2, r3, #29
   2980a:	f43f af65 	beq.w	296d8 <handle_request+0x744>
   2980e:	2301      	movs	r3, #1
   29810:	f04f 0200 	mov.w	r2, #0
   29814:	4805      	ldr	r0, [pc, #20]	; (2982c <handle_request+0x898>)
   29816:	f363 0207 	bfi	r2, r3, #0, #8
   2981a:	4b05      	ldr	r3, [pc, #20]	; (29830 <handle_request+0x89c>)
   2981c:	1a1b      	subs	r3, r3, r0
   2981e:	08db      	lsrs	r3, r3, #3
   29820:	f363 128f 	bfi	r2, r3, #6, #10
   29824:	480b      	ldr	r0, [pc, #44]	; (29854 <handle_request+0x8c0>)
   29826:	e3f7      	b.n	2a018 <handle_request+0x1084>
   29828:	20032b0c 	.word	0x20032b0c
   2982c:	00045f08 	.word	0x00045f08
   29830:	00046018 	.word	0x00046018
   29834:	0004afe6 	.word	0x0004afe6
   29838:	0004b006 	.word	0x0004b006
   2983c:	0004b03f 	.word	0x0004b03f
   29840:	0004b5d8 	.word	0x0004b5d8
   29844:	0004b05d 	.word	0x0004b05d
   29848:	0004b087 	.word	0x0004b087
   2984c:	20022484 	.word	0x20022484
   29850:	20029a0c 	.word	0x20029a0c
   29854:	0004b11b 	.word	0x0004b11b
   29858:	0004b09b 	.word	0x0004b09b
	SYS_SLIST_FOR_EACH_CONTAINER(&engine_obj_inst_list, obj_inst, node) {
   2985c:	4b9f      	ldr	r3, [pc, #636]	; (29adc <handle_request+0xb48>)
   2985e:	681d      	ldr	r5, [r3, #0]
   29860:	2d00      	cmp	r5, #0
   29862:	f43f ac11 	beq.w	29088 <handle_request+0xf4>
			snprintk(disc_buf, sizeof(disc_buf),
   29866:	f8df 929c 	ldr.w	r9, [pc, #668]	; 29b04 <handle_request+0xb70>
   2986a:	f8df a29c 	ldr.w	sl, [pc, #668]	; 29b08 <handle_request+0xb74>
		if ((!msg->ctx->bootstrap_mode &&
   2986e:	6822      	ldr	r2, [r4, #0]
   29870:	686b      	ldr	r3, [r5, #4]
   29872:	f892 2128 	ldrb.w	r2, [r2, #296]	; 0x128
   29876:	8b1b      	ldrh	r3, [r3, #24]
   29878:	b90a      	cbnz	r2, 2987e <handle_request+0x8ea>
   2987a:	2b00      	cmp	r3, #0
   2987c:	d069      	beq.n	29952 <handle_request+0x9be>
		     obj_inst->obj->obj_id == LWM2M_OBJECT_SECURITY_ID) ||
   2987e:	8c22      	ldrh	r2, [r4, #32]
   29880:	429a      	cmp	r2, r3
   29882:	d166      	bne.n	29952 <handle_request+0x9be>
		if (msg->path.level == 1U) {
   29884:	f894 7028 	ldrb.w	r7, [r4, #40]	; 0x28
   29888:	2f01      	cmp	r7, #1
   2988a:	d127      	bne.n	298dc <handle_request+0x948>
			snprintk(disc_buf, sizeof(disc_buf), "%s</%u>",
   2988c:	4a94      	ldr	r2, [pc, #592]	; (29ae0 <handle_request+0xb4c>)
   2988e:	2118      	movs	r1, #24
   29890:	9300      	str	r3, [sp, #0]
   29892:	4894      	ldr	r0, [pc, #592]	; (29ae4 <handle_request+0xb50>)
   29894:	2e00      	cmp	r6, #0
   29896:	bf14      	ite	ne
   29898:	464b      	movne	r3, r9
   2989a:	4653      	moveq	r3, sl
   2989c:	f016 febe 	bl	4061c <snprintk>
			ret = buf_append(CPKT_BUF_WRITE(msg->out.out_cpkt),
   298a0:	69a6      	ldr	r6, [r4, #24]
					 disc_buf, strlen(disc_buf));
   298a2:	4890      	ldr	r0, [pc, #576]	; (29ae4 <handle_request+0xb50>)
			ret = buf_append(CPKT_BUF_WRITE(msg->out.out_cpkt),
   298a4:	f8b6 b006 	ldrh.w	fp, [r6, #6]
   298a8:	f8d6 8000 	ldr.w	r8, [r6]
					 disc_buf, strlen(disc_buf));
   298ac:	f7f3 fc34 	bl	1d118 <strlen>
			ret = buf_append(CPKT_BUF_WRITE(msg->out.out_cpkt),
   298b0:	b280      	uxth	r0, r0
   298b2:	9000      	str	r0, [sp, #0]
   298b4:	465a      	mov	r2, fp
   298b6:	4b8b      	ldr	r3, [pc, #556]	; (29ae4 <handle_request+0xb50>)
   298b8:	1d31      	adds	r1, r6, #4
   298ba:	4640      	mov	r0, r8
   298bc:	f019 fb38 	bl	42f30 <buf_append>
			if (ret < 0) {
   298c0:	f1b0 0b00 	subs.w	fp, r0, #0
   298c4:	f6ff ad3c 	blt.w	29340 <handle_request+0x3ac>
			ret = print_attr(&msg->out, disc_buf, sizeof(disc_buf),
   298c8:	6869      	ldr	r1, [r5, #4]
   298ca:	f104 0018 	add.w	r0, r4, #24
   298ce:	f7fe fd65 	bl	2839c <print_attr.isra.9.constprop.29>
			if (ret < 0) {
   298d2:	f1b0 0b00 	subs.w	fp, r0, #0
   298d6:	f6ff ad33 	blt.w	29340 <handle_request+0x3ac>
			reported = true;
   298da:	463e      	mov	r6, r7
		if (msg->path.level > 1 &&
   298dc:	f894 2028 	ldrb.w	r2, [r4, #40]	; 0x28
   298e0:	2a01      	cmp	r2, #1
   298e2:	d92f      	bls.n	29944 <handle_request+0x9b0>
		    msg->path.obj_inst_id != obj_inst->obj_inst_id) {
   298e4:	89a9      	ldrh	r1, [r5, #12]
		if (msg->path.level > 1 &&
   298e6:	8c63      	ldrh	r3, [r4, #34]	; 0x22
   298e8:	428b      	cmp	r3, r1
   298ea:	d132      	bne.n	29952 <handle_request+0x9be>
		if (msg->path.level == 2U) {
   298ec:	2a02      	cmp	r2, #2
   298ee:	d129      	bne.n	29944 <handle_request+0x9b0>
			snprintk(disc_buf, sizeof(disc_buf), "%s</%u/%u>",
   298f0:	9301      	str	r3, [sp, #4]
				 obj_inst->obj->obj_id, obj_inst->obj_inst_id);
   298f2:	686b      	ldr	r3, [r5, #4]
			snprintk(disc_buf, sizeof(disc_buf), "%s</%u/%u>",
   298f4:	4a7c      	ldr	r2, [pc, #496]	; (29ae8 <handle_request+0xb54>)
   298f6:	8b1b      	ldrh	r3, [r3, #24]
   298f8:	2118      	movs	r1, #24
   298fa:	9300      	str	r3, [sp, #0]
   298fc:	4879      	ldr	r0, [pc, #484]	; (29ae4 <handle_request+0xb50>)
   298fe:	2e00      	cmp	r6, #0
   29900:	bf14      	ite	ne
   29902:	464b      	movne	r3, r9
   29904:	4653      	moveq	r3, sl
   29906:	f016 fe89 	bl	4061c <snprintk>
			ret = buf_append(CPKT_BUF_WRITE(msg->out.out_cpkt),
   2990a:	69a6      	ldr	r6, [r4, #24]
					 disc_buf, strlen(disc_buf));
   2990c:	4875      	ldr	r0, [pc, #468]	; (29ae4 <handle_request+0xb50>)
			ret = buf_append(CPKT_BUF_WRITE(msg->out.out_cpkt),
   2990e:	6837      	ldr	r7, [r6, #0]
   29910:	f8b6 8006 	ldrh.w	r8, [r6, #6]
					 disc_buf, strlen(disc_buf));
   29914:	f7f3 fc00 	bl	1d118 <strlen>
			ret = buf_append(CPKT_BUF_WRITE(msg->out.out_cpkt),
   29918:	b280      	uxth	r0, r0
   2991a:	9000      	str	r0, [sp, #0]
   2991c:	4b71      	ldr	r3, [pc, #452]	; (29ae4 <handle_request+0xb50>)
   2991e:	4642      	mov	r2, r8
   29920:	1d31      	adds	r1, r6, #4
   29922:	4638      	mov	r0, r7
   29924:	f019 fb04 	bl	42f30 <buf_append>
			if (ret < 0) {
   29928:	f1b0 0b00 	subs.w	fp, r0, #0
   2992c:	f6ff ad08 	blt.w	29340 <handle_request+0x3ac>
			ret = print_attr(&msg->out, disc_buf, sizeof(disc_buf),
   29930:	4629      	mov	r1, r5
   29932:	f104 0018 	add.w	r0, r4, #24
   29936:	f7fe fd31 	bl	2839c <print_attr.isra.9.constprop.29>
			if (ret < 0) {
   2993a:	f1b0 0b00 	subs.w	fp, r0, #0
   2993e:	f6ff acff 	blt.w	29340 <handle_request+0x3ac>
			reported = true;
   29942:	2601      	movs	r6, #1
		if (msg->ctx->bootstrap_mode) {
   29944:	6823      	ldr	r3, [r4, #0]
   29946:	f893 7128 	ldrb.w	r7, [r3, #296]	; 0x128
   2994a:	b917      	cbnz	r7, 29952 <handle_request+0x9be>
		for (int i = 0; i < obj_inst->resource_count; i++) {
   2994c:	89eb      	ldrh	r3, [r5, #14]
   2994e:	429f      	cmp	r7, r3
   29950:	db07      	blt.n	29962 <handle_request+0x9ce>
   29952:	682d      	ldr	r5, [r5, #0]
	SYS_SLIST_FOR_EACH_CONTAINER(&engine_obj_inst_list, obj_inst, node) {
   29954:	2d00      	cmp	r5, #0
   29956:	d18a      	bne.n	2986e <handle_request+0x8da>
	return reported ? 0 : -ENOENT;
   29958:	2e00      	cmp	r6, #0
   2995a:	f47f af45 	bne.w	297e8 <handle_request+0x854>
   2995e:	f7ff bb93 	b.w	29088 <handle_request+0xf4>
			if (msg->path.level == 3U &&
   29962:	f04f 0818 	mov.w	r8, #24
   29966:	fb08 f807 	mul.w	r8, r8, r7
   2996a:	68ab      	ldr	r3, [r5, #8]
   2996c:	f894 2028 	ldrb.w	r2, [r4, #40]	; 0x28
   29970:	4443      	add	r3, r8
   29972:	2a03      	cmp	r2, #3
   29974:	8a9b      	ldrh	r3, [r3, #20]
   29976:	d102      	bne.n	2997e <handle_request+0x9ea>
   29978:	8ca2      	ldrh	r2, [r4, #36]	; 0x24
   2997a:	429a      	cmp	r2, r3
   2997c:	d12a      	bne.n	299d4 <handle_request+0xa40>
			snprintk(disc_buf, sizeof(disc_buf),
   2997e:	9302      	str	r3, [sp, #8]
   29980:	89ab      	ldrh	r3, [r5, #12]
   29982:	2118      	movs	r1, #24
   29984:	9301      	str	r3, [sp, #4]
				 obj_inst->obj->obj_id,
   29986:	686b      	ldr	r3, [r5, #4]
			snprintk(disc_buf, sizeof(disc_buf),
   29988:	4a58      	ldr	r2, [pc, #352]	; (29aec <handle_request+0xb58>)
   2998a:	8b1b      	ldrh	r3, [r3, #24]
   2998c:	4855      	ldr	r0, [pc, #340]	; (29ae4 <handle_request+0xb50>)
   2998e:	9300      	str	r3, [sp, #0]
   29990:	2e00      	cmp	r6, #0
   29992:	bf14      	ite	ne
   29994:	464b      	movne	r3, r9
   29996:	4653      	moveq	r3, sl
   29998:	f016 fe40 	bl	4061c <snprintk>
			ret = buf_append(CPKT_BUF_WRITE(msg->out.out_cpkt),
   2999c:	f8d4 b018 	ldr.w	fp, [r4, #24]
					 disc_buf, strlen(disc_buf));
   299a0:	4850      	ldr	r0, [pc, #320]	; (29ae4 <handle_request+0xb50>)
			ret = buf_append(CPKT_BUF_WRITE(msg->out.out_cpkt),
   299a2:	f8bb 2006 	ldrh.w	r2, [fp, #6]
   299a6:	f8db 6000 	ldr.w	r6, [fp]
   299aa:	9204      	str	r2, [sp, #16]
					 disc_buf, strlen(disc_buf));
   299ac:	f7f3 fbb4 	bl	1d118 <strlen>
			ret = buf_append(CPKT_BUF_WRITE(msg->out.out_cpkt),
   299b0:	b280      	uxth	r0, r0
   299b2:	9000      	str	r0, [sp, #0]
   299b4:	f10b 0104 	add.w	r1, fp, #4
   299b8:	4b4a      	ldr	r3, [pc, #296]	; (29ae4 <handle_request+0xb50>)
   299ba:	9a04      	ldr	r2, [sp, #16]
   299bc:	4630      	mov	r0, r6
   299be:	f019 fab7 	bl	42f30 <buf_append>
			if (ret < 0) {
   299c2:	f1b0 0b00 	subs.w	fp, r0, #0
   299c6:	f6ff acbb 	blt.w	29340 <handle_request+0x3ac>
			if (msg->path.level > 1) {
   299ca:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
   299ce:	2b01      	cmp	r3, #1
   299d0:	d802      	bhi.n	299d8 <handle_request+0xa44>
			reported = true;
   299d2:	2601      	movs	r6, #1
		for (int i = 0; i < obj_inst->resource_count; i++) {
   299d4:	3701      	adds	r7, #1
   299d6:	e7b9      	b.n	2994c <handle_request+0x9b8>
						 &obj_inst->resources[i]);
   299d8:	68a9      	ldr	r1, [r5, #8]
				ret = print_attr(&msg->out,
   299da:	f104 0018 	add.w	r0, r4, #24
   299de:	4441      	add	r1, r8
   299e0:	f7fe fcdc 	bl	2839c <print_attr.isra.9.constprop.29>
				if (ret < 0) {
   299e4:	f1b0 0b00 	subs.w	fp, r0, #0
   299e8:	daf3      	bge.n	299d2 <handle_request+0xa3e>
   299ea:	e4a9      	b.n	29340 <handle_request+0x3ac>
	switch (format) {
   299ec:	f240 6305 	movw	r3, #1541	; 0x605
   299f0:	429f      	cmp	r7, r3
   299f2:	d003      	beq.n	299fc <handle_request+0xa68>
   299f4:	d806      	bhi.n	29a04 <handle_request+0xa70>
   299f6:	b10f      	cbz	r7, 299fc <handle_request+0xa68>
   299f8:	2f2a      	cmp	r7, #42	; 0x2a
   299fa:	d10b      	bne.n	29a14 <handle_request+0xa80>
		return do_write_op_plain_text(msg);
   299fc:	4620      	mov	r0, r4
   299fe:	f019 fc93 	bl	43328 <do_write_op_plain_text>
   29a02:	e57c      	b.n	294fe <handle_request+0x56a>
	switch (format) {
   29a04:	f240 6306 	movw	r3, #1542	; 0x606
   29a08:	429f      	cmp	r7, r3
   29a0a:	d017      	beq.n	29a3c <handle_request+0xaa8>
   29a0c:	f642 5316 	movw	r3, #11542	; 0x2d16
   29a10:	429f      	cmp	r7, r3
   29a12:	d013      	beq.n	29a3c <handle_request+0xaa8>
		LOG_ERR("Unsupported format: %u", format);
   29a14:	4b36      	ldr	r3, [pc, #216]	; (29af0 <handle_request+0xb5c>)
   29a16:	681b      	ldr	r3, [r3, #0]
   29a18:	075b      	lsls	r3, r3, #29
   29a1a:	f43f ab84 	beq.w	29126 <handle_request+0x192>
   29a1e:	2301      	movs	r3, #1
   29a20:	f04f 0200 	mov.w	r2, #0
   29a24:	4933      	ldr	r1, [pc, #204]	; (29af4 <handle_request+0xb60>)
   29a26:	f363 0207 	bfi	r2, r3, #0, #8
   29a2a:	4b33      	ldr	r3, [pc, #204]	; (29af8 <handle_request+0xb64>)
   29a2c:	4833      	ldr	r0, [pc, #204]	; (29afc <handle_request+0xb68>)
   29a2e:	1a5b      	subs	r3, r3, r1
   29a30:	08db      	lsrs	r3, r3, #3
   29a32:	f363 128f 	bfi	r2, r3, #6, #10
   29a36:	4639      	mov	r1, r7
   29a38:	f7ff bb73 	b.w	29122 <handle_request+0x18e>
		return do_write_op_tlv(msg);
   29a3c:	4620      	mov	r0, r4
   29a3e:	f019 ffe1 	bl	43a04 <do_write_op_tlv>
   29a42:	e55c      	b.n	294fe <handle_request+0x56a>
	struct lwm2m_engine_res *res = NULL;
   29a44:	2500      	movs	r5, #0
	struct notification_attrs nattrs = { 0 };
   29a46:	ae23      	add	r6, sp, #140	; 0x8c
   29a48:	2224      	movs	r2, #36	; 0x24
   29a4a:	4629      	mov	r1, r5
   29a4c:	4630      	mov	r0, r6
	struct lwm2m_engine_res *res = NULL;
   29a4e:	950e      	str	r5, [sp, #56]	; 0x38
	struct notification_attrs nattrs = { 0 };
   29a50:	f01b fa38 	bl	44ec4 <memset>
	void *nattr_ptrs[NR_LWM2M_ATTR] = {
   29a54:	ab29      	add	r3, sp, #164	; 0xa4
   29a56:	9318      	str	r3, [sp, #96]	; 0x60
   29a58:	ab2a      	add	r3, sp, #168	; 0xa8
   29a5a:	e9cd 3619 	strd	r3, r6, [sp, #100]	; 0x64
   29a5e:	ab25      	add	r3, sp, #148	; 0x94
   29a60:	931b      	str	r3, [sp, #108]	; 0x6c
   29a62:	ab27      	add	r3, sp, #156	; 0x9c
   29a64:	931c      	str	r3, [sp, #112]	; 0x70
	if (!obj || !msg) {
   29a66:	9b04      	ldr	r3, [sp, #16]
   29a68:	2b00      	cmp	r3, #0
   29a6a:	f43f ae35 	beq.w	296d8 <handle_request+0x744>
	if (obj->obj_id == LWM2M_OBJECT_SECURITY_ID) {
   29a6e:	9b04      	ldr	r3, [sp, #16]
   29a70:	8b1b      	ldrh	r3, [r3, #24]
   29a72:	2b00      	cmp	r3, #0
   29a74:	f43f ab08 	beq.w	29088 <handle_request+0xf4>
	nr_opt = coap_find_options(msg->in.in_cpkt, COAP_OPTION_URI_QUERY,
   29a78:	2305      	movs	r3, #5
   29a7a:	aa3c      	add	r2, sp, #240	; 0xf0
   29a7c:	210f      	movs	r1, #15
   29a7e:	68a0      	ldr	r0, [r4, #8]
   29a80:	f018 fcc0 	bl	42404 <coap_find_options>
	if (nr_opt <= 0) {
   29a84:	1e03      	subs	r3, r0, #0
   29a86:	930a      	str	r3, [sp, #40]	; 0x28
   29a88:	dc15      	bgt.n	29ab6 <handle_request+0xb22>
		LOG_ERR("No attribute found!");
   29a8a:	4b19      	ldr	r3, [pc, #100]	; (29af0 <handle_request+0xb5c>)
   29a8c:	681b      	ldr	r3, [r3, #0]
   29a8e:	075e      	lsls	r6, r3, #29
   29a90:	d102      	bne.n	29a98 <handle_request+0xb04>
	if (r < 0) {
   29a92:	f06f 0b10 	mvn.w	fp, #16
   29a96:	e453      	b.n	29340 <handle_request+0x3ac>
		LOG_ERR("No attribute found!");
   29a98:	2301      	movs	r3, #1
   29a9a:	f04f 0100 	mov.w	r1, #0
   29a9e:	4a15      	ldr	r2, [pc, #84]	; (29af4 <handle_request+0xb60>)
   29aa0:	f363 0107 	bfi	r1, r3, #0, #8
   29aa4:	4b14      	ldr	r3, [pc, #80]	; (29af8 <handle_request+0xb64>)
   29aa6:	4816      	ldr	r0, [pc, #88]	; (29b00 <handle_request+0xb6c>)
   29aa8:	1a9b      	subs	r3, r3, r2
   29aaa:	08db      	lsrs	r3, r3, #3
   29aac:	f363 118f 	bfi	r1, r3, #6, #10
   29ab0:	f016 ffc7 	bl	40a42 <log_0>
	if (r < 0) {
   29ab4:	e7ed      	b.n	29a92 <handle_request+0xafe>
	if (msg->path.level == 3U) {
   29ab6:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
   29aba:	2b03      	cmp	r3, #3
   29abc:	d126      	bne.n	29b0c <handle_request+0xb78>
		ret = path_to_objs(&msg->path, NULL, NULL, &res, NULL);
   29abe:	9500      	str	r5, [sp, #0]
   29ac0:	ab0e      	add	r3, sp, #56	; 0x38
   29ac2:	462a      	mov	r2, r5
   29ac4:	4629      	mov	r1, r5
   29ac6:	f104 0020 	add.w	r0, r4, #32
   29aca:	f7fe fd2d 	bl	28528 <path_to_objs>
		if (ret < 0) {
   29ace:	f1b0 0b00 	subs.w	fp, r0, #0
   29ad2:	f6ff ac35 	blt.w	29340 <handle_request+0x3ac>
		ref = res;
   29ad6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
	} else if (msg->path.level == 1U) {
   29ad8:	9305      	str	r3, [sp, #20]
   29ada:	e025      	b.n	29b28 <handle_request+0xb94>
   29adc:	2002247c 	.word	0x2002247c
   29ae0:	0004b0a2 	.word	0x0004b0a2
   29ae4:	20029a0c 	.word	0x20029a0c
   29ae8:	0004b0aa 	.word	0x0004b0aa
   29aec:	0004b0b5 	.word	0x0004b0b5
   29af0:	20032b0c 	.word	0x20032b0c
   29af4:	00045f08 	.word	0x00045f08
   29af8:	00046018 	.word	0x00046018
   29afc:	0004b0c3 	.word	0x0004b0c3
   29b00:	0004b0da 	.word	0x0004b0da
   29b04:	0004af40 	.word	0x0004af40
   29b08:	0004a299 	.word	0x0004a299
   29b0c:	2b01      	cmp	r3, #1
   29b0e:	f000 80eb 	beq.w	29ce8 <handle_request+0xd54>
	} else if (msg->path.level == 2U) {
   29b12:	2b02      	cmp	r3, #2
   29b14:	d1bd      	bne.n	29a92 <handle_request+0xafe>
		obj_inst = get_engine_obj_inst(msg->path.obj_id,
   29b16:	8c61      	ldrh	r1, [r4, #34]	; 0x22
   29b18:	8c20      	ldrh	r0, [r4, #32]
   29b1a:	f7fe f949 	bl	27db0 <get_engine_obj_inst>
		if (!obj_inst) {
   29b1e:	4605      	mov	r5, r0
   29b20:	2800      	cmp	r0, #0
   29b22:	f43f aab1 	beq.w	29088 <handle_request+0xf4>
   29b26:	9005      	str	r0, [sp, #20]
	ret = update_attrs(ref, &nattrs);
   29b28:	4631      	mov	r1, r6
   29b2a:	9805      	ldr	r0, [sp, #20]
   29b2c:	f7fe f9a4 	bl	27e78 <update_attrs>
	if (ret < 0) {
   29b30:	f1b0 0b00 	subs.w	fp, r0, #0
   29b34:	f6ff ac04 	blt.w	29340 <handle_request+0x3ac>
	for (i = 0; i < nr_opt; i++) {
   29b38:	f04f 0b00 	mov.w	fp, #0
   29b3c:	f10d 09f3 	add.w	r9, sp, #243	; 0xf3
		int limit = MIN(options[i].len, 5), plen = 0, vlen;
   29b40:	f819 3c01 	ldrb.w	r3, [r9, #-1]
		float32_value_t val = { 0 };
   29b44:	2600      	movs	r6, #0
		int limit = MIN(options[i].len, 5), plen = 0, vlen;
   29b46:	2b05      	cmp	r3, #5
   29b48:	bf28      	it	cs
   29b4a:	2305      	movcs	r3, #5
		float32_value_t val = { 0 };
   29b4c:	464a      	mov	r2, r9
   29b4e:	e9cd 6612 	strd	r6, r6, [sp, #72]	; 0x48
		while (plen < limit && options[i].value[plen] != '=') {
   29b52:	42b3      	cmp	r3, r6
   29b54:	dd04      	ble.n	29b60 <handle_request+0xbcc>
   29b56:	f812 1b01 	ldrb.w	r1, [r2], #1
   29b5a:	293d      	cmp	r1, #61	; 0x3d
   29b5c:	f040 80c6 	bne.w	29cec <handle_request+0xd58>
		if (plen != 2 && plen != 4) {
   29b60:	2e02      	cmp	r6, #2
   29b62:	d001      	beq.n	29b68 <handle_request+0xbd4>
   29b64:	2e04      	cmp	r6, #4
   29b66:	d10c      	bne.n	29b82 <handle_request+0xbee>
		int limit = MIN(options[i].len, 5), plen = 0, vlen;
   29b68:	2700      	movs	r7, #0
   29b6a:	f8df 8344 	ldr.w	r8, [pc, #836]	; 29eb0 <handle_request+0xf1c>
   29b6e:	b2fb      	uxtb	r3, r7
   29b70:	9309      	str	r3, [sp, #36]	; 0x24
			if (LWM2M_ATTR_LEN[type] == plen &&
   29b72:	f818 3b01 	ldrb.w	r3, [r8], #1
   29b76:	429e      	cmp	r6, r3
   29b78:	f000 80ba 	beq.w	29cf0 <handle_request+0xd5c>
   29b7c:	3701      	adds	r7, #1
		for (type = 0U; type < NR_LWM2M_ATTR; type++) {
   29b7e:	2f05      	cmp	r7, #5
   29b80:	d1f5      	bne.n	29b6e <handle_request+0xbda>
	for (i = 0; i < nr_opt; i++) {
   29b82:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   29b84:	f10b 0b01 	add.w	fp, fp, #1
   29b88:	455b      	cmp	r3, fp
   29b8a:	f109 0910 	add.w	r9, r9, #16
   29b8e:	d1d7      	bne.n	29b40 <handle_request+0xbac>
	if ((nattrs.flags & (BIT(LWM2M_ATTR_PMIN) | BIT(LWM2M_ATTR_PMAX))) &&
   29b90:	f89d 60ac 	ldrb.w	r6, [sp, #172]	; 0xac
   29b94:	07b0      	lsls	r0, r6, #30
   29b96:	d004      	beq.n	29ba2 <handle_request+0xc0e>
   29b98:	e9dd 2329 	ldrd	r2, r3, [sp, #164]	; 0xa4
   29b9c:	429a      	cmp	r2, r3
   29b9e:	f73f af78 	bgt.w	29a92 <handle_request+0xafe>
	if (nattrs.flags & (BIT(LWM2M_ATTR_LT) | BIT(LWM2M_ATTR_GT))) {
   29ba2:	f016 0f0c 	tst.w	r6, #12
   29ba6:	d01d      	beq.n	29be4 <handle_request+0xc50>
		if (!((nattrs.lt.val1 < nattrs.gt.val1) ||
   29ba8:	9a25      	ldr	r2, [sp, #148]	; 0x94
   29baa:	9823      	ldr	r0, [sp, #140]	; 0x8c
   29bac:	4282      	cmp	r2, r0
   29bae:	db04      	blt.n	29bba <handle_request+0xc26>
   29bb0:	9926      	ldr	r1, [sp, #152]	; 0x98
   29bb2:	9b24      	ldr	r3, [sp, #144]	; 0x90
   29bb4:	4299      	cmp	r1, r3
   29bb6:	f6bf af6c 	bge.w	29a92 <handle_request+0xafe>
		if (nattrs.flags & BIT(LWM2M_ATTR_STEP)) {
   29bba:	06f1      	lsls	r1, r6, #27
   29bbc:	d512      	bpl.n	29be4 <handle_request+0xc50>
				    nattrs.st.val2 * 2 / 1000000;
   29bbe:	9b28      	ldr	r3, [sp, #160]	; 0xa0
   29bc0:	4eb3      	ldr	r6, [pc, #716]	; (29e90 <handle_request+0xefc>)
   29bc2:	0059      	lsls	r1, r3, #1
			if (!(((nattrs.lt.val1 + st1) < nattrs.gt.val1) ||
   29bc4:	9b27      	ldr	r3, [sp, #156]	; 0x9c
   29bc6:	eb02 0243 	add.w	r2, r2, r3, lsl #1
				    nattrs.st.val2 * 2 / 1000000;
   29bca:	fb91 f3f6 	sdiv	r3, r1, r6
			if (!(((nattrs.lt.val1 + st1) < nattrs.gt.val1) ||
   29bce:	441a      	add	r2, r3
   29bd0:	4290      	cmp	r0, r2
   29bd2:	dc07      	bgt.n	29be4 <handle_request+0xc50>
			s32_t st2 = nattrs.st.val2 * 2 % 1000000;
   29bd4:	fb06 1313 	mls	r3, r6, r3, r1
			      ((nattrs.lt.val2 + st2) < nattrs.gt.val2))) {
   29bd8:	9a26      	ldr	r2, [sp, #152]	; 0x98
   29bda:	4413      	add	r3, r2
			if (!(((nattrs.lt.val1 + st1) < nattrs.gt.val1) ||
   29bdc:	9a24      	ldr	r2, [sp, #144]	; 0x90
   29bde:	4293      	cmp	r3, r2
   29be0:	f6bf af57 	bge.w	29a92 <handle_request+0xafe>
	s32_t base = 1000000, sign = 1;
   29be4:	2700      	movs	r7, #0
   29be6:	4eab      	ldr	r6, [pc, #684]	; (29e94 <handle_request+0xf00>)
   29be8:	46bb      	mov	fp, r7
   29bea:	46b2      	mov	sl, r6
		if (ref != write_attr_pool[i].ref) {
   29bec:	6832      	ldr	r2, [r6, #0]
   29bee:	9b05      	ldr	r3, [sp, #20]
   29bf0:	4293      	cmp	r3, r2
   29bf2:	d111      	bne.n	29c18 <handle_request+0xc84>
   29bf4:	f89d 20ac 	ldrb.w	r2, [sp, #172]	; 0xac
		type = attr->type;
   29bf8:	f896 800c 	ldrb.w	r8, [r6, #12]
		if (!(BIT(type) & nattrs.flags)) {
   29bfc:	fa22 f108 	lsr.w	r1, r2, r8
   29c00:	f011 0101 	ands.w	r1, r1, #1
   29c04:	f040 8165 	bne.w	29ed2 <handle_request+0xf3e>
__ssp_bos_icheck3(memset, void *, int)
   29c08:	2210      	movs	r2, #16
   29c0a:	4630      	mov	r0, r6
   29c0c:	f01b f95a 	bl	44ec4 <memset>
				update_observe_node = true;
   29c10:	f1b8 0f01 	cmp.w	r8, #1
   29c14:	bf98      	it	ls
   29c16:	2701      	movls	r7, #1
	for (i = 0; i < CONFIG_LWM2M_NUM_ATTR; i++) {
   29c18:	f10b 0b01 	add.w	fp, fp, #1
   29c1c:	f1bb 0f14 	cmp.w	fp, #20
   29c20:	f106 0610 	add.w	r6, r6, #16
   29c24:	d1e2      	bne.n	29bec <handle_request+0xc58>
   29c26:	2200      	movs	r2, #0
		nattrs.flags &= ~BIT(type);
   29c28:	f04f 0e01 	mov.w	lr, #1
   29c2c:	f10d 0c60 	add.w	ip, sp, #96	; 0x60
	for (type = 0U; nattrs.flags && type < NR_LWM2M_ATTR; type++) {
   29c30:	f89d 60ac 	ldrb.w	r6, [sp, #172]	; 0xac
   29c34:	b2d0      	uxtb	r0, r2
   29c36:	b116      	cbz	r6, 29c3e <handle_request+0xcaa>
   29c38:	2a05      	cmp	r2, #5
   29c3a:	f040 8173 	bne.w	29f24 <handle_request+0xf90>
	if (!update_observe_node) {
   29c3e:	2f00      	cmp	r7, #0
   29c40:	f43f add2 	beq.w	297e8 <handle_request+0x854>
	SYS_SLIST_FOR_EACH_CONTAINER(&engine_observer_list, obs, node) {
   29c44:	4b94      	ldr	r3, [pc, #592]	; (29e98 <handle_request+0xf04>)
   29c46:	681e      	ldr	r6, [r3, #0]
   29c48:	2e00      	cmp	r6, #0
   29c4a:	f43f adcd 	beq.w	297e8 <handle_request+0x854>
		if (msg->path.level > obs->path.level) {
   29c4e:	f894 2028 	ldrb.w	r2, [r4, #40]	; 0x28
   29c52:	7c33      	ldrb	r3, [r6, #16]
   29c54:	429a      	cmp	r2, r3
   29c56:	d845      	bhi.n	29ce4 <handle_request+0xd50>
		if (msg->path.obj_id != obs->path.obj_id) {
   29c58:	8c22      	ldrh	r2, [r4, #32]
   29c5a:	8933      	ldrh	r3, [r6, #8]
   29c5c:	429a      	cmp	r2, r3
   29c5e:	d141      	bne.n	29ce4 <handle_request+0xd50>
		nattrs.pmin = lwm2m_server_get_pmin(msg->ctx->sec_obj_inst);
   29c60:	6823      	ldr	r3, [r4, #0]
   29c62:	f8b3 0124 	ldrh.w	r0, [r3, #292]	; 0x124
   29c66:	f002 f8cd 	bl	2be04 <lwm2m_server_get_pmin>
		nattrs.pmax = lwm2m_server_get_pmax(msg->ctx->sec_obj_inst);
   29c6a:	6823      	ldr	r3, [r4, #0]
		nattrs.pmin = lwm2m_server_get_pmin(msg->ctx->sec_obj_inst);
   29c6c:	9029      	str	r0, [sp, #164]	; 0xa4
		nattrs.pmax = lwm2m_server_get_pmax(msg->ctx->sec_obj_inst);
   29c6e:	f8b3 0124 	ldrh.w	r0, [r3, #292]	; 0x124
   29c72:	f002 f8d7 	bl	2be24 <lwm2m_server_get_pmax>
		ret = update_attrs(obj, &nattrs);
   29c76:	a923      	add	r1, sp, #140	; 0x8c
		nattrs.pmax = lwm2m_server_get_pmax(msg->ctx->sec_obj_inst);
   29c78:	902a      	str	r0, [sp, #168]	; 0xa8
		ret = update_attrs(obj, &nattrs);
   29c7a:	9804      	ldr	r0, [sp, #16]
   29c7c:	f7fe f8fc 	bl	27e78 <update_attrs>
		if (ret < 0) {
   29c80:	f1b0 0b00 	subs.w	fp, r0, #0
   29c84:	f6ff ab5c 	blt.w	29340 <handle_request+0x3ac>
		if (obs->path.level > 1) {
   29c88:	7c33      	ldrb	r3, [r6, #16]
   29c8a:	2b01      	cmp	r3, #1
   29c8c:	d91a      	bls.n	29cc4 <handle_request+0xd30>
			if (msg->path.level > 1 &&
   29c8e:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
   29c92:	8971      	ldrh	r1, [r6, #10]
   29c94:	2b01      	cmp	r3, #1
   29c96:	d902      	bls.n	29c9e <handle_request+0xd0a>
   29c98:	8c63      	ldrh	r3, [r4, #34]	; 0x22
   29c9a:	428b      	cmp	r3, r1
   29c9c:	d122      	bne.n	29ce4 <handle_request+0xd50>
			if (!obj_inst || obj_inst->obj_inst_id !=
   29c9e:	b115      	cbz	r5, 29ca6 <handle_request+0xd12>
   29ca0:	89ab      	ldrh	r3, [r5, #12]
   29ca2:	428b      	cmp	r3, r1
   29ca4:	d006      	beq.n	29cb4 <handle_request+0xd20>
				obj_inst = get_engine_obj_inst(
   29ca6:	8930      	ldrh	r0, [r6, #8]
   29ca8:	f7fe f882 	bl	27db0 <get_engine_obj_inst>
				if (!obj_inst) {
   29cac:	4605      	mov	r5, r0
   29cae:	2800      	cmp	r0, #0
   29cb0:	f43f a9ea 	beq.w	29088 <handle_request+0xf4>
			ret = update_attrs(obj_inst, &nattrs);
   29cb4:	a923      	add	r1, sp, #140	; 0x8c
   29cb6:	4628      	mov	r0, r5
   29cb8:	f7fe f8de 	bl	27e78 <update_attrs>
			if (ret < 0) {
   29cbc:	f1b0 0b00 	subs.w	fp, r0, #0
   29cc0:	f6ff ab3e 	blt.w	29340 <handle_request+0x3ac>
		if (obs->path.level > 2) {
   29cc4:	7c33      	ldrb	r3, [r6, #16]
   29cc6:	2b02      	cmp	r3, #2
   29cc8:	f200 8146 	bhi.w	29f58 <handle_request+0xfc4>
		obs->min_period_sec = (u32_t)nattrs.pmin;
   29ccc:	9b29      	ldr	r3, [sp, #164]	; 0xa4
		obs->max_period_sec = (u32_t)MAX(nattrs.pmin, nattrs.pmax);
   29cce:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
		obs->min_period_sec = (u32_t)nattrs.pmin;
   29cd0:	6333      	str	r3, [r6, #48]	; 0x30
		obs->max_period_sec = (u32_t)MAX(nattrs.pmin, nattrs.pmax);
   29cd2:	429a      	cmp	r2, r3
   29cd4:	bfac      	ite	ge
   29cd6:	6372      	strge	r2, [r6, #52]	; 0x34
   29cd8:	6373      	strlt	r3, [r6, #52]	; 0x34
		(void)memset(&nattrs, 0, sizeof(nattrs));
   29cda:	2100      	movs	r1, #0
   29cdc:	2224      	movs	r2, #36	; 0x24
   29cde:	a823      	add	r0, sp, #140	; 0x8c
   29ce0:	f01b f8f0 	bl	44ec4 <memset>
   29ce4:	6836      	ldr	r6, [r6, #0]
	return node->next;
   29ce6:	e7af      	b.n	29c48 <handle_request+0xcb4>
	} else if (msg->path.level == 1U) {
   29ce8:	9b04      	ldr	r3, [sp, #16]
   29cea:	e6f5      	b.n	29ad8 <handle_request+0xb44>
			plen += 1;
   29cec:	3601      	adds	r6, #1
   29cee:	e730      	b.n	29b52 <handle_request+0xbbe>
			    !memcmp(options[i].value, LWM2M_ATTR_STR[type],
   29cf0:	4b6a      	ldr	r3, [pc, #424]	; (29e9c <handle_request+0xf08>)
   29cf2:	4632      	mov	r2, r6
   29cf4:	f853 3027 	ldr.w	r3, [r3, r7, lsl #2]
   29cf8:	4648      	mov	r0, r9
   29cfa:	4619      	mov	r1, r3
   29cfc:	9306      	str	r3, [sp, #24]
   29cfe:	f01b f899 	bl	44e34 <memcmp>
			if (LWM2M_ATTR_LEN[type] == plen &&
   29d02:	4601      	mov	r1, r0
   29d04:	2800      	cmp	r0, #0
   29d06:	f47f af39 	bne.w	29b7c <handle_request+0xbe8>
		if (options[i].len == plen) {
   29d0a:	f819 8c01 	ldrb.w	r8, [r9, #-1]
   29d0e:	4546      	cmp	r6, r8
   29d10:	d115      	bne.n	29d3e <handle_request+0xdaa>
			nattrs.flags &= ~BIT(type);
   29d12:	2301      	movs	r3, #1
   29d14:	fa03 f207 	lsl.w	r2, r3, r7
   29d18:	f89d 30ac 	ldrb.w	r3, [sp, #172]	; 0xac
   29d1c:	ea23 0302 	bic.w	r3, r3, r2
   29d20:	f88d 30ac 	strb.w	r3, [sp, #172]	; 0xac
			(void)memset(nattr_ptrs[type], 0,
   29d24:	ab50      	add	r3, sp, #320	; 0x140
   29d26:	eb03 0787 	add.w	r7, r3, r7, lsl #2
   29d2a:	9b09      	ldr	r3, [sp, #36]	; 0x24
   29d2c:	f857 0ce0 	ldr.w	r0, [r7, #-224]
   29d30:	2b02      	cmp	r3, #2
   29d32:	bf34      	ite	cc
   29d34:	2204      	movcc	r2, #4
   29d36:	2208      	movcs	r2, #8
   29d38:	f01b f8c4 	bl	44ec4 <memset>
			continue;
   29d3c:	e721      	b.n	29b82 <handle_request+0xbee>
		if (plen == 2 && msg->path.level <= 2U) {
   29d3e:	2e02      	cmp	r6, #2
   29d40:	d104      	bne.n	29d4c <handle_request+0xdb8>
   29d42:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
   29d46:	2b02      	cmp	r3, #2
   29d48:	f67f aea3 	bls.w	29a92 <handle_request+0xafe>
		opt_buf[vlen] = '\0';
   29d4c:	f04f 0a00 	mov.w	sl, #0
		vlen = options[i].len - plen - 1;
   29d50:	f108 38ff 	add.w	r8, r8, #4294967295
   29d54:	eba8 0806 	sub.w	r8, r8, r6
		memcpy(opt_buf, options[i].value + plen + 1, vlen);
   29d58:	1c71      	adds	r1, r6, #1
   29d5a:	230d      	movs	r3, #13
   29d5c:	4642      	mov	r2, r8
   29d5e:	4449      	add	r1, r9
   29d60:	a814      	add	r0, sp, #80	; 0x50
   29d62:	f01b f882 	bl	44e6a <__memcpy_chk>
		opt_buf[vlen] = '\0';
   29d66:	ab50      	add	r3, sp, #320	; 0x140
   29d68:	4498      	add	r8, r3
		if (plen == 4) {
   29d6a:	2e04      	cmp	r6, #4
		opt_buf[vlen] = '\0';
   29d6c:	f808 acf0 	strb.w	sl, [r8, #-240]
		if (plen == 4) {
   29d70:	d145      	bne.n	29dfe <handle_request+0xe6a>
			errno = 0;
   29d72:	f018 ff6e 	bl	42c52 <__errno>
			v = strtol(opt_buf, &end, 10);
   29d76:	220a      	movs	r2, #10
			errno = 0;
   29d78:	f8c0 a000 	str.w	sl, [r0]
			v = strtol(opt_buf, &end, 10);
   29d7c:	a91d      	add	r1, sp, #116	; 0x74
   29d7e:	a814      	add	r0, sp, #80	; 0x50
   29d80:	f015 fbac 	bl	3f4dc <strtol>
   29d84:	4606      	mov	r6, r0
			if (errno || *end || v < 0) {
   29d86:	f018 ff64 	bl	42c52 <__errno>
   29d8a:	6803      	ldr	r3, [r0, #0]
   29d8c:	b923      	cbnz	r3, 29d98 <handle_request+0xe04>
   29d8e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   29d90:	781b      	ldrb	r3, [r3, #0]
   29d92:	b90b      	cbnz	r3, 29d98 <handle_request+0xe04>
   29d94:	4556      	cmp	r6, sl
   29d96:	da19      	bge.n	29dcc <handle_request+0xe38>
			val.val1 = v;
   29d98:	9612      	str	r6, [sp, #72]	; 0x48
			LOG_ERR("invalid attr[%s] value",
   29d9a:	4b41      	ldr	r3, [pc, #260]	; (29ea0 <handle_request+0xf0c>)
   29d9c:	681b      	ldr	r3, [r3, #0]
   29d9e:	075d      	lsls	r5, r3, #29
   29da0:	f43f ae77 	beq.w	29a92 <handle_request+0xafe>
   29da4:	2301      	movs	r3, #1
   29da6:	f04f 0500 	mov.w	r5, #0
   29daa:	4a3e      	ldr	r2, [pc, #248]	; (29ea4 <handle_request+0xf10>)
   29dac:	f363 0507 	bfi	r5, r3, #0, #8
   29db0:	4b3d      	ldr	r3, [pc, #244]	; (29ea8 <handle_request+0xf14>)
   29db2:	9806      	ldr	r0, [sp, #24]
   29db4:	1a9b      	subs	r3, r3, r2
   29db6:	08db      	lsrs	r3, r3, #3
   29db8:	f363 158f 	bfi	r5, r3, #6, #10
   29dbc:	f7f7 ff76 	bl	21cac <log_strdup>
   29dc0:	462a      	mov	r2, r5
   29dc2:	4601      	mov	r1, r0
   29dc4:	4839      	ldr	r0, [pc, #228]	; (29eac <handle_request+0xf18>)
   29dc6:	f016 fe49 	bl	40a5c <log_1>
   29dca:	e662      	b.n	29a92 <handle_request+0xafe>
			val.val1 = v;
   29dcc:	9612      	str	r6, [sp, #72]	; 0x48
		if (type <= LWM2M_ATTR_PMAX) {
   29dce:	ab50      	add	r3, sp, #320	; 0x140
   29dd0:	eb03 0387 	add.w	r3, r3, r7, lsl #2
   29dd4:	f853 2ce0 	ldr.w	r2, [r3, #-224]
   29dd8:	9b09      	ldr	r3, [sp, #36]	; 0x24
   29dda:	2b01      	cmp	r3, #1
			*(s32_t *)nattr_ptrs[type] = val.val1;
   29ddc:	bf95      	itete	ls
   29dde:	9b12      	ldrls	r3, [sp, #72]	; 0x48
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   29de0:	ab12      	addhi	r3, sp, #72	; 0x48
   29de2:	6013      	strls	r3, [r2, #0]
   29de4:	cb03      	ldmiahi	r3!, {r0, r1}
		nattrs.flags |= BIT(type);
   29de6:	f04f 0301 	mov.w	r3, #1
   29dea:	bf84      	itt	hi
   29dec:	6010      	strhi	r0, [r2, #0]
   29dee:	6051      	strhi	r1, [r2, #4]
   29df0:	40bb      	lsls	r3, r7
   29df2:	f89d 70ac 	ldrb.w	r7, [sp, #172]	; 0xac
   29df6:	431f      	orrs	r7, r3
   29df8:	f88d 70ac 	strb.w	r7, [sp, #172]	; 0xac
   29dfc:	e6c1      	b.n	29b82 <handle_request+0xbee>
	strncpy(buf, input, sizeof(buf) - 1);
   29dfe:	2217      	movs	r2, #23
   29e00:	a914      	add	r1, sp, #80	; 0x50
   29e02:	a81d      	add	r0, sp, #116	; 0x74
   29e04:	f01b f9be 	bl	45184 <strncpy>
	if (strchr(buf, '-')) {
   29e08:	212d      	movs	r1, #45	; 0x2d
   29e0a:	a81d      	add	r0, sp, #116	; 0x74
	buf[sizeof(buf) - 1] = '\0';
   29e0c:	f88d a08b 	strb.w	sl, [sp, #139]	; 0x8b
	if (strchr(buf, '-')) {
   29e10:	f01b f991 	bl	45136 <strchr>
		sign = -1;
   29e14:	2800      	cmp	r0, #0
   29e16:	bf0c      	ite	eq
   29e18:	2301      	moveq	r3, #1
   29e1a:	f04f 33ff 	movne.w	r3, #4294967295
	pos = strchr(buf, '.');
   29e1e:	212e      	movs	r1, #46	; 0x2e
   29e20:	a81d      	add	r0, sp, #116	; 0x74
		sign = -1;
   29e22:	930b      	str	r3, [sp, #44]	; 0x2c
	pos = strchr(buf, '.');
   29e24:	f01b f987 	bl	45136 <strchr>
	if (pos) {
   29e28:	4606      	mov	r6, r0
   29e2a:	b108      	cbz	r0, 29e30 <handle_request+0xe9c>
		*pos = '\0';
   29e2c:	f880 a000 	strb.w	sl, [r0]
	errno = 0;
   29e30:	f018 ff0f 	bl	42c52 <__errno>
   29e34:	2300      	movs	r3, #0
	val = strtol(buf, &end, 10);
   29e36:	220a      	movs	r2, #10
	errno = 0;
   29e38:	6003      	str	r3, [r0, #0]
	val = strtol(buf, &end, 10);
   29e3a:	a90f      	add	r1, sp, #60	; 0x3c
   29e3c:	a81d      	add	r0, sp, #116	; 0x74
   29e3e:	f015 fb4d 	bl	3f4dc <strtol>
   29e42:	4680      	mov	r8, r0
	if (errno || *end || val < INT_MIN) {
   29e44:	f018 ff05 	bl	42c52 <__errno>
   29e48:	6803      	ldr	r3, [r0, #0]
   29e4a:	2b00      	cmp	r3, #0
   29e4c:	d1a5      	bne.n	29d9a <handle_request+0xe06>
   29e4e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   29e50:	7812      	ldrb	r2, [r2, #0]
   29e52:	2a00      	cmp	r2, #0
   29e54:	d1a1      	bne.n	29d9a <handle_request+0xe06>
	out->val1 = (s32_t) val;
   29e56:	f8cd 8048 	str.w	r8, [sp, #72]	; 0x48
	if (!pos) {
   29e5a:	2e00      	cmp	r6, #0
   29e5c:	d0b7      	beq.n	29dce <handle_request+0xe3a>
   29e5e:	4618      	mov	r0, r3
		out->val2 = out->val2 * 10 + (*pos - '0');
   29e60:	f04f 0c0a 	mov.w	ip, #10
	s32_t base = 1000000, sign = 1;
   29e64:	f8df a028 	ldr.w	sl, [pc, #40]	; 29e90 <handle_request+0xefc>
   29e68:	f106 0807 	add.w	r8, r6, #7
	while (*(++pos) && base > 1 && isdigit((unsigned char)*pos)) {
   29e6c:	f816 2f01 	ldrb.w	r2, [r6, #1]!
   29e70:	bb02      	cbnz	r2, 29eb4 <handle_request+0xf20>
   29e72:	b100      	cbz	r0, 29e76 <handle_request+0xee2>
   29e74:	9313      	str	r3, [sp, #76]	; 0x4c
	out->val2 *= sign * base;
   29e76:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   29e78:	990b      	ldr	r1, [sp, #44]	; 0x2c
   29e7a:	434b      	muls	r3, r1
   29e7c:	fb0a f303 	mul.w	r3, sl, r3
   29e80:	9313      	str	r3, [sp, #76]	; 0x4c
	return !*pos || base == 1 ? 0 : -EINVAL;
   29e82:	2a00      	cmp	r2, #0
   29e84:	d0a3      	beq.n	29dce <handle_request+0xe3a>
   29e86:	f1ba 0f01 	cmp.w	sl, #1
   29e8a:	d0a0      	beq.n	29dce <handle_request+0xe3a>
   29e8c:	e785      	b.n	29d9a <handle_request+0xe06>
   29e8e:	bf00      	nop
   29e90:	000f4240 	.word	0x000f4240
   29e94:	200234c4 	.word	0x200234c4
   29e98:	2002248c 	.word	0x2002248c
   29e9c:	00046c38 	.word	0x00046c38
   29ea0:	20032b0c 	.word	0x20032b0c
   29ea4:	00045f08 	.word	0x00045f08
   29ea8:	00046018 	.word	0x00046018
   29eac:	0004b0ee 	.word	0x0004b0ee
   29eb0:	0004ae00 	.word	0x0004ae00
	while (*(++pos) && base > 1 && isdigit((unsigned char)*pos)) {
   29eb4:	45b0      	cmp	r8, r6
   29eb6:	d0dc      	beq.n	29e72 <handle_request+0xede>
   29eb8:	4995      	ldr	r1, [pc, #596]	; (2a110 <handle_request+0x117c>)
   29eba:	f812 e001 	ldrb.w	lr, [r2, r1]
   29ebe:	f01e 0f04 	tst.w	lr, #4
   29ec2:	d0d6      	beq.n	29e72 <handle_request+0xede>
		out->val2 = out->val2 * 10 + (*pos - '0');
   29ec4:	3a30      	subs	r2, #48	; 0x30
   29ec6:	fb0c 2303 	mla	r3, ip, r3, r2
		base /= 10;
   29eca:	fb9a fafc 	sdiv	sl, sl, ip
   29ece:	2001      	movs	r0, #1
   29ed0:	e7cc      	b.n	29e6c <handle_request+0xed8>
		nattrs.flags &= ~BIT(type);
   29ed2:	2301      	movs	r3, #1
   29ed4:	fa03 f108 	lsl.w	r1, r3, r8
   29ed8:	ea22 0201 	bic.w	r2, r2, r1
   29edc:	ab50      	add	r3, sp, #320	; 0x140
   29ede:	f88d 20ac 	strb.w	r2, [sp, #172]	; 0xac
		if (type <= LWM2M_ATTR_PMAX) {
   29ee2:	f1b8 0f01 	cmp.w	r8, #1
   29ee6:	eb03 0288 	add.w	r2, r3, r8, lsl #2
   29eea:	f852 9ce0 	ldr.w	r9, [r2, #-224]
   29eee:	d808      	bhi.n	29f02 <handle_request+0xf6e>
			if (attr->int_val == *(s32_t *)nattr_ptrs[type]) {
   29ef0:	f8d9 2000 	ldr.w	r2, [r9]
   29ef4:	6871      	ldr	r1, [r6, #4]
   29ef6:	4291      	cmp	r1, r2
   29ef8:	f43f ae8e 	beq.w	29c18 <handle_request+0xc84>
			attr->int_val = *(s32_t *)nattr_ptrs[type];
   29efc:	6072      	str	r2, [r6, #4]
			update_observe_node = true;
   29efe:	2701      	movs	r7, #1
   29f00:	e68a      	b.n	29c18 <handle_request+0xc84>
			if (!memcmp(&attr->float_val, nattr_ptrs[type],
   29f02:	f106 0804 	add.w	r8, r6, #4
   29f06:	2208      	movs	r2, #8
   29f08:	4649      	mov	r1, r9
   29f0a:	4640      	mov	r0, r8
   29f0c:	f01a ff92 	bl	44e34 <memcmp>
   29f10:	2800      	cmp	r0, #0
   29f12:	f43f ae81 	beq.w	29c18 <handle_request+0xc84>
   29f16:	f8d9 2000 	ldr.w	r2, [r9]
   29f1a:	6072      	str	r2, [r6, #4]
   29f1c:	f8d9 2004 	ldr.w	r2, [r9, #4]
   29f20:	60b2      	str	r2, [r6, #8]
   29f22:	e679      	b.n	29c18 <handle_request+0xc84>
		if (!(BIT(type) & nattrs.flags)) {
   29f24:	fa26 f302 	lsr.w	r3, r6, r2
   29f28:	07db      	lsls	r3, r3, #31
   29f2a:	f140 80ee 	bpl.w	2a10a <handle_request+0x1176>
		for (i = 0; i < CONFIG_LWM2M_NUM_ATTR; i++) {
   29f2e:	f04f 0800 	mov.w	r8, #0
			if (!write_attr_pool[i].ref) {
   29f32:	ea4f 1108 	mov.w	r1, r8, lsl #4
   29f36:	f85a 3001 	ldr.w	r3, [sl, r1]
   29f3a:	2b00      	cmp	r3, #0
   29f3c:	f000 80d1 	beq.w	2a0e2 <handle_request+0x114e>
		for (i = 0; i < CONFIG_LWM2M_NUM_ATTR; i++) {
   29f40:	f108 0801 	add.w	r8, r8, #1
   29f44:	f1b8 0f14 	cmp.w	r8, #20
   29f48:	d1f3      	bne.n	29f32 <handle_request+0xf9e>
   29f4a:	f7ff b965 	b.w	29218 <handle_request+0x284>
   29f4e:	6808      	ldr	r0, [r1, #0]
   29f50:	6849      	ldr	r1, [r1, #4]
   29f52:	3304      	adds	r3, #4
   29f54:	c303      	stmia	r3!, {r0, r1}
   29f56:	e0d2      	b.n	2a0fe <handle_request+0x116a>
			if (msg->path.level > 2 &&
   29f58:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
   29f5c:	2b02      	cmp	r3, #2
   29f5e:	d904      	bls.n	29f6a <handle_request+0xfd6>
   29f60:	8ca2      	ldrh	r2, [r4, #36]	; 0x24
   29f62:	89b3      	ldrh	r3, [r6, #12]
   29f64:	429a      	cmp	r2, r3
   29f66:	f47f aebd 	bne.w	29ce4 <handle_request+0xd50>
			if (!res || res->res_id != obs->path.res_id) {
   29f6a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   29f6c:	b16b      	cbz	r3, 29f8a <handle_request+0xff6>
   29f6e:	8a9a      	ldrh	r2, [r3, #20]
   29f70:	89b3      	ldrh	r3, [r6, #12]
   29f72:	429a      	cmp	r2, r3
   29f74:	d109      	bne.n	29f8a <handle_request+0xff6>
			ret = update_attrs(res, &nattrs);
   29f76:	a923      	add	r1, sp, #140	; 0x8c
   29f78:	980e      	ldr	r0, [sp, #56]	; 0x38
   29f7a:	f7fd ff7d 	bl	27e78 <update_attrs>
			if (ret < 0) {
   29f7e:	f1b0 0b00 	subs.w	fp, r0, #0
   29f82:	f6bf aea3 	bge.w	29ccc <handle_request+0xd38>
   29f86:	f7ff b9db 	b.w	29340 <handle_request+0x3ac>
				ret = path_to_objs(&obs->path, NULL, NULL,
   29f8a:	2200      	movs	r2, #0
   29f8c:	ab0e      	add	r3, sp, #56	; 0x38
   29f8e:	9200      	str	r2, [sp, #0]
   29f90:	4611      	mov	r1, r2
   29f92:	f106 0008 	add.w	r0, r6, #8
   29f96:	f7fe fac7 	bl	28528 <path_to_objs>
				if (ret < 0) {
   29f9a:	f1b0 0b00 	subs.w	fp, r0, #0
   29f9e:	daea      	bge.n	29f76 <handle_request+0xfe2>
   29fa0:	f7ff b9ce 	b.w	29340 <handle_request+0x3ac>
	struct lwm2m_engine_res *res = NULL;
   29fa4:	2200      	movs	r2, #0
	ret = path_to_objs(&msg->path, &obj_inst, NULL, &res, NULL);
   29fa6:	ab3c      	add	r3, sp, #240	; 0xf0
   29fa8:	9200      	str	r2, [sp, #0]
   29faa:	a923      	add	r1, sp, #140	; 0x8c
   29fac:	f104 0020 	add.w	r0, r4, #32
	struct lwm2m_engine_res *res = NULL;
   29fb0:	923c      	str	r2, [sp, #240]	; 0xf0
	ret = path_to_objs(&msg->path, &obj_inst, NULL, &res, NULL);
   29fb2:	f7fe fab9 	bl	28528 <path_to_objs>
	if (ret < 0) {
   29fb6:	f1b0 0b00 	subs.w	fp, r0, #0
   29fba:	f6ff a9c1 	blt.w	29340 <handle_request+0x3ac>
	if (res->execute_cb) {
   29fbe:	9b3c      	ldr	r3, [sp, #240]	; 0xf0
   29fc0:	68db      	ldr	r3, [r3, #12]
   29fc2:	2b00      	cmp	r3, #0
   29fc4:	f43f a860 	beq.w	29088 <handle_request+0xf4>
		return res->execute_cb(obj_inst->obj_inst_id);
   29fc8:	9a23      	ldr	r2, [sp, #140]	; 0x8c
   29fca:	8990      	ldrh	r0, [r2, #12]
   29fcc:	4798      	blx	r3
   29fce:	f7ff ba96 	b.w	294fe <handle_request+0x56a>
	ret = lwm2m_delete_obj_inst(msg->path.obj_id, msg->path.obj_inst_id);
   29fd2:	8c61      	ldrh	r1, [r4, #34]	; 0x22
   29fd4:	8c20      	ldrh	r0, [r4, #32]
   29fd6:	f7fe fd5b 	bl	28a90 <lwm2m_delete_obj_inst>
	if (!ret && !msg->ctx->bootstrap_mode) {
   29fda:	4683      	mov	fp, r0
   29fdc:	2800      	cmp	r0, #0
   29fde:	f47f aa8f 	bne.w	29500 <handle_request+0x56c>
   29fe2:	6823      	ldr	r3, [r4, #0]
   29fe4:	f893 3128 	ldrb.w	r3, [r3, #296]	; 0x128
   29fe8:	2b00      	cmp	r3, #0
   29fea:	f47f abfd 	bne.w	297e8 <handle_request+0x854>
		engine_trigger_update();
   29fee:	f003 f9a3 	bl	2d338 <engine_trigger_update>
   29ff2:	f7ff bbf9 	b.w	297e8 <handle_request+0x854>
		LOG_ERR("Unknown operation: %u", msg->operation);
   29ff6:	4b47      	ldr	r3, [pc, #284]	; (2a114 <handle_request+0x1180>)
   29ff8:	681b      	ldr	r3, [r3, #0]
   29ffa:	0758      	lsls	r0, r3, #29
   29ffc:	f43f ab6c 	beq.w	296d8 <handle_request+0x744>
   2a000:	2301      	movs	r3, #1
   2a002:	f04f 0200 	mov.w	r2, #0
   2a006:	4844      	ldr	r0, [pc, #272]	; (2a118 <handle_request+0x1184>)
   2a008:	f363 0207 	bfi	r2, r3, #0, #8
   2a00c:	4b43      	ldr	r3, [pc, #268]	; (2a11c <handle_request+0x1188>)
   2a00e:	1a1b      	subs	r3, r3, r0
   2a010:	08db      	lsrs	r3, r3, #3
   2a012:	4843      	ldr	r0, [pc, #268]	; (2a120 <handle_request+0x118c>)
   2a014:	f363 128f 	bfi	r2, r3, #6, #10
   2a018:	f016 fd20 	bl	40a5c <log_1>
   2a01c:	f7ff bb5c 	b.w	296d8 <handle_request+0x744>
	ctx->tkl = 0U;
   2a020:	2300      	movs	r3, #0
   2a022:	f881 3020 	strb.w	r3, [r1, #32]
}
   2a026:	2000      	movs	r0, #0
   2a028:	b051      	add	sp, #324	; 0x144
   2a02a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			r = -EFBIG;
   2a02e:	f06f 0b1a 	mvn.w	fp, #26
   2a032:	f7ff b985 	b.w	29340 <handle_request+0x3ac>
		return -EPERM;
   2a036:	f04f 3bff 	mov.w	fp, #4294967295
   2a03a:	f7ff b981 	b.w	29340 <handle_request+0x3ac>
	} else if (r == -EPERM) {
   2a03e:	f1bb 3fff 	cmp.w	fp, #4294967295
   2a042:	d102      	bne.n	2a04a <handle_request+0x10b6>
		msg->code = COAP_RESPONSE_CODE_NOT_ALLOWED;
   2a044:	2385      	movs	r3, #133	; 0x85
   2a046:	f7ff b984 	b.w	29352 <handle_request+0x3be>
	} else if (r == -EEXIST) {
   2a04a:	f11b 0f11 	cmn.w	fp, #17
   2a04e:	d102      	bne.n	2a056 <handle_request+0x10c2>
		msg->code = COAP_RESPONSE_CODE_BAD_REQUEST;
   2a050:	2380      	movs	r3, #128	; 0x80
   2a052:	f7ff b97e 	b.w	29352 <handle_request+0x3be>
	} else if (r == -EFAULT) {
   2a056:	f11b 0f0e 	cmn.w	fp, #14
   2a05a:	d102      	bne.n	2a062 <handle_request+0x10ce>
		msg->code = COAP_RESPONSE_CODE_INCOMPLETE;
   2a05c:	2388      	movs	r3, #136	; 0x88
   2a05e:	f7ff b978 	b.w	29352 <handle_request+0x3be>
	} else if (r == -EFBIG) {
   2a062:	f11b 0f1b 	cmn.w	fp, #27
   2a066:	d102      	bne.n	2a06e <handle_request+0x10da>
		msg->code = COAP_RESPONSE_CODE_REQUEST_TOO_LARGE;
   2a068:	238d      	movs	r3, #141	; 0x8d
   2a06a:	f7ff b972 	b.w	29352 <handle_request+0x3be>
	} else if (r == -ENOTSUP) {
   2a06e:	f11b 0f86 	cmn.w	fp, #134	; 0x86
   2a072:	d102      	bne.n	2a07a <handle_request+0x10e6>
		msg->code = COAP_RESPONSE_CODE_NOT_IMPLEMENTED;
   2a074:	23a1      	movs	r3, #161	; 0xa1
   2a076:	f7ff b96c 	b.w	29352 <handle_request+0x3be>
	} else if (r == -ENOMSG) {
   2a07a:	f11b 0f23 	cmn.w	fp, #35	; 0x23
		msg->code = COAP_RESPONSE_CODE_UNSUPPORTED_CONTENT_FORMAT;
   2a07e:	bf0c      	ite	eq
   2a080:	238f      	moveq	r3, #143	; 0x8f
		msg->code = COAP_RESPONSE_CODE_INTERNAL_ERROR;
   2a082:	23a0      	movne	r3, #160	; 0xa0
   2a084:	f7ff b965 	b.w	29352 <handle_request+0x3be>
   2a088:	4622      	mov	r2, r4
	observe_node_data[i].ctx = msg->ctx;
   2a08a:	6823      	ldr	r3, [r4, #0]
   2a08c:	01ad      	lsls	r5, r5, #6
   2a08e:	197e      	adds	r6, r7, r5
   2a090:	6073      	str	r3, [r6, #4]
   2a092:	f852 0f20 	ldr.w	r0, [r2, #32]!
	memcpy(&observe_node_data[i].path, &msg->path, sizeof(msg->path));
   2a096:	f105 0308 	add.w	r3, r5, #8
   2a09a:	6851      	ldr	r1, [r2, #4]
   2a09c:	443b      	add	r3, r7
   2a09e:	c303      	stmia	r3!, {r0, r1}
   2a0a0:	8912      	ldrh	r2, [r2, #8]
	memcpy(observe_node_data[i].token, token, tkl);
   2a0a2:	3512      	adds	r5, #18
   2a0a4:	801a      	strh	r2, [r3, #0]
   2a0a6:	a910      	add	r1, sp, #64	; 0x40
   2a0a8:	4642      	mov	r2, r8
   2a0aa:	1978      	adds	r0, r7, r5
   2a0ac:	f01a fed0 	bl	44e50 <memcpy>
	observe_node_data[i].tkl = tkl;
   2a0b0:	f886 803e 	strb.w	r8, [r6, #62]	; 0x3e
	observe_node_data[i].last_timestamp = k_uptime_get();
   2a0b4:	f018 ff21 	bl	42efa <k_uptime_get>
	observe_node_data[i].min_period_sec = attrs.pmin;
   2a0b8:	9b42      	ldr	r3, [sp, #264]	; 0x108
	observe_node_data[i].max_period_sec = MAX(attrs.pmax, attrs.pmin);
   2a0ba:	9a43      	ldr	r2, [sp, #268]	; 0x10c
	observe_node_data[i].min_period_sec = attrs.pmin;
   2a0bc:	6333      	str	r3, [r6, #48]	; 0x30
	observe_node_data[i].max_period_sec = MAX(attrs.pmax, attrs.pmin);
   2a0be:	429a      	cmp	r2, r3
   2a0c0:	bfac      	ite	ge
   2a0c2:	6372      	strge	r2, [r6, #52]	; 0x34
   2a0c4:	6373      	strlt	r3, [r6, #52]	; 0x34
	observe_node_data[i].counter = 1U;
   2a0c6:	2301      	movs	r3, #1
	observe_node_data[i].last_timestamp = k_uptime_get();
   2a0c8:	e9c6 010a 	strd	r0, r1, [r6, #40]	; 0x28
	observe_node_data[i].event_timestamp =
   2a0cc:	e9c6 0108 	strd	r0, r1, [r6, #32]
	observe_node_data[i].format = format;
   2a0d0:	f8a6 903c 	strh.w	r9, [r6, #60]	; 0x3c
	observe_node_data[i].counter = 1U;
   2a0d4:	63b3      	str	r3, [r6, #56]	; 0x38
	sys_slist_append(&engine_observer_list,
   2a0d6:	4631      	mov	r1, r6
   2a0d8:	4812      	ldr	r0, [pc, #72]	; (2a124 <handle_request+0x1190>)
   2a0da:	f018 fee1 	bl	42ea0 <sys_slist_append>
				if (r < 0) {
   2a0de:	f7ff ba0a 	b.w	294f6 <handle_request+0x562>
		attr = write_attr_pool + i;
   2a0e2:	eb0a 0301 	add.w	r3, sl, r1
		attr->type = type;
   2a0e6:	7318      	strb	r0, [r3, #12]
		attr->ref = ref;
   2a0e8:	9805      	ldr	r0, [sp, #20]
		if (type <= LWM2M_ATTR_PMAX) {
   2a0ea:	2a01      	cmp	r2, #1
		attr->ref = ref;
   2a0ec:	f84a 0001 	str.w	r0, [sl, r1]
		if (type <= LWM2M_ATTR_PMAX) {
   2a0f0:	f85c 1022 	ldr.w	r1, [ip, r2, lsl #2]
   2a0f4:	f63f af2b 	bhi.w	29f4e <handle_request+0xfba>
			update_observe_node = true;
   2a0f8:	2701      	movs	r7, #1
			attr->int_val = *(s32_t *)nattr_ptrs[type];
   2a0fa:	6809      	ldr	r1, [r1, #0]
   2a0fc:	6059      	str	r1, [r3, #4]
		nattrs.flags &= ~BIT(type);
   2a0fe:	fa0e f302 	lsl.w	r3, lr, r2
   2a102:	ea26 0603 	bic.w	r6, r6, r3
   2a106:	f88d 60ac 	strb.w	r6, [sp, #172]	; 0xac
		LOG_DBG("Add %s to %d.%06d", log_strdup(LWM2M_ATTR_STR[type]),
   2a10a:	3201      	adds	r2, #1
   2a10c:	e590      	b.n	29c30 <handle_request+0xc9c>
   2a10e:	bf00      	nop
   2a110:	0004d857 	.word	0x0004d857
   2a114:	20032b0c 	.word	0x20032b0c
   2a118:	00045f08 	.word	0x00045f08
   2a11c:	00046018 	.word	0x00046018
   2a120:	0004b105 	.word	0x0004b105
   2a124:	2002248c 	.word	0x2002248c

0002a128 <lwm2m_send_message>:
{
   2a128:	b538      	push	{r3, r4, r5, lr}
	if (!msg || !msg->ctx) {
   2a12a:	4604      	mov	r4, r0
   2a12c:	b108      	cbz	r0, 2a132 <lwm2m_send_message+0xa>
   2a12e:	6803      	ldr	r3, [r0, #0]
   2a130:	b9a3      	cbnz	r3, 2a15c <lwm2m_send_message+0x34>
		LOG_ERR("LwM2M message is invalid.");
   2a132:	4b25      	ldr	r3, [pc, #148]	; (2a1c8 <lwm2m_send_message+0xa0>)
   2a134:	681b      	ldr	r3, [r3, #0]
   2a136:	075b      	lsls	r3, r3, #29
   2a138:	d00d      	beq.n	2a156 <lwm2m_send_message+0x2e>
   2a13a:	2301      	movs	r3, #1
   2a13c:	f04f 0100 	mov.w	r1, #0
   2a140:	4a22      	ldr	r2, [pc, #136]	; (2a1cc <lwm2m_send_message+0xa4>)
   2a142:	f363 0107 	bfi	r1, r3, #0, #8
   2a146:	4b22      	ldr	r3, [pc, #136]	; (2a1d0 <lwm2m_send_message+0xa8>)
   2a148:	4822      	ldr	r0, [pc, #136]	; (2a1d4 <lwm2m_send_message+0xac>)
   2a14a:	1a9b      	subs	r3, r3, r2
   2a14c:	08db      	lsrs	r3, r3, #3
   2a14e:	f363 118f 	bfi	r1, r3, #6, #10
   2a152:	f016 fc76 	bl	40a42 <log_0>
		return -EINVAL;
   2a156:	f06f 0015 	mvn.w	r0, #21
   2a15a:	e01f      	b.n	2a19c <lwm2m_send_message+0x74>
	if (msg->type == COAP_TYPE_CON) {
   2a15c:	f890 3182 	ldrb.w	r3, [r0, #386]	; 0x182
   2a160:	b91b      	cbnz	r3, 2a16a <lwm2m_send_message+0x42>
		coap_pending_cycle(msg->pending);
   2a162:	f8d0 016c 	ldr.w	r0, [r0, #364]	; 0x16c
   2a166:	f7fa ff3d 	bl	24fe4 <coap_pending_cycle>
	msg->send_attempts++;
   2a16a:	f894 3186 	ldrb.w	r3, [r4, #390]	; 0x186
	if (send(msg->ctx->sock_fd, msg->cpkt.data, msg->cpkt.offset, 0) < 0) {
   2a16e:	8e22      	ldrh	r2, [r4, #48]	; 0x30
	msg->send_attempts++;
   2a170:	3301      	adds	r3, #1
   2a172:	f884 3186 	strb.w	r3, [r4, #390]	; 0x186
	if (send(msg->ctx->sock_fd, msg->cpkt.data, msg->cpkt.offset, 0) < 0) {
   2a176:	6823      	ldr	r3, [r4, #0]
   2a178:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
   2a17a:	f8d3 012c 	ldr.w	r0, [r3, #300]	; 0x12c
   2a17e:	f7fe f975 	bl	2846c <send.constprop.30>
   2a182:	2800      	cmp	r0, #0
   2a184:	f894 5182 	ldrb.w	r5, [r4, #386]	; 0x182
   2a188:	da09      	bge.n	2a19e <lwm2m_send_message+0x76>
		if (msg->type == COAP_TYPE_CON) {
   2a18a:	b91d      	cbnz	r5, 2a194 <lwm2m_send_message+0x6c>
			coap_pending_clear(msg->pending);
   2a18c:	f8d4 016c 	ldr.w	r0, [r4, #364]	; 0x16c
   2a190:	f018 faff 	bl	42792 <coap_pending_clear>
		return -errno;
   2a194:	f018 fd5d 	bl	42c52 <__errno>
   2a198:	6800      	ldr	r0, [r0, #0]
   2a19a:	4240      	negs	r0, r0
}
   2a19c:	bd38      	pop	{r3, r4, r5, pc}
	if (msg->type == COAP_TYPE_CON) {
   2a19e:	b96d      	cbnz	r5, 2a1bc <lwm2m_send_message+0x94>
		if (msg->send_attempts > 1) {
   2a1a0:	f894 3186 	ldrb.w	r3, [r4, #390]	; 0x186
   2a1a4:	2b01      	cmp	r3, #1
   2a1a6:	d807      	bhi.n	2a1b8 <lwm2m_send_message+0x90>
		k_delayed_work_submit(&msg->ctx->retransmit_work,
   2a1a8:	f8d4 316c 	ldr.w	r3, [r4, #364]	; 0x16c
   2a1ac:	6821      	ldr	r1, [r4, #0]
   2a1ae:	689a      	ldr	r2, [r3, #8]
   2a1b0:	31f8      	adds	r1, #248	; 0xf8
   2a1b2:	4809      	ldr	r0, [pc, #36]	; (2a1d8 <lwm2m_send_message+0xb0>)
   2a1b4:	f013 fc38 	bl	3da28 <k_delayed_work_submit_to_queue>
			return 0;
   2a1b8:	4628      	mov	r0, r5
   2a1ba:	e7ef      	b.n	2a19c <lwm2m_send_message+0x74>
		lwm2m_reset_message(msg, true);
   2a1bc:	4620      	mov	r0, r4
   2a1be:	2101      	movs	r1, #1
   2a1c0:	f018 feea 	bl	42f98 <lwm2m_reset_message>
	return 0;
   2a1c4:	2000      	movs	r0, #0
   2a1c6:	e7e9      	b.n	2a19c <lwm2m_send_message+0x74>
   2a1c8:	20032b0c 	.word	0x20032b0c
   2a1cc:	00045f08 	.word	0x00045f08
   2a1d0:	00046018 	.word	0x00046018
   2a1d4:	0004b3ee 	.word	0x0004b3ee
   2a1d8:	20029754 	.word	0x20029754

0002a1dc <generate_notify_message.isra.14>:
static int generate_notify_message(struct observe_node *obs,
   2a1dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2a1e0:	4606      	mov	r6, r0
	if (!obs->ctx) {
   2a1e2:	6840      	ldr	r0, [r0, #4]
   2a1e4:	b9a0      	cbnz	r0, 2a210 <generate_notify_message.isra.14+0x34>
		LOG_ERR("observer has no valid LwM2M ctx!");
   2a1e6:	4b6d      	ldr	r3, [pc, #436]	; (2a39c <generate_notify_message.isra.14+0x1c0>)
   2a1e8:	681b      	ldr	r3, [r3, #0]
   2a1ea:	075b      	lsls	r3, r3, #29
   2a1ec:	d00d      	beq.n	2a20a <generate_notify_message.isra.14+0x2e>
   2a1ee:	2301      	movs	r3, #1
   2a1f0:	f04f 0100 	mov.w	r1, #0
   2a1f4:	4a6a      	ldr	r2, [pc, #424]	; (2a3a0 <generate_notify_message.isra.14+0x1c4>)
   2a1f6:	f363 0107 	bfi	r1, r3, #0, #8
   2a1fa:	4b6a      	ldr	r3, [pc, #424]	; (2a3a4 <generate_notify_message.isra.14+0x1c8>)
   2a1fc:	486a      	ldr	r0, [pc, #424]	; (2a3a8 <generate_notify_message.isra.14+0x1cc>)
   2a1fe:	1a9b      	subs	r3, r3, r2
   2a200:	08db      	lsrs	r3, r3, #3
   2a202:	f363 118f 	bfi	r1, r3, #6, #10
   2a206:	f016 fc1c 	bl	40a42 <log_0>
		return -EINVAL;
   2a20a:	f06f 0415 	mvn.w	r4, #21
   2a20e:	e071      	b.n	2a2f4 <generate_notify_message.isra.14+0x118>
	msg = lwm2m_get_message(obs->ctx);
   2a210:	f7fe fd56 	bl	28cc0 <lwm2m_get_message>
	if (!msg) {
   2a214:	4605      	mov	r5, r0
   2a216:	b9a0      	cbnz	r0, 2a242 <generate_notify_message.isra.14+0x66>
		LOG_ERR("Unable to get a lwm2m message!");
   2a218:	4b60      	ldr	r3, [pc, #384]	; (2a39c <generate_notify_message.isra.14+0x1c0>)
   2a21a:	681b      	ldr	r3, [r3, #0]
   2a21c:	075f      	lsls	r7, r3, #29
   2a21e:	d00d      	beq.n	2a23c <generate_notify_message.isra.14+0x60>
   2a220:	2301      	movs	r3, #1
   2a222:	f04f 0100 	mov.w	r1, #0
   2a226:	4a5e      	ldr	r2, [pc, #376]	; (2a3a0 <generate_notify_message.isra.14+0x1c4>)
   2a228:	f363 0107 	bfi	r1, r3, #0, #8
   2a22c:	4b5d      	ldr	r3, [pc, #372]	; (2a3a4 <generate_notify_message.isra.14+0x1c8>)
   2a22e:	485f      	ldr	r0, [pc, #380]	; (2a3ac <generate_notify_message.isra.14+0x1d0>)
   2a230:	1a9b      	subs	r3, r3, r2
   2a232:	08db      	lsrs	r3, r3, #3
   2a234:	f363 118f 	bfi	r1, r3, #6, #10
   2a238:	f016 fc03 	bl	40a42 <log_0>
		return -ENOMEM;
   2a23c:	f06f 040b 	mvn.w	r4, #11
   2a240:	e058      	b.n	2a2f4 <generate_notify_message.isra.14+0x118>
   2a242:	4632      	mov	r2, r6
	msg->operation = LWM2M_OP_READ;
   2a244:	2700      	movs	r7, #0
   2a246:	f852 1f08 	ldr.w	r1, [r2, #8]!
   2a24a:	6201      	str	r1, [r0, #32]
   2a24c:	6851      	ldr	r1, [r2, #4]
   2a24e:	6241      	str	r1, [r0, #36]	; 0x24
   2a250:	8912      	ldrh	r2, [r2, #8]
   2a252:	f880 7185 	strb.w	r7, [r0, #389]	; 0x185
   2a256:	8502      	strh	r2, [r0, #40]	; 0x28
	obj_inst = get_engine_obj_inst(obs->path.obj_id,
   2a258:	8934      	ldrh	r4, [r6, #8]
				       obs->path.obj_inst_id);
   2a25a:	f8b6 800a 	ldrh.w	r8, [r6, #10]
	obj_inst = get_engine_obj_inst(obs->path.obj_id,
   2a25e:	4620      	mov	r0, r4
   2a260:	4641      	mov	r1, r8
   2a262:	f7fd fda5 	bl	27db0 <get_engine_obj_inst>
	if (!obj_inst) {
   2a266:	b9b0      	cbnz	r0, 2a296 <generate_notify_message.isra.14+0xba>
		LOG_ERR("unable to get engine obj for %u/%u",
   2a268:	4b4c      	ldr	r3, [pc, #304]	; (2a39c <generate_notify_message.isra.14+0x1c0>)
   2a26a:	681b      	ldr	r3, [r3, #0]
   2a26c:	075e      	lsls	r6, r3, #29
   2a26e:	d00f      	beq.n	2a290 <generate_notify_message.isra.14+0xb4>
   2a270:	2201      	movs	r2, #1
   2a272:	f04f 0300 	mov.w	r3, #0
   2a276:	494b      	ldr	r1, [pc, #300]	; (2a3a4 <generate_notify_message.isra.14+0x1c8>)
   2a278:	f362 0307 	bfi	r3, r2, #0, #8
   2a27c:	4a48      	ldr	r2, [pc, #288]	; (2a3a0 <generate_notify_message.isra.14+0x1c4>)
   2a27e:	484c      	ldr	r0, [pc, #304]	; (2a3b0 <generate_notify_message.isra.14+0x1d4>)
   2a280:	1a89      	subs	r1, r1, r2
   2a282:	08c9      	lsrs	r1, r1, #3
   2a284:	f361 138f 	bfi	r3, r1, #6, #10
   2a288:	4642      	mov	r2, r8
   2a28a:	4621      	mov	r1, r4
   2a28c:	f016 fbfa 	bl	40a84 <log_2>
		ret = -EINVAL;
   2a290:	f06f 0415 	mvn.w	r4, #21
   2a294:	e02a      	b.n	2a2ec <generate_notify_message.isra.14+0x110>
	msg->mid = 0U;
   2a296:	f04f 438a 	mov.w	r3, #1157627904	; 0x45000000
   2a29a:	f8c5 3180 	str.w	r3, [r5, #384]	; 0x180
	msg->token = obs->token;
   2a29e:	f106 0312 	add.w	r3, r6, #18
   2a2a2:	f8c5 3174 	str.w	r3, [r5, #372]	; 0x174
	msg->tkl = obs->tkl;
   2a2a6:	f896 303e 	ldrb.w	r3, [r6, #62]	; 0x3e
	msg->out.out_cpkt = &msg->cpkt;
   2a2aa:	f105 082c 	add.w	r8, r5, #44	; 0x2c
	msg->tkl = obs->tkl;
   2a2ae:	f885 3184 	strb.w	r3, [r5, #388]	; 0x184
	msg->reply_cb = notify_message_reply_cb;
   2a2b2:	4b40      	ldr	r3, [pc, #256]	; (2a3b4 <generate_notify_message.isra.14+0x1d8>)
	msg->out.out_cpkt = &msg->cpkt;
   2a2b4:	f8c5 8018 	str.w	r8, [r5, #24]
	msg->reply_cb = notify_message_reply_cb;
   2a2b8:	f8c5 3178 	str.w	r3, [r5, #376]	; 0x178
	ret = lwm2m_init_message(msg);
   2a2bc:	4628      	mov	r0, r5
   2a2be:	f7fe fd93 	bl	28de8 <lwm2m_init_message>
	if (ret < 0) {
   2a2c2:	1e04      	subs	r4, r0, #0
   2a2c4:	da19      	bge.n	2a2fa <generate_notify_message.isra.14+0x11e>
		LOG_ERR("Unable to init lwm2m message! (err: %d)", ret);
   2a2c6:	4b35      	ldr	r3, [pc, #212]	; (2a39c <generate_notify_message.isra.14+0x1c0>)
   2a2c8:	681b      	ldr	r3, [r3, #0]
   2a2ca:	0758      	lsls	r0, r3, #29
   2a2cc:	d00e      	beq.n	2a2ec <generate_notify_message.isra.14+0x110>
   2a2ce:	2301      	movs	r3, #1
   2a2d0:	f04f 0200 	mov.w	r2, #0
   2a2d4:	4932      	ldr	r1, [pc, #200]	; (2a3a0 <generate_notify_message.isra.14+0x1c4>)
   2a2d6:	f363 0207 	bfi	r2, r3, #0, #8
   2a2da:	4b32      	ldr	r3, [pc, #200]	; (2a3a4 <generate_notify_message.isra.14+0x1c8>)
   2a2dc:	4836      	ldr	r0, [pc, #216]	; (2a3b8 <generate_notify_message.isra.14+0x1dc>)
   2a2de:	1a5b      	subs	r3, r3, r1
   2a2e0:	4621      	mov	r1, r4
   2a2e2:	08db      	lsrs	r3, r3, #3
   2a2e4:	f363 128f 	bfi	r2, r3, #6, #10
		LOG_ERR("Error sending LWM2M packet (err:%d).", ret);
   2a2e8:	f016 fbb8 	bl	40a5c <log_1>
	lwm2m_reset_message(msg, true);
   2a2ec:	2101      	movs	r1, #1
   2a2ee:	4628      	mov	r0, r5
   2a2f0:	f018 fe52 	bl	42f98 <lwm2m_reset_message>
}
   2a2f4:	4620      	mov	r0, r4
   2a2f6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	obs->counter++;
   2a2fa:	6bb2      	ldr	r2, [r6, #56]	; 0x38
	ret = coap_append_option_int(&msg->cpkt, COAP_OPTION_OBSERVE,
   2a2fc:	2106      	movs	r1, #6
	obs->counter++;
   2a2fe:	3201      	adds	r2, #1
   2a300:	63b2      	str	r2, [r6, #56]	; 0x38
	ret = coap_append_option_int(&msg->cpkt, COAP_OPTION_OBSERVE,
   2a302:	4640      	mov	r0, r8
   2a304:	f7fa fe32 	bl	24f6c <coap_append_option_int>
	if (ret < 0) {
   2a308:	1e04      	subs	r4, r0, #0
   2a30a:	da11      	bge.n	2a330 <generate_notify_message.isra.14+0x154>
		LOG_ERR("OBSERVE option error: %d", ret);
   2a30c:	4b23      	ldr	r3, [pc, #140]	; (2a39c <generate_notify_message.isra.14+0x1c0>)
   2a30e:	681b      	ldr	r3, [r3, #0]
   2a310:	0759      	lsls	r1, r3, #29
   2a312:	d0eb      	beq.n	2a2ec <generate_notify_message.isra.14+0x110>
   2a314:	2301      	movs	r3, #1
   2a316:	f04f 0200 	mov.w	r2, #0
   2a31a:	4921      	ldr	r1, [pc, #132]	; (2a3a0 <generate_notify_message.isra.14+0x1c4>)
   2a31c:	f363 0207 	bfi	r2, r3, #0, #8
   2a320:	4b20      	ldr	r3, [pc, #128]	; (2a3a4 <generate_notify_message.isra.14+0x1c8>)
   2a322:	4826      	ldr	r0, [pc, #152]	; (2a3bc <generate_notify_message.isra.14+0x1e0>)
   2a324:	1a5b      	subs	r3, r3, r1
   2a326:	08db      	lsrs	r3, r3, #3
   2a328:	f363 128f 	bfi	r2, r3, #6, #10
   2a32c:	4621      	mov	r1, r4
   2a32e:	e7db      	b.n	2a2e8 <generate_notify_message.isra.14+0x10c>
	select_writer(&msg->out, obs->format);
   2a330:	8fb1      	ldrh	r1, [r6, #60]	; 0x3c
   2a332:	f105 0014 	add.w	r0, r5, #20
   2a336:	f7fd fe7b 	bl	28030 <select_writer.isra.7>
	ret = do_read_op(msg, obs->format);
   2a33a:	8fb1      	ldrh	r1, [r6, #60]	; 0x3c
   2a33c:	4628      	mov	r0, r5
   2a33e:	f7fd fef9 	bl	28134 <do_read_op>
	if (ret < 0) {
   2a342:	1e04      	subs	r4, r0, #0
   2a344:	da11      	bge.n	2a36a <generate_notify_message.isra.14+0x18e>
		LOG_ERR("error in multi-format read (err:%d)", ret);
   2a346:	4b15      	ldr	r3, [pc, #84]	; (2a39c <generate_notify_message.isra.14+0x1c0>)
   2a348:	681b      	ldr	r3, [r3, #0]
   2a34a:	075a      	lsls	r2, r3, #29
   2a34c:	d0ce      	beq.n	2a2ec <generate_notify_message.isra.14+0x110>
   2a34e:	2301      	movs	r3, #1
   2a350:	f04f 0200 	mov.w	r2, #0
   2a354:	4912      	ldr	r1, [pc, #72]	; (2a3a0 <generate_notify_message.isra.14+0x1c4>)
   2a356:	f363 0207 	bfi	r2, r3, #0, #8
   2a35a:	4b12      	ldr	r3, [pc, #72]	; (2a3a4 <generate_notify_message.isra.14+0x1c8>)
   2a35c:	4818      	ldr	r0, [pc, #96]	; (2a3c0 <generate_notify_message.isra.14+0x1e4>)
   2a35e:	1a5b      	subs	r3, r3, r1
   2a360:	08db      	lsrs	r3, r3, #3
   2a362:	f363 128f 	bfi	r2, r3, #6, #10
   2a366:	4621      	mov	r1, r4
   2a368:	e7be      	b.n	2a2e8 <generate_notify_message.isra.14+0x10c>
	ret = lwm2m_send_message(msg);
   2a36a:	4628      	mov	r0, r5
   2a36c:	f7ff fedc 	bl	2a128 <lwm2m_send_message>
	if (ret < 0) {
   2a370:	1e04      	subs	r4, r0, #0
   2a372:	da11      	bge.n	2a398 <generate_notify_message.isra.14+0x1bc>
		LOG_ERR("Error sending LWM2M packet (err:%d).", ret);
   2a374:	4b09      	ldr	r3, [pc, #36]	; (2a39c <generate_notify_message.isra.14+0x1c0>)
   2a376:	681b      	ldr	r3, [r3, #0]
   2a378:	075b      	lsls	r3, r3, #29
   2a37a:	d0b7      	beq.n	2a2ec <generate_notify_message.isra.14+0x110>
   2a37c:	2301      	movs	r3, #1
   2a37e:	f04f 0200 	mov.w	r2, #0
   2a382:	4907      	ldr	r1, [pc, #28]	; (2a3a0 <generate_notify_message.isra.14+0x1c4>)
   2a384:	f363 0207 	bfi	r2, r3, #0, #8
   2a388:	4b06      	ldr	r3, [pc, #24]	; (2a3a4 <generate_notify_message.isra.14+0x1c8>)
   2a38a:	480e      	ldr	r0, [pc, #56]	; (2a3c4 <generate_notify_message.isra.14+0x1e8>)
   2a38c:	1a5b      	subs	r3, r3, r1
   2a38e:	08db      	lsrs	r3, r3, #3
   2a390:	f363 128f 	bfi	r2, r3, #6, #10
   2a394:	4621      	mov	r1, r4
   2a396:	e7a7      	b.n	2a2e8 <generate_notify_message.isra.14+0x10c>
	return 0;
   2a398:	463c      	mov	r4, r7
   2a39a:	e7ab      	b.n	2a2f4 <generate_notify_message.isra.14+0x118>
   2a39c:	20032b0c 	.word	0x20032b0c
   2a3a0:	00045f08 	.word	0x00045f08
   2a3a4:	00046018 	.word	0x00046018
   2a3a8:	0004ae52 	.word	0x0004ae52
   2a3ac:	0004ae73 	.word	0x0004ae73
   2a3b0:	0004ae92 	.word	0x0004ae92
   2a3b4:	000281a1 	.word	0x000281a1
   2a3b8:	0004aeb5 	.word	0x0004aeb5
   2a3bc:	0004af8e 	.word	0x0004af8e
   2a3c0:	0004aedd 	.word	0x0004aedd
   2a3c4:	0004af01 	.word	0x0004af01

0002a3c8 <lwm2m_get_rd_data>:
{
   2a3c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	SYS_SLIST_FOR_EACH_CONTAINER(&engine_obj_list, obj, node) {
   2a3cc:	4b29      	ldr	r3, [pc, #164]	; (2a474 <lwm2m_get_rd_data+0xac>)
{
   2a3ce:	b08b      	sub	sp, #44	; 0x2c
	SYS_SLIST_FOR_EACH_CONTAINER(&engine_obj_list, obj, node) {
   2a3d0:	681d      	ldr	r5, [r3, #0]
{
   2a3d2:	4607      	mov	r7, r0
   2a3d4:	4688      	mov	r8, r1
	SYS_SLIST_FOR_EACH_CONTAINER(&engine_obj_list, obj, node) {
   2a3d6:	2d00      	cmp	r5, #0
   2a3d8:	d049      	beq.n	2a46e <lwm2m_get_rd_data+0xa6>
   2a3da:	2400      	movs	r4, #0
				len = snprintk(temp, sizeof(temp),
   2a3dc:	f8df 90a4 	ldr.w	r9, [pc, #164]	; 2a484 <lwm2m_get_rd_data+0xbc>
		if (obj->obj_id == LWM2M_OBJECT_SECURITY_ID) {
   2a3e0:	8b2b      	ldrh	r3, [r5, #24]
   2a3e2:	b1a3      	cbz	r3, 2a40e <lwm2m_get_rd_data+0x46>
		if (obj->instance_count == 0U) {
   2a3e4:	8baa      	ldrh	r2, [r5, #28]
   2a3e6:	b9da      	cbnz	r2, 2a420 <lwm2m_get_rd_data+0x58>
			len = snprintk(temp, sizeof(temp), "%s</%u>",
   2a3e8:	9300      	str	r3, [sp, #0]
   2a3ea:	4b23      	ldr	r3, [pc, #140]	; (2a478 <lwm2m_get_rd_data+0xb0>)
   2a3ec:	4a23      	ldr	r2, [pc, #140]	; (2a47c <lwm2m_get_rd_data+0xb4>)
   2a3ee:	2c00      	cmp	r4, #0
   2a3f0:	bf18      	it	ne
   2a3f2:	464b      	movne	r3, r9
   2a3f4:	2120      	movs	r1, #32
   2a3f6:	a802      	add	r0, sp, #8
   2a3f8:	f016 f910 	bl	4061c <snprintk>
			if (pos + len >= size) {
   2a3fc:	1826      	adds	r6, r4, r0
   2a3fe:	4546      	cmp	r6, r8
			len = snprintk(temp, sizeof(temp), "%s</%u>",
   2a400:	4602      	mov	r2, r0
			if (pos + len >= size) {
   2a402:	da07      	bge.n	2a414 <lwm2m_get_rd_data+0x4c>
   2a404:	1938      	adds	r0, r7, r4
   2a406:	a902      	add	r1, sp, #8
   2a408:	f01a fd22 	bl	44e50 <memcpy>
			pos += len;
   2a40c:	b2b4      	uxth	r4, r6
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   2a40e:	682d      	ldr	r5, [r5, #0]
	SYS_SLIST_FOR_EACH_CONTAINER(&engine_obj_list, obj, node) {
   2a410:	2d00      	cmp	r5, #0
   2a412:	d1e5      	bne.n	2a3e0 <lwm2m_get_rd_data+0x18>
	client_data[pos] = '\0';
   2a414:	2300      	movs	r3, #0
}
   2a416:	4620      	mov	r0, r4
	client_data[pos] = '\0';
   2a418:	553b      	strb	r3, [r7, r4]
}
   2a41a:	b00b      	add	sp, #44	; 0x2c
   2a41c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		SYS_SLIST_FOR_EACH_CONTAINER(&engine_obj_inst_list,
   2a420:	4b17      	ldr	r3, [pc, #92]	; (2a480 <lwm2m_get_rd_data+0xb8>)
   2a422:	681e      	ldr	r6, [r3, #0]
   2a424:	2e00      	cmp	r6, #0
   2a426:	d0f2      	beq.n	2a40e <lwm2m_get_rd_data+0x46>
				len = snprintk(temp, sizeof(temp),
   2a428:	f8df b05c 	ldr.w	fp, [pc, #92]	; 2a488 <lwm2m_get_rd_data+0xc0>
			if (obj_inst->obj->obj_id == obj->obj_id) {
   2a42c:	6873      	ldr	r3, [r6, #4]
   2a42e:	8b1a      	ldrh	r2, [r3, #24]
   2a430:	8b2b      	ldrh	r3, [r5, #24]
   2a432:	4293      	cmp	r3, r2
   2a434:	d117      	bne.n	2a466 <lwm2m_get_rd_data+0x9e>
				len = snprintk(temp, sizeof(temp),
   2a436:	89b2      	ldrh	r2, [r6, #12]
   2a438:	2120      	movs	r1, #32
   2a43a:	e9cd 3200 	strd	r3, r2, [sp]
   2a43e:	4b0e      	ldr	r3, [pc, #56]	; (2a478 <lwm2m_get_rd_data+0xb0>)
   2a440:	465a      	mov	r2, fp
   2a442:	2c00      	cmp	r4, #0
   2a444:	bf18      	it	ne
   2a446:	464b      	movne	r3, r9
   2a448:	a802      	add	r0, sp, #8
   2a44a:	f016 f8e7 	bl	4061c <snprintk>
   2a44e:	4602      	mov	r2, r0
				if (pos + len >= size) {
   2a450:	eb04 0a02 	add.w	sl, r4, r2
   2a454:	45c2      	cmp	sl, r8
   2a456:	eb07 0004 	add.w	r0, r7, r4
   2a45a:	dad8      	bge.n	2a40e <lwm2m_get_rd_data+0x46>
   2a45c:	a902      	add	r1, sp, #8
   2a45e:	f01a fcf7 	bl	44e50 <memcpy>
				pos += len;
   2a462:	fa1f f48a 	uxth.w	r4, sl
   2a466:	6836      	ldr	r6, [r6, #0]
		SYS_SLIST_FOR_EACH_CONTAINER(&engine_obj_inst_list,
   2a468:	2e00      	cmp	r6, #0
   2a46a:	d1df      	bne.n	2a42c <lwm2m_get_rd_data+0x64>
   2a46c:	e7cf      	b.n	2a40e <lwm2m_get_rd_data+0x46>
   2a46e:	462c      	mov	r4, r5
   2a470:	e7d0      	b.n	2a414 <lwm2m_get_rd_data+0x4c>
   2a472:	bf00      	nop
   2a474:	20022484 	.word	0x20022484
   2a478:	0004a299 	.word	0x0004a299
   2a47c:	0004b0a2 	.word	0x0004b0a2
   2a480:	2002247c 	.word	0x2002247c
   2a484:	0004af40 	.word	0x0004af40
   2a488:	0004b0aa 	.word	0x0004b0aa

0002a48c <lwm2m_engine_create_obj_inst>:
{
   2a48c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	ret = string_to_path(pathstr, &path, '/');
   2a48e:	a901      	add	r1, sp, #4
   2a490:	f7fd feca 	bl	28228 <string_to_path.constprop.19>
	if (ret < 0) {
   2a494:	2800      	cmp	r0, #0
   2a496:	db1f      	blt.n	2a4d8 <lwm2m_engine_create_obj_inst+0x4c>
	if (path.level != 2U) {
   2a498:	f89d 300c 	ldrb.w	r3, [sp, #12]
   2a49c:	2b02      	cmp	r3, #2
   2a49e:	d014      	beq.n	2a4ca <lwm2m_engine_create_obj_inst+0x3e>
		LOG_ERR("path must have 2 parts");
   2a4a0:	4b0f      	ldr	r3, [pc, #60]	; (2a4e0 <lwm2m_engine_create_obj_inst+0x54>)
   2a4a2:	681b      	ldr	r3, [r3, #0]
   2a4a4:	075b      	lsls	r3, r3, #29
   2a4a6:	d00d      	beq.n	2a4c4 <lwm2m_engine_create_obj_inst+0x38>
   2a4a8:	2301      	movs	r3, #1
   2a4aa:	f04f 0100 	mov.w	r1, #0
   2a4ae:	4a0d      	ldr	r2, [pc, #52]	; (2a4e4 <lwm2m_engine_create_obj_inst+0x58>)
   2a4b0:	f363 0107 	bfi	r1, r3, #0, #8
   2a4b4:	4b0c      	ldr	r3, [pc, #48]	; (2a4e8 <lwm2m_engine_create_obj_inst+0x5c>)
   2a4b6:	480d      	ldr	r0, [pc, #52]	; (2a4ec <lwm2m_engine_create_obj_inst+0x60>)
   2a4b8:	1a9b      	subs	r3, r3, r2
   2a4ba:	08db      	lsrs	r3, r3, #3
   2a4bc:	f363 118f 	bfi	r1, r3, #6, #10
   2a4c0:	f016 fabf 	bl	40a42 <log_0>
		return -EINVAL;
   2a4c4:	f06f 0015 	mvn.w	r0, #21
   2a4c8:	e006      	b.n	2a4d8 <lwm2m_engine_create_obj_inst+0x4c>
	return lwm2m_create_obj_inst(path.obj_id, path.obj_inst_id, &obj_inst);
   2a4ca:	466a      	mov	r2, sp
   2a4cc:	f8bd 1006 	ldrh.w	r1, [sp, #6]
   2a4d0:	f8bd 0004 	ldrh.w	r0, [sp, #4]
   2a4d4:	f7fe fb46 	bl	28b64 <lwm2m_create_obj_inst>
}
   2a4d8:	b005      	add	sp, #20
   2a4da:	f85d fb04 	ldr.w	pc, [sp], #4
   2a4de:	bf00      	nop
   2a4e0:	20032b0c 	.word	0x20032b0c
   2a4e4:	00045f08 	.word	0x00045f08
   2a4e8:	00046018 	.word	0x00046018
   2a4ec:	0004b255 	.word	0x0004b255

0002a4f0 <lwm2m_engine_set_res_data>:
{
   2a4f0:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct lwm2m_engine_res_inst *res_inst = NULL;
   2a4f2:	2400      	movs	r4, #0
{
   2a4f4:	b087      	sub	sp, #28
   2a4f6:	460f      	mov	r7, r1
	ret = string_to_path(pathstr, &path, '/');
   2a4f8:	a903      	add	r1, sp, #12
{
   2a4fa:	4616      	mov	r6, r2
   2a4fc:	461d      	mov	r5, r3
	struct lwm2m_engine_res_inst *res_inst = NULL;
   2a4fe:	9402      	str	r4, [sp, #8]
	ret = string_to_path(pathstr, &path, '/');
   2a500:	f7fd fe92 	bl	28228 <string_to_path.constprop.19>
	if (ret < 0) {
   2a504:	2800      	cmp	r0, #0
   2a506:	db3e      	blt.n	2a586 <lwm2m_engine_set_res_data+0x96>
	if (path.level < 3) {
   2a508:	f89d 3014 	ldrb.w	r3, [sp, #20]
   2a50c:	2b02      	cmp	r3, #2
   2a50e:	d814      	bhi.n	2a53a <lwm2m_engine_set_res_data+0x4a>
		LOG_ERR("path must have at least 3 parts");
   2a510:	4b1e      	ldr	r3, [pc, #120]	; (2a58c <lwm2m_engine_set_res_data+0x9c>)
   2a512:	681b      	ldr	r3, [r3, #0]
   2a514:	075a      	lsls	r2, r3, #29
   2a516:	d00d      	beq.n	2a534 <lwm2m_engine_set_res_data+0x44>
   2a518:	2301      	movs	r3, #1
   2a51a:	f04f 0100 	mov.w	r1, #0
   2a51e:	4a1c      	ldr	r2, [pc, #112]	; (2a590 <lwm2m_engine_set_res_data+0xa0>)
   2a520:	f363 0107 	bfi	r1, r3, #0, #8
   2a524:	4b1b      	ldr	r3, [pc, #108]	; (2a594 <lwm2m_engine_set_res_data+0xa4>)
   2a526:	481c      	ldr	r0, [pc, #112]	; (2a598 <lwm2m_engine_set_res_data+0xa8>)
   2a528:	1a9b      	subs	r3, r3, r2
   2a52a:	08db      	lsrs	r3, r3, #3
   2a52c:	f363 118f 	bfi	r1, r3, #6, #10
   2a530:	f016 fa87 	bl	40a42 <log_0>
		return -EINVAL;
   2a534:	f06f 0015 	mvn.w	r0, #21
   2a538:	e025      	b.n	2a586 <lwm2m_engine_set_res_data+0x96>
	ret = path_to_objs(&path, NULL, NULL, NULL, &res_inst);
   2a53a:	ab02      	add	r3, sp, #8
   2a53c:	9300      	str	r3, [sp, #0]
   2a53e:	4622      	mov	r2, r4
   2a540:	4623      	mov	r3, r4
   2a542:	4621      	mov	r1, r4
   2a544:	a803      	add	r0, sp, #12
   2a546:	f7fd ffef 	bl	28528 <path_to_objs>
	if (ret < 0) {
   2a54a:	2800      	cmp	r0, #0
   2a54c:	db1b      	blt.n	2a586 <lwm2m_engine_set_res_data+0x96>
	if (!res_inst) {
   2a54e:	9b02      	ldr	r3, [sp, #8]
   2a550:	b9b3      	cbnz	r3, 2a580 <lwm2m_engine_set_res_data+0x90>
		LOG_ERR("res instance %d not found", path.res_inst_id);
   2a552:	4b0e      	ldr	r3, [pc, #56]	; (2a58c <lwm2m_engine_set_res_data+0x9c>)
   2a554:	681b      	ldr	r3, [r3, #0]
   2a556:	075b      	lsls	r3, r3, #29
   2a558:	d00f      	beq.n	2a57a <lwm2m_engine_set_res_data+0x8a>
   2a55a:	2301      	movs	r3, #1
   2a55c:	f04f 0200 	mov.w	r2, #0
   2a560:	490b      	ldr	r1, [pc, #44]	; (2a590 <lwm2m_engine_set_res_data+0xa0>)
   2a562:	f363 0207 	bfi	r2, r3, #0, #8
   2a566:	4b0b      	ldr	r3, [pc, #44]	; (2a594 <lwm2m_engine_set_res_data+0xa4>)
   2a568:	480c      	ldr	r0, [pc, #48]	; (2a59c <lwm2m_engine_set_res_data+0xac>)
   2a56a:	1a5b      	subs	r3, r3, r1
   2a56c:	08db      	lsrs	r3, r3, #3
   2a56e:	f363 128f 	bfi	r2, r3, #6, #10
   2a572:	f8bd 1012 	ldrh.w	r1, [sp, #18]
   2a576:	f016 fa71 	bl	40a5c <log_1>
		return -ENOENT;
   2a57a:	f06f 0001 	mvn.w	r0, #1
   2a57e:	e002      	b.n	2a586 <lwm2m_engine_set_res_data+0x96>
	res_inst->data_ptr = data_ptr;
   2a580:	601f      	str	r7, [r3, #0]
	res_inst->data_len = data_len;
   2a582:	809e      	strh	r6, [r3, #4]
	res_inst->data_flags = data_flags;
   2a584:	721d      	strb	r5, [r3, #8]
}
   2a586:	b007      	add	sp, #28
   2a588:	bdf0      	pop	{r4, r5, r6, r7, pc}
   2a58a:	bf00      	nop
   2a58c:	20032b0c 	.word	0x20032b0c
   2a590:	00045f08 	.word	0x00045f08
   2a594:	00046018 	.word	0x00046018
   2a598:	0004b2fa 	.word	0x0004b2fa
   2a59c:	0004b31a 	.word	0x0004b31a

0002a5a0 <lwm2m_engine_get_res_data>:
{
   2a5a0:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct lwm2m_engine_res_inst *res_inst = NULL;
   2a5a2:	2400      	movs	r4, #0
{
   2a5a4:	b087      	sub	sp, #28
   2a5a6:	460f      	mov	r7, r1
	ret = string_to_path(pathstr, &path, '/');
   2a5a8:	a903      	add	r1, sp, #12
{
   2a5aa:	4616      	mov	r6, r2
   2a5ac:	461d      	mov	r5, r3
	struct lwm2m_engine_res_inst *res_inst = NULL;
   2a5ae:	9402      	str	r4, [sp, #8]
	ret = string_to_path(pathstr, &path, '/');
   2a5b0:	f7fd fe3a 	bl	28228 <string_to_path.constprop.19>
	if (ret < 0) {
   2a5b4:	2800      	cmp	r0, #0
   2a5b6:	db42      	blt.n	2a63e <lwm2m_engine_get_res_data+0x9e>
	if (path.level < 3) {
   2a5b8:	f89d 3014 	ldrb.w	r3, [sp, #20]
   2a5bc:	2b02      	cmp	r3, #2
   2a5be:	d814      	bhi.n	2a5ea <lwm2m_engine_get_res_data+0x4a>
		LOG_ERR("path must have at least 3 parts");
   2a5c0:	4b20      	ldr	r3, [pc, #128]	; (2a644 <lwm2m_engine_get_res_data+0xa4>)
   2a5c2:	681b      	ldr	r3, [r3, #0]
   2a5c4:	075a      	lsls	r2, r3, #29
   2a5c6:	d00d      	beq.n	2a5e4 <lwm2m_engine_get_res_data+0x44>
   2a5c8:	2301      	movs	r3, #1
   2a5ca:	f04f 0100 	mov.w	r1, #0
   2a5ce:	4a1e      	ldr	r2, [pc, #120]	; (2a648 <lwm2m_engine_get_res_data+0xa8>)
   2a5d0:	f363 0107 	bfi	r1, r3, #0, #8
   2a5d4:	4b1d      	ldr	r3, [pc, #116]	; (2a64c <lwm2m_engine_get_res_data+0xac>)
   2a5d6:	481e      	ldr	r0, [pc, #120]	; (2a650 <lwm2m_engine_get_res_data+0xb0>)
   2a5d8:	1a9b      	subs	r3, r3, r2
   2a5da:	08db      	lsrs	r3, r3, #3
   2a5dc:	f363 118f 	bfi	r1, r3, #6, #10
   2a5e0:	f016 fa2f 	bl	40a42 <log_0>
		return -EINVAL;
   2a5e4:	f06f 0015 	mvn.w	r0, #21
   2a5e8:	e029      	b.n	2a63e <lwm2m_engine_get_res_data+0x9e>
	ret = path_to_objs(&path, NULL, NULL, NULL, &res_inst);
   2a5ea:	ab02      	add	r3, sp, #8
   2a5ec:	9300      	str	r3, [sp, #0]
   2a5ee:	4622      	mov	r2, r4
   2a5f0:	4623      	mov	r3, r4
   2a5f2:	4621      	mov	r1, r4
   2a5f4:	a803      	add	r0, sp, #12
   2a5f6:	f7fd ff97 	bl	28528 <path_to_objs>
	if (ret < 0) {
   2a5fa:	2800      	cmp	r0, #0
   2a5fc:	db1f      	blt.n	2a63e <lwm2m_engine_get_res_data+0x9e>
	if (!res_inst) {
   2a5fe:	9b02      	ldr	r3, [sp, #8]
   2a600:	b9b3      	cbnz	r3, 2a630 <lwm2m_engine_get_res_data+0x90>
		LOG_ERR("res instance %d not found", path.res_inst_id);
   2a602:	4b10      	ldr	r3, [pc, #64]	; (2a644 <lwm2m_engine_get_res_data+0xa4>)
   2a604:	681b      	ldr	r3, [r3, #0]
   2a606:	075b      	lsls	r3, r3, #29
   2a608:	d00f      	beq.n	2a62a <lwm2m_engine_get_res_data+0x8a>
   2a60a:	2301      	movs	r3, #1
   2a60c:	f04f 0200 	mov.w	r2, #0
   2a610:	490d      	ldr	r1, [pc, #52]	; (2a648 <lwm2m_engine_get_res_data+0xa8>)
   2a612:	f363 0207 	bfi	r2, r3, #0, #8
   2a616:	4b0d      	ldr	r3, [pc, #52]	; (2a64c <lwm2m_engine_get_res_data+0xac>)
   2a618:	480e      	ldr	r0, [pc, #56]	; (2a654 <lwm2m_engine_get_res_data+0xb4>)
   2a61a:	1a5b      	subs	r3, r3, r1
   2a61c:	08db      	lsrs	r3, r3, #3
   2a61e:	f363 128f 	bfi	r2, r3, #6, #10
   2a622:	f8bd 1012 	ldrh.w	r1, [sp, #18]
   2a626:	f016 fa19 	bl	40a5c <log_1>
		return -ENOENT;
   2a62a:	f06f 0001 	mvn.w	r0, #1
   2a62e:	e006      	b.n	2a63e <lwm2m_engine_get_res_data+0x9e>
	return 0;
   2a630:	4620      	mov	r0, r4
	*data_ptr = res_inst->data_ptr;
   2a632:	681a      	ldr	r2, [r3, #0]
   2a634:	603a      	str	r2, [r7, #0]
	*data_len = res_inst->data_len;
   2a636:	889a      	ldrh	r2, [r3, #4]
   2a638:	8032      	strh	r2, [r6, #0]
	*data_flags = res_inst->data_flags;
   2a63a:	7a1b      	ldrb	r3, [r3, #8]
   2a63c:	702b      	strb	r3, [r5, #0]
}
   2a63e:	b007      	add	sp, #28
   2a640:	bdf0      	pop	{r4, r5, r6, r7, pc}
   2a642:	bf00      	nop
   2a644:	20032b0c 	.word	0x20032b0c
   2a648:	00045f08 	.word	0x00045f08
   2a64c:	00046018 	.word	0x00046018
   2a650:	0004b2fa 	.word	0x0004b2fa
   2a654:	0004b31a 	.word	0x0004b31a

0002a658 <load_tls_credential>:
	void *cred = NULL;
   2a658:	2300      	movs	r3, #0
{
   2a65a:	b570      	push	{r4, r5, r6, lr}
   2a65c:	460d      	mov	r5, r1
   2a65e:	b08a      	sub	sp, #40	; 0x28
	tls_credential_delete(client_ctx->tls_tag, type);
   2a660:	4611      	mov	r1, r2
{
   2a662:	4604      	mov	r4, r0
	tls_credential_delete(client_ctx->tls_tag, type);
   2a664:	f8d0 0118 	ldr.w	r0, [r0, #280]	; 0x118
{
   2a668:	4616      	mov	r6, r2
	void *cred = NULL;
   2a66a:	9304      	str	r3, [sp, #16]
	tls_credential_delete(client_ctx->tls_tag, type);
   2a66c:	f018 f8f1 	bl	42852 <tls_credential_delete>
	snprintk(pathstr, sizeof(pathstr), "0/%d/%u", client_ctx->sec_obj_inst,
   2a670:	2114      	movs	r1, #20
   2a672:	9500      	str	r5, [sp, #0]
   2a674:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   2a678:	4a29      	ldr	r2, [pc, #164]	; (2a720 <load_tls_credential+0xc8>)
   2a67a:	eb0d 0001 	add.w	r0, sp, r1
   2a67e:	f015 ffcd 	bl	4061c <snprintk>
	ret = lwm2m_engine_get_res_data(pathstr, &cred, &cred_len, &cred_flags);
   2a682:	f10d 030d 	add.w	r3, sp, #13
   2a686:	f10d 020e 	add.w	r2, sp, #14
   2a68a:	a904      	add	r1, sp, #16
   2a68c:	a805      	add	r0, sp, #20
   2a68e:	f7ff ff87 	bl	2a5a0 <lwm2m_engine_get_res_data>
	if (ret < 0) {
   2a692:	1e05      	subs	r5, r0, #0
   2a694:	da19      	bge.n	2a6ca <load_tls_credential+0x72>
		LOG_ERR("Unable to get resource data for '%s'",
   2a696:	4b23      	ldr	r3, [pc, #140]	; (2a724 <load_tls_credential+0xcc>)
   2a698:	681b      	ldr	r3, [r3, #0]
   2a69a:	075a      	lsls	r2, r3, #29
   2a69c:	d012      	beq.n	2a6c4 <load_tls_credential+0x6c>
   2a69e:	2301      	movs	r3, #1
   2a6a0:	f04f 0400 	mov.w	r4, #0
   2a6a4:	4a20      	ldr	r2, [pc, #128]	; (2a728 <load_tls_credential+0xd0>)
   2a6a6:	f363 0407 	bfi	r4, r3, #0, #8
   2a6aa:	4b20      	ldr	r3, [pc, #128]	; (2a72c <load_tls_credential+0xd4>)
   2a6ac:	a805      	add	r0, sp, #20
   2a6ae:	1a9b      	subs	r3, r3, r2
   2a6b0:	08db      	lsrs	r3, r3, #3
   2a6b2:	f363 148f 	bfi	r4, r3, #6, #10
   2a6b6:	f7f7 faf9 	bl	21cac <log_strdup>
   2a6ba:	4622      	mov	r2, r4
   2a6bc:	4601      	mov	r1, r0
   2a6be:	481c      	ldr	r0, [pc, #112]	; (2a730 <load_tls_credential+0xd8>)
   2a6c0:	f016 f9cc 	bl	40a5c <log_1>
}
   2a6c4:	4628      	mov	r0, r5
   2a6c6:	b00a      	add	sp, #40	; 0x28
   2a6c8:	bd70      	pop	{r4, r5, r6, pc}
	if (type == TLS_CREDENTIAL_PSK_ID) {
   2a6ca:	2e05      	cmp	r6, #5
   2a6cc:	d104      	bne.n	2a6d8 <load_tls_credential+0x80>
		cred_len = strlen(cred);
   2a6ce:	9804      	ldr	r0, [sp, #16]
   2a6d0:	f7f2 fd22 	bl	1d118 <strlen>
   2a6d4:	f8ad 000e 	strh.w	r0, [sp, #14]
	ret = tls_credential_add(client_ctx->tls_tag, type, cred, cred_len);
   2a6d8:	f8bd 300e 	ldrh.w	r3, [sp, #14]
   2a6dc:	9a04      	ldr	r2, [sp, #16]
   2a6de:	4631      	mov	r1, r6
   2a6e0:	f8d4 0118 	ldr.w	r0, [r4, #280]	; 0x118
   2a6e4:	f7fa fd06 	bl	250f4 <tls_credential_add>
	if (ret < 0) {
   2a6e8:	1e05      	subs	r5, r0, #0
   2a6ea:	daeb      	bge.n	2a6c4 <load_tls_credential+0x6c>
		LOG_ERR("Error setting cred tag %d type %d: Error %d",
   2a6ec:	4b0d      	ldr	r3, [pc, #52]	; (2a724 <load_tls_credential+0xcc>)
   2a6ee:	681b      	ldr	r3, [r3, #0]
   2a6f0:	075b      	lsls	r3, r3, #29
   2a6f2:	d0e7      	beq.n	2a6c4 <load_tls_credential+0x6c>
   2a6f4:	2301      	movs	r3, #1
   2a6f6:	f04f 0200 	mov.w	r2, #0
   2a6fa:	490b      	ldr	r1, [pc, #44]	; (2a728 <load_tls_credential+0xd0>)
   2a6fc:	f363 0207 	bfi	r2, r3, #0, #8
   2a700:	4b0a      	ldr	r3, [pc, #40]	; (2a72c <load_tls_credential+0xd4>)
   2a702:	480c      	ldr	r0, [pc, #48]	; (2a734 <load_tls_credential+0xdc>)
   2a704:	1a5b      	subs	r3, r3, r1
   2a706:	08db      	lsrs	r3, r3, #3
   2a708:	f363 128f 	bfi	r2, r3, #6, #10
   2a70c:	f8ad 2000 	strh.w	r2, [sp]
   2a710:	462b      	mov	r3, r5
   2a712:	4632      	mov	r2, r6
   2a714:	f8d4 1118 	ldr.w	r1, [r4, #280]	; 0x118
   2a718:	f016 f9cc 	bl	40ab4 <log_3>
   2a71c:	e7d2      	b.n	2a6c4 <load_tls_credential+0x6c>
   2a71e:	bf00      	nop
   2a720:	0004b156 	.word	0x0004b156
   2a724:	20032b0c 	.word	0x20032b0c
   2a728:	00045f08 	.word	0x00045f08
   2a72c:	00046018 	.word	0x00046018
   2a730:	0004b15e 	.word	0x0004b15e
   2a734:	000475d2 	.word	0x000475d2

0002a738 <lwm2m_engine_get_resource>:
{
   2a738:	b510      	push	{r4, lr}
   2a73a:	b086      	sub	sp, #24
   2a73c:	460c      	mov	r4, r1
	ret = string_to_path(pathstr, &path, '/');
   2a73e:	a903      	add	r1, sp, #12
   2a740:	f7fd fd72 	bl	28228 <string_to_path.constprop.19>
	if (ret < 0) {
   2a744:	2800      	cmp	r0, #0
   2a746:	db1f      	blt.n	2a788 <lwm2m_engine_get_resource+0x50>
	if (path.level < 3) {
   2a748:	f89d 3014 	ldrb.w	r3, [sp, #20]
   2a74c:	2b02      	cmp	r3, #2
   2a74e:	d814      	bhi.n	2a77a <lwm2m_engine_get_resource+0x42>
		LOG_ERR("path must have 3 parts");
   2a750:	4b0e      	ldr	r3, [pc, #56]	; (2a78c <lwm2m_engine_get_resource+0x54>)
   2a752:	681b      	ldr	r3, [r3, #0]
   2a754:	075b      	lsls	r3, r3, #29
   2a756:	d00d      	beq.n	2a774 <lwm2m_engine_get_resource+0x3c>
   2a758:	2301      	movs	r3, #1
   2a75a:	f04f 0100 	mov.w	r1, #0
   2a75e:	4a0c      	ldr	r2, [pc, #48]	; (2a790 <lwm2m_engine_get_resource+0x58>)
   2a760:	f363 0107 	bfi	r1, r3, #0, #8
   2a764:	4b0b      	ldr	r3, [pc, #44]	; (2a794 <lwm2m_engine_get_resource+0x5c>)
   2a766:	480c      	ldr	r0, [pc, #48]	; (2a798 <lwm2m_engine_get_resource+0x60>)
   2a768:	1a9b      	subs	r3, r3, r2
   2a76a:	08db      	lsrs	r3, r3, #3
   2a76c:	f363 118f 	bfi	r1, r3, #6, #10
   2a770:	f016 f967 	bl	40a42 <log_0>
   2a774:	f06f 0015 	mvn.w	r0, #21
   2a778:	e006      	b.n	2a788 <lwm2m_engine_get_resource+0x50>
	return path_to_objs(&path, NULL, NULL, res, NULL);
   2a77a:	2200      	movs	r2, #0
   2a77c:	4623      	mov	r3, r4
   2a77e:	9200      	str	r2, [sp, #0]
   2a780:	4611      	mov	r1, r2
   2a782:	a803      	add	r0, sp, #12
   2a784:	f7fd fed0 	bl	28528 <path_to_objs>
}
   2a788:	b006      	add	sp, #24
   2a78a:	bd10      	pop	{r4, pc}
   2a78c:	20032b0c 	.word	0x20032b0c
   2a790:	00045f08 	.word	0x00045f08
   2a794:	00046018 	.word	0x00046018
   2a798:	0004b2d3 	.word	0x0004b2d3

0002a79c <lwm2m_engine_create_res_inst>:
{
   2a79c:	b510      	push	{r4, lr}
	struct lwm2m_engine_res *res = NULL;
   2a79e:	2400      	movs	r4, #0
{
   2a7a0:	b088      	sub	sp, #32
	ret = string_to_path(pathstr, &path, '/');
   2a7a2:	a905      	add	r1, sp, #20
	struct lwm2m_engine_res_inst *res_inst = NULL;
   2a7a4:	e9cd 4403 	strd	r4, r4, [sp, #12]
	ret = string_to_path(pathstr, &path, '/');
   2a7a8:	f7fd fd3e 	bl	28228 <string_to_path.constprop.19>
	if (ret < 0) {
   2a7ac:	2800      	cmp	r0, #0
   2a7ae:	db09      	blt.n	2a7c4 <lwm2m_engine_create_res_inst+0x28>
	if (path.level < 4) {
   2a7b0:	f89d 301c 	ldrb.w	r3, [sp, #28]
   2a7b4:	2b03      	cmp	r3, #3
   2a7b6:	d816      	bhi.n	2a7e6 <lwm2m_engine_create_res_inst+0x4a>
		LOG_ERR("path must have 4 parts");
   2a7b8:	4b3e      	ldr	r3, [pc, #248]	; (2a8b4 <lwm2m_engine_create_res_inst+0x118>)
   2a7ba:	681b      	ldr	r3, [r3, #0]
   2a7bc:	0758      	lsls	r0, r3, #29
   2a7be:	d103      	bne.n	2a7c8 <lwm2m_engine_create_res_inst+0x2c>
		return -EINVAL;
   2a7c0:	f06f 0015 	mvn.w	r0, #21
}
   2a7c4:	b008      	add	sp, #32
   2a7c6:	bd10      	pop	{r4, pc}
		LOG_ERR("path must have 4 parts");
   2a7c8:	2301      	movs	r3, #1
   2a7ca:	f04f 0100 	mov.w	r1, #0
   2a7ce:	4a3a      	ldr	r2, [pc, #232]	; (2a8b8 <lwm2m_engine_create_res_inst+0x11c>)
   2a7d0:	f363 0107 	bfi	r1, r3, #0, #8
   2a7d4:	4b39      	ldr	r3, [pc, #228]	; (2a8bc <lwm2m_engine_create_res_inst+0x120>)
   2a7d6:	483a      	ldr	r0, [pc, #232]	; (2a8c0 <lwm2m_engine_create_res_inst+0x124>)
   2a7d8:	1a9b      	subs	r3, r3, r2
   2a7da:	08db      	lsrs	r3, r3, #3
   2a7dc:	f363 118f 	bfi	r1, r3, #6, #10
   2a7e0:	f016 f92f 	bl	40a42 <log_0>
   2a7e4:	e7ec      	b.n	2a7c0 <lwm2m_engine_create_res_inst+0x24>
	ret = path_to_objs(&path, NULL, NULL, &res, &res_inst);
   2a7e6:	ab04      	add	r3, sp, #16
   2a7e8:	9300      	str	r3, [sp, #0]
   2a7ea:	4622      	mov	r2, r4
   2a7ec:	ab03      	add	r3, sp, #12
   2a7ee:	4621      	mov	r1, r4
   2a7f0:	a805      	add	r0, sp, #20
   2a7f2:	f7fd fe99 	bl	28528 <path_to_objs>
	if (ret < 0) {
   2a7f6:	2800      	cmp	r0, #0
   2a7f8:	dbe4      	blt.n	2a7c4 <lwm2m_engine_create_res_inst+0x28>
	if (!res) {
   2a7fa:	9a03      	ldr	r2, [sp, #12]
   2a7fc:	b9a2      	cbnz	r2, 2a828 <lwm2m_engine_create_res_inst+0x8c>
		LOG_ERR("resource %u not found", path.res_id);
   2a7fe:	4b2d      	ldr	r3, [pc, #180]	; (2a8b4 <lwm2m_engine_create_res_inst+0x118>)
   2a800:	681b      	ldr	r3, [r3, #0]
   2a802:	0759      	lsls	r1, r3, #29
   2a804:	d00d      	beq.n	2a822 <lwm2m_engine_create_res_inst+0x86>
   2a806:	2301      	movs	r3, #1
   2a808:	492b      	ldr	r1, [pc, #172]	; (2a8b8 <lwm2m_engine_create_res_inst+0x11c>)
   2a80a:	f363 0207 	bfi	r2, r3, #0, #8
   2a80e:	4b2b      	ldr	r3, [pc, #172]	; (2a8bc <lwm2m_engine_create_res_inst+0x120>)
   2a810:	482c      	ldr	r0, [pc, #176]	; (2a8c4 <lwm2m_engine_create_res_inst+0x128>)
   2a812:	1a5b      	subs	r3, r3, r1
   2a814:	08db      	lsrs	r3, r3, #3
   2a816:	f363 128f 	bfi	r2, r3, #6, #10
   2a81a:	f8bd 1018 	ldrh.w	r1, [sp, #24]
   2a81e:	f016 f91d 	bl	40a5c <log_1>
		return -ENOENT;
   2a822:	f06f 0001 	mvn.w	r0, #1
   2a826:	e7cd      	b.n	2a7c4 <lwm2m_engine_create_res_inst+0x28>
	if (res_inst && res_inst->res_inst_id != RES_INSTANCE_NOT_CREATED) {
   2a828:	9b04      	ldr	r3, [sp, #16]
   2a82a:	b1cb      	cbz	r3, 2a860 <lwm2m_engine_create_res_inst+0xc4>
   2a82c:	88d9      	ldrh	r1, [r3, #6]
   2a82e:	f64f 73ff 	movw	r3, #65535	; 0xffff
   2a832:	4299      	cmp	r1, r3
   2a834:	d014      	beq.n	2a860 <lwm2m_engine_create_res_inst+0xc4>
		LOG_ERR("res instance %u already exists", path.res_inst_id);
   2a836:	4b1f      	ldr	r3, [pc, #124]	; (2a8b4 <lwm2m_engine_create_res_inst+0x118>)
   2a838:	681b      	ldr	r3, [r3, #0]
   2a83a:	075a      	lsls	r2, r3, #29
   2a83c:	d0c0      	beq.n	2a7c0 <lwm2m_engine_create_res_inst+0x24>
   2a83e:	2301      	movs	r3, #1
   2a840:	f04f 0200 	mov.w	r2, #0
   2a844:	491c      	ldr	r1, [pc, #112]	; (2a8b8 <lwm2m_engine_create_res_inst+0x11c>)
   2a846:	f363 0207 	bfi	r2, r3, #0, #8
   2a84a:	4b1c      	ldr	r3, [pc, #112]	; (2a8bc <lwm2m_engine_create_res_inst+0x120>)
   2a84c:	481e      	ldr	r0, [pc, #120]	; (2a8c8 <lwm2m_engine_create_res_inst+0x12c>)
   2a84e:	1a5b      	subs	r3, r3, r1
   2a850:	08db      	lsrs	r3, r3, #3
   2a852:	f363 128f 	bfi	r2, r3, #6, #10
   2a856:	f8bd 101a 	ldrh.w	r1, [sp, #26]
   2a85a:	f016 f8ff 	bl	40a5c <log_1>
   2a85e:	e7af      	b.n	2a7c0 <lwm2m_engine_create_res_inst+0x24>
	if (!res->res_instances || res->res_inst_count == 0) {
   2a860:	6913      	ldr	r3, [r2, #16]
   2a862:	b10b      	cbz	r3, 2a868 <lwm2m_engine_create_res_inst+0xcc>
   2a864:	7d91      	ldrb	r1, [r2, #22]
   2a866:	b9a1      	cbnz	r1, 2a892 <lwm2m_engine_create_res_inst+0xf6>
		LOG_ERR("no available res instances");
   2a868:	4b12      	ldr	r3, [pc, #72]	; (2a8b4 <lwm2m_engine_create_res_inst+0x118>)
   2a86a:	681b      	ldr	r3, [r3, #0]
   2a86c:	075b      	lsls	r3, r3, #29
   2a86e:	d00d      	beq.n	2a88c <lwm2m_engine_create_res_inst+0xf0>
   2a870:	2301      	movs	r3, #1
   2a872:	f04f 0100 	mov.w	r1, #0
   2a876:	4a10      	ldr	r2, [pc, #64]	; (2a8b8 <lwm2m_engine_create_res_inst+0x11c>)
   2a878:	f363 0107 	bfi	r1, r3, #0, #8
   2a87c:	4b0f      	ldr	r3, [pc, #60]	; (2a8bc <lwm2m_engine_create_res_inst+0x120>)
   2a87e:	4813      	ldr	r0, [pc, #76]	; (2a8cc <lwm2m_engine_create_res_inst+0x130>)
   2a880:	1a9b      	subs	r3, r3, r2
   2a882:	08db      	lsrs	r3, r3, #3
   2a884:	f363 118f 	bfi	r1, r3, #6, #10
   2a888:	f016 f8db 	bl	40a42 <log_0>
		return -ENOMEM;
   2a88c:	f06f 000b 	mvn.w	r0, #11
   2a890:	e798      	b.n	2a7c4 <lwm2m_engine_create_res_inst+0x28>
	for (i = 0; i < res->res_inst_count; i++) {
   2a892:	2200      	movs	r2, #0
		if (res->res_instances[i].res_inst_id ==
   2a894:	f64f 70ff 	movw	r0, #65535	; 0xffff
   2a898:	88dc      	ldrh	r4, [r3, #6]
   2a89a:	4284      	cmp	r4, r0
   2a89c:	d005      	beq.n	2a8aa <lwm2m_engine_create_res_inst+0x10e>
	for (i = 0; i < res->res_inst_count; i++) {
   2a89e:	3201      	adds	r2, #1
   2a8a0:	4291      	cmp	r1, r2
   2a8a2:	f103 030c 	add.w	r3, r3, #12
   2a8a6:	dcf7      	bgt.n	2a898 <lwm2m_engine_create_res_inst+0xfc>
   2a8a8:	e7de      	b.n	2a868 <lwm2m_engine_create_res_inst+0xcc>
	res->res_instances[i].res_inst_id = path.res_inst_id;
   2a8aa:	f8bd 201a 	ldrh.w	r2, [sp, #26]
	return 0;
   2a8ae:	2000      	movs	r0, #0
	res->res_instances[i].res_inst_id = path.res_inst_id;
   2a8b0:	80da      	strh	r2, [r3, #6]
	return 0;
   2a8b2:	e787      	b.n	2a7c4 <lwm2m_engine_create_res_inst+0x28>
   2a8b4:	20032b0c 	.word	0x20032b0c
   2a8b8:	00045f08 	.word	0x00045f08
   2a8bc:	00046018 	.word	0x00046018
   2a8c0:	0004b26c 	.word	0x0004b26c
   2a8c4:	0004b283 	.word	0x0004b283
   2a8c8:	0004b299 	.word	0x0004b299
   2a8cc:	0004b2b8 	.word	0x0004b2b8

0002a8d0 <lwm2m_write_handler>:
{
   2a8d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2a8d4:	b093      	sub	sp, #76	; 0x4c
   2a8d6:	9308      	str	r3, [sp, #32]
	s64_t temp64 = 0;
   2a8d8:	2600      	movs	r6, #0
	struct block_context *block_ctx = NULL;
   2a8da:	2300      	movs	r3, #0
	s64_t temp64 = 0;
   2a8dc:	2700      	movs	r7, #0
{
   2a8de:	4688      	mov	r8, r1
   2a8e0:	4691      	mov	r9, r2
   2a8e2:	9c1c      	ldr	r4, [sp, #112]	; 0x70
	struct block_context *block_ctx = NULL;
   2a8e4:	930b      	str	r3, [sp, #44]	; 0x2c
	s64_t temp64 = 0;
   2a8e6:	e9cd 670e 	strd	r6, r7, [sp, #56]	; 0x38
	s32_t temp32 = 0;
   2a8ea:	930d      	str	r3, [sp, #52]	; 0x34
	if (!obj_inst || !res || !res_inst || !obj_field || !msg) {
   2a8ec:	9006      	str	r0, [sp, #24]
   2a8ee:	b910      	cbnz	r0, 2a8f6 <lwm2m_write_handler+0x26>
			return -EINVAL;
   2a8f0:	f06f 0515 	mvn.w	r5, #21
			if (ret < 0) {
   2a8f4:	e093      	b.n	2aa1e <lwm2m_write_handler+0x14e>
	if (!obj_inst || !res || !res_inst || !obj_field || !msg) {
   2a8f6:	2900      	cmp	r1, #0
   2a8f8:	d0fa      	beq.n	2a8f0 <lwm2m_write_handler+0x20>
   2a8fa:	2a00      	cmp	r2, #0
   2a8fc:	d0f8      	beq.n	2a8f0 <lwm2m_write_handler+0x20>
   2a8fe:	9b08      	ldr	r3, [sp, #32]
   2a900:	2b00      	cmp	r3, #0
   2a902:	d0f5      	beq.n	2a8f0 <lwm2m_write_handler+0x20>
   2a904:	2c00      	cmp	r4, #0
   2a906:	d0f3      	beq.n	2a8f0 <lwm2m_write_handler+0x20>
	if (LWM2M_HAS_RES_FLAG(res_inst, LWM2M_RES_DATA_FLAG_RO)) {
   2a908:	7a13      	ldrb	r3, [r2, #8]
   2a90a:	07da      	lsls	r2, r3, #31
   2a90c:	f100 8102 	bmi.w	2ab14 <lwm2m_write_handler+0x244>
	data_len = res_inst->data_len;
   2a910:	f8b9 3004 	ldrh.w	r3, [r9, #4]
	if (res->pre_write_cb) {
   2a914:	684d      	ldr	r5, [r1, #4]
	data_ptr = res_inst->data_ptr;
   2a916:	f8d9 6000 	ldr.w	r6, [r9]
	data_len = res_inst->data_len;
   2a91a:	930c      	str	r3, [sp, #48]	; 0x30
	if (res->pre_write_cb) {
   2a91c:	b13d      	cbz	r5, 2a92e <lwm2m_write_handler+0x5e>
		data_ptr = res->pre_write_cb(obj_inst->obj_inst_id,
   2a91e:	9806      	ldr	r0, [sp, #24]
   2a920:	ab0c      	add	r3, sp, #48	; 0x30
   2a922:	f8b9 2006 	ldrh.w	r2, [r9, #6]
   2a926:	8a89      	ldrh	r1, [r1, #20]
   2a928:	8980      	ldrh	r0, [r0, #12]
   2a92a:	47a8      	blx	r5
   2a92c:	4606      	mov	r6, r0
	if (res->post_write_cb) {
   2a92e:	f8d8 5008 	ldr.w	r5, [r8, #8]
   2a932:	b37d      	cbz	r5, 2a994 <lwm2m_write_handler+0xc4>
		ret = get_option_int(msg->in.in_cpkt, COAP_OPTION_BLOCK1);
   2a934:	211b      	movs	r1, #27
   2a936:	68a0      	ldr	r0, [r4, #8]
   2a938:	f018 fae1 	bl	42efe <get_option_int>
		if (ret >= 0) {
   2a93c:	1e05      	subs	r5, r0, #0
   2a93e:	db29      	blt.n	2a994 <lwm2m_write_handler+0xc4>
			last_block = !GET_MORE(ret);
   2a940:	f085 0308 	eor.w	r3, r5, #8
   2a944:	f3c3 03c0 	ubfx	r3, r3, #3, #1
			tkl = coap_header_get_token(msg->in.in_cpkt, token);
   2a948:	a910      	add	r1, sp, #64	; 0x40
   2a94a:	68a0      	ldr	r0, [r4, #8]
			last_block = !GET_MORE(ret);
   2a94c:	9305      	str	r3, [sp, #20]
			tkl = coap_header_get_token(msg->in.in_cpkt, token);
   2a94e:	f017 fdbf 	bl	424d0 <coap_header_get_token>
			if (tkl && !get_block_ctx(token, tkl, &block_ctx)) {
   2a952:	4601      	mov	r1, r0
   2a954:	b300      	cbz	r0, 2a998 <lwm2m_write_handler+0xc8>
   2a956:	aa0b      	add	r2, sp, #44	; 0x2c
   2a958:	a810      	add	r0, sp, #64	; 0x40
   2a95a:	f7fd fba3 	bl	280a4 <get_block_ctx>
   2a95e:	b9d8      	cbnz	r0, 2a998 <lwm2m_write_handler+0xc8>
				total_size = block_ctx->ctx.total_size;
   2a960:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   2a962:	681f      	ldr	r7, [r3, #0]
	if (data_ptr && data_len > 0) {
   2a964:	2e00      	cmp	r6, #0
   2a966:	f000 80d8 	beq.w	2ab1a <lwm2m_write_handler+0x24a>
   2a96a:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
   2a96e:	f1ba 0f00 	cmp.w	sl, #0
   2a972:	f000 80d2 	beq.w	2ab1a <lwm2m_write_handler+0x24a>
		switch (obj_field->data_type) {
   2a976:	9b08      	ldr	r3, [sp, #32]
   2a978:	78d9      	ldrb	r1, [r3, #3]
   2a97a:	1e4b      	subs	r3, r1, #1
   2a97c:	2b0d      	cmp	r3, #13
   2a97e:	f200 80b5 	bhi.w	2aaec <lwm2m_write_handler+0x21c>
   2a982:	e8df f003 	tbb	[pc, r3]
   2a986:	500b      	.short	0x500b
   2a988:	9b938075 	.word	0x9b938075
   2a98c:	9b938e88 	.word	0x9b938e88
   2a990:	aca980a3 	.word	0xaca980a3
	bool last_block = true;
   2a994:	2301      	movs	r3, #1
   2a996:	9305      	str	r3, [sp, #20]
	size_t total_size = 0;
   2a998:	2700      	movs	r7, #0
   2a99a:	e7e3      	b.n	2a964 <lwm2m_write_handler+0x94>
			ret = lwm2m_write_handler_opaque(obj_inst, res,
   2a99c:	1d23      	adds	r3, r4, #4
   2a99e:	9309      	str	r3, [sp, #36]	; 0x24
	bool last_pkt_block = false, first_read = true;
   2a9a0:	2500      	movs	r5, #0
   2a9a2:	2301      	movs	r3, #1
   2a9a4:	f88d 502b 	strb.w	r5, [sp, #43]	; 0x2b
   2a9a8:	9307      	str	r3, [sp, #28]
   2a9aa:	9b07      	ldr	r3, [sp, #28]
	while (!last_pkt_block && len > 0) {
   2a9ac:	f89d 202b 	ldrb.w	r2, [sp, #43]	; 0x2b
   2a9b0:	9207      	str	r2, [sp, #28]
   2a9b2:	b10a      	cbz	r2, 2a9b8 <lwm2m_write_handler+0xe8>
	size_t len = 0;
   2a9b4:	2000      	movs	r0, #0
   2a9b6:	e03f      	b.n	2aa38 <lwm2m_write_handler+0x168>
		if (first_read) {
   2a9b8:	b173      	cbz	r3, 2a9d8 <lwm2m_write_handler+0x108>

static inline size_t engine_get_opaque(struct lwm2m_input_context *in,
				       u8_t *buf, size_t buflen,
				       bool *last_block)
{
	if (in->reader->get_opaque) {
   2a9ba:	6863      	ldr	r3, [r4, #4]
   2a9bc:	f8d3 b018 	ldr.w	fp, [r3, #24]
   2a9c0:	f1bb 0f00 	cmp.w	fp, #0
   2a9c4:	d006      	beq.n	2a9d4 <lwm2m_write_handler+0x104>
		return in->reader->get_opaque(in, buf, buflen, last_block);
   2a9c6:	f10d 032b 	add.w	r3, sp, #43	; 0x2b
   2a9ca:	4652      	mov	r2, sl
   2a9cc:	4631      	mov	r1, r6
   2a9ce:	9809      	ldr	r0, [sp, #36]	; 0x24
   2a9d0:	47d8      	blx	fp
			if (len == 0) {
   2a9d2:	b950      	cbnz	r0, 2a9ea <lwm2m_write_handler+0x11a>
				return 0;
   2a9d4:	2500      	movs	r5, #0
   2a9d6:	e7ed      	b.n	2a9b4 <lwm2m_write_handler+0xe4>
			len = lwm2m_engine_get_opaque_more(in, (u8_t *)data_ptr,
   2a9d8:	f10d 032b 	add.w	r3, sp, #43	; 0x2b
   2a9dc:	4652      	mov	r2, sl
   2a9de:	4631      	mov	r1, r6
   2a9e0:	9809      	ldr	r0, [sp, #36]	; 0x24
   2a9e2:	f018 fb93 	bl	4310c <lwm2m_engine_get_opaque_more>
		if (len == 0) {
   2a9e6:	2800      	cmp	r0, #0
   2a9e8:	d082      	beq.n	2a8f0 <lwm2m_write_handler+0x20>
		if (res->post_write_cb) {
   2a9ea:	f8d8 b008 	ldr.w	fp, [r8, #8]
   2a9ee:	2300      	movs	r3, #0
   2a9f0:	f1bb 0f00 	cmp.w	fp, #0
   2a9f4:	d0da      	beq.n	2a9ac <lwm2m_write_handler+0xdc>
						 last_pkt_block && last_block,
   2a9f6:	f89d 302b 	ldrb.w	r3, [sp, #43]	; 0x2b
   2a9fa:	9a05      	ldr	r2, [sp, #20]
   2a9fc:	2b00      	cmp	r3, #0
   2a9fe:	bf18      	it	ne
   2aa00:	4613      	movne	r3, r2
			ret = res->post_write_cb(obj_inst->obj_inst_id,
   2aa02:	b280      	uxth	r0, r0
   2aa04:	e9cd 3701 	strd	r3, r7, [sp, #4]
   2aa08:	9000      	str	r0, [sp, #0]
   2aa0a:	9806      	ldr	r0, [sp, #24]
   2aa0c:	4633      	mov	r3, r6
   2aa0e:	f8b9 2006 	ldrh.w	r2, [r9, #6]
   2aa12:	f8b8 1014 	ldrh.w	r1, [r8, #20]
   2aa16:	8980      	ldrh	r0, [r0, #12]
   2aa18:	47d8      	blx	fp
			if (ret < 0) {
   2aa1a:	1e05      	subs	r5, r0, #0
   2aa1c:	dac5      	bge.n	2a9aa <lwm2m_write_handler+0xda>
}
   2aa1e:	4628      	mov	r0, r5
   2aa20:	b013      	add	sp, #76	; 0x4c
   2aa22:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	return in->reader->get_string(in, buf, buflen);
   2aa26:	6863      	ldr	r3, [r4, #4]
   2aa28:	4652      	mov	r2, sl
   2aa2a:	689b      	ldr	r3, [r3, #8]
   2aa2c:	4631      	mov	r1, r6
   2aa2e:	1d20      	adds	r0, r4, #4
   2aa30:	4798      	blx	r3
			len = strlen((char *)data_ptr);
   2aa32:	4630      	mov	r0, r6
   2aa34:	f7f2 fb70 	bl	1d118 <strlen>
	if (res->post_write_cb &&
   2aa38:	f8d8 a008 	ldr.w	sl, [r8, #8]
   2aa3c:	f1ba 0f00 	cmp.w	sl, #0
   2aa40:	d011      	beq.n	2aa66 <lwm2m_write_handler+0x196>
   2aa42:	9b08      	ldr	r3, [sp, #32]
   2aa44:	78db      	ldrb	r3, [r3, #3]
   2aa46:	2b01      	cmp	r3, #1
   2aa48:	d00d      	beq.n	2aa66 <lwm2m_write_handler+0x196>
		ret = res->post_write_cb(obj_inst->obj_inst_id,
   2aa4a:	9b05      	ldr	r3, [sp, #20]
   2aa4c:	b280      	uxth	r0, r0
   2aa4e:	9000      	str	r0, [sp, #0]
   2aa50:	9806      	ldr	r0, [sp, #24]
   2aa52:	9301      	str	r3, [sp, #4]
   2aa54:	9702      	str	r7, [sp, #8]
   2aa56:	4633      	mov	r3, r6
   2aa58:	f8b9 2006 	ldrh.w	r2, [r9, #6]
   2aa5c:	f8b8 1014 	ldrh.w	r1, [r8, #20]
   2aa60:	8980      	ldrh	r0, [r0, #12]
   2aa62:	47d0      	blx	sl
   2aa64:	4605      	mov	r5, r0
	NOTIFY_OBSERVER_PATH(&msg->path);
   2aa66:	f104 0020 	add.w	r0, r4, #32
   2aa6a:	f018 fa7c 	bl	42f66 <lwm2m_notify_observer_path>
	return ret;
   2aa6e:	e7d6      	b.n	2aa1e <lwm2m_write_handler+0x14e>
	return in->reader->get_s64(in, value);
   2aa70:	6863      	ldr	r3, [r4, #4]
   2aa72:	a90e      	add	r1, sp, #56	; 0x38
   2aa74:	685b      	ldr	r3, [r3, #4]
   2aa76:	1d20      	adds	r0, r4, #4
   2aa78:	4798      	blx	r3
			*(u64_t *)data_ptr = temp64;
   2aa7a:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
   2aa7e:	e9c6 2300 	strd	r2, r3, [r6]
			len = sizeof(float32_value_t);
   2aa82:	2008      	movs	r0, #8
   2aa84:	e7d8      	b.n	2aa38 <lwm2m_write_handler+0x168>
			engine_get_s32(&msg->in, &temp32);
   2aa86:	a90d      	add	r1, sp, #52	; 0x34
   2aa88:	1d20      	adds	r0, r4, #4
   2aa8a:	f018 fa33 	bl	42ef4 <engine_get_s32>
			*(u32_t *)data_ptr = temp32;
   2aa8e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   2aa90:	6033      	str	r3, [r6, #0]
			len = 4;
   2aa92:	2004      	movs	r0, #4
			break;
   2aa94:	e7d0      	b.n	2aa38 <lwm2m_write_handler+0x168>
   2aa96:	6863      	ldr	r3, [r4, #4]
   2aa98:	685b      	ldr	r3, [r3, #4]
	return in->reader->get_float32fix(in, value);
   2aa9a:	4631      	mov	r1, r6
   2aa9c:	1d20      	adds	r0, r4, #4
   2aa9e:	4798      	blx	r3
   2aaa0:	e7ef      	b.n	2aa82 <lwm2m_write_handler+0x1b2>
			engine_get_s32(&msg->in, (s32_t *)data_ptr);
   2aaa2:	4631      	mov	r1, r6
   2aaa4:	1d20      	adds	r0, r4, #4
   2aaa6:	f018 fa25 	bl	42ef4 <engine_get_s32>
   2aaaa:	e7f2      	b.n	2aa92 <lwm2m_write_handler+0x1c2>
			engine_get_s32(&msg->in, &temp32);
   2aaac:	a90d      	add	r1, sp, #52	; 0x34
   2aaae:	1d20      	adds	r0, r4, #4
   2aab0:	f018 fa20 	bl	42ef4 <engine_get_s32>
			*(s16_t *)data_ptr = temp32;
   2aab4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
			len = 2;
   2aab6:	2002      	movs	r0, #2
			*(s16_t *)data_ptr = temp32;
   2aab8:	8033      	strh	r3, [r6, #0]
			break;
   2aaba:	e7bd      	b.n	2aa38 <lwm2m_write_handler+0x168>
			engine_get_s32(&msg->in, &temp32);
   2aabc:	a90d      	add	r1, sp, #52	; 0x34
   2aabe:	1d20      	adds	r0, r4, #4
   2aac0:	f018 fa18 	bl	42ef4 <engine_get_s32>
			*(s8_t *)data_ptr = temp32;
   2aac4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   2aac6:	7033      	strb	r3, [r6, #0]
			len = 1;
   2aac8:	2001      	movs	r0, #1
   2aaca:	e7b5      	b.n	2aa38 <lwm2m_write_handler+0x168>
	return in->reader->get_bool(in, value);
   2aacc:	6863      	ldr	r3, [r4, #4]
   2aace:	4631      	mov	r1, r6
   2aad0:	695b      	ldr	r3, [r3, #20]
   2aad2:	1d20      	adds	r0, r4, #4
   2aad4:	4798      	blx	r3
   2aad6:	e7f7      	b.n	2aac8 <lwm2m_write_handler+0x1f8>
	return in->reader->get_float32fix(in, value);
   2aad8:	6863      	ldr	r3, [r4, #4]
   2aada:	68db      	ldr	r3, [r3, #12]
   2aadc:	e7dd      	b.n	2aa9a <lwm2m_write_handler+0x1ca>
	return in->reader->get_float64fix(in, value);
   2aade:	6863      	ldr	r3, [r4, #4]
   2aae0:	4631      	mov	r1, r6
   2aae2:	691b      	ldr	r3, [r3, #16]
   2aae4:	1d20      	adds	r0, r4, #4
   2aae6:	4798      	blx	r3
			len = sizeof(float64_value_t);
   2aae8:	2010      	movs	r0, #16
   2aaea:	e7a5      	b.n	2aa38 <lwm2m_write_handler+0x168>
			LOG_ERR("unknown obj data_type %d",
   2aaec:	4b0c      	ldr	r3, [pc, #48]	; (2ab20 <lwm2m_write_handler+0x250>)
   2aaee:	681b      	ldr	r3, [r3, #0]
   2aaf0:	075b      	lsls	r3, r3, #29
   2aaf2:	f43f aefd 	beq.w	2a8f0 <lwm2m_write_handler+0x20>
   2aaf6:	2301      	movs	r3, #1
   2aaf8:	f04f 0200 	mov.w	r2, #0
   2aafc:	4809      	ldr	r0, [pc, #36]	; (2ab24 <lwm2m_write_handler+0x254>)
   2aafe:	f363 0207 	bfi	r2, r3, #0, #8
   2ab02:	4b09      	ldr	r3, [pc, #36]	; (2ab28 <lwm2m_write_handler+0x258>)
   2ab04:	1a1b      	subs	r3, r3, r0
   2ab06:	08db      	lsrs	r3, r3, #3
   2ab08:	f363 128f 	bfi	r2, r3, #6, #10
   2ab0c:	4807      	ldr	r0, [pc, #28]	; (2ab2c <lwm2m_write_handler+0x25c>)
   2ab0e:	f015 ffa5 	bl	40a5c <log_1>
   2ab12:	e6ed      	b.n	2a8f0 <lwm2m_write_handler+0x20>
		return -EACCES;
   2ab14:	f06f 050c 	mvn.w	r5, #12
   2ab18:	e781      	b.n	2aa1e <lwm2m_write_handler+0x14e>
		return -ENOENT;
   2ab1a:	f06f 0501 	mvn.w	r5, #1
   2ab1e:	e77e      	b.n	2aa1e <lwm2m_write_handler+0x14e>
   2ab20:	20032b0c 	.word	0x20032b0c
   2ab24:	00045f08 	.word	0x00045f08
   2ab28:	00046018 	.word	0x00046018
   2ab2c:	0004b3ce 	.word	0x0004b3ce

0002ab30 <lwm2m_perform_read_op>:
{
   2ab30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (msg->path.level >= 2U) {
   2ab34:	f890 3028 	ldrb.w	r3, [r0, #40]	; 0x28
{
   2ab38:	b08d      	sub	sp, #52	; 0x34
	if (msg->path.level >= 2U) {
   2ab3a:	2b01      	cmp	r3, #1
{
   2ab3c:	4604      	mov	r4, r0
   2ab3e:	460d      	mov	r5, r1
	if (msg->path.level >= 2U) {
   2ab40:	d921      	bls.n	2ab86 <lwm2m_perform_read_op+0x56>
		obj_inst = get_engine_obj_inst(msg->path.obj_id,
   2ab42:	8c41      	ldrh	r1, [r0, #34]	; 0x22
   2ab44:	8c00      	ldrh	r0, [r0, #32]
   2ab46:	f7fd f933 	bl	27db0 <get_engine_obj_inst>
		obj_inst = next_engine_obj_inst(msg->path.obj_id, -1);
   2ab4a:	4607      	mov	r7, r0
	if (!obj_inst) {
   2ab4c:	b1e0      	cbz	r0, 2ab88 <lwm2m_perform_read_op+0x58>
	ret = coap_append_option_int(msg->out.out_cpkt,
   2ab4e:	462a      	mov	r2, r5
   2ab50:	210c      	movs	r1, #12
   2ab52:	69a0      	ldr	r0, [r4, #24]
   2ab54:	f7fa fa0a 	bl	24f6c <coap_append_option_int>
	if (ret < 0) {
   2ab58:	f1b0 0b00 	subs.w	fp, r0, #0
   2ab5c:	da20      	bge.n	2aba0 <lwm2m_perform_read_op+0x70>
		LOG_ERR("Error setting response content-format: %d", ret);
   2ab5e:	4b9c      	ldr	r3, [pc, #624]	; (2add0 <lwm2m_perform_read_op+0x2a0>)
   2ab60:	681b      	ldr	r3, [r3, #0]
   2ab62:	075c      	lsls	r4, r3, #29
   2ab64:	d012      	beq.n	2ab8c <lwm2m_perform_read_op+0x5c>
   2ab66:	2301      	movs	r3, #1
   2ab68:	f04f 0200 	mov.w	r2, #0
   2ab6c:	4999      	ldr	r1, [pc, #612]	; (2add4 <lwm2m_perform_read_op+0x2a4>)
   2ab6e:	f363 0207 	bfi	r2, r3, #0, #8
   2ab72:	4b99      	ldr	r3, [pc, #612]	; (2add8 <lwm2m_perform_read_op+0x2a8>)
   2ab74:	4899      	ldr	r0, [pc, #612]	; (2addc <lwm2m_perform_read_op+0x2ac>)
   2ab76:	1a5b      	subs	r3, r3, r1
   2ab78:	4659      	mov	r1, fp
   2ab7a:	08db      	lsrs	r3, r3, #3
   2ab7c:	f363 128f 	bfi	r2, r3, #6, #10
		LOG_ERR("Error appending payload marker: %d", ret);
   2ab80:	f015 ff6c 	bl	40a5c <log_1>
   2ab84:	e002      	b.n	2ab8c <lwm2m_perform_read_op+0x5c>
	} else if (msg->path.level == 1U) {
   2ab86:	d005      	beq.n	2ab94 <lwm2m_perform_read_op+0x64>
		return -ENOENT;
   2ab88:	f06f 0b01 	mvn.w	fp, #1
}
   2ab8c:	4658      	mov	r0, fp
   2ab8e:	b00d      	add	sp, #52	; 0x34
   2ab90:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		obj_inst = next_engine_obj_inst(msg->path.obj_id, -1);
   2ab94:	f04f 31ff 	mov.w	r1, #4294967295
   2ab98:	8c00      	ldrh	r0, [r0, #32]
   2ab9a:	f7fd f917 	bl	27dcc <next_engine_obj_inst>
   2ab9e:	e7d4      	b.n	2ab4a <lwm2m_perform_read_op+0x1a>
	ret = coap_packet_append_payload_marker(msg->out.out_cpkt);
   2aba0:	69a0      	ldr	r0, [r4, #24]
   2aba2:	f017 fbcc 	bl	4233e <coap_packet_append_payload_marker>
	if (ret < 0) {
   2aba6:	f1b0 0b00 	subs.w	fp, r0, #0
   2abaa:	da11      	bge.n	2abd0 <lwm2m_perform_read_op+0xa0>
		LOG_ERR("Error appending payload marker: %d", ret);
   2abac:	4b88      	ldr	r3, [pc, #544]	; (2add0 <lwm2m_perform_read_op+0x2a0>)
   2abae:	681b      	ldr	r3, [r3, #0]
   2abb0:	0758      	lsls	r0, r3, #29
   2abb2:	d0eb      	beq.n	2ab8c <lwm2m_perform_read_op+0x5c>
   2abb4:	2301      	movs	r3, #1
   2abb6:	f04f 0200 	mov.w	r2, #0
   2abba:	4986      	ldr	r1, [pc, #536]	; (2add4 <lwm2m_perform_read_op+0x2a4>)
   2abbc:	f363 0207 	bfi	r2, r3, #0, #8
   2abc0:	4b85      	ldr	r3, [pc, #532]	; (2add8 <lwm2m_perform_read_op+0x2a8>)
   2abc2:	4887      	ldr	r0, [pc, #540]	; (2ade0 <lwm2m_perform_read_op+0x2b0>)
   2abc4:	1a5b      	subs	r3, r3, r1
   2abc6:	08db      	lsrs	r3, r3, #3
   2abc8:	f363 128f 	bfi	r2, r3, #6, #10
   2abcc:	4659      	mov	r1, fp
   2abce:	e7d7      	b.n	2ab80 <lwm2m_perform_read_op+0x50>
	memcpy(&temp_path, &msg->path, sizeof(temp_path));
   2abd0:	4625      	mov	r5, r4
   2abd2:	f855 0f20 	ldr.w	r0, [r5, #32]!
   2abd6:	ab09      	add	r3, sp, #36	; 0x24
   2abd8:	6869      	ldr	r1, [r5, #4]
   2abda:	892a      	ldrh	r2, [r5, #8]
   2abdc:	c303      	stmia	r3!, {r0, r1}
   2abde:	801a      	strh	r2, [r3, #0]
	if (out->writer->put_begin) {
   2abe0:	6963      	ldr	r3, [r4, #20]
	engine_put_begin(&msg->out, &msg->path);
   2abe2:	f104 0614 	add.w	r6, r4, #20
   2abe6:	681b      	ldr	r3, [r3, #0]
   2abe8:	b113      	cbz	r3, 2abf0 <lwm2m_perform_read_op+0xc0>
		return out->writer->put_begin(out, path);
   2abea:	4629      	mov	r1, r5
   2abec:	4630      	mov	r0, r6
   2abee:	4798      	blx	r3
   2abf0:	4b79      	ldr	r3, [pc, #484]	; (2add8 <lwm2m_perform_read_op+0x2a8>)
			LOG_ERR("unknown obj data_type %d",
   2abf2:	4a78      	ldr	r2, [pc, #480]	; (2add4 <lwm2m_perform_read_op+0x2a4>)
   2abf4:	1a9b      	subs	r3, r3, r2
   2abf6:	f3c3 03c9 	ubfx	r3, r3, #3, #10
   2abfa:	9305      	str	r3, [sp, #20]
   2abfc:	2300      	movs	r3, #0
   2abfe:	9303      	str	r3, [sp, #12]
		if (!obj_inst->resources || obj_inst->resource_count == 0U) {
   2ac00:	68bb      	ldr	r3, [r7, #8]
   2ac02:	b1ab      	cbz	r3, 2ac30 <lwm2m_perform_read_op+0x100>
   2ac04:	89fb      	ldrh	r3, [r7, #14]
   2ac06:	b19b      	cbz	r3, 2ac30 <lwm2m_perform_read_op+0x100>
   2ac08:	f894 2028 	ldrb.w	r2, [r4, #40]	; 0x28
		msg->path.obj_inst_id = obj_inst->obj_inst_id;
   2ac0c:	89b9      	ldrh	r1, [r7, #12]
		if (msg->path.level <= 1U) {
   2ac0e:	2a01      	cmp	r2, #1
   2ac10:	6963      	ldr	r3, [r4, #20]
		msg->path.obj_inst_id = obj_inst->obj_inst_id;
   2ac12:	8461      	strh	r1, [r4, #34]	; 0x22
		if (msg->path.level <= 1U) {
   2ac14:	d804      	bhi.n	2ac20 <lwm2m_perform_read_op+0xf0>
	if (out->writer->put_begin_oi) {
   2ac16:	689b      	ldr	r3, [r3, #8]
   2ac18:	b113      	cbz	r3, 2ac20 <lwm2m_perform_read_op+0xf0>
		return out->writer->put_begin_oi(out, path);
   2ac1a:	4629      	mov	r1, r5
   2ac1c:	4630      	mov	r0, r6
   2ac1e:	4798      	blx	r3
			ret = 0;
   2ac20:	2300      	movs	r3, #0
		for (index = 0; index < obj_inst->resource_count; index++) {
   2ac22:	9300      	str	r3, [sp, #0]
   2ac24:	9900      	ldr	r1, [sp, #0]
   2ac26:	89fb      	ldrh	r3, [r7, #14]
   2ac28:	f894 2028 	ldrb.w	r2, [r4, #40]	; 0x28
   2ac2c:	4299      	cmp	r1, r3
   2ac2e:	db26      	blt.n	2ac7e <lwm2m_perform_read_op+0x14e>
		if (msg->path.level <= 1U) {
   2ac30:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
   2ac34:	2b01      	cmp	r3, #1
   2ac36:	d80c      	bhi.n	2ac52 <lwm2m_perform_read_op+0x122>
	if (out->writer->put_end_oi) {
   2ac38:	6963      	ldr	r3, [r4, #20]
   2ac3a:	68db      	ldr	r3, [r3, #12]
   2ac3c:	2b00      	cmp	r3, #0
   2ac3e:	f000 8118 	beq.w	2ae72 <lwm2m_perform_read_op+0x342>
		return out->writer->put_end_oi(out, path);
   2ac42:	4629      	mov	r1, r5
   2ac44:	4630      	mov	r0, r6
   2ac46:	4798      	blx	r3
		if (msg->path.level <= 1U) {
   2ac48:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
   2ac4c:	2b01      	cmp	r3, #1
   2ac4e:	f240 8110 	bls.w	2ae72 <lwm2m_perform_read_op+0x342>
	if (out->writer->put_end) {
   2ac52:	6963      	ldr	r3, [r4, #20]
   2ac54:	685b      	ldr	r3, [r3, #4]
   2ac56:	2b00      	cmp	r3, #0
   2ac58:	f040 8114 	bne.w	2ae84 <lwm2m_perform_read_op+0x354>
   2ac5c:	ab09      	add	r3, sp, #36	; 0x24
   2ac5e:	cb03      	ldmia	r3!, {r0, r1}
   2ac60:	881b      	ldrh	r3, [r3, #0]
   2ac62:	6220      	str	r0, [r4, #32]
   2ac64:	6069      	str	r1, [r5, #4]
   2ac66:	812b      	strh	r3, [r5, #8]
	if (ret == 0 && num_read == 0U && msg->path.level == 3U) {
   2ac68:	f1bb 0f00 	cmp.w	fp, #0
   2ac6c:	d18e      	bne.n	2ab8c <lwm2m_perform_read_op+0x5c>
   2ac6e:	9b03      	ldr	r3, [sp, #12]
   2ac70:	2b00      	cmp	r3, #0
   2ac72:	d18b      	bne.n	2ab8c <lwm2m_perform_read_op+0x5c>
   2ac74:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
   2ac78:	2b03      	cmp	r3, #3
   2ac7a:	d187      	bne.n	2ab8c <lwm2m_perform_read_op+0x5c>
   2ac7c:	e784      	b.n	2ab88 <lwm2m_perform_read_op+0x58>
			if (msg->path.level > 2 &&
   2ac7e:	f04f 0818 	mov.w	r8, #24
   2ac82:	9900      	ldr	r1, [sp, #0]
   2ac84:	68bb      	ldr	r3, [r7, #8]
   2ac86:	2a02      	cmp	r2, #2
   2ac88:	fb08 3801 	mla	r8, r8, r1, r3
   2ac8c:	f8b8 1014 	ldrh.w	r1, [r8, #20]
   2ac90:	d903      	bls.n	2ac9a <lwm2m_perform_read_op+0x16a>
   2ac92:	8ca3      	ldrh	r3, [r4, #36]	; 0x24
   2ac94:	428b      	cmp	r3, r1
   2ac96:	f040 80e3 	bne.w	2ae60 <lwm2m_perform_read_op+0x330>
			msg->path.res_id = res->res_id;
   2ac9a:	84a1      	strh	r1, [r4, #36]	; 0x24
			obj_field = lwm2m_get_engine_obj_field(obj_inst->obj,
   2ac9c:	6878      	ldr	r0, [r7, #4]
   2ac9e:	f018 f967 	bl	42f70 <lwm2m_get_engine_obj_field>
			if (!obj_field) {
   2aca2:	9001      	str	r0, [sp, #4]
   2aca4:	2800      	cmp	r0, #0
   2aca6:	f000 80de 	beq.w	2ae66 <lwm2m_perform_read_op+0x336>
			} else if (!LWM2M_HAS_PERM(obj_field, LWM2M_PERM_R)) {
   2acaa:	7883      	ldrb	r3, [r0, #2]
   2acac:	07d9      	lsls	r1, r3, #31
   2acae:	f140 80dd 	bpl.w	2ae6c <lwm2m_perform_read_op+0x33c>
	if (out->writer->put_begin_r) {
   2acb2:	6963      	ldr	r3, [r4, #20]
   2acb4:	691b      	ldr	r3, [r3, #16]
   2acb6:	b113      	cbz	r3, 2acbe <lwm2m_perform_read_op+0x18e>
		return out->writer->put_begin_r(out, path);
   2acb8:	4629      	mov	r1, r5
   2acba:	4630      	mov	r0, r6
   2acbc:	4798      	blx	r3
	size_t data_len = 0;
   2acbe:	2300      	movs	r3, #0
	loop_max = res->res_inst_count;
   2acc0:	f898 2016 	ldrb.w	r2, [r8, #22]
	size_t data_len = 0;
   2acc4:	9308      	str	r3, [sp, #32]
	if (loop_max > 1) {
   2acc6:	2a01      	cmp	r2, #1
	loop_max = res->res_inst_count;
   2acc8:	9204      	str	r2, [sp, #16]
	if (loop_max > 1) {
   2acca:	f340 80e6 	ble.w	2ae9a <lwm2m_perform_read_op+0x36a>
			if (res->res_instances[i].res_inst_id !=
   2acce:	f04f 0e0c 	mov.w	lr, #12
   2acd2:	f64f 70ff 	movw	r0, #65535	; 0xffff
   2acd6:	f8d8 2010 	ldr.w	r2, [r8, #16]
   2acda:	3206      	adds	r2, #6
   2acdc:	fb0e fc03 	mul.w	ip, lr, r3
   2ace0:	f832 c00c 	ldrh.w	ip, [r2, ip]
   2ace4:	4584      	cmp	ip, r0
   2ace6:	f040 80d1 	bne.w	2ae8c <lwm2m_perform_read_op+0x35c>
		for (i = 0; i < loop_max; i++) {
   2acea:	9904      	ldr	r1, [sp, #16]
   2acec:	3301      	adds	r3, #1
   2acee:	4299      	cmp	r1, r3
   2acf0:	dcf4      	bgt.n	2acdc <lwm2m_perform_read_op+0x1ac>
				if (ret < 0) {
   2acf2:	f06f 0b01 	mvn.w	fp, #1
   2acf6:	e088      	b.n	2ae0a <lwm2m_perform_read_op+0x2da>
		if (res->res_instances[i].res_inst_id ==
   2acf8:	210c      	movs	r1, #12
   2acfa:	f64f 7eff 	movw	lr, #65535	; 0xffff
   2acfe:	9a02      	ldr	r2, [sp, #8]
   2ad00:	f8d8 c010 	ldr.w	ip, [r8, #16]
   2ad04:	434a      	muls	r2, r1
   2ad06:	eb0c 0002 	add.w	r0, ip, r2
   2ad0a:	88c1      	ldrh	r1, [r0, #6]
   2ad0c:	4571      	cmp	r1, lr
   2ad0e:	d031      	beq.n	2ad74 <lwm2m_perform_read_op+0x244>
		if (res->res_inst_count > 1) {
   2ad10:	2b01      	cmp	r3, #1
		if (res->read_cb) {
   2ad12:	f8d8 b000 	ldr.w	fp, [r8]
		data_len = res->res_instances[i].data_len;
   2ad16:	8883      	ldrh	r3, [r0, #4]
		data_ptr = res->res_instances[i].data_ptr;
   2ad18:	f85c 2002 	ldr.w	r2, [ip, r2]
			msg->path.res_inst_id =
   2ad1c:	bf88      	it	hi
   2ad1e:	84e1      	strhhi	r1, [r4, #38]	; 0x26
		data_len = res->res_instances[i].data_len;
   2ad20:	9308      	str	r3, [sp, #32]
		if (res->read_cb) {
   2ad22:	f1bb 0f00 	cmp.w	fp, #0
   2ad26:	d006      	beq.n	2ad36 <lwm2m_perform_read_op+0x206>
			data_ptr = res->read_cb(obj_inst->obj_inst_id,
   2ad28:	460a      	mov	r2, r1
   2ad2a:	ab08      	add	r3, sp, #32
   2ad2c:	f8b8 1014 	ldrh.w	r1, [r8, #20]
   2ad30:	89b8      	ldrh	r0, [r7, #12]
   2ad32:	47d8      	blx	fp
   2ad34:	4602      	mov	r2, r0
		if (!data_ptr || data_len == 0) {
   2ad36:	2a00      	cmp	r2, #0
   2ad38:	d0db      	beq.n	2acf2 <lwm2m_perform_read_op+0x1c2>
   2ad3a:	9b08      	ldr	r3, [sp, #32]
   2ad3c:	2b00      	cmp	r3, #0
   2ad3e:	d0d8      	beq.n	2acf2 <lwm2m_perform_read_op+0x1c2>
		switch (obj_field->data_type) {
   2ad40:	9b01      	ldr	r3, [sp, #4]
   2ad42:	78d9      	ldrb	r1, [r3, #3]
   2ad44:	1e4b      	subs	r3, r1, #1
   2ad46:	2b0d      	cmp	r3, #13
   2ad48:	d84c      	bhi.n	2ade4 <lwm2m_perform_read_op+0x2b4>
   2ad4a:	e8df f003 	tbb	[pc, r3]
   2ad4e:	0713      	.short	0x0713
   2ad50:	2e261f16 	.word	0x2e261f16
   2ad54:	2e261f16 	.word	0x2e261f16
   2ad58:	3d3a1f36 	.word	0x3d3a1f36
			engine_put_string(&msg->out, &msg->path,
   2ad5c:	4610      	mov	r0, r2
   2ad5e:	9207      	str	r2, [sp, #28]
   2ad60:	f7f2 f9da 	bl	1d118 <strlen>
	return out->writer->put_string(out, path, buf, buflen);
   2ad64:	6963      	ldr	r3, [r4, #20]
   2ad66:	9a07      	ldr	r2, [sp, #28]
   2ad68:	f8d3 b030 	ldr.w	fp, [r3, #48]	; 0x30
   2ad6c:	4629      	mov	r1, r5
   2ad6e:	4603      	mov	r3, r0
   2ad70:	4630      	mov	r0, r6
   2ad72:	47d8      	blx	fp
	for (i = 0; i < loop_max; i++) {
   2ad74:	9b02      	ldr	r3, [sp, #8]
   2ad76:	3301      	adds	r3, #1
   2ad78:	e091      	b.n	2ae9e <lwm2m_perform_read_op+0x36e>
	return out->writer->put_s64(out, path, value);
   2ad7a:	6963      	ldr	r3, [r4, #20]
   2ad7c:	4629      	mov	r1, r5
   2ad7e:	f8d3 b02c 	ldr.w	fp, [r3, #44]	; 0x2c
   2ad82:	4630      	mov	r0, r6
   2ad84:	e9d2 2300 	ldrd	r2, r3, [r2]
   2ad88:	47d8      	blx	fp
   2ad8a:	e7f3      	b.n	2ad74 <lwm2m_perform_read_op+0x244>
	return out->writer->put_s32(out, path, value);
   2ad8c:	6963      	ldr	r3, [r4, #20]
   2ad8e:	6812      	ldr	r2, [r2, #0]
   2ad90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
	return out->writer->put_float64fix(out, path, value);
   2ad92:	4629      	mov	r1, r5
   2ad94:	4630      	mov	r0, r6
   2ad96:	4798      	blx	r3
   2ad98:	e7ec      	b.n	2ad74 <lwm2m_perform_read_op+0x244>
	return out->writer->put_s16(out, path, value);
   2ad9a:	6963      	ldr	r3, [r4, #20]
   2ad9c:	f9b2 2000 	ldrsh.w	r2, [r2]
   2ada0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   2ada2:	4629      	mov	r1, r5
   2ada4:	4630      	mov	r0, r6
   2ada6:	4798      	blx	r3
   2ada8:	e7e4      	b.n	2ad74 <lwm2m_perform_read_op+0x244>
	return out->writer->put_s8(out, path, value);
   2adaa:	6963      	ldr	r3, [r4, #20]
   2adac:	f992 2000 	ldrsb.w	r2, [r2]
   2adb0:	6a1b      	ldr	r3, [r3, #32]
	return out->writer->put_bool(out, path, value);
   2adb2:	4629      	mov	r1, r5
   2adb4:	4630      	mov	r0, r6
   2adb6:	4798      	blx	r3
   2adb8:	e7dc      	b.n	2ad74 <lwm2m_perform_read_op+0x244>
   2adba:	6963      	ldr	r3, [r4, #20]
   2adbc:	7812      	ldrb	r2, [r2, #0]
   2adbe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   2adc0:	e7f7      	b.n	2adb2 <lwm2m_perform_read_op+0x282>
	return out->writer->put_float32fix(out, path, value);
   2adc2:	6963      	ldr	r3, [r4, #20]
   2adc4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   2adc6:	e7e4      	b.n	2ad92 <lwm2m_perform_read_op+0x262>
	return out->writer->put_float64fix(out, path, value);
   2adc8:	6963      	ldr	r3, [r4, #20]
   2adca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   2adcc:	e7e1      	b.n	2ad92 <lwm2m_perform_read_op+0x262>
   2adce:	bf00      	nop
   2add0:	20032b0c 	.word	0x20032b0c
   2add4:	00045f08 	.word	0x00045f08
   2add8:	00046018 	.word	0x00046018
   2addc:	0004b05d 	.word	0x0004b05d
   2ade0:	0004b51f 	.word	0x0004b51f
			LOG_ERR("unknown obj data_type %d",
   2ade4:	4b3a      	ldr	r3, [pc, #232]	; (2aed0 <lwm2m_perform_read_op+0x3a0>)
   2ade6:	681b      	ldr	r3, [r3, #0]
   2ade8:	075a      	lsls	r2, r3, #29
   2adea:	d00c      	beq.n	2ae06 <lwm2m_perform_read_op+0x2d6>
   2adec:	f029 033f 	bic.w	r3, r9, #63	; 0x3f
   2adf0:	f043 0301 	orr.w	r3, r3, #1
   2adf4:	f363 0907 	bfi	r9, r3, #0, #8
   2adf8:	9b05      	ldr	r3, [sp, #20]
   2adfa:	4836      	ldr	r0, [pc, #216]	; (2aed4 <lwm2m_perform_read_op+0x3a4>)
   2adfc:	f363 198f 	bfi	r9, r3, #6, #10
   2ae00:	464a      	mov	r2, r9
   2ae02:	f015 fe2b 	bl	40a5c <log_1>
			return -EINVAL;
   2ae06:	f06f 0b15 	mvn.w	fp, #21
					if (msg->path.level > 2 &&
   2ae0a:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
   2ae0e:	2b02      	cmp	r3, #2
   2ae10:	d916      	bls.n	2ae40 <lwm2m_perform_read_op+0x310>
   2ae12:	9b01      	ldr	r3, [sp, #4]
   2ae14:	f993 3002 	ldrsb.w	r3, [r3, #2]
   2ae18:	2b00      	cmp	r3, #0
   2ae1a:	db11      	blt.n	2ae40 <lwm2m_perform_read_op+0x310>
						LOG_ERR("READ OP: %d", ret);
   2ae1c:	4b2c      	ldr	r3, [pc, #176]	; (2aed0 <lwm2m_perform_read_op+0x3a0>)
   2ae1e:	681b      	ldr	r3, [r3, #0]
   2ae20:	075b      	lsls	r3, r3, #29
   2ae22:	d00d      	beq.n	2ae40 <lwm2m_perform_read_op+0x310>
   2ae24:	f02a 033f 	bic.w	r3, sl, #63	; 0x3f
   2ae28:	f043 0301 	orr.w	r3, r3, #1
   2ae2c:	f363 0a07 	bfi	sl, r3, #0, #8
   2ae30:	9b05      	ldr	r3, [sp, #20]
   2ae32:	4659      	mov	r1, fp
   2ae34:	f363 1a8f 	bfi	sl, r3, #6, #10
   2ae38:	4652      	mov	r2, sl
   2ae3a:	4827      	ldr	r0, [pc, #156]	; (2aed8 <lwm2m_perform_read_op+0x3a8>)
   2ae3c:	f015 fe0e 	bl	40a5c <log_1>
	if (out->writer->put_end_r) {
   2ae40:	6963      	ldr	r3, [r4, #20]
   2ae42:	695b      	ldr	r3, [r3, #20]
   2ae44:	b113      	cbz	r3, 2ae4c <lwm2m_perform_read_op+0x31c>
		return out->writer->put_end_r(out, path);
   2ae46:	4629      	mov	r1, r5
   2ae48:	4630      	mov	r0, r6
   2ae4a:	4798      	blx	r3
			if (ret < 0 && msg->path.level > 2) {
   2ae4c:	f1bb 0f00 	cmp.w	fp, #0
   2ae50:	d006      	beq.n	2ae60 <lwm2m_perform_read_op+0x330>
   2ae52:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
   2ae56:	2b02      	cmp	r3, #2
   2ae58:	f63f aeea 	bhi.w	2ac30 <lwm2m_perform_read_op+0x100>
			ret = 0;
   2ae5c:	f04f 0b00 	mov.w	fp, #0
		for (index = 0; index < obj_inst->resource_count; index++) {
   2ae60:	9b00      	ldr	r3, [sp, #0]
   2ae62:	3301      	adds	r3, #1
   2ae64:	e6dd      	b.n	2ac22 <lwm2m_perform_read_op+0xf2>
				ret = -ENOENT;
   2ae66:	f06f 0b01 	mvn.w	fp, #1
   2ae6a:	e7f2      	b.n	2ae52 <lwm2m_perform_read_op+0x322>
				ret = -EPERM;
   2ae6c:	f04f 3bff 	mov.w	fp, #4294967295
   2ae70:	e7ef      	b.n	2ae52 <lwm2m_perform_read_op+0x322>
			obj_inst = next_engine_obj_inst(msg->path.obj_id,
   2ae72:	89b9      	ldrh	r1, [r7, #12]
   2ae74:	8c20      	ldrh	r0, [r4, #32]
   2ae76:	f7fc ffa9 	bl	27dcc <next_engine_obj_inst>
	while (obj_inst) {
   2ae7a:	4607      	mov	r7, r0
   2ae7c:	2800      	cmp	r0, #0
   2ae7e:	f47f aebf 	bne.w	2ac00 <lwm2m_perform_read_op+0xd0>
   2ae82:	e6e6      	b.n	2ac52 <lwm2m_perform_read_op+0x122>
		return out->writer->put_end(out, path);
   2ae84:	4629      	mov	r1, r5
   2ae86:	4630      	mov	r0, r6
   2ae88:	4798      	blx	r3
   2ae8a:	e6e7      	b.n	2ac5c <lwm2m_perform_read_op+0x12c>
	if (out->writer->put_begin_ri) {
   2ae8c:	6963      	ldr	r3, [r4, #20]
   2ae8e:	699b      	ldr	r3, [r3, #24]
   2ae90:	b113      	cbz	r3, 2ae98 <lwm2m_perform_read_op+0x368>
		return out->writer->put_begin_ri(out, path);
   2ae92:	4629      	mov	r1, r5
   2ae94:	4630      	mov	r0, r6
   2ae96:	4798      	blx	r3
		res_inst_id_tmp = msg->path.res_inst_id;
   2ae98:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
	u16_t res_inst_id_tmp = 0U;
   2ae9a:	9306      	str	r3, [sp, #24]
	for (i = 0; i < loop_max; i++) {
   2ae9c:	2300      	movs	r3, #0
   2ae9e:	9302      	str	r3, [sp, #8]
   2aea0:	9a04      	ldr	r2, [sp, #16]
   2aea2:	9902      	ldr	r1, [sp, #8]
   2aea4:	f898 3016 	ldrb.w	r3, [r8, #22]
   2aea8:	428a      	cmp	r2, r1
   2aeaa:	f73f af25 	bgt.w	2acf8 <lwm2m_perform_read_op+0x1c8>
	if (res->res_inst_count > 1) {
   2aeae:	2b01      	cmp	r3, #1
   2aeb0:	d907      	bls.n	2aec2 <lwm2m_perform_read_op+0x392>
	if (out->writer->put_end_ri) {
   2aeb2:	6963      	ldr	r3, [r4, #20]
   2aeb4:	69db      	ldr	r3, [r3, #28]
   2aeb6:	b113      	cbz	r3, 2aebe <lwm2m_perform_read_op+0x38e>
		return out->writer->put_end_ri(out, path);
   2aeb8:	4629      	mov	r1, r5
   2aeba:	4630      	mov	r0, r6
   2aebc:	4798      	blx	r3
		msg->path.res_inst_id = res_inst_id_tmp;
   2aebe:	9b06      	ldr	r3, [sp, #24]
   2aec0:	84e3      	strh	r3, [r4, #38]	; 0x26
					num_read += 1U;
   2aec2:	9b03      	ldr	r3, [sp, #12]
   2aec4:	f04f 0b00 	mov.w	fp, #0
   2aec8:	3301      	adds	r3, #1
   2aeca:	b2db      	uxtb	r3, r3
   2aecc:	9303      	str	r3, [sp, #12]
   2aece:	e7b7      	b.n	2ae40 <lwm2m_perform_read_op+0x310>
   2aed0:	20032b0c 	.word	0x20032b0c
   2aed4:	0004b3ce 	.word	0x0004b3ce
   2aed8:	0004b542 	.word	0x0004b542

0002aedc <engine_next_service_timeout_ms>:
{
   2aedc:	e92d 4bf0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, fp, lr}
   2aee0:	4604      	mov	r4, r0
	u64_t time_left_ms, timestamp = k_uptime_get();
   2aee2:	f018 f80a 	bl	42efa <k_uptime_get>
	SYS_SLIST_FOR_EACH_CONTAINER(&engine_service_list, srv, node) {
   2aee6:	4b0f      	ldr	r3, [pc, #60]	; (2af24 <engine_next_service_timeout_ms+0x48>)
   2aee8:	681d      	ldr	r5, [r3, #0]
   2aeea:	b1b5      	cbz	r5, 2af1a <engine_next_service_timeout_ms+0x3e>
		time_left_ms = srv->last_timestamp +
   2aeec:	e9d5 8904 	ldrd	r8, r9, [r5, #16]
   2aef0:	68ab      	ldr	r3, [r5, #8]
   2aef2:	eb18 0b03 	adds.w	fp, r8, r3
   2aef6:	f149 0c00 	adc.w	ip, r9, #0
		if (time_left_ms < timestamp) {
   2aefa:	458c      	cmp	ip, r1
   2aefc:	bf08      	it	eq
   2aefe:	4583      	cmpeq	fp, r0
   2af00:	d30e      	bcc.n	2af20 <engine_next_service_timeout_ms+0x44>
		if (time_left_ms < timeout) {
   2af02:	2300      	movs	r3, #0
		time_left_ms -= timestamp;
   2af04:	ebbb 0600 	subs.w	r6, fp, r0
   2af08:	eb6c 0701 	sbc.w	r7, ip, r1
			timeout = time_left_ms;
   2af0c:	429f      	cmp	r7, r3
   2af0e:	bf08      	it	eq
   2af10:	42a6      	cmpeq	r6, r4
   2af12:	bf38      	it	cc
   2af14:	4634      	movcc	r4, r6
   2af16:	682d      	ldr	r5, [r5, #0]
	return node->next;
   2af18:	e7e7      	b.n	2aeea <engine_next_service_timeout_ms+0xe>
	return timeout;
   2af1a:	4620      	mov	r0, r4
}
   2af1c:	e8bd 8bf0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, fp, pc}
			return 0;
   2af20:	2000      	movs	r0, #0
   2af22:	e7fb      	b.n	2af1c <engine_next_service_timeout_ms+0x40>
   2af24:	20022494 	.word	0x20022494

0002af28 <lwm2m_engine_service>:
{
   2af28:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	timestamp = k_uptime_get();
   2af2c:	f017 ffe5 	bl	42efa <k_uptime_get>
	SYS_SLIST_FOR_EACH_CONTAINER(&engine_observer_list, obs, node) {
   2af30:	4b27      	ldr	r3, [pc, #156]	; (2afd0 <lwm2m_engine_service+0xa8>)
	timestamp = k_uptime_get();
   2af32:	4606      	mov	r6, r0
	SYS_SLIST_FOR_EACH_CONTAINER(&engine_observer_list, obs, node) {
   2af34:	681c      	ldr	r4, [r3, #0]
	timestamp = k_uptime_get();
   2af36:	460f      	mov	r7, r1
	SYS_SLIST_FOR_EACH_CONTAINER(&engine_observer_list, obs, node) {
   2af38:	b344      	cbz	r4, 2af8c <lwm2m_engine_service+0x64>
				K_SECONDS(obs->max_period_sec)) {
   2af3a:	f44f 757a 	mov.w	r5, #1000	; 0x3e8
		if (obs->event_timestamp > obs->last_timestamp &&
   2af3e:	e9d4 890a 	ldrd	r8, r9, [r4, #40]	; 0x28
   2af42:	e9d4 2308 	ldrd	r2, r3, [r4, #32]
   2af46:	4590      	cmp	r8, r2
   2af48:	eb79 0303 	sbcs.w	r3, r9, r3
   2af4c:	da11      	bge.n	2af72 <lwm2m_engine_service+0x4a>
				K_SECONDS(obs->min_period_sec)) {
   2af4e:	6b23      	ldr	r3, [r4, #48]	; 0x30
   2af50:	fb05 fc03 	mul.w	ip, r5, r3
		    timestamp > obs->last_timestamp +
   2af54:	eb18 020c 	adds.w	r2, r8, ip
   2af58:	f149 0300 	adc.w	r3, r9, #0
		if (obs->event_timestamp > obs->last_timestamp &&
   2af5c:	42b2      	cmp	r2, r6
   2af5e:	41bb      	sbcs	r3, r7
   2af60:	da07      	bge.n	2af72 <lwm2m_engine_service+0x4a>
			obs->last_timestamp = k_uptime_get();
   2af62:	f017 ffca 	bl	42efa <k_uptime_get>
   2af66:	e9c4 010a 	strd	r0, r1, [r4, #40]	; 0x28
			generate_notify_message(obs, false);
   2af6a:	4620      	mov	r0, r4
   2af6c:	f7ff f936 	bl	2a1dc <generate_notify_message.isra.14>
   2af70:	e009      	b.n	2af86 <lwm2m_engine_service+0x5e>
				K_SECONDS(obs->max_period_sec)) {
   2af72:	6b63      	ldr	r3, [r4, #52]	; 0x34
   2af74:	436b      	muls	r3, r5
		} else if (timestamp > obs->last_timestamp +
   2af76:	eb18 0003 	adds.w	r0, r8, r3
   2af7a:	f149 0100 	adc.w	r1, r9, #0
   2af7e:	42b0      	cmp	r0, r6
   2af80:	eb71 0307 	sbcs.w	r3, r1, r7
   2af84:	dbed      	blt.n	2af62 <lwm2m_engine_service+0x3a>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   2af86:	6824      	ldr	r4, [r4, #0]
	SYS_SLIST_FOR_EACH_CONTAINER(&engine_observer_list, obs, node) {
   2af88:	2c00      	cmp	r4, #0
   2af8a:	d1d8      	bne.n	2af3e <lwm2m_engine_service+0x16>
	timestamp = k_uptime_get();
   2af8c:	f017 ffb5 	bl	42efa <k_uptime_get>
   2af90:	4606      	mov	r6, r0
   2af92:	460f      	mov	r7, r1
	SYS_SLIST_FOR_EACH_CONTAINER(&engine_service_list, srv, node) {
   2af94:	4b0f      	ldr	r3, [pc, #60]	; (2afd4 <lwm2m_engine_service+0xac>)
   2af96:	681c      	ldr	r4, [r3, #0]
   2af98:	b92c      	cbnz	r4, 2afa6 <lwm2m_engine_service+0x7e>
	return engine_next_service_timeout_ms(ENGINE_UPDATE_INTERVAL);
   2af9a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
}
   2af9e:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	return engine_next_service_timeout_ms(ENGINE_UPDATE_INTERVAL);
   2afa2:	f7ff bf9b 	b.w	2aedc <engine_next_service_timeout_ms>
					K_MSEC(srv->min_call_period);
   2afa6:	68a1      	ldr	r1, [r4, #8]
		service_due_timestamp = srv->last_timestamp +
   2afa8:	e9d4 2304 	ldrd	r2, r3, [r4, #16]
   2afac:	eb12 0801 	adds.w	r8, r2, r1
   2afb0:	f143 0900 	adc.w	r9, r3, #0
		if (timestamp >= service_due_timestamp) {
   2afb4:	4546      	cmp	r6, r8
   2afb6:	eb77 0309 	sbcs.w	r3, r7, r9
   2afba:	db06      	blt.n	2afca <lwm2m_engine_service+0xa2>
			srv->last_timestamp = k_uptime_get();
   2afbc:	f017 ff9d 	bl	42efa <k_uptime_get>
			srv->service_work(NULL);
   2afc0:	6863      	ldr	r3, [r4, #4]
			srv->last_timestamp = k_uptime_get();
   2afc2:	e9c4 0104 	strd	r0, r1, [r4, #16]
			srv->service_work(NULL);
   2afc6:	2000      	movs	r0, #0
   2afc8:	4798      	blx	r3
   2afca:	6824      	ldr	r4, [r4, #0]
   2afcc:	e7e4      	b.n	2af98 <lwm2m_engine_service+0x70>
   2afce:	bf00      	nop
   2afd0:	2002248c 	.word	0x2002248c
   2afd4:	20022494 	.word	0x20022494

0002afd8 <socket_receive_loop>:
	from_addr_len = sizeof(from_addr);
   2afd8:	2308      	movs	r3, #8
{
   2afda:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2afde:	b095      	sub	sp, #84	; 0x54
	from_addr_len = sizeof(from_addr);
   2afe0:	930d      	str	r3, [sp, #52]	; 0x34
		LOG_ERR("No handler for response");
   2afe2:	4aa3      	ldr	r2, [pc, #652]	; (2b270 <socket_receive_loop+0x298>)
   2afe4:	4ba3      	ldr	r3, [pc, #652]	; (2b274 <socket_receive_loop+0x29c>)
	__ASSERT_NO_MSG(socket_ops);
   2afe6:	4ca4      	ldr	r4, [pc, #656]	; (2b278 <socket_receive_loop+0x2a0>)
   2afe8:	1a9b      	subs	r3, r3, r2
   2afea:	f3c3 03c9 	ubfx	r3, r3, #3, #10
   2afee:	9303      	str	r3, [sp, #12]
		if (sock_nfds < 1) {
   2aff0:	4ba2      	ldr	r3, [pc, #648]	; (2b27c <socket_receive_loop+0x2a4>)
   2aff2:	681d      	ldr	r5, [r3, #0]
   2aff4:	2d00      	cmp	r5, #0
   2aff6:	dc04      	bgt.n	2b002 <socket_receive_loop+0x2a>
			k_sleep(lwm2m_engine_service());
   2aff8:	f7ff ff96 	bl	2af28 <lwm2m_engine_service>
	return z_impl_k_sleep(ms);
   2affc:	f012 fa00 	bl	3d400 <z_impl_k_sleep>
   2b000:	e7f6      	b.n	2aff0 <socket_receive_loop+0x18>
		if (poll(sock_fds, sock_nfds, lwm2m_engine_service()) < 0) {
   2b002:	f7ff ff91 	bl	2af28 <lwm2m_engine_service>
   2b006:	6823      	ldr	r3, [r4, #0]
   2b008:	9004      	str	r0, [sp, #16]
   2b00a:	b94b      	cbnz	r3, 2b020 <socket_receive_loop+0x48>
   2b00c:	499c      	ldr	r1, [pc, #624]	; (2b280 <socket_receive_loop+0x2a8>)
   2b00e:	489d      	ldr	r0, [pc, #628]	; (2b284 <socket_receive_loop+0x2ac>)
   2b010:	234d      	movs	r3, #77	; 0x4d
   2b012:	4a9d      	ldr	r2, [pc, #628]	; (2b288 <socket_receive_loop+0x2b0>)
   2b014:	f015 faf5 	bl	40602 <printk>
   2b018:	214d      	movs	r1, #77	; 0x4d
   2b01a:	489b      	ldr	r0, [pc, #620]	; (2b288 <socket_receive_loop+0x2b0>)
   2b01c:	f015 fbb4 	bl	40788 <assert_post_action>
	__ASSERT_NO_MSG(socket_ops->poll);
   2b020:	6823      	ldr	r3, [r4, #0]
   2b022:	699b      	ldr	r3, [r3, #24]
   2b024:	b94b      	cbnz	r3, 2b03a <socket_receive_loop+0x62>
   2b026:	4999      	ldr	r1, [pc, #612]	; (2b28c <socket_receive_loop+0x2b4>)
   2b028:	4896      	ldr	r0, [pc, #600]	; (2b284 <socket_receive_loop+0x2ac>)
   2b02a:	234e      	movs	r3, #78	; 0x4e
   2b02c:	4a96      	ldr	r2, [pc, #600]	; (2b288 <socket_receive_loop+0x2b0>)
   2b02e:	f015 fae8 	bl	40602 <printk>
   2b032:	214e      	movs	r1, #78	; 0x4e
   2b034:	4894      	ldr	r0, [pc, #592]	; (2b288 <socket_receive_loop+0x2b0>)
   2b036:	f015 fba7 	bl	40788 <assert_post_action>
	return socket_ops->poll(fds, nfds, timeout);
   2b03a:	6823      	ldr	r3, [r4, #0]
   2b03c:	9a04      	ldr	r2, [sp, #16]
   2b03e:	699b      	ldr	r3, [r3, #24]
   2b040:	4629      	mov	r1, r5
   2b042:	4893      	ldr	r0, [pc, #588]	; (2b290 <socket_receive_loop+0x2b8>)
   2b044:	4798      	blx	r3
   2b046:	2800      	cmp	r0, #0
   2b048:	db2e      	blt.n	2b0a8 <socket_receive_loop+0xd0>
   2b04a:	4b91      	ldr	r3, [pc, #580]	; (2b290 <socket_receive_loop+0x2b8>)
   2b04c:	9304      	str	r3, [sp, #16]
   2b04e:	4b91      	ldr	r3, [pc, #580]	; (2b294 <socket_receive_loop+0x2bc>)
   2b050:	9307      	str	r3, [sp, #28]
		for (i = 0; i < sock_nfds; i++) {
   2b052:	2300      	movs	r3, #0
   2b054:	9309      	str	r3, [sp, #36]	; 0x24
   2b056:	4b89      	ldr	r3, [pc, #548]	; (2b27c <socket_receive_loop+0x2a4>)
   2b058:	9a09      	ldr	r2, [sp, #36]	; 0x24
   2b05a:	681b      	ldr	r3, [r3, #0]
   2b05c:	429a      	cmp	r2, r3
   2b05e:	dac7      	bge.n	2aff0 <socket_receive_loop+0x18>
			if (sock_fds[i].revents & POLLERR) {
   2b060:	9b04      	ldr	r3, [sp, #16]
   2b062:	88db      	ldrh	r3, [r3, #6]
   2b064:	f013 0208 	ands.w	r2, r3, #8
   2b068:	d041      	beq.n	2b0ee <socket_receive_loop+0x116>
				LOG_ERR("Error in poll.. waiting a moment.");
   2b06a:	4b8b      	ldr	r3, [pc, #556]	; (2b298 <socket_receive_loop+0x2c0>)
   2b06c:	681b      	ldr	r3, [r3, #0]
   2b06e:	0758      	lsls	r0, r3, #29
   2b070:	d00c      	beq.n	2b08c <socket_receive_loop+0xb4>
   2b072:	f027 033f 	bic.w	r3, r7, #63	; 0x3f
   2b076:	f043 0301 	orr.w	r3, r3, #1
   2b07a:	f363 0707 	bfi	r7, r3, #0, #8
   2b07e:	9b03      	ldr	r3, [sp, #12]
   2b080:	4886      	ldr	r0, [pc, #536]	; (2b29c <socket_receive_loop+0x2c4>)
   2b082:	f363 178f 	bfi	r7, r3, #6, #10
   2b086:	4639      	mov	r1, r7
   2b088:	f015 fcdb 	bl	40a42 <log_0>
   2b08c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
   2b090:	f012 f9b6 	bl	3d400 <z_impl_k_sleep>
		for (i = 0; i < sock_nfds; i++) {
   2b094:	9b09      	ldr	r3, [sp, #36]	; 0x24
   2b096:	3301      	adds	r3, #1
   2b098:	9309      	str	r3, [sp, #36]	; 0x24
   2b09a:	9b04      	ldr	r3, [sp, #16]
   2b09c:	3308      	adds	r3, #8
   2b09e:	9304      	str	r3, [sp, #16]
   2b0a0:	9b07      	ldr	r3, [sp, #28]
   2b0a2:	3304      	adds	r3, #4
   2b0a4:	9307      	str	r3, [sp, #28]
   2b0a6:	e7d6      	b.n	2b056 <socket_receive_loop+0x7e>
			LOG_ERR("Error in poll:%d", errno);
   2b0a8:	4b7b      	ldr	r3, [pc, #492]	; (2b298 <socket_receive_loop+0x2c0>)
   2b0aa:	681b      	ldr	r3, [r3, #0]
   2b0ac:	075d      	lsls	r5, r3, #29
   2b0ae:	d017      	beq.n	2b0e0 <socket_receive_loop+0x108>
   2b0b0:	f8bd 3018 	ldrh.w	r3, [sp, #24]
   2b0b4:	f8bd 2018 	ldrh.w	r2, [sp, #24]
   2b0b8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
   2b0bc:	f043 0301 	orr.w	r3, r3, #1
   2b0c0:	f363 0207 	bfi	r2, r3, #0, #8
   2b0c4:	b293      	uxth	r3, r2
   2b0c6:	9a03      	ldr	r2, [sp, #12]
   2b0c8:	f362 138f 	bfi	r3, r2, #6, #10
   2b0cc:	f8ad 3018 	strh.w	r3, [sp, #24]
   2b0d0:	f017 fdbf 	bl	42c52 <__errno>
   2b0d4:	f8bd 2018 	ldrh.w	r2, [sp, #24]
   2b0d8:	6801      	ldr	r1, [r0, #0]
   2b0da:	4871      	ldr	r0, [pc, #452]	; (2b2a0 <socket_receive_loop+0x2c8>)
   2b0dc:	f015 fcbe 	bl	40a5c <log_1>
			errno = 0;
   2b0e0:	f017 fdb7 	bl	42c52 <__errno>
   2b0e4:	2300      	movs	r3, #0
   2b0e6:	6003      	str	r3, [r0, #0]
   2b0e8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
   2b0ec:	e786      	b.n	2affc <socket_receive_loop+0x24>
			if (!(sock_fds[i].revents & POLLIN) ||
   2b0ee:	07d9      	lsls	r1, r3, #31
   2b0f0:	d502      	bpl.n	2b0f8 <socket_receive_loop+0x120>
			    sock_ctx[i] == NULL) {
   2b0f2:	9b07      	ldr	r3, [sp, #28]
   2b0f4:	681b      	ldr	r3, [r3, #0]
			if (!(sock_fds[i].revents & POLLIN) ||
   2b0f6:	b91b      	cbnz	r3, 2b100 <socket_receive_loop+0x128>
				sock_fds[i].revents = 0;
   2b0f8:	2300      	movs	r3, #0
   2b0fa:	9a04      	ldr	r2, [sp, #16]
   2b0fc:	80d3      	strh	r3, [r2, #6]
				continue;
   2b0fe:	e7c9      	b.n	2b094 <socket_receive_loop+0xbc>
			len = recvfrom(sock_ctx[i]->sock_fd, in_buf,
   2b100:	f8d3 312c 	ldr.w	r3, [r3, #300]	; 0x12c
			sock_fds[i].revents = 0;
   2b104:	9904      	ldr	r1, [sp, #16]
			len = recvfrom(sock_ctx[i]->sock_fd, in_buf,
   2b106:	9308      	str	r3, [sp, #32]
	__ASSERT_NO_MSG(socket_ops);
   2b108:	6823      	ldr	r3, [r4, #0]
			sock_fds[i].revents = 0;
   2b10a:	80ca      	strh	r2, [r1, #6]
   2b10c:	b94b      	cbnz	r3, 2b122 <socket_receive_loop+0x14a>
   2b10e:	495c      	ldr	r1, [pc, #368]	; (2b280 <socket_receive_loop+0x2a8>)
   2b110:	485c      	ldr	r0, [pc, #368]	; (2b284 <socket_receive_loop+0x2ac>)
   2b112:	2375      	movs	r3, #117	; 0x75
   2b114:	4a5c      	ldr	r2, [pc, #368]	; (2b288 <socket_receive_loop+0x2b0>)
   2b116:	f015 fa74 	bl	40602 <printk>
   2b11a:	2175      	movs	r1, #117	; 0x75
   2b11c:	485a      	ldr	r0, [pc, #360]	; (2b288 <socket_receive_loop+0x2b0>)
   2b11e:	f015 fb33 	bl	40788 <assert_post_action>
	__ASSERT_NO_MSG(socket_ops->recvfrom);
   2b122:	6823      	ldr	r3, [r4, #0]
   2b124:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   2b126:	b94b      	cbnz	r3, 2b13c <socket_receive_loop+0x164>
   2b128:	495e      	ldr	r1, [pc, #376]	; (2b2a4 <socket_receive_loop+0x2cc>)
   2b12a:	4856      	ldr	r0, [pc, #344]	; (2b284 <socket_receive_loop+0x2ac>)
   2b12c:	2376      	movs	r3, #118	; 0x76
   2b12e:	4a56      	ldr	r2, [pc, #344]	; (2b288 <socket_receive_loop+0x2b0>)
   2b130:	f015 fa67 	bl	40602 <printk>
   2b134:	2176      	movs	r1, #118	; 0x76
   2b136:	4854      	ldr	r0, [pc, #336]	; (2b288 <socket_receive_loop+0x2b0>)
   2b138:	f015 fb26 	bl	40788 <assert_post_action>
	return socket_ops->recvfrom(sock, buf, len, flags, from, fromlen);
   2b13c:	aa0d      	add	r2, sp, #52	; 0x34
   2b13e:	9201      	str	r2, [sp, #4]
   2b140:	4a59      	ldr	r2, [pc, #356]	; (2b2a8 <socket_receive_loop+0x2d0>)
   2b142:	6823      	ldr	r3, [r4, #0]
   2b144:	9200      	str	r2, [sp, #0]
   2b146:	6a9d      	ldr	r5, [r3, #40]	; 0x28
   2b148:	f240 42ff 	movw	r2, #1279	; 0x4ff
   2b14c:	2300      	movs	r3, #0
   2b14e:	4957      	ldr	r1, [pc, #348]	; (2b2ac <socket_receive_loop+0x2d4>)
   2b150:	9808      	ldr	r0, [sp, #32]
   2b152:	47a8      	blx	r5
			if (len < 0) {
   2b154:	1e02      	subs	r2, r0, #0
   2b156:	da14      	bge.n	2b182 <socket_receive_loop+0x1aa>
				LOG_ERR("Error reading response: %d", errno);
   2b158:	4b4f      	ldr	r3, [pc, #316]	; (2b298 <socket_receive_loop+0x2c0>)
   2b15a:	681b      	ldr	r3, [r3, #0]
   2b15c:	075b      	lsls	r3, r3, #29
   2b15e:	d099      	beq.n	2b094 <socket_receive_loop+0xbc>
   2b160:	f028 033f 	bic.w	r3, r8, #63	; 0x3f
   2b164:	f043 0301 	orr.w	r3, r3, #1
   2b168:	f363 0807 	bfi	r8, r3, #0, #8
   2b16c:	9b03      	ldr	r3, [sp, #12]
   2b16e:	f363 188f 	bfi	r8, r3, #6, #10
   2b172:	f017 fd6e 	bl	42c52 <__errno>
   2b176:	4642      	mov	r2, r8
   2b178:	6801      	ldr	r1, [r0, #0]
   2b17a:	484d      	ldr	r0, [pc, #308]	; (2b2b0 <socket_receive_loop+0x2d8>)
		LOG_ERR("Invalid data received (err:%d)", r);
   2b17c:	f015 fc6e 	bl	40a5c <log_1>
   2b180:	e788      	b.n	2b094 <socket_receive_loop+0xbc>
			if (len == 0) {
   2b182:	d111      	bne.n	2b1a8 <socket_receive_loop+0x1d0>
				LOG_ERR("Zero length recv");
   2b184:	4b44      	ldr	r3, [pc, #272]	; (2b298 <socket_receive_loop+0x2c0>)
   2b186:	681b      	ldr	r3, [r3, #0]
   2b188:	075d      	lsls	r5, r3, #29
   2b18a:	d083      	beq.n	2b094 <socket_receive_loop+0xbc>
   2b18c:	f029 033f 	bic.w	r3, r9, #63	; 0x3f
   2b190:	f043 0301 	orr.w	r3, r3, #1
   2b194:	f363 0907 	bfi	r9, r3, #0, #8
   2b198:	9b03      	ldr	r3, [sp, #12]
   2b19a:	4846      	ldr	r0, [pc, #280]	; (2b2b4 <socket_receive_loop+0x2dc>)
   2b19c:	f363 198f 	bfi	r9, r3, #6, #10
   2b1a0:	4649      	mov	r1, r9
		LOG_ERR("No handler for response");
   2b1a2:	f015 fc4e 	bl	40a42 <log_0>
   2b1a6:	e775      	b.n	2b094 <socket_receive_loop+0xbc>
			in_buf[len] = 0U;
   2b1a8:	2500      	movs	r5, #0
   2b1aa:	4b40      	ldr	r3, [pc, #256]	; (2b2ac <socket_receive_loop+0x2d4>)
	r = coap_packet_parse(&response, buf, buf_len, NULL, 0);
   2b1ac:	493f      	ldr	r1, [pc, #252]	; (2b2ac <socket_receive_loop+0x2d4>)
			in_buf[len] = 0U;
   2b1ae:	549d      	strb	r5, [r3, r2]
			lwm2m_udp_receive(sock_ctx[i], in_buf, len, &from_addr,
   2b1b0:	9b07      	ldr	r3, [sp, #28]
	r = coap_packet_parse(&response, buf, buf_len, NULL, 0);
   2b1b2:	b292      	uxth	r2, r2
			lwm2m_udp_receive(sock_ctx[i], in_buf, len, &from_addr,
   2b1b4:	681b      	ldr	r3, [r3, #0]
	r = coap_packet_parse(&response, buf, buf_len, NULL, 0);
   2b1b6:	a810      	add	r0, sp, #64	; 0x40
			lwm2m_udp_receive(sock_ctx[i], in_buf, len, &from_addr,
   2b1b8:	9308      	str	r3, [sp, #32]
	r = coap_packet_parse(&response, buf, buf_len, NULL, 0);
   2b1ba:	9500      	str	r5, [sp, #0]
   2b1bc:	462b      	mov	r3, r5
   2b1be:	f017 f8c8 	bl	42352 <coap_packet_parse>
	if (r < 0) {
   2b1c2:	1e01      	subs	r1, r0, #0
   2b1c4:	da10      	bge.n	2b1e8 <socket_receive_loop+0x210>
		LOG_ERR("Invalid data received (err:%d)", r);
   2b1c6:	4b34      	ldr	r3, [pc, #208]	; (2b298 <socket_receive_loop+0x2c0>)
   2b1c8:	681b      	ldr	r3, [r3, #0]
   2b1ca:	0758      	lsls	r0, r3, #29
   2b1cc:	f43f af62 	beq.w	2b094 <socket_receive_loop+0xbc>
   2b1d0:	f02b 033f 	bic.w	r3, fp, #63	; 0x3f
   2b1d4:	f043 0301 	orr.w	r3, r3, #1
   2b1d8:	f363 0b07 	bfi	fp, r3, #0, #8
   2b1dc:	9b03      	ldr	r3, [sp, #12]
   2b1de:	4836      	ldr	r0, [pc, #216]	; (2b2b8 <socket_receive_loop+0x2e0>)
   2b1e0:	f363 1b8f 	bfi	fp, r3, #6, #10
   2b1e4:	465a      	mov	r2, fp
   2b1e6:	e7c9      	b.n	2b17c <socket_receive_loop+0x1a4>
	tkl = coap_header_get_token(&response, token);
   2b1e8:	a90e      	add	r1, sp, #56	; 0x38
   2b1ea:	a810      	add	r0, sp, #64	; 0x40
   2b1ec:	f017 f970 	bl	424d0 <coap_header_get_token>
	pending = coap_pending_received(&response, client_ctx->pendings,
   2b1f0:	9b08      	ldr	r3, [sp, #32]
	tkl = coap_header_get_token(&response, token);
   2b1f2:	900b      	str	r0, [sp, #44]	; 0x2c
	pending = coap_pending_received(&response, client_ctx->pendings,
   2b1f4:	2205      	movs	r2, #5
   2b1f6:	f103 0108 	add.w	r1, r3, #8
   2b1fa:	a810      	add	r0, sp, #64	; 0x40
   2b1fc:	f017 faa5 	bl	4274a <coap_pending_received>
	if (pending) {
   2b200:	900a      	str	r0, [sp, #40]	; 0x28
   2b202:	b320      	cbz	r0, 2b24e <socket_receive_loop+0x276>
		msg = find_msg(pending, NULL);
   2b204:	4629      	mov	r1, r5
   2b206:	f7fc fe17 	bl	27e38 <find_msg>
   2b20a:	4605      	mov	r5, r0
	reply = coap_response_received(&response, from_addr,
   2b20c:	9a08      	ldr	r2, [sp, #32]
   2b20e:	2305      	movs	r3, #5
   2b210:	3280      	adds	r2, #128	; 0x80
   2b212:	4925      	ldr	r1, [pc, #148]	; (2b2a8 <socket_receive_loop+0x2d0>)
   2b214:	a810      	add	r0, sp, #64	; 0x40
   2b216:	f017 fac0 	bl	4279a <coap_response_received>
	if (reply) {
   2b21a:	4603      	mov	r3, r0
   2b21c:	2800      	cmp	r0, #0
   2b21e:	f000 8094 	beq.w	2b34a <socket_receive_loop+0x372>
		if (client_ctx->handle_separate_response && !tkl &&
   2b222:	9a08      	ldr	r2, [sp, #32]
   2b224:	f892 2129 	ldrb.w	r2, [r2, #297]	; 0x129
   2b228:	b99a      	cbnz	r2, 2b252 <socket_receive_loop+0x27a>
		if (!msg) {
   2b22a:	b935      	cbnz	r5, 2b23a <socket_receive_loop+0x262>
			msg = find_msg(pending, reply);
   2b22c:	4619      	mov	r1, r3
   2b22e:	980a      	ldr	r0, [sp, #40]	; 0x28
   2b230:	9308      	str	r3, [sp, #32]
   2b232:	f7fc fe01 	bl	27e38 <find_msg>
   2b236:	4605      	mov	r5, r0
   2b238:	9b08      	ldr	r3, [sp, #32]
		if (reply && reply->user_data != COAP_REPLY_STATUS_NONE) {
   2b23a:	685a      	ldr	r2, [r3, #4]
   2b23c:	b9a2      	cbnz	r2, 2b268 <socket_receive_loop+0x290>
		if (msg) {
   2b23e:	2d00      	cmp	r5, #0
   2b240:	f43f af28 	beq.w	2b094 <socket_receive_loop+0xbc>
			lwm2m_reset_message(msg, true);
   2b244:	2101      	movs	r1, #1
   2b246:	4628      	mov	r0, r5
   2b248:	f017 fea6 	bl	42f98 <lwm2m_reset_message>
   2b24c:	e722      	b.n	2b094 <socket_receive_loop+0xbc>
	struct lwm2m_message *msg = NULL;
   2b24e:	9d0a      	ldr	r5, [sp, #40]	; 0x28
   2b250:	e7dc      	b.n	2b20c <socket_receive_loop+0x234>
		if (client_ctx->handle_separate_response && !tkl &&
   2b252:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   2b254:	2a00      	cmp	r2, #0
   2b256:	d1e8      	bne.n	2b22a <socket_receive_loop+0x252>
   2b258:	9008      	str	r0, [sp, #32]
			coap_header_get_type(&response) == COAP_TYPE_ACK) {
   2b25a:	a810      	add	r0, sp, #64	; 0x40
   2b25c:	f017 f931 	bl	424c2 <coap_header_get_type>
		if (client_ctx->handle_separate_response && !tkl &&
   2b260:	2802      	cmp	r0, #2
   2b262:	9b08      	ldr	r3, [sp, #32]
   2b264:	d1e1      	bne.n	2b22a <socket_receive_loop+0x252>
   2b266:	e715      	b.n	2b094 <socket_receive_loop+0xbc>
			reply->user_data = (void *)COAP_REPLY_STATUS_NONE;
   2b268:	2200      	movs	r2, #0
   2b26a:	605a      	str	r2, [r3, #4]
			return;
   2b26c:	e712      	b.n	2b094 <socket_receive_loop+0xbc>
   2b26e:	bf00      	nop
   2b270:	00045f08 	.word	0x00045f08
   2b274:	00046018 	.word	0x00046018
   2b278:	2002237c 	.word	0x2002237c
   2b27c:	200234c0 	.word	0x200234c0
   2b280:	0004b740 	.word	0x0004b740
   2b284:	0004764f 	.word	0x0004764f
   2b288:	0004b710 	.word	0x0004b710
   2b28c:	0004b75e 	.word	0x0004b75e
   2b290:	200234a8 	.word	0x200234a8
   2b294:	2002349c 	.word	0x2002349c
   2b298:	20032b0c 	.word	0x20032b0c
   2b29c:	0004b780 	.word	0x0004b780
   2b2a0:	0004b76f 	.word	0x0004b76f
   2b2a4:	0004b7a2 	.word	0x0004b7a2
   2b2a8:	20029838 	.word	0x20029838
   2b2ac:	20029a24 	.word	0x20029a24
   2b2b0:	0004b7b7 	.word	0x0004b7b7
   2b2b4:	0004b7d2 	.word	0x0004b7d2
   2b2b8:	0004b7e3 	.word	0x0004b7e3
		msg->type = COAP_TYPE_ACK;
   2b2bc:	2302      	movs	r3, #2
   2b2be:	f880 3182 	strb.w	r3, [r0, #386]	; 0x182
		msg->code = coap_header_get_code(&response);
   2b2c2:	a810      	add	r0, sp, #64	; 0x40
   2b2c4:	f017 f918 	bl	424f8 <coap_header_get_code>
   2b2c8:	f885 0183 	strb.w	r0, [r5, #387]	; 0x183
		msg->mid = coap_header_get_id(&response);
   2b2cc:	a810      	add	r0, sp, #64	; 0x40
   2b2ce:	f017 f940 	bl	42552 <coap_header_get_id>
		msg->tkl = LWM2M_MSG_TOKEN_LEN_SKIP;
   2b2d2:	23ff      	movs	r3, #255	; 0xff
		msg->mid = coap_header_get_id(&response);
   2b2d4:	f8a5 0180 	strh.w	r0, [r5, #384]	; 0x180
		msg->tkl = LWM2M_MSG_TOKEN_LEN_SKIP;
   2b2d8:	f885 3184 	strb.w	r3, [r5, #388]	; 0x184
		r = udp_request_handler(&response, msg);
   2b2dc:	4629      	mov	r1, r5
   2b2de:	a810      	add	r0, sp, #64	; 0x40
   2b2e0:	f7fd fe58 	bl	28f94 <handle_request>
		if (r < 0) {
   2b2e4:	2800      	cmp	r0, #0
   2b2e6:	f6ff aed5 	blt.w	2b094 <socket_receive_loop+0xbc>
		r = lwm2m_send_message(msg);
   2b2ea:	4628      	mov	r0, r5
   2b2ec:	f7fe ff1c 	bl	2a128 <lwm2m_send_message>
		if (r < 0) {
   2b2f0:	1e01      	subs	r1, r0, #0
   2b2f2:	f6bf aecf 	bge.w	2b094 <socket_receive_loop+0xbc>
			LOG_ERR("Err sending response: %d", r);
   2b2f6:	4b25      	ldr	r3, [pc, #148]	; (2b38c <socket_receive_loop+0x3b4>)
   2b2f8:	681b      	ldr	r3, [r3, #0]
   2b2fa:	075a      	lsls	r2, r3, #29
   2b2fc:	d0a2      	beq.n	2b244 <socket_receive_loop+0x26c>
   2b2fe:	f02a 033f 	bic.w	r3, sl, #63	; 0x3f
   2b302:	f043 0301 	orr.w	r3, r3, #1
   2b306:	f363 0a07 	bfi	sl, r3, #0, #8
   2b30a:	9b03      	ldr	r3, [sp, #12]
   2b30c:	4820      	ldr	r0, [pc, #128]	; (2b390 <socket_receive_loop+0x3b8>)
   2b30e:	f363 1a8f 	bfi	sl, r3, #6, #10
   2b312:	4652      	mov	r2, sl
   2b314:	f015 fba2 	bl	40a5c <log_1>
   2b318:	e794      	b.n	2b244 <socket_receive_loop+0x26c>
		LOG_ERR("No handler for response");
   2b31a:	4b1c      	ldr	r3, [pc, #112]	; (2b38c <socket_receive_loop+0x3b4>)
   2b31c:	681b      	ldr	r3, [r3, #0]
   2b31e:	075b      	lsls	r3, r3, #29
   2b320:	f43f aeb8 	beq.w	2b094 <socket_receive_loop+0xbc>
   2b324:	f8bd 3014 	ldrh.w	r3, [sp, #20]
   2b328:	f8bd 2014 	ldrh.w	r2, [sp, #20]
   2b32c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
   2b330:	f043 0301 	orr.w	r3, r3, #1
   2b334:	f363 0207 	bfi	r2, r3, #0, #8
   2b338:	b293      	uxth	r3, r2
   2b33a:	9a03      	ldr	r2, [sp, #12]
   2b33c:	4815      	ldr	r0, [pc, #84]	; (2b394 <socket_receive_loop+0x3bc>)
   2b33e:	f362 138f 	bfi	r3, r2, #6, #10
   2b342:	f8ad 3014 	strh.w	r3, [sp, #20]
   2b346:	b299      	uxth	r1, r3
   2b348:	e72b      	b.n	2b1a2 <socket_receive_loop+0x1ca>
	if (reply || pending) {
   2b34a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   2b34c:	2b00      	cmp	r3, #0
   2b34e:	f47f af76 	bne.w	2b23e <socket_receive_loop+0x266>
	    coap_header_get_type(&response) == COAP_TYPE_CON) {
   2b352:	a810      	add	r0, sp, #64	; 0x40
   2b354:	f017 f8b5 	bl	424c2 <coap_header_get_type>
	if (udp_request_handler &&
   2b358:	2800      	cmp	r0, #0
   2b35a:	d1de      	bne.n	2b31a <socket_receive_loop+0x342>
		msg = lwm2m_get_message(client_ctx);
   2b35c:	9808      	ldr	r0, [sp, #32]
   2b35e:	f7fd fcaf 	bl	28cc0 <lwm2m_get_message>
		if (!msg) {
   2b362:	4605      	mov	r5, r0
   2b364:	2800      	cmp	r0, #0
   2b366:	d1a9      	bne.n	2b2bc <socket_receive_loop+0x2e4>
			LOG_ERR("Unable to get a lwm2m message!");
   2b368:	4b08      	ldr	r3, [pc, #32]	; (2b38c <socket_receive_loop+0x3b4>)
   2b36a:	681b      	ldr	r3, [r3, #0]
   2b36c:	0759      	lsls	r1, r3, #29
   2b36e:	f43f ae91 	beq.w	2b094 <socket_receive_loop+0xbc>
   2b372:	f026 033f 	bic.w	r3, r6, #63	; 0x3f
   2b376:	f043 0301 	orr.w	r3, r3, #1
   2b37a:	f363 0607 	bfi	r6, r3, #0, #8
   2b37e:	9b03      	ldr	r3, [sp, #12]
   2b380:	4805      	ldr	r0, [pc, #20]	; (2b398 <socket_receive_loop+0x3c0>)
   2b382:	f363 168f 	bfi	r6, r3, #6, #10
   2b386:	4631      	mov	r1, r6
   2b388:	e70b      	b.n	2b1a2 <socket_receive_loop+0x1ca>
   2b38a:	bf00      	nop
   2b38c:	20032b0c 	.word	0x20032b0c
   2b390:	0004b802 	.word	0x0004b802
   2b394:	0004b81b 	.word	0x0004b81b
   2b398:	0004ae73 	.word	0x0004ae73

0002b39c <lwm2m_engine_add_service>:
{
   2b39c:	b538      	push	{r3, r4, r5, lr}
   2b39e:	4c0e      	ldr	r4, [pc, #56]	; (2b3d8 <lwm2m_engine_add_service+0x3c>)
	for (i = 0; i < MAX_PERIODIC_SERVICE; i++) {
   2b3a0:	2300      	movs	r3, #0
   2b3a2:	4625      	mov	r5, r4
		if (!service_node_data[i].service_work) {
   2b3a4:	6862      	ldr	r2, [r4, #4]
   2b3a6:	b13a      	cbz	r2, 2b3b8 <lwm2m_engine_add_service+0x1c>
	for (i = 0; i < MAX_PERIODIC_SERVICE; i++) {
   2b3a8:	3301      	adds	r3, #1
   2b3aa:	2b0a      	cmp	r3, #10
   2b3ac:	f104 0418 	add.w	r4, r4, #24
   2b3b0:	d1f8      	bne.n	2b3a4 <lwm2m_engine_add_service+0x8>
		return -ENOMEM;
   2b3b2:	f06f 000b 	mvn.w	r0, #11
}
   2b3b6:	bd38      	pop	{r3, r4, r5, pc}
	service_node_data[i].service_work = service;
   2b3b8:	2418      	movs	r4, #24
   2b3ba:	fb04 5303 	mla	r3, r4, r3, r5
	service_node_data[i].min_call_period = period_ms;
   2b3be:	e9c3 0101 	strd	r0, r1, [r3, #4]
	service_node_data[i].last_timestamp = 0U;
   2b3c2:	2000      	movs	r0, #0
   2b3c4:	2100      	movs	r1, #0
   2b3c6:	e9c3 0104 	strd	r0, r1, [r3, #16]
	sys_slist_append(&engine_service_list,
   2b3ca:	4804      	ldr	r0, [pc, #16]	; (2b3dc <lwm2m_engine_add_service+0x40>)
   2b3cc:	4619      	mov	r1, r3
   2b3ce:	f017 fd67 	bl	42ea0 <sys_slist_append>
	return 0;
   2b3d2:	4610      	mov	r0, r2
   2b3d4:	e7ef      	b.n	2b3b6 <lwm2m_engine_add_service+0x1a>
   2b3d6:	bf00      	nop
   2b3d8:	20020b90 	.word	0x20020b90
   2b3dc:	20022494 	.word	0x20022494

0002b3e0 <lwm2m_engine_context_init>:
	k_delayed_work_init(&client_ctx->retransmit_work, retransmit_request);
   2b3e0:	4901      	ldr	r1, [pc, #4]	; (2b3e8 <lwm2m_engine_context_init+0x8>)
   2b3e2:	30f8      	adds	r0, #248	; 0xf8
   2b3e4:	f019 bc61 	b.w	44caa <k_delayed_work_init>
   2b3e8:	00028ce9 	.word	0x00028ce9

0002b3ec <lwm2m_socket_add>:
	if (sock_nfds < MAX_POLL_FD) {
   2b3ec:	4910      	ldr	r1, [pc, #64]	; (2b430 <lwm2m_socket_add+0x44>)
{
   2b3ee:	b510      	push	{r4, lr}
	if (sock_nfds < MAX_POLL_FD) {
   2b3f0:	680b      	ldr	r3, [r1, #0]
   2b3f2:	4a10      	ldr	r2, [pc, #64]	; (2b434 <lwm2m_socket_add+0x48>)
   2b3f4:	2b02      	cmp	r3, #2
   2b3f6:	dd08      	ble.n	2b40a <lwm2m_socket_add+0x1e>
			if (sock_ctx[i] == NULL) {
   2b3f8:	6813      	ldr	r3, [r2, #0]
   2b3fa:	b143      	cbz	r3, 2b40e <lwm2m_socket_add+0x22>
   2b3fc:	6853      	ldr	r3, [r2, #4]
   2b3fe:	b19b      	cbz	r3, 2b428 <lwm2m_socket_add+0x3c>
   2b400:	6893      	ldr	r3, [r2, #8]
   2b402:	b19b      	cbz	r3, 2b42c <lwm2m_socket_add+0x40>
		return -ENOMEM;
   2b404:	f06f 000b 	mvn.w	r0, #11
}
   2b408:	bd10      	pop	{r4, pc}
		i = sock_nfds++;
   2b40a:	1c5c      	adds	r4, r3, #1
   2b40c:	600c      	str	r4, [r1, #0]
	sock_ctx[i] = ctx;
   2b40e:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
	sock_fds[i].fd = ctx->sock_fd;
   2b412:	f8d0 112c 	ldr.w	r1, [r0, #300]	; 0x12c
   2b416:	4a08      	ldr	r2, [pc, #32]	; (2b438 <lwm2m_socket_add+0x4c>)
	return 0;
   2b418:	2000      	movs	r0, #0
	sock_fds[i].fd = ctx->sock_fd;
   2b41a:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
	sock_fds[i].events = POLLIN;
   2b41e:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
   2b422:	2201      	movs	r2, #1
   2b424:	809a      	strh	r2, [r3, #4]
	return 0;
   2b426:	e7ef      	b.n	2b408 <lwm2m_socket_add+0x1c>
		for (i = 0; i < MAX_POLL_FD; i++) {
   2b428:	2301      	movs	r3, #1
   2b42a:	e7f0      	b.n	2b40e <lwm2m_socket_add+0x22>
   2b42c:	2302      	movs	r3, #2
   2b42e:	e7ee      	b.n	2b40e <lwm2m_socket_add+0x22>
   2b430:	200234c0 	.word	0x200234c0
   2b434:	2002349c 	.word	0x2002349c
   2b438:	200234a8 	.word	0x200234a8

0002b43c <lwm2m_socket_del>:
{
   2b43c:	b570      	push	{r4, r5, r6, lr}
   2b43e:	4c0c      	ldr	r4, [pc, #48]	; (2b470 <lwm2m_socket_del+0x34>)
	for (int i = 0; i < sock_nfds; i++) {
   2b440:	2300      	movs	r3, #0
   2b442:	4625      	mov	r5, r4
   2b444:	490b      	ldr	r1, [pc, #44]	; (2b474 <lwm2m_socket_del+0x38>)
   2b446:	680a      	ldr	r2, [r1, #0]
   2b448:	429a      	cmp	r2, r3
   2b44a:	dd0d      	ble.n	2b468 <lwm2m_socket_del+0x2c>
		if (sock_ctx[i] == ctx) {
   2b44c:	f854 6b04 	ldr.w	r6, [r4], #4
   2b450:	4286      	cmp	r6, r0
   2b452:	d10a      	bne.n	2b46a <lwm2m_socket_del+0x2e>
			sock_ctx[i] = NULL;
   2b454:	2000      	movs	r0, #0
			sock_fds[i].fd = -1;
   2b456:	f04f 34ff 	mov.w	r4, #4294967295
			sock_ctx[i] = NULL;
   2b45a:	f845 0023 	str.w	r0, [r5, r3, lsl #2]
			sock_fds[i].fd = -1;
   2b45e:	4806      	ldr	r0, [pc, #24]	; (2b478 <lwm2m_socket_del+0x3c>)
			sock_nfds--;
   2b460:	4422      	add	r2, r4
			sock_fds[i].fd = -1;
   2b462:	f840 4033 	str.w	r4, [r0, r3, lsl #3]
			sock_nfds--;
   2b466:	600a      	str	r2, [r1, #0]
}
   2b468:	bd70      	pop	{r4, r5, r6, pc}
	for (int i = 0; i < sock_nfds; i++) {
   2b46a:	3301      	adds	r3, #1
   2b46c:	e7ec      	b.n	2b448 <lwm2m_socket_del+0xc>
   2b46e:	bf00      	nop
   2b470:	2002349c 	.word	0x2002349c
   2b474:	200234c0 	.word	0x200234c0
   2b478:	200234a8 	.word	0x200234a8

0002b47c <lwm2m_engine_context_close>:
{
   2b47c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	int sock_fd = client_ctx->sock_fd;
   2b480:	f8d0 712c 	ldr.w	r7, [r0, #300]	; 0x12c
{
   2b484:	4605      	mov	r5, r0
	k_delayed_work_cancel(&client_ctx->retransmit_work);
   2b486:	30f8      	adds	r0, #248	; 0xf8
   2b488:	f012 fb5a 	bl	3db40 <k_delayed_work_cancel>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&engine_observer_list,
   2b48c:	4823      	ldr	r0, [pc, #140]	; (2b51c <lwm2m_engine_context_close+0xa0>)
   2b48e:	6804      	ldr	r4, [r0, #0]
   2b490:	bb44      	cbnz	r4, 2b4e4 <lwm2m_engine_context_close+0x68>
	lwm2m_socket_del(client_ctx);
   2b492:	4628      	mov	r0, r5
   2b494:	f7ff ffd2 	bl	2b43c <lwm2m_socket_del>
	client_ctx->sock_fd = -1;
   2b498:	f04f 33ff 	mov.w	r3, #4294967295
	if (sock_fd >= 0) {
   2b49c:	2f00      	cmp	r7, #0
	client_ctx->sock_fd = -1;
   2b49e:	f8c5 312c 	str.w	r3, [r5, #300]	; 0x12c
	if (sock_fd >= 0) {
   2b4a2:	db37      	blt.n	2b514 <lwm2m_engine_context_close+0x98>
	__ASSERT_NO_MSG(socket_ops);
   2b4a4:	4c1e      	ldr	r4, [pc, #120]	; (2b520 <lwm2m_engine_context_close+0xa4>)
   2b4a6:	6823      	ldr	r3, [r4, #0]
   2b4a8:	b94b      	cbnz	r3, 2b4be <lwm2m_engine_context_close+0x42>
   2b4aa:	491e      	ldr	r1, [pc, #120]	; (2b524 <lwm2m_engine_context_close+0xa8>)
   2b4ac:	481e      	ldr	r0, [pc, #120]	; (2b528 <lwm2m_engine_context_close+0xac>)
   2b4ae:	2321      	movs	r3, #33	; 0x21
   2b4b0:	4a1e      	ldr	r2, [pc, #120]	; (2b52c <lwm2m_engine_context_close+0xb0>)
   2b4b2:	f015 f8a6 	bl	40602 <printk>
   2b4b6:	2121      	movs	r1, #33	; 0x21
   2b4b8:	481c      	ldr	r0, [pc, #112]	; (2b52c <lwm2m_engine_context_close+0xb0>)
   2b4ba:	f015 f965 	bl	40788 <assert_post_action>
	__ASSERT_NO_MSG(socket_ops->close);
   2b4be:	6823      	ldr	r3, [r4, #0]
   2b4c0:	685b      	ldr	r3, [r3, #4]
   2b4c2:	b94b      	cbnz	r3, 2b4d8 <lwm2m_engine_context_close+0x5c>
   2b4c4:	491a      	ldr	r1, [pc, #104]	; (2b530 <lwm2m_engine_context_close+0xb4>)
   2b4c6:	4818      	ldr	r0, [pc, #96]	; (2b528 <lwm2m_engine_context_close+0xac>)
   2b4c8:	2322      	movs	r3, #34	; 0x22
   2b4ca:	4a18      	ldr	r2, [pc, #96]	; (2b52c <lwm2m_engine_context_close+0xb0>)
   2b4cc:	f015 f899 	bl	40602 <printk>
   2b4d0:	2122      	movs	r1, #34	; 0x22
   2b4d2:	4816      	ldr	r0, [pc, #88]	; (2b52c <lwm2m_engine_context_close+0xb0>)
   2b4d4:	f015 f958 	bl	40788 <assert_post_action>
	return socket_ops->close(sock);
   2b4d8:	6823      	ldr	r3, [r4, #0]
   2b4da:	4638      	mov	r0, r7
}
   2b4dc:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   2b4e0:	685b      	ldr	r3, [r3, #4]
   2b4e2:	4718      	bx	r3
   2b4e4:	f04f 0900 	mov.w	r9, #0
			sys_slist_remove(&engine_observer_list, prev_node,
   2b4e8:	4680      	mov	r8, r0
   2b4ea:	6826      	ldr	r6, [r4, #0]
		if (obs->ctx == client_ctx) {
   2b4ec:	6863      	ldr	r3, [r4, #4]
   2b4ee:	42ab      	cmp	r3, r5
   2b4f0:	d10a      	bne.n	2b508 <lwm2m_engine_context_close+0x8c>
			sys_slist_remove(&engine_observer_list, prev_node,
   2b4f2:	4622      	mov	r2, r4
   2b4f4:	4649      	mov	r1, r9
   2b4f6:	4640      	mov	r0, r8
   2b4f8:	f017 fcdc 	bl	42eb4 <sys_slist_remove>
__ssp_bos_icheck3(memset, void *, int)
   2b4fc:	4620      	mov	r0, r4
   2b4fe:	2240      	movs	r2, #64	; 0x40
   2b500:	2100      	movs	r1, #0
   2b502:	f019 fcdf 	bl	44ec4 <memset>
   2b506:	464c      	mov	r4, r9
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&engine_observer_list,
   2b508:	2e00      	cmp	r6, #0
   2b50a:	d0c2      	beq.n	2b492 <lwm2m_engine_context_close+0x16>
   2b50c:	46a1      	mov	r9, r4
   2b50e:	4634      	mov	r4, r6
   2b510:	6836      	ldr	r6, [r6, #0]
   2b512:	e7eb      	b.n	2b4ec <lwm2m_engine_context_close+0x70>
}
   2b514:	2000      	movs	r0, #0
   2b516:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   2b51a:	bf00      	nop
   2b51c:	2002248c 	.word	0x2002248c
   2b520:	2002237c 	.word	0x2002237c
   2b524:	0004b740 	.word	0x0004b740
   2b528:	0004764f 	.word	0x0004764f
   2b52c:	0004b710 	.word	0x0004b710
   2b530:	0004b243 	.word	0x0004b243

0002b534 <lwm2m_socket_start>:
{
   2b534:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (client_ctx->load_credentials) {
   2b536:	f8d0 311c 	ldr.w	r3, [r0, #284]	; 0x11c
{
   2b53a:	b085      	sub	sp, #20
   2b53c:	4604      	mov	r4, r0
	if (client_ctx->load_credentials) {
   2b53e:	b143      	cbz	r3, 2b552 <lwm2m_socket_start+0x1e>
		ret = client_ctx->load_credentials(client_ctx);
   2b540:	4798      	blx	r3
		if (ret < 0) {
   2b542:	2800      	cmp	r0, #0
   2b544:	db35      	blt.n	2b5b2 <lwm2m_socket_start+0x7e>
	if (client_ctx->use_dtls) {
   2b546:	f894 3120 	ldrb.w	r3, [r4, #288]	; 0x120
   2b54a:	8820      	ldrh	r0, [r4, #0]
   2b54c:	b96b      	cbnz	r3, 2b56a <lwm2m_socket_start+0x36>
		client_ctx->sock_fd = socket(client_ctx->remote_addr.sa_family,
   2b54e:	2111      	movs	r1, #17
   2b550:	e00d      	b.n	2b56e <lwm2m_socket_start+0x3a>
		ret = load_tls_credential(client_ctx, 3, TLS_CREDENTIAL_PSK_ID);
   2b552:	2205      	movs	r2, #5
   2b554:	2103      	movs	r1, #3
   2b556:	f7ff f87f 	bl	2a658 <load_tls_credential>
		if (ret < 0) {
   2b55a:	2800      	cmp	r0, #0
   2b55c:	db29      	blt.n	2b5b2 <lwm2m_socket_start+0x7e>
		ret = load_tls_credential(client_ctx, 5, TLS_CREDENTIAL_PSK);
   2b55e:	2204      	movs	r2, #4
   2b560:	2105      	movs	r1, #5
   2b562:	4620      	mov	r0, r4
   2b564:	f7ff f878 	bl	2a658 <load_tls_credential>
   2b568:	e7eb      	b.n	2b542 <lwm2m_socket_start+0xe>
		client_ctx->sock_fd = socket(client_ctx->remote_addr.sa_family,
   2b56a:	f240 1111 	movw	r1, #273	; 0x111
		client_ctx->sock_fd = socket(client_ctx->remote_addr.sa_family,
   2b56e:	f7fc fee5 	bl	2833c <socket.constprop.28>
   2b572:	f8c4 012c 	str.w	r0, [r4, #300]	; 0x12c
	if (client_ctx->sock_fd < 0) {
   2b576:	f8d4 612c 	ldr.w	r6, [r4, #300]	; 0x12c
   2b57a:	2e00      	cmp	r6, #0
   2b57c:	da1b      	bge.n	2b5b6 <lwm2m_socket_start+0x82>
		LOG_ERR("Failed to create socket: %d", errno);
   2b57e:	4b50      	ldr	r3, [pc, #320]	; (2b6c0 <lwm2m_socket_start+0x18c>)
   2b580:	681b      	ldr	r3, [r3, #0]
   2b582:	0759      	lsls	r1, r3, #29
   2b584:	d011      	beq.n	2b5aa <lwm2m_socket_start+0x76>
   2b586:	2301      	movs	r3, #1
   2b588:	f04f 0400 	mov.w	r4, #0
   2b58c:	4a4d      	ldr	r2, [pc, #308]	; (2b6c4 <lwm2m_socket_start+0x190>)
   2b58e:	f363 0407 	bfi	r4, r3, #0, #8
   2b592:	4b4d      	ldr	r3, [pc, #308]	; (2b6c8 <lwm2m_socket_start+0x194>)
   2b594:	1a9b      	subs	r3, r3, r2
   2b596:	08db      	lsrs	r3, r3, #3
   2b598:	f363 148f 	bfi	r4, r3, #6, #10
   2b59c:	f017 fb59 	bl	42c52 <__errno>
   2b5a0:	4622      	mov	r2, r4
   2b5a2:	6801      	ldr	r1, [r0, #0]
   2b5a4:	4849      	ldr	r0, [pc, #292]	; (2b6cc <lwm2m_socket_start+0x198>)
   2b5a6:	f015 fa59 	bl	40a5c <log_1>
		return -errno;
   2b5aa:	f017 fb52 	bl	42c52 <__errno>
   2b5ae:	6800      	ldr	r0, [r0, #0]
   2b5b0:	4240      	negs	r0, r0
}
   2b5b2:	b005      	add	sp, #20
   2b5b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (client_ctx->use_dtls) {
   2b5b6:	f894 3120 	ldrb.w	r3, [r4, #288]	; 0x120
   2b5ba:	4d45      	ldr	r5, [pc, #276]	; (2b6d0 <lwm2m_socket_start+0x19c>)
   2b5bc:	2b00      	cmp	r3, #0
   2b5be:	d041      	beq.n	2b644 <lwm2m_socket_start+0x110>
		sec_tag_t tls_tag_list[] = {
   2b5c0:	f8d4 2118 	ldr.w	r2, [r4, #280]	; 0x118
   2b5c4:	682b      	ldr	r3, [r5, #0]
   2b5c6:	9203      	str	r2, [sp, #12]
	__ASSERT_NO_MSG(socket_ops);
   2b5c8:	b94b      	cbnz	r3, 2b5de <lwm2m_socket_start+0xaa>
   2b5ca:	4942      	ldr	r1, [pc, #264]	; (2b6d4 <lwm2m_socket_start+0x1a0>)
   2b5cc:	4842      	ldr	r0, [pc, #264]	; (2b6d8 <lwm2m_socket_start+0x1a4>)
   2b5ce:	2357      	movs	r3, #87	; 0x57
   2b5d0:	4a42      	ldr	r2, [pc, #264]	; (2b6dc <lwm2m_socket_start+0x1a8>)
   2b5d2:	f015 f816 	bl	40602 <printk>
   2b5d6:	2157      	movs	r1, #87	; 0x57
   2b5d8:	4840      	ldr	r0, [pc, #256]	; (2b6dc <lwm2m_socket_start+0x1a8>)
   2b5da:	f015 f8d5 	bl	40788 <assert_post_action>
	__ASSERT_NO_MSG(socket_ops->setsockopt);
   2b5de:	682b      	ldr	r3, [r5, #0]
   2b5e0:	69db      	ldr	r3, [r3, #28]
   2b5e2:	b94b      	cbnz	r3, 2b5f8 <lwm2m_socket_start+0xc4>
   2b5e4:	493e      	ldr	r1, [pc, #248]	; (2b6e0 <lwm2m_socket_start+0x1ac>)
   2b5e6:	483c      	ldr	r0, [pc, #240]	; (2b6d8 <lwm2m_socket_start+0x1a4>)
   2b5e8:	2358      	movs	r3, #88	; 0x58
   2b5ea:	4a3c      	ldr	r2, [pc, #240]	; (2b6dc <lwm2m_socket_start+0x1a8>)
   2b5ec:	f015 f809 	bl	40602 <printk>
   2b5f0:	2158      	movs	r1, #88	; 0x58
   2b5f2:	483a      	ldr	r0, [pc, #232]	; (2b6dc <lwm2m_socket_start+0x1a8>)
   2b5f4:	f015 f8c8 	bl	40788 <assert_post_action>
	return socket_ops->setsockopt(sock, level, optname, optval, optlen);
   2b5f8:	2204      	movs	r2, #4
   2b5fa:	682b      	ldr	r3, [r5, #0]
   2b5fc:	9200      	str	r2, [sp, #0]
   2b5fe:	69df      	ldr	r7, [r3, #28]
   2b600:	2201      	movs	r2, #1
   2b602:	ab03      	add	r3, sp, #12
   2b604:	f44f 718d 	mov.w	r1, #282	; 0x11a
   2b608:	4630      	mov	r0, r6
   2b60a:	47b8      	blx	r7
		if (ret < 0) {
   2b60c:	2800      	cmp	r0, #0
   2b60e:	da19      	bge.n	2b644 <lwm2m_socket_start+0x110>
			LOG_ERR("Failed to set TLS_SEC_TAG_LIST option: %d",
   2b610:	4b2b      	ldr	r3, [pc, #172]	; (2b6c0 <lwm2m_socket_start+0x18c>)
   2b612:	681b      	ldr	r3, [r3, #0]
   2b614:	075a      	lsls	r2, r3, #29
   2b616:	d011      	beq.n	2b63c <lwm2m_socket_start+0x108>
   2b618:	2301      	movs	r3, #1
   2b61a:	f04f 0500 	mov.w	r5, #0
   2b61e:	4a29      	ldr	r2, [pc, #164]	; (2b6c4 <lwm2m_socket_start+0x190>)
   2b620:	f363 0507 	bfi	r5, r3, #0, #8
   2b624:	4b28      	ldr	r3, [pc, #160]	; (2b6c8 <lwm2m_socket_start+0x194>)
   2b626:	1a9b      	subs	r3, r3, r2
   2b628:	08db      	lsrs	r3, r3, #3
   2b62a:	f363 158f 	bfi	r5, r3, #6, #10
   2b62e:	f017 fb10 	bl	42c52 <__errno>
   2b632:	462a      	mov	r2, r5
   2b634:	6801      	ldr	r1, [r0, #0]
   2b636:	482b      	ldr	r0, [pc, #172]	; (2b6e4 <lwm2m_socket_start+0x1b0>)
		LOG_ERR("Cannot connect UDP (-%d)", errno);
   2b638:	f015 fa10 	bl	40a5c <log_1>
		lwm2m_engine_context_close(client_ctx);
   2b63c:	4620      	mov	r0, r4
   2b63e:	f7ff ff1d 	bl	2b47c <lwm2m_engine_context_close>
   2b642:	e7b2      	b.n	2b5aa <lwm2m_socket_start+0x76>
	__ASSERT_NO_MSG(socket_ops);
   2b644:	682b      	ldr	r3, [r5, #0]
	if (connect(client_ctx->sock_fd, &client_ctx->remote_addr,
   2b646:	f8d4 612c 	ldr.w	r6, [r4, #300]	; 0x12c
   2b64a:	b94b      	cbnz	r3, 2b660 <lwm2m_socket_start+0x12c>
   2b64c:	4921      	ldr	r1, [pc, #132]	; (2b6d4 <lwm2m_socket_start+0x1a0>)
   2b64e:	4822      	ldr	r0, [pc, #136]	; (2b6d8 <lwm2m_socket_start+0x1a4>)
   2b650:	2345      	movs	r3, #69	; 0x45
   2b652:	4a22      	ldr	r2, [pc, #136]	; (2b6dc <lwm2m_socket_start+0x1a8>)
   2b654:	f014 ffd5 	bl	40602 <printk>
   2b658:	2145      	movs	r1, #69	; 0x45
   2b65a:	4820      	ldr	r0, [pc, #128]	; (2b6dc <lwm2m_socket_start+0x1a8>)
   2b65c:	f015 f894 	bl	40788 <assert_post_action>
	__ASSERT_NO_MSG(socket_ops->connect);
   2b660:	682b      	ldr	r3, [r5, #0]
   2b662:	695b      	ldr	r3, [r3, #20]
   2b664:	b94b      	cbnz	r3, 2b67a <lwm2m_socket_start+0x146>
   2b666:	4920      	ldr	r1, [pc, #128]	; (2b6e8 <lwm2m_socket_start+0x1b4>)
   2b668:	481b      	ldr	r0, [pc, #108]	; (2b6d8 <lwm2m_socket_start+0x1a4>)
   2b66a:	2346      	movs	r3, #70	; 0x46
   2b66c:	4a1b      	ldr	r2, [pc, #108]	; (2b6dc <lwm2m_socket_start+0x1a8>)
   2b66e:	f014 ffc8 	bl	40602 <printk>
   2b672:	2146      	movs	r1, #70	; 0x46
   2b674:	4819      	ldr	r0, [pc, #100]	; (2b6dc <lwm2m_socket_start+0x1a8>)
   2b676:	f015 f887 	bl	40788 <assert_post_action>
	return socket_ops->connect(sock, addr, addrlen);
   2b67a:	682b      	ldr	r3, [r5, #0]
   2b67c:	2208      	movs	r2, #8
   2b67e:	695b      	ldr	r3, [r3, #20]
   2b680:	4621      	mov	r1, r4
   2b682:	4630      	mov	r0, r6
   2b684:	4798      	blx	r3
   2b686:	2800      	cmp	r0, #0
   2b688:	da14      	bge.n	2b6b4 <lwm2m_socket_start+0x180>
		LOG_ERR("Cannot connect UDP (-%d)", errno);
   2b68a:	4b0d      	ldr	r3, [pc, #52]	; (2b6c0 <lwm2m_socket_start+0x18c>)
   2b68c:	681b      	ldr	r3, [r3, #0]
   2b68e:	075b      	lsls	r3, r3, #29
   2b690:	d0d4      	beq.n	2b63c <lwm2m_socket_start+0x108>
   2b692:	2301      	movs	r3, #1
   2b694:	f04f 0500 	mov.w	r5, #0
   2b698:	4a0a      	ldr	r2, [pc, #40]	; (2b6c4 <lwm2m_socket_start+0x190>)
   2b69a:	f363 0507 	bfi	r5, r3, #0, #8
   2b69e:	4b0a      	ldr	r3, [pc, #40]	; (2b6c8 <lwm2m_socket_start+0x194>)
   2b6a0:	1a9b      	subs	r3, r3, r2
   2b6a2:	08db      	lsrs	r3, r3, #3
   2b6a4:	f363 158f 	bfi	r5, r3, #6, #10
   2b6a8:	f017 fad3 	bl	42c52 <__errno>
   2b6ac:	462a      	mov	r2, r5
   2b6ae:	6801      	ldr	r1, [r0, #0]
   2b6b0:	480e      	ldr	r0, [pc, #56]	; (2b6ec <lwm2m_socket_start+0x1b8>)
   2b6b2:	e7c1      	b.n	2b638 <lwm2m_socket_start+0x104>
	lwm2m_socket_add(client_ctx);
   2b6b4:	4620      	mov	r0, r4
   2b6b6:	f7ff fe99 	bl	2b3ec <lwm2m_socket_add>
	return 0;
   2b6ba:	2000      	movs	r0, #0
   2b6bc:	e779      	b.n	2b5b2 <lwm2m_socket_start+0x7e>
   2b6be:	bf00      	nop
   2b6c0:	20032b0c 	.word	0x20032b0c
   2b6c4:	00045f08 	.word	0x00045f08
   2b6c8:	00046018 	.word	0x00046018
   2b6cc:	0004b54e 	.word	0x0004b54e
   2b6d0:	2002237c 	.word	0x2002237c
   2b6d4:	0004b740 	.word	0x0004b740
   2b6d8:	0004764f 	.word	0x0004764f
   2b6dc:	0004b710 	.word	0x0004b710
   2b6e0:	0004b56a 	.word	0x0004b56a
   2b6e4:	0004b581 	.word	0x0004b581
   2b6e8:	0004b5ab 	.word	0x0004b5ab
   2b6ec:	0004b5bf 	.word	0x0004b5bf

0002b6f0 <lwm2m_parse_peerinfo>:
{
   2b6f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2b6f4:	4606      	mov	r6, r0
   2b6f6:	b093      	sub	sp, #76	; 0x4c
   2b6f8:	460d      	mov	r5, r1
   2b6fa:	4690      	mov	r8, r2
	struct addrinfo *res, hints = { 0 };
   2b6fc:	2100      	movs	r1, #0
   2b6fe:	2220      	movs	r2, #32
   2b700:	a80a      	add	r0, sp, #40	; 0x28
   2b702:	f019 fbdf 	bl	44ec4 <memset>
	http_parser_url_init(&parser);
   2b706:	a802      	add	r0, sp, #8
   2b708:	f018 fa04 	bl	43b14 <http_parser_url_init>
	ret = http_parser_parse_url(url, strlen(url), 0, &parser);
   2b70c:	4630      	mov	r0, r6
   2b70e:	f7f1 fd03 	bl	1d118 <strlen>
   2b712:	ab02      	add	r3, sp, #8
   2b714:	4601      	mov	r1, r0
   2b716:	2200      	movs	r2, #0
   2b718:	4630      	mov	r0, r6
   2b71a:	f003 fe41 	bl	2f3a0 <http_parser_parse_url>
	if (ret < 0) {
   2b71e:	2800      	cmp	r0, #0
   2b720:	da19      	bge.n	2b756 <lwm2m_parse_peerinfo+0x66>
		LOG_ERR("Invalid url: %s", log_strdup(url));
   2b722:	4b6d      	ldr	r3, [pc, #436]	; (2b8d8 <lwm2m_parse_peerinfo+0x1e8>)
   2b724:	681b      	ldr	r3, [r3, #0]
   2b726:	0759      	lsls	r1, r3, #29
   2b728:	d012      	beq.n	2b750 <lwm2m_parse_peerinfo+0x60>
   2b72a:	2301      	movs	r3, #1
   2b72c:	f04f 0400 	mov.w	r4, #0
   2b730:	4a6a      	ldr	r2, [pc, #424]	; (2b8dc <lwm2m_parse_peerinfo+0x1ec>)
   2b732:	f363 0407 	bfi	r4, r3, #0, #8
   2b736:	4b6a      	ldr	r3, [pc, #424]	; (2b8e0 <lwm2m_parse_peerinfo+0x1f0>)
   2b738:	4630      	mov	r0, r6
   2b73a:	1a9b      	subs	r3, r3, r2
   2b73c:	08db      	lsrs	r3, r3, #3
   2b73e:	f363 148f 	bfi	r4, r3, #6, #10
   2b742:	f7f6 fab3 	bl	21cac <log_strdup>
   2b746:	4622      	mov	r2, r4
   2b748:	4601      	mov	r1, r0
   2b74a:	4866      	ldr	r0, [pc, #408]	; (2b8e4 <lwm2m_parse_peerinfo+0x1f4>)
   2b74c:	f015 f986 	bl	40a5c <log_1>
		return -ENOTSUP;
   2b750:	f06f 0485 	mvn.w	r4, #133	; 0x85
   2b754:	e0b4      	b.n	2b8c0 <lwm2m_parse_peerinfo+0x1d0>
	if (strncmp(url + off, "coaps", len) != 0) {
   2b756:	f8bd 400c 	ldrh.w	r4, [sp, #12]
	len = parser.field_data[UF_SCHEMA].len;
   2b75a:	f8bd 700e 	ldrh.w	r7, [sp, #14]
	if (strncmp(url + off, "coaps", len) != 0) {
   2b75e:	4434      	add	r4, r6
   2b760:	463a      	mov	r2, r7
   2b762:	4961      	ldr	r1, [pc, #388]	; (2b8e8 <lwm2m_parse_peerinfo+0x1f8>)
   2b764:	4620      	mov	r0, r4
   2b766:	f019 fcfb 	bl	45160 <strncmp>
   2b76a:	2800      	cmp	r0, #0
   2b76c:	f040 80b1 	bne.w	2b8d2 <lwm2m_parse_peerinfo+0x1e2>
	if (len == 5U && strncmp(url + off, "coaps", len) == 0) {
   2b770:	2f05      	cmp	r7, #5
	*use_dtls = false;
   2b772:	f888 0000 	strb.w	r0, [r8]
	if (len == 5U && strncmp(url + off, "coaps", len) == 0) {
   2b776:	d108      	bne.n	2b78a <lwm2m_parse_peerinfo+0x9a>
   2b778:	463a      	mov	r2, r7
   2b77a:	495b      	ldr	r1, [pc, #364]	; (2b8e8 <lwm2m_parse_peerinfo+0x1f8>)
   2b77c:	4620      	mov	r0, r4
   2b77e:	f019 fcef 	bl	45160 <strncmp>
   2b782:	b910      	cbnz	r0, 2b78a <lwm2m_parse_peerinfo+0x9a>
		*use_dtls = true;
   2b784:	2301      	movs	r3, #1
   2b786:	f888 3000 	strb.w	r3, [r8]
	if (!(parser.field_set & (1 << UF_PORT))) {
   2b78a:	f8bd 3008 	ldrh.w	r3, [sp, #8]
	addr->sa_family = AF_INET6;
   2b78e:	f04f 0b02 	mov.w	fp, #2
	if (!(parser.field_set & (1 << UF_PORT))) {
   2b792:	075a      	lsls	r2, r3, #29
		parser.port = CONFIG_LWM2M_PEER_PORT;
   2b794:	bf58      	it	pl
   2b796:	f241 6334 	movwpl	r3, #5684	; 0x1634
	url[off + len] = '\0';
   2b79a:	f04f 0200 	mov.w	r2, #0
	addr->sa_family = AF_INET6;
   2b79e:	462f      	mov	r7, r5
	off = parser.field_data[UF_HOST].off;
   2b7a0:	f8bd 8010 	ldrh.w	r8, [sp, #16]
	tmp = url[off + len];
   2b7a4:	f8bd 9012 	ldrh.w	r9, [sp, #18]
		parser.port = CONFIG_LWM2M_PEER_PORT;
   2b7a8:	bf58      	it	pl
   2b7aa:	f8ad 300a 	strhpl.w	r3, [sp, #10]
	tmp = url[off + len];
   2b7ae:	44c1      	add	r9, r8
   2b7b0:	f816 a009 	ldrb.w	sl, [r6, r9]
	ret = net_addr_pton(AF_INET6, url + off,
   2b7b4:	44b0      	add	r8, r6
	url[off + len] = '\0';
   2b7b6:	f806 2009 	strb.w	r2, [r6, r9]
   2b7ba:	f8c5 2002 	str.w	r2, [r5, #2]
   2b7be:	80ea      	strh	r2, [r5, #6]
	addr->sa_family = AF_INET6;
   2b7c0:	f827 bb04 	strh.w	fp, [r7], #4
	if (z_syscall_trap()) {
		return (int) arch_syscall_invoke3(*(uintptr_t *)&family, *(uintptr_t *)&src, *(uintptr_t *)&dst, K_SYSCALL_NET_ADDR_PTON);
	}
#endif
	compiler_barrier();
	return z_impl_net_addr_pton(family, src, dst);
   2b7c4:	463a      	mov	r2, r7
   2b7c6:	4641      	mov	r1, r8
   2b7c8:	4658      	mov	r0, fp
   2b7ca:	f017 fa75 	bl	42cb8 <z_impl_net_addr_pton>
	if (ret < 0) {
   2b7ce:	1e04      	subs	r4, r0, #0
   2b7d0:	da6b      	bge.n	2b8aa <lwm2m_parse_peerinfo+0x1ba>
		addr->sa_family = AF_INET;
   2b7d2:	2301      	movs	r3, #1
   2b7d4:	802b      	strh	r3, [r5, #0]
   2b7d6:	463a      	mov	r2, r7
   2b7d8:	4641      	mov	r1, r8
   2b7da:	4618      	mov	r0, r3
   2b7dc:	f017 fa6c 	bl	42cb8 <z_impl_net_addr_pton>
	if (ret < 0) {
   2b7e0:	1e04      	subs	r4, r0, #0
   2b7e2:	da62      	bge.n	2b8aa <lwm2m_parse_peerinfo+0x1ba>
		hints.ai_family = AF_INET;
   2b7e4:	2301      	movs	r3, #1

static inline int getaddrinfo(const char *node, const char *service,
			      const struct addrinfo *hints,
			      struct addrinfo **res)
{
	__ASSERT_NO_MSG(socket_ops);
   2b7e6:	4f41      	ldr	r7, [pc, #260]	; (2b8ec <lwm2m_parse_peerinfo+0x1fc>)
		hints.ai_socktype = SOCK_DGRAM;
   2b7e8:	e9cd 3b0b 	strd	r3, fp, [sp, #44]	; 0x2c
   2b7ec:	683b      	ldr	r3, [r7, #0]
   2b7ee:	b94b      	cbnz	r3, 2b804 <lwm2m_parse_peerinfo+0x114>
   2b7f0:	493f      	ldr	r1, [pc, #252]	; (2b8f0 <lwm2m_parse_peerinfo+0x200>)
   2b7f2:	4840      	ldr	r0, [pc, #256]	; (2b8f4 <lwm2m_parse_peerinfo+0x204>)
   2b7f4:	2393      	movs	r3, #147	; 0x93
   2b7f6:	4a40      	ldr	r2, [pc, #256]	; (2b8f8 <lwm2m_parse_peerinfo+0x208>)
   2b7f8:	f014 ff03 	bl	40602 <printk>
   2b7fc:	2193      	movs	r1, #147	; 0x93
   2b7fe:	483e      	ldr	r0, [pc, #248]	; (2b8f8 <lwm2m_parse_peerinfo+0x208>)
   2b800:	f014 ffc2 	bl	40788 <assert_post_action>
	__ASSERT_NO_MSG(socket_ops->getaddrinfo);
   2b804:	683b      	ldr	r3, [r7, #0]
   2b806:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   2b808:	b94b      	cbnz	r3, 2b81e <lwm2m_parse_peerinfo+0x12e>
   2b80a:	493c      	ldr	r1, [pc, #240]	; (2b8fc <lwm2m_parse_peerinfo+0x20c>)
   2b80c:	4839      	ldr	r0, [pc, #228]	; (2b8f4 <lwm2m_parse_peerinfo+0x204>)
   2b80e:	2394      	movs	r3, #148	; 0x94
   2b810:	4a39      	ldr	r2, [pc, #228]	; (2b8f8 <lwm2m_parse_peerinfo+0x208>)
   2b812:	f014 fef6 	bl	40602 <printk>
   2b816:	2194      	movs	r1, #148	; 0x94
   2b818:	4837      	ldr	r0, [pc, #220]	; (2b8f8 <lwm2m_parse_peerinfo+0x208>)
   2b81a:	f014 ffb5 	bl	40788 <assert_post_action>

	return socket_ops->getaddrinfo(node, service, hints, res);
   2b81e:	683b      	ldr	r3, [r7, #0]
   2b820:	aa0a      	add	r2, sp, #40	; 0x28
   2b822:	6b5c      	ldr	r4, [r3, #52]	; 0x34
   2b824:	2100      	movs	r1, #0
   2b826:	ab01      	add	r3, sp, #4
   2b828:	4640      	mov	r0, r8
   2b82a:	47a0      	blx	r4
		if (ret != 0) {
   2b82c:	4604      	mov	r4, r0
   2b82e:	b1a0      	cbz	r0, 2b85a <lwm2m_parse_peerinfo+0x16a>
			LOG_ERR("Unable to resolve address");
   2b830:	4b29      	ldr	r3, [pc, #164]	; (2b8d8 <lwm2m_parse_peerinfo+0x1e8>)
   2b832:	681b      	ldr	r3, [r3, #0]
   2b834:	075b      	lsls	r3, r3, #29
   2b836:	d00d      	beq.n	2b854 <lwm2m_parse_peerinfo+0x164>
   2b838:	2301      	movs	r3, #1
   2b83a:	f04f 0100 	mov.w	r1, #0
   2b83e:	4a27      	ldr	r2, [pc, #156]	; (2b8dc <lwm2m_parse_peerinfo+0x1ec>)
   2b840:	f363 0107 	bfi	r1, r3, #0, #8
   2b844:	4b26      	ldr	r3, [pc, #152]	; (2b8e0 <lwm2m_parse_peerinfo+0x1f0>)
   2b846:	482e      	ldr	r0, [pc, #184]	; (2b900 <lwm2m_parse_peerinfo+0x210>)
   2b848:	1a9b      	subs	r3, r3, r2
   2b84a:	08db      	lsrs	r3, r3, #3
   2b84c:	f363 118f 	bfi	r1, r3, #6, #10
   2b850:	f015 f8f7 	bl	40a42 <log_0>
			ret = -ENOENT;
   2b854:	f06f 0401 	mvn.w	r4, #1
   2b858:	e030      	b.n	2b8bc <lwm2m_parse_peerinfo+0x1cc>
		memcpy(addr, res->ai_addr, sizeof(*addr));
   2b85a:	f8dd 8004 	ldr.w	r8, [sp, #4]
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   2b85e:	f8d8 2014 	ldr.w	r2, [r8, #20]
   2b862:	6813      	ldr	r3, [r2, #0]
   2b864:	602b      	str	r3, [r5, #0]
   2b866:	6853      	ldr	r3, [r2, #4]
   2b868:	606b      	str	r3, [r5, #4]
		addr->sa_family = res->ai_family;
   2b86a:	f8d8 3004 	ldr.w	r3, [r8, #4]
   2b86e:	802b      	strh	r3, [r5, #0]
}

static inline void freeaddrinfo(struct addrinfo *res)
{
	__ASSERT_NO_MSG(socket_ops);
   2b870:	683b      	ldr	r3, [r7, #0]
   2b872:	b94b      	cbnz	r3, 2b888 <lwm2m_parse_peerinfo+0x198>
   2b874:	491e      	ldr	r1, [pc, #120]	; (2b8f0 <lwm2m_parse_peerinfo+0x200>)
   2b876:	481f      	ldr	r0, [pc, #124]	; (2b8f4 <lwm2m_parse_peerinfo+0x204>)
   2b878:	239b      	movs	r3, #155	; 0x9b
   2b87a:	4a1f      	ldr	r2, [pc, #124]	; (2b8f8 <lwm2m_parse_peerinfo+0x208>)
   2b87c:	f014 fec1 	bl	40602 <printk>
   2b880:	219b      	movs	r1, #155	; 0x9b
   2b882:	481d      	ldr	r0, [pc, #116]	; (2b8f8 <lwm2m_parse_peerinfo+0x208>)
   2b884:	f014 ff80 	bl	40788 <assert_post_action>
	__ASSERT_NO_MSG(socket_ops->freeaddrinfo);
   2b888:	683b      	ldr	r3, [r7, #0]
   2b88a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   2b88c:	b94b      	cbnz	r3, 2b8a2 <lwm2m_parse_peerinfo+0x1b2>
   2b88e:	491d      	ldr	r1, [pc, #116]	; (2b904 <lwm2m_parse_peerinfo+0x214>)
   2b890:	4818      	ldr	r0, [pc, #96]	; (2b8f4 <lwm2m_parse_peerinfo+0x204>)
   2b892:	239c      	movs	r3, #156	; 0x9c
   2b894:	4a18      	ldr	r2, [pc, #96]	; (2b8f8 <lwm2m_parse_peerinfo+0x208>)
   2b896:	f014 feb4 	bl	40602 <printk>
   2b89a:	219c      	movs	r1, #156	; 0x9c
   2b89c:	4816      	ldr	r0, [pc, #88]	; (2b8f8 <lwm2m_parse_peerinfo+0x208>)
   2b89e:	f014 ff73 	bl	40788 <assert_post_action>

	return socket_ops->freeaddrinfo(res);
   2b8a2:	683b      	ldr	r3, [r7, #0]
   2b8a4:	4640      	mov	r0, r8
   2b8a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   2b8a8:	4798      	blx	r3
	if (addr->sa_family == AF_INET6) {
   2b8aa:	882b      	ldrh	r3, [r5, #0]
   2b8ac:	2b02      	cmp	r3, #2
   2b8ae:	d10b      	bne.n	2b8c8 <lwm2m_parse_peerinfo+0x1d8>
		net_sin(addr)->sin_port = htons(parser.port);
   2b8b0:	f8bd 200a 	ldrh.w	r2, [sp, #10]
   2b8b4:	0213      	lsls	r3, r2, #8
   2b8b6:	ea43 2312 	orr.w	r3, r3, r2, lsr #8
   2b8ba:	806b      	strh	r3, [r5, #2]
	url[off + len] = tmp;
   2b8bc:	f806 a009 	strb.w	sl, [r6, r9]
}
   2b8c0:	4620      	mov	r0, r4
   2b8c2:	b013      	add	sp, #76	; 0x4c
   2b8c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	} else if (addr->sa_family == AF_INET) {
   2b8c8:	2b01      	cmp	r3, #1
   2b8ca:	d0f1      	beq.n	2b8b0 <lwm2m_parse_peerinfo+0x1c0>
		ret = -EPROTONOSUPPORT;
   2b8cc:	f06f 047a 	mvn.w	r4, #122	; 0x7a
   2b8d0:	e7f4      	b.n	2b8bc <lwm2m_parse_peerinfo+0x1cc>
		return -EPROTONOSUPPORT;
   2b8d2:	f06f 047a 	mvn.w	r4, #122	; 0x7a
   2b8d6:	e7f3      	b.n	2b8c0 <lwm2m_parse_peerinfo+0x1d0>
   2b8d8:	20032b0c 	.word	0x20032b0c
   2b8dc:	00045f08 	.word	0x00045f08
   2b8e0:	00046018 	.word	0x00046018
   2b8e4:	0004b4be 	.word	0x0004b4be
   2b8e8:	0004b4ce 	.word	0x0004b4ce
   2b8ec:	2002237c 	.word	0x2002237c
   2b8f0:	0004b740 	.word	0x0004b740
   2b8f4:	0004764f 	.word	0x0004764f
   2b8f8:	0004b710 	.word	0x0004b710
   2b8fc:	0004b4d4 	.word	0x0004b4d4
   2b900:	0004b4ec 	.word	0x0004b4ec
   2b904:	0004b506 	.word	0x0004b506

0002b908 <lwm2m_engine_start>:
{
   2b908:	b510      	push	{r4, lr}
   2b90a:	b088      	sub	sp, #32
	snprintk(pathstr, sizeof(pathstr), "0/%d/0", client_ctx->sec_obj_inst);
   2b90c:	f8d0 3124 	ldr.w	r3, [r0, #292]	; 0x124
   2b910:	4a12      	ldr	r2, [pc, #72]	; (2b95c <lwm2m_engine_start+0x54>)
   2b912:	2114      	movs	r1, #20
{
   2b914:	4604      	mov	r4, r0
	snprintk(pathstr, sizeof(pathstr), "0/%d/0", client_ctx->sec_obj_inst);
   2b916:	a803      	add	r0, sp, #12
   2b918:	f014 fe80 	bl	4061c <snprintk>
	ret = lwm2m_engine_get_res_data(pathstr, (void **)&url, &url_len,
   2b91c:	f10d 0305 	add.w	r3, sp, #5
   2b920:	f10d 0206 	add.w	r2, sp, #6
   2b924:	a902      	add	r1, sp, #8
   2b926:	a803      	add	r0, sp, #12
   2b928:	f7fe fe3a 	bl	2a5a0 <lwm2m_engine_get_res_data>
	if (ret < 0) {
   2b92c:	2800      	cmp	r0, #0
   2b92e:	db12      	blt.n	2b956 <lwm2m_engine_start+0x4e>
	url[url_len] = '\0';
   2b930:	2100      	movs	r1, #0
   2b932:	9a02      	ldr	r2, [sp, #8]
   2b934:	f8bd 3006 	ldrh.w	r3, [sp, #6]
   2b938:	54d1      	strb	r1, [r2, r3]
	ret = lwm2m_parse_peerinfo(url, &client_ctx->remote_addr,
   2b93a:	9802      	ldr	r0, [sp, #8]
   2b93c:	f504 7290 	add.w	r2, r4, #288	; 0x120
   2b940:	4621      	mov	r1, r4
   2b942:	f7ff fed5 	bl	2b6f0 <lwm2m_parse_peerinfo>
	if (ret < 0) {
   2b946:	2800      	cmp	r0, #0
   2b948:	db05      	blt.n	2b956 <lwm2m_engine_start+0x4e>
	lwm2m_engine_context_init(client_ctx);
   2b94a:	4620      	mov	r0, r4
   2b94c:	f7ff fd48 	bl	2b3e0 <lwm2m_engine_context_init>
	return lwm2m_socket_start(client_ctx);
   2b950:	4620      	mov	r0, r4
   2b952:	f7ff fdef 	bl	2b534 <lwm2m_socket_start>
}
   2b956:	b008      	add	sp, #32
   2b958:	bd10      	pop	{r4, pc}
   2b95a:	bf00      	nop
   2b95c:	0004b3e7 	.word	0x0004b3e7

0002b960 <lwm2m_security_init>:

	return inst[index].obj_inst_id;
}

static int lwm2m_security_init(struct device *dev)
{
   2b960:	b513      	push	{r0, r1, r4, lr}
	struct lwm2m_engine_obj_inst *obj_inst = NULL;
	int ret = 0;

	security.obj_id = LWM2M_OBJECT_SECURITY_ID;
	security.fields = fields;
   2b962:	4b15      	ldr	r3, [pc, #84]	; (2b9b8 <lwm2m_security_init+0x58>)
   2b964:	4815      	ldr	r0, [pc, #84]	; (2b9bc <lwm2m_security_init+0x5c>)
	struct lwm2m_engine_obj_inst *obj_inst = NULL;
   2b966:	2400      	movs	r4, #0
	security.fields = fields;
   2b968:	6043      	str	r3, [r0, #4]
	security.obj_id = LWM2M_OBJECT_SECURITY_ID;
   2b96a:	f44f 2350 	mov.w	r3, #851968	; 0xd0000
   2b96e:	6183      	str	r3, [r0, #24]
	security.field_count = ARRAY_SIZE(fields);
	security.max_instance_count = MAX_INSTANCE_COUNT;
   2b970:	2301      	movs	r3, #1
   2b972:	83c3      	strh	r3, [r0, #30]
	security.create_cb = security_create;
   2b974:	4b12      	ldr	r3, [pc, #72]	; (2b9c0 <lwm2m_security_init+0x60>)
	struct lwm2m_engine_obj_inst *obj_inst = NULL;
   2b976:	9401      	str	r4, [sp, #4]
	security.create_cb = security_create;
   2b978:	6083      	str	r3, [r0, #8]
	lwm2m_register_obj(&security);
   2b97a:	f7fc fdcf 	bl	2851c <lwm2m_register_obj>

	/* auto create the first instance */
	ret = lwm2m_create_obj_inst(LWM2M_OBJECT_SECURITY_ID, 0, &obj_inst);
   2b97e:	4621      	mov	r1, r4
   2b980:	4620      	mov	r0, r4
   2b982:	aa01      	add	r2, sp, #4
   2b984:	f7fd f8ee 	bl	28b64 <lwm2m_create_obj_inst>
	if (ret < 0) {
   2b988:	1e04      	subs	r4, r0, #0
   2b98a:	da12      	bge.n	2b9b2 <lwm2m_security_init+0x52>
		LOG_ERR("Create LWM2M security instance 0 error: %d", ret);
   2b98c:	4b0d      	ldr	r3, [pc, #52]	; (2b9c4 <lwm2m_security_init+0x64>)
   2b98e:	681b      	ldr	r3, [r3, #0]
   2b990:	075b      	lsls	r3, r3, #29
   2b992:	d00e      	beq.n	2b9b2 <lwm2m_security_init+0x52>
   2b994:	2301      	movs	r3, #1
   2b996:	f04f 0200 	mov.w	r2, #0
   2b99a:	490b      	ldr	r1, [pc, #44]	; (2b9c8 <lwm2m_security_init+0x68>)
   2b99c:	f363 0207 	bfi	r2, r3, #0, #8
   2b9a0:	4b0a      	ldr	r3, [pc, #40]	; (2b9cc <lwm2m_security_init+0x6c>)
   2b9a2:	480b      	ldr	r0, [pc, #44]	; (2b9d0 <lwm2m_security_init+0x70>)
   2b9a4:	1a5b      	subs	r3, r3, r1
   2b9a6:	08db      	lsrs	r3, r3, #3
   2b9a8:	f363 128f 	bfi	r2, r3, #6, #10
   2b9ac:	4621      	mov	r1, r4
   2b9ae:	f015 f855 	bl	40a5c <log_1>
	}

	return ret;
}
   2b9b2:	4620      	mov	r0, r4
   2b9b4:	b002      	add	sp, #8
   2b9b6:	bd10      	pop	{r4, pc}
   2b9b8:	200326ac 	.word	0x200326ac
   2b9bc:	200237e8 	.word	0x200237e8
   2b9c0:	0002b9d5 	.word	0x0002b9d5
   2b9c4:	20032b24 	.word	0x20032b24
   2b9c8:	00045f08 	.word	0x00045f08
   2b9cc:	00046048 	.word	0x00046048
   2b9d0:	0004b879 	.word	0x0004b879

0002b9d4 <security_create>:
{
   2b9d4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
		if (inst[index].obj && inst[index].obj_inst_id == obj_inst_id) {
   2b9d8:	4e55      	ldr	r6, [pc, #340]	; (2bb30 <security_create+0x15c>)
   2b9da:	6873      	ldr	r3, [r6, #4]
   2b9dc:	b1f3      	cbz	r3, 2ba1c <security_create+0x48>
   2b9de:	89b1      	ldrh	r1, [r6, #12]
   2b9e0:	4b54      	ldr	r3, [pc, #336]	; (2bb34 <security_create+0x160>)
   2b9e2:	4281      	cmp	r1, r0
			LOG_ERR("Can not create instance - "
   2b9e4:	681e      	ldr	r6, [r3, #0]
		if (inst[index].obj && inst[index].obj_inst_id == obj_inst_id) {
   2b9e6:	d112      	bne.n	2ba0e <security_create+0x3a>
			LOG_ERR("Can not create instance - "
   2b9e8:	f016 0607 	ands.w	r6, r6, #7
   2b9ec:	d012      	beq.n	2ba14 <security_create+0x40>
   2b9ee:	2301      	movs	r3, #1
   2b9f0:	f04f 0200 	mov.w	r2, #0
   2b9f4:	4850      	ldr	r0, [pc, #320]	; (2bb38 <security_create+0x164>)
   2b9f6:	f363 0207 	bfi	r2, r3, #0, #8
   2b9fa:	4b50      	ldr	r3, [pc, #320]	; (2bb3c <security_create+0x168>)
   2b9fc:	1a1b      	subs	r3, r3, r0
   2b9fe:	08db      	lsrs	r3, r3, #3
   2ba00:	484f      	ldr	r0, [pc, #316]	; (2bb40 <security_create+0x16c>)
   2ba02:	f363 128f 	bfi	r2, r3, #6, #10
		LOG_ERR("Can not create instance - "
   2ba06:	f015 f829 	bl	40a5c <log_1>
		return NULL;
   2ba0a:	2600      	movs	r6, #0
   2ba0c:	e002      	b.n	2ba14 <security_create+0x40>
		LOG_ERR("Can not create instance - "
   2ba0e:	f016 0607 	ands.w	r6, r6, #7
   2ba12:	d17f      	bne.n	2bb14 <security_create+0x140>
}
   2ba14:	4630      	mov	r0, r6
   2ba16:	b003      	add	sp, #12
   2ba18:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	(void)memset(res[index], 0,
   2ba1c:	4d49      	ldr	r5, [pc, #292]	; (2bb44 <security_create+0x170>)
	security_uri[index][0] = '\0';
   2ba1e:	f8df b13c 	ldr.w	fp, [pc, #316]	; 2bb5c <security_create+0x188>
	client_identity[index][0] = '\0';
   2ba22:	f8df 813c 	ldr.w	r8, [pc, #316]	; 2bb60 <security_create+0x18c>
	bootstrap_flag[index] = 0;
   2ba26:	f8df a13c 	ldr.w	sl, [pc, #316]	; 2bb64 <security_create+0x190>
	security_mode[index] = 0U;
   2ba2a:	f8df 913c 	ldr.w	r9, [pc, #316]	; 2bb68 <security_create+0x194>
	short_server_id[index] = 0U;
   2ba2e:	4f46      	ldr	r7, [pc, #280]	; (2bb48 <security_create+0x174>)
	(void)memset(res[index], 0,
   2ba30:	4619      	mov	r1, r3
   2ba32:	f44f 729c 	mov.w	r2, #312	; 0x138
   2ba36:	4628      	mov	r0, r5
	memset(ri, 0, sizeof(*ri) * ri_len);
   2ba38:	4c44      	ldr	r4, [pc, #272]	; (2bb4c <security_create+0x178>)
	security_uri[index][0] = '\0';
   2ba3a:	f88b 3000 	strb.w	r3, [fp]
	client_identity[index][0] = '\0';
   2ba3e:	f888 3000 	strb.w	r3, [r8]
	bootstrap_flag[index] = 0;
   2ba42:	f88a 3000 	strb.w	r3, [sl]
	security_mode[index] = 0U;
   2ba46:	f889 3000 	strb.w	r3, [r9]
	short_server_id[index] = 0U;
   2ba4a:	803b      	strh	r3, [r7, #0]
	(void)memset(res[index], 0,
   2ba4c:	9301      	str	r3, [sp, #4]
   2ba4e:	f019 fa39 	bl	44ec4 <memset>
   2ba52:	9b01      	ldr	r3, [sp, #4]
   2ba54:	2294      	movs	r2, #148	; 0x94
   2ba56:	4619      	mov	r1, r3
   2ba58:	f104 0008 	add.w	r0, r4, #8
   2ba5c:	f019 fa32 	bl	44ec4 <memset>
	INIT_OBJ_RES_DATA(SECURITY_MODE_ID, res[index], i,
   2ba60:	f104 0118 	add.w	r1, r4, #24
   2ba64:	6429      	str	r1, [r5, #64]	; 0x40
	INIT_OBJ_RES_DATA(SECURITY_CLIENT_PK_ID, res[index], i,
   2ba66:	2103      	movs	r1, #3
   2ba68:	f8a5 105c 	strh.w	r1, [r5, #92]	; 0x5c
   2ba6c:	f104 0124 	add.w	r1, r4, #36	; 0x24
   2ba70:	65a9      	str	r1, [r5, #88]	; 0x58
   2ba72:	2180      	movs	r1, #128	; 0x80
   2ba74:	62a1      	str	r1, [r4, #40]	; 0x28
	INIT_OBJ_RES_DATA(SECURITY_SERVER_PK_ID, res[index], i,
   2ba76:	2104      	movs	r1, #4
	INIT_OBJ_RES_DATA(SECURITY_SERVER_URI_ID, res[index], i,
   2ba78:	22ff      	movs	r2, #255	; 0xff
		ri[i].res_inst_id = RES_INSTANCE_NOT_CREATED;
   2ba7a:	f64f 73ff 	movw	r3, #65535	; 0xffff
	INIT_OBJ_RES_DATA(SECURITY_SERVER_PK_ID, res[index], i,
   2ba7e:	f8a5 1074 	strh.w	r1, [r5, #116]	; 0x74
	INIT_OBJ_RES_DATA(SECURITY_SECRET_KEY_ID, res[index], i,
   2ba82:	2005      	movs	r0, #5
	INIT_OBJ_RES_DATA(SECURITY_SERVER_PK_ID, res[index], i,
   2ba84:	f104 0130 	add.w	r1, r4, #48	; 0x30
   2ba88:	6729      	str	r1, [r5, #112]	; 0x70
   2ba8a:	4931      	ldr	r1, [pc, #196]	; (2bb50 <security_create+0x17c>)
	INIT_OBJ_RES_DATA(SECURITY_SERVER_URI_ID, res[index], i,
   2ba8c:	6062      	str	r2, [r4, #4]
	INIT_OBJ_RES_DATA(SECURITY_BOOTSTRAP_FLAG_ID, res[index], i,
   2ba8e:	f104 020c 	add.w	r2, r4, #12
   2ba92:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
   2ba96:	f8a4 3066 	strh.w	r3, [r4, #102]	; 0x66
   2ba9a:	f8a4 3072 	strh.w	r3, [r4, #114]	; 0x72
   2ba9e:	f8a4 307e 	strh.w	r3, [r4, #126]	; 0x7e
   2baa2:	f8a4 308a 	strh.w	r3, [r4, #138]	; 0x8a
   2baa6:	f8a4 3096 	strh.w	r3, [r4, #150]	; 0x96
   2baaa:	62aa      	str	r2, [r5, #40]	; 0x28
	INIT_OBJ_RES_DATA(SECURITY_SERVER_URI_ID, res[index], i,
   2baac:	2301      	movs	r3, #1
	INIT_OBJ_RES_DATA(SECURITY_MODE_ID, res[index], i,
   2baae:	2202      	movs	r2, #2
	INIT_OBJ_RES_DATA(SECURITY_SERVER_PK_ID, res[index], i,
   2bab0:	6321      	str	r1, [r4, #48]	; 0x30
   2bab2:	2121      	movs	r1, #33	; 0x21
	INIT_OBJ_RES_DATA(SECURITY_SECRET_KEY_ID, res[index], i,
   2bab4:	f8a5 008c 	strh.w	r0, [r5, #140]	; 0x8c
   2bab8:	f104 003c 	add.w	r0, r4, #60	; 0x3c
   2babc:	f8c5 0088 	str.w	r0, [r5, #136]	; 0x88
   2bac0:	4824      	ldr	r0, [pc, #144]	; (2bb54 <security_create+0x180>)
	INIT_OBJ_RES_DATA(SECURITY_SERVER_URI_ID, res[index], i,
   2bac2:	75ab      	strb	r3, [r5, #22]
	INIT_OBJ_RES_DATA(SECURITY_BOOTSTRAP_FLAG_ID, res[index], i,
   2bac4:	85ab      	strh	r3, [r5, #44]	; 0x2c
   2bac6:	f885 302e 	strb.w	r3, [r5, #46]	; 0x2e
   2baca:	e9c4 a303 	strd	sl, r3, [r4, #12]
	INIT_OBJ_RES_DATA(SECURITY_MODE_ID, res[index], i,
   2bace:	f885 3046 	strb.w	r3, [r5, #70]	; 0x46
   2bad2:	e9c4 9306 	strd	r9, r3, [r4, #24]
	INIT_OBJ_RES_DATA(SECURITY_CLIENT_PK_ID, res[index], i,
   2bad6:	f885 305e 	strb.w	r3, [r5, #94]	; 0x5e
	INIT_OBJ_RES_DATA(SECURITY_SERVER_PK_ID, res[index], i,
   2bada:	f885 3076 	strb.w	r3, [r5, #118]	; 0x76
   2bade:	6361      	str	r1, [r4, #52]	; 0x34
	INIT_OBJ_RES_DATA(SECURITY_SERVER_URI_ID, res[index], i,
   2bae0:	612c      	str	r4, [r5, #16]
   2bae2:	f8c4 b000 	str.w	fp, [r4]
	INIT_OBJ_RES_DATA(SECURITY_MODE_ID, res[index], i,
   2bae6:	f8a5 2044 	strh.w	r2, [r5, #68]	; 0x44
	INIT_OBJ_RES_DATA(SECURITY_CLIENT_PK_ID, res[index], i,
   2baea:	f8c4 8024 	str.w	r8, [r4, #36]	; 0x24
	INIT_OBJ_RES_DATA(SECURITY_SECRET_KEY_ID, res[index], i,
   2baee:	f885 308e 	strb.w	r3, [r5, #142]	; 0x8e
   2baf2:	e9c4 010f 	strd	r0, r1, [r4, #60]	; 0x3c
	INIT_OBJ_RES_DATA(SECURITY_SHORT_SERVER_ID, res[index], i,
   2baf6:	210a      	movs	r1, #10
   2baf8:	f885 30a6 	strb.w	r3, [r5, #166]	; 0xa6
	inst[index].resource_count = i;
   2bafc:	2307      	movs	r3, #7
	INIT_OBJ_RES_DATA(SECURITY_SHORT_SERVER_ID, res[index], i,
   2bafe:	f8a5 10a4 	strh.w	r1, [r5, #164]	; 0xa4
   2bb02:	f104 0148 	add.w	r1, r4, #72	; 0x48
   2bb06:	f8c5 10a0 	str.w	r1, [r5, #160]	; 0xa0
   2bb0a:	e9c4 7212 	strd	r7, r2, [r4, #72]	; 0x48
	inst[index].resources = res[index];
   2bb0e:	60b5      	str	r5, [r6, #8]
	inst[index].resource_count = i;
   2bb10:	81f3      	strh	r3, [r6, #14]
	return &inst[index];
   2bb12:	e77f      	b.n	2ba14 <security_create+0x40>
		LOG_ERR("Can not create instance - "
   2bb14:	2301      	movs	r3, #1
   2bb16:	f04f 0200 	mov.w	r2, #0
   2bb1a:	4907      	ldr	r1, [pc, #28]	; (2bb38 <security_create+0x164>)
   2bb1c:	f363 0207 	bfi	r2, r3, #0, #8
   2bb20:	4b06      	ldr	r3, [pc, #24]	; (2bb3c <security_create+0x168>)
   2bb22:	1a5b      	subs	r3, r3, r1
   2bb24:	08db      	lsrs	r3, r3, #3
   2bb26:	4601      	mov	r1, r0
   2bb28:	f363 128f 	bfi	r2, r3, #6, #10
   2bb2c:	480a      	ldr	r0, [pc, #40]	; (2bb58 <security_create+0x184>)
   2bb2e:	e76a      	b.n	2ba06 <security_create+0x32>
   2bb30:	20023604 	.word	0x20023604
   2bb34:	20032b24 	.word	0x20032b24
   2bb38:	00045f08 	.word	0x00045f08
   2bb3c:	00046048 	.word	0x00046048
   2bb40:	0004b8a4 	.word	0x0004b8a4
   2bb44:	20023614 	.word	0x20023614
   2bb48:	20029840 	.word	0x20029840
   2bb4c:	2002374c 	.word	0x2002374c
   2bb50:	2002a0c6 	.word	0x2002a0c6
   2bb54:	20029fa5 	.word	0x20029fa5
   2bb58:	0004b8d3 	.word	0x0004b8d3
   2bb5c:	20029fc7 	.word	0x20029fc7
   2bb60:	20029f25 	.word	0x20029f25
   2bb64:	20029f24 	.word	0x20029f24
   2bb68:	20029fc6 	.word	0x20029fc6

0002bb6c <lwm2m_security_inst_id_to_index>:
		if (inst[i].obj && inst[i].obj_inst_id == obj_inst_id) {
   2bb6c:	4b06      	ldr	r3, [pc, #24]	; (2bb88 <lwm2m_security_inst_id_to_index+0x1c>)
   2bb6e:	685a      	ldr	r2, [r3, #4]
   2bb70:	b132      	cbz	r2, 2bb80 <lwm2m_security_inst_id_to_index+0x14>
   2bb72:	899b      	ldrh	r3, [r3, #12]
   2bb74:	4283      	cmp	r3, r0
   2bb76:	bf14      	ite	ne
   2bb78:	f06f 0001 	mvnne.w	r0, #1
   2bb7c:	2000      	moveq	r0, #0
   2bb7e:	4770      	bx	lr
	return -ENOENT;
   2bb80:	f06f 0001 	mvn.w	r0, #1
}
   2bb84:	4770      	bx	lr
   2bb86:	bf00      	nop
   2bb88:	20023604 	.word	0x20023604

0002bb8c <lwm2m_security_index_to_inst_id>:
	if (index >= MAX_INSTANCE_COUNT) {
   2bb8c:	2800      	cmp	r0, #0
   2bb8e:	dc06      	bgt.n	2bb9e <lwm2m_security_index_to_inst_id+0x12>
	if (!inst[index].obj) {
   2bb90:	4b06      	ldr	r3, [pc, #24]	; (2bbac <lwm2m_security_index_to_inst_id+0x20>)
   2bb92:	eb03 1000 	add.w	r0, r3, r0, lsl #4
   2bb96:	6843      	ldr	r3, [r0, #4]
   2bb98:	b123      	cbz	r3, 2bba4 <lwm2m_security_index_to_inst_id+0x18>
	return inst[index].obj_inst_id;
   2bb9a:	8980      	ldrh	r0, [r0, #12]
   2bb9c:	4770      	bx	lr
		return -EINVAL;
   2bb9e:	f06f 0015 	mvn.w	r0, #21
   2bba2:	4770      	bx	lr
		return -ENOENT;
   2bba4:	f06f 0001 	mvn.w	r0, #1
}
   2bba8:	4770      	bx	lr
   2bbaa:	bf00      	nop
   2bbac:	20023604 	.word	0x20023604

0002bbb0 <disable_cb>:
{
	int i;

	LOG_DBG("DISABLE %d", obj_inst_id);
	for (i = 0; i < MAX_INSTANCE_COUNT; i++) {
		if (inst[i].obj && inst[i].obj_inst_id == obj_inst_id) {
   2bbb0:	4b06      	ldr	r3, [pc, #24]	; (2bbcc <disable_cb+0x1c>)
   2bbb2:	685a      	ldr	r2, [r3, #4]
   2bbb4:	b132      	cbz	r2, 2bbc4 <disable_cb+0x14>
   2bbb6:	899b      	ldrh	r3, [r3, #12]
   2bbb8:	4283      	cmp	r3, r0
			server_flag_disabled[i] = 1U;
			return 0;
   2bbba:	bf14      	ite	ne
   2bbbc:	f06f 0001 	mvnne.w	r0, #1
   2bbc0:	2000      	moveq	r0, #0
   2bbc2:	4770      	bx	lr
		}
	}

	return -ENOENT;
   2bbc4:	f06f 0001 	mvn.w	r0, #1
}
   2bbc8:	4770      	bx	lr
   2bbca:	bf00      	nop
   2bbcc:	20023814 	.word	0x20023814

0002bbd0 <lwm2m_server_init>:
	LOG_DBG("Create LWM2M server instance: %d", obj_inst_id);
	return &inst[index];
}

static int lwm2m_server_init(struct device *dev)
{
   2bbd0:	b537      	push	{r0, r1, r2, r4, r5, lr}
	int ret = 0;

	server.obj_id = LWM2M_OBJECT_SERVER_ID;
	server.fields = fields;
	server.field_count = ARRAY_SIZE(fields);
	server.max_instance_count = MAX_INSTANCE_COUNT;
   2bbd2:	2401      	movs	r4, #1
	struct lwm2m_engine_obj_inst *obj_inst = NULL;
   2bbd4:	2500      	movs	r5, #0
	server.fields = fields;
   2bbd6:	4814      	ldr	r0, [pc, #80]	; (2bc28 <lwm2m_server_init+0x58>)
   2bbd8:	4b14      	ldr	r3, [pc, #80]	; (2bc2c <lwm2m_server_init+0x5c>)
	server.max_instance_count = MAX_INSTANCE_COUNT;
   2bbda:	83c4      	strh	r4, [r0, #30]
	server.fields = fields;
   2bbdc:	6043      	str	r3, [r0, #4]
	server.obj_id = LWM2M_OBJECT_SERVER_ID;
   2bbde:	4b14      	ldr	r3, [pc, #80]	; (2bc30 <lwm2m_server_init+0x60>)
	struct lwm2m_engine_obj_inst *obj_inst = NULL;
   2bbe0:	9501      	str	r5, [sp, #4]
	server.obj_id = LWM2M_OBJECT_SERVER_ID;
   2bbe2:	6183      	str	r3, [r0, #24]
	server.create_cb = server_create;
   2bbe4:	4b13      	ldr	r3, [pc, #76]	; (2bc34 <lwm2m_server_init+0x64>)
   2bbe6:	6083      	str	r3, [r0, #8]
	lwm2m_register_obj(&server);
   2bbe8:	f7fc fc98 	bl	2851c <lwm2m_register_obj>

	/* auto create the first instance */
	ret = lwm2m_create_obj_inst(LWM2M_OBJECT_SERVER_ID, 0, &obj_inst);
   2bbec:	4620      	mov	r0, r4
   2bbee:	aa01      	add	r2, sp, #4
   2bbf0:	4629      	mov	r1, r5
   2bbf2:	f7fc ffb7 	bl	28b64 <lwm2m_create_obj_inst>
	if (ret < 0) {
   2bbf6:	1e04      	subs	r4, r0, #0
   2bbf8:	da12      	bge.n	2bc20 <lwm2m_server_init+0x50>
		LOG_ERR("Create LWM2M server instance 0 error: %d", ret);
   2bbfa:	4b0f      	ldr	r3, [pc, #60]	; (2bc38 <lwm2m_server_init+0x68>)
   2bbfc:	681b      	ldr	r3, [r3, #0]
   2bbfe:	075b      	lsls	r3, r3, #29
   2bc00:	d00e      	beq.n	2bc20 <lwm2m_server_init+0x50>
   2bc02:	2301      	movs	r3, #1
   2bc04:	f04f 0200 	mov.w	r2, #0
   2bc08:	490c      	ldr	r1, [pc, #48]	; (2bc3c <lwm2m_server_init+0x6c>)
   2bc0a:	f363 0207 	bfi	r2, r3, #0, #8
   2bc0e:	4b0c      	ldr	r3, [pc, #48]	; (2bc40 <lwm2m_server_init+0x70>)
   2bc10:	480c      	ldr	r0, [pc, #48]	; (2bc44 <lwm2m_server_init+0x74>)
   2bc12:	1a5b      	subs	r3, r3, r1
   2bc14:	08db      	lsrs	r3, r3, #3
   2bc16:	f363 128f 	bfi	r2, r3, #6, #10
   2bc1a:	4621      	mov	r1, r4
   2bc1c:	f014 ff1e 	bl	40a5c <log_1>
	}

	return ret;
}
   2bc20:	4620      	mov	r0, r4
   2bc22:	b003      	add	sp, #12
   2bc24:	bd30      	pop	{r4, r5, pc}
   2bc26:	bf00      	nop
   2bc28:	20023954 	.word	0x20023954
   2bc2c:	200326e0 	.word	0x200326e0
   2bc30:	00090001 	.word	0x00090001
   2bc34:	0002bc49 	.word	0x0002bc49
   2bc38:	20032b28 	.word	0x20032b28
   2bc3c:	00045f08 	.word	0x00045f08
   2bc40:	00046050 	.word	0x00046050
   2bc44:	0004b915 	.word	0x0004b915

0002bc48 <server_create>:
{
   2bc48:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
		if (inst[index].obj && inst[index].obj_inst_id == obj_inst_id) {
   2bc4c:	4e5a      	ldr	r6, [pc, #360]	; (2bdb8 <server_create+0x170>)
   2bc4e:	f8d6 8004 	ldr.w	r8, [r6, #4]
   2bc52:	f1b8 0f00 	cmp.w	r8, #0
   2bc56:	d01e      	beq.n	2bc96 <server_create+0x4e>
   2bc58:	89b1      	ldrh	r1, [r6, #12]
   2bc5a:	4b58      	ldr	r3, [pc, #352]	; (2bdbc <server_create+0x174>)
   2bc5c:	4281      	cmp	r1, r0
			LOG_ERR("Can not create instance - "
   2bc5e:	681e      	ldr	r6, [r3, #0]
		if (inst[index].obj && inst[index].obj_inst_id == obj_inst_id) {
   2bc60:	d112      	bne.n	2bc88 <server_create+0x40>
			LOG_ERR("Can not create instance - "
   2bc62:	f016 0607 	ands.w	r6, r6, #7
   2bc66:	d013      	beq.n	2bc90 <server_create+0x48>
   2bc68:	2301      	movs	r3, #1
   2bc6a:	f04f 0200 	mov.w	r2, #0
   2bc6e:	4854      	ldr	r0, [pc, #336]	; (2bdc0 <server_create+0x178>)
   2bc70:	f363 0207 	bfi	r2, r3, #0, #8
   2bc74:	4b53      	ldr	r3, [pc, #332]	; (2bdc4 <server_create+0x17c>)
   2bc76:	1a1b      	subs	r3, r3, r0
   2bc78:	08db      	lsrs	r3, r3, #3
   2bc7a:	4853      	ldr	r0, [pc, #332]	; (2bdc8 <server_create+0x180>)
   2bc7c:	f363 128f 	bfi	r2, r3, #6, #10
		LOG_ERR("Can not create instance - "
   2bc80:	f014 feec 	bl	40a5c <log_1>
		return NULL;
   2bc84:	2600      	movs	r6, #0
   2bc86:	e003      	b.n	2bc90 <server_create+0x48>
		LOG_ERR("Can not create instance - "
   2bc88:	f016 0607 	ands.w	r6, r6, #7
   2bc8c:	f040 8085 	bne.w	2bd9a <server_create+0x152>
}
   2bc90:	4630      	mov	r0, r6
   2bc92:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	lifetime[index] = CONFIG_LWM2M_ENGINE_DEFAULT_LIFETIME;
   2bc96:	221e      	movs	r2, #30
   2bc98:	f8df b15c 	ldr.w	fp, [pc, #348]	; 2bdf8 <server_create+0x1b0>
	server_id[index] = index + 1;
   2bc9c:	2701      	movs	r7, #1
	lifetime[index] = CONFIG_LWM2M_ENGINE_DEFAULT_LIFETIME;
   2bc9e:	f8cb 2000 	str.w	r2, [fp]
	default_max_period[index] = CONFIG_LWM2M_SERVER_DEFAULT_PMAX;
   2bca2:	f44f 7296 	mov.w	r2, #300	; 0x12c
   2bca6:	f8df 9154 	ldr.w	r9, [pc, #340]	; 2bdfc <server_create+0x1b4>
	server_flag_store_notify[index] = 0U;
   2bcaa:	4b48      	ldr	r3, [pc, #288]	; (2bdcc <server_create+0x184>)
	default_max_period[index] = CONFIG_LWM2M_SERVER_DEFAULT_PMAX;
   2bcac:	f8c9 2000 	str.w	r2, [r9]
	disabled_timeout[index] = 86400U;
   2bcb0:	4947      	ldr	r1, [pc, #284]	; (2bdd0 <server_create+0x188>)
   2bcb2:	4a48      	ldr	r2, [pc, #288]	; (2bdd4 <server_create+0x18c>)
	(void)memset(res[index], 0,
   2bcb4:	4c48      	ldr	r4, [pc, #288]	; (2bdd8 <server_create+0x190>)
	server_flag_store_notify[index] = 0U;
   2bcb6:	f883 8000 	strb.w	r8, [r3]
	default_min_period[index] = CONFIG_LWM2M_SERVER_DEFAULT_PMIN;
   2bcba:	f8df a144 	ldr.w	sl, [pc, #324]	; 2be00 <server_create+0x1b8>
	server_id[index] = index + 1;
   2bcbe:	4b47      	ldr	r3, [pc, #284]	; (2bddc <server_create+0x194>)
	memset(ri, 0, sizeof(*ri) * ri_len);
   2bcc0:	4d47      	ldr	r5, [pc, #284]	; (2bde0 <server_create+0x198>)
	disabled_timeout[index] = 86400U;
   2bcc2:	600a      	str	r2, [r1, #0]
	strcpy(transport_binding[index], "U");
   2bcc4:	4847      	ldr	r0, [pc, #284]	; (2bde4 <server_create+0x19c>)
   2bcc6:	4948      	ldr	r1, [pc, #288]	; (2bde8 <server_create+0x1a0>)
	server_id[index] = index + 1;
   2bcc8:	801f      	strh	r7, [r3, #0]
	default_min_period[index] = CONFIG_LWM2M_SERVER_DEFAULT_PMIN;
   2bcca:	f8ca 7000 	str.w	r7, [sl]
	strcpy(transport_binding[index], "U");
   2bcce:	f019 fa3f 	bl	45150 <strcpy>
	(void)memset(res[index], 0,
   2bcd2:	22d8      	movs	r2, #216	; 0xd8
   2bcd4:	4641      	mov	r1, r8
   2bcd6:	4620      	mov	r0, r4
   2bcd8:	f019 f8f4 	bl	44ec4 <memset>
   2bcdc:	224c      	movs	r2, #76	; 0x4c
   2bcde:	4641      	mov	r1, r8
   2bce0:	f105 0008 	add.w	r0, r5, #8
   2bce4:	f019 f8ee 	bl	44ec4 <memset>
	INIT_OBJ_RES_DATA(SERVER_SHORT_SERVER_ID, res[index], i,
   2bce8:	2202      	movs	r2, #2
   2bcea:	606a      	str	r2, [r5, #4]
	INIT_OBJ_RES_DATA(SERVER_DEFAULT_MIN_PERIOD_ID, res[index], i,
   2bcec:	f8a4 2044 	strh.w	r2, [r4, #68]	; 0x44
   2bcf0:	f105 0218 	add.w	r2, r5, #24
   2bcf4:	6422      	str	r2, [r4, #64]	; 0x40
	INIT_OBJ_RES_DATA(SERVER_DEFAULT_MAX_PERIOD_ID, res[index], i,
   2bcf6:	2203      	movs	r2, #3
   2bcf8:	f8a4 205c 	strh.w	r2, [r4, #92]	; 0x5c
   2bcfc:	f105 0224 	add.w	r2, r5, #36	; 0x24
   2bd00:	65a2      	str	r2, [r4, #88]	; 0x58
	INIT_OBJ_RES_EXECUTE(SERVER_DISABLE_ID, res[index], i, disable_cb);
   2bd02:	4a3a      	ldr	r2, [pc, #232]	; (2bdec <server_create+0x1a4>)
	INIT_OBJ_RES_DATA(SERVER_SHORT_SERVER_ID, res[index], i,
   2bd04:	4b35      	ldr	r3, [pc, #212]	; (2bddc <server_create+0x194>)
	INIT_OBJ_RES_EXECUTE(SERVER_DISABLE_ID, res[index], i, disable_cb);
   2bd06:	66e2      	str	r2, [r4, #108]	; 0x6c
	INIT_OBJ_RES_DATA(SERVER_DISABLE_TIMEOUT_ID, res[index], i,
   2bd08:	2205      	movs	r2, #5
   2bd0a:	f8a4 208c 	strh.w	r2, [r4, #140]	; 0x8c
   2bd0e:	f105 0230 	add.w	r2, r5, #48	; 0x30
   2bd12:	f8c4 2088 	str.w	r2, [r4, #136]	; 0x88
	INIT_OBJ_RES_DATA(SERVER_STORE_NOTIFY_ID, res[index], i,
   2bd16:	2206      	movs	r2, #6
   2bd18:	f8a4 20a4 	strh.w	r2, [r4, #164]	; 0xa4
   2bd1c:	f105 023c 	add.w	r2, r5, #60	; 0x3c
   2bd20:	f8c4 20a0 	str.w	r2, [r4, #160]	; 0xa0
   2bd24:	4a29      	ldr	r2, [pc, #164]	; (2bdcc <server_create+0x184>)
	INIT_OBJ_RES_DATA(SERVER_SHORT_SERVER_ID, res[index], i,
   2bd26:	602b      	str	r3, [r5, #0]
	INIT_OBJ_RES_DATA(SERVER_STORE_NOTIFY_ID, res[index], i,
   2bd28:	63ea      	str	r2, [r5, #60]	; 0x3c
	INIT_OBJ_RES_DATA(SERVER_LIFETIME_ID, res[index], i,
   2bd2a:	f105 030c 	add.w	r3, r5, #12
	INIT_OBJ_RES_DATA(SERVER_TRANSPORT_BINDING_ID, res[index], i,
   2bd2e:	2207      	movs	r2, #7
	INIT_OBJ_RES_DATA(SERVER_LIFETIME_ID, res[index], i,
   2bd30:	62a3      	str	r3, [r4, #40]	; 0x28
   2bd32:	2304      	movs	r3, #4
	INIT_OBJ_RES_DATA(SERVER_DISABLE_TIMEOUT_ID, res[index], i,
   2bd34:	4926      	ldr	r1, [pc, #152]	; (2bdd0 <server_create+0x188>)
	INIT_OBJ_RES_DATA(SERVER_TRANSPORT_BINDING_ID, res[index], i,
   2bd36:	f8a4 20bc 	strh.w	r2, [r4, #188]	; 0xbc
   2bd3a:	f105 0248 	add.w	r2, r5, #72	; 0x48
	INIT_OBJ_RES_DATA(SERVER_LIFETIME_ID, res[index], i,
   2bd3e:	822b      	strh	r3, [r5, #16]
	INIT_OBJ_RES_DATA(SERVER_DEFAULT_MIN_PERIOD_ID, res[index], i,
   2bd40:	83ab      	strh	r3, [r5, #28]
	INIT_OBJ_RES_DATA(SERVER_DEFAULT_MAX_PERIOD_ID, res[index], i,
   2bd42:	852b      	strh	r3, [r5, #40]	; 0x28
	INIT_OBJ_RES_EXECUTE(SERVER_DISABLE_ID, res[index], i, disable_cb);
   2bd44:	f8a4 3074 	strh.w	r3, [r4, #116]	; 0x74
	INIT_OBJ_RES_DATA(SERVER_DISABLE_TIMEOUT_ID, res[index], i,
   2bd48:	86ab      	strh	r3, [r5, #52]	; 0x34
	INIT_OBJ_RES_DATA(SERVER_SHORT_SERVER_ID, res[index], i,
   2bd4a:	6125      	str	r5, [r4, #16]
   2bd4c:	75a7      	strb	r7, [r4, #22]
	INIT_OBJ_RES_DATA(SERVER_LIFETIME_ID, res[index], i,
   2bd4e:	85a7      	strh	r7, [r4, #44]	; 0x2c
   2bd50:	f884 702e 	strb.w	r7, [r4, #46]	; 0x2e
   2bd54:	f8c5 b00c 	str.w	fp, [r5, #12]
	INIT_OBJ_RES_DATA(SERVER_DEFAULT_MIN_PERIOD_ID, res[index], i,
   2bd58:	f884 7046 	strb.w	r7, [r4, #70]	; 0x46
   2bd5c:	f8c5 a018 	str.w	sl, [r5, #24]
	INIT_OBJ_RES_DATA(SERVER_DEFAULT_MAX_PERIOD_ID, res[index], i,
   2bd60:	f884 705e 	strb.w	r7, [r4, #94]	; 0x5e
   2bd64:	f8c5 9024 	str.w	r9, [r5, #36]	; 0x24
	INIT_OBJ_RES_DATA(SERVER_DISABLE_TIMEOUT_ID, res[index], i,
   2bd68:	f884 708e 	strb.w	r7, [r4, #142]	; 0x8e
   2bd6c:	6329      	str	r1, [r5, #48]	; 0x30
	INIT_OBJ_RES_DATA(SERVER_STORE_NOTIFY_ID, res[index], i,
   2bd6e:	f884 70a6 	strb.w	r7, [r4, #166]	; 0xa6
   2bd72:	f8a5 7040 	strh.w	r7, [r5, #64]	; 0x40
	INIT_OBJ_RES_DATA(SERVER_TRANSPORT_BINDING_ID, res[index], i,
   2bd76:	f8c4 20b8 	str.w	r2, [r4, #184]	; 0xb8
   2bd7a:	f8a5 304c 	strh.w	r3, [r5, #76]	; 0x4c
	INIT_OBJ_RES_EXECUTE(SERVER_REG_UPDATE_TRIGGER_ID, res[index], i,
   2bd7e:	2308      	movs	r3, #8
   2bd80:	f8a4 30d4 	strh.w	r3, [r4, #212]	; 0xd4
   2bd84:	4b1a      	ldr	r3, [pc, #104]	; (2bdf0 <server_create+0x1a8>)
	INIT_OBJ_RES_DATA(SERVER_TRANSPORT_BINDING_ID, res[index], i,
   2bd86:	4a17      	ldr	r2, [pc, #92]	; (2bde4 <server_create+0x19c>)
	INIT_OBJ_RES_EXECUTE(SERVER_REG_UPDATE_TRIGGER_ID, res[index], i,
   2bd88:	f8c4 30cc 	str.w	r3, [r4, #204]	; 0xcc
	inst[index].resource_count = i;
   2bd8c:	2309      	movs	r3, #9
	INIT_OBJ_RES_DATA(SERVER_TRANSPORT_BINDING_ID, res[index], i,
   2bd8e:	f884 70be 	strb.w	r7, [r4, #190]	; 0xbe
   2bd92:	64aa      	str	r2, [r5, #72]	; 0x48
	inst[index].resources = res[index];
   2bd94:	60b4      	str	r4, [r6, #8]
	inst[index].resource_count = i;
   2bd96:	81f3      	strh	r3, [r6, #14]
	return &inst[index];
   2bd98:	e77a      	b.n	2bc90 <server_create+0x48>
		LOG_ERR("Can not create instance - "
   2bd9a:	2301      	movs	r3, #1
   2bd9c:	f04f 0200 	mov.w	r2, #0
   2bda0:	4907      	ldr	r1, [pc, #28]	; (2bdc0 <server_create+0x178>)
   2bda2:	f363 0207 	bfi	r2, r3, #0, #8
   2bda6:	4b07      	ldr	r3, [pc, #28]	; (2bdc4 <server_create+0x17c>)
   2bda8:	1a5b      	subs	r3, r3, r1
   2bdaa:	08db      	lsrs	r3, r3, #3
   2bdac:	4601      	mov	r1, r0
   2bdae:	f363 128f 	bfi	r2, r3, #6, #10
   2bdb2:	4810      	ldr	r0, [pc, #64]	; (2bdf4 <server_create+0x1ac>)
   2bdb4:	e764      	b.n	2bc80 <server_create+0x38>
   2bdb6:	bf00      	nop
   2bdb8:	20023814 	.word	0x20023814
   2bdbc:	20032b28 	.word	0x20032b28
   2bdc0:	00045f08 	.word	0x00045f08
   2bdc4:	00046050 	.word	0x00046050
   2bdc8:	0004b8a4 	.word	0x0004b8a4
   2bdcc:	2002a0e7 	.word	0x2002a0e7
   2bdd0:	20023810 	.word	0x20023810
   2bdd4:	00015180 	.word	0x00015180
   2bdd8:	20023828 	.word	0x20023828
   2bddc:	20029842 	.word	0x20029842
   2bde0:	20023900 	.word	0x20023900
   2bde4:	2002a0e8 	.word	0x2002a0e8
   2bde8:	0004d30e 	.word	0x0004d30e
   2bdec:	0002bbb1 	.word	0x0002bbb1
   2bdf0:	000431a1 	.word	0x000431a1
   2bdf4:	0004b8d3 	.word	0x0004b8d3
   2bdf8:	20023824 	.word	0x20023824
   2bdfc:	20023808 	.word	0x20023808
   2be00:	2002380c 	.word	0x2002380c

0002be04 <lwm2m_server_get_pmin>:
		if (inst[i].obj && inst[i].obj_inst_id == obj_inst_id) {
   2be04:	4b05      	ldr	r3, [pc, #20]	; (2be1c <lwm2m_server_get_pmin+0x18>)
   2be06:	685a      	ldr	r2, [r3, #4]
   2be08:	b12a      	cbz	r2, 2be16 <lwm2m_server_get_pmin+0x12>
   2be0a:	899b      	ldrh	r3, [r3, #12]
   2be0c:	4283      	cmp	r3, r0
   2be0e:	d102      	bne.n	2be16 <lwm2m_server_get_pmin+0x12>
			return data[i];
   2be10:	4b03      	ldr	r3, [pc, #12]	; (2be20 <lwm2m_server_get_pmin+0x1c>)
   2be12:	6818      	ldr	r0, [r3, #0]
   2be14:	4770      	bx	lr
	return default_value;
   2be16:	2001      	movs	r0, #1
}
   2be18:	4770      	bx	lr
   2be1a:	bf00      	nop
   2be1c:	20023814 	.word	0x20023814
   2be20:	2002380c 	.word	0x2002380c

0002be24 <lwm2m_server_get_pmax>:
		if (inst[i].obj && inst[i].obj_inst_id == obj_inst_id) {
   2be24:	4b05      	ldr	r3, [pc, #20]	; (2be3c <lwm2m_server_get_pmax+0x18>)
   2be26:	685a      	ldr	r2, [r3, #4]
   2be28:	b12a      	cbz	r2, 2be36 <lwm2m_server_get_pmax+0x12>
   2be2a:	899b      	ldrh	r3, [r3, #12]
   2be2c:	4283      	cmp	r3, r0
   2be2e:	d102      	bne.n	2be36 <lwm2m_server_get_pmax+0x12>
			return data[i];
   2be30:	4b03      	ldr	r3, [pc, #12]	; (2be40 <lwm2m_server_get_pmax+0x1c>)
   2be32:	6818      	ldr	r0, [r3, #0]
   2be34:	4770      	bx	lr
	return default_value;
   2be36:	f44f 7096 	mov.w	r0, #300	; 0x12c
}
   2be3a:	4770      	bx	lr
   2be3c:	20023814 	.word	0x20023814
   2be40:	20023808 	.word	0x20023808

0002be44 <reset_error_list_cb>:
static struct lwm2m_engine_res_inst *error_code_ri;

/* callbacks */

static int reset_error_list_cb(u16_t obj_inst_id)
{
   2be44:	b510      	push	{r4, lr}
	int i;

	/* "delete" error codes */
	for (i = 0; i < DEVICE_ERROR_CODE_MAX; i++) {
		error_code_list[i] = 0;
		error_code_ri[i].res_inst_id = RES_INSTANCE_NOT_CREATED;
   2be46:	f64f 70ff 	movw	r0, #65535	; 0xffff
		error_code_list[i] = 0;
   2be4a:	2400      	movs	r4, #0
		error_code_ri[i].res_inst_id = RES_INSTANCE_NOT_CREATED;
   2be4c:	4b06      	ldr	r3, [pc, #24]	; (2be68 <reset_error_list_cb+0x24>)
   2be4e:	4a07      	ldr	r2, [pc, #28]	; (2be6c <reset_error_list_cb+0x28>)
   2be50:	681b      	ldr	r3, [r3, #0]
   2be52:	f103 0178 	add.w	r1, r3, #120	; 0x78
		error_code_list[i] = 0;
   2be56:	f802 4b01 	strb.w	r4, [r2], #1
		error_code_ri[i].res_inst_id = RES_INSTANCE_NOT_CREATED;
   2be5a:	330c      	adds	r3, #12
   2be5c:	f823 0c06 	strh.w	r0, [r3, #-6]
	for (i = 0; i < DEVICE_ERROR_CODE_MAX; i++) {
   2be60:	428b      	cmp	r3, r1
   2be62:	d1f8      	bne.n	2be56 <reset_error_list_cb+0x12>
	}

	return 0;
}
   2be64:	2000      	movs	r0, #0
   2be66:	bd10      	pop	{r4, pc}
   2be68:	20023994 	.word	0x20023994
   2be6c:	2002a0f4 	.word	0x2002a0f4

0002be70 <current_time_pre_write_cb>:
}

static void *current_time_pre_write_cb(u16_t obj_inst_id, u16_t res_id,
				       u16_t res_inst_id, size_t *data_len)
{
	*data_len = sizeof(time_temp);
   2be70:	2204      	movs	r2, #4
	return &time_temp;
}
   2be72:	4801      	ldr	r0, [pc, #4]	; (2be78 <current_time_pre_write_cb+0x8>)
	*data_len = sizeof(time_temp);
   2be74:	601a      	str	r2, [r3, #0]
}
   2be76:	4770      	bx	lr
   2be78:	20023dc0 	.word	0x20023dc0

0002be7c <lwm2m_device_init>:
	LOG_DBG("Create LWM2M device instance: %d", obj_inst_id);
	return &inst;
}

static int lwm2m_device_init(struct device *dev)
{
   2be7c:	b513      	push	{r0, r1, r4, lr}
	struct lwm2m_engine_obj_inst *obj_inst = NULL;
   2be7e:	2400      	movs	r4, #0
	int ret = 0;

	/* Set default values */
	time_offset = 0U;
   2be80:	4b0e      	ldr	r3, [pc, #56]	; (2bebc <lwm2m_device_init+0x40>)
	/* currently only support UDP binding mode (no SMS or Queue mode) */
	strcpy(binding_mode, "U");
   2be82:	490f      	ldr	r1, [pc, #60]	; (2bec0 <lwm2m_device_init+0x44>)
   2be84:	480f      	ldr	r0, [pc, #60]	; (2bec4 <lwm2m_device_init+0x48>)
	time_offset = 0U;
   2be86:	601c      	str	r4, [r3, #0]
	struct lwm2m_engine_obj_inst *obj_inst = NULL;
   2be88:	9401      	str	r4, [sp, #4]
	strcpy(binding_mode, "U");
   2be8a:	f019 f961 	bl	45150 <strcpy>

	/* initialize the device field data */
	device.obj_id = LWM2M_OBJECT_DEVICE_ID;
	device.fields = fields;
   2be8e:	480e      	ldr	r0, [pc, #56]	; (2bec8 <lwm2m_device_init+0x4c>)
   2be90:	4b0e      	ldr	r3, [pc, #56]	; (2becc <lwm2m_device_init+0x50>)
   2be92:	6043      	str	r3, [r0, #4]
	device.obj_id = LWM2M_OBJECT_DEVICE_ID;
   2be94:	4b0e      	ldr	r3, [pc, #56]	; (2bed0 <lwm2m_device_init+0x54>)
   2be96:	6183      	str	r3, [r0, #24]
	device.field_count = ARRAY_SIZE(fields);
	device.max_instance_count = 1U;
   2be98:	2301      	movs	r3, #1
   2be9a:	83c3      	strh	r3, [r0, #30]
	device.create_cb = device_create;
   2be9c:	4b0d      	ldr	r3, [pc, #52]	; (2bed4 <lwm2m_device_init+0x58>)
   2be9e:	6083      	str	r3, [r0, #8]
	lwm2m_register_obj(&device);
   2bea0:	f7fc fb3c 	bl	2851c <lwm2m_register_obj>

	/* auto create the only instance */
	ret = lwm2m_create_obj_inst(LWM2M_OBJECT_DEVICE_ID, 0, &obj_inst);
   2bea4:	aa01      	add	r2, sp, #4
   2bea6:	4621      	mov	r1, r4
   2bea8:	2003      	movs	r0, #3
   2beaa:	f7fc fe5b 	bl	28b64 <lwm2m_create_obj_inst>
	if (ret < 0) {
		LOG_DBG("Create LWM2M instance 0 error: %d", ret);
	}

	/* call device_periodic_service() every 10 seconds */
	ret = lwm2m_engine_add_service(device_periodic_service,
   2beae:	f242 7110 	movw	r1, #10000	; 0x2710
   2beb2:	4809      	ldr	r0, [pc, #36]	; (2bed8 <lwm2m_device_init+0x5c>)
   2beb4:	f7ff fa72 	bl	2b39c <lwm2m_engine_add_service>
				       DEVICE_SERVICE_INTERVAL);
	return ret;
}
   2beb8:	b002      	add	sp, #8
   2beba:	bd10      	pop	{r4, pc}
   2bebc:	20023dbc 	.word	0x20023dbc
   2bec0:	0004d30e 	.word	0x0004d30e
   2bec4:	2002a0ec 	.word	0x2002a0ec
   2bec8:	20023974 	.word	0x20023974
   2becc:	20032704 	.word	0x20032704
   2bed0:	00170003 	.word	0x00170003
   2bed4:	0002bf09 	.word	0x0002bf09
   2bed8:	000431ab 	.word	0x000431ab

0002bedc <current_time_read_cb>:
{
   2bedc:	b538      	push	{r3, r4, r5, lr}
   2bede:	461d      	mov	r5, r3
	return z_impl_k_uptime_get();
   2bee0:	f018 feef 	bl	44cc2 <z_impl_k_uptime_get>
	time_temp = time_offset + (k_uptime_get() / 1000);
   2bee4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   2bee8:	2300      	movs	r3, #0
   2beea:	f7f0 ff27 	bl	1cd3c <__aeabi_ldivmod>
   2beee:	4b04      	ldr	r3, [pc, #16]	; (2bf00 <current_time_read_cb+0x24>)
   2bef0:	4c04      	ldr	r4, [pc, #16]	; (2bf04 <current_time_read_cb+0x28>)
   2bef2:	681b      	ldr	r3, [r3, #0]
   2bef4:	4418      	add	r0, r3
	*data_len = sizeof(time_temp);
   2bef6:	2304      	movs	r3, #4
	time_temp = time_offset + (k_uptime_get() / 1000);
   2bef8:	6020      	str	r0, [r4, #0]
	*data_len = sizeof(time_temp);
   2befa:	602b      	str	r3, [r5, #0]
}
   2befc:	4620      	mov	r0, r4
   2befe:	bd38      	pop	{r3, r4, r5, pc}
   2bf00:	20023dbc 	.word	0x20023dbc
   2bf04:	20023dc0 	.word	0x20023dc0

0002bf08 <device_create>:
{
   2bf08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2bf0a:	4cb4      	ldr	r4, [pc, #720]	; (2c1dc <device_create+0x2d4>)
   2bf0c:	f44f 72f6 	mov.w	r2, #492	; 0x1ec
   2bf10:	2100      	movs	r1, #0
   2bf12:	48b2      	ldr	r0, [pc, #712]	; (2c1dc <device_create+0x2d4>)
   2bf14:	f018 ffd6 	bl	44ec4 <memset>
   2bf18:	4622      	mov	r2, r4
   2bf1a:	2300      	movs	r3, #0
   2bf1c:	4621      	mov	r1, r4
		ri[i].res_inst_id = RES_INSTANCE_NOT_CREATED;
   2bf1e:	f64f 70ff 	movw	r0, #65535	; 0xffff
	for (i = 0; i < ri_len; i++) {
   2bf22:	3301      	adds	r3, #1
   2bf24:	2b29      	cmp	r3, #41	; 0x29
		ri[i].res_inst_id = RES_INSTANCE_NOT_CREATED;
   2bf26:	80d0      	strh	r0, [r2, #6]
   2bf28:	f102 020c 	add.w	r2, r2, #12
	for (i = 0; i < ri_len; i++) {
   2bf2c:	d1f9      	bne.n	2bf22 <device_create+0x1a>
	INIT_OBJ_RES_OPTDATA(DEVICE_SERIAL_NUMBER_ID, res, i, res_inst, j);
   2bf2e:	2602      	movs	r6, #2
	INIT_OBJ_RES_OPTDATA(DEVICE_MANUFACTURER_ID, res, i, res_inst, j);
   2bf30:	2501      	movs	r5, #1
   2bf32:	4bab      	ldr	r3, [pc, #684]	; (2c1e0 <device_create+0x2d8>)
	INIT_OBJ_RES_OPTDATA(DEVICE_MODEL_NUMBER_ID, res, i, res_inst, j);
   2bf34:	48ab      	ldr	r0, [pc, #684]	; (2c1e4 <device_create+0x2dc>)
	INIT_OBJ_RES_OPTDATA(DEVICE_SERIAL_NUMBER_ID, res, i, res_inst, j);
   2bf36:	f8a3 6044 	strh.w	r6, [r3, #68]	; 0x44
   2bf3a:	f100 060c 	add.w	r6, r0, #12
   2bf3e:	641e      	str	r6, [r3, #64]	; 0x40
	INIT_OBJ_RES_OPTDATA(DEVICE_FIRMWARE_VERSION_ID, res, i, res_inst, j);
   2bf40:	2603      	movs	r6, #3
	INIT_OBJ_RES_OPTDATA(DEVICE_MANUFACTURER_ID, res, i, res_inst, j);
   2bf42:	2200      	movs	r2, #0
   2bf44:	759d      	strb	r5, [r3, #22]
	INIT_OBJ_RES_OPTDATA(DEVICE_MODEL_NUMBER_ID, res, i, res_inst, j);
   2bf46:	859d      	strh	r5, [r3, #44]	; 0x2c
   2bf48:	f883 502e 	strb.w	r5, [r3, #46]	; 0x2e
	INIT_OBJ_RES_OPTDATA(DEVICE_SERIAL_NUMBER_ID, res, i, res_inst, j);
   2bf4c:	f883 5046 	strb.w	r5, [r3, #70]	; 0x46
	INIT_OBJ_RES_OPTDATA(DEVICE_FIRMWARE_VERSION_ID, res, i, res_inst, j);
   2bf50:	f883 505e 	strb.w	r5, [r3, #94]	; 0x5e
	INIT_OBJ_RES_EXECUTE(DEVICE_REBOOT_ID, res, i, NULL);
   2bf54:	2504      	movs	r5, #4
	INIT_OBJ_RES_OPTDATA(DEVICE_FIRMWARE_VERSION_ID, res, i, res_inst, j);
   2bf56:	f8a3 605c 	strh.w	r6, [r3, #92]	; 0x5c
   2bf5a:	f100 0618 	add.w	r6, r0, #24
   2bf5e:	659e      	str	r6, [r3, #88]	; 0x58
	INIT_OBJ_RES_MULTI_OPTDATA(DEVICE_AVAILABLE_POWER_SOURCES_ID, res, i,
   2bf60:	2606      	movs	r6, #6
	INIT_OBJ_RES_OPTDATA(DEVICE_MODEL_NUMBER_ID, res, i, res_inst, j);
   2bf62:	6298      	str	r0, [r3, #40]	; 0x28
	INIT_OBJ_RES_OPTDATA(DEVICE_MANUFACTURER_ID, res, i, res_inst, j);
   2bf64:	829a      	strh	r2, [r3, #20]
   2bf66:	6119      	str	r1, [r3, #16]
   2bf68:	e9c3 2200 	strd	r2, r2, [r3]
   2bf6c:	e9c3 2202 	strd	r2, r2, [r3, #8]
   2bf70:	80ca      	strh	r2, [r1, #6]
	INIT_OBJ_RES_OPTDATA(DEVICE_MODEL_NUMBER_ID, res, i, res_inst, j);
   2bf72:	e9c3 2206 	strd	r2, r2, [r3, #24]
   2bf76:	e9c3 2208 	strd	r2, r2, [r3, #32]
   2bf7a:	824a      	strh	r2, [r1, #18]
	INIT_OBJ_RES_OPTDATA(DEVICE_SERIAL_NUMBER_ID, res, i, res_inst, j);
   2bf7c:	e9c3 220c 	strd	r2, r2, [r3, #48]	; 0x30
   2bf80:	e9c3 220e 	strd	r2, r2, [r3, #56]	; 0x38
   2bf84:	83ca      	strh	r2, [r1, #30]
	INIT_OBJ_RES_OPTDATA(DEVICE_FIRMWARE_VERSION_ID, res, i, res_inst, j);
   2bf86:	e9c3 2212 	strd	r2, r2, [r3, #72]	; 0x48
   2bf8a:	e9c3 2214 	strd	r2, r2, [r3, #80]	; 0x50
   2bf8e:	854a      	strh	r2, [r1, #42]	; 0x2a
	INIT_OBJ_RES_EXECUTE(DEVICE_REBOOT_ID, res, i, NULL);
   2bf90:	f8a3 5074 	strh.w	r5, [r3, #116]	; 0x74
	INIT_OBJ_RES_EXECUTE(DEVICE_FACTORY_DEFAULT_ID, res, i, NULL);
   2bf94:	2505      	movs	r5, #5
	INIT_OBJ_RES_MULTI_OPTDATA(DEVICE_AVAILABLE_POWER_SOURCES_ID, res, i,
   2bf96:	f8a3 60a4 	strh.w	r6, [r3, #164]	; 0xa4
   2bf9a:	f100 0624 	add.w	r6, r0, #36	; 0x24
	INIT_OBJ_RES_EXECUTE(DEVICE_FACTORY_DEFAULT_ID, res, i, NULL);
   2bf9e:	f8a3 508c 	strh.w	r5, [r3, #140]	; 0x8c
	INIT_OBJ_RES_MULTI_OPTDATA(DEVICE_AVAILABLE_POWER_SOURCES_ID, res, i,
   2bfa2:	f8c3 60a0 	str.w	r6, [r3, #160]	; 0xa0
   2bfa6:	f883 50a6 	strb.w	r5, [r3, #166]	; 0xa6
   2bfaa:	f64f 76ff 	movw	r6, #65535	; 0xffff
   2bfae:	4615      	mov	r5, r2
	INIT_OBJ_RES_EXECUTE(DEVICE_REBOOT_ID, res, i, NULL);
   2bfb0:	e9c3 2218 	strd	r2, r2, [r3, #96]	; 0x60
   2bfb4:	e9c3 221a 	strd	r2, r2, [r3, #104]	; 0x68
	INIT_OBJ_RES_EXECUTE(DEVICE_FACTORY_DEFAULT_ID, res, i, NULL);
   2bfb8:	e9c3 221e 	strd	r2, r2, [r3, #120]	; 0x78
   2bfbc:	e9c3 2220 	strd	r2, r2, [r3, #128]	; 0x80
	INIT_OBJ_RES_MULTI_OPTDATA(DEVICE_AVAILABLE_POWER_SOURCES_ID, res, i,
   2bfc0:	e9c3 2224 	strd	r2, r2, [r3, #144]	; 0x90
   2bfc4:	e9c3 2226 	strd	r2, r2, [r3, #152]	; 0x98
	INIT_OBJ_RES_EXECUTE(DEVICE_REBOOT_ID, res, i, NULL);
   2bfc8:	671a      	str	r2, [r3, #112]	; 0x70
   2bfca:	f883 2076 	strb.w	r2, [r3, #118]	; 0x76
	INIT_OBJ_RES_EXECUTE(DEVICE_FACTORY_DEFAULT_ID, res, i, NULL);
   2bfce:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
   2bfd2:	f883 208e 	strb.w	r2, [r3, #142]	; 0x8e
	INIT_OBJ_RES_MULTI_OPTDATA(DEVICE_AVAILABLE_POWER_SOURCES_ID, res, i,
   2bfd6:	380c      	subs	r0, #12
   2bfd8:	3201      	adds	r2, #1
   2bfda:	2a05      	cmp	r2, #5
   2bfdc:	6305      	str	r5, [r0, #48]	; 0x30
   2bfde:	8685      	strh	r5, [r0, #52]	; 0x34
   2bfe0:	86c6      	strh	r6, [r0, #54]	; 0x36
   2bfe2:	f100 000c 	add.w	r0, r0, #12
   2bfe6:	d1f7      	bne.n	2bfd8 <device_create+0xd0>
	INIT_OBJ_RES_MULTI_OPTDATA(DEVICE_POWER_SOURCE_VOLTAGE_ID, res, i,
   2bfe8:	2007      	movs	r0, #7
   2bfea:	2600      	movs	r6, #0
   2bfec:	f8a3 00bc 	strh.w	r0, [r3, #188]	; 0xbc
   2bff0:	487d      	ldr	r0, [pc, #500]	; (2c1e8 <device_create+0x2e0>)
   2bff2:	f883 20be 	strb.w	r2, [r3, #190]	; 0xbe
   2bff6:	f8c3 00b8 	str.w	r0, [r3, #184]	; 0xb8
   2bffa:	e9c3 552a 	strd	r5, r5, [r3, #168]	; 0xa8
   2bffe:	e9c3 552c 	strd	r5, r5, [r3, #176]	; 0xb0
   2c002:	f1a0 026c 	sub.w	r2, r0, #108	; 0x6c
   2c006:	4635      	mov	r5, r6
   2c008:	f64f 70ff 	movw	r0, #65535	; 0xffff
   2c00c:	3601      	adds	r6, #1
   2c00e:	2e05      	cmp	r6, #5
   2c010:	66d5      	str	r5, [r2, #108]	; 0x6c
   2c012:	f8a2 5070 	strh.w	r5, [r2, #112]	; 0x70
   2c016:	f8a2 0072 	strh.w	r0, [r2, #114]	; 0x72
   2c01a:	f102 020c 	add.w	r2, r2, #12
   2c01e:	d1f5      	bne.n	2c00c <device_create+0x104>
	INIT_OBJ_RES_MULTI_OPTDATA(DEVICE_POWER_SOURCE_CURRENT_ID, res, i,
   2c020:	2208      	movs	r2, #8
   2c022:	e9c3 5530 	strd	r5, r5, [r3, #192]	; 0xc0
   2c026:	e9c3 5532 	strd	r5, r5, [r3, #200]	; 0xc8
   2c02a:	2500      	movs	r5, #0
   2c02c:	f8a3 20d4 	strh.w	r2, [r3, #212]	; 0xd4
   2c030:	f883 60d6 	strb.w	r6, [r3, #214]	; 0xd6
   2c034:	462a      	mov	r2, r5
   2c036:	f64f 76ff 	movw	r6, #65535	; 0xffff
   2c03a:	486c      	ldr	r0, [pc, #432]	; (2c1ec <device_create+0x2e4>)
   2c03c:	f8c3 00d0 	str.w	r0, [r3, #208]	; 0xd0
   2c040:	38a8      	subs	r0, #168	; 0xa8
   2c042:	3501      	adds	r5, #1
   2c044:	2d05      	cmp	r5, #5
   2c046:	f8c0 20a8 	str.w	r2, [r0, #168]	; 0xa8
   2c04a:	f8a0 20ac 	strh.w	r2, [r0, #172]	; 0xac
   2c04e:	f8a0 60ae 	strh.w	r6, [r0, #174]	; 0xae
   2c052:	f100 000c 	add.w	r0, r0, #12
   2c056:	d1f4      	bne.n	2c042 <device_create+0x13a>
	INIT_OBJ_RES_OPTDATA(DEVICE_BATTERY_LEVEL_ID, res, i, res_inst, j);
   2c058:	2009      	movs	r0, #9
   2c05a:	4d65      	ldr	r5, [pc, #404]	; (2c1f0 <device_create+0x2e8>)
	INIT_OBJ_RES_OPTDATA(DEVICE_MEMORY_FREE_ID, res, i, res_inst, j);
   2c05c:	260a      	movs	r6, #10
   2c05e:	f105 070c 	add.w	r7, r5, #12
   2c062:	f8c3 7100 	str.w	r7, [r3, #256]	; 0x100
	error_code_ri = &res_inst[j];
   2c066:	4f63      	ldr	r7, [pc, #396]	; (2c1f4 <device_create+0x2ec>)
	INIT_OBJ_RES_OPTDATA(DEVICE_BATTERY_LEVEL_ID, res, i, res_inst, j);
   2c068:	f8c3 50e8 	str.w	r5, [r3, #232]	; 0xe8
	error_code_ri = &res_inst[j];
   2c06c:	3518      	adds	r5, #24
   2c06e:	603d      	str	r5, [r7, #0]
	INIT_OBJ_RES_MULTI_DATA(DEVICE_ERROR_CODE_ID, res, i,
   2c070:	270b      	movs	r7, #11
	INIT_OBJ_RES_OPTDATA(DEVICE_BATTERY_LEVEL_ID, res, i, res_inst, j);
   2c072:	f8a3 00ec 	strh.w	r0, [r3, #236]	; 0xec
   2c076:	2001      	movs	r0, #1
   2c078:	e9c3 2236 	strd	r2, r2, [r3, #216]	; 0xd8
   2c07c:	e9c3 2238 	strd	r2, r2, [r3, #224]	; 0xe0
   2c080:	e9c1 2239 	strd	r2, r2, [r1, #228]	; 0xe4
	INIT_OBJ_RES_OPTDATA(DEVICE_MEMORY_FREE_ID, res, i, res_inst, j);
   2c084:	e9c3 223c 	strd	r2, r2, [r3, #240]	; 0xf0
   2c088:	e9c3 223e 	strd	r2, r2, [r3, #248]	; 0xf8
   2c08c:	e9c1 223c 	strd	r2, r2, [r1, #240]	; 0xf0
	INIT_OBJ_RES_MULTI_DATA(DEVICE_ERROR_CODE_ID, res, i,
   2c090:	f8c3 5118 	str.w	r5, [r3, #280]	; 0x118
   2c094:	e9c3 2242 	strd	r2, r2, [r3, #264]	; 0x108
   2c098:	e9c3 2244 	strd	r2, r2, [r3, #272]	; 0x110
   2c09c:	f64f 75ff 	movw	r5, #65535	; 0xffff
   2c0a0:	2200      	movs	r2, #0
   2c0a2:	f8a3 711c 	strh.w	r7, [r3, #284]	; 0x11c
   2c0a6:	4f54      	ldr	r7, [pc, #336]	; (2c1f8 <device_create+0x2f0>)
	INIT_OBJ_RES_OPTDATA(DEVICE_BATTERY_LEVEL_ID, res, i, res_inst, j);
   2c0a8:	f883 00ee 	strb.w	r0, [r3, #238]	; 0xee
	INIT_OBJ_RES_OPTDATA(DEVICE_MEMORY_FREE_ID, res, i, res_inst, j);
   2c0ac:	f8a3 6104 	strh.w	r6, [r3, #260]	; 0x104
   2c0b0:	f883 0106 	strb.w	r0, [r3, #262]	; 0x106
	INIT_OBJ_RES_MULTI_DATA(DEVICE_ERROR_CODE_ID, res, i,
   2c0b4:	f883 611e 	strb.w	r6, [r3, #286]	; 0x11e
   2c0b8:	18be      	adds	r6, r7, r2
   2c0ba:	3201      	adds	r2, #1
   2c0bc:	2a0a      	cmp	r2, #10
   2c0be:	f8c4 60fc 	str.w	r6, [r4, #252]	; 0xfc
   2c0c2:	f8a4 0100 	strh.w	r0, [r4, #256]	; 0x100
   2c0c6:	f8a4 5102 	strh.w	r5, [r4, #258]	; 0x102
   2c0ca:	f104 040c 	add.w	r4, r4, #12
   2c0ce:	d1f3      	bne.n	2c0b8 <device_create+0x1b0>
	INIT_OBJ_RES_EXECUTE(DEVICE_RESET_ERROR_CODE_ID, res, i,
   2c0d0:	220c      	movs	r2, #12
	INIT_OBJ_RES_OPT(DEVICE_CURRENT_TIME_ID, res, i, res_inst, j, 1, true,
   2c0d2:	f04f 0501 	mov.w	r5, #1
	INIT_OBJ_RES_EXECUTE(DEVICE_RESET_ERROR_CODE_ID, res, i,
   2c0d6:	f8a3 2134 	strh.w	r2, [r3, #308]	; 0x134
   2c0da:	2200      	movs	r2, #0
	INIT_OBJ_RES_OPT(DEVICE_CURRENT_TIME_ID, res, i, res_inst, j, 1, true,
   2c0dc:	f883 514e 	strb.w	r5, [r3, #334]	; 0x14e
   2c0e0:	4d46      	ldr	r5, [pc, #280]	; (2c1fc <device_create+0x2f4>)
	INIT_OBJ_RES_EXECUTE(DEVICE_RESET_ERROR_CODE_ID, res, i,
   2c0e2:	4c47      	ldr	r4, [pc, #284]	; (2c200 <device_create+0x2f8>)
	INIT_OBJ_RES_OPT(DEVICE_CURRENT_TIME_ID, res, i, res_inst, j, 1, true,
   2c0e4:	f8c3 5138 	str.w	r5, [r3, #312]	; 0x138
   2c0e8:	4d46      	ldr	r5, [pc, #280]	; (2c204 <device_create+0x2fc>)
	INIT_OBJ_RES_EXECUTE(DEVICE_RESET_ERROR_CODE_ID, res, i,
   2c0ea:	f8c3 412c 	str.w	r4, [r3, #300]	; 0x12c
	INIT_OBJ_RES_OPT(DEVICE_CURRENT_TIME_ID, res, i, res_inst, j, 1, true,
   2c0ee:	f8c3 513c 	str.w	r5, [r3, #316]	; 0x13c
   2c0f2:	240d      	movs	r4, #13
   2c0f4:	4d44      	ldr	r5, [pc, #272]	; (2c208 <device_create+0x300>)
   2c0f6:	f8a3 414c 	strh.w	r4, [r3, #332]	; 0x14c
   2c0fa:	e9c3 5250 	strd	r5, r2, [r3, #320]	; 0x140
	INIT_OBJ_RES_DATA(DEVICE_SUPPORTED_BINDING_MODES_ID, res, i,
   2c0fe:	2510      	movs	r5, #16
	INIT_OBJ_RES_OPT(DEVICE_CURRENT_TIME_ID, res, i, res_inst, j, 1, true,
   2c100:	4c42      	ldr	r4, [pc, #264]	; (2c20c <device_create+0x304>)
	INIT_OBJ_RES_DATA(DEVICE_SUPPORTED_BINDING_MODES_ID, res, i,
   2c102:	f8a3 5164 	strh.w	r5, [r3, #356]	; 0x164
   2c106:	f104 050c 	add.w	r5, r4, #12
   2c10a:	f8c3 5160 	str.w	r5, [r3, #352]	; 0x160
   2c10e:	4d40      	ldr	r5, [pc, #256]	; (2c210 <device_create+0x308>)
	INIT_OBJ_RES_OPT(DEVICE_CURRENT_TIME_ID, res, i, res_inst, j, 1, true,
   2c110:	f8c3 4148 	str.w	r4, [r3, #328]	; 0x148
	INIT_OBJ_RES_DATA(DEVICE_SUPPORTED_BINDING_MODES_ID, res, i,
   2c114:	f8c1 5180 	str.w	r5, [r1, #384]	; 0x180
   2c118:	2508      	movs	r5, #8
   2c11a:	f8c1 5184 	str.w	r5, [r1, #388]	; 0x184
	INIT_OBJ_RES_OPTDATA(DEVICE_TYPE_ID, res, i, res_inst, j);
   2c11e:	2511      	movs	r5, #17
   2c120:	f8a3 517c 	strh.w	r5, [r3, #380]	; 0x17c
   2c124:	f104 0518 	add.w	r5, r4, #24
   2c128:	f8c3 5178 	str.w	r5, [r3, #376]	; 0x178
	INIT_OBJ_RES_OPTDATA(DEVICE_HARDWARE_VERSION_ID, res, i, res_inst, j);
   2c12c:	2512      	movs	r5, #18
	INIT_OBJ_RES_DATA(DEVICE_SUPPORTED_BINDING_MODES_ID, res, i,
   2c12e:	f883 0166 	strb.w	r0, [r3, #358]	; 0x166
	INIT_OBJ_RES_OPTDATA(DEVICE_TYPE_ID, res, i, res_inst, j);
   2c132:	f883 017e 	strb.w	r0, [r3, #382]	; 0x17e
	INIT_OBJ_RES_EXECUTE(DEVICE_RESET_ERROR_CODE_ID, res, i,
   2c136:	f8c3 2130 	str.w	r2, [r3, #304]	; 0x130
   2c13a:	f883 2136 	strb.w	r2, [r3, #310]	; 0x136
   2c13e:	e9c3 2248 	strd	r2, r2, [r3, #288]	; 0x120
   2c142:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
	INIT_OBJ_RES_OPT(DEVICE_CURRENT_TIME_ID, res, i, res_inst, j, 1, true,
   2c146:	e9c1 225d 	strd	r2, r2, [r1, #372]	; 0x174
	INIT_OBJ_RES_DATA(DEVICE_SUPPORTED_BINDING_MODES_ID, res, i,
   2c14a:	e9c3 2254 	strd	r2, r2, [r3, #336]	; 0x150
   2c14e:	e9c3 2256 	strd	r2, r2, [r3, #344]	; 0x158
	INIT_OBJ_RES_OPTDATA(DEVICE_TYPE_ID, res, i, res_inst, j);
   2c152:	e9c3 225a 	strd	r2, r2, [r3, #360]	; 0x168
   2c156:	e9c3 225c 	strd	r2, r2, [r3, #368]	; 0x170
   2c15a:	e9c1 2263 	strd	r2, r2, [r1, #396]	; 0x18c
	INIT_OBJ_RES_OPTDATA(DEVICE_HARDWARE_VERSION_ID, res, i, res_inst, j);
   2c15e:	f8a3 5194 	strh.w	r5, [r3, #404]	; 0x194
   2c162:	f104 0524 	add.w	r5, r4, #36	; 0x24
   2c166:	f8c3 5190 	str.w	r5, [r3, #400]	; 0x190
	INIT_OBJ_RES_OPTDATA(DEVICE_SOFTWARE_VERSION_ID, res, i, res_inst, j);
   2c16a:	2513      	movs	r5, #19
	INIT_OBJ_RES_OPTDATA(DEVICE_BATTERY_STATUS_ID, res, i, res_inst, j);
   2c16c:	f104 063c 	add.w	r6, r4, #60	; 0x3c
	INIT_OBJ_RES_OPTDATA(DEVICE_SOFTWARE_VERSION_ID, res, i, res_inst, j);
   2c170:	f8a3 51ac 	strh.w	r5, [r3, #428]	; 0x1ac
   2c174:	f104 0530 	add.w	r5, r4, #48	; 0x30
   2c178:	f8c3 51a8 	str.w	r5, [r3, #424]	; 0x1a8
	INIT_OBJ_RES_OPTDATA(DEVICE_BATTERY_STATUS_ID, res, i, res_inst, j);
   2c17c:	f8c3 61c0 	str.w	r6, [r3, #448]	; 0x1c0
   2c180:	2514      	movs	r5, #20
	INIT_OBJ_RES_OPTDATA(DEVICE_MEMORY_TOTAL_ID, res, i, res_inst, j);
   2c182:	2615      	movs	r6, #21
	INIT_OBJ_RES_OPTDATA(DEVICE_HARDWARE_VERSION_ID, res, i, res_inst, j);
   2c184:	f883 0196 	strb.w	r0, [r3, #406]	; 0x196
	INIT_OBJ_RES_OPTDATA(DEVICE_SOFTWARE_VERSION_ID, res, i, res_inst, j);
   2c188:	f883 01ae 	strb.w	r0, [r3, #430]	; 0x1ae
	INIT_OBJ_RES_OPTDATA(DEVICE_BATTERY_STATUS_ID, res, i, res_inst, j);
   2c18c:	f883 01c6 	strb.w	r0, [r3, #454]	; 0x1c6
	INIT_OBJ_RES_OPTDATA(DEVICE_MEMORY_TOTAL_ID, res, i, res_inst, j);
   2c190:	f883 01de 	strb.w	r0, [r3, #478]	; 0x1de
	inst.resources = res;
   2c194:	481f      	ldr	r0, [pc, #124]	; (2c214 <device_create+0x30c>)
	INIT_OBJ_RES_OPTDATA(DEVICE_MEMORY_TOTAL_ID, res, i, res_inst, j);
   2c196:	3448      	adds	r4, #72	; 0x48
	INIT_OBJ_RES_OPTDATA(DEVICE_HARDWARE_VERSION_ID, res, i, res_inst, j);
   2c198:	e9c3 2260 	strd	r2, r2, [r3, #384]	; 0x180
   2c19c:	e9c3 2262 	strd	r2, r2, [r3, #392]	; 0x188
   2c1a0:	e9c1 2266 	strd	r2, r2, [r1, #408]	; 0x198
	INIT_OBJ_RES_OPTDATA(DEVICE_SOFTWARE_VERSION_ID, res, i, res_inst, j);
   2c1a4:	e9c3 2266 	strd	r2, r2, [r3, #408]	; 0x198
   2c1a8:	e9c3 2268 	strd	r2, r2, [r3, #416]	; 0x1a0
   2c1ac:	e9c1 2269 	strd	r2, r2, [r1, #420]	; 0x1a4
	INIT_OBJ_RES_OPTDATA(DEVICE_BATTERY_STATUS_ID, res, i, res_inst, j);
   2c1b0:	f8a3 51c4 	strh.w	r5, [r3, #452]	; 0x1c4
   2c1b4:	e9c3 226c 	strd	r2, r2, [r3, #432]	; 0x1b0
   2c1b8:	e9c3 226e 	strd	r2, r2, [r3, #440]	; 0x1b8
   2c1bc:	e9c1 226c 	strd	r2, r2, [r1, #432]	; 0x1b0
	INIT_OBJ_RES_OPTDATA(DEVICE_MEMORY_TOTAL_ID, res, i, res_inst, j);
   2c1c0:	f8a3 61dc 	strh.w	r6, [r3, #476]	; 0x1dc
   2c1c4:	f8c3 41d8 	str.w	r4, [r3, #472]	; 0x1d8
   2c1c8:	e9c3 2272 	strd	r2, r2, [r3, #456]	; 0x1c8
   2c1cc:	e9c3 2274 	strd	r2, r2, [r3, #464]	; 0x1d0
   2c1d0:	e9c1 226f 	strd	r2, r2, [r1, #444]	; 0x1bc
	inst.resources = res;
   2c1d4:	6083      	str	r3, [r0, #8]
	inst.resource_count = i;
   2c1d6:	81c5      	strh	r5, [r0, #14]
}
   2c1d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   2c1da:	bf00      	nop
   2c1dc:	20023bd0 	.word	0x20023bd0
   2c1e0:	200239a8 	.word	0x200239a8
   2c1e4:	20023bdc 	.word	0x20023bdc
   2c1e8:	20023c3c 	.word	0x20023c3c
   2c1ec:	20023c78 	.word	0x20023c78
   2c1f0:	20023cb4 	.word	0x20023cb4
   2c1f4:	20023994 	.word	0x20023994
   2c1f8:	2002a0f4 	.word	0x2002a0f4
   2c1fc:	0002bedd 	.word	0x0002bedd
   2c200:	0002be45 	.word	0x0002be45
   2c204:	0002be71 	.word	0x0002be71
   2c208:	0002c219 	.word	0x0002c219
   2c20c:	20023d44 	.word	0x20023d44
   2c210:	2002a0ec 	.word	0x2002a0ec
   2c214:	20023998 	.word	0x20023998

0002c218 <current_time_post_write_cb>:
{
   2c218:	b510      	push	{r4, lr}
   2c21a:	f8bd 1008 	ldrh.w	r1, [sp, #8]
	if (data_len == 4U) {
   2c21e:	2904      	cmp	r1, #4
   2c220:	d10c      	bne.n	2c23c <current_time_post_write_cb+0x24>
		time_offset = *(s32_t *)data - (s32_t)(k_uptime_get() / 1000);
   2c222:	681c      	ldr	r4, [r3, #0]
   2c224:	f018 fd4d 	bl	44cc2 <z_impl_k_uptime_get>
   2c228:	2300      	movs	r3, #0
   2c22a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   2c22e:	f7f0 fd85 	bl	1cd3c <__aeabi_ldivmod>
   2c232:	4b0d      	ldr	r3, [pc, #52]	; (2c268 <current_time_post_write_cb+0x50>)
   2c234:	1a20      	subs	r0, r4, r0
   2c236:	6018      	str	r0, [r3, #0]
   2c238:	2000      	movs	r0, #0
}
   2c23a:	bd10      	pop	{r4, pc}
	LOG_ERR("unknown size %u", data_len);
   2c23c:	4b0b      	ldr	r3, [pc, #44]	; (2c26c <current_time_post_write_cb+0x54>)
   2c23e:	681b      	ldr	r3, [r3, #0]
   2c240:	075b      	lsls	r3, r3, #29
   2c242:	d00d      	beq.n	2c260 <current_time_post_write_cb+0x48>
   2c244:	2301      	movs	r3, #1
   2c246:	f04f 0200 	mov.w	r2, #0
   2c24a:	4809      	ldr	r0, [pc, #36]	; (2c270 <current_time_post_write_cb+0x58>)
   2c24c:	f363 0207 	bfi	r2, r3, #0, #8
   2c250:	4b08      	ldr	r3, [pc, #32]	; (2c274 <current_time_post_write_cb+0x5c>)
   2c252:	1a1b      	subs	r3, r3, r0
   2c254:	08db      	lsrs	r3, r3, #3
   2c256:	f363 128f 	bfi	r2, r3, #6, #10
   2c25a:	4807      	ldr	r0, [pc, #28]	; (2c278 <current_time_post_write_cb+0x60>)
   2c25c:	f014 fbfe 	bl	40a5c <log_1>
	return -EINVAL;
   2c260:	f06f 0015 	mvn.w	r0, #21
   2c264:	e7e9      	b.n	2c23a <current_time_post_write_cb+0x22>
   2c266:	bf00      	nop
   2c268:	20023dbc 	.word	0x20023dbc
   2c26c:	20032b14 	.word	0x20032b14
   2c270:	00045f08 	.word	0x00045f08
   2c274:	00046028 	.word	0x00046028
   2c278:	0004b953 	.word	0x0004b953

0002c27c <plain_text_read_number.constprop.1>:
static int get_length_left(struct lwm2m_input_context *in)
{
	return in->in_cpkt->offset - in->offset;
}

static size_t plain_text_read_number(struct lwm2m_input_context *in,
   2c27c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2c280:	460e      	mov	r6, r1
   2c282:	4605      	mov	r5, r0
	bool neg = false;
	bool dot_found = false;
	u8_t tmp;

	/* initialize values to 0 */
	*value1 = 0;
   2c284:	2100      	movs	r1, #0
   2c286:	2000      	movs	r0, #0
static size_t plain_text_read_number(struct lwm2m_input_context *in,
   2c288:	b089      	sub	sp, #36	; 0x24
   2c28a:	469b      	mov	fp, r3
	*value1 = 0;
   2c28c:	e9c6 0100 	strd	r0, r1, [r6]
	if (value2) {
   2c290:	4691      	mov	r9, r2
   2c292:	b10a      	cbz	r2, 2c298 <plain_text_read_number.constprop.1+0x1c>
		*value2 = 0;
   2c294:	e9c2 0100 	strd	r0, r1, [r2]
			break;
		}

		if (tmp == '-' && accept_sign && i == 0) {
			neg = true;
		} else if (tmp == '.' && i > 0 && accept_dot && !dot_found &&
   2c298:	2700      	movs	r7, #0
   2c29a:	46b0      	mov	r8, r6
   2c29c:	46ba      	mov	sl, r7
   2c29e:	463c      	mov	r4, r7
		if (buf_read_u8(&tmp, CPKT_BUF_READ(in->in_cpkt),
   2c2a0:	f105 0308 	add.w	r3, r5, #8
   2c2a4:	9305      	str	r3, [sp, #20]
	while (in->offset < in->in_cpkt->offset) {
   2c2a6:	686a      	ldr	r2, [r5, #4]
   2c2a8:	8929      	ldrh	r1, [r5, #8]
   2c2aa:	8893      	ldrh	r3, [r2, #4]
   2c2ac:	4299      	cmp	r1, r3
   2c2ae:	d23e      	bcs.n	2c32e <plain_text_read_number.constprop.1+0xb2>
}

static inline int buf_read_u8(u8_t *value, u8_t *src, u16_t src_len,
			      u16_t *offset)
{
	return buf_read(value, sizeof(u8_t), src, src_len, offset);
   2c2b0:	9905      	ldr	r1, [sp, #20]
   2c2b2:	88d3      	ldrh	r3, [r2, #6]
   2c2b4:	9100      	str	r1, [sp, #0]
   2c2b6:	6812      	ldr	r2, [r2, #0]
   2c2b8:	2101      	movs	r1, #1
   2c2ba:	f10d 001f 	add.w	r0, sp, #31
   2c2be:	f016 ffae 	bl	4321e <buf_read>
		if (buf_read_u8(&tmp, CPKT_BUF_READ(in->in_cpkt),
   2c2c2:	2800      	cmp	r0, #0
   2c2c4:	db33      	blt.n	2c32e <plain_text_read_number.constprop.1+0xb2>
		if (tmp == '-' && accept_sign && i == 0) {
   2c2c6:	f89d 101f 	ldrb.w	r1, [sp, #31]
   2c2ca:	292d      	cmp	r1, #45	; 0x2d
   2c2cc:	d11d      	bne.n	2c30a <plain_text_read_number.constprop.1+0x8e>
   2c2ce:	2c00      	cmp	r4, #0
   2c2d0:	d03b      	beq.n	2c34a <plain_text_read_number.constprop.1+0xce>
			   value2) {
			dot_found = true;
			counter = value2;
		} else if (isdigit(tmp)) {
   2c2d2:	4b1f      	ldr	r3, [pc, #124]	; (2c350 <plain_text_read_number.constprop.1+0xd4>)
   2c2d4:	5ccb      	ldrb	r3, [r1, r3]
   2c2d6:	075b      	lsls	r3, r3, #29
   2c2d8:	d526      	bpl.n	2c328 <plain_text_read_number.constprop.1+0xac>
			*counter = *counter * 10 + (tmp - '0');
   2c2da:	f04f 0c0a 	mov.w	ip, #10
   2c2de:	f8d8 2000 	ldr.w	r2, [r8]
   2c2e2:	f8d8 0004 	ldr.w	r0, [r8, #4]
   2c2e6:	fba2 230c 	umull	r2, r3, r2, ip
   2c2ea:	e9cd 2302 	strd	r2, r3, [sp, #8]
   2c2ee:	9b03      	ldr	r3, [sp, #12]
   2c2f0:	3930      	subs	r1, #48	; 0x30
   2c2f2:	fb0c 3300 	mla	r3, ip, r0, r3
   2c2f6:	9303      	str	r3, [sp, #12]
   2c2f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   2c2fc:	1852      	adds	r2, r2, r1
   2c2fe:	eb43 73e1 	adc.w	r3, r3, r1, asr #31
   2c302:	e9c8 2300 	strd	r2, r3, [r8]
			/* anything else stop reading */
			in->offset--;
			break;
		}

		i++;
   2c306:	3401      	adds	r4, #1
   2c308:	e7cd      	b.n	2c2a6 <plain_text_read_number.constprop.1+0x2a>
		} else if (tmp == '.' && i > 0 && accept_dot && !dot_found &&
   2c30a:	292e      	cmp	r1, #46	; 0x2e
   2c30c:	d1e1      	bne.n	2c2d2 <plain_text_read_number.constprop.1+0x56>
   2c30e:	2c00      	cmp	r4, #0
   2c310:	dddf      	ble.n	2c2d2 <plain_text_read_number.constprop.1+0x56>
   2c312:	f1bb 0f00 	cmp.w	fp, #0
   2c316:	d0dc      	beq.n	2c2d2 <plain_text_read_number.constprop.1+0x56>
   2c318:	2f00      	cmp	r7, #0
   2c31a:	d1da      	bne.n	2c2d2 <plain_text_read_number.constprop.1+0x56>
   2c31c:	f1b9 0f00 	cmp.w	r9, #0
   2c320:	d0d7      	beq.n	2c2d2 <plain_text_read_number.constprop.1+0x56>
			dot_found = true;
   2c322:	465f      	mov	r7, fp
		} else if (tmp == '.' && i > 0 && accept_dot && !dot_found &&
   2c324:	46c8      	mov	r8, r9
   2c326:	e7ee      	b.n	2c306 <plain_text_read_number.constprop.1+0x8a>
			in->offset--;
   2c328:	892b      	ldrh	r3, [r5, #8]
   2c32a:	3b01      	subs	r3, #1
   2c32c:	812b      	strh	r3, [r5, #8]
	}

	if (neg) {
   2c32e:	f1ba 0f00 	cmp.w	sl, #0
   2c332:	d006      	beq.n	2c342 <plain_text_read_number.constprop.1+0xc6>
		*value1 = -*value1;
   2c334:	e9d6 2300 	ldrd	r2, r3, [r6]
   2c338:	4252      	negs	r2, r2
   2c33a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   2c33e:	e9c6 2300 	strd	r2, r3, [r6]
	}

	return i;
}
   2c342:	4620      	mov	r0, r4
   2c344:	b009      	add	sp, #36	; 0x24
   2c346:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			neg = true;
   2c34a:	f04f 0a01 	mov.w	sl, #1
   2c34e:	e7da      	b.n	2c306 <plain_text_read_number.constprop.1+0x8a>
   2c350:	0004d857 	.word	0x0004d857

0002c354 <plain_text_put_format>:
{
   2c354:	b40e      	push	{r1, r2, r3}
   2c356:	b53f      	push	{r0, r1, r2, r3, r4, r5, lr}
   2c358:	ab07      	add	r3, sp, #28
   2c35a:	f853 2b04 	ldr.w	r2, [r3], #4
   2c35e:	4605      	mov	r5, r0
	n = vsnprintk(pt_buffer, sizeof(pt_buffer), format, vargs);
   2c360:	212a      	movs	r1, #42	; 0x2a
   2c362:	480e      	ldr	r0, [pc, #56]	; (2c39c <plain_text_put_format+0x48>)
	va_start(vargs, format);
   2c364:	9303      	str	r3, [sp, #12]
	n = vsnprintk(pt_buffer, sizeof(pt_buffer), format, vargs);
   2c366:	f7f5 f9d5 	bl	21714 <vsnprintk>
	if (n < 0) {
   2c36a:	2800      	cmp	r0, #0
   2c36c:	db0e      	blt.n	2c38c <plain_text_put_format+0x38>
	n = strlen(pt_buffer);
   2c36e:	480b      	ldr	r0, [pc, #44]	; (2c39c <plain_text_put_format+0x48>)
   2c370:	f7f0 fed2 	bl	1d118 <strlen>
   2c374:	4604      	mov	r4, r0
	if (buf_append(CPKT_BUF_WRITE(out->out_cpkt), pt_buffer, n) < 0) {
   2c376:	6868      	ldr	r0, [r5, #4]
   2c378:	b2a3      	uxth	r3, r4
   2c37a:	88c2      	ldrh	r2, [r0, #6]
   2c37c:	9300      	str	r3, [sp, #0]
   2c37e:	1d01      	adds	r1, r0, #4
   2c380:	4b06      	ldr	r3, [pc, #24]	; (2c39c <plain_text_put_format+0x48>)
   2c382:	6800      	ldr	r0, [r0, #0]
   2c384:	f016 ff1f 	bl	431c6 <buf_append>
   2c388:	2800      	cmp	r0, #0
   2c38a:	da00      	bge.n	2c38e <plain_text_put_format+0x3a>
		return 0;
   2c38c:	2400      	movs	r4, #0
}
   2c38e:	4620      	mov	r0, r4
   2c390:	b004      	add	sp, #16
   2c392:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
   2c396:	b003      	add	sp, #12
   2c398:	4770      	bx	lr
   2c39a:	bf00      	nop
   2c39c:	2002a0fe 	.word	0x2002a0fe

0002c3a0 <plain_text_put_float32fix>:
{
   2c3a0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   2c3a2:	4606      	mov	r6, r0
	len = snprintf(buf, sizeof(buf), "%06d", abs(value->val2));
   2c3a4:	6850      	ldr	r0, [r2, #4]
{
   2c3a6:	4615      	mov	r5, r2
	len = snprintf(buf, sizeof(buf), "%06d", abs(value->val2));
   2c3a8:	f018 fd2e 	bl	44e08 <abs>
   2c3ac:	ac02      	add	r4, sp, #8
   2c3ae:	4603      	mov	r3, r0
   2c3b0:	4a13      	ldr	r2, [pc, #76]	; (2c400 <plain_text_put_float32fix+0x60>)
   2c3b2:	2107      	movs	r1, #7
   2c3b4:	4620      	mov	r0, r4
   2c3b6:	f012 ffe5 	bl	3f384 <sniprintf>
	if (len != 6U) {
   2c3ba:	2806      	cmp	r0, #6
   2c3bc:	d10a      	bne.n	2c3d4 <plain_text_put_float32fix+0x34>
			buf[--len] = '\0';
   2c3be:	2100      	movs	r1, #0
   2c3c0:	f10d 030d 	add.w	r3, sp, #13
		while (len > 1U && buf[len - 1] == '0') {
   2c3c4:	f813 2901 	ldrb.w	r2, [r3], #-1
   2c3c8:	2a30      	cmp	r2, #48	; 0x30
   2c3ca:	d107      	bne.n	2c3dc <plain_text_put_float32fix+0x3c>
   2c3cc:	42a3      	cmp	r3, r4
			buf[--len] = '\0';
   2c3ce:	7059      	strb	r1, [r3, #1]
		while (len > 1U && buf[len - 1] == '0') {
   2c3d0:	d1f8      	bne.n	2c3c4 <plain_text_put_float32fix+0x24>
   2c3d2:	e003      	b.n	2c3dc <plain_text_put_float32fix+0x3c>
		strcpy(buf, "0");
   2c3d4:	490b      	ldr	r1, [pc, #44]	; (2c404 <plain_text_put_float32fix+0x64>)
   2c3d6:	4620      	mov	r0, r4
   2c3d8:	f018 feba 	bl	45150 <strcpy>
				     (value->val1 == 0 && value->val2 < 0) ?
   2c3dc:	682b      	ldr	r3, [r5, #0]
	return plain_text_put_format(out, "%s%d.%s",
   2c3de:	b96b      	cbnz	r3, 2c3fc <plain_text_put_float32fix+0x5c>
				     (value->val1 == 0 && value->val2 < 0) ?
   2c3e0:	6868      	ldr	r0, [r5, #4]
	return plain_text_put_format(out, "%s%d.%s",
   2c3e2:	4a09      	ldr	r2, [pc, #36]	; (2c408 <plain_text_put_float32fix+0x68>)
   2c3e4:	4909      	ldr	r1, [pc, #36]	; (2c40c <plain_text_put_float32fix+0x6c>)
   2c3e6:	ea32 0220 	bics.w	r2, r2, r0, asr #32
   2c3ea:	bf28      	it	cs
   2c3ec:	460a      	movcs	r2, r1
   2c3ee:	9400      	str	r4, [sp, #0]
   2c3f0:	4907      	ldr	r1, [pc, #28]	; (2c410 <plain_text_put_float32fix+0x70>)
   2c3f2:	4630      	mov	r0, r6
   2c3f4:	f7ff ffae 	bl	2c354 <plain_text_put_format>
}
   2c3f8:	b004      	add	sp, #16
   2c3fa:	bd70      	pop	{r4, r5, r6, pc}
	return plain_text_put_format(out, "%s%d.%s",
   2c3fc:	4a02      	ldr	r2, [pc, #8]	; (2c408 <plain_text_put_float32fix+0x68>)
   2c3fe:	e7f6      	b.n	2c3ee <plain_text_put_float32fix+0x4e>
   2c400:	0004b978 	.word	0x0004b978
   2c404:	0004d39b 	.word	0x0004d39b
   2c408:	0004a299 	.word	0x0004a299
   2c40c:	0004b680 	.word	0x0004b680
   2c410:	0004b97d 	.word	0x0004b97d

0002c414 <plain_text_put_float64fix>:
{
   2c414:	b570      	push	{r4, r5, r6, lr}
   2c416:	4606      	mov	r6, r0
   2c418:	b088      	sub	sp, #32
	len = snprintf(buf, sizeof(buf), "%09lld",
   2c41a:	6890      	ldr	r0, [r2, #8]
{
   2c41c:	4615      	mov	r5, r2
	len = snprintf(buf, sizeof(buf), "%09lld",
   2c41e:	f018 fcf3 	bl	44e08 <abs>
   2c422:	ac05      	add	r4, sp, #20
   2c424:	17c1      	asrs	r1, r0, #31
   2c426:	e9cd 0100 	strd	r0, r1, [sp]
   2c42a:	4a17      	ldr	r2, [pc, #92]	; (2c488 <plain_text_put_float64fix+0x74>)
   2c42c:	210a      	movs	r1, #10
   2c42e:	4620      	mov	r0, r4
   2c430:	f012 ffa8 	bl	3f384 <sniprintf>
	if (len != 9U) {
   2c434:	2809      	cmp	r0, #9
   2c436:	d109      	bne.n	2c44c <plain_text_put_float64fix+0x38>
			buf[--len] = '\0';
   2c438:	2100      	movs	r1, #0
   2c43a:	ab07      	add	r3, sp, #28
		while (len > 1U && buf[len - 1] == '0') {
   2c43c:	f813 2901 	ldrb.w	r2, [r3], #-1
   2c440:	2a30      	cmp	r2, #48	; 0x30
   2c442:	d107      	bne.n	2c454 <plain_text_put_float64fix+0x40>
   2c444:	42a3      	cmp	r3, r4
			buf[--len] = '\0';
   2c446:	7059      	strb	r1, [r3, #1]
		while (len > 1U && buf[len - 1] == '0') {
   2c448:	d1f8      	bne.n	2c43c <plain_text_put_float64fix+0x28>
   2c44a:	e003      	b.n	2c454 <plain_text_put_float64fix+0x40>
		strcpy(buf, "0");
   2c44c:	490f      	ldr	r1, [pc, #60]	; (2c48c <plain_text_put_float64fix+0x78>)
   2c44e:	4620      	mov	r0, r4
   2c450:	f018 fe7e 	bl	45150 <strcpy>
				     (value->val1 == 0 && value->val2 < 0) ?
   2c454:	e9d5 0100 	ldrd	r0, r1, [r5]
	return plain_text_put_format(out, "%s%lld.%s",
   2c458:	ea50 0301 	orrs.w	r3, r0, r1
   2c45c:	d111      	bne.n	2c482 <plain_text_put_float64fix+0x6e>
				     (value->val1 == 0 && value->val2 < 0) ?
   2c45e:	e9d5 2302 	ldrd	r2, r3, [r5, #8]
	return plain_text_put_format(out, "%s%lld.%s",
   2c462:	2a00      	cmp	r2, #0
   2c464:	f173 0300 	sbcs.w	r3, r3, #0
   2c468:	4b09      	ldr	r3, [pc, #36]	; (2c490 <plain_text_put_float64fix+0x7c>)
   2c46a:	4a0a      	ldr	r2, [pc, #40]	; (2c494 <plain_text_put_float64fix+0x80>)
   2c46c:	bfb8      	it	lt
   2c46e:	461a      	movlt	r2, r3
   2c470:	e9cd 0100 	strd	r0, r1, [sp]
   2c474:	9402      	str	r4, [sp, #8]
   2c476:	4908      	ldr	r1, [pc, #32]	; (2c498 <plain_text_put_float64fix+0x84>)
   2c478:	4630      	mov	r0, r6
   2c47a:	f7ff ff6b 	bl	2c354 <plain_text_put_format>
}
   2c47e:	b008      	add	sp, #32
   2c480:	bd70      	pop	{r4, r5, r6, pc}
	return plain_text_put_format(out, "%s%lld.%s",
   2c482:	4a04      	ldr	r2, [pc, #16]	; (2c494 <plain_text_put_float64fix+0x80>)
   2c484:	e7f4      	b.n	2c470 <plain_text_put_float64fix+0x5c>
   2c486:	bf00      	nop
   2c488:	0004b985 	.word	0x0004b985
   2c48c:	0004d39b 	.word	0x0004d39b
   2c490:	0004b680 	.word	0x0004b680
   2c494:	0004a299 	.word	0x0004a299
   2c498:	0004b98c 	.word	0x0004b98c

0002c49c <put_bool>:
	if (value) {
   2c49c:	b102      	cbz	r2, 2c4a0 <put_bool+0x4>
		return plain_text_put_format(out, "%u", 1);
   2c49e:	2201      	movs	r2, #1
		return plain_text_put_format(out, "%u", 0);
   2c4a0:	4901      	ldr	r1, [pc, #4]	; (2c4a8 <put_bool+0xc>)
   2c4a2:	f7ff bf57 	b.w	2c354 <plain_text_put_format>
   2c4a6:	bf00      	nop
   2c4a8:	0004be1f 	.word	0x0004be1f

0002c4ac <put_s64>:
	return plain_text_put_format(out, "%lld", value);
   2c4ac:	4901      	ldr	r1, [pc, #4]	; (2c4b4 <put_s64+0x8>)
   2c4ae:	f7ff bf51 	b.w	2c354 <plain_text_put_format>
   2c4b2:	bf00      	nop
   2c4b4:	0004b996 	.word	0x0004b996

0002c4b8 <put_s32>:
	return plain_text_put_format(out, "%d", value);
   2c4b8:	4901      	ldr	r1, [pc, #4]	; (2c4c0 <put_s32+0x8>)
   2c4ba:	f7ff bf4b 	b.w	2c354 <plain_text_put_format>
   2c4be:	bf00      	nop
   2c4c0:	0004cad4 	.word	0x0004cad4

0002c4c4 <put_s16>:
	return plain_text_put_format(out, "%d", value);
   2c4c4:	4901      	ldr	r1, [pc, #4]	; (2c4cc <put_s16+0x8>)
   2c4c6:	f7ff bf45 	b.w	2c354 <plain_text_put_format>
   2c4ca:	bf00      	nop
   2c4cc:	0004cad4 	.word	0x0004cad4

0002c4d0 <put_s8>:
	return plain_text_put_format(out, "%d", value);
   2c4d0:	4901      	ldr	r1, [pc, #4]	; (2c4d8 <put_s8+0x8>)
   2c4d2:	f7ff bf3f 	b.w	2c354 <plain_text_put_format>
   2c4d6:	bf00      	nop
   2c4d8:	0004cad4 	.word	0x0004cad4

0002c4dc <put_float64fix>:
}

static size_t put_float64fix(struct lwm2m_output_context *out,
			     struct lwm2m_obj_path *path,
			     float64_value_t *value)
{
   2c4dc:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   2c4de:	4605      	mov	r5, r0
	size_t len;
	struct oma_tlv tlv;
	u8_t b64[8];
	int ret;

	fd = engine_get_out_user_data(out);
   2c4e0:	68ae      	ldr	r6, [r5, #8]
{
   2c4e2:	460c      	mov	r4, r1
   2c4e4:	4610      	mov	r0, r2
	if (!fd) {
   2c4e6:	b916      	cbnz	r6, 2c4ee <put_float64fix+0x12>
	}

	ret = lwm2m_f64_to_b64(value, b64, sizeof(b64));
	if (ret < 0) {
		LOG_ERR("float64 conversion error: %d", ret);
		return 0;
   2c4e8:	2000      	movs	r0, #0

	tlv_setup(&tlv, tlv_calc_type(fd->writer_flags),
		  tlv_calc_id(fd->writer_flags, path), sizeof(b64));
	len = oma_tlv_put(&tlv, out, b64, false);
	return len;
}
   2c4ea:	b004      	add	sp, #16
   2c4ec:	bd70      	pop	{r4, r5, r6, pc}
	ret = lwm2m_f64_to_b64(value, b64, sizeof(b64));
   2c4ee:	2208      	movs	r2, #8
   2c4f0:	eb0d 0102 	add.w	r1, sp, r2
   2c4f4:	f7f0 ff28 	bl	1d348 <lwm2m_f64_to_b64>
	if (ret < 0) {
   2c4f8:	1e01      	subs	r1, r0, #0
   2c4fa:	da12      	bge.n	2c522 <put_float64fix+0x46>
		LOG_ERR("float64 conversion error: %d", ret);
   2c4fc:	4b13      	ldr	r3, [pc, #76]	; (2c54c <put_float64fix+0x70>)
   2c4fe:	681b      	ldr	r3, [r3, #0]
   2c500:	075a      	lsls	r2, r3, #29
   2c502:	d0f1      	beq.n	2c4e8 <put_float64fix+0xc>
   2c504:	2301      	movs	r3, #1
   2c506:	f04f 0200 	mov.w	r2, #0
   2c50a:	4811      	ldr	r0, [pc, #68]	; (2c550 <put_float64fix+0x74>)
   2c50c:	f363 0207 	bfi	r2, r3, #0, #8
   2c510:	4b10      	ldr	r3, [pc, #64]	; (2c554 <put_float64fix+0x78>)
   2c512:	1a1b      	subs	r3, r3, r0
   2c514:	08db      	lsrs	r3, r3, #3
   2c516:	f363 128f 	bfi	r2, r3, #6, #10
   2c51a:	480f      	ldr	r0, [pc, #60]	; (2c558 <put_float64fix+0x7c>)
   2c51c:	f014 fa9e 	bl	40a5c <log_1>
   2c520:	e7e2      	b.n	2c4e8 <put_float64fix+0xc>
			OMA_TLV_TYPE_RESOURCE_INSTANCE : OMA_TLV_TYPE_RESOURCE;
   2c522:	79b3      	ldrb	r3, [r6, #6]
   2c524:	079b      	lsls	r3, r3, #30
   2c526:	d402      	bmi.n	2c52e <put_float64fix+0x52>
			path->res_inst_id : path->res_id;
   2c528:	88a2      	ldrh	r2, [r4, #4]
			OMA_TLV_TYPE_RESOURCE_INSTANCE : OMA_TLV_TYPE_RESOURCE;
   2c52a:	2303      	movs	r3, #3
   2c52c:	e001      	b.n	2c532 <put_float64fix+0x56>
   2c52e:	2301      	movs	r3, #1
			path->res_inst_id : path->res_id;
   2c530:	88e2      	ldrh	r2, [r4, #6]
		tlv->type = type;
   2c532:	f88d 3000 	strb.w	r3, [sp]
		tlv->length = buflen;
   2c536:	2308      	movs	r3, #8
		tlv->id = id;
   2c538:	f8ad 2002 	strh.w	r2, [sp, #2]
		tlv->length = buflen;
   2c53c:	9301      	str	r3, [sp, #4]
	len = oma_tlv_put(&tlv, out, b64, false);
   2c53e:	aa02      	add	r2, sp, #8
   2c540:	2300      	movs	r3, #0
   2c542:	4629      	mov	r1, r5
   2c544:	4668      	mov	r0, sp
   2c546:	f016 ffb7 	bl	434b8 <oma_tlv_put>
	return len;
   2c54a:	e7ce      	b.n	2c4ea <put_float64fix+0xe>
   2c54c:	20032b2c 	.word	0x20032b2c
   2c550:	00045f08 	.word	0x00045f08
   2c554:	00046058 	.word	0x00046058
   2c558:	0004ba52 	.word	0x0004ba52

0002c55c <put_float32fix>:
{
   2c55c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   2c55e:	4605      	mov	r5, r0
	fd = engine_get_out_user_data(out);
   2c560:	68ae      	ldr	r6, [r5, #8]
{
   2c562:	460c      	mov	r4, r1
   2c564:	4610      	mov	r0, r2
	if (!fd) {
   2c566:	b916      	cbnz	r6, 2c56e <put_float32fix+0x12>
		return 0;
   2c568:	2000      	movs	r0, #0
}
   2c56a:	b004      	add	sp, #16
   2c56c:	bd70      	pop	{r4, r5, r6, pc}
	ret = lwm2m_f32_to_b32(value, b32, sizeof(b32));
   2c56e:	2204      	movs	r2, #4
   2c570:	eb0d 0102 	add.w	r1, sp, r2
   2c574:	f000 f96c 	bl	2c850 <lwm2m_f32_to_b32>
	if (ret < 0) {
   2c578:	1e01      	subs	r1, r0, #0
   2c57a:	da12      	bge.n	2c5a2 <put_float32fix+0x46>
		LOG_ERR("float32 conversion error: %d", ret);
   2c57c:	4b13      	ldr	r3, [pc, #76]	; (2c5cc <put_float32fix+0x70>)
   2c57e:	681b      	ldr	r3, [r3, #0]
   2c580:	075a      	lsls	r2, r3, #29
   2c582:	d0f1      	beq.n	2c568 <put_float32fix+0xc>
   2c584:	2301      	movs	r3, #1
   2c586:	f04f 0200 	mov.w	r2, #0
   2c58a:	4811      	ldr	r0, [pc, #68]	; (2c5d0 <put_float32fix+0x74>)
   2c58c:	f363 0207 	bfi	r2, r3, #0, #8
   2c590:	4b10      	ldr	r3, [pc, #64]	; (2c5d4 <put_float32fix+0x78>)
   2c592:	1a1b      	subs	r3, r3, r0
   2c594:	08db      	lsrs	r3, r3, #3
   2c596:	f363 128f 	bfi	r2, r3, #6, #10
   2c59a:	480f      	ldr	r0, [pc, #60]	; (2c5d8 <put_float32fix+0x7c>)
   2c59c:	f014 fa5e 	bl	40a5c <log_1>
   2c5a0:	e7e2      	b.n	2c568 <put_float32fix+0xc>
			OMA_TLV_TYPE_RESOURCE_INSTANCE : OMA_TLV_TYPE_RESOURCE;
   2c5a2:	79b3      	ldrb	r3, [r6, #6]
   2c5a4:	079b      	lsls	r3, r3, #30
   2c5a6:	d402      	bmi.n	2c5ae <put_float32fix+0x52>
			path->res_inst_id : path->res_id;
   2c5a8:	88a2      	ldrh	r2, [r4, #4]
			OMA_TLV_TYPE_RESOURCE_INSTANCE : OMA_TLV_TYPE_RESOURCE;
   2c5aa:	2303      	movs	r3, #3
   2c5ac:	e001      	b.n	2c5b2 <put_float32fix+0x56>
   2c5ae:	2301      	movs	r3, #1
			path->res_inst_id : path->res_id;
   2c5b0:	88e2      	ldrh	r2, [r4, #6]
		tlv->type = type;
   2c5b2:	f88d 3008 	strb.w	r3, [sp, #8]
		tlv->length = buflen;
   2c5b6:	2304      	movs	r3, #4
		tlv->id = id;
   2c5b8:	f8ad 200a 	strh.w	r2, [sp, #10]
		tlv->length = buflen;
   2c5bc:	9303      	str	r3, [sp, #12]
	len = oma_tlv_put(&tlv, out, b32, false);
   2c5be:	aa01      	add	r2, sp, #4
   2c5c0:	2300      	movs	r3, #0
   2c5c2:	4629      	mov	r1, r5
   2c5c4:	a802      	add	r0, sp, #8
   2c5c6:	f016 ff77 	bl	434b8 <oma_tlv_put>
	return len;
   2c5ca:	e7ce      	b.n	2c56a <put_float32fix+0xe>
   2c5cc:	20032b2c 	.word	0x20032b2c
   2c5d0:	00045f08 	.word	0x00045f08
   2c5d4:	00046058 	.word	0x00046058
   2c5d8:	0004ba35 	.word	0x0004ba35

0002c5dc <get_number>:
	return put_s8(out, path, value_s8);
}

static size_t get_number(struct lwm2m_input_context *in, s64_t *value,
			 u8_t max_len)
{
   2c5dc:	b5f0      	push	{r4, r5, r6, r7, lr}
   2c5de:	b087      	sub	sp, #28
   2c5e0:	460c      	mov	r4, r1
   2c5e2:	4606      	mov	r6, r0
	struct oma_tlv tlv;
	size_t size = oma_tlv_get(&tlv, in, false);
   2c5e4:	4601      	mov	r1, r0
{
   2c5e6:	4617      	mov	r7, r2
	size_t size = oma_tlv_get(&tlv, in, false);
   2c5e8:	a804      	add	r0, sp, #16
   2c5ea:	2200      	movs	r2, #0
   2c5ec:	f017 f88d 	bl	4370a <oma_tlv_get>
	s64_t temp;

	*value = 0;
   2c5f0:	2200      	movs	r2, #0
   2c5f2:	2300      	movs	r3, #0
	if (size > 0) {
   2c5f4:	4605      	mov	r5, r0
	*value = 0;
   2c5f6:	e9c4 2300 	strd	r2, r3, [r4]
	if (size > 0) {
   2c5fa:	b908      	cbnz	r0, 2c600 <get_number+0x24>
		case 8:
			*value = sys_cpu_to_be64(temp);
			break;
		default:
			LOG_ERR("invalid length: %u", tlv.length);
			return 0;
   2c5fc:	2500      	movs	r5, #0
   2c5fe:	e03c      	b.n	2c67a <get_number+0x9e>
		if (tlv.length > max_len) {
   2c600:	9905      	ldr	r1, [sp, #20]
   2c602:	42b9      	cmp	r1, r7
   2c604:	d912      	bls.n	2c62c <get_number+0x50>
			LOG_ERR("invalid length: %u", tlv.length);
   2c606:	4b28      	ldr	r3, [pc, #160]	; (2c6a8 <get_number+0xcc>)
   2c608:	681b      	ldr	r3, [r3, #0]
   2c60a:	075b      	lsls	r3, r3, #29
   2c60c:	d0f6      	beq.n	2c5fc <get_number+0x20>
   2c60e:	2301      	movs	r3, #1
   2c610:	f04f 0200 	mov.w	r2, #0
   2c614:	4825      	ldr	r0, [pc, #148]	; (2c6ac <get_number+0xd0>)
   2c616:	f363 0207 	bfi	r2, r3, #0, #8
   2c61a:	4b25      	ldr	r3, [pc, #148]	; (2c6b0 <get_number+0xd4>)
   2c61c:	1a1b      	subs	r3, r3, r0
   2c61e:	08db      	lsrs	r3, r3, #3
   2c620:	f363 128f 	bfi	r2, r3, #6, #10
   2c624:	4823      	ldr	r0, [pc, #140]	; (2c6b4 <get_number+0xd8>)
   2c626:	f014 fa19 	bl	40a5c <log_1>
   2c62a:	e7e7      	b.n	2c5fc <get_number+0x20>
			     CPKT_BUF_READ(in->in_cpkt), &in->offset) < 0) {
   2c62c:	6872      	ldr	r2, [r6, #4]
		if (buf_read((u8_t *)&temp, tlv.length,
   2c62e:	3608      	adds	r6, #8
   2c630:	88d3      	ldrh	r3, [r2, #6]
   2c632:	9600      	str	r6, [sp, #0]
   2c634:	6812      	ldr	r2, [r2, #0]
   2c636:	b289      	uxth	r1, r1
   2c638:	a802      	add	r0, sp, #8
   2c63a:	f016 feef 	bl	4341c <buf_read>
   2c63e:	2800      	cmp	r0, #0
   2c640:	dbdc      	blt.n	2c5fc <get_number+0x20>
		switch (tlv.length) {
   2c642:	9905      	ldr	r1, [sp, #20]
   2c644:	1e4b      	subs	r3, r1, #1
   2c646:	2b07      	cmp	r3, #7
   2c648:	d8dd      	bhi.n	2c606 <get_number+0x2a>
   2c64a:	a201      	add	r2, pc, #4	; (adr r2, 2c650 <get_number+0x74>)
   2c64c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   2c650:	0002c671 	.word	0x0002c671
   2c654:	0002c681 	.word	0x0002c681
   2c658:	0002c607 	.word	0x0002c607
   2c65c:	0002c691 	.word	0x0002c691
   2c660:	0002c607 	.word	0x0002c607
   2c664:	0002c607 	.word	0x0002c607
   2c668:	0002c607 	.word	0x0002c607
   2c66c:	0002c69d 	.word	0x0002c69d
			*value = (s8_t)temp;
   2c670:	f99d 2008 	ldrsb.w	r2, [sp, #8]
   2c674:	17d3      	asrs	r3, r2, #31
			*value = sys_cpu_to_be16((s16_t)temp);
   2c676:	e9c4 2300 	strd	r2, r3, [r4]
		}
	}

	return size;
}
   2c67a:	4628      	mov	r0, r5
   2c67c:	b007      	add	sp, #28
   2c67e:	bdf0      	pop	{r4, r5, r6, r7, pc}
			*value = sys_cpu_to_be16((s16_t)temp);
   2c680:	f8bd 3008 	ldrh.w	r3, [sp, #8]
   2c684:	021a      	lsls	r2, r3, #8
   2c686:	ea42 2213 	orr.w	r2, r2, r3, lsr #8
   2c68a:	b292      	uxth	r2, r2
   2c68c:	2300      	movs	r3, #0
   2c68e:	e7f2      	b.n	2c676 <get_number+0x9a>
			*value = sys_cpu_to_be32((s32_t)temp);
   2c690:	9b02      	ldr	r3, [sp, #8]
   2c692:	ba1b      	rev	r3, r3
   2c694:	6023      	str	r3, [r4, #0]
   2c696:	2300      	movs	r3, #0
			*value = sys_cpu_to_be64(temp);
   2c698:	6063      	str	r3, [r4, #4]
			break;
   2c69a:	e7ee      	b.n	2c67a <get_number+0x9e>
			*value = sys_cpu_to_be64(temp);
   2c69c:	9a03      	ldr	r2, [sp, #12]
   2c69e:	9b02      	ldr	r3, [sp, #8]
   2c6a0:	ba12      	rev	r2, r2
   2c6a2:	ba1b      	rev	r3, r3
   2c6a4:	6022      	str	r2, [r4, #0]
   2c6a6:	e7f7      	b.n	2c698 <get_number+0xbc>
   2c6a8:	20032b2c 	.word	0x20032b2c
   2c6ac:	00045f08 	.word	0x00045f08
   2c6b0:	00046058 	.word	0x00046058
   2c6b4:	0004ba22 	.word	0x0004ba22

0002c6b8 <get_float64fix>:
	return size;
}

static size_t get_float64fix(struct lwm2m_input_context *in,
			     float64_value_t *value)
{
   2c6b8:	b5f0      	push	{r4, r5, r6, r7, lr}
   2c6ba:	b087      	sub	sp, #28
   2c6bc:	4604      	mov	r4, r0
   2c6be:	460f      	mov	r7, r1
	struct oma_tlv tlv;
	size_t size = oma_tlv_get(&tlv, in, false);
   2c6c0:	2200      	movs	r2, #0
   2c6c2:	4601      	mov	r1, r0
   2c6c4:	a802      	add	r0, sp, #8
   2c6c6:	f017 f820 	bl	4370a <oma_tlv_get>
	u8_t b64[8];
	int ret;

	if (size > 0) {
   2c6ca:	4605      	mov	r5, r0
   2c6cc:	b918      	cbnz	r0, 2c6d6 <get_float64fix+0x1e>
		}

		ret = lwm2m_b64_to_f64(b64, sizeof(b64), value);
		if (ret < 0) {
			LOG_ERR("binary64 conversion error: %d", ret);
			return 0;
   2c6ce:	2500      	movs	r5, #0
		}
	}

	return size;
}
   2c6d0:	4628      	mov	r0, r5
   2c6d2:	b007      	add	sp, #28
   2c6d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (tlv.length != 8U) {
   2c6d6:	9e03      	ldr	r6, [sp, #12]
   2c6d8:	2e08      	cmp	r6, #8
   2c6da:	d024      	beq.n	2c726 <get_float64fix+0x6e>
			LOG_ERR("invalid float64 length: %d", tlv.length);
   2c6dc:	4b24      	ldr	r3, [pc, #144]	; (2c770 <get_float64fix+0xb8>)
   2c6de:	681b      	ldr	r3, [r3, #0]
   2c6e0:	075a      	lsls	r2, r3, #29
   2c6e2:	d00e      	beq.n	2c702 <get_float64fix+0x4a>
   2c6e4:	2301      	movs	r3, #1
   2c6e6:	f04f 0200 	mov.w	r2, #0
   2c6ea:	4922      	ldr	r1, [pc, #136]	; (2c774 <get_float64fix+0xbc>)
   2c6ec:	f363 0207 	bfi	r2, r3, #0, #8
   2c6f0:	4b21      	ldr	r3, [pc, #132]	; (2c778 <get_float64fix+0xc0>)
   2c6f2:	4822      	ldr	r0, [pc, #136]	; (2c77c <get_float64fix+0xc4>)
   2c6f4:	1a5b      	subs	r3, r3, r1
   2c6f6:	08db      	lsrs	r3, r3, #3
   2c6f8:	f363 128f 	bfi	r2, r3, #6, #10
   2c6fc:	4631      	mov	r1, r6
   2c6fe:	f014 f9ad 	bl	40a5c <log_1>
				if (buf_read_u8(b64,
   2c702:	f104 0508 	add.w	r5, r4, #8
			while (tlv.length--) {
   2c706:	9b03      	ldr	r3, [sp, #12]
   2c708:	1e5a      	subs	r2, r3, #1
   2c70a:	9203      	str	r2, [sp, #12]
   2c70c:	2b00      	cmp	r3, #0
   2c70e:	d0de      	beq.n	2c6ce <get_float64fix+0x16>
						CPKT_BUF_READ(in->in_cpkt),
   2c710:	6862      	ldr	r2, [r4, #4]
   2c712:	2101      	movs	r1, #1
   2c714:	88d3      	ldrh	r3, [r2, #6]
   2c716:	9500      	str	r5, [sp, #0]
   2c718:	6812      	ldr	r2, [r2, #0]
   2c71a:	a804      	add	r0, sp, #16
   2c71c:	f016 fe7e 	bl	4341c <buf_read>
				if (buf_read_u8(b64,
   2c720:	2800      	cmp	r0, #0
   2c722:	daf0      	bge.n	2c706 <get_float64fix+0x4e>
   2c724:	e7d3      	b.n	2c6ce <get_float64fix+0x16>
		if (buf_read(b64, tlv.length, CPKT_BUF_READ(in->in_cpkt),
   2c726:	6862      	ldr	r2, [r4, #4]
   2c728:	3408      	adds	r4, #8
   2c72a:	88d3      	ldrh	r3, [r2, #6]
   2c72c:	9400      	str	r4, [sp, #0]
   2c72e:	6812      	ldr	r2, [r2, #0]
   2c730:	4631      	mov	r1, r6
   2c732:	a804      	add	r0, sp, #16
   2c734:	f016 fe72 	bl	4341c <buf_read>
   2c738:	2800      	cmp	r0, #0
   2c73a:	dbc8      	blt.n	2c6ce <get_float64fix+0x16>
		ret = lwm2m_b64_to_f64(b64, sizeof(b64), value);
   2c73c:	4631      	mov	r1, r6
   2c73e:	463a      	mov	r2, r7
   2c740:	a804      	add	r0, sp, #16
   2c742:	f7f0 feb5 	bl	1d4b0 <lwm2m_b64_to_f64>
		if (ret < 0) {
   2c746:	1e01      	subs	r1, r0, #0
   2c748:	dac2      	bge.n	2c6d0 <get_float64fix+0x18>
			LOG_ERR("binary64 conversion error: %d", ret);
   2c74a:	4b09      	ldr	r3, [pc, #36]	; (2c770 <get_float64fix+0xb8>)
   2c74c:	681b      	ldr	r3, [r3, #0]
   2c74e:	075b      	lsls	r3, r3, #29
   2c750:	d0bd      	beq.n	2c6ce <get_float64fix+0x16>
   2c752:	2301      	movs	r3, #1
   2c754:	f04f 0200 	mov.w	r2, #0
   2c758:	4806      	ldr	r0, [pc, #24]	; (2c774 <get_float64fix+0xbc>)
   2c75a:	f363 0207 	bfi	r2, r3, #0, #8
   2c75e:	4b06      	ldr	r3, [pc, #24]	; (2c778 <get_float64fix+0xc0>)
   2c760:	1a1b      	subs	r3, r3, r0
   2c762:	08db      	lsrs	r3, r3, #3
   2c764:	f363 128f 	bfi	r2, r3, #6, #10
   2c768:	4805      	ldr	r0, [pc, #20]	; (2c780 <get_float64fix+0xc8>)
   2c76a:	f014 f977 	bl	40a5c <log_1>
   2c76e:	e7ae      	b.n	2c6ce <get_float64fix+0x16>
   2c770:	20032b2c 	.word	0x20032b2c
   2c774:	00045f08 	.word	0x00045f08
   2c778:	00046058 	.word	0x00046058
   2c77c:	0004b9e9 	.word	0x0004b9e9
   2c780:	0004ba04 	.word	0x0004ba04

0002c784 <get_float32fix>:
{
   2c784:	b5f0      	push	{r4, r5, r6, r7, lr}
   2c786:	b087      	sub	sp, #28
   2c788:	4604      	mov	r4, r0
   2c78a:	460f      	mov	r7, r1
	size_t size = oma_tlv_get(&tlv, in, false);
   2c78c:	2200      	movs	r2, #0
   2c78e:	4601      	mov	r1, r0
   2c790:	a804      	add	r0, sp, #16
   2c792:	f016 ffba 	bl	4370a <oma_tlv_get>
	if (size > 0) {
   2c796:	4605      	mov	r5, r0
   2c798:	b918      	cbnz	r0, 2c7a2 <get_float32fix+0x1e>
			return 0;
   2c79a:	2500      	movs	r5, #0
}
   2c79c:	4628      	mov	r0, r5
   2c79e:	b007      	add	sp, #28
   2c7a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (tlv.length != 4U) {
   2c7a2:	9e05      	ldr	r6, [sp, #20]
   2c7a4:	2e04      	cmp	r6, #4
   2c7a6:	d024      	beq.n	2c7f2 <get_float32fix+0x6e>
			LOG_ERR("Invalid float32 length: %d", tlv.length);
   2c7a8:	4b24      	ldr	r3, [pc, #144]	; (2c83c <get_float32fix+0xb8>)
   2c7aa:	681b      	ldr	r3, [r3, #0]
   2c7ac:	075a      	lsls	r2, r3, #29
   2c7ae:	d00e      	beq.n	2c7ce <get_float32fix+0x4a>
   2c7b0:	2301      	movs	r3, #1
   2c7b2:	f04f 0200 	mov.w	r2, #0
   2c7b6:	4922      	ldr	r1, [pc, #136]	; (2c840 <get_float32fix+0xbc>)
   2c7b8:	f363 0207 	bfi	r2, r3, #0, #8
   2c7bc:	4b21      	ldr	r3, [pc, #132]	; (2c844 <get_float32fix+0xc0>)
   2c7be:	4822      	ldr	r0, [pc, #136]	; (2c848 <get_float32fix+0xc4>)
   2c7c0:	1a5b      	subs	r3, r3, r1
   2c7c2:	08db      	lsrs	r3, r3, #3
   2c7c4:	f363 128f 	bfi	r2, r3, #6, #10
   2c7c8:	4631      	mov	r1, r6
   2c7ca:	f014 f947 	bl	40a5c <log_1>
				if (buf_read_u8(b32,
   2c7ce:	f104 0508 	add.w	r5, r4, #8
			while (tlv.length--) {
   2c7d2:	9b05      	ldr	r3, [sp, #20]
   2c7d4:	1e5a      	subs	r2, r3, #1
   2c7d6:	9205      	str	r2, [sp, #20]
   2c7d8:	2b00      	cmp	r3, #0
   2c7da:	d0de      	beq.n	2c79a <get_float32fix+0x16>
						CPKT_BUF_READ(in->in_cpkt),
   2c7dc:	6862      	ldr	r2, [r4, #4]
   2c7de:	2101      	movs	r1, #1
   2c7e0:	88d3      	ldrh	r3, [r2, #6]
   2c7e2:	9500      	str	r5, [sp, #0]
   2c7e4:	6812      	ldr	r2, [r2, #0]
   2c7e6:	a803      	add	r0, sp, #12
   2c7e8:	f016 fe18 	bl	4341c <buf_read>
				if (buf_read_u8(b32,
   2c7ec:	2800      	cmp	r0, #0
   2c7ee:	daf0      	bge.n	2c7d2 <get_float32fix+0x4e>
   2c7f0:	e7d3      	b.n	2c79a <get_float32fix+0x16>
		if (buf_read(b32, tlv.length, CPKT_BUF_READ(in->in_cpkt),
   2c7f2:	6862      	ldr	r2, [r4, #4]
   2c7f4:	3408      	adds	r4, #8
   2c7f6:	88d3      	ldrh	r3, [r2, #6]
   2c7f8:	9400      	str	r4, [sp, #0]
   2c7fa:	6812      	ldr	r2, [r2, #0]
   2c7fc:	4631      	mov	r1, r6
   2c7fe:	a803      	add	r0, sp, #12
   2c800:	f016 fe0c 	bl	4341c <buf_read>
   2c804:	2800      	cmp	r0, #0
   2c806:	dbc8      	blt.n	2c79a <get_float32fix+0x16>
		ret = lwm2m_b32_to_f32(b32, sizeof(b32), value);
   2c808:	4631      	mov	r1, r6
   2c80a:	463a      	mov	r2, r7
   2c80c:	a803      	add	r0, sp, #12
   2c80e:	f000 f87b 	bl	2c908 <lwm2m_b32_to_f32>
		if (ret < 0) {
   2c812:	1e01      	subs	r1, r0, #0
   2c814:	dac2      	bge.n	2c79c <get_float32fix+0x18>
			LOG_ERR("binary32 conversion error: %d", ret);
   2c816:	4b09      	ldr	r3, [pc, #36]	; (2c83c <get_float32fix+0xb8>)
   2c818:	681b      	ldr	r3, [r3, #0]
   2c81a:	075b      	lsls	r3, r3, #29
   2c81c:	d0bd      	beq.n	2c79a <get_float32fix+0x16>
   2c81e:	2301      	movs	r3, #1
   2c820:	f04f 0200 	mov.w	r2, #0
   2c824:	4806      	ldr	r0, [pc, #24]	; (2c840 <get_float32fix+0xbc>)
   2c826:	f363 0207 	bfi	r2, r3, #0, #8
   2c82a:	4b06      	ldr	r3, [pc, #24]	; (2c844 <get_float32fix+0xc0>)
   2c82c:	1a1b      	subs	r3, r3, r0
   2c82e:	08db      	lsrs	r3, r3, #3
   2c830:	f363 128f 	bfi	r2, r3, #6, #10
   2c834:	4805      	ldr	r0, [pc, #20]	; (2c84c <get_float32fix+0xc8>)
   2c836:	f014 f911 	bl	40a5c <log_1>
   2c83a:	e7ae      	b.n	2c79a <get_float32fix+0x16>
   2c83c:	20032b2c 	.word	0x20032b2c
   2c840:	00045f08 	.word	0x00045f08
   2c844:	00046058 	.word	0x00046058
   2c848:	0004b9b0 	.word	0x0004b9b0
   2c84c:	0004b9cb 	.word	0x0004b9cb

0002c850 <lwm2m_f32_to_b32>:
	if (len != 4) {
   2c850:	2a04      	cmp	r2, #4
{
   2c852:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2c854:	4607      	mov	r7, r0
   2c856:	460e      	mov	r6, r1
	if (len != 4) {
   2c858:	d150      	bne.n	2c8fc <lwm2m_f32_to_b32+0xac>
	if (f32->val1 == 0 && f32->val2 == 0) {
   2c85a:	6800      	ldr	r0, [r0, #0]
   2c85c:	b920      	cbnz	r0, 2c868 <lwm2m_f32_to_b32+0x18>
   2c85e:	687b      	ldr	r3, [r7, #4]
   2c860:	b913      	cbnz	r3, 2c868 <lwm2m_f32_to_b32+0x18>
__ssp_bos_icheck3(memset, void *, int)
   2c862:	600b      	str	r3, [r1, #0]
}
   2c864:	4618      	mov	r0, r3
   2c866:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	v = abs(f32->val1);
   2c868:	f018 face 	bl	44e08 <abs>
	s32_t e = -1, v, f = 0;
   2c86c:	2400      	movs	r4, #0
   2c86e:	f04f 35ff 	mov.w	r5, #4294967295
	while (v > 0) {
   2c872:	2800      	cmp	r0, #0
   2c874:	dc20      	bgt.n	2c8b8 <lwm2m_f32_to_b32+0x68>
	v = abs(f32->val2);
   2c876:	6878      	ldr	r0, [r7, #4]
   2c878:	f018 fac6 	bl	44e08 <abs>
	while (v > 0 && i < 23) {
   2c87c:	462b      	mov	r3, r5
			f |= 1 << (22 - i);
   2c87e:	f04f 0c01 	mov.w	ip, #1
   2c882:	4920      	ldr	r1, [pc, #128]	; (2c904 <lwm2m_f32_to_b32+0xb4>)
	while (v > 0 && i < 23) {
   2c884:	2800      	cmp	r0, #0
   2c886:	dd01      	ble.n	2c88c <lwm2m_f32_to_b32+0x3c>
   2c888:	2b16      	cmp	r3, #22
   2c88a:	dd1e      	ble.n	2c8ca <lwm2m_f32_to_b32+0x7a>
   2c88c:	2300      	movs	r3, #0
   2c88e:	6033      	str	r3, [r6, #0]
	if (f32->val1 == 0) {
   2c890:	683b      	ldr	r3, [r7, #0]
	e += 127;
   2c892:	357f      	adds	r5, #127	; 0x7f
	if (f32->val1 == 0) {
   2c894:	bb83      	cbnz	r3, 2c8f8 <lwm2m_f32_to_b32+0xa8>
		b32[0] = f32->val2 < 0 ? 0x80 : 0;
   2c896:	f997 3007 	ldrsb.w	r3, [r7, #7]
		b32[0] = f32->val1 < 0 ? 0x80 : 0;
   2c89a:	f003 0380 	and.w	r3, r3, #128	; 0x80
	b32[0] |= e >> 1;
   2c89e:	ea43 0365 	orr.w	r3, r3, r5, asr #1
   2c8a2:	7033      	strb	r3, [r6, #0]
	b32[1] |= (f >> 16) & 0x7F;
   2c8a4:	f3c4 4306 	ubfx	r3, r4, #16, #7
   2c8a8:	ea43 15c5 	orr.w	r5, r3, r5, lsl #7
	b32[2] = (f >> 8) & 0xFF;
   2c8ac:	1223      	asrs	r3, r4, #8
   2c8ae:	70b3      	strb	r3, [r6, #2]
	b32[1] |= (f >> 16) & 0x7F;
   2c8b0:	7075      	strb	r5, [r6, #1]
	b32[3] = f & 0xFF;
   2c8b2:	70f4      	strb	r4, [r6, #3]
	return 0;
   2c8b4:	2300      	movs	r3, #0
   2c8b6:	e7d5      	b.n	2c864 <lwm2m_f32_to_b32+0x14>
		if (v & 1) {
   2c8b8:	07c3      	lsls	r3, r0, #31
		f >>= 1;
   2c8ba:	ea4f 0464 	mov.w	r4, r4, asr #1
			f |= (1 << 23);
   2c8be:	bf48      	it	mi
   2c8c0:	f444 0400 	orrmi.w	r4, r4, #8388608	; 0x800000
		v >>= 1;
   2c8c4:	1040      	asrs	r0, r0, #1
		e++;
   2c8c6:	3501      	adds	r5, #1
   2c8c8:	e7d3      	b.n	2c872 <lwm2m_f32_to_b32+0x22>
		v *= 2;
   2c8ca:	0040      	lsls	r0, r0, #1
		if (!f && e < 0 && v < LWM2M_FLOAT32_DEC_MAX) {
   2c8cc:	b92c      	cbnz	r4, 2c8da <lwm2m_f32_to_b32+0x8a>
   2c8ce:	2d00      	cmp	r5, #0
   2c8d0:	da03      	bge.n	2c8da <lwm2m_f32_to_b32+0x8a>
   2c8d2:	4288      	cmp	r0, r1
   2c8d4:	dc03      	bgt.n	2c8de <lwm2m_f32_to_b32+0x8e>
			e--;
   2c8d6:	3d01      	subs	r5, #1
			continue;
   2c8d8:	e7d4      	b.n	2c884 <lwm2m_f32_to_b32+0x34>
		} else if (v >= LWM2M_FLOAT32_DEC_MAX) {
   2c8da:	4288      	cmp	r0, r1
   2c8dc:	dd0a      	ble.n	2c8f4 <lwm2m_f32_to_b32+0xa4>
			v -= LWM2M_FLOAT32_DEC_MAX;
   2c8de:	f5a0 2074 	sub.w	r0, r0, #999424	; 0xf4000
			f |= 1 << (22 - i);
   2c8e2:	f1c3 0216 	rsb	r2, r3, #22
   2c8e6:	fa0c f202 	lsl.w	r2, ip, r2
			v -= LWM2M_FLOAT32_DEC_MAX;
   2c8ea:	f5a0 7010 	sub.w	r0, r0, #576	; 0x240
			f |= 1 << (22 - i);
   2c8ee:	4314      	orrs	r4, r2
		if (v == 0) {
   2c8f0:	2800      	cmp	r0, #0
   2c8f2:	d0cb      	beq.n	2c88c <lwm2m_f32_to_b32+0x3c>
		i++;
   2c8f4:	3301      	adds	r3, #1
   2c8f6:	e7c5      	b.n	2c884 <lwm2m_f32_to_b32+0x34>
		b32[0] = f32->val1 < 0 ? 0x80 : 0;
   2c8f8:	161b      	asrs	r3, r3, #24
   2c8fa:	e7ce      	b.n	2c89a <lwm2m_f32_to_b32+0x4a>
		return -EINVAL;
   2c8fc:	f06f 0315 	mvn.w	r3, #21
   2c900:	e7b0      	b.n	2c864 <lwm2m_f32_to_b32+0x14>
   2c902:	bf00      	nop
   2c904:	000f423f 	.word	0x000f423f

0002c908 <lwm2m_b32_to_f32>:
	if (len != 4) {
   2c908:	2904      	cmp	r1, #4
{
   2c90a:	b570      	push	{r4, r5, r6, lr}
	if (len != 4) {
   2c90c:	d140      	bne.n	2c990 <lwm2m_b32_to_f32+0x88>
	f32->val1 = 0;
   2c90e:	2300      	movs	r3, #0
	f32->val2 = 0;
   2c910:	e9c2 3300 	strd	r3, r3, [r2]
	sign = SHIFT_RIGHT(b32[0], 7, 0x1);
   2c914:	7805      	ldrb	r5, [r0, #0]
	e += SHIFT_RIGHT(b32[1], 7, 0x1);
   2c916:	7841      	ldrb	r1, [r0, #1]
	e  = SHIFT_LEFT(b32[0], 1, 0xFF);
   2c918:	006b      	lsls	r3, r5, #1
	f += ((s32_t)b32[2] << 8);
   2c91a:	7886      	ldrb	r6, [r0, #2]
	f += b32[3];
   2c91c:	78c0      	ldrb	r0, [r0, #3]
	e  = SHIFT_LEFT(b32[0], 1, 0xFF);
   2c91e:	b2dc      	uxtb	r4, r3
	e += SHIFT_RIGHT(b32[1], 7, 0x1);
   2c920:	09cb      	lsrs	r3, r1, #7
	e -= 127;
   2c922:	3b7f      	subs	r3, #127	; 0x7f
	f += b32[3];
   2c924:	f500 0080 	add.w	r0, r0, #4194304	; 0x400000
	f += ((s32_t)(b32[1] & 0x7F) << 16);
   2c928:	0409      	lsls	r1, r1, #16
	f += b32[3];
   2c92a:	eb00 2006 	add.w	r0, r0, r6, lsl #8
	f += ((s32_t)(b32[1] & 0x7F) << 16);
   2c92e:	f401 01fe 	and.w	r1, r1, #8323072	; 0x7f0000
	if (e > -1) {
   2c932:	191b      	adds	r3, r3, r4
	f += b32[3];
   2c934:	4408      	add	r0, r1
	if (e > -1) {
   2c936:	d41b      	bmi.n	2c970 <lwm2m_b32_to_f32+0x68>
		if (e > 23) {
   2c938:	2b17      	cmp	r3, #23
   2c93a:	bfa8      	it	ge
   2c93c:	2317      	movge	r3, #23
		f32->val1 = (f >> (23 - e)) * (sign ? -1 : 1);
   2c93e:	f1c3 0117 	rsb	r1, r3, #23
   2c942:	fa40 f401 	asr.w	r4, r0, r1
   2c946:	09e9      	lsrs	r1, r5, #7
   2c948:	bf14      	ite	ne
   2c94a:	f04f 31ff 	movne.w	r1, #4294967295
   2c94e:	2101      	moveq	r1, #1
   2c950:	4361      	muls	r1, r4
   2c952:	6011      	str	r1, [r2, #0]
	k = LWM2M_FLOAT32_DEC_MAX;
   2c954:	4910      	ldr	r1, [pc, #64]	; (2c998 <lwm2m_b32_to_f32+0x90>)
	for (i = 22 - e; i >= 0; i--) {
   2c956:	f1c3 0316 	rsb	r3, r3, #22
   2c95a:	1c5c      	adds	r4, r3, #1
   2c95c:	d10a      	bne.n	2c974 <lwm2m_b32_to_f32+0x6c>
	return 0;
   2c95e:	2000      	movs	r0, #0
}
   2c960:	bd70      	pop	{r4, r5, r6, pc}
		k /= 2;
   2c962:	eb01 71d1 	add.w	r1, r1, r1, lsr #31
   2c966:	1049      	asrs	r1, r1, #1
		e++;
   2c968:	3301      	adds	r3, #1
	while (e < -1) {
   2c96a:	1c5e      	adds	r6, r3, #1
   2c96c:	d1f9      	bne.n	2c962 <lwm2m_b32_to_f32+0x5a>
   2c96e:	e7f2      	b.n	2c956 <lwm2m_b32_to_f32+0x4e>
	k = LWM2M_FLOAT32_DEC_MAX;
   2c970:	4909      	ldr	r1, [pc, #36]	; (2c998 <lwm2m_b32_to_f32+0x90>)
   2c972:	e7fa      	b.n	2c96a <lwm2m_b32_to_f32+0x62>
		if (f & (1 << i)) {
   2c974:	fa40 f403 	asr.w	r4, r0, r3
   2c978:	07e5      	lsls	r5, r4, #31
			f32->val2 += k;
   2c97a:	bf48      	it	mi
   2c97c:	6854      	ldrmi	r4, [r2, #4]
		k /= 2;
   2c97e:	eb01 71d1 	add.w	r1, r1, r1, lsr #31
   2c982:	ea4f 0161 	mov.w	r1, r1, asr #1
			f32->val2 += k;
   2c986:	bf44      	itt	mi
   2c988:	1864      	addmi	r4, r4, r1
   2c98a:	6054      	strmi	r4, [r2, #4]
	for (i = 22 - e; i >= 0; i--) {
   2c98c:	3b01      	subs	r3, #1
   2c98e:	e7e4      	b.n	2c95a <lwm2m_b32_to_f32+0x52>
		return -EINVAL;
   2c990:	f06f 0015 	mvn.w	r0, #21
   2c994:	e7e4      	b.n	2c960 <lwm2m_b32_to_f32+0x58>
   2c996:	bf00      	nop
   2c998:	000f4240 	.word	0x000f4240

0002c99c <set_sm_state>:
		event = LWM2M_RD_CLIENT_EVENT_BOOTSTRAP_REG_COMPLETE;
	} else if (sm_state == ENGINE_BOOTSTRAP_TRANS_DONE) {
		event = LWM2M_RD_CLIENT_EVENT_BOOTSTRAP_TRANSFER_COMPLETE;
	} else
#endif
	if (client.engine_state == ENGINE_UPDATE_SENT &&
   2c99c:	4b10      	ldr	r3, [pc, #64]	; (2c9e0 <set_sm_state+0x44>)
   2c99e:	7a1a      	ldrb	r2, [r3, #8]
   2c9a0:	2a04      	cmp	r2, #4
   2c9a2:	d107      	bne.n	2c9b4 <set_sm_state+0x18>
   2c9a4:	2803      	cmp	r0, #3
   2c9a6:	d113      	bne.n	2c9d0 <set_sm_state+0x34>
	    sm_state == ENGINE_REGISTRATION_DONE) {
		event = LWM2M_RD_CLIENT_EVENT_REG_UPDATE_COMPLETE;
   2c9a8:	2107      	movs	r1, #7
		    client.engine_state <= ENGINE_DEREGISTER_SENT)) {
		event = LWM2M_RD_CLIENT_EVENT_DISCONNECT;
	}

	/* TODO: add locking? */
	client.engine_state = sm_state;
   2c9aa:	7218      	strb	r0, [r3, #8]

	if (event > LWM2M_RD_CLIENT_EVENT_NONE && client.event_cb) {
   2c9ac:	6dda      	ldr	r2, [r3, #92]	; 0x5c
   2c9ae:	b1aa      	cbz	r2, 2c9dc <set_sm_state+0x40>
		client.event_cb(client.ctx, event);
   2c9b0:	6858      	ldr	r0, [r3, #4]
   2c9b2:	4710      	bx	r2
	} else if (sm_state == ENGINE_REGISTRATION_DONE) {
   2c9b4:	2803      	cmp	r0, #3
   2c9b6:	d008      	beq.n	2c9ca <set_sm_state+0x2e>
	} else if ((sm_state == ENGINE_INIT ||
   2c9b8:	b108      	cbz	r0, 2c9be <set_sm_state+0x22>
   2c9ba:	2808      	cmp	r0, #8
   2c9bc:	d10c      	bne.n	2c9d8 <set_sm_state+0x3c>
		    sm_state == ENGINE_DEREGISTERED) &&
   2c9be:	3a01      	subs	r2, #1
   2c9c0:	2a05      	cmp	r2, #5
   2c9c2:	d809      	bhi.n	2c9d8 <set_sm_state+0x3c>
	client.engine_state = sm_state;
   2c9c4:	7218      	strb	r0, [r3, #8]
		event = LWM2M_RD_CLIENT_EVENT_DISCONNECT;
   2c9c6:	2109      	movs	r1, #9
   2c9c8:	e7f0      	b.n	2c9ac <set_sm_state+0x10>
	client.engine_state = sm_state;
   2c9ca:	7218      	strb	r0, [r3, #8]
		event = LWM2M_RD_CLIENT_EVENT_REGISTRATION_COMPLETE;
   2c9cc:	2105      	movs	r1, #5
   2c9ce:	e7ed      	b.n	2c9ac <set_sm_state+0x10>
	} else if ((sm_state == ENGINE_INIT ||
   2c9d0:	2800      	cmp	r0, #0
   2c9d2:	d0f7      	beq.n	2c9c4 <set_sm_state+0x28>
   2c9d4:	2808      	cmp	r0, #8
   2c9d6:	d0f5      	beq.n	2c9c4 <set_sm_state+0x28>
	client.engine_state = sm_state;
   2c9d8:	7218      	strb	r0, [r3, #8]
	if (event > LWM2M_RD_CLIENT_EVENT_NONE && client.event_cb) {
   2c9da:	4770      	bx	lr
	}
}
   2c9dc:	4770      	bx	lr
   2c9de:	bf00      	nop
   2c9e0:	20020c80 	.word	0x20020c80

0002c9e4 <lwm2m_rd_client_init>:
	LOG_INF("Stop LWM2M Client: %s", log_strdup(client.ep_name));
}

static int lwm2m_rd_client_init(struct device *dev)
{
	return lwm2m_engine_add_service(lwm2m_rd_client_service,
   2c9e4:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
   2c9e8:	4801      	ldr	r0, [pc, #4]	; (2c9f0 <lwm2m_rd_client_init+0xc>)
   2c9ea:	f7fe bcd7 	b.w	2b39c <lwm2m_engine_add_service>
   2c9ee:	bf00      	nop
   2c9f0:	0002cf75 	.word	0x0002cf75

0002c9f4 <do_update_reply_cb>:
{
   2c9f4:	b538      	push	{r3, r4, r5, lr}
	code = coap_header_get_code(response);
   2c9f6:	f015 fd7f 	bl	424f8 <coap_header_get_code>
	LOG_INF("Update callback (code:%u.%u)",
   2c9fa:	4d27      	ldr	r5, [pc, #156]	; (2ca98 <do_update_reply_cb+0xa4>)
	code = coap_header_get_code(response);
   2c9fc:	4604      	mov	r4, r0
	LOG_INF("Update callback (code:%u.%u)",
   2c9fe:	682b      	ldr	r3, [r5, #0]
   2ca00:	f003 0307 	and.w	r3, r3, #7
   2ca04:	2b02      	cmp	r3, #2
   2ca06:	d911      	bls.n	2ca2c <do_update_reply_cb+0x38>
   2ca08:	2203      	movs	r2, #3
   2ca0a:	f04f 0300 	mov.w	r3, #0
   2ca0e:	4923      	ldr	r1, [pc, #140]	; (2ca9c <do_update_reply_cb+0xa8>)
   2ca10:	f362 0307 	bfi	r3, r2, #0, #8
   2ca14:	4a22      	ldr	r2, [pc, #136]	; (2caa0 <do_update_reply_cb+0xac>)
   2ca16:	1a52      	subs	r2, r2, r1
   2ca18:	08d2      	lsrs	r2, r2, #3
   2ca1a:	f362 138f 	bfi	r3, r2, #6, #10
   2ca1e:	f3c0 1147 	ubfx	r1, r0, #5, #8
   2ca22:	f000 021f 	and.w	r2, r0, #31
   2ca26:	481f      	ldr	r0, [pc, #124]	; (2caa4 <do_update_reply_cb+0xb0>)
   2ca28:	f014 f82c 	bl	40a84 <log_2>
	if ((code == COAP_RESPONSE_CODE_CHANGED) ||
   2ca2c:	2c44      	cmp	r4, #68	; 0x44
   2ca2e:	d001      	beq.n	2ca34 <do_update_reply_cb+0x40>
   2ca30:	2c41      	cmp	r4, #65	; 0x41
   2ca32:	d117      	bne.n	2ca64 <do_update_reply_cb+0x70>
		set_sm_state(ENGINE_REGISTRATION_DONE);
   2ca34:	2003      	movs	r0, #3
   2ca36:	f7ff ffb1 	bl	2c99c <set_sm_state>
		LOG_INF("Update Done");
   2ca3a:	682b      	ldr	r3, [r5, #0]
   2ca3c:	f003 0307 	and.w	r3, r3, #7
   2ca40:	2b02      	cmp	r3, #2
   2ca42:	d90d      	bls.n	2ca60 <do_update_reply_cb+0x6c>
   2ca44:	2303      	movs	r3, #3
   2ca46:	f04f 0100 	mov.w	r1, #0
   2ca4a:	4a14      	ldr	r2, [pc, #80]	; (2ca9c <do_update_reply_cb+0xa8>)
   2ca4c:	f363 0107 	bfi	r1, r3, #0, #8
   2ca50:	4b13      	ldr	r3, [pc, #76]	; (2caa0 <do_update_reply_cb+0xac>)
   2ca52:	4815      	ldr	r0, [pc, #84]	; (2caa8 <do_update_reply_cb+0xb4>)
   2ca54:	1a9b      	subs	r3, r3, r2
   2ca56:	08db      	lsrs	r3, r3, #3
   2ca58:	f363 118f 	bfi	r1, r3, #6, #10
   2ca5c:	f013 fff1 	bl	40a42 <log_0>
}
   2ca60:	2000      	movs	r0, #0
   2ca62:	bd38      	pop	{r3, r4, r5, pc}
	LOG_ERR("Failed with code %u.%u. Retrying registration",
   2ca64:	682b      	ldr	r3, [r5, #0]
   2ca66:	075b      	lsls	r3, r3, #29
   2ca68:	d011      	beq.n	2ca8e <do_update_reply_cb+0x9a>
   2ca6a:	2201      	movs	r2, #1
   2ca6c:	f04f 0300 	mov.w	r3, #0
   2ca70:	490a      	ldr	r1, [pc, #40]	; (2ca9c <do_update_reply_cb+0xa8>)
   2ca72:	f362 0307 	bfi	r3, r2, #0, #8
   2ca76:	4a0a      	ldr	r2, [pc, #40]	; (2caa0 <do_update_reply_cb+0xac>)
   2ca78:	480c      	ldr	r0, [pc, #48]	; (2caac <do_update_reply_cb+0xb8>)
   2ca7a:	1a52      	subs	r2, r2, r1
   2ca7c:	08d2      	lsrs	r2, r2, #3
   2ca7e:	f362 138f 	bfi	r3, r2, #6, #10
   2ca82:	f3c4 1147 	ubfx	r1, r4, #5, #8
   2ca86:	f004 021f 	and.w	r2, r4, #31
   2ca8a:	f013 fffb 	bl	40a84 <log_2>
	set_sm_state(ENGINE_DO_REGISTRATION);
   2ca8e:	2001      	movs	r0, #1
   2ca90:	f7ff ff84 	bl	2c99c <set_sm_state>
	return 0;
   2ca94:	e7e4      	b.n	2ca60 <do_update_reply_cb+0x6c>
   2ca96:	bf00      	nop
   2ca98:	20032b34 	.word	0x20032b34
   2ca9c:	00045f08 	.word	0x00045f08
   2caa0:	00046068 	.word	0x00046068
   2caa4:	0004bba8 	.word	0x0004bba8
   2caa8:	0004bbc5 	.word	0x0004bbc5
   2caac:	0004bbd1 	.word	0x0004bbd1

0002cab0 <do_registration_reply_cb>:
{
   2cab0:	b570      	push	{r4, r5, r6, lr}
   2cab2:	b088      	sub	sp, #32
   2cab4:	4604      	mov	r4, r0
	code = coap_header_get_code(response);
   2cab6:	f015 fd1f 	bl	424f8 <coap_header_get_code>
	if (code == COAP_RESPONSE_CODE_CREATED) {
   2caba:	2841      	cmp	r0, #65	; 0x41
   2cabc:	4d50      	ldr	r5, [pc, #320]	; (2cc00 <do_registration_reply_cb+0x150>)
   2cabe:	d15f      	bne.n	2cb80 <do_registration_reply_cb+0xd0>
		ret = coap_find_options(response, COAP_OPTION_LOCATION_PATH,
   2cac0:	2302      	movs	r3, #2
   2cac2:	466a      	mov	r2, sp
   2cac4:	2108      	movs	r1, #8
   2cac6:	4620      	mov	r0, r4
   2cac8:	f015 fc9c 	bl	42404 <coap_find_options>
		if (ret < 2) {
   2cacc:	2801      	cmp	r0, #1
   2cace:	dc13      	bgt.n	2caf8 <do_registration_reply_cb+0x48>
			LOG_ERR("Unexpected endpoint data returned.");
   2cad0:	682b      	ldr	r3, [r5, #0]
   2cad2:	075a      	lsls	r2, r3, #29
   2cad4:	d00d      	beq.n	2caf2 <do_registration_reply_cb+0x42>
   2cad6:	2301      	movs	r3, #1
   2cad8:	f04f 0100 	mov.w	r1, #0
   2cadc:	4a49      	ldr	r2, [pc, #292]	; (2cc04 <do_registration_reply_cb+0x154>)
   2cade:	f363 0107 	bfi	r1, r3, #0, #8
   2cae2:	4b49      	ldr	r3, [pc, #292]	; (2cc08 <do_registration_reply_cb+0x158>)
   2cae4:	4849      	ldr	r0, [pc, #292]	; (2cc0c <do_registration_reply_cb+0x15c>)
   2cae6:	1a9b      	subs	r3, r3, r2
   2cae8:	08db      	lsrs	r3, r3, #3
   2caea:	f363 118f 	bfi	r1, r3, #6, #10
   2caee:	f013 ffa8 	bl	40a42 <log_0>
			return -EINVAL;
   2caf2:	f06f 0015 	mvn.w	r0, #21
   2caf6:	e05b      	b.n	2cbb0 <do_registration_reply_cb+0x100>
		if (options[1].len + 1 > sizeof(client.server_ep)) {
   2caf8:	f89d 4012 	ldrb.w	r4, [sp, #18]
   2cafc:	1c63      	adds	r3, r4, #1
   2cafe:	2b21      	cmp	r3, #33	; 0x21
   2cb00:	dd13      	ble.n	2cb2a <do_registration_reply_cb+0x7a>
			LOG_ERR("Unexpected length of query: "
   2cb02:	682b      	ldr	r3, [r5, #0]
   2cb04:	075b      	lsls	r3, r3, #29
   2cb06:	d0f4      	beq.n	2caf2 <do_registration_reply_cb+0x42>
   2cb08:	2201      	movs	r2, #1
   2cb0a:	f04f 0300 	mov.w	r3, #0
   2cb0e:	493d      	ldr	r1, [pc, #244]	; (2cc04 <do_registration_reply_cb+0x154>)
   2cb10:	f362 0307 	bfi	r3, r2, #0, #8
   2cb14:	4a3c      	ldr	r2, [pc, #240]	; (2cc08 <do_registration_reply_cb+0x158>)
   2cb16:	483e      	ldr	r0, [pc, #248]	; (2cc10 <do_registration_reply_cb+0x160>)
   2cb18:	1a52      	subs	r2, r2, r1
   2cb1a:	08d2      	lsrs	r2, r2, #3
   2cb1c:	f362 138f 	bfi	r3, r2, #6, #10
   2cb20:	4621      	mov	r1, r4
   2cb22:	2221      	movs	r2, #33	; 0x21
   2cb24:	f013 ffae 	bl	40a84 <log_2>
   2cb28:	e7e3      	b.n	2caf2 <do_registration_reply_cb+0x42>
		memcpy(client.server_ep, options[1].value,
   2cb2a:	4e3a      	ldr	r6, [pc, #232]	; (2cc14 <do_registration_reply_cb+0x164>)
   2cb2c:	4622      	mov	r2, r4
   2cb2e:	2327      	movs	r3, #39	; 0x27
   2cb30:	f10d 0113 	add.w	r1, sp, #19
   2cb34:	f106 0039 	add.w	r0, r6, #57	; 0x39
   2cb38:	f018 f997 	bl	44e6a <__memcpy_chk>
		client.server_ep[options[1].len] = '\0';
   2cb3c:	1933      	adds	r3, r6, r4
   2cb3e:	2400      	movs	r4, #0
		set_sm_state(ENGINE_REGISTRATION_DONE);
   2cb40:	2003      	movs	r0, #3
		client.server_ep[options[1].len] = '\0';
   2cb42:	f883 4039 	strb.w	r4, [r3, #57]	; 0x39
		set_sm_state(ENGINE_REGISTRATION_DONE);
   2cb46:	f7ff ff29 	bl	2c99c <set_sm_state>
		LOG_INF("Registration Done (EP='%s')",
   2cb4a:	682b      	ldr	r3, [r5, #0]
   2cb4c:	f003 0307 	and.w	r3, r3, #7
   2cb50:	2b02      	cmp	r3, #2
   2cb52:	d913      	bls.n	2cb7c <do_registration_reply_cb+0xcc>
   2cb54:	2303      	movs	r3, #3
   2cb56:	f04f 0500 	mov.w	r5, #0
   2cb5a:	4a2a      	ldr	r2, [pc, #168]	; (2cc04 <do_registration_reply_cb+0x154>)
   2cb5c:	f363 0507 	bfi	r5, r3, #0, #8
   2cb60:	4b29      	ldr	r3, [pc, #164]	; (2cc08 <do_registration_reply_cb+0x158>)
   2cb62:	f106 0039 	add.w	r0, r6, #57	; 0x39
   2cb66:	1a9b      	subs	r3, r3, r2
   2cb68:	08db      	lsrs	r3, r3, #3
   2cb6a:	f363 158f 	bfi	r5, r3, #6, #10
   2cb6e:	f7f5 f89d 	bl	21cac <log_strdup>
   2cb72:	462a      	mov	r2, r5
   2cb74:	4601      	mov	r1, r0
   2cb76:	4828      	ldr	r0, [pc, #160]	; (2cc18 <do_registration_reply_cb+0x168>)
   2cb78:	f013 ff70 	bl	40a5c <log_1>
		return 0;
   2cb7c:	4620      	mov	r0, r4
   2cb7e:	e017      	b.n	2cbb0 <do_registration_reply_cb+0x100>
	} else if (code == COAP_RESPONSE_CODE_NOT_FOUND) {
   2cb80:	682b      	ldr	r3, [r5, #0]
   2cb82:	2884      	cmp	r0, #132	; 0x84
   2cb84:	f003 0307 	and.w	r3, r3, #7
   2cb88:	d114      	bne.n	2cbb4 <do_registration_reply_cb+0x104>
		LOG_ERR("Failed: NOT_FOUND.  Not Retrying.");
   2cb8a:	b16b      	cbz	r3, 2cba8 <do_registration_reply_cb+0xf8>
   2cb8c:	2301      	movs	r3, #1
   2cb8e:	f04f 0100 	mov.w	r1, #0
   2cb92:	4a1c      	ldr	r2, [pc, #112]	; (2cc04 <do_registration_reply_cb+0x154>)
   2cb94:	f363 0107 	bfi	r1, r3, #0, #8
   2cb98:	4b1b      	ldr	r3, [pc, #108]	; (2cc08 <do_registration_reply_cb+0x158>)
   2cb9a:	4820      	ldr	r0, [pc, #128]	; (2cc1c <do_registration_reply_cb+0x16c>)
   2cb9c:	1a9b      	subs	r3, r3, r2
   2cb9e:	08db      	lsrs	r3, r3, #3
   2cba0:	f363 118f 	bfi	r1, r3, #6, #10
   2cba4:	f013 ff4d 	bl	40a42 <log_0>
		set_sm_state(ENGINE_REGISTRATION_DONE);
   2cba8:	2003      	movs	r0, #3
	set_sm_state(ENGINE_INIT);
   2cbaa:	f7ff fef7 	bl	2c99c <set_sm_state>
	return 0;
   2cbae:	2000      	movs	r0, #0
}
   2cbb0:	b008      	add	sp, #32
   2cbb2:	bd70      	pop	{r4, r5, r6, pc}
	} else if (code == COAP_RESPONSE_CODE_FORBIDDEN) {
   2cbb4:	2883      	cmp	r0, #131	; 0x83
   2cbb6:	d10e      	bne.n	2cbd6 <do_registration_reply_cb+0x126>
		LOG_ERR("Failed: 4.03 - Forbidden.  Not Retrying.");
   2cbb8:	2b00      	cmp	r3, #0
   2cbba:	d0f5      	beq.n	2cba8 <do_registration_reply_cb+0xf8>
   2cbbc:	2301      	movs	r3, #1
   2cbbe:	f04f 0100 	mov.w	r1, #0
   2cbc2:	4a10      	ldr	r2, [pc, #64]	; (2cc04 <do_registration_reply_cb+0x154>)
   2cbc4:	f363 0107 	bfi	r1, r3, #0, #8
   2cbc8:	4b0f      	ldr	r3, [pc, #60]	; (2cc08 <do_registration_reply_cb+0x158>)
   2cbca:	4815      	ldr	r0, [pc, #84]	; (2cc20 <do_registration_reply_cb+0x170>)
   2cbcc:	1a9b      	subs	r3, r3, r2
   2cbce:	08db      	lsrs	r3, r3, #3
   2cbd0:	f363 118f 	bfi	r1, r3, #6, #10
   2cbd4:	e7e6      	b.n	2cba4 <do_registration_reply_cb+0xf4>
	LOG_ERR("failed with code %u.%u. Re-init network",
   2cbd6:	b18b      	cbz	r3, 2cbfc <do_registration_reply_cb+0x14c>
   2cbd8:	2201      	movs	r2, #1
   2cbda:	f04f 0300 	mov.w	r3, #0
   2cbde:	4909      	ldr	r1, [pc, #36]	; (2cc04 <do_registration_reply_cb+0x154>)
   2cbe0:	f362 0307 	bfi	r3, r2, #0, #8
   2cbe4:	4a08      	ldr	r2, [pc, #32]	; (2cc08 <do_registration_reply_cb+0x158>)
   2cbe6:	1a52      	subs	r2, r2, r1
   2cbe8:	08d2      	lsrs	r2, r2, #3
   2cbea:	f362 138f 	bfi	r3, r2, #6, #10
   2cbee:	f3c0 1147 	ubfx	r1, r0, #5, #8
   2cbf2:	f000 021f 	and.w	r2, r0, #31
   2cbf6:	480b      	ldr	r0, [pc, #44]	; (2cc24 <do_registration_reply_cb+0x174>)
   2cbf8:	f013 ff44 	bl	40a84 <log_2>
	set_sm_state(ENGINE_INIT);
   2cbfc:	2000      	movs	r0, #0
   2cbfe:	e7d4      	b.n	2cbaa <do_registration_reply_cb+0xfa>
   2cc00:	20032b34 	.word	0x20032b34
   2cc04:	00045f08 	.word	0x00045f08
   2cc08:	00046068 	.word	0x00046068
   2cc0c:	0004bac7 	.word	0x0004bac7
   2cc10:	0004baea 	.word	0x0004baea
   2cc14:	20020c80 	.word	0x20020c80
   2cc18:	0004bb19 	.word	0x0004bb19
   2cc1c:	0004bb35 	.word	0x0004bb35
   2cc20:	0004bb57 	.word	0x0004bb57
   2cc24:	0004bb80 	.word	0x0004bb80

0002cc28 <sm_handle_timeout_state.isra.0>:
static void sm_handle_timeout_state(struct lwm2m_message *msg,
   2cc28:	b570      	push	{r4, r5, r6, lr}
	if (client.engine_state == ENGINE_REGISTRATION_SENT) {
   2cc2a:	4c0c      	ldr	r4, [pc, #48]	; (2cc5c <sm_handle_timeout_state.isra.0+0x34>)
   2cc2c:	7a23      	ldrb	r3, [r4, #8]
   2cc2e:	2b02      	cmp	r3, #2
   2cc30:	d00f      	beq.n	2cc52 <sm_handle_timeout_state.isra.0+0x2a>
	} else if (client.engine_state == ENGINE_UPDATE_SENT) {
   2cc32:	2b04      	cmp	r3, #4
   2cc34:	d00f      	beq.n	2cc56 <sm_handle_timeout_state.isra.0+0x2e>
		event = LWM2M_RD_CLIENT_EVENT_DEREGISTER_FAILURE;
   2cc36:	2b06      	cmp	r3, #6
   2cc38:	bf14      	ite	ne
   2cc3a:	2500      	movne	r5, #0
   2cc3c:	2508      	moveq	r5, #8
	set_sm_state(sm_state);
   2cc3e:	f7ff fead 	bl	2c99c <set_sm_state>
	if (event > LWM2M_RD_CLIENT_EVENT_NONE && client.event_cb) {
   2cc42:	b155      	cbz	r5, 2cc5a <sm_handle_timeout_state.isra.0+0x32>
   2cc44:	6de3      	ldr	r3, [r4, #92]	; 0x5c
   2cc46:	b143      	cbz	r3, 2cc5a <sm_handle_timeout_state.isra.0+0x32>
		client.event_cb(client.ctx, event);
   2cc48:	4629      	mov	r1, r5
   2cc4a:	6860      	ldr	r0, [r4, #4]
}
   2cc4c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		client.event_cb(client.ctx, event);
   2cc50:	4718      	bx	r3
		event = LWM2M_RD_CLIENT_EVENT_REGISTRATION_FAILURE;
   2cc52:	2504      	movs	r5, #4
   2cc54:	e7f3      	b.n	2cc3e <sm_handle_timeout_state.isra.0+0x16>
		event = LWM2M_RD_CLIENT_EVENT_REG_UPDATE_FAILURE;
   2cc56:	2506      	movs	r5, #6
   2cc58:	e7f1      	b.n	2cc3e <sm_handle_timeout_state.isra.0+0x16>
}
   2cc5a:	bd70      	pop	{r4, r5, r6, pc}
   2cc5c:	20020c80 	.word	0x20020c80

0002cc60 <do_registration_timeout_cb>:
{
   2cc60:	b508      	push	{r3, lr}
	LOG_WRN("Registration Timeout");
   2cc62:	4b0c      	ldr	r3, [pc, #48]	; (2cc94 <do_registration_timeout_cb+0x34>)
   2cc64:	681b      	ldr	r3, [r3, #0]
   2cc66:	f013 0f06 	tst.w	r3, #6
   2cc6a:	d00d      	beq.n	2cc88 <do_registration_timeout_cb+0x28>
   2cc6c:	2302      	movs	r3, #2
   2cc6e:	f04f 0100 	mov.w	r1, #0
   2cc72:	4a09      	ldr	r2, [pc, #36]	; (2cc98 <do_registration_timeout_cb+0x38>)
   2cc74:	f363 0107 	bfi	r1, r3, #0, #8
   2cc78:	4b08      	ldr	r3, [pc, #32]	; (2cc9c <do_registration_timeout_cb+0x3c>)
   2cc7a:	4809      	ldr	r0, [pc, #36]	; (2cca0 <do_registration_timeout_cb+0x40>)
   2cc7c:	1a9b      	subs	r3, r3, r2
   2cc7e:	08db      	lsrs	r3, r3, #3
   2cc80:	f363 118f 	bfi	r1, r3, #6, #10
   2cc84:	f013 fedd 	bl	40a42 <log_0>
}
   2cc88:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	sm_handle_timeout_state(msg, ENGINE_INIT);
   2cc8c:	2000      	movs	r0, #0
   2cc8e:	f7ff bfcb 	b.w	2cc28 <sm_handle_timeout_state.isra.0>
   2cc92:	bf00      	nop
   2cc94:	20032b34 	.word	0x20032b34
   2cc98:	00045f08 	.word	0x00045f08
   2cc9c:	00046068 	.word	0x00046068
   2cca0:	0004bab2 	.word	0x0004bab2

0002cca4 <do_update_timeout_cb>:
{
   2cca4:	b508      	push	{r3, lr}
	LOG_WRN("Registration Update Timeout");
   2cca6:	4b0c      	ldr	r3, [pc, #48]	; (2ccd8 <do_update_timeout_cb+0x34>)
   2cca8:	681b      	ldr	r3, [r3, #0]
   2ccaa:	f013 0f06 	tst.w	r3, #6
   2ccae:	d00d      	beq.n	2cccc <do_update_timeout_cb+0x28>
   2ccb0:	2302      	movs	r3, #2
   2ccb2:	f04f 0100 	mov.w	r1, #0
   2ccb6:	4a09      	ldr	r2, [pc, #36]	; (2ccdc <do_update_timeout_cb+0x38>)
   2ccb8:	f363 0107 	bfi	r1, r3, #0, #8
   2ccbc:	4b08      	ldr	r3, [pc, #32]	; (2cce0 <do_update_timeout_cb+0x3c>)
   2ccbe:	4809      	ldr	r0, [pc, #36]	; (2cce4 <do_update_timeout_cb+0x40>)
   2ccc0:	1a9b      	subs	r3, r3, r2
   2ccc2:	08db      	lsrs	r3, r3, #3
   2ccc4:	f363 118f 	bfi	r1, r3, #6, #10
   2ccc8:	f013 febb 	bl	40a42 <log_0>
}
   2cccc:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	sm_handle_timeout_state(msg, ENGINE_DO_REGISTRATION);
   2ccd0:	2001      	movs	r0, #1
   2ccd2:	f7ff bfa9 	b.w	2cc28 <sm_handle_timeout_state.isra.0>
   2ccd6:	bf00      	nop
   2ccd8:	20032b34 	.word	0x20032b34
   2ccdc:	00045f08 	.word	0x00045f08
   2cce0:	00046068 	.word	0x00046068
   2cce4:	0004bbff 	.word	0x0004bbff

0002cce8 <do_deregister_timeout_cb>:
{
   2cce8:	b508      	push	{r3, lr}
	LOG_WRN("De-Registration Timeout");
   2ccea:	4b0c      	ldr	r3, [pc, #48]	; (2cd1c <do_deregister_timeout_cb+0x34>)
   2ccec:	681b      	ldr	r3, [r3, #0]
   2ccee:	f013 0f06 	tst.w	r3, #6
   2ccf2:	d00d      	beq.n	2cd10 <do_deregister_timeout_cb+0x28>
   2ccf4:	2302      	movs	r3, #2
   2ccf6:	f04f 0100 	mov.w	r1, #0
   2ccfa:	4a09      	ldr	r2, [pc, #36]	; (2cd20 <do_deregister_timeout_cb+0x38>)
   2ccfc:	f363 0107 	bfi	r1, r3, #0, #8
   2cd00:	4b08      	ldr	r3, [pc, #32]	; (2cd24 <do_deregister_timeout_cb+0x3c>)
   2cd02:	4809      	ldr	r0, [pc, #36]	; (2cd28 <do_deregister_timeout_cb+0x40>)
   2cd04:	1a9b      	subs	r3, r3, r2
   2cd06:	08db      	lsrs	r3, r3, #3
   2cd08:	f363 118f 	bfi	r1, r3, #6, #10
   2cd0c:	f013 fe99 	bl	40a42 <log_0>
}
   2cd10:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	sm_handle_timeout_state(msg, ENGINE_INIT);
   2cd14:	2000      	movs	r0, #0
   2cd16:	f7ff bf87 	b.w	2cc28 <sm_handle_timeout_state.isra.0>
   2cd1a:	bf00      	nop
   2cd1c:	20032b34 	.word	0x20032b34
   2cd20:	00045f08 	.word	0x00045f08
   2cd24:	00046068 	.word	0x00046068
   2cd28:	0004baaf 	.word	0x0004baaf

0002cd2c <do_deregister_reply_cb>:
{
   2cd2c:	b510      	push	{r4, lr}
	code = coap_header_get_code(response);
   2cd2e:	f015 fbe3 	bl	424f8 <coap_header_get_code>
	if (code == COAP_RESPONSE_CODE_DELETED) {
   2cd32:	4b1c      	ldr	r3, [pc, #112]	; (2cda4 <do_deregister_reply_cb+0x78>)
   2cd34:	2842      	cmp	r0, #66	; 0x42
   2cd36:	4c1c      	ldr	r4, [pc, #112]	; (2cda8 <do_deregister_reply_cb+0x7c>)
		LOG_INF("Deregistration success");
   2cd38:	681b      	ldr	r3, [r3, #0]
	if (code == COAP_RESPONSE_CODE_DELETED) {
   2cd3a:	d119      	bne.n	2cd70 <do_deregister_reply_cb+0x44>
		LOG_INF("Deregistration success");
   2cd3c:	f003 0307 	and.w	r3, r3, #7
   2cd40:	2b02      	cmp	r3, #2
   2cd42:	d90d      	bls.n	2cd60 <do_deregister_reply_cb+0x34>
   2cd44:	2303      	movs	r3, #3
   2cd46:	f04f 0100 	mov.w	r1, #0
   2cd4a:	4a18      	ldr	r2, [pc, #96]	; (2cdac <do_deregister_reply_cb+0x80>)
   2cd4c:	f363 0107 	bfi	r1, r3, #0, #8
   2cd50:	4b17      	ldr	r3, [pc, #92]	; (2cdb0 <do_deregister_reply_cb+0x84>)
   2cd52:	4818      	ldr	r0, [pc, #96]	; (2cdb4 <do_deregister_reply_cb+0x88>)
   2cd54:	1a9b      	subs	r3, r3, r2
   2cd56:	08db      	lsrs	r3, r3, #3
   2cd58:	f363 118f 	bfi	r1, r3, #6, #10
   2cd5c:	f013 fe71 	bl	40a42 <log_0>
		lwm2m_engine_context_close(client.ctx);
   2cd60:	6860      	ldr	r0, [r4, #4]
   2cd62:	f7fe fb8b 	bl	2b47c <lwm2m_engine_context_close>
		set_sm_state(ENGINE_DEREGISTERED);
   2cd66:	2008      	movs	r0, #8
			set_sm_state(ENGINE_DEREGISTER_FAILED);
   2cd68:	f7ff fe18 	bl	2c99c <set_sm_state>
}
   2cd6c:	2000      	movs	r0, #0
   2cd6e:	bd10      	pop	{r4, pc}
		LOG_ERR("failed with code %u.%u",
   2cd70:	075b      	lsls	r3, r3, #29
   2cd72:	d011      	beq.n	2cd98 <do_deregister_reply_cb+0x6c>
   2cd74:	2201      	movs	r2, #1
   2cd76:	f04f 0300 	mov.w	r3, #0
   2cd7a:	490c      	ldr	r1, [pc, #48]	; (2cdac <do_deregister_reply_cb+0x80>)
   2cd7c:	f362 0307 	bfi	r3, r2, #0, #8
   2cd80:	4a0b      	ldr	r2, [pc, #44]	; (2cdb0 <do_deregister_reply_cb+0x84>)
   2cd82:	1a52      	subs	r2, r2, r1
   2cd84:	08d2      	lsrs	r2, r2, #3
   2cd86:	f362 138f 	bfi	r3, r2, #6, #10
   2cd8a:	f3c0 1147 	ubfx	r1, r0, #5, #8
   2cd8e:	f000 021f 	and.w	r2, r0, #31
   2cd92:	4809      	ldr	r0, [pc, #36]	; (2cdb8 <do_deregister_reply_cb+0x8c>)
   2cd94:	f013 fe76 	bl	40a84 <log_2>
		if (get_sm_state() == ENGINE_DEREGISTER_SENT) {
   2cd98:	7a23      	ldrb	r3, [r4, #8]
   2cd9a:	2b06      	cmp	r3, #6
   2cd9c:	d1e6      	bne.n	2cd6c <do_deregister_reply_cb+0x40>
			set_sm_state(ENGINE_DEREGISTER_FAILED);
   2cd9e:	2007      	movs	r0, #7
   2cda0:	e7e2      	b.n	2cd68 <do_deregister_reply_cb+0x3c>
   2cda2:	bf00      	nop
   2cda4:	20032b34 	.word	0x20032b34
   2cda8:	20020c80 	.word	0x20020c80
   2cdac:	00045f08 	.word	0x00045f08
   2cdb0:	00046068 	.word	0x00046068
   2cdb4:	0004ba81 	.word	0x0004ba81
   2cdb8:	0004ba98 	.word	0x0004ba98

0002cdbc <sm_send_registration>:
{
   2cdbc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	msg = lwm2m_get_message(client.ctx);
   2cdc0:	4d5f      	ldr	r5, [pc, #380]	; (2cf40 <sm_send_registration+0x184>)
{
   2cdc2:	4680      	mov	r8, r0
	msg = lwm2m_get_message(client.ctx);
   2cdc4:	6868      	ldr	r0, [r5, #4]
{
   2cdc6:	460f      	mov	r7, r1
   2cdc8:	4616      	mov	r6, r2
	msg = lwm2m_get_message(client.ctx);
   2cdca:	f7fb ff79 	bl	28cc0 <lwm2m_get_message>
	if (!msg) {
   2cdce:	4604      	mov	r4, r0
   2cdd0:	b9a0      	cbnz	r0, 2cdfc <sm_send_registration+0x40>
		LOG_ERR("Unable to get a lwm2m message!");
   2cdd2:	4b5c      	ldr	r3, [pc, #368]	; (2cf44 <sm_send_registration+0x188>)
   2cdd4:	681b      	ldr	r3, [r3, #0]
   2cdd6:	075a      	lsls	r2, r3, #29
   2cdd8:	d00d      	beq.n	2cdf6 <sm_send_registration+0x3a>
   2cdda:	2301      	movs	r3, #1
   2cddc:	f04f 0100 	mov.w	r1, #0
   2cde0:	4a59      	ldr	r2, [pc, #356]	; (2cf48 <sm_send_registration+0x18c>)
   2cde2:	f363 0107 	bfi	r1, r3, #0, #8
   2cde6:	4b59      	ldr	r3, [pc, #356]	; (2cf4c <sm_send_registration+0x190>)
   2cde8:	4859      	ldr	r0, [pc, #356]	; (2cf50 <sm_send_registration+0x194>)
   2cdea:	1a9b      	subs	r3, r3, r2
   2cdec:	08db      	lsrs	r3, r3, #3
   2cdee:	f363 118f 	bfi	r1, r3, #6, #10
   2cdf2:	f013 fe26 	bl	40a42 <log_0>
		return -ENOMEM;
   2cdf6:	f06f 070b 	mvn.w	r7, #11
   2cdfa:	e08d      	b.n	2cf18 <sm_send_registration+0x15c>
   2cdfc:	f017 ff61 	bl	44cc2 <z_impl_k_uptime_get>
	msg->mid = 0U;
   2ce00:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
	client.last_update = k_uptime_get();
   2ce04:	e9c5 0104 	strd	r0, r1, [r5, #16]
	msg->message_timeout_cb = timeout_cb;
   2ce08:	e9c4 765e 	strd	r7, r6, [r4, #376]	; 0x178
	msg->mid = 0U;
   2ce0c:	f8c4 3180 	str.w	r3, [r4, #384]	; 0x180
	ret = lwm2m_init_message(msg);
   2ce10:	4620      	mov	r0, r4
   2ce12:	f7fb ffe9 	bl	28de8 <lwm2m_init_message>
	if (ret) {
   2ce16:	4607      	mov	r7, r0
   2ce18:	2800      	cmp	r0, #0
   2ce1a:	f040 8089 	bne.w	2cf30 <sm_send_registration+0x174>
				  strlen(LWM2M_RD_CLIENT_URI));
   2ce1e:	484d      	ldr	r0, [pc, #308]	; (2cf54 <sm_send_registration+0x198>)
   2ce20:	f7f0 f97a 	bl	1d118 <strlen>
	coap_packet_append_option(&msg->cpkt, COAP_OPTION_URI_PATH,
   2ce24:	f104 062c 	add.w	r6, r4, #44	; 0x2c
   2ce28:	b283      	uxth	r3, r0
   2ce2a:	4a4a      	ldr	r2, [pc, #296]	; (2cf54 <sm_send_registration+0x198>)
   2ce2c:	210b      	movs	r1, #11
   2ce2e:	4630      	mov	r0, r6
   2ce30:	f015 f9d8 	bl	421e4 <coap_packet_append_option>
	return (client.engine_state >= ENGINE_REGISTRATION_DONE &&
   2ce34:	7a2b      	ldrb	r3, [r5, #8]
	if (!sm_is_registered()) {
   2ce36:	3b03      	subs	r3, #3
   2ce38:	2b04      	cmp	r3, #4
   2ce3a:	d970      	bls.n	2cf1e <sm_send_registration+0x162>
		coap_append_option_int(&msg->cpkt, COAP_OPTION_CONTENT_FORMAT,
   2ce3c:	2228      	movs	r2, #40	; 0x28
   2ce3e:	210c      	movs	r1, #12
   2ce40:	4630      	mov	r0, r6
   2ce42:	f7f8 f893 	bl	24f6c <coap_append_option_int>
		snprintk(query_buffer, sizeof(query_buffer) - 1,
   2ce46:	4b44      	ldr	r3, [pc, #272]	; (2cf58 <sm_send_registration+0x19c>)
   2ce48:	4a44      	ldr	r2, [pc, #272]	; (2cf5c <sm_send_registration+0x1a0>)
   2ce4a:	213f      	movs	r1, #63	; 0x3f
   2ce4c:	4844      	ldr	r0, [pc, #272]	; (2cf60 <sm_send_registration+0x1a4>)
   2ce4e:	f013 fbe5 	bl	4061c <snprintk>
					  query_buffer, strlen(query_buffer));
   2ce52:	4843      	ldr	r0, [pc, #268]	; (2cf60 <sm_send_registration+0x1a4>)
   2ce54:	f7f0 f960 	bl	1d118 <strlen>
		coap_packet_append_option(&msg->cpkt, COAP_OPTION_URI_QUERY,
   2ce58:	4a41      	ldr	r2, [pc, #260]	; (2cf60 <sm_send_registration+0x1a4>)
   2ce5a:	b283      	uxth	r3, r0
   2ce5c:	210f      	movs	r1, #15
   2ce5e:	4630      	mov	r0, r6
   2ce60:	f015 f9c0 	bl	421e4 <coap_packet_append_option>
		snprintk(query_buffer, sizeof(query_buffer) - 1,
   2ce64:	f105 0318 	add.w	r3, r5, #24
   2ce68:	4a3e      	ldr	r2, [pc, #248]	; (2cf64 <sm_send_registration+0x1a8>)
   2ce6a:	213f      	movs	r1, #63	; 0x3f
   2ce6c:	483c      	ldr	r0, [pc, #240]	; (2cf60 <sm_send_registration+0x1a4>)
   2ce6e:	f013 fbd5 	bl	4061c <snprintk>
					  query_buffer, strlen(query_buffer));
   2ce72:	483b      	ldr	r0, [pc, #236]	; (2cf60 <sm_send_registration+0x1a4>)
   2ce74:	f7f0 f950 	bl	1d118 <strlen>
		coap_packet_append_option(&msg->cpkt, COAP_OPTION_URI_QUERY,
   2ce78:	210f      	movs	r1, #15
   2ce7a:	4a39      	ldr	r2, [pc, #228]	; (2cf60 <sm_send_registration+0x1a4>)
   2ce7c:	b283      	uxth	r3, r0
		coap_packet_append_option(&msg->cpkt, COAP_OPTION_URI_PATH,
   2ce7e:	4630      	mov	r0, r6
   2ce80:	f015 f9b0 	bl	421e4 <coap_packet_append_option>
	snprintk(query_buffer, sizeof(query_buffer) - 1,
   2ce84:	682b      	ldr	r3, [r5, #0]
   2ce86:	4a38      	ldr	r2, [pc, #224]	; (2cf68 <sm_send_registration+0x1ac>)
   2ce88:	213f      	movs	r1, #63	; 0x3f
   2ce8a:	4835      	ldr	r0, [pc, #212]	; (2cf60 <sm_send_registration+0x1a4>)
   2ce8c:	f013 fbc6 	bl	4061c <snprintk>
				  query_buffer, strlen(query_buffer));
   2ce90:	4833      	ldr	r0, [pc, #204]	; (2cf60 <sm_send_registration+0x1a4>)
   2ce92:	f7f0 f941 	bl	1d118 <strlen>
	coap_packet_append_option(&msg->cpkt, COAP_OPTION_URI_QUERY,
   2ce96:	4a32      	ldr	r2, [pc, #200]	; (2cf60 <sm_send_registration+0x1a4>)
   2ce98:	b283      	uxth	r3, r0
   2ce9a:	210f      	movs	r1, #15
   2ce9c:	4630      	mov	r0, r6
   2ce9e:	f015 f9a1 	bl	421e4 <coap_packet_append_option>
	if (send_obj_support_data) {
   2cea2:	f1b8 0f00 	cmp.w	r8, #0
   2cea6:	d01a      	beq.n	2cede <sm_send_registration+0x122>
		ret = coap_packet_append_payload_marker(&msg->cpkt);
   2cea8:	4630      	mov	r0, r6
   2ceaa:	f015 fa48 	bl	4233e <coap_packet_append_payload_marker>
		if (ret < 0) {
   2ceae:	1e05      	subs	r5, r0, #0
   2ceb0:	db2d      	blt.n	2cf0e <sm_send_registration+0x152>
		client_data_len = lwm2m_get_rd_data(client_data,
   2ceb2:	f44f 7180 	mov.w	r1, #256	; 0x100
   2ceb6:	482d      	ldr	r0, [pc, #180]	; (2cf6c <sm_send_registration+0x1b0>)
   2ceb8:	f7fd fa86 	bl	2a3c8 <lwm2m_get_rd_data>
   2cebc:	4605      	mov	r5, r0
		ret = buf_append(CPKT_BUF_WRITE(&msg->cpkt), client_data,
   2cebe:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
   2cec0:	8e62      	ldrh	r2, [r4, #50]	; 0x32
	if (!dst || !src) {
   2cec2:	2800      	cmp	r0, #0
   2cec4:	d036      	beq.n	2cf34 <sm_send_registration+0x178>
	if (*dst_len + src_len > dst_size) {
   2cec6:	8e23      	ldrh	r3, [r4, #48]	; 0x30
   2cec8:	1959      	adds	r1, r3, r5
   2ceca:	4291      	cmp	r1, r2
   2cecc:	dc35      	bgt.n	2cf3a <sm_send_registration+0x17e>
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   2cece:	462a      	mov	r2, r5
   2ced0:	4418      	add	r0, r3
   2ced2:	4926      	ldr	r1, [pc, #152]	; (2cf6c <sm_send_registration+0x1b0>)
   2ced4:	f017 ffbc 	bl	44e50 <memcpy>
	*dst_len += src_len;
   2ced8:	8e23      	ldrh	r3, [r4, #48]	; 0x30
   2ceda:	441d      	add	r5, r3
   2cedc:	8625      	strh	r5, [r4, #48]	; 0x30
	ret = lwm2m_send_message(msg);
   2cede:	4620      	mov	r0, r4
   2cee0:	f7fd f922 	bl	2a128 <lwm2m_send_message>
	if (ret < 0) {
   2cee4:	1e05      	subs	r5, r0, #0
   2cee6:	da17      	bge.n	2cf18 <sm_send_registration+0x15c>
		LOG_ERR("Error sending LWM2M packet (err:%d).", ret);
   2cee8:	4b16      	ldr	r3, [pc, #88]	; (2cf44 <sm_send_registration+0x188>)
   2ceea:	681b      	ldr	r3, [r3, #0]
   2ceec:	075b      	lsls	r3, r3, #29
   2ceee:	d00e      	beq.n	2cf0e <sm_send_registration+0x152>
   2cef0:	2301      	movs	r3, #1
   2cef2:	f04f 0200 	mov.w	r2, #0
   2cef6:	4914      	ldr	r1, [pc, #80]	; (2cf48 <sm_send_registration+0x18c>)
   2cef8:	f363 0207 	bfi	r2, r3, #0, #8
   2cefc:	4b13      	ldr	r3, [pc, #76]	; (2cf4c <sm_send_registration+0x190>)
   2cefe:	481c      	ldr	r0, [pc, #112]	; (2cf70 <sm_send_registration+0x1b4>)
   2cf00:	1a5b      	subs	r3, r3, r1
   2cf02:	08db      	lsrs	r3, r3, #3
   2cf04:	f363 128f 	bfi	r2, r3, #6, #10
   2cf08:	4629      	mov	r1, r5
   2cf0a:	f013 fda7 	bl	40a5c <log_1>
	lwm2m_reset_message(msg, true);
   2cf0e:	2101      	movs	r1, #1
   2cf10:	4620      	mov	r0, r4
   2cf12:	f016 f841 	bl	42f98 <lwm2m_reset_message>
	return ret;
   2cf16:	462f      	mov	r7, r5
}
   2cf18:	4638      	mov	r0, r7
   2cf1a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
					  strlen(client.server_ep));
   2cf1e:	f105 0039 	add.w	r0, r5, #57	; 0x39
   2cf22:	f7f0 f8f9 	bl	1d118 <strlen>
		coap_packet_append_option(&msg->cpkt, COAP_OPTION_URI_PATH,
   2cf26:	f105 0239 	add.w	r2, r5, #57	; 0x39
   2cf2a:	b283      	uxth	r3, r0
   2cf2c:	210b      	movs	r1, #11
   2cf2e:	e7a6      	b.n	2ce7e <sm_send_registration+0xc2>
   2cf30:	4605      	mov	r5, r0
   2cf32:	e7ec      	b.n	2cf0e <sm_send_registration+0x152>
		return -EINVAL;
   2cf34:	f06f 0515 	mvn.w	r5, #21
   2cf38:	e7e9      	b.n	2cf0e <sm_send_registration+0x152>
		return -ENOMEM;
   2cf3a:	f06f 050b 	mvn.w	r5, #11
   2cf3e:	e7e6      	b.n	2cf0e <sm_send_registration+0x152>
   2cf40:	20020c80 	.word	0x20020c80
   2cf44:	20032b34 	.word	0x20032b34
   2cf48:	00045f08 	.word	0x00045f08
   2cf4c:	00046068 	.word	0x00046068
   2cf50:	0004ae73 	.word	0x0004ae73
   2cf54:	0004bd48 	.word	0x0004bd48
   2cf58:	0004bd4b 	.word	0x0004bd4b
   2cf5c:	0004bd4f 	.word	0x0004bd4f
   2cf60:	2002a228 	.word	0x2002a228
   2cf64:	0004bd58 	.word	0x0004bd58
   2cf68:	0004bd5e 	.word	0x0004bd5e
   2cf6c:	2002a128 	.word	0x2002a128
   2cf70:	0004af01 	.word	0x0004af01

0002cf74 <lwm2m_rd_client_service>:
{
   2cf74:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	if (client.ctx) {
   2cf78:	4c9e      	ldr	r4, [pc, #632]	; (2d1f4 <lwm2m_rd_client_service+0x280>)
{
   2cf7a:	b087      	sub	sp, #28
	if (client.ctx) {
   2cf7c:	6860      	ldr	r0, [r4, #4]
   2cf7e:	2800      	cmp	r0, #0
   2cf80:	f000 80be 	beq.w	2d100 <lwm2m_rd_client_service+0x18c>
	return client.engine_state;
   2cf84:	7a21      	ldrb	r1, [r4, #8]
		switch (get_sm_state()) {
   2cf86:	2908      	cmp	r1, #8
   2cf88:	f200 81b0 	bhi.w	2d2ec <lwm2m_rd_client_service+0x378>
   2cf8c:	e8df f011 	tbh	[pc, r1, lsl #1]
   2cf90:	00120009 	.word	0x00120009
   2cf94:	00dc00b8 	.word	0x00dc00b8
   2cf98:	011900b8 	.word	0x011900b8
   2cf9c:	00b800b8 	.word	0x00b800b8
   2cfa0:	00b8      	.short	0x00b8
	client.ctx->sec_obj_inst = -1;
   2cfa2:	f04f 33ff 	mov.w	r3, #4294967295
   2cfa6:	f8c0 3124 	str.w	r3, [r0, #292]	; 0x124
	client.trigger_update = 0U;
   2cfaa:	2300      	movs	r3, #0
   2cfac:	72a3      	strb	r3, [r4, #10]
	client.lifetime = 0U;
   2cfae:	6023      	str	r3, [r4, #0]
			set_sm_state(ENGINE_DO_REGISTRATION);
   2cfb0:	2001      	movs	r0, #1
   2cfb2:	e0a3      	b.n	2d0fc <lwm2m_rd_client_service+0x188>
	if (client.ctx->sock_fd > -1) {
   2cfb4:	f8d0 312c 	ldr.w	r3, [r0, #300]	; 0x12c
   2cfb8:	2b00      	cmp	r3, #0
   2cfba:	db01      	blt.n	2cfc0 <lwm2m_rd_client_service+0x4c>
		lwm2m_engine_context_close(client.ctx);
   2cfbc:	f7fe fa5e 	bl	2b47c <lwm2m_engine_context_close>
	client.ctx->bootstrap_mode = false;
   2cfc0:	2300      	movs	r3, #0
   2cfc2:	6866      	ldr	r6, [r4, #4]
		snprintk(pathstr, sizeof(pathstr), "0/%d/1",
   2cfc4:	f8df 9270 	ldr.w	r9, [pc, #624]	; 2d238 <lwm2m_rd_client_service+0x2c4>
	client.ctx->bootstrap_mode = false;
   2cfc8:	f886 3128 	strb.w	r3, [r6, #296]	; 0x128
	i = lwm2m_security_inst_id_to_index(*sec_obj_inst);
   2cfcc:	f8b6 0124 	ldrh.w	r0, [r6, #292]	; 0x124
   2cfd0:	f7fe fdcc 	bl	2bb6c <lwm2m_security_inst_id_to_index>
	if (i < 0) {
   2cfd4:	f1b0 0800 	subs.w	r8, r0, #0
		*sec_obj_inst = -1;
   2cfd8:	bfb7      	itett	lt
   2cfda:	f04f 30ff 	movlt.w	r0, #4294967295
	if (i < 0) {
   2cfde:	4640      	movge	r0, r8
	end = (i == -1 ? CONFIG_LWM2M_SECURITY_INSTANCE_COUNT : i);
   2cfe0:	f04f 0801 	movlt.w	r8, #1
		*sec_obj_inst = -1;
   2cfe4:	f8c6 0124 	strlt.w	r0, [r6, #292]	; 0x124
	for (i++; i < end; i++) {
   2cfe8:	3001      	adds	r0, #1
   2cfea:	4540      	cmp	r0, r8
   2cfec:	db38      	blt.n	2d060 <lwm2m_rd_client_service+0xec>
	if (*sec_obj_inst < 0) {
   2cfee:	f8d6 2124 	ldr.w	r2, [r6, #292]	; 0x124
   2cff2:	4d81      	ldr	r5, [pc, #516]	; (2d1f8 <lwm2m_rd_client_service+0x284>)
   2cff4:	2a00      	cmp	r2, #0
   2cff6:	682b      	ldr	r3, [r5, #0]
   2cff8:	db5d      	blt.n	2d0b6 <lwm2m_rd_client_service+0x142>
	if (client.lifetime == 0U) {
   2cffa:	6822      	ldr	r2, [r4, #0]
   2cffc:	2a00      	cmp	r2, #0
   2cffe:	f000 8082 	beq.w	2d106 <lwm2m_rd_client_service+0x192>
	LOG_INF("RD Client started with endpoint '%s' with client lifetime %d",
   2d002:	f003 0307 	and.w	r3, r3, #7
   2d006:	2b02      	cmp	r3, #2
   2d008:	d913      	bls.n	2d032 <lwm2m_rd_client_service+0xbe>
   2d00a:	2303      	movs	r3, #3
   2d00c:	f04f 0600 	mov.w	r6, #0
   2d010:	4a7a      	ldr	r2, [pc, #488]	; (2d1fc <lwm2m_rd_client_service+0x288>)
   2d012:	f363 0607 	bfi	r6, r3, #0, #8
   2d016:	4b7a      	ldr	r3, [pc, #488]	; (2d200 <lwm2m_rd_client_service+0x28c>)
   2d018:	487a      	ldr	r0, [pc, #488]	; (2d204 <lwm2m_rd_client_service+0x290>)
   2d01a:	1ad2      	subs	r2, r2, r3
   2d01c:	08d2      	lsrs	r2, r2, #3
   2d01e:	f362 168f 	bfi	r6, r2, #6, #10
   2d022:	f7f4 fe43 	bl	21cac <log_strdup>
   2d026:	4633      	mov	r3, r6
   2d028:	4601      	mov	r1, r0
   2d02a:	6822      	ldr	r2, [r4, #0]
   2d02c:	4876      	ldr	r0, [pc, #472]	; (2d208 <lwm2m_rd_client_service+0x294>)
   2d02e:	f013 fd29 	bl	40a84 <log_2>
	ret = lwm2m_engine_start(client.ctx);
   2d032:	6860      	ldr	r0, [r4, #4]
   2d034:	f7fe fc68 	bl	2b908 <lwm2m_engine_start>
	if (ret < 0) {
   2d038:	1e01      	subs	r1, r0, #0
   2d03a:	da67      	bge.n	2d10c <lwm2m_rd_client_service+0x198>
		LOG_ERR("Cannot init LWM2M engine (%d)", ret);
   2d03c:	682b      	ldr	r3, [r5, #0]
   2d03e:	075e      	lsls	r6, r3, #29
   2d040:	d05e      	beq.n	2d100 <lwm2m_rd_client_service+0x18c>
   2d042:	2301      	movs	r3, #1
   2d044:	f04f 0200 	mov.w	r2, #0
   2d048:	486d      	ldr	r0, [pc, #436]	; (2d200 <lwm2m_rd_client_service+0x28c>)
   2d04a:	f363 0207 	bfi	r2, r3, #0, #8
   2d04e:	4b6b      	ldr	r3, [pc, #428]	; (2d1fc <lwm2m_rd_client_service+0x288>)
   2d050:	1a1b      	subs	r3, r3, r0
   2d052:	08db      	lsrs	r3, r3, #3
   2d054:	486d      	ldr	r0, [pc, #436]	; (2d20c <lwm2m_rd_client_service+0x298>)
   2d056:	f363 128f 	bfi	r2, r3, #6, #10
			LOG_ERR("Unhandled state: %d", get_sm_state());
   2d05a:	f013 fcff 	bl	40a5c <log_1>
}
   2d05e:	e04f      	b.n	2d100 <lwm2m_rd_client_service+0x18c>
		if (i >= CONFIG_LWM2M_SECURITY_INSTANCE_COUNT) {
   2d060:	ea00 75e0 	and.w	r5, r0, r0, asr #31
		obj_inst_id = lwm2m_security_index_to_inst_id(i);
   2d064:	4628      	mov	r0, r5
   2d066:	f7fe fd91 	bl	2bb8c <lwm2m_security_index_to_inst_id>
		if (obj_inst_id < 0) {
   2d06a:	1e07      	subs	r7, r0, #0
   2d06c:	da01      	bge.n	2d072 <lwm2m_rd_client_service+0xfe>
	for (i++; i < end; i++) {
   2d06e:	1c68      	adds	r0, r5, #1
   2d070:	e7bb      	b.n	2cfea <lwm2m_rd_client_service+0x76>
		snprintk(pathstr, sizeof(pathstr), "0/%d/1",
   2d072:	463b      	mov	r3, r7
   2d074:	464a      	mov	r2, r9
   2d076:	2114      	movs	r1, #20
   2d078:	a801      	add	r0, sp, #4
   2d07a:	f013 facf 	bl	4061c <snprintk>
		ret = lwm2m_engine_get_bool(pathstr, &temp);
   2d07e:	f10d 0103 	add.w	r1, sp, #3
   2d082:	a801      	add	r0, sp, #4
   2d084:	f015 fff8 	bl	43078 <lwm2m_engine_get_bool>
		if (ret < 0) {
   2d088:	2800      	cmp	r0, #0
   2d08a:	dbf0      	blt.n	2d06e <lwm2m_rd_client_service+0xfa>
		if (temp == false) {
   2d08c:	f89d 3003 	ldrb.w	r3, [sp, #3]
   2d090:	2b00      	cmp	r3, #0
   2d092:	d1ec      	bne.n	2d06e <lwm2m_rd_client_service+0xfa>
		snprintk(pathstr, sizeof(pathstr), "1/%d/1",
   2d094:	463b      	mov	r3, r7
   2d096:	4a5e      	ldr	r2, [pc, #376]	; (2d210 <lwm2m_rd_client_service+0x29c>)
   2d098:	2114      	movs	r1, #20
		*sec_obj_inst = found;
   2d09a:	f8c6 7124 	str.w	r7, [r6, #292]	; 0x124
		snprintk(pathstr, sizeof(pathstr), "1/%d/1",
   2d09e:	a801      	add	r0, sp, #4
   2d0a0:	f013 fabc 	bl	4061c <snprintk>
		if (lwm2m_engine_get_u32(pathstr, lifetime) < 0) {
   2d0a4:	4953      	ldr	r1, [pc, #332]	; (2d1f4 <lwm2m_rd_client_service+0x280>)
   2d0a6:	a801      	add	r0, sp, #4
   2d0a8:	f015 ffdd 	bl	43066 <lwm2m_engine_get_u32>
   2d0ac:	2800      	cmp	r0, #0
   2d0ae:	da9e      	bge.n	2cfee <lwm2m_rd_client_service+0x7a>
			*lifetime = CONFIG_LWM2M_ENGINE_DEFAULT_LIFETIME;
   2d0b0:	231e      	movs	r3, #30
   2d0b2:	6023      	str	r3, [r4, #0]
			LOG_DBG("Using default lifetime: %u", *lifetime);
   2d0b4:	e79b      	b.n	2cfee <lwm2m_rd_client_service+0x7a>
		LOG_WRN("sec_obj_inst: No matching servers found.");
   2d0b6:	f013 0f06 	tst.w	r3, #6
   2d0ba:	d00d      	beq.n	2d0d8 <lwm2m_rd_client_service+0x164>
   2d0bc:	2302      	movs	r3, #2
   2d0be:	f04f 0100 	mov.w	r1, #0
   2d0c2:	4a4f      	ldr	r2, [pc, #316]	; (2d200 <lwm2m_rd_client_service+0x28c>)
   2d0c4:	f363 0107 	bfi	r1, r3, #0, #8
   2d0c8:	4b4c      	ldr	r3, [pc, #304]	; (2d1fc <lwm2m_rd_client_service+0x288>)
   2d0ca:	4852      	ldr	r0, [pc, #328]	; (2d214 <lwm2m_rd_client_service+0x2a0>)
   2d0cc:	1a9b      	subs	r3, r3, r2
   2d0ce:	08db      	lsrs	r3, r3, #3
   2d0d0:	f363 118f 	bfi	r1, r3, #6, #10
   2d0d4:	f013 fcb5 	bl	40a42 <log_0>
		LOG_ERR("Unable to find a valid security instance.");
   2d0d8:	682b      	ldr	r3, [r5, #0]
   2d0da:	075f      	lsls	r7, r3, #29
   2d0dc:	d00d      	beq.n	2d0fa <lwm2m_rd_client_service+0x186>
   2d0de:	2301      	movs	r3, #1
   2d0e0:	f04f 0100 	mov.w	r1, #0
   2d0e4:	4a46      	ldr	r2, [pc, #280]	; (2d200 <lwm2m_rd_client_service+0x28c>)
   2d0e6:	f363 0107 	bfi	r1, r3, #0, #8
   2d0ea:	4b44      	ldr	r3, [pc, #272]	; (2d1fc <lwm2m_rd_client_service+0x288>)
   2d0ec:	484a      	ldr	r0, [pc, #296]	; (2d218 <lwm2m_rd_client_service+0x2a4>)
   2d0ee:	1a9b      	subs	r3, r3, r2
   2d0f0:	08db      	lsrs	r3, r3, #3
   2d0f2:	f363 118f 	bfi	r1, r3, #6, #10
   2d0f6:	f013 fca4 	bl	40a42 <log_0>
		set_sm_state(ENGINE_INIT);
   2d0fa:	2000      	movs	r0, #0
   2d0fc:	f7ff fc4e 	bl	2c99c <set_sm_state>
}
   2d100:	b007      	add	sp, #28
   2d102:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		client.lifetime = CONFIG_LWM2M_ENGINE_DEFAULT_LIFETIME;
   2d106:	221e      	movs	r2, #30
   2d108:	6022      	str	r2, [r4, #0]
   2d10a:	e77a      	b.n	2d002 <lwm2m_rd_client_service+0x8e>
	ret = sm_send_registration(true,
   2d10c:	4943      	ldr	r1, [pc, #268]	; (2d21c <lwm2m_rd_client_service+0x2a8>)
   2d10e:	4a44      	ldr	r2, [pc, #272]	; (2d220 <lwm2m_rd_client_service+0x2ac>)
   2d110:	2001      	movs	r0, #1
   2d112:	f7ff fe53 	bl	2cdbc <sm_send_registration>
	if (!ret) {
   2d116:	4601      	mov	r1, r0
   2d118:	b908      	cbnz	r0, 2d11e <lwm2m_rd_client_service+0x1aa>
		set_sm_state(ENGINE_REGISTRATION_SENT);
   2d11a:	2002      	movs	r0, #2
   2d11c:	e7ee      	b.n	2d0fc <lwm2m_rd_client_service+0x188>
		LOG_ERR("Registration err: %d", ret);
   2d11e:	682b      	ldr	r3, [r5, #0]
   2d120:	075d      	lsls	r5, r3, #29
   2d122:	d00d      	beq.n	2d140 <lwm2m_rd_client_service+0x1cc>
   2d124:	2301      	movs	r3, #1
   2d126:	f04f 0200 	mov.w	r2, #0
   2d12a:	4835      	ldr	r0, [pc, #212]	; (2d200 <lwm2m_rd_client_service+0x28c>)
   2d12c:	f363 0207 	bfi	r2, r3, #0, #8
   2d130:	4b32      	ldr	r3, [pc, #200]	; (2d1fc <lwm2m_rd_client_service+0x288>)
   2d132:	1a1b      	subs	r3, r3, r0
   2d134:	08db      	lsrs	r3, r3, #3
   2d136:	f363 128f 	bfi	r2, r3, #6, #10
   2d13a:	483a      	ldr	r0, [pc, #232]	; (2d224 <lwm2m_rd_client_service+0x2b0>)
   2d13c:	f013 fc8e 	bl	40a5c <log_1>
	lwm2m_engine_context_close(client.ctx);
   2d140:	6860      	ldr	r0, [r4, #4]
   2d142:	f7fe f99b 	bl	2b47c <lwm2m_engine_context_close>
	return ret;
   2d146:	e7db      	b.n	2d100 <lwm2m_rd_client_service+0x18c>
	if (sm_is_registered() &&
   2d148:	7aa3      	ldrb	r3, [r4, #10]
   2d14a:	b16b      	cbz	r3, 2d168 <lwm2m_rd_client_service+0x1f4>
		client.trigger_update = 0U;
   2d14c:	2300      	movs	r3, #0
		forced_update = client.trigger_update;
   2d14e:	7aa0      	ldrb	r0, [r4, #10]
		ret = sm_send_registration(forced_update,
   2d150:	4935      	ldr	r1, [pc, #212]	; (2d228 <lwm2m_rd_client_service+0x2b4>)
   2d152:	1ac0      	subs	r0, r0, r3
   2d154:	4a35      	ldr	r2, [pc, #212]	; (2d22c <lwm2m_rd_client_service+0x2b8>)
   2d156:	bf18      	it	ne
   2d158:	2001      	movne	r0, #1
		client.trigger_update = 0U;
   2d15a:	72a3      	strb	r3, [r4, #10]
		ret = sm_send_registration(forced_update,
   2d15c:	f7ff fe2e 	bl	2cdbc <sm_send_registration>
		if (!ret) {
   2d160:	4601      	mov	r1, r0
   2d162:	b9c0      	cbnz	r0, 2d196 <lwm2m_rd_client_service+0x222>
			set_sm_state(ENGINE_UPDATE_SENT);
   2d164:	2004      	movs	r0, #4
   2d166:	e7c9      	b.n	2d0fc <lwm2m_rd_client_service+0x188>
	     ((client.lifetime - SECONDS_TO_UPDATE_EARLY) <=
   2d168:	6823      	ldr	r3, [r4, #0]
   2d16a:	f04f 0900 	mov.w	r9, #0
   2d16e:	3b06      	subs	r3, #6
   2d170:	4698      	mov	r8, r3
   2d172:	f017 fda6 	bl	44cc2 <z_impl_k_uptime_get>
	      (k_uptime_get() - client.last_update) / 1000))) {
   2d176:	e9d4 5604 	ldrd	r5, r6, [r4, #16]
   2d17a:	1b40      	subs	r0, r0, r5
   2d17c:	f04f 0300 	mov.w	r3, #0
   2d180:	eb61 0106 	sbc.w	r1, r1, r6
   2d184:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   2d188:	f7ef fdd8 	bl	1cd3c <__aeabi_ldivmod>
	    (client.trigger_update ||
   2d18c:	4540      	cmp	r0, r8
   2d18e:	eb71 0309 	sbcs.w	r3, r1, r9
   2d192:	dadb      	bge.n	2d14c <lwm2m_rd_client_service+0x1d8>
   2d194:	e7b4      	b.n	2d100 <lwm2m_rd_client_service+0x18c>
			LOG_ERR("Registration update err: %d", ret);
   2d196:	4b18      	ldr	r3, [pc, #96]	; (2d1f8 <lwm2m_rd_client_service+0x284>)
   2d198:	681b      	ldr	r3, [r3, #0]
   2d19a:	0758      	lsls	r0, r3, #29
   2d19c:	d00d      	beq.n	2d1ba <lwm2m_rd_client_service+0x246>
   2d19e:	2301      	movs	r3, #1
   2d1a0:	f04f 0200 	mov.w	r2, #0
   2d1a4:	4816      	ldr	r0, [pc, #88]	; (2d200 <lwm2m_rd_client_service+0x28c>)
   2d1a6:	f363 0207 	bfi	r2, r3, #0, #8
   2d1aa:	4b14      	ldr	r3, [pc, #80]	; (2d1fc <lwm2m_rd_client_service+0x288>)
   2d1ac:	1a1b      	subs	r3, r3, r0
   2d1ae:	08db      	lsrs	r3, r3, #3
   2d1b0:	f363 128f 	bfi	r2, r3, #6, #10
   2d1b4:	481e      	ldr	r0, [pc, #120]	; (2d230 <lwm2m_rd_client_service+0x2bc>)
   2d1b6:	f013 fc51 	bl	40a5c <log_1>
			lwm2m_engine_context_close(client.ctx);
   2d1ba:	6860      	ldr	r0, [r4, #4]
   2d1bc:	f7fe f95e 	bl	2b47c <lwm2m_engine_context_close>
   2d1c0:	e6f6      	b.n	2cfb0 <lwm2m_rd_client_service+0x3c>
	msg = lwm2m_get_message(client.ctx);
   2d1c2:	f7fb fd7d 	bl	28cc0 <lwm2m_get_message>
	if (!msg) {
   2d1c6:	4605      	mov	r5, r0
   2d1c8:	2800      	cmp	r0, #0
   2d1ca:	d137      	bne.n	2d23c <lwm2m_rd_client_service+0x2c8>
		LOG_ERR("Unable to get a lwm2m message!");
   2d1cc:	4b0a      	ldr	r3, [pc, #40]	; (2d1f8 <lwm2m_rd_client_service+0x284>)
   2d1ce:	681b      	ldr	r3, [r3, #0]
   2d1d0:	0759      	lsls	r1, r3, #29
   2d1d2:	d095      	beq.n	2d100 <lwm2m_rd_client_service+0x18c>
   2d1d4:	2301      	movs	r3, #1
   2d1d6:	f04f 0100 	mov.w	r1, #0
   2d1da:	4a09      	ldr	r2, [pc, #36]	; (2d200 <lwm2m_rd_client_service+0x28c>)
   2d1dc:	f363 0107 	bfi	r1, r3, #0, #8
   2d1e0:	4b06      	ldr	r3, [pc, #24]	; (2d1fc <lwm2m_rd_client_service+0x288>)
   2d1e2:	4814      	ldr	r0, [pc, #80]	; (2d234 <lwm2m_rd_client_service+0x2c0>)
   2d1e4:	1a9b      	subs	r3, r3, r2
   2d1e6:	08db      	lsrs	r3, r3, #3
   2d1e8:	f363 118f 	bfi	r1, r3, #6, #10
   2d1ec:	f013 fc29 	bl	40a42 <log_0>
   2d1f0:	e786      	b.n	2d100 <lwm2m_rd_client_service+0x18c>
   2d1f2:	bf00      	nop
   2d1f4:	20020c80 	.word	0x20020c80
   2d1f8:	20032b34 	.word	0x20032b34
   2d1fc:	00046068 	.word	0x00046068
   2d200:	00045f08 	.word	0x00045f08
   2d204:	20020c98 	.word	0x20020c98
   2d208:	0004bc75 	.word	0x0004bc75
   2d20c:	0004bcb2 	.word	0x0004bcb2
   2d210:	0004bd2a 	.word	0x0004bd2a
   2d214:	0004bc22 	.word	0x0004bc22
   2d218:	0004bc4b 	.word	0x0004bc4b
   2d21c:	0002cab1 	.word	0x0002cab1
   2d220:	0002cc61 	.word	0x0002cc61
   2d224:	0004bcd0 	.word	0x0004bcd0
   2d228:	0002c9f5 	.word	0x0002c9f5
   2d22c:	0002cca5 	.word	0x0002cca5
   2d230:	0004bce5 	.word	0x0004bce5
   2d234:	0004ae73 	.word	0x0004ae73
   2d238:	0004bc1b 	.word	0x0004bc1b
	msg->mid = 0U;
   2d23c:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
   2d240:	f8c0 3180 	str.w	r3, [r0, #384]	; 0x180
	msg->reply_cb = do_deregister_reply_cb;
   2d244:	4b32      	ldr	r3, [pc, #200]	; (2d310 <lwm2m_rd_client_service+0x39c>)
   2d246:	f8c0 3178 	str.w	r3, [r0, #376]	; 0x178
	msg->message_timeout_cb = do_deregister_timeout_cb;
   2d24a:	4b32      	ldr	r3, [pc, #200]	; (2d314 <lwm2m_rd_client_service+0x3a0>)
   2d24c:	f8c0 317c 	str.w	r3, [r0, #380]	; 0x17c
	ret = lwm2m_init_message(msg);
   2d250:	f7fb fdca 	bl	28de8 <lwm2m_init_message>
	if (ret) {
   2d254:	2800      	cmp	r0, #0
   2d256:	d142      	bne.n	2d2de <lwm2m_rd_client_service+0x36a>
				  strlen(LWM2M_RD_CLIENT_URI));
   2d258:	482f      	ldr	r0, [pc, #188]	; (2d318 <lwm2m_rd_client_service+0x3a4>)
   2d25a:	f7ef ff5d 	bl	1d118 <strlen>
	coap_packet_append_option(&msg->cpkt, COAP_OPTION_URI_PATH,
   2d25e:	f105 062c 	add.w	r6, r5, #44	; 0x2c
   2d262:	b283      	uxth	r3, r0
   2d264:	4a2c      	ldr	r2, [pc, #176]	; (2d318 <lwm2m_rd_client_service+0x3a4>)
   2d266:	210b      	movs	r1, #11
   2d268:	4630      	mov	r0, r6
   2d26a:	f014 ffbb 	bl	421e4 <coap_packet_append_option>
				  strlen(client.server_ep));
   2d26e:	482b      	ldr	r0, [pc, #172]	; (2d31c <lwm2m_rd_client_service+0x3a8>)
   2d270:	f7ef ff52 	bl	1d118 <strlen>
	LOG_INF("Deregister from '%s'", log_strdup(client.server_ep));
   2d274:	4f2a      	ldr	r7, [pc, #168]	; (2d320 <lwm2m_rd_client_service+0x3ac>)
	coap_packet_append_option(&msg->cpkt, COAP_OPTION_URI_PATH,
   2d276:	b283      	uxth	r3, r0
   2d278:	4a28      	ldr	r2, [pc, #160]	; (2d31c <lwm2m_rd_client_service+0x3a8>)
   2d27a:	210b      	movs	r1, #11
   2d27c:	4630      	mov	r0, r6
   2d27e:	f014 ffb1 	bl	421e4 <coap_packet_append_option>
	LOG_INF("Deregister from '%s'", log_strdup(client.server_ep));
   2d282:	683b      	ldr	r3, [r7, #0]
   2d284:	f003 0307 	and.w	r3, r3, #7
   2d288:	2b02      	cmp	r3, #2
   2d28a:	d912      	bls.n	2d2b2 <lwm2m_rd_client_service+0x33e>
   2d28c:	2303      	movs	r3, #3
   2d28e:	f04f 0600 	mov.w	r6, #0
   2d292:	4a24      	ldr	r2, [pc, #144]	; (2d324 <lwm2m_rd_client_service+0x3b0>)
   2d294:	f363 0607 	bfi	r6, r3, #0, #8
   2d298:	4b23      	ldr	r3, [pc, #140]	; (2d328 <lwm2m_rd_client_service+0x3b4>)
   2d29a:	4820      	ldr	r0, [pc, #128]	; (2d31c <lwm2m_rd_client_service+0x3a8>)
   2d29c:	1a9b      	subs	r3, r3, r2
   2d29e:	08db      	lsrs	r3, r3, #3
   2d2a0:	f363 168f 	bfi	r6, r3, #6, #10
   2d2a4:	f7f4 fd02 	bl	21cac <log_strdup>
   2d2a8:	4632      	mov	r2, r6
   2d2aa:	4601      	mov	r1, r0
   2d2ac:	481f      	ldr	r0, [pc, #124]	; (2d32c <lwm2m_rd_client_service+0x3b8>)
   2d2ae:	f013 fbd5 	bl	40a5c <log_1>
	ret = lwm2m_send_message(msg);
   2d2b2:	4628      	mov	r0, r5
   2d2b4:	f7fc ff38 	bl	2a128 <lwm2m_send_message>
	if (ret < 0) {
   2d2b8:	1e01      	subs	r1, r0, #0
   2d2ba:	da15      	bge.n	2d2e8 <lwm2m_rd_client_service+0x374>
		LOG_ERR("Error sending LWM2M packet (err:%d).", ret);
   2d2bc:	683b      	ldr	r3, [r7, #0]
   2d2be:	075a      	lsls	r2, r3, #29
   2d2c0:	d00d      	beq.n	2d2de <lwm2m_rd_client_service+0x36a>
   2d2c2:	2301      	movs	r3, #1
   2d2c4:	f04f 0200 	mov.w	r2, #0
   2d2c8:	4816      	ldr	r0, [pc, #88]	; (2d324 <lwm2m_rd_client_service+0x3b0>)
   2d2ca:	f363 0207 	bfi	r2, r3, #0, #8
   2d2ce:	4b16      	ldr	r3, [pc, #88]	; (2d328 <lwm2m_rd_client_service+0x3b4>)
   2d2d0:	1a1b      	subs	r3, r3, r0
   2d2d2:	08db      	lsrs	r3, r3, #3
   2d2d4:	f363 128f 	bfi	r2, r3, #6, #10
   2d2d8:	4815      	ldr	r0, [pc, #84]	; (2d330 <lwm2m_rd_client_service+0x3bc>)
   2d2da:	f013 fbbf 	bl	40a5c <log_1>
	lwm2m_reset_message(msg, true);
   2d2de:	2101      	movs	r1, #1
   2d2e0:	4628      	mov	r0, r5
   2d2e2:	f015 fe59 	bl	42f98 <lwm2m_reset_message>
   2d2e6:	e72b      	b.n	2d140 <lwm2m_rd_client_service+0x1cc>
	set_sm_state(ENGINE_DEREGISTER_SENT);
   2d2e8:	2006      	movs	r0, #6
   2d2ea:	e707      	b.n	2d0fc <lwm2m_rd_client_service+0x188>
			LOG_ERR("Unhandled state: %d", get_sm_state());
   2d2ec:	4b0c      	ldr	r3, [pc, #48]	; (2d320 <lwm2m_rd_client_service+0x3ac>)
   2d2ee:	681b      	ldr	r3, [r3, #0]
   2d2f0:	075b      	lsls	r3, r3, #29
   2d2f2:	f43f af05 	beq.w	2d100 <lwm2m_rd_client_service+0x18c>
   2d2f6:	2301      	movs	r3, #1
   2d2f8:	f04f 0200 	mov.w	r2, #0
   2d2fc:	4809      	ldr	r0, [pc, #36]	; (2d324 <lwm2m_rd_client_service+0x3b0>)
   2d2fe:	f363 0207 	bfi	r2, r3, #0, #8
   2d302:	4b09      	ldr	r3, [pc, #36]	; (2d328 <lwm2m_rd_client_service+0x3b4>)
   2d304:	1a1b      	subs	r3, r3, r0
   2d306:	08db      	lsrs	r3, r3, #3
   2d308:	f363 128f 	bfi	r2, r3, #6, #10
   2d30c:	4809      	ldr	r0, [pc, #36]	; (2d334 <lwm2m_rd_client_service+0x3c0>)
   2d30e:	e6a4      	b.n	2d05a <lwm2m_rd_client_service+0xe6>
   2d310:	0002cd2d 	.word	0x0002cd2d
   2d314:	0002cce9 	.word	0x0002cce9
   2d318:	0004bd48 	.word	0x0004bd48
   2d31c:	20020cb9 	.word	0x20020cb9
   2d320:	20032b34 	.word	0x20032b34
   2d324:	00045f08 	.word	0x00045f08
   2d328:	00046068 	.word	0x00046068
   2d32c:	0004bd01 	.word	0x0004bd01
   2d330:	0004af01 	.word	0x0004af01
   2d334:	0004bd16 	.word	0x0004bd16

0002d338 <engine_trigger_update>:
	client.trigger_update = 1U;
   2d338:	2201      	movs	r2, #1
   2d33a:	4b01      	ldr	r3, [pc, #4]	; (2d340 <engine_trigger_update+0x8>)
   2d33c:	729a      	strb	r2, [r3, #10]
}
   2d33e:	4770      	bx	lr
   2d340:	20020c80 	.word	0x20020c80

0002d344 <lwm2m_rd_client_start>:
{
   2d344:	b538      	push	{r3, r4, r5, lr}
   2d346:	460d      	mov	r5, r1
	client.ctx = client_ctx;
   2d348:	4c14      	ldr	r4, [pc, #80]	; (2d39c <lwm2m_rd_client_start+0x58>)
   2d34a:	6060      	str	r0, [r4, #4]
	set_sm_state(ENGINE_INIT);
   2d34c:	2000      	movs	r0, #0
	client.event_cb = event_cb;
   2d34e:	65e2      	str	r2, [r4, #92]	; 0x5c
	set_sm_state(ENGINE_INIT);
   2d350:	f7ff fb24 	bl	2c99c <set_sm_state>
	strncpy(client.ep_name, ep_name, CLIENT_EP_LEN - 1);
   2d354:	2220      	movs	r2, #32
   2d356:	4629      	mov	r1, r5
   2d358:	f104 0018 	add.w	r0, r4, #24
   2d35c:	f017 ff12 	bl	45184 <strncpy>
	LOG_INF("Start LWM2M Client: %s", log_strdup(client.ep_name));
   2d360:	4b0f      	ldr	r3, [pc, #60]	; (2d3a0 <lwm2m_rd_client_start+0x5c>)
   2d362:	681b      	ldr	r3, [r3, #0]
   2d364:	f003 0307 	and.w	r3, r3, #7
   2d368:	2b02      	cmp	r3, #2
   2d36a:	d915      	bls.n	2d398 <lwm2m_rd_client_start+0x54>
   2d36c:	2303      	movs	r3, #3
   2d36e:	f04f 0500 	mov.w	r5, #0
   2d372:	4a0c      	ldr	r2, [pc, #48]	; (2d3a4 <lwm2m_rd_client_start+0x60>)
   2d374:	f363 0507 	bfi	r5, r3, #0, #8
   2d378:	4b0b      	ldr	r3, [pc, #44]	; (2d3a8 <lwm2m_rd_client_start+0x64>)
   2d37a:	f104 0018 	add.w	r0, r4, #24
   2d37e:	1a9b      	subs	r3, r3, r2
   2d380:	08db      	lsrs	r3, r3, #3
   2d382:	f363 158f 	bfi	r5, r3, #6, #10
   2d386:	f7f4 fc91 	bl	21cac <log_strdup>
   2d38a:	462a      	mov	r2, r5
}
   2d38c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	LOG_INF("Start LWM2M Client: %s", log_strdup(client.ep_name));
   2d390:	4601      	mov	r1, r0
   2d392:	4806      	ldr	r0, [pc, #24]	; (2d3ac <lwm2m_rd_client_start+0x68>)
   2d394:	f013 bb62 	b.w	40a5c <log_1>
}
   2d398:	bd38      	pop	{r3, r4, r5, pc}
   2d39a:	bf00      	nop
   2d39c:	20020c80 	.word	0x20020c80
   2d3a0:	20032b34 	.word	0x20032b34
   2d3a4:	00045f08 	.word	0x00045f08
   2d3a8:	00046068 	.word	0x00046068
   2d3ac:	0004bd31 	.word	0x0004bd31

0002d3b0 <lwm2m_connmon_init>:
		obj_inst_id);
	return &inst;
}

static int lwm2m_connmon_init(struct device *dev)
{
   2d3b0:	b513      	push	{r0, r1, r4, lr}
	struct lwm2m_engine_obj_inst *obj_inst = NULL;
	int ret = 0;

	/* initialize the Connection Monitoring field data */
	connmon.obj_id = LWM2M_OBJECT_CONNECTIVITY_MONITORING_ID;
	connmon.fields = fields;
   2d3b2:	4b0a      	ldr	r3, [pc, #40]	; (2d3dc <lwm2m_connmon_init+0x2c>)
   2d3b4:	480a      	ldr	r0, [pc, #40]	; (2d3e0 <lwm2m_connmon_init+0x30>)
	struct lwm2m_engine_obj_inst *obj_inst = NULL;
   2d3b6:	2400      	movs	r4, #0
	connmon.fields = fields;
   2d3b8:	6043      	str	r3, [r0, #4]
	connmon.obj_id = LWM2M_OBJECT_CONNECTIVITY_MONITORING_ID;
   2d3ba:	4b0a      	ldr	r3, [pc, #40]	; (2d3e4 <lwm2m_connmon_init+0x34>)
	struct lwm2m_engine_obj_inst *obj_inst = NULL;
   2d3bc:	9401      	str	r4, [sp, #4]
	connmon.obj_id = LWM2M_OBJECT_CONNECTIVITY_MONITORING_ID;
   2d3be:	6183      	str	r3, [r0, #24]
	connmon.field_count = ARRAY_SIZE(fields);
	connmon.max_instance_count = 1U;
   2d3c0:	2301      	movs	r3, #1
   2d3c2:	83c3      	strh	r3, [r0, #30]
	connmon.create_cb = connmon_create;
   2d3c4:	4b08      	ldr	r3, [pc, #32]	; (2d3e8 <lwm2m_connmon_init+0x38>)
   2d3c6:	6083      	str	r3, [r0, #8]
	lwm2m_register_obj(&connmon);
   2d3c8:	f7fb f8a8 	bl	2851c <lwm2m_register_obj>

	/* auto create the only instance */
	ret = lwm2m_create_obj_inst(LWM2M_OBJECT_CONNECTIVITY_MONITORING_ID,
   2d3cc:	aa01      	add	r2, sp, #4
   2d3ce:	4621      	mov	r1, r4
   2d3d0:	2004      	movs	r0, #4
   2d3d2:	f7fb fbc7 	bl	28b64 <lwm2m_create_obj_inst>
	if (ret < 0) {
		LOG_DBG("Create LWM2M instance 0 error: %d", ret);
	}

	return ret;
}
   2d3d6:	b002      	add	sp, #8
   2d3d8:	bd10      	pop	{r4, pc}
   2d3da:	bf00      	nop
   2d3dc:	20032760 	.word	0x20032760
   2d3e0:	20023dc4 	.word	0x20023dc4
   2d3e4:	000b0004 	.word	0x000b0004
   2d3e8:	0002d3ed 	.word	0x0002d3ed

0002d3ec <connmon_create>:
{
   2d3ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	rss = 0;
   2d3f0:	2400      	movs	r4, #0
	net_bearer = 42U; /* Ethernet */
   2d3f2:	232a      	movs	r3, #42	; 0x2a
	memset(ri, 0, sizeof(*ri) * ri_len);
   2d3f4:	4d52      	ldr	r5, [pc, #328]	; (2d540 <connmon_create+0x154>)
   2d3f6:	f8df a15c 	ldr.w	sl, [pc, #348]	; 2d554 <connmon_create+0x168>
	rss = 0;
   2d3fa:	f8df 915c 	ldr.w	r9, [pc, #348]	; 2d558 <connmon_create+0x16c>
	link_quality = 0U;
   2d3fe:	f8df 815c 	ldr.w	r8, [pc, #348]	; 2d55c <connmon_create+0x170>
	mnc = 0U;
   2d402:	4f50      	ldr	r7, [pc, #320]	; (2d544 <connmon_create+0x158>)
	mcc = 0U;
   2d404:	4e50      	ldr	r6, [pc, #320]	; (2d548 <connmon_create+0x15c>)
   2d406:	4621      	mov	r1, r4
   2d408:	2288      	movs	r2, #136	; 0x88
   2d40a:	f105 0008 	add.w	r0, r5, #8
	net_bearer = 42U; /* Ethernet */
   2d40e:	f88a 3000 	strb.w	r3, [sl]
	mnc = 0U;
   2d412:	803c      	strh	r4, [r7, #0]
	rss = 0;
   2d414:	f889 4000 	strb.w	r4, [r9]
	link_quality = 0U;
   2d418:	f888 4000 	strb.w	r4, [r8]
	mcc = 0U;
   2d41c:	8034      	strh	r4, [r6, #0]
   2d41e:	f017 fd51 	bl	44ec4 <memset>
	INIT_OBJ_RES_DATA(CONNMON_NETWORK_BEARER_ID, res, i, res_inst, j,
   2d422:	4b4a      	ldr	r3, [pc, #296]	; (2d54c <connmon_create+0x160>)
	INIT_OBJ_RES_DATA(CONNMON_RADIO_SIGNAL_STRENGTH, res, i, res_inst, j,
   2d424:	f105 0c24 	add.w	ip, r5, #36	; 0x24
   2d428:	f8c3 c040 	str.w	ip, [r3, #64]	; 0x40
	INIT_OBJ_RES_DATA(CONNMON_LINK_QUALITY, res, i, res_inst, j,
   2d42c:	f04f 0c03 	mov.w	ip, #3
	INIT_OBJ_RES_MULTI_OPTDATA(CONNMON_AVAIL_NETWORK_BEARER_ID, res, i,
   2d430:	f105 000c 	add.w	r0, r5, #12
	INIT_OBJ_RES_DATA(CONNMON_LINK_QUALITY, res, i, res_inst, j,
   2d434:	f8a3 c05c 	strh.w	ip, [r3, #92]	; 0x5c
   2d438:	f105 0c30 	add.w	ip, r5, #48	; 0x30
	INIT_OBJ_RES_DATA(CONNMON_NETWORK_BEARER_ID, res, i, res_inst, j,
   2d43c:	2201      	movs	r2, #1
		ri[i].res_inst_id = RES_INSTANCE_NOT_CREATED;
   2d43e:	f64f 71ff 	movw	r1, #65535	; 0xffff
	INIT_OBJ_RES_MULTI_OPTDATA(CONNMON_AVAIL_NETWORK_BEARER_ID, res, i,
   2d442:	6298      	str	r0, [r3, #40]	; 0x28
	INIT_OBJ_RES_DATA(CONNMON_LINK_QUALITY, res, i, res_inst, j,
   2d444:	f8c3 c058 	str.w	ip, [r3, #88]	; 0x58
	INIT_OBJ_RES_MULTI_OPTDATA(CONNMON_AVAIL_NETWORK_BEARER_ID, res, i,
   2d448:	2002      	movs	r0, #2
	INIT_OBJ_RES_MULTI_OPTDATA(CONNMON_IP_ADDRESSES, res, i,
   2d44a:	f04f 0c04 	mov.w	ip, #4
   2d44e:	f8a5 107e 	strh.w	r1, [r5, #126]	; 0x7e
   2d452:	f8a5 108a 	strh.w	r1, [r5, #138]	; 0x8a
	INIT_OBJ_RES_MULTI_OPTDATA(CONNMON_AVAIL_NETWORK_BEARER_ID, res, i,
   2d456:	f883 002e 	strb.w	r0, [r3, #46]	; 0x2e
   2d45a:	8269      	strh	r1, [r5, #18]
   2d45c:	83e9      	strh	r1, [r5, #30]
	INIT_OBJ_RES_DATA(CONNMON_RADIO_SIGNAL_STRENGTH, res, i, res_inst, j,
   2d45e:	f8a3 0044 	strh.w	r0, [r3, #68]	; 0x44
	INIT_OBJ_RES_DATA(CONNMON_NETWORK_BEARER_ID, res, i, res_inst, j,
   2d462:	829c      	strh	r4, [r3, #20]
   2d464:	611d      	str	r5, [r3, #16]
   2d466:	759a      	strb	r2, [r3, #22]
   2d468:	e9c3 4400 	strd	r4, r4, [r3]
   2d46c:	e9c3 4402 	strd	r4, r4, [r3, #8]
   2d470:	e9c5 a200 	strd	sl, r2, [r5]
	INIT_OBJ_RES_MULTI_OPTDATA(CONNMON_AVAIL_NETWORK_BEARER_ID, res, i,
   2d474:	859a      	strh	r2, [r3, #44]	; 0x2c
   2d476:	e9c3 4406 	strd	r4, r4, [r3, #24]
   2d47a:	e9c3 4408 	strd	r4, r4, [r3, #32]
	INIT_OBJ_RES_DATA(CONNMON_RADIO_SIGNAL_STRENGTH, res, i, res_inst, j,
   2d47e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
   2d482:	e9c3 440c 	strd	r4, r4, [r3, #48]	; 0x30
   2d486:	e9c3 440e 	strd	r4, r4, [r3, #56]	; 0x38
   2d48a:	e9c5 9209 	strd	r9, r2, [r5, #36]	; 0x24
	INIT_OBJ_RES_DATA(CONNMON_LINK_QUALITY, res, i, res_inst, j,
   2d48e:	f883 205e 	strb.w	r2, [r3, #94]	; 0x5e
   2d492:	e9c3 4412 	strd	r4, r4, [r3, #72]	; 0x48
	INIT_OBJ_RES_MULTI_OPTDATA(CONNMON_IP_ADDRESSES, res, i,
   2d496:	f8a3 c074 	strh.w	ip, [r3, #116]	; 0x74
   2d49a:	f105 0c3c 	add.w	ip, r5, #60	; 0x3c
   2d49e:	f8c3 c070 	str.w	ip, [r3, #112]	; 0x70
	INIT_OBJ_RES_MULTI_OPTDATA(CONNMON_ROUTER_IP_ADDRESSES, res, i,
   2d4a2:	f04f 0c05 	mov.w	ip, #5
   2d4a6:	f8a3 c08c 	strh.w	ip, [r3, #140]	; 0x8c
   2d4aa:	f105 0c48 	add.w	ip, r5, #72	; 0x48
   2d4ae:	f8c3 c088 	str.w	ip, [r3, #136]	; 0x88
	INIT_OBJ_RES_MULTI_OPTDATA(CONNMON_APN, res, i, res_inst, j,
   2d4b2:	f04f 0c07 	mov.w	ip, #7
	INIT_OBJ_RES_MULTI_OPTDATA(CONNMON_IP_ADDRESSES, res, i,
   2d4b6:	f8a5 1042 	strh.w	r1, [r5, #66]	; 0x42
	INIT_OBJ_RES_MULTI_OPTDATA(CONNMON_ROUTER_IP_ADDRESSES, res, i,
   2d4ba:	f8a5 104e 	strh.w	r1, [r5, #78]	; 0x4e
	INIT_OBJ_RES_MULTI_OPTDATA(CONNMON_APN, res, i, res_inst, j,
   2d4be:	f8a5 105a 	strh.w	r1, [r5, #90]	; 0x5a
	INIT_OBJ_RES_DATA(CONNMON_SMNC, res, i, res_inst, j, &mnc, sizeof(mnc));
   2d4c2:	2109      	movs	r1, #9
	INIT_OBJ_RES_MULTI_OPTDATA(CONNMON_APN, res, i, res_inst, j,
   2d4c4:	f8a3 c0a4 	strh.w	ip, [r3, #164]	; 0xa4
   2d4c8:	f105 0c54 	add.w	ip, r5, #84	; 0x54
   2d4cc:	f8c3 c0a0 	str.w	ip, [r3, #160]	; 0xa0
	INIT_OBJ_RES_DATA(CONNMON_SMNC, res, i, res_inst, j, &mnc, sizeof(mnc));
   2d4d0:	f105 0c60 	add.w	ip, r5, #96	; 0x60
	INIT_OBJ_RES_DATA(CONNMON_LINK_QUALITY, res, i, res_inst, j,
   2d4d4:	e9c3 4414 	strd	r4, r4, [r3, #80]	; 0x50
   2d4d8:	e9c5 820c 	strd	r8, r2, [r5, #48]	; 0x30
	INIT_OBJ_RES_MULTI_OPTDATA(CONNMON_IP_ADDRESSES, res, i,
   2d4dc:	f883 2076 	strb.w	r2, [r3, #118]	; 0x76
   2d4e0:	e9c3 4418 	strd	r4, r4, [r3, #96]	; 0x60
   2d4e4:	e9c3 441a 	strd	r4, r4, [r3, #104]	; 0x68
	INIT_OBJ_RES_MULTI_OPTDATA(CONNMON_ROUTER_IP_ADDRESSES, res, i,
   2d4e8:	f883 208e 	strb.w	r2, [r3, #142]	; 0x8e
   2d4ec:	e9c3 441e 	strd	r4, r4, [r3, #120]	; 0x78
   2d4f0:	e9c3 4420 	strd	r4, r4, [r3, #128]	; 0x80
	INIT_OBJ_RES_MULTI_OPTDATA(CONNMON_APN, res, i, res_inst, j,
   2d4f4:	f883 20a6 	strb.w	r2, [r3, #166]	; 0xa6
   2d4f8:	e9c3 4424 	strd	r4, r4, [r3, #144]	; 0x90
   2d4fc:	e9c3 4426 	strd	r4, r4, [r3, #152]	; 0x98
	INIT_OBJ_RES_DATA(CONNMON_SMNC, res, i, res_inst, j, &mnc, sizeof(mnc));
   2d500:	f8a3 10bc 	strh.w	r1, [r3, #188]	; 0xbc
   2d504:	f8c3 c0b8 	str.w	ip, [r3, #184]	; 0xb8
   2d508:	f883 20be 	strb.w	r2, [r3, #190]	; 0xbe
   2d50c:	e9c3 442a 	strd	r4, r4, [r3, #168]	; 0xa8
   2d510:	e9c5 7018 	strd	r7, r0, [r5, #96]	; 0x60
	INIT_OBJ_RES_DATA(CONNMON_SMCC, res, i, res_inst, j, &mcc, sizeof(mcc));
   2d514:	270a      	movs	r7, #10
   2d516:	e9c5 601b 	strd	r6, r0, [r5, #108]	; 0x6c
	inst.resources = res;
   2d51a:	480d      	ldr	r0, [pc, #52]	; (2d550 <connmon_create+0x164>)
	INIT_OBJ_RES_DATA(CONNMON_SMCC, res, i, res_inst, j, &mcc, sizeof(mcc));
   2d51c:	f8a3 70d4 	strh.w	r7, [r3, #212]	; 0xd4
   2d520:	f883 20d6 	strb.w	r2, [r3, #214]	; 0xd6
   2d524:	f105 076c 	add.w	r7, r5, #108	; 0x6c
	INIT_OBJ_RES_DATA(CONNMON_SMNC, res, i, res_inst, j, &mnc, sizeof(mnc));
   2d528:	e9c3 442c 	strd	r4, r4, [r3, #176]	; 0xb0
	INIT_OBJ_RES_DATA(CONNMON_SMCC, res, i, res_inst, j, &mcc, sizeof(mcc));
   2d52c:	f8c3 70d0 	str.w	r7, [r3, #208]	; 0xd0
   2d530:	e9c3 4430 	strd	r4, r4, [r3, #192]	; 0xc0
   2d534:	e9c3 4432 	strd	r4, r4, [r3, #200]	; 0xc8
	inst.resources = res;
   2d538:	6083      	str	r3, [r0, #8]
	inst.resource_count = i;
   2d53a:	81c1      	strh	r1, [r0, #14]
}
   2d53c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   2d540:	20023efc 	.word	0x20023efc
   2d544:	20029846 	.word	0x20029846
   2d548:	20029844 	.word	0x20029844
   2d54c:	20023df4 	.word	0x20023df4
   2d550:	20023de4 	.word	0x20023de4
   2d554:	2002a269 	.word	0x2002a269
   2d558:	2002a26a 	.word	0x2002a26a
   2d55c:	2002a268 	.word	0x2002a268

0002d560 <lwm2m_firmware_init>:
	LOG_DBG("Create LWM2M firmware instance: %d", obj_inst_id);
	return &inst;
}

static int lwm2m_firmware_init(struct device *dev)
{
   2d560:	b513      	push	{r0, r1, r4, lr}
	struct lwm2m_engine_obj_inst *obj_inst = NULL;
   2d562:	2400      	movs	r4, #0
	/* Initialize state machine */
	/* TODO: should be restored from the permanent storage */
	update_state = STATE_IDLE;
	update_result = RESULT_DEFAULT;
#ifdef CONFIG_LWM2M_FIRMWARE_UPDATE_PULL_SUPPORT
	delivery_method = DELIVERY_METHOD_BOTH;
   2d564:	2202      	movs	r2, #2
	package_uri[0] = '\0';
   2d566:	4b0d      	ldr	r3, [pc, #52]	; (2d59c <lwm2m_firmware_init+0x3c>)
#else
	delivery_method = DELIVERY_METHOD_PUSH_ONLY;
#endif

	firmware.obj_id = LWM2M_OBJECT_FIRMWARE_ID;
	firmware.fields = fields;
   2d568:	480d      	ldr	r0, [pc, #52]	; (2d5a0 <lwm2m_firmware_init+0x40>)
	package_uri[0] = '\0';
   2d56a:	701c      	strb	r4, [r3, #0]
	update_state = STATE_IDLE;
   2d56c:	4b0d      	ldr	r3, [pc, #52]	; (2d5a4 <lwm2m_firmware_init+0x44>)
	struct lwm2m_engine_obj_inst *obj_inst = NULL;
   2d56e:	9401      	str	r4, [sp, #4]
	update_state = STATE_IDLE;
   2d570:	701c      	strb	r4, [r3, #0]
	update_result = RESULT_DEFAULT;
   2d572:	4b0d      	ldr	r3, [pc, #52]	; (2d5a8 <lwm2m_firmware_init+0x48>)
   2d574:	701c      	strb	r4, [r3, #0]
	delivery_method = DELIVERY_METHOD_BOTH;
   2d576:	4b0d      	ldr	r3, [pc, #52]	; (2d5ac <lwm2m_firmware_init+0x4c>)
   2d578:	701a      	strb	r2, [r3, #0]
	firmware.fields = fields;
   2d57a:	4b0d      	ldr	r3, [pc, #52]	; (2d5b0 <lwm2m_firmware_init+0x50>)
   2d57c:	6043      	str	r3, [r0, #4]
	firmware.obj_id = LWM2M_OBJECT_FIRMWARE_ID;
   2d57e:	4b0d      	ldr	r3, [pc, #52]	; (2d5b4 <lwm2m_firmware_init+0x54>)
   2d580:	6183      	str	r3, [r0, #24]
	firmware.field_count = ARRAY_SIZE(fields);
	firmware.max_instance_count = 1U;
   2d582:	2301      	movs	r3, #1
   2d584:	83c3      	strh	r3, [r0, #30]
	firmware.create_cb = firmware_create;
   2d586:	4b0c      	ldr	r3, [pc, #48]	; (2d5b8 <lwm2m_firmware_init+0x58>)
   2d588:	6083      	str	r3, [r0, #8]
	lwm2m_register_obj(&firmware);
   2d58a:	f7fa ffc7 	bl	2851c <lwm2m_register_obj>

	/* auto create the only instance */
	ret = lwm2m_create_obj_inst(LWM2M_OBJECT_FIRMWARE_ID, 0, &obj_inst);
   2d58e:	aa01      	add	r2, sp, #4
   2d590:	4621      	mov	r1, r4
   2d592:	2005      	movs	r0, #5
   2d594:	f7fb fae6 	bl	28b64 <lwm2m_create_obj_inst>
	if (ret < 0) {
		LOG_DBG("Create LWM2M instance 0 error: %d", ret);
	}

	return ret;
}
   2d598:	b002      	add	sp, #8
   2d59a:	bd10      	pop	{r4, pc}
   2d59c:	2002a26c 	.word	0x2002a26c
   2d5a0:	20023f8c 	.word	0x20023f8c
   2d5a4:	2002a36c 	.word	0x2002a36c
   2d5a8:	2002a36b 	.word	0x2002a36b
   2d5ac:	2002a26b 	.word	0x2002a26b
   2d5b0:	2003278c 	.word	0x2003278c
   2d5b4:	00090005 	.word	0x00090005
   2d5b8:	0002d5bd 	.word	0x0002d5bd

0002d5bc <firmware_create>:
{
   2d5bc:	b510      	push	{r4, lr}
	memset(ri, 0, sizeof(*ri) * ri_len);
   2d5be:	4c34      	ldr	r4, [pc, #208]	; (2d690 <firmware_create+0xd4>)
   2d5c0:	226c      	movs	r2, #108	; 0x6c
   2d5c2:	2100      	movs	r1, #0
   2d5c4:	4620      	mov	r0, r4
   2d5c6:	f017 fc7d 	bl	44ec4 <memset>
		ri[i].res_inst_id = RES_INSTANCE_NOT_CREATED;
   2d5ca:	f64f 73ff 	movw	r3, #65535	; 0xffff
	INIT_OBJ_RES_OPT(FIRMWARE_PACKAGE_ID, res, i, res_inst, j, 1, true,
   2d5ce:	2200      	movs	r2, #0
   2d5d0:	f8a4 3042 	strh.w	r3, [r4, #66]	; 0x42
   2d5d4:	f8a4 304e 	strh.w	r3, [r4, #78]	; 0x4e
   2d5d8:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
   2d5dc:	f8a4 3066 	strh.w	r3, [r4, #102]	; 0x66
   2d5e0:	482c      	ldr	r0, [pc, #176]	; (2d694 <firmware_create+0xd8>)
   2d5e2:	4b2d      	ldr	r3, [pc, #180]	; (2d698 <firmware_create+0xdc>)
   2d5e4:	2101      	movs	r1, #1
   2d5e6:	e9c3 0202 	strd	r0, r2, [r3, #8]
	INIT_OBJ_RES(FIRMWARE_PACKAGE_URI_ID, res, i, res_inst, j, 1, true,
   2d5ea:	f104 000c 	add.w	r0, r4, #12
   2d5ee:	6298      	str	r0, [r3, #40]	; 0x28
   2d5f0:	482a      	ldr	r0, [pc, #168]	; (2d69c <firmware_create+0xe0>)
	INIT_OBJ_RES_OPT(FIRMWARE_PACKAGE_ID, res, i, res_inst, j, 1, true,
   2d5f2:	829a      	strh	r2, [r3, #20]
	INIT_OBJ_RES(FIRMWARE_PACKAGE_URI_ID, res, i, res_inst, j, 1, true,
   2d5f4:	e9c3 0208 	strd	r0, r2, [r3, #32]
   2d5f8:	4829      	ldr	r0, [pc, #164]	; (2d6a0 <firmware_create+0xe4>)
	INIT_OBJ_RES_OPT(FIRMWARE_PACKAGE_ID, res, i, res_inst, j, 1, true,
   2d5fa:	611c      	str	r4, [r3, #16]
	INIT_OBJ_RES(FIRMWARE_PACKAGE_URI_ID, res, i, res_inst, j, 1, true,
   2d5fc:	60e0      	str	r0, [r4, #12]
   2d5fe:	20ff      	movs	r0, #255	; 0xff
   2d600:	8220      	strh	r0, [r4, #16]
	INIT_OBJ_RES_EXECUTE(FIRMWARE_UPDATE_ID, res, i, firmware_update_cb);
   2d602:	2002      	movs	r0, #2
   2d604:	f8a3 0044 	strh.w	r0, [r3, #68]	; 0x44
   2d608:	4826      	ldr	r0, [pc, #152]	; (2d6a4 <firmware_create+0xe8>)
	INIT_OBJ_RES_OPT(FIRMWARE_PACKAGE_ID, res, i, res_inst, j, 1, true,
   2d60a:	7599      	strb	r1, [r3, #22]
	INIT_OBJ_RES_EXECUTE(FIRMWARE_UPDATE_ID, res, i, firmware_update_cb);
   2d60c:	63d8      	str	r0, [r3, #60]	; 0x3c
	INIT_OBJ_RES_DATA(FIRMWARE_STATE_ID, res, i, res_inst, j,
   2d60e:	2003      	movs	r0, #3
   2d610:	f8a3 005c 	strh.w	r0, [r3, #92]	; 0x5c
   2d614:	f104 0018 	add.w	r0, r4, #24
   2d618:	6598      	str	r0, [r3, #88]	; 0x58
   2d61a:	4823      	ldr	r0, [pc, #140]	; (2d6a8 <firmware_create+0xec>)
	INIT_OBJ_RES_OPT(FIRMWARE_PACKAGE_ID, res, i, res_inst, j, 1, true,
   2d61c:	e9c3 2200 	strd	r2, r2, [r3]
	INIT_OBJ_RES(FIRMWARE_PACKAGE_URI_ID, res, i, res_inst, j, 1, true,
   2d620:	8599      	strh	r1, [r3, #44]	; 0x2c
   2d622:	f883 102e 	strb.w	r1, [r3, #46]	; 0x2e
   2d626:	e9c3 2206 	strd	r2, r2, [r3, #24]
	INIT_OBJ_RES_EXECUTE(FIRMWARE_UPDATE_ID, res, i, firmware_update_cb);
   2d62a:	641a      	str	r2, [r3, #64]	; 0x40
   2d62c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
   2d630:	e9c3 220c 	strd	r2, r2, [r3, #48]	; 0x30
   2d634:	639a      	str	r2, [r3, #56]	; 0x38
	INIT_OBJ_RES_DATA(FIRMWARE_STATE_ID, res, i, res_inst, j,
   2d636:	f883 105e 	strb.w	r1, [r3, #94]	; 0x5e
   2d63a:	e9c3 2212 	strd	r2, r2, [r3, #72]	; 0x48
   2d63e:	e9c3 2214 	strd	r2, r2, [r3, #80]	; 0x50
   2d642:	61a0      	str	r0, [r4, #24]
	INIT_OBJ_RES_DATA(FIRMWARE_UPDATE_RESULT_ID, res, i, res_inst, j,
   2d644:	2005      	movs	r0, #5
   2d646:	f8a3 0074 	strh.w	r0, [r3, #116]	; 0x74
   2d64a:	f104 0024 	add.w	r0, r4, #36	; 0x24
   2d64e:	6718      	str	r0, [r3, #112]	; 0x70
   2d650:	4816      	ldr	r0, [pc, #88]	; (2d6ac <firmware_create+0xf0>)
   2d652:	e9c3 2218 	strd	r2, r2, [r3, #96]	; 0x60
   2d656:	6260      	str	r0, [r4, #36]	; 0x24
	INIT_OBJ_RES_DATA(FIRMWARE_UPDATE_DELIV_METHOD_ID, res, i, res_inst, j,
   2d658:	2009      	movs	r0, #9
   2d65a:	f8a3 008c 	strh.w	r0, [r3, #140]	; 0x8c
   2d65e:	f104 0030 	add.w	r0, r4, #48	; 0x30
   2d662:	f8c3 0088 	str.w	r0, [r3, #136]	; 0x88
	inst.resources = res;
   2d666:	4812      	ldr	r0, [pc, #72]	; (2d6b0 <firmware_create+0xf4>)
	INIT_OBJ_RES_DATA(FIRMWARE_UPDATE_RESULT_ID, res, i, res_inst, j,
   2d668:	e9c3 221a 	strd	r2, r2, [r3, #104]	; 0x68
	INIT_OBJ_RES_DATA(FIRMWARE_UPDATE_DELIV_METHOD_ID, res, i, res_inst, j,
   2d66c:	e9c3 221e 	strd	r2, r2, [r3, #120]	; 0x78
   2d670:	e9c3 2220 	strd	r2, r2, [r3, #128]	; 0x80
	INIT_OBJ_RES_DATA(FIRMWARE_UPDATE_RESULT_ID, res, i, res_inst, j,
   2d674:	f883 1076 	strb.w	r1, [r3, #118]	; 0x76
	INIT_OBJ_RES_DATA(FIRMWARE_UPDATE_DELIV_METHOD_ID, res, i, res_inst, j,
   2d678:	f883 108e 	strb.w	r1, [r3, #142]	; 0x8e
	inst.resources = res;
   2d67c:	6083      	str	r3, [r0, #8]
	inst.resource_count = i;
   2d67e:	2306      	movs	r3, #6
	INIT_OBJ_RES_DATA(FIRMWARE_UPDATE_DELIV_METHOD_ID, res, i, res_inst, j,
   2d680:	4a0c      	ldr	r2, [pc, #48]	; (2d6b4 <firmware_create+0xf8>)
	INIT_OBJ_RES_DATA(FIRMWARE_STATE_ID, res, i, res_inst, j,
   2d682:	83a1      	strh	r1, [r4, #28]
	INIT_OBJ_RES_DATA(FIRMWARE_UPDATE_RESULT_ID, res, i, res_inst, j,
   2d684:	8521      	strh	r1, [r4, #40]	; 0x28
	INIT_OBJ_RES_DATA(FIRMWARE_UPDATE_DELIV_METHOD_ID, res, i, res_inst, j,
   2d686:	6322      	str	r2, [r4, #48]	; 0x30
   2d688:	86a1      	strh	r1, [r4, #52]	; 0x34
	inst.resource_count = i;
   2d68a:	81c3      	strh	r3, [r0, #14]
}
   2d68c:	bd10      	pop	{r4, pc}
   2d68e:	bf00      	nop
   2d690:	200240ac 	.word	0x200240ac
   2d694:	0002d875 	.word	0x0002d875
   2d698:	20023fbc 	.word	0x20023fbc
   2d69c:	0002d841 	.word	0x0002d841
   2d6a0:	2002a26c 	.word	0x2002a26c
   2d6a4:	0002d90d 	.word	0x0002d90d
   2d6a8:	2002a36c 	.word	0x2002a36c
   2d6ac:	2002a36b 	.word	0x2002a36b
   2d6b0:	20023fac 	.word	0x20023fac
   2d6b4:	2002a26b 	.word	0x2002a26b

0002d6b8 <lwm2m_firmware_set_update_state>:
{
   2d6b8:	b510      	push	{r4, lr}
   2d6ba:	4604      	mov	r4, r0
	switch (state) {
   2d6bc:	2803      	cmp	r0, #3
   2d6be:	d82f      	bhi.n	2d720 <lwm2m_firmware_set_update_state+0x68>
   2d6c0:	e8df f000 	tbb	[pc, r0]
   2d6c4:	2a0e0205 	.word	0x2a0e0205
		if (update_state != STATE_IDLE) {
   2d6c8:	4b20      	ldr	r3, [pc, #128]	; (2d74c <lwm2m_firmware_set_update_state+0x94>)
   2d6ca:	781b      	ldrb	r3, [r3, #0]
   2d6cc:	b973      	cbnz	r3, 2d6ec <lwm2m_firmware_set_update_state+0x34>
	update_state = state;
   2d6ce:	4b1f      	ldr	r3, [pc, #124]	; (2d74c <lwm2m_firmware_set_update_state+0x94>)
	NOTIFY_OBSERVER(LWM2M_OBJECT_FIRMWARE_ID, 0, FIRMWARE_STATE_ID);
   2d6d0:	2203      	movs	r2, #3
	update_state = state;
   2d6d2:	701c      	strb	r4, [r3, #0]
	NOTIFY_OBSERVER(LWM2M_OBJECT_FIRMWARE_ID, 0, FIRMWARE_STATE_ID);
   2d6d4:	2100      	movs	r1, #0
}
   2d6d6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	NOTIFY_OBSERVER(LWM2M_OBJECT_FIRMWARE_ID, 0, FIRMWARE_STATE_ID);
   2d6da:	2005      	movs	r0, #5
   2d6dc:	f7fa befa 	b.w	284d4 <lwm2m_notify_observer>
		if (update_state != STATE_DOWNLOADING &&
   2d6e0:	4b1a      	ldr	r3, [pc, #104]	; (2d74c <lwm2m_firmware_set_update_state+0x94>)
   2d6e2:	781b      	ldrb	r3, [r3, #0]
   2d6e4:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
   2d6e8:	2b01      	cmp	r3, #1
		if (update_state != STATE_DOWNLOADED) {
   2d6ea:	d0f0      	beq.n	2d6ce <lwm2m_firmware_set_update_state+0x16>
		LOG_ERR("Invalid state transition: %u -> %u",
   2d6ec:	4b18      	ldr	r3, [pc, #96]	; (2d750 <lwm2m_firmware_set_update_state+0x98>)
   2d6ee:	681b      	ldr	r3, [r3, #0]
   2d6f0:	075b      	lsls	r3, r3, #29
   2d6f2:	d0ec      	beq.n	2d6ce <lwm2m_firmware_set_update_state+0x16>
   2d6f4:	2201      	movs	r2, #1
   2d6f6:	f04f 0300 	mov.w	r3, #0
   2d6fa:	4916      	ldr	r1, [pc, #88]	; (2d754 <lwm2m_firmware_set_update_state+0x9c>)
   2d6fc:	f362 0307 	bfi	r3, r2, #0, #8
   2d700:	4a15      	ldr	r2, [pc, #84]	; (2d758 <lwm2m_firmware_set_update_state+0xa0>)
   2d702:	4816      	ldr	r0, [pc, #88]	; (2d75c <lwm2m_firmware_set_update_state+0xa4>)
   2d704:	1a52      	subs	r2, r2, r1
   2d706:	4911      	ldr	r1, [pc, #68]	; (2d74c <lwm2m_firmware_set_update_state+0x94>)
   2d708:	08d2      	lsrs	r2, r2, #3
   2d70a:	f362 138f 	bfi	r3, r2, #6, #10
   2d70e:	7809      	ldrb	r1, [r1, #0]
   2d710:	4622      	mov	r2, r4
   2d712:	f013 f9b7 	bl	40a84 <log_2>
   2d716:	e7da      	b.n	2d6ce <lwm2m_firmware_set_update_state+0x16>
		if (update_state != STATE_DOWNLOADED) {
   2d718:	4b0c      	ldr	r3, [pc, #48]	; (2d74c <lwm2m_firmware_set_update_state+0x94>)
   2d71a:	781b      	ldrb	r3, [r3, #0]
   2d71c:	2b02      	cmp	r3, #2
   2d71e:	e7e4      	b.n	2d6ea <lwm2m_firmware_set_update_state+0x32>
		LOG_ERR("Unhandled state: %u", state);
   2d720:	4b0b      	ldr	r3, [pc, #44]	; (2d750 <lwm2m_firmware_set_update_state+0x98>)
   2d722:	681b      	ldr	r3, [r3, #0]
   2d724:	075a      	lsls	r2, r3, #29
   2d726:	d010      	beq.n	2d74a <lwm2m_firmware_set_update_state+0x92>
}
   2d728:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		LOG_ERR("Unhandled state: %u", state);
   2d72c:	2301      	movs	r3, #1
   2d72e:	f04f 0200 	mov.w	r2, #0
   2d732:	4908      	ldr	r1, [pc, #32]	; (2d754 <lwm2m_firmware_set_update_state+0x9c>)
   2d734:	f363 0207 	bfi	r2, r3, #0, #8
   2d738:	4b07      	ldr	r3, [pc, #28]	; (2d758 <lwm2m_firmware_set_update_state+0xa0>)
   2d73a:	1a5b      	subs	r3, r3, r1
   2d73c:	08db      	lsrs	r3, r3, #3
   2d73e:	4601      	mov	r1, r0
   2d740:	f363 128f 	bfi	r2, r3, #6, #10
   2d744:	4806      	ldr	r0, [pc, #24]	; (2d760 <lwm2m_firmware_set_update_state+0xa8>)
   2d746:	f013 b989 	b.w	40a5c <log_1>
}
   2d74a:	bd10      	pop	{r4, pc}
   2d74c:	2002a36c 	.word	0x2002a36c
   2d750:	20032b18 	.word	0x20032b18
   2d754:	00045f08 	.word	0x00045f08
   2d758:	00046030 	.word	0x00046030
   2d75c:	0004be22 	.word	0x0004be22
   2d760:	0004be0e 	.word	0x0004be0e

0002d764 <lwm2m_firmware_set_update_result>:
{
   2d764:	b570      	push	{r4, r5, r6, lr}
   2d766:	4606      	mov	r6, r0
   2d768:	2400      	movs	r4, #0
	switch (result) {
   2d76a:	2809      	cmp	r0, #9
   2d76c:	d843      	bhi.n	2d7f6 <lwm2m_firmware_set_update_result+0x92>
   2d76e:	e8df f000 	tbb	[pc, r0]
   2d772:	1105      	.short	0x1105
   2d774:	36323232 	.word	0x36323232
   2d778:	32363232 	.word	0x32363232
		lwm2m_firmware_set_update_state(STATE_IDLE);
   2d77c:	2000      	movs	r0, #0
   2d77e:	f7ff ff9b 	bl	2d6b8 <lwm2m_firmware_set_update_state>
	NOTIFY_OBSERVER(LWM2M_OBJECT_FIRMWARE_ID, 0, FIRMWARE_UPDATE_RESULT_ID);
   2d782:	2205      	movs	r2, #5
	update_result = result;
   2d784:	4b27      	ldr	r3, [pc, #156]	; (2d824 <lwm2m_firmware_set_update_result+0xc0>)
	NOTIFY_OBSERVER(LWM2M_OBJECT_FIRMWARE_ID, 0, FIRMWARE_UPDATE_RESULT_ID);
   2d786:	2100      	movs	r1, #0
	update_result = result;
   2d788:	701e      	strb	r6, [r3, #0]
	NOTIFY_OBSERVER(LWM2M_OBJECT_FIRMWARE_ID, 0, FIRMWARE_UPDATE_RESULT_ID);
   2d78a:	4610      	mov	r0, r2
}
   2d78c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	NOTIFY_OBSERVER(LWM2M_OBJECT_FIRMWARE_ID, 0, FIRMWARE_UPDATE_RESULT_ID);
   2d790:	f7fa bea0 	b.w	284d4 <lwm2m_notify_observer>
		if (update_state != STATE_UPDATING) {
   2d794:	4b24      	ldr	r3, [pc, #144]	; (2d828 <lwm2m_firmware_set_update_result+0xc4>)
   2d796:	781b      	ldrb	r3, [r3, #0]
   2d798:	2b03      	cmp	r3, #3
		if (update_state != STATE_DOWNLOADING) {
   2d79a:	bf16      	itet	ne
   2d79c:	461c      	movne	r4, r3
   2d79e:	2500      	moveq	r5, #0
   2d7a0:	2501      	movne	r5, #1
		lwm2m_firmware_set_update_state(STATE_IDLE);
   2d7a2:	2000      	movs	r0, #0
   2d7a4:	f7ff ff88 	bl	2d6b8 <lwm2m_firmware_set_update_state>
	if (error) {
   2d7a8:	2d00      	cmp	r5, #0
   2d7aa:	d0ea      	beq.n	2d782 <lwm2m_firmware_set_update_result+0x1e>
		LOG_ERR("Unexpected result(%u) set while state is %u",
   2d7ac:	4b1f      	ldr	r3, [pc, #124]	; (2d82c <lwm2m_firmware_set_update_result+0xc8>)
   2d7ae:	681b      	ldr	r3, [r3, #0]
   2d7b0:	075b      	lsls	r3, r3, #29
   2d7b2:	d0e6      	beq.n	2d782 <lwm2m_firmware_set_update_result+0x1e>
   2d7b4:	2201      	movs	r2, #1
   2d7b6:	f04f 0300 	mov.w	r3, #0
   2d7ba:	491d      	ldr	r1, [pc, #116]	; (2d830 <lwm2m_firmware_set_update_result+0xcc>)
   2d7bc:	f362 0307 	bfi	r3, r2, #0, #8
   2d7c0:	4a1c      	ldr	r2, [pc, #112]	; (2d834 <lwm2m_firmware_set_update_result+0xd0>)
   2d7c2:	481d      	ldr	r0, [pc, #116]	; (2d838 <lwm2m_firmware_set_update_result+0xd4>)
   2d7c4:	1a52      	subs	r2, r2, r1
   2d7c6:	08d2      	lsrs	r2, r2, #3
   2d7c8:	f362 138f 	bfi	r3, r2, #6, #10
   2d7cc:	4631      	mov	r1, r6
   2d7ce:	4622      	mov	r2, r4
   2d7d0:	f013 f958 	bl	40a84 <log_2>
   2d7d4:	e7d5      	b.n	2d782 <lwm2m_firmware_set_update_result+0x1e>
		if (update_state != STATE_DOWNLOADING) {
   2d7d6:	4b14      	ldr	r3, [pc, #80]	; (2d828 <lwm2m_firmware_set_update_result+0xc4>)
   2d7d8:	781b      	ldrb	r3, [r3, #0]
   2d7da:	2b01      	cmp	r3, #1
   2d7dc:	e7dd      	b.n	2d79a <lwm2m_firmware_set_update_result+0x36>
		if (update_state != STATE_DOWNLOADING &&
   2d7de:	4b12      	ldr	r3, [pc, #72]	; (2d828 <lwm2m_firmware_set_update_result+0xc4>)
   2d7e0:	781b      	ldrb	r3, [r3, #0]
   2d7e2:	2b01      	cmp	r3, #1
   2d7e4:	d005      	beq.n	2d7f2 <lwm2m_firmware_set_update_result+0x8e>
	bool error = false;
   2d7e6:	2b03      	cmp	r3, #3
   2d7e8:	bf16      	itet	ne
   2d7ea:	2501      	movne	r5, #1
   2d7ec:	2500      	moveq	r5, #0
   2d7ee:	461c      	movne	r4, r3
   2d7f0:	e7d7      	b.n	2d7a2 <lwm2m_firmware_set_update_result+0x3e>
   2d7f2:	2500      	movs	r5, #0
   2d7f4:	e7d5      	b.n	2d7a2 <lwm2m_firmware_set_update_result+0x3e>
		LOG_ERR("Unhandled result: %u", result);
   2d7f6:	4b0d      	ldr	r3, [pc, #52]	; (2d82c <lwm2m_firmware_set_update_result+0xc8>)
   2d7f8:	681b      	ldr	r3, [r3, #0]
   2d7fa:	075a      	lsls	r2, r3, #29
   2d7fc:	d010      	beq.n	2d820 <lwm2m_firmware_set_update_result+0xbc>
}
   2d7fe:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		LOG_ERR("Unhandled result: %u", result);
   2d802:	2301      	movs	r3, #1
   2d804:	f04f 0200 	mov.w	r2, #0
   2d808:	4909      	ldr	r1, [pc, #36]	; (2d830 <lwm2m_firmware_set_update_result+0xcc>)
   2d80a:	f363 0207 	bfi	r2, r3, #0, #8
   2d80e:	4b09      	ldr	r3, [pc, #36]	; (2d834 <lwm2m_firmware_set_update_result+0xd0>)
   2d810:	1a5b      	subs	r3, r3, r1
   2d812:	08db      	lsrs	r3, r3, #3
   2d814:	4601      	mov	r1, r0
   2d816:	f363 128f 	bfi	r2, r3, #6, #10
   2d81a:	4808      	ldr	r0, [pc, #32]	; (2d83c <lwm2m_firmware_set_update_result+0xd8>)
   2d81c:	f013 b91e 	b.w	40a5c <log_1>
}
   2d820:	bd70      	pop	{r4, r5, r6, pc}
   2d822:	bf00      	nop
   2d824:	2002a36b 	.word	0x2002a36b
   2d828:	2002a36c 	.word	0x2002a36c
   2d82c:	20032b18 	.word	0x20032b18
   2d830:	00045f08 	.word	0x00045f08
   2d834:	00046030 	.word	0x00046030
   2d838:	0004bde2 	.word	0x0004bde2
   2d83c:	0004bdcd 	.word	0x0004bdcd

0002d840 <package_uri_write_cb>:
{
   2d840:	b508      	push	{r3, lr}
	return update_state;
   2d842:	4b0a      	ldr	r3, [pc, #40]	; (2d86c <package_uri_write_cb+0x2c>)
{
   2d844:	f8bd 0008 	ldrh.w	r0, [sp, #8]
	return update_state;
   2d848:	781b      	ldrb	r3, [r3, #0]
	if (state == STATE_IDLE) {
   2d84a:	b93b      	cbnz	r3, 2d85c <package_uri_write_cb+0x1c>
		lwm2m_firmware_set_update_result(RESULT_DEFAULT);
   2d84c:	4618      	mov	r0, r3
   2d84e:	f7ff ff89 	bl	2d764 <lwm2m_firmware_set_update_result>
		lwm2m_firmware_start_transfer(package_uri);
   2d852:	4807      	ldr	r0, [pc, #28]	; (2d870 <package_uri_write_cb+0x30>)
   2d854:	f000 fbe6 	bl	2e024 <lwm2m_firmware_start_transfer>
}
   2d858:	2000      	movs	r0, #0
   2d85a:	bd08      	pop	{r3, pc}
	} else if (state == STATE_DOWNLOADED && data_len == 0U) {
   2d85c:	2b02      	cmp	r3, #2
   2d85e:	d1fb      	bne.n	2d858 <package_uri_write_cb+0x18>
   2d860:	2800      	cmp	r0, #0
   2d862:	d1f9      	bne.n	2d858 <package_uri_write_cb+0x18>
		lwm2m_firmware_set_update_result(RESULT_DEFAULT);
   2d864:	f7ff ff7e 	bl	2d764 <lwm2m_firmware_set_update_result>
   2d868:	e7f6      	b.n	2d858 <package_uri_write_cb+0x18>
   2d86a:	bf00      	nop
   2d86c:	2002a36c 	.word	0x2002a36c
   2d870:	2002a26c 	.word	0x2002a26c

0002d874 <package_write_cb>:
{
   2d874:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
   2d878:	469a      	mov	sl, r3
	return update_state;
   2d87a:	4b22      	ldr	r3, [pc, #136]	; (2d904 <package_write_cb+0x90>)
{
   2d87c:	4607      	mov	r7, r0
	return update_state;
   2d87e:	7818      	ldrb	r0, [r3, #0]
{
   2d880:	4688      	mov	r8, r1
   2d882:	4691      	mov	r9, r2
   2d884:	f8bd 4030 	ldrh.w	r4, [sp, #48]	; 0x30
   2d888:	f89d 5034 	ldrb.w	r5, [sp, #52]	; 0x34
	if (state == STATE_IDLE) {
   2d88c:	b958      	cbnz	r0, 2d8a6 <package_write_cb+0x32>
		lwm2m_firmware_set_update_state(STATE_DOWNLOADING);
   2d88e:	2001      	movs	r0, #1
   2d890:	f7ff ff12 	bl	2d6b8 <lwm2m_firmware_set_update_state>
	ret = write_cb ? write_cb(obj_inst_id, res_id, res_inst_id,
   2d894:	4b1c      	ldr	r3, [pc, #112]	; (2d908 <package_write_cb+0x94>)
   2d896:	681e      	ldr	r6, [r3, #0]
				  last_block, total_size) : 0;
   2d898:	b976      	cbnz	r6, 2d8b8 <package_write_cb+0x44>
		if (last_block) {
   2d89a:	b9ed      	cbnz	r5, 2d8d8 <package_write_cb+0x64>
		return 0;
   2d89c:	2400      	movs	r4, #0
}
   2d89e:	4620      	mov	r0, r4
   2d8a0:	b004      	add	sp, #16
   2d8a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	} else if (state != STATE_DOWNLOADING) {
   2d8a6:	2801      	cmp	r0, #1
   2d8a8:	d0f4      	beq.n	2d894 <package_write_cb+0x20>
		if (data_len == 0U && state == STATE_DOWNLOADED) {
   2d8aa:	bb44      	cbnz	r4, 2d8fe <package_write_cb+0x8a>
   2d8ac:	2802      	cmp	r0, #2
   2d8ae:	d126      	bne.n	2d8fe <package_write_cb+0x8a>
			lwm2m_firmware_set_update_result(RESULT_DEFAULT);
   2d8b0:	4620      	mov	r0, r4
		lwm2m_firmware_set_update_result(RESULT_UPDATE_FAILED);
   2d8b2:	f7ff ff57 	bl	2d764 <lwm2m_firmware_set_update_result>
   2d8b6:	e7f2      	b.n	2d89e <package_write_cb+0x2a>
	ret = write_cb ? write_cb(obj_inst_id, res_id, res_inst_id,
   2d8b8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   2d8ba:	9400      	str	r4, [sp, #0]
   2d8bc:	e9cd 5301 	strd	r5, r3, [sp, #4]
   2d8c0:	464a      	mov	r2, r9
   2d8c2:	4653      	mov	r3, sl
   2d8c4:	4641      	mov	r1, r8
   2d8c6:	4638      	mov	r0, r7
   2d8c8:	47b0      	blx	r6
	if (ret >= 0) {
   2d8ca:	1e04      	subs	r4, r0, #0
   2d8cc:	dae5      	bge.n	2d89a <package_write_cb+0x26>
	} else if (ret == -ENOMEM) {
   2d8ce:	f114 0f0c 	cmn.w	r4, #12
   2d8d2:	d105      	bne.n	2d8e0 <package_write_cb+0x6c>
		lwm2m_firmware_set_update_result(RESULT_OUT_OF_MEM);
   2d8d4:	2003      	movs	r0, #3
   2d8d6:	e7ec      	b.n	2d8b2 <package_write_cb+0x3e>
			lwm2m_firmware_set_update_state(STATE_DOWNLOADED);
   2d8d8:	2002      	movs	r0, #2
   2d8da:	f7ff feed 	bl	2d6b8 <lwm2m_firmware_set_update_state>
   2d8de:	e7dd      	b.n	2d89c <package_write_cb+0x28>
	} else if (ret == -ENOSPC) {
   2d8e0:	f114 0f1c 	cmn.w	r4, #28
   2d8e4:	d105      	bne.n	2d8f2 <package_write_cb+0x7e>
		lwm2m_firmware_set_update_result(RESULT_NO_STORAGE);
   2d8e6:	2002      	movs	r0, #2
   2d8e8:	f7ff ff3c 	bl	2d764 <lwm2m_firmware_set_update_result>
		ret = -EFBIG;
   2d8ec:	f06f 041a 	mvn.w	r4, #26
   2d8f0:	e7d5      	b.n	2d89e <package_write_cb+0x2a>
	} else if (ret == -EFAULT) {
   2d8f2:	f114 0f0e 	cmn.w	r4, #14
		lwm2m_firmware_set_update_result(RESULT_INTEGRITY_FAILED);
   2d8f6:	bf0c      	ite	eq
   2d8f8:	2005      	moveq	r0, #5
		lwm2m_firmware_set_update_result(RESULT_UPDATE_FAILED);
   2d8fa:	2008      	movne	r0, #8
   2d8fc:	e7d9      	b.n	2d8b2 <package_write_cb+0x3e>
		return -EPERM;
   2d8fe:	f04f 34ff 	mov.w	r4, #4294967295
   2d902:	e7cc      	b.n	2d89e <package_write_cb+0x2a>
   2d904:	2002a36c 	.word	0x2002a36c
   2d908:	2002411c 	.word	0x2002411c

0002d90c <firmware_update_cb>:
{
   2d90c:	b510      	push	{r4, lr}
	return update_state;
   2d90e:	4b20      	ldr	r3, [pc, #128]	; (2d990 <firmware_update_cb+0x84>)
{
   2d910:	4604      	mov	r4, r0
	return update_state;
   2d912:	7819      	ldrb	r1, [r3, #0]
	if (state != STATE_DOWNLOADED) {
   2d914:	2902      	cmp	r1, #2
   2d916:	d014      	beq.n	2d942 <firmware_update_cb+0x36>
		LOG_ERR("State other than downloaded: %d", state);
   2d918:	4b1e      	ldr	r3, [pc, #120]	; (2d994 <firmware_update_cb+0x88>)
   2d91a:	681b      	ldr	r3, [r3, #0]
   2d91c:	075a      	lsls	r2, r3, #29
   2d91e:	d00d      	beq.n	2d93c <firmware_update_cb+0x30>
   2d920:	2301      	movs	r3, #1
   2d922:	f04f 0200 	mov.w	r2, #0
   2d926:	481c      	ldr	r0, [pc, #112]	; (2d998 <firmware_update_cb+0x8c>)
   2d928:	f363 0207 	bfi	r2, r3, #0, #8
   2d92c:	4b1b      	ldr	r3, [pc, #108]	; (2d99c <firmware_update_cb+0x90>)
   2d92e:	1a1b      	subs	r3, r3, r0
   2d930:	08db      	lsrs	r3, r3, #3
   2d932:	f363 128f 	bfi	r2, r3, #6, #10
   2d936:	481a      	ldr	r0, [pc, #104]	; (2d9a0 <firmware_update_cb+0x94>)
   2d938:	f013 f890 	bl	40a5c <log_1>
		return -EPERM;
   2d93c:	f04f 30ff 	mov.w	r0, #4294967295
   2d940:	e006      	b.n	2d950 <firmware_update_cb+0x44>
	lwm2m_firmware_set_update_state(STATE_UPDATING);
   2d942:	2003      	movs	r0, #3
   2d944:	f7ff feb8 	bl	2d6b8 <lwm2m_firmware_set_update_state>
	return update_cb;
   2d948:	4b16      	ldr	r3, [pc, #88]	; (2d9a4 <firmware_update_cb+0x98>)
   2d94a:	681b      	ldr	r3, [r3, #0]
	if (callback) {
   2d94c:	b90b      	cbnz	r3, 2d952 <firmware_update_cb+0x46>
			return 0;
   2d94e:	2000      	movs	r0, #0
}
   2d950:	bd10      	pop	{r4, pc}
		ret = callback(obj_inst_id);
   2d952:	4620      	mov	r0, r4
   2d954:	4798      	blx	r3
		if (ret < 0) {
   2d956:	1e04      	subs	r4, r0, #0
   2d958:	daf9      	bge.n	2d94e <firmware_update_cb+0x42>
			LOG_ERR("Failed to update firmware: %d", ret);
   2d95a:	4b0e      	ldr	r3, [pc, #56]	; (2d994 <firmware_update_cb+0x88>)
   2d95c:	681b      	ldr	r3, [r3, #0]
   2d95e:	075b      	lsls	r3, r3, #29
   2d960:	d00e      	beq.n	2d980 <firmware_update_cb+0x74>
   2d962:	2301      	movs	r3, #1
   2d964:	f04f 0200 	mov.w	r2, #0
   2d968:	490b      	ldr	r1, [pc, #44]	; (2d998 <firmware_update_cb+0x8c>)
   2d96a:	f363 0207 	bfi	r2, r3, #0, #8
   2d96e:	4b0b      	ldr	r3, [pc, #44]	; (2d99c <firmware_update_cb+0x90>)
   2d970:	480d      	ldr	r0, [pc, #52]	; (2d9a8 <firmware_update_cb+0x9c>)
   2d972:	1a5b      	subs	r3, r3, r1
   2d974:	08db      	lsrs	r3, r3, #3
   2d976:	f363 128f 	bfi	r2, r3, #6, #10
   2d97a:	4621      	mov	r1, r4
   2d97c:	f013 f86e 	bl	40a5c <log_1>
			lwm2m_firmware_set_update_result(
   2d980:	3416      	adds	r4, #22
   2d982:	bf0c      	ite	eq
   2d984:	2005      	moveq	r0, #5
   2d986:	2008      	movne	r0, #8
   2d988:	f7ff feec 	bl	2d764 <lwm2m_firmware_set_update_result>
   2d98c:	e7df      	b.n	2d94e <firmware_update_cb+0x42>
   2d98e:	bf00      	nop
   2d990:	2002a36c 	.word	0x2002a36c
   2d994:	20032b18 	.word	0x20032b18
   2d998:	00045f08 	.word	0x00045f08
   2d99c:	00046030 	.word	0x00046030
   2d9a0:	0004bd8f 	.word	0x0004bd8f
   2d9a4:	20024118 	.word	0x20024118
   2d9a8:	0004bdaf 	.word	0x0004bdaf

0002d9ac <lwm2m_firmware_set_write_cb>:
	write_cb = cb;
   2d9ac:	4b01      	ldr	r3, [pc, #4]	; (2d9b4 <lwm2m_firmware_set_write_cb+0x8>)
   2d9ae:	6018      	str	r0, [r3, #0]
}
   2d9b0:	4770      	bx	lr
   2d9b2:	bf00      	nop
   2d9b4:	2002411c 	.word	0x2002411c

0002d9b8 <lwm2m_firmware_get_write_cb>:
}
   2d9b8:	4b01      	ldr	r3, [pc, #4]	; (2d9c0 <lwm2m_firmware_get_write_cb+0x8>)
   2d9ba:	6818      	ldr	r0, [r3, #0]
   2d9bc:	4770      	bx	lr
   2d9be:	bf00      	nop
   2d9c0:	2002411c 	.word	0x2002411c

0002d9c4 <lwm2m_firmware_set_update_cb>:
	update_cb = cb;
   2d9c4:	4b01      	ldr	r3, [pc, #4]	; (2d9cc <lwm2m_firmware_set_update_cb+0x8>)
   2d9c6:	6018      	str	r0, [r3, #0]
}
   2d9c8:	4770      	bx	lr
   2d9ca:	bf00      	nop
   2d9cc:	20024118 	.word	0x20024118

0002d9d0 <transfer_request.constprop.5>:
	} else {
		lwm2m_firmware_set_update_result(RESULT_UPDATE_FAILED);
	}
}

static int transfer_request(struct coap_block_context *ctx,
   2d9d0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   2d9d4:	4606      	mov	r6, r0
   2d9d6:	b089      	sub	sp, #36	; 0x24
	struct http_parser_url parser;
	u16_t off, len;
	char *next_slash;
#endif

	msg = lwm2m_get_message(&firmware_ctx);
   2d9d8:	487b      	ldr	r0, [pc, #492]	; (2dbc8 <transfer_request.constprop.5+0x1f8>)
static int transfer_request(struct coap_block_context *ctx,
   2d9da:	460c      	mov	r4, r1
	msg = lwm2m_get_message(&firmware_ctx);
   2d9dc:	f7fb f970 	bl	28cc0 <lwm2m_get_message>
	if (!msg) {
   2d9e0:	4605      	mov	r5, r0
   2d9e2:	b9a0      	cbnz	r0, 2da0e <transfer_request.constprop.5+0x3e>
		LOG_ERR("Unable to get a lwm2m message!");
   2d9e4:	4b79      	ldr	r3, [pc, #484]	; (2dbcc <transfer_request.constprop.5+0x1fc>)
   2d9e6:	681b      	ldr	r3, [r3, #0]
   2d9e8:	075b      	lsls	r3, r3, #29
   2d9ea:	d00d      	beq.n	2da08 <transfer_request.constprop.5+0x38>
   2d9ec:	2301      	movs	r3, #1
   2d9ee:	f04f 0100 	mov.w	r1, #0
   2d9f2:	4a77      	ldr	r2, [pc, #476]	; (2dbd0 <transfer_request.constprop.5+0x200>)
   2d9f4:	f363 0107 	bfi	r1, r3, #0, #8
   2d9f8:	4b76      	ldr	r3, [pc, #472]	; (2dbd4 <transfer_request.constprop.5+0x204>)
   2d9fa:	4877      	ldr	r0, [pc, #476]	; (2dbd8 <transfer_request.constprop.5+0x208>)
   2d9fc:	1a9b      	subs	r3, r3, r2
   2d9fe:	08db      	lsrs	r3, r3, #3
   2da00:	f363 118f 	bfi	r1, r3, #6, #10
   2da04:	f013 f81d 	bl	40a42 <log_0>
		return -ENOMEM;
   2da08:	f06f 040b 	mvn.w	r4, #11
   2da0c:	e027      	b.n	2da5e <transfer_request.constprop.5+0x8e>
	}

	msg->type = COAP_TYPE_CON;
	msg->code = COAP_METHOD_GET;
	msg->mid = 0U;
   2da0e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
   2da12:	f8c0 3180 	str.w	r3, [r0, #384]	; 0x180
	msg->token = token;
	msg->tkl = tkl;
	msg->reply_cb = reply_cb;
   2da16:	4b71      	ldr	r3, [pc, #452]	; (2dbdc <transfer_request.constprop.5+0x20c>)
	msg->tkl = tkl;
   2da18:	f880 4184 	strb.w	r4, [r0, #388]	; 0x184
	msg->reply_cb = reply_cb;
   2da1c:	f8c0 3178 	str.w	r3, [r0, #376]	; 0x178
	msg->message_timeout_cb = do_transmit_timeout_cb;
   2da20:	4b6f      	ldr	r3, [pc, #444]	; (2dbe0 <transfer_request.constprop.5+0x210>)
	msg->token = token;
   2da22:	f8c0 6174 	str.w	r6, [r0, #372]	; 0x174
	msg->message_timeout_cb = do_transmit_timeout_cb;
   2da26:	f8c0 317c 	str.w	r3, [r0, #380]	; 0x17c

	ret = lwm2m_init_message(msg);
   2da2a:	f7fb f9dd 	bl	28de8 <lwm2m_init_message>
	if (ret < 0) {
   2da2e:	1e04      	subs	r4, r0, #0
   2da30:	da19      	bge.n	2da66 <transfer_request.constprop.5+0x96>
		LOG_ERR("Error setting up lwm2m message");
   2da32:	4b66      	ldr	r3, [pc, #408]	; (2dbcc <transfer_request.constprop.5+0x1fc>)
   2da34:	681b      	ldr	r3, [r3, #0]
   2da36:	075f      	lsls	r7, r3, #29
   2da38:	d00d      	beq.n	2da56 <transfer_request.constprop.5+0x86>
   2da3a:	2301      	movs	r3, #1
   2da3c:	f04f 0100 	mov.w	r1, #0
   2da40:	4a63      	ldr	r2, [pc, #396]	; (2dbd0 <transfer_request.constprop.5+0x200>)
   2da42:	f363 0107 	bfi	r1, r3, #0, #8
   2da46:	4b63      	ldr	r3, [pc, #396]	; (2dbd4 <transfer_request.constprop.5+0x204>)
   2da48:	4866      	ldr	r0, [pc, #408]	; (2dbe4 <transfer_request.constprop.5+0x214>)
   2da4a:	1a9b      	subs	r3, r3, r2
   2da4c:	08db      	lsrs	r3, r3, #3
   2da4e:	f363 118f 	bfi	r1, r3, #6, #10
	}
#else
	/* Ask the server to provide a size estimate */
	ret = coap_append_option_int(&msg->cpkt, COAP_OPTION_SIZE2, 0);
	if (ret < 0) {
		LOG_ERR("Unable to add size2 option.");
   2da52:	f012 fff6 	bl	40a42 <log_0>
	}

	return 0;

cleanup:
	lwm2m_reset_message(msg, true);
   2da56:	2101      	movs	r1, #1
   2da58:	4628      	mov	r0, r5
   2da5a:	f015 fa9d 	bl	42f98 <lwm2m_reset_message>
	return ret;
}
   2da5e:	4620      	mov	r0, r4
   2da60:	b009      	add	sp, #36	; 0x24
   2da62:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	ret = http_parser_parse_url(firmware_uri, strlen(firmware_uri), 0,
   2da66:	4c60      	ldr	r4, [pc, #384]	; (2dbe8 <transfer_request.constprop.5+0x218>)
	http_parser_url_init(&parser);
   2da68:	4668      	mov	r0, sp
   2da6a:	f016 f853 	bl	43b14 <http_parser_url_init>
	ret = http_parser_parse_url(firmware_uri, strlen(firmware_uri), 0,
   2da6e:	4620      	mov	r0, r4
   2da70:	f7ef fb52 	bl	1d118 <strlen>
   2da74:	466b      	mov	r3, sp
   2da76:	4601      	mov	r1, r0
   2da78:	2200      	movs	r2, #0
   2da7a:	4620      	mov	r0, r4
   2da7c:	f001 fc90 	bl	2f3a0 <http_parser_parse_url>
	if (ret < 0) {
   2da80:	2800      	cmp	r0, #0
   2da82:	da19      	bge.n	2dab8 <transfer_request.constprop.5+0xe8>
		LOG_ERR("Invalid firmware url: %s", log_strdup(firmware_uri));
   2da84:	4b51      	ldr	r3, [pc, #324]	; (2dbcc <transfer_request.constprop.5+0x1fc>)
   2da86:	681b      	ldr	r3, [r3, #0]
   2da88:	075e      	lsls	r6, r3, #29
   2da8a:	d012      	beq.n	2dab2 <transfer_request.constprop.5+0xe2>
   2da8c:	2301      	movs	r3, #1
   2da8e:	f04f 0600 	mov.w	r6, #0
   2da92:	4a4f      	ldr	r2, [pc, #316]	; (2dbd0 <transfer_request.constprop.5+0x200>)
   2da94:	f363 0607 	bfi	r6, r3, #0, #8
   2da98:	4b4e      	ldr	r3, [pc, #312]	; (2dbd4 <transfer_request.constprop.5+0x204>)
   2da9a:	4620      	mov	r0, r4
   2da9c:	1a9b      	subs	r3, r3, r2
   2da9e:	08db      	lsrs	r3, r3, #3
   2daa0:	f363 168f 	bfi	r6, r3, #6, #10
   2daa4:	f7f4 f902 	bl	21cac <log_strdup>
   2daa8:	4632      	mov	r2, r6
   2daaa:	4601      	mov	r1, r0
   2daac:	484f      	ldr	r0, [pc, #316]	; (2dbec <transfer_request.constprop.5+0x21c>)
   2daae:	f012 ffd5 	bl	40a5c <log_1>
		ret = -ENOTSUP;
   2dab2:	f06f 0485 	mvn.w	r4, #133	; 0x85
   2dab6:	e7ce      	b.n	2da56 <transfer_request.constprop.5+0x86>
	cursor = firmware_uri + off;
   2dab8:	f8bd 2010 	ldrh.w	r2, [sp, #16]
	len = parser.field_data[UF_PATH].len;
   2dabc:	f8bd 6012 	ldrh.w	r6, [sp, #18]
	cursor = firmware_uri + off;
   2dac0:	4414      	add	r4, r2
	while (len > 0 && (next_slash = strchr(cursor, '/')) != NULL) {
   2dac2:	f105 072c 	add.w	r7, r5, #44	; 0x2c
   2dac6:	b16e      	cbz	r6, 2dae4 <transfer_request.constprop.5+0x114>
   2dac8:	212f      	movs	r1, #47	; 0x2f
   2daca:	4620      	mov	r0, r4
   2dacc:	f017 fb33 	bl	45136 <strchr>
   2dad0:	4680      	mov	r8, r0
   2dad2:	b9f0      	cbnz	r0, 2db12 <transfer_request.constprop.5+0x142>
		ret = coap_packet_append_option(&msg->cpkt,
   2dad4:	4622      	mov	r2, r4
   2dad6:	4633      	mov	r3, r6
   2dad8:	210b      	movs	r1, #11
   2dada:	4638      	mov	r0, r7
   2dadc:	f014 fb82 	bl	421e4 <coap_packet_append_option>
		if (ret < 0) {
   2dae0:	1e04      	subs	r4, r0, #0
   2dae2:	db23      	blt.n	2db2c <transfer_request.constprop.5+0x15c>
	ret = coap_append_block2_option(&msg->cpkt, ctx);
   2dae4:	4942      	ldr	r1, [pc, #264]	; (2dbf0 <transfer_request.constprop.5+0x220>)
   2dae6:	4638      	mov	r0, r7
   2dae8:	f014 fd79 	bl	425de <coap_append_block2_option>
	if (ret < 0) {
   2daec:	1e04      	subs	r4, r0, #0
   2daee:	da35      	bge.n	2db5c <transfer_request.constprop.5+0x18c>
		LOG_ERR("Unable to add block2 option.");
   2daf0:	4b36      	ldr	r3, [pc, #216]	; (2dbcc <transfer_request.constprop.5+0x1fc>)
   2daf2:	681b      	ldr	r3, [r3, #0]
   2daf4:	0759      	lsls	r1, r3, #29
   2daf6:	d0ae      	beq.n	2da56 <transfer_request.constprop.5+0x86>
   2daf8:	2301      	movs	r3, #1
   2dafa:	f04f 0100 	mov.w	r1, #0
   2dafe:	4a34      	ldr	r2, [pc, #208]	; (2dbd0 <transfer_request.constprop.5+0x200>)
   2db00:	f363 0107 	bfi	r1, r3, #0, #8
   2db04:	4b33      	ldr	r3, [pc, #204]	; (2dbd4 <transfer_request.constprop.5+0x204>)
   2db06:	483b      	ldr	r0, [pc, #236]	; (2dbf4 <transfer_request.constprop.5+0x224>)
   2db08:	1a9b      	subs	r3, r3, r2
   2db0a:	08db      	lsrs	r3, r3, #3
   2db0c:	f363 118f 	bfi	r1, r3, #6, #10
   2db10:	e79f      	b.n	2da52 <transfer_request.constprop.5+0x82>
		if (next_slash != cursor) {
   2db12:	4544      	cmp	r4, r8
   2db14:	eba8 0904 	sub.w	r9, r8, r4
   2db18:	d019      	beq.n	2db4e <transfer_request.constprop.5+0x17e>
			ret = coap_packet_append_option(&msg->cpkt,
   2db1a:	4622      	mov	r2, r4
   2db1c:	fa1f f389 	uxth.w	r3, r9
   2db20:	210b      	movs	r1, #11
   2db22:	4638      	mov	r0, r7
   2db24:	f014 fb5e 	bl	421e4 <coap_packet_append_option>
			if (ret < 0) {
   2db28:	1e04      	subs	r4, r0, #0
   2db2a:	da10      	bge.n	2db4e <transfer_request.constprop.5+0x17e>
			LOG_ERR("Error adding URI_PATH");
   2db2c:	4b27      	ldr	r3, [pc, #156]	; (2dbcc <transfer_request.constprop.5+0x1fc>)
   2db2e:	681b      	ldr	r3, [r3, #0]
   2db30:	0758      	lsls	r0, r3, #29
   2db32:	d090      	beq.n	2da56 <transfer_request.constprop.5+0x86>
   2db34:	2301      	movs	r3, #1
   2db36:	f04f 0100 	mov.w	r1, #0
   2db3a:	4a25      	ldr	r2, [pc, #148]	; (2dbd0 <transfer_request.constprop.5+0x200>)
   2db3c:	f363 0107 	bfi	r1, r3, #0, #8
   2db40:	4b24      	ldr	r3, [pc, #144]	; (2dbd4 <transfer_request.constprop.5+0x204>)
   2db42:	482d      	ldr	r0, [pc, #180]	; (2dbf8 <transfer_request.constprop.5+0x228>)
   2db44:	1a9b      	subs	r3, r3, r2
   2db46:	08db      	lsrs	r3, r3, #3
   2db48:	f363 118f 	bfi	r1, r3, #6, #10
   2db4c:	e781      	b.n	2da52 <transfer_request.constprop.5+0x82>
		len -= (next_slash - cursor) + 1;
   2db4e:	3e01      	subs	r6, #1
   2db50:	eba6 0609 	sub.w	r6, r6, r9
   2db54:	b2b6      	uxth	r6, r6
		cursor = next_slash + 1;
   2db56:	f108 0401 	add.w	r4, r8, #1
   2db5a:	e7b4      	b.n	2dac6 <transfer_request.constprop.5+0xf6>
	ret = coap_append_option_int(&msg->cpkt, COAP_OPTION_SIZE2, 0);
   2db5c:	2200      	movs	r2, #0
   2db5e:	211c      	movs	r1, #28
   2db60:	4638      	mov	r0, r7
   2db62:	f7f7 fa03 	bl	24f6c <coap_append_option_int>
	if (ret < 0) {
   2db66:	1e04      	subs	r4, r0, #0
   2db68:	da11      	bge.n	2db8e <transfer_request.constprop.5+0x1be>
		LOG_ERR("Unable to add size2 option.");
   2db6a:	4b18      	ldr	r3, [pc, #96]	; (2dbcc <transfer_request.constprop.5+0x1fc>)
   2db6c:	681b      	ldr	r3, [r3, #0]
   2db6e:	075a      	lsls	r2, r3, #29
   2db70:	f43f af71 	beq.w	2da56 <transfer_request.constprop.5+0x86>
   2db74:	2301      	movs	r3, #1
   2db76:	f04f 0100 	mov.w	r1, #0
   2db7a:	4a15      	ldr	r2, [pc, #84]	; (2dbd0 <transfer_request.constprop.5+0x200>)
   2db7c:	f363 0107 	bfi	r1, r3, #0, #8
   2db80:	4b14      	ldr	r3, [pc, #80]	; (2dbd4 <transfer_request.constprop.5+0x204>)
   2db82:	481e      	ldr	r0, [pc, #120]	; (2dbfc <transfer_request.constprop.5+0x22c>)
   2db84:	1a9b      	subs	r3, r3, r2
   2db86:	08db      	lsrs	r3, r3, #3
   2db88:	f363 118f 	bfi	r1, r3, #6, #10
   2db8c:	e761      	b.n	2da52 <transfer_request.constprop.5+0x82>
	ret = lwm2m_send_message(msg);
   2db8e:	4628      	mov	r0, r5
   2db90:	f7fc faca 	bl	2a128 <lwm2m_send_message>
	if (ret < 0) {
   2db94:	1e04      	subs	r4, r0, #0
   2db96:	da14      	bge.n	2dbc2 <transfer_request.constprop.5+0x1f2>
		LOG_ERR("Error sending LWM2M packet (err:%d).", ret);
   2db98:	4b0c      	ldr	r3, [pc, #48]	; (2dbcc <transfer_request.constprop.5+0x1fc>)
   2db9a:	681b      	ldr	r3, [r3, #0]
   2db9c:	075b      	lsls	r3, r3, #29
   2db9e:	f43f af5a 	beq.w	2da56 <transfer_request.constprop.5+0x86>
   2dba2:	2301      	movs	r3, #1
   2dba4:	f04f 0200 	mov.w	r2, #0
   2dba8:	4909      	ldr	r1, [pc, #36]	; (2dbd0 <transfer_request.constprop.5+0x200>)
   2dbaa:	f363 0207 	bfi	r2, r3, #0, #8
   2dbae:	4b09      	ldr	r3, [pc, #36]	; (2dbd4 <transfer_request.constprop.5+0x204>)
   2dbb0:	4813      	ldr	r0, [pc, #76]	; (2dc00 <transfer_request.constprop.5+0x230>)
   2dbb2:	1a5b      	subs	r3, r3, r1
   2dbb4:	08db      	lsrs	r3, r3, #3
   2dbb6:	f363 128f 	bfi	r2, r3, #6, #10
   2dbba:	4621      	mov	r1, r4
   2dbbc:	f012 ff4e 	bl	40a5c <log_1>
   2dbc0:	e749      	b.n	2da56 <transfer_request.constprop.5+0x86>
	return 0;
   2dbc2:	2400      	movs	r4, #0
   2dbc4:	e74b      	b.n	2da5e <transfer_request.constprop.5+0x8e>
   2dbc6:	bf00      	nop
   2dbc8:	2002412c 	.word	0x2002412c
   2dbcc:	20032b1c 	.word	0x20032b1c
   2dbd0:	00045f08 	.word	0x00045f08
   2dbd4:	00046038 	.word	0x00046038
   2dbd8:	0004ae73 	.word	0x0004ae73
   2dbdc:	0002dc99 	.word	0x0002dc99
   2dbe0:	0002dc05 	.word	0x0002dc05
   2dbe4:	0004bf7a 	.word	0x0004bf7a
   2dbe8:	2002a36d 	.word	0x2002a36d
   2dbec:	0004bf99 	.word	0x0004bf99
   2dbf0:	20024120 	.word	0x20024120
   2dbf4:	0004bfc8 	.word	0x0004bfc8
   2dbf8:	0004bfb2 	.word	0x0004bfb2
   2dbfc:	0004bfe5 	.word	0x0004bfe5
   2dc00:	0004af01 	.word	0x0004af01

0002dc04 <do_transmit_timeout_cb>:
	set_update_result_from_error(ret);
	return ret;
}

static void do_transmit_timeout_cb(struct lwm2m_message *msg)
{
   2dc04:	b538      	push	{r3, r4, r5, lr}
	int ret;

	if (firmware_retry < PACKET_TRANSFER_RETRY_MAX) {
   2dc06:	4c1e      	ldr	r4, [pc, #120]	; (2dc80 <do_transmit_timeout_cb+0x7c>)
   2dc08:	4b1e      	ldr	r3, [pc, #120]	; (2dc84 <do_transmit_timeout_cb+0x80>)
   2dc0a:	6822      	ldr	r2, [r4, #0]
{
   2dc0c:	4605      	mov	r5, r0
	if (firmware_retry < PACKET_TRANSFER_RETRY_MAX) {
   2dc0e:	2a02      	cmp	r2, #2
   2dc10:	681b      	ldr	r3, [r3, #0]
   2dc12:	dc20      	bgt.n	2dc56 <do_transmit_timeout_cb+0x52>
		/* retry block */
		LOG_WRN("TIMEOUT - Sending a retry packet!");
   2dc14:	f013 0f06 	tst.w	r3, #6
   2dc18:	d00d      	beq.n	2dc36 <do_transmit_timeout_cb+0x32>
   2dc1a:	2302      	movs	r3, #2
   2dc1c:	f04f 0100 	mov.w	r1, #0
   2dc20:	4a19      	ldr	r2, [pc, #100]	; (2dc88 <do_transmit_timeout_cb+0x84>)
   2dc22:	f363 0107 	bfi	r1, r3, #0, #8
   2dc26:	4b19      	ldr	r3, [pc, #100]	; (2dc8c <do_transmit_timeout_cb+0x88>)
   2dc28:	4819      	ldr	r0, [pc, #100]	; (2dc90 <do_transmit_timeout_cb+0x8c>)
   2dc2a:	1a9b      	subs	r3, r3, r2
   2dc2c:	08db      	lsrs	r3, r3, #3
   2dc2e:	f363 118f 	bfi	r1, r3, #6, #10
   2dc32:	f012 ff06 	bl	40a42 <log_0>

		ret = transfer_request(&firmware_block_ctx,
   2dc36:	f895 1184 	ldrb.w	r1, [r5, #388]	; 0x184
   2dc3a:	f8d5 0174 	ldr.w	r0, [r5, #372]	; 0x174
   2dc3e:	f7ff fec7 	bl	2d9d0 <transfer_request.constprop.5>
				       msg->token, msg->tkl,
				       do_firmware_transfer_reply_cb);
		if (ret < 0) {
   2dc42:	2800      	cmp	r0, #0
   2dc44:	da04      	bge.n	2dc50 <do_transmit_timeout_cb+0x4c>
			/* abort retries / transfer */
			set_update_result_from_error(ret);
   2dc46:	f015 ff46 	bl	43ad6 <set_update_result_from_error>
			firmware_retry = PACKET_TRANSFER_RETRY_MAX;
   2dc4a:	2303      	movs	r3, #3
			return;
		}

		firmware_retry++;
   2dc4c:	6023      	str	r3, [r4, #0]
	} else {
		LOG_ERR("TIMEOUT - Too many retry packet attempts! "
			"Aborting firmware download.");
		lwm2m_firmware_set_update_result(RESULT_CONNECTION_LOST);
	}
}
   2dc4e:	bd38      	pop	{r3, r4, r5, pc}
		firmware_retry++;
   2dc50:	6823      	ldr	r3, [r4, #0]
   2dc52:	3301      	adds	r3, #1
   2dc54:	e7fa      	b.n	2dc4c <do_transmit_timeout_cb+0x48>
		LOG_ERR("TIMEOUT - Too many retry packet attempts! "
   2dc56:	075b      	lsls	r3, r3, #29
   2dc58:	d00d      	beq.n	2dc76 <do_transmit_timeout_cb+0x72>
   2dc5a:	2301      	movs	r3, #1
   2dc5c:	f04f 0100 	mov.w	r1, #0
   2dc60:	4a09      	ldr	r2, [pc, #36]	; (2dc88 <do_transmit_timeout_cb+0x84>)
   2dc62:	f363 0107 	bfi	r1, r3, #0, #8
   2dc66:	4b09      	ldr	r3, [pc, #36]	; (2dc8c <do_transmit_timeout_cb+0x88>)
   2dc68:	480a      	ldr	r0, [pc, #40]	; (2dc94 <do_transmit_timeout_cb+0x90>)
   2dc6a:	1a9b      	subs	r3, r3, r2
   2dc6c:	08db      	lsrs	r3, r3, #3
   2dc6e:	f363 118f 	bfi	r1, r3, #6, #10
   2dc72:	f012 fee6 	bl	40a42 <log_0>
}
   2dc76:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		lwm2m_firmware_set_update_result(RESULT_CONNECTION_LOST);
   2dc7a:	2004      	movs	r0, #4
   2dc7c:	f7ff bd72 	b.w	2d764 <lwm2m_firmware_set_update_result>
   2dc80:	2002425c 	.word	0x2002425c
   2dc84:	20032b1c 	.word	0x20032b1c
   2dc88:	00045f08 	.word	0x00045f08
   2dc8c:	00046038 	.word	0x00046038
   2dc90:	0004beb3 	.word	0x0004beb3
   2dc94:	0004bed5 	.word	0x0004bed5

0002dc98 <do_firmware_transfer_reply_cb>:
	struct lwm2m_engine_res *res = NULL;
   2dc98:	2300      	movs	r3, #0
{
   2dc9a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2dc9e:	b08f      	sub	sp, #60	; 0x3c
   2dca0:	460f      	mov	r7, r1
	tkl = coap_header_get_token(check_response, token);
   2dca2:	a909      	add	r1, sp, #36	; 0x24
{
   2dca4:	4605      	mov	r5, r0
	struct lwm2m_engine_res *res = NULL;
   2dca6:	9307      	str	r3, [sp, #28]
	tkl = coap_header_get_token(check_response, token);
   2dca8:	f014 fc12 	bl	424d0 <coap_header_get_token>
	if (!tkl && coap_header_get_type(response) == COAP_TYPE_ACK) {
   2dcac:	4681      	mov	r9, r0
   2dcae:	b310      	cbz	r0, 2dcf6 <do_firmware_transfer_reply_cb+0x5e>
	} else if (coap_header_get_type(response) == COAP_TYPE_CON) {
   2dcb0:	4628      	mov	r0, r5
   2dcb2:	f014 fc06 	bl	424c2 <coap_header_get_type>
   2dcb6:	b348      	cbz	r0, 2dd0c <do_firmware_transfer_reply_cb+0x74>
	resp_code = coap_header_get_code(check_response);
   2dcb8:	4628      	mov	r0, r5
   2dcba:	f014 fc1d 	bl	424f8 <coap_header_get_code>
	if (resp_code != COAP_RESPONSE_CODE_CONTENT) {
   2dcbe:	2845      	cmp	r0, #69	; 0x45
   2dcc0:	f000 8081 	beq.w	2ddc6 <do_firmware_transfer_reply_cb+0x12e>
		LOG_ERR("Unexpected response from server: %d.%d",
   2dcc4:	4b99      	ldr	r3, [pc, #612]	; (2df2c <do_firmware_transfer_reply_cb+0x294>)
   2dcc6:	681b      	ldr	r3, [r3, #0]
   2dcc8:	075a      	lsls	r2, r3, #29
   2dcca:	d011      	beq.n	2dcf0 <do_firmware_transfer_reply_cb+0x58>
   2dccc:	2201      	movs	r2, #1
   2dcce:	f04f 0300 	mov.w	r3, #0
   2dcd2:	4997      	ldr	r1, [pc, #604]	; (2df30 <do_firmware_transfer_reply_cb+0x298>)
   2dcd4:	f362 0307 	bfi	r3, r2, #0, #8
   2dcd8:	4a96      	ldr	r2, [pc, #600]	; (2df34 <do_firmware_transfer_reply_cb+0x29c>)
   2dcda:	1a52      	subs	r2, r2, r1
   2dcdc:	08d2      	lsrs	r2, r2, #3
   2dcde:	f362 138f 	bfi	r3, r2, #6, #10
   2dce2:	f3c0 1147 	ubfx	r1, r0, #5, #8
   2dce6:	f000 021f 	and.w	r2, r0, #31
   2dcea:	4893      	ldr	r0, [pc, #588]	; (2df38 <do_firmware_transfer_reply_cb+0x2a0>)
   2dcec:	f012 feca 	bl	40a84 <log_2>
		ret = -ENOMSG;
   2dcf0:	f06f 0b22 	mvn.w	fp, #34	; 0x22
   2dcf4:	e063      	b.n	2ddbe <do_firmware_transfer_reply_cb+0x126>
	if (!tkl && coap_header_get_type(response) == COAP_TYPE_ACK) {
   2dcf6:	4628      	mov	r0, r5
   2dcf8:	f014 fbe3 	bl	424c2 <coap_header_get_type>
   2dcfc:	2802      	cmp	r0, #2
   2dcfe:	d1d7      	bne.n	2dcb0 <do_firmware_transfer_reply_cb+0x18>
		return 0;
   2dd00:	f04f 0b00 	mov.w	fp, #0
}
   2dd04:	4658      	mov	r0, fp
   2dd06:	b00f      	add	sp, #60	; 0x3c
   2dd08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		ret = transfer_empty_ack(coap_header_get_id(check_response));
   2dd0c:	4628      	mov	r0, r5
   2dd0e:	f014 fc20 	bl	42552 <coap_header_get_id>
   2dd12:	4606      	mov	r6, r0
	msg = lwm2m_get_message(&firmware_ctx);
   2dd14:	4889      	ldr	r0, [pc, #548]	; (2df3c <do_firmware_transfer_reply_cb+0x2a4>)
   2dd16:	f7fa ffd3 	bl	28cc0 <lwm2m_get_message>
	if (!msg) {
   2dd1a:	4604      	mov	r4, r0
   2dd1c:	b9a0      	cbnz	r0, 2dd48 <do_firmware_transfer_reply_cb+0xb0>
		LOG_ERR("Unable to get a lwm2m message!");
   2dd1e:	4b83      	ldr	r3, [pc, #524]	; (2df2c <do_firmware_transfer_reply_cb+0x294>)
   2dd20:	681b      	ldr	r3, [r3, #0]
   2dd22:	075c      	lsls	r4, r3, #29
   2dd24:	d00d      	beq.n	2dd42 <do_firmware_transfer_reply_cb+0xaa>
   2dd26:	2301      	movs	r3, #1
   2dd28:	f04f 0100 	mov.w	r1, #0
   2dd2c:	4a80      	ldr	r2, [pc, #512]	; (2df30 <do_firmware_transfer_reply_cb+0x298>)
   2dd2e:	f363 0107 	bfi	r1, r3, #0, #8
   2dd32:	4b80      	ldr	r3, [pc, #512]	; (2df34 <do_firmware_transfer_reply_cb+0x29c>)
   2dd34:	4882      	ldr	r0, [pc, #520]	; (2df40 <do_firmware_transfer_reply_cb+0x2a8>)
   2dd36:	1a9b      	subs	r3, r3, r2
   2dd38:	08db      	lsrs	r3, r3, #3
   2dd3a:	f363 118f 	bfi	r1, r3, #6, #10
   2dd3e:	f012 fe80 	bl	40a42 <log_0>
		return -ENOMEM;
   2dd42:	f06f 0b0b 	mvn.w	fp, #11
   2dd46:	e028      	b.n	2dd9a <do_firmware_transfer_reply_cb+0x102>
	msg->type = COAP_TYPE_ACK;
   2dd48:	2302      	movs	r3, #2
	msg->mid = mid;
   2dd4a:	f8a0 6180 	strh.w	r6, [r0, #384]	; 0x180
	msg->type = COAP_TYPE_ACK;
   2dd4e:	f8a0 3182 	strh.w	r3, [r0, #386]	; 0x182
	ret = lwm2m_init_message(msg);
   2dd52:	f7fb f849 	bl	28de8 <lwm2m_init_message>
	if (ret) {
   2dd56:	4683      	mov	fp, r0
   2dd58:	b9c0      	cbnz	r0, 2dd8c <do_firmware_transfer_reply_cb+0xf4>
	ret = lwm2m_send_message(msg);
   2dd5a:	4620      	mov	r0, r4
   2dd5c:	f7fc f9e4 	bl	2a128 <lwm2m_send_message>
	if (ret < 0) {
   2dd60:	f1b0 0b00 	subs.w	fp, r0, #0
   2dd64:	daa8      	bge.n	2dcb8 <do_firmware_transfer_reply_cb+0x20>
		LOG_ERR("Error sending LWM2M packet (err:%d).", ret);
   2dd66:	4a71      	ldr	r2, [pc, #452]	; (2df2c <do_firmware_transfer_reply_cb+0x294>)
   2dd68:	6812      	ldr	r2, [r2, #0]
   2dd6a:	0750      	lsls	r0, r2, #29
   2dd6c:	d00e      	beq.n	2dd8c <do_firmware_transfer_reply_cb+0xf4>
   2dd6e:	2101      	movs	r1, #1
   2dd70:	f04f 0200 	mov.w	r2, #0
   2dd74:	486e      	ldr	r0, [pc, #440]	; (2df30 <do_firmware_transfer_reply_cb+0x298>)
   2dd76:	f361 0207 	bfi	r2, r1, #0, #8
   2dd7a:	496e      	ldr	r1, [pc, #440]	; (2df34 <do_firmware_transfer_reply_cb+0x29c>)
   2dd7c:	1a09      	subs	r1, r1, r0
   2dd7e:	08c9      	lsrs	r1, r1, #3
   2dd80:	f361 128f 	bfi	r2, r1, #6, #10
   2dd84:	486f      	ldr	r0, [pc, #444]	; (2df44 <do_firmware_transfer_reply_cb+0x2ac>)
   2dd86:	4659      	mov	r1, fp
   2dd88:	f012 fe68 	bl	40a5c <log_1>
	lwm2m_reset_message(msg, true);
   2dd8c:	2101      	movs	r1, #1
   2dd8e:	4620      	mov	r0, r4
   2dd90:	f015 f902 	bl	42f98 <lwm2m_reset_message>
		if (ret < 0) {
   2dd94:	f1bb 0f00 	cmp.w	fp, #0
   2dd98:	da8e      	bge.n	2dcb8 <do_firmware_transfer_reply_cb+0x20>
			LOG_ERR("Error transmitting ACK");
   2dd9a:	4a64      	ldr	r2, [pc, #400]	; (2df2c <do_firmware_transfer_reply_cb+0x294>)
   2dd9c:	6812      	ldr	r2, [r2, #0]
   2dd9e:	0751      	lsls	r1, r2, #29
   2dda0:	d00d      	beq.n	2ddbe <do_firmware_transfer_reply_cb+0x126>
   2dda2:	2201      	movs	r2, #1
   2dda4:	f04f 0100 	mov.w	r1, #0
   2dda8:	4861      	ldr	r0, [pc, #388]	; (2df30 <do_firmware_transfer_reply_cb+0x298>)
   2ddaa:	f362 0107 	bfi	r1, r2, #0, #8
   2ddae:	4a61      	ldr	r2, [pc, #388]	; (2df34 <do_firmware_transfer_reply_cb+0x29c>)
   2ddb0:	1a12      	subs	r2, r2, r0
   2ddb2:	08d2      	lsrs	r2, r2, #3
   2ddb4:	f362 118f 	bfi	r1, r2, #6, #10
   2ddb8:	4863      	ldr	r0, [pc, #396]	; (2df48 <do_firmware_transfer_reply_cb+0x2b0>)
   2ddba:	f012 fe42 	bl	40a42 <log_0>
	set_update_result_from_error(ret);
   2ddbe:	4658      	mov	r0, fp
   2ddc0:	f015 fe89 	bl	43ad6 <set_update_result_from_error>
	return ret;
   2ddc4:	e79e      	b.n	2dd04 <do_firmware_transfer_reply_cb+0x6c>
	memcpy(&received_block_ctx, &firmware_block_ctx,
   2ddc6:	4c61      	ldr	r4, [pc, #388]	; (2df4c <do_firmware_transfer_reply_cb+0x2b4>)
   2ddc8:	ae0b      	add	r6, sp, #44	; 0x2c
   2ddca:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
   2ddce:	e886 0007 	stmia.w	r6, {r0, r1, r2}
   2ddd2:	4688      	mov	r8, r1
	ret = coap_update_from_block(check_response, &firmware_block_ctx);
   2ddd4:	4628      	mov	r0, r5
   2ddd6:	4621      	mov	r1, r4
   2ddd8:	f014 fc20 	bl	4261c <coap_update_from_block>
	if (ret < 0) {
   2dddc:	1e01      	subs	r1, r0, #0
   2ddde:	da15      	bge.n	2de0c <do_firmware_transfer_reply_cb+0x174>
		LOG_ERR("Error from block update: %d", ret);
   2dde0:	4b52      	ldr	r3, [pc, #328]	; (2df2c <do_firmware_transfer_reply_cb+0x294>)
   2dde2:	681b      	ldr	r3, [r3, #0]
   2dde4:	075b      	lsls	r3, r3, #29
   2dde6:	d102      	bne.n	2ddee <do_firmware_transfer_reply_cb+0x156>
		ret = -EFAULT;
   2dde8:	f06f 0b0d 	mvn.w	fp, #13
   2ddec:	e7e7      	b.n	2ddbe <do_firmware_transfer_reply_cb+0x126>
		LOG_ERR("Error from block update: %d", ret);
   2ddee:	2301      	movs	r3, #1
   2ddf0:	f04f 0200 	mov.w	r2, #0
   2ddf4:	484e      	ldr	r0, [pc, #312]	; (2df30 <do_firmware_transfer_reply_cb+0x298>)
   2ddf6:	f363 0207 	bfi	r2, r3, #0, #8
   2ddfa:	4b4e      	ldr	r3, [pc, #312]	; (2df34 <do_firmware_transfer_reply_cb+0x29c>)
   2ddfc:	1a1b      	subs	r3, r3, r0
   2ddfe:	08db      	lsrs	r3, r3, #3
   2de00:	f363 128f 	bfi	r2, r3, #6, #10
   2de04:	4852      	ldr	r0, [pc, #328]	; (2df50 <do_firmware_transfer_reply_cb+0x2b8>)
   2de06:	f012 fe29 	bl	40a5c <log_1>
   2de0a:	e7ed      	b.n	2dde8 <do_firmware_transfer_reply_cb+0x150>
	if (firmware_block_ctx.current < received_block_ctx.current) {
   2de0c:	6863      	ldr	r3, [r4, #4]
   2de0e:	4543      	cmp	r3, r8
   2de10:	d219      	bcs.n	2de46 <do_firmware_transfer_reply_cb+0x1ae>
		LOG_WRN("Duplicate packet ignored");
   2de12:	4b46      	ldr	r3, [pc, #280]	; (2df2c <do_firmware_transfer_reply_cb+0x294>)
   2de14:	681b      	ldr	r3, [r3, #0]
   2de16:	f013 0f06 	tst.w	r3, #6
   2de1a:	d00d      	beq.n	2de38 <do_firmware_transfer_reply_cb+0x1a0>
   2de1c:	2302      	movs	r3, #2
   2de1e:	f04f 0100 	mov.w	r1, #0
   2de22:	4a43      	ldr	r2, [pc, #268]	; (2df30 <do_firmware_transfer_reply_cb+0x298>)
   2de24:	f363 0107 	bfi	r1, r3, #0, #8
   2de28:	4b42      	ldr	r3, [pc, #264]	; (2df34 <do_firmware_transfer_reply_cb+0x29c>)
   2de2a:	484a      	ldr	r0, [pc, #296]	; (2df54 <do_firmware_transfer_reply_cb+0x2bc>)
   2de2c:	1a9b      	subs	r3, r3, r2
   2de2e:	08db      	lsrs	r3, r3, #3
   2de30:	f363 118f 	bfi	r1, r3, #6, #10
   2de34:	f012 fe05 	bl	40a42 <log_0>
		memcpy(&firmware_block_ctx, &received_block_ctx,
   2de38:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
		reply->user_data = (void *)COAP_REPLY_STATUS_ERROR;
   2de3c:	2301      	movs	r3, #1
		memcpy(&firmware_block_ctx, &received_block_ctx,
   2de3e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
		reply->user_data = (void *)COAP_REPLY_STATUS_ERROR;
   2de42:	607b      	str	r3, [r7, #4]
   2de44:	e75c      	b.n	2dd00 <do_firmware_transfer_reply_cb+0x68>
	last_block = !coap_next_block(check_response, &firmware_block_ctx);
   2de46:	4621      	mov	r1, r4
   2de48:	4628      	mov	r0, r5
   2de4a:	f014 fc3a 	bl	426c2 <coap_next_block>
	payload_offset = response->hdr_len + response->opt_len;
   2de4e:	7a2b      	ldrb	r3, [r5, #8]
	last_block = !coap_next_block(check_response, &firmware_block_ctx);
   2de50:	4680      	mov	r8, r0
	coap_packet_get_payload(response, &payload_len);
   2de52:	f10d 011a 	add.w	r1, sp, #26
   2de56:	4628      	mov	r0, r5
	payload_offset = response->hdr_len + response->opt_len;
   2de58:	9305      	str	r3, [sp, #20]
   2de5a:	896e      	ldrh	r6, [r5, #10]
	coap_packet_get_payload(response, &payload_len);
   2de5c:	f014 fb81 	bl	42562 <coap_packet_get_payload>
	if (payload_len > 0) {
   2de60:	f8bd 301a 	ldrh.w	r3, [sp, #26]
   2de64:	b933      	cbnz	r3, 2de74 <do_firmware_transfer_reply_cb+0x1dc>
	if (!last_block) {
   2de66:	f1b8 0f00 	cmp.w	r8, #0
   2de6a:	d156      	bne.n	2df1a <do_firmware_transfer_reply_cb+0x282>
		lwm2m_firmware_set_update_state(STATE_DOWNLOADED);
   2de6c:	2002      	movs	r0, #2
   2de6e:	f7ff fc23 	bl	2d6b8 <lwm2m_firmware_set_update_state>
   2de72:	e745      	b.n	2dd00 <do_firmware_transfer_reply_cb+0x68>
		ret = lwm2m_engine_get_resource("5/0/0", &res);
   2de74:	a907      	add	r1, sp, #28
   2de76:	4838      	ldr	r0, [pc, #224]	; (2df58 <do_firmware_transfer_reply_cb+0x2c0>)
   2de78:	f7fc fc5e 	bl	2a738 <lwm2m_engine_get_resource>
		if (ret < 0) {
   2de7c:	f1b0 0b00 	subs.w	fp, r0, #0
   2de80:	db9d      	blt.n	2ddbe <do_firmware_transfer_reply_cb+0x126>
		write_buf = res->res_instances->data_ptr;
   2de82:	9b07      	ldr	r3, [sp, #28]
   2de84:	691a      	ldr	r2, [r3, #16]
		if (res->pre_write_cb) {
   2de86:	f8d3 a004 	ldr.w	sl, [r3, #4]
		write_buf = res->res_instances->data_ptr;
   2de8a:	6817      	ldr	r7, [r2, #0]
		write_buflen = res->res_instances->data_len;
   2de8c:	8892      	ldrh	r2, [r2, #4]
   2de8e:	9208      	str	r2, [sp, #32]
		if (res->pre_write_cb) {
   2de90:	f1ba 0f00 	cmp.w	sl, #0
   2de94:	d005      	beq.n	2dea2 <do_firmware_transfer_reply_cb+0x20a>
			write_buf = res->pre_write_cb(0, 0, 0, &write_buflen);
   2de96:	2200      	movs	r2, #0
   2de98:	ab08      	add	r3, sp, #32
   2de9a:	4611      	mov	r1, r2
   2de9c:	4610      	mov	r0, r2
   2de9e:	47d0      	blx	sl
   2dea0:	4607      	mov	r7, r0
		write_cb = lwm2m_firmware_get_write_cb();
   2dea2:	f7ff fd89 	bl	2d9b8 <lwm2m_firmware_get_write_cb>
		if (write_cb) {
   2dea6:	4682      	mov	sl, r0
   2dea8:	2800      	cmp	r0, #0
   2deaa:	d0dc      	beq.n	2de66 <do_firmware_transfer_reply_cb+0x1ce>
	payload_offset = response->hdr_len + response->opt_len;
   2deac:	9b05      	ldr	r3, [sp, #20]
   2deae:	441e      	add	r6, r3
   2deb0:	b2b6      	uxth	r6, r6
			while (payload_len > 0) {
   2deb2:	f8bd 301a 	ldrh.w	r3, [sp, #26]
   2deb6:	2b00      	cmp	r3, #0
   2deb8:	d0d5      	beq.n	2de66 <do_firmware_transfer_reply_cb+0x1ce>
				       write_buflen : payload_len;
   2deba:	9a08      	ldr	r2, [sp, #32]
				if (buf_read(write_buf, len,
   2debc:	6829      	ldr	r1, [r5, #0]
				       write_buflen : payload_len;
   2debe:	429a      	cmp	r2, r3
   2dec0:	bf28      	it	cs
   2dec2:	461a      	movcs	r2, r3
				len = (payload_len > write_buflen) ?
   2dec4:	fa1f fb82 	uxth.w	fp, r2
				payload_len -= len;
   2dec8:	eba3 030b 	sub.w	r3, r3, fp
   2decc:	f8ad 301a 	strh.w	r3, [sp, #26]
				if (buf_read(write_buf, len,
   2ded0:	88eb      	ldrh	r3, [r5, #6]
	if (!src) {
   2ded2:	2900      	cmp	r1, #0
   2ded4:	d088      	beq.n	2dde8 <do_firmware_transfer_reply_cb+0x150>
	if (*offset + len > src_len) {
   2ded6:	18b0      	adds	r0, r6, r2
   2ded8:	4298      	cmp	r0, r3
   2deda:	dc85      	bgt.n	2dde8 <do_firmware_transfer_reply_cb+0x150>
	if (dst) {
   2dedc:	b11f      	cbz	r7, 2dee6 <do_firmware_transfer_reply_cb+0x24e>
   2dede:	4431      	add	r1, r6
   2dee0:	4638      	mov	r0, r7
   2dee2:	f016 ffb5 	bl	44e50 <memcpy>
	*offset += len;
   2dee6:	445e      	add	r6, fp
   2dee8:	b2b6      	uxth	r6, r6
					       last_block &&
   2deea:	f1b8 0f00 	cmp.w	r8, #0
   2deee:	d112      	bne.n	2df16 <do_firmware_transfer_reply_cb+0x27e>
   2def0:	f8bd 301a 	ldrh.w	r3, [sp, #26]
   2def4:	fab3 f383 	clz	r3, r3
   2def8:	095b      	lsrs	r3, r3, #5
				ret = write_cb(0, 0, 0,
   2defa:	6822      	ldr	r2, [r4, #0]
   2defc:	f8cd b000 	str.w	fp, [sp]
   2df00:	e9cd 3201 	strd	r3, r2, [sp, #4]
   2df04:	2200      	movs	r2, #0
   2df06:	463b      	mov	r3, r7
   2df08:	4611      	mov	r1, r2
   2df0a:	4610      	mov	r0, r2
   2df0c:	47d0      	blx	sl
				if (ret < 0) {
   2df0e:	f1b0 0b00 	subs.w	fp, r0, #0
   2df12:	dace      	bge.n	2deb2 <do_firmware_transfer_reply_cb+0x21a>
   2df14:	e753      	b.n	2ddbe <do_firmware_transfer_reply_cb+0x126>
					       last_block &&
   2df16:	2300      	movs	r3, #0
   2df18:	e7ef      	b.n	2defa <do_firmware_transfer_reply_cb+0x262>
		ret = transfer_request(&firmware_block_ctx, token, tkl,
   2df1a:	4649      	mov	r1, r9
   2df1c:	a809      	add	r0, sp, #36	; 0x24
   2df1e:	f7ff fd57 	bl	2d9d0 <transfer_request.constprop.5>
		if (ret < 0) {
   2df22:	f1b0 0b00 	subs.w	fp, r0, #0
   2df26:	f6bf aeeb 	bge.w	2dd00 <do_firmware_transfer_reply_cb+0x68>
   2df2a:	e748      	b.n	2ddbe <do_firmware_transfer_reply_cb+0x126>
   2df2c:	20032b1c 	.word	0x20032b1c
   2df30:	00045f08 	.word	0x00045f08
   2df34:	00046038 	.word	0x00046038
   2df38:	0004be73 	.word	0x0004be73
   2df3c:	2002412c 	.word	0x2002412c
   2df40:	0004ae73 	.word	0x0004ae73
   2df44:	0004af01 	.word	0x0004af01
   2df48:	0004be5c 	.word	0x0004be5c
   2df4c:	20024120 	.word	0x20024120
   2df50:	0004af72 	.word	0x0004af72
   2df54:	0004be9a 	.word	0x0004be9a
   2df58:	00047c1c 	.word	0x00047c1c

0002df5c <firmware_transfer>:

static void firmware_transfer(struct k_work *work)
{
   2df5c:	b538      	push	{r3, r4, r5, lr}
	server_addr = proxy_uri;
#else
	server_addr = firmware_uri;
#endif

	ret = lwm2m_parse_peerinfo(server_addr, &firmware_ctx.remote_addr,
   2df5e:	4c29      	ldr	r4, [pc, #164]	; (2e004 <firmware_transfer+0xa8>)
   2df60:	4829      	ldr	r0, [pc, #164]	; (2e008 <firmware_transfer+0xac>)
   2df62:	f504 7290 	add.w	r2, r4, #288	; 0x120
   2df66:	4621      	mov	r1, r4
   2df68:	f7fd fbc2 	bl	2b6f0 <lwm2m_parse_peerinfo>
				   &firmware_ctx.use_dtls);
	if (ret < 0) {
   2df6c:	1e05      	subs	r5, r0, #0
   2df6e:	db1d      	blt.n	2dfac <firmware_transfer+0x50>
		goto error;
	}

	lwm2m_engine_context_init(&firmware_ctx);
   2df70:	4620      	mov	r0, r4
   2df72:	f7fd fa35 	bl	2b3e0 <lwm2m_engine_context_init>
	firmware_ctx.handle_separate_response = true;
   2df76:	2301      	movs	r3, #1
	ret = lwm2m_socket_start(&firmware_ctx);
   2df78:	4620      	mov	r0, r4
	firmware_ctx.handle_separate_response = true;
   2df7a:	f884 3129 	strb.w	r3, [r4, #297]	; 0x129
	ret = lwm2m_socket_start(&firmware_ctx);
   2df7e:	f7fd fad9 	bl	2b534 <lwm2m_socket_start>
	if (ret < 0) {
   2df82:	4b22      	ldr	r3, [pc, #136]	; (2e00c <firmware_transfer+0xb0>)
   2df84:	1e05      	subs	r5, r0, #0
		LOG_ERR("Cannot start a firmware-pull connection:%d", ret);
   2df86:	681b      	ldr	r3, [r3, #0]
	if (ret < 0) {
   2df88:	da15      	bge.n	2dfb6 <firmware_transfer+0x5a>
		LOG_ERR("Cannot start a firmware-pull connection:%d", ret);
   2df8a:	075b      	lsls	r3, r3, #29
   2df8c:	d00e      	beq.n	2dfac <firmware_transfer+0x50>
   2df8e:	2301      	movs	r3, #1
   2df90:	f04f 0200 	mov.w	r2, #0
   2df94:	491e      	ldr	r1, [pc, #120]	; (2e010 <firmware_transfer+0xb4>)
   2df96:	f363 0207 	bfi	r2, r3, #0, #8
   2df9a:	4b1e      	ldr	r3, [pc, #120]	; (2e014 <firmware_transfer+0xb8>)
   2df9c:	481e      	ldr	r0, [pc, #120]	; (2e018 <firmware_transfer+0xbc>)
   2df9e:	1a5b      	subs	r3, r3, r1
   2dfa0:	08db      	lsrs	r3, r3, #3
   2dfa2:	f363 128f 	bfi	r2, r3, #6, #10
   2dfa6:	4629      	mov	r1, r5
   2dfa8:	f012 fd58 	bl	40a5c <log_1>
	}

	return;

error:
	set_update_result_from_error(ret);
   2dfac:	4628      	mov	r0, r5
}
   2dfae:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	set_update_result_from_error(ret);
   2dfb2:	f015 bd90 	b.w	43ad6 <set_update_result_from_error>
	LOG_INF("Connecting to server %s", log_strdup(firmware_uri));
   2dfb6:	f003 0307 	and.w	r3, r3, #7
   2dfba:	2b02      	cmp	r3, #2
   2dfbc:	d912      	bls.n	2dfe4 <firmware_transfer+0x88>
   2dfbe:	2303      	movs	r3, #3
   2dfc0:	f04f 0400 	mov.w	r4, #0
   2dfc4:	4a12      	ldr	r2, [pc, #72]	; (2e010 <firmware_transfer+0xb4>)
   2dfc6:	f363 0407 	bfi	r4, r3, #0, #8
   2dfca:	4b12      	ldr	r3, [pc, #72]	; (2e014 <firmware_transfer+0xb8>)
   2dfcc:	480e      	ldr	r0, [pc, #56]	; (2e008 <firmware_transfer+0xac>)
   2dfce:	1a9b      	subs	r3, r3, r2
   2dfd0:	08db      	lsrs	r3, r3, #3
   2dfd2:	f363 148f 	bfi	r4, r3, #6, #10
   2dfd6:	f7f3 fe69 	bl	21cac <log_strdup>
   2dfda:	4622      	mov	r2, r4
   2dfdc:	4601      	mov	r1, r0
   2dfde:	480f      	ldr	r0, [pc, #60]	; (2e01c <firmware_transfer+0xc0>)
   2dfe0:	f012 fd3c 	bl	40a5c <log_1>
	coap_block_transfer_init(&firmware_block_ctx,
   2dfe4:	f014 ffbd 	bl	42f62 <lwm2m_default_block_size>
   2dfe8:	2200      	movs	r2, #0
   2dfea:	4601      	mov	r1, r0
   2dfec:	480c      	ldr	r0, [pc, #48]	; (2e020 <firmware_transfer+0xc4>)
   2dfee:	f014 face 	bl	4258e <coap_block_transfer_init>
	ret = transfer_request(&firmware_block_ctx, coap_next_token(), 8,
   2dff2:	f7f6 ffeb 	bl	24fcc <coap_next_token>
   2dff6:	2108      	movs	r1, #8
   2dff8:	f7ff fcea 	bl	2d9d0 <transfer_request.constprop.5>
	if (ret < 0) {
   2dffc:	1e05      	subs	r5, r0, #0
   2dffe:	dbd5      	blt.n	2dfac <firmware_transfer+0x50>
}
   2e000:	bd38      	pop	{r3, r4, r5, pc}
   2e002:	bf00      	nop
   2e004:	2002412c 	.word	0x2002412c
   2e008:	2002a36d 	.word	0x2002a36d
   2e00c:	20032b1c 	.word	0x20032b1c
   2e010:	00045f08 	.word	0x00045f08
   2e014:	00046038 	.word	0x00046038
   2e018:	0004bf1b 	.word	0x0004bf1b
   2e01c:	0004bf46 	.word	0x0004bf46
   2e020:	20024120 	.word	0x20024120

0002e024 <lwm2m_firmware_start_transfer>:
{
	return 0;
}

int lwm2m_firmware_start_transfer(char *package_uri)
{
   2e024:	b570      	push	{r4, r5, r6, lr}
	/* close old socket */
	if (firmware_ctx.sock_fd > 0) {
   2e026:	4c28      	ldr	r4, [pc, #160]	; (2e0c8 <lwm2m_firmware_start_transfer+0xa4>)
{
   2e028:	4606      	mov	r6, r0
	if (firmware_ctx.sock_fd > 0) {
   2e02a:	f8d4 312c 	ldr.w	r3, [r4, #300]	; 0x12c
   2e02e:	2b00      	cmp	r3, #0
   2e030:	dd22      	ble.n	2e078 <lwm2m_firmware_start_transfer+0x54>
		lwm2m_socket_del(&firmware_ctx);
   2e032:	4620      	mov	r0, r4
   2e034:	f7fd fa02 	bl	2b43c <lwm2m_socket_del>
		(void)close(firmware_ctx.sock_fd);
   2e038:	f8d4 512c 	ldr.w	r5, [r4, #300]	; 0x12c
	__ASSERT_NO_MSG(socket_ops);
   2e03c:	4c23      	ldr	r4, [pc, #140]	; (2e0cc <lwm2m_firmware_start_transfer+0xa8>)
   2e03e:	6823      	ldr	r3, [r4, #0]
   2e040:	b94b      	cbnz	r3, 2e056 <lwm2m_firmware_start_transfer+0x32>
   2e042:	4923      	ldr	r1, [pc, #140]	; (2e0d0 <lwm2m_firmware_start_transfer+0xac>)
   2e044:	4823      	ldr	r0, [pc, #140]	; (2e0d4 <lwm2m_firmware_start_transfer+0xb0>)
   2e046:	2321      	movs	r3, #33	; 0x21
   2e048:	4a23      	ldr	r2, [pc, #140]	; (2e0d8 <lwm2m_firmware_start_transfer+0xb4>)
   2e04a:	f012 fada 	bl	40602 <printk>
   2e04e:	2121      	movs	r1, #33	; 0x21
   2e050:	4821      	ldr	r0, [pc, #132]	; (2e0d8 <lwm2m_firmware_start_transfer+0xb4>)
   2e052:	f012 fb99 	bl	40788 <assert_post_action>
	__ASSERT_NO_MSG(socket_ops->close);
   2e056:	6823      	ldr	r3, [r4, #0]
   2e058:	685b      	ldr	r3, [r3, #4]
   2e05a:	b94b      	cbnz	r3, 2e070 <lwm2m_firmware_start_transfer+0x4c>
   2e05c:	491f      	ldr	r1, [pc, #124]	; (2e0dc <lwm2m_firmware_start_transfer+0xb8>)
   2e05e:	481d      	ldr	r0, [pc, #116]	; (2e0d4 <lwm2m_firmware_start_transfer+0xb0>)
   2e060:	2322      	movs	r3, #34	; 0x22
   2e062:	4a1d      	ldr	r2, [pc, #116]	; (2e0d8 <lwm2m_firmware_start_transfer+0xb4>)
   2e064:	f012 facd 	bl	40602 <printk>
   2e068:	2122      	movs	r1, #34	; 0x22
   2e06a:	481b      	ldr	r0, [pc, #108]	; (2e0d8 <lwm2m_firmware_start_transfer+0xb4>)
   2e06c:	f012 fb8c 	bl	40788 <assert_post_action>
	return socket_ops->close(sock);
   2e070:	6823      	ldr	r3, [r4, #0]
   2e072:	4628      	mov	r0, r5
   2e074:	685b      	ldr	r3, [r3, #4]
   2e076:	4798      	blx	r3
	}

	(void)memset(&firmware_ctx, 0, sizeof(struct lwm2m_ctx));
   2e078:	2100      	movs	r1, #0
   2e07a:	f44f 7298 	mov.w	r2, #304	; 0x130
   2e07e:	4812      	ldr	r0, [pc, #72]	; (2e0c8 <lwm2m_firmware_start_transfer+0xa4>)
   2e080:	f016 ff20 	bl	44ec4 <memset>
	*work = (struct k_work)Z_WORK_INITIALIZER(handler);
   2e084:	4d16      	ldr	r5, [pc, #88]	; (2e0e0 <lwm2m_firmware_start_transfer+0xbc>)
	firmware_retry = 0;
   2e086:	2300      	movs	r3, #0
   2e088:	462c      	mov	r4, r5
   2e08a:	4a16      	ldr	r2, [pc, #88]	; (2e0e4 <lwm2m_firmware_start_transfer+0xc0>)
	k_work_init(&firmware_work, firmware_transfer);
	lwm2m_firmware_set_update_state(STATE_DOWNLOADING);
   2e08c:	2001      	movs	r0, #1
	firmware_retry = 0;
   2e08e:	6013      	str	r3, [r2, #0]
   2e090:	4a15      	ldr	r2, [pc, #84]	; (2e0e8 <lwm2m_firmware_start_transfer+0xc4>)
   2e092:	602b      	str	r3, [r5, #0]
   2e094:	606a      	str	r2, [r5, #4]
   2e096:	f844 3f08 	str.w	r3, [r4, #8]!
	lwm2m_firmware_set_update_state(STATE_DOWNLOADING);
   2e09a:	f7ff fb0d 	bl	2d6b8 <lwm2m_firmware_set_update_state>

	/* start file transfer work */
	strncpy(firmware_uri, package_uri, URI_LEN - 1);
   2e09e:	22fe      	movs	r2, #254	; 0xfe
   2e0a0:	4631      	mov	r1, r6
   2e0a2:	4812      	ldr	r0, [pc, #72]	; (2e0ec <lwm2m_firmware_start_transfer+0xc8>)
   2e0a4:	f017 f86e 	bl	45184 <strncpy>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   2e0a8:	e8d4 3fef 	ldaex	r3, [r4]
   2e0ac:	f043 0201 	orr.w	r2, r3, #1
   2e0b0:	e8c4 2fe1 	stlex	r1, r2, [r4]
   2e0b4:	2900      	cmp	r1, #0
   2e0b6:	d1f7      	bne.n	2e0a8 <lwm2m_firmware_start_transfer+0x84>
	if (!atomic_test_and_set_bit(work->flags, K_WORK_STATE_PENDING)) {
   2e0b8:	07db      	lsls	r3, r3, #31
   2e0ba:	d403      	bmi.n	2e0c4 <lwm2m_firmware_start_transfer+0xa0>
		k_queue_append(&work_q->queue, work);
   2e0bc:	4629      	mov	r1, r5
   2e0be:	480c      	ldr	r0, [pc, #48]	; (2e0f0 <lwm2m_firmware_start_transfer+0xcc>)
   2e0c0:	f016 fd23 	bl	44b0a <k_queue_append>
	k_work_submit(&firmware_work);

	return 0;
}
   2e0c4:	2000      	movs	r0, #0
   2e0c6:	bd70      	pop	{r4, r5, r6, pc}
   2e0c8:	2002412c 	.word	0x2002412c
   2e0cc:	2002237c 	.word	0x2002237c
   2e0d0:	0004b740 	.word	0x0004b740
   2e0d4:	0004764f 	.word	0x0004764f
   2e0d8:	0004b710 	.word	0x0004b710
   2e0dc:	0004b243 	.word	0x0004b243
   2e0e0:	20024260 	.word	0x20024260
   2e0e4:	2002425c 	.word	0x2002425c
   2e0e8:	0002df5d 	.word	0x0002df5d
   2e0ec:	2002a36d 	.word	0x2002a36d
   2e0f0:	20029754 	.word	0x20029754

0002e0f4 <ipso_location_init>:

	return &inst;
}

static int ipso_location_init(struct device *dev)
{
   2e0f4:	b513      	push	{r0, r1, r4, lr}
	int ret;
	struct lwm2m_engine_obj_inst *obj_inst = NULL;

	location.obj_id = LWM2M_OBJECT_LOCATION_ID;
	location.fields = fields;
   2e0f6:	4b0a      	ldr	r3, [pc, #40]	; (2e120 <ipso_location_init+0x2c>)
   2e0f8:	480a      	ldr	r0, [pc, #40]	; (2e124 <ipso_location_init+0x30>)
	struct lwm2m_engine_obj_inst *obj_inst = NULL;
   2e0fa:	2400      	movs	r4, #0
	location.fields = fields;
   2e0fc:	6043      	str	r3, [r0, #4]
	location.obj_id = LWM2M_OBJECT_LOCATION_ID;
   2e0fe:	4b0a      	ldr	r3, [pc, #40]	; (2e128 <ipso_location_init+0x34>)
	struct lwm2m_engine_obj_inst *obj_inst = NULL;
   2e100:	9401      	str	r4, [sp, #4]
	location.obj_id = LWM2M_OBJECT_LOCATION_ID;
   2e102:	6183      	str	r3, [r0, #24]
	location.field_count = ARRAY_SIZE(fields);
	location.max_instance_count = 1U;
   2e104:	2301      	movs	r3, #1
   2e106:	83c3      	strh	r3, [r0, #30]
	location.create_cb = location_create;
   2e108:	4b08      	ldr	r3, [pc, #32]	; (2e12c <ipso_location_init+0x38>)
   2e10a:	6083      	str	r3, [r0, #8]
	lwm2m_register_obj(&location);
   2e10c:	f7fa fa06 	bl	2851c <lwm2m_register_obj>

	/* auto create the only instance */
	ret = lwm2m_create_obj_inst(LWM2M_OBJECT_LOCATION_ID, 0, &obj_inst);
   2e110:	aa01      	add	r2, sp, #4
   2e112:	4621      	mov	r1, r4
   2e114:	2006      	movs	r0, #6
   2e116:	f7fa fd25 	bl	28b64 <lwm2m_create_obj_inst>
	if (ret < 0) {
		LOG_DBG("Create LWM2M instance 0 error: %d", ret);
	}

	return ret;
}
   2e11a:	b002      	add	sp, #8
   2e11c:	bd10      	pop	{r4, pc}
   2e11e:	bf00      	nop
   2e120:	200327b0 	.word	0x200327b0
   2e124:	2002428c 	.word	0x2002428c
   2e128:	00070006 	.word	0x00070006
   2e12c:	0002e131 	.word	0x0002e131

0002e130 <location_create>:
{
   2e130:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (inst.resource_count) {
   2e132:	4e45      	ldr	r6, [pc, #276]	; (2e248 <location_create+0x118>)
   2e134:	89f4      	ldrh	r4, [r6, #14]
   2e136:	b1a4      	cbz	r4, 2e162 <location_create+0x32>
		LOG_ERR("Only 1 instance of Location object can exist.");
   2e138:	4b44      	ldr	r3, [pc, #272]	; (2e24c <location_create+0x11c>)
   2e13a:	681e      	ldr	r6, [r3, #0]
   2e13c:	f016 0607 	ands.w	r6, r6, #7
   2e140:	d07f      	beq.n	2e242 <location_create+0x112>
   2e142:	2301      	movs	r3, #1
   2e144:	f04f 0100 	mov.w	r1, #0
   2e148:	4a41      	ldr	r2, [pc, #260]	; (2e250 <location_create+0x120>)
   2e14a:	f363 0107 	bfi	r1, r3, #0, #8
   2e14e:	4b41      	ldr	r3, [pc, #260]	; (2e254 <location_create+0x124>)
   2e150:	4841      	ldr	r0, [pc, #260]	; (2e258 <location_create+0x128>)
   2e152:	1a9b      	subs	r3, r3, r2
   2e154:	08db      	lsrs	r3, r3, #3
   2e156:	f363 118f 	bfi	r1, r3, #6, #10
   2e15a:	f012 fc72 	bl	40a42 <log_0>
		return NULL;
   2e15e:	2000      	movs	r0, #0
}
   2e160:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	memset(ri, 0, sizeof(*ri) * ri_len);
   2e162:	4d3e      	ldr	r5, [pc, #248]	; (2e25c <location_create+0x12c>)
   2e164:	224c      	movs	r2, #76	; 0x4c
   2e166:	4621      	mov	r1, r4
   2e168:	f105 0008 	add.w	r0, r5, #8
   2e16c:	f016 feaa 	bl	44ec4 <memset>
	INIT_OBJ_RES_DATA(LOCATION_LATITUDE_ID, res, i, res_inst, j,
   2e170:	4b3b      	ldr	r3, [pc, #236]	; (2e260 <location_create+0x130>)
	INIT_OBJ_RES_DATA(LOCATION_LONGITUDE_ID, res, i, res_inst, j,
   2e172:	f105 000c 	add.w	r0, r5, #12
   2e176:	6298      	str	r0, [r3, #40]	; 0x28
   2e178:	483a      	ldr	r0, [pc, #232]	; (2e264 <location_create+0x134>)
	INIT_OBJ_RES_DATA(LOCATION_LATITUDE_ID, res, i, res_inst, j,
   2e17a:	493b      	ldr	r1, [pc, #236]	; (2e268 <location_create+0x138>)
	INIT_OBJ_RES_DATA(LOCATION_LONGITUDE_ID, res, i, res_inst, j,
   2e17c:	60e8      	str	r0, [r5, #12]
	INIT_OBJ_RES_DATA(LOCATION_ALTITUDE_ID, res, i, res_inst, j,
   2e17e:	2002      	movs	r0, #2
   2e180:	f8a3 0044 	strh.w	r0, [r3, #68]	; 0x44
   2e184:	f105 0018 	add.w	r0, r5, #24
   2e188:	6418      	str	r0, [r3, #64]	; 0x40
   2e18a:	4838      	ldr	r0, [pc, #224]	; (2e26c <location_create+0x13c>)
	INIT_OBJ_RES_DATA(LOCATION_LATITUDE_ID, res, i, res_inst, j,
   2e18c:	2201      	movs	r2, #1
	INIT_OBJ_RES_DATA(LOCATION_ALTITUDE_ID, res, i, res_inst, j,
   2e18e:	61a8      	str	r0, [r5, #24]
	INIT_OBJ_RES_DATA(LOCATION_RADIUS_ID, res, i, res_inst, j,
   2e190:	2003      	movs	r0, #3
	INIT_OBJ_RES_DATA(LOCATION_LATITUDE_ID, res, i, res_inst, j,
   2e192:	6029      	str	r1, [r5, #0]
   2e194:	2108      	movs	r1, #8
	INIT_OBJ_RES_DATA(LOCATION_RADIUS_ID, res, i, res_inst, j,
   2e196:	f8a3 005c 	strh.w	r0, [r3, #92]	; 0x5c
   2e19a:	f105 0024 	add.w	r0, r5, #36	; 0x24
   2e19e:	6598      	str	r0, [r3, #88]	; 0x58
   2e1a0:	4833      	ldr	r0, [pc, #204]	; (2e270 <location_create+0x140>)
	INIT_OBJ_RES_DATA(LOCATION_LATITUDE_ID, res, i, res_inst, j,
   2e1a2:	759a      	strb	r2, [r3, #22]
	INIT_OBJ_RES_DATA(LOCATION_LONGITUDE_ID, res, i, res_inst, j,
   2e1a4:	859a      	strh	r2, [r3, #44]	; 0x2c
   2e1a6:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
	INIT_OBJ_RES_DATA(LOCATION_ALTITUDE_ID, res, i, res_inst, j,
   2e1aa:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
	INIT_OBJ_RES_DATA(LOCATION_RADIUS_ID, res, i, res_inst, j,
   2e1ae:	f883 205e 	strb.w	r2, [r3, #94]	; 0x5e
	INIT_OBJ_RES_DATA(LOCATION_LATITUDE_ID, res, i, res_inst, j,
   2e1b2:	829c      	strh	r4, [r3, #20]
   2e1b4:	611d      	str	r5, [r3, #16]
   2e1b6:	e9c3 4400 	strd	r4, r4, [r3]
   2e1ba:	e9c3 4402 	strd	r4, r4, [r3, #8]
	INIT_OBJ_RES_DATA(LOCATION_LONGITUDE_ID, res, i, res_inst, j,
   2e1be:	e9c3 4406 	strd	r4, r4, [r3, #24]
   2e1c2:	e9c3 4408 	strd	r4, r4, [r3, #32]
	INIT_OBJ_RES_DATA(LOCATION_ALTITUDE_ID, res, i, res_inst, j,
   2e1c6:	e9c3 440c 	strd	r4, r4, [r3, #48]	; 0x30
   2e1ca:	e9c3 440e 	strd	r4, r4, [r3, #56]	; 0x38
	INIT_OBJ_RES_DATA(LOCATION_RADIUS_ID, res, i, res_inst, j,
   2e1ce:	e9c3 4412 	strd	r4, r4, [r3, #72]	; 0x48
	INIT_OBJ_RES_DATA(LOCATION_LATITUDE_ID, res, i, res_inst, j,
   2e1d2:	6069      	str	r1, [r5, #4]
	INIT_OBJ_RES_DATA(LOCATION_LONGITUDE_ID, res, i, res_inst, j,
   2e1d4:	8229      	strh	r1, [r5, #16]
	INIT_OBJ_RES_DATA(LOCATION_ALTITUDE_ID, res, i, res_inst, j,
   2e1d6:	83a9      	strh	r1, [r5, #28]
	INIT_OBJ_RES_DATA(LOCATION_RADIUS_ID, res, i, res_inst, j,
   2e1d8:	e9c3 4414 	strd	r4, r4, [r3, #80]	; 0x50
   2e1dc:	6268      	str	r0, [r5, #36]	; 0x24
	INIT_OBJ_RES_OPTDATA(LOCATION_VELOCITY_ID, res, i, res_inst, j);
   2e1de:	2004      	movs	r0, #4
   2e1e0:	f105 0730 	add.w	r7, r5, #48	; 0x30
   2e1e4:	f8a3 0074 	strh.w	r0, [r3, #116]	; 0x74
   2e1e8:	671f      	str	r7, [r3, #112]	; 0x70
	INIT_OBJ_RES_DATA(LOCATION_TIMESTAMP_ID, res, i, res_inst, j,
   2e1ea:	f8a5 0040 	strh.w	r0, [r5, #64]	; 0x40
   2e1ee:	2705      	movs	r7, #5
	INIT_OBJ_RES_DATA(LOCATION_SPEED_ID, res, i, res_inst, j,
   2e1f0:	2006      	movs	r0, #6
	INIT_OBJ_RES_DATA(LOCATION_TIMESTAMP_ID, res, i, res_inst, j,
   2e1f2:	f8a3 708c 	strh.w	r7, [r3, #140]	; 0x8c
	INIT_OBJ_RES_DATA(LOCATION_SPEED_ID, res, i, res_inst, j,
   2e1f6:	f8a3 00a4 	strh.w	r0, [r3, #164]	; 0xa4
	INIT_OBJ_RES_DATA(LOCATION_TIMESTAMP_ID, res, i, res_inst, j,
   2e1fa:	f105 073c 	add.w	r7, r5, #60	; 0x3c
	INIT_OBJ_RES_DATA(LOCATION_SPEED_ID, res, i, res_inst, j,
   2e1fe:	f105 0048 	add.w	r0, r5, #72	; 0x48
	INIT_OBJ_RES_OPTDATA(LOCATION_VELOCITY_ID, res, i, res_inst, j);
   2e202:	f883 2076 	strb.w	r2, [r3, #118]	; 0x76
	INIT_OBJ_RES_DATA(LOCATION_TIMESTAMP_ID, res, i, res_inst, j,
   2e206:	f8c3 7088 	str.w	r7, [r3, #136]	; 0x88
   2e20a:	f883 208e 	strb.w	r2, [r3, #142]	; 0x8e
	INIT_OBJ_RES_DATA(LOCATION_SPEED_ID, res, i, res_inst, j,
   2e20e:	f883 20a6 	strb.w	r2, [r3, #166]	; 0xa6
	INIT_OBJ_RES_OPTDATA(LOCATION_VELOCITY_ID, res, i, res_inst, j);
   2e212:	e9c3 4418 	strd	r4, r4, [r3, #96]	; 0x60
   2e216:	e9c3 441a 	strd	r4, r4, [r3, #104]	; 0x68
	INIT_OBJ_RES_DATA(LOCATION_TIMESTAMP_ID, res, i, res_inst, j,
   2e21a:	e9c3 441e 	strd	r4, r4, [r3, #120]	; 0x78
   2e21e:	e9c3 4420 	strd	r4, r4, [r3, #128]	; 0x80
	INIT_OBJ_RES_DATA(LOCATION_SPEED_ID, res, i, res_inst, j,
   2e222:	f8c3 00a0 	str.w	r0, [r3, #160]	; 0xa0
   2e226:	e9c3 4424 	strd	r4, r4, [r3, #144]	; 0x90
   2e22a:	e9c3 4426 	strd	r4, r4, [r3, #152]	; 0x98
	inst.resources = res;
   2e22e:	60b3      	str	r3, [r6, #8]
	inst.resource_count = i;
   2e230:	2307      	movs	r3, #7
	INIT_OBJ_RES_DATA(LOCATION_TIMESTAMP_ID, res, i, res_inst, j,
   2e232:	4f10      	ldr	r7, [pc, #64]	; (2e274 <location_create+0x144>)
	INIT_OBJ_RES_DATA(LOCATION_SPEED_ID, res, i, res_inst, j,
   2e234:	4a10      	ldr	r2, [pc, #64]	; (2e278 <location_create+0x148>)
	INIT_OBJ_RES_DATA(LOCATION_RADIUS_ID, res, i, res_inst, j,
   2e236:	8529      	strh	r1, [r5, #40]	; 0x28
	INIT_OBJ_RES_DATA(LOCATION_TIMESTAMP_ID, res, i, res_inst, j,
   2e238:	63ef      	str	r7, [r5, #60]	; 0x3c
	INIT_OBJ_RES_DATA(LOCATION_SPEED_ID, res, i, res_inst, j,
   2e23a:	64aa      	str	r2, [r5, #72]	; 0x48
   2e23c:	f8a5 104c 	strh.w	r1, [r5, #76]	; 0x4c
	inst.resource_count = i;
   2e240:	81f3      	strh	r3, [r6, #14]
		return NULL;
   2e242:	4630      	mov	r0, r6
   2e244:	e78c      	b.n	2e160 <location_create+0x30>
   2e246:	bf00      	nop
   2e248:	20024274 	.word	0x20024274
   2e24c:	20032b20 	.word	0x20032b20
   2e250:	00045f08 	.word	0x00045f08
   2e254:	00046040 	.word	0x00046040
   2e258:	0004c001 	.word	0x0004c001
   2e25c:	20024364 	.word	0x20024364
   2e260:	200242bc 	.word	0x200242bc
   2e264:	200242ac 	.word	0x200242ac
   2e268:	20024284 	.word	0x20024284
   2e26c:	2002426c 	.word	0x2002426c
   2e270:	200242b4 	.word	0x200242b4
   2e274:	200243c0 	.word	0x200243c0
   2e278:	200243b8 	.word	0x200243b8

0002e27c <ipso_temp_sensor_init>:
	LOG_DBG("Create IPSO Temperature Sensor instance: %d", obj_inst_id);
	return &inst[index];
}

static int ipso_temp_sensor_init(struct device *dev)
{
   2e27c:	b508      	push	{r3, lr}
	temp_sensor.obj_id = IPSO_OBJECT_TEMP_SENSOR_ID;
	temp_sensor.fields = fields;
   2e27e:	4806      	ldr	r0, [pc, #24]	; (2e298 <ipso_temp_sensor_init+0x1c>)
   2e280:	4b06      	ldr	r3, [pc, #24]	; (2e29c <ipso_temp_sensor_init+0x20>)
   2e282:	6043      	str	r3, [r0, #4]
	temp_sensor.obj_id = IPSO_OBJECT_TEMP_SENSOR_ID;
   2e284:	4b06      	ldr	r3, [pc, #24]	; (2e2a0 <ipso_temp_sensor_init+0x24>)
   2e286:	6183      	str	r3, [r0, #24]
	temp_sensor.field_count = ARRAY_SIZE(fields);
	temp_sensor.max_instance_count = MAX_INSTANCE_COUNT;
   2e288:	2301      	movs	r3, #1
   2e28a:	83c3      	strh	r3, [r0, #30]
	temp_sensor.create_cb = temp_sensor_create;
   2e28c:	4b05      	ldr	r3, [pc, #20]	; (2e2a4 <ipso_temp_sensor_init+0x28>)
   2e28e:	6083      	str	r3, [r0, #8]
	lwm2m_register_obj(&temp_sensor);
   2e290:	f7fa f944 	bl	2851c <lwm2m_register_obj>

	return 0;
}
   2e294:	2000      	movs	r0, #0
   2e296:	bd08      	pop	{r3, pc}
   2e298:	20024510 	.word	0x20024510
   2e29c:	200327cc 	.word	0x200327cc
   2e2a0:	00080ce7 	.word	0x00080ce7
   2e2a4:	0002e34d 	.word	0x0002e34d

0002e2a8 <sensor_value_write_cb>:
{
   2e2a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	bool update_max = false;
   2e2ac:	2600      	movs	r6, #0
{
   2e2ae:	4680      	mov	r8, r0
	bool update_min = false;
   2e2b0:	4634      	mov	r4, r6
	for (i = 0; i < MAX_INSTANCE_COUNT; i++) {
   2e2b2:	4633      	mov	r3, r6
		if (inst[i].obj && inst[i].obj_inst_id == obj_inst_id) {
   2e2b4:	f8df 9090 	ldr.w	r9, [pc, #144]	; 2e348 <sensor_value_write_cb+0xa0>
			if (sensor_value[i].val1 < min_measured_value[i].val1) {
   2e2b8:	4d20      	ldr	r5, [pc, #128]	; (2e33c <sensor_value_write_cb+0x94>)
		if (inst[i].obj && inst[i].obj_inst_id == obj_inst_id) {
   2e2ba:	f8d9 1004 	ldr.w	r1, [r9, #4]
   2e2be:	f8b9 200c 	ldrh.w	r2, [r9, #12]
	for (i = 0; i < MAX_INSTANCE_COUNT; i++) {
   2e2c2:	b113      	cbz	r3, 2e2ca <sensor_value_write_cb+0x22>
}
   2e2c4:	2000      	movs	r0, #0
   2e2c6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		if (inst[i].obj && inst[i].obj_inst_id == obj_inst_id) {
   2e2ca:	2900      	cmp	r1, #0
   2e2cc:	d0fa      	beq.n	2e2c4 <sensor_value_write_cb+0x1c>
   2e2ce:	4542      	cmp	r2, r8
   2e2d0:	d1f8      	bne.n	2e2c4 <sensor_value_write_cb+0x1c>
			if (sensor_value[i].val1 < min_measured_value[i].val1) {
   2e2d2:	4b1b      	ldr	r3, [pc, #108]	; (2e340 <sensor_value_write_cb+0x98>)
   2e2d4:	6828      	ldr	r0, [r5, #0]
   2e2d6:	681a      	ldr	r2, [r3, #0]
   2e2d8:	4290      	cmp	r0, r2
   2e2da:	db28      	blt.n	2e32e <sensor_value_write_cb+0x86>
			} else if (sensor_value[i].val1 ==
   2e2dc:	d104      	bne.n	2e2e8 <sensor_value_write_cb+0x40>
					min_measured_value[i].val1 &&
   2e2de:	6869      	ldr	r1, [r5, #4]
   2e2e0:	685a      	ldr	r2, [r3, #4]
				update_min = true;
   2e2e2:	4291      	cmp	r1, r2
   2e2e4:	bfb8      	it	lt
   2e2e6:	2401      	movlt	r4, #1
			if (sensor_value[i].val1 > max_measured_value[i].val1) {
   2e2e8:	4f16      	ldr	r7, [pc, #88]	; (2e344 <sensor_value_write_cb+0x9c>)
   2e2ea:	683a      	ldr	r2, [r7, #0]
   2e2ec:	4290      	cmp	r0, r2
   2e2ee:	dc20      	bgt.n	2e332 <sensor_value_write_cb+0x8a>
			} else if (sensor_value[i].val1 ==
   2e2f0:	d103      	bne.n	2e2fa <sensor_value_write_cb+0x52>
					max_measured_value[i].val1 &&
   2e2f2:	6869      	ldr	r1, [r5, #4]
   2e2f4:	687a      	ldr	r2, [r7, #4]
   2e2f6:	4291      	cmp	r1, r2
   2e2f8:	dc1b      	bgt.n	2e332 <sensor_value_write_cb+0x8a>
			if (update_min) {
   2e2fa:	b14c      	cbz	r4, 2e310 <sensor_value_write_cb+0x68>
	min_measured_value[index].val2 = sensor_value[index].val2;
   2e2fc:	686a      	ldr	r2, [r5, #4]
	min_measured_value[index].val1 = sensor_value[index].val1;
   2e2fe:	6018      	str	r0, [r3, #0]
	min_measured_value[index].val2 = sensor_value[index].val2;
   2e300:	605a      	str	r2, [r3, #4]
	NOTIFY_OBSERVER(IPSO_OBJECT_TEMP_SENSOR_ID, obj_inst_id,
   2e302:	4641      	mov	r1, r8
   2e304:	f241 52e1 	movw	r2, #5601	; 0x15e1
   2e308:	f640 40e7 	movw	r0, #3303	; 0xce7
   2e30c:	f7fa f8e2 	bl	284d4 <lwm2m_notify_observer>
			if (update_max) {
   2e310:	b15e      	cbz	r6, 2e32a <sensor_value_write_cb+0x82>
	max_measured_value[index].val1 = sensor_value[index].val1;
   2e312:	682b      	ldr	r3, [r5, #0]
	NOTIFY_OBSERVER(IPSO_OBJECT_TEMP_SENSOR_ID, obj_inst_id,
   2e314:	f241 52e2 	movw	r2, #5602	; 0x15e2
	max_measured_value[index].val1 = sensor_value[index].val1;
   2e318:	603b      	str	r3, [r7, #0]
	max_measured_value[index].val2 = sensor_value[index].val2;
   2e31a:	686b      	ldr	r3, [r5, #4]
	NOTIFY_OBSERVER(IPSO_OBJECT_TEMP_SENSOR_ID, obj_inst_id,
   2e31c:	4641      	mov	r1, r8
   2e31e:	f640 40e7 	movw	r0, #3303	; 0xce7
	max_measured_value[index].val2 = sensor_value[index].val2;
   2e322:	607b      	str	r3, [r7, #4]
	NOTIFY_OBSERVER(IPSO_OBJECT_TEMP_SENSOR_ID, obj_inst_id,
   2e324:	2601      	movs	r6, #1
   2e326:	f7fa f8d5 	bl	284d4 <lwm2m_notify_observer>
   2e32a:	2301      	movs	r3, #1
   2e32c:	e7c5      	b.n	2e2ba <sensor_value_write_cb+0x12>
				update_min = true;
   2e32e:	2401      	movs	r4, #1
   2e330:	e7da      	b.n	2e2e8 <sensor_value_write_cb+0x40>
			if (update_min) {
   2e332:	2c00      	cmp	r4, #0
   2e334:	d0ed      	beq.n	2e312 <sensor_value_write_cb+0x6a>
   2e336:	4626      	mov	r6, r4
   2e338:	e7e0      	b.n	2e2fc <sensor_value_write_cb+0x54>
   2e33a:	bf00      	nop
   2e33c:	20024508 	.word	0x20024508
   2e340:	200243e4 	.word	0x200243e4
   2e344:	200243d4 	.word	0x200243d4
   2e348:	200243c4 	.word	0x200243c4

0002e34c <temp_sensor_create>:
{
   2e34c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
		if (inst[index].obj && inst[index].obj_inst_id == obj_inst_id) {
   2e350:	4e58      	ldr	r6, [pc, #352]	; (2e4b4 <temp_sensor_create+0x168>)
   2e352:	6877      	ldr	r7, [r6, #4]
   2e354:	b1f7      	cbz	r7, 2e394 <temp_sensor_create+0x48>
   2e356:	89b1      	ldrh	r1, [r6, #12]
   2e358:	4b57      	ldr	r3, [pc, #348]	; (2e4b8 <temp_sensor_create+0x16c>)
   2e35a:	4281      	cmp	r1, r0
			LOG_ERR("Can not create instance - "
   2e35c:	681e      	ldr	r6, [r3, #0]
		if (inst[index].obj && inst[index].obj_inst_id == obj_inst_id) {
   2e35e:	d112      	bne.n	2e386 <temp_sensor_create+0x3a>
			LOG_ERR("Can not create instance - "
   2e360:	f016 0607 	ands.w	r6, r6, #7
   2e364:	d013      	beq.n	2e38e <temp_sensor_create+0x42>
   2e366:	2301      	movs	r3, #1
   2e368:	f04f 0200 	mov.w	r2, #0
   2e36c:	4853      	ldr	r0, [pc, #332]	; (2e4bc <temp_sensor_create+0x170>)
   2e36e:	f363 0207 	bfi	r2, r3, #0, #8
   2e372:	4b53      	ldr	r3, [pc, #332]	; (2e4c0 <temp_sensor_create+0x174>)
   2e374:	1a1b      	subs	r3, r3, r0
   2e376:	08db      	lsrs	r3, r3, #3
   2e378:	4852      	ldr	r0, [pc, #328]	; (2e4c4 <temp_sensor_create+0x178>)
   2e37a:	f363 128f 	bfi	r2, r3, #6, #10
		LOG_ERR("Can not create instance - no more room: %u",
   2e37e:	f012 fb6d 	bl	40a5c <log_1>
		return NULL;
   2e382:	2600      	movs	r6, #0
   2e384:	e003      	b.n	2e38e <temp_sensor_create+0x42>
		LOG_ERR("Can not create instance - no more room: %u",
   2e386:	f016 0607 	ands.w	r6, r6, #7
   2e38a:	f040 8084 	bne.w	2e496 <temp_sensor_create+0x14a>
}
   2e38e:	4630      	mov	r0, r6
   2e390:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	min_measured_value[index].val1 = INT32_MAX;
   2e394:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
	sensor_value[index].val1 = 0;
   2e398:	4b4b      	ldr	r3, [pc, #300]	; (2e4c8 <temp_sensor_create+0x17c>)
	min_measured_value[index].val1 = INT32_MAX;
   2e39a:	f8df b148 	ldr.w	fp, [pc, #328]	; 2e4e4 <temp_sensor_create+0x198>
	(void)memset(res[index], 0,
   2e39e:	4c4b      	ldr	r4, [pc, #300]	; (2e4cc <temp_sensor_create+0x180>)
	max_measured_value[index].val1 = -INT32_MAX;
   2e3a0:	f8df a144 	ldr.w	sl, [pc, #324]	; 2e4e8 <temp_sensor_create+0x19c>
   2e3a4:	4d4a      	ldr	r5, [pc, #296]	; (2e4d0 <temp_sensor_create+0x184>)
	sensor_value[index].val2 = 0;
   2e3a6:	e9c3 7700 	strd	r7, r7, [r3]
	min_measured_value[index].val2 = 0;
   2e3aa:	e9cb 2700 	strd	r2, r7, [fp]
	units[index][0] = '\0';
   2e3ae:	4b49      	ldr	r3, [pc, #292]	; (2e4d4 <temp_sensor_create+0x188>)
	max_measured_value[index].val1 = -INT32_MAX;
   2e3b0:	3202      	adds	r2, #2
	min_range_value[index].val1 = 0;
   2e3b2:	f8df 9138 	ldr.w	r9, [pc, #312]	; 2e4ec <temp_sensor_create+0x1a0>
	max_range_value[index].val1 = 0;
   2e3b6:	f8df 8138 	ldr.w	r8, [pc, #312]	; 2e4f0 <temp_sensor_create+0x1a4>
	max_measured_value[index].val2 = 0;
   2e3ba:	e9ca 2700 	strd	r2, r7, [sl]
	(void)memset(res[index], 0,
   2e3be:	4639      	mov	r1, r7
   2e3c0:	22c0      	movs	r2, #192	; 0xc0
   2e3c2:	4620      	mov	r0, r4
	units[index][0] = '\0';
   2e3c4:	701f      	strb	r7, [r3, #0]
	min_range_value[index].val2 = 0;
   2e3c6:	e9c9 7700 	strd	r7, r7, [r9]
	max_range_value[index].val2 = 0;
   2e3ca:	e9c8 7700 	strd	r7, r7, [r8]
	(void)memset(res[index], 0,
   2e3ce:	f016 fd79 	bl	44ec4 <memset>
   2e3d2:	224c      	movs	r2, #76	; 0x4c
   2e3d4:	4639      	mov	r1, r7
   2e3d6:	f105 0008 	add.w	r0, r5, #8
   2e3da:	f016 fd73 	bl	44ec4 <memset>
	INIT_OBJ_RES(TEMP_SENSOR_VALUE_ID, res[index], i,
   2e3de:	493e      	ldr	r1, [pc, #248]	; (2e4d8 <temp_sensor_create+0x18c>)
   2e3e0:	f241 6244 	movw	r2, #5700	; 0x1644
   2e3e4:	60a1      	str	r1, [r4, #8]
	INIT_OBJ_RES_DATA(TEMP_UNITS_ID, res[index], i, res_inst[index], j,
   2e3e6:	f241 6145 	movw	r1, #5701	; 0x1645
   2e3ea:	85a1      	strh	r1, [r4, #44]	; 0x2c
   2e3ec:	f105 010c 	add.w	r1, r5, #12
   2e3f0:	62a1      	str	r1, [r4, #40]	; 0x28
   2e3f2:	4938      	ldr	r1, [pc, #224]	; (2e4d4 <temp_sensor_create+0x188>)
	INIT_OBJ_RES(TEMP_SENSOR_VALUE_ID, res[index], i,
   2e3f4:	4b34      	ldr	r3, [pc, #208]	; (2e4c8 <temp_sensor_create+0x17c>)
	INIT_OBJ_RES_DATA(TEMP_UNITS_ID, res[index], i, res_inst[index], j,
   2e3f6:	60e9      	str	r1, [r5, #12]
	INIT_OBJ_RES_DATA(TEMP_MIN_MEASURED_VALUE_ID, res[index], i,
   2e3f8:	f241 51e1 	movw	r1, #5601	; 0x15e1
   2e3fc:	f8a4 1044 	strh.w	r1, [r4, #68]	; 0x44
   2e400:	f105 0118 	add.w	r1, r5, #24
   2e404:	6421      	str	r1, [r4, #64]	; 0x40
	INIT_OBJ_RES_DATA(TEMP_MAX_MEASURED_VALUE_ID, res[index], i,
   2e406:	f241 51e2 	movw	r1, #5602	; 0x15e2
   2e40a:	f8a4 105c 	strh.w	r1, [r4, #92]	; 0x5c
   2e40e:	f105 0124 	add.w	r1, r5, #36	; 0x24
   2e412:	65a1      	str	r1, [r4, #88]	; 0x58
	INIT_OBJ_RES_DATA(TEMP_MIN_RANGE_VALUE_ID, res[index], i,
   2e414:	f241 51e3 	movw	r1, #5603	; 0x15e3
   2e418:	f8a4 1074 	strh.w	r1, [r4, #116]	; 0x74
   2e41c:	f105 0130 	add.w	r1, r5, #48	; 0x30
   2e420:	6721      	str	r1, [r4, #112]	; 0x70
	INIT_OBJ_RES_DATA(TEMP_MAX_RANGE_VALUE_ID, res[index], i,
   2e422:	f241 51e4 	movw	r1, #5604	; 0x15e4
   2e426:	f8a4 108c 	strh.w	r1, [r4, #140]	; 0x8c
   2e42a:	f105 013c 	add.w	r1, r5, #60	; 0x3c
   2e42e:	f8c4 1088 	str.w	r1, [r4, #136]	; 0x88
	INIT_OBJ_RES_EXECUTE(TEMP_RESET_MIN_MAX_MEASURED_VALUES_ID,
   2e432:	f241 51e5 	movw	r1, #5605	; 0x15e5
	INIT_OBJ_RES(TEMP_SENSOR_VALUE_ID, res[index], i,
   2e436:	602b      	str	r3, [r5, #0]
   2e438:	82a2      	strh	r2, [r4, #20]
   2e43a:	2308      	movs	r3, #8
   2e43c:	2201      	movs	r2, #1
	INIT_OBJ_RES_EXECUTE(TEMP_RESET_MIN_MAX_MEASURED_VALUES_ID,
   2e43e:	f8a4 10a4 	strh.w	r1, [r4, #164]	; 0xa4
   2e442:	4926      	ldr	r1, [pc, #152]	; (2e4dc <temp_sensor_create+0x190>)
	INIT_OBJ_RES(TEMP_SENSOR_VALUE_ID, res[index], i,
   2e444:	606b      	str	r3, [r5, #4]
	INIT_OBJ_RES_DATA(TEMP_UNITS_ID, res[index], i, res_inst[index], j,
   2e446:	822b      	strh	r3, [r5, #16]
	INIT_OBJ_RES_DATA(TEMP_MIN_MEASURED_VALUE_ID, res[index], i,
   2e448:	f8c5 b018 	str.w	fp, [r5, #24]
   2e44c:	83ab      	strh	r3, [r5, #28]
	INIT_OBJ_RES_DATA(TEMP_MAX_MEASURED_VALUE_ID, res[index], i,
   2e44e:	f8c5 a024 	str.w	sl, [r5, #36]	; 0x24
   2e452:	852b      	strh	r3, [r5, #40]	; 0x28
	INIT_OBJ_RES_DATA(TEMP_MIN_RANGE_VALUE_ID, res[index], i,
   2e454:	f8c5 9030 	str.w	r9, [r5, #48]	; 0x30
   2e458:	86ab      	strh	r3, [r5, #52]	; 0x34
	INIT_OBJ_RES_DATA(TEMP_MAX_RANGE_VALUE_ID, res[index], i,
   2e45a:	f8c5 803c 	str.w	r8, [r5, #60]	; 0x3c
   2e45e:	f8a5 3040 	strh.w	r3, [r5, #64]	; 0x40
	INIT_OBJ_RES(TEMP_SENSOR_VALUE_ID, res[index], i,
   2e462:	6125      	str	r5, [r4, #16]
   2e464:	75a2      	strb	r2, [r4, #22]
	INIT_OBJ_RES_DATA(TEMP_UNITS_ID, res[index], i, res_inst[index], j,
   2e466:	f884 202e 	strb.w	r2, [r4, #46]	; 0x2e
	INIT_OBJ_RES_DATA(TEMP_MIN_MEASURED_VALUE_ID, res[index], i,
   2e46a:	f884 2046 	strb.w	r2, [r4, #70]	; 0x46
	INIT_OBJ_RES_DATA(TEMP_MAX_MEASURED_VALUE_ID, res[index], i,
   2e46e:	f884 205e 	strb.w	r2, [r4, #94]	; 0x5e
	INIT_OBJ_RES_DATA(TEMP_MIN_RANGE_VALUE_ID, res[index], i,
   2e472:	f884 2076 	strb.w	r2, [r4, #118]	; 0x76
	INIT_OBJ_RES_DATA(TEMP_MAX_RANGE_VALUE_ID, res[index], i,
   2e476:	f884 208e 	strb.w	r2, [r4, #142]	; 0x8e
	INIT_OBJ_RES_EXECUTE(TEMP_RESET_MIN_MAX_MEASURED_VALUES_ID,
   2e47a:	f8c4 109c 	str.w	r1, [r4, #156]	; 0x9c
	INIT_OBJ_RES_OPTDATA(TEMP_TIMESTAMP_ID, res[index], i,
   2e47e:	f241 518e 	movw	r1, #5518	; 0x158e
   2e482:	3548      	adds	r5, #72	; 0x48
   2e484:	f8a4 10bc 	strh.w	r1, [r4, #188]	; 0xbc
   2e488:	f8c4 50b8 	str.w	r5, [r4, #184]	; 0xb8
   2e48c:	f884 20be 	strb.w	r2, [r4, #190]	; 0xbe
	inst[index].resources = res[index];
   2e490:	60b4      	str	r4, [r6, #8]
	inst[index].resource_count = i;
   2e492:	81f3      	strh	r3, [r6, #14]
	return &inst[index];
   2e494:	e77b      	b.n	2e38e <temp_sensor_create+0x42>
		LOG_ERR("Can not create instance - no more room: %u",
   2e496:	2301      	movs	r3, #1
   2e498:	f04f 0200 	mov.w	r2, #0
   2e49c:	4907      	ldr	r1, [pc, #28]	; (2e4bc <temp_sensor_create+0x170>)
   2e49e:	f363 0207 	bfi	r2, r3, #0, #8
   2e4a2:	4b07      	ldr	r3, [pc, #28]	; (2e4c0 <temp_sensor_create+0x174>)
   2e4a4:	1a5b      	subs	r3, r3, r1
   2e4a6:	08db      	lsrs	r3, r3, #3
   2e4a8:	4601      	mov	r1, r0
   2e4aa:	f363 128f 	bfi	r2, r3, #6, #10
   2e4ae:	480c      	ldr	r0, [pc, #48]	; (2e4e0 <temp_sensor_create+0x194>)
   2e4b0:	e765      	b.n	2e37e <temp_sensor_create+0x32>
   2e4b2:	bf00      	nop
   2e4b4:	200243c4 	.word	0x200243c4
   2e4b8:	20032b08 	.word	0x20032b08
   2e4bc:	00045f08 	.word	0x00045f08
   2e4c0:	00046010 	.word	0x00046010
   2e4c4:	0004b8a4 	.word	0x0004b8a4
   2e4c8:	20024508 	.word	0x20024508
   2e4cc:	200243f4 	.word	0x200243f4
   2e4d0:	200244b4 	.word	0x200244b4
   2e4d4:	2002a46c 	.word	0x2002a46c
   2e4d8:	0002e2a9 	.word	0x0002e2a9
   2e4dc:	0002e4f5 	.word	0x0002e4f5
   2e4e0:	0004b8d3 	.word	0x0004b8d3
   2e4e4:	200243e4 	.word	0x200243e4
   2e4e8:	200243d4 	.word	0x200243d4
   2e4ec:	200243ec 	.word	0x200243ec
   2e4f0:	200243dc 	.word	0x200243dc

0002e4f4 <reset_min_max_measured_values_cb>:
{
   2e4f4:	b538      	push	{r3, r4, r5, lr}
		if (inst[i].obj && inst[i].obj_inst_id == obj_inst_id) {
   2e4f6:	4b12      	ldr	r3, [pc, #72]	; (2e540 <reset_min_max_measured_values_cb+0x4c>)
   2e4f8:	685a      	ldr	r2, [r3, #4]
   2e4fa:	b1ea      	cbz	r2, 2e538 <reset_min_max_measured_values_cb+0x44>
   2e4fc:	899d      	ldrh	r5, [r3, #12]
   2e4fe:	4285      	cmp	r5, r0
   2e500:	d11a      	bne.n	2e538 <reset_min_max_measured_values_cb+0x44>
	min_measured_value[index].val1 = sensor_value[index].val1;
   2e502:	4c10      	ldr	r4, [pc, #64]	; (2e544 <reset_min_max_measured_values_cb+0x50>)
   2e504:	4b10      	ldr	r3, [pc, #64]	; (2e548 <reset_min_max_measured_values_cb+0x54>)
   2e506:	6822      	ldr	r2, [r4, #0]
	NOTIFY_OBSERVER(IPSO_OBJECT_TEMP_SENSOR_ID, obj_inst_id,
   2e508:	4629      	mov	r1, r5
	min_measured_value[index].val1 = sensor_value[index].val1;
   2e50a:	601a      	str	r2, [r3, #0]
	min_measured_value[index].val2 = sensor_value[index].val2;
   2e50c:	6862      	ldr	r2, [r4, #4]
	NOTIFY_OBSERVER(IPSO_OBJECT_TEMP_SENSOR_ID, obj_inst_id,
   2e50e:	f640 40e7 	movw	r0, #3303	; 0xce7
	min_measured_value[index].val2 = sensor_value[index].val2;
   2e512:	605a      	str	r2, [r3, #4]
	NOTIFY_OBSERVER(IPSO_OBJECT_TEMP_SENSOR_ID, obj_inst_id,
   2e514:	f241 52e1 	movw	r2, #5601	; 0x15e1
   2e518:	f7f9 ffdc 	bl	284d4 <lwm2m_notify_observer>
	max_measured_value[index].val1 = sensor_value[index].val1;
   2e51c:	4b0b      	ldr	r3, [pc, #44]	; (2e54c <reset_min_max_measured_values_cb+0x58>)
   2e51e:	6822      	ldr	r2, [r4, #0]
	NOTIFY_OBSERVER(IPSO_OBJECT_TEMP_SENSOR_ID, obj_inst_id,
   2e520:	4629      	mov	r1, r5
	max_measured_value[index].val1 = sensor_value[index].val1;
   2e522:	601a      	str	r2, [r3, #0]
	max_measured_value[index].val2 = sensor_value[index].val2;
   2e524:	6862      	ldr	r2, [r4, #4]
	NOTIFY_OBSERVER(IPSO_OBJECT_TEMP_SENSOR_ID, obj_inst_id,
   2e526:	f640 40e7 	movw	r0, #3303	; 0xce7
	max_measured_value[index].val2 = sensor_value[index].val2;
   2e52a:	605a      	str	r2, [r3, #4]
	NOTIFY_OBSERVER(IPSO_OBJECT_TEMP_SENSOR_ID, obj_inst_id,
   2e52c:	f241 52e2 	movw	r2, #5602	; 0x15e2
   2e530:	f7f9 ffd0 	bl	284d4 <lwm2m_notify_observer>
   2e534:	2000      	movs	r0, #0
}
   2e536:	bd38      	pop	{r3, r4, r5, pc}
	return -ENOENT;
   2e538:	f06f 0001 	mvn.w	r0, #1
   2e53c:	e7fb      	b.n	2e536 <reset_min_max_measured_values_cb+0x42>
   2e53e:	bf00      	nop
   2e540:	200243c4 	.word	0x200243c4
   2e544:	20024508 	.word	0x20024508
   2e548:	200243e4 	.word	0x200243e4
   2e54c:	200243d4 	.word	0x200243d4

0002e550 <ipso_light_control_init>:

	return &inst[avail];
}

static int ipso_light_control_init(struct device *dev)
{
   2e550:	b508      	push	{r3, lr}
	light_control.obj_id = IPSO_OBJECT_LIGHT_CONTROL_ID;
	light_control.fields = fields;
   2e552:	4806      	ldr	r0, [pc, #24]	; (2e56c <ipso_light_control_init+0x1c>)
   2e554:	4b06      	ldr	r3, [pc, #24]	; (2e570 <ipso_light_control_init+0x20>)
   2e556:	6043      	str	r3, [r0, #4]
	light_control.obj_id = IPSO_OBJECT_LIGHT_CONTROL_ID;
   2e558:	4b06      	ldr	r3, [pc, #24]	; (2e574 <ipso_light_control_init+0x24>)
   2e55a:	6183      	str	r3, [r0, #24]
	light_control.field_count = ARRAY_SIZE(fields);
	light_control.max_instance_count = MAX_INSTANCE_COUNT;
   2e55c:	2301      	movs	r3, #1
   2e55e:	83c3      	strh	r3, [r0, #30]
	light_control.create_cb = light_control_create;
   2e560:	4b05      	ldr	r3, [pc, #20]	; (2e578 <ipso_light_control_init+0x28>)
   2e562:	6083      	str	r3, [r0, #8]
	lwm2m_register_obj(&light_control);
   2e564:	f7f9 ffda 	bl	2851c <lwm2m_register_obj>

	return 0;
}
   2e568:	2000      	movs	r0, #0
   2e56a:	bd08      	pop	{r3, pc}
   2e56c:	20024548 	.word	0x20024548
   2e570:	200327ec 	.word	0x200327ec
   2e574:	00080cef 	.word	0x00080cef
   2e578:	0002e5c9 	.word	0x0002e5c9

0002e57c <on_time_read_cb>:
		if (!inst[i].obj || inst[i].obj_inst_id != obj_inst_id) {
   2e57c:	4a0e      	ldr	r2, [pc, #56]	; (2e5b8 <on_time_read_cb+0x3c>)
{
   2e57e:	b510      	push	{r4, lr}
   2e580:	461c      	mov	r4, r3
		if (!inst[i].obj || inst[i].obj_inst_id != obj_inst_id) {
   2e582:	6853      	ldr	r3, [r2, #4]
   2e584:	b1a3      	cbz	r3, 2e5b0 <on_time_read_cb+0x34>
   2e586:	8993      	ldrh	r3, [r2, #12]
   2e588:	4283      	cmp	r3, r0
   2e58a:	d113      	bne.n	2e5b4 <on_time_read_cb+0x38>
		if (on_off_value[i]) {
   2e58c:	4b0b      	ldr	r3, [pc, #44]	; (2e5bc <on_time_read_cb+0x40>)
   2e58e:	781b      	ldrb	r3, [r3, #0]
   2e590:	b15b      	cbz	r3, 2e5aa <on_time_read_cb+0x2e>
   2e592:	f016 fb96 	bl	44cc2 <z_impl_k_uptime_get>
			on_time_value[i] = (k_uptime_get() / MSEC_PER_SEC) -
   2e596:	2300      	movs	r3, #0
   2e598:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   2e59c:	f7ee fbce 	bl	1cd3c <__aeabi_ldivmod>
				on_time_offset[i];
   2e5a0:	4b07      	ldr	r3, [pc, #28]	; (2e5c0 <on_time_read_cb+0x44>)
			on_time_value[i] = (k_uptime_get() / MSEC_PER_SEC) -
   2e5a2:	681b      	ldr	r3, [r3, #0]
   2e5a4:	1ac0      	subs	r0, r0, r3
   2e5a6:	4b07      	ldr	r3, [pc, #28]	; (2e5c4 <on_time_read_cb+0x48>)
   2e5a8:	6018      	str	r0, [r3, #0]
		*data_len = sizeof(on_time_value[i]);
   2e5aa:	2304      	movs	r3, #4
   2e5ac:	6023      	str	r3, [r4, #0]
   2e5ae:	4b05      	ldr	r3, [pc, #20]	; (2e5c4 <on_time_read_cb+0x48>)
}
   2e5b0:	4618      	mov	r0, r3
   2e5b2:	bd10      	pop	{r4, pc}
	return NULL;
   2e5b4:	2300      	movs	r3, #0
   2e5b6:	e7fb      	b.n	2e5b0 <on_time_read_cb+0x34>
   2e5b8:	20024538 	.word	0x20024538
   2e5bc:	2002a4b5 	.word	0x2002a4b5
   2e5c0:	20024568 	.word	0x20024568
   2e5c4:	2002456c 	.word	0x2002456c

0002e5c8 <light_control_create>:
{
   2e5c8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
		if (inst[index].obj && inst[index].obj_inst_id == obj_inst_id) {
   2e5cc:	4f5e      	ldr	r7, [pc, #376]	; (2e748 <light_control_create+0x180>)
{
   2e5ce:	4601      	mov	r1, r0
		if (inst[index].obj && inst[index].obj_inst_id == obj_inst_id) {
   2e5d0:	687e      	ldr	r6, [r7, #4]
   2e5d2:	b346      	cbz	r6, 2e626 <light_control_create+0x5e>
   2e5d4:	4b5d      	ldr	r3, [pc, #372]	; (2e74c <light_control_create+0x184>)
   2e5d6:	89bc      	ldrh	r4, [r7, #12]
   2e5d8:	6818      	ldr	r0, [r3, #0]
   2e5da:	428c      	cmp	r4, r1
   2e5dc:	f000 0007 	and.w	r0, r0, #7
   2e5e0:	d112      	bne.n	2e608 <light_control_create+0x40>
			LOG_ERR("Can not create instance - "
   2e5e2:	b178      	cbz	r0, 2e604 <light_control_create+0x3c>
   2e5e4:	2301      	movs	r3, #1
   2e5e6:	f04f 0200 	mov.w	r2, #0
   2e5ea:	4959      	ldr	r1, [pc, #356]	; (2e750 <light_control_create+0x188>)
   2e5ec:	f363 0207 	bfi	r2, r3, #0, #8
   2e5f0:	4b58      	ldr	r3, [pc, #352]	; (2e754 <light_control_create+0x18c>)
   2e5f2:	4859      	ldr	r0, [pc, #356]	; (2e758 <light_control_create+0x190>)
   2e5f4:	1a5b      	subs	r3, r3, r1
   2e5f6:	4621      	mov	r1, r4
   2e5f8:	08db      	lsrs	r3, r3, #3
   2e5fa:	f363 128f 	bfi	r2, r3, #6, #10
		LOG_ERR("Can not create instance - no more room: %u",
   2e5fe:	f012 fa2d 	bl	40a5c <log_1>
		return NULL;
   2e602:	2000      	movs	r0, #0
}
   2e604:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		LOG_ERR("Can not create instance - no more room: %u",
   2e608:	2800      	cmp	r0, #0
   2e60a:	d0fb      	beq.n	2e604 <light_control_create+0x3c>
   2e60c:	2301      	movs	r3, #1
   2e60e:	f04f 0200 	mov.w	r2, #0
   2e612:	484f      	ldr	r0, [pc, #316]	; (2e750 <light_control_create+0x188>)
   2e614:	f363 0207 	bfi	r2, r3, #0, #8
   2e618:	4b4e      	ldr	r3, [pc, #312]	; (2e754 <light_control_create+0x18c>)
   2e61a:	1a1b      	subs	r3, r3, r0
   2e61c:	08db      	lsrs	r3, r3, #3
   2e61e:	f363 128f 	bfi	r2, r3, #6, #10
   2e622:	484e      	ldr	r0, [pc, #312]	; (2e75c <light_control_create+0x194>)
   2e624:	e7eb      	b.n	2e5fe <light_control_create+0x36>
	on_time_offset[avail] = 0U;
   2e626:	4a4e      	ldr	r2, [pc, #312]	; (2e760 <light_control_create+0x198>)
	on_off_value[avail] = false;
   2e628:	4b4e      	ldr	r3, [pc, #312]	; (2e764 <light_control_create+0x19c>)
__ssp_bos_icheck3(memset, void *, int)
   2e62a:	4c4f      	ldr	r4, [pc, #316]	; (2e768 <light_control_create+0x1a0>)
	on_time_offset[avail] = 0U;
   2e62c:	6016      	str	r6, [r2, #0]
	units[avail][0] = '\0';
   2e62e:	4a4f      	ldr	r2, [pc, #316]	; (2e76c <light_control_create+0x1a4>)
   2e630:	4d4f      	ldr	r5, [pc, #316]	; (2e770 <light_control_create+0x1a8>)
	on_off_value[avail] = false;
   2e632:	701e      	strb	r6, [r3, #0]
	dimmer_value[avail] = 0U;
   2e634:	f8df b148 	ldr.w	fp, [pc, #328]	; 2e780 <light_control_create+0x1b8>
	colour[avail][0] = '\0';
   2e638:	4b4e      	ldr	r3, [pc, #312]	; (2e774 <light_control_create+0x1ac>)
	on_time_value[avail] = 0;
   2e63a:	f8df a148 	ldr.w	sl, [pc, #328]	; 2e784 <light_control_create+0x1bc>
	cumulative_active_value[avail].val1 = 0;
   2e63e:	f8df 9148 	ldr.w	r9, [pc, #328]	; 2e788 <light_control_create+0x1c0>
	power_factor_value[avail].val1 = 0;
   2e642:	f8df 8148 	ldr.w	r8, [pc, #328]	; 2e78c <light_control_create+0x1c4>
	units[avail][0] = '\0';
   2e646:	7016      	strb	r6, [r2, #0]
   2e648:	4631      	mov	r1, r6
   2e64a:	22aa      	movs	r2, #170	; 0xaa
   2e64c:	f104 0016 	add.w	r0, r4, #22
	colour[avail][0] = '\0';
   2e650:	701e      	strb	r6, [r3, #0]
	dimmer_value[avail] = 0U;
   2e652:	f88b 6000 	strb.w	r6, [fp]
	on_time_value[avail] = 0;
   2e656:	f8ca 6000 	str.w	r6, [sl]
	cumulative_active_value[avail].val2 = 0;
   2e65a:	e9c9 6600 	strd	r6, r6, [r9]
	power_factor_value[avail].val2 = 0;
   2e65e:	e9c8 6600 	strd	r6, r6, [r8]
   2e662:	f016 fc2f 	bl	44ec4 <memset>
   2e666:	2258      	movs	r2, #88	; 0x58
   2e668:	4631      	mov	r1, r6
   2e66a:	f105 0008 	add.w	r0, r5, #8
   2e66e:	f016 fc29 	bl	44ec4 <memset>
	INIT_OBJ_RES_DATA(LIGHT_ON_OFF_ID, res[avail], i, res_inst[avail], j,
   2e672:	f241 62da 	movw	r2, #5850	; 0x16da
   2e676:	82a2      	strh	r2, [r4, #20]
   2e678:	2201      	movs	r2, #1
   2e67a:	4b3a      	ldr	r3, [pc, #232]	; (2e764 <light_control_create+0x19c>)
	INIT_OBJ_RES_DATA(LIGHT_POWER_FACTOR_ID, res[avail], i,
   2e67c:	f241 61bc 	movw	r1, #5820	; 0x16bc
	INIT_OBJ_RES_DATA(LIGHT_ON_OFF_ID, res[avail], i, res_inst[avail], j,
   2e680:	e9c5 3200 	strd	r3, r2, [r5]
	INIT_OBJ_RES_DATA(LIGHT_DIMMER_ID, res[avail], i, res_inst[avail], j,
   2e684:	f241 63db 	movw	r3, #5851	; 0x16db
   2e688:	85a3      	strh	r3, [r4, #44]	; 0x2c
   2e68a:	f105 030c 	add.w	r3, r5, #12
   2e68e:	62a3      	str	r3, [r4, #40]	; 0x28
	INIT_OBJ_RES(LIGHT_ON_TIME_ID, res[avail], i,
   2e690:	f241 63dc 	movw	r3, #5852	; 0x16dc
   2e694:	f8a4 3044 	strh.w	r3, [r4, #68]	; 0x44
   2e698:	f105 0318 	add.w	r3, r5, #24
   2e69c:	6423      	str	r3, [r4, #64]	; 0x40
   2e69e:	4b36      	ldr	r3, [pc, #216]	; (2e778 <light_control_create+0x1b0>)
	INIT_OBJ_RES_DATA(LIGHT_POWER_FACTOR_ID, res[avail], i,
   2e6a0:	f8a4 1074 	strh.w	r1, [r4, #116]	; 0x74
	INIT_OBJ_RES(LIGHT_ON_TIME_ID, res[avail], i,
   2e6a4:	6323      	str	r3, [r4, #48]	; 0x30
   2e6a6:	4b35      	ldr	r3, [pc, #212]	; (2e77c <light_control_create+0x1b4>)
	INIT_OBJ_RES_DATA(LIGHT_POWER_FACTOR_ID, res[avail], i,
   2e6a8:	f105 0130 	add.w	r1, r5, #48	; 0x30
	INIT_OBJ_RES(LIGHT_ON_TIME_ID, res[avail], i,
   2e6ac:	63a3      	str	r3, [r4, #56]	; 0x38
   2e6ae:	2304      	movs	r3, #4
   2e6b0:	61eb      	str	r3, [r5, #28]
	INIT_OBJ_RES_DATA(LIGHT_CUMULATIVE_ACTIVE_POWER_ID, res[avail], i,
   2e6b2:	f241 63ad 	movw	r3, #5805	; 0x16ad
	INIT_OBJ_RES_DATA(LIGHT_POWER_FACTOR_ID, res[avail], i,
   2e6b6:	6721      	str	r1, [r4, #112]	; 0x70
	INIT_OBJ_RES_DATA(LIGHT_CUMULATIVE_ACTIVE_POWER_ID, res[avail], i,
   2e6b8:	f8a4 305c 	strh.w	r3, [r4, #92]	; 0x5c
	INIT_OBJ_RES_DATA(LIGHT_COLOUR_ID, res[avail], i,
   2e6bc:	f241 614a 	movw	r1, #5706	; 0x164a
	INIT_OBJ_RES_DATA(LIGHT_CUMULATIVE_ACTIVE_POWER_ID, res[avail], i,
   2e6c0:	f105 0324 	add.w	r3, r5, #36	; 0x24
   2e6c4:	65a3      	str	r3, [r4, #88]	; 0x58
   2e6c6:	2308      	movs	r3, #8
	INIT_OBJ_RES_DATA(LIGHT_COLOUR_ID, res[avail], i,
   2e6c8:	f8a4 108c 	strh.w	r1, [r4, #140]	; 0x8c
   2e6cc:	f105 013c 	add.w	r1, r5, #60	; 0x3c
	INIT_OBJ_RES_DATA(LIGHT_ON_OFF_ID, res[avail], i, res_inst[avail], j,
   2e6d0:	6125      	str	r5, [r4, #16]
   2e6d2:	75a2      	strb	r2, [r4, #22]
   2e6d4:	e9c4 6600 	strd	r6, r6, [r4]
   2e6d8:	e9c4 6602 	strd	r6, r6, [r4, #8]
	INIT_OBJ_RES_DATA(LIGHT_DIMMER_ID, res[avail], i, res_inst[avail], j,
   2e6dc:	f884 202e 	strb.w	r2, [r4, #46]	; 0x2e
   2e6e0:	e9c5 b203 	strd	fp, r2, [r5, #12]
	INIT_OBJ_RES(LIGHT_ON_TIME_ID, res[avail], i,
   2e6e4:	f884 2046 	strb.w	r2, [r4, #70]	; 0x46
   2e6e8:	f8c5 a018 	str.w	sl, [r5, #24]
	INIT_OBJ_RES_DATA(LIGHT_CUMULATIVE_ACTIVE_POWER_ID, res[avail], i,
   2e6ec:	f884 205e 	strb.w	r2, [r4, #94]	; 0x5e
   2e6f0:	f8c5 9024 	str.w	r9, [r5, #36]	; 0x24
   2e6f4:	62ab      	str	r3, [r5, #40]	; 0x28
	INIT_OBJ_RES_DATA(LIGHT_POWER_FACTOR_ID, res[avail], i,
   2e6f6:	f884 2076 	strb.w	r2, [r4, #118]	; 0x76
   2e6fa:	e9c5 830c 	strd	r8, r3, [r5, #48]	; 0x30
	INIT_OBJ_RES_DATA(LIGHT_COLOUR_ID, res[avail], i,
   2e6fe:	f8c4 1088 	str.w	r1, [r4, #136]	; 0x88
   2e702:	491c      	ldr	r1, [pc, #112]	; (2e774 <light_control_create+0x1ac>)
   2e704:	f884 208e 	strb.w	r2, [r4, #142]	; 0x8e
   2e708:	63e9      	str	r1, [r5, #60]	; 0x3c
   2e70a:	2140      	movs	r1, #64	; 0x40
   2e70c:	6429      	str	r1, [r5, #64]	; 0x40
	INIT_OBJ_RES_DATA(LIGHT_SENSOR_UNITS_ID, res[avail], i,
   2e70e:	f241 6145 	movw	r1, #5701	; 0x1645
   2e712:	f8a4 10a4 	strh.w	r1, [r4, #164]	; 0xa4
   2e716:	f105 0148 	add.w	r1, r5, #72	; 0x48
   2e71a:	f8c4 10a0 	str.w	r1, [r4, #160]	; 0xa0
   2e71e:	4913      	ldr	r1, [pc, #76]	; (2e76c <light_control_create+0x1a4>)
   2e720:	f884 20a6 	strb.w	r2, [r4, #166]	; 0xa6
   2e724:	e9c5 1312 	strd	r1, r3, [r5, #72]	; 0x48
	INIT_OBJ_RES_OPTDATA(LIGHT_APPLICATION_TYPE_ID, res[avail], i,
   2e728:	f241 6176 	movw	r1, #5750	; 0x1676
   2e72c:	f8a4 10bc 	strh.w	r1, [r4, #188]	; 0xbc
   2e730:	f105 0154 	add.w	r1, r5, #84	; 0x54
   2e734:	f8c4 10b8 	str.w	r1, [r4, #184]	; 0xb8
   2e738:	f884 20be 	strb.w	r2, [r4, #190]	; 0xbe
   2e73c:	f8a5 605a 	strh.w	r6, [r5, #90]	; 0x5a
	inst[avail].resources = res[avail];
   2e740:	60bc      	str	r4, [r7, #8]
	inst[avail].resource_count = i;
   2e742:	81fb      	strh	r3, [r7, #14]
	return &inst[avail];
   2e744:	4638      	mov	r0, r7
   2e746:	e75d      	b.n	2e604 <light_control_create+0x3c>
   2e748:	20024538 	.word	0x20024538
   2e74c:	20032b00 	.word	0x20032b00
   2e750:	00045f08 	.word	0x00045f08
   2e754:	00046000 	.word	0x00046000
   2e758:	0004b8a4 	.word	0x0004b8a4
   2e75c:	0004b8d3 	.word	0x0004b8d3
   2e760:	20024568 	.word	0x20024568
   2e764:	2002a4b5 	.word	0x2002a4b5
   2e768:	20024578 	.word	0x20024578
   2e76c:	2002a4b6 	.word	0x2002a4b6
   2e770:	20024638 	.word	0x20024638
   2e774:	2002a474 	.word	0x2002a474
   2e778:	0002e57d 	.word	0x0002e57d
   2e77c:	0002e791 	.word	0x0002e791
   2e780:	2002a4b4 	.word	0x2002a4b4
   2e784:	2002456c 	.word	0x2002456c
   2e788:	20024530 	.word	0x20024530
   2e78c:	20024570 	.word	0x20024570

0002e790 <on_time_post_write_cb>:
{
   2e790:	b510      	push	{r4, lr}
   2e792:	f8bd 1008 	ldrh.w	r1, [sp, #8]
	if (data_len != 4U) {
   2e796:	2904      	cmp	r1, #4
   2e798:	d014      	beq.n	2e7c4 <on_time_post_write_cb+0x34>
		LOG_ERR("unknown size %u", data_len);
   2e79a:	4b16      	ldr	r3, [pc, #88]	; (2e7f4 <on_time_post_write_cb+0x64>)
   2e79c:	681b      	ldr	r3, [r3, #0]
   2e79e:	075b      	lsls	r3, r3, #29
   2e7a0:	d00d      	beq.n	2e7be <on_time_post_write_cb+0x2e>
   2e7a2:	2301      	movs	r3, #1
   2e7a4:	f04f 0200 	mov.w	r2, #0
   2e7a8:	4813      	ldr	r0, [pc, #76]	; (2e7f8 <on_time_post_write_cb+0x68>)
   2e7aa:	f363 0207 	bfi	r2, r3, #0, #8
   2e7ae:	4b13      	ldr	r3, [pc, #76]	; (2e7fc <on_time_post_write_cb+0x6c>)
   2e7b0:	1a1b      	subs	r3, r3, r0
   2e7b2:	08db      	lsrs	r3, r3, #3
   2e7b4:	f363 128f 	bfi	r2, r3, #6, #10
   2e7b8:	4811      	ldr	r0, [pc, #68]	; (2e800 <on_time_post_write_cb+0x70>)
   2e7ba:	f012 f94f 	bl	40a5c <log_1>
		return -EINVAL;
   2e7be:	f06f 0415 	mvn.w	r4, #21
   2e7c2:	e010      	b.n	2e7e6 <on_time_post_write_cb+0x56>
		if (!inst[i].obj || inst[i].obj_inst_id != obj_inst_id) {
   2e7c4:	4a0f      	ldr	r2, [pc, #60]	; (2e804 <on_time_post_write_cb+0x74>)
   2e7c6:	6851      	ldr	r1, [r2, #4]
   2e7c8:	b179      	cbz	r1, 2e7ea <on_time_post_write_cb+0x5a>
   2e7ca:	8992      	ldrh	r2, [r2, #12]
   2e7cc:	4282      	cmp	r2, r0
   2e7ce:	d10c      	bne.n	2e7ea <on_time_post_write_cb+0x5a>
	s32_t counter = *(s32_t *) data;
   2e7d0:	681c      	ldr	r4, [r3, #0]
		if (counter == 0) {
   2e7d2:	b96c      	cbnz	r4, 2e7f0 <on_time_post_write_cb+0x60>
   2e7d4:	f016 fa75 	bl	44cc2 <z_impl_k_uptime_get>
				(s32_t)(k_uptime_get() / MSEC_PER_SEC);
   2e7d8:	2300      	movs	r3, #0
   2e7da:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   2e7de:	f7ee faad 	bl	1cd3c <__aeabi_ldivmod>
   2e7e2:	4b09      	ldr	r3, [pc, #36]	; (2e808 <on_time_post_write_cb+0x78>)
   2e7e4:	6018      	str	r0, [r3, #0]
}
   2e7e6:	4620      	mov	r0, r4
   2e7e8:	bd10      	pop	{r4, pc}
	return -ENOENT;
   2e7ea:	f06f 0401 	mvn.w	r4, #1
   2e7ee:	e7fa      	b.n	2e7e6 <on_time_post_write_cb+0x56>
		return 0;
   2e7f0:	2400      	movs	r4, #0
   2e7f2:	e7f8      	b.n	2e7e6 <on_time_post_write_cb+0x56>
   2e7f4:	20032b00 	.word	0x20032b00
   2e7f8:	00045f08 	.word	0x00045f08
   2e7fc:	00046000 	.word	0x00046000
   2e800:	0004b953 	.word	0x0004b953
   2e804:	20024538 	.word	0x20024538
   2e808:	20024568 	.word	0x20024568

0002e80c <ipso_accel_init>:

	return &inst[avail];
}

static int ipso_accel_init(struct device *dev)
{
   2e80c:	b508      	push	{r3, lr}
	accel.obj_id = IPSO_OBJECT_ACCELEROMETER_ID;
	accel.fields = fields;
   2e80e:	4806      	ldr	r0, [pc, #24]	; (2e828 <ipso_accel_init+0x1c>)
   2e810:	4b06      	ldr	r3, [pc, #24]	; (2e82c <ipso_accel_init+0x20>)
   2e812:	6043      	str	r3, [r0, #4]
	accel.obj_id = IPSO_OBJECT_ACCELEROMETER_ID;
   2e814:	4b06      	ldr	r3, [pc, #24]	; (2e830 <ipso_accel_init+0x24>)
   2e816:	6183      	str	r3, [r0, #24]
	accel.field_count = ARRAY_SIZE(fields);
	accel.max_instance_count = ARRAY_SIZE(inst);
   2e818:	2301      	movs	r3, #1
   2e81a:	83c3      	strh	r3, [r0, #30]
	accel.create_cb = accel_create;
   2e81c:	4b05      	ldr	r3, [pc, #20]	; (2e834 <ipso_accel_init+0x28>)
   2e81e:	6083      	str	r3, [r0, #8]
	lwm2m_register_obj(&accel);
   2e820:	f7f9 fe7c 	bl	2851c <lwm2m_register_obj>

	return 0;
}
   2e824:	2000      	movs	r0, #0
   2e826:	bd08      	pop	{r3, pc}
   2e828:	20024698 	.word	0x20024698
   2e82c:	2003280c 	.word	0x2003280c
   2e830:	00070cf1 	.word	0x00070cf1
   2e834:	0002e839 	.word	0x0002e839

0002e838 <accel_create>:
{
   2e838:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
		if (inst[index].obj && inst[index].obj_inst_id == obj_inst_id) {
   2e83c:	f8df 815c 	ldr.w	r8, [pc, #348]	; 2e99c <accel_create+0x164>
{
   2e840:	4601      	mov	r1, r0
		if (inst[index].obj && inst[index].obj_inst_id == obj_inst_id) {
   2e842:	f8d8 6004 	ldr.w	r6, [r8, #4]
   2e846:	b34e      	cbz	r6, 2e89c <accel_create+0x64>
   2e848:	4b4c      	ldr	r3, [pc, #304]	; (2e97c <accel_create+0x144>)
   2e84a:	f8b8 400c 	ldrh.w	r4, [r8, #12]
   2e84e:	6818      	ldr	r0, [r3, #0]
   2e850:	428c      	cmp	r4, r1
   2e852:	f000 0007 	and.w	r0, r0, #7
   2e856:	d112      	bne.n	2e87e <accel_create+0x46>
			LOG_ERR("Can not create instance - "
   2e858:	b178      	cbz	r0, 2e87a <accel_create+0x42>
   2e85a:	2301      	movs	r3, #1
   2e85c:	f04f 0200 	mov.w	r2, #0
   2e860:	4947      	ldr	r1, [pc, #284]	; (2e980 <accel_create+0x148>)
   2e862:	f363 0207 	bfi	r2, r3, #0, #8
   2e866:	4b47      	ldr	r3, [pc, #284]	; (2e984 <accel_create+0x14c>)
   2e868:	4847      	ldr	r0, [pc, #284]	; (2e988 <accel_create+0x150>)
   2e86a:	1a5b      	subs	r3, r3, r1
   2e86c:	4621      	mov	r1, r4
   2e86e:	08db      	lsrs	r3, r3, #3
   2e870:	f363 128f 	bfi	r2, r3, #6, #10
		LOG_ERR("Can not create instance - no more room: %u",
   2e874:	f012 f8f2 	bl	40a5c <log_1>
		return NULL;
   2e878:	2000      	movs	r0, #0
}
   2e87a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		LOG_ERR("Can not create instance - no more room: %u",
   2e87e:	2800      	cmp	r0, #0
   2e880:	d0fb      	beq.n	2e87a <accel_create+0x42>
   2e882:	2301      	movs	r3, #1
   2e884:	f04f 0200 	mov.w	r2, #0
   2e888:	483d      	ldr	r0, [pc, #244]	; (2e980 <accel_create+0x148>)
   2e88a:	f363 0207 	bfi	r2, r3, #0, #8
   2e88e:	4b3d      	ldr	r3, [pc, #244]	; (2e984 <accel_create+0x14c>)
   2e890:	1a1b      	subs	r3, r3, r0
   2e892:	08db      	lsrs	r3, r3, #3
   2e894:	f363 128f 	bfi	r2, r3, #6, #10
   2e898:	483c      	ldr	r0, [pc, #240]	; (2e98c <accel_create+0x154>)
   2e89a:	e7eb      	b.n	2e874 <accel_create+0x3c>
   2e89c:	4f3c      	ldr	r7, [pc, #240]	; (2e990 <accel_create+0x158>)
   2e89e:	4c3d      	ldr	r4, [pc, #244]	; (2e994 <accel_create+0x15c>)
   2e8a0:	4d3d      	ldr	r5, [pc, #244]	; (2e998 <accel_create+0x160>)
   2e8a2:	2228      	movs	r2, #40	; 0x28
   2e8a4:	4631      	mov	r1, r6
   2e8a6:	4638      	mov	r0, r7
   2e8a8:	f016 fb0c 	bl	44ec4 <memset>
   2e8ac:	2292      	movs	r2, #146	; 0x92
   2e8ae:	4631      	mov	r1, r6
   2e8b0:	f104 0016 	add.w	r0, r4, #22
   2e8b4:	f016 fb06 	bl	44ec4 <memset>
   2e8b8:	224c      	movs	r2, #76	; 0x4c
   2e8ba:	4631      	mov	r1, r6
   2e8bc:	f105 0008 	add.w	r0, r5, #8
   2e8c0:	f016 fb00 	bl	44ec4 <memset>
	INIT_OBJ_RES_DATA(ACCEL_Y_VALUE_ID, res[avail], i, res_inst[avail], j,
   2e8c4:	f241 6147 	movw	r1, #5703	; 0x1647
	INIT_OBJ_RES_DATA(ACCEL_X_VALUE_ID, res[avail], i, res_inst[avail], j,
   2e8c8:	2208      	movs	r2, #8
	INIT_OBJ_RES_DATA(ACCEL_Y_VALUE_ID, res[avail], i, res_inst[avail], j,
   2e8ca:	85a1      	strh	r1, [r4, #44]	; 0x2c
   2e8cc:	f105 010c 	add.w	r1, r5, #12
   2e8d0:	62a1      	str	r1, [r4, #40]	; 0x28
   2e8d2:	18b9      	adds	r1, r7, r2
   2e8d4:	e9c5 1203 	strd	r1, r2, [r5, #12]
	INIT_OBJ_RES_DATA(ACCEL_Z_VALUE_ID, res[avail], i, res_inst[avail], j,
   2e8d8:	f241 6148 	movw	r1, #5704	; 0x1648
   2e8dc:	f8a4 1044 	strh.w	r1, [r4, #68]	; 0x44
   2e8e0:	f105 0118 	add.w	r1, r5, #24
   2e8e4:	6421      	str	r1, [r4, #64]	; 0x40
   2e8e6:	f107 0110 	add.w	r1, r7, #16
   2e8ea:	e9c5 1206 	strd	r1, r2, [r5, #24]
	INIT_OBJ_RES_OPTDATA(ACCEL_SENSOR_UNITS_ID, res[avail], i,
   2e8ee:	f241 6145 	movw	r1, #5701	; 0x1645
   2e8f2:	f8a4 105c 	strh.w	r1, [r4, #92]	; 0x5c
   2e8f6:	f105 0124 	add.w	r1, r5, #36	; 0x24
   2e8fa:	65a1      	str	r1, [r4, #88]	; 0x58
	INIT_OBJ_RES_DATA(ACCEL_MIN_RANGE_VALUE_ID, res[avail], i,
   2e8fc:	f241 51e3 	movw	r1, #5603	; 0x15e3
	INIT_OBJ_RES_DATA(ACCEL_X_VALUE_ID, res[avail], i, res_inst[avail], j,
   2e900:	f241 6346 	movw	r3, #5702	; 0x1646
	INIT_OBJ_RES_DATA(ACCEL_MIN_RANGE_VALUE_ID, res[avail], i,
   2e904:	f8a4 1074 	strh.w	r1, [r4, #116]	; 0x74
   2e908:	f105 0130 	add.w	r1, r5, #48	; 0x30
   2e90c:	6721      	str	r1, [r4, #112]	; 0x70
   2e90e:	f107 0118 	add.w	r1, r7, #24
   2e912:	e9c5 120c 	strd	r1, r2, [r5, #48]	; 0x30
	INIT_OBJ_RES_DATA(ACCEL_MAX_RANGE_VALUE_ID, res[avail], i,
   2e916:	f241 51e4 	movw	r1, #5604	; 0x15e4
	INIT_OBJ_RES_DATA(ACCEL_X_VALUE_ID, res[avail], i, res_inst[avail], j,
   2e91a:	82a3      	strh	r3, [r4, #20]
   2e91c:	2301      	movs	r3, #1
   2e91e:	602f      	str	r7, [r5, #0]
	INIT_OBJ_RES_DATA(ACCEL_MAX_RANGE_VALUE_ID, res[avail], i,
   2e920:	f8a4 108c 	strh.w	r1, [r4, #140]	; 0x8c
   2e924:	3720      	adds	r7, #32
   2e926:	f105 013c 	add.w	r1, r5, #60	; 0x3c
	INIT_OBJ_RES_DATA(ACCEL_X_VALUE_ID, res[avail], i, res_inst[avail], j,
   2e92a:	75a3      	strb	r3, [r4, #22]
   2e92c:	606a      	str	r2, [r5, #4]
	INIT_OBJ_RES_DATA(ACCEL_Y_VALUE_ID, res[avail], i, res_inst[avail], j,
   2e92e:	f884 302e 	strb.w	r3, [r4, #46]	; 0x2e
	INIT_OBJ_RES_DATA(ACCEL_Z_VALUE_ID, res[avail], i, res_inst[avail], j,
   2e932:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
	INIT_OBJ_RES_OPTDATA(ACCEL_SENSOR_UNITS_ID, res[avail], i,
   2e936:	f884 305e 	strb.w	r3, [r4, #94]	; 0x5e
	INIT_OBJ_RES_DATA(ACCEL_MIN_RANGE_VALUE_ID, res[avail], i,
   2e93a:	f884 3076 	strb.w	r3, [r4, #118]	; 0x76
	INIT_OBJ_RES_DATA(ACCEL_MAX_RANGE_VALUE_ID, res[avail], i,
   2e93e:	f884 308e 	strb.w	r3, [r4, #142]	; 0x8e
	INIT_OBJ_RES_DATA(ACCEL_X_VALUE_ID, res[avail], i, res_inst[avail], j,
   2e942:	6125      	str	r5, [r4, #16]
   2e944:	e9c4 6600 	strd	r6, r6, [r4]
   2e948:	e9c4 6602 	strd	r6, r6, [r4, #8]
	INIT_OBJ_RES_OPTDATA(ACCEL_SENSOR_UNITS_ID, res[avail], i,
   2e94c:	856e      	strh	r6, [r5, #42]	; 0x2a
	INIT_OBJ_RES_DATA(ACCEL_MAX_RANGE_VALUE_ID, res[avail], i,
   2e94e:	f8c4 1088 	str.w	r1, [r4, #136]	; 0x88
   2e952:	e9c5 720f 	strd	r7, r2, [r5, #60]	; 0x3c
	INIT_OBJ_RES_OPTDATA(ACCEL_TIMESTAMP_ID, res[avail], i,
   2e956:	f241 528e 	movw	r2, #5518	; 0x158e
   2e95a:	f884 30a6 	strb.w	r3, [r4, #166]	; 0xa6
	inst[avail].resource_count = i;
   2e95e:	2307      	movs	r3, #7
	INIT_OBJ_RES_OPTDATA(ACCEL_TIMESTAMP_ID, res[avail], i,
   2e960:	f8a4 20a4 	strh.w	r2, [r4, #164]	; 0xa4
   2e964:	f105 0248 	add.w	r2, r5, #72	; 0x48
   2e968:	f8c4 20a0 	str.w	r2, [r4, #160]	; 0xa0
   2e96c:	f8a5 604e 	strh.w	r6, [r5, #78]	; 0x4e
	inst[avail].resources = res[avail];
   2e970:	f8c8 4008 	str.w	r4, [r8, #8]
	inst[avail].resource_count = i;
   2e974:	f8a8 300e 	strh.w	r3, [r8, #14]
	return &inst[avail];
   2e978:	4640      	mov	r0, r8
   2e97a:	e77e      	b.n	2e87a <accel_create+0x42>
   2e97c:	20032af4 	.word	0x20032af4
   2e980:	00045f08 	.word	0x00045f08
   2e984:	00045fe8 	.word	0x00045fe8
   2e988:	0004b8a4 	.word	0x0004b8a4
   2e98c:	0004b8d3 	.word	0x0004b8d3
   2e990:	200246b8 	.word	0x200246b8
   2e994:	200246f0 	.word	0x200246f0
   2e998:	20024798 	.word	0x20024798
   2e99c:	200246e0 	.word	0x200246e0

0002e9a0 <ipso_buzzer_init>:

	return &inst[avail];
}

static int ipso_buzzer_init(struct device *dev)
{
   2e9a0:	b508      	push	{r3, lr}
	buzzer.obj_id = IPSO_OBJECT_BUZZER_ID;
	buzzer.fields = fields;
   2e9a2:	4806      	ldr	r0, [pc, #24]	; (2e9bc <ipso_buzzer_init+0x1c>)
   2e9a4:	4b06      	ldr	r3, [pc, #24]	; (2e9c0 <ipso_buzzer_init+0x20>)
   2e9a6:	6043      	str	r3, [r0, #4]
	buzzer.obj_id = IPSO_OBJECT_BUZZER_ID;
   2e9a8:	4b06      	ldr	r3, [pc, #24]	; (2e9c4 <ipso_buzzer_init+0x24>)
   2e9aa:	6183      	str	r3, [r0, #24]
	buzzer.field_count = ARRAY_SIZE(fields);
	buzzer.max_instance_count = ARRAY_SIZE(inst);
   2e9ac:	2301      	movs	r3, #1
   2e9ae:	83c3      	strh	r3, [r0, #30]
	buzzer.create_cb = buzzer_create;
   2e9b0:	4b05      	ldr	r3, [pc, #20]	; (2e9c8 <ipso_buzzer_init+0x28>)
   2e9b2:	6083      	str	r3, [r0, #8]
	lwm2m_register_obj(&buzzer);
   2e9b4:	f7f9 fdb2 	bl	2851c <lwm2m_register_obj>

	return 0;
}
   2e9b8:	2000      	movs	r0, #0
   2e9ba:	bd08      	pop	{r3, pc}
   2e9bc:	200247ec 	.word	0x200247ec
   2e9c0:	20032828 	.word	0x20032828
   2e9c4:	00060d0a 	.word	0x00060d0a
   2e9c8:	0002e9cd 	.word	0x0002e9cd

0002e9cc <buzzer_create>:
{
   2e9cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
		if (inst[index].obj && inst[index].obj_inst_id == obj_inst_id) {
   2e9d0:	f8df 816c 	ldr.w	r8, [pc, #364]	; 2eb40 <buzzer_create+0x174>
{
   2e9d4:	4604      	mov	r4, r0
		if (inst[index].obj && inst[index].obj_inst_id == obj_inst_id) {
   2e9d6:	f8d8 7004 	ldr.w	r7, [r8, #4]
   2e9da:	b34f      	cbz	r7, 2ea30 <buzzer_create+0x64>
   2e9dc:	4b4e      	ldr	r3, [pc, #312]	; (2eb18 <buzzer_create+0x14c>)
   2e9de:	f8b8 100c 	ldrh.w	r1, [r8, #12]
   2e9e2:	6818      	ldr	r0, [r3, #0]
   2e9e4:	42a1      	cmp	r1, r4
   2e9e6:	f000 0007 	and.w	r0, r0, #7
   2e9ea:	d111      	bne.n	2ea10 <buzzer_create+0x44>
			LOG_ERR("Can not create instance - "
   2e9ec:	b170      	cbz	r0, 2ea0c <buzzer_create+0x40>
   2e9ee:	2301      	movs	r3, #1
   2e9f0:	f04f 0200 	mov.w	r2, #0
   2e9f4:	4849      	ldr	r0, [pc, #292]	; (2eb1c <buzzer_create+0x150>)
   2e9f6:	f363 0207 	bfi	r2, r3, #0, #8
   2e9fa:	4b49      	ldr	r3, [pc, #292]	; (2eb20 <buzzer_create+0x154>)
   2e9fc:	1a1b      	subs	r3, r3, r0
   2e9fe:	08db      	lsrs	r3, r3, #3
   2ea00:	4848      	ldr	r0, [pc, #288]	; (2eb24 <buzzer_create+0x158>)
   2ea02:	f363 128f 	bfi	r2, r3, #6, #10
		LOG_ERR("Can not create instance - no more room: %u",
   2ea06:	f012 f829 	bl	40a5c <log_1>
		return NULL;
   2ea0a:	2000      	movs	r0, #0
}
   2ea0c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		LOG_ERR("Can not create instance - no more room: %u",
   2ea10:	2800      	cmp	r0, #0
   2ea12:	d0fb      	beq.n	2ea0c <buzzer_create+0x40>
   2ea14:	2301      	movs	r3, #1
   2ea16:	f04f 0200 	mov.w	r2, #0
   2ea1a:	4940      	ldr	r1, [pc, #256]	; (2eb1c <buzzer_create+0x150>)
   2ea1c:	f363 0207 	bfi	r2, r3, #0, #8
   2ea20:	4b3f      	ldr	r3, [pc, #252]	; (2eb20 <buzzer_create+0x154>)
   2ea22:	4841      	ldr	r0, [pc, #260]	; (2eb28 <buzzer_create+0x15c>)
   2ea24:	1a5b      	subs	r3, r3, r1
   2ea26:	08db      	lsrs	r3, r3, #3
   2ea28:	f363 128f 	bfi	r2, r3, #6, #10
   2ea2c:	4621      	mov	r1, r4
   2ea2e:	e7ea      	b.n	2ea06 <buzzer_create+0x3a>
   2ea30:	4e3e      	ldr	r6, [pc, #248]	; (2eb2c <buzzer_create+0x160>)
   2ea32:	2258      	movs	r2, #88	; 0x58
   2ea34:	4639      	mov	r1, r7
   2ea36:	4630      	mov	r0, r6
   2ea38:	f016 fa44 	bl	44ec4 <memset>
	k_delayed_work_init(&buzzer_data[avail].buzzer_work, buzzer_work_cb);
   2ea3c:	f106 0030 	add.w	r0, r6, #48	; 0x30
   2ea40:	493b      	ldr	r1, [pc, #236]	; (2eb30 <buzzer_create+0x164>)
   2ea42:	f016 f932 	bl	44caa <k_delayed_work_init>
	buzzer_data[avail].level.val1 = 50; /* 50% */
   2ea46:	2332      	movs	r3, #50	; 0x32
	buzzer_data[avail].delay_duration.val1 = 1; /* 1 seconds */
   2ea48:	2201      	movs	r2, #1
	buzzer_data[avail].level.val1 = 50; /* 50% */
   2ea4a:	6033      	str	r3, [r6, #0]
	buzzer_data[avail].delay_duration.val1 = 1; /* 1 seconds */
   2ea4c:	2300      	movs	r3, #0
	buzzer_data[avail].obj_inst_id = obj_inst_id;
   2ea4e:	f8a6 4050 	strh.w	r4, [r6, #80]	; 0x50
   2ea52:	4c38      	ldr	r4, [pc, #224]	; (2eb34 <buzzer_create+0x168>)
   2ea54:	4d38      	ldr	r5, [pc, #224]	; (2eb38 <buzzer_create+0x16c>)
	buzzer_data[avail].delay_duration.val1 = 1; /* 1 seconds */
   2ea56:	e9c6 2302 	strd	r2, r3, [r6, #8]
   2ea5a:	4639      	mov	r1, r7
   2ea5c:	227a      	movs	r2, #122	; 0x7a
   2ea5e:	f104 0016 	add.w	r0, r4, #22
   2ea62:	f016 fa2f 	bl	44ec4 <memset>
   2ea66:	2240      	movs	r2, #64	; 0x40
   2ea68:	4639      	mov	r1, r7
   2ea6a:	f105 0008 	add.w	r0, r5, #8
   2ea6e:	f016 fa29 	bl	44ec4 <memset>
	INIT_OBJ_RES(BUZZER_ON_OFF_ID, res[avail], i,
   2ea72:	f241 63da 	movw	r3, #5850	; 0x16da
   2ea76:	82a3      	strh	r3, [r4, #20]
   2ea78:	2301      	movs	r3, #1
   2ea7a:	4a30      	ldr	r2, [pc, #192]	; (2eb3c <buzzer_create+0x170>)
	INIT_OBJ_RES_DATA(BUZZER_MINIMUM_OFF_TIME_ID, res[avail], i,
   2ea7c:	f241 5195 	movw	r1, #5525	; 0x1595
	INIT_OBJ_RES(BUZZER_ON_OFF_ID, res[avail], i,
   2ea80:	e9c4 2702 	strd	r2, r7, [r4, #8]
   2ea84:	f106 0252 	add.w	r2, r6, #82	; 0x52
   2ea88:	e9c5 2300 	strd	r2, r3, [r5]
	INIT_OBJ_RES_DATA(BUZZER_LEVEL_ID, res[avail], i, res_inst[avail], j,
   2ea8c:	f241 52ac 	movw	r2, #5548	; 0x15ac
   2ea90:	85a2      	strh	r2, [r4, #44]	; 0x2c
   2ea92:	f105 020c 	add.w	r2, r5, #12
   2ea96:	62a2      	str	r2, [r4, #40]	; 0x28
   2ea98:	2208      	movs	r2, #8
   2ea9a:	612a      	str	r2, [r5, #16]
	INIT_OBJ_RES_DATA(BUZZER_DELAY_DURATION_ID, res[avail], i,
   2ea9c:	f241 5291 	movw	r2, #5521	; 0x1591
   2eaa0:	f8a4 2044 	strh.w	r2, [r4, #68]	; 0x44
   2eaa4:	f105 0218 	add.w	r2, r5, #24
   2eaa8:	6422      	str	r2, [r4, #64]	; 0x40
   2eaaa:	f106 0208 	add.w	r2, r6, #8
   2eaae:	61aa      	str	r2, [r5, #24]
   2eab0:	2210      	movs	r2, #16
	INIT_OBJ_RES_DATA(BUZZER_MINIMUM_OFF_TIME_ID, res[avail], i,
   2eab2:	f8a4 105c 	strh.w	r1, [r4, #92]	; 0x5c
   2eab6:	f105 0124 	add.w	r1, r5, #36	; 0x24
   2eaba:	65a1      	str	r1, [r4, #88]	; 0x58
   2eabc:	f106 0118 	add.w	r1, r6, #24
	INIT_OBJ_RES_DATA(BUZZER_DELAY_DURATION_ID, res[avail], i,
   2eac0:	61ea      	str	r2, [r5, #28]
	INIT_OBJ_RES_DATA(BUZZER_MINIMUM_OFF_TIME_ID, res[avail], i,
   2eac2:	e9c5 1209 	strd	r1, r2, [r5, #36]	; 0x24
	INIT_OBJ_RES_OPTDATA(BUZZER_APPLICATION_TYPE_ID, res[avail], i,
   2eac6:	f241 6276 	movw	r2, #5750	; 0x1676
   2eaca:	f8a4 2074 	strh.w	r2, [r4, #116]	; 0x74
   2eace:	f105 0230 	add.w	r2, r5, #48	; 0x30
   2ead2:	6722      	str	r2, [r4, #112]	; 0x70
	INIT_OBJ_RES_DATA(BUZZER_DIGITAL_STATE_ID, res[avail], i,
   2ead4:	f241 527c 	movw	r2, #5500	; 0x157c
	INIT_OBJ_RES_DATA(BUZZER_LEVEL_ID, res[avail], i, res_inst[avail], j,
   2ead8:	60ee      	str	r6, [r5, #12]
	INIT_OBJ_RES_DATA(BUZZER_DIGITAL_STATE_ID, res[avail], i,
   2eada:	f8a4 208c 	strh.w	r2, [r4, #140]	; 0x8c
   2eade:	3653      	adds	r6, #83	; 0x53
   2eae0:	f105 023c 	add.w	r2, r5, #60	; 0x3c
	INIT_OBJ_RES(BUZZER_ON_OFF_ID, res[avail], i,
   2eae4:	75a3      	strb	r3, [r4, #22]
	INIT_OBJ_RES_DATA(BUZZER_LEVEL_ID, res[avail], i, res_inst[avail], j,
   2eae6:	f884 302e 	strb.w	r3, [r4, #46]	; 0x2e
	INIT_OBJ_RES_DATA(BUZZER_DELAY_DURATION_ID, res[avail], i,
   2eaea:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
	INIT_OBJ_RES_DATA(BUZZER_MINIMUM_OFF_TIME_ID, res[avail], i,
   2eaee:	f884 305e 	strb.w	r3, [r4, #94]	; 0x5e
	INIT_OBJ_RES_OPTDATA(BUZZER_APPLICATION_TYPE_ID, res[avail], i,
   2eaf2:	f884 3076 	strb.w	r3, [r4, #118]	; 0x76
	INIT_OBJ_RES_DATA(BUZZER_DIGITAL_STATE_ID, res[avail], i,
   2eaf6:	f884 308e 	strb.w	r3, [r4, #142]	; 0x8e
	INIT_OBJ_RES(BUZZER_ON_OFF_ID, res[avail], i,
   2eafa:	6125      	str	r5, [r4, #16]
   2eafc:	e9c4 7700 	strd	r7, r7, [r4]
	INIT_OBJ_RES_OPTDATA(BUZZER_APPLICATION_TYPE_ID, res[avail], i,
   2eb00:	86ef      	strh	r7, [r5, #54]	; 0x36
	INIT_OBJ_RES_DATA(BUZZER_DIGITAL_STATE_ID, res[avail], i,
   2eb02:	f8c4 2088 	str.w	r2, [r4, #136]	; 0x88
   2eb06:	e9c5 630f 	strd	r6, r3, [r5, #60]	; 0x3c
	inst[avail].resource_count = i;
   2eb0a:	2306      	movs	r3, #6
	inst[avail].resources = res[avail];
   2eb0c:	f8c8 4008 	str.w	r4, [r8, #8]
	inst[avail].resource_count = i;
   2eb10:	f8a8 300e 	strh.w	r3, [r8, #14]
	return &inst[avail];
   2eb14:	4640      	mov	r0, r8
   2eb16:	e779      	b.n	2ea0c <buzzer_create+0x40>
   2eb18:	20032afc 	.word	0x20032afc
   2eb1c:	00045f08 	.word	0x00045f08
   2eb20:	00045ff8 	.word	0x00045ff8
   2eb24:	0004b8a4 	.word	0x0004b8a4
   2eb28:	0004b8d3 	.word	0x0004b8d3
   2eb2c:	20020ce0 	.word	0x20020ce0
   2eb30:	0002ec35 	.word	0x0002ec35
   2eb34:	2002481c 	.word	0x2002481c
   2eb38:	200248ac 	.word	0x200248ac
   2eb3c:	0002eb45 	.word	0x0002eb45
   2eb40:	2002480c 	.word	0x2002480c

0002eb44 <onoff_post_write_cb>:
{
   2eb44:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
		if (!inst[i].obj || inst[i].obj_inst_id != obj_inst_id) {
   2eb48:	4b35      	ldr	r3, [pc, #212]	; (2ec20 <onoff_post_write_cb+0xdc>)
{
   2eb4a:	b089      	sub	sp, #36	; 0x24
		if (!inst[i].obj || inst[i].obj_inst_id != obj_inst_id) {
   2eb4c:	685a      	ldr	r2, [r3, #4]
   2eb4e:	b112      	cbz	r2, 2eb56 <onoff_post_write_cb+0x12>
   2eb50:	899b      	ldrh	r3, [r3, #12]
   2eb52:	4283      	cmp	r3, r0
   2eb54:	d044      	beq.n	2ebe0 <onoff_post_write_cb+0x9c>
   2eb56:	f06f 0001 	mvn.w	r0, #1
   2eb5a:	e03e      	b.n	2ebda <onoff_post_write_cb+0x96>
	} else if (buzzer_data[i].onoff && !buzzer_data[i].active) {
   2eb5c:	2c00      	cmp	r4, #0
   2eb5e:	d15c      	bne.n	2ec1a <onoff_post_write_cb+0xd6>
	*ms += f->val2 / (LWM2M_FLOAT64_DEC_MAX / MSEC_PER_SEC);
   2eb60:	e9d5 0108 	ldrd	r0, r1, [r5, #32]
	*ms = f->val1 * MSEC_PER_SEC;
   2eb64:	f44f 777a 	mov.w	r7, #1000	; 0x3e8
	*ms += f->val2 / (LWM2M_FLOAT64_DEC_MAX / MSEC_PER_SEC);
   2eb68:	4a2e      	ldr	r2, [pc, #184]	; (2ec24 <onoff_post_write_cb+0xe0>)
   2eb6a:	2300      	movs	r3, #0
   2eb6c:	f7ee f8e6 	bl	1cd3c <__aeabi_ldivmod>
	*ms = f->val1 * MSEC_PER_SEC;
   2eb70:	69ae      	ldr	r6, [r5, #24]
   2eb72:	437e      	muls	r6, r7
	*ms += f->val2 / (LWM2M_FLOAT64_DEC_MAX / MSEC_PER_SEC);
   2eb74:	4406      	add	r6, r0
   2eb76:	f016 f8a4 	bl	44cc2 <z_impl_k_uptime_get>
	if (k_uptime_get() < buzzer->trigger_offset + temp) {
   2eb7a:	e9d5 890a 	ldrd	r8, r9, [r5, #40]	; 0x28
   2eb7e:	eb18 0206 	adds.w	r2, r8, r6
   2eb82:	f149 0300 	adc.w	r3, r9, #0
   2eb86:	4299      	cmp	r1, r3
   2eb88:	bf08      	it	eq
   2eb8a:	4290      	cmpeq	r0, r2
   2eb8c:	d323      	bcc.n	2ebd6 <onoff_post_write_cb+0x92>
   2eb8e:	f016 f898 	bl	44cc2 <z_impl_k_uptime_get>
	snprintk(path, MAX_RESOURCE_LEN, "%d/%u/%d", IPSO_OBJECT_BUZZER_ID,
   2eb92:	f241 537c 	movw	r3, #5500	; 0x157c
   2eb96:	9301      	str	r3, [sp, #4]
   2eb98:	f8b5 3050 	ldrh.w	r3, [r5, #80]	; 0x50
	buzzer->trigger_offset = k_uptime_get();
   2eb9c:	e9c5 010a 	strd	r0, r1, [r5, #40]	; 0x28
	snprintk(path, MAX_RESOURCE_LEN, "%d/%u/%d", IPSO_OBJECT_BUZZER_ID,
   2eba0:	9300      	str	r3, [sp, #0]
   2eba2:	4a21      	ldr	r2, [pc, #132]	; (2ec28 <onoff_post_write_cb+0xe4>)
   2eba4:	f640 530a 	movw	r3, #3338	; 0xd0a
   2eba8:	2114      	movs	r1, #20
   2ebaa:	a803      	add	r0, sp, #12
   2ebac:	f011 fd36 	bl	4061c <snprintk>
	lwm2m_engine_set_bool(path, true);
   2ebb0:	2101      	movs	r1, #1
   2ebb2:	a803      	add	r0, sp, #12
   2ebb4:	f014 fa49 	bl	4304a <lwm2m_engine_set_bool>
	*ms += f->val2 / (LWM2M_FLOAT64_DEC_MAX / MSEC_PER_SEC);
   2ebb8:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
	*ms = f->val1 * MSEC_PER_SEC;
   2ebbc:	68ab      	ldr	r3, [r5, #8]
	*ms += f->val2 / (LWM2M_FLOAT64_DEC_MAX / MSEC_PER_SEC);
   2ebbe:	4a19      	ldr	r2, [pc, #100]	; (2ec24 <onoff_post_write_cb+0xe0>)
	*ms = f->val1 * MSEC_PER_SEC;
   2ebc0:	435f      	muls	r7, r3
	*ms += f->val2 / (LWM2M_FLOAT64_DEC_MAX / MSEC_PER_SEC);
   2ebc2:	2300      	movs	r3, #0
   2ebc4:	f7ee f8ba 	bl	1cd3c <__aeabi_ldivmod>
	return k_delayed_work_submit_to_queue(&k_sys_work_q, work, delay);
   2ebc8:	f105 0130 	add.w	r1, r5, #48	; 0x30
   2ebcc:	183a      	adds	r2, r7, r0
   2ebce:	4817      	ldr	r0, [pc, #92]	; (2ec2c <onoff_post_write_cb+0xe8>)
   2ebd0:	f00e ff2a 	bl	3da28 <k_delayed_work_submit_to_queue>
   2ebd4:	e021      	b.n	2ec1a <onoff_post_write_cb+0xd6>
		return -EINVAL;
   2ebd6:	f06f 0015 	mvn.w	r0, #21
}
   2ebda:	b009      	add	sp, #36	; 0x24
   2ebdc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (!buzzer_data[i].onoff && buzzer_data[i].active) {
   2ebe0:	4d13      	ldr	r5, [pc, #76]	; (2ec30 <onoff_post_write_cb+0xec>)
   2ebe2:	f895 6052 	ldrb.w	r6, [r5, #82]	; 0x52
   2ebe6:	f895 4053 	ldrb.w	r4, [r5, #83]	; 0x53
   2ebea:	2e00      	cmp	r6, #0
   2ebec:	d1b6      	bne.n	2eb5c <onoff_post_write_cb+0x18>
   2ebee:	b1a4      	cbz	r4, 2ec1a <onoff_post_write_cb+0xd6>
	snprintk(path, MAX_RESOURCE_LEN, "%d/%u/%d", IPSO_OBJECT_BUZZER_ID,
   2ebf0:	f241 537c 	movw	r3, #5500	; 0x157c
   2ebf4:	9301      	str	r3, [sp, #4]
   2ebf6:	f8b5 3050 	ldrh.w	r3, [r5, #80]	; 0x50
   2ebfa:	4a0b      	ldr	r2, [pc, #44]	; (2ec28 <onoff_post_write_cb+0xe4>)
   2ebfc:	9300      	str	r3, [sp, #0]
   2ebfe:	2114      	movs	r1, #20
   2ec00:	f640 530a 	movw	r3, #3338	; 0xd0a
   2ec04:	a803      	add	r0, sp, #12
   2ec06:	f011 fd09 	bl	4061c <snprintk>
	lwm2m_engine_set_bool(path, false);
   2ec0a:	4631      	mov	r1, r6
   2ec0c:	a803      	add	r0, sp, #12
   2ec0e:	f014 fa1c 	bl	4304a <lwm2m_engine_set_bool>
		k_delayed_work_cancel(&buzzer->buzzer_work);
   2ec12:	f105 0030 	add.w	r0, r5, #48	; 0x30
   2ec16:	f00e ff93 	bl	3db40 <k_delayed_work_cancel>
	return 0;
   2ec1a:	2000      	movs	r0, #0
   2ec1c:	e7dd      	b.n	2ebda <onoff_post_write_cb+0x96>
   2ec1e:	bf00      	nop
   2ec20:	2002480c 	.word	0x2002480c
   2ec24:	000f4240 	.word	0x000f4240
   2ec28:	0004c081 	.word	0x0004c081
   2ec2c:	20029754 	.word	0x20029754
   2ec30:	20020ce0 	.word	0x20020ce0

0002ec34 <buzzer_work_cb>:
{
   2ec34:	b500      	push	{lr}
	if (!buzzer->active) {
   2ec36:	f890 3023 	ldrb.w	r3, [r0, #35]	; 0x23
{
   2ec3a:	b089      	sub	sp, #36	; 0x24
	if (!buzzer->active) {
   2ec3c:	b17b      	cbz	r3, 2ec5e <buzzer_work_cb+0x2a>
	snprintk(path, MAX_RESOURCE_LEN, "%d/%u/%d", IPSO_OBJECT_BUZZER_ID,
   2ec3e:	f241 537c 	movw	r3, #5500	; 0x157c
   2ec42:	9301      	str	r3, [sp, #4]
   2ec44:	8c03      	ldrh	r3, [r0, #32]
   2ec46:	2114      	movs	r1, #20
   2ec48:	9300      	str	r3, [sp, #0]
   2ec4a:	4a06      	ldr	r2, [pc, #24]	; (2ec64 <buzzer_work_cb+0x30>)
   2ec4c:	f640 530a 	movw	r3, #3338	; 0xd0a
   2ec50:	a803      	add	r0, sp, #12
   2ec52:	f011 fce3 	bl	4061c <snprintk>
	lwm2m_engine_set_bool(path, false);
   2ec56:	2100      	movs	r1, #0
   2ec58:	a803      	add	r0, sp, #12
   2ec5a:	f014 f9f6 	bl	4304a <lwm2m_engine_set_bool>
}
   2ec5e:	b009      	add	sp, #36	; 0x24
   2ec60:	f85d fb04 	ldr.w	pc, [sp], #4
   2ec64:	0004c081 	.word	0x0004c081

0002ec68 <get_switch_index>:
static int get_switch_index(u16_t obj_inst_id)
{
	int i, ret = -ENOENT;

	for (i = 0; i < ARRAY_SIZE(inst); i++) {
		if (!inst[i].obj || inst[i].obj_inst_id != obj_inst_id) {
   2ec68:	4b0a      	ldr	r3, [pc, #40]	; (2ec94 <get_switch_index+0x2c>)
   2ec6a:	6859      	ldr	r1, [r3, #4]
   2ec6c:	461a      	mov	r2, r3
   2ec6e:	b111      	cbz	r1, 2ec76 <get_switch_index+0xe>
   2ec70:	899b      	ldrh	r3, [r3, #12]
   2ec72:	4283      	cmp	r3, r0
   2ec74:	d008      	beq.n	2ec88 <get_switch_index+0x20>
   2ec76:	6953      	ldr	r3, [r2, #20]
   2ec78:	b143      	cbz	r3, 2ec8c <get_switch_index+0x24>
   2ec7a:	8b93      	ldrh	r3, [r2, #28]
	for (i = 0; i < ARRAY_SIZE(inst); i++) {
   2ec7c:	4283      	cmp	r3, r0
   2ec7e:	bf14      	ite	ne
   2ec80:	f06f 0001 	mvnne.w	r0, #1
   2ec84:	2001      	moveq	r0, #1
   2ec86:	4770      	bx	lr
   2ec88:	2000      	movs	r0, #0
   2ec8a:	4770      	bx	lr
	int i, ret = -ENOENT;
   2ec8c:	f06f 0001 	mvn.w	r0, #1
		ret = i;
		break;
	}

	return ret;
}
   2ec90:	4770      	bx	lr
   2ec92:	bf00      	nop
   2ec94:	200248f4 	.word	0x200248f4

0002ec98 <time_post_write_cb>:

static int time_post_write_cb(u16_t obj_inst_id,
			      u16_t res_id, u16_t res_inst_id,
			      u8_t *data, u16_t data_len,
			      bool last_block, size_t total_size)
{
   2ec98:	b508      	push	{r3, lr}
	int i = get_switch_index(obj_inst_id);
   2ec9a:	f7ff ffe5 	bl	2ec68 <get_switch_index>

	if (i < 0) {
   2ec9e:	2800      	cmp	r0, #0
   2eca0:	db08      	blt.n	2ecb4 <time_post_write_cb+0x1c>
		return i;
	}

	switch_data[i].trigger_offset = 0U;
   2eca2:	2228      	movs	r2, #40	; 0x28
   2eca4:	4b04      	ldr	r3, [pc, #16]	; (2ecb8 <time_post_write_cb+0x20>)
   2eca6:	fb02 3000 	mla	r0, r2, r0, r3
   2ecaa:	2200      	movs	r2, #0
   2ecac:	2300      	movs	r3, #0
   2ecae:	e9c0 2300 	strd	r2, r3, [r0]
	return 0;
   2ecb2:	2000      	movs	r0, #0
}
   2ecb4:	bd08      	pop	{r3, pc}
   2ecb6:	bf00      	nop
   2ecb8:	20020d38 	.word	0x20020d38

0002ecbc <ipso_switch_init>:

	return &inst[avail];
}

static int ipso_switch_init(struct device *dev)
{
   2ecbc:	b508      	push	{r3, lr}
	onoff_switch.obj_id = IPSO_OBJECT_ONOFF_SWITCH_ID;
	onoff_switch.fields = fields;
   2ecbe:	4806      	ldr	r0, [pc, #24]	; (2ecd8 <ipso_switch_init+0x1c>)
   2ecc0:	4b06      	ldr	r3, [pc, #24]	; (2ecdc <ipso_switch_init+0x20>)
   2ecc2:	6043      	str	r3, [r0, #4]
	onoff_switch.obj_id = IPSO_OBJECT_ONOFF_SWITCH_ID;
   2ecc4:	4b06      	ldr	r3, [pc, #24]	; (2ece0 <ipso_switch_init+0x24>)
   2ecc6:	6183      	str	r3, [r0, #24]
	onoff_switch.field_count = ARRAY_SIZE(fields);
	onoff_switch.max_instance_count = ARRAY_SIZE(inst);
   2ecc8:	2302      	movs	r3, #2
   2ecca:	83c3      	strh	r3, [r0, #30]
	onoff_switch.create_cb = switch_create;
   2eccc:	4b05      	ldr	r3, [pc, #20]	; (2ece4 <ipso_switch_init+0x28>)
   2ecce:	6083      	str	r3, [r0, #8]
	lwm2m_register_obj(&onoff_switch);
   2ecd0:	f7f9 fc24 	bl	2851c <lwm2m_register_obj>

	return 0;
}
   2ecd4:	2000      	movs	r0, #0
   2ecd6:	bd08      	pop	{r3, pc}
   2ecd8:	20024914 	.word	0x20024914
   2ecdc:	20032840 	.word	0x20032840
   2ece0:	00060d0e 	.word	0x00060d0e
   2ece4:	0002ed41 	.word	0x0002ed41

0002ece8 <off_time_read_cb>:
{
   2ece8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   2ecec:	4699      	mov	r9, r3
	int i = get_switch_index(obj_inst_id);
   2ecee:	f7ff ffbb 	bl	2ec68 <get_switch_index>
	if (i < 0) {
   2ecf2:	1e04      	subs	r4, r0, #0
   2ecf4:	db1f      	blt.n	2ed36 <off_time_read_cb+0x4e>
	if (!switch_data[i].state) {
   2ecf6:	2528      	movs	r5, #40	; 0x28
   2ecf8:	4810      	ldr	r0, [pc, #64]	; (2ed3c <off_time_read_cb+0x54>)
   2ecfa:	fb05 0504 	mla	r5, r5, r4, r0
   2ecfe:	f895 3023 	ldrb.w	r3, [r5, #35]	; 0x23
   2ed02:	4680      	mov	r8, r0
   2ed04:	b973      	cbnz	r3, 2ed24 <off_time_read_cb+0x3c>
   2ed06:	f015 ffdc 	bl	44cc2 <z_impl_k_uptime_get>
			(k_uptime_get() - switch_data[i].trigger_offset) / 1000;
   2ed0a:	e9d5 6700 	ldrd	r6, r7, [r5]
   2ed0e:	1b80      	subs	r0, r0, r6
   2ed10:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   2ed14:	f04f 0300 	mov.w	r3, #0
   2ed18:	eb61 0107 	sbc.w	r1, r1, r7
   2ed1c:	f7ee f85e 	bl	1cddc <__aeabi_uldivmod>
		switch_data[i].off_time_sec =
   2ed20:	e9c5 0104 	strd	r0, r1, [r5, #16]
	return &switch_data[i].off_time_sec;
   2ed24:	2028      	movs	r0, #40	; 0x28
	*data_len = sizeof(switch_data[i].off_time_sec);
   2ed26:	2308      	movs	r3, #8
	return &switch_data[i].off_time_sec;
   2ed28:	fb00 8004 	mla	r0, r0, r4, r8
	*data_len = sizeof(switch_data[i].off_time_sec);
   2ed2c:	f8c9 3000 	str.w	r3, [r9]
	return &switch_data[i].off_time_sec;
   2ed30:	3010      	adds	r0, #16
}
   2ed32:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		return NULL;
   2ed36:	2000      	movs	r0, #0
   2ed38:	e7fb      	b.n	2ed32 <off_time_read_cb+0x4a>
   2ed3a:	bf00      	nop
   2ed3c:	20020d38 	.word	0x20020d38

0002ed40 <switch_create>:
{
   2ed40:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
		if (inst[index].obj && inst[index].obj_inst_id == obj_inst_id) {
   2ed44:	4e74      	ldr	r6, [pc, #464]	; (2ef18 <switch_create+0x1d8>)
{
   2ed46:	4605      	mov	r5, r0
		if (inst[index].obj && inst[index].obj_inst_id == obj_inst_id) {
   2ed48:	6874      	ldr	r4, [r6, #4]
   2ed4a:	b12c      	cbz	r4, 2ed58 <switch_create+0x18>
   2ed4c:	89b3      	ldrh	r3, [r6, #12]
   2ed4e:	4283      	cmp	r3, r0
   2ed50:	f000 80b5 	beq.w	2eebe <switch_create+0x17e>
	int index, avail = -1, i = 0, j = 0;
   2ed54:	f04f 34ff 	mov.w	r4, #4294967295
		if (inst[index].obj && inst[index].obj_inst_id == obj_inst_id) {
   2ed58:	6973      	ldr	r3, [r6, #20]
   2ed5a:	2b00      	cmp	r3, #0
   2ed5c:	f000 80d9 	beq.w	2ef12 <switch_create+0x1d2>
   2ed60:	8bb3      	ldrh	r3, [r6, #28]
   2ed62:	42ab      	cmp	r3, r5
   2ed64:	f000 80ab 	beq.w	2eebe <switch_create+0x17e>
		if (avail < 0 && !inst[index].obj) {
   2ed68:	2c00      	cmp	r4, #0
   2ed6a:	f040 80bf 	bne.w	2eeec <switch_create+0x1ac>
	(void)memset(&switch_data[avail], 0, sizeof(switch_data[avail]));
   2ed6e:	2228      	movs	r2, #40	; 0x28
   2ed70:	fb02 f804 	mul.w	r8, r2, r4
   2ed74:	f8df a1c0 	ldr.w	sl, [pc, #448]	; 2ef38 <switch_create+0x1f8>
   2ed78:	2100      	movs	r1, #0
   2ed7a:	eb0a 0308 	add.w	r3, sl, r8
   2ed7e:	4618      	mov	r0, r3
   2ed80:	f016 f8a0 	bl	44ec4 <memset>
	(void)memset(res[avail], 0,
   2ed84:	2290      	movs	r2, #144	; 0x90
   2ed86:	f8df 91b4 	ldr.w	r9, [pc, #436]	; 2ef3c <switch_create+0x1fc>
	switch_data[avail].obj_inst_id = obj_inst_id;
   2ed8a:	8405      	strh	r5, [r0, #32]
	(void)memset(res[avail], 0,
   2ed8c:	fb02 9704 	mla	r7, r2, r4, r9
   2ed90:	2100      	movs	r1, #0
   2ed92:	4638      	mov	r0, r7
   2ed94:	f016 f896 	bl	44ec4 <memset>
	init_res_instance(res_inst[avail], ARRAY_SIZE(res_inst[avail]));
   2ed98:	2248      	movs	r2, #72	; 0x48
   2ed9a:	4d60      	ldr	r5, [pc, #384]	; (2ef1c <switch_create+0x1dc>)
   2ed9c:	2100      	movs	r1, #0
   2ed9e:	fb02 5504 	mla	r5, r2, r4, r5
   2eda2:	4628      	mov	r0, r5
   2eda4:	f016 f88e 	bl	44ec4 <memset>
   2eda8:	462b      	mov	r3, r5
   2edaa:	46d4      	mov	ip, sl
		ri[i].res_inst_id = RES_INSTANCE_NOT_CREATED;
   2edac:	f64f 71ff 	movw	r1, #65535	; 0xffff
   2edb0:	f105 0248 	add.w	r2, r5, #72	; 0x48
   2edb4:	80d9      	strh	r1, [r3, #6]
   2edb6:	330c      	adds	r3, #12
	for (i = 0; i < ri_len; i++) {
   2edb8:	429a      	cmp	r2, r3
   2edba:	d1fb      	bne.n	2edb4 <switch_create+0x74>
	INIT_OBJ_RES(SWITCH_DIGITAL_STATE_ID, res[avail], i,
   2edbc:	2190      	movs	r1, #144	; 0x90
   2edbe:	f241 527c 	movw	r2, #5500	; 0x157c
   2edc2:	4361      	muls	r1, r4
   2edc4:	f04f 0e48 	mov.w	lr, #72	; 0x48
   2edc8:	eb09 0301 	add.w	r3, r9, r1
   2edcc:	829a      	strh	r2, [r3, #20]
   2edce:	2200      	movs	r2, #0
   2edd0:	fb0e fe04 	mul.w	lr, lr, r4
   2edd4:	f849 2001 	str.w	r2, [r9, r1]
   2edd8:	f8df a140 	ldr.w	sl, [pc, #320]	; 2ef1c <switch_create+0x1dc>
   2eddc:	4950      	ldr	r1, [pc, #320]	; (2ef20 <switch_create+0x1e0>)
   2edde:	f108 0923 	add.w	r9, r8, #35	; 0x23
   2ede2:	44e1      	add	r9, ip
   2ede4:	2001      	movs	r0, #1
   2ede6:	e9c3 1202 	strd	r1, r2, [r3, #8]
   2edea:	f84a 900e 	str.w	r9, [sl, lr]
   2edee:	eb0a 010e 	add.w	r1, sl, lr
	INIT_OBJ_RES_DATA(SWITCH_DIGITAL_INPUT_COUNTER_ID, res[avail], i,
   2edf2:	f108 0818 	add.w	r8, r8, #24
   2edf6:	f241 5e7d 	movw	lr, #5501	; 0x157d
   2edfa:	44e0      	add	r8, ip
   2edfc:	f04f 0c08 	mov.w	ip, #8
	INIT_OBJ_RES(SWITCH_DIGITAL_STATE_ID, res[avail], i,
   2ee00:	611d      	str	r5, [r3, #16]
   2ee02:	7598      	strb	r0, [r3, #22]
   2ee04:	605a      	str	r2, [r3, #4]
   2ee06:	6048      	str	r0, [r1, #4]
	INIT_OBJ_RES_DATA(SWITCH_DIGITAL_INPUT_COUNTER_ID, res[avail], i,
   2ee08:	f8a3 e02c 	strh.w	lr, [r3, #44]	; 0x2c
   2ee0c:	f105 0e0c 	add.w	lr, r5, #12
   2ee10:	f8c3 e028 	str.w	lr, [r3, #40]	; 0x28
   2ee14:	f883 002e 	strb.w	r0, [r3, #46]	; 0x2e
   2ee18:	e9c3 2206 	strd	r2, r2, [r3, #24]
   2ee1c:	e9c3 2208 	strd	r2, r2, [r3, #32]
   2ee20:	f8c1 c010 	str.w	ip, [r1, #16]
	INIT_OBJ_RES_OPT(SWITCH_ON_TIME_ID, res[avail], i,
   2ee24:	f241 6cdc 	movw	ip, #5852	; 0x16dc
	INIT_OBJ_RES_OPT(SWITCH_OFF_TIME_ID, res[avail], i,
   2ee28:	f241 6ede 	movw	lr, #5854	; 0x16de
	INIT_OBJ_RES_OPT(SWITCH_ON_TIME_ID, res[avail], i,
   2ee2c:	f8a3 c044 	strh.w	ip, [r3, #68]	; 0x44
   2ee30:	f105 0c18 	add.w	ip, r5, #24
   2ee34:	f8c3 c040 	str.w	ip, [r3, #64]	; 0x40
   2ee38:	f8df c104 	ldr.w	ip, [pc, #260]	; 2ef40 <switch_create+0x200>
   2ee3c:	f883 0046 	strb.w	r0, [r3, #70]	; 0x46
   2ee40:	e9c3 c20c 	strd	ip, r2, [r3, #48]	; 0x30
   2ee44:	f8df c0fc 	ldr.w	ip, [pc, #252]	; 2ef44 <switch_create+0x204>
	INIT_OBJ_RES_DATA(SWITCH_DIGITAL_INPUT_COUNTER_ID, res[avail], i,
   2ee48:	f8c1 800c 	str.w	r8, [r1, #12]
	INIT_OBJ_RES_OPT(SWITCH_ON_TIME_ID, res[avail], i,
   2ee4c:	e9c3 c20e 	strd	ip, r2, [r3, #56]	; 0x38
   2ee50:	e9c1 2206 	strd	r2, r2, [r1, #24]
	INIT_OBJ_RES_OPT(SWITCH_OFF_TIME_ID, res[avail], i,
   2ee54:	f8a3 e05c 	strh.w	lr, [r3, #92]	; 0x5c
   2ee58:	f105 0e24 	add.w	lr, r5, #36	; 0x24
   2ee5c:	f8c3 e058 	str.w	lr, [r3, #88]	; 0x58
   2ee60:	f8df e0e4 	ldr.w	lr, [pc, #228]	; 2ef48 <switch_create+0x208>
   2ee64:	f883 005e 	strb.w	r0, [r3, #94]	; 0x5e
   2ee68:	e9c3 e212 	strd	lr, r2, [r3, #72]	; 0x48
   2ee6c:	e9c3 c214 	strd	ip, r2, [r3, #80]	; 0x50
	INIT_OBJ_RES_OPTDATA(SWITCH_APPLICATION_TYPE_ID, res[avail], i,
   2ee70:	f241 6c76 	movw	ip, #5750	; 0x1676
	INIT_OBJ_RES_OPT(SWITCH_OFF_TIME_ID, res[avail], i,
   2ee74:	e9c1 2209 	strd	r2, r2, [r1, #36]	; 0x24
	INIT_OBJ_RES_OPTDATA(SWITCH_APPLICATION_TYPE_ID, res[avail], i,
   2ee78:	f8a3 c074 	strh.w	ip, [r3, #116]	; 0x74
   2ee7c:	f105 0c30 	add.w	ip, r5, #48	; 0x30
   2ee80:	f8c3 c070 	str.w	ip, [r3, #112]	; 0x70
	INIT_OBJ_RES_OPTDATA(SWITCH_TIMESTAMP_ID, res[avail], i,
   2ee84:	f241 5c8e 	movw	ip, #5518	; 0x158e
   2ee88:	353c      	adds	r5, #60	; 0x3c
	INIT_OBJ_RES_OPTDATA(SWITCH_APPLICATION_TYPE_ID, res[avail], i,
   2ee8a:	f883 0076 	strb.w	r0, [r3, #118]	; 0x76
   2ee8e:	e9c3 2218 	strd	r2, r2, [r3, #96]	; 0x60
   2ee92:	e9c3 221a 	strd	r2, r2, [r3, #104]	; 0x68
   2ee96:	e9c1 220c 	strd	r2, r2, [r1, #48]	; 0x30
	INIT_OBJ_RES_OPTDATA(SWITCH_TIMESTAMP_ID, res[avail], i,
   2ee9a:	f883 008e 	strb.w	r0, [r3, #142]	; 0x8e
   2ee9e:	f8a3 c08c 	strh.w	ip, [r3, #140]	; 0x8c
   2eea2:	f8c3 5088 	str.w	r5, [r3, #136]	; 0x88
   2eea6:	e9c3 221e 	strd	r2, r2, [r3, #120]	; 0x78
   2eeaa:	e9c3 2220 	strd	r2, r2, [r3, #128]	; 0x80
	inst[avail].resource_count = i;
   2eeae:	2306      	movs	r3, #6
	inst[avail].resources = res[avail];
   2eeb0:	eb06 1004 	add.w	r0, r6, r4, lsl #4
	INIT_OBJ_RES_OPTDATA(SWITCH_TIMESTAMP_ID, res[avail], i,
   2eeb4:	e9c1 220f 	strd	r2, r2, [r1, #60]	; 0x3c
	inst[avail].resources = res[avail];
   2eeb8:	6087      	str	r7, [r0, #8]
	inst[avail].resource_count = i;
   2eeba:	81c3      	strh	r3, [r0, #14]
	return &inst[avail];
   2eebc:	e014      	b.n	2eee8 <switch_create+0x1a8>
			LOG_ERR("Can not create instance - "
   2eebe:	4b19      	ldr	r3, [pc, #100]	; (2ef24 <switch_create+0x1e4>)
   2eec0:	6818      	ldr	r0, [r3, #0]
   2eec2:	f010 0007 	ands.w	r0, r0, #7
   2eec6:	d00f      	beq.n	2eee8 <switch_create+0x1a8>
   2eec8:	2301      	movs	r3, #1
   2eeca:	f04f 0200 	mov.w	r2, #0
   2eece:	4916      	ldr	r1, [pc, #88]	; (2ef28 <switch_create+0x1e8>)
   2eed0:	f363 0207 	bfi	r2, r3, #0, #8
   2eed4:	4b15      	ldr	r3, [pc, #84]	; (2ef2c <switch_create+0x1ec>)
   2eed6:	4816      	ldr	r0, [pc, #88]	; (2ef30 <switch_create+0x1f0>)
   2eed8:	1a5b      	subs	r3, r3, r1
   2eeda:	4629      	mov	r1, r5
   2eedc:	08db      	lsrs	r3, r3, #3
   2eede:	f363 128f 	bfi	r2, r3, #6, #10
		LOG_ERR("Can not create instance - no more room: %u",
   2eee2:	f011 fdbb 	bl	40a5c <log_1>
		return NULL;
   2eee6:	2000      	movs	r0, #0
}
   2eee8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		LOG_ERR("Can not create instance - no more room: %u",
   2eeec:	4b0d      	ldr	r3, [pc, #52]	; (2ef24 <switch_create+0x1e4>)
   2eeee:	6818      	ldr	r0, [r3, #0]
   2eef0:	f010 0007 	ands.w	r0, r0, #7
   2eef4:	d0f8      	beq.n	2eee8 <switch_create+0x1a8>
   2eef6:	2301      	movs	r3, #1
   2eef8:	f04f 0200 	mov.w	r2, #0
   2eefc:	490a      	ldr	r1, [pc, #40]	; (2ef28 <switch_create+0x1e8>)
   2eefe:	f363 0207 	bfi	r2, r3, #0, #8
   2ef02:	4b0a      	ldr	r3, [pc, #40]	; (2ef2c <switch_create+0x1ec>)
   2ef04:	480b      	ldr	r0, [pc, #44]	; (2ef34 <switch_create+0x1f4>)
   2ef06:	1a5b      	subs	r3, r3, r1
   2ef08:	08db      	lsrs	r3, r3, #3
   2ef0a:	f363 128f 	bfi	r2, r3, #6, #10
   2ef0e:	4629      	mov	r1, r5
   2ef10:	e7e7      	b.n	2eee2 <switch_create+0x1a2>
		if (avail < 0 && !inst[index].obj) {
   2ef12:	4264      	negs	r4, r4
   2ef14:	e72b      	b.n	2ed6e <switch_create+0x2e>
   2ef16:	bf00      	nop
   2ef18:	200248f4 	.word	0x200248f4
   2ef1c:	20024a54 	.word	0x20024a54
   2ef20:	0002ef4d 	.word	0x0002ef4d
   2ef24:	20032b04 	.word	0x20032b04
   2ef28:	00045f08 	.word	0x00045f08
   2ef2c:	00046008 	.word	0x00046008
   2ef30:	0004b8a4 	.word	0x0004b8a4
   2ef34:	0004b8d3 	.word	0x0004b8d3
   2ef38:	20020d38 	.word	0x20020d38
   2ef3c:	20024934 	.word	0x20024934
   2ef40:	0002efa1 	.word	0x0002efa1
   2ef44:	0002ec99 	.word	0x0002ec99
   2ef48:	0002ece9 	.word	0x0002ece9

0002ef4c <state_post_write_cb>:
{
   2ef4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	i = get_switch_index(obj_inst_id);
   2ef4e:	f7ff fe8b 	bl	2ec68 <get_switch_index>
	if (i < 0) {
   2ef52:	2800      	cmp	r0, #0
   2ef54:	db1e      	blt.n	2ef94 <state_post_write_cb+0x48>
	if (switch_data[i].state) {
   2ef56:	2328      	movs	r3, #40	; 0x28
   2ef58:	4c10      	ldr	r4, [pc, #64]	; (2ef9c <state_post_write_cb+0x50>)
   2ef5a:	2600      	movs	r6, #0
   2ef5c:	fb03 4300 	mla	r3, r3, r0, r4
   2ef60:	f893 5023 	ldrb.w	r5, [r3, #35]	; 0x23
   2ef64:	2700      	movs	r7, #0
   2ef66:	b1b5      	cbz	r5, 2ef96 <state_post_write_cb+0x4a>
		if (!switch_data[i].last_state) {
   2ef68:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
		switch_data[i].off_time_sec = 0U;
   2ef6c:	e9c3 6704 	strd	r6, r7, [r3, #16]
		if (!switch_data[i].last_state) {
   2ef70:	b932      	cbnz	r2, 2ef80 <state_post_write_cb+0x34>
			switch_data[i].counter++;
   2ef72:	e9d3 2106 	ldrd	r2, r1, [r3, #24]
   2ef76:	3201      	adds	r2, #1
   2ef78:	f141 0100 	adc.w	r1, r1, #0
   2ef7c:	e9c3 2106 	strd	r2, r1, [r3, #24]
	switch_data[i].last_state = switch_data[i].state;
   2ef80:	2328      	movs	r3, #40	; 0x28
   2ef82:	fb03 4400 	mla	r4, r3, r0, r4
   2ef86:	f884 5022 	strb.w	r5, [r4, #34]	; 0x22
   2ef8a:	f015 fe9a 	bl	44cc2 <z_impl_k_uptime_get>
	switch_data[i].trigger_offset = k_uptime_get();
   2ef8e:	e9c4 0100 	strd	r0, r1, [r4]
	return 0;
   2ef92:	2000      	movs	r0, #0
}
   2ef94:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		switch_data[i].on_time_sec = 0U;
   2ef96:	e9c3 6702 	strd	r6, r7, [r3, #8]
   2ef9a:	e7f1      	b.n	2ef80 <state_post_write_cb+0x34>
   2ef9c:	20020d38 	.word	0x20020d38

0002efa0 <on_time_read_cb>:
{
   2efa0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   2efa4:	4699      	mov	r9, r3
	int i = get_switch_index(obj_inst_id);
   2efa6:	f7ff fe5f 	bl	2ec68 <get_switch_index>
	if (i < 0) {
   2efaa:	1e04      	subs	r4, r0, #0
   2efac:	db1f      	blt.n	2efee <on_time_read_cb+0x4e>
	if (switch_data[i].state) {
   2efae:	2528      	movs	r5, #40	; 0x28
   2efb0:	4810      	ldr	r0, [pc, #64]	; (2eff4 <on_time_read_cb+0x54>)
   2efb2:	fb05 0504 	mla	r5, r5, r4, r0
   2efb6:	f895 3023 	ldrb.w	r3, [r5, #35]	; 0x23
   2efba:	4680      	mov	r8, r0
   2efbc:	b173      	cbz	r3, 2efdc <on_time_read_cb+0x3c>
   2efbe:	f015 fe80 	bl	44cc2 <z_impl_k_uptime_get>
			(k_uptime_get() - switch_data[i].trigger_offset) / 1000;
   2efc2:	e9d5 6700 	ldrd	r6, r7, [r5]
   2efc6:	1b80      	subs	r0, r0, r6
   2efc8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   2efcc:	f04f 0300 	mov.w	r3, #0
   2efd0:	eb61 0107 	sbc.w	r1, r1, r7
   2efd4:	f7ed ff02 	bl	1cddc <__aeabi_uldivmod>
		switch_data[i].on_time_sec =
   2efd8:	e9c5 0102 	strd	r0, r1, [r5, #8]
	return &switch_data[i].on_time_sec;
   2efdc:	2028      	movs	r0, #40	; 0x28
	*data_len = sizeof(switch_data[i].on_time_sec);
   2efde:	2308      	movs	r3, #8
	return &switch_data[i].on_time_sec;
   2efe0:	fb00 8004 	mla	r0, r0, r4, r8
	*data_len = sizeof(switch_data[i].on_time_sec);
   2efe4:	f8c9 3000 	str.w	r3, [r9]
	return &switch_data[i].on_time_sec;
   2efe8:	4418      	add	r0, r3
}
   2efea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		return NULL;
   2efee:	2000      	movs	r0, #0
   2eff0:	e7fb      	b.n	2efea <on_time_read_cb+0x4a>
   2eff2:	bf00      	nop
   2eff4:	20020d38 	.word	0x20020d38

0002eff8 <state_post_write_cb>:
static int get_button_index(u16_t obj_inst_id)
{
	int i, ret = -ENOENT;

	for (i = 0; i < ARRAY_SIZE(inst); i++) {
		if (!inst[i].obj || inst[i].obj_inst_id != obj_inst_id) {
   2eff8:	4b12      	ldr	r3, [pc, #72]	; (2f044 <state_post_write_cb+0x4c>)

static int state_post_write_cb(u16_t obj_inst_id,
			       u16_t res_id, u16_t res_inst_id,
			       u8_t *data, u16_t data_len,
			       bool last_block, size_t total_size)
{
   2effa:	b530      	push	{r4, r5, lr}
		if (!inst[i].obj || inst[i].obj_inst_id != obj_inst_id) {
   2effc:	6859      	ldr	r1, [r3, #4]
   2effe:	461a      	mov	r2, r3
   2f000:	b111      	cbz	r1, 2f008 <state_post_write_cb+0x10>
   2f002:	899b      	ldrh	r3, [r3, #12]
   2f004:	4283      	cmp	r3, r0
   2f006:	d017      	beq.n	2f038 <state_post_write_cb+0x40>
   2f008:	6953      	ldr	r3, [r2, #20]
   2f00a:	b1bb      	cbz	r3, 2f03c <state_post_write_cb+0x44>
   2f00c:	8b93      	ldrh	r3, [r2, #28]
   2f00e:	4283      	cmp	r3, r0
   2f010:	d114      	bne.n	2f03c <state_post_write_cb+0x44>
	for (i = 0; i < ARRAY_SIZE(inst); i++) {
   2f012:	2101      	movs	r1, #1
	i = get_button_index(obj_inst_id);
	if (i < 0) {
		return i;
	}

	if (button_data[i].state && !button_data[i].last_state) {
   2f014:	4b0c      	ldr	r3, [pc, #48]	; (2f048 <state_post_write_cb+0x50>)
   2f016:	0109      	lsls	r1, r1, #4
   2f018:	185a      	adds	r2, r3, r1
   2f01a:	7ad5      	ldrb	r5, [r2, #11]
   2f01c:	b145      	cbz	r5, 2f030 <state_post_write_cb+0x38>
   2f01e:	7a90      	ldrb	r0, [r2, #10]
   2f020:	b930      	cbnz	r0, 2f030 <state_post_write_cb+0x38>
		/* off to on transition */
		button_data[i].counter++;
   2f022:	e9d2 0400 	ldrd	r0, r4, [r2]
   2f026:	3001      	adds	r0, #1
   2f028:	f144 0400 	adc.w	r4, r4, #0
   2f02c:	e9c2 0400 	strd	r0, r4, [r2]
	}

	button_data[i].last_state = button_data[i].state;
	return 0;
   2f030:	2000      	movs	r0, #0
	button_data[i].last_state = button_data[i].state;
   2f032:	440b      	add	r3, r1
   2f034:	729d      	strb	r5, [r3, #10]
}
   2f036:	bd30      	pop	{r4, r5, pc}
	for (i = 0; i < ARRAY_SIZE(inst); i++) {
   2f038:	2100      	movs	r1, #0
   2f03a:	e7eb      	b.n	2f014 <state_post_write_cb+0x1c>
	int i, ret = -ENOENT;
   2f03c:	f06f 0001 	mvn.w	r0, #1
   2f040:	e7f9      	b.n	2f036 <state_post_write_cb+0x3e>
   2f042:	bf00      	nop
   2f044:	20024ae4 	.word	0x20024ae4
   2f048:	20020d88 	.word	0x20020d88

0002f04c <ipso_button_init>:

	return &inst[avail];
}

static int ipso_button_init(struct device *dev)
{
   2f04c:	b508      	push	{r3, lr}
	onoff_switch.obj_id = IPSO_OBJECT_PUSH_BUTTON_ID;
	onoff_switch.fields = fields;
   2f04e:	4806      	ldr	r0, [pc, #24]	; (2f068 <ipso_button_init+0x1c>)
   2f050:	4b06      	ldr	r3, [pc, #24]	; (2f06c <ipso_button_init+0x20>)
   2f052:	6043      	str	r3, [r0, #4]
	onoff_switch.obj_id = IPSO_OBJECT_PUSH_BUTTON_ID;
   2f054:	4b06      	ldr	r3, [pc, #24]	; (2f070 <ipso_button_init+0x24>)
   2f056:	6183      	str	r3, [r0, #24]
	onoff_switch.field_count = ARRAY_SIZE(fields);
	onoff_switch.max_instance_count = ARRAY_SIZE(inst);
   2f058:	2302      	movs	r3, #2
   2f05a:	83c3      	strh	r3, [r0, #30]
	onoff_switch.create_cb = button_create;
   2f05c:	4b05      	ldr	r3, [pc, #20]	; (2f074 <ipso_button_init+0x28>)
   2f05e:	6083      	str	r3, [r0, #8]
	lwm2m_register_obj(&onoff_switch);
   2f060:	f7f9 fa5c 	bl	2851c <lwm2m_register_obj>

	return 0;
}
   2f064:	2000      	movs	r0, #0
   2f066:	bd08      	pop	{r3, pc}
   2f068:	20024b04 	.word	0x20024b04
   2f06c:	20032858 	.word	0x20032858
   2f070:	00040d13 	.word	0x00040d13
   2f074:	0002f079 	.word	0x0002f079

0002f078 <button_create>:
{
   2f078:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
		if (inst[index].obj && inst[index].obj_inst_id == obj_inst_id) {
   2f07c:	4e54      	ldr	r6, [pc, #336]	; (2f1d0 <button_create+0x158>)
{
   2f07e:	4604      	mov	r4, r0
		if (inst[index].obj && inst[index].obj_inst_id == obj_inst_id) {
   2f080:	6873      	ldr	r3, [r6, #4]
   2f082:	b123      	cbz	r3, 2f08e <button_create+0x16>
   2f084:	89b3      	ldrh	r3, [r6, #12]
   2f086:	4283      	cmp	r3, r0
   2f088:	d075      	beq.n	2f176 <button_create+0xfe>
	int index, avail = -1, i = 0, j = 0;
   2f08a:	f04f 33ff 	mov.w	r3, #4294967295
		if (inst[index].obj && inst[index].obj_inst_id == obj_inst_id) {
   2f08e:	6972      	ldr	r2, [r6, #20]
   2f090:	2a00      	cmp	r2, #0
   2f092:	f000 809a 	beq.w	2f1ca <button_create+0x152>
   2f096:	8bb2      	ldrh	r2, [r6, #28]
   2f098:	42a2      	cmp	r2, r4
   2f09a:	d06c      	beq.n	2f176 <button_create+0xfe>
		if (avail < 0 && !inst[index].obj) {
   2f09c:	2b00      	cmp	r3, #0
   2f09e:	f040 8081 	bne.w	2f1a4 <button_create+0x12c>
   2f0a2:	f04f 0900 	mov.w	r9, #0
	(void)memset(&button_data[avail], 0, sizeof(button_data[avail]));
   2f0a6:	4f4b      	ldr	r7, [pc, #300]	; (2f1d4 <button_create+0x15c>)
   2f0a8:	ea4f 1509 	mov.w	r5, r9, lsl #4
   2f0ac:	eb07 0805 	add.w	r8, r7, r5
   2f0b0:	2210      	movs	r2, #16
   2f0b2:	2100      	movs	r1, #0
   2f0b4:	4640      	mov	r0, r8
   2f0b6:	f015 ff05 	bl	44ec4 <memset>
	(void)memset(res[avail], 0,
   2f0ba:	2260      	movs	r2, #96	; 0x60
   2f0bc:	fb02 fa09 	mul.w	sl, r2, r9
   2f0c0:	f8df b130 	ldr.w	fp, [pc, #304]	; 2f1f4 <button_create+0x17c>
	button_data[avail].obj_inst_id = obj_inst_id;
   2f0c4:	f8a8 4008 	strh.w	r4, [r8, #8]
	(void)memset(res[avail], 0,
   2f0c8:	eb0b 040a 	add.w	r4, fp, sl
   2f0cc:	2100      	movs	r1, #0
   2f0ce:	4620      	mov	r0, r4
   2f0d0:	f015 fef8 	bl	44ec4 <memset>
	init_res_instance(res_inst[avail], ARRAY_SIZE(res_inst[avail]));
   2f0d4:	2230      	movs	r2, #48	; 0x30
   2f0d6:	fb02 f909 	mul.w	r9, r2, r9
   2f0da:	4b3f      	ldr	r3, [pc, #252]	; (2f1d8 <button_create+0x160>)
   2f0dc:	2100      	movs	r1, #0
   2f0de:	444b      	add	r3, r9
   2f0e0:	4618      	mov	r0, r3
   2f0e2:	f015 feef 	bl	44ec4 <memset>
	INIT_OBJ_RES(BUTTON_DIGITAL_STATE_ID, res[avail], i,
   2f0e6:	f241 527c 	movw	r2, #5500	; 0x157c
   2f0ea:	82a2      	strh	r2, [r4, #20]
   2f0ec:	2200      	movs	r2, #0
   2f0ee:	4603      	mov	r3, r0
   2f0f0:	6120      	str	r0, [r4, #16]
   2f0f2:	483a      	ldr	r0, [pc, #232]	; (2f1dc <button_create+0x164>)
   2f0f4:	2101      	movs	r1, #1
   2f0f6:	e9c4 0202 	strd	r0, r2, [r4, #8]
   2f0fa:	f105 000b 	add.w	r0, r5, #11
   2f0fe:	4407      	add	r7, r0
   2f100:	4835      	ldr	r0, [pc, #212]	; (2f1d8 <button_create+0x160>)
   2f102:	f84b 200a 	str.w	r2, [fp, sl]
   2f106:	f840 7009 	str.w	r7, [r0, r9]
	INIT_OBJ_RES_DATA(BUTTON_DIGITAL_INPUT_COUNTER_ID, res[avail], i,
   2f10a:	f241 507d 	movw	r0, #5501	; 0x157d
	INIT_OBJ_RES(BUTTON_DIGITAL_STATE_ID, res[avail], i,
   2f10e:	75a1      	strb	r1, [r4, #22]
   2f110:	6062      	str	r2, [r4, #4]
   2f112:	6059      	str	r1, [r3, #4]
	INIT_OBJ_RES_DATA(BUTTON_DIGITAL_INPUT_COUNTER_ID, res[avail], i,
   2f114:	85a0      	strh	r0, [r4, #44]	; 0x2c
		ri[i].res_inst_id = RES_INSTANCE_NOT_CREATED;
   2f116:	f103 000c 	add.w	r0, r3, #12
   2f11a:	62a0      	str	r0, [r4, #40]	; 0x28
   2f11c:	2708      	movs	r7, #8
	INIT_OBJ_RES_OPTDATA(BUTTON_APPLICATION_TYPE_ID, res[avail], i,
   2f11e:	f241 6076 	movw	r0, #5750	; 0x1676
	INIT_OBJ_RES_DATA(BUTTON_DIGITAL_INPUT_COUNTER_ID, res[avail], i,
   2f122:	f884 102e 	strb.w	r1, [r4, #46]	; 0x2e
   2f126:	e9c4 2206 	strd	r2, r2, [r4, #24]
   2f12a:	e9c4 2208 	strd	r2, r2, [r4, #32]
   2f12e:	611f      	str	r7, [r3, #16]
	INIT_OBJ_RES_OPTDATA(BUTTON_APPLICATION_TYPE_ID, res[avail], i,
   2f130:	f8a4 0044 	strh.w	r0, [r4, #68]	; 0x44
   2f134:	f103 0018 	add.w	r0, r3, #24
   2f138:	6420      	str	r0, [r4, #64]	; 0x40
	INIT_OBJ_RES_OPTDATA(BUTTON_TIMESTAMP_ID, res[avail], i,
   2f13a:	f241 508e 	movw	r0, #5518	; 0x158e
	INIT_OBJ_RES_OPTDATA(BUTTON_APPLICATION_TYPE_ID, res[avail], i,
   2f13e:	f884 1046 	strb.w	r1, [r4, #70]	; 0x46
   2f142:	e9c4 220c 	strd	r2, r2, [r4, #48]	; 0x30
   2f146:	e9c4 220e 	strd	r2, r2, [r4, #56]	; 0x38
   2f14a:	e9c3 2206 	strd	r2, r2, [r3, #24]
	INIT_OBJ_RES_OPTDATA(BUTTON_TIMESTAMP_ID, res[avail], i,
   2f14e:	f8a4 005c 	strh.w	r0, [r4, #92]	; 0x5c
   2f152:	f103 0024 	add.w	r0, r3, #36	; 0x24
	INIT_OBJ_RES_DATA(BUTTON_DIGITAL_INPUT_COUNTER_ID, res[avail], i,
   2f156:	f8c3 800c 	str.w	r8, [r3, #12]
	INIT_OBJ_RES_OPTDATA(BUTTON_TIMESTAMP_ID, res[avail], i,
   2f15a:	65a0      	str	r0, [r4, #88]	; 0x58
   2f15c:	f884 105e 	strb.w	r1, [r4, #94]	; 0x5e
   2f160:	e9c4 2212 	strd	r2, r2, [r4, #72]	; 0x48
   2f164:	e9c4 2214 	strd	r2, r2, [r4, #80]	; 0x50
   2f168:	e9c3 2209 	strd	r2, r2, [r3, #36]	; 0x24
	inst[avail].resource_count = i;
   2f16c:	2304      	movs	r3, #4
	inst[avail].resources = res[avail];
   2f16e:	1970      	adds	r0, r6, r5
   2f170:	6084      	str	r4, [r0, #8]
	inst[avail].resource_count = i;
   2f172:	81c3      	strh	r3, [r0, #14]
	return &inst[avail];
   2f174:	e014      	b.n	2f1a0 <button_create+0x128>
			LOG_ERR("Can not create instance - "
   2f176:	4b1a      	ldr	r3, [pc, #104]	; (2f1e0 <button_create+0x168>)
   2f178:	6818      	ldr	r0, [r3, #0]
   2f17a:	f010 0007 	ands.w	r0, r0, #7
   2f17e:	d00f      	beq.n	2f1a0 <button_create+0x128>
   2f180:	2301      	movs	r3, #1
   2f182:	f04f 0200 	mov.w	r2, #0
   2f186:	4917      	ldr	r1, [pc, #92]	; (2f1e4 <button_create+0x16c>)
   2f188:	f363 0207 	bfi	r2, r3, #0, #8
   2f18c:	4b16      	ldr	r3, [pc, #88]	; (2f1e8 <button_create+0x170>)
   2f18e:	4817      	ldr	r0, [pc, #92]	; (2f1ec <button_create+0x174>)
   2f190:	1a5b      	subs	r3, r3, r1
   2f192:	4621      	mov	r1, r4
   2f194:	08db      	lsrs	r3, r3, #3
   2f196:	f363 128f 	bfi	r2, r3, #6, #10
		LOG_ERR("Can not create instance - no more room: %u",
   2f19a:	f011 fc5f 	bl	40a5c <log_1>
		return NULL;
   2f19e:	2000      	movs	r0, #0
}
   2f1a0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		LOG_ERR("Can not create instance - no more room: %u",
   2f1a4:	4b0e      	ldr	r3, [pc, #56]	; (2f1e0 <button_create+0x168>)
   2f1a6:	6818      	ldr	r0, [r3, #0]
   2f1a8:	f010 0007 	ands.w	r0, r0, #7
   2f1ac:	d0f8      	beq.n	2f1a0 <button_create+0x128>
   2f1ae:	2301      	movs	r3, #1
   2f1b0:	f04f 0200 	mov.w	r2, #0
   2f1b4:	490b      	ldr	r1, [pc, #44]	; (2f1e4 <button_create+0x16c>)
   2f1b6:	f363 0207 	bfi	r2, r3, #0, #8
   2f1ba:	4b0b      	ldr	r3, [pc, #44]	; (2f1e8 <button_create+0x170>)
   2f1bc:	480c      	ldr	r0, [pc, #48]	; (2f1f0 <button_create+0x178>)
   2f1be:	1a5b      	subs	r3, r3, r1
   2f1c0:	08db      	lsrs	r3, r3, #3
   2f1c2:	f363 128f 	bfi	r2, r3, #6, #10
   2f1c6:	4621      	mov	r1, r4
   2f1c8:	e7e7      	b.n	2f19a <button_create+0x122>
		if (avail < 0 && !inst[index].obj) {
   2f1ca:	f1c3 0900 	rsb	r9, r3, #0
   2f1ce:	e76a      	b.n	2f0a6 <button_create+0x2e>
   2f1d0:	20024ae4 	.word	0x20024ae4
   2f1d4:	20020d88 	.word	0x20020d88
   2f1d8:	20024be4 	.word	0x20024be4
   2f1dc:	0002eff9 	.word	0x0002eff9
   2f1e0:	20032af8 	.word	0x20032af8
   2f1e4:	00045f08 	.word	0x00045f08
   2f1e8:	00045ff0 	.word	0x00045ff0
   2f1ec:	0004b8a4 	.word	0x0004b8a4
   2f1f0:	0004b8d3 	.word	0x0004b8d3
   2f1f4:	20024b24 	.word	0x20024b24

0002f1f8 <parse_url_char>:
 * assumed that the caller cares about (and can detect) the transition between
 * URL and non-URL states by looking for these.
 */
enum state parse_url_char(enum state s, const char ch)
{
	if (ch == ' ' || ch == '\r' || ch == '\n') {
   2f1f8:	f1a1 030a 	sub.w	r3, r1, #10
   2f1fc:	b2db      	uxtb	r3, r3
   2f1fe:	2b16      	cmp	r3, #22
   2f200:	d90a      	bls.n	2f218 <parse_url_char+0x20>
	if (ch == '\t' || ch == '\f') {
		return s_dead;
	}
#endif

	switch (s) {
   2f202:	3814      	subs	r0, #20
   2f204:	280b      	cmp	r0, #11
   2f206:	d80d      	bhi.n	2f224 <parse_url_char+0x2c>
   2f208:	e8df f000 	tbb	[pc, r0]
   2f20c:	2b261c0e 	.word	0x2b261c0e
   2f210:	54303232 	.word	0x54303232
   2f214:	89786767 	.word	0x89786767
	if (ch == ' ' || ch == '\r' || ch == '\n') {
   2f218:	4a5e      	ldr	r2, [pc, #376]	; (2f394 <parse_url_char+0x19c>)
   2f21a:	fa22 f303 	lsr.w	r3, r2, r3
   2f21e:	07da      	lsls	r2, r3, #31
   2f220:	f140 8098 	bpl.w	2f354 <parse_url_char+0x15c>
	}

	/* We should never fall out of the switch above unless there's
	 * an error
	 */
	return s_dead;
   2f224:	2001      	movs	r0, #1
}
   2f226:	4770      	bx	lr
		if (ch == '/' || ch == '*') {
   2f228:	292f      	cmp	r1, #47	; 0x2f
   2f22a:	f000 808d 	beq.w	2f348 <parse_url_char+0x150>
   2f22e:	292a      	cmp	r1, #42	; 0x2a
   2f230:	f000 808a 	beq.w	2f348 <parse_url_char+0x150>
		if (IS_ALPHA(ch)) {
   2f234:	f041 0120 	orr.w	r1, r1, #32
   2f238:	3961      	subs	r1, #97	; 0x61
   2f23a:	2919      	cmp	r1, #25
			return s_req_schema;
   2f23c:	bf8c      	ite	hi
   2f23e:	2001      	movhi	r0, #1
   2f240:	2015      	movls	r0, #21
   2f242:	4770      	bx	lr
		if (IS_ALPHA(ch)) {
   2f244:	f041 0320 	orr.w	r3, r1, #32
   2f248:	3b61      	subs	r3, #97	; 0x61
   2f24a:	2b19      	cmp	r3, #25
   2f24c:	d976      	bls.n	2f33c <parse_url_char+0x144>
		if (ch == ':') {
   2f24e:	293a      	cmp	r1, #58	; 0x3a
			return s_req_schema_slash;
   2f250:	bf14      	ite	ne
   2f252:	2001      	movne	r0, #1
   2f254:	2016      	moveq	r0, #22
   2f256:	4770      	bx	lr
		if (ch == '/') {
   2f258:	292f      	cmp	r1, #47	; 0x2f
			return s_req_schema_slash_slash;
   2f25a:	bf14      	ite	ne
   2f25c:	2001      	movne	r0, #1
   2f25e:	2017      	moveq	r0, #23
   2f260:	4770      	bx	lr
		if (ch == '/') {
   2f262:	292f      	cmp	r1, #47	; 0x2f
			return s_req_server_start;
   2f264:	bf14      	ite	ne
   2f266:	2001      	movne	r0, #1
   2f268:	2018      	moveq	r0, #24
   2f26a:	4770      	bx	lr
		if (ch == '@') {
   2f26c:	2940      	cmp	r1, #64	; 0x40
   2f26e:	d0d9      	beq.n	2f224 <parse_url_char+0x2c>
		if (ch == '/') {
   2f270:	292f      	cmp	r1, #47	; 0x2f
   2f272:	d069      	beq.n	2f348 <parse_url_char+0x150>
		if (ch == '?') {
   2f274:	293f      	cmp	r1, #63	; 0x3f
   2f276:	d063      	beq.n	2f340 <parse_url_char+0x148>
		if (ch == '@') {
   2f278:	2940      	cmp	r1, #64	; 0x40
   2f27a:	d063      	beq.n	2f344 <parse_url_char+0x14c>
		if (IS_USERINFO_CHAR(ch) || ch == '[' || ch == ']') {
   2f27c:	f041 0320 	orr.w	r3, r1, #32
   2f280:	3b61      	subs	r3, #97	; 0x61
   2f282:	2b19      	cmp	r3, #25
   2f284:	d906      	bls.n	2f294 <parse_url_char+0x9c>
   2f286:	f1a1 0321 	sub.w	r3, r1, #33	; 0x21
   2f28a:	b2db      	uxtb	r3, r3
   2f28c:	2b1c      	cmp	r3, #28
   2f28e:	d903      	bls.n	2f298 <parse_url_char+0xa0>
   2f290:	297e      	cmp	r1, #126	; 0x7e
   2f292:	d106      	bne.n	2f2a2 <parse_url_char+0xaa>
			return s_req_server;
   2f294:	2019      	movs	r0, #25
   2f296:	4770      	bx	lr
		if (IS_USERINFO_CHAR(ch) || ch == '[' || ch == ']') {
   2f298:	4a3f      	ldr	r2, [pc, #252]	; (2f398 <parse_url_char+0x1a0>)
   2f29a:	fa22 f303 	lsr.w	r3, r2, r3
   2f29e:	07db      	lsls	r3, r3, #31
   2f2a0:	d4f8      	bmi.n	2f294 <parse_url_char+0x9c>
   2f2a2:	f001 03fb 	and.w	r3, r1, #251	; 0xfb
   2f2a6:	2b5b      	cmp	r3, #91	; 0x5b
   2f2a8:	d0f4      	beq.n	2f294 <parse_url_char+0x9c>
   2f2aa:	295d      	cmp	r1, #93	; 0x5d
			return s_req_server;
   2f2ac:	bf14      	ite	ne
   2f2ae:	2001      	movne	r0, #1
   2f2b0:	2019      	moveq	r0, #25
   2f2b2:	4770      	bx	lr
		if (IS_URL_CHAR(ch)) {
   2f2b4:	4a39      	ldr	r2, [pc, #228]	; (2f39c <parse_url_char+0x1a4>)
   2f2b6:	08cb      	lsrs	r3, r1, #3
   2f2b8:	5cd2      	ldrb	r2, [r2, r3]
   2f2ba:	2301      	movs	r3, #1
   2f2bc:	f001 0007 	and.w	r0, r1, #7
   2f2c0:	4083      	lsls	r3, r0
   2f2c2:	421a      	tst	r2, r3
   2f2c4:	d140      	bne.n	2f348 <parse_url_char+0x150>
   2f2c6:	060a      	lsls	r2, r1, #24
   2f2c8:	d43e      	bmi.n	2f348 <parse_url_char+0x150>
		switch (ch) {
   2f2ca:	2923      	cmp	r1, #35	; 0x23
   2f2cc:	d040      	beq.n	2f350 <parse_url_char+0x158>
   2f2ce:	293f      	cmp	r1, #63	; 0x3f
	return s_dead;
   2f2d0:	bf08      	it	eq
   2f2d2:	201c      	moveq	r0, #28
   2f2d4:	bf18      	it	ne
   2f2d6:	2001      	movne	r0, #1
   2f2d8:	4770      	bx	lr
		if (IS_URL_CHAR(ch)) {
   2f2da:	4a30      	ldr	r2, [pc, #192]	; (2f39c <parse_url_char+0x1a4>)
   2f2dc:	08cb      	lsrs	r3, r1, #3
   2f2de:	5cd2      	ldrb	r2, [r2, r3]
   2f2e0:	2301      	movs	r3, #1
   2f2e2:	f001 0007 	and.w	r0, r1, #7
   2f2e6:	4083      	lsls	r3, r0
   2f2e8:	421a      	tst	r2, r3
   2f2ea:	d12f      	bne.n	2f34c <parse_url_char+0x154>
   2f2ec:	060b      	lsls	r3, r1, #24
   2f2ee:	d42d      	bmi.n	2f34c <parse_url_char+0x154>
		switch (ch) {
   2f2f0:	2923      	cmp	r1, #35	; 0x23
   2f2f2:	d02d      	beq.n	2f350 <parse_url_char+0x158>
   2f2f4:	293f      	cmp	r1, #63	; 0x3f
	return s_dead;
   2f2f6:	bf08      	it	eq
   2f2f8:	201d      	moveq	r0, #29
   2f2fa:	e7eb      	b.n	2f2d4 <parse_url_char+0xdc>
		if (IS_URL_CHAR(ch)) {
   2f2fc:	4a27      	ldr	r2, [pc, #156]	; (2f39c <parse_url_char+0x1a4>)
   2f2fe:	08cb      	lsrs	r3, r1, #3
   2f300:	5cd2      	ldrb	r2, [r2, r3]
   2f302:	2301      	movs	r3, #1
   2f304:	f001 0007 	and.w	r0, r1, #7
   2f308:	4083      	lsls	r3, r0
   2f30a:	421a      	tst	r2, r3
   2f30c:	d114      	bne.n	2f338 <parse_url_char+0x140>
   2f30e:	060a      	lsls	r2, r1, #24
   2f310:	d412      	bmi.n	2f338 <parse_url_char+0x140>
		switch (ch) {
   2f312:	2923      	cmp	r1, #35	; 0x23
   2f314:	d01c      	beq.n	2f350 <parse_url_char+0x158>
   2f316:	293f      	cmp	r1, #63	; 0x3f
	return s_dead;
   2f318:	bf08      	it	eq
   2f31a:	201f      	moveq	r0, #31
   2f31c:	e7da      	b.n	2f2d4 <parse_url_char+0xdc>
		if (IS_URL_CHAR(ch)) {
   2f31e:	4a1f      	ldr	r2, [pc, #124]	; (2f39c <parse_url_char+0x1a4>)
   2f320:	08cb      	lsrs	r3, r1, #3
   2f322:	5cd2      	ldrb	r2, [r2, r3]
   2f324:	2301      	movs	r3, #1
   2f326:	f001 0007 	and.w	r0, r1, #7
   2f32a:	4083      	lsls	r3, r0
   2f32c:	421a      	tst	r2, r3
   2f32e:	d103      	bne.n	2f338 <parse_url_char+0x140>
   2f330:	060b      	lsls	r3, r1, #24
   2f332:	d401      	bmi.n	2f338 <parse_url_char+0x140>
		switch (ch) {
   2f334:	2923      	cmp	r1, #35	; 0x23
   2f336:	d1ee      	bne.n	2f316 <parse_url_char+0x11e>
			return s_req_fragment;
   2f338:	201f      	movs	r0, #31
   2f33a:	4770      	bx	lr
			return s_req_schema;
   2f33c:	2015      	movs	r0, #21
   2f33e:	4770      	bx	lr
			return s_req_query_string_start;
   2f340:	201c      	movs	r0, #28
   2f342:	4770      	bx	lr
			return s_req_server_with_at;
   2f344:	201a      	movs	r0, #26
   2f346:	4770      	bx	lr
			return s_req_path;
   2f348:	201b      	movs	r0, #27
   2f34a:	4770      	bx	lr
			return s_req_query_string;
   2f34c:	201d      	movs	r0, #29
   2f34e:	4770      	bx	lr
			return s_req_fragment_start;
   2f350:	201e      	movs	r0, #30
   2f352:	4770      	bx	lr
	switch (s) {
   2f354:	3814      	subs	r0, #20
   2f356:	280b      	cmp	r0, #11
   2f358:	f63f af64 	bhi.w	2f224 <parse_url_char+0x2c>
   2f35c:	a301      	add	r3, pc, #4	; (adr r3, 2f364 <parse_url_char+0x16c>)
   2f35e:	f853 f020 	ldr.w	pc, [r3, r0, lsl #2]
   2f362:	bf00      	nop
   2f364:	0002f235 	.word	0x0002f235
   2f368:	0002f245 	.word	0x0002f245
   2f36c:	0002f259 	.word	0x0002f259
   2f370:	0002f263 	.word	0x0002f263
   2f374:	0002f271 	.word	0x0002f271
   2f378:	0002f271 	.word	0x0002f271
   2f37c:	0002f26d 	.word	0x0002f26d
   2f380:	0002f2b5 	.word	0x0002f2b5
   2f384:	0002f2db 	.word	0x0002f2db
   2f388:	0002f2db 	.word	0x0002f2db
   2f38c:	0002f2fd 	.word	0x0002f2fd
   2f390:	0002f31f 	.word	0x0002f31f
   2f394:	00400009 	.word	0x00400009
   2f398:	17ffbff9 	.word	0x17ffbff9
   2f39c:	0004c123 	.word	0x0004c123

0002f3a0 <http_parser_parse_url>:
}

int
http_parser_parse_url(const char *buf, size_t buflen, int is_connect,
		      struct http_parser_url *u)
{
   2f3a0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2f3a4:	4605      	mov	r5, r0
	int found_at = 0;
	const char *p;
	enum state s;

	u->port = u->field_set = 0U;
	s = is_connect ? s_req_server_start : s_req_spaces_before_url;
   2f3a6:	f1b2 0800 	subs.w	r8, r2, #0
	u->port = u->field_set = 0U;
   2f3aa:	f04f 0700 	mov.w	r7, #0
{
   2f3ae:	461c      	mov	r4, r3
	s = is_connect ? s_req_server_start : s_req_spaces_before_url;
   2f3b0:	bf14      	ite	ne
   2f3b2:	2018      	movne	r0, #24
   2f3b4:	2014      	moveq	r0, #20
   2f3b6:	462e      	mov	r6, r5
		}

		u->field_data[uf].off = p - buf;
		u->field_data[uf].len = 1U;

		u->field_set |= (1 << uf);
   2f3b8:	f04f 0a07 	mov.w	sl, #7
		u->field_data[uf].len = 1U;
   2f3bc:	f04f 0b01 	mov.w	fp, #1
	u->port = u->field_set = 0U;
   2f3c0:	801f      	strh	r7, [r3, #0]
   2f3c2:	805f      	strh	r7, [r3, #2]
	for (p = buf; p < buf + buflen; p++) {
   2f3c4:	186a      	adds	r2, r5, r1
   2f3c6:	4296      	cmp	r6, r2
   2f3c8:	46b1      	mov	r9, r6
   2f3ca:	d30e      	bcc.n	2f3ea <http_parser_parse_url+0x4a>
		old_uf = uf;
	}

	/* host must be present if there is a schema */
	/* parsing http:///toto will fail */
	if ((u->field_set & (1 << UF_SCHEMA)) &&
   2f3cc:	8822      	ldrh	r2, [r4, #0]
   2f3ce:	f002 0302 	and.w	r3, r2, #2
   2f3d2:	07d2      	lsls	r2, r2, #31
   2f3d4:	f140 8080 	bpl.w	2f4d8 <http_parser_parse_url+0x138>
   2f3d8:	2b00      	cmp	r3, #0
   2f3da:	f040 8087 	bne.w	2f4ec <http_parser_parse_url+0x14c>
			(u->field_set & (1 << UF_HOST)) == 0U) {
		return 1;
   2f3de:	f04f 0801 	mov.w	r8, #1

		u->port = (u16_t) v;
	}

	return 0;
}
   2f3e2:	4640      	mov	r0, r8
   2f3e4:	b003      	add	sp, #12
   2f3e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		s = parse_url_char(s, *p);
   2f3ea:	f899 1000 	ldrb.w	r1, [r9]
   2f3ee:	9201      	str	r2, [sp, #4]
   2f3f0:	f7ff ff02 	bl	2f1f8 <parse_url_char>
		switch (s) {
   2f3f4:	1e43      	subs	r3, r0, #1
   2f3f6:	3601      	adds	r6, #1
   2f3f8:	9a01      	ldr	r2, [sp, #4]
   2f3fa:	2b1e      	cmp	r3, #30
   2f3fc:	d84f      	bhi.n	2f49e <http_parser_parse_url+0xfe>
   2f3fe:	a101      	add	r1, pc, #4	; (adr r1, 2f404 <http_parser_parse_url+0x64>)
   2f400:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
   2f404:	0002f3df 	.word	0x0002f3df
   2f408:	0002f49f 	.word	0x0002f49f
   2f40c:	0002f49f 	.word	0x0002f49f
   2f410:	0002f49f 	.word	0x0002f49f
   2f414:	0002f49f 	.word	0x0002f49f
   2f418:	0002f49f 	.word	0x0002f49f
   2f41c:	0002f49f 	.word	0x0002f49f
   2f420:	0002f49f 	.word	0x0002f49f
   2f424:	0002f49f 	.word	0x0002f49f
   2f428:	0002f49f 	.word	0x0002f49f
   2f42c:	0002f49f 	.word	0x0002f49f
   2f430:	0002f49f 	.word	0x0002f49f
   2f434:	0002f49f 	.word	0x0002f49f
   2f438:	0002f49f 	.word	0x0002f49f
   2f43c:	0002f49f 	.word	0x0002f49f
   2f440:	0002f49f 	.word	0x0002f49f
   2f444:	0002f49f 	.word	0x0002f49f
   2f448:	0002f49f 	.word	0x0002f49f
   2f44c:	0002f49f 	.word	0x0002f49f
   2f450:	0002f49f 	.word	0x0002f49f
   2f454:	0002f4ad 	.word	0x0002f4ad
   2f458:	0002f3c7 	.word	0x0002f3c7
   2f45c:	0002f3c7 	.word	0x0002f3c7
   2f460:	0002f3c7 	.word	0x0002f3c7
   2f464:	0002f481 	.word	0x0002f481
   2f468:	0002f4b1 	.word	0x0002f4b1
   2f46c:	0002f493 	.word	0x0002f493
   2f470:	0002f3c7 	.word	0x0002f3c7
   2f474:	0002f497 	.word	0x0002f497
   2f478:	0002f3c7 	.word	0x0002f3c7
   2f47c:	0002f49b 	.word	0x0002f49b
			uf = UF_HOST;
   2f480:	2301      	movs	r3, #1
		if (uf == old_uf) {
   2f482:	459a      	cmp	sl, r3
   2f484:	d117      	bne.n	2f4b6 <http_parser_parse_url+0x116>
			u->field_data[uf].len++;
   2f486:	eb04 018a 	add.w	r1, r4, sl, lsl #2
   2f48a:	88cb      	ldrh	r3, [r1, #6]
   2f48c:	3301      	adds	r3, #1
   2f48e:	80cb      	strh	r3, [r1, #6]
			continue;
   2f490:	e799      	b.n	2f3c6 <http_parser_parse_url+0x26>
			uf = UF_PATH;
   2f492:	2303      	movs	r3, #3
			break;
   2f494:	e7f5      	b.n	2f482 <http_parser_parse_url+0xe2>
			uf = UF_QUERY;
   2f496:	2304      	movs	r3, #4
			break;
   2f498:	e7f3      	b.n	2f482 <http_parser_parse_url+0xe2>
			uf = UF_FRAGMENT;
   2f49a:	2305      	movs	r3, #5
			break;
   2f49c:	e7f1      	b.n	2f482 <http_parser_parse_url+0xe2>
			assert(!"Unexpected state");
   2f49e:	4b87      	ldr	r3, [pc, #540]	; (2f6bc <http_parser_parse_url+0x31c>)
   2f4a0:	4a87      	ldr	r2, [pc, #540]	; (2f6c0 <http_parser_parse_url+0x320>)
   2f4a2:	f240 210b 	movw	r1, #523	; 0x20b
   2f4a6:	4887      	ldr	r0, [pc, #540]	; (2f6c4 <http_parser_parse_url+0x324>)
   2f4a8:	f00f fa7e 	bl	3e9a8 <__assert_func>
			uf = UF_SCHEMA;
   2f4ac:	2300      	movs	r3, #0
   2f4ae:	e7e8      	b.n	2f482 <http_parser_parse_url+0xe2>
			found_at = 1;
   2f4b0:	2701      	movs	r7, #1
			uf = UF_HOST;
   2f4b2:	463b      	mov	r3, r7
   2f4b4:	e7e5      	b.n	2f482 <http_parser_parse_url+0xe2>
		u->field_data[uf].off = p - buf;
   2f4b6:	eb04 0183 	add.w	r1, r4, r3, lsl #2
   2f4ba:	eba9 0905 	sub.w	r9, r9, r5
   2f4be:	f8a1 9004 	strh.w	r9, [r1, #4]
		u->field_data[uf].len = 1U;
   2f4c2:	f8a1 b006 	strh.w	fp, [r1, #6]
		u->field_set |= (1 << uf);
   2f4c6:	f8b4 c000 	ldrh.w	ip, [r4]
   2f4ca:	fa0b f103 	lsl.w	r1, fp, r3
   2f4ce:	ea41 010c 	orr.w	r1, r1, ip
   2f4d2:	8021      	strh	r1, [r4, #0]
   2f4d4:	469a      	mov	sl, r3
   2f4d6:	e776      	b.n	2f3c6 <http_parser_parse_url+0x26>
	if (u->field_set & (1 << UF_HOST)) {
   2f4d8:	b943      	cbnz	r3, 2f4ec <http_parser_parse_url+0x14c>
	if (is_connect && u->field_set != ((1 << UF_HOST)|(1 << UF_PORT))) {
   2f4da:	8823      	ldrh	r3, [r4, #0]
   2f4dc:	f1b8 0f00 	cmp.w	r8, #0
   2f4e0:	f040 80d2 	bne.w	2f688 <http_parser_parse_url+0x2e8>
	if (u->field_set & (1 << UF_PORT)) {
   2f4e4:	075b      	lsls	r3, r3, #29
   2f4e6:	f57f af7c 	bpl.w	2f3e2 <http_parser_parse_url+0x42>
   2f4ea:	e0d0      	b.n	2f68e <http_parser_parse_url+0x2ee>
	u->field_data[UF_HOST].len = 0U;
   2f4ec:	f04f 0c00 	mov.w	ip, #0
	s = found_at ? s_http_userinfo_start : s_http_host_start;
   2f4f0:	4567      	cmp	r7, ip
   2f4f2:	bf14      	ite	ne
   2f4f4:	2102      	movne	r1, #2
   2f4f6:	2104      	moveq	r1, #4
	buflen = u->field_data[UF_HOST].off + u->field_data[UF_HOST].len;
   2f4f8:	8926      	ldrh	r6, [r4, #8]
   2f4fa:	8963      	ldrh	r3, [r4, #10]
		if (IS_ALPHANUM(ch) || ch == '%' || ch == '.' || ch == '-' ||
   2f4fc:	f8df e1c8 	ldr.w	lr, [pc, #456]	; 2f6c8 <http_parser_parse_url+0x328>
	buflen = u->field_data[UF_HOST].off + u->field_data[UF_HOST].len;
   2f500:	4433      	add	r3, r6
		if (IS_USERINFO_CHAR(ch)) {
   2f502:	f8df 91c8 	ldr.w	r9, [pc, #456]	; 2f6cc <http_parser_parse_url+0x32c>
	u->field_data[UF_HOST].len = 0U;
   2f506:	f8a4 c00a 	strh.w	ip, [r4, #10]
	for (p = buf + u->field_data[UF_HOST].off; p < buf + buflen; p++) {
   2f50a:	442e      	add	r6, r5
   2f50c:	18ef      	adds	r7, r5, r3
   2f50e:	42be      	cmp	r6, r7
   2f510:	4630      	mov	r0, r6
   2f512:	f1a1 0202 	sub.w	r2, r1, #2
   2f516:	d30b      	bcc.n	2f530 <http_parser_parse_url+0x190>
	switch (s) {
   2f518:	b2d2      	uxtb	r2, r2
   2f51a:	2a09      	cmp	r2, #9
   2f51c:	d8dd      	bhi.n	2f4da <http_parser_parse_url+0x13a>
   2f51e:	2301      	movs	r3, #1
   2f520:	fa03 f202 	lsl.w	r2, r3, r2
   2f524:	f240 33af 	movw	r3, #943	; 0x3af
   2f528:	421a      	tst	r2, r3
   2f52a:	f47f af58 	bne.w	2f3de <http_parser_parse_url+0x3e>
   2f52e:	e7d4      	b.n	2f4da <http_parser_parse_url+0x13a>
		enum http_host_state new_s = http_parse_host_char(s, *p);
   2f530:	f816 3b01 	ldrb.w	r3, [r6], #1
	switch (s) {
   2f534:	2a0a      	cmp	r2, #10
   2f536:	f63f af52 	bhi.w	2f3de <http_parser_parse_url+0x3e>
   2f53a:	e8df f002 	tbb	[pc, r2]
   2f53e:	0606      	.short	0x0606
   2f540:	5a465c2d 	.word	0x5a465c2d
   2f544:	8c727455 	.word	0x8c727455
   2f548:	8c          	.byte	0x8c
   2f549:	00          	.byte	0x00
		if (ch == '@') {
   2f54a:	2b40      	cmp	r3, #64	; 0x40
   2f54c:	f000 8096 	beq.w	2f67c <http_parser_parse_url+0x2dc>
		if (IS_USERINFO_CHAR(ch)) {
   2f550:	f043 0220 	orr.w	r2, r3, #32
   2f554:	3a61      	subs	r2, #97	; 0x61
   2f556:	2a19      	cmp	r2, #25
   2f558:	d909      	bls.n	2f56e <http_parser_parse_url+0x1ce>
   2f55a:	2b5f      	cmp	r3, #95	; 0x5f
   2f55c:	d007      	beq.n	2f56e <http_parser_parse_url+0x1ce>
   2f55e:	f1a3 0221 	sub.w	r2, r3, #33	; 0x21
   2f562:	b2d2      	uxtb	r2, r2
   2f564:	2a1c      	cmp	r2, #28
   2f566:	d911      	bls.n	2f58c <http_parser_parse_url+0x1ec>
   2f568:	2b7e      	cmp	r3, #126	; 0x7e
   2f56a:	f47f af38 	bne.w	2f3de <http_parser_parse_url+0x3e>
			if (s != s_http_userinfo) {
   2f56e:	2903      	cmp	r1, #3
   2f570:	d007      	beq.n	2f582 <http_parser_parse_url+0x1e2>
				u->field_set |= (1 << UF_USERINFO);
   2f572:	8823      	ldrh	r3, [r4, #0]
				u->field_data[UF_USERINFO].off = p - buf;
   2f574:	1b40      	subs	r0, r0, r5
				u->field_set |= (1 << UF_USERINFO);
   2f576:	f043 0340 	orr.w	r3, r3, #64	; 0x40
				u->field_data[UF_USERINFO].off = p - buf;
   2f57a:	83a0      	strh	r0, [r4, #28]
				u->field_data[UF_USERINFO].len = 0U;
   2f57c:	f8a4 c01e 	strh.w	ip, [r4, #30]
				u->field_set |= (1 << UF_USERINFO);
   2f580:	8023      	strh	r3, [r4, #0]
			u->field_data[UF_USERINFO].len++;
   2f582:	8be3      	ldrh	r3, [r4, #30]
			return s_http_userinfo;
   2f584:	2103      	movs	r1, #3
			u->field_data[UF_USERINFO].len++;
   2f586:	3301      	adds	r3, #1
   2f588:	83e3      	strh	r3, [r4, #30]
			break;
   2f58a:	e7c0      	b.n	2f50e <http_parser_parse_url+0x16e>
		if (IS_USERINFO_CHAR(ch)) {
   2f58c:	fa29 f202 	lsr.w	r2, r9, r2
   2f590:	07d3      	lsls	r3, r2, #31
   2f592:	f57f af24 	bpl.w	2f3de <http_parser_parse_url+0x3e>
   2f596:	e7ea      	b.n	2f56e <http_parser_parse_url+0x1ce>
		if (ch == '[') {
   2f598:	2b5b      	cmp	r3, #91	; 0x5b
   2f59a:	d071      	beq.n	2f680 <http_parser_parse_url+0x2e0>
		if (IS_HOST_CHAR(ch)) {
   2f59c:	f043 0220 	orr.w	r2, r3, #32
   2f5a0:	3a61      	subs	r2, #97	; 0x61
   2f5a2:	2a19      	cmp	r2, #25
   2f5a4:	d90a      	bls.n	2f5bc <http_parser_parse_url+0x21c>
   2f5a6:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
   2f5aa:	2a09      	cmp	r2, #9
   2f5ac:	d906      	bls.n	2f5bc <http_parser_parse_url+0x21c>
   2f5ae:	f1a3 022d 	sub.w	r2, r3, #45	; 0x2d
   2f5b2:	2a01      	cmp	r2, #1
   2f5b4:	d902      	bls.n	2f5bc <http_parser_parse_url+0x21c>
   2f5b6:	2b5f      	cmp	r3, #95	; 0x5f
   2f5b8:	f47f af11 	bne.w	2f3de <http_parser_parse_url+0x3e>
				u->field_data[UF_HOST].off = p - buf;
   2f5bc:	1b40      	subs	r0, r0, r5
   2f5be:	8120      	strh	r0, [r4, #8]
			u->field_data[UF_HOST].len++;
   2f5c0:	8963      	ldrh	r3, [r4, #10]
   2f5c2:	2106      	movs	r1, #6
   2f5c4:	3301      	adds	r3, #1
   2f5c6:	8163      	strh	r3, [r4, #10]
			break;
   2f5c8:	e7a1      	b.n	2f50e <http_parser_parse_url+0x16e>
		if (IS_HOST_CHAR(ch)) {
   2f5ca:	f043 0220 	orr.w	r2, r3, #32
   2f5ce:	3a61      	subs	r2, #97	; 0x61
   2f5d0:	2a19      	cmp	r2, #25
   2f5d2:	d9f5      	bls.n	2f5c0 <http_parser_parse_url+0x220>
   2f5d4:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
   2f5d8:	2a09      	cmp	r2, #9
   2f5da:	d9f1      	bls.n	2f5c0 <http_parser_parse_url+0x220>
   2f5dc:	f1a3 022d 	sub.w	r2, r3, #45	; 0x2d
   2f5e0:	2a01      	cmp	r2, #1
   2f5e2:	d9ed      	bls.n	2f5c0 <http_parser_parse_url+0x220>
   2f5e4:	2b5f      	cmp	r3, #95	; 0x5f
   2f5e6:	d0eb      	beq.n	2f5c0 <http_parser_parse_url+0x220>
		if (ch == ':') {
   2f5e8:	2b3a      	cmp	r3, #58	; 0x3a
   2f5ea:	f47f aef8 	bne.w	2f3de <http_parser_parse_url+0x3e>
			return s_http_host_port_start;
   2f5ee:	210b      	movs	r1, #11
   2f5f0:	e78d      	b.n	2f50e <http_parser_parse_url+0x16e>
		if (ch == ']') {
   2f5f2:	2b5d      	cmp	r3, #93	; 0x5d
   2f5f4:	d046      	beq.n	2f684 <http_parser_parse_url+0x2e4>
		if (IS_HEX(ch) || ch == ':' || ch == '.') {
   2f5f6:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
   2f5fa:	2a0a      	cmp	r2, #10
   2f5fc:	d955      	bls.n	2f6aa <http_parser_parse_url+0x30a>
   2f5fe:	f043 0220 	orr.w	r2, r3, #32
   2f602:	3a61      	subs	r2, #97	; 0x61
   2f604:	2a05      	cmp	r2, #5
   2f606:	d950      	bls.n	2f6aa <http_parser_parse_url+0x30a>
   2f608:	2b2e      	cmp	r3, #46	; 0x2e
   2f60a:	d04e      	beq.n	2f6aa <http_parser_parse_url+0x30a>
		if (s == s_http_host_v6 && ch == '%') {
   2f60c:	2907      	cmp	r1, #7
   2f60e:	f47f aee6 	bne.w	2f3de <http_parser_parse_url+0x3e>
   2f612:	2b25      	cmp	r3, #37	; 0x25
   2f614:	f47f aee3 	bne.w	2f3de <http_parser_parse_url+0x3e>
			return s_http_host_v6_zone_start;
   2f618:	2109      	movs	r1, #9
			u->field_data[UF_HOST].len++;
   2f61a:	8963      	ldrh	r3, [r4, #10]
   2f61c:	3301      	adds	r3, #1
   2f61e:	8163      	strh	r3, [r4, #10]
		s = new_s;
   2f620:	e775      	b.n	2f50e <http_parser_parse_url+0x16e>
		if (ch == ']') {
   2f622:	2b5d      	cmp	r3, #93	; 0x5d
   2f624:	d02e      	beq.n	2f684 <http_parser_parse_url+0x2e4>
		if (IS_ALPHANUM(ch) || ch == '%' || ch == '.' || ch == '-' ||
   2f626:	f043 0220 	orr.w	r2, r3, #32
   2f62a:	3a61      	subs	r2, #97	; 0x61
   2f62c:	2a19      	cmp	r2, #25
   2f62e:	d906      	bls.n	2f63e <http_parser_parse_url+0x29e>
   2f630:	f1a3 0225 	sub.w	r2, r3, #37	; 0x25
   2f634:	b2d2      	uxtb	r2, r2
   2f636:	2a14      	cmp	r2, #20
   2f638:	d903      	bls.n	2f642 <http_parser_parse_url+0x2a2>
   2f63a:	2b5f      	cmp	r3, #95	; 0x5f
   2f63c:	d107      	bne.n	2f64e <http_parser_parse_url+0x2ae>
			return s_http_host_v6_zone;
   2f63e:	210a      	movs	r1, #10
   2f640:	e7eb      	b.n	2f61a <http_parser_parse_url+0x27a>
		if (IS_ALPHANUM(ch) || ch == '%' || ch == '.' || ch == '-' ||
   2f642:	fa2e f202 	lsr.w	r2, lr, r2
   2f646:	07d2      	lsls	r2, r2, #31
   2f648:	f57f aec9 	bpl.w	2f3de <http_parser_parse_url+0x3e>
   2f64c:	e7f7      	b.n	2f63e <http_parser_parse_url+0x29e>
				ch == '_' ||
   2f64e:	2b7e      	cmp	r3, #126	; 0x7e
   2f650:	f47f aec5 	bne.w	2f3de <http_parser_parse_url+0x3e>
   2f654:	e7f3      	b.n	2f63e <http_parser_parse_url+0x29e>
		if (IS_NUM(ch)) {
   2f656:	3b30      	subs	r3, #48	; 0x30
   2f658:	2b09      	cmp	r3, #9
   2f65a:	f63f aec0 	bhi.w	2f3de <http_parser_parse_url+0x3e>
			if (s != s_http_host_port) {
   2f65e:	290c      	cmp	r1, #12
   2f660:	d007      	beq.n	2f672 <http_parser_parse_url+0x2d2>
				u->field_set |= (1 << UF_PORT);
   2f662:	8823      	ldrh	r3, [r4, #0]
				u->field_data[UF_PORT].off = p - buf;
   2f664:	1b40      	subs	r0, r0, r5
				u->field_set |= (1 << UF_PORT);
   2f666:	f043 0304 	orr.w	r3, r3, #4
				u->field_data[UF_PORT].off = p - buf;
   2f66a:	81a0      	strh	r0, [r4, #12]
				u->field_data[UF_PORT].len = 0U;
   2f66c:	f8a4 c00e 	strh.w	ip, [r4, #14]
				u->field_set |= (1 << UF_PORT);
   2f670:	8023      	strh	r3, [r4, #0]
			u->field_data[UF_PORT].len++;
   2f672:	89e3      	ldrh	r3, [r4, #14]
			return s_http_host_port;
   2f674:	210c      	movs	r1, #12
			u->field_data[UF_PORT].len++;
   2f676:	3301      	adds	r3, #1
   2f678:	81e3      	strh	r3, [r4, #14]
			break;
   2f67a:	e748      	b.n	2f50e <http_parser_parse_url+0x16e>
			return s_http_host_start;
   2f67c:	2104      	movs	r1, #4
   2f67e:	e746      	b.n	2f50e <http_parser_parse_url+0x16e>
			return s_http_host_v6_start;
   2f680:	2105      	movs	r1, #5
   2f682:	e744      	b.n	2f50e <http_parser_parse_url+0x16e>
			return s_http_host_v6_end;
   2f684:	2108      	movs	r1, #8
   2f686:	e742      	b.n	2f50e <http_parser_parse_url+0x16e>
	if (is_connect && u->field_set != ((1 << UF_HOST)|(1 << UF_PORT))) {
   2f688:	2b06      	cmp	r3, #6
   2f68a:	f47f aea8 	bne.w	2f3de <http_parser_parse_url+0x3e>
		v = strtoul(buf + u->field_data[UF_PORT].off, NULL, 10);
   2f68e:	89a0      	ldrh	r0, [r4, #12]
   2f690:	220a      	movs	r2, #10
   2f692:	2100      	movs	r1, #0
   2f694:	4428      	add	r0, r5
   2f696:	f00f ff9f 	bl	3f5d8 <strtoul>
		if (v > 0xffff) {
   2f69a:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
   2f69e:	f4bf ae9e 	bcs.w	2f3de <http_parser_parse_url+0x3e>
		u->port = (u16_t) v;
   2f6a2:	8060      	strh	r0, [r4, #2]
	return 0;
   2f6a4:	f04f 0800 	mov.w	r8, #0
   2f6a8:	e69b      	b.n	2f3e2 <http_parser_parse_url+0x42>
			if (s != s_http_host_v6) {
   2f6aa:	2907      	cmp	r1, #7
   2f6ac:	d001      	beq.n	2f6b2 <http_parser_parse_url+0x312>
				u->field_data[UF_HOST].off = p - buf;
   2f6ae:	1b40      	subs	r0, r0, r5
   2f6b0:	8120      	strh	r0, [r4, #8]
			u->field_data[UF_HOST].len++;
   2f6b2:	8963      	ldrh	r3, [r4, #10]
   2f6b4:	2107      	movs	r1, #7
   2f6b6:	3301      	adds	r3, #1
   2f6b8:	8163      	strh	r3, [r4, #10]
			break;
   2f6ba:	e728      	b.n	2f50e <http_parser_parse_url+0x16e>
   2f6bc:	0004c0d6 	.word	0x0004c0d6
   2f6c0:	0004c0c0 	.word	0x0004c0c0
   2f6c4:	0004c0ea 	.word	0x0004c0ea
   2f6c8:	001ffb01 	.word	0x001ffb01
   2f6cc:	17ffbff9 	.word	0x17ffbff9

0002f6d0 <z_impl_entropy_get_entropy>:
				  u16_t length);

static inline int z_impl_entropy_get_entropy(struct device *dev,
					    u8_t *buffer,
					    u16_t length)
{
   2f6d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	const struct entropy_driver_api *api =
   2f6d4:	6845      	ldr	r5, [r0, #4]
{
   2f6d6:	4604      	mov	r4, r0
		(const struct entropy_driver_api *)dev->driver_api;

	__ASSERT(api->get_entropy != NULL,
   2f6d8:	682b      	ldr	r3, [r5, #0]
{
   2f6da:	460e      	mov	r6, r1
   2f6dc:	4617      	mov	r7, r2
	__ASSERT(api->get_entropy != NULL,
   2f6de:	b963      	cbnz	r3, 2f6fa <z_impl_entropy_get_entropy+0x2a>
   2f6e0:	4909      	ldr	r1, [pc, #36]	; (2f708 <z_impl_entropy_get_entropy+0x38>)
   2f6e2:	234c      	movs	r3, #76	; 0x4c
   2f6e4:	4a09      	ldr	r2, [pc, #36]	; (2f70c <z_impl_entropy_get_entropy+0x3c>)
   2f6e6:	480a      	ldr	r0, [pc, #40]	; (2f710 <z_impl_entropy_get_entropy+0x40>)
   2f6e8:	f010 ff8b 	bl	40602 <printk>
   2f6ec:	4809      	ldr	r0, [pc, #36]	; (2f714 <z_impl_entropy_get_entropy+0x44>)
   2f6ee:	f010 ff88 	bl	40602 <printk>
   2f6f2:	214c      	movs	r1, #76	; 0x4c
   2f6f4:	4805      	ldr	r0, [pc, #20]	; (2f70c <z_impl_entropy_get_entropy+0x3c>)
   2f6f6:	f011 f847 	bl	40788 <assert_post_action>
		"Callback pointer should not be NULL");
	return api->get_entropy(dev, buffer, length);
   2f6fa:	682b      	ldr	r3, [r5, #0]
   2f6fc:	463a      	mov	r2, r7
   2f6fe:	4631      	mov	r1, r6
   2f700:	4620      	mov	r0, r4
}
   2f702:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	return api->get_entropy(dev, buffer, length);
   2f706:	4718      	bx	r3
   2f708:	0004c220 	.word	0x0004c220
   2f70c:	0004c1f3 	.word	0x0004c1f3
   2f710:	0004764f 	.word	0x0004764f
   2f714:	0004c240 	.word	0x0004c240

0002f718 <sys_rand32_get>:

static struct device *entropy_driver;

#if defined(CONFIG_ENTROPY_DEVICE_RANDOM_GENERATOR)
u32_t sys_rand32_get(void)
{
   2f718:	b537      	push	{r0, r1, r2, r4, r5, lr}
	struct device *dev = entropy_driver;
   2f71a:	4d12      	ldr	r5, [pc, #72]	; (2f764 <sys_rand32_get+0x4c>)
   2f71c:	682c      	ldr	r4, [r5, #0]
	u32_t random_num;
	int ret;

	if (unlikely(!dev)) {
   2f71e:	b99c      	cbnz	r4, 2f748 <sys_rand32_get+0x30>
   2f720:	4811      	ldr	r0, [pc, #68]	; (2f768 <sys_rand32_get+0x50>)
   2f722:	f00b fcb1 	bl	3b088 <z_impl_device_get_binding>
		/* Only one entropy device exists, so this is safe even
		 * if the whole operation isn't atomic.
		 */
		dev = device_get_binding(CONFIG_ENTROPY_NAME);
		__ASSERT((dev != NULL),
   2f726:	4604      	mov	r4, r0
   2f728:	b968      	cbnz	r0, 2f746 <sys_rand32_get+0x2e>
   2f72a:	231d      	movs	r3, #29
   2f72c:	4a0f      	ldr	r2, [pc, #60]	; (2f76c <sys_rand32_get+0x54>)
   2f72e:	4910      	ldr	r1, [pc, #64]	; (2f770 <sys_rand32_get+0x58>)
   2f730:	4810      	ldr	r0, [pc, #64]	; (2f774 <sys_rand32_get+0x5c>)
   2f732:	f010 ff66 	bl	40602 <printk>
   2f736:	490c      	ldr	r1, [pc, #48]	; (2f768 <sys_rand32_get+0x50>)
   2f738:	480f      	ldr	r0, [pc, #60]	; (2f778 <sys_rand32_get+0x60>)
   2f73a:	f010 ff62 	bl	40602 <printk>
   2f73e:	211d      	movs	r1, #29
   2f740:	480a      	ldr	r0, [pc, #40]	; (2f76c <sys_rand32_get+0x54>)
   2f742:	f011 f821 	bl	40788 <assert_post_action>
			"Device driver for %s (CONFIG_ENTROPY_NAME) not found. "
			"Check your build configuration!",
			CONFIG_ENTROPY_NAME);
		entropy_driver = dev;
   2f746:	602c      	str	r4, [r5, #0]
	if (z_syscall_trap()) {
		return (int) arch_syscall_invoke3(*(uintptr_t *)&dev, *(uintptr_t *)&buffer, *(uintptr_t *)&length, K_SYSCALL_ENTROPY_GET_ENTROPY);
	}
#endif
	compiler_barrier();
	return z_impl_entropy_get_entropy(dev, buffer, length);
   2f748:	2204      	movs	r2, #4
   2f74a:	4620      	mov	r0, r4
   2f74c:	eb0d 0102 	add.w	r1, sp, r2
   2f750:	f7ff ffbe 	bl	2f6d0 <z_impl_entropy_get_entropy>
	}

	ret = entropy_get_entropy(dev, (u8_t *)&random_num,
				  sizeof(random_num));
	if (unlikely(ret < 0)) {
   2f754:	2800      	cmp	r0, #0
   2f756:	da02      	bge.n	2f75e <sys_rand32_get+0x46>
#ifndef _ASMLANGUAGE
extern u32_t z_timer_cycle_get_32(void);

static inline u32_t arch_k_cycle_get_32(void)
{
	return z_timer_cycle_get_32();
   2f758:	f7f6 fe14 	bl	26384 <z_timer_cycle_get_32>
		 * 32-bit of data.  There's not much that can be done in this
		 * situation.  An __ASSERT() isn't used here as the HWRNG might
		 * still be gathering entropy during early boot situations.
		 */

		random_num = k_cycle_get_32();
   2f75c:	9001      	str	r0, [sp, #4]
	}

	return random_num;
}
   2f75e:	9801      	ldr	r0, [sp, #4]
   2f760:	b003      	add	sp, #12
   2f762:	bd30      	pop	{r4, r5, pc}
   2f764:	20024c44 	.word	0x20024c44
   2f768:	0004c143 	.word	0x0004c143
   2f76c:	0004c14d 	.word	0x0004c14d
   2f770:	0004c186 	.word	0x0004c186
   2f774:	0004764f 	.word	0x0004764f
   2f778:	0004c19b 	.word	0x0004c19b

0002f77c <gpio_nrfx_manage_callback>:
}

static int gpio_nrfx_manage_callback(struct device *port,
				     struct gpio_callback *callback,
				     bool set)
{
   2f77c:	b570      	push	{r4, r5, r6, lr}
   2f77e:	4616      	mov	r6, r2
	return gpio_manage_callback(&get_port_data(port)->callbacks,
   2f780:	6884      	ldr	r4, [r0, #8]
 */
static inline int gpio_manage_callback(sys_slist_t *callbacks,
					struct gpio_callback *callback,
					bool set)
{
	__ASSERT(callback, "No callback!");
   2f782:	460d      	mov	r5, r1
   2f784:	b961      	cbnz	r1, 2f7a0 <gpio_nrfx_manage_callback+0x24>
   2f786:	4922      	ldr	r1, [pc, #136]	; (2f810 <gpio_nrfx_manage_callback+0x94>)
   2f788:	231c      	movs	r3, #28
   2f78a:	4a22      	ldr	r2, [pc, #136]	; (2f814 <gpio_nrfx_manage_callback+0x98>)
   2f78c:	4822      	ldr	r0, [pc, #136]	; (2f818 <gpio_nrfx_manage_callback+0x9c>)
   2f78e:	f010 ff38 	bl	40602 <printk>
   2f792:	4822      	ldr	r0, [pc, #136]	; (2f81c <gpio_nrfx_manage_callback+0xa0>)
   2f794:	f010 ff35 	bl	40602 <printk>
   2f798:	211c      	movs	r1, #28
   2f79a:	481e      	ldr	r0, [pc, #120]	; (2f814 <gpio_nrfx_manage_callback+0x98>)
   2f79c:	f010 fff4 	bl	40788 <assert_post_action>
	__ASSERT(callback->handler, "No callback handler!");
   2f7a0:	686b      	ldr	r3, [r5, #4]
   2f7a2:	b963      	cbnz	r3, 2f7be <gpio_nrfx_manage_callback+0x42>
   2f7a4:	491e      	ldr	r1, [pc, #120]	; (2f820 <gpio_nrfx_manage_callback+0xa4>)
   2f7a6:	231d      	movs	r3, #29
   2f7a8:	4a1a      	ldr	r2, [pc, #104]	; (2f814 <gpio_nrfx_manage_callback+0x98>)
   2f7aa:	481b      	ldr	r0, [pc, #108]	; (2f818 <gpio_nrfx_manage_callback+0x9c>)
   2f7ac:	f010 ff29 	bl	40602 <printk>
   2f7b0:	481c      	ldr	r0, [pc, #112]	; (2f824 <gpio_nrfx_manage_callback+0xa8>)
   2f7b2:	f010 ff26 	bl	40602 <printk>
   2f7b6:	211d      	movs	r1, #29
   2f7b8:	4816      	ldr	r0, [pc, #88]	; (2f814 <gpio_nrfx_manage_callback+0x98>)
   2f7ba:	f010 ffe5 	bl	40788 <assert_post_action>
Z_GENLIST_IS_EMPTY(slist)
   2f7be:	6823      	ldr	r3, [r4, #0]

	if (!sys_slist_is_empty(callbacks)) {
   2f7c0:	b15b      	cbz	r3, 2f7da <gpio_nrfx_manage_callback+0x5e>
 * @return true if node was removed
 */
static inline bool sys_slist_find_and_remove(sys_slist_t *list,
					     sys_snode_t *node);

Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   2f7c2:	2200      	movs	r2, #0
   2f7c4:	429d      	cmp	r5, r3
   2f7c6:	d113      	bne.n	2f7f0 <gpio_nrfx_manage_callback+0x74>
Z_GENLIST_REMOVE(slist, snode)
   2f7c8:	682b      	ldr	r3, [r5, #0]
   2f7ca:	b95a      	cbnz	r2, 2f7e4 <gpio_nrfx_manage_callback+0x68>
   2f7cc:	6862      	ldr	r2, [r4, #4]
	list->head = node;
   2f7ce:	6023      	str	r3, [r4, #0]
Z_GENLIST_REMOVE(slist, snode)
   2f7d0:	4295      	cmp	r5, r2
   2f7d2:	d100      	bne.n	2f7d6 <gpio_nrfx_manage_callback+0x5a>
	list->tail = node;
   2f7d4:	6063      	str	r3, [r4, #4]
	parent->next = child;
   2f7d6:	2300      	movs	r3, #0
   2f7d8:	602b      	str	r3, [r5, #0]
				return -EINVAL;
			}
		}
	}

	if (set) {
   2f7da:	b976      	cbnz	r6, 2f7fa <gpio_nrfx_manage_callback+0x7e>
		sys_slist_prepend(callbacks, &callback->node);
	}

	return 0;
   2f7dc:	2000      	movs	r0, #0
				     callback, set);
}
   2f7de:	bd70      	pop	{r4, r5, r6, pc}
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   2f7e0:	460b      	mov	r3, r1
   2f7e2:	e7ef      	b.n	2f7c4 <gpio_nrfx_manage_callback+0x48>
	parent->next = child;
   2f7e4:	6013      	str	r3, [r2, #0]
Z_GENLIST_REMOVE(slist, snode)
   2f7e6:	6863      	ldr	r3, [r4, #4]
   2f7e8:	429d      	cmp	r5, r3
	list->tail = node;
   2f7ea:	bf08      	it	eq
   2f7ec:	6062      	streq	r2, [r4, #4]
   2f7ee:	e7f2      	b.n	2f7d6 <gpio_nrfx_manage_callback+0x5a>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   2f7f0:	6819      	ldr	r1, [r3, #0]
	return node->next;
   2f7f2:	461a      	mov	r2, r3
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   2f7f4:	2900      	cmp	r1, #0
   2f7f6:	d1f3      	bne.n	2f7e0 <gpio_nrfx_manage_callback+0x64>
			if (!set) {
   2f7f8:	b13e      	cbz	r6, 2f80a <gpio_nrfx_manage_callback+0x8e>
Z_GENLIST_PREPEND(slist, snode)
   2f7fa:	6823      	ldr	r3, [r4, #0]
	parent->next = child;
   2f7fc:	602b      	str	r3, [r5, #0]
Z_GENLIST_PREPEND(slist, snode)
   2f7fe:	6860      	ldr	r0, [r4, #4]
	list->head = node;
   2f800:	6025      	str	r5, [r4, #0]
Z_GENLIST_PREPEND(slist, snode)
   2f802:	2800      	cmp	r0, #0
   2f804:	d1ea      	bne.n	2f7dc <gpio_nrfx_manage_callback+0x60>
	list->tail = node;
   2f806:	6065      	str	r5, [r4, #4]
   2f808:	e7e9      	b.n	2f7de <gpio_nrfx_manage_callback+0x62>
				return -EINVAL;
   2f80a:	f06f 0015 	mvn.w	r0, #21
	return gpio_manage_callback(&get_port_data(port)->callbacks,
   2f80e:	e7e6      	b.n	2f7de <gpio_nrfx_manage_callback+0x62>
   2f810:	0004c54f 	.word	0x0004c54f
   2f814:	0004c27f 	.word	0x0004c27f
   2f818:	0004764f 	.word	0x0004764f
   2f81c:	0004c2ac 	.word	0x0004c2ac
   2f820:	0004c2bb 	.word	0x0004c2bb
   2f824:	0004c2cd 	.word	0x0004c2cd

0002f828 <nrf_gpio_pin_port_decode.isra.8.part.9>:
 *
 * @param[in,out] p_pin Pointer to the absolute pin number overriden by the pin number that is relative to the port.
 *
 * @return Pointer to port register set.
 */
NRF_STATIC_INLINE NRF_GPIO_Type * nrf_gpio_pin_port_decode(uint32_t * p_pin)
   2f828:	b508      	push	{r3, lr}
{
    NRFX_ASSERT(*p_pin < NUMBER_OF_PINS);
   2f82a:	4a03      	ldr	r2, [pc, #12]	; (2f838 <nrf_gpio_pin_port_decode.isra.8.part.9+0x10>)
   2f82c:	4b03      	ldr	r3, [pc, #12]	; (2f83c <nrf_gpio_pin_port_decode.isra.8.part.9+0x14>)
   2f82e:	f240 11ff 	movw	r1, #511	; 0x1ff
   2f832:	4803      	ldr	r0, [pc, #12]	; (2f840 <nrf_gpio_pin_port_decode.isra.8.part.9+0x18>)
   2f834:	f00f f8b8 	bl	3e9a8 <__assert_func>
   2f838:	0004c266 	.word	0x0004c266
   2f83c:	0004c31c 	.word	0x0004c31c
   2f840:	0004c32a 	.word	0x0004c32a

0002f844 <nrf_gpio_cfg_sense_set>:
   2f844:	281f      	cmp	r0, #31
}


NRF_STATIC_INLINE void nrf_gpio_cfg_sense_set(uint32_t             pin_number,
                                              nrf_gpio_pin_sense_t sense_config)
{
   2f846:	b508      	push	{r3, lr}
    NRFX_ASSERT(*p_pin < NUMBER_OF_PINS);
   2f848:	d901      	bls.n	2f84e <nrf_gpio_cfg_sense_set+0xa>
   2f84a:	f7ff ffed 	bl	2f828 <nrf_gpio_pin_port_decode.isra.8.part.9>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    /*lint -e{845} // A zero has been given as right argument to operator '|'" */
    uint32_t cnf = reg->PIN_CNF[pin_number] & ~GPIO_PIN_CNF_SENSE_Msk;
   2f84e:	4a06      	ldr	r2, [pc, #24]	; (2f868 <nrf_gpio_cfg_sense_set+0x24>)
   2f850:	eb02 0080 	add.w	r0, r2, r0, lsl #2
   2f854:	f8d0 3200 	ldr.w	r3, [r0, #512]	; 0x200
   2f858:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000

    reg->PIN_CNF[pin_number] = cnf | (sense_config << GPIO_PIN_CNF_SENSE_Pos);
   2f85c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
   2f860:	f8c0 3200 	str.w	r3, [r0, #512]	; 0x200
}
   2f864:	bd08      	pop	{r3, pc}
   2f866:	bf00      	nop
   2f868:	40842500 	.word	0x40842500

0002f86c <gpio_nrfx_init>:
#endif
	}
}

static int gpio_nrfx_init(struct device *port)
{
   2f86c:	b508      	push	{r3, lr}
	static bool gpio_initialized;

	if (!gpio_initialized) {
   2f86e:	4b09      	ldr	r3, [pc, #36]	; (2f894 <gpio_nrfx_init+0x28>)
   2f870:	781a      	ldrb	r2, [r3, #0]
   2f872:	b96a      	cbnz	r2, 2f890 <gpio_nrfx_init+0x24>
		gpio_initialized = true;
   2f874:	2101      	movs	r1, #1
		IRQ_CONNECT(DT_NORDIC_NRF_GPIOTE_GPIOTE_0_IRQ_0,
   2f876:	2031      	movs	r0, #49	; 0x31
		gpio_initialized = true;
   2f878:	7019      	strb	r1, [r3, #0]
		IRQ_CONNECT(DT_NORDIC_NRF_GPIOTE_GPIOTE_0_IRQ_0,
   2f87a:	2105      	movs	r1, #5
   2f87c:	f7f6 feae 	bl	265dc <z_arm_irq_priority_set>
			    DT_NORDIC_NRF_GPIOTE_GPIOTE_0_IRQ_0_PRIORITY,
			    gpiote_event_handler, NULL, 0);

		irq_enable(DT_NORDIC_NRF_GPIOTE_GPIOTE_0_IRQ_0);
   2f880:	2031      	movs	r0, #49	; 0x31
   2f882:	f7f6 fe9b 	bl	265bc <arch_irq_enable>
    return ((uint32_t)p_reg + event);
}

NRF_STATIC_INLINE void nrf_gpiote_int_enable(NRF_GPIOTE_Type * p_reg, uint32_t mask)
{
    p_reg->INTENSET = mask;
   2f886:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
   2f88a:	4b03      	ldr	r3, [pc, #12]	; (2f898 <gpio_nrfx_init+0x2c>)
   2f88c:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
		nrf_gpiote_int_enable(NRF_GPIOTE, NRF_GPIOTE_INT_PORT_MASK);
	}

	return 0;
}
   2f890:	2000      	movs	r0, #0
   2f892:	bd08      	pop	{r3, pc}
   2f894:	2002a4be 	.word	0x2002a4be
   2f898:	40031000 	.word	0x40031000

0002f89c <gpiote_pin_int_cfg>:
{
   2f89c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	return port->config->config_info;
   2f8a0:	6803      	ldr	r3, [r0, #0]
	u32_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
   2f8a2:	f001 041f 	and.w	r4, r1, #31
   2f8a6:	689b      	ldr	r3, [r3, #8]
{
   2f8a8:	460d      	mov	r5, r1
	u32_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
   2f8aa:	791b      	ldrb	r3, [r3, #4]
    p_reg->INTENCLR = mask;
}

NRF_STATIC_INLINE uint32_t nrf_gpiote_int_enable_check(NRF_GPIOTE_Type const * p_reg, uint32_t mask)
{
    return p_reg->INTENSET & mask;
   2f8ac:	4e4b      	ldr	r6, [pc, #300]	; (2f9dc <gpiote_pin_int_cfg+0x140>)
   2f8ae:	ea44 1443 	orr.w	r4, r4, r3, lsl #5
	for (size_t i = 0; i < GPIOTE_CH_NUM; i++) {
   2f8b2:	2300      	movs	r3, #0
   2f8b4:	f8d6 2304 	ldr.w	r2, [r6, #772]	; 0x304
	struct gpio_nrfx_data *data = get_port_data(port);
   2f8b8:	6887      	ldr	r7, [r0, #8]
   2f8ba:	b2d2      	uxtb	r2, r2
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk);
}

NRF_STATIC_INLINE uint32_t nrf_gpiote_event_pin_get(NRF_GPIOTE_Type const * p_reg, uint32_t idx)
{
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
   2f8bc:	f503 71a2 	add.w	r1, r3, #324	; 0x144
   2f8c0:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
   2f8c4:	f3c1 2104 	ubfx	r1, r1, #8, #5
		if ((nrf_gpiote_event_pin_get(NRF_GPIOTE, i) == abs_pin)
   2f8c8:	428c      	cmp	r4, r1
   2f8ca:	d16c      	bne.n	2f9a6 <gpiote_pin_int_cfg+0x10a>
		    && (intenset & BIT(i))) {
   2f8cc:	fa22 f103 	lsr.w	r1, r2, r3
   2f8d0:	07c9      	lsls	r1, r1, #31
   2f8d2:	d568      	bpl.n	2f9a6 <gpiote_pin_int_cfg+0x10a>
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Event;
   2f8d4:	009a      	lsls	r2, r3, #2
   2f8d6:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
   2f8da:	f502 3244 	add.w	r2, r2, #200704	; 0x31000
   2f8de:	f8d2 1510 	ldr.w	r1, [r2, #1296]	; 0x510
   2f8e2:	f021 0101 	bic.w	r1, r1, #1
   2f8e6:	f8c2 1510 	str.w	r1, [r2, #1296]	; 0x510
			nrf_gpiote_int_disable(NRF_GPIOTE, BIT(i));
   2f8ea:	2201      	movs	r2, #1
   2f8ec:	fa02 f303 	lsl.w	r3, r2, r3
    p_reg->INTENCLR = mask;
   2f8f0:	f8c6 3308 	str.w	r3, [r6, #776]	; 0x308
	nrf_gpio_cfg_sense_set(abs_pin, NRF_GPIO_PIN_NOSENSE);
   2f8f4:	4620      	mov	r0, r4
   2f8f6:	2100      	movs	r1, #0
   2f8f8:	f7ff ffa4 	bl	2f844 <nrf_gpio_cfg_sense_set>
	if ((data->pin_int_en & BIT(pin)) && (data->int_en & BIT(pin))) {
   2f8fc:	68b8      	ldr	r0, [r7, #8]
   2f8fe:	40e8      	lsrs	r0, r5
   2f900:	f010 0001 	ands.w	r0, r0, #1
   2f904:	d04d      	beq.n	2f9a2 <gpiote_pin_int_cfg+0x106>
   2f906:	68f8      	ldr	r0, [r7, #12]
   2f908:	40e8      	lsrs	r0, r5
   2f90a:	f010 0001 	ands.w	r0, r0, #1
   2f90e:	d048      	beq.n	2f9a2 <gpiote_pin_int_cfg+0x106>
		if (data->trig_edge & BIT(pin)) {
   2f910:	6978      	ldr	r0, [r7, #20]
   2f912:	40e8      	lsrs	r0, r5
   2f914:	f010 0801 	ands.w	r8, r0, #1
   2f918:	d051      	beq.n	2f9be <gpiote_pin_int_cfg+0x122>
			if (data->double_edge & BIT(pin)) {
   2f91a:	69bb      	ldr	r3, [r7, #24]
   2f91c:	40eb      	lsrs	r3, r5
   2f91e:	07db      	lsls	r3, r3, #31
   2f920:	d445      	bmi.n	2f9ae <gpiote_pin_int_cfg+0x112>
			} else if (((data->active_level & BIT(pin)) != 0U)
   2f922:	693b      	ldr	r3, [r7, #16]
				   ^ ((BIT(pin) & data->inverted) != 0)) {
   2f924:	69fa      	ldr	r2, [r7, #28]
			} else if (((data->active_level & BIT(pin)) != 0U)
   2f926:	40eb      	lsrs	r3, r5
				   ^ ((BIT(pin) & data->inverted) != 0)) {
   2f928:	fa22 f505 	lsr.w	r5, r2, r5
			} else if (((data->active_level & BIT(pin)) != 0U)
   2f92c:	f003 0301 	and.w	r3, r3, #1
   2f930:	f005 0501 	and.w	r5, r5, #1
				pol = NRF_GPIOTE_POLARITY_HITOLO;
   2f934:	42ab      	cmp	r3, r5
   2f936:	bf14      	ite	ne
   2f938:	2501      	movne	r5, #1
   2f93a:	2502      	moveq	r5, #2
   2f93c:	2100      	movs	r1, #0
    p_reg->CONFIG[idx] = 0;
}

NRF_STATIC_INLINE bool nrf_gpiote_te_is_enabled(NRF_GPIOTE_Type const * p_reg, uint32_t idx)
{
    return (p_reg->CONFIG[idx] & GPIOTE_CONFIG_MODE_Msk) != GPIOTE_CONFIG_MODE_Disabled;
   2f93e:	f501 73a2 	add.w	r3, r1, #324	; 0x144
   2f942:	f856 0023 	ldr.w	r0, [r6, r3, lsl #2]
		if (!nrf_gpiote_te_is_enabled(NRF_GPIOTE, channel)) {
   2f946:	f010 0003 	ands.w	r0, r0, #3
   2f94a:	d132      	bne.n	2f9b2 <gpiote_pin_int_cfg+0x116>
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk | GPIOTE_CONFIG_POLARITY_Msk);
   2f94c:	008b      	lsls	r3, r1, #2
   2f94e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   2f952:	f503 3344 	add.w	r3, r3, #200704	; 0x31000
   2f956:	f8d3 2510 	ldr.w	r2, [r3, #1296]	; 0x510
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   2f95a:	0224      	lsls	r4, r4, #8
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk | GPIOTE_CONFIG_POLARITY_Msk);
   2f95c:	f422 3247 	bic.w	r2, r2, #203776	; 0x31c00
   2f960:	f422 7240 	bic.w	r2, r2, #768	; 0x300
   2f964:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   2f968:	f8d3 2510 	ldr.w	r2, [r3, #1296]	; 0x510
   2f96c:	f404 54f8 	and.w	r4, r4, #7936	; 0x1f00
   2f970:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
   2f974:	4315      	orrs	r5, r2
			nrf_gpiote_event_t evt =
   2f976:	f101 0240 	add.w	r2, r1, #64	; 0x40
   2f97a:	0092      	lsls	r2, r2, #2
    return ((uint32_t)p_reg + event);
   2f97c:	b292      	uxth	r2, r2
   2f97e:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
   2f982:	f502 3244 	add.w	r2, r2, #200704	; 0x31000
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   2f986:	f8c3 5510 	str.w	r5, [r3, #1296]	; 0x510
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   2f98a:	6010      	str	r0, [r2, #0]
   p_reg->CONFIG[idx] |= GPIOTE_CONFIG_MODE_Event;
   2f98c:	f8d3 2510 	ldr.w	r2, [r3, #1296]	; 0x510
   2f990:	f042 0201 	orr.w	r2, r2, #1
   2f994:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
			nrf_gpiote_int_enable(NRF_GPIOTE, BIT(channel));
   2f998:	2301      	movs	r3, #1
   2f99a:	fa03 f101 	lsl.w	r1, r3, r1
    p_reg->INTENSET = mask;
   2f99e:	f8c6 1304 	str.w	r1, [r6, #772]	; 0x304
}
   2f9a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	for (size_t i = 0; i < GPIOTE_CH_NUM; i++) {
   2f9a6:	3301      	adds	r3, #1
   2f9a8:	2b08      	cmp	r3, #8
   2f9aa:	d187      	bne.n	2f8bc <gpiote_pin_int_cfg+0x20>
   2f9ac:	e7a2      	b.n	2f8f4 <gpiote_pin_int_cfg+0x58>
				pol = NRF_GPIOTE_POLARITY_TOGGLE;
   2f9ae:	2503      	movs	r5, #3
   2f9b0:	e7c4      	b.n	2f93c <gpiote_pin_int_cfg+0xa0>
   2f9b2:	3101      	adds	r1, #1
	for (u8_t channel = 0; channel < GPIOTE_CH_NUM; ++channel) {
   2f9b4:	2908      	cmp	r1, #8
   2f9b6:	d1c2      	bne.n	2f93e <gpiote_pin_int_cfg+0xa2>
	return -ENODEV;
   2f9b8:	f06f 0012 	mvn.w	r0, #18
   2f9bc:	e7f1      	b.n	2f9a2 <gpiote_pin_int_cfg+0x106>
	if ((BIT(pin) & (data->active_level ^ data->inverted)) != 0) {
   2f9be:	693b      	ldr	r3, [r7, #16]
   2f9c0:	69fa      	ldr	r2, [r7, #28]
			nrf_gpio_cfg_sense_set(abs_pin, sense);
   2f9c2:	4620      	mov	r0, r4
	if ((BIT(pin) & (data->active_level ^ data->inverted)) != 0) {
   2f9c4:	4053      	eors	r3, r2
   2f9c6:	fa23 f505 	lsr.w	r5, r3, r5
		return NRF_GPIO_PIN_SENSE_HIGH;
   2f9ca:	f015 0f01 	tst.w	r5, #1
			nrf_gpio_cfg_sense_set(abs_pin, sense);
   2f9ce:	bf0c      	ite	eq
   2f9d0:	2103      	moveq	r1, #3
   2f9d2:	2102      	movne	r1, #2
   2f9d4:	f7ff ff36 	bl	2f844 <nrf_gpio_cfg_sense_set>
	int res = 0;
   2f9d8:	4640      	mov	r0, r8
   2f9da:	e7e2      	b.n	2f9a2 <gpiote_pin_int_cfg+0x106>
   2f9dc:	40031000 	.word	0x40031000

0002f9e0 <gpio_nrfx_config>:
{
   2f9e0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2f9e4:	4680      	mov	r8, r0
	struct gpio_nrfx_data *data = get_port_data(port);
   2f9e6:	6885      	ldr	r5, [r0, #8]
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK)) {
   2f9e8:	f403 4070 	and.w	r0, r3, #61440	; 0xf000
   2f9ec:	f5b0 4f80 	cmp.w	r0, #16384	; 0x4000
{
   2f9f0:	461e      	mov	r6, r3
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK)) {
   2f9f2:	d040      	beq.n	2fa76 <gpio_nrfx_config+0x96>
   2f9f4:	dc09      	bgt.n	2fa0a <gpio_nrfx_config+0x2a>
   2f9f6:	f5b0 5f80 	cmp.w	r0, #4096	; 0x1000
   2f9fa:	d03e      	beq.n	2fa7a <gpio_nrfx_config+0x9a>
   2f9fc:	f5b0 5f40 	cmp.w	r0, #12288	; 0x3000
   2fa00:	d03d      	beq.n	2fa7e <gpio_nrfx_config+0x9e>
   2fa02:	b190      	cbz	r0, 2fa2a <gpio_nrfx_config+0x4a>
		return -EINVAL;
   2fa04:	f06f 0015 	mvn.w	r0, #21
   2fa08:	e032      	b.n	2fa70 <gpio_nrfx_config+0x90>
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK)) {
   2fa0a:	f5b0 4fe0 	cmp.w	r0, #28672	; 0x7000
   2fa0e:	d038      	beq.n	2fa82 <gpio_nrfx_config+0xa2>
   2fa10:	dc04      	bgt.n	2fa1c <gpio_nrfx_config+0x3c>
   2fa12:	f5b0 4fa0 	cmp.w	r0, #20480	; 0x5000
   2fa16:	d1f5      	bne.n	2fa04 <gpio_nrfx_config+0x24>
		drive = NRF_GPIO_PIN_H0H1;
   2fa18:	2003      	movs	r0, #3
   2fa1a:	e006      	b.n	2fa2a <gpio_nrfx_config+0x4a>
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK)) {
   2fa1c:	f5b0 4f40 	cmp.w	r0, #49152	; 0xc000
   2fa20:	d031      	beq.n	2fa86 <gpio_nrfx_config+0xa6>
   2fa22:	f5b0 4f50 	cmp.w	r0, #53248	; 0xd000
   2fa26:	d1ed      	bne.n	2fa04 <gpio_nrfx_config+0x24>
		drive = NRF_GPIO_PIN_H0D1;
   2fa28:	2007      	movs	r0, #7
	if ((flags & GPIO_PUD_MASK) == GPIO_PUD_PULL_UP) {
   2fa2a:	f406 7740 	and.w	r7, r6, #768	; 0x300
   2fa2e:	f5b7 7f80 	cmp.w	r7, #256	; 0x100
   2fa32:	d02a      	beq.n	2fa8a <gpio_nrfx_config+0xaa>
		pull = NRF_GPIO_PIN_NOPULL;
   2fa34:	f5a7 7400 	sub.w	r4, r7, #512	; 0x200
   2fa38:	4263      	negs	r3, r4
   2fa3a:	4163      	adcs	r3, r4
	if (access_op == GPIO_ACCESS_BY_PORT) {
   2fa3c:	2901      	cmp	r1, #1
		from_pin = pin;
   2fa3e:	bf19      	ittee	ne
   2fa40:	b2d4      	uxtbne	r4, r2
		to_pin   = pin;
   2fa42:	46a1      	movne	r9, r4
		to_pin   = 31U;
   2fa44:	f04f 091f 	moveq.w	r9, #31
		from_pin = 0U;
   2fa48:	2400      	moveq	r4, #0
   2fa4a:	f04f 0b01 	mov.w	fp, #1
	dir = ((flags & GPIO_DIR_MASK) == GPIO_DIR_OUT)
   2fa4e:	f006 0c01 	and.w	ip, r6, #1
                               | ((uint32_t)input << GPIO_PIN_CNF_INPUT_Pos)
   2fa52:	ea4f 074c 	mov.w	r7, ip, lsl #1
                               | ((uint32_t)drive << GPIO_PIN_CNF_DRIVE_Pos)
   2fa56:	ea47 070c 	orr.w	r7, r7, ip
   2fa5a:	ea47 2000 	orr.w	r0, r7, r0, lsl #8
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
   2fa5e:	f8df a0a8 	ldr.w	sl, [pc, #168]	; 2fb08 <gpio_nrfx_config+0x128>
                               | ((uint32_t)drive << GPIO_PIN_CNF_DRIVE_Pos)
   2fa62:	ea40 0783 	orr.w	r7, r0, r3, lsl #2
		WRITE_BIT(data->pin_int_en, curr_pin, flags & GPIO_INT);
   2fa66:	f006 0302 	and.w	r3, r6, #2
	for (u8_t curr_pin = from_pin; curr_pin <= to_pin; ++curr_pin) {
   2fa6a:	45a1      	cmp	r9, r4
   2fa6c:	d20f      	bcs.n	2fa8e <gpio_nrfx_config+0xae>
	return 0;
   2fa6e:	2000      	movs	r0, #0
}
   2fa70:	b003      	add	sp, #12
   2fa72:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		drive = NRF_GPIO_PIN_S0H1;
   2fa76:	2002      	movs	r0, #2
   2fa78:	e7d7      	b.n	2fa2a <gpio_nrfx_config+0x4a>
		drive = NRF_GPIO_PIN_H0S1;
   2fa7a:	2001      	movs	r0, #1
   2fa7c:	e7d5      	b.n	2fa2a <gpio_nrfx_config+0x4a>
		drive = NRF_GPIO_PIN_D0S1;
   2fa7e:	2004      	movs	r0, #4
   2fa80:	e7d3      	b.n	2fa2a <gpio_nrfx_config+0x4a>
		drive = NRF_GPIO_PIN_D0H1;
   2fa82:	2005      	movs	r0, #5
   2fa84:	e7d1      	b.n	2fa2a <gpio_nrfx_config+0x4a>
		drive = NRF_GPIO_PIN_S0D1;
   2fa86:	2006      	movs	r0, #6
   2fa88:	e7cf      	b.n	2fa2a <gpio_nrfx_config+0x4a>
		pull = NRF_GPIO_PIN_PULLUP;
   2fa8a:	2303      	movs	r3, #3
   2fa8c:	e7d6      	b.n	2fa3c <gpio_nrfx_config+0x5c>
	return port->config->config_info;
   2fa8e:	f8d8 2000 	ldr.w	r2, [r8]
		nrf_gpio_cfg(NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num,
   2fa92:	6892      	ldr	r2, [r2, #8]
   2fa94:	7911      	ldrb	r1, [r2, #4]
   2fa96:	f004 021f 	and.w	r2, r4, #31
   2fa9a:	ea42 1241 	orr.w	r2, r2, r1, lsl #5
    NRFX_ASSERT(*p_pin < NUMBER_OF_PINS);
   2fa9e:	2a1f      	cmp	r2, #31
   2faa0:	dd01      	ble.n	2faa6 <gpio_nrfx_config+0xc6>
   2faa2:	f7ff fec1 	bl	2f828 <nrf_gpio_pin_port_decode.isra.8.part.9>
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
   2faa6:	3280      	adds	r2, #128	; 0x80
   2faa8:	f84a 7022 	str.w	r7, [sl, r2, lsl #2]
		WRITE_BIT(data->pin_int_en, curr_pin, flags & GPIO_INT);
   2faac:	68a9      	ldr	r1, [r5, #8]
   2faae:	fa0b f204 	lsl.w	r2, fp, r4
   2fab2:	2b00      	cmp	r3, #0
   2fab4:	d025      	beq.n	2fb02 <gpio_nrfx_config+0x122>
   2fab6:	4311      	orrs	r1, r2
   2fab8:	60a9      	str	r1, [r5, #8]
		WRITE_BIT(data->trig_edge, curr_pin, flags & GPIO_INT_EDGE);
   2faba:	6969      	ldr	r1, [r5, #20]
   2fabc:	06b0      	lsls	r0, r6, #26
   2fabe:	bf4c      	ite	mi
   2fac0:	4311      	orrmi	r1, r2
   2fac2:	4391      	bicpl	r1, r2
   2fac4:	6169      	str	r1, [r5, #20]
		WRITE_BIT(data->double_edge, curr_pin,
   2fac6:	69a9      	ldr	r1, [r5, #24]
   2fac8:	0670      	lsls	r0, r6, #25
   2faca:	bf4c      	ite	mi
   2facc:	4311      	orrmi	r1, r2
   2face:	4391      	bicpl	r1, r2
   2fad0:	61a9      	str	r1, [r5, #24]
		WRITE_BIT(data->active_level, curr_pin,
   2fad2:	6929      	ldr	r1, [r5, #16]
   2fad4:	0770      	lsls	r0, r6, #29
   2fad6:	bf4c      	ite	mi
   2fad8:	4311      	orrmi	r1, r2
   2fada:	4391      	bicpl	r1, r2
   2fadc:	6129      	str	r1, [r5, #16]
		WRITE_BIT(data->inverted, curr_pin, flags & GPIO_POL_INV);
   2fade:	69e9      	ldr	r1, [r5, #28]
   2fae0:	0630      	lsls	r0, r6, #24
   2fae2:	bf4c      	ite	mi
   2fae4:	430a      	orrmi	r2, r1
   2fae6:	ea21 0202 	bicpl.w	r2, r1, r2
   2faea:	61ea      	str	r2, [r5, #28]
		res = gpiote_pin_int_cfg(port, curr_pin);
   2faec:	4621      	mov	r1, r4
   2faee:	4640      	mov	r0, r8
   2faf0:	9301      	str	r3, [sp, #4]
   2faf2:	f7ff fed3 	bl	2f89c <gpiote_pin_int_cfg>
		if (res != 0) {
   2faf6:	2800      	cmp	r0, #0
   2faf8:	d1ba      	bne.n	2fa70 <gpio_nrfx_config+0x90>
	for (u8_t curr_pin = from_pin; curr_pin <= to_pin; ++curr_pin) {
   2fafa:	3401      	adds	r4, #1
   2fafc:	b2e4      	uxtb	r4, r4
   2fafe:	9b01      	ldr	r3, [sp, #4]
   2fb00:	e7b3      	b.n	2fa6a <gpio_nrfx_config+0x8a>
		WRITE_BIT(data->pin_int_en, curr_pin, flags & GPIO_INT);
   2fb02:	ea21 0102 	bic.w	r1, r1, r2
   2fb06:	e7d7      	b.n	2fab8 <gpio_nrfx_config+0xd8>
   2fb08:	40842500 	.word	0x40842500

0002fb0c <gpiote_event_handler>:
{
   2fb0c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   2fb10:	4b56      	ldr	r3, [pc, #344]	; (2fc6c <gpiote_event_handler+0x160>)
   2fb12:	681e      	ldr	r6, [r3, #0]
	if (port_event) {
   2fb14:	4698      	mov	r8, r3
   2fb16:	2e00      	cmp	r6, #0
   2fb18:	d05e      	beq.n	2fbd8 <gpiote_event_handler+0xcc>
	u32_t bit = 1U << pin;
   2fb1a:	2701      	movs	r7, #1
	u32_t pin = 0U;
   2fb1c:	f04f 0a00 	mov.w	sl, #0
	struct gpio_nrfx_data *data = get_port_data(port);
   2fb20:	4a53      	ldr	r2, [pc, #332]	; (2fc70 <gpiote_event_handler+0x164>)
   2fb22:	6893      	ldr	r3, [r2, #8]
	return port->config->config_info;
   2fb24:	6812      	ldr	r2, [r2, #0]
	u32_t pin_states = ~(port_in ^ data->inverted ^ data->active_level);
   2fb26:	69dc      	ldr	r4, [r3, #28]
	return port->config->config_info;
   2fb28:	f8d2 9008 	ldr.w	r9, [r2, #8]
	u32_t out = data->int_en & data->pin_int_en;
   2fb2c:	e9d3 2502 	ldrd	r2, r5, [r3, #8]
   2fb30:	4015      	ands	r5, r2
	out &= ~data->trig_edge & ~data->double_edge;
   2fb32:	e9d3 2105 	ldrd	r2, r1, [r3, #20]
   2fb36:	430a      	orrs	r2, r1
   2fb38:	ea25 0502 	bic.w	r5, r5, r2
	u32_t port_in = nrf_gpio_port_in_read(cfg->port);
   2fb3c:	f8d9 2000 	ldr.w	r2, [r9]
	u32_t pin_states = ~(port_in ^ data->inverted ^ data->active_level);
   2fb40:	691b      	ldr	r3, [r3, #16]
}


NRF_STATIC_INLINE uint32_t nrf_gpio_port_in_read(NRF_GPIO_Type const * p_reg)
{
    return p_reg->IN;
   2fb42:	6912      	ldr	r2, [r2, #16]
   2fb44:	405c      	eors	r4, r3
   2fb46:	4054      	eors	r4, r2
	u32_t out = pin_states & level_pins;
   2fb48:	ea25 0404 	bic.w	r4, r5, r4
	while (level_pins) {
   2fb4c:	bb9d      	cbnz	r5, 2fbb6 <gpiote_event_handler+0xaa>
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   2fb4e:	f8c8 5000 	str.w	r5, [r8]
	u32_t fired_triggers[GPIO_COUNT] = {0};
   2fb52:	2300      	movs	r3, #0
		if (nrf_gpiote_int_enable_check(NRF_GPIOTE, BIT(i)) &&
   2fb54:	2001      	movs	r0, #1
   2fb56:	461f      	mov	r7, r3
    return p_reg->INTENSET & mask;
   2fb58:	4946      	ldr	r1, [pc, #280]	; (2fc74 <gpiote_event_handler+0x168>)
   2fb5a:	4d47      	ldr	r5, [pc, #284]	; (2fc78 <gpiote_event_handler+0x16c>)
   2fb5c:	f8d1 2304 	ldr.w	r2, [r1, #772]	; 0x304
   2fb60:	fa00 fc03 	lsl.w	ip, r0, r3
   2fb64:	ea1c 0f02 	tst.w	ip, r2
   2fb68:	d00d      	beq.n	2fb86 <gpiote_event_handler+0x7a>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   2fb6a:	f855 2023 	ldr.w	r2, [r5, r3, lsl #2]
   2fb6e:	b152      	cbz	r2, 2fb86 <gpiote_event_handler+0x7a>
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
   2fb70:	f503 72a2 	add.w	r2, r3, #324	; 0x144
   2fb74:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   2fb78:	f845 7023 	str.w	r7, [r5, r3, lsl #2]
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
   2fb7c:	f3c2 2204 	ubfx	r2, r2, #8, #5
			fired_triggers[abs_pin / 32U] |= BIT(abs_pin % 32);
   2fb80:	fa00 f202 	lsl.w	r2, r0, r2
   2fb84:	4314      	orrs	r4, r2
	for (size_t i = 0; i < GPIOTE_CH_NUM; i++) {
   2fb86:	3301      	adds	r3, #1
   2fb88:	2b08      	cmp	r3, #8
   2fb8a:	d1e7      	bne.n	2fb5c <gpiote_event_handler+0x50>
	if (fired_triggers[0]) {
   2fb8c:	bb34      	cbnz	r4, 2fbdc <gpiote_event_handler+0xd0>
	if (port_event) {
   2fb8e:	b186      	cbz	r6, 2fbb2 <gpiote_event_handler+0xa6>
	u32_t bit = 1U << pin;
   2fb90:	2701      	movs	r7, #1
	u32_t pin = 0U;
   2fb92:	f04f 0800 	mov.w	r8, #0
	const struct gpio_nrfx_data *data = get_port_data(port);
   2fb96:	4b36      	ldr	r3, [pc, #216]	; (2fc70 <gpiote_event_handler+0x164>)
   2fb98:	689d      	ldr	r5, [r3, #8]
	return port->config->config_info;
   2fb9a:	681b      	ldr	r3, [r3, #0]
   2fb9c:	689e      	ldr	r6, [r3, #8]
	u32_t out = data->int_en & data->pin_int_en;
   2fb9e:	e9d5 3402 	ldrd	r3, r4, [r5, #8]
   2fba2:	401c      	ands	r4, r3
	out &= ~data->trig_edge & ~data->double_edge;
   2fba4:	e9d5 3205 	ldrd	r3, r2, [r5, #20]
   2fba8:	4313      	orrs	r3, r2
   2fbaa:	ea24 0403 	bic.w	r4, r4, r3
	while (level_pins) {
   2fbae:	2c00      	cmp	r4, #0
   2fbb0:	d142      	bne.n	2fc38 <gpiote_event_handler+0x12c>
}
   2fbb2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (level_pins & bit) {
   2fbb6:	423d      	tst	r5, r7
   2fbb8:	d00a      	beq.n	2fbd0 <gpiote_event_handler+0xc4>
			u32_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
   2fbba:	f899 3004 	ldrb.w	r3, [r9, #4]
   2fbbe:	f00a 001f 	and.w	r0, sl, #31
			nrf_gpio_cfg_sense_set(abs_pin, NRF_GPIO_PIN_NOSENSE);
   2fbc2:	2100      	movs	r1, #0
   2fbc4:	ea40 1043 	orr.w	r0, r0, r3, lsl #5
   2fbc8:	f7ff fe3c 	bl	2f844 <nrf_gpio_cfg_sense_set>
			level_pins &= ~bit;
   2fbcc:	ea25 0507 	bic.w	r5, r5, r7
		++pin;
   2fbd0:	f10a 0a01 	add.w	sl, sl, #1
		bit <<= 1;
   2fbd4:	007f      	lsls	r7, r7, #1
   2fbd6:	e7b9      	b.n	2fb4c <gpiote_event_handler+0x40>
	u32_t fired_triggers[GPIO_COUNT] = {0};
   2fbd8:	4634      	mov	r4, r6
   2fbda:	e7ba      	b.n	2fb52 <gpiote_event_handler+0x46>
	struct gpio_nrfx_data *data = get_port_data(port);
   2fbdc:	4b24      	ldr	r3, [pc, #144]	; (2fc70 <gpiote_event_handler+0x164>)
   2fbde:	f8d3 9008 	ldr.w	r9, [r3, #8]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
   2fbe2:	f8d9 5000 	ldr.w	r5, [r9]
   2fbe6:	2d00      	cmp	r5, #0
   2fbe8:	d0d1      	beq.n	2fb8e <gpiote_event_handler+0x82>
			cb->handler(port, cb, pins);
   2fbea:	4698      	mov	r8, r3
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   2fbec:	682f      	ldr	r7, [r5, #0]
			__ASSERT(cb->handler, "No callback handler!");
   2fbee:	f8df a094 	ldr.w	sl, [pc, #148]	; 2fc84 <gpiote_event_handler+0x178>
   2fbf2:	f8df b094 	ldr.w	fp, [pc, #148]	; 2fc88 <gpiote_event_handler+0x17c>
		if ((cb->pin_mask & pins) & data->int_en) {
   2fbf6:	f8d9 300c 	ldr.w	r3, [r9, #12]
   2fbfa:	68aa      	ldr	r2, [r5, #8]
   2fbfc:	4023      	ands	r3, r4
   2fbfe:	4213      	tst	r3, r2
   2fc00:	d015      	beq.n	2fc2e <gpiote_event_handler+0x122>
			__ASSERT(cb->handler, "No callback handler!");
   2fc02:	686b      	ldr	r3, [r5, #4]
   2fc04:	b973      	cbnz	r3, 2fc24 <gpiote_event_handler+0x118>
   2fc06:	4659      	mov	r1, fp
   2fc08:	f44f 73d2 	mov.w	r3, #420	; 0x1a4
   2fc0c:	4652      	mov	r2, sl
   2fc0e:	481b      	ldr	r0, [pc, #108]	; (2fc7c <gpiote_event_handler+0x170>)
   2fc10:	f010 fcf7 	bl	40602 <printk>
   2fc14:	481a      	ldr	r0, [pc, #104]	; (2fc80 <gpiote_event_handler+0x174>)
   2fc16:	f010 fcf4 	bl	40602 <printk>
   2fc1a:	f44f 71d2 	mov.w	r1, #420	; 0x1a4
   2fc1e:	4650      	mov	r0, sl
   2fc20:	f010 fdb2 	bl	40788 <assert_post_action>
			cb->handler(port, cb, pins);
   2fc24:	686b      	ldr	r3, [r5, #4]
   2fc26:	4622      	mov	r2, r4
   2fc28:	4629      	mov	r1, r5
   2fc2a:	4640      	mov	r0, r8
   2fc2c:	4798      	blx	r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
   2fc2e:	2f00      	cmp	r7, #0
   2fc30:	d0ad      	beq.n	2fb8e <gpiote_event_handler+0x82>
   2fc32:	463d      	mov	r5, r7
   2fc34:	683f      	ldr	r7, [r7, #0]
   2fc36:	e7de      	b.n	2fbf6 <gpiote_event_handler+0xea>
		if (level_pins & bit) {
   2fc38:	4227      	tst	r7, r4
   2fc3a:	d013      	beq.n	2fc64 <gpiote_event_handler+0x158>
	if ((BIT(pin) & (data->active_level ^ data->inverted)) != 0) {
   2fc3c:	692b      	ldr	r3, [r5, #16]
   2fc3e:	69ea      	ldr	r2, [r5, #28]
			u32_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
   2fc40:	f896 c004 	ldrb.w	ip, [r6, #4]
	if ((BIT(pin) & (data->active_level ^ data->inverted)) != 0) {
   2fc44:	4053      	eors	r3, r2
   2fc46:	fa23 f308 	lsr.w	r3, r3, r8
		return NRF_GPIO_PIN_SENSE_HIGH;
   2fc4a:	f013 0f01 	tst.w	r3, #1
			u32_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
   2fc4e:	f008 001f 	and.w	r0, r8, #31
			nrf_gpio_cfg_sense_set(abs_pin, sense);
   2fc52:	bf0c      	ite	eq
   2fc54:	2103      	moveq	r1, #3
   2fc56:	2102      	movne	r1, #2
   2fc58:	ea40 104c 	orr.w	r0, r0, ip, lsl #5
   2fc5c:	f7ff fdf2 	bl	2f844 <nrf_gpio_cfg_sense_set>
			level_pins &= ~bit;
   2fc60:	ea24 0407 	bic.w	r4, r4, r7
		++pin;
   2fc64:	f108 0801 	add.w	r8, r8, #1
		bit <<= 1;
   2fc68:	007f      	lsls	r7, r7, #1
   2fc6a:	e7a0      	b.n	2fbae <gpiote_event_handler+0xa2>
   2fc6c:	4003117c 	.word	0x4003117c
   2fc70:	20032958 	.word	0x20032958
   2fc74:	40031000 	.word	0x40031000
   2fc78:	40031100 	.word	0x40031100
   2fc7c:	0004764f 	.word	0x0004764f
   2fc80:	0004c2cd 	.word	0x0004c2cd
   2fc84:	0004c2e4 	.word	0x0004c2e4
   2fc88:	0004c310 	.word	0x0004c310

0002fc8c <flash_nrf_pages_layout>:

static void flash_nrf_pages_layout(struct device *dev,
				     const struct flash_pages_layout **layout,
				     size_t *layout_size)
{
	*layout = &dev_layout;
   2fc8c:	4b02      	ldr	r3, [pc, #8]	; (2fc98 <flash_nrf_pages_layout+0xc>)
   2fc8e:	600b      	str	r3, [r1, #0]
	*layout_size = 1;
   2fc90:	2301      	movs	r3, #1
   2fc92:	6013      	str	r3, [r2, #0]
}
   2fc94:	4770      	bx	lr
   2fc96:	bf00      	nop
   2fc98:	20024c68 	.word	0x20024c68

0002fc9c <flash_nrf_erase>:
{
   2fc9c:	b570      	push	{r4, r5, r6, lr}
   2fc9e:	460d      	mov	r5, r1
   2fca0:	4614      	mov	r4, r2
	u32_t pg_size = nrfx_nvmc_flash_page_size_get();
   2fca2:	f014 fec6 	bl	44a32 <nrfx_nvmc_flash_page_size_get>
	if (is_regular_addr_valid(addr, size)) {
   2fca6:	4621      	mov	r1, r4
	u32_t pg_size = nrfx_nvmc_flash_page_size_get();
   2fca8:	4606      	mov	r6, r0
	if (is_regular_addr_valid(addr, size)) {
   2fcaa:	4628      	mov	r0, r5
   2fcac:	f013 ffac 	bl	43c08 <is_regular_addr_valid>
   2fcb0:	b1f0      	cbz	r0, 2fcf0 <flash_nrf_erase+0x54>
		if (((addr % pg_size) != 0) || ((size % pg_size) != 0)) {
   2fcb2:	fbb5 f3f6 	udiv	r3, r5, r6
   2fcb6:	fb06 5313 	mls	r3, r6, r3, r5
   2fcba:	b9cb      	cbnz	r3, 2fcf0 <flash_nrf_erase+0x54>
   2fcbc:	fbb4 f0f6 	udiv	r0, r4, r6
   2fcc0:	fb06 4010 	mls	r0, r6, r0, r4
   2fcc4:	b9a0      	cbnz	r0, 2fcf0 <flash_nrf_erase+0x54>
		if (!n_pages) {
   2fcc6:	42a6      	cmp	r6, r4
   2fcc8:	d811      	bhi.n	2fcee <flash_nrf_erase+0x52>
	return z_impl_k_sem_take(sem, timeout);
   2fcca:	f04f 31ff 	mov.w	r1, #4294967295
   2fcce:	480a      	ldr	r0, [pc, #40]	; (2fcf8 <flash_nrf_erase+0x5c>)
   2fcd0:	f00d fc22 	bl	3d518 <z_impl_k_sem_take>

#endif /* CONFIG_SOC_FLASH_NRF_RADIO_SYNC */

static int erase_op(void *context)
{
	u32_t pg_size = nrfx_nvmc_flash_page_size_get();
   2fcd4:	f014 fead 	bl	44a32 <nrfx_nvmc_flash_page_size_get>
   2fcd8:	4606      	mov	r6, r0
		return FLASH_OP_DONE;
	}
#endif

	do {
		(void)nrfx_nvmc_page_erase(e_ctx->flash_addr);
   2fcda:	4628      	mov	r0, r5
   2fcdc:	f00b f96c 	bl	3afb8 <nrfx_nvmc_page_erase>
				break;
			}
		}
#endif /* CONFIG_SOC_FLASH_NRF_RADIO_SYNC */

	} while (e_ctx->len > 0);
   2fce0:	1ba4      	subs	r4, r4, r6
   2fce2:	4435      	add	r5, r6
   2fce4:	d1f9      	bne.n	2fcda <flash_nrf_erase+0x3e>
	z_impl_k_sem_give(sem);
   2fce6:	4804      	ldr	r0, [pc, #16]	; (2fcf8 <flash_nrf_erase+0x5c>)
   2fce8:	f00d fbcc 	bl	3d484 <z_impl_k_sem_give>
	return ret;
   2fcec:	4620      	mov	r0, r4
}
   2fcee:	bd70      	pop	{r4, r5, r6, pc}
		return -EINVAL;
   2fcf0:	f06f 0015 	mvn.w	r0, #21
   2fcf4:	e7fb      	b.n	2fcee <flash_nrf_erase+0x52>
   2fcf6:	bf00      	nop
   2fcf8:	20024c70 	.word	0x20024c70

0002fcfc <nrf_flash_init>:
{
   2fcfc:	b510      	push	{r4, lr}
	return z_impl_k_sem_init(sem, initial_count, limit);
   2fcfe:	2201      	movs	r2, #1
   2fd00:	4806      	ldr	r0, [pc, #24]	; (2fd1c <nrf_flash_init+0x20>)
   2fd02:	4611      	mov	r1, r2
   2fd04:	f014 ff4a 	bl	44b9c <z_impl_k_sem_init>
	dev_layout.pages_count = nrfx_nvmc_flash_page_count_get();
   2fd08:	f014 fe96 	bl	44a38 <nrfx_nvmc_flash_page_count_get>
   2fd0c:	4c04      	ldr	r4, [pc, #16]	; (2fd20 <nrf_flash_init+0x24>)
   2fd0e:	6020      	str	r0, [r4, #0]
	dev_layout.pages_size = nrfx_nvmc_flash_page_size_get();
   2fd10:	f014 fe8f 	bl	44a32 <nrfx_nvmc_flash_page_size_get>
   2fd14:	6060      	str	r0, [r4, #4]
}
   2fd16:	2000      	movs	r0, #0
   2fd18:	bd10      	pop	{r4, pc}
   2fd1a:	bf00      	nop
   2fd1c:	20024c70 	.word	0x20024c70
   2fd20:	20024c68 	.word	0x20024c68

0002fd24 <flash_nrf_write>:
{
   2fd24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2fd26:	460e      	mov	r6, r1
	if (is_regular_addr_valid(addr, len)) {
   2fd28:	4619      	mov	r1, r3
   2fd2a:	4630      	mov	r0, r6
{
   2fd2c:	4617      	mov	r7, r2
   2fd2e:	461c      	mov	r4, r3
	if (is_regular_addr_valid(addr, len)) {
   2fd30:	f013 ff6a 	bl	43c08 <is_regular_addr_valid>
   2fd34:	b1f8      	cbz	r0, 2fd76 <flash_nrf_write+0x52>
	return (data & 0x3) ? false : true;
   2fd36:	ea46 0504 	orr.w	r5, r6, r4
	if (!is_aligned_32(addr) || (len % sizeof(u32_t))) {
   2fd3a:	f015 0503 	ands.w	r5, r5, #3
   2fd3e:	d11a      	bne.n	2fd76 <flash_nrf_write+0x52>
	if (!len) {
   2fd40:	b1e4      	cbz	r4, 2fd7c <flash_nrf_write+0x58>
	return z_impl_k_sem_take(sem, timeout);
   2fd42:	f04f 31ff 	mov.w	r1, #4294967295
   2fd46:	480e      	ldr	r0, [pc, #56]	; (2fd80 <flash_nrf_write+0x5c>)
   2fd48:	f00d fbe6 	bl	3d518 <z_impl_k_sem_take>
	w_ctx->flash_addr += shift;
	w_ctx->data_addr += shift;
	w_ctx->len -= shift;
}

static int write_op(void *context)
   2fd4c:	f024 0403 	bic.w	r4, r4, #3
		}
#endif /* CONFIG_SOC_FLASH_NRF_RADIO_SYNC */
	}
#endif /* CONFIG_SOC_FLASH_NRF_EMULATE_ONE_BYTE_WRITE_ACCESS */
	/* Write all the 4-byte aligned data */
	while (w_ctx->len >= sizeof(u32_t)) {
   2fd50:	42a5      	cmp	r5, r4
   2fd52:	eb06 0005 	add.w	r0, r6, r5
   2fd56:	d109      	bne.n	2fd6c <flash_nrf_write+0x48>

#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE bool nrf_nvmc_ready_check(NRF_NVMC_Type const * p_reg)
{
    return (bool)(p_reg->READY & NVMC_READY_READY_Msk);
   2fd58:	4a0a      	ldr	r2, [pc, #40]	; (2fd84 <flash_nrf_write+0x60>)
   2fd5a:	f8d2 3400 	ldr.w	r3, [r2, #1024]	; 0x400
	while (!nrfx_nvmc_write_done_check()) {
   2fd5e:	07db      	lsls	r3, r3, #31
   2fd60:	d5fb      	bpl.n	2fd5a <flash_nrf_write+0x36>
	z_impl_k_sem_give(sem);
   2fd62:	4807      	ldr	r0, [pc, #28]	; (2fd80 <flash_nrf_write+0x5c>)
   2fd64:	f00d fb8e 	bl	3d484 <z_impl_k_sem_give>
   2fd68:	2000      	movs	r0, #0
}
   2fd6a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		nrfx_nvmc_word_write(w_ctx->flash_addr,
   2fd6c:	5979      	ldr	r1, [r7, r5]
   2fd6e:	f00b f94f 	bl	3b010 <nrfx_nvmc_word_write>
	w_ctx->len -= shift;
   2fd72:	3504      	adds	r5, #4
   2fd74:	e7ec      	b.n	2fd50 <flash_nrf_write+0x2c>
		return -EINVAL;
   2fd76:	f06f 0015 	mvn.w	r0, #21
   2fd7a:	e7f6      	b.n	2fd6a <flash_nrf_write+0x46>
		return 0;
   2fd7c:	4620      	mov	r0, r4
   2fd7e:	e7f4      	b.n	2fd6a <flash_nrf_write+0x46>
   2fd80:	20024c70 	.word	0x20024c70
   2fd84:	40039000 	.word	0x40039000

0002fd88 <uarte_nrfx_configure>:
	return 0;
}

static int uarte_nrfx_configure(struct device *dev,
				const struct uart_config *cfg)
{
   2fd88:	b5f0      	push	{r4, r5, r6, r7, lr}
	nrf_uarte_config_t uarte_cfg;

#if defined(UARTE_CONFIG_STOP_Msk)
	switch (cfg->stop_bits) {
   2fd8a:	794b      	ldrb	r3, [r1, #5]
   2fd8c:	2b01      	cmp	r3, #1
   2fd8e:	d029      	beq.n	2fde4 <uarte_nrfx_configure+0x5c>
   2fd90:	2b03      	cmp	r3, #3
   2fd92:	d124      	bne.n	2fdde <uarte_nrfx_configure+0x56>
	case UART_CFG_STOP_BITS_1:
		uarte_cfg.stop = NRF_UARTE_STOP_ONE;
		break;
	case UART_CFG_STOP_BITS_2:
		uarte_cfg.stop = NRF_UARTE_STOP_TWO;
   2fd94:	2610      	movs	r6, #16
	if (cfg->stop_bits != UART_CFG_STOP_BITS_1) {
		return -ENOTSUP;
	}
#endif

	if (cfg->data_bits != UART_CFG_DATA_BITS_8) {
   2fd96:	798b      	ldrb	r3, [r1, #6]
   2fd98:	2b03      	cmp	r3, #3
   2fd9a:	d120      	bne.n	2fdde <uarte_nrfx_configure+0x56>
		return -ENOTSUP;
	}

	switch (cfg->flow_ctrl) {
   2fd9c:	79cc      	ldrb	r4, [r1, #7]
   2fd9e:	b12c      	cbz	r4, 2fdac <uarte_nrfx_configure+0x24>
   2fda0:	2c01      	cmp	r4, #1
   2fda2:	d11c      	bne.n	2fdde <uarte_nrfx_configure+0x56>
	return dev->config->config_info;
   2fda4:	6803      	ldr	r3, [r0, #0]
	case UART_CFG_FLOW_CTRL_NONE:
		uarte_cfg.hwfc = NRF_UARTE_HWFC_DISABLED;
		break;
	case UART_CFG_FLOW_CTRL_RTS_CTS:
		if (get_dev_config(dev)->rts_cts_pins_set) {
   2fda6:	689b      	ldr	r3, [r3, #8]
   2fda8:	791b      	ldrb	r3, [r3, #4]
   2fdaa:	b1c3      	cbz	r3, 2fdde <uarte_nrfx_configure+0x56>
	}

#if defined(UARTE_CONFIG_PARITYTYPE_Msk)
	uarte_cfg.paritytype = NRF_UARTE_PARITYTYPE_EVEN;
#endif
	switch (cfg->parity) {
   2fdac:	790a      	ldrb	r2, [r1, #4]
   2fdae:	b112      	cbz	r2, 2fdb6 <uarte_nrfx_configure+0x2e>
   2fdb0:	2a02      	cmp	r2, #2
   2fdb2:	d114      	bne.n	2fdde <uarte_nrfx_configure+0x56>
	case UART_CFG_PARITY_NONE:
		uarte_cfg.parity = NRF_UARTE_PARITY_EXCLUDED;
		break;
	case UART_CFG_PARITY_EVEN:
		uarte_cfg.parity = NRF_UARTE_PARITY_INCLUDED;
   2fdb4:	220e      	movs	r2, #14
	switch (baudrate) {
   2fdb6:	f647 2712 	movw	r7, #31250	; 0x7a12
	return dev->config->config_info;
   2fdba:	6805      	ldr	r5, [r0, #0]
#endif
	default:
		return -ENOTSUP;
	}

	if (baudrate_set(dev, cfg->baudrate) != 0) {
   2fdbc:	680b      	ldr	r3, [r1, #0]
	return config->uarte_regs;
   2fdbe:	68ad      	ldr	r5, [r5, #8]
	switch (baudrate) {
   2fdc0:	42bb      	cmp	r3, r7
	return config->uarte_regs;
   2fdc2:	682d      	ldr	r5, [r5, #0]
	switch (baudrate) {
   2fdc4:	d062      	beq.n	2fe8c <uarte_nrfx_configure+0x104>
   2fdc6:	d829      	bhi.n	2fe1c <uarte_nrfx_configure+0x94>
   2fdc8:	f5b3 5f96 	cmp.w	r3, #4800	; 0x12c0
   2fdcc:	d061      	beq.n	2fe92 <uarte_nrfx_configure+0x10a>
   2fdce:	d814      	bhi.n	2fdfa <uarte_nrfx_configure+0x72>
   2fdd0:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
   2fdd4:	d05f      	beq.n	2fe96 <uarte_nrfx_configure+0x10e>
   2fdd6:	d807      	bhi.n	2fde8 <uarte_nrfx_configure+0x60>
   2fdd8:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
   2fddc:	d05e      	beq.n	2fe9c <uarte_nrfx_configure+0x114>
		return -ENOTSUP;
   2fdde:	f06f 0085 	mvn.w	r0, #133	; 0x85
   2fde2:	e052      	b.n	2fe8a <uarte_nrfx_configure+0x102>
		uarte_cfg.stop = NRF_UARTE_STOP_ONE;
   2fde4:	2600      	movs	r6, #0
   2fde6:	e7d6      	b.n	2fd96 <uarte_nrfx_configure+0xe>
	switch (baudrate) {
   2fde8:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
   2fdec:	d059      	beq.n	2fea2 <uarte_nrfx_configure+0x11a>
   2fdee:	f5b3 6f16 	cmp.w	r3, #2400	; 0x960
   2fdf2:	d1f4      	bne.n	2fdde <uarte_nrfx_configure+0x56>
		nrf_baudrate = NRF_UARTE_BAUDRATE_2400;
   2fdf4:	f44f 231d 	mov.w	r3, #643072	; 0x9d000
   2fdf8:	e03c      	b.n	2fe74 <uarte_nrfx_configure+0xec>
	switch (baudrate) {
   2fdfa:	f5b3 5f61 	cmp.w	r3, #14400	; 0x3840
   2fdfe:	d053      	beq.n	2fea8 <uarte_nrfx_configure+0x120>
   2fe00:	d804      	bhi.n	2fe0c <uarte_nrfx_configure+0x84>
   2fe02:	f5b3 5f16 	cmp.w	r3, #9600	; 0x2580
   2fe06:	d1ea      	bne.n	2fdde <uarte_nrfx_configure+0x56>
		nrf_baudrate = NRF_UARTE_BAUDRATE_9600;
   2fe08:	4b32      	ldr	r3, [pc, #200]	; (2fed4 <uarte_nrfx_configure+0x14c>)
   2fe0a:	e033      	b.n	2fe74 <uarte_nrfx_configure+0xec>
	switch (baudrate) {
   2fe0c:	f5b3 4f96 	cmp.w	r3, #19200	; 0x4b00
   2fe10:	d04c      	beq.n	2feac <uarte_nrfx_configure+0x124>
   2fe12:	f5b3 4fe1 	cmp.w	r3, #28800	; 0x7080
   2fe16:	d1e2      	bne.n	2fdde <uarte_nrfx_configure+0x56>
		nrf_baudrate = NRF_UARTE_BAUDRATE_28800;
   2fe18:	4b2f      	ldr	r3, [pc, #188]	; (2fed8 <uarte_nrfx_configure+0x150>)
   2fe1a:	e02b      	b.n	2fe74 <uarte_nrfx_configure+0xec>
	switch (baudrate) {
   2fe1c:	f5b3 3fe1 	cmp.w	r3, #115200	; 0x1c200
   2fe20:	d046      	beq.n	2feb0 <uarte_nrfx_configure+0x128>
   2fe22:	d812      	bhi.n	2fe4a <uarte_nrfx_configure+0xc2>
   2fe24:	f64d 27c0 	movw	r7, #56000	; 0xdac0
   2fe28:	42bb      	cmp	r3, r7
   2fe2a:	d044      	beq.n	2feb6 <uarte_nrfx_configure+0x12e>
   2fe2c:	d805      	bhi.n	2fe3a <uarte_nrfx_configure+0xb2>
   2fe2e:	f5b3 4f16 	cmp.w	r3, #38400	; 0x9600
   2fe32:	d1d4      	bne.n	2fdde <uarte_nrfx_configure+0x56>
		nrf_baudrate = NRF_UARTE_BAUDRATE_38400;
   2fe34:	f44f 031d 	mov.w	r3, #10289152	; 0x9d0000
   2fe38:	e01c      	b.n	2fe74 <uarte_nrfx_configure+0xec>
	switch (baudrate) {
   2fe3a:	f5b3 4f61 	cmp.w	r3, #57600	; 0xe100
   2fe3e:	d03d      	beq.n	2febc <uarte_nrfx_configure+0x134>
   2fe40:	f5b3 3f96 	cmp.w	r3, #76800	; 0x12c00
   2fe44:	d1cb      	bne.n	2fdde <uarte_nrfx_configure+0x56>
		nrf_baudrate = NRF_UARTE_BAUDRATE_76800;
   2fe46:	4b25      	ldr	r3, [pc, #148]	; (2fedc <uarte_nrfx_configure+0x154>)
   2fe48:	e014      	b.n	2fe74 <uarte_nrfx_configure+0xec>
	switch (baudrate) {
   2fe4a:	f5b3 2fe1 	cmp.w	r3, #460800	; 0x70800
   2fe4e:	d038      	beq.n	2fec2 <uarte_nrfx_configure+0x13a>
   2fe50:	d808      	bhi.n	2fe64 <uarte_nrfx_configure+0xdc>
   2fe52:	f5b3 3f61 	cmp.w	r3, #230400	; 0x38400
   2fe56:	d037      	beq.n	2fec8 <uarte_nrfx_configure+0x140>
   2fe58:	4f21      	ldr	r7, [pc, #132]	; (2fee0 <uarte_nrfx_configure+0x158>)
   2fe5a:	42bb      	cmp	r3, r7
   2fe5c:	d1bf      	bne.n	2fdde <uarte_nrfx_configure+0x56>
		nrf_baudrate = NRF_UARTE_BAUDRATE_250000;
   2fe5e:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
   2fe62:	e007      	b.n	2fe74 <uarte_nrfx_configure+0xec>
	switch (baudrate) {
   2fe64:	f5b3 2f61 	cmp.w	r3, #921600	; 0xe1000
   2fe68:	d031      	beq.n	2fece <uarte_nrfx_configure+0x146>
   2fe6a:	4f1e      	ldr	r7, [pc, #120]	; (2fee4 <uarte_nrfx_configure+0x15c>)
   2fe6c:	42bb      	cmp	r3, r7
   2fe6e:	d1b6      	bne.n	2fdde <uarte_nrfx_configure+0x56>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1000000;
   2fe70:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
                    | (uint32_t)p_cfg->hwfc;
}

NRF_STATIC_INLINE void nrf_uarte_baudrate_set(NRF_UARTE_Type * p_reg, nrf_uarte_baudrate_t baudrate)
{
    p_reg->BAUDRATE = baudrate;
   2fe74:	f8c5 3524 	str.w	r3, [r5, #1316]	; 0x524
                    | (uint32_t)p_cfg->hwfc;
   2fe78:	4334      	orrs	r4, r6
		return -ENOTSUP;
	}

	nrf_uarte_configure(get_uarte_instance(dev), &uarte_cfg);

	get_dev_data(dev)->uart_config = *cfg;
   2fe7a:	6883      	ldr	r3, [r0, #8]
   2fe7c:	4322      	orrs	r2, r4
   2fe7e:	c903      	ldmia	r1, {r0, r1}
    p_reg->CONFIG = (uint32_t)p_cfg->parity
   2fe80:	f8c5 256c 	str.w	r2, [r5, #1388]	; 0x56c
   2fe84:	e883 0003 	stmia.w	r3, {r0, r1}

	return 0;
   2fe88:	2000      	movs	r0, #0
}
   2fe8a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		nrf_baudrate = NRF_UARTE_BAUDRATE_31250;
   2fe8c:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
   2fe90:	e7f0      	b.n	2fe74 <uarte_nrfx_configure+0xec>
		nrf_baudrate = NRF_UARTE_BAUDRATE_4800;
   2fe92:	4b15      	ldr	r3, [pc, #84]	; (2fee8 <uarte_nrfx_configure+0x160>)
   2fe94:	e7ee      	b.n	2fe74 <uarte_nrfx_configure+0xec>
		nrf_baudrate = 0x00027000;
   2fe96:	f44f 331c 	mov.w	r3, #159744	; 0x27000
   2fe9a:	e7eb      	b.n	2fe74 <uarte_nrfx_configure+0xec>
		nrf_baudrate = 0x00014000;
   2fe9c:	f44f 33a0 	mov.w	r3, #81920	; 0x14000
   2fea0:	e7e8      	b.n	2fe74 <uarte_nrfx_configure+0xec>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1200;
   2fea2:	f44f 239e 	mov.w	r3, #323584	; 0x4f000
   2fea6:	e7e5      	b.n	2fe74 <uarte_nrfx_configure+0xec>
		nrf_baudrate = NRF_UARTE_BAUDRATE_14400;
   2fea8:	4b10      	ldr	r3, [pc, #64]	; (2feec <uarte_nrfx_configure+0x164>)
   2feaa:	e7e3      	b.n	2fe74 <uarte_nrfx_configure+0xec>
		nrf_baudrate = NRF_UARTE_BAUDRATE_19200;
   2feac:	4b10      	ldr	r3, [pc, #64]	; (2fef0 <uarte_nrfx_configure+0x168>)
   2feae:	e7e1      	b.n	2fe74 <uarte_nrfx_configure+0xec>
		nrf_baudrate = NRF_UARTE_BAUDRATE_115200;
   2feb0:	f04f 73eb 	mov.w	r3, #30801920	; 0x1d60000
   2feb4:	e7de      	b.n	2fe74 <uarte_nrfx_configure+0xec>
		nrf_baudrate = NRF_UARTE_BAUDRATE_56000;
   2feb6:	f44f 0365 	mov.w	r3, #15007744	; 0xe50000
   2feba:	e7db      	b.n	2fe74 <uarte_nrfx_configure+0xec>
		nrf_baudrate = NRF_UARTE_BAUDRATE_57600;
   2febc:	f44f 036b 	mov.w	r3, #15400960	; 0xeb0000
   2fec0:	e7d8      	b.n	2fe74 <uarte_nrfx_configure+0xec>
		nrf_baudrate = NRF_UARTE_BAUDRATE_460800;
   2fec2:	f04f 63e8 	mov.w	r3, #121634816	; 0x7400000
   2fec6:	e7d5      	b.n	2fe74 <uarte_nrfx_configure+0xec>
		nrf_baudrate = NRF_UARTE_BAUDRATE_230400;
   2fec8:	f04f 736c 	mov.w	r3, #61865984	; 0x3b00000
   2fecc:	e7d2      	b.n	2fe74 <uarte_nrfx_configure+0xec>
		nrf_baudrate = NRF_UARTE_BAUDRATE_921600;
   2fece:	f04f 6370 	mov.w	r3, #251658240	; 0xf000000
   2fed2:	e7cf      	b.n	2fe74 <uarte_nrfx_configure+0xec>
   2fed4:	00275000 	.word	0x00275000
   2fed8:	0075c000 	.word	0x0075c000
   2fedc:	013a9000 	.word	0x013a9000
   2fee0:	0003d090 	.word	0x0003d090
   2fee4:	000f4240 	.word	0x000f4240
   2fee8:	0013b000 	.word	0x0013b000
   2feec:	003af000 	.word	0x003af000
   2fef0:	004ea000 	.word	0x004ea000

0002fef4 <uarte_0_init>:
	#endif
	#if !defined(DT_NORDIC_NRF_UARTE_UART_0_RX_PIN)
	#define DT_NORDIC_NRF_UARTE_UART_0_RX_PIN NRF_UARTE_PSEL_DISCONNECTED
	#endif

	UART_NRF_UARTE_DEVICE(0);
   2fef4:	b570      	push	{r4, r5, r6, lr}
   2fef6:	4606      	mov	r6, r0
   2fef8:	2200      	movs	r2, #0
   2fefa:	2101      	movs	r1, #1
   2fefc:	2008      	movs	r0, #8
   2fefe:	f7f6 fb6d 	bl	265dc <z_arm_irq_priority_set>
   2ff02:	2008      	movs	r0, #8
   2ff04:	f7f6 fb5a 	bl	265bc <arch_irq_enable>
}


NRF_STATIC_INLINE void nrf_gpio_port_out_set(NRF_GPIO_Type * p_reg, uint32_t set_mask)
{
    p_reg->OUTSET = set_mask;
   2ff08:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
	return dev->config->config_info;
   2ff0c:	6833      	ldr	r3, [r6, #0]
	struct uarte_nrfx_data *data = get_dev_data(dev);
   2ff0e:	68b5      	ldr	r5, [r6, #8]
	return config->uarte_regs;
   2ff10:	689b      	ldr	r3, [r3, #8]
	err = uarte_nrfx_configure(dev, &get_dev_data(dev)->uart_config);
   2ff12:	4629      	mov	r1, r5
	return config->uarte_regs;
   2ff14:	681c      	ldr	r4, [r3, #0]
   2ff16:	4b14      	ldr	r3, [pc, #80]	; (2ff68 <uarte_0_init+0x74>)
	err = uarte_nrfx_configure(dev, &get_dev_data(dev)->uart_config);
   2ff18:	4630      	mov	r0, r6
   2ff1a:	609a      	str	r2, [r3, #8]
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
   2ff1c:	2203      	movs	r2, #3
   2ff1e:	f8c3 2274 	str.w	r2, [r3, #628]	; 0x274
   2ff22:	2200      	movs	r2, #0
   2ff24:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270
    p_reg->PSEL.TXD = pseltxd;
   2ff28:	231d      	movs	r3, #29
   2ff2a:	f8c4 350c 	str.w	r3, [r4, #1292]	; 0x50c
    p_reg->PSEL.RXD = pselrxd;
   2ff2e:	231c      	movs	r3, #28
   2ff30:	f8c4 3514 	str.w	r3, [r4, #1300]	; 0x514
   2ff34:	f7ff ff28 	bl	2fd88 <uarte_nrfx_configure>
	if (err) {
   2ff38:	b9a0      	cbnz	r0, 2ff64 <uarte_0_init+0x70>
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
   2ff3a:	2308      	movs	r3, #8
   2ff3c:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
		nrf_uarte_rx_buffer_set(uarte, &data->rx_data, 1);
   2ff40:	f105 030c 	add.w	r3, r5, #12
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   2ff44:	f8c4 0110 	str.w	r0, [r4, #272]	; 0x110

NRF_STATIC_INLINE void nrf_uarte_rx_buffer_set(NRF_UARTE_Type * p_reg,
                                               uint8_t *        p_buffer,
                                               size_t           length)
{
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
   2ff48:	f8c4 3534 	str.w	r3, [r4, #1332]	; 0x534
    p_reg->RXD.MAXCNT = length;
   2ff4c:	2301      	movs	r3, #1
		nrf_uarte_tx_buffer_set(uarte, data->int_driven->tx_buffer, 0);
   2ff4e:	68aa      	ldr	r2, [r5, #8]
   2ff50:	f8c4 3538 	str.w	r3, [r4, #1336]	; 0x538
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   2ff54:	6892      	ldr	r2, [r2, #8]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   2ff56:	6023      	str	r3, [r4, #0]
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   2ff58:	f8c4 2544 	str.w	r2, [r4, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
   2ff5c:	f8c4 0548 	str.w	r0, [r4, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   2ff60:	60a3      	str	r3, [r4, #8]
   2ff62:	60e3      	str	r3, [r4, #12]
	UART_NRF_UARTE_DEVICE(0);
   2ff64:	bd70      	pop	{r4, r5, r6, pc}
   2ff66:	bf00      	nop
   2ff68:	40842500 	.word	0x40842500

0002ff6c <entropy_cc310_rng_get_entropy>:
#include "nrf_cc310_platform_entropy.h"
#endif

static int entropy_cc310_rng_get_entropy(struct device *dev, u8_t *buffer,
					 u16_t length)
{
   2ff6c:	b537      	push	{r0, r1, r2, r4, r5, lr}
   2ff6e:	460d      	mov	r5, r1
   2ff70:	4614      	mov	r4, r2
	int res = -EINVAL;
	size_t olen;

	__ASSERT_NO_MSG(dev != NULL);
   2ff72:	b948      	cbnz	r0, 2ff88 <entropy_cc310_rng_get_entropy+0x1c>
   2ff74:	4910      	ldr	r1, [pc, #64]	; (2ffb8 <entropy_cc310_rng_get_entropy+0x4c>)
   2ff76:	4811      	ldr	r0, [pc, #68]	; (2ffbc <entropy_cc310_rng_get_entropy+0x50>)
   2ff78:	231e      	movs	r3, #30
   2ff7a:	4a11      	ldr	r2, [pc, #68]	; (2ffc0 <entropy_cc310_rng_get_entropy+0x54>)
   2ff7c:	f010 fb41 	bl	40602 <printk>
   2ff80:	211e      	movs	r1, #30
   2ff82:	480f      	ldr	r0, [pc, #60]	; (2ffc0 <entropy_cc310_rng_get_entropy+0x54>)
   2ff84:	f010 fc00 	bl	40788 <assert_post_action>
	__ASSERT_NO_MSG(buffer != NULL);
   2ff88:	b94d      	cbnz	r5, 2ff9e <entropy_cc310_rng_get_entropy+0x32>
   2ff8a:	490e      	ldr	r1, [pc, #56]	; (2ffc4 <entropy_cc310_rng_get_entropy+0x58>)
   2ff8c:	480b      	ldr	r0, [pc, #44]	; (2ffbc <entropy_cc310_rng_get_entropy+0x50>)
   2ff8e:	231f      	movs	r3, #31
   2ff90:	4a0b      	ldr	r2, [pc, #44]	; (2ffc0 <entropy_cc310_rng_get_entropy+0x54>)
   2ff92:	f010 fb36 	bl	40602 <printk>
   2ff96:	211f      	movs	r1, #31
   2ff98:	4809      	ldr	r0, [pc, #36]	; (2ffc0 <entropy_cc310_rng_get_entropy+0x54>)
   2ff9a:	f010 fbf5 	bl	40788 <assert_post_action>

#if defined(CONFIG_SPM)
	/** This is a call from a non-secure app that enables secure services,
	 *  in which case entropy is gathered by calling through SPM
	 */
	res = spm_request_random_number(buffer, length, &olen);
   2ff9e:	aa01      	add	r2, sp, #4
   2ffa0:	4621      	mov	r1, r4
   2ffa2:	4628      	mov	r0, r5
   2ffa4:	f7e8 f824 	bl	17ff0 <spm_request_random_number>
	if (olen != length) {
   2ffa8:	9b01      	ldr	r3, [sp, #4]
		return -EINVAL;
   2ffaa:	429c      	cmp	r4, r3
		return -EINVAL;
	}
#endif

	return res;
}
   2ffac:	bf18      	it	ne
   2ffae:	f06f 0015 	mvnne.w	r0, #21
   2ffb2:	b003      	add	sp, #12
   2ffb4:	bd30      	pop	{r4, r5, pc}
   2ffb6:	bf00      	nop
   2ffb8:	0004c3a4 	.word	0x0004c3a4
   2ffbc:	0004764f 	.word	0x0004764f
   2ffc0:	0004c374 	.word	0x0004c374
   2ffc4:	0004c3b7 	.word	0x0004c3b7

0002ffc8 <_bsdlib_init>:
static int _bsdlib_init(struct device *unused)
{
	/* Setup the network IRQ used by the BSD library.
	 * Note: No call to irq_enable() here, that is done through bsd_init().
	 */
	IRQ_DIRECT_CONNECT(BSD_NETWORK_IRQ, BSD_NETWORK_IRQ_PRIORITY,
   2ffc8:	2200      	movs	r2, #0
{
   2ffca:	b508      	push	{r3, lr}
	IRQ_DIRECT_CONNECT(BSD_NETWORK_IRQ, BSD_NETWORK_IRQ_PRIORITY,
   2ffcc:	4611      	mov	r1, r2
   2ffce:	202a      	movs	r0, #42	; 0x2a
   2ffd0:	f7f6 fb04 	bl	265dc <z_arm_irq_priority_set>
			   ipc_proxy_irq_handler, 0);

	init_ret = bsd_init();
   2ffd4:	f004 feb6 	bl	34d44 <bsd_init>
   2ffd8:	4b01      	ldr	r3, [pc, #4]	; (2ffe0 <_bsdlib_init+0x18>)
   2ffda:	6018      	str	r0, [r3, #0]
		 */
		return 0;
	}

	return init_ret;
}
   2ffdc:	2000      	movs	r0, #0
   2ffde:	bd08      	pop	{r3, pc}
   2ffe0:	20024c88 	.word	0x20024c88

0002ffe4 <thread_monitor_entry_get>:

/* Get thread monitor structure assigned to a specific thread id, with a RPC
 * counter value at which bsdlib last checked the 'readiness' of a thread
 */
static struct thread_monitor_entry *thread_monitor_entry_get(k_tid_t id)
{
   2ffe4:	b570      	push	{r4, r5, r6, lr}
			new_entry = entry;
			break;
		}

		/* Identify oldest entry. */
		entry_age = rpc_event_cnt - entry->cnt;
   2ffe6:	4b0d      	ldr	r3, [pc, #52]	; (3001c <thread_monitor_entry_get+0x38>)
	struct thread_monitor_entry *new_entry = thread_event_monitor;
   2ffe8:	4c0d      	ldr	r4, [pc, #52]	; (30020 <thread_monitor_entry_get+0x3c>)
		entry_age = rpc_event_cnt - entry->cnt;
   2ffea:	681a      	ldr	r2, [r3, #0]
   2ffec:	250a      	movs	r5, #10
	int entry_age, oldest_entry_age = 0;
   2ffee:	2600      	movs	r6, #0
	struct thread_monitor_entry *entry = thread_event_monitor;
   2fff0:	4623      	mov	r3, r4
		if (entry->id == id) {
   2fff2:	6819      	ldr	r1, [r3, #0]
   2fff4:	4281      	cmp	r1, r0
   2fff6:	d00e      	beq.n	30016 <thread_monitor_entry_get+0x32>
		} else if (entry->id == 0) {
   2fff8:	b151      	cbz	r1, 30010 <thread_monitor_entry_get+0x2c>
		entry_age = rpc_event_cnt - entry->cnt;
   2fffa:	6859      	ldr	r1, [r3, #4]
   2fffc:	1a51      	subs	r1, r2, r1
		if (entry_age > oldest_entry_age) {
   2fffe:	42b1      	cmp	r1, r6
   30000:	bfc4      	itt	gt
   30002:	461c      	movgt	r4, r3
   30004:	460e      	movgt	r6, r1
	for ( ; PART_OF_ARRAY(thread_event_monitor, entry); entry++) {
   30006:	3d01      	subs	r5, #1
   30008:	f103 0308 	add.w	r3, r3, #8
   3000c:	d1f1      	bne.n	2fff2 <thread_monitor_entry_get+0xe>
   3000e:	4623      	mov	r3, r4
			new_entry = entry;
		}
	}

	new_entry->id = id;
	new_entry->cnt = rpc_event_cnt - 1;
   30010:	3a01      	subs	r2, #1
	new_entry->id = id;
   30012:	6018      	str	r0, [r3, #0]
	new_entry->cnt = rpc_event_cnt - 1;
   30014:	605a      	str	r2, [r3, #4]

	return new_entry;
}
   30016:	4618      	mov	r0, r3
   30018:	bd70      	pop	{r4, r5, r6, pc}
   3001a:	bf00      	nop
   3001c:	20024c8c 	.word	0x20024c8c
   30020:	20024c98 	.word	0x20024c98

00030024 <rpc_proxy_irq_handler>:
			  */

	return 1; /* We should check if scheduling decision should be made */
}

ISR_DIRECT_DECLARE(rpc_proxy_irq_handler)
   30024:	4668      	mov	r0, sp
   30026:	f020 0107 	bic.w	r1, r0, #7
   3002a:	468d      	mov	sp, r1
   3002c:	b519      	push	{r0, r3, r4, lr}
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
   3002e:	4b0d      	ldr	r3, [pc, #52]	; (30064 <rpc_proxy_irq_handler+0x40>)
   30030:	e8d3 2fef 	ldaex	r2, [r3]
   30034:	3201      	adds	r2, #1
   30036:	e8c3 2fe1 	stlex	r1, r2, [r3]
   3003a:	2900      	cmp	r1, #0
   3003c:	d1f8      	bne.n	30030 <rpc_proxy_irq_handler+0xc>
{
	atomic_inc(&rpc_event_cnt);

	bsd_os_application_irq_handler();
   3003e:	f009 f839 	bl	390b4 <bsd_os_application_irq_handler>

	struct sleeping_thread *thread;

	/* Wake up all sleeping threads. */
	SYS_SLIST_FOR_EACH_CONTAINER(&sleeping_threads, thread, node) {
   30042:	4b09      	ldr	r3, [pc, #36]	; (30068 <rpc_proxy_irq_handler+0x44>)
   30044:	681c      	ldr	r4, [r3, #0]
   30046:	b93c      	cbnz	r4, 30058 <rpc_proxy_irq_handler+0x34>
		k_sem_give(&thread->sem);
	}

	ISR_DIRECT_PM(); /* PM done after servicing interrupt for best latency
   30048:	f7f6 fafa 	bl	26640 <_arch_isr_direct_pm>
{
#ifdef CONFIG_TRACING
	sys_trace_isr_exit();
#endif
	if (maybe_swap) {
		z_arm_int_exit();
   3004c:	f7f6 f9ec 	bl	26428 <z_arm_exc_exit>
ISR_DIRECT_DECLARE(rpc_proxy_irq_handler)
   30050:	e8bd 4019 	ldmia.w	sp!, {r0, r3, r4, lr}
   30054:	4685      	mov	sp, r0
   30056:	4770      	bx	lr
   30058:	1d20      	adds	r0, r4, #4
   3005a:	f00d fa13 	bl	3d484 <z_impl_k_sem_give>
   3005e:	6824      	ldr	r4, [r4, #0]
	return node->next;
   30060:	e7f1      	b.n	30046 <rpc_proxy_irq_handler+0x22>
   30062:	bf00      	nop
   30064:	20024c8c 	.word	0x20024c8c
   30068:	20024c90 	.word	0x20024c90

0003006c <bsd_os_timedwait>:
{
   3006c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   30070:	4688      	mov	r8, r1
   30072:	b089      	sub	sp, #36	; 0x24
	return z_impl_k_uptime_get();
   30074:	f014 fe25 	bl	44cc2 <z_impl_k_uptime_get>
	if (*timeout == 0) {
   30078:	f8d8 3000 	ldr.w	r3, [r8]
   3007c:	4606      	mov	r6, r0
   3007e:	2b00      	cmp	r3, #0
   30080:	460f      	mov	r7, r1
   30082:	d103      	bne.n	3008c <bsd_os_timedwait+0x20>
	z_impl_k_yield();
   30084:	f00d f87a 	bl	3d17c <z_impl_k_yield>
		return NRF_ETIMEDOUT;
   30088:	203c      	movs	r0, #60	; 0x3c
   3008a:	e06e      	b.n	3016a <bsd_os_timedwait+0xfe>
		*timeout = K_FOREVER;
   3008c:	bfbc      	itt	lt
   3008e:	f04f 33ff 	movlt.w	r3, #4294967295
   30092:	f8c8 3000 	strlt.w	r3, [r8]
	return z_impl_k_sem_init(sem, initial_count, limit);
   30096:	2201      	movs	r2, #1
   30098:	2100      	movs	r1, #0
   3009a:	a802      	add	r0, sp, #8
   3009c:	f014 fd7e 	bl	44b9c <z_impl_k_sem_init>
   300a0:	f10d 0a04 	add.w	sl, sp, #4
   300a4:	f04f 0320 	mov.w	r3, #32
   300a8:	f3ef 8b11 	mrs	fp, BASEPRI
   300ac:	f383 8811 	msr	BASEPRI, r3
   300b0:	f3bf 8f6f 	isb	sy
	return z_impl_k_current_get();
   300b4:	f00d f9e0 	bl	3d478 <z_impl_k_current_get>
	entry = thread_monitor_entry_get(k_current_get());
   300b8:	f7ff ff94 	bl	2ffe4 <thread_monitor_entry_get>
	if (rpc_event_cnt != entry->cnt) {
   300bc:	4933      	ldr	r1, [pc, #204]	; (3018c <bsd_os_timedwait+0x120>)
   300be:	6843      	ldr	r3, [r0, #4]
   300c0:	680a      	ldr	r2, [r1, #0]
   300c2:	4689      	mov	r9, r1
   300c4:	4293      	cmp	r3, r2
   300c6:	f04f 0300 	mov.w	r3, #0
   300ca:	d108      	bne.n	300de <bsd_os_timedwait+0x72>
	parent->next = child;
   300cc:	9301      	str	r3, [sp, #4]
Z_GENLIST_APPEND(slist, snode)
   300ce:	4b30      	ldr	r3, [pc, #192]	; (30190 <bsd_os_timedwait+0x124>)
   300d0:	685a      	ldr	r2, [r3, #4]
   300d2:	2a00      	cmp	r2, #0
   300d4:	d14c      	bne.n	30170 <bsd_os_timedwait+0x104>
	list->head = node;
   300d6:	e9c3 aa00 	strd	sl, sl, [r3]
		allow_to_sleep = true;
   300da:	2301      	movs	r3, #1
   300dc:	e000      	b.n	300e0 <bsd_os_timedwait+0x74>
	entry->cnt = rpc_event_cnt;
   300de:	6042      	str	r2, [r0, #4]
	__asm__ volatile(
   300e0:	f38b 8811 	msr	BASEPRI, fp
   300e4:	f3bf 8f6f 	isb	sy
	if (!sleeping_thread_add(&thread)) {
   300e8:	2b00      	cmp	r3, #0
   300ea:	d03d      	beq.n	30168 <bsd_os_timedwait+0xfc>
	(void)k_sem_take(&thread.sem, *timeout);
   300ec:	f8d8 1000 	ldr.w	r1, [r8]
	return z_impl_k_sem_take(sem, timeout);
   300f0:	a802      	add	r0, sp, #8
   300f2:	f00d fa11 	bl	3d518 <z_impl_k_sem_take>
	__asm__ volatile(
   300f6:	f04f 0320 	mov.w	r3, #32
   300fa:	f3ef 8b11 	mrs	fp, BASEPRI
   300fe:	f383 8811 	msr	BASEPRI, r3
   30102:	f3bf 8f6f 	isb	sy
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   30106:	2000      	movs	r0, #0
   30108:	4b21      	ldr	r3, [pc, #132]	; (30190 <bsd_os_timedwait+0x124>)
   3010a:	681a      	ldr	r2, [r3, #0]
   3010c:	b152      	cbz	r2, 30124 <bsd_os_timedwait+0xb8>
   3010e:	4552      	cmp	r2, sl
   30110:	d139      	bne.n	30186 <bsd_os_timedwait+0x11a>
Z_GENLIST_REMOVE(slist, snode)
   30112:	9901      	ldr	r1, [sp, #4]
   30114:	bb88      	cbnz	r0, 3017a <bsd_os_timedwait+0x10e>
   30116:	6858      	ldr	r0, [r3, #4]
	list->head = node;
   30118:	6019      	str	r1, [r3, #0]
Z_GENLIST_REMOVE(slist, snode)
   3011a:	4290      	cmp	r0, r2
   3011c:	d100      	bne.n	30120 <bsd_os_timedwait+0xb4>
	list->tail = node;
   3011e:	6059      	str	r1, [r3, #4]
	parent->next = child;
   30120:	2300      	movs	r3, #0
   30122:	9301      	str	r3, [sp, #4]
	return z_impl_k_current_get();
   30124:	f00d f9a8 	bl	3d478 <z_impl_k_current_get>
	entry = thread_monitor_entry_get(k_current_get());
   30128:	f7ff ff5c 	bl	2ffe4 <thread_monitor_entry_get>
	entry->cnt = rpc_event_cnt;
   3012c:	f8d9 3000 	ldr.w	r3, [r9]
   30130:	6043      	str	r3, [r0, #4]
	__asm__ volatile(
   30132:	f38b 8811 	msr	BASEPRI, fp
   30136:	f3bf 8f6f 	isb	sy
	if (*timeout == K_FOREVER) {
   3013a:	f8d8 9000 	ldr.w	r9, [r8]
   3013e:	f1b9 3fff 	cmp.w	r9, #4294967295
   30142:	d011      	beq.n	30168 <bsd_os_timedwait+0xfc>
	return z_impl_k_uptime_get();
   30144:	f014 fdbd 	bl	44cc2 <z_impl_k_uptime_get>
	remaining = *timeout - (k_uptime_get() - start);
   30148:	eb16 0209 	adds.w	r2, r6, r9
   3014c:	eb47 73e9 	adc.w	r3, r7, r9, asr #31
   30150:	1a14      	subs	r4, r2, r0
   30152:	eb63 0501 	sbc.w	r5, r3, r1
	*timeout = remaining > 0 ? remaining : 0;
   30156:	2c00      	cmp	r4, #0
   30158:	f175 0300 	sbcs.w	r3, r5, #0
   3015c:	bfb8      	it	lt
   3015e:	2400      	movlt	r4, #0
   30160:	f8c8 4000 	str.w	r4, [r8]
	if (*timeout == 0) {
   30164:	2c00      	cmp	r4, #0
   30166:	d08f      	beq.n	30088 <bsd_os_timedwait+0x1c>
	return 0;
   30168:	2000      	movs	r0, #0
}
   3016a:	b009      	add	sp, #36	; 0x24
   3016c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   30170:	f8c2 a000 	str.w	sl, [r2]
	list->tail = node;
   30174:	f8c3 a004 	str.w	sl, [r3, #4]
   30178:	e7af      	b.n	300da <bsd_os_timedwait+0x6e>
	parent->next = child;
   3017a:	6001      	str	r1, [r0, #0]
Z_GENLIST_REMOVE(slist, snode)
   3017c:	6859      	ldr	r1, [r3, #4]
   3017e:	4291      	cmp	r1, r2
	list->tail = node;
   30180:	bf08      	it	eq
   30182:	6058      	streq	r0, [r3, #4]
   30184:	e7cc      	b.n	30120 <bsd_os_timedwait+0xb4>
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   30186:	4610      	mov	r0, r2
   30188:	6812      	ldr	r2, [r2, #0]
   3018a:	e7bf      	b.n	3010c <bsd_os_timedwait+0xa0>
   3018c:	20024c8c 	.word	0x20024c8c
   30190:	20024c90 	.word	0x20024c90

00030194 <bsd_os_errno_set>:
	switch (err_code) {
   30194:	282d      	cmp	r0, #45	; 0x2d
{
   30196:	b510      	push	{r4, lr}
   30198:	4604      	mov	r4, r0
	switch (err_code) {
   3019a:	f000 80ac 	beq.w	302f6 <bsd_os_errno_set+0x162>
   3019e:	dc54      	bgt.n	3024a <bsd_os_errno_set+0xb6>
   301a0:	2816      	cmp	r0, #22
   301a2:	d009      	beq.n	301b8 <bsd_os_errno_set+0x24>
   301a4:	dc3c      	bgt.n	30220 <bsd_os_errno_set+0x8c>
   301a6:	2808      	cmp	r0, #8
   301a8:	d006      	beq.n	301b8 <bsd_os_errno_set+0x24>
   301aa:	dc09      	bgt.n	301c0 <bsd_os_errno_set+0x2c>
   301ac:	2802      	cmp	r0, #2
   301ae:	d003      	beq.n	301b8 <bsd_os_errno_set+0x24>
   301b0:	2805      	cmp	r0, #5
   301b2:	d001      	beq.n	301b8 <bsd_os_errno_set+0x24>
   301b4:	2801      	cmp	r0, #1
   301b6:	d10c      	bne.n	301d2 <bsd_os_errno_set+0x3e>
		errno = ENOBUFS;
   301b8:	f012 fd4b 	bl	42c52 <__errno>
   301bc:	6004      	str	r4, [r0, #0]
}
   301be:	bd10      	pop	{r4, pc}
	switch (err_code) {
   301c0:	280c      	cmp	r0, #12
   301c2:	d0f9      	beq.n	301b8 <bsd_os_errno_set+0x24>
   301c4:	dc01      	bgt.n	301ca <bsd_os_errno_set+0x36>
   301c6:	2809      	cmp	r0, #9
   301c8:	e7f5      	b.n	301b6 <bsd_os_errno_set+0x22>
   301ca:	280d      	cmp	r0, #13
   301cc:	d0f4      	beq.n	301b8 <bsd_os_errno_set+0x24>
   301ce:	280e      	cmp	r0, #14
   301d0:	d078      	beq.n	302c4 <bsd_os_errno_set+0x130>
		__ASSERT(false, "Untranslated errno %d set by bsdlib!", err_code);
   301d2:	f44f 73a5 	mov.w	r3, #330	; 0x14a
   301d6:	4a65      	ldr	r2, [pc, #404]	; (3036c <bsd_os_errno_set+0x1d8>)
   301d8:	4965      	ldr	r1, [pc, #404]	; (30370 <bsd_os_errno_set+0x1dc>)
   301da:	4866      	ldr	r0, [pc, #408]	; (30374 <bsd_os_errno_set+0x1e0>)
   301dc:	f010 fa11 	bl	40602 <printk>
   301e0:	4621      	mov	r1, r4
   301e2:	4865      	ldr	r0, [pc, #404]	; (30378 <bsd_os_errno_set+0x1e4>)
   301e4:	f010 fa0d 	bl	40602 <printk>
   301e8:	f44f 71a5 	mov.w	r1, #330	; 0x14a
   301ec:	485f      	ldr	r0, [pc, #380]	; (3036c <bsd_os_errno_set+0x1d8>)
   301ee:	f010 facb 	bl	40788 <assert_post_action>
		LOG_ERR("Untranslated errno %d set by bsdlib!", err_code);
   301f2:	4b62      	ldr	r3, [pc, #392]	; (3037c <bsd_os_errno_set+0x1e8>)
   301f4:	681b      	ldr	r3, [r3, #0]
   301f6:	075b      	lsls	r3, r3, #29
   301f8:	d00e      	beq.n	30218 <bsd_os_errno_set+0x84>
   301fa:	2301      	movs	r3, #1
   301fc:	f04f 0200 	mov.w	r2, #0
   30200:	495f      	ldr	r1, [pc, #380]	; (30380 <bsd_os_errno_set+0x1ec>)
   30202:	f363 0207 	bfi	r2, r3, #0, #8
   30206:	4b5f      	ldr	r3, [pc, #380]	; (30384 <bsd_os_errno_set+0x1f0>)
   30208:	485f      	ldr	r0, [pc, #380]	; (30388 <bsd_os_errno_set+0x1f4>)
   3020a:	1a5b      	subs	r3, r3, r1
   3020c:	08db      	lsrs	r3, r3, #3
   3020e:	f363 128f 	bfi	r2, r3, #6, #10
   30212:	4621      	mov	r1, r4
   30214:	f010 fc22 	bl	40a5c <log_1>
		errno = 0xBAADBAAD;
   30218:	f012 fd1b 	bl	42c52 <__errno>
   3021c:	4b5b      	ldr	r3, [pc, #364]	; (3038c <bsd_os_errno_set+0x1f8>)
   3021e:	e054      	b.n	302ca <bsd_os_errno_set+0x136>
	switch (err_code) {
   30220:	2828      	cmp	r0, #40	; 0x28
   30222:	f000 809f 	beq.w	30364 <bsd_os_errno_set+0x1d0>
   30226:	dc05      	bgt.n	30234 <bsd_os_errno_set+0xa0>
   30228:	2823      	cmp	r0, #35	; 0x23
   3022a:	d050      	beq.n	302ce <bsd_os_errno_set+0x13a>
   3022c:	2825      	cmp	r0, #37	; 0x25
   3022e:	d052      	beq.n	302d6 <bsd_os_errno_set+0x142>
   30230:	2818      	cmp	r0, #24
   30232:	e7c0      	b.n	301b6 <bsd_os_errno_set+0x22>
   30234:	282a      	cmp	r0, #42	; 0x2a
   30236:	d056      	beq.n	302e6 <bsd_os_errno_set+0x152>
   30238:	db51      	blt.n	302de <bsd_os_errno_set+0x14a>
   3023a:	282b      	cmp	r0, #43	; 0x2b
   3023c:	d057      	beq.n	302ee <bsd_os_errno_set+0x15a>
   3023e:	282c      	cmp	r0, #44	; 0x2c
   30240:	d1c7      	bne.n	301d2 <bsd_os_errno_set+0x3e>
		errno = ESOCKTNOSUPPORT;
   30242:	f012 fd06 	bl	42c52 <__errno>
   30246:	237c      	movs	r3, #124	; 0x7c
   30248:	e03f      	b.n	302ca <bsd_os_errno_set+0x136>
	switch (err_code) {
   3024a:	283c      	cmp	r0, #60	; 0x3c
   3024c:	d06b      	beq.n	30326 <bsd_os_errno_set+0x192>
   3024e:	dc1d      	bgt.n	3028c <bsd_os_errno_set+0xf8>
   30250:	2833      	cmp	r0, #51	; 0x33
   30252:	d05c      	beq.n	3030e <bsd_os_errno_set+0x17a>
   30254:	dc09      	bgt.n	3026a <bsd_os_errno_set+0xd6>
   30256:	2830      	cmp	r0, #48	; 0x30
   30258:	d051      	beq.n	302fe <bsd_os_errno_set+0x16a>
   3025a:	2832      	cmp	r0, #50	; 0x32
   3025c:	d053      	beq.n	30306 <bsd_os_errno_set+0x172>
   3025e:	282f      	cmp	r0, #47	; 0x2f
   30260:	d1b7      	bne.n	301d2 <bsd_os_errno_set+0x3e>
		errno = EAFNOSUPPORT;
   30262:	f012 fcf6 	bl	42c52 <__errno>
   30266:	236a      	movs	r3, #106	; 0x6a
   30268:	e02f      	b.n	302ca <bsd_os_errno_set+0x136>
	switch (err_code) {
   3026a:	2836      	cmp	r0, #54	; 0x36
   3026c:	d053      	beq.n	30316 <bsd_os_errno_set+0x182>
   3026e:	dc05      	bgt.n	3027c <bsd_os_errno_set+0xe8>
   30270:	2834      	cmp	r0, #52	; 0x34
   30272:	d1ae      	bne.n	301d2 <bsd_os_errno_set+0x3e>
		errno = ENETRESET;
   30274:	f012 fced 	bl	42c52 <__errno>
   30278:	237e      	movs	r3, #126	; 0x7e
   3027a:	e026      	b.n	302ca <bsd_os_errno_set+0x136>
	switch (err_code) {
   3027c:	2838      	cmp	r0, #56	; 0x38
   3027e:	d04e      	beq.n	3031e <bsd_os_errno_set+0x18a>
   30280:	2839      	cmp	r0, #57	; 0x39
   30282:	d1a6      	bne.n	301d2 <bsd_os_errno_set+0x3e>
		errno = ENOTCONN;
   30284:	f012 fce5 	bl	42c52 <__errno>
   30288:	2380      	movs	r3, #128	; 0x80
   3028a:	e01e      	b.n	302ca <bsd_os_errno_set+0x136>
	switch (err_code) {
   3028c:	287d      	cmp	r0, #125	; 0x7d
   3028e:	d056      	beq.n	3033e <bsd_os_errno_set+0x1aa>
   30290:	dc0c      	bgt.n	302ac <bsd_os_errno_set+0x118>
   30292:	2870      	cmp	r0, #112	; 0x70
   30294:	d04b      	beq.n	3032e <bsd_os_errno_set+0x19a>
   30296:	dc01      	bgt.n	3029c <bsd_os_errno_set+0x108>
   30298:	2869      	cmp	r0, #105	; 0x69
   3029a:	e78c      	b.n	301b6 <bsd_os_errno_set+0x22>
   3029c:	2872      	cmp	r0, #114	; 0x72
   3029e:	d04a      	beq.n	30336 <bsd_os_errno_set+0x1a2>
   302a0:	2873      	cmp	r0, #115	; 0x73
   302a2:	d196      	bne.n	301d2 <bsd_os_errno_set+0x3e>
		errno = EINPROGRESS;
   302a4:	f012 fcd5 	bl	42c52 <__errno>
   302a8:	2377      	movs	r3, #119	; 0x77
   302aa:	e00e      	b.n	302ca <bsd_os_errno_set+0x136>
	switch (err_code) {
   302ac:	287f      	cmp	r0, #127	; 0x7f
   302ae:	d04f      	beq.n	30350 <bsd_os_errno_set+0x1bc>
   302b0:	db49      	blt.n	30346 <bsd_os_errno_set+0x1b2>
   302b2:	2880      	cmp	r0, #128	; 0x80
   302b4:	d051      	beq.n	3035a <bsd_os_errno_set+0x1c6>
   302b6:	2881      	cmp	r0, #129	; 0x81
   302b8:	d18b      	bne.n	301d2 <bsd_os_errno_set+0x3e>
		errno = EKEYREJECTED;
   302ba:	f012 fcca 	bl	42c52 <__errno>
   302be:	f240 73d4 	movw	r3, #2004	; 0x7d4
   302c2:	e002      	b.n	302ca <bsd_os_errno_set+0x136>
		errno = EFAULT;
   302c4:	f012 fcc5 	bl	42c52 <__errno>
   302c8:	230e      	movs	r3, #14
		errno = 0xBAADBAAD;
   302ca:	6003      	str	r3, [r0, #0]
}
   302cc:	e777      	b.n	301be <bsd_os_errno_set+0x2a>
		errno = EAGAIN;
   302ce:	f012 fcc0 	bl	42c52 <__errno>
   302d2:	230b      	movs	r3, #11
   302d4:	e7f9      	b.n	302ca <bsd_os_errno_set+0x136>
		errno = EDOM;
   302d6:	f012 fcbc 	bl	42c52 <__errno>
   302da:	2321      	movs	r3, #33	; 0x21
   302dc:	e7f5      	b.n	302ca <bsd_os_errno_set+0x136>
		errno = EPROTOTYPE;
   302de:	f012 fcb8 	bl	42c52 <__errno>
   302e2:	236b      	movs	r3, #107	; 0x6b
   302e4:	e7f1      	b.n	302ca <bsd_os_errno_set+0x136>
		errno = ENOPROTOOPT;
   302e6:	f012 fcb4 	bl	42c52 <__errno>
   302ea:	236d      	movs	r3, #109	; 0x6d
   302ec:	e7ed      	b.n	302ca <bsd_os_errno_set+0x136>
		errno = EPROTONOSUPPORT;
   302ee:	f012 fcb0 	bl	42c52 <__errno>
   302f2:	237b      	movs	r3, #123	; 0x7b
   302f4:	e7e9      	b.n	302ca <bsd_os_errno_set+0x136>
		errno = EOPNOTSUPP;
   302f6:	f012 fcac 	bl	42c52 <__errno>
   302fa:	235f      	movs	r3, #95	; 0x5f
   302fc:	e7e5      	b.n	302ca <bsd_os_errno_set+0x136>
		errno = EADDRINUSE;
   302fe:	f012 fca8 	bl	42c52 <__errno>
   30302:	2370      	movs	r3, #112	; 0x70
   30304:	e7e1      	b.n	302ca <bsd_os_errno_set+0x136>
		errno = ENETDOWN;
   30306:	f012 fca4 	bl	42c52 <__errno>
   3030a:	2373      	movs	r3, #115	; 0x73
   3030c:	e7dd      	b.n	302ca <bsd_os_errno_set+0x136>
		errno = ENETUNREACH;
   3030e:	f012 fca0 	bl	42c52 <__errno>
   30312:	2372      	movs	r3, #114	; 0x72
   30314:	e7d9      	b.n	302ca <bsd_os_errno_set+0x136>
		errno = ECONNRESET;
   30316:	f012 fc9c 	bl	42c52 <__errno>
   3031a:	2368      	movs	r3, #104	; 0x68
   3031c:	e7d5      	b.n	302ca <bsd_os_errno_set+0x136>
		errno = EISCONN;
   3031e:	f012 fc98 	bl	42c52 <__errno>
   30322:	237f      	movs	r3, #127	; 0x7f
   30324:	e7d1      	b.n	302ca <bsd_os_errno_set+0x136>
		errno = ETIMEDOUT;
   30326:	f012 fc94 	bl	42c52 <__errno>
   3032a:	2374      	movs	r3, #116	; 0x74
   3032c:	e7cd      	b.n	302ca <bsd_os_errno_set+0x136>
		errno = EHOSTDOWN;
   3032e:	f012 fc90 	bl	42c52 <__errno>
   30332:	2375      	movs	r3, #117	; 0x75
   30334:	e7c9      	b.n	302ca <bsd_os_errno_set+0x136>
		errno = EALREADY;
   30336:	f012 fc8c 	bl	42c52 <__errno>
   3033a:	2378      	movs	r3, #120	; 0x78
   3033c:	e7c5      	b.n	302ca <bsd_os_errno_set+0x136>
		errno = ECANCELED;
   3033e:	f012 fc88 	bl	42c52 <__errno>
   30342:	238c      	movs	r3, #140	; 0x8c
   30344:	e7c1      	b.n	302ca <bsd_os_errno_set+0x136>
		errno = ENOKEY;
   30346:	f012 fc84 	bl	42c52 <__errno>
   3034a:	f240 73d1 	movw	r3, #2001	; 0x7d1
   3034e:	e7bc      	b.n	302ca <bsd_os_errno_set+0x136>
		errno = EKEYEXPIRED;
   30350:	f012 fc7f 	bl	42c52 <__errno>
   30354:	f240 73d2 	movw	r3, #2002	; 0x7d2
   30358:	e7b7      	b.n	302ca <bsd_os_errno_set+0x136>
		errno = EKEYREVOKED;
   3035a:	f012 fc7a 	bl	42c52 <__errno>
   3035e:	f240 73d3 	movw	r3, #2003	; 0x7d3
   30362:	e7b2      	b.n	302ca <bsd_os_errno_set+0x136>
		errno = EMSGSIZE;
   30364:	f012 fc75 	bl	42c52 <__errno>
   30368:	237a      	movs	r3, #122	; 0x7a
   3036a:	e7ae      	b.n	302ca <bsd_os_errno_set+0x136>
   3036c:	0004c3cd 	.word	0x0004c3cd
   30370:	0004d39b 	.word	0x0004d39b
   30374:	0004764f 	.word	0x0004764f
   30378:	0004c3f1 	.word	0x0004c3f1
   3037c:	20032abc 	.word	0x20032abc
   30380:	00045f08 	.word	0x00045f08
   30384:	00045f78 	.word	0x00045f78
   30388:	0004c418 	.word	0x0004c418
   3038c:	baadbaad 	.word	0xbaadbaad

00030390 <bsd_os_application_irq_set>:
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   30390:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   30394:	4b01      	ldr	r3, [pc, #4]	; (3039c <bsd_os_application_irq_set+0xc>)
   30396:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
}
   3039a:	4770      	bx	lr
   3039c:	e000e100 	.word	0xe000e100

000303a0 <bsd_os_application_irq_clear>:
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   303a0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   303a4:	4b01      	ldr	r3, [pc, #4]	; (303ac <bsd_os_application_irq_clear+0xc>)
   303a6:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
}
   303aa:	4770      	bx	lr
   303ac:	e000e100 	.word	0xe000e100

000303b0 <bsd_os_trace_irq_set>:
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   303b0:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
   303b4:	4b01      	ldr	r3, [pc, #4]	; (303bc <bsd_os_trace_irq_set+0xc>)
   303b6:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
}
   303ba:	4770      	bx	lr
   303bc:	e000e100 	.word	0xe000e100

000303c0 <bsd_os_trace_irq_clear>:
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   303c0:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
   303c4:	4b01      	ldr	r3, [pc, #4]	; (303cc <bsd_os_trace_irq_clear+0xc>)
   303c6:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
}
   303ca:	4770      	bx	lr
   303cc:	e000e100 	.word	0xe000e100

000303d0 <bsd_os_init>:
#endif
}

/* This function is called by bsd_init and must not be called explicitly. */
void bsd_os_init(void)
{
   303d0:	b508      	push	{r3, lr}
	list->head = NULL;
   303d2:	2300      	movs	r3, #0
   303d4:	4a07      	ldr	r2, [pc, #28]	; (303f4 <bsd_os_init+0x24>)
	list->tail = NULL;
   303d6:	e9c2 3300 	strd	r3, r3, [r2]
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   303da:	4a07      	ldr	r2, [pc, #28]	; (303f8 <bsd_os_init+0x28>)
   303dc:	e8d2 1fef 	ldaex	r1, [r2]
   303e0:	e8c2 3fe0 	stlex	r0, r3, [r2]
   303e4:	2800      	cmp	r0, #0
   303e6:	d1f9      	bne.n	303dc <bsd_os_init+0xc>
	sys_slist_init(&sleeping_threads);
	atomic_clear(&rpc_event_cnt);

	read_task_create();
   303e8:	f013 fdca 	bl	43f80 <read_task_create>

	/* Configure and enable modem tracing over UART. */
	trace_uart_init();
	trace_task_create();
}
   303ec:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	trace_task_create();
   303f0:	f013 bdbb 	b.w	43f6a <trace_task_create>
   303f4:	20024c90 	.word	0x20024c90
   303f8:	20024c8c 	.word	0x20024c8c

000303fc <z_to_nrf_optname>:
static int z_to_nrf_optname(int z_in_level, int z_in_optname,
			    int *nrf_out_optname)
{
	int retval = 0;

	switch (z_in_level) {
   303fc:	f5b0 7f8d 	cmp.w	r0, #282	; 0x11a
   30400:	d03c      	beq.n	3047c <z_to_nrf_optname+0x80>
   30402:	dc04      	bgt.n	3040e <z_to_nrf_optname+0x12>
   30404:	2801      	cmp	r0, #1
   30406:	d044      	beq.n	30492 <z_to_nrf_optname+0x96>
			break;
		}
		break;

	default:
		retval = -1;
   30408:	f04f 30ff 	mov.w	r0, #4294967295
		break;
	}

	return retval;
}
   3040c:	4770      	bx	lr
	switch (z_in_level) {
   3040e:	f240 2302 	movw	r3, #514	; 0x202
   30412:	4298      	cmp	r0, r3
   30414:	d052      	beq.n	304bc <z_to_nrf_optname+0xc0>
   30416:	f240 2303 	movw	r3, #515	; 0x203
   3041a:	4298      	cmp	r0, r3
   3041c:	d1f4      	bne.n	30408 <z_to_nrf_optname+0xc>
		switch (z_in_optname) {
   3041e:	3901      	subs	r1, #1
   30420:	2913      	cmp	r1, #19
   30422:	d8f1      	bhi.n	30408 <z_to_nrf_optname+0xc>
   30424:	a301      	add	r3, pc, #4	; (adr r3, 3042c <z_to_nrf_optname+0x30>)
   30426:	f853 f021 	ldr.w	pc, [r3, r1, lsl #2]
   3042a:	bf00      	nop
   3042c:	000304c9 	.word	0x000304c9
   30430:	0003048d 	.word	0x0003048d
   30434:	000304ad 	.word	0x000304ad
   30438:	0003049f 	.word	0x0003049f
   3043c:	000304b1 	.word	0x000304b1
   30440:	000304b5 	.word	0x000304b5
   30444:	000304b9 	.word	0x000304b9
   30448:	00030409 	.word	0x00030409
   3044c:	00030409 	.word	0x00030409
   30450:	00030409 	.word	0x00030409
   30454:	00030409 	.word	0x00030409
   30458:	00030409 	.word	0x00030409
   3045c:	00030409 	.word	0x00030409
   30460:	00030409 	.word	0x00030409
   30464:	00030409 	.word	0x00030409
   30468:	00030409 	.word	0x00030409
   3046c:	00030409 	.word	0x00030409
   30470:	00030409 	.word	0x00030409
   30474:	00030409 	.word	0x00030409
   30478:	000304a3 	.word	0x000304a3
		switch (z_in_optname) {
   3047c:	3901      	subs	r1, #1
   3047e:	2905      	cmp	r1, #5
   30480:	d8c2      	bhi.n	30408 <z_to_nrf_optname+0xc>
   30482:	e8df f001 	tbb	[pc, r1]
   30486:	1503      	.short	0x1503
   30488:	210c1917 	.word	0x210c1917
			*nrf_out_optname = NRF_SO_SEC_TAG_LIST;
   3048c:	2302      	movs	r3, #2
			*nrf_out_optname = NRF_SO_DFU_OFFSET;
   3048e:	6013      	str	r3, [r2, #0]
   30490:	e00a      	b.n	304a8 <z_to_nrf_optname+0xac>
		switch (z_in_optname) {
   30492:	2914      	cmp	r1, #20
   30494:	d005      	beq.n	304a2 <z_to_nrf_optname+0xa6>
   30496:	2919      	cmp	r1, #25
   30498:	d005      	beq.n	304a6 <z_to_nrf_optname+0xaa>
   3049a:	2904      	cmp	r1, #4
   3049c:	d1b4      	bne.n	30408 <z_to_nrf_optname+0xc>
			*nrf_out_optname = NRF_SO_SEC_PEER_VERIFY;
   3049e:	2304      	movs	r3, #4
   304a0:	e7f5      	b.n	3048e <z_to_nrf_optname+0x92>
			*nrf_out_optname = NRF_SO_RCVTIMEO;
   304a2:	2314      	movs	r3, #20
   304a4:	e7f3      	b.n	3048e <z_to_nrf_optname+0x92>
			*nrf_out_optname = NRF_SO_BINDTODEVICE;
   304a6:	6011      	str	r1, [r2, #0]
	int retval = 0;
   304a8:	2000      	movs	r0, #0
			break;
   304aa:	4770      	bx	lr
			*nrf_out_optname = NRF_SO_DFU_TIMEO;
   304ac:	2303      	movs	r3, #3
   304ae:	e7ee      	b.n	3048e <z_to_nrf_optname+0x92>
			*nrf_out_optname = NRF_SO_DFU_REVERT;
   304b0:	2305      	movs	r3, #5
   304b2:	e7ec      	b.n	3048e <z_to_nrf_optname+0x92>
			*nrf_out_optname = NRF_SO_DFU_BACKUP_DELETE;
   304b4:	2306      	movs	r3, #6
   304b6:	e7ea      	b.n	3048e <z_to_nrf_optname+0x92>
			*nrf_out_optname = NRF_SO_DFU_OFFSET;
   304b8:	2307      	movs	r3, #7
   304ba:	e7e8      	b.n	3048e <z_to_nrf_optname+0x92>
		switch (z_in_optname) {
   304bc:	2902      	cmp	r1, #2
   304be:	d0e5      	beq.n	3048c <z_to_nrf_optname+0x90>
   304c0:	2903      	cmp	r1, #3
   304c2:	d0f3      	beq.n	304ac <z_to_nrf_optname+0xb0>
   304c4:	2901      	cmp	r1, #1
   304c6:	d19f      	bne.n	30408 <z_to_nrf_optname+0xc>
			*nrf_out_optname = NRF_SO_SEC_ROLE;
   304c8:	2301      	movs	r3, #1
   304ca:	e7e0      	b.n	3048e <z_to_nrf_optname+0x92>

000304cc <nrf91_socket_iface_init>:

static void nrf91_socket_iface_init(struct net_if *iface)
{
	nrf91_socket_iface_data.iface = iface;

	iface->if_dev->offloaded = true;
   304cc:	2201      	movs	r2, #1
	nrf91_socket_iface_data.iface = iface;
   304ce:	4b03      	ldr	r3, [pc, #12]	; (304dc <nrf91_socket_iface_init+0x10>)
   304d0:	6018      	str	r0, [r3, #0]
	iface->if_dev->offloaded = true;
   304d2:	6803      	ldr	r3, [r0, #0]

	socket_offload_register(&nrf91_socket_offload_ops);
   304d4:	4802      	ldr	r0, [pc, #8]	; (304e0 <nrf91_socket_iface_init+0x14>)
	iface->if_dev->offloaded = true;
   304d6:	769a      	strb	r2, [r3, #26]
	socket_offload_register(&nrf91_socket_offload_ops);
   304d8:	f7f4 bdb2 	b.w	25040 <socket_offload_register>
   304dc:	20024ce8 	.word	0x20024ce8
   304e0:	00046da4 	.word	0x00046da4

000304e4 <dk_set_leds_state.part.6>:
int dk_set_leds(u32_t leds)
{
	return dk_set_leds_state(leds, DK_ALL_LEDS_MSK);
}

int dk_set_leds_state(u32_t leds_on_mask, u32_t leds_off_mask)
   304e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   304e8:	4606      	mov	r6, r0
   304ea:	460f      	mov	r7, r1
	if ((leds_on_mask & ~DK_ALL_LEDS_MSK) != 0 ||
	   (leds_off_mask & ~DK_ALL_LEDS_MSK) != 0) {
		return -EINVAL;
	}

	for (size_t i = 0; i < ARRAY_SIZE(led_pins); i++) {
   304ec:	2400      	movs	r4, #0

			if (IS_ENABLED(CONFIG_DK_LIBRARY_INVERT_LEDS)) {
				val = 1 - val;
			}

			int err = gpio_pin_write(led_devs[i],
   304ee:	f8df 8074 	ldr.w	r8, [pc, #116]	; 30564 <dk_set_leds_state.part.6+0x80>
						 led_pins[i].number, val);
   304f2:	f8df 9074 	ldr.w	r9, [pc, #116]	; 30568 <dk_set_leds_state.part.6+0x84>
		if ((BIT(i) & leds_on_mask) || (BIT(i) & leds_off_mask)) {
   304f6:	fa26 f304 	lsr.w	r3, r6, r4
   304fa:	fa27 f204 	lsr.w	r2, r7, r4
   304fe:	431a      	orrs	r2, r3
   30500:	07d2      	lsls	r2, r2, #31
   30502:	d521      	bpl.n	30548 <dk_set_leds_state.part.6+0x64>
						 led_pins[i].number, val);
   30504:	eb09 02c4 	add.w	r2, r9, r4, lsl #3
			int err = gpio_pin_write(led_devs[i],
   30508:	f858 0024 	ldr.w	r0, [r8, r4, lsl #2]
   3050c:	7912      	ldrb	r2, [r2, #4]
				   u32_t pin, u32_t value)
{
	const struct gpio_driver_api *api =
		(const struct gpio_driver_api *)port->driver_api;

	return api->write(port, access_op, pin, value);
   3050e:	6841      	ldr	r1, [r0, #4]
   30510:	f003 0301 	and.w	r3, r3, #1
   30514:	684d      	ldr	r5, [r1, #4]
   30516:	2100      	movs	r1, #0
   30518:	47a8      	blx	r5
			if (err) {
   3051a:	4605      	mov	r5, r0
   3051c:	b1a0      	cbz	r0, 30548 <dk_set_leds_state.part.6+0x64>
				LOG_ERR("Cannot write LED gpio");
   3051e:	4b0d      	ldr	r3, [pc, #52]	; (30554 <dk_set_leds_state.part.6+0x70>)
   30520:	681b      	ldr	r3, [r3, #0]
   30522:	075b      	lsls	r3, r3, #29
   30524:	d00d      	beq.n	30542 <dk_set_leds_state.part.6+0x5e>
   30526:	2301      	movs	r3, #1
   30528:	f04f 0100 	mov.w	r1, #0
   3052c:	4a0a      	ldr	r2, [pc, #40]	; (30558 <dk_set_leds_state.part.6+0x74>)
   3052e:	f363 0107 	bfi	r1, r3, #0, #8
   30532:	4b0a      	ldr	r3, [pc, #40]	; (3055c <dk_set_leds_state.part.6+0x78>)
   30534:	480a      	ldr	r0, [pc, #40]	; (30560 <dk_set_leds_state.part.6+0x7c>)
   30536:	1a9b      	subs	r3, r3, r2
   30538:	08db      	lsrs	r3, r3, #3
   3053a:	f363 118f 	bfi	r1, r3, #6, #10
   3053e:	f010 fa80 	bl	40a42 <log_0>
			}
		}
	}

	return 0;
}
   30542:	4628      	mov	r0, r5
   30544:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	for (size_t i = 0; i < ARRAY_SIZE(led_pins); i++) {
   30548:	3401      	adds	r4, #1
   3054a:	2c04      	cmp	r4, #4
   3054c:	d1d3      	bne.n	304f6 <dk_set_leds_state.part.6+0x12>
	return 0;
   3054e:	2500      	movs	r5, #0
   30550:	e7f7      	b.n	30542 <dk_set_leds_state.part.6+0x5e>
   30552:	bf00      	nop
   30554:	20032acc 	.word	0x20032acc
   30558:	00045f08 	.word	0x00045f08
   3055c:	00045f98 	.word	0x00045f98
   30560:	0004c58a 	.word	0x0004c58a
   30564:	20024d50 	.word	0x20024d50
   30568:	00046e04 	.word	0x00046e04

0003056c <button_pressed>:
{
   3056c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	__asm__ volatile(
   3056e:	f04f 0320 	mov.w	r3, #32
   30572:	f3ef 8511 	mrs	r5, BASEPRI
   30576:	f383 8811 	msr	BASEPRI, r3
   3057a:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   3057e:	4835      	ldr	r0, [pc, #212]	; (30654 <button_pressed+0xe8>)
   30580:	f00d f87e 	bl	3d680 <z_spin_lock_valid>
   30584:	b968      	cbnz	r0, 305a2 <button_pressed+0x36>
   30586:	234a      	movs	r3, #74	; 0x4a
   30588:	4a33      	ldr	r2, [pc, #204]	; (30658 <button_pressed+0xec>)
   3058a:	4934      	ldr	r1, [pc, #208]	; (3065c <button_pressed+0xf0>)
   3058c:	4834      	ldr	r0, [pc, #208]	; (30660 <button_pressed+0xf4>)
   3058e:	f010 f838 	bl	40602 <printk>
   30592:	4930      	ldr	r1, [pc, #192]	; (30654 <button_pressed+0xe8>)
   30594:	4833      	ldr	r0, [pc, #204]	; (30664 <button_pressed+0xf8>)
   30596:	f010 f834 	bl	40602 <printk>
   3059a:	214a      	movs	r1, #74	; 0x4a
   3059c:	482e      	ldr	r0, [pc, #184]	; (30658 <button_pressed+0xec>)
   3059e:	f010 f8f3 	bl	40788 <assert_post_action>
	z_spin_lock_set_owner(l);
   305a2:	482c      	ldr	r0, [pc, #176]	; (30654 <button_pressed+0xe8>)
   305a4:	f00d f88a 	bl	3d6bc <z_spin_lock_set_owner>
	for (size_t i = 0; (i < ARRAY_SIZE(button_pins)) && !err; i++) {
   305a8:	2400      	movs	r4, #0
   305aa:	4e2f      	ldr	r6, [pc, #188]	; (30668 <button_pressed+0xfc>)
			  button_pins[i].number);
   305ac:	4f2f      	ldr	r7, [pc, #188]	; (3066c <button_pressed+0x100>)
   305ae:	eb07 03c4 	add.w	r3, r7, r4, lsl #3
			err = gpio_pin_disable_callback(button_devs[i],
   305b2:	f856 0b04 	ldr.w	r0, [r6], #4
   305b6:	791a      	ldrb	r2, [r3, #4]
					      int access_op, u32_t pin)
{
	const struct gpio_driver_api *api =
		(const struct gpio_driver_api *)port->driver_api;

	if (api->disable_callback == NULL) {
   305b8:	6843      	ldr	r3, [r0, #4]
   305ba:	695b      	ldr	r3, [r3, #20]
   305bc:	b1cb      	cbz	r3, 305f2 <button_pressed+0x86>
		return -ENOTSUP;
	}

	return api->disable_callback(port, access_op, pin);
   305be:	2100      	movs	r1, #0
   305c0:	4798      	blx	r3
	for (size_t i = 0; (i < ARRAY_SIZE(button_pins)) && !err; i++) {
   305c2:	3401      	adds	r4, #1
   305c4:	2c04      	cmp	r4, #4
   305c6:	d017      	beq.n	305f8 <button_pressed+0x8c>
   305c8:	2800      	cmp	r0, #0
   305ca:	d0f0      	beq.n	305ae <button_pressed+0x42>
		LOG_ERR("Cannot disable callbacks");
   305cc:	4b28      	ldr	r3, [pc, #160]	; (30670 <button_pressed+0x104>)
   305ce:	681b      	ldr	r3, [r3, #0]
   305d0:	075b      	lsls	r3, r3, #29
   305d2:	d013      	beq.n	305fc <button_pressed+0x90>
   305d4:	2301      	movs	r3, #1
   305d6:	f04f 0100 	mov.w	r1, #0
   305da:	4a26      	ldr	r2, [pc, #152]	; (30674 <button_pressed+0x108>)
   305dc:	f363 0107 	bfi	r1, r3, #0, #8
   305e0:	4b25      	ldr	r3, [pc, #148]	; (30678 <button_pressed+0x10c>)
   305e2:	4826      	ldr	r0, [pc, #152]	; (3067c <button_pressed+0x110>)
   305e4:	1a9b      	subs	r3, r3, r2
   305e6:	08db      	lsrs	r3, r3, #3
   305e8:	f363 118f 	bfi	r1, r3, #6, #10
   305ec:	f010 fa29 	bl	40a42 <log_0>
   305f0:	e004      	b.n	305fc <button_pressed+0x90>
		return -ENOTSUP;
   305f2:	f06f 0085 	mvn.w	r0, #133	; 0x85
   305f6:	e7e4      	b.n	305c2 <button_pressed+0x56>
	if (err) {
   305f8:	2800      	cmp	r0, #0
   305fa:	d1e7      	bne.n	305cc <button_pressed+0x60>
	switch (state) {
   305fc:	4b20      	ldr	r3, [pc, #128]	; (30680 <button_pressed+0x114>)
   305fe:	781a      	ldrb	r2, [r3, #0]
   30600:	b9e2      	cbnz	r2, 3063c <button_pressed+0xd0>
		state = STATE_SCANNING;
   30602:	2201      	movs	r2, #1
   30604:	491f      	ldr	r1, [pc, #124]	; (30684 <button_pressed+0x118>)
   30606:	4820      	ldr	r0, [pc, #128]	; (30688 <button_pressed+0x11c>)
   30608:	701a      	strb	r2, [r3, #0]
   3060a:	f00d fa0d 	bl	3da28 <k_delayed_work_submit_to_queue>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   3060e:	4811      	ldr	r0, [pc, #68]	; (30654 <button_pressed+0xe8>)
   30610:	f00d f844 	bl	3d69c <z_spin_unlock_valid>
   30614:	b968      	cbnz	r0, 30632 <button_pressed+0xc6>
   30616:	235d      	movs	r3, #93	; 0x5d
   30618:	4a0f      	ldr	r2, [pc, #60]	; (30658 <button_pressed+0xec>)
   3061a:	491c      	ldr	r1, [pc, #112]	; (3068c <button_pressed+0x120>)
   3061c:	4810      	ldr	r0, [pc, #64]	; (30660 <button_pressed+0xf4>)
   3061e:	f00f fff0 	bl	40602 <printk>
   30622:	490c      	ldr	r1, [pc, #48]	; (30654 <button_pressed+0xe8>)
   30624:	481a      	ldr	r0, [pc, #104]	; (30690 <button_pressed+0x124>)
   30626:	f00f ffec 	bl	40602 <printk>
   3062a:	215d      	movs	r1, #93	; 0x5d
   3062c:	480a      	ldr	r0, [pc, #40]	; (30658 <button_pressed+0xec>)
   3062e:	f010 f8ab 	bl	40788 <assert_post_action>
	__asm__ volatile(
   30632:	f385 8811 	msr	BASEPRI, r5
   30636:	f3bf 8f6f 	isb	sy
}
   3063a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		__ASSERT_NO_MSG(false);
   3063c:	23f2      	movs	r3, #242	; 0xf2
   3063e:	4a15      	ldr	r2, [pc, #84]	; (30694 <button_pressed+0x128>)
   30640:	4915      	ldr	r1, [pc, #84]	; (30698 <button_pressed+0x12c>)
   30642:	4807      	ldr	r0, [pc, #28]	; (30660 <button_pressed+0xf4>)
   30644:	f00f ffdd 	bl	40602 <printk>
   30648:	21f2      	movs	r1, #242	; 0xf2
   3064a:	4812      	ldr	r0, [pc, #72]	; (30694 <button_pressed+0x128>)
   3064c:	f010 f89c 	bl	40788 <assert_post_action>
		break;
   30650:	e7dd      	b.n	3060e <button_pressed+0xa2>
   30652:	bf00      	nop
   30654:	20024d60 	.word	0x20024d60
   30658:	000498fb 	.word	0x000498fb
   3065c:	00049921 	.word	0x00049921
   30660:	0004764f 	.word	0x0004764f
   30664:	00049936 	.word	0x00049936
   30668:	20024cec 	.word	0x20024cec
   3066c:	00046de4 	.word	0x00046de4
   30670:	20032acc 	.word	0x20032acc
   30674:	00045f08 	.word	0x00045f08
   30678:	00045f98 	.word	0x00045f98
   3067c:	0004c451 	.word	0x0004c451
   30680:	2002a4df 	.word	0x2002a4df
   30684:	20024d1c 	.word	0x20024d1c
   30688:	20029754 	.word	0x20029754
   3068c:	0004994e 	.word	0x0004994e
   30690:	00049965 	.word	0x00049965
   30694:	0004c46a 	.word	0x0004c46a
   30698:	0004d39b 	.word	0x0004d39b

0003069c <buttons_scan_fn>:
{
   3069c:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
	u32_t ret = 0;
   306a0:	2400      	movs	r4, #0
   306a2:	4f74      	ldr	r7, [pc, #464]	; (30874 <buttons_scan_fn+0x1d8>)
			button_devs[i], button_pins[i].number, &val)) {
   306a4:	f8df 922c 	ldr.w	r9, [pc, #556]	; 308d4 <buttons_scan_fn+0x238>
{
   306a8:	463e      	mov	r6, r7
	for (size_t i = 0; i < ARRAY_SIZE(button_pins); i++) {
   306aa:	4625      	mov	r5, r4
   306ac:	46c8      	mov	r8, r9
			button_devs[i], button_pins[i].number, &val)) {
   306ae:	eb09 03c5 	add.w	r3, r9, r5, lsl #3
		if (gpio_pin_read(
   306b2:	f856 0b04 	ldr.w	r0, [r6], #4
   306b6:	791a      	ldrb	r2, [r3, #4]
	return api->read(port, access_op, pin, value);
   306b8:	6843      	ldr	r3, [r0, #4]
   306ba:	2100      	movs	r1, #0
   306bc:	f8d3 a008 	ldr.w	sl, [r3, #8]
   306c0:	ab01      	add	r3, sp, #4
   306c2:	47d0      	blx	sl
   306c4:	2800      	cmp	r0, #0
   306c6:	d053      	beq.n	30770 <buttons_scan_fn+0xd4>
			LOG_ERR("Cannot read gpio pin");
   306c8:	4b6b      	ldr	r3, [pc, #428]	; (30878 <buttons_scan_fn+0x1dc>)
   306ca:	681b      	ldr	r3, [r3, #0]
   306cc:	0759      	lsls	r1, r3, #29
   306ce:	d00d      	beq.n	306ec <buttons_scan_fn+0x50>
   306d0:	2301      	movs	r3, #1
   306d2:	f04f 0100 	mov.w	r1, #0
   306d6:	4a69      	ldr	r2, [pc, #420]	; (3087c <buttons_scan_fn+0x1e0>)
   306d8:	f363 0107 	bfi	r1, r3, #0, #8
   306dc:	4b68      	ldr	r3, [pc, #416]	; (30880 <buttons_scan_fn+0x1e4>)
   306de:	4869      	ldr	r0, [pc, #420]	; (30884 <buttons_scan_fn+0x1e8>)
   306e0:	1a9b      	subs	r3, r3, r2
   306e2:	08db      	lsrs	r3, r3, #3
   306e4:	f363 118f 	bfi	r1, r3, #6, #10
   306e8:	f010 f9ab 	bl	40a42 <log_0>
			return 0;
   306ec:	2400      	movs	r4, #0
   306ee:	4b66      	ldr	r3, [pc, #408]	; (30888 <buttons_scan_fn+0x1ec>)
   306f0:	e8d3 2fef 	ldaex	r2, [r3]
   306f4:	e8c3 4fe1 	stlex	r1, r4, [r3]
   306f8:	2900      	cmp	r1, #0
   306fa:	d1f9      	bne.n	306f0 <buttons_scan_fn+0x54>
	if (!initial_run) {
   306fc:	4b63      	ldr	r3, [pc, #396]	; (3088c <buttons_scan_fn+0x1f0>)
   306fe:	f8df 91d8 	ldr.w	r9, [pc, #472]	; 308d8 <buttons_scan_fn+0x23c>
   30702:	781a      	ldrb	r2, [r3, #0]
   30704:	2a00      	cmp	r2, #0
   30706:	d145      	bne.n	30794 <buttons_scan_fn+0xf8>
		if (button_scan != last_button_scan) {
   30708:	f8d9 6000 	ldr.w	r6, [r9]
   3070c:	42a6      	cmp	r6, r4
   3070e:	d011      	beq.n	30734 <buttons_scan_fn+0x98>
	if (button_handler_cb != NULL) {
   30710:	4b5f      	ldr	r3, [pc, #380]	; (30890 <buttons_scan_fn+0x1f4>)
			u32_t has_changed = (button_scan ^ last_button_scan);
   30712:	4066      	eors	r6, r4
	if (button_handler_cb != NULL) {
   30714:	681b      	ldr	r3, [r3, #0]
   30716:	b113      	cbz	r3, 3071e <buttons_scan_fn+0x82>
		button_handler_cb(button_state, has_changed);
   30718:	4631      	mov	r1, r6
   3071a:	4620      	mov	r0, r4
   3071c:	4798      	blx	r3
	return z_impl_k_mutex_lock(mutex, timeout);
   3071e:	f04f 31ff 	mov.w	r1, #4294967295
   30722:	485c      	ldr	r0, [pc, #368]	; (30894 <buttons_scan_fn+0x1f8>)
   30724:	f00b fa00 	bl	3bb28 <z_impl_k_mutex_lock>
		SYS_SLIST_FOR_EACH_CONTAINER(&button_handlers, handler, node) {
   30728:	4b5b      	ldr	r3, [pc, #364]	; (30898 <buttons_scan_fn+0x1fc>)
   3072a:	681d      	ldr	r5, [r3, #0]
   3072c:	bb4d      	cbnz	r5, 30782 <buttons_scan_fn+0xe6>
	return z_impl_k_mutex_unlock(mutex);
   3072e:	4859      	ldr	r0, [pc, #356]	; (30894 <buttons_scan_fn+0x1f8>)
   30730:	f00b fad8 	bl	3bce4 <z_impl_k_mutex_unlock>
	last_button_scan = button_scan;
   30734:	f8c9 4000 	str.w	r4, [r9]
	if (button_scan != 0) {
   30738:	b37c      	cbz	r4, 3079a <buttons_scan_fn+0xfe>
   3073a:	220a      	movs	r2, #10
   3073c:	4957      	ldr	r1, [pc, #348]	; (3089c <buttons_scan_fn+0x200>)
   3073e:	4858      	ldr	r0, [pc, #352]	; (308a0 <buttons_scan_fn+0x204>)
   30740:	f00d f972 	bl	3da28 <k_delayed_work_submit_to_queue>
		if (err) {
   30744:	b188      	cbz	r0, 3076a <buttons_scan_fn+0xce>
			LOG_ERR("Cannot add work to workqueue");
   30746:	4b4c      	ldr	r3, [pc, #304]	; (30878 <buttons_scan_fn+0x1dc>)
   30748:	681b      	ldr	r3, [r3, #0]
   3074a:	075a      	lsls	r2, r3, #29
   3074c:	d00d      	beq.n	3076a <buttons_scan_fn+0xce>
   3074e:	2301      	movs	r3, #1
   30750:	f04f 0100 	mov.w	r1, #0
   30754:	4a49      	ldr	r2, [pc, #292]	; (3087c <buttons_scan_fn+0x1e0>)
   30756:	f363 0107 	bfi	r1, r3, #0, #8
   3075a:	4b49      	ldr	r3, [pc, #292]	; (30880 <buttons_scan_fn+0x1e4>)
   3075c:	4851      	ldr	r0, [pc, #324]	; (308a4 <buttons_scan_fn+0x208>)
   3075e:	1a9b      	subs	r3, r3, r2
   30760:	08db      	lsrs	r3, r3, #3
   30762:	f363 118f 	bfi	r1, r3, #6, #10
			LOG_ERR("Cannot enable callbacks");
   30766:	f010 f96c 	bl	40a42 <log_0>
}
   3076a:	b002      	add	sp, #8
   3076c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		if ((val && !IS_ENABLED(CONFIG_DK_LIBRARY_INVERT_BUTTONS)) ||
   30770:	9b01      	ldr	r3, [sp, #4]
   30772:	b913      	cbnz	r3, 3077a <buttons_scan_fn+0xde>
			ret |= 1U << i;
   30774:	2301      	movs	r3, #1
   30776:	40ab      	lsls	r3, r5
   30778:	431c      	orrs	r4, r3
	for (size_t i = 0; i < ARRAY_SIZE(button_pins); i++) {
   3077a:	3501      	adds	r5, #1
   3077c:	2d04      	cmp	r5, #4
   3077e:	d196      	bne.n	306ae <buttons_scan_fn+0x12>
   30780:	e7b5      	b.n	306ee <buttons_scan_fn+0x52>
		SYS_SLIST_FOR_EACH_CONTAINER(&button_handlers, handler, node) {
   30782:	3d04      	subs	r5, #4
   30784:	2d00      	cmp	r5, #0
   30786:	d0d2      	beq.n	3072e <buttons_scan_fn+0x92>
			handler->cb(button_state, has_changed);
   30788:	682b      	ldr	r3, [r5, #0]
   3078a:	4631      	mov	r1, r6
   3078c:	4620      	mov	r0, r4
   3078e:	4798      	blx	r3
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   30790:	686d      	ldr	r5, [r5, #4]
	return node->next;
   30792:	e7cb      	b.n	3072c <buttons_scan_fn+0x90>
		initial_run = false;
   30794:	2200      	movs	r2, #0
   30796:	701a      	strb	r2, [r3, #0]
   30798:	e7cc      	b.n	30734 <buttons_scan_fn+0x98>
	__asm__ volatile(
   3079a:	f04f 0320 	mov.w	r3, #32
   3079e:	f3ef 8611 	mrs	r6, BASEPRI
   307a2:	f383 8811 	msr	BASEPRI, r3
   307a6:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   307aa:	483f      	ldr	r0, [pc, #252]	; (308a8 <buttons_scan_fn+0x20c>)
   307ac:	f00c ff68 	bl	3d680 <z_spin_lock_valid>
   307b0:	b968      	cbnz	r0, 307ce <buttons_scan_fn+0x132>
   307b2:	234a      	movs	r3, #74	; 0x4a
   307b4:	4a3d      	ldr	r2, [pc, #244]	; (308ac <buttons_scan_fn+0x210>)
   307b6:	493e      	ldr	r1, [pc, #248]	; (308b0 <buttons_scan_fn+0x214>)
   307b8:	483e      	ldr	r0, [pc, #248]	; (308b4 <buttons_scan_fn+0x218>)
   307ba:	f00f ff22 	bl	40602 <printk>
   307be:	493a      	ldr	r1, [pc, #232]	; (308a8 <buttons_scan_fn+0x20c>)
   307c0:	483d      	ldr	r0, [pc, #244]	; (308b8 <buttons_scan_fn+0x21c>)
   307c2:	f00f ff1e 	bl	40602 <printk>
   307c6:	214a      	movs	r1, #74	; 0x4a
   307c8:	4838      	ldr	r0, [pc, #224]	; (308ac <buttons_scan_fn+0x210>)
   307ca:	f00f ffdd 	bl	40788 <assert_post_action>
	z_spin_lock_set_owner(l);
   307ce:	4836      	ldr	r0, [pc, #216]	; (308a8 <buttons_scan_fn+0x20c>)
   307d0:	f00c ff74 	bl	3d6bc <z_spin_lock_set_owner>
		switch (state) {
   307d4:	4b39      	ldr	r3, [pc, #228]	; (308bc <buttons_scan_fn+0x220>)
   307d6:	781a      	ldrb	r2, [r3, #0]
   307d8:	2a01      	cmp	r2, #1
   307da:	d13e      	bne.n	3085a <buttons_scan_fn+0x1be>
			state = STATE_WAITING;
   307dc:	2200      	movs	r2, #0
   307de:	701a      	strb	r2, [r3, #0]
			  button_pins[i].number);
   307e0:	eb08 03c4 	add.w	r3, r8, r4, lsl #3
			err = gpio_pin_enable_callback(button_devs[i],
   307e4:	f857 0b04 	ldr.w	r0, [r7], #4
   307e8:	791a      	ldrb	r2, [r3, #4]
	if (api->enable_callback == NULL) {
   307ea:	6843      	ldr	r3, [r0, #4]
   307ec:	691b      	ldr	r3, [r3, #16]
   307ee:	2b00      	cmp	r3, #0
   307f0:	d030      	beq.n	30854 <buttons_scan_fn+0x1b8>
	return api->enable_callback(port, access_op, pin);
   307f2:	2100      	movs	r1, #0
   307f4:	4798      	blx	r3
   307f6:	4605      	mov	r5, r0
	for (size_t i = 0; (i < ARRAY_SIZE(button_pins)) && !err; i++) {
   307f8:	3401      	adds	r4, #1
   307fa:	2c04      	cmp	r4, #4
   307fc:	d001      	beq.n	30802 <buttons_scan_fn+0x166>
   307fe:	2d00      	cmp	r5, #0
   30800:	d0ee      	beq.n	307e0 <buttons_scan_fn+0x144>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   30802:	4829      	ldr	r0, [pc, #164]	; (308a8 <buttons_scan_fn+0x20c>)
   30804:	f00c ff4a 	bl	3d69c <z_spin_unlock_valid>
   30808:	b968      	cbnz	r0, 30826 <buttons_scan_fn+0x18a>
   3080a:	235d      	movs	r3, #93	; 0x5d
   3080c:	4a27      	ldr	r2, [pc, #156]	; (308ac <buttons_scan_fn+0x210>)
   3080e:	492c      	ldr	r1, [pc, #176]	; (308c0 <buttons_scan_fn+0x224>)
   30810:	4828      	ldr	r0, [pc, #160]	; (308b4 <buttons_scan_fn+0x218>)
   30812:	f00f fef6 	bl	40602 <printk>
   30816:	4924      	ldr	r1, [pc, #144]	; (308a8 <buttons_scan_fn+0x20c>)
   30818:	482a      	ldr	r0, [pc, #168]	; (308c4 <buttons_scan_fn+0x228>)
   3081a:	f00f fef2 	bl	40602 <printk>
   3081e:	215d      	movs	r1, #93	; 0x5d
   30820:	4822      	ldr	r0, [pc, #136]	; (308ac <buttons_scan_fn+0x210>)
   30822:	f00f ffb1 	bl	40788 <assert_post_action>
	__asm__ volatile(
   30826:	f386 8811 	msr	BASEPRI, r6
   3082a:	f3bf 8f6f 	isb	sy
		if (err) {
   3082e:	2d00      	cmp	r5, #0
   30830:	d09b      	beq.n	3076a <buttons_scan_fn+0xce>
			LOG_ERR("Cannot enable callbacks");
   30832:	4b11      	ldr	r3, [pc, #68]	; (30878 <buttons_scan_fn+0x1dc>)
   30834:	681b      	ldr	r3, [r3, #0]
   30836:	075b      	lsls	r3, r3, #29
   30838:	d097      	beq.n	3076a <buttons_scan_fn+0xce>
   3083a:	2301      	movs	r3, #1
   3083c:	f04f 0100 	mov.w	r1, #0
   30840:	4a0e      	ldr	r2, [pc, #56]	; (3087c <buttons_scan_fn+0x1e0>)
   30842:	f363 0107 	bfi	r1, r3, #0, #8
   30846:	4b0e      	ldr	r3, [pc, #56]	; (30880 <buttons_scan_fn+0x1e4>)
   30848:	481f      	ldr	r0, [pc, #124]	; (308c8 <buttons_scan_fn+0x22c>)
   3084a:	1a9b      	subs	r3, r3, r2
   3084c:	08db      	lsrs	r3, r3, #3
   3084e:	f363 118f 	bfi	r1, r3, #6, #10
   30852:	e788      	b.n	30766 <buttons_scan_fn+0xca>
		return -ENOTSUP;
   30854:	f06f 0585 	mvn.w	r5, #133	; 0x85
   30858:	e7ce      	b.n	307f8 <buttons_scan_fn+0x15c>
			__ASSERT_NO_MSG(false);
   3085a:	23a8      	movs	r3, #168	; 0xa8
   3085c:	4a1b      	ldr	r2, [pc, #108]	; (308cc <buttons_scan_fn+0x230>)
   3085e:	491c      	ldr	r1, [pc, #112]	; (308d0 <buttons_scan_fn+0x234>)
   30860:	4814      	ldr	r0, [pc, #80]	; (308b4 <buttons_scan_fn+0x218>)
   30862:	f00f fece 	bl	40602 <printk>
   30866:	21a8      	movs	r1, #168	; 0xa8
   30868:	4818      	ldr	r0, [pc, #96]	; (308cc <buttons_scan_fn+0x230>)
   3086a:	f00f ff8d 	bl	40788 <assert_post_action>
		int err = 0;
   3086e:	2500      	movs	r5, #0
			break;
   30870:	e7c7      	b.n	30802 <buttons_scan_fn+0x166>
   30872:	bf00      	nop
   30874:	20024cec 	.word	0x20024cec
   30878:	20032acc 	.word	0x20032acc
   3087c:	00045f08 	.word	0x00045f08
   30880:	00045f98 	.word	0x00045f98
   30884:	0004c4a8 	.word	0x0004c4a8
   30888:	20024d64 	.word	0x20024d64
   3088c:	200328af 	.word	0x200328af
   30890:	20024cfc 	.word	0x20024cfc
   30894:	20024d00 	.word	0x20024d00
   30898:	20024d14 	.word	0x20024d14
   3089c:	20024d1c 	.word	0x20024d1c
   308a0:	20029754 	.word	0x20029754
   308a4:	0004c4bd 	.word	0x0004c4bd
   308a8:	20024d60 	.word	0x20024d60
   308ac:	000498fb 	.word	0x000498fb
   308b0:	00049921 	.word	0x00049921
   308b4:	0004764f 	.word	0x0004764f
   308b8:	00049936 	.word	0x00049936
   308bc:	2002a4df 	.word	0x2002a4df
   308c0:	0004994e 	.word	0x0004994e
   308c4:	00049965 	.word	0x00049965
   308c8:	0004c4da 	.word	0x0004c4da
   308cc:	0004c46a 	.word	0x0004c46a
   308d0:	0004d39b 	.word	0x0004d39b
   308d4:	00046de4 	.word	0x00046de4
   308d8:	20024d48 	.word	0x20024d48

000308dc <dk_leds_init>:
{
   308dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	for (size_t i = 0; i < ARRAY_SIZE(led_pins); i++) {
   308de:	2600      	movs	r6, #0
   308e0:	4c21      	ldr	r4, [pc, #132]	; (30968 <dk_leds_init+0x8c>)
   308e2:	4f22      	ldr	r7, [pc, #136]	; (3096c <dk_leds_init+0x90>)
		led_devs[i] = device_get_binding(led_pins[i].port);
   308e4:	6820      	ldr	r0, [r4, #0]
   308e6:	f00a fbcf 	bl	3b088 <z_impl_device_get_binding>
   308ea:	f847 0b04 	str.w	r0, [r7], #4
		if (!led_devs[i]) {
   308ee:	b9a0      	cbnz	r0, 3091a <dk_leds_init+0x3e>
			LOG_ERR("Cannot bind gpio device");
   308f0:	4b1f      	ldr	r3, [pc, #124]	; (30970 <dk_leds_init+0x94>)
   308f2:	681b      	ldr	r3, [r3, #0]
   308f4:	075a      	lsls	r2, r3, #29
   308f6:	d00d      	beq.n	30914 <dk_leds_init+0x38>
   308f8:	2301      	movs	r3, #1
   308fa:	f04f 0100 	mov.w	r1, #0
   308fe:	4a1d      	ldr	r2, [pc, #116]	; (30974 <dk_leds_init+0x98>)
   30900:	f363 0107 	bfi	r1, r3, #0, #8
   30904:	4b1c      	ldr	r3, [pc, #112]	; (30978 <dk_leds_init+0x9c>)
   30906:	481d      	ldr	r0, [pc, #116]	; (3097c <dk_leds_init+0xa0>)
   30908:	1a9b      	subs	r3, r3, r2
   3090a:	08db      	lsrs	r3, r3, #3
   3090c:	f363 118f 	bfi	r1, r3, #6, #10
   30910:	f010 f897 	bl	40a42 <log_0>
			return -ENODEV;
   30914:	f06f 0512 	mvn.w	r5, #18
   30918:	e019      	b.n	3094e <dk_leds_init+0x72>
		err = gpio_pin_configure(led_devs[i], led_pins[i].number,
   3091a:	7922      	ldrb	r2, [r4, #4]
	return api->config(port, access_op, pin, flags);
   3091c:	6843      	ldr	r3, [r0, #4]
   3091e:	2100      	movs	r1, #0
   30920:	681d      	ldr	r5, [r3, #0]
   30922:	2301      	movs	r3, #1
   30924:	47a8      	blx	r5
		if (err) {
   30926:	4605      	mov	r5, r0
   30928:	b198      	cbz	r0, 30952 <dk_leds_init+0x76>
			LOG_ERR("Cannot configure LED gpio");
   3092a:	4b11      	ldr	r3, [pc, #68]	; (30970 <dk_leds_init+0x94>)
   3092c:	681b      	ldr	r3, [r3, #0]
   3092e:	075b      	lsls	r3, r3, #29
   30930:	d00d      	beq.n	3094e <dk_leds_init+0x72>
   30932:	2301      	movs	r3, #1
   30934:	f04f 0100 	mov.w	r1, #0
   30938:	4a0e      	ldr	r2, [pc, #56]	; (30974 <dk_leds_init+0x98>)
   3093a:	f363 0107 	bfi	r1, r3, #0, #8
   3093e:	4b0e      	ldr	r3, [pc, #56]	; (30978 <dk_leds_init+0x9c>)
   30940:	480f      	ldr	r0, [pc, #60]	; (30980 <dk_leds_init+0xa4>)
   30942:	1a9b      	subs	r3, r3, r2
   30944:	08db      	lsrs	r3, r3, #3
   30946:	f363 118f 	bfi	r1, r3, #6, #10
   3094a:	f010 f87a 	bl	40a42 <log_0>
}
   3094e:	4628      	mov	r0, r5
   30950:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	for (size_t i = 0; i < ARRAY_SIZE(led_pins); i++) {
   30952:	3601      	adds	r6, #1
   30954:	2e04      	cmp	r6, #4
   30956:	f104 0408 	add.w	r4, r4, #8
   3095a:	d1c3      	bne.n	308e4 <dk_leds_init+0x8>
}
   3095c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   30960:	210f      	movs	r1, #15
   30962:	f7ff bdbf 	b.w	304e4 <dk_set_leds_state.part.6>
   30966:	bf00      	nop
   30968:	00046e04 	.word	0x00046e04
   3096c:	20024d50 	.word	0x20024d50
   30970:	20032acc 	.word	0x20032acc
   30974:	00045f08 	.word	0x00045f08
   30978:	00045f98 	.word	0x00045f98
   3097c:	0004c558 	.word	0x0004c558
   30980:	0004c570 	.word	0x0004c570

00030984 <dk_read_buttons>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   30984:	4b05      	ldr	r3, [pc, #20]	; (3099c <dk_read_buttons+0x18>)
   30986:	e8d3 3faf 	lda	r3, [r3]
	if (button_state != NULL) {
   3098a:	b100      	cbz	r0, 3098e <dk_read_buttons+0xa>
		*button_state = current_state;
   3098c:	6003      	str	r3, [r0, #0]
	if (has_changed != NULL) {
   3098e:	4804      	ldr	r0, [pc, #16]	; (309a0 <dk_read_buttons+0x1c>)
   30990:	b111      	cbz	r1, 30998 <dk_read_buttons+0x14>
		*has_changed = (current_state ^ last_state);
   30992:	6802      	ldr	r2, [r0, #0]
   30994:	405a      	eors	r2, r3
   30996:	600a      	str	r2, [r1, #0]
	last_state = current_state;
   30998:	6003      	str	r3, [r0, #0]
}
   3099a:	4770      	bx	lr
   3099c:	20024d64 	.word	0x20024d64
   309a0:	20024d4c 	.word	0x20024d4c

000309a4 <dk_buttons_init>:
{
   309a4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	button_handler_cb = button_handler;
   309a8:	4b72      	ldr	r3, [pc, #456]	; (30b74 <dk_buttons_init+0x1d0>)
   309aa:	6018      	str	r0, [r3, #0]
	return z_impl_k_mutex_init(mutex);
   309ac:	4d72      	ldr	r5, [pc, #456]	; (30b78 <dk_buttons_init+0x1d4>)
   309ae:	4f73      	ldr	r7, [pc, #460]	; (30b7c <dk_buttons_init+0x1d8>)
   309b0:	4873      	ldr	r0, [pc, #460]	; (30b80 <dk_buttons_init+0x1dc>)
   309b2:	f014 f88e 	bl	44ad2 <z_impl_k_mutex_init>
   309b6:	46b9      	mov	r9, r7
	for (size_t i = 0; i < ARRAY_SIZE(button_pins); i++) {
   309b8:	2600      	movs	r6, #0
   309ba:	46a8      	mov	r8, r5
		button_devs[i] = device_get_binding(button_pins[i].port);
   309bc:	6828      	ldr	r0, [r5, #0]
   309be:	f00a fb63 	bl	3b088 <z_impl_device_get_binding>
   309c2:	f849 0b04 	str.w	r0, [r9], #4
		if (!button_devs[i]) {
   309c6:	b9a0      	cbnz	r0, 309f2 <dk_buttons_init+0x4e>
			LOG_ERR("Cannot bind gpio device");
   309c8:	4b6e      	ldr	r3, [pc, #440]	; (30b84 <dk_buttons_init+0x1e0>)
   309ca:	681b      	ldr	r3, [r3, #0]
   309cc:	075e      	lsls	r6, r3, #29
   309ce:	d00d      	beq.n	309ec <dk_buttons_init+0x48>
   309d0:	2301      	movs	r3, #1
   309d2:	f04f 0100 	mov.w	r1, #0
   309d6:	4a6c      	ldr	r2, [pc, #432]	; (30b88 <dk_buttons_init+0x1e4>)
   309d8:	f363 0107 	bfi	r1, r3, #0, #8
   309dc:	4b6b      	ldr	r3, [pc, #428]	; (30b8c <dk_buttons_init+0x1e8>)
   309de:	486c      	ldr	r0, [pc, #432]	; (30b90 <dk_buttons_init+0x1ec>)
   309e0:	1a9b      	subs	r3, r3, r2
   309e2:	08db      	lsrs	r3, r3, #3
   309e4:	f363 118f 	bfi	r1, r3, #6, #10
   309e8:	f010 f82b 	bl	40a42 <log_0>
			return -ENODEV;
   309ec:	f06f 0412 	mvn.w	r4, #18
   309f0:	e01a      	b.n	30a28 <dk_buttons_init+0x84>
		err = gpio_pin_configure(button_devs[i], button_pins[i].number,
   309f2:	792a      	ldrb	r2, [r5, #4]
   309f4:	6843      	ldr	r3, [r0, #4]
   309f6:	2100      	movs	r1, #0
   309f8:	681c      	ldr	r4, [r3, #0]
   309fa:	f44f 7380 	mov.w	r3, #256	; 0x100
   309fe:	47a0      	blx	r4
		if (err) {
   30a00:	4604      	mov	r4, r0
   30a02:	b1a0      	cbz	r0, 30a2e <dk_buttons_init+0x8a>
			LOG_ERR("Cannot configure button gpio");
   30a04:	4b5f      	ldr	r3, [pc, #380]	; (30b84 <dk_buttons_init+0x1e0>)
   30a06:	681b      	ldr	r3, [r3, #0]
   30a08:	075d      	lsls	r5, r3, #29
   30a0a:	d00d      	beq.n	30a28 <dk_buttons_init+0x84>
   30a0c:	2301      	movs	r3, #1
   30a0e:	f04f 0100 	mov.w	r1, #0
   30a12:	4a5d      	ldr	r2, [pc, #372]	; (30b88 <dk_buttons_init+0x1e4>)
   30a14:	f363 0107 	bfi	r1, r3, #0, #8
   30a18:	4b5c      	ldr	r3, [pc, #368]	; (30b8c <dk_buttons_init+0x1e8>)
   30a1a:	485e      	ldr	r0, [pc, #376]	; (30b94 <dk_buttons_init+0x1f0>)
   30a1c:	1a9b      	subs	r3, r3, r2
   30a1e:	08db      	lsrs	r3, r3, #3
   30a20:	f363 118f 	bfi	r1, r3, #6, #10
		LOG_ERR("Cannot add work to workqueue");
   30a24:	f010 f80d 	bl	40a42 <log_0>
}
   30a28:	4620      	mov	r0, r4
   30a2a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	for (size_t i = 0; i < ARRAY_SIZE(button_pins); i++) {
   30a2e:	3601      	adds	r6, #1
   30a30:	2e04      	cmp	r6, #4
   30a32:	f105 0508 	add.w	r5, r5, #8
   30a36:	d1c1      	bne.n	309bc <dk_buttons_init+0x18>
	for (size_t i = 0; (i < ARRAY_SIZE(button_pins)) && !err; i++) {
   30a38:	4605      	mov	r5, r0
   30a3a:	4e50      	ldr	r6, [pc, #320]	; (30b7c <dk_buttons_init+0x1d8>)
		err = gpio_pin_configure(button_devs[i], button_pins[i].number,
   30a3c:	eb08 03c5 	add.w	r3, r8, r5, lsl #3
   30a40:	f856 0b04 	ldr.w	r0, [r6], #4
   30a44:	791a      	ldrb	r2, [r3, #4]
   30a46:	6843      	ldr	r3, [r0, #4]
   30a48:	2100      	movs	r1, #0
   30a4a:	681c      	ldr	r4, [r3, #0]
   30a4c:	f44f 7381 	mov.w	r3, #258	; 0x102
   30a50:	47a0      	blx	r4
	for (size_t i = 0; (i < ARRAY_SIZE(button_pins)) && !err; i++) {
   30a52:	3501      	adds	r5, #1
   30a54:	2d04      	cmp	r5, #4
   30a56:	4604      	mov	r4, r0
   30a58:	d012      	beq.n	30a80 <dk_buttons_init+0xdc>
   30a5a:	2800      	cmp	r0, #0
   30a5c:	d0ee      	beq.n	30a3c <dk_buttons_init+0x98>
		LOG_ERR("Cannot set interrupt mode");
   30a5e:	4b49      	ldr	r3, [pc, #292]	; (30b84 <dk_buttons_init+0x1e0>)
   30a60:	681b      	ldr	r3, [r3, #0]
   30a62:	0758      	lsls	r0, r3, #29
   30a64:	d0e0      	beq.n	30a28 <dk_buttons_init+0x84>
   30a66:	2301      	movs	r3, #1
   30a68:	f04f 0100 	mov.w	r1, #0
   30a6c:	4a46      	ldr	r2, [pc, #280]	; (30b88 <dk_buttons_init+0x1e4>)
   30a6e:	f363 0107 	bfi	r1, r3, #0, #8
   30a72:	4b46      	ldr	r3, [pc, #280]	; (30b8c <dk_buttons_init+0x1e8>)
   30a74:	4848      	ldr	r0, [pc, #288]	; (30b98 <dk_buttons_init+0x1f4>)
   30a76:	1a9b      	subs	r3, r3, r2
   30a78:	08db      	lsrs	r3, r3, #3
   30a7a:	f363 118f 	bfi	r1, r3, #6, #10
   30a7e:	e7d1      	b.n	30a24 <dk_buttons_init+0x80>
	if (err) {
   30a80:	2800      	cmp	r0, #0
   30a82:	d1ec      	bne.n	30a5e <dk_buttons_init+0xba>
	for (size_t i = 0; i < ARRAY_SIZE(button_pins); i++) {
   30a84:	4605      	mov	r5, r0
	u32_t pin_mask = 0;
   30a86:	4681      	mov	r9, r0
		pin_mask |= BIT(button_pins[i].number);
   30a88:	f04f 0b01 	mov.w	fp, #1
   30a8c:	f8df a0ec 	ldr.w	sl, [pc, #236]	; 30b7c <dk_buttons_init+0x1d8>
			button_pins[i].number);
   30a90:	eb08 03c5 	add.w	r3, r8, r5, lsl #3
		err = gpio_pin_disable_callback(button_devs[i],
   30a94:	f85a 0b04 	ldr.w	r0, [sl], #4
			button_pins[i].number);
   30a98:	791e      	ldrb	r6, [r3, #4]
	if (api->disable_callback == NULL) {
   30a9a:	6843      	ldr	r3, [r0, #4]
   30a9c:	695b      	ldr	r3, [r3, #20]
   30a9e:	b1ab      	cbz	r3, 30acc <dk_buttons_init+0x128>
	return api->disable_callback(port, access_op, pin);
   30aa0:	4632      	mov	r2, r6
   30aa2:	2100      	movs	r1, #0
   30aa4:	4798      	blx	r3
		if (err) {
   30aa6:	4604      	mov	r4, r0
   30aa8:	b198      	cbz	r0, 30ad2 <dk_buttons_init+0x12e>
			LOG_ERR("Cannot disable callbacks()");
   30aaa:	4b36      	ldr	r3, [pc, #216]	; (30b84 <dk_buttons_init+0x1e0>)
   30aac:	681b      	ldr	r3, [r3, #0]
   30aae:	0759      	lsls	r1, r3, #29
   30ab0:	d0ba      	beq.n	30a28 <dk_buttons_init+0x84>
   30ab2:	2301      	movs	r3, #1
   30ab4:	f04f 0100 	mov.w	r1, #0
   30ab8:	4a33      	ldr	r2, [pc, #204]	; (30b88 <dk_buttons_init+0x1e4>)
   30aba:	f363 0107 	bfi	r1, r3, #0, #8
   30abe:	4b33      	ldr	r3, [pc, #204]	; (30b8c <dk_buttons_init+0x1e8>)
   30ac0:	4836      	ldr	r0, [pc, #216]	; (30b9c <dk_buttons_init+0x1f8>)
   30ac2:	1a9b      	subs	r3, r3, r2
   30ac4:	08db      	lsrs	r3, r3, #3
   30ac6:	f363 118f 	bfi	r1, r3, #6, #10
   30aca:	e7ab      	b.n	30a24 <dk_buttons_init+0x80>
		return -ENOTSUP;
   30acc:	f06f 0485 	mvn.w	r4, #133	; 0x85
   30ad0:	e7eb      	b.n	30aaa <dk_buttons_init+0x106>
	for (size_t i = 0; i < ARRAY_SIZE(button_pins); i++) {
   30ad2:	3501      	adds	r5, #1
		pin_mask |= BIT(button_pins[i].number);
   30ad4:	fa0b f606 	lsl.w	r6, fp, r6
	for (size_t i = 0; i < ARRAY_SIZE(button_pins); i++) {
   30ad8:	2d04      	cmp	r5, #4
		pin_mask |= BIT(button_pins[i].number);
   30ada:	ea49 0906 	orr.w	r9, r9, r6
	for (size_t i = 0; i < ARRAY_SIZE(button_pins); i++) {
   30ade:	d1d7      	bne.n	30a90 <dk_buttons_init+0xec>
	for (size_t i = 0; i < ARRAY_SIZE(button_pins); i++) {
   30ae0:	4606      	mov	r6, r0
				      u32_t pin_mask)
{
	__ASSERT(callback, "Callback pointer should not be NULL");
	__ASSERT(handler, "Callback handler pointer should not be NULL");

	callback->handler = handler;
   30ae2:	4d2f      	ldr	r5, [pc, #188]	; (30ba0 <dk_buttons_init+0x1fc>)
   30ae4:	4b2f      	ldr	r3, [pc, #188]	; (30ba4 <dk_buttons_init+0x200>)
	callback->pin_mask = pin_mask;
   30ae6:	e9c5 3901 	strd	r3, r9, [r5, #4]
		err = gpio_add_callback(button_devs[i], &gpio_cb);
   30aea:	f857 0b04 	ldr.w	r0, [r7], #4
				    struct gpio_callback *callback)
{
	const struct gpio_driver_api *api =
		(const struct gpio_driver_api *)port->driver_api;

	if (api->manage_callback == NULL) {
   30aee:	6843      	ldr	r3, [r0, #4]
   30af0:	68db      	ldr	r3, [r3, #12]
   30af2:	b1ab      	cbz	r3, 30b20 <dk_buttons_init+0x17c>
		return -ENOTSUP;
	}

	return api->manage_callback(port, callback, true);
   30af4:	2201      	movs	r2, #1
   30af6:	4629      	mov	r1, r5
   30af8:	4798      	blx	r3
		if (err) {
   30afa:	4604      	mov	r4, r0
   30afc:	b198      	cbz	r0, 30b26 <dk_buttons_init+0x182>
			LOG_ERR("Cannot add callback");
   30afe:	4b21      	ldr	r3, [pc, #132]	; (30b84 <dk_buttons_init+0x1e0>)
   30b00:	681b      	ldr	r3, [r3, #0]
   30b02:	075a      	lsls	r2, r3, #29
   30b04:	d090      	beq.n	30a28 <dk_buttons_init+0x84>
   30b06:	2301      	movs	r3, #1
   30b08:	f04f 0100 	mov.w	r1, #0
   30b0c:	4a1e      	ldr	r2, [pc, #120]	; (30b88 <dk_buttons_init+0x1e4>)
   30b0e:	f363 0107 	bfi	r1, r3, #0, #8
   30b12:	4b1e      	ldr	r3, [pc, #120]	; (30b8c <dk_buttons_init+0x1e8>)
   30b14:	4824      	ldr	r0, [pc, #144]	; (30ba8 <dk_buttons_init+0x204>)
   30b16:	1a9b      	subs	r3, r3, r2
   30b18:	08db      	lsrs	r3, r3, #3
   30b1a:	f363 118f 	bfi	r1, r3, #6, #10
   30b1e:	e781      	b.n	30a24 <dk_buttons_init+0x80>
		return -ENOTSUP;
   30b20:	f06f 0485 	mvn.w	r4, #133	; 0x85
   30b24:	e7eb      	b.n	30afe <dk_buttons_init+0x15a>
	for (size_t i = 0; i < ARRAY_SIZE(button_pins); i++) {
   30b26:	3601      	adds	r6, #1
   30b28:	2e04      	cmp	r6, #4
   30b2a:	d1de      	bne.n	30aea <dk_buttons_init+0x146>
	k_delayed_work_init(&buttons_scan, buttons_scan_fn);
   30b2c:	491f      	ldr	r1, [pc, #124]	; (30bac <dk_buttons_init+0x208>)
   30b2e:	4820      	ldr	r0, [pc, #128]	; (30bb0 <dk_buttons_init+0x20c>)
   30b30:	f014 f8bb 	bl	44caa <k_delayed_work_init>
	state = STATE_SCANNING;
   30b34:	2201      	movs	r2, #1
   30b36:	4b1f      	ldr	r3, [pc, #124]	; (30bb4 <dk_buttons_init+0x210>)
   30b38:	491d      	ldr	r1, [pc, #116]	; (30bb0 <dk_buttons_init+0x20c>)
   30b3a:	701a      	strb	r2, [r3, #0]
   30b3c:	481e      	ldr	r0, [pc, #120]	; (30bb8 <dk_buttons_init+0x214>)
   30b3e:	4622      	mov	r2, r4
   30b40:	f00c ff72 	bl	3da28 <k_delayed_work_submit_to_queue>
	if (err) {
   30b44:	4604      	mov	r4, r0
   30b46:	b188      	cbz	r0, 30b6c <dk_buttons_init+0x1c8>
		LOG_ERR("Cannot add work to workqueue");
   30b48:	4b0e      	ldr	r3, [pc, #56]	; (30b84 <dk_buttons_init+0x1e0>)
   30b4a:	681b      	ldr	r3, [r3, #0]
   30b4c:	075b      	lsls	r3, r3, #29
   30b4e:	f43f af6b 	beq.w	30a28 <dk_buttons_init+0x84>
   30b52:	2301      	movs	r3, #1
   30b54:	f04f 0100 	mov.w	r1, #0
   30b58:	4a0b      	ldr	r2, [pc, #44]	; (30b88 <dk_buttons_init+0x1e4>)
   30b5a:	f363 0107 	bfi	r1, r3, #0, #8
   30b5e:	4b0b      	ldr	r3, [pc, #44]	; (30b8c <dk_buttons_init+0x1e8>)
   30b60:	4816      	ldr	r0, [pc, #88]	; (30bbc <dk_buttons_init+0x218>)
   30b62:	1a9b      	subs	r3, r3, r2
   30b64:	08db      	lsrs	r3, r3, #3
   30b66:	f363 118f 	bfi	r1, r3, #6, #10
   30b6a:	e75b      	b.n	30a24 <dk_buttons_init+0x80>
	dk_read_buttons(NULL, NULL);
   30b6c:	4601      	mov	r1, r0
   30b6e:	f7ff ff09 	bl	30984 <dk_read_buttons>
	return 0;
   30b72:	e759      	b.n	30a28 <dk_buttons_init+0x84>
   30b74:	20024cfc 	.word	0x20024cfc
   30b78:	00046de4 	.word	0x00046de4
   30b7c:	20024cec 	.word	0x20024cec
   30b80:	20024d00 	.word	0x20024d00
   30b84:	20032acc 	.word	0x20032acc
   30b88:	00045f08 	.word	0x00045f08
   30b8c:	00045f98 	.word	0x00045f98
   30b90:	0004c558 	.word	0x0004c558
   30b94:	0004c4f2 	.word	0x0004c4f2
   30b98:	0004c50f 	.word	0x0004c50f
   30b9c:	0004c529 	.word	0x0004c529
   30ba0:	20024d3c 	.word	0x20024d3c
   30ba4:	0003056d 	.word	0x0003056d
   30ba8:	0004c544 	.word	0x0004c544
   30bac:	0003069d 	.word	0x0003069d
   30bb0:	20024d1c 	.word	0x20024d1c
   30bb4:	2002a4df 	.word	0x2002a4df
   30bb8:	20029754 	.word	0x20029754
   30bbc:	0004c4bd 	.word	0x0004c4bd

00030bc0 <dk_get_buttons>:
   30bc0:	4b01      	ldr	r3, [pc, #4]	; (30bc8 <dk_get_buttons+0x8>)
   30bc2:	e8d3 0faf 	lda	r0, [r3]
}
   30bc6:	4770      	bx	lr
   30bc8:	20024d64 	.word	0x20024d64

00030bcc <close>:
{
   30bcc:	b570      	push	{r4, r5, r6, lr}
	__ASSERT_NO_MSG(socket_ops);
   30bce:	4c10      	ldr	r4, [pc, #64]	; (30c10 <close+0x44>)
{
   30bd0:	4605      	mov	r5, r0
	__ASSERT_NO_MSG(socket_ops);
   30bd2:	6823      	ldr	r3, [r4, #0]
   30bd4:	b94b      	cbnz	r3, 30bea <close+0x1e>
   30bd6:	490f      	ldr	r1, [pc, #60]	; (30c14 <close+0x48>)
   30bd8:	480f      	ldr	r0, [pc, #60]	; (30c18 <close+0x4c>)
   30bda:	2321      	movs	r3, #33	; 0x21
   30bdc:	4a0f      	ldr	r2, [pc, #60]	; (30c1c <close+0x50>)
   30bde:	f00f fd10 	bl	40602 <printk>
   30be2:	2121      	movs	r1, #33	; 0x21
   30be4:	480d      	ldr	r0, [pc, #52]	; (30c1c <close+0x50>)
   30be6:	f00f fdcf 	bl	40788 <assert_post_action>
	__ASSERT_NO_MSG(socket_ops->close);
   30bea:	6823      	ldr	r3, [r4, #0]
   30bec:	685b      	ldr	r3, [r3, #4]
   30bee:	b94b      	cbnz	r3, 30c04 <close+0x38>
   30bf0:	490b      	ldr	r1, [pc, #44]	; (30c20 <close+0x54>)
   30bf2:	4809      	ldr	r0, [pc, #36]	; (30c18 <close+0x4c>)
   30bf4:	2322      	movs	r3, #34	; 0x22
   30bf6:	4a09      	ldr	r2, [pc, #36]	; (30c1c <close+0x50>)
   30bf8:	f00f fd03 	bl	40602 <printk>
   30bfc:	2122      	movs	r1, #34	; 0x22
   30bfe:	4807      	ldr	r0, [pc, #28]	; (30c1c <close+0x50>)
   30c00:	f00f fdc2 	bl	40788 <assert_post_action>
	return socket_ops->close(sock);
   30c04:	6823      	ldr	r3, [r4, #0]
   30c06:	4628      	mov	r0, r5
}
   30c08:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return socket_ops->close(sock);
   30c0c:	685b      	ldr	r3, [r3, #4]
   30c0e:	4718      	bx	r3
   30c10:	2002237c 	.word	0x2002237c
   30c14:	0004b740 	.word	0x0004b740
   30c18:	0004764f 	.word	0x0004764f
   30c1c:	0004b710 	.word	0x0004b710
   30c20:	0004b243 	.word	0x0004b243

00030c24 <callback_worker>:

	return new_len;
}

static void callback_worker(struct k_work *item)
{
   30c24:	b507      	push	{r0, r1, r2, lr}
	struct callback_work_item *data =
   30c26:	9001      	str	r0, [sp, #4]
		CONTAINER_OF(item, struct callback_work_item, work);

	if (data != NULL) {
   30c28:	b118      	cbz	r0, 30c32 <callback_worker+0xe>
		data->callback(data->data);
   30c2a:	f8d0 3a98 	ldr.w	r3, [r0, #2712]	; 0xa98
   30c2e:	300c      	adds	r0, #12
   30c30:	4798      	blx	r3
	}

	k_mem_slab_free(&rsp_work_items, (void **)&data);
   30c32:	a901      	add	r1, sp, #4
   30c34:	4802      	ldr	r0, [pc, #8]	; (30c40 <callback_worker+0x1c>)
   30c36:	f00a fc67 	bl	3b508 <k_mem_slab_free>
}
   30c3a:	b003      	add	sp, #12
   30c3c:	f85d fb04 	ldr.w	pc, [sp], #4
   30c40:	20032b60 	.word	0x20032b60

00030c44 <open_socket>:
{
   30c44:	b510      	push	{r4, lr}
	__ASSERT_NO_MSG(socket_ops);
   30c46:	4c16      	ldr	r4, [pc, #88]	; (30ca0 <open_socket+0x5c>)
   30c48:	6823      	ldr	r3, [r4, #0]
   30c4a:	b94b      	cbnz	r3, 30c60 <open_socket+0x1c>
   30c4c:	4915      	ldr	r1, [pc, #84]	; (30ca4 <open_socket+0x60>)
   30c4e:	4816      	ldr	r0, [pc, #88]	; (30ca8 <open_socket+0x64>)
   30c50:	2319      	movs	r3, #25
   30c52:	4a16      	ldr	r2, [pc, #88]	; (30cac <open_socket+0x68>)
   30c54:	f00f fcd5 	bl	40602 <printk>
   30c58:	2119      	movs	r1, #25
   30c5a:	4814      	ldr	r0, [pc, #80]	; (30cac <open_socket+0x68>)
   30c5c:	f00f fd94 	bl	40788 <assert_post_action>
	__ASSERT_NO_MSG(socket_ops->socket);
   30c60:	6823      	ldr	r3, [r4, #0]
   30c62:	681b      	ldr	r3, [r3, #0]
   30c64:	b94b      	cbnz	r3, 30c7a <open_socket+0x36>
   30c66:	4912      	ldr	r1, [pc, #72]	; (30cb0 <open_socket+0x6c>)
   30c68:	480f      	ldr	r0, [pc, #60]	; (30ca8 <open_socket+0x64>)
   30c6a:	231a      	movs	r3, #26
   30c6c:	4a0f      	ldr	r2, [pc, #60]	; (30cac <open_socket+0x68>)
   30c6e:	f00f fcc8 	bl	40602 <printk>
   30c72:	211a      	movs	r1, #26
   30c74:	480d      	ldr	r0, [pc, #52]	; (30cac <open_socket+0x68>)
   30c76:	f00f fd87 	bl	40788 <assert_post_action>
	return socket_ops->socket(family, type, proto);
   30c7a:	6823      	ldr	r3, [r4, #0]
   30c7c:	f240 2201 	movw	r2, #513	; 0x201
   30c80:	681b      	ldr	r3, [r3, #0]
   30c82:	2102      	movs	r1, #2
   30c84:	2066      	movs	r0, #102	; 0x66
   30c86:	4798      	blx	r3
	common_socket_fd = socket(AF_LTE, SOCK_DGRAM, NPROTO_AT);
   30c88:	4b0a      	ldr	r3, [pc, #40]	; (30cb4 <open_socket+0x70>)
   30c8a:	6018      	str	r0, [r3, #0]
	if (common_socket_fd == -1) {
   30c8c:	3001      	adds	r0, #1
   30c8e:	d104      	bne.n	30c9a <open_socket+0x56>
		return -errno;
   30c90:	f011 ffdf 	bl	42c52 <__errno>
   30c94:	6800      	ldr	r0, [r0, #0]
   30c96:	4240      	negs	r0, r0
}
   30c98:	bd10      	pop	{r4, pc}
	return 0;
   30c9a:	2000      	movs	r0, #0
   30c9c:	e7fc      	b.n	30c98 <open_socket+0x54>
   30c9e:	bf00      	nop
   30ca0:	2002237c 	.word	0x2002237c
   30ca4:	0004b740 	.word	0x0004b740
   30ca8:	0004764f 	.word	0x0004764f
   30cac:	0004b710 	.word	0x0004b710
   30cb0:	0004b74b 	.word	0x0004b74b
   30cb4:	20024d68 	.word	0x20024d68

00030cb8 <at_write>:
		}
	}
}

static inline int at_write(const char *const cmd, enum at_cmd_state *state)
{
   30cb8:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   30cbc:	4680      	mov	r8, r0
   30cbe:	460d      	mov	r5, r1
	int bytes_sent;
	int bytes_to_send = strlen(cmd);
   30cc0:	f7ec fa2a 	bl	1d118 <strlen>
	__ASSERT_NO_MSG(socket_ops);
   30cc4:	4c34      	ldr	r4, [pc, #208]	; (30d98 <at_write+0xe0>)
	struct return_state_object ret;

	LOG_DBG("Sending command %s", log_strdup(cmd));

	bytes_sent = send(common_socket_fd, cmd, bytes_to_send, 0);
   30cc6:	4b35      	ldr	r3, [pc, #212]	; (30d9c <at_write+0xe4>)
	int bytes_to_send = strlen(cmd);
   30cc8:	4606      	mov	r6, r0
	bytes_sent = send(common_socket_fd, cmd, bytes_to_send, 0);
   30cca:	681f      	ldr	r7, [r3, #0]
   30ccc:	6823      	ldr	r3, [r4, #0]
   30cce:	b94b      	cbnz	r3, 30ce4 <at_write+0x2c>
   30cd0:	4933      	ldr	r1, [pc, #204]	; (30da0 <at_write+0xe8>)
   30cd2:	4834      	ldr	r0, [pc, #208]	; (30da4 <at_write+0xec>)
   30cd4:	237e      	movs	r3, #126	; 0x7e
   30cd6:	4a34      	ldr	r2, [pc, #208]	; (30da8 <at_write+0xf0>)
   30cd8:	f00f fc93 	bl	40602 <printk>
   30cdc:	217e      	movs	r1, #126	; 0x7e
   30cde:	4832      	ldr	r0, [pc, #200]	; (30da8 <at_write+0xf0>)
   30ce0:	f00f fd52 	bl	40788 <assert_post_action>
	__ASSERT_NO_MSG(socket_ops->send);
   30ce4:	6823      	ldr	r3, [r4, #0]
   30ce6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   30ce8:	b94b      	cbnz	r3, 30cfe <at_write+0x46>
   30cea:	4930      	ldr	r1, [pc, #192]	; (30dac <at_write+0xf4>)
   30cec:	482d      	ldr	r0, [pc, #180]	; (30da4 <at_write+0xec>)
   30cee:	237f      	movs	r3, #127	; 0x7f
   30cf0:	4a2d      	ldr	r2, [pc, #180]	; (30da8 <at_write+0xf0>)
   30cf2:	f00f fc86 	bl	40602 <printk>
   30cf6:	217f      	movs	r1, #127	; 0x7f
   30cf8:	482b      	ldr	r0, [pc, #172]	; (30da8 <at_write+0xf0>)
   30cfa:	f00f fd45 	bl	40788 <assert_post_action>
	return socket_ops->send(sock, buf, len, flags);
   30cfe:	6823      	ldr	r3, [r4, #0]
   30d00:	4641      	mov	r1, r8
   30d02:	6adc      	ldr	r4, [r3, #44]	; 0x2c
   30d04:	4632      	mov	r2, r6
   30d06:	2300      	movs	r3, #0
   30d08:	4638      	mov	r0, r7
   30d0a:	47a0      	blx	r4

	if (bytes_sent == -1) {
   30d0c:	1c41      	adds	r1, r0, #1
   30d0e:	4604      	mov	r4, r0
   30d10:	d125      	bne.n	30d5e <at_write+0xa6>
		LOG_ERR("Failed to send AT command (err:%d)", errno);
   30d12:	4b27      	ldr	r3, [pc, #156]	; (30db0 <at_write+0xf8>)
   30d14:	681b      	ldr	r3, [r3, #0]
   30d16:	075a      	lsls	r2, r3, #29
   30d18:	d011      	beq.n	30d3e <at_write+0x86>
   30d1a:	2301      	movs	r3, #1
   30d1c:	f04f 0400 	mov.w	r4, #0
   30d20:	4a24      	ldr	r2, [pc, #144]	; (30db4 <at_write+0xfc>)
   30d22:	f363 0407 	bfi	r4, r3, #0, #8
   30d26:	4b24      	ldr	r3, [pc, #144]	; (30db8 <at_write+0x100>)
   30d28:	1a9b      	subs	r3, r3, r2
   30d2a:	08db      	lsrs	r3, r3, #3
   30d2c:	f363 148f 	bfi	r4, r3, #6, #10
   30d30:	f011 ff8f 	bl	42c52 <__errno>
   30d34:	4622      	mov	r2, r4
   30d36:	6801      	ldr	r1, [r0, #0]
   30d38:	4820      	ldr	r0, [pc, #128]	; (30dbc <at_write+0x104>)
   30d3a:	f00f fe8f 	bl	40a5c <log_1>
		ret.code  = -errno;
   30d3e:	f011 ff88 	bl	42c52 <__errno>
   30d42:	6803      	ldr	r3, [r0, #0]
   30d44:	425b      	negs	r3, r3
   30d46:	9300      	str	r3, [sp, #0]
		ret.state = AT_CMD_ERROR;
   30d48:	2301      	movs	r3, #1
   30d4a:	f88d 3004 	strb.w	r3, [sp, #4]
				"same as expected (%d)",
				bytes_sent, bytes_to_send);
		}
	}

	if (state) {
   30d4e:	b115      	cbz	r5, 30d56 <at_write+0x9e>
		*state = ret.state;
   30d50:	f89d 3004 	ldrb.w	r3, [sp, #4]
   30d54:	702b      	strb	r3, [r5, #0]
	}

	return ret.code;
}
   30d56:	9800      	ldr	r0, [sp, #0]
   30d58:	b002      	add	sp, #8
   30d5a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return z_impl_k_msgq_get(msgq, data, timeout);
   30d5e:	f04f 32ff 	mov.w	r2, #4294967295
   30d62:	4669      	mov	r1, sp
   30d64:	4816      	ldr	r0, [pc, #88]	; (30dc0 <at_write+0x108>)
   30d66:	f00a fde1 	bl	3b92c <z_impl_k_msgq_get>
		if (bytes_sent != bytes_to_send) {
   30d6a:	42a6      	cmp	r6, r4
   30d6c:	d0ef      	beq.n	30d4e <at_write+0x96>
			LOG_ERR("Bytes sent (%d) was not the "
   30d6e:	4b10      	ldr	r3, [pc, #64]	; (30db0 <at_write+0xf8>)
   30d70:	681b      	ldr	r3, [r3, #0]
   30d72:	075b      	lsls	r3, r3, #29
   30d74:	d0eb      	beq.n	30d4e <at_write+0x96>
   30d76:	2201      	movs	r2, #1
   30d78:	f04f 0300 	mov.w	r3, #0
   30d7c:	490d      	ldr	r1, [pc, #52]	; (30db4 <at_write+0xfc>)
   30d7e:	f362 0307 	bfi	r3, r2, #0, #8
   30d82:	4a0d      	ldr	r2, [pc, #52]	; (30db8 <at_write+0x100>)
   30d84:	480f      	ldr	r0, [pc, #60]	; (30dc4 <at_write+0x10c>)
   30d86:	1a52      	subs	r2, r2, r1
   30d88:	08d2      	lsrs	r2, r2, #3
   30d8a:	f362 138f 	bfi	r3, r2, #6, #10
   30d8e:	4621      	mov	r1, r4
   30d90:	4632      	mov	r2, r6
   30d92:	f00f fe77 	bl	40a84 <log_2>
   30d96:	e7da      	b.n	30d4e <at_write+0x96>
   30d98:	2002237c 	.word	0x2002237c
   30d9c:	20024d68 	.word	0x20024d68
   30da0:	0004b740 	.word	0x0004b740
   30da4:	0004764f 	.word	0x0004764f
   30da8:	0004b710 	.word	0x0004b710
   30dac:	0004b6ff 	.word	0x0004b6ff
   30db0:	20032ab4 	.word	0x20032ab4
   30db4:	00045f08 	.word	0x00045f08
   30db8:	00045f68 	.word	0x00045f68
   30dbc:	0004c5ff 	.word	0x0004c5ff
   30dc0:	20032c60 	.word	0x20032c60
   30dc4:	0004c622 	.word	0x0004c622

00030dc8 <at_cmd_driver_init>:

	k_sem_give(&cmd_pending);
}

static int at_cmd_driver_init(struct device *dev)
{
   30dc8:	b510      	push	{r4, lr}
	static bool initialized;

	if (initialized) {
   30dca:	4b18      	ldr	r3, [pc, #96]	; (30e2c <at_cmd_driver_init+0x64>)
{
   30dcc:	b086      	sub	sp, #24
	if (initialized) {
   30dce:	781a      	ldrb	r2, [r3, #0]
   30dd0:	bb52      	cbnz	r2, 30e28 <at_cmd_driver_init+0x60>
		return 0;
	}

	initialized = true;
   30dd2:	2201      	movs	r2, #1
   30dd4:	701a      	strb	r2, [r3, #0]

	int err;

	ARG_UNUSED(dev);

	err = open_socket();
   30dd6:	f7ff ff35 	bl	30c44 <open_socket>
	if (err) {
   30dda:	4604      	mov	r4, r0
   30ddc:	b1a8      	cbz	r0, 30e0a <at_cmd_driver_init+0x42>
		LOG_ERR("Failed to open AT socket (err:%d)", err);
   30dde:	4b14      	ldr	r3, [pc, #80]	; (30e30 <at_cmd_driver_init+0x68>)
   30de0:	681b      	ldr	r3, [r3, #0]
   30de2:	075b      	lsls	r3, r3, #29
   30de4:	d00e      	beq.n	30e04 <at_cmd_driver_init+0x3c>
   30de6:	2301      	movs	r3, #1
   30de8:	f04f 0200 	mov.w	r2, #0
   30dec:	4911      	ldr	r1, [pc, #68]	; (30e34 <at_cmd_driver_init+0x6c>)
   30dee:	f363 0207 	bfi	r2, r3, #0, #8
   30df2:	4b11      	ldr	r3, [pc, #68]	; (30e38 <at_cmd_driver_init+0x70>)
   30df4:	1a5b      	subs	r3, r3, r1
   30df6:	08db      	lsrs	r3, r3, #3
   30df8:	4601      	mov	r1, r0
   30dfa:	f363 128f 	bfi	r2, r3, #6, #10
   30dfe:	480f      	ldr	r0, [pc, #60]	; (30e3c <at_cmd_driver_init+0x74>)
   30e00:	f00f fe2c 	bl	40a5c <log_1>
			THREAD_PRIORITY, 0, K_NO_WAIT);

	LOG_DBG("Common AT socket processing thread created");

	return 0;
}
   30e04:	4620      	mov	r0, r4
   30e06:	b006      	add	sp, #24
   30e08:	bd10      	pop	{r4, pc}
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   30e0a:	230a      	movs	r3, #10
   30e0c:	e9cd 0004 	strd	r0, r0, [sp, #16]
   30e10:	e9cd 0302 	strd	r0, r3, [sp, #8]
   30e14:	e9cd 0000 	strd	r0, r0, [sp]
   30e18:	4b09      	ldr	r3, [pc, #36]	; (30e40 <at_cmd_driver_init+0x78>)
   30e1a:	f44f 6280 	mov.w	r2, #1024	; 0x400
   30e1e:	4909      	ldr	r1, [pc, #36]	; (30e44 <at_cmd_driver_init+0x7c>)
   30e20:	4809      	ldr	r0, [pc, #36]	; (30e48 <at_cmd_driver_init+0x80>)
   30e22:	f00c fcab 	bl	3d77c <z_impl_k_thread_create>
	return 0;
   30e26:	e7ed      	b.n	30e04 <at_cmd_driver_init+0x3c>
		return 0;
   30e28:	2400      	movs	r4, #0
   30e2a:	e7eb      	b.n	30e04 <at_cmd_driver_init+0x3c>
   30e2c:	2002a4e0 	.word	0x2002a4e0
   30e30:	20032ab4 	.word	0x20032ab4
   30e34:	00045f08 	.word	0x00045f08
   30e38:	00045f68 	.word	0x00045f68
   30e3c:	0004c5b4 	.word	0x0004c5b4
   30e40:	00030e4d 	.word	0x00030e4d
   30e44:	2002c940 	.word	0x2002c940
   30e48:	20024d7c 	.word	0x20024d7c

00030e4c <socket_thread_fn>:
{
   30e4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
					LOG_ERR("Response buffer not large "
   30e50:	4baa      	ldr	r3, [pc, #680]	; (310fc <socket_thread_fn+0x2b0>)
   30e52:	4cab      	ldr	r4, [pc, #684]	; (31100 <socket_thread_fn+0x2b4>)
{
   30e54:	b087      	sub	sp, #28
					LOG_ERR("Response buffer not large "
   30e56:	1ae4      	subs	r4, r4, r3
   30e58:	f3c4 04c9 	ubfx	r4, r4, #3, #10
		k_mem_slab_alloc(&rsp_work_items, (void **)&item, K_FOREVER);
   30e5c:	f04f 32ff 	mov.w	r2, #4294967295
   30e60:	a903      	add	r1, sp, #12
   30e62:	48a8      	ldr	r0, [pc, #672]	; (31104 <socket_thread_fn+0x2b8>)
   30e64:	f00a faec 	bl	3b440 <k_mem_slab_alloc>
		ret.code  = 0;
   30e68:	2300      	movs	r3, #0
		item->callback = NULL;
   30e6a:	9d03      	ldr	r5, [sp, #12]
		ret.code  = 0;
   30e6c:	9304      	str	r3, [sp, #16]
		item->callback = NULL;
   30e6e:	f8c5 3a98 	str.w	r3, [r5, #2712]	; 0xa98
		ret.state = AT_CMD_OK;
   30e72:	f88d 3014 	strb.w	r3, [sp, #20]
	__ASSERT_NO_MSG(socket_ops);
   30e76:	f8df a2e8 	ldr.w	sl, [pc, #744]	; 31160 <socket_thread_fn+0x314>
		bytes_read = recv(common_socket_fd, item->data,
   30e7a:	4ba3      	ldr	r3, [pc, #652]	; (31108 <socket_thread_fn+0x2bc>)
   30e7c:	350c      	adds	r5, #12
   30e7e:	f8d3 b000 	ldr.w	fp, [r3]
   30e82:	f8da 3000 	ldr.w	r3, [sl]
   30e86:	b94b      	cbnz	r3, 30e9c <socket_thread_fn+0x50>
   30e88:	49a0      	ldr	r1, [pc, #640]	; (3110c <socket_thread_fn+0x2c0>)
   30e8a:	48a1      	ldr	r0, [pc, #644]	; (31110 <socket_thread_fn+0x2c4>)
   30e8c:	2369      	movs	r3, #105	; 0x69
   30e8e:	4aa1      	ldr	r2, [pc, #644]	; (31114 <socket_thread_fn+0x2c8>)
   30e90:	f00f fbb7 	bl	40602 <printk>
   30e94:	2169      	movs	r1, #105	; 0x69
   30e96:	489f      	ldr	r0, [pc, #636]	; (31114 <socket_thread_fn+0x2c8>)
   30e98:	f00f fc76 	bl	40788 <assert_post_action>
	__ASSERT_NO_MSG(socket_ops->recv);
   30e9c:	f8da 3000 	ldr.w	r3, [sl]
   30ea0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   30ea2:	b94b      	cbnz	r3, 30eb8 <socket_thread_fn+0x6c>
   30ea4:	499c      	ldr	r1, [pc, #624]	; (31118 <socket_thread_fn+0x2cc>)
   30ea6:	489a      	ldr	r0, [pc, #616]	; (31110 <socket_thread_fn+0x2c4>)
   30ea8:	236a      	movs	r3, #106	; 0x6a
   30eaa:	4a9a      	ldr	r2, [pc, #616]	; (31114 <socket_thread_fn+0x2c8>)
   30eac:	f00f fba9 	bl	40602 <printk>
   30eb0:	216a      	movs	r1, #106	; 0x6a
   30eb2:	4898      	ldr	r0, [pc, #608]	; (31114 <socket_thread_fn+0x2c8>)
   30eb4:	f00f fc68 	bl	40788 <assert_post_action>
	return socket_ops->recv(sock, buf, max_len, flags);
   30eb8:	f8da 3000 	ldr.w	r3, [sl]
   30ebc:	4629      	mov	r1, r5
   30ebe:	f8d3 a024 	ldr.w	sl, [r3, #36]	; 0x24
   30ec2:	f640 228c 	movw	r2, #2700	; 0xa8c
   30ec6:	2300      	movs	r3, #0
   30ec8:	4658      	mov	r0, fp
   30eca:	47d0      	blx	sl
		if (bytes_read < 0) {
   30ecc:	1e01      	subs	r1, r0, #0
   30ece:	da69      	bge.n	30fa4 <socket_thread_fn+0x158>
			LOG_ERR("AT socket recv failed with err %d",
   30ed0:	4d92      	ldr	r5, [pc, #584]	; (3111c <socket_thread_fn+0x2d0>)
   30ed2:	682b      	ldr	r3, [r5, #0]
   30ed4:	46aa      	mov	sl, r5
   30ed6:	f013 0f07 	tst.w	r3, #7
   30eda:	d00b      	beq.n	30ef4 <socket_thread_fn+0xa8>
   30edc:	f026 033f 	bic.w	r3, r6, #63	; 0x3f
   30ee0:	f043 0301 	orr.w	r3, r3, #1
   30ee4:	f363 0607 	bfi	r6, r3, #0, #8
   30ee8:	f364 168f 	bfi	r6, r4, #6, #10
   30eec:	4632      	mov	r2, r6
   30eee:	488c      	ldr	r0, [pc, #560]	; (31120 <socket_thread_fn+0x2d4>)
   30ef0:	f00f fdb4 	bl	40a5c <log_1>
			if ((close(common_socket_fd) == 0) &&
   30ef4:	4b84      	ldr	r3, [pc, #528]	; (31108 <socket_thread_fn+0x2bc>)
   30ef6:	6818      	ldr	r0, [r3, #0]
   30ef8:	f7ff fe68 	bl	30bcc <close>
   30efc:	2800      	cmp	r0, #0
   30efe:	d138      	bne.n	30f72 <socket_thread_fn+0x126>
			    (open_socket() == 0)) {
   30f00:	f7ff fea0 	bl	30c44 <open_socket>
			if ((close(common_socket_fd) == 0) &&
   30f04:	2800      	cmp	r0, #0
   30f06:	d134      	bne.n	30f72 <socket_thread_fn+0x126>
				LOG_INF("AT socket recovered");
   30f08:	682b      	ldr	r3, [r5, #0]
   30f0a:	f003 0307 	and.w	r3, r3, #7
   30f0e:	2b02      	cmp	r3, #2
   30f10:	d90b      	bls.n	30f2a <socket_thread_fn+0xde>
   30f12:	f027 033f 	bic.w	r3, r7, #63	; 0x3f
   30f16:	f043 0303 	orr.w	r3, r3, #3
   30f1a:	f363 0707 	bfi	r7, r3, #0, #8
   30f1e:	f364 178f 	bfi	r7, r4, #6, #10
   30f22:	4639      	mov	r1, r7
   30f24:	487f      	ldr	r0, [pc, #508]	; (31124 <socket_thread_fn+0x2d8>)
   30f26:	f00f fd8c 	bl	40a42 <log_0>
				ret.state = AT_CMD_ERROR;
   30f2a:	2301      	movs	r3, #1
   30f2c:	f88d 3014 	strb.w	r3, [sp, #20]
				ret.code  = -errno;
   30f30:	f011 fe8f 	bl	42c52 <__errno>
   30f34:	6803      	ldr	r3, [r0, #0]
   30f36:	425b      	negs	r3, r3
			ret.code  = -ENOBUFS;
   30f38:	9304      	str	r3, [sp, #16]
		if (item->callback == NULL) {
   30f3a:	9903      	ldr	r1, [sp, #12]
   30f3c:	f8d1 3a98 	ldr.w	r3, [r1, #2712]	; 0xa98
   30f40:	2b00      	cmp	r3, #0
   30f42:	f040 80b2 	bne.w	310aa <socket_thread_fn+0x25e>
			k_mem_slab_free(&rsp_work_items, (void **)&item);
   30f46:	a903      	add	r1, sp, #12
   30f48:	486e      	ldr	r0, [pc, #440]	; (31104 <socket_thread_fn+0x2b8>)
   30f4a:	f00a fadd 	bl	3b508 <k_mem_slab_free>
	return z_impl_k_sem_count_get(sem);
   30f4e:	4b76      	ldr	r3, [pc, #472]	; (31128 <socket_thread_fn+0x2dc>)
		if ((k_sem_count_get(&cmd_pending) == 0) &&
   30f50:	689b      	ldr	r3, [r3, #8]
   30f52:	2b00      	cmp	r3, #0
   30f54:	d182      	bne.n	30e5c <socket_thread_fn+0x10>
   30f56:	f89d 2014 	ldrb.w	r2, [sp, #20]
   30f5a:	2a04      	cmp	r2, #4
   30f5c:	f43f af7e 	beq.w	30e5c <socket_thread_fn+0x10>
			current_cmd_handler = NULL;
   30f60:	4a72      	ldr	r2, [pc, #456]	; (3112c <socket_thread_fn+0x2e0>)
   30f62:	6013      	str	r3, [r2, #0]
	return z_impl_k_msgq_put(msgq, data, timeout);
   30f64:	f04f 32ff 	mov.w	r2, #4294967295
   30f68:	a904      	add	r1, sp, #16
   30f6a:	4871      	ldr	r0, [pc, #452]	; (31130 <socket_thread_fn+0x2e4>)
   30f6c:	f00a fc3e 	bl	3b7ec <z_impl_k_msgq_put>
   30f70:	e774      	b.n	30e5c <socket_thread_fn+0x10>
			LOG_ERR("Unrecoverable reception error (err: %d), "
   30f72:	f8da 3000 	ldr.w	r3, [sl]
   30f76:	0758      	lsls	r0, r3, #29
   30f78:	d00d      	beq.n	30f96 <socket_thread_fn+0x14a>
   30f7a:	2301      	movs	r3, #1
   30f7c:	f04f 0500 	mov.w	r5, #0
   30f80:	f363 0507 	bfi	r5, r3, #0, #8
   30f84:	f011 fe65 	bl	42c52 <__errno>
   30f88:	f364 158f 	bfi	r5, r4, #6, #10
   30f8c:	6801      	ldr	r1, [r0, #0]
   30f8e:	462a      	mov	r2, r5
   30f90:	4868      	ldr	r0, [pc, #416]	; (31134 <socket_thread_fn+0x2e8>)
   30f92:	f00f fd63 	bl	40a5c <log_1>
			close(common_socket_fd);
   30f96:	4b5c      	ldr	r3, [pc, #368]	; (31108 <socket_thread_fn+0x2bc>)
   30f98:	6818      	ldr	r0, [r3, #0]
   30f9a:	f7ff fe17 	bl	30bcc <close>
}
   30f9e:	b007      	add	sp, #28
   30fa0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		} else if (bytes_read == sizeof(item->data) ||
   30fa4:	f640 238c 	movw	r3, #2700	; 0xa8c
   30fa8:	4299      	cmp	r1, r3
   30faa:	d004      	beq.n	30fb6 <socket_thread_fn+0x16a>
			   item->data[bytes_read - 1] != '\0') {
   30fac:	f8dd a00c 	ldr.w	sl, [sp, #12]
   30fb0:	4451      	add	r1, sl
		} else if (bytes_read == sizeof(item->data) ||
   30fb2:	7acb      	ldrb	r3, [r1, #11]
   30fb4:	b193      	cbz	r3, 30fdc <socket_thread_fn+0x190>
			LOG_ERR("AT message to large for reception buffer or "
   30fb6:	4b59      	ldr	r3, [pc, #356]	; (3111c <socket_thread_fn+0x2d0>)
   30fb8:	681b      	ldr	r3, [r3, #0]
   30fba:	0759      	lsls	r1, r3, #29
   30fbc:	d00b      	beq.n	30fd6 <socket_thread_fn+0x18a>
   30fbe:	f028 033f 	bic.w	r3, r8, #63	; 0x3f
   30fc2:	f043 0301 	orr.w	r3, r3, #1
   30fc6:	f363 0807 	bfi	r8, r3, #0, #8
   30fca:	f364 188f 	bfi	r8, r4, #6, #10
   30fce:	4641      	mov	r1, r8
   30fd0:	4859      	ldr	r0, [pc, #356]	; (31138 <socket_thread_fn+0x2ec>)
   30fd2:	f00f fd36 	bl	40a42 <log_0>
			ret.code  = -ENOBUFS;
   30fd6:	f06f 0368 	mvn.w	r3, #104	; 0x68
   30fda:	e7ad      	b.n	30f38 <socket_thread_fn+0xec>
	ret->state = AT_CMD_NOTIFICATION;
   30fdc:	2204      	movs	r2, #4
		payload_len = get_return_code(item->data, &ret);
   30fde:	f10a 050c 	add.w	r5, sl, #12
		tmpstr = strstr(buf, AT_CMD_OK_STR);
   30fe2:	4956      	ldr	r1, [pc, #344]	; (3113c <socket_thread_fn+0x2f0>)
   30fe4:	4628      	mov	r0, r5
   30fe6:	9301      	str	r3, [sp, #4]
	ret->state = AT_CMD_NOTIFICATION;
   30fe8:	f88d 2014 	strb.w	r2, [sp, #20]
		tmpstr = strstr(buf, AT_CMD_OK_STR);
   30fec:	f014 f8f1 	bl	451d2 <strstr>
		if (tmpstr) {
   30ff0:	4683      	mov	fp, r0
   30ff2:	b120      	cbz	r0, 30ffe <socket_thread_fn+0x1b2>
			ret->state = AT_CMD_OK;
   30ff4:	9b01      	ldr	r3, [sp, #4]
   30ff6:	f88d 3014 	strb.w	r3, [sp, #20]
			ret->code  = -ENOEXEC;
   30ffa:	9304      	str	r3, [sp, #16]
			break;
   30ffc:	e00d      	b.n	3101a <socket_thread_fn+0x1ce>
		tmpstr = strstr(buf, AT_CMD_CMS_STR);
   30ffe:	4950      	ldr	r1, [pc, #320]	; (31140 <socket_thread_fn+0x2f4>)
   31000:	4628      	mov	r0, r5
   31002:	f014 f8e6 	bl	451d2 <strstr>
		if (tmpstr) {
   31006:	4683      	mov	fp, r0
   31008:	b330      	cbz	r0, 31058 <socket_thread_fn+0x20c>
			ret->state = AT_CMD_ERROR_CMS;
   3100a:	2302      	movs	r3, #2
			ret->code = atoi(&buf[ARRAY_SIZE(AT_CMD_CMS_STR) - 1]);
   3100c:	f10a 0017 	add.w	r0, sl, #23
			ret->state = AT_CMD_ERROR_CME;
   31010:	f88d 3014 	strb.w	r3, [sp, #20]
			ret->code = atoi(&buf[ARRAY_SIZE(AT_CMD_CMS_STR) - 1]);
   31014:	f013 fefc 	bl	44e10 <atoi>
   31018:	9004      	str	r0, [sp, #16]
		buf[new_len++] = '\0';
   3101a:	2300      	movs	r3, #0
		new_len = tmpstr - buf;
   3101c:	ebab 0205 	sub.w	r2, fp, r5
		buf[new_len++] = '\0';
   31020:	3201      	adds	r2, #1
   31022:	f88b 3000 	strb.w	r3, [fp]
		if (ret.state != AT_CMD_NOTIFICATION) {
   31026:	f89d 3014 	ldrb.w	r3, [sp, #20]
   3102a:	2b04      	cmp	r3, #4
   3102c:	d053      	beq.n	310d6 <socket_thread_fn+0x28a>
			if ((response_buf_len > 0) &&
   3102e:	f8df a134 	ldr.w	sl, [pc, #308]	; 31164 <socket_thread_fn+0x318>
   31032:	f8da 3000 	ldr.w	r3, [sl]
   31036:	2b00      	cmp	r3, #0
   31038:	d056      	beq.n	310e8 <socket_thread_fn+0x29c>
			    (response_buf != NULL)) {
   3103a:	4d42      	ldr	r5, [pc, #264]	; (31144 <socket_thread_fn+0x2f8>)
   3103c:	6828      	ldr	r0, [r5, #0]
			if ((response_buf_len > 0) &&
   3103e:	2800      	cmp	r0, #0
   31040:	d052      	beq.n	310e8 <socket_thread_fn+0x29c>
				if (response_buf_len > payload_len) {
   31042:	4293      	cmp	r3, r2
   31044:	d91d      	bls.n	31082 <socket_thread_fn+0x236>
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   31046:	9903      	ldr	r1, [sp, #12]
   31048:	310c      	adds	r1, #12
   3104a:	f013 ff01 	bl	44e50 <memcpy>
				response_buf_len = 0;
   3104e:	2300      	movs	r3, #0
   31050:	f8ca 3000 	str.w	r3, [sl]
				response_buf     = NULL;
   31054:	602b      	str	r3, [r5, #0]
				goto next;
   31056:	e770      	b.n	30f3a <socket_thread_fn+0xee>
		tmpstr = strstr(buf, AT_CMD_CME_STR);
   31058:	493b      	ldr	r1, [pc, #236]	; (31148 <socket_thread_fn+0x2fc>)
   3105a:	4628      	mov	r0, r5
   3105c:	f014 f8b9 	bl	451d2 <strstr>
		if (tmpstr) {
   31060:	4683      	mov	fp, r0
   31062:	b108      	cbz	r0, 31068 <socket_thread_fn+0x21c>
			ret->state = AT_CMD_ERROR_CME;
   31064:	2303      	movs	r3, #3
   31066:	e7d1      	b.n	3100c <socket_thread_fn+0x1c0>
		tmpstr = strstr(buf, AT_CMD_ERROR_STR);
   31068:	4938      	ldr	r1, [pc, #224]	; (3114c <socket_thread_fn+0x300>)
   3106a:	4628      	mov	r0, r5
   3106c:	f014 f8b1 	bl	451d2 <strstr>
		if (tmpstr) {
   31070:	4683      	mov	fp, r0
   31072:	2800      	cmp	r0, #0
   31074:	d03d      	beq.n	310f2 <socket_thread_fn+0x2a6>
			ret->state = AT_CMD_ERROR;
   31076:	2301      	movs	r3, #1
   31078:	f88d 3014 	strb.w	r3, [sp, #20]
			ret->code  = -ENOEXEC;
   3107c:	f06f 0307 	mvn.w	r3, #7
   31080:	e7bb      	b.n	30ffa <socket_thread_fn+0x1ae>
					LOG_ERR("Response buffer not large "
   31082:	4b26      	ldr	r3, [pc, #152]	; (3111c <socket_thread_fn+0x2d0>)
   31084:	681b      	ldr	r3, [r3, #0]
   31086:	075a      	lsls	r2, r3, #29
   31088:	d00b      	beq.n	310a2 <socket_thread_fn+0x256>
   3108a:	f029 033f 	bic.w	r3, r9, #63	; 0x3f
   3108e:	f043 0301 	orr.w	r3, r3, #1
   31092:	f363 0907 	bfi	r9, r3, #0, #8
   31096:	f364 198f 	bfi	r9, r4, #6, #10
   3109a:	4649      	mov	r1, r9
   3109c:	482c      	ldr	r0, [pc, #176]	; (31150 <socket_thread_fn+0x304>)
   3109e:	f00f fcd0 	bl	40a42 <log_0>
					ret.code  = -EMSGSIZE;
   310a2:	f06f 0379 	mvn.w	r3, #121	; 0x79
   310a6:	9304      	str	r3, [sp, #16]
   310a8:	e7d1      	b.n	3104e <socket_thread_fn+0x202>
	*work = (struct k_work)Z_WORK_INITIALIZER(handler);
   310aa:	4b2a      	ldr	r3, [pc, #168]	; (31154 <socket_thread_fn+0x308>)
   310ac:	2200      	movs	r2, #0
   310ae:	604b      	str	r3, [r1, #4]
   310b0:	460b      	mov	r3, r1
   310b2:	600a      	str	r2, [r1, #0]
   310b4:	f843 2f08 	str.w	r2, [r3, #8]!
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   310b8:	e8d3 2fef 	ldaex	r2, [r3]
   310bc:	f042 0001 	orr.w	r0, r2, #1
   310c0:	e8c3 0fe5 	stlex	r5, r0, [r3]
   310c4:	2d00      	cmp	r5, #0
   310c6:	d1f7      	bne.n	310b8 <socket_thread_fn+0x26c>
	if (!atomic_test_and_set_bit(work->flags, K_WORK_STATE_PENDING)) {
   310c8:	07d3      	lsls	r3, r2, #31
   310ca:	f53f af40 	bmi.w	30f4e <socket_thread_fn+0x102>
		k_queue_append(&work_q->queue, work);
   310ce:	4822      	ldr	r0, [pc, #136]	; (31158 <socket_thread_fn+0x30c>)
   310d0:	f013 fd1b 	bl	44b0a <k_queue_append>
   310d4:	e73b      	b.n	30f4e <socket_thread_fn+0x102>
		if (payload_len == 0) {
   310d6:	2a00      	cmp	r2, #0
   310d8:	f43f af2f 	beq.w	30f3a <socket_thread_fn+0xee>
			item->callback = notification_handler;
   310dc:	4b1f      	ldr	r3, [pc, #124]	; (3115c <socket_thread_fn+0x310>)
			item->callback = current_cmd_handler;
   310de:	681a      	ldr	r2, [r3, #0]
   310e0:	9b03      	ldr	r3, [sp, #12]
   310e2:	f8c3 2a98 	str.w	r2, [r3, #2712]	; 0xa98
   310e6:	e728      	b.n	30f3a <socket_thread_fn+0xee>
		if (payload_len == 0) {
   310e8:	2a00      	cmp	r2, #0
   310ea:	f43f af26 	beq.w	30f3a <socket_thread_fn+0xee>
			item->callback = current_cmd_handler;
   310ee:	4b0f      	ldr	r3, [pc, #60]	; (3112c <socket_thread_fn+0x2e0>)
   310f0:	e7f5      	b.n	310de <socket_thread_fn+0x292>
		new_len = strlen(buf) + 1;
   310f2:	4628      	mov	r0, r5
   310f4:	f7ec f810 	bl	1d118 <strlen>
   310f8:	1c42      	adds	r2, r0, #1
   310fa:	e794      	b.n	31026 <socket_thread_fn+0x1da>
   310fc:	00045f08 	.word	0x00045f08
   31100:	00045f68 	.word	0x00045f68
   31104:	20032b60 	.word	0x20032b60
   31108:	20024d68 	.word	0x20024d68
   3110c:	0004b740 	.word	0x0004b740
   31110:	0004764f 	.word	0x0004764f
   31114:	0004b710 	.word	0x0004b710
   31118:	0004c654 	.word	0x0004c654
   3111c:	20032ab4 	.word	0x20032ab4
   31120:	0004c665 	.word	0x0004c665
   31124:	0004c687 	.word	0x0004c687
   31128:	20032bc8 	.word	0x20032bc8
   3112c:	20024d6c 	.word	0x20024d6c
   31130:	20032c60 	.word	0x20032c60
   31134:	0004c69b 	.word	0x0004c69b
   31138:	0004c6d2 	.word	0x0004c6d2
   3113c:	00047c3c 	.word	0x00047c3c
   31140:	0004c71c 	.word	0x0004c71c
   31144:	20024d74 	.word	0x20024d74
   31148:	0004c728 	.word	0x0004c728
   3114c:	0004c734 	.word	0x0004c734
   31150:	0004c73a 	.word	0x0004c73a
   31154:	00030c25 	.word	0x00030c25
   31158:	20029754 	.word	0x20029754
   3115c:	20024d70 	.word	0x20024d70
   31160:	2002237c 	.word	0x2002237c
   31164:	20024d78 	.word	0x20024d78

00031168 <at_cmd_write>:
{
   31168:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   3116c:	4605      	mov	r5, r0
   3116e:	4688      	mov	r8, r1
   31170:	4617      	mov	r7, r2
   31172:	461e      	mov	r6, r3
	return z_impl_k_sem_take(sem, timeout);
   31174:	4c0a      	ldr	r4, [pc, #40]	; (311a0 <at_cmd_write+0x38>)
   31176:	f04f 31ff 	mov.w	r1, #4294967295
   3117a:	4620      	mov	r0, r4
   3117c:	f00c f9cc 	bl	3d518 <z_impl_k_sem_take>
	response_buf     = buf;
   31180:	4b08      	ldr	r3, [pc, #32]	; (311a4 <at_cmd_write+0x3c>)
	int return_code = at_write(cmd, state);
   31182:	4631      	mov	r1, r6
	response_buf     = buf;
   31184:	f8c3 8000 	str.w	r8, [r3]
	response_buf_len = buf_len;
   31188:	4b07      	ldr	r3, [pc, #28]	; (311a8 <at_cmd_write+0x40>)
	int return_code = at_write(cmd, state);
   3118a:	4628      	mov	r0, r5
	response_buf_len = buf_len;
   3118c:	601f      	str	r7, [r3, #0]
	int return_code = at_write(cmd, state);
   3118e:	f7ff fd93 	bl	30cb8 <at_write>
   31192:	4605      	mov	r5, r0
	z_impl_k_sem_give(sem);
   31194:	4620      	mov	r0, r4
   31196:	f00c f975 	bl	3d484 <z_impl_k_sem_give>
}
   3119a:	4628      	mov	r0, r5
   3119c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   311a0:	20032bc8 	.word	0x20032bc8
   311a4:	20024d74 	.word	0x20024d74
   311a8:	20024d78 	.word	0x20024d78

000311ac <at_cmd_set_notification_handler>:
{
   311ac:	b538      	push	{r3, r4, r5, lr}
	if (notification_handler != NULL && handler != notification_handler) {
   311ae:	4c12      	ldr	r4, [pc, #72]	; (311f8 <at_cmd_set_notification_handler+0x4c>)
{
   311b0:	4605      	mov	r5, r0
	if (notification_handler != NULL && handler != notification_handler) {
   311b2:	6821      	ldr	r1, [r4, #0]
   311b4:	b1a1      	cbz	r1, 311e0 <at_cmd_set_notification_handler+0x34>
   311b6:	4281      	cmp	r1, r0
   311b8:	d012      	beq.n	311e0 <at_cmd_set_notification_handler+0x34>
		LOG_WRN("Forgetting prior notification handler %p",
   311ba:	4b10      	ldr	r3, [pc, #64]	; (311fc <at_cmd_set_notification_handler+0x50>)
   311bc:	681b      	ldr	r3, [r3, #0]
   311be:	f013 0f06 	tst.w	r3, #6
   311c2:	d00d      	beq.n	311e0 <at_cmd_set_notification_handler+0x34>
   311c4:	2302      	movs	r3, #2
   311c6:	f04f 0200 	mov.w	r2, #0
   311ca:	480d      	ldr	r0, [pc, #52]	; (31200 <at_cmd_set_notification_handler+0x54>)
   311cc:	f363 0207 	bfi	r2, r3, #0, #8
   311d0:	4b0c      	ldr	r3, [pc, #48]	; (31204 <at_cmd_set_notification_handler+0x58>)
   311d2:	1a1b      	subs	r3, r3, r0
   311d4:	08db      	lsrs	r3, r3, #3
   311d6:	f363 128f 	bfi	r2, r3, #6, #10
   311da:	480b      	ldr	r0, [pc, #44]	; (31208 <at_cmd_set_notification_handler+0x5c>)
   311dc:	f00f fc3e 	bl	40a5c <log_1>
	return z_impl_k_sem_take(sem, timeout);
   311e0:	f04f 31ff 	mov.w	r1, #4294967295
   311e4:	4809      	ldr	r0, [pc, #36]	; (3120c <at_cmd_set_notification_handler+0x60>)
   311e6:	f00c f997 	bl	3d518 <z_impl_k_sem_take>
	notification_handler = handler;
   311ea:	6025      	str	r5, [r4, #0]
	z_impl_k_sem_give(sem);
   311ec:	4807      	ldr	r0, [pc, #28]	; (3120c <at_cmd_set_notification_handler+0x60>)
}
   311ee:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   311f2:	f00c b947 	b.w	3d484 <z_impl_k_sem_give>
   311f6:	bf00      	nop
   311f8:	20024d70 	.word	0x20024d70
   311fc:	20032ab4 	.word	0x20032ab4
   31200:	00045f08 	.word	0x00045f08
   31204:	00045f68 	.word	0x00045f68
   31208:	0004c5d6 	.word	0x0004c5d6
   3120c:	20032bc8 	.word	0x20032bc8

00031210 <find_node>:
static struct notif_handler *find_node(struct notif_handler **prev_out,
	void *ctx, at_notif_handler_t handler)
{
	struct notif_handler *prev = NULL, *curr, *tmp;

	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&handler_list, curr, tmp, node) {
   31210:	4b0b      	ldr	r3, [pc, #44]	; (31240 <find_node+0x30>)
{
   31212:	b570      	push	{r4, r5, r6, lr}
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&handler_list, curr, tmp, node) {
   31214:	681b      	ldr	r3, [r3, #0]
   31216:	b153      	cbz	r3, 3122e <find_node+0x1e>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   31218:	2500      	movs	r5, #0
   3121a:	461c      	mov	r4, r3
   3121c:	681b      	ldr	r3, [r3, #0]
		if (curr->ctx == ctx && curr->handler == handler) {
   3121e:	6866      	ldr	r6, [r4, #4]
   31220:	428e      	cmp	r6, r1
   31222:	d106      	bne.n	31232 <find_node+0x22>
   31224:	68a6      	ldr	r6, [r4, #8]
   31226:	4296      	cmp	r6, r2
   31228:	d103      	bne.n	31232 <find_node+0x22>
			*prev_out = prev;
			return curr;
   3122a:	4623      	mov	r3, r4
			*prev_out = prev;
   3122c:	6005      	str	r5, [r0, #0]
		}
		prev = curr;
	}
	return NULL;
}
   3122e:	4618      	mov	r0, r3
   31230:	bd70      	pop	{r4, r5, r6, pc}
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&handler_list, curr, tmp, node) {
   31232:	2b00      	cmp	r3, #0
   31234:	d0fb      	beq.n	3122e <find_node+0x1e>
   31236:	4625      	mov	r5, r4
   31238:	461c      	mov	r4, r3
   3123a:	681b      	ldr	r3, [r3, #0]
   3123c:	e7ef      	b.n	3121e <find_node+0xe>
   3123e:	bf00      	nop
   31240:	20024e2c 	.word	0x20024e2c

00031244 <module_init>:
{
	ARG_UNUSED(dev);

	static bool initialized;

	if (initialized) {
   31244:	4a10      	ldr	r2, [pc, #64]	; (31288 <module_init+0x44>)
{
   31246:	b508      	push	{r3, lr}
	if (initialized) {
   31248:	7813      	ldrb	r3, [r2, #0]
   3124a:	b1a3      	cbz	r3, 31276 <module_init+0x32>
		LOG_WRN("Already initialized. Nothing to do");
   3124c:	4b0f      	ldr	r3, [pc, #60]	; (3128c <module_init+0x48>)
   3124e:	681b      	ldr	r3, [r3, #0]
   31250:	f013 0f06 	tst.w	r3, #6
   31254:	d00d      	beq.n	31272 <module_init+0x2e>
   31256:	2302      	movs	r3, #2
   31258:	f04f 0100 	mov.w	r1, #0
   3125c:	4a0c      	ldr	r2, [pc, #48]	; (31290 <module_init+0x4c>)
   3125e:	f363 0107 	bfi	r1, r3, #0, #8
   31262:	4b0c      	ldr	r3, [pc, #48]	; (31294 <module_init+0x50>)
   31264:	480c      	ldr	r0, [pc, #48]	; (31298 <module_init+0x54>)
   31266:	1a9b      	subs	r3, r3, r2
   31268:	08db      	lsrs	r3, r3, #3
   3126a:	f363 118f 	bfi	r1, r3, #6, #10
   3126e:	f00f fbe8 	bl	40a42 <log_0>

	LOG_DBG("Initialization");
	sys_slist_init(&handler_list);
	at_cmd_set_notification_handler(notif_dispatch);
	return 0;
}
   31272:	2000      	movs	r0, #0
   31274:	bd08      	pop	{r3, pc}
	initialized = true;
   31276:	2101      	movs	r1, #1
   31278:	7011      	strb	r1, [r2, #0]
	list->head = NULL;
   3127a:	4a08      	ldr	r2, [pc, #32]	; (3129c <module_init+0x58>)
	at_cmd_set_notification_handler(notif_dispatch);
   3127c:	4808      	ldr	r0, [pc, #32]	; (312a0 <module_init+0x5c>)
	list->tail = NULL;
   3127e:	e9c2 3300 	strd	r3, r3, [r2]
   31282:	f7ff ff93 	bl	311ac <at_cmd_set_notification_handler>
	return 0;
   31286:	e7f4      	b.n	31272 <module_init+0x2e>
   31288:	2002a4e1 	.word	0x2002a4e1
   3128c:	20032ab8 	.word	0x20032ab8
   31290:	00045f08 	.word	0x00045f08
   31294:	00045f70 	.word	0x00045f70
   31298:	0004c7b9 	.word	0x0004c7b9
   3129c:	20024e2c 	.word	0x20024e2c
   312a0:	000312b1 	.word	0x000312b1

000312a4 <k_mutex_unlock.constprop.7>:
	return z_impl_k_mutex_unlock(mutex);
   312a4:	4801      	ldr	r0, [pc, #4]	; (312ac <k_mutex_unlock.constprop.7+0x8>)
   312a6:	f00a bd1d 	b.w	3bce4 <z_impl_k_mutex_unlock>
   312aa:	bf00      	nop
   312ac:	20032c20 	.word	0x20032c20

000312b0 <notif_dispatch>:
{
   312b0:	b538      	push	{r3, r4, r5, lr}
   312b2:	4605      	mov	r5, r0
	return z_impl_k_mutex_lock(mutex, timeout);
   312b4:	f04f 31ff 	mov.w	r1, #4294967295
   312b8:	4809      	ldr	r0, [pc, #36]	; (312e0 <notif_dispatch+0x30>)
   312ba:	f00a fc35 	bl	3bb28 <z_impl_k_mutex_lock>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&handler_list, curr, tmp, node) {
   312be:	4b09      	ldr	r3, [pc, #36]	; (312e4 <notif_dispatch+0x34>)
   312c0:	681b      	ldr	r3, [r3, #0]
   312c2:	b91b      	cbnz	r3, 312cc <notif_dispatch+0x1c>
}
   312c4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	k_mutex_unlock(&list_mtx);
   312c8:	f7ff bfec 	b.w	312a4 <k_mutex_unlock.constprop.7>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   312cc:	681c      	ldr	r4, [r3, #0]
		curr->handler(curr->ctx, response);
   312ce:	689a      	ldr	r2, [r3, #8]
   312d0:	4629      	mov	r1, r5
   312d2:	6858      	ldr	r0, [r3, #4]
   312d4:	4790      	blx	r2
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&handler_list, curr, tmp, node) {
   312d6:	2c00      	cmp	r4, #0
   312d8:	d0f4      	beq.n	312c4 <notif_dispatch+0x14>
   312da:	4623      	mov	r3, r4
   312dc:	6824      	ldr	r4, [r4, #0]
   312de:	e7f6      	b.n	312ce <notif_dispatch+0x1e>
   312e0:	20032c20 	.word	0x20032c20
   312e4:	20024e2c 	.word	0x20024e2c

000312e8 <at_notif_register_handler>:
{
	return module_init(NULL);
}

int at_notif_register_handler(void *context, at_notif_handler_t handler)
{
   312e8:	b573      	push	{r0, r1, r4, r5, r6, lr}
   312ea:	4606      	mov	r6, r0
	if (handler == NULL) {
   312ec:	460d      	mov	r5, r1
   312ee:	b9b1      	cbnz	r1, 3131e <at_notif_register_handler+0x36>
		LOG_ERR("Invalid handler (context=0x%08X, handler=0x%08X)",
   312f0:	4b20      	ldr	r3, [pc, #128]	; (31374 <at_notif_register_handler+0x8c>)
   312f2:	681b      	ldr	r3, [r3, #0]
   312f4:	075b      	lsls	r3, r3, #29
   312f6:	d00f      	beq.n	31318 <at_notif_register_handler+0x30>
   312f8:	2201      	movs	r2, #1
   312fa:	f04f 0300 	mov.w	r3, #0
   312fe:	491e      	ldr	r1, [pc, #120]	; (31378 <at_notif_register_handler+0x90>)
   31300:	f362 0307 	bfi	r3, r2, #0, #8
   31304:	4a1d      	ldr	r2, [pc, #116]	; (3137c <at_notif_register_handler+0x94>)
   31306:	1a52      	subs	r2, r2, r1
   31308:	08d2      	lsrs	r2, r2, #3
   3130a:	f362 138f 	bfi	r3, r2, #6, #10
   3130e:	4601      	mov	r1, r0
   31310:	462a      	mov	r2, r5
   31312:	481b      	ldr	r0, [pc, #108]	; (31380 <at_notif_register_handler+0x98>)
   31314:	f00f fbb6 	bl	40a84 <log_2>
			(u32_t)context, (u32_t)handler);
		return -EINVAL;
   31318:	f06f 0015 	mvn.w	r0, #21
   3131c:	e00e      	b.n	3133c <at_notif_register_handler+0x54>
   3131e:	f04f 31ff 	mov.w	r1, #4294967295
   31322:	4818      	ldr	r0, [pc, #96]	; (31384 <at_notif_register_handler+0x9c>)
   31324:	f00a fc00 	bl	3bb28 <z_impl_k_mutex_lock>
	if (find_node(&to_ins, ctx, handler) != NULL) {
   31328:	462a      	mov	r2, r5
   3132a:	4631      	mov	r1, r6
   3132c:	a801      	add	r0, sp, #4
   3132e:	f7ff ff6f 	bl	31210 <find_node>
   31332:	4604      	mov	r4, r0
   31334:	b120      	cbz	r0, 31340 <at_notif_register_handler+0x58>
		k_mutex_unlock(&list_mtx);
   31336:	f7ff ffb5 	bl	312a4 <k_mutex_unlock.constprop.7>
		return 0;
   3133a:	2000      	movs	r0, #0
	}
	return append_notif_handler(context, handler);
}
   3133c:	b002      	add	sp, #8
   3133e:	bd70      	pop	{r4, r5, r6, pc}
	to_ins = (struct notif_handler *)k_malloc(sizeof(struct notif_handler));
   31340:	200c      	movs	r0, #12
   31342:	f00a fa37 	bl	3b7b4 <k_malloc>
   31346:	9001      	str	r0, [sp, #4]
	if (to_ins == NULL) {
   31348:	b920      	cbnz	r0, 31354 <at_notif_register_handler+0x6c>
		k_mutex_unlock(&list_mtx);
   3134a:	f7ff ffab 	bl	312a4 <k_mutex_unlock.constprop.7>
		return -ENOBUFS;
   3134e:	f06f 0068 	mvn.w	r0, #104	; 0x68
   31352:	e7f3      	b.n	3133c <at_notif_register_handler+0x54>
__ssp_bos_icheck3(memset, void *, int)
   31354:	6004      	str	r4, [r0, #0]
	to_ins->ctx     = ctx;
   31356:	9b01      	ldr	r3, [sp, #4]
Z_GENLIST_APPEND(slist, snode)
   31358:	4a0b      	ldr	r2, [pc, #44]	; (31388 <at_notif_register_handler+0xa0>)
   3135a:	6044      	str	r4, [r0, #4]
   3135c:	6084      	str	r4, [r0, #8]
	parent->next = child;
   3135e:	601c      	str	r4, [r3, #0]
Z_GENLIST_APPEND(slist, snode)
   31360:	6851      	ldr	r1, [r2, #4]
	to_ins->handler = handler;
   31362:	e9c3 6501 	strd	r6, r5, [r3, #4]
   31366:	b911      	cbnz	r1, 3136e <at_notif_register_handler+0x86>
	list->head = node;
   31368:	e9c2 3300 	strd	r3, r3, [r2]
   3136c:	e7e3      	b.n	31336 <at_notif_register_handler+0x4e>
	parent->next = child;
   3136e:	600b      	str	r3, [r1, #0]
	list->tail = node;
   31370:	6053      	str	r3, [r2, #4]
   31372:	e7e0      	b.n	31336 <at_notif_register_handler+0x4e>
   31374:	20032ab8 	.word	0x20032ab8
   31378:	00045f08 	.word	0x00045f08
   3137c:	00045f70 	.word	0x00045f70
   31380:	0004c788 	.word	0x0004c788
   31384:	20032c20 	.word	0x20032c20
   31388:	20024e2c 	.word	0x20024e2c

0003138c <at_notif_deregister_handler>:

int at_notif_deregister_handler(void *context, at_notif_handler_t handler)
{
   3138c:	b537      	push	{r0, r1, r2, r4, r5, lr}
   3138e:	4605      	mov	r5, r0
	if (handler == NULL) {
   31390:	460c      	mov	r4, r1
   31392:	b9b1      	cbnz	r1, 313c2 <at_notif_deregister_handler+0x36>
		LOG_ERR("Invalid handler (context=0x%08X, handler=0x%08X)",
   31394:	4b27      	ldr	r3, [pc, #156]	; (31434 <at_notif_deregister_handler+0xa8>)
   31396:	681b      	ldr	r3, [r3, #0]
   31398:	075b      	lsls	r3, r3, #29
   3139a:	d00f      	beq.n	313bc <at_notif_deregister_handler+0x30>
   3139c:	2201      	movs	r2, #1
   3139e:	f04f 0300 	mov.w	r3, #0
   313a2:	4925      	ldr	r1, [pc, #148]	; (31438 <at_notif_deregister_handler+0xac>)
   313a4:	f362 0307 	bfi	r3, r2, #0, #8
   313a8:	4a24      	ldr	r2, [pc, #144]	; (3143c <at_notif_deregister_handler+0xb0>)
   313aa:	1a89      	subs	r1, r1, r2
   313ac:	08c9      	lsrs	r1, r1, #3
   313ae:	f361 138f 	bfi	r3, r1, #6, #10
   313b2:	4622      	mov	r2, r4
   313b4:	4601      	mov	r1, r0
   313b6:	4822      	ldr	r0, [pc, #136]	; (31440 <at_notif_deregister_handler+0xb4>)
   313b8:	f00f fb64 	bl	40a84 <log_2>
			(u32_t)context, (u32_t)handler);
		return -EINVAL;
   313bc:	f06f 0015 	mvn.w	r0, #21
   313c0:	e022      	b.n	31408 <at_notif_deregister_handler+0x7c>
	struct notif_handler *curr, *prev = NULL;
   313c2:	2300      	movs	r3, #0
   313c4:	9301      	str	r3, [sp, #4]
   313c6:	f04f 31ff 	mov.w	r1, #4294967295
   313ca:	481e      	ldr	r0, [pc, #120]	; (31444 <at_notif_deregister_handler+0xb8>)
   313cc:	f00a fbac 	bl	3bb28 <z_impl_k_mutex_lock>
	curr = find_node(&prev, ctx, handler);
   313d0:	4622      	mov	r2, r4
   313d2:	4629      	mov	r1, r5
   313d4:	a801      	add	r0, sp, #4
   313d6:	f7ff ff1b 	bl	31210 <find_node>
	if (curr == NULL) {
   313da:	b9b8      	cbnz	r0, 3140c <at_notif_deregister_handler+0x80>
		LOG_WRN("Handler not registered. Nothing to do");
   313dc:	4b15      	ldr	r3, [pc, #84]	; (31434 <at_notif_deregister_handler+0xa8>)
   313de:	681b      	ldr	r3, [r3, #0]
   313e0:	f013 0f06 	tst.w	r3, #6
   313e4:	d00d      	beq.n	31402 <at_notif_deregister_handler+0x76>
   313e6:	2302      	movs	r3, #2
   313e8:	f04f 0100 	mov.w	r1, #0
   313ec:	4a13      	ldr	r2, [pc, #76]	; (3143c <at_notif_deregister_handler+0xb0>)
   313ee:	f363 0107 	bfi	r1, r3, #0, #8
   313f2:	4b11      	ldr	r3, [pc, #68]	; (31438 <at_notif_deregister_handler+0xac>)
   313f4:	4814      	ldr	r0, [pc, #80]	; (31448 <at_notif_deregister_handler+0xbc>)
   313f6:	1a9b      	subs	r3, r3, r2
   313f8:	08db      	lsrs	r3, r3, #3
   313fa:	f363 118f 	bfi	r1, r3, #6, #10
   313fe:	f00f fb20 	bl	40a42 <log_0>
	k_mutex_unlock(&list_mtx);
   31402:	f7ff ff4f 	bl	312a4 <k_mutex_unlock.constprop.7>
	}
	return remove_notif_handler(context, handler);
   31406:	2000      	movs	r0, #0
}
   31408:	b003      	add	sp, #12
   3140a:	bd30      	pop	{r4, r5, pc}
	sys_slist_remove(&handler_list, &prev->node, &curr->node);
   3140c:	9a01      	ldr	r2, [sp, #4]
Z_GENLIST_REMOVE(slist, snode)
   3140e:	6801      	ldr	r1, [r0, #0]
   31410:	4b0e      	ldr	r3, [pc, #56]	; (3144c <at_notif_deregister_handler+0xc0>)
   31412:	b94a      	cbnz	r2, 31428 <at_notif_deregister_handler+0x9c>
   31414:	685a      	ldr	r2, [r3, #4]
	list->head = node;
   31416:	6019      	str	r1, [r3, #0]
Z_GENLIST_REMOVE(slist, snode)
   31418:	4290      	cmp	r0, r2
   3141a:	d100      	bne.n	3141e <at_notif_deregister_handler+0x92>
	list->tail = node;
   3141c:	6059      	str	r1, [r3, #4]
	parent->next = child;
   3141e:	2300      	movs	r3, #0
   31420:	6003      	str	r3, [r0, #0]
	k_free(curr);
   31422:	f013 fb3c 	bl	44a9e <k_free>
   31426:	e7ec      	b.n	31402 <at_notif_deregister_handler+0x76>
   31428:	6011      	str	r1, [r2, #0]
Z_GENLIST_REMOVE(slist, snode)
   3142a:	6859      	ldr	r1, [r3, #4]
   3142c:	4288      	cmp	r0, r1
	list->tail = node;
   3142e:	bf08      	it	eq
   31430:	605a      	streq	r2, [r3, #4]
   31432:	e7f4      	b.n	3141e <at_notif_deregister_handler+0x92>
   31434:	20032ab8 	.word	0x20032ab8
   31438:	00045f70 	.word	0x00045f70
   3143c:	00045f08 	.word	0x00045f08
   31440:	0004c788 	.word	0x0004c788
   31444:	20032c20 	.word	0x20032c20
   31448:	0004c762 	.word	0x0004c762
   3144c:	20024e2c 	.word	0x20024e2c

00031450 <is_valid_notification_char>:
 * @retval true  If character is valid
 * @retval false If character is not valid
 */
static inline bool is_valid_notification_char(char chr)
{
	chr = toupper(chr);
   31450:	4b06      	ldr	r3, [pc, #24]	; (3146c <is_valid_notification_char+0x1c>)
   31452:	5cc3      	ldrb	r3, [r0, r3]
   31454:	f003 0303 	and.w	r3, r3, #3
   31458:	2b02      	cmp	r3, #2
   3145a:	bf08      	it	eq
   3145c:	3820      	subeq	r0, #32

	if ((chr >= 'A') && (chr <= 'Z')) {
   3145e:	3841      	subs	r0, #65	; 0x41
   31460:	b2c0      	uxtb	r0, r0
		return true;
	}

	return false;
}
   31462:	2819      	cmp	r0, #25
   31464:	bf8c      	ite	hi
   31466:	2000      	movhi	r0, #0
   31468:	2001      	movls	r0, #1
   3146a:	4770      	bx	lr
   3146c:	0004d857 	.word	0x0004d857

00031470 <at_parse_process_element>:
	return 0;
}

static int at_parse_process_element(const char **str, int index,
				    struct at_param_list *const list)
{
   31470:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	const char *tmpstr = *str;
   31474:	6805      	ldr	r5, [r0, #0]
{
   31476:	b0a3      	sub	sp, #140	; 0x8c
	const char *tmpstr = *str;
   31478:	9500      	str	r5, [sp, #0]
 * @retval true  If character is 0
 * @retval false If character is not 0
 */
static inline bool is_terminated(char chr)
{
	if (chr == AT_CMD_BUFFER_TERMINATOR) {
   3147a:	782b      	ldrb	r3, [r5, #0]
{
   3147c:	4680      	mov	r8, r0
   3147e:	460f      	mov	r7, r1
   31480:	4616      	mov	r6, r2
   31482:	2b00      	cmp	r3, #0
   31484:	f000 80bd 	beq.w	31602 <at_parse_process_element+0x192>

	if (is_terminated(*tmpstr)) {
		return -1;
	}

	if (state == NOTIFICATION) {
   31488:	4b5f      	ldr	r3, [pc, #380]	; (31608 <at_parse_process_element+0x198>)
   3148a:	781c      	ldrb	r4, [r3, #0]
   3148c:	2c05      	cmp	r4, #5
   3148e:	d110      	bne.n	314b2 <at_parse_process_element+0x42>
		const char *start_ptr = tmpstr++;
   31490:	1c6b      	adds	r3, r5, #1
   31492:	9300      	str	r3, [sp, #0]

		while (is_valid_notification_char(*tmpstr)) {
   31494:	9a00      	ldr	r2, [sp, #0]
   31496:	7810      	ldrb	r0, [r2, #0]
   31498:	f7ff ffda 	bl	31450 <is_valid_notification_char>
   3149c:	b930      	cbnz	r0, 314ac <at_parse_process_element+0x3c>
			tmpstr++;
		}

		at_params_string_put(list, index, start_ptr,
   3149e:	1b53      	subs	r3, r2, r5

		while (isxdigit((int)*tmpstr)) {
			tmpstr++;
		}

		at_params_string_put(list, index, start_ptr,
   314a0:	462a      	mov	r2, r5
   314a2:	4639      	mov	r1, r7
   314a4:	4630      	mov	r0, r6
   314a6:	f013 f9db 	bl	44860 <at_params_string_put>
   314aa:	e01b      	b.n	314e4 <at_parse_process_element+0x74>
			tmpstr++;
   314ac:	3201      	adds	r2, #1
   314ae:	9200      	str	r2, [sp, #0]
   314b0:	e7f0      	b.n	31494 <at_parse_process_element+0x24>
	} else if (state == COMMAND) {
   314b2:	2c06      	cmp	r4, #6
   314b4:	d124      	bne.n	31500 <at_parse_process_element+0x90>
		skip_command_prefix(&tmpstr);
   314b6:	4668      	mov	r0, sp
   314b8:	f013 f965 	bl	44786 <skip_command_prefix>
		while (is_valid_notification_char(*tmpstr)) {
   314bc:	9a00      	ldr	r2, [sp, #0]
   314be:	7810      	ldrb	r0, [r2, #0]
   314c0:	f7ff ffc6 	bl	31450 <is_valid_notification_char>
   314c4:	b9a8      	cbnz	r0, 314f2 <at_parse_process_element+0x82>
		at_params_string_put(list, index, start_ptr,
   314c6:	1b53      	subs	r3, r2, r5
   314c8:	4639      	mov	r1, r7
   314ca:	462a      	mov	r2, r5
   314cc:	4630      	mov	r0, r6
   314ce:	f013 f9c7 	bl	44860 <at_params_string_put>
		if ((*tmpstr == AT_CMD_SEPARATOR) &&
   314d2:	9b00      	ldr	r3, [sp, #0]
   314d4:	781a      	ldrb	r2, [r3, #0]
   314d6:	2a3d      	cmp	r2, #61	; 0x3d
   314d8:	d10e      	bne.n	314f8 <at_parse_process_element+0x88>
   314da:	785a      	ldrb	r2, [r3, #1]
   314dc:	2a3f      	cmp	r2, #63	; 0x3f
   314de:	d101      	bne.n	314e4 <at_parse_process_element+0x74>
			tmpstr += 2;
   314e0:	3302      	adds	r3, #2
			tmpstr++;
   314e2:	9300      	str	r3, [sp, #0]
				     tmpstr - start_ptr);
	}

	*str = tmpstr;
	return 0;
   314e4:	2000      	movs	r0, #0
	*str = tmpstr;
   314e6:	9b00      	ldr	r3, [sp, #0]
   314e8:	f8c8 3000 	str.w	r3, [r8]
}
   314ec:	b023      	add	sp, #140	; 0x8c
   314ee:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			tmpstr++;
   314f2:	3201      	adds	r2, #1
   314f4:	9200      	str	r2, [sp, #0]
   314f6:	e7e1      	b.n	314bc <at_parse_process_element+0x4c>
		} else if (*tmpstr == AT_CMD_READ_TEST_IDENTIFIER) {
   314f8:	2a3f      	cmp	r2, #63	; 0x3f
   314fa:	d1f3      	bne.n	314e4 <at_parse_process_element+0x74>
			tmpstr++;
   314fc:	3301      	adds	r3, #1
   314fe:	e7f0      	b.n	314e2 <at_parse_process_element+0x72>
	} else if (state == OPTIONAL) {
   31500:	2c07      	cmp	r4, #7
   31502:	d103      	bne.n	3150c <at_parse_process_element+0x9c>
		at_params_empty_put(list, index);
   31504:	4610      	mov	r0, r2
   31506:	f013 f982 	bl	4480e <at_params_empty_put>
   3150a:	e7eb      	b.n	314e4 <at_parse_process_element+0x74>
	} else if (state == STRING) {
   3150c:	2c02      	cmp	r4, #2
   3150e:	d112      	bne.n	31536 <at_parse_process_element+0xc6>
		while (!is_dblquote(*tmpstr) && !is_terminated(*tmpstr) &&
   31510:	9a00      	ldr	r2, [sp, #0]
   31512:	7810      	ldrb	r0, [r2, #0]
 * @retval true  If character is "
 * @retval false If character is something else
 */
static inline bool is_dblquote(char chr)
{
	if (chr == '"') {
   31514:	2822      	cmp	r0, #34	; 0x22
   31516:	d003      	beq.n	31520 <at_parse_process_element+0xb0>
	if (chr == AT_CMD_BUFFER_TERMINATOR) {
   31518:	b110      	cbz	r0, 31520 <at_parse_process_element+0xb0>
		       !is_lfcr(*tmpstr)) {
   3151a:	f013 f92b 	bl	44774 <is_lfcr>
		while (!is_dblquote(*tmpstr) && !is_terminated(*tmpstr) &&
   3151e:	b138      	cbz	r0, 31530 <at_parse_process_element+0xc0>
		at_params_string_put(list, index, start_ptr,
   31520:	1b53      	subs	r3, r2, r5
   31522:	4639      	mov	r1, r7
   31524:	462a      	mov	r2, r5
   31526:	4630      	mov	r0, r6
   31528:	f013 f99a 	bl	44860 <at_params_string_put>
		tmpstr++;
   3152c:	9b00      	ldr	r3, [sp, #0]
   3152e:	e7e5      	b.n	314fc <at_parse_process_element+0x8c>
			tmpstr++;
   31530:	3201      	adds	r2, #1
   31532:	9200      	str	r2, [sp, #0]
   31534:	e7ec      	b.n	31510 <at_parse_process_element+0xa0>
	} else if (state == ARRAY) {
   31536:	2c01      	cmp	r4, #1
   31538:	d13c      	bne.n	315b4 <at_parse_process_element+0x144>
		tmparray[i++] = (u32_t)strtoul(tmpstr, &next, 10);
   3153a:	4628      	mov	r0, r5
   3153c:	220a      	movs	r2, #10
   3153e:	a901      	add	r1, sp, #4
   31540:	f00e f84a 	bl	3f5d8 <strtoul>
		tmpstr = next;
   31544:	9b01      	ldr	r3, [sp, #4]
	if ((chr == AT_PARAM_SEPARATOR) || (chr == AT_RSP_SEPARATOR) ||
   31546:	4d31      	ldr	r5, [pc, #196]	; (3160c <at_parse_process_element+0x19c>)
		tmparray[i++] = (u32_t)strtoul(tmpstr, &next, 10);
   31548:	9002      	str	r0, [sp, #8]
		tmpstr = next;
   3154a:	9300      	str	r3, [sp, #0]
		while (!is_array_stop(*tmpstr) && !is_terminated(*tmpstr)) {
   3154c:	9800      	ldr	r0, [sp, #0]
   3154e:	7803      	ldrb	r3, [r0, #0]
 * @retval true  If character is )
 * @retval false If character is something else
 */
static inline bool is_array_stop(char chr)
{
	if (chr == ')') {
   31550:	2b29      	cmp	r3, #41	; 0x29
   31552:	d028      	beq.n	315a6 <at_parse_process_element+0x136>
	if (chr == AT_CMD_BUFFER_TERMINATOR) {
   31554:	b33b      	cbz	r3, 315a6 <at_parse_process_element+0x136>
	if ((chr == AT_PARAM_SEPARATOR) || (chr == AT_RSP_SEPARATOR) ||
   31556:	3b2c      	subs	r3, #44	; 0x2c
   31558:	b2db      	uxtb	r3, r3
   3155a:	3001      	adds	r0, #1
   3155c:	2b11      	cmp	r3, #17
				tmparray[i++] =
   3155e:	9000      	str	r0, [sp, #0]
   31560:	d803      	bhi.n	3156a <at_parse_process_element+0xfa>
   31562:	fa25 f303 	lsr.w	r3, r5, r3
   31566:	07db      	lsls	r3, r3, #31
   31568:	d408      	bmi.n	3157c <at_parse_process_element+0x10c>
				tmpstr++;
   3156a:	46a1      	mov	r9, r4
   3156c:	e004      	b.n	31578 <at_parse_process_element+0x108>
					tmpstr = next;
   3156e:	9b01      	ldr	r3, [sp, #4]
			if (i == AT_CMD_MAX_ARRAY_SIZE) {
   31570:	f1b9 0f20 	cmp.w	r9, #32
					tmpstr = next;
   31574:	9300      	str	r3, [sp, #0]
			if (i == AT_CMD_MAX_ARRAY_SIZE) {
   31576:	d015      	beq.n	315a4 <at_parse_process_element+0x134>
				tmpstr++;
   31578:	464c      	mov	r4, r9
   3157a:	e7e7      	b.n	3154c <at_parse_process_element+0xdc>
					(u32_t)strtoul(++tmpstr, &next, 10);
   3157c:	220a      	movs	r2, #10
   3157e:	a901      	add	r1, sp, #4
   31580:	f00e f82a 	bl	3f5d8 <strtoul>
				tmparray[i++] =
   31584:	ab22      	add	r3, sp, #136	; 0x88
   31586:	f104 0901 	add.w	r9, r4, #1
   3158a:	eb03 0484 	add.w	r4, r3, r4, lsl #2
   3158e:	f844 0c80 	str.w	r0, [r4, #-128]
				if (strlen(tmpstr) == strlen(next)) {
   31592:	9800      	ldr	r0, [sp, #0]
   31594:	f7eb fdc0 	bl	1d118 <strlen>
   31598:	4604      	mov	r4, r0
   3159a:	9801      	ldr	r0, [sp, #4]
   3159c:	f7eb fdbc 	bl	1d118 <strlen>
   315a0:	4284      	cmp	r4, r0
   315a2:	d1e4      	bne.n	3156e <at_parse_process_element+0xfe>
   315a4:	464c      	mov	r4, r9
		at_params_array_put(list, index, tmparray, i * sizeof(u32_t));
   315a6:	00a3      	lsls	r3, r4, #2
   315a8:	aa02      	add	r2, sp, #8
   315aa:	4639      	mov	r1, r7
   315ac:	4630      	mov	r0, r6
   315ae:	f013 f97d 	bl	448ac <at_params_array_put>
   315b2:	e7bb      	b.n	3152c <at_parse_process_element+0xbc>
	} else if (state == NUMBER) {
   315b4:	2c03      	cmp	r4, #3
   315b6:	d115      	bne.n	315e4 <at_parse_process_element+0x174>
		int value = (u32_t)strtoul(tmpstr, &next, 10);
   315b8:	220a      	movs	r2, #10
   315ba:	a902      	add	r1, sp, #8
   315bc:	4628      	mov	r0, r5
   315be:	f00e f80b 	bl	3f5d8 <strtoul>
		tmpstr = next;
   315c2:	9b02      	ldr	r3, [sp, #8]
		if (value <= USHRT_MAX) {
   315c4:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
		int value = (u32_t)strtoul(tmpstr, &next, 10);
   315c8:	4602      	mov	r2, r0
		tmpstr = next;
   315ca:	9300      	str	r3, [sp, #0]
		if (value <= USHRT_MAX) {
   315cc:	da05      	bge.n	315da <at_parse_process_element+0x16a>
			at_params_short_put(list, index, (u16_t)value);
   315ce:	b282      	uxth	r2, r0
   315d0:	4639      	mov	r1, r7
   315d2:	4630      	mov	r0, r6
   315d4:	f013 f906 	bl	447e4 <at_params_short_put>
   315d8:	e784      	b.n	314e4 <at_parse_process_element+0x74>
			at_params_int_put(list, index, value);
   315da:	4639      	mov	r1, r7
   315dc:	4630      	mov	r0, r6
   315de:	f013 f92a 	bl	44836 <at_params_int_put>
   315e2:	e77f      	b.n	314e4 <at_parse_process_element+0x74>
	} else if (state == SMS_PDU) {
   315e4:	2c04      	cmp	r4, #4
   315e6:	f47f af7d 	bne.w	314e4 <at_parse_process_element+0x74>
		while (isxdigit((int)*tmpstr)) {
   315ea:	4909      	ldr	r1, [pc, #36]	; (31610 <at_parse_process_element+0x1a0>)
   315ec:	9b00      	ldr	r3, [sp, #0]
   315ee:	781a      	ldrb	r2, [r3, #0]
   315f0:	5c52      	ldrb	r2, [r2, r1]
   315f2:	f012 0f44 	tst.w	r2, #68	; 0x44
   315f6:	d101      	bne.n	315fc <at_parse_process_element+0x18c>
		at_params_string_put(list, index, start_ptr,
   315f8:	1b5b      	subs	r3, r3, r5
   315fa:	e751      	b.n	314a0 <at_parse_process_element+0x30>
			tmpstr++;
   315fc:	3301      	adds	r3, #1
   315fe:	9300      	str	r3, [sp, #0]
   31600:	e7f4      	b.n	315ec <at_parse_process_element+0x17c>
		return -1;
   31602:	f04f 30ff 	mov.w	r0, #4294967295
   31606:	e771      	b.n	314ec <at_parse_process_element+0x7c>
   31608:	2002a4e2 	.word	0x2002a4e2
   3160c:	00024001 	.word	0x00024001
   31610:	0004d857 	.word	0x0004d857

00031614 <is_command>:
 *
 * @retval true  If the string is an AT command
 * @retval false Otherwise
 */
static inline bool is_command(const char *str)
{
   31614:	b510      	push	{r4, lr}
   31616:	4604      	mov	r4, r0
	if (strlen(str) < 2) {
   31618:	f7eb fd7e 	bl	1d118 <strlen>
   3161c:	2801      	cmp	r0, #1
   3161e:	d922      	bls.n	31666 <is_command+0x52>
		return false;
	}

	if ((toupper(str[0]) != 'A') || (toupper(str[1]) != 'T')) {
   31620:	7821      	ldrb	r1, [r4, #0]
   31622:	4b13      	ldr	r3, [pc, #76]	; (31670 <is_command+0x5c>)
   31624:	5cca      	ldrb	r2, [r1, r3]
   31626:	f002 0203 	and.w	r2, r2, #3
   3162a:	2a02      	cmp	r2, #2
   3162c:	bf08      	it	eq
   3162e:	3920      	subeq	r1, #32
   31630:	2941      	cmp	r1, #65	; 0x41
   31632:	461a      	mov	r2, r3
   31634:	d117      	bne.n	31666 <is_command+0x52>
   31636:	7863      	ldrb	r3, [r4, #1]
   31638:	5cd2      	ldrb	r2, [r2, r3]
   3163a:	f002 0203 	and.w	r2, r2, #3
   3163e:	2a02      	cmp	r2, #2
   31640:	bf08      	it	eq
   31642:	3b20      	subeq	r3, #32
   31644:	2b54      	cmp	r3, #84	; 0x54
   31646:	d10e      	bne.n	31666 <is_command+0x52>
	}

	/* Third character has be one of the command special characters.
	 * The special case is a lone "AT" command.
	 */
	if ((str[2] == AT_STANDARD_NOTIFICATION_PREFIX) ||
   31648:	78a2      	ldrb	r2, [r4, #2]
   3164a:	2a25      	cmp	r2, #37	; 0x25
   3164c:	d00d      	beq.n	3166a <is_command+0x56>
	    (str[2] == AT_PROP_NOTIFICATION_PREFX) ||
   3164e:	f002 03f7 	and.w	r3, r2, #247	; 0xf7
   31652:	2b23      	cmp	r3, #35	; 0x23
   31654:	d009      	beq.n	3166a <is_command+0x56>
	    (str[2] == AT_CUSTOM_COMMAND_PREFX) ||
	    is_lfcr(str[2]) || is_terminated(str[2])) {
   31656:	4610      	mov	r0, r2
   31658:	f013 f88c 	bl	44774 <is_lfcr>
	    (str[2] == AT_CUSTOM_COMMAND_PREFX) ||
   3165c:	b910      	cbnz	r0, 31664 <is_command+0x50>
	if (chr == AT_CMD_BUFFER_TERMINATOR) {
   3165e:	fab2 f082 	clz	r0, r2
   31662:	0940      	lsrs	r0, r0, #5
		return true;
	}

	return false;
}
   31664:	bd10      	pop	{r4, pc}
	return false;
   31666:	2000      	movs	r0, #0
   31668:	e7fc      	b.n	31664 <is_command+0x50>
		return true;
   3166a:	2001      	movs	r0, #1
   3166c:	e7fa      	b.n	31664 <is_command+0x50>
   3166e:	bf00      	nop
   31670:	0004d857 	.word	0x0004d857

00031674 <at_parse_detect_type>:
{
   31674:	b570      	push	{r4, r5, r6, lr}
	const char *tmpstr = *str;
   31676:	6804      	ldr	r4, [r0, #0]
	if ((index == 0) && is_notification(*tmpstr)) {
   31678:	2900      	cmp	r1, #0
{
   3167a:	4606      	mov	r6, r0
   3167c:	7822      	ldrb	r2, [r4, #0]
	if ((index == 0) && is_notification(*tmpstr)) {
   3167e:	d141      	bne.n	31704 <at_parse_detect_type+0x90>
	if ((chr == AT_STANDARD_NOTIFICATION_PREFIX) ||
   31680:	2a2b      	cmp	r2, #43	; 0x2b
   31682:	4d29      	ldr	r5, [pc, #164]	; (31728 <at_parse_detect_type+0xb4>)
   31684:	d001      	beq.n	3168a <at_parse_detect_type+0x16>
   31686:	2a25      	cmp	r2, #37	; 0x25
   31688:	d104      	bne.n	31694 <at_parse_detect_type+0x20>
	state = new_state;
   3168a:	2305      	movs	r3, #5
   3168c:	702b      	strb	r3, [r5, #0]
	return 0;
   3168e:	2000      	movs	r0, #0
	*str = tmpstr;
   31690:	6034      	str	r4, [r6, #0]
}
   31692:	bd70      	pop	{r4, r5, r6, pc}
	} else if ((index == 0) && is_command(tmpstr)) {
   31694:	4620      	mov	r0, r4
   31696:	f7ff ffbd 	bl	31614 <is_command>
   3169a:	b388      	cbz	r0, 31700 <at_parse_detect_type+0x8c>
	state = new_state;
   3169c:	2306      	movs	r3, #6
   3169e:	e7f5      	b.n	3168c <at_parse_detect_type+0x18>
	if (chr == '"') {
   316a0:	2a22      	cmp	r2, #34	; 0x22
   316a2:	d006      	beq.n	316b2 <at_parse_detect_type+0x3e>
	if (chr == '(') {
   316a4:	2a28      	cmp	r2, #40	; 0x28
   316a6:	d109      	bne.n	316bc <at_parse_detect_type+0x48>
   316a8:	2201      	movs	r2, #1
   316aa:	4b1f      	ldr	r3, [pc, #124]	; (31728 <at_parse_detect_type+0xb4>)
		tmpstr++;
   316ac:	4414      	add	r4, r2
	state = new_state;
   316ae:	701a      	strb	r2, [r3, #0]
		tmpstr++;
   316b0:	e7ed      	b.n	3168e <at_parse_detect_type+0x1a>
	state = new_state;
   316b2:	2202      	movs	r2, #2
   316b4:	4b1c      	ldr	r3, [pc, #112]	; (31728 <at_parse_detect_type+0xb4>)
		tmpstr++;
   316b6:	3401      	adds	r4, #1
	state = new_state;
   316b8:	701a      	strb	r2, [r3, #0]
		tmpstr++;
   316ba:	e7e8      	b.n	3168e <at_parse_detect_type+0x1a>
	} else if (is_lfcr(*tmpstr) && (state == NUMBER)) {
   316bc:	4610      	mov	r0, r2
   316be:	f013 f859 	bl	44774 <is_lfcr>
   316c2:	b170      	cbz	r0, 316e2 <at_parse_detect_type+0x6e>
   316c4:	4918      	ldr	r1, [pc, #96]	; (31728 <at_parse_detect_type+0xb4>)
   316c6:	7808      	ldrb	r0, [r1, #0]
   316c8:	2803      	cmp	r0, #3
   316ca:	d108      	bne.n	316de <at_parse_detect_type+0x6a>
		while (is_lfcr(*tmpstr)) {
   316cc:	f814 0f01 	ldrb.w	r0, [r4, #1]!
   316d0:	f013 f850 	bl	44774 <is_lfcr>
   316d4:	2800      	cmp	r0, #0
   316d6:	d1f9      	bne.n	316cc <at_parse_detect_type+0x58>
	state = new_state;
   316d8:	2304      	movs	r3, #4
   316da:	700b      	strb	r3, [r1, #0]
   316dc:	e7d7      	b.n	3168e <at_parse_detect_type+0x1a>
	} else if (is_lfcr(*tmpstr) && (state == OPTIONAL)) {
   316de:	2807      	cmp	r0, #7
   316e0:	d0d5      	beq.n	3168e <at_parse_detect_type+0x1a>
	if ((chr == AT_PARAM_SEPARATOR) || (chr == AT_RSP_SEPARATOR) ||
   316e2:	3a2c      	subs	r2, #44	; 0x2c
   316e4:	b2d2      	uxtb	r2, r2
   316e6:	2a11      	cmp	r2, #17
   316e8:	d807      	bhi.n	316fa <at_parse_detect_type+0x86>
   316ea:	4b10      	ldr	r3, [pc, #64]	; (3172c <at_parse_detect_type+0xb8>)
   316ec:	fa23 f202 	lsr.w	r2, r3, r2
   316f0:	07d3      	lsls	r3, r2, #31
   316f2:	d502      	bpl.n	316fa <at_parse_detect_type+0x86>
	state = new_state;
   316f4:	4b0c      	ldr	r3, [pc, #48]	; (31728 <at_parse_detect_type+0xb4>)
   316f6:	2207      	movs	r2, #7
   316f8:	e013      	b.n	31722 <at_parse_detect_type+0xae>
		return -1;
   316fa:	f04f 30ff 	mov.w	r0, #4294967295
   316fe:	e7c8      	b.n	31692 <at_parse_detect_type+0x1e>
	state = new_state;
   31700:	2302      	movs	r3, #2
   31702:	e7c3      	b.n	3168c <at_parse_detect_type+0x18>
	} else if ((index > 0) && is_notification(*tmpstr)) {
   31704:	dd03      	ble.n	3170e <at_parse_detect_type+0x9a>
	if ((chr == AT_STANDARD_NOTIFICATION_PREFIX) ||
   31706:	2a2b      	cmp	r2, #43	; 0x2b
   31708:	d0f7      	beq.n	316fa <at_parse_detect_type+0x86>
   3170a:	2a25      	cmp	r2, #37	; 0x25
   3170c:	d0f5      	beq.n	316fa <at_parse_detect_type+0x86>
	if (isdigit(chr) || (chr == '-') || (chr == '+')) {
   3170e:	4b08      	ldr	r3, [pc, #32]	; (31730 <at_parse_detect_type+0xbc>)
   31710:	5cd3      	ldrb	r3, [r2, r3]
   31712:	0759      	lsls	r1, r3, #29
   31714:	d403      	bmi.n	3171e <at_parse_detect_type+0xaa>
   31716:	2a2d      	cmp	r2, #45	; 0x2d
   31718:	d001      	beq.n	3171e <at_parse_detect_type+0xaa>
   3171a:	2a2b      	cmp	r2, #43	; 0x2b
   3171c:	d1c0      	bne.n	316a0 <at_parse_detect_type+0x2c>
	state = new_state;
   3171e:	2203      	movs	r2, #3
   31720:	4b01      	ldr	r3, [pc, #4]	; (31728 <at_parse_detect_type+0xb4>)
   31722:	701a      	strb	r2, [r3, #0]
   31724:	e7b3      	b.n	3168e <at_parse_detect_type+0x1a>
   31726:	bf00      	nop
   31728:	2002a4e2 	.word	0x2002a4e2
   3172c:	00024001 	.word	0x00024001
   31730:	0004d857 	.word	0x0004d857

00031734 <at_parser_max_params_from_str>:

int at_parser_max_params_from_str(const char *at_params_str,
				  char **next_param_str,
				  struct at_param_list *const list,
				  size_t max_params_count)
{
   31734:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   31738:	4688      	mov	r8, r1
   3173a:	4616      	mov	r6, r2
   3173c:	461f      	mov	r7, r3
	int err = 0;

	if (at_params_str == NULL || list == NULL || list->params == NULL) {
   3173e:	4604      	mov	r4, r0
   31740:	2800      	cmp	r0, #0
   31742:	d07e      	beq.n	31842 <at_parser_max_params_from_str+0x10e>
   31744:	2a00      	cmp	r2, #0
   31746:	d07c      	beq.n	31842 <at_parser_max_params_from_str+0x10e>
   31748:	6853      	ldr	r3, [r2, #4]
   3174a:	2b00      	cmp	r3, #0
   3174c:	d079      	beq.n	31842 <at_parser_max_params_from_str+0x10e>
	state = IDLE;
   3174e:	2500      	movs	r5, #0
		return -EINVAL;
	}

	at_params_list_clear(list);
   31750:	4610      	mov	r0, r2
   31752:	f000 f8eb 	bl	3192c <at_params_list_clear>

	max_params_count = MIN(max_params_count, list->param_count);
   31756:	6832      	ldr	r2, [r6, #0]
	const char *str = *at_params_str;
   31758:	9401      	str	r4, [sp, #4]
	max_params_count = MIN(max_params_count, list->param_count);
   3175a:	4297      	cmp	r7, r2
   3175c:	bf28      	it	cs
   3175e:	4617      	movcs	r7, r2
	int index = 0;
   31760:	462c      	mov	r4, r5
	state = IDLE;
   31762:	4b39      	ldr	r3, [pc, #228]	; (31848 <at_parser_max_params_from_str+0x114>)
		if (isspace((int)*str)) {
   31764:	f8df 90e4 	ldr.w	r9, [pc, #228]	; 3184c <at_parser_max_params_from_str+0x118>
	if ((chr == AT_PARAM_SEPARATOR) || (chr == AT_RSP_SEPARATOR) ||
   31768:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 31850 <at_parser_max_params_from_str+0x11c>
	state = IDLE;
   3176c:	701d      	strb	r5, [r3, #0]
	while ((!is_terminated(*str)) && (index < max_params)) {
   3176e:	9b01      	ldr	r3, [sp, #4]
   31770:	781a      	ldrb	r2, [r3, #0]
	if (chr == AT_CMD_BUFFER_TERMINATOR) {
   31772:	2a00      	cmp	r2, #0
   31774:	d04b      	beq.n	3180e <at_parser_max_params_from_str+0xda>
   31776:	42a7      	cmp	r7, r4
   31778:	d949      	bls.n	3180e <at_parser_max_params_from_str+0xda>
		if (isspace((int)*str)) {
   3177a:	f812 2009 	ldrb.w	r2, [r2, r9]
		if (at_parse_detect_type(&str, index) == -1) {
   3177e:	a801      	add	r0, sp, #4
		if (isspace((int)*str)) {
   31780:	0711      	lsls	r1, r2, #28
			str++;
   31782:	bf48      	it	mi
   31784:	3301      	addmi	r3, #1
		if (at_parse_detect_type(&str, index) == -1) {
   31786:	4621      	mov	r1, r4
			str++;
   31788:	bf48      	it	mi
   3178a:	9301      	strmi	r3, [sp, #4]
		if (at_parse_detect_type(&str, index) == -1) {
   3178c:	f7ff ff72 	bl	31674 <at_parse_detect_type>
   31790:	1c42      	adds	r2, r0, #1
   31792:	d03c      	beq.n	3180e <at_parser_max_params_from_str+0xda>
		if (at_parse_process_element(&str, index, list) == -1) {
   31794:	4632      	mov	r2, r6
   31796:	4621      	mov	r1, r4
   31798:	a801      	add	r0, sp, #4
   3179a:	f7ff fe69 	bl	31470 <at_parse_process_element>
   3179e:	1c43      	adds	r3, r0, #1
   317a0:	d035      	beq.n	3180e <at_parser_max_params_from_str+0xda>
		if (is_separator(*str)) {
   317a2:	9b01      	ldr	r3, [sp, #4]
	if ((chr == AT_PARAM_SEPARATOR) || (chr == AT_RSP_SEPARATOR) ||
   317a4:	781a      	ldrb	r2, [r3, #0]
   317a6:	3a2c      	subs	r2, #44	; 0x2c
   317a8:	b2d2      	uxtb	r2, r2
   317aa:	2a11      	cmp	r2, #17
   317ac:	d81a      	bhi.n	317e4 <at_parser_max_params_from_str+0xb0>
   317ae:	fa2a f202 	lsr.w	r2, sl, r2
   317b2:	07d1      	lsls	r1, r2, #31
   317b4:	d516      	bpl.n	317e4 <at_parser_max_params_from_str+0xb0>
			if (is_lfcr(*(str + 1))) {
   317b6:	7858      	ldrb	r0, [r3, #1]
   317b8:	f012 ffdc 	bl	44774 <is_lfcr>
   317bc:	b178      	cbz	r0, 317de <at_parser_max_params_from_str+0xaa>
				index++;
   317be:	3401      	adds	r4, #1
				if (index == max_params) {
   317c0:	42bc      	cmp	r4, r7
   317c2:	d039      	beq.n	31838 <at_parser_max_params_from_str+0x104>
				if (at_parse_detect_type(&str, index) == -1) {
   317c4:	4621      	mov	r1, r4
   317c6:	a801      	add	r0, sp, #4
   317c8:	f7ff ff54 	bl	31674 <at_parse_detect_type>
   317cc:	1c42      	adds	r2, r0, #1
   317ce:	d01e      	beq.n	3180e <at_parser_max_params_from_str+0xda>
				if (at_parse_process_element(&str, index,
   317d0:	4632      	mov	r2, r6
   317d2:	4621      	mov	r1, r4
   317d4:	a801      	add	r0, sp, #4
   317d6:	f7ff fe4b 	bl	31470 <at_parse_process_element>
   317da:	1c43      	adds	r3, r0, #1
   317dc:	d017      	beq.n	3180e <at_parser_max_params_from_str+0xda>
			str++;
   317de:	9b01      	ldr	r3, [sp, #4]
   317e0:	3301      	adds	r3, #1
   317e2:	9301      	str	r3, [sp, #4]
		if (is_lfcr(*str)) {
   317e4:	9a01      	ldr	r2, [sp, #4]
   317e6:	7810      	ldrb	r0, [r2, #0]
   317e8:	f012 ffc4 	bl	44774 <is_lfcr>
   317ec:	b1f8      	cbz	r0, 3182e <at_parser_max_params_from_str+0xfa>
   317ee:	3201      	adds	r2, #1
			while (is_lfcr(str[++i])) {
   317f0:	7811      	ldrb	r1, [r2, #0]
   317f2:	4693      	mov	fp, r2
   317f4:	4608      	mov	r0, r1
   317f6:	3201      	adds	r2, #1
   317f8:	f012 ffbc 	bl	44774 <is_lfcr>
   317fc:	2800      	cmp	r0, #0
   317fe:	d1f7      	bne.n	317f0 <at_parser_max_params_from_str+0xbc>
	if (chr == AT_CMD_BUFFER_TERMINATOR) {
   31800:	b119      	cbz	r1, 3180a <at_parser_max_params_from_str+0xd6>
	if ((chr == AT_STANDARD_NOTIFICATION_PREFIX) ||
   31802:	292b      	cmp	r1, #43	; 0x2b
   31804:	d001      	beq.n	3180a <at_parser_max_params_from_str+0xd6>
   31806:	2925      	cmp	r1, #37	; 0x25
   31808:	d111      	bne.n	3182e <at_parser_max_params_from_str+0xfa>
				str += i;
   3180a:	f8cd b004 	str.w	fp, [sp, #4]
	*at_params_str = str;
   3180e:	9b01      	ldr	r3, [sp, #4]
	if (oversized) {
   31810:	b9a5      	cbnz	r5, 3183c <at_parser_max_params_from_str+0x108>
	if (chr == AT_CMD_BUFFER_TERMINATOR) {
   31812:	781a      	ldrb	r2, [r3, #0]
		return -EAGAIN;
   31814:	2a00      	cmp	r2, #0
   31816:	bf0c      	ite	eq
   31818:	2000      	moveq	r0, #0
   3181a:	f06f 000a 	mvnne.w	r0, #10

	err = at_parse_param(&at_params_str, list, max_params_count);

	if (next_param_str) {
   3181e:	f1b8 0f00 	cmp.w	r8, #0
   31822:	d001      	beq.n	31828 <at_parser_max_params_from_str+0xf4>
		*next_param_str = (char *)at_params_str;
   31824:	f8c8 3000 	str.w	r3, [r8]
	}

	return err;
}
   31828:	b003      	add	sp, #12
   3182a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		index++;
   3182e:	3401      	adds	r4, #1
			oversized = true;
   31830:	42bc      	cmp	r4, r7
   31832:	bf08      	it	eq
   31834:	2501      	moveq	r5, #1
   31836:	e79a      	b.n	3176e <at_parser_max_params_from_str+0x3a>
					oversized = true;
   31838:	4605      	mov	r5, r0
   3183a:	e7e8      	b.n	3180e <at_parser_max_params_from_str+0xda>
		return -E2BIG;
   3183c:	f06f 0006 	mvn.w	r0, #6
   31840:	e7ed      	b.n	3181e <at_parser_max_params_from_str+0xea>
		return -EINVAL;
   31842:	f06f 0015 	mvn.w	r0, #21
   31846:	e7ef      	b.n	31828 <at_parser_max_params_from_str+0xf4>
   31848:	2002a4e2 	.word	0x2002a4e2
   3184c:	0004d857 	.word	0x0004d857
   31850:	00024001 	.word	0x00024001

00031854 <at_params_get>:
}

/* Internal function. Parameter cannot be null. */
static struct at_param *at_params_get(const struct at_param_list *list,
				      size_t index)
{
   31854:	b538      	push	{r3, r4, r5, lr}
   31856:	460c      	mov	r4, r1
	__ASSERT(list != NULL, "Parameter list cannot be NULL.");
   31858:	4605      	mov	r5, r0
   3185a:	b960      	cbnz	r0, 31876 <at_params_get+0x22>
   3185c:	490a      	ldr	r1, [pc, #40]	; (31888 <at_params_get+0x34>)
   3185e:	232b      	movs	r3, #43	; 0x2b
   31860:	4a0a      	ldr	r2, [pc, #40]	; (3188c <at_params_get+0x38>)
   31862:	480b      	ldr	r0, [pc, #44]	; (31890 <at_params_get+0x3c>)
   31864:	f00e fecd 	bl	40602 <printk>
   31868:	480a      	ldr	r0, [pc, #40]	; (31894 <at_params_get+0x40>)
   3186a:	f00e feca 	bl	40602 <printk>
   3186e:	212b      	movs	r1, #43	; 0x2b
   31870:	4806      	ldr	r0, [pc, #24]	; (3188c <at_params_get+0x38>)
   31872:	f00e ff89 	bl	40788 <assert_post_action>

	if (index >= list->param_count) {
   31876:	682b      	ldr	r3, [r5, #0]
   31878:	42a3      	cmp	r3, r4
		return NULL;
	}

	struct at_param *param = list->params;

	return &param[index];
   3187a:	bf85      	ittet	hi
   3187c:	230c      	movhi	r3, #12
   3187e:	6868      	ldrhi	r0, [r5, #4]
		return NULL;
   31880:	2000      	movls	r0, #0
	return &param[index];
   31882:	fb03 0004 	mlahi	r0, r3, r4, r0
}
   31886:	bd38      	pop	{r3, r4, r5, pc}
   31888:	0004c844 	.word	0x0004c844
   3188c:	0004c816 	.word	0x0004c816
   31890:	0004764f 	.word	0x0004764f
   31894:	0004c858 	.word	0x0004c858

00031898 <at_param_size>:

/* Internal function. Parameter cannot be null. */
static size_t at_param_size(const struct at_param *param)
{
   31898:	b510      	push	{r4, lr}
	__ASSERT(param != NULL, "Parameter cannot be NULL.");
   3189a:	4604      	mov	r4, r0
   3189c:	b960      	cbnz	r0, 318b8 <at_param_size+0x20>
   3189e:	490e      	ldr	r1, [pc, #56]	; (318d8 <at_param_size+0x40>)
   318a0:	2339      	movs	r3, #57	; 0x39
   318a2:	4a0e      	ldr	r2, [pc, #56]	; (318dc <at_param_size+0x44>)
   318a4:	480e      	ldr	r0, [pc, #56]	; (318e0 <at_param_size+0x48>)
   318a6:	f00e feac 	bl	40602 <printk>
   318aa:	480e      	ldr	r0, [pc, #56]	; (318e4 <at_param_size+0x4c>)
   318ac:	f00e fea9 	bl	40602 <printk>
   318b0:	2139      	movs	r1, #57	; 0x39
   318b2:	480a      	ldr	r0, [pc, #40]	; (318dc <at_param_size+0x44>)
   318b4:	f00e ff68 	bl	40788 <assert_post_action>

	if (param->type == AT_PARAM_TYPE_NUM_SHORT) {
   318b8:	7823      	ldrb	r3, [r4, #0]
   318ba:	2b01      	cmp	r3, #1
   318bc:	d006      	beq.n	318cc <at_param_size+0x34>
		return sizeof(u16_t);
	} else if (param->type == AT_PARAM_TYPE_NUM_INT) {
   318be:	2b02      	cmp	r3, #2
   318c0:	d006      	beq.n	318d0 <at_param_size+0x38>
		return sizeof(u32_t);
	} else if ((param->type == AT_PARAM_TYPE_STRING) ||
   318c2:	3b03      	subs	r3, #3
   318c4:	2b01      	cmp	r3, #1
   318c6:	d805      	bhi.n	318d4 <at_param_size+0x3c>
		   (param->type == AT_PARAM_TYPE_ARRAY)) {
		return param->size;
   318c8:	6860      	ldr	r0, [r4, #4]
	}

	return 0;
}
   318ca:	bd10      	pop	{r4, pc}
		return sizeof(u16_t);
   318cc:	2002      	movs	r0, #2
   318ce:	e7fc      	b.n	318ca <at_param_size+0x32>
		return sizeof(u32_t);
   318d0:	2004      	movs	r0, #4
   318d2:	e7fa      	b.n	318ca <at_param_size+0x32>
	return 0;
   318d4:	2000      	movs	r0, #0
   318d6:	e7f8      	b.n	318ca <at_param_size+0x32>
   318d8:	0004c7e5 	.word	0x0004c7e5
   318dc:	0004c816 	.word	0x0004c816
   318e0:	0004764f 	.word	0x0004764f
   318e4:	0004c7fa 	.word	0x0004c7fa

000318e8 <at_param_clear>:
{
   318e8:	b510      	push	{r4, lr}
	__ASSERT(param != NULL, "Parameter cannot be NULL.");
   318ea:	4604      	mov	r4, r0
   318ec:	b960      	cbnz	r0, 31908 <at_param_clear+0x20>
   318ee:	490b      	ldr	r1, [pc, #44]	; (3191c <at_param_clear+0x34>)
   318f0:	231d      	movs	r3, #29
   318f2:	4a0b      	ldr	r2, [pc, #44]	; (31920 <at_param_clear+0x38>)
   318f4:	480b      	ldr	r0, [pc, #44]	; (31924 <at_param_clear+0x3c>)
   318f6:	f00e fe84 	bl	40602 <printk>
   318fa:	480b      	ldr	r0, [pc, #44]	; (31928 <at_param_clear+0x40>)
   318fc:	f00e fe81 	bl	40602 <printk>
   31900:	211d      	movs	r1, #29
   31902:	4807      	ldr	r0, [pc, #28]	; (31920 <at_param_clear+0x38>)
   31904:	f00e ff40 	bl	40788 <assert_post_action>
	if ((param->type == AT_PARAM_TYPE_STRING) ||
   31908:	7823      	ldrb	r3, [r4, #0]
   3190a:	3b03      	subs	r3, #3
   3190c:	2b01      	cmp	r3, #1
   3190e:	d802      	bhi.n	31916 <at_param_clear+0x2e>
		k_free(param->value.str_val);
   31910:	68a0      	ldr	r0, [r4, #8]
   31912:	f013 f8c4 	bl	44a9e <k_free>
	param->value.int_val = 0;
   31916:	2300      	movs	r3, #0
   31918:	60a3      	str	r3, [r4, #8]
}
   3191a:	bd10      	pop	{r4, pc}
   3191c:	0004c7e5 	.word	0x0004c7e5
   31920:	0004c816 	.word	0x0004c816
   31924:	0004764f 	.word	0x0004764f
   31928:	0004c7fa 	.word	0x0004c7fa

0003192c <at_params_list_clear>:
	list->param_count = max_params_count;
	return 0;
}

void at_params_list_clear(struct at_param_list *list)
{
   3192c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (list == NULL || list->params == NULL) {
   31930:	4605      	mov	r5, r0
   31932:	b158      	cbz	r0, 3194c <at_params_list_clear+0x20>
   31934:	6843      	ldr	r3, [r0, #4]
   31936:	b14b      	cbz	r3, 3194c <at_params_list_clear+0x20>
		return;
	}

	for (size_t i = 0; i < list->param_count; ++i) {
   31938:	2400      	movs	r4, #0
	__ASSERT(param != NULL, "Parameter cannot be NULL.");
   3193a:	f8df 8054 	ldr.w	r8, [pc, #84]	; 31990 <at_params_list_clear+0x64>
   3193e:	f8df a054 	ldr.w	sl, [pc, #84]	; 31994 <at_params_list_clear+0x68>
   31942:	f8df b054 	ldr.w	fp, [pc, #84]	; 31998 <at_params_list_clear+0x6c>
	for (size_t i = 0; i < list->param_count; ++i) {
   31946:	682b      	ldr	r3, [r5, #0]
   31948:	429c      	cmp	r4, r3
   3194a:	d301      	bcc.n	31950 <at_params_list_clear+0x24>
		struct at_param *params = list->params;

		at_param_clear(&params[i]);
		at_param_init(&params[i]);
	}
}
   3194c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		at_param_clear(&params[i]);
   31950:	270c      	movs	r7, #12
   31952:	4367      	muls	r7, r4
   31954:	f8d5 9004 	ldr.w	r9, [r5, #4]
   31958:	eb09 0607 	add.w	r6, r9, r7
   3195c:	4630      	mov	r0, r6
   3195e:	f7ff ffc3 	bl	318e8 <at_param_clear>
	__ASSERT(param != NULL, "Parameter cannot be NULL.");
   31962:	b966      	cbnz	r6, 3197e <at_params_list_clear+0x52>
   31964:	4651      	mov	r1, sl
   31966:	2314      	movs	r3, #20
   31968:	4642      	mov	r2, r8
   3196a:	4658      	mov	r0, fp
   3196c:	f00e fe49 	bl	40602 <printk>
   31970:	4806      	ldr	r0, [pc, #24]	; (3198c <at_params_list_clear+0x60>)
   31972:	f00e fe46 	bl	40602 <printk>
   31976:	2114      	movs	r1, #20
   31978:	4640      	mov	r0, r8
   3197a:	f00e ff05 	bl	40788 <assert_post_action>
   3197e:	2300      	movs	r3, #0
	for (size_t i = 0; i < list->param_count; ++i) {
   31980:	3401      	adds	r4, #1
   31982:	f849 3007 	str.w	r3, [r9, r7]
   31986:	6073      	str	r3, [r6, #4]
   31988:	60b3      	str	r3, [r6, #8]
   3198a:	e7dc      	b.n	31946 <at_params_list_clear+0x1a>
   3198c:	0004c7fa 	.word	0x0004c7fa
   31990:	0004c816 	.word	0x0004c816
   31994:	0004c7e5 	.word	0x0004c7e5
   31998:	0004764f 	.word	0x0004764f

0003199c <w_lte_lc_init>:
		k_sem_give(&link);
	}
}

static int w_lte_lc_init(void)
{
   3199c:	b508      	push	{r3, lr}
	if (at_cmd_write(nw_mode_preferred, NULL, 0, NULL) != 0) {
   3199e:	2300      	movs	r3, #0
   319a0:	4807      	ldr	r0, [pc, #28]	; (319c0 <w_lte_lc_init+0x24>)
   319a2:	461a      	mov	r2, r3
   319a4:	4619      	mov	r1, r3
   319a6:	f7ff fbdf 	bl	31168 <at_cmd_write>
   319aa:	4603      	mov	r3, r0
   319ac:	b928      	cbnz	r0, 319ba <w_lte_lc_init+0x1e>
#if defined(CONFIG_BSD_LIBRARY_TRACE_ENABLED)
	if (at_cmd_write(mdm_trace, NULL, 0, NULL) != 0) {
		return -EIO;
	}
#endif
	if (at_cmd_write(cereg_5_subscribe, NULL, 0, NULL) != 0) {
   319ae:	4602      	mov	r2, r0
   319b0:	4601      	mov	r1, r0
   319b2:	4804      	ldr	r0, [pc, #16]	; (319c4 <w_lte_lc_init+0x28>)
   319b4:	f7ff fbd8 	bl	31168 <at_cmd_write>
   319b8:	b108      	cbz	r0, 319be <w_lte_lc_init+0x22>
		return -EIO;
   319ba:	f06f 0004 	mvn.w	r0, #4
	}
	LOG_INF("PDN Auth: %s", log_strdup(cgauth));
#endif

	return 0;
}
   319be:	bd08      	pop	{r3, pc}
   319c0:	0004c8ef 	.word	0x0004c8ef
   319c4:	0004c8c3 	.word	0x0004c8c3

000319c8 <parse_nw_reg_status>:
static int parse_nw_reg_status(const char *at_response,
			       enum lte_lc_nw_reg_status *status,
			       size_t reg_status_index)
{
	int err, reg_status;
	struct at_param_list resp_list = {0};
   319c8:	2300      	movs	r3, #0
{
   319ca:	b5f0      	push	{r4, r5, r6, r7, lr}
   319cc:	b087      	sub	sp, #28
	char  response_prefix[sizeof(AT_CEREG_RESPONSE_PREFIX)] = {0};
   319ce:	9302      	str	r3, [sp, #8]
	struct at_param_list resp_list = {0};
   319d0:	e9cd 3304 	strd	r3, r3, [sp, #16]
	char  response_prefix[sizeof(AT_CEREG_RESPONSE_PREFIX)] = {0};
   319d4:	f8cd 300b 	str.w	r3, [sp, #11]
	size_t response_prefix_len = sizeof(response_prefix);
   319d8:	2307      	movs	r3, #7
{
   319da:	460d      	mov	r5, r1
   319dc:	4617      	mov	r7, r2
	size_t response_prefix_len = sizeof(response_prefix);
   319de:	9301      	str	r3, [sp, #4]

	if ((at_response == NULL) || (status == NULL)) {
   319e0:	4606      	mov	r6, r0
   319e2:	2800      	cmp	r0, #0
   319e4:	f000 8097 	beq.w	31b16 <parse_nw_reg_status+0x14e>
   319e8:	2900      	cmp	r1, #0
   319ea:	f000 8094 	beq.w	31b16 <parse_nw_reg_status+0x14e>
		return -EINVAL;
	}

	err = at_params_list_init(&resp_list, AT_CEREG_PARAMS_COUNT_MAX);
   319ee:	210a      	movs	r1, #10
   319f0:	a804      	add	r0, sp, #16
   319f2:	f012 fed6 	bl	447a2 <at_params_list_init>
	if (err) {
   319f6:	4604      	mov	r4, r0
   319f8:	b1a8      	cbz	r0, 31a26 <parse_nw_reg_status+0x5e>
		LOG_ERR("Could not init AT params list, error: %d", err);
   319fa:	4b48      	ldr	r3, [pc, #288]	; (31b1c <parse_nw_reg_status+0x154>)
   319fc:	681b      	ldr	r3, [r3, #0]
   319fe:	075d      	lsls	r5, r3, #29
   31a00:	d00e      	beq.n	31a20 <parse_nw_reg_status+0x58>
   31a02:	2301      	movs	r3, #1
   31a04:	f04f 0200 	mov.w	r2, #0
   31a08:	4945      	ldr	r1, [pc, #276]	; (31b20 <parse_nw_reg_status+0x158>)
   31a0a:	f363 0207 	bfi	r2, r3, #0, #8
   31a0e:	4b45      	ldr	r3, [pc, #276]	; (31b24 <parse_nw_reg_status+0x15c>)
   31a10:	1a5b      	subs	r3, r3, r1
   31a12:	08db      	lsrs	r3, r3, #3
   31a14:	4601      	mov	r1, r0
   31a16:	f363 128f 	bfi	r2, r3, #6, #10
   31a1a:	4843      	ldr	r0, [pc, #268]	; (31b28 <parse_nw_reg_status+0x160>)
   31a1c:	f00f f81e 	bl	40a5c <log_1>

clean_exit:
	at_params_list_free(&resp_list);

	return err;
}
   31a20:	4620      	mov	r0, r4
   31a22:	b007      	add	sp, #28
   31a24:	bdf0      	pop	{r4, r5, r6, r7, pc}
	err = at_parser_max_params_from_str(at_response,
   31a26:	4601      	mov	r1, r0
   31a28:	230a      	movs	r3, #10
   31a2a:	aa04      	add	r2, sp, #16
   31a2c:	4630      	mov	r0, r6
   31a2e:	f7ff fe81 	bl	31734 <at_parser_max_params_from_str>
	if (err) {
   31a32:	4604      	mov	r4, r0
   31a34:	b1b0      	cbz	r0, 31a64 <parse_nw_reg_status+0x9c>
		LOG_ERR("Could not parse AT+CEREG response, error: %d", err);
   31a36:	4b39      	ldr	r3, [pc, #228]	; (31b1c <parse_nw_reg_status+0x154>)
   31a38:	681b      	ldr	r3, [r3, #0]
   31a3a:	0758      	lsls	r0, r3, #29
   31a3c:	d00e      	beq.n	31a5c <parse_nw_reg_status+0x94>
   31a3e:	2301      	movs	r3, #1
   31a40:	f04f 0200 	mov.w	r2, #0
   31a44:	4936      	ldr	r1, [pc, #216]	; (31b20 <parse_nw_reg_status+0x158>)
   31a46:	f363 0207 	bfi	r2, r3, #0, #8
   31a4a:	4b36      	ldr	r3, [pc, #216]	; (31b24 <parse_nw_reg_status+0x15c>)
   31a4c:	4837      	ldr	r0, [pc, #220]	; (31b2c <parse_nw_reg_status+0x164>)
   31a4e:	1a5b      	subs	r3, r3, r1
   31a50:	4621      	mov	r1, r4
   31a52:	08db      	lsrs	r3, r3, #3
   31a54:	f363 128f 	bfi	r2, r3, #6, #10
		LOG_ERR("Could not get response prefix, error: %d", err);
   31a58:	f00f f800 	bl	40a5c <log_1>
	at_params_list_free(&resp_list);
   31a5c:	a804      	add	r0, sp, #16
   31a5e:	f012 feb3 	bl	447c8 <at_params_list_free>
	return err;
   31a62:	e7dd      	b.n	31a20 <parse_nw_reg_status+0x58>
	err = at_params_string_get(&resp_list,
   31a64:	4601      	mov	r1, r0
   31a66:	ab01      	add	r3, sp, #4
   31a68:	aa02      	add	r2, sp, #8
   31a6a:	a804      	add	r0, sp, #16
   31a6c:	f012 ff71 	bl	44952 <at_params_string_get>
	if (err) {
   31a70:	4604      	mov	r4, r0
   31a72:	b188      	cbz	r0, 31a98 <parse_nw_reg_status+0xd0>
		LOG_ERR("Could not get response prefix, error: %d", err);
   31a74:	4b29      	ldr	r3, [pc, #164]	; (31b1c <parse_nw_reg_status+0x154>)
   31a76:	681b      	ldr	r3, [r3, #0]
   31a78:	0759      	lsls	r1, r3, #29
   31a7a:	d0ef      	beq.n	31a5c <parse_nw_reg_status+0x94>
   31a7c:	2301      	movs	r3, #1
   31a7e:	f04f 0200 	mov.w	r2, #0
   31a82:	4927      	ldr	r1, [pc, #156]	; (31b20 <parse_nw_reg_status+0x158>)
   31a84:	f363 0207 	bfi	r2, r3, #0, #8
   31a88:	4b26      	ldr	r3, [pc, #152]	; (31b24 <parse_nw_reg_status+0x15c>)
   31a8a:	1a5b      	subs	r3, r3, r1
   31a8c:	08db      	lsrs	r3, r3, #3
   31a8e:	4601      	mov	r1, r0
   31a90:	f363 128f 	bfi	r2, r3, #6, #10
   31a94:	4826      	ldr	r0, [pc, #152]	; (31b30 <parse_nw_reg_status+0x168>)
   31a96:	e7df      	b.n	31a58 <parse_nw_reg_status+0x90>
	if (!response_is_valid(response_prefix, response_prefix_len,
   31a98:	4a26      	ldr	r2, [pc, #152]	; (31b34 <parse_nw_reg_status+0x16c>)
   31a9a:	9901      	ldr	r1, [sp, #4]
   31a9c:	a802      	add	r0, sp, #8
   31a9e:	f012 ff96 	bl	449ce <response_is_valid>
   31aa2:	2800      	cmp	r0, #0
   31aa4:	d0da      	beq.n	31a5c <parse_nw_reg_status+0x94>
	err = at_params_int_get(&resp_list, reg_status_index,
   31aa6:	466a      	mov	r2, sp
   31aa8:	4639      	mov	r1, r7
   31aaa:	a804      	add	r0, sp, #16
   31aac:	f012 ff3a 	bl	44924 <at_params_int_get>
	if (err) {
   31ab0:	4604      	mov	r4, r0
   31ab2:	b188      	cbz	r0, 31ad8 <parse_nw_reg_status+0x110>
		LOG_ERR("Could not get registration status, error: %d", err);
   31ab4:	4b19      	ldr	r3, [pc, #100]	; (31b1c <parse_nw_reg_status+0x154>)
   31ab6:	681b      	ldr	r3, [r3, #0]
   31ab8:	075a      	lsls	r2, r3, #29
   31aba:	d0cf      	beq.n	31a5c <parse_nw_reg_status+0x94>
   31abc:	2301      	movs	r3, #1
   31abe:	f04f 0200 	mov.w	r2, #0
   31ac2:	4917      	ldr	r1, [pc, #92]	; (31b20 <parse_nw_reg_status+0x158>)
   31ac4:	f363 0207 	bfi	r2, r3, #0, #8
   31ac8:	4b16      	ldr	r3, [pc, #88]	; (31b24 <parse_nw_reg_status+0x15c>)
   31aca:	1a5b      	subs	r3, r3, r1
   31acc:	08db      	lsrs	r3, r3, #3
   31ace:	4601      	mov	r1, r0
   31ad0:	f363 128f 	bfi	r2, r3, #6, #10
   31ad4:	4818      	ldr	r0, [pc, #96]	; (31b38 <parse_nw_reg_status+0x170>)
   31ad6:	e7bf      	b.n	31a58 <parse_nw_reg_status+0x90>
	switch (reg_status) {
   31ad8:	9900      	ldr	r1, [sp, #0]
   31ada:	2908      	cmp	r1, #8
   31adc:	d002      	beq.n	31ae4 <parse_nw_reg_status+0x11c>
   31ade:	dc03      	bgt.n	31ae8 <parse_nw_reg_status+0x120>
   31ae0:	2905      	cmp	r1, #5
   31ae2:	d803      	bhi.n	31aec <parse_nw_reg_status+0x124>
		*status = reg_status;
   31ae4:	7029      	strb	r1, [r5, #0]
		LOG_DBG("Network registration status: %d", reg_status);
   31ae6:	e7b9      	b.n	31a5c <parse_nw_reg_status+0x94>
	switch (reg_status) {
   31ae8:	295a      	cmp	r1, #90	; 0x5a
   31aea:	d0fb      	beq.n	31ae4 <parse_nw_reg_status+0x11c>
		LOG_ERR("Invalid network registration status: %d", reg_status);
   31aec:	4b0b      	ldr	r3, [pc, #44]	; (31b1c <parse_nw_reg_status+0x154>)
   31aee:	681b      	ldr	r3, [r3, #0]
   31af0:	075b      	lsls	r3, r3, #29
   31af2:	d00d      	beq.n	31b10 <parse_nw_reg_status+0x148>
   31af4:	2301      	movs	r3, #1
   31af6:	f04f 0200 	mov.w	r2, #0
   31afa:	4809      	ldr	r0, [pc, #36]	; (31b20 <parse_nw_reg_status+0x158>)
   31afc:	f363 0207 	bfi	r2, r3, #0, #8
   31b00:	4b08      	ldr	r3, [pc, #32]	; (31b24 <parse_nw_reg_status+0x15c>)
   31b02:	1a1b      	subs	r3, r3, r0
   31b04:	08db      	lsrs	r3, r3, #3
   31b06:	f363 128f 	bfi	r2, r3, #6, #10
   31b0a:	480c      	ldr	r0, [pc, #48]	; (31b3c <parse_nw_reg_status+0x174>)
   31b0c:	f00e ffa6 	bl	40a5c <log_1>
		err = -EIO;
   31b10:	f06f 0404 	mvn.w	r4, #4
   31b14:	e7a2      	b.n	31a5c <parse_nw_reg_status+0x94>
		return -EINVAL;
   31b16:	f06f 0415 	mvn.w	r4, #21
   31b1a:	e781      	b.n	31a20 <parse_nw_reg_status+0x58>
   31b1c:	20032ae0 	.word	0x20032ae0
   31b20:	00045f08 	.word	0x00045f08
   31b24:	00045fc0 	.word	0x00045fc0
   31b28:	0004c910 	.word	0x0004c910
   31b2c:	0004c939 	.word	0x0004c939
   31b30:	0004c966 	.word	0x0004c966
   31b34:	0004c98f 	.word	0x0004c98f
   31b38:	0004c996 	.word	0x0004c996
   31b3c:	0004c9c3 	.word	0x0004c9c3

00031b40 <at_handler>:
{
   31b40:	b507      	push	{r0, r1, r2, lr}
	if (response == NULL) {
   31b42:	4608      	mov	r0, r1
   31b44:	b9a1      	cbnz	r1, 31b70 <at_handler+0x30>
		LOG_ERR("Response buffer is NULL-pointer");
   31b46:	4b1b      	ldr	r3, [pc, #108]	; (31bb4 <at_handler+0x74>)
   31b48:	681b      	ldr	r3, [r3, #0]
   31b4a:	075a      	lsls	r2, r3, #29
   31b4c:	d00d      	beq.n	31b6a <at_handler+0x2a>
   31b4e:	2301      	movs	r3, #1
   31b50:	f04f 0100 	mov.w	r1, #0
   31b54:	4a18      	ldr	r2, [pc, #96]	; (31bb8 <at_handler+0x78>)
   31b56:	f363 0107 	bfi	r1, r3, #0, #8
   31b5a:	4b18      	ldr	r3, [pc, #96]	; (31bbc <at_handler+0x7c>)
   31b5c:	4818      	ldr	r0, [pc, #96]	; (31bc0 <at_handler+0x80>)
   31b5e:	1a9b      	subs	r3, r3, r2
   31b60:	08db      	lsrs	r3, r3, #3
   31b62:	f363 118f 	bfi	r1, r3, #6, #10
		LOG_ERR("Could not get network registration status");
   31b66:	f00e ff6c 	bl	40a42 <log_0>
}
   31b6a:	b003      	add	sp, #12
   31b6c:	f85d fb04 	ldr.w	pc, [sp], #4
	err = parse_nw_reg_status(response, &status, AT_CEREG_REG_STATUS_INDEX);
   31b70:	2201      	movs	r2, #1
   31b72:	f10d 0107 	add.w	r1, sp, #7
   31b76:	f7ff ff27 	bl	319c8 <parse_nw_reg_status>
	if (err) {
   31b7a:	b180      	cbz	r0, 31b9e <at_handler+0x5e>
		LOG_ERR("Could not get network registration status");
   31b7c:	4b0d      	ldr	r3, [pc, #52]	; (31bb4 <at_handler+0x74>)
   31b7e:	681b      	ldr	r3, [r3, #0]
   31b80:	075b      	lsls	r3, r3, #29
   31b82:	d0f2      	beq.n	31b6a <at_handler+0x2a>
   31b84:	2301      	movs	r3, #1
   31b86:	f04f 0100 	mov.w	r1, #0
   31b8a:	4a0b      	ldr	r2, [pc, #44]	; (31bb8 <at_handler+0x78>)
   31b8c:	f363 0107 	bfi	r1, r3, #0, #8
   31b90:	4b0a      	ldr	r3, [pc, #40]	; (31bbc <at_handler+0x7c>)
   31b92:	480c      	ldr	r0, [pc, #48]	; (31bc4 <at_handler+0x84>)
   31b94:	1a9b      	subs	r3, r3, r2
   31b96:	08db      	lsrs	r3, r3, #3
   31b98:	f363 118f 	bfi	r1, r3, #6, #10
   31b9c:	e7e3      	b.n	31b66 <at_handler+0x26>
	if ((status == LTE_LC_NW_REG_REGISTERED_HOME) ||
   31b9e:	f89d 3007 	ldrb.w	r3, [sp, #7]
   31ba2:	f003 03fb 	and.w	r3, r3, #251	; 0xfb
   31ba6:	2b01      	cmp	r3, #1
   31ba8:	d1df      	bne.n	31b6a <at_handler+0x2a>
	z_impl_k_sem_give(sem);
   31baa:	4807      	ldr	r0, [pc, #28]	; (31bc8 <at_handler+0x88>)
   31bac:	f00b fc6a 	bl	3d484 <z_impl_k_sem_give>
   31bb0:	e7db      	b.n	31b6a <at_handler+0x2a>
   31bb2:	bf00      	nop
   31bb4:	20032ae0 	.word	0x20032ae0
   31bb8:	00045f08 	.word	0x00045f08
   31bbc:	00045fc0 	.word	0x00045fc0
   31bc0:	0004c879 	.word	0x0004c879
   31bc4:	0004c899 	.word	0x0004c899
   31bc8:	20024e34 	.word	0x20024e34

00031bcc <w_lte_lc_connect>:
{
   31bcc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	return z_impl_k_sem_init(sem, initial_count, limit);
   31bd0:	2201      	movs	r2, #1
   31bd2:	2100      	movs	r1, #0
   31bd4:	4845      	ldr	r0, [pc, #276]	; (31cec <w_lte_lc_connect+0x120>)
   31bd6:	f012 ffe1 	bl	44b9c <z_impl_k_sem_init>
	rc = at_notif_register_handler(NULL, at_handler);
   31bda:	4945      	ldr	r1, [pc, #276]	; (31cf0 <w_lte_lc_connect+0x124>)
   31bdc:	2000      	movs	r0, #0
   31bde:	f7ff fb83 	bl	312e8 <at_notif_register_handler>
	if (rc != 0) {
   31be2:	4604      	mov	r4, r0
   31be4:	2800      	cmp	r0, #0
   31be6:	d151      	bne.n	31c8c <w_lte_lc_connect+0xc0>
	const char *current_network_mode = nw_mode_preferred;
   31be8:	4e42      	ldr	r6, [pc, #264]	; (31cf4 <w_lte_lc_connect+0x128>)
   31bea:	4d43      	ldr	r5, [pc, #268]	; (31cf8 <w_lte_lc_connect+0x12c>)
   31bec:	46b2      	mov	sl, r6
			LOG_INF("Network connection attempt timed out");
   31bee:	4b43      	ldr	r3, [pc, #268]	; (31cfc <w_lte_lc_connect+0x130>)
   31bf0:	f8df 9120 	ldr.w	r9, [pc, #288]	; 31d14 <w_lte_lc_connect+0x148>
   31bf4:	1aed      	subs	r5, r5, r3
   31bf6:	f3c5 05c9 	ubfx	r5, r5, #3, #10
		if (at_cmd_write(normal, NULL, 0, NULL) != 0) {
   31bfa:	f8df b124 	ldr.w	fp, [pc, #292]	; 31d20 <w_lte_lc_connect+0x154>
		if (at_cmd_write(current_network_mode, NULL, 0, NULL) != 0) {
   31bfe:	2300      	movs	r3, #0
   31c00:	4630      	mov	r0, r6
   31c02:	461a      	mov	r2, r3
   31c04:	4619      	mov	r1, r3
   31c06:	f7ff faaf 	bl	31168 <at_cmd_write>
   31c0a:	4603      	mov	r3, r0
   31c0c:	2800      	cmp	r0, #0
   31c0e:	d153      	bne.n	31cb8 <w_lte_lc_connect+0xec>
		if (at_cmd_write(normal, NULL, 0, NULL) != 0) {
   31c10:	4602      	mov	r2, r0
   31c12:	4601      	mov	r1, r0
   31c14:	4658      	mov	r0, fp
   31c16:	f7ff faa7 	bl	31168 <at_cmd_write>
   31c1a:	2800      	cmp	r0, #0
   31c1c:	d14c      	bne.n	31cb8 <w_lte_lc_connect+0xec>
	return z_impl_k_sem_take(sem, timeout);
   31c1e:	4938      	ldr	r1, [pc, #224]	; (31d00 <w_lte_lc_connect+0x134>)
   31c20:	4832      	ldr	r0, [pc, #200]	; (31cec <w_lte_lc_connect+0x120>)
   31c22:	f00b fc79 	bl	3d518 <z_impl_k_sem_take>
		if (err == -EAGAIN) {
   31c26:	f110 0f0b 	cmn.w	r0, #11
   31c2a:	4604      	mov	r4, r0
   31c2c:	d146      	bne.n	31cbc <w_lte_lc_connect+0xf0>
			LOG_INF("Network connection attempt timed out");
   31c2e:	f8d9 3000 	ldr.w	r3, [r9]
   31c32:	f003 0307 	and.w	r3, r3, #7
   31c36:	2b02      	cmp	r3, #2
   31c38:	d90b      	bls.n	31c52 <w_lte_lc_connect+0x86>
   31c3a:	f028 033f 	bic.w	r3, r8, #63	; 0x3f
   31c3e:	f043 0303 	orr.w	r3, r3, #3
   31c42:	f363 0807 	bfi	r8, r3, #0, #8
   31c46:	f365 188f 	bfi	r8, r5, #6, #10
   31c4a:	4641      	mov	r1, r8
   31c4c:	482d      	ldr	r0, [pc, #180]	; (31d04 <w_lte_lc_connect+0x138>)
   31c4e:	f00e fef8 	bl	40a42 <log_0>
			if (IS_ENABLED(CONFIG_LTE_NETWORK_USE_FALLBACK) &&
   31c52:	4556      	cmp	r6, sl
   31c54:	d146      	bne.n	31ce4 <w_lte_lc_connect+0x118>
				if (at_cmd_write(offline, NULL, 0, NULL) != 0) {
   31c56:	2300      	movs	r3, #0
   31c58:	482b      	ldr	r0, [pc, #172]	; (31d08 <w_lte_lc_connect+0x13c>)
   31c5a:	461a      	mov	r2, r3
   31c5c:	4619      	mov	r1, r3
   31c5e:	f7ff fa83 	bl	31168 <at_cmd_write>
   31c62:	bb48      	cbnz	r0, 31cb8 <w_lte_lc_connect+0xec>
				LOG_INF("Using fallback network mode");
   31c64:	f8d9 3000 	ldr.w	r3, [r9]
   31c68:	4e28      	ldr	r6, [pc, #160]	; (31d0c <w_lte_lc_connect+0x140>)
   31c6a:	f003 0307 	and.w	r3, r3, #7
   31c6e:	2b02      	cmp	r3, #2
   31c70:	d9c5      	bls.n	31bfe <w_lte_lc_connect+0x32>
   31c72:	f027 033f 	bic.w	r3, r7, #63	; 0x3f
   31c76:	f043 0303 	orr.w	r3, r3, #3
   31c7a:	f363 0707 	bfi	r7, r3, #0, #8
   31c7e:	f365 178f 	bfi	r7, r5, #6, #10
   31c82:	4639      	mov	r1, r7
   31c84:	4822      	ldr	r0, [pc, #136]	; (31d10 <w_lte_lc_connect+0x144>)
   31c86:	f00e fedc 	bl	40a42 <log_0>
   31c8a:	e7b6      	b.n	31bfa <w_lte_lc_connect+0x2e>
		LOG_ERR("Can't register handler rc=%d", rc);
   31c8c:	4b21      	ldr	r3, [pc, #132]	; (31d14 <w_lte_lc_connect+0x148>)
   31c8e:	681b      	ldr	r3, [r3, #0]
   31c90:	075a      	lsls	r2, r3, #29
   31c92:	d00e      	beq.n	31cb2 <w_lte_lc_connect+0xe6>
   31c94:	2301      	movs	r3, #1
   31c96:	f04f 0200 	mov.w	r2, #0
   31c9a:	4918      	ldr	r1, [pc, #96]	; (31cfc <w_lte_lc_connect+0x130>)
   31c9c:	f363 0207 	bfi	r2, r3, #0, #8
   31ca0:	4b15      	ldr	r3, [pc, #84]	; (31cf8 <w_lte_lc_connect+0x12c>)
   31ca2:	1a5b      	subs	r3, r3, r1
   31ca4:	08db      	lsrs	r3, r3, #3
   31ca6:	4601      	mov	r1, r0
   31ca8:	481b      	ldr	r0, [pc, #108]	; (31d18 <w_lte_lc_connect+0x14c>)
   31caa:	f363 128f 	bfi	r2, r3, #6, #10
		LOG_ERR("Can't de-register handler rc=%d", rc);
   31cae:	f00e fed5 	bl	40a5c <log_1>
}
   31cb2:	4620      	mov	r0, r4
   31cb4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
			err = -EIO;
   31cb8:	f06f 0404 	mvn.w	r4, #4
	rc = at_notif_deregister_handler(NULL, at_handler);
   31cbc:	490c      	ldr	r1, [pc, #48]	; (31cf0 <w_lte_lc_connect+0x124>)
   31cbe:	2000      	movs	r0, #0
   31cc0:	f7ff fb64 	bl	3138c <at_notif_deregister_handler>
	if (rc != 0) {
   31cc4:	4601      	mov	r1, r0
   31cc6:	2800      	cmp	r0, #0
   31cc8:	d0f3      	beq.n	31cb2 <w_lte_lc_connect+0xe6>
		LOG_ERR("Can't de-register handler rc=%d", rc);
   31cca:	4b12      	ldr	r3, [pc, #72]	; (31d14 <w_lte_lc_connect+0x148>)
   31ccc:	681b      	ldr	r3, [r3, #0]
   31cce:	075b      	lsls	r3, r3, #29
   31cd0:	d0ef      	beq.n	31cb2 <w_lte_lc_connect+0xe6>
   31cd2:	f04f 0200 	mov.w	r2, #0
   31cd6:	2301      	movs	r3, #1
   31cd8:	f363 0207 	bfi	r2, r3, #0, #8
   31cdc:	f365 128f 	bfi	r2, r5, #6, #10
   31ce0:	480e      	ldr	r0, [pc, #56]	; (31d1c <w_lte_lc_connect+0x150>)
   31ce2:	e7e4      	b.n	31cae <w_lte_lc_connect+0xe2>
				err = -ETIMEDOUT;
   31ce4:	f06f 0473 	mvn.w	r4, #115	; 0x73
   31ce8:	e7e8      	b.n	31cbc <w_lte_lc_connect+0xf0>
   31cea:	bf00      	nop
   31cec:	20024e34 	.word	0x20024e34
   31cf0:	00031b41 	.word	0x00031b41
   31cf4:	0004c8ef 	.word	0x0004c8ef
   31cf8:	00045fc0 	.word	0x00045fc0
   31cfc:	00045f08 	.word	0x00045f08
   31d00:	000927c0 	.word	0x000927c0
   31d04:	0004ca0f 	.word	0x0004ca0f
   31d08:	0004c906 	.word	0x0004c906
   31d0c:	0004c8d8 	.word	0x0004c8d8
   31d10:	0004ca34 	.word	0x0004ca34
   31d14:	20032ae0 	.word	0x20032ae0
   31d18:	0004c9f2 	.word	0x0004c9f2
   31d1c:	0004ca50 	.word	0x0004ca50
   31d20:	0004c8ce 	.word	0x0004c8ce

00031d24 <modem_info_parse.isra.0>:
		buf[i] = next_char;
		buf[i + 1] = current_char;
	}
}

static int modem_info_parse(const struct modem_info_data *modem_data,
   31d24:	b538      	push	{r3, r4, r5, lr}
   31d26:	4605      	mov	r5, r0
			    const char *buf)
{
	int err;
	u32_t param_index;

	err = at_parser_max_params_from_str(buf, NULL, &m_param_list,
   31d28:	4a08      	ldr	r2, [pc, #32]	; (31d4c <modem_info_parse.isra.0+0x28>)
static int modem_info_parse(const struct modem_info_data *modem_data,
   31d2a:	4608      	mov	r0, r1
	err = at_parser_max_params_from_str(buf, NULL, &m_param_list,
   31d2c:	782b      	ldrb	r3, [r5, #0]
   31d2e:	2100      	movs	r1, #0
   31d30:	f7ff fd00 	bl	31734 <at_parser_max_params_from_str>
					    modem_data->param_count);

	if (err != 0) {
   31d34:	4604      	mov	r4, r0
   31d36:	b938      	cbnz	r0, 31d48 <modem_info_parse.isra.0+0x24>
		return err;
	}

	param_index = at_params_valid_count_get(&m_param_list);
   31d38:	4804      	ldr	r0, [pc, #16]	; (31d4c <modem_info_parse.isra.0+0x28>)
   31d3a:	f012 fe31 	bl	449a0 <at_params_valid_count_get>
	if (param_index > modem_data->param_count) {
   31d3e:	782b      	ldrb	r3, [r5, #0]
		return -EAGAIN;
   31d40:	4298      	cmp	r0, r3
   31d42:	bf88      	it	hi
   31d44:	f06f 040a 	mvnhi.w	r4, #10
	}

	return err;
}
   31d48:	4620      	mov	r0, r4
   31d4a:	bd38      	pop	{r3, r4, r5, pc}
   31d4c:	20024e4c 	.word	0x20024e4c

00031d50 <modem_info_rsrp_subscribe_handler>:

	return len <= 0 ? -ENOTSUP : len;
}

static void modem_info_rsrp_subscribe_handler(void *context, const char *response)
{
   31d50:	b513      	push	{r0, r1, r4, lr}
   31d52:	460c      	mov	r4, r1
	ARG_UNUSED(context);

	u16_t param_value;
	int err;

	if (!is_cesq_notification(response, strlen(response))) {
   31d54:	4608      	mov	r0, r1
   31d56:	f7eb f9df 	bl	1d118 <strlen>
	return strstr(buf, AT_CMD_CESQ_RESP) ? true : false;
   31d5a:	491f      	ldr	r1, [pc, #124]	; (31dd8 <modem_info_rsrp_subscribe_handler+0x88>)
   31d5c:	4620      	mov	r0, r4
   31d5e:	f013 fa38 	bl	451d2 <strstr>
	if (!is_cesq_notification(response, strlen(response))) {
   31d62:	b1b8      	cbz	r0, 31d94 <modem_info_rsrp_subscribe_handler+0x44>
		return;
	}

	err = modem_info_parse(modem_data[MODEM_INFO_RSRP],
   31d64:	4621      	mov	r1, r4
   31d66:	481d      	ldr	r0, [pc, #116]	; (31ddc <modem_info_rsrp_subscribe_handler+0x8c>)
   31d68:	f7ff ffdc 	bl	31d24 <modem_info_parse.isra.0>
			       response);
	if (err != 0) {
   31d6c:	4601      	mov	r1, r0
   31d6e:	b198      	cbz	r0, 31d98 <modem_info_rsrp_subscribe_handler+0x48>
		LOG_ERR("modem_info_parse failed to parse "
   31d70:	4b1b      	ldr	r3, [pc, #108]	; (31de0 <modem_info_rsrp_subscribe_handler+0x90>)
   31d72:	681b      	ldr	r3, [r3, #0]
   31d74:	075a      	lsls	r2, r3, #29
   31d76:	d00d      	beq.n	31d94 <modem_info_rsrp_subscribe_handler+0x44>
   31d78:	2301      	movs	r3, #1
   31d7a:	f04f 0200 	mov.w	r2, #0
   31d7e:	4819      	ldr	r0, [pc, #100]	; (31de4 <modem_info_rsrp_subscribe_handler+0x94>)
   31d80:	f363 0207 	bfi	r2, r3, #0, #8
   31d84:	4b18      	ldr	r3, [pc, #96]	; (31de8 <modem_info_rsrp_subscribe_handler+0x98>)
   31d86:	1a1b      	subs	r3, r3, r0
   31d88:	08db      	lsrs	r3, r3, #3
   31d8a:	4818      	ldr	r0, [pc, #96]	; (31dec <modem_info_rsrp_subscribe_handler+0x9c>)
   31d8c:	f363 128f 	bfi	r2, r3, #6, #10

	err = at_params_short_get(&m_param_list,
				  modem_data[MODEM_INFO_RSRP]->param_index,
				  &param_value);
	if (err != 0) {
		LOG_ERR("Failed to obtain RSRP value, %d", err);
   31d90:	f00e fe64 	bl	40a5c <log_1>
		return;
	}

	modem_info_rsrp_cb(param_value);
}
   31d94:	b002      	add	sp, #8
   31d96:	bd10      	pop	{r4, pc}
	err = at_params_short_get(&m_param_list,
   31d98:	2101      	movs	r1, #1
   31d9a:	f10d 0206 	add.w	r2, sp, #6
   31d9e:	4814      	ldr	r0, [pc, #80]	; (31df0 <modem_info_rsrp_subscribe_handler+0xa0>)
   31da0:	f012 fdaa 	bl	448f8 <at_params_short_get>
	if (err != 0) {
   31da4:	4601      	mov	r1, r0
   31da6:	b180      	cbz	r0, 31dca <modem_info_rsrp_subscribe_handler+0x7a>
		LOG_ERR("Failed to obtain RSRP value, %d", err);
   31da8:	4b0d      	ldr	r3, [pc, #52]	; (31de0 <modem_info_rsrp_subscribe_handler+0x90>)
   31daa:	681b      	ldr	r3, [r3, #0]
   31dac:	075b      	lsls	r3, r3, #29
   31dae:	d0f1      	beq.n	31d94 <modem_info_rsrp_subscribe_handler+0x44>
   31db0:	2301      	movs	r3, #1
   31db2:	f04f 0200 	mov.w	r2, #0
   31db6:	480b      	ldr	r0, [pc, #44]	; (31de4 <modem_info_rsrp_subscribe_handler+0x94>)
   31db8:	f363 0207 	bfi	r2, r3, #0, #8
   31dbc:	4b0a      	ldr	r3, [pc, #40]	; (31de8 <modem_info_rsrp_subscribe_handler+0x98>)
   31dbe:	1a1b      	subs	r3, r3, r0
   31dc0:	08db      	lsrs	r3, r3, #3
   31dc2:	f363 128f 	bfi	r2, r3, #6, #10
   31dc6:	480b      	ldr	r0, [pc, #44]	; (31df4 <modem_info_rsrp_subscribe_handler+0xa4>)
   31dc8:	e7e2      	b.n	31d90 <modem_info_rsrp_subscribe_handler+0x40>
	modem_info_rsrp_cb(param_value);
   31dca:	4b0b      	ldr	r3, [pc, #44]	; (31df8 <modem_info_rsrp_subscribe_handler+0xa8>)
   31dcc:	f89d 0006 	ldrb.w	r0, [sp, #6]
   31dd0:	681b      	ldr	r3, [r3, #0]
   31dd2:	4798      	blx	r3
   31dd4:	e7de      	b.n	31d94 <modem_info_rsrp_subscribe_handler+0x44>
   31dd6:	bf00      	nop
   31dd8:	0004ca7a 	.word	0x0004ca7a
   31ddc:	00046f59 	.word	0x00046f59
   31de0:	20032ae4 	.word	0x20032ae4
   31de4:	00045f08 	.word	0x00045f08
   31de8:	00045fc8 	.word	0x00045fc8
   31dec:	0004ca80 	.word	0x0004ca80
   31df0:	20024e4c 	.word	0x20024e4c
   31df4:	0004cab7 	.word	0x0004cab7
   31df8:	20024e54 	.word	0x20024e54

00031dfc <modem_info_type_get>:
	if (info_type >= MODEM_INFO_COUNT) {
   31dfc:	2814      	cmp	r0, #20
	return modem_data[info_type]->data_type;
   31dfe:	bf9d      	ittte	ls
   31e00:	4b02      	ldrls	r3, [pc, #8]	; (31e0c <modem_info_type_get+0x10>)
   31e02:	f853 3020 	ldrls.w	r3, [r3, r0, lsl #2]
   31e06:	7a98      	ldrbls	r0, [r3, #10]
		return -EINVAL;
   31e08:	20ea      	movhi	r0, #234	; 0xea
}
   31e0a:	4770      	bx	lr
   31e0c:	00046ee4 	.word	0x00046ee4

00031e10 <modem_info_short_get>:
{
   31e10:	b530      	push	{r4, r5, lr}
   31e12:	460d      	mov	r5, r1
   31e14:	b0a1      	sub	sp, #132	; 0x84
   31e16:	4604      	mov	r4, r0
	char recv_buf[CONFIG_MODEM_INFO_BUFFER_SIZE] = {0};
   31e18:	2280      	movs	r2, #128	; 0x80
   31e1a:	2100      	movs	r1, #0
   31e1c:	4668      	mov	r0, sp
   31e1e:	f013 f851 	bl	44ec4 <memset>
	if (buf == NULL) {
   31e22:	b1e5      	cbz	r5, 31e5e <modem_info_short_get+0x4e>
	if (modem_data[info]->data_type == AT_PARAM_TYPE_STRING) {
   31e24:	4b11      	ldr	r3, [pc, #68]	; (31e6c <modem_info_short_get+0x5c>)
   31e26:	f853 4024 	ldr.w	r4, [r3, r4, lsl #2]
   31e2a:	7aa3      	ldrb	r3, [r4, #10]
   31e2c:	2b03      	cmp	r3, #3
   31e2e:	d016      	beq.n	31e5e <modem_info_short_get+0x4e>
	err = at_cmd_write(modem_data[info]->cmd,
   31e30:	2300      	movs	r3, #0
   31e32:	2280      	movs	r2, #128	; 0x80
   31e34:	4669      	mov	r1, sp
   31e36:	6820      	ldr	r0, [r4, #0]
   31e38:	f7ff f996 	bl	31168 <at_cmd_write>
	if (err != 0) {
   31e3c:	b990      	cbnz	r0, 31e64 <modem_info_short_get+0x54>
	err = modem_info_parse(modem_data[info], &recv_buf[cmd_length]);
   31e3e:	4669      	mov	r1, sp
   31e40:	f104 0009 	add.w	r0, r4, #9
   31e44:	f7ff ff6e 	bl	31d24 <modem_info_parse.isra.0>
	if (err) {
   31e48:	b938      	cbnz	r0, 31e5a <modem_info_short_get+0x4a>
	err = at_params_short_get(&m_param_list,
   31e4a:	462a      	mov	r2, r5
   31e4c:	7a21      	ldrb	r1, [r4, #8]
   31e4e:	4808      	ldr	r0, [pc, #32]	; (31e70 <modem_info_short_get+0x60>)
   31e50:	f012 fd52 	bl	448f8 <at_params_short_get>
	return sizeof(u16_t);
   31e54:	2800      	cmp	r0, #0
   31e56:	bf08      	it	eq
   31e58:	2002      	moveq	r0, #2
}
   31e5a:	b021      	add	sp, #132	; 0x84
   31e5c:	bd30      	pop	{r4, r5, pc}
		return -EINVAL;
   31e5e:	f06f 0015 	mvn.w	r0, #21
   31e62:	e7fa      	b.n	31e5a <modem_info_short_get+0x4a>
		return -EIO;
   31e64:	f06f 0004 	mvn.w	r0, #4
   31e68:	e7f7      	b.n	31e5a <modem_info_short_get+0x4a>
   31e6a:	bf00      	nop
   31e6c:	00046ee4 	.word	0x00046ee4
   31e70:	20024e4c 	.word	0x20024e4c

00031e74 <modem_info_string_get>:
{
   31e74:	b5f0      	push	{r4, r5, r6, r7, lr}
	size_t len = 0;
   31e76:	2400      	movs	r4, #0
{
   31e78:	460d      	mov	r5, r1
   31e7a:	b0a3      	sub	sp, #140	; 0x8c
   31e7c:	4607      	mov	r7, r0
	char recv_buf[CONFIG_MODEM_INFO_BUFFER_SIZE] = {0};
   31e7e:	2280      	movs	r2, #128	; 0x80
   31e80:	4621      	mov	r1, r4
   31e82:	a802      	add	r0, sp, #8
	size_t len = 0;
   31e84:	9401      	str	r4, [sp, #4]
	char recv_buf[CONFIG_MODEM_INFO_BUFFER_SIZE] = {0};
   31e86:	f013 f81d 	bl	44ec4 <memset>
	if (buf == NULL) {
   31e8a:	2d00      	cmp	r5, #0
   31e8c:	d07c      	beq.n	31f88 <modem_info_string_get+0x114>
	err = at_cmd_write(modem_data[info]->cmd,
   31e8e:	4b41      	ldr	r3, [pc, #260]	; (31f94 <modem_info_string_get+0x120>)
   31e90:	2280      	movs	r2, #128	; 0x80
   31e92:	f853 6027 	ldr.w	r6, [r3, r7, lsl #2]
   31e96:	a902      	add	r1, sp, #8
   31e98:	4623      	mov	r3, r4
   31e9a:	6830      	ldr	r0, [r6, #0]
   31e9c:	f7ff f964 	bl	31168 <at_cmd_write>
	if (info == MODEM_INFO_SUP_BAND) {
   31ea0:	2f02      	cmp	r7, #2
   31ea2:	d10b      	bne.n	31ebc <modem_info_string_get+0x48>
__ssp_bos_icheck2_restrict(strcpy, char *, const char *)
   31ea4:	f10d 0111 	add.w	r1, sp, #17
   31ea8:	4628      	mov	r0, r5
   31eaa:	f013 f951 	bl	45150 <strcpy>
		return strlen(buf);
   31eae:	4628      	mov	r0, r5
   31eb0:	f7eb f932 	bl	1d118 <strlen>
   31eb4:	4604      	mov	r4, r0
}
   31eb6:	4620      	mov	r0, r4
   31eb8:	b023      	add	sp, #140	; 0x8c
   31eba:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (err != 0) {
   31ebc:	2800      	cmp	r0, #0
   31ebe:	d166      	bne.n	31f8e <modem_info_string_get+0x11a>
	err = modem_info_parse(modem_data[info], &recv_buf[cmd_length]);
   31ec0:	a902      	add	r1, sp, #8
   31ec2:	f106 0009 	add.w	r0, r6, #9
   31ec6:	f7ff ff2d 	bl	31d24 <modem_info_parse.isra.0>
	if (err) {
   31eca:	4604      	mov	r4, r0
   31ecc:	b198      	cbz	r0, 31ef6 <modem_info_string_get+0x82>
		LOG_ERR("Unable to parse data: %d", err);
   31ece:	4b32      	ldr	r3, [pc, #200]	; (31f98 <modem_info_string_get+0x124>)
   31ed0:	681b      	ldr	r3, [r3, #0]
   31ed2:	075a      	lsls	r2, r3, #29
   31ed4:	d0ef      	beq.n	31eb6 <modem_info_string_get+0x42>
   31ed6:	2301      	movs	r3, #1
   31ed8:	f04f 0200 	mov.w	r2, #0
   31edc:	492f      	ldr	r1, [pc, #188]	; (31f9c <modem_info_string_get+0x128>)
   31ede:	f363 0207 	bfi	r2, r3, #0, #8
   31ee2:	4b2f      	ldr	r3, [pc, #188]	; (31fa0 <modem_info_string_get+0x12c>)
   31ee4:	1a5b      	subs	r3, r3, r1
   31ee6:	08db      	lsrs	r3, r3, #3
   31ee8:	4601      	mov	r1, r0
   31eea:	482e      	ldr	r0, [pc, #184]	; (31fa4 <modem_info_string_get+0x130>)
   31eec:	f363 128f 	bfi	r2, r3, #6, #10
			LOG_ERR("Unable to obtain short: %d", err);
   31ef0:	f00e fdb4 	bl	40a5c <log_1>
   31ef4:	e7df      	b.n	31eb6 <modem_info_string_get+0x42>
	if (modem_data[info]->data_type == AT_PARAM_TYPE_NUM_SHORT) {
   31ef6:	7ab3      	ldrb	r3, [r6, #10]
   31ef8:	2b01      	cmp	r3, #1
   31efa:	d130      	bne.n	31f5e <modem_info_string_get+0xea>
		err = at_params_short_get(&m_param_list,
   31efc:	f10d 0202 	add.w	r2, sp, #2
   31f00:	7a31      	ldrb	r1, [r6, #8]
   31f02:	4829      	ldr	r0, [pc, #164]	; (31fa8 <modem_info_string_get+0x134>)
   31f04:	f012 fcf8 	bl	448f8 <at_params_short_get>
		if (err) {
   31f08:	4604      	mov	r4, r0
   31f0a:	b188      	cbz	r0, 31f30 <modem_info_string_get+0xbc>
			LOG_ERR("Unable to obtain short: %d", err);
   31f0c:	4b22      	ldr	r3, [pc, #136]	; (31f98 <modem_info_string_get+0x124>)
   31f0e:	681b      	ldr	r3, [r3, #0]
   31f10:	075b      	lsls	r3, r3, #29
   31f12:	d0d0      	beq.n	31eb6 <modem_info_string_get+0x42>
   31f14:	2301      	movs	r3, #1
   31f16:	f04f 0200 	mov.w	r2, #0
   31f1a:	4920      	ldr	r1, [pc, #128]	; (31f9c <modem_info_string_get+0x128>)
   31f1c:	f363 0207 	bfi	r2, r3, #0, #8
   31f20:	4b1f      	ldr	r3, [pc, #124]	; (31fa0 <modem_info_string_get+0x12c>)
   31f22:	1a5b      	subs	r3, r3, r1
   31f24:	08db      	lsrs	r3, r3, #3
   31f26:	4601      	mov	r1, r0
   31f28:	f363 128f 	bfi	r2, r3, #6, #10
   31f2c:	481f      	ldr	r0, [pc, #124]	; (31fac <modem_info_string_get+0x138>)
   31f2e:	e7df      	b.n	31ef0 <modem_info_string_get+0x7c>
		err = snprintf(buf, MODEM_INFO_MAX_RESPONSE_SIZE,
   31f30:	f8bd 3002 	ldrh.w	r3, [sp, #2]
   31f34:	4a1e      	ldr	r2, [pc, #120]	; (31fb0 <modem_info_string_get+0x13c>)
   31f36:	2164      	movs	r1, #100	; 0x64
   31f38:	4628      	mov	r0, r5
   31f3a:	f00d fa23 	bl	3f384 <sniprintf>
	if (info == MODEM_INFO_ICCID) {
   31f3e:	2f0e      	cmp	r7, #14
   31f40:	d107      	bne.n	31f52 <modem_info_string_get+0xde>
   31f42:	462c      	mov	r4, r5
	for (size_t i = 0; i < strlen(buf); i = i + 2) {
   31f44:	4628      	mov	r0, r5
   31f46:	f7eb f8e7 	bl	1d118 <strlen>
   31f4a:	1ca3      	adds	r3, r4, #2
   31f4c:	1b64      	subs	r4, r4, r5
   31f4e:	42a0      	cmp	r0, r4
   31f50:	d810      	bhi.n	31f74 <modem_info_string_get+0x100>
	return len <= 0 ? -ENOTSUP : len;
   31f52:	9c01      	ldr	r4, [sp, #4]
   31f54:	2c00      	cmp	r4, #0
   31f56:	bf08      	it	eq
   31f58:	f06f 0485 	mvneq.w	r4, #133	; 0x85
   31f5c:	e7ab      	b.n	31eb6 <modem_info_string_get+0x42>
	} else if (modem_data[info]->data_type == AT_PARAM_TYPE_STRING) {
   31f5e:	2b03      	cmp	r3, #3
   31f60:	d1ed      	bne.n	31f3e <modem_info_string_get+0xca>
		len = MODEM_INFO_MAX_RESPONSE_SIZE;
   31f62:	2364      	movs	r3, #100	; 0x64
		err = at_params_string_get(&m_param_list,
   31f64:	462a      	mov	r2, r5
		len = MODEM_INFO_MAX_RESPONSE_SIZE;
   31f66:	9301      	str	r3, [sp, #4]
		err = at_params_string_get(&m_param_list,
   31f68:	7a31      	ldrb	r1, [r6, #8]
   31f6a:	ab01      	add	r3, sp, #4
   31f6c:	480e      	ldr	r0, [pc, #56]	; (31fa8 <modem_info_string_get+0x134>)
   31f6e:	f012 fcf0 	bl	44952 <at_params_string_get>
   31f72:	e7e4      	b.n	31f3e <modem_info_string_get+0xca>
		current_char = buf[i];
   31f74:	f813 2c02 	ldrb.w	r2, [r3, #-2]
		buf[i] = next_char;
   31f78:	f813 1c01 	ldrb.w	r1, [r3, #-1]
		buf[i + 1] = current_char;
   31f7c:	461c      	mov	r4, r3
		buf[i] = next_char;
   31f7e:	f803 1c02 	strb.w	r1, [r3, #-2]
		buf[i + 1] = current_char;
   31f82:	f803 2c01 	strb.w	r2, [r3, #-1]
   31f86:	e7dd      	b.n	31f44 <modem_info_string_get+0xd0>
		return -EINVAL;
   31f88:	f06f 0415 	mvn.w	r4, #21
   31f8c:	e793      	b.n	31eb6 <modem_info_string_get+0x42>
		return -EIO;
   31f8e:	f06f 0404 	mvn.w	r4, #4
   31f92:	e790      	b.n	31eb6 <modem_info_string_get+0x42>
   31f94:	00046ee4 	.word	0x00046ee4
   31f98:	20032ae4 	.word	0x20032ae4
   31f9c:	00045f08 	.word	0x00045f08
   31fa0:	00045fc8 	.word	0x00045fc8
   31fa4:	0004cad7 	.word	0x0004cad7
   31fa8:	20024e4c 	.word	0x20024e4c
   31fac:	0004caf0 	.word	0x0004caf0
   31fb0:	0004cad4 	.word	0x0004cad4

00031fb4 <modem_info_rsrp_register>:

int modem_info_rsrp_register(rsrp_cb_t cb)
{
	modem_info_rsrp_cb = cb;
   31fb4:	4b14      	ldr	r3, [pc, #80]	; (32008 <modem_info_rsrp_register+0x54>)
{
   31fb6:	b510      	push	{r4, lr}

	int rc = at_notif_register_handler(NULL,
   31fb8:	4914      	ldr	r1, [pc, #80]	; (3200c <modem_info_rsrp_register+0x58>)
	modem_info_rsrp_cb = cb;
   31fba:	6018      	str	r0, [r3, #0]
	int rc = at_notif_register_handler(NULL,
   31fbc:	2000      	movs	r0, #0
   31fbe:	f7ff f993 	bl	312e8 <at_notif_register_handler>
		modem_info_rsrp_subscribe_handler);
	if (rc != 0) {
   31fc2:	4604      	mov	r4, r0
   31fc4:	b1a0      	cbz	r0, 31ff0 <modem_info_rsrp_register+0x3c>
		LOG_ERR("Can't register handler rc=%d", rc);
   31fc6:	4b12      	ldr	r3, [pc, #72]	; (32010 <modem_info_rsrp_register+0x5c>)
   31fc8:	681b      	ldr	r3, [r3, #0]
   31fca:	075b      	lsls	r3, r3, #29
   31fcc:	d00e      	beq.n	31fec <modem_info_rsrp_register+0x38>
   31fce:	2301      	movs	r3, #1
   31fd0:	f04f 0200 	mov.w	r2, #0
   31fd4:	490f      	ldr	r1, [pc, #60]	; (32014 <modem_info_rsrp_register+0x60>)
   31fd6:	f363 0207 	bfi	r2, r3, #0, #8
   31fda:	4b0f      	ldr	r3, [pc, #60]	; (32018 <modem_info_rsrp_register+0x64>)
   31fdc:	1a5b      	subs	r3, r3, r1
   31fde:	08db      	lsrs	r3, r3, #3
   31fe0:	4601      	mov	r1, r0
   31fe2:	f363 128f 	bfi	r2, r3, #6, #10
   31fe6:	480d      	ldr	r0, [pc, #52]	; (3201c <modem_info_rsrp_register+0x68>)
   31fe8:	f00e fd38 	bl	40a5c <log_1>
	if (at_cmd_write(AT_CMD_CESQ_ON, NULL, 0, NULL) != 0) {
		return -EIO;
	}

	return 0;
}
   31fec:	4620      	mov	r0, r4
   31fee:	bd10      	pop	{r4, pc}
	if (at_cmd_write(AT_CMD_CESQ_ON, NULL, 0, NULL) != 0) {
   31ff0:	4603      	mov	r3, r0
   31ff2:	4602      	mov	r2, r0
   31ff4:	4601      	mov	r1, r0
   31ff6:	480a      	ldr	r0, [pc, #40]	; (32020 <modem_info_rsrp_register+0x6c>)
   31ff8:	f7ff f8b6 	bl	31168 <at_cmd_write>
		return -EIO;
   31ffc:	1e04      	subs	r4, r0, #0
   31ffe:	bf18      	it	ne
   32000:	f06f 0404 	mvnne.w	r4, #4
   32004:	e7f2      	b.n	31fec <modem_info_rsrp_register+0x38>
   32006:	bf00      	nop
   32008:	20024e54 	.word	0x20024e54
   3200c:	00031d51 	.word	0x00031d51
   32010:	20032ae4 	.word	0x20032ae4
   32014:	00045f08 	.word	0x00045f08
   32018:	00045fc8 	.word	0x00045fc8
   3201c:	0004c9f2 	.word	0x0004c9f2
   32020:	0004ca70 	.word	0x0004ca70

00032024 <modem_info_init>:

int modem_info_init(void)
{
	/* Init at_cmd_parser storage module */
	int err = at_params_list_init(&m_param_list,
   32024:	210a      	movs	r1, #10
   32026:	4801      	ldr	r0, [pc, #4]	; (3202c <modem_info_init+0x8>)
   32028:	f012 bbbb 	b.w	447a2 <at_params_list_init>
   3202c:	20024e4c 	.word	0x20024e4c

00032030 <modem_data_get>:

	return 0;
}

static int modem_data_get(struct lte_param *param)
{
   32030:	b538      	push	{r3, r4, r5, lr}
   32032:	4605      	mov	r5, r0
	enum at_param_type data_type;
	int ret;

	data_type = modem_info_type_get(param->type);
   32034:	f890 006c 	ldrb.w	r0, [r0, #108]	; 0x6c
   32038:	f7ff fee0 	bl	31dfc <modem_info_type_get>

	if (data_type < 0) {
		return -EINVAL;
	}

	if (data_type == AT_PARAM_TYPE_STRING) {
   3203c:	2803      	cmp	r0, #3
   3203e:	d11f      	bne.n	32080 <modem_data_get+0x50>
		ret = modem_info_string_get(param->type, param->value_string);
   32040:	1ca9      	adds	r1, r5, #2
   32042:	f895 006c 	ldrb.w	r0, [r5, #108]	; 0x6c
   32046:	f7ff ff15 	bl	31e74 <modem_info_string_get>
		if (ret < 0) {
   3204a:	1e04      	subs	r4, r0, #0
   3204c:	db02      	blt.n	32054 <modem_data_get+0x24>
			LOG_ERR("Link data not obtained: %d", ret);
			return ret;
		}
	}

	return 0;
   3204e:	2400      	movs	r4, #0
}
   32050:	4620      	mov	r0, r4
   32052:	bd38      	pop	{r3, r4, r5, pc}
			LOG_ERR("Link data not obtained: %d %d", param->type, ret);
   32054:	4b19      	ldr	r3, [pc, #100]	; (320bc <modem_data_get+0x8c>)
   32056:	681b      	ldr	r3, [r3, #0]
   32058:	075a      	lsls	r2, r3, #29
   3205a:	d0f9      	beq.n	32050 <modem_data_get+0x20>
   3205c:	2201      	movs	r2, #1
   3205e:	f04f 0300 	mov.w	r3, #0
   32062:	4917      	ldr	r1, [pc, #92]	; (320c0 <modem_data_get+0x90>)
   32064:	f362 0307 	bfi	r3, r2, #0, #8
   32068:	4a16      	ldr	r2, [pc, #88]	; (320c4 <modem_data_get+0x94>)
   3206a:	4817      	ldr	r0, [pc, #92]	; (320c8 <modem_data_get+0x98>)
   3206c:	1a52      	subs	r2, r2, r1
   3206e:	08d2      	lsrs	r2, r2, #3
   32070:	f362 138f 	bfi	r3, r2, #6, #10
   32074:	f895 106c 	ldrb.w	r1, [r5, #108]	; 0x6c
   32078:	4622      	mov	r2, r4
   3207a:	f00e fd03 	bl	40a84 <log_2>
   3207e:	e7e7      	b.n	32050 <modem_data_get+0x20>
	} else if (data_type == AT_PARAM_TYPE_NUM_SHORT) {
   32080:	2801      	cmp	r0, #1
   32082:	d1e4      	bne.n	3204e <modem_data_get+0x1e>
		ret = modem_info_short_get(param->type, &param->value);
   32084:	4629      	mov	r1, r5
   32086:	f895 006c 	ldrb.w	r0, [r5, #108]	; 0x6c
   3208a:	f7ff fec1 	bl	31e10 <modem_info_short_get>
		if (ret < 0) {
   3208e:	1e04      	subs	r4, r0, #0
   32090:	dadd      	bge.n	3204e <modem_data_get+0x1e>
			LOG_ERR("Link data not obtained: %d", ret);
   32092:	4b0a      	ldr	r3, [pc, #40]	; (320bc <modem_data_get+0x8c>)
   32094:	681b      	ldr	r3, [r3, #0]
   32096:	075b      	lsls	r3, r3, #29
   32098:	d0da      	beq.n	32050 <modem_data_get+0x20>
   3209a:	2301      	movs	r3, #1
   3209c:	f04f 0200 	mov.w	r2, #0
   320a0:	4907      	ldr	r1, [pc, #28]	; (320c0 <modem_data_get+0x90>)
   320a2:	f363 0207 	bfi	r2, r3, #0, #8
   320a6:	4b07      	ldr	r3, [pc, #28]	; (320c4 <modem_data_get+0x94>)
   320a8:	4808      	ldr	r0, [pc, #32]	; (320cc <modem_data_get+0x9c>)
   320aa:	1a5b      	subs	r3, r3, r1
   320ac:	08db      	lsrs	r3, r3, #3
   320ae:	f363 128f 	bfi	r2, r3, #6, #10
   320b2:	4621      	mov	r1, r4
   320b4:	f00e fcd2 	bl	40a5c <log_1>
   320b8:	e7ca      	b.n	32050 <modem_data_get+0x20>
   320ba:	bf00      	nop
   320bc:	20032ae8 	.word	0x20032ae8
   320c0:	00045f08 	.word	0x00045f08
   320c4:	00045fd0 	.word	0x00045fd0
   320c8:	0004cc6d 	.word	0x0004cc6d
   320cc:	0004cc8b 	.word	0x0004cc8b

000320d0 <modem_info_params_init>:
	if (modem == NULL) {
   320d0:	2800      	cmp	r0, #0
   320d2:	d043      	beq.n	3215c <modem_info_params_init+0x8c>
	modem->network.current_band.type	= MODEM_INFO_CUR_BAND;
   320d4:	2301      	movs	r3, #1
   320d6:	f880 306c 	strb.w	r3, [r0, #108]	; 0x6c
	modem->network.sup_band.type		= MODEM_INFO_SUP_BAND;
   320da:	2302      	movs	r3, #2
   320dc:	f880 30dc 	strb.w	r3, [r0, #220]	; 0xdc
	modem->network.area_code.type		= MODEM_INFO_AREA_CODE;
   320e0:	2303      	movs	r3, #3
   320e2:	f880 314c 	strb.w	r3, [r0, #332]	; 0x14c
	modem->network.current_operator.type	= MODEM_INFO_OPERATOR;
   320e6:	2305      	movs	r3, #5
   320e8:	f880 31bc 	strb.w	r3, [r0, #444]	; 0x1bc
	modem->network.mcc.type			= MODEM_INFO_MCC;
   320ec:	2306      	movs	r3, #6
   320ee:	f880 322c 	strb.w	r3, [r0, #556]	; 0x22c
	modem->network.mnc.type			= MODEM_INFO_MNC;
   320f2:	2307      	movs	r3, #7
   320f4:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c
	modem->network.cellid_hex.type		= MODEM_INFO_CELLID;
   320f8:	2308      	movs	r3, #8
   320fa:	f880 330c 	strb.w	r3, [r0, #780]	; 0x30c
	modem->network.ip_address.type		= MODEM_INFO_IP_ADDRESS;
   320fe:	2309      	movs	r3, #9
   32100:	f880 337c 	strb.w	r3, [r0, #892]	; 0x37c
	modem->network.ue_mode.type		= MODEM_INFO_UE_MODE;
   32104:	2304      	movs	r3, #4
   32106:	f880 33ec 	strb.w	r3, [r0, #1004]	; 0x3ec
	modem->network.lte_mode.type		= MODEM_INFO_LTE_MODE;
   3210a:	230f      	movs	r3, #15
   3210c:	f880 345c 	strb.w	r3, [r0, #1116]	; 0x45c
	modem->network.nbiot_mode.type		= MODEM_INFO_NBIOT_MODE;
   32110:	2310      	movs	r3, #16
   32112:	f880 34cc 	strb.w	r3, [r0, #1228]	; 0x4cc
	modem->network.gps_mode.type		= MODEM_INFO_GPS_MODE;
   32116:	2311      	movs	r3, #17
   32118:	f880 353c 	strb.w	r3, [r0, #1340]	; 0x53c
	modem->network.date_time.type		= MODEM_INFO_DATE_TIME;
   3211c:	2314      	movs	r3, #20
   3211e:	f880 35ac 	strb.w	r3, [r0, #1452]	; 0x5ac
	modem->sim.uicc.type			= MODEM_INFO_UICC;
   32122:	230a      	movs	r3, #10
   32124:	f880 3634 	strb.w	r3, [r0, #1588]	; 0x634
	modem->sim.iccid.type			= MODEM_INFO_ICCID;
   32128:	230e      	movs	r3, #14
   3212a:	f880 36a4 	strb.w	r3, [r0, #1700]	; 0x6a4
	modem->sim.imsi.type		        = MODEM_INFO_IMSI;
   3212e:	2312      	movs	r3, #18
   32130:	f880 3714 	strb.w	r3, [r0, #1812]	; 0x714
	modem->device.modem_fw.type		= MODEM_INFO_FW_VERSION;
   32134:	230d      	movs	r3, #13
   32136:	f880 3784 	strb.w	r3, [r0, #1924]	; 0x784
	modem->device.battery.type		= MODEM_INFO_BATTERY;
   3213a:	230b      	movs	r3, #11
   3213c:	f880 37f4 	strb.w	r3, [r0, #2036]	; 0x7f4
	modem->device.imei.type			= MODEM_INFO_IMEI;
   32140:	2313      	movs	r3, #19
   32142:	f880 3864 	strb.w	r3, [r0, #2148]	; 0x864
	modem->device.board			= CONFIG_BOARD;
   32146:	4b07      	ldr	r3, [pc, #28]	; (32164 <modem_info_params_init+0x94>)
   32148:	f8c0 3868 	str.w	r3, [r0, #2152]	; 0x868
	modem->device.app_version		= STRINGIFY(APP_VERSION);
   3214c:	4b06      	ldr	r3, [pc, #24]	; (32168 <modem_info_params_init+0x98>)
   3214e:	f8c0 386c 	str.w	r3, [r0, #2156]	; 0x86c
	modem->device.app_name			= STRINGIFY(PROJECT_NAME);
   32152:	4b06      	ldr	r3, [pc, #24]	; (3216c <modem_info_params_init+0x9c>)
   32154:	f8c0 3870 	str.w	r3, [r0, #2160]	; 0x870
	return 0;
   32158:	2000      	movs	r0, #0
   3215a:	4770      	bx	lr
		return -EINVAL;
   3215c:	f06f 0015 	mvn.w	r0, #21
}
   32160:	4770      	bx	lr
   32162:	bf00      	nop
   32164:	000478e3 	.word	0x000478e3
   32168:	0004ccfb 	.word	0x0004ccfb
   3216c:	000477d9 	.word	0x000477d9

00032170 <modem_info_params_get>:

int modem_info_params_get(struct modem_param_info *modem)
{
   32170:	b570      	push	{r4, r5, r6, lr}
	int ret;

	if (modem == NULL) {
   32172:	4604      	mov	r4, r0
   32174:	2800      	cmp	r0, #0
   32176:	f000 80c1 	beq.w	322fc <_flash_used+0x154>
		return -EINVAL;
	}

	if (IS_ENABLED(CONFIG_MODEM_INFO_ADD_NETWORK)) {
		ret = modem_data_get(&modem->network.current_band);
   3217a:	f7ff ff59 	bl	32030 <modem_data_get>
   3217e:	4605      	mov	r5, r0
		ret += modem_data_get(&modem->network.sup_band);
   32180:	f104 0070 	add.w	r0, r4, #112	; 0x70
   32184:	f7ff ff54 	bl	32030 <modem_data_get>
   32188:	4405      	add	r5, r0
		ret += modem_data_get(&modem->network.ip_address);
   3218a:	f504 7044 	add.w	r0, r4, #784	; 0x310
   3218e:	f7ff ff4f 	bl	32030 <modem_data_get>
   32192:	4405      	add	r5, r0
		ret += modem_data_get(&modem->network.ue_mode);
   32194:	f504 7060 	add.w	r0, r4, #896	; 0x380
   32198:	f7ff ff4a 	bl	32030 <modem_data_get>
   3219c:	4405      	add	r5, r0
		ret += modem_data_get(&modem->network.current_operator);
   3219e:	f504 70a8 	add.w	r0, r4, #336	; 0x150
   321a2:	f7ff ff45 	bl	32030 <modem_data_get>
   321a6:	4405      	add	r5, r0
		ret += modem_data_get(&modem->network.cellid_hex);
   321a8:	f504 7028 	add.w	r0, r4, #672	; 0x2a0
   321ac:	f7ff ff40 	bl	32030 <modem_data_get>
   321b0:	4405      	add	r5, r0
		ret += modem_data_get(&modem->network.area_code);
   321b2:	f104 00e0 	add.w	r0, r4, #224	; 0xe0
   321b6:	f7ff ff3b 	bl	32030 <modem_data_get>
   321ba:	4405      	add	r5, r0
		ret += modem_data_get(&modem->network.lte_mode);
   321bc:	f504 707c 	add.w	r0, r4, #1008	; 0x3f0
   321c0:	f7ff ff36 	bl	32030 <modem_data_get>
   321c4:	4405      	add	r5, r0
		ret += modem_data_get(&modem->network.nbiot_mode);
   321c6:	f504 608c 	add.w	r0, r4, #1120	; 0x460
   321ca:	f7ff ff31 	bl	32030 <modem_data_get>
   321ce:	4405      	add	r5, r0
		ret += modem_data_get(&modem->network.gps_mode);
   321d0:	f504 609a 	add.w	r0, r4, #1232	; 0x4d0
   321d4:	f7ff ff2c 	bl	32030 <modem_data_get>
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   321d8:	f8b4 2152 	ldrh.w	r2, [r4, #338]	; 0x152
   321dc:	f894 3154 	ldrb.w	r3, [r4, #340]	; 0x154
   321e0:	4405      	add	r5, r0
	memcpy(mcc->value_string, current_operator->value_string, 3);
   321e2:	f504 70e1 	add.w	r0, r4, #450	; 0x1c2
   321e6:	f8a4 21c2 	strh.w	r2, [r4, #450]	; 0x1c2
   321ea:	7083      	strb	r3, [r0, #2]
   321ec:	f894 3157 	ldrb.w	r3, [r4, #343]	; 0x157
   321f0:	f8b4 2155 	ldrh.w	r2, [r4, #341]	; 0x155
   321f4:	f884 3234 	strb.w	r3, [r4, #564]	; 0x234
   321f8:	f8a4 2232 	strh.w	r2, [r4, #562]	; 0x232
	mcc->value = (double)strtol(mcc->value_string, NULL, 10);
   321fc:	2100      	movs	r1, #0
   321fe:	220a      	movs	r2, #10
   32200:	f00d f96c 	bl	3f4dc <strtol>
		memcpy(&mnc->value_string, &current_operator->value_string[3], 3);
   32204:	f204 2632 	addw	r6, r4, #562	; 0x232
	mcc->value = (double)strtol(mcc->value_string, NULL, 10);
   32208:	f8a4 01c0 	strh.w	r0, [r4, #448]	; 0x1c0
	mnc->value = (double)strtol(mnc->value_string, NULL, 10);
   3220c:	220a      	movs	r2, #10
   3220e:	2100      	movs	r1, #0
   32210:	4630      	mov	r0, r6
   32212:	f00d f963 	bl	3f4dc <strtol>
	*cellID_dec = (double)strtol(cellID->value_string, NULL, 16);
   32216:	2210      	movs	r2, #16
	mnc->value = (double)strtol(mnc->value_string, NULL, 10);
   32218:	f8a4 0230 	strh.w	r0, [r4, #560]	; 0x230
	*cellID_dec = (double)strtol(cellID->value_string, NULL, 16);
   3221c:	2100      	movs	r1, #0
   3221e:	f204 20a2 	addw	r0, r4, #674	; 0x2a2
   32222:	f00d f95b 	bl	3f4dc <strtol>
   32226:	f7ea fa5d 	bl	1c6e4 <__aeabi_i2d>
   3222a:	f504 66b6 	add.w	r6, r4, #1456	; 0x5b0
   3222e:	e9c6 0100 	strd	r0, r1, [r6]
	area_code->value_string[4] = '\0';
   32232:	2100      	movs	r1, #0
	area_code->value = strtol(area_code->value_string, NULL, 16);
   32234:	2210      	movs	r2, #16
	area_code->value_string[4] = '\0';
   32236:	f884 10e6 	strb.w	r1, [r4, #230]	; 0xe6
	area_code->value = strtol(area_code->value_string, NULL, 16);
   3223a:	f104 00e2 	add.w	r0, r4, #226	; 0xe2
   3223e:	f00d f94d 	bl	3f4dc <strtol>
   32242:	f8a4 00e0 	strh.w	r0, [r4, #224]	; 0xe0
				&modem->network.mcc,
				&modem->network.mnc);
		ret += cellid_to_dec(&modem->network.cellid_hex,
				&modem->network.cellid_dec);
		ret += area_code_parse(&modem->network.area_code);
		if (ret) {
   32246:	b1b5      	cbz	r5, 32276 <_flash_used+0xce>
			LOG_ERR("Network data not obtained: %d", ret);
   32248:	4b2e      	ldr	r3, [pc, #184]	; (32304 <_flash_used+0x15c>)
   3224a:	681b      	ldr	r3, [r3, #0]
   3224c:	0759      	lsls	r1, r3, #29
   3224e:	d102      	bne.n	32256 <_flash_used+0xae>
		ret = modem_data_get(&modem->device.modem_fw);
		ret += modem_data_get(&modem->device.battery);
		ret += modem_data_get(&modem->device.imei);
		if (ret) {
			LOG_ERR("Device data not obtained: %d", ret);
			return -EAGAIN;
   32250:	f06f 000a 	mvn.w	r0, #10
		}
	}

	return 0;
}
   32254:	bd70      	pop	{r4, r5, r6, pc}
			LOG_ERR("Network data not obtained: %d", ret);
   32256:	2301      	movs	r3, #1
   32258:	f04f 0200 	mov.w	r2, #0
   3225c:	492a      	ldr	r1, [pc, #168]	; (32308 <_flash_used+0x160>)
   3225e:	f363 0207 	bfi	r2, r3, #0, #8
   32262:	4b2a      	ldr	r3, [pc, #168]	; (3230c <_flash_used+0x164>)
   32264:	482a      	ldr	r0, [pc, #168]	; (32310 <_flash_used+0x168>)
   32266:	1a5b      	subs	r3, r3, r1
   32268:	4629      	mov	r1, r5
   3226a:	08db      	lsrs	r3, r3, #3
   3226c:	f363 128f 	bfi	r2, r3, #6, #10
			LOG_ERR("Device data not obtained: %d", ret);
   32270:	f00e fbf4 	bl	40a5c <log_1>
   32274:	e7ec      	b.n	32250 <_flash_used+0xa8>
		ret = modem_data_get(&modem->sim.uicc);
   32276:	f504 60b9 	add.w	r0, r4, #1480	; 0x5c8
   3227a:	f7ff fed9 	bl	32030 <modem_data_get>
   3227e:	4605      	mov	r5, r0
			ret += modem_data_get(&modem->sim.iccid);
   32280:	f504 60c7 	add.w	r0, r4, #1592	; 0x638
   32284:	f7ff fed4 	bl	32030 <modem_data_get>
   32288:	4405      	add	r5, r0
			ret += modem_data_get(&modem->sim.imsi);
   3228a:	f504 60d5 	add.w	r0, r4, #1704	; 0x6a8
   3228e:	f7ff fecf 	bl	32030 <modem_data_get>
		if (ret) {
   32292:	1829      	adds	r1, r5, r0
   32294:	d010      	beq.n	322b8 <_flash_used+0x110>
			LOG_ERR("Sim data not obtained: %d", ret);
   32296:	4b1b      	ldr	r3, [pc, #108]	; (32304 <_flash_used+0x15c>)
   32298:	681b      	ldr	r3, [r3, #0]
   3229a:	075a      	lsls	r2, r3, #29
   3229c:	d0d8      	beq.n	32250 <_flash_used+0xa8>
   3229e:	2301      	movs	r3, #1
   322a0:	f04f 0200 	mov.w	r2, #0
   322a4:	4818      	ldr	r0, [pc, #96]	; (32308 <_flash_used+0x160>)
   322a6:	f363 0207 	bfi	r2, r3, #0, #8
   322aa:	4b18      	ldr	r3, [pc, #96]	; (3230c <_flash_used+0x164>)
   322ac:	1a1b      	subs	r3, r3, r0
   322ae:	08db      	lsrs	r3, r3, #3
   322b0:	f363 128f 	bfi	r2, r3, #6, #10
   322b4:	4817      	ldr	r0, [pc, #92]	; (32314 <_flash_used+0x16c>)
   322b6:	e7db      	b.n	32270 <_flash_used+0xc8>
		ret = modem_data_get(&modem->device.modem_fw);
   322b8:	f504 60e3 	add.w	r0, r4, #1816	; 0x718
   322bc:	f7ff feb8 	bl	32030 <modem_data_get>
   322c0:	4605      	mov	r5, r0
		ret += modem_data_get(&modem->device.battery);
   322c2:	f504 60f1 	add.w	r0, r4, #1928	; 0x788
   322c6:	f7ff feb3 	bl	32030 <modem_data_get>
   322ca:	4405      	add	r5, r0
		ret += modem_data_get(&modem->device.imei);
   322cc:	f504 60ff 	add.w	r0, r4, #2040	; 0x7f8
   322d0:	f7ff feae 	bl	32030 <modem_data_get>
		if (ret) {
   322d4:	1828      	adds	r0, r5, r0
   322d6:	d0bd      	beq.n	32254 <_flash_used+0xac>
			LOG_ERR("Device data not obtained: %d", ret);
   322d8:	4b0a      	ldr	r3, [pc, #40]	; (32304 <_flash_used+0x15c>)
   322da:	681b      	ldr	r3, [r3, #0]
   322dc:	075b      	lsls	r3, r3, #29
   322de:	d0b7      	beq.n	32250 <_flash_used+0xa8>
   322e0:	2301      	movs	r3, #1
   322e2:	f04f 0200 	mov.w	r2, #0
   322e6:	4908      	ldr	r1, [pc, #32]	; (32308 <_flash_used+0x160>)
   322e8:	f363 0207 	bfi	r2, r3, #0, #8
   322ec:	4b07      	ldr	r3, [pc, #28]	; (3230c <_flash_used+0x164>)
   322ee:	1a5b      	subs	r3, r3, r1
   322f0:	08db      	lsrs	r3, r3, #3
   322f2:	4601      	mov	r1, r0
   322f4:	f363 128f 	bfi	r2, r3, #6, #10
   322f8:	4807      	ldr	r0, [pc, #28]	; (32318 <_flash_used+0x170>)
   322fa:	e7b9      	b.n	32270 <_flash_used+0xc8>
		return -EINVAL;
   322fc:	f06f 0015 	mvn.w	r0, #21
   32300:	e7a8      	b.n	32254 <_flash_used+0xac>
   32302:	bf00      	nop
   32304:	20032ae8 	.word	0x20032ae8
   32308:	00045f08 	.word	0x00045f08
   3230c:	00045fd0 	.word	0x00045fd0
   32310:	0004cca6 	.word	0x0004cca6
   32314:	0004ccc4 	.word	0x0004ccc4
   32318:	0004ccde 	.word	0x0004ccde

0003231c <k_sys_fatal_error_handler>:

extern void sys_arch_reboot(int type);

void k_sys_fatal_error_handler(unsigned int reason,
			       const z_arch_esf_t *esf)
{
   3231c:	b508      	push	{r3, lr}
	z_impl_log_panic();
   3231e:	f7ef fe4f 	bl	21fc0 <z_impl_log_panic>
	ARG_UNUSED(esf);
	ARG_UNUSED(reason);

	LOG_PANIC();

	LOG_ERR("Resetting system");
   32322:	4b0a      	ldr	r3, [pc, #40]	; (3234c <k_sys_fatal_error_handler+0x30>)
   32324:	681b      	ldr	r3, [r3, #0]
   32326:	075b      	lsls	r3, r3, #29
   32328:	d00d      	beq.n	32346 <k_sys_fatal_error_handler+0x2a>
   3232a:	2301      	movs	r3, #1
   3232c:	f04f 0100 	mov.w	r1, #0
   32330:	4a07      	ldr	r2, [pc, #28]	; (32350 <k_sys_fatal_error_handler+0x34>)
   32332:	f363 0107 	bfi	r1, r3, #0, #8
   32336:	4b07      	ldr	r3, [pc, #28]	; (32354 <k_sys_fatal_error_handler+0x38>)
   32338:	4807      	ldr	r0, [pc, #28]	; (32358 <k_sys_fatal_error_handler+0x3c>)
   3233a:	1a9b      	subs	r3, r3, r2
   3233c:	08db      	lsrs	r3, r3, #3
   3233e:	f363 118f 	bfi	r1, r3, #6, #10
   32342:	f00e fb7e 	bl	40a42 <log_0>
	sys_arch_reboot(0);
   32346:	2000      	movs	r0, #0
   32348:	f7f4 fe90 	bl	2706c <sys_arch_reboot>

	CODE_UNREACHABLE;
   3234c:	20032ad0 	.word	0x20032ad0
   32350:	00045f08 	.word	0x00045f08
   32354:	00045fa0 	.word	0x00045fa0
   32358:	0004cd26 	.word	0x0004cd26

0003235c <translate_error>:
{
	return at_cmd_write(at_cmee_strings[(int)enable], NULL, 0, NULL);
}

static int translate_error(int err, enum at_cmd_state state)
{
   3235c:	b510      	push	{r4, lr}
	/* In case of CME error translate the error value to
	 * an errno value.
	 */
	if ((err > 0) && (state == AT_CMD_ERROR_CME)) {
   3235e:	1e04      	subs	r4, r0, #0
   32360:	dd0d      	ble.n	3237e <translate_error+0x22>
   32362:	2903      	cmp	r1, #3
   32364:	d10b      	bne.n	3237e <translate_error+0x22>
		switch (err) {
   32366:	f46f 7300 	mvn.w	r3, #512	; 0x200
   3236a:	18e3      	adds	r3, r4, r3
   3236c:	2b05      	cmp	r3, #5
   3236e:	d80e      	bhi.n	3238e <translate_error+0x32>
   32370:	e8df f003 	tbb	[pc, r3]
   32374:	0d07031d 	.word	0x0d07031d
   32378:	0a0d      	.short	0x0a0d
		case 513:
			return -ENOENT;
		case 514:
			return -EPERM;
   3237a:	f04f 34ff 	mov.w	r4, #4294967295
			return 0xBAADBAAD;
		}
	}

	return err;
}
   3237e:	4620      	mov	r0, r4
   32380:	bd10      	pop	{r4, pc}
			return -ENOMEM;
   32382:	f06f 040b 	mvn.w	r4, #11
   32386:	e7fa      	b.n	3237e <translate_error+0x22>
			return -EACCES;
   32388:	f06f 040c 	mvn.w	r4, #12
   3238c:	e7f7      	b.n	3237e <translate_error+0x22>
			__ASSERT(false, "Untranslated CME error %d!", err);
   3238e:	2347      	movs	r3, #71	; 0x47
   32390:	4a08      	ldr	r2, [pc, #32]	; (323b4 <translate_error+0x58>)
   32392:	4909      	ldr	r1, [pc, #36]	; (323b8 <translate_error+0x5c>)
   32394:	4809      	ldr	r0, [pc, #36]	; (323bc <translate_error+0x60>)
   32396:	f00e f934 	bl	40602 <printk>
   3239a:	4621      	mov	r1, r4
   3239c:	4808      	ldr	r0, [pc, #32]	; (323c0 <translate_error+0x64>)
   3239e:	f00e f930 	bl	40602 <printk>
   323a2:	2147      	movs	r1, #71	; 0x47
   323a4:	4803      	ldr	r0, [pc, #12]	; (323b4 <translate_error+0x58>)
   323a6:	f00e f9ef 	bl	40788 <assert_post_action>
   323aa:	4c06      	ldr	r4, [pc, #24]	; (323c4 <translate_error+0x68>)
   323ac:	e7e7      	b.n	3237e <translate_error+0x22>
			return -ENOENT;
   323ae:	f06f 0401 	mvn.w	r4, #1
   323b2:	e7e4      	b.n	3237e <translate_error+0x22>
   323b4:	0004cd5c 	.word	0x0004cd5c
   323b8:	0004d39b 	.word	0x0004d39b
   323bc:	0004764f 	.word	0x0004764f
   323c0:	0004cd90 	.word	0x0004cd90
   323c4:	baadbaad 	.word	0xbaadbaad

000323c8 <write_at_cmd_with_cme_enabled.constprop.1>:
	memset(response, 0, sizeof(response));
   323c8:	2300      	movs	r3, #0

static int write_at_cmd_with_cme_enabled(char *cmd, char *buf, size_t buf_len,
   323ca:	b5f0      	push	{r4, r5, r6, r7, lr}
   323cc:	b085      	sub	sp, #20
   323ce:	4605      	mov	r5, r0
   323d0:	460e      	mov	r6, r1
   323d2:	4617      	mov	r7, r2
	err = at_cmd_write("AT+CMEE?", response, sizeof(response), NULL);
   323d4:	a901      	add	r1, sp, #4
   323d6:	220c      	movs	r2, #12
   323d8:	4817      	ldr	r0, [pc, #92]	; (32438 <write_at_cmd_with_cme_enabled.constprop.1+0x70>)
	memset(response, 0, sizeof(response));
   323da:	e9cd 3301 	strd	r3, r3, [sp, #4]
   323de:	9303      	str	r3, [sp, #12]
	err = at_cmd_write("AT+CMEE?", response, sizeof(response), NULL);
   323e0:	f7fe fec2 	bl	31168 <at_cmd_write>
	if (err == 0) {
   323e4:	b120      	cbz	r0, 323f0 <write_at_cmd_with_cme_enabled.constprop.1+0x28>
{
	int err;
	int cmee_was_active = cmee_active();

	if (cmee_was_active < 0) {
		return -EFAULT;
   323e6:	f06f 050d 	mvn.w	r5, #13
			return -EIO;
		}
	}

	return err;
}
   323ea:	4628      	mov	r0, r5
   323ec:	b005      	add	sp, #20
   323ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (strchr(&response[6], '1')) {
   323f0:	2131      	movs	r1, #49	; 0x31
   323f2:	f10d 000a 	add.w	r0, sp, #10
   323f6:	f012 fe9e 	bl	45136 <strchr>
   323fa:	4603      	mov	r3, r0
   323fc:	b948      	cbnz	r0, 32412 <write_at_cmd_with_cme_enabled.constprop.1+0x4a>
	return at_cmd_write(at_cmee_strings[(int)enable], NULL, 0, NULL);
   323fe:	4602      	mov	r2, r0
   32400:	4601      	mov	r1, r0
   32402:	480e      	ldr	r0, [pc, #56]	; (3243c <write_at_cmd_with_cme_enabled.constprop.1+0x74>)
   32404:	f7fe feb0 	bl	31168 <at_cmd_write>
		if (cmee_set(true)) {
   32408:	4604      	mov	r4, r0
   3240a:	b118      	cbz	r0, 32414 <write_at_cmd_with_cme_enabled.constprop.1+0x4c>
			return -EIO;
   3240c:	f06f 0504 	mvn.w	r5, #4
   32410:	e7eb      	b.n	323ea <write_at_cmd_with_cme_enabled.constprop.1+0x22>
			return 1;
   32412:	2401      	movs	r4, #1
	err = at_cmd_write(cmd, buf, buf_len, state);
   32414:	4629      	mov	r1, r5
   32416:	463b      	mov	r3, r7
   32418:	4632      	mov	r2, r6
   3241a:	4809      	ldr	r0, [pc, #36]	; (32440 <write_at_cmd_with_cme_enabled.constprop.1+0x78>)
   3241c:	f7fe fea4 	bl	31168 <at_cmd_write>
   32420:	4605      	mov	r5, r0
	if (!cmee_was_active) {
   32422:	2c00      	cmp	r4, #0
   32424:	d1e1      	bne.n	323ea <write_at_cmd_with_cme_enabled.constprop.1+0x22>
	return at_cmd_write(at_cmee_strings[(int)enable], NULL, 0, NULL);
   32426:	4623      	mov	r3, r4
   32428:	4622      	mov	r2, r4
   3242a:	4621      	mov	r1, r4
   3242c:	4805      	ldr	r0, [pc, #20]	; (32444 <write_at_cmd_with_cme_enabled.constprop.1+0x7c>)
   3242e:	f7fe fe9b 	bl	31168 <at_cmd_write>
		if (cmee_set(false)) {
   32432:	2800      	cmp	r0, #0
   32434:	d0d9      	beq.n	323ea <write_at_cmd_with_cme_enabled.constprop.1+0x22>
   32436:	e7e9      	b.n	3240c <write_at_cmd_with_cme_enabled.constprop.1+0x44>
   32438:	0004cdad 	.word	0x0004cdad
   3243c:	200328ba 	.word	0x200328ba
   32440:	2002a4e3 	.word	0x2002a4e3
   32444:	200328b0 	.word	0x200328b0

00032448 <modem_key_mgmt_write>:

int modem_key_mgmt_write(nrf_sec_tag_t sec_tag,
			 enum modem_key_mgnt_cred_type cred_type,
			 const void *buf, u16_t len)
{
   32448:	b5f0      	push	{r4, r5, r6, r7, lr}
   3244a:	461d      	mov	r5, r3
   3244c:	b085      	sub	sp, #20
	int err;
	int written;
	enum at_cmd_state state;

	if ((buf == NULL) || (len == 0)) {
   3244e:	4617      	mov	r7, r2
   32450:	b31a      	cbz	r2, 3249a <modem_key_mgmt_write+0x52>
   32452:	b313      	cbz	r3, 3249a <modem_key_mgmt_write+0x52>
		return -EINVAL;
	}

	written = snprintf(scratch_buf, sizeof(scratch_buf),
   32454:	4c14      	ldr	r4, [pc, #80]	; (324a8 <modem_key_mgmt_write+0x60>)
   32456:	e9cd 0100 	strd	r0, r1, [sp]
   3245a:	4b14      	ldr	r3, [pc, #80]	; (324ac <modem_key_mgmt_write+0x64>)
   3245c:	4a14      	ldr	r2, [pc, #80]	; (324b0 <modem_key_mgmt_write+0x68>)
   3245e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
   32462:	4620      	mov	r0, r4
   32464:	f00c ff8e 	bl	3f384 <sniprintf>

	if ((written < 0) || (written >= sizeof(scratch_buf))) {
		return -ENOBUFS;
	}

	if ((written + len + sizeof("\"\r\n")) > sizeof(scratch_buf)) {
   32468:	182e      	adds	r6, r5, r0
   3246a:	1d33      	adds	r3, r6, #4
   3246c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
   32470:	d816      	bhi.n	324a0 <modem_key_mgmt_write+0x58>
   32472:	462a      	mov	r2, r5
   32474:	4639      	mov	r1, r7
   32476:	4420      	add	r0, r4
   32478:	f012 fcea 	bl	44e50 <memcpy>
	memcpy(&scratch_buf[written], buf, len);
	written += len;

	memcpy(&scratch_buf[written], "\"\r\n", sizeof("\"\r\n"));

	err = write_at_cmd_with_cme_enabled(scratch_buf, NULL, 0, &state);
   3247c:	2100      	movs	r1, #0
   3247e:	4b0d      	ldr	r3, [pc, #52]	; (324b4 <modem_key_mgmt_write+0x6c>)
   32480:	4608      	mov	r0, r1
   32482:	681b      	ldr	r3, [r3, #0]
   32484:	f10d 020f 	add.w	r2, sp, #15
   32488:	5133      	str	r3, [r6, r4]
   3248a:	f7ff ff9d 	bl	323c8 <write_at_cmd_with_cme_enabled.constprop.1>

	return translate_error(err, state);
   3248e:	f89d 100f 	ldrb.w	r1, [sp, #15]
   32492:	f7ff ff63 	bl	3235c <translate_error>
}
   32496:	b005      	add	sp, #20
   32498:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return -EINVAL;
   3249a:	f06f 0015 	mvn.w	r0, #21
   3249e:	e7fa      	b.n	32496 <modem_key_mgmt_write+0x4e>
		return -ENOBUFS;
   324a0:	f06f 0068 	mvn.w	r0, #104	; 0x68
   324a4:	e7f7      	b.n	32496 <modem_key_mgmt_write+0x4e>
   324a6:	bf00      	nop
   324a8:	2002a4e3 	.word	0x2002a4e3
   324ac:	0004cd43 	.word	0x0004cd43
   324b0:	0004cd4d 	.word	0x0004cd4d
   324b4:	0004cd58 	.word	0x0004cd58

000324b8 <check_ext_api_requests>:
	}
};
#endif

static int check_ext_api_requests(struct device *dev)
{
   324b8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	(void)dev;

	const struct fw_info_ext_api_request *ext_api_req =
			skip_ext_apis(&m_firmware_info);

	for (u32_t i = 0; i < m_firmware_info.ext_api_request_num; i++) {
   324bc:	2500      	movs	r5, #0
			skip_ext_apis(&m_firmware_info);
   324be:	4c21      	ldr	r4, [pc, #132]	; (32544 <check_ext_api_requests+0x8c>)
 */
static inline const struct fw_info_ext_api *fw_info_ext_api_check(
							u32_t ext_api_addr)
{
	const struct fw_info_ext_api *ext_api;
	const u32_t ext_api_magic[] = {EXT_API_MAGIC};
   324c0:	4e21      	ldr	r6, [pc, #132]	; (32548 <check_ext_api_requests+0x90>)
	for (u32_t i = 0; i < m_firmware_info.ext_api_request_num; i++) {
   324c2:	f854 8c04 	ldr.w	r8, [r4, #-4]
			/* EXT_API hard requirement not met. */
			printk("ERROR: Cannot fulfill EXT_API request.\r\n");
			k_panic();
		} else {
			/* EXT_API soft requirement not met. */
			printk("WARNING: Optional EXT_API request not "
   324c6:	f8df 9088 	ldr.w	r9, [pc, #136]	; 32550 <check_ext_api_requests+0x98>
{
   324ca:	b085      	sub	sp, #20
	for (u32_t i = 0; i < m_firmware_info.ext_api_request_num; i++) {
   324cc:	45a8      	cmp	r8, r5
   324ce:	d803      	bhi.n	324d8 <check_ext_api_requests+0x20>
		}
		ADVANCE_EXT_API_REQ(ext_api_req);
	}

	return 0;
}
   324d0:	2000      	movs	r0, #0
   324d2:	b005      	add	sp, #20
   324d4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		if (fw_info_ext_api_check((u32_t)*(ext_api_req->ext_api))
   324d8:	6a63      	ldr	r3, [r4, #36]	; 0x24
   324da:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
   324de:	681f      	ldr	r7, [r3, #0]
   324e0:	ab01      	add	r3, sp, #4
   324e2:	e883 0007 	stmia.w	r3, {r0, r1, r2}

	ext_api = (const struct fw_info_ext_api *)(ext_api_addr);
	if (memcmp(ext_api->magic, ext_api_magic, CONFIG_FW_INFO_MAGIC_LEN)
   324e6:	220c      	movs	r2, #12
   324e8:	4619      	mov	r1, r3
   324ea:	4638      	mov	r0, r7
   324ec:	f012 fca2 	bl	44e34 <memcmp>
   324f0:	b990      	cbnz	r0, 32518 <check_ext_api_requests+0x60>
   324f2:	b18f      	cbz	r7, 32518 <check_ext_api_requests+0x60>
			&& ext_api_satisfies_req(*(ext_api_req->ext_api),
   324f4:	6a63      	ldr	r3, [r4, #36]	; 0x24
	const u32_t req_id = ext_api_req->request.ext_api_id;
   324f6:	6921      	ldr	r1, [r4, #16]
			&& ext_api_satisfies_req(*(ext_api_req->ext_api),
   324f8:	681b      	ldr	r3, [r3, #0]
	return ((ext_api->ext_api_id == req_id)
   324fa:	691a      	ldr	r2, [r3, #16]
		&& ((ext_api->ext_api_flags & req_flags) == req_flags));
   324fc:	4291      	cmp	r1, r2
   324fe:	d10b      	bne.n	32518 <check_ext_api_requests+0x60>
		&&  (ext_api->ext_api_version >= req_min_version)
   32500:	699a      	ldr	r2, [r3, #24]
	const u32_t req_min_version = ext_api_req->request.ext_api_version;
   32502:	69a1      	ldr	r1, [r4, #24]
		&&  (ext_api->ext_api_version >= req_min_version)
   32504:	4291      	cmp	r1, r2
   32506:	d807      	bhi.n	32518 <check_ext_api_requests+0x60>
	const u32_t req_max_version = ext_api_req->ext_api_max_version;
   32508:	69e1      	ldr	r1, [r4, #28]
		&&  (ext_api->ext_api_version <  req_max_version)
   3250a:	4291      	cmp	r1, r2
   3250c:	d904      	bls.n	32518 <check_ext_api_requests+0x60>
	const u32_t req_flags = ext_api_req->request.ext_api_flags;
   3250e:	6962      	ldr	r2, [r4, #20]
		&& ((ext_api->ext_api_flags & req_flags) == req_flags));
   32510:	695b      	ldr	r3, [r3, #20]
   32512:	ea32 0303 	bics.w	r3, r2, r3
   32516:	d00a      	beq.n	3252e <check_ext_api_requests+0x76>
		} else if (ext_api_req->required) {
   32518:	6a27      	ldr	r7, [r4, #32]
   3251a:	b167      	cbz	r7, 32536 <check_ext_api_requests+0x7e>
			printk("ERROR: Cannot fulfill EXT_API request.\r\n");
   3251c:	480b      	ldr	r0, [pc, #44]	; (3254c <check_ext_api_requests+0x94>)
   3251e:	f00e f870 	bl	40602 <printk>
			k_panic();
   32522:	4040      	eors	r0, r0
   32524:	f380 8811 	msr	BASEPRI, r0
   32528:	f04f 0004 	mov.w	r0, #4
   3252c:	df02      	svc	2
		ADVANCE_EXT_API_REQ(ext_api_req);
   3252e:	68e3      	ldr	r3, [r4, #12]
	for (u32_t i = 0; i < m_firmware_info.ext_api_request_num; i++) {
   32530:	3501      	adds	r5, #1
		ADVANCE_EXT_API_REQ(ext_api_req);
   32532:	441c      	add	r4, r3
   32534:	e7ca      	b.n	324cc <check_ext_api_requests+0x14>
			printk("WARNING: Optional EXT_API request not "
   32536:	4648      	mov	r0, r9
   32538:	f00e f863 	bl	40602 <printk>
			*ext_api_req->ext_api = NULL;
   3253c:	6a63      	ldr	r3, [r4, #36]	; 0x24
   3253e:	601f      	str	r7, [r3, #0]
   32540:	e7f5      	b.n	3252e <check_ext_api_requests+0x76>
   32542:	bf00      	nop
   32544:	0001c43c 	.word	0x0001c43c
   32548:	00046110 	.word	0x00046110
   3254c:	0004cdb6 	.word	0x0004cdb6
   32550:	0004cddf 	.word	0x0004cddf

00032554 <sensor_sim_channel_get>:

static int sensor_sim_channel_get(struct device *dev,
				  enum sensor_channel chan,
				  struct sensor_value *sample)
{
   32554:	b538      	push	{r3, r4, r5, lr}
   32556:	4614      	mov	r4, r2
	switch (chan) {
   32558:	2910      	cmp	r1, #16
   3255a:	d82f      	bhi.n	325bc <sensor_sim_channel_get+0x68>
   3255c:	e8df f001 	tbb	[pc, r1]
   32560:	18140d09 	.word	0x18140d09
   32564:	2e2e2e2e 	.word	0x2e2e2e2e
   32568:	2e2e2e2e 	.word	0x2e2e2e2e
   3256c:	2e2c282e 	.word	0x2e2c282e
   32570:	2a          	.byte	0x2a
   32571:	00          	.byte	0x00
	case SENSOR_CHAN_ACCEL_X:
		double_to_sensor_value(accel_samples[0], sample);
   32572:	4b14      	ldr	r3, [pc, #80]	; (325c4 <sensor_sim_channel_get+0x70>)
		break;
	case SENSOR_CHAN_HUMIDITY:
		double_to_sensor_value(humidity_sample, sample);
		break;
	case SENSOR_CHAN_PRESS:
		double_to_sensor_value(pressure_sample, sample);
   32574:	e9d3 0100 	ldrd	r0, r1, [r3]
   32578:	e002      	b.n	32580 <sensor_sim_channel_get+0x2c>
		double_to_sensor_value(accel_samples[1], sample);
   3257a:	4b12      	ldr	r3, [pc, #72]	; (325c4 <sensor_sim_channel_get+0x70>)
   3257c:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
		double_to_sensor_value(pressure_sample, sample);
   32580:	f7eb f862 	bl	1d648 <double_to_sensor_value>
		break;
	default:
		return -ENOTSUP;
	}

	return 0;
   32584:	2000      	movs	r0, #0
}
   32586:	bd38      	pop	{r3, r4, r5, pc}
		double_to_sensor_value(accel_samples[2], sample);
   32588:	4b0e      	ldr	r3, [pc, #56]	; (325c4 <sensor_sim_channel_get+0x70>)
   3258a:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
   3258e:	e7f7      	b.n	32580 <sensor_sim_channel_get+0x2c>
		double_to_sensor_value(accel_samples[0], sample);
   32590:	4d0c      	ldr	r5, [pc, #48]	; (325c4 <sensor_sim_channel_get+0x70>)
   32592:	e9d5 0100 	ldrd	r0, r1, [r5]
   32596:	f7eb f857 	bl	1d648 <double_to_sensor_value>
		double_to_sensor_value(accel_samples[1], ++sample);
   3259a:	e9d5 0102 	ldrd	r0, r1, [r5, #8]
   3259e:	f104 0208 	add.w	r2, r4, #8
   325a2:	f7eb f851 	bl	1d648 <double_to_sensor_value>
		double_to_sensor_value(accel_samples[2], ++sample);
   325a6:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
   325aa:	f104 0210 	add.w	r2, r4, #16
   325ae:	e7e7      	b.n	32580 <sensor_sim_channel_get+0x2c>
		double_to_sensor_value(temp_sample, sample);
   325b0:	4b05      	ldr	r3, [pc, #20]	; (325c8 <sensor_sim_channel_get+0x74>)
   325b2:	e7df      	b.n	32574 <sensor_sim_channel_get+0x20>
		double_to_sensor_value(humidity_sample, sample);
   325b4:	4b05      	ldr	r3, [pc, #20]	; (325cc <sensor_sim_channel_get+0x78>)
   325b6:	e7dd      	b.n	32574 <sensor_sim_channel_get+0x20>
		double_to_sensor_value(pressure_sample, sample);
   325b8:	4b05      	ldr	r3, [pc, #20]	; (325d0 <sensor_sim_channel_get+0x7c>)
   325ba:	e7db      	b.n	32574 <sensor_sim_channel_get+0x20>
		return -ENOTSUP;
   325bc:	f06f 0085 	mvn.w	r0, #133	; 0x85
   325c0:	e7e1      	b.n	32586 <sensor_sim_channel_get+0x32>
   325c2:	bf00      	nop
   325c4:	20020da8 	.word	0x20020da8
   325c8:	200210b8 	.word	0x200210b8
   325cc:	20020dc0 	.word	0x20020dc0
   325d0:	20020dc8 	.word	0x20020dc8

000325d4 <sensor_sim_trigger_set>:
{
   325d4:	b508      	push	{r3, lr}
	switch (trig->type) {
   325d6:	880b      	ldrh	r3, [r1, #0]
   325d8:	2b01      	cmp	r3, #1
   325da:	d105      	bne.n	325e8 <sensor_sim_trigger_set+0x14>
	struct sensor_sim_data *drv_data = dev->driver_data;
   325dc:	6883      	ldr	r3, [r0, #8]
		drv_data->drdy_trigger = *trig;
   325de:	6808      	ldr	r0, [r1, #0]
		drv_data->drdy_handler = handler;
   325e0:	631a      	str	r2, [r3, #48]	; 0x30
		drv_data->drdy_trigger = *trig;
   325e2:	6358      	str	r0, [r3, #52]	; 0x34
	int ret = 0;
   325e4:	2000      	movs	r0, #0
}
   325e6:	bd08      	pop	{r3, pc}
		LOG_ERR("Unsupported sensor trigger");
   325e8:	4b0a      	ldr	r3, [pc, #40]	; (32614 <sensor_sim_trigger_set+0x40>)
   325ea:	681b      	ldr	r3, [r3, #0]
   325ec:	075b      	lsls	r3, r3, #29
   325ee:	d00d      	beq.n	3260c <sensor_sim_trigger_set+0x38>
   325f0:	2301      	movs	r3, #1
   325f2:	f04f 0100 	mov.w	r1, #0
   325f6:	4a08      	ldr	r2, [pc, #32]	; (32618 <sensor_sim_trigger_set+0x44>)
   325f8:	f363 0107 	bfi	r1, r3, #0, #8
   325fc:	4b07      	ldr	r3, [pc, #28]	; (3261c <sensor_sim_trigger_set+0x48>)
   325fe:	4808      	ldr	r0, [pc, #32]	; (32620 <sensor_sim_trigger_set+0x4c>)
   32600:	1a9b      	subs	r3, r3, r2
   32602:	08db      	lsrs	r3, r3, #3
   32604:	f363 118f 	bfi	r1, r3, #6, #10
   32608:	f00e fa1b 	bl	40a42 <log_0>
		ret = -ENOTSUP;
   3260c:	f06f 0085 	mvn.w	r0, #133	; 0x85
	return ret;
   32610:	e7e9      	b.n	325e6 <sensor_sim_trigger_set+0x12>
   32612:	bf00      	nop
   32614:	20032b44 	.word	0x20032b44
   32618:	00045f08 	.word	0x00045f08
   3261c:	00046088 	.word	0x00046088
   32620:	0004ce12 	.word	0x0004ce12

00032624 <generate_sine.constprop.2>:
static double generate_sine(double offset, double amplitude)
   32624:	b508      	push	{r3, lr}
	return z_impl_k_uptime_get();
   32626:	f012 fb4c 	bl	44cc2 <z_impl_k_uptime_get>
	return offset + amplitude * sin(time % 65535);
   3262a:	f64f 73ff 	movw	r3, #65535	; 0xffff
   3262e:	fbb0 f3f3 	udiv	r3, r0, r3
   32632:	ebc3 4303 	rsb	r3, r3, r3, lsl #16
   32636:	1ac0      	subs	r0, r0, r3
   32638:	f7ea f844 	bl	1c6c4 <__aeabi_ui2d>
   3263c:	ec41 0b10 	vmov	d0, r0, r1
   32640:	f7eb fa76 	bl	1db30 <sin>
   32644:	2200      	movs	r2, #0
   32646:	4b05      	ldr	r3, [pc, #20]	; (3265c <generate_sine.constprop.2+0x38>)
   32648:	ec51 0b10 	vmov	r0, r1, d0
   3264c:	f7ea f8b4 	bl	1c7b8 <__aeabi_dmul>
   32650:	2200      	movs	r2, #0
   32652:	2300      	movs	r3, #0
   32654:	f7e9 fefa 	bl	1c44c <__adddf3>
}
   32658:	bd08      	pop	{r3, pc}
   3265a:	bf00      	nop
   3265c:	40340000 	.word	0x40340000

00032660 <sensor_sim_init>:
{
   32660:	b530      	push	{r4, r5, lr}
	struct sensor_sim_data *drv_data = dev->driver_data;
   32662:	6885      	ldr	r5, [r0, #8]
{
   32664:	b087      	sub	sp, #28
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   32666:	2400      	movs	r4, #0
   32668:	f06f 0305 	mvn.w	r3, #5
   3266c:	f44f 7200 	mov.w	r2, #512	; 0x200
   32670:	f105 0138 	add.w	r1, r5, #56	; 0x38
   32674:	e9cd 4302 	strd	r4, r3, [sp, #8]
   32678:	e9cd 0400 	strd	r0, r4, [sp]
   3267c:	4b06      	ldr	r3, [pc, #24]	; (32698 <sensor_sim_init+0x38>)
   3267e:	e9cd 4404 	strd	r4, r4, [sp, #16]
   32682:	f505 700e 	add.w	r0, r5, #568	; 0x238
   32686:	f00b f879 	bl	3d77c <z_impl_k_thread_create>
   3268a:	f7f3 fe7b 	bl	26384 <z_timer_cycle_get_32>
	srand(k_cycle_get_32());
   3268e:	f00c fe21 	bl	3f2d4 <srand>
}
   32692:	4620      	mov	r0, r4
   32694:	b007      	add	sp, #28
   32696:	bd30      	pop	{r4, r5, pc}
   32698:	00044a03 	.word	0x00044a03

0003269c <gps_sim_setup>:

	return 0;
}

static int gps_sim_setup(struct device *dev)
{
   3269c:	b538      	push	{r3, r4, r5, lr}
	struct gps_sim_data *drv_data = dev->driver_data;

	drv_data->dev = dev;
	drv_data->state = GPS_SIM_UNINIT;
   3269e:	2500      	movs	r5, #0
	struct gps_sim_data *drv_data = dev->driver_data;
   326a0:	6884      	ldr	r4, [r0, #8]

	k_delayed_work_init(&drv_data->start_work, start_work_fn);
   326a2:	4910      	ldr	r1, [pc, #64]	; (326e4 <gps_sim_setup+0x48>)
	drv_data->dev = dev;
   326a4:	6020      	str	r0, [r4, #0]
	drv_data->state = GPS_SIM_UNINIT;
   326a6:	7125      	strb	r5, [r4, #4]
	k_delayed_work_init(&drv_data->start_work, start_work_fn);
   326a8:	f104 0070 	add.w	r0, r4, #112	; 0x70
   326ac:	f012 fafd 	bl	44caa <k_delayed_work_init>
	k_delayed_work_init(&drv_data->stop_work, stop_work_fn);
   326b0:	f104 0090 	add.w	r0, r4, #144	; 0x90
   326b4:	490c      	ldr	r1, [pc, #48]	; (326e8 <gps_sim_setup+0x4c>)
   326b6:	f012 faf8 	bl	44caa <k_delayed_work_init>
	k_delayed_work_init(&drv_data->timeout_work, timeout_work_fn);
   326ba:	f104 00b0 	add.w	r0, r4, #176	; 0xb0
   326be:	490b      	ldr	r1, [pc, #44]	; (326ec <gps_sim_setup+0x50>)
   326c0:	f012 faf3 	bl	44caa <k_delayed_work_init>
	k_delayed_work_init(&drv_data->fix_work, fix_work_fn);
   326c4:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
   326c8:	4909      	ldr	r1, [pc, #36]	; (326f0 <gps_sim_setup+0x54>)
   326ca:	f012 faee 	bl	44caa <k_delayed_work_init>
	k_work_q_start(&drv_data->work_q, drv_data->work_q_stack,
   326ce:	f504 600f 	add.w	r0, r4, #2288	; 0x8f0
   326d2:	2305      	movs	r3, #5
   326d4:	f44f 6200 	mov.w	r2, #2048	; 0x800
   326d8:	f104 01f0 	add.w	r1, r4, #240	; 0xf0
   326dc:	f00b f980 	bl	3d9e0 <k_work_q_start>
		       K_THREAD_STACK_SIZEOF(drv_data->work_q_stack),
		       K_PRIO_PREEMPT(CONFIG_GPS_SIM_WORKQUEUE_PRIORITY));

	return 0;
}
   326e0:	4628      	mov	r0, r5
   326e2:	bd38      	pop	{r3, r4, r5, pc}
   326e4:	000327c1 	.word	0x000327c1
   326e8:	00032761 	.word	0x00032761
   326ec:	000326f5 	.word	0x000326f5
   326f0:	0001d819 	.word	0x0001d819

000326f4 <timeout_work_fn>:
{
   326f4:	b510      	push	{r4, lr}
   326f6:	b0b0      	sub	sp, #192	; 0xc0
   326f8:	4604      	mov	r4, r0
	struct gps_event evt = {
   326fa:	22c0      	movs	r2, #192	; 0xc0
   326fc:	2100      	movs	r1, #0
   326fe:	4668      	mov	r0, sp
   32700:	f012 fbe0 	bl	44ec4 <memset>
   32704:	2302      	movs	r3, #2
   32706:	f88d 3000 	strb.w	r3, [sp]
	if (drv_data->state != GPS_SIM_ACTIVE_SEARCH) {
   3270a:	f814 3cac 	ldrb.w	r3, [r4, #-172]
   3270e:	2b02      	cmp	r3, #2
   32710:	d11b      	bne.n	3274a <timeout_work_fn+0x56>
	drv_data->state = GPS_SIM_ACTIVE_TIMEOUT;
   32712:	2303      	movs	r3, #3
   32714:	f804 3cac 	strb.w	r3, [r4, #-172]
	LOG_INF("GPS search timed out without getting a position fix");
   32718:	4b0d      	ldr	r3, [pc, #52]	; (32750 <timeout_work_fn+0x5c>)
   3271a:	681b      	ldr	r3, [r3, #0]
   3271c:	f003 0307 	and.w	r3, r3, #7
   32720:	2b02      	cmp	r3, #2
   32722:	d90d      	bls.n	32740 <timeout_work_fn+0x4c>
   32724:	2303      	movs	r3, #3
   32726:	f04f 0100 	mov.w	r1, #0
   3272a:	4a0a      	ldr	r2, [pc, #40]	; (32754 <timeout_work_fn+0x60>)
   3272c:	f363 0107 	bfi	r1, r3, #0, #8
   32730:	4b09      	ldr	r3, [pc, #36]	; (32758 <timeout_work_fn+0x64>)
   32732:	480a      	ldr	r0, [pc, #40]	; (3275c <timeout_work_fn+0x68>)
   32734:	1a9b      	subs	r3, r3, r2
   32736:	08db      	lsrs	r3, r3, #3
   32738:	f363 118f 	bfi	r1, r3, #6, #10
   3273c:	f00e f981 	bl	40a42 <log_0>
	notify_event(drv_data->dev, &evt);
   32740:	4669      	mov	r1, sp
   32742:	f854 0cb0 	ldr.w	r0, [r4, #-176]
   32746:	f012 f96c 	bl	44a22 <notify_event>
}
   3274a:	b030      	add	sp, #192	; 0xc0
   3274c:	bd10      	pop	{r4, pc}
   3274e:	bf00      	nop
   32750:	20032ad8 	.word	0x20032ad8
   32754:	00045f08 	.word	0x00045f08
   32758:	00045fb0 	.word	0x00045fb0
   3275c:	0004cf61 	.word	0x0004cf61

00032760 <stop_work_fn>:
{
   32760:	b510      	push	{r4, lr}
   32762:	b0b0      	sub	sp, #192	; 0xc0
   32764:	4604      	mov	r4, r0
	struct gps_event evt = {
   32766:	22c0      	movs	r2, #192	; 0xc0
   32768:	2100      	movs	r1, #0
   3276a:	4668      	mov	r0, sp
   3276c:	f012 fbaa 	bl	44ec4 <memset>
   32770:	2301      	movs	r3, #1
   32772:	f88d 3000 	strb.w	r3, [sp]
	drv_data->state = GPS_SIM_IDLE;
   32776:	f804 3c8c 	strb.w	r3, [r4, #-140]
	LOG_INF("GPS is stopped");
   3277a:	4b0d      	ldr	r3, [pc, #52]	; (327b0 <stop_work_fn+0x50>)
   3277c:	681b      	ldr	r3, [r3, #0]
   3277e:	f003 0307 	and.w	r3, r3, #7
   32782:	2b02      	cmp	r3, #2
   32784:	d90d      	bls.n	327a2 <stop_work_fn+0x42>
   32786:	2303      	movs	r3, #3
   32788:	f04f 0100 	mov.w	r1, #0
   3278c:	4a09      	ldr	r2, [pc, #36]	; (327b4 <stop_work_fn+0x54>)
   3278e:	f363 0107 	bfi	r1, r3, #0, #8
   32792:	4b09      	ldr	r3, [pc, #36]	; (327b8 <stop_work_fn+0x58>)
   32794:	4809      	ldr	r0, [pc, #36]	; (327bc <stop_work_fn+0x5c>)
   32796:	1a9b      	subs	r3, r3, r2
   32798:	08db      	lsrs	r3, r3, #3
   3279a:	f363 118f 	bfi	r1, r3, #6, #10
   3279e:	f00e f950 	bl	40a42 <log_0>
	notify_event(drv_data->dev, &evt);
   327a2:	4669      	mov	r1, sp
   327a4:	f854 0c90 	ldr.w	r0, [r4, #-144]
   327a8:	f012 f93b 	bl	44a22 <notify_event>
}
   327ac:	b030      	add	sp, #192	; 0xc0
   327ae:	bd10      	pop	{r4, pc}
   327b0:	20032ad8 	.word	0x20032ad8
   327b4:	00045f08 	.word	0x00045f08
   327b8:	00045fb0 	.word	0x00045fb0
   327bc:	0004cf4a 	.word	0x0004cf4a

000327c0 <start_work_fn>:
{
   327c0:	b530      	push	{r4, r5, lr}
   327c2:	4604      	mov	r4, r0
   327c4:	b0b1      	sub	sp, #196	; 0xc4
	struct gps_event evt = {
   327c6:	22c0      	movs	r2, #192	; 0xc0
   327c8:	2100      	movs	r1, #0
   327ca:	4668      	mov	r0, sp
   327cc:	f012 fb7a 	bl	44ec4 <memset>
	notify_event(drv_data->dev, &evt);
   327d0:	4669      	mov	r1, sp
   327d2:	f854 0c70 	ldr.w	r0, [r4, #-112]
   327d6:	f012 f924 	bl	44a22 <notify_event>
	LOG_INF("GPS is started");
   327da:	4b1d      	ldr	r3, [pc, #116]	; (32850 <start_work_fn+0x90>)
   327dc:	681b      	ldr	r3, [r3, #0]
   327de:	f003 0307 	and.w	r3, r3, #7
   327e2:	2b02      	cmp	r3, #2
   327e4:	d90d      	bls.n	32802 <start_work_fn+0x42>
   327e6:	2303      	movs	r3, #3
   327e8:	f04f 0100 	mov.w	r1, #0
   327ec:	4a19      	ldr	r2, [pc, #100]	; (32854 <start_work_fn+0x94>)
   327ee:	f363 0107 	bfi	r1, r3, #0, #8
   327f2:	4b19      	ldr	r3, [pc, #100]	; (32858 <start_work_fn+0x98>)
   327f4:	4819      	ldr	r0, [pc, #100]	; (3285c <start_work_fn+0x9c>)
   327f6:	1a9b      	subs	r3, r3, r2
   327f8:	08db      	lsrs	r3, r3, #3
   327fa:	f363 118f 	bfi	r1, r3, #6, #10
   327fe:	f00e f920 	bl	40a42 <log_0>
	switch (drv_data->cfg.nav_mode) {
   32802:	f814 3c64 	ldrb.w	r3, [r4, #-100]
   32806:	f504 6508 	add.w	r5, r4, #2176	; 0x880
   3280a:	b153      	cbz	r3, 32822 <start_work_fn+0x62>
   3280c:	2b02      	cmp	r3, #2
   3280e:	d112      	bne.n	32836 <start_work_fn+0x76>
		k_delayed_work_submit_to_queue(&drv_data->work_q,
   32810:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
					K_SECONDS(drv_data->cfg.interval));
   32814:	f854 3c60 	ldr.w	r3, [r4, #-96]
		k_delayed_work_submit_to_queue(&drv_data->work_q,
   32818:	4621      	mov	r1, r4
   3281a:	435a      	muls	r2, r3
   3281c:	4628      	mov	r0, r5
   3281e:	f00b f903 	bl	3da28 <k_delayed_work_submit_to_queue>
		k_delayed_work_submit_to_queue(&drv_data->work_q,
   32822:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
					K_SECONDS(drv_data->cfg.timeout));
   32826:	f854 3c5c 	ldr.w	r3, [r4, #-92]
		k_delayed_work_submit_to_queue(&drv_data->work_q,
   3282a:	f104 0140 	add.w	r1, r4, #64	; 0x40
   3282e:	435a      	muls	r2, r3
   32830:	4628      	mov	r0, r5
   32832:	f00b f8f9 	bl	3da28 <k_delayed_work_submit_to_queue>
	drv_data->state = GPS_SIM_ACTIVE_SEARCH;
   32836:	2302      	movs	r3, #2
	k_delayed_work_submit_to_queue(&drv_data->work_q,
   32838:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
	drv_data->state = GPS_SIM_ACTIVE_SEARCH;
   3283c:	f804 3c6c 	strb.w	r3, [r4, #-108]
	k_delayed_work_submit_to_queue(&drv_data->work_q,
   32840:	f104 0160 	add.w	r1, r4, #96	; 0x60
   32844:	4628      	mov	r0, r5
   32846:	f00b f8ef 	bl	3da28 <k_delayed_work_submit_to_queue>
}
   3284a:	b031      	add	sp, #196	; 0xc4
   3284c:	bd30      	pop	{r4, r5, pc}
   3284e:	bf00      	nop
   32850:	20032ad8 	.word	0x20032ad8
   32854:	00045f08 	.word	0x00045f08
   32858:	00045fb0 	.word	0x00045fb0
   3285c:	0004cf20 	.word	0x0004cf20

00032860 <init>:
{
   32860:	b508      	push	{r3, lr}
	struct gps_sim_data *drv_data = dev->driver_data;
   32862:	6883      	ldr	r3, [r0, #8]
	if (handler == NULL) {
   32864:	b991      	cbnz	r1, 3288c <init+0x2c>
		LOG_ERR("Event handler must be provided");
   32866:	4b17      	ldr	r3, [pc, #92]	; (328c4 <init+0x64>)
   32868:	681b      	ldr	r3, [r3, #0]
   3286a:	075a      	lsls	r2, r3, #29
   3286c:	d00b      	beq.n	32886 <init+0x26>
   3286e:	2301      	movs	r3, #1
   32870:	4a15      	ldr	r2, [pc, #84]	; (328c8 <init+0x68>)
   32872:	f363 0107 	bfi	r1, r3, #0, #8
   32876:	4b15      	ldr	r3, [pc, #84]	; (328cc <init+0x6c>)
   32878:	4815      	ldr	r0, [pc, #84]	; (328d0 <init+0x70>)
   3287a:	1a9b      	subs	r3, r3, r2
   3287c:	08db      	lsrs	r3, r3, #3
   3287e:	f363 118f 	bfi	r1, r3, #6, #10
   32882:	f00e f8de 	bl	40a42 <log_0>
   32886:	f06f 0015 	mvn.w	r0, #21
   3288a:	e019      	b.n	328c0 <init+0x60>
	if (drv_data->state != GPS_SIM_UNINIT) {
   3288c:	7918      	ldrb	r0, [r3, #4]
   3288e:	b1a0      	cbz	r0, 328ba <init+0x5a>
		LOG_ERR("The GPS simulator is already initialized");
   32890:	4b0c      	ldr	r3, [pc, #48]	; (328c4 <init+0x64>)
   32892:	681b      	ldr	r3, [r3, #0]
   32894:	075b      	lsls	r3, r3, #29
   32896:	d00d      	beq.n	328b4 <init+0x54>
   32898:	2301      	movs	r3, #1
   3289a:	f04f 0100 	mov.w	r1, #0
   3289e:	4a0a      	ldr	r2, [pc, #40]	; (328c8 <init+0x68>)
   328a0:	f363 0107 	bfi	r1, r3, #0, #8
   328a4:	4b09      	ldr	r3, [pc, #36]	; (328cc <init+0x6c>)
   328a6:	480b      	ldr	r0, [pc, #44]	; (328d4 <init+0x74>)
   328a8:	1a9b      	subs	r3, r3, r2
   328aa:	08db      	lsrs	r3, r3, #3
   328ac:	f363 118f 	bfi	r1, r3, #6, #10
   328b0:	f00e f8c7 	bl	40a42 <log_0>
		return -EALREADY;
   328b4:	f06f 0077 	mvn.w	r0, #119	; 0x77
   328b8:	e002      	b.n	328c0 <init+0x60>
	drv_data->state = GPS_SIM_IDLE;
   328ba:	2201      	movs	r2, #1
	drv_data->handler = handler;
   328bc:	6099      	str	r1, [r3, #8]
	drv_data->state = GPS_SIM_IDLE;
   328be:	711a      	strb	r2, [r3, #4]
}
   328c0:	bd08      	pop	{r3, pc}
   328c2:	bf00      	nop
   328c4:	20032ad8 	.word	0x20032ad8
   328c8:	00045f08 	.word	0x00045f08
   328cc:	00045fb0 	.word	0x00045fb0
   328d0:	0004ce7f 	.word	0x0004ce7f
   328d4:	0004ce9e 	.word	0x0004ce9e

000328d8 <stop>:
{
   328d8:	b510      	push	{r4, lr}
	struct gps_sim_data *drv_data = dev->driver_data;
   328da:	6884      	ldr	r4, [r0, #8]
	if (drv_data->state == GPS_SIM_IDLE) {
   328dc:	7923      	ldrb	r3, [r4, #4]
   328de:	2b01      	cmp	r3, #1
   328e0:	d115      	bne.n	3290e <stop+0x36>
		LOG_WRN("The GPS is already stopped");
   328e2:	4b16      	ldr	r3, [pc, #88]	; (3293c <stop+0x64>)
   328e4:	681b      	ldr	r3, [r3, #0]
   328e6:	f013 0f06 	tst.w	r3, #6
   328ea:	d00d      	beq.n	32908 <stop+0x30>
   328ec:	2302      	movs	r3, #2
   328ee:	f04f 0100 	mov.w	r1, #0
   328f2:	4a13      	ldr	r2, [pc, #76]	; (32940 <stop+0x68>)
   328f4:	f363 0107 	bfi	r1, r3, #0, #8
   328f8:	4b12      	ldr	r3, [pc, #72]	; (32944 <stop+0x6c>)
   328fa:	4813      	ldr	r0, [pc, #76]	; (32948 <stop+0x70>)
   328fc:	1a9b      	subs	r3, r3, r2
   328fe:	08db      	lsrs	r3, r3, #3
   32900:	f363 118f 	bfi	r1, r3, #6, #10
   32904:	f00e f89d 	bl	40a42 <log_0>
   32908:	f06f 0077 	mvn.w	r0, #119	; 0x77
   3290c:	e015      	b.n	3293a <stop+0x62>
	drv_data->state = GPS_SIM_IDLE;
   3290e:	2301      	movs	r3, #1
	k_delayed_work_cancel(&drv_data->timeout_work);
   32910:	f104 00b0 	add.w	r0, r4, #176	; 0xb0
	drv_data->state = GPS_SIM_IDLE;
   32914:	7123      	strb	r3, [r4, #4]
	k_delayed_work_cancel(&drv_data->timeout_work);
   32916:	f00b f913 	bl	3db40 <k_delayed_work_cancel>
	k_delayed_work_cancel(&drv_data->fix_work);
   3291a:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
   3291e:	f00b f90f 	bl	3db40 <k_delayed_work_cancel>
	k_delayed_work_cancel(&drv_data->start_work);
   32922:	f104 0070 	add.w	r0, r4, #112	; 0x70
   32926:	f00b f90b 	bl	3db40 <k_delayed_work_cancel>
	k_delayed_work_submit_to_queue(&drv_data->work_q,
   3292a:	2200      	movs	r2, #0
   3292c:	f104 0190 	add.w	r1, r4, #144	; 0x90
   32930:	f504 600f 	add.w	r0, r4, #2288	; 0x8f0
   32934:	f00b f878 	bl	3da28 <k_delayed_work_submit_to_queue>
	return 0;
   32938:	2000      	movs	r0, #0
}
   3293a:	bd10      	pop	{r4, pc}
   3293c:	20032ad8 	.word	0x20032ad8
   32940:	00045f08 	.word	0x00045f08
   32944:	00045fb0 	.word	0x00045fb0
   32948:	0004cf2f 	.word	0x0004cf2f

0003294c <start>:
{
   3294c:	b510      	push	{r4, lr}
	struct gps_sim_data *drv_data = dev->driver_data;
   3294e:	6880      	ldr	r0, [r0, #8]
	if ((dev == NULL) || (cfg == NULL)) {
   32950:	b369      	cbz	r1, 329ae <start+0x62>
	if (drv_data->state != GPS_SIM_IDLE) {
   32952:	7903      	ldrb	r3, [r0, #4]
   32954:	2b01      	cmp	r3, #1
   32956:	d014      	beq.n	32982 <start+0x36>
		LOG_ERR("The GPS must be initialized and stopped first");
   32958:	4b20      	ldr	r3, [pc, #128]	; (329dc <start+0x90>)
   3295a:	681b      	ldr	r3, [r3, #0]
   3295c:	075a      	lsls	r2, r3, #29
   3295e:	d00d      	beq.n	3297c <start+0x30>
   32960:	2301      	movs	r3, #1
   32962:	f04f 0100 	mov.w	r1, #0
   32966:	4a1e      	ldr	r2, [pc, #120]	; (329e0 <start+0x94>)
   32968:	f363 0107 	bfi	r1, r3, #0, #8
   3296c:	4b1d      	ldr	r3, [pc, #116]	; (329e4 <start+0x98>)
   3296e:	481e      	ldr	r0, [pc, #120]	; (329e8 <start+0x9c>)
   32970:	1a9b      	subs	r3, r3, r2
   32972:	08db      	lsrs	r3, r3, #3
   32974:	f363 118f 	bfi	r1, r3, #6, #10
   32978:	f00e f863 	bl	40a42 <log_0>
		return -EALREADY;
   3297c:	f06f 0077 	mvn.w	r0, #119	; 0x77
   32980:	e02a      	b.n	329d8 <start+0x8c>
	if (cfg->timeout >= cfg->interval) {
   32982:	e9d1 3201 	ldrd	r3, r2, [r1, #4]
   32986:	429a      	cmp	r2, r3
   32988:	d314      	bcc.n	329b4 <start+0x68>
		LOG_ERR("The timeout must be less than the interval");
   3298a:	4b14      	ldr	r3, [pc, #80]	; (329dc <start+0x90>)
   3298c:	681b      	ldr	r3, [r3, #0]
   3298e:	075b      	lsls	r3, r3, #29
   32990:	d00d      	beq.n	329ae <start+0x62>
   32992:	2301      	movs	r3, #1
   32994:	f04f 0100 	mov.w	r1, #0
   32998:	4a11      	ldr	r2, [pc, #68]	; (329e0 <start+0x94>)
   3299a:	f363 0107 	bfi	r1, r3, #0, #8
   3299e:	4b11      	ldr	r3, [pc, #68]	; (329e4 <start+0x98>)
   329a0:	4812      	ldr	r0, [pc, #72]	; (329ec <start+0xa0>)
   329a2:	1a9b      	subs	r3, r3, r2
   329a4:	08db      	lsrs	r3, r3, #3
   329a6:	f363 118f 	bfi	r1, r3, #6, #10
   329aa:	f00e f84a 	bl	40a42 <log_0>
		return -EINVAL;
   329ae:	f06f 0015 	mvn.w	r0, #21
   329b2:	e011      	b.n	329d8 <start+0x8c>
   329b4:	f100 030c 	add.w	r3, r0, #12
   329b8:	f101 0210 	add.w	r2, r1, #16
   329bc:	f851 4b04 	ldr.w	r4, [r1], #4
   329c0:	4291      	cmp	r1, r2
   329c2:	f843 4b04 	str.w	r4, [r3], #4
   329c6:	d1f9      	bne.n	329bc <start+0x70>
	k_delayed_work_submit_to_queue(&drv_data->work_q,
   329c8:	f100 0170 	add.w	r1, r0, #112	; 0x70
   329cc:	2200      	movs	r2, #0
   329ce:	f500 600f 	add.w	r0, r0, #2288	; 0x8f0
   329d2:	f00b f829 	bl	3da28 <k_delayed_work_submit_to_queue>
	return 0;
   329d6:	2000      	movs	r0, #0
}
   329d8:	bd10      	pop	{r4, pc}
   329da:	bf00      	nop
   329dc:	20032ad8 	.word	0x20032ad8
   329e0:	00045f08 	.word	0x00045f08
   329e4:	00045fb0 	.word	0x00045fb0
   329e8:	0004cec7 	.word	0x0004cec7
   329ec:	0004cef5 	.word	0x0004cef5

000329f0 <rpc_logobj_client_evt_handler>:
   329f0:	b120      	cbz	r0, 329fc <rpc_logobj_client_evt_handler+0xc>
   329f2:	f850 1b08 	ldr.w	r1, [r0], #8
   329f6:	0c09      	lsrs	r1, r1, #16
   329f8:	f000 b852 	b.w	32aa0 <logobj_event_handler>
   329fc:	4770      	bx	lr
   329fe:	bf00      	nop

00032a00 <rpc_logobj_client_init>:
   32a00:	4801      	ldr	r0, [pc, #4]	; (32a08 <rpc_logobj_client_init+0x8>)
   32a02:	f006 bbd1 	b.w	391a8 <rpc_client_register>
   32a06:	bf00      	nop
   32a08:	00046f98 	.word	0x00046f98

00032a0c <rpc_logobj_client_request_alloc>:
   32a0c:	2300      	movs	r3, #0
   32a0e:	b510      	push	{r4, lr}
   32a10:	b082      	sub	sp, #8
   32a12:	9301      	str	r3, [sp, #4]
   32a14:	b961      	cbnz	r1, 32a30 <rpc_logobj_client_request_alloc+0x24>
   32a16:	b170      	cbz	r0, 32a36 <rpc_logobj_client_request_alloc+0x2a>
   32a18:	4604      	mov	r4, r0
   32a1a:	aa01      	add	r2, sp, #4
   32a1c:	2009      	movs	r0, #9
   32a1e:	f006 fdfb 	bl	39618 <rpc_message_alloc>
   32a22:	b918      	cbnz	r0, 32a2c <rpc_logobj_client_request_alloc+0x20>
   32a24:	9b01      	ldr	r3, [sp, #4]
   32a26:	b10b      	cbz	r3, 32a2c <rpc_logobj_client_request_alloc+0x20>
   32a28:	3308      	adds	r3, #8
   32a2a:	6023      	str	r3, [r4, #0]
   32a2c:	b002      	add	sp, #8
   32a2e:	bd10      	pop	{r4, pc}
   32a30:	200f      	movs	r0, #15
   32a32:	b002      	add	sp, #8
   32a34:	bd10      	pop	{r4, pc}
   32a36:	200e      	movs	r0, #14
   32a38:	b002      	add	sp, #8
   32a3a:	bd10      	pop	{r4, pc}

00032a3c <rpc_logobj_client_request_send>:
   32a3c:	f401 4370 	and.w	r3, r1, #61440	; 0xf000
   32a40:	f5b3 4fe0 	cmp.w	r3, #28672	; 0x7000
   32a44:	d10b      	bne.n	32a5e <rpc_logobj_client_request_send+0x22>
   32a46:	b160      	cbz	r0, 32a62 <rpc_logobj_client_request_send+0x26>
   32a48:	4603      	mov	r3, r0
   32a4a:	f830 2c08 	ldrh.w	r2, [r0, #-8]
   32a4e:	2009      	movs	r0, #9
   32a50:	ea42 4101 	orr.w	r1, r2, r1, lsl #16
   32a54:	f843 1d08 	str.w	r1, [r3, #-8]!
   32a58:	4619      	mov	r1, r3
   32a5a:	f006 bdc5 	b.w	395e8 <rpc_message_send>
   32a5e:	200f      	movs	r0, #15
   32a60:	4770      	bx	lr
   32a62:	200e      	movs	r0, #14
   32a64:	4770      	bx	lr
   32a66:	bf00      	nop

00032a68 <rpc_logobj_client_message_free>:
   32a68:	b120      	cbz	r0, 32a74 <rpc_logobj_client_message_free+0xc>
   32a6a:	f1a0 0108 	sub.w	r1, r0, #8
   32a6e:	2009      	movs	r0, #9
   32a70:	f006 be04 	b.w	3967c <rpc_message_free>
   32a74:	200e      	movs	r0, #14
   32a76:	4770      	bx	lr

00032a78 <rpc_logobj_client_data_free>:
   32a78:	b118      	cbz	r0, 32a82 <rpc_logobj_client_data_free+0xa>
   32a7a:	4601      	mov	r1, r0
   32a7c:	2009      	movs	r0, #9
   32a7e:	f006 bf0f 	b.w	398a0 <rpc_message_data_free>
   32a82:	200e      	movs	r0, #14
   32a84:	4770      	bx	lr
   32a86:	bf00      	nop

00032a88 <packet_free_cb>:
   32a88:	b510      	push	{r4, lr}
   32a8a:	4604      	mov	r4, r0
   32a8c:	6800      	ldr	r0, [r0, #0]
   32a8e:	f7ff fff3 	bl	32a78 <rpc_logobj_client_data_free>
   32a92:	68a0      	ldr	r0, [r4, #8]
   32a94:	b118      	cbz	r0, 32a9e <packet_free_cb+0x16>
   32a96:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   32a9a:	f001 b935 	b.w	33d08 <nrf_free>
   32a9e:	bd10      	pop	{r4, pc}

00032aa0 <logobj_event_handler>:
   32aa0:	b530      	push	{r4, r5, lr}
   32aa2:	4b3b      	ldr	r3, [pc, #236]	; (32b90 <logobj_event_handler+0xf0>)
   32aa4:	b085      	sub	sp, #20
   32aa6:	681d      	ldr	r5, [r3, #0]
   32aa8:	2d00      	cmp	r5, #0
   32aaa:	d04c      	beq.n	32b46 <logobj_event_handler+0xa6>
   32aac:	f248 0302 	movw	r3, #32770	; 0x8002
   32ab0:	4299      	cmp	r1, r3
   32ab2:	d053      	beq.n	32b5c <logobj_event_handler+0xbc>
   32ab4:	d91c      	bls.n	32af0 <logobj_event_handler+0x50>
   32ab6:	f248 0303 	movw	r3, #32771	; 0x8003
   32aba:	4299      	cmp	r1, r3
   32abc:	d05a      	beq.n	32b74 <logobj_event_handler+0xd4>
   32abe:	f249 0301 	movw	r3, #36865	; 0x9001
   32ac2:	4299      	cmp	r1, r3
   32ac4:	d147      	bne.n	32b56 <logobj_event_handler+0xb6>
   32ac6:	2400      	movs	r4, #0
   32ac8:	6843      	ldr	r3, [r0, #4]
   32aca:	6802      	ldr	r2, [r0, #0]
   32acc:	e9cd 4402 	strd	r4, r4, [sp, #8]
   32ad0:	e9cd 2300 	strd	r2, r3, [sp]
   32ad4:	69e8      	ldr	r0, [r5, #28]
   32ad6:	4669      	mov	r1, sp
   32ad8:	6803      	ldr	r3, [r0, #0]
   32ada:	685b      	ldr	r3, [r3, #4]
   32adc:	4798      	blx	r3
   32ade:	3001      	adds	r0, #1
   32ae0:	d04e      	beq.n	32b80 <logobj_event_handler+0xe0>
   32ae2:	4620      	mov	r0, r4
   32ae4:	682b      	ldr	r3, [r5, #0]
   32ae6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   32aea:	602b      	str	r3, [r5, #0]
   32aec:	b005      	add	sp, #20
   32aee:	bd30      	pop	{r4, r5, pc}
   32af0:	f248 0301 	movw	r3, #32769	; 0x8001
   32af4:	4299      	cmp	r1, r3
   32af6:	d12e      	bne.n	32b56 <logobj_event_handler+0xb6>
   32af8:	68c3      	ldr	r3, [r0, #12]
   32afa:	2b00      	cmp	r3, #0
   32afc:	d135      	bne.n	32b6a <logobj_event_handler+0xca>
   32afe:	6828      	ldr	r0, [r5, #0]
   32b00:	f410 0080 	ands.w	r0, r0, #4194304	; 0x400000
   32b04:	d03e      	beq.n	32b84 <logobj_event_handler+0xe4>
   32b06:	682b      	ldr	r3, [r5, #0]
   32b08:	b29b      	uxth	r3, r3
   32b0a:	2b01      	cmp	r3, #1
   32b0c:	d105      	bne.n	32b1a <logobj_event_handler+0x7a>
   32b0e:	682b      	ldr	r3, [r5, #0]
   32b10:	0c1b      	lsrs	r3, r3, #16
   32b12:	041b      	lsls	r3, r3, #16
   32b14:	f043 0302 	orr.w	r3, r3, #2
   32b18:	602b      	str	r3, [r5, #0]
   32b1a:	4b1e      	ldr	r3, [pc, #120]	; (32b94 <logobj_event_handler+0xf4>)
   32b1c:	781a      	ldrb	r2, [r3, #0]
   32b1e:	f002 01ff 	and.w	r1, r2, #255	; 0xff
   32b22:	2a00      	cmp	r2, #0
   32b24:	d031      	beq.n	32b8a <logobj_event_handler+0xea>
   32b26:	4a1c      	ldr	r2, [pc, #112]	; (32b98 <logobj_event_handler+0xf8>)
   32b28:	7811      	ldrb	r1, [r2, #0]
   32b2a:	b909      	cbnz	r1, 32b30 <logobj_event_handler+0x90>
   32b2c:	2101      	movs	r1, #1
   32b2e:	7011      	strb	r1, [r2, #0]
   32b30:	2000      	movs	r0, #0
   32b32:	7018      	strb	r0, [r3, #0]
   32b34:	682b      	ldr	r3, [r5, #0]
   32b36:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
   32b3a:	602b      	str	r3, [r5, #0]
   32b3c:	682b      	ldr	r3, [r5, #0]
   32b3e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
   32b42:	602b      	str	r3, [r5, #0]
   32b44:	e7d2      	b.n	32aec <logobj_event_handler+0x4c>
   32b46:	6800      	ldr	r0, [r0, #0]
   32b48:	2800      	cmp	r0, #0
   32b4a:	d0cf      	beq.n	32aec <logobj_event_handler+0x4c>
   32b4c:	f7ff ff94 	bl	32a78 <rpc_logobj_client_data_free>
   32b50:	4628      	mov	r0, r5
   32b52:	b005      	add	sp, #20
   32b54:	bd30      	pop	{r4, r5, pc}
   32b56:	2000      	movs	r0, #0
   32b58:	b005      	add	sp, #20
   32b5a:	bd30      	pop	{r4, r5, pc}
   32b5c:	682b      	ldr	r3, [r5, #0]
   32b5e:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
   32b62:	d00b      	beq.n	32b7c <logobj_event_handler+0xdc>
   32b64:	68c0      	ldr	r0, [r0, #12]
   32b66:	2800      	cmp	r0, #0
   32b68:	d0e4      	beq.n	32b34 <logobj_event_handler+0x94>
   32b6a:	230e      	movs	r3, #14
   32b6c:	2000      	movs	r0, #0
   32b6e:	606b      	str	r3, [r5, #4]
   32b70:	b005      	add	sp, #20
   32b72:	bd30      	pop	{r4, r5, pc}
   32b74:	68c3      	ldr	r3, [r0, #12]
   32b76:	2b01      	cmp	r3, #1
   32b78:	d1a5      	bne.n	32ac6 <logobj_event_handler+0x26>
   32b7a:	e7f6      	b.n	32b6a <logobj_event_handler+0xca>
   32b7c:	4618      	mov	r0, r3
   32b7e:	e7b5      	b.n	32aec <logobj_event_handler+0x4c>
   32b80:	2002      	movs	r0, #2
   32b82:	e7b3      	b.n	32aec <logobj_event_handler+0x4c>
   32b84:	230e      	movs	r3, #14
   32b86:	606b      	str	r3, [r5, #4]
   32b88:	e7b0      	b.n	32aec <logobj_event_handler+0x4c>
   32b8a:	4a03      	ldr	r2, [pc, #12]	; (32b98 <logobj_event_handler+0xf8>)
   32b8c:	7011      	strb	r1, [r2, #0]
   32b8e:	e7cf      	b.n	32b30 <logobj_event_handler+0x90>
   32b90:	20024e60 	.word	0x20024e60
   32b94:	2002b4e3 	.word	0x2002b4e3
   32b98:	2002b4e4 	.word	0x2002b4e4

00032b9c <logobj_interface_init>:
   32b9c:	2300      	movs	r3, #0
   32b9e:	b510      	push	{r4, lr}
   32ba0:	4907      	ldr	r1, [pc, #28]	; (32bc0 <logobj_interface_init+0x24>)
   32ba2:	4a08      	ldr	r2, [pc, #32]	; (32bc4 <logobj_interface_init+0x28>)
   32ba4:	4c08      	ldr	r4, [pc, #32]	; (32bc8 <logobj_interface_init+0x2c>)
   32ba6:	4809      	ldr	r0, [pc, #36]	; (32bcc <logobj_interface_init+0x30>)
   32ba8:	7023      	strb	r3, [r4, #0]
   32baa:	6003      	str	r3, [r0, #0]
   32bac:	700b      	strb	r3, [r1, #0]
   32bae:	6013      	str	r3, [r2, #0]
   32bb0:	f7ff ff26 	bl	32a00 <rpc_logobj_client_init>
   32bb4:	3000      	adds	r0, #0
   32bb6:	bf18      	it	ne
   32bb8:	2001      	movne	r0, #1
   32bba:	4240      	negs	r0, r0
   32bbc:	bd10      	pop	{r4, pc}
   32bbe:	bf00      	nop
   32bc0:	2002b4e3 	.word	0x2002b4e3
   32bc4:	20024e5c 	.word	0x20024e5c
   32bc8:	2002b4e4 	.word	0x2002b4e4
   32bcc:	20024e60 	.word	0x20024e60

00032bd0 <logobj_interface_open>:
   32bd0:	2300      	movs	r3, #0
   32bd2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   32bd6:	2866      	cmp	r0, #102	; 0x66
   32bd8:	b082      	sub	sp, #8
   32bda:	9300      	str	r3, [sp, #0]
   32bdc:	d172      	bne.n	32cc4 <logobj_interface_open+0xf4>
   32bde:	2902      	cmp	r1, #2
   32be0:	4689      	mov	r9, r1
   32be2:	d16f      	bne.n	32cc4 <logobj_interface_open+0xf4>
   32be4:	f240 2305 	movw	r3, #517	; 0x205
   32be8:	429a      	cmp	r2, r3
   32bea:	4692      	mov	sl, r2
   32bec:	d16a      	bne.n	32cc4 <logobj_interface_open+0xf4>
   32bee:	4f48      	ldr	r7, [pc, #288]	; (32d10 <logobj_interface_open+0x140>)
   32bf0:	683d      	ldr	r5, [r7, #0]
   32bf2:	2d00      	cmp	r5, #0
   32bf4:	d17c      	bne.n	32cf0 <logobj_interface_open+0x120>
   32bf6:	4680      	mov	r8, r0
   32bf8:	4a46      	ldr	r2, [pc, #280]	; (32d14 <logobj_interface_open+0x144>)
   32bfa:	4668      	mov	r0, sp
   32bfc:	f006 f872 	bl	38ce4 <interface_socket_allocate>
   32c00:	9b00      	ldr	r3, [sp, #0]
   32c02:	4606      	mov	r6, r0
   32c04:	2b00      	cmp	r3, #0
   32c06:	d07d      	beq.n	32d04 <logobj_interface_open+0x134>
   32c08:	4629      	mov	r1, r5
   32c0a:	2204      	movs	r2, #4
   32c0c:	4842      	ldr	r0, [pc, #264]	; (32d18 <logobj_interface_open+0x148>)
   32c0e:	603b      	str	r3, [r7, #0]
   32c10:	f012 f958 	bl	44ec4 <memset>
   32c14:	9c00      	ldr	r4, [sp, #0]
   32c16:	4629      	mov	r1, r5
   32c18:	e9c4 8903 	strd	r8, r9, [r4, #12]
   32c1c:	f8c4 a014 	str.w	sl, [r4, #20]
   32c20:	a801      	add	r0, sp, #4
   32c22:	f7ff fef3 	bl	32a0c <rpc_logobj_client_request_alloc>
   32c26:	2800      	cmp	r0, #0
   32c28:	d13c      	bne.n	32ca4 <logobj_interface_open+0xd4>
   32c2a:	2201      	movs	r2, #1
   32c2c:	2104      	movs	r1, #4
   32c2e:	9b01      	ldr	r3, [sp, #4]
   32c30:	4d3a      	ldr	r5, [pc, #232]	; (32d1c <logobj_interface_open+0x14c>)
   32c32:	7358      	strb	r0, [r3, #13]
   32c34:	7398      	strb	r0, [r3, #14]
   32c36:	73d8      	strb	r0, [r3, #15]
   32c38:	7258      	strb	r0, [r3, #9]
   32c3a:	7298      	strb	r0, [r3, #10]
   32c3c:	72d8      	strb	r0, [r3, #11]
   32c3e:	7219      	strb	r1, [r3, #8]
   32c40:	702a      	strb	r2, [r5, #0]
   32c42:	731a      	strb	r2, [r3, #12]
   32c44:	6822      	ldr	r2, [r4, #0]
   32c46:	4618      	mov	r0, r3
   32c48:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
   32c4c:	6022      	str	r2, [r4, #0]
   32c4e:	f247 0101 	movw	r1, #28673	; 0x7001
   32c52:	f7ff fef3 	bl	32a3c <rpc_logobj_client_request_send>
   32c56:	bb38      	cbnz	r0, 32ca8 <logobj_interface_open+0xd8>
   32c58:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
   32c5c:	f04f 33ff 	mov.w	r3, #4294967295
   32c60:	4611      	mov	r1, r2
   32c62:	4630      	mov	r0, r6
   32c64:	f006 f8f0 	bl	38e48 <interface_socket_wait>
   32c68:	4604      	mov	r4, r0
   32c6a:	b310      	cbz	r0, 32cb2 <logobj_interface_open+0xe2>
   32c6c:	9a00      	ldr	r2, [sp, #0]
   32c6e:	2e00      	cmp	r6, #0
   32c70:	6813      	ldr	r3, [r2, #0]
   32c72:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   32c76:	6013      	str	r3, [r2, #0]
   32c78:	9a00      	ldr	r2, [sp, #0]
   32c7a:	6813      	ldr	r3, [r2, #0]
   32c7c:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
   32c80:	6013      	str	r3, [r2, #0]
   32c82:	9a00      	ldr	r2, [sp, #0]
   32c84:	6813      	ldr	r3, [r2, #0]
   32c86:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
   32c8a:	6013      	str	r3, [r2, #0]
   32c8c:	da36      	bge.n	32cfc <logobj_interface_open+0x12c>
   32c8e:	2300      	movs	r3, #0
   32c90:	4620      	mov	r0, r4
   32c92:	603b      	str	r3, [r7, #0]
   32c94:	f04f 36ff 	mov.w	r6, #4294967295
   32c98:	f7fd fa7c 	bl	30194 <bsd_os_errno_set>
   32c9c:	4630      	mov	r0, r6
   32c9e:	b002      	add	sp, #8
   32ca0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   32ca4:	240c      	movs	r4, #12
   32ca6:	e7e1      	b.n	32c6c <logobj_interface_open+0x9c>
   32ca8:	9801      	ldr	r0, [sp, #4]
   32caa:	f7ff fedd 	bl	32a68 <rpc_logobj_client_message_free>
   32cae:	2405      	movs	r4, #5
   32cb0:	e7dc      	b.n	32c6c <logobj_interface_open+0x9c>
   32cb2:	4630      	mov	r0, r6
   32cb4:	f006 f93c 	bl	38f30 <interface_socket_from_handle_get>
   32cb8:	b150      	cbz	r0, 32cd0 <logobj_interface_open+0x100>
   32cba:	6844      	ldr	r4, [r0, #4]
   32cbc:	b144      	cbz	r4, 32cd0 <logobj_interface_open+0x100>
   32cbe:	2300      	movs	r3, #0
   32cc0:	6043      	str	r3, [r0, #4]
   32cc2:	e7d3      	b.n	32c6c <logobj_interface_open+0x9c>
   32cc4:	2016      	movs	r0, #22
   32cc6:	f7fd fa65 	bl	30194 <bsd_os_errno_set>
   32cca:	f04f 36ff 	mov.w	r6, #4294967295
   32cce:	e7e5      	b.n	32c9c <logobj_interface_open+0xcc>
   32cd0:	9a00      	ldr	r2, [sp, #0]
   32cd2:	6813      	ldr	r3, [r2, #0]
   32cd4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   32cd8:	6013      	str	r3, [r2, #0]
   32cda:	9a00      	ldr	r2, [sp, #0]
   32cdc:	6813      	ldr	r3, [r2, #0]
   32cde:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
   32ce2:	6013      	str	r3, [r2, #0]
   32ce4:	9a00      	ldr	r2, [sp, #0]
   32ce6:	6813      	ldr	r3, [r2, #0]
   32ce8:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
   32cec:	6013      	str	r3, [r2, #0]
   32cee:	e7d5      	b.n	32c9c <logobj_interface_open+0xcc>
   32cf0:	2001      	movs	r0, #1
   32cf2:	f7fd fa4f 	bl	30194 <bsd_os_errno_set>
   32cf6:	f04f 36ff 	mov.w	r6, #4294967295
   32cfa:	e7cf      	b.n	32c9c <logobj_interface_open+0xcc>
   32cfc:	4630      	mov	r0, r6
   32cfe:	f006 f855 	bl	38dac <interface_socket_free>
   32d02:	e7c4      	b.n	32c8e <logobj_interface_open+0xbe>
   32d04:	2018      	movs	r0, #24
   32d06:	f7fd fa45 	bl	30194 <bsd_os_errno_set>
   32d0a:	f04f 36ff 	mov.w	r6, #4294967295
   32d0e:	e7c5      	b.n	32c9c <logobj_interface_open+0xcc>
   32d10:	20024e60 	.word	0x20024e60
   32d14:	00032a89 	.word	0x00032a89
   32d18:	20024e5c 	.word	0x20024e5c
   32d1c:	2002b4e3 	.word	0x2002b4e3

00032d20 <logobj_interface_read>:
   32d20:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   32d24:	b085      	sub	sp, #20
   32d26:	2900      	cmp	r1, #0
   32d28:	d068      	beq.n	32dfc <logobj_interface_read+0xdc>
   32d2a:	2a00      	cmp	r2, #0
   32d2c:	4617      	mov	r7, r2
   32d2e:	dd65      	ble.n	32dfc <logobj_interface_read+0xdc>
   32d30:	461d      	mov	r5, r3
   32d32:	4680      	mov	r8, r0
   32d34:	460e      	mov	r6, r1
   32d36:	f006 f8fb 	bl	38f30 <interface_socket_from_handle_get>
   32d3a:	4604      	mov	r4, r0
   32d3c:	2800      	cmp	r0, #0
   32d3e:	d063      	beq.n	32e08 <logobj_interface_read+0xe8>
   32d40:	bb4d      	cbnz	r5, 32d96 <logobj_interface_read+0x76>
   32d42:	69e0      	ldr	r0, [r4, #28]
   32d44:	07aa      	lsls	r2, r5, #30
   32d46:	6803      	ldr	r3, [r0, #0]
   32d48:	68db      	ldr	r3, [r3, #12]
   32d4a:	d52d      	bpl.n	32da8 <logobj_interface_read+0x88>
   32d4c:	4798      	blx	r3
   32d4e:	3001      	adds	r0, #1
   32d50:	d044      	beq.n	32ddc <logobj_interface_read+0xbc>
   32d52:	6823      	ldr	r3, [r4, #0]
   32d54:	69e0      	ldr	r0, [r4, #28]
   32d56:	f413 3380 	ands.w	r3, r3, #65536	; 0x10000
   32d5a:	d041      	beq.n	32de0 <logobj_interface_read+0xc0>
   32d5c:	2100      	movs	r1, #0
   32d5e:	6823      	ldr	r3, [r4, #0]
   32d60:	462a      	mov	r2, r5
   32d62:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
   32d66:	6023      	str	r3, [r4, #0]
   32d68:	e9cd 1102 	strd	r1, r1, [sp, #8]
   32d6c:	e9cd 6700 	strd	r6, r7, [sp]
   32d70:	6803      	ldr	r3, [r0, #0]
   32d72:	4669      	mov	r1, sp
   32d74:	689b      	ldr	r3, [r3, #8]
   32d76:	4798      	blx	r3
   32d78:	4605      	mov	r5, r0
   32d7a:	69e0      	ldr	r0, [r4, #28]
   32d7c:	6803      	ldr	r3, [r0, #0]
   32d7e:	68db      	ldr	r3, [r3, #12]
   32d80:	4798      	blx	r3
   32d82:	3001      	adds	r0, #1
   32d84:	d003      	beq.n	32d8e <logobj_interface_read+0x6e>
   32d86:	6823      	ldr	r3, [r4, #0]
   32d88:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   32d8c:	6023      	str	r3, [r4, #0]
   32d8e:	4628      	mov	r0, r5
   32d90:	b005      	add	sp, #20
   32d92:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   32d96:	f015 0f0a 	tst.w	r5, #10
   32d9a:	d1d2      	bne.n	32d42 <logobj_interface_read+0x22>
   32d9c:	202d      	movs	r0, #45	; 0x2d
   32d9e:	f7fd f9f9 	bl	30194 <bsd_os_errno_set>
   32da2:	f04f 35ff 	mov.w	r5, #4294967295
   32da6:	e7f2      	b.n	32d8e <logobj_interface_read+0x6e>
   32da8:	6822      	ldr	r2, [r4, #0]
   32daa:	f012 5980 	ands.w	r9, r2, #268435456	; 0x10000000
   32dae:	d1cd      	bne.n	32d4c <logobj_interface_read+0x2c>
   32db0:	4798      	blx	r3
   32db2:	1c43      	adds	r3, r0, #1
   32db4:	d1cd      	bne.n	32d52 <logobj_interface_read+0x32>
   32db6:	f44f 3280 	mov.w	r2, #65536	; 0x10000
   32dba:	6a23      	ldr	r3, [r4, #32]
   32dbc:	4611      	mov	r1, r2
   32dbe:	2b00      	cmp	r3, #0
   32dc0:	bf08      	it	eq
   32dc2:	4603      	moveq	r3, r0
   32dc4:	4640      	mov	r0, r8
   32dc6:	f006 f83f 	bl	38e48 <interface_socket_wait>
   32dca:	b158      	cbz	r0, 32de4 <logobj_interface_read+0xc4>
   32dcc:	f04f 35ff 	mov.w	r5, #4294967295
   32dd0:	f7fd f9e0 	bl	30194 <bsd_os_errno_set>
   32dd4:	4628      	mov	r0, r5
   32dd6:	b005      	add	sp, #20
   32dd8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   32ddc:	2023      	movs	r0, #35	; 0x23
   32dde:	e7f5      	b.n	32dcc <logobj_interface_read+0xac>
   32de0:	461d      	mov	r5, r3
   32de2:	e7cb      	b.n	32d7c <logobj_interface_read+0x5c>
   32de4:	4640      	mov	r0, r8
   32de6:	f006 f8a3 	bl	38f30 <interface_socket_from_handle_get>
   32dea:	4603      	mov	r3, r0
   32dec:	2800      	cmp	r0, #0
   32dee:	d0b0      	beq.n	32d52 <logobj_interface_read+0x32>
   32df0:	6840      	ldr	r0, [r0, #4]
   32df2:	2800      	cmp	r0, #0
   32df4:	d0ad      	beq.n	32d52 <logobj_interface_read+0x32>
   32df6:	f8c3 9004 	str.w	r9, [r3, #4]
   32dfa:	e7e7      	b.n	32dcc <logobj_interface_read+0xac>
   32dfc:	2016      	movs	r0, #22
   32dfe:	f7fd f9c9 	bl	30194 <bsd_os_errno_set>
   32e02:	f04f 35ff 	mov.w	r5, #4294967295
   32e06:	e7c2      	b.n	32d8e <logobj_interface_read+0x6e>
   32e08:	2009      	movs	r0, #9
   32e0a:	f7fd f9c3 	bl	30194 <bsd_os_errno_set>
   32e0e:	f04f 35ff 	mov.w	r5, #4294967295
   32e12:	e7bc      	b.n	32d8e <logobj_interface_read+0x6e>

00032e14 <logobj_interface_write>:
   32e14:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   32e18:	b082      	sub	sp, #8
   32e1a:	2900      	cmp	r1, #0
   32e1c:	d05e      	beq.n	32edc <logobj_interface_write+0xc8>
   32e1e:	2a04      	cmp	r2, #4
   32e20:	d15c      	bne.n	32edc <logobj_interface_write+0xc8>
   32e22:	461e      	mov	r6, r3
   32e24:	4607      	mov	r7, r0
   32e26:	460d      	mov	r5, r1
   32e28:	f006 f882 	bl	38f30 <interface_socket_from_handle_get>
   32e2c:	4604      	mov	r4, r0
   32e2e:	2800      	cmp	r0, #0
   32e30:	d070      	beq.n	32f14 <logobj_interface_write+0x100>
   32e32:	b1e6      	cbz	r6, 32e6e <logobj_interface_write+0x5a>
   32e34:	07b0      	lsls	r0, r6, #30
   32e36:	d567      	bpl.n	32f08 <logobj_interface_write+0xf4>
   32e38:	6823      	ldr	r3, [r4, #0]
   32e3a:	039b      	lsls	r3, r3, #14
   32e3c:	d560      	bpl.n	32f00 <logobj_interface_write+0xec>
   32e3e:	2600      	movs	r6, #0
   32e40:	6823      	ldr	r3, [r4, #0]
   32e42:	2100      	movs	r1, #0
   32e44:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
   32e48:	6023      	str	r3, [r4, #0]
   32e4a:	a801      	add	r0, sp, #4
   32e4c:	f8d5 8000 	ldr.w	r8, [r5]
   32e50:	f7ff fddc 	bl	32a0c <rpc_logobj_client_request_alloc>
   32e54:	b198      	cbz	r0, 32e7e <logobj_interface_write+0x6a>
   32e56:	200c      	movs	r0, #12
   32e58:	6823      	ldr	r3, [r4, #0]
   32e5a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   32e5e:	6023      	str	r3, [r4, #0]
   32e60:	f7fd f998 	bl	30194 <bsd_os_errno_set>
   32e64:	f04f 30ff 	mov.w	r0, #4294967295
   32e68:	b002      	add	sp, #8
   32e6a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   32e6e:	6803      	ldr	r3, [r0, #0]
   32e70:	00d9      	lsls	r1, r3, #3
   32e72:	d4e1      	bmi.n	32e38 <logobj_interface_write+0x24>
   32e74:	6803      	ldr	r3, [r0, #0]
   32e76:	039a      	lsls	r2, r3, #14
   32e78:	d544      	bpl.n	32f04 <logobj_interface_write+0xf0>
   32e7a:	2601      	movs	r6, #1
   32e7c:	e7e0      	b.n	32e40 <logobj_interface_write+0x2c>
   32e7e:	2504      	movs	r5, #4
   32e80:	9b01      	ldr	r3, [sp, #4]
   32e82:	f247 0103 	movw	r1, #28675	; 0x7003
   32e86:	f8c3 800c 	str.w	r8, [r3, #12]
   32e8a:	7258      	strb	r0, [r3, #9]
   32e8c:	7298      	strb	r0, [r3, #10]
   32e8e:	72d8      	strb	r0, [r3, #11]
   32e90:	721d      	strb	r5, [r3, #8]
   32e92:	4618      	mov	r0, r3
   32e94:	f7ff fdd2 	bl	32a3c <rpc_logobj_client_request_send>
   32e98:	4680      	mov	r8, r0
   32e9a:	b9b0      	cbnz	r0, 32eca <logobj_interface_write+0xb6>
   32e9c:	b93e      	cbnz	r6, 32eae <logobj_interface_write+0x9a>
   32e9e:	4628      	mov	r0, r5
   32ea0:	6823      	ldr	r3, [r4, #0]
   32ea2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   32ea6:	6023      	str	r3, [r4, #0]
   32ea8:	b002      	add	sp, #8
   32eaa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   32eae:	f44f 3280 	mov.w	r2, #65536	; 0x10000
   32eb2:	f04f 33ff 	mov.w	r3, #4294967295
   32eb6:	4611      	mov	r1, r2
   32eb8:	4638      	mov	r0, r7
   32eba:	f005 ffc5 	bl	38e48 <interface_socket_wait>
   32ebe:	b198      	cbz	r0, 32ee8 <logobj_interface_write+0xd4>
   32ec0:	6823      	ldr	r3, [r4, #0]
   32ec2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   32ec6:	6023      	str	r3, [r4, #0]
   32ec8:	e7ca      	b.n	32e60 <logobj_interface_write+0x4c>
   32eca:	9801      	ldr	r0, [sp, #4]
   32ecc:	f7ff fdcc 	bl	32a68 <rpc_logobj_client_message_free>
   32ed0:	6823      	ldr	r3, [r4, #0]
   32ed2:	2005      	movs	r0, #5
   32ed4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   32ed8:	6023      	str	r3, [r4, #0]
   32eda:	e7c1      	b.n	32e60 <logobj_interface_write+0x4c>
   32edc:	2016      	movs	r0, #22
   32ede:	f7fd f959 	bl	30194 <bsd_os_errno_set>
   32ee2:	f04f 30ff 	mov.w	r0, #4294967295
   32ee6:	e7bf      	b.n	32e68 <logobj_interface_write+0x54>
   32ee8:	4638      	mov	r0, r7
   32eea:	f006 f821 	bl	38f30 <interface_socket_from_handle_get>
   32eee:	4603      	mov	r3, r0
   32ef0:	2800      	cmp	r0, #0
   32ef2:	d0d4      	beq.n	32e9e <logobj_interface_write+0x8a>
   32ef4:	6840      	ldr	r0, [r0, #4]
   32ef6:	2800      	cmp	r0, #0
   32ef8:	d0d1      	beq.n	32e9e <logobj_interface_write+0x8a>
   32efa:	f8c3 8004 	str.w	r8, [r3, #4]
   32efe:	e7df      	b.n	32ec0 <logobj_interface_write+0xac>
   32f00:	2073      	movs	r0, #115	; 0x73
   32f02:	e7ad      	b.n	32e60 <logobj_interface_write+0x4c>
   32f04:	2009      	movs	r0, #9
   32f06:	e7ab      	b.n	32e60 <logobj_interface_write+0x4c>
   32f08:	202d      	movs	r0, #45	; 0x2d
   32f0a:	f7fd f943 	bl	30194 <bsd_os_errno_set>
   32f0e:	f04f 30ff 	mov.w	r0, #4294967295
   32f12:	e7a9      	b.n	32e68 <logobj_interface_write+0x54>
   32f14:	2009      	movs	r0, #9
   32f16:	f7fd f93d 	bl	30194 <bsd_os_errno_set>
   32f1a:	f04f 30ff 	mov.w	r0, #4294967295
   32f1e:	e7a3      	b.n	32e68 <logobj_interface_write+0x54>

00032f20 <logobj_interface_setopt>:
   32f20:	b5f0      	push	{r4, r5, r6, r7, lr}
   32f22:	2901      	cmp	r1, #1
   32f24:	b085      	sub	sp, #20
   32f26:	d068      	beq.n	32ffa <logobj_interface_setopt+0xda>
   32f28:	461e      	mov	r6, r3
   32f2a:	f240 2305 	movw	r3, #517	; 0x205
   32f2e:	4299      	cmp	r1, r3
   32f30:	f040 8095 	bne.w	3305e <logobj_interface_setopt+0x13e>
   32f34:	4607      	mov	r7, r0
   32f36:	4615      	mov	r5, r2
   32f38:	f005 fffa 	bl	38f30 <interface_socket_from_handle_get>
   32f3c:	4604      	mov	r4, r0
   32f3e:	2800      	cmp	r0, #0
   32f40:	f000 80b2 	beq.w	330a8 <logobj_interface_setopt+0x188>
   32f44:	2d01      	cmp	r5, #1
   32f46:	d019      	beq.n	32f7c <logobj_interface_setopt+0x5c>
   32f48:	2d02      	cmp	r5, #2
   32f4a:	d010      	beq.n	32f6e <logobj_interface_setopt+0x4e>
   32f4c:	252a      	movs	r5, #42	; 0x2a
   32f4e:	6803      	ldr	r3, [r0, #0]
   32f50:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
   32f54:	6023      	str	r3, [r4, #0]
   32f56:	6823      	ldr	r3, [r4, #0]
   32f58:	4628      	mov	r0, r5
   32f5a:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
   32f5e:	6023      	str	r3, [r4, #0]
   32f60:	f7fd f918 	bl	30194 <bsd_os_errno_set>
   32f64:	f04f 35ff 	mov.w	r5, #4294967295
   32f68:	4628      	mov	r0, r5
   32f6a:	b005      	add	sp, #20
   32f6c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   32f6e:	b116      	cbz	r6, 32f76 <logobj_interface_setopt+0x56>
   32f70:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   32f72:	2b01      	cmp	r3, #1
   32f74:	d049      	beq.n	3300a <logobj_interface_setopt+0xea>
   32f76:	6823      	ldr	r3, [r4, #0]
   32f78:	2516      	movs	r5, #22
   32f7a:	e7e9      	b.n	32f50 <logobj_interface_setopt+0x30>
   32f7c:	2e00      	cmp	r6, #0
   32f7e:	d0fa      	beq.n	32f76 <logobj_interface_setopt+0x56>
   32f80:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   32f82:	2b04      	cmp	r3, #4
   32f84:	d1f7      	bne.n	32f76 <logobj_interface_setopt+0x56>
   32f86:	2100      	movs	r1, #0
   32f88:	a803      	add	r0, sp, #12
   32f8a:	f7ff fd3f 	bl	32a0c <rpc_logobj_client_request_alloc>
   32f8e:	4605      	mov	r5, r0
   32f90:	2800      	cmp	r0, #0
   32f92:	d16a      	bne.n	3306a <logobj_interface_setopt+0x14a>
   32f94:	9803      	ldr	r0, [sp, #12]
   32f96:	2208      	movs	r2, #8
   32f98:	4629      	mov	r1, r5
   32f9a:	300c      	adds	r0, #12
   32f9c:	f011 ff92 	bl	44ec4 <memset>
   32fa0:	9803      	ldr	r0, [sp, #12]
   32fa2:	4631      	mov	r1, r6
   32fa4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   32fa6:	300c      	adds	r0, #12
   32fa8:	f011 ff52 	bl	44e50 <memcpy>
   32fac:	2308      	movs	r3, #8
   32fae:	9803      	ldr	r0, [sp, #12]
   32fb0:	f247 0102 	movw	r1, #28674	; 0x7002
   32fb4:	7203      	strb	r3, [r0, #8]
   32fb6:	7245      	strb	r5, [r0, #9]
   32fb8:	7285      	strb	r5, [r0, #10]
   32fba:	72c5      	strb	r5, [r0, #11]
   32fbc:	6823      	ldr	r3, [r4, #0]
   32fbe:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
   32fc2:	6023      	str	r3, [r4, #0]
   32fc4:	f7ff fd3a 	bl	32a3c <rpc_logobj_client_request_send>
   32fc8:	2800      	cmp	r0, #0
   32fca:	d151      	bne.n	33070 <logobj_interface_setopt+0x150>
   32fcc:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
   32fd0:	f04f 33ff 	mov.w	r3, #4294967295
   32fd4:	4611      	mov	r1, r2
   32fd6:	4638      	mov	r0, r7
   32fd8:	f005 ff36 	bl	38e48 <interface_socket_wait>
   32fdc:	4605      	mov	r5, r0
   32fde:	2800      	cmp	r0, #0
   32fe0:	d13b      	bne.n	3305a <logobj_interface_setopt+0x13a>
   32fe2:	4638      	mov	r0, r7
   32fe4:	f005 ffa4 	bl	38f30 <interface_socket_from_handle_get>
   32fe8:	2800      	cmp	r0, #0
   32fea:	d04f      	beq.n	3308c <logobj_interface_setopt+0x16c>
   32fec:	6843      	ldr	r3, [r0, #4]
   32fee:	2b00      	cmp	r3, #0
   32ff0:	d04c      	beq.n	3308c <logobj_interface_setopt+0x16c>
   32ff2:	2200      	movs	r2, #0
   32ff4:	461d      	mov	r5, r3
   32ff6:	6042      	str	r2, [r0, #4]
   32ff8:	e02f      	b.n	3305a <logobj_interface_setopt+0x13a>
   32ffa:	9c0a      	ldr	r4, [sp, #40]	; 0x28
   32ffc:	9400      	str	r4, [sp, #0]
   32ffe:	f005 ffbf 	bl	38f80 <interface_socket_setopt>
   33002:	4605      	mov	r5, r0
   33004:	4628      	mov	r0, r5
   33006:	b005      	add	sp, #20
   33008:	bdf0      	pop	{r4, r5, r6, r7, pc}
   3300a:	2100      	movs	r1, #0
   3300c:	a803      	add	r0, sp, #12
   3300e:	7835      	ldrb	r5, [r6, #0]
   33010:	f7ff fcfc 	bl	32a0c <rpc_logobj_client_request_alloc>
   33014:	bb48      	cbnz	r0, 3306a <logobj_interface_setopt+0x14a>
   33016:	2d01      	cmp	r5, #1
   33018:	bf08      	it	eq
   3301a:	4b26      	ldreq	r3, [pc, #152]	; (330b4 <logobj_interface_setopt+0x194>)
   3301c:	f04f 0204 	mov.w	r2, #4
   33020:	bf08      	it	eq
   33022:	701d      	strbeq	r5, [r3, #0]
   33024:	2300      	movs	r3, #0
   33026:	9803      	ldr	r0, [sp, #12]
   33028:	f247 0101 	movw	r1, #28673	; 0x7001
   3302c:	7243      	strb	r3, [r0, #9]
   3302e:	60c5      	str	r5, [r0, #12]
   33030:	7283      	strb	r3, [r0, #10]
   33032:	72c3      	strb	r3, [r0, #11]
   33034:	7202      	strb	r2, [r0, #8]
   33036:	6823      	ldr	r3, [r4, #0]
   33038:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
   3303c:	6023      	str	r3, [r4, #0]
   3303e:	f7ff fcfd 	bl	32a3c <rpc_logobj_client_request_send>
   33042:	4606      	mov	r6, r0
   33044:	b9a0      	cbnz	r0, 33070 <logobj_interface_setopt+0x150>
   33046:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
   3304a:	f04f 33ff 	mov.w	r3, #4294967295
   3304e:	4611      	mov	r1, r2
   33050:	4638      	mov	r0, r7
   33052:	f005 fef9 	bl	38e48 <interface_socket_wait>
   33056:	4605      	mov	r5, r0
   33058:	b180      	cbz	r0, 3307c <logobj_interface_setopt+0x15c>
   3305a:	6823      	ldr	r3, [r4, #0]
   3305c:	e778      	b.n	32f50 <logobj_interface_setopt+0x30>
   3305e:	202a      	movs	r0, #42	; 0x2a
   33060:	f7fd f898 	bl	30194 <bsd_os_errno_set>
   33064:	f04f 35ff 	mov.w	r5, #4294967295
   33068:	e77e      	b.n	32f68 <logobj_interface_setopt+0x48>
   3306a:	6823      	ldr	r3, [r4, #0]
   3306c:	250c      	movs	r5, #12
   3306e:	e76f      	b.n	32f50 <logobj_interface_setopt+0x30>
   33070:	9803      	ldr	r0, [sp, #12]
   33072:	f7ff fcf9 	bl	32a68 <rpc_logobj_client_message_free>
   33076:	2505      	movs	r5, #5
   33078:	6823      	ldr	r3, [r4, #0]
   3307a:	e769      	b.n	32f50 <logobj_interface_setopt+0x30>
   3307c:	4638      	mov	r0, r7
   3307e:	f005 ff57 	bl	38f30 <interface_socket_from_handle_get>
   33082:	b140      	cbz	r0, 33096 <logobj_interface_setopt+0x176>
   33084:	6845      	ldr	r5, [r0, #4]
   33086:	b135      	cbz	r5, 33096 <logobj_interface_setopt+0x176>
   33088:	6046      	str	r6, [r0, #4]
   3308a:	e7e6      	b.n	3305a <logobj_interface_setopt+0x13a>
   3308c:	4631      	mov	r1, r6
   3308e:	2204      	movs	r2, #4
   33090:	4809      	ldr	r0, [pc, #36]	; (330b8 <logobj_interface_setopt+0x198>)
   33092:	f011 fedd 	bl	44e50 <memcpy>
   33096:	6823      	ldr	r3, [r4, #0]
   33098:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
   3309c:	6023      	str	r3, [r4, #0]
   3309e:	6823      	ldr	r3, [r4, #0]
   330a0:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
   330a4:	6023      	str	r3, [r4, #0]
   330a6:	e75f      	b.n	32f68 <logobj_interface_setopt+0x48>
   330a8:	2009      	movs	r0, #9
   330aa:	f7fd f873 	bl	30194 <bsd_os_errno_set>
   330ae:	f04f 35ff 	mov.w	r5, #4294967295
   330b2:	e759      	b.n	32f68 <logobj_interface_setopt+0x48>
   330b4:	2002b4e3 	.word	0x2002b4e3
   330b8:	20024e5c 	.word	0x20024e5c

000330bc <logobj_interface_getopt>:
   330bc:	b5f0      	push	{r4, r5, r6, r7, lr}
   330be:	2901      	cmp	r1, #1
   330c0:	b083      	sub	sp, #12
   330c2:	9e08      	ldr	r6, [sp, #32]
   330c4:	d030      	beq.n	33128 <logobj_interface_getopt+0x6c>
   330c6:	461f      	mov	r7, r3
   330c8:	f240 2305 	movw	r3, #517	; 0x205
   330cc:	4299      	cmp	r1, r3
   330ce:	d134      	bne.n	3313a <logobj_interface_getopt+0x7e>
   330d0:	4615      	mov	r5, r2
   330d2:	f005 ff2d 	bl	38f30 <interface_socket_from_handle_get>
   330d6:	2800      	cmp	r0, #0
   330d8:	d037      	beq.n	3314a <logobj_interface_getopt+0x8e>
   330da:	2d01      	cmp	r5, #1
   330dc:	d015      	beq.n	3310a <logobj_interface_getopt+0x4e>
   330de:	2d02      	cmp	r5, #2
   330e0:	d10b      	bne.n	330fa <logobj_interface_getopt+0x3e>
   330e2:	b387      	cbz	r7, 33146 <logobj_interface_getopt+0x8a>
   330e4:	6833      	ldr	r3, [r6, #0]
   330e6:	b373      	cbz	r3, 33146 <logobj_interface_getopt+0x8a>
   330e8:	2300      	movs	r3, #0
   330ea:	2201      	movs	r2, #1
   330ec:	4618      	mov	r0, r3
   330ee:	491a      	ldr	r1, [pc, #104]	; (33158 <logobj_interface_getopt+0x9c>)
   330f0:	7809      	ldrb	r1, [r1, #0]
   330f2:	7039      	strb	r1, [r7, #0]
   330f4:	6032      	str	r2, [r6, #0]
   330f6:	b003      	add	sp, #12
   330f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
   330fa:	2009      	movs	r0, #9
   330fc:	f7fd f84a 	bl	30194 <bsd_os_errno_set>
   33100:	f04f 33ff 	mov.w	r3, #4294967295
   33104:	4618      	mov	r0, r3
   33106:	b003      	add	sp, #12
   33108:	bdf0      	pop	{r4, r5, r6, r7, pc}
   3310a:	b1e7      	cbz	r7, 33146 <logobj_interface_getopt+0x8a>
   3310c:	6833      	ldr	r3, [r6, #0]
   3310e:	2b03      	cmp	r3, #3
   33110:	d919      	bls.n	33146 <logobj_interface_getopt+0x8a>
   33112:	4638      	mov	r0, r7
   33114:	2204      	movs	r2, #4
   33116:	4911      	ldr	r1, [pc, #68]	; (3315c <logobj_interface_getopt+0xa0>)
   33118:	f011 fe9a 	bl	44e50 <memcpy>
   3311c:	2300      	movs	r3, #0
   3311e:	2204      	movs	r2, #4
   33120:	4618      	mov	r0, r3
   33122:	6032      	str	r2, [r6, #0]
   33124:	b003      	add	sp, #12
   33126:	bdf0      	pop	{r4, r5, r6, r7, pc}
   33128:	9600      	str	r6, [sp, #0]
   3312a:	f005 ff6b 	bl	39004 <interface_socket_getopt>
   3312e:	4603      	mov	r3, r0
   33130:	2800      	cmp	r0, #0
   33132:	d1e3      	bne.n	330fc <logobj_interface_getopt+0x40>
   33134:	4618      	mov	r0, r3
   33136:	b003      	add	sp, #12
   33138:	bdf0      	pop	{r4, r5, r6, r7, pc}
   3313a:	202a      	movs	r0, #42	; 0x2a
   3313c:	f7fd f82a 	bl	30194 <bsd_os_errno_set>
   33140:	f04f 33ff 	mov.w	r3, #4294967295
   33144:	e7de      	b.n	33104 <logobj_interface_getopt+0x48>
   33146:	2016      	movs	r0, #22
   33148:	e7d8      	b.n	330fc <logobj_interface_getopt+0x40>
   3314a:	2009      	movs	r0, #9
   3314c:	f7fd f822 	bl	30194 <bsd_os_errno_set>
   33150:	f04f 33ff 	mov.w	r3, #4294967295
   33154:	e7d6      	b.n	33104 <logobj_interface_getopt+0x48>
   33156:	bf00      	nop
   33158:	2002b4e4 	.word	0x2002b4e4
   3315c:	20024e5c 	.word	0x20024e5c

00033160 <logobj_interface_close>:
   33160:	b510      	push	{r4, lr}
   33162:	4604      	mov	r4, r0
   33164:	f005 fee4 	bl	38f30 <interface_socket_from_handle_get>
   33168:	b138      	cbz	r0, 3317a <logobj_interface_close+0x1a>
   3316a:	4620      	mov	r0, r4
   3316c:	f005 fe1e 	bl	38dac <interface_socket_free>
   33170:	2300      	movs	r3, #0
   33172:	4a05      	ldr	r2, [pc, #20]	; (33188 <logobj_interface_close+0x28>)
   33174:	4618      	mov	r0, r3
   33176:	6013      	str	r3, [r2, #0]
   33178:	bd10      	pop	{r4, pc}
   3317a:	2009      	movs	r0, #9
   3317c:	f7fd f80a 	bl	30194 <bsd_os_errno_set>
   33180:	f04f 30ff 	mov.w	r0, #4294967295
   33184:	bd10      	pop	{r4, pc}
   33186:	bf00      	nop
   33188:	20024e60 	.word	0x20024e60

0003318c <packet_free_cb>:
   3318c:	6800      	ldr	r0, [r0, #0]
   3318e:	f004 b9f1 	b.w	37574 <rpc_at_client_data_free>
   33192:	bf00      	nop

00033194 <at_interface_write>:
   33194:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   33198:	b082      	sub	sp, #8
   3319a:	9c08      	ldr	r4, [sp, #32]
   3319c:	2c00      	cmp	r4, #0
   3319e:	d15b      	bne.n	33258 <at_interface_write+0xc4>
   331a0:	460f      	mov	r7, r1
   331a2:	4615      	mov	r5, r2
   331a4:	4698      	mov	r8, r3
   331a6:	4606      	mov	r6, r0
   331a8:	f005 fec2 	bl	38f30 <interface_socket_from_handle_get>
   331ac:	4604      	mov	r4, r0
   331ae:	f1b8 0f00 	cmp.w	r8, #0
   331b2:	d12b      	bne.n	3320c <at_interface_write+0x78>
   331b4:	2800      	cmp	r0, #0
   331b6:	d055      	beq.n	33264 <at_interface_write+0xd0>
   331b8:	6803      	ldr	r3, [r0, #0]
   331ba:	039b      	lsls	r3, r3, #14
   331bc:	d552      	bpl.n	33264 <at_interface_write+0xd0>
   331be:	6803      	ldr	r3, [r0, #0]
   331c0:	4629      	mov	r1, r5
   331c2:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
   331c6:	6003      	str	r3, [r0, #0]
   331c8:	6803      	ldr	r3, [r0, #0]
   331ca:	a801      	add	r0, sp, #4
   331cc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
   331d0:	6023      	str	r3, [r4, #0]
   331d2:	f004 f9a5 	bl	37520 <rpc_at_client_request_alloc>
   331d6:	bb08      	cbnz	r0, 3321c <at_interface_write+0x88>
   331d8:	2204      	movs	r2, #4
   331da:	9b01      	ldr	r3, [sp, #4]
   331dc:	721a      	strb	r2, [r3, #8]
   331de:	7258      	strb	r0, [r3, #9]
   331e0:	7298      	strb	r0, [r3, #10]
   331e2:	72d8      	strb	r0, [r3, #11]
   331e4:	60de      	str	r6, [r3, #12]
   331e6:	b9fd      	cbnz	r5, 33228 <at_interface_write+0x94>
   331e8:	4618      	mov	r0, r3
   331ea:	2101      	movs	r1, #1
   331ec:	f004 f9ac 	bl	37548 <rpc_at_client_request_send>
   331f0:	bb48      	cbnz	r0, 33246 <at_interface_write+0xb2>
   331f2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
   331f6:	4630      	mov	r0, r6
   331f8:	4611      	mov	r1, r2
   331fa:	f04f 33ff 	mov.w	r3, #4294967295
   331fe:	f005 fe23 	bl	38e48 <interface_socket_wait>
   33202:	b960      	cbnz	r0, 3321e <at_interface_write+0x8a>
   33204:	4628      	mov	r0, r5
   33206:	b002      	add	sp, #8
   33208:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   3320c:	b360      	cbz	r0, 33268 <at_interface_write+0xd4>
   3320e:	6803      	ldr	r3, [r0, #0]
   33210:	202d      	movs	r0, #45	; 0x2d
   33212:	f7fc ffbf 	bl	30194 <bsd_os_errno_set>
   33216:	f04f 30ff 	mov.w	r0, #4294967295
   3321a:	e7f4      	b.n	33206 <at_interface_write+0x72>
   3321c:	200c      	movs	r0, #12
   3321e:	6823      	ldr	r3, [r4, #0]
   33220:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   33224:	6023      	str	r3, [r4, #0]
   33226:	e7f4      	b.n	33212 <at_interface_write+0x7e>
   33228:	4639      	mov	r1, r7
   3322a:	6818      	ldr	r0, [r3, #0]
   3322c:	462a      	mov	r2, r5
   3322e:	f011 fe0f 	bl	44e50 <memcpy>
   33232:	2101      	movs	r1, #1
   33234:	9801      	ldr	r0, [sp, #4]
   33236:	f004 f987 	bl	37548 <rpc_at_client_request_send>
   3323a:	2800      	cmp	r0, #0
   3323c:	d0d9      	beq.n	331f2 <at_interface_write+0x5e>
   3323e:	9b01      	ldr	r3, [sp, #4]
   33240:	6818      	ldr	r0, [r3, #0]
   33242:	f004 f997 	bl	37574 <rpc_at_client_data_free>
   33246:	9801      	ldr	r0, [sp, #4]
   33248:	f004 f98c 	bl	37564 <rpc_at_client_message_free>
   3324c:	6823      	ldr	r3, [r4, #0]
   3324e:	2023      	movs	r0, #35	; 0x23
   33250:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   33254:	6023      	str	r3, [r4, #0]
   33256:	e7dc      	b.n	33212 <at_interface_write+0x7e>
   33258:	2038      	movs	r0, #56	; 0x38
   3325a:	f7fc ff9b 	bl	30194 <bsd_os_errno_set>
   3325e:	f04f 30ff 	mov.w	r0, #4294967295
   33262:	e7d0      	b.n	33206 <at_interface_write+0x72>
   33264:	2016      	movs	r0, #22
   33266:	e7d4      	b.n	33212 <at_interface_write+0x7e>
   33268:	202d      	movs	r0, #45	; 0x2d
   3326a:	e7d2      	b.n	33212 <at_interface_write+0x7e>

0003326c <at_interface_init>:
   3326c:	f004 b952 	b.w	37514 <rpc_at_client_init>

00033270 <at_interface_open>:
   33270:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   33274:	2600      	movs	r6, #0
   33276:	b082      	sub	sp, #8
   33278:	2902      	cmp	r1, #2
   3327a:	9600      	str	r6, [sp, #0]
   3327c:	d13e      	bne.n	332fc <at_interface_open+0x8c>
   3327e:	4680      	mov	r8, r0
   33280:	4617      	mov	r7, r2
   33282:	4668      	mov	r0, sp
   33284:	4a20      	ldr	r2, [pc, #128]	; (33308 <at_interface_open+0x98>)
   33286:	460c      	mov	r4, r1
   33288:	f005 fd2c 	bl	38ce4 <interface_socket_allocate>
   3328c:	9b00      	ldr	r3, [sp, #0]
   3328e:	4605      	mov	r5, r0
   33290:	b30b      	cbz	r3, 332d6 <at_interface_open+0x66>
   33292:	e9c3 8403 	strd	r8, r4, [r3, #12]
   33296:	615f      	str	r7, [r3, #20]
   33298:	4631      	mov	r1, r6
   3329a:	a801      	add	r0, sp, #4
   3329c:	f004 f940 	bl	37520 <rpc_at_client_request_alloc>
   332a0:	bb50      	cbnz	r0, 332f8 <at_interface_open+0x88>
   332a2:	2204      	movs	r2, #4
   332a4:	9b01      	ldr	r3, [sp, #4]
   332a6:	2105      	movs	r1, #5
   332a8:	7258      	strb	r0, [r3, #9]
   332aa:	7298      	strb	r0, [r3, #10]
   332ac:	72d8      	strb	r0, [r3, #11]
   332ae:	721a      	strb	r2, [r3, #8]
   332b0:	60dd      	str	r5, [r3, #12]
   332b2:	4618      	mov	r0, r3
   332b4:	f004 f948 	bl	37548 <rpc_at_client_request_send>
   332b8:	b988      	cbnz	r0, 332de <at_interface_open+0x6e>
   332ba:	4622      	mov	r2, r4
   332bc:	4621      	mov	r1, r4
   332be:	f04f 33ff 	mov.w	r3, #4294967295
   332c2:	4628      	mov	r0, r5
   332c4:	f005 fdc0 	bl	38e48 <interface_socket_wait>
   332c8:	4604      	mov	r4, r0
   332ca:	b960      	cbnz	r0, 332e6 <at_interface_open+0x76>
   332cc:	9a00      	ldr	r2, [sp, #0]
   332ce:	6813      	ldr	r3, [r2, #0]
   332d0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   332d4:	6013      	str	r3, [r2, #0]
   332d6:	4628      	mov	r0, r5
   332d8:	b002      	add	sp, #8
   332da:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   332de:	9801      	ldr	r0, [sp, #4]
   332e0:	f004 f940 	bl	37564 <rpc_at_client_message_free>
   332e4:	2423      	movs	r4, #35	; 0x23
   332e6:	4628      	mov	r0, r5
   332e8:	f005 fd60 	bl	38dac <interface_socket_free>
   332ec:	4620      	mov	r0, r4
   332ee:	f7fc ff51 	bl	30194 <bsd_os_errno_set>
   332f2:	f04f 35ff 	mov.w	r5, #4294967295
   332f6:	e7ee      	b.n	332d6 <at_interface_open+0x66>
   332f8:	240c      	movs	r4, #12
   332fa:	e7f4      	b.n	332e6 <at_interface_open+0x76>
   332fc:	2029      	movs	r0, #41	; 0x29
   332fe:	f7fc ff49 	bl	30194 <bsd_os_errno_set>
   33302:	f04f 35ff 	mov.w	r5, #4294967295
   33306:	e7e6      	b.n	332d6 <at_interface_open+0x66>
   33308:	0003318d 	.word	0x0003318d

0003330c <at_interface_close>:
   3330c:	b5f0      	push	{r4, r5, r6, r7, lr}
   3330e:	b083      	sub	sp, #12
   33310:	4606      	mov	r6, r0
   33312:	f005 fe0d 	bl	38f30 <interface_socket_from_handle_get>
   33316:	2800      	cmp	r0, #0
   33318:	d03d      	beq.n	33396 <at_interface_close+0x8a>
   3331a:	230d      	movs	r3, #13
   3331c:	6807      	ldr	r7, [r0, #0]
   3331e:	6003      	str	r3, [r0, #0]
   33320:	6803      	ldr	r3, [r0, #0]
   33322:	4604      	mov	r4, r0
   33324:	039b      	lsls	r3, r3, #14
   33326:	d41f      	bmi.n	33368 <at_interface_close+0x5c>
   33328:	2100      	movs	r1, #0
   3332a:	a801      	add	r0, sp, #4
   3332c:	f004 f8f8 	bl	37520 <rpc_at_client_request_alloc>
   33330:	bb20      	cbnz	r0, 3337c <at_interface_close+0x70>
   33332:	2204      	movs	r2, #4
   33334:	9b01      	ldr	r3, [sp, #4]
   33336:	2106      	movs	r1, #6
   33338:	7258      	strb	r0, [r3, #9]
   3333a:	7298      	strb	r0, [r3, #10]
   3333c:	72d8      	strb	r0, [r3, #11]
   3333e:	721a      	strb	r2, [r3, #8]
   33340:	60de      	str	r6, [r3, #12]
   33342:	4618      	mov	r0, r3
   33344:	f004 f900 	bl	37548 <rpc_at_client_request_send>
   33348:	b9d0      	cbnz	r0, 33380 <at_interface_close+0x74>
   3334a:	220e      	movs	r2, #14
   3334c:	f04f 33ff 	mov.w	r3, #4294967295
   33350:	4611      	mov	r1, r2
   33352:	4630      	mov	r0, r6
   33354:	f005 fd78 	bl	38e48 <interface_socket_wait>
   33358:	4605      	mov	r5, r0
   3335a:	b9a8      	cbnz	r0, 33388 <at_interface_close+0x7c>
   3335c:	4630      	mov	r0, r6
   3335e:	f005 fd25 	bl	38dac <interface_socket_free>
   33362:	4628      	mov	r0, r5
   33364:	b003      	add	sp, #12
   33366:	bdf0      	pop	{r4, r5, r6, r7, pc}
   33368:	6803      	ldr	r3, [r0, #0]
   3336a:	2100      	movs	r1, #0
   3336c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
   33370:	6003      	str	r3, [r0, #0]
   33372:	a801      	add	r0, sp, #4
   33374:	f004 f8d4 	bl	37520 <rpc_at_client_request_alloc>
   33378:	2800      	cmp	r0, #0
   3337a:	d0da      	beq.n	33332 <at_interface_close+0x26>
   3337c:	250c      	movs	r5, #12
   3337e:	e003      	b.n	33388 <at_interface_close+0x7c>
   33380:	9801      	ldr	r0, [sp, #4]
   33382:	f004 f8ef 	bl	37564 <rpc_at_client_message_free>
   33386:	2523      	movs	r5, #35	; 0x23
   33388:	6027      	str	r7, [r4, #0]
   3338a:	4628      	mov	r0, r5
   3338c:	f7fc ff02 	bl	30194 <bsd_os_errno_set>
   33390:	f04f 35ff 	mov.w	r5, #4294967295
   33394:	e7e5      	b.n	33362 <at_interface_close+0x56>
   33396:	2516      	movs	r5, #22
   33398:	e7f7      	b.n	3338a <at_interface_close+0x7e>
   3339a:	bf00      	nop

0003339c <at_interface_read>:
   3339c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   333a0:	b084      	sub	sp, #16
   333a2:	4688      	mov	r8, r1
   333a4:	4615      	mov	r5, r2
   333a6:	461e      	mov	r6, r3
   333a8:	4607      	mov	r7, r0
   333aa:	f005 fdc1 	bl	38f30 <interface_socket_from_handle_get>
   333ae:	2800      	cmp	r0, #0
   333b0:	d043      	beq.n	3343a <at_interface_read+0x9e>
   333b2:	2300      	movs	r3, #0
   333b4:	4604      	mov	r4, r0
   333b6:	e9cd 8500 	strd	r8, r5, [sp]
   333ba:	e9cd 3302 	strd	r3, r3, [sp, #8]
   333be:	bb2e      	cbnz	r6, 3340c <at_interface_read+0x70>
   333c0:	f016 0502 	ands.w	r5, r6, #2
   333c4:	d00d      	beq.n	333e2 <at_interface_read+0x46>
   333c6:	e028      	b.n	3341a <at_interface_read+0x7e>
   333c8:	b9cd      	cbnz	r5, 333fe <at_interface_read+0x62>
   333ca:	f44f 3280 	mov.w	r2, #65536	; 0x10000
   333ce:	6a23      	ldr	r3, [r4, #32]
   333d0:	4611      	mov	r1, r2
   333d2:	2b00      	cmp	r3, #0
   333d4:	bf08      	it	eq
   333d6:	f04f 33ff 	moveq.w	r3, #4294967295
   333da:	4638      	mov	r0, r7
   333dc:	f005 fd34 	bl	38e48 <interface_socket_wait>
   333e0:	4605      	mov	r5, r0
   333e2:	6823      	ldr	r3, [r4, #0]
   333e4:	69e0      	ldr	r0, [r4, #28]
   333e6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
   333ea:	6023      	str	r3, [r4, #0]
   333ec:	6803      	ldr	r3, [r0, #0]
   333ee:	4632      	mov	r2, r6
   333f0:	689b      	ldr	r3, [r3, #8]
   333f2:	4669      	mov	r1, sp
   333f4:	4798      	blx	r3
   333f6:	f1b0 0800 	subs.w	r8, r0, #0
   333fa:	dbe5      	blt.n	333c8 <at_interface_read+0x2c>
   333fc:	b115      	cbz	r5, 33404 <at_interface_read+0x68>
   333fe:	4628      	mov	r0, r5
   33400:	f7fc fec8 	bl	30194 <bsd_os_errno_set>
   33404:	4640      	mov	r0, r8
   33406:	b004      	add	sp, #16
   33408:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   3340c:	f016 0f0a 	tst.w	r6, #10
   33410:	d1d6      	bne.n	333c0 <at_interface_read+0x24>
   33412:	252d      	movs	r5, #45	; 0x2d
   33414:	f04f 38ff 	mov.w	r8, #4294967295
   33418:	e7f1      	b.n	333fe <at_interface_read+0x62>
   3341a:	6823      	ldr	r3, [r4, #0]
   3341c:	69e0      	ldr	r0, [r4, #28]
   3341e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
   33422:	6023      	str	r3, [r4, #0]
   33424:	6803      	ldr	r3, [r0, #0]
   33426:	4632      	mov	r2, r6
   33428:	689b      	ldr	r3, [r3, #8]
   3342a:	4669      	mov	r1, sp
   3342c:	4798      	blx	r3
   3342e:	f1b0 3fff 	cmp.w	r0, #4294967295
   33432:	4680      	mov	r8, r0
   33434:	d1e6      	bne.n	33404 <at_interface_read+0x68>
   33436:	2523      	movs	r5, #35	; 0x23
   33438:	e7e1      	b.n	333fe <at_interface_read+0x62>
   3343a:	2516      	movs	r5, #22
   3343c:	f04f 38ff 	mov.w	r8, #4294967295
   33440:	e7dd      	b.n	333fe <at_interface_read+0x62>
   33442:	bf00      	nop

00033444 <at_interface_getopt>:
   33444:	f005 bdde 	b.w	39004 <interface_socket_getopt>

00033448 <at_interface_setopt>:
   33448:	f005 bd9a 	b.w	38f80 <interface_socket_setopt>

0003344c <rpc_at_event_handler>:
   3344c:	b570      	push	{r4, r5, r6, lr}
   3344e:	4606      	mov	r6, r0
   33450:	b084      	sub	sp, #16
   33452:	68c0      	ldr	r0, [r0, #12]
   33454:	460d      	mov	r5, r1
   33456:	f005 fd6b 	bl	38f30 <interface_socket_from_handle_get>
   3345a:	4604      	mov	r4, r0
   3345c:	b348      	cbz	r0, 334b2 <rpc_at_event_handler+0x66>
   3345e:	6803      	ldr	r3, [r0, #0]
   33460:	b29b      	uxth	r3, r3
   33462:	2b01      	cmp	r3, #1
   33464:	d01f      	beq.n	334a6 <rpc_at_event_handler+0x5a>
   33466:	6803      	ldr	r3, [r0, #0]
   33468:	b29b      	uxth	r3, r3
   3346a:	2b0d      	cmp	r3, #13
   3346c:	d029      	beq.n	334c2 <rpc_at_event_handler+0x76>
   3346e:	6803      	ldr	r3, [r0, #0]
   33470:	b29b      	uxth	r3, r3
   33472:	2b02      	cmp	r3, #2
   33474:	d02d      	beq.n	334d2 <rpc_at_event_handler+0x86>
   33476:	3d03      	subs	r5, #3
   33478:	2d01      	cmp	r5, #1
   3347a:	d817      	bhi.n	334ac <rpc_at_event_handler+0x60>
   3347c:	2500      	movs	r5, #0
   3347e:	6873      	ldr	r3, [r6, #4]
   33480:	6832      	ldr	r2, [r6, #0]
   33482:	e9cd 5502 	strd	r5, r5, [sp, #8]
   33486:	e9cd 2300 	strd	r2, r3, [sp]
   3348a:	69e0      	ldr	r0, [r4, #28]
   3348c:	4669      	mov	r1, sp
   3348e:	6803      	ldr	r3, [r0, #0]
   33490:	685b      	ldr	r3, [r3, #4]
   33492:	4798      	blx	r3
   33494:	3001      	adds	r0, #1
   33496:	d019      	beq.n	334cc <rpc_at_event_handler+0x80>
   33498:	4628      	mov	r0, r5
   3349a:	6823      	ldr	r3, [r4, #0]
   3349c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   334a0:	6023      	str	r3, [r4, #0]
   334a2:	b004      	add	sp, #16
   334a4:	bd70      	pop	{r4, r5, r6, pc}
   334a6:	2d02      	cmp	r5, #2
   334a8:	d1e5      	bne.n	33476 <rpc_at_event_handler+0x2a>
   334aa:	6005      	str	r5, [r0, #0]
   334ac:	2000      	movs	r0, #0
   334ae:	b004      	add	sp, #16
   334b0:	bd70      	pop	{r4, r5, r6, pc}
   334b2:	6830      	ldr	r0, [r6, #0]
   334b4:	2800      	cmp	r0, #0
   334b6:	d0f9      	beq.n	334ac <rpc_at_event_handler+0x60>
   334b8:	f004 f85c 	bl	37574 <rpc_at_client_data_free>
   334bc:	4620      	mov	r0, r4
   334be:	b004      	add	sp, #16
   334c0:	bd70      	pop	{r4, r5, r6, pc}
   334c2:	2d02      	cmp	r5, #2
   334c4:	d1d7      	bne.n	33476 <rpc_at_event_handler+0x2a>
   334c6:	230e      	movs	r3, #14
   334c8:	6003      	str	r3, [r0, #0]
   334ca:	e7ef      	b.n	334ac <rpc_at_event_handler+0x60>
   334cc:	2002      	movs	r0, #2
   334ce:	b004      	add	sp, #16
   334d0:	bd70      	pop	{r4, r5, r6, pc}
   334d2:	6803      	ldr	r3, [r0, #0]
   334d4:	029b      	lsls	r3, r3, #10
   334d6:	d5ce      	bpl.n	33476 <rpc_at_event_handler+0x2a>
   334d8:	2d02      	cmp	r5, #2
   334da:	d1cc      	bne.n	33476 <rpc_at_event_handler+0x2a>
   334dc:	6803      	ldr	r3, [r0, #0]
   334de:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
   334e2:	6003      	str	r3, [r0, #0]
   334e4:	6803      	ldr	r3, [r0, #0]
   334e6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   334ea:	6003      	str	r3, [r0, #0]
   334ec:	e7de      	b.n	334ac <rpc_at_event_handler+0x60>
   334ee:	bf00      	nop

000334f0 <dfu_client_event_handler>:
   334f0:	f850 1b08 	ldr.w	r1, [r0], #8
   334f4:	0c09      	lsrs	r1, r1, #16
   334f6:	f001 b925 	b.w	34744 <rpc_dfu_event_handler>
   334fa:	bf00      	nop

000334fc <rpc_dfu_client_init>:
   334fc:	4801      	ldr	r0, [pc, #4]	; (33504 <rpc_dfu_client_init+0x8>)
   334fe:	f005 be53 	b.w	391a8 <rpc_client_register>
   33502:	bf00      	nop
   33504:	00046fa8 	.word	0x00046fa8

00033508 <rpc_dfu_client_request_alloc>:
   33508:	2300      	movs	r3, #0
   3350a:	b510      	push	{r4, lr}
   3350c:	b082      	sub	sp, #8
   3350e:	9301      	str	r3, [sp, #4]
   33510:	b158      	cbz	r0, 3352a <rpc_dfu_client_request_alloc+0x22>
   33512:	4604      	mov	r4, r0
   33514:	aa01      	add	r2, sp, #4
   33516:	2006      	movs	r0, #6
   33518:	f006 f87e 	bl	39618 <rpc_message_alloc>
   3351c:	b918      	cbnz	r0, 33526 <rpc_dfu_client_request_alloc+0x1e>
   3351e:	9b01      	ldr	r3, [sp, #4]
   33520:	b10b      	cbz	r3, 33526 <rpc_dfu_client_request_alloc+0x1e>
   33522:	3308      	adds	r3, #8
   33524:	6023      	str	r3, [r4, #0]
   33526:	b002      	add	sp, #8
   33528:	bd10      	pop	{r4, pc}
   3352a:	2007      	movs	r0, #7
   3352c:	b002      	add	sp, #8
   3352e:	bd10      	pop	{r4, pc}

00033530 <rpc_dfu_client_request_send>:
   33530:	f411 4f70 	tst.w	r1, #61440	; 0xf000
   33534:	d10b      	bne.n	3354e <rpc_dfu_client_request_send+0x1e>
   33536:	b160      	cbz	r0, 33552 <rpc_dfu_client_request_send+0x22>
   33538:	4603      	mov	r3, r0
   3353a:	f830 2c08 	ldrh.w	r2, [r0, #-8]
   3353e:	2006      	movs	r0, #6
   33540:	ea42 4101 	orr.w	r1, r2, r1, lsl #16
   33544:	f843 1d08 	str.w	r1, [r3, #-8]!
   33548:	4619      	mov	r1, r3
   3354a:	f006 b84d 	b.w	395e8 <rpc_message_send>
   3354e:	200f      	movs	r0, #15
   33550:	4770      	bx	lr
   33552:	2007      	movs	r0, #7
   33554:	4770      	bx	lr
   33556:	bf00      	nop

00033558 <rpc_dfu_client_message_free>:
   33558:	b120      	cbz	r0, 33564 <rpc_dfu_client_message_free+0xc>
   3355a:	f1a0 0108 	sub.w	r1, r0, #8
   3355e:	2006      	movs	r0, #6
   33560:	f006 b88c 	b.w	3967c <rpc_message_free>
   33564:	2007      	movs	r0, #7
   33566:	4770      	bx	lr

00033568 <rpc_dfu_client_data_free>:
   33568:	b118      	cbz	r0, 33572 <rpc_dfu_client_data_free+0xa>
   3356a:	4601      	mov	r1, r0
   3356c:	2006      	movs	r0, #6
   3356e:	f006 b997 	b.w	398a0 <rpc_message_data_free>
   33572:	2007      	movs	r0, #7
   33574:	4770      	bx	lr
   33576:	bf00      	nop

00033578 <mem_free>:
   33578:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   3357c:	f8df c0cc 	ldr.w	ip, [pc, #204]	; 3364c <mem_free+0xd4>
   33580:	b083      	sub	sp, #12
   33582:	9000      	str	r0, [sp, #0]
   33584:	f10c 0b3c 	add.w	fp, ip, #60	; 0x3c
   33588:	f8dc 3008 	ldr.w	r3, [ip, #8]
   3358c:	b12b      	cbz	r3, 3359a <mem_free+0x22>
   3358e:	f8dc 2000 	ldr.w	r2, [ip]
   33592:	9c00      	ldr	r4, [sp, #0]
   33594:	7810      	ldrb	r0, [r2, #0]
   33596:	42a0      	cmp	r0, r4
   33598:	d006      	beq.n	335a8 <mem_free+0x30>
   3359a:	f10c 0c0c 	add.w	ip, ip, #12
   3359e:	45e3      	cmp	fp, ip
   335a0:	d1f2      	bne.n	33588 <mem_free+0x10>
   335a2:	b003      	add	sp, #12
   335a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   335a8:	f8dc a004 	ldr.w	sl, [ip, #4]
   335ac:	eb03 080a 	add.w	r8, r3, sl
   335b0:	45c2      	cmp	sl, r8
   335b2:	d2f2      	bcs.n	3359a <mem_free+0x22>
   335b4:	6853      	ldr	r3, [r2, #4]
   335b6:	f8cd c004 	str.w	ip, [sp, #4]
   335ba:	46d6      	mov	lr, sl
   335bc:	469c      	mov	ip, r3
   335be:	f8d2 9010 	ldr.w	r9, [r2, #16]
   335c2:	8997      	ldrh	r7, [r2, #12]
   335c4:	ebae 000a 	sub.w	r0, lr, sl
   335c8:	b3df      	cbz	r7, 33642 <mem_free+0xca>
   335ca:	f8b9 2002 	ldrh.w	r2, [r9, #2]
   335ce:	4290      	cmp	r0, r2
   335d0:	d31c      	bcc.n	3360c <mem_free+0x94>
   335d2:	4665      	mov	r5, ip
   335d4:	2400      	movs	r4, #0
   335d6:	f109 0304 	add.w	r3, r9, #4
   335da:	e003      	b.n	335e4 <mem_free+0x6c>
   335dc:	885a      	ldrh	r2, [r3, #2]
   335de:	3304      	adds	r3, #4
   335e0:	4282      	cmp	r2, r0
   335e2:	d815      	bhi.n	33610 <mem_free+0x98>
   335e4:	f833 6c04 	ldrh.w	r6, [r3, #-4]
   335e8:	3401      	adds	r4, #1
   335ea:	42a7      	cmp	r7, r4
   335ec:	fb02 5506 	mla	r5, r2, r6, r5
   335f0:	eba0 0002 	sub.w	r0, r0, r2
   335f4:	461e      	mov	r6, r3
   335f6:	d1f1      	bne.n	335dc <mem_free+0x64>
   335f8:	2000      	movs	r0, #0
   335fa:	4281      	cmp	r1, r0
   335fc:	d00d      	beq.n	3361a <mem_free+0xa2>
   335fe:	f10e 0e01 	add.w	lr, lr, #1
   33602:	45f0      	cmp	r8, lr
   33604:	d1de      	bne.n	335c4 <mem_free+0x4c>
   33606:	f8dd c004 	ldr.w	ip, [sp, #4]
   3360a:	e7c6      	b.n	3359a <mem_free+0x22>
   3360c:	4665      	mov	r5, ip
   3360e:	464e      	mov	r6, r9
   33610:	8833      	ldrh	r3, [r6, #0]
   33612:	fb00 5003 	mla	r0, r0, r3, r5
   33616:	4281      	cmp	r1, r0
   33618:	d1f1      	bne.n	335fe <mem_free+0x86>
   3361a:	f5be 7f00 	cmp.w	lr, #512	; 0x200
   3361e:	f8dd c004 	ldr.w	ip, [sp, #4]
   33622:	d0ba      	beq.n	3359a <mem_free+0x22>
   33624:	2301      	movs	r3, #1
   33626:	4a08      	ldr	r2, [pc, #32]	; (33648 <mem_free+0xd0>)
   33628:	ea4f 115e 	mov.w	r1, lr, lsr #5
   3362c:	f852 0021 	ldr.w	r0, [r2, r1, lsl #2]
   33630:	f00e 0e1f 	and.w	lr, lr, #31
   33634:	fa03 fe0e 	lsl.w	lr, r3, lr
   33638:	ea4e 0000 	orr.w	r0, lr, r0
   3363c:	f842 0021 	str.w	r0, [r2, r1, lsl #2]
   33640:	e7af      	b.n	335a2 <mem_free+0x2a>
   33642:	4638      	mov	r0, r7
   33644:	e7d9      	b.n	335fa <mem_free+0x82>
   33646:	bf00      	nop
   33648:	20024e64 	.word	0x20024e64
   3364c:	20024ea8 	.word	0x20024ea8

00033650 <mem_alloc.constprop.5>:
   33650:	2800      	cmp	r0, #0
   33652:	d050      	beq.n	336f6 <mem_alloc.constprop.5+0xa6>
   33654:	4b6d      	ldr	r3, [pc, #436]	; (3380c <mem_alloc.constprop.5+0x1bc>)
   33656:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
   3365a:	4290      	cmp	r0, r2
   3365c:	d84b      	bhi.n	336f6 <mem_alloc.constprop.5+0xa6>
   3365e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   33662:	f8d3 b08c 	ldr.w	fp, [r3, #140]	; 0x8c
   33666:	b083      	sub	sp, #12
   33668:	f1bb 0f00 	cmp.w	fp, #0
   3366c:	d054      	beq.n	33718 <mem_alloc.constprop.5+0xc8>
   3366e:	f10b 32ff 	add.w	r2, fp, #4294967295
   33672:	4691      	mov	r9, r2
   33674:	2600      	movs	r6, #0
   33676:	f04f 0812 	mov.w	r8, #18
   3367a:	4f65      	ldr	r7, [pc, #404]	; (33810 <mem_alloc.constprop.5+0x1c0>)
   3367c:	9201      	str	r2, [sp, #4]
   3367e:	f10b 0e11 	add.w	lr, fp, #17
   33682:	eb06 0209 	add.w	r2, r6, r9
   33686:	f853 4038 	ldr.w	r4, [r3, r8, lsl #3]
   3368a:	3201      	adds	r2, #1
   3368c:	0852      	lsrs	r2, r2, #1
   3368e:	eb04 0c44 	add.w	ip, r4, r4, lsl #1
   33692:	f102 0112 	add.w	r1, r2, #18
   33696:	f853 5031 	ldr.w	r5, [r3, r1, lsl #3]
   3369a:	f857 a02c 	ldr.w	sl, [r7, ip, lsl #2]
   3369e:	f853 403e 	ldr.w	r4, [r3, lr, lsl #3]
   336a2:	eb03 0cc8 	add.w	ip, r3, r8, lsl #3
   336a6:	f8dc c004 	ldr.w	ip, [ip, #4]
   336aa:	eb05 0545 	add.w	r5, r5, r5, lsl #1
   336ae:	eb04 0444 	add.w	r4, r4, r4, lsl #1
   336b2:	f8da a010 	ldr.w	sl, [sl, #16]
   336b6:	f857 5025 	ldr.w	r5, [r7, r5, lsl #2]
   336ba:	f857 4024 	ldr.w	r4, [r7, r4, lsl #2]
   336be:	f83a a02c 	ldrh.w	sl, [sl, ip, lsl #2]
   336c2:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
   336c6:	eb03 0cce 	add.w	ip, r3, lr, lsl #3
   336ca:	6849      	ldr	r1, [r1, #4]
   336cc:	692d      	ldr	r5, [r5, #16]
   336ce:	6924      	ldr	r4, [r4, #16]
   336d0:	f8dc c004 	ldr.w	ip, [ip, #4]
   336d4:	4550      	cmp	r0, sl
   336d6:	f835 5021 	ldrh.w	r5, [r5, r1, lsl #2]
   336da:	f834 102c 	ldrh.w	r1, [r4, ip, lsl #2]
   336de:	d915      	bls.n	3370c <mem_alloc.constprop.5+0xbc>
   336e0:	4288      	cmp	r0, r1
   336e2:	d211      	bcs.n	33708 <mem_alloc.constprop.5+0xb8>
   336e4:	42a8      	cmp	r0, r5
   336e6:	d908      	bls.n	336fa <mem_alloc.constprop.5+0xaa>
   336e8:	1c56      	adds	r6, r2, #1
   336ea:	45b1      	cmp	r9, r6
   336ec:	f0c0 8087 	bcc.w	337fe <mem_alloc.constprop.5+0x1ae>
   336f0:	f102 0813 	add.w	r8, r2, #19
   336f4:	e7c5      	b.n	33682 <mem_alloc.constprop.5+0x32>
   336f6:	2000      	movs	r0, #0
   336f8:	4770      	bx	lr
   336fa:	f102 39ff 	add.w	r9, r2, #4294967295
   336fe:	454e      	cmp	r6, r9
   33700:	d87d      	bhi.n	337fe <mem_alloc.constprop.5+0x1ae>
   33702:	f102 0e11 	add.w	lr, r2, #17
   33706:	e7bc      	b.n	33682 <mem_alloc.constprop.5+0x32>
   33708:	f109 0601 	add.w	r6, r9, #1
   3370c:	45b3      	cmp	fp, r6
   3370e:	d007      	beq.n	33720 <mem_alloc.constprop.5+0xd0>
   33710:	2e10      	cmp	r6, #16
   33712:	d001      	beq.n	33718 <mem_alloc.constprop.5+0xc8>
   33714:	45b3      	cmp	fp, r6
   33716:	d808      	bhi.n	3372a <mem_alloc.constprop.5+0xda>
   33718:	2000      	movs	r0, #0
   3371a:	b003      	add	sp, #12
   3371c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   33720:	9a01      	ldr	r2, [sp, #4]
   33722:	2a10      	cmp	r2, #16
   33724:	bf18      	it	ne
   33726:	4616      	movne	r6, r2
   33728:	d0f6      	beq.n	33718 <mem_alloc.constprop.5+0xc8>
   3372a:	f8df c0e8 	ldr.w	ip, [pc, #232]	; 33814 <mem_alloc.constprop.5+0x1c4>
   3372e:	eb03 08c6 	add.w	r8, r3, r6, lsl #3
   33732:	e9d8 2424 	ldrd	r2, r4, [r8, #144]	; 0x90
   33736:	eb02 0242 	add.w	r2, r2, r2, lsl #1
   3373a:	f857 3022 	ldr.w	r3, [r7, r2, lsl #2]
   3373e:	eb07 0282 	add.w	r2, r7, r2, lsl #2
   33742:	f8d2 e004 	ldr.w	lr, [r2, #4]
   33746:	691d      	ldr	r5, [r3, #16]
   33748:	2c00      	cmp	r4, #0
   3374a:	d056      	beq.n	337fa <mem_alloc.constprop.5+0x1aa>
   3374c:	462a      	mov	r2, r5
   3374e:	4670      	mov	r0, lr
   33750:	00a4      	lsls	r4, r4, #2
   33752:	eb05 0904 	add.w	r9, r5, r4
   33756:	8851      	ldrh	r1, [r2, #2]
   33758:	3204      	adds	r2, #4
   3375a:	4591      	cmp	r9, r2
   3375c:	4408      	add	r0, r1
   3375e:	d1fa      	bne.n	33756 <mem_alloc.constprop.5+0x106>
   33760:	1929      	adds	r1, r5, r4
   33762:	f8b1 a002 	ldrh.w	sl, [r1, #2]
   33766:	4482      	add	sl, r0
   33768:	4582      	cmp	sl, r0
   3376a:	d918      	bls.n	3379e <mem_alloc.constprop.5+0x14e>
   3376c:	0941      	lsrs	r1, r0, #5
   3376e:	f85c 2021 	ldr.w	r2, [ip, r1, lsl #2]
   33772:	f000 041f 	and.w	r4, r0, #31
   33776:	fa22 f904 	lsr.w	r9, r2, r4
   3377a:	f019 0f01 	tst.w	r9, #1
   3377e:	d007      	beq.n	33790 <mem_alloc.constprop.5+0x140>
   33780:	e013      	b.n	337aa <mem_alloc.constprop.5+0x15a>
   33782:	f85c 2021 	ldr.w	r2, [ip, r1, lsl #2]
   33786:	fa22 f904 	lsr.w	r9, r2, r4
   3378a:	f019 0f01 	tst.w	r9, #1
   3378e:	d10c      	bne.n	337aa <mem_alloc.constprop.5+0x15a>
   33790:	3001      	adds	r0, #1
   33792:	4582      	cmp	sl, r0
   33794:	ea4f 1150 	mov.w	r1, r0, lsr #5
   33798:	f000 041f 	and.w	r4, r0, #31
   3379c:	d1f1      	bne.n	33782 <mem_alloc.constprop.5+0x132>
   3379e:	3601      	adds	r6, #1
   337a0:	455e      	cmp	r6, fp
   337a2:	f108 0808 	add.w	r8, r8, #8
   337a6:	d3c4      	bcc.n	33732 <mem_alloc.constprop.5+0xe2>
   337a8:	e7b6      	b.n	33718 <mem_alloc.constprop.5+0xc8>
   337aa:	2601      	movs	r6, #1
   337ac:	fa06 f404 	lsl.w	r4, r6, r4
   337b0:	899e      	ldrh	r6, [r3, #12]
   337b2:	ea22 0204 	bic.w	r2, r2, r4
   337b6:	eba0 000e 	sub.w	r0, r0, lr
   337ba:	f84c 2021 	str.w	r2, [ip, r1, lsl #2]
   337be:	685c      	ldr	r4, [r3, #4]
   337c0:	2e00      	cmp	r6, #0
   337c2:	d0a9      	beq.n	33718 <mem_alloc.constprop.5+0xc8>
   337c4:	886a      	ldrh	r2, [r5, #2]
   337c6:	4282      	cmp	r2, r0
   337c8:	d811      	bhi.n	337ee <mem_alloc.constprop.5+0x19e>
   337ca:	2100      	movs	r1, #0
   337cc:	1d2b      	adds	r3, r5, #4
   337ce:	e003      	b.n	337d8 <mem_alloc.constprop.5+0x188>
   337d0:	885a      	ldrh	r2, [r3, #2]
   337d2:	3304      	adds	r3, #4
   337d4:	4282      	cmp	r2, r0
   337d6:	d80a      	bhi.n	337ee <mem_alloc.constprop.5+0x19e>
   337d8:	f833 5c04 	ldrh.w	r5, [r3, #-4]
   337dc:	3101      	adds	r1, #1
   337de:	428e      	cmp	r6, r1
   337e0:	fb02 4405 	mla	r4, r2, r5, r4
   337e4:	eba0 0002 	sub.w	r0, r0, r2
   337e8:	461d      	mov	r5, r3
   337ea:	d1f1      	bne.n	337d0 <mem_alloc.constprop.5+0x180>
   337ec:	e794      	b.n	33718 <mem_alloc.constprop.5+0xc8>
   337ee:	882b      	ldrh	r3, [r5, #0]
   337f0:	fb00 4003 	mla	r0, r0, r3, r4
   337f4:	b003      	add	sp, #12
   337f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   337fa:	4670      	mov	r0, lr
   337fc:	e7b0      	b.n	33760 <mem_alloc.constprop.5+0x110>
   337fe:	f1bb 0f10 	cmp.w	fp, #16
   33802:	bf08      	it	eq
   33804:	260f      	moveq	r6, #15
   33806:	d090      	beq.n	3372a <mem_alloc.constprop.5+0xda>
   33808:	e786      	b.n	33718 <mem_alloc.constprop.5+0xc8>
   3380a:	bf00      	nop
   3380c:	20024ee4 	.word	0x20024ee4
   33810:	20024ea8 	.word	0x20024ea8
   33814:	20024e64 	.word	0x20024e64

00033818 <mem_alloc.constprop.4>:
   33818:	2800      	cmp	r0, #0
   3381a:	d04c      	beq.n	338b6 <mem_alloc.constprop.4+0x9e>
   3381c:	4b6b      	ldr	r3, [pc, #428]	; (339cc <mem_alloc.constprop.4+0x1b4>)
   3381e:	681a      	ldr	r2, [r3, #0]
   33820:	4290      	cmp	r0, r2
   33822:	d848      	bhi.n	338b6 <mem_alloc.constprop.4+0x9e>
   33824:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   33828:	685f      	ldr	r7, [r3, #4]
   3382a:	b083      	sub	sp, #12
   3382c:	9700      	str	r7, [sp, #0]
   3382e:	2f00      	cmp	r7, #0
   33830:	d051      	beq.n	338d6 <mem_alloc.constprop.4+0xbe>
   33832:	1e7a      	subs	r2, r7, #1
   33834:	4696      	mov	lr, r2
   33836:	2100      	movs	r1, #0
   33838:	f04f 0c01 	mov.w	ip, #1
   3383c:	4c64      	ldr	r4, [pc, #400]	; (339d0 <mem_alloc.constprop.4+0x1b8>)
   3383e:	9201      	str	r2, [sp, #4]
   33840:	eb01 020e 	add.w	r2, r1, lr
   33844:	3201      	adds	r2, #1
   33846:	f853 503c 	ldr.w	r5, [r3, ip, lsl #3]
   3384a:	0852      	lsrs	r2, r2, #1
   3384c:	f102 0801 	add.w	r8, r2, #1
   33850:	eb05 0545 	add.w	r5, r5, r5, lsl #1
   33854:	f853 9037 	ldr.w	r9, [r3, r7, lsl #3]
   33858:	f854 a025 	ldr.w	sl, [r4, r5, lsl #2]
   3385c:	f853 6038 	ldr.w	r6, [r3, r8, lsl #3]
   33860:	eb09 0549 	add.w	r5, r9, r9, lsl #1
   33864:	eb03 09cc 	add.w	r9, r3, ip, lsl #3
   33868:	f8d9 9004 	ldr.w	r9, [r9, #4]
   3386c:	eb06 0646 	add.w	r6, r6, r6, lsl #1
   33870:	f8da a010 	ldr.w	sl, [sl, #16]
   33874:	f854 6026 	ldr.w	r6, [r4, r6, lsl #2]
   33878:	f854 5025 	ldr.w	r5, [r4, r5, lsl #2]
   3387c:	f83a a029 	ldrh.w	sl, [sl, r9, lsl #2]
   33880:	eb03 0bc8 	add.w	fp, r3, r8, lsl #3
   33884:	eb03 09c7 	add.w	r9, r3, r7, lsl #3
   33888:	6936      	ldr	r6, [r6, #16]
   3388a:	f8db b004 	ldr.w	fp, [fp, #4]
   3388e:	692d      	ldr	r5, [r5, #16]
   33890:	f8d9 9004 	ldr.w	r9, [r9, #4]
   33894:	4550      	cmp	r0, sl
   33896:	f836 602b 	ldrh.w	r6, [r6, fp, lsl #2]
   3389a:	f835 5029 	ldrh.w	r5, [r5, r9, lsl #2]
   3389e:	d913      	bls.n	338c8 <mem_alloc.constprop.4+0xb0>
   338a0:	42a8      	cmp	r0, r5
   338a2:	d210      	bcs.n	338c6 <mem_alloc.constprop.4+0xae>
   338a4:	42b0      	cmp	r0, r6
   338a6:	d908      	bls.n	338ba <mem_alloc.constprop.4+0xa2>
   338a8:	45c6      	cmp	lr, r8
   338aa:	4641      	mov	r1, r8
   338ac:	f0c0 8087 	bcc.w	339be <mem_alloc.constprop.4+0x1a6>
   338b0:	f108 0c01 	add.w	ip, r8, #1
   338b4:	e7c4      	b.n	33840 <mem_alloc.constprop.4+0x28>
   338b6:	2000      	movs	r0, #0
   338b8:	4770      	bx	lr
   338ba:	f102 3eff 	add.w	lr, r2, #4294967295
   338be:	4571      	cmp	r1, lr
   338c0:	d87d      	bhi.n	339be <mem_alloc.constprop.4+0x1a6>
   338c2:	4617      	mov	r7, r2
   338c4:	e7bc      	b.n	33840 <mem_alloc.constprop.4+0x28>
   338c6:	4639      	mov	r1, r7
   338c8:	9a00      	ldr	r2, [sp, #0]
   338ca:	428a      	cmp	r2, r1
   338cc:	d007      	beq.n	338de <mem_alloc.constprop.4+0xc6>
   338ce:	2910      	cmp	r1, #16
   338d0:	d001      	beq.n	338d6 <mem_alloc.constprop.4+0xbe>
   338d2:	428a      	cmp	r2, r1
   338d4:	d808      	bhi.n	338e8 <mem_alloc.constprop.4+0xd0>
   338d6:	2000      	movs	r0, #0
   338d8:	b003      	add	sp, #12
   338da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   338de:	9a01      	ldr	r2, [sp, #4]
   338e0:	2a10      	cmp	r2, #16
   338e2:	bf18      	it	ne
   338e4:	4611      	movne	r1, r2
   338e6:	d0f6      	beq.n	338d6 <mem_alloc.constprop.4+0xbe>
   338e8:	f8df c0e8 	ldr.w	ip, [pc, #232]	; 339d4 <mem_alloc.constprop.4+0x1bc>
   338ec:	f8dd 9000 	ldr.w	r9, [sp]
   338f0:	eb03 08c1 	add.w	r8, r3, r1, lsl #3
   338f4:	e9d8 2602 	ldrd	r2, r6, [r8, #8]
   338f8:	eb02 0242 	add.w	r2, r2, r2, lsl #1
   338fc:	f854 3022 	ldr.w	r3, [r4, r2, lsl #2]
   33900:	eb04 0282 	add.w	r2, r4, r2, lsl #2
   33904:	f8d2 e004 	ldr.w	lr, [r2, #4]
   33908:	691f      	ldr	r7, [r3, #16]
   3390a:	2e00      	cmp	r6, #0
   3390c:	d055      	beq.n	339ba <mem_alloc.constprop.4+0x1a2>
   3390e:	463a      	mov	r2, r7
   33910:	4670      	mov	r0, lr
   33912:	00b6      	lsls	r6, r6, #2
   33914:	eb07 0a06 	add.w	sl, r7, r6
   33918:	8855      	ldrh	r5, [r2, #2]
   3391a:	3204      	adds	r2, #4
   3391c:	4592      	cmp	sl, r2
   3391e:	4428      	add	r0, r5
   33920:	d1fa      	bne.n	33918 <mem_alloc.constprop.4+0x100>
   33922:	19bd      	adds	r5, r7, r6
   33924:	f8b5 b002 	ldrh.w	fp, [r5, #2]
   33928:	4483      	add	fp, r0
   3392a:	4583      	cmp	fp, r0
   3392c:	d918      	bls.n	33960 <mem_alloc.constprop.4+0x148>
   3392e:	0945      	lsrs	r5, r0, #5
   33930:	f85c 2025 	ldr.w	r2, [ip, r5, lsl #2]
   33934:	f000 061f 	and.w	r6, r0, #31
   33938:	fa22 fa06 	lsr.w	sl, r2, r6
   3393c:	f01a 0f01 	tst.w	sl, #1
   33940:	d007      	beq.n	33952 <mem_alloc.constprop.4+0x13a>
   33942:	e013      	b.n	3396c <mem_alloc.constprop.4+0x154>
   33944:	f85c 2025 	ldr.w	r2, [ip, r5, lsl #2]
   33948:	fa22 fa06 	lsr.w	sl, r2, r6
   3394c:	f01a 0f01 	tst.w	sl, #1
   33950:	d10c      	bne.n	3396c <mem_alloc.constprop.4+0x154>
   33952:	3001      	adds	r0, #1
   33954:	4583      	cmp	fp, r0
   33956:	ea4f 1550 	mov.w	r5, r0, lsr #5
   3395a:	f000 061f 	and.w	r6, r0, #31
   3395e:	d1f1      	bne.n	33944 <mem_alloc.constprop.4+0x12c>
   33960:	3101      	adds	r1, #1
   33962:	4549      	cmp	r1, r9
   33964:	f108 0808 	add.w	r8, r8, #8
   33968:	d3c4      	bcc.n	338f4 <mem_alloc.constprop.4+0xdc>
   3396a:	e7b4      	b.n	338d6 <mem_alloc.constprop.4+0xbe>
   3396c:	2101      	movs	r1, #1
   3396e:	40b1      	lsls	r1, r6
   33970:	899e      	ldrh	r6, [r3, #12]
   33972:	ea22 0201 	bic.w	r2, r2, r1
   33976:	eba0 000e 	sub.w	r0, r0, lr
   3397a:	f84c 2025 	str.w	r2, [ip, r5, lsl #2]
   3397e:	685c      	ldr	r4, [r3, #4]
   33980:	2e00      	cmp	r6, #0
   33982:	d0a8      	beq.n	338d6 <mem_alloc.constprop.4+0xbe>
   33984:	887a      	ldrh	r2, [r7, #2]
   33986:	4282      	cmp	r2, r0
   33988:	d811      	bhi.n	339ae <mem_alloc.constprop.4+0x196>
   3398a:	2100      	movs	r1, #0
   3398c:	1d3b      	adds	r3, r7, #4
   3398e:	e003      	b.n	33998 <mem_alloc.constprop.4+0x180>
   33990:	885a      	ldrh	r2, [r3, #2]
   33992:	3304      	adds	r3, #4
   33994:	4282      	cmp	r2, r0
   33996:	d80a      	bhi.n	339ae <mem_alloc.constprop.4+0x196>
   33998:	f833 5c04 	ldrh.w	r5, [r3, #-4]
   3399c:	3101      	adds	r1, #1
   3399e:	428e      	cmp	r6, r1
   339a0:	eba0 0002 	sub.w	r0, r0, r2
   339a4:	fb02 4405 	mla	r4, r2, r5, r4
   339a8:	461f      	mov	r7, r3
   339aa:	d1f1      	bne.n	33990 <mem_alloc.constprop.4+0x178>
   339ac:	e793      	b.n	338d6 <mem_alloc.constprop.4+0xbe>
   339ae:	883b      	ldrh	r3, [r7, #0]
   339b0:	fb00 4003 	mla	r0, r0, r3, r4
   339b4:	b003      	add	sp, #12
   339b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   339ba:	4670      	mov	r0, lr
   339bc:	e7b1      	b.n	33922 <mem_alloc.constprop.4+0x10a>
   339be:	9a00      	ldr	r2, [sp, #0]
   339c0:	2a10      	cmp	r2, #16
   339c2:	bf08      	it	eq
   339c4:	210f      	moveq	r1, #15
   339c6:	d08f      	beq.n	338e8 <mem_alloc.constprop.4+0xd0>
   339c8:	e785      	b.n	338d6 <mem_alloc.constprop.4+0xbe>
   339ca:	bf00      	nop
   339cc:	20024ee4 	.word	0x20024ee4
   339d0:	20024ea8 	.word	0x20024ea8
   339d4:	20024e64 	.word	0x20024e64

000339d8 <nrf_mem_init>:
   339d8:	b570      	push	{r4, r5, r6, lr}
   339da:	2200      	movs	r2, #0
   339dc:	2501      	movs	r5, #1
   339de:	4833      	ldr	r0, [pc, #204]	; (33aac <nrf_mem_init+0xd4>)
   339e0:	0951      	lsrs	r1, r2, #5
   339e2:	f850 4021 	ldr.w	r4, [r0, r1, lsl #2]
   339e6:	f002 031f 	and.w	r3, r2, #31
   339ea:	fa05 f303 	lsl.w	r3, r5, r3
   339ee:	3201      	adds	r2, #1
   339f0:	4323      	orrs	r3, r4
   339f2:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
   339f6:	f840 3021 	str.w	r3, [r0, r1, lsl #2]
   339fa:	d1f1      	bne.n	339e0 <nrf_mem_init+0x8>
   339fc:	2400      	movs	r4, #0
   339fe:	4b2c      	ldr	r3, [pc, #176]	; (33ab0 <nrf_mem_init+0xd8>)
   33a00:	4621      	mov	r1, r4
   33a02:	223c      	movs	r2, #60	; 0x3c
   33a04:	482b      	ldr	r0, [pc, #172]	; (33ab4 <nrf_mem_init+0xdc>)
   33a06:	601c      	str	r4, [r3, #0]
   33a08:	f011 fa5c 	bl	44ec4 <memset>
   33a0c:	2110      	movs	r1, #16
   33a0e:	2205      	movs	r2, #5
   33a10:	4b29      	ldr	r3, [pc, #164]	; (33ab8 <nrf_mem_init+0xe0>)
   33a12:	4e2a      	ldr	r6, [pc, #168]	; (33abc <nrf_mem_init+0xe4>)
   33a14:	e9c3 4400 	strd	r4, r4, [r3]
   33a18:	60d9      	str	r1, [r3, #12]
   33a1a:	6159      	str	r1, [r3, #20]
   33a1c:	61d9      	str	r1, [r3, #28]
   33a1e:	6259      	str	r1, [r3, #36]	; 0x24
   33a20:	62d9      	str	r1, [r3, #44]	; 0x2c
   33a22:	6359      	str	r1, [r3, #52]	; 0x34
   33a24:	63d9      	str	r1, [r3, #60]	; 0x3c
   33a26:	6459      	str	r1, [r3, #68]	; 0x44
   33a28:	64d9      	str	r1, [r3, #76]	; 0x4c
   33a2a:	6559      	str	r1, [r3, #84]	; 0x54
   33a2c:	65d9      	str	r1, [r3, #92]	; 0x5c
   33a2e:	6659      	str	r1, [r3, #100]	; 0x64
   33a30:	66d9      	str	r1, [r3, #108]	; 0x6c
   33a32:	6759      	str	r1, [r3, #116]	; 0x74
   33a34:	67d9      	str	r1, [r3, #124]	; 0x7c
   33a36:	609a      	str	r2, [r3, #8]
   33a38:	611a      	str	r2, [r3, #16]
   33a3a:	619a      	str	r2, [r3, #24]
   33a3c:	621a      	str	r2, [r3, #32]
   33a3e:	629a      	str	r2, [r3, #40]	; 0x28
   33a40:	631a      	str	r2, [r3, #48]	; 0x30
   33a42:	639a      	str	r2, [r3, #56]	; 0x38
   33a44:	641a      	str	r2, [r3, #64]	; 0x40
   33a46:	649a      	str	r2, [r3, #72]	; 0x48
   33a48:	651a      	str	r2, [r3, #80]	; 0x50
   33a4a:	659a      	str	r2, [r3, #88]	; 0x58
   33a4c:	661a      	str	r2, [r3, #96]	; 0x60
   33a4e:	669a      	str	r2, [r3, #104]	; 0x68
   33a50:	671a      	str	r2, [r3, #112]	; 0x70
   33a52:	679a      	str	r2, [r3, #120]	; 0x78
   33a54:	e9c3 2120 	strd	r2, r1, [r3, #128]	; 0x80
   33a58:	e9c3 4422 	strd	r4, r4, [r3, #136]	; 0x88
   33a5c:	e9c3 2124 	strd	r2, r1, [r3, #144]	; 0x90
   33a60:	e9c3 2126 	strd	r2, r1, [r3, #152]	; 0x98
   33a64:	e9c3 2128 	strd	r2, r1, [r3, #160]	; 0xa0
   33a68:	e9c3 212a 	strd	r2, r1, [r3, #168]	; 0xa8
   33a6c:	e9c3 212c 	strd	r2, r1, [r3, #176]	; 0xb0
   33a70:	e9c3 212e 	strd	r2, r1, [r3, #184]	; 0xb8
   33a74:	e9c3 2130 	strd	r2, r1, [r3, #192]	; 0xc0
   33a78:	e9c3 2132 	strd	r2, r1, [r3, #200]	; 0xc8
   33a7c:	e9c3 2134 	strd	r2, r1, [r3, #208]	; 0xd0
   33a80:	e9c3 2136 	strd	r2, r1, [r3, #216]	; 0xd8
   33a84:	e9c3 2138 	strd	r2, r1, [r3, #224]	; 0xe0
   33a88:	e9c3 213a 	strd	r2, r1, [r3, #232]	; 0xe8
   33a8c:	e9c3 213c 	strd	r2, r1, [r3, #240]	; 0xf0
   33a90:	e9c3 213e 	strd	r2, r1, [r3, #248]	; 0xf8
   33a94:	f8c3 1104 	str.w	r1, [r3, #260]	; 0x104
   33a98:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
   33a9c:	f8c3 110c 	str.w	r1, [r3, #268]	; 0x10c
   33aa0:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
   33aa4:	4620      	mov	r0, r4
   33aa6:	7035      	strb	r5, [r6, #0]
   33aa8:	bd70      	pop	{r4, r5, r6, pc}
   33aaa:	bf00      	nop
   33aac:	20024e64 	.word	0x20024e64
   33ab0:	20024ea4 	.word	0x20024ea4
   33ab4:	20024ea8 	.word	0x20024ea8
   33ab8:	20024ee4 	.word	0x20024ee4
   33abc:	2002b4e5 	.word	0x2002b4e5

00033ac0 <nrf_mem_register>:
   33ac0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   33ac4:	4b87      	ldr	r3, [pc, #540]	; (33ce4 <nrf_mem_register+0x224>)
   33ac6:	b087      	sub	sp, #28
   33ac8:	781b      	ldrb	r3, [r3, #0]
   33aca:	2b00      	cmp	r3, #0
   33acc:	f000 808c 	beq.w	33be8 <nrf_mem_register+0x128>
   33ad0:	b328      	cbz	r0, 33b1e <nrf_mem_register+0x5e>
   33ad2:	b321      	cbz	r1, 33b1e <nrf_mem_register+0x5e>
   33ad4:	780b      	ldrb	r3, [r1, #0]
   33ad6:	f8df 8218 	ldr.w	r8, [pc, #536]	; 33cf0 <nrf_mem_register+0x230>
   33ada:	eb03 1303 	add.w	r3, r3, r3, lsl #4
   33ade:	eb08 03c3 	add.w	r3, r8, r3, lsl #3
   33ae2:	685b      	ldr	r3, [r3, #4]
   33ae4:	f8b1 c00c 	ldrh.w	ip, [r1, #12]
   33ae8:	4463      	add	r3, ip
   33aea:	2b10      	cmp	r3, #16
   33aec:	d811      	bhi.n	33b12 <nrf_mem_register+0x52>
   33aee:	f04f 0a00 	mov.w	sl, #0
   33af2:	4689      	mov	r9, r1
   33af4:	4b7c      	ldr	r3, [pc, #496]	; (33ce8 <nrf_mem_register+0x228>)
   33af6:	4f7d      	ldr	r7, [pc, #500]	; (33cec <nrf_mem_register+0x22c>)
   33af8:	681b      	ldr	r3, [r3, #0]
   33afa:	ea4f 0e8c 	mov.w	lr, ip, lsl #2
   33afe:	9300      	str	r3, [sp, #0]
   33b00:	68b9      	ldr	r1, [r7, #8]
   33b02:	b191      	cbz	r1, 33b2a <nrf_mem_register+0x6a>
   33b04:	f10a 0a01 	add.w	sl, sl, #1
   33b08:	f1ba 0f05 	cmp.w	sl, #5
   33b0c:	f107 070c 	add.w	r7, r7, #12
   33b10:	d1f6      	bne.n	33b00 <nrf_mem_register+0x40>
   33b12:	f248 1b07 	movw	fp, #33031	; 0x8107
   33b16:	4658      	mov	r0, fp
   33b18:	b007      	add	sp, #28
   33b1a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   33b1e:	f248 1b0e 	movw	fp, #33038	; 0x810e
   33b22:	4658      	mov	r0, fp
   33b24:	b007      	add	sp, #28
   33b26:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   33b2a:	f1bc 0f00 	cmp.w	ip, #0
   33b2e:	d061      	beq.n	33bf4 <nrf_mem_register+0x134>
   33b30:	460d      	mov	r5, r1
   33b32:	460c      	mov	r4, r1
   33b34:	f8d9 3010 	ldr.w	r3, [r9, #16]
   33b38:	eb0e 0b03 	add.w	fp, lr, r3
   33b3c:	885a      	ldrh	r2, [r3, #2]
   33b3e:	f833 6b04 	ldrh.w	r6, [r3], #4
   33b42:	4415      	add	r5, r2
   33b44:	459b      	cmp	fp, r3
   33b46:	fb02 4406 	mla	r4, r2, r6, r4
   33b4a:	d1f7      	bne.n	33b3c <nrf_mem_register+0x7c>
   33b4c:	f8d9 3008 	ldr.w	r3, [r9, #8]
   33b50:	42a3      	cmp	r3, r4
   33b52:	d3d7      	bcc.n	33b04 <nrf_mem_register+0x44>
   33b54:	9b00      	ldr	r3, [sp, #0]
   33b56:	442b      	add	r3, r5
   33b58:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   33b5c:	d2d2      	bcs.n	33b04 <nrf_mem_register+0x44>
   33b5e:	4c63      	ldr	r4, [pc, #396]	; (33cec <nrf_mem_register+0x22c>)
   33b60:	eb0a 024a 	add.w	r2, sl, sl, lsl #1
   33b64:	0092      	lsls	r2, r2, #2
   33b66:	f8c0 a000 	str.w	sl, [r0]
   33b6a:	18a0      	adds	r0, r4, r2
   33b6c:	f844 9002 	str.w	r9, [r4, r2]
   33b70:	9a00      	ldr	r2, [sp, #0]
   33b72:	468b      	mov	fp, r1
   33b74:	e9c0 2501 	strd	r2, r5, [r0, #4]
   33b78:	f899 2001 	ldrb.w	r2, [r9, #1]
   33b7c:	485a      	ldr	r0, [pc, #360]	; (33ce8 <nrf_mem_register+0x228>)
   33b7e:	2a01      	cmp	r2, #1
   33b80:	6003      	str	r3, [r0, #0]
   33b82:	d0c8      	beq.n	33b16 <nrf_mem_register+0x56>
   33b84:	f8b9 300c 	ldrh.w	r3, [r9, #12]
   33b88:	2b00      	cmp	r3, #0
   33b8a:	d0c4      	beq.n	33b16 <nrf_mem_register+0x56>
   33b8c:	2500      	movs	r5, #0
   33b8e:	f8cd 9004 	str.w	r9, [sp, #4]
   33b92:	f8cd a00c 	str.w	sl, [sp, #12]
   33b96:	f8cd b014 	str.w	fp, [sp, #20]
   33b9a:	9b01      	ldr	r3, [sp, #4]
   33b9c:	781f      	ldrb	r7, [r3, #0]
   33b9e:	691a      	ldr	r2, [r3, #16]
   33ba0:	013b      	lsls	r3, r7, #4
   33ba2:	eb03 0907 	add.w	r9, r3, r7
   33ba6:	9300      	str	r3, [sp, #0]
   33ba8:	eb08 03c9 	add.w	r3, r8, r9, lsl #3
   33bac:	6859      	ldr	r1, [r3, #4]
   33bae:	f832 4025 	ldrh.w	r4, [r2, r5, lsl #2]
   33bb2:	9102      	str	r1, [sp, #8]
   33bb4:	bb39      	cbnz	r1, 33c06 <nrf_mem_register+0x146>
   33bb6:	9a03      	ldr	r2, [sp, #12]
   33bb8:	60dd      	str	r5, [r3, #12]
   33bba:	609a      	str	r2, [r3, #8]
   33bbc:	9b00      	ldr	r3, [sp, #0]
   33bbe:	443b      	add	r3, r7
   33bc0:	461f      	mov	r7, r3
   33bc2:	eb08 01c3 	add.w	r1, r8, r3, lsl #3
   33bc6:	684b      	ldr	r3, [r1, #4]
   33bc8:	f858 2037 	ldr.w	r2, [r8, r7, lsl #3]
   33bcc:	3301      	adds	r3, #1
   33bce:	4294      	cmp	r4, r2
   33bd0:	604b      	str	r3, [r1, #4]
   33bd2:	d912      	bls.n	33bfa <nrf_mem_register+0x13a>
   33bd4:	9b01      	ldr	r3, [sp, #4]
   33bd6:	f848 4037 	str.w	r4, [r8, r7, lsl #3]
   33bda:	899b      	ldrh	r3, [r3, #12]
   33bdc:	3501      	adds	r5, #1
   33bde:	429d      	cmp	r5, r3
   33be0:	d3db      	bcc.n	33b9a <nrf_mem_register+0xda>
   33be2:	f8dd b014 	ldr.w	fp, [sp, #20]
   33be6:	e796      	b.n	33b16 <nrf_mem_register+0x56>
   33be8:	f248 1b08 	movw	fp, #33032	; 0x8108
   33bec:	4658      	mov	r0, fp
   33bee:	b007      	add	sp, #28
   33bf0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   33bf4:	9b00      	ldr	r3, [sp, #0]
   33bf6:	4665      	mov	r5, ip
   33bf8:	e7ae      	b.n	33b58 <nrf_mem_register+0x98>
   33bfa:	9b01      	ldr	r3, [sp, #4]
   33bfc:	3501      	adds	r5, #1
   33bfe:	899b      	ldrh	r3, [r3, #12]
   33c00:	42ab      	cmp	r3, r5
   33c02:	d8ca      	bhi.n	33b9a <nrf_mem_register+0xda>
   33c04:	e7ed      	b.n	33be2 <nrf_mem_register+0x122>
   33c06:	2600      	movs	r6, #0
   33c08:	f101 3aff 	add.w	sl, r1, #4294967295
   33c0c:	9504      	str	r5, [sp, #16]
   33c0e:	eb06 000a 	add.w	r0, r6, sl
   33c12:	eb09 0206 	add.w	r2, r9, r6
   33c16:	3201      	adds	r2, #1
   33c18:	3001      	adds	r0, #1
   33c1a:	f858 c032 	ldr.w	ip, [r8, r2, lsl #3]
   33c1e:	0840      	lsrs	r0, r0, #1
   33c20:	4d32      	ldr	r5, [pc, #200]	; (33cec <nrf_mem_register+0x22c>)
   33c22:	eb09 0100 	add.w	r1, r9, r0
   33c26:	eb09 030a 	add.w	r3, r9, sl
   33c2a:	3101      	adds	r1, #1
   33c2c:	3301      	adds	r3, #1
   33c2e:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
   33c32:	f858 e031 	ldr.w	lr, [r8, r1, lsl #3]
   33c36:	f855 b02c 	ldr.w	fp, [r5, ip, lsl #2]
   33c3a:	f858 c033 	ldr.w	ip, [r8, r3, lsl #3]
   33c3e:	eb08 02c2 	add.w	r2, r8, r2, lsl #3
   33c42:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
   33c46:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
   33c4a:	f8db b010 	ldr.w	fp, [fp, #16]
   33c4e:	6852      	ldr	r2, [r2, #4]
   33c50:	f855 e02e 	ldr.w	lr, [r5, lr, lsl #2]
   33c54:	f855 c02c 	ldr.w	ip, [r5, ip, lsl #2]
   33c58:	eb08 01c1 	add.w	r1, r8, r1, lsl #3
   33c5c:	eb08 03c3 	add.w	r3, r8, r3, lsl #3
   33c60:	f83b 2022 	ldrh.w	r2, [fp, r2, lsl #2]
   33c64:	f8de e010 	ldr.w	lr, [lr, #16]
   33c68:	6849      	ldr	r1, [r1, #4]
   33c6a:	f8dc c010 	ldr.w	ip, [ip, #16]
   33c6e:	685b      	ldr	r3, [r3, #4]
   33c70:	4294      	cmp	r4, r2
   33c72:	f83e 1021 	ldrh.w	r1, [lr, r1, lsl #2]
   33c76:	f83c 3023 	ldrh.w	r3, [ip, r3, lsl #2]
   33c7a:	d92d      	bls.n	33cd8 <nrf_mem_register+0x218>
   33c7c:	429c      	cmp	r4, r3
   33c7e:	d22d      	bcs.n	33cdc <nrf_mem_register+0x21c>
   33c80:	428c      	cmp	r4, r1
   33c82:	d924      	bls.n	33cce <nrf_mem_register+0x20e>
   33c84:	1c46      	adds	r6, r0, #1
   33c86:	45b2      	cmp	sl, r6
   33c88:	d2c1      	bcs.n	33c0e <nrf_mem_register+0x14e>
   33c8a:	2610      	movs	r6, #16
   33c8c:	9d04      	ldr	r5, [sp, #16]
   33c8e:	9a02      	ldr	r2, [sp, #8]
   33c90:	42b2      	cmp	r2, r6
   33c92:	d911      	bls.n	33cb8 <nrf_mem_register+0x1f8>
   33c94:	9b00      	ldr	r3, [sp, #0]
   33c96:	443b      	add	r3, r7
   33c98:	441a      	add	r2, r3
   33c9a:	4433      	add	r3, r6
   33c9c:	eb08 0ac2 	add.w	sl, r8, r2, lsl #3
   33ca0:	eb08 09c3 	add.w	r9, r8, r3, lsl #3
   33ca4:	2208      	movs	r2, #8
   33ca6:	4651      	mov	r1, sl
   33ca8:	eb0a 0002 	add.w	r0, sl, r2
   33cac:	f1aa 0a08 	sub.w	sl, sl, #8
   33cb0:	f011 f8ce 	bl	44e50 <memcpy>
   33cb4:	45d1      	cmp	r9, sl
   33cb6:	d1f5      	bne.n	33ca4 <nrf_mem_register+0x1e4>
   33cb8:	9b00      	ldr	r3, [sp, #0]
   33cba:	9903      	ldr	r1, [sp, #12]
   33cbc:	443b      	add	r3, r7
   33cbe:	4433      	add	r3, r6
   33cc0:	3301      	adds	r3, #1
   33cc2:	eb08 02c3 	add.w	r2, r8, r3, lsl #3
   33cc6:	f848 1033 	str.w	r1, [r8, r3, lsl #3]
   33cca:	6055      	str	r5, [r2, #4]
   33ccc:	e776      	b.n	33bbc <nrf_mem_register+0xfc>
   33cce:	f100 3aff 	add.w	sl, r0, #4294967295
   33cd2:	4556      	cmp	r6, sl
   33cd4:	d99b      	bls.n	33c0e <nrf_mem_register+0x14e>
   33cd6:	e7d8      	b.n	33c8a <nrf_mem_register+0x1ca>
   33cd8:	9d04      	ldr	r5, [sp, #16]
   33cda:	e7d8      	b.n	33c8e <nrf_mem_register+0x1ce>
   33cdc:	9d04      	ldr	r5, [sp, #16]
   33cde:	f10a 0601 	add.w	r6, sl, #1
   33ce2:	e7d4      	b.n	33c8e <nrf_mem_register+0x1ce>
   33ce4:	2002b4e5 	.word	0x2002b4e5
   33ce8:	20024ea4 	.word	0x20024ea4
   33cec:	20024ea8 	.word	0x20024ea8
   33cf0:	20024ee4 	.word	0x20024ee4

00033cf4 <nrf_malloc>:
   33cf4:	4b03      	ldr	r3, [pc, #12]	; (33d04 <nrf_malloc+0x10>)
   33cf6:	781b      	ldrb	r3, [r3, #0]
   33cf8:	b10b      	cbz	r3, 33cfe <nrf_malloc+0xa>
   33cfa:	f7ff bd8d 	b.w	33818 <mem_alloc.constprop.4>
   33cfe:	4618      	mov	r0, r3
   33d00:	4770      	bx	lr
   33d02:	bf00      	nop
   33d04:	2002b4e5 	.word	0x2002b4e5

00033d08 <nrf_free>:
   33d08:	4b04      	ldr	r3, [pc, #16]	; (33d1c <nrf_free+0x14>)
   33d0a:	781b      	ldrb	r3, [r3, #0]
   33d0c:	b123      	cbz	r3, 33d18 <nrf_free+0x10>
   33d0e:	b118      	cbz	r0, 33d18 <nrf_free+0x10>
   33d10:	4601      	mov	r1, r0
   33d12:	2000      	movs	r0, #0
   33d14:	f7ff bc30 	b.w	33578 <mem_free>
   33d18:	4770      	bx	lr
   33d1a:	bf00      	nop
   33d1c:	2002b4e5 	.word	0x2002b4e5

00033d20 <nrf_shared_malloc>:
   33d20:	4b03      	ldr	r3, [pc, #12]	; (33d30 <nrf_shared_malloc+0x10>)
   33d22:	781b      	ldrb	r3, [r3, #0]
   33d24:	b10b      	cbz	r3, 33d2a <nrf_shared_malloc+0xa>
   33d26:	f7ff bc93 	b.w	33650 <mem_alloc.constprop.5>
   33d2a:	4618      	mov	r0, r3
   33d2c:	4770      	bx	lr
   33d2e:	bf00      	nop
   33d30:	2002b4e5 	.word	0x2002b4e5

00033d34 <nrf_shared_free>:
   33d34:	4b04      	ldr	r3, [pc, #16]	; (33d48 <nrf_shared_free+0x14>)
   33d36:	781b      	ldrb	r3, [r3, #0]
   33d38:	b123      	cbz	r3, 33d44 <nrf_shared_free+0x10>
   33d3a:	b118      	cbz	r0, 33d44 <nrf_shared_free+0x10>
   33d3c:	4601      	mov	r1, r0
   33d3e:	2001      	movs	r0, #1
   33d40:	f7ff bc1a 	b.w	33578 <mem_free>
   33d44:	4770      	bx	lr
   33d46:	bf00      	nop
   33d48:	2002b4e5 	.word	0x2002b4e5

00033d4c <ip_client_event_handler>:
   33d4c:	f850 1b08 	ldr.w	r1, [r0], #8
   33d50:	0c09      	lsrs	r1, r1, #16
   33d52:	f004 bd35 	b.w	387c0 <rpc_ip_event_handler>
   33d56:	bf00      	nop

00033d58 <rpc_ip_client_init>:
   33d58:	4801      	ldr	r0, [pc, #4]	; (33d60 <rpc_ip_client_init+0x8>)
   33d5a:	f005 ba25 	b.w	391a8 <rpc_client_register>
   33d5e:	bf00      	nop
   33d60:	00046fb8 	.word	0x00046fb8

00033d64 <rpc_ip_client_request_alloc>:
   33d64:	2300      	movs	r3, #0
   33d66:	b510      	push	{r4, lr}
   33d68:	b082      	sub	sp, #8
   33d6a:	9301      	str	r3, [sp, #4]
   33d6c:	b158      	cbz	r0, 33d86 <rpc_ip_client_request_alloc+0x22>
   33d6e:	4604      	mov	r4, r0
   33d70:	aa01      	add	r2, sp, #4
   33d72:	2004      	movs	r0, #4
   33d74:	f005 fc50 	bl	39618 <rpc_message_alloc>
   33d78:	b918      	cbnz	r0, 33d82 <rpc_ip_client_request_alloc+0x1e>
   33d7a:	9b01      	ldr	r3, [sp, #4]
   33d7c:	b10b      	cbz	r3, 33d82 <rpc_ip_client_request_alloc+0x1e>
   33d7e:	3308      	adds	r3, #8
   33d80:	6023      	str	r3, [r4, #0]
   33d82:	b002      	add	sp, #8
   33d84:	bd10      	pop	{r4, pc}
   33d86:	2007      	movs	r0, #7
   33d88:	b002      	add	sp, #8
   33d8a:	bd10      	pop	{r4, pc}

00033d8c <rpc_ip_client_request_send>:
   33d8c:	f401 4370 	and.w	r3, r1, #61440	; 0xf000
   33d90:	f5b3 4fe0 	cmp.w	r3, #28672	; 0x7000
   33d94:	d10b      	bne.n	33dae <rpc_ip_client_request_send+0x22>
   33d96:	b160      	cbz	r0, 33db2 <rpc_ip_client_request_send+0x26>
   33d98:	4603      	mov	r3, r0
   33d9a:	f830 2c08 	ldrh.w	r2, [r0, #-8]
   33d9e:	2004      	movs	r0, #4
   33da0:	ea42 4101 	orr.w	r1, r2, r1, lsl #16
   33da4:	f843 1d08 	str.w	r1, [r3, #-8]!
   33da8:	4619      	mov	r1, r3
   33daa:	f005 bc1d 	b.w	395e8 <rpc_message_send>
   33dae:	200f      	movs	r0, #15
   33db0:	4770      	bx	lr
   33db2:	2007      	movs	r0, #7
   33db4:	4770      	bx	lr
   33db6:	bf00      	nop

00033db8 <rpc_ip_client_message_free>:
   33db8:	b120      	cbz	r0, 33dc4 <rpc_ip_client_message_free+0xc>
   33dba:	f1a0 0108 	sub.w	r1, r0, #8
   33dbe:	2004      	movs	r0, #4
   33dc0:	f005 bc5c 	b.w	3967c <rpc_message_free>
   33dc4:	2007      	movs	r0, #7
   33dc6:	4770      	bx	lr

00033dc8 <rpc_ip_client_data_free>:
   33dc8:	b118      	cbz	r0, 33dd2 <rpc_ip_client_data_free+0xa>
   33dca:	4601      	mov	r1, r0
   33dcc:	2004      	movs	r0, #4
   33dce:	f005 bd67 	b.w	398a0 <rpc_message_data_free>
   33dd2:	2007      	movs	r0, #7
   33dd4:	4770      	bx	lr
   33dd6:	bf00      	nop

00033dd8 <secure_client_socket>:
   33dd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   33ddc:	460c      	mov	r4, r1
   33dde:	680b      	ldr	r3, [r1, #0]
   33de0:	4f46      	ldr	r7, [pc, #280]	; (33efc <secure_client_socket+0x124>)
   33de2:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
   33de6:	600b      	str	r3, [r1, #0]
   33de8:	680b      	ldr	r3, [r1, #0]
   33dea:	00c6      	lsls	r6, r0, #3
   33dec:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
   33df0:	600b      	str	r3, [r1, #0]
   33df2:	eb07 0a06 	add.w	sl, r7, r6
   33df6:	b082      	sub	sp, #8
   33df8:	f8da 3004 	ldr.w	r3, [sl, #4]
   33dfc:	6989      	ldr	r1, [r1, #24]
   33dfe:	f247 0281 	movw	r2, #28801	; 0x7081
   33e02:	4605      	mov	r5, r0
   33e04:	f8d4 8000 	ldr.w	r8, [r4]
   33e08:	f003 fbd2 	bl	375b0 <ip_interface_request_create>
   33e0c:	2800      	cmp	r0, #0
   33e0e:	d06f      	beq.n	33ef0 <secure_client_socket+0x118>
   33e10:	f8da 2004 	ldr.w	r2, [sl, #4]
   33e14:	4681      	mov	r9, r0
   33e16:	2a00      	cmp	r2, #0
   33e18:	d15f      	bne.n	33eda <secure_client_socket+0x102>
   33e1a:	4b39      	ldr	r3, [pc, #228]	; (33f00 <secure_client_socket+0x128>)
   33e1c:	1971      	adds	r1, r6, r5
   33e1e:	eb03 0181 	add.w	r1, r3, r1, lsl #2
   33e22:	2224      	movs	r2, #36	; 0x24
   33e24:	f109 0014 	add.w	r0, r9, #20
   33e28:	f011 f812 	bl	44e50 <memcpy>
   33e2c:	f8d9 3008 	ldr.w	r3, [r9, #8]
   33e30:	4649      	mov	r1, r9
   33e32:	3324      	adds	r3, #36	; 0x24
   33e34:	f8c9 3008 	str.w	r3, [r9, #8]
   33e38:	6822      	ldr	r2, [r4, #0]
   33e3a:	4643      	mov	r3, r8
   33e3c:	0c12      	lsrs	r2, r2, #16
   33e3e:	0412      	lsls	r2, r2, #16
   33e40:	f042 020a 	orr.w	r2, r2, #10
   33e44:	6022      	str	r2, [r4, #0]
   33e46:	4620      	mov	r0, r4
   33e48:	f247 0281 	movw	r2, #28801	; 0x7081
   33e4c:	f003 fbd0 	bl	375f0 <ip_interface_request_send>
   33e50:	4603      	mov	r3, r0
   33e52:	b970      	cbnz	r0, 33e72 <secure_client_socket+0x9a>
   33e54:	6823      	ldr	r3, [r4, #0]
   33e56:	00db      	lsls	r3, r3, #3
   33e58:	d40f      	bmi.n	33e7a <secure_client_socket+0xa2>
   33e5a:	f04f 33ff 	mov.w	r3, #4294967295
   33e5e:	f64f 72ff 	movw	r2, #65535	; 0xffff
   33e62:	210b      	movs	r1, #11
   33e64:	4628      	mov	r0, r5
   33e66:	f003 fbd7 	bl	37618 <ip_interface_wait>
   33e6a:	4603      	mov	r3, r0
   33e6c:	b150      	cbz	r0, 33e84 <secure_client_socket+0xac>
   33e6e:	f8c4 8000 	str.w	r8, [r4]
   33e72:	4618      	mov	r0, r3
   33e74:	b002      	add	sp, #8
   33e76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   33e7a:	2373      	movs	r3, #115	; 0x73
   33e7c:	4618      	mov	r0, r3
   33e7e:	b002      	add	sp, #8
   33e80:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   33e84:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
   33e88:	f04f 33ff 	mov.w	r3, #4294967295
   33e8c:	4611      	mov	r1, r2
   33e8e:	4628      	mov	r0, r5
   33e90:	f003 fbc2 	bl	37618 <ip_interface_wait>
   33e94:	4603      	mov	r3, r0
   33e96:	bb30      	cbnz	r0, 33ee6 <secure_client_socket+0x10e>
   33e98:	f857 0035 	ldr.w	r0, [r7, r5, lsl #3]
   33e9c:	b138      	cbz	r0, 33eae <secure_client_socket+0xd6>
   33e9e:	9301      	str	r3, [sp, #4]
   33ea0:	f7ff ff32 	bl	33d08 <nrf_free>
   33ea4:	9b01      	ldr	r3, [sp, #4]
   33ea6:	443e      	add	r6, r7
   33ea8:	6073      	str	r3, [r6, #4]
   33eaa:	f847 3035 	str.w	r3, [r7, r5, lsl #3]
   33eae:	4618      	mov	r0, r3
   33eb0:	6822      	ldr	r2, [r4, #0]
   33eb2:	f022 6280 	bic.w	r2, r2, #67108864	; 0x4000000
   33eb6:	6022      	str	r2, [r4, #0]
   33eb8:	6822      	ldr	r2, [r4, #0]
   33eba:	0c12      	lsrs	r2, r2, #16
   33ebc:	0412      	lsls	r2, r2, #16
   33ebe:	f042 020c 	orr.w	r2, r2, #12
   33ec2:	6022      	str	r2, [r4, #0]
   33ec4:	6822      	ldr	r2, [r4, #0]
   33ec6:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
   33eca:	6022      	str	r2, [r4, #0]
   33ecc:	6822      	ldr	r2, [r4, #0]
   33ece:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
   33ed2:	6022      	str	r2, [r4, #0]
   33ed4:	b002      	add	sp, #8
   33ed6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   33eda:	f857 1035 	ldr.w	r1, [r7, r5, lsl #3]
   33ede:	6800      	ldr	r0, [r0, #0]
   33ee0:	f010 ffb6 	bl	44e50 <memcpy>
   33ee4:	e799      	b.n	33e1a <secure_client_socket+0x42>
   33ee6:	2b73      	cmp	r3, #115	; 0x73
   33ee8:	d0c3      	beq.n	33e72 <secure_client_socket+0x9a>
   33eea:	f8c4 8000 	str.w	r8, [r4]
   33eee:	e7c0      	b.n	33e72 <secure_client_socket+0x9a>
   33ef0:	230c      	movs	r3, #12
   33ef2:	4618      	mov	r0, r3
   33ef4:	b002      	add	sp, #8
   33ef6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   33efa:	bf00      	nop
   33efc:	20025138 	.word	0x20025138
   33f00:	20024ff4 	.word	0x20024ff4

00033f04 <tls_interface_init>:
   33f04:	2000      	movs	r0, #0
   33f06:	4770      	bx	lr

00033f08 <tls_interface_open>:
   33f08:	b538      	push	{r3, r4, r5, lr}
   33f0a:	1e4b      	subs	r3, r1, #1
   33f0c:	2b01      	cmp	r3, #1
   33f0e:	d808      	bhi.n	33f22 <tls_interface_open+0x1a>
   33f10:	4614      	mov	r4, r2
   33f12:	b162      	cbz	r2, 33f2e <tls_interface_open+0x26>
   33f14:	2901      	cmp	r1, #1
   33f16:	d02d      	beq.n	33f74 <tls_interface_open+0x6c>
   33f18:	f5b2 7f87 	cmp.w	r2, #270	; 0x10e
   33f1c:	bf08      	it	eq
   33f1e:	2202      	moveq	r2, #2
   33f20:	d00d      	beq.n	33f3e <tls_interface_open+0x36>
   33f22:	2029      	movs	r0, #41	; 0x29
   33f24:	f7fc f936 	bl	30194 <bsd_os_errno_set>
   33f28:	f04f 35ff 	mov.w	r5, #4294967295
   33f2c:	e020      	b.n	33f70 <tls_interface_open+0x68>
   33f2e:	2901      	cmp	r1, #1
   33f30:	bf0b      	itete	eq
   33f32:	2201      	moveq	r2, #1
   33f34:	2202      	movne	r2, #2
   33f36:	f44f 7482 	moveq.w	r4, #260	; 0x104
   33f3a:	f44f 7487 	movne.w	r4, #270	; 0x10e
   33f3e:	f003 fb97 	bl	37670 <ip_interface_open>
   33f42:	1e05      	subs	r5, r0, #0
   33f44:	db1b      	blt.n	33f7e <tls_interface_open+0x76>
   33f46:	4b0f      	ldr	r3, [pc, #60]	; (33f84 <tls_interface_open+0x7c>)
   33f48:	eb05 00c5 	add.w	r0, r5, r5, lsl #3
   33f4c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
   33f50:	2224      	movs	r2, #36	; 0x24
   33f52:	490d      	ldr	r1, [pc, #52]	; (33f88 <tls_interface_open+0x80>)
   33f54:	f010 ff7c 	bl	44e50 <memcpy>
   33f58:	4628      	mov	r0, r5
   33f5a:	f004 ffe9 	bl	38f30 <interface_socket_from_handle_get>
   33f5e:	6803      	ldr	r3, [r0, #0]
   33f60:	6144      	str	r4, [r0, #20]
   33f62:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
   33f66:	6003      	str	r3, [r0, #0]
   33f68:	6803      	ldr	r3, [r0, #0]
   33f6a:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
   33f6e:	6003      	str	r3, [r0, #0]
   33f70:	4628      	mov	r0, r5
   33f72:	bd38      	pop	{r3, r4, r5, pc}
   33f74:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
   33f78:	d1d3      	bne.n	33f22 <tls_interface_open+0x1a>
   33f7a:	460a      	mov	r2, r1
   33f7c:	e7df      	b.n	33f3e <tls_interface_open+0x36>
   33f7e:	f04f 35ff 	mov.w	r5, #4294967295
   33f82:	e7f5      	b.n	33f70 <tls_interface_open+0x68>
   33f84:	20024ff4 	.word	0x20024ff4
   33f88:	00046fc8 	.word	0x00046fc8

00033f8c <tls_interface_close>:
   33f8c:	b538      	push	{r3, r4, r5, lr}
   33f8e:	4604      	mov	r4, r0
   33f90:	f004 ffce 	bl	38f30 <interface_socket_from_handle_get>
   33f94:	b180      	cbz	r0, 33fb8 <tls_interface_close+0x2c>
   33f96:	4d0b      	ldr	r5, [pc, #44]	; (33fc4 <tls_interface_close+0x38>)
   33f98:	f855 0034 	ldr.w	r0, [r5, r4, lsl #3]
   33f9c:	b138      	cbz	r0, 33fae <tls_interface_close+0x22>
   33f9e:	f7ff feb3 	bl	33d08 <nrf_free>
   33fa2:	2300      	movs	r3, #0
   33fa4:	eb05 02c4 	add.w	r2, r5, r4, lsl #3
   33fa8:	f845 3034 	str.w	r3, [r5, r4, lsl #3]
   33fac:	6053      	str	r3, [r2, #4]
   33fae:	4620      	mov	r0, r4
   33fb0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   33fb4:	f003 bc0e 	b.w	377d4 <ip_interface_close>
   33fb8:	2009      	movs	r0, #9
   33fba:	f7fc f8eb 	bl	30194 <bsd_os_errno_set>
   33fbe:	f04f 30ff 	mov.w	r0, #4294967295
   33fc2:	bd38      	pop	{r3, r4, r5, pc}
   33fc4:	20025138 	.word	0x20025138

00033fc8 <tls_interface_sendto>:
   33fc8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   33fcc:	460d      	mov	r5, r1
   33fce:	e9dd 8908 	ldrd	r8, r9, [sp, #32]
   33fd2:	4616      	mov	r6, r2
   33fd4:	461f      	mov	r7, r3
   33fd6:	4604      	mov	r4, r0
   33fd8:	f004 ffaa 	bl	38f30 <interface_socket_from_handle_get>
   33fdc:	2800      	cmp	r0, #0
   33fde:	d03b      	beq.n	34058 <tls_interface_sendto+0x90>
   33fe0:	6803      	ldr	r3, [r0, #0]
   33fe2:	b29b      	uxth	r3, r3
   33fe4:	2b0c      	cmp	r3, #12
   33fe6:	d039      	beq.n	3405c <tls_interface_sendto+0x94>
   33fe8:	6803      	ldr	r3, [r0, #0]
   33fea:	b29b      	uxth	r3, r3
   33fec:	2b0b      	cmp	r3, #11
   33fee:	d111      	bne.n	34014 <tls_interface_sendto+0x4c>
   33ff0:	4b20      	ldr	r3, [pc, #128]	; (34074 <tls_interface_sendto+0xac>)
   33ff2:	eb04 04c4 	add.w	r4, r4, r4, lsl #3
   33ff6:	f813 3024 	ldrb.w	r3, [r3, r4, lsl #2]
   33ffa:	2b02      	cmp	r3, #2
   33ffc:	d038      	beq.n	34070 <tls_interface_sendto+0xa8>
   33ffe:	6903      	ldr	r3, [r0, #16]
   34000:	2b01      	cmp	r3, #1
   34002:	bf14      	ite	ne
   34004:	2039      	movne	r0, #57	; 0x39
   34006:	202a      	moveq	r0, #42	; 0x2a
   34008:	f7fc f8c4 	bl	30194 <bsd_os_errno_set>
   3400c:	f04f 30ff 	mov.w	r0, #4294967295
   34010:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   34014:	6903      	ldr	r3, [r0, #16]
   34016:	2b01      	cmp	r3, #1
   34018:	d00b      	beq.n	34032 <tls_interface_sendto+0x6a>
   3401a:	2b02      	cmp	r3, #2
   3401c:	d001      	beq.n	34022 <tls_interface_sendto+0x5a>
   3401e:	2039      	movs	r0, #57	; 0x39
   34020:	e7f2      	b.n	34008 <tls_interface_sendto+0x40>
   34022:	6803      	ldr	r3, [r0, #0]
   34024:	b29b      	uxth	r3, r3
   34026:	2b02      	cmp	r3, #2
   34028:	d007      	beq.n	3403a <tls_interface_sendto+0x72>
   3402a:	6803      	ldr	r3, [r0, #0]
   3402c:	b29b      	uxth	r3, r3
   3402e:	2b04      	cmp	r3, #4
   34030:	d003      	beq.n	3403a <tls_interface_sendto+0x72>
   34032:	6803      	ldr	r3, [r0, #0]
   34034:	b29b      	uxth	r3, r3
   34036:	2b05      	cmp	r3, #5
   34038:	d1f1      	bne.n	3401e <tls_interface_sendto+0x56>
   3403a:	4b0e      	ldr	r3, [pc, #56]	; (34074 <tls_interface_sendto+0xac>)
   3403c:	eb04 02c4 	add.w	r2, r4, r4, lsl #3
   34040:	f813 3022 	ldrb.w	r3, [r3, r2, lsl #2]
   34044:	2b02      	cmp	r3, #2
   34046:	d1ea      	bne.n	3401e <tls_interface_sendto+0x56>
   34048:	4601      	mov	r1, r0
   3404a:	4620      	mov	r0, r4
   3404c:	f7ff fec4 	bl	33dd8 <secure_client_socket>
   34050:	2800      	cmp	r0, #0
   34052:	d003      	beq.n	3405c <tls_interface_sendto+0x94>
   34054:	dcd8      	bgt.n	34008 <tls_interface_sendto+0x40>
   34056:	e7d9      	b.n	3400c <tls_interface_sendto+0x44>
   34058:	2009      	movs	r0, #9
   3405a:	e7d5      	b.n	34008 <tls_interface_sendto+0x40>
   3405c:	e9cd 8908 	strd	r8, r9, [sp, #32]
   34060:	463b      	mov	r3, r7
   34062:	4632      	mov	r2, r6
   34064:	4629      	mov	r1, r5
   34066:	4620      	mov	r0, r4
   34068:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   3406c:	f003 bc22 	b.w	378b4 <ip_interface_sendto>
   34070:	2023      	movs	r0, #35	; 0x23
   34072:	e7c9      	b.n	34008 <tls_interface_sendto+0x40>
   34074:	20024ff4 	.word	0x20024ff4

00034078 <tls_interface_recvfrom>:
   34078:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   3407c:	460d      	mov	r5, r1
   3407e:	e9dd 8908 	ldrd	r8, r9, [sp, #32]
   34082:	4616      	mov	r6, r2
   34084:	461f      	mov	r7, r3
   34086:	4604      	mov	r4, r0
   34088:	f004 ff52 	bl	38f30 <interface_socket_from_handle_get>
   3408c:	2800      	cmp	r0, #0
   3408e:	d038      	beq.n	34102 <tls_interface_recvfrom+0x8a>
   34090:	6803      	ldr	r3, [r0, #0]
   34092:	b29b      	uxth	r3, r3
   34094:	2b0c      	cmp	r3, #12
   34096:	d00f      	beq.n	340b8 <tls_interface_recvfrom+0x40>
   34098:	6803      	ldr	r3, [r0, #0]
   3409a:	b29b      	uxth	r3, r3
   3409c:	2b0d      	cmp	r3, #13
   3409e:	d00b      	beq.n	340b8 <tls_interface_recvfrom+0x40>
   340a0:	6903      	ldr	r3, [r0, #16]
   340a2:	2b01      	cmp	r3, #1
   340a4:	d01a      	beq.n	340dc <tls_interface_recvfrom+0x64>
   340a6:	2b02      	cmp	r3, #2
   340a8:	d010      	beq.n	340cc <tls_interface_recvfrom+0x54>
   340aa:	2023      	movs	r0, #35	; 0x23
   340ac:	f7fc f872 	bl	30194 <bsd_os_errno_set>
   340b0:	f04f 30ff 	mov.w	r0, #4294967295
   340b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   340b8:	e9cd 8908 	strd	r8, r9, [sp, #32]
   340bc:	463b      	mov	r3, r7
   340be:	4632      	mov	r2, r6
   340c0:	4629      	mov	r1, r5
   340c2:	4620      	mov	r0, r4
   340c4:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   340c8:	f003 bd6c 	b.w	37ba4 <ip_interface_recvfrom>
   340cc:	6803      	ldr	r3, [r0, #0]
   340ce:	b29b      	uxth	r3, r3
   340d0:	2b02      	cmp	r3, #2
   340d2:	d007      	beq.n	340e4 <tls_interface_recvfrom+0x6c>
   340d4:	6803      	ldr	r3, [r0, #0]
   340d6:	b29b      	uxth	r3, r3
   340d8:	2b04      	cmp	r3, #4
   340da:	d003      	beq.n	340e4 <tls_interface_recvfrom+0x6c>
   340dc:	6803      	ldr	r3, [r0, #0]
   340de:	b29b      	uxth	r3, r3
   340e0:	2b05      	cmp	r3, #5
   340e2:	d1e2      	bne.n	340aa <tls_interface_recvfrom+0x32>
   340e4:	4b08      	ldr	r3, [pc, #32]	; (34108 <tls_interface_recvfrom+0x90>)
   340e6:	eb04 02c4 	add.w	r2, r4, r4, lsl #3
   340ea:	f813 3022 	ldrb.w	r3, [r3, r2, lsl #2]
   340ee:	2b02      	cmp	r3, #2
   340f0:	d1db      	bne.n	340aa <tls_interface_recvfrom+0x32>
   340f2:	4601      	mov	r1, r0
   340f4:	4620      	mov	r0, r4
   340f6:	f7ff fe6f 	bl	33dd8 <secure_client_socket>
   340fa:	2800      	cmp	r0, #0
   340fc:	d0dc      	beq.n	340b8 <tls_interface_recvfrom+0x40>
   340fe:	dcd5      	bgt.n	340ac <tls_interface_recvfrom+0x34>
   34100:	e7d6      	b.n	340b0 <tls_interface_recvfrom+0x38>
   34102:	2009      	movs	r0, #9
   34104:	e7d2      	b.n	340ac <tls_interface_recvfrom+0x34>
   34106:	bf00      	nop
   34108:	20024ff4 	.word	0x20024ff4

0003410c <tls_interface_bind>:
   3410c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   34110:	460c      	mov	r4, r1
   34112:	4617      	mov	r7, r2
   34114:	4606      	mov	r6, r0
   34116:	f004 ff0b 	bl	38f30 <interface_socket_from_handle_get>
   3411a:	2800      	cmp	r0, #0
   3411c:	d06d      	beq.n	341fa <tls_interface_bind+0xee>
   3411e:	6803      	ldr	r3, [r0, #0]
   34120:	4605      	mov	r5, r0
   34122:	b29b      	uxth	r3, r3
   34124:	2b02      	cmp	r3, #2
   34126:	d15a      	bne.n	341de <tls_interface_bind+0xd2>
   34128:	4621      	mov	r1, r4
   3412a:	463a      	mov	r2, r7
   3412c:	4630      	mov	r0, r6
   3412e:	f003 ff27 	bl	37f80 <ip_interface_bind>
   34132:	4604      	mov	r4, r0
   34134:	2800      	cmp	r0, #0
   34136:	d148      	bne.n	341ca <tls_interface_bind+0xbe>
   34138:	00f7      	lsls	r7, r6, #3
   3413a:	f8df 80c4 	ldr.w	r8, [pc, #196]	; 34200 <tls_interface_bind+0xf4>
   3413e:	19bb      	adds	r3, r7, r6
   34140:	f818 3023 	ldrb.w	r3, [r8, r3, lsl #2]
   34144:	2b01      	cmp	r3, #1
   34146:	d002      	beq.n	3414e <tls_interface_bind+0x42>
   34148:	4620      	mov	r0, r4
   3414a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3414e:	f8df b0b4 	ldr.w	fp, [pc, #180]	; 34204 <tls_interface_bind+0xf8>
   34152:	f247 0281 	movw	r2, #28801	; 0x7081
   34156:	eb0b 0a07 	add.w	sl, fp, r7
   3415a:	f8da 3004 	ldr.w	r3, [sl, #4]
   3415e:	69a9      	ldr	r1, [r5, #24]
   34160:	4630      	mov	r0, r6
   34162:	f003 fa25 	bl	375b0 <ip_interface_request_create>
   34166:	4681      	mov	r9, r0
   34168:	2800      	cmp	r0, #0
   3416a:	d044      	beq.n	341f6 <tls_interface_bind+0xea>
   3416c:	f8da 2004 	ldr.w	r2, [sl, #4]
   34170:	2a00      	cmp	r2, #0
   34172:	d13a      	bne.n	341ea <tls_interface_bind+0xde>
   34174:	19b9      	adds	r1, r7, r6
   34176:	eb08 0181 	add.w	r1, r8, r1, lsl #2
   3417a:	2224      	movs	r2, #36	; 0x24
   3417c:	f109 0014 	add.w	r0, r9, #20
   34180:	f010 fe66 	bl	44e50 <memcpy>
   34184:	f8d9 3008 	ldr.w	r3, [r9, #8]
   34188:	4649      	mov	r1, r9
   3418a:	3324      	adds	r3, #36	; 0x24
   3418c:	f8c9 3008 	str.w	r3, [r9, #8]
   34190:	682a      	ldr	r2, [r5, #0]
   34192:	2304      	movs	r3, #4
   34194:	0c12      	lsrs	r2, r2, #16
   34196:	0412      	lsls	r2, r2, #16
   34198:	f042 020a 	orr.w	r2, r2, #10
   3419c:	602a      	str	r2, [r5, #0]
   3419e:	4628      	mov	r0, r5
   341a0:	f247 0281 	movw	r2, #28801	; 0x7081
   341a4:	f003 fa24 	bl	375f0 <ip_interface_request_send>
   341a8:	b9e8      	cbnz	r0, 341e6 <tls_interface_bind+0xda>
   341aa:	682b      	ldr	r3, [r5, #0]
   341ac:	00db      	lsls	r3, r3, #3
   341ae:	d418      	bmi.n	341e2 <tls_interface_bind+0xd6>
   341b0:	4630      	mov	r0, r6
   341b2:	f04f 33ff 	mov.w	r3, #4294967295
   341b6:	f64f 72ff 	movw	r2, #65535	; 0xffff
   341ba:	210b      	movs	r1, #11
   341bc:	f003 fa2c 	bl	37618 <ip_interface_wait>
   341c0:	2800      	cmp	r0, #0
   341c2:	d0c1      	beq.n	34148 <tls_interface_bind+0x3c>
   341c4:	2304      	movs	r3, #4
   341c6:	4604      	mov	r4, r0
   341c8:	602b      	str	r3, [r5, #0]
   341ca:	2c00      	cmp	r4, #0
   341cc:	ddbc      	ble.n	34148 <tls_interface_bind+0x3c>
   341ce:	4620      	mov	r0, r4
   341d0:	f04f 34ff 	mov.w	r4, #4294967295
   341d4:	f7fb ffde 	bl	30194 <bsd_os_errno_set>
   341d8:	4620      	mov	r0, r4
   341da:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   341de:	242d      	movs	r4, #45	; 0x2d
   341e0:	e7f5      	b.n	341ce <tls_interface_bind+0xc2>
   341e2:	2473      	movs	r4, #115	; 0x73
   341e4:	e7f3      	b.n	341ce <tls_interface_bind+0xc2>
   341e6:	4604      	mov	r4, r0
   341e8:	e7ef      	b.n	341ca <tls_interface_bind+0xbe>
   341ea:	f85b 1036 	ldr.w	r1, [fp, r6, lsl #3]
   341ee:	6800      	ldr	r0, [r0, #0]
   341f0:	f010 fe2e 	bl	44e50 <memcpy>
   341f4:	e7be      	b.n	34174 <tls_interface_bind+0x68>
   341f6:	240c      	movs	r4, #12
   341f8:	e7e9      	b.n	341ce <tls_interface_bind+0xc2>
   341fa:	2409      	movs	r4, #9
   341fc:	e7e7      	b.n	341ce <tls_interface_bind+0xc2>
   341fe:	bf00      	nop
   34200:	20024ff4 	.word	0x20024ff4
   34204:	20025138 	.word	0x20025138

00034208 <tls_interface_connect>:
   34208:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   3420a:	460e      	mov	r6, r1
   3420c:	4617      	mov	r7, r2
   3420e:	4604      	mov	r4, r0
   34210:	f004 fe8e 	bl	38f30 <interface_socket_from_handle_get>
   34214:	b1e8      	cbz	r0, 34252 <tls_interface_connect+0x4a>
   34216:	4b13      	ldr	r3, [pc, #76]	; (34264 <tls_interface_connect+0x5c>)
   34218:	eb04 02c4 	add.w	r2, r4, r4, lsl #3
   3421c:	f813 3022 	ldrb.w	r3, [r3, r2, lsl #2]
   34220:	2b02      	cmp	r3, #2
   34222:	d11c      	bne.n	3425e <tls_interface_connect+0x56>
   34224:	6803      	ldr	r3, [r0, #0]
   34226:	4605      	mov	r5, r0
   34228:	b29b      	uxth	r3, r3
   3422a:	2b02      	cmp	r3, #2
   3422c:	d003      	beq.n	34236 <tls_interface_connect+0x2e>
   3422e:	6803      	ldr	r3, [r0, #0]
   34230:	b29b      	uxth	r3, r3
   34232:	2b04      	cmp	r3, #4
   34234:	d113      	bne.n	3425e <tls_interface_connect+0x56>
   34236:	463a      	mov	r2, r7
   34238:	4631      	mov	r1, r6
   3423a:	4620      	mov	r0, r4
   3423c:	f003 fde6 	bl	37e0c <ip_interface_connect>
   34240:	b110      	cbz	r0, 34248 <tls_interface_connect+0x40>
   34242:	2800      	cmp	r0, #0
   34244:	dc06      	bgt.n	34254 <tls_interface_connect+0x4c>
   34246:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   34248:	4629      	mov	r1, r5
   3424a:	4620      	mov	r0, r4
   3424c:	f7ff fdc4 	bl	33dd8 <secure_client_socket>
   34250:	e7f7      	b.n	34242 <tls_interface_connect+0x3a>
   34252:	2009      	movs	r0, #9
   34254:	f7fb ff9e 	bl	30194 <bsd_os_errno_set>
   34258:	f04f 30ff 	mov.w	r0, #4294967295
   3425c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   3425e:	202d      	movs	r0, #45	; 0x2d
   34260:	e7f8      	b.n	34254 <tls_interface_connect+0x4c>
   34262:	bf00      	nop
   34264:	20024ff4 	.word	0x20024ff4

00034268 <tls_interface_listen>:
   34268:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   3426c:	b083      	sub	sp, #12
   3426e:	9101      	str	r1, [sp, #4]
   34270:	4605      	mov	r5, r0
   34272:	f004 fe5d 	bl	38f30 <interface_socket_from_handle_get>
   34276:	2800      	cmp	r0, #0
   34278:	d079      	beq.n	3436e <tls_interface_listen+0x106>
   3427a:	6903      	ldr	r3, [r0, #16]
   3427c:	4604      	mov	r4, r0
   3427e:	2b01      	cmp	r3, #1
   34280:	d173      	bne.n	3436a <tls_interface_listen+0x102>
   34282:	6803      	ldr	r3, [r0, #0]
   34284:	b29b      	uxth	r3, r3
   34286:	2b04      	cmp	r3, #4
   34288:	d05f      	beq.n	3434a <tls_interface_listen+0xe2>
   3428a:	6823      	ldr	r3, [r4, #0]
   3428c:	b29b      	uxth	r3, r3
   3428e:	2b0b      	cmp	r3, #11
   34290:	d16b      	bne.n	3436a <tls_interface_listen+0x102>
   34292:	00ee      	lsls	r6, r5, #3
   34294:	4f37      	ldr	r7, [pc, #220]	; (34374 <tls_interface_listen+0x10c>)
   34296:	1973      	adds	r3, r6, r5
   34298:	f817 3023 	ldrb.w	r3, [r7, r3, lsl #2]
   3429c:	2b01      	cmp	r3, #1
   3429e:	d164      	bne.n	3436a <tls_interface_listen+0x102>
   342a0:	2201      	movs	r2, #1
   342a2:	f8df 90d4 	ldr.w	r9, [pc, #212]	; 34378 <tls_interface_listen+0x110>
   342a6:	1973      	adds	r3, r6, r5
   342a8:	00ee      	lsls	r6, r5, #3
   342aa:	f807 2023 	strb.w	r2, [r7, r3, lsl #2]
   342ae:	eb09 0806 	add.w	r8, r9, r6
   342b2:	69a1      	ldr	r1, [r4, #24]
   342b4:	f8d8 3004 	ldr.w	r3, [r8, #4]
   342b8:	f247 0281 	movw	r2, #28801	; 0x7081
   342bc:	4628      	mov	r0, r5
   342be:	f8d4 a000 	ldr.w	sl, [r4]
   342c2:	f003 f975 	bl	375b0 <ip_interface_request_create>
   342c6:	4683      	mov	fp, r0
   342c8:	2800      	cmp	r0, #0
   342ca:	d04c      	beq.n	34366 <tls_interface_listen+0xfe>
   342cc:	f8d8 2004 	ldr.w	r2, [r8, #4]
   342d0:	2a00      	cmp	r2, #0
   342d2:	d142      	bne.n	3435a <tls_interface_listen+0xf2>
   342d4:	1971      	adds	r1, r6, r5
   342d6:	eb07 0181 	add.w	r1, r7, r1, lsl #2
   342da:	2224      	movs	r2, #36	; 0x24
   342dc:	f10b 0014 	add.w	r0, fp, #20
   342e0:	f010 fdb6 	bl	44e50 <memcpy>
   342e4:	f8db 2008 	ldr.w	r2, [fp, #8]
   342e8:	4659      	mov	r1, fp
   342ea:	3224      	adds	r2, #36	; 0x24
   342ec:	f8cb 2008 	str.w	r2, [fp, #8]
   342f0:	6822      	ldr	r2, [r4, #0]
   342f2:	4653      	mov	r3, sl
   342f4:	0c12      	lsrs	r2, r2, #16
   342f6:	0412      	lsls	r2, r2, #16
   342f8:	f042 020a 	orr.w	r2, r2, #10
   342fc:	6022      	str	r2, [r4, #0]
   342fe:	4620      	mov	r0, r4
   34300:	f247 0281 	movw	r2, #28801	; 0x7081
   34304:	f003 f974 	bl	375f0 <ip_interface_request_send>
   34308:	b968      	cbnz	r0, 34326 <tls_interface_listen+0xbe>
   3430a:	6823      	ldr	r3, [r4, #0]
   3430c:	00db      	lsls	r3, r3, #3
   3430e:	d40f      	bmi.n	34330 <tls_interface_listen+0xc8>
   34310:	f04f 33ff 	mov.w	r3, #4294967295
   34314:	f64f 72ff 	movw	r2, #65535	; 0xffff
   34318:	210b      	movs	r1, #11
   3431a:	4628      	mov	r0, r5
   3431c:	f003 f97c 	bl	37618 <ip_interface_wait>
   34320:	b170      	cbz	r0, 34340 <tls_interface_listen+0xd8>
   34322:	f8c4 a000 	str.w	sl, [r4]
   34326:	2800      	cmp	r0, #0
   34328:	dc03      	bgt.n	34332 <tls_interface_listen+0xca>
   3432a:	b003      	add	sp, #12
   3432c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   34330:	2073      	movs	r0, #115	; 0x73
   34332:	f7fb ff2f 	bl	30194 <bsd_os_errno_set>
   34336:	f04f 30ff 	mov.w	r0, #4294967295
   3433a:	b003      	add	sp, #12
   3433c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   34340:	9901      	ldr	r1, [sp, #4]
   34342:	4628      	mov	r0, r5
   34344:	f003 febc 	bl	380c0 <ip_interface_listen>
   34348:	e7ed      	b.n	34326 <tls_interface_listen+0xbe>
   3434a:	00ee      	lsls	r6, r5, #3
   3434c:	4f09      	ldr	r7, [pc, #36]	; (34374 <tls_interface_listen+0x10c>)
   3434e:	1973      	adds	r3, r6, r5
   34350:	f817 3023 	ldrb.w	r3, [r7, r3, lsl #2]
   34354:	2b02      	cmp	r3, #2
   34356:	d198      	bne.n	3428a <tls_interface_listen+0x22>
   34358:	e7a2      	b.n	342a0 <tls_interface_listen+0x38>
   3435a:	f859 1035 	ldr.w	r1, [r9, r5, lsl #3]
   3435e:	6800      	ldr	r0, [r0, #0]
   34360:	f010 fd76 	bl	44e50 <memcpy>
   34364:	e7b6      	b.n	342d4 <tls_interface_listen+0x6c>
   34366:	200c      	movs	r0, #12
   34368:	e7e3      	b.n	34332 <tls_interface_listen+0xca>
   3436a:	202d      	movs	r0, #45	; 0x2d
   3436c:	e7e1      	b.n	34332 <tls_interface_listen+0xca>
   3436e:	2009      	movs	r0, #9
   34370:	e7df      	b.n	34332 <tls_interface_listen+0xca>
   34372:	bf00      	nop
   34374:	20024ff4 	.word	0x20024ff4
   34378:	20025138 	.word	0x20025138

0003437c <tls_interface_accept>:
   3437c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   3437e:	460c      	mov	r4, r1
   34380:	4616      	mov	r6, r2
   34382:	461f      	mov	r7, r3
   34384:	4605      	mov	r5, r0
   34386:	f004 fdd3 	bl	38f30 <interface_socket_from_handle_get>
   3438a:	2800      	cmp	r0, #0
   3438c:	d03b      	beq.n	34406 <tls_interface_accept+0x8a>
   3438e:	6800      	ldr	r0, [r0, #0]
   34390:	b280      	uxth	r0, r0
   34392:	2806      	cmp	r0, #6
   34394:	d137      	bne.n	34406 <tls_interface_accept+0x8a>
   34396:	4621      	mov	r1, r4
   34398:	463b      	mov	r3, r7
   3439a:	4632      	mov	r2, r6
   3439c:	4628      	mov	r0, r5
   3439e:	f003 ff05 	bl	381ac <ip_interface_accept>
   343a2:	4604      	mov	r4, r0
   343a4:	b118      	cbz	r0, 343ae <tls_interface_accept+0x32>
   343a6:	2c00      	cmp	r4, #0
   343a8:	dc2e      	bgt.n	34408 <tls_interface_accept+0x8c>
   343aa:	4620      	mov	r0, r4
   343ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   343ae:	4628      	mov	r0, r5
   343b0:	f004 fdbe 	bl	38f30 <interface_socket_from_handle_get>
   343b4:	6803      	ldr	r3, [r0, #0]
   343b6:	4f18      	ldr	r7, [pc, #96]	; (34418 <tls_interface_accept+0x9c>)
   343b8:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
   343bc:	6003      	str	r3, [r0, #0]
   343be:	6803      	ldr	r3, [r0, #0]
   343c0:	eb05 05c5 	add.w	r5, r5, r5, lsl #3
   343c4:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
   343c8:	4606      	mov	r6, r0
   343ca:	6003      	str	r3, [r0, #0]
   343cc:	eb07 0185 	add.w	r1, r7, r5, lsl #2
   343d0:	2224      	movs	r2, #36	; 0x24
   343d2:	4638      	mov	r0, r7
   343d4:	f010 fd3c 	bl	44e50 <memcpy>
   343d8:	2302      	movs	r3, #2
   343da:	703b      	strb	r3, [r7, #0]
   343dc:	6833      	ldr	r3, [r6, #0]
   343de:	4620      	mov	r0, r4
   343e0:	0c1b      	lsrs	r3, r3, #16
   343e2:	041b      	lsls	r3, r3, #16
   343e4:	f043 030b 	orr.w	r3, r3, #11
   343e8:	6033      	str	r3, [r6, #0]
   343ea:	f64f 72ff 	movw	r2, #65535	; 0xffff
   343ee:	f04f 33ff 	mov.w	r3, #4294967295
   343f2:	210c      	movs	r1, #12
   343f4:	f003 f910 	bl	37618 <ip_interface_wait>
   343f8:	4604      	mov	r4, r0
   343fa:	2800      	cmp	r0, #0
   343fc:	d0d5      	beq.n	343aa <tls_interface_accept+0x2e>
   343fe:	2000      	movs	r0, #0
   34400:	f003 f9e8 	bl	377d4 <ip_interface_close>
   34404:	e7cf      	b.n	343a6 <tls_interface_accept+0x2a>
   34406:	2409      	movs	r4, #9
   34408:	4620      	mov	r0, r4
   3440a:	f04f 34ff 	mov.w	r4, #4294967295
   3440e:	f7fb fec1 	bl	30194 <bsd_os_errno_set>
   34412:	4620      	mov	r0, r4
   34414:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   34416:	bf00      	nop
   34418:	20024ff4 	.word	0x20024ff4

0003441c <tls_interface_setopt>:
   3441c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   34420:	f5b1 7f8d 	cmp.w	r1, #282	; 0x11a
   34424:	9e06      	ldr	r6, [sp, #24]
   34426:	d11e      	bne.n	34466 <tls_interface_setopt+0x4a>
   34428:	461f      	mov	r7, r3
   3442a:	4605      	mov	r5, r0
   3442c:	2b00      	cmp	r3, #0
   3442e:	f000 808c 	beq.w	3454a <tls_interface_setopt+0x12e>
   34432:	4690      	mov	r8, r2
   34434:	f004 fd7c 	bl	38f30 <interface_socket_from_handle_get>
   34438:	2800      	cmp	r0, #0
   3443a:	d07b      	beq.n	34534 <tls_interface_setopt+0x118>
   3443c:	6804      	ldr	r4, [r0, #0]
   3443e:	b2a4      	uxth	r4, r4
   34440:	2c02      	cmp	r4, #2
   34442:	d007      	beq.n	34454 <tls_interface_setopt+0x38>
   34444:	6803      	ldr	r3, [r0, #0]
   34446:	b29b      	uxth	r3, r3
   34448:	2b04      	cmp	r3, #4
   3444a:	d003      	beq.n	34454 <tls_interface_setopt+0x38>
   3444c:	6803      	ldr	r3, [r0, #0]
   3444e:	b29b      	uxth	r3, r3
   34450:	2b05      	cmp	r3, #5
   34452:	d16f      	bne.n	34534 <tls_interface_setopt+0x118>
   34454:	f108 32ff 	add.w	r2, r8, #4294967295
   34458:	2a04      	cmp	r2, #4
   3445a:	d87c      	bhi.n	34556 <tls_interface_setopt+0x13a>
   3445c:	e8df f002 	tbb	[pc, r2]
   34460:	41324e24 	.word	0x41324e24
   34464:	07          	.byte	0x07
   34465:	00          	.byte	0x00
   34466:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   3446a:	f003 bfd7 	b.w	3841c <ip_interface_setopt>
   3446e:	4c3b      	ldr	r4, [pc, #236]	; (3455c <tls_interface_setopt+0x140>)
   34470:	f854 0035 	ldr.w	r0, [r4, r5, lsl #3]
   34474:	b138      	cbz	r0, 34486 <tls_interface_setopt+0x6a>
   34476:	f7ff fc47 	bl	33d08 <nrf_free>
   3447a:	2200      	movs	r2, #0
   3447c:	eb04 03c5 	add.w	r3, r4, r5, lsl #3
   34480:	f844 2035 	str.w	r2, [r4, r5, lsl #3]
   34484:	605a      	str	r2, [r3, #4]
   34486:	4630      	mov	r0, r6
   34488:	b34e      	cbz	r6, 344de <tls_interface_setopt+0xc2>
   3448a:	f7ff fc33 	bl	33cf4 <nrf_malloc>
   3448e:	f844 0035 	str.w	r0, [r4, r5, lsl #3]
   34492:	2800      	cmp	r0, #0
   34494:	d057      	beq.n	34546 <tls_interface_setopt+0x12a>
   34496:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
   3449a:	4632      	mov	r2, r6
   3449c:	4639      	mov	r1, r7
   3449e:	6066      	str	r6, [r4, #4]
   344a0:	f010 fcd6 	bl	44e50 <memcpy>
   344a4:	2000      	movs	r0, #0
   344a6:	e01a      	b.n	344de <tls_interface_setopt+0xc2>
   344a8:	2e04      	cmp	r6, #4
   344aa:	d14a      	bne.n	34542 <tls_interface_setopt+0x126>
   344ac:	6838      	ldr	r0, [r7, #0]
   344ae:	2800      	cmp	r0, #0
   344b0:	d039      	beq.n	34526 <tls_interface_setopt+0x10a>
   344b2:	2801      	cmp	r0, #1
   344b4:	d145      	bne.n	34542 <tls_interface_setopt+0x126>
   344b6:	4a2a      	ldr	r2, [pc, #168]	; (34560 <tls_interface_setopt+0x144>)
   344b8:	eb05 04c5 	add.w	r4, r5, r5, lsl #3
   344bc:	f802 0024 	strb.w	r0, [r2, r4, lsl #2]
   344c0:	2000      	movs	r0, #0
   344c2:	e00c      	b.n	344de <tls_interface_setopt+0xc2>
   344c4:	2e01      	cmp	r6, #1
   344c6:	d13c      	bne.n	34542 <tls_interface_setopt+0x126>
   344c8:	783a      	ldrb	r2, [r7, #0]
   344ca:	2000      	movs	r0, #0
   344cc:	3200      	adds	r2, #0
   344ce:	bf18      	it	ne
   344d0:	2201      	movne	r2, #1
   344d2:	4b23      	ldr	r3, [pc, #140]	; (34560 <tls_interface_setopt+0x144>)
   344d4:	eb05 04c5 	add.w	r4, r5, r5, lsl #3
   344d8:	eb03 0484 	add.w	r4, r3, r4, lsl #2
   344dc:	7062      	strb	r2, [r4, #1]
   344de:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   344e2:	2e04      	cmp	r6, #4
   344e4:	d12d      	bne.n	34542 <tls_interface_setopt+0x126>
   344e6:	683a      	ldr	r2, [r7, #0]
   344e8:	2a02      	cmp	r2, #2
   344ea:	d82a      	bhi.n	34542 <tls_interface_setopt+0x126>
   344ec:	4b1c      	ldr	r3, [pc, #112]	; (34560 <tls_interface_setopt+0x144>)
   344ee:	eb05 04c5 	add.w	r4, r5, r5, lsl #3
   344f2:	eb03 0484 	add.w	r4, r3, r4, lsl #2
   344f6:	70a2      	strb	r2, [r4, #2]
   344f8:	2000      	movs	r0, #0
   344fa:	e7f0      	b.n	344de <tls_interface_setopt+0xc2>
   344fc:	ea5f 0c96 	movs.w	ip, r6, lsr #2
   34500:	d01f      	beq.n	34542 <tls_interface_setopt+0x126>
   34502:	f016 0403 	ands.w	r4, r6, #3
   34506:	d11c      	bne.n	34542 <tls_interface_setopt+0x126>
   34508:	eb05 05c5 	add.w	r5, r5, r5, lsl #3
   3450c:	00ad      	lsls	r5, r5, #2
   3450e:	4b14      	ldr	r3, [pc, #80]	; (34560 <tls_interface_setopt+0x144>)
   34510:	1d28      	adds	r0, r5, #4
   34512:	4418      	add	r0, r3
   34514:	442b      	add	r3, r5
   34516:	4632      	mov	r2, r6
   34518:	4639      	mov	r1, r7
   3451a:	f883 c003 	strb.w	ip, [r3, #3]
   3451e:	f010 fc97 	bl	44e50 <memcpy>
   34522:	4620      	mov	r0, r4
   34524:	e7db      	b.n	344de <tls_interface_setopt+0xc2>
   34526:	2102      	movs	r1, #2
   34528:	4a0d      	ldr	r2, [pc, #52]	; (34560 <tls_interface_setopt+0x144>)
   3452a:	eb05 04c5 	add.w	r4, r5, r5, lsl #3
   3452e:	f802 1024 	strb.w	r1, [r2, r4, lsl #2]
   34532:	e7d4      	b.n	344de <tls_interface_setopt+0xc2>
   34534:	2009      	movs	r0, #9
   34536:	f7fb fe2d 	bl	30194 <bsd_os_errno_set>
   3453a:	f04f 30ff 	mov.w	r0, #4294967295
   3453e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   34542:	2016      	movs	r0, #22
   34544:	e7f7      	b.n	34536 <tls_interface_setopt+0x11a>
   34546:	200c      	movs	r0, #12
   34548:	e7f5      	b.n	34536 <tls_interface_setopt+0x11a>
   3454a:	200e      	movs	r0, #14
   3454c:	f7fb fe22 	bl	30194 <bsd_os_errno_set>
   34550:	f04f 30ff 	mov.w	r0, #4294967295
   34554:	e7c3      	b.n	344de <tls_interface_setopt+0xc2>
   34556:	202a      	movs	r0, #42	; 0x2a
   34558:	e7ed      	b.n	34536 <tls_interface_setopt+0x11a>
   3455a:	bf00      	nop
   3455c:	20025138 	.word	0x20025138
   34560:	20024ff4 	.word	0x20024ff4

00034564 <tls_interface_getopt>:
   34564:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   34568:	f5b1 7f8d 	cmp.w	r1, #282	; 0x11a
   3456c:	9f06      	ldr	r7, [sp, #24]
   3456e:	d112      	bne.n	34596 <tls_interface_getopt+0x32>
   34570:	461d      	mov	r5, r3
   34572:	b16b      	cbz	r3, 34590 <tls_interface_getopt+0x2c>
   34574:	b167      	cbz	r7, 34590 <tls_interface_getopt+0x2c>
   34576:	4606      	mov	r6, r0
   34578:	4614      	mov	r4, r2
   3457a:	f004 fcd9 	bl	38f30 <interface_socket_from_handle_get>
   3457e:	2800      	cmp	r0, #0
   34580:	d04f      	beq.n	34622 <tls_interface_getopt+0xbe>
   34582:	3c01      	subs	r4, #1
   34584:	2c03      	cmp	r4, #3
   34586:	d852      	bhi.n	3462e <tls_interface_getopt+0xca>
   34588:	e8df f004 	tbb	[pc, r4]
   3458c:	09152139 	.word	0x09152139
   34590:	200e      	movs	r0, #14
   34592:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   34596:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   3459a:	f003 bffb 	b.w	38594 <ip_interface_getopt>
   3459e:	683b      	ldr	r3, [r7, #0]
   345a0:	2b04      	cmp	r3, #4
   345a2:	d13c      	bne.n	3461e <tls_interface_getopt+0xba>
   345a4:	4b23      	ldr	r3, [pc, #140]	; (34634 <tls_interface_getopt+0xd0>)
   345a6:	eb06 06c6 	add.w	r6, r6, r6, lsl #3
   345aa:	eb03 0686 	add.w	r6, r3, r6, lsl #2
   345ae:	78b3      	ldrb	r3, [r6, #2]
   345b0:	2000      	movs	r0, #0
   345b2:	602b      	str	r3, [r5, #0]
   345b4:	e7ed      	b.n	34592 <tls_interface_getopt+0x2e>
   345b6:	683b      	ldr	r3, [r7, #0]
   345b8:	2b01      	cmp	r3, #1
   345ba:	d130      	bne.n	3461e <tls_interface_getopt+0xba>
   345bc:	4b1d      	ldr	r3, [pc, #116]	; (34634 <tls_interface_getopt+0xd0>)
   345be:	eb06 06c6 	add.w	r6, r6, r6, lsl #3
   345c2:	eb03 0686 	add.w	r6, r3, r6, lsl #2
   345c6:	7873      	ldrb	r3, [r6, #1]
   345c8:	2000      	movs	r0, #0
   345ca:	702b      	strb	r3, [r5, #0]
   345cc:	e7e1      	b.n	34592 <tls_interface_getopt+0x2e>
   345ce:	eb06 06c6 	add.w	r6, r6, r6, lsl #3
   345d2:	4918      	ldr	r1, [pc, #96]	; (34634 <tls_interface_getopt+0xd0>)
   345d4:	683b      	ldr	r3, [r7, #0]
   345d6:	00b6      	lsls	r6, r6, #2
   345d8:	198a      	adds	r2, r1, r6
   345da:	f013 0403 	ands.w	r4, r3, #3
   345de:	78d0      	ldrb	r0, [r2, #3]
   345e0:	d121      	bne.n	34626 <tls_interface_getopt+0xc2>
   345e2:	089b      	lsrs	r3, r3, #2
   345e4:	4283      	cmp	r3, r0
   345e6:	bf28      	it	cs
   345e8:	4603      	movcs	r3, r0
   345ea:	009a      	lsls	r2, r3, #2
   345ec:	b1db      	cbz	r3, 34626 <tls_interface_getopt+0xc2>
   345ee:	3604      	adds	r6, #4
   345f0:	4431      	add	r1, r6
   345f2:	603a      	str	r2, [r7, #0]
   345f4:	4628      	mov	r0, r5
   345f6:	f010 fc2b 	bl	44e50 <memcpy>
   345fa:	4620      	mov	r0, r4
   345fc:	e7c9      	b.n	34592 <tls_interface_getopt+0x2e>
   345fe:	683b      	ldr	r3, [r7, #0]
   34600:	2b04      	cmp	r3, #4
   34602:	d10c      	bne.n	3461e <tls_interface_getopt+0xba>
   34604:	4b0b      	ldr	r3, [pc, #44]	; (34634 <tls_interface_getopt+0xd0>)
   34606:	eb06 06c6 	add.w	r6, r6, r6, lsl #3
   3460a:	f813 3026 	ldrb.w	r3, [r3, r6, lsl #2]
   3460e:	2000      	movs	r0, #0
   34610:	f1a3 0301 	sub.w	r3, r3, #1
   34614:	fab3 f383 	clz	r3, r3
   34618:	095b      	lsrs	r3, r3, #5
   3461a:	602b      	str	r3, [r5, #0]
   3461c:	e7b9      	b.n	34592 <tls_interface_getopt+0x2e>
   3461e:	2016      	movs	r0, #22
   34620:	e7b7      	b.n	34592 <tls_interface_getopt+0x2e>
   34622:	2009      	movs	r0, #9
   34624:	e7b5      	b.n	34592 <tls_interface_getopt+0x2e>
   34626:	2800      	cmp	r0, #0
   34628:	d1f9      	bne.n	3461e <tls_interface_getopt+0xba>
   3462a:	6038      	str	r0, [r7, #0]
   3462c:	e7b1      	b.n	34592 <tls_interface_getopt+0x2e>
   3462e:	202a      	movs	r0, #42	; 0x2a
   34630:	e7af      	b.n	34592 <tls_interface_getopt+0x2e>
   34632:	bf00      	nop
   34634:	20024ff4 	.word	0x20024ff4

00034638 <tls_rpc_ip_event_handler>:
   34638:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   3463a:	f248 0581 	movw	r5, #32897	; 0x8081
   3463e:	42ab      	cmp	r3, r5
   34640:	460c      	mov	r4, r1
   34642:	d062      	beq.n	3470a <tls_rpc_ip_event_handler+0xd2>
   34644:	f249 0182 	movw	r1, #36994	; 0x9082
   34648:	428b      	cmp	r3, r1
   3464a:	4606      	mov	r6, r0
   3464c:	d02e      	beq.n	346ac <tls_rpc_ip_event_handler+0x74>
   3464e:	f248 0102 	movw	r1, #32770	; 0x8002
   34652:	428b      	cmp	r3, r1
   34654:	d001      	beq.n	3465a <tls_rpc_ip_event_handler+0x22>
   34656:	2001      	movs	r0, #1
   34658:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   3465a:	2c00      	cmp	r4, #0
   3465c:	d0fb      	beq.n	34656 <tls_rpc_ip_event_handler+0x1e>
   3465e:	6963      	ldr	r3, [r4, #20]
   34660:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
   34664:	d002      	beq.n	3466c <tls_rpc_ip_event_handler+0x34>
   34666:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
   3466a:	d1f4      	bne.n	34656 <tls_rpc_ip_event_handler+0x1e>
   3466c:	6823      	ldr	r3, [r4, #0]
   3466e:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
   34672:	6023      	str	r3, [r4, #0]
   34674:	6955      	ldr	r5, [r2, #20]
   34676:	2d00      	cmp	r5, #0
   34678:	d156      	bne.n	34728 <tls_rpc_ip_event_handler+0xf0>
   3467a:	6823      	ldr	r3, [r4, #0]
   3467c:	0c1b      	lsrs	r3, r3, #16
   3467e:	041b      	lsls	r3, r3, #16
   34680:	f043 0305 	orr.w	r3, r3, #5
   34684:	6023      	str	r3, [r4, #0]
   34686:	6823      	ldr	r3, [r4, #0]
   34688:	00da      	lsls	r2, r3, #3
   3468a:	d50d      	bpl.n	346a8 <tls_rpc_ip_event_handler+0x70>
   3468c:	4b2b      	ldr	r3, [pc, #172]	; (3473c <tls_rpc_ip_event_handler+0x104>)
   3468e:	eb06 02c6 	add.w	r2, r6, r6, lsl #3
   34692:	f813 3022 	ldrb.w	r3, [r3, r2, lsl #2]
   34696:	2b02      	cmp	r3, #2
   34698:	d106      	bne.n	346a8 <tls_rpc_ip_event_handler+0x70>
   3469a:	4630      	mov	r0, r6
   3469c:	4621      	mov	r1, r4
   3469e:	f7ff fb9b 	bl	33dd8 <secure_client_socket>
   346a2:	b108      	cbz	r0, 346a8 <tls_rpc_ip_event_handler+0x70>
   346a4:	2873      	cmp	r0, #115	; 0x73
   346a6:	d142      	bne.n	3472e <tls_rpc_ip_event_handler+0xf6>
   346a8:	2000      	movs	r0, #0
   346aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   346ac:	2c00      	cmp	r4, #0
   346ae:	d0fb      	beq.n	346a8 <tls_rpc_ip_event_handler+0x70>
   346b0:	6823      	ldr	r3, [r4, #0]
   346b2:	b29b      	uxth	r3, r3
   346b4:	2b0b      	cmp	r3, #11
   346b6:	d1f7      	bne.n	346a8 <tls_rpc_ip_event_handler+0x70>
   346b8:	6915      	ldr	r5, [r2, #16]
   346ba:	2d00      	cmp	r5, #0
   346bc:	d134      	bne.n	34728 <tls_rpc_ip_event_handler+0xf0>
   346be:	6823      	ldr	r3, [r4, #0]
   346c0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
   346c4:	6023      	str	r3, [r4, #0]
   346c6:	6823      	ldr	r3, [r4, #0]
   346c8:	00db      	lsls	r3, r3, #3
   346ca:	d5ed      	bpl.n	346a8 <tls_rpc_ip_event_handler+0x70>
   346cc:	4f1c      	ldr	r7, [pc, #112]	; (34740 <tls_rpc_ip_event_handler+0x108>)
   346ce:	f857 0030 	ldr.w	r0, [r7, r0, lsl #3]
   346d2:	b130      	cbz	r0, 346e2 <tls_rpc_ip_event_handler+0xaa>
   346d4:	f7ff fb18 	bl	33d08 <nrf_free>
   346d8:	eb07 03c6 	add.w	r3, r7, r6, lsl #3
   346dc:	f847 5036 	str.w	r5, [r7, r6, lsl #3]
   346e0:	605d      	str	r5, [r3, #4]
   346e2:	6823      	ldr	r3, [r4, #0]
   346e4:	2000      	movs	r0, #0
   346e6:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
   346ea:	6023      	str	r3, [r4, #0]
   346ec:	6823      	ldr	r3, [r4, #0]
   346ee:	0c1b      	lsrs	r3, r3, #16
   346f0:	041b      	lsls	r3, r3, #16
   346f2:	f043 030c 	orr.w	r3, r3, #12
   346f6:	6023      	str	r3, [r4, #0]
   346f8:	6823      	ldr	r3, [r4, #0]
   346fa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   346fe:	6023      	str	r3, [r4, #0]
   34700:	6823      	ldr	r3, [r4, #0]
   34702:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   34706:	6023      	str	r3, [r4, #0]
   34708:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   3470a:	2900      	cmp	r1, #0
   3470c:	d0cc      	beq.n	346a8 <tls_rpc_ip_event_handler+0x70>
   3470e:	680b      	ldr	r3, [r1, #0]
   34710:	b29b      	uxth	r3, r3
   34712:	2b0a      	cmp	r3, #10
   34714:	d1c8      	bne.n	346a8 <tls_rpc_ip_event_handler+0x70>
   34716:	6950      	ldr	r0, [r2, #20]
   34718:	b938      	cbnz	r0, 3472a <tls_rpc_ip_event_handler+0xf2>
   3471a:	680b      	ldr	r3, [r1, #0]
   3471c:	0c1b      	lsrs	r3, r3, #16
   3471e:	041b      	lsls	r3, r3, #16
   34720:	f043 030b 	orr.w	r3, r3, #11
   34724:	600b      	str	r3, [r1, #0]
   34726:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   34728:	4628      	mov	r0, r5
   3472a:	f002 ff37 	bl	3759c <rpc_error_to_nrf_bsd_error>
   3472e:	6060      	str	r0, [r4, #4]
   34730:	6823      	ldr	r3, [r4, #0]
   34732:	2000      	movs	r0, #0
   34734:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
   34738:	6023      	str	r3, [r4, #0]
   3473a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   3473c:	20024ff4 	.word	0x20024ff4
   34740:	20025138 	.word	0x20025138

00034744 <rpc_dfu_event_handler>:
   34744:	b508      	push	{r3, lr}
   34746:	4a08      	ldr	r2, [pc, #32]	; (34768 <rpc_dfu_event_handler+0x24>)
   34748:	68c1      	ldr	r1, [r0, #12]
   3474a:	8812      	ldrh	r2, [r2, #0]
   3474c:	4603      	mov	r3, r0
   3474e:	ebb2 4f11 	cmp.w	r2, r1, lsr #16
   34752:	d005      	beq.n	34760 <rpc_dfu_event_handler+0x1c>
   34754:	6800      	ldr	r0, [r0, #0]
   34756:	b110      	cbz	r0, 3475e <rpc_dfu_event_handler+0x1a>
   34758:	f7fe ff06 	bl	33568 <rpc_dfu_client_data_free>
   3475c:	2000      	movs	r0, #0
   3475e:	bd08      	pop	{r3, pc}
   34760:	4a02      	ldr	r2, [pc, #8]	; (3476c <rpc_dfu_event_handler+0x28>)
   34762:	2001      	movs	r0, #1
   34764:	6013      	str	r3, [r2, #0]
   34766:	bd08      	pop	{r3, pc}
   34768:	20029848 	.word	0x20029848
   3476c:	20025184 	.word	0x20025184

00034770 <mfu_interface_init>:
   34770:	2300      	movs	r3, #0
   34772:	b510      	push	{r4, lr}
   34774:	4808      	ldr	r0, [pc, #32]	; (34798 <mfu_interface_init+0x28>)
   34776:	4909      	ldr	r1, [pc, #36]	; (3479c <mfu_interface_init+0x2c>)
   34778:	4a09      	ldr	r2, [pc, #36]	; (347a0 <mfu_interface_init+0x30>)
   3477a:	4c0a      	ldr	r4, [pc, #40]	; (347a4 <mfu_interface_init+0x34>)
   3477c:	8003      	strh	r3, [r0, #0]
   3477e:	600b      	str	r3, [r1, #0]
   34780:	6013      	str	r3, [r2, #0]
   34782:	6023      	str	r3, [r4, #0]
   34784:	f7fe feba 	bl	334fc <rpc_dfu_client_init>
   34788:	b910      	cbnz	r0, 34790 <mfu_interface_init+0x20>
   3478a:	2301      	movs	r3, #1
   3478c:	6023      	str	r3, [r4, #0]
   3478e:	bd10      	pop	{r4, pc}
   34790:	f04f 30ff 	mov.w	r0, #4294967295
   34794:	bd10      	pop	{r4, pc}
   34796:	bf00      	nop
   34798:	20029848 	.word	0x20029848
   3479c:	20025184 	.word	0x20025184
   347a0:	20025180 	.word	0x20025180
   347a4:	20025178 	.word	0x20025178

000347a8 <mfu_interface_open>:
   347a8:	b508      	push	{r3, lr}
   347aa:	4b07      	ldr	r3, [pc, #28]	; (347c8 <mfu_interface_open+0x20>)
   347ac:	681a      	ldr	r2, [r3, #0]
   347ae:	2a01      	cmp	r2, #1
   347b0:	d103      	bne.n	347ba <mfu_interface_open+0x12>
   347b2:	2202      	movs	r2, #2
   347b4:	601a      	str	r2, [r3, #0]
   347b6:	4805      	ldr	r0, [pc, #20]	; (347cc <mfu_interface_open+0x24>)
   347b8:	bd08      	pop	{r3, pc}
   347ba:	2001      	movs	r0, #1
   347bc:	f7fb fcea 	bl	30194 <bsd_os_errno_set>
   347c0:	f04f 30ff 	mov.w	r0, #4294967295
   347c4:	bd08      	pop	{r3, pc}
   347c6:	bf00      	nop
   347c8:	20025178 	.word	0x20025178
   347cc:	49765432 	.word	0x49765432

000347d0 <mfu_interface_close>:
   347d0:	b5f0      	push	{r4, r5, r6, r7, lr}
   347d2:	4c32      	ldr	r4, [pc, #200]	; (3489c <mfu_interface_close+0xcc>)
   347d4:	b083      	sub	sp, #12
   347d6:	6823      	ldr	r3, [r4, #0]
   347d8:	1e9a      	subs	r2, r3, #2
   347da:	2a01      	cmp	r2, #1
   347dc:	d857      	bhi.n	3488e <mfu_interface_close+0xbe>
   347de:	2b03      	cmp	r3, #3
   347e0:	d004      	beq.n	347ec <mfu_interface_close+0x1c>
   347e2:	2301      	movs	r3, #1
   347e4:	2000      	movs	r0, #0
   347e6:	6023      	str	r3, [r4, #0]
   347e8:	b003      	add	sp, #12
   347ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
   347ec:	2100      	movs	r1, #0
   347ee:	4668      	mov	r0, sp
   347f0:	f7fe fe8a 	bl	33508 <rpc_dfu_client_request_alloc>
   347f4:	4603      	mov	r3, r0
   347f6:	2800      	cmp	r0, #0
   347f8:	d13d      	bne.n	34876 <mfu_interface_close+0xa6>
   347fa:	2104      	movs	r1, #4
   347fc:	4e28      	ldr	r6, [pc, #160]	; (348a0 <mfu_interface_close+0xd0>)
   347fe:	9800      	ldr	r0, [sp, #0]
   34800:	8832      	ldrh	r2, [r6, #0]
   34802:	7201      	strb	r1, [r0, #8]
   34804:	3201      	adds	r2, #1
   34806:	b292      	uxth	r2, r2
   34808:	0411      	lsls	r1, r2, #16
   3480a:	f041 0106 	orr.w	r1, r1, #6
   3480e:	4d25      	ldr	r5, [pc, #148]	; (348a4 <mfu_interface_close+0xd4>)
   34810:	60c1      	str	r1, [r0, #12]
   34812:	7103      	strb	r3, [r0, #4]
   34814:	7143      	strb	r3, [r0, #5]
   34816:	7183      	strb	r3, [r0, #6]
   34818:	71c3      	strb	r3, [r0, #7]
   3481a:	7243      	strb	r3, [r0, #9]
   3481c:	7283      	strb	r3, [r0, #10]
   3481e:	72c3      	strb	r3, [r0, #11]
   34820:	2106      	movs	r1, #6
   34822:	8032      	strh	r2, [r6, #0]
   34824:	602b      	str	r3, [r5, #0]
   34826:	f7fe fe83 	bl	33530 <rpc_dfu_client_request_send>
   3482a:	b9d8      	cbnz	r0, 34864 <mfu_interface_close+0x94>
   3482c:	f04f 33ff 	mov.w	r3, #4294967295
   34830:	ae02      	add	r6, sp, #8
   34832:	4627      	mov	r7, r4
   34834:	f846 3d04 	str.w	r3, [r6, #-4]!
   34838:	e004      	b.n	34844 <mfu_interface_close+0x74>
   3483a:	4631      	mov	r1, r6
   3483c:	4638      	mov	r0, r7
   3483e:	f7fb fc15 	bl	3006c <bsd_os_timedwait>
   34842:	b9f0      	cbnz	r0, 34882 <mfu_interface_close+0xb2>
   34844:	6828      	ldr	r0, [r5, #0]
   34846:	2800      	cmp	r0, #0
   34848:	d0f7      	beq.n	3483a <mfu_interface_close+0x6a>
   3484a:	6905      	ldr	r5, [r0, #16]
   3484c:	f7fe fe84 	bl	33558 <rpc_dfu_client_message_free>
   34850:	2d00      	cmp	r5, #0
   34852:	d0c6      	beq.n	347e2 <mfu_interface_close+0x12>
   34854:	4b14      	ldr	r3, [pc, #80]	; (348a8 <mfu_interface_close+0xd8>)
   34856:	2008      	movs	r0, #8
   34858:	601d      	str	r5, [r3, #0]
   3485a:	f7fb fc9b 	bl	30194 <bsd_os_errno_set>
   3485e:	f04f 30ff 	mov.w	r0, #4294967295
   34862:	e7c1      	b.n	347e8 <mfu_interface_close+0x18>
   34864:	9800      	ldr	r0, [sp, #0]
   34866:	6803      	ldr	r3, [r0, #0]
   34868:	b11b      	cbz	r3, 34872 <mfu_interface_close+0xa2>
   3486a:	4618      	mov	r0, r3
   3486c:	f7fe fe7c 	bl	33568 <rpc_dfu_client_data_free>
   34870:	9800      	ldr	r0, [sp, #0]
   34872:	f7fe fe71 	bl	33558 <rpc_dfu_client_message_free>
   34876:	200c      	movs	r0, #12
   34878:	f7fb fc8c 	bl	30194 <bsd_os_errno_set>
   3487c:	f04f 30ff 	mov.w	r0, #4294967295
   34880:	e7b2      	b.n	347e8 <mfu_interface_close+0x18>
   34882:	203c      	movs	r0, #60	; 0x3c
   34884:	f7fb fc86 	bl	30194 <bsd_os_errno_set>
   34888:	f04f 30ff 	mov.w	r0, #4294967295
   3488c:	e7ac      	b.n	347e8 <mfu_interface_close+0x18>
   3488e:	2001      	movs	r0, #1
   34890:	f7fb fc80 	bl	30194 <bsd_os_errno_set>
   34894:	f04f 30ff 	mov.w	r0, #4294967295
   34898:	e7a6      	b.n	347e8 <mfu_interface_close+0x18>
   3489a:	bf00      	nop
   3489c:	20025178 	.word	0x20025178
   348a0:	20029848 	.word	0x20029848
   348a4:	20025184 	.word	0x20025184
   348a8:	2002517c 	.word	0x2002517c

000348ac <mfu_interface_sendto>:
   348ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   348b0:	4e64      	ldr	r6, [pc, #400]	; (34a44 <mfu_interface_sendto+0x198>)
   348b2:	460f      	mov	r7, r1
   348b4:	6831      	ldr	r1, [r6, #0]
   348b6:	4615      	mov	r5, r2
   348b8:	1e8a      	subs	r2, r1, #2
   348ba:	2a01      	cmp	r2, #1
   348bc:	b082      	sub	sp, #8
   348be:	f200 80b4 	bhi.w	34a2a <mfu_interface_sendto+0x17e>
   348c2:	2f00      	cmp	r7, #0
   348c4:	f000 80a5 	beq.w	34a12 <mfu_interface_sendto+0x166>
   348c8:	2d00      	cmp	r5, #0
   348ca:	f000 80a2 	beq.w	34a12 <mfu_interface_sendto+0x166>
   348ce:	2b00      	cmp	r3, #0
   348d0:	f040 80b1 	bne.w	34a36 <mfu_interface_sendto+0x18a>
   348d4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   348d6:	2b00      	cmp	r3, #0
   348d8:	f040 80a1 	bne.w	34a1e <mfu_interface_sendto+0x172>
   348dc:	2902      	cmp	r1, #2
   348de:	d04f      	beq.n	34980 <mfu_interface_sendto+0xd4>
   348e0:	46e8      	mov	r8, sp
   348e2:	4640      	mov	r0, r8
   348e4:	4629      	mov	r1, r5
   348e6:	f7fe fe0f 	bl	33508 <rpc_dfu_client_request_alloc>
   348ea:	4606      	mov	r6, r0
   348ec:	b140      	cbz	r0, 34900 <mfu_interface_sendto+0x54>
   348ee:	200c      	movs	r0, #12
   348f0:	f7fb fc50 	bl	30194 <bsd_os_errno_set>
   348f4:	f04f 35ff 	mov.w	r5, #4294967295
   348f8:	4628      	mov	r0, r5
   348fa:	b002      	add	sp, #8
   348fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   34900:	9b00      	ldr	r3, [sp, #0]
   34902:	4639      	mov	r1, r7
   34904:	6818      	ldr	r0, [r3, #0]
   34906:	462a      	mov	r2, r5
   34908:	f010 faa2 	bl	44e50 <memcpy>
   3490c:	2104      	movs	r1, #4
   3490e:	4c4e      	ldr	r4, [pc, #312]	; (34a48 <mfu_interface_sendto+0x19c>)
   34910:	9800      	ldr	r0, [sp, #0]
   34912:	8823      	ldrh	r3, [r4, #0]
   34914:	6045      	str	r5, [r0, #4]
   34916:	3301      	adds	r3, #1
   34918:	b29b      	uxth	r3, r3
   3491a:	041a      	lsls	r2, r3, #16
   3491c:	8023      	strh	r3, [r4, #0]
   3491e:	430a      	orrs	r2, r1
   34920:	4c4a      	ldr	r4, [pc, #296]	; (34a4c <mfu_interface_sendto+0x1a0>)
   34922:	60c2      	str	r2, [r0, #12]
   34924:	7246      	strb	r6, [r0, #9]
   34926:	7286      	strb	r6, [r0, #10]
   34928:	72c6      	strb	r6, [r0, #11]
   3492a:	7201      	strb	r1, [r0, #8]
   3492c:	6026      	str	r6, [r4, #0]
   3492e:	f7fe fdff 	bl	33530 <rpc_dfu_client_request_send>
   34932:	2800      	cmp	r0, #0
   34934:	d163      	bne.n	349fe <mfu_interface_sendto+0x152>
   34936:	f04f 33ff 	mov.w	r3, #4294967295
   3493a:	ae02      	add	r6, sp, #8
   3493c:	4f41      	ldr	r7, [pc, #260]	; (34a44 <mfu_interface_sendto+0x198>)
   3493e:	f846 3d04 	str.w	r3, [r6, #-4]!
   34942:	e004      	b.n	3494e <mfu_interface_sendto+0xa2>
   34944:	4631      	mov	r1, r6
   34946:	4638      	mov	r0, r7
   34948:	f7fb fb90 	bl	3006c <bsd_os_timedwait>
   3494c:	b978      	cbnz	r0, 3496e <mfu_interface_sendto+0xc2>
   3494e:	6820      	ldr	r0, [r4, #0]
   34950:	2800      	cmp	r0, #0
   34952:	d0f7      	beq.n	34944 <mfu_interface_sendto+0x98>
   34954:	6904      	ldr	r4, [r0, #16]
   34956:	f7fe fdff 	bl	33558 <rpc_dfu_client_message_free>
   3495a:	2c00      	cmp	r4, #0
   3495c:	d0cc      	beq.n	348f8 <mfu_interface_sendto+0x4c>
   3495e:	4b3c      	ldr	r3, [pc, #240]	; (34a50 <mfu_interface_sendto+0x1a4>)
   34960:	2008      	movs	r0, #8
   34962:	601c      	str	r4, [r3, #0]
   34964:	f04f 35ff 	mov.w	r5, #4294967295
   34968:	f7fb fc14 	bl	30194 <bsd_os_errno_set>
   3496c:	e7c4      	b.n	348f8 <mfu_interface_sendto+0x4c>
   3496e:	f04f 35ff 	mov.w	r5, #4294967295
   34972:	203c      	movs	r0, #60	; 0x3c
   34974:	f7fb fc0e 	bl	30194 <bsd_os_errno_set>
   34978:	4628      	mov	r0, r5
   3497a:	b002      	add	sp, #8
   3497c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   34980:	46e8      	mov	r8, sp
   34982:	4619      	mov	r1, r3
   34984:	4640      	mov	r0, r8
   34986:	f7fe fdbf 	bl	33508 <rpc_dfu_client_request_alloc>
   3498a:	4602      	mov	r2, r0
   3498c:	2800      	cmp	r0, #0
   3498e:	d1ae      	bne.n	348ee <mfu_interface_sendto+0x42>
   34990:	f04f 0c08 	mov.w	ip, #8
   34994:	492c      	ldr	r1, [pc, #176]	; (34a48 <mfu_interface_sendto+0x19c>)
   34996:	482f      	ldr	r0, [pc, #188]	; (34a54 <mfu_interface_sendto+0x1a8>)
   34998:	880b      	ldrh	r3, [r1, #0]
   3499a:	6804      	ldr	r4, [r0, #0]
   3499c:	3301      	adds	r3, #1
   3499e:	9800      	ldr	r0, [sp, #0]
   349a0:	b29b      	uxth	r3, r3
   349a2:	800b      	strh	r3, [r1, #0]
   349a4:	041b      	lsls	r3, r3, #16
   349a6:	f043 0303 	orr.w	r3, r3, #3
   349aa:	6104      	str	r4, [r0, #16]
   349ac:	4c27      	ldr	r4, [pc, #156]	; (34a4c <mfu_interface_sendto+0x1a0>)
   349ae:	60c3      	str	r3, [r0, #12]
   349b0:	7102      	strb	r2, [r0, #4]
   349b2:	7142      	strb	r2, [r0, #5]
   349b4:	7182      	strb	r2, [r0, #6]
   349b6:	71c2      	strb	r2, [r0, #7]
   349b8:	7242      	strb	r2, [r0, #9]
   349ba:	7282      	strb	r2, [r0, #10]
   349bc:	72c2      	strb	r2, [r0, #11]
   349be:	f880 c008 	strb.w	ip, [r0, #8]
   349c2:	2103      	movs	r1, #3
   349c4:	6022      	str	r2, [r4, #0]
   349c6:	f7fe fdb3 	bl	33530 <rpc_dfu_client_request_send>
   349ca:	b9c0      	cbnz	r0, 349fe <mfu_interface_sendto+0x152>
   349cc:	f04f 33ff 	mov.w	r3, #4294967295
   349d0:	f10d 0908 	add.w	r9, sp, #8
   349d4:	f849 3d04 	str.w	r3, [r9, #-4]!
   349d8:	46b2      	mov	sl, r6
   349da:	e005      	b.n	349e8 <mfu_interface_sendto+0x13c>
   349dc:	4649      	mov	r1, r9
   349de:	4650      	mov	r0, sl
   349e0:	f7fb fb44 	bl	3006c <bsd_os_timedwait>
   349e4:	2800      	cmp	r0, #0
   349e6:	d1c2      	bne.n	3496e <mfu_interface_sendto+0xc2>
   349e8:	6820      	ldr	r0, [r4, #0]
   349ea:	2800      	cmp	r0, #0
   349ec:	d0f6      	beq.n	349dc <mfu_interface_sendto+0x130>
   349ee:	6904      	ldr	r4, [r0, #16]
   349f0:	f7fe fdb2 	bl	33558 <rpc_dfu_client_message_free>
   349f4:	2c00      	cmp	r4, #0
   349f6:	d1b2      	bne.n	3495e <mfu_interface_sendto+0xb2>
   349f8:	2303      	movs	r3, #3
   349fa:	6033      	str	r3, [r6, #0]
   349fc:	e771      	b.n	348e2 <mfu_interface_sendto+0x36>
   349fe:	9800      	ldr	r0, [sp, #0]
   34a00:	6803      	ldr	r3, [r0, #0]
   34a02:	b11b      	cbz	r3, 34a0c <mfu_interface_sendto+0x160>
   34a04:	4618      	mov	r0, r3
   34a06:	f7fe fdaf 	bl	33568 <rpc_dfu_client_data_free>
   34a0a:	9800      	ldr	r0, [sp, #0]
   34a0c:	f7fe fda4 	bl	33558 <rpc_dfu_client_message_free>
   34a10:	e76d      	b.n	348ee <mfu_interface_sendto+0x42>
   34a12:	2016      	movs	r0, #22
   34a14:	f7fb fbbe 	bl	30194 <bsd_os_errno_set>
   34a18:	f04f 35ff 	mov.w	r5, #4294967295
   34a1c:	e76c      	b.n	348f8 <mfu_interface_sendto+0x4c>
   34a1e:	2038      	movs	r0, #56	; 0x38
   34a20:	f7fb fbb8 	bl	30194 <bsd_os_errno_set>
   34a24:	f04f 35ff 	mov.w	r5, #4294967295
   34a28:	e766      	b.n	348f8 <mfu_interface_sendto+0x4c>
   34a2a:	2001      	movs	r0, #1
   34a2c:	f7fb fbb2 	bl	30194 <bsd_os_errno_set>
   34a30:	f04f 35ff 	mov.w	r5, #4294967295
   34a34:	e760      	b.n	348f8 <mfu_interface_sendto+0x4c>
   34a36:	202d      	movs	r0, #45	; 0x2d
   34a38:	f7fb fbac 	bl	30194 <bsd_os_errno_set>
   34a3c:	f04f 35ff 	mov.w	r5, #4294967295
   34a40:	e75a      	b.n	348f8 <mfu_interface_sendto+0x4c>
   34a42:	bf00      	nop
   34a44:	20025178 	.word	0x20025178
   34a48:	20029848 	.word	0x20029848
   34a4c:	20025184 	.word	0x20025184
   34a50:	2002517c 	.word	0x2002517c
   34a54:	20025180 	.word	0x20025180

00034a58 <mfu_interface_setopt>:
   34a58:	b5f0      	push	{r4, r5, r6, r7, lr}
   34a5a:	4846      	ldr	r0, [pc, #280]	; (34b74 <mfu_interface_setopt+0x11c>)
   34a5c:	b083      	sub	sp, #12
   34a5e:	6800      	ldr	r0, [r0, #0]
   34a60:	3802      	subs	r0, #2
   34a62:	2801      	cmp	r0, #1
   34a64:	d877      	bhi.n	34b56 <mfu_interface_setopt+0xfe>
   34a66:	f240 2003 	movw	r0, #515	; 0x203
   34a6a:	4281      	cmp	r1, r0
   34a6c:	d16d      	bne.n	34b4a <mfu_interface_setopt+0xf2>
   34a6e:	3a04      	subs	r2, #4
   34a70:	2a03      	cmp	r2, #3
   34a72:	d85c      	bhi.n	34b2e <mfu_interface_setopt+0xd6>
   34a74:	e8df f002 	tbb	[pc, r2]
   34a78:	514e024b 	.word	0x514e024b
   34a7c:	2407      	movs	r4, #7
   34a7e:	4625      	mov	r5, r4
   34a80:	2100      	movs	r1, #0
   34a82:	4668      	mov	r0, sp
   34a84:	f7fe fd40 	bl	33508 <rpc_dfu_client_request_alloc>
   34a88:	4603      	mov	r3, r0
   34a8a:	2800      	cmp	r0, #0
   34a8c:	d138      	bne.n	34b00 <mfu_interface_setopt+0xa8>
   34a8e:	2704      	movs	r7, #4
   34a90:	4e39      	ldr	r6, [pc, #228]	; (34b78 <mfu_interface_setopt+0x120>)
   34a92:	9800      	ldr	r0, [sp, #0]
   34a94:	8832      	ldrh	r2, [r6, #0]
   34a96:	4629      	mov	r1, r5
   34a98:	3201      	adds	r2, #1
   34a9a:	b292      	uxth	r2, r2
   34a9c:	ea44 4502 	orr.w	r5, r4, r2, lsl #16
   34aa0:	4c36      	ldr	r4, [pc, #216]	; (34b7c <mfu_interface_setopt+0x124>)
   34aa2:	60c5      	str	r5, [r0, #12]
   34aa4:	7103      	strb	r3, [r0, #4]
   34aa6:	7143      	strb	r3, [r0, #5]
   34aa8:	7183      	strb	r3, [r0, #6]
   34aaa:	71c3      	strb	r3, [r0, #7]
   34aac:	7243      	strb	r3, [r0, #9]
   34aae:	7283      	strb	r3, [r0, #10]
   34ab0:	72c3      	strb	r3, [r0, #11]
   34ab2:	7207      	strb	r7, [r0, #8]
   34ab4:	8032      	strh	r2, [r6, #0]
   34ab6:	6023      	str	r3, [r4, #0]
   34ab8:	f7fe fd3a 	bl	33530 <rpc_dfu_client_request_send>
   34abc:	b9b8      	cbnz	r0, 34aee <mfu_interface_setopt+0x96>
   34abe:	f04f 33ff 	mov.w	r3, #4294967295
   34ac2:	ad02      	add	r5, sp, #8
   34ac4:	4e2b      	ldr	r6, [pc, #172]	; (34b74 <mfu_interface_setopt+0x11c>)
   34ac6:	f845 3d04 	str.w	r3, [r5, #-4]!
   34aca:	e005      	b.n	34ad8 <mfu_interface_setopt+0x80>
   34acc:	4629      	mov	r1, r5
   34ace:	4630      	mov	r0, r6
   34ad0:	f7fb facc 	bl	3006c <bsd_os_timedwait>
   34ad4:	2800      	cmp	r0, #0
   34ad6:	d131      	bne.n	34b3c <mfu_interface_setopt+0xe4>
   34ad8:	6820      	ldr	r0, [r4, #0]
   34ada:	2800      	cmp	r0, #0
   34adc:	d0f6      	beq.n	34acc <mfu_interface_setopt+0x74>
   34ade:	6904      	ldr	r4, [r0, #16]
   34ae0:	f7fe fd3a 	bl	33558 <rpc_dfu_client_message_free>
   34ae4:	2c00      	cmp	r4, #0
   34ae6:	d13c      	bne.n	34b62 <mfu_interface_setopt+0x10a>
   34ae8:	4620      	mov	r0, r4
   34aea:	b003      	add	sp, #12
   34aec:	bdf0      	pop	{r4, r5, r6, r7, pc}
   34aee:	9800      	ldr	r0, [sp, #0]
   34af0:	6803      	ldr	r3, [r0, #0]
   34af2:	b11b      	cbz	r3, 34afc <mfu_interface_setopt+0xa4>
   34af4:	4618      	mov	r0, r3
   34af6:	f7fe fd37 	bl	33568 <rpc_dfu_client_data_free>
   34afa:	9800      	ldr	r0, [sp, #0]
   34afc:	f7fe fd2c 	bl	33558 <rpc_dfu_client_message_free>
   34b00:	200c      	movs	r0, #12
   34b02:	f7fb fb47 	bl	30194 <bsd_os_errno_set>
   34b06:	f04f 30ff 	mov.w	r0, #4294967295
   34b0a:	b003      	add	sp, #12
   34b0c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   34b0e:	2405      	movs	r4, #5
   34b10:	4625      	mov	r5, r4
   34b12:	e7b5      	b.n	34a80 <mfu_interface_setopt+0x28>
   34b14:	2408      	movs	r4, #8
   34b16:	4625      	mov	r5, r4
   34b18:	e7b2      	b.n	34a80 <mfu_interface_setopt+0x28>
   34b1a:	b1b3      	cbz	r3, 34b4a <mfu_interface_setopt+0xf2>
   34b1c:	9a08      	ldr	r2, [sp, #32]
   34b1e:	2a04      	cmp	r2, #4
   34b20:	d113      	bne.n	34b4a <mfu_interface_setopt+0xf2>
   34b22:	2000      	movs	r0, #0
   34b24:	681a      	ldr	r2, [r3, #0]
   34b26:	4b16      	ldr	r3, [pc, #88]	; (34b80 <mfu_interface_setopt+0x128>)
   34b28:	601a      	str	r2, [r3, #0]
   34b2a:	b003      	add	sp, #12
   34b2c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   34b2e:	202a      	movs	r0, #42	; 0x2a
   34b30:	f7fb fb30 	bl	30194 <bsd_os_errno_set>
   34b34:	f04f 30ff 	mov.w	r0, #4294967295
   34b38:	b003      	add	sp, #12
   34b3a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   34b3c:	203c      	movs	r0, #60	; 0x3c
   34b3e:	f7fb fb29 	bl	30194 <bsd_os_errno_set>
   34b42:	f04f 30ff 	mov.w	r0, #4294967295
   34b46:	b003      	add	sp, #12
   34b48:	bdf0      	pop	{r4, r5, r6, r7, pc}
   34b4a:	2016      	movs	r0, #22
   34b4c:	f7fb fb22 	bl	30194 <bsd_os_errno_set>
   34b50:	f04f 30ff 	mov.w	r0, #4294967295
   34b54:	e7c9      	b.n	34aea <mfu_interface_setopt+0x92>
   34b56:	2001      	movs	r0, #1
   34b58:	f7fb fb1c 	bl	30194 <bsd_os_errno_set>
   34b5c:	f04f 30ff 	mov.w	r0, #4294967295
   34b60:	e7c3      	b.n	34aea <mfu_interface_setopt+0x92>
   34b62:	4b08      	ldr	r3, [pc, #32]	; (34b84 <mfu_interface_setopt+0x12c>)
   34b64:	2008      	movs	r0, #8
   34b66:	601c      	str	r4, [r3, #0]
   34b68:	f7fb fb14 	bl	30194 <bsd_os_errno_set>
   34b6c:	f04f 30ff 	mov.w	r0, #4294967295
   34b70:	e7bb      	b.n	34aea <mfu_interface_setopt+0x92>
   34b72:	bf00      	nop
   34b74:	20025178 	.word	0x20025178
   34b78:	20029848 	.word	0x20029848
   34b7c:	20025184 	.word	0x20025184
   34b80:	20025180 	.word	0x20025180
   34b84:	2002517c 	.word	0x2002517c

00034b88 <mfu_interface_getopt>:
   34b88:	f240 2003 	movw	r0, #515	; 0x203
   34b8c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   34b90:	4281      	cmp	r1, r0
   34b92:	b082      	sub	sp, #8
   34b94:	9e08      	ldr	r6, [sp, #32]
   34b96:	f040 80ae 	bne.w	34cf6 <mfu_interface_getopt+0x16e>
   34b9a:	461d      	mov	r5, r3
   34b9c:	2b00      	cmp	r3, #0
   34b9e:	f000 80aa 	beq.w	34cf6 <mfu_interface_getopt+0x16e>
   34ba2:	2e00      	cmp	r6, #0
   34ba4:	f000 80a7 	beq.w	34cf6 <mfu_interface_getopt+0x16e>
   34ba8:	4b5e      	ldr	r3, [pc, #376]	; (34d24 <mfu_interface_getopt+0x19c>)
   34baa:	681b      	ldr	r3, [r3, #0]
   34bac:	3b02      	subs	r3, #2
   34bae:	2b01      	cmp	r3, #1
   34bb0:	f200 80a7 	bhi.w	34d02 <mfu_interface_getopt+0x17a>
   34bb4:	3a01      	subs	r2, #1
   34bb6:	2a13      	cmp	r2, #19
   34bb8:	d879      	bhi.n	34cae <mfu_interface_getopt+0x126>
   34bba:	e8df f002 	tbb	[pc, r2]
   34bbe:	5f17      	.short	0x5f17
   34bc0:	78787878 	.word	0x78787878
   34bc4:	78787872 	.word	0x78787872
   34bc8:	78787878 	.word	0x78787878
   34bcc:	78787878 	.word	0x78787878
   34bd0:	0a78      	.short	0x0a78
   34bd2:	6833      	ldr	r3, [r6, #0]
   34bd4:	2b04      	cmp	r3, #4
   34bd6:	f040 808e 	bne.w	34cf6 <mfu_interface_getopt+0x16e>
   34bda:	2200      	movs	r2, #0
   34bdc:	4610      	mov	r0, r2
   34bde:	4b52      	ldr	r3, [pc, #328]	; (34d28 <mfu_interface_getopt+0x1a0>)
   34be0:	6819      	ldr	r1, [r3, #0]
   34be2:	601a      	str	r2, [r3, #0]
   34be4:	6029      	str	r1, [r5, #0]
   34be6:	b002      	add	sp, #8
   34be8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   34bec:	6833      	ldr	r3, [r6, #0]
   34bee:	2b24      	cmp	r3, #36	; 0x24
   34bf0:	f040 8081 	bne.w	34cf6 <mfu_interface_getopt+0x16e>
   34bf4:	2401      	movs	r4, #1
   34bf6:	46a0      	mov	r8, r4
   34bf8:	2100      	movs	r1, #0
   34bfa:	4668      	mov	r0, sp
   34bfc:	f7fe fc84 	bl	33508 <rpc_dfu_client_request_alloc>
   34c00:	2800      	cmp	r0, #0
   34c02:	d146      	bne.n	34c92 <mfu_interface_getopt+0x10a>
   34c04:	4949      	ldr	r1, [pc, #292]	; (34d2c <mfu_interface_getopt+0x1a4>)
   34c06:	9b00      	ldr	r3, [sp, #0]
   34c08:	880a      	ldrh	r2, [r1, #0]
   34c0a:	f1b8 0f03 	cmp.w	r8, #3
   34c0e:	f102 0201 	add.w	r2, r2, #1
   34c12:	b292      	uxth	r2, r2
   34c14:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
   34c18:	7118      	strb	r0, [r3, #4]
   34c1a:	800a      	strh	r2, [r1, #0]
   34c1c:	60dc      	str	r4, [r3, #12]
   34c1e:	7158      	strb	r0, [r3, #5]
   34c20:	7198      	strb	r0, [r3, #6]
   34c22:	71d8      	strb	r0, [r3, #7]
   34c24:	d04b      	beq.n	34cbe <mfu_interface_getopt+0x136>
   34c26:	2104      	movs	r1, #4
   34c28:	2200      	movs	r2, #0
   34c2a:	4f41      	ldr	r7, [pc, #260]	; (34d30 <mfu_interface_getopt+0x1a8>)
   34c2c:	6099      	str	r1, [r3, #8]
   34c2e:	4618      	mov	r0, r3
   34c30:	4641      	mov	r1, r8
   34c32:	603a      	str	r2, [r7, #0]
   34c34:	f7fe fc7c 	bl	33530 <rpc_dfu_client_request_send>
   34c38:	2800      	cmp	r0, #0
   34c3a:	d14d      	bne.n	34cd8 <mfu_interface_getopt+0x150>
   34c3c:	f04f 33ff 	mov.w	r3, #4294967295
   34c40:	ac02      	add	r4, sp, #8
   34c42:	f844 3d04 	str.w	r3, [r4, #-4]!
   34c46:	f8df 80dc 	ldr.w	r8, [pc, #220]	; 34d24 <mfu_interface_getopt+0x19c>
   34c4a:	e005      	b.n	34c58 <mfu_interface_getopt+0xd0>
   34c4c:	4621      	mov	r1, r4
   34c4e:	4640      	mov	r0, r8
   34c50:	f7fb fa0c 	bl	3006c <bsd_os_timedwait>
   34c54:	2800      	cmp	r0, #0
   34c56:	d137      	bne.n	34cc8 <mfu_interface_getopt+0x140>
   34c58:	6839      	ldr	r1, [r7, #0]
   34c5a:	2900      	cmp	r1, #0
   34c5c:	d0f6      	beq.n	34c4c <mfu_interface_getopt+0xc4>
   34c5e:	690c      	ldr	r4, [r1, #16]
   34c60:	2c00      	cmp	r4, #0
   34c62:	d154      	bne.n	34d0e <mfu_interface_getopt+0x186>
   34c64:	6832      	ldr	r2, [r6, #0]
   34c66:	3114      	adds	r1, #20
   34c68:	4628      	mov	r0, r5
   34c6a:	f010 f8f1 	bl	44e50 <memcpy>
   34c6e:	6838      	ldr	r0, [r7, #0]
   34c70:	f7fe fc72 	bl	33558 <rpc_dfu_client_message_free>
   34c74:	4620      	mov	r0, r4
   34c76:	b002      	add	sp, #8
   34c78:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   34c7c:	6833      	ldr	r3, [r6, #0]
   34c7e:	2b04      	cmp	r3, #4
   34c80:	d139      	bne.n	34cf6 <mfu_interface_getopt+0x16e>
   34c82:	2402      	movs	r4, #2
   34c84:	2100      	movs	r1, #0
   34c86:	4668      	mov	r0, sp
   34c88:	46a0      	mov	r8, r4
   34c8a:	f7fe fc3d 	bl	33508 <rpc_dfu_client_request_alloc>
   34c8e:	2800      	cmp	r0, #0
   34c90:	d0b8      	beq.n	34c04 <mfu_interface_getopt+0x7c>
   34c92:	200c      	movs	r0, #12
   34c94:	f7fb fa7e 	bl	30194 <bsd_os_errno_set>
   34c98:	f04f 30ff 	mov.w	r0, #4294967295
   34c9c:	b002      	add	sp, #8
   34c9e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   34ca2:	6833      	ldr	r3, [r6, #0]
   34ca4:	2b04      	cmp	r3, #4
   34ca6:	d126      	bne.n	34cf6 <mfu_interface_getopt+0x16e>
   34ca8:	2409      	movs	r4, #9
   34caa:	46a0      	mov	r8, r4
   34cac:	e7a4      	b.n	34bf8 <mfu_interface_getopt+0x70>
   34cae:	202a      	movs	r0, #42	; 0x2a
   34cb0:	f7fb fa70 	bl	30194 <bsd_os_errno_set>
   34cb4:	f04f 30ff 	mov.w	r0, #4294967295
   34cb8:	b002      	add	sp, #8
   34cba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   34cbe:	4a1d      	ldr	r2, [pc, #116]	; (34d34 <mfu_interface_getopt+0x1ac>)
   34cc0:	2108      	movs	r1, #8
   34cc2:	6812      	ldr	r2, [r2, #0]
   34cc4:	611a      	str	r2, [r3, #16]
   34cc6:	e7af      	b.n	34c28 <mfu_interface_getopt+0xa0>
   34cc8:	203c      	movs	r0, #60	; 0x3c
   34cca:	f7fb fa63 	bl	30194 <bsd_os_errno_set>
   34cce:	f04f 30ff 	mov.w	r0, #4294967295
   34cd2:	b002      	add	sp, #8
   34cd4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   34cd8:	9800      	ldr	r0, [sp, #0]
   34cda:	6803      	ldr	r3, [r0, #0]
   34cdc:	b11b      	cbz	r3, 34ce6 <mfu_interface_getopt+0x15e>
   34cde:	4618      	mov	r0, r3
   34ce0:	f7fe fc42 	bl	33568 <rpc_dfu_client_data_free>
   34ce4:	9800      	ldr	r0, [sp, #0]
   34ce6:	f7fe fc37 	bl	33558 <rpc_dfu_client_message_free>
   34cea:	200c      	movs	r0, #12
   34cec:	f7fb fa52 	bl	30194 <bsd_os_errno_set>
   34cf0:	f04f 30ff 	mov.w	r0, #4294967295
   34cf4:	e7d2      	b.n	34c9c <mfu_interface_getopt+0x114>
   34cf6:	2016      	movs	r0, #22
   34cf8:	f7fb fa4c 	bl	30194 <bsd_os_errno_set>
   34cfc:	f04f 30ff 	mov.w	r0, #4294967295
   34d00:	e771      	b.n	34be6 <mfu_interface_getopt+0x5e>
   34d02:	2001      	movs	r0, #1
   34d04:	f7fb fa46 	bl	30194 <bsd_os_errno_set>
   34d08:	f04f 30ff 	mov.w	r0, #4294967295
   34d0c:	e76b      	b.n	34be6 <mfu_interface_getopt+0x5e>
   34d0e:	4b06      	ldr	r3, [pc, #24]	; (34d28 <mfu_interface_getopt+0x1a0>)
   34d10:	2008      	movs	r0, #8
   34d12:	601c      	str	r4, [r3, #0]
   34d14:	f7fb fa3e 	bl	30194 <bsd_os_errno_set>
   34d18:	6838      	ldr	r0, [r7, #0]
   34d1a:	f7fe fc1d 	bl	33558 <rpc_dfu_client_message_free>
   34d1e:	f04f 30ff 	mov.w	r0, #4294967295
   34d22:	e760      	b.n	34be6 <mfu_interface_getopt+0x5e>
   34d24:	20025178 	.word	0x20025178
   34d28:	2002517c 	.word	0x2002517c
   34d2c:	20029848 	.word	0x20029848
   34d30:	20025184 	.word	0x20025184
   34d34:	20025180 	.word	0x20025180

00034d38 <bsd_recoverable_error_handler>:
   34d38:	4770      	bx	lr
   34d3a:	bf00      	nop

00034d3c <bsd_platform_error_handler>:
   34d3c:	b508      	push	{r3, lr}
   34d3e:	f7ff fffb 	bl	34d38 <bsd_recoverable_error_handler>
   34d42:	bd08      	pop	{r3, pc}

00034d44 <bsd_init>:
   34d44:	b510      	push	{r4, lr}
   34d46:	4c06      	ldr	r4, [pc, #24]	; (34d60 <bsd_init+0x1c>)
   34d48:	7823      	ldrb	r3, [r4, #0]
   34d4a:	b92b      	cbnz	r3, 34d58 <bsd_init+0x14>
   34d4c:	f000 f818 	bl	34d80 <bsd_platform_init>
   34d50:	b908      	cbnz	r0, 34d56 <bsd_init+0x12>
   34d52:	2301      	movs	r3, #1
   34d54:	7023      	strb	r3, [r4, #0]
   34d56:	bd10      	pop	{r4, pc}
   34d58:	f04f 30ff 	mov.w	r0, #4294967295
   34d5c:	bd10      	pop	{r4, pc}
   34d5e:	bf00      	nop
   34d60:	2002b4e6 	.word	0x2002b4e6

00034d64 <unimplemented_method>:
   34d64:	b40f      	push	{r0, r1, r2, r3}
   34d66:	b508      	push	{r3, lr}
   34d68:	202d      	movs	r0, #45	; 0x2d
   34d6a:	f7fb fa13 	bl	30194 <bsd_os_errno_set>
   34d6e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   34d72:	f04f 30ff 	mov.w	r0, #4294967295
   34d76:	b004      	add	sp, #16
   34d78:	4770      	bx	lr
   34d7a:	bf00      	nop

00034d7c <rpc_transport_ipc_fault_handler>:
   34d7c:	f7ff bfde 	b.w	34d3c <bsd_platform_error_handler>

00034d80 <bsd_platform_init>:
   34d80:	b5f0      	push	{r4, r5, r6, r7, lr}
   34d82:	b093      	sub	sp, #76	; 0x4c
   34d84:	f7fe fe28 	bl	339d8 <nrf_mem_init>
   34d88:	2800      	cmp	r0, #0
   34d8a:	d14c      	bne.n	34e26 <bsd_platform_init+0xa6>
   34d8c:	4928      	ldr	r1, [pc, #160]	; (34e30 <bsd_platform_init+0xb0>)
   34d8e:	a801      	add	r0, sp, #4
   34d90:	f7fe fe96 	bl	33ac0 <nrf_mem_register>
   34d94:	2800      	cmp	r0, #0
   34d96:	d146      	bne.n	34e26 <bsd_platform_init+0xa6>
   34d98:	f7fb fb1a 	bl	303d0 <bsd_os_init>
   34d9c:	f004 f9fa 	bl	39194 <rpc_framework_init>
   34da0:	2800      	cmp	r0, #0
   34da2:	d140      	bne.n	34e26 <bsd_platform_init+0xa6>
   34da4:	2320      	movs	r3, #32
   34da6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
   34daa:	2208      	movs	r2, #8
   34dac:	f44f 5c40 	mov.w	ip, #12288	; 0x3000
   34db0:	4f20      	ldr	r7, [pc, #128]	; (34e34 <bsd_platform_init+0xb4>)
   34db2:	4e21      	ldr	r6, [pc, #132]	; (34e38 <bsd_platform_init+0xb8>)
   34db4:	9303      	str	r3, [sp, #12]
   34db6:	9305      	str	r3, [sp, #20]
   34db8:	9307      	str	r3, [sp, #28]
   34dba:	4d20      	ldr	r5, [pc, #128]	; (34e3c <bsd_platform_init+0xbc>)
   34dbc:	9109      	str	r1, [sp, #36]	; 0x24
   34dbe:	910d      	str	r1, [sp, #52]	; 0x34
   34dc0:	4c1f      	ldr	r4, [pc, #124]	; (34e40 <bsd_platform_init+0xc0>)
   34dc2:	4920      	ldr	r1, [pc, #128]	; (34e44 <bsd_platform_init+0xc4>)
   34dc4:	4b20      	ldr	r3, [pc, #128]	; (34e48 <bsd_platform_init+0xc8>)
   34dc6:	e9cd 0010 	strd	r0, r0, [sp, #64]	; 0x40
   34dca:	eb0d 0002 	add.w	r0, sp, r2
   34dce:	f8cd c02c 	str.w	ip, [sp, #44]	; 0x2c
   34dd2:	e9cd 220e 	strd	r2, r2, [sp, #56]	; 0x38
   34dd6:	9702      	str	r7, [sp, #8]
   34dd8:	9604      	str	r6, [sp, #16]
   34dda:	9506      	str	r5, [sp, #24]
   34ddc:	9408      	str	r4, [sp, #32]
   34dde:	910a      	str	r1, [sp, #40]	; 0x28
   34de0:	930c      	str	r3, [sp, #48]	; 0x30
   34de2:	f000 fbe9 	bl	355b8 <rpc_transport_ipc_init>
   34de6:	b108      	cbz	r0, 34dec <bsd_platform_init+0x6c>
   34de8:	b013      	add	sp, #76	; 0x4c
   34dea:	bdf0      	pop	{r4, r5, r6, r7, pc}
   34dec:	f003 ff6e 	bl	38ccc <interface_init>
   34df0:	b9c8      	cbnz	r0, 34e26 <bsd_platform_init+0xa6>
   34df2:	f7fe fa3b 	bl	3326c <at_interface_init>
   34df6:	b9b0      	cbnz	r0, 34e26 <bsd_platform_init+0xa6>
   34df8:	f002 fc22 	bl	37640 <ip_interface_init>
   34dfc:	b998      	cbnz	r0, 34e26 <bsd_platform_init+0xa6>
   34dfe:	f7ff f881 	bl	33f04 <tls_interface_init>
   34e02:	b980      	cbnz	r0, 34e26 <bsd_platform_init+0xa6>
   34e04:	f7ff fcb4 	bl	34770 <mfu_interface_init>
   34e08:	b968      	cbnz	r0, 34e26 <bsd_platform_init+0xa6>
   34e0a:	f001 f9e9 	bl	361e0 <pdn_interface_init>
   34e0e:	b950      	cbnz	r0, 34e26 <bsd_platform_init+0xa6>
   34e10:	f005 fc94 	bl	3a73c <gnss_interface_init>
   34e14:	b938      	cbnz	r0, 34e26 <bsd_platform_init+0xa6>
   34e16:	f7fd fec1 	bl	32b9c <logobj_interface_init>
   34e1a:	3000      	adds	r0, #0
   34e1c:	bf18      	it	ne
   34e1e:	2001      	movne	r0, #1
   34e20:	4240      	negs	r0, r0
   34e22:	b013      	add	sp, #76	; 0x4c
   34e24:	bdf0      	pop	{r4, r5, r6, r7, pc}
   34e26:	f04f 30ff 	mov.w	r0, #4294967295
   34e2a:	b013      	add	sp, #76	; 0x4c
   34e2c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   34e2e:	bf00      	nop
   34e30:	00047144 	.word	0x00047144
   34e34:	20010000 	.word	0x20010000
   34e38:	20010040 	.word	0x20010040
   34e3c:	20010020 	.word	0x20010020
   34e40:	20017060 	.word	0x20017060
   34e44:	20010060 	.word	0x20010060
   34e48:	20013060 	.word	0x20013060

00034e4c <bsd_platform_af_method_table_get>:
   34e4c:	2805      	cmp	r0, #5
   34e4e:	d02a      	beq.n	34ea6 <bsd_platform_af_method_table_get+0x5a>
   34e50:	b508      	push	{r3, lr}
   34e52:	d914      	bls.n	34e7e <bsd_platform_af_method_table_get+0x32>
   34e54:	280a      	cmp	r0, #10
   34e56:	d016      	beq.n	34e86 <bsd_platform_af_method_table_get+0x3a>
   34e58:	2866      	cmp	r0, #102	; 0x66
   34e5a:	d11f      	bne.n	34e9c <bsd_platform_af_method_table_get+0x50>
   34e5c:	f240 2302 	movw	r3, #514	; 0x202
   34e60:	429a      	cmp	r2, r3
   34e62:	d035      	beq.n	34ed0 <bsd_platform_af_method_table_get+0x84>
   34e64:	f240 2305 	movw	r3, #517	; 0x205
   34e68:	429a      	cmp	r2, r3
   34e6a:	d035      	beq.n	34ed8 <bsd_platform_af_method_table_get+0x8c>
   34e6c:	f240 2301 	movw	r3, #513	; 0x201
   34e70:	429a      	cmp	r2, r3
   34e72:	d02f      	beq.n	34ed4 <bsd_platform_af_method_table_get+0x88>
   34e74:	202b      	movs	r0, #43	; 0x2b
   34e76:	f7fb f98d 	bl	30194 <bsd_os_errno_set>
   34e7a:	2000      	movs	r0, #0
   34e7c:	bd08      	pop	{r3, pc}
   34e7e:	2801      	cmp	r0, #1
   34e80:	d016      	beq.n	34eb0 <bsd_platform_af_method_table_get+0x64>
   34e82:	2802      	cmp	r0, #2
   34e84:	d10a      	bne.n	34e9c <bsd_platform_af_method_table_get+0x50>
   34e86:	f5b2 7f83 	cmp.w	r2, #262	; 0x106
   34e8a:	d21a      	bcs.n	34ec2 <bsd_platform_af_method_table_get+0x76>
   34e8c:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
   34e90:	d21a      	bcs.n	34ec8 <bsd_platform_af_method_table_get+0x7c>
   34e92:	3a01      	subs	r2, #1
   34e94:	2a01      	cmp	r2, #1
   34e96:	d8ed      	bhi.n	34e74 <bsd_platform_af_method_table_get+0x28>
   34e98:	4810      	ldr	r0, [pc, #64]	; (34edc <bsd_platform_af_method_table_get+0x90>)
   34e9a:	bd08      	pop	{r3, pc}
   34e9c:	2016      	movs	r0, #22
   34e9e:	f7fb f979 	bl	30194 <bsd_os_errno_set>
   34ea2:	2000      	movs	r0, #0
   34ea4:	bd08      	pop	{r3, pc}
   34ea6:	2903      	cmp	r1, #3
   34ea8:	480d      	ldr	r0, [pc, #52]	; (34ee0 <bsd_platform_af_method_table_get+0x94>)
   34eaa:	bf18      	it	ne
   34eac:	2000      	movne	r0, #0
   34eae:	4770      	bx	lr
   34eb0:	f240 2303 	movw	r3, #515	; 0x203
   34eb4:	429a      	cmp	r2, r3
   34eb6:	d009      	beq.n	34ecc <bsd_platform_af_method_table_get+0x80>
   34eb8:	f5b2 7f01 	cmp.w	r2, #516	; 0x204
   34ebc:	d1da      	bne.n	34e74 <bsd_platform_af_method_table_get+0x28>
   34ebe:	4809      	ldr	r0, [pc, #36]	; (34ee4 <bsd_platform_af_method_table_get+0x98>)
   34ec0:	bd08      	pop	{r3, pc}
   34ec2:	f5b2 7f87 	cmp.w	r2, #270	; 0x10e
   34ec6:	d1d5      	bne.n	34e74 <bsd_platform_af_method_table_get+0x28>
   34ec8:	4807      	ldr	r0, [pc, #28]	; (34ee8 <bsd_platform_af_method_table_get+0x9c>)
   34eca:	bd08      	pop	{r3, pc}
   34ecc:	4807      	ldr	r0, [pc, #28]	; (34eec <bsd_platform_af_method_table_get+0xa0>)
   34ece:	bd08      	pop	{r3, pc}
   34ed0:	4807      	ldr	r0, [pc, #28]	; (34ef0 <bsd_platform_af_method_table_get+0xa4>)
   34ed2:	bd08      	pop	{r3, pc}
   34ed4:	4807      	ldr	r0, [pc, #28]	; (34ef4 <bsd_platform_af_method_table_get+0xa8>)
   34ed6:	bd08      	pop	{r3, pc}
   34ed8:	4807      	ldr	r0, [pc, #28]	; (34ef8 <bsd_platform_af_method_table_get+0xac>)
   34eda:	bd08      	pop	{r3, pc}
   34edc:	00047014 	.word	0x00047014
   34ee0:	00047104 	.word	0x00047104
   34ee4:	000470b4 	.word	0x000470b4
   34ee8:	0004703c 	.word	0x0004703c
   34eec:	00047064 	.word	0x00047064
   34ef0:	0004708c 	.word	0x0004708c
   34ef4:	00046fec 	.word	0x00046fec
   34ef8:	000470dc 	.word	0x000470dc

00034efc <bsd_platform_fd_method_table_get>:
   34efc:	b538      	push	{r3, r4, r5, lr}
   34efe:	4605      	mov	r5, r0
   34f00:	f004 f816 	bl	38f30 <interface_socket_from_handle_get>
   34f04:	4604      	mov	r4, r0
   34f06:	b960      	cbnz	r0, 34f22 <bsd_platform_fd_method_table_get+0x26>
   34f08:	4b2c      	ldr	r3, [pc, #176]	; (34fbc <bsd_platform_fd_method_table_get+0xc0>)
   34f0a:	429d      	cmp	r5, r3
   34f0c:	d02f      	beq.n	34f6e <bsd_platform_fd_method_table_get+0x72>
   34f0e:	0c2b      	lsrs	r3, r5, #16
   34f10:	4a2b      	ldr	r2, [pc, #172]	; (34fc0 <bsd_platform_fd_method_table_get+0xc4>)
   34f12:	041b      	lsls	r3, r3, #16
   34f14:	4293      	cmp	r3, r2
   34f16:	d03d      	beq.n	34f94 <bsd_platform_fd_method_table_get+0x98>
   34f18:	4b2a      	ldr	r3, [pc, #168]	; (34fc4 <bsd_platform_fd_method_table_get+0xc8>)
   34f1a:	429d      	cmp	r5, r3
   34f1c:	d149      	bne.n	34fb2 <bsd_platform_fd_method_table_get+0xb6>
   34f1e:	482a      	ldr	r0, [pc, #168]	; (34fc8 <bsd_platform_fd_method_table_get+0xcc>)
   34f20:	bd38      	pop	{r3, r4, r5, pc}
   34f22:	68c3      	ldr	r3, [r0, #12]
   34f24:	6942      	ldr	r2, [r0, #20]
   34f26:	2b05      	cmp	r3, #5
   34f28:	d036      	beq.n	34f98 <bsd_platform_fd_method_table_get+0x9c>
   34f2a:	d911      	bls.n	34f50 <bsd_platform_fd_method_table_get+0x54>
   34f2c:	2b0a      	cmp	r3, #10
   34f2e:	d013      	beq.n	34f58 <bsd_platform_fd_method_table_get+0x5c>
   34f30:	2b66      	cmp	r3, #102	; 0x66
   34f32:	d11e      	bne.n	34f72 <bsd_platform_fd_method_table_get+0x76>
   34f34:	f240 2302 	movw	r3, #514	; 0x202
   34f38:	429a      	cmp	r2, r3
   34f3a:	d02b      	beq.n	34f94 <bsd_platform_fd_method_table_get+0x98>
   34f3c:	f240 2305 	movw	r3, #517	; 0x205
   34f40:	429a      	cmp	r2, r3
   34f42:	d02f      	beq.n	34fa4 <bsd_platform_fd_method_table_get+0xa8>
   34f44:	f240 2301 	movw	r3, #513	; 0x201
   34f48:	429a      	cmp	r2, r3
   34f4a:	d11e      	bne.n	34f8a <bsd_platform_fd_method_table_get+0x8e>
   34f4c:	481f      	ldr	r0, [pc, #124]	; (34fcc <bsd_platform_fd_method_table_get+0xd0>)
   34f4e:	bd38      	pop	{r3, r4, r5, pc}
   34f50:	2b01      	cmp	r3, #1
   34f52:	d013      	beq.n	34f7c <bsd_platform_fd_method_table_get+0x80>
   34f54:	2b02      	cmp	r3, #2
   34f56:	d10c      	bne.n	34f72 <bsd_platform_fd_method_table_get+0x76>
   34f58:	f5b2 7f83 	cmp.w	r2, #262	; 0x106
   34f5c:	d224      	bcs.n	34fa8 <bsd_platform_fd_method_table_get+0xac>
   34f5e:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
   34f62:	d224      	bcs.n	34fae <bsd_platform_fd_method_table_get+0xb2>
   34f64:	3a01      	subs	r2, #1
   34f66:	2a01      	cmp	r2, #1
   34f68:	d80f      	bhi.n	34f8a <bsd_platform_fd_method_table_get+0x8e>
   34f6a:	4819      	ldr	r0, [pc, #100]	; (34fd0 <bsd_platform_fd_method_table_get+0xd4>)
   34f6c:	bd38      	pop	{r3, r4, r5, pc}
   34f6e:	4819      	ldr	r0, [pc, #100]	; (34fd4 <bsd_platform_fd_method_table_get+0xd8>)
   34f70:	bd38      	pop	{r3, r4, r5, pc}
   34f72:	2016      	movs	r0, #22
   34f74:	f7fb f90e 	bl	30194 <bsd_os_errno_set>
   34f78:	2000      	movs	r0, #0
   34f7a:	bd38      	pop	{r3, r4, r5, pc}
   34f7c:	f240 2303 	movw	r3, #515	; 0x203
   34f80:	429a      	cmp	r2, r3
   34f82:	d0f4      	beq.n	34f6e <bsd_platform_fd_method_table_get+0x72>
   34f84:	f5b2 7f01 	cmp.w	r2, #516	; 0x204
   34f88:	d0c9      	beq.n	34f1e <bsd_platform_fd_method_table_get+0x22>
   34f8a:	202b      	movs	r0, #43	; 0x2b
   34f8c:	f7fb f902 	bl	30194 <bsd_os_errno_set>
   34f90:	2000      	movs	r0, #0
   34f92:	bd38      	pop	{r3, r4, r5, pc}
   34f94:	4810      	ldr	r0, [pc, #64]	; (34fd8 <bsd_platform_fd_method_table_get+0xdc>)
   34f96:	bd38      	pop	{r3, r4, r5, pc}
   34f98:	6903      	ldr	r3, [r0, #16]
   34f9a:	4810      	ldr	r0, [pc, #64]	; (34fdc <bsd_platform_fd_method_table_get+0xe0>)
   34f9c:	2b03      	cmp	r3, #3
   34f9e:	bf18      	it	ne
   34fa0:	2000      	movne	r0, #0
   34fa2:	bd38      	pop	{r3, r4, r5, pc}
   34fa4:	480e      	ldr	r0, [pc, #56]	; (34fe0 <bsd_platform_fd_method_table_get+0xe4>)
   34fa6:	bd38      	pop	{r3, r4, r5, pc}
   34fa8:	f5b2 7f87 	cmp.w	r2, #270	; 0x10e
   34fac:	d1ed      	bne.n	34f8a <bsd_platform_fd_method_table_get+0x8e>
   34fae:	480d      	ldr	r0, [pc, #52]	; (34fe4 <bsd_platform_fd_method_table_get+0xe8>)
   34fb0:	bd38      	pop	{r3, r4, r5, pc}
   34fb2:	2009      	movs	r0, #9
   34fb4:	f7fb f8ee 	bl	30194 <bsd_os_errno_set>
   34fb8:	4620      	mov	r0, r4
   34fba:	bd38      	pop	{r3, r4, r5, pc}
   34fbc:	49765432 	.word	0x49765432
   34fc0:	789a0000 	.word	0x789a0000
   34fc4:	49765443 	.word	0x49765443
   34fc8:	000470b4 	.word	0x000470b4
   34fcc:	00046fec 	.word	0x00046fec
   34fd0:	00047014 	.word	0x00047014
   34fd4:	00047064 	.word	0x00047064
   34fd8:	0004708c 	.word	0x0004708c
   34fdc:	00047104 	.word	0x00047104
   34fe0:	000470dc 	.word	0x000470dc
   34fe4:	0004703c 	.word	0x0004703c

00034fe8 <bsd_platform_getaddrinfo>:
   34fe8:	f003 bad6 	b.w	38598 <ip_interface_getaddrinfo>

00034fec <bsd_platform_freeaddrinfo>:
   34fec:	f003 bbca 	b.w	38784 <ip_interface_freeaddrinfo>

00034ff0 <bsd_platform_poll>:
   34ff0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   34ff4:	ea42 72e2 	orr.w	r2, r2, r2, asr #31
   34ff8:	b083      	sub	sp, #12
   34ffa:	9200      	str	r2, [sp, #0]
   34ffc:	2800      	cmp	r0, #0
   34ffe:	d048      	beq.n	35092 <bsd_platform_poll+0xa2>
   35000:	1e4b      	subs	r3, r1, #1
   35002:	2b08      	cmp	r3, #8
   35004:	d845      	bhi.n	35092 <bsd_platform_poll+0xa2>
   35006:	4680      	mov	r8, r0
   35008:	4605      	mov	r5, r0
   3500a:	2400      	movs	r4, #0
   3500c:	eb00 07c1 	add.w	r7, r0, r1, lsl #3
   35010:	88ab      	ldrh	r3, [r5, #4]
   35012:	6828      	ldr	r0, [r5, #0]
   35014:	f003 0303 	and.w	r3, r3, #3
   35018:	a901      	add	r1, sp, #4
   3501a:	f043 061c 	orr.w	r6, r3, #28
   3501e:	f003 ff95 	bl	38f4c <interface_socket_event_get>
   35022:	9b01      	ldr	r3, [sp, #4]
   35024:	3508      	adds	r5, #8
   35026:	4033      	ands	r3, r6
   35028:	f825 3c02 	strh.w	r3, [r5, #-2]
   3502c:	b103      	cbz	r3, 35030 <bsd_platform_poll+0x40>
   3502e:	3401      	adds	r4, #1
   35030:	42af      	cmp	r7, r5
   35032:	d1ed      	bne.n	35010 <bsd_platform_poll+0x20>
   35034:	bb9c      	cbnz	r4, 3509e <bsd_platform_poll+0xae>
   35036:	4669      	mov	r1, sp
   35038:	4640      	mov	r0, r8
   3503a:	f7fb f817 	bl	3006c <bsd_os_timedwait>
   3503e:	4607      	mov	r7, r0
   35040:	b108      	cbz	r0, 35046 <bsd_platform_poll+0x56>
   35042:	283c      	cmp	r0, #60	; 0x3c
   35044:	d11d      	bne.n	35082 <bsd_platform_poll+0x92>
   35046:	46c1      	mov	r9, r8
   35048:	2600      	movs	r6, #0
   3504a:	f8b9 3004 	ldrh.w	r3, [r9, #4]
   3504e:	f8d9 0000 	ldr.w	r0, [r9]
   35052:	f003 0303 	and.w	r3, r3, #3
   35056:	a901      	add	r1, sp, #4
   35058:	f043 041c 	orr.w	r4, r3, #28
   3505c:	f003 ff76 	bl	38f4c <interface_socket_event_get>
   35060:	9b01      	ldr	r3, [sp, #4]
   35062:	f109 0908 	add.w	r9, r9, #8
   35066:	4023      	ands	r3, r4
   35068:	f829 3c02 	strh.w	r3, [r9, #-2]
   3506c:	b103      	cbz	r3, 35070 <bsd_platform_poll+0x80>
   3506e:	3601      	adds	r6, #1
   35070:	454d      	cmp	r5, r9
   35072:	d1ea      	bne.n	3504a <bsd_platform_poll+0x5a>
   35074:	b90e      	cbnz	r6, 3507a <bsd_platform_poll+0x8a>
   35076:	2f00      	cmp	r7, #0
   35078:	d0dd      	beq.n	35036 <bsd_platform_poll+0x46>
   3507a:	4630      	mov	r0, r6
   3507c:	b003      	add	sp, #12
   3507e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   35082:	2023      	movs	r0, #35	; 0x23
   35084:	f7fb f886 	bl	30194 <bsd_os_errno_set>
   35088:	f04f 30ff 	mov.w	r0, #4294967295
   3508c:	b003      	add	sp, #12
   3508e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   35092:	2016      	movs	r0, #22
   35094:	f7fb f87e 	bl	30194 <bsd_os_errno_set>
   35098:	f04f 30ff 	mov.w	r0, #4294967295
   3509c:	e7ee      	b.n	3507c <bsd_platform_poll+0x8c>
   3509e:	4620      	mov	r0, r4
   350a0:	e7ec      	b.n	3507c <bsd_platform_poll+0x8c>
   350a2:	bf00      	nop

000350a4 <bsd_platform_fcntl>:
   350a4:	b508      	push	{r3, lr}
   350a6:	4b06      	ldr	r3, [pc, #24]	; (350c0 <bsd_platform_fcntl+0x1c>)
   350a8:	4298      	cmp	r0, r3
   350aa:	d003      	beq.n	350b4 <bsd_platform_fcntl+0x10>
   350ac:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   350b0:	f003 bfd6 	b.w	39060 <interface_socket_fcntl>
   350b4:	202d      	movs	r0, #45	; 0x2d
   350b6:	f7fb f86d 	bl	30194 <bsd_os_errno_set>
   350ba:	f04f 30ff 	mov.w	r0, #4294967295
   350be:	bd08      	pop	{r3, pc}
   350c0:	49765432 	.word	0x49765432

000350c4 <ipc_trace_init>:
   350c4:	4b01      	ldr	r3, [pc, #4]	; (350cc <ipc_trace_init+0x8>)
   350c6:	6018      	str	r0, [r3, #0]
   350c8:	4770      	bx	lr
   350ca:	bf00      	nop
   350cc:	20025194 	.word	0x20025194

000350d0 <bsd_os_trace_irq_handler>:
   350d0:	b5f0      	push	{r4, r5, r6, r7, lr}
   350d2:	4b6c      	ldr	r3, [pc, #432]	; (35284 <bsd_os_trace_irq_handler+0x1b4>)
   350d4:	b083      	sub	sp, #12
   350d6:	781b      	ldrb	r3, [r3, #0]
   350d8:	2b00      	cmp	r3, #0
   350da:	f000 80ad 	beq.w	35238 <bsd_os_trace_irq_handler+0x168>
   350de:	4b6a      	ldr	r3, [pc, #424]	; (35288 <bsd_os_trace_irq_handler+0x1b8>)
   350e0:	681c      	ldr	r4, [r3, #0]
   350e2:	68a2      	ldr	r2, [r4, #8]
   350e4:	6863      	ldr	r3, [r4, #4]
   350e6:	429a      	cmp	r2, r3
   350e8:	d02d      	beq.n	35146 <bsd_os_trace_irq_handler+0x76>
   350ea:	f64b 63ef 	movw	r3, #48879	; 0xbeef
   350ee:	f8ad 3000 	strh.w	r3, [sp]
   350f2:	7823      	ldrb	r3, [r4, #0]
   350f4:	466e      	mov	r6, sp
   350f6:	f88d 3004 	strb.w	r3, [sp, #4]
   350fa:	6863      	ldr	r3, [r4, #4]
   350fc:	2105      	movs	r1, #5
   350fe:	429a      	cmp	r2, r3
   35100:	bf2a      	itet	cs
   35102:	6927      	ldrcs	r7, [r4, #16]
   35104:	1a9f      	subcc	r7, r3, r2
   35106:	1abf      	subcs	r7, r7, r2
   35108:	429a      	cmp	r2, r3
   3510a:	bf94      	ite	ls
   3510c:	2500      	movls	r5, #0
   3510e:	68e5      	ldrhi	r5, [r4, #12]
   35110:	b2bf      	uxth	r7, r7
   35112:	bf88      	it	hi
   35114:	1b5b      	subhi	r3, r3, r5
   35116:	4630      	mov	r0, r6
   35118:	bf88      	it	hi
   3511a:	b29d      	uxthhi	r5, r3
   3511c:	f8ad 7002 	strh.w	r7, [sp, #2]
   35120:	f00e ff39 	bl	43f96 <bsd_os_trace_put>
   35124:	f8bd 1002 	ldrh.w	r1, [sp, #2]
   35128:	68a0      	ldr	r0, [r4, #8]
   3512a:	f00e ff34 	bl	43f96 <bsd_os_trace_put>
   3512e:	68a3      	ldr	r3, [r4, #8]
   35130:	6922      	ldr	r2, [r4, #16]
   35132:	441f      	add	r7, r3
   35134:	4297      	cmp	r7, r2
   35136:	bf08      	it	eq
   35138:	68e3      	ldreq	r3, [r4, #12]
   3513a:	60a7      	str	r7, [r4, #8]
   3513c:	bf08      	it	eq
   3513e:	60a3      	streq	r3, [r4, #8]
   35140:	2d00      	cmp	r5, #0
   35142:	f040 808d 	bne.w	35260 <bsd_os_trace_irq_handler+0x190>
   35146:	4b51      	ldr	r3, [pc, #324]	; (3528c <bsd_os_trace_irq_handler+0x1bc>)
   35148:	681c      	ldr	r4, [r3, #0]
   3514a:	68a2      	ldr	r2, [r4, #8]
   3514c:	6863      	ldr	r3, [r4, #4]
   3514e:	429a      	cmp	r2, r3
   35150:	d02c      	beq.n	351ac <bsd_os_trace_irq_handler+0xdc>
   35152:	f64b 63ef 	movw	r3, #48879	; 0xbeef
   35156:	f8ad 3000 	strh.w	r3, [sp]
   3515a:	7823      	ldrb	r3, [r4, #0]
   3515c:	466e      	mov	r6, sp
   3515e:	f88d 3004 	strb.w	r3, [sp, #4]
   35162:	6863      	ldr	r3, [r4, #4]
   35164:	2105      	movs	r1, #5
   35166:	429a      	cmp	r2, r3
   35168:	bf2a      	itet	cs
   3516a:	6927      	ldrcs	r7, [r4, #16]
   3516c:	1a9f      	subcc	r7, r3, r2
   3516e:	1abf      	subcs	r7, r7, r2
   35170:	429a      	cmp	r2, r3
   35172:	bf94      	ite	ls
   35174:	2500      	movls	r5, #0
   35176:	68e5      	ldrhi	r5, [r4, #12]
   35178:	b2bf      	uxth	r7, r7
   3517a:	bf88      	it	hi
   3517c:	1b5b      	subhi	r3, r3, r5
   3517e:	4630      	mov	r0, r6
   35180:	bf88      	it	hi
   35182:	b29d      	uxthhi	r5, r3
   35184:	f8ad 7002 	strh.w	r7, [sp, #2]
   35188:	f00e ff05 	bl	43f96 <bsd_os_trace_put>
   3518c:	f8bd 1002 	ldrh.w	r1, [sp, #2]
   35190:	68a0      	ldr	r0, [r4, #8]
   35192:	f00e ff00 	bl	43f96 <bsd_os_trace_put>
   35196:	68a3      	ldr	r3, [r4, #8]
   35198:	6922      	ldr	r2, [r4, #16]
   3519a:	441f      	add	r7, r3
   3519c:	4297      	cmp	r7, r2
   3519e:	bf08      	it	eq
   351a0:	68e3      	ldreq	r3, [r4, #12]
   351a2:	60a7      	str	r7, [r4, #8]
   351a4:	bf08      	it	eq
   351a6:	60a3      	streq	r3, [r4, #8]
   351a8:	2d00      	cmp	r5, #0
   351aa:	d148      	bne.n	3523e <bsd_os_trace_irq_handler+0x16e>
   351ac:	4b38      	ldr	r3, [pc, #224]	; (35290 <bsd_os_trace_irq_handler+0x1c0>)
   351ae:	681c      	ldr	r4, [r3, #0]
   351b0:	68a2      	ldr	r2, [r4, #8]
   351b2:	6863      	ldr	r3, [r4, #4]
   351b4:	429a      	cmp	r2, r3
   351b6:	d02b      	beq.n	35210 <bsd_os_trace_irq_handler+0x140>
   351b8:	f64b 63ef 	movw	r3, #48879	; 0xbeef
   351bc:	f8ad 3000 	strh.w	r3, [sp]
   351c0:	7823      	ldrb	r3, [r4, #0]
   351c2:	466e      	mov	r6, sp
   351c4:	f88d 3004 	strb.w	r3, [sp, #4]
   351c8:	6863      	ldr	r3, [r4, #4]
   351ca:	2105      	movs	r1, #5
   351cc:	429a      	cmp	r2, r3
   351ce:	bf2a      	itet	cs
   351d0:	6927      	ldrcs	r7, [r4, #16]
   351d2:	1a9f      	subcc	r7, r3, r2
   351d4:	1abf      	subcs	r7, r7, r2
   351d6:	429a      	cmp	r2, r3
   351d8:	bf94      	ite	ls
   351da:	2500      	movls	r5, #0
   351dc:	68e5      	ldrhi	r5, [r4, #12]
   351de:	b2bf      	uxth	r7, r7
   351e0:	bf88      	it	hi
   351e2:	1b5b      	subhi	r3, r3, r5
   351e4:	4630      	mov	r0, r6
   351e6:	bf88      	it	hi
   351e8:	b29d      	uxthhi	r5, r3
   351ea:	f8ad 7002 	strh.w	r7, [sp, #2]
   351ee:	f00e fed2 	bl	43f96 <bsd_os_trace_put>
   351f2:	f8bd 1002 	ldrh.w	r1, [sp, #2]
   351f6:	68a0      	ldr	r0, [r4, #8]
   351f8:	f00e fecd 	bl	43f96 <bsd_os_trace_put>
   351fc:	68a3      	ldr	r3, [r4, #8]
   351fe:	6922      	ldr	r2, [r4, #16]
   35200:	441f      	add	r7, r3
   35202:	4297      	cmp	r7, r2
   35204:	bf08      	it	eq
   35206:	68e3      	ldreq	r3, [r4, #12]
   35208:	60a7      	str	r7, [r4, #8]
   3520a:	bf08      	it	eq
   3520c:	60a3      	streq	r3, [r4, #8]
   3520e:	b90d      	cbnz	r5, 35214 <bsd_os_trace_irq_handler+0x144>
   35210:	b003      	add	sp, #12
   35212:	bdf0      	pop	{r4, r5, r6, r7, pc}
   35214:	4630      	mov	r0, r6
   35216:	2105      	movs	r1, #5
   35218:	f8ad 5002 	strh.w	r5, [sp, #2]
   3521c:	f00e febb 	bl	43f96 <bsd_os_trace_put>
   35220:	f8bd 1002 	ldrh.w	r1, [sp, #2]
   35224:	68e0      	ldr	r0, [r4, #12]
   35226:	f00e feb6 	bl	43f96 <bsd_os_trace_put>
   3522a:	f8bd 2002 	ldrh.w	r2, [sp, #2]
   3522e:	68e3      	ldr	r3, [r4, #12]
   35230:	4413      	add	r3, r2
   35232:	60a3      	str	r3, [r4, #8]
   35234:	b003      	add	sp, #12
   35236:	bdf0      	pop	{r4, r5, r6, r7, pc}
   35238:	f7fb f8c2 	bl	303c0 <bsd_os_trace_irq_clear>
   3523c:	e74f      	b.n	350de <bsd_os_trace_irq_handler+0xe>
   3523e:	2105      	movs	r1, #5
   35240:	4630      	mov	r0, r6
   35242:	f8ad 5002 	strh.w	r5, [sp, #2]
   35246:	f00e fea6 	bl	43f96 <bsd_os_trace_put>
   3524a:	f8bd 1002 	ldrh.w	r1, [sp, #2]
   3524e:	68e0      	ldr	r0, [r4, #12]
   35250:	f00e fea1 	bl	43f96 <bsd_os_trace_put>
   35254:	f8bd 2002 	ldrh.w	r2, [sp, #2]
   35258:	68e3      	ldr	r3, [r4, #12]
   3525a:	4413      	add	r3, r2
   3525c:	60a3      	str	r3, [r4, #8]
   3525e:	e7a5      	b.n	351ac <bsd_os_trace_irq_handler+0xdc>
   35260:	2105      	movs	r1, #5
   35262:	4630      	mov	r0, r6
   35264:	f8ad 5002 	strh.w	r5, [sp, #2]
   35268:	f00e fe95 	bl	43f96 <bsd_os_trace_put>
   3526c:	f8bd 1002 	ldrh.w	r1, [sp, #2]
   35270:	68e0      	ldr	r0, [r4, #12]
   35272:	f00e fe90 	bl	43f96 <bsd_os_trace_put>
   35276:	f8bd 2002 	ldrh.w	r2, [sp, #2]
   3527a:	68e3      	ldr	r3, [r4, #12]
   3527c:	4413      	add	r3, r2
   3527e:	60a3      	str	r3, [r4, #8]
   35280:	e761      	b.n	35146 <bsd_os_trace_irq_handler+0x76>
   35282:	bf00      	nop
   35284:	2002b4e7 	.word	0x2002b4e7
   35288:	20025190 	.word	0x20025190
   3528c:	20025188 	.word	0x20025188
   35290:	2002518c 	.word	0x2002518c

00035294 <ipc_trace_handle>:
   35294:	2200      	movs	r2, #0
   35296:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   3529a:	4bb0      	ldr	r3, [pc, #704]	; (3555c <ipc_trace_handle+0x2c8>)
   3529c:	b083      	sub	sp, #12
   3529e:	681b      	ldr	r3, [r3, #0]
   352a0:	6919      	ldr	r1, [r3, #16]
   352a2:	695c      	ldr	r4, [r3, #20]
   352a4:	7c18      	ldrb	r0, [r3, #16]
   352a6:	741a      	strb	r2, [r3, #16]
   352a8:	7c58      	ldrb	r0, [r3, #17]
   352aa:	745a      	strb	r2, [r3, #17]
   352ac:	7c98      	ldrb	r0, [r3, #18]
   352ae:	749a      	strb	r2, [r3, #18]
   352b0:	7cd8      	ldrb	r0, [r3, #19]
   352b2:	74da      	strb	r2, [r3, #19]
   352b4:	7d18      	ldrb	r0, [r3, #20]
   352b6:	751a      	strb	r2, [r3, #20]
   352b8:	7d58      	ldrb	r0, [r3, #21]
   352ba:	755a      	strb	r2, [r3, #21]
   352bc:	7d98      	ldrb	r0, [r3, #22]
   352be:	759a      	strb	r2, [r3, #22]
   352c0:	7dd8      	ldrb	r0, [r3, #23]
   352c2:	75da      	strb	r2, [r3, #23]
   352c4:	b1b9      	cbz	r1, 352f6 <ipc_trace_handle+0x62>
   352c6:	3901      	subs	r1, #1
   352c8:	2903      	cmp	r1, #3
   352ca:	d814      	bhi.n	352f6 <ipc_trace_handle+0x62>
   352cc:	e8df f011 	tbh	[pc, r1, lsl #1]
   352d0:	010300d6 	.word	0x010300d6
   352d4:	00160004 	.word	0x00160004
   352d8:	2501      	movs	r5, #1
   352da:	2003      	movs	r0, #3
   352dc:	2200      	movs	r2, #0
   352de:	f06f 015f 	mvn.w	r1, #95	; 0x5f
   352e2:	4c9f      	ldr	r4, [pc, #636]	; (35560 <ipc_trace_handle+0x2cc>)
   352e4:	7025      	strb	r5, [r4, #0]
   352e6:	7a1c      	ldrb	r4, [r3, #8]
   352e8:	7218      	strb	r0, [r3, #8]
   352ea:	7a58      	ldrb	r0, [r3, #9]
   352ec:	725a      	strb	r2, [r3, #9]
   352ee:	7a98      	ldrb	r0, [r3, #10]
   352f0:	729a      	strb	r2, [r3, #10]
   352f2:	7ada      	ldrb	r2, [r3, #11]
   352f4:	72d9      	strb	r1, [r3, #11]
   352f6:	b003      	add	sp, #12
   352f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   352fc:	2104      	movs	r1, #4
   352fe:	2200      	movs	r2, #0
   35300:	f06f 005f 	mvn.w	r0, #95	; 0x5f
   35304:	7a1c      	ldrb	r4, [r3, #8]
   35306:	7219      	strb	r1, [r3, #8]
   35308:	7a59      	ldrb	r1, [r3, #9]
   3530a:	725a      	strb	r2, [r3, #9]
   3530c:	4994      	ldr	r1, [pc, #592]	; (35560 <ipc_trace_handle+0x2cc>)
   3530e:	7a9c      	ldrb	r4, [r3, #10]
   35310:	729a      	strb	r2, [r3, #10]
   35312:	7adc      	ldrb	r4, [r3, #11]
   35314:	72d8      	strb	r0, [r3, #11]
   35316:	700a      	strb	r2, [r1, #0]
   35318:	780b      	ldrb	r3, [r1, #0]
   3531a:	2b00      	cmp	r3, #0
   3531c:	f000 8117 	beq.w	3554e <ipc_trace_handle+0x2ba>
   35320:	4b90      	ldr	r3, [pc, #576]	; (35564 <ipc_trace_handle+0x2d0>)
   35322:	681c      	ldr	r4, [r3, #0]
   35324:	68a2      	ldr	r2, [r4, #8]
   35326:	6863      	ldr	r3, [r4, #4]
   35328:	429a      	cmp	r2, r3
   3532a:	d02d      	beq.n	35388 <ipc_trace_handle+0xf4>
   3532c:	f64b 63ef 	movw	r3, #48879	; 0xbeef
   35330:	f8ad 3000 	strh.w	r3, [sp]
   35334:	7823      	ldrb	r3, [r4, #0]
   35336:	466e      	mov	r6, sp
   35338:	f88d 3004 	strb.w	r3, [sp, #4]
   3533c:	6863      	ldr	r3, [r4, #4]
   3533e:	2105      	movs	r1, #5
   35340:	429a      	cmp	r2, r3
   35342:	bf2a      	itet	cs
   35344:	6927      	ldrcs	r7, [r4, #16]
   35346:	1a9f      	subcc	r7, r3, r2
   35348:	1abf      	subcs	r7, r7, r2
   3534a:	429a      	cmp	r2, r3
   3534c:	bf94      	ite	ls
   3534e:	2500      	movls	r5, #0
   35350:	68e5      	ldrhi	r5, [r4, #12]
   35352:	b2bf      	uxth	r7, r7
   35354:	bf88      	it	hi
   35356:	1b5b      	subhi	r3, r3, r5
   35358:	4630      	mov	r0, r6
   3535a:	bf88      	it	hi
   3535c:	b29d      	uxthhi	r5, r3
   3535e:	f8ad 7002 	strh.w	r7, [sp, #2]
   35362:	f00e fe18 	bl	43f96 <bsd_os_trace_put>
   35366:	f8bd 1002 	ldrh.w	r1, [sp, #2]
   3536a:	68a0      	ldr	r0, [r4, #8]
   3536c:	f00e fe13 	bl	43f96 <bsd_os_trace_put>
   35370:	68a3      	ldr	r3, [r4, #8]
   35372:	6922      	ldr	r2, [r4, #16]
   35374:	441f      	add	r7, r3
   35376:	4297      	cmp	r7, r2
   35378:	bf08      	it	eq
   3537a:	68e3      	ldreq	r3, [r4, #12]
   3537c:	60a7      	str	r7, [r4, #8]
   3537e:	bf08      	it	eq
   35380:	60a3      	streq	r3, [r4, #8]
   35382:	2d00      	cmp	r5, #0
   35384:	f040 80d2 	bne.w	3552c <ipc_trace_handle+0x298>
   35388:	4b77      	ldr	r3, [pc, #476]	; (35568 <ipc_trace_handle+0x2d4>)
   3538a:	681c      	ldr	r4, [r3, #0]
   3538c:	68a2      	ldr	r2, [r4, #8]
   3538e:	6863      	ldr	r3, [r4, #4]
   35390:	429a      	cmp	r2, r3
   35392:	d02d      	beq.n	353f0 <ipc_trace_handle+0x15c>
   35394:	f64b 63ef 	movw	r3, #48879	; 0xbeef
   35398:	f8ad 3000 	strh.w	r3, [sp]
   3539c:	7823      	ldrb	r3, [r4, #0]
   3539e:	466e      	mov	r6, sp
   353a0:	f88d 3004 	strb.w	r3, [sp, #4]
   353a4:	6863      	ldr	r3, [r4, #4]
   353a6:	2105      	movs	r1, #5
   353a8:	429a      	cmp	r2, r3
   353aa:	bf2a      	itet	cs
   353ac:	6927      	ldrcs	r7, [r4, #16]
   353ae:	1a9f      	subcc	r7, r3, r2
   353b0:	1abf      	subcs	r7, r7, r2
   353b2:	429a      	cmp	r2, r3
   353b4:	bf94      	ite	ls
   353b6:	2500      	movls	r5, #0
   353b8:	68e5      	ldrhi	r5, [r4, #12]
   353ba:	b2bf      	uxth	r7, r7
   353bc:	bf88      	it	hi
   353be:	1b5b      	subhi	r3, r3, r5
   353c0:	4630      	mov	r0, r6
   353c2:	bf88      	it	hi
   353c4:	b29d      	uxthhi	r5, r3
   353c6:	f8ad 7002 	strh.w	r7, [sp, #2]
   353ca:	f00e fde4 	bl	43f96 <bsd_os_trace_put>
   353ce:	f8bd 1002 	ldrh.w	r1, [sp, #2]
   353d2:	68a0      	ldr	r0, [r4, #8]
   353d4:	f00e fddf 	bl	43f96 <bsd_os_trace_put>
   353d8:	68a3      	ldr	r3, [r4, #8]
   353da:	6922      	ldr	r2, [r4, #16]
   353dc:	441f      	add	r7, r3
   353de:	4297      	cmp	r7, r2
   353e0:	bf08      	it	eq
   353e2:	68e3      	ldreq	r3, [r4, #12]
   353e4:	60a7      	str	r7, [r4, #8]
   353e6:	bf08      	it	eq
   353e8:	60a3      	streq	r3, [r4, #8]
   353ea:	2d00      	cmp	r5, #0
   353ec:	f040 808d 	bne.w	3550a <ipc_trace_handle+0x276>
   353f0:	4b5e      	ldr	r3, [pc, #376]	; (3556c <ipc_trace_handle+0x2d8>)
   353f2:	681c      	ldr	r4, [r3, #0]
   353f4:	68a2      	ldr	r2, [r4, #8]
   353f6:	6863      	ldr	r3, [r4, #4]
   353f8:	429a      	cmp	r2, r3
   353fa:	f43f af7c 	beq.w	352f6 <ipc_trace_handle+0x62>
   353fe:	f64b 63ef 	movw	r3, #48879	; 0xbeef
   35402:	f8ad 3000 	strh.w	r3, [sp]
   35406:	7823      	ldrb	r3, [r4, #0]
   35408:	466e      	mov	r6, sp
   3540a:	f88d 3004 	strb.w	r3, [sp, #4]
   3540e:	6863      	ldr	r3, [r4, #4]
   35410:	2105      	movs	r1, #5
   35412:	429a      	cmp	r2, r3
   35414:	bf2a      	itet	cs
   35416:	6927      	ldrcs	r7, [r4, #16]
   35418:	1a9f      	subcc	r7, r3, r2
   3541a:	1abf      	subcs	r7, r7, r2
   3541c:	429a      	cmp	r2, r3
   3541e:	bf94      	ite	ls
   35420:	2500      	movls	r5, #0
   35422:	68e5      	ldrhi	r5, [r4, #12]
   35424:	b2bf      	uxth	r7, r7
   35426:	bf88      	it	hi
   35428:	1b5b      	subhi	r3, r3, r5
   3542a:	4630      	mov	r0, r6
   3542c:	bf88      	it	hi
   3542e:	b29d      	uxthhi	r5, r3
   35430:	f8ad 7002 	strh.w	r7, [sp, #2]
   35434:	f00e fdaf 	bl	43f96 <bsd_os_trace_put>
   35438:	f8bd 1002 	ldrh.w	r1, [sp, #2]
   3543c:	68a0      	ldr	r0, [r4, #8]
   3543e:	f00e fdaa 	bl	43f96 <bsd_os_trace_put>
   35442:	68a3      	ldr	r3, [r4, #8]
   35444:	6922      	ldr	r2, [r4, #16]
   35446:	441f      	add	r7, r3
   35448:	4297      	cmp	r7, r2
   3544a:	bf08      	it	eq
   3544c:	68e3      	ldreq	r3, [r4, #12]
   3544e:	60a7      	str	r7, [r4, #8]
   35450:	bf08      	it	eq
   35452:	60a3      	streq	r3, [r4, #8]
   35454:	2d00      	cmp	r5, #0
   35456:	f43f af4e 	beq.w	352f6 <ipc_trace_handle+0x62>
   3545a:	2105      	movs	r1, #5
   3545c:	4630      	mov	r0, r6
   3545e:	f8ad 5002 	strh.w	r5, [sp, #2]
   35462:	f00e fd98 	bl	43f96 <bsd_os_trace_put>
   35466:	f8bd 1002 	ldrh.w	r1, [sp, #2]
   3546a:	68e0      	ldr	r0, [r4, #12]
   3546c:	f00e fd93 	bl	43f96 <bsd_os_trace_put>
   35470:	f8bd 2002 	ldrh.w	r2, [sp, #2]
   35474:	68e3      	ldr	r3, [r4, #12]
   35476:	4413      	add	r3, r2
   35478:	60a3      	str	r3, [r4, #8]
   3547a:	e73c      	b.n	352f6 <ipc_trace_handle+0x62>
   3547c:	4a38      	ldr	r2, [pc, #224]	; (35560 <ipc_trace_handle+0x2cc>)
   3547e:	7811      	ldrb	r1, [r2, #0]
   35480:	b109      	cbz	r1, 35486 <ipc_trace_handle+0x1f2>
   35482:	2100      	movs	r1, #0
   35484:	7011      	strb	r1, [r2, #0]
   35486:	68a5      	ldr	r5, [r4, #8]
   35488:	2d00      	cmp	r5, #0
   3548a:	d039      	beq.n	35500 <ipc_trace_handle+0x26c>
   3548c:	f04f 0c00 	mov.w	ip, #0
   35490:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 35568 <ipc_trace_handle+0x2d4>
   35494:	f8df b0cc 	ldr.w	fp, [pc, #204]	; 35564 <ipc_trace_handle+0x2d0>
   35498:	4934      	ldr	r1, [pc, #208]	; (3556c <ipc_trace_handle+0x2d8>)
   3549a:	46e1      	mov	r9, ip
   3549c:	4666      	mov	r6, ip
   3549e:	4662      	mov	r2, ip
   354a0:	f8d1 e000 	ldr.w	lr, [r1]
   354a4:	f8da 8000 	ldr.w	r8, [sl]
   354a8:	f8db 7000 	ldr.w	r7, [fp]
   354ac:	e008      	b.n	354c0 <ipc_trace_handle+0x22c>
   354ae:	2963      	cmp	r1, #99	; 0x63
   354b0:	d016      	beq.n	354e0 <ipc_trace_handle+0x24c>
   354b2:	2961      	cmp	r1, #97	; 0x61
   354b4:	bf04      	itt	eq
   354b6:	4607      	moveq	r7, r0
   354b8:	2601      	moveq	r6, #1
   354ba:	3201      	adds	r2, #1
   354bc:	42aa      	cmp	r2, r5
   354be:	d013      	beq.n	354e8 <ipc_trace_handle+0x254>
   354c0:	1c91      	adds	r1, r2, #2
   354c2:	eb04 0181 	add.w	r1, r4, r1, lsl #2
   354c6:	6848      	ldr	r0, [r1, #4]
   354c8:	7801      	ldrb	r1, [r0, #0]
   354ca:	2962      	cmp	r1, #98	; 0x62
   354cc:	d1ef      	bne.n	354ae <ipc_trace_handle+0x21a>
   354ce:	4680      	mov	r8, r0
   354d0:	f04f 0901 	mov.w	r9, #1
   354d4:	e7f1      	b.n	354ba <ipc_trace_handle+0x226>
   354d6:	f7fa ff6b 	bl	303b0 <bsd_os_trace_irq_set>
   354da:	b003      	add	sp, #12
   354dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   354e0:	4686      	mov	lr, r0
   354e2:	f04f 0c01 	mov.w	ip, #1
   354e6:	e7e8      	b.n	354ba <ipc_trace_handle+0x226>
   354e8:	bba6      	cbnz	r6, 35554 <ipc_trace_handle+0x2c0>
   354ea:	f1b9 0f00 	cmp.w	r9, #0
   354ee:	d001      	beq.n	354f4 <ipc_trace_handle+0x260>
   354f0:	f8ca 8000 	str.w	r8, [sl]
   354f4:	f1bc 0f00 	cmp.w	ip, #0
   354f8:	d002      	beq.n	35500 <ipc_trace_handle+0x26c>
   354fa:	4a1c      	ldr	r2, [pc, #112]	; (3556c <ipc_trace_handle+0x2d8>)
   354fc:	f8c2 e000 	str.w	lr, [r2]
   35500:	2001      	movs	r0, #1
   35502:	2200      	movs	r2, #0
   35504:	f06f 015f 	mvn.w	r1, #95	; 0x5f
   35508:	e6ed      	b.n	352e6 <ipc_trace_handle+0x52>
   3550a:	2105      	movs	r1, #5
   3550c:	4630      	mov	r0, r6
   3550e:	f8ad 5002 	strh.w	r5, [sp, #2]
   35512:	f00e fd40 	bl	43f96 <bsd_os_trace_put>
   35516:	f8bd 1002 	ldrh.w	r1, [sp, #2]
   3551a:	68e0      	ldr	r0, [r4, #12]
   3551c:	f00e fd3b 	bl	43f96 <bsd_os_trace_put>
   35520:	f8bd 2002 	ldrh.w	r2, [sp, #2]
   35524:	68e3      	ldr	r3, [r4, #12]
   35526:	4413      	add	r3, r2
   35528:	60a3      	str	r3, [r4, #8]
   3552a:	e761      	b.n	353f0 <ipc_trace_handle+0x15c>
   3552c:	2105      	movs	r1, #5
   3552e:	4630      	mov	r0, r6
   35530:	f8ad 5002 	strh.w	r5, [sp, #2]
   35534:	f00e fd2f 	bl	43f96 <bsd_os_trace_put>
   35538:	f8bd 1002 	ldrh.w	r1, [sp, #2]
   3553c:	68e0      	ldr	r0, [r4, #12]
   3553e:	f00e fd2a 	bl	43f96 <bsd_os_trace_put>
   35542:	f8bd 2002 	ldrh.w	r2, [sp, #2]
   35546:	68e3      	ldr	r3, [r4, #12]
   35548:	4413      	add	r3, r2
   3554a:	60a3      	str	r3, [r4, #8]
   3554c:	e71c      	b.n	35388 <ipc_trace_handle+0xf4>
   3554e:	f7fa ff37 	bl	303c0 <bsd_os_trace_irq_clear>
   35552:	e6e5      	b.n	35320 <ipc_trace_handle+0x8c>
   35554:	f8cb 7000 	str.w	r7, [fp]
   35558:	e7c7      	b.n	354ea <ipc_trace_handle+0x256>
   3555a:	bf00      	nop
   3555c:	20025194 	.word	0x20025194
   35560:	2002b4e7 	.word	0x2002b4e7
   35564:	20025190 	.word	0x20025190
   35568:	20025188 	.word	0x20025188
   3556c:	2002518c 	.word	0x2002518c

00035570 <rpc_trace_coredump_in_progress>:
   35570:	4b01      	ldr	r3, [pc, #4]	; (35578 <rpc_trace_coredump_in_progress+0x8>)
   35572:	7818      	ldrb	r0, [r3, #0]
   35574:	4770      	bx	lr
   35576:	bf00      	nop
   35578:	2002b4e7 	.word	0x2002b4e7

0003557c <transport_reset>:
   3557c:	2000      	movs	r0, #0
   3557e:	4770      	bx	lr

00035580 <transport_data_free>:
   35580:	4b0b      	ldr	r3, [pc, #44]	; (355b0 <transport_data_free+0x30>)
   35582:	e9d3 2300 	ldrd	r2, r3, [r3]
   35586:	4413      	add	r3, r2
   35588:	4298      	cmp	r0, r3
   3558a:	d20d      	bcs.n	355a8 <transport_data_free+0x28>
   3558c:	4282      	cmp	r2, r0
   3558e:	d80b      	bhi.n	355a8 <transport_data_free+0x28>
   35590:	b510      	push	{r4, lr}
   35592:	4604      	mov	r4, r0
   35594:	f000 fd5a 	bl	3604c <rpc_transport_ipc_tx_rpc_ctrl_alloc>
   35598:	b140      	cbz	r0, 355ac <transport_data_free+0x2c>
   3559a:	4a06      	ldr	r2, [pc, #24]	; (355b4 <transport_data_free+0x34>)
   3559c:	6084      	str	r4, [r0, #8]
   3559e:	6002      	str	r2, [r0, #0]
   355a0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   355a4:	f000 bc9a 	b.w	35edc <rpc_transport_ipc_tx_send>
   355a8:	f7fe bbc4 	b.w	33d34 <nrf_shared_free>
   355ac:	bd10      	pop	{r4, pc}
   355ae:	bf00      	nop
   355b0:	20025198 	.word	0x20025198
   355b4:	00020001 	.word	0x00020001

000355b8 <rpc_transport_ipc_init>:
   355b8:	2800      	cmp	r0, #0
   355ba:	d02b      	beq.n	35614 <rpc_transport_ipc_init+0x5c>
   355bc:	b530      	push	{r4, r5, lr}
   355be:	b089      	sub	sp, #36	; 0x24
   355c0:	aa01      	add	r2, sp, #4
   355c2:	4669      	mov	r1, sp
   355c4:	4604      	mov	r4, r0
   355c6:	f000 fb9f 	bl	35d08 <rpc_transport_ipc_tx_init>
   355ca:	4603      	mov	r3, r0
   355cc:	b140      	cbz	r0, 355e0 <rpc_transport_ipc_init+0x28>
   355ce:	4a13      	ldr	r2, [pc, #76]	; (3561c <rpc_transport_ipc_init+0x64>)
   355d0:	f104 0028 	add.w	r0, r4, #40	; 0x28
   355d4:	c803      	ldmia	r0, {r0, r1}
   355d6:	e882 0003 	stmia.w	r2, {r0, r1}
   355da:	4618      	mov	r0, r3
   355dc:	b009      	add	sp, #36	; 0x24
   355de:	bd30      	pop	{r4, r5, pc}
   355e0:	e9dd 1200 	ldrd	r1, r2, [sp]
   355e4:	4620      	mov	r0, r4
   355e6:	f000 f84b 	bl	35680 <rpc_transport_ipc_rx_init>
   355ea:	4603      	mov	r3, r0
   355ec:	2800      	cmp	r0, #0
   355ee:	d1ee      	bne.n	355ce <rpc_transport_ipc_init+0x16>
   355f0:	4b0b      	ldr	r3, [pc, #44]	; (35620 <rpc_transport_ipc_init+0x68>)
   355f2:	490c      	ldr	r1, [pc, #48]	; (35624 <rpc_transport_ipc_init+0x6c>)
   355f4:	480c      	ldr	r0, [pc, #48]	; (35628 <rpc_transport_ipc_init+0x70>)
   355f6:	4a0d      	ldr	r2, [pc, #52]	; (3562c <rpc_transport_ipc_init+0x74>)
   355f8:	9303      	str	r3, [sp, #12]
   355fa:	4d0d      	ldr	r5, [pc, #52]	; (35630 <rpc_transport_ipc_init+0x78>)
   355fc:	4b0d      	ldr	r3, [pc, #52]	; (35634 <rpc_transport_ipc_init+0x7c>)
   355fe:	9104      	str	r1, [sp, #16]
   35600:	9005      	str	r0, [sp, #20]
   35602:	490d      	ldr	r1, [pc, #52]	; (35638 <rpc_transport_ipc_init+0x80>)
   35604:	a802      	add	r0, sp, #8
   35606:	9307      	str	r3, [sp, #28]
   35608:	9506      	str	r5, [sp, #24]
   3560a:	9202      	str	r2, [sp, #8]
   3560c:	f003 ff44 	bl	39498 <rpc_transport_register>
   35610:	4603      	mov	r3, r0
   35612:	e7dc      	b.n	355ce <rpc_transport_ipc_init+0x16>
   35614:	230e      	movs	r3, #14
   35616:	4618      	mov	r0, r3
   35618:	4770      	bx	lr
   3561a:	bf00      	nop
   3561c:	20025198 	.word	0x20025198
   35620:	00035fdd 	.word	0x00035fdd
   35624:	000360ad 	.word	0x000360ad
   35628:	00035c9d 	.word	0x00035c9d
   3562c:	00035edd 	.word	0x00035edd
   35630:	00035581 	.word	0x00035581
   35634:	0003557d 	.word	0x0003557d
   35638:	200251a0 	.word	0x200251a0

0003563c <rpc_transport_rx_handle>:
   3563c:	b160      	cbz	r0, 35658 <rpc_transport_rx_handle+0x1c>
   3563e:	b508      	push	{r3, lr}
   35640:	6843      	ldr	r3, [r0, #4]
   35642:	b2db      	uxtb	r3, r3
   35644:	2b02      	cmp	r3, #2
   35646:	d00e      	beq.n	35666 <rpc_transport_rx_handle+0x2a>
   35648:	6803      	ldr	r3, [r0, #0]
   3564a:	0c1b      	lsrs	r3, r3, #16
   3564c:	2b02      	cmp	r3, #2
   3564e:	d005      	beq.n	3565c <rpc_transport_rx_handle+0x20>
   35650:	2b04      	cmp	r3, #4
   35652:	d00e      	beq.n	35672 <rpc_transport_rx_handle+0x36>
   35654:	2000      	movs	r0, #0
   35656:	bd08      	pop	{r3, pc}
   35658:	2000      	movs	r0, #0
   3565a:	4770      	bx	lr
   3565c:	6880      	ldr	r0, [r0, #8]
   3565e:	f7fe fb69 	bl	33d34 <nrf_shared_free>
   35662:	2000      	movs	r0, #0
   35664:	bd08      	pop	{r3, pc}
   35666:	4601      	mov	r1, r0
   35668:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   3566c:	4803      	ldr	r0, [pc, #12]	; (3567c <rpc_transport_rx_handle+0x40>)
   3566e:	f003 be05 	b.w	3927c <rpc_transport_input>
   35672:	4802      	ldr	r0, [pc, #8]	; (3567c <rpc_transport_rx_handle+0x40>)
   35674:	f003 ff70 	bl	39558 <rpc_transport_unregister>
   35678:	2000      	movs	r0, #0
   3567a:	bd08      	pop	{r3, pc}
   3567c:	200251a0 	.word	0x200251a0

00035680 <rpc_transport_ipc_rx_init>:
   35680:	2800      	cmp	r0, #0
   35682:	f000 80ff 	beq.w	35884 <rpc_transport_ipc_rx_init+0x204>
   35686:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   3568a:	6805      	ldr	r5, [r0, #0]
   3568c:	b095      	sub	sp, #84	; 0x54
   3568e:	2d00      	cmp	r5, #0
   35690:	f000 80ee 	beq.w	35870 <rpc_transport_ipc_rx_init+0x1f0>
   35694:	6883      	ldr	r3, [r0, #8]
   35696:	2b00      	cmp	r3, #0
   35698:	f000 80ea 	beq.w	35870 <rpc_transport_ipc_rx_init+0x1f0>
   3569c:	6907      	ldr	r7, [r0, #16]
   3569e:	2f00      	cmp	r7, #0
   356a0:	f000 80e6 	beq.w	35870 <rpc_transport_ipc_rx_init+0x1f0>
   356a4:	6a84      	ldr	r4, [r0, #40]	; 0x28
   356a6:	2c00      	cmp	r4, #0
   356a8:	f000 80e2 	beq.w	35870 <rpc_transport_ipc_rx_init+0x1f0>
   356ac:	6844      	ldr	r4, [r0, #4]
   356ae:	2c1b      	cmp	r4, #27
   356b0:	f240 80e3 	bls.w	3587a <rpc_transport_ipc_rx_init+0x1fa>
   356b4:	68c4      	ldr	r4, [r0, #12]
   356b6:	2c0b      	cmp	r4, #11
   356b8:	f240 80df 	bls.w	3587a <rpc_transport_ipc_rx_init+0x1fa>
   356bc:	f8d0 e014 	ldr.w	lr, [r0, #20]
   356c0:	f1be 0f17 	cmp.w	lr, #23
   356c4:	f240 80d9 	bls.w	3587a <rpc_transport_ipc_rx_init+0x1fa>
   356c8:	2600      	movs	r6, #0
   356ca:	4604      	mov	r4, r0
   356cc:	486f      	ldr	r0, [pc, #444]	; (3588c <rpc_transport_ipc_rx_init+0x20c>)
   356ce:	e9cd 1200 	strd	r1, r2, [sp]
   356d2:	f8df a1d8 	ldr.w	sl, [pc, #472]	; 358ac <rpc_transport_ipc_rx_init+0x22c>
   356d6:	496e      	ldr	r1, [pc, #440]	; (35890 <rpc_transport_ipc_rx_init+0x210>)
   356d8:	8006      	strh	r6, [r0, #0]
   356da:	6ba0      	ldr	r0, [r4, #56]	; 0x38
   356dc:	f8df c1d0 	ldr.w	ip, [pc, #464]	; 358b0 <rpc_transport_ipc_rx_init+0x230>
   356e0:	f8df 81d0 	ldr.w	r8, [pc, #464]	; 358b4 <rpc_transport_ipc_rx_init+0x234>
   356e4:	f8df b1d0 	ldr.w	fp, [pc, #464]	; 358b8 <rpc_transport_ipc_rx_init+0x238>
   356e8:	f8df 91d0 	ldr.w	r9, [pc, #464]	; 358bc <rpc_transport_ipc_rx_init+0x23c>
   356ec:	4672      	mov	r2, lr
   356ee:	600e      	str	r6, [r1, #0]
   356f0:	f8ca 0000 	str.w	r0, [sl]
   356f4:	4631      	mov	r1, r6
   356f6:	4638      	mov	r0, r7
   356f8:	f8cc 6000 	str.w	r6, [ip]
   356fc:	f8cb 3000 	str.w	r3, [fp]
   35700:	f8c8 6000 	str.w	r6, [r8]
   35704:	f8c9 6000 	str.w	r6, [r9]
   35708:	f00f fbdc 	bl	44ec4 <memset>
   3570c:	69e3      	ldr	r3, [r4, #28]
   3570e:	4638      	mov	r0, r7
   35710:	603b      	str	r3, [r7, #0]
   35712:	69a3      	ldr	r3, [r4, #24]
   35714:	607b      	str	r3, [r7, #4]
   35716:	f7ff fcd5 	bl	350c4 <ipc_trace_init>
   3571a:	2201      	movs	r2, #1
   3571c:	f04f 0c04 	mov.w	ip, #4
   35720:	4b5c      	ldr	r3, [pc, #368]	; (35894 <rpc_transport_ipc_rx_init+0x214>)
   35722:	495d      	ldr	r1, [pc, #372]	; (35898 <rpc_transport_ipc_rx_init+0x218>)
   35724:	f8c3 5610 	str.w	r5, [r3, #1552]	; 0x610
   35728:	6809      	ldr	r1, [r1, #0]
   3572a:	2080      	movs	r0, #128	; 0x80
   3572c:	9104      	str	r1, [sp, #16]
   3572e:	495b      	ldr	r1, [pc, #364]	; (3589c <rpc_transport_ipc_rx_init+0x21c>)
   35730:	f8dd e010 	ldr.w	lr, [sp, #16]
   35734:	f8c3 6614 	str.w	r6, [r3, #1556]	; 0x614
   35738:	6809      	ldr	r1, [r1, #0]
   3573a:	702e      	strb	r6, [r5, #0]
   3573c:	9103      	str	r1, [sp, #12]
   3573e:	706e      	strb	r6, [r5, #1]
   35740:	70ee      	strb	r6, [r5, #3]
   35742:	70aa      	strb	r2, [r5, #2]
   35744:	9903      	ldr	r1, [sp, #12]
   35746:	6aa1      	ldr	r1, [r4, #40]	; 0x28
   35748:	f8db e000 	ldr.w	lr, [fp]
   3574c:	6069      	str	r1, [r5, #4]
   3574e:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
   35750:	9c01      	ldr	r4, [sp, #4]
   35752:	60a9      	str	r1, [r5, #8]
   35754:	60ec      	str	r4, [r5, #12]
   35756:	9c00      	ldr	r4, [sp, #0]
   35758:	4951      	ldr	r1, [pc, #324]	; (358a0 <rpc_transport_ipc_rx_init+0x220>)
   3575a:	61af      	str	r7, [r5, #24]
   3575c:	f8c5 e014 	str.w	lr, [r5, #20]
   35760:	612c      	str	r4, [r5, #16]
   35762:	f8c3 2590 	str.w	r2, [r3, #1424]	; 0x590
   35766:	680c      	ldr	r4, [r1, #0]
   35768:	f5a1 6192 	sub.w	r1, r1, #1168	; 0x490
   3576c:	9405      	str	r4, [sp, #20]
   3576e:	9c05      	ldr	r4, [sp, #20]
   35770:	f8c3 c598 	str.w	ip, [r3, #1432]	; 0x598
   35774:	f8d1 4498 	ldr.w	r4, [r1, #1176]	; 0x498
   35778:	f44f 6780 	mov.w	r7, #1024	; 0x400
   3577c:	9406      	str	r4, [sp, #24]
   3577e:	9c06      	ldr	r4, [sp, #24]
   35780:	2410      	movs	r4, #16
   35782:	f8c3 45a0 	str.w	r4, [r3, #1440]	; 0x5a0
   35786:	f8d1 44a0 	ldr.w	r4, [r1, #1184]	; 0x4a0
   3578a:	4d46      	ldr	r5, [pc, #280]	; (358a4 <rpc_transport_ipc_rx_init+0x224>)
   3578c:	9407      	str	r4, [sp, #28]
   3578e:	9c07      	ldr	r4, [sp, #28]
   35790:	2440      	movs	r4, #64	; 0x40
   35792:	f8c3 45a8 	str.w	r4, [r3, #1448]	; 0x5a8
   35796:	f8d1 44a8 	ldr.w	r4, [r1, #1192]	; 0x4a8
   3579a:	9408      	str	r4, [sp, #32]
   3579c:	9c08      	ldr	r4, [sp, #32]
   3579e:	f8c3 05ac 	str.w	r0, [r3, #1452]	; 0x5ac
   357a2:	f8d1 04ac 	ldr.w	r0, [r1, #1196]	; 0x4ac
   357a6:	9009      	str	r0, [sp, #36]	; 0x24
   357a8:	9809      	ldr	r0, [sp, #36]	; 0x24
   357aa:	f8c3 6100 	str.w	r6, [r3, #256]	; 0x100
   357ae:	6808      	ldr	r0, [r1, #0]
   357b0:	900a      	str	r0, [sp, #40]	; 0x28
   357b2:	980a      	ldr	r0, [sp, #40]	; 0x28
   357b4:	f8c3 6108 	str.w	r6, [r3, #264]	; 0x108
   357b8:	6888      	ldr	r0, [r1, #8]
   357ba:	900b      	str	r0, [sp, #44]	; 0x2c
   357bc:	980b      	ldr	r0, [sp, #44]	; 0x2c
   357be:	f8c3 6110 	str.w	r6, [r3, #272]	; 0x110
   357c2:	6908      	ldr	r0, [r1, #16]
   357c4:	900c      	str	r0, [sp, #48]	; 0x30
   357c6:	980c      	ldr	r0, [sp, #48]	; 0x30
   357c8:	f8c3 6118 	str.w	r6, [r3, #280]	; 0x118
   357cc:	6988      	ldr	r0, [r1, #24]
   357ce:	900d      	str	r0, [sp, #52]	; 0x34
   357d0:	980d      	ldr	r0, [sp, #52]	; 0x34
   357d2:	f8c3 611c 	str.w	r6, [r3, #284]	; 0x11c
   357d6:	69c8      	ldr	r0, [r1, #28]
   357d8:	f501 7101 	add.w	r1, r1, #516	; 0x204
   357dc:	900e      	str	r0, [sp, #56]	; 0x38
   357de:	980e      	ldr	r0, [sp, #56]	; 0x38
   357e0:	f8d3 0304 	ldr.w	r0, [r3, #772]	; 0x304
   357e4:	4310      	orrs	r0, r2
   357e6:	f8c3 0304 	str.w	r0, [r3, #772]	; 0x304
   357ea:	680c      	ldr	r4, [r1, #0]
   357ec:	482e      	ldr	r0, [pc, #184]	; (358a8 <rpc_transport_ipc_rx_init+0x228>)
   357ee:	940f      	str	r4, [sp, #60]	; 0x3c
   357f0:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
   357f2:	f8d3 4304 	ldr.w	r4, [r3, #772]	; 0x304
   357f6:	ea44 040c 	orr.w	r4, r4, ip
   357fa:	f8c3 4304 	str.w	r4, [r3, #772]	; 0x304
   357fe:	680c      	ldr	r4, [r1, #0]
   35800:	9410      	str	r4, [sp, #64]	; 0x40
   35802:	9c10      	ldr	r4, [sp, #64]	; 0x40
   35804:	f8d3 4304 	ldr.w	r4, [r3, #772]	; 0x304
   35808:	f044 0410 	orr.w	r4, r4, #16
   3580c:	f8c3 4304 	str.w	r4, [r3, #772]	; 0x304
   35810:	680c      	ldr	r4, [r1, #0]
   35812:	9411      	str	r4, [sp, #68]	; 0x44
   35814:	9c11      	ldr	r4, [sp, #68]	; 0x44
   35816:	f8d3 4304 	ldr.w	r4, [r3, #772]	; 0x304
   3581a:	f044 0440 	orr.w	r4, r4, #64	; 0x40
   3581e:	f8c3 4304 	str.w	r4, [r3, #772]	; 0x304
   35822:	680c      	ldr	r4, [r1, #0]
   35824:	9412      	str	r4, [sp, #72]	; 0x48
   35826:	9c12      	ldr	r4, [sp, #72]	; 0x48
   35828:	f8d3 4304 	ldr.w	r4, [r3, #772]	; 0x304
   3582c:	f044 0480 	orr.w	r4, r4, #128	; 0x80
   35830:	f8c3 4304 	str.w	r4, [r3, #772]	; 0x304
   35834:	f8da 3000 	ldr.w	r3, [sl]
   35838:	6809      	ldr	r1, [r1, #0]
   3583a:	015b      	lsls	r3, r3, #5
   3583c:	9113      	str	r1, [sp, #76]	; 0x4c
   3583e:	b2db      	uxtb	r3, r3
   35840:	9913      	ldr	r1, [sp, #76]	; 0x4c
   35842:	f8c8 2000 	str.w	r2, [r8]
   35846:	f880 332a 	strb.w	r3, [r0, #810]	; 0x32a
   3584a:	f8c0 7184 	str.w	r7, [r0, #388]	; 0x184
   3584e:	6047      	str	r7, [r0, #4]
   35850:	9602      	str	r6, [sp, #8]
   35852:	f8c5 6610 	str.w	r6, [r5, #1552]	; 0x610
   35856:	f8d5 3610 	ldr.w	r3, [r5, #1552]	; 0x610
   3585a:	9302      	str	r3, [sp, #8]
   3585c:	9b02      	ldr	r3, [sp, #8]
   3585e:	f8d8 3000 	ldr.w	r3, [r8]
   35862:	2b01      	cmp	r3, #1
   35864:	d0fb      	beq.n	3585e <rpc_transport_ipc_rx_init+0x1de>
   35866:	f8d9 0000 	ldr.w	r0, [r9]
   3586a:	b015      	add	sp, #84	; 0x54
   3586c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   35870:	f24c 000e 	movw	r0, #49166	; 0xc00e
   35874:	b015      	add	sp, #84	; 0x54
   35876:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3587a:	f24c 0009 	movw	r0, #49161	; 0xc009
   3587e:	b015      	add	sp, #84	; 0x54
   35880:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   35884:	f24c 000e 	movw	r0, #49166	; 0xc00e
   35888:	4770      	bx	lr
   3588a:	bf00      	nop
   3588c:	2002984a 	.word	0x2002984a
   35890:	200251b0 	.word	0x200251b0
   35894:	4002a000 	.word	0x4002a000
   35898:	4002a610 	.word	0x4002a610
   3589c:	4002a614 	.word	0x4002a614
   358a0:	4002a590 	.word	0x4002a590
   358a4:	40005000 	.word	0x40005000
   358a8:	e000e100 	.word	0xe000e100
   358ac:	200251a8 	.word	0x200251a8
   358b0:	200251b4 	.word	0x200251b4
   358b4:	200251ac 	.word	0x200251ac
   358b8:	200251b8 	.word	0x200251b8
   358bc:	200251a4 	.word	0x200251a4

000358c0 <IPC_IRQHandler>:
   358c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   358c4:	f44f 6580 	mov.w	r5, #1024	; 0x400
   358c8:	4ca7      	ldr	r4, [pc, #668]	; (35b68 <IPC_IRQHandler+0x2a8>)
   358ca:	b087      	sub	sp, #28
   358cc:	f8c4 5084 	str.w	r5, [r4, #132]	; 0x84
   358d0:	f3bf 8f4f 	dsb	sy
   358d4:	f3bf 8f6f 	isb	sy
   358d8:	4ea4      	ldr	r6, [pc, #656]	; (35b6c <IPC_IRQHandler+0x2ac>)
   358da:	f8c4 5184 	str.w	r5, [r4, #388]	; 0x184
   358de:	f8d6 330c 	ldr.w	r3, [r6, #780]	; 0x30c
   358e2:	061f      	lsls	r7, r3, #24
   358e4:	f100 80c8 	bmi.w	35a78 <IPC_IRQHandler+0x1b8>
   358e8:	4ba0      	ldr	r3, [pc, #640]	; (35b6c <IPC_IRQHandler+0x2ac>)
   358ea:	f8d3 230c 	ldr.w	r2, [r3, #780]	; 0x30c
   358ee:	07d0      	lsls	r0, r2, #31
   358f0:	f100 80d4 	bmi.w	35a9c <IPC_IRQHandler+0x1dc>
   358f4:	f8d3 230c 	ldr.w	r2, [r3, #780]	; 0x30c
   358f8:	f012 0240 	ands.w	r2, r2, #64	; 0x40
   358fc:	f040 80b6 	bne.w	35a6c <IPC_IRQHandler+0x1ac>
   35900:	f8d3 130c 	ldr.w	r1, [r3, #780]	; 0x30c
   35904:	0749      	lsls	r1, r1, #29
   35906:	f100 80e6 	bmi.w	35ad6 <IPC_IRQHandler+0x216>
   3590a:	f8d3 330c 	ldr.w	r3, [r3, #780]	; 0x30c
   3590e:	06da      	lsls	r2, r3, #27
   35910:	f140 809d 	bpl.w	35a4e <IPC_IRQHandler+0x18e>
   35914:	2100      	movs	r1, #0
   35916:	4a95      	ldr	r2, [pc, #596]	; (35b6c <IPC_IRQHandler+0x2ac>)
   35918:	4b95      	ldr	r3, [pc, #596]	; (35b70 <IPC_IRQHandler+0x2b0>)
   3591a:	f8c2 1110 	str.w	r1, [r2, #272]	; 0x110
   3591e:	681b      	ldr	r3, [r3, #0]
   35920:	9304      	str	r3, [sp, #16]
   35922:	9b04      	ldr	r3, [sp, #16]
   35924:	f8df 8270 	ldr.w	r8, [pc, #624]	; 35b98 <IPC_IRQHandler+0x2d8>
   35928:	4f92      	ldr	r7, [pc, #584]	; (35b74 <IPC_IRQHandler+0x2b4>)
   3592a:	f8df 9270 	ldr.w	r9, [pc, #624]	; 35b9c <IPC_IRQHandler+0x2dc>
   3592e:	f8d8 a000 	ldr.w	sl, [r8]
   35932:	f8da 1000 	ldr.w	r1, [sl]
   35936:	2900      	cmp	r1, #0
   35938:	d03f      	beq.n	359ba <IPC_IRQHandler+0xfa>
   3593a:	2200      	movs	r2, #0
   3593c:	4614      	mov	r4, r2
   3593e:	e002      	b.n	35946 <IPC_IRQHandler+0x86>
   35940:	3401      	adds	r4, #1
   35942:	428c      	cmp	r4, r1
   35944:	d227      	bcs.n	35996 <IPC_IRQHandler+0xd6>
   35946:	eb0a 05c4 	add.w	r5, sl, r4, lsl #3
   3594a:	68ab      	ldr	r3, [r5, #8]
   3594c:	2b00      	cmp	r3, #0
   3594e:	d0f7      	beq.n	35940 <IPC_IRQHandler+0x80>
   35950:	686e      	ldr	r6, [r5, #4]
   35952:	b2f6      	uxtb	r6, r6
   35954:	2e01      	cmp	r6, #1
   35956:	d1f3      	bne.n	35940 <IPC_IRQHandler+0x80>
   35958:	6868      	ldr	r0, [r5, #4]
   3595a:	f8b9 3000 	ldrh.w	r3, [r9]
   3595e:	ebb3 4f10 	cmp.w	r3, r0, lsr #16
   35962:	d1ed      	bne.n	35940 <IPC_IRQHandler+0x80>
   35964:	686a      	ldr	r2, [r5, #4]
   35966:	3301      	adds	r3, #1
   35968:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
   3596c:	f042 0202 	orr.w	r2, r2, #2
   35970:	606a      	str	r2, [r5, #4]
   35972:	68a8      	ldr	r0, [r5, #8]
   35974:	f8a9 3000 	strh.w	r3, [r9]
   35978:	f7ff fe60 	bl	3563c <rpc_transport_rx_handle>
   3597c:	4632      	mov	r2, r6
   3597e:	b928      	cbnz	r0, 3598c <IPC_IRQHandler+0xcc>
   35980:	686b      	ldr	r3, [r5, #4]
   35982:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
   35986:	f043 0303 	orr.w	r3, r3, #3
   3598a:	606b      	str	r3, [r5, #4]
   3598c:	f8da 1000 	ldr.w	r1, [sl]
   35990:	3401      	adds	r4, #1
   35992:	428c      	cmp	r4, r1
   35994:	d3d7      	bcc.n	35946 <IPC_IRQHandler+0x86>
   35996:	2a00      	cmp	r2, #0
   35998:	d1cd      	bne.n	35936 <IPC_IRQHandler+0x76>
   3599a:	b171      	cbz	r1, 359ba <IPC_IRQHandler+0xfa>
   3599c:	4613      	mov	r3, r2
   3599e:	eb0a 02c3 	add.w	r2, sl, r3, lsl #3
   359a2:	6890      	ldr	r0, [r2, #8]
   359a4:	3301      	adds	r3, #1
   359a6:	b130      	cbz	r0, 359b6 <IPC_IRQHandler+0xf6>
   359a8:	f8d2 b004 	ldr.w	fp, [r2, #4]
   359ac:	fa5f fb8b 	uxtb.w	fp, fp
   359b0:	f1bb 0f01 	cmp.w	fp, #1
   359b4:	d003      	beq.n	359be <IPC_IRQHandler+0xfe>
   359b6:	428b      	cmp	r3, r1
   359b8:	d1f1      	bne.n	3599e <IPC_IRQHandler+0xde>
   359ba:	f04f 0b00 	mov.w	fp, #0
   359be:	f8d7 a000 	ldr.w	sl, [r7]
   359c2:	f8da 2000 	ldr.w	r2, [sl]
   359c6:	2a00      	cmp	r2, #0
   359c8:	d03d      	beq.n	35a46 <IPC_IRQHandler+0x186>
   359ca:	2100      	movs	r1, #0
   359cc:	460c      	mov	r4, r1
   359ce:	e002      	b.n	359d6 <IPC_IRQHandler+0x116>
   359d0:	3401      	adds	r4, #1
   359d2:	4294      	cmp	r4, r2
   359d4:	d227      	bcs.n	35a26 <IPC_IRQHandler+0x166>
   359d6:	eb0a 05c4 	add.w	r5, sl, r4, lsl #3
   359da:	68ab      	ldr	r3, [r5, #8]
   359dc:	2b00      	cmp	r3, #0
   359de:	d0f7      	beq.n	359d0 <IPC_IRQHandler+0x110>
   359e0:	686e      	ldr	r6, [r5, #4]
   359e2:	b2f6      	uxtb	r6, r6
   359e4:	2e01      	cmp	r6, #1
   359e6:	d1f3      	bne.n	359d0 <IPC_IRQHandler+0x110>
   359e8:	6868      	ldr	r0, [r5, #4]
   359ea:	f8b9 3000 	ldrh.w	r3, [r9]
   359ee:	ebb3 4f10 	cmp.w	r3, r0, lsr #16
   359f2:	d1ed      	bne.n	359d0 <IPC_IRQHandler+0x110>
   359f4:	686a      	ldr	r2, [r5, #4]
   359f6:	3301      	adds	r3, #1
   359f8:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
   359fc:	f042 0202 	orr.w	r2, r2, #2
   35a00:	606a      	str	r2, [r5, #4]
   35a02:	68a8      	ldr	r0, [r5, #8]
   35a04:	f8a9 3000 	strh.w	r3, [r9]
   35a08:	f7ff fe18 	bl	3563c <rpc_transport_rx_handle>
   35a0c:	4631      	mov	r1, r6
   35a0e:	b928      	cbnz	r0, 35a1c <IPC_IRQHandler+0x15c>
   35a10:	686a      	ldr	r2, [r5, #4]
   35a12:	f022 03ff 	bic.w	r3, r2, #255	; 0xff
   35a16:	f043 0303 	orr.w	r3, r3, #3
   35a1a:	606b      	str	r3, [r5, #4]
   35a1c:	f8da 2000 	ldr.w	r2, [sl]
   35a20:	3401      	adds	r4, #1
   35a22:	4294      	cmp	r4, r2
   35a24:	d3d7      	bcc.n	359d6 <IPC_IRQHandler+0x116>
   35a26:	2900      	cmp	r1, #0
   35a28:	d1cd      	bne.n	359c6 <IPC_IRQHandler+0x106>
   35a2a:	b162      	cbz	r2, 35a46 <IPC_IRQHandler+0x186>
   35a2c:	460b      	mov	r3, r1
   35a2e:	eb0a 01c3 	add.w	r1, sl, r3, lsl #3
   35a32:	6888      	ldr	r0, [r1, #8]
   35a34:	3301      	adds	r3, #1
   35a36:	b120      	cbz	r0, 35a42 <IPC_IRQHandler+0x182>
   35a38:	6849      	ldr	r1, [r1, #4]
   35a3a:	b2c9      	uxtb	r1, r1
   35a3c:	2901      	cmp	r1, #1
   35a3e:	f43f af76 	beq.w	3592e <IPC_IRQHandler+0x6e>
   35a42:	4293      	cmp	r3, r2
   35a44:	d1f3      	bne.n	35a2e <IPC_IRQHandler+0x16e>
   35a46:	f1bb 0f00 	cmp.w	fp, #0
   35a4a:	f47f af70 	bne.w	3592e <IPC_IRQHandler+0x6e>
   35a4e:	f44f 6180 	mov.w	r1, #1024	; 0x400
   35a52:	4b49      	ldr	r3, [pc, #292]	; (35b78 <IPC_IRQHandler+0x2b8>)
   35a54:	4a44      	ldr	r2, [pc, #272]	; (35b68 <IPC_IRQHandler+0x2a8>)
   35a56:	681b      	ldr	r3, [r3, #0]
   35a58:	015b      	lsls	r3, r3, #5
   35a5a:	b2db      	uxtb	r3, r3
   35a5c:	f882 332a 	strb.w	r3, [r2, #810]	; 0x32a
   35a60:	f8c2 1184 	str.w	r1, [r2, #388]	; 0x184
   35a64:	6051      	str	r1, [r2, #4]
   35a66:	b007      	add	sp, #28
   35a68:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   35a6c:	2206      	movs	r2, #6
   35a6e:	4b43      	ldr	r3, [pc, #268]	; (35b7c <IPC_IRQHandler+0x2bc>)
   35a70:	601a      	str	r2, [r3, #0]
   35a72:	b007      	add	sp, #28
   35a74:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   35a78:	f7ff fc0c 	bl	35294 <ipc_trace_handle>
   35a7c:	f7ff fd78 	bl	35570 <rpc_trace_coredump_in_progress>
   35a80:	2800      	cmp	r0, #0
   35a82:	d149      	bne.n	35b18 <IPC_IRQHandler+0x258>
   35a84:	4b3e      	ldr	r3, [pc, #248]	; (35b80 <IPC_IRQHandler+0x2c0>)
   35a86:	f8c6 011c 	str.w	r0, [r6, #284]	; 0x11c
   35a8a:	681b      	ldr	r3, [r3, #0]
   35a8c:	9301      	str	r3, [sp, #4]
   35a8e:	9b01      	ldr	r3, [sp, #4]
   35a90:	4b36      	ldr	r3, [pc, #216]	; (35b6c <IPC_IRQHandler+0x2ac>)
   35a92:	f8d3 230c 	ldr.w	r2, [r3, #780]	; 0x30c
   35a96:	07d0      	lsls	r0, r2, #31
   35a98:	f57f af2c 	bpl.w	358f4 <IPC_IRQHandler+0x34>
   35a9c:	2000      	movs	r0, #0
   35a9e:	f248 0202 	movw	r2, #32770	; 0x8002
   35aa2:	4938      	ldr	r1, [pc, #224]	; (35b84 <IPC_IRQHandler+0x2c4>)
   35aa4:	f8c3 0100 	str.w	r0, [r3, #256]	; 0x100
   35aa8:	6809      	ldr	r1, [r1, #0]
   35aaa:	9102      	str	r1, [sp, #8]
   35aac:	9902      	ldr	r1, [sp, #8]
   35aae:	f8d3 3614 	ldr.w	r3, [r3, #1556]	; 0x614
   35ab2:	4293      	cmp	r3, r2
   35ab4:	d040      	beq.n	35b38 <IPC_IRQHandler+0x278>
   35ab6:	d81e      	bhi.n	35af6 <IPC_IRQHandler+0x236>
   35ab8:	2b00      	cmp	r3, #0
   35aba:	d04f      	beq.n	35b5c <IPC_IRQHandler+0x29c>
   35abc:	2b02      	cmp	r3, #2
   35abe:	d942      	bls.n	35b46 <IPC_IRQHandler+0x286>
   35ac0:	f248 0201 	movw	r2, #32769	; 0x8001
   35ac4:	4293      	cmp	r3, r2
   35ac6:	d149      	bne.n	35b5c <IPC_IRQHandler+0x29c>
   35ac8:	2003      	movs	r0, #3
   35aca:	2207      	movs	r2, #7
   35acc:	492b      	ldr	r1, [pc, #172]	; (35b7c <IPC_IRQHandler+0x2bc>)
   35ace:	4b2e      	ldr	r3, [pc, #184]	; (35b88 <IPC_IRQHandler+0x2c8>)
   35ad0:	6008      	str	r0, [r1, #0]
   35ad2:	601a      	str	r2, [r3, #0]
   35ad4:	e7cd      	b.n	35a72 <IPC_IRQHandler+0x1b2>
   35ad6:	4d29      	ldr	r5, [pc, #164]	; (35b7c <IPC_IRQHandler+0x2bc>)
   35ad8:	6829      	ldr	r1, [r5, #0]
   35ada:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
   35ade:	2901      	cmp	r1, #1
   35ae0:	492a      	ldr	r1, [pc, #168]	; (35b8c <IPC_IRQHandler+0x2cc>)
   35ae2:	d05d      	beq.n	35ba0 <IPC_IRQHandler+0x2e0>
   35ae4:	680a      	ldr	r2, [r1, #0]
   35ae6:	9203      	str	r2, [sp, #12]
   35ae8:	9a03      	ldr	r2, [sp, #12]
   35aea:	f8d3 330c 	ldr.w	r3, [r3, #780]	; 0x30c
   35aee:	06db      	lsls	r3, r3, #27
   35af0:	f53f af10 	bmi.w	35914 <IPC_IRQHandler+0x54>
   35af4:	e716      	b.n	35924 <IPC_IRQHandler+0x64>
   35af6:	4a26      	ldr	r2, [pc, #152]	; (35b90 <IPC_IRQHandler+0x2d0>)
   35af8:	4293      	cmp	r3, r2
   35afa:	d814      	bhi.n	35b26 <IPC_IRQHandler+0x266>
   35afc:	f1b3 6f88 	cmp.w	r3, #71303168	; 0x4400000
   35b00:	d814      	bhi.n	35b2c <IPC_IRQHandler+0x26c>
   35b02:	f248 0203 	movw	r2, #32771	; 0x8003
   35b06:	4293      	cmp	r3, r2
   35b08:	d128      	bne.n	35b5c <IPC_IRQHandler+0x29c>
   35b0a:	2003      	movs	r0, #3
   35b0c:	2204      	movs	r2, #4
   35b0e:	491b      	ldr	r1, [pc, #108]	; (35b7c <IPC_IRQHandler+0x2bc>)
   35b10:	4b1d      	ldr	r3, [pc, #116]	; (35b88 <IPC_IRQHandler+0x2c8>)
   35b12:	6008      	str	r0, [r1, #0]
   35b14:	601a      	str	r2, [r3, #0]
   35b16:	e7ac      	b.n	35a72 <IPC_IRQHandler+0x1b2>
   35b18:	23e0      	movs	r3, #224	; 0xe0
   35b1a:	f884 332a 	strb.w	r3, [r4, #810]	; 0x32a
   35b1e:	6065      	str	r5, [r4, #4]
   35b20:	b007      	add	sp, #28
   35b22:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   35b26:	4a1b      	ldr	r2, [pc, #108]	; (35b94 <IPC_IRQHandler+0x2d4>)
   35b28:	4293      	cmp	r3, r2
   35b2a:	d117      	bne.n	35b5c <IPC_IRQHandler+0x29c>
   35b2c:	2003      	movs	r0, #3
   35b2e:	4913      	ldr	r1, [pc, #76]	; (35b7c <IPC_IRQHandler+0x2bc>)
   35b30:	4a15      	ldr	r2, [pc, #84]	; (35b88 <IPC_IRQHandler+0x2c8>)
   35b32:	6008      	str	r0, [r1, #0]
   35b34:	6013      	str	r3, [r2, #0]
   35b36:	e79c      	b.n	35a72 <IPC_IRQHandler+0x1b2>
   35b38:	2003      	movs	r0, #3
   35b3a:	2206      	movs	r2, #6
   35b3c:	490f      	ldr	r1, [pc, #60]	; (35b7c <IPC_IRQHandler+0x2bc>)
   35b3e:	4b12      	ldr	r3, [pc, #72]	; (35b88 <IPC_IRQHandler+0x2c8>)
   35b40:	6008      	str	r0, [r1, #0]
   35b42:	601a      	str	r2, [r3, #0]
   35b44:	e795      	b.n	35a72 <IPC_IRQHandler+0x1b2>
   35b46:	2303      	movs	r3, #3
   35b48:	4618      	mov	r0, r3
   35b4a:	490c      	ldr	r1, [pc, #48]	; (35b7c <IPC_IRQHandler+0x2bc>)
   35b4c:	4a0e      	ldr	r2, [pc, #56]	; (35b88 <IPC_IRQHandler+0x2c8>)
   35b4e:	600b      	str	r3, [r1, #0]
   35b50:	6013      	str	r3, [r2, #0]
   35b52:	b007      	add	sp, #28
   35b54:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   35b58:	f7ff b910 	b.w	34d7c <rpc_transport_ipc_fault_handler>
   35b5c:	2303      	movs	r3, #3
   35b5e:	4907      	ldr	r1, [pc, #28]	; (35b7c <IPC_IRQHandler+0x2bc>)
   35b60:	4a09      	ldr	r2, [pc, #36]	; (35b88 <IPC_IRQHandler+0x2c8>)
   35b62:	600b      	str	r3, [r1, #0]
   35b64:	6013      	str	r3, [r2, #0]
   35b66:	e784      	b.n	35a72 <IPC_IRQHandler+0x1b2>
   35b68:	e000e100 	.word	0xe000e100
   35b6c:	4002a000 	.word	0x4002a000
   35b70:	4002a110 	.word	0x4002a110
   35b74:	200251b0 	.word	0x200251b0
   35b78:	200251a8 	.word	0x200251a8
   35b7c:	200251ac 	.word	0x200251ac
   35b80:	4002a11c 	.word	0x4002a11c
   35b84:	4002a100 	.word	0x4002a100
   35b88:	200251a4 	.word	0x200251a4
   35b8c:	4002a108 	.word	0x4002a108
   35b90:	04400004 	.word	0x04400004
   35b94:	05500001 	.word	0x05500001
   35b98:	200251b4 	.word	0x200251b4
   35b9c:	2002984a 	.word	0x2002984a
   35ba0:	4a37      	ldr	r2, [pc, #220]	; (35c80 <IPC_IRQHandler+0x3c0>)
   35ba2:	680b      	ldr	r3, [r1, #0]
   35ba4:	6812      	ldr	r2, [r2, #0]
   35ba6:	9305      	str	r3, [sp, #20]
   35ba8:	6893      	ldr	r3, [r2, #8]
   35baa:	4836      	ldr	r0, [pc, #216]	; (35c84 <IPC_IRQHandler+0x3c4>)
   35bac:	4936      	ldr	r1, [pc, #216]	; (35c88 <IPC_IRQHandler+0x3c8>)
   35bae:	6003      	str	r3, [r0, #0]
   35bb0:	6854      	ldr	r4, [r2, #4]
   35bb2:	9a05      	ldr	r2, [sp, #20]
   35bb4:	600c      	str	r4, [r1, #0]
   35bb6:	b16b      	cbz	r3, 35bd4 <IPC_IRQHandler+0x314>
   35bb8:	b164      	cbz	r4, 35bd4 <IPC_IRQHandler+0x314>
   35bba:	681b      	ldr	r3, [r3, #0]
   35bbc:	2b10      	cmp	r3, #16
   35bbe:	d802      	bhi.n	35bc6 <IPC_IRQHandler+0x306>
   35bc0:	6822      	ldr	r2, [r4, #0]
   35bc2:	2a10      	cmp	r2, #16
   35bc4:	d90c      	bls.n	35be0 <IPC_IRQHandler+0x320>
   35bc6:	2103      	movs	r1, #3
   35bc8:	f24c 0206 	movw	r2, #49158	; 0xc006
   35bcc:	4b2f      	ldr	r3, [pc, #188]	; (35c8c <IPC_IRQHandler+0x3cc>)
   35bce:	6029      	str	r1, [r5, #0]
   35bd0:	601a      	str	r2, [r3, #0]
   35bd2:	e74e      	b.n	35a72 <IPC_IRQHandler+0x1b2>
   35bd4:	2103      	movs	r1, #3
   35bd6:	2210      	movs	r2, #16
   35bd8:	4b2c      	ldr	r3, [pc, #176]	; (35c8c <IPC_IRQHandler+0x3cc>)
   35bda:	6029      	str	r1, [r5, #0]
   35bdc:	601a      	str	r2, [r3, #0]
   35bde:	e748      	b.n	35a72 <IPC_IRQHandler+0x1b2>
   35be0:	f8df 80b4 	ldr.w	r8, [pc, #180]	; 35c98 <IPC_IRQHandler+0x3d8>
   35be4:	2a00      	cmp	r2, #0
   35be6:	d042      	beq.n	35c6e <IPC_IRQHandler+0x3ae>
   35be8:	2300      	movs	r3, #0
   35bea:	f104 0904 	add.w	r9, r4, #4
   35bee:	461e      	mov	r6, r3
   35bf0:	e002      	b.n	35bf8 <IPC_IRQHandler+0x338>
   35bf2:	3601      	adds	r6, #1
   35bf4:	4296      	cmp	r6, r2
   35bf6:	d22a      	bcs.n	35c4e <IPC_IRQHandler+0x38e>
   35bf8:	00f7      	lsls	r7, r6, #3
   35bfa:	19e1      	adds	r1, r4, r7
   35bfc:	6888      	ldr	r0, [r1, #8]
   35bfe:	2800      	cmp	r0, #0
   35c00:	d0f7      	beq.n	35bf2 <IPC_IRQHandler+0x332>
   35c02:	f8d1 a004 	ldr.w	sl, [r1, #4]
   35c06:	fa5f fa8a 	uxtb.w	sl, sl
   35c0a:	f1ba 0f01 	cmp.w	sl, #1
   35c0e:	d1f0      	bne.n	35bf2 <IPC_IRQHandler+0x332>
   35c10:	f8d1 c004 	ldr.w	ip, [r1, #4]
   35c14:	f8b8 0000 	ldrh.w	r0, [r8]
   35c18:	ebb0 4f1c 	cmp.w	r0, ip, lsr #16
   35c1c:	d1e9      	bne.n	35bf2 <IPC_IRQHandler+0x332>
   35c1e:	684b      	ldr	r3, [r1, #4]
   35c20:	1c42      	adds	r2, r0, #1
   35c22:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
   35c26:	f043 0302 	orr.w	r3, r3, #2
   35c2a:	604b      	str	r3, [r1, #4]
   35c2c:	6888      	ldr	r0, [r1, #8]
   35c2e:	f8a8 2000 	strh.w	r2, [r8]
   35c32:	f7ff fd03 	bl	3563c <rpc_transport_rx_handle>
   35c36:	4653      	mov	r3, sl
   35c38:	b938      	cbnz	r0, 35c4a <IPC_IRQHandler+0x38a>
   35c3a:	f859 2007 	ldr.w	r2, [r9, r7]
   35c3e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
   35c42:	f042 0203 	orr.w	r2, r2, #3
   35c46:	f849 2007 	str.w	r2, [r9, r7]
   35c4a:	6822      	ldr	r2, [r4, #0]
   35c4c:	e7d1      	b.n	35bf2 <IPC_IRQHandler+0x332>
   35c4e:	2b00      	cmp	r3, #0
   35c50:	d1c8      	bne.n	35be4 <IPC_IRQHandler+0x324>
   35c52:	b912      	cbnz	r2, 35c5a <IPC_IRQHandler+0x39a>
   35c54:	e00b      	b.n	35c6e <IPC_IRQHandler+0x3ae>
   35c56:	4293      	cmp	r3, r2
   35c58:	d009      	beq.n	35c6e <IPC_IRQHandler+0x3ae>
   35c5a:	eb04 01c3 	add.w	r1, r4, r3, lsl #3
   35c5e:	6888      	ldr	r0, [r1, #8]
   35c60:	3301      	adds	r3, #1
   35c62:	2800      	cmp	r0, #0
   35c64:	d0f7      	beq.n	35c56 <IPC_IRQHandler+0x396>
   35c66:	6849      	ldr	r1, [r1, #4]
   35c68:	b2c9      	uxtb	r1, r1
   35c6a:	2901      	cmp	r1, #1
   35c6c:	d1f3      	bne.n	35c56 <IPC_IRQHandler+0x396>
   35c6e:	2002      	movs	r0, #2
   35c70:	4b07      	ldr	r3, [pc, #28]	; (35c90 <IPC_IRQHandler+0x3d0>)
   35c72:	f44f 6180 	mov.w	r1, #1024	; 0x400
   35c76:	4a07      	ldr	r2, [pc, #28]	; (35c94 <IPC_IRQHandler+0x3d4>)
   35c78:	681b      	ldr	r3, [r3, #0]
   35c7a:	6028      	str	r0, [r5, #0]
   35c7c:	e6ec      	b.n	35a58 <IPC_IRQHandler+0x198>
   35c7e:	bf00      	nop
   35c80:	200251b8 	.word	0x200251b8
   35c84:	200251b4 	.word	0x200251b4
   35c88:	200251b0 	.word	0x200251b0
   35c8c:	200251a4 	.word	0x200251a4
   35c90:	200251a8 	.word	0x200251a8
   35c94:	e000e100 	.word	0xe000e100
   35c98:	2002984a 	.word	0x2002984a

00035c9c <rpc_transport_msg_free>:
   35c9c:	b430      	push	{r4, r5}
   35c9e:	4b18      	ldr	r3, [pc, #96]	; (35d00 <rpc_transport_msg_free+0x64>)
   35ca0:	681c      	ldr	r4, [r3, #0]
   35ca2:	6825      	ldr	r5, [r4, #0]
   35ca4:	b16d      	cbz	r5, 35cc2 <rpc_transport_msg_free+0x26>
   35ca6:	68a3      	ldr	r3, [r4, #8]
   35ca8:	4283      	cmp	r3, r0
   35caa:	d027      	beq.n	35cfc <rpc_transport_msg_free+0x60>
   35cac:	2300      	movs	r3, #0
   35cae:	e002      	b.n	35cb6 <rpc_transport_msg_free+0x1a>
   35cb0:	6889      	ldr	r1, [r1, #8]
   35cb2:	4281      	cmp	r1, r0
   35cb4:	d019      	beq.n	35cea <rpc_transport_msg_free+0x4e>
   35cb6:	3301      	adds	r3, #1
   35cb8:	00da      	lsls	r2, r3, #3
   35cba:	42ab      	cmp	r3, r5
   35cbc:	eb04 0102 	add.w	r1, r4, r2
   35cc0:	d1f6      	bne.n	35cb0 <rpc_transport_msg_free+0x14>
   35cc2:	4b10      	ldr	r3, [pc, #64]	; (35d04 <rpc_transport_msg_free+0x68>)
   35cc4:	681c      	ldr	r4, [r3, #0]
   35cc6:	6825      	ldr	r5, [r4, #0]
   35cc8:	b16d      	cbz	r5, 35ce6 <rpc_transport_msg_free+0x4a>
   35cca:	68a3      	ldr	r3, [r4, #8]
   35ccc:	4283      	cmp	r3, r0
   35cce:	d015      	beq.n	35cfc <rpc_transport_msg_free+0x60>
   35cd0:	2300      	movs	r3, #0
   35cd2:	e002      	b.n	35cda <rpc_transport_msg_free+0x3e>
   35cd4:	6889      	ldr	r1, [r1, #8]
   35cd6:	4281      	cmp	r1, r0
   35cd8:	d007      	beq.n	35cea <rpc_transport_msg_free+0x4e>
   35cda:	3301      	adds	r3, #1
   35cdc:	00da      	lsls	r2, r3, #3
   35cde:	429d      	cmp	r5, r3
   35ce0:	eb04 0102 	add.w	r1, r4, r2
   35ce4:	d1f6      	bne.n	35cd4 <rpc_transport_msg_free+0x38>
   35ce6:	bc30      	pop	{r4, r5}
   35ce8:	4770      	bx	lr
   35cea:	3204      	adds	r2, #4
   35cec:	58a3      	ldr	r3, [r4, r2]
   35cee:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
   35cf2:	f043 0303 	orr.w	r3, r3, #3
   35cf6:	50a3      	str	r3, [r4, r2]
   35cf8:	bc30      	pop	{r4, r5}
   35cfa:	4770      	bx	lr
   35cfc:	2204      	movs	r2, #4
   35cfe:	e7f5      	b.n	35cec <rpc_transport_msg_free+0x50>
   35d00:	200251b4 	.word	0x200251b4
   35d04:	200251b0 	.word	0x200251b0

00035d08 <rpc_transport_ipc_tx_init>:
   35d08:	2800      	cmp	r0, #0
   35d0a:	f000 80b8 	beq.w	35e7e <rpc_transport_ipc_tx_init+0x176>
   35d0e:	2900      	cmp	r1, #0
   35d10:	f000 80b5 	beq.w	35e7e <rpc_transport_ipc_tx_init+0x176>
   35d14:	2a00      	cmp	r2, #0
   35d16:	f000 80b2 	beq.w	35e7e <rpc_transport_ipc_tx_init+0x176>
   35d1a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   35d1e:	6a04      	ldr	r4, [r0, #32]
   35d20:	b085      	sub	sp, #20
   35d22:	2c00      	cmp	r4, #0
   35d24:	f000 80a6 	beq.w	35e74 <rpc_transport_ipc_tx_init+0x16c>
   35d28:	6a40      	ldr	r0, [r0, #36]	; 0x24
   35d2a:	2800      	cmp	r0, #0
   35d2c:	f000 80a2 	beq.w	35e74 <rpc_transport_ipc_tx_init+0x16c>
   35d30:	f642 4587 	movw	r5, #11399	; 0x2c87
   35d34:	f04f 0a00 	mov.w	sl, #0
   35d38:	4e55      	ldr	r6, [pc, #340]	; (35e90 <rpc_transport_ipc_tx_init+0x188>)
   35d3a:	42a8      	cmp	r0, r5
   35d3c:	f886 a000 	strb.w	sl, [r6]
   35d40:	f240 80a0 	bls.w	35e84 <rpc_transport_ipc_tx_init+0x17c>
   35d44:	2708      	movs	r7, #8
   35d46:	f8df 9180 	ldr.w	r9, [pc, #384]	; 35ec8 <rpc_transport_ipc_tx_init+0x1c0>
   35d4a:	4620      	mov	r0, r4
   35d4c:	4616      	mov	r6, r2
   35d4e:	460d      	mov	r5, r1
   35d50:	2244      	movs	r2, #68	; 0x44
   35d52:	4651      	mov	r1, sl
   35d54:	f8c9 4000 	str.w	r4, [r9]
   35d58:	f00f f8b4 	bl	44ec4 <memset>
   35d5c:	f8d9 2000 	ldr.w	r2, [r9]
   35d60:	f104 0344 	add.w	r3, r4, #68	; 0x44
   35d64:	f8df 8164 	ldr.w	r8, [pc, #356]	; 35ecc <rpc_transport_ipc_tx_init+0x1c4>
   35d68:	f882 a001 	strb.w	sl, [r2, #1]
   35d6c:	f882 a002 	strb.w	sl, [r2, #2]
   35d70:	f882 a003 	strb.w	sl, [r2, #3]
   35d74:	7017      	strb	r7, [r2, #0]
   35d76:	4618      	mov	r0, r3
   35d78:	2244      	movs	r2, #68	; 0x44
   35d7a:	4651      	mov	r1, sl
   35d7c:	f8c8 3000 	str.w	r3, [r8]
   35d80:	f00f f8a0 	bl	44ec4 <memset>
   35d84:	f8d8 2000 	ldr.w	r2, [r8]
   35d88:	f104 0388 	add.w	r3, r4, #136	; 0x88
   35d8c:	f8df b140 	ldr.w	fp, [pc, #320]	; 35ed0 <rpc_transport_ipc_tx_init+0x1c8>
   35d90:	7017      	strb	r7, [r2, #0]
   35d92:	f882 a001 	strb.w	sl, [r2, #1]
   35d96:	f882 a002 	strb.w	sl, [r2, #2]
   35d9a:	f882 a003 	strb.w	sl, [r2, #3]
   35d9e:	4618      	mov	r0, r3
   35da0:	f44f 7200 	mov.w	r2, #512	; 0x200
   35da4:	4651      	mov	r1, sl
   35da6:	f8cb 3000 	str.w	r3, [fp]
   35daa:	f00f f88b 	bl	44ec4 <memset>
   35dae:	4b39      	ldr	r3, [pc, #228]	; (35e94 <rpc_transport_ipc_tx_init+0x18c>)
   35db0:	f504 7c22 	add.w	ip, r4, #648	; 0x288
   35db4:	f8c3 c000 	str.w	ip, [r3]
   35db8:	4651      	mov	r1, sl
   35dba:	4660      	mov	r0, ip
   35dbc:	f44f 7200 	mov.w	r2, #512	; 0x200
   35dc0:	f00f f880 	bl	44ec4 <memset>
   35dc4:	f44f 5c20 	mov.w	ip, #10240	; 0x2800
   35dc8:	2106      	movs	r1, #6
   35dca:	f04f 0e01 	mov.w	lr, #1
   35dce:	f44f 3001 	mov.w	r0, #132096	; 0x20400
   35dd2:	f44f 3288 	mov.w	r2, #69632	; 0x11000
   35dd6:	4b30      	ldr	r3, [pc, #192]	; (35e98 <rpc_transport_ipc_tx_init+0x190>)
   35dd8:	f504 6491 	add.w	r4, r4, #1160	; 0x488
   35ddc:	605c      	str	r4, [r3, #4]
   35dde:	4c2f      	ldr	r4, [pc, #188]	; (35e9c <rpc_transport_ipc_tx_init+0x194>)
   35de0:	f8c3 c008 	str.w	ip, [r3, #8]
   35de4:	8199      	strh	r1, [r3, #12]
   35de6:	f8a3 e000 	strh.w	lr, [r3]
   35dea:	4619      	mov	r1, r3
   35dec:	611c      	str	r4, [r3, #16]
   35dee:	4b2c      	ldr	r3, [pc, #176]	; (35ea0 <rpc_transport_ipc_tx_init+0x198>)
   35df0:	f8df c0e0 	ldr.w	ip, [pc, #224]	; 35ed4 <rpc_transport_ipc_tx_init+0x1cc>
   35df4:	6120      	str	r0, [r4, #16]
   35df6:	482b      	ldr	r0, [pc, #172]	; (35ea4 <rpc_transport_ipc_tx_init+0x19c>)
   35df8:	6063      	str	r3, [r4, #4]
   35dfa:	f503 73c0 	add.w	r3, r3, #384	; 0x180
   35dfe:	60a0      	str	r0, [r4, #8]
   35e00:	f8c4 c000 	str.w	ip, [r4]
   35e04:	4828      	ldr	r0, [pc, #160]	; (35ea8 <rpc_transport_ipc_tx_init+0x1a0>)
   35e06:	60e3      	str	r3, [r4, #12]
   35e08:	6162      	str	r2, [r4, #20]
   35e0a:	f7fd fe59 	bl	33ac0 <nrf_mem_register>
   35e0e:	2800      	cmp	r0, #0
   35e10:	d132      	bne.n	35e78 <rpc_transport_ipc_tx_init+0x170>
   35e12:	f04f 0c02 	mov.w	ip, #2
   35e16:	2420      	movs	r4, #32
   35e18:	f8d9 1000 	ldr.w	r1, [r9]
   35e1c:	f8db 2000 	ldr.w	r2, [fp]
   35e20:	6029      	str	r1, [r5, #0]
   35e22:	4b1c      	ldr	r3, [pc, #112]	; (35e94 <rpc_transport_ipc_tx_init+0x18c>)
   35e24:	f8d8 1000 	ldr.w	r1, [r8]
   35e28:	f8df e0ac 	ldr.w	lr, [pc, #172]	; 35ed8 <rpc_transport_ipc_tx_init+0x1d0>
   35e2c:	4d1f      	ldr	r5, [pc, #124]	; (35eac <rpc_transport_ipc_tx_init+0x1a4>)
   35e2e:	6031      	str	r1, [r6, #0]
   35e30:	f8ce 2000 	str.w	r2, [lr]
   35e34:	681b      	ldr	r3, [r3, #0]
   35e36:	491e      	ldr	r1, [pc, #120]	; (35eb0 <rpc_transport_ipc_tx_init+0x1a8>)
   35e38:	f502 7200 	add.w	r2, r2, #512	; 0x200
   35e3c:	602a      	str	r2, [r5, #0]
   35e3e:	4e1d      	ldr	r6, [pc, #116]	; (35eb4 <rpc_transport_ipc_tx_init+0x1ac>)
   35e40:	4a1d      	ldr	r2, [pc, #116]	; (35eb8 <rpc_transport_ipc_tx_init+0x1b0>)
   35e42:	4d1e      	ldr	r5, [pc, #120]	; (35ebc <rpc_transport_ipc_tx_init+0x1b4>)
   35e44:	600b      	str	r3, [r1, #0]
   35e46:	f503 7300 	add.w	r3, r3, #512	; 0x200
   35e4a:	491d      	ldr	r1, [pc, #116]	; (35ec0 <rpc_transport_ipc_tx_init+0x1b8>)
   35e4c:	6033      	str	r3, [r6, #0]
   35e4e:	8028      	strh	r0, [r5, #0]
   35e50:	f8c2 c514 	str.w	ip, [r2, #1300]	; 0x514
   35e54:	6809      	ldr	r1, [r1, #0]
   35e56:	4b1b      	ldr	r3, [pc, #108]	; (35ec4 <rpc_transport_ipc_tx_init+0x1bc>)
   35e58:	9103      	str	r1, [sp, #12]
   35e5a:	9903      	ldr	r1, [sp, #12]
   35e5c:	f8c2 751c 	str.w	r7, [r2, #1308]	; 0x51c
   35e60:	6819      	ldr	r1, [r3, #0]
   35e62:	443b      	add	r3, r7
   35e64:	9102      	str	r1, [sp, #8]
   35e66:	9902      	ldr	r1, [sp, #8]
   35e68:	f8c2 4524 	str.w	r4, [r2, #1316]	; 0x524
   35e6c:	681b      	ldr	r3, [r3, #0]
   35e6e:	9301      	str	r3, [sp, #4]
   35e70:	9b01      	ldr	r3, [sp, #4]
   35e72:	e001      	b.n	35e78 <rpc_transport_ipc_tx_init+0x170>
   35e74:	f24c 0007 	movw	r0, #49159	; 0xc007
   35e78:	b005      	add	sp, #20
   35e7a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   35e7e:	f24c 000e 	movw	r0, #49166	; 0xc00e
   35e82:	4770      	bx	lr
   35e84:	f24c 0004 	movw	r0, #49156	; 0xc004
   35e88:	b005      	add	sp, #20
   35e8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   35e8e:	bf00      	nop
   35e90:	2002b4e8 	.word	0x2002b4e8
   35e94:	200251e4 	.word	0x200251e4
   35e98:	200251d0 	.word	0x200251d0
   35e9c:	200251f4 	.word	0x200251f4
   35ea0:	00040080 	.word	0x00040080
   35ea4:	00040100 	.word	0x00040100
   35ea8:	200251bc 	.word	0x200251bc
   35eac:	200251c8 	.word	0x200251c8
   35eb0:	200251c4 	.word	0x200251c4
   35eb4:	200251c0 	.word	0x200251c0
   35eb8:	4002a000 	.word	0x4002a000
   35ebc:	2002984c 	.word	0x2002984c
   35ec0:	4002a514 	.word	0x4002a514
   35ec4:	4002a51c 	.word	0x4002a51c
   35ec8:	200251f0 	.word	0x200251f0
   35ecc:	200251e8 	.word	0x200251e8
   35ed0:	200251ec 	.word	0x200251ec
   35ed4:	00080040 	.word	0x00080040
   35ed8:	200251cc 	.word	0x200251cc

00035edc <rpc_transport_ipc_tx_send>:
   35edc:	2800      	cmp	r0, #0
   35ede:	d05f      	beq.n	35fa0 <rpc_transport_ipc_tx_send+0xc4>
   35ee0:	b470      	push	{r4, r5, r6}
   35ee2:	4b33      	ldr	r3, [pc, #204]	; (35fb0 <rpc_transport_ipc_tx_send+0xd4>)
   35ee4:	b083      	sub	sp, #12
   35ee6:	681a      	ldr	r2, [r3, #0]
   35ee8:	4b32      	ldr	r3, [pc, #200]	; (35fb4 <rpc_transport_ipc_tx_send+0xd8>)
   35eea:	4282      	cmp	r2, r0
   35eec:	d81e      	bhi.n	35f2c <rpc_transport_ipc_tx_send+0x50>
   35eee:	681b      	ldr	r3, [r3, #0]
   35ef0:	4931      	ldr	r1, [pc, #196]	; (35fb8 <rpc_transport_ipc_tx_send+0xdc>)
   35ef2:	4283      	cmp	r3, r0
   35ef4:	6809      	ldr	r1, [r1, #0]
   35ef6:	d803      	bhi.n	35f00 <rpc_transport_ipc_tx_send+0x24>
   35ef8:	4c30      	ldr	r4, [pc, #192]	; (35fbc <rpc_transport_ipc_tx_send+0xe0>)
   35efa:	6824      	ldr	r4, [r4, #0]
   35efc:	4284      	cmp	r4, r0
   35efe:	d847      	bhi.n	35f90 <rpc_transport_ipc_tx_send+0xb4>
   35f00:	4281      	cmp	r1, r0
   35f02:	d90e      	bls.n	35f22 <rpc_transport_ipc_tx_send+0x46>
   35f04:	4b2e      	ldr	r3, [pc, #184]	; (35fc0 <rpc_transport_ipc_tx_send+0xe4>)
   35f06:	781b      	ldrb	r3, [r3, #0]
   35f08:	2b00      	cmp	r3, #0
   35f0a:	d14c      	bne.n	35fa6 <rpc_transport_ipc_tx_send+0xca>
   35f0c:	1a83      	subs	r3, r0, r2
   35f0e:	492d      	ldr	r1, [pc, #180]	; (35fc4 <rpc_transport_ipc_tx_send+0xe8>)
   35f10:	099e      	lsrs	r6, r3, #6
   35f12:	069b      	lsls	r3, r3, #26
   35f14:	680a      	ldr	r2, [r1, #0]
   35f16:	4c2c      	ldr	r4, [pc, #176]	; (35fc8 <rpc_transport_ipc_tx_send+0xec>)
   35f18:	f04f 0103 	mov.w	r1, #3
   35f1c:	f04f 0502 	mov.w	r5, #2
   35f20:	d014      	beq.n	35f4c <rpc_transport_ipc_tx_send+0x70>
   35f22:	f24c 0010 	movw	r0, #49168	; 0xc010
   35f26:	b003      	add	sp, #12
   35f28:	bc70      	pop	{r4, r5, r6}
   35f2a:	4770      	bx	lr
   35f2c:	681b      	ldr	r3, [r3, #0]
   35f2e:	4298      	cmp	r0, r3
   35f30:	d3f7      	bcc.n	35f22 <rpc_transport_ipc_tx_send+0x46>
   35f32:	4a22      	ldr	r2, [pc, #136]	; (35fbc <rpc_transport_ipc_tx_send+0xe0>)
   35f34:	6812      	ldr	r2, [r2, #0]
   35f36:	4290      	cmp	r0, r2
   35f38:	d2f3      	bcs.n	35f22 <rpc_transport_ipc_tx_send+0x46>
   35f3a:	2101      	movs	r1, #1
   35f3c:	1ac3      	subs	r3, r0, r3
   35f3e:	4a23      	ldr	r2, [pc, #140]	; (35fcc <rpc_transport_ipc_tx_send+0xf0>)
   35f40:	099e      	lsrs	r6, r3, #6
   35f42:	069b      	lsls	r3, r3, #26
   35f44:	460d      	mov	r5, r1
   35f46:	6812      	ldr	r2, [r2, #0]
   35f48:	4c21      	ldr	r4, [pc, #132]	; (35fd0 <rpc_transport_ipc_tx_send+0xf4>)
   35f4a:	d1ea      	bne.n	35f22 <rpc_transport_ipc_tx_send+0x46>
   35f4c:	6843      	ldr	r3, [r0, #4]
   35f4e:	b2db      	uxtb	r3, r3
   35f50:	429d      	cmp	r5, r3
   35f52:	d120      	bne.n	35f96 <rpc_transport_ipc_tx_send+0xba>
   35f54:	2020      	movs	r0, #32
   35f56:	eb02 02c6 	add.w	r2, r2, r6, lsl #3
   35f5a:	4d1e      	ldr	r5, [pc, #120]	; (35fd4 <rpc_transport_ipc_tx_send+0xf8>)
   35f5c:	6853      	ldr	r3, [r2, #4]
   35f5e:	882e      	ldrh	r6, [r5, #0]
   35f60:	b29b      	uxth	r3, r3
   35f62:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
   35f66:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
   35f6a:	f043 0301 	orr.w	r3, r3, #1
   35f6e:	6053      	str	r3, [r2, #4]
   35f70:	bf00      	nop
   35f72:	3801      	subs	r0, #1
   35f74:	d1fc      	bne.n	35f70 <rpc_transport_ipc_tx_send+0x94>
   35f76:	2201      	movs	r2, #1
   35f78:	4b17      	ldr	r3, [pc, #92]	; (35fd8 <rpc_transport_ipc_tx_send+0xfc>)
   35f7a:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
   35f7e:	6822      	ldr	r2, [r4, #0]
   35f80:	882b      	ldrh	r3, [r5, #0]
   35f82:	9201      	str	r2, [sp, #4]
   35f84:	9a01      	ldr	r2, [sp, #4]
   35f86:	3301      	adds	r3, #1
   35f88:	802b      	strh	r3, [r5, #0]
   35f8a:	b003      	add	sp, #12
   35f8c:	bc70      	pop	{r4, r5, r6}
   35f8e:	4770      	bx	lr
   35f90:	4281      	cmp	r1, r0
   35f92:	d9d2      	bls.n	35f3a <rpc_transport_ipc_tx_send+0x5e>
   35f94:	e7b6      	b.n	35f04 <rpc_transport_ipc_tx_send+0x28>
   35f96:	f24c 0007 	movw	r0, #49159	; 0xc007
   35f9a:	b003      	add	sp, #12
   35f9c:	bc70      	pop	{r4, r5, r6}
   35f9e:	4770      	bx	lr
   35fa0:	f24c 000e 	movw	r0, #49166	; 0xc00e
   35fa4:	4770      	bx	lr
   35fa6:	f24c 000f 	movw	r0, #49167	; 0xc00f
   35faa:	b003      	add	sp, #12
   35fac:	bc70      	pop	{r4, r5, r6}
   35fae:	4770      	bx	lr
   35fb0:	200251cc 	.word	0x200251cc
   35fb4:	200251c4 	.word	0x200251c4
   35fb8:	200251c8 	.word	0x200251c8
   35fbc:	200251c0 	.word	0x200251c0
   35fc0:	2002b4e8 	.word	0x2002b4e8
   35fc4:	200251f0 	.word	0x200251f0
   35fc8:	4002a00c 	.word	0x4002a00c
   35fcc:	200251e8 	.word	0x200251e8
   35fd0:	4002a004 	.word	0x4002a004
   35fd4:	2002984c 	.word	0x2002984c
   35fd8:	4002a000 	.word	0x4002a000

00035fdc <rpc_transport_ipc_tx_rpc_data_alloc>:
   35fdc:	4b18      	ldr	r3, [pc, #96]	; (36040 <rpc_transport_ipc_tx_rpc_data_alloc+0x64>)
   35fde:	781b      	ldrb	r3, [r3, #0]
   35fe0:	bb63      	cbnz	r3, 3603c <rpc_transport_ipc_tx_rpc_data_alloc+0x60>
   35fe2:	b4f0      	push	{r4, r5, r6, r7}
   35fe4:	4a17      	ldr	r2, [pc, #92]	; (36044 <rpc_transport_ipc_tx_rpc_data_alloc+0x68>)
   35fe6:	f003 00ff 	and.w	r0, r3, #255	; 0xff
   35fea:	6814      	ldr	r4, [r2, #0]
   35fec:	4b16      	ldr	r3, [pc, #88]	; (36048 <rpc_transport_ipc_tx_rpc_data_alloc+0x6c>)
   35fee:	6825      	ldr	r5, [r4, #0]
   35ff0:	681e      	ldr	r6, [r3, #0]
   35ff2:	b1a5      	cbz	r5, 3601e <rpc_transport_ipc_tx_rpc_data_alloc+0x42>
   35ff4:	4607      	mov	r7, r0
   35ff6:	00c1      	lsls	r1, r0, #3
   35ff8:	1863      	adds	r3, r4, r1
   35ffa:	685a      	ldr	r2, [r3, #4]
   35ffc:	b2d2      	uxtb	r2, r2
   35ffe:	2a03      	cmp	r2, #3
   36000:	d104      	bne.n	3600c <rpc_transport_ipc_tx_rpc_data_alloc+0x30>
   36002:	609f      	str	r7, [r3, #8]
   36004:	685a      	ldr	r2, [r3, #4]
   36006:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
   3600a:	605a      	str	r2, [r3, #4]
   3600c:	685a      	ldr	r2, [r3, #4]
   3600e:	f012 0fff 	tst.w	r2, #255	; 0xff
   36012:	d101      	bne.n	36018 <rpc_transport_ipc_tx_rpc_data_alloc+0x3c>
   36014:	689b      	ldr	r3, [r3, #8]
   36016:	b12b      	cbz	r3, 36024 <rpc_transport_ipc_tx_rpc_data_alloc+0x48>
   36018:	3001      	adds	r0, #1
   3601a:	42a8      	cmp	r0, r5
   3601c:	d1eb      	bne.n	35ff6 <rpc_transport_ipc_tx_rpc_data_alloc+0x1a>
   3601e:	2000      	movs	r0, #0
   36020:	bcf0      	pop	{r4, r5, r6, r7}
   36022:	4770      	bx	lr
   36024:	eb06 1080 	add.w	r0, r6, r0, lsl #6
   36028:	4421      	add	r1, r4
   3602a:	6088      	str	r0, [r1, #8]
   3602c:	6843      	ldr	r3, [r0, #4]
   3602e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
   36032:	f043 0302 	orr.w	r3, r3, #2
   36036:	6043      	str	r3, [r0, #4]
   36038:	bcf0      	pop	{r4, r5, r6, r7}
   3603a:	4770      	bx	lr
   3603c:	2000      	movs	r0, #0
   3603e:	4770      	bx	lr
   36040:	2002b4e8 	.word	0x2002b4e8
   36044:	200251f0 	.word	0x200251f0
   36048:	200251ec 	.word	0x200251ec

0003604c <rpc_transport_ipc_tx_rpc_ctrl_alloc>:
   3604c:	b4f0      	push	{r4, r5, r6, r7}
   3604e:	4a15      	ldr	r2, [pc, #84]	; (360a4 <rpc_transport_ipc_tx_rpc_ctrl_alloc+0x58>)
   36050:	4b15      	ldr	r3, [pc, #84]	; (360a8 <rpc_transport_ipc_tx_rpc_ctrl_alloc+0x5c>)
   36052:	6814      	ldr	r4, [r2, #0]
   36054:	681e      	ldr	r6, [r3, #0]
   36056:	6825      	ldr	r5, [r4, #0]
   36058:	b1ad      	cbz	r5, 36086 <rpc_transport_ipc_tx_rpc_ctrl_alloc+0x3a>
   3605a:	2000      	movs	r0, #0
   3605c:	4607      	mov	r7, r0
   3605e:	00c1      	lsls	r1, r0, #3
   36060:	1863      	adds	r3, r4, r1
   36062:	685a      	ldr	r2, [r3, #4]
   36064:	b2d2      	uxtb	r2, r2
   36066:	2a03      	cmp	r2, #3
   36068:	d104      	bne.n	36074 <rpc_transport_ipc_tx_rpc_ctrl_alloc+0x28>
   3606a:	609f      	str	r7, [r3, #8]
   3606c:	685a      	ldr	r2, [r3, #4]
   3606e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
   36072:	605a      	str	r2, [r3, #4]
   36074:	685a      	ldr	r2, [r3, #4]
   36076:	f012 0fff 	tst.w	r2, #255	; 0xff
   3607a:	d101      	bne.n	36080 <rpc_transport_ipc_tx_rpc_ctrl_alloc+0x34>
   3607c:	689b      	ldr	r3, [r3, #8]
   3607e:	b12b      	cbz	r3, 3608c <rpc_transport_ipc_tx_rpc_ctrl_alloc+0x40>
   36080:	3001      	adds	r0, #1
   36082:	4285      	cmp	r5, r0
   36084:	d1eb      	bne.n	3605e <rpc_transport_ipc_tx_rpc_ctrl_alloc+0x12>
   36086:	2000      	movs	r0, #0
   36088:	bcf0      	pop	{r4, r5, r6, r7}
   3608a:	4770      	bx	lr
   3608c:	eb06 1080 	add.w	r0, r6, r0, lsl #6
   36090:	4421      	add	r1, r4
   36092:	6088      	str	r0, [r1, #8]
   36094:	6843      	ldr	r3, [r0, #4]
   36096:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
   3609a:	f043 0301 	orr.w	r3, r3, #1
   3609e:	6043      	str	r3, [r0, #4]
   360a0:	bcf0      	pop	{r4, r5, r6, r7}
   360a2:	4770      	bx	lr
   360a4:	200251e8 	.word	0x200251e8
   360a8:	200251e4 	.word	0x200251e4

000360ac <rpc_transport_ipc_tx_data_alloc>:
   360ac:	4b03      	ldr	r3, [pc, #12]	; (360bc <rpc_transport_ipc_tx_data_alloc+0x10>)
   360ae:	781b      	ldrb	r3, [r3, #0]
   360b0:	b90b      	cbnz	r3, 360b6 <rpc_transport_ipc_tx_data_alloc+0xa>
   360b2:	f7fd be35 	b.w	33d20 <nrf_shared_malloc>
   360b6:	2000      	movs	r0, #0
   360b8:	4770      	bx	lr
   360ba:	bf00      	nop
   360bc:	2002b4e8 	.word	0x2002b4e8

000360c0 <ok_rsp_parser>:
   360c0:	2000      	movs	r0, #0
   360c2:	4770      	bx	lr

000360c4 <pdn_state_get_parser>:
   360c4:	2200      	movs	r2, #0
   360c6:	b570      	push	{r4, r5, r6, lr}
   360c8:	780b      	ldrb	r3, [r1, #0]
   360ca:	b084      	sub	sp, #16
   360cc:	460e      	mov	r6, r1
   360ce:	e9cd 2200 	strd	r2, r2, [sp]
   360d2:	e9cd 2202 	strd	r2, r2, [sp, #8]
   360d6:	b323      	cbz	r3, 36122 <pdn_state_get_parser+0x5e>
   360d8:	460c      	mov	r4, r1
   360da:	2b20      	cmp	r3, #32
   360dc:	460d      	mov	r5, r1
   360de:	d01b      	beq.n	36118 <pdn_state_get_parser+0x54>
   360e0:	700b      	strb	r3, [r1, #0]
   360e2:	3201      	adds	r2, #1
   360e4:	f814 3f01 	ldrb.w	r3, [r4, #1]!
   360e8:	18b1      	adds	r1, r6, r2
   360ea:	460d      	mov	r5, r1
   360ec:	2b00      	cmp	r3, #0
   360ee:	d1f4      	bne.n	360da <pdn_state_get_parser+0x16>
   360f0:	2200      	movs	r2, #0
   360f2:	4b0d      	ldr	r3, [pc, #52]	; (36128 <pdn_state_get_parser+0x64>)
   360f4:	702a      	strb	r2, [r5, #0]
   360f6:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
   360fa:	4a0c      	ldr	r2, [pc, #48]	; (3612c <pdn_state_get_parser+0x68>)
   360fc:	681b      	ldr	r3, [r3, #0]
   360fe:	2110      	movs	r1, #16
   36100:	4668      	mov	r0, sp
   36102:	f009 f93f 	bl	3f384 <sniprintf>
   36106:	4669      	mov	r1, sp
   36108:	4630      	mov	r0, r6
   3610a:	f00f f862 	bl	451d2 <strstr>
   3610e:	3000      	adds	r0, #0
   36110:	bf18      	it	ne
   36112:	2001      	movne	r0, #1
   36114:	b004      	add	sp, #16
   36116:	bd70      	pop	{r4, r5, r6, pc}
   36118:	f814 3f01 	ldrb.w	r3, [r4, #1]!
   3611c:	2b00      	cmp	r3, #0
   3611e:	d1dc      	bne.n	360da <pdn_state_get_parser+0x16>
   36120:	e7e6      	b.n	360f0 <pdn_state_get_parser+0x2c>
   36122:	460d      	mov	r5, r1
   36124:	e7e4      	b.n	360f0 <pdn_state_get_parser+0x2c>
   36126:	bf00      	nop
   36128:	20025310 	.word	0x20025310
   3612c:	00047200 	.word	0x00047200

00036130 <pdn_id_get_parser>:
   36130:	b570      	push	{r4, r5, r6, lr}
   36132:	780b      	ldrb	r3, [r1, #0]
   36134:	4606      	mov	r6, r0
   36136:	b313      	cbz	r3, 3617e <pdn_id_get_parser+0x4e>
   36138:	4608      	mov	r0, r1
   3613a:	2400      	movs	r4, #0
   3613c:	460a      	mov	r2, r1
   3613e:	2b20      	cmp	r3, #32
   36140:	4615      	mov	r5, r2
   36142:	d017      	beq.n	36174 <pdn_id_get_parser+0x44>
   36144:	7013      	strb	r3, [r2, #0]
   36146:	3401      	adds	r4, #1
   36148:	f810 3f01 	ldrb.w	r3, [r0, #1]!
   3614c:	190a      	adds	r2, r1, r4
   3614e:	4615      	mov	r5, r2
   36150:	2b00      	cmp	r3, #0
   36152:	d1f4      	bne.n	3613e <pdn_id_get_parser+0xe>
   36154:	2300      	movs	r3, #0
   36156:	4608      	mov	r0, r1
   36158:	702b      	strb	r3, [r5, #0]
   3615a:	213a      	movs	r1, #58	; 0x3a
   3615c:	f00e ffeb 	bl	45136 <strchr>
   36160:	b130      	cbz	r0, 36170 <pdn_id_get_parser+0x40>
   36162:	3001      	adds	r0, #1
   36164:	f00e fe54 	bl	44e10 <atoi>
   36168:	4b06      	ldr	r3, [pc, #24]	; (36184 <pdn_id_get_parser+0x54>)
   3616a:	f853 3026 	ldr.w	r3, [r3, r6, lsl #2]
   3616e:	6058      	str	r0, [r3, #4]
   36170:	2000      	movs	r0, #0
   36172:	bd70      	pop	{r4, r5, r6, pc}
   36174:	f810 3f01 	ldrb.w	r3, [r0, #1]!
   36178:	2b00      	cmp	r3, #0
   3617a:	d1e0      	bne.n	3613e <pdn_id_get_parser+0xe>
   3617c:	e7ea      	b.n	36154 <pdn_id_get_parser+0x24>
   3617e:	460d      	mov	r5, r1
   36180:	e7e8      	b.n	36154 <pdn_id_get_parser+0x24>
   36182:	bf00      	nop
   36184:	20025310 	.word	0x20025310

00036188 <context_create_parser>:
   36188:	b570      	push	{r4, r5, r6, lr}
   3618a:	780b      	ldrb	r3, [r1, #0]
   3618c:	4606      	mov	r6, r0
   3618e:	b313      	cbz	r3, 361d6 <context_create_parser+0x4e>
   36190:	4608      	mov	r0, r1
   36192:	2400      	movs	r4, #0
   36194:	460a      	mov	r2, r1
   36196:	2b20      	cmp	r3, #32
   36198:	4615      	mov	r5, r2
   3619a:	d017      	beq.n	361cc <context_create_parser+0x44>
   3619c:	7013      	strb	r3, [r2, #0]
   3619e:	3401      	adds	r4, #1
   361a0:	f810 3f01 	ldrb.w	r3, [r0, #1]!
   361a4:	190a      	adds	r2, r1, r4
   361a6:	4615      	mov	r5, r2
   361a8:	2b00      	cmp	r3, #0
   361aa:	d1f4      	bne.n	36196 <context_create_parser+0xe>
   361ac:	2300      	movs	r3, #0
   361ae:	4608      	mov	r0, r1
   361b0:	702b      	strb	r3, [r5, #0]
   361b2:	213a      	movs	r1, #58	; 0x3a
   361b4:	f00e ffbf 	bl	45136 <strchr>
   361b8:	b130      	cbz	r0, 361c8 <context_create_parser+0x40>
   361ba:	4b08      	ldr	r3, [pc, #32]	; (361dc <context_create_parser+0x54>)
   361bc:	3001      	adds	r0, #1
   361be:	f853 4026 	ldr.w	r4, [r3, r6, lsl #2]
   361c2:	f00e fe25 	bl	44e10 <atoi>
   361c6:	6020      	str	r0, [r4, #0]
   361c8:	2000      	movs	r0, #0
   361ca:	bd70      	pop	{r4, r5, r6, pc}
   361cc:	f810 3f01 	ldrb.w	r3, [r0, #1]!
   361d0:	2b00      	cmp	r3, #0
   361d2:	d1e0      	bne.n	36196 <context_create_parser+0xe>
   361d4:	e7ea      	b.n	361ac <context_create_parser+0x24>
   361d6:	460d      	mov	r5, r1
   361d8:	e7e8      	b.n	361ac <context_create_parser+0x24>
   361da:	bf00      	nop
   361dc:	20025310 	.word	0x20025310

000361e0 <pdn_interface_init>:
   361e0:	f04f 33ff 	mov.w	r3, #4294967295
   361e4:	b510      	push	{r4, lr}
   361e6:	4c09      	ldr	r4, [pc, #36]	; (3620c <pdn_interface_init+0x2c>)
   361e8:	2228      	movs	r2, #40	; 0x28
   361ea:	2100      	movs	r1, #0
   361ec:	4808      	ldr	r0, [pc, #32]	; (36210 <pdn_interface_init+0x30>)
   361ee:	6023      	str	r3, [r4, #0]
   361f0:	f00e fe68 	bl	44ec4 <memset>
   361f4:	f240 2201 	movw	r2, #513	; 0x201
   361f8:	2102      	movs	r1, #2
   361fa:	2066      	movs	r0, #102	; 0x66
   361fc:	f7fd f838 	bl	33270 <at_interface_open>
   36200:	2800      	cmp	r0, #0
   36202:	6020      	str	r0, [r4, #0]
   36204:	bfb4      	ite	lt
   36206:	2003      	movlt	r0, #3
   36208:	2000      	movge	r0, #0
   3620a:	bd10      	pop	{r4, pc}
   3620c:	2002520c 	.word	0x2002520c
   36210:	20025310 	.word	0x20025310

00036214 <pdn_interface_open>:
   36214:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   36218:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
   3621c:	b083      	sub	sp, #12
   3621e:	f040 80ad 	bne.w	3637c <pdn_interface_open+0x168>
   36222:	4c5f      	ldr	r4, [pc, #380]	; (363a0 <pdn_interface_open+0x18c>)
   36224:	6825      	ldr	r5, [r4, #0]
   36226:	b34d      	cbz	r5, 3627c <pdn_interface_open+0x68>
   36228:	6863      	ldr	r3, [r4, #4]
   3622a:	2b00      	cmp	r3, #0
   3622c:	f000 8098 	beq.w	36360 <pdn_interface_open+0x14c>
   36230:	68a3      	ldr	r3, [r4, #8]
   36232:	2b00      	cmp	r3, #0
   36234:	f000 8096 	beq.w	36364 <pdn_interface_open+0x150>
   36238:	68e3      	ldr	r3, [r4, #12]
   3623a:	2b00      	cmp	r3, #0
   3623c:	f000 8094 	beq.w	36368 <pdn_interface_open+0x154>
   36240:	6923      	ldr	r3, [r4, #16]
   36242:	2b00      	cmp	r3, #0
   36244:	f000 8092 	beq.w	3636c <pdn_interface_open+0x158>
   36248:	6963      	ldr	r3, [r4, #20]
   3624a:	2b00      	cmp	r3, #0
   3624c:	f000 8090 	beq.w	36370 <pdn_interface_open+0x15c>
   36250:	69a3      	ldr	r3, [r4, #24]
   36252:	2b00      	cmp	r3, #0
   36254:	f000 808e 	beq.w	36374 <pdn_interface_open+0x160>
   36258:	69e3      	ldr	r3, [r4, #28]
   3625a:	2b00      	cmp	r3, #0
   3625c:	f000 808c 	beq.w	36378 <pdn_interface_open+0x164>
   36260:	6a23      	ldr	r3, [r4, #32]
   36262:	b153      	cbz	r3, 3627a <pdn_interface_open+0x66>
   36264:	6a63      	ldr	r3, [r4, #36]	; 0x24
   36266:	2509      	movs	r5, #9
   36268:	b143      	cbz	r3, 3627c <pdn_interface_open+0x68>
   3626a:	200c      	movs	r0, #12
   3626c:	f7f9 ff92 	bl	30194 <bsd_os_errno_set>
   36270:	f04f 30ff 	mov.w	r0, #4294967295
   36274:	b003      	add	sp, #12
   36276:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   3627a:	2508      	movs	r5, #8
   3627c:	2074      	movs	r0, #116	; 0x74
   3627e:	f7fd fd39 	bl	33cf4 <nrf_malloc>
   36282:	f844 0025 	str.w	r0, [r4, r5, lsl #2]
   36286:	2800      	cmp	r0, #0
   36288:	d0ef      	beq.n	3626a <pdn_interface_open+0x56>
   3628a:	2274      	movs	r2, #116	; 0x74
   3628c:	2100      	movs	r1, #0
   3628e:	f00e fe19 	bl	44ec4 <memset>
   36292:	2101      	movs	r1, #1
   36294:	2003      	movs	r0, #3
   36296:	f04f 37ff 	mov.w	r7, #4294967295
   3629a:	f854 3025 	ldr.w	r3, [r4, r5, lsl #2]
   3629e:	4a41      	ldr	r2, [pc, #260]	; (363a4 <pdn_interface_open+0x190>)
   362a0:	6099      	str	r1, [r3, #8]
   362a2:	f854 3025 	ldr.w	r3, [r4, r5, lsl #2]
   362a6:	f44f 7180 	mov.w	r1, #256	; 0x100
   362aa:	6718      	str	r0, [r3, #112]	; 0x70
   362ac:	605f      	str	r7, [r3, #4]
   362ae:	483e      	ldr	r0, [pc, #248]	; (363a8 <pdn_interface_open+0x194>)
   362b0:	f8df 8100 	ldr.w	r8, [pc, #256]	; 363b4 <pdn_interface_open+0x1a0>
   362b4:	f009 f866 	bl	3f384 <sniprintf>
   362b8:	483b      	ldr	r0, [pc, #236]	; (363a8 <pdn_interface_open+0x194>)
   362ba:	f8d8 9000 	ldr.w	r9, [r8]
   362be:	2600      	movs	r6, #0
   362c0:	f7e6 ff2a 	bl	1d118 <strlen>
   362c4:	4633      	mov	r3, r6
   362c6:	4602      	mov	r2, r0
   362c8:	4937      	ldr	r1, [pc, #220]	; (363a8 <pdn_interface_open+0x194>)
   362ca:	4648      	mov	r0, r9
   362cc:	9601      	str	r6, [sp, #4]
   362ce:	9600      	str	r6, [sp, #0]
   362d0:	f7fc ff60 	bl	33194 <at_interface_write>
   362d4:	4681      	mov	r9, r0
   362d6:	4834      	ldr	r0, [pc, #208]	; (363a8 <pdn_interface_open+0x194>)
   362d8:	f7e6 ff1e 	bl	1d118 <strlen>
   362dc:	4548      	cmp	r0, r9
   362de:	d153      	bne.n	36388 <pdn_interface_open+0x174>
   362e0:	4633      	mov	r3, r6
   362e2:	e9cd 6600 	strd	r6, r6, [sp]
   362e6:	f44f 7280 	mov.w	r2, #256	; 0x100
   362ea:	492f      	ldr	r1, [pc, #188]	; (363a8 <pdn_interface_open+0x194>)
   362ec:	f8d8 0000 	ldr.w	r0, [r8]
   362f0:	f7fd f854 	bl	3339c <at_interface_read>
   362f4:	4606      	mov	r6, r0
   362f6:	482d      	ldr	r0, [pc, #180]	; (363ac <pdn_interface_open+0x198>)
   362f8:	f7e6 ff0e 	bl	1d118 <strlen>
   362fc:	4286      	cmp	r6, r0
   362fe:	db15      	blt.n	3632c <pdn_interface_open+0x118>
   36300:	4602      	mov	r2, r0
   36302:	4929      	ldr	r1, [pc, #164]	; (363a8 <pdn_interface_open+0x194>)
   36304:	4829      	ldr	r0, [pc, #164]	; (363ac <pdn_interface_open+0x198>)
   36306:	f00e ff2b 	bl	45160 <strncmp>
   3630a:	b978      	cbnz	r0, 3632c <pdn_interface_open+0x118>
   3630c:	4926      	ldr	r1, [pc, #152]	; (363a8 <pdn_interface_open+0x194>)
   3630e:	4628      	mov	r0, r5
   36310:	f7ff ff3a 	bl	36188 <context_create_parser>
   36314:	b9b0      	cbnz	r0, 36344 <pdn_interface_open+0x130>
   36316:	2202      	movs	r2, #2
   36318:	f854 3025 	ldr.w	r3, [r4, r5, lsl #2]
   3631c:	f045 40f1 	orr.w	r0, r5, #2021654528	; 0x78800000
   36320:	f440 10d0 	orr.w	r0, r0, #1703936	; 0x1a0000
   36324:	609a      	str	r2, [r3, #8]
   36326:	b003      	add	sp, #12
   36328:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   3632c:	4820      	ldr	r0, [pc, #128]	; (363b0 <pdn_interface_open+0x19c>)
   3632e:	f7e6 fef3 	bl	1d118 <strlen>
   36332:	491d      	ldr	r1, [pc, #116]	; (363a8 <pdn_interface_open+0x194>)
   36334:	4602      	mov	r2, r0
   36336:	481e      	ldr	r0, [pc, #120]	; (363b0 <pdn_interface_open+0x19c>)
   36338:	f00e ff12 	bl	45160 <strncmp>
   3633c:	b960      	cbnz	r0, 36358 <pdn_interface_open+0x144>
   3633e:	2008      	movs	r0, #8
   36340:	f7f9 ff28 	bl	30194 <bsd_os_errno_set>
   36344:	f854 0025 	ldr.w	r0, [r4, r5, lsl #2]
   36348:	f7fd fcde 	bl	33d08 <nrf_free>
   3634c:	2300      	movs	r3, #0
   3634e:	f04f 30ff 	mov.w	r0, #4294967295
   36352:	f844 3025 	str.w	r3, [r4, r5, lsl #2]
   36356:	e78d      	b.n	36274 <pdn_interface_open+0x60>
   36358:	2005      	movs	r0, #5
   3635a:	f7f9 ff1b 	bl	30194 <bsd_os_errno_set>
   3635e:	e7f1      	b.n	36344 <pdn_interface_open+0x130>
   36360:	2501      	movs	r5, #1
   36362:	e78b      	b.n	3627c <pdn_interface_open+0x68>
   36364:	2502      	movs	r5, #2
   36366:	e789      	b.n	3627c <pdn_interface_open+0x68>
   36368:	2503      	movs	r5, #3
   3636a:	e787      	b.n	3627c <pdn_interface_open+0x68>
   3636c:	2504      	movs	r5, #4
   3636e:	e785      	b.n	3627c <pdn_interface_open+0x68>
   36370:	2505      	movs	r5, #5
   36372:	e783      	b.n	3627c <pdn_interface_open+0x68>
   36374:	2506      	movs	r5, #6
   36376:	e781      	b.n	3627c <pdn_interface_open+0x68>
   36378:	2507      	movs	r5, #7
   3637a:	e77f      	b.n	3627c <pdn_interface_open+0x68>
   3637c:	2029      	movs	r0, #41	; 0x29
   3637e:	f7f9 ff09 	bl	30194 <bsd_os_errno_set>
   36382:	f04f 30ff 	mov.w	r0, #4294967295
   36386:	e775      	b.n	36274 <pdn_interface_open+0x60>
   36388:	2005      	movs	r0, #5
   3638a:	f7f9 ff03 	bl	30194 <bsd_os_errno_set>
   3638e:	f854 0025 	ldr.w	r0, [r4, r5, lsl #2]
   36392:	f7fd fcb9 	bl	33d08 <nrf_free>
   36396:	f844 6025 	str.w	r6, [r4, r5, lsl #2]
   3639a:	4638      	mov	r0, r7
   3639c:	e76a      	b.n	36274 <pdn_interface_open+0x60>
   3639e:	bf00      	nop
   363a0:	20025310 	.word	0x20025310
   363a4:	000471dc 	.word	0x000471dc
   363a8:	20025210 	.word	0x20025210
   363ac:	000471ec 	.word	0x000471ec
   363b0:	000471f8 	.word	0x000471f8
   363b4:	2002520c 	.word	0x2002520c

000363b8 <pdn_interface_connect>:
   363b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   363bc:	b083      	sub	sp, #12
   363be:	2900      	cmp	r1, #0
   363c0:	f000 813d 	beq.w	3663e <pdn_interface_connect+0x286>
   363c4:	2a64      	cmp	r2, #100	; 0x64
   363c6:	4691      	mov	r9, r2
   363c8:	f200 8139 	bhi.w	3663e <pdn_interface_connect+0x286>
   363cc:	4605      	mov	r5, r0
   363ce:	4608      	mov	r0, r1
   363d0:	4688      	mov	r8, r1
   363d2:	f7e6 fea1 	bl	1d118 <strlen>
   363d6:	2864      	cmp	r0, #100	; 0x64
   363d8:	f200 8131 	bhi.w	3663e <pdn_interface_connect+0x286>
   363dc:	0c2b      	lsrs	r3, r5, #16
   363de:	4aa5      	ldr	r2, [pc, #660]	; (36674 <pdn_interface_connect+0x2bc>)
   363e0:	041b      	lsls	r3, r3, #16
   363e2:	4293      	cmp	r3, r2
   363e4:	f040 8122 	bne.w	3662c <pdn_interface_connect+0x274>
   363e8:	f025 45f1 	bic.w	r5, r5, #2021654528	; 0x78800000
   363ec:	f425 15d0 	bic.w	r5, r5, #1703936	; 0x1a0000
   363f0:	2d09      	cmp	r5, #9
   363f2:	f300 811b 	bgt.w	3662c <pdn_interface_connect+0x274>
   363f6:	4fa0      	ldr	r7, [pc, #640]	; (36678 <pdn_interface_connect+0x2c0>)
   363f8:	f857 3025 	ldr.w	r3, [r7, r5, lsl #2]
   363fc:	2b00      	cmp	r3, #0
   363fe:	f000 8115 	beq.w	3662c <pdn_interface_connect+0x274>
   36402:	689a      	ldr	r2, [r3, #8]
   36404:	2a00      	cmp	r2, #0
   36406:	f000 8111 	beq.w	3662c <pdn_interface_connect+0x274>
   3640a:	689b      	ldr	r3, [r3, #8]
   3640c:	2b02      	cmp	r3, #2
   3640e:	f040 810d 	bne.w	3662c <pdn_interface_connect+0x274>
   36412:	4e9a      	ldr	r6, [pc, #616]	; (3667c <pdn_interface_connect+0x2c4>)
   36414:	4a9a      	ldr	r2, [pc, #616]	; (36680 <pdn_interface_connect+0x2c8>)
   36416:	f44f 7180 	mov.w	r1, #256	; 0x100
   3641a:	4630      	mov	r0, r6
   3641c:	f008 ffb2 	bl	3f384 <sniprintf>
   36420:	f857 3025 	ldr.w	r3, [r7, r5, lsl #2]
   36424:	4604      	mov	r4, r0
   36426:	f5c0 7180 	rsb	r1, r0, #256	; 0x100
   3642a:	681b      	ldr	r3, [r3, #0]
   3642c:	4a95      	ldr	r2, [pc, #596]	; (36684 <pdn_interface_connect+0x2cc>)
   3642e:	1830      	adds	r0, r6, r0
   36430:	f008 ffa8 	bl	3f384 <sniprintf>
   36434:	f857 3025 	ldr.w	r3, [r7, r5, lsl #2]
   36438:	4404      	add	r4, r0
   3643a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
   3643c:	f003 0203 	and.w	r2, r3, #3
   36440:	2a03      	cmp	r2, #3
   36442:	f000 80ea 	beq.w	3661a <pdn_interface_connect+0x262>
   36446:	079b      	lsls	r3, r3, #30
   36448:	eb06 0004 	add.w	r0, r6, r4
   3644c:	f5c4 7180 	rsb	r1, r4, #256	; 0x100
   36450:	bf4c      	ite	mi
   36452:	4b8d      	ldrmi	r3, [pc, #564]	; (36688 <pdn_interface_connect+0x2d0>)
   36454:	4b8d      	ldrpl	r3, [pc, #564]	; (3668c <pdn_interface_connect+0x2d4>)
   36456:	4a8e      	ldr	r2, [pc, #568]	; (36690 <pdn_interface_connect+0x2d8>)
   36458:	f008 ff94 	bl	3f384 <sniprintf>
   3645c:	4404      	add	r4, r0
   3645e:	4643      	mov	r3, r8
   36460:	4a8c      	ldr	r2, [pc, #560]	; (36694 <pdn_interface_connect+0x2dc>)
   36462:	f5c4 7180 	rsb	r1, r4, #256	; 0x100
   36466:	1930      	adds	r0, r6, r4
   36468:	f008 ff8c 	bl	3f384 <sniprintf>
   3646c:	4420      	add	r0, r4
   3646e:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
   36472:	f300 80f7 	bgt.w	36664 <pdn_interface_connect+0x2ac>
   36476:	f8df a23c 	ldr.w	sl, [pc, #572]	; 366b4 <pdn_interface_connect+0x2fc>
   3647a:	4880      	ldr	r0, [pc, #512]	; (3667c <pdn_interface_connect+0x2c4>)
   3647c:	f8da b000 	ldr.w	fp, [sl]
   36480:	2400      	movs	r4, #0
   36482:	f7e6 fe49 	bl	1d118 <strlen>
   36486:	4623      	mov	r3, r4
   36488:	4602      	mov	r2, r0
   3648a:	497c      	ldr	r1, [pc, #496]	; (3667c <pdn_interface_connect+0x2c4>)
   3648c:	4658      	mov	r0, fp
   3648e:	9401      	str	r4, [sp, #4]
   36490:	9400      	str	r4, [sp, #0]
   36492:	f7fc fe7f 	bl	33194 <at_interface_write>
   36496:	4683      	mov	fp, r0
   36498:	4878      	ldr	r0, [pc, #480]	; (3667c <pdn_interface_connect+0x2c4>)
   3649a:	f7e6 fe3d 	bl	1d118 <strlen>
   3649e:	4558      	cmp	r0, fp
   364a0:	d008      	beq.n	364b4 <pdn_interface_connect+0xfc>
   364a2:	2005      	movs	r0, #5
   364a4:	f7f9 fe76 	bl	30194 <bsd_os_errno_set>
   364a8:	f04f 34ff 	mov.w	r4, #4294967295
   364ac:	4620      	mov	r0, r4
   364ae:	b003      	add	sp, #12
   364b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   364b4:	4623      	mov	r3, r4
   364b6:	e9cd 4400 	strd	r4, r4, [sp]
   364ba:	f44f 7280 	mov.w	r2, #256	; 0x100
   364be:	496f      	ldr	r1, [pc, #444]	; (3667c <pdn_interface_connect+0x2c4>)
   364c0:	f8da 0000 	ldr.w	r0, [sl]
   364c4:	f7fc ff6a 	bl	3339c <at_interface_read>
   364c8:	4604      	mov	r4, r0
   364ca:	4873      	ldr	r0, [pc, #460]	; (36698 <pdn_interface_connect+0x2e0>)
   364cc:	f7e6 fe24 	bl	1d118 <strlen>
   364d0:	4284      	cmp	r4, r0
   364d2:	f2c0 8091 	blt.w	365f8 <pdn_interface_connect+0x240>
   364d6:	4602      	mov	r2, r0
   364d8:	4968      	ldr	r1, [pc, #416]	; (3667c <pdn_interface_connect+0x2c4>)
   364da:	486f      	ldr	r0, [pc, #444]	; (36698 <pdn_interface_connect+0x2e0>)
   364dc:	f00e fe40 	bl	45160 <strncmp>
   364e0:	2800      	cmp	r0, #0
   364e2:	f040 8089 	bne.w	365f8 <pdn_interface_connect+0x240>
   364e6:	4965      	ldr	r1, [pc, #404]	; (3667c <pdn_interface_connect+0x2c4>)
   364e8:	4628      	mov	r0, r5
   364ea:	f7ff fde9 	bl	360c0 <ok_rsp_parser>
   364ee:	4604      	mov	r4, r0
   364f0:	2800      	cmp	r0, #0
   364f2:	d1db      	bne.n	364ac <pdn_interface_connect+0xf4>
   364f4:	4a69      	ldr	r2, [pc, #420]	; (3669c <pdn_interface_connect+0x2e4>)
   364f6:	f44f 7180 	mov.w	r1, #256	; 0x100
   364fa:	4860      	ldr	r0, [pc, #384]	; (3667c <pdn_interface_connect+0x2c4>)
   364fc:	f008 ff42 	bl	3f384 <sniprintf>
   36500:	f857 3025 	ldr.w	r3, [r7, r5, lsl #2]
   36504:	f5c0 7180 	rsb	r1, r0, #256	; 0x100
   36508:	681b      	ldr	r3, [r3, #0]
   3650a:	4a65      	ldr	r2, [pc, #404]	; (366a0 <pdn_interface_connect+0x2e8>)
   3650c:	4430      	add	r0, r6
   3650e:	f008 ff39 	bl	3f384 <sniprintf>
   36512:	485a      	ldr	r0, [pc, #360]	; (3667c <pdn_interface_connect+0x2c4>)
   36514:	f8da b000 	ldr.w	fp, [sl]
   36518:	f7e6 fdfe 	bl	1d118 <strlen>
   3651c:	4623      	mov	r3, r4
   3651e:	4602      	mov	r2, r0
   36520:	4956      	ldr	r1, [pc, #344]	; (3667c <pdn_interface_connect+0x2c4>)
   36522:	4658      	mov	r0, fp
   36524:	9401      	str	r4, [sp, #4]
   36526:	9400      	str	r4, [sp, #0]
   36528:	f7fc fe34 	bl	33194 <at_interface_write>
   3652c:	4683      	mov	fp, r0
   3652e:	4853      	ldr	r0, [pc, #332]	; (3667c <pdn_interface_connect+0x2c4>)
   36530:	f7e6 fdf2 	bl	1d118 <strlen>
   36534:	4558      	cmp	r0, fp
   36536:	d1b4      	bne.n	364a2 <pdn_interface_connect+0xea>
   36538:	4623      	mov	r3, r4
   3653a:	f44f 7280 	mov.w	r2, #256	; 0x100
   3653e:	494f      	ldr	r1, [pc, #316]	; (3667c <pdn_interface_connect+0x2c4>)
   36540:	f8da 0000 	ldr.w	r0, [sl]
   36544:	e9cd 4400 	strd	r4, r4, [sp]
   36548:	f7fc ff28 	bl	3339c <at_interface_read>
   3654c:	4683      	mov	fp, r0
   3654e:	4852      	ldr	r0, [pc, #328]	; (36698 <pdn_interface_connect+0x2e0>)
   36550:	f7e6 fde2 	bl	1d118 <strlen>
   36554:	4583      	cmp	fp, r0
   36556:	db4f      	blt.n	365f8 <pdn_interface_connect+0x240>
   36558:	4602      	mov	r2, r0
   3655a:	4948      	ldr	r1, [pc, #288]	; (3667c <pdn_interface_connect+0x2c4>)
   3655c:	484e      	ldr	r0, [pc, #312]	; (36698 <pdn_interface_connect+0x2e0>)
   3655e:	f00e fdff 	bl	45160 <strncmp>
   36562:	2800      	cmp	r0, #0
   36564:	d148      	bne.n	365f8 <pdn_interface_connect+0x240>
   36566:	2103      	movs	r1, #3
   36568:	f857 3025 	ldr.w	r3, [r7, r5, lsl #2]
   3656c:	464a      	mov	r2, r9
   3656e:	6099      	str	r1, [r3, #8]
   36570:	f857 0025 	ldr.w	r0, [r7, r5, lsl #2]
   36574:	4641      	mov	r1, r8
   36576:	300c      	adds	r0, #12
   36578:	f00e fc6a 	bl	44e50 <memcpy>
   3657c:	4a49      	ldr	r2, [pc, #292]	; (366a4 <pdn_interface_connect+0x2ec>)
   3657e:	f44f 7180 	mov.w	r1, #256	; 0x100
   36582:	483e      	ldr	r0, [pc, #248]	; (3667c <pdn_interface_connect+0x2c4>)
   36584:	f008 fefe 	bl	3f384 <sniprintf>
   36588:	4601      	mov	r1, r0
   3658a:	f857 3025 	ldr.w	r3, [r7, r5, lsl #2]
   3658e:	f5c1 7180 	rsb	r1, r1, #256	; 0x100
   36592:	681b      	ldr	r3, [r3, #0]
   36594:	4a42      	ldr	r2, [pc, #264]	; (366a0 <pdn_interface_connect+0x2e8>)
   36596:	1830      	adds	r0, r6, r0
   36598:	f008 fef4 	bl	3f384 <sniprintf>
   3659c:	4837      	ldr	r0, [pc, #220]	; (3667c <pdn_interface_connect+0x2c4>)
   3659e:	f8da 6000 	ldr.w	r6, [sl]
   365a2:	f7e6 fdb9 	bl	1d118 <strlen>
   365a6:	4623      	mov	r3, r4
   365a8:	4602      	mov	r2, r0
   365aa:	4934      	ldr	r1, [pc, #208]	; (3667c <pdn_interface_connect+0x2c4>)
   365ac:	4630      	mov	r0, r6
   365ae:	9401      	str	r4, [sp, #4]
   365b0:	9400      	str	r4, [sp, #0]
   365b2:	f7fc fdef 	bl	33194 <at_interface_write>
   365b6:	4606      	mov	r6, r0
   365b8:	4830      	ldr	r0, [pc, #192]	; (3667c <pdn_interface_connect+0x2c4>)
   365ba:	f7e6 fdad 	bl	1d118 <strlen>
   365be:	42b0      	cmp	r0, r6
   365c0:	d153      	bne.n	3666a <pdn_interface_connect+0x2b2>
   365c2:	4623      	mov	r3, r4
   365c4:	f44f 7280 	mov.w	r2, #256	; 0x100
   365c8:	492c      	ldr	r1, [pc, #176]	; (3667c <pdn_interface_connect+0x2c4>)
   365ca:	f8da 0000 	ldr.w	r0, [sl]
   365ce:	e9cd 4400 	strd	r4, r4, [sp]
   365d2:	f7fc fee3 	bl	3339c <at_interface_read>
   365d6:	4606      	mov	r6, r0
   365d8:	4833      	ldr	r0, [pc, #204]	; (366a8 <pdn_interface_connect+0x2f0>)
   365da:	f7e6 fd9d 	bl	1d118 <strlen>
   365de:	4286      	cmp	r6, r0
   365e0:	db33      	blt.n	3664a <pdn_interface_connect+0x292>
   365e2:	4602      	mov	r2, r0
   365e4:	4925      	ldr	r1, [pc, #148]	; (3667c <pdn_interface_connect+0x2c4>)
   365e6:	4830      	ldr	r0, [pc, #192]	; (366a8 <pdn_interface_connect+0x2f0>)
   365e8:	f00e fdba 	bl	45160 <strncmp>
   365ec:	bb68      	cbnz	r0, 3664a <pdn_interface_connect+0x292>
   365ee:	4628      	mov	r0, r5
   365f0:	4922      	ldr	r1, [pc, #136]	; (3667c <pdn_interface_connect+0x2c4>)
   365f2:	f7ff fd9d 	bl	36130 <pdn_id_get_parser>
   365f6:	e759      	b.n	364ac <pdn_interface_connect+0xf4>
   365f8:	482c      	ldr	r0, [pc, #176]	; (366ac <pdn_interface_connect+0x2f4>)
   365fa:	f7e6 fd8d 	bl	1d118 <strlen>
   365fe:	491f      	ldr	r1, [pc, #124]	; (3667c <pdn_interface_connect+0x2c4>)
   36600:	4602      	mov	r2, r0
   36602:	482a      	ldr	r0, [pc, #168]	; (366ac <pdn_interface_connect+0x2f4>)
   36604:	f00e fdac 	bl	45160 <strncmp>
   36608:	2800      	cmp	r0, #0
   3660a:	f47f af4a 	bne.w	364a2 <pdn_interface_connect+0xea>
   3660e:	2008      	movs	r0, #8
   36610:	f7f9 fdc0 	bl	30194 <bsd_os_errno_set>
   36614:	f04f 34ff 	mov.w	r4, #4294967295
   36618:	e748      	b.n	364ac <pdn_interface_connect+0xf4>
   3661a:	f5c4 7180 	rsb	r1, r4, #256	; 0x100
   3661e:	1930      	adds	r0, r6, r4
   36620:	4b23      	ldr	r3, [pc, #140]	; (366b0 <pdn_interface_connect+0x2f8>)
   36622:	4a1b      	ldr	r2, [pc, #108]	; (36690 <pdn_interface_connect+0x2d8>)
   36624:	f008 feae 	bl	3f384 <sniprintf>
   36628:	4404      	add	r4, r0
   3662a:	e718      	b.n	3645e <pdn_interface_connect+0xa6>
   3662c:	f04f 34ff 	mov.w	r4, #4294967295
   36630:	2009      	movs	r0, #9
   36632:	f7f9 fdaf 	bl	30194 <bsd_os_errno_set>
   36636:	4620      	mov	r0, r4
   36638:	b003      	add	sp, #12
   3663a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3663e:	2016      	movs	r0, #22
   36640:	f7f9 fda8 	bl	30194 <bsd_os_errno_set>
   36644:	f04f 34ff 	mov.w	r4, #4294967295
   36648:	e730      	b.n	364ac <pdn_interface_connect+0xf4>
   3664a:	4818      	ldr	r0, [pc, #96]	; (366ac <pdn_interface_connect+0x2f4>)
   3664c:	f7e6 fd64 	bl	1d118 <strlen>
   36650:	490a      	ldr	r1, [pc, #40]	; (3667c <pdn_interface_connect+0x2c4>)
   36652:	4602      	mov	r2, r0
   36654:	4815      	ldr	r0, [pc, #84]	; (366ac <pdn_interface_connect+0x2f4>)
   36656:	f00e fd83 	bl	45160 <strncmp>
   3665a:	b930      	cbnz	r0, 3666a <pdn_interface_connect+0x2b2>
   3665c:	2008      	movs	r0, #8
   3665e:	f7f9 fd99 	bl	30194 <bsd_os_errno_set>
   36662:	e723      	b.n	364ac <pdn_interface_connect+0xf4>
   36664:	f04f 34ff 	mov.w	r4, #4294967295
   36668:	e720      	b.n	364ac <pdn_interface_connect+0xf4>
   3666a:	2005      	movs	r0, #5
   3666c:	f7f9 fd92 	bl	30194 <bsd_os_errno_set>
   36670:	e71c      	b.n	364ac <pdn_interface_connect+0xf4>
   36672:	bf00      	nop
   36674:	789a0000 	.word	0x789a0000
   36678:	20025310 	.word	0x20025310
   3667c:	20025210 	.word	0x20025210
   36680:	00047164 	.word	0x00047164
   36684:	00047170 	.word	0x00047170
   36688:	00047184 	.word	0x00047184
   3668c:	0004718c 	.word	0x0004718c
   36690:	0004717c 	.word	0x0004717c
   36694:	000471c0 	.word	0x000471c0
   36698:	00047190 	.word	0x00047190
   3669c:	00047194 	.word	0x00047194
   366a0:	000471a0 	.word	0x000471a0
   366a4:	000471a4 	.word	0x000471a4
   366a8:	000471b4 	.word	0x000471b4
   366ac:	000471f8 	.word	0x000471f8
   366b0:	00047174 	.word	0x00047174
   366b4:	2002520c 	.word	0x2002520c

000366b8 <pdn_interface_close>:
   366b8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   366bc:	4a64      	ldr	r2, [pc, #400]	; (36850 <pdn_interface_close+0x198>)
   366be:	0c03      	lsrs	r3, r0, #16
   366c0:	041b      	lsls	r3, r3, #16
   366c2:	4293      	cmp	r3, r2
   366c4:	b083      	sub	sp, #12
   366c6:	f040 809d 	bne.w	36804 <pdn_interface_close+0x14c>
   366ca:	f020 44f1 	bic.w	r4, r0, #2021654528	; 0x78800000
   366ce:	f424 14d0 	bic.w	r4, r4, #1703936	; 0x1a0000
   366d2:	2c09      	cmp	r4, #9
   366d4:	f300 8096 	bgt.w	36804 <pdn_interface_close+0x14c>
   366d8:	4d5e      	ldr	r5, [pc, #376]	; (36854 <pdn_interface_close+0x19c>)
   366da:	f855 0024 	ldr.w	r0, [r5, r4, lsl #2]
   366de:	2800      	cmp	r0, #0
   366e0:	f000 8090 	beq.w	36804 <pdn_interface_close+0x14c>
   366e4:	6883      	ldr	r3, [r0, #8]
   366e6:	2b00      	cmp	r3, #0
   366e8:	f000 808c 	beq.w	36804 <pdn_interface_close+0x14c>
   366ec:	6883      	ldr	r3, [r0, #8]
   366ee:	2b03      	cmp	r3, #3
   366f0:	d008      	beq.n	36704 <pdn_interface_close+0x4c>
   366f2:	f7fd fb09 	bl	33d08 <nrf_free>
   366f6:	2300      	movs	r3, #0
   366f8:	4618      	mov	r0, r3
   366fa:	f845 3024 	str.w	r3, [r5, r4, lsl #2]
   366fe:	b003      	add	sp, #12
   36700:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   36704:	4e54      	ldr	r6, [pc, #336]	; (36858 <pdn_interface_close+0x1a0>)
   36706:	4a55      	ldr	r2, [pc, #340]	; (3685c <pdn_interface_close+0x1a4>)
   36708:	f44f 7180 	mov.w	r1, #256	; 0x100
   3670c:	4630      	mov	r0, r6
   3670e:	f008 fe39 	bl	3f384 <sniprintf>
   36712:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
   36716:	f5c0 7180 	rsb	r1, r0, #256	; 0x100
   3671a:	681b      	ldr	r3, [r3, #0]
   3671c:	4a50      	ldr	r2, [pc, #320]	; (36860 <pdn_interface_close+0x1a8>)
   3671e:	4430      	add	r0, r6
   36720:	f8df 814c 	ldr.w	r8, [pc, #332]	; 36870 <pdn_interface_close+0x1b8>
   36724:	f008 fe2e 	bl	3f384 <sniprintf>
   36728:	4630      	mov	r0, r6
   3672a:	f8d8 9000 	ldr.w	r9, [r8]
   3672e:	2700      	movs	r7, #0
   36730:	f7e6 fcf2 	bl	1d118 <strlen>
   36734:	4631      	mov	r1, r6
   36736:	4602      	mov	r2, r0
   36738:	463b      	mov	r3, r7
   3673a:	4648      	mov	r0, r9
   3673c:	9701      	str	r7, [sp, #4]
   3673e:	9700      	str	r7, [sp, #0]
   36740:	f7fc fd28 	bl	33194 <at_interface_write>
   36744:	4681      	mov	r9, r0
   36746:	4630      	mov	r0, r6
   36748:	f7e6 fce6 	bl	1d118 <strlen>
   3674c:	4548      	cmp	r0, r9
   3674e:	d176      	bne.n	3683e <pdn_interface_close+0x186>
   36750:	463b      	mov	r3, r7
   36752:	e9cd 7700 	strd	r7, r7, [sp]
   36756:	f44f 7280 	mov.w	r2, #256	; 0x100
   3675a:	4631      	mov	r1, r6
   3675c:	f8d8 0000 	ldr.w	r0, [r8]
   36760:	f7fc fe1c 	bl	3339c <at_interface_read>
   36764:	4607      	mov	r7, r0
   36766:	483f      	ldr	r0, [pc, #252]	; (36864 <pdn_interface_close+0x1ac>)
   36768:	f7e6 fcd6 	bl	1d118 <strlen>
   3676c:	4287      	cmp	r7, r0
   3676e:	da4f      	bge.n	36810 <pdn_interface_close+0x158>
   36770:	483d      	ldr	r0, [pc, #244]	; (36868 <pdn_interface_close+0x1b0>)
   36772:	f7e6 fcd1 	bl	1d118 <strlen>
   36776:	4938      	ldr	r1, [pc, #224]	; (36858 <pdn_interface_close+0x1a0>)
   36778:	4602      	mov	r2, r0
   3677a:	483b      	ldr	r0, [pc, #236]	; (36868 <pdn_interface_close+0x1b0>)
   3677c:	f00e fcf0 	bl	45160 <strncmp>
   36780:	2800      	cmp	r0, #0
   36782:	d15c      	bne.n	3683e <pdn_interface_close+0x186>
   36784:	2008      	movs	r0, #8
   36786:	f7f9 fd05 	bl	30194 <bsd_os_errno_set>
   3678a:	4a38      	ldr	r2, [pc, #224]	; (3686c <pdn_interface_close+0x1b4>)
   3678c:	f44f 7180 	mov.w	r1, #256	; 0x100
   36790:	4831      	ldr	r0, [pc, #196]	; (36858 <pdn_interface_close+0x1a0>)
   36792:	f008 fdf7 	bl	3f384 <sniprintf>
   36796:	4601      	mov	r1, r0
   36798:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
   3679c:	f5c1 7180 	rsb	r1, r1, #256	; 0x100
   367a0:	681b      	ldr	r3, [r3, #0]
   367a2:	4a2f      	ldr	r2, [pc, #188]	; (36860 <pdn_interface_close+0x1a8>)
   367a4:	1830      	adds	r0, r6, r0
   367a6:	f008 fded 	bl	3f384 <sniprintf>
   367aa:	482b      	ldr	r0, [pc, #172]	; (36858 <pdn_interface_close+0x1a0>)
   367ac:	f8d8 7000 	ldr.w	r7, [r8]
   367b0:	2600      	movs	r6, #0
   367b2:	f7e6 fcb1 	bl	1d118 <strlen>
   367b6:	4633      	mov	r3, r6
   367b8:	4602      	mov	r2, r0
   367ba:	4927      	ldr	r1, [pc, #156]	; (36858 <pdn_interface_close+0x1a0>)
   367bc:	4638      	mov	r0, r7
   367be:	9601      	str	r6, [sp, #4]
   367c0:	9600      	str	r6, [sp, #0]
   367c2:	f7fc fce7 	bl	33194 <at_interface_write>
   367c6:	4607      	mov	r7, r0
   367c8:	4823      	ldr	r0, [pc, #140]	; (36858 <pdn_interface_close+0x1a0>)
   367ca:	f7e6 fca5 	bl	1d118 <strlen>
   367ce:	42b8      	cmp	r0, r7
   367d0:	d139      	bne.n	36846 <pdn_interface_close+0x18e>
   367d2:	4633      	mov	r3, r6
   367d4:	e9cd 6600 	strd	r6, r6, [sp]
   367d8:	f44f 7280 	mov.w	r2, #256	; 0x100
   367dc:	491e      	ldr	r1, [pc, #120]	; (36858 <pdn_interface_close+0x1a0>)
   367de:	f8d8 0000 	ldr.w	r0, [r8]
   367e2:	f7fc fddb 	bl	3339c <at_interface_read>
   367e6:	4606      	mov	r6, r0
   367e8:	481e      	ldr	r0, [pc, #120]	; (36864 <pdn_interface_close+0x1ac>)
   367ea:	f7e6 fc95 	bl	1d118 <strlen>
   367ee:	4286      	cmp	r6, r0
   367f0:	db16      	blt.n	36820 <pdn_interface_close+0x168>
   367f2:	4602      	mov	r2, r0
   367f4:	4918      	ldr	r1, [pc, #96]	; (36858 <pdn_interface_close+0x1a0>)
   367f6:	481b      	ldr	r0, [pc, #108]	; (36864 <pdn_interface_close+0x1ac>)
   367f8:	f00e fcb2 	bl	45160 <strncmp>
   367fc:	b980      	cbnz	r0, 36820 <pdn_interface_close+0x168>
   367fe:	f855 0024 	ldr.w	r0, [r5, r4, lsl #2]
   36802:	e776      	b.n	366f2 <pdn_interface_close+0x3a>
   36804:	2009      	movs	r0, #9
   36806:	f7f9 fcc5 	bl	30194 <bsd_os_errno_set>
   3680a:	f04f 30ff 	mov.w	r0, #4294967295
   3680e:	e776      	b.n	366fe <pdn_interface_close+0x46>
   36810:	4602      	mov	r2, r0
   36812:	4631      	mov	r1, r6
   36814:	4813      	ldr	r0, [pc, #76]	; (36864 <pdn_interface_close+0x1ac>)
   36816:	f00e fca3 	bl	45160 <strncmp>
   3681a:	2800      	cmp	r0, #0
   3681c:	d0b5      	beq.n	3678a <pdn_interface_close+0xd2>
   3681e:	e7a7      	b.n	36770 <pdn_interface_close+0xb8>
   36820:	4811      	ldr	r0, [pc, #68]	; (36868 <pdn_interface_close+0x1b0>)
   36822:	f7e6 fc79 	bl	1d118 <strlen>
   36826:	490c      	ldr	r1, [pc, #48]	; (36858 <pdn_interface_close+0x1a0>)
   36828:	4602      	mov	r2, r0
   3682a:	480f      	ldr	r0, [pc, #60]	; (36868 <pdn_interface_close+0x1b0>)
   3682c:	f00e fc98 	bl	45160 <strncmp>
   36830:	b948      	cbnz	r0, 36846 <pdn_interface_close+0x18e>
   36832:	2008      	movs	r0, #8
   36834:	f7f9 fcae 	bl	30194 <bsd_os_errno_set>
   36838:	f855 0024 	ldr.w	r0, [r5, r4, lsl #2]
   3683c:	e759      	b.n	366f2 <pdn_interface_close+0x3a>
   3683e:	2005      	movs	r0, #5
   36840:	f7f9 fca8 	bl	30194 <bsd_os_errno_set>
   36844:	e7a1      	b.n	3678a <pdn_interface_close+0xd2>
   36846:	2005      	movs	r0, #5
   36848:	f7f9 fca4 	bl	30194 <bsd_os_errno_set>
   3684c:	e7d7      	b.n	367fe <pdn_interface_close+0x146>
   3684e:	bf00      	nop
   36850:	789a0000 	.word	0x789a0000
   36854:	20025310 	.word	0x20025310
   36858:	20025210 	.word	0x20025210
   3685c:	00047158 	.word	0x00047158
   36860:	000471a0 	.word	0x000471a0
   36864:	00047190 	.word	0x00047190
   36868:	000471f8 	.word	0x000471f8
   3686c:	00047164 	.word	0x00047164
   36870:	2002520c 	.word	0x2002520c

00036874 <pdn_interface_setopt>:
   36874:	b510      	push	{r4, lr}
   36876:	f240 2402 	movw	r4, #514	; 0x202
   3687a:	42a1      	cmp	r1, r4
   3687c:	d10d      	bne.n	3689a <pdn_interface_setopt+0x26>
   3687e:	b163      	cbz	r3, 3689a <pdn_interface_setopt+0x26>
   36880:	9902      	ldr	r1, [sp, #8]
   36882:	b151      	cbz	r1, 3689a <pdn_interface_setopt+0x26>
   36884:	0c01      	lsrs	r1, r0, #16
   36886:	4c25      	ldr	r4, [pc, #148]	; (3691c <pdn_interface_setopt+0xa8>)
   36888:	0409      	lsls	r1, r1, #16
   3688a:	42a1      	cmp	r1, r4
   3688c:	d00b      	beq.n	368a6 <pdn_interface_setopt+0x32>
   3688e:	2009      	movs	r0, #9
   36890:	f7f9 fc80 	bl	30194 <bsd_os_errno_set>
   36894:	f04f 30ff 	mov.w	r0, #4294967295
   36898:	bd10      	pop	{r4, pc}
   3689a:	2016      	movs	r0, #22
   3689c:	f7f9 fc7a 	bl	30194 <bsd_os_errno_set>
   368a0:	f04f 30ff 	mov.w	r0, #4294967295
   368a4:	bd10      	pop	{r4, pc}
   368a6:	f020 40f1 	bic.w	r0, r0, #2021654528	; 0x78800000
   368aa:	f420 10d0 	bic.w	r0, r0, #1703936	; 0x1a0000
   368ae:	2809      	cmp	r0, #9
   368b0:	dced      	bgt.n	3688e <pdn_interface_setopt+0x1a>
   368b2:	491b      	ldr	r1, [pc, #108]	; (36920 <pdn_interface_setopt+0xac>)
   368b4:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
   368b8:	2900      	cmp	r1, #0
   368ba:	d0e8      	beq.n	3688e <pdn_interface_setopt+0x1a>
   368bc:	6888      	ldr	r0, [r1, #8]
   368be:	2800      	cmp	r0, #0
   368c0:	d0e5      	beq.n	3688e <pdn_interface_setopt+0x1a>
   368c2:	2a01      	cmp	r2, #1
   368c4:	d001      	beq.n	368ca <pdn_interface_setopt+0x56>
   368c6:	202d      	movs	r0, #45	; 0x2d
   368c8:	e7e8      	b.n	3689c <pdn_interface_setopt+0x28>
   368ca:	688a      	ldr	r2, [r1, #8]
   368cc:	b1fa      	cbz	r2, 3690e <pdn_interface_setopt+0x9a>
   368ce:	688a      	ldr	r2, [r1, #8]
   368d0:	2a03      	cmp	r2, #3
   368d2:	d01c      	beq.n	3690e <pdn_interface_setopt+0x9a>
   368d4:	688a      	ldr	r2, [r1, #8]
   368d6:	2a04      	cmp	r2, #4
   368d8:	d019      	beq.n	3690e <pdn_interface_setopt+0x9a>
   368da:	9a02      	ldr	r2, [sp, #8]
   368dc:	0890      	lsrs	r0, r2, #2
   368de:	1e42      	subs	r2, r0, #1
   368e0:	2a01      	cmp	r2, #1
   368e2:	d8da      	bhi.n	3689a <pdn_interface_setopt+0x26>
   368e4:	9a02      	ldr	r2, [sp, #8]
   368e6:	0792      	lsls	r2, r2, #30
   368e8:	d1d7      	bne.n	3689a <pdn_interface_setopt+0x26>
   368ea:	681a      	ldr	r2, [r3, #0]
   368ec:	2a02      	cmp	r2, #2
   368ee:	d010      	beq.n	36912 <pdn_interface_setopt+0x9e>
   368f0:	2a0a      	cmp	r2, #10
   368f2:	d1d2      	bne.n	3689a <pdn_interface_setopt+0x26>
   368f4:	2202      	movs	r2, #2
   368f6:	2802      	cmp	r0, #2
   368f8:	d106      	bne.n	36908 <pdn_interface_setopt+0x94>
   368fa:	685b      	ldr	r3, [r3, #4]
   368fc:	2b02      	cmp	r3, #2
   368fe:	d00a      	beq.n	36916 <pdn_interface_setopt+0xa2>
   36900:	2b0a      	cmp	r3, #10
   36902:	d1ca      	bne.n	3689a <pdn_interface_setopt+0x26>
   36904:	f042 0202 	orr.w	r2, r2, #2
   36908:	670a      	str	r2, [r1, #112]	; 0x70
   3690a:	2000      	movs	r0, #0
   3690c:	e7c6      	b.n	3689c <pdn_interface_setopt+0x28>
   3690e:	200e      	movs	r0, #14
   36910:	e7c4      	b.n	3689c <pdn_interface_setopt+0x28>
   36912:	2201      	movs	r2, #1
   36914:	e7ef      	b.n	368f6 <pdn_interface_setopt+0x82>
   36916:	f042 0201 	orr.w	r2, r2, #1
   3691a:	e7f5      	b.n	36908 <pdn_interface_setopt+0x94>
   3691c:	789a0000 	.word	0x789a0000
   36920:	20025310 	.word	0x20025310

00036924 <pdn_interface_getopt>:
   36924:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   36928:	f240 2402 	movw	r4, #514	; 0x202
   3692c:	b083      	sub	sp, #12
   3692e:	42a1      	cmp	r1, r4
   36930:	9d0a      	ldr	r5, [sp, #40]	; 0x28
   36932:	f040 80a9 	bne.w	36a88 <pdn_interface_getopt+0x164>
   36936:	461e      	mov	r6, r3
   36938:	2b00      	cmp	r3, #0
   3693a:	f000 80a5 	beq.w	36a88 <pdn_interface_getopt+0x164>
   3693e:	2d00      	cmp	r5, #0
   36940:	f000 80a2 	beq.w	36a88 <pdn_interface_getopt+0x164>
   36944:	0c03      	lsrs	r3, r0, #16
   36946:	4956      	ldr	r1, [pc, #344]	; (36aa0 <pdn_interface_getopt+0x17c>)
   36948:	041b      	lsls	r3, r3, #16
   3694a:	428b      	cmp	r3, r1
   3694c:	f040 8082 	bne.w	36a54 <pdn_interface_getopt+0x130>
   36950:	f020 44f1 	bic.w	r4, r0, #2021654528	; 0x78800000
   36954:	f424 14d0 	bic.w	r4, r4, #1703936	; 0x1a0000
   36958:	2c09      	cmp	r4, #9
   3695a:	dc7b      	bgt.n	36a54 <pdn_interface_getopt+0x130>
   3695c:	4b51      	ldr	r3, [pc, #324]	; (36aa4 <pdn_interface_getopt+0x180>)
   3695e:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
   36962:	2b00      	cmp	r3, #0
   36964:	d076      	beq.n	36a54 <pdn_interface_getopt+0x130>
   36966:	6899      	ldr	r1, [r3, #8]
   36968:	2900      	cmp	r1, #0
   3696a:	d073      	beq.n	36a54 <pdn_interface_getopt+0x130>
   3696c:	2a02      	cmp	r2, #2
   3696e:	d00e      	beq.n	3698e <pdn_interface_getopt+0x6a>
   36970:	2a03      	cmp	r2, #3
   36972:	d008      	beq.n	36986 <pdn_interface_getopt+0x62>
   36974:	2a01      	cmp	r2, #1
   36976:	d015      	beq.n	369a4 <pdn_interface_getopt+0x80>
   36978:	202d      	movs	r0, #45	; 0x2d
   3697a:	f7f9 fc0b 	bl	30194 <bsd_os_errno_set>
   3697e:	2000      	movs	r0, #0
   36980:	b003      	add	sp, #12
   36982:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   36986:	682b      	ldr	r3, [r5, #0]
   36988:	bb23      	cbnz	r3, 369d4 <pdn_interface_getopt+0xb0>
   3698a:	2016      	movs	r0, #22
   3698c:	e7f5      	b.n	3697a <pdn_interface_getopt+0x56>
   3698e:	682a      	ldr	r2, [r5, #0]
   36990:	2a00      	cmp	r2, #0
   36992:	d0fa      	beq.n	3698a <pdn_interface_getopt+0x66>
   36994:	2201      	movs	r2, #1
   36996:	2000      	movs	r0, #0
   36998:	681b      	ldr	r3, [r3, #0]
   3699a:	7033      	strb	r3, [r6, #0]
   3699c:	602a      	str	r2, [r5, #0]
   3699e:	b003      	add	sp, #12
   369a0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   369a4:	689a      	ldr	r2, [r3, #8]
   369a6:	2a00      	cmp	r2, #0
   369a8:	d052      	beq.n	36a50 <pdn_interface_getopt+0x12c>
   369aa:	689a      	ldr	r2, [r3, #8]
   369ac:	2a04      	cmp	r2, #4
   369ae:	d04f      	beq.n	36a50 <pdn_interface_getopt+0x12c>
   369b0:	682a      	ldr	r2, [r5, #0]
   369b2:	2a07      	cmp	r2, #7
   369b4:	d9e9      	bls.n	3698a <pdn_interface_getopt+0x66>
   369b6:	f012 0203 	ands.w	r2, r2, #3
   369ba:	d1e6      	bne.n	3698a <pdn_interface_getopt+0x66>
   369bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
   369be:	0799      	lsls	r1, r3, #30
   369c0:	d45d      	bmi.n	36a7e <pdn_interface_getopt+0x15a>
   369c2:	2104      	movs	r1, #4
   369c4:	07db      	lsls	r3, r3, #31
   369c6:	d502      	bpl.n	369ce <pdn_interface_getopt+0xaa>
   369c8:	2302      	movs	r3, #2
   369ca:	50b3      	str	r3, [r6, r2]
   369cc:	460a      	mov	r2, r1
   369ce:	602a      	str	r2, [r5, #0]
   369d0:	2000      	movs	r0, #0
   369d2:	e7d5      	b.n	36980 <pdn_interface_getopt+0x5c>
   369d4:	4a34      	ldr	r2, [pc, #208]	; (36aa8 <pdn_interface_getopt+0x184>)
   369d6:	f44f 7180 	mov.w	r1, #256	; 0x100
   369da:	4834      	ldr	r0, [pc, #208]	; (36aac <pdn_interface_getopt+0x188>)
   369dc:	f8df 80d8 	ldr.w	r8, [pc, #216]	; 36ab8 <pdn_interface_getopt+0x194>
   369e0:	f008 fcd0 	bl	3f384 <sniprintf>
   369e4:	4831      	ldr	r0, [pc, #196]	; (36aac <pdn_interface_getopt+0x188>)
   369e6:	f8d8 9000 	ldr.w	r9, [r8]
   369ea:	2700      	movs	r7, #0
   369ec:	f7e6 fb94 	bl	1d118 <strlen>
   369f0:	463b      	mov	r3, r7
   369f2:	4602      	mov	r2, r0
   369f4:	492d      	ldr	r1, [pc, #180]	; (36aac <pdn_interface_getopt+0x188>)
   369f6:	4648      	mov	r0, r9
   369f8:	9701      	str	r7, [sp, #4]
   369fa:	9700      	str	r7, [sp, #0]
   369fc:	f7fc fbca 	bl	33194 <at_interface_write>
   36a00:	4681      	mov	r9, r0
   36a02:	482a      	ldr	r0, [pc, #168]	; (36aac <pdn_interface_getopt+0x188>)
   36a04:	f7e6 fb88 	bl	1d118 <strlen>
   36a08:	4548      	cmp	r0, r9
   36a0a:	d143      	bne.n	36a94 <pdn_interface_getopt+0x170>
   36a0c:	463b      	mov	r3, r7
   36a0e:	e9cd 7700 	strd	r7, r7, [sp]
   36a12:	f44f 7280 	mov.w	r2, #256	; 0x100
   36a16:	4925      	ldr	r1, [pc, #148]	; (36aac <pdn_interface_getopt+0x188>)
   36a18:	f8d8 0000 	ldr.w	r0, [r8]
   36a1c:	f7fc fcbe 	bl	3339c <at_interface_read>
   36a20:	4607      	mov	r7, r0
   36a22:	4823      	ldr	r0, [pc, #140]	; (36ab0 <pdn_interface_getopt+0x18c>)
   36a24:	f7e6 fb78 	bl	1d118 <strlen>
   36a28:	4287      	cmp	r7, r0
   36a2a:	db19      	blt.n	36a60 <pdn_interface_getopt+0x13c>
   36a2c:	4602      	mov	r2, r0
   36a2e:	491f      	ldr	r1, [pc, #124]	; (36aac <pdn_interface_getopt+0x188>)
   36a30:	481f      	ldr	r0, [pc, #124]	; (36ab0 <pdn_interface_getopt+0x18c>)
   36a32:	f00e fb95 	bl	45160 <strncmp>
   36a36:	4607      	mov	r7, r0
   36a38:	b990      	cbnz	r0, 36a60 <pdn_interface_getopt+0x13c>
   36a3a:	4620      	mov	r0, r4
   36a3c:	491b      	ldr	r1, [pc, #108]	; (36aac <pdn_interface_getopt+0x188>)
   36a3e:	f7ff fb41 	bl	360c4 <pdn_state_get_parser>
   36a42:	2800      	cmp	r0, #0
   36a44:	db99      	blt.n	3697a <pdn_interface_getopt+0x56>
   36a46:	2301      	movs	r3, #1
   36a48:	7030      	strb	r0, [r6, #0]
   36a4a:	4638      	mov	r0, r7
   36a4c:	602b      	str	r3, [r5, #0]
   36a4e:	e797      	b.n	36980 <pdn_interface_getopt+0x5c>
   36a50:	200e      	movs	r0, #14
   36a52:	e792      	b.n	3697a <pdn_interface_getopt+0x56>
   36a54:	2009      	movs	r0, #9
   36a56:	f7f9 fb9d 	bl	30194 <bsd_os_errno_set>
   36a5a:	f04f 30ff 	mov.w	r0, #4294967295
   36a5e:	e78f      	b.n	36980 <pdn_interface_getopt+0x5c>
   36a60:	4814      	ldr	r0, [pc, #80]	; (36ab4 <pdn_interface_getopt+0x190>)
   36a62:	f7e6 fb59 	bl	1d118 <strlen>
   36a66:	4911      	ldr	r1, [pc, #68]	; (36aac <pdn_interface_getopt+0x188>)
   36a68:	4602      	mov	r2, r0
   36a6a:	4812      	ldr	r0, [pc, #72]	; (36ab4 <pdn_interface_getopt+0x190>)
   36a6c:	f00e fb78 	bl	45160 <strncmp>
   36a70:	b980      	cbnz	r0, 36a94 <pdn_interface_getopt+0x170>
   36a72:	2008      	movs	r0, #8
   36a74:	f7f9 fb8e 	bl	30194 <bsd_os_errno_set>
   36a78:	f04f 30ff 	mov.w	r0, #4294967295
   36a7c:	e77d      	b.n	3697a <pdn_interface_getopt+0x56>
   36a7e:	220a      	movs	r2, #10
   36a80:	2108      	movs	r1, #8
   36a82:	6032      	str	r2, [r6, #0]
   36a84:	2204      	movs	r2, #4
   36a86:	e79d      	b.n	369c4 <pdn_interface_getopt+0xa0>
   36a88:	2016      	movs	r0, #22
   36a8a:	f7f9 fb83 	bl	30194 <bsd_os_errno_set>
   36a8e:	f04f 30ff 	mov.w	r0, #4294967295
   36a92:	e775      	b.n	36980 <pdn_interface_getopt+0x5c>
   36a94:	2005      	movs	r0, #5
   36a96:	f7f9 fb7d 	bl	30194 <bsd_os_errno_set>
   36a9a:	f04f 30ff 	mov.w	r0, #4294967295
   36a9e:	e76c      	b.n	3697a <pdn_interface_getopt+0x56>
   36aa0:	789a0000 	.word	0x789a0000
   36aa4:	20025310 	.word	0x20025310
   36aa8:	000471c8 	.word	0x000471c8
   36aac:	20025210 	.word	0x20025210
   36ab0:	000471d4 	.word	0x000471d4
   36ab4:	000471f8 	.word	0x000471f8
   36ab8:	2002520c 	.word	0x2002520c

00036abc <pdn_interface_pdn_id_get>:
   36abc:	2900      	cmp	r1, #0
   36abe:	f000 83b9 	beq.w	37234 <pdn_interface_pdn_id_get+0x778>
   36ac2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   36ac6:	4ca3      	ldr	r4, [pc, #652]	; (36d54 <pdn_interface_pdn_id_get+0x298>)
   36ac8:	2802      	cmp	r0, #2
   36aca:	b083      	sub	sp, #12
   36acc:	460d      	mov	r5, r1
   36ace:	6823      	ldr	r3, [r4, #0]
   36ad0:	f000 8094 	beq.w	36bfc <pdn_interface_pdn_id_get+0x140>
   36ad4:	280a      	cmp	r0, #10
   36ad6:	d03f      	beq.n	36b58 <pdn_interface_pdn_id_get+0x9c>
   36ad8:	b11b      	cbz	r3, 36ae2 <pdn_interface_pdn_id_get+0x26>
   36ada:	689b      	ldr	r3, [r3, #8]
   36adc:	2b03      	cmp	r3, #3
   36ade:	f000 8127 	beq.w	36d30 <pdn_interface_pdn_id_get+0x274>
   36ae2:	6863      	ldr	r3, [r4, #4]
   36ae4:	b11b      	cbz	r3, 36aee <pdn_interface_pdn_id_get+0x32>
   36ae6:	689b      	ldr	r3, [r3, #8]
   36ae8:	2b03      	cmp	r3, #3
   36aea:	f000 8110 	beq.w	36d0e <pdn_interface_pdn_id_get+0x252>
   36aee:	68a3      	ldr	r3, [r4, #8]
   36af0:	b11b      	cbz	r3, 36afa <pdn_interface_pdn_id_get+0x3e>
   36af2:	689b      	ldr	r3, [r3, #8]
   36af4:	2b03      	cmp	r3, #3
   36af6:	f000 80f9 	beq.w	36cec <pdn_interface_pdn_id_get+0x230>
   36afa:	68e3      	ldr	r3, [r4, #12]
   36afc:	b11b      	cbz	r3, 36b06 <pdn_interface_pdn_id_get+0x4a>
   36afe:	689b      	ldr	r3, [r3, #8]
   36b00:	2b03      	cmp	r3, #3
   36b02:	f000 80e2 	beq.w	36cca <pdn_interface_pdn_id_get+0x20e>
   36b06:	6923      	ldr	r3, [r4, #16]
   36b08:	b11b      	cbz	r3, 36b12 <pdn_interface_pdn_id_get+0x56>
   36b0a:	689b      	ldr	r3, [r3, #8]
   36b0c:	2b03      	cmp	r3, #3
   36b0e:	f000 8123 	beq.w	36d58 <pdn_interface_pdn_id_get+0x29c>
   36b12:	6963      	ldr	r3, [r4, #20]
   36b14:	b11b      	cbz	r3, 36b1e <pdn_interface_pdn_id_get+0x62>
   36b16:	689b      	ldr	r3, [r3, #8]
   36b18:	2b03      	cmp	r3, #3
   36b1a:	f000 8161 	beq.w	36de0 <pdn_interface_pdn_id_get+0x324>
   36b1e:	69a3      	ldr	r3, [r4, #24]
   36b20:	b11b      	cbz	r3, 36b2a <pdn_interface_pdn_id_get+0x6e>
   36b22:	689b      	ldr	r3, [r3, #8]
   36b24:	2b03      	cmp	r3, #3
   36b26:	f000 814a 	beq.w	36dbe <pdn_interface_pdn_id_get+0x302>
   36b2a:	69e3      	ldr	r3, [r4, #28]
   36b2c:	b11b      	cbz	r3, 36b36 <pdn_interface_pdn_id_get+0x7a>
   36b2e:	689b      	ldr	r3, [r3, #8]
   36b30:	2b03      	cmp	r3, #3
   36b32:	f000 8133 	beq.w	36d9c <pdn_interface_pdn_id_get+0x2e0>
   36b36:	6a23      	ldr	r3, [r4, #32]
   36b38:	b11b      	cbz	r3, 36b42 <pdn_interface_pdn_id_get+0x86>
   36b3a:	689b      	ldr	r3, [r3, #8]
   36b3c:	2b03      	cmp	r3, #3
   36b3e:	f000 811c 	beq.w	36d7a <pdn_interface_pdn_id_get+0x2be>
   36b42:	6a63      	ldr	r3, [r4, #36]	; 0x24
   36b44:	b11b      	cbz	r3, 36b4e <pdn_interface_pdn_id_get+0x92>
   36b46:	689b      	ldr	r3, [r3, #8]
   36b48:	2b03      	cmp	r3, #3
   36b4a:	f000 80ad 	beq.w	36ca8 <pdn_interface_pdn_id_get+0x1ec>
   36b4e:	f04f 30ff 	mov.w	r0, #4294967295
   36b52:	b003      	add	sp, #12
   36b54:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   36b58:	b11b      	cbz	r3, 36b62 <pdn_interface_pdn_id_get+0xa6>
   36b5a:	689b      	ldr	r3, [r3, #8]
   36b5c:	2b03      	cmp	r3, #3
   36b5e:	f000 8335 	beq.w	371cc <pdn_interface_pdn_id_get+0x710>
   36b62:	6863      	ldr	r3, [r4, #4]
   36b64:	b11b      	cbz	r3, 36b6e <pdn_interface_pdn_id_get+0xb2>
   36b66:	689b      	ldr	r3, [r3, #8]
   36b68:	2b03      	cmp	r3, #3
   36b6a:	f000 82fd 	beq.w	37168 <pdn_interface_pdn_id_get+0x6ac>
   36b6e:	68a3      	ldr	r3, [r4, #8]
   36b70:	b11b      	cbz	r3, 36b7a <pdn_interface_pdn_id_get+0xbe>
   36b72:	689b      	ldr	r3, [r3, #8]
   36b74:	2b03      	cmp	r3, #3
   36b76:	f000 82d5 	beq.w	37124 <pdn_interface_pdn_id_get+0x668>
   36b7a:	68e3      	ldr	r3, [r4, #12]
   36b7c:	b11b      	cbz	r3, 36b86 <pdn_interface_pdn_id_get+0xca>
   36b7e:	689e      	ldr	r6, [r3, #8]
   36b80:	2e03      	cmp	r6, #3
   36b82:	f000 81f0 	beq.w	36f66 <pdn_interface_pdn_id_get+0x4aa>
   36b86:	6923      	ldr	r3, [r4, #16]
   36b88:	b11b      	cbz	r3, 36b92 <pdn_interface_pdn_id_get+0xd6>
   36b8a:	689b      	ldr	r3, [r3, #8]
   36b8c:	2b03      	cmp	r3, #3
   36b8e:	f000 8203 	beq.w	36f98 <pdn_interface_pdn_id_get+0x4dc>
   36b92:	6963      	ldr	r3, [r4, #20]
   36b94:	b11b      	cbz	r3, 36b9e <pdn_interface_pdn_id_get+0xe2>
   36b96:	689b      	ldr	r3, [r3, #8]
   36b98:	2b03      	cmp	r3, #3
   36b9a:	f000 8215 	beq.w	36fc8 <pdn_interface_pdn_id_get+0x50c>
   36b9e:	69a3      	ldr	r3, [r4, #24]
   36ba0:	b11b      	cbz	r3, 36baa <pdn_interface_pdn_id_get+0xee>
   36ba2:	689b      	ldr	r3, [r3, #8]
   36ba4:	2b03      	cmp	r3, #3
   36ba6:	f000 8227 	beq.w	36ff8 <pdn_interface_pdn_id_get+0x53c>
   36baa:	69e3      	ldr	r3, [r4, #28]
   36bac:	b11b      	cbz	r3, 36bb6 <pdn_interface_pdn_id_get+0xfa>
   36bae:	689b      	ldr	r3, [r3, #8]
   36bb0:	2b03      	cmp	r3, #3
   36bb2:	f000 8239 	beq.w	37028 <pdn_interface_pdn_id_get+0x56c>
   36bb6:	6a23      	ldr	r3, [r4, #32]
   36bb8:	b11b      	cbz	r3, 36bc2 <pdn_interface_pdn_id_get+0x106>
   36bba:	689b      	ldr	r3, [r3, #8]
   36bbc:	2b03      	cmp	r3, #3
   36bbe:	f000 824d 	beq.w	3705c <pdn_interface_pdn_id_get+0x5a0>
   36bc2:	6a63      	ldr	r3, [r4, #36]	; 0x24
   36bc4:	2b00      	cmp	r3, #0
   36bc6:	d0c2      	beq.n	36b4e <pdn_interface_pdn_id_get+0x92>
   36bc8:	689b      	ldr	r3, [r3, #8]
   36bca:	2b03      	cmp	r3, #3
   36bcc:	d1bf      	bne.n	36b4e <pdn_interface_pdn_id_get+0x92>
   36bce:	4628      	mov	r0, r5
   36bd0:	f7e6 faa2 	bl	1d118 <strlen>
   36bd4:	4606      	mov	r6, r0
   36bd6:	6a60      	ldr	r0, [r4, #36]	; 0x24
   36bd8:	300c      	adds	r0, #12
   36bda:	f7e6 fa9d 	bl	1d118 <strlen>
   36bde:	42b0      	cmp	r0, r6
   36be0:	d1b5      	bne.n	36b4e <pdn_interface_pdn_id_get+0x92>
   36be2:	6a61      	ldr	r1, [r4, #36]	; 0x24
   36be4:	4628      	mov	r0, r5
   36be6:	310c      	adds	r1, #12
   36be8:	f7e6 fa8c 	bl	1d104 <strcmp>
   36bec:	2800      	cmp	r0, #0
   36bee:	d1ae      	bne.n	36b4e <pdn_interface_pdn_id_get+0x92>
   36bf0:	6a63      	ldr	r3, [r4, #36]	; 0x24
   36bf2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   36bf4:	0792      	lsls	r2, r2, #30
   36bf6:	d5aa      	bpl.n	36b4e <pdn_interface_pdn_id_get+0x92>
   36bf8:	2609      	movs	r6, #9
   36bfa:	e11a      	b.n	36e32 <pdn_interface_pdn_id_get+0x376>
   36bfc:	b11b      	cbz	r3, 36c06 <pdn_interface_pdn_id_get+0x14a>
   36bfe:	689b      	ldr	r3, [r3, #8]
   36c00:	2b03      	cmp	r3, #3
   36c02:	f000 82fd 	beq.w	37200 <pdn_interface_pdn_id_get+0x744>
   36c06:	6863      	ldr	r3, [r4, #4]
   36c08:	b11b      	cbz	r3, 36c12 <pdn_interface_pdn_id_get+0x156>
   36c0a:	689b      	ldr	r3, [r3, #8]
   36c0c:	2b03      	cmp	r3, #3
   36c0e:	f000 82c5 	beq.w	3719c <pdn_interface_pdn_id_get+0x6e0>
   36c12:	68a3      	ldr	r3, [r4, #8]
   36c14:	b11b      	cbz	r3, 36c1e <pdn_interface_pdn_id_get+0x162>
   36c16:	689b      	ldr	r3, [r3, #8]
   36c18:	2b03      	cmp	r3, #3
   36c1a:	f000 8269 	beq.w	370f0 <pdn_interface_pdn_id_get+0x634>
   36c1e:	68e3      	ldr	r3, [r4, #12]
   36c20:	b11b      	cbz	r3, 36c2a <pdn_interface_pdn_id_get+0x16e>
   36c22:	689e      	ldr	r6, [r3, #8]
   36c24:	2e03      	cmp	r6, #3
   36c26:	f000 80ec 	beq.w	36e02 <pdn_interface_pdn_id_get+0x346>
   36c2a:	6923      	ldr	r3, [r4, #16]
   36c2c:	b11b      	cbz	r3, 36c36 <pdn_interface_pdn_id_get+0x17a>
   36c2e:	689b      	ldr	r3, [r3, #8]
   36c30:	2b03      	cmp	r3, #3
   36c32:	f000 814a 	beq.w	36eca <pdn_interface_pdn_id_get+0x40e>
   36c36:	6963      	ldr	r3, [r4, #20]
   36c38:	b11b      	cbz	r3, 36c42 <pdn_interface_pdn_id_get+0x186>
   36c3a:	689b      	ldr	r3, [r3, #8]
   36c3c:	2b03      	cmp	r3, #3
   36c3e:	f000 815e 	beq.w	36efe <pdn_interface_pdn_id_get+0x442>
   36c42:	69a3      	ldr	r3, [r4, #24]
   36c44:	b11b      	cbz	r3, 36c4e <pdn_interface_pdn_id_get+0x192>
   36c46:	689b      	ldr	r3, [r3, #8]
   36c48:	2b03      	cmp	r3, #3
   36c4a:	f000 8172 	beq.w	36f32 <pdn_interface_pdn_id_get+0x476>
   36c4e:	69e3      	ldr	r3, [r4, #28]
   36c50:	b11b      	cbz	r3, 36c5a <pdn_interface_pdn_id_get+0x19e>
   36c52:	689b      	ldr	r3, [r3, #8]
   36c54:	2b03      	cmp	r3, #3
   36c56:	f000 821b 	beq.w	37090 <pdn_interface_pdn_id_get+0x5d4>
   36c5a:	6a23      	ldr	r3, [r4, #32]
   36c5c:	b11b      	cbz	r3, 36c66 <pdn_interface_pdn_id_get+0x1aa>
   36c5e:	689b      	ldr	r3, [r3, #8]
   36c60:	2b03      	cmp	r3, #3
   36c62:	f000 822d 	beq.w	370c0 <pdn_interface_pdn_id_get+0x604>
   36c66:	6a63      	ldr	r3, [r4, #36]	; 0x24
   36c68:	2b00      	cmp	r3, #0
   36c6a:	f43f af70 	beq.w	36b4e <pdn_interface_pdn_id_get+0x92>
   36c6e:	689b      	ldr	r3, [r3, #8]
   36c70:	2b03      	cmp	r3, #3
   36c72:	f47f af6c 	bne.w	36b4e <pdn_interface_pdn_id_get+0x92>
   36c76:	4628      	mov	r0, r5
   36c78:	f7e6 fa4e 	bl	1d118 <strlen>
   36c7c:	4606      	mov	r6, r0
   36c7e:	6a60      	ldr	r0, [r4, #36]	; 0x24
   36c80:	300c      	adds	r0, #12
   36c82:	f7e6 fa49 	bl	1d118 <strlen>
   36c86:	4286      	cmp	r6, r0
   36c88:	f47f af61 	bne.w	36b4e <pdn_interface_pdn_id_get+0x92>
   36c8c:	6a61      	ldr	r1, [r4, #36]	; 0x24
   36c8e:	4628      	mov	r0, r5
   36c90:	310c      	adds	r1, #12
   36c92:	f7e6 fa37 	bl	1d104 <strcmp>
   36c96:	2800      	cmp	r0, #0
   36c98:	f47f af59 	bne.w	36b4e <pdn_interface_pdn_id_get+0x92>
   36c9c:	6a63      	ldr	r3, [r4, #36]	; 0x24
   36c9e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   36ca0:	07d2      	lsls	r2, r2, #31
   36ca2:	f57f af54 	bpl.w	36b4e <pdn_interface_pdn_id_get+0x92>
   36ca6:	e7a7      	b.n	36bf8 <pdn_interface_pdn_id_get+0x13c>
   36ca8:	4628      	mov	r0, r5
   36caa:	f7e6 fa35 	bl	1d118 <strlen>
   36cae:	4606      	mov	r6, r0
   36cb0:	6a60      	ldr	r0, [r4, #36]	; 0x24
   36cb2:	300c      	adds	r0, #12
   36cb4:	f7e6 fa30 	bl	1d118 <strlen>
   36cb8:	42b0      	cmp	r0, r6
   36cba:	f47f af48 	bne.w	36b4e <pdn_interface_pdn_id_get+0x92>
   36cbe:	6a61      	ldr	r1, [r4, #36]	; 0x24
   36cc0:	4628      	mov	r0, r5
   36cc2:	310c      	adds	r1, #12
   36cc4:	f7e6 fa1e 	bl	1d104 <strcmp>
   36cc8:	e741      	b.n	36b4e <pdn_interface_pdn_id_get+0x92>
   36cca:	4628      	mov	r0, r5
   36ccc:	f7e6 fa24 	bl	1d118 <strlen>
   36cd0:	4606      	mov	r6, r0
   36cd2:	68e0      	ldr	r0, [r4, #12]
   36cd4:	300c      	adds	r0, #12
   36cd6:	f7e6 fa1f 	bl	1d118 <strlen>
   36cda:	4286      	cmp	r6, r0
   36cdc:	f47f af13 	bne.w	36b06 <pdn_interface_pdn_id_get+0x4a>
   36ce0:	68e1      	ldr	r1, [r4, #12]
   36ce2:	4628      	mov	r0, r5
   36ce4:	310c      	adds	r1, #12
   36ce6:	f7e6 fa0d 	bl	1d104 <strcmp>
   36cea:	e70c      	b.n	36b06 <pdn_interface_pdn_id_get+0x4a>
   36cec:	4628      	mov	r0, r5
   36cee:	f7e6 fa13 	bl	1d118 <strlen>
   36cf2:	4606      	mov	r6, r0
   36cf4:	68a0      	ldr	r0, [r4, #8]
   36cf6:	300c      	adds	r0, #12
   36cf8:	f7e6 fa0e 	bl	1d118 <strlen>
   36cfc:	4286      	cmp	r6, r0
   36cfe:	f47f aefc 	bne.w	36afa <pdn_interface_pdn_id_get+0x3e>
   36d02:	68a1      	ldr	r1, [r4, #8]
   36d04:	4628      	mov	r0, r5
   36d06:	310c      	adds	r1, #12
   36d08:	f7e6 f9fc 	bl	1d104 <strcmp>
   36d0c:	e6f5      	b.n	36afa <pdn_interface_pdn_id_get+0x3e>
   36d0e:	4628      	mov	r0, r5
   36d10:	f7e6 fa02 	bl	1d118 <strlen>
   36d14:	4606      	mov	r6, r0
   36d16:	6860      	ldr	r0, [r4, #4]
   36d18:	300c      	adds	r0, #12
   36d1a:	f7e6 f9fd 	bl	1d118 <strlen>
   36d1e:	4286      	cmp	r6, r0
   36d20:	f47f aee5 	bne.w	36aee <pdn_interface_pdn_id_get+0x32>
   36d24:	6861      	ldr	r1, [r4, #4]
   36d26:	4628      	mov	r0, r5
   36d28:	310c      	adds	r1, #12
   36d2a:	f7e6 f9eb 	bl	1d104 <strcmp>
   36d2e:	e6de      	b.n	36aee <pdn_interface_pdn_id_get+0x32>
   36d30:	4608      	mov	r0, r1
   36d32:	f7e6 f9f1 	bl	1d118 <strlen>
   36d36:	4606      	mov	r6, r0
   36d38:	6820      	ldr	r0, [r4, #0]
   36d3a:	300c      	adds	r0, #12
   36d3c:	f7e6 f9ec 	bl	1d118 <strlen>
   36d40:	4286      	cmp	r6, r0
   36d42:	f47f aece 	bne.w	36ae2 <pdn_interface_pdn_id_get+0x26>
   36d46:	6821      	ldr	r1, [r4, #0]
   36d48:	4628      	mov	r0, r5
   36d4a:	310c      	adds	r1, #12
   36d4c:	f7e6 f9da 	bl	1d104 <strcmp>
   36d50:	e6c7      	b.n	36ae2 <pdn_interface_pdn_id_get+0x26>
   36d52:	bf00      	nop
   36d54:	20025310 	.word	0x20025310
   36d58:	4628      	mov	r0, r5
   36d5a:	f7e6 f9dd 	bl	1d118 <strlen>
   36d5e:	4606      	mov	r6, r0
   36d60:	6920      	ldr	r0, [r4, #16]
   36d62:	300c      	adds	r0, #12
   36d64:	f7e6 f9d8 	bl	1d118 <strlen>
   36d68:	4286      	cmp	r6, r0
   36d6a:	f47f aed2 	bne.w	36b12 <pdn_interface_pdn_id_get+0x56>
   36d6e:	6921      	ldr	r1, [r4, #16]
   36d70:	4628      	mov	r0, r5
   36d72:	310c      	adds	r1, #12
   36d74:	f7e6 f9c6 	bl	1d104 <strcmp>
   36d78:	e6cb      	b.n	36b12 <pdn_interface_pdn_id_get+0x56>
   36d7a:	4628      	mov	r0, r5
   36d7c:	f7e6 f9cc 	bl	1d118 <strlen>
   36d80:	4606      	mov	r6, r0
   36d82:	6a20      	ldr	r0, [r4, #32]
   36d84:	300c      	adds	r0, #12
   36d86:	f7e6 f9c7 	bl	1d118 <strlen>
   36d8a:	4286      	cmp	r6, r0
   36d8c:	f47f aed9 	bne.w	36b42 <pdn_interface_pdn_id_get+0x86>
   36d90:	6a21      	ldr	r1, [r4, #32]
   36d92:	4628      	mov	r0, r5
   36d94:	310c      	adds	r1, #12
   36d96:	f7e6 f9b5 	bl	1d104 <strcmp>
   36d9a:	e6d2      	b.n	36b42 <pdn_interface_pdn_id_get+0x86>
   36d9c:	4628      	mov	r0, r5
   36d9e:	f7e6 f9bb 	bl	1d118 <strlen>
   36da2:	4606      	mov	r6, r0
   36da4:	69e0      	ldr	r0, [r4, #28]
   36da6:	300c      	adds	r0, #12
   36da8:	f7e6 f9b6 	bl	1d118 <strlen>
   36dac:	4286      	cmp	r6, r0
   36dae:	f47f aec2 	bne.w	36b36 <pdn_interface_pdn_id_get+0x7a>
   36db2:	69e1      	ldr	r1, [r4, #28]
   36db4:	4628      	mov	r0, r5
   36db6:	310c      	adds	r1, #12
   36db8:	f7e6 f9a4 	bl	1d104 <strcmp>
   36dbc:	e6bb      	b.n	36b36 <pdn_interface_pdn_id_get+0x7a>
   36dbe:	4628      	mov	r0, r5
   36dc0:	f7e6 f9aa 	bl	1d118 <strlen>
   36dc4:	4606      	mov	r6, r0
   36dc6:	69a0      	ldr	r0, [r4, #24]
   36dc8:	300c      	adds	r0, #12
   36dca:	f7e6 f9a5 	bl	1d118 <strlen>
   36dce:	4286      	cmp	r6, r0
   36dd0:	f47f aeab 	bne.w	36b2a <pdn_interface_pdn_id_get+0x6e>
   36dd4:	69a1      	ldr	r1, [r4, #24]
   36dd6:	4628      	mov	r0, r5
   36dd8:	310c      	adds	r1, #12
   36dda:	f7e6 f993 	bl	1d104 <strcmp>
   36dde:	e6a4      	b.n	36b2a <pdn_interface_pdn_id_get+0x6e>
   36de0:	4628      	mov	r0, r5
   36de2:	f7e6 f999 	bl	1d118 <strlen>
   36de6:	4606      	mov	r6, r0
   36de8:	6960      	ldr	r0, [r4, #20]
   36dea:	300c      	adds	r0, #12
   36dec:	f7e6 f994 	bl	1d118 <strlen>
   36df0:	4286      	cmp	r6, r0
   36df2:	f47f ae94 	bne.w	36b1e <pdn_interface_pdn_id_get+0x62>
   36df6:	6961      	ldr	r1, [r4, #20]
   36df8:	4628      	mov	r0, r5
   36dfa:	310c      	adds	r1, #12
   36dfc:	f7e6 f982 	bl	1d104 <strcmp>
   36e00:	e68d      	b.n	36b1e <pdn_interface_pdn_id_get+0x62>
   36e02:	4628      	mov	r0, r5
   36e04:	f7e6 f988 	bl	1d118 <strlen>
   36e08:	4607      	mov	r7, r0
   36e0a:	68e0      	ldr	r0, [r4, #12]
   36e0c:	300c      	adds	r0, #12
   36e0e:	f7e6 f983 	bl	1d118 <strlen>
   36e12:	4287      	cmp	r7, r0
   36e14:	f47f af09 	bne.w	36c2a <pdn_interface_pdn_id_get+0x16e>
   36e18:	68e1      	ldr	r1, [r4, #12]
   36e1a:	4628      	mov	r0, r5
   36e1c:	310c      	adds	r1, #12
   36e1e:	f7e6 f971 	bl	1d104 <strcmp>
   36e22:	2800      	cmp	r0, #0
   36e24:	f47f af01 	bne.w	36c2a <pdn_interface_pdn_id_get+0x16e>
   36e28:	68e3      	ldr	r3, [r4, #12]
   36e2a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   36e2c:	07d1      	lsls	r1, r2, #31
   36e2e:	f57f aefc 	bpl.w	36c2a <pdn_interface_pdn_id_get+0x16e>
   36e32:	6858      	ldr	r0, [r3, #4]
   36e34:	1c43      	adds	r3, r0, #1
   36e36:	f47f ae8c 	bne.w	36b52 <pdn_interface_pdn_id_get+0x96>
   36e3a:	4dc6      	ldr	r5, [pc, #792]	; (37154 <pdn_interface_pdn_id_get+0x698>)
   36e3c:	4ac6      	ldr	r2, [pc, #792]	; (37158 <pdn_interface_pdn_id_get+0x69c>)
   36e3e:	f44f 7180 	mov.w	r1, #256	; 0x100
   36e42:	4628      	mov	r0, r5
   36e44:	f008 fa9e 	bl	3f384 <sniprintf>
   36e48:	f854 3026 	ldr.w	r3, [r4, r6, lsl #2]
   36e4c:	f5c0 7180 	rsb	r1, r0, #256	; 0x100
   36e50:	681b      	ldr	r3, [r3, #0]
   36e52:	4ac2      	ldr	r2, [pc, #776]	; (3715c <pdn_interface_pdn_id_get+0x6a0>)
   36e54:	4428      	add	r0, r5
   36e56:	f8df 830c 	ldr.w	r8, [pc, #780]	; 37164 <pdn_interface_pdn_id_get+0x6a8>
   36e5a:	f008 fa93 	bl	3f384 <sniprintf>
   36e5e:	4628      	mov	r0, r5
   36e60:	f8d8 9000 	ldr.w	r9, [r8]
   36e64:	2700      	movs	r7, #0
   36e66:	f7e6 f957 	bl	1d118 <strlen>
   36e6a:	4629      	mov	r1, r5
   36e6c:	4602      	mov	r2, r0
   36e6e:	463b      	mov	r3, r7
   36e70:	4648      	mov	r0, r9
   36e72:	9701      	str	r7, [sp, #4]
   36e74:	9700      	str	r7, [sp, #0]
   36e76:	f7fc f98d 	bl	33194 <at_interface_write>
   36e7a:	4681      	mov	r9, r0
   36e7c:	4628      	mov	r0, r5
   36e7e:	f7e6 f94b 	bl	1d118 <strlen>
   36e82:	4548      	cmp	r0, r9
   36e84:	f040 81e9 	bne.w	3725a <pdn_interface_pdn_id_get+0x79e>
   36e88:	463b      	mov	r3, r7
   36e8a:	f44f 7280 	mov.w	r2, #256	; 0x100
   36e8e:	e9cd 7700 	strd	r7, r7, [sp]
   36e92:	4629      	mov	r1, r5
   36e94:	f8d8 0000 	ldr.w	r0, [r8]
   36e98:	f7fc fa80 	bl	3339c <at_interface_read>
   36e9c:	4607      	mov	r7, r0
   36e9e:	48b0      	ldr	r0, [pc, #704]	; (37160 <pdn_interface_pdn_id_get+0x6a4>)
   36ea0:	f7e6 f93a 	bl	1d118 <strlen>
   36ea4:	4287      	cmp	r7, r0
   36ea6:	4602      	mov	r2, r0
   36ea8:	f2c0 81c7 	blt.w	3723a <pdn_interface_pdn_id_get+0x77e>
   36eac:	4629      	mov	r1, r5
   36eae:	48ac      	ldr	r0, [pc, #688]	; (37160 <pdn_interface_pdn_id_get+0x6a4>)
   36eb0:	f00e f956 	bl	45160 <strncmp>
   36eb4:	2800      	cmp	r0, #0
   36eb6:	f040 81c0 	bne.w	3723a <pdn_interface_pdn_id_get+0x77e>
   36eba:	4629      	mov	r1, r5
   36ebc:	4630      	mov	r0, r6
   36ebe:	f7ff f937 	bl	36130 <pdn_id_get_parser>
   36ec2:	f854 3026 	ldr.w	r3, [r4, r6, lsl #2]
   36ec6:	6858      	ldr	r0, [r3, #4]
   36ec8:	e643      	b.n	36b52 <pdn_interface_pdn_id_get+0x96>
   36eca:	4628      	mov	r0, r5
   36ecc:	f7e6 f924 	bl	1d118 <strlen>
   36ed0:	4606      	mov	r6, r0
   36ed2:	6920      	ldr	r0, [r4, #16]
   36ed4:	300c      	adds	r0, #12
   36ed6:	f7e6 f91f 	bl	1d118 <strlen>
   36eda:	4286      	cmp	r6, r0
   36edc:	f47f aeab 	bne.w	36c36 <pdn_interface_pdn_id_get+0x17a>
   36ee0:	6921      	ldr	r1, [r4, #16]
   36ee2:	4628      	mov	r0, r5
   36ee4:	310c      	adds	r1, #12
   36ee6:	f7e6 f90d 	bl	1d104 <strcmp>
   36eea:	2800      	cmp	r0, #0
   36eec:	f47f aea3 	bne.w	36c36 <pdn_interface_pdn_id_get+0x17a>
   36ef0:	6923      	ldr	r3, [r4, #16]
   36ef2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   36ef4:	07d2      	lsls	r2, r2, #31
   36ef6:	f57f ae9e 	bpl.w	36c36 <pdn_interface_pdn_id_get+0x17a>
   36efa:	2604      	movs	r6, #4
   36efc:	e799      	b.n	36e32 <pdn_interface_pdn_id_get+0x376>
   36efe:	4628      	mov	r0, r5
   36f00:	f7e6 f90a 	bl	1d118 <strlen>
   36f04:	4606      	mov	r6, r0
   36f06:	6960      	ldr	r0, [r4, #20]
   36f08:	300c      	adds	r0, #12
   36f0a:	f7e6 f905 	bl	1d118 <strlen>
   36f0e:	4286      	cmp	r6, r0
   36f10:	f47f ae97 	bne.w	36c42 <pdn_interface_pdn_id_get+0x186>
   36f14:	6961      	ldr	r1, [r4, #20]
   36f16:	4628      	mov	r0, r5
   36f18:	310c      	adds	r1, #12
   36f1a:	f7e6 f8f3 	bl	1d104 <strcmp>
   36f1e:	2800      	cmp	r0, #0
   36f20:	f47f ae8f 	bne.w	36c42 <pdn_interface_pdn_id_get+0x186>
   36f24:	6963      	ldr	r3, [r4, #20]
   36f26:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   36f28:	07d7      	lsls	r7, r2, #31
   36f2a:	f57f ae8a 	bpl.w	36c42 <pdn_interface_pdn_id_get+0x186>
   36f2e:	2605      	movs	r6, #5
   36f30:	e77f      	b.n	36e32 <pdn_interface_pdn_id_get+0x376>
   36f32:	4628      	mov	r0, r5
   36f34:	f7e6 f8f0 	bl	1d118 <strlen>
   36f38:	4606      	mov	r6, r0
   36f3a:	69a0      	ldr	r0, [r4, #24]
   36f3c:	300c      	adds	r0, #12
   36f3e:	f7e6 f8eb 	bl	1d118 <strlen>
   36f42:	4286      	cmp	r6, r0
   36f44:	f47f ae83 	bne.w	36c4e <pdn_interface_pdn_id_get+0x192>
   36f48:	69a1      	ldr	r1, [r4, #24]
   36f4a:	4628      	mov	r0, r5
   36f4c:	310c      	adds	r1, #12
   36f4e:	f7e6 f8d9 	bl	1d104 <strcmp>
   36f52:	2800      	cmp	r0, #0
   36f54:	f47f ae7b 	bne.w	36c4e <pdn_interface_pdn_id_get+0x192>
   36f58:	69a3      	ldr	r3, [r4, #24]
   36f5a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   36f5c:	07d6      	lsls	r6, r2, #31
   36f5e:	f57f ae76 	bpl.w	36c4e <pdn_interface_pdn_id_get+0x192>
   36f62:	2606      	movs	r6, #6
   36f64:	e765      	b.n	36e32 <pdn_interface_pdn_id_get+0x376>
   36f66:	4628      	mov	r0, r5
   36f68:	f7e6 f8d6 	bl	1d118 <strlen>
   36f6c:	4607      	mov	r7, r0
   36f6e:	68e0      	ldr	r0, [r4, #12]
   36f70:	300c      	adds	r0, #12
   36f72:	f7e6 f8d1 	bl	1d118 <strlen>
   36f76:	4287      	cmp	r7, r0
   36f78:	f47f ae05 	bne.w	36b86 <pdn_interface_pdn_id_get+0xca>
   36f7c:	68e1      	ldr	r1, [r4, #12]
   36f7e:	4628      	mov	r0, r5
   36f80:	310c      	adds	r1, #12
   36f82:	f7e6 f8bf 	bl	1d104 <strcmp>
   36f86:	2800      	cmp	r0, #0
   36f88:	f47f adfd 	bne.w	36b86 <pdn_interface_pdn_id_get+0xca>
   36f8c:	68e3      	ldr	r3, [r4, #12]
   36f8e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   36f90:	0791      	lsls	r1, r2, #30
   36f92:	f53f af4e 	bmi.w	36e32 <pdn_interface_pdn_id_get+0x376>
   36f96:	e5f6      	b.n	36b86 <pdn_interface_pdn_id_get+0xca>
   36f98:	4628      	mov	r0, r5
   36f9a:	f7e6 f8bd 	bl	1d118 <strlen>
   36f9e:	4606      	mov	r6, r0
   36fa0:	6920      	ldr	r0, [r4, #16]
   36fa2:	300c      	adds	r0, #12
   36fa4:	f7e6 f8b8 	bl	1d118 <strlen>
   36fa8:	4286      	cmp	r6, r0
   36faa:	f47f adf2 	bne.w	36b92 <pdn_interface_pdn_id_get+0xd6>
   36fae:	6921      	ldr	r1, [r4, #16]
   36fb0:	4628      	mov	r0, r5
   36fb2:	310c      	adds	r1, #12
   36fb4:	f7e6 f8a6 	bl	1d104 <strcmp>
   36fb8:	2800      	cmp	r0, #0
   36fba:	f47f adea 	bne.w	36b92 <pdn_interface_pdn_id_get+0xd6>
   36fbe:	6923      	ldr	r3, [r4, #16]
   36fc0:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   36fc2:	0792      	lsls	r2, r2, #30
   36fc4:	d499      	bmi.n	36efa <pdn_interface_pdn_id_get+0x43e>
   36fc6:	e5e4      	b.n	36b92 <pdn_interface_pdn_id_get+0xd6>
   36fc8:	4628      	mov	r0, r5
   36fca:	f7e6 f8a5 	bl	1d118 <strlen>
   36fce:	4606      	mov	r6, r0
   36fd0:	6960      	ldr	r0, [r4, #20]
   36fd2:	300c      	adds	r0, #12
   36fd4:	f7e6 f8a0 	bl	1d118 <strlen>
   36fd8:	4286      	cmp	r6, r0
   36fda:	f47f ade0 	bne.w	36b9e <pdn_interface_pdn_id_get+0xe2>
   36fde:	6961      	ldr	r1, [r4, #20]
   36fe0:	4628      	mov	r0, r5
   36fe2:	310c      	adds	r1, #12
   36fe4:	f7e6 f88e 	bl	1d104 <strcmp>
   36fe8:	2800      	cmp	r0, #0
   36fea:	f47f add8 	bne.w	36b9e <pdn_interface_pdn_id_get+0xe2>
   36fee:	6963      	ldr	r3, [r4, #20]
   36ff0:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   36ff2:	0797      	lsls	r7, r2, #30
   36ff4:	d49b      	bmi.n	36f2e <pdn_interface_pdn_id_get+0x472>
   36ff6:	e5d2      	b.n	36b9e <pdn_interface_pdn_id_get+0xe2>
   36ff8:	4628      	mov	r0, r5
   36ffa:	f7e6 f88d 	bl	1d118 <strlen>
   36ffe:	4606      	mov	r6, r0
   37000:	69a0      	ldr	r0, [r4, #24]
   37002:	300c      	adds	r0, #12
   37004:	f7e6 f888 	bl	1d118 <strlen>
   37008:	4286      	cmp	r6, r0
   3700a:	f47f adce 	bne.w	36baa <pdn_interface_pdn_id_get+0xee>
   3700e:	69a1      	ldr	r1, [r4, #24]
   37010:	4628      	mov	r0, r5
   37012:	310c      	adds	r1, #12
   37014:	f7e6 f876 	bl	1d104 <strcmp>
   37018:	2800      	cmp	r0, #0
   3701a:	f47f adc6 	bne.w	36baa <pdn_interface_pdn_id_get+0xee>
   3701e:	69a3      	ldr	r3, [r4, #24]
   37020:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   37022:	0796      	lsls	r6, r2, #30
   37024:	d49d      	bmi.n	36f62 <pdn_interface_pdn_id_get+0x4a6>
   37026:	e5c0      	b.n	36baa <pdn_interface_pdn_id_get+0xee>
   37028:	4628      	mov	r0, r5
   3702a:	f7e6 f875 	bl	1d118 <strlen>
   3702e:	4606      	mov	r6, r0
   37030:	69e0      	ldr	r0, [r4, #28]
   37032:	300c      	adds	r0, #12
   37034:	f7e6 f870 	bl	1d118 <strlen>
   37038:	4286      	cmp	r6, r0
   3703a:	f47f adbc 	bne.w	36bb6 <pdn_interface_pdn_id_get+0xfa>
   3703e:	69e1      	ldr	r1, [r4, #28]
   37040:	4628      	mov	r0, r5
   37042:	310c      	adds	r1, #12
   37044:	f7e6 f85e 	bl	1d104 <strcmp>
   37048:	2800      	cmp	r0, #0
   3704a:	f47f adb4 	bne.w	36bb6 <pdn_interface_pdn_id_get+0xfa>
   3704e:	69e3      	ldr	r3, [r4, #28]
   37050:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   37052:	0790      	lsls	r0, r2, #30
   37054:	f57f adaf 	bpl.w	36bb6 <pdn_interface_pdn_id_get+0xfa>
   37058:	2607      	movs	r6, #7
   3705a:	e6ea      	b.n	36e32 <pdn_interface_pdn_id_get+0x376>
   3705c:	4628      	mov	r0, r5
   3705e:	f7e6 f85b 	bl	1d118 <strlen>
   37062:	4606      	mov	r6, r0
   37064:	6a20      	ldr	r0, [r4, #32]
   37066:	300c      	adds	r0, #12
   37068:	f7e6 f856 	bl	1d118 <strlen>
   3706c:	4286      	cmp	r6, r0
   3706e:	f47f ada8 	bne.w	36bc2 <pdn_interface_pdn_id_get+0x106>
   37072:	6a21      	ldr	r1, [r4, #32]
   37074:	4628      	mov	r0, r5
   37076:	310c      	adds	r1, #12
   37078:	f7e6 f844 	bl	1d104 <strcmp>
   3707c:	2800      	cmp	r0, #0
   3707e:	f47f ada0 	bne.w	36bc2 <pdn_interface_pdn_id_get+0x106>
   37082:	6a23      	ldr	r3, [r4, #32]
   37084:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   37086:	0791      	lsls	r1, r2, #30
   37088:	f57f ad9b 	bpl.w	36bc2 <pdn_interface_pdn_id_get+0x106>
   3708c:	2608      	movs	r6, #8
   3708e:	e6d0      	b.n	36e32 <pdn_interface_pdn_id_get+0x376>
   37090:	4628      	mov	r0, r5
   37092:	f7e6 f841 	bl	1d118 <strlen>
   37096:	4606      	mov	r6, r0
   37098:	69e0      	ldr	r0, [r4, #28]
   3709a:	300c      	adds	r0, #12
   3709c:	f7e6 f83c 	bl	1d118 <strlen>
   370a0:	4286      	cmp	r6, r0
   370a2:	f47f adda 	bne.w	36c5a <pdn_interface_pdn_id_get+0x19e>
   370a6:	69e1      	ldr	r1, [r4, #28]
   370a8:	4628      	mov	r0, r5
   370aa:	310c      	adds	r1, #12
   370ac:	f7e6 f82a 	bl	1d104 <strcmp>
   370b0:	2800      	cmp	r0, #0
   370b2:	f47f add2 	bne.w	36c5a <pdn_interface_pdn_id_get+0x19e>
   370b6:	69e3      	ldr	r3, [r4, #28]
   370b8:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   370ba:	07d0      	lsls	r0, r2, #31
   370bc:	d4cc      	bmi.n	37058 <pdn_interface_pdn_id_get+0x59c>
   370be:	e5cc      	b.n	36c5a <pdn_interface_pdn_id_get+0x19e>
   370c0:	4628      	mov	r0, r5
   370c2:	f7e6 f829 	bl	1d118 <strlen>
   370c6:	4606      	mov	r6, r0
   370c8:	6a20      	ldr	r0, [r4, #32]
   370ca:	300c      	adds	r0, #12
   370cc:	f7e6 f824 	bl	1d118 <strlen>
   370d0:	4286      	cmp	r6, r0
   370d2:	f47f adc8 	bne.w	36c66 <pdn_interface_pdn_id_get+0x1aa>
   370d6:	6a21      	ldr	r1, [r4, #32]
   370d8:	4628      	mov	r0, r5
   370da:	310c      	adds	r1, #12
   370dc:	f7e6 f812 	bl	1d104 <strcmp>
   370e0:	2800      	cmp	r0, #0
   370e2:	f47f adc0 	bne.w	36c66 <pdn_interface_pdn_id_get+0x1aa>
   370e6:	6a23      	ldr	r3, [r4, #32]
   370e8:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   370ea:	07d1      	lsls	r1, r2, #31
   370ec:	d4ce      	bmi.n	3708c <pdn_interface_pdn_id_get+0x5d0>
   370ee:	e5ba      	b.n	36c66 <pdn_interface_pdn_id_get+0x1aa>
   370f0:	4628      	mov	r0, r5
   370f2:	f7e6 f811 	bl	1d118 <strlen>
   370f6:	4606      	mov	r6, r0
   370f8:	68a0      	ldr	r0, [r4, #8]
   370fa:	300c      	adds	r0, #12
   370fc:	f7e6 f80c 	bl	1d118 <strlen>
   37100:	4286      	cmp	r6, r0
   37102:	f47f ad8c 	bne.w	36c1e <pdn_interface_pdn_id_get+0x162>
   37106:	68a1      	ldr	r1, [r4, #8]
   37108:	4628      	mov	r0, r5
   3710a:	310c      	adds	r1, #12
   3710c:	f7e5 fffa 	bl	1d104 <strcmp>
   37110:	2800      	cmp	r0, #0
   37112:	f47f ad84 	bne.w	36c1e <pdn_interface_pdn_id_get+0x162>
   37116:	68a3      	ldr	r3, [r4, #8]
   37118:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   3711a:	07d0      	lsls	r0, r2, #31
   3711c:	f57f ad7f 	bpl.w	36c1e <pdn_interface_pdn_id_get+0x162>
   37120:	2602      	movs	r6, #2
   37122:	e686      	b.n	36e32 <pdn_interface_pdn_id_get+0x376>
   37124:	4628      	mov	r0, r5
   37126:	f7e5 fff7 	bl	1d118 <strlen>
   3712a:	4606      	mov	r6, r0
   3712c:	68a0      	ldr	r0, [r4, #8]
   3712e:	300c      	adds	r0, #12
   37130:	f7e5 fff2 	bl	1d118 <strlen>
   37134:	4286      	cmp	r6, r0
   37136:	f47f ad20 	bne.w	36b7a <pdn_interface_pdn_id_get+0xbe>
   3713a:	68a1      	ldr	r1, [r4, #8]
   3713c:	4628      	mov	r0, r5
   3713e:	310c      	adds	r1, #12
   37140:	f7e5 ffe0 	bl	1d104 <strcmp>
   37144:	2800      	cmp	r0, #0
   37146:	f47f ad18 	bne.w	36b7a <pdn_interface_pdn_id_get+0xbe>
   3714a:	68a3      	ldr	r3, [r4, #8]
   3714c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   3714e:	0790      	lsls	r0, r2, #30
   37150:	d4e6      	bmi.n	37120 <pdn_interface_pdn_id_get+0x664>
   37152:	e512      	b.n	36b7a <pdn_interface_pdn_id_get+0xbe>
   37154:	20025210 	.word	0x20025210
   37158:	000471a4 	.word	0x000471a4
   3715c:	000471a0 	.word	0x000471a0
   37160:	000471b4 	.word	0x000471b4
   37164:	2002520c 	.word	0x2002520c
   37168:	4628      	mov	r0, r5
   3716a:	f7e5 ffd5 	bl	1d118 <strlen>
   3716e:	4606      	mov	r6, r0
   37170:	6860      	ldr	r0, [r4, #4]
   37172:	300c      	adds	r0, #12
   37174:	f7e5 ffd0 	bl	1d118 <strlen>
   37178:	4286      	cmp	r6, r0
   3717a:	f47f acf8 	bne.w	36b6e <pdn_interface_pdn_id_get+0xb2>
   3717e:	6861      	ldr	r1, [r4, #4]
   37180:	4628      	mov	r0, r5
   37182:	310c      	adds	r1, #12
   37184:	f7e5 ffbe 	bl	1d104 <strcmp>
   37188:	2800      	cmp	r0, #0
   3718a:	f47f acf0 	bne.w	36b6e <pdn_interface_pdn_id_get+0xb2>
   3718e:	6863      	ldr	r3, [r4, #4]
   37190:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   37192:	0796      	lsls	r6, r2, #30
   37194:	f57f aceb 	bpl.w	36b6e <pdn_interface_pdn_id_get+0xb2>
   37198:	2601      	movs	r6, #1
   3719a:	e64a      	b.n	36e32 <pdn_interface_pdn_id_get+0x376>
   3719c:	4628      	mov	r0, r5
   3719e:	f7e5 ffbb 	bl	1d118 <strlen>
   371a2:	4606      	mov	r6, r0
   371a4:	6860      	ldr	r0, [r4, #4]
   371a6:	300c      	adds	r0, #12
   371a8:	f7e5 ffb6 	bl	1d118 <strlen>
   371ac:	4286      	cmp	r6, r0
   371ae:	f47f ad30 	bne.w	36c12 <pdn_interface_pdn_id_get+0x156>
   371b2:	6861      	ldr	r1, [r4, #4]
   371b4:	4628      	mov	r0, r5
   371b6:	310c      	adds	r1, #12
   371b8:	f7e5 ffa4 	bl	1d104 <strcmp>
   371bc:	2800      	cmp	r0, #0
   371be:	f47f ad28 	bne.w	36c12 <pdn_interface_pdn_id_get+0x156>
   371c2:	6863      	ldr	r3, [r4, #4]
   371c4:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   371c6:	07d6      	lsls	r6, r2, #31
   371c8:	d4e6      	bmi.n	37198 <pdn_interface_pdn_id_get+0x6dc>
   371ca:	e522      	b.n	36c12 <pdn_interface_pdn_id_get+0x156>
   371cc:	4608      	mov	r0, r1
   371ce:	f7e5 ffa3 	bl	1d118 <strlen>
   371d2:	4606      	mov	r6, r0
   371d4:	6820      	ldr	r0, [r4, #0]
   371d6:	300c      	adds	r0, #12
   371d8:	f7e5 ff9e 	bl	1d118 <strlen>
   371dc:	4286      	cmp	r6, r0
   371de:	f47f acc0 	bne.w	36b62 <pdn_interface_pdn_id_get+0xa6>
   371e2:	6821      	ldr	r1, [r4, #0]
   371e4:	4628      	mov	r0, r5
   371e6:	310c      	adds	r1, #12
   371e8:	f7e5 ff8c 	bl	1d104 <strcmp>
   371ec:	4606      	mov	r6, r0
   371ee:	2800      	cmp	r0, #0
   371f0:	f47f acb7 	bne.w	36b62 <pdn_interface_pdn_id_get+0xa6>
   371f4:	6823      	ldr	r3, [r4, #0]
   371f6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   371f8:	0797      	lsls	r7, r2, #30
   371fa:	f53f ae1a 	bmi.w	36e32 <pdn_interface_pdn_id_get+0x376>
   371fe:	e4b0      	b.n	36b62 <pdn_interface_pdn_id_get+0xa6>
   37200:	4608      	mov	r0, r1
   37202:	f7e5 ff89 	bl	1d118 <strlen>
   37206:	4606      	mov	r6, r0
   37208:	6820      	ldr	r0, [r4, #0]
   3720a:	300c      	adds	r0, #12
   3720c:	f7e5 ff84 	bl	1d118 <strlen>
   37210:	4286      	cmp	r6, r0
   37212:	f47f acf8 	bne.w	36c06 <pdn_interface_pdn_id_get+0x14a>
   37216:	6821      	ldr	r1, [r4, #0]
   37218:	4628      	mov	r0, r5
   3721a:	310c      	adds	r1, #12
   3721c:	f7e5 ff72 	bl	1d104 <strcmp>
   37220:	4606      	mov	r6, r0
   37222:	2800      	cmp	r0, #0
   37224:	f47f acef 	bne.w	36c06 <pdn_interface_pdn_id_get+0x14a>
   37228:	6823      	ldr	r3, [r4, #0]
   3722a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   3722c:	07d7      	lsls	r7, r2, #31
   3722e:	f53f ae00 	bmi.w	36e32 <pdn_interface_pdn_id_get+0x376>
   37232:	e4e8      	b.n	36c06 <pdn_interface_pdn_id_get+0x14a>
   37234:	f04f 30ff 	mov.w	r0, #4294967295
   37238:	4770      	bx	lr
   3723a:	480b      	ldr	r0, [pc, #44]	; (37268 <pdn_interface_pdn_id_get+0x7ac>)
   3723c:	f7e5 ff6c 	bl	1d118 <strlen>
   37240:	490a      	ldr	r1, [pc, #40]	; (3726c <pdn_interface_pdn_id_get+0x7b0>)
   37242:	4602      	mov	r2, r0
   37244:	4808      	ldr	r0, [pc, #32]	; (37268 <pdn_interface_pdn_id_get+0x7ac>)
   37246:	f00d ff8b 	bl	45160 <strncmp>
   3724a:	b930      	cbnz	r0, 3725a <pdn_interface_pdn_id_get+0x79e>
   3724c:	2008      	movs	r0, #8
   3724e:	f7f8 ffa1 	bl	30194 <bsd_os_errno_set>
   37252:	f854 3026 	ldr.w	r3, [r4, r6, lsl #2]
   37256:	6858      	ldr	r0, [r3, #4]
   37258:	e47b      	b.n	36b52 <pdn_interface_pdn_id_get+0x96>
   3725a:	2005      	movs	r0, #5
   3725c:	f7f8 ff9a 	bl	30194 <bsd_os_errno_set>
   37260:	f854 3026 	ldr.w	r3, [r4, r6, lsl #2]
   37264:	6858      	ldr	r0, [r3, #4]
   37266:	e474      	b.n	36b52 <pdn_interface_pdn_id_get+0x96>
   37268:	000471f8 	.word	0x000471f8
   3726c:	20025210 	.word	0x20025210

00037270 <linked_list_init>:
   37270:	b128      	cbz	r0, 3727e <linked_list_init+0xe>
   37272:	2300      	movs	r3, #0
   37274:	6003      	str	r3, [r0, #0]
   37276:	e9c0 3301 	strd	r3, r3, [r0, #4]
   3727a:	4618      	mov	r0, r3
   3727c:	4770      	bx	lr
   3727e:	2007      	movs	r0, #7
   37280:	4770      	bx	lr
   37282:	bf00      	nop

00037284 <linked_list_push>:
   37284:	6802      	ldr	r2, [r0, #0]
   37286:	4603      	mov	r3, r0
   37288:	3201      	adds	r2, #1
   3728a:	d00e      	beq.n	372aa <linked_list_push+0x26>
   3728c:	2200      	movs	r2, #0
   3728e:	600a      	str	r2, [r1, #0]
   37290:	6802      	ldr	r2, [r0, #0]
   37292:	b13a      	cbz	r2, 372a4 <linked_list_push+0x20>
   37294:	6882      	ldr	r2, [r0, #8]
   37296:	6011      	str	r1, [r2, #0]
   37298:	6081      	str	r1, [r0, #8]
   3729a:	681a      	ldr	r2, [r3, #0]
   3729c:	2000      	movs	r0, #0
   3729e:	3201      	adds	r2, #1
   372a0:	601a      	str	r2, [r3, #0]
   372a2:	4770      	bx	lr
   372a4:	e9c0 1101 	strd	r1, r1, [r0, #4]
   372a8:	e7f7      	b.n	3729a <linked_list_push+0x16>
   372aa:	2004      	movs	r0, #4
   372ac:	4770      	bx	lr
   372ae:	bf00      	nop

000372b0 <linked_list_pop>:
   372b0:	4603      	mov	r3, r0
   372b2:	6800      	ldr	r0, [r0, #0]
   372b4:	b128      	cbz	r0, 372c2 <linked_list_pop+0x12>
   372b6:	6858      	ldr	r0, [r3, #4]
   372b8:	681a      	ldr	r2, [r3, #0]
   372ba:	6801      	ldr	r1, [r0, #0]
   372bc:	3a01      	subs	r2, #1
   372be:	6059      	str	r1, [r3, #4]
   372c0:	601a      	str	r2, [r3, #0]
   372c2:	4770      	bx	lr

000372c4 <linked_list_peek>:
   372c4:	6803      	ldr	r3, [r0, #0]
   372c6:	b10b      	cbz	r3, 372cc <linked_list_peek+0x8>
   372c8:	6840      	ldr	r0, [r0, #4]
   372ca:	4770      	bx	lr
   372cc:	4618      	mov	r0, r3
   372ce:	4770      	bx	lr

000372d0 <linked_list_size_get>:
   372d0:	6800      	ldr	r0, [r0, #0]
   372d2:	4770      	bx	lr

000372d4 <linked_list_get_next>:
   372d4:	6800      	ldr	r0, [r0, #0]
   372d6:	4770      	bx	lr

000372d8 <nrf_socket>:
   372d8:	b570      	push	{r4, r5, r6, lr}
   372da:	4604      	mov	r4, r0
   372dc:	460d      	mov	r5, r1
   372de:	4616      	mov	r6, r2
   372e0:	f7fd fdb4 	bl	34e4c <bsd_platform_af_method_table_get>
   372e4:	b130      	cbz	r0, 372f4 <nrf_socket+0x1c>
   372e6:	6803      	ldr	r3, [r0, #0]
   372e8:	4632      	mov	r2, r6
   372ea:	4629      	mov	r1, r5
   372ec:	4620      	mov	r0, r4
   372ee:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   372f2:	4718      	bx	r3
   372f4:	f04f 30ff 	mov.w	r0, #4294967295
   372f8:	bd70      	pop	{r4, r5, r6, pc}
   372fa:	bf00      	nop

000372fc <nrf_close>:
   372fc:	b510      	push	{r4, lr}
   372fe:	4604      	mov	r4, r0
   37300:	f7fd fdfc 	bl	34efc <bsd_platform_fd_method_table_get>
   37304:	b120      	cbz	r0, 37310 <nrf_close+0x14>
   37306:	6843      	ldr	r3, [r0, #4]
   37308:	4620      	mov	r0, r4
   3730a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   3730e:	4718      	bx	r3
   37310:	f04f 30ff 	mov.w	r0, #4294967295
   37314:	bd10      	pop	{r4, pc}
   37316:	bf00      	nop

00037318 <nrf_sendto>:
   37318:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   3731c:	460d      	mov	r5, r1
   3731e:	e9dd 8908 	ldrd	r8, r9, [sp, #32]
   37322:	4616      	mov	r6, r2
   37324:	461f      	mov	r7, r3
   37326:	4604      	mov	r4, r0
   37328:	f7fd fde8 	bl	34efc <bsd_platform_fd_method_table_get>
   3732c:	b158      	cbz	r0, 37346 <nrf_sendto+0x2e>
   3732e:	e9cd 8908 	strd	r8, r9, [sp, #32]
   37332:	f8d0 e008 	ldr.w	lr, [r0, #8]
   37336:	463b      	mov	r3, r7
   37338:	4632      	mov	r2, r6
   3733a:	4629      	mov	r1, r5
   3733c:	4620      	mov	r0, r4
   3733e:	46f4      	mov	ip, lr
   37340:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   37344:	4760      	bx	ip
   37346:	f04f 30ff 	mov.w	r0, #4294967295
   3734a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   3734e:	bf00      	nop

00037350 <nrf_send>:
   37350:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   37354:	b082      	sub	sp, #8
   37356:	460e      	mov	r6, r1
   37358:	4617      	mov	r7, r2
   3735a:	4698      	mov	r8, r3
   3735c:	4605      	mov	r5, r0
   3735e:	f7fd fdcd 	bl	34efc <bsd_platform_fd_method_table_get>
   37362:	b160      	cbz	r0, 3737e <nrf_send+0x2e>
   37364:	4604      	mov	r4, r0
   37366:	2000      	movs	r0, #0
   37368:	e9cd 0000 	strd	r0, r0, [sp]
   3736c:	4643      	mov	r3, r8
   3736e:	463a      	mov	r2, r7
   37370:	4631      	mov	r1, r6
   37372:	4628      	mov	r0, r5
   37374:	68a4      	ldr	r4, [r4, #8]
   37376:	47a0      	blx	r4
   37378:	b002      	add	sp, #8
   3737a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   3737e:	f04f 30ff 	mov.w	r0, #4294967295
   37382:	e7f9      	b.n	37378 <nrf_send+0x28>

00037384 <nrf_recvfrom>:
   37384:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   37388:	460d      	mov	r5, r1
   3738a:	e9dd 8908 	ldrd	r8, r9, [sp, #32]
   3738e:	4616      	mov	r6, r2
   37390:	461f      	mov	r7, r3
   37392:	4604      	mov	r4, r0
   37394:	f7fd fdb2 	bl	34efc <bsd_platform_fd_method_table_get>
   37398:	b158      	cbz	r0, 373b2 <nrf_recvfrom+0x2e>
   3739a:	e9cd 8908 	strd	r8, r9, [sp, #32]
   3739e:	f8d0 e00c 	ldr.w	lr, [r0, #12]
   373a2:	463b      	mov	r3, r7
   373a4:	4632      	mov	r2, r6
   373a6:	4629      	mov	r1, r5
   373a8:	4620      	mov	r0, r4
   373aa:	46f4      	mov	ip, lr
   373ac:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   373b0:	4760      	bx	ip
   373b2:	f04f 30ff 	mov.w	r0, #4294967295
   373b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   373ba:	bf00      	nop

000373bc <nrf_recv>:
   373bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   373c0:	b082      	sub	sp, #8
   373c2:	460e      	mov	r6, r1
   373c4:	4617      	mov	r7, r2
   373c6:	4698      	mov	r8, r3
   373c8:	4605      	mov	r5, r0
   373ca:	f7fd fd97 	bl	34efc <bsd_platform_fd_method_table_get>
   373ce:	b160      	cbz	r0, 373ea <nrf_recv+0x2e>
   373d0:	4604      	mov	r4, r0
   373d2:	2000      	movs	r0, #0
   373d4:	e9cd 0000 	strd	r0, r0, [sp]
   373d8:	4643      	mov	r3, r8
   373da:	463a      	mov	r2, r7
   373dc:	4631      	mov	r1, r6
   373de:	4628      	mov	r0, r5
   373e0:	68e4      	ldr	r4, [r4, #12]
   373e2:	47a0      	blx	r4
   373e4:	b002      	add	sp, #8
   373e6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   373ea:	f04f 30ff 	mov.w	r0, #4294967295
   373ee:	e7f9      	b.n	373e4 <nrf_recv+0x28>

000373f0 <nrf_connect>:
   373f0:	b570      	push	{r4, r5, r6, lr}
   373f2:	460d      	mov	r5, r1
   373f4:	4616      	mov	r6, r2
   373f6:	4604      	mov	r4, r0
   373f8:	f7fd fd80 	bl	34efc <bsd_platform_fd_method_table_get>
   373fc:	b130      	cbz	r0, 3740c <nrf_connect+0x1c>
   373fe:	6943      	ldr	r3, [r0, #20]
   37400:	4632      	mov	r2, r6
   37402:	4629      	mov	r1, r5
   37404:	4620      	mov	r0, r4
   37406:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   3740a:	4718      	bx	r3
   3740c:	f04f 30ff 	mov.w	r0, #4294967295
   37410:	bd70      	pop	{r4, r5, r6, pc}
   37412:	bf00      	nop

00037414 <nrf_listen>:
   37414:	b570      	push	{r4, r5, r6, lr}
   37416:	460d      	mov	r5, r1
   37418:	4604      	mov	r4, r0
   3741a:	f7fd fd6f 	bl	34efc <bsd_platform_fd_method_table_get>
   3741e:	b128      	cbz	r0, 3742c <nrf_listen+0x18>
   37420:	6983      	ldr	r3, [r0, #24]
   37422:	4629      	mov	r1, r5
   37424:	4620      	mov	r0, r4
   37426:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   3742a:	4718      	bx	r3
   3742c:	f04f 30ff 	mov.w	r0, #4294967295
   37430:	bd70      	pop	{r4, r5, r6, pc}
   37432:	bf00      	nop

00037434 <nrf_accept>:
   37434:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   37438:	460d      	mov	r5, r1
   3743a:	4616      	mov	r6, r2
   3743c:	4604      	mov	r4, r0
   3743e:	f7fd fd5d 	bl	34efc <bsd_platform_fd_method_table_get>
   37442:	b140      	cbz	r0, 37456 <nrf_accept+0x22>
   37444:	69c7      	ldr	r7, [r0, #28]
   37446:	4632      	mov	r2, r6
   37448:	4629      	mov	r1, r5
   3744a:	4620      	mov	r0, r4
   3744c:	46bc      	mov	ip, r7
   3744e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   37452:	2300      	movs	r3, #0
   37454:	4760      	bx	ip
   37456:	f04f 30ff 	mov.w	r0, #4294967295
   3745a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   3745e:	bf00      	nop

00037460 <nrf_bind>:
   37460:	b570      	push	{r4, r5, r6, lr}
   37462:	460d      	mov	r5, r1
   37464:	4616      	mov	r6, r2
   37466:	4604      	mov	r4, r0
   37468:	f7fd fd48 	bl	34efc <bsd_platform_fd_method_table_get>
   3746c:	b130      	cbz	r0, 3747c <nrf_bind+0x1c>
   3746e:	6903      	ldr	r3, [r0, #16]
   37470:	4632      	mov	r2, r6
   37472:	4629      	mov	r1, r5
   37474:	4620      	mov	r0, r4
   37476:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   3747a:	4718      	bx	r3
   3747c:	f04f 30ff 	mov.w	r0, #4294967295
   37480:	bd70      	pop	{r4, r5, r6, pc}
   37482:	bf00      	nop

00037484 <nrf_setsockopt>:
   37484:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   37488:	f8dd 8018 	ldr.w	r8, [sp, #24]
   3748c:	460d      	mov	r5, r1
   3748e:	4616      	mov	r6, r2
   37490:	461f      	mov	r7, r3
   37492:	4604      	mov	r4, r0
   37494:	f7fd fd32 	bl	34efc <bsd_platform_fd_method_table_get>
   37498:	b158      	cbz	r0, 374b2 <nrf_setsockopt+0x2e>
   3749a:	f8cd 8018 	str.w	r8, [sp, #24]
   3749e:	f8d0 e020 	ldr.w	lr, [r0, #32]
   374a2:	463b      	mov	r3, r7
   374a4:	4632      	mov	r2, r6
   374a6:	4629      	mov	r1, r5
   374a8:	4620      	mov	r0, r4
   374aa:	46f4      	mov	ip, lr
   374ac:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   374b0:	4760      	bx	ip
   374b2:	f04f 30ff 	mov.w	r0, #4294967295
   374b6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   374ba:	bf00      	nop

000374bc <nrf_getsockopt>:
   374bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   374c0:	f8dd 8018 	ldr.w	r8, [sp, #24]
   374c4:	460d      	mov	r5, r1
   374c6:	4616      	mov	r6, r2
   374c8:	461f      	mov	r7, r3
   374ca:	4604      	mov	r4, r0
   374cc:	f7fd fd16 	bl	34efc <bsd_platform_fd_method_table_get>
   374d0:	b158      	cbz	r0, 374ea <nrf_getsockopt+0x2e>
   374d2:	f8cd 8018 	str.w	r8, [sp, #24]
   374d6:	f8d0 e024 	ldr.w	lr, [r0, #36]	; 0x24
   374da:	463b      	mov	r3, r7
   374dc:	4632      	mov	r2, r6
   374de:	4629      	mov	r1, r5
   374e0:	4620      	mov	r0, r4
   374e2:	46f4      	mov	ip, lr
   374e4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   374e8:	4760      	bx	ip
   374ea:	f04f 30ff 	mov.w	r0, #4294967295
   374ee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   374f2:	bf00      	nop

000374f4 <nrf_getaddrinfo>:
   374f4:	f7fd bd78 	b.w	34fe8 <bsd_platform_getaddrinfo>

000374f8 <nrf_freeaddrinfo>:
   374f8:	f7fd bd78 	b.w	34fec <bsd_platform_freeaddrinfo>

000374fc <nrf_poll>:
   374fc:	f7fd bd78 	b.w	34ff0 <bsd_platform_poll>

00037500 <nrf_fcntl>:
   37500:	f7fd bdd0 	b.w	350a4 <bsd_platform_fcntl>

00037504 <at_client_evt_handler>:
   37504:	b120      	cbz	r0, 37510 <at_client_evt_handler+0xc>
   37506:	f850 1b08 	ldr.w	r1, [r0], #8
   3750a:	0c09      	lsrs	r1, r1, #16
   3750c:	f7fb bf9e 	b.w	3344c <rpc_at_event_handler>
   37510:	4770      	bx	lr
   37512:	bf00      	nop

00037514 <rpc_at_client_init>:
   37514:	4801      	ldr	r0, [pc, #4]	; (3751c <rpc_at_client_init+0x8>)
   37516:	f001 be47 	b.w	391a8 <rpc_client_register>
   3751a:	bf00      	nop
   3751c:	0004720c 	.word	0x0004720c

00037520 <rpc_at_client_request_alloc>:
   37520:	b180      	cbz	r0, 37544 <rpc_at_client_request_alloc+0x24>
   37522:	2300      	movs	r3, #0
   37524:	b510      	push	{r4, lr}
   37526:	b082      	sub	sp, #8
   37528:	aa02      	add	r2, sp, #8
   3752a:	4604      	mov	r4, r0
   3752c:	f842 3d04 	str.w	r3, [r2, #-4]!
   37530:	2003      	movs	r0, #3
   37532:	f002 f871 	bl	39618 <rpc_message_alloc>
   37536:	b918      	cbnz	r0, 37540 <rpc_at_client_request_alloc+0x20>
   37538:	9b01      	ldr	r3, [sp, #4]
   3753a:	b10b      	cbz	r3, 37540 <rpc_at_client_request_alloc+0x20>
   3753c:	3308      	adds	r3, #8
   3753e:	6023      	str	r3, [r4, #0]
   37540:	b002      	add	sp, #8
   37542:	bd10      	pop	{r4, pc}
   37544:	200e      	movs	r0, #14
   37546:	4770      	bx	lr

00037548 <rpc_at_client_request_send>:
   37548:	b150      	cbz	r0, 37560 <rpc_at_client_request_send+0x18>
   3754a:	4603      	mov	r3, r0
   3754c:	f830 2c08 	ldrh.w	r2, [r0, #-8]
   37550:	2003      	movs	r0, #3
   37552:	ea42 4101 	orr.w	r1, r2, r1, lsl #16
   37556:	f843 1d08 	str.w	r1, [r3, #-8]!
   3755a:	4619      	mov	r1, r3
   3755c:	f002 b844 	b.w	395e8 <rpc_message_send>
   37560:	200e      	movs	r0, #14
   37562:	4770      	bx	lr

00037564 <rpc_at_client_message_free>:
   37564:	b120      	cbz	r0, 37570 <rpc_at_client_message_free+0xc>
   37566:	f1a0 0108 	sub.w	r1, r0, #8
   3756a:	2003      	movs	r0, #3
   3756c:	f002 b886 	b.w	3967c <rpc_message_free>
   37570:	200e      	movs	r0, #14
   37572:	4770      	bx	lr

00037574 <rpc_at_client_data_free>:
   37574:	b118      	cbz	r0, 3757e <rpc_at_client_data_free+0xa>
   37576:	4601      	mov	r1, r0
   37578:	2003      	movs	r0, #3
   3757a:	f002 b991 	b.w	398a0 <rpc_message_data_free>
   3757e:	200e      	movs	r0, #14
   37580:	4770      	bx	lr
   37582:	bf00      	nop

00037584 <ip_recvd_packet_free_cb>:
   37584:	b510      	push	{r4, lr}
   37586:	4604      	mov	r4, r0
   37588:	6800      	ldr	r0, [r0, #0]
   3758a:	f7fc fc1d 	bl	33dc8 <rpc_ip_client_data_free>
   3758e:	68a0      	ldr	r0, [r4, #8]
   37590:	b118      	cbz	r0, 3759a <ip_recvd_packet_free_cb+0x16>
   37592:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   37596:	f7fc bbb7 	b.w	33d08 <nrf_free>
   3759a:	bd10      	pop	{r4, pc}

0003759c <rpc_error_to_nrf_bsd_error>:
   3759c:	2810      	cmp	r0, #16
   3759e:	bf9a      	itte	ls
   375a0:	4b02      	ldrls	r3, [pc, #8]	; (375ac <rpc_error_to_nrf_bsd_error+0x10>)
   375a2:	f853 0020 	ldrls.w	r0, [r3, r0, lsl #2]
   375a6:	202d      	movhi	r0, #45	; 0x2d
   375a8:	4770      	bx	lr
   375aa:	bf00      	nop
   375ac:	0004721c 	.word	0x0004721c

000375b0 <ip_interface_request_create>:
   375b0:	b570      	push	{r4, r5, r6, lr}
   375b2:	2500      	movs	r5, #0
   375b4:	b082      	sub	sp, #8
   375b6:	ac02      	add	r4, sp, #8
   375b8:	f844 5d04 	str.w	r5, [r4, #-4]!
   375bc:	4606      	mov	r6, r0
   375be:	460d      	mov	r5, r1
   375c0:	4620      	mov	r0, r4
   375c2:	4619      	mov	r1, r3
   375c4:	4614      	mov	r4, r2
   375c6:	f7fc fbcd 	bl	33d64 <rpc_ip_client_request_alloc>
   375ca:	b960      	cbnz	r0, 375e6 <ip_interface_request_create+0x36>
   375cc:	9b01      	ldr	r3, [sp, #4]
   375ce:	2208      	movs	r2, #8
   375d0:	7258      	strb	r0, [r3, #9]
   375d2:	7298      	strb	r0, [r3, #10]
   375d4:	72d8      	strb	r0, [r3, #11]
   375d6:	4618      	mov	r0, r3
   375d8:	ea44 4406 	orr.w	r4, r4, r6, lsl #16
   375dc:	60dc      	str	r4, [r3, #12]
   375de:	611d      	str	r5, [r3, #16]
   375e0:	721a      	strb	r2, [r3, #8]
   375e2:	b002      	add	sp, #8
   375e4:	bd70      	pop	{r4, r5, r6, pc}
   375e6:	9b01      	ldr	r3, [sp, #4]
   375e8:	4618      	mov	r0, r3
   375ea:	b002      	add	sp, #8
   375ec:	bd70      	pop	{r4, r5, r6, pc}
   375ee:	bf00      	nop

000375f0 <ip_interface_request_send>:
   375f0:	b570      	push	{r4, r5, r6, lr}
   375f2:	460c      	mov	r4, r1
   375f4:	4605      	mov	r5, r0
   375f6:	4611      	mov	r1, r2
   375f8:	4620      	mov	r0, r4
   375fa:	461e      	mov	r6, r3
   375fc:	f7fc fbc6 	bl	33d8c <rpc_ip_client_request_send>
   37600:	b900      	cbnz	r0, 37604 <ip_interface_request_send+0x14>
   37602:	bd70      	pop	{r4, r5, r6, pc}
   37604:	6820      	ldr	r0, [r4, #0]
   37606:	b108      	cbz	r0, 3760c <ip_interface_request_send+0x1c>
   37608:	f7fc fbde 	bl	33dc8 <rpc_ip_client_data_free>
   3760c:	4620      	mov	r0, r4
   3760e:	f7fc fbd3 	bl	33db8 <rpc_ip_client_message_free>
   37612:	602e      	str	r6, [r5, #0]
   37614:	2023      	movs	r0, #35	; 0x23
   37616:	bd70      	pop	{r4, r5, r6, pc}

00037618 <ip_interface_wait>:
   37618:	b538      	push	{r3, r4, r5, lr}
   3761a:	4605      	mov	r5, r0
   3761c:	f001 fc14 	bl	38e48 <interface_socket_wait>
   37620:	4604      	mov	r4, r0
   37622:	b108      	cbz	r0, 37628 <ip_interface_wait+0x10>
   37624:	4620      	mov	r0, r4
   37626:	bd38      	pop	{r3, r4, r5, pc}
   37628:	4628      	mov	r0, r5
   3762a:	f001 fc81 	bl	38f30 <interface_socket_from_handle_get>
   3762e:	2800      	cmp	r0, #0
   37630:	d0f8      	beq.n	37624 <ip_interface_wait+0xc>
   37632:	6844      	ldr	r4, [r0, #4]
   37634:	2c00      	cmp	r4, #0
   37636:	d0f5      	beq.n	37624 <ip_interface_wait+0xc>
   37638:	2300      	movs	r3, #0
   3763a:	6043      	str	r3, [r0, #4]
   3763c:	4620      	mov	r0, r4
   3763e:	bd38      	pop	{r3, r4, r5, pc}

00037640 <ip_interface_init>:
   37640:	b538      	push	{r3, r4, r5, lr}
   37642:	2300      	movs	r3, #0
   37644:	4d07      	ldr	r5, [pc, #28]	; (37664 <ip_interface_init+0x24>)
   37646:	4c08      	ldr	r4, [pc, #32]	; (37668 <ip_interface_init+0x28>)
   37648:	4619      	mov	r1, r3
   3764a:	2224      	movs	r2, #36	; 0x24
   3764c:	4807      	ldr	r0, [pc, #28]	; (3766c <ip_interface_init+0x2c>)
   3764e:	602b      	str	r3, [r5, #0]
   37650:	6023      	str	r3, [r4, #0]
   37652:	f00d fc37 	bl	44ec4 <memset>
   37656:	f7fc fb7f 	bl	33d58 <rpc_ip_client_init>
   3765a:	3000      	adds	r0, #0
   3765c:	bf18      	it	ne
   3765e:	2001      	movne	r0, #1
   37660:	4240      	negs	r0, r0
   37662:	bd38      	pop	{r3, r4, r5, pc}
   37664:	20025348 	.word	0x20025348
   37668:	20025344 	.word	0x20025344
   3766c:	20025350 	.word	0x20025350

00037670 <ip_interface_open>:
   37670:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   37674:	4606      	mov	r6, r0
   37676:	2000      	movs	r0, #0
   37678:	f026 0308 	bic.w	r3, r6, #8
   3767c:	b082      	sub	sp, #8
   3767e:	2b02      	cmp	r3, #2
   37680:	460c      	mov	r4, r1
   37682:	4617      	mov	r7, r2
   37684:	9000      	str	r0, [sp, #0]
   37686:	d002      	beq.n	3768e <ip_interface_open+0x1e>
   37688:	2e05      	cmp	r6, #5
   3768a:	f040 8085 	bne.w	37798 <ip_interface_open+0x128>
   3768e:	1e63      	subs	r3, r4, #1
   37690:	2b02      	cmp	r3, #2
   37692:	f200 8097 	bhi.w	377c4 <ip_interface_open+0x154>
   37696:	2f00      	cmp	r7, #0
   37698:	d154      	bne.n	37744 <ip_interface_open+0xd4>
   3769a:	2c01      	cmp	r4, #1
   3769c:	d067      	beq.n	3776e <ip_interface_open+0xfe>
   3769e:	2c03      	cmp	r4, #3
   376a0:	bf18      	it	ne
   376a2:	2702      	movne	r7, #2
   376a4:	4a4a      	ldr	r2, [pc, #296]	; (377d0 <ip_interface_open+0x160>)
   376a6:	4621      	mov	r1, r4
   376a8:	4668      	mov	r0, sp
   376aa:	f001 fb1b 	bl	38ce4 <interface_socket_allocate>
   376ae:	9b00      	ldr	r3, [sp, #0]
   376b0:	4680      	mov	r8, r0
   376b2:	2b00      	cmp	r3, #0
   376b4:	d059      	beq.n	3776a <ip_interface_open+0xfa>
   376b6:	2100      	movs	r1, #0
   376b8:	a802      	add	r0, sp, #8
   376ba:	f840 1d04 	str.w	r1, [r0, #-4]!
   376be:	e9c3 6403 	strd	r6, r4, [r3, #12]
   376c2:	615f      	str	r7, [r3, #20]
   376c4:	f7fc fb4e 	bl	33d64 <rpc_ip_client_request_alloc>
   376c8:	2800      	cmp	r0, #0
   376ca:	d14b      	bne.n	37764 <ip_interface_open+0xf4>
   376cc:	f247 0201 	movw	r2, #28673	; 0x7001
   376d0:	f04f 33ff 	mov.w	r3, #4294967295
   376d4:	2108      	movs	r1, #8
   376d6:	9d01      	ldr	r5, [sp, #4]
   376d8:	ea42 4208 	orr.w	r2, r2, r8, lsl #16
   376dc:	60ea      	str	r2, [r5, #12]
   376de:	7268      	strb	r0, [r5, #9]
   376e0:	72a8      	strb	r0, [r5, #10]
   376e2:	72e8      	strb	r0, [r5, #11]
   376e4:	7229      	strb	r1, [r5, #8]
   376e6:	742b      	strb	r3, [r5, #16]
   376e8:	746b      	strb	r3, [r5, #17]
   376ea:	74ab      	strb	r3, [r5, #18]
   376ec:	74eb      	strb	r3, [r5, #19]
   376ee:	68ab      	ldr	r3, [r5, #8]
   376f0:	2e05      	cmp	r6, #5
   376f2:	f103 030c 	add.w	r3, r3, #12
   376f6:	60ab      	str	r3, [r5, #8]
   376f8:	d003      	beq.n	37702 <ip_interface_open+0x92>
   376fa:	2e0a      	cmp	r6, #10
   376fc:	bf14      	ite	ne
   376fe:	2601      	movne	r6, #1
   37700:	2602      	moveq	r6, #2
   37702:	616e      	str	r6, [r5, #20]
   37704:	61ef      	str	r7, [r5, #28]
   37706:	61ac      	str	r4, [r5, #24]
   37708:	f247 0101 	movw	r1, #28673	; 0x7001
   3770c:	4628      	mov	r0, r5
   3770e:	9f00      	ldr	r7, [sp, #0]
   37710:	f7fc fb3c 	bl	33d8c <rpc_ip_client_request_send>
   37714:	4606      	mov	r6, r0
   37716:	b360      	cbz	r0, 37772 <ip_interface_open+0x102>
   37718:	6828      	ldr	r0, [r5, #0]
   3771a:	b108      	cbz	r0, 37720 <ip_interface_open+0xb0>
   3771c:	f7fc fb54 	bl	33dc8 <rpc_ip_client_data_free>
   37720:	4628      	mov	r0, r5
   37722:	f7fc fb49 	bl	33db8 <rpc_ip_client_message_free>
   37726:	2301      	movs	r3, #1
   37728:	2523      	movs	r5, #35	; 0x23
   3772a:	603b      	str	r3, [r7, #0]
   3772c:	4640      	mov	r0, r8
   3772e:	f001 fb3d 	bl	38dac <interface_socket_free>
   37732:	4628      	mov	r0, r5
   37734:	f7f8 fd2e 	bl	30194 <bsd_os_errno_set>
   37738:	f04f 38ff 	mov.w	r8, #4294967295
   3773c:	4640      	mov	r0, r8
   3773e:	b002      	add	sp, #8
   37740:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   37744:	2c01      	cmp	r4, #1
   37746:	d009      	beq.n	3775c <ip_interface_open+0xec>
   37748:	2c02      	cmp	r4, #2
   3774a:	d109      	bne.n	37760 <ip_interface_open+0xf0>
   3774c:	2f02      	cmp	r7, #2
   3774e:	d0a9      	beq.n	376a4 <ip_interface_open+0x34>
   37750:	2029      	movs	r0, #41	; 0x29
   37752:	f7f8 fd1f 	bl	30194 <bsd_os_errno_set>
   37756:	f04f 38ff 	mov.w	r8, #4294967295
   3775a:	e7ef      	b.n	3773c <ip_interface_open+0xcc>
   3775c:	2f01      	cmp	r7, #1
   3775e:	d1f7      	bne.n	37750 <ip_interface_open+0xe0>
   37760:	2702      	movs	r7, #2
   37762:	e79f      	b.n	376a4 <ip_interface_open+0x34>
   37764:	9d01      	ldr	r5, [sp, #4]
   37766:	2d00      	cmp	r5, #0
   37768:	d1c1      	bne.n	376ee <ip_interface_open+0x7e>
   3776a:	250c      	movs	r5, #12
   3776c:	e7de      	b.n	3772c <ip_interface_open+0xbc>
   3776e:	4627      	mov	r7, r4
   37770:	e798      	b.n	376a4 <ip_interface_open+0x34>
   37772:	f04f 33ff 	mov.w	r3, #4294967295
   37776:	f64f 72ff 	movw	r2, #65535	; 0xffff
   3777a:	2102      	movs	r1, #2
   3777c:	4640      	mov	r0, r8
   3777e:	f001 fb63 	bl	38e48 <interface_socket_wait>
   37782:	4605      	mov	r5, r0
   37784:	2800      	cmp	r0, #0
   37786:	d1d1      	bne.n	3772c <ip_interface_open+0xbc>
   37788:	4640      	mov	r0, r8
   3778a:	f001 fbd1 	bl	38f30 <interface_socket_from_handle_get>
   3778e:	b148      	cbz	r0, 377a4 <ip_interface_open+0x134>
   37790:	6845      	ldr	r5, [r0, #4]
   37792:	b13d      	cbz	r5, 377a4 <ip_interface_open+0x134>
   37794:	6046      	str	r6, [r0, #4]
   37796:	e7c9      	b.n	3772c <ip_interface_open+0xbc>
   37798:	202f      	movs	r0, #47	; 0x2f
   3779a:	f7f8 fcfb 	bl	30194 <bsd_os_errno_set>
   3779e:	f04f 38ff 	mov.w	r8, #4294967295
   377a2:	e7cb      	b.n	3773c <ip_interface_open+0xcc>
   377a4:	3c02      	subs	r4, #2
   377a6:	2c01      	cmp	r4, #1
   377a8:	d8c8      	bhi.n	3773c <ip_interface_open+0xcc>
   377aa:	4640      	mov	r0, r8
   377ac:	9b00      	ldr	r3, [sp, #0]
   377ae:	681a      	ldr	r2, [r3, #0]
   377b0:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
   377b4:	601a      	str	r2, [r3, #0]
   377b6:	681a      	ldr	r2, [r3, #0]
   377b8:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
   377bc:	601a      	str	r2, [r3, #0]
   377be:	b002      	add	sp, #8
   377c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   377c4:	2016      	movs	r0, #22
   377c6:	f7f8 fce5 	bl	30194 <bsd_os_errno_set>
   377ca:	f04f 38ff 	mov.w	r8, #4294967295
   377ce:	e7b5      	b.n	3773c <ip_interface_open+0xcc>
   377d0:	00037585 	.word	0x00037585

000377d4 <ip_interface_close>:
   377d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   377d8:	b082      	sub	sp, #8
   377da:	4606      	mov	r6, r0
   377dc:	f001 fba8 	bl	38f30 <interface_socket_from_handle_get>
   377e0:	2800      	cmp	r0, #0
   377e2:	d063      	beq.n	378ac <ip_interface_close+0xd8>
   377e4:	4604      	mov	r4, r0
   377e6:	2100      	movs	r1, #0
   377e8:	a802      	add	r0, sp, #8
   377ea:	6827      	ldr	r7, [r4, #0]
   377ec:	f840 1d04 	str.w	r1, [r0, #-4]!
   377f0:	f8d4 8018 	ldr.w	r8, [r4, #24]
   377f4:	f7fc fab6 	bl	33d64 <rpc_ip_client_request_alloc>
   377f8:	2800      	cmp	r0, #0
   377fa:	d13a      	bne.n	37872 <ip_interface_close+0x9e>
   377fc:	f247 0309 	movw	r3, #28681	; 0x7009
   37800:	2208      	movs	r2, #8
   37802:	9d01      	ldr	r5, [sp, #4]
   37804:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
   37808:	60eb      	str	r3, [r5, #12]
   3780a:	f8c5 8010 	str.w	r8, [r5, #16]
   3780e:	7268      	strb	r0, [r5, #9]
   37810:	72a8      	strb	r0, [r5, #10]
   37812:	72e8      	strb	r0, [r5, #11]
   37814:	722a      	strb	r2, [r5, #8]
   37816:	6823      	ldr	r3, [r4, #0]
   37818:	f247 0109 	movw	r1, #28681	; 0x7009
   3781c:	0c1b      	lsrs	r3, r3, #16
   3781e:	041b      	lsls	r3, r3, #16
   37820:	f043 030d 	orr.w	r3, r3, #13
   37824:	6023      	str	r3, [r4, #0]
   37826:	6823      	ldr	r3, [r4, #0]
   37828:	4628      	mov	r0, r5
   3782a:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
   3782e:	6023      	str	r3, [r4, #0]
   37830:	6823      	ldr	r3, [r4, #0]
   37832:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
   37836:	6023      	str	r3, [r4, #0]
   37838:	f7fc faa8 	bl	33d8c <rpc_ip_client_request_send>
   3783c:	bb40      	cbnz	r0, 37890 <ip_interface_close+0xbc>
   3783e:	f04f 33ff 	mov.w	r3, #4294967295
   37842:	f64f 72ff 	movw	r2, #65535	; 0xffff
   37846:	210e      	movs	r1, #14
   37848:	4630      	mov	r0, r6
   3784a:	f001 fafd 	bl	38e48 <interface_socket_wait>
   3784e:	4604      	mov	r4, r0
   37850:	b1a0      	cbz	r0, 3787c <ip_interface_close+0xa8>
   37852:	4c17      	ldr	r4, [pc, #92]	; (378b0 <ip_interface_close+0xdc>)
   37854:	f854 0026 	ldr.w	r0, [r4, r6, lsl #2]
   37858:	b120      	cbz	r0, 37864 <ip_interface_close+0x90>
   3785a:	f7fc faad 	bl	33db8 <rpc_ip_client_message_free>
   3785e:	2300      	movs	r3, #0
   37860:	f844 3026 	str.w	r3, [r4, r6, lsl #2]
   37864:	4630      	mov	r0, r6
   37866:	f001 faa1 	bl	38dac <interface_socket_free>
   3786a:	2000      	movs	r0, #0
   3786c:	b002      	add	sp, #8
   3786e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   37872:	9d01      	ldr	r5, [sp, #4]
   37874:	200c      	movs	r0, #12
   37876:	2d00      	cmp	r5, #0
   37878:	d1cd      	bne.n	37816 <ip_interface_close+0x42>
   3787a:	e012      	b.n	378a2 <ip_interface_close+0xce>
   3787c:	4630      	mov	r0, r6
   3787e:	f001 fb57 	bl	38f30 <interface_socket_from_handle_get>
   37882:	2800      	cmp	r0, #0
   37884:	d0e5      	beq.n	37852 <ip_interface_close+0x7e>
   37886:	6843      	ldr	r3, [r0, #4]
   37888:	2b00      	cmp	r3, #0
   3788a:	d0e2      	beq.n	37852 <ip_interface_close+0x7e>
   3788c:	6044      	str	r4, [r0, #4]
   3788e:	e7e0      	b.n	37852 <ip_interface_close+0x7e>
   37890:	6828      	ldr	r0, [r5, #0]
   37892:	b108      	cbz	r0, 37898 <ip_interface_close+0xc4>
   37894:	f7fc fa98 	bl	33dc8 <rpc_ip_client_data_free>
   37898:	4628      	mov	r0, r5
   3789a:	f7fc fa8d 	bl	33db8 <rpc_ip_client_message_free>
   3789e:	2023      	movs	r0, #35	; 0x23
   378a0:	6027      	str	r7, [r4, #0]
   378a2:	f7f8 fc77 	bl	30194 <bsd_os_errno_set>
   378a6:	f04f 30ff 	mov.w	r0, #4294967295
   378aa:	e7df      	b.n	3786c <ip_interface_close+0x98>
   378ac:	2009      	movs	r0, #9
   378ae:	e7f8      	b.n	378a2 <ip_interface_close+0xce>
   378b0:	20025350 	.word	0x20025350

000378b4 <ip_interface_sendto>:
   378b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   378b8:	2400      	movs	r4, #0
   378ba:	b089      	sub	sp, #36	; 0x24
   378bc:	9102      	str	r1, [sp, #8]
   378be:	4615      	mov	r5, r2
   378c0:	4699      	mov	r9, r3
   378c2:	9407      	str	r4, [sp, #28]
   378c4:	4607      	mov	r7, r0
   378c6:	9e12      	ldr	r6, [sp, #72]	; 0x48
   378c8:	f001 fb32 	bl	38f30 <interface_socket_from_handle_get>
   378cc:	2800      	cmp	r0, #0
   378ce:	f000 815f 	beq.w	37b90 <ip_interface_sendto+0x2dc>
   378d2:	f5b5 5f80 	cmp.w	r5, #4096	; 0x1000
   378d6:	f300 814c 	bgt.w	37b72 <ip_interface_sendto+0x2be>
   378da:	6903      	ldr	r3, [r0, #16]
   378dc:	4604      	mov	r4, r0
   378de:	2b01      	cmp	r3, #1
   378e0:	f000 80fb 	beq.w	37ada <ip_interface_sendto+0x226>
   378e4:	6822      	ldr	r2, [r4, #0]
   378e6:	0390      	lsls	r0, r2, #14
   378e8:	d562      	bpl.n	379b0 <ip_interface_sendto+0xfc>
   378ea:	f1b9 0f00 	cmp.w	r9, #0
   378ee:	f000 80fc 	beq.w	37aea <ip_interface_sendto+0x236>
   378f2:	f019 0f02 	tst.w	r9, #2
   378f6:	f000 8146 	beq.w	37b86 <ip_interface_sendto+0x2d2>
   378fa:	2300      	movs	r3, #0
   378fc:	9303      	str	r3, [sp, #12]
   378fe:	f247 0806 	movw	r8, #28678	; 0x7006
   37902:	f04f 0b0c 	mov.w	fp, #12
   37906:	4ba6      	ldr	r3, [pc, #664]	; (37ba0 <ip_interface_sendto+0x2ec>)
   37908:	9300      	str	r3, [sp, #0]
   3790a:	043b      	lsls	r3, r7, #16
   3790c:	9304      	str	r3, [sp, #16]
   3790e:	4629      	mov	r1, r5
   37910:	a807      	add	r0, sp, #28
   37912:	f7fc fa27 	bl	33d64 <rpc_ip_client_request_alloc>
   37916:	2804      	cmp	r0, #4
   37918:	d063      	beq.n	379e2 <ip_interface_sendto+0x12e>
   3791a:	2800      	cmp	r0, #0
   3791c:	f040 813d 	bne.w	37b9a <ip_interface_sendto+0x2e6>
   37920:	9b07      	ldr	r3, [sp, #28]
   37922:	f883 b008 	strb.w	fp, [r3, #8]
   37926:	7258      	strb	r0, [r3, #9]
   37928:	7298      	strb	r0, [r3, #10]
   3792a:	72d8      	strb	r0, [r3, #11]
   3792c:	2e00      	cmp	r6, #0
   3792e:	d074      	beq.n	37a1a <ip_interface_sendto+0x166>
   37930:	68e2      	ldr	r2, [r4, #12]
   37932:	6871      	ldr	r1, [r6, #4]
   37934:	428a      	cmp	r2, r1
   37936:	f040 80a2 	bne.w	37a7e <ip_interface_sendto+0x1ca>
   3793a:	7831      	ldrb	r1, [r6, #0]
   3793c:	9813      	ldr	r0, [sp, #76]	; 0x4c
   3793e:	4288      	cmp	r0, r1
   37940:	d10a      	bne.n	37958 <ip_interface_sendto+0xa4>
   37942:	2a02      	cmp	r2, #2
   37944:	f103 001c 	add.w	r0, r3, #28
   37948:	f000 8101 	beq.w	37b4e <ip_interface_sendto+0x29a>
   3794c:	2a0a      	cmp	r2, #10
   3794e:	d103      	bne.n	37958 <ip_interface_sendto+0xa4>
   37950:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   37952:	2a24      	cmp	r2, #36	; 0x24
   37954:	f000 80e8 	beq.w	37b28 <ip_interface_sendto+0x274>
   37958:	f04f 0a16 	mov.w	sl, #22
   3795c:	6818      	ldr	r0, [r3, #0]
   3795e:	b110      	cbz	r0, 37966 <ip_interface_sendto+0xb2>
   37960:	f7fc fa32 	bl	33dc8 <rpc_ip_client_data_free>
   37964:	9b07      	ldr	r3, [sp, #28]
   37966:	4618      	mov	r0, r3
   37968:	f7fc fa26 	bl	33db8 <rpc_ip_client_message_free>
   3796c:	6823      	ldr	r3, [r4, #0]
   3796e:	031a      	lsls	r2, r3, #12
   37970:	d43f      	bmi.n	379f2 <ip_interface_sendto+0x13e>
   37972:	6823      	ldr	r3, [r4, #0]
   37974:	b29b      	uxth	r3, r3
   37976:	2b0d      	cmp	r3, #13
   37978:	d007      	beq.n	3798a <ip_interface_sendto+0xd6>
   3797a:	6823      	ldr	r3, [r4, #0]
   3797c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
   37980:	6023      	str	r3, [r4, #0]
   37982:	6823      	ldr	r3, [r4, #0]
   37984:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   37988:	6023      	str	r3, [r4, #0]
   3798a:	f1ba 0f00 	cmp.w	sl, #0
   3798e:	d130      	bne.n	379f2 <ip_interface_sendto+0x13e>
   37990:	6823      	ldr	r3, [r4, #0]
   37992:	0118      	lsls	r0, r3, #4
   37994:	d576      	bpl.n	37a84 <ip_interface_sendto+0x1d0>
   37996:	6823      	ldr	r3, [r4, #0]
   37998:	f023 6300 	bic.w	r3, r3, #134217728	; 0x8000000
   3799c:	6023      	str	r3, [r4, #0]
   3799e:	9b00      	ldr	r3, [sp, #0]
   379a0:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
   379a4:	2800      	cmp	r0, #0
   379a6:	d12e      	bne.n	37a06 <ip_interface_sendto+0x152>
   379a8:	4628      	mov	r0, r5
   379aa:	b009      	add	sp, #36	; 0x24
   379ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   379b0:	6822      	ldr	r2, [r4, #0]
   379b2:	0091      	lsls	r1, r2, #2
   379b4:	d406      	bmi.n	379c4 <ip_interface_sendto+0x110>
   379b6:	2b01      	cmp	r3, #1
   379b8:	f000 80b0 	beq.w	37b1c <ip_interface_sendto+0x268>
   379bc:	6823      	ldr	r3, [r4, #0]
   379be:	031a      	lsls	r2, r3, #12
   379c0:	f140 80d2 	bpl.w	37b68 <ip_interface_sendto+0x2b4>
   379c4:	6823      	ldr	r3, [r4, #0]
   379c6:	031b      	lsls	r3, r3, #12
   379c8:	f140 80d8 	bpl.w	37b7c <ip_interface_sendto+0x2c8>
   379cc:	4b74      	ldr	r3, [pc, #464]	; (37ba0 <ip_interface_sendto+0x2ec>)
   379ce:	f8d4 a008 	ldr.w	sl, [r4, #8]
   379d2:	9300      	str	r3, [sp, #0]
   379d4:	e7d9      	b.n	3798a <ip_interface_sendto+0xd6>
   379d6:	9b00      	ldr	r3, [sp, #0]
   379d8:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
   379dc:	b108      	cbz	r0, 379e2 <ip_interface_sendto+0x12e>
   379de:	f7fc f9eb 	bl	33db8 <rpc_ip_client_message_free>
   379e2:	9b03      	ldr	r3, [sp, #12]
   379e4:	2b00      	cmp	r3, #0
   379e6:	d192      	bne.n	3790e <ip_interface_sendto+0x5a>
   379e8:	6823      	ldr	r3, [r4, #0]
   379ea:	f04f 0a23 	mov.w	sl, #35	; 0x23
   379ee:	031a      	lsls	r2, r3, #12
   379f0:	d5bf      	bpl.n	37972 <ip_interface_sendto+0xbe>
   379f2:	4650      	mov	r0, sl
   379f4:	f7f8 fbce 	bl	30194 <bsd_os_errno_set>
   379f8:	9b00      	ldr	r3, [sp, #0]
   379fa:	f04f 35ff 	mov.w	r5, #4294967295
   379fe:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
   37a02:	2800      	cmp	r0, #0
   37a04:	d0d0      	beq.n	379a8 <ip_interface_sendto+0xf4>
   37a06:	f7fc f9d7 	bl	33db8 <rpc_ip_client_message_free>
   37a0a:	2300      	movs	r3, #0
   37a0c:	9a00      	ldr	r2, [sp, #0]
   37a0e:	f842 3027 	str.w	r3, [r2, r7, lsl #2]
   37a12:	4628      	mov	r0, r5
   37a14:	b009      	add	sp, #36	; 0x24
   37a16:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   37a1a:	4642      	mov	r2, r8
   37a1c:	f8c3 9014 	str.w	r9, [r3, #20]
   37a20:	69a1      	ldr	r1, [r4, #24]
   37a22:	9804      	ldr	r0, [sp, #16]
   37a24:	6119      	str	r1, [r3, #16]
   37a26:	9902      	ldr	r1, [sp, #8]
   37a28:	4302      	orrs	r2, r0
   37a2a:	60da      	str	r2, [r3, #12]
   37a2c:	605d      	str	r5, [r3, #4]
   37a2e:	b119      	cbz	r1, 37a38 <ip_interface_sendto+0x184>
   37a30:	6818      	ldr	r0, [r3, #0]
   37a32:	462a      	mov	r2, r5
   37a34:	f00d fa0c 	bl	44e50 <memcpy>
   37a38:	6823      	ldr	r3, [r4, #0]
   37a3a:	4641      	mov	r1, r8
   37a3c:	9305      	str	r3, [sp, #20]
   37a3e:	6823      	ldr	r3, [r4, #0]
   37a40:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
   37a44:	6023      	str	r3, [r4, #0]
   37a46:	6823      	ldr	r3, [r4, #0]
   37a48:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
   37a4c:	6023      	str	r3, [r4, #0]
   37a4e:	9b07      	ldr	r3, [sp, #28]
   37a50:	4618      	mov	r0, r3
   37a52:	9301      	str	r3, [sp, #4]
   37a54:	f7fc f99a 	bl	33d8c <rpc_ip_client_request_send>
   37a58:	9b01      	ldr	r3, [sp, #4]
   37a5a:	4682      	mov	sl, r0
   37a5c:	b9e8      	cbnz	r0, 37a9a <ip_interface_sendto+0x1e6>
   37a5e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
   37a62:	f04f 33ff 	mov.w	r3, #4294967295
   37a66:	4611      	mov	r1, r2
   37a68:	4638      	mov	r0, r7
   37a6a:	f001 f9ed 	bl	38e48 <interface_socket_wait>
   37a6e:	b308      	cbz	r0, 37ab4 <ip_interface_sendto+0x200>
   37a70:	6823      	ldr	r3, [r4, #0]
   37a72:	0319      	lsls	r1, r3, #12
   37a74:	d42a      	bmi.n	37acc <ip_interface_sendto+0x218>
   37a76:	280c      	cmp	r0, #12
   37a78:	d0ad      	beq.n	379d6 <ip_interface_sendto+0x122>
   37a7a:	4682      	mov	sl, r0
   37a7c:	e776      	b.n	3796c <ip_interface_sendto+0xb8>
   37a7e:	f04f 0a2f 	mov.w	sl, #47	; 0x2f
   37a82:	e76b      	b.n	3795c <ip_interface_sendto+0xa8>
   37a84:	9b00      	ldr	r3, [sp, #0]
   37a86:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
   37a8a:	6985      	ldr	r5, [r0, #24]
   37a8c:	f7fc f994 	bl	33db8 <rpc_ip_client_message_free>
   37a90:	2300      	movs	r3, #0
   37a92:	9a00      	ldr	r2, [sp, #0]
   37a94:	f842 3027 	str.w	r3, [r2, r7, lsl #2]
   37a98:	e7bb      	b.n	37a12 <ip_interface_sendto+0x15e>
   37a9a:	6818      	ldr	r0, [r3, #0]
   37a9c:	469a      	mov	sl, r3
   37a9e:	b108      	cbz	r0, 37aa4 <ip_interface_sendto+0x1f0>
   37aa0:	f7fc f992 	bl	33dc8 <rpc_ip_client_data_free>
   37aa4:	4650      	mov	r0, sl
   37aa6:	f7fc f987 	bl	33db8 <rpc_ip_client_message_free>
   37aaa:	9b05      	ldr	r3, [sp, #20]
   37aac:	f04f 0a23 	mov.w	sl, #35	; 0x23
   37ab0:	6023      	str	r3, [r4, #0]
   37ab2:	e75b      	b.n	3796c <ip_interface_sendto+0xb8>
   37ab4:	4638      	mov	r0, r7
   37ab6:	f001 fa3b 	bl	38f30 <interface_socket_from_handle_get>
   37aba:	4603      	mov	r3, r0
   37abc:	b1e0      	cbz	r0, 37af8 <ip_interface_sendto+0x244>
   37abe:	6840      	ldr	r0, [r0, #4]
   37ac0:	b1d0      	cbz	r0, 37af8 <ip_interface_sendto+0x244>
   37ac2:	f8c3 a004 	str.w	sl, [r3, #4]
   37ac6:	6823      	ldr	r3, [r4, #0]
   37ac8:	0319      	lsls	r1, r3, #12
   37aca:	d5d4      	bpl.n	37a76 <ip_interface_sendto+0x1c2>
   37acc:	f8d4 a008 	ldr.w	sl, [r4, #8]
   37ad0:	6823      	ldr	r3, [r4, #0]
   37ad2:	031e      	lsls	r6, r3, #12
   37ad4:	f57f af4d 	bpl.w	37972 <ip_interface_sendto+0xbe>
   37ad8:	e757      	b.n	3798a <ip_interface_sendto+0xd6>
   37ada:	2e00      	cmp	r6, #0
   37adc:	f43f af02 	beq.w	378e4 <ip_interface_sendto+0x30>
   37ae0:	4b2f      	ldr	r3, [pc, #188]	; (37ba0 <ip_interface_sendto+0x2ec>)
   37ae2:	f04f 0a38 	mov.w	sl, #56	; 0x38
   37ae6:	9300      	str	r3, [sp, #0]
   37ae8:	e783      	b.n	379f2 <ip_interface_sendto+0x13e>
   37aea:	6823      	ldr	r3, [r4, #0]
   37aec:	f083 5380 	eor.w	r3, r3, #268435456	; 0x10000000
   37af0:	f3c3 7300 	ubfx	r3, r3, #28, #1
   37af4:	9303      	str	r3, [sp, #12]
   37af6:	e702      	b.n	378fe <ip_interface_sendto+0x4a>
   37af8:	6823      	ldr	r3, [r4, #0]
   37afa:	031b      	lsls	r3, r3, #12
   37afc:	f53f af48 	bmi.w	37990 <ip_interface_sendto+0xdc>
   37b00:	6823      	ldr	r3, [r4, #0]
   37b02:	b29b      	uxth	r3, r3
   37b04:	2b0d      	cmp	r3, #13
   37b06:	f43f af43 	beq.w	37990 <ip_interface_sendto+0xdc>
   37b0a:	6823      	ldr	r3, [r4, #0]
   37b0c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
   37b10:	6023      	str	r3, [r4, #0]
   37b12:	6823      	ldr	r3, [r4, #0]
   37b14:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   37b18:	6023      	str	r3, [r4, #0]
   37b1a:	e739      	b.n	37990 <ip_interface_sendto+0xdc>
   37b1c:	6823      	ldr	r3, [r4, #0]
   37b1e:	b29b      	uxth	r3, r3
   37b20:	2b05      	cmp	r3, #5
   37b22:	f47f af4f 	bne.w	379c4 <ip_interface_sendto+0x110>
   37b26:	e749      	b.n	379bc <ip_interface_sendto+0x108>
   37b28:	2210      	movs	r2, #16
   37b2a:	8931      	ldrh	r1, [r6, #8]
   37b2c:	835a      	strh	r2, [r3, #26]
   37b2e:	8319      	strh	r1, [r3, #24]
   37b30:	18b1      	adds	r1, r6, r2
   37b32:	f00d f98d 	bl	44e50 <memcpy>
   37b36:	f247 0207 	movw	r2, #28679	; 0x7007
   37b3a:	9b07      	ldr	r3, [sp, #28]
   37b3c:	4690      	mov	r8, r2
   37b3e:	6899      	ldr	r1, [r3, #8]
   37b40:	8b58      	ldrh	r0, [r3, #26]
   37b42:	3104      	adds	r1, #4
   37b44:	4401      	add	r1, r0
   37b46:	f8c3 9014 	str.w	r9, [r3, #20]
   37b4a:	6099      	str	r1, [r3, #8]
   37b4c:	e768      	b.n	37a20 <ip_interface_sendto+0x16c>
   37b4e:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   37b50:	2a10      	cmp	r2, #16
   37b52:	f47f af01 	bne.w	37958 <ip_interface_sendto+0xa4>
   37b56:	2204      	movs	r2, #4
   37b58:	8931      	ldrh	r1, [r6, #8]
   37b5a:	835a      	strh	r2, [r3, #26]
   37b5c:	8319      	strh	r1, [r3, #24]
   37b5e:	f106 010c 	add.w	r1, r6, #12
   37b62:	f00d f975 	bl	44e50 <memcpy>
   37b66:	e7e6      	b.n	37b36 <ip_interface_sendto+0x282>
   37b68:	4b0d      	ldr	r3, [pc, #52]	; (37ba0 <ip_interface_sendto+0x2ec>)
   37b6a:	f04f 0a23 	mov.w	sl, #35	; 0x23
   37b6e:	9300      	str	r3, [sp, #0]
   37b70:	e73f      	b.n	379f2 <ip_interface_sendto+0x13e>
   37b72:	4b0b      	ldr	r3, [pc, #44]	; (37ba0 <ip_interface_sendto+0x2ec>)
   37b74:	f04f 0a28 	mov.w	sl, #40	; 0x28
   37b78:	9300      	str	r3, [sp, #0]
   37b7a:	e73a      	b.n	379f2 <ip_interface_sendto+0x13e>
   37b7c:	4b08      	ldr	r3, [pc, #32]	; (37ba0 <ip_interface_sendto+0x2ec>)
   37b7e:	f04f 0a39 	mov.w	sl, #57	; 0x39
   37b82:	9300      	str	r3, [sp, #0]
   37b84:	e735      	b.n	379f2 <ip_interface_sendto+0x13e>
   37b86:	4b06      	ldr	r3, [pc, #24]	; (37ba0 <ip_interface_sendto+0x2ec>)
   37b88:	f04f 0a2d 	mov.w	sl, #45	; 0x2d
   37b8c:	9300      	str	r3, [sp, #0]
   37b8e:	e730      	b.n	379f2 <ip_interface_sendto+0x13e>
   37b90:	4b03      	ldr	r3, [pc, #12]	; (37ba0 <ip_interface_sendto+0x2ec>)
   37b92:	f04f 0a09 	mov.w	sl, #9
   37b96:	9300      	str	r3, [sp, #0]
   37b98:	e72b      	b.n	379f2 <ip_interface_sendto+0x13e>
   37b9a:	f04f 0a0c 	mov.w	sl, #12
   37b9e:	e6e5      	b.n	3796c <ip_interface_sendto+0xb8>
   37ba0:	20025350 	.word	0x20025350

00037ba4 <ip_interface_recvfrom>:
   37ba4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   37ba8:	b085      	sub	sp, #20
   37baa:	2a00      	cmp	r2, #0
   37bac:	f000 811b 	beq.w	37de6 <ip_interface_recvfrom+0x242>
   37bb0:	4605      	mov	r5, r0
   37bb2:	468a      	mov	sl, r1
   37bb4:	4698      	mov	r8, r3
   37bb6:	4617      	mov	r7, r2
   37bb8:	b11b      	cbz	r3, 37bc2 <ip_interface_recvfrom+0x1e>
   37bba:	f013 0f1a 	tst.w	r3, #26
   37bbe:	f000 810f 	beq.w	37de0 <ip_interface_recvfrom+0x23c>
   37bc2:	4628      	mov	r0, r5
   37bc4:	f001 f9b4 	bl	38f30 <interface_socket_from_handle_get>
   37bc8:	4604      	mov	r4, r0
   37bca:	2800      	cmp	r0, #0
   37bcc:	f000 810e 	beq.w	37dec <ip_interface_recvfrom+0x248>
   37bd0:	6803      	ldr	r3, [r0, #0]
   37bd2:	02d9      	lsls	r1, r3, #11
   37bd4:	d564      	bpl.n	37ca0 <ip_interface_recvfrom+0xfc>
   37bd6:	f018 0f02 	tst.w	r8, #2
   37bda:	bf18      	it	ne
   37bdc:	f04f 0900 	movne.w	r9, #0
   37be0:	f04f 3bff 	mov.w	fp, #4294967295
   37be4:	bf08      	it	eq
   37be6:	6803      	ldreq	r3, [r0, #0]
   37be8:	f008 0610 	and.w	r6, r8, #16
   37bec:	bf04      	itt	eq
   37bee:	f083 5980 	eoreq.w	r9, r3, #268435456	; 0x10000000
   37bf2:	f3c9 7900 	ubfxeq	r9, r9, #28, #1
   37bf6:	6823      	ldr	r3, [r4, #0]
   37bf8:	03da      	lsls	r2, r3, #15
   37bfa:	d56c      	bpl.n	37cd6 <ip_interface_recvfrom+0x132>
   37bfc:	6823      	ldr	r3, [r4, #0]
   37bfe:	69e0      	ldr	r0, [r4, #28]
   37c00:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
   37c04:	6023      	str	r3, [r4, #0]
   37c06:	6803      	ldr	r3, [r0, #0]
   37c08:	68db      	ldr	r3, [r3, #12]
   37c0a:	4798      	blx	r3
   37c0c:	f1b0 3fff 	cmp.w	r0, #4294967295
   37c10:	4683      	mov	fp, r0
   37c12:	d07f      	beq.n	37d14 <ip_interface_recvfrom+0x170>
   37c14:	4287      	cmp	r7, r0
   37c16:	dd03      	ble.n	37c20 <ip_interface_recvfrom+0x7c>
   37c18:	6923      	ldr	r3, [r4, #16]
   37c1a:	2b01      	cmp	r3, #1
   37c1c:	f000 80a6 	beq.w	37d6c <ip_interface_recvfrom+0x1c8>
   37c20:	2600      	movs	r6, #0
   37c22:	69e0      	ldr	r0, [r4, #28]
   37c24:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   37c26:	b103      	cbz	r3, 37c2a <ip_interface_recvfrom+0x86>
   37c28:	681b      	ldr	r3, [r3, #0]
   37c2a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   37c2c:	e9cd a700 	strd	sl, r7, [sp]
   37c30:	e9cd 2302 	strd	r2, r3, [sp, #8]
   37c34:	6803      	ldr	r3, [r0, #0]
   37c36:	4642      	mov	r2, r8
   37c38:	689b      	ldr	r3, [r3, #8]
   37c3a:	4669      	mov	r1, sp
   37c3c:	4798      	blx	r3
   37c3e:	4683      	mov	fp, r0
   37c40:	69e0      	ldr	r0, [r4, #28]
   37c42:	f1bb 3fff 	cmp.w	fp, #4294967295
   37c46:	6803      	ldr	r3, [r0, #0]
   37c48:	bf18      	it	ne
   37c4a:	2501      	movne	r5, #1
   37c4c:	68db      	ldr	r3, [r3, #12]
   37c4e:	bf0a      	itet	eq
   37c50:	2500      	moveq	r5, #0
   37c52:	f04f 0900 	movne.w	r9, #0
   37c56:	f04f 0923 	moveq.w	r9, #35	; 0x23
   37c5a:	4798      	blx	r3
   37c5c:	3001      	adds	r0, #1
   37c5e:	d135      	bne.n	37ccc <ip_interface_recvfrom+0x128>
   37c60:	2e00      	cmp	r6, #0
   37c62:	f000 80b5 	beq.w	37dd0 <ip_interface_recvfrom+0x22c>
   37c66:	2d00      	cmp	r5, #0
   37c68:	f000 80a5 	beq.w	37db6 <ip_interface_recvfrom+0x212>
   37c6c:	6823      	ldr	r3, [r4, #0]
   37c6e:	0319      	lsls	r1, r3, #12
   37c70:	d506      	bpl.n	37c80 <ip_interface_recvfrom+0xdc>
   37c72:	6823      	ldr	r3, [r4, #0]
   37c74:	b29b      	uxth	r3, r3
   37c76:	2b0d      	cmp	r3, #13
   37c78:	d002      	beq.n	37c80 <ip_interface_recvfrom+0xdc>
   37c7a:	6923      	ldr	r3, [r4, #16]
   37c7c:	2b01      	cmp	r3, #1
   37c7e:	d025      	beq.n	37ccc <ip_interface_recvfrom+0x128>
   37c80:	6823      	ldr	r3, [r4, #0]
   37c82:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
   37c86:	6823      	ldr	r3, [r4, #0]
   37c88:	f040 80b3 	bne.w	37df2 <ip_interface_recvfrom+0x24e>
   37c8c:	031a      	lsls	r2, r3, #12
   37c8e:	d474      	bmi.n	37d7a <ip_interface_recvfrom+0x1d6>
   37c90:	f1b9 0f00 	cmp.w	r9, #0
   37c94:	f040 8089 	bne.w	37daa <ip_interface_recvfrom+0x206>
   37c98:	4658      	mov	r0, fp
   37c9a:	b005      	add	sp, #20
   37c9c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   37ca0:	6803      	ldr	r3, [r0, #0]
   37ca2:	b29b      	uxth	r3, r3
   37ca4:	2b06      	cmp	r3, #6
   37ca6:	d072      	beq.n	37d8e <ip_interface_recvfrom+0x1ea>
   37ca8:	6803      	ldr	r3, [r0, #0]
   37caa:	b29b      	uxth	r3, r3
   37cac:	2b07      	cmp	r3, #7
   37cae:	bf0c      	ite	eq
   37cb0:	f04f 0909 	moveq.w	r9, #9
   37cb4:	f04f 0939 	movne.w	r9, #57	; 0x39
   37cb8:	69e0      	ldr	r0, [r4, #28]
   37cba:	6803      	ldr	r3, [r0, #0]
   37cbc:	68db      	ldr	r3, [r3, #12]
   37cbe:	4798      	blx	r3
   37cc0:	f1b0 3fff 	cmp.w	r0, #4294967295
   37cc4:	4683      	mov	fp, r0
   37cc6:	d0db      	beq.n	37c80 <ip_interface_recvfrom+0xdc>
   37cc8:	f04f 3bff 	mov.w	fp, #4294967295
   37ccc:	6823      	ldr	r3, [r4, #0]
   37cce:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   37cd2:	6023      	str	r3, [r4, #0]
   37cd4:	e7dc      	b.n	37c90 <ip_interface_recvfrom+0xec>
   37cd6:	f1b9 0f00 	cmp.w	r9, #0
   37cda:	d07d      	beq.n	37dd8 <ip_interface_recvfrom+0x234>
   37cdc:	f44f 3280 	mov.w	r2, #65536	; 0x10000
   37ce0:	6a23      	ldr	r3, [r4, #32]
   37ce2:	4611      	mov	r1, r2
   37ce4:	2b00      	cmp	r3, #0
   37ce6:	bf08      	it	eq
   37ce8:	f04f 33ff 	moveq.w	r3, #4294967295
   37cec:	4628      	mov	r0, r5
   37cee:	f001 f8ab 	bl	38e48 <interface_socket_wait>
   37cf2:	4681      	mov	r9, r0
   37cf4:	b358      	cbz	r0, 37d4e <ip_interface_recvfrom+0x1aa>
   37cf6:	6823      	ldr	r3, [r4, #0]
   37cf8:	69e0      	ldr	r0, [r4, #28]
   37cfa:	031b      	lsls	r3, r3, #12
   37cfc:	d521      	bpl.n	37d42 <ip_interface_recvfrom+0x19e>
   37cfe:	6823      	ldr	r3, [r4, #0]
   37d00:	b29b      	uxth	r3, r3
   37d02:	2b0d      	cmp	r3, #13
   37d04:	d01d      	beq.n	37d42 <ip_interface_recvfrom+0x19e>
   37d06:	6926      	ldr	r6, [r4, #16]
   37d08:	f1a6 0601 	sub.w	r6, r6, #1
   37d0c:	fab6 f686 	clz	r6, r6
   37d10:	0976      	lsrs	r6, r6, #5
   37d12:	e787      	b.n	37c24 <ip_interface_recvfrom+0x80>
   37d14:	6823      	ldr	r3, [r4, #0]
   37d16:	0318      	lsls	r0, r3, #12
   37d18:	d5dd      	bpl.n	37cd6 <ip_interface_recvfrom+0x132>
   37d1a:	6823      	ldr	r3, [r4, #0]
   37d1c:	b29b      	uxth	r3, r3
   37d1e:	2b0d      	cmp	r3, #13
   37d20:	d0d9      	beq.n	37cd6 <ip_interface_recvfrom+0x132>
   37d22:	6923      	ldr	r3, [r4, #16]
   37d24:	69e0      	ldr	r0, [r4, #28]
   37d26:	2b01      	cmp	r3, #1
   37d28:	d034      	beq.n	37d94 <ip_interface_recvfrom+0x1f0>
   37d2a:	f04f 0939 	mov.w	r9, #57	; 0x39
   37d2e:	6823      	ldr	r3, [r4, #0]
   37d30:	0c1b      	lsrs	r3, r3, #16
   37d32:	041b      	lsls	r3, r3, #16
   37d34:	f043 030d 	orr.w	r3, r3, #13
   37d38:	6023      	str	r3, [r4, #0]
   37d3a:	6823      	ldr	r3, [r4, #0]
   37d3c:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
   37d40:	6023      	str	r3, [r4, #0]
   37d42:	6803      	ldr	r3, [r0, #0]
   37d44:	68db      	ldr	r3, [r3, #12]
   37d46:	4798      	blx	r3
   37d48:	3001      	adds	r0, #1
   37d4a:	d1bf      	bne.n	37ccc <ip_interface_recvfrom+0x128>
   37d4c:	e798      	b.n	37c80 <ip_interface_recvfrom+0xdc>
   37d4e:	4628      	mov	r0, r5
   37d50:	f001 f8ee 	bl	38f30 <interface_socket_from_handle_get>
   37d54:	b138      	cbz	r0, 37d66 <ip_interface_recvfrom+0x1c2>
   37d56:	f8d0 9004 	ldr.w	r9, [r0, #4]
   37d5a:	f1b9 0f00 	cmp.w	r9, #0
   37d5e:	d002      	beq.n	37d66 <ip_interface_recvfrom+0x1c2>
   37d60:	2300      	movs	r3, #0
   37d62:	6043      	str	r3, [r0, #4]
   37d64:	e7c7      	b.n	37cf6 <ip_interface_recvfrom+0x152>
   37d66:	f04f 0901 	mov.w	r9, #1
   37d6a:	e744      	b.n	37bf6 <ip_interface_recvfrom+0x52>
   37d6c:	b11e      	cbz	r6, 37d76 <ip_interface_recvfrom+0x1d2>
   37d6e:	6823      	ldr	r3, [r4, #0]
   37d70:	00db      	lsls	r3, r3, #3
   37d72:	d5b3      	bpl.n	37cdc <ip_interface_recvfrom+0x138>
   37d74:	e754      	b.n	37c20 <ip_interface_recvfrom+0x7c>
   37d76:	69e0      	ldr	r0, [r4, #28]
   37d78:	e754      	b.n	37c24 <ip_interface_recvfrom+0x80>
   37d7a:	6823      	ldr	r3, [r4, #0]
   37d7c:	b29b      	uxth	r3, r3
   37d7e:	2b0d      	cmp	r3, #13
   37d80:	d186      	bne.n	37c90 <ip_interface_recvfrom+0xec>
   37d82:	68a3      	ldr	r3, [r4, #8]
   37d84:	2b00      	cmp	r3, #0
   37d86:	d083      	beq.n	37c90 <ip_interface_recvfrom+0xec>
   37d88:	f8d4 9008 	ldr.w	r9, [r4, #8]
   37d8c:	e780      	b.n	37c90 <ip_interface_recvfrom+0xec>
   37d8e:	f04f 0909 	mov.w	r9, #9
   37d92:	e791      	b.n	37cb8 <ip_interface_recvfrom+0x114>
   37d94:	6803      	ldr	r3, [r0, #0]
   37d96:	68db      	ldr	r3, [r3, #12]
   37d98:	4798      	blx	r3
   37d9a:	3001      	adds	r0, #1
   37d9c:	d00b      	beq.n	37db6 <ip_interface_recvfrom+0x212>
   37d9e:	f04f 0923 	mov.w	r9, #35	; 0x23
   37da2:	6823      	ldr	r3, [r4, #0]
   37da4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   37da8:	6023      	str	r3, [r4, #0]
   37daa:	4648      	mov	r0, r9
   37dac:	f7f8 f9f2 	bl	30194 <bsd_os_errno_set>
   37db0:	f04f 3bff 	mov.w	fp, #4294967295
   37db4:	e770      	b.n	37c98 <ip_interface_recvfrom+0xf4>
   37db6:	6823      	ldr	r3, [r4, #0]
   37db8:	f04f 0b00 	mov.w	fp, #0
   37dbc:	0c1b      	lsrs	r3, r3, #16
   37dbe:	041b      	lsls	r3, r3, #16
   37dc0:	f043 030d 	orr.w	r3, r3, #13
   37dc4:	6023      	str	r3, [r4, #0]
   37dc6:	6823      	ldr	r3, [r4, #0]
   37dc8:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
   37dcc:	6023      	str	r3, [r4, #0]
   37dce:	e763      	b.n	37c98 <ip_interface_recvfrom+0xf4>
   37dd0:	2d00      	cmp	r5, #0
   37dd2:	f47f af4b 	bne.w	37c6c <ip_interface_recvfrom+0xc8>
   37dd6:	e753      	b.n	37c80 <ip_interface_recvfrom+0xdc>
   37dd8:	f04f 0923 	mov.w	r9, #35	; 0x23
   37ddc:	69e0      	ldr	r0, [r4, #28]
   37dde:	e7b0      	b.n	37d42 <ip_interface_recvfrom+0x19e>
   37de0:	f04f 092d 	mov.w	r9, #45	; 0x2d
   37de4:	e7e1      	b.n	37daa <ip_interface_recvfrom+0x206>
   37de6:	f04f 0916 	mov.w	r9, #22
   37dea:	e7de      	b.n	37daa <ip_interface_recvfrom+0x206>
   37dec:	f04f 0909 	mov.w	r9, #9
   37df0:	e7db      	b.n	37daa <ip_interface_recvfrom+0x206>
   37df2:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
   37df6:	6023      	str	r3, [r4, #0]
   37df8:	6823      	ldr	r3, [r4, #0]
   37dfa:	f04f 0969 	mov.w	r9, #105	; 0x69
   37dfe:	0c1b      	lsrs	r3, r3, #16
   37e00:	041b      	lsls	r3, r3, #16
   37e02:	f043 030d 	orr.w	r3, r3, #13
   37e06:	6023      	str	r3, [r4, #0]
   37e08:	e7cf      	b.n	37daa <ip_interface_recvfrom+0x206>
   37e0a:	bf00      	nop

00037e0c <ip_interface_connect>:
   37e0c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   37e10:	b083      	sub	sp, #12
   37e12:	2900      	cmp	r1, #0
   37e14:	d049      	beq.n	37eaa <ip_interface_connect+0x9e>
   37e16:	4616      	mov	r6, r2
   37e18:	2a00      	cmp	r2, #0
   37e1a:	d046      	beq.n	37eaa <ip_interface_connect+0x9e>
   37e1c:	4607      	mov	r7, r0
   37e1e:	4688      	mov	r8, r1
   37e20:	f001 f886 	bl	38f30 <interface_socket_from_handle_get>
   37e24:	4605      	mov	r5, r0
   37e26:	2800      	cmp	r0, #0
   37e28:	f000 80a8 	beq.w	37f7c <ip_interface_connect+0x170>
   37e2c:	6803      	ldr	r3, [r0, #0]
   37e2e:	b29b      	uxth	r3, r3
   37e30:	2b02      	cmp	r3, #2
   37e32:	d004      	beq.n	37e3e <ip_interface_connect+0x32>
   37e34:	6803      	ldr	r3, [r0, #0]
   37e36:	b29b      	uxth	r3, r3
   37e38:	2b04      	cmp	r3, #4
   37e3a:	f040 808b 	bne.w	37f54 <ip_interface_connect+0x148>
   37e3e:	6829      	ldr	r1, [r5, #0]
   37e40:	f011 5100 	ands.w	r1, r1, #536870912	; 0x20000000
   37e44:	f040 8082 	bne.w	37f4c <ip_interface_connect+0x140>
   37e48:	a802      	add	r0, sp, #8
   37e4a:	f840 1d04 	str.w	r1, [r0, #-4]!
   37e4e:	f8d5 9018 	ldr.w	r9, [r5, #24]
   37e52:	f7fb ff87 	bl	33d64 <rpc_ip_client_request_alloc>
   37e56:	bb90      	cbnz	r0, 37ebe <ip_interface_connect+0xb2>
   37e58:	2108      	movs	r1, #8
   37e5a:	043b      	lsls	r3, r7, #16
   37e5c:	9c01      	ldr	r4, [sp, #4]
   37e5e:	f443 42e0 	orr.w	r2, r3, #28672	; 0x7000
   37e62:	f042 0202 	orr.w	r2, r2, #2
   37e66:	60e2      	str	r2, [r4, #12]
   37e68:	f8c4 9010 	str.w	r9, [r4, #16]
   37e6c:	7260      	strb	r0, [r4, #9]
   37e6e:	72a0      	strb	r0, [r4, #10]
   37e70:	72e0      	strb	r0, [r4, #11]
   37e72:	7221      	strb	r1, [r4, #8]
   37e74:	f443 43e0 	orr.w	r3, r3, #28672	; 0x7000
   37e78:	f043 0302 	orr.w	r3, r3, #2
   37e7c:	60e3      	str	r3, [r4, #12]
   37e7e:	68a3      	ldr	r3, [r4, #8]
   37e80:	69aa      	ldr	r2, [r5, #24]
   37e82:	3304      	adds	r3, #4
   37e84:	6122      	str	r2, [r4, #16]
   37e86:	60a3      	str	r3, [r4, #8]
   37e88:	68eb      	ldr	r3, [r5, #12]
   37e8a:	f8d8 2004 	ldr.w	r2, [r8, #4]
   37e8e:	4293      	cmp	r3, r2
   37e90:	d11a      	bne.n	37ec8 <ip_interface_connect+0xbc>
   37e92:	f898 2000 	ldrb.w	r2, [r8]
   37e96:	4296      	cmp	r6, r2
   37e98:	d107      	bne.n	37eaa <ip_interface_connect+0x9e>
   37e9a:	2b02      	cmp	r3, #2
   37e9c:	f104 0018 	add.w	r0, r4, #24
   37ea0:	d014      	beq.n	37ecc <ip_interface_connect+0xc0>
   37ea2:	2b0a      	cmp	r3, #10
   37ea4:	d101      	bne.n	37eaa <ip_interface_connect+0x9e>
   37ea6:	2e24      	cmp	r6, #36	; 0x24
   37ea8:	d01c      	beq.n	37ee4 <ip_interface_connect+0xd8>
   37eaa:	2416      	movs	r4, #22
   37eac:	4620      	mov	r0, r4
   37eae:	f7f8 f971 	bl	30194 <bsd_os_errno_set>
   37eb2:	f04f 34ff 	mov.w	r4, #4294967295
   37eb6:	4620      	mov	r0, r4
   37eb8:	b003      	add	sp, #12
   37eba:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   37ebe:	9c01      	ldr	r4, [sp, #4]
   37ec0:	2c00      	cmp	r4, #0
   37ec2:	d059      	beq.n	37f78 <ip_interface_connect+0x16c>
   37ec4:	043b      	lsls	r3, r7, #16
   37ec6:	e7d5      	b.n	37e74 <ip_interface_connect+0x68>
   37ec8:	242f      	movs	r4, #47	; 0x2f
   37eca:	e7ef      	b.n	37eac <ip_interface_connect+0xa0>
   37ecc:	2e10      	cmp	r6, #16
   37ece:	d1ec      	bne.n	37eaa <ip_interface_connect+0x9e>
   37ed0:	2204      	movs	r2, #4
   37ed2:	f8b8 3008 	ldrh.w	r3, [r8, #8]
   37ed6:	f108 010c 	add.w	r1, r8, #12
   37eda:	82e2      	strh	r2, [r4, #22]
   37edc:	82a3      	strh	r3, [r4, #20]
   37ede:	f00c ffb7 	bl	44e50 <memcpy>
   37ee2:	e008      	b.n	37ef6 <ip_interface_connect+0xea>
   37ee4:	2210      	movs	r2, #16
   37ee6:	f8b8 3008 	ldrh.w	r3, [r8, #8]
   37eea:	eb08 0102 	add.w	r1, r8, r2
   37eee:	82e2      	strh	r2, [r4, #22]
   37ef0:	82a3      	strh	r3, [r4, #20]
   37ef2:	f00c ffad 	bl	44e50 <memcpy>
   37ef6:	68a3      	ldr	r3, [r4, #8]
   37ef8:	8ae2      	ldrh	r2, [r4, #22]
   37efa:	f247 0102 	movw	r1, #28674	; 0x7002
   37efe:	4413      	add	r3, r2
   37f00:	60a3      	str	r3, [r4, #8]
   37f02:	682e      	ldr	r6, [r5, #0]
   37f04:	682b      	ldr	r3, [r5, #0]
   37f06:	4620      	mov	r0, r4
   37f08:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
   37f0c:	602b      	str	r3, [r5, #0]
   37f0e:	f7fb ff3d 	bl	33d8c <rpc_ip_client_request_send>
   37f12:	b988      	cbnz	r0, 37f38 <ip_interface_connect+0x12c>
   37f14:	682b      	ldr	r3, [r5, #0]
   37f16:	f013 5880 	ands.w	r8, r3, #268435456	; 0x10000000
   37f1a:	d119      	bne.n	37f50 <ip_interface_connect+0x144>
   37f1c:	f04f 33ff 	mov.w	r3, #4294967295
   37f20:	f64f 72ff 	movw	r2, #65535	; 0xffff
   37f24:	2105      	movs	r1, #5
   37f26:	4638      	mov	r0, r7
   37f28:	f000 ff8e 	bl	38e48 <interface_socket_wait>
   37f2c:	4604      	mov	r4, r0
   37f2e:	b1c0      	cbz	r0, 37f62 <ip_interface_connect+0x156>
   37f30:	2c73      	cmp	r4, #115	; 0x73
   37f32:	d0bb      	beq.n	37eac <ip_interface_connect+0xa0>
   37f34:	602e      	str	r6, [r5, #0]
   37f36:	e7b9      	b.n	37eac <ip_interface_connect+0xa0>
   37f38:	6820      	ldr	r0, [r4, #0]
   37f3a:	b108      	cbz	r0, 37f40 <ip_interface_connect+0x134>
   37f3c:	f7fb ff44 	bl	33dc8 <rpc_ip_client_data_free>
   37f40:	4620      	mov	r0, r4
   37f42:	f7fb ff39 	bl	33db8 <rpc_ip_client_message_free>
   37f46:	2423      	movs	r4, #35	; 0x23
   37f48:	602e      	str	r6, [r5, #0]
   37f4a:	e7af      	b.n	37eac <ip_interface_connect+0xa0>
   37f4c:	2472      	movs	r4, #114	; 0x72
   37f4e:	e7ad      	b.n	37eac <ip_interface_connect+0xa0>
   37f50:	2473      	movs	r4, #115	; 0x73
   37f52:	e7ab      	b.n	37eac <ip_interface_connect+0xa0>
   37f54:	6803      	ldr	r3, [r0, #0]
   37f56:	b29b      	uxth	r3, r3
   37f58:	2b05      	cmp	r3, #5
   37f5a:	bf14      	ite	ne
   37f5c:	2409      	movne	r4, #9
   37f5e:	2438      	moveq	r4, #56	; 0x38
   37f60:	e7a4      	b.n	37eac <ip_interface_connect+0xa0>
   37f62:	4638      	mov	r0, r7
   37f64:	f000 ffe4 	bl	38f30 <interface_socket_from_handle_get>
   37f68:	2800      	cmp	r0, #0
   37f6a:	d0a4      	beq.n	37eb6 <ip_interface_connect+0xaa>
   37f6c:	6844      	ldr	r4, [r0, #4]
   37f6e:	2c00      	cmp	r4, #0
   37f70:	d0a1      	beq.n	37eb6 <ip_interface_connect+0xaa>
   37f72:	f8c0 8004 	str.w	r8, [r0, #4]
   37f76:	e7db      	b.n	37f30 <ip_interface_connect+0x124>
   37f78:	240c      	movs	r4, #12
   37f7a:	e797      	b.n	37eac <ip_interface_connect+0xa0>
   37f7c:	2409      	movs	r4, #9
   37f7e:	e795      	b.n	37eac <ip_interface_connect+0xa0>

00037f80 <ip_interface_bind>:
   37f80:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   37f84:	b083      	sub	sp, #12
   37f86:	b3b1      	cbz	r1, 37ff6 <ip_interface_bind+0x76>
   37f88:	4616      	mov	r6, r2
   37f8a:	b3a2      	cbz	r2, 37ff6 <ip_interface_bind+0x76>
   37f8c:	4607      	mov	r7, r0
   37f8e:	4688      	mov	r8, r1
   37f90:	f000 ffce 	bl	38f30 <interface_socket_from_handle_get>
   37f94:	4605      	mov	r5, r0
   37f96:	2800      	cmp	r0, #0
   37f98:	d04a      	beq.n	38030 <ip_interface_bind+0xb0>
   37f9a:	6803      	ldr	r3, [r0, #0]
   37f9c:	b29b      	uxth	r3, r3
   37f9e:	2b02      	cmp	r3, #2
   37fa0:	d146      	bne.n	38030 <ip_interface_bind+0xb0>
   37fa2:	2100      	movs	r1, #0
   37fa4:	a802      	add	r0, sp, #8
   37fa6:	f840 1d04 	str.w	r1, [r0, #-4]!
   37faa:	f8d5 9018 	ldr.w	r9, [r5, #24]
   37fae:	f7fb fed9 	bl	33d64 <rpc_ip_client_request_alloc>
   37fb2:	bb50      	cbnz	r0, 3800a <ip_interface_bind+0x8a>
   37fb4:	f247 0305 	movw	r3, #28677	; 0x7005
   37fb8:	2208      	movs	r2, #8
   37fba:	9c01      	ldr	r4, [sp, #4]
   37fbc:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
   37fc0:	60e3      	str	r3, [r4, #12]
   37fc2:	f8c4 9010 	str.w	r9, [r4, #16]
   37fc6:	7260      	strb	r0, [r4, #9]
   37fc8:	72a0      	strb	r0, [r4, #10]
   37fca:	72e0      	strb	r0, [r4, #11]
   37fcc:	7222      	strb	r2, [r4, #8]
   37fce:	68a3      	ldr	r3, [r4, #8]
   37fd0:	3304      	adds	r3, #4
   37fd2:	60a3      	str	r3, [r4, #8]
   37fd4:	68eb      	ldr	r3, [r5, #12]
   37fd6:	f8d8 2004 	ldr.w	r2, [r8, #4]
   37fda:	4293      	cmp	r3, r2
   37fdc:	d11a      	bne.n	38014 <ip_interface_bind+0x94>
   37fde:	f898 2000 	ldrb.w	r2, [r8]
   37fe2:	4296      	cmp	r6, r2
   37fe4:	d107      	bne.n	37ff6 <ip_interface_bind+0x76>
   37fe6:	2b02      	cmp	r3, #2
   37fe8:	f104 0018 	add.w	r0, r4, #24
   37fec:	d014      	beq.n	38018 <ip_interface_bind+0x98>
   37fee:	2b0a      	cmp	r3, #10
   37ff0:	d101      	bne.n	37ff6 <ip_interface_bind+0x76>
   37ff2:	2e24      	cmp	r6, #36	; 0x24
   37ff4:	d01e      	beq.n	38034 <ip_interface_bind+0xb4>
   37ff6:	2416      	movs	r4, #22
   37ff8:	4620      	mov	r0, r4
   37ffa:	f7f8 f8cb 	bl	30194 <bsd_os_errno_set>
   37ffe:	f04f 34ff 	mov.w	r4, #4294967295
   38002:	4620      	mov	r0, r4
   38004:	b003      	add	sp, #12
   38006:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   3800a:	9c01      	ldr	r4, [sp, #4]
   3800c:	2c00      	cmp	r4, #0
   3800e:	d1de      	bne.n	37fce <ip_interface_bind+0x4e>
   38010:	240c      	movs	r4, #12
   38012:	e7f1      	b.n	37ff8 <ip_interface_bind+0x78>
   38014:	242f      	movs	r4, #47	; 0x2f
   38016:	e7ef      	b.n	37ff8 <ip_interface_bind+0x78>
   38018:	2e10      	cmp	r6, #16
   3801a:	d1ec      	bne.n	37ff6 <ip_interface_bind+0x76>
   3801c:	2204      	movs	r2, #4
   3801e:	f8b8 3008 	ldrh.w	r3, [r8, #8]
   38022:	f108 010c 	add.w	r1, r8, #12
   38026:	82e2      	strh	r2, [r4, #22]
   38028:	82a3      	strh	r3, [r4, #20]
   3802a:	f00c ff11 	bl	44e50 <memcpy>
   3802e:	e00a      	b.n	38046 <ip_interface_bind+0xc6>
   38030:	2409      	movs	r4, #9
   38032:	e7e1      	b.n	37ff8 <ip_interface_bind+0x78>
   38034:	2210      	movs	r2, #16
   38036:	f8b8 3008 	ldrh.w	r3, [r8, #8]
   3803a:	eb08 0102 	add.w	r1, r8, r2
   3803e:	82e2      	strh	r2, [r4, #22]
   38040:	82a3      	strh	r3, [r4, #20]
   38042:	f00c ff05 	bl	44e50 <memcpy>
   38046:	68a3      	ldr	r3, [r4, #8]
   38048:	8ae2      	ldrh	r2, [r4, #22]
   3804a:	f247 0105 	movw	r1, #28677	; 0x7005
   3804e:	4413      	add	r3, r2
   38050:	60a3      	str	r3, [r4, #8]
   38052:	682b      	ldr	r3, [r5, #0]
   38054:	4620      	mov	r0, r4
   38056:	0c1b      	lsrs	r3, r3, #16
   38058:	041b      	lsls	r3, r3, #16
   3805a:	f043 0303 	orr.w	r3, r3, #3
   3805e:	602b      	str	r3, [r5, #0]
   38060:	682e      	ldr	r6, [r5, #0]
   38062:	f7fb fe93 	bl	33d8c <rpc_ip_client_request_send>
   38066:	4680      	mov	r8, r0
   38068:	b980      	cbnz	r0, 3808c <ip_interface_bind+0x10c>
   3806a:	f04f 33ff 	mov.w	r3, #4294967295
   3806e:	f64f 72ff 	movw	r2, #65535	; 0xffff
   38072:	2104      	movs	r1, #4
   38074:	4638      	mov	r0, r7
   38076:	f000 fee7 	bl	38e48 <interface_socket_wait>
   3807a:	4604      	mov	r4, r0
   3807c:	b1a0      	cbz	r0, 380a8 <ip_interface_bind+0x128>
   3807e:	682b      	ldr	r3, [r5, #0]
   38080:	0c1b      	lsrs	r3, r3, #16
   38082:	041b      	lsls	r3, r3, #16
   38084:	f043 0302 	orr.w	r3, r3, #2
   38088:	602b      	str	r3, [r5, #0]
   3808a:	e7b5      	b.n	37ff8 <ip_interface_bind+0x78>
   3808c:	6820      	ldr	r0, [r4, #0]
   3808e:	b108      	cbz	r0, 38094 <ip_interface_bind+0x114>
   38090:	f7fb fe9a 	bl	33dc8 <rpc_ip_client_data_free>
   38094:	0c36      	lsrs	r6, r6, #16
   38096:	0436      	lsls	r6, r6, #16
   38098:	4620      	mov	r0, r4
   3809a:	f046 0602 	orr.w	r6, r6, #2
   3809e:	f7fb fe8b 	bl	33db8 <rpc_ip_client_message_free>
   380a2:	2423      	movs	r4, #35	; 0x23
   380a4:	602e      	str	r6, [r5, #0]
   380a6:	e7a7      	b.n	37ff8 <ip_interface_bind+0x78>
   380a8:	4638      	mov	r0, r7
   380aa:	f000 ff41 	bl	38f30 <interface_socket_from_handle_get>
   380ae:	2800      	cmp	r0, #0
   380b0:	d0a7      	beq.n	38002 <ip_interface_bind+0x82>
   380b2:	6844      	ldr	r4, [r0, #4]
   380b4:	2c00      	cmp	r4, #0
   380b6:	d0a4      	beq.n	38002 <ip_interface_bind+0x82>
   380b8:	f8c0 8004 	str.w	r8, [r0, #4]
   380bc:	e7df      	b.n	3807e <ip_interface_bind+0xfe>
   380be:	bf00      	nop

000380c0 <ip_interface_listen>:
   380c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   380c4:	b082      	sub	sp, #8
   380c6:	4606      	mov	r6, r0
   380c8:	f000 ff32 	bl	38f30 <interface_socket_from_handle_get>
   380cc:	2800      	cmp	r0, #0
   380ce:	d067      	beq.n	381a0 <ip_interface_listen+0xe0>
   380d0:	6803      	ldr	r3, [r0, #0]
   380d2:	4605      	mov	r5, r0
   380d4:	b29b      	uxth	r3, r3
   380d6:	2b04      	cmp	r3, #4
   380d8:	d162      	bne.n	381a0 <ip_interface_listen+0xe0>
   380da:	2100      	movs	r1, #0
   380dc:	4a32      	ldr	r2, [pc, #200]	; (381a8 <ip_interface_listen+0xe8>)
   380de:	4630      	mov	r0, r6
   380e0:	f000 fe7a 	bl	38dd8 <interface_socket_packet_handler_update>
   380e4:	4601      	mov	r1, r0
   380e6:	2800      	cmp	r0, #0
   380e8:	d15c      	bne.n	381a4 <ip_interface_listen+0xe4>
   380ea:	a802      	add	r0, sp, #8
   380ec:	f840 1d04 	str.w	r1, [r0, #-4]!
   380f0:	69af      	ldr	r7, [r5, #24]
   380f2:	f7fb fe37 	bl	33d64 <rpc_ip_client_request_alloc>
   380f6:	bba8      	cbnz	r0, 38164 <ip_interface_listen+0xa4>
   380f8:	f247 0308 	movw	r3, #28680	; 0x7008
   380fc:	2208      	movs	r2, #8
   380fe:	9c01      	ldr	r4, [sp, #4]
   38100:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
   38104:	60e3      	str	r3, [r4, #12]
   38106:	6127      	str	r7, [r4, #16]
   38108:	7260      	strb	r0, [r4, #9]
   3810a:	72a0      	strb	r0, [r4, #10]
   3810c:	72e0      	strb	r0, [r4, #11]
   3810e:	7222      	strb	r2, [r4, #8]
   38110:	68a3      	ldr	r3, [r4, #8]
   38112:	f247 0108 	movw	r1, #28680	; 0x7008
   38116:	3304      	adds	r3, #4
   38118:	60a3      	str	r3, [r4, #8]
   3811a:	682b      	ldr	r3, [r5, #0]
   3811c:	4620      	mov	r0, r4
   3811e:	0c1b      	lsrs	r3, r3, #16
   38120:	041b      	lsls	r3, r3, #16
   38122:	f043 0306 	orr.w	r3, r3, #6
   38126:	602b      	str	r3, [r5, #0]
   38128:	682f      	ldr	r7, [r5, #0]
   3812a:	f7fb fe2f 	bl	33d8c <rpc_ip_client_request_send>
   3812e:	4680      	mov	r8, r0
   38130:	b9e8      	cbnz	r0, 3816e <ip_interface_listen+0xae>
   38132:	f04f 33ff 	mov.w	r3, #4294967295
   38136:	f64f 72ff 	movw	r2, #65535	; 0xffff
   3813a:	2107      	movs	r1, #7
   3813c:	4630      	mov	r0, r6
   3813e:	f000 fe83 	bl	38e48 <interface_socket_wait>
   38142:	4604      	mov	r4, r0
   38144:	b308      	cbz	r0, 3818a <ip_interface_listen+0xca>
   38146:	682b      	ldr	r3, [r5, #0]
   38148:	0c1b      	lsrs	r3, r3, #16
   3814a:	041b      	lsls	r3, r3, #16
   3814c:	f043 0304 	orr.w	r3, r3, #4
   38150:	602b      	str	r3, [r5, #0]
   38152:	4620      	mov	r0, r4
   38154:	f7f8 f81e 	bl	30194 <bsd_os_errno_set>
   38158:	f04f 34ff 	mov.w	r4, #4294967295
   3815c:	4620      	mov	r0, r4
   3815e:	b002      	add	sp, #8
   38160:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   38164:	9c01      	ldr	r4, [sp, #4]
   38166:	2c00      	cmp	r4, #0
   38168:	d1d2      	bne.n	38110 <ip_interface_listen+0x50>
   3816a:	240c      	movs	r4, #12
   3816c:	e7f1      	b.n	38152 <ip_interface_listen+0x92>
   3816e:	6820      	ldr	r0, [r4, #0]
   38170:	b108      	cbz	r0, 38176 <ip_interface_listen+0xb6>
   38172:	f7fb fe29 	bl	33dc8 <rpc_ip_client_data_free>
   38176:	0c3f      	lsrs	r7, r7, #16
   38178:	043f      	lsls	r7, r7, #16
   3817a:	4620      	mov	r0, r4
   3817c:	f047 0704 	orr.w	r7, r7, #4
   38180:	f7fb fe1a 	bl	33db8 <rpc_ip_client_message_free>
   38184:	2423      	movs	r4, #35	; 0x23
   38186:	602f      	str	r7, [r5, #0]
   38188:	e7e3      	b.n	38152 <ip_interface_listen+0x92>
   3818a:	4630      	mov	r0, r6
   3818c:	f000 fed0 	bl	38f30 <interface_socket_from_handle_get>
   38190:	2800      	cmp	r0, #0
   38192:	d0e3      	beq.n	3815c <ip_interface_listen+0x9c>
   38194:	6844      	ldr	r4, [r0, #4]
   38196:	2c00      	cmp	r4, #0
   38198:	d0e0      	beq.n	3815c <ip_interface_listen+0x9c>
   3819a:	f8c0 8004 	str.w	r8, [r0, #4]
   3819e:	e7d2      	b.n	38146 <ip_interface_listen+0x86>
   381a0:	2409      	movs	r4, #9
   381a2:	e7d6      	b.n	38152 <ip_interface_listen+0x92>
   381a4:	2423      	movs	r4, #35	; 0x23
   381a6:	e7d4      	b.n	38152 <ip_interface_listen+0x92>
   381a8:	00037585 	.word	0x00037585

000381ac <ip_interface_accept>:
   381ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   381b0:	2500      	movs	r5, #0
   381b2:	b085      	sub	sp, #20
   381b4:	460f      	mov	r7, r1
   381b6:	4690      	mov	r8, r2
   381b8:	9502      	str	r5, [sp, #8]
   381ba:	4606      	mov	r6, r0
   381bc:	f000 feb8 	bl	38f30 <interface_socket_from_handle_get>
   381c0:	4604      	mov	r4, r0
   381c2:	2800      	cmp	r0, #0
   381c4:	f000 811c 	beq.w	38400 <ip_interface_accept+0x254>
   381c8:	6803      	ldr	r3, [r0, #0]
   381ca:	b29b      	uxth	r3, r3
   381cc:	2b07      	cmp	r3, #7
   381ce:	d10a      	bne.n	381e6 <ip_interface_accept+0x3a>
   381d0:	6803      	ldr	r3, [r0, #0]
   381d2:	6805      	ldr	r5, [r0, #0]
   381d4:	00db      	lsls	r3, r3, #3
   381d6:	d416      	bmi.n	38206 <ip_interface_accept+0x5a>
   381d8:	f415 3580 	ands.w	r5, r5, #65536	; 0x10000
   381dc:	d019      	beq.n	38212 <ip_interface_accept+0x66>
   381de:	6805      	ldr	r5, [r0, #0]
   381e0:	f415 3580 	ands.w	r5, r5, #65536	; 0x10000
   381e4:	d124      	bne.n	38230 <ip_interface_accept+0x84>
   381e6:	f04f 0909 	mov.w	r9, #9
   381ea:	9b02      	ldr	r3, [sp, #8]
   381ec:	b113      	cbz	r3, 381f4 <ip_interface_accept+0x48>
   381ee:	4628      	mov	r0, r5
   381f0:	f000 fddc 	bl	38dac <interface_socket_free>
   381f4:	4648      	mov	r0, r9
   381f6:	f04f 39ff 	mov.w	r9, #4294967295
   381fa:	f7f7 ffcb 	bl	30194 <bsd_os_errno_set>
   381fe:	4648      	mov	r0, r9
   38200:	b005      	add	sp, #20
   38202:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   38206:	f415 3580 	ands.w	r5, r5, #65536	; 0x10000
   3820a:	d16d      	bne.n	382e8 <ip_interface_accept+0x13c>
   3820c:	f04f 0923 	mov.w	r9, #35	; 0x23
   38210:	e7eb      	b.n	381ea <ip_interface_accept+0x3e>
   38212:	f44f 3280 	mov.w	r2, #65536	; 0x10000
   38216:	f04f 33ff 	mov.w	r3, #4294967295
   3821a:	4611      	mov	r1, r2
   3821c:	4630      	mov	r0, r6
   3821e:	f000 fe13 	bl	38e48 <interface_socket_wait>
   38222:	4681      	mov	r9, r0
   38224:	2800      	cmp	r0, #0
   38226:	d07e      	beq.n	38326 <ip_interface_accept+0x17a>
   38228:	6825      	ldr	r5, [r4, #0]
   3822a:	f415 3580 	ands.w	r5, r5, #65536	; 0x10000
   3822e:	d0dc      	beq.n	381ea <ip_interface_accept+0x3e>
   38230:	f04f 30ff 	mov.w	r0, #4294967295
   38234:	2300      	movs	r3, #0
   38236:	e9cd 0300 	strd	r0, r3, [sp]
   3823a:	4a75      	ldr	r2, [pc, #468]	; (38410 <ip_interface_accept+0x264>)
   3823c:	6921      	ldr	r1, [r4, #16]
   3823e:	a802      	add	r0, sp, #8
   38240:	f000 fd50 	bl	38ce4 <interface_socket_allocate>
   38244:	9b02      	ldr	r3, [sp, #8]
   38246:	4605      	mov	r5, r0
   38248:	2b00      	cmp	r3, #0
   3824a:	f000 80dd 	beq.w	38408 <ip_interface_accept+0x25c>
   3824e:	2100      	movs	r1, #0
   38250:	6962      	ldr	r2, [r4, #20]
   38252:	a804      	add	r0, sp, #16
   38254:	615a      	str	r2, [r3, #20]
   38256:	68e2      	ldr	r2, [r4, #12]
   38258:	f840 1d04 	str.w	r1, [r0, #-4]!
   3825c:	60da      	str	r2, [r3, #12]
   3825e:	6922      	ldr	r2, [r4, #16]
   38260:	611a      	str	r2, [r3, #16]
   38262:	f8d4 9018 	ldr.w	r9, [r4, #24]
   38266:	f7fb fd7d 	bl	33d64 <rpc_ip_client_request_alloc>
   3826a:	2800      	cmp	r0, #0
   3826c:	d143      	bne.n	382f6 <ip_interface_accept+0x14a>
   3826e:	f247 030c 	movw	r3, #28684	; 0x700c
   38272:	2108      	movs	r1, #8
   38274:	f8dd b00c 	ldr.w	fp, [sp, #12]
   38278:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
   3827c:	f8cb 300c 	str.w	r3, [fp, #12]
   38280:	f8cb 9010 	str.w	r9, [fp, #16]
   38284:	f88b 0009 	strb.w	r0, [fp, #9]
   38288:	f88b 000a 	strb.w	r0, [fp, #10]
   3828c:	f88b 000b 	strb.w	r0, [fp, #11]
   38290:	f88b 1008 	strb.w	r1, [fp, #8]
   38294:	6823      	ldr	r3, [r4, #0]
   38296:	f247 010c 	movw	r1, #28684	; 0x700c
   3829a:	0c1b      	lsrs	r3, r3, #16
   3829c:	041b      	lsls	r3, r3, #16
   3829e:	f043 0308 	orr.w	r3, r3, #8
   382a2:	6023      	str	r3, [r4, #0]
   382a4:	4658      	mov	r0, fp
   382a6:	f8d4 9000 	ldr.w	r9, [r4]
   382aa:	f7fb fd6f 	bl	33d8c <rpc_ip_client_request_send>
   382ae:	4682      	mov	sl, r0
   382b0:	bb48      	cbnz	r0, 38306 <ip_interface_accept+0x15a>
   382b2:	6822      	ldr	r2, [r4, #0]
   382b4:	9900      	ldr	r1, [sp, #0]
   382b6:	f04f 33ff 	mov.w	r3, #4294967295
   382ba:	400a      	ands	r2, r1
   382bc:	6022      	str	r2, [r4, #0]
   382be:	2109      	movs	r1, #9
   382c0:	f64f 72ff 	movw	r2, #65535	; 0xffff
   382c4:	4630      	mov	r0, r6
   382c6:	f000 fdbf 	bl	38e48 <interface_socket_wait>
   382ca:	4681      	mov	r9, r0
   382cc:	2800      	cmp	r0, #0
   382ce:	f000 8085 	beq.w	383dc <ip_interface_accept+0x230>
   382d2:	6823      	ldr	r3, [r4, #0]
   382d4:	9a01      	ldr	r2, [sp, #4]
   382d6:	431a      	orrs	r2, r3
   382d8:	6022      	str	r2, [r4, #0]
   382da:	6823      	ldr	r3, [r4, #0]
   382dc:	0c1b      	lsrs	r3, r3, #16
   382de:	041b      	lsls	r3, r3, #16
   382e0:	f043 0307 	orr.w	r3, r3, #7
   382e4:	6023      	str	r3, [r4, #0]
   382e6:	e780      	b.n	381ea <ip_interface_accept+0x3e>
   382e8:	f06f 5280 	mvn.w	r2, #268435456	; 0x10000000
   382ec:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   382f0:	e9cd 2300 	strd	r2, r3, [sp]
   382f4:	e7a1      	b.n	3823a <ip_interface_accept+0x8e>
   382f6:	f8dd b00c 	ldr.w	fp, [sp, #12]
   382fa:	f04f 090c 	mov.w	r9, #12
   382fe:	f1bb 0f00 	cmp.w	fp, #0
   38302:	d1c7      	bne.n	38294 <ip_interface_accept+0xe8>
   38304:	e771      	b.n	381ea <ip_interface_accept+0x3e>
   38306:	f8db 0000 	ldr.w	r0, [fp]
   3830a:	b108      	cbz	r0, 38310 <ip_interface_accept+0x164>
   3830c:	f7fb fd5c 	bl	33dc8 <rpc_ip_client_data_free>
   38310:	ea4f 4919 	mov.w	r9, r9, lsr #16
   38314:	4658      	mov	r0, fp
   38316:	ea4f 4909 	mov.w	r9, r9, lsl #16
   3831a:	f7fb fd4d 	bl	33db8 <rpc_ip_client_message_free>
   3831e:	f049 0307 	orr.w	r3, r9, #7
   38322:	6023      	str	r3, [r4, #0]
   38324:	e772      	b.n	3820c <ip_interface_accept+0x60>
   38326:	4630      	mov	r0, r6
   38328:	f000 fe02 	bl	38f30 <interface_socket_from_handle_get>
   3832c:	b130      	cbz	r0, 3833c <ip_interface_accept+0x190>
   3832e:	f8d0 9004 	ldr.w	r9, [r0, #4]
   38332:	f1b9 0f00 	cmp.w	r9, #0
   38336:	d001      	beq.n	3833c <ip_interface_accept+0x190>
   38338:	6045      	str	r5, [r0, #4]
   3833a:	e775      	b.n	38228 <ip_interface_accept+0x7c>
   3833c:	6823      	ldr	r3, [r4, #0]
   3833e:	03d9      	lsls	r1, r3, #15
   38340:	f53f af76 	bmi.w	38230 <ip_interface_accept+0x84>
   38344:	4d33      	ldr	r5, [pc, #204]	; (38414 <ip_interface_accept+0x268>)
   38346:	9902      	ldr	r1, [sp, #8]
   38348:	f855 3026 	ldr.w	r3, [r5, r6, lsl #2]
   3834c:	699b      	ldr	r3, [r3, #24]
   3834e:	618b      	str	r3, [r1, #24]
   38350:	b147      	cbz	r7, 38364 <ip_interface_accept+0x1b8>
   38352:	68cb      	ldr	r3, [r1, #12]
   38354:	2b0a      	cmp	r3, #10
   38356:	d024      	beq.n	383a2 <ip_interface_accept+0x1f6>
   38358:	2b02      	cmp	r3, #2
   3835a:	d103      	bne.n	38364 <ip_interface_accept+0x1b8>
   3835c:	f8d8 2000 	ldr.w	r2, [r8]
   38360:	2a10      	cmp	r2, #16
   38362:	d032      	beq.n	383ca <ip_interface_accept+0x21e>
   38364:	680a      	ldr	r2, [r1, #0]
   38366:	482c      	ldr	r0, [pc, #176]	; (38418 <ip_interface_accept+0x26c>)
   38368:	4002      	ands	r2, r0
   3836a:	f042 0205 	orr.w	r2, r2, #5
   3836e:	600a      	str	r2, [r1, #0]
   38370:	9a02      	ldr	r2, [sp, #8]
   38372:	6811      	ldr	r1, [r2, #0]
   38374:	f441 3100 	orr.w	r1, r1, #131072	; 0x20000
   38378:	6011      	str	r1, [r2, #0]
   3837a:	6811      	ldr	r1, [r2, #0]
   3837c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   38380:	6011      	str	r1, [r2, #0]
   38382:	6823      	ldr	r3, [r4, #0]
   38384:	4003      	ands	r3, r0
   38386:	f043 0307 	orr.w	r3, r3, #7
   3838a:	6023      	str	r3, [r4, #0]
   3838c:	f855 0026 	ldr.w	r0, [r5, r6, lsl #2]
   38390:	f7fb fd12 	bl	33db8 <rpc_ip_client_message_free>
   38394:	2300      	movs	r3, #0
   38396:	4648      	mov	r0, r9
   38398:	f845 3026 	str.w	r3, [r5, r6, lsl #2]
   3839c:	b005      	add	sp, #20
   3839e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   383a2:	f8d8 2000 	ldr.w	r2, [r8]
   383a6:	2a24      	cmp	r2, #36	; 0x24
   383a8:	d1dc      	bne.n	38364 <ip_interface_accept+0x1b8>
   383aa:	703a      	strb	r2, [r7, #0]
   383ac:	2210      	movs	r2, #16
   383ae:	607b      	str	r3, [r7, #4]
   383b0:	f855 3026 	ldr.w	r3, [r5, r6, lsl #2]
   383b4:	f107 0010 	add.w	r0, r7, #16
   383b8:	8b9b      	ldrh	r3, [r3, #28]
   383ba:	813b      	strh	r3, [r7, #8]
   383bc:	f855 1026 	ldr.w	r1, [r5, r6, lsl #2]
   383c0:	3120      	adds	r1, #32
   383c2:	f00c fd45 	bl	44e50 <memcpy>
   383c6:	9902      	ldr	r1, [sp, #8]
   383c8:	e7cc      	b.n	38364 <ip_interface_accept+0x1b8>
   383ca:	703a      	strb	r2, [r7, #0]
   383cc:	607b      	str	r3, [r7, #4]
   383ce:	f855 3026 	ldr.w	r3, [r5, r6, lsl #2]
   383d2:	f107 000c 	add.w	r0, r7, #12
   383d6:	8b9b      	ldrh	r3, [r3, #28]
   383d8:	2204      	movs	r2, #4
   383da:	e7ee      	b.n	383ba <ip_interface_accept+0x20e>
   383dc:	4630      	mov	r0, r6
   383de:	f000 fda7 	bl	38f30 <interface_socket_from_handle_get>
   383e2:	b138      	cbz	r0, 383f4 <ip_interface_accept+0x248>
   383e4:	f8d0 9004 	ldr.w	r9, [r0, #4]
   383e8:	f1b9 0f00 	cmp.w	r9, #0
   383ec:	d002      	beq.n	383f4 <ip_interface_accept+0x248>
   383ee:	f8c0 a004 	str.w	sl, [r0, #4]
   383f2:	e76e      	b.n	382d2 <ip_interface_accept+0x126>
   383f4:	6823      	ldr	r3, [r4, #0]
   383f6:	9a01      	ldr	r2, [sp, #4]
   383f8:	46a9      	mov	r9, r5
   383fa:	4313      	orrs	r3, r2
   383fc:	6023      	str	r3, [r4, #0]
   383fe:	e7a1      	b.n	38344 <ip_interface_accept+0x198>
   38400:	4605      	mov	r5, r0
   38402:	f04f 0909 	mov.w	r9, #9
   38406:	e6f0      	b.n	381ea <ip_interface_accept+0x3e>
   38408:	f04f 090c 	mov.w	r9, #12
   3840c:	e6f2      	b.n	381f4 <ip_interface_accept+0x48>
   3840e:	bf00      	nop
   38410:	00037585 	.word	0x00037585
   38414:	20025350 	.word	0x20025350
   38418:	ffff0000 	.word	0xffff0000

0003841c <ip_interface_setopt>:
   3841c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   38420:	2901      	cmp	r1, #1
   38422:	b084      	sub	sp, #16
   38424:	f040 809c 	bne.w	38560 <ip_interface_setopt+0x144>
   38428:	460e      	mov	r6, r1
   3842a:	4690      	mov	r8, r2
   3842c:	461d      	mov	r5, r3
   3842e:	4607      	mov	r7, r0
   38430:	f000 fd7e 	bl	38f30 <interface_socket_from_handle_get>
   38434:	4604      	mov	r4, r0
   38436:	2800      	cmp	r0, #0
   38438:	f000 80a5 	beq.w	38586 <ip_interface_setopt+0x16a>
   3843c:	f1b8 0f19 	cmp.w	r8, #25
   38440:	d16e      	bne.n	38520 <ip_interface_setopt+0x104>
   38442:	2d00      	cmp	r5, #0
   38444:	f000 8092 	beq.w	3856c <ip_interface_setopt+0x150>
   38448:	4628      	mov	r0, r5
   3844a:	f7e4 fe65 	bl	1d118 <strlen>
   3844e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   38450:	4298      	cmp	r0, r3
   38452:	f040 808b 	bne.w	3856c <ip_interface_setopt+0x150>
   38456:	6823      	ldr	r3, [r4, #0]
   38458:	b29b      	uxth	r3, r3
   3845a:	2b02      	cmp	r3, #2
   3845c:	d173      	bne.n	38546 <ip_interface_setopt+0x12a>
   3845e:	4629      	mov	r1, r5
   38460:	68e0      	ldr	r0, [r4, #12]
   38462:	f7fe fb2b 	bl	36abc <pdn_interface_pdn_id_get>
   38466:	9002      	str	r0, [sp, #8]
   38468:	3001      	adds	r0, #1
   3846a:	bf08      	it	eq
   3846c:	2516      	moveq	r5, #22
   3846e:	d04e      	beq.n	3850e <ip_interface_setopt+0xf2>
   38470:	6823      	ldr	r3, [r4, #0]
   38472:	025b      	lsls	r3, r3, #9
   38474:	d44a      	bmi.n	3850c <ip_interface_setopt+0xf0>
   38476:	6823      	ldr	r3, [r4, #0]
   38478:	f413 0300 	ands.w	r3, r3, #8388608	; 0x800000
   3847c:	d146      	bne.n	3850c <ip_interface_setopt+0xf0>
   3847e:	6826      	ldr	r6, [r4, #0]
   38480:	6822      	ldr	r2, [r4, #0]
   38482:	a804      	add	r0, sp, #16
   38484:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
   38488:	6022      	str	r2, [r4, #0]
   3848a:	2104      	movs	r1, #4
   3848c:	f840 3d04 	str.w	r3, [r0, #-4]!
   38490:	f8d4 8018 	ldr.w	r8, [r4, #24]
   38494:	f7fb fc66 	bl	33d64 <rpc_ip_client_request_alloc>
   38498:	2800      	cmp	r0, #0
   3849a:	d14e      	bne.n	3853a <ip_interface_setopt+0x11e>
   3849c:	f247 0203 	movw	r2, #28675	; 0x7003
   384a0:	2300      	movs	r3, #0
   384a2:	2108      	movs	r1, #8
   384a4:	9d03      	ldr	r5, [sp, #12]
   384a6:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
   384aa:	60ea      	str	r2, [r5, #12]
   384ac:	f8c5 8010 	str.w	r8, [r5, #16]
   384b0:	7229      	strb	r1, [r5, #8]
   384b2:	726b      	strb	r3, [r5, #9]
   384b4:	72ab      	strb	r3, [r5, #10]
   384b6:	72eb      	strb	r3, [r5, #11]
   384b8:	f04f 0c08 	mov.w	ip, #8
   384bc:	2300      	movs	r3, #0
   384be:	2010      	movs	r0, #16
   384c0:	2130      	movs	r1, #48	; 0x30
   384c2:	68aa      	ldr	r2, [r5, #8]
   384c4:	756b      	strb	r3, [r5, #21]
   384c6:	4462      	add	r2, ip
   384c8:	60aa      	str	r2, [r5, #8]
   384ca:	75ab      	strb	r3, [r5, #22]
   384cc:	75eb      	strb	r3, [r5, #23]
   384ce:	76ab      	strb	r3, [r5, #26]
   384d0:	76eb      	strb	r3, [r5, #27]
   384d2:	f885 c014 	strb.w	ip, [r5, #20]
   384d6:	7628      	strb	r0, [r5, #24]
   384d8:	7669      	strb	r1, [r5, #25]
   384da:	2204      	movs	r2, #4
   384dc:	eb0d 010c 	add.w	r1, sp, ip
   384e0:	6828      	ldr	r0, [r5, #0]
   384e2:	f00c fcb5 	bl	44e50 <memcpy>
   384e6:	f247 0103 	movw	r1, #28675	; 0x7003
   384ea:	4628      	mov	r0, r5
   384ec:	f7fb fc4e 	bl	33d8c <rpc_ip_client_request_send>
   384f0:	4680      	mov	r8, r0
   384f2:	bb50      	cbnz	r0, 3854a <ip_interface_setopt+0x12e>
   384f4:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
   384f8:	f04f 33ff 	mov.w	r3, #4294967295
   384fc:	4611      	mov	r1, r2
   384fe:	4638      	mov	r0, r7
   38500:	f000 fca2 	bl	38e48 <interface_socket_wait>
   38504:	4605      	mov	r5, r0
   38506:	b398      	cbz	r0, 38570 <ip_interface_setopt+0x154>
   38508:	6026      	str	r6, [r4, #0]
   3850a:	e000      	b.n	3850e <ip_interface_setopt+0xf2>
   3850c:	2523      	movs	r5, #35	; 0x23
   3850e:	4628      	mov	r0, r5
   38510:	f7f7 fe40 	bl	30194 <bsd_os_errno_set>
   38514:	f04f 35ff 	mov.w	r5, #4294967295
   38518:	4628      	mov	r0, r5
   3851a:	b004      	add	sp, #16
   3851c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   38520:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   38522:	4642      	mov	r2, r8
   38524:	9300      	str	r3, [sp, #0]
   38526:	4631      	mov	r1, r6
   38528:	462b      	mov	r3, r5
   3852a:	4638      	mov	r0, r7
   3852c:	f000 fd28 	bl	38f80 <interface_socket_setopt>
   38530:	4605      	mov	r5, r0
   38532:	4628      	mov	r0, r5
   38534:	b004      	add	sp, #16
   38536:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   3853a:	9d03      	ldr	r5, [sp, #12]
   3853c:	2d00      	cmp	r5, #0
   3853e:	d1bb      	bne.n	384b8 <ip_interface_setopt+0x9c>
   38540:	6026      	str	r6, [r4, #0]
   38542:	250c      	movs	r5, #12
   38544:	e7e3      	b.n	3850e <ip_interface_setopt+0xf2>
   38546:	2509      	movs	r5, #9
   38548:	e7e1      	b.n	3850e <ip_interface_setopt+0xf2>
   3854a:	6828      	ldr	r0, [r5, #0]
   3854c:	b108      	cbz	r0, 38552 <ip_interface_setopt+0x136>
   3854e:	f7fb fc3b 	bl	33dc8 <rpc_ip_client_data_free>
   38552:	4628      	mov	r0, r5
   38554:	f7fb fc30 	bl	33db8 <rpc_ip_client_message_free>
   38558:	2523      	movs	r5, #35	; 0x23
   3855a:	6026      	str	r6, [r4, #0]
   3855c:	6026      	str	r6, [r4, #0]
   3855e:	e7d6      	b.n	3850e <ip_interface_setopt+0xf2>
   38560:	202a      	movs	r0, #42	; 0x2a
   38562:	f7f7 fe17 	bl	30194 <bsd_os_errno_set>
   38566:	f04f 35ff 	mov.w	r5, #4294967295
   3856a:	e7d5      	b.n	38518 <ip_interface_setopt+0xfc>
   3856c:	250e      	movs	r5, #14
   3856e:	e7ce      	b.n	3850e <ip_interface_setopt+0xf2>
   38570:	4638      	mov	r0, r7
   38572:	f000 fcdd 	bl	38f30 <interface_socket_from_handle_get>
   38576:	b120      	cbz	r0, 38582 <ip_interface_setopt+0x166>
   38578:	6845      	ldr	r5, [r0, #4]
   3857a:	b115      	cbz	r5, 38582 <ip_interface_setopt+0x166>
   3857c:	f8c0 8004 	str.w	r8, [r0, #4]
   38580:	e7c2      	b.n	38508 <ip_interface_setopt+0xec>
   38582:	6026      	str	r6, [r4, #0]
   38584:	e7c8      	b.n	38518 <ip_interface_setopt+0xfc>
   38586:	2009      	movs	r0, #9
   38588:	f7f7 fe04 	bl	30194 <bsd_os_errno_set>
   3858c:	f04f 35ff 	mov.w	r5, #4294967295
   38590:	e7c2      	b.n	38518 <ip_interface_setopt+0xfc>
   38592:	bf00      	nop

00038594 <ip_interface_getopt>:
   38594:	f000 bd36 	b.w	39004 <interface_socket_getopt>

00038598 <ip_interface_getaddrinfo>:
   38598:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   3859c:	f04f 0c00 	mov.w	ip, #0
   385a0:	2401      	movs	r4, #1
   385a2:	4e72      	ldr	r6, [pc, #456]	; (3876c <ip_interface_getaddrinfo+0x1d4>)
   385a4:	f8df a1d0 	ldr.w	sl, [pc, #464]	; 38778 <ip_interface_getaddrinfo+0x1e0>
   385a8:	f8df 91d0 	ldr.w	r9, [pc, #464]	; 3877c <ip_interface_getaddrinfo+0x1e4>
   385ac:	b085      	sub	sp, #20
   385ae:	4607      	mov	r7, r0
   385b0:	4615      	mov	r5, r2
   385b2:	9301      	str	r3, [sp, #4]
   385b4:	f8a6 c000 	strh.w	ip, [r6]
   385b8:	f8ca 4000 	str.w	r4, [sl]
   385bc:	f8c9 4000 	str.w	r4, [r9]
   385c0:	b171      	cbz	r1, 385e0 <ip_interface_getaddrinfo+0x48>
   385c2:	4608      	mov	r0, r1
   385c4:	220a      	movs	r2, #10
   385c6:	4661      	mov	r1, ip
   385c8:	f006 ff88 	bl	3f4dc <strtol>
   385cc:	f64f 73fe 	movw	r3, #65534	; 0xfffe
   385d0:	1e42      	subs	r2, r0, #1
   385d2:	429a      	cmp	r2, r3
   385d4:	f200 8083 	bhi.w	386de <ip_interface_getaddrinfo+0x146>
   385d8:	0203      	lsls	r3, r0, #8
   385da:	ea43 2020 	orr.w	r0, r3, r0, asr #8
   385de:	8030      	strh	r0, [r6, #0]
   385e0:	f8df 819c 	ldr.w	r8, [pc, #412]	; 38780 <ip_interface_getaddrinfo+0x1e8>
   385e4:	f8d8 3000 	ldr.w	r3, [r8]
   385e8:	2b00      	cmp	r3, #0
   385ea:	d174      	bne.n	386d6 <ip_interface_getaddrinfo+0x13e>
   385ec:	4a60      	ldr	r2, [pc, #384]	; (38770 <ip_interface_getaddrinfo+0x1d8>)
   385ee:	6013      	str	r3, [r2, #0]
   385f0:	4a60      	ldr	r2, [pc, #384]	; (38774 <ip_interface_getaddrinfo+0x1dc>)
   385f2:	6013      	str	r3, [r2, #0]
   385f4:	2f00      	cmp	r7, #0
   385f6:	d062      	beq.n	386be <ip_interface_getaddrinfo+0x126>
   385f8:	4638      	mov	r0, r7
   385fa:	f7e4 fd8d 	bl	1d118 <strlen>
   385fe:	4683      	mov	fp, r0
   38600:	b125      	cbz	r5, 3860c <ip_interface_getaddrinfo+0x74>
   38602:	69ea      	ldr	r2, [r5, #28]
   38604:	b112      	cbz	r2, 3860c <ip_interface_getaddrinfo+0x74>
   38606:	6851      	ldr	r1, [r2, #4]
   38608:	2966      	cmp	r1, #102	; 0x66
   3860a:	d06c      	beq.n	386e6 <ip_interface_getaddrinfo+0x14e>
   3860c:	f04f 32ff 	mov.w	r2, #4294967295
   38610:	2100      	movs	r1, #0
   38612:	ae04      	add	r6, sp, #16
   38614:	f846 1d04 	str.w	r1, [r6, #-4]!
   38618:	4630      	mov	r0, r6
   3861a:	4659      	mov	r1, fp
   3861c:	9200      	str	r2, [sp, #0]
   3861e:	f7fb fba1 	bl	33d64 <rpc_ip_client_request_alloc>
   38622:	9a00      	ldr	r2, [sp, #0]
   38624:	2800      	cmp	r0, #0
   38626:	d14c      	bne.n	386c2 <ip_interface_getaddrinfo+0x12a>
   38628:	f247 010d 	movw	r1, #28685	; 0x700d
   3862c:	f04f 0c08 	mov.w	ip, #8
   38630:	9c03      	ldr	r4, [sp, #12]
   38632:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
   38636:	60e1      	str	r1, [r4, #12]
   38638:	6122      	str	r2, [r4, #16]
   3863a:	7260      	strb	r0, [r4, #9]
   3863c:	72a0      	strb	r0, [r4, #10]
   3863e:	72e0      	strb	r0, [r4, #11]
   38640:	f884 c008 	strb.w	ip, [r4, #8]
   38644:	2d00      	cmp	r5, #0
   38646:	d076      	beq.n	38736 <ip_interface_getaddrinfo+0x19e>
   38648:	686a      	ldr	r2, [r5, #4]
   3864a:	f022 0108 	bic.w	r1, r2, #8
   3864e:	2902      	cmp	r1, #2
   38650:	d05c      	beq.n	3870c <ip_interface_getaddrinfo+0x174>
   38652:	2a05      	cmp	r2, #5
   38654:	d178      	bne.n	38748 <ip_interface_getaddrinfo+0x1b0>
   38656:	68a9      	ldr	r1, [r5, #8]
   38658:	2902      	cmp	r1, #2
   3865a:	f8c9 1000 	str.w	r1, [r9]
   3865e:	d061      	beq.n	38724 <ip_interface_getaddrinfo+0x18c>
   38660:	61a2      	str	r2, [r4, #24]
   38662:	68ea      	ldr	r2, [r5, #12]
   38664:	6222      	str	r2, [r4, #32]
   38666:	68aa      	ldr	r2, [r5, #8]
   38668:	61e2      	str	r2, [r4, #28]
   3866a:	682a      	ldr	r2, [r5, #0]
   3866c:	6162      	str	r2, [r4, #20]
   3866e:	68a2      	ldr	r2, [r4, #8]
   38670:	3210      	adds	r2, #16
   38672:	60a2      	str	r2, [r4, #8]
   38674:	b12f      	cbz	r7, 38682 <ip_interface_getaddrinfo+0xea>
   38676:	6820      	ldr	r0, [r4, #0]
   38678:	b118      	cbz	r0, 38682 <ip_interface_getaddrinfo+0xea>
   3867a:	465a      	mov	r2, fp
   3867c:	4639      	mov	r1, r7
   3867e:	f00c fbe7 	bl	44e50 <memcpy>
   38682:	2301      	movs	r3, #1
   38684:	f247 010d 	movw	r1, #28685	; 0x700d
   38688:	4620      	mov	r0, r4
   3868a:	f8c8 3000 	str.w	r3, [r8]
   3868e:	f7fb fb7d 	bl	33d8c <rpc_ip_client_request_send>
   38692:	2800      	cmp	r0, #0
   38694:	d156      	bne.n	38744 <ip_interface_getaddrinfo+0x1ac>
   38696:	f04f 33ff 	mov.w	r3, #4294967295
   3869a:	9303      	str	r3, [sp, #12]
   3869c:	4631      	mov	r1, r6
   3869e:	4620      	mov	r0, r4
   386a0:	f7f7 fce4 	bl	3006c <bsd_os_timedwait>
   386a4:	f8d8 3000 	ldr.w	r3, [r8]
   386a8:	2b01      	cmp	r3, #1
   386aa:	d0f7      	beq.n	3869c <ip_interface_getaddrinfo+0x104>
   386ac:	4b31      	ldr	r3, [pc, #196]	; (38774 <ip_interface_getaddrinfo+0x1dc>)
   386ae:	6818      	ldr	r0, [r3, #0]
   386b0:	2800      	cmp	r0, #0
   386b2:	d13b      	bne.n	3872c <ip_interface_getaddrinfo+0x194>
   386b4:	4b2e      	ldr	r3, [pc, #184]	; (38770 <ip_interface_getaddrinfo+0x1d8>)
   386b6:	9a01      	ldr	r2, [sp, #4]
   386b8:	681b      	ldr	r3, [r3, #0]
   386ba:	6013      	str	r3, [r2, #0]
   386bc:	e00c      	b.n	386d8 <ip_interface_getaddrinfo+0x140>
   386be:	46bb      	mov	fp, r7
   386c0:	e79e      	b.n	38600 <ip_interface_getaddrinfo+0x68>
   386c2:	9c03      	ldr	r4, [sp, #12]
   386c4:	2c00      	cmp	r4, #0
   386c6:	d1bd      	bne.n	38644 <ip_interface_getaddrinfo+0xac>
   386c8:	200c      	movs	r0, #12
   386ca:	2300      	movs	r3, #0
   386cc:	f8c8 3000 	str.w	r3, [r8]
   386d0:	b005      	add	sp, #20
   386d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   386d6:	2073      	movs	r0, #115	; 0x73
   386d8:	b005      	add	sp, #20
   386da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   386de:	2016      	movs	r0, #22
   386e0:	b005      	add	sp, #20
   386e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   386e6:	6891      	ldr	r1, [r2, #8]
   386e8:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
   386ec:	d18e      	bne.n	3860c <ip_interface_getaddrinfo+0x74>
   386ee:	f240 2102 	movw	r1, #514	; 0x202
   386f2:	68d0      	ldr	r0, [r2, #12]
   386f4:	4288      	cmp	r0, r1
   386f6:	d189      	bne.n	3860c <ip_interface_getaddrinfo+0x74>
   386f8:	6991      	ldr	r1, [r2, #24]
   386fa:	2900      	cmp	r1, #0
   386fc:	d086      	beq.n	3860c <ip_interface_getaddrinfo+0x74>
   386fe:	6868      	ldr	r0, [r5, #4]
   38700:	f7fe f9dc 	bl	36abc <pdn_interface_pdn_id_get>
   38704:	1c43      	adds	r3, r0, #1
   38706:	d081      	beq.n	3860c <ip_interface_getaddrinfo+0x74>
   38708:	4602      	mov	r2, r0
   3870a:	e781      	b.n	38610 <ip_interface_getaddrinfo+0x78>
   3870c:	68a9      	ldr	r1, [r5, #8]
   3870e:	2902      	cmp	r1, #2
   38710:	f8c9 1000 	str.w	r1, [r9]
   38714:	d006      	beq.n	38724 <ip_interface_getaddrinfo+0x18c>
   38716:	2a05      	cmp	r2, #5
   38718:	d0a2      	beq.n	38660 <ip_interface_getaddrinfo+0xc8>
   3871a:	2a0a      	cmp	r2, #10
   3871c:	bf14      	ite	ne
   3871e:	2201      	movne	r2, #1
   38720:	2202      	moveq	r2, #2
   38722:	e79d      	b.n	38660 <ip_interface_getaddrinfo+0xc8>
   38724:	2102      	movs	r1, #2
   38726:	f8ca 1000 	str.w	r1, [sl]
   3872a:	e7f4      	b.n	38716 <ip_interface_getaddrinfo+0x17e>
   3872c:	4b11      	ldr	r3, [pc, #68]	; (38774 <ip_interface_getaddrinfo+0x1dc>)
   3872e:	6818      	ldr	r0, [r3, #0]
   38730:	2800      	cmp	r0, #0
   38732:	d0d1      	beq.n	386d8 <ip_interface_getaddrinfo+0x140>
   38734:	e7c9      	b.n	386ca <ip_interface_getaddrinfo+0x132>
   38736:	4629      	mov	r1, r5
   38738:	2210      	movs	r2, #16
   3873a:	f104 0014 	add.w	r0, r4, #20
   3873e:	f00c fbc1 	bl	44ec4 <memset>
   38742:	e794      	b.n	3866e <ip_interface_getaddrinfo+0xd6>
   38744:	2023      	movs	r0, #35	; 0x23
   38746:	e7c0      	b.n	386ca <ip_interface_getaddrinfo+0x132>
   38748:	202f      	movs	r0, #47	; 0x2f
   3874a:	f7f7 fd23 	bl	30194 <bsd_os_errno_set>
   3874e:	68a2      	ldr	r2, [r4, #8]
   38750:	3210      	adds	r2, #16
   38752:	60a2      	str	r2, [r4, #8]
   38754:	b917      	cbnz	r7, 3875c <ip_interface_getaddrinfo+0x1c4>
   38756:	f04f 30ff 	mov.w	r0, #4294967295
   3875a:	e7b6      	b.n	386ca <ip_interface_getaddrinfo+0x132>
   3875c:	6820      	ldr	r0, [r4, #0]
   3875e:	2800      	cmp	r0, #0
   38760:	d0f9      	beq.n	38756 <ip_interface_getaddrinfo+0x1be>
   38762:	465a      	mov	r2, fp
   38764:	4639      	mov	r1, r7
   38766:	f00c fb73 	bl	44e50 <memcpy>
   3876a:	e7f4      	b.n	38756 <ip_interface_getaddrinfo+0x1be>
   3876c:	2002984e 	.word	0x2002984e
   38770:	20025348 	.word	0x20025348
   38774:	20025340 	.word	0x20025340
   38778:	20025338 	.word	0x20025338
   3877c:	2002533c 	.word	0x2002533c
   38780:	20025344 	.word	0x20025344

00038784 <ip_interface_freeaddrinfo>:
   38784:	b538      	push	{r3, r4, r5, lr}
   38786:	4c0b      	ldr	r4, [pc, #44]	; (387b4 <ip_interface_freeaddrinfo+0x30>)
   38788:	6823      	ldr	r3, [r4, #0]
   3878a:	2b02      	cmp	r3, #2
   3878c:	d000      	beq.n	38790 <ip_interface_freeaddrinfo+0xc>
   3878e:	bd38      	pop	{r3, r4, r5, pc}
   38790:	b130      	cbz	r0, 387a0 <ip_interface_freeaddrinfo+0x1c>
   38792:	4605      	mov	r5, r0
   38794:	6940      	ldr	r0, [r0, #20]
   38796:	f7fb fab7 	bl	33d08 <nrf_free>
   3879a:	4628      	mov	r0, r5
   3879c:	f7fb fab4 	bl	33d08 <nrf_free>
   387a0:	2300      	movs	r3, #0
   387a2:	4a05      	ldr	r2, [pc, #20]	; (387b8 <ip_interface_freeaddrinfo+0x34>)
   387a4:	4905      	ldr	r1, [pc, #20]	; (387bc <ip_interface_freeaddrinfo+0x38>)
   387a6:	6023      	str	r3, [r4, #0]
   387a8:	6013      	str	r3, [r2, #0]
   387aa:	6808      	ldr	r0, [r1, #0]
   387ac:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   387b0:	f7fb bb0a 	b.w	33dc8 <rpc_ip_client_data_free>
   387b4:	20025344 	.word	0x20025344
   387b8:	20025340 	.word	0x20025340
   387bc:	2002534c 	.word	0x2002534c

000387c0 <rpc_ip_event_handler>:
   387c0:	f248 030d 	movw	r3, #32781	; 0x800d
   387c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   387c8:	4299      	cmp	r1, r3
   387ca:	b089      	sub	sp, #36	; 0x24
   387cc:	4605      	mov	r5, r0
   387ce:	d062      	beq.n	38896 <rpc_ip_event_handler+0xd6>
   387d0:	f248 030f 	movw	r3, #32783	; 0x800f
   387d4:	4299      	cmp	r1, r3
   387d6:	460c      	mov	r4, r1
   387d8:	d04b      	beq.n	38872 <rpc_ip_event_handler+0xb2>
   387da:	f401 4310 	and.w	r3, r1, #36864	; 0x9000
   387de:	f5b3 4f10 	cmp.w	r3, #36864	; 0x9000
   387e2:	68c0      	ldr	r0, [r0, #12]
   387e4:	d07b      	beq.n	388de <rpc_ip_event_handler+0x11e>
   387e6:	0c07      	lsrs	r7, r0, #16
   387e8:	4638      	mov	r0, r7
   387ea:	f000 fba1 	bl	38f30 <interface_socket_from_handle_get>
   387ee:	4606      	mov	r6, r0
   387f0:	2800      	cmp	r0, #0
   387f2:	d05f      	beq.n	388b4 <rpc_ip_event_handler+0xf4>
   387f4:	4601      	mov	r1, r0
   387f6:	4623      	mov	r3, r4
   387f8:	462a      	mov	r2, r5
   387fa:	4638      	mov	r0, r7
   387fc:	f7fb ff1c 	bl	34638 <tls_rpc_ip_event_handler>
   38800:	2800      	cmp	r0, #0
   38802:	d053      	beq.n	388ac <rpc_ip_event_handler+0xec>
   38804:	f248 0307 	movw	r3, #32775	; 0x8007
   38808:	429c      	cmp	r4, r3
   3880a:	d97d      	bls.n	38908 <rpc_ip_event_handler+0x148>
   3880c:	f248 030c 	movw	r3, #32780	; 0x800c
   38810:	429c      	cmp	r4, r3
   38812:	d068      	beq.n	388e6 <rpc_ip_event_handler+0x126>
   38814:	f240 8119 	bls.w	38a4a <rpc_ip_event_handler+0x28a>
   38818:	f249 0302 	movw	r3, #36866	; 0x9002
   3881c:	429c      	cmp	r4, r3
   3881e:	f000 8195 	beq.w	38b4c <rpc_ip_event_handler+0x38c>
   38822:	f249 0303 	movw	r3, #36867	; 0x9003
   38826:	429c      	cmp	r4, r3
   38828:	f000 81aa 	beq.w	38b80 <rpc_ip_event_handler+0x3c0>
   3882c:	f249 0301 	movw	r3, #36865	; 0x9001
   38830:	429c      	cmp	r4, r3
   38832:	d13f      	bne.n	388b4 <rpc_ip_event_handler+0xf4>
   38834:	6834      	ldr	r4, [r6, #0]
   38836:	f414 1480 	ands.w	r4, r4, #1048576	; 0x100000
   3883a:	f000 81c2 	beq.w	38bc2 <rpc_ip_event_handler+0x402>
   3883e:	68ab      	ldr	r3, [r5, #8]
   38840:	2b04      	cmp	r3, #4
   38842:	f200 81ff 	bhi.w	38c44 <rpc_ip_event_handler+0x484>
   38846:	2400      	movs	r4, #0
   38848:	4627      	mov	r7, r4
   3884a:	6829      	ldr	r1, [r5, #0]
   3884c:	686a      	ldr	r2, [r5, #4]
   3884e:	e9cd 7406 	strd	r7, r4, [sp, #24]
   38852:	e9cd 1204 	strd	r1, r2, [sp, #16]
   38856:	69f0      	ldr	r0, [r6, #28]
   38858:	a904      	add	r1, sp, #16
   3885a:	6803      	ldr	r3, [r0, #0]
   3885c:	685b      	ldr	r3, [r3, #4]
   3885e:	4798      	blx	r3
   38860:	3001      	adds	r0, #1
   38862:	f000 81db 	beq.w	38c1c <rpc_ip_event_handler+0x45c>
   38866:	6833      	ldr	r3, [r6, #0]
   38868:	2000      	movs	r0, #0
   3886a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   3886e:	6033      	str	r3, [r6, #0]
   38870:	e00e      	b.n	38890 <rpc_ip_event_handler+0xd0>
   38872:	6943      	ldr	r3, [r0, #20]
   38874:	2001      	movs	r0, #1
   38876:	2b10      	cmp	r3, #16
   38878:	49b7      	ldr	r1, [pc, #732]	; (38b58 <rpc_ip_event_handler+0x398>)
   3887a:	bf88      	it	hi
   3887c:	222d      	movhi	r2, #45	; 0x2d
   3887e:	7008      	strb	r0, [r1, #0]
   38880:	f04f 0000 	mov.w	r0, #0
   38884:	bf9c      	itt	ls
   38886:	4ab5      	ldrls	r2, [pc, #724]	; (38b5c <rpc_ip_event_handler+0x39c>)
   38888:	f852 2023 	ldrls.w	r2, [r2, r3, lsl #2]
   3888c:	4bb4      	ldr	r3, [pc, #720]	; (38b60 <rpc_ip_event_handler+0x3a0>)
   3888e:	601a      	str	r2, [r3, #0]
   38890:	b009      	add	sp, #36	; 0x24
   38892:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   38896:	f8df 92dc 	ldr.w	r9, [pc, #732]	; 38b74 <rpc_ip_event_handler+0x3b4>
   3889a:	6807      	ldr	r7, [r0, #0]
   3889c:	f8d9 3000 	ldr.w	r3, [r9]
   388a0:	2b01      	cmp	r3, #1
   388a2:	d00b      	beq.n	388bc <rpc_ip_event_handler+0xfc>
   388a4:	b117      	cbz	r7, 388ac <rpc_ip_event_handler+0xec>
   388a6:	4638      	mov	r0, r7
   388a8:	f7fb fa8e 	bl	33dc8 <rpc_ip_client_data_free>
   388ac:	2000      	movs	r0, #0
   388ae:	b009      	add	sp, #36	; 0x24
   388b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   388b4:	6828      	ldr	r0, [r5, #0]
   388b6:	2800      	cmp	r0, #0
   388b8:	d1f6      	bne.n	388a8 <rpc_ip_event_handler+0xe8>
   388ba:	e7f7      	b.n	388ac <rpc_ip_event_handler+0xec>
   388bc:	6943      	ldr	r3, [r0, #20]
   388be:	2b00      	cmp	r3, #0
   388c0:	d046      	beq.n	38950 <rpc_ip_event_handler+0x190>
   388c2:	2b10      	cmp	r3, #16
   388c4:	bf96      	itet	ls
   388c6:	4aa5      	ldrls	r2, [pc, #660]	; (38b5c <rpc_ip_event_handler+0x39c>)
   388c8:	232d      	movhi	r3, #45	; 0x2d
   388ca:	f852 3023 	ldrls.w	r3, [r2, r3, lsl #2]
   388ce:	2202      	movs	r2, #2
   388d0:	49a4      	ldr	r1, [pc, #656]	; (38b64 <rpc_ip_event_handler+0x3a4>)
   388d2:	600b      	str	r3, [r1, #0]
   388d4:	f8c9 2000 	str.w	r2, [r9]
   388d8:	2f00      	cmp	r7, #0
   388da:	d1e4      	bne.n	388a6 <rpc_ip_event_handler+0xe6>
   388dc:	e7e6      	b.n	388ac <rpc_ip_event_handler+0xec>
   388de:	f000 fad5 	bl	38e8c <interface_from_internal_id_search>
   388e2:	4607      	mov	r7, r0
   388e4:	e780      	b.n	387e8 <rpc_ip_event_handler+0x28>
   388e6:	6833      	ldr	r3, [r6, #0]
   388e8:	b29b      	uxth	r3, r3
   388ea:	2b08      	cmp	r3, #8
   388ec:	d1de      	bne.n	388ac <rpc_ip_event_handler+0xec>
   388ee:	696b      	ldr	r3, [r5, #20]
   388f0:	2b00      	cmp	r3, #0
   388f2:	f000 819c 	beq.w	38c2e <rpc_ip_event_handler+0x46e>
   388f6:	2b10      	cmp	r3, #16
   388f8:	f200 8161 	bhi.w	38bbe <rpc_ip_event_handler+0x3fe>
   388fc:	4a97      	ldr	r2, [pc, #604]	; (38b5c <rpc_ip_event_handler+0x39c>)
   388fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   38902:	6073      	str	r3, [r6, #4]
   38904:	2000      	movs	r0, #0
   38906:	e7c3      	b.n	38890 <rpc_ip_event_handler+0xd0>
   38908:	f248 0306 	movw	r3, #32774	; 0x8006
   3890c:	429c      	cmp	r4, r3
   3890e:	f080 810d 	bcs.w	38b2c <rpc_ip_event_handler+0x36c>
   38912:	f248 0302 	movw	r3, #32770	; 0x8002
   38916:	429c      	cmp	r4, r3
   38918:	f000 80f0 	beq.w	38afc <rpc_ip_event_handler+0x33c>
   3891c:	f240 80be 	bls.w	38a9c <rpc_ip_event_handler+0x2dc>
   38920:	f248 0303 	movw	r3, #32771	; 0x8003
   38924:	429c      	cmp	r4, r3
   38926:	f000 80ca 	beq.w	38abe <rpc_ip_event_handler+0x2fe>
   3892a:	f248 0305 	movw	r3, #32773	; 0x8005
   3892e:	429c      	cmp	r4, r3
   38930:	d1c0      	bne.n	388b4 <rpc_ip_event_handler+0xf4>
   38932:	6833      	ldr	r3, [r6, #0]
   38934:	b29b      	uxth	r3, r3
   38936:	2b03      	cmp	r3, #3
   38938:	d1b8      	bne.n	388ac <rpc_ip_event_handler+0xec>
   3893a:	696b      	ldr	r3, [r5, #20]
   3893c:	2b00      	cmp	r3, #0
   3893e:	d1da      	bne.n	388f6 <rpc_ip_event_handler+0x136>
   38940:	6833      	ldr	r3, [r6, #0]
   38942:	2000      	movs	r0, #0
   38944:	0c1b      	lsrs	r3, r3, #16
   38946:	041b      	lsls	r3, r3, #16
   38948:	f043 0304 	orr.w	r3, r3, #4
   3894c:	6033      	str	r3, [r6, #0]
   3894e:	e79f      	b.n	38890 <rpc_ip_event_handler+0xd0>
   38950:	4b85      	ldr	r3, [pc, #532]	; (38b68 <rpc_ip_event_handler+0x3a8>)
   38952:	601f      	str	r7, [r3, #0]
   38954:	6984      	ldr	r4, [r0, #24]
   38956:	0163      	lsls	r3, r4, #5
   38958:	4618      	mov	r0, r3
   3895a:	9303      	str	r3, [sp, #12]
   3895c:	f7fb f9ca 	bl	33cf4 <nrf_malloc>
   38960:	9002      	str	r0, [sp, #8]
   38962:	2800      	cmp	r0, #0
   38964:	f000 808a 	beq.w	38a7c <rpc_ip_event_handler+0x2bc>
   38968:	00e5      	lsls	r5, r4, #3
   3896a:	1928      	adds	r0, r5, r4
   3896c:	0080      	lsls	r0, r0, #2
   3896e:	f7fb f9c1 	bl	33cf4 <nrf_malloc>
   38972:	2800      	cmp	r0, #0
   38974:	f000 811f 	beq.w	38bb6 <rpc_ip_event_handler+0x3f6>
   38978:	2c00      	cmp	r4, #0
   3897a:	d05e      	beq.n	38a3a <rpc_ip_event_handler+0x27a>
   3897c:	3510      	adds	r5, #16
   3897e:	1943      	adds	r3, r0, r5
   38980:	9301      	str	r3, [sp, #4]
   38982:	9b02      	ldr	r3, [sp, #8]
   38984:	2404      	movs	r4, #4
   38986:	f8df a1f0 	ldr.w	sl, [pc, #496]	; 38b78 <rpc_ip_event_handler+0x3b8>
   3898a:	f8df b1f0 	ldr.w	fp, [pc, #496]	; 38b7c <rpc_ip_event_handler+0x3bc>
   3898e:	f100 0810 	add.w	r8, r0, #16
   38992:	f103 0620 	add.w	r6, r3, #32
   38996:	e01d      	b.n	389d4 <rpc_ip_event_handler+0x214>
   38998:	220a      	movs	r2, #10
   3899a:	f848 2c0c 	str.w	r2, [r8, #-12]
   3899e:	f04f 0224 	mov.w	r2, #36	; 0x24
   389a2:	4640      	mov	r0, r8
   389a4:	f808 2c10 	strb.w	r2, [r8, #-16]
   389a8:	f828 3c08 	strh.w	r3, [r8, #-8]
   389ac:	f856 2c10 	ldr.w	r2, [r6, #-16]
   389b0:	f00c fa4e 	bl	44e50 <memcpy>
   389b4:	f856 3c10 	ldr.w	r3, [r6, #-16]
   389b8:	f108 0808 	add.w	r8, r8, #8
   389bc:	441c      	add	r4, r3
   389be:	193b      	adds	r3, r7, r4
   389c0:	f846 3c08 	str.w	r3, [r6, #-8]
   389c4:	9b01      	ldr	r3, [sp, #4]
   389c6:	f846 6c04 	str.w	r6, [r6, #-4]
   389ca:	4598      	cmp	r8, r3
   389cc:	442c      	add	r4, r5
   389ce:	f106 0620 	add.w	r6, r6, #32
   389d2:	d02c      	beq.n	38a2e <rpc_ip_event_handler+0x26e>
   389d4:	593b      	ldr	r3, [r7, r4]
   389d6:	193a      	adds	r2, r7, r4
   389d8:	f846 3c20 	str.w	r3, [r6, #-32]
   389dc:	6853      	ldr	r3, [r2, #4]
   389de:	f8da 1000 	ldr.w	r1, [sl]
   389e2:	2b02      	cmp	r3, #2
   389e4:	bf14      	ite	ne
   389e6:	2002      	movne	r0, #2
   389e8:	200a      	moveq	r0, #10
   389ea:	f8db 3000 	ldr.w	r3, [fp]
   389ee:	e946 0107 	strd	r0, r1, [r6, #-28]
   389f2:	f846 3c14 	str.w	r3, [r6, #-20]
   389f6:	8a10      	ldrh	r0, [r2, #16]
   389f8:	f1a8 0310 	sub.w	r3, r8, #16
   389fc:	f846 0c10 	str.w	r0, [r6, #-16]
   38a00:	8a55      	ldrh	r5, [r2, #18]
   38a02:	f846 3c0c 	str.w	r3, [r6, #-12]
   38a06:	4b59      	ldr	r3, [pc, #356]	; (38b6c <rpc_ip_event_handler+0x3ac>)
   38a08:	3414      	adds	r4, #20
   38a0a:	2804      	cmp	r0, #4
   38a0c:	eb07 0104 	add.w	r1, r7, r4
   38a10:	881b      	ldrh	r3, [r3, #0]
   38a12:	d1c1      	bne.n	38998 <rpc_ip_event_handler+0x1d8>
   38a14:	2210      	movs	r2, #16
   38a16:	2002      	movs	r0, #2
   38a18:	f828 3c08 	strh.w	r3, [r8, #-8]
   38a1c:	f848 0c0c 	str.w	r0, [r8, #-12]
   38a20:	f808 2c10 	strb.w	r2, [r8, #-16]
   38a24:	f856 2c10 	ldr.w	r2, [r6, #-16]
   38a28:	f1a8 0004 	sub.w	r0, r8, #4
   38a2c:	e7c0      	b.n	389b0 <rpc_ip_event_handler+0x1f0>
   38a2e:	2200      	movs	r2, #0
   38a30:	e9dd 1302 	ldrd	r1, r3, [sp, #8]
   38a34:	440b      	add	r3, r1
   38a36:	f843 2c04 	str.w	r2, [r3, #-4]
   38a3a:	2202      	movs	r2, #2
   38a3c:	4b4c      	ldr	r3, [pc, #304]	; (38b70 <rpc_ip_event_handler+0x3b0>)
   38a3e:	f8c9 2000 	str.w	r2, [r9]
   38a42:	9a02      	ldr	r2, [sp, #8]
   38a44:	2000      	movs	r0, #0
   38a46:	601a      	str	r2, [r3, #0]
   38a48:	e722      	b.n	38890 <rpc_ip_event_handler+0xd0>
   38a4a:	f248 0308 	movw	r3, #32776	; 0x8008
   38a4e:	429c      	cmp	r4, r3
   38a50:	d045      	beq.n	38ade <rpc_ip_event_handler+0x31e>
   38a52:	f248 0309 	movw	r3, #32777	; 0x8009
   38a56:	429c      	cmp	r4, r3
   38a58:	f47f af2c 	bne.w	388b4 <rpc_ip_event_handler+0xf4>
   38a5c:	6833      	ldr	r3, [r6, #0]
   38a5e:	b29b      	uxth	r3, r3
   38a60:	2b0d      	cmp	r3, #13
   38a62:	f47f af23 	bne.w	388ac <rpc_ip_event_handler+0xec>
   38a66:	6968      	ldr	r0, [r5, #20]
   38a68:	2800      	cmp	r0, #0
   38a6a:	f000 80d9 	beq.w	38c20 <rpc_ip_event_handler+0x460>
   38a6e:	2810      	cmp	r0, #16
   38a70:	f200 80a5 	bhi.w	38bbe <rpc_ip_event_handler+0x3fe>
   38a74:	4b39      	ldr	r3, [pc, #228]	; (38b5c <rpc_ip_event_handler+0x39c>)
   38a76:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
   38a7a:	e742      	b.n	38902 <rpc_ip_event_handler+0x142>
   38a7c:	f7fb f944 	bl	33d08 <nrf_free>
   38a80:	200c      	movs	r0, #12
   38a82:	2302      	movs	r3, #2
   38a84:	4937      	ldr	r1, [pc, #220]	; (38b64 <rpc_ip_event_handler+0x3a4>)
   38a86:	4a3a      	ldr	r2, [pc, #232]	; (38b70 <rpc_ip_event_handler+0x3b0>)
   38a88:	6008      	str	r0, [r1, #0]
   38a8a:	682f      	ldr	r7, [r5, #0]
   38a8c:	9902      	ldr	r1, [sp, #8]
   38a8e:	f8c9 3000 	str.w	r3, [r9]
   38a92:	6011      	str	r1, [r2, #0]
   38a94:	2f00      	cmp	r7, #0
   38a96:	f47f af06 	bne.w	388a6 <rpc_ip_event_handler+0xe6>
   38a9a:	e707      	b.n	388ac <rpc_ip_event_handler+0xec>
   38a9c:	f248 0301 	movw	r3, #32769	; 0x8001
   38aa0:	429c      	cmp	r4, r3
   38aa2:	f47f af07 	bne.w	388b4 <rpc_ip_event_handler+0xf4>
   38aa6:	6833      	ldr	r3, [r6, #0]
   38aa8:	2b01      	cmp	r3, #1
   38aaa:	f47f aeff 	bne.w	388ac <rpc_ip_event_handler+0xec>
   38aae:	6968      	ldr	r0, [r5, #20]
   38ab0:	2800      	cmp	r0, #0
   38ab2:	d1dc      	bne.n	38a6e <rpc_ip_event_handler+0x2ae>
   38ab4:	2302      	movs	r3, #2
   38ab6:	6033      	str	r3, [r6, #0]
   38ab8:	69ab      	ldr	r3, [r5, #24]
   38aba:	61b3      	str	r3, [r6, #24]
   38abc:	e6e8      	b.n	38890 <rpc_ip_event_handler+0xd0>
   38abe:	6833      	ldr	r3, [r6, #0]
   38ac0:	025b      	lsls	r3, r3, #9
   38ac2:	f57f aef3 	bpl.w	388ac <rpc_ip_event_handler+0xec>
   38ac6:	6968      	ldr	r0, [r5, #20]
   38ac8:	2800      	cmp	r0, #0
   38aca:	f000 80a0 	beq.w	38c0e <rpc_ip_event_handler+0x44e>
   38ace:	2810      	cmp	r0, #16
   38ad0:	bf8e      	itee	hi
   38ad2:	232d      	movhi	r3, #45	; 0x2d
   38ad4:	4b21      	ldrls	r3, [pc, #132]	; (38b5c <rpc_ip_event_handler+0x39c>)
   38ad6:	f853 3020 	ldrls.w	r3, [r3, r0, lsl #2]
   38ada:	6073      	str	r3, [r6, #4]
   38adc:	e6e6      	b.n	388ac <rpc_ip_event_handler+0xec>
   38ade:	6833      	ldr	r3, [r6, #0]
   38ae0:	b29b      	uxth	r3, r3
   38ae2:	2b06      	cmp	r3, #6
   38ae4:	f47f aee2 	bne.w	388ac <rpc_ip_event_handler+0xec>
   38ae8:	6968      	ldr	r0, [r5, #20]
   38aea:	2800      	cmp	r0, #0
   38aec:	d1bf      	bne.n	38a6e <rpc_ip_event_handler+0x2ae>
   38aee:	6833      	ldr	r3, [r6, #0]
   38af0:	0c1b      	lsrs	r3, r3, #16
   38af2:	041b      	lsls	r3, r3, #16
   38af4:	f043 0307 	orr.w	r3, r3, #7
   38af8:	6033      	str	r3, [r6, #0]
   38afa:	e6c9      	b.n	38890 <rpc_ip_event_handler+0xd0>
   38afc:	6833      	ldr	r3, [r6, #0]
   38afe:	0099      	lsls	r1, r3, #2
   38b00:	f57f aed4 	bpl.w	388ac <rpc_ip_event_handler+0xec>
   38b04:	6833      	ldr	r3, [r6, #0]
   38b06:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
   38b0a:	6033      	str	r3, [r6, #0]
   38b0c:	6968      	ldr	r0, [r5, #20]
   38b0e:	2800      	cmp	r0, #0
   38b10:	d06e      	beq.n	38bf0 <rpc_ip_event_handler+0x430>
   38b12:	2810      	cmp	r0, #16
   38b14:	f200 8080 	bhi.w	38c18 <rpc_ip_event_handler+0x458>
   38b18:	4b10      	ldr	r3, [pc, #64]	; (38b5c <rpc_ip_event_handler+0x39c>)
   38b1a:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
   38b1e:	6073      	str	r3, [r6, #4]
   38b20:	6833      	ldr	r3, [r6, #0]
   38b22:	2000      	movs	r0, #0
   38b24:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
   38b28:	6033      	str	r3, [r6, #0]
   38b2a:	e6b1      	b.n	38890 <rpc_ip_event_handler+0xd0>
   38b2c:	6833      	ldr	r3, [r6, #0]
   38b2e:	029a      	lsls	r2, r3, #10
   38b30:	f57f aebc 	bpl.w	388ac <rpc_ip_event_handler+0xec>
   38b34:	696b      	ldr	r3, [r5, #20]
   38b36:	2b00      	cmp	r3, #0
   38b38:	d051      	beq.n	38bde <rpc_ip_event_handler+0x41e>
   38b3a:	2b6b      	cmp	r3, #107	; 0x6b
   38b3c:	f000 8086 	beq.w	38c4c <rpc_ip_event_handler+0x48c>
   38b40:	2b10      	cmp	r3, #16
   38b42:	d869      	bhi.n	38c18 <rpc_ip_event_handler+0x458>
   38b44:	4a05      	ldr	r2, [pc, #20]	; (38b5c <rpc_ip_event_handler+0x39c>)
   38b46:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   38b4a:	e7e8      	b.n	38b1e <rpc_ip_event_handler+0x35e>
   38b4c:	6833      	ldr	r3, [r6, #0]
   38b4e:	b29b      	uxth	r3, r3
   38b50:	2b07      	cmp	r3, #7
   38b52:	f47f aeab 	bne.w	388ac <rpc_ip_event_handler+0xec>
   38b56:	e686      	b.n	38866 <rpc_ip_event_handler+0xa6>
   38b58:	2002b4e9 	.word	0x2002b4e9
   38b5c:	0004721c 	.word	0x0004721c
   38b60:	20025374 	.word	0x20025374
   38b64:	20025340 	.word	0x20025340
   38b68:	2002534c 	.word	0x2002534c
   38b6c:	2002984e 	.word	0x2002984e
   38b70:	20025348 	.word	0x20025348
   38b74:	20025344 	.word	0x20025344
   38b78:	2002533c 	.word	0x2002533c
   38b7c:	20025338 	.word	0x20025338
   38b80:	6833      	ldr	r3, [r6, #0]
   38b82:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
   38b86:	6033      	str	r3, [r6, #0]
   38b88:	6833      	ldr	r3, [r6, #0]
   38b8a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
   38b8e:	6033      	str	r3, [r6, #0]
   38b90:	6833      	ldr	r3, [r6, #0]
   38b92:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
   38b96:	6033      	str	r3, [r6, #0]
   38b98:	692b      	ldr	r3, [r5, #16]
   38b9a:	2b6c      	cmp	r3, #108	; 0x6c
   38b9c:	d016      	beq.n	38bcc <rpc_ip_event_handler+0x40c>
   38b9e:	2b10      	cmp	r3, #16
   38ba0:	bf8c      	ite	hi
   38ba2:	232d      	movhi	r3, #45	; 0x2d
   38ba4:	4a46      	ldrls	r2, [pc, #280]	; (38cc0 <rpc_ip_event_handler+0x500>)
   38ba6:	f04f 0000 	mov.w	r0, #0
   38baa:	bf98      	it	ls
   38bac:	f852 3023 	ldrls.w	r3, [r2, r3, lsl #2]
   38bb0:	6073      	str	r3, [r6, #4]
   38bb2:	60b3      	str	r3, [r6, #8]
   38bb4:	e66c      	b.n	38890 <rpc_ip_event_handler+0xd0>
   38bb6:	220c      	movs	r2, #12
   38bb8:	4b42      	ldr	r3, [pc, #264]	; (38cc4 <rpc_ip_event_handler+0x504>)
   38bba:	601a      	str	r2, [r3, #0]
   38bbc:	e73d      	b.n	38a3a <rpc_ip_event_handler+0x27a>
   38bbe:	232d      	movs	r3, #45	; 0x2d
   38bc0:	e69f      	b.n	38902 <rpc_ip_event_handler+0x142>
   38bc2:	6828      	ldr	r0, [r5, #0]
   38bc4:	f7fb f900 	bl	33dc8 <rpc_ip_client_data_free>
   38bc8:	4620      	mov	r0, r4
   38bca:	e661      	b.n	38890 <rpc_ip_event_handler+0xd0>
   38bcc:	2239      	movs	r2, #57	; 0x39
   38bce:	6833      	ldr	r3, [r6, #0]
   38bd0:	2000      	movs	r0, #0
   38bd2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
   38bd6:	6033      	str	r3, [r6, #0]
   38bd8:	6072      	str	r2, [r6, #4]
   38bda:	60b2      	str	r2, [r6, #8]
   38bdc:	e658      	b.n	38890 <rpc_ip_event_handler+0xd0>
   38bde:	6833      	ldr	r3, [r6, #0]
   38be0:	4a39      	ldr	r2, [pc, #228]	; (38cc8 <rpc_ip_event_handler+0x508>)
   38be2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   38be6:	6033      	str	r3, [r6, #0]
   38be8:	2001      	movs	r0, #1
   38bea:	f842 5027 	str.w	r5, [r2, r7, lsl #2]
   38bee:	e64f      	b.n	38890 <rpc_ip_event_handler+0xd0>
   38bf0:	6833      	ldr	r3, [r6, #0]
   38bf2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   38bf6:	6033      	str	r3, [r6, #0]
   38bf8:	6833      	ldr	r3, [r6, #0]
   38bfa:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   38bfe:	6033      	str	r3, [r6, #0]
   38c00:	6833      	ldr	r3, [r6, #0]
   38c02:	0c1b      	lsrs	r3, r3, #16
   38c04:	041b      	lsls	r3, r3, #16
   38c06:	f043 0305 	orr.w	r3, r3, #5
   38c0a:	6033      	str	r3, [r6, #0]
   38c0c:	e640      	b.n	38890 <rpc_ip_event_handler+0xd0>
   38c0e:	6833      	ldr	r3, [r6, #0]
   38c10:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
   38c14:	6033      	str	r3, [r6, #0]
   38c16:	e63b      	b.n	38890 <rpc_ip_event_handler+0xd0>
   38c18:	232d      	movs	r3, #45	; 0x2d
   38c1a:	e780      	b.n	38b1e <rpc_ip_event_handler+0x35e>
   38c1c:	2002      	movs	r0, #2
   38c1e:	e637      	b.n	38890 <rpc_ip_event_handler+0xd0>
   38c20:	6833      	ldr	r3, [r6, #0]
   38c22:	0c1b      	lsrs	r3, r3, #16
   38c24:	041b      	lsls	r3, r3, #16
   38c26:	f043 030e 	orr.w	r3, r3, #14
   38c2a:	6033      	str	r3, [r6, #0]
   38c2c:	e630      	b.n	38890 <rpc_ip_event_handler+0xd0>
   38c2e:	4b26      	ldr	r3, [pc, #152]	; (38cc8 <rpc_ip_event_handler+0x508>)
   38c30:	2001      	movs	r0, #1
   38c32:	f843 5027 	str.w	r5, [r3, r7, lsl #2]
   38c36:	6833      	ldr	r3, [r6, #0]
   38c38:	0c1b      	lsrs	r3, r3, #16
   38c3a:	041b      	lsls	r3, r3, #16
   38c3c:	f043 0309 	orr.w	r3, r3, #9
   38c40:	6033      	str	r3, [r6, #0]
   38c42:	e625      	b.n	38890 <rpc_ip_event_handler+0xd0>
   38c44:	8a6c      	ldrh	r4, [r5, #18]
   38c46:	b934      	cbnz	r4, 38c56 <rpc_ip_event_handler+0x496>
   38c48:	4627      	mov	r7, r4
   38c4a:	e5fe      	b.n	3884a <rpc_ip_event_handler+0x8a>
   38c4c:	6933      	ldr	r3, [r6, #16]
   38c4e:	2b01      	cmp	r3, #1
   38c50:	d012      	beq.n	38c78 <rpc_ip_event_handler+0x4b8>
   38c52:	230c      	movs	r3, #12
   38c54:	e763      	b.n	38b1e <rpc_ip_event_handler+0x35e>
   38c56:	2024      	movs	r0, #36	; 0x24
   38c58:	f7fb f84c 	bl	33cf4 <nrf_malloc>
   38c5c:	4607      	mov	r7, r0
   38c5e:	b358      	cbz	r0, 38cb8 <rpc_ip_event_handler+0x4f8>
   38c60:	8a6a      	ldrh	r2, [r5, #18]
   38c62:	2a10      	cmp	r2, #16
   38c64:	d01c      	beq.n	38ca0 <rpc_ip_event_handler+0x4e0>
   38c66:	2a04      	cmp	r2, #4
   38c68:	d00e      	beq.n	38c88 <rpc_ip_event_handler+0x4c8>
   38c6a:	6828      	ldr	r0, [r5, #0]
   38c6c:	f7fb f8ac 	bl	33dc8 <rpc_ip_client_data_free>
   38c70:	4638      	mov	r0, r7
   38c72:	f7fb f849 	bl	33d08 <nrf_free>
   38c76:	e619      	b.n	388ac <rpc_ip_event_handler+0xec>
   38c78:	220c      	movs	r2, #12
   38c7a:	6833      	ldr	r3, [r6, #0]
   38c7c:	2000      	movs	r0, #0
   38c7e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
   38c82:	6033      	str	r3, [r6, #0]
   38c84:	6072      	str	r2, [r6, #4]
   38c86:	e603      	b.n	38890 <rpc_ip_event_handler+0xd0>
   38c88:	2302      	movs	r3, #2
   38c8a:	2410      	movs	r4, #16
   38c8c:	6043      	str	r3, [r0, #4]
   38c8e:	7004      	strb	r4, [r0, #0]
   38c90:	8a2b      	ldrh	r3, [r5, #16]
   38c92:	f105 0114 	add.w	r1, r5, #20
   38c96:	8103      	strh	r3, [r0, #8]
   38c98:	300c      	adds	r0, #12
   38c9a:	f00c f8d9 	bl	44e50 <memcpy>
   38c9e:	e5d4      	b.n	3884a <rpc_ip_event_handler+0x8a>
   38ca0:	230a      	movs	r3, #10
   38ca2:	2424      	movs	r4, #36	; 0x24
   38ca4:	6043      	str	r3, [r0, #4]
   38ca6:	7004      	strb	r4, [r0, #0]
   38ca8:	8a2b      	ldrh	r3, [r5, #16]
   38caa:	f105 0114 	add.w	r1, r5, #20
   38cae:	8103      	strh	r3, [r0, #8]
   38cb0:	3010      	adds	r0, #16
   38cb2:	f00c f8cd 	bl	44e50 <memcpy>
   38cb6:	e5c8      	b.n	3884a <rpc_ip_event_handler+0x8a>
   38cb8:	6828      	ldr	r0, [r5, #0]
   38cba:	f7fb f885 	bl	33dc8 <rpc_ip_client_data_free>
   38cbe:	e5f5      	b.n	388ac <rpc_ip_event_handler+0xec>
   38cc0:	0004721c 	.word	0x0004721c
   38cc4:	20025340 	.word	0x20025340
   38cc8:	20025350 	.word	0x20025350

00038ccc <interface_init>:
   38ccc:	b508      	push	{r3, lr}
   38cce:	f44f 72a2 	mov.w	r2, #324	; 0x144
   38cd2:	2100      	movs	r1, #0
   38cd4:	4802      	ldr	r0, [pc, #8]	; (38ce0 <interface_init+0x14>)
   38cd6:	f00c f8f5 	bl	44ec4 <memset>
   38cda:	2000      	movs	r0, #0
   38cdc:	bd08      	pop	{r3, pc}
   38cde:	bf00      	nop
   38ce0:	2002b4ec 	.word	0x2002b4ec

00038ce4 <interface_socket_allocate>:
   38ce4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   38ce6:	4b30      	ldr	r3, [pc, #192]	; (38da8 <interface_socket_allocate+0xc4>)
   38ce8:	4606      	mov	r6, r0
   38cea:	681d      	ldr	r5, [r3, #0]
   38cec:	4608      	mov	r0, r1
   38cee:	b31d      	cbz	r5, 38d38 <interface_socket_allocate+0x54>
   38cf0:	6a5c      	ldr	r4, [r3, #36]	; 0x24
   38cf2:	2c00      	cmp	r4, #0
   38cf4:	d04a      	beq.n	38d8c <interface_socket_allocate+0xa8>
   38cf6:	6c9c      	ldr	r4, [r3, #72]	; 0x48
   38cf8:	2c00      	cmp	r4, #0
   38cfa:	d049      	beq.n	38d90 <interface_socket_allocate+0xac>
   38cfc:	6edc      	ldr	r4, [r3, #108]	; 0x6c
   38cfe:	2c00      	cmp	r4, #0
   38d00:	d048      	beq.n	38d94 <interface_socket_allocate+0xb0>
   38d02:	f8d3 1090 	ldr.w	r1, [r3, #144]	; 0x90
   38d06:	2900      	cmp	r1, #0
   38d08:	d046      	beq.n	38d98 <interface_socket_allocate+0xb4>
   38d0a:	f8d3 10b4 	ldr.w	r1, [r3, #180]	; 0xb4
   38d0e:	b191      	cbz	r1, 38d36 <interface_socket_allocate+0x52>
   38d10:	f8d3 10d8 	ldr.w	r1, [r3, #216]	; 0xd8
   38d14:	2900      	cmp	r1, #0
   38d16:	d043      	beq.n	38da0 <interface_socket_allocate+0xbc>
   38d18:	f8d3 10fc 	ldr.w	r1, [r3, #252]	; 0xfc
   38d1c:	2900      	cmp	r1, #0
   38d1e:	d041      	beq.n	38da4 <interface_socket_allocate+0xc0>
   38d20:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
   38d24:	2900      	cmp	r1, #0
   38d26:	d039      	beq.n	38d9c <interface_socket_allocate+0xb8>
   38d28:	f04f 35ff 	mov.w	r5, #4294967295
   38d2c:	2069      	movs	r0, #105	; 0x69
   38d2e:	f7f7 fa31 	bl	30194 <bsd_os_errno_set>
   38d32:	4628      	mov	r0, r5
   38d34:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   38d36:	2505      	movs	r5, #5
   38d38:	f04f 0c01 	mov.w	ip, #1
   38d3c:	f04f 37ff 	mov.w	r7, #4294967295
   38d40:	eb05 04c5 	add.w	r4, r5, r5, lsl #3
   38d44:	00a4      	lsls	r4, r4, #2
   38d46:	f843 c004 	str.w	ip, [r3, r4]
   38d4a:	441c      	add	r4, r3
   38d4c:	4611      	mov	r1, r2
   38d4e:	61a7      	str	r7, [r4, #24]
   38d50:	4622      	mov	r2, r4
   38d52:	f001 ffd1 	bl	3acf8 <packet_handler_create>
   38d56:	4603      	mov	r3, r0
   38d58:	61e0      	str	r0, [r4, #28]
   38d5a:	b158      	cbz	r0, 38d74 <interface_socket_allocate+0x90>
   38d5c:	681b      	ldr	r3, [r3, #0]
   38d5e:	681b      	ldr	r3, [r3, #0]
   38d60:	4798      	blx	r3
   38d62:	b910      	cbnz	r0, 38d6a <interface_socket_allocate+0x86>
   38d64:	6034      	str	r4, [r6, #0]
   38d66:	4628      	mov	r0, r5
   38d68:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   38d6a:	69e0      	ldr	r0, [r4, #28]
   38d6c:	f001 ffe4 	bl	3ad38 <packet_handler_delete>
   38d70:	2300      	movs	r3, #0
   38d72:	61e3      	str	r3, [r4, #28]
   38d74:	f04f 35ff 	mov.w	r5, #4294967295
   38d78:	2224      	movs	r2, #36	; 0x24
   38d7a:	2100      	movs	r1, #0
   38d7c:	4620      	mov	r0, r4
   38d7e:	f00c f8a1 	bl	44ec4 <memset>
   38d82:	200c      	movs	r0, #12
   38d84:	f7f7 fa06 	bl	30194 <bsd_os_errno_set>
   38d88:	4628      	mov	r0, r5
   38d8a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   38d8c:	2501      	movs	r5, #1
   38d8e:	e7d3      	b.n	38d38 <interface_socket_allocate+0x54>
   38d90:	2502      	movs	r5, #2
   38d92:	e7d1      	b.n	38d38 <interface_socket_allocate+0x54>
   38d94:	2503      	movs	r5, #3
   38d96:	e7cf      	b.n	38d38 <interface_socket_allocate+0x54>
   38d98:	2504      	movs	r5, #4
   38d9a:	e7cd      	b.n	38d38 <interface_socket_allocate+0x54>
   38d9c:	2508      	movs	r5, #8
   38d9e:	e7cb      	b.n	38d38 <interface_socket_allocate+0x54>
   38da0:	2506      	movs	r5, #6
   38da2:	e7c9      	b.n	38d38 <interface_socket_allocate+0x54>
   38da4:	2507      	movs	r5, #7
   38da6:	e7c7      	b.n	38d38 <interface_socket_allocate+0x54>
   38da8:	2002b4ec 	.word	0x2002b4ec

00038dac <interface_socket_free>:
   38dac:	2808      	cmp	r0, #8
   38dae:	d900      	bls.n	38db2 <interface_socket_free+0x6>
   38db0:	4770      	bx	lr
   38db2:	b510      	push	{r4, lr}
   38db4:	4c07      	ldr	r4, [pc, #28]	; (38dd4 <interface_socket_free+0x28>)
   38db6:	eb00 00c0 	add.w	r0, r0, r0, lsl #3
   38dba:	eb04 0480 	add.w	r4, r4, r0, lsl #2
   38dbe:	69e0      	ldr	r0, [r4, #28]
   38dc0:	b108      	cbz	r0, 38dc6 <interface_socket_free+0x1a>
   38dc2:	f001 ffb9 	bl	3ad38 <packet_handler_delete>
   38dc6:	4620      	mov	r0, r4
   38dc8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   38dcc:	2224      	movs	r2, #36	; 0x24
   38dce:	2100      	movs	r1, #0
   38dd0:	f00c b878 	b.w	44ec4 <memset>
   38dd4:	2002b4ec 	.word	0x2002b4ec

00038dd8 <interface_socket_packet_handler_update>:
   38dd8:	2808      	cmp	r0, #8
   38dda:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   38dde:	d81e      	bhi.n	38e1e <interface_socket_packet_handler_update+0x46>
   38de0:	ea4f 08c0 	mov.w	r8, r0, lsl #3
   38de4:	4e17      	ldr	r6, [pc, #92]	; (38e44 <interface_socket_packet_handler_update+0x6c>)
   38de6:	eb08 0300 	add.w	r3, r8, r0
   38dea:	009b      	lsls	r3, r3, #2
   38dec:	58f4      	ldr	r4, [r6, r3]
   38dee:	18f5      	adds	r5, r6, r3
   38df0:	b1ac      	cbz	r4, 38e1e <interface_socket_packet_handler_update+0x46>
   38df2:	460b      	mov	r3, r1
   38df4:	4604      	mov	r4, r0
   38df6:	4611      	mov	r1, r2
   38df8:	4618      	mov	r0, r3
   38dfa:	462a      	mov	r2, r5
   38dfc:	f8d5 901c 	ldr.w	r9, [r5, #28]
   38e00:	f001 ff7a 	bl	3acf8 <packet_handler_create>
   38e04:	61e8      	str	r0, [r5, #28]
   38e06:	b1d0      	cbz	r0, 38e3e <interface_socket_packet_handler_update+0x66>
   38e08:	6803      	ldr	r3, [r0, #0]
   38e0a:	681b      	ldr	r3, [r3, #0]
   38e0c:	4798      	blx	r3
   38e0e:	4607      	mov	r7, r0
   38e10:	b948      	cbnz	r0, 38e26 <interface_socket_packet_handler_update+0x4e>
   38e12:	4648      	mov	r0, r9
   38e14:	f001 ff90 	bl	3ad38 <packet_handler_delete>
   38e18:	4638      	mov	r0, r7
   38e1a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   38e1e:	2705      	movs	r7, #5
   38e20:	4638      	mov	r0, r7
   38e22:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   38e26:	69e8      	ldr	r0, [r5, #28]
   38e28:	f001 ff86 	bl	3ad38 <packet_handler_delete>
   38e2c:	eb08 0004 	add.w	r0, r8, r4
   38e30:	eb06 0680 	add.w	r6, r6, r0, lsl #2
   38e34:	f8c6 901c 	str.w	r9, [r6, #28]
   38e38:	4638      	mov	r0, r7
   38e3a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   38e3e:	2704      	movs	r7, #4
   38e40:	e7f4      	b.n	38e2c <interface_socket_packet_handler_update+0x54>
   38e42:	bf00      	nop
   38e44:	2002b4ec 	.word	0x2002b4ec

00038e48 <interface_socket_wait>:
   38e48:	b5f0      	push	{r4, r5, r6, r7, lr}
   38e4a:	eb00 00c0 	add.w	r0, r0, r0, lsl #3
   38e4e:	4c0e      	ldr	r4, [pc, #56]	; (38e88 <interface_socket_wait+0x40>)
   38e50:	0080      	lsls	r0, r0, #2
   38e52:	5825      	ldr	r5, [r4, r0]
   38e54:	b083      	sub	sp, #12
   38e56:	4015      	ands	r5, r2
   38e58:	428d      	cmp	r5, r1
   38e5a:	9301      	str	r3, [sp, #4]
   38e5c:	4404      	add	r4, r0
   38e5e:	d010      	beq.n	38e82 <interface_socket_wait+0x3a>
   38e60:	6863      	ldr	r3, [r4, #4]
   38e62:	b973      	cbnz	r3, 38e82 <interface_socket_wait+0x3a>
   38e64:	460f      	mov	r7, r1
   38e66:	4616      	mov	r6, r2
   38e68:	4625      	mov	r5, r4
   38e6a:	e006      	b.n	38e7a <interface_socket_wait+0x32>
   38e6c:	686b      	ldr	r3, [r5, #4]
   38e6e:	b943      	cbnz	r3, 38e82 <interface_socket_wait+0x3a>
   38e70:	a901      	add	r1, sp, #4
   38e72:	4620      	mov	r0, r4
   38e74:	f7f7 f8fa 	bl	3006c <bsd_os_timedwait>
   38e78:	b920      	cbnz	r0, 38e84 <interface_socket_wait+0x3c>
   38e7a:	682b      	ldr	r3, [r5, #0]
   38e7c:	4033      	ands	r3, r6
   38e7e:	42bb      	cmp	r3, r7
   38e80:	d1f4      	bne.n	38e6c <interface_socket_wait+0x24>
   38e82:	2000      	movs	r0, #0
   38e84:	b003      	add	sp, #12
   38e86:	bdf0      	pop	{r4, r5, r6, r7, pc}
   38e88:	2002b4ec 	.word	0x2002b4ec

00038e8c <interface_from_internal_id_search>:
   38e8c:	4b27      	ldr	r3, [pc, #156]	; (38f2c <interface_from_internal_id_search+0xa0>)
   38e8e:	681a      	ldr	r2, [r3, #0]
   38e90:	b112      	cbz	r2, 38e98 <interface_from_internal_id_search+0xc>
   38e92:	699a      	ldr	r2, [r3, #24]
   38e94:	4282      	cmp	r2, r0
   38e96:	d039      	beq.n	38f0c <interface_from_internal_id_search+0x80>
   38e98:	6a5a      	ldr	r2, [r3, #36]	; 0x24
   38e9a:	b112      	cbz	r2, 38ea2 <interface_from_internal_id_search+0x16>
   38e9c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
   38e9e:	4282      	cmp	r2, r0
   38ea0:	d036      	beq.n	38f10 <interface_from_internal_id_search+0x84>
   38ea2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
   38ea4:	b112      	cbz	r2, 38eac <interface_from_internal_id_search+0x20>
   38ea6:	6e1a      	ldr	r2, [r3, #96]	; 0x60
   38ea8:	4282      	cmp	r2, r0
   38eaa:	d033      	beq.n	38f14 <interface_from_internal_id_search+0x88>
   38eac:	6eda      	ldr	r2, [r3, #108]	; 0x6c
   38eae:	b11a      	cbz	r2, 38eb8 <interface_from_internal_id_search+0x2c>
   38eb0:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
   38eb4:	4282      	cmp	r2, r0
   38eb6:	d02f      	beq.n	38f18 <interface_from_internal_id_search+0x8c>
   38eb8:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
   38ebc:	b11a      	cbz	r2, 38ec6 <interface_from_internal_id_search+0x3a>
   38ebe:	f8d3 20a8 	ldr.w	r2, [r3, #168]	; 0xa8
   38ec2:	4282      	cmp	r2, r0
   38ec4:	d02a      	beq.n	38f1c <interface_from_internal_id_search+0x90>
   38ec6:	f8d3 20b4 	ldr.w	r2, [r3, #180]	; 0xb4
   38eca:	b11a      	cbz	r2, 38ed4 <interface_from_internal_id_search+0x48>
   38ecc:	f8d3 20cc 	ldr.w	r2, [r3, #204]	; 0xcc
   38ed0:	4282      	cmp	r2, r0
   38ed2:	d025      	beq.n	38f20 <interface_from_internal_id_search+0x94>
   38ed4:	f8d3 20d8 	ldr.w	r2, [r3, #216]	; 0xd8
   38ed8:	b11a      	cbz	r2, 38ee2 <interface_from_internal_id_search+0x56>
   38eda:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
   38ede:	4282      	cmp	r2, r0
   38ee0:	d020      	beq.n	38f24 <interface_from_internal_id_search+0x98>
   38ee2:	f8d3 20fc 	ldr.w	r2, [r3, #252]	; 0xfc
   38ee6:	b11a      	cbz	r2, 38ef0 <interface_from_internal_id_search+0x64>
   38ee8:	f8d3 2114 	ldr.w	r2, [r3, #276]	; 0x114
   38eec:	4282      	cmp	r2, r0
   38eee:	d01b      	beq.n	38f28 <interface_from_internal_id_search+0x9c>
   38ef0:	f8d3 2120 	ldr.w	r2, [r3, #288]	; 0x120
   38ef4:	b13a      	cbz	r2, 38f06 <interface_from_internal_id_search+0x7a>
   38ef6:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
   38efa:	4283      	cmp	r3, r0
   38efc:	bf14      	ite	ne
   38efe:	f04f 30ff 	movne.w	r0, #4294967295
   38f02:	2008      	moveq	r0, #8
   38f04:	4770      	bx	lr
   38f06:	f04f 30ff 	mov.w	r0, #4294967295
   38f0a:	4770      	bx	lr
   38f0c:	2000      	movs	r0, #0
   38f0e:	4770      	bx	lr
   38f10:	2001      	movs	r0, #1
   38f12:	4770      	bx	lr
   38f14:	2002      	movs	r0, #2
   38f16:	4770      	bx	lr
   38f18:	2003      	movs	r0, #3
   38f1a:	4770      	bx	lr
   38f1c:	2004      	movs	r0, #4
   38f1e:	4770      	bx	lr
   38f20:	2005      	movs	r0, #5
   38f22:	4770      	bx	lr
   38f24:	2006      	movs	r0, #6
   38f26:	4770      	bx	lr
   38f28:	2007      	movs	r0, #7
   38f2a:	4770      	bx	lr
   38f2c:	2002b4ec 	.word	0x2002b4ec

00038f30 <interface_socket_from_handle_get>:
   38f30:	2808      	cmp	r0, #8
   38f32:	d807      	bhi.n	38f44 <interface_socket_from_handle_get+0x14>
   38f34:	eb00 00c0 	add.w	r0, r0, r0, lsl #3
   38f38:	4b03      	ldr	r3, [pc, #12]	; (38f48 <interface_socket_from_handle_get+0x18>)
   38f3a:	0080      	lsls	r0, r0, #2
   38f3c:	581a      	ldr	r2, [r3, r0]
   38f3e:	b10a      	cbz	r2, 38f44 <interface_socket_from_handle_get+0x14>
   38f40:	4418      	add	r0, r3
   38f42:	4770      	bx	lr
   38f44:	2000      	movs	r0, #0
   38f46:	4770      	bx	lr
   38f48:	2002b4ec 	.word	0x2002b4ec

00038f4c <interface_socket_event_get>:
   38f4c:	b119      	cbz	r1, 38f56 <interface_socket_event_get+0xa>
   38f4e:	2808      	cmp	r0, #8
   38f50:	d902      	bls.n	38f58 <interface_socket_event_get+0xc>
   38f52:	2310      	movs	r3, #16
   38f54:	600b      	str	r3, [r1, #0]
   38f56:	4770      	bx	lr
   38f58:	eb00 00c0 	add.w	r0, r0, r0, lsl #3
   38f5c:	4b07      	ldr	r3, [pc, #28]	; (38f7c <interface_socket_event_get+0x30>)
   38f5e:	0080      	lsls	r0, r0, #2
   38f60:	581a      	ldr	r2, [r3, r0]
   38f62:	2a00      	cmp	r2, #0
   38f64:	d0f5      	beq.n	38f52 <interface_socket_event_get+0x6>
   38f66:	581b      	ldr	r3, [r3, r0]
   38f68:	0c1b      	lsrs	r3, r3, #16
   38f6a:	f003 020a 	and.w	r2, r3, #10
   38f6e:	2a0a      	cmp	r2, #10
   38f70:	bf14      	ite	ne
   38f72:	f003 030f 	andne.w	r3, r3, #15
   38f76:	f003 030d 	andeq.w	r3, r3, #13
   38f7a:	e7eb      	b.n	38f54 <interface_socket_event_get+0x8>
   38f7c:	2002b4ec 	.word	0x2002b4ec

00038f80 <interface_socket_setopt>:
   38f80:	2808      	cmp	r0, #8
   38f82:	b538      	push	{r3, r4, r5, lr}
   38f84:	d82d      	bhi.n	38fe2 <interface_socket_setopt+0x62>
   38f86:	eb00 00c0 	add.w	r0, r0, r0, lsl #3
   38f8a:	4c1c      	ldr	r4, [pc, #112]	; (38ffc <interface_socket_setopt+0x7c>)
   38f8c:	0080      	lsls	r0, r0, #2
   38f8e:	461d      	mov	r5, r3
   38f90:	5823      	ldr	r3, [r4, r0]
   38f92:	b333      	cbz	r3, 38fe2 <interface_socket_setopt+0x62>
   38f94:	2901      	cmp	r1, #1
   38f96:	d11e      	bne.n	38fd6 <interface_socket_setopt+0x56>
   38f98:	2a14      	cmp	r2, #20
   38f9a:	d11c      	bne.n	38fd6 <interface_socket_setopt+0x56>
   38f9c:	b1ad      	cbz	r5, 38fca <interface_socket_setopt+0x4a>
   38f9e:	9b04      	ldr	r3, [sp, #16]
   38fa0:	2b08      	cmp	r3, #8
   38fa2:	d112      	bne.n	38fca <interface_socket_setopt+0x4a>
   38fa4:	686a      	ldr	r2, [r5, #4]
   38fa6:	4b16      	ldr	r3, [pc, #88]	; (39000 <interface_socket_setopt+0x80>)
   38fa8:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   38fac:	fba3 3202 	umull	r3, r2, r3, r2
   38fb0:	2300      	movs	r3, #0
   38fb2:	682d      	ldr	r5, [r5, #0]
   38fb4:	0992      	lsrs	r2, r2, #6
   38fb6:	fbe1 2305 	umlal	r2, r3, r1, r5
   38fba:	2b01      	cmp	r3, #1
   38fbc:	bf08      	it	eq
   38fbe:	2a00      	cmpeq	r2, #0
   38fc0:	d215      	bcs.n	38fee <interface_socket_setopt+0x6e>
   38fc2:	4420      	add	r0, r4
   38fc4:	6202      	str	r2, [r0, #32]
   38fc6:	2000      	movs	r0, #0
   38fc8:	bd38      	pop	{r3, r4, r5, pc}
   38fca:	2016      	movs	r0, #22
   38fcc:	f7f7 f8e2 	bl	30194 <bsd_os_errno_set>
   38fd0:	f04f 30ff 	mov.w	r0, #4294967295
   38fd4:	bd38      	pop	{r3, r4, r5, pc}
   38fd6:	202a      	movs	r0, #42	; 0x2a
   38fd8:	f7f7 f8dc 	bl	30194 <bsd_os_errno_set>
   38fdc:	f04f 30ff 	mov.w	r0, #4294967295
   38fe0:	bd38      	pop	{r3, r4, r5, pc}
   38fe2:	2009      	movs	r0, #9
   38fe4:	f7f7 f8d6 	bl	30194 <bsd_os_errno_set>
   38fe8:	f04f 30ff 	mov.w	r0, #4294967295
   38fec:	bd38      	pop	{r3, r4, r5, pc}
   38fee:	2025      	movs	r0, #37	; 0x25
   38ff0:	f7f7 f8d0 	bl	30194 <bsd_os_errno_set>
   38ff4:	f04f 30ff 	mov.w	r0, #4294967295
   38ff8:	bd38      	pop	{r3, r4, r5, pc}
   38ffa:	bf00      	nop
   38ffc:	2002b4ec 	.word	0x2002b4ec
   39000:	10624dd3 	.word	0x10624dd3

00039004 <interface_socket_getopt>:
   39004:	b570      	push	{r4, r5, r6, lr}
   39006:	2808      	cmp	r0, #8
   39008:	9d04      	ldr	r5, [sp, #16]
   3900a:	d821      	bhi.n	39050 <interface_socket_getopt+0x4c>
   3900c:	4c13      	ldr	r4, [pc, #76]	; (3905c <interface_socket_getopt+0x58>)
   3900e:	eb00 00c0 	add.w	r0, r0, r0, lsl #3
   39012:	0080      	lsls	r0, r0, #2
   39014:	5826      	ldr	r6, [r4, r0]
   39016:	4404      	add	r4, r0
   39018:	b1d6      	cbz	r6, 39050 <interface_socket_getopt+0x4c>
   3901a:	2901      	cmp	r1, #1
   3901c:	d112      	bne.n	39044 <interface_socket_getopt+0x40>
   3901e:	2a04      	cmp	r2, #4
   39020:	d110      	bne.n	39044 <interface_socket_getopt+0x40>
   39022:	b14b      	cbz	r3, 39038 <interface_socket_getopt+0x34>
   39024:	b145      	cbz	r5, 39038 <interface_socket_getopt+0x34>
   39026:	682a      	ldr	r2, [r5, #0]
   39028:	2a04      	cmp	r2, #4
   3902a:	d105      	bne.n	39038 <interface_socket_getopt+0x34>
   3902c:	2200      	movs	r2, #0
   3902e:	6861      	ldr	r1, [r4, #4]
   39030:	4610      	mov	r0, r2
   39032:	6019      	str	r1, [r3, #0]
   39034:	6062      	str	r2, [r4, #4]
   39036:	bd70      	pop	{r4, r5, r6, pc}
   39038:	2016      	movs	r0, #22
   3903a:	f7f7 f8ab 	bl	30194 <bsd_os_errno_set>
   3903e:	f04f 30ff 	mov.w	r0, #4294967295
   39042:	bd70      	pop	{r4, r5, r6, pc}
   39044:	202a      	movs	r0, #42	; 0x2a
   39046:	f7f7 f8a5 	bl	30194 <bsd_os_errno_set>
   3904a:	f04f 30ff 	mov.w	r0, #4294967295
   3904e:	bd70      	pop	{r4, r5, r6, pc}
   39050:	2009      	movs	r0, #9
   39052:	f7f7 f89f 	bl	30194 <bsd_os_errno_set>
   39056:	f04f 30ff 	mov.w	r0, #4294967295
   3905a:	bd70      	pop	{r4, r5, r6, pc}
   3905c:	2002b4ec 	.word	0x2002b4ec

00039060 <interface_socket_fcntl>:
   39060:	2808      	cmp	r0, #8
   39062:	b510      	push	{r4, lr}
   39064:	d818      	bhi.n	39098 <interface_socket_fcntl+0x38>
   39066:	eb00 00c0 	add.w	r0, r0, r0, lsl #3
   3906a:	4c11      	ldr	r4, [pc, #68]	; (390b0 <interface_socket_fcntl+0x50>)
   3906c:	0083      	lsls	r3, r0, #2
   3906e:	58e0      	ldr	r0, [r4, r3]
   39070:	b190      	cbz	r0, 39098 <interface_socket_fcntl+0x38>
   39072:	2901      	cmp	r1, #1
   39074:	d005      	beq.n	39082 <interface_socket_fcntl+0x22>
   39076:	2902      	cmp	r1, #2
   39078:	d114      	bne.n	390a4 <interface_socket_fcntl+0x44>
   3907a:	58e0      	ldr	r0, [r4, r3]
   3907c:	f3c0 7000 	ubfx	r0, r0, #28, #1
   39080:	bd10      	pop	{r4, pc}
   39082:	f012 0001 	ands.w	r0, r2, #1
   39086:	58e2      	ldr	r2, [r4, r3]
   39088:	bf1a      	itte	ne
   3908a:	2000      	movne	r0, #0
   3908c:	f042 5280 	orrne.w	r2, r2, #268435456	; 0x10000000
   39090:	f022 5280 	biceq.w	r2, r2, #268435456	; 0x10000000
   39094:	50e2      	str	r2, [r4, r3]
   39096:	bd10      	pop	{r4, pc}
   39098:	2009      	movs	r0, #9
   3909a:	f7f7 f87b 	bl	30194 <bsd_os_errno_set>
   3909e:	f04f 30ff 	mov.w	r0, #4294967295
   390a2:	bd10      	pop	{r4, pc}
   390a4:	2016      	movs	r0, #22
   390a6:	f7f7 f875 	bl	30194 <bsd_os_errno_set>
   390aa:	f04f 30ff 	mov.w	r0, #4294967295
   390ae:	bd10      	pop	{r4, pc}
   390b0:	2002b4ec 	.word	0x2002b4ec

000390b4 <bsd_os_application_irq_handler>:
   390b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   390b8:	4c33      	ldr	r4, [pc, #204]	; (39188 <bsd_os_application_irq_handler+0xd4>)
   390ba:	f7f7 f971 	bl	303a0 <bsd_os_application_irq_clear>
   390be:	f04f 0803 	mov.w	r8, #3
   390c2:	4d32      	ldr	r5, [pc, #200]	; (3918c <bsd_os_application_irq_handler+0xd8>)
   390c4:	4f32      	ldr	r7, [pc, #200]	; (39190 <bsd_os_application_irq_handler+0xdc>)
   390c6:	f104 0680 	add.w	r6, r4, #128	; 0x80
   390ca:	e004      	b.n	390d6 <bsd_os_application_irq_handler+0x22>
   390cc:	2b04      	cmp	r3, #4
   390ce:	d006      	beq.n	390de <bsd_os_application_irq_handler+0x2a>
   390d0:	3408      	adds	r4, #8
   390d2:	42b4      	cmp	r4, r6
   390d4:	d03b      	beq.n	3914e <bsd_os_application_irq_handler+0x9a>
   390d6:	f814 3c04 	ldrb.w	r3, [r4, #-4]
   390da:	2b02      	cmp	r3, #2
   390dc:	d1f6      	bne.n	390cc <bsd_os_application_irq_handler+0x18>
   390de:	6820      	ldr	r0, [r4, #0]
   390e0:	882a      	ldrh	r2, [r5, #0]
   390e2:	6803      	ldr	r3, [r0, #0]
   390e4:	b29b      	uxth	r3, r3
   390e6:	429a      	cmp	r2, r3
   390e8:	d033      	beq.n	39152 <bsd_os_application_irq_handler+0x9e>
   390ea:	8a2a      	ldrh	r2, [r5, #16]
   390ec:	429a      	cmp	r2, r3
   390ee:	d032      	beq.n	39156 <bsd_os_application_irq_handler+0xa2>
   390f0:	8c2a      	ldrh	r2, [r5, #32]
   390f2:	429a      	cmp	r2, r3
   390f4:	d031      	beq.n	3915a <bsd_os_application_irq_handler+0xa6>
   390f6:	8e2a      	ldrh	r2, [r5, #48]	; 0x30
   390f8:	429a      	cmp	r2, r3
   390fa:	d030      	beq.n	3915e <bsd_os_application_irq_handler+0xaa>
   390fc:	f8b5 2040 	ldrh.w	r2, [r5, #64]	; 0x40
   39100:	429a      	cmp	r2, r3
   39102:	d036      	beq.n	39172 <bsd_os_application_irq_handler+0xbe>
   39104:	f8b5 2050 	ldrh.w	r2, [r5, #80]	; 0x50
   39108:	429a      	cmp	r2, r3
   3910a:	d034      	beq.n	39176 <bsd_os_application_irq_handler+0xc2>
   3910c:	f8b5 2060 	ldrh.w	r2, [r5, #96]	; 0x60
   39110:	429a      	cmp	r2, r3
   39112:	d032      	beq.n	3917a <bsd_os_application_irq_handler+0xc6>
   39114:	f8b5 2070 	ldrh.w	r2, [r5, #112]	; 0x70
   39118:	429a      	cmp	r2, r3
   3911a:	d030      	beq.n	3917e <bsd_os_application_irq_handler+0xca>
   3911c:	f8b5 2080 	ldrh.w	r2, [r5, #128]	; 0x80
   39120:	429a      	cmp	r2, r3
   39122:	d02e      	beq.n	39182 <bsd_os_application_irq_handler+0xce>
   39124:	f8b5 2090 	ldrh.w	r2, [r5, #144]	; 0x90
   39128:	429a      	cmp	r2, r3
   3912a:	bf08      	it	eq
   3912c:	2309      	moveq	r3, #9
   3912e:	d1cf      	bne.n	390d0 <bsd_os_application_irq_handler+0x1c>
   39130:	eb05 1303 	add.w	r3, r5, r3, lsl #4
   39134:	685a      	ldr	r2, [r3, #4]
   39136:	68d9      	ldr	r1, [r3, #12]
   39138:	4790      	blx	r2
   3913a:	b990      	cbnz	r0, 39162 <bsd_os_application_irq_handler+0xae>
   3913c:	2201      	movs	r2, #1
   3913e:	6820      	ldr	r0, [r4, #0]
   39140:	f804 2c04 	strb.w	r2, [r4, #-4]
   39144:	68fb      	ldr	r3, [r7, #12]
   39146:	3408      	adds	r4, #8
   39148:	4798      	blx	r3
   3914a:	42b4      	cmp	r4, r6
   3914c:	d1c3      	bne.n	390d6 <bsd_os_application_irq_handler+0x22>
   3914e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   39152:	2300      	movs	r3, #0
   39154:	e7ec      	b.n	39130 <bsd_os_application_irq_handler+0x7c>
   39156:	2301      	movs	r3, #1
   39158:	e7ea      	b.n	39130 <bsd_os_application_irq_handler+0x7c>
   3915a:	2302      	movs	r3, #2
   3915c:	e7e8      	b.n	39130 <bsd_os_application_irq_handler+0x7c>
   3915e:	2303      	movs	r3, #3
   39160:	e7e6      	b.n	39130 <bsd_os_application_irq_handler+0x7c>
   39162:	2802      	cmp	r0, #2
   39164:	bf0a      	itet	eq
   39166:	2304      	moveq	r3, #4
   39168:	f804 8c04 	strbne.w	r8, [r4, #-4]
   3916c:	f804 3c04 	strbeq.w	r3, [r4, #-4]
   39170:	e7ae      	b.n	390d0 <bsd_os_application_irq_handler+0x1c>
   39172:	2304      	movs	r3, #4
   39174:	e7dc      	b.n	39130 <bsd_os_application_irq_handler+0x7c>
   39176:	2305      	movs	r3, #5
   39178:	e7da      	b.n	39130 <bsd_os_application_irq_handler+0x7c>
   3917a:	2306      	movs	r3, #6
   3917c:	e7d8      	b.n	39130 <bsd_os_application_irq_handler+0x7c>
   3917e:	2307      	movs	r3, #7
   39180:	e7d6      	b.n	39130 <bsd_os_application_irq_handler+0x7c>
   39182:	2308      	movs	r3, #8
   39184:	e7d4      	b.n	39130 <bsd_os_application_irq_handler+0x7c>
   39186:	bf00      	nop
   39188:	200254b4 	.word	0x200254b4
   3918c:	20025378 	.word	0x20025378
   39190:	20025418 	.word	0x20025418

00039194 <rpc_framework_init>:
   39194:	b508      	push	{r3, lr}
   39196:	22a0      	movs	r2, #160	; 0xa0
   39198:	2100      	movs	r1, #0
   3919a:	4802      	ldr	r0, [pc, #8]	; (391a4 <rpc_framework_init+0x10>)
   3919c:	f00b fe92 	bl	44ec4 <memset>
   391a0:	2000      	movs	r0, #0
   391a2:	bd08      	pop	{r3, pc}
   391a4:	20025378 	.word	0x20025378

000391a8 <rpc_client_register>:
   391a8:	8803      	ldrh	r3, [r0, #0]
   391aa:	2b00      	cmp	r3, #0
   391ac:	d045      	beq.n	3923a <rpc_client_register+0x92>
   391ae:	6842      	ldr	r2, [r0, #4]
   391b0:	4601      	mov	r1, r0
   391b2:	2a00      	cmp	r2, #0
   391b4:	d050      	beq.n	39258 <rpc_client_register+0xb0>
   391b6:	4a30      	ldr	r2, [pc, #192]	; (39278 <rpc_client_register+0xd0>)
   391b8:	8810      	ldrh	r0, [r2, #0]
   391ba:	4283      	cmp	r3, r0
   391bc:	d03d      	beq.n	3923a <rpc_client_register+0x92>
   391be:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   391c2:	8a14      	ldrh	r4, [r2, #16]
   391c4:	42a3      	cmp	r3, r4
   391c6:	d035      	beq.n	39234 <rpc_client_register+0x8c>
   391c8:	8c15      	ldrh	r5, [r2, #32]
   391ca:	42ab      	cmp	r3, r5
   391cc:	d032      	beq.n	39234 <rpc_client_register+0x8c>
   391ce:	8e16      	ldrh	r6, [r2, #48]	; 0x30
   391d0:	42b3      	cmp	r3, r6
   391d2:	d02f      	beq.n	39234 <rpc_client_register+0x8c>
   391d4:	f8b2 7040 	ldrh.w	r7, [r2, #64]	; 0x40
   391d8:	42bb      	cmp	r3, r7
   391da:	d02b      	beq.n	39234 <rpc_client_register+0x8c>
   391dc:	f8b2 c050 	ldrh.w	ip, [r2, #80]	; 0x50
   391e0:	4563      	cmp	r3, ip
   391e2:	d027      	beq.n	39234 <rpc_client_register+0x8c>
   391e4:	f8b2 e060 	ldrh.w	lr, [r2, #96]	; 0x60
   391e8:	4573      	cmp	r3, lr
   391ea:	d023      	beq.n	39234 <rpc_client_register+0x8c>
   391ec:	f8b2 8070 	ldrh.w	r8, [r2, #112]	; 0x70
   391f0:	4543      	cmp	r3, r8
   391f2:	d01f      	beq.n	39234 <rpc_client_register+0x8c>
   391f4:	f8b2 9080 	ldrh.w	r9, [r2, #128]	; 0x80
   391f8:	454b      	cmp	r3, r9
   391fa:	d01b      	beq.n	39234 <rpc_client_register+0x8c>
   391fc:	f8b2 a090 	ldrh.w	sl, [r2, #144]	; 0x90
   39200:	4553      	cmp	r3, sl
   39202:	d017      	beq.n	39234 <rpc_client_register+0x8c>
   39204:	b1e0      	cbz	r0, 39240 <rpc_client_register+0x98>
   39206:	b35c      	cbz	r4, 39260 <rpc_client_register+0xb8>
   39208:	b365      	cbz	r5, 39264 <rpc_client_register+0xbc>
   3920a:	b36e      	cbz	r6, 39268 <rpc_client_register+0xc0>
   3920c:	b377      	cbz	r7, 3926c <rpc_client_register+0xc4>
   3920e:	f1bc 0f00 	cmp.w	ip, #0
   39212:	d02d      	beq.n	39270 <rpc_client_register+0xc8>
   39214:	f1be 0f00 	cmp.w	lr, #0
   39218:	d020      	beq.n	3925c <rpc_client_register+0xb4>
   3921a:	f1b8 0f00 	cmp.w	r8, #0
   3921e:	d029      	beq.n	39274 <rpc_client_register+0xcc>
   39220:	f1b9 0f00 	cmp.w	r9, #0
   39224:	d00b      	beq.n	3923e <rpc_client_register+0x96>
   39226:	2009      	movs	r0, #9
   39228:	f1ba 0f00 	cmp.w	sl, #0
   3922c:	d008      	beq.n	39240 <rpc_client_register+0x98>
   3922e:	2004      	movs	r0, #4
   39230:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   39234:	2007      	movs	r0, #7
   39236:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   3923a:	2007      	movs	r0, #7
   3923c:	4770      	bx	lr
   3923e:	2008      	movs	r0, #8
   39240:	0100      	lsls	r0, r0, #4
   39242:	5213      	strh	r3, [r2, r0]
   39244:	684b      	ldr	r3, [r1, #4]
   39246:	4402      	add	r2, r0
   39248:	6053      	str	r3, [r2, #4]
   3924a:	688b      	ldr	r3, [r1, #8]
   3924c:	2000      	movs	r0, #0
   3924e:	6093      	str	r3, [r2, #8]
   39250:	68cb      	ldr	r3, [r1, #12]
   39252:	60d3      	str	r3, [r2, #12]
   39254:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   39258:	200e      	movs	r0, #14
   3925a:	4770      	bx	lr
   3925c:	2006      	movs	r0, #6
   3925e:	e7ef      	b.n	39240 <rpc_client_register+0x98>
   39260:	2001      	movs	r0, #1
   39262:	e7ed      	b.n	39240 <rpc_client_register+0x98>
   39264:	2002      	movs	r0, #2
   39266:	e7eb      	b.n	39240 <rpc_client_register+0x98>
   39268:	2003      	movs	r0, #3
   3926a:	e7e9      	b.n	39240 <rpc_client_register+0x98>
   3926c:	2004      	movs	r0, #4
   3926e:	e7e7      	b.n	39240 <rpc_client_register+0x98>
   39270:	2005      	movs	r0, #5
   39272:	e7e5      	b.n	39240 <rpc_client_register+0x98>
   39274:	2007      	movs	r0, #7
   39276:	e7e3      	b.n	39240 <rpc_client_register+0x98>
   39278:	20025378 	.word	0x20025378

0003927c <rpc_transport_input>:
   3927c:	b538      	push	{r3, r4, r5, lr}
   3927e:	4a82      	ldr	r2, [pc, #520]	; (39488 <rpc_transport_input+0x20c>)
   39280:	680b      	ldr	r3, [r1, #0]
   39282:	8810      	ldrh	r0, [r2, #0]
   39284:	b29b      	uxth	r3, r3
   39286:	4298      	cmp	r0, r3
   39288:	d027      	beq.n	392da <rpc_transport_input+0x5e>
   3928a:	8a10      	ldrh	r0, [r2, #16]
   3928c:	4298      	cmp	r0, r3
   3928e:	d024      	beq.n	392da <rpc_transport_input+0x5e>
   39290:	8c10      	ldrh	r0, [r2, #32]
   39292:	4298      	cmp	r0, r3
   39294:	d021      	beq.n	392da <rpc_transport_input+0x5e>
   39296:	8e10      	ldrh	r0, [r2, #48]	; 0x30
   39298:	4298      	cmp	r0, r3
   3929a:	d01e      	beq.n	392da <rpc_transport_input+0x5e>
   3929c:	f8b2 0040 	ldrh.w	r0, [r2, #64]	; 0x40
   392a0:	4298      	cmp	r0, r3
   392a2:	d01a      	beq.n	392da <rpc_transport_input+0x5e>
   392a4:	f8b2 0050 	ldrh.w	r0, [r2, #80]	; 0x50
   392a8:	4298      	cmp	r0, r3
   392aa:	d016      	beq.n	392da <rpc_transport_input+0x5e>
   392ac:	f8b2 0060 	ldrh.w	r0, [r2, #96]	; 0x60
   392b0:	4298      	cmp	r0, r3
   392b2:	d012      	beq.n	392da <rpc_transport_input+0x5e>
   392b4:	f8b2 0070 	ldrh.w	r0, [r2, #112]	; 0x70
   392b8:	4298      	cmp	r0, r3
   392ba:	d00e      	beq.n	392da <rpc_transport_input+0x5e>
   392bc:	f8b2 0080 	ldrh.w	r0, [r2, #128]	; 0x80
   392c0:	4298      	cmp	r0, r3
   392c2:	d00a      	beq.n	392da <rpc_transport_input+0x5e>
   392c4:	f8b2 2090 	ldrh.w	r2, [r2, #144]	; 0x90
   392c8:	429a      	cmp	r2, r3
   392ca:	d006      	beq.n	392da <rpc_transport_input+0x5e>
   392cc:	6888      	ldr	r0, [r1, #8]
   392ce:	b118      	cbz	r0, 392d8 <rpc_transport_input+0x5c>
   392d0:	4b6e      	ldr	r3, [pc, #440]	; (3948c <rpc_transport_input+0x210>)
   392d2:	691b      	ldr	r3, [r3, #16]
   392d4:	4798      	blx	r3
   392d6:	2000      	movs	r0, #0
   392d8:	bd38      	pop	{r3, r4, r5, pc}
   392da:	6888      	ldr	r0, [r1, #8]
   392dc:	2800      	cmp	r0, #0
   392de:	f000 8098 	beq.w	39412 <rpc_transport_input+0x196>
   392e2:	4a6b      	ldr	r2, [pc, #428]	; (39490 <rpc_transport_input+0x214>)
   392e4:	6814      	ldr	r4, [r2, #0]
   392e6:	2c00      	cmp	r4, #0
   392e8:	d03c      	beq.n	39364 <rpc_transport_input+0xe8>
   392ea:	6894      	ldr	r4, [r2, #8]
   392ec:	2c00      	cmp	r4, #0
   392ee:	f000 809a 	beq.w	39426 <rpc_transport_input+0x1aa>
   392f2:	6914      	ldr	r4, [r2, #16]
   392f4:	2c00      	cmp	r4, #0
   392f6:	f000 809a 	beq.w	3942e <rpc_transport_input+0x1b2>
   392fa:	6994      	ldr	r4, [r2, #24]
   392fc:	2c00      	cmp	r4, #0
   392fe:	f000 809a 	beq.w	39436 <rpc_transport_input+0x1ba>
   39302:	6a14      	ldr	r4, [r2, #32]
   39304:	2c00      	cmp	r4, #0
   39306:	f000 809a 	beq.w	3943e <rpc_transport_input+0x1c2>
   3930a:	6a94      	ldr	r4, [r2, #40]	; 0x28
   3930c:	2c00      	cmp	r4, #0
   3930e:	f000 8084 	beq.w	3941a <rpc_transport_input+0x19e>
   39312:	6b14      	ldr	r4, [r2, #48]	; 0x30
   39314:	2c00      	cmp	r4, #0
   39316:	f000 8098 	beq.w	3944a <rpc_transport_input+0x1ce>
   3931a:	6b94      	ldr	r4, [r2, #56]	; 0x38
   3931c:	2c00      	cmp	r4, #0
   3931e:	f000 8096 	beq.w	3944e <rpc_transport_input+0x1d2>
   39322:	6c14      	ldr	r4, [r2, #64]	; 0x40
   39324:	2c00      	cmp	r4, #0
   39326:	f000 8096 	beq.w	39456 <rpc_transport_input+0x1da>
   3932a:	6c94      	ldr	r4, [r2, #72]	; 0x48
   3932c:	2c00      	cmp	r4, #0
   3932e:	f000 8096 	beq.w	3945e <rpc_transport_input+0x1e2>
   39332:	6d14      	ldr	r4, [r2, #80]	; 0x50
   39334:	2c00      	cmp	r4, #0
   39336:	f000 8096 	beq.w	39466 <rpc_transport_input+0x1ea>
   3933a:	6d94      	ldr	r4, [r2, #88]	; 0x58
   3933c:	2c00      	cmp	r4, #0
   3933e:	f000 8098 	beq.w	39472 <rpc_transport_input+0x1f6>
   39342:	6e14      	ldr	r4, [r2, #96]	; 0x60
   39344:	2c00      	cmp	r4, #0
   39346:	f000 8098 	beq.w	3947a <rpc_transport_input+0x1fe>
   3934a:	6e94      	ldr	r4, [r2, #104]	; 0x68
   3934c:	2c00      	cmp	r4, #0
   3934e:	f000 8096 	beq.w	3947e <rpc_transport_input+0x202>
   39352:	6f14      	ldr	r4, [r2, #112]	; 0x70
   39354:	2c00      	cmp	r4, #0
   39356:	f000 8094 	beq.w	39482 <rpc_transport_input+0x206>
   3935a:	6f94      	ldr	r4, [r2, #120]	; 0x78
   3935c:	b10c      	cbz	r4, 39362 <rpc_transport_input+0xe6>
   3935e:	2001      	movs	r0, #1
   39360:	bd38      	pop	{r3, r4, r5, pc}
   39362:	240f      	movs	r4, #15
   39364:	eb02 05c4 	add.w	r5, r2, r4, lsl #3
   39368:	f842 0034 	str.w	r0, [r2, r4, lsl #3]
   3936c:	80ab      	strh	r3, [r5, #4]
   3936e:	4b49      	ldr	r3, [pc, #292]	; (39494 <rpc_transport_input+0x218>)
   39370:	781a      	ldrb	r2, [r3, #0]
   39372:	2a01      	cmp	r2, #1
   39374:	d053      	beq.n	3941e <rpc_transport_input+0x1a2>
   39376:	7a1a      	ldrb	r2, [r3, #8]
   39378:	2a01      	cmp	r2, #1
   3937a:	d041      	beq.n	39400 <rpc_transport_input+0x184>
   3937c:	7c1a      	ldrb	r2, [r3, #16]
   3937e:	2a01      	cmp	r2, #1
   39380:	d04f      	beq.n	39422 <rpc_transport_input+0x1a6>
   39382:	7e1a      	ldrb	r2, [r3, #24]
   39384:	2a01      	cmp	r2, #1
   39386:	d050      	beq.n	3942a <rpc_transport_input+0x1ae>
   39388:	f893 2020 	ldrb.w	r2, [r3, #32]
   3938c:	2a01      	cmp	r2, #1
   3938e:	d050      	beq.n	39432 <rpc_transport_input+0x1b6>
   39390:	f893 2028 	ldrb.w	r2, [r3, #40]	; 0x28
   39394:	2a01      	cmp	r2, #1
   39396:	d050      	beq.n	3943a <rpc_transport_input+0x1be>
   39398:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
   3939c:	2a01      	cmp	r2, #1
   3939e:	d03a      	beq.n	39416 <rpc_transport_input+0x19a>
   393a0:	f893 2038 	ldrb.w	r2, [r3, #56]	; 0x38
   393a4:	2a01      	cmp	r2, #1
   393a6:	d04c      	beq.n	39442 <rpc_transport_input+0x1c6>
   393a8:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
   393ac:	2a01      	cmp	r2, #1
   393ae:	d04a      	beq.n	39446 <rpc_transport_input+0x1ca>
   393b0:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
   393b4:	2a01      	cmp	r2, #1
   393b6:	d04c      	beq.n	39452 <rpc_transport_input+0x1d6>
   393b8:	f893 2050 	ldrb.w	r2, [r3, #80]	; 0x50
   393bc:	2a01      	cmp	r2, #1
   393be:	d04c      	beq.n	3945a <rpc_transport_input+0x1de>
   393c0:	f893 2058 	ldrb.w	r2, [r3, #88]	; 0x58
   393c4:	2a01      	cmp	r2, #1
   393c6:	d04c      	beq.n	39462 <rpc_transport_input+0x1e6>
   393c8:	f893 2060 	ldrb.w	r2, [r3, #96]	; 0x60
   393cc:	2a01      	cmp	r2, #1
   393ce:	d04c      	beq.n	3946a <rpc_transport_input+0x1ee>
   393d0:	f893 2068 	ldrb.w	r2, [r3, #104]	; 0x68
   393d4:	2a01      	cmp	r2, #1
   393d6:	d04a      	beq.n	3946e <rpc_transport_input+0x1f2>
   393d8:	f893 2070 	ldrb.w	r2, [r3, #112]	; 0x70
   393dc:	2a01      	cmp	r2, #1
   393de:	d04a      	beq.n	39476 <rpc_transport_input+0x1fa>
   393e0:	f893 2078 	ldrb.w	r2, [r3, #120]	; 0x78
   393e4:	2a01      	cmp	r2, #1
   393e6:	d00a      	beq.n	393fe <rpc_transport_input+0x182>
   393e8:	2c10      	cmp	r4, #16
   393ea:	d0b8      	beq.n	3935e <rpc_transport_input+0xe2>
   393ec:	2200      	movs	r2, #0
   393ee:	4b28      	ldr	r3, [pc, #160]	; (39490 <rpc_transport_input+0x214>)
   393f0:	2001      	movs	r0, #1
   393f2:	eb03 01c4 	add.w	r1, r3, r4, lsl #3
   393f6:	808a      	strh	r2, [r1, #4]
   393f8:	f843 2034 	str.w	r2, [r3, r4, lsl #3]
   393fc:	bd38      	pop	{r3, r4, r5, pc}
   393fe:	220f      	movs	r2, #15
   39400:	2402      	movs	r4, #2
   39402:	eb03 00c2 	add.w	r0, r3, r2, lsl #3
   39406:	f803 4032 	strb.w	r4, [r3, r2, lsl #3]
   3940a:	6041      	str	r1, [r0, #4]
   3940c:	f7f6 ffc0 	bl	30390 <bsd_os_application_irq_set>
   39410:	e7a5      	b.n	3935e <rpc_transport_input+0xe2>
   39412:	2410      	movs	r4, #16
   39414:	e7ab      	b.n	3936e <rpc_transport_input+0xf2>
   39416:	2206      	movs	r2, #6
   39418:	e7f2      	b.n	39400 <rpc_transport_input+0x184>
   3941a:	2405      	movs	r4, #5
   3941c:	e7a2      	b.n	39364 <rpc_transport_input+0xe8>
   3941e:	2200      	movs	r2, #0
   39420:	e7ee      	b.n	39400 <rpc_transport_input+0x184>
   39422:	2202      	movs	r2, #2
   39424:	e7ec      	b.n	39400 <rpc_transport_input+0x184>
   39426:	2401      	movs	r4, #1
   39428:	e79c      	b.n	39364 <rpc_transport_input+0xe8>
   3942a:	2203      	movs	r2, #3
   3942c:	e7e8      	b.n	39400 <rpc_transport_input+0x184>
   3942e:	2402      	movs	r4, #2
   39430:	e798      	b.n	39364 <rpc_transport_input+0xe8>
   39432:	2204      	movs	r2, #4
   39434:	e7e4      	b.n	39400 <rpc_transport_input+0x184>
   39436:	2403      	movs	r4, #3
   39438:	e794      	b.n	39364 <rpc_transport_input+0xe8>
   3943a:	2205      	movs	r2, #5
   3943c:	e7e0      	b.n	39400 <rpc_transport_input+0x184>
   3943e:	2404      	movs	r4, #4
   39440:	e790      	b.n	39364 <rpc_transport_input+0xe8>
   39442:	2207      	movs	r2, #7
   39444:	e7dc      	b.n	39400 <rpc_transport_input+0x184>
   39446:	2208      	movs	r2, #8
   39448:	e7da      	b.n	39400 <rpc_transport_input+0x184>
   3944a:	2406      	movs	r4, #6
   3944c:	e78a      	b.n	39364 <rpc_transport_input+0xe8>
   3944e:	2407      	movs	r4, #7
   39450:	e788      	b.n	39364 <rpc_transport_input+0xe8>
   39452:	2209      	movs	r2, #9
   39454:	e7d4      	b.n	39400 <rpc_transport_input+0x184>
   39456:	2408      	movs	r4, #8
   39458:	e784      	b.n	39364 <rpc_transport_input+0xe8>
   3945a:	220a      	movs	r2, #10
   3945c:	e7d0      	b.n	39400 <rpc_transport_input+0x184>
   3945e:	2409      	movs	r4, #9
   39460:	e780      	b.n	39364 <rpc_transport_input+0xe8>
   39462:	220b      	movs	r2, #11
   39464:	e7cc      	b.n	39400 <rpc_transport_input+0x184>
   39466:	240a      	movs	r4, #10
   39468:	e77c      	b.n	39364 <rpc_transport_input+0xe8>
   3946a:	220c      	movs	r2, #12
   3946c:	e7c8      	b.n	39400 <rpc_transport_input+0x184>
   3946e:	220d      	movs	r2, #13
   39470:	e7c6      	b.n	39400 <rpc_transport_input+0x184>
   39472:	240b      	movs	r4, #11
   39474:	e776      	b.n	39364 <rpc_transport_input+0xe8>
   39476:	220e      	movs	r2, #14
   39478:	e7c2      	b.n	39400 <rpc_transport_input+0x184>
   3947a:	240c      	movs	r4, #12
   3947c:	e772      	b.n	39364 <rpc_transport_input+0xe8>
   3947e:	240d      	movs	r4, #13
   39480:	e770      	b.n	39364 <rpc_transport_input+0xe8>
   39482:	240e      	movs	r4, #14
   39484:	e76e      	b.n	39364 <rpc_transport_input+0xe8>
   39486:	bf00      	nop
   39488:	20025378 	.word	0x20025378
   3948c:	20025418 	.word	0x20025418
   39490:	20025430 	.word	0x20025430
   39494:	200254b0 	.word	0x200254b0

00039498 <rpc_transport_register>:
   39498:	b4f0      	push	{r4, r5, r6, r7}
   3949a:	2900      	cmp	r1, #0
   3949c:	d052      	beq.n	39544 <rpc_transport_register+0xac>
   3949e:	2800      	cmp	r0, #0
   394a0:	d050      	beq.n	39544 <rpc_transport_register+0xac>
   394a2:	6883      	ldr	r3, [r0, #8]
   394a4:	2b00      	cmp	r3, #0
   394a6:	d04d      	beq.n	39544 <rpc_transport_register+0xac>
   394a8:	6903      	ldr	r3, [r0, #16]
   394aa:	2b00      	cmp	r3, #0
   394ac:	d04a      	beq.n	39544 <rpc_transport_register+0xac>
   394ae:	6843      	ldr	r3, [r0, #4]
   394b0:	2b00      	cmp	r3, #0
   394b2:	d047      	beq.n	39544 <rpc_transport_register+0xac>
   394b4:	68c3      	ldr	r3, [r0, #12]
   394b6:	2b00      	cmp	r3, #0
   394b8:	d044      	beq.n	39544 <rpc_transport_register+0xac>
   394ba:	6803      	ldr	r3, [r0, #0]
   394bc:	2b00      	cmp	r3, #0
   394be:	d041      	beq.n	39544 <rpc_transport_register+0xac>
   394c0:	6943      	ldr	r3, [r0, #20]
   394c2:	2b00      	cmp	r3, #0
   394c4:	d03e      	beq.n	39544 <rpc_transport_register+0xac>
   394c6:	2601      	movs	r6, #1
   394c8:	2500      	movs	r5, #0
   394ca:	4604      	mov	r4, r0
   394cc:	460f      	mov	r7, r1
   394ce:	4a1f      	ldr	r2, [pc, #124]	; (3954c <rpc_transport_register+0xb4>)
   394d0:	4b1f      	ldr	r3, [pc, #124]	; (39550 <rpc_transport_register+0xb8>)
   394d2:	f8df c080 	ldr.w	ip, [pc, #128]	; 39554 <rpc_transport_register+0xbc>
   394d6:	7416      	strb	r6, [r2, #16]
   394d8:	7616      	strb	r6, [r2, #24]
   394da:	f882 6020 	strb.w	r6, [r2, #32]
   394de:	f882 6028 	strb.w	r6, [r2, #40]	; 0x28
   394e2:	f882 6030 	strb.w	r6, [r2, #48]	; 0x30
   394e6:	f882 6038 	strb.w	r6, [r2, #56]	; 0x38
   394ea:	f882 6040 	strb.w	r6, [r2, #64]	; 0x40
   394ee:	f882 6048 	strb.w	r6, [r2, #72]	; 0x48
   394f2:	f882 6050 	strb.w	r6, [r2, #80]	; 0x50
   394f6:	f882 6058 	strb.w	r6, [r2, #88]	; 0x58
   394fa:	f882 6060 	strb.w	r6, [r2, #96]	; 0x60
   394fe:	f882 6068 	strb.w	r6, [r2, #104]	; 0x68
   39502:	f882 6070 	strb.w	r6, [r2, #112]	; 0x70
   39506:	f882 6078 	strb.w	r6, [r2, #120]	; 0x78
   3950a:	611d      	str	r5, [r3, #16]
   3950c:	619d      	str	r5, [r3, #24]
   3950e:	621d      	str	r5, [r3, #32]
   39510:	629d      	str	r5, [r3, #40]	; 0x28
   39512:	631d      	str	r5, [r3, #48]	; 0x30
   39514:	639d      	str	r5, [r3, #56]	; 0x38
   39516:	641d      	str	r5, [r3, #64]	; 0x40
   39518:	649d      	str	r5, [r3, #72]	; 0x48
   3951a:	651d      	str	r5, [r3, #80]	; 0x50
   3951c:	659d      	str	r5, [r3, #88]	; 0x58
   3951e:	661d      	str	r5, [r3, #96]	; 0x60
   39520:	669d      	str	r5, [r3, #104]	; 0x68
   39522:	671d      	str	r5, [r3, #112]	; 0x70
   39524:	679d      	str	r5, [r3, #120]	; 0x78
   39526:	7016      	strb	r6, [r2, #0]
   39528:	7216      	strb	r6, [r2, #8]
   3952a:	601d      	str	r5, [r3, #0]
   3952c:	609d      	str	r5, [r3, #8]
   3952e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   39530:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   39534:	e894 0003 	ldmia.w	r4, {r0, r1}
   39538:	e88c 0003 	stmia.w	ip, {r0, r1}
   3953c:	603e      	str	r6, [r7, #0]
   3953e:	4628      	mov	r0, r5
   39540:	bcf0      	pop	{r4, r5, r6, r7}
   39542:	4770      	bx	lr
   39544:	250e      	movs	r5, #14
   39546:	4628      	mov	r0, r5
   39548:	bcf0      	pop	{r4, r5, r6, r7}
   3954a:	4770      	bx	lr
   3954c:	200254b0 	.word	0x200254b0
   39550:	20025430 	.word	0x20025430
   39554:	20025418 	.word	0x20025418

00039558 <rpc_transport_unregister>:
   39558:	2800      	cmp	r0, #0
   3955a:	d03a      	beq.n	395d2 <rpc_transport_unregister+0x7a>
   3955c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   39560:	4680      	mov	r8, r0
   39562:	4c1d      	ldr	r4, [pc, #116]	; (395d8 <rpc_transport_unregister+0x80>)
   39564:	f104 05a0 	add.w	r5, r4, #160	; 0xa0
   39568:	68a3      	ldr	r3, [r4, #8]
   3956a:	3410      	adds	r4, #16
   3956c:	b103      	cbz	r3, 39570 <rpc_transport_unregister+0x18>
   3956e:	4798      	blx	r3
   39570:	42ac      	cmp	r4, r5
   39572:	d1f9      	bne.n	39568 <rpc_transport_unregister+0x10>
   39574:	f04f 0901 	mov.w	r9, #1
   39578:	2600      	movs	r6, #0
   3957a:	4c18      	ldr	r4, [pc, #96]	; (395dc <rpc_transport_unregister+0x84>)
   3957c:	4d18      	ldr	r5, [pc, #96]	; (395e0 <rpc_transport_unregister+0x88>)
   3957e:	f8df a064 	ldr.w	sl, [pc, #100]	; 395e4 <rpc_transport_unregister+0x8c>
   39582:	f104 0780 	add.w	r7, r4, #128	; 0x80
   39586:	f814 3c04 	ldrb.w	r3, [r4, #-4]
   3958a:	2b01      	cmp	r3, #1
   3958c:	d005      	beq.n	3959a <rpc_transport_unregister+0x42>
   3958e:	f8da 300c 	ldr.w	r3, [sl, #12]
   39592:	6820      	ldr	r0, [r4, #0]
   39594:	4798      	blx	r3
   39596:	f804 9c04 	strb.w	r9, [r4, #-4]
   3959a:	f855 0c04 	ldr.w	r0, [r5, #-4]
   3959e:	3408      	adds	r4, #8
   395a0:	b128      	cbz	r0, 395ae <rpc_transport_unregister+0x56>
   395a2:	f8da 3010 	ldr.w	r3, [sl, #16]
   395a6:	4798      	blx	r3
   395a8:	802e      	strh	r6, [r5, #0]
   395aa:	f845 6c04 	str.w	r6, [r5, #-4]
   395ae:	42bc      	cmp	r4, r7
   395b0:	f105 0508 	add.w	r5, r5, #8
   395b4:	d1e7      	bne.n	39586 <rpc_transport_unregister+0x2e>
   395b6:	f8d8 0000 	ldr.w	r0, [r8]
   395ba:	2218      	movs	r2, #24
   395bc:	3801      	subs	r0, #1
   395be:	eb00 0040 	add.w	r0, r0, r0, lsl #1
   395c2:	eb0a 00c0 	add.w	r0, sl, r0, lsl #3
   395c6:	2100      	movs	r1, #0
   395c8:	f00b fc7c 	bl	44ec4 <memset>
   395cc:	2000      	movs	r0, #0
   395ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   395d2:	200e      	movs	r0, #14
   395d4:	4770      	bx	lr
   395d6:	bf00      	nop
   395d8:	20025378 	.word	0x20025378
   395dc:	200254b4 	.word	0x200254b4
   395e0:	20025434 	.word	0x20025434
   395e4:	20025418 	.word	0x20025418

000395e8 <rpc_message_send>:
   395e8:	b168      	cbz	r0, 39606 <rpc_message_send+0x1e>
   395ea:	b171      	cbz	r1, 3960a <rpc_message_send+0x22>
   395ec:	4a09      	ldr	r2, [pc, #36]	; (39614 <rpc_message_send+0x2c>)
   395ee:	6853      	ldr	r3, [r2, #4]
   395f0:	b16b      	cbz	r3, 3960e <rpc_message_send+0x26>
   395f2:	684b      	ldr	r3, [r1, #4]
   395f4:	8008      	strh	r0, [r1, #0]
   395f6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
   395fa:	f043 0302 	orr.w	r3, r3, #2
   395fe:	6812      	ldr	r2, [r2, #0]
   39600:	604b      	str	r3, [r1, #4]
   39602:	4608      	mov	r0, r1
   39604:	4710      	bx	r2
   39606:	2007      	movs	r0, #7
   39608:	4770      	bx	lr
   3960a:	200e      	movs	r0, #14
   3960c:	4770      	bx	lr
   3960e:	2008      	movs	r0, #8
   39610:	4770      	bx	lr
   39612:	bf00      	nop
   39614:	20025418 	.word	0x20025418

00039618 <rpc_message_alloc>:
   39618:	b35a      	cbz	r2, 39672 <rpc_message_alloc+0x5a>
   3961a:	b330      	cbz	r0, 3966a <rpc_message_alloc+0x52>
   3961c:	2300      	movs	r3, #0
   3961e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   39622:	4f15      	ldr	r7, [pc, #84]	; (39678 <rpc_message_alloc+0x60>)
   39624:	6013      	str	r3, [r2, #0]
   39626:	687b      	ldr	r3, [r7, #4]
   39628:	b30b      	cbz	r3, 3966e <rpc_message_alloc+0x56>
   3962a:	4615      	mov	r5, r2
   3962c:	460c      	mov	r4, r1
   3962e:	4606      	mov	r6, r0
   39630:	b959      	cbnz	r1, 3964a <rpc_message_alloc+0x32>
   39632:	4798      	blx	r3
   39634:	4603      	mov	r3, r0
   39636:	b1a8      	cbz	r0, 39664 <rpc_message_alloc+0x4c>
   39638:	46a0      	mov	r8, r4
   3963a:	60dc      	str	r4, [r3, #12]
   3963c:	f8c3 8008 	str.w	r8, [r3, #8]
   39640:	801e      	strh	r6, [r3, #0]
   39642:	602b      	str	r3, [r5, #0]
   39644:	2000      	movs	r0, #0
   39646:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   3964a:	68bb      	ldr	r3, [r7, #8]
   3964c:	4608      	mov	r0, r1
   3964e:	4798      	blx	r3
   39650:	4680      	mov	r8, r0
   39652:	b138      	cbz	r0, 39664 <rpc_message_alloc+0x4c>
   39654:	687b      	ldr	r3, [r7, #4]
   39656:	4798      	blx	r3
   39658:	4603      	mov	r3, r0
   3965a:	2800      	cmp	r0, #0
   3965c:	d1ed      	bne.n	3963a <rpc_message_alloc+0x22>
   3965e:	693b      	ldr	r3, [r7, #16]
   39660:	4640      	mov	r0, r8
   39662:	4798      	blx	r3
   39664:	2004      	movs	r0, #4
   39666:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   3966a:	2007      	movs	r0, #7
   3966c:	4770      	bx	lr
   3966e:	2008      	movs	r0, #8
   39670:	e7f9      	b.n	39666 <rpc_message_alloc+0x4e>
   39672:	200e      	movs	r0, #14
   39674:	4770      	bx	lr
   39676:	bf00      	nop
   39678:	20025418 	.word	0x20025418

0003967c <rpc_message_free>:
   3967c:	2800      	cmp	r0, #0
   3967e:	f000 808c 	beq.w	3979a <rpc_message_free+0x11e>
   39682:	2900      	cmp	r1, #0
   39684:	f000 80e9 	beq.w	3985a <rpc_message_free+0x1de>
   39688:	b538      	push	{r3, r4, r5, lr}
   3968a:	4a83      	ldr	r2, [pc, #524]	; (39898 <rpc_message_free+0x21c>)
   3968c:	6853      	ldr	r3, [r2, #4]
   3968e:	2b00      	cmp	r3, #0
   39690:	f000 8085 	beq.w	3979e <rpc_message_free+0x122>
   39694:	4c81      	ldr	r4, [pc, #516]	; (3989c <rpc_message_free+0x220>)
   39696:	4608      	mov	r0, r1
   39698:	6863      	ldr	r3, [r4, #4]
   3969a:	4299      	cmp	r1, r3
   3969c:	f000 8085 	beq.w	397aa <rpc_message_free+0x12e>
   396a0:	68e3      	ldr	r3, [r4, #12]
   396a2:	4298      	cmp	r0, r3
   396a4:	f000 808e 	beq.w	397c4 <rpc_message_free+0x148>
   396a8:	6963      	ldr	r3, [r4, #20]
   396aa:	4298      	cmp	r0, r3
   396ac:	f000 8090 	beq.w	397d0 <rpc_message_free+0x154>
   396b0:	69e3      	ldr	r3, [r4, #28]
   396b2:	4298      	cmp	r0, r3
   396b4:	f000 8092 	beq.w	397dc <rpc_message_free+0x160>
   396b8:	6a63      	ldr	r3, [r4, #36]	; 0x24
   396ba:	4298      	cmp	r0, r3
   396bc:	f000 8095 	beq.w	397ea <rpc_message_free+0x16e>
   396c0:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   396c2:	4298      	cmp	r0, r3
   396c4:	f000 8098 	beq.w	397f8 <rpc_message_free+0x17c>
   396c8:	6b63      	ldr	r3, [r4, #52]	; 0x34
   396ca:	4298      	cmp	r0, r3
   396cc:	f000 809b 	beq.w	39806 <rpc_message_free+0x18a>
   396d0:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   396d2:	4298      	cmp	r0, r3
   396d4:	f000 809e 	beq.w	39814 <rpc_message_free+0x198>
   396d8:	6c63      	ldr	r3, [r4, #68]	; 0x44
   396da:	4298      	cmp	r0, r3
   396dc:	f000 80a1 	beq.w	39822 <rpc_message_free+0x1a6>
   396e0:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
   396e2:	4298      	cmp	r0, r3
   396e4:	f000 80a4 	beq.w	39830 <rpc_message_free+0x1b4>
   396e8:	6d63      	ldr	r3, [r4, #84]	; 0x54
   396ea:	4298      	cmp	r0, r3
   396ec:	f000 80a7 	beq.w	3983e <rpc_message_free+0x1c2>
   396f0:	6de3      	ldr	r3, [r4, #92]	; 0x5c
   396f2:	4298      	cmp	r0, r3
   396f4:	f000 80aa 	beq.w	3984c <rpc_message_free+0x1d0>
   396f8:	6e63      	ldr	r3, [r4, #100]	; 0x64
   396fa:	4298      	cmp	r0, r3
   396fc:	f000 80af 	beq.w	3985e <rpc_message_free+0x1e2>
   39700:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
   39702:	4298      	cmp	r0, r3
   39704:	f000 80b2 	beq.w	3986c <rpc_message_free+0x1f0>
   39708:	6f63      	ldr	r3, [r4, #116]	; 0x74
   3970a:	4298      	cmp	r0, r3
   3970c:	f000 80b5 	beq.w	3987a <rpc_message_free+0x1fe>
   39710:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
   39712:	4283      	cmp	r3, r0
   39714:	f000 80b8 	beq.w	39888 <rpc_message_free+0x20c>
   39718:	68d3      	ldr	r3, [r2, #12]
   3971a:	4798      	blx	r3
   3971c:	7823      	ldrb	r3, [r4, #0]
   3971e:	2b04      	cmp	r3, #4
   39720:	d03f      	beq.n	397a2 <rpc_message_free+0x126>
   39722:	7a23      	ldrb	r3, [r4, #8]
   39724:	2b04      	cmp	r3, #4
   39726:	d03c      	beq.n	397a2 <rpc_message_free+0x126>
   39728:	7c23      	ldrb	r3, [r4, #16]
   3972a:	2b04      	cmp	r3, #4
   3972c:	d039      	beq.n	397a2 <rpc_message_free+0x126>
   3972e:	7e23      	ldrb	r3, [r4, #24]
   39730:	2b04      	cmp	r3, #4
   39732:	d036      	beq.n	397a2 <rpc_message_free+0x126>
   39734:	f894 3020 	ldrb.w	r3, [r4, #32]
   39738:	2b04      	cmp	r3, #4
   3973a:	d032      	beq.n	397a2 <rpc_message_free+0x126>
   3973c:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
   39740:	2b04      	cmp	r3, #4
   39742:	d02e      	beq.n	397a2 <rpc_message_free+0x126>
   39744:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
   39748:	2b04      	cmp	r3, #4
   3974a:	d02a      	beq.n	397a2 <rpc_message_free+0x126>
   3974c:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
   39750:	2b04      	cmp	r3, #4
   39752:	d026      	beq.n	397a2 <rpc_message_free+0x126>
   39754:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
   39758:	2b04      	cmp	r3, #4
   3975a:	d022      	beq.n	397a2 <rpc_message_free+0x126>
   3975c:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
   39760:	2b04      	cmp	r3, #4
   39762:	d01e      	beq.n	397a2 <rpc_message_free+0x126>
   39764:	f894 3050 	ldrb.w	r3, [r4, #80]	; 0x50
   39768:	2b04      	cmp	r3, #4
   3976a:	d01a      	beq.n	397a2 <rpc_message_free+0x126>
   3976c:	f894 3058 	ldrb.w	r3, [r4, #88]	; 0x58
   39770:	2b04      	cmp	r3, #4
   39772:	d016      	beq.n	397a2 <rpc_message_free+0x126>
   39774:	f894 3060 	ldrb.w	r3, [r4, #96]	; 0x60
   39778:	2b04      	cmp	r3, #4
   3977a:	d012      	beq.n	397a2 <rpc_message_free+0x126>
   3977c:	f894 3068 	ldrb.w	r3, [r4, #104]	; 0x68
   39780:	2b04      	cmp	r3, #4
   39782:	d00e      	beq.n	397a2 <rpc_message_free+0x126>
   39784:	f894 3070 	ldrb.w	r3, [r4, #112]	; 0x70
   39788:	2b04      	cmp	r3, #4
   3978a:	d00a      	beq.n	397a2 <rpc_message_free+0x126>
   3978c:	f894 3078 	ldrb.w	r3, [r4, #120]	; 0x78
   39790:	2b04      	cmp	r3, #4
   39792:	bf18      	it	ne
   39794:	2000      	movne	r0, #0
   39796:	d004      	beq.n	397a2 <rpc_message_free+0x126>
   39798:	bd38      	pop	{r3, r4, r5, pc}
   3979a:	2007      	movs	r0, #7
   3979c:	4770      	bx	lr
   3979e:	2008      	movs	r0, #8
   397a0:	bd38      	pop	{r3, r4, r5, pc}
   397a2:	f7f6 fdf5 	bl	30390 <bsd_os_application_irq_set>
   397a6:	2000      	movs	r0, #0
   397a8:	bd38      	pop	{r3, r4, r5, pc}
   397aa:	7821      	ldrb	r1, [r4, #0]
   397ac:	2903      	cmp	r1, #3
   397ae:	f47f af77 	bne.w	396a0 <rpc_message_free+0x24>
   397b2:	2100      	movs	r1, #0
   397b4:	2501      	movs	r5, #1
   397b6:	4618      	mov	r0, r3
   397b8:	68d2      	ldr	r2, [r2, #12]
   397ba:	f804 5031 	strb.w	r5, [r4, r1, lsl #3]
   397be:	4790      	blx	r2
   397c0:	2000      	movs	r0, #0
   397c2:	bd38      	pop	{r3, r4, r5, pc}
   397c4:	7a21      	ldrb	r1, [r4, #8]
   397c6:	2903      	cmp	r1, #3
   397c8:	f47f af6e 	bne.w	396a8 <rpc_message_free+0x2c>
   397cc:	2101      	movs	r1, #1
   397ce:	e7f1      	b.n	397b4 <rpc_message_free+0x138>
   397d0:	7c21      	ldrb	r1, [r4, #16]
   397d2:	2903      	cmp	r1, #3
   397d4:	f47f af6c 	bne.w	396b0 <rpc_message_free+0x34>
   397d8:	2102      	movs	r1, #2
   397da:	e7eb      	b.n	397b4 <rpc_message_free+0x138>
   397dc:	7e21      	ldrb	r1, [r4, #24]
   397de:	2903      	cmp	r1, #3
   397e0:	d0e8      	beq.n	397b4 <rpc_message_free+0x138>
   397e2:	6a63      	ldr	r3, [r4, #36]	; 0x24
   397e4:	4298      	cmp	r0, r3
   397e6:	f47f af6b 	bne.w	396c0 <rpc_message_free+0x44>
   397ea:	f894 1020 	ldrb.w	r1, [r4, #32]
   397ee:	2903      	cmp	r1, #3
   397f0:	f47f af66 	bne.w	396c0 <rpc_message_free+0x44>
   397f4:	2104      	movs	r1, #4
   397f6:	e7dd      	b.n	397b4 <rpc_message_free+0x138>
   397f8:	f894 1028 	ldrb.w	r1, [r4, #40]	; 0x28
   397fc:	2903      	cmp	r1, #3
   397fe:	f47f af63 	bne.w	396c8 <rpc_message_free+0x4c>
   39802:	2105      	movs	r1, #5
   39804:	e7d6      	b.n	397b4 <rpc_message_free+0x138>
   39806:	f894 1030 	ldrb.w	r1, [r4, #48]	; 0x30
   3980a:	2903      	cmp	r1, #3
   3980c:	f47f af60 	bne.w	396d0 <rpc_message_free+0x54>
   39810:	2106      	movs	r1, #6
   39812:	e7cf      	b.n	397b4 <rpc_message_free+0x138>
   39814:	f894 1038 	ldrb.w	r1, [r4, #56]	; 0x38
   39818:	2903      	cmp	r1, #3
   3981a:	f47f af5d 	bne.w	396d8 <rpc_message_free+0x5c>
   3981e:	2107      	movs	r1, #7
   39820:	e7c8      	b.n	397b4 <rpc_message_free+0x138>
   39822:	f894 1040 	ldrb.w	r1, [r4, #64]	; 0x40
   39826:	2903      	cmp	r1, #3
   39828:	f47f af5a 	bne.w	396e0 <rpc_message_free+0x64>
   3982c:	2108      	movs	r1, #8
   3982e:	e7c1      	b.n	397b4 <rpc_message_free+0x138>
   39830:	f894 1048 	ldrb.w	r1, [r4, #72]	; 0x48
   39834:	2903      	cmp	r1, #3
   39836:	f47f af57 	bne.w	396e8 <rpc_message_free+0x6c>
   3983a:	2109      	movs	r1, #9
   3983c:	e7ba      	b.n	397b4 <rpc_message_free+0x138>
   3983e:	f894 1050 	ldrb.w	r1, [r4, #80]	; 0x50
   39842:	2903      	cmp	r1, #3
   39844:	f47f af54 	bne.w	396f0 <rpc_message_free+0x74>
   39848:	210a      	movs	r1, #10
   3984a:	e7b3      	b.n	397b4 <rpc_message_free+0x138>
   3984c:	f894 1058 	ldrb.w	r1, [r4, #88]	; 0x58
   39850:	2903      	cmp	r1, #3
   39852:	f47f af51 	bne.w	396f8 <rpc_message_free+0x7c>
   39856:	210b      	movs	r1, #11
   39858:	e7ac      	b.n	397b4 <rpc_message_free+0x138>
   3985a:	200e      	movs	r0, #14
   3985c:	4770      	bx	lr
   3985e:	f894 1060 	ldrb.w	r1, [r4, #96]	; 0x60
   39862:	2903      	cmp	r1, #3
   39864:	f47f af4c 	bne.w	39700 <rpc_message_free+0x84>
   39868:	210c      	movs	r1, #12
   3986a:	e7a3      	b.n	397b4 <rpc_message_free+0x138>
   3986c:	f894 1068 	ldrb.w	r1, [r4, #104]	; 0x68
   39870:	2903      	cmp	r1, #3
   39872:	f47f af49 	bne.w	39708 <rpc_message_free+0x8c>
   39876:	210d      	movs	r1, #13
   39878:	e79c      	b.n	397b4 <rpc_message_free+0x138>
   3987a:	f894 1070 	ldrb.w	r1, [r4, #112]	; 0x70
   3987e:	2903      	cmp	r1, #3
   39880:	f47f af46 	bne.w	39710 <rpc_message_free+0x94>
   39884:	210e      	movs	r1, #14
   39886:	e795      	b.n	397b4 <rpc_message_free+0x138>
   39888:	f894 3078 	ldrb.w	r3, [r4, #120]	; 0x78
   3988c:	2b03      	cmp	r3, #3
   3988e:	f47f af43 	bne.w	39718 <rpc_message_free+0x9c>
   39892:	4603      	mov	r3, r0
   39894:	210f      	movs	r1, #15
   39896:	e78d      	b.n	397b4 <rpc_message_free+0x138>
   39898:	20025418 	.word	0x20025418
   3989c:	200254b0 	.word	0x200254b0

000398a0 <rpc_message_data_free>:
   398a0:	2800      	cmp	r0, #0
   398a2:	f000 8091 	beq.w	399c8 <rpc_message_data_free+0x128>
   398a6:	2900      	cmp	r1, #0
   398a8:	f000 80e4 	beq.w	39a74 <rpc_message_data_free+0x1d4>
   398ac:	b538      	push	{r3, r4, r5, lr}
   398ae:	4a81      	ldr	r2, [pc, #516]	; (39ab4 <rpc_message_data_free+0x214>)
   398b0:	6853      	ldr	r3, [r2, #4]
   398b2:	2b00      	cmp	r3, #0
   398b4:	f000 808a 	beq.w	399cc <rpc_message_data_free+0x12c>
   398b8:	4b7f      	ldr	r3, [pc, #508]	; (39ab8 <rpc_message_data_free+0x218>)
   398ba:	681c      	ldr	r4, [r3, #0]
   398bc:	42a1      	cmp	r1, r4
   398be:	f000 8087 	beq.w	399d0 <rpc_message_data_free+0x130>
   398c2:	689c      	ldr	r4, [r3, #8]
   398c4:	42a1      	cmp	r1, r4
   398c6:	f000 808f 	beq.w	399e8 <rpc_message_data_free+0x148>
   398ca:	691c      	ldr	r4, [r3, #16]
   398cc:	42a1      	cmp	r1, r4
   398ce:	f000 8091 	beq.w	399f4 <rpc_message_data_free+0x154>
   398d2:	699c      	ldr	r4, [r3, #24]
   398d4:	42a1      	cmp	r1, r4
   398d6:	f000 8093 	beq.w	39a00 <rpc_message_data_free+0x160>
   398da:	6a1c      	ldr	r4, [r3, #32]
   398dc:	42a1      	cmp	r1, r4
   398de:	f000 8095 	beq.w	39a0c <rpc_message_data_free+0x16c>
   398e2:	6a9c      	ldr	r4, [r3, #40]	; 0x28
   398e4:	42a1      	cmp	r1, r4
   398e6:	f000 8097 	beq.w	39a18 <rpc_message_data_free+0x178>
   398ea:	6b1c      	ldr	r4, [r3, #48]	; 0x30
   398ec:	42a1      	cmp	r1, r4
   398ee:	f000 8099 	beq.w	39a24 <rpc_message_data_free+0x184>
   398f2:	6b9c      	ldr	r4, [r3, #56]	; 0x38
   398f4:	42a1      	cmp	r1, r4
   398f6:	f000 809b 	beq.w	39a30 <rpc_message_data_free+0x190>
   398fa:	6c1c      	ldr	r4, [r3, #64]	; 0x40
   398fc:	42a1      	cmp	r1, r4
   398fe:	f000 809d 	beq.w	39a3c <rpc_message_data_free+0x19c>
   39902:	6c9c      	ldr	r4, [r3, #72]	; 0x48
   39904:	42a1      	cmp	r1, r4
   39906:	f000 80a0 	beq.w	39a4a <rpc_message_data_free+0x1aa>
   3990a:	6d1c      	ldr	r4, [r3, #80]	; 0x50
   3990c:	42a1      	cmp	r1, r4
   3990e:	f000 80a3 	beq.w	39a58 <rpc_message_data_free+0x1b8>
   39912:	6d9c      	ldr	r4, [r3, #88]	; 0x58
   39914:	42a1      	cmp	r1, r4
   39916:	f000 80a6 	beq.w	39a66 <rpc_message_data_free+0x1c6>
   3991a:	6e1c      	ldr	r4, [r3, #96]	; 0x60
   3991c:	42a1      	cmp	r1, r4
   3991e:	f000 80ab 	beq.w	39a78 <rpc_message_data_free+0x1d8>
   39922:	6e9c      	ldr	r4, [r3, #104]	; 0x68
   39924:	42a1      	cmp	r1, r4
   39926:	f000 80ae 	beq.w	39a86 <rpc_message_data_free+0x1e6>
   3992a:	6f1c      	ldr	r4, [r3, #112]	; 0x70
   3992c:	42a1      	cmp	r1, r4
   3992e:	f000 80b1 	beq.w	39a94 <rpc_message_data_free+0x1f4>
   39932:	6f9c      	ldr	r4, [r3, #120]	; 0x78
   39934:	428c      	cmp	r4, r1
   39936:	f000 80b4 	beq.w	39aa2 <rpc_message_data_free+0x202>
   3993a:	6913      	ldr	r3, [r2, #16]
   3993c:	4608      	mov	r0, r1
   3993e:	4798      	blx	r3
   39940:	4b5e      	ldr	r3, [pc, #376]	; (39abc <rpc_message_data_free+0x21c>)
   39942:	781a      	ldrb	r2, [r3, #0]
   39944:	2a04      	cmp	r2, #4
   39946:	d03b      	beq.n	399c0 <rpc_message_data_free+0x120>
   39948:	7a1a      	ldrb	r2, [r3, #8]
   3994a:	2a04      	cmp	r2, #4
   3994c:	d038      	beq.n	399c0 <rpc_message_data_free+0x120>
   3994e:	7c1a      	ldrb	r2, [r3, #16]
   39950:	2a04      	cmp	r2, #4
   39952:	d035      	beq.n	399c0 <rpc_message_data_free+0x120>
   39954:	7e1a      	ldrb	r2, [r3, #24]
   39956:	2a04      	cmp	r2, #4
   39958:	d032      	beq.n	399c0 <rpc_message_data_free+0x120>
   3995a:	f893 2020 	ldrb.w	r2, [r3, #32]
   3995e:	2a04      	cmp	r2, #4
   39960:	d02e      	beq.n	399c0 <rpc_message_data_free+0x120>
   39962:	f893 2028 	ldrb.w	r2, [r3, #40]	; 0x28
   39966:	2a04      	cmp	r2, #4
   39968:	d02a      	beq.n	399c0 <rpc_message_data_free+0x120>
   3996a:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
   3996e:	2a04      	cmp	r2, #4
   39970:	d026      	beq.n	399c0 <rpc_message_data_free+0x120>
   39972:	f893 2038 	ldrb.w	r2, [r3, #56]	; 0x38
   39976:	2a04      	cmp	r2, #4
   39978:	d022      	beq.n	399c0 <rpc_message_data_free+0x120>
   3997a:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
   3997e:	2a04      	cmp	r2, #4
   39980:	d01e      	beq.n	399c0 <rpc_message_data_free+0x120>
   39982:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
   39986:	2a04      	cmp	r2, #4
   39988:	d01a      	beq.n	399c0 <rpc_message_data_free+0x120>
   3998a:	f893 2050 	ldrb.w	r2, [r3, #80]	; 0x50
   3998e:	2a04      	cmp	r2, #4
   39990:	d016      	beq.n	399c0 <rpc_message_data_free+0x120>
   39992:	f893 2058 	ldrb.w	r2, [r3, #88]	; 0x58
   39996:	2a04      	cmp	r2, #4
   39998:	d012      	beq.n	399c0 <rpc_message_data_free+0x120>
   3999a:	f893 2060 	ldrb.w	r2, [r3, #96]	; 0x60
   3999e:	2a04      	cmp	r2, #4
   399a0:	d00e      	beq.n	399c0 <rpc_message_data_free+0x120>
   399a2:	f893 2068 	ldrb.w	r2, [r3, #104]	; 0x68
   399a6:	2a04      	cmp	r2, #4
   399a8:	d00a      	beq.n	399c0 <rpc_message_data_free+0x120>
   399aa:	f893 2070 	ldrb.w	r2, [r3, #112]	; 0x70
   399ae:	2a04      	cmp	r2, #4
   399b0:	d006      	beq.n	399c0 <rpc_message_data_free+0x120>
   399b2:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
   399b6:	2b04      	cmp	r3, #4
   399b8:	bf18      	it	ne
   399ba:	2000      	movne	r0, #0
   399bc:	d000      	beq.n	399c0 <rpc_message_data_free+0x120>
   399be:	bd38      	pop	{r3, r4, r5, pc}
   399c0:	f7f6 fce6 	bl	30390 <bsd_os_application_irq_set>
   399c4:	2000      	movs	r0, #0
   399c6:	bd38      	pop	{r3, r4, r5, pc}
   399c8:	2007      	movs	r0, #7
   399ca:	4770      	bx	lr
   399cc:	2008      	movs	r0, #8
   399ce:	bd38      	pop	{r3, r4, r5, pc}
   399d0:	889c      	ldrh	r4, [r3, #4]
   399d2:	4284      	cmp	r4, r0
   399d4:	f47f af75 	bne.w	398c2 <rpc_message_data_free+0x22>
   399d8:	2400      	movs	r4, #0
   399da:	2000      	movs	r0, #0
   399dc:	eb03 05c4 	add.w	r5, r3, r4, lsl #3
   399e0:	f843 0034 	str.w	r0, [r3, r4, lsl #3]
   399e4:	80a8      	strh	r0, [r5, #4]
   399e6:	e7a8      	b.n	3993a <rpc_message_data_free+0x9a>
   399e8:	899c      	ldrh	r4, [r3, #12]
   399ea:	4284      	cmp	r4, r0
   399ec:	f47f af6d 	bne.w	398ca <rpc_message_data_free+0x2a>
   399f0:	2401      	movs	r4, #1
   399f2:	e7f2      	b.n	399da <rpc_message_data_free+0x13a>
   399f4:	8a9c      	ldrh	r4, [r3, #20]
   399f6:	4284      	cmp	r4, r0
   399f8:	f47f af6b 	bne.w	398d2 <rpc_message_data_free+0x32>
   399fc:	2402      	movs	r4, #2
   399fe:	e7ec      	b.n	399da <rpc_message_data_free+0x13a>
   39a00:	8b9c      	ldrh	r4, [r3, #28]
   39a02:	4284      	cmp	r4, r0
   39a04:	f47f af69 	bne.w	398da <rpc_message_data_free+0x3a>
   39a08:	2403      	movs	r4, #3
   39a0a:	e7e6      	b.n	399da <rpc_message_data_free+0x13a>
   39a0c:	8c9c      	ldrh	r4, [r3, #36]	; 0x24
   39a0e:	4284      	cmp	r4, r0
   39a10:	f47f af67 	bne.w	398e2 <rpc_message_data_free+0x42>
   39a14:	2404      	movs	r4, #4
   39a16:	e7e0      	b.n	399da <rpc_message_data_free+0x13a>
   39a18:	8d9c      	ldrh	r4, [r3, #44]	; 0x2c
   39a1a:	4284      	cmp	r4, r0
   39a1c:	f47f af65 	bne.w	398ea <rpc_message_data_free+0x4a>
   39a20:	2405      	movs	r4, #5
   39a22:	e7da      	b.n	399da <rpc_message_data_free+0x13a>
   39a24:	8e9c      	ldrh	r4, [r3, #52]	; 0x34
   39a26:	4284      	cmp	r4, r0
   39a28:	f47f af63 	bne.w	398f2 <rpc_message_data_free+0x52>
   39a2c:	2406      	movs	r4, #6
   39a2e:	e7d4      	b.n	399da <rpc_message_data_free+0x13a>
   39a30:	8f9c      	ldrh	r4, [r3, #60]	; 0x3c
   39a32:	4284      	cmp	r4, r0
   39a34:	f47f af61 	bne.w	398fa <rpc_message_data_free+0x5a>
   39a38:	2407      	movs	r4, #7
   39a3a:	e7ce      	b.n	399da <rpc_message_data_free+0x13a>
   39a3c:	f8b3 4044 	ldrh.w	r4, [r3, #68]	; 0x44
   39a40:	4284      	cmp	r4, r0
   39a42:	f47f af5e 	bne.w	39902 <rpc_message_data_free+0x62>
   39a46:	2408      	movs	r4, #8
   39a48:	e7c7      	b.n	399da <rpc_message_data_free+0x13a>
   39a4a:	f8b3 404c 	ldrh.w	r4, [r3, #76]	; 0x4c
   39a4e:	4284      	cmp	r4, r0
   39a50:	f47f af5b 	bne.w	3990a <rpc_message_data_free+0x6a>
   39a54:	2409      	movs	r4, #9
   39a56:	e7c0      	b.n	399da <rpc_message_data_free+0x13a>
   39a58:	f8b3 4054 	ldrh.w	r4, [r3, #84]	; 0x54
   39a5c:	4284      	cmp	r4, r0
   39a5e:	f47f af58 	bne.w	39912 <rpc_message_data_free+0x72>
   39a62:	240a      	movs	r4, #10
   39a64:	e7b9      	b.n	399da <rpc_message_data_free+0x13a>
   39a66:	f8b3 405c 	ldrh.w	r4, [r3, #92]	; 0x5c
   39a6a:	4284      	cmp	r4, r0
   39a6c:	f47f af55 	bne.w	3991a <rpc_message_data_free+0x7a>
   39a70:	240b      	movs	r4, #11
   39a72:	e7b2      	b.n	399da <rpc_message_data_free+0x13a>
   39a74:	200e      	movs	r0, #14
   39a76:	4770      	bx	lr
   39a78:	f8b3 4064 	ldrh.w	r4, [r3, #100]	; 0x64
   39a7c:	4284      	cmp	r4, r0
   39a7e:	f47f af50 	bne.w	39922 <rpc_message_data_free+0x82>
   39a82:	240c      	movs	r4, #12
   39a84:	e7a9      	b.n	399da <rpc_message_data_free+0x13a>
   39a86:	f8b3 406c 	ldrh.w	r4, [r3, #108]	; 0x6c
   39a8a:	4284      	cmp	r4, r0
   39a8c:	f47f af4d 	bne.w	3992a <rpc_message_data_free+0x8a>
   39a90:	240d      	movs	r4, #13
   39a92:	e7a2      	b.n	399da <rpc_message_data_free+0x13a>
   39a94:	f8b3 4074 	ldrh.w	r4, [r3, #116]	; 0x74
   39a98:	4284      	cmp	r4, r0
   39a9a:	f47f af4a 	bne.w	39932 <rpc_message_data_free+0x92>
   39a9e:	240e      	movs	r4, #14
   39aa0:	e79b      	b.n	399da <rpc_message_data_free+0x13a>
   39aa2:	f8b3 407c 	ldrh.w	r4, [r3, #124]	; 0x7c
   39aa6:	4284      	cmp	r4, r0
   39aa8:	bf08      	it	eq
   39aaa:	240f      	moveq	r4, #15
   39aac:	f47f af45 	bne.w	3993a <rpc_message_data_free+0x9a>
   39ab0:	e793      	b.n	399da <rpc_message_data_free+0x13a>
   39ab2:	bf00      	nop
   39ab4:	20025418 	.word	0x20025418
   39ab8:	20025430 	.word	0x20025430
   39abc:	200254b0 	.word	0x200254b0

00039ac0 <packet_free_cb>:
   39ac0:	b510      	push	{r4, lr}
   39ac2:	4604      	mov	r4, r0
   39ac4:	b118      	cbz	r0, 39ace <packet_free_cb+0xe>
   39ac6:	6800      	ldr	r0, [r0, #0]
   39ac8:	b108      	cbz	r0, 39ace <packet_free_cb+0xe>
   39aca:	f001 f82f 	bl	3ab2c <rpc_gnss_client_data_free>
   39ace:	68a0      	ldr	r0, [r4, #8]
   39ad0:	b118      	cbz	r0, 39ada <packet_free_cb+0x1a>
   39ad2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   39ad6:	f7fa b917 	b.w	33d08 <nrf_free>
   39ada:	bd10      	pop	{r4, pc}

00039adc <rpc_gnss_event_handler>:
   39adc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   39ae0:	4b64      	ldr	r3, [pc, #400]	; (39c74 <rpc_gnss_event_handler+0x198>)
   39ae2:	4606      	mov	r6, r0
   39ae4:	6800      	ldr	r0, [r0, #0]
   39ae6:	881b      	ldrh	r3, [r3, #0]
   39ae8:	6802      	ldr	r2, [r0, #0]
   39aea:	4f63      	ldr	r7, [pc, #396]	; (39c78 <rpc_gnss_event_handler+0x19c>)
   39aec:	ebb3 4f12 	cmp.w	r3, r2, lsr #16
   39af0:	b084      	sub	sp, #16
   39af2:	460d      	mov	r5, r1
   39af4:	6038      	str	r0, [r7, #0]
   39af6:	d038      	beq.n	39b6a <rpc_gnss_event_handler+0x8e>
   39af8:	f505 433f 	add.w	r3, r5, #48896	; 0xbf00
   39afc:	33ff      	adds	r3, #255	; 0xff
   39afe:	b29b      	uxth	r3, r3
   39b00:	2b02      	cmp	r3, #2
   39b02:	d810      	bhi.n	39b26 <rpc_gnss_event_handler+0x4a>
   39b04:	4c5d      	ldr	r4, [pc, #372]	; (39c7c <rpc_gnss_event_handler+0x1a0>)
   39b06:	6823      	ldr	r3, [r4, #0]
   39b08:	075a      	lsls	r2, r3, #29
   39b0a:	d410      	bmi.n	39b2e <rpc_gnss_event_handler+0x52>
   39b0c:	6823      	ldr	r3, [r4, #0]
   39b0e:	079b      	lsls	r3, r3, #30
   39b10:	d503      	bpl.n	39b1a <rpc_gnss_event_handler+0x3e>
   39b12:	f244 0303 	movw	r3, #16387	; 0x4003
   39b16:	429d      	cmp	r5, r3
   39b18:	d009      	beq.n	39b2e <rpc_gnss_event_handler+0x52>
   39b1a:	6830      	ldr	r0, [r6, #0]
   39b1c:	b118      	cbz	r0, 39b26 <rpc_gnss_event_handler+0x4a>
   39b1e:	f001 f805 	bl	3ab2c <rpc_gnss_client_data_free>
   39b22:	2300      	movs	r3, #0
   39b24:	603b      	str	r3, [r7, #0]
   39b26:	2000      	movs	r0, #0
   39b28:	b004      	add	sp, #16
   39b2a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   39b2e:	2002      	movs	r0, #2
   39b30:	f7fa f8e0 	bl	33cf4 <nrf_malloc>
   39b34:	4680      	mov	r8, r0
   39b36:	2800      	cmp	r0, #0
   39b38:	f000 8093 	beq.w	39c62 <rpc_gnss_event_handler+0x186>
   39b3c:	2302      	movs	r3, #2
   39b3e:	8005      	strh	r5, [r0, #0]
   39b40:	6831      	ldr	r1, [r6, #0]
   39b42:	6872      	ldr	r2, [r6, #4]
   39b44:	484e      	ldr	r0, [pc, #312]	; (39c80 <rpc_gnss_event_handler+0x1a4>)
   39b46:	e88d 0106 	stmia.w	sp, {r1, r2, r8}
   39b4a:	6800      	ldr	r0, [r0, #0]
   39b4c:	9303      	str	r3, [sp, #12]
   39b4e:	6803      	ldr	r3, [r0, #0]
   39b50:	4669      	mov	r1, sp
   39b52:	685b      	ldr	r3, [r3, #4]
   39b54:	4798      	blx	r3
   39b56:	3001      	adds	r0, #1
   39b58:	d070      	beq.n	39c3c <rpc_gnss_event_handler+0x160>
   39b5a:	2000      	movs	r0, #0
   39b5c:	6823      	ldr	r3, [r4, #0]
   39b5e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   39b62:	6023      	str	r3, [r4, #0]
   39b64:	b004      	add	sp, #16
   39b66:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   39b6a:	4c44      	ldr	r4, [pc, #272]	; (39c7c <rpc_gnss_event_handler+0x1a0>)
   39b6c:	6823      	ldr	r3, [r4, #0]
   39b6e:	01d9      	lsls	r1, r3, #7
   39b70:	d523      	bpl.n	39bba <rpc_gnss_event_handler+0xde>
   39b72:	f242 1302 	movw	r3, #8450	; 0x2102
   39b76:	429d      	cmp	r5, r3
   39b78:	d11f      	bne.n	39bba <rpc_gnss_event_handler+0xde>
   39b7a:	6843      	ldr	r3, [r0, #4]
   39b7c:	b91b      	cbnz	r3, 39b86 <rpc_gnss_event_handler+0xaa>
   39b7e:	6823      	ldr	r3, [r4, #0]
   39b80:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
   39b84:	6023      	str	r3, [r4, #0]
   39b86:	6823      	ldr	r3, [r4, #0]
   39b88:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
   39b8c:	6023      	str	r3, [r4, #0]
   39b8e:	6823      	ldr	r3, [r4, #0]
   39b90:	025a      	lsls	r2, r3, #9
   39b92:	d430      	bmi.n	39bf6 <rpc_gnss_event_handler+0x11a>
   39b94:	f242 0305 	movw	r3, #8197	; 0x2005
   39b98:	429d      	cmp	r5, r3
   39b9a:	d12c      	bne.n	39bf6 <rpc_gnss_event_handler+0x11a>
   39b9c:	6823      	ldr	r3, [r4, #0]
   39b9e:	0299      	lsls	r1, r3, #10
   39ba0:	d529      	bpl.n	39bf6 <rpc_gnss_event_handler+0x11a>
   39ba2:	6843      	ldr	r3, [r0, #4]
   39ba4:	2b00      	cmp	r3, #0
   39ba6:	d157      	bne.n	39c58 <rpc_gnss_event_handler+0x17c>
   39ba8:	6823      	ldr	r3, [r4, #0]
   39baa:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
   39bae:	6023      	str	r3, [r4, #0]
   39bb0:	6823      	ldr	r3, [r4, #0]
   39bb2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   39bb6:	6023      	str	r3, [r4, #0]
   39bb8:	e01d      	b.n	39bf6 <rpc_gnss_event_handler+0x11a>
   39bba:	6823      	ldr	r3, [r4, #0]
   39bbc:	025b      	lsls	r3, r3, #9
   39bbe:	d50e      	bpl.n	39bde <rpc_gnss_event_handler+0x102>
   39bc0:	f242 1303 	movw	r3, #8451	; 0x2103
   39bc4:	429d      	cmp	r5, r3
   39bc6:	d10a      	bne.n	39bde <rpc_gnss_event_handler+0x102>
   39bc8:	6843      	ldr	r3, [r0, #4]
   39bca:	b91b      	cbnz	r3, 39bd4 <rpc_gnss_event_handler+0xf8>
   39bcc:	6823      	ldr	r3, [r4, #0]
   39bce:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
   39bd2:	6023      	str	r3, [r4, #0]
   39bd4:	6823      	ldr	r3, [r4, #0]
   39bd6:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
   39bda:	6023      	str	r3, [r4, #0]
   39bdc:	e00b      	b.n	39bf6 <rpc_gnss_event_handler+0x11a>
   39bde:	f242 0301 	movw	r3, #8193	; 0x2001
   39be2:	429d      	cmp	r5, r3
   39be4:	d10c      	bne.n	39c00 <rpc_gnss_event_handler+0x124>
   39be6:	6843      	ldr	r3, [r0, #4]
   39be8:	b92b      	cbnz	r3, 39bf6 <rpc_gnss_event_handler+0x11a>
   39bea:	6823      	ldr	r3, [r4, #0]
   39bec:	0c1b      	lsrs	r3, r3, #16
   39bee:	041b      	lsls	r3, r3, #16
   39bf0:	f043 0302 	orr.w	r3, r3, #2
   39bf4:	6023      	str	r3, [r4, #0]
   39bf6:	f000 ff99 	bl	3ab2c <rpc_gnss_client_data_free>
   39bfa:	2300      	movs	r3, #0
   39bfc:	603b      	str	r3, [r7, #0]
   39bfe:	e77b      	b.n	39af8 <rpc_gnss_event_handler+0x1c>
   39c00:	f242 0304 	movw	r3, #8196	; 0x2004
   39c04:	429d      	cmp	r5, r3
   39c06:	d1c5      	bne.n	39b94 <rpc_gnss_event_handler+0xb8>
   39c08:	6843      	ldr	r3, [r0, #4]
   39c0a:	b993      	cbnz	r3, 39c32 <rpc_gnss_event_handler+0x156>
   39c0c:	6823      	ldr	r3, [r4, #0]
   39c0e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
   39c12:	6023      	str	r3, [r4, #0]
   39c14:	6823      	ldr	r3, [r4, #0]
   39c16:	b29b      	uxth	r3, r3
   39c18:	2b03      	cmp	r3, #3
   39c1a:	6823      	ldr	r3, [r4, #0]
   39c1c:	d016      	beq.n	39c4c <rpc_gnss_event_handler+0x170>
   39c1e:	b29b      	uxth	r3, r3
   39c20:	2b04      	cmp	r3, #4
   39c22:	d1d7      	bne.n	39bd4 <rpc_gnss_event_handler+0xf8>
   39c24:	6823      	ldr	r3, [r4, #0]
   39c26:	0c1b      	lsrs	r3, r3, #16
   39c28:	041b      	lsls	r3, r3, #16
   39c2a:	f043 0302 	orr.w	r3, r3, #2
   39c2e:	6023      	str	r3, [r4, #0]
   39c30:	e7d0      	b.n	39bd4 <rpc_gnss_event_handler+0xf8>
   39c32:	6823      	ldr	r3, [r4, #0]
   39c34:	b29b      	uxth	r3, r3
   39c36:	2b03      	cmp	r3, #3
   39c38:	d1cc      	bne.n	39bd4 <rpc_gnss_event_handler+0xf8>
   39c3a:	e7f3      	b.n	39c24 <rpc_gnss_event_handler+0x148>
   39c3c:	4640      	mov	r0, r8
   39c3e:	f7fa f863 	bl	33d08 <nrf_free>
   39c42:	6830      	ldr	r0, [r6, #0]
   39c44:	2800      	cmp	r0, #0
   39c46:	f47f af6a 	bne.w	39b1e <rpc_gnss_event_handler+0x42>
   39c4a:	e76c      	b.n	39b26 <rpc_gnss_event_handler+0x4a>
   39c4c:	0c1b      	lsrs	r3, r3, #16
   39c4e:	041b      	lsls	r3, r3, #16
   39c50:	f043 0304 	orr.w	r3, r3, #4
   39c54:	6023      	str	r3, [r4, #0]
   39c56:	e7bd      	b.n	39bd4 <rpc_gnss_event_handler+0xf8>
   39c58:	6823      	ldr	r3, [r4, #0]
   39c5a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
   39c5e:	6023      	str	r3, [r4, #0]
   39c60:	e7c9      	b.n	39bf6 <rpc_gnss_event_handler+0x11a>
   39c62:	6830      	ldr	r0, [r6, #0]
   39c64:	2800      	cmp	r0, #0
   39c66:	f43f af5e 	beq.w	39b26 <rpc_gnss_event_handler+0x4a>
   39c6a:	f000 ff5f 	bl	3ab2c <rpc_gnss_client_data_free>
   39c6e:	f8c7 8000 	str.w	r8, [r7]
   39c72:	e758      	b.n	39b26 <rpc_gnss_event_handler+0x4a>
   39c74:	20029850 	.word	0x20029850
   39c78:	20025534 	.word	0x20025534
   39c7c:	20025530 	.word	0x20025530
   39c80:	20025538 	.word	0x20025538

00039c84 <gnss_interface_write>:
   39c84:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   39c88:	4a74      	ldr	r2, [pc, #464]	; (39e5c <gnss_interface_write+0x1d8>)
   39c8a:	b09f      	sub	sp, #124	; 0x7c
   39c8c:	4290      	cmp	r0, r2
   39c8e:	9d26      	ldr	r5, [sp, #152]	; 0x98
   39c90:	f040 80d7 	bne.w	39e42 <gnss_interface_write+0x1be>
   39c94:	2900      	cmp	r1, #0
   39c96:	f000 80c6 	beq.w	39e26 <gnss_interface_write+0x1a2>
   39c9a:	2d00      	cmp	r5, #0
   39c9c:	f000 80c3 	beq.w	39e26 <gnss_interface_write+0x1a2>
   39ca0:	9a27      	ldr	r2, [sp, #156]	; 0x9c
   39ca2:	2a02      	cmp	r2, #2
   39ca4:	f040 80bf 	bne.w	39e26 <gnss_interface_write+0x1a2>
   39ca8:	4c6d      	ldr	r4, [pc, #436]	; (39e60 <gnss_interface_write+0x1dc>)
   39caa:	6822      	ldr	r2, [r4, #0]
   39cac:	b292      	uxth	r2, r2
   39cae:	2a02      	cmp	r2, #2
   39cb0:	d004      	beq.n	39cbc <gnss_interface_write+0x38>
   39cb2:	6822      	ldr	r2, [r4, #0]
   39cb4:	b292      	uxth	r2, r2
   39cb6:	2a04      	cmp	r2, #4
   39cb8:	f040 80bd 	bne.w	39e36 <gnss_interface_write+0x1b2>
   39cbc:	2b00      	cmp	r3, #0
   39cbe:	f040 80c6 	bne.w	39e4e <gnss_interface_write+0x1ca>
   39cc2:	6822      	ldr	r2, [r4, #0]
   39cc4:	0390      	lsls	r0, r2, #14
   39cc6:	d512      	bpl.n	39cee <gnss_interface_write+0x6a>
   39cc8:	6822      	ldr	r2, [r4, #0]
   39cca:	882b      	ldrh	r3, [r5, #0]
   39ccc:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
   39cd0:	6022      	str	r2, [r4, #0]
   39cd2:	6822      	ldr	r2, [r4, #0]
   39cd4:	3b01      	subs	r3, #1
   39cd6:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
   39cda:	6022      	str	r2, [r4, #0]
   39cdc:	2b07      	cmp	r3, #7
   39cde:	f200 80a2 	bhi.w	39e26 <gnss_interface_write+0x1a2>
   39ce2:	e8df f003 	tbb	[pc, r3]
   39ce6:	7d82      	.short	0x7d82
   39ce8:	646e7378 	.word	0x646e7378
   39cec:	0869      	.short	0x0869
   39cee:	2000      	movs	r0, #0
   39cf0:	b01f      	add	sp, #124	; 0x7c
   39cf2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   39cf6:	4608      	mov	r0, r1
   39cf8:	a902      	add	r1, sp, #8
   39cfa:	f000 fecb 	bl	3aa94 <rpc_gnss_serialize_integrity>
   39cfe:	2172      	movs	r1, #114	; 0x72
   39d00:	4668      	mov	r0, sp
   39d02:	f000 fee1 	bl	3aac8 <rpc_gnss_client_request_alloc>
   39d06:	4605      	mov	r5, r0
   39d08:	9800      	ldr	r0, [sp, #0]
   39d0a:	2d00      	cmp	r5, #0
   39d0c:	d172      	bne.n	39df4 <gnss_interface_write+0x170>
   39d0e:	2800      	cmp	r0, #0
   39d10:	d077      	beq.n	39e02 <gnss_interface_write+0x17e>
   39d12:	f241 0605 	movw	r6, #4101	; 0x1005
   39d16:	f04f 0c49 	mov.w	ip, #73	; 0x49
   39d1a:	2272      	movs	r2, #114	; 0x72
   39d1c:	f04f 0e76 	mov.w	lr, #118	; 0x76
   39d20:	f04f 0943 	mov.w	r9, #67	; 0x43
   39d24:	f04f 0854 	mov.w	r8, #84	; 0x54
   39d28:	4f4e      	ldr	r7, [pc, #312]	; (39e64 <gnss_interface_write+0x1e0>)
   39d2a:	a91e      	add	r1, sp, #120	; 0x78
   39d2c:	883b      	ldrh	r3, [r7, #0]
   39d2e:	f880 c00f 	strb.w	ip, [r0, #15]
   39d32:	3301      	adds	r3, #1
   39d34:	b29b      	uxth	r3, r3
   39d36:	ea46 4c03 	orr.w	ip, r6, r3, lsl #16
   39d3a:	f841 cd74 	str.w	ip, [r1, #-116]!
   39d3e:	7145      	strb	r5, [r0, #5]
   39d40:	7185      	strb	r5, [r0, #6]
   39d42:	71c5      	strb	r5, [r0, #7]
   39d44:	7205      	strb	r5, [r0, #8]
   39d46:	7245      	strb	r5, [r0, #9]
   39d48:	7285      	strb	r5, [r0, #10]
   39d4a:	72c5      	strb	r5, [r0, #11]
   39d4c:	7102      	strb	r2, [r0, #4]
   39d4e:	f880 900c 	strb.w	r9, [r0, #12]
   39d52:	f880 800d 	strb.w	r8, [r0, #13]
   39d56:	f880 e00e 	strb.w	lr, [r0, #14]
   39d5a:	6800      	ldr	r0, [r0, #0]
   39d5c:	803b      	strh	r3, [r7, #0]
   39d5e:	f00b f877 	bl	44e50 <memcpy>
   39d62:	4b41      	ldr	r3, [pc, #260]	; (39e68 <gnss_interface_write+0x1e4>)
   39d64:	4631      	mov	r1, r6
   39d66:	9800      	ldr	r0, [sp, #0]
   39d68:	601d      	str	r5, [r3, #0]
   39d6a:	f000 fec1 	bl	3aaf0 <rpc_gnss_client_request_send>
   39d6e:	2800      	cmp	r0, #0
   39d70:	d14e      	bne.n	39e10 <gnss_interface_write+0x18c>
   39d72:	6823      	ldr	r3, [r4, #0]
   39d74:	0299      	lsls	r1, r3, #10
   39d76:	d50b      	bpl.n	39d90 <gnss_interface_write+0x10c>
   39d78:	4e3c      	ldr	r6, [pc, #240]	; (39e6c <gnss_interface_write+0x1e8>)
   39d7a:	4d38      	ldr	r5, [pc, #224]	; (39e5c <gnss_interface_write+0x1d8>)
   39d7c:	e000      	b.n	39d80 <gnss_interface_write+0xfc>
   39d7e:	b978      	cbnz	r0, 39da0 <gnss_interface_write+0x11c>
   39d80:	4631      	mov	r1, r6
   39d82:	4628      	mov	r0, r5
   39d84:	f7f6 f972 	bl	3006c <bsd_os_timedwait>
   39d88:	6823      	ldr	r3, [r4, #0]
   39d8a:	029a      	lsls	r2, r3, #10
   39d8c:	d4f7      	bmi.n	39d7e <gnss_interface_write+0xfa>
   39d8e:	b938      	cbnz	r0, 39da0 <gnss_interface_write+0x11c>
   39d90:	6823      	ldr	r3, [r4, #0]
   39d92:	039b      	lsls	r3, r3, #14
   39d94:	d4ab      	bmi.n	39cee <gnss_interface_write+0x6a>
   39d96:	2005      	movs	r0, #5
   39d98:	6823      	ldr	r3, [r4, #0]
   39d9a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   39d9e:	6023      	str	r3, [r4, #0]
   39da0:	f7f6 f9f8 	bl	30194 <bsd_os_errno_set>
   39da4:	f04f 30ff 	mov.w	r0, #4294967295
   39da8:	b01f      	add	sp, #124	; 0x7c
   39daa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   39dae:	4608      	mov	r0, r1
   39db0:	a902      	add	r1, sp, #8
   39db2:	f000 fe27 	bl	3aa04 <rpc_gnss_serialize_time_and_sv_tow>
   39db6:	e7a2      	b.n	39cfe <gnss_interface_write+0x7a>
   39db8:	4608      	mov	r0, r1
   39dba:	a902      	add	r1, sp, #8
   39dbc:	f000 fe4a 	bl	3aa54 <rpc_gnss_serialize_location>
   39dc0:	e79d      	b.n	39cfe <gnss_interface_write+0x7a>
   39dc2:	4608      	mov	r0, r1
   39dc4:	a902      	add	r1, sp, #8
   39dc6:	f000 fe03 	bl	3a9d0 <rpc_gnss_serialize_nequick>
   39dca:	e798      	b.n	39cfe <gnss_interface_write+0x7a>
   39dcc:	4608      	mov	r0, r1
   39dce:	a902      	add	r1, sp, #8
   39dd0:	f000 fdda 	bl	3a988 <rpc_gnss_serialize_klob>
   39dd4:	e793      	b.n	39cfe <gnss_interface_write+0x7a>
   39dd6:	4608      	mov	r0, r1
   39dd8:	a902      	add	r1, sp, #8
   39dda:	f000 fda3 	bl	3a924 <rpc_gnss_serialize_alm>
   39dde:	e78e      	b.n	39cfe <gnss_interface_write+0x7a>
   39de0:	4608      	mov	r0, r1
   39de2:	a902      	add	r1, sp, #8
   39de4:	f000 fd4c 	bl	3a880 <rpc_gnss_serialize_ephe>
   39de8:	e789      	b.n	39cfe <gnss_interface_write+0x7a>
   39dea:	4608      	mov	r0, r1
   39dec:	a902      	add	r1, sp, #8
   39dee:	f000 fd25 	bl	3a83c <rpc_gnss_serialize_utc>
   39df2:	e784      	b.n	39cfe <gnss_interface_write+0x7a>
   39df4:	b128      	cbz	r0, 39e02 <gnss_interface_write+0x17e>
   39df6:	6803      	ldr	r3, [r0, #0]
   39df8:	b11b      	cbz	r3, 39e02 <gnss_interface_write+0x17e>
   39dfa:	4618      	mov	r0, r3
   39dfc:	f000 fe96 	bl	3ab2c <rpc_gnss_client_data_free>
   39e00:	9800      	ldr	r0, [sp, #0]
   39e02:	f000 fe8b 	bl	3ab1c <rpc_gnss_client_message_free>
   39e06:	2023      	movs	r0, #35	; 0x23
   39e08:	f7f6 f9c4 	bl	30194 <bsd_os_errno_set>
   39e0c:	f04f 30ff 	mov.w	r0, #4294967295
   39e10:	6823      	ldr	r3, [r4, #0]
   39e12:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
   39e16:	6023      	str	r3, [r4, #0]
   39e18:	6823      	ldr	r3, [r4, #0]
   39e1a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   39e1e:	6023      	str	r3, [r4, #0]
   39e20:	b01f      	add	sp, #124	; 0x7c
   39e22:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   39e26:	2016      	movs	r0, #22
   39e28:	f7f6 f9b4 	bl	30194 <bsd_os_errno_set>
   39e2c:	f04f 30ff 	mov.w	r0, #4294967295
   39e30:	b01f      	add	sp, #124	; 0x7c
   39e32:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   39e36:	2039      	movs	r0, #57	; 0x39
   39e38:	f7f6 f9ac 	bl	30194 <bsd_os_errno_set>
   39e3c:	f04f 30ff 	mov.w	r0, #4294967295
   39e40:	e756      	b.n	39cf0 <gnss_interface_write+0x6c>
   39e42:	2009      	movs	r0, #9
   39e44:	f7f6 f9a6 	bl	30194 <bsd_os_errno_set>
   39e48:	f04f 30ff 	mov.w	r0, #4294967295
   39e4c:	e750      	b.n	39cf0 <gnss_interface_write+0x6c>
   39e4e:	202d      	movs	r0, #45	; 0x2d
   39e50:	f7f6 f9a0 	bl	30194 <bsd_os_errno_set>
   39e54:	f04f 30ff 	mov.w	r0, #4294967295
   39e58:	e74a      	b.n	39cf0 <gnss_interface_write+0x6c>
   39e5a:	bf00      	nop
   39e5c:	49765443 	.word	0x49765443
   39e60:	20025530 	.word	0x20025530
   39e64:	20029850 	.word	0x20029850
   39e68:	20025534 	.word	0x20025534
   39e6c:	200324cc 	.word	0x200324cc

00039e70 <gnss_interface_read>:
   39e70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   39e74:	4c50      	ldr	r4, [pc, #320]	; (39fb8 <gnss_interface_read+0x148>)
   39e76:	b0b7      	sub	sp, #220	; 0xdc
   39e78:	42a0      	cmp	r0, r4
   39e7a:	f040 81fe 	bne.w	3a27a <gnss_interface_read+0x40a>
   39e7e:	4688      	mov	r8, r1
   39e80:	2900      	cmp	r1, #0
   39e82:	f000 81f4 	beq.w	3a26e <gnss_interface_read+0x3fe>
   39e86:	2ad7      	cmp	r2, #215	; 0xd7
   39e88:	f240 81f1 	bls.w	3a26e <gnss_interface_read+0x3fe>
   39e8c:	4d4b      	ldr	r5, [pc, #300]	; (39fbc <gnss_interface_read+0x14c>)
   39e8e:	4699      	mov	r9, r3
   39e90:	682b      	ldr	r3, [r5, #0]
   39e92:	b29b      	uxth	r3, r3
   39e94:	2b04      	cmp	r3, #4
   39e96:	d004      	beq.n	39ea2 <gnss_interface_read+0x32>
   39e98:	682b      	ldr	r3, [r5, #0]
   39e9a:	b29b      	uxth	r3, r3
   39e9c:	2b02      	cmp	r3, #2
   39e9e:	f040 81e0 	bne.w	3a262 <gnss_interface_read+0x3f2>
   39ea2:	f1b9 0f00 	cmp.w	r9, #0
   39ea6:	d158      	bne.n	39f5a <gnss_interface_read+0xea>
   39ea8:	2102      	movs	r1, #2
   39eaa:	20b6      	movs	r0, #182	; 0xb6
   39eac:	2400      	movs	r4, #0
   39eae:	682b      	ldr	r3, [r5, #0]
   39eb0:	f10d 020e 	add.w	r2, sp, #14
   39eb4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
   39eb8:	602b      	str	r3, [r5, #0]
   39eba:	f8df a108 	ldr.w	sl, [pc, #264]	; 39fc4 <gnss_interface_read+0x154>
   39ebe:	ab08      	add	r3, sp, #32
   39ec0:	4f3f      	ldr	r7, [pc, #252]	; (39fc0 <gnss_interface_read+0x150>)
   39ec2:	4e3d      	ldr	r6, [pc, #244]	; (39fb8 <gnss_interface_read+0x148>)
   39ec4:	9005      	str	r0, [sp, #20]
   39ec6:	9107      	str	r1, [sp, #28]
   39ec8:	9304      	str	r3, [sp, #16]
   39eca:	9206      	str	r2, [sp, #24]
   39ecc:	ea09 0b01 	and.w	fp, r9, r1
   39ed0:	f8da 0000 	ldr.w	r0, [sl]
   39ed4:	464a      	mov	r2, r9
   39ed6:	6803      	ldr	r3, [r0, #0]
   39ed8:	a904      	add	r1, sp, #16
   39eda:	689b      	ldr	r3, [r3, #8]
   39edc:	4798      	blx	r3
   39ede:	2800      	cmp	r0, #0
   39ee0:	da11      	bge.n	39f06 <gnss_interface_read+0x96>
   39ee2:	f1bb 0f00 	cmp.w	fp, #0
   39ee6:	d141      	bne.n	39f6c <gnss_interface_read+0xfc>
   39ee8:	682b      	ldr	r3, [r5, #0]
   39eea:	03d8      	lsls	r0, r3, #15
   39eec:	d4f0      	bmi.n	39ed0 <gnss_interface_read+0x60>
   39eee:	b10c      	cbz	r4, 39ef4 <gnss_interface_read+0x84>
   39ef0:	e7ee      	b.n	39ed0 <gnss_interface_read+0x60>
   39ef2:	b930      	cbnz	r0, 39f02 <gnss_interface_read+0x92>
   39ef4:	4639      	mov	r1, r7
   39ef6:	4630      	mov	r0, r6
   39ef8:	f7f6 f8b8 	bl	3006c <bsd_os_timedwait>
   39efc:	682b      	ldr	r3, [r5, #0]
   39efe:	03d9      	lsls	r1, r3, #15
   39f00:	d5f7      	bpl.n	39ef2 <gnss_interface_read+0x82>
   39f02:	4604      	mov	r4, r0
   39f04:	e7e4      	b.n	39ed0 <gnss_interface_read+0x60>
   39f06:	f244 0202 	movw	r2, #16386	; 0x4002
   39f0a:	f8bd 300e 	ldrh.w	r3, [sp, #14]
   39f0e:	4293      	cmp	r3, r2
   39f10:	d042      	beq.n	39f98 <gnss_interface_read+0x128>
   39f12:	f244 0201 	movw	r2, #16385	; 0x4001
   39f16:	4293      	cmp	r3, r2
   39f18:	d056      	beq.n	39fc8 <gnss_interface_read+0x158>
   39f1a:	f244 0203 	movw	r2, #16387	; 0x4003
   39f1e:	4293      	cmp	r3, r2
   39f20:	f040 81a5 	bne.w	3a26e <gnss_interface_read+0x3fe>
   39f24:	2203      	movs	r2, #3
   39f26:	2414      	movs	r4, #20
   39f28:	9b08      	ldr	r3, [sp, #32]
   39f2a:	f888 2000 	strb.w	r2, [r8]
   39f2e:	9a09      	ldr	r2, [sp, #36]	; 0x24
   39f30:	f8c8 3008 	str.w	r3, [r8, #8]
   39f34:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
   39f38:	e9c8 2303 	strd	r2, r3, [r8, #12]
   39f3c:	f8da 0000 	ldr.w	r0, [sl]
   39f40:	6803      	ldr	r3, [r0, #0]
   39f42:	68db      	ldr	r3, [r3, #12]
   39f44:	4798      	blx	r3
   39f46:	2800      	cmp	r0, #0
   39f48:	dd03      	ble.n	39f52 <gnss_interface_read+0xe2>
   39f4a:	682b      	ldr	r3, [r5, #0]
   39f4c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   39f50:	602b      	str	r3, [r5, #0]
   39f52:	4620      	mov	r0, r4
   39f54:	b037      	add	sp, #220	; 0xdc
   39f56:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   39f5a:	f019 0f0a 	tst.w	r9, #10
   39f5e:	d1a3      	bne.n	39ea8 <gnss_interface_read+0x38>
   39f60:	202d      	movs	r0, #45	; 0x2d
   39f62:	f7f6 f917 	bl	30194 <bsd_os_errno_set>
   39f66:	f04f 34ff 	mov.w	r4, #4294967295
   39f6a:	e7f2      	b.n	39f52 <gnss_interface_read+0xe2>
   39f6c:	1c42      	adds	r2, r0, #1
   39f6e:	4603      	mov	r3, r0
   39f70:	d1c9      	bne.n	39f06 <gnss_interface_read+0x96>
   39f72:	b93c      	cbnz	r4, 39f84 <gnss_interface_read+0x114>
   39f74:	461c      	mov	r4, r3
   39f76:	2023      	movs	r0, #35	; 0x23
   39f78:	f7f6 f90c 	bl	30194 <bsd_os_errno_set>
   39f7c:	4620      	mov	r0, r4
   39f7e:	b037      	add	sp, #220	; 0xdc
   39f80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   39f84:	9001      	str	r0, [sp, #4]
   39f86:	4620      	mov	r0, r4
   39f88:	f7f6 f904 	bl	30194 <bsd_os_errno_set>
   39f8c:	9b01      	ldr	r3, [sp, #4]
   39f8e:	461c      	mov	r4, r3
   39f90:	4620      	mov	r0, r4
   39f92:	b037      	add	sp, #220	; 0xdc
   39f94:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   39f98:	a808      	add	r0, sp, #32
   39f9a:	f7e3 f8bd 	bl	1d118 <strlen>
   39f9e:	2302      	movs	r3, #2
   39fa0:	1c44      	adds	r4, r0, #1
   39fa2:	b2a4      	uxth	r4, r4
   39fa4:	f808 3b08 	strb.w	r3, [r8], #8
   39fa8:	4622      	mov	r2, r4
   39faa:	a908      	add	r1, sp, #32
   39fac:	4640      	mov	r0, r8
   39fae:	f00a ff4f 	bl	44e50 <memcpy>
   39fb2:	3408      	adds	r4, #8
   39fb4:	e7c2      	b.n	39f3c <gnss_interface_read+0xcc>
   39fb6:	bf00      	nop
   39fb8:	49765443 	.word	0x49765443
   39fbc:	20025530 	.word	0x20025530
   39fc0:	200324cc 	.word	0x200324cc
   39fc4:	20025538 	.word	0x20025538
   39fc8:	2401      	movs	r4, #1
   39fca:	a809      	add	r0, sp, #36	; 0x24
   39fcc:	c80f      	ldmia	r0, {r0, r1, r2, r3}
   39fce:	e9c8 0102 	strd	r0, r1, [r8, #8]
   39fd2:	e9c8 2304 	strd	r2, r3, [r8, #16]
   39fd6:	990d      	ldr	r1, [sp, #52]	; 0x34
   39fd8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   39fda:	f888 4000 	strb.w	r4, [r8]
   39fde:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   39fe0:	f8c8 1018 	str.w	r1, [r8, #24]
   39fe4:	9910      	ldr	r1, [sp, #64]	; 0x40
   39fe6:	f8c8 201c 	str.w	r2, [r8, #28]
   39fea:	f8c8 3020 	str.w	r3, [r8, #32]
   39fee:	f89d 205d 	ldrb.w	r2, [sp, #93]	; 0x5d
   39ff2:	f8dd 304d 	ldr.w	r3, [sp, #77]	; 0x4d
   39ff6:	f8c8 1024 	str.w	r1, [r8, #36]	; 0x24
   39ffa:	f8dd 1051 	ldr.w	r1, [sp, #81]	; 0x51
   39ffe:	f888 2044 	strb.w	r2, [r8, #68]	; 0x44
   3a002:	f8dd 2055 	ldr.w	r2, [sp, #85]	; 0x55
   3a006:	f8c8 3034 	str.w	r3, [r8, #52]	; 0x34
   3a00a:	f8dd 3059 	ldr.w	r3, [sp, #89]	; 0x59
   3a00e:	f8c8 1038 	str.w	r1, [r8, #56]	; 0x38
   3a012:	f8bd 1044 	ldrh.w	r1, [sp, #68]	; 0x44
   3a016:	f8c8 203c 	str.w	r2, [r8, #60]	; 0x3c
   3a01a:	f8c8 3040 	str.w	r3, [r8, #64]	; 0x40
   3a01e:	f8dd 2046 	ldr.w	r2, [sp, #70]	; 0x46
   3a022:	f89d 304a 	ldrb.w	r3, [sp, #74]	; 0x4a
   3a026:	f8a8 1028 	strh.w	r1, [r8, #40]	; 0x28
   3a02a:	f888 302e 	strb.w	r3, [r8, #46]	; 0x2e
   3a02e:	f8c8 202a 	str.w	r2, [r8, #42]	; 0x2a
   3a032:	f89d 004b 	ldrb.w	r0, [sp, #75]	; 0x4b
   3a036:	f89d 204c 	ldrb.w	r2, [sp, #76]	; 0x4c
   3a03a:	9b18      	ldr	r3, [sp, #96]	; 0x60
   3a03c:	f89d 406c 	ldrb.w	r4, [sp, #108]	; 0x6c
   3a040:	ea40 2002 	orr.w	r0, r0, r2, lsl #8
   3a044:	f89d 206b 	ldrb.w	r2, [sp, #107]	; 0x6b
   3a048:	f3c3 210f 	ubfx	r1, r3, #8, #16
   3a04c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   3a04e:	ea42 2204 	orr.w	r2, r2, r4, lsl #8
   3a052:	f8a8 0030 	strh.w	r0, [r8, #48]	; 0x30
   3a056:	f8a8 104a 	strh.w	r1, [r8, #74]	; 0x4a
   3a05a:	f8bd 105e 	ldrh.w	r1, [sp, #94]	; 0x5e
   3a05e:	f3c3 230f 	ubfx	r3, r3, #8, #16
   3a062:	f8a8 2056 	strh.w	r2, [r8, #86]	; 0x56
   3a066:	f89d 2060 	ldrb.w	r2, [sp, #96]	; 0x60
   3a06a:	f8a8 3062 	strh.w	r3, [r8, #98]	; 0x62
   3a06e:	f8dd 3063 	ldr.w	r3, [sp, #99]	; 0x63
   3a072:	f8a8 1046 	strh.w	r1, [r8, #70]	; 0x46
   3a076:	f888 2048 	strb.w	r2, [r8, #72]	; 0x48
   3a07a:	f8bd 2068 	ldrh.w	r2, [sp, #104]	; 0x68
   3a07e:	f89d 1067 	ldrb.w	r1, [sp, #103]	; 0x67
   3a082:	f8c8 304c 	str.w	r3, [r8, #76]	; 0x4c
   3a086:	f89d 306a 	ldrb.w	r3, [sp, #106]	; 0x6a
   3a08a:	f888 1050 	strb.w	r1, [r8, #80]	; 0x50
   3a08e:	f8a8 2052 	strh.w	r2, [r8, #82]	; 0x52
   3a092:	f888 3054 	strb.w	r3, [r8, #84]	; 0x54
   3a096:	f8bd 3072 	ldrh.w	r3, [sp, #114]	; 0x72
   3a09a:	f8dd 106d 	ldr.w	r1, [sp, #109]	; 0x6d
   3a09e:	f89d 2071 	ldrb.w	r2, [sp, #113]	; 0x71
   3a0a2:	f8c8 1058 	str.w	r1, [r8, #88]	; 0x58
   3a0a6:	f888 205c 	strb.w	r2, [r8, #92]	; 0x5c
   3a0aa:	f89d 1074 	ldrb.w	r1, [sp, #116]	; 0x74
   3a0ae:	f8dd 2077 	ldr.w	r2, [sp, #119]	; 0x77
   3a0b2:	f8a8 305e 	strh.w	r3, [r8, #94]	; 0x5e
   3a0b6:	f89d 307b 	ldrb.w	r3, [sp, #123]	; 0x7b
   3a0ba:	f888 1060 	strb.w	r1, [r8, #96]	; 0x60
   3a0be:	f8c8 2064 	str.w	r2, [r8, #100]	; 0x64
   3a0c2:	f888 3068 	strb.w	r3, [r8, #104]	; 0x68
   3a0c6:	f89d 3080 	ldrb.w	r3, [sp, #128]	; 0x80
   3a0ca:	f89d 107f 	ldrb.w	r1, [sp, #127]	; 0x7f
   3a0ce:	9a22      	ldr	r2, [sp, #136]	; 0x88
   3a0d0:	f89d 0094 	ldrb.w	r0, [sp, #148]	; 0x94
   3a0d4:	ea41 2103 	orr.w	r1, r1, r3, lsl #8
   3a0d8:	f89d 3093 	ldrb.w	r3, [sp, #147]	; 0x93
   3a0dc:	f3c2 220f 	ubfx	r2, r2, #8, #16
   3a0e0:	f8a8 106e 	strh.w	r1, [r8, #110]	; 0x6e
   3a0e4:	f8bd 107c 	ldrh.w	r1, [sp, #124]	; 0x7c
   3a0e8:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
   3a0ec:	f8a8 207a 	strh.w	r2, [r8, #122]	; 0x7a
   3a0f0:	f89d 207e 	ldrb.w	r2, [sp, #126]	; 0x7e
   3a0f4:	f8a8 3086 	strh.w	r3, [r8, #134]	; 0x86
   3a0f8:	f8dd 3081 	ldr.w	r3, [sp, #129]	; 0x81
   3a0fc:	f8a8 106a 	strh.w	r1, [r8, #106]	; 0x6a
   3a100:	f888 206c 	strb.w	r2, [r8, #108]	; 0x6c
   3a104:	f8bd 2086 	ldrh.w	r2, [sp, #134]	; 0x86
   3a108:	f89d 1085 	ldrb.w	r1, [sp, #133]	; 0x85
   3a10c:	f8c8 3070 	str.w	r3, [r8, #112]	; 0x70
   3a110:	f89d 3088 	ldrb.w	r3, [sp, #136]	; 0x88
   3a114:	f888 1074 	strb.w	r1, [r8, #116]	; 0x74
   3a118:	f8a8 2076 	strh.w	r2, [r8, #118]	; 0x76
   3a11c:	f888 3078 	strb.w	r3, [r8, #120]	; 0x78
   3a120:	f8bd 3090 	ldrh.w	r3, [sp, #144]	; 0x90
   3a124:	f8dd 108b 	ldr.w	r1, [sp, #139]	; 0x8b
   3a128:	f89d 208f 	ldrb.w	r2, [sp, #143]	; 0x8f
   3a12c:	f8c8 107c 	str.w	r1, [r8, #124]	; 0x7c
   3a130:	f888 2080 	strb.w	r2, [r8, #128]	; 0x80
   3a134:	f89d 1092 	ldrb.w	r1, [sp, #146]	; 0x92
   3a138:	f8dd 2095 	ldr.w	r2, [sp, #149]	; 0x95
   3a13c:	f8a8 3082 	strh.w	r3, [r8, #130]	; 0x82
   3a140:	f89d 3099 	ldrb.w	r3, [sp, #153]	; 0x99
   3a144:	f888 1084 	strb.w	r1, [r8, #132]	; 0x84
   3a148:	f8c8 2088 	str.w	r2, [r8, #136]	; 0x88
   3a14c:	f888 308c 	strb.w	r3, [r8, #140]	; 0x8c
   3a150:	f8bd 009a 	ldrh.w	r0, [sp, #154]	; 0x9a
   3a154:	9b27      	ldr	r3, [sp, #156]	; 0x9c
   3a156:	f89d 40a8 	ldrb.w	r4, [sp, #168]	; 0xa8
   3a15a:	f89d 20a7 	ldrb.w	r2, [sp, #167]	; 0xa7
   3a15e:	f3c3 210f 	ubfx	r1, r3, #8, #16
   3a162:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
   3a164:	ea42 2204 	orr.w	r2, r2, r4, lsl #8
   3a168:	f8a8 1092 	strh.w	r1, [r8, #146]	; 0x92
   3a16c:	f89d 109c 	ldrb.w	r1, [sp, #156]	; 0x9c
   3a170:	f8a8 209e 	strh.w	r2, [r8, #158]	; 0x9e
   3a174:	f3c3 230f 	ubfx	r3, r3, #8, #16
   3a178:	f8dd 209f 	ldr.w	r2, [sp, #159]	; 0x9f
   3a17c:	f8a8 008e 	strh.w	r0, [r8, #142]	; 0x8e
   3a180:	f8a8 30aa 	strh.w	r3, [r8, #170]	; 0xaa
   3a184:	f888 1090 	strb.w	r1, [r8, #144]	; 0x90
   3a188:	f89d 30a3 	ldrb.w	r3, [sp, #163]	; 0xa3
   3a18c:	f8bd 10a4 	ldrh.w	r1, [sp, #164]	; 0xa4
   3a190:	f8c8 2094 	str.w	r2, [r8, #148]	; 0x94
   3a194:	f89d 20a6 	ldrb.w	r2, [sp, #166]	; 0xa6
   3a198:	f888 3098 	strb.w	r3, [r8, #152]	; 0x98
   3a19c:	f8dd 30a9 	ldr.w	r3, [sp, #169]	; 0xa9
   3a1a0:	f8a8 109a 	strh.w	r1, [r8, #154]	; 0x9a
   3a1a4:	f888 209c 	strb.w	r2, [r8, #156]	; 0x9c
   3a1a8:	f8bd 20ae 	ldrh.w	r2, [sp, #174]	; 0xae
   3a1ac:	f89d 10ad 	ldrb.w	r1, [sp, #173]	; 0xad
   3a1b0:	f8c8 30a0 	str.w	r3, [r8, #160]	; 0xa0
   3a1b4:	f89d 30b0 	ldrb.w	r3, [sp, #176]	; 0xb0
   3a1b8:	f888 10a4 	strb.w	r1, [r8, #164]	; 0xa4
   3a1bc:	f8a8 20a6 	strh.w	r2, [r8, #166]	; 0xa6
   3a1c0:	f888 30a8 	strb.w	r3, [r8, #168]	; 0xa8
   3a1c4:	f8bd 30b8 	ldrh.w	r3, [sp, #184]	; 0xb8
   3a1c8:	f8dd 10b3 	ldr.w	r1, [sp, #179]	; 0xb3
   3a1cc:	f89d 20b7 	ldrb.w	r2, [sp, #183]	; 0xb7
   3a1d0:	f8c8 10ac 	str.w	r1, [r8, #172]	; 0xac
   3a1d4:	f888 20b0 	strb.w	r2, [r8, #176]	; 0xb0
   3a1d8:	f8a8 30b2 	strh.w	r3, [r8, #178]	; 0xb2
   3a1dc:	f89d 30bc 	ldrb.w	r3, [sp, #188]	; 0xbc
   3a1e0:	f89d 10bb 	ldrb.w	r1, [sp, #187]	; 0xbb
   3a1e4:	f89d 00d0 	ldrb.w	r0, [sp, #208]	; 0xd0
   3a1e8:	9a31      	ldr	r2, [sp, #196]	; 0xc4
   3a1ea:	ea41 2103 	orr.w	r1, r1, r3, lsl #8
   3a1ee:	f89d 30cf 	ldrb.w	r3, [sp, #207]	; 0xcf
   3a1f2:	f89d 40ba 	ldrb.w	r4, [sp, #186]	; 0xba
   3a1f6:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
   3a1fa:	f3c2 220f 	ubfx	r2, r2, #8, #16
   3a1fe:	f8a8 10b6 	strh.w	r1, [r8, #182]	; 0xb6
   3a202:	f8a8 30ce 	strh.w	r3, [r8, #206]	; 0xce
   3a206:	f888 40b4 	strb.w	r4, [r8, #180]	; 0xb4
   3a20a:	f8a8 20c2 	strh.w	r2, [r8, #194]	; 0xc2
   3a20e:	f8bd 20c2 	ldrh.w	r2, [sp, #194]	; 0xc2
   3a212:	f89d 10c1 	ldrb.w	r1, [sp, #193]	; 0xc1
   3a216:	f89d 30c4 	ldrb.w	r3, [sp, #196]	; 0xc4
   3a21a:	f8dd 00bd 	ldr.w	r0, [sp, #189]	; 0xbd
   3a21e:	f888 10bc 	strb.w	r1, [r8, #188]	; 0xbc
   3a222:	f8a8 20be 	strh.w	r2, [r8, #190]	; 0xbe
   3a226:	f8c8 00b8 	str.w	r0, [r8, #184]	; 0xb8
   3a22a:	f888 30c0 	strb.w	r3, [r8, #192]	; 0xc0
   3a22e:	f8bd 30cc 	ldrh.w	r3, [sp, #204]	; 0xcc
   3a232:	f8dd 10c7 	ldr.w	r1, [sp, #199]	; 0xc7
   3a236:	f89d 20cb 	ldrb.w	r2, [sp, #203]	; 0xcb
   3a23a:	f8c8 10c4 	str.w	r1, [r8, #196]	; 0xc4
   3a23e:	f888 20c8 	strb.w	r2, [r8, #200]	; 0xc8
   3a242:	f89d 10ce 	ldrb.w	r1, [sp, #206]	; 0xce
   3a246:	f8dd 20d1 	ldr.w	r2, [sp, #209]	; 0xd1
   3a24a:	f8a8 30ca 	strh.w	r3, [r8, #202]	; 0xca
   3a24e:	f89d 30d5 	ldrb.w	r3, [sp, #213]	; 0xd5
   3a252:	f888 10cc 	strb.w	r1, [r8, #204]	; 0xcc
   3a256:	f8c8 20d0 	str.w	r2, [r8, #208]	; 0xd0
   3a25a:	f888 30d4 	strb.w	r3, [r8, #212]	; 0xd4
   3a25e:	24d8      	movs	r4, #216	; 0xd8
   3a260:	e66c      	b.n	39f3c <gnss_interface_read+0xcc>
   3a262:	2039      	movs	r0, #57	; 0x39
   3a264:	f7f5 ff96 	bl	30194 <bsd_os_errno_set>
   3a268:	f04f 34ff 	mov.w	r4, #4294967295
   3a26c:	e671      	b.n	39f52 <gnss_interface_read+0xe2>
   3a26e:	2016      	movs	r0, #22
   3a270:	f7f5 ff90 	bl	30194 <bsd_os_errno_set>
   3a274:	f04f 34ff 	mov.w	r4, #4294967295
   3a278:	e66b      	b.n	39f52 <gnss_interface_read+0xe2>
   3a27a:	2009      	movs	r0, #9
   3a27c:	f7f5 ff8a 	bl	30194 <bsd_os_errno_set>
   3a280:	f04f 34ff 	mov.w	r4, #4294967295
   3a284:	e665      	b.n	39f52 <gnss_interface_read+0xe2>
   3a286:	bf00      	nop

0003a288 <gnss_interface_setopt>:
   3a288:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   3a28c:	f241 1402 	movw	r4, #4354	; 0x1102
   3a290:	4222      	tst	r2, r4
   3a292:	b086      	sub	sp, #24
   3a294:	4d9c      	ldr	r5, [pc, #624]	; (3a508 <gnss_interface_setopt+0x280>)
   3a296:	d004      	beq.n	3a2a2 <gnss_interface_setopt+0x1a>
   3a298:	682c      	ldr	r4, [r5, #0]
   3a29a:	b2a4      	uxth	r4, r4
   3a29c:	2c02      	cmp	r4, #2
   3a29e:	f040 8104 	bne.w	3a4aa <gnss_interface_setopt+0x222>
   3a2a2:	682c      	ldr	r4, [r5, #0]
   3a2a4:	0264      	lsls	r4, r4, #9
   3a2a6:	f100 8128 	bmi.w	3a4fa <gnss_interface_setopt+0x272>
   3a2aa:	f5b1 7f01 	cmp.w	r1, #516	; 0x204
   3a2ae:	f040 811e 	bne.w	3a4ee <gnss_interface_setopt+0x266>
   3a2b2:	4996      	ldr	r1, [pc, #600]	; (3a50c <gnss_interface_setopt+0x284>)
   3a2b4:	4288      	cmp	r0, r1
   3a2b6:	f040 8114 	bne.w	3a4e2 <gnss_interface_setopt+0x25a>
   3a2ba:	3a01      	subs	r2, #1
   3a2bc:	2a08      	cmp	r2, #8
   3a2be:	f200 80ec 	bhi.w	3a49a <gnss_interface_setopt+0x212>
   3a2c2:	e8df f012 	tbh	[pc, r2, lsl #1]
   3a2c6:	0075      	.short	0x0075
   3a2c8:	00c200d8 	.word	0x00c200d8
   3a2cc:	008100cc 	.word	0x008100cc
   3a2d0:	0098008c 	.word	0x0098008c
   3a2d4:	000900af 	.word	0x000900af
   3a2d8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   3a2da:	2a01      	cmp	r2, #1
   3a2dc:	f040 80dd 	bne.w	3a49a <gnss_interface_setopt+0x212>
   3a2e0:	f241 1603 	movw	r6, #4355	; 0x1103
   3a2e4:	2240      	movs	r2, #64	; 0x40
   3a2e6:	4637      	mov	r7, r6
   3a2e8:	781b      	ldrb	r3, [r3, #0]
   3a2ea:	9202      	str	r2, [sp, #8]
   3a2ec:	f88d 3015 	strb.w	r3, [sp, #21]
   3a2f0:	682b      	ldr	r3, [r5, #0]
   3a2f2:	2112      	movs	r1, #18
   3a2f4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
   3a2f8:	4668      	mov	r0, sp
   3a2fa:	602b      	str	r3, [r5, #0]
   3a2fc:	f000 fbe4 	bl	3aac8 <rpc_gnss_client_request_alloc>
   3a300:	4604      	mov	r4, r0
   3a302:	9800      	ldr	r0, [sp, #0]
   3a304:	2c00      	cmp	r4, #0
   3a306:	f040 80d6 	bne.w	3a4b6 <gnss_interface_setopt+0x22e>
   3a30a:	2800      	cmp	r0, #0
   3a30c:	f000 80da 	beq.w	3a4c4 <gnss_interface_setopt+0x23c>
   3a310:	2212      	movs	r2, #18
   3a312:	f04f 0876 	mov.w	r8, #118	; 0x76
   3a316:	f04f 0e49 	mov.w	lr, #73	; 0x49
   3a31a:	f04f 0a43 	mov.w	sl, #67	; 0x43
   3a31e:	f04f 0954 	mov.w	r9, #84	; 0x54
   3a322:	f8df c1f0 	ldr.w	ip, [pc, #496]	; 3a514 <gnss_interface_setopt+0x28c>
   3a326:	a906      	add	r1, sp, #24
   3a328:	f8bc 3000 	ldrh.w	r3, [ip]
   3a32c:	f880 800e 	strb.w	r8, [r0, #14]
   3a330:	3301      	adds	r3, #1
   3a332:	b29b      	uxth	r3, r3
   3a334:	ea46 4603 	orr.w	r6, r6, r3, lsl #16
   3a338:	f841 6d14 	str.w	r6, [r1, #-20]!
   3a33c:	7144      	strb	r4, [r0, #5]
   3a33e:	7184      	strb	r4, [r0, #6]
   3a340:	71c4      	strb	r4, [r0, #7]
   3a342:	7204      	strb	r4, [r0, #8]
   3a344:	7244      	strb	r4, [r0, #9]
   3a346:	7284      	strb	r4, [r0, #10]
   3a348:	72c4      	strb	r4, [r0, #11]
   3a34a:	7102      	strb	r2, [r0, #4]
   3a34c:	f880 a00c 	strb.w	sl, [r0, #12]
   3a350:	f880 900d 	strb.w	r9, [r0, #13]
   3a354:	f880 e00f 	strb.w	lr, [r0, #15]
   3a358:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 3a518 <gnss_interface_setopt+0x290>
   3a35c:	6800      	ldr	r0, [r0, #0]
   3a35e:	f8ac 3000 	strh.w	r3, [ip]
   3a362:	f00a fd75 	bl	44e50 <memcpy>
   3a366:	4639      	mov	r1, r7
   3a368:	9800      	ldr	r0, [sp, #0]
   3a36a:	f8c8 4000 	str.w	r4, [r8]
   3a36e:	f000 fbbf 	bl	3aaf0 <rpc_gnss_client_request_send>
   3a372:	2800      	cmp	r0, #0
   3a374:	f040 80ab 	bne.w	3a4ce <gnss_interface_setopt+0x246>
   3a378:	4f65      	ldr	r7, [pc, #404]	; (3a510 <gnss_interface_setopt+0x288>)
   3a37a:	4e64      	ldr	r6, [pc, #400]	; (3a50c <gnss_interface_setopt+0x284>)
   3a37c:	4639      	mov	r1, r7
   3a37e:	4630      	mov	r0, r6
   3a380:	f7f5 fe74 	bl	3006c <bsd_os_timedwait>
   3a384:	682c      	ldr	r4, [r5, #0]
   3a386:	f414 0480 	ands.w	r4, r4, #4194304	; 0x400000
   3a38a:	d1f7      	bne.n	3a37c <gnss_interface_setopt+0xf4>
   3a38c:	f8d8 0000 	ldr.w	r0, [r8]
   3a390:	b118      	cbz	r0, 3a39a <gnss_interface_setopt+0x112>
   3a392:	f000 fbcb 	bl	3ab2c <rpc_gnss_client_data_free>
   3a396:	f8c8 4000 	str.w	r4, [r8]
   3a39a:	682b      	ldr	r3, [r5, #0]
   3a39c:	021b      	lsls	r3, r3, #8
   3a39e:	d576      	bpl.n	3a48e <gnss_interface_setopt+0x206>
   3a3a0:	2000      	movs	r0, #0
   3a3a2:	682b      	ldr	r3, [r5, #0]
   3a3a4:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
   3a3a8:	602b      	str	r3, [r5, #0]
   3a3aa:	b006      	add	sp, #24
   3a3ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   3a3b0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   3a3b2:	2a02      	cmp	r2, #2
   3a3b4:	d171      	bne.n	3a49a <gnss_interface_setopt+0x212>
   3a3b6:	2208      	movs	r2, #8
   3a3b8:	f241 1603 	movw	r6, #4355	; 0x1103
   3a3bc:	881b      	ldrh	r3, [r3, #0]
   3a3be:	9202      	str	r2, [sp, #8]
   3a3c0:	f8ad 300f 	strh.w	r3, [sp, #15]
   3a3c4:	4637      	mov	r7, r6
   3a3c6:	e793      	b.n	3a2f0 <gnss_interface_setopt+0x68>
   3a3c8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   3a3ca:	2a01      	cmp	r2, #1
   3a3cc:	d165      	bne.n	3a49a <gnss_interface_setopt+0x212>
   3a3ce:	f241 1603 	movw	r6, #4355	; 0x1103
   3a3d2:	781b      	ldrb	r3, [r3, #0]
   3a3d4:	9202      	str	r2, [sp, #8]
   3a3d6:	f88d 300c 	strb.w	r3, [sp, #12]
   3a3da:	4637      	mov	r7, r6
   3a3dc:	e788      	b.n	3a2f0 <gnss_interface_setopt+0x68>
   3a3de:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   3a3e0:	2a01      	cmp	r2, #1
   3a3e2:	d15a      	bne.n	3a49a <gnss_interface_setopt+0x212>
   3a3e4:	2202      	movs	r2, #2
   3a3e6:	f241 1603 	movw	r6, #4355	; 0x1103
   3a3ea:	781b      	ldrb	r3, [r3, #0]
   3a3ec:	9202      	str	r2, [sp, #8]
   3a3ee:	f88d 300d 	strb.w	r3, [sp, #13]
   3a3f2:	4637      	mov	r7, r6
   3a3f4:	e77c      	b.n	3a2f0 <gnss_interface_setopt+0x68>
   3a3f6:	682a      	ldr	r2, [r5, #0]
   3a3f8:	b292      	uxth	r2, r2
   3a3fa:	2a02      	cmp	r2, #2
   3a3fc:	d155      	bne.n	3a4aa <gnss_interface_setopt+0x222>
   3a3fe:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   3a400:	2a04      	cmp	r2, #4
   3a402:	d14a      	bne.n	3a49a <gnss_interface_setopt+0x212>
   3a404:	2101      	movs	r1, #1
   3a406:	f241 0604 	movw	r6, #4100	; 0x1004
   3a40a:	682a      	ldr	r2, [r5, #0]
   3a40c:	6818      	ldr	r0, [r3, #0]
   3a40e:	0c13      	lsrs	r3, r2, #16
   3a410:	041b      	lsls	r3, r3, #16
   3a412:	f043 0303 	orr.w	r3, r3, #3
   3a416:	f8cd 0009 	str.w	r0, [sp, #9]
   3a41a:	602b      	str	r3, [r5, #0]
   3a41c:	f88d 1008 	strb.w	r1, [sp, #8]
   3a420:	4637      	mov	r7, r6
   3a422:	e765      	b.n	3a2f0 <gnss_interface_setopt+0x68>
   3a424:	682b      	ldr	r3, [r5, #0]
   3a426:	b29b      	uxth	r3, r3
   3a428:	2b04      	cmp	r3, #4
   3a42a:	d13e      	bne.n	3a4aa <gnss_interface_setopt+0x222>
   3a42c:	2300      	movs	r3, #0
   3a42e:	f241 0604 	movw	r6, #4100	; 0x1004
   3a432:	f88d 3008 	strb.w	r3, [sp, #8]
   3a436:	f88d 3009 	strb.w	r3, [sp, #9]
   3a43a:	f88d 300a 	strb.w	r3, [sp, #10]
   3a43e:	f88d 300b 	strb.w	r3, [sp, #11]
   3a442:	f88d 300c 	strb.w	r3, [sp, #12]
   3a446:	4637      	mov	r7, r6
   3a448:	e752      	b.n	3a2f0 <gnss_interface_setopt+0x68>
   3a44a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   3a44c:	2a01      	cmp	r2, #1
   3a44e:	d124      	bne.n	3a49a <gnss_interface_setopt+0x212>
   3a450:	781b      	ldrb	r3, [r3, #0]
   3a452:	2b01      	cmp	r3, #1
   3a454:	d121      	bne.n	3a49a <gnss_interface_setopt+0x212>
   3a456:	f241 1603 	movw	r6, #4355	; 0x1103
   3a45a:	4637      	mov	r7, r6
   3a45c:	e748      	b.n	3a2f0 <gnss_interface_setopt+0x68>
   3a45e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   3a460:	2a02      	cmp	r2, #2
   3a462:	d11a      	bne.n	3a49a <gnss_interface_setopt+0x212>
   3a464:	2220      	movs	r2, #32
   3a466:	f241 1603 	movw	r6, #4355	; 0x1103
   3a46a:	881b      	ldrh	r3, [r3, #0]
   3a46c:	9202      	str	r2, [sp, #8]
   3a46e:	f8ad 3013 	strh.w	r3, [sp, #19]
   3a472:	4637      	mov	r7, r6
   3a474:	e73c      	b.n	3a2f0 <gnss_interface_setopt+0x68>
   3a476:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   3a478:	2a02      	cmp	r2, #2
   3a47a:	d10e      	bne.n	3a49a <gnss_interface_setopt+0x212>
   3a47c:	2210      	movs	r2, #16
   3a47e:	f241 1603 	movw	r6, #4355	; 0x1103
   3a482:	881b      	ldrh	r3, [r3, #0]
   3a484:	9202      	str	r2, [sp, #8]
   3a486:	f8ad 3011 	strh.w	r3, [sp, #17]
   3a48a:	4637      	mov	r7, r6
   3a48c:	e730      	b.n	3a2f0 <gnss_interface_setopt+0x68>
   3a48e:	200e      	movs	r0, #14
   3a490:	f7f5 fe80 	bl	30194 <bsd_os_errno_set>
   3a494:	f04f 30ff 	mov.w	r0, #4294967295
   3a498:	e783      	b.n	3a3a2 <gnss_interface_setopt+0x11a>
   3a49a:	2016      	movs	r0, #22
   3a49c:	f7f5 fe7a 	bl	30194 <bsd_os_errno_set>
   3a4a0:	f04f 30ff 	mov.w	r0, #4294967295
   3a4a4:	b006      	add	sp, #24
   3a4a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   3a4aa:	200e      	movs	r0, #14
   3a4ac:	f7f5 fe72 	bl	30194 <bsd_os_errno_set>
   3a4b0:	f04f 30ff 	mov.w	r0, #4294967295
   3a4b4:	e779      	b.n	3a3aa <gnss_interface_setopt+0x122>
   3a4b6:	b128      	cbz	r0, 3a4c4 <gnss_interface_setopt+0x23c>
   3a4b8:	6803      	ldr	r3, [r0, #0]
   3a4ba:	b11b      	cbz	r3, 3a4c4 <gnss_interface_setopt+0x23c>
   3a4bc:	4618      	mov	r0, r3
   3a4be:	f000 fb35 	bl	3ab2c <rpc_gnss_client_data_free>
   3a4c2:	9800      	ldr	r0, [sp, #0]
   3a4c4:	f000 fb2a 	bl	3ab1c <rpc_gnss_client_message_free>
   3a4c8:	2023      	movs	r0, #35	; 0x23
   3a4ca:	f7f5 fe63 	bl	30194 <bsd_os_errno_set>
   3a4ce:	682b      	ldr	r3, [r5, #0]
   3a4d0:	200e      	movs	r0, #14
   3a4d2:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
   3a4d6:	602b      	str	r3, [r5, #0]
   3a4d8:	f7f5 fe5c 	bl	30194 <bsd_os_errno_set>
   3a4dc:	f04f 30ff 	mov.w	r0, #4294967295
   3a4e0:	e763      	b.n	3a3aa <gnss_interface_setopt+0x122>
   3a4e2:	2009      	movs	r0, #9
   3a4e4:	f7f5 fe56 	bl	30194 <bsd_os_errno_set>
   3a4e8:	f04f 30ff 	mov.w	r0, #4294967295
   3a4ec:	e75d      	b.n	3a3aa <gnss_interface_setopt+0x122>
   3a4ee:	202a      	movs	r0, #42	; 0x2a
   3a4f0:	f7f5 fe50 	bl	30194 <bsd_os_errno_set>
   3a4f4:	f04f 30ff 	mov.w	r0, #4294967295
   3a4f8:	e757      	b.n	3a3aa <gnss_interface_setopt+0x122>
   3a4fa:	2073      	movs	r0, #115	; 0x73
   3a4fc:	f7f5 fe4a 	bl	30194 <bsd_os_errno_set>
   3a500:	f04f 30ff 	mov.w	r0, #4294967295
   3a504:	e751      	b.n	3a3aa <gnss_interface_setopt+0x122>
   3a506:	bf00      	nop
   3a508:	20025530 	.word	0x20025530
   3a50c:	49765443 	.word	0x49765443
   3a510:	200324cc 	.word	0x200324cc
   3a514:	20029850 	.word	0x20029850
   3a518:	20025534 	.word	0x20025534

0003a51c <gnss_interface_getopt>:
   3a51c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   3a520:	4c81      	ldr	r4, [pc, #516]	; (3a728 <gnss_interface_getopt+0x20c>)
   3a522:	b087      	sub	sp, #28
   3a524:	6825      	ldr	r5, [r4, #0]
   3a526:	4698      	mov	r8, r3
   3a528:	b2ad      	uxth	r5, r5
   3a52a:	2d02      	cmp	r5, #2
   3a52c:	9b10      	ldr	r3, [sp, #64]	; 0x40
   3a52e:	f040 80dd 	bne.w	3a6ec <gnss_interface_getopt+0x1d0>
   3a532:	6825      	ldr	r5, [r4, #0]
   3a534:	03ee      	lsls	r6, r5, #15
   3a536:	f100 80eb 	bmi.w	3a710 <gnss_interface_getopt+0x1f4>
   3a53a:	6825      	ldr	r5, [r4, #0]
   3a53c:	01ed      	lsls	r5, r5, #7
   3a53e:	f100 80ed 	bmi.w	3a71c <gnss_interface_getopt+0x200>
   3a542:	f5b1 7f01 	cmp.w	r1, #516	; 0x204
   3a546:	f040 80d7 	bne.w	3a6f8 <gnss_interface_getopt+0x1dc>
   3a54a:	4978      	ldr	r1, [pc, #480]	; (3a72c <gnss_interface_getopt+0x210>)
   3a54c:	4288      	cmp	r0, r1
   3a54e:	f040 80d9 	bne.w	3a704 <gnss_interface_getopt+0x1e8>
   3a552:	f1b8 0f00 	cmp.w	r8, #0
   3a556:	d00b      	beq.n	3a570 <gnss_interface_getopt+0x54>
   3a558:	b153      	cbz	r3, 3a570 <gnss_interface_getopt+0x54>
   3a55a:	1e57      	subs	r7, r2, #1
   3a55c:	2f05      	cmp	r7, #5
   3a55e:	d807      	bhi.n	3a570 <gnss_interface_getopt+0x54>
   3a560:	e8df f007 	tbb	[pc, r7]
   3a564:	0f030f0f 	.word	0x0f030f0f
   3a568:	0303      	.short	0x0303
   3a56a:	681b      	ldr	r3, [r3, #0]
   3a56c:	2b01      	cmp	r3, #1
   3a56e:	d00b      	beq.n	3a588 <gnss_interface_getopt+0x6c>
   3a570:	2016      	movs	r0, #22
   3a572:	f7f5 fe0f 	bl	30194 <bsd_os_errno_set>
   3a576:	f04f 35ff 	mov.w	r5, #4294967295
   3a57a:	4628      	mov	r0, r5
   3a57c:	b007      	add	sp, #28
   3a57e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3a582:	681b      	ldr	r3, [r3, #0]
   3a584:	2b02      	cmp	r3, #2
   3a586:	d1f3      	bne.n	3a570 <gnss_interface_getopt+0x54>
   3a588:	6823      	ldr	r3, [r4, #0]
   3a58a:	2212      	movs	r2, #18
   3a58c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
   3a590:	2100      	movs	r1, #0
   3a592:	a801      	add	r0, sp, #4
   3a594:	6023      	str	r3, [r4, #0]
   3a596:	f00a fc95 	bl	44ec4 <memset>
   3a59a:	2112      	movs	r1, #18
   3a59c:	4668      	mov	r0, sp
   3a59e:	f000 fa93 	bl	3aac8 <rpc_gnss_client_request_alloc>
   3a5a2:	4605      	mov	r5, r0
   3a5a4:	9800      	ldr	r0, [sp, #0]
   3a5a6:	2d00      	cmp	r5, #0
   3a5a8:	f040 808a 	bne.w	3a6c0 <gnss_interface_getopt+0x1a4>
   3a5ac:	2800      	cmp	r0, #0
   3a5ae:	f000 808e 	beq.w	3a6ce <gnss_interface_getopt+0x1b2>
   3a5b2:	f241 1602 	movw	r6, #4354	; 0x1102
   3a5b6:	f04f 0e49 	mov.w	lr, #73	; 0x49
   3a5ba:	2212      	movs	r2, #18
   3a5bc:	f04f 0976 	mov.w	r9, #118	; 0x76
   3a5c0:	f04f 0b43 	mov.w	fp, #67	; 0x43
   3a5c4:	f04f 0a54 	mov.w	sl, #84	; 0x54
   3a5c8:	f8df c168 	ldr.w	ip, [pc, #360]	; 3a734 <gnss_interface_getopt+0x218>
   3a5cc:	f880 e00f 	strb.w	lr, [r0, #15]
   3a5d0:	f8bc 3000 	ldrh.w	r3, [ip]
   3a5d4:	f880 900e 	strb.w	r9, [r0, #14]
   3a5d8:	3301      	adds	r3, #1
   3a5da:	b29b      	uxth	r3, r3
   3a5dc:	ea46 4e03 	orr.w	lr, r6, r3, lsl #16
   3a5e0:	f8cd e004 	str.w	lr, [sp, #4]
   3a5e4:	7145      	strb	r5, [r0, #5]
   3a5e6:	7185      	strb	r5, [r0, #6]
   3a5e8:	71c5      	strb	r5, [r0, #7]
   3a5ea:	7205      	strb	r5, [r0, #8]
   3a5ec:	7245      	strb	r5, [r0, #9]
   3a5ee:	7285      	strb	r5, [r0, #10]
   3a5f0:	72c5      	strb	r5, [r0, #11]
   3a5f2:	a901      	add	r1, sp, #4
   3a5f4:	7102      	strb	r2, [r0, #4]
   3a5f6:	f880 b00c 	strb.w	fp, [r0, #12]
   3a5fa:	f880 a00d 	strb.w	sl, [r0, #13]
   3a5fe:	f8df 9138 	ldr.w	r9, [pc, #312]	; 3a738 <gnss_interface_getopt+0x21c>
   3a602:	6800      	ldr	r0, [r0, #0]
   3a604:	f8ac 3000 	strh.w	r3, [ip]
   3a608:	f00a fc22 	bl	44e50 <memcpy>
   3a60c:	4631      	mov	r1, r6
   3a60e:	9800      	ldr	r0, [sp, #0]
   3a610:	f8c9 5000 	str.w	r5, [r9]
   3a614:	f000 fa6c 	bl	3aaf0 <rpc_gnss_client_request_send>
   3a618:	2800      	cmp	r0, #0
   3a61a:	d15d      	bne.n	3a6d8 <gnss_interface_getopt+0x1bc>
   3a61c:	4e44      	ldr	r6, [pc, #272]	; (3a730 <gnss_interface_getopt+0x214>)
   3a61e:	4d43      	ldr	r5, [pc, #268]	; (3a72c <gnss_interface_getopt+0x210>)
   3a620:	4631      	mov	r1, r6
   3a622:	4628      	mov	r0, r5
   3a624:	f7f5 fd22 	bl	3006c <bsd_os_timedwait>
   3a628:	6823      	ldr	r3, [r4, #0]
   3a62a:	01db      	lsls	r3, r3, #7
   3a62c:	d4f8      	bmi.n	3a620 <gnss_interface_getopt+0x104>
   3a62e:	f8d9 0000 	ldr.w	r0, [r9]
   3a632:	b1d8      	cbz	r0, 3a66c <gnss_interface_getopt+0x150>
   3a634:	6825      	ldr	r5, [r4, #0]
   3a636:	f015 7500 	ands.w	r5, r5, #33554432	; 0x2000000
   3a63a:	d00f      	beq.n	3a65c <gnss_interface_getopt+0x140>
   3a63c:	2f05      	cmp	r7, #5
   3a63e:	d837      	bhi.n	3a6b0 <gnss_interface_getopt+0x194>
   3a640:	e8df f007 	tbb	[pc, r7]
   3a644:	2b26201a 	.word	0x2b26201a
   3a648:	0331      	.short	0x0331
   3a64a:	2500      	movs	r5, #0
   3a64c:	7b43      	ldrb	r3, [r0, #13]
   3a64e:	f888 3000 	strb.w	r3, [r8]
   3a652:	f000 fa6b 	bl	3ab2c <rpc_gnss_client_data_free>
   3a656:	2300      	movs	r3, #0
   3a658:	f8c9 3000 	str.w	r3, [r9]
   3a65c:	6823      	ldr	r3, [r4, #0]
   3a65e:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
   3a662:	6023      	str	r3, [r4, #0]
   3a664:	4628      	mov	r0, r5
   3a666:	b007      	add	sp, #28
   3a668:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3a66c:	6823      	ldr	r3, [r4, #0]
   3a66e:	4605      	mov	r5, r0
   3a670:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
   3a674:	6023      	str	r3, [r4, #0]
   3a676:	e7f5      	b.n	3a664 <gnss_interface_getopt+0x148>
   3a678:	f8b0 300f 	ldrh.w	r3, [r0, #15]
   3a67c:	2500      	movs	r5, #0
   3a67e:	f8a8 3000 	strh.w	r3, [r8]
   3a682:	e7e6      	b.n	3a652 <gnss_interface_getopt+0x136>
   3a684:	f8b0 3011 	ldrh.w	r3, [r0, #17]
   3a688:	2500      	movs	r5, #0
   3a68a:	f8a8 3000 	strh.w	r3, [r8]
   3a68e:	e7e0      	b.n	3a652 <gnss_interface_getopt+0x136>
   3a690:	7b83      	ldrb	r3, [r0, #14]
   3a692:	2500      	movs	r5, #0
   3a694:	f888 3000 	strb.w	r3, [r8]
   3a698:	e7db      	b.n	3a652 <gnss_interface_getopt+0x136>
   3a69a:	f8b0 3013 	ldrh.w	r3, [r0, #19]
   3a69e:	2500      	movs	r5, #0
   3a6a0:	f8a8 3000 	strh.w	r3, [r8]
   3a6a4:	e7d5      	b.n	3a652 <gnss_interface_getopt+0x136>
   3a6a6:	7b03      	ldrb	r3, [r0, #12]
   3a6a8:	2500      	movs	r5, #0
   3a6aa:	f888 3000 	strb.w	r3, [r8]
   3a6ae:	e7d0      	b.n	3a652 <gnss_interface_getopt+0x136>
   3a6b0:	2016      	movs	r0, #22
   3a6b2:	f7f5 fd6f 	bl	30194 <bsd_os_errno_set>
   3a6b6:	f04f 35ff 	mov.w	r5, #4294967295
   3a6ba:	f8d9 0000 	ldr.w	r0, [r9]
   3a6be:	e7c8      	b.n	3a652 <gnss_interface_getopt+0x136>
   3a6c0:	b128      	cbz	r0, 3a6ce <gnss_interface_getopt+0x1b2>
   3a6c2:	6803      	ldr	r3, [r0, #0]
   3a6c4:	b11b      	cbz	r3, 3a6ce <gnss_interface_getopt+0x1b2>
   3a6c6:	4618      	mov	r0, r3
   3a6c8:	f000 fa30 	bl	3ab2c <rpc_gnss_client_data_free>
   3a6cc:	9800      	ldr	r0, [sp, #0]
   3a6ce:	f000 fa25 	bl	3ab1c <rpc_gnss_client_message_free>
   3a6d2:	2023      	movs	r0, #35	; 0x23
   3a6d4:	f7f5 fd5e 	bl	30194 <bsd_os_errno_set>
   3a6d8:	6823      	ldr	r3, [r4, #0]
   3a6da:	200e      	movs	r0, #14
   3a6dc:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
   3a6e0:	6023      	str	r3, [r4, #0]
   3a6e2:	f04f 35ff 	mov.w	r5, #4294967295
   3a6e6:	f7f5 fd55 	bl	30194 <bsd_os_errno_set>
   3a6ea:	e746      	b.n	3a57a <gnss_interface_getopt+0x5e>
   3a6ec:	200e      	movs	r0, #14
   3a6ee:	f7f5 fd51 	bl	30194 <bsd_os_errno_set>
   3a6f2:	f04f 35ff 	mov.w	r5, #4294967295
   3a6f6:	e740      	b.n	3a57a <gnss_interface_getopt+0x5e>
   3a6f8:	202a      	movs	r0, #42	; 0x2a
   3a6fa:	f7f5 fd4b 	bl	30194 <bsd_os_errno_set>
   3a6fe:	f04f 35ff 	mov.w	r5, #4294967295
   3a702:	e73a      	b.n	3a57a <gnss_interface_getopt+0x5e>
   3a704:	2009      	movs	r0, #9
   3a706:	f7f5 fd45 	bl	30194 <bsd_os_errno_set>
   3a70a:	f04f 35ff 	mov.w	r5, #4294967295
   3a70e:	e734      	b.n	3a57a <gnss_interface_getopt+0x5e>
   3a710:	2005      	movs	r0, #5
   3a712:	f7f5 fd3f 	bl	30194 <bsd_os_errno_set>
   3a716:	f04f 35ff 	mov.w	r5, #4294967295
   3a71a:	e72e      	b.n	3a57a <gnss_interface_getopt+0x5e>
   3a71c:	2073      	movs	r0, #115	; 0x73
   3a71e:	f7f5 fd39 	bl	30194 <bsd_os_errno_set>
   3a722:	f04f 35ff 	mov.w	r5, #4294967295
   3a726:	e728      	b.n	3a57a <gnss_interface_getopt+0x5e>
   3a728:	20025530 	.word	0x20025530
   3a72c:	49765443 	.word	0x49765443
   3a730:	200324cc 	.word	0x200324cc
   3a734:	20029850 	.word	0x20029850
   3a738:	20025534 	.word	0x20025534

0003a73c <gnss_interface_init>:
   3a73c:	2100      	movs	r1, #0
   3a73e:	b538      	push	{r3, r4, r5, lr}
   3a740:	4c09      	ldr	r4, [pc, #36]	; (3a768 <gnss_interface_init+0x2c>)
   3a742:	4d0a      	ldr	r5, [pc, #40]	; (3a76c <gnss_interface_init+0x30>)
   3a744:	6822      	ldr	r2, [r4, #0]
   3a746:	480a      	ldr	r0, [pc, #40]	; (3a770 <gnss_interface_init+0x34>)
   3a748:	4b0a      	ldr	r3, [pc, #40]	; (3a774 <gnss_interface_init+0x38>)
   3a74a:	402a      	ands	r2, r5
   3a74c:	6022      	str	r2, [r4, #0]
   3a74e:	8001      	strh	r1, [r0, #0]
   3a750:	6019      	str	r1, [r3, #0]
   3a752:	f000 f9b3 	bl	3aabc <rpc_gnss_client_init>
   3a756:	b928      	cbnz	r0, 3a764 <gnss_interface_init+0x28>
   3a758:	6823      	ldr	r3, [r4, #0]
   3a75a:	402b      	ands	r3, r5
   3a75c:	f043 0301 	orr.w	r3, r3, #1
   3a760:	6023      	str	r3, [r4, #0]
   3a762:	bd38      	pop	{r3, r4, r5, pc}
   3a764:	2003      	movs	r0, #3
   3a766:	bd38      	pop	{r3, r4, r5, pc}
   3a768:	20025530 	.word	0x20025530
   3a76c:	ffff0000 	.word	0xffff0000
   3a770:	20029850 	.word	0x20029850
   3a774:	20025534 	.word	0x20025534

0003a778 <gnss_interface_open>:
   3a778:	2902      	cmp	r1, #2
   3a77a:	b510      	push	{r4, lr}
   3a77c:	d121      	bne.n	3a7c2 <gnss_interface_open+0x4a>
   3a77e:	4c14      	ldr	r4, [pc, #80]	; (3a7d0 <gnss_interface_open+0x58>)
   3a780:	6823      	ldr	r3, [r4, #0]
   3a782:	b29b      	uxth	r3, r3
   3a784:	2b01      	cmp	r3, #1
   3a786:	d116      	bne.n	3a7b6 <gnss_interface_open+0x3e>
   3a788:	6823      	ldr	r3, [r4, #0]
   3a78a:	4608      	mov	r0, r1
   3a78c:	0c1b      	lsrs	r3, r3, #16
   3a78e:	041b      	lsls	r3, r3, #16
   3a790:	f043 0302 	orr.w	r3, r3, #2
   3a794:	2200      	movs	r2, #0
   3a796:	490f      	ldr	r1, [pc, #60]	; (3a7d4 <gnss_interface_open+0x5c>)
   3a798:	6023      	str	r3, [r4, #0]
   3a79a:	f000 faad 	bl	3acf8 <packet_handler_create>
   3a79e:	4a0e      	ldr	r2, [pc, #56]	; (3a7d8 <gnss_interface_open+0x60>)
   3a7a0:	6010      	str	r0, [r2, #0]
   3a7a2:	b140      	cbz	r0, 3a7b6 <gnss_interface_open+0x3e>
   3a7a4:	6823      	ldr	r3, [r4, #0]
   3a7a6:	6802      	ldr	r2, [r0, #0]
   3a7a8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   3a7ac:	6812      	ldr	r2, [r2, #0]
   3a7ae:	6023      	str	r3, [r4, #0]
   3a7b0:	4790      	blx	r2
   3a7b2:	480a      	ldr	r0, [pc, #40]	; (3a7dc <gnss_interface_open+0x64>)
   3a7b4:	bd10      	pop	{r4, pc}
   3a7b6:	200e      	movs	r0, #14
   3a7b8:	f7f5 fcec 	bl	30194 <bsd_os_errno_set>
   3a7bc:	f04f 30ff 	mov.w	r0, #4294967295
   3a7c0:	bd10      	pop	{r4, pc}
   3a7c2:	2029      	movs	r0, #41	; 0x29
   3a7c4:	f7f5 fce6 	bl	30194 <bsd_os_errno_set>
   3a7c8:	f04f 30ff 	mov.w	r0, #4294967295
   3a7cc:	bd10      	pop	{r4, pc}
   3a7ce:	bf00      	nop
   3a7d0:	20025530 	.word	0x20025530
   3a7d4:	00039ac1 	.word	0x00039ac1
   3a7d8:	20025538 	.word	0x20025538
   3a7dc:	49765443 	.word	0x49765443

0003a7e0 <gnss_interface_close>:
   3a7e0:	b530      	push	{r4, r5, lr}
   3a7e2:	4b13      	ldr	r3, [pc, #76]	; (3a830 <gnss_interface_close+0x50>)
   3a7e4:	b083      	sub	sp, #12
   3a7e6:	4298      	cmp	r0, r3
   3a7e8:	d11c      	bne.n	3a824 <gnss_interface_close+0x44>
   3a7ea:	4c12      	ldr	r4, [pc, #72]	; (3a834 <gnss_interface_close+0x54>)
   3a7ec:	6823      	ldr	r3, [r4, #0]
   3a7ee:	b29b      	uxth	r3, r3
   3a7f0:	2b04      	cmp	r3, #4
   3a7f2:	d00f      	beq.n	3a814 <gnss_interface_close+0x34>
   3a7f4:	4d10      	ldr	r5, [pc, #64]	; (3a838 <gnss_interface_close+0x58>)
   3a7f6:	6828      	ldr	r0, [r5, #0]
   3a7f8:	b118      	cbz	r0, 3a802 <gnss_interface_close+0x22>
   3a7fa:	f000 fa9d 	bl	3ad38 <packet_handler_delete>
   3a7fe:	2300      	movs	r3, #0
   3a800:	602b      	str	r3, [r5, #0]
   3a802:	2000      	movs	r0, #0
   3a804:	6823      	ldr	r3, [r4, #0]
   3a806:	0c1b      	lsrs	r3, r3, #16
   3a808:	041b      	lsls	r3, r3, #16
   3a80a:	f043 0301 	orr.w	r3, r3, #1
   3a80e:	6023      	str	r3, [r4, #0]
   3a810:	b003      	add	sp, #12
   3a812:	bd30      	pop	{r4, r5, pc}
   3a814:	2300      	movs	r3, #0
   3a816:	2208      	movs	r2, #8
   3a818:	9300      	str	r3, [sp, #0]
   3a81a:	f44f 7101 	mov.w	r1, #516	; 0x204
   3a81e:	f7fc fe31 	bl	37484 <nrf_setsockopt>
   3a822:	e7e7      	b.n	3a7f4 <gnss_interface_close+0x14>
   3a824:	2009      	movs	r0, #9
   3a826:	f7f5 fcb5 	bl	30194 <bsd_os_errno_set>
   3a82a:	f04f 30ff 	mov.w	r0, #4294967295
   3a82e:	e7ef      	b.n	3a810 <gnss_interface_close+0x30>
   3a830:	49765443 	.word	0x49765443
   3a834:	20025530 	.word	0x20025530
   3a838:	20025538 	.word	0x20025538

0003a83c <rpc_gnss_serialize_utc>:
   3a83c:	4603      	mov	r3, r0
   3a83e:	b1d8      	cbz	r0, 3a878 <rpc_gnss_serialize_utc+0x3c>
   3a840:	b1d1      	cbz	r1, 3a878 <rpc_gnss_serialize_utc+0x3c>
   3a842:	2000      	movs	r0, #0
   3a844:	2201      	movs	r2, #1
   3a846:	7048      	strb	r0, [r1, #1]
   3a848:	700a      	strb	r2, [r1, #0]
   3a84a:	685a      	ldr	r2, [r3, #4]
   3a84c:	2010      	movs	r0, #16
   3a84e:	f8c1 2006 	str.w	r2, [r1, #6]
   3a852:	681a      	ldr	r2, [r3, #0]
   3a854:	f8c1 2002 	str.w	r2, [r1, #2]
   3a858:	f993 200a 	ldrsb.w	r2, [r3, #10]
   3a85c:	730a      	strb	r2, [r1, #12]
   3a85e:	f993 200d 	ldrsb.w	r2, [r3, #13]
   3a862:	73ca      	strb	r2, [r1, #15]
   3a864:	f993 200c 	ldrsb.w	r2, [r3, #12]
   3a868:	738a      	strb	r2, [r1, #14]
   3a86a:	7a1a      	ldrb	r2, [r3, #8]
   3a86c:	728a      	strb	r2, [r1, #10]
   3a86e:	7ada      	ldrb	r2, [r3, #11]
   3a870:	734a      	strb	r2, [r1, #13]
   3a872:	7a5b      	ldrb	r3, [r3, #9]
   3a874:	72cb      	strb	r3, [r1, #11]
   3a876:	4770      	bx	lr
   3a878:	f04f 30ff 	mov.w	r0, #4294967295
   3a87c:	4770      	bx	lr
   3a87e:	bf00      	nop

0003a880 <rpc_gnss_serialize_ephe>:
   3a880:	4603      	mov	r3, r0
   3a882:	2800      	cmp	r0, #0
   3a884:	d04b      	beq.n	3a91e <rpc_gnss_serialize_ephe+0x9e>
   3a886:	2900      	cmp	r1, #0
   3a888:	d049      	beq.n	3a91e <rpc_gnss_serialize_ephe+0x9e>
   3a88a:	2000      	movs	r0, #0
   3a88c:	2202      	movs	r2, #2
   3a88e:	7048      	strb	r0, [r1, #1]
   3a890:	700a      	strb	r2, [r1, #0]
   3a892:	68da      	ldr	r2, [r3, #12]
   3a894:	2040      	movs	r0, #64	; 0x40
   3a896:	f8c1 200b 	str.w	r2, [r1, #11]
   3a89a:	f9b3 2008 	ldrsh.w	r2, [r3, #8]
   3a89e:	f8a1 2009 	strh.w	r2, [r1, #9]
   3a8a2:	f993 2006 	ldrsb.w	r2, [r3, #6]
   3a8a6:	720a      	strb	r2, [r1, #8]
   3a8a8:	f9b3 2044 	ldrsh.w	r2, [r3, #68]	; 0x44
   3a8ac:	878a      	strh	r2, [r1, #60]	; 0x3c
   3a8ae:	f9b3 203e 	ldrsh.w	r2, [r3, #62]	; 0x3e
   3a8b2:	86ca      	strh	r2, [r1, #54]	; 0x36
   3a8b4:	f9b3 2042 	ldrsh.w	r2, [r3, #66]	; 0x42
   3a8b8:	874a      	strh	r2, [r1, #58]	; 0x3a
   3a8ba:	f9b3 203c 	ldrsh.w	r2, [r3, #60]	; 0x3c
   3a8be:	868a      	strh	r2, [r1, #52]	; 0x34
   3a8c0:	f9b3 2046 	ldrsh.w	r2, [r3, #70]	; 0x46
   3a8c4:	87ca      	strh	r2, [r1, #62]	; 0x3e
   3a8c6:	f9b3 2040 	ldrsh.w	r2, [r3, #64]	; 0x40
   3a8ca:	870a      	strh	r2, [r1, #56]	; 0x38
   3a8cc:	f9b3 201c 	ldrsh.w	r2, [r3, #28]
   3a8d0:	830a      	strh	r2, [r1, #24]
   3a8d2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   3a8d4:	f8c1 2022 	str.w	r2, [r1, #34]	; 0x22
   3a8d8:	7c9a      	ldrb	r2, [r3, #18]
   3a8da:	744a      	strb	r2, [r1, #17]
   3a8dc:	785a      	ldrb	r2, [r3, #1]
   3a8de:	70ca      	strb	r2, [r1, #3]
   3a8e0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
   3a8e2:	62ca      	str	r2, [r1, #44]	; 0x2c
   3a8e4:	f9b3 202c 	ldrsh.w	r2, [r3, #44]	; 0x2c
   3a8e8:	84ca      	strh	r2, [r1, #38]	; 0x26
   3a8ea:	885a      	ldrh	r2, [r3, #2]
   3a8ec:	808a      	strh	r2, [r1, #4]
   3a8ee:	6a1a      	ldr	r2, [r3, #32]
   3a8f0:	f8c1 201a 	str.w	r2, [r1, #26]
   3a8f4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
   3a8f6:	630a      	str	r2, [r1, #48]	; 0x30
   3a8f8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
   3a8fa:	f8c1 201e 	str.w	r2, [r1, #30]
   3a8fe:	6b1a      	ldr	r2, [r3, #48]	; 0x30
   3a900:	628a      	str	r2, [r1, #40]	; 0x28
   3a902:	781a      	ldrb	r2, [r3, #0]
   3a904:	708a      	strb	r2, [r1, #2]
   3a906:	f993 2010 	ldrsb.w	r2, [r3, #16]
   3a90a:	73ca      	strb	r2, [r1, #15]
   3a90c:	889a      	ldrh	r2, [r3, #4]
   3a90e:	80ca      	strh	r2, [r1, #6]
   3a910:	8a9a      	ldrh	r2, [r3, #20]
   3a912:	824a      	strh	r2, [r1, #18]
   3a914:	7c5a      	ldrb	r2, [r3, #17]
   3a916:	740a      	strb	r2, [r1, #16]
   3a918:	699b      	ldr	r3, [r3, #24]
   3a91a:	614b      	str	r3, [r1, #20]
   3a91c:	4770      	bx	lr
   3a91e:	f04f 30ff 	mov.w	r0, #4294967295
   3a922:	4770      	bx	lr

0003a924 <rpc_gnss_serialize_alm>:
   3a924:	4603      	mov	r3, r0
   3a926:	b360      	cbz	r0, 3a982 <rpc_gnss_serialize_alm+0x5e>
   3a928:	b359      	cbz	r1, 3a982 <rpc_gnss_serialize_alm+0x5e>
   3a92a:	2000      	movs	r0, #0
   3a92c:	2203      	movs	r2, #3
   3a92e:	7048      	strb	r0, [r1, #1]
   3a930:	700a      	strb	r2, [r1, #0]
   3a932:	f9b3 201c 	ldrsh.w	r2, [r3, #28]
   3a936:	2021      	movs	r0, #33	; 0x21
   3a938:	f8a1 201d 	strh.w	r2, [r1, #29]
   3a93c:	f9b3 201e 	ldrsh.w	r2, [r3, #30]
   3a940:	f8a1 201f 	strh.w	r2, [r1, #31]
   3a944:	f9b3 2006 	ldrsh.w	r2, [r3, #6]
   3a948:	810a      	strh	r2, [r1, #8]
   3a94a:	889a      	ldrh	r2, [r3, #4]
   3a94c:	80ca      	strh	r2, [r1, #6]
   3a94e:	78da      	ldrb	r2, [r3, #3]
   3a950:	714a      	strb	r2, [r1, #5]
   3a952:	699a      	ldr	r2, [r3, #24]
   3a954:	f8c1 2019 	str.w	r2, [r1, #25]
   3a958:	691a      	ldr	r2, [r3, #16]
   3a95a:	f8c1 2011 	str.w	r2, [r1, #17]
   3a95e:	f9b3 2008 	ldrsh.w	r2, [r3, #8]
   3a962:	814a      	strh	r2, [r1, #10]
   3a964:	68da      	ldr	r2, [r3, #12]
   3a966:	f8c1 200d 	str.w	r2, [r1, #13]
   3a96a:	7a9a      	ldrb	r2, [r3, #10]
   3a96c:	730a      	strb	r2, [r1, #12]
   3a96e:	781a      	ldrb	r2, [r3, #0]
   3a970:	708a      	strb	r2, [r1, #2]
   3a972:	789a      	ldrb	r2, [r3, #2]
   3a974:	710a      	strb	r2, [r1, #4]
   3a976:	695a      	ldr	r2, [r3, #20]
   3a978:	f8c1 2015 	str.w	r2, [r1, #21]
   3a97c:	785b      	ldrb	r3, [r3, #1]
   3a97e:	70cb      	strb	r3, [r1, #3]
   3a980:	4770      	bx	lr
   3a982:	f04f 30ff 	mov.w	r0, #4294967295
   3a986:	4770      	bx	lr

0003a988 <rpc_gnss_serialize_klob>:
   3a988:	4603      	mov	r3, r0
   3a98a:	b1f0      	cbz	r0, 3a9ca <rpc_gnss_serialize_klob+0x42>
   3a98c:	b1e9      	cbz	r1, 3a9ca <rpc_gnss_serialize_klob+0x42>
   3a98e:	2000      	movs	r0, #0
   3a990:	2204      	movs	r2, #4
   3a992:	7048      	strb	r0, [r1, #1]
   3a994:	700a      	strb	r2, [r1, #0]
   3a996:	f993 2000 	ldrsb.w	r2, [r3]
   3a99a:	200a      	movs	r0, #10
   3a99c:	708a      	strb	r2, [r1, #2]
   3a99e:	f993 2001 	ldrsb.w	r2, [r3, #1]
   3a9a2:	70ca      	strb	r2, [r1, #3]
   3a9a4:	f993 2002 	ldrsb.w	r2, [r3, #2]
   3a9a8:	710a      	strb	r2, [r1, #4]
   3a9aa:	f993 2003 	ldrsb.w	r2, [r3, #3]
   3a9ae:	714a      	strb	r2, [r1, #5]
   3a9b0:	f993 2004 	ldrsb.w	r2, [r3, #4]
   3a9b4:	718a      	strb	r2, [r1, #6]
   3a9b6:	f993 2005 	ldrsb.w	r2, [r3, #5]
   3a9ba:	71ca      	strb	r2, [r1, #7]
   3a9bc:	f993 2006 	ldrsb.w	r2, [r3, #6]
   3a9c0:	720a      	strb	r2, [r1, #8]
   3a9c2:	f993 3007 	ldrsb.w	r3, [r3, #7]
   3a9c6:	724b      	strb	r3, [r1, #9]
   3a9c8:	4770      	bx	lr
   3a9ca:	f04f 30ff 	mov.w	r0, #4294967295
   3a9ce:	4770      	bx	lr

0003a9d0 <rpc_gnss_serialize_nequick>:
   3a9d0:	4603      	mov	r3, r0
   3a9d2:	b198      	cbz	r0, 3a9fc <rpc_gnss_serialize_nequick+0x2c>
   3a9d4:	b191      	cbz	r1, 3a9fc <rpc_gnss_serialize_nequick+0x2c>
   3a9d6:	2000      	movs	r0, #0
   3a9d8:	2205      	movs	r2, #5
   3a9da:	7048      	strb	r0, [r1, #1]
   3a9dc:	700a      	strb	r2, [r1, #0]
   3a9de:	f9b3 2000 	ldrsh.w	r2, [r3]
   3a9e2:	200a      	movs	r0, #10
   3a9e4:	804a      	strh	r2, [r1, #2]
   3a9e6:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
   3a9ea:	808a      	strh	r2, [r1, #4]
   3a9ec:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
   3a9f0:	80ca      	strh	r2, [r1, #6]
   3a9f2:	799a      	ldrb	r2, [r3, #6]
   3a9f4:	720a      	strb	r2, [r1, #8]
   3a9f6:	79db      	ldrb	r3, [r3, #7]
   3a9f8:	724b      	strb	r3, [r1, #9]
   3a9fa:	4770      	bx	lr
   3a9fc:	f04f 30ff 	mov.w	r0, #4294967295
   3aa00:	4770      	bx	lr
   3aa02:	bf00      	nop

0003aa04 <rpc_gnss_serialize_time_and_sv_tow>:
   3aa04:	b310      	cbz	r0, 3aa4c <rpc_gnss_serialize_time_and_sv_tow+0x48>
   3aa06:	b309      	cbz	r1, 3aa4c <rpc_gnss_serialize_time_and_sv_tow+0x48>
   3aa08:	b470      	push	{r4, r5, r6}
   3aa0a:	2500      	movs	r5, #0
   3aa0c:	2606      	movs	r6, #6
   3aa0e:	460c      	mov	r4, r1
   3aa10:	704d      	strb	r5, [r1, #1]
   3aa12:	700e      	strb	r6, [r1, #0]
   3aa14:	462b      	mov	r3, r5
   3aa16:	8805      	ldrh	r5, [r0, #0]
   3aa18:	4602      	mov	r2, r0
   3aa1a:	804d      	strh	r5, [r1, #2]
   3aa1c:	68c5      	ldr	r5, [r0, #12]
   3aa1e:	f8c1 500a 	str.w	r5, [r1, #10]
   3aa22:	8905      	ldrh	r5, [r0, #8]
   3aa24:	810d      	strh	r5, [r1, #8]
   3aa26:	6840      	ldr	r0, [r0, #4]
   3aa28:	6048      	str	r0, [r1, #4]
   3aa2a:	8a15      	ldrh	r5, [r2, #16]
   3aa2c:	eb03 0043 	add.w	r0, r3, r3, lsl #1
   3aa30:	4408      	add	r0, r1
   3aa32:	81c5      	strh	r5, [r0, #14]
   3aa34:	7c90      	ldrb	r0, [r2, #18]
   3aa36:	3301      	adds	r3, #1
   3aa38:	2b20      	cmp	r3, #32
   3aa3a:	7420      	strb	r0, [r4, #16]
   3aa3c:	f102 0204 	add.w	r2, r2, #4
   3aa40:	f104 0403 	add.w	r4, r4, #3
   3aa44:	d1f1      	bne.n	3aa2a <rpc_gnss_serialize_time_and_sv_tow+0x26>
   3aa46:	206e      	movs	r0, #110	; 0x6e
   3aa48:	bc70      	pop	{r4, r5, r6}
   3aa4a:	4770      	bx	lr
   3aa4c:	f04f 30ff 	mov.w	r0, #4294967295
   3aa50:	4770      	bx	lr
   3aa52:	bf00      	nop

0003aa54 <rpc_gnss_serialize_location>:
   3aa54:	4603      	mov	r3, r0
   3aa56:	b1c8      	cbz	r0, 3aa8c <rpc_gnss_serialize_location+0x38>
   3aa58:	b1c1      	cbz	r1, 3aa8c <rpc_gnss_serialize_location+0x38>
   3aa5a:	2000      	movs	r0, #0
   3aa5c:	2207      	movs	r2, #7
   3aa5e:	7048      	strb	r0, [r1, #1]
   3aa60:	700a      	strb	r2, [r1, #0]
   3aa62:	f9b3 2008 	ldrsh.w	r2, [r3, #8]
   3aa66:	2011      	movs	r0, #17
   3aa68:	814a      	strh	r2, [r1, #10]
   3aa6a:	7b9a      	ldrb	r2, [r3, #14]
   3aa6c:	740a      	strb	r2, [r1, #16]
   3aa6e:	681a      	ldr	r2, [r3, #0]
   3aa70:	f8c1 2002 	str.w	r2, [r1, #2]
   3aa74:	685a      	ldr	r2, [r3, #4]
   3aa76:	f8c1 2006 	str.w	r2, [r1, #6]
   3aa7a:	7b1a      	ldrb	r2, [r3, #12]
   3aa7c:	738a      	strb	r2, [r1, #14]
   3aa7e:	7b5a      	ldrb	r2, [r3, #13]
   3aa80:	73ca      	strb	r2, [r1, #15]
   3aa82:	7a9a      	ldrb	r2, [r3, #10]
   3aa84:	730a      	strb	r2, [r1, #12]
   3aa86:	7adb      	ldrb	r3, [r3, #11]
   3aa88:	734b      	strb	r3, [r1, #13]
   3aa8a:	4770      	bx	lr
   3aa8c:	f04f 30ff 	mov.w	r0, #4294967295
   3aa90:	4770      	bx	lr
   3aa92:	bf00      	nop

0003aa94 <rpc_gnss_serialize_integrity>:
   3aa94:	b148      	cbz	r0, 3aaaa <rpc_gnss_serialize_integrity+0x16>
   3aa96:	b141      	cbz	r1, 3aaaa <rpc_gnss_serialize_integrity+0x16>
   3aa98:	2200      	movs	r2, #0
   3aa9a:	2308      	movs	r3, #8
   3aa9c:	704a      	strb	r2, [r1, #1]
   3aa9e:	700b      	strb	r3, [r1, #0]
   3aaa0:	6803      	ldr	r3, [r0, #0]
   3aaa2:	2006      	movs	r0, #6
   3aaa4:	f8c1 3002 	str.w	r3, [r1, #2]
   3aaa8:	4770      	bx	lr
   3aaaa:	f04f 30ff 	mov.w	r0, #4294967295
   3aaae:	4770      	bx	lr

0003aab0 <gnss_client_event_handler>:
   3aab0:	f850 1b08 	ldr.w	r1, [r0], #8
   3aab4:	0c09      	lsrs	r1, r1, #16
   3aab6:	f7ff b811 	b.w	39adc <rpc_gnss_event_handler>
   3aaba:	bf00      	nop

0003aabc <rpc_gnss_client_init>:
   3aabc:	4801      	ldr	r0, [pc, #4]	; (3aac4 <rpc_gnss_client_init+0x8>)
   3aabe:	f7fe bb73 	b.w	391a8 <rpc_client_register>
   3aac2:	bf00      	nop
   3aac4:	00047260 	.word	0x00047260

0003aac8 <rpc_gnss_client_request_alloc>:
   3aac8:	2300      	movs	r3, #0
   3aaca:	b510      	push	{r4, lr}
   3aacc:	b082      	sub	sp, #8
   3aace:	9301      	str	r3, [sp, #4]
   3aad0:	b158      	cbz	r0, 3aaea <rpc_gnss_client_request_alloc+0x22>
   3aad2:	4604      	mov	r4, r0
   3aad4:	aa01      	add	r2, sp, #4
   3aad6:	2007      	movs	r0, #7
   3aad8:	f7fe fd9e 	bl	39618 <rpc_message_alloc>
   3aadc:	b918      	cbnz	r0, 3aae6 <rpc_gnss_client_request_alloc+0x1e>
   3aade:	9b01      	ldr	r3, [sp, #4]
   3aae0:	b10b      	cbz	r3, 3aae6 <rpc_gnss_client_request_alloc+0x1e>
   3aae2:	3308      	adds	r3, #8
   3aae4:	6023      	str	r3, [r4, #0]
   3aae6:	b002      	add	sp, #8
   3aae8:	bd10      	pop	{r4, pc}
   3aaea:	2007      	movs	r0, #7
   3aaec:	b002      	add	sp, #8
   3aaee:	bd10      	pop	{r4, pc}

0003aaf0 <rpc_gnss_client_request_send>:
   3aaf0:	f401 4370 	and.w	r3, r1, #61440	; 0xf000
   3aaf4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
   3aaf8:	d10b      	bne.n	3ab12 <rpc_gnss_client_request_send+0x22>
   3aafa:	b160      	cbz	r0, 3ab16 <rpc_gnss_client_request_send+0x26>
   3aafc:	4603      	mov	r3, r0
   3aafe:	f830 2c08 	ldrh.w	r2, [r0, #-8]
   3ab02:	2007      	movs	r0, #7
   3ab04:	ea42 4101 	orr.w	r1, r2, r1, lsl #16
   3ab08:	f843 1d08 	str.w	r1, [r3, #-8]!
   3ab0c:	4619      	mov	r1, r3
   3ab0e:	f7fe bd6b 	b.w	395e8 <rpc_message_send>
   3ab12:	200f      	movs	r0, #15
   3ab14:	4770      	bx	lr
   3ab16:	2007      	movs	r0, #7
   3ab18:	4770      	bx	lr
   3ab1a:	bf00      	nop

0003ab1c <rpc_gnss_client_message_free>:
   3ab1c:	b120      	cbz	r0, 3ab28 <rpc_gnss_client_message_free+0xc>
   3ab1e:	f1a0 0108 	sub.w	r1, r0, #8
   3ab22:	2007      	movs	r0, #7
   3ab24:	f7fe bdaa 	b.w	3967c <rpc_message_free>
   3ab28:	2007      	movs	r0, #7
   3ab2a:	4770      	bx	lr

0003ab2c <rpc_gnss_client_data_free>:
   3ab2c:	b118      	cbz	r0, 3ab36 <rpc_gnss_client_data_free+0xa>
   3ab2e:	4601      	mov	r1, r0
   3ab30:	2007      	movs	r0, #7
   3ab32:	f7fe beb5 	b.w	398a0 <rpc_message_data_free>
   3ab36:	2007      	movs	r0, #7
   3ab38:	4770      	bx	lr
   3ab3a:	bf00      	nop

0003ab3c <datagram_handler_init>:
   3ab3c:	b510      	push	{r4, lr}
   3ab3e:	4604      	mov	r4, r0
   3ab40:	200c      	movs	r0, #12
   3ab42:	f7f9 f8d7 	bl	33cf4 <nrf_malloc>
   3ab46:	60e0      	str	r0, [r4, #12]
   3ab48:	b118      	cbz	r0, 3ab52 <datagram_handler_init+0x16>
   3ab4a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   3ab4e:	f7fc bb8f 	b.w	37270 <linked_list_init>
   3ab52:	2004      	movs	r0, #4
   3ab54:	bd10      	pop	{r4, pc}
   3ab56:	bf00      	nop

0003ab58 <datagram_handler_put>:
   3ab58:	b570      	push	{r4, r5, r6, lr}
   3ab5a:	4606      	mov	r6, r0
   3ab5c:	2014      	movs	r0, #20
   3ab5e:	460d      	mov	r5, r1
   3ab60:	f7f9 f8c8 	bl	33cf4 <nrf_malloc>
   3ab64:	b178      	cbz	r0, 3ab86 <datagram_handler_put+0x2e>
   3ab66:	682b      	ldr	r3, [r5, #0]
   3ab68:	4604      	mov	r4, r0
   3ab6a:	6043      	str	r3, [r0, #4]
   3ab6c:	686b      	ldr	r3, [r5, #4]
   3ab6e:	4601      	mov	r1, r0
   3ab70:	6083      	str	r3, [r0, #8]
   3ab72:	68eb      	ldr	r3, [r5, #12]
   3ab74:	60c3      	str	r3, [r0, #12]
   3ab76:	68ab      	ldr	r3, [r5, #8]
   3ab78:	6103      	str	r3, [r0, #16]
   3ab7a:	68f0      	ldr	r0, [r6, #12]
   3ab7c:	f7fc fb82 	bl	37284 <linked_list_push>
   3ab80:	b920      	cbnz	r0, 3ab8c <datagram_handler_put+0x34>
   3ab82:	6868      	ldr	r0, [r5, #4]
   3ab84:	bd70      	pop	{r4, r5, r6, pc}
   3ab86:	f04f 30ff 	mov.w	r0, #4294967295
   3ab8a:	bd70      	pop	{r4, r5, r6, pc}
   3ab8c:	4620      	mov	r0, r4
   3ab8e:	f7f9 f8bb 	bl	33d08 <nrf_free>
   3ab92:	f04f 30ff 	mov.w	r0, #4294967295
   3ab96:	bd70      	pop	{r4, r5, r6, pc}

0003ab98 <datagram_handler_get>:
   3ab98:	b5f0      	push	{r4, r5, r6, r7, lr}
   3ab9a:	4606      	mov	r6, r0
   3ab9c:	b085      	sub	sp, #20
   3ab9e:	68c0      	ldr	r0, [r0, #12]
   3aba0:	460c      	mov	r4, r1
   3aba2:	4617      	mov	r7, r2
   3aba4:	f7fc fb8e 	bl	372c4 <linked_list_peek>
   3aba8:	2800      	cmp	r0, #0
   3abaa:	d037      	beq.n	3ac1c <datagram_handler_get+0x84>
   3abac:	6882      	ldr	r2, [r0, #8]
   3abae:	4605      	mov	r5, r0
   3abb0:	e9d4 0300 	ldrd	r0, r3, [r4]
   3abb4:	429a      	cmp	r2, r3
   3abb6:	bf28      	it	cs
   3abb8:	461a      	movcs	r2, r3
   3abba:	6062      	str	r2, [r4, #4]
   3abbc:	b110      	cbz	r0, 3abc4 <datagram_handler_get+0x2c>
   3abbe:	6869      	ldr	r1, [r5, #4]
   3abc0:	f00a f946 	bl	44e50 <memcpy>
   3abc4:	68a0      	ldr	r0, [r4, #8]
   3abc6:	b118      	cbz	r0, 3abd0 <datagram_handler_get+0x38>
   3abc8:	692b      	ldr	r3, [r5, #16]
   3abca:	b10b      	cbz	r3, 3abd0 <datagram_handler_get+0x38>
   3abcc:	68ea      	ldr	r2, [r5, #12]
   3abce:	b9e2      	cbnz	r2, 3ac0a <datagram_handler_get+0x72>
   3abd0:	2300      	movs	r3, #0
   3abd2:	60e3      	str	r3, [r4, #12]
   3abd4:	073b      	lsls	r3, r7, #28
   3abd6:	d502      	bpl.n	3abde <datagram_handler_get+0x46>
   3abd8:	6860      	ldr	r0, [r4, #4]
   3abda:	b005      	add	sp, #20
   3abdc:	bdf0      	pop	{r4, r5, r6, r7, pc}
   3abde:	68f0      	ldr	r0, [r6, #12]
   3abe0:	f7fc fb66 	bl	372b0 <linked_list_pop>
   3abe4:	4605      	mov	r5, r0
   3abe6:	2800      	cmp	r0, #0
   3abe8:	d0f6      	beq.n	3abd8 <datagram_handler_get+0x40>
   3abea:	e9d0 3101 	ldrd	r3, r1, [r0, #4]
   3abee:	6902      	ldr	r2, [r0, #16]
   3abf0:	9300      	str	r3, [sp, #0]
   3abf2:	68c3      	ldr	r3, [r0, #12]
   3abf4:	e9cd 1201 	strd	r1, r2, [sp, #4]
   3abf8:	9303      	str	r3, [sp, #12]
   3abfa:	4668      	mov	r0, sp
   3abfc:	e9d6 3101 	ldrd	r3, r1, [r6, #4]
   3ac00:	4798      	blx	r3
   3ac02:	4628      	mov	r0, r5
   3ac04:	f7f9 f880 	bl	33d08 <nrf_free>
   3ac08:	e7e6      	b.n	3abd8 <datagram_handler_get+0x40>
   3ac0a:	68e3      	ldr	r3, [r4, #12]
   3ac0c:	429a      	cmp	r2, r3
   3ac0e:	bf28      	it	cs
   3ac10:	461a      	movcs	r2, r3
   3ac12:	60e2      	str	r2, [r4, #12]
   3ac14:	6929      	ldr	r1, [r5, #16]
   3ac16:	f00a f91b 	bl	44e50 <memcpy>
   3ac1a:	e7db      	b.n	3abd4 <datagram_handler_get+0x3c>
   3ac1c:	f04f 30ff 	mov.w	r0, #4294967295
   3ac20:	e7db      	b.n	3abda <datagram_handler_get+0x42>
   3ac22:	bf00      	nop

0003ac24 <datagram_handler_available>:
   3ac24:	b508      	push	{r3, lr}
   3ac26:	68c0      	ldr	r0, [r0, #12]
   3ac28:	f7fc fb4c 	bl	372c4 <linked_list_peek>
   3ac2c:	b108      	cbz	r0, 3ac32 <datagram_handler_available+0xe>
   3ac2e:	6880      	ldr	r0, [r0, #8]
   3ac30:	bd08      	pop	{r3, pc}
   3ac32:	f04f 30ff 	mov.w	r0, #4294967295
   3ac36:	bd08      	pop	{r3, pc}

0003ac38 <datagram_handler_flush>:
   3ac38:	b530      	push	{r4, r5, lr}
   3ac3a:	4605      	mov	r5, r0
   3ac3c:	68c0      	ldr	r0, [r0, #12]
   3ac3e:	b085      	sub	sp, #20
   3ac40:	b9a8      	cbnz	r0, 3ac6e <datagram_handler_flush+0x36>
   3ac42:	e01a      	b.n	3ac7a <datagram_handler_flush+0x42>
   3ac44:	68e8      	ldr	r0, [r5, #12]
   3ac46:	f7fc fb33 	bl	372b0 <linked_list_pop>
   3ac4a:	4604      	mov	r4, r0
   3ac4c:	b170      	cbz	r0, 3ac6c <datagram_handler_flush+0x34>
   3ac4e:	e9d0 0101 	ldrd	r0, r1, [r0, #4]
   3ac52:	e9d4 3203 	ldrd	r3, r2, [r4, #12]
   3ac56:	e9cd 0100 	strd	r0, r1, [sp]
   3ac5a:	e9cd 2302 	strd	r2, r3, [sp, #8]
   3ac5e:	e9d5 3101 	ldrd	r3, r1, [r5, #4]
   3ac62:	4668      	mov	r0, sp
   3ac64:	4798      	blx	r3
   3ac66:	4620      	mov	r0, r4
   3ac68:	f7f9 f84e 	bl	33d08 <nrf_free>
   3ac6c:	68e8      	ldr	r0, [r5, #12]
   3ac6e:	f7fc fb2f 	bl	372d0 <linked_list_size_get>
   3ac72:	2800      	cmp	r0, #0
   3ac74:	d1e6      	bne.n	3ac44 <datagram_handler_flush+0xc>
   3ac76:	b005      	add	sp, #20
   3ac78:	bd30      	pop	{r4, r5, pc}
   3ac7a:	2008      	movs	r0, #8
   3ac7c:	b005      	add	sp, #20
   3ac7e:	bd30      	pop	{r4, r5, pc}

0003ac80 <datagram_handler_free>:
   3ac80:	b530      	push	{r4, r5, lr}
   3ac82:	4605      	mov	r5, r0
   3ac84:	68c0      	ldr	r0, [r0, #12]
   3ac86:	b085      	sub	sp, #20
   3ac88:	b9a0      	cbnz	r0, 3acb4 <datagram_handler_free+0x34>
   3ac8a:	e01c      	b.n	3acc6 <datagram_handler_free+0x46>
   3ac8c:	f7fc fb10 	bl	372b0 <linked_list_pop>
   3ac90:	4604      	mov	r4, r0
   3ac92:	b170      	cbz	r0, 3acb2 <datagram_handler_free+0x32>
   3ac94:	e9d0 0101 	ldrd	r0, r1, [r0, #4]
   3ac98:	e9d4 3203 	ldrd	r3, r2, [r4, #12]
   3ac9c:	e9cd 0100 	strd	r0, r1, [sp]
   3aca0:	e9cd 2302 	strd	r2, r3, [sp, #8]
   3aca4:	e9d5 3101 	ldrd	r3, r1, [r5, #4]
   3aca8:	4668      	mov	r0, sp
   3acaa:	4798      	blx	r3
   3acac:	4620      	mov	r0, r4
   3acae:	f7f9 f82b 	bl	33d08 <nrf_free>
   3acb2:	68e8      	ldr	r0, [r5, #12]
   3acb4:	f7fc fb0c 	bl	372d0 <linked_list_size_get>
   3acb8:	4604      	mov	r4, r0
   3acba:	68e8      	ldr	r0, [r5, #12]
   3acbc:	2c00      	cmp	r4, #0
   3acbe:	d1e5      	bne.n	3ac8c <datagram_handler_free+0xc>
   3acc0:	f7f9 f822 	bl	33d08 <nrf_free>
   3acc4:	60ec      	str	r4, [r5, #12]
   3acc6:	b005      	add	sp, #20
   3acc8:	bd30      	pop	{r4, r5, pc}
   3acca:	bf00      	nop

0003accc <null_handler_init>:
   3accc:	2000      	movs	r0, #0
   3acce:	4770      	bx	lr

0003acd0 <null_handler_put>:
   3acd0:	b510      	push	{r4, lr}
   3acd2:	460c      	mov	r4, r1
   3acd4:	e9d0 3101 	ldrd	r3, r1, [r0, #4]
   3acd8:	4620      	mov	r0, r4
   3acda:	4798      	blx	r3
   3acdc:	6860      	ldr	r0, [r4, #4]
   3acde:	bd10      	pop	{r4, pc}

0003ace0 <null_handler_get>:
   3ace0:	f04f 30ff 	mov.w	r0, #4294967295
   3ace4:	4770      	bx	lr
   3ace6:	bf00      	nop

0003ace8 <null_handler_available>:
   3ace8:	f04f 30ff 	mov.w	r0, #4294967295
   3acec:	4770      	bx	lr
   3acee:	bf00      	nop

0003acf0 <null_handler_flush>:
   3acf0:	2000      	movs	r0, #0
   3acf2:	4770      	bx	lr

0003acf4 <null_handler_free>:
   3acf4:	4770      	bx	lr
   3acf6:	bf00      	nop

0003acf8 <packet_handler_create>:
   3acf8:	2801      	cmp	r0, #1
   3acfa:	b538      	push	{r3, r4, r5, lr}
   3acfc:	460d      	mov	r5, r1
   3acfe:	4614      	mov	r4, r2
   3ad00:	d00d      	beq.n	3ad1e <packet_handler_create+0x26>
   3ad02:	db11      	blt.n	3ad28 <packet_handler_create+0x30>
   3ad04:	2803      	cmp	r0, #3
   3ad06:	dc0f      	bgt.n	3ad28 <packet_handler_create+0x30>
   3ad08:	2010      	movs	r0, #16
   3ad0a:	f7f8 fff3 	bl	33cf4 <nrf_malloc>
   3ad0e:	2218      	movs	r2, #24
   3ad10:	b120      	cbz	r0, 3ad1c <packet_handler_create+0x24>
   3ad12:	4b08      	ldr	r3, [pc, #32]	; (3ad34 <packet_handler_create+0x3c>)
   3ad14:	6045      	str	r5, [r0, #4]
   3ad16:	4413      	add	r3, r2
   3ad18:	6084      	str	r4, [r0, #8]
   3ad1a:	6003      	str	r3, [r0, #0]
   3ad1c:	bd38      	pop	{r3, r4, r5, pc}
   3ad1e:	2014      	movs	r0, #20
   3ad20:	f7f8 ffe8 	bl	33cf4 <nrf_malloc>
   3ad24:	2230      	movs	r2, #48	; 0x30
   3ad26:	e7f3      	b.n	3ad10 <packet_handler_create+0x18>
   3ad28:	200c      	movs	r0, #12
   3ad2a:	f7f8 ffe3 	bl	33cf4 <nrf_malloc>
   3ad2e:	2200      	movs	r2, #0
   3ad30:	e7ee      	b.n	3ad10 <packet_handler_create+0x18>
   3ad32:	bf00      	nop
   3ad34:	00047270 	.word	0x00047270

0003ad38 <packet_handler_delete>:
   3ad38:	b510      	push	{r4, lr}
   3ad3a:	4604      	mov	r4, r0
   3ad3c:	6803      	ldr	r3, [r0, #0]
   3ad3e:	691b      	ldr	r3, [r3, #16]
   3ad40:	4798      	blx	r3
   3ad42:	6823      	ldr	r3, [r4, #0]
   3ad44:	4620      	mov	r0, r4
   3ad46:	695b      	ldr	r3, [r3, #20]
   3ad48:	4798      	blx	r3
   3ad4a:	4620      	mov	r0, r4
   3ad4c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   3ad50:	f7f8 bfda 	b.w	33d08 <nrf_free>

0003ad54 <stream_handler_init>:
   3ad54:	b510      	push	{r4, lr}
   3ad56:	4604      	mov	r4, r0
   3ad58:	200c      	movs	r0, #12
   3ad5a:	f7f8 ffcb 	bl	33cf4 <nrf_malloc>
   3ad5e:	60e0      	str	r0, [r4, #12]
   3ad60:	b128      	cbz	r0, 3ad6e <stream_handler_init+0x1a>
   3ad62:	2300      	movs	r3, #0
   3ad64:	6123      	str	r3, [r4, #16]
   3ad66:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   3ad6a:	f7fc ba81 	b.w	37270 <linked_list_init>
   3ad6e:	2004      	movs	r0, #4
   3ad70:	bd10      	pop	{r4, pc}
   3ad72:	bf00      	nop

0003ad74 <stream_handler_put>:
   3ad74:	b570      	push	{r4, r5, r6, lr}
   3ad76:	4606      	mov	r6, r0
   3ad78:	2014      	movs	r0, #20
   3ad7a:	460d      	mov	r5, r1
   3ad7c:	f7f8 ffba 	bl	33cf4 <nrf_malloc>
   3ad80:	b178      	cbz	r0, 3ada2 <stream_handler_put+0x2e>
   3ad82:	682b      	ldr	r3, [r5, #0]
   3ad84:	4604      	mov	r4, r0
   3ad86:	6043      	str	r3, [r0, #4]
   3ad88:	686b      	ldr	r3, [r5, #4]
   3ad8a:	4601      	mov	r1, r0
   3ad8c:	6083      	str	r3, [r0, #8]
   3ad8e:	68eb      	ldr	r3, [r5, #12]
   3ad90:	60c3      	str	r3, [r0, #12]
   3ad92:	68ab      	ldr	r3, [r5, #8]
   3ad94:	6103      	str	r3, [r0, #16]
   3ad96:	68f0      	ldr	r0, [r6, #12]
   3ad98:	f7fc fa74 	bl	37284 <linked_list_push>
   3ad9c:	b920      	cbnz	r0, 3ada8 <stream_handler_put+0x34>
   3ad9e:	6868      	ldr	r0, [r5, #4]
   3ada0:	bd70      	pop	{r4, r5, r6, pc}
   3ada2:	f04f 30ff 	mov.w	r0, #4294967295
   3ada6:	bd70      	pop	{r4, r5, r6, pc}
   3ada8:	4620      	mov	r0, r4
   3adaa:	f7f8 ffad 	bl	33d08 <nrf_free>
   3adae:	f04f 30ff 	mov.w	r0, #4294967295
   3adb2:	bd70      	pop	{r4, r5, r6, pc}

0003adb4 <stream_handler_get>:
   3adb4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   3adb8:	4682      	mov	sl, r0
   3adba:	b087      	sub	sp, #28
   3adbc:	68c0      	ldr	r0, [r0, #12]
   3adbe:	4689      	mov	r9, r1
   3adc0:	4693      	mov	fp, r2
   3adc2:	f7fc fa7f 	bl	372c4 <linked_list_peek>
   3adc6:	2800      	cmp	r0, #0
   3adc8:	d072      	beq.n	3aeb0 <stream_handler_get+0xfc>
   3adca:	4605      	mov	r5, r0
   3adcc:	f8d9 0008 	ldr.w	r0, [r9, #8]
   3add0:	b120      	cbz	r0, 3addc <stream_handler_get+0x28>
   3add2:	692b      	ldr	r3, [r5, #16]
   3add4:	b113      	cbz	r3, 3addc <stream_handler_get+0x28>
   3add6:	68ea      	ldr	r2, [r5, #12]
   3add8:	2a00      	cmp	r2, #0
   3adda:	d15c      	bne.n	3ae96 <stream_handler_get+0xe2>
   3addc:	2300      	movs	r3, #0
   3adde:	f8c9 300c 	str.w	r3, [r9, #12]
   3ade2:	f8d9 2000 	ldr.w	r2, [r9]
   3ade6:	f8d9 8004 	ldr.w	r8, [r9, #4]
   3adea:	f8da 1010 	ldr.w	r1, [sl, #16]
   3adee:	9201      	str	r2, [sp, #4]
   3adf0:	f1b8 0f00 	cmp.w	r8, #0
   3adf4:	d05a      	beq.n	3aeac <stream_handler_get+0xf8>
   3adf6:	f00b 0308 	and.w	r3, fp, #8
   3adfa:	2400      	movs	r4, #0
   3adfc:	9300      	str	r3, [sp, #0]
   3adfe:	e010      	b.n	3ae22 <stream_handler_get+0x6e>
   3ae00:	f8da 3010 	ldr.w	r3, [sl, #16]
   3ae04:	443b      	add	r3, r7
   3ae06:	f8ca 3010 	str.w	r3, [sl, #16]
   3ae0a:	4628      	mov	r0, r5
   3ae0c:	f7fc fa62 	bl	372d4 <linked_list_get_next>
   3ae10:	443c      	add	r4, r7
   3ae12:	4605      	mov	r5, r0
   3ae14:	2800      	cmp	r0, #0
   3ae16:	d038      	beq.n	3ae8a <stream_handler_get+0xd6>
   3ae18:	45a0      	cmp	r8, r4
   3ae1a:	d936      	bls.n	3ae8a <stream_handler_get+0xd6>
   3ae1c:	2100      	movs	r1, #0
   3ae1e:	f8d9 2000 	ldr.w	r2, [r9]
   3ae22:	68ae      	ldr	r6, [r5, #8]
   3ae24:	eba8 0b04 	sub.w	fp, r8, r4
   3ae28:	1a76      	subs	r6, r6, r1
   3ae2a:	455e      	cmp	r6, fp
   3ae2c:	4637      	mov	r7, r6
   3ae2e:	bf28      	it	cs
   3ae30:	465f      	movcs	r7, fp
   3ae32:	b132      	cbz	r2, 3ae42 <stream_handler_get+0x8e>
   3ae34:	6868      	ldr	r0, [r5, #4]
   3ae36:	9b01      	ldr	r3, [sp, #4]
   3ae38:	4401      	add	r1, r0
   3ae3a:	463a      	mov	r2, r7
   3ae3c:	1918      	adds	r0, r3, r4
   3ae3e:	f00a f807 	bl	44e50 <memcpy>
   3ae42:	9b00      	ldr	r3, [sp, #0]
   3ae44:	2b00      	cmp	r3, #0
   3ae46:	d1e0      	bne.n	3ae0a <stream_handler_get+0x56>
   3ae48:	455e      	cmp	r6, fp
   3ae4a:	d8d9      	bhi.n	3ae00 <stream_handler_get+0x4c>
   3ae4c:	f8da 000c 	ldr.w	r0, [sl, #12]
   3ae50:	f7fc fa2e 	bl	372b0 <linked_list_pop>
   3ae54:	4606      	mov	r6, r0
   3ae56:	b170      	cbz	r0, 3ae76 <stream_handler_get+0xc2>
   3ae58:	e9d0 2301 	ldrd	r2, r3, [r0, #4]
   3ae5c:	e9d0 0103 	ldrd	r0, r1, [r0, #12]
   3ae60:	e9cd 2302 	strd	r2, r3, [sp, #8]
   3ae64:	e9cd 1004 	strd	r1, r0, [sp, #16]
   3ae68:	e9da 3101 	ldrd	r3, r1, [sl, #4]
   3ae6c:	a802      	add	r0, sp, #8
   3ae6e:	4798      	blx	r3
   3ae70:	4630      	mov	r0, r6
   3ae72:	f7f8 ff49 	bl	33d08 <nrf_free>
   3ae76:	2300      	movs	r3, #0
   3ae78:	4628      	mov	r0, r5
   3ae7a:	f8ca 3010 	str.w	r3, [sl, #16]
   3ae7e:	f7fc fa29 	bl	372d4 <linked_list_get_next>
   3ae82:	443c      	add	r4, r7
   3ae84:	4605      	mov	r5, r0
   3ae86:	2800      	cmp	r0, #0
   3ae88:	d1c6      	bne.n	3ae18 <stream_handler_get+0x64>
   3ae8a:	4620      	mov	r0, r4
   3ae8c:	f8c9 4004 	str.w	r4, [r9, #4]
   3ae90:	b007      	add	sp, #28
   3ae92:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3ae96:	f8d9 300c 	ldr.w	r3, [r9, #12]
   3ae9a:	429a      	cmp	r2, r3
   3ae9c:	bf28      	it	cs
   3ae9e:	461a      	movcs	r2, r3
   3aea0:	f8c9 200c 	str.w	r2, [r9, #12]
   3aea4:	6929      	ldr	r1, [r5, #16]
   3aea6:	f009 ffd3 	bl	44e50 <memcpy>
   3aeaa:	e79a      	b.n	3ade2 <stream_handler_get+0x2e>
   3aeac:	4644      	mov	r4, r8
   3aeae:	e7ec      	b.n	3ae8a <stream_handler_get+0xd6>
   3aeb0:	f04f 30ff 	mov.w	r0, #4294967295
   3aeb4:	e7ec      	b.n	3ae90 <stream_handler_get+0xdc>
   3aeb6:	bf00      	nop

0003aeb8 <stream_handler_available>:
   3aeb8:	b510      	push	{r4, lr}
   3aeba:	4604      	mov	r4, r0
   3aebc:	68c0      	ldr	r0, [r0, #12]
   3aebe:	f7fc fa01 	bl	372c4 <linked_list_peek>
   3aec2:	b150      	cbz	r0, 3aeda <stream_handler_available+0x22>
   3aec4:	6924      	ldr	r4, [r4, #16]
   3aec6:	4264      	negs	r4, r4
   3aec8:	6883      	ldr	r3, [r0, #8]
   3aeca:	441c      	add	r4, r3
   3aecc:	f7fc fa02 	bl	372d4 <linked_list_get_next>
   3aed0:	2800      	cmp	r0, #0
   3aed2:	d1f9      	bne.n	3aec8 <stream_handler_available+0x10>
   3aed4:	ea24 70e4 	bic.w	r0, r4, r4, asr #31
   3aed8:	bd10      	pop	{r4, pc}
   3aeda:	f04f 30ff 	mov.w	r0, #4294967295
   3aede:	bd10      	pop	{r4, pc}

0003aee0 <stream_handler_flush>:
   3aee0:	b530      	push	{r4, r5, lr}
   3aee2:	4605      	mov	r5, r0
   3aee4:	68c0      	ldr	r0, [r0, #12]
   3aee6:	b085      	sub	sp, #20
   3aee8:	b9a8      	cbnz	r0, 3af16 <stream_handler_flush+0x36>
   3aeea:	e01a      	b.n	3af22 <stream_handler_flush+0x42>
   3aeec:	68e8      	ldr	r0, [r5, #12]
   3aeee:	f7fc f9df 	bl	372b0 <linked_list_pop>
   3aef2:	4604      	mov	r4, r0
   3aef4:	b170      	cbz	r0, 3af14 <stream_handler_flush+0x34>
   3aef6:	e9d0 0101 	ldrd	r0, r1, [r0, #4]
   3aefa:	e9d4 3203 	ldrd	r3, r2, [r4, #12]
   3aefe:	e9cd 0100 	strd	r0, r1, [sp]
   3af02:	e9cd 2302 	strd	r2, r3, [sp, #8]
   3af06:	e9d5 3101 	ldrd	r3, r1, [r5, #4]
   3af0a:	4668      	mov	r0, sp
   3af0c:	4798      	blx	r3
   3af0e:	4620      	mov	r0, r4
   3af10:	f7f8 fefa 	bl	33d08 <nrf_free>
   3af14:	68e8      	ldr	r0, [r5, #12]
   3af16:	f7fc f9db 	bl	372d0 <linked_list_size_get>
   3af1a:	2800      	cmp	r0, #0
   3af1c:	d1e6      	bne.n	3aeec <stream_handler_flush+0xc>
   3af1e:	b005      	add	sp, #20
   3af20:	bd30      	pop	{r4, r5, pc}
   3af22:	2008      	movs	r0, #8
   3af24:	b005      	add	sp, #20
   3af26:	bd30      	pop	{r4, r5, pc}

0003af28 <stream_handler_free>:
   3af28:	b530      	push	{r4, r5, lr}
   3af2a:	4605      	mov	r5, r0
   3af2c:	68c0      	ldr	r0, [r0, #12]
   3af2e:	b085      	sub	sp, #20
   3af30:	b9a0      	cbnz	r0, 3af5c <stream_handler_free+0x34>
   3af32:	e01c      	b.n	3af6e <stream_handler_free+0x46>
   3af34:	f7fc f9bc 	bl	372b0 <linked_list_pop>
   3af38:	4604      	mov	r4, r0
   3af3a:	b170      	cbz	r0, 3af5a <stream_handler_free+0x32>
   3af3c:	e9d0 0101 	ldrd	r0, r1, [r0, #4]
   3af40:	e9d4 3203 	ldrd	r3, r2, [r4, #12]
   3af44:	e9cd 0100 	strd	r0, r1, [sp]
   3af48:	e9cd 2302 	strd	r2, r3, [sp, #8]
   3af4c:	e9d5 3101 	ldrd	r3, r1, [r5, #4]
   3af50:	4668      	mov	r0, sp
   3af52:	4798      	blx	r3
   3af54:	4620      	mov	r0, r4
   3af56:	f7f8 fed7 	bl	33d08 <nrf_free>
   3af5a:	68e8      	ldr	r0, [r5, #12]
   3af5c:	f7fc f9b8 	bl	372d0 <linked_list_size_get>
   3af60:	4604      	mov	r4, r0
   3af62:	68e8      	ldr	r0, [r5, #12]
   3af64:	2c00      	cmp	r4, #0
   3af66:	d1e5      	bne.n	3af34 <stream_handler_free+0xc>
   3af68:	f7f8 fece 	bl	33d08 <nrf_free>
   3af6c:	60ec      	str	r4, [r5, #12]
   3af6e:	b005      	add	sp, #20
   3af70:	bd30      	pop	{r4, r5, pc}
   3af72:	bf00      	nop

0003af74 <SystemInit>:
    
    /* Enable the FPU if the compiler used floating point unit instructions. __FPU_USED is a MACRO defined by the
    * compiler. Since the FPU consumes energy, remember to disable FPU use in the compiler if floating point unit
    * operations are not used in your code. */
    #if (__FPU_USED == 1)
      SCB->CPACR |= (3UL << 20) | (3UL << 22);
   3af74:	4a07      	ldr	r2, [pc, #28]	; (3af94 <SystemInit+0x20>)
   3af76:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
   3af7a:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
   3af7e:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  __ASM volatile ("dsb 0xF":::"memory");
   3af82:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   3af86:	f3bf 8f6f 	isb	sy
    SystemCoreClock = __SYSTEM_CLOCK;
   3af8a:	4b03      	ldr	r3, [pc, #12]	; (3af98 <SystemInit+0x24>)
   3af8c:	4a03      	ldr	r2, [pc, #12]	; (3af9c <SystemInit+0x28>)
   3af8e:	601a      	str	r2, [r3, #0]
      __DSB();
      __ISB();
    #endif
    
    SystemCoreClockUpdate();
}
   3af90:	4770      	bx	lr
   3af92:	bf00      	nop
   3af94:	e000ed00 	.word	0xe000ed00
   3af98:	200324d0 	.word	0x200324d0
   3af9c:	03d09000 	.word	0x03d09000

0003afa0 <nvmc_word_write>:
}

#if defined(NVMC_READYNEXT_READYNEXT_Msk)
NRF_STATIC_INLINE bool nrf_nvmc_write_ready_check(NRF_NVMC_Type const * p_reg)
{
    return (bool)(p_reg->READYNEXT & NVMC_READYNEXT_READYNEXT_Msk);
   3afa0:	4a04      	ldr	r2, [pc, #16]	; (3afb4 <nvmc_word_write+0x14>)
   3afa2:	f8d2 3408 	ldr.w	r3, [r2, #1032]	; 0x408
}

static void nvmc_word_write(uint32_t addr, uint32_t value)
{
#if defined(NRF9160_XXAA)
    while (!nrf_nvmc_write_ready_check(NRF_NVMC))
   3afa6:	07db      	lsls	r3, r3, #31
   3afa8:	d5fb      	bpl.n	3afa2 <nvmc_word_write+0x2>
#else
    while (!nrf_nvmc_ready_check(NRF_NVMC))
    {}
#endif

    *(volatile uint32_t *)addr = value;
   3afaa:	6001      	str	r1, [r0, #0]
  __ASM volatile ("dmb 0xF":::"memory");
   3afac:	f3bf 8f5f 	dmb	sy
    __DMB();
}
   3afb0:	4770      	bx	lr
   3afb2:	bf00      	nop
   3afb4:	40039000 	.word	0x40039000

0003afb8 <nrfx_nvmc_page_erase>:
    }
}

nrfx_err_t nrfx_nvmc_page_erase(uint32_t addr)
{
    NRFX_ASSERT((addr - NVMC_FLASH_BASE_ADDRESS) < flash_total_size_get());
   3afb8:	f5b0 1f80 	cmp.w	r0, #1048576	; 0x100000
{
   3afbc:	b508      	push	{r3, lr}
    NRFX_ASSERT((addr - NVMC_FLASH_BASE_ADDRESS) < flash_total_size_get());
   3afbe:	d305      	bcc.n	3afcc <nrfx_nvmc_page_erase+0x14>
   3afc0:	4b0d      	ldr	r3, [pc, #52]	; (3aff8 <nrfx_nvmc_page_erase+0x40>)
   3afc2:	4a0e      	ldr	r2, [pc, #56]	; (3affc <nrfx_nvmc_page_erase+0x44>)
   3afc4:	21dd      	movs	r1, #221	; 0xdd
   3afc6:	480e      	ldr	r0, [pc, #56]	; (3b000 <nrfx_nvmc_page_erase+0x48>)
   3afc8:	f003 fcee 	bl	3e9a8 <__assert_func>
    return !(addr % flash_page_size_get());
   3afcc:	f3c0 030b 	ubfx	r3, r0, #0, #12

    if (!is_page_aligned_check(addr))
   3afd0:	b97b      	cbnz	r3, 3aff2 <nrfx_nvmc_page_erase+0x3a>

#if defined(NVMC_CONFIGNS_WEN_Msk)
NRF_STATIC_INLINE void nrf_nvmc_nonsecure_mode_set(NRF_NVMC_Type *    p_reg,
                                                   nrf_nvmc_ns_mode_t mode)
{
    p_reg->CONFIGNS = (uint32_t)mode;
   3afd2:	2202      	movs	r2, #2
   3afd4:	4b0b      	ldr	r3, [pc, #44]	; (3b004 <nrfx_nvmc_page_erase+0x4c>)
   3afd6:	f8c3 2584 	str.w	r2, [r3, #1412]	; 0x584
        p_reg->ERASEPCR1 = page_addr;
    }
#elif defined(NRF52_SERIES)
    p_reg->ERASEPAGE = page_addr;
#elif defined(NRF9160_XXAA) || defined(NRF5340_XXAA_APPLICATION) || defined(NRF5340_XXAA_NETWORK)
    *(volatile uint32_t *)page_addr = 0xFFFFFFFF;
   3afda:	f04f 32ff 	mov.w	r2, #4294967295
   3afde:	6002      	str	r2, [r0, #0]
    return (bool)(p_reg->READY & NVMC_READY_READY_Msk);
   3afe0:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
        return NRFX_ERROR_INVALID_ADDR;
    }

    nvmc_erase_mode_set();
    nrf_nvmc_page_erase_start(NRF_NVMC, addr);
    while (!nrf_nvmc_ready_check(NRF_NVMC))
   3afe4:	07d2      	lsls	r2, r2, #31
   3afe6:	d5fb      	bpl.n	3afe0 <nrfx_nvmc_page_erase+0x28>
    p_reg->CONFIGNS = (uint32_t)mode;
   3afe8:	2200      	movs	r2, #0
    {}
    nvmc_readonly_mode_set();

    return NRFX_SUCCESS;
   3afea:	4807      	ldr	r0, [pc, #28]	; (3b008 <nrfx_nvmc_page_erase+0x50>)
   3afec:	f8c3 2584 	str.w	r2, [r3, #1412]	; 0x584
}
   3aff0:	bd08      	pop	{r3, pc}
        return NRFX_ERROR_INVALID_ADDR;
   3aff2:	4806      	ldr	r0, [pc, #24]	; (3b00c <nrfx_nvmc_page_erase+0x54>)
   3aff4:	e7fc      	b.n	3aff0 <nrfx_nvmc_page_erase+0x38>
   3aff6:	bf00      	nop
   3aff8:	0004cfbf 	.word	0x0004cfbf
   3affc:	0004cf95 	.word	0x0004cf95
   3b000:	0004d02c 	.word	0x0004d02c
   3b004:	40039000 	.word	0x40039000
   3b008:	0bad0000 	.word	0x0bad0000
   3b00c:	0bad000a 	.word	0x0bad000a

0003b010 <nrfx_nvmc_word_write>:
    nrfx_nvmc_word_write(aligned_addr, partial_word_create(addr, &value, 1));
}

void nrfx_nvmc_word_write(uint32_t addr, uint32_t value)
{
    NRFX_ASSERT((addr - NVMC_FLASH_BASE_ADDRESS) < flash_total_size_get());
   3b010:	f5b0 1f80 	cmp.w	r0, #1048576	; 0x100000
{
   3b014:	b538      	push	{r3, r4, r5, lr}
    NRFX_ASSERT((addr - NVMC_FLASH_BASE_ADDRESS) < flash_total_size_get());
   3b016:	d306      	bcc.n	3b026 <nrfx_nvmc_word_write+0x16>
   3b018:	f240 114d 	movw	r1, #333	; 0x14d
   3b01c:	4b0a      	ldr	r3, [pc, #40]	; (3b048 <nrfx_nvmc_word_write+0x38>)
   3b01e:	4a0b      	ldr	r2, [pc, #44]	; (3b04c <nrfx_nvmc_word_write+0x3c>)
    NRFX_ASSERT(nrfx_is_word_aligned((void const *)addr));
   3b020:	480b      	ldr	r0, [pc, #44]	; (3b050 <nrfx_nvmc_word_write+0x40>)
   3b022:	f003 fcc1 	bl	3e9a8 <__assert_func>
   3b026:	f010 0403 	ands.w	r4, r0, #3
   3b02a:	d004      	beq.n	3b036 <nrfx_nvmc_word_write+0x26>
   3b02c:	4b09      	ldr	r3, [pc, #36]	; (3b054 <nrfx_nvmc_word_write+0x44>)
   3b02e:	4a07      	ldr	r2, [pc, #28]	; (3b04c <nrfx_nvmc_word_write+0x3c>)
   3b030:	f44f 71a7 	mov.w	r1, #334	; 0x14e
   3b034:	e7f4      	b.n	3b020 <nrfx_nvmc_word_write+0x10>
   3b036:	2301      	movs	r3, #1
   3b038:	4d07      	ldr	r5, [pc, #28]	; (3b058 <nrfx_nvmc_word_write+0x48>)
   3b03a:	f8c5 3584 	str.w	r3, [r5, #1412]	; 0x584

    nvmc_write_mode_set();

    nvmc_word_write(addr, value);
   3b03e:	f7ff ffaf 	bl	3afa0 <nvmc_word_write>
   3b042:	f8c5 4584 	str.w	r4, [r5, #1412]	; 0x584

    nvmc_readonly_mode_set();
}
   3b046:	bd38      	pop	{r3, r4, r5, pc}
   3b048:	0004cfbf 	.word	0x0004cfbf
   3b04c:	0004cfaa 	.word	0x0004cfaa
   3b050:	0004d02c 	.word	0x0004d02c
   3b054:	0004cfe3 	.word	0x0004cfe3
   3b058:	40039000 	.word	0x40039000

0003b05c <z_sys_device_do_config_level>:
 * off and the next one begins.
 *
 * @param level init level to run.
 */
void z_sys_device_do_config_level(s32_t level)
{
   3b05c:	b570      	push	{r4, r5, r6, lr}
		retval = device_conf->init(info);
		if (retval != 0) {
			/* Initialization failed. Clear the API struct so that
			 * device_get_binding() will not succeed for it.
			 */
			info->driver_api = NULL;
   3b05e:	2600      	movs	r6, #0
	for (info = config_levels[level]; info < config_levels[level+1];
   3b060:	4b08      	ldr	r3, [pc, #32]	; (3b084 <z_sys_device_do_config_level+0x28>)
   3b062:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
   3b066:	3001      	adds	r0, #1
   3b068:	f853 5020 	ldr.w	r5, [r3, r0, lsl #2]
   3b06c:	42a5      	cmp	r5, r4
   3b06e:	d800      	bhi.n	3b072 <z_sys_device_do_config_level+0x16>
		} else {
			z_object_init(info);
		}
	}
}
   3b070:	bd70      	pop	{r4, r5, r6, pc}
		retval = device_conf->init(info);
   3b072:	6823      	ldr	r3, [r4, #0]
   3b074:	4620      	mov	r0, r4
   3b076:	685b      	ldr	r3, [r3, #4]
   3b078:	4798      	blx	r3
		if (retval != 0) {
   3b07a:	b100      	cbz	r0, 3b07e <z_sys_device_do_config_level+0x22>
			info->driver_api = NULL;
   3b07c:	6066      	str	r6, [r4, #4]
								info++) {
   3b07e:	340c      	adds	r4, #12
   3b080:	e7f4      	b.n	3b06c <z_sys_device_do_config_level+0x10>
   3b082:	bf00      	nop
   3b084:	000472b8 	.word	0x000472b8

0003b088 <z_impl_device_get_binding>:
	/* Split the search into two loops: in the common scenario, where
	 * device names are stored in ROM (and are referenced by the user
	 * with CONFIG_* macros), only cheap pointer comparisons will be
	 * performed.  Reserve string comparisons for a fallback.
	 */
	for (info = __device_init_start; info != __device_init_end; info++) {
   3b088:	4b10      	ldr	r3, [pc, #64]	; (3b0cc <z_impl_device_get_binding+0x44>)
{
   3b08a:	b570      	push	{r4, r5, r6, lr}
   3b08c:	4605      	mov	r5, r0
   3b08e:	461e      	mov	r6, r3
	for (info = __device_init_start; info != __device_init_end; info++) {
   3b090:	4c0f      	ldr	r4, [pc, #60]	; (3b0d0 <z_impl_device_get_binding+0x48>)
   3b092:	429c      	cmp	r4, r3
   3b094:	d104      	bne.n	3b0a0 <z_impl_device_get_binding+0x18>
		    (info->config->name == name)) {
			return info;
		}
	}

	for (info = __device_init_start; info != __device_init_end; info++) {
   3b096:	4c0e      	ldr	r4, [pc, #56]	; (3b0d0 <z_impl_device_get_binding+0x48>)
   3b098:	42b4      	cmp	r4, r6
   3b09a:	d109      	bne.n	3b0b0 <z_impl_device_get_binding+0x28>
		if (strcmp(name, info->config->name) == 0) {
			return info;
		}
	}

	return NULL;
   3b09c:	2400      	movs	r4, #0
   3b09e:	e012      	b.n	3b0c6 <z_impl_device_get_binding+0x3e>
		if ((info->driver_api != NULL) &&
   3b0a0:	6862      	ldr	r2, [r4, #4]
   3b0a2:	b11a      	cbz	r2, 3b0ac <z_impl_device_get_binding+0x24>
		    (info->config->name == name)) {
   3b0a4:	6822      	ldr	r2, [r4, #0]
		if ((info->driver_api != NULL) &&
   3b0a6:	6812      	ldr	r2, [r2, #0]
   3b0a8:	42aa      	cmp	r2, r5
   3b0aa:	d00c      	beq.n	3b0c6 <z_impl_device_get_binding+0x3e>
	for (info = __device_init_start; info != __device_init_end; info++) {
   3b0ac:	340c      	adds	r4, #12
   3b0ae:	e7f0      	b.n	3b092 <z_impl_device_get_binding+0xa>
		if (info->driver_api == NULL) {
   3b0b0:	6863      	ldr	r3, [r4, #4]
   3b0b2:	b90b      	cbnz	r3, 3b0b8 <z_impl_device_get_binding+0x30>
	for (info = __device_init_start; info != __device_init_end; info++) {
   3b0b4:	340c      	adds	r4, #12
   3b0b6:	e7ef      	b.n	3b098 <z_impl_device_get_binding+0x10>
		if (strcmp(name, info->config->name) == 0) {
   3b0b8:	6823      	ldr	r3, [r4, #0]
   3b0ba:	4628      	mov	r0, r5
   3b0bc:	6819      	ldr	r1, [r3, #0]
   3b0be:	f7e2 f821 	bl	1d104 <strcmp>
   3b0c2:	2800      	cmp	r0, #0
   3b0c4:	d1f6      	bne.n	3b0b4 <z_impl_device_get_binding+0x2c>
}
   3b0c6:	4620      	mov	r0, r4
   3b0c8:	bd70      	pop	{r4, r5, r6, pc}
   3b0ca:	bf00      	nop
   3b0cc:	20032a84 	.word	0x20032a84
   3b0d0:	200328c8 	.word	0x200328c8

0003b0d4 <z_impl_z_errno>:
#include <syscalls/z_errno_mrsh.c>

#else
int *z_impl_z_errno(void)
{
	return &_current->errno_var;
   3b0d4:	4b01      	ldr	r3, [pc, #4]	; (3b0dc <z_impl_z_errno+0x8>)
   3b0d6:	6898      	ldr	r0, [r3, #8]
}
   3b0d8:	3054      	adds	r0, #84	; 0x54
   3b0da:	4770      	bx	lr
   3b0dc:	2002970c 	.word	0x2002970c

0003b0e0 <z_fatal_error>:
	return 0;
#endif
}

void z_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
   3b0e0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   3b0e2:	4604      	mov	r4, r0
   3b0e4:	460f      	mov	r7, r1
	return z_impl_k_current_get();
   3b0e6:	f002 f9c7 	bl	3d478 <z_impl_k_current_get>
	struct k_thread *thread = k_current_get();

	/* sanitycheck looks for the "ZEPHYR FATAL ERROR" string, don't
	 * change it without also updating sanitycheck
	 */
	LOG_ERR(">>> ZEPHYR FATAL ERROR %d: %s on CPU %d", reason,
   3b0ea:	4d37      	ldr	r5, [pc, #220]	; (3b1c8 <z_fatal_error+0xe8>)
   3b0ec:	4606      	mov	r6, r0
   3b0ee:	682b      	ldr	r3, [r5, #0]
   3b0f0:	0759      	lsls	r1, r3, #29
   3b0f2:	d01a      	beq.n	3b12a <z_fatal_error+0x4a>
   3b0f4:	2301      	movs	r3, #1
   3b0f6:	f04f 0100 	mov.w	r1, #0
   3b0fa:	4a34      	ldr	r2, [pc, #208]	; (3b1cc <z_fatal_error+0xec>)
   3b0fc:	f363 0107 	bfi	r1, r3, #0, #8
   3b100:	4b33      	ldr	r3, [pc, #204]	; (3b1d0 <z_fatal_error+0xf0>)
   3b102:	2c04      	cmp	r4, #4
   3b104:	eba3 0302 	sub.w	r3, r3, r2
   3b108:	ea4f 03d3 	mov.w	r3, r3, lsr #3
   3b10c:	f363 118f 	bfi	r1, r3, #6, #10
	switch (reason) {
   3b110:	bf98      	it	ls
   3b112:	4b30      	ldrls	r3, [pc, #192]	; (3b1d4 <z_fatal_error+0xf4>)
	LOG_ERR(">>> ZEPHYR FATAL ERROR %d: %s on CPU %d", reason,
   3b114:	f8ad 1000 	strh.w	r1, [sp]
   3b118:	bf94      	ite	ls
   3b11a:	f853 2024 	ldrls.w	r2, [r3, r4, lsl #2]
   3b11e:	4a2e      	ldrhi	r2, [pc, #184]	; (3b1d8 <z_fatal_error+0xf8>)
   3b120:	2300      	movs	r3, #0
   3b122:	4621      	mov	r1, r4
   3b124:	482d      	ldr	r0, [pc, #180]	; (3b1dc <z_fatal_error+0xfc>)
   3b126:	f005 fcc5 	bl	40ab4 <log_3>
 * @return true if execution state was in handler mode, before
 *              the current exception occurred, otherwise false.
 */
static ALWAYS_INLINE bool arch_is_in_nested_exception(const z_arch_esf_t *esf)
{
	return (esf->basic.xpsr & IPSR_ISR_Msk) ? (true) : (false);
   3b12a:	69fb      	ldr	r3, [r7, #28]
   3b12c:	f3c3 0308 	ubfx	r3, r3, #0, #9
	 * an IRQ or exception was being handled, or thread context.
	 *
	 * See #17656
	 */
#if defined(CONFIG_ARCH_HAS_NESTED_EXCEPTION_DETECTION)
	if (arch_is_in_nested_exception(esf)) {
   3b130:	b183      	cbz	r3, 3b154 <z_fatal_error+0x74>
		LOG_ERR("Fault during interrupt handling\n");
   3b132:	682b      	ldr	r3, [r5, #0]
   3b134:	075a      	lsls	r2, r3, #29
   3b136:	d02c      	beq.n	3b192 <z_fatal_error+0xb2>
   3b138:	2301      	movs	r3, #1
   3b13a:	f04f 0100 	mov.w	r1, #0
   3b13e:	4a23      	ldr	r2, [pc, #140]	; (3b1cc <z_fatal_error+0xec>)
   3b140:	f363 0107 	bfi	r1, r3, #0, #8
   3b144:	4b22      	ldr	r3, [pc, #136]	; (3b1d0 <z_fatal_error+0xf0>)
   3b146:	4826      	ldr	r0, [pc, #152]	; (3b1e0 <z_fatal_error+0x100>)
   3b148:	1a9b      	subs	r3, r3, r2
   3b14a:	08db      	lsrs	r3, r3, #3
   3b14c:	f363 118f 	bfi	r1, r3, #6, #10
   3b150:	f005 fc77 	bl	40a42 <log_0>
	}
#endif

	LOG_ERR("Current thread: %p (%s)", thread,
   3b154:	682b      	ldr	r3, [r5, #0]
   3b156:	075b      	lsls	r3, r3, #29
   3b158:	d01b      	beq.n	3b192 <z_fatal_error+0xb2>
   3b15a:	2301      	movs	r3, #1
   3b15c:	f04f 0500 	mov.w	r5, #0
   3b160:	4a1b      	ldr	r2, [pc, #108]	; (3b1d0 <z_fatal_error+0xf0>)
   3b162:	f363 0507 	bfi	r5, r3, #0, #8
   3b166:	4b19      	ldr	r3, [pc, #100]	; (3b1cc <z_fatal_error+0xec>)
	const char *thread_name = k_thread_name_get(thread);
   3b168:	4630      	mov	r0, r6
   3b16a:	1ad2      	subs	r2, r2, r3
   3b16c:	08d2      	lsrs	r2, r2, #3
	LOG_ERR("Current thread: %p (%s)", thread,
   3b16e:	f362 158f 	bfi	r5, r2, #6, #10
	const char *thread_name = k_thread_name_get(thread);
   3b172:	f009 fd2e 	bl	44bd2 <k_thread_name_get>
	if (thread_name == NULL || thread_name[0] == '\0') {
   3b176:	b328      	cbz	r0, 3b1c4 <z_fatal_error+0xe4>
   3b178:	7802      	ldrb	r2, [r0, #0]
		thread_name = "unknown";
   3b17a:	4b1a      	ldr	r3, [pc, #104]	; (3b1e4 <z_fatal_error+0x104>)
   3b17c:	2a00      	cmp	r2, #0
   3b17e:	bf08      	it	eq
   3b180:	4618      	moveq	r0, r3
	LOG_ERR("Current thread: %p (%s)", thread,
   3b182:	f7e6 fd93 	bl	21cac <log_strdup>
   3b186:	462b      	mov	r3, r5
   3b188:	4602      	mov	r2, r0
   3b18a:	4631      	mov	r1, r6
   3b18c:	4816      	ldr	r0, [pc, #88]	; (3b1e8 <z_fatal_error+0x108>)
   3b18e:	f005 fc79 	bl	40a84 <log_2>
		log_strdup(thread_name_get(thread)));

	k_sys_fatal_error_handler(reason, esf);
   3b192:	4639      	mov	r1, r7
   3b194:	4620      	mov	r0, r4
   3b196:	f7f7 f8c1 	bl	3231c <k_sys_fatal_error_handler>
	 *
	 * Note that k_thread_abort() returns on some architectures but
	 * not others; e.g. on ARC, x86_64, Xtensa with ASM2, ARM
	 */
	if (!IS_ENABLED(CONFIG_TEST)) {
		__ASSERT(reason != K_ERR_KERNEL_PANIC,
   3b19a:	2c04      	cmp	r4, #4
   3b19c:	d10c      	bne.n	3b1b8 <z_fatal_error+0xd8>
   3b19e:	4913      	ldr	r1, [pc, #76]	; (3b1ec <z_fatal_error+0x10c>)
   3b1a0:	2387      	movs	r3, #135	; 0x87
   3b1a2:	4a13      	ldr	r2, [pc, #76]	; (3b1f0 <z_fatal_error+0x110>)
   3b1a4:	4813      	ldr	r0, [pc, #76]	; (3b1f4 <z_fatal_error+0x114>)
   3b1a6:	f005 fa2c 	bl	40602 <printk>
   3b1aa:	4813      	ldr	r0, [pc, #76]	; (3b1f8 <z_fatal_error+0x118>)
   3b1ac:	f005 fa29 	bl	40602 <printk>
   3b1b0:	2187      	movs	r1, #135	; 0x87
   3b1b2:	480f      	ldr	r0, [pc, #60]	; (3b1f0 <z_fatal_error+0x110>)
   3b1b4:	f005 fae8 	bl	40788 <assert_post_action>
	z_impl_k_thread_abort(thread);
   3b1b8:	4630      	mov	r0, r6
			}
#endif /*CONFIG_ARCH_HAS_NESTED_EXCEPTION_DETECTION */
	}

	k_thread_abort(thread);
}
   3b1ba:	b003      	add	sp, #12
   3b1bc:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   3b1c0:	f7eb bf72 	b.w	270a8 <z_impl_k_thread_abort>
		thread_name = "unknown";
   3b1c4:	4807      	ldr	r0, [pc, #28]	; (3b1e4 <z_fatal_error+0x104>)
   3b1c6:	e7dc      	b.n	3b182 <z_fatal_error+0xa2>
   3b1c8:	20032b3c 	.word	0x20032b3c
   3b1cc:	00045f08 	.word	0x00045f08
   3b1d0:	00046078 	.word	0x00046078
   3b1d4:	000472d0 	.word	0x000472d0
   3b1d8:	0004d0b2 	.word	0x0004d0b2
   3b1dc:	0004d0c8 	.word	0x0004d0c8
   3b1e0:	0004d0f0 	.word	0x0004d0f0
   3b1e4:	0004d0c0 	.word	0x0004d0c0
   3b1e8:	0004d111 	.word	0x0004d111
   3b1ec:	0004d14b 	.word	0x0004d14b
   3b1f0:	0004d129 	.word	0x0004d129
   3b1f4:	0004764f 	.word	0x0004764f
   3b1f8:	0004d168 	.word	0x0004d168

0003b1fc <idle>:
#else
#define IDLE_YIELD_IF_COOP() do { } while (false)
#endif

void idle(void *unused1, void *unused2, void *unused3)
{
   3b1fc:	b508      	push	{r3, lr}
	_kernel.idle = ticks;
   3b1fe:	4d0b      	ldr	r5, [pc, #44]	; (3b22c <idle+0x30>)
	__asm__ volatile(
   3b200:	f04f 0220 	mov.w	r2, #32
   3b204:	f3ef 8311 	mrs	r3, BASEPRI
   3b208:	f382 8811 	msr	BASEPRI, r2
   3b20c:	f3bf 8f6f 	isb	sy
	s32_t ticks = z_get_next_timeout_expiry();
   3b210:	f002 fe14 	bl	3de3c <z_get_next_timeout_expiry>
	z_set_timeout_expiry((ticks < IDLE_THRESH) ? 1 : ticks, true);
   3b214:	2101      	movs	r1, #1
	s32_t ticks = z_get_next_timeout_expiry();
   3b216:	4604      	mov	r4, r0
	z_set_timeout_expiry((ticks < IDLE_THRESH) ? 1 : ticks, true);
   3b218:	2802      	cmp	r0, #2
   3b21a:	bfd8      	it	le
   3b21c:	4608      	movle	r0, r1
   3b21e:	f002 fe55 	bl	3decc <z_set_timeout_expiry>
	_kernel.idle = ticks;
   3b222:	622c      	str	r4, [r5, #32]
	arch_cpu_idle();
   3b224:	f7eb f97c 	bl	26520 <arch_cpu_idle>
   3b228:	e7ea      	b.n	3b200 <idle+0x4>
   3b22a:	bf00      	nop
   3b22c:	2002970c 	.word	0x2002970c

0003b230 <z_bss_zero>:
 *
 * @return N/A
 */
void z_bss_zero(void)
{
	(void)memset(__bss_start, 0, __bss_end - __bss_start);
   3b230:	4802      	ldr	r0, [pc, #8]	; (3b23c <z_bss_zero+0xc>)
__ssp_bos_icheck3(memset, void *, int)
   3b232:	4a03      	ldr	r2, [pc, #12]	; (3b240 <z_bss_zero+0x10>)
   3b234:	2100      	movs	r1, #0
   3b236:	1a12      	subs	r2, r2, r0
   3b238:	f009 be44 	b.w	44ec4 <memset>
   3b23c:	20020000 	.word	0x20020000
   3b240:	2002b640 	.word	0x2002b640

0003b244 <z_data_copy>:
 * This routine copies the data section from ROM to RAM.
 *
 * @return N/A
 */
void z_data_copy(void)
{
   3b244:	b508      	push	{r3, lr}
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   3b246:	4806      	ldr	r0, [pc, #24]	; (3b260 <z_data_copy+0x1c>)
   3b248:	4a06      	ldr	r2, [pc, #24]	; (3b264 <z_data_copy+0x20>)
   3b24a:	4907      	ldr	r1, [pc, #28]	; (3b268 <z_data_copy+0x24>)
   3b24c:	1a12      	subs	r2, r2, r0
   3b24e:	f009 fdff 	bl	44e50 <memcpy>
#else
	(void)memcpy(&_app_smem_start, &_app_smem_rom_start,
		 _app_smem_end - _app_smem_start);
#endif /* CONFIG_STACK_CANARIES */
#endif /* CONFIG_USERSPACE */
}
   3b252:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   3b256:	4a05      	ldr	r2, [pc, #20]	; (3b26c <z_data_copy+0x28>)
   3b258:	4905      	ldr	r1, [pc, #20]	; (3b270 <z_data_copy+0x2c>)
   3b25a:	4806      	ldr	r0, [pc, #24]	; (3b274 <z_data_copy+0x30>)
   3b25c:	f009 bdf8 	b.w	44e50 <memcpy>
   3b260:	20032310 	.word	0x20032310
   3b264:	20032cdc 	.word	0x20032cdc
   3b268:	0004d9dc 	.word	0x0004d9dc
   3b26c:	00000000 	.word	0x00000000
   3b270:	0004d9dc 	.word	0x0004d9dc
   3b274:	20020000 	.word	0x20020000

0003b278 <bg_thread_main>:
	static const unsigned int boot_delay = CONFIG_BOOT_DELAY;
#else
	static const unsigned int boot_delay;
#endif

	z_sys_post_kernel = true;
   3b278:	2201      	movs	r2, #1
{
   3b27a:	b508      	push	{r3, lr}
	z_sys_post_kernel = true;
   3b27c:	4b0b      	ldr	r3, [pc, #44]	; (3b2ac <bg_thread_main+0x34>)

	z_sys_device_do_config_level(_SYS_INIT_LEVEL_POST_KERNEL);
   3b27e:	2002      	movs	r0, #2
	z_sys_post_kernel = true;
   3b280:	701a      	strb	r2, [r3, #0]
	z_sys_device_do_config_level(_SYS_INIT_LEVEL_POST_KERNEL);
   3b282:	f7ff feeb 	bl	3b05c <z_sys_device_do_config_level>
		k_busy_wait(CONFIG_BOOT_DELAY * USEC_PER_MSEC);
	}

#if defined(CONFIG_BOOT_BANNER)
#ifdef BUILD_VERSION
	printk("*** Booting Zephyr OS build %s %s ***\n",
   3b286:	4a0a      	ldr	r2, [pc, #40]	; (3b2b0 <bg_thread_main+0x38>)
   3b288:	490a      	ldr	r1, [pc, #40]	; (3b2b4 <bg_thread_main+0x3c>)
   3b28a:	480b      	ldr	r0, [pc, #44]	; (3b2b8 <bg_thread_main+0x40>)
   3b28c:	f005 f9b9 	bl	40602 <printk>
			KERNEL_VERSION_STRING, BOOT_DELAY_BANNER);
#endif
#endif

	/* Final init level before app starts */
	z_sys_device_do_config_level(_SYS_INIT_LEVEL_APPLICATION);
   3b290:	2003      	movs	r0, #3
   3b292:	f7ff fee3 	bl	3b05c <z_sys_device_do_config_level>
	extern void __do_init_array_aux(void);
	__do_global_ctors_aux();
	__do_init_array_aux();
#endif

	z_init_static_threads();
   3b296:	f002 fac5 	bl	3d824 <z_init_static_threads>
	z_timestamp_main = k_cycle_get_32();
#endif

	extern void main(void);

	main();
   3b29a:	f7e4 fca5 	bl	1fbe8 <main>

	/* Mark nonessenrial since main() has no more work to do */
	z_main_thread.base.user_options &= ~K_ESSENTIAL;
   3b29e:	4a07      	ldr	r2, [pc, #28]	; (3b2bc <bg_thread_main+0x44>)
   3b2a0:	7b13      	ldrb	r3, [r2, #12]
   3b2a2:	f023 0301 	bic.w	r3, r3, #1
   3b2a6:	7313      	strb	r3, [r2, #12]

	/* Dump coverage data once the main() has exited. */
	gcov_coverage_dump();
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */
   3b2a8:	bd08      	pop	{r3, pc}
   3b2aa:	bf00      	nop
   3b2ac:	2002b4ea 	.word	0x2002b4ea
   3b2b0:	0004a299 	.word	0x0004a299
   3b2b4:	0004d19d 	.word	0x0004d19d
   3b2b8:	0004d1bb 	.word	0x0004d1bb
   3b2bc:	200255ec 	.word	0x200255ec

0003b2c0 <z_cstart>:
 * cleared/zeroed.
 *
 * @return Does not return
 */
FUNC_NORETURN void z_cstart(void)
{
   3b2c0:	b580      	push	{r7, lr}
   3b2c2:	b0b2      	sub	sp, #200	; 0xc8
#endif	/* CONFIG_STACK_CANARIES */

	/* gcov hook needed to get the coverage report.*/
	gcov_static_init();

	LOG_CORE_INIT();
   3b2c4:	f7e6 fb40 	bl	21948 <log_core_init>
 *
 * @return N/A
 */
static ALWAYS_INLINE void z_arm_interrupt_stack_setup(void)
{
	u32_t msp = (u32_t)(Z_THREAD_STACK_BUFFER(_interrupt_stack)) +
   3b2c8:	4b33      	ldr	r3, [pc, #204]	; (3b398 <z_cstart+0xd8>)
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
   3b2ca:	f383 8808 	msr	MSP, r3
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   3b2ce:	2400      	movs	r4, #0
   3b2d0:	23e0      	movs	r3, #224	; 0xe0
   3b2d2:	4d32      	ldr	r5, [pc, #200]	; (3b39c <z_cstart+0xdc>)

	/* perform any architecture-specific initialization */
	arch_kernel_init();

#ifdef CONFIG_MULTITHREADING
	struct k_thread dummy_thread = {
   3b2d4:	2701      	movs	r7, #1
   3b2d6:	f885 3022 	strb.w	r3, [r5, #34]	; 0x22
   3b2da:	77ec      	strb	r4, [r5, #31]
   3b2dc:	762c      	strb	r4, [r5, #24]
   3b2de:	766c      	strb	r4, [r5, #25]
   3b2e0:	76ac      	strb	r4, [r5, #26]
#if defined(CONFIG_ARM_SECURE_FIRMWARE)
	NVIC_SetPriority(SecureFault_IRQn, _EXC_FAULT_PRIO);
#endif /* CONFIG_ARM_SECURE_FIRMWARE */

	/* Enable Usage, Mem, & Bus Faults */
	SCB->SHCSR |= SCB_SHCSR_USGFAULTENA_Msk | SCB_SHCSR_MEMFAULTENA_Msk |
   3b2e2:	6a6b      	ldr	r3, [r5, #36]	; 0x24
# ifdef CONFIG_SCHED_CPU_MASK
		 .base.cpu_mask = -1,
# endif
	};

	_current = &dummy_thread;
   3b2e4:	4e2e      	ldr	r6, [pc, #184]	; (3b3a0 <z_cstart+0xe0>)
   3b2e6:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
   3b2ea:	626b      	str	r3, [r5, #36]	; 0x24

static ALWAYS_INLINE void arch_kernel_init(void)
{
	z_arm_interrupt_stack_setup();
	z_arm_exc_setup();
	z_arm_fault_init();
   3b2ec:	f7eb feb6 	bl	2705c <z_arm_fault_init>
	z_arm_cpu_idle_init();
   3b2f0:	f7eb f910 	bl	26514 <z_arm_cpu_idle_init>
static ALWAYS_INLINE void z_arm_clear_faults(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Reset all faults */
	SCB->CFSR = SCB_CFSR_USGFAULTSR_Msk |
   3b2f4:	f04f 33ff 	mov.w	r3, #4294967295
   3b2f8:	62ab      	str	r3, [r5, #40]	; 0x28
		    SCB_CFSR_MEMFAULTSR_Msk |
		    SCB_CFSR_BUSFAULTSR_Msk;

	/* Clear all Hard Faults - HFSR is write-one-to-clear */
	SCB->HFSR = 0xffffffff;
   3b2fa:	62eb      	str	r3, [r5, #44]	; 0x2c
	struct k_thread dummy_thread = {
   3b2fc:	ab06      	add	r3, sp, #24
   3b2fe:	22b0      	movs	r2, #176	; 0xb0
   3b300:	4621      	mov	r1, r4
   3b302:	4618      	mov	r0, r3
   3b304:	f009 fdde 	bl	44ec4 <memset>
	_current = &dummy_thread;
   3b308:	60b0      	str	r0, [r6, #8]
#ifdef CONFIG_USERSPACE
	z_app_shmem_bss_zero();
#endif

	/* perform basic hardware initialization */
	z_sys_device_do_config_level(_SYS_INIT_LEVEL_PRE_KERNEL_1);
   3b30a:	4620      	mov	r0, r4
	struct k_thread dummy_thread = {
   3b30c:	f88d 7025 	strb.w	r7, [sp, #37]	; 0x25
	z_sys_device_do_config_level(_SYS_INIT_LEVEL_PRE_KERNEL_1);
   3b310:	f7ff fea4 	bl	3b05c <z_sys_device_do_config_level>
	z_sys_device_do_config_level(_SYS_INIT_LEVEL_PRE_KERNEL_2);
   3b314:	4638      	mov	r0, r7
   3b316:	f7ff fea1 	bl	3b05c <z_sys_device_do_config_level>
	_kernel.ready_q.cache = &z_main_thread;
   3b31a:	4d22      	ldr	r5, [pc, #136]	; (3b3a4 <z_cstart+0xe4>)
	z_sched_init();
   3b31c:	f001 ff22 	bl	3d164 <z_sched_init>
	z_setup_new_thread(&z_main_thread, z_main_stack,
   3b320:	4b21      	ldr	r3, [pc, #132]	; (3b3a8 <z_cstart+0xe8>)
   3b322:	f44f 5200 	mov.w	r2, #8192	; 0x2000
   3b326:	e9cd 7304 	strd	r7, r3, [sp, #16]
   3b32a:	e9cd 4402 	strd	r4, r4, [sp, #8]
   3b32e:	4b1f      	ldr	r3, [pc, #124]	; (3b3ac <z_cstart+0xec>)
   3b330:	e9cd 4400 	strd	r4, r4, [sp]
   3b334:	491e      	ldr	r1, [pc, #120]	; (3b3b0 <z_cstart+0xf0>)
   3b336:	4628      	mov	r0, r5
	_kernel.ready_q.cache = &z_main_thread;
   3b338:	6275      	str	r5, [r6, #36]	; 0x24
	z_setup_new_thread(&z_main_thread, z_main_stack,
   3b33a:	f002 f989 	bl	3d650 <z_setup_new_thread>
	sys_trace_thread_resume(thread);
}

static inline void z_mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
   3b33e:	7b6b      	ldrb	r3, [r5, #13]
   3b340:	f023 0204 	bic.w	r2, r3, #4
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
   3b344:	f013 0f1b 	tst.w	r3, #27
	thread->base.thread_state &= ~_THREAD_PRESTART;
   3b348:	736a      	strb	r2, [r5, #13]
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
   3b34a:	d104      	bne.n	3b356 <z_cstart+0x96>
	return true;
}

static ALWAYS_INLINE void z_ready_thread(struct k_thread *thread)
{
	if (z_is_thread_ready(thread)) {
   3b34c:	69ab      	ldr	r3, [r5, #24]
   3b34e:	b913      	cbnz	r3, 3b356 <z_cstart+0x96>
		z_add_thread_to_ready_q(thread);
   3b350:	4628      	mov	r0, r5
   3b352:	f001 fa01 	bl	3c758 <z_add_thread_to_ready_q>
	z_setup_new_thread(thread, stack,
   3b356:	4b17      	ldr	r3, [pc, #92]	; (3b3b4 <z_cstart+0xf4>)
   3b358:	2201      	movs	r2, #1
   3b35a:	9305      	str	r3, [sp, #20]
   3b35c:	230f      	movs	r3, #15
   3b35e:	e9cd 3203 	strd	r3, r2, [sp, #12]
   3b362:	2300      	movs	r3, #0
   3b364:	4d14      	ldr	r5, [pc, #80]	; (3b3b8 <z_cstart+0xf8>)
   3b366:	e9cd 3301 	strd	r3, r3, [sp, #4]
   3b36a:	9300      	str	r3, [sp, #0]
   3b36c:	f44f 72a0 	mov.w	r2, #320	; 0x140
   3b370:	4b12      	ldr	r3, [pc, #72]	; (3b3bc <z_cstart+0xfc>)
   3b372:	4913      	ldr	r1, [pc, #76]	; (3b3c0 <z_cstart+0x100>)
   3b374:	4628      	mov	r0, r5
   3b376:	f002 f96b 	bl	3d650 <z_setup_new_thread>
	thread->base.thread_state &= ~_THREAD_PRESTART;
   3b37a:	7b6b      	ldrb	r3, [r5, #13]
	arch_switch_to_main_thread(&z_main_thread, z_main_stack,
   3b37c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
   3b380:	f023 0304 	bic.w	r3, r3, #4
   3b384:	736b      	strb	r3, [r5, #13]
	list->head = (sys_dnode_t *)list;
   3b386:	4b0f      	ldr	r3, [pc, #60]	; (3b3c4 <z_cstart+0x104>)
   3b388:	4909      	ldr	r1, [pc, #36]	; (3b3b0 <z_cstart+0xf0>)
	list->tail = (sys_dnode_t *)list;
   3b38a:	e9c6 3306 	strd	r3, r3, [r6, #24]
   3b38e:	4805      	ldr	r0, [pc, #20]	; (3b3a4 <z_cstart+0xe4>)
   3b390:	4b06      	ldr	r3, [pc, #24]	; (3b3ac <z_cstart+0xec>)
	_kernel.cpus[0].idle_thread = &z_idle_thread;
   3b392:	60f5      	str	r5, [r6, #12]
	arch_switch_to_main_thread(&z_main_thread, z_main_stack,
   3b394:	f7eb f9b4 	bl	26700 <arch_switch_to_main_thread>
	CODE_UNREACHABLE; /* LCOV_EXCL_LINE */
   3b398:	2002f680 	.word	0x2002f680
   3b39c:	e000ed00 	.word	0xe000ed00
   3b3a0:	2002970c 	.word	0x2002970c
   3b3a4:	200255ec 	.word	0x200255ec
   3b3a8:	0004d1e5 	.word	0x0004d1e5
   3b3ac:	0003b279 	.word	0x0003b279
   3b3b0:	2002cd40 	.word	0x2002cd40
   3b3b4:	0004d1ea 	.word	0x0004d1ea
   3b3b8:	2002553c 	.word	0x2002553c
   3b3bc:	0003b1fd 	.word	0x0003b1fd
   3b3c0:	2002ed40 	.word	0x2002ed40
   3b3c4:	20029724 	.word	0x20029724

0003b3c8 <init_mem_slab_module>:
 * Perform any initialization that wasn't done at build time.
 *
 * @return N/A
 */
static int init_mem_slab_module(struct device *dev)
{
   3b3c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	int rc = 0;
	ARG_UNUSED(dev);

	Z_STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
   3b3cc:	4d16      	ldr	r5, [pc, #88]	; (3b428 <init_mem_slab_module+0x60>)
   3b3ce:	4c17      	ldr	r4, [pc, #92]	; (3b42c <init_mem_slab_module+0x64>)
   3b3d0:	46a8      	mov	r8, r5
   3b3d2:	4e17      	ldr	r6, [pc, #92]	; (3b430 <init_mem_slab_module+0x68>)
   3b3d4:	42ac      	cmp	r4, r5
   3b3d6:	d90c      	bls.n	3b3f2 <init_mem_slab_module+0x2a>
   3b3d8:	4916      	ldr	r1, [pc, #88]	; (3b434 <init_mem_slab_module+0x6c>)
   3b3da:	2342      	movs	r3, #66	; 0x42
   3b3dc:	4632      	mov	r2, r6
   3b3de:	4816      	ldr	r0, [pc, #88]	; (3b438 <init_mem_slab_module+0x70>)
   3b3e0:	f005 f90f 	bl	40602 <printk>
   3b3e4:	4815      	ldr	r0, [pc, #84]	; (3b43c <init_mem_slab_module+0x74>)
   3b3e6:	f005 f90c 	bl	40602 <printk>
   3b3ea:	2142      	movs	r1, #66	; 0x42
   3b3ec:	4630      	mov	r0, r6
   3b3ee:	f005 f9cb 	bl	40788 <assert_post_action>
   3b3f2:	4544      	cmp	r4, r8
   3b3f4:	d302      	bcc.n	3b3fc <init_mem_slab_module+0x34>
		}
		SYS_TRACING_OBJ_INIT(k_mem_slab, slab);
		z_object_init(slab);
	}

out:
   3b3f6:	2000      	movs	r0, #0
	return rc;
}
   3b3f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
   3b3fc:	e9d4 1203 	ldrd	r1, r2, [r4, #12]
   3b400:	ea42 0301 	orr.w	r3, r2, r1
   3b404:	f013 0303 	ands.w	r3, r3, #3
   3b408:	d10b      	bne.n	3b422 <init_mem_slab_module+0x5a>
	for (j = 0U; j < slab->num_blocks; j++) {
   3b40a:	68a0      	ldr	r0, [r4, #8]
	slab->free_list = NULL;
   3b40c:	6163      	str	r3, [r4, #20]
	for (j = 0U; j < slab->num_blocks; j++) {
   3b40e:	4283      	cmp	r3, r0
   3b410:	d101      	bne.n	3b416 <init_mem_slab_module+0x4e>
	Z_STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
   3b412:	341c      	adds	r4, #28
   3b414:	e7de      	b.n	3b3d4 <init_mem_slab_module+0xc>
		*(char **)p = slab->free_list;
   3b416:	6967      	ldr	r7, [r4, #20]
	for (j = 0U; j < slab->num_blocks; j++) {
   3b418:	3301      	adds	r3, #1
		*(char **)p = slab->free_list;
   3b41a:	6017      	str	r7, [r2, #0]
		slab->free_list = p;
   3b41c:	6162      	str	r2, [r4, #20]
		p += slab->block_size;
   3b41e:	440a      	add	r2, r1
   3b420:	e7f5      	b.n	3b40e <init_mem_slab_module+0x46>
		return -EINVAL;
   3b422:	f06f 0015 	mvn.w	r0, #21
	return rc;
   3b426:	e7e7      	b.n	3b3f8 <init_mem_slab_module+0x30>
   3b428:	20032b7c 	.word	0x20032b7c
   3b42c:	20032b60 	.word	0x20032b60
   3b430:	0004d1ef 	.word	0x0004d1ef
   3b434:	0004d214 	.word	0x0004d214
   3b438:	0004764f 	.word	0x0004764f
   3b43c:	000494e3 	.word	0x000494e3

0003b440 <k_mem_slab_alloc>:
out:
	return rc;
}

int k_mem_slab_alloc(struct k_mem_slab *slab, void **mem, s32_t timeout)
{
   3b440:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   3b442:	4604      	mov	r4, r0
   3b444:	460d      	mov	r5, r1
   3b446:	4616      	mov	r6, r2
   3b448:	f04f 0320 	mov.w	r3, #32
   3b44c:	f3ef 8711 	mrs	r7, BASEPRI
   3b450:	f383 8811 	msr	BASEPRI, r3
   3b454:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   3b458:	4823      	ldr	r0, [pc, #140]	; (3b4e8 <k_mem_slab_alloc+0xa8>)
   3b45a:	f002 f911 	bl	3d680 <z_spin_lock_valid>
   3b45e:	b968      	cbnz	r0, 3b47c <k_mem_slab_alloc+0x3c>
   3b460:	234a      	movs	r3, #74	; 0x4a
   3b462:	4a22      	ldr	r2, [pc, #136]	; (3b4ec <k_mem_slab_alloc+0xac>)
   3b464:	4922      	ldr	r1, [pc, #136]	; (3b4f0 <k_mem_slab_alloc+0xb0>)
   3b466:	4823      	ldr	r0, [pc, #140]	; (3b4f4 <k_mem_slab_alloc+0xb4>)
   3b468:	f005 f8cb 	bl	40602 <printk>
   3b46c:	491e      	ldr	r1, [pc, #120]	; (3b4e8 <k_mem_slab_alloc+0xa8>)
   3b46e:	4822      	ldr	r0, [pc, #136]	; (3b4f8 <k_mem_slab_alloc+0xb8>)
   3b470:	f005 f8c7 	bl	40602 <printk>
   3b474:	214a      	movs	r1, #74	; 0x4a
   3b476:	481d      	ldr	r0, [pc, #116]	; (3b4ec <k_mem_slab_alloc+0xac>)
   3b478:	f005 f986 	bl	40788 <assert_post_action>
	z_spin_lock_set_owner(l);
   3b47c:	481a      	ldr	r0, [pc, #104]	; (3b4e8 <k_mem_slab_alloc+0xa8>)
   3b47e:	f002 f91d 	bl	3d6bc <z_spin_lock_set_owner>
	k_spinlock_key_t key = k_spin_lock(&lock);
	int result;

	if (slab->free_list != NULL) {
   3b482:	6963      	ldr	r3, [r4, #20]
   3b484:	b1eb      	cbz	r3, 3b4c2 <k_mem_slab_alloc+0x82>
		/* take a free block */
		*mem = slab->free_list;
   3b486:	602b      	str	r3, [r5, #0]
		slab->free_list = *(char **)(slab->free_list);
   3b488:	681b      	ldr	r3, [r3, #0]
   3b48a:	6163      	str	r3, [r4, #20]
		slab->num_used++;
   3b48c:	69a3      	ldr	r3, [r4, #24]
   3b48e:	3301      	adds	r3, #1
   3b490:	61a3      	str	r3, [r4, #24]
		result = 0;
   3b492:	2400      	movs	r4, #0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   3b494:	4814      	ldr	r0, [pc, #80]	; (3b4e8 <k_mem_slab_alloc+0xa8>)
   3b496:	f002 f901 	bl	3d69c <z_spin_unlock_valid>
   3b49a:	b968      	cbnz	r0, 3b4b8 <k_mem_slab_alloc+0x78>
   3b49c:	235d      	movs	r3, #93	; 0x5d
   3b49e:	4a13      	ldr	r2, [pc, #76]	; (3b4ec <k_mem_slab_alloc+0xac>)
   3b4a0:	4916      	ldr	r1, [pc, #88]	; (3b4fc <k_mem_slab_alloc+0xbc>)
   3b4a2:	4814      	ldr	r0, [pc, #80]	; (3b4f4 <k_mem_slab_alloc+0xb4>)
   3b4a4:	f005 f8ad 	bl	40602 <printk>
   3b4a8:	490f      	ldr	r1, [pc, #60]	; (3b4e8 <k_mem_slab_alloc+0xa8>)
   3b4aa:	4815      	ldr	r0, [pc, #84]	; (3b500 <k_mem_slab_alloc+0xc0>)
   3b4ac:	f005 f8a9 	bl	40602 <printk>
   3b4b0:	215d      	movs	r1, #93	; 0x5d
   3b4b2:	480e      	ldr	r0, [pc, #56]	; (3b4ec <k_mem_slab_alloc+0xac>)
   3b4b4:	f005 f968 	bl	40788 <assert_post_action>
	__asm__ volatile(
   3b4b8:	f387 8811 	msr	BASEPRI, r7
   3b4bc:	f3bf 8f6f 	isb	sy
		return result;
	}

	k_spin_unlock(&lock, key);

	return result;
   3b4c0:	e010      	b.n	3b4e4 <k_mem_slab_alloc+0xa4>
	} else if (timeout == K_NO_WAIT) {
   3b4c2:	b91e      	cbnz	r6, 3b4cc <k_mem_slab_alloc+0x8c>
		*mem = NULL;
   3b4c4:	602e      	str	r6, [r5, #0]
		result = -ENOMEM;
   3b4c6:	f06f 040b 	mvn.w	r4, #11
   3b4ca:	e7e3      	b.n	3b494 <k_mem_slab_alloc+0x54>
		result = z_pend_curr(&lock, key, &slab->wait_q, timeout);
   3b4cc:	4622      	mov	r2, r4
   3b4ce:	4633      	mov	r3, r6
   3b4d0:	4639      	mov	r1, r7
   3b4d2:	4805      	ldr	r0, [pc, #20]	; (3b4e8 <k_mem_slab_alloc+0xa8>)
   3b4d4:	f001 fcfa 	bl	3cecc <z_pend_curr>
		if (result == 0) {
   3b4d8:	4604      	mov	r4, r0
   3b4da:	b918      	cbnz	r0, 3b4e4 <k_mem_slab_alloc+0xa4>
			*mem = _current->base.swap_data;
   3b4dc:	4b09      	ldr	r3, [pc, #36]	; (3b504 <k_mem_slab_alloc+0xc4>)
   3b4de:	689b      	ldr	r3, [r3, #8]
   3b4e0:	695b      	ldr	r3, [r3, #20]
   3b4e2:	602b      	str	r3, [r5, #0]
}
   3b4e4:	4620      	mov	r0, r4
   3b4e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   3b4e8:	2002569c 	.word	0x2002569c
   3b4ec:	000498fb 	.word	0x000498fb
   3b4f0:	00049921 	.word	0x00049921
   3b4f4:	0004764f 	.word	0x0004764f
   3b4f8:	00049936 	.word	0x00049936
   3b4fc:	0004994e 	.word	0x0004994e
   3b500:	00049965 	.word	0x00049965
   3b504:	2002970c 	.word	0x2002970c

0003b508 <k_mem_slab_free>:

void k_mem_slab_free(struct k_mem_slab *slab, void **mem)
{
   3b508:	b570      	push	{r4, r5, r6, lr}
   3b50a:	4604      	mov	r4, r0
   3b50c:	460d      	mov	r5, r1
	__asm__ volatile(
   3b50e:	f04f 0320 	mov.w	r3, #32
   3b512:	f3ef 8611 	mrs	r6, BASEPRI
   3b516:	f383 8811 	msr	BASEPRI, r3
   3b51a:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   3b51e:	4824      	ldr	r0, [pc, #144]	; (3b5b0 <k_mem_slab_free+0xa8>)
   3b520:	f002 f8ae 	bl	3d680 <z_spin_lock_valid>
   3b524:	b968      	cbnz	r0, 3b542 <k_mem_slab_free+0x3a>
   3b526:	234a      	movs	r3, #74	; 0x4a
   3b528:	4a22      	ldr	r2, [pc, #136]	; (3b5b4 <k_mem_slab_free+0xac>)
   3b52a:	4923      	ldr	r1, [pc, #140]	; (3b5b8 <k_mem_slab_free+0xb0>)
   3b52c:	4823      	ldr	r0, [pc, #140]	; (3b5bc <k_mem_slab_free+0xb4>)
   3b52e:	f005 f868 	bl	40602 <printk>
   3b532:	491f      	ldr	r1, [pc, #124]	; (3b5b0 <k_mem_slab_free+0xa8>)
   3b534:	4822      	ldr	r0, [pc, #136]	; (3b5c0 <k_mem_slab_free+0xb8>)
   3b536:	f005 f864 	bl	40602 <printk>
   3b53a:	214a      	movs	r1, #74	; 0x4a
   3b53c:	481d      	ldr	r0, [pc, #116]	; (3b5b4 <k_mem_slab_free+0xac>)
   3b53e:	f005 f923 	bl	40788 <assert_post_action>
	z_spin_lock_set_owner(l);
   3b542:	481b      	ldr	r0, [pc, #108]	; (3b5b0 <k_mem_slab_free+0xa8>)
   3b544:	f002 f8ba 	bl	3d6bc <z_spin_lock_set_owner>
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_thread *pending_thread = z_unpend_first_thread(&slab->wait_q);
   3b548:	4620      	mov	r0, r4
   3b54a:	f001 fd7b 	bl	3d044 <z_unpend_first_thread>

	if (pending_thread != NULL) {
   3b54e:	b180      	cbz	r0, 3b572 <k_mem_slab_free+0x6a>
}

static ALWAYS_INLINE void
arch_thread_return_value_set(struct k_thread *thread, unsigned int value)
{
	thread->arch.swap_return_value = value;
   3b550:	2100      	movs	r1, #0
		z_thread_return_value_set_with_data(pending_thread, 0, *mem);
   3b552:	682a      	ldr	r2, [r5, #0]
   3b554:	6681      	str	r1, [r0, #104]	; 0x68
z_thread_return_value_set_with_data(struct k_thread *thread,
				   unsigned int value,
				   void *data)
{
	arch_thread_return_value_set(thread, value);
	thread->base.swap_data = data;
   3b556:	6142      	str	r2, [r0, #20]
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
   3b558:	7b42      	ldrb	r2, [r0, #13]
   3b55a:	06d2      	lsls	r2, r2, #27
   3b55c:	d103      	bne.n	3b566 <k_mem_slab_free+0x5e>
	if (z_is_thread_ready(thread)) {
   3b55e:	6983      	ldr	r3, [r0, #24]
   3b560:	b90b      	cbnz	r3, 3b566 <k_mem_slab_free+0x5e>
		z_add_thread_to_ready_q(thread);
   3b562:	f001 f8f9 	bl	3c758 <z_add_thread_to_ready_q>
		z_ready_thread(pending_thread);
		z_reschedule(&lock, key);
   3b566:	4631      	mov	r1, r6
		**(char ***)mem = slab->free_list;
		slab->free_list = *(char **)mem;
		slab->num_used--;
		k_spin_unlock(&lock, key);
	}
}
   3b568:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		z_reschedule(&lock, key);
   3b56c:	4810      	ldr	r0, [pc, #64]	; (3b5b0 <k_mem_slab_free+0xa8>)
   3b56e:	f000 bf09 	b.w	3c384 <z_reschedule>
		**(char ***)mem = slab->free_list;
   3b572:	682b      	ldr	r3, [r5, #0]
   3b574:	6962      	ldr	r2, [r4, #20]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   3b576:	480e      	ldr	r0, [pc, #56]	; (3b5b0 <k_mem_slab_free+0xa8>)
   3b578:	601a      	str	r2, [r3, #0]
		slab->free_list = *(char **)mem;
   3b57a:	682b      	ldr	r3, [r5, #0]
   3b57c:	6163      	str	r3, [r4, #20]
		slab->num_used--;
   3b57e:	69a3      	ldr	r3, [r4, #24]
   3b580:	3b01      	subs	r3, #1
   3b582:	61a3      	str	r3, [r4, #24]
   3b584:	f002 f88a 	bl	3d69c <z_spin_unlock_valid>
   3b588:	b968      	cbnz	r0, 3b5a6 <k_mem_slab_free+0x9e>
   3b58a:	235d      	movs	r3, #93	; 0x5d
   3b58c:	4a09      	ldr	r2, [pc, #36]	; (3b5b4 <k_mem_slab_free+0xac>)
   3b58e:	490d      	ldr	r1, [pc, #52]	; (3b5c4 <k_mem_slab_free+0xbc>)
   3b590:	480a      	ldr	r0, [pc, #40]	; (3b5bc <k_mem_slab_free+0xb4>)
   3b592:	f005 f836 	bl	40602 <printk>
   3b596:	4906      	ldr	r1, [pc, #24]	; (3b5b0 <k_mem_slab_free+0xa8>)
   3b598:	480b      	ldr	r0, [pc, #44]	; (3b5c8 <k_mem_slab_free+0xc0>)
   3b59a:	f005 f832 	bl	40602 <printk>
   3b59e:	215d      	movs	r1, #93	; 0x5d
   3b5a0:	4804      	ldr	r0, [pc, #16]	; (3b5b4 <k_mem_slab_free+0xac>)
   3b5a2:	f005 f8f1 	bl	40788 <assert_post_action>
	__asm__ volatile(
   3b5a6:	f386 8811 	msr	BASEPRI, r6
   3b5aa:	f3bf 8f6f 	isb	sy
}
   3b5ae:	bd70      	pop	{r4, r5, r6, pc}
   3b5b0:	2002569c 	.word	0x2002569c
   3b5b4:	000498fb 	.word	0x000498fb
   3b5b8:	00049921 	.word	0x00049921
   3b5bc:	0004764f 	.word	0x0004764f
   3b5c0:	00049936 	.word	0x00049936
   3b5c4:	0004994e 	.word	0x0004994e
   3b5c8:	00049965 	.word	0x00049965

0003b5cc <init_static_pools>:
	z_waitq_init(&p->wait_q);
	z_sys_mem_pool_base_init(&p->base);
}

int init_static_pools(struct device *unused)
{
   3b5cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	ARG_UNUSED(unused);

	Z_STRUCT_SECTION_FOREACH(k_mem_pool, p) {
   3b5ce:	4d10      	ldr	r5, [pc, #64]	; (3b610 <init_static_pools+0x44>)
   3b5d0:	4c10      	ldr	r4, [pc, #64]	; (3b614 <init_static_pools+0x48>)
   3b5d2:	462f      	mov	r7, r5
   3b5d4:	4e10      	ldr	r6, [pc, #64]	; (3b618 <init_static_pools+0x4c>)
   3b5d6:	42ac      	cmp	r4, r5
   3b5d8:	d90c      	bls.n	3b5f4 <init_static_pools+0x28>
   3b5da:	4910      	ldr	r1, [pc, #64]	; (3b61c <init_static_pools+0x50>)
   3b5dc:	2328      	movs	r3, #40	; 0x28
   3b5de:	4632      	mov	r2, r6
   3b5e0:	480f      	ldr	r0, [pc, #60]	; (3b620 <init_static_pools+0x54>)
   3b5e2:	f005 f80e 	bl	40602 <printk>
   3b5e6:	480f      	ldr	r0, [pc, #60]	; (3b624 <init_static_pools+0x58>)
   3b5e8:	f005 f80b 	bl	40602 <printk>
   3b5ec:	2128      	movs	r1, #40	; 0x28
   3b5ee:	4630      	mov	r0, r6
   3b5f0:	f005 f8ca 	bl	40788 <assert_post_action>
   3b5f4:	42bc      	cmp	r4, r7
   3b5f6:	d301      	bcc.n	3b5fc <init_static_pools+0x30>
		k_mem_pool_init(p);
	}

	return 0;
}
   3b5f8:	2000      	movs	r0, #0
   3b5fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	SYS_DLIST_FOR_EACH_CONTAINER(&((wq)->waitq), thread_ptr, \
				     base.qnode_dlist)

static inline void z_waitq_init(_wait_q_t *w)
{
	sys_dlist_init(&w->waitq);
   3b5fc:	f104 0314 	add.w	r3, r4, #20
	z_sys_mem_pool_base_init(&p->base);
   3b600:	4620      	mov	r0, r4
   3b602:	e9c4 3305 	strd	r3, r3, [r4, #20]
   3b606:	f004 fd71 	bl	400ec <z_sys_mem_pool_base_init>
	Z_STRUCT_SECTION_FOREACH(k_mem_pool, p) {
   3b60a:	341c      	adds	r4, #28
   3b60c:	e7e3      	b.n	3b5d6 <init_static_pools+0xa>
   3b60e:	bf00      	nop
   3b610:	20032b98 	.word	0x20032b98
   3b614:	20032b7c 	.word	0x20032b7c
   3b618:	0004d231 	.word	0x0004d231
   3b61c:	0004d255 	.word	0x0004d255
   3b620:	0004764f 	.word	0x0004764f
   3b624:	000494e3 	.word	0x000494e3

0003b628 <k_mem_pool_alloc>:

SYS_INIT(init_static_pools, PRE_KERNEL_1, CONFIG_KERNEL_INIT_PRIORITY_OBJECTS);

int k_mem_pool_alloc(struct k_mem_pool *p, struct k_mem_block *block,
		     size_t size, s32_t timeout)
{
   3b628:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   3b62c:	4607      	mov	r7, r0
   3b62e:	b085      	sub	sp, #20
   3b630:	460d      	mov	r5, r1
   3b632:	4692      	mov	sl, r2
   3b634:	461c      	mov	r4, r3
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   3b636:	f3ef 8305 	mrs	r3, IPSR
	int ret;
	s64_t end = 0;

	__ASSERT(!(arch_is_in_isr() && timeout != K_NO_WAIT), "");
   3b63a:	2b00      	cmp	r3, #0
   3b63c:	d048      	beq.n	3b6d0 <k_mem_pool_alloc+0xa8>
   3b63e:	2c00      	cmp	r4, #0
   3b640:	d139      	bne.n	3b6b6 <k_mem_pool_alloc+0x8e>
	s64_t end = 0;
   3b642:	f04f 0800 	mov.w	r8, #0
	return pool - &_k_mem_pool_list_start[0];
   3b646:	4b26      	ldr	r3, [pc, #152]	; (3b6e0 <k_mem_pool_alloc+0xb8>)
   3b648:	4e26      	ldr	r6, [pc, #152]	; (3b6e4 <k_mem_pool_alloc+0xbc>)
   3b64a:	1afb      	subs	r3, r7, r3
   3b64c:	109b      	asrs	r3, r3, #2
   3b64e:	435e      	muls	r6, r3
		if (ret == 0 || timeout == K_NO_WAIT ||
		    ret != -ENOMEM) {
			return ret;
		}

		z_pend_curr_unlocked(&p->wait_q, timeout);
   3b650:	f107 0b14 	add.w	fp, r7, #20
		block->id.pool = pool_id(p);
   3b654:	b2f6      	uxtb	r6, r6
		ret = z_sys_mem_pool_block_alloc(&p->base, size,
   3b656:	ab03      	add	r3, sp, #12
   3b658:	aa02      	add	r2, sp, #8
   3b65a:	9500      	str	r5, [sp, #0]
   3b65c:	4651      	mov	r1, sl
   3b65e:	4638      	mov	r0, r7
   3b660:	f004 fd8a 	bl	40178 <z_sys_mem_pool_block_alloc>
		block->id.level = level_num;
   3b664:	796b      	ldrb	r3, [r5, #5]
   3b666:	9a02      	ldr	r2, [sp, #8]
		block->id.pool = pool_id(p);
   3b668:	712e      	strb	r6, [r5, #4]
		block->id.level = level_num;
   3b66a:	f362 0303 	bfi	r3, r2, #0, #4
   3b66e:	716b      	strb	r3, [r5, #5]
		block->id.block = block_num;
   3b670:	686b      	ldr	r3, [r5, #4]
   3b672:	9a03      	ldr	r2, [sp, #12]
   3b674:	f362 331f 	bfi	r3, r2, #12, #20
   3b678:	606b      	str	r3, [r5, #4]
		if (ret == 0 || timeout == K_NO_WAIT ||
   3b67a:	b1c8      	cbz	r0, 3b6b0 <k_mem_pool_alloc+0x88>
   3b67c:	b1c4      	cbz	r4, 3b6b0 <k_mem_pool_alloc+0x88>
   3b67e:	f110 0f0c 	cmn.w	r0, #12
   3b682:	d115      	bne.n	3b6b0 <k_mem_pool_alloc+0x88>
	__asm__ volatile(
   3b684:	f04f 0320 	mov.w	r3, #32
   3b688:	f3ef 8011 	mrs	r0, BASEPRI
   3b68c:	f383 8811 	msr	BASEPRI, r3
   3b690:	f3bf 8f6f 	isb	sy
	(void) z_pend_curr_irqlock(arch_irq_lock(), wait_q, timeout);
   3b694:	4622      	mov	r2, r4
   3b696:	4659      	mov	r1, fp
   3b698:	f001 fbbe 	bl	3ce18 <z_pend_curr_irqlock>

		if (timeout != K_FOREVER) {
   3b69c:	1c63      	adds	r3, r4, #1
   3b69e:	d0da      	beq.n	3b656 <k_mem_pool_alloc+0x2e>
	return z_impl_k_uptime_get();
   3b6a0:	f009 fb0f 	bl	44cc2 <z_impl_k_uptime_get>
			timeout = end - k_uptime_get();
   3b6a4:	eba8 0400 	sub.w	r4, r8, r0
			if (timeout <= 0) {
   3b6a8:	2c00      	cmp	r4, #0
   3b6aa:	dcd4      	bgt.n	3b656 <k_mem_pool_alloc+0x2e>
				break;
			}
		}
	}

	return -EAGAIN;
   3b6ac:	f06f 000a 	mvn.w	r0, #10
}
   3b6b0:	b005      	add	sp, #20
   3b6b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	__ASSERT(!(arch_is_in_isr() && timeout != K_NO_WAIT), "");
   3b6b6:	490c      	ldr	r1, [pc, #48]	; (3b6e8 <k_mem_pool_alloc+0xc0>)
   3b6b8:	2337      	movs	r3, #55	; 0x37
   3b6ba:	4a0c      	ldr	r2, [pc, #48]	; (3b6ec <k_mem_pool_alloc+0xc4>)
   3b6bc:	480c      	ldr	r0, [pc, #48]	; (3b6f0 <k_mem_pool_alloc+0xc8>)
   3b6be:	f004 ffa0 	bl	40602 <printk>
   3b6c2:	480c      	ldr	r0, [pc, #48]	; (3b6f4 <k_mem_pool_alloc+0xcc>)
   3b6c4:	f004 ff9d 	bl	40602 <printk>
   3b6c8:	2137      	movs	r1, #55	; 0x37
   3b6ca:	4808      	ldr	r0, [pc, #32]	; (3b6ec <k_mem_pool_alloc+0xc4>)
   3b6cc:	f005 f85c 	bl	40788 <assert_post_action>
	if (timeout > 0) {
   3b6d0:	2c00      	cmp	r4, #0
   3b6d2:	ddb6      	ble.n	3b642 <k_mem_pool_alloc+0x1a>
   3b6d4:	f009 faf5 	bl	44cc2 <z_impl_k_uptime_get>
		end = k_uptime_get() + timeout;
   3b6d8:	eb10 0804 	adds.w	r8, r0, r4
   3b6dc:	e7b3      	b.n	3b646 <k_mem_pool_alloc+0x1e>
   3b6de:	bf00      	nop
   3b6e0:	20032b7c 	.word	0x20032b7c
   3b6e4:	b6db6db7 	.word	0xb6db6db7
   3b6e8:	0004d26f 	.word	0x0004d26f
   3b6ec:	0004d231 	.word	0x0004d231
   3b6f0:	0004764f 	.word	0x0004764f
   3b6f4:	0004a297 	.word	0x0004a297

0003b6f8 <k_mem_pool_free_id>:

void k_mem_pool_free_id(struct k_mem_block_id *id)
{
   3b6f8:	b570      	push	{r4, r5, r6, lr}
   3b6fa:	7804      	ldrb	r4, [r0, #0]
	int need_sched = 0;
	struct k_mem_pool *p = get_pool(id->pool);

	z_sys_mem_pool_block_free(&p->base, id->level, id->block);
   3b6fc:	6802      	ldr	r2, [r0, #0]
   3b6fe:	7841      	ldrb	r1, [r0, #1]
   3b700:	4d24      	ldr	r5, [pc, #144]	; (3b794 <k_mem_pool_free_id+0x9c>)
   3b702:	ebc4 04c4 	rsb	r4, r4, r4, lsl #3
   3b706:	00a4      	lsls	r4, r4, #2
   3b708:	0b12      	lsrs	r2, r2, #12
   3b70a:	f001 010f 	and.w	r1, r1, #15
   3b70e:	1928      	adds	r0, r5, r4
   3b710:	f7e5 feca 	bl	214a8 <z_sys_mem_pool_block_free>
   3b714:	f04f 0320 	mov.w	r3, #32
   3b718:	f3ef 8611 	mrs	r6, BASEPRI
   3b71c:	f383 8811 	msr	BASEPRI, r3
   3b720:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   3b724:	481c      	ldr	r0, [pc, #112]	; (3b798 <k_mem_pool_free_id+0xa0>)
   3b726:	f001 ffab 	bl	3d680 <z_spin_lock_valid>
   3b72a:	b968      	cbnz	r0, 3b748 <k_mem_pool_free_id+0x50>
   3b72c:	234a      	movs	r3, #74	; 0x4a
   3b72e:	4a1b      	ldr	r2, [pc, #108]	; (3b79c <k_mem_pool_free_id+0xa4>)
   3b730:	491b      	ldr	r1, [pc, #108]	; (3b7a0 <k_mem_pool_free_id+0xa8>)
   3b732:	481c      	ldr	r0, [pc, #112]	; (3b7a4 <k_mem_pool_free_id+0xac>)
   3b734:	f004 ff65 	bl	40602 <printk>
   3b738:	4917      	ldr	r1, [pc, #92]	; (3b798 <k_mem_pool_free_id+0xa0>)
   3b73a:	481b      	ldr	r0, [pc, #108]	; (3b7a8 <k_mem_pool_free_id+0xb0>)
   3b73c:	f004 ff61 	bl	40602 <printk>
   3b740:	214a      	movs	r1, #74	; 0x4a
   3b742:	4816      	ldr	r0, [pc, #88]	; (3b79c <k_mem_pool_free_id+0xa4>)
   3b744:	f005 f820 	bl	40788 <assert_post_action>
	z_spin_lock_set_owner(l);
   3b748:	4813      	ldr	r0, [pc, #76]	; (3b798 <k_mem_pool_free_id+0xa0>)
   3b74a:	f001 ffb7 	bl	3d6bc <z_spin_lock_set_owner>
	 * is unsynchronized.  Maybe we want to put the lock into the
	 * wait_q instead and make the API safe?)
	 */
	k_spinlock_key_t key = k_spin_lock(&lock);

	need_sched = z_unpend_all(&p->wait_q);
   3b74e:	f104 0014 	add.w	r0, r4, #20
   3b752:	4428      	add	r0, r5
   3b754:	f009 fa0c 	bl	44b70 <z_unpend_all>

	if (need_sched != 0) {
   3b758:	b128      	cbz	r0, 3b766 <k_mem_pool_free_id+0x6e>
		z_reschedule(&lock, key);
   3b75a:	4631      	mov	r1, r6
	} else {
		k_spin_unlock(&lock, key);
	}
}
   3b75c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		z_reschedule(&lock, key);
   3b760:	480d      	ldr	r0, [pc, #52]	; (3b798 <k_mem_pool_free_id+0xa0>)
   3b762:	f000 be0f 	b.w	3c384 <z_reschedule>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   3b766:	480c      	ldr	r0, [pc, #48]	; (3b798 <k_mem_pool_free_id+0xa0>)
   3b768:	f001 ff98 	bl	3d69c <z_spin_unlock_valid>
   3b76c:	b968      	cbnz	r0, 3b78a <k_mem_pool_free_id+0x92>
   3b76e:	235d      	movs	r3, #93	; 0x5d
   3b770:	4a0a      	ldr	r2, [pc, #40]	; (3b79c <k_mem_pool_free_id+0xa4>)
   3b772:	490e      	ldr	r1, [pc, #56]	; (3b7ac <k_mem_pool_free_id+0xb4>)
   3b774:	480b      	ldr	r0, [pc, #44]	; (3b7a4 <k_mem_pool_free_id+0xac>)
   3b776:	f004 ff44 	bl	40602 <printk>
   3b77a:	4907      	ldr	r1, [pc, #28]	; (3b798 <k_mem_pool_free_id+0xa0>)
   3b77c:	480c      	ldr	r0, [pc, #48]	; (3b7b0 <k_mem_pool_free_id+0xb8>)
   3b77e:	f004 ff40 	bl	40602 <printk>
   3b782:	215d      	movs	r1, #93	; 0x5d
   3b784:	4805      	ldr	r0, [pc, #20]	; (3b79c <k_mem_pool_free_id+0xa4>)
   3b786:	f004 ffff 	bl	40788 <assert_post_action>
	__asm__ volatile(
   3b78a:	f386 8811 	msr	BASEPRI, r6
   3b78e:	f3bf 8f6f 	isb	sy
}
   3b792:	bd70      	pop	{r4, r5, r6, pc}
   3b794:	20032b7c 	.word	0x20032b7c
   3b798:	20029704 	.word	0x20029704
   3b79c:	000498fb 	.word	0x000498fb
   3b7a0:	00049921 	.word	0x00049921
   3b7a4:	0004764f 	.word	0x0004764f
   3b7a8:	00049936 	.word	0x00049936
   3b7ac:	0004994e 	.word	0x0004994e
   3b7b0:	00049965 	.word	0x00049965

0003b7b4 <k_malloc>:
		  CONFIG_HEAP_MEM_POOL_SIZE, 1, 4);
#define _HEAP_MEM_POOL (&_heap_mem_pool)

void *k_malloc(size_t size)
{
	return k_mem_pool_malloc(_HEAP_MEM_POOL, size);
   3b7b4:	4601      	mov	r1, r0
   3b7b6:	4801      	ldr	r0, [pc, #4]	; (3b7bc <k_malloc+0x8>)
   3b7b8:	f009 b95e 	b.w	44a78 <k_mem_pool_malloc>
   3b7bc:	20032b7c 	.word	0x20032b7c

0003b7c0 <z_thread_malloc>:
#else
#define _HEAP_MEM_POOL	NULL
#endif

void *z_thread_malloc(size_t size)
{
   3b7c0:	b510      	push	{r4, lr}
   3b7c2:	4604      	mov	r4, r0
	void *ret;
	struct k_mem_pool *pool;

	if (k_is_in_isr()) {
   3b7c4:	f009 f9fa 	bl	44bbc <k_is_in_isr>
   3b7c8:	b948      	cbnz	r0, 3b7de <z_thread_malloc+0x1e>
		pool = _HEAP_MEM_POOL;
	} else {
		pool = _current->resource_pool;
   3b7ca:	4b06      	ldr	r3, [pc, #24]	; (3b7e4 <z_thread_malloc+0x24>)
   3b7cc:	689b      	ldr	r3, [r3, #8]
   3b7ce:	6e1b      	ldr	r3, [r3, #96]	; 0x60
	}

	if (pool) {
   3b7d0:	b13b      	cbz	r3, 3b7e2 <z_thread_malloc+0x22>
		ret = k_mem_pool_malloc(pool, size);
   3b7d2:	4621      	mov	r1, r4
	} else {
		ret = NULL;
	}

	return ret;
}
   3b7d4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		ret = k_mem_pool_malloc(pool, size);
   3b7d8:	4618      	mov	r0, r3
   3b7da:	f009 b94d 	b.w	44a78 <k_mem_pool_malloc>
		pool = _HEAP_MEM_POOL;
   3b7de:	4b02      	ldr	r3, [pc, #8]	; (3b7e8 <z_thread_malloc+0x28>)
   3b7e0:	e7f7      	b.n	3b7d2 <z_thread_malloc+0x12>
}
   3b7e2:	bd10      	pop	{r4, pc}
   3b7e4:	2002970c 	.word	0x2002970c
   3b7e8:	20032b7c 	.word	0x20032b7c

0003b7ec <z_impl_k_msgq_put>:
	return 0;
}


int z_impl_k_msgq_put(struct k_msgq *msgq, void *data, s32_t timeout)
{
   3b7ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   3b7f0:	4604      	mov	r4, r0
   3b7f2:	4688      	mov	r8, r1
   3b7f4:	4616      	mov	r6, r2
   3b7f6:	f3ef 8305 	mrs	r3, IPSR
	__ASSERT(!arch_is_in_isr() || timeout == K_NO_WAIT, "");
   3b7fa:	b16b      	cbz	r3, 3b818 <z_impl_k_msgq_put+0x2c>
   3b7fc:	b162      	cbz	r2, 3b818 <z_impl_k_msgq_put+0x2c>
   3b7fe:	4941      	ldr	r1, [pc, #260]	; (3b904 <z_impl_k_msgq_put+0x118>)
   3b800:	2376      	movs	r3, #118	; 0x76
   3b802:	4a41      	ldr	r2, [pc, #260]	; (3b908 <z_impl_k_msgq_put+0x11c>)
   3b804:	4841      	ldr	r0, [pc, #260]	; (3b90c <z_impl_k_msgq_put+0x120>)
   3b806:	f004 fefc 	bl	40602 <printk>
   3b80a:	4841      	ldr	r0, [pc, #260]	; (3b910 <z_impl_k_msgq_put+0x124>)
   3b80c:	f004 fef9 	bl	40602 <printk>
   3b810:	2176      	movs	r1, #118	; 0x76
   3b812:	483d      	ldr	r0, [pc, #244]	; (3b908 <z_impl_k_msgq_put+0x11c>)
   3b814:	f004 ffb8 	bl	40788 <assert_post_action>

	struct k_thread *pending_thread;
	k_spinlock_key_t key;
	int result;

	key = k_spin_lock(&msgq->lock);
   3b818:	f104 0508 	add.w	r5, r4, #8
	__asm__ volatile(
   3b81c:	f04f 0320 	mov.w	r3, #32
   3b820:	f3ef 8711 	mrs	r7, BASEPRI
   3b824:	f383 8811 	msr	BASEPRI, r3
   3b828:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   3b82c:	4628      	mov	r0, r5
   3b82e:	f001 ff27 	bl	3d680 <z_spin_lock_valid>
   3b832:	b968      	cbnz	r0, 3b850 <z_impl_k_msgq_put+0x64>
   3b834:	234a      	movs	r3, #74	; 0x4a
   3b836:	4a37      	ldr	r2, [pc, #220]	; (3b914 <z_impl_k_msgq_put+0x128>)
   3b838:	4937      	ldr	r1, [pc, #220]	; (3b918 <z_impl_k_msgq_put+0x12c>)
   3b83a:	4834      	ldr	r0, [pc, #208]	; (3b90c <z_impl_k_msgq_put+0x120>)
   3b83c:	f004 fee1 	bl	40602 <printk>
   3b840:	4629      	mov	r1, r5
   3b842:	4836      	ldr	r0, [pc, #216]	; (3b91c <z_impl_k_msgq_put+0x130>)
   3b844:	f004 fedd 	bl	40602 <printk>
   3b848:	214a      	movs	r1, #74	; 0x4a
   3b84a:	4832      	ldr	r0, [pc, #200]	; (3b914 <z_impl_k_msgq_put+0x128>)
   3b84c:	f004 ff9c 	bl	40788 <assert_post_action>
	z_spin_lock_set_owner(l);
   3b850:	4628      	mov	r0, r5
   3b852:	f001 ff33 	bl	3d6bc <z_spin_lock_set_owner>

	if (msgq->used_msgs < msgq->max_msgs) {
   3b856:	6a62      	ldr	r2, [r4, #36]	; 0x24
   3b858:	6923      	ldr	r3, [r4, #16]
   3b85a:	429a      	cmp	r2, r3
   3b85c:	d242      	bcs.n	3b8e4 <z_impl_k_msgq_put+0xf8>
		/* message queue isn't full */
		pending_thread = z_unpend_first_thread(&msgq->wait_q);
   3b85e:	4620      	mov	r0, r4
   3b860:	f001 fbf0 	bl	3d044 <z_unpend_first_thread>
		if (pending_thread != NULL) {
   3b864:	68e2      	ldr	r2, [r4, #12]
   3b866:	4606      	mov	r6, r0
   3b868:	4641      	mov	r1, r8
   3b86a:	b1a0      	cbz	r0, 3b896 <z_impl_k_msgq_put+0xaa>
   3b86c:	6940      	ldr	r0, [r0, #20]
   3b86e:	f009 faef 	bl	44e50 <memcpy>
   3b872:	2300      	movs	r3, #0
   3b874:	66b3      	str	r3, [r6, #104]	; 0x68
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
   3b876:	7b73      	ldrb	r3, [r6, #13]
   3b878:	06db      	lsls	r3, r3, #27
   3b87a:	d104      	bne.n	3b886 <z_impl_k_msgq_put+0x9a>
	if (z_is_thread_ready(thread)) {
   3b87c:	69b3      	ldr	r3, [r6, #24]
   3b87e:	b913      	cbnz	r3, 3b886 <z_impl_k_msgq_put+0x9a>
		z_add_thread_to_ready_q(thread);
   3b880:	4630      	mov	r0, r6
   3b882:	f000 ff69 	bl	3c758 <z_add_thread_to_ready_q>
			(void)memcpy(pending_thread->base.swap_data, data,
			       msgq->msg_size);
			/* wake up waiting thread */
			arch_thread_return_value_set(pending_thread, 0);
			z_ready_thread(pending_thread);
			z_reschedule(&msgq->lock, key);
   3b886:	4639      	mov	r1, r7
   3b888:	4628      	mov	r0, r5
   3b88a:	f000 fd7b 	bl	3c384 <z_reschedule>
			return 0;
   3b88e:	2400      	movs	r4, #0
	}

	k_spin_unlock(&msgq->lock, key);

	return result;
}
   3b890:	4620      	mov	r0, r4
   3b892:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   3b896:	6a20      	ldr	r0, [r4, #32]
   3b898:	f009 fada 	bl	44e50 <memcpy>
			msgq->write_ptr += msgq->msg_size;
   3b89c:	6a23      	ldr	r3, [r4, #32]
   3b89e:	68e2      	ldr	r2, [r4, #12]
   3b8a0:	4413      	add	r3, r2
			if (msgq->write_ptr == msgq->buffer_end) {
   3b8a2:	69a2      	ldr	r2, [r4, #24]
			msgq->write_ptr += msgq->msg_size;
   3b8a4:	6223      	str	r3, [r4, #32]
			if (msgq->write_ptr == msgq->buffer_end) {
   3b8a6:	4293      	cmp	r3, r2
				msgq->write_ptr = msgq->buffer_start;
   3b8a8:	bf04      	itt	eq
   3b8aa:	6963      	ldreq	r3, [r4, #20]
   3b8ac:	6223      	streq	r3, [r4, #32]
			msgq->used_msgs++;
   3b8ae:	6a63      	ldr	r3, [r4, #36]	; 0x24
   3b8b0:	3301      	adds	r3, #1
   3b8b2:	6263      	str	r3, [r4, #36]	; 0x24
		result = 0;
   3b8b4:	2400      	movs	r4, #0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   3b8b6:	4628      	mov	r0, r5
   3b8b8:	f001 fef0 	bl	3d69c <z_spin_unlock_valid>
   3b8bc:	b968      	cbnz	r0, 3b8da <z_impl_k_msgq_put+0xee>
   3b8be:	235d      	movs	r3, #93	; 0x5d
   3b8c0:	4a14      	ldr	r2, [pc, #80]	; (3b914 <z_impl_k_msgq_put+0x128>)
   3b8c2:	4917      	ldr	r1, [pc, #92]	; (3b920 <z_impl_k_msgq_put+0x134>)
   3b8c4:	4811      	ldr	r0, [pc, #68]	; (3b90c <z_impl_k_msgq_put+0x120>)
   3b8c6:	f004 fe9c 	bl	40602 <printk>
   3b8ca:	4629      	mov	r1, r5
   3b8cc:	4815      	ldr	r0, [pc, #84]	; (3b924 <z_impl_k_msgq_put+0x138>)
   3b8ce:	f004 fe98 	bl	40602 <printk>
   3b8d2:	215d      	movs	r1, #93	; 0x5d
   3b8d4:	480f      	ldr	r0, [pc, #60]	; (3b914 <z_impl_k_msgq_put+0x128>)
   3b8d6:	f004 ff57 	bl	40788 <assert_post_action>
	__asm__ volatile(
   3b8da:	f387 8811 	msr	BASEPRI, r7
   3b8de:	f3bf 8f6f 	isb	sy
	return result;
   3b8e2:	e7d5      	b.n	3b890 <z_impl_k_msgq_put+0xa4>
	} else if (timeout == K_NO_WAIT) {
   3b8e4:	b15e      	cbz	r6, 3b8fe <z_impl_k_msgq_put+0x112>
		_current->base.swap_data = data;
   3b8e6:	4b10      	ldr	r3, [pc, #64]	; (3b928 <z_impl_k_msgq_put+0x13c>)
		return z_pend_curr(&msgq->lock, key, &msgq->wait_q, timeout);
   3b8e8:	4622      	mov	r2, r4
		_current->base.swap_data = data;
   3b8ea:	689b      	ldr	r3, [r3, #8]
		return z_pend_curr(&msgq->lock, key, &msgq->wait_q, timeout);
   3b8ec:	4639      	mov	r1, r7
		_current->base.swap_data = data;
   3b8ee:	f8c3 8014 	str.w	r8, [r3, #20]
		return z_pend_curr(&msgq->lock, key, &msgq->wait_q, timeout);
   3b8f2:	4628      	mov	r0, r5
   3b8f4:	4633      	mov	r3, r6
}
   3b8f6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		return z_pend_curr(&msgq->lock, key, &msgq->wait_q, timeout);
   3b8fa:	f001 bae7 	b.w	3cecc <z_pend_curr>
		result = -ENOMSG;
   3b8fe:	f06f 0422 	mvn.w	r4, #34	; 0x22
   3b902:	e7d8      	b.n	3b8b6 <z_impl_k_msgq_put+0xca>
   3b904:	0004d2b5 	.word	0x0004d2b5
   3b908:	0004d293 	.word	0x0004d293
   3b90c:	0004764f 	.word	0x0004764f
   3b910:	0004a297 	.word	0x0004a297
   3b914:	000498fb 	.word	0x000498fb
   3b918:	00049921 	.word	0x00049921
   3b91c:	00049936 	.word	0x00049936
   3b920:	0004994e 	.word	0x0004994e
   3b924:	00049965 	.word	0x00049965
   3b928:	2002970c 	.word	0x2002970c

0003b92c <z_impl_k_msgq_get>:
}
#include <syscalls/k_msgq_get_attrs_mrsh.c>
#endif

int z_impl_k_msgq_get(struct k_msgq *msgq, void *data, s32_t timeout)
{
   3b92c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   3b930:	4604      	mov	r4, r0
   3b932:	4688      	mov	r8, r1
   3b934:	4615      	mov	r5, r2
   3b936:	f3ef 8305 	mrs	r3, IPSR
	__ASSERT(!arch_is_in_isr() || timeout == K_NO_WAIT, "");
   3b93a:	b16b      	cbz	r3, 3b958 <z_impl_k_msgq_get+0x2c>
   3b93c:	b162      	cbz	r2, 3b958 <z_impl_k_msgq_get+0x2c>
   3b93e:	4947      	ldr	r1, [pc, #284]	; (3ba5c <z_impl_k_msgq_get+0x130>)
   3b940:	23c1      	movs	r3, #193	; 0xc1
   3b942:	4a47      	ldr	r2, [pc, #284]	; (3ba60 <z_impl_k_msgq_get+0x134>)
   3b944:	4847      	ldr	r0, [pc, #284]	; (3ba64 <z_impl_k_msgq_get+0x138>)
   3b946:	f004 fe5c 	bl	40602 <printk>
   3b94a:	4847      	ldr	r0, [pc, #284]	; (3ba68 <z_impl_k_msgq_get+0x13c>)
   3b94c:	f004 fe59 	bl	40602 <printk>
   3b950:	21c1      	movs	r1, #193	; 0xc1
   3b952:	4843      	ldr	r0, [pc, #268]	; (3ba60 <z_impl_k_msgq_get+0x134>)
   3b954:	f004 ff18 	bl	40788 <assert_post_action>

	k_spinlock_key_t key;
	struct k_thread *pending_thread;
	int result;

	key = k_spin_lock(&msgq->lock);
   3b958:	f104 0608 	add.w	r6, r4, #8
	__asm__ volatile(
   3b95c:	f04f 0320 	mov.w	r3, #32
   3b960:	f3ef 8711 	mrs	r7, BASEPRI
   3b964:	f383 8811 	msr	BASEPRI, r3
   3b968:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   3b96c:	4630      	mov	r0, r6
   3b96e:	f001 fe87 	bl	3d680 <z_spin_lock_valid>
   3b972:	b968      	cbnz	r0, 3b990 <z_impl_k_msgq_get+0x64>
   3b974:	234a      	movs	r3, #74	; 0x4a
   3b976:	4a3d      	ldr	r2, [pc, #244]	; (3ba6c <z_impl_k_msgq_get+0x140>)
   3b978:	493d      	ldr	r1, [pc, #244]	; (3ba70 <z_impl_k_msgq_get+0x144>)
   3b97a:	483a      	ldr	r0, [pc, #232]	; (3ba64 <z_impl_k_msgq_get+0x138>)
   3b97c:	f004 fe41 	bl	40602 <printk>
   3b980:	4631      	mov	r1, r6
   3b982:	483c      	ldr	r0, [pc, #240]	; (3ba74 <z_impl_k_msgq_get+0x148>)
   3b984:	f004 fe3d 	bl	40602 <printk>
   3b988:	214a      	movs	r1, #74	; 0x4a
   3b98a:	4838      	ldr	r0, [pc, #224]	; (3ba6c <z_impl_k_msgq_get+0x140>)
   3b98c:	f004 fefc 	bl	40788 <assert_post_action>
	z_spin_lock_set_owner(l);
   3b990:	4630      	mov	r0, r6
   3b992:	f001 fe93 	bl	3d6bc <z_spin_lock_set_owner>

	if (msgq->used_msgs > 0) {
   3b996:	6a63      	ldr	r3, [r4, #36]	; 0x24
   3b998:	2b00      	cmp	r3, #0
   3b99a:	d039      	beq.n	3ba10 <z_impl_k_msgq_get+0xe4>
   3b99c:	68e2      	ldr	r2, [r4, #12]
   3b99e:	69e1      	ldr	r1, [r4, #28]
   3b9a0:	4640      	mov	r0, r8
   3b9a2:	f009 fa55 	bl	44e50 <memcpy>
		/* take first available message from queue */
		(void)memcpy(data, msgq->read_ptr, msgq->msg_size);
		msgq->read_ptr += msgq->msg_size;
   3b9a6:	69e3      	ldr	r3, [r4, #28]
   3b9a8:	68e2      	ldr	r2, [r4, #12]
			msgq->read_ptr = msgq->buffer_start;
		}
		msgq->used_msgs--;

		/* handle first thread waiting to write (if any) */
		pending_thread = z_unpend_first_thread(&msgq->wait_q);
   3b9aa:	4620      	mov	r0, r4
		msgq->read_ptr += msgq->msg_size;
   3b9ac:	4413      	add	r3, r2
		if (msgq->read_ptr == msgq->buffer_end) {
   3b9ae:	69a2      	ldr	r2, [r4, #24]
		msgq->read_ptr += msgq->msg_size;
   3b9b0:	61e3      	str	r3, [r4, #28]
		if (msgq->read_ptr == msgq->buffer_end) {
   3b9b2:	4293      	cmp	r3, r2
			msgq->read_ptr = msgq->buffer_start;
   3b9b4:	bf04      	itt	eq
   3b9b6:	6963      	ldreq	r3, [r4, #20]
   3b9b8:	61e3      	streq	r3, [r4, #28]
		msgq->used_msgs--;
   3b9ba:	6a63      	ldr	r3, [r4, #36]	; 0x24
   3b9bc:	3b01      	subs	r3, #1
   3b9be:	6263      	str	r3, [r4, #36]	; 0x24
		pending_thread = z_unpend_first_thread(&msgq->wait_q);
   3b9c0:	f001 fb40 	bl	3d044 <z_unpend_first_thread>
		if (pending_thread != NULL) {
   3b9c4:	4605      	mov	r5, r0
   3b9c6:	2800      	cmp	r0, #0
   3b9c8:	d031      	beq.n	3ba2e <z_impl_k_msgq_get+0x102>
   3b9ca:	68e2      	ldr	r2, [r4, #12]
   3b9cc:	6941      	ldr	r1, [r0, #20]
   3b9ce:	6a20      	ldr	r0, [r4, #32]
   3b9d0:	f009 fa3e 	bl	44e50 <memcpy>
			/* add thread's message to queue */
			(void)memcpy(msgq->write_ptr, pending_thread->base.swap_data,
			       msgq->msg_size);
			msgq->write_ptr += msgq->msg_size;
   3b9d4:	6a23      	ldr	r3, [r4, #32]
   3b9d6:	68e2      	ldr	r2, [r4, #12]
   3b9d8:	4413      	add	r3, r2
			if (msgq->write_ptr == msgq->buffer_end) {
   3b9da:	69a2      	ldr	r2, [r4, #24]
			msgq->write_ptr += msgq->msg_size;
   3b9dc:	6223      	str	r3, [r4, #32]
			if (msgq->write_ptr == msgq->buffer_end) {
   3b9de:	4293      	cmp	r3, r2
				msgq->write_ptr = msgq->buffer_start;
   3b9e0:	bf04      	itt	eq
   3b9e2:	6963      	ldreq	r3, [r4, #20]
   3b9e4:	6223      	streq	r3, [r4, #32]
			}
			msgq->used_msgs++;
   3b9e6:	6a63      	ldr	r3, [r4, #36]	; 0x24
   3b9e8:	3301      	adds	r3, #1
   3b9ea:	6263      	str	r3, [r4, #36]	; 0x24
   3b9ec:	2300      	movs	r3, #0
   3b9ee:	66ab      	str	r3, [r5, #104]	; 0x68
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
   3b9f0:	7b6b      	ldrb	r3, [r5, #13]
   3b9f2:	06db      	lsls	r3, r3, #27
   3b9f4:	d104      	bne.n	3ba00 <z_impl_k_msgq_get+0xd4>
	if (z_is_thread_ready(thread)) {
   3b9f6:	69ab      	ldr	r3, [r5, #24]
   3b9f8:	b913      	cbnz	r3, 3ba00 <z_impl_k_msgq_get+0xd4>
		z_add_thread_to_ready_q(thread);
   3b9fa:	4628      	mov	r0, r5
   3b9fc:	f000 feac 	bl	3c758 <z_add_thread_to_ready_q>

			/* wake up waiting thread */
			arch_thread_return_value_set(pending_thread, 0);
			z_ready_thread(pending_thread);
			z_reschedule(&msgq->lock, key);
   3ba00:	4639      	mov	r1, r7
   3ba02:	4630      	mov	r0, r6
   3ba04:	f000 fcbe 	bl	3c384 <z_reschedule>
			return 0;
   3ba08:	2500      	movs	r5, #0
	}

	k_spin_unlock(&msgq->lock, key);

	return result;
}
   3ba0a:	4628      	mov	r0, r5
   3ba0c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	} else if (timeout == K_NO_WAIT) {
   3ba10:	b15d      	cbz	r5, 3ba2a <z_impl_k_msgq_get+0xfe>
		_current->base.swap_data = data;
   3ba12:	4b19      	ldr	r3, [pc, #100]	; (3ba78 <z_impl_k_msgq_get+0x14c>)
		return z_pend_curr(&msgq->lock, key, &msgq->wait_q, timeout);
   3ba14:	4622      	mov	r2, r4
		_current->base.swap_data = data;
   3ba16:	689b      	ldr	r3, [r3, #8]
		return z_pend_curr(&msgq->lock, key, &msgq->wait_q, timeout);
   3ba18:	4639      	mov	r1, r7
		_current->base.swap_data = data;
   3ba1a:	f8c3 8014 	str.w	r8, [r3, #20]
		return z_pend_curr(&msgq->lock, key, &msgq->wait_q, timeout);
   3ba1e:	4630      	mov	r0, r6
   3ba20:	462b      	mov	r3, r5
}
   3ba22:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		return z_pend_curr(&msgq->lock, key, &msgq->wait_q, timeout);
   3ba26:	f001 ba51 	b.w	3cecc <z_pend_curr>
		result = -ENOMSG;
   3ba2a:	f06f 0522 	mvn.w	r5, #34	; 0x22
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   3ba2e:	4630      	mov	r0, r6
   3ba30:	f001 fe34 	bl	3d69c <z_spin_unlock_valid>
   3ba34:	b968      	cbnz	r0, 3ba52 <z_impl_k_msgq_get+0x126>
   3ba36:	235d      	movs	r3, #93	; 0x5d
   3ba38:	4a0c      	ldr	r2, [pc, #48]	; (3ba6c <z_impl_k_msgq_get+0x140>)
   3ba3a:	4910      	ldr	r1, [pc, #64]	; (3ba7c <z_impl_k_msgq_get+0x150>)
   3ba3c:	4809      	ldr	r0, [pc, #36]	; (3ba64 <z_impl_k_msgq_get+0x138>)
   3ba3e:	f004 fde0 	bl	40602 <printk>
   3ba42:	4631      	mov	r1, r6
   3ba44:	480e      	ldr	r0, [pc, #56]	; (3ba80 <z_impl_k_msgq_get+0x154>)
   3ba46:	f004 fddc 	bl	40602 <printk>
   3ba4a:	215d      	movs	r1, #93	; 0x5d
   3ba4c:	4807      	ldr	r0, [pc, #28]	; (3ba6c <z_impl_k_msgq_get+0x140>)
   3ba4e:	f004 fe9b 	bl	40788 <assert_post_action>
	__asm__ volatile(
   3ba52:	f387 8811 	msr	BASEPRI, r7
   3ba56:	f3bf 8f6f 	isb	sy
	return result;
   3ba5a:	e7d6      	b.n	3ba0a <z_impl_k_msgq_get+0xde>
   3ba5c:	0004d2b5 	.word	0x0004d2b5
   3ba60:	0004d293 	.word	0x0004d293
   3ba64:	0004764f 	.word	0x0004764f
   3ba68:	0004a297 	.word	0x0004a297
   3ba6c:	000498fb 	.word	0x000498fb
   3ba70:	00049921 	.word	0x00049921
   3ba74:	00049936 	.word	0x00049936
   3ba78:	2002970c 	.word	0x2002970c
   3ba7c:	0004994e 	.word	0x0004994e
   3ba80:	00049965 	.word	0x00049965

0003ba84 <z_impl_k_msgq_peek>:
}
#include <syscalls/k_msgq_get_mrsh.c>
#endif

int z_impl_k_msgq_peek(struct k_msgq *msgq, void *data)
{
   3ba84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   3ba86:	4605      	mov	r5, r0
   3ba88:	460f      	mov	r7, r1
	k_spinlock_key_t key;
	int result;

	key = k_spin_lock(&msgq->lock);
   3ba8a:	f100 0408 	add.w	r4, r0, #8
	__asm__ volatile(
   3ba8e:	f04f 0320 	mov.w	r3, #32
   3ba92:	f3ef 8611 	mrs	r6, BASEPRI
   3ba96:	f383 8811 	msr	BASEPRI, r3
   3ba9a:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   3ba9e:	4620      	mov	r0, r4
   3baa0:	f001 fdee 	bl	3d680 <z_spin_lock_valid>
   3baa4:	b968      	cbnz	r0, 3bac2 <z_impl_k_msgq_peek+0x3e>
   3baa6:	234a      	movs	r3, #74	; 0x4a
   3baa8:	4a19      	ldr	r2, [pc, #100]	; (3bb10 <z_impl_k_msgq_peek+0x8c>)
   3baaa:	491a      	ldr	r1, [pc, #104]	; (3bb14 <z_impl_k_msgq_peek+0x90>)
   3baac:	481a      	ldr	r0, [pc, #104]	; (3bb18 <z_impl_k_msgq_peek+0x94>)
   3baae:	f004 fda8 	bl	40602 <printk>
   3bab2:	4621      	mov	r1, r4
   3bab4:	4819      	ldr	r0, [pc, #100]	; (3bb1c <z_impl_k_msgq_peek+0x98>)
   3bab6:	f004 fda4 	bl	40602 <printk>
   3baba:	214a      	movs	r1, #74	; 0x4a
   3babc:	4814      	ldr	r0, [pc, #80]	; (3bb10 <z_impl_k_msgq_peek+0x8c>)
   3babe:	f004 fe63 	bl	40788 <assert_post_action>
	z_spin_lock_set_owner(l);
   3bac2:	4620      	mov	r0, r4
   3bac4:	f001 fdfa 	bl	3d6bc <z_spin_lock_set_owner>

	if (msgq->used_msgs > 0) {
   3bac8:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   3baca:	b1eb      	cbz	r3, 3bb08 <z_impl_k_msgq_peek+0x84>
   3bacc:	68ea      	ldr	r2, [r5, #12]
   3bace:	69e9      	ldr	r1, [r5, #28]
   3bad0:	4638      	mov	r0, r7
   3bad2:	f009 f9bd 	bl	44e50 <memcpy>
		/* take first available message from queue */
		(void)memcpy(data, msgq->read_ptr, msgq->msg_size);
		result = 0;
   3bad6:	2500      	movs	r5, #0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   3bad8:	4620      	mov	r0, r4
   3bada:	f001 fddf 	bl	3d69c <z_spin_unlock_valid>
   3bade:	b968      	cbnz	r0, 3bafc <z_impl_k_msgq_peek+0x78>
   3bae0:	235d      	movs	r3, #93	; 0x5d
   3bae2:	4a0b      	ldr	r2, [pc, #44]	; (3bb10 <z_impl_k_msgq_peek+0x8c>)
   3bae4:	490e      	ldr	r1, [pc, #56]	; (3bb20 <z_impl_k_msgq_peek+0x9c>)
   3bae6:	480c      	ldr	r0, [pc, #48]	; (3bb18 <z_impl_k_msgq_peek+0x94>)
   3bae8:	f004 fd8b 	bl	40602 <printk>
   3baec:	4621      	mov	r1, r4
   3baee:	480d      	ldr	r0, [pc, #52]	; (3bb24 <z_impl_k_msgq_peek+0xa0>)
   3baf0:	f004 fd87 	bl	40602 <printk>
   3baf4:	215d      	movs	r1, #93	; 0x5d
   3baf6:	4806      	ldr	r0, [pc, #24]	; (3bb10 <z_impl_k_msgq_peek+0x8c>)
   3baf8:	f004 fe46 	bl	40788 <assert_post_action>
	__asm__ volatile(
   3bafc:	f386 8811 	msr	BASEPRI, r6
   3bb00:	f3bf 8f6f 	isb	sy
	}

	k_spin_unlock(&msgq->lock, key);

	return result;
}
   3bb04:	4628      	mov	r0, r5
   3bb06:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		result = -ENOMSG;
   3bb08:	f06f 0522 	mvn.w	r5, #34	; 0x22
   3bb0c:	e7e4      	b.n	3bad8 <z_impl_k_msgq_peek+0x54>
   3bb0e:	bf00      	nop
   3bb10:	000498fb 	.word	0x000498fb
   3bb14:	00049921 	.word	0x00049921
   3bb18:	0004764f 	.word	0x0004764f
   3bb1c:	00049936 	.word	0x00049936
   3bb20:	0004994e 	.word	0x0004994e
   3bb24:	00049965 	.word	0x00049965

0003bb28 <z_impl_k_mutex_lock>:
	}
	return false;
}

int z_impl_k_mutex_lock(struct k_mutex *mutex, s32_t timeout)
{
   3bb28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   3bb2a:	4604      	mov	r4, r0
   3bb2c:	460e      	mov	r6, r1
	__asm__ volatile(
   3bb2e:	f04f 0320 	mov.w	r3, #32
   3bb32:	f3ef 8511 	mrs	r5, BASEPRI
   3bb36:	f383 8811 	msr	BASEPRI, r3
   3bb3a:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   3bb3e:	4861      	ldr	r0, [pc, #388]	; (3bcc4 <z_impl_k_mutex_lock+0x19c>)
   3bb40:	f001 fd9e 	bl	3d680 <z_spin_lock_valid>
   3bb44:	b968      	cbnz	r0, 3bb62 <z_impl_k_mutex_lock+0x3a>
   3bb46:	234a      	movs	r3, #74	; 0x4a
   3bb48:	4a5f      	ldr	r2, [pc, #380]	; (3bcc8 <z_impl_k_mutex_lock+0x1a0>)
   3bb4a:	4960      	ldr	r1, [pc, #384]	; (3bccc <z_impl_k_mutex_lock+0x1a4>)
   3bb4c:	4860      	ldr	r0, [pc, #384]	; (3bcd0 <z_impl_k_mutex_lock+0x1a8>)
   3bb4e:	f004 fd58 	bl	40602 <printk>
   3bb52:	495c      	ldr	r1, [pc, #368]	; (3bcc4 <z_impl_k_mutex_lock+0x19c>)
   3bb54:	485f      	ldr	r0, [pc, #380]	; (3bcd4 <z_impl_k_mutex_lock+0x1ac>)
   3bb56:	f004 fd54 	bl	40602 <printk>
   3bb5a:	214a      	movs	r1, #74	; 0x4a
   3bb5c:	485a      	ldr	r0, [pc, #360]	; (3bcc8 <z_impl_k_mutex_lock+0x1a0>)
   3bb5e:	f004 fe13 	bl	40788 <assert_post_action>
	z_spin_lock_set_owner(l);
   3bb62:	4858      	ldr	r0, [pc, #352]	; (3bcc4 <z_impl_k_mutex_lock+0x19c>)
   3bb64:	f001 fdaa 	bl	3d6bc <z_spin_lock_set_owner>
	bool resched = false;

	sys_trace_void(SYS_TRACE_ID_MUTEX_LOCK);
	key = k_spin_lock(&lock);

	if (likely((mutex->lock_count == 0U) || (mutex->owner == _current))) {
   3bb68:	68e3      	ldr	r3, [r4, #12]
   3bb6a:	4a5b      	ldr	r2, [pc, #364]	; (3bcd8 <z_impl_k_mutex_lock+0x1b0>)
   3bb6c:	b1f3      	cbz	r3, 3bbac <z_impl_k_mutex_lock+0x84>
   3bb6e:	68a0      	ldr	r0, [r4, #8]
   3bb70:	6891      	ldr	r1, [r2, #8]
   3bb72:	4288      	cmp	r0, r1
   3bb74:	d03a      	beq.n	3bbec <z_impl_k_mutex_lock+0xc4>
		sys_trace_end_call(SYS_TRACE_ID_MUTEX_LOCK);

		return 0;
	}

	if (unlikely(timeout == (s32_t)K_NO_WAIT)) {
   3bb76:	2e00      	cmp	r6, #0
   3bb78:	d13a      	bne.n	3bbf0 <z_impl_k_mutex_lock+0xc8>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   3bb7a:	4852      	ldr	r0, [pc, #328]	; (3bcc4 <z_impl_k_mutex_lock+0x19c>)
   3bb7c:	f001 fd8e 	bl	3d69c <z_spin_unlock_valid>
   3bb80:	b968      	cbnz	r0, 3bb9e <z_impl_k_mutex_lock+0x76>
   3bb82:	235d      	movs	r3, #93	; 0x5d
   3bb84:	4a50      	ldr	r2, [pc, #320]	; (3bcc8 <z_impl_k_mutex_lock+0x1a0>)
   3bb86:	4955      	ldr	r1, [pc, #340]	; (3bcdc <z_impl_k_mutex_lock+0x1b4>)
   3bb88:	4851      	ldr	r0, [pc, #324]	; (3bcd0 <z_impl_k_mutex_lock+0x1a8>)
   3bb8a:	f004 fd3a 	bl	40602 <printk>
   3bb8e:	494d      	ldr	r1, [pc, #308]	; (3bcc4 <z_impl_k_mutex_lock+0x19c>)
   3bb90:	4853      	ldr	r0, [pc, #332]	; (3bce0 <z_impl_k_mutex_lock+0x1b8>)
   3bb92:	f004 fd36 	bl	40602 <printk>
   3bb96:	215d      	movs	r1, #93	; 0x5d
   3bb98:	484b      	ldr	r0, [pc, #300]	; (3bcc8 <z_impl_k_mutex_lock+0x1a0>)
   3bb9a:	f004 fdf5 	bl	40788 <assert_post_action>
	__asm__ volatile(
   3bb9e:	f385 8811 	msr	BASEPRI, r5
   3bba2:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		sys_trace_end_call(SYS_TRACE_ID_MUTEX_LOCK);
		return -EBUSY;
   3bba6:	f06f 000f 	mvn.w	r0, #15
   3bbaa:	e01e      	b.n	3bbea <z_impl_k_mutex_lock+0xc2>
					_current->base.prio :
   3bbac:	6891      	ldr	r1, [r2, #8]
   3bbae:	f991 100e 	ldrsb.w	r1, [r1, #14]
		mutex->lock_count++;
   3bbb2:	3301      	adds	r3, #1
   3bbb4:	60e3      	str	r3, [r4, #12]
		mutex->owner = _current;
   3bbb6:	6893      	ldr	r3, [r2, #8]
		mutex->owner_orig_prio = (mutex->lock_count == 0U) ?
   3bbb8:	6121      	str	r1, [r4, #16]
		mutex->owner = _current;
   3bbba:	60a3      	str	r3, [r4, #8]
   3bbbc:	4841      	ldr	r0, [pc, #260]	; (3bcc4 <z_impl_k_mutex_lock+0x19c>)
   3bbbe:	f001 fd6d 	bl	3d69c <z_spin_unlock_valid>
   3bbc2:	b968      	cbnz	r0, 3bbe0 <z_impl_k_mutex_lock+0xb8>
   3bbc4:	235d      	movs	r3, #93	; 0x5d
   3bbc6:	4a40      	ldr	r2, [pc, #256]	; (3bcc8 <z_impl_k_mutex_lock+0x1a0>)
   3bbc8:	4944      	ldr	r1, [pc, #272]	; (3bcdc <z_impl_k_mutex_lock+0x1b4>)
   3bbca:	4841      	ldr	r0, [pc, #260]	; (3bcd0 <z_impl_k_mutex_lock+0x1a8>)
   3bbcc:	f004 fd19 	bl	40602 <printk>
   3bbd0:	493c      	ldr	r1, [pc, #240]	; (3bcc4 <z_impl_k_mutex_lock+0x19c>)
   3bbd2:	4843      	ldr	r0, [pc, #268]	; (3bce0 <z_impl_k_mutex_lock+0x1b8>)
   3bbd4:	f004 fd15 	bl	40602 <printk>
   3bbd8:	215d      	movs	r1, #93	; 0x5d
   3bbda:	483b      	ldr	r0, [pc, #236]	; (3bcc8 <z_impl_k_mutex_lock+0x1a0>)
   3bbdc:	f004 fdd4 	bl	40788 <assert_post_action>
   3bbe0:	f385 8811 	msr	BASEPRI, r5
   3bbe4:	f3bf 8f6f 	isb	sy
		return 0;
   3bbe8:	2000      	movs	r0, #0
		k_spin_unlock(&lock, key);
	}

	sys_trace_end_call(SYS_TRACE_ID_MUTEX_LOCK);
	return -EAGAIN;
}
   3bbea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
					_current->base.prio :
   3bbec:	6921      	ldr	r1, [r4, #16]
   3bbee:	e7e0      	b.n	3bbb2 <z_impl_k_mutex_lock+0x8a>
	new_prio = new_prio_for_inheritance(_current->base.prio,
   3bbf0:	f990 300e 	ldrsb.w	r3, [r0, #14]
   3bbf4:	f991 100e 	ldrsb.w	r1, [r1, #14]
   3bbf8:	4299      	cmp	r1, r3
   3bbfa:	bfa8      	it	ge
   3bbfc:	4619      	movge	r1, r3
   3bbfe:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
	if (z_is_prio_higher(new_prio, mutex->owner->base.prio)) {
   3bc02:	4299      	cmp	r1, r3
   3bc04:	da40      	bge.n	3bc88 <z_impl_k_mutex_lock+0x160>
		return z_set_prio(mutex->owner, new_prio);
   3bc06:	f001 f98f 	bl	3cf28 <z_set_prio>
   3bc0a:	4607      	mov	r7, r0
	int got_mutex = z_pend_curr(&lock, key, &mutex->wait_q, timeout);
   3bc0c:	4633      	mov	r3, r6
   3bc0e:	4622      	mov	r2, r4
   3bc10:	4629      	mov	r1, r5
   3bc12:	482c      	ldr	r0, [pc, #176]	; (3bcc4 <z_impl_k_mutex_lock+0x19c>)
   3bc14:	f001 f95a 	bl	3cecc <z_pend_curr>
	if (got_mutex == 0) {
   3bc18:	2800      	cmp	r0, #0
   3bc1a:	d0e6      	beq.n	3bbea <z_impl_k_mutex_lock+0xc2>
	__asm__ volatile(
   3bc1c:	f04f 0320 	mov.w	r3, #32
   3bc20:	f3ef 8511 	mrs	r5, BASEPRI
   3bc24:	f383 8811 	msr	BASEPRI, r3
   3bc28:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   3bc2c:	4825      	ldr	r0, [pc, #148]	; (3bcc4 <z_impl_k_mutex_lock+0x19c>)
   3bc2e:	f001 fd27 	bl	3d680 <z_spin_lock_valid>
   3bc32:	b968      	cbnz	r0, 3bc50 <z_impl_k_mutex_lock+0x128>
   3bc34:	234a      	movs	r3, #74	; 0x4a
   3bc36:	4a24      	ldr	r2, [pc, #144]	; (3bcc8 <z_impl_k_mutex_lock+0x1a0>)
   3bc38:	4924      	ldr	r1, [pc, #144]	; (3bccc <z_impl_k_mutex_lock+0x1a4>)
   3bc3a:	4825      	ldr	r0, [pc, #148]	; (3bcd0 <z_impl_k_mutex_lock+0x1a8>)
   3bc3c:	f004 fce1 	bl	40602 <printk>
   3bc40:	4920      	ldr	r1, [pc, #128]	; (3bcc4 <z_impl_k_mutex_lock+0x19c>)
   3bc42:	4824      	ldr	r0, [pc, #144]	; (3bcd4 <z_impl_k_mutex_lock+0x1ac>)
   3bc44:	f004 fcdd 	bl	40602 <printk>
   3bc48:	214a      	movs	r1, #74	; 0x4a
   3bc4a:	481f      	ldr	r0, [pc, #124]	; (3bcc8 <z_impl_k_mutex_lock+0x1a0>)
   3bc4c:	f004 fd9c 	bl	40788 <assert_post_action>
	z_spin_lock_set_owner(l);
   3bc50:	481c      	ldr	r0, [pc, #112]	; (3bcc4 <z_impl_k_mutex_lock+0x19c>)
   3bc52:	f001 fd33 	bl	3d6bc <z_spin_lock_set_owner>
	return list->head == list;
   3bc56:	6823      	ldr	r3, [r4, #0]
   3bc58:	6921      	ldr	r1, [r4, #16]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   3bc5a:	429c      	cmp	r4, r3
   3bc5c:	d007      	beq.n	3bc6e <z_impl_k_mutex_lock+0x146>
		new_prio_for_inheritance(waiter->base.prio, mutex->owner_orig_prio) :
   3bc5e:	b133      	cbz	r3, 3bc6e <z_impl_k_mutex_lock+0x146>
   3bc60:	f993 300e 	ldrsb.w	r3, [r3, #14]
   3bc64:	4299      	cmp	r1, r3
   3bc66:	bfa8      	it	ge
   3bc68:	4619      	movge	r1, r3
   3bc6a:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
	resched = adjust_owner_prio(mutex, new_prio) || resched;
   3bc6e:	68a0      	ldr	r0, [r4, #8]
	if (mutex->owner->base.prio != new_prio) {
   3bc70:	f990 300e 	ldrsb.w	r3, [r0, #14]
   3bc74:	4299      	cmp	r1, r3
   3bc76:	d109      	bne.n	3bc8c <z_impl_k_mutex_lock+0x164>
	if (resched) {
   3bc78:	b16f      	cbz	r7, 3bc96 <z_impl_k_mutex_lock+0x16e>
		z_reschedule(&lock, key);
   3bc7a:	4629      	mov	r1, r5
   3bc7c:	4811      	ldr	r0, [pc, #68]	; (3bcc4 <z_impl_k_mutex_lock+0x19c>)
   3bc7e:	f000 fb81 	bl	3c384 <z_reschedule>
	return -EAGAIN;
   3bc82:	f06f 000a 	mvn.w	r0, #10
   3bc86:	e7b0      	b.n	3bbea <z_impl_k_mutex_lock+0xc2>
	bool resched = false;
   3bc88:	2700      	movs	r7, #0
   3bc8a:	e7bf      	b.n	3bc0c <z_impl_k_mutex_lock+0xe4>
		return z_set_prio(mutex->owner, new_prio);
   3bc8c:	f001 f94c 	bl	3cf28 <z_set_prio>
	resched = adjust_owner_prio(mutex, new_prio) || resched;
   3bc90:	2800      	cmp	r0, #0
   3bc92:	d1f2      	bne.n	3bc7a <z_impl_k_mutex_lock+0x152>
   3bc94:	e7f0      	b.n	3bc78 <z_impl_k_mutex_lock+0x150>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   3bc96:	480b      	ldr	r0, [pc, #44]	; (3bcc4 <z_impl_k_mutex_lock+0x19c>)
   3bc98:	f001 fd00 	bl	3d69c <z_spin_unlock_valid>
   3bc9c:	b968      	cbnz	r0, 3bcba <z_impl_k_mutex_lock+0x192>
   3bc9e:	235d      	movs	r3, #93	; 0x5d
   3bca0:	4a09      	ldr	r2, [pc, #36]	; (3bcc8 <z_impl_k_mutex_lock+0x1a0>)
   3bca2:	490e      	ldr	r1, [pc, #56]	; (3bcdc <z_impl_k_mutex_lock+0x1b4>)
   3bca4:	480a      	ldr	r0, [pc, #40]	; (3bcd0 <z_impl_k_mutex_lock+0x1a8>)
   3bca6:	f004 fcac 	bl	40602 <printk>
   3bcaa:	4906      	ldr	r1, [pc, #24]	; (3bcc4 <z_impl_k_mutex_lock+0x19c>)
   3bcac:	480c      	ldr	r0, [pc, #48]	; (3bce0 <z_impl_k_mutex_lock+0x1b8>)
   3bcae:	f004 fca8 	bl	40602 <printk>
   3bcb2:	215d      	movs	r1, #93	; 0x5d
   3bcb4:	4804      	ldr	r0, [pc, #16]	; (3bcc8 <z_impl_k_mutex_lock+0x1a0>)
   3bcb6:	f004 fd67 	bl	40788 <assert_post_action>
	__asm__ volatile(
   3bcba:	f385 8811 	msr	BASEPRI, r5
   3bcbe:	f3bf 8f6f 	isb	sy
   3bcc2:	e7de      	b.n	3bc82 <z_impl_k_mutex_lock+0x15a>
   3bcc4:	20029708 	.word	0x20029708
   3bcc8:	000498fb 	.word	0x000498fb
   3bccc:	00049921 	.word	0x00049921
   3bcd0:	0004764f 	.word	0x0004764f
   3bcd4:	00049936 	.word	0x00049936
   3bcd8:	2002970c 	.word	0x2002970c
   3bcdc:	0004994e 	.word	0x0004994e
   3bce0:	00049965 	.word	0x00049965

0003bce4 <z_impl_k_mutex_unlock>:
}
#include <syscalls/k_mutex_lock_mrsh.c>
#endif

int z_impl_k_mutex_unlock(struct k_mutex *mutex)
{
   3bce4:	b538      	push	{r3, r4, r5, lr}
	struct k_thread *new_owner;

	CHECKIF(mutex->owner == NULL) {
   3bce6:	6883      	ldr	r3, [r0, #8]
{
   3bce8:	4604      	mov	r4, r0
	CHECKIF(mutex->owner == NULL) {
   3bcea:	2b00      	cmp	r3, #0
   3bcec:	f000 8096 	beq.w	3be1c <z_impl_k_mutex_unlock+0x138>
		return -EINVAL;
	}
	/*
	 * The current thread does not own the mutex.
	 */
	CHECKIF(mutex->owner != _current) {
   3bcf0:	4d4d      	ldr	r5, [pc, #308]	; (3be28 <z_impl_k_mutex_unlock+0x144>)
   3bcf2:	68aa      	ldr	r2, [r5, #8]
   3bcf4:	4293      	cmp	r3, r2
   3bcf6:	f040 8094 	bne.w	3be22 <z_impl_k_mutex_unlock+0x13e>
	 * Attempt to unlock a mutex which is unlocked. mutex->lock_count
	 * cannot be zero if the current thread is equal to mutex->owner,
	 * therefore no underflow check is required. Use assert to catch
	 * undefined behavior.
	 */
	__ASSERT_NO_MSG(mutex->lock_count > 0U);
   3bcfa:	68c3      	ldr	r3, [r0, #12]
   3bcfc:	b94b      	cbnz	r3, 3bd12 <z_impl_k_mutex_unlock+0x2e>
   3bcfe:	494b      	ldr	r1, [pc, #300]	; (3be2c <z_impl_k_mutex_unlock+0x148>)
   3bd00:	484b      	ldr	r0, [pc, #300]	; (3be30 <z_impl_k_mutex_unlock+0x14c>)
   3bd02:	23e5      	movs	r3, #229	; 0xe5
   3bd04:	4a4b      	ldr	r2, [pc, #300]	; (3be34 <z_impl_k_mutex_unlock+0x150>)
   3bd06:	f004 fc7c 	bl	40602 <printk>
   3bd0a:	21e5      	movs	r1, #229	; 0xe5
   3bd0c:	4849      	ldr	r0, [pc, #292]	; (3be34 <z_impl_k_mutex_unlock+0x150>)
   3bd0e:	f004 fd3b 	bl	40788 <assert_post_action>
   3bd12:	f3ef 8305 	mrs	r3, IPSR
}

static inline void z_sched_lock(void)
{
#ifdef CONFIG_PREEMPT_ENABLED
	__ASSERT(!arch_is_in_isr(), "");
   3bd16:	b173      	cbz	r3, 3bd36 <z_impl_k_mutex_unlock+0x52>
   3bd18:	4947      	ldr	r1, [pc, #284]	; (3be38 <z_impl_k_mutex_unlock+0x154>)
   3bd1a:	f240 130d 	movw	r3, #269	; 0x10d
   3bd1e:	4a47      	ldr	r2, [pc, #284]	; (3be3c <z_impl_k_mutex_unlock+0x158>)
   3bd20:	4843      	ldr	r0, [pc, #268]	; (3be30 <z_impl_k_mutex_unlock+0x14c>)
   3bd22:	f004 fc6e 	bl	40602 <printk>
   3bd26:	4846      	ldr	r0, [pc, #280]	; (3be40 <z_impl_k_mutex_unlock+0x15c>)
   3bd28:	f004 fc6b 	bl	40602 <printk>
   3bd2c:	f240 110d 	movw	r1, #269	; 0x10d
   3bd30:	4842      	ldr	r0, [pc, #264]	; (3be3c <z_impl_k_mutex_unlock+0x158>)
   3bd32:	f004 fd29 	bl	40788 <assert_post_action>
	__ASSERT(_current->base.sched_locked != 1, "");
   3bd36:	68ab      	ldr	r3, [r5, #8]
   3bd38:	7bdb      	ldrb	r3, [r3, #15]
   3bd3a:	2b01      	cmp	r3, #1
   3bd3c:	d10e      	bne.n	3bd5c <z_impl_k_mutex_unlock+0x78>
   3bd3e:	4941      	ldr	r1, [pc, #260]	; (3be44 <z_impl_k_mutex_unlock+0x160>)
   3bd40:	f44f 7387 	mov.w	r3, #270	; 0x10e
   3bd44:	4a3d      	ldr	r2, [pc, #244]	; (3be3c <z_impl_k_mutex_unlock+0x158>)
   3bd46:	483a      	ldr	r0, [pc, #232]	; (3be30 <z_impl_k_mutex_unlock+0x14c>)
   3bd48:	f004 fc5b 	bl	40602 <printk>
   3bd4c:	483c      	ldr	r0, [pc, #240]	; (3be40 <z_impl_k_mutex_unlock+0x15c>)
   3bd4e:	f004 fc58 	bl	40602 <printk>
   3bd52:	f44f 7187 	mov.w	r1, #270	; 0x10e
   3bd56:	4839      	ldr	r0, [pc, #228]	; (3be3c <z_impl_k_mutex_unlock+0x158>)
   3bd58:	f004 fd16 	bl	40788 <assert_post_action>

	--_current->base.sched_locked;
   3bd5c:	68aa      	ldr	r2, [r5, #8]
   3bd5e:	7bd3      	ldrb	r3, [r2, #15]
   3bd60:	3b01      	subs	r3, #1
   3bd62:	73d3      	strb	r3, [r2, #15]

	/*
	 * If we are the owner and count is greater than 1, then decrement
	 * the count and return and keep current thread as the owner.
	 */
	if (mutex->lock_count - 1U != 0U) {
   3bd64:	68e3      	ldr	r3, [r4, #12]
   3bd66:	2b01      	cmp	r3, #1
   3bd68:	d005      	beq.n	3bd76 <z_impl_k_mutex_unlock+0x92>
		mutex->lock_count--;
   3bd6a:	3b01      	subs	r3, #1
   3bd6c:	60e3      	str	r3, [r4, #12]
		k_spin_unlock(&lock, key);
	}


k_mutex_unlock_return:
	k_sched_unlock();
   3bd6e:	f000 fc77 	bl	3c660 <k_sched_unlock>
	sys_trace_end_call(SYS_TRACE_ID_MUTEX_UNLOCK);

	return 0;
   3bd72:	2000      	movs	r0, #0
}
   3bd74:	bd38      	pop	{r3, r4, r5, pc}
	__asm__ volatile(
   3bd76:	f04f 0320 	mov.w	r3, #32
   3bd7a:	f3ef 8511 	mrs	r5, BASEPRI
   3bd7e:	f383 8811 	msr	BASEPRI, r3
   3bd82:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   3bd86:	4830      	ldr	r0, [pc, #192]	; (3be48 <z_impl_k_mutex_unlock+0x164>)
   3bd88:	f001 fc7a 	bl	3d680 <z_spin_lock_valid>
   3bd8c:	b968      	cbnz	r0, 3bdaa <z_impl_k_mutex_unlock+0xc6>
   3bd8e:	234a      	movs	r3, #74	; 0x4a
   3bd90:	4a2e      	ldr	r2, [pc, #184]	; (3be4c <z_impl_k_mutex_unlock+0x168>)
   3bd92:	492f      	ldr	r1, [pc, #188]	; (3be50 <z_impl_k_mutex_unlock+0x16c>)
   3bd94:	4826      	ldr	r0, [pc, #152]	; (3be30 <z_impl_k_mutex_unlock+0x14c>)
   3bd96:	f004 fc34 	bl	40602 <printk>
   3bd9a:	492b      	ldr	r1, [pc, #172]	; (3be48 <z_impl_k_mutex_unlock+0x164>)
   3bd9c:	482d      	ldr	r0, [pc, #180]	; (3be54 <z_impl_k_mutex_unlock+0x170>)
   3bd9e:	f004 fc30 	bl	40602 <printk>
   3bda2:	214a      	movs	r1, #74	; 0x4a
   3bda4:	4829      	ldr	r0, [pc, #164]	; (3be4c <z_impl_k_mutex_unlock+0x168>)
   3bda6:	f004 fcef 	bl	40788 <assert_post_action>
	z_spin_lock_set_owner(l);
   3bdaa:	4827      	ldr	r0, [pc, #156]	; (3be48 <z_impl_k_mutex_unlock+0x164>)
   3bdac:	f001 fc86 	bl	3d6bc <z_spin_lock_set_owner>
	adjust_owner_prio(mutex, mutex->owner_orig_prio);
   3bdb0:	68a0      	ldr	r0, [r4, #8]
   3bdb2:	6921      	ldr	r1, [r4, #16]
	if (mutex->owner->base.prio != new_prio) {
   3bdb4:	f990 300e 	ldrsb.w	r3, [r0, #14]
   3bdb8:	4299      	cmp	r1, r3
   3bdba:	d001      	beq.n	3bdc0 <z_impl_k_mutex_unlock+0xdc>
		return z_set_prio(mutex->owner, new_prio);
   3bdbc:	f001 f8b4 	bl	3cf28 <z_set_prio>
	new_owner = z_unpend_first_thread(&mutex->wait_q);
   3bdc0:	4620      	mov	r0, r4
   3bdc2:	f001 f93f 	bl	3d044 <z_unpend_first_thread>
	mutex->owner = new_owner;
   3bdc6:	60a0      	str	r0, [r4, #8]
	if (new_owner != NULL) {
   3bdc8:	b180      	cbz	r0, 3bdec <z_impl_k_mutex_unlock+0x108>
		mutex->owner_orig_prio = new_owner->base.prio;
   3bdca:	f990 200e 	ldrsb.w	r2, [r0, #14]
   3bdce:	6122      	str	r2, [r4, #16]
   3bdd0:	2200      	movs	r2, #0
   3bdd2:	6682      	str	r2, [r0, #104]	; 0x68
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
   3bdd4:	7b42      	ldrb	r2, [r0, #13]
   3bdd6:	06d2      	lsls	r2, r2, #27
   3bdd8:	d103      	bne.n	3bde2 <z_impl_k_mutex_unlock+0xfe>
	if (z_is_thread_ready(thread)) {
   3bdda:	6983      	ldr	r3, [r0, #24]
   3bddc:	b90b      	cbnz	r3, 3bde2 <z_impl_k_mutex_unlock+0xfe>
		z_add_thread_to_ready_q(thread);
   3bdde:	f000 fcbb 	bl	3c758 <z_add_thread_to_ready_q>
		z_reschedule(&lock, key);
   3bde2:	4629      	mov	r1, r5
   3bde4:	4818      	ldr	r0, [pc, #96]	; (3be48 <z_impl_k_mutex_unlock+0x164>)
   3bde6:	f000 facd 	bl	3c384 <z_reschedule>
   3bdea:	e7c0      	b.n	3bd6e <z_impl_k_mutex_unlock+0x8a>
		mutex->lock_count = 0U;
   3bdec:	60e0      	str	r0, [r4, #12]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   3bdee:	4816      	ldr	r0, [pc, #88]	; (3be48 <z_impl_k_mutex_unlock+0x164>)
   3bdf0:	f001 fc54 	bl	3d69c <z_spin_unlock_valid>
   3bdf4:	b968      	cbnz	r0, 3be12 <z_impl_k_mutex_unlock+0x12e>
   3bdf6:	235d      	movs	r3, #93	; 0x5d
   3bdf8:	4a14      	ldr	r2, [pc, #80]	; (3be4c <z_impl_k_mutex_unlock+0x168>)
   3bdfa:	4917      	ldr	r1, [pc, #92]	; (3be58 <z_impl_k_mutex_unlock+0x174>)
   3bdfc:	480c      	ldr	r0, [pc, #48]	; (3be30 <z_impl_k_mutex_unlock+0x14c>)
   3bdfe:	f004 fc00 	bl	40602 <printk>
   3be02:	4911      	ldr	r1, [pc, #68]	; (3be48 <z_impl_k_mutex_unlock+0x164>)
   3be04:	4815      	ldr	r0, [pc, #84]	; (3be5c <z_impl_k_mutex_unlock+0x178>)
   3be06:	f004 fbfc 	bl	40602 <printk>
   3be0a:	215d      	movs	r1, #93	; 0x5d
   3be0c:	480f      	ldr	r0, [pc, #60]	; (3be4c <z_impl_k_mutex_unlock+0x168>)
   3be0e:	f004 fcbb 	bl	40788 <assert_post_action>
	__asm__ volatile(
   3be12:	f385 8811 	msr	BASEPRI, r5
   3be16:	f3bf 8f6f 	isb	sy
   3be1a:	e7a8      	b.n	3bd6e <z_impl_k_mutex_unlock+0x8a>
		return -EINVAL;
   3be1c:	f06f 0015 	mvn.w	r0, #21
   3be20:	e7a8      	b.n	3bd74 <z_impl_k_mutex_unlock+0x90>
		return -EPERM;
   3be22:	f04f 30ff 	mov.w	r0, #4294967295
   3be26:	e7a5      	b.n	3bd74 <z_impl_k_mutex_unlock+0x90>
   3be28:	2002970c 	.word	0x2002970c
   3be2c:	0004d2f9 	.word	0x0004d2f9
   3be30:	0004764f 	.word	0x0004764f
   3be34:	0004d2d7 	.word	0x0004d2d7
   3be38:	0004d33b 	.word	0x0004d33b
   3be3c:	0004d310 	.word	0x0004d310
   3be40:	0004a297 	.word	0x0004a297
   3be44:	0004d34d 	.word	0x0004d34d
   3be48:	20029708 	.word	0x20029708
   3be4c:	000498fb 	.word	0x000498fb
   3be50:	00049921 	.word	0x00049921
   3be54:	00049936 	.word	0x00049936
   3be58:	0004994e 	.word	0x0004994e
   3be5c:	00049965 	.word	0x00049965

0003be60 <queue_insert>:
#include <syscalls/k_queue_cancel_wait_mrsh.c>
#endif

static s32_t queue_insert(struct k_queue *queue, void *prev, void *data,
			  bool alloc)
{
   3be60:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   3be64:	4604      	mov	r4, r0
   3be66:	460e      	mov	r6, r1
   3be68:	4690      	mov	r8, r2
   3be6a:	4699      	mov	r9, r3
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
   3be6c:	f100 0508 	add.w	r5, r0, #8
	__asm__ volatile(
   3be70:	f04f 0320 	mov.w	r3, #32
   3be74:	f3ef 8711 	mrs	r7, BASEPRI
   3be78:	f383 8811 	msr	BASEPRI, r3
   3be7c:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   3be80:	4628      	mov	r0, r5
   3be82:	f001 fbfd 	bl	3d680 <z_spin_lock_valid>
   3be86:	b968      	cbnz	r0, 3bea4 <queue_insert+0x44>
   3be88:	234a      	movs	r3, #74	; 0x4a
   3be8a:	4a33      	ldr	r2, [pc, #204]	; (3bf58 <queue_insert+0xf8>)
   3be8c:	4933      	ldr	r1, [pc, #204]	; (3bf5c <queue_insert+0xfc>)
   3be8e:	4834      	ldr	r0, [pc, #208]	; (3bf60 <queue_insert+0x100>)
   3be90:	f004 fbb7 	bl	40602 <printk>
   3be94:	4629      	mov	r1, r5
   3be96:	4833      	ldr	r0, [pc, #204]	; (3bf64 <queue_insert+0x104>)
   3be98:	f004 fbb3 	bl	40602 <printk>
   3be9c:	214a      	movs	r1, #74	; 0x4a
   3be9e:	482e      	ldr	r0, [pc, #184]	; (3bf58 <queue_insert+0xf8>)
   3bea0:	f004 fc72 	bl	40788 <assert_post_action>
	z_spin_lock_set_owner(l);
   3bea4:	4628      	mov	r0, r5
   3bea6:	f001 fc09 	bl	3d6bc <z_spin_lock_set_owner>
		return 0;
	}
#endif /* !CONFIG_POLL */

	/* Only need to actually allocate if no threads are pending */
	if (alloc) {
   3beaa:	f1b9 0f00 	cmp.w	r9, #0
   3beae:	d02d      	beq.n	3bf0c <queue_insert+0xac>
		struct alloc_node *anode;

		anode = z_thread_malloc(sizeof(*anode));
   3beb0:	2008      	movs	r0, #8
   3beb2:	f7ff fc85 	bl	3b7c0 <z_thread_malloc>
		if (anode == NULL) {
   3beb6:	b9c8      	cbnz	r0, 3beec <queue_insert+0x8c>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   3beb8:	4628      	mov	r0, r5
   3beba:	f001 fbef 	bl	3d69c <z_spin_unlock_valid>
   3bebe:	b968      	cbnz	r0, 3bedc <queue_insert+0x7c>
   3bec0:	235d      	movs	r3, #93	; 0x5d
   3bec2:	4a25      	ldr	r2, [pc, #148]	; (3bf58 <queue_insert+0xf8>)
   3bec4:	4928      	ldr	r1, [pc, #160]	; (3bf68 <queue_insert+0x108>)
   3bec6:	4826      	ldr	r0, [pc, #152]	; (3bf60 <queue_insert+0x100>)
   3bec8:	f004 fb9b 	bl	40602 <printk>
   3becc:	4629      	mov	r1, r5
   3bece:	4827      	ldr	r0, [pc, #156]	; (3bf6c <queue_insert+0x10c>)
   3bed0:	f004 fb97 	bl	40602 <printk>
   3bed4:	215d      	movs	r1, #93	; 0x5d
   3bed6:	4820      	ldr	r0, [pc, #128]	; (3bf58 <queue_insert+0xf8>)
   3bed8:	f004 fc56 	bl	40788 <assert_post_action>
	__asm__ volatile(
   3bedc:	f387 8811 	msr	BASEPRI, r7
   3bee0:	f3bf 8f6f 	isb	sy
			k_spin_unlock(&queue->lock, key);
			return -ENOMEM;
   3bee4:	f06f 000b 	mvn.w	r0, #11
	handle_poll_events(queue, K_POLL_STATE_DATA_AVAILABLE);
#endif /* CONFIG_POLL */

	z_reschedule(&queue->lock, key);
	return 0;
}
   3bee8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 * @param flags A value between 0 and 3 to set the flags value
 */
static inline void sys_sfnode_init(sys_sfnode_t *node, u8_t flags)
{
	__ASSERT((flags & ~SYS_SFLIST_FLAGS_MASK) == 0UL, "flags too large");
	node->next_and_flags = flags;
   3beec:	2301      	movs	r3, #1
		anode->data = data;
   3beee:	f8c0 8004 	str.w	r8, [r0, #4]
   3bef2:	6003      	str	r3, [r0, #0]
 */
static inline void sys_sflist_insert(sys_sflist_t *list,
				     sys_sfnode_t *prev,
				     sys_sfnode_t *node);

Z_GENLIST_INSERT(sflist, sfnode)
   3bef4:	6803      	ldr	r3, [r0, #0]
   3bef6:	f003 0203 	and.w	r2, r3, #3
   3befa:	b95e      	cbnz	r6, 3bf14 <queue_insert+0xb4>
	parent->next_and_flags = cur_flags | (unative_t)child;
   3befc:	6823      	ldr	r3, [r4, #0]
   3befe:	4313      	orrs	r3, r2
   3bf00:	6003      	str	r3, [r0, #0]
Z_GENLIST_PREPEND(sflist, sfnode)
   3bf02:	6863      	ldr	r3, [r4, #4]
	list->head = node;
   3bf04:	6020      	str	r0, [r4, #0]
Z_GENLIST_PREPEND(sflist, sfnode)
   3bf06:	b973      	cbnz	r3, 3bf26 <queue_insert+0xc6>
	list->tail = node;
   3bf08:	6060      	str	r0, [r4, #4]
   3bf0a:	e00c      	b.n	3bf26 <queue_insert+0xc6>
	node->next_and_flags = flags;
   3bf0c:	f8c8 9000 	str.w	r9, [r8]
   3bf10:	4640      	mov	r0, r8
   3bf12:	e7ef      	b.n	3bef4 <queue_insert+0x94>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   3bf14:	6833      	ldr	r3, [r6, #0]
Z_GENLIST_INSERT(sflist, sfnode)
   3bf16:	f033 0303 	bics.w	r3, r3, #3
   3bf1a:	d115      	bne.n	3bf48 <queue_insert+0xe8>
	parent->next_and_flags = cur_flags | (unative_t)child;
   3bf1c:	6002      	str	r2, [r0, #0]
Z_GENLIST_APPEND(sflist, sfnode)
   3bf1e:	6862      	ldr	r2, [r4, #4]
   3bf20:	b962      	cbnz	r2, 3bf3c <queue_insert+0xdc>
	list->head = node;
   3bf22:	e9c4 0000 	strd	r0, r0, [r4]
	z_handle_obj_poll_events(&queue->poll_events, state);
   3bf26:	2104      	movs	r1, #4
   3bf28:	f104 000c 	add.w	r0, r4, #12
   3bf2c:	f008 ff53 	bl	44dd6 <z_handle_obj_poll_events>
	z_reschedule(&queue->lock, key);
   3bf30:	4628      	mov	r0, r5
   3bf32:	4639      	mov	r1, r7
   3bf34:	f000 fa26 	bl	3c384 <z_reschedule>
	return 0;
   3bf38:	2000      	movs	r0, #0
   3bf3a:	e7d5      	b.n	3bee8 <queue_insert+0x88>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   3bf3c:	6813      	ldr	r3, [r2, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   3bf3e:	f003 0303 	and.w	r3, r3, #3
   3bf42:	4303      	orrs	r3, r0
   3bf44:	6013      	str	r3, [r2, #0]
   3bf46:	e7df      	b.n	3bf08 <queue_insert+0xa8>
   3bf48:	4313      	orrs	r3, r2
   3bf4a:	6003      	str	r3, [r0, #0]
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   3bf4c:	6833      	ldr	r3, [r6, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   3bf4e:	f003 0303 	and.w	r3, r3, #3
   3bf52:	4318      	orrs	r0, r3
   3bf54:	6030      	str	r0, [r6, #0]
   3bf56:	e7e6      	b.n	3bf26 <queue_insert+0xc6>
   3bf58:	000498fb 	.word	0x000498fb
   3bf5c:	00049921 	.word	0x00049921
   3bf60:	0004764f 	.word	0x0004764f
   3bf64:	00049936 	.word	0x00049936
   3bf68:	0004994e 	.word	0x0004994e
   3bf6c:	00049965 	.word	0x00049965

0003bf70 <z_impl_k_queue_get>:
	return val;
}
#endif /* CONFIG_POLL */

void *z_impl_k_queue_get(struct k_queue *queue, s32_t timeout)
{
   3bf70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   3bf74:	4606      	mov	r6, r0
   3bf76:	b089      	sub	sp, #36	; 0x24
   3bf78:	460f      	mov	r7, r1
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
   3bf7a:	f100 0408 	add.w	r4, r0, #8
	__asm__ volatile(
   3bf7e:	f04f 0320 	mov.w	r3, #32
   3bf82:	f3ef 8811 	mrs	r8, BASEPRI
   3bf86:	f383 8811 	msr	BASEPRI, r3
   3bf8a:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   3bf8e:	4620      	mov	r0, r4
   3bf90:	f001 fb76 	bl	3d680 <z_spin_lock_valid>
   3bf94:	b968      	cbnz	r0, 3bfb2 <z_impl_k_queue_get+0x42>
   3bf96:	234a      	movs	r3, #74	; 0x4a
   3bf98:	4a5f      	ldr	r2, [pc, #380]	; (3c118 <z_impl_k_queue_get+0x1a8>)
   3bf9a:	4960      	ldr	r1, [pc, #384]	; (3c11c <z_impl_k_queue_get+0x1ac>)
   3bf9c:	4860      	ldr	r0, [pc, #384]	; (3c120 <z_impl_k_queue_get+0x1b0>)
   3bf9e:	f004 fb30 	bl	40602 <printk>
   3bfa2:	4621      	mov	r1, r4
   3bfa4:	485f      	ldr	r0, [pc, #380]	; (3c124 <z_impl_k_queue_get+0x1b4>)
   3bfa6:	f004 fb2c 	bl	40602 <printk>
   3bfaa:	214a      	movs	r1, #74	; 0x4a
   3bfac:	485a      	ldr	r0, [pc, #360]	; (3c118 <z_impl_k_queue_get+0x1a8>)
   3bfae:	f004 fbeb 	bl	40788 <assert_post_action>
	z_spin_lock_set_owner(l);
   3bfb2:	4620      	mov	r0, r4
   3bfb4:	f001 fb82 	bl	3d6bc <z_spin_lock_set_owner>
Z_GENLIST_IS_EMPTY(sflist)
   3bfb8:	6835      	ldr	r5, [r6, #0]
	void *data;

	if (likely(!sys_sflist_is_empty(&queue->data_q))) {
   3bfba:	b335      	cbz	r5, 3c00a <z_impl_k_queue_get+0x9a>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   3bfbc:	682b      	ldr	r3, [r5, #0]
 *
 * @return A pointer to the first node of the list
 */
static inline sys_sfnode_t *sys_sflist_get_not_empty(sys_sflist_t *list);

Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode)
   3bfbe:	6872      	ldr	r2, [r6, #4]
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   3bfc0:	f023 0303 	bic.w	r3, r3, #3
Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode)
   3bfc4:	4295      	cmp	r5, r2
		sys_sfnode_t *node;

		node = sys_sflist_get_not_empty(&queue->data_q);
		data = z_queue_node_peek(node, true);
   3bfc6:	4628      	mov	r0, r5
	list->head = node;
   3bfc8:	6033      	str	r3, [r6, #0]
	list->tail = node;
   3bfca:	bf08      	it	eq
   3bfcc:	6073      	streq	r3, [r6, #4]
   3bfce:	2101      	movs	r1, #1
   3bfd0:	f008 fd86 	bl	44ae0 <z_queue_node_peek>
   3bfd4:	4605      	mov	r5, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   3bfd6:	4620      	mov	r0, r4
   3bfd8:	f001 fb60 	bl	3d69c <z_spin_unlock_valid>
   3bfdc:	b968      	cbnz	r0, 3bffa <z_impl_k_queue_get+0x8a>
   3bfde:	235d      	movs	r3, #93	; 0x5d
   3bfe0:	4a4d      	ldr	r2, [pc, #308]	; (3c118 <z_impl_k_queue_get+0x1a8>)
   3bfe2:	4951      	ldr	r1, [pc, #324]	; (3c128 <z_impl_k_queue_get+0x1b8>)
   3bfe4:	484e      	ldr	r0, [pc, #312]	; (3c120 <z_impl_k_queue_get+0x1b0>)
   3bfe6:	f004 fb0c 	bl	40602 <printk>
   3bfea:	4621      	mov	r1, r4
   3bfec:	484f      	ldr	r0, [pc, #316]	; (3c12c <z_impl_k_queue_get+0x1bc>)
   3bfee:	f004 fb08 	bl	40602 <printk>
   3bff2:	215d      	movs	r1, #93	; 0x5d
   3bff4:	4848      	ldr	r0, [pc, #288]	; (3c118 <z_impl_k_queue_get+0x1a8>)
   3bff6:	f004 fbc7 	bl	40788 <assert_post_action>
	__asm__ volatile(
   3bffa:	f388 8811 	msr	BASEPRI, r8
   3bffe:	f3bf 8f6f 	isb	sy
#else
	int ret = z_pend_curr(&queue->lock, key, &queue->wait_q, timeout);

	return (ret != 0) ? NULL : _current->base.swap_data;
#endif /* CONFIG_POLL */
}
   3c002:	4628      	mov	r0, r5
   3c004:	b009      	add	sp, #36	; 0x24
   3c006:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3c00a:	4620      	mov	r0, r4
	if (timeout == K_NO_WAIT) {
   3c00c:	2f00      	cmp	r7, #0
   3c00e:	d0e3      	beq.n	3bfd8 <z_impl_k_queue_get+0x68>
   3c010:	f001 fb44 	bl	3d69c <z_spin_unlock_valid>
   3c014:	b968      	cbnz	r0, 3c032 <z_impl_k_queue_get+0xc2>
   3c016:	235d      	movs	r3, #93	; 0x5d
   3c018:	4a3f      	ldr	r2, [pc, #252]	; (3c118 <z_impl_k_queue_get+0x1a8>)
   3c01a:	4943      	ldr	r1, [pc, #268]	; (3c128 <z_impl_k_queue_get+0x1b8>)
   3c01c:	4840      	ldr	r0, [pc, #256]	; (3c120 <z_impl_k_queue_get+0x1b0>)
   3c01e:	f004 faf0 	bl	40602 <printk>
   3c022:	4621      	mov	r1, r4
   3c024:	4841      	ldr	r0, [pc, #260]	; (3c12c <z_impl_k_queue_get+0x1bc>)
   3c026:	f004 faec 	bl	40602 <printk>
   3c02a:	215d      	movs	r1, #93	; 0x5d
   3c02c:	483a      	ldr	r0, [pc, #232]	; (3c118 <z_impl_k_queue_get+0x1a8>)
   3c02e:	f004 fbab 	bl	40788 <assert_post_action>
   3c032:	f388 8811 	msr	BASEPRI, r8
   3c036:	f3bf 8f6f 	isb	sy
	k_poll_event_init(&event, K_POLL_TYPE_FIFO_DATA_AVAILABLE,
   3c03a:	2200      	movs	r2, #0
   3c03c:	4633      	mov	r3, r6
   3c03e:	2104      	movs	r1, #4
   3c040:	a803      	add	r0, sp, #12
   3c042:	f002 faf3 	bl	3e62c <k_poll_event_init>
	if (timeout != K_FOREVER) {
   3c046:	1c7a      	adds	r2, r7, #1
   3c048:	d002      	beq.n	3c050 <z_impl_k_queue_get+0xe0>
   3c04a:	f008 fe3a 	bl	44cc2 <z_impl_k_uptime_get>
   3c04e:	4683      	mov	fp, r0
{
   3c050:	f04f 0900 	mov.w	r9, #0
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   3c054:	f8df 80c0 	ldr.w	r8, [pc, #192]	; 3c118 <z_impl_k_queue_get+0x1a8>
   3c058:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 3c120 <z_impl_k_queue_get+0x1b0>
		event.state = K_POLL_STATE_NOT_READY;
   3c05c:	9b06      	ldr	r3, [sp, #24]
   3c05e:	f36f 3310 	bfc	r3, #12, #5
   3c062:	9306      	str	r3, [sp, #24]
	return z_impl_k_poll(events, num_events, timeout);
   3c064:	2101      	movs	r1, #1
   3c066:	eba7 0209 	sub.w	r2, r7, r9
   3c06a:	a803      	add	r0, sp, #12
   3c06c:	f002 fb30 	bl	3e6d0 <z_impl_k_poll>
		if (err && err != -EAGAIN) {
   3c070:	b118      	cbz	r0, 3c07a <z_impl_k_queue_get+0x10a>
   3c072:	300b      	adds	r0, #11
   3c074:	d001      	beq.n	3c07a <z_impl_k_queue_get+0x10a>
			return NULL;
   3c076:	2500      	movs	r5, #0
   3c078:	e7c3      	b.n	3c002 <z_impl_k_queue_get+0x92>
	__asm__ volatile(
   3c07a:	f04f 0320 	mov.w	r3, #32
   3c07e:	f3ef 8211 	mrs	r2, BASEPRI
   3c082:	f383 8811 	msr	BASEPRI, r3
   3c086:	f3bf 8f6f 	isb	sy
   3c08a:	4620      	mov	r0, r4
   3c08c:	9201      	str	r2, [sp, #4]
   3c08e:	f001 faf7 	bl	3d680 <z_spin_lock_valid>
   3c092:	b968      	cbnz	r0, 3c0b0 <z_impl_k_queue_get+0x140>
   3c094:	234a      	movs	r3, #74	; 0x4a
   3c096:	4642      	mov	r2, r8
   3c098:	4920      	ldr	r1, [pc, #128]	; (3c11c <z_impl_k_queue_get+0x1ac>)
   3c09a:	4650      	mov	r0, sl
   3c09c:	f004 fab1 	bl	40602 <printk>
   3c0a0:	4621      	mov	r1, r4
   3c0a2:	4820      	ldr	r0, [pc, #128]	; (3c124 <z_impl_k_queue_get+0x1b4>)
   3c0a4:	f004 faad 	bl	40602 <printk>
   3c0a8:	214a      	movs	r1, #74	; 0x4a
   3c0aa:	4640      	mov	r0, r8
   3c0ac:	f004 fb6c 	bl	40788 <assert_post_action>
	z_spin_lock_set_owner(l);
   3c0b0:	4620      	mov	r0, r4
   3c0b2:	f001 fb03 	bl	3d6bc <z_spin_lock_set_owner>
Z_GENLIST_IS_EMPTY(sflist)
   3c0b6:	6830      	ldr	r0, [r6, #0]
 *
 * @return A pointer to the first node of the list (or NULL if empty)
 */
static inline sys_sfnode_t *sys_sflist_get(sys_sflist_t *list);

Z_GENLIST_GET(sflist, sfnode)
   3c0b8:	b138      	cbz	r0, 3c0ca <z_impl_k_queue_get+0x15a>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   3c0ba:	6803      	ldr	r3, [r0, #0]
Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode)
   3c0bc:	6872      	ldr	r2, [r6, #4]
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   3c0be:	f023 0303 	bic.w	r3, r3, #3
Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode)
   3c0c2:	4290      	cmp	r0, r2
	list->head = node;
   3c0c4:	6033      	str	r3, [r6, #0]
	list->tail = node;
   3c0c6:	bf08      	it	eq
   3c0c8:	6073      	streq	r3, [r6, #4]
		val = z_queue_node_peek(sys_sflist_get(&queue->data_q), true);
   3c0ca:	2101      	movs	r1, #1
   3c0cc:	f008 fd08 	bl	44ae0 <z_queue_node_peek>
   3c0d0:	4605      	mov	r5, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   3c0d2:	4620      	mov	r0, r4
   3c0d4:	f001 fae2 	bl	3d69c <z_spin_unlock_valid>
   3c0d8:	b968      	cbnz	r0, 3c0f6 <z_impl_k_queue_get+0x186>
   3c0da:	235d      	movs	r3, #93	; 0x5d
   3c0dc:	4642      	mov	r2, r8
   3c0de:	4912      	ldr	r1, [pc, #72]	; (3c128 <z_impl_k_queue_get+0x1b8>)
   3c0e0:	4650      	mov	r0, sl
   3c0e2:	f004 fa8e 	bl	40602 <printk>
   3c0e6:	4621      	mov	r1, r4
   3c0e8:	4810      	ldr	r0, [pc, #64]	; (3c12c <z_impl_k_queue_get+0x1bc>)
   3c0ea:	f004 fa8a 	bl	40602 <printk>
   3c0ee:	215d      	movs	r1, #93	; 0x5d
   3c0f0:	4640      	mov	r0, r8
   3c0f2:	f004 fb49 	bl	40788 <assert_post_action>
	__asm__ volatile(
   3c0f6:	9b01      	ldr	r3, [sp, #4]
   3c0f8:	f383 8811 	msr	BASEPRI, r3
   3c0fc:	f3bf 8f6f 	isb	sy
		if ((val == NULL) && (timeout != K_FOREVER)) {
   3c100:	2d00      	cmp	r5, #0
   3c102:	f47f af7e 	bne.w	3c002 <z_impl_k_queue_get+0x92>
   3c106:	1c7b      	adds	r3, r7, #1
   3c108:	d0a8      	beq.n	3c05c <z_impl_k_queue_get+0xec>
	return z_impl_k_uptime_get();
   3c10a:	f008 fdda 	bl	44cc2 <z_impl_k_uptime_get>
			elapsed = k_uptime_get_32() - start;
   3c10e:	eba0 090b 	sub.w	r9, r0, fp
	} while (!val && !done);
   3c112:	454f      	cmp	r7, r9
   3c114:	daa2      	bge.n	3c05c <z_impl_k_queue_get+0xec>
   3c116:	e7ae      	b.n	3c076 <z_impl_k_queue_get+0x106>
   3c118:	000498fb 	.word	0x000498fb
   3c11c:	00049921 	.word	0x00049921
   3c120:	0004764f 	.word	0x0004764f
   3c124:	00049936 	.word	0x00049936
   3c128:	0004994e 	.word	0x0004994e
   3c12c:	00049965 	.word	0x00049965

0003c130 <pended_on.isra.17>:
	}
}

static _wait_q_t *pended_on(struct k_thread *thread)
{
	__ASSERT_NO_MSG(thread->base.pended_on);
   3c130:	6803      	ldr	r3, [r0, #0]
static _wait_q_t *pended_on(struct k_thread *thread)
   3c132:	b510      	push	{r4, lr}
   3c134:	4604      	mov	r4, r0
	__ASSERT_NO_MSG(thread->base.pended_on);
   3c136:	b95b      	cbnz	r3, 3c150 <pended_on.isra.17+0x20>
   3c138:	4906      	ldr	r1, [pc, #24]	; (3c154 <pended_on.isra.17+0x24>)
   3c13a:	4807      	ldr	r0, [pc, #28]	; (3c158 <pended_on.isra.17+0x28>)
   3c13c:	f240 139d 	movw	r3, #413	; 0x19d
   3c140:	4a06      	ldr	r2, [pc, #24]	; (3c15c <pended_on.isra.17+0x2c>)
   3c142:	f004 fa5e 	bl	40602 <printk>
   3c146:	f240 119d 	movw	r1, #413	; 0x19d
   3c14a:	4804      	ldr	r0, [pc, #16]	; (3c15c <pended_on.isra.17+0x2c>)
   3c14c:	f004 fb1c 	bl	40788 <assert_post_action>

	return thread->base.pended_on;
}
   3c150:	6820      	ldr	r0, [r4, #0]
   3c152:	bd10      	pop	{r4, pc}
   3c154:	0004d3f5 	.word	0x0004d3f5
   3c158:	0004764f 	.word	0x0004764f
   3c15c:	0004d3d3 	.word	0x0004d3d3

0003c160 <z_reset_time_slice>:
{
   3c160:	b510      	push	{r4, lr}
	if (slice_time != 0) {
   3c162:	4c08      	ldr	r4, [pc, #32]	; (3c184 <z_reset_time_slice+0x24>)
   3c164:	6823      	ldr	r3, [r4, #0]
   3c166:	b15b      	cbz	r3, 3c180 <z_reset_time_slice+0x20>
		_current_cpu->slice_ticks = slice_time + z_clock_elapsed();
   3c168:	f7ea f8bc 	bl	262e4 <z_clock_elapsed>
   3c16c:	6823      	ldr	r3, [r4, #0]
   3c16e:	4a06      	ldr	r2, [pc, #24]	; (3c188 <z_reset_time_slice+0x28>)
   3c170:	4418      	add	r0, r3
   3c172:	6110      	str	r0, [r2, #16]
		z_set_timeout_expiry(slice_time, false);
   3c174:	2100      	movs	r1, #0
}
   3c176:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		z_set_timeout_expiry(slice_time, false);
   3c17a:	4618      	mov	r0, r3
   3c17c:	f001 bea6 	b.w	3decc <z_set_timeout_expiry>
}
   3c180:	bd10      	pop	{r4, pc}
   3c182:	bf00      	nop
   3c184:	2002974c 	.word	0x2002974c
   3c188:	2002970c 	.word	0x2002970c

0003c18c <k_sched_time_slice_set>:
{
   3c18c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   3c18e:	4607      	mov	r7, r0
   3c190:	460d      	mov	r5, r1
	__asm__ volatile(
   3c192:	f04f 0320 	mov.w	r3, #32
   3c196:	f3ef 8411 	mrs	r4, BASEPRI
   3c19a:	f383 8811 	msr	BASEPRI, r3
   3c19e:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   3c1a2:	4820      	ldr	r0, [pc, #128]	; (3c224 <k_sched_time_slice_set+0x98>)
   3c1a4:	f001 fa6c 	bl	3d680 <z_spin_lock_valid>
   3c1a8:	b968      	cbnz	r0, 3c1c6 <k_sched_time_slice_set+0x3a>
   3c1aa:	234a      	movs	r3, #74	; 0x4a
   3c1ac:	4a1e      	ldr	r2, [pc, #120]	; (3c228 <k_sched_time_slice_set+0x9c>)
   3c1ae:	491f      	ldr	r1, [pc, #124]	; (3c22c <k_sched_time_slice_set+0xa0>)
   3c1b0:	481f      	ldr	r0, [pc, #124]	; (3c230 <k_sched_time_slice_set+0xa4>)
   3c1b2:	f004 fa26 	bl	40602 <printk>
   3c1b6:	491b      	ldr	r1, [pc, #108]	; (3c224 <k_sched_time_slice_set+0x98>)
   3c1b8:	481e      	ldr	r0, [pc, #120]	; (3c234 <k_sched_time_slice_set+0xa8>)
   3c1ba:	f004 fa22 	bl	40602 <printk>
   3c1be:	214a      	movs	r1, #74	; 0x4a
   3c1c0:	4819      	ldr	r0, [pc, #100]	; (3c228 <k_sched_time_slice_set+0x9c>)
   3c1c2:	f004 fae1 	bl	40788 <assert_post_action>
	z_spin_lock_set_owner(l);
   3c1c6:	4817      	ldr	r0, [pc, #92]	; (3c224 <k_sched_time_slice_set+0x98>)
   3c1c8:	f001 fa78 	bl	3d6bc <z_spin_lock_set_owner>
		} else {
			return t * (to_hz / from_hz);
		}
	} else {
		if (result32) {
			return (u32_t)((t * to_hz + off) / from_hz);
   3c1cc:	f44f 4600 	mov.w	r6, #32768	; 0x8000
		_current_cpu->slice_ticks = 0;
   3c1d0:	2200      	movs	r2, #0
   3c1d2:	f240 30e7 	movw	r0, #999	; 0x3e7
   3c1d6:	2100      	movs	r1, #0
   3c1d8:	4b17      	ldr	r3, [pc, #92]	; (3c238 <k_sched_time_slice_set+0xac>)
   3c1da:	fbe6 0107 	umlal	r0, r1, r6, r7
   3c1de:	611a      	str	r2, [r3, #16]
   3c1e0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   3c1e4:	2300      	movs	r3, #0
   3c1e6:	f7e0 fdf9 	bl	1cddc <__aeabi_uldivmod>
		slice_time = k_ms_to_ticks_ceil32(slice);
   3c1ea:	4b14      	ldr	r3, [pc, #80]	; (3c23c <k_sched_time_slice_set+0xb0>)
   3c1ec:	6018      	str	r0, [r3, #0]
		slice_max_prio = prio;
   3c1ee:	4b14      	ldr	r3, [pc, #80]	; (3c240 <k_sched_time_slice_set+0xb4>)
   3c1f0:	601d      	str	r5, [r3, #0]
		z_reset_time_slice();
   3c1f2:	f7ff ffb5 	bl	3c160 <z_reset_time_slice>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   3c1f6:	480b      	ldr	r0, [pc, #44]	; (3c224 <k_sched_time_slice_set+0x98>)
   3c1f8:	f001 fa50 	bl	3d69c <z_spin_unlock_valid>
   3c1fc:	b968      	cbnz	r0, 3c21a <k_sched_time_slice_set+0x8e>
   3c1fe:	235d      	movs	r3, #93	; 0x5d
   3c200:	4a09      	ldr	r2, [pc, #36]	; (3c228 <k_sched_time_slice_set+0x9c>)
   3c202:	4910      	ldr	r1, [pc, #64]	; (3c244 <k_sched_time_slice_set+0xb8>)
   3c204:	480a      	ldr	r0, [pc, #40]	; (3c230 <k_sched_time_slice_set+0xa4>)
   3c206:	f004 f9fc 	bl	40602 <printk>
   3c20a:	4906      	ldr	r1, [pc, #24]	; (3c224 <k_sched_time_slice_set+0x98>)
   3c20c:	480e      	ldr	r0, [pc, #56]	; (3c248 <k_sched_time_slice_set+0xbc>)
   3c20e:	f004 f9f8 	bl	40602 <printk>
   3c212:	215d      	movs	r1, #93	; 0x5d
   3c214:	4804      	ldr	r0, [pc, #16]	; (3c228 <k_sched_time_slice_set+0x9c>)
   3c216:	f004 fab7 	bl	40788 <assert_post_action>
	__asm__ volatile(
   3c21a:	f384 8811 	msr	BASEPRI, r4
   3c21e:	f3bf 8f6f 	isb	sy
}
   3c222:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   3c224:	20029744 	.word	0x20029744
   3c228:	000498fb 	.word	0x000498fb
   3c22c:	00049921 	.word	0x00049921
   3c230:	0004764f 	.word	0x0004764f
   3c234:	00049936 	.word	0x00049936
   3c238:	2002970c 	.word	0x2002970c
   3c23c:	2002974c 	.word	0x2002974c
   3c240:	20029748 	.word	0x20029748
   3c244:	0004994e 	.word	0x0004994e
   3c248:	00049965 	.word	0x00049965

0003c24c <z_find_first_thread_to_unpend>:
	pend(thread, wait_q, timeout);
}

ALWAYS_INLINE struct k_thread *z_find_first_thread_to_unpend(_wait_q_t *wait_q,
						     struct k_thread *from)
{
   3c24c:	b538      	push	{r3, r4, r5, lr}
   3c24e:	4604      	mov	r4, r0
	__asm__ volatile(
   3c250:	f04f 0320 	mov.w	r3, #32
   3c254:	f3ef 8511 	mrs	r5, BASEPRI
   3c258:	f383 8811 	msr	BASEPRI, r3
   3c25c:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   3c260:	4818      	ldr	r0, [pc, #96]	; (3c2c4 <z_find_first_thread_to_unpend+0x78>)
   3c262:	f001 fa0d 	bl	3d680 <z_spin_lock_valid>
   3c266:	b968      	cbnz	r0, 3c284 <z_find_first_thread_to_unpend+0x38>
   3c268:	234a      	movs	r3, #74	; 0x4a
   3c26a:	4a17      	ldr	r2, [pc, #92]	; (3c2c8 <z_find_first_thread_to_unpend+0x7c>)
   3c26c:	4917      	ldr	r1, [pc, #92]	; (3c2cc <z_find_first_thread_to_unpend+0x80>)
   3c26e:	4818      	ldr	r0, [pc, #96]	; (3c2d0 <z_find_first_thread_to_unpend+0x84>)
   3c270:	f004 f9c7 	bl	40602 <printk>
   3c274:	4913      	ldr	r1, [pc, #76]	; (3c2c4 <z_find_first_thread_to_unpend+0x78>)
   3c276:	4817      	ldr	r0, [pc, #92]	; (3c2d4 <z_find_first_thread_to_unpend+0x88>)
   3c278:	f004 f9c3 	bl	40602 <printk>
   3c27c:	214a      	movs	r1, #74	; 0x4a
   3c27e:	4812      	ldr	r0, [pc, #72]	; (3c2c8 <z_find_first_thread_to_unpend+0x7c>)
   3c280:	f004 fa82 	bl	40788 <assert_post_action>
	z_spin_lock_set_owner(l);
   3c284:	480f      	ldr	r0, [pc, #60]	; (3c2c4 <z_find_first_thread_to_unpend+0x78>)
   3c286:	f001 fa19 	bl	3d6bc <z_spin_lock_set_owner>
	ARG_UNUSED(from);

	struct k_thread *ret = NULL;

	LOCKED(&sched_spinlock) {
		ret = _priq_wait_best(&wait_q->waitq);
   3c28a:	4620      	mov	r0, r4
   3c28c:	f008 fc6a 	bl	44b64 <z_priq_dumb_best>
   3c290:	4604      	mov	r4, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   3c292:	480c      	ldr	r0, [pc, #48]	; (3c2c4 <z_find_first_thread_to_unpend+0x78>)
   3c294:	f001 fa02 	bl	3d69c <z_spin_unlock_valid>
   3c298:	b968      	cbnz	r0, 3c2b6 <z_find_first_thread_to_unpend+0x6a>
   3c29a:	235d      	movs	r3, #93	; 0x5d
   3c29c:	4a0a      	ldr	r2, [pc, #40]	; (3c2c8 <z_find_first_thread_to_unpend+0x7c>)
   3c29e:	490e      	ldr	r1, [pc, #56]	; (3c2d8 <z_find_first_thread_to_unpend+0x8c>)
   3c2a0:	480b      	ldr	r0, [pc, #44]	; (3c2d0 <z_find_first_thread_to_unpend+0x84>)
   3c2a2:	f004 f9ae 	bl	40602 <printk>
   3c2a6:	4907      	ldr	r1, [pc, #28]	; (3c2c4 <z_find_first_thread_to_unpend+0x78>)
   3c2a8:	480c      	ldr	r0, [pc, #48]	; (3c2dc <z_find_first_thread_to_unpend+0x90>)
   3c2aa:	f004 f9aa 	bl	40602 <printk>
   3c2ae:	215d      	movs	r1, #93	; 0x5d
   3c2b0:	4805      	ldr	r0, [pc, #20]	; (3c2c8 <z_find_first_thread_to_unpend+0x7c>)
   3c2b2:	f004 fa69 	bl	40788 <assert_post_action>
	__asm__ volatile(
   3c2b6:	f385 8811 	msr	BASEPRI, r5
   3c2ba:	f3bf 8f6f 	isb	sy
	}

	return ret;
}
   3c2be:	4620      	mov	r0, r4
   3c2c0:	bd38      	pop	{r3, r4, r5, pc}
   3c2c2:	bf00      	nop
   3c2c4:	20029744 	.word	0x20029744
   3c2c8:	000498fb 	.word	0x000498fb
   3c2cc:	00049921 	.word	0x00049921
   3c2d0:	0004764f 	.word	0x0004764f
   3c2d4:	00049936 	.word	0x00049936
   3c2d8:	0004994e 	.word	0x0004994e
   3c2dc:	00049965 	.word	0x00049965

0003c2e0 <z_unpend_thread_no_timeout>:

ALWAYS_INLINE void z_unpend_thread_no_timeout(struct k_thread *thread)
{
   3c2e0:	b538      	push	{r3, r4, r5, lr}
   3c2e2:	4604      	mov	r4, r0
	__asm__ volatile(
   3c2e4:	f04f 0320 	mov.w	r3, #32
   3c2e8:	f3ef 8511 	mrs	r5, BASEPRI
   3c2ec:	f383 8811 	msr	BASEPRI, r3
   3c2f0:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   3c2f4:	481c      	ldr	r0, [pc, #112]	; (3c368 <z_unpend_thread_no_timeout+0x88>)
   3c2f6:	f001 f9c3 	bl	3d680 <z_spin_lock_valid>
   3c2fa:	b968      	cbnz	r0, 3c318 <z_unpend_thread_no_timeout+0x38>
   3c2fc:	234a      	movs	r3, #74	; 0x4a
   3c2fe:	4a1b      	ldr	r2, [pc, #108]	; (3c36c <z_unpend_thread_no_timeout+0x8c>)
   3c300:	491b      	ldr	r1, [pc, #108]	; (3c370 <z_unpend_thread_no_timeout+0x90>)
   3c302:	481c      	ldr	r0, [pc, #112]	; (3c374 <z_unpend_thread_no_timeout+0x94>)
   3c304:	f004 f97d 	bl	40602 <printk>
   3c308:	4917      	ldr	r1, [pc, #92]	; (3c368 <z_unpend_thread_no_timeout+0x88>)
   3c30a:	481b      	ldr	r0, [pc, #108]	; (3c378 <z_unpend_thread_no_timeout+0x98>)
   3c30c:	f004 f979 	bl	40602 <printk>
   3c310:	214a      	movs	r1, #74	; 0x4a
   3c312:	4816      	ldr	r0, [pc, #88]	; (3c36c <z_unpend_thread_no_timeout+0x8c>)
   3c314:	f004 fa38 	bl	40788 <assert_post_action>
	z_spin_lock_set_owner(l);
   3c318:	4813      	ldr	r0, [pc, #76]	; (3c368 <z_unpend_thread_no_timeout+0x88>)
   3c31a:	f001 f9cf 	bl	3d6bc <z_spin_lock_set_owner>
	LOCKED(&sched_spinlock) {
		_priq_wait_remove(&pended_on(thread)->waitq, thread);
   3c31e:	f104 0008 	add.w	r0, r4, #8
   3c322:	f7ff ff05 	bl	3c130 <pended_on.isra.17>
   3c326:	4621      	mov	r1, r4
   3c328:	f000 f8e0 	bl	3c4ec <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
   3c32c:	7b63      	ldrb	r3, [r4, #13]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   3c32e:	480e      	ldr	r0, [pc, #56]	; (3c368 <z_unpend_thread_no_timeout+0x88>)
   3c330:	f023 0302 	bic.w	r3, r3, #2
   3c334:	7363      	strb	r3, [r4, #13]
   3c336:	f001 f9b1 	bl	3d69c <z_spin_unlock_valid>
   3c33a:	b968      	cbnz	r0, 3c358 <z_unpend_thread_no_timeout+0x78>
   3c33c:	235d      	movs	r3, #93	; 0x5d
   3c33e:	4a0b      	ldr	r2, [pc, #44]	; (3c36c <z_unpend_thread_no_timeout+0x8c>)
   3c340:	490e      	ldr	r1, [pc, #56]	; (3c37c <z_unpend_thread_no_timeout+0x9c>)
   3c342:	480c      	ldr	r0, [pc, #48]	; (3c374 <z_unpend_thread_no_timeout+0x94>)
   3c344:	f004 f95d 	bl	40602 <printk>
   3c348:	4907      	ldr	r1, [pc, #28]	; (3c368 <z_unpend_thread_no_timeout+0x88>)
   3c34a:	480d      	ldr	r0, [pc, #52]	; (3c380 <z_unpend_thread_no_timeout+0xa0>)
   3c34c:	f004 f959 	bl	40602 <printk>
   3c350:	215d      	movs	r1, #93	; 0x5d
   3c352:	4806      	ldr	r0, [pc, #24]	; (3c36c <z_unpend_thread_no_timeout+0x8c>)
   3c354:	f004 fa18 	bl	40788 <assert_post_action>
	__asm__ volatile(
   3c358:	f385 8811 	msr	BASEPRI, r5
   3c35c:	f3bf 8f6f 	isb	sy
		z_mark_thread_as_not_pending(thread);
	}

	thread->base.pended_on = NULL;
   3c360:	2300      	movs	r3, #0
   3c362:	60a3      	str	r3, [r4, #8]
}
   3c364:	bd38      	pop	{r3, r4, r5, pc}
   3c366:	bf00      	nop
   3c368:	20029744 	.word	0x20029744
   3c36c:	000498fb 	.word	0x000498fb
   3c370:	00049921 	.word	0x00049921
   3c374:	0004764f 	.word	0x0004764f
   3c378:	00049936 	.word	0x00049936
   3c37c:	0004994e 	.word	0x0004994e
   3c380:	00049965 	.word	0x00049965

0003c384 <z_reschedule>:

	return arch_irq_unlocked(key) && !arch_is_in_isr();
}

void z_reschedule(struct k_spinlock *lock, k_spinlock_key_t key)
{
   3c384:	b538      	push	{r3, r4, r5, lr}
   3c386:	4604      	mov	r4, r0
	return arch_irq_unlocked(key) && !arch_is_in_isr();
   3c388:	460d      	mov	r5, r1
   3c38a:	b9c1      	cbnz	r1, 3c3be <z_reschedule+0x3a>
   3c38c:	f3ef 8305 	mrs	r3, IPSR
   3c390:	b9ab      	cbnz	r3, 3c3be <z_reschedule+0x3a>
 */
static ALWAYS_INLINE void k_spin_release(struct k_spinlock *l)
{
	ARG_UNUSED(l);
#ifdef CONFIG_SPIN_VALIDATE
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   3c392:	f001 f983 	bl	3d69c <z_spin_unlock_valid>
   3c396:	b968      	cbnz	r0, 3c3b4 <z_reschedule+0x30>
   3c398:	2374      	movs	r3, #116	; 0x74
   3c39a:	4a14      	ldr	r2, [pc, #80]	; (3c3ec <z_reschedule+0x68>)
   3c39c:	4914      	ldr	r1, [pc, #80]	; (3c3f0 <z_reschedule+0x6c>)
   3c39e:	4815      	ldr	r0, [pc, #84]	; (3c3f4 <z_reschedule+0x70>)
   3c3a0:	f004 f92f 	bl	40602 <printk>
   3c3a4:	4621      	mov	r1, r4
   3c3a6:	4814      	ldr	r0, [pc, #80]	; (3c3f8 <z_reschedule+0x74>)
   3c3a8:	f004 f92b 	bl	40602 <printk>
   3c3ac:	2174      	movs	r1, #116	; 0x74
   3c3ae:	480f      	ldr	r0, [pc, #60]	; (3c3ec <z_reschedule+0x68>)
   3c3b0:	f004 f9ea 	bl	40788 <assert_post_action>
	if (resched(key.key)) {
		z_swap(lock, key);
	} else {
		k_spin_unlock(lock, key);
	}
}
   3c3b4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   3c3b8:	2000      	movs	r0, #0
   3c3ba:	f7ea b8e5 	b.w	26588 <arch_swap>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   3c3be:	4620      	mov	r0, r4
   3c3c0:	f001 f96c 	bl	3d69c <z_spin_unlock_valid>
   3c3c4:	b968      	cbnz	r0, 3c3e2 <z_reschedule+0x5e>
   3c3c6:	235d      	movs	r3, #93	; 0x5d
   3c3c8:	4a08      	ldr	r2, [pc, #32]	; (3c3ec <z_reschedule+0x68>)
   3c3ca:	4909      	ldr	r1, [pc, #36]	; (3c3f0 <z_reschedule+0x6c>)
   3c3cc:	4809      	ldr	r0, [pc, #36]	; (3c3f4 <z_reschedule+0x70>)
   3c3ce:	f004 f918 	bl	40602 <printk>
   3c3d2:	4621      	mov	r1, r4
   3c3d4:	4808      	ldr	r0, [pc, #32]	; (3c3f8 <z_reschedule+0x74>)
   3c3d6:	f004 f914 	bl	40602 <printk>
   3c3da:	215d      	movs	r1, #93	; 0x5d
   3c3dc:	4803      	ldr	r0, [pc, #12]	; (3c3ec <z_reschedule+0x68>)
   3c3de:	f004 f9d3 	bl	40788 <assert_post_action>
   3c3e2:	f385 8811 	msr	BASEPRI, r5
   3c3e6:	f3bf 8f6f 	isb	sy
   3c3ea:	bd38      	pop	{r3, r4, r5, pc}
   3c3ec:	000498fb 	.word	0x000498fb
   3c3f0:	0004994e 	.word	0x0004994e
   3c3f4:	0004764f 	.word	0x0004764f
   3c3f8:	00049965 	.word	0x00049965

0003c3fc <k_sched_lock>:
		irq_unlock(key);
	}
}

void k_sched_lock(void)
{
   3c3fc:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
   3c3fe:	f04f 0320 	mov.w	r3, #32
   3c402:	f3ef 8511 	mrs	r5, BASEPRI
   3c406:	f383 8811 	msr	BASEPRI, r3
   3c40a:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   3c40e:	482b      	ldr	r0, [pc, #172]	; (3c4bc <k_sched_lock+0xc0>)
   3c410:	f001 f936 	bl	3d680 <z_spin_lock_valid>
   3c414:	b968      	cbnz	r0, 3c432 <k_sched_lock+0x36>
   3c416:	234a      	movs	r3, #74	; 0x4a
   3c418:	4a29      	ldr	r2, [pc, #164]	; (3c4c0 <k_sched_lock+0xc4>)
   3c41a:	492a      	ldr	r1, [pc, #168]	; (3c4c4 <k_sched_lock+0xc8>)
   3c41c:	482a      	ldr	r0, [pc, #168]	; (3c4c8 <k_sched_lock+0xcc>)
   3c41e:	f004 f8f0 	bl	40602 <printk>
   3c422:	4926      	ldr	r1, [pc, #152]	; (3c4bc <k_sched_lock+0xc0>)
   3c424:	4829      	ldr	r0, [pc, #164]	; (3c4cc <k_sched_lock+0xd0>)
   3c426:	f004 f8ec 	bl	40602 <printk>
   3c42a:	214a      	movs	r1, #74	; 0x4a
   3c42c:	4824      	ldr	r0, [pc, #144]	; (3c4c0 <k_sched_lock+0xc4>)
   3c42e:	f004 f9ab 	bl	40788 <assert_post_action>
	z_spin_lock_set_owner(l);
   3c432:	4822      	ldr	r0, [pc, #136]	; (3c4bc <k_sched_lock+0xc0>)
   3c434:	f001 f942 	bl	3d6bc <z_spin_lock_set_owner>
   3c438:	f3ef 8305 	mrs	r3, IPSR
	__ASSERT(!arch_is_in_isr(), "");
   3c43c:	b173      	cbz	r3, 3c45c <k_sched_lock+0x60>
   3c43e:	4924      	ldr	r1, [pc, #144]	; (3c4d0 <k_sched_lock+0xd4>)
   3c440:	f240 130d 	movw	r3, #269	; 0x10d
   3c444:	4a23      	ldr	r2, [pc, #140]	; (3c4d4 <k_sched_lock+0xd8>)
   3c446:	4820      	ldr	r0, [pc, #128]	; (3c4c8 <k_sched_lock+0xcc>)
   3c448:	f004 f8db 	bl	40602 <printk>
   3c44c:	4822      	ldr	r0, [pc, #136]	; (3c4d8 <k_sched_lock+0xdc>)
   3c44e:	f004 f8d8 	bl	40602 <printk>
   3c452:	f240 110d 	movw	r1, #269	; 0x10d
   3c456:	481f      	ldr	r0, [pc, #124]	; (3c4d4 <k_sched_lock+0xd8>)
   3c458:	f004 f996 	bl	40788 <assert_post_action>
	__ASSERT(_current->base.sched_locked != 1, "");
   3c45c:	4c1f      	ldr	r4, [pc, #124]	; (3c4dc <k_sched_lock+0xe0>)
   3c45e:	68a2      	ldr	r2, [r4, #8]
   3c460:	7bd2      	ldrb	r2, [r2, #15]
   3c462:	2a01      	cmp	r2, #1
   3c464:	d10e      	bne.n	3c484 <k_sched_lock+0x88>
   3c466:	491e      	ldr	r1, [pc, #120]	; (3c4e0 <k_sched_lock+0xe4>)
   3c468:	f44f 7387 	mov.w	r3, #270	; 0x10e
   3c46c:	4a19      	ldr	r2, [pc, #100]	; (3c4d4 <k_sched_lock+0xd8>)
   3c46e:	4816      	ldr	r0, [pc, #88]	; (3c4c8 <k_sched_lock+0xcc>)
   3c470:	f004 f8c7 	bl	40602 <printk>
   3c474:	4818      	ldr	r0, [pc, #96]	; (3c4d8 <k_sched_lock+0xdc>)
   3c476:	f004 f8c4 	bl	40602 <printk>
   3c47a:	f44f 7187 	mov.w	r1, #270	; 0x10e
   3c47e:	4815      	ldr	r0, [pc, #84]	; (3c4d4 <k_sched_lock+0xd8>)
   3c480:	f004 f982 	bl	40788 <assert_post_action>
	--_current->base.sched_locked;
   3c484:	68a2      	ldr	r2, [r4, #8]
   3c486:	7bd3      	ldrb	r3, [r2, #15]
   3c488:	3b01      	subs	r3, #1
   3c48a:	73d3      	strb	r3, [r2, #15]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   3c48c:	480b      	ldr	r0, [pc, #44]	; (3c4bc <k_sched_lock+0xc0>)
   3c48e:	f001 f905 	bl	3d69c <z_spin_unlock_valid>
   3c492:	b968      	cbnz	r0, 3c4b0 <k_sched_lock+0xb4>
   3c494:	235d      	movs	r3, #93	; 0x5d
   3c496:	4a0a      	ldr	r2, [pc, #40]	; (3c4c0 <k_sched_lock+0xc4>)
   3c498:	4912      	ldr	r1, [pc, #72]	; (3c4e4 <k_sched_lock+0xe8>)
   3c49a:	480b      	ldr	r0, [pc, #44]	; (3c4c8 <k_sched_lock+0xcc>)
   3c49c:	f004 f8b1 	bl	40602 <printk>
   3c4a0:	4906      	ldr	r1, [pc, #24]	; (3c4bc <k_sched_lock+0xc0>)
   3c4a2:	4811      	ldr	r0, [pc, #68]	; (3c4e8 <k_sched_lock+0xec>)
   3c4a4:	f004 f8ad 	bl	40602 <printk>
   3c4a8:	215d      	movs	r1, #93	; 0x5d
   3c4aa:	4805      	ldr	r0, [pc, #20]	; (3c4c0 <k_sched_lock+0xc4>)
   3c4ac:	f004 f96c 	bl	40788 <assert_post_action>
	__asm__ volatile(
   3c4b0:	f385 8811 	msr	BASEPRI, r5
   3c4b4:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
		z_sched_lock();
	}
}
   3c4b8:	bd38      	pop	{r3, r4, r5, pc}
   3c4ba:	bf00      	nop
   3c4bc:	20029744 	.word	0x20029744
   3c4c0:	000498fb 	.word	0x000498fb
   3c4c4:	00049921 	.word	0x00049921
   3c4c8:	0004764f 	.word	0x0004764f
   3c4cc:	00049936 	.word	0x00049936
   3c4d0:	0004d33b 	.word	0x0004d33b
   3c4d4:	0004d310 	.word	0x0004d310
   3c4d8:	0004a297 	.word	0x0004a297
   3c4dc:	2002970c 	.word	0x2002970c
   3c4e0:	0004d34d 	.word	0x0004d34d
   3c4e4:	0004994e 	.word	0x0004994e
   3c4e8:	00049965 	.word	0x00049965

0003c4ec <z_priq_dumb_remove>:
}

void z_priq_dumb_remove(sys_dlist_t *pq, struct k_thread *thread)
{
#if defined(CONFIG_SWAP_NONATOMIC) && defined(CONFIG_SCHED_DUMB)
	if (pq == &_kernel.ready_q.runq && thread == _current &&
   3c4ec:	4b11      	ldr	r3, [pc, #68]	; (3c534 <z_priq_dumb_remove+0x48>)
{
   3c4ee:	b510      	push	{r4, lr}
	if (pq == &_kernel.ready_q.runq && thread == _current &&
   3c4f0:	f103 0228 	add.w	r2, r3, #40	; 0x28
   3c4f4:	4282      	cmp	r2, r0
{
   3c4f6:	460c      	mov	r4, r1
	if (pq == &_kernel.ready_q.runq && thread == _current &&
   3c4f8:	d105      	bne.n	3c506 <z_priq_dumb_remove+0x1a>
   3c4fa:	689b      	ldr	r3, [r3, #8]
   3c4fc:	428b      	cmp	r3, r1
   3c4fe:	d102      	bne.n	3c506 <z_priq_dumb_remove+0x1a>
   3c500:	7b4b      	ldrb	r3, [r1, #13]
   3c502:	06db      	lsls	r3, r3, #27
   3c504:	d115      	bne.n	3c532 <z_priq_dumb_remove+0x46>
	    z_is_thread_prevented_from_running(thread)) {
		return;
	}
#endif

	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   3c506:	4b0c      	ldr	r3, [pc, #48]	; (3c538 <z_priq_dumb_remove+0x4c>)
   3c508:	429c      	cmp	r4, r3
   3c50a:	d10b      	bne.n	3c524 <z_priq_dumb_remove+0x38>
   3c50c:	490b      	ldr	r1, [pc, #44]	; (3c53c <z_priq_dumb_remove+0x50>)
   3c50e:	480c      	ldr	r0, [pc, #48]	; (3c540 <z_priq_dumb_remove+0x54>)
   3c510:	f44f 7346 	mov.w	r3, #792	; 0x318
   3c514:	4a0b      	ldr	r2, [pc, #44]	; (3c544 <z_priq_dumb_remove+0x58>)
   3c516:	f004 f874 	bl	40602 <printk>
   3c51a:	f44f 7146 	mov.w	r1, #792	; 0x318
   3c51e:	4809      	ldr	r0, [pc, #36]	; (3c544 <z_priq_dumb_remove+0x58>)
   3c520:	f004 f932 	bl	40788 <assert_post_action>
	node->prev->next = node->next;
   3c524:	e9d4 3200 	ldrd	r3, r2, [r4]
   3c528:	6013      	str	r3, [r2, #0]
	node->next->prev = node->prev;
   3c52a:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   3c52c:	2300      	movs	r3, #0
	node->prev = NULL;
   3c52e:	e9c4 3300 	strd	r3, r3, [r4]

	sys_dlist_remove(&thread->base.qnode_dlist);
}
   3c532:	bd10      	pop	{r4, pc}
   3c534:	2002970c 	.word	0x2002970c
   3c538:	2002553c 	.word	0x2002553c
   3c53c:	0004d42b 	.word	0x0004d42b
   3c540:	0004764f 	.word	0x0004764f
   3c544:	0004d3d3 	.word	0x0004d3d3

0003c548 <z_unpend_thread>:
{
   3c548:	b538      	push	{r3, r4, r5, lr}
   3c54a:	4604      	mov	r4, r0
	__asm__ volatile(
   3c54c:	f04f 0320 	mov.w	r3, #32
   3c550:	f3ef 8511 	mrs	r5, BASEPRI
   3c554:	f383 8811 	msr	BASEPRI, r3
   3c558:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   3c55c:	481e      	ldr	r0, [pc, #120]	; (3c5d8 <z_unpend_thread+0x90>)
   3c55e:	f001 f88f 	bl	3d680 <z_spin_lock_valid>
   3c562:	b968      	cbnz	r0, 3c580 <z_unpend_thread+0x38>
   3c564:	234a      	movs	r3, #74	; 0x4a
   3c566:	4a1d      	ldr	r2, [pc, #116]	; (3c5dc <z_unpend_thread+0x94>)
   3c568:	491d      	ldr	r1, [pc, #116]	; (3c5e0 <z_unpend_thread+0x98>)
   3c56a:	481e      	ldr	r0, [pc, #120]	; (3c5e4 <z_unpend_thread+0x9c>)
   3c56c:	f004 f849 	bl	40602 <printk>
   3c570:	4919      	ldr	r1, [pc, #100]	; (3c5d8 <z_unpend_thread+0x90>)
   3c572:	481d      	ldr	r0, [pc, #116]	; (3c5e8 <z_unpend_thread+0xa0>)
   3c574:	f004 f845 	bl	40602 <printk>
   3c578:	214a      	movs	r1, #74	; 0x4a
   3c57a:	4818      	ldr	r0, [pc, #96]	; (3c5dc <z_unpend_thread+0x94>)
   3c57c:	f004 f904 	bl	40788 <assert_post_action>
	z_spin_lock_set_owner(l);
   3c580:	4815      	ldr	r0, [pc, #84]	; (3c5d8 <z_unpend_thread+0x90>)
   3c582:	f001 f89b 	bl	3d6bc <z_spin_lock_set_owner>
		_priq_wait_remove(&pended_on(thread)->waitq, thread);
   3c586:	f104 0008 	add.w	r0, r4, #8
   3c58a:	f7ff fdd1 	bl	3c130 <pended_on.isra.17>
   3c58e:	4621      	mov	r1, r4
   3c590:	f7ff ffac 	bl	3c4ec <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
   3c594:	7b63      	ldrb	r3, [r4, #13]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   3c596:	4810      	ldr	r0, [pc, #64]	; (3c5d8 <z_unpend_thread+0x90>)
   3c598:	f023 0302 	bic.w	r3, r3, #2
   3c59c:	7363      	strb	r3, [r4, #13]
   3c59e:	f001 f87d 	bl	3d69c <z_spin_unlock_valid>
   3c5a2:	b968      	cbnz	r0, 3c5c0 <z_unpend_thread+0x78>
   3c5a4:	235d      	movs	r3, #93	; 0x5d
   3c5a6:	4a0d      	ldr	r2, [pc, #52]	; (3c5dc <z_unpend_thread+0x94>)
   3c5a8:	4910      	ldr	r1, [pc, #64]	; (3c5ec <z_unpend_thread+0xa4>)
   3c5aa:	480e      	ldr	r0, [pc, #56]	; (3c5e4 <z_unpend_thread+0x9c>)
   3c5ac:	f004 f829 	bl	40602 <printk>
   3c5b0:	4909      	ldr	r1, [pc, #36]	; (3c5d8 <z_unpend_thread+0x90>)
   3c5b2:	480f      	ldr	r0, [pc, #60]	; (3c5f0 <z_unpend_thread+0xa8>)
   3c5b4:	f004 f825 	bl	40602 <printk>
   3c5b8:	215d      	movs	r1, #93	; 0x5d
   3c5ba:	4808      	ldr	r0, [pc, #32]	; (3c5dc <z_unpend_thread+0x94>)
   3c5bc:	f004 f8e4 	bl	40788 <assert_post_action>
	__asm__ volatile(
   3c5c0:	f385 8811 	msr	BASEPRI, r5
   3c5c4:	f3bf 8f6f 	isb	sy
	thread->base.pended_on = NULL;
   3c5c8:	2300      	movs	r3, #0
	z_add_timeout(&th->base.timeout, z_thread_timeout, ticks);
}

static inline int z_abort_thread_timeout(struct k_thread *thread)
{
	return z_abort_timeout(&thread->base.timeout);
   3c5ca:	f104 0018 	add.w	r0, r4, #24
   3c5ce:	60a3      	str	r3, [r4, #8]
}
   3c5d0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   3c5d4:	f001 bbe4 	b.w	3dda0 <z_abort_timeout>
   3c5d8:	20029744 	.word	0x20029744
   3c5dc:	000498fb 	.word	0x000498fb
   3c5e0:	00049921 	.word	0x00049921
   3c5e4:	0004764f 	.word	0x0004764f
   3c5e8:	00049936 	.word	0x00049936
   3c5ec:	0004994e 	.word	0x0004994e
   3c5f0:	00049965 	.word	0x00049965

0003c5f4 <update_cache>:
{
   3c5f4:	b538      	push	{r3, r4, r5, lr}
	struct k_thread *thread = _priq_run_best(&_kernel.ready_q.runq);
   3c5f6:	4c15      	ldr	r4, [pc, #84]	; (3c64c <update_cache+0x58>)
{
   3c5f8:	4602      	mov	r2, r0
	struct k_thread *thread = _priq_run_best(&_kernel.ready_q.runq);
   3c5fa:	f104 0028 	add.w	r0, r4, #40	; 0x28
   3c5fe:	f008 fab1 	bl	44b64 <z_priq_dumb_best>
	return thread ? thread : _current_cpu->idle_thread;
   3c602:	4605      	mov	r5, r0
   3c604:	b900      	cbnz	r0, 3c608 <update_cache+0x14>
   3c606:	68e5      	ldr	r5, [r4, #12]
	if (preempt_ok != 0) {
   3c608:	b9ca      	cbnz	r2, 3c63e <update_cache+0x4a>
	__ASSERT(_current != NULL, "");
   3c60a:	68a3      	ldr	r3, [r4, #8]
   3c60c:	b963      	cbnz	r3, 3c628 <update_cache+0x34>
   3c60e:	4910      	ldr	r1, [pc, #64]	; (3c650 <update_cache+0x5c>)
   3c610:	237e      	movs	r3, #126	; 0x7e
   3c612:	4a10      	ldr	r2, [pc, #64]	; (3c654 <update_cache+0x60>)
   3c614:	4810      	ldr	r0, [pc, #64]	; (3c658 <update_cache+0x64>)
   3c616:	f003 fff4 	bl	40602 <printk>
   3c61a:	4810      	ldr	r0, [pc, #64]	; (3c65c <update_cache+0x68>)
   3c61c:	f003 fff1 	bl	40602 <printk>
   3c620:	217e      	movs	r1, #126	; 0x7e
   3c622:	480c      	ldr	r0, [pc, #48]	; (3c654 <update_cache+0x60>)
   3c624:	f004 f8b0 	bl	40788 <assert_post_action>
	if (z_is_thread_prevented_from_running(_current)) {
   3c628:	68a3      	ldr	r3, [r4, #8]
   3c62a:	7b5a      	ldrb	r2, [r3, #13]
   3c62c:	06d2      	lsls	r2, r2, #27
   3c62e:	d106      	bne.n	3c63e <update_cache+0x4a>
	if (IS_ENABLED(CONFIG_SWAP_NONATOMIC)
   3c630:	69aa      	ldr	r2, [r5, #24]
   3c632:	b922      	cbnz	r2, 3c63e <update_cache+0x4a>
	if (is_preempt(_current) || is_metairq(thread)) {
   3c634:	89da      	ldrh	r2, [r3, #14]
   3c636:	2a7f      	cmp	r2, #127	; 0x7f
   3c638:	d901      	bls.n	3c63e <update_cache+0x4a>
		_kernel.ready_q.cache = _current;
   3c63a:	6263      	str	r3, [r4, #36]	; 0x24
}
   3c63c:	bd38      	pop	{r3, r4, r5, pc}
		if (thread != _current) {
   3c63e:	68a3      	ldr	r3, [r4, #8]
   3c640:	42ab      	cmp	r3, r5
   3c642:	d001      	beq.n	3c648 <update_cache+0x54>
			z_reset_time_slice();
   3c644:	f7ff fd8c 	bl	3c160 <z_reset_time_slice>
		_kernel.ready_q.cache = thread;
   3c648:	6265      	str	r5, [r4, #36]	; 0x24
}
   3c64a:	e7f7      	b.n	3c63c <update_cache+0x48>
   3c64c:	2002970c 	.word	0x2002970c
   3c650:	0004d40c 	.word	0x0004d40c
   3c654:	0004d3d3 	.word	0x0004d3d3
   3c658:	0004764f 	.word	0x0004764f
   3c65c:	0004a297 	.word	0x0004a297

0003c660 <k_sched_unlock>:
{
   3c660:	b538      	push	{r3, r4, r5, lr}
	__ASSERT(_current->base.sched_locked != 0, "");
   3c662:	4c31      	ldr	r4, [pc, #196]	; (3c728 <k_sched_unlock+0xc8>)
   3c664:	68a2      	ldr	r2, [r4, #8]
   3c666:	7bd2      	ldrb	r2, [r2, #15]
   3c668:	b972      	cbnz	r2, 3c688 <k_sched_unlock+0x28>
   3c66a:	4930      	ldr	r1, [pc, #192]	; (3c72c <k_sched_unlock+0xcc>)
   3c66c:	f240 23ad 	movw	r3, #685	; 0x2ad
   3c670:	4a2f      	ldr	r2, [pc, #188]	; (3c730 <k_sched_unlock+0xd0>)
   3c672:	4830      	ldr	r0, [pc, #192]	; (3c734 <k_sched_unlock+0xd4>)
   3c674:	f003 ffc5 	bl	40602 <printk>
   3c678:	482f      	ldr	r0, [pc, #188]	; (3c738 <k_sched_unlock+0xd8>)
   3c67a:	f003 ffc2 	bl	40602 <printk>
   3c67e:	f240 21ad 	movw	r1, #685	; 0x2ad
   3c682:	482b      	ldr	r0, [pc, #172]	; (3c730 <k_sched_unlock+0xd0>)
   3c684:	f004 f880 	bl	40788 <assert_post_action>
   3c688:	f3ef 8305 	mrs	r3, IPSR
	__ASSERT(!arch_is_in_isr(), "");
   3c68c:	b173      	cbz	r3, 3c6ac <k_sched_unlock+0x4c>
   3c68e:	492b      	ldr	r1, [pc, #172]	; (3c73c <k_sched_unlock+0xdc>)
   3c690:	f240 23ae 	movw	r3, #686	; 0x2ae
   3c694:	4a26      	ldr	r2, [pc, #152]	; (3c730 <k_sched_unlock+0xd0>)
   3c696:	4827      	ldr	r0, [pc, #156]	; (3c734 <k_sched_unlock+0xd4>)
   3c698:	f003 ffb3 	bl	40602 <printk>
   3c69c:	4826      	ldr	r0, [pc, #152]	; (3c738 <k_sched_unlock+0xd8>)
   3c69e:	f003 ffb0 	bl	40602 <printk>
   3c6a2:	f240 21ae 	movw	r1, #686	; 0x2ae
   3c6a6:	4822      	ldr	r0, [pc, #136]	; (3c730 <k_sched_unlock+0xd0>)
   3c6a8:	f004 f86e 	bl	40788 <assert_post_action>
	__asm__ volatile(
   3c6ac:	f04f 0320 	mov.w	r3, #32
   3c6b0:	f3ef 8511 	mrs	r5, BASEPRI
   3c6b4:	f383 8811 	msr	BASEPRI, r3
   3c6b8:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   3c6bc:	4820      	ldr	r0, [pc, #128]	; (3c740 <k_sched_unlock+0xe0>)
   3c6be:	f000 ffdf 	bl	3d680 <z_spin_lock_valid>
   3c6c2:	b968      	cbnz	r0, 3c6e0 <k_sched_unlock+0x80>
   3c6c4:	234a      	movs	r3, #74	; 0x4a
   3c6c6:	4a1f      	ldr	r2, [pc, #124]	; (3c744 <k_sched_unlock+0xe4>)
   3c6c8:	491f      	ldr	r1, [pc, #124]	; (3c748 <k_sched_unlock+0xe8>)
   3c6ca:	481a      	ldr	r0, [pc, #104]	; (3c734 <k_sched_unlock+0xd4>)
   3c6cc:	f003 ff99 	bl	40602 <printk>
   3c6d0:	491b      	ldr	r1, [pc, #108]	; (3c740 <k_sched_unlock+0xe0>)
   3c6d2:	481e      	ldr	r0, [pc, #120]	; (3c74c <k_sched_unlock+0xec>)
   3c6d4:	f003 ff95 	bl	40602 <printk>
   3c6d8:	214a      	movs	r1, #74	; 0x4a
   3c6da:	481a      	ldr	r0, [pc, #104]	; (3c744 <k_sched_unlock+0xe4>)
   3c6dc:	f004 f854 	bl	40788 <assert_post_action>
	z_spin_lock_set_owner(l);
   3c6e0:	4817      	ldr	r0, [pc, #92]	; (3c740 <k_sched_unlock+0xe0>)
   3c6e2:	f000 ffeb 	bl	3d6bc <z_spin_lock_set_owner>
		++_current->base.sched_locked;
   3c6e6:	68a2      	ldr	r2, [r4, #8]
		update_cache(0);
   3c6e8:	2000      	movs	r0, #0
		++_current->base.sched_locked;
   3c6ea:	7bd3      	ldrb	r3, [r2, #15]
   3c6ec:	3301      	adds	r3, #1
   3c6ee:	73d3      	strb	r3, [r2, #15]
		update_cache(0);
   3c6f0:	f7ff ff80 	bl	3c5f4 <update_cache>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   3c6f4:	4812      	ldr	r0, [pc, #72]	; (3c740 <k_sched_unlock+0xe0>)
   3c6f6:	f000 ffd1 	bl	3d69c <z_spin_unlock_valid>
   3c6fa:	b968      	cbnz	r0, 3c718 <k_sched_unlock+0xb8>
   3c6fc:	235d      	movs	r3, #93	; 0x5d
   3c6fe:	4a11      	ldr	r2, [pc, #68]	; (3c744 <k_sched_unlock+0xe4>)
   3c700:	4913      	ldr	r1, [pc, #76]	; (3c750 <k_sched_unlock+0xf0>)
   3c702:	480c      	ldr	r0, [pc, #48]	; (3c734 <k_sched_unlock+0xd4>)
   3c704:	f003 ff7d 	bl	40602 <printk>
   3c708:	490d      	ldr	r1, [pc, #52]	; (3c740 <k_sched_unlock+0xe0>)
   3c70a:	4812      	ldr	r0, [pc, #72]	; (3c754 <k_sched_unlock+0xf4>)
   3c70c:	f003 ff79 	bl	40602 <printk>
   3c710:	215d      	movs	r1, #93	; 0x5d
   3c712:	480c      	ldr	r0, [pc, #48]	; (3c744 <k_sched_unlock+0xe4>)
   3c714:	f004 f838 	bl	40788 <assert_post_action>
	__asm__ volatile(
   3c718:	f385 8811 	msr	BASEPRI, r5
   3c71c:	f3bf 8f6f 	isb	sy
}
   3c720:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule_unlocked();
   3c724:	f008 ba14 	b.w	44b50 <z_reschedule_unlocked>
   3c728:	2002970c 	.word	0x2002970c
   3c72c:	0004d375 	.word	0x0004d375
   3c730:	0004d3d3 	.word	0x0004d3d3
   3c734:	0004764f 	.word	0x0004764f
   3c738:	0004a297 	.word	0x0004a297
   3c73c:	0004d33b 	.word	0x0004d33b
   3c740:	20029744 	.word	0x20029744
   3c744:	000498fb 	.word	0x000498fb
   3c748:	00049921 	.word	0x00049921
   3c74c:	00049936 	.word	0x00049936
   3c750:	0004994e 	.word	0x0004994e
   3c754:	00049965 	.word	0x00049965

0003c758 <z_add_thread_to_ready_q>:
{
   3c758:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   3c75a:	4604      	mov	r4, r0
	__asm__ volatile(
   3c75c:	f04f 0320 	mov.w	r3, #32
   3c760:	f3ef 8511 	mrs	r5, BASEPRI
   3c764:	f383 8811 	msr	BASEPRI, r3
   3c768:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   3c76c:	482f      	ldr	r0, [pc, #188]	; (3c82c <z_add_thread_to_ready_q+0xd4>)
   3c76e:	f000 ff87 	bl	3d680 <z_spin_lock_valid>
   3c772:	b968      	cbnz	r0, 3c790 <z_add_thread_to_ready_q+0x38>
   3c774:	234a      	movs	r3, #74	; 0x4a
   3c776:	4a2e      	ldr	r2, [pc, #184]	; (3c830 <z_add_thread_to_ready_q+0xd8>)
   3c778:	492e      	ldr	r1, [pc, #184]	; (3c834 <z_add_thread_to_ready_q+0xdc>)
   3c77a:	482f      	ldr	r0, [pc, #188]	; (3c838 <z_add_thread_to_ready_q+0xe0>)
   3c77c:	f003 ff41 	bl	40602 <printk>
   3c780:	492a      	ldr	r1, [pc, #168]	; (3c82c <z_add_thread_to_ready_q+0xd4>)
   3c782:	482e      	ldr	r0, [pc, #184]	; (3c83c <z_add_thread_to_ready_q+0xe4>)
   3c784:	f003 ff3d 	bl	40602 <printk>
   3c788:	214a      	movs	r1, #74	; 0x4a
   3c78a:	4829      	ldr	r0, [pc, #164]	; (3c830 <z_add_thread_to_ready_q+0xd8>)
   3c78c:	f003 fffc 	bl	40788 <assert_post_action>
	z_spin_lock_set_owner(l);
   3c790:	4826      	ldr	r0, [pc, #152]	; (3c82c <z_add_thread_to_ready_q+0xd4>)
   3c792:	f000 ff93 	bl	3d6bc <z_spin_lock_set_owner>
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   3c796:	4b2a      	ldr	r3, [pc, #168]	; (3c840 <z_add_thread_to_ready_q+0xe8>)
   3c798:	429c      	cmp	r4, r3
   3c79a:	d10b      	bne.n	3c7b4 <z_add_thread_to_ready_q+0x5c>
   3c79c:	4929      	ldr	r1, [pc, #164]	; (3c844 <z_add_thread_to_ready_q+0xec>)
   3c79e:	4826      	ldr	r0, [pc, #152]	; (3c838 <z_add_thread_to_ready_q+0xe0>)
   3c7a0:	f240 3302 	movw	r3, #770	; 0x302
   3c7a4:	4a28      	ldr	r2, [pc, #160]	; (3c848 <z_add_thread_to_ready_q+0xf0>)
   3c7a6:	f003 ff2c 	bl	40602 <printk>
   3c7aa:	f240 3102 	movw	r1, #770	; 0x302
   3c7ae:	4826      	ldr	r0, [pc, #152]	; (3c848 <z_add_thread_to_ready_q+0xf0>)
   3c7b0:	f003 ffea 	bl	40788 <assert_post_action>
	return list->head == list;
   3c7b4:	4a25      	ldr	r2, [pc, #148]	; (3c84c <z_add_thread_to_ready_q+0xf4>)
	return sys_dlist_is_empty(list) ? NULL : list->head;
   3c7b6:	f102 0128 	add.w	r1, r2, #40	; 0x28
   3c7ba:	e9d2 300a 	ldrd	r3, r0, [r2, #40]	; 0x28
   3c7be:	428b      	cmp	r3, r1
   3c7c0:	d02e      	beq.n	3c820 <z_add_thread_to_ready_q+0xc8>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   3c7c2:	b36b      	cbz	r3, 3c820 <z_add_thread_to_ready_q+0xc8>
	if (thread_1->base.prio < thread_2->base.prio) {
   3c7c4:	f994 600e 	ldrsb.w	r6, [r4, #14]
   3c7c8:	f993 700e 	ldrsb.w	r7, [r3, #14]
   3c7cc:	42b7      	cmp	r7, r6
   3c7ce:	dd22      	ble.n	3c816 <z_add_thread_to_ready_q+0xbe>
	node->prev = successor->prev;
   3c7d0:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   3c7d2:	e9c4 3200 	strd	r3, r2, [r4]
	successor->prev->next = node;
   3c7d6:	6014      	str	r4, [r2, #0]
	successor->prev = node;
   3c7d8:	605c      	str	r4, [r3, #4]
	thread->base.thread_state |= states;
   3c7da:	7b63      	ldrb	r3, [r4, #13]
		update_cache(0);
   3c7dc:	2000      	movs	r0, #0
   3c7de:	f063 037f 	orn	r3, r3, #127	; 0x7f
   3c7e2:	7363      	strb	r3, [r4, #13]
   3c7e4:	f7ff ff06 	bl	3c5f4 <update_cache>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   3c7e8:	4810      	ldr	r0, [pc, #64]	; (3c82c <z_add_thread_to_ready_q+0xd4>)
   3c7ea:	f000 ff57 	bl	3d69c <z_spin_unlock_valid>
   3c7ee:	b968      	cbnz	r0, 3c80c <z_add_thread_to_ready_q+0xb4>
   3c7f0:	235d      	movs	r3, #93	; 0x5d
   3c7f2:	4a0f      	ldr	r2, [pc, #60]	; (3c830 <z_add_thread_to_ready_q+0xd8>)
   3c7f4:	4916      	ldr	r1, [pc, #88]	; (3c850 <z_add_thread_to_ready_q+0xf8>)
   3c7f6:	4810      	ldr	r0, [pc, #64]	; (3c838 <z_add_thread_to_ready_q+0xe0>)
   3c7f8:	f003 ff03 	bl	40602 <printk>
   3c7fc:	490b      	ldr	r1, [pc, #44]	; (3c82c <z_add_thread_to_ready_q+0xd4>)
   3c7fe:	4815      	ldr	r0, [pc, #84]	; (3c854 <z_add_thread_to_ready_q+0xfc>)
   3c800:	f003 feff 	bl	40602 <printk>
   3c804:	215d      	movs	r1, #93	; 0x5d
   3c806:	480a      	ldr	r0, [pc, #40]	; (3c830 <z_add_thread_to_ready_q+0xd8>)
   3c808:	f003 ffbe 	bl	40788 <assert_post_action>
	__asm__ volatile(
   3c80c:	f385 8811 	msr	BASEPRI, r5
   3c810:	f3bf 8f6f 	isb	sy
}
   3c814:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return (node == list->tail) ? NULL : node->next;
   3c816:	4298      	cmp	r0, r3
   3c818:	d002      	beq.n	3c820 <z_add_thread_to_ready_q+0xc8>
   3c81a:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   3c81c:	2b00      	cmp	r3, #0
   3c81e:	d1d3      	bne.n	3c7c8 <z_add_thread_to_ready_q+0x70>
	node->prev = list->tail;
   3c820:	e9c4 1000 	strd	r1, r0, [r4]
	list->tail->next = node;
   3c824:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
   3c826:	601c      	str	r4, [r3, #0]
	list->tail = node;
   3c828:	62d4      	str	r4, [r2, #44]	; 0x2c
   3c82a:	e7d6      	b.n	3c7da <z_add_thread_to_ready_q+0x82>
   3c82c:	20029744 	.word	0x20029744
   3c830:	000498fb 	.word	0x000498fb
   3c834:	00049921 	.word	0x00049921
   3c838:	0004764f 	.word	0x0004764f
   3c83c:	00049936 	.word	0x00049936
   3c840:	2002553c 	.word	0x2002553c
   3c844:	0004d42b 	.word	0x0004d42b
   3c848:	0004d3d3 	.word	0x0004d3d3
   3c84c:	2002970c 	.word	0x2002970c
   3c850:	0004994e 	.word	0x0004994e
   3c854:	00049965 	.word	0x00049965

0003c858 <z_thread_timeout>:
	if (thread->base.pended_on != NULL) {
   3c858:	f850 3c10 	ldr.w	r3, [r0, #-16]
{
   3c85c:	b570      	push	{r4, r5, r6, lr}
   3c85e:	4604      	mov	r4, r0
	struct k_thread *thread = CONTAINER_OF(timeout,
   3c860:	f1a0 0518 	sub.w	r5, r0, #24
	if (thread->base.pended_on != NULL) {
   3c864:	2b00      	cmp	r3, #0
   3c866:	d042      	beq.n	3c8ee <z_thread_timeout+0x96>
	__asm__ volatile(
   3c868:	f04f 0320 	mov.w	r3, #32
   3c86c:	f3ef 8611 	mrs	r6, BASEPRI
   3c870:	f383 8811 	msr	BASEPRI, r3
   3c874:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   3c878:	4825      	ldr	r0, [pc, #148]	; (3c910 <z_thread_timeout+0xb8>)
   3c87a:	f000 ff01 	bl	3d680 <z_spin_lock_valid>
   3c87e:	b968      	cbnz	r0, 3c89c <z_thread_timeout+0x44>
   3c880:	234a      	movs	r3, #74	; 0x4a
   3c882:	4a24      	ldr	r2, [pc, #144]	; (3c914 <z_thread_timeout+0xbc>)
   3c884:	4924      	ldr	r1, [pc, #144]	; (3c918 <z_thread_timeout+0xc0>)
   3c886:	4825      	ldr	r0, [pc, #148]	; (3c91c <z_thread_timeout+0xc4>)
   3c888:	f003 febb 	bl	40602 <printk>
   3c88c:	4920      	ldr	r1, [pc, #128]	; (3c910 <z_thread_timeout+0xb8>)
   3c88e:	4824      	ldr	r0, [pc, #144]	; (3c920 <z_thread_timeout+0xc8>)
   3c890:	f003 feb7 	bl	40602 <printk>
   3c894:	214a      	movs	r1, #74	; 0x4a
   3c896:	481f      	ldr	r0, [pc, #124]	; (3c914 <z_thread_timeout+0xbc>)
   3c898:	f003 ff76 	bl	40788 <assert_post_action>
	z_spin_lock_set_owner(l);
   3c89c:	481c      	ldr	r0, [pc, #112]	; (3c910 <z_thread_timeout+0xb8>)
   3c89e:	f000 ff0d 	bl	3d6bc <z_spin_lock_set_owner>
		_priq_wait_remove(&pended_on(thread)->waitq, thread);
   3c8a2:	f1a4 0010 	sub.w	r0, r4, #16
   3c8a6:	f7ff fc43 	bl	3c130 <pended_on.isra.17>
   3c8aa:	4629      	mov	r1, r5
   3c8ac:	f7ff fe1e 	bl	3c4ec <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
   3c8b0:	f814 3c0b 	ldrb.w	r3, [r4, #-11]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   3c8b4:	4816      	ldr	r0, [pc, #88]	; (3c910 <z_thread_timeout+0xb8>)
   3c8b6:	f023 0302 	bic.w	r3, r3, #2
   3c8ba:	f804 3c0b 	strb.w	r3, [r4, #-11]
   3c8be:	f000 feed 	bl	3d69c <z_spin_unlock_valid>
   3c8c2:	b968      	cbnz	r0, 3c8e0 <z_thread_timeout+0x88>
   3c8c4:	235d      	movs	r3, #93	; 0x5d
   3c8c6:	4a13      	ldr	r2, [pc, #76]	; (3c914 <z_thread_timeout+0xbc>)
   3c8c8:	4916      	ldr	r1, [pc, #88]	; (3c924 <z_thread_timeout+0xcc>)
   3c8ca:	4814      	ldr	r0, [pc, #80]	; (3c91c <z_thread_timeout+0xc4>)
   3c8cc:	f003 fe99 	bl	40602 <printk>
   3c8d0:	490f      	ldr	r1, [pc, #60]	; (3c910 <z_thread_timeout+0xb8>)
   3c8d2:	4815      	ldr	r0, [pc, #84]	; (3c928 <z_thread_timeout+0xd0>)
   3c8d4:	f003 fe95 	bl	40602 <printk>
   3c8d8:	215d      	movs	r1, #93	; 0x5d
   3c8da:	480e      	ldr	r0, [pc, #56]	; (3c914 <z_thread_timeout+0xbc>)
   3c8dc:	f003 ff54 	bl	40788 <assert_post_action>
	__asm__ volatile(
   3c8e0:	f386 8811 	msr	BASEPRI, r6
   3c8e4:	f3bf 8f6f 	isb	sy
	thread->base.pended_on = NULL;
   3c8e8:	2300      	movs	r3, #0
   3c8ea:	f844 3c10 	str.w	r3, [r4, #-16]
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
   3c8ee:	f814 3c0b 	ldrb.w	r3, [r4, #-11]
	if (z_is_thread_ready(thread)) {
   3c8f2:	4628      	mov	r0, r5
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
   3c8f4:	f023 0314 	bic.w	r3, r3, #20
   3c8f8:	f804 3c0b 	strb.w	r3, [r4, #-11]
	if (z_is_thread_ready(thread)) {
   3c8fc:	f008 f90a 	bl	44b14 <z_is_thread_ready>
   3c900:	b120      	cbz	r0, 3c90c <z_thread_timeout+0xb4>
		z_add_thread_to_ready_q(thread);
   3c902:	4628      	mov	r0, r5
}
   3c904:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   3c908:	f7ff bf26 	b.w	3c758 <z_add_thread_to_ready_q>
   3c90c:	bd70      	pop	{r4, r5, r6, pc}
   3c90e:	bf00      	nop
   3c910:	20029744 	.word	0x20029744
   3c914:	000498fb 	.word	0x000498fb
   3c918:	00049921 	.word	0x00049921
   3c91c:	0004764f 	.word	0x0004764f
   3c920:	00049936 	.word	0x00049936
   3c924:	0004994e 	.word	0x0004994e
   3c928:	00049965 	.word	0x00049965

0003c92c <z_move_thread_to_end_of_prio_q>:
{
   3c92c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   3c92e:	4604      	mov	r4, r0
	__asm__ volatile(
   3c930:	f04f 0320 	mov.w	r3, #32
   3c934:	f3ef 8511 	mrs	r5, BASEPRI
   3c938:	f383 8811 	msr	BASEPRI, r3
   3c93c:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   3c940:	4835      	ldr	r0, [pc, #212]	; (3ca18 <z_move_thread_to_end_of_prio_q+0xec>)
   3c942:	f000 fe9d 	bl	3d680 <z_spin_lock_valid>
   3c946:	b968      	cbnz	r0, 3c964 <z_move_thread_to_end_of_prio_q+0x38>
   3c948:	234a      	movs	r3, #74	; 0x4a
   3c94a:	4a34      	ldr	r2, [pc, #208]	; (3ca1c <z_move_thread_to_end_of_prio_q+0xf0>)
   3c94c:	4934      	ldr	r1, [pc, #208]	; (3ca20 <z_move_thread_to_end_of_prio_q+0xf4>)
   3c94e:	4835      	ldr	r0, [pc, #212]	; (3ca24 <z_move_thread_to_end_of_prio_q+0xf8>)
   3c950:	f003 fe57 	bl	40602 <printk>
   3c954:	4930      	ldr	r1, [pc, #192]	; (3ca18 <z_move_thread_to_end_of_prio_q+0xec>)
   3c956:	4834      	ldr	r0, [pc, #208]	; (3ca28 <z_move_thread_to_end_of_prio_q+0xfc>)
   3c958:	f003 fe53 	bl	40602 <printk>
   3c95c:	214a      	movs	r1, #74	; 0x4a
   3c95e:	482f      	ldr	r0, [pc, #188]	; (3ca1c <z_move_thread_to_end_of_prio_q+0xf0>)
   3c960:	f003 ff12 	bl	40788 <assert_post_action>
	z_spin_lock_set_owner(l);
   3c964:	482c      	ldr	r0, [pc, #176]	; (3ca18 <z_move_thread_to_end_of_prio_q+0xec>)
   3c966:	f000 fea9 	bl	3d6bc <z_spin_lock_set_owner>
		if (z_is_thread_queued(thread)) {
   3c96a:	f994 300d 	ldrsb.w	r3, [r4, #13]
   3c96e:	2b00      	cmp	r3, #0
   3c970:	da03      	bge.n	3c97a <z_move_thread_to_end_of_prio_q+0x4e>
			_priq_run_remove(&_kernel.ready_q.runq, thread);
   3c972:	4621      	mov	r1, r4
   3c974:	482d      	ldr	r0, [pc, #180]	; (3ca2c <z_move_thread_to_end_of_prio_q+0x100>)
   3c976:	f7ff fdb9 	bl	3c4ec <z_priq_dumb_remove>
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   3c97a:	4b2d      	ldr	r3, [pc, #180]	; (3ca30 <z_move_thread_to_end_of_prio_q+0x104>)
   3c97c:	429c      	cmp	r4, r3
   3c97e:	d10b      	bne.n	3c998 <z_move_thread_to_end_of_prio_q+0x6c>
   3c980:	492c      	ldr	r1, [pc, #176]	; (3ca34 <z_move_thread_to_end_of_prio_q+0x108>)
   3c982:	4828      	ldr	r0, [pc, #160]	; (3ca24 <z_move_thread_to_end_of_prio_q+0xf8>)
   3c984:	f240 3302 	movw	r3, #770	; 0x302
   3c988:	4a2b      	ldr	r2, [pc, #172]	; (3ca38 <z_move_thread_to_end_of_prio_q+0x10c>)
   3c98a:	f003 fe3a 	bl	40602 <printk>
   3c98e:	f240 3102 	movw	r1, #770	; 0x302
   3c992:	4829      	ldr	r0, [pc, #164]	; (3ca38 <z_move_thread_to_end_of_prio_q+0x10c>)
   3c994:	f003 fef8 	bl	40788 <assert_post_action>
	return list->head == list;
   3c998:	4a28      	ldr	r2, [pc, #160]	; (3ca3c <z_move_thread_to_end_of_prio_q+0x110>)
	return sys_dlist_is_empty(list) ? NULL : list->head;
   3c99a:	f102 0128 	add.w	r1, r2, #40	; 0x28
   3c99e:	e9d2 300a 	ldrd	r3, r0, [r2, #40]	; 0x28
   3c9a2:	428b      	cmp	r3, r1
   3c9a4:	d032      	beq.n	3ca0c <z_move_thread_to_end_of_prio_q+0xe0>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   3c9a6:	2b00      	cmp	r3, #0
   3c9a8:	d030      	beq.n	3ca0c <z_move_thread_to_end_of_prio_q+0xe0>
	if (thread_1->base.prio < thread_2->base.prio) {
   3c9aa:	f994 600e 	ldrsb.w	r6, [r4, #14]
   3c9ae:	f993 700e 	ldrsb.w	r7, [r3, #14]
   3c9b2:	42b7      	cmp	r7, r6
   3c9b4:	dd25      	ble.n	3ca02 <z_move_thread_to_end_of_prio_q+0xd6>
	node->prev = successor->prev;
   3c9b6:	6859      	ldr	r1, [r3, #4]
	node->next = successor;
   3c9b8:	e9c4 3100 	strd	r3, r1, [r4]
	successor->prev->next = node;
   3c9bc:	600c      	str	r4, [r1, #0]
	successor->prev = node;
   3c9be:	605c      	str	r4, [r3, #4]
	thread->base.thread_state |= states;
   3c9c0:	7b63      	ldrb	r3, [r4, #13]
		update_cache(thread == _current);
   3c9c2:	6890      	ldr	r0, [r2, #8]
   3c9c4:	f063 037f 	orn	r3, r3, #127	; 0x7f
   3c9c8:	7363      	strb	r3, [r4, #13]
   3c9ca:	1b03      	subs	r3, r0, r4
   3c9cc:	4258      	negs	r0, r3
   3c9ce:	4158      	adcs	r0, r3
   3c9d0:	f7ff fe10 	bl	3c5f4 <update_cache>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   3c9d4:	4810      	ldr	r0, [pc, #64]	; (3ca18 <z_move_thread_to_end_of_prio_q+0xec>)
   3c9d6:	f000 fe61 	bl	3d69c <z_spin_unlock_valid>
   3c9da:	b968      	cbnz	r0, 3c9f8 <z_move_thread_to_end_of_prio_q+0xcc>
   3c9dc:	235d      	movs	r3, #93	; 0x5d
   3c9de:	4a0f      	ldr	r2, [pc, #60]	; (3ca1c <z_move_thread_to_end_of_prio_q+0xf0>)
   3c9e0:	4917      	ldr	r1, [pc, #92]	; (3ca40 <z_move_thread_to_end_of_prio_q+0x114>)
   3c9e2:	4810      	ldr	r0, [pc, #64]	; (3ca24 <z_move_thread_to_end_of_prio_q+0xf8>)
   3c9e4:	f003 fe0d 	bl	40602 <printk>
   3c9e8:	490b      	ldr	r1, [pc, #44]	; (3ca18 <z_move_thread_to_end_of_prio_q+0xec>)
   3c9ea:	4816      	ldr	r0, [pc, #88]	; (3ca44 <z_move_thread_to_end_of_prio_q+0x118>)
   3c9ec:	f003 fe09 	bl	40602 <printk>
   3c9f0:	215d      	movs	r1, #93	; 0x5d
   3c9f2:	480a      	ldr	r0, [pc, #40]	; (3ca1c <z_move_thread_to_end_of_prio_q+0xf0>)
   3c9f4:	f003 fec8 	bl	40788 <assert_post_action>
	__asm__ volatile(
   3c9f8:	f385 8811 	msr	BASEPRI, r5
   3c9fc:	f3bf 8f6f 	isb	sy
}
   3ca00:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return (node == list->tail) ? NULL : node->next;
   3ca02:	4298      	cmp	r0, r3
   3ca04:	d002      	beq.n	3ca0c <z_move_thread_to_end_of_prio_q+0xe0>
   3ca06:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   3ca08:	2b00      	cmp	r3, #0
   3ca0a:	d1d0      	bne.n	3c9ae <z_move_thread_to_end_of_prio_q+0x82>
	node->prev = list->tail;
   3ca0c:	e9c4 1000 	strd	r1, r0, [r4]
	list->tail->next = node;
   3ca10:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
   3ca12:	601c      	str	r4, [r3, #0]
	list->tail = node;
   3ca14:	62d4      	str	r4, [r2, #44]	; 0x2c
   3ca16:	e7d3      	b.n	3c9c0 <z_move_thread_to_end_of_prio_q+0x94>
   3ca18:	20029744 	.word	0x20029744
   3ca1c:	000498fb 	.word	0x000498fb
   3ca20:	00049921 	.word	0x00049921
   3ca24:	0004764f 	.word	0x0004764f
   3ca28:	00049936 	.word	0x00049936
   3ca2c:	20029734 	.word	0x20029734
   3ca30:	2002553c 	.word	0x2002553c
   3ca34:	0004d42b 	.word	0x0004d42b
   3ca38:	0004d3d3 	.word	0x0004d3d3
   3ca3c:	2002970c 	.word	0x2002970c
   3ca40:	0004994e 	.word	0x0004994e
   3ca44:	00049965 	.word	0x00049965

0003ca48 <z_time_slice>:
	if (pending_current == _current) {
   3ca48:	4a15      	ldr	r2, [pc, #84]	; (3caa0 <z_time_slice+0x58>)
   3ca4a:	4916      	ldr	r1, [pc, #88]	; (3caa4 <z_time_slice+0x5c>)
{
   3ca4c:	b538      	push	{r3, r4, r5, lr}
	if (pending_current == _current) {
   3ca4e:	680c      	ldr	r4, [r1, #0]
   3ca50:	6893      	ldr	r3, [r2, #8]
   3ca52:	42a3      	cmp	r3, r4
   3ca54:	4614      	mov	r4, r2
   3ca56:	d103      	bne.n	3ca60 <z_time_slice+0x18>
}
   3ca58:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
			z_reset_time_slice();
   3ca5c:	f7ff bb80 	b.w	3c160 <z_reset_time_slice>
	pending_current = NULL;
   3ca60:	2500      	movs	r5, #0
   3ca62:	600d      	str	r5, [r1, #0]
	if (slice_time && sliceable(_current)) {
   3ca64:	4910      	ldr	r1, [pc, #64]	; (3caa8 <z_time_slice+0x60>)
   3ca66:	6809      	ldr	r1, [r1, #0]
   3ca68:	b1b9      	cbz	r1, 3ca9a <z_time_slice+0x52>
		&& !z_is_thread_timeout_active(thread);
   3ca6a:	89d9      	ldrh	r1, [r3, #14]
   3ca6c:	297f      	cmp	r1, #127	; 0x7f
   3ca6e:	d814      	bhi.n	3ca9a <z_time_slice+0x52>
		&& !z_is_prio_higher(thread->base.prio, slice_max_prio)
   3ca70:	490e      	ldr	r1, [pc, #56]	; (3caac <z_time_slice+0x64>)
   3ca72:	f993 500e 	ldrsb.w	r5, [r3, #14]
   3ca76:	6809      	ldr	r1, [r1, #0]
   3ca78:	428d      	cmp	r5, r1
   3ca7a:	db0e      	blt.n	3ca9a <z_time_slice+0x52>
		&& !z_is_idle_thread_object(thread)
   3ca7c:	490c      	ldr	r1, [pc, #48]	; (3cab0 <z_time_slice+0x68>)
   3ca7e:	428b      	cmp	r3, r1
   3ca80:	d00b      	beq.n	3ca9a <z_time_slice+0x52>
		&& !z_is_thread_timeout_active(thread);
   3ca82:	6999      	ldr	r1, [r3, #24]
   3ca84:	b949      	cbnz	r1, 3ca9a <z_time_slice+0x52>
		if (ticks >= _current_cpu->slice_ticks) {
   3ca86:	6911      	ldr	r1, [r2, #16]
   3ca88:	4281      	cmp	r1, r0
   3ca8a:	dc03      	bgt.n	3ca94 <z_time_slice+0x4c>
			z_move_thread_to_end_of_prio_q(_current);
   3ca8c:	4618      	mov	r0, r3
   3ca8e:	f7ff ff4d 	bl	3c92c <z_move_thread_to_end_of_prio_q>
   3ca92:	e7e1      	b.n	3ca58 <z_time_slice+0x10>
			_current_cpu->slice_ticks -= ticks;
   3ca94:	1a09      	subs	r1, r1, r0
   3ca96:	6111      	str	r1, [r2, #16]
}
   3ca98:	bd38      	pop	{r3, r4, r5, pc}
		_current_cpu->slice_ticks = 0;
   3ca9a:	2300      	movs	r3, #0
   3ca9c:	6123      	str	r3, [r4, #16]
   3ca9e:	e7fb      	b.n	3ca98 <z_time_slice+0x50>
   3caa0:	2002970c 	.word	0x2002970c
   3caa4:	20029740 	.word	0x20029740
   3caa8:	2002974c 	.word	0x2002974c
   3caac:	20029748 	.word	0x20029748
   3cab0:	2002553c 	.word	0x2002553c

0003cab4 <z_thread_single_suspend>:
{
   3cab4:	b570      	push	{r4, r5, r6, lr}
   3cab6:	4604      	mov	r4, r0
   3cab8:	3018      	adds	r0, #24
   3caba:	f001 f971 	bl	3dda0 <z_abort_timeout>
	__asm__ volatile(
   3cabe:	f04f 0320 	mov.w	r3, #32
   3cac2:	f3ef 8611 	mrs	r6, BASEPRI
   3cac6:	f383 8811 	msr	BASEPRI, r3
   3caca:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   3cace:	4825      	ldr	r0, [pc, #148]	; (3cb64 <z_thread_single_suspend+0xb0>)
   3cad0:	f000 fdd6 	bl	3d680 <z_spin_lock_valid>
   3cad4:	b968      	cbnz	r0, 3caf2 <z_thread_single_suspend+0x3e>
   3cad6:	234a      	movs	r3, #74	; 0x4a
   3cad8:	4a23      	ldr	r2, [pc, #140]	; (3cb68 <z_thread_single_suspend+0xb4>)
   3cada:	4924      	ldr	r1, [pc, #144]	; (3cb6c <z_thread_single_suspend+0xb8>)
   3cadc:	4824      	ldr	r0, [pc, #144]	; (3cb70 <z_thread_single_suspend+0xbc>)
   3cade:	f003 fd90 	bl	40602 <printk>
   3cae2:	4920      	ldr	r1, [pc, #128]	; (3cb64 <z_thread_single_suspend+0xb0>)
   3cae4:	4823      	ldr	r0, [pc, #140]	; (3cb74 <z_thread_single_suspend+0xc0>)
   3cae6:	f003 fd8c 	bl	40602 <printk>
   3caea:	214a      	movs	r1, #74	; 0x4a
   3caec:	481e      	ldr	r0, [pc, #120]	; (3cb68 <z_thread_single_suspend+0xb4>)
   3caee:	f003 fe4b 	bl	40788 <assert_post_action>
	z_spin_lock_set_owner(l);
   3caf2:	481c      	ldr	r0, [pc, #112]	; (3cb64 <z_thread_single_suspend+0xb0>)
   3caf4:	f000 fde2 	bl	3d6bc <z_spin_lock_set_owner>
		if (z_is_thread_queued(thread)) {
   3caf8:	f994 300d 	ldrsb.w	r3, [r4, #13]
   3cafc:	2b00      	cmp	r3, #0
   3cafe:	da07      	bge.n	3cb10 <z_thread_single_suspend+0x5c>
			_priq_run_remove(&_kernel.ready_q.runq, thread);
   3cb00:	4621      	mov	r1, r4
   3cb02:	481d      	ldr	r0, [pc, #116]	; (3cb78 <z_thread_single_suspend+0xc4>)
   3cb04:	f7ff fcf2 	bl	3c4ec <z_priq_dumb_remove>
	thread->base.thread_state &= ~states;
   3cb08:	7b63      	ldrb	r3, [r4, #13]
   3cb0a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   3cb0e:	7363      	strb	r3, [r4, #13]
		update_cache(thread == _current);
   3cb10:	4d1a      	ldr	r5, [pc, #104]	; (3cb7c <z_thread_single_suspend+0xc8>)
	thread->base.thread_state |= _THREAD_SUSPENDED;
   3cb12:	7b63      	ldrb	r3, [r4, #13]
   3cb14:	68a8      	ldr	r0, [r5, #8]
   3cb16:	f043 0310 	orr.w	r3, r3, #16
   3cb1a:	7363      	strb	r3, [r4, #13]
   3cb1c:	1b03      	subs	r3, r0, r4
   3cb1e:	4258      	negs	r0, r3
   3cb20:	4158      	adcs	r0, r3
   3cb22:	f7ff fd67 	bl	3c5f4 <update_cache>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   3cb26:	480f      	ldr	r0, [pc, #60]	; (3cb64 <z_thread_single_suspend+0xb0>)
   3cb28:	f000 fdb8 	bl	3d69c <z_spin_unlock_valid>
   3cb2c:	b968      	cbnz	r0, 3cb4a <z_thread_single_suspend+0x96>
   3cb2e:	235d      	movs	r3, #93	; 0x5d
   3cb30:	4a0d      	ldr	r2, [pc, #52]	; (3cb68 <z_thread_single_suspend+0xb4>)
   3cb32:	4913      	ldr	r1, [pc, #76]	; (3cb80 <z_thread_single_suspend+0xcc>)
   3cb34:	480e      	ldr	r0, [pc, #56]	; (3cb70 <z_thread_single_suspend+0xbc>)
   3cb36:	f003 fd64 	bl	40602 <printk>
   3cb3a:	490a      	ldr	r1, [pc, #40]	; (3cb64 <z_thread_single_suspend+0xb0>)
   3cb3c:	4811      	ldr	r0, [pc, #68]	; (3cb84 <z_thread_single_suspend+0xd0>)
   3cb3e:	f003 fd60 	bl	40602 <printk>
   3cb42:	215d      	movs	r1, #93	; 0x5d
   3cb44:	4808      	ldr	r0, [pc, #32]	; (3cb68 <z_thread_single_suspend+0xb4>)
   3cb46:	f003 fe1f 	bl	40788 <assert_post_action>
	__asm__ volatile(
   3cb4a:	f386 8811 	msr	BASEPRI, r6
   3cb4e:	f3bf 8f6f 	isb	sy
	if (thread == _current) {
   3cb52:	68ab      	ldr	r3, [r5, #8]
   3cb54:	42a3      	cmp	r3, r4
   3cb56:	d103      	bne.n	3cb60 <z_thread_single_suspend+0xac>
}
   3cb58:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		z_reschedule_unlocked();
   3cb5c:	f007 bff8 	b.w	44b50 <z_reschedule_unlocked>
}
   3cb60:	bd70      	pop	{r4, r5, r6, pc}
   3cb62:	bf00      	nop
   3cb64:	20029744 	.word	0x20029744
   3cb68:	000498fb 	.word	0x000498fb
   3cb6c:	00049921 	.word	0x00049921
   3cb70:	0004764f 	.word	0x0004764f
   3cb74:	00049936 	.word	0x00049936
   3cb78:	20029734 	.word	0x20029734
   3cb7c:	2002970c 	.word	0x2002970c
   3cb80:	0004994e 	.word	0x0004994e
   3cb84:	00049965 	.word	0x00049965

0003cb88 <z_thread_single_abort>:
	if (thread->fn_abort != NULL) {
   3cb88:	6d03      	ldr	r3, [r0, #80]	; 0x50
{
   3cb8a:	b570      	push	{r4, r5, r6, lr}
   3cb8c:	4604      	mov	r4, r0
	if (thread->fn_abort != NULL) {
   3cb8e:	b103      	cbz	r3, 3cb92 <z_thread_single_abort+0xa>
		thread->fn_abort();
   3cb90:	4798      	blx	r3
   3cb92:	f104 0018 	add.w	r0, r4, #24
   3cb96:	f001 f903 	bl	3dda0 <z_abort_timeout>
	__asm__ volatile(
   3cb9a:	f04f 0320 	mov.w	r3, #32
   3cb9e:	f3ef 8511 	mrs	r5, BASEPRI
   3cba2:	f383 8811 	msr	BASEPRI, r3
   3cba6:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   3cbaa:	482c      	ldr	r0, [pc, #176]	; (3cc5c <z_thread_single_abort+0xd4>)
   3cbac:	f000 fd68 	bl	3d680 <z_spin_lock_valid>
   3cbb0:	b968      	cbnz	r0, 3cbce <z_thread_single_abort+0x46>
   3cbb2:	234a      	movs	r3, #74	; 0x4a
   3cbb4:	4a2a      	ldr	r2, [pc, #168]	; (3cc60 <z_thread_single_abort+0xd8>)
   3cbb6:	492b      	ldr	r1, [pc, #172]	; (3cc64 <z_thread_single_abort+0xdc>)
   3cbb8:	482b      	ldr	r0, [pc, #172]	; (3cc68 <z_thread_single_abort+0xe0>)
   3cbba:	f003 fd22 	bl	40602 <printk>
   3cbbe:	4927      	ldr	r1, [pc, #156]	; (3cc5c <z_thread_single_abort+0xd4>)
   3cbc0:	482a      	ldr	r0, [pc, #168]	; (3cc6c <z_thread_single_abort+0xe4>)
   3cbc2:	f003 fd1e 	bl	40602 <printk>
   3cbc6:	214a      	movs	r1, #74	; 0x4a
   3cbc8:	4825      	ldr	r0, [pc, #148]	; (3cc60 <z_thread_single_abort+0xd8>)
   3cbca:	f003 fddd 	bl	40788 <assert_post_action>
	z_spin_lock_set_owner(l);
   3cbce:	4823      	ldr	r0, [pc, #140]	; (3cc5c <z_thread_single_abort+0xd4>)
   3cbd0:	f000 fd74 	bl	3d6bc <z_spin_lock_set_owner>
		if (z_is_thread_ready(thread)) {
   3cbd4:	4620      	mov	r0, r4
   3cbd6:	f007 ff9d 	bl	44b14 <z_is_thread_ready>
   3cbda:	4606      	mov	r6, r0
   3cbdc:	b368      	cbz	r0, 3cc3a <z_thread_single_abort+0xb2>
			if (z_is_thread_queued(thread)) {
   3cbde:	f994 300d 	ldrsb.w	r3, [r4, #13]
   3cbe2:	2b00      	cmp	r3, #0
   3cbe4:	da07      	bge.n	3cbf6 <z_thread_single_abort+0x6e>
				_priq_run_remove(&_kernel.ready_q.runq,
   3cbe6:	4621      	mov	r1, r4
   3cbe8:	4821      	ldr	r0, [pc, #132]	; (3cc70 <z_thread_single_abort+0xe8>)
   3cbea:	f7ff fc7f 	bl	3c4ec <z_priq_dumb_remove>
	thread->base.thread_state &= ~states;
   3cbee:	7b63      	ldrb	r3, [r4, #13]
   3cbf0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   3cbf4:	7363      	strb	r3, [r4, #13]
			update_cache(thread == _current);
   3cbf6:	4b1f      	ldr	r3, [pc, #124]	; (3cc74 <z_thread_single_abort+0xec>)
   3cbf8:	6898      	ldr	r0, [r3, #8]
   3cbfa:	1b02      	subs	r2, r0, r4
   3cbfc:	4250      	negs	r0, r2
   3cbfe:	4150      	adcs	r0, r2
   3cc00:	f7ff fcf8 	bl	3c5f4 <update_cache>
		thread->base.thread_state |= mask;
   3cc04:	7b63      	ldrb	r3, [r4, #13]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   3cc06:	4815      	ldr	r0, [pc, #84]	; (3cc5c <z_thread_single_abort+0xd4>)
   3cc08:	f043 0308 	orr.w	r3, r3, #8
   3cc0c:	7363      	strb	r3, [r4, #13]
   3cc0e:	f000 fd45 	bl	3d69c <z_spin_unlock_valid>
   3cc12:	b968      	cbnz	r0, 3cc30 <z_thread_single_abort+0xa8>
   3cc14:	235d      	movs	r3, #93	; 0x5d
   3cc16:	4a12      	ldr	r2, [pc, #72]	; (3cc60 <z_thread_single_abort+0xd8>)
   3cc18:	4917      	ldr	r1, [pc, #92]	; (3cc78 <z_thread_single_abort+0xf0>)
   3cc1a:	4813      	ldr	r0, [pc, #76]	; (3cc68 <z_thread_single_abort+0xe0>)
   3cc1c:	f003 fcf1 	bl	40602 <printk>
   3cc20:	490e      	ldr	r1, [pc, #56]	; (3cc5c <z_thread_single_abort+0xd4>)
   3cc22:	4816      	ldr	r0, [pc, #88]	; (3cc7c <z_thread_single_abort+0xf4>)
   3cc24:	f003 fced 	bl	40602 <printk>
   3cc28:	215d      	movs	r1, #93	; 0x5d
   3cc2a:	480d      	ldr	r0, [pc, #52]	; (3cc60 <z_thread_single_abort+0xd8>)
   3cc2c:	f003 fdac 	bl	40788 <assert_post_action>
	__asm__ volatile(
   3cc30:	f385 8811 	msr	BASEPRI, r5
   3cc34:	f3bf 8f6f 	isb	sy
}
   3cc38:	bd70      	pop	{r4, r5, r6, pc}
			if (z_is_thread_pending(thread)) {
   3cc3a:	7b63      	ldrb	r3, [r4, #13]
   3cc3c:	079b      	lsls	r3, r3, #30
   3cc3e:	d5e1      	bpl.n	3cc04 <z_thread_single_abort+0x7c>
				_priq_wait_remove(&pended_on(thread)->waitq,
   3cc40:	f104 0008 	add.w	r0, r4, #8
   3cc44:	f7ff fa74 	bl	3c130 <pended_on.isra.17>
   3cc48:	4621      	mov	r1, r4
   3cc4a:	f7ff fc4f 	bl	3c4ec <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
   3cc4e:	7b63      	ldrb	r3, [r4, #13]
				thread->base.pended_on = NULL;
   3cc50:	60a6      	str	r6, [r4, #8]
   3cc52:	f023 0302 	bic.w	r3, r3, #2
   3cc56:	7363      	strb	r3, [r4, #13]
   3cc58:	e7d4      	b.n	3cc04 <z_thread_single_abort+0x7c>
   3cc5a:	bf00      	nop
   3cc5c:	20029744 	.word	0x20029744
   3cc60:	000498fb 	.word	0x000498fb
   3cc64:	00049921 	.word	0x00049921
   3cc68:	0004764f 	.word	0x0004764f
   3cc6c:	00049936 	.word	0x00049936
   3cc70:	20029734 	.word	0x20029734
   3cc74:	2002970c 	.word	0x2002970c
   3cc78:	0004994e 	.word	0x0004994e
   3cc7c:	00049965 	.word	0x00049965

0003cc80 <z_remove_thread_from_ready_q>:
{
   3cc80:	b538      	push	{r3, r4, r5, lr}
   3cc82:	4604      	mov	r4, r0
	__asm__ volatile(
   3cc84:	f04f 0320 	mov.w	r3, #32
   3cc88:	f3ef 8511 	mrs	r5, BASEPRI
   3cc8c:	f383 8811 	msr	BASEPRI, r3
   3cc90:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   3cc94:	481f      	ldr	r0, [pc, #124]	; (3cd14 <z_remove_thread_from_ready_q+0x94>)
   3cc96:	f000 fcf3 	bl	3d680 <z_spin_lock_valid>
   3cc9a:	b968      	cbnz	r0, 3ccb8 <z_remove_thread_from_ready_q+0x38>
   3cc9c:	234a      	movs	r3, #74	; 0x4a
   3cc9e:	4a1e      	ldr	r2, [pc, #120]	; (3cd18 <z_remove_thread_from_ready_q+0x98>)
   3cca0:	491e      	ldr	r1, [pc, #120]	; (3cd1c <z_remove_thread_from_ready_q+0x9c>)
   3cca2:	481f      	ldr	r0, [pc, #124]	; (3cd20 <z_remove_thread_from_ready_q+0xa0>)
   3cca4:	f003 fcad 	bl	40602 <printk>
   3cca8:	491a      	ldr	r1, [pc, #104]	; (3cd14 <z_remove_thread_from_ready_q+0x94>)
   3ccaa:	481e      	ldr	r0, [pc, #120]	; (3cd24 <z_remove_thread_from_ready_q+0xa4>)
   3ccac:	f003 fca9 	bl	40602 <printk>
   3ccb0:	214a      	movs	r1, #74	; 0x4a
   3ccb2:	4819      	ldr	r0, [pc, #100]	; (3cd18 <z_remove_thread_from_ready_q+0x98>)
   3ccb4:	f003 fd68 	bl	40788 <assert_post_action>
	z_spin_lock_set_owner(l);
   3ccb8:	4816      	ldr	r0, [pc, #88]	; (3cd14 <z_remove_thread_from_ready_q+0x94>)
   3ccba:	f000 fcff 	bl	3d6bc <z_spin_lock_set_owner>
		if (z_is_thread_queued(thread)) {
   3ccbe:	f994 300d 	ldrsb.w	r3, [r4, #13]
   3ccc2:	2b00      	cmp	r3, #0
   3ccc4:	da07      	bge.n	3ccd6 <z_remove_thread_from_ready_q+0x56>
			_priq_run_remove(&_kernel.ready_q.runq, thread);
   3ccc6:	4621      	mov	r1, r4
   3ccc8:	4817      	ldr	r0, [pc, #92]	; (3cd28 <z_remove_thread_from_ready_q+0xa8>)
   3ccca:	f7ff fc0f 	bl	3c4ec <z_priq_dumb_remove>
	thread->base.thread_state &= ~states;
   3ccce:	7b63      	ldrb	r3, [r4, #13]
   3ccd0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   3ccd4:	7363      	strb	r3, [r4, #13]
		update_cache(thread == _current);
   3ccd6:	4b15      	ldr	r3, [pc, #84]	; (3cd2c <z_remove_thread_from_ready_q+0xac>)
   3ccd8:	6898      	ldr	r0, [r3, #8]
   3ccda:	1b03      	subs	r3, r0, r4
   3ccdc:	4258      	negs	r0, r3
   3ccde:	4158      	adcs	r0, r3
   3cce0:	f7ff fc88 	bl	3c5f4 <update_cache>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   3cce4:	480b      	ldr	r0, [pc, #44]	; (3cd14 <z_remove_thread_from_ready_q+0x94>)
   3cce6:	f000 fcd9 	bl	3d69c <z_spin_unlock_valid>
   3ccea:	b968      	cbnz	r0, 3cd08 <z_remove_thread_from_ready_q+0x88>
   3ccec:	235d      	movs	r3, #93	; 0x5d
   3ccee:	4a0a      	ldr	r2, [pc, #40]	; (3cd18 <z_remove_thread_from_ready_q+0x98>)
   3ccf0:	490f      	ldr	r1, [pc, #60]	; (3cd30 <z_remove_thread_from_ready_q+0xb0>)
   3ccf2:	480b      	ldr	r0, [pc, #44]	; (3cd20 <z_remove_thread_from_ready_q+0xa0>)
   3ccf4:	f003 fc85 	bl	40602 <printk>
   3ccf8:	4906      	ldr	r1, [pc, #24]	; (3cd14 <z_remove_thread_from_ready_q+0x94>)
   3ccfa:	480e      	ldr	r0, [pc, #56]	; (3cd34 <z_remove_thread_from_ready_q+0xb4>)
   3ccfc:	f003 fc81 	bl	40602 <printk>
   3cd00:	215d      	movs	r1, #93	; 0x5d
   3cd02:	4805      	ldr	r0, [pc, #20]	; (3cd18 <z_remove_thread_from_ready_q+0x98>)
   3cd04:	f003 fd40 	bl	40788 <assert_post_action>
	__asm__ volatile(
   3cd08:	f385 8811 	msr	BASEPRI, r5
   3cd0c:	f3bf 8f6f 	isb	sy
}
   3cd10:	bd38      	pop	{r3, r4, r5, pc}
   3cd12:	bf00      	nop
   3cd14:	20029744 	.word	0x20029744
   3cd18:	000498fb 	.word	0x000498fb
   3cd1c:	00049921 	.word	0x00049921
   3cd20:	0004764f 	.word	0x0004764f
   3cd24:	00049936 	.word	0x00049936
   3cd28:	20029734 	.word	0x20029734
   3cd2c:	2002970c 	.word	0x2002970c
   3cd30:	0004994e 	.word	0x0004994e
   3cd34:	00049965 	.word	0x00049965

0003cd38 <pend>:
{
   3cd38:	b570      	push	{r4, r5, r6, lr}
   3cd3a:	4604      	mov	r4, r0
   3cd3c:	460d      	mov	r5, r1
   3cd3e:	4616      	mov	r6, r2
	z_remove_thread_from_ready_q(thread);
   3cd40:	f7ff ff9e 	bl	3cc80 <z_remove_thread_from_ready_q>
	thread->base.thread_state |= _THREAD_PENDING;
   3cd44:	7b63      	ldrb	r3, [r4, #13]
   3cd46:	f043 0302 	orr.w	r3, r3, #2
   3cd4a:	7363      	strb	r3, [r4, #13]
	if (wait_q != NULL) {
   3cd4c:	b1fd      	cbz	r5, 3cd8e <pend+0x56>
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   3cd4e:	4b2b      	ldr	r3, [pc, #172]	; (3cdfc <pend+0xc4>)
		thread->base.pended_on = wait_q;
   3cd50:	60a5      	str	r5, [r4, #8]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   3cd52:	429c      	cmp	r4, r3
   3cd54:	d10b      	bne.n	3cd6e <pend+0x36>
   3cd56:	492a      	ldr	r1, [pc, #168]	; (3ce00 <pend+0xc8>)
   3cd58:	482a      	ldr	r0, [pc, #168]	; (3ce04 <pend+0xcc>)
   3cd5a:	f240 3302 	movw	r3, #770	; 0x302
   3cd5e:	4a2a      	ldr	r2, [pc, #168]	; (3ce08 <pend+0xd0>)
   3cd60:	f003 fc4f 	bl	40602 <printk>
   3cd64:	f240 3102 	movw	r1, #770	; 0x302
   3cd68:	4827      	ldr	r0, [pc, #156]	; (3ce08 <pend+0xd0>)
   3cd6a:	f003 fd0d 	bl	40788 <assert_post_action>
	return list->head == list;
   3cd6e:	682b      	ldr	r3, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   3cd70:	429d      	cmp	r5, r3
   3cd72:	d03b      	beq.n	3cdec <pend+0xb4>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   3cd74:	2b00      	cmp	r3, #0
   3cd76:	d039      	beq.n	3cdec <pend+0xb4>
	if (thread_1->base.prio < thread_2->base.prio) {
   3cd78:	f994 200e 	ldrsb.w	r2, [r4, #14]
   3cd7c:	f993 100e 	ldrsb.w	r1, [r3, #14]
   3cd80:	4291      	cmp	r1, r2
   3cd82:	dd2d      	ble.n	3cde0 <pend+0xa8>
	node->prev = successor->prev;
   3cd84:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   3cd86:	e9c4 3200 	strd	r3, r2, [r4]
	successor->prev->next = node;
   3cd8a:	6014      	str	r4, [r2, #0]
	successor->prev = node;
   3cd8c:	605c      	str	r4, [r3, #4]
	if (timeout != K_FOREVER) {
   3cd8e:	1c73      	adds	r3, r6, #1
   3cd90:	d033      	beq.n	3cdfa <pend+0xc2>
		__ASSERT(timeout >= 0,
   3cd92:	2e00      	cmp	r6, #0
   3cd94:	da0e      	bge.n	3cdb4 <pend+0x7c>
   3cd96:	491d      	ldr	r1, [pc, #116]	; (3ce0c <pend+0xd4>)
   3cd98:	f44f 73fb 	mov.w	r3, #502	; 0x1f6
   3cd9c:	4a1a      	ldr	r2, [pc, #104]	; (3ce08 <pend+0xd0>)
   3cd9e:	4819      	ldr	r0, [pc, #100]	; (3ce04 <pend+0xcc>)
   3cda0:	f003 fc2f 	bl	40602 <printk>
   3cda4:	481a      	ldr	r0, [pc, #104]	; (3ce10 <pend+0xd8>)
   3cda6:	f003 fc2c 	bl	40602 <printk>
   3cdaa:	f44f 71fb 	mov.w	r1, #502	; 0x1f6
   3cdae:	4816      	ldr	r0, [pc, #88]	; (3ce08 <pend+0xd0>)
   3cdb0:	f003 fcea 	bl	40788 <assert_post_action>
   3cdb4:	f44f 4500 	mov.w	r5, #32768	; 0x8000
   3cdb8:	f240 30e7 	movw	r0, #999	; 0x3e7
   3cdbc:	2100      	movs	r1, #0
   3cdbe:	ea26 76e6 	bic.w	r6, r6, r6, asr #31
   3cdc2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   3cdc6:	fbc5 0106 	smlal	r0, r1, r5, r6
   3cdca:	2300      	movs	r3, #0
   3cdcc:	f7e0 f806 	bl	1cddc <__aeabi_uldivmod>
	z_add_timeout(&th->base.timeout, z_thread_timeout, ticks);
   3cdd0:	4910      	ldr	r1, [pc, #64]	; (3ce14 <pend+0xdc>)
   3cdd2:	1c42      	adds	r2, r0, #1
   3cdd4:	f104 0018 	add.w	r0, r4, #24
}
   3cdd8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   3cddc:	f000 bf3a 	b.w	3dc54 <z_add_timeout>
	return (node == list->tail) ? NULL : node->next;
   3cde0:	6869      	ldr	r1, [r5, #4]
   3cde2:	428b      	cmp	r3, r1
   3cde4:	d002      	beq.n	3cdec <pend+0xb4>
   3cde6:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   3cde8:	2b00      	cmp	r3, #0
   3cdea:	d1c7      	bne.n	3cd7c <pend+0x44>
	node->prev = list->tail;
   3cdec:	686b      	ldr	r3, [r5, #4]
	node->next = list;
   3cdee:	6025      	str	r5, [r4, #0]
	node->prev = list->tail;
   3cdf0:	6063      	str	r3, [r4, #4]
	list->tail->next = node;
   3cdf2:	686b      	ldr	r3, [r5, #4]
   3cdf4:	601c      	str	r4, [r3, #0]
	list->tail = node;
   3cdf6:	606c      	str	r4, [r5, #4]
   3cdf8:	e7c9      	b.n	3cd8e <pend+0x56>
}
   3cdfa:	bd70      	pop	{r4, r5, r6, pc}
   3cdfc:	2002553c 	.word	0x2002553c
   3ce00:	0004d42b 	.word	0x0004d42b
   3ce04:	0004764f 	.word	0x0004764f
   3ce08:	0004d3d3 	.word	0x0004d3d3
   3ce0c:	0004d39d 	.word	0x0004d39d
   3ce10:	0004d3aa 	.word	0x0004d3aa
   3ce14:	0003c859 	.word	0x0003c859

0003ce18 <z_pend_curr_irqlock>:
{
   3ce18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   3ce1a:	4606      	mov	r6, r0
	pend(_current, wait_q, timeout);
   3ce1c:	4d22      	ldr	r5, [pc, #136]	; (3cea8 <z_pend_curr_irqlock+0x90>)
	pending_current = _current;
   3ce1e:	4c23      	ldr	r4, [pc, #140]	; (3ceac <z_pend_curr_irqlock+0x94>)
	pend(_current, wait_q, timeout);
   3ce20:	68a8      	ldr	r0, [r5, #8]
   3ce22:	f7ff ff89 	bl	3cd38 <pend>
	pending_current = _current;
   3ce26:	68ab      	ldr	r3, [r5, #8]
   3ce28:	4630      	mov	r0, r6
   3ce2a:	6023      	str	r3, [r4, #0]
   3ce2c:	f7e9 fbac 	bl	26588 <arch_swap>
   3ce30:	4606      	mov	r6, r0
	__asm__ volatile(
   3ce32:	f04f 0320 	mov.w	r3, #32
   3ce36:	f3ef 8711 	mrs	r7, BASEPRI
   3ce3a:	f383 8811 	msr	BASEPRI, r3
   3ce3e:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   3ce42:	481b      	ldr	r0, [pc, #108]	; (3ceb0 <z_pend_curr_irqlock+0x98>)
   3ce44:	f000 fc1c 	bl	3d680 <z_spin_lock_valid>
   3ce48:	b968      	cbnz	r0, 3ce66 <z_pend_curr_irqlock+0x4e>
   3ce4a:	234a      	movs	r3, #74	; 0x4a
   3ce4c:	4a19      	ldr	r2, [pc, #100]	; (3ceb4 <z_pend_curr_irqlock+0x9c>)
   3ce4e:	491a      	ldr	r1, [pc, #104]	; (3ceb8 <z_pend_curr_irqlock+0xa0>)
   3ce50:	481a      	ldr	r0, [pc, #104]	; (3cebc <z_pend_curr_irqlock+0xa4>)
   3ce52:	f003 fbd6 	bl	40602 <printk>
   3ce56:	4916      	ldr	r1, [pc, #88]	; (3ceb0 <z_pend_curr_irqlock+0x98>)
   3ce58:	4819      	ldr	r0, [pc, #100]	; (3cec0 <z_pend_curr_irqlock+0xa8>)
   3ce5a:	f003 fbd2 	bl	40602 <printk>
   3ce5e:	214a      	movs	r1, #74	; 0x4a
   3ce60:	4814      	ldr	r0, [pc, #80]	; (3ceb4 <z_pend_curr_irqlock+0x9c>)
   3ce62:	f003 fc91 	bl	40788 <assert_post_action>
	z_spin_lock_set_owner(l);
   3ce66:	4812      	ldr	r0, [pc, #72]	; (3ceb0 <z_pend_curr_irqlock+0x98>)
   3ce68:	f000 fc28 	bl	3d6bc <z_spin_lock_set_owner>
		if (pending_current == _current) {
   3ce6c:	6823      	ldr	r3, [r4, #0]
   3ce6e:	68aa      	ldr	r2, [r5, #8]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   3ce70:	480f      	ldr	r0, [pc, #60]	; (3ceb0 <z_pend_curr_irqlock+0x98>)
   3ce72:	429a      	cmp	r2, r3
			pending_current = NULL;
   3ce74:	bf04      	itt	eq
   3ce76:	2300      	moveq	r3, #0
   3ce78:	6023      	streq	r3, [r4, #0]
   3ce7a:	f000 fc0f 	bl	3d69c <z_spin_unlock_valid>
   3ce7e:	b968      	cbnz	r0, 3ce9c <z_pend_curr_irqlock+0x84>
   3ce80:	235d      	movs	r3, #93	; 0x5d
   3ce82:	4a0c      	ldr	r2, [pc, #48]	; (3ceb4 <z_pend_curr_irqlock+0x9c>)
   3ce84:	490f      	ldr	r1, [pc, #60]	; (3cec4 <z_pend_curr_irqlock+0xac>)
   3ce86:	480d      	ldr	r0, [pc, #52]	; (3cebc <z_pend_curr_irqlock+0xa4>)
   3ce88:	f003 fbbb 	bl	40602 <printk>
   3ce8c:	4908      	ldr	r1, [pc, #32]	; (3ceb0 <z_pend_curr_irqlock+0x98>)
   3ce8e:	480e      	ldr	r0, [pc, #56]	; (3cec8 <z_pend_curr_irqlock+0xb0>)
   3ce90:	f003 fbb7 	bl	40602 <printk>
   3ce94:	215d      	movs	r1, #93	; 0x5d
   3ce96:	4807      	ldr	r0, [pc, #28]	; (3ceb4 <z_pend_curr_irqlock+0x9c>)
   3ce98:	f003 fc76 	bl	40788 <assert_post_action>
	__asm__ volatile(
   3ce9c:	f387 8811 	msr	BASEPRI, r7
   3cea0:	f3bf 8f6f 	isb	sy
}
   3cea4:	4630      	mov	r0, r6
   3cea6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   3cea8:	2002970c 	.word	0x2002970c
   3ceac:	20029740 	.word	0x20029740
   3ceb0:	20029744 	.word	0x20029744
   3ceb4:	000498fb 	.word	0x000498fb
   3ceb8:	00049921 	.word	0x00049921
   3cebc:	0004764f 	.word	0x0004764f
   3cec0:	00049936 	.word	0x00049936
   3cec4:	0004994e 	.word	0x0004994e
   3cec8:	00049965 	.word	0x00049965

0003cecc <z_pend_curr>:
{
   3cecc:	b538      	push	{r3, r4, r5, lr}
   3cece:	4604      	mov	r4, r0
   3ced0:	460d      	mov	r5, r1
   3ced2:	4611      	mov	r1, r2
	pending_current = _current;
   3ced4:	4a0e      	ldr	r2, [pc, #56]	; (3cf10 <z_pend_curr+0x44>)
   3ced6:	6890      	ldr	r0, [r2, #8]
   3ced8:	4a0e      	ldr	r2, [pc, #56]	; (3cf14 <z_pend_curr+0x48>)
   3ceda:	6010      	str	r0, [r2, #0]
	pend(_current, wait_q, timeout);
   3cedc:	461a      	mov	r2, r3
   3cede:	f7ff ff2b 	bl	3cd38 <pend>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   3cee2:	4620      	mov	r0, r4
   3cee4:	f000 fbda 	bl	3d69c <z_spin_unlock_valid>
   3cee8:	b968      	cbnz	r0, 3cf06 <z_pend_curr+0x3a>
   3ceea:	2374      	movs	r3, #116	; 0x74
   3ceec:	4a0a      	ldr	r2, [pc, #40]	; (3cf18 <z_pend_curr+0x4c>)
   3ceee:	490b      	ldr	r1, [pc, #44]	; (3cf1c <z_pend_curr+0x50>)
   3cef0:	480b      	ldr	r0, [pc, #44]	; (3cf20 <z_pend_curr+0x54>)
   3cef2:	f003 fb86 	bl	40602 <printk>
   3cef6:	4621      	mov	r1, r4
   3cef8:	480a      	ldr	r0, [pc, #40]	; (3cf24 <z_pend_curr+0x58>)
   3cefa:	f003 fb82 	bl	40602 <printk>
   3cefe:	2174      	movs	r1, #116	; 0x74
   3cf00:	4805      	ldr	r0, [pc, #20]	; (3cf18 <z_pend_curr+0x4c>)
   3cf02:	f003 fc41 	bl	40788 <assert_post_action>
   3cf06:	4628      	mov	r0, r5
}
   3cf08:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   3cf0c:	f7e9 bb3c 	b.w	26588 <arch_swap>
   3cf10:	2002970c 	.word	0x2002970c
   3cf14:	20029740 	.word	0x20029740
   3cf18:	000498fb 	.word	0x000498fb
   3cf1c:	0004994e 	.word	0x0004994e
   3cf20:	0004764f 	.word	0x0004764f
   3cf24:	00049965 	.word	0x00049965

0003cf28 <z_set_prio>:
{
   3cf28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   3cf2a:	4604      	mov	r4, r0
   3cf2c:	460d      	mov	r5, r1
	__asm__ volatile(
   3cf2e:	f04f 0320 	mov.w	r3, #32
   3cf32:	f3ef 8611 	mrs	r6, BASEPRI
   3cf36:	f383 8811 	msr	BASEPRI, r3
   3cf3a:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   3cf3e:	4835      	ldr	r0, [pc, #212]	; (3d014 <z_set_prio+0xec>)
   3cf40:	f000 fb9e 	bl	3d680 <z_spin_lock_valid>
   3cf44:	b968      	cbnz	r0, 3cf62 <z_set_prio+0x3a>
   3cf46:	234a      	movs	r3, #74	; 0x4a
   3cf48:	4a33      	ldr	r2, [pc, #204]	; (3d018 <z_set_prio+0xf0>)
   3cf4a:	4934      	ldr	r1, [pc, #208]	; (3d01c <z_set_prio+0xf4>)
   3cf4c:	4834      	ldr	r0, [pc, #208]	; (3d020 <z_set_prio+0xf8>)
   3cf4e:	f003 fb58 	bl	40602 <printk>
   3cf52:	4930      	ldr	r1, [pc, #192]	; (3d014 <z_set_prio+0xec>)
   3cf54:	4833      	ldr	r0, [pc, #204]	; (3d024 <z_set_prio+0xfc>)
   3cf56:	f003 fb54 	bl	40602 <printk>
   3cf5a:	214a      	movs	r1, #74	; 0x4a
   3cf5c:	482e      	ldr	r0, [pc, #184]	; (3d018 <z_set_prio+0xf0>)
   3cf5e:	f003 fc13 	bl	40788 <assert_post_action>
	z_spin_lock_set_owner(l);
   3cf62:	482c      	ldr	r0, [pc, #176]	; (3d014 <z_set_prio+0xec>)
   3cf64:	f000 fbaa 	bl	3d6bc <z_spin_lock_set_owner>
		need_sched = z_is_thread_ready(thread);
   3cf68:	4620      	mov	r0, r4
   3cf6a:	f007 fdd3 	bl	44b14 <z_is_thread_ready>
		if (need_sched) {
   3cf6e:	b26d      	sxtb	r5, r5
   3cf70:	4607      	mov	r7, r0
   3cf72:	2800      	cmp	r0, #0
   3cf74:	d04c      	beq.n	3d010 <z_set_prio+0xe8>
				_priq_run_remove(&_kernel.ready_q.runq, thread);
   3cf76:	4621      	mov	r1, r4
   3cf78:	482b      	ldr	r0, [pc, #172]	; (3d028 <z_set_prio+0x100>)
   3cf7a:	f7ff fab7 	bl	3c4ec <z_priq_dumb_remove>
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   3cf7e:	4b2b      	ldr	r3, [pc, #172]	; (3d02c <z_set_prio+0x104>)
				thread->base.prio = prio;
   3cf80:	73a5      	strb	r5, [r4, #14]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   3cf82:	429c      	cmp	r4, r3
   3cf84:	d10b      	bne.n	3cf9e <z_set_prio+0x76>
   3cf86:	492a      	ldr	r1, [pc, #168]	; (3d030 <z_set_prio+0x108>)
   3cf88:	4825      	ldr	r0, [pc, #148]	; (3d020 <z_set_prio+0xf8>)
   3cf8a:	f240 3302 	movw	r3, #770	; 0x302
   3cf8e:	4a29      	ldr	r2, [pc, #164]	; (3d034 <z_set_prio+0x10c>)
   3cf90:	f003 fb37 	bl	40602 <printk>
   3cf94:	f240 3102 	movw	r1, #770	; 0x302
   3cf98:	4826      	ldr	r0, [pc, #152]	; (3d034 <z_set_prio+0x10c>)
   3cf9a:	f003 fbf5 	bl	40788 <assert_post_action>
	return list->head == list;
   3cf9e:	4a26      	ldr	r2, [pc, #152]	; (3d038 <z_set_prio+0x110>)
	return sys_dlist_is_empty(list) ? NULL : list->head;
   3cfa0:	f102 0128 	add.w	r1, r2, #40	; 0x28
   3cfa4:	e9d2 300a 	ldrd	r3, r0, [r2, #40]	; 0x28
   3cfa8:	428b      	cmp	r3, r1
   3cfaa:	d02b      	beq.n	3d004 <z_set_prio+0xdc>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   3cfac:	b353      	cbz	r3, 3d004 <z_set_prio+0xdc>
	if (thread_1->base.prio < thread_2->base.prio) {
   3cfae:	f994 500e 	ldrsb.w	r5, [r4, #14]
   3cfb2:	f993 c00e 	ldrsb.w	ip, [r3, #14]
   3cfb6:	45ac      	cmp	ip, r5
   3cfb8:	dd1f      	ble.n	3cffa <z_set_prio+0xd2>
	node->prev = successor->prev;
   3cfba:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   3cfbc:	e9c4 3200 	strd	r3, r2, [r4]
	successor->prev->next = node;
   3cfc0:	6014      	str	r4, [r2, #0]
	successor->prev = node;
   3cfc2:	605c      	str	r4, [r3, #4]
			update_cache(1);
   3cfc4:	2001      	movs	r0, #1
   3cfc6:	f7ff fb15 	bl	3c5f4 <update_cache>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   3cfca:	4812      	ldr	r0, [pc, #72]	; (3d014 <z_set_prio+0xec>)
   3cfcc:	f000 fb66 	bl	3d69c <z_spin_unlock_valid>
   3cfd0:	b968      	cbnz	r0, 3cfee <z_set_prio+0xc6>
   3cfd2:	235d      	movs	r3, #93	; 0x5d
   3cfd4:	4a10      	ldr	r2, [pc, #64]	; (3d018 <z_set_prio+0xf0>)
   3cfd6:	4919      	ldr	r1, [pc, #100]	; (3d03c <z_set_prio+0x114>)
   3cfd8:	4811      	ldr	r0, [pc, #68]	; (3d020 <z_set_prio+0xf8>)
   3cfda:	f003 fb12 	bl	40602 <printk>
   3cfde:	490d      	ldr	r1, [pc, #52]	; (3d014 <z_set_prio+0xec>)
   3cfe0:	4817      	ldr	r0, [pc, #92]	; (3d040 <z_set_prio+0x118>)
   3cfe2:	f003 fb0e 	bl	40602 <printk>
   3cfe6:	215d      	movs	r1, #93	; 0x5d
   3cfe8:	480b      	ldr	r0, [pc, #44]	; (3d018 <z_set_prio+0xf0>)
   3cfea:	f003 fbcd 	bl	40788 <assert_post_action>
	__asm__ volatile(
   3cfee:	f386 8811 	msr	BASEPRI, r6
   3cff2:	f3bf 8f6f 	isb	sy
}
   3cff6:	4638      	mov	r0, r7
   3cff8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return (node == list->tail) ? NULL : node->next;
   3cffa:	4298      	cmp	r0, r3
   3cffc:	d002      	beq.n	3d004 <z_set_prio+0xdc>
   3cffe:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   3d000:	2b00      	cmp	r3, #0
   3d002:	d1d6      	bne.n	3cfb2 <z_set_prio+0x8a>
	node->prev = list->tail;
   3d004:	e9c4 1000 	strd	r1, r0, [r4]
	list->tail->next = node;
   3d008:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
   3d00a:	601c      	str	r4, [r3, #0]
	list->tail = node;
   3d00c:	62d4      	str	r4, [r2, #44]	; 0x2c
   3d00e:	e7d9      	b.n	3cfc4 <z_set_prio+0x9c>
			thread->base.prio = prio;
   3d010:	73a5      	strb	r5, [r4, #14]
   3d012:	e7da      	b.n	3cfca <z_set_prio+0xa2>
   3d014:	20029744 	.word	0x20029744
   3d018:	000498fb 	.word	0x000498fb
   3d01c:	00049921 	.word	0x00049921
   3d020:	0004764f 	.word	0x0004764f
   3d024:	00049936 	.word	0x00049936
   3d028:	20029734 	.word	0x20029734
   3d02c:	2002553c 	.word	0x2002553c
   3d030:	0004d42b 	.word	0x0004d42b
   3d034:	0004d3d3 	.word	0x0004d3d3
   3d038:	2002970c 	.word	0x2002970c
   3d03c:	0004994e 	.word	0x0004994e
   3d040:	00049965 	.word	0x00049965

0003d044 <z_unpend_first_thread>:
{
   3d044:	b538      	push	{r3, r4, r5, lr}
   3d046:	4604      	mov	r4, r0
	__asm__ volatile(
   3d048:	f04f 0320 	mov.w	r3, #32
   3d04c:	f3ef 8511 	mrs	r5, BASEPRI
   3d050:	f383 8811 	msr	BASEPRI, r3
   3d054:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   3d058:	483b      	ldr	r0, [pc, #236]	; (3d148 <z_unpend_first_thread+0x104>)
   3d05a:	f000 fb11 	bl	3d680 <z_spin_lock_valid>
   3d05e:	b968      	cbnz	r0, 3d07c <z_unpend_first_thread+0x38>
   3d060:	234a      	movs	r3, #74	; 0x4a
   3d062:	4a3a      	ldr	r2, [pc, #232]	; (3d14c <z_unpend_first_thread+0x108>)
   3d064:	493a      	ldr	r1, [pc, #232]	; (3d150 <z_unpend_first_thread+0x10c>)
   3d066:	483b      	ldr	r0, [pc, #236]	; (3d154 <z_unpend_first_thread+0x110>)
   3d068:	f003 facb 	bl	40602 <printk>
   3d06c:	4936      	ldr	r1, [pc, #216]	; (3d148 <z_unpend_first_thread+0x104>)
   3d06e:	483a      	ldr	r0, [pc, #232]	; (3d158 <z_unpend_first_thread+0x114>)
   3d070:	f003 fac7 	bl	40602 <printk>
   3d074:	214a      	movs	r1, #74	; 0x4a
   3d076:	4835      	ldr	r0, [pc, #212]	; (3d14c <z_unpend_first_thread+0x108>)
   3d078:	f003 fb86 	bl	40788 <assert_post_action>
	z_spin_lock_set_owner(l);
   3d07c:	4832      	ldr	r0, [pc, #200]	; (3d148 <z_unpend_first_thread+0x104>)
   3d07e:	f000 fb1d 	bl	3d6bc <z_spin_lock_set_owner>
		ret = _priq_wait_best(&wait_q->waitq);
   3d082:	4620      	mov	r0, r4
   3d084:	f007 fd6e 	bl	44b64 <z_priq_dumb_best>
   3d088:	4604      	mov	r4, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   3d08a:	482f      	ldr	r0, [pc, #188]	; (3d148 <z_unpend_first_thread+0x104>)
   3d08c:	f000 fb06 	bl	3d69c <z_spin_unlock_valid>
   3d090:	b968      	cbnz	r0, 3d0ae <z_unpend_first_thread+0x6a>
   3d092:	235d      	movs	r3, #93	; 0x5d
   3d094:	4a2d      	ldr	r2, [pc, #180]	; (3d14c <z_unpend_first_thread+0x108>)
   3d096:	4931      	ldr	r1, [pc, #196]	; (3d15c <z_unpend_first_thread+0x118>)
   3d098:	482e      	ldr	r0, [pc, #184]	; (3d154 <z_unpend_first_thread+0x110>)
   3d09a:	f003 fab2 	bl	40602 <printk>
   3d09e:	492a      	ldr	r1, [pc, #168]	; (3d148 <z_unpend_first_thread+0x104>)
   3d0a0:	482f      	ldr	r0, [pc, #188]	; (3d160 <z_unpend_first_thread+0x11c>)
   3d0a2:	f003 faae 	bl	40602 <printk>
   3d0a6:	215d      	movs	r1, #93	; 0x5d
   3d0a8:	4828      	ldr	r0, [pc, #160]	; (3d14c <z_unpend_first_thread+0x108>)
   3d0aa:	f003 fb6d 	bl	40788 <assert_post_action>
	__asm__ volatile(
   3d0ae:	f385 8811 	msr	BASEPRI, r5
   3d0b2:	f3bf 8f6f 	isb	sy

static inline struct k_thread *z_unpend1_no_timeout(_wait_q_t *wait_q)
{
	struct k_thread *thread = z_find_first_thread_to_unpend(wait_q, NULL);

	if (thread != NULL) {
   3d0b6:	2c00      	cmp	r4, #0
   3d0b8:	d043      	beq.n	3d142 <z_unpend_first_thread+0xfe>
	__asm__ volatile(
   3d0ba:	f04f 0320 	mov.w	r3, #32
   3d0be:	f3ef 8511 	mrs	r5, BASEPRI
   3d0c2:	f383 8811 	msr	BASEPRI, r3
   3d0c6:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   3d0ca:	481f      	ldr	r0, [pc, #124]	; (3d148 <z_unpend_first_thread+0x104>)
   3d0cc:	f000 fad8 	bl	3d680 <z_spin_lock_valid>
   3d0d0:	b968      	cbnz	r0, 3d0ee <z_unpend_first_thread+0xaa>
   3d0d2:	234a      	movs	r3, #74	; 0x4a
   3d0d4:	4a1d      	ldr	r2, [pc, #116]	; (3d14c <z_unpend_first_thread+0x108>)
   3d0d6:	491e      	ldr	r1, [pc, #120]	; (3d150 <z_unpend_first_thread+0x10c>)
   3d0d8:	481e      	ldr	r0, [pc, #120]	; (3d154 <z_unpend_first_thread+0x110>)
   3d0da:	f003 fa92 	bl	40602 <printk>
   3d0de:	491a      	ldr	r1, [pc, #104]	; (3d148 <z_unpend_first_thread+0x104>)
   3d0e0:	481d      	ldr	r0, [pc, #116]	; (3d158 <z_unpend_first_thread+0x114>)
   3d0e2:	f003 fa8e 	bl	40602 <printk>
   3d0e6:	214a      	movs	r1, #74	; 0x4a
   3d0e8:	4818      	ldr	r0, [pc, #96]	; (3d14c <z_unpend_first_thread+0x108>)
   3d0ea:	f003 fb4d 	bl	40788 <assert_post_action>
	z_spin_lock_set_owner(l);
   3d0ee:	4816      	ldr	r0, [pc, #88]	; (3d148 <z_unpend_first_thread+0x104>)
   3d0f0:	f000 fae4 	bl	3d6bc <z_spin_lock_set_owner>
		_priq_wait_remove(&pended_on(thread)->waitq, thread);
   3d0f4:	f104 0008 	add.w	r0, r4, #8
   3d0f8:	f7ff f81a 	bl	3c130 <pended_on.isra.17>
   3d0fc:	4621      	mov	r1, r4
   3d0fe:	f7ff f9f5 	bl	3c4ec <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
   3d102:	7b63      	ldrb	r3, [r4, #13]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   3d104:	4810      	ldr	r0, [pc, #64]	; (3d148 <z_unpend_first_thread+0x104>)
   3d106:	f023 0302 	bic.w	r3, r3, #2
   3d10a:	7363      	strb	r3, [r4, #13]
   3d10c:	f000 fac6 	bl	3d69c <z_spin_unlock_valid>
   3d110:	b968      	cbnz	r0, 3d12e <z_unpend_first_thread+0xea>
   3d112:	235d      	movs	r3, #93	; 0x5d
   3d114:	4a0d      	ldr	r2, [pc, #52]	; (3d14c <z_unpend_first_thread+0x108>)
   3d116:	4911      	ldr	r1, [pc, #68]	; (3d15c <z_unpend_first_thread+0x118>)
   3d118:	480e      	ldr	r0, [pc, #56]	; (3d154 <z_unpend_first_thread+0x110>)
   3d11a:	f003 fa72 	bl	40602 <printk>
   3d11e:	490a      	ldr	r1, [pc, #40]	; (3d148 <z_unpend_first_thread+0x104>)
   3d120:	480f      	ldr	r0, [pc, #60]	; (3d160 <z_unpend_first_thread+0x11c>)
   3d122:	f003 fa6e 	bl	40602 <printk>
   3d126:	215d      	movs	r1, #93	; 0x5d
   3d128:	4808      	ldr	r0, [pc, #32]	; (3d14c <z_unpend_first_thread+0x108>)
   3d12a:	f003 fb2d 	bl	40788 <assert_post_action>
	__asm__ volatile(
   3d12e:	f385 8811 	msr	BASEPRI, r5
   3d132:	f3bf 8f6f 	isb	sy
	thread->base.pended_on = NULL;
   3d136:	2300      	movs	r3, #0
	return z_abort_timeout(&thread->base.timeout);
   3d138:	f104 0018 	add.w	r0, r4, #24
   3d13c:	60a3      	str	r3, [r4, #8]
   3d13e:	f000 fe2f 	bl	3dda0 <z_abort_timeout>
}
   3d142:	4620      	mov	r0, r4
   3d144:	bd38      	pop	{r3, r4, r5, pc}
   3d146:	bf00      	nop
   3d148:	20029744 	.word	0x20029744
   3d14c:	000498fb 	.word	0x000498fb
   3d150:	00049921 	.word	0x00049921
   3d154:	0004764f 	.word	0x0004764f
   3d158:	00049936 	.word	0x00049936
   3d15c:	0004994e 	.word	0x0004994e
   3d160:	00049965 	.word	0x00049965

0003d164 <z_sched_init>:
		sys_dlist_init(&_kernel.ready_q.runq.queues[i]);
	}
#endif

#ifdef CONFIG_TIMESLICING
	k_sched_time_slice_set(CONFIG_TIMESLICE_SIZE,
   3d164:	2100      	movs	r1, #0
	list->head = (sys_dnode_t *)list;
   3d166:	4b04      	ldr	r3, [pc, #16]	; (3d178 <z_sched_init+0x14>)
   3d168:	4608      	mov	r0, r1
   3d16a:	f103 0228 	add.w	r2, r3, #40	; 0x28
	list->tail = (sys_dnode_t *)list;
   3d16e:	e9c3 220a 	strd	r2, r2, [r3, #40]	; 0x28
   3d172:	f7ff b80b 	b.w	3c18c <k_sched_time_slice_set>
   3d176:	bf00      	nop
   3d178:	2002970c 	.word	0x2002970c

0003d17c <z_impl_k_yield>:
#include <syscalls/k_thread_deadline_set_mrsh.c>
#endif
#endif

void z_impl_k_yield(void)
{
   3d17c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   3d17e:	f3ef 8305 	mrs	r3, IPSR
	__ASSERT(!arch_is_in_isr(), "");
   3d182:	b173      	cbz	r3, 3d1a2 <z_impl_k_yield+0x26>
   3d184:	4945      	ldr	r1, [pc, #276]	; (3d29c <z_impl_k_yield+0x120>)
   3d186:	f240 430d 	movw	r3, #1037	; 0x40d
   3d18a:	4a45      	ldr	r2, [pc, #276]	; (3d2a0 <z_impl_k_yield+0x124>)
   3d18c:	4845      	ldr	r0, [pc, #276]	; (3d2a4 <z_impl_k_yield+0x128>)
   3d18e:	f003 fa38 	bl	40602 <printk>
   3d192:	4845      	ldr	r0, [pc, #276]	; (3d2a8 <z_impl_k_yield+0x12c>)
   3d194:	f003 fa35 	bl	40602 <printk>
   3d198:	f240 410d 	movw	r1, #1037	; 0x40d
   3d19c:	4840      	ldr	r0, [pc, #256]	; (3d2a0 <z_impl_k_yield+0x124>)
   3d19e:	f003 faf3 	bl	40788 <assert_post_action>

	if (!z_is_idle_thread_object(_current)) {
   3d1a2:	4c42      	ldr	r4, [pc, #264]	; (3d2ac <z_impl_k_yield+0x130>)
   3d1a4:	4e42      	ldr	r6, [pc, #264]	; (3d2b0 <z_impl_k_yield+0x134>)
   3d1a6:	68a2      	ldr	r2, [r4, #8]
   3d1a8:	42b2      	cmp	r2, r6
   3d1aa:	d05f      	beq.n	3d26c <z_impl_k_yield+0xf0>
	__asm__ volatile(
   3d1ac:	f04f 0320 	mov.w	r3, #32
   3d1b0:	f3ef 8711 	mrs	r7, BASEPRI
   3d1b4:	f383 8811 	msr	BASEPRI, r3
   3d1b8:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   3d1bc:	483d      	ldr	r0, [pc, #244]	; (3d2b4 <z_impl_k_yield+0x138>)
   3d1be:	f000 fa5f 	bl	3d680 <z_spin_lock_valid>
   3d1c2:	b968      	cbnz	r0, 3d1e0 <z_impl_k_yield+0x64>
   3d1c4:	234a      	movs	r3, #74	; 0x4a
   3d1c6:	4a3c      	ldr	r2, [pc, #240]	; (3d2b8 <z_impl_k_yield+0x13c>)
   3d1c8:	493c      	ldr	r1, [pc, #240]	; (3d2bc <z_impl_k_yield+0x140>)
   3d1ca:	4836      	ldr	r0, [pc, #216]	; (3d2a4 <z_impl_k_yield+0x128>)
   3d1cc:	f003 fa19 	bl	40602 <printk>
   3d1d0:	4938      	ldr	r1, [pc, #224]	; (3d2b4 <z_impl_k_yield+0x138>)
   3d1d2:	483b      	ldr	r0, [pc, #236]	; (3d2c0 <z_impl_k_yield+0x144>)
   3d1d4:	f003 fa15 	bl	40602 <printk>
   3d1d8:	214a      	movs	r1, #74	; 0x4a
   3d1da:	4837      	ldr	r0, [pc, #220]	; (3d2b8 <z_impl_k_yield+0x13c>)
   3d1dc:	f003 fad4 	bl	40788 <assert_post_action>
	z_spin_lock_set_owner(l);
   3d1e0:	4834      	ldr	r0, [pc, #208]	; (3d2b4 <z_impl_k_yield+0x138>)
   3d1e2:	f000 fa6b 	bl	3d6bc <z_spin_lock_set_owner>
		LOCKED(&sched_spinlock) {
			if (!IS_ENABLED(CONFIG_SMP) ||
			    z_is_thread_queued(_current)) {
				_priq_run_remove(&_kernel.ready_q.runq,
   3d1e6:	68a1      	ldr	r1, [r4, #8]
   3d1e8:	4836      	ldr	r0, [pc, #216]	; (3d2c4 <z_impl_k_yield+0x148>)
   3d1ea:	f7ff f97f 	bl	3c4ec <z_priq_dumb_remove>
						 _current);
			}
			_priq_run_add(&_kernel.ready_q.runq, _current);
   3d1ee:	68a5      	ldr	r5, [r4, #8]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   3d1f0:	42b5      	cmp	r5, r6
   3d1f2:	d10b      	bne.n	3d20c <z_impl_k_yield+0x90>
   3d1f4:	4934      	ldr	r1, [pc, #208]	; (3d2c8 <z_impl_k_yield+0x14c>)
   3d1f6:	482b      	ldr	r0, [pc, #172]	; (3d2a4 <z_impl_k_yield+0x128>)
   3d1f8:	f240 3302 	movw	r3, #770	; 0x302
   3d1fc:	4a28      	ldr	r2, [pc, #160]	; (3d2a0 <z_impl_k_yield+0x124>)
   3d1fe:	f003 fa00 	bl	40602 <printk>
   3d202:	f240 3102 	movw	r1, #770	; 0x302
   3d206:	4826      	ldr	r0, [pc, #152]	; (3d2a0 <z_impl_k_yield+0x124>)
   3d208:	f003 fabe 	bl	40788 <assert_post_action>
	return list->head == list;
   3d20c:	e9d4 310a 	ldrd	r3, r1, [r4, #40]	; 0x28
	return sys_dlist_is_empty(list) ? NULL : list->head;
   3d210:	4a2c      	ldr	r2, [pc, #176]	; (3d2c4 <z_impl_k_yield+0x148>)
   3d212:	4293      	cmp	r3, r2
   3d214:	d03b      	beq.n	3d28e <z_impl_k_yield+0x112>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   3d216:	2b00      	cmp	r3, #0
   3d218:	d039      	beq.n	3d28e <z_impl_k_yield+0x112>
	if (thread_1->base.prio < thread_2->base.prio) {
   3d21a:	f995 000e 	ldrsb.w	r0, [r5, #14]
   3d21e:	f993 600e 	ldrsb.w	r6, [r3, #14]
   3d222:	4286      	cmp	r6, r0
   3d224:	dd2e      	ble.n	3d284 <z_impl_k_yield+0x108>
	node->prev = successor->prev;
   3d226:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   3d228:	e9c5 3200 	strd	r3, r2, [r5]
	successor->prev->next = node;
   3d22c:	6015      	str	r5, [r2, #0]
	successor->prev = node;
   3d22e:	605d      	str	r5, [r3, #4]
			z_mark_thread_as_queued(_current);
   3d230:	68a2      	ldr	r2, [r4, #8]
			update_cache(1);
   3d232:	2001      	movs	r0, #1
	thread->base.thread_state |= states;
   3d234:	7b53      	ldrb	r3, [r2, #13]
   3d236:	f063 037f 	orn	r3, r3, #127	; 0x7f
   3d23a:	7353      	strb	r3, [r2, #13]
   3d23c:	f7ff f9da 	bl	3c5f4 <update_cache>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   3d240:	481c      	ldr	r0, [pc, #112]	; (3d2b4 <z_impl_k_yield+0x138>)
   3d242:	f000 fa2b 	bl	3d69c <z_spin_unlock_valid>
   3d246:	b968      	cbnz	r0, 3d264 <z_impl_k_yield+0xe8>
   3d248:	235d      	movs	r3, #93	; 0x5d
   3d24a:	4a1b      	ldr	r2, [pc, #108]	; (3d2b8 <z_impl_k_yield+0x13c>)
   3d24c:	491f      	ldr	r1, [pc, #124]	; (3d2cc <z_impl_k_yield+0x150>)
   3d24e:	4815      	ldr	r0, [pc, #84]	; (3d2a4 <z_impl_k_yield+0x128>)
   3d250:	f003 f9d7 	bl	40602 <printk>
   3d254:	4917      	ldr	r1, [pc, #92]	; (3d2b4 <z_impl_k_yield+0x138>)
   3d256:	481e      	ldr	r0, [pc, #120]	; (3d2d0 <z_impl_k_yield+0x154>)
   3d258:	f003 f9d3 	bl	40602 <printk>
   3d25c:	215d      	movs	r1, #93	; 0x5d
   3d25e:	4816      	ldr	r0, [pc, #88]	; (3d2b8 <z_impl_k_yield+0x13c>)
   3d260:	f003 fa92 	bl	40788 <assert_post_action>
	__asm__ volatile(
   3d264:	f387 8811 	msr	BASEPRI, r7
   3d268:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
   3d26c:	f04f 0320 	mov.w	r3, #32
   3d270:	f3ef 8011 	mrs	r0, BASEPRI
   3d274:	f383 8811 	msr	BASEPRI, r3
   3d278:	f3bf 8f6f 	isb	sy
		}
	}
	z_swap_unlocked();
}
   3d27c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   3d280:	f7e9 b982 	b.w	26588 <arch_swap>
	return (node == list->tail) ? NULL : node->next;
   3d284:	4299      	cmp	r1, r3
   3d286:	d002      	beq.n	3d28e <z_impl_k_yield+0x112>
   3d288:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   3d28a:	2b00      	cmp	r3, #0
   3d28c:	d1c7      	bne.n	3d21e <z_impl_k_yield+0xa2>
	node->prev = list->tail;
   3d28e:	e9c5 2100 	strd	r2, r1, [r5]
	list->tail->next = node;
   3d292:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   3d294:	601d      	str	r5, [r3, #0]
	list->tail = node;
   3d296:	62e5      	str	r5, [r4, #44]	; 0x2c
   3d298:	e7ca      	b.n	3d230 <z_impl_k_yield+0xb4>
   3d29a:	bf00      	nop
   3d29c:	0004d33b 	.word	0x0004d33b
   3d2a0:	0004d3d3 	.word	0x0004d3d3
   3d2a4:	0004764f 	.word	0x0004764f
   3d2a8:	0004a297 	.word	0x0004a297
   3d2ac:	2002970c 	.word	0x2002970c
   3d2b0:	2002553c 	.word	0x2002553c
   3d2b4:	20029744 	.word	0x20029744
   3d2b8:	000498fb 	.word	0x000498fb
   3d2bc:	00049921 	.word	0x00049921
   3d2c0:	00049936 	.word	0x00049936
   3d2c4:	20029734 	.word	0x20029734
   3d2c8:	0004d42b 	.word	0x0004d42b
   3d2cc:	0004994e 	.word	0x0004994e
   3d2d0:	00049965 	.word	0x00049965

0003d2d4 <z_tick_sleep>:
}
#include <syscalls/k_yield_mrsh.c>
#endif

static s32_t z_tick_sleep(s32_t ticks)
{
   3d2d4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   3d2d6:	4604      	mov	r4, r0
   3d2d8:	f3ef 8305 	mrs	r3, IPSR
#ifdef CONFIG_MULTITHREADING
	u32_t expected_wakeup_time;

	__ASSERT(!arch_is_in_isr(), "");
   3d2dc:	b173      	cbz	r3, 3d2fc <z_tick_sleep+0x28>
   3d2de:	493b      	ldr	r1, [pc, #236]	; (3d3cc <z_tick_sleep+0xf8>)
   3d2e0:	f240 432b 	movw	r3, #1067	; 0x42b
   3d2e4:	4a3a      	ldr	r2, [pc, #232]	; (3d3d0 <z_tick_sleep+0xfc>)
   3d2e6:	483b      	ldr	r0, [pc, #236]	; (3d3d4 <z_tick_sleep+0x100>)
   3d2e8:	f003 f98b 	bl	40602 <printk>
   3d2ec:	483a      	ldr	r0, [pc, #232]	; (3d3d8 <z_tick_sleep+0x104>)
   3d2ee:	f003 f988 	bl	40602 <printk>
   3d2f2:	f240 412b 	movw	r1, #1067	; 0x42b
   3d2f6:	4836      	ldr	r0, [pc, #216]	; (3d3d0 <z_tick_sleep+0xfc>)
   3d2f8:	f003 fa46 	bl	40788 <assert_post_action>

	K_DEBUG("thread %p for %d ticks\n", _current, ticks);

	/* wait of 0 ms is treated as a 'yield' */
	if (ticks == 0) {
   3d2fc:	b924      	cbnz	r4, 3d308 <z_tick_sleep+0x34>
	z_impl_k_yield();
   3d2fe:	f7ff ff3d 	bl	3d17c <z_impl_k_yield>
		return ticks;
	}
#endif

	return 0;
}
   3d302:	4620      	mov	r0, r4
   3d304:	b003      	add	sp, #12
   3d306:	bdf0      	pop	{r4, r5, r6, r7, pc}
	expected_wakeup_time = ticks + z_tick_get_32();
   3d308:	f007 fcd7 	bl	44cba <z_tick_get_32>
	struct k_spinlock local_lock = {};
   3d30c:	2300      	movs	r3, #0
	ticks += _TICK_ALIGN;
   3d30e:	1c66      	adds	r6, r4, #1
	expected_wakeup_time = ticks + z_tick_get_32();
   3d310:	1834      	adds	r4, r6, r0
	struct k_spinlock local_lock = {};
   3d312:	9301      	str	r3, [sp, #4]
   3d314:	f04f 0320 	mov.w	r3, #32
   3d318:	f3ef 8711 	mrs	r7, BASEPRI
   3d31c:	f383 8811 	msr	BASEPRI, r3
   3d320:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   3d324:	a801      	add	r0, sp, #4
   3d326:	f000 f9ab 	bl	3d680 <z_spin_lock_valid>
   3d32a:	b968      	cbnz	r0, 3d348 <z_tick_sleep+0x74>
   3d32c:	234a      	movs	r3, #74	; 0x4a
   3d32e:	4a2b      	ldr	r2, [pc, #172]	; (3d3dc <z_tick_sleep+0x108>)
   3d330:	492b      	ldr	r1, [pc, #172]	; (3d3e0 <z_tick_sleep+0x10c>)
   3d332:	4828      	ldr	r0, [pc, #160]	; (3d3d4 <z_tick_sleep+0x100>)
   3d334:	f003 f965 	bl	40602 <printk>
   3d338:	a901      	add	r1, sp, #4
   3d33a:	482a      	ldr	r0, [pc, #168]	; (3d3e4 <z_tick_sleep+0x110>)
   3d33c:	f003 f961 	bl	40602 <printk>
   3d340:	214a      	movs	r1, #74	; 0x4a
   3d342:	4826      	ldr	r0, [pc, #152]	; (3d3dc <z_tick_sleep+0x108>)
   3d344:	f003 fa20 	bl	40788 <assert_post_action>
	pending_current = _current;
   3d348:	4d27      	ldr	r5, [pc, #156]	; (3d3e8 <z_tick_sleep+0x114>)
	z_spin_lock_set_owner(l);
   3d34a:	a801      	add	r0, sp, #4
   3d34c:	f000 f9b6 	bl	3d6bc <z_spin_lock_set_owner>
   3d350:	4b26      	ldr	r3, [pc, #152]	; (3d3ec <z_tick_sleep+0x118>)
   3d352:	68a8      	ldr	r0, [r5, #8]
   3d354:	6018      	str	r0, [r3, #0]
	z_remove_thread_from_ready_q(_current);
   3d356:	f7ff fc93 	bl	3cc80 <z_remove_thread_from_ready_q>
	z_add_timeout(&th->base.timeout, z_thread_timeout, ticks);
   3d35a:	68a8      	ldr	r0, [r5, #8]
   3d35c:	4632      	mov	r2, r6
   3d35e:	3018      	adds	r0, #24
   3d360:	4923      	ldr	r1, [pc, #140]	; (3d3f0 <z_tick_sleep+0x11c>)
   3d362:	f000 fc77 	bl	3dc54 <z_add_timeout>
	z_mark_thread_as_suspended(_current);
   3d366:	68aa      	ldr	r2, [r5, #8]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   3d368:	a801      	add	r0, sp, #4
	thread->base.thread_state |= _THREAD_SUSPENDED;
   3d36a:	7b53      	ldrb	r3, [r2, #13]
   3d36c:	f043 0310 	orr.w	r3, r3, #16
   3d370:	7353      	strb	r3, [r2, #13]
   3d372:	f000 f993 	bl	3d69c <z_spin_unlock_valid>
   3d376:	b968      	cbnz	r0, 3d394 <z_tick_sleep+0xc0>
   3d378:	2374      	movs	r3, #116	; 0x74
   3d37a:	4a18      	ldr	r2, [pc, #96]	; (3d3dc <z_tick_sleep+0x108>)
   3d37c:	491d      	ldr	r1, [pc, #116]	; (3d3f4 <z_tick_sleep+0x120>)
   3d37e:	4815      	ldr	r0, [pc, #84]	; (3d3d4 <z_tick_sleep+0x100>)
   3d380:	f003 f93f 	bl	40602 <printk>
   3d384:	a901      	add	r1, sp, #4
   3d386:	481c      	ldr	r0, [pc, #112]	; (3d3f8 <z_tick_sleep+0x124>)
   3d388:	f003 f93b 	bl	40602 <printk>
   3d38c:	2174      	movs	r1, #116	; 0x74
   3d38e:	4813      	ldr	r0, [pc, #76]	; (3d3dc <z_tick_sleep+0x108>)
   3d390:	f003 f9fa 	bl	40788 <assert_post_action>
   3d394:	4638      	mov	r0, r7
   3d396:	f7e9 f8f7 	bl	26588 <arch_swap>
	__ASSERT(!z_is_thread_state_set(_current, _THREAD_SUSPENDED), "");
   3d39a:	68ab      	ldr	r3, [r5, #8]
   3d39c:	7b5b      	ldrb	r3, [r3, #13]
   3d39e:	06db      	lsls	r3, r3, #27
   3d3a0:	d50e      	bpl.n	3d3c0 <z_tick_sleep+0xec>
   3d3a2:	4916      	ldr	r1, [pc, #88]	; (3d3fc <z_tick_sleep+0x128>)
   3d3a4:	f44f 6389 	mov.w	r3, #1096	; 0x448
   3d3a8:	4a09      	ldr	r2, [pc, #36]	; (3d3d0 <z_tick_sleep+0xfc>)
   3d3aa:	480a      	ldr	r0, [pc, #40]	; (3d3d4 <z_tick_sleep+0x100>)
   3d3ac:	f003 f929 	bl	40602 <printk>
   3d3b0:	4809      	ldr	r0, [pc, #36]	; (3d3d8 <z_tick_sleep+0x104>)
   3d3b2:	f003 f926 	bl	40602 <printk>
   3d3b6:	f44f 6189 	mov.w	r1, #1096	; 0x448
   3d3ba:	4805      	ldr	r0, [pc, #20]	; (3d3d0 <z_tick_sleep+0xfc>)
   3d3bc:	f003 f9e4 	bl	40788 <assert_post_action>
	ticks = expected_wakeup_time - z_tick_get_32();
   3d3c0:	f007 fc7b 	bl	44cba <z_tick_get_32>
   3d3c4:	1a24      	subs	r4, r4, r0
   3d3c6:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
   3d3ca:	e79a      	b.n	3d302 <z_tick_sleep+0x2e>
   3d3cc:	0004d33b 	.word	0x0004d33b
   3d3d0:	0004d3d3 	.word	0x0004d3d3
   3d3d4:	0004764f 	.word	0x0004764f
   3d3d8:	0004a297 	.word	0x0004a297
   3d3dc:	000498fb 	.word	0x000498fb
   3d3e0:	00049921 	.word	0x00049921
   3d3e4:	00049936 	.word	0x00049936
   3d3e8:	2002970c 	.word	0x2002970c
   3d3ec:	20029740 	.word	0x20029740
   3d3f0:	0003c859 	.word	0x0003c859
   3d3f4:	0004994e 	.word	0x0004994e
   3d3f8:	00049965 	.word	0x00049965
   3d3fc:	0004d44c 	.word	0x0004d44c

0003d400 <z_impl_k_sleep>:

s32_t z_impl_k_sleep(int ms)
{
   3d400:	b538      	push	{r3, r4, r5, lr}
   3d402:	4604      	mov	r4, r0
   3d404:	f3ef 8305 	mrs	r3, IPSR
	s32_t ticks;

	__ASSERT(!arch_is_in_isr(), "");
   3d408:	b173      	cbz	r3, 3d428 <z_impl_k_sleep+0x28>
   3d40a:	4916      	ldr	r1, [pc, #88]	; (3d464 <z_impl_k_sleep+0x64>)
   3d40c:	f240 4357 	movw	r3, #1111	; 0x457
   3d410:	4a15      	ldr	r2, [pc, #84]	; (3d468 <z_impl_k_sleep+0x68>)
   3d412:	4816      	ldr	r0, [pc, #88]	; (3d46c <z_impl_k_sleep+0x6c>)
   3d414:	f003 f8f5 	bl	40602 <printk>
   3d418:	4815      	ldr	r0, [pc, #84]	; (3d470 <z_impl_k_sleep+0x70>)
   3d41a:	f003 f8f2 	bl	40602 <printk>
   3d41e:	f240 4157 	movw	r1, #1111	; 0x457
   3d422:	4811      	ldr	r0, [pc, #68]	; (3d468 <z_impl_k_sleep+0x68>)
   3d424:	f003 f9b0 	bl	40788 <assert_post_action>

	if (ms == K_FOREVER) {
   3d428:	1c63      	adds	r3, r4, #1
   3d42a:	d105      	bne.n	3d438 <z_impl_k_sleep+0x38>
		k_thread_suspend(_current);
   3d42c:	4b11      	ldr	r3, [pc, #68]	; (3d474 <z_impl_k_sleep+0x74>)
   3d42e:	6898      	ldr	r0, [r3, #8]
	z_impl_k_thread_suspend(thread);
   3d430:	f000 fa82 	bl	3d938 <z_impl_k_thread_suspend>
	}

	ticks = k_ms_to_ticks_ceil32(ms);
	ticks = z_tick_sleep(ticks);
	return k_ticks_to_ms_floor64(ticks);
}
   3d434:	4620      	mov	r0, r4
   3d436:	bd38      	pop	{r3, r4, r5, pc}
   3d438:	f44f 4500 	mov.w	r5, #32768	; 0x8000
   3d43c:	f240 30e7 	movw	r0, #999	; 0x3e7
   3d440:	2100      	movs	r1, #0
   3d442:	2300      	movs	r3, #0
   3d444:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   3d448:	fbe5 0104 	umlal	r0, r1, r5, r4
   3d44c:	f7df fcc6 	bl	1cddc <__aeabi_uldivmod>
	ticks = z_tick_sleep(ticks);
   3d450:	f7ff ff40 	bl	3d2d4 <z_tick_sleep>
		} else {
			return (t * to_hz + off) / from_hz;
   3d454:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   3d458:	fb80 0103 	smull	r0, r1, r0, r3
   3d45c:	0bc4      	lsrs	r4, r0, #15
   3d45e:	ea44 4441 	orr.w	r4, r4, r1, lsl #17
	return k_ticks_to_ms_floor64(ticks);
   3d462:	e7e7      	b.n	3d434 <z_impl_k_sleep+0x34>
   3d464:	0004d33b 	.word	0x0004d33b
   3d468:	0004d3d3 	.word	0x0004d3d3
   3d46c:	0004764f 	.word	0x0004764f
   3d470:	0004a297 	.word	0x0004a297
   3d474:	2002970c 	.word	0x2002970c

0003d478 <z_impl_k_current_get>:
#endif

k_tid_t z_impl_k_current_get(void)
{
	return _current;
}
   3d478:	4b01      	ldr	r3, [pc, #4]	; (3d480 <z_impl_k_current_get+0x8>)
   3d47a:	6898      	ldr	r0, [r3, #8]
   3d47c:	4770      	bx	lr
   3d47e:	bf00      	nop
   3d480:	2002970c 	.word	0x2002970c

0003d484 <z_impl_k_sem_give>:
	ARG_UNUSED(sem);
#endif
}

void z_impl_k_sem_give(struct k_sem *sem)
{
   3d484:	b570      	push	{r4, r5, r6, lr}
   3d486:	4604      	mov	r4, r0
   3d488:	f04f 0320 	mov.w	r3, #32
   3d48c:	f3ef 8611 	mrs	r6, BASEPRI
   3d490:	f383 8811 	msr	BASEPRI, r3
   3d494:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   3d498:	481a      	ldr	r0, [pc, #104]	; (3d504 <z_impl_k_sem_give+0x80>)
   3d49a:	f000 f8f1 	bl	3d680 <z_spin_lock_valid>
   3d49e:	b968      	cbnz	r0, 3d4bc <z_impl_k_sem_give+0x38>
   3d4a0:	234a      	movs	r3, #74	; 0x4a
   3d4a2:	4a19      	ldr	r2, [pc, #100]	; (3d508 <z_impl_k_sem_give+0x84>)
   3d4a4:	4919      	ldr	r1, [pc, #100]	; (3d50c <z_impl_k_sem_give+0x88>)
   3d4a6:	481a      	ldr	r0, [pc, #104]	; (3d510 <z_impl_k_sem_give+0x8c>)
   3d4a8:	f003 f8ab 	bl	40602 <printk>
   3d4ac:	4915      	ldr	r1, [pc, #84]	; (3d504 <z_impl_k_sem_give+0x80>)
   3d4ae:	4819      	ldr	r0, [pc, #100]	; (3d514 <z_impl_k_sem_give+0x90>)
   3d4b0:	f003 f8a7 	bl	40602 <printk>
   3d4b4:	214a      	movs	r1, #74	; 0x4a
   3d4b6:	4814      	ldr	r0, [pc, #80]	; (3d508 <z_impl_k_sem_give+0x84>)
   3d4b8:	f003 f966 	bl	40788 <assert_post_action>
	z_spin_lock_set_owner(l);
   3d4bc:	4811      	ldr	r0, [pc, #68]	; (3d504 <z_impl_k_sem_give+0x80>)
   3d4be:	f000 f8fd 	bl	3d6bc <z_spin_lock_set_owner>
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_thread *thread = z_unpend_first_thread(&sem->wait_q);
   3d4c2:	4620      	mov	r0, r4
   3d4c4:	f7ff fdbe 	bl	3d044 <z_unpend_first_thread>

	sys_trace_void(SYS_TRACE_ID_SEMA_GIVE);

	if (thread != NULL) {
   3d4c8:	4605      	mov	r5, r0
   3d4ca:	b170      	cbz	r0, 3d4ea <z_impl_k_sem_give+0x66>
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
   3d4cc:	7b43      	ldrb	r3, [r0, #13]
   3d4ce:	06db      	lsls	r3, r3, #27
   3d4d0:	d103      	bne.n	3d4da <z_impl_k_sem_give+0x56>
	if (z_is_thread_ready(thread)) {
   3d4d2:	6983      	ldr	r3, [r0, #24]
   3d4d4:	b90b      	cbnz	r3, 3d4da <z_impl_k_sem_give+0x56>
		z_add_thread_to_ready_q(thread);
   3d4d6:	f7ff f93f 	bl	3c758 <z_add_thread_to_ready_q>
   3d4da:	2300      	movs	r3, #0
   3d4dc:	66ab      	str	r3, [r5, #104]	; 0x68
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
		handle_poll_events(sem);
	}

	sys_trace_end_call(SYS_TRACE_ID_SEMA_GIVE);
	z_reschedule(&lock, key);
   3d4de:	4631      	mov	r1, r6
}
   3d4e0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	z_reschedule(&lock, key);
   3d4e4:	4807      	ldr	r0, [pc, #28]	; (3d504 <z_impl_k_sem_give+0x80>)
   3d4e6:	f7fe bf4d 	b.w	3c384 <z_reschedule>
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
   3d4ea:	e9d4 3202 	ldrd	r3, r2, [r4, #8]
   3d4ee:	429a      	cmp	r2, r3
   3d4f0:	bf18      	it	ne
   3d4f2:	3301      	addne	r3, #1
	z_handle_obj_poll_events(&sem->poll_events, K_POLL_STATE_SEM_AVAILABLE);
   3d4f4:	2102      	movs	r1, #2
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
   3d4f6:	60a3      	str	r3, [r4, #8]
	z_handle_obj_poll_events(&sem->poll_events, K_POLL_STATE_SEM_AVAILABLE);
   3d4f8:	f104 0010 	add.w	r0, r4, #16
   3d4fc:	f007 fc6b 	bl	44dd6 <z_handle_obj_poll_events>
   3d500:	e7ed      	b.n	3d4de <z_impl_k_sem_give+0x5a>
   3d502:	bf00      	nop
   3d504:	20029750 	.word	0x20029750
   3d508:	000498fb 	.word	0x000498fb
   3d50c:	00049921 	.word	0x00049921
   3d510:	0004764f 	.word	0x0004764f
   3d514:	00049936 	.word	0x00049936

0003d518 <z_impl_k_sem_take>:
}
#include <syscalls/k_sem_give_mrsh.c>
#endif

int z_impl_k_sem_take(struct k_sem *sem, s32_t timeout)
{
   3d518:	b570      	push	{r4, r5, r6, lr}
   3d51a:	4605      	mov	r5, r0
   3d51c:	460e      	mov	r6, r1
   3d51e:	f3ef 8305 	mrs	r3, IPSR
	int ret = 0;

	__ASSERT(((arch_is_in_isr() == false) || (timeout == K_NO_WAIT)), "");
   3d522:	b16b      	cbz	r3, 3d540 <z_impl_k_sem_take+0x28>
   3d524:	b161      	cbz	r1, 3d540 <z_impl_k_sem_take+0x28>
   3d526:	4934      	ldr	r1, [pc, #208]	; (3d5f8 <z_impl_k_sem_take+0xe0>)
   3d528:	238c      	movs	r3, #140	; 0x8c
   3d52a:	4a34      	ldr	r2, [pc, #208]	; (3d5fc <z_impl_k_sem_take+0xe4>)
   3d52c:	4834      	ldr	r0, [pc, #208]	; (3d600 <z_impl_k_sem_take+0xe8>)
   3d52e:	f003 f868 	bl	40602 <printk>
   3d532:	4834      	ldr	r0, [pc, #208]	; (3d604 <z_impl_k_sem_take+0xec>)
   3d534:	f003 f865 	bl	40602 <printk>
   3d538:	218c      	movs	r1, #140	; 0x8c
   3d53a:	4830      	ldr	r0, [pc, #192]	; (3d5fc <z_impl_k_sem_take+0xe4>)
   3d53c:	f003 f924 	bl	40788 <assert_post_action>
   3d540:	f04f 0320 	mov.w	r3, #32
   3d544:	f3ef 8411 	mrs	r4, BASEPRI
   3d548:	f383 8811 	msr	BASEPRI, r3
   3d54c:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   3d550:	482d      	ldr	r0, [pc, #180]	; (3d608 <z_impl_k_sem_take+0xf0>)
   3d552:	f000 f895 	bl	3d680 <z_spin_lock_valid>
   3d556:	b968      	cbnz	r0, 3d574 <z_impl_k_sem_take+0x5c>
   3d558:	234a      	movs	r3, #74	; 0x4a
   3d55a:	4a2c      	ldr	r2, [pc, #176]	; (3d60c <z_impl_k_sem_take+0xf4>)
   3d55c:	492c      	ldr	r1, [pc, #176]	; (3d610 <z_impl_k_sem_take+0xf8>)
   3d55e:	4828      	ldr	r0, [pc, #160]	; (3d600 <z_impl_k_sem_take+0xe8>)
   3d560:	f003 f84f 	bl	40602 <printk>
   3d564:	4928      	ldr	r1, [pc, #160]	; (3d608 <z_impl_k_sem_take+0xf0>)
   3d566:	482b      	ldr	r0, [pc, #172]	; (3d614 <z_impl_k_sem_take+0xfc>)
   3d568:	f003 f84b 	bl	40602 <printk>
   3d56c:	214a      	movs	r1, #74	; 0x4a
   3d56e:	4827      	ldr	r0, [pc, #156]	; (3d60c <z_impl_k_sem_take+0xf4>)
   3d570:	f003 f90a 	bl	40788 <assert_post_action>
	z_spin_lock_set_owner(l);
   3d574:	4824      	ldr	r0, [pc, #144]	; (3d608 <z_impl_k_sem_take+0xf0>)
   3d576:	f000 f8a1 	bl	3d6bc <z_spin_lock_set_owner>

	sys_trace_void(SYS_TRACE_ID_SEMA_TAKE);
	k_spinlock_key_t key = k_spin_lock(&lock);

	if (likely(sem->count > 0U)) {
   3d57a:	68ab      	ldr	r3, [r5, #8]
   3d57c:	b1cb      	cbz	r3, 3d5b2 <z_impl_k_sem_take+0x9a>
		sem->count--;
   3d57e:	3b01      	subs	r3, #1
   3d580:	60ab      	str	r3, [r5, #8]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   3d582:	4821      	ldr	r0, [pc, #132]	; (3d608 <z_impl_k_sem_take+0xf0>)
   3d584:	f000 f88a 	bl	3d69c <z_spin_unlock_valid>
   3d588:	b968      	cbnz	r0, 3d5a6 <z_impl_k_sem_take+0x8e>
   3d58a:	235d      	movs	r3, #93	; 0x5d
   3d58c:	4a1f      	ldr	r2, [pc, #124]	; (3d60c <z_impl_k_sem_take+0xf4>)
   3d58e:	4922      	ldr	r1, [pc, #136]	; (3d618 <z_impl_k_sem_take+0x100>)
   3d590:	481b      	ldr	r0, [pc, #108]	; (3d600 <z_impl_k_sem_take+0xe8>)
   3d592:	f003 f836 	bl	40602 <printk>
   3d596:	491c      	ldr	r1, [pc, #112]	; (3d608 <z_impl_k_sem_take+0xf0>)
   3d598:	4820      	ldr	r0, [pc, #128]	; (3d61c <z_impl_k_sem_take+0x104>)
   3d59a:	f003 f832 	bl	40602 <printk>
   3d59e:	215d      	movs	r1, #93	; 0x5d
   3d5a0:	481a      	ldr	r0, [pc, #104]	; (3d60c <z_impl_k_sem_take+0xf4>)
   3d5a2:	f003 f8f1 	bl	40788 <assert_post_action>
	__asm__ volatile(
   3d5a6:	f384 8811 	msr	BASEPRI, r4
   3d5aa:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		ret = 0;
   3d5ae:	2000      	movs	r0, #0
	ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);

out:
	sys_trace_end_call(SYS_TRACE_ID_SEMA_TAKE);
	return ret;
}
   3d5b0:	bd70      	pop	{r4, r5, r6, pc}
	if (timeout == K_NO_WAIT) {
   3d5b2:	b9c6      	cbnz	r6, 3d5e6 <z_impl_k_sem_take+0xce>
   3d5b4:	4814      	ldr	r0, [pc, #80]	; (3d608 <z_impl_k_sem_take+0xf0>)
   3d5b6:	f000 f871 	bl	3d69c <z_spin_unlock_valid>
   3d5ba:	b968      	cbnz	r0, 3d5d8 <z_impl_k_sem_take+0xc0>
   3d5bc:	235d      	movs	r3, #93	; 0x5d
   3d5be:	4a13      	ldr	r2, [pc, #76]	; (3d60c <z_impl_k_sem_take+0xf4>)
   3d5c0:	4915      	ldr	r1, [pc, #84]	; (3d618 <z_impl_k_sem_take+0x100>)
   3d5c2:	480f      	ldr	r0, [pc, #60]	; (3d600 <z_impl_k_sem_take+0xe8>)
   3d5c4:	f003 f81d 	bl	40602 <printk>
   3d5c8:	490f      	ldr	r1, [pc, #60]	; (3d608 <z_impl_k_sem_take+0xf0>)
   3d5ca:	4814      	ldr	r0, [pc, #80]	; (3d61c <z_impl_k_sem_take+0x104>)
   3d5cc:	f003 f819 	bl	40602 <printk>
   3d5d0:	215d      	movs	r1, #93	; 0x5d
   3d5d2:	480e      	ldr	r0, [pc, #56]	; (3d60c <z_impl_k_sem_take+0xf4>)
   3d5d4:	f003 f8d8 	bl	40788 <assert_post_action>
   3d5d8:	f384 8811 	msr	BASEPRI, r4
   3d5dc:	f3bf 8f6f 	isb	sy
		ret = -EBUSY;
   3d5e0:	f06f 000f 	mvn.w	r0, #15
		goto out;
   3d5e4:	e7e4      	b.n	3d5b0 <z_impl_k_sem_take+0x98>
	ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);
   3d5e6:	4633      	mov	r3, r6
   3d5e8:	462a      	mov	r2, r5
   3d5ea:	4621      	mov	r1, r4
}
   3d5ec:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);
   3d5f0:	4805      	ldr	r0, [pc, #20]	; (3d608 <z_impl_k_sem_take+0xf0>)
   3d5f2:	f7ff bc6b 	b.w	3cecc <z_pend_curr>
   3d5f6:	bf00      	nop
   3d5f8:	0004d4a4 	.word	0x0004d4a4
   3d5fc:	0004d484 	.word	0x0004d484
   3d600:	0004764f 	.word	0x0004764f
   3d604:	0004a297 	.word	0x0004a297
   3d608:	20029750 	.word	0x20029750
   3d60c:	000498fb 	.word	0x000498fb
   3d610:	00049921 	.word	0x00049921
   3d614:	00049936 	.word	0x00049936
   3d618:	0004994e 	.word	0x0004994e
   3d61c:	00049965 	.word	0x00049965

0003d620 <k_sys_work_q_init>:
K_THREAD_STACK_DEFINE(sys_work_q_stack, CONFIG_SYSTEM_WORKQUEUE_STACK_SIZE);

struct k_work_q k_sys_work_q;

static int k_sys_work_q_init(struct device *dev)
{
   3d620:	b510      	push	{r4, lr}
	ARG_UNUSED(dev);

	k_work_q_start(&k_sys_work_q,
   3d622:	4c08      	ldr	r4, [pc, #32]	; (3d644 <k_sys_work_q_init+0x24>)
   3d624:	f04f 33ff 	mov.w	r3, #4294967295
   3d628:	f44f 6200 	mov.w	r2, #2048	; 0x800
   3d62c:	4906      	ldr	r1, [pc, #24]	; (3d648 <k_sys_work_q_init+0x28>)
   3d62e:	4620      	mov	r0, r4
   3d630:	f000 f9d6 	bl	3d9e0 <k_work_q_start>
	return z_impl_k_thread_name_set(thread_id, value);
   3d634:	4905      	ldr	r1, [pc, #20]	; (3d64c <k_sys_work_q_init+0x2c>)
   3d636:	f104 0014 	add.w	r0, r4, #20
   3d63a:	f007 fac7 	bl	44bcc <z_impl_k_thread_name_set>
		       K_THREAD_STACK_SIZEOF(sys_work_q_stack),
		       CONFIG_SYSTEM_WORKQUEUE_PRIORITY);
	k_thread_name_set(&k_sys_work_q.thread, "sysworkq");

	return 0;
}
   3d63e:	2000      	movs	r0, #0
   3d640:	bd10      	pop	{r4, pc}
   3d642:	bf00      	nop
   3d644:	20029754 	.word	0x20029754
   3d648:	2002f680 	.word	0x2002f680
   3d64c:	0004d4d0 	.word	0x0004d4d0

0003d650 <z_setup_new_thread>:
void z_setup_new_thread(struct k_thread *new_thread,
		       k_thread_stack_t *stack, size_t stack_size,
		       k_thread_entry_t entry,
		       void *p1, void *p2, void *p3,
		       int prio, u32_t options, const char *name)
{
   3d650:	b530      	push	{r4, r5, lr}
   3d652:	b087      	sub	sp, #28
	stack_size = STACK_ROUND_DOWN(stack_size
			- sizeof(*new_thread->userspace_local_data));
#endif
#endif

	arch_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   3d654:	9d0e      	ldr	r5, [sp, #56]	; 0x38
{
   3d656:	4604      	mov	r4, r0
	arch_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   3d658:	9504      	str	r5, [sp, #16]
   3d65a:	9d0d      	ldr	r5, [sp, #52]	; 0x34
   3d65c:	9503      	str	r5, [sp, #12]
   3d65e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
   3d660:	9502      	str	r5, [sp, #8]
   3d662:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
   3d664:	9501      	str	r5, [sp, #4]
   3d666:	9d0a      	ldr	r5, [sp, #40]	; 0x28
   3d668:	9500      	str	r5, [sp, #0]
   3d66a:	f7e8 fff7 	bl	2665c <arch_new_thread>
#ifdef CONFIG_SCHED_CPU_MASK
	new_thread->base.cpu_mask = -1;
#endif
#ifdef CONFIG_ARCH_HAS_CUSTOM_SWAP_TO_MAIN
	/* _current may be null if the dummy thread is not used */
	if (!_current) {
   3d66e:	4b03      	ldr	r3, [pc, #12]	; (3d67c <z_setup_new_thread+0x2c>)
   3d670:	689b      	ldr	r3, [r3, #8]
   3d672:	b103      	cbz	r3, 3d676 <z_setup_new_thread+0x26>
	}
#endif
#ifdef CONFIG_SCHED_DEADLINE
	new_thread->base.prio_deadline = 0;
#endif
	new_thread->resource_pool = _current->resource_pool;
   3d674:	6e1b      	ldr	r3, [r3, #96]	; 0x60
   3d676:	6623      	str	r3, [r4, #96]	; 0x60
	sys_trace_thread_create(new_thread);
}
   3d678:	b007      	add	sp, #28
   3d67a:	bd30      	pop	{r4, r5, pc}
   3d67c:	2002970c 	.word	0x2002970c

0003d680 <z_spin_lock_valid>:
 * them in spinlock.h is a giant header ordering headache.
 */
#ifdef CONFIG_SPIN_VALIDATE
bool z_spin_lock_valid(struct k_spinlock *l)
{
	uintptr_t thread_cpu = l->thread_cpu;
   3d680:	6800      	ldr	r0, [r0, #0]

	if (thread_cpu) {
   3d682:	b138      	cbz	r0, 3d694 <z_spin_lock_valid+0x14>
		if ((thread_cpu & 3) == _current_cpu->id) {
   3d684:	4b04      	ldr	r3, [pc, #16]	; (3d698 <z_spin_lock_valid+0x18>)
   3d686:	f000 0003 	and.w	r0, r0, #3
   3d68a:	7d1b      	ldrb	r3, [r3, #20]
   3d68c:	1ac0      	subs	r0, r0, r3
   3d68e:	bf18      	it	ne
   3d690:	2001      	movne	r0, #1
   3d692:	4770      	bx	lr
			return false;
		}
	}
	return true;
   3d694:	2001      	movs	r0, #1
}
   3d696:	4770      	bx	lr
   3d698:	2002970c 	.word	0x2002970c

0003d69c <z_spin_unlock_valid>:

bool z_spin_unlock_valid(struct k_spinlock *l)
{
	if (l->thread_cpu != (_current_cpu->id | (uintptr_t)_current)) {
   3d69c:	4a06      	ldr	r2, [pc, #24]	; (3d6b8 <z_spin_unlock_valid+0x1c>)
   3d69e:	7d11      	ldrb	r1, [r2, #20]
   3d6a0:	6893      	ldr	r3, [r2, #8]
   3d6a2:	6802      	ldr	r2, [r0, #0]
   3d6a4:	430b      	orrs	r3, r1
   3d6a6:	429a      	cmp	r2, r3
   3d6a8:	f04f 0300 	mov.w	r3, #0
		return false;
	}
	l->thread_cpu = 0;
   3d6ac:	bf06      	itte	eq
   3d6ae:	6003      	streq	r3, [r0, #0]
	return true;
   3d6b0:	2001      	moveq	r0, #1
		return false;
   3d6b2:	4618      	movne	r0, r3
}
   3d6b4:	4770      	bx	lr
   3d6b6:	bf00      	nop
   3d6b8:	2002970c 	.word	0x2002970c

0003d6bc <z_spin_lock_set_owner>:

void z_spin_lock_set_owner(struct k_spinlock *l)
{
	l->thread_cpu = _current_cpu->id | (uintptr_t)_current;
   3d6bc:	4a02      	ldr	r2, [pc, #8]	; (3d6c8 <z_spin_lock_set_owner+0xc>)
   3d6be:	7d11      	ldrb	r1, [r2, #20]
   3d6c0:	6893      	ldr	r3, [r2, #8]
   3d6c2:	430b      	orrs	r3, r1
   3d6c4:	6003      	str	r3, [r0, #0]
}
   3d6c6:	4770      	bx	lr
   3d6c8:	2002970c 	.word	0x2002970c

0003d6cc <z_impl_k_thread_start>:
{
   3d6cc:	b538      	push	{r3, r4, r5, lr}
   3d6ce:	4604      	mov	r4, r0
	__asm__ volatile(
   3d6d0:	f04f 0320 	mov.w	r3, #32
   3d6d4:	f3ef 8511 	mrs	r5, BASEPRI
   3d6d8:	f383 8811 	msr	BASEPRI, r3
   3d6dc:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   3d6e0:	481f      	ldr	r0, [pc, #124]	; (3d760 <z_impl_k_thread_start+0x94>)
   3d6e2:	f7ff ffcd 	bl	3d680 <z_spin_lock_valid>
   3d6e6:	b968      	cbnz	r0, 3d704 <z_impl_k_thread_start+0x38>
   3d6e8:	234a      	movs	r3, #74	; 0x4a
   3d6ea:	4a1e      	ldr	r2, [pc, #120]	; (3d764 <z_impl_k_thread_start+0x98>)
   3d6ec:	491e      	ldr	r1, [pc, #120]	; (3d768 <z_impl_k_thread_start+0x9c>)
   3d6ee:	481f      	ldr	r0, [pc, #124]	; (3d76c <z_impl_k_thread_start+0xa0>)
   3d6f0:	f002 ff87 	bl	40602 <printk>
   3d6f4:	491a      	ldr	r1, [pc, #104]	; (3d760 <z_impl_k_thread_start+0x94>)
   3d6f6:	481e      	ldr	r0, [pc, #120]	; (3d770 <z_impl_k_thread_start+0xa4>)
   3d6f8:	f002 ff83 	bl	40602 <printk>
   3d6fc:	214a      	movs	r1, #74	; 0x4a
   3d6fe:	4819      	ldr	r0, [pc, #100]	; (3d764 <z_impl_k_thread_start+0x98>)
   3d700:	f003 f842 	bl	40788 <assert_post_action>
	z_spin_lock_set_owner(l);
   3d704:	4816      	ldr	r0, [pc, #88]	; (3d760 <z_impl_k_thread_start+0x94>)
   3d706:	f7ff ffd9 	bl	3d6bc <z_spin_lock_set_owner>
	if (z_has_thread_started(thread)) {
   3d70a:	7b63      	ldrb	r3, [r4, #13]
   3d70c:	075a      	lsls	r2, r3, #29
   3d70e:	d416      	bmi.n	3d73e <z_impl_k_thread_start+0x72>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   3d710:	4813      	ldr	r0, [pc, #76]	; (3d760 <z_impl_k_thread_start+0x94>)
   3d712:	f7ff ffc3 	bl	3d69c <z_spin_unlock_valid>
   3d716:	b968      	cbnz	r0, 3d734 <z_impl_k_thread_start+0x68>
   3d718:	235d      	movs	r3, #93	; 0x5d
   3d71a:	4a12      	ldr	r2, [pc, #72]	; (3d764 <z_impl_k_thread_start+0x98>)
   3d71c:	4915      	ldr	r1, [pc, #84]	; (3d774 <z_impl_k_thread_start+0xa8>)
   3d71e:	4813      	ldr	r0, [pc, #76]	; (3d76c <z_impl_k_thread_start+0xa0>)
   3d720:	f002 ff6f 	bl	40602 <printk>
   3d724:	490e      	ldr	r1, [pc, #56]	; (3d760 <z_impl_k_thread_start+0x94>)
   3d726:	4814      	ldr	r0, [pc, #80]	; (3d778 <z_impl_k_thread_start+0xac>)
   3d728:	f002 ff6b 	bl	40602 <printk>
   3d72c:	215d      	movs	r1, #93	; 0x5d
   3d72e:	480d      	ldr	r0, [pc, #52]	; (3d764 <z_impl_k_thread_start+0x98>)
   3d730:	f003 f82a 	bl	40788 <assert_post_action>
	__asm__ volatile(
   3d734:	f385 8811 	msr	BASEPRI, r5
   3d738:	f3bf 8f6f 	isb	sy
}
   3d73c:	bd38      	pop	{r3, r4, r5, pc}
	thread->base.thread_state &= ~_THREAD_PRESTART;
   3d73e:	f023 0204 	bic.w	r2, r3, #4
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
   3d742:	f013 0f1b 	tst.w	r3, #27
	thread->base.thread_state &= ~_THREAD_PRESTART;
   3d746:	7362      	strb	r2, [r4, #13]
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
   3d748:	d104      	bne.n	3d754 <z_impl_k_thread_start+0x88>
	if (z_is_thread_ready(thread)) {
   3d74a:	69a3      	ldr	r3, [r4, #24]
   3d74c:	b913      	cbnz	r3, 3d754 <z_impl_k_thread_start+0x88>
		z_add_thread_to_ready_q(thread);
   3d74e:	4620      	mov	r0, r4
   3d750:	f7ff f802 	bl	3c758 <z_add_thread_to_ready_q>
	z_reschedule(&lock, key);
   3d754:	4629      	mov	r1, r5
}
   3d756:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule(&lock, key);
   3d75a:	4801      	ldr	r0, [pc, #4]	; (3d760 <z_impl_k_thread_start+0x94>)
   3d75c:	f7fe be12 	b.w	3c384 <z_reschedule>
   3d760:	20029818 	.word	0x20029818
   3d764:	000498fb 	.word	0x000498fb
   3d768:	00049921 	.word	0x00049921
   3d76c:	0004764f 	.word	0x0004764f
   3d770:	00049936 	.word	0x00049936
   3d774:	0004994e 	.word	0x0004994e
   3d778:	00049965 	.word	0x00049965

0003d77c <z_impl_k_thread_create>:
{
   3d77c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   3d780:	b086      	sub	sp, #24
   3d782:	4604      	mov	r4, r0
   3d784:	460e      	mov	r6, r1
   3d786:	4617      	mov	r7, r2
   3d788:	4698      	mov	r8, r3
   3d78a:	9d11      	ldr	r5, [sp, #68]	; 0x44
   3d78c:	f3ef 8305 	mrs	r3, IPSR
	__ASSERT(!arch_is_in_isr(), "Threads may not be created in ISRs");
   3d790:	b173      	cbz	r3, 3d7b0 <z_impl_k_thread_create+0x34>
   3d792:	491f      	ldr	r1, [pc, #124]	; (3d810 <z_impl_k_thread_create+0x94>)
   3d794:	f240 2357 	movw	r3, #599	; 0x257
   3d798:	4a1e      	ldr	r2, [pc, #120]	; (3d814 <z_impl_k_thread_create+0x98>)
   3d79a:	481f      	ldr	r0, [pc, #124]	; (3d818 <z_impl_k_thread_create+0x9c>)
   3d79c:	f002 ff31 	bl	40602 <printk>
   3d7a0:	481e      	ldr	r0, [pc, #120]	; (3d81c <z_impl_k_thread_create+0xa0>)
   3d7a2:	f002 ff2e 	bl	40602 <printk>
   3d7a6:	f240 2157 	movw	r1, #599	; 0x257
   3d7aa:	481a      	ldr	r0, [pc, #104]	; (3d814 <z_impl_k_thread_create+0x98>)
   3d7ac:	f002 ffec 	bl	40788 <assert_post_action>
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   3d7b0:	2300      	movs	r3, #0
   3d7b2:	9305      	str	r3, [sp, #20]
   3d7b4:	9b10      	ldr	r3, [sp, #64]	; 0x40
   3d7b6:	463a      	mov	r2, r7
   3d7b8:	9304      	str	r3, [sp, #16]
   3d7ba:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   3d7bc:	4631      	mov	r1, r6
   3d7be:	9303      	str	r3, [sp, #12]
   3d7c0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   3d7c2:	4620      	mov	r0, r4
   3d7c4:	9302      	str	r3, [sp, #8]
   3d7c6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   3d7c8:	9301      	str	r3, [sp, #4]
   3d7ca:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   3d7cc:	9300      	str	r3, [sp, #0]
   3d7ce:	4643      	mov	r3, r8
   3d7d0:	f7ff ff3e 	bl	3d650 <z_setup_new_thread>
	if (delay != K_FOREVER) {
   3d7d4:	1c6b      	adds	r3, r5, #1
   3d7d6:	d003      	beq.n	3d7e0 <z_impl_k_thread_create+0x64>
	if (delay == 0) {
   3d7d8:	b935      	cbnz	r5, 3d7e8 <z_impl_k_thread_create+0x6c>
	z_impl_k_thread_start(thread);
   3d7da:	4620      	mov	r0, r4
   3d7dc:	f7ff ff76 	bl	3d6cc <z_impl_k_thread_start>
}
   3d7e0:	4620      	mov	r0, r4
   3d7e2:	b006      	add	sp, #24
   3d7e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			return (u32_t)((t * to_hz + off) / from_hz);
   3d7e8:	f44f 4600 	mov.w	r6, #32768	; 0x8000
   3d7ec:	f240 30e7 	movw	r0, #999	; 0x3e7
   3d7f0:	2100      	movs	r1, #0
   3d7f2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   3d7f6:	2300      	movs	r3, #0
   3d7f8:	fbe6 0105 	umlal	r0, r1, r6, r5
   3d7fc:	f7df faee 	bl	1cddc <__aeabi_uldivmod>
   3d800:	4907      	ldr	r1, [pc, #28]	; (3d820 <z_impl_k_thread_create+0xa4>)
   3d802:	1c42      	adds	r2, r0, #1
   3d804:	f104 0018 	add.w	r0, r4, #24
   3d808:	f000 fa24 	bl	3dc54 <z_add_timeout>
   3d80c:	e7e8      	b.n	3d7e0 <z_impl_k_thread_create+0x64>
   3d80e:	bf00      	nop
   3d810:	0004d33b 	.word	0x0004d33b
   3d814:	0004d4d9 	.word	0x0004d4d9
   3d818:	0004764f 	.word	0x0004764f
   3d81c:	0004d4fc 	.word	0x0004d4fc
   3d820:	0003c859 	.word	0x0003c859

0003d824 <z_init_static_threads>:
{
   3d824:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	_FOREACH_STATIC_THREAD(thread_data) {
   3d828:	4f3c      	ldr	r7, [pc, #240]	; (3d91c <z_init_static_threads+0xf8>)
   3d82a:	4d3d      	ldr	r5, [pc, #244]	; (3d920 <z_init_static_threads+0xfc>)
   3d82c:	463e      	mov	r6, r7
   3d82e:	f8df 8100 	ldr.w	r8, [pc, #256]	; 3d930 <z_init_static_threads+0x10c>
{
   3d832:	b087      	sub	sp, #28
	_FOREACH_STATIC_THREAD(thread_data) {
   3d834:	42bd      	cmp	r5, r7
   3d836:	d90e      	bls.n	3d856 <z_init_static_threads+0x32>
   3d838:	493a      	ldr	r1, [pc, #232]	; (3d924 <z_init_static_threads+0x100>)
   3d83a:	f240 23e7 	movw	r3, #743	; 0x2e7
   3d83e:	4642      	mov	r2, r8
   3d840:	4839      	ldr	r0, [pc, #228]	; (3d928 <z_init_static_threads+0x104>)
   3d842:	f002 fede 	bl	40602 <printk>
   3d846:	4839      	ldr	r0, [pc, #228]	; (3d92c <z_init_static_threads+0x108>)
   3d848:	f002 fedb 	bl	40602 <printk>
   3d84c:	f240 21e7 	movw	r1, #743	; 0x2e7
   3d850:	4640      	mov	r0, r8
   3d852:	f002 ff99 	bl	40788 <assert_post_action>
   3d856:	42b5      	cmp	r5, r6
   3d858:	f105 0430 	add.w	r4, r5, #48	; 0x30
   3d85c:	d31f      	bcc.n	3d89e <z_init_static_threads+0x7a>
	k_sched_lock();
   3d85e:	f7fe fdcd 	bl	3c3fc <k_sched_lock>
	_FOREACH_STATIC_THREAD(thread_data) {
   3d862:	4c2f      	ldr	r4, [pc, #188]	; (3d920 <z_init_static_threads+0xfc>)
   3d864:	4d32      	ldr	r5, [pc, #200]	; (3d930 <z_init_static_threads+0x10c>)
   3d866:	f8df 80bc 	ldr.w	r8, [pc, #188]	; 3d924 <z_init_static_threads+0x100>
   3d86a:	f8df 90bc 	ldr.w	r9, [pc, #188]	; 3d928 <z_init_static_threads+0x104>
   3d86e:	42b4      	cmp	r4, r6
   3d870:	d90e      	bls.n	3d890 <z_init_static_threads+0x6c>
   3d872:	4641      	mov	r1, r8
   3d874:	f240 3306 	movw	r3, #774	; 0x306
   3d878:	462a      	mov	r2, r5
   3d87a:	4648      	mov	r0, r9
   3d87c:	f002 fec1 	bl	40602 <printk>
   3d880:	482a      	ldr	r0, [pc, #168]	; (3d92c <z_init_static_threads+0x108>)
   3d882:	f002 febe 	bl	40602 <printk>
   3d886:	f240 3106 	movw	r1, #774	; 0x306
   3d88a:	4628      	mov	r0, r5
   3d88c:	f002 ff7c 	bl	40788 <assert_post_action>
   3d890:	42b4      	cmp	r4, r6
   3d892:	d321      	bcc.n	3d8d8 <z_init_static_threads+0xb4>
}
   3d894:	b007      	add	sp, #28
   3d896:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
	k_sched_unlock();
   3d89a:	f7fe bee1 	b.w	3c660 <k_sched_unlock>
		z_setup_new_thread(
   3d89e:	f854 3c04 	ldr.w	r3, [r4, #-4]
   3d8a2:	9305      	str	r3, [sp, #20]
   3d8a4:	f854 3c10 	ldr.w	r3, [r4, #-16]
   3d8a8:	9304      	str	r3, [sp, #16]
   3d8aa:	f854 3c14 	ldr.w	r3, [r4, #-20]
   3d8ae:	9303      	str	r3, [sp, #12]
   3d8b0:	f854 3c18 	ldr.w	r3, [r4, #-24]
   3d8b4:	9302      	str	r3, [sp, #8]
   3d8b6:	f854 3c1c 	ldr.w	r3, [r4, #-28]
   3d8ba:	9301      	str	r3, [sp, #4]
   3d8bc:	f854 3c20 	ldr.w	r3, [r4, #-32]
   3d8c0:	9300      	str	r3, [sp, #0]
   3d8c2:	e954 230a 	ldrd	r2, r3, [r4, #-40]	; 0x28
   3d8c6:	e954 010c 	ldrd	r0, r1, [r4, #-48]	; 0x30
   3d8ca:	f7ff fec1 	bl	3d650 <z_setup_new_thread>
		thread_data->init_thread->init_data = thread_data;
   3d8ce:	f854 3c30 	ldr.w	r3, [r4, #-48]
   3d8d2:	64dd      	str	r5, [r3, #76]	; 0x4c
   3d8d4:	4625      	mov	r5, r4
   3d8d6:	e7ad      	b.n	3d834 <z_init_static_threads+0x10>
		if (thread_data->init_delay != K_FOREVER) {
   3d8d8:	f8d4 c024 	ldr.w	ip, [r4, #36]	; 0x24
   3d8dc:	f1bc 3fff 	cmp.w	ip, #4294967295
   3d8e0:	d006      	beq.n	3d8f0 <z_init_static_threads+0xcc>
			schedule_new_thread(thread_data->init_thread,
   3d8e2:	6827      	ldr	r7, [r4, #0]
	if (delay == 0) {
   3d8e4:	f1bc 0f00 	cmp.w	ip, #0
   3d8e8:	d104      	bne.n	3d8f4 <z_init_static_threads+0xd0>
   3d8ea:	4638      	mov	r0, r7
   3d8ec:	f7ff feee 	bl	3d6cc <z_impl_k_thread_start>
	_FOREACH_STATIC_THREAD(thread_data) {
   3d8f0:	3430      	adds	r4, #48	; 0x30
   3d8f2:	e7bc      	b.n	3d86e <z_init_static_threads+0x4a>
   3d8f4:	f44f 4e00 	mov.w	lr, #32768	; 0x8000
   3d8f8:	f240 30e7 	movw	r0, #999	; 0x3e7
   3d8fc:	2100      	movs	r1, #0
   3d8fe:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   3d902:	2300      	movs	r3, #0
   3d904:	fbee 010c 	umlal	r0, r1, lr, ip
   3d908:	f7df fa68 	bl	1cddc <__aeabi_uldivmod>
   3d90c:	4909      	ldr	r1, [pc, #36]	; (3d934 <z_init_static_threads+0x110>)
   3d90e:	1c42      	adds	r2, r0, #1
   3d910:	f107 0018 	add.w	r0, r7, #24
   3d914:	f000 f99e 	bl	3dc54 <z_add_timeout>
   3d918:	e7ea      	b.n	3d8f0 <z_init_static_threads+0xcc>
   3d91a:	bf00      	nop
   3d91c:	20032b60 	.word	0x20032b60
   3d920:	20032b60 	.word	0x20032b60
   3d924:	0004d521 	.word	0x0004d521
   3d928:	0004764f 	.word	0x0004764f
   3d92c:	000494e3 	.word	0x000494e3
   3d930:	0004d4d9 	.word	0x0004d4d9
   3d934:	0003c859 	.word	0x0003c859

0003d938 <z_impl_k_thread_suspend>:
{
   3d938:	b538      	push	{r3, r4, r5, lr}
   3d93a:	4605      	mov	r5, r0
	__asm__ volatile(
   3d93c:	f04f 0320 	mov.w	r3, #32
   3d940:	f3ef 8411 	mrs	r4, BASEPRI
   3d944:	f383 8811 	msr	BASEPRI, r3
   3d948:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   3d94c:	481c      	ldr	r0, [pc, #112]	; (3d9c0 <z_impl_k_thread_suspend+0x88>)
   3d94e:	f7ff fe97 	bl	3d680 <z_spin_lock_valid>
   3d952:	b968      	cbnz	r0, 3d970 <z_impl_k_thread_suspend+0x38>
   3d954:	234a      	movs	r3, #74	; 0x4a
   3d956:	4a1b      	ldr	r2, [pc, #108]	; (3d9c4 <z_impl_k_thread_suspend+0x8c>)
   3d958:	491b      	ldr	r1, [pc, #108]	; (3d9c8 <z_impl_k_thread_suspend+0x90>)
   3d95a:	481c      	ldr	r0, [pc, #112]	; (3d9cc <z_impl_k_thread_suspend+0x94>)
   3d95c:	f002 fe51 	bl	40602 <printk>
   3d960:	4917      	ldr	r1, [pc, #92]	; (3d9c0 <z_impl_k_thread_suspend+0x88>)
   3d962:	481b      	ldr	r0, [pc, #108]	; (3d9d0 <z_impl_k_thread_suspend+0x98>)
   3d964:	f002 fe4d 	bl	40602 <printk>
   3d968:	214a      	movs	r1, #74	; 0x4a
   3d96a:	4816      	ldr	r0, [pc, #88]	; (3d9c4 <z_impl_k_thread_suspend+0x8c>)
   3d96c:	f002 ff0c 	bl	40788 <assert_post_action>
	z_spin_lock_set_owner(l);
   3d970:	4813      	ldr	r0, [pc, #76]	; (3d9c0 <z_impl_k_thread_suspend+0x88>)
   3d972:	f7ff fea3 	bl	3d6bc <z_spin_lock_set_owner>
	z_thread_single_suspend(thread);
   3d976:	4628      	mov	r0, r5
   3d978:	f7ff f89c 	bl	3cab4 <z_thread_single_suspend>
	if (thread == _current) {
   3d97c:	4b15      	ldr	r3, [pc, #84]	; (3d9d4 <z_impl_k_thread_suspend+0x9c>)
   3d97e:	689b      	ldr	r3, [r3, #8]
   3d980:	42ab      	cmp	r3, r5
   3d982:	d105      	bne.n	3d990 <z_impl_k_thread_suspend+0x58>
		z_reschedule(&lock, key);
   3d984:	4621      	mov	r1, r4
}
   3d986:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		z_reschedule(&lock, key);
   3d98a:	480d      	ldr	r0, [pc, #52]	; (3d9c0 <z_impl_k_thread_suspend+0x88>)
   3d98c:	f7fe bcfa 	b.w	3c384 <z_reschedule>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   3d990:	480b      	ldr	r0, [pc, #44]	; (3d9c0 <z_impl_k_thread_suspend+0x88>)
   3d992:	f7ff fe83 	bl	3d69c <z_spin_unlock_valid>
   3d996:	b968      	cbnz	r0, 3d9b4 <z_impl_k_thread_suspend+0x7c>
   3d998:	235d      	movs	r3, #93	; 0x5d
   3d99a:	4a0a      	ldr	r2, [pc, #40]	; (3d9c4 <z_impl_k_thread_suspend+0x8c>)
   3d99c:	490e      	ldr	r1, [pc, #56]	; (3d9d8 <z_impl_k_thread_suspend+0xa0>)
   3d99e:	480b      	ldr	r0, [pc, #44]	; (3d9cc <z_impl_k_thread_suspend+0x94>)
   3d9a0:	f002 fe2f 	bl	40602 <printk>
   3d9a4:	4906      	ldr	r1, [pc, #24]	; (3d9c0 <z_impl_k_thread_suspend+0x88>)
   3d9a6:	480d      	ldr	r0, [pc, #52]	; (3d9dc <z_impl_k_thread_suspend+0xa4>)
   3d9a8:	f002 fe2b 	bl	40602 <printk>
   3d9ac:	215d      	movs	r1, #93	; 0x5d
   3d9ae:	4805      	ldr	r0, [pc, #20]	; (3d9c4 <z_impl_k_thread_suspend+0x8c>)
   3d9b0:	f002 feea 	bl	40788 <assert_post_action>
	__asm__ volatile(
   3d9b4:	f384 8811 	msr	BASEPRI, r4
   3d9b8:	f3bf 8f6f 	isb	sy
}
   3d9bc:	bd38      	pop	{r3, r4, r5, pc}
   3d9be:	bf00      	nop
   3d9c0:	20029818 	.word	0x20029818
   3d9c4:	000498fb 	.word	0x000498fb
   3d9c8:	00049921 	.word	0x00049921
   3d9cc:	0004764f 	.word	0x0004764f
   3d9d0:	00049936 	.word	0x00049936
   3d9d4:	2002970c 	.word	0x2002970c
   3d9d8:	0004994e 	.word	0x0004994e
   3d9dc:	00049965 	.word	0x00049965

0003d9e0 <k_work_q_start>:

extern void z_work_q_main(void *work_q_ptr, void *p2, void *p3);

void k_work_q_start(struct k_work_q *work_q, k_thread_stack_t *stack,
		    size_t stack_size, int prio)
{
   3d9e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   3d9e4:	4605      	mov	r5, r0
   3d9e6:	b086      	sub	sp, #24
   3d9e8:	460e      	mov	r6, r1
   3d9ea:	4617      	mov	r7, r2
   3d9ec:	4698      	mov	r8, r3
	z_impl_k_queue_init(queue);
   3d9ee:	f007 f883 	bl	44af8 <z_impl_k_queue_init>
	k_queue_init(&work_q->queue);
	(void)k_thread_create(&work_q->thread, stack, stack_size, z_work_q_main,
   3d9f2:	f105 0414 	add.w	r4, r5, #20
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   3d9f6:	2000      	movs	r0, #0
   3d9f8:	4b09      	ldr	r3, [pc, #36]	; (3da20 <k_work_q_start+0x40>)
   3d9fa:	e9cd 0004 	strd	r0, r0, [sp, #16]
   3d9fe:	e9cd 0802 	strd	r0, r8, [sp, #8]
   3da02:	e9cd 5000 	strd	r5, r0, [sp]
   3da06:	463a      	mov	r2, r7
   3da08:	4631      	mov	r1, r6
   3da0a:	4620      	mov	r0, r4
   3da0c:	f7ff feb6 	bl	3d77c <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread_id, value);
   3da10:	4620      	mov	r0, r4
   3da12:	4904      	ldr	r1, [pc, #16]	; (3da24 <k_work_q_start+0x44>)
			work_q, NULL, NULL, prio, 0, K_NO_WAIT);

	k_thread_name_set(&work_q->thread, WORKQUEUE_THREAD_NAME);
}
   3da14:	b006      	add	sp, #24
   3da16:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   3da1a:	f007 b8d7 	b.w	44bcc <z_impl_k_thread_name_set>
   3da1e:	bf00      	nop
   3da20:	00040673 	.word	0x00040673
   3da24:	0004c4d0 	.word	0x0004c4d0

0003da28 <k_delayed_work_submit_to_queue>:
}

int k_delayed_work_submit_to_queue(struct k_work_q *work_q,
				   struct k_delayed_work *work,
				   s32_t delay)
{
   3da28:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   3da2c:	4606      	mov	r6, r0
   3da2e:	460d      	mov	r5, r1
   3da30:	4690      	mov	r8, r2
	__asm__ volatile(
   3da32:	f04f 0320 	mov.w	r3, #32
   3da36:	f3ef 8711 	mrs	r7, BASEPRI
   3da3a:	f383 8811 	msr	BASEPRI, r3
   3da3e:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   3da42:	4837      	ldr	r0, [pc, #220]	; (3db20 <k_delayed_work_submit_to_queue+0xf8>)
   3da44:	f7ff fe1c 	bl	3d680 <z_spin_lock_valid>
   3da48:	b968      	cbnz	r0, 3da66 <k_delayed_work_submit_to_queue+0x3e>
   3da4a:	234a      	movs	r3, #74	; 0x4a
   3da4c:	4a35      	ldr	r2, [pc, #212]	; (3db24 <k_delayed_work_submit_to_queue+0xfc>)
   3da4e:	4936      	ldr	r1, [pc, #216]	; (3db28 <k_delayed_work_submit_to_queue+0x100>)
   3da50:	4836      	ldr	r0, [pc, #216]	; (3db2c <k_delayed_work_submit_to_queue+0x104>)
   3da52:	f002 fdd6 	bl	40602 <printk>
   3da56:	4932      	ldr	r1, [pc, #200]	; (3db20 <k_delayed_work_submit_to_queue+0xf8>)
   3da58:	4835      	ldr	r0, [pc, #212]	; (3db30 <k_delayed_work_submit_to_queue+0x108>)
   3da5a:	f002 fdd2 	bl	40602 <printk>
   3da5e:	214a      	movs	r1, #74	; 0x4a
   3da60:	4830      	ldr	r0, [pc, #192]	; (3db24 <k_delayed_work_submit_to_queue+0xfc>)
   3da62:	f002 fe91 	bl	40788 <assert_post_action>
	z_spin_lock_set_owner(l);
   3da66:	482e      	ldr	r0, [pc, #184]	; (3db20 <k_delayed_work_submit_to_queue+0xf8>)
   3da68:	f7ff fe28 	bl	3d6bc <z_spin_lock_set_owner>
	k_spinlock_key_t key = k_spin_lock(&lock);
	int err = 0;

	/* Work cannot be active in multiple queues */
	if (work->work_q != NULL && work->work_q != work_q) {
   3da6c:	69ec      	ldr	r4, [r5, #28]
   3da6e:	b1ec      	cbz	r4, 3daac <k_delayed_work_submit_to_queue+0x84>
   3da70:	42b4      	cmp	r4, r6
   3da72:	d152      	bne.n	3db1a <k_delayed_work_submit_to_queue+0xf2>
		goto done;
	}

	/* Cancel if work has been submitted */
	if (work->work_q == work_q) {
		err = work_cancel(work);
   3da74:	4628      	mov	r0, r5
   3da76:	f007 f8d6 	bl	44c26 <work_cancel>
		if (err < 0) {
   3da7a:	1e04      	subs	r4, r0, #0
   3da7c:	da18      	bge.n	3dab0 <k_delayed_work_submit_to_queue+0x88>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   3da7e:	4828      	ldr	r0, [pc, #160]	; (3db20 <k_delayed_work_submit_to_queue+0xf8>)
   3da80:	f7ff fe0c 	bl	3d69c <z_spin_unlock_valid>
   3da84:	b968      	cbnz	r0, 3daa2 <k_delayed_work_submit_to_queue+0x7a>
   3da86:	235d      	movs	r3, #93	; 0x5d
   3da88:	4a26      	ldr	r2, [pc, #152]	; (3db24 <k_delayed_work_submit_to_queue+0xfc>)
   3da8a:	492a      	ldr	r1, [pc, #168]	; (3db34 <k_delayed_work_submit_to_queue+0x10c>)
   3da8c:	4827      	ldr	r0, [pc, #156]	; (3db2c <k_delayed_work_submit_to_queue+0x104>)
   3da8e:	f002 fdb8 	bl	40602 <printk>
   3da92:	4923      	ldr	r1, [pc, #140]	; (3db20 <k_delayed_work_submit_to_queue+0xf8>)
   3da94:	4828      	ldr	r0, [pc, #160]	; (3db38 <k_delayed_work_submit_to_queue+0x110>)
   3da96:	f002 fdb4 	bl	40602 <printk>
   3da9a:	215d      	movs	r1, #93	; 0x5d
   3da9c:	4821      	ldr	r0, [pc, #132]	; (3db24 <k_delayed_work_submit_to_queue+0xfc>)
   3da9e:	f002 fe73 	bl	40788 <assert_post_action>
	__asm__ volatile(
   3daa2:	f387 8811 	msr	BASEPRI, r7
   3daa6:	f3bf 8f6f 	isb	sy
	z_add_timeout(&work->timeout, work_timeout,
		     _TICK_ALIGN + k_ms_to_ticks_ceil32(delay));

done:
	k_spin_unlock(&lock, key);
	return err;
   3daaa:	e020      	b.n	3daee <k_delayed_work_submit_to_queue+0xc6>
	if (work->work_q == work_q) {
   3daac:	2e00      	cmp	r6, #0
   3daae:	d0e1      	beq.n	3da74 <k_delayed_work_submit_to_queue+0x4c>
	work->work_q = work_q;
   3dab0:	61ee      	str	r6, [r5, #28]
	if (delay == 0) {
   3dab2:	f1b8 0f00 	cmp.w	r8, #0
   3dab6:	d11d      	bne.n	3daf4 <k_delayed_work_submit_to_queue+0xcc>
   3dab8:	4819      	ldr	r0, [pc, #100]	; (3db20 <k_delayed_work_submit_to_queue+0xf8>)
   3daba:	f7ff fdef 	bl	3d69c <z_spin_unlock_valid>
   3dabe:	b968      	cbnz	r0, 3dadc <k_delayed_work_submit_to_queue+0xb4>
   3dac0:	235d      	movs	r3, #93	; 0x5d
   3dac2:	4a18      	ldr	r2, [pc, #96]	; (3db24 <k_delayed_work_submit_to_queue+0xfc>)
   3dac4:	491b      	ldr	r1, [pc, #108]	; (3db34 <k_delayed_work_submit_to_queue+0x10c>)
   3dac6:	4819      	ldr	r0, [pc, #100]	; (3db2c <k_delayed_work_submit_to_queue+0x104>)
   3dac8:	f002 fd9b 	bl	40602 <printk>
   3dacc:	4914      	ldr	r1, [pc, #80]	; (3db20 <k_delayed_work_submit_to_queue+0xf8>)
   3dace:	481a      	ldr	r0, [pc, #104]	; (3db38 <k_delayed_work_submit_to_queue+0x110>)
   3dad0:	f002 fd97 	bl	40602 <printk>
   3dad4:	215d      	movs	r1, #93	; 0x5d
   3dad6:	4813      	ldr	r0, [pc, #76]	; (3db24 <k_delayed_work_submit_to_queue+0xfc>)
   3dad8:	f002 fe56 	bl	40788 <assert_post_action>
   3dadc:	f387 8811 	msr	BASEPRI, r7
   3dae0:	f3bf 8f6f 	isb	sy
		k_work_submit_to_queue(work_q, &work->work);
   3dae4:	4629      	mov	r1, r5
   3dae6:	4630      	mov	r0, r6
   3dae8:	f007 f884 	bl	44bf4 <k_work_submit_to_queue>
		return 0;
   3daec:	2400      	movs	r4, #0
}
   3daee:	4620      	mov	r0, r4
   3daf0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   3daf4:	f44f 4600 	mov.w	r6, #32768	; 0x8000
   3daf8:	f240 30e7 	movw	r0, #999	; 0x3e7
   3dafc:	2100      	movs	r1, #0
   3dafe:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   3db02:	2300      	movs	r3, #0
   3db04:	fbe6 0108 	umlal	r0, r1, r6, r8
   3db08:	f7df f968 	bl	1cddc <__aeabi_uldivmod>
	z_add_timeout(&work->timeout, work_timeout,
   3db0c:	490b      	ldr	r1, [pc, #44]	; (3db3c <k_delayed_work_submit_to_queue+0x114>)
   3db0e:	1c42      	adds	r2, r0, #1
   3db10:	f105 000c 	add.w	r0, r5, #12
   3db14:	f000 f89e 	bl	3dc54 <z_add_timeout>
   3db18:	e7b1      	b.n	3da7e <k_delayed_work_submit_to_queue+0x56>
		err = -EADDRINUSE;
   3db1a:	f06f 046f 	mvn.w	r4, #111	; 0x6f
   3db1e:	e7ae      	b.n	3da7e <k_delayed_work_submit_to_queue+0x56>
   3db20:	2002981c 	.word	0x2002981c
   3db24:	000498fb 	.word	0x000498fb
   3db28:	00049921 	.word	0x00049921
   3db2c:	0004764f 	.word	0x0004764f
   3db30:	00049936 	.word	0x00049936
   3db34:	0004994e 	.word	0x0004994e
   3db38:	00049965 	.word	0x00049965
   3db3c:	00044c1d 	.word	0x00044c1d

0003db40 <k_delayed_work_cancel>:

int k_delayed_work_cancel(struct k_delayed_work *work)
{
   3db40:	b538      	push	{r3, r4, r5, lr}
	if (!work->work_q) {
   3db42:	69c3      	ldr	r3, [r0, #28]
{
   3db44:	4604      	mov	r4, r0
	if (!work->work_q) {
   3db46:	2b00      	cmp	r3, #0
   3db48:	d038      	beq.n	3dbbc <k_delayed_work_cancel+0x7c>
	__asm__ volatile(
   3db4a:	f04f 0320 	mov.w	r3, #32
   3db4e:	f3ef 8511 	mrs	r5, BASEPRI
   3db52:	f383 8811 	msr	BASEPRI, r3
   3db56:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   3db5a:	481a      	ldr	r0, [pc, #104]	; (3dbc4 <k_delayed_work_cancel+0x84>)
   3db5c:	f7ff fd90 	bl	3d680 <z_spin_lock_valid>
   3db60:	b968      	cbnz	r0, 3db7e <k_delayed_work_cancel+0x3e>
   3db62:	234a      	movs	r3, #74	; 0x4a
   3db64:	4a18      	ldr	r2, [pc, #96]	; (3dbc8 <k_delayed_work_cancel+0x88>)
   3db66:	4919      	ldr	r1, [pc, #100]	; (3dbcc <k_delayed_work_cancel+0x8c>)
   3db68:	4819      	ldr	r0, [pc, #100]	; (3dbd0 <k_delayed_work_cancel+0x90>)
   3db6a:	f002 fd4a 	bl	40602 <printk>
   3db6e:	4915      	ldr	r1, [pc, #84]	; (3dbc4 <k_delayed_work_cancel+0x84>)
   3db70:	4818      	ldr	r0, [pc, #96]	; (3dbd4 <k_delayed_work_cancel+0x94>)
   3db72:	f002 fd46 	bl	40602 <printk>
   3db76:	214a      	movs	r1, #74	; 0x4a
   3db78:	4813      	ldr	r0, [pc, #76]	; (3dbc8 <k_delayed_work_cancel+0x88>)
   3db7a:	f002 fe05 	bl	40788 <assert_post_action>
	z_spin_lock_set_owner(l);
   3db7e:	4811      	ldr	r0, [pc, #68]	; (3dbc4 <k_delayed_work_cancel+0x84>)
   3db80:	f7ff fd9c 	bl	3d6bc <z_spin_lock_set_owner>
		return -EINVAL;
	}

	k_spinlock_key_t key = k_spin_lock(&lock);
	int ret = work_cancel(work);
   3db84:	4620      	mov	r0, r4
   3db86:	f007 f84e 	bl	44c26 <work_cancel>
   3db8a:	4604      	mov	r4, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   3db8c:	480d      	ldr	r0, [pc, #52]	; (3dbc4 <k_delayed_work_cancel+0x84>)
   3db8e:	f7ff fd85 	bl	3d69c <z_spin_unlock_valid>
   3db92:	b968      	cbnz	r0, 3dbb0 <k_delayed_work_cancel+0x70>
   3db94:	235d      	movs	r3, #93	; 0x5d
   3db96:	4a0c      	ldr	r2, [pc, #48]	; (3dbc8 <k_delayed_work_cancel+0x88>)
   3db98:	490f      	ldr	r1, [pc, #60]	; (3dbd8 <k_delayed_work_cancel+0x98>)
   3db9a:	480d      	ldr	r0, [pc, #52]	; (3dbd0 <k_delayed_work_cancel+0x90>)
   3db9c:	f002 fd31 	bl	40602 <printk>
   3dba0:	4908      	ldr	r1, [pc, #32]	; (3dbc4 <k_delayed_work_cancel+0x84>)
   3dba2:	480e      	ldr	r0, [pc, #56]	; (3dbdc <k_delayed_work_cancel+0x9c>)
   3dba4:	f002 fd2d 	bl	40602 <printk>
   3dba8:	215d      	movs	r1, #93	; 0x5d
   3dbaa:	4807      	ldr	r0, [pc, #28]	; (3dbc8 <k_delayed_work_cancel+0x88>)
   3dbac:	f002 fdec 	bl	40788 <assert_post_action>
	__asm__ volatile(
   3dbb0:	f385 8811 	msr	BASEPRI, r5
   3dbb4:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&lock, key);
	return ret;
}
   3dbb8:	4620      	mov	r0, r4
   3dbba:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
   3dbbc:	f06f 0415 	mvn.w	r4, #21
   3dbc0:	e7fa      	b.n	3dbb8 <k_delayed_work_cancel+0x78>
   3dbc2:	bf00      	nop
   3dbc4:	2002981c 	.word	0x2002981c
   3dbc8:	000498fb 	.word	0x000498fb
   3dbcc:	00049921 	.word	0x00049921
   3dbd0:	0004764f 	.word	0x0004764f
   3dbd4:	00049936 	.word	0x00049936
   3dbd8:	0004994e 	.word	0x0004994e
   3dbdc:	00049965 	.word	0x00049965

0003dbe0 <elapsed>:
	sys_dlist_remove(&t->node);
}

static s32_t elapsed(void)
{
	return announce_remaining == 0 ? z_clock_elapsed() : 0;
   3dbe0:	4b03      	ldr	r3, [pc, #12]	; (3dbf0 <elapsed+0x10>)
   3dbe2:	681b      	ldr	r3, [r3, #0]
   3dbe4:	b90b      	cbnz	r3, 3dbea <elapsed+0xa>
   3dbe6:	f7e8 bb7d 	b.w	262e4 <z_clock_elapsed>
}
   3dbea:	2000      	movs	r0, #0
   3dbec:	4770      	bx	lr
   3dbee:	bf00      	nop
   3dbf0:	20029820 	.word	0x20029820

0003dbf4 <remove_timeout>:
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   3dbf4:	6803      	ldr	r3, [r0, #0]
   3dbf6:	b140      	cbz	r0, 3dc0a <remove_timeout+0x16>
   3dbf8:	4a07      	ldr	r2, [pc, #28]	; (3dc18 <remove_timeout+0x24>)
	return (node == list->tail) ? NULL : node->next;
   3dbfa:	6852      	ldr	r2, [r2, #4]
   3dbfc:	4290      	cmp	r0, r2
   3dbfe:	d004      	beq.n	3dc0a <remove_timeout+0x16>
	if (next(t) != NULL) {
   3dc00:	b11b      	cbz	r3, 3dc0a <remove_timeout+0x16>
		next(t)->dticks += t->dticks;
   3dc02:	689a      	ldr	r2, [r3, #8]
   3dc04:	6881      	ldr	r1, [r0, #8]
   3dc06:	440a      	add	r2, r1
   3dc08:	609a      	str	r2, [r3, #8]
	node->prev->next = node->next;
   3dc0a:	6842      	ldr	r2, [r0, #4]
   3dc0c:	6013      	str	r3, [r2, #0]
	node->next->prev = node->prev;
   3dc0e:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   3dc10:	2300      	movs	r3, #0
	node->prev = NULL;
   3dc12:	e9c0 3300 	strd	r3, r3, [r0]
}
   3dc16:	4770      	bx	lr
   3dc18:	200324d4 	.word	0x200324d4

0003dc1c <next_timeout>:
	return list->head == list;
   3dc1c:	4b0b      	ldr	r3, [pc, #44]	; (3dc4c <next_timeout+0x30>)

static s32_t next_timeout(void)
{
   3dc1e:	b510      	push	{r4, lr}
   3dc20:	681c      	ldr	r4, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   3dc22:	429c      	cmp	r4, r3
   3dc24:	bf08      	it	eq
   3dc26:	2400      	moveq	r4, #0
	struct _timeout *to = first();
	s32_t ticks_elapsed = elapsed();
   3dc28:	f7ff ffda 	bl	3dbe0 <elapsed>
	s32_t ret = to == NULL ? MAX_WAIT : MAX(0, to->dticks - ticks_elapsed);
   3dc2c:	b154      	cbz	r4, 3dc44 <next_timeout+0x28>
   3dc2e:	68a3      	ldr	r3, [r4, #8]
   3dc30:	1a18      	subs	r0, r3, r0
   3dc32:	ea20 70e0 	bic.w	r0, r0, r0, asr #31

#ifdef CONFIG_TIMESLICING
	if (_current_cpu->slice_ticks && _current_cpu->slice_ticks < ret) {
   3dc36:	4b06      	ldr	r3, [pc, #24]	; (3dc50 <next_timeout+0x34>)
   3dc38:	691b      	ldr	r3, [r3, #16]
   3dc3a:	b113      	cbz	r3, 3dc42 <next_timeout+0x26>
   3dc3c:	4298      	cmp	r0, r3
   3dc3e:	bfa8      	it	ge
   3dc40:	4618      	movge	r0, r3
		ret = _current_cpu->slice_ticks;
	}
#endif
	return ret;
}
   3dc42:	bd10      	pop	{r4, pc}
	s32_t ret = to == NULL ? MAX_WAIT : MAX(0, to->dticks - ticks_elapsed);
   3dc44:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
   3dc48:	e7f5      	b.n	3dc36 <next_timeout+0x1a>
   3dc4a:	bf00      	nop
   3dc4c:	200324d4 	.word	0x200324d4
   3dc50:	2002970c 	.word	0x2002970c

0003dc54 <z_add_timeout>:

void z_add_timeout(struct _timeout *to, _timeout_func_t fn, s32_t ticks)
{
	__ASSERT(!sys_dnode_is_linked(&to->node), "");
   3dc54:	6803      	ldr	r3, [r0, #0]
{
   3dc56:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   3dc5a:	4604      	mov	r4, r0
   3dc5c:	460e      	mov	r6, r1
   3dc5e:	4615      	mov	r5, r2
	__ASSERT(!sys_dnode_is_linked(&to->node), "");
   3dc60:	b163      	cbz	r3, 3dc7c <z_add_timeout+0x28>
   3dc62:	4943      	ldr	r1, [pc, #268]	; (3dd70 <z_add_timeout+0x11c>)
   3dc64:	2358      	movs	r3, #88	; 0x58
   3dc66:	4a43      	ldr	r2, [pc, #268]	; (3dd74 <z_add_timeout+0x120>)
   3dc68:	4843      	ldr	r0, [pc, #268]	; (3dd78 <z_add_timeout+0x124>)
   3dc6a:	f002 fcca 	bl	40602 <printk>
   3dc6e:	4843      	ldr	r0, [pc, #268]	; (3dd7c <z_add_timeout+0x128>)
   3dc70:	f002 fcc7 	bl	40602 <printk>
   3dc74:	2158      	movs	r1, #88	; 0x58
   3dc76:	483f      	ldr	r0, [pc, #252]	; (3dd74 <z_add_timeout+0x120>)
   3dc78:	f002 fd86 	bl	40788 <assert_post_action>
	to->fn = fn;
	ticks = MAX(1, ticks);
   3dc7c:	2d01      	cmp	r5, #1
   3dc7e:	bfb8      	it	lt
   3dc80:	2501      	movlt	r5, #1
	to->fn = fn;
   3dc82:	60e6      	str	r6, [r4, #12]
	__asm__ volatile(
   3dc84:	f04f 0320 	mov.w	r3, #32
   3dc88:	f3ef 8811 	mrs	r8, BASEPRI
   3dc8c:	f383 8811 	msr	BASEPRI, r3
   3dc90:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   3dc94:	483a      	ldr	r0, [pc, #232]	; (3dd80 <z_add_timeout+0x12c>)
   3dc96:	f7ff fcf3 	bl	3d680 <z_spin_lock_valid>
   3dc9a:	b968      	cbnz	r0, 3dcb8 <z_add_timeout+0x64>
   3dc9c:	234a      	movs	r3, #74	; 0x4a
   3dc9e:	4a39      	ldr	r2, [pc, #228]	; (3dd84 <z_add_timeout+0x130>)
   3dca0:	4939      	ldr	r1, [pc, #228]	; (3dd88 <z_add_timeout+0x134>)
   3dca2:	4835      	ldr	r0, [pc, #212]	; (3dd78 <z_add_timeout+0x124>)
   3dca4:	f002 fcad 	bl	40602 <printk>
   3dca8:	4935      	ldr	r1, [pc, #212]	; (3dd80 <z_add_timeout+0x12c>)
   3dcaa:	4838      	ldr	r0, [pc, #224]	; (3dd8c <z_add_timeout+0x138>)
   3dcac:	f002 fca9 	bl	40602 <printk>
   3dcb0:	214a      	movs	r1, #74	; 0x4a
   3dcb2:	4834      	ldr	r0, [pc, #208]	; (3dd84 <z_add_timeout+0x130>)
   3dcb4:	f002 fd68 	bl	40788 <assert_post_action>
	z_spin_lock_set_owner(l);
   3dcb8:	4831      	ldr	r0, [pc, #196]	; (3dd80 <z_add_timeout+0x12c>)
   3dcba:	f7ff fcff 	bl	3d6bc <z_spin_lock_set_owner>

	LOCKED(&timeout_lock) {
		struct _timeout *t;

		to->dticks = ticks + elapsed();
   3dcbe:	f7ff ff8f 	bl	3dbe0 <elapsed>
   3dcc2:	4428      	add	r0, r5
	return list->head == list;
   3dcc4:	4d32      	ldr	r5, [pc, #200]	; (3dd90 <z_add_timeout+0x13c>)
   3dcc6:	60a0      	str	r0, [r4, #8]
   3dcc8:	682e      	ldr	r6, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   3dcca:	42ae      	cmp	r6, r5
   3dccc:	d005      	beq.n	3dcda <z_add_timeout+0x86>
		for (t = first(); t != NULL; t = next(t)) {
			__ASSERT(t->dticks >= 0, "");
   3dcce:	4f29      	ldr	r7, [pc, #164]	; (3dd74 <z_add_timeout+0x120>)
   3dcd0:	f8df 90c8 	ldr.w	r9, [pc, #200]	; 3dd9c <z_add_timeout+0x148>
   3dcd4:	f8df a0a0 	ldr.w	sl, [pc, #160]	; 3dd78 <z_add_timeout+0x124>
		for (t = first(); t != NULL; t = next(t)) {
   3dcd8:	b936      	cbnz	r6, 3dce8 <z_add_timeout+0x94>
	node->prev = list->tail;
   3dcda:	686b      	ldr	r3, [r5, #4]
	node->next = list;
   3dcdc:	6025      	str	r5, [r4, #0]
	node->prev = list->tail;
   3dcde:	6063      	str	r3, [r4, #4]
	list->tail->next = node;
   3dce0:	686b      	ldr	r3, [r5, #4]
   3dce2:	601c      	str	r4, [r3, #0]
	list->tail = node;
   3dce4:	606c      	str	r4, [r5, #4]
   3dce6:	e01a      	b.n	3dd1e <z_add_timeout+0xca>
			__ASSERT(t->dticks >= 0, "");
   3dce8:	68b3      	ldr	r3, [r6, #8]
   3dcea:	2b00      	cmp	r3, #0
   3dcec:	da0c      	bge.n	3dd08 <z_add_timeout+0xb4>
   3dcee:	4649      	mov	r1, r9
   3dcf0:	2361      	movs	r3, #97	; 0x61
   3dcf2:	463a      	mov	r2, r7
   3dcf4:	4650      	mov	r0, sl
   3dcf6:	f002 fc84 	bl	40602 <printk>
   3dcfa:	4820      	ldr	r0, [pc, #128]	; (3dd7c <z_add_timeout+0x128>)
   3dcfc:	f002 fc81 	bl	40602 <printk>
   3dd00:	2161      	movs	r1, #97	; 0x61
   3dd02:	4638      	mov	r0, r7
   3dd04:	f002 fd40 	bl	40788 <assert_post_action>

			if (t->dticks > to->dticks) {
   3dd08:	68b2      	ldr	r2, [r6, #8]
   3dd0a:	68a3      	ldr	r3, [r4, #8]
   3dd0c:	429a      	cmp	r2, r3
   3dd0e:	dd28      	ble.n	3dd62 <z_add_timeout+0x10e>
				t->dticks -= to->dticks;
   3dd10:	1ad3      	subs	r3, r2, r3
   3dd12:	60b3      	str	r3, [r6, #8]
	node->prev = successor->prev;
   3dd14:	6873      	ldr	r3, [r6, #4]
	node->next = successor;
   3dd16:	e9c4 6300 	strd	r6, r3, [r4]
	successor->prev->next = node;
   3dd1a:	601c      	str	r4, [r3, #0]
	successor->prev = node;
   3dd1c:	6074      	str	r4, [r6, #4]
	return list->head == list;
   3dd1e:	682b      	ldr	r3, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   3dd20:	42ab      	cmp	r3, r5
   3dd22:	d006      	beq.n	3dd32 <z_add_timeout+0xde>

		if (t == NULL) {
			sys_dlist_append(&timeout_list, &to->node);
		}

		if (to == first()) {
   3dd24:	429c      	cmp	r4, r3
   3dd26:	d104      	bne.n	3dd32 <z_add_timeout+0xde>
			z_clock_set_timeout(next_timeout(), false);
   3dd28:	f7ff ff78 	bl	3dc1c <next_timeout>
   3dd2c:	2100      	movs	r1, #0
   3dd2e:	f7e8 fa4b 	bl	261c8 <z_clock_set_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   3dd32:	4813      	ldr	r0, [pc, #76]	; (3dd80 <z_add_timeout+0x12c>)
   3dd34:	f7ff fcb2 	bl	3d69c <z_spin_unlock_valid>
   3dd38:	b968      	cbnz	r0, 3dd56 <z_add_timeout+0x102>
   3dd3a:	235d      	movs	r3, #93	; 0x5d
   3dd3c:	4a11      	ldr	r2, [pc, #68]	; (3dd84 <z_add_timeout+0x130>)
   3dd3e:	4915      	ldr	r1, [pc, #84]	; (3dd94 <z_add_timeout+0x140>)
   3dd40:	480d      	ldr	r0, [pc, #52]	; (3dd78 <z_add_timeout+0x124>)
   3dd42:	f002 fc5e 	bl	40602 <printk>
   3dd46:	490e      	ldr	r1, [pc, #56]	; (3dd80 <z_add_timeout+0x12c>)
   3dd48:	4813      	ldr	r0, [pc, #76]	; (3dd98 <z_add_timeout+0x144>)
   3dd4a:	f002 fc5a 	bl	40602 <printk>
   3dd4e:	215d      	movs	r1, #93	; 0x5d
   3dd50:	480c      	ldr	r0, [pc, #48]	; (3dd84 <z_add_timeout+0x130>)
   3dd52:	f002 fd19 	bl	40788 <assert_post_action>
	__asm__ volatile(
   3dd56:	f388 8811 	msr	BASEPRI, r8
   3dd5a:	f3bf 8f6f 	isb	sy
		}
	}
}
   3dd5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			to->dticks -= t->dticks;
   3dd62:	1a9b      	subs	r3, r3, r2
   3dd64:	60a3      	str	r3, [r4, #8]
	return (node == list->tail) ? NULL : node->next;
   3dd66:	686b      	ldr	r3, [r5, #4]
   3dd68:	429e      	cmp	r6, r3
   3dd6a:	d0b6      	beq.n	3dcda <z_add_timeout+0x86>
   3dd6c:	6836      	ldr	r6, [r6, #0]
   3dd6e:	e7b3      	b.n	3dcd8 <z_add_timeout+0x84>
   3dd70:	0004d572 	.word	0x0004d572
   3dd74:	0004d54e 	.word	0x0004d54e
   3dd78:	0004764f 	.word	0x0004764f
   3dd7c:	0004a297 	.word	0x0004a297
   3dd80:	20029824 	.word	0x20029824
   3dd84:	000498fb 	.word	0x000498fb
   3dd88:	00049921 	.word	0x00049921
   3dd8c:	00049936 	.word	0x00049936
   3dd90:	200324d4 	.word	0x200324d4
   3dd94:	0004994e 	.word	0x0004994e
   3dd98:	00049965 	.word	0x00049965
   3dd9c:	0004d592 	.word	0x0004d592

0003dda0 <z_abort_timeout>:

int z_abort_timeout(struct _timeout *to)
{
   3dda0:	b538      	push	{r3, r4, r5, lr}
   3dda2:	4604      	mov	r4, r0
	__asm__ volatile(
   3dda4:	f04f 0320 	mov.w	r3, #32
   3dda8:	f3ef 8511 	mrs	r5, BASEPRI
   3ddac:	f383 8811 	msr	BASEPRI, r3
   3ddb0:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   3ddb4:	481a      	ldr	r0, [pc, #104]	; (3de20 <z_abort_timeout+0x80>)
   3ddb6:	f7ff fc63 	bl	3d680 <z_spin_lock_valid>
   3ddba:	b968      	cbnz	r0, 3ddd8 <z_abort_timeout+0x38>
   3ddbc:	234a      	movs	r3, #74	; 0x4a
   3ddbe:	4a19      	ldr	r2, [pc, #100]	; (3de24 <z_abort_timeout+0x84>)
   3ddc0:	4919      	ldr	r1, [pc, #100]	; (3de28 <z_abort_timeout+0x88>)
   3ddc2:	481a      	ldr	r0, [pc, #104]	; (3de2c <z_abort_timeout+0x8c>)
   3ddc4:	f002 fc1d 	bl	40602 <printk>
   3ddc8:	4915      	ldr	r1, [pc, #84]	; (3de20 <z_abort_timeout+0x80>)
   3ddca:	4819      	ldr	r0, [pc, #100]	; (3de30 <z_abort_timeout+0x90>)
   3ddcc:	f002 fc19 	bl	40602 <printk>
   3ddd0:	214a      	movs	r1, #74	; 0x4a
   3ddd2:	4814      	ldr	r0, [pc, #80]	; (3de24 <z_abort_timeout+0x84>)
   3ddd4:	f002 fcd8 	bl	40788 <assert_post_action>
	z_spin_lock_set_owner(l);
   3ddd8:	4811      	ldr	r0, [pc, #68]	; (3de20 <z_abort_timeout+0x80>)
   3ddda:	f7ff fc6f 	bl	3d6bc <z_spin_lock_set_owner>
	int ret = -EINVAL;

	LOCKED(&timeout_lock) {
		if (sys_dnode_is_linked(&to->node)) {
   3ddde:	6823      	ldr	r3, [r4, #0]
   3dde0:	b1db      	cbz	r3, 3de1a <z_abort_timeout+0x7a>
			remove_timeout(to);
   3dde2:	4620      	mov	r0, r4
   3dde4:	f7ff ff06 	bl	3dbf4 <remove_timeout>
			ret = 0;
   3dde8:	2400      	movs	r4, #0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   3ddea:	480d      	ldr	r0, [pc, #52]	; (3de20 <z_abort_timeout+0x80>)
   3ddec:	f7ff fc56 	bl	3d69c <z_spin_unlock_valid>
   3ddf0:	b968      	cbnz	r0, 3de0e <z_abort_timeout+0x6e>
   3ddf2:	235d      	movs	r3, #93	; 0x5d
   3ddf4:	4a0b      	ldr	r2, [pc, #44]	; (3de24 <z_abort_timeout+0x84>)
   3ddf6:	490f      	ldr	r1, [pc, #60]	; (3de34 <z_abort_timeout+0x94>)
   3ddf8:	480c      	ldr	r0, [pc, #48]	; (3de2c <z_abort_timeout+0x8c>)
   3ddfa:	f002 fc02 	bl	40602 <printk>
   3ddfe:	4908      	ldr	r1, [pc, #32]	; (3de20 <z_abort_timeout+0x80>)
   3de00:	480d      	ldr	r0, [pc, #52]	; (3de38 <z_abort_timeout+0x98>)
   3de02:	f002 fbfe 	bl	40602 <printk>
   3de06:	215d      	movs	r1, #93	; 0x5d
   3de08:	4806      	ldr	r0, [pc, #24]	; (3de24 <z_abort_timeout+0x84>)
   3de0a:	f002 fcbd 	bl	40788 <assert_post_action>
	__asm__ volatile(
   3de0e:	f385 8811 	msr	BASEPRI, r5
   3de12:	f3bf 8f6f 	isb	sy
		}
	}

	return ret;
}
   3de16:	4620      	mov	r0, r4
   3de18:	bd38      	pop	{r3, r4, r5, pc}
	int ret = -EINVAL;
   3de1a:	f06f 0415 	mvn.w	r4, #21
   3de1e:	e7e4      	b.n	3ddea <z_abort_timeout+0x4a>
   3de20:	20029824 	.word	0x20029824
   3de24:	000498fb 	.word	0x000498fb
   3de28:	00049921 	.word	0x00049921
   3de2c:	0004764f 	.word	0x0004764f
   3de30:	00049936 	.word	0x00049936
   3de34:	0004994e 	.word	0x0004994e
   3de38:	00049965 	.word	0x00049965

0003de3c <z_get_next_timeout_expiry>:

	return ticks - elapsed();
}

s32_t z_get_next_timeout_expiry(void)
{
   3de3c:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
   3de3e:	f04f 0320 	mov.w	r3, #32
   3de42:	f3ef 8511 	mrs	r5, BASEPRI
   3de46:	f383 8811 	msr	BASEPRI, r3
   3de4a:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   3de4e:	4818      	ldr	r0, [pc, #96]	; (3deb0 <z_get_next_timeout_expiry+0x74>)
   3de50:	f7ff fc16 	bl	3d680 <z_spin_lock_valid>
   3de54:	b968      	cbnz	r0, 3de72 <z_get_next_timeout_expiry+0x36>
   3de56:	234a      	movs	r3, #74	; 0x4a
   3de58:	4a16      	ldr	r2, [pc, #88]	; (3deb4 <z_get_next_timeout_expiry+0x78>)
   3de5a:	4917      	ldr	r1, [pc, #92]	; (3deb8 <z_get_next_timeout_expiry+0x7c>)
   3de5c:	4817      	ldr	r0, [pc, #92]	; (3debc <z_get_next_timeout_expiry+0x80>)
   3de5e:	f002 fbd0 	bl	40602 <printk>
   3de62:	4913      	ldr	r1, [pc, #76]	; (3deb0 <z_get_next_timeout_expiry+0x74>)
   3de64:	4816      	ldr	r0, [pc, #88]	; (3dec0 <z_get_next_timeout_expiry+0x84>)
   3de66:	f002 fbcc 	bl	40602 <printk>
   3de6a:	214a      	movs	r1, #74	; 0x4a
   3de6c:	4811      	ldr	r0, [pc, #68]	; (3deb4 <z_get_next_timeout_expiry+0x78>)
   3de6e:	f002 fc8b 	bl	40788 <assert_post_action>
	z_spin_lock_set_owner(l);
   3de72:	480f      	ldr	r0, [pc, #60]	; (3deb0 <z_get_next_timeout_expiry+0x74>)
   3de74:	f7ff fc22 	bl	3d6bc <z_spin_lock_set_owner>
	s32_t ret = K_FOREVER;

	LOCKED(&timeout_lock) {
		ret = next_timeout();
   3de78:	f7ff fed0 	bl	3dc1c <next_timeout>
   3de7c:	4604      	mov	r4, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   3de7e:	480c      	ldr	r0, [pc, #48]	; (3deb0 <z_get_next_timeout_expiry+0x74>)
   3de80:	f7ff fc0c 	bl	3d69c <z_spin_unlock_valid>
   3de84:	b968      	cbnz	r0, 3dea2 <z_get_next_timeout_expiry+0x66>
   3de86:	235d      	movs	r3, #93	; 0x5d
   3de88:	4a0a      	ldr	r2, [pc, #40]	; (3deb4 <z_get_next_timeout_expiry+0x78>)
   3de8a:	490e      	ldr	r1, [pc, #56]	; (3dec4 <z_get_next_timeout_expiry+0x88>)
   3de8c:	480b      	ldr	r0, [pc, #44]	; (3debc <z_get_next_timeout_expiry+0x80>)
   3de8e:	f002 fbb8 	bl	40602 <printk>
   3de92:	4907      	ldr	r1, [pc, #28]	; (3deb0 <z_get_next_timeout_expiry+0x74>)
   3de94:	480c      	ldr	r0, [pc, #48]	; (3dec8 <z_get_next_timeout_expiry+0x8c>)
   3de96:	f002 fbb4 	bl	40602 <printk>
   3de9a:	215d      	movs	r1, #93	; 0x5d
   3de9c:	4805      	ldr	r0, [pc, #20]	; (3deb4 <z_get_next_timeout_expiry+0x78>)
   3de9e:	f002 fc73 	bl	40788 <assert_post_action>
	__asm__ volatile(
   3dea2:	f385 8811 	msr	BASEPRI, r5
   3dea6:	f3bf 8f6f 	isb	sy
	}
	return ret;
}
   3deaa:	4620      	mov	r0, r4
   3deac:	bd38      	pop	{r3, r4, r5, pc}
   3deae:	bf00      	nop
   3deb0:	20029824 	.word	0x20029824
   3deb4:	000498fb 	.word	0x000498fb
   3deb8:	00049921 	.word	0x00049921
   3debc:	0004764f 	.word	0x0004764f
   3dec0:	00049936 	.word	0x00049936
   3dec4:	0004994e 	.word	0x0004994e
   3dec8:	00049965 	.word	0x00049965

0003decc <z_set_timeout_expiry>:

void z_set_timeout_expiry(s32_t ticks, bool idle)
{
   3decc:	b570      	push	{r4, r5, r6, lr}
   3dece:	4604      	mov	r4, r0
   3ded0:	460e      	mov	r6, r1
	__asm__ volatile(
   3ded2:	f04f 0320 	mov.w	r3, #32
   3ded6:	f3ef 8511 	mrs	r5, BASEPRI
   3deda:	f383 8811 	msr	BASEPRI, r3
   3dede:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   3dee2:	481b      	ldr	r0, [pc, #108]	; (3df50 <z_set_timeout_expiry+0x84>)
   3dee4:	f7ff fbcc 	bl	3d680 <z_spin_lock_valid>
   3dee8:	b968      	cbnz	r0, 3df06 <z_set_timeout_expiry+0x3a>
   3deea:	234a      	movs	r3, #74	; 0x4a
   3deec:	4a19      	ldr	r2, [pc, #100]	; (3df54 <z_set_timeout_expiry+0x88>)
   3deee:	491a      	ldr	r1, [pc, #104]	; (3df58 <z_set_timeout_expiry+0x8c>)
   3def0:	481a      	ldr	r0, [pc, #104]	; (3df5c <z_set_timeout_expiry+0x90>)
   3def2:	f002 fb86 	bl	40602 <printk>
   3def6:	4916      	ldr	r1, [pc, #88]	; (3df50 <z_set_timeout_expiry+0x84>)
   3def8:	4819      	ldr	r0, [pc, #100]	; (3df60 <z_set_timeout_expiry+0x94>)
   3defa:	f002 fb82 	bl	40602 <printk>
   3defe:	214a      	movs	r1, #74	; 0x4a
   3df00:	4814      	ldr	r0, [pc, #80]	; (3df54 <z_set_timeout_expiry+0x88>)
   3df02:	f002 fc41 	bl	40788 <assert_post_action>
	z_spin_lock_set_owner(l);
   3df06:	4812      	ldr	r0, [pc, #72]	; (3df50 <z_set_timeout_expiry+0x84>)
   3df08:	f7ff fbd8 	bl	3d6bc <z_spin_lock_set_owner>
	LOCKED(&timeout_lock) {
		int next = next_timeout();
   3df0c:	f7ff fe86 	bl	3dc1c <next_timeout>
		 * SMP can't use this optimization though: we don't
		 * know when context switches happen until interrupt
		 * exit and so can't get the timeslicing clamp folded
		 * in.
		 */
		if (!imminent && (sooner || IS_ENABLED(CONFIG_SMP))) {
   3df10:	2801      	cmp	r0, #1
   3df12:	dd05      	ble.n	3df20 <z_set_timeout_expiry+0x54>
   3df14:	42a0      	cmp	r0, r4
   3df16:	dd03      	ble.n	3df20 <z_set_timeout_expiry+0x54>
			z_clock_set_timeout(ticks, idle);
   3df18:	4631      	mov	r1, r6
   3df1a:	4620      	mov	r0, r4
   3df1c:	f7e8 f954 	bl	261c8 <z_clock_set_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   3df20:	480b      	ldr	r0, [pc, #44]	; (3df50 <z_set_timeout_expiry+0x84>)
   3df22:	f7ff fbbb 	bl	3d69c <z_spin_unlock_valid>
   3df26:	b968      	cbnz	r0, 3df44 <z_set_timeout_expiry+0x78>
   3df28:	235d      	movs	r3, #93	; 0x5d
   3df2a:	4a0a      	ldr	r2, [pc, #40]	; (3df54 <z_set_timeout_expiry+0x88>)
   3df2c:	490d      	ldr	r1, [pc, #52]	; (3df64 <z_set_timeout_expiry+0x98>)
   3df2e:	480b      	ldr	r0, [pc, #44]	; (3df5c <z_set_timeout_expiry+0x90>)
   3df30:	f002 fb67 	bl	40602 <printk>
   3df34:	4906      	ldr	r1, [pc, #24]	; (3df50 <z_set_timeout_expiry+0x84>)
   3df36:	480c      	ldr	r0, [pc, #48]	; (3df68 <z_set_timeout_expiry+0x9c>)
   3df38:	f002 fb63 	bl	40602 <printk>
   3df3c:	215d      	movs	r1, #93	; 0x5d
   3df3e:	4805      	ldr	r0, [pc, #20]	; (3df54 <z_set_timeout_expiry+0x88>)
   3df40:	f002 fc22 	bl	40788 <assert_post_action>
	__asm__ volatile(
   3df44:	f385 8811 	msr	BASEPRI, r5
   3df48:	f3bf 8f6f 	isb	sy
		}
	}
}
   3df4c:	bd70      	pop	{r4, r5, r6, pc}
   3df4e:	bf00      	nop
   3df50:	20029824 	.word	0x20029824
   3df54:	000498fb 	.word	0x000498fb
   3df58:	00049921 	.word	0x00049921
   3df5c:	0004764f 	.word	0x0004764f
   3df60:	00049936 	.word	0x00049936
   3df64:	0004994e 	.word	0x0004994e
   3df68:	00049965 	.word	0x00049965

0003df6c <z_clock_announce>:

void z_clock_announce(s32_t ticks)
{
   3df6c:	e92d 4bf0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, fp, lr}
   3df70:	4604      	mov	r4, r0
#ifdef CONFIG_TIMESLICING
	z_time_slice(ticks);
   3df72:	f7fe fd69 	bl	3ca48 <z_time_slice>
	__asm__ volatile(
   3df76:	f04f 0320 	mov.w	r3, #32
   3df7a:	f3ef 8511 	mrs	r5, BASEPRI
   3df7e:	f383 8811 	msr	BASEPRI, r3
   3df82:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   3df86:	4848      	ldr	r0, [pc, #288]	; (3e0a8 <z_clock_announce+0x13c>)
   3df88:	f7ff fb7a 	bl	3d680 <z_spin_lock_valid>
   3df8c:	b968      	cbnz	r0, 3dfaa <z_clock_announce+0x3e>
   3df8e:	234a      	movs	r3, #74	; 0x4a
   3df90:	4a46      	ldr	r2, [pc, #280]	; (3e0ac <z_clock_announce+0x140>)
   3df92:	4947      	ldr	r1, [pc, #284]	; (3e0b0 <z_clock_announce+0x144>)
   3df94:	4847      	ldr	r0, [pc, #284]	; (3e0b4 <z_clock_announce+0x148>)
   3df96:	f002 fb34 	bl	40602 <printk>
   3df9a:	4943      	ldr	r1, [pc, #268]	; (3e0a8 <z_clock_announce+0x13c>)
   3df9c:	4846      	ldr	r0, [pc, #280]	; (3e0b8 <z_clock_announce+0x14c>)
   3df9e:	f002 fb30 	bl	40602 <printk>
   3dfa2:	214a      	movs	r1, #74	; 0x4a
   3dfa4:	4841      	ldr	r0, [pc, #260]	; (3e0ac <z_clock_announce+0x140>)
   3dfa6:	f002 fbef 	bl	40788 <assert_post_action>
	z_spin_lock_set_owner(l);
   3dfaa:	4f44      	ldr	r7, [pc, #272]	; (3e0bc <z_clock_announce+0x150>)
#endif

	k_spinlock_key_t key = k_spin_lock(&timeout_lock);

	announce_remaining = ticks;
   3dfac:	4e44      	ldr	r6, [pc, #272]	; (3e0c0 <z_clock_announce+0x154>)
   3dfae:	46b9      	mov	r9, r7
   3dfb0:	483d      	ldr	r0, [pc, #244]	; (3e0a8 <z_clock_announce+0x13c>)
	return list->head == list;
   3dfb2:	f8df 8118 	ldr.w	r8, [pc, #280]	; 3e0cc <z_clock_announce+0x160>
   3dfb6:	f7ff fb81 	bl	3d6bc <z_spin_lock_set_owner>
   3dfba:	6034      	str	r4, [r6, #0]
   3dfbc:	f8d8 4000 	ldr.w	r4, [r8]
   3dfc0:	6832      	ldr	r2, [r6, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   3dfc2:	4544      	cmp	r4, r8
   3dfc4:	e9d7 bc00 	ldrd	fp, ip, [r7]
   3dfc8:	d005      	beq.n	3dfd6 <z_clock_announce+0x6a>

	while (first() != NULL && first()->dticks <= announce_remaining) {
   3dfca:	b124      	cbz	r4, 3dfd6 <z_clock_announce+0x6a>
   3dfcc:	68a3      	ldr	r3, [r4, #8]
   3dfce:	4293      	cmp	r3, r2
   3dfd0:	dd26      	ble.n	3e020 <z_clock_announce+0xb4>
		t->fn(t);
		key = k_spin_lock(&timeout_lock);
	}

	if (first() != NULL) {
		first()->dticks -= announce_remaining;
   3dfd2:	1a9b      	subs	r3, r3, r2
   3dfd4:	60a3      	str	r3, [r4, #8]
	}

	curr_tick += announce_remaining;
	announce_remaining = 0;
   3dfd6:	2400      	movs	r4, #0
	curr_tick += announce_remaining;
   3dfd8:	eb1b 0002 	adds.w	r0, fp, r2
   3dfdc:	eb4c 71e2 	adc.w	r1, ip, r2, asr #31
   3dfe0:	e9c9 0100 	strd	r0, r1, [r9]
	announce_remaining = 0;
   3dfe4:	6034      	str	r4, [r6, #0]

	z_clock_set_timeout(next_timeout(), false);
   3dfe6:	f7ff fe19 	bl	3dc1c <next_timeout>
   3dfea:	4621      	mov	r1, r4
   3dfec:	f7e8 f8ec 	bl	261c8 <z_clock_set_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   3dff0:	482d      	ldr	r0, [pc, #180]	; (3e0a8 <z_clock_announce+0x13c>)
   3dff2:	f7ff fb53 	bl	3d69c <z_spin_unlock_valid>
   3dff6:	b968      	cbnz	r0, 3e014 <z_clock_announce+0xa8>
   3dff8:	235d      	movs	r3, #93	; 0x5d
   3dffa:	4a2c      	ldr	r2, [pc, #176]	; (3e0ac <z_clock_announce+0x140>)
   3dffc:	4931      	ldr	r1, [pc, #196]	; (3e0c4 <z_clock_announce+0x158>)
   3dffe:	482d      	ldr	r0, [pc, #180]	; (3e0b4 <z_clock_announce+0x148>)
   3e000:	f002 faff 	bl	40602 <printk>
   3e004:	4928      	ldr	r1, [pc, #160]	; (3e0a8 <z_clock_announce+0x13c>)
   3e006:	4830      	ldr	r0, [pc, #192]	; (3e0c8 <z_clock_announce+0x15c>)
   3e008:	f002 fafb 	bl	40602 <printk>
   3e00c:	215d      	movs	r1, #93	; 0x5d
   3e00e:	4827      	ldr	r0, [pc, #156]	; (3e0ac <z_clock_announce+0x140>)
   3e010:	f002 fbba 	bl	40788 <assert_post_action>
	__asm__ volatile(
   3e014:	f385 8811 	msr	BASEPRI, r5
   3e018:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&timeout_lock, key);
}
   3e01c:	e8bd 8bf0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, fp, pc}
		curr_tick += dt;
   3e020:	eb1b 0003 	adds.w	r0, fp, r3
   3e024:	eb4c 71e3 	adc.w	r1, ip, r3, asr #31
		announce_remaining -= dt;
   3e028:	1ad3      	subs	r3, r2, r3
   3e02a:	6033      	str	r3, [r6, #0]
		t->dticks = 0;
   3e02c:	2300      	movs	r3, #0
		curr_tick += dt;
   3e02e:	e9c7 0100 	strd	r0, r1, [r7]
		t->dticks = 0;
   3e032:	60a3      	str	r3, [r4, #8]
		remove_timeout(t);
   3e034:	4620      	mov	r0, r4
   3e036:	f7ff fddd 	bl	3dbf4 <remove_timeout>
   3e03a:	481b      	ldr	r0, [pc, #108]	; (3e0a8 <z_clock_announce+0x13c>)
   3e03c:	f7ff fb2e 	bl	3d69c <z_spin_unlock_valid>
   3e040:	b968      	cbnz	r0, 3e05e <z_clock_announce+0xf2>
   3e042:	235d      	movs	r3, #93	; 0x5d
   3e044:	4a19      	ldr	r2, [pc, #100]	; (3e0ac <z_clock_announce+0x140>)
   3e046:	491f      	ldr	r1, [pc, #124]	; (3e0c4 <z_clock_announce+0x158>)
   3e048:	481a      	ldr	r0, [pc, #104]	; (3e0b4 <z_clock_announce+0x148>)
   3e04a:	f002 fada 	bl	40602 <printk>
   3e04e:	4916      	ldr	r1, [pc, #88]	; (3e0a8 <z_clock_announce+0x13c>)
   3e050:	481d      	ldr	r0, [pc, #116]	; (3e0c8 <z_clock_announce+0x15c>)
   3e052:	f002 fad6 	bl	40602 <printk>
   3e056:	215d      	movs	r1, #93	; 0x5d
   3e058:	4814      	ldr	r0, [pc, #80]	; (3e0ac <z_clock_announce+0x140>)
   3e05a:	f002 fb95 	bl	40788 <assert_post_action>
   3e05e:	f385 8811 	msr	BASEPRI, r5
   3e062:	f3bf 8f6f 	isb	sy
		t->fn(t);
   3e066:	68e3      	ldr	r3, [r4, #12]
   3e068:	4620      	mov	r0, r4
   3e06a:	4798      	blx	r3
	__asm__ volatile(
   3e06c:	f04f 0320 	mov.w	r3, #32
   3e070:	f3ef 8511 	mrs	r5, BASEPRI
   3e074:	f383 8811 	msr	BASEPRI, r3
   3e078:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   3e07c:	480a      	ldr	r0, [pc, #40]	; (3e0a8 <z_clock_announce+0x13c>)
   3e07e:	f7ff faff 	bl	3d680 <z_spin_lock_valid>
   3e082:	b968      	cbnz	r0, 3e0a0 <z_clock_announce+0x134>
   3e084:	234a      	movs	r3, #74	; 0x4a
   3e086:	4a09      	ldr	r2, [pc, #36]	; (3e0ac <z_clock_announce+0x140>)
   3e088:	4909      	ldr	r1, [pc, #36]	; (3e0b0 <z_clock_announce+0x144>)
   3e08a:	480a      	ldr	r0, [pc, #40]	; (3e0b4 <z_clock_announce+0x148>)
   3e08c:	f002 fab9 	bl	40602 <printk>
   3e090:	4905      	ldr	r1, [pc, #20]	; (3e0a8 <z_clock_announce+0x13c>)
   3e092:	4809      	ldr	r0, [pc, #36]	; (3e0b8 <z_clock_announce+0x14c>)
   3e094:	f002 fab5 	bl	40602 <printk>
   3e098:	214a      	movs	r1, #74	; 0x4a
   3e09a:	4804      	ldr	r0, [pc, #16]	; (3e0ac <z_clock_announce+0x140>)
   3e09c:	f002 fb74 	bl	40788 <assert_post_action>
	z_spin_lock_set_owner(l);
   3e0a0:	4801      	ldr	r0, [pc, #4]	; (3e0a8 <z_clock_announce+0x13c>)
   3e0a2:	f7ff fb0b 	bl	3d6bc <z_spin_lock_set_owner>
	return k;
   3e0a6:	e789      	b.n	3dfbc <z_clock_announce+0x50>
   3e0a8:	20029824 	.word	0x20029824
   3e0ac:	000498fb 	.word	0x000498fb
   3e0b0:	00049921 	.word	0x00049921
   3e0b4:	0004764f 	.word	0x0004764f
   3e0b8:	00049936 	.word	0x00049936
   3e0bc:	20021a78 	.word	0x20021a78
   3e0c0:	20029820 	.word	0x20029820
   3e0c4:	0004994e 	.word	0x0004994e
   3e0c8:	00049965 	.word	0x00049965
   3e0cc:	200324d4 	.word	0x200324d4

0003e0d0 <z_tick_get>:

s64_t z_tick_get(void)
{
   3e0d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   3e0d4:	f04f 0320 	mov.w	r3, #32
   3e0d8:	f3ef 8611 	mrs	r6, BASEPRI
   3e0dc:	f383 8811 	msr	BASEPRI, r3
   3e0e0:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   3e0e4:	481b      	ldr	r0, [pc, #108]	; (3e154 <z_tick_get+0x84>)
   3e0e6:	f7ff facb 	bl	3d680 <z_spin_lock_valid>
   3e0ea:	b968      	cbnz	r0, 3e108 <z_tick_get+0x38>
   3e0ec:	234a      	movs	r3, #74	; 0x4a
   3e0ee:	4a1a      	ldr	r2, [pc, #104]	; (3e158 <z_tick_get+0x88>)
   3e0f0:	491a      	ldr	r1, [pc, #104]	; (3e15c <z_tick_get+0x8c>)
   3e0f2:	481b      	ldr	r0, [pc, #108]	; (3e160 <z_tick_get+0x90>)
   3e0f4:	f002 fa85 	bl	40602 <printk>
   3e0f8:	4916      	ldr	r1, [pc, #88]	; (3e154 <z_tick_get+0x84>)
   3e0fa:	481a      	ldr	r0, [pc, #104]	; (3e164 <z_tick_get+0x94>)
   3e0fc:	f002 fa81 	bl	40602 <printk>
   3e100:	214a      	movs	r1, #74	; 0x4a
   3e102:	4815      	ldr	r0, [pc, #84]	; (3e158 <z_tick_get+0x88>)
   3e104:	f002 fb40 	bl	40788 <assert_post_action>
	z_spin_lock_set_owner(l);
   3e108:	4812      	ldr	r0, [pc, #72]	; (3e154 <z_tick_get+0x84>)
   3e10a:	f7ff fad7 	bl	3d6bc <z_spin_lock_set_owner>
	u64_t t = 0U;

	LOCKED(&timeout_lock) {
		t = curr_tick + z_clock_elapsed();
   3e10e:	f7e8 f8e9 	bl	262e4 <z_clock_elapsed>
   3e112:	4b15      	ldr	r3, [pc, #84]	; (3e168 <z_tick_get+0x98>)
   3e114:	e9d3 4500 	ldrd	r4, r5, [r3]
   3e118:	1827      	adds	r7, r4, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   3e11a:	480e      	ldr	r0, [pc, #56]	; (3e154 <z_tick_get+0x84>)
   3e11c:	f145 0800 	adc.w	r8, r5, #0
   3e120:	f7ff fabc 	bl	3d69c <z_spin_unlock_valid>
   3e124:	b968      	cbnz	r0, 3e142 <z_tick_get+0x72>
   3e126:	235d      	movs	r3, #93	; 0x5d
   3e128:	4a0b      	ldr	r2, [pc, #44]	; (3e158 <z_tick_get+0x88>)
   3e12a:	4910      	ldr	r1, [pc, #64]	; (3e16c <z_tick_get+0x9c>)
   3e12c:	480c      	ldr	r0, [pc, #48]	; (3e160 <z_tick_get+0x90>)
   3e12e:	f002 fa68 	bl	40602 <printk>
   3e132:	4908      	ldr	r1, [pc, #32]	; (3e154 <z_tick_get+0x84>)
   3e134:	480e      	ldr	r0, [pc, #56]	; (3e170 <z_tick_get+0xa0>)
   3e136:	f002 fa64 	bl	40602 <printk>
   3e13a:	215d      	movs	r1, #93	; 0x5d
   3e13c:	4806      	ldr	r0, [pc, #24]	; (3e158 <z_tick_get+0x88>)
   3e13e:	f002 fb23 	bl	40788 <assert_post_action>
	__asm__ volatile(
   3e142:	f386 8811 	msr	BASEPRI, r6
   3e146:	f3bf 8f6f 	isb	sy
	}
	return t;
}
   3e14a:	4638      	mov	r0, r7
   3e14c:	4641      	mov	r1, r8
   3e14e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   3e152:	bf00      	nop
   3e154:	20029824 	.word	0x20029824
   3e158:	000498fb 	.word	0x000498fb
   3e15c:	00049921 	.word	0x00049921
   3e160:	0004764f 	.word	0x0004764f
   3e164:	00049936 	.word	0x00049936
   3e168:	20021a78 	.word	0x20021a78
   3e16c:	0004994e 	.word	0x0004994e
   3e170:	00049965 	.word	0x00049965

0003e174 <z_timer_expiration_handler>:

	/*
	 * if the timer is periodic, start it again; don't add _TICK_ALIGN
	 * since we're already aligned to a tick boundary
	 */
	if (timer->period > 0) {
   3e174:	6a02      	ldr	r2, [r0, #32]
{
   3e176:	b538      	push	{r3, r4, r5, lr}
	if (timer->period > 0) {
   3e178:	2a00      	cmp	r2, #0
{
   3e17a:	4604      	mov	r4, r0
	if (timer->period > 0) {
   3e17c:	dd02      	ble.n	3e184 <z_timer_expiration_handler+0x10>
		z_add_timeout(&timer->timeout, z_timer_expiration_handler,
   3e17e:	490e      	ldr	r1, [pc, #56]	; (3e1b8 <z_timer_expiration_handler+0x44>)
   3e180:	f7ff fd68 	bl	3dc54 <z_add_timeout>
			     timer->period);
	}

	/* update timer's status */
	timer->status += 1U;
   3e184:	6a63      	ldr	r3, [r4, #36]	; 0x24
   3e186:	3301      	adds	r3, #1
   3e188:	6263      	str	r3, [r4, #36]	; 0x24

	/* invoke timer expiry function */
	if (timer->expiry_fn != NULL) {
   3e18a:	69a3      	ldr	r3, [r4, #24]
   3e18c:	b10b      	cbz	r3, 3e192 <z_timer_expiration_handler+0x1e>
		timer->expiry_fn(timer);
   3e18e:	4620      	mov	r0, r4
   3e190:	4798      	blx	r3
	return list->head == list;
   3e192:	f854 5f10 	ldr.w	r5, [r4, #16]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   3e196:	42a5      	cmp	r5, r4
   3e198:	d00d      	beq.n	3e1b6 <z_timer_expiration_handler+0x42>
	}

	thread = z_waitq_head(&timer->wait_q);

	if (thread == NULL) {
   3e19a:	b165      	cbz	r5, 3e1b6 <z_timer_expiration_handler+0x42>
	 * place a thread can be taken off this pend queue, and b) the
	 * only place a thread can be put on the pend queue is at
	 * thread level, which of course cannot interrupt the current
	 * context.
	 */
	z_unpend_thread_no_timeout(thread);
   3e19c:	4628      	mov	r0, r5
   3e19e:	f7fe f89f 	bl	3c2e0 <z_unpend_thread_no_timeout>
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
   3e1a2:	7b6b      	ldrb	r3, [r5, #13]
   3e1a4:	06db      	lsls	r3, r3, #27
   3e1a6:	d104      	bne.n	3e1b2 <z_timer_expiration_handler+0x3e>
	if (z_is_thread_ready(thread)) {
   3e1a8:	69ab      	ldr	r3, [r5, #24]
   3e1aa:	b913      	cbnz	r3, 3e1b2 <z_timer_expiration_handler+0x3e>
		z_add_thread_to_ready_q(thread);
   3e1ac:	4628      	mov	r0, r5
   3e1ae:	f7fe fad3 	bl	3c758 <z_add_thread_to_ready_q>
   3e1b2:	2300      	movs	r3, #0
   3e1b4:	66ab      	str	r3, [r5, #104]	; 0x68

	z_ready_thread(thread);

	arch_thread_return_value_set(thread, 0);
}
   3e1b6:	bd38      	pop	{r3, r4, r5, pc}
   3e1b8:	0003e175 	.word	0x0003e175

0003e1bc <z_impl_k_timer_start>:
	z_object_init(timer);
}


void z_impl_k_timer_start(struct k_timer *timer, s32_t duration, s32_t period)
{
   3e1bc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
	__ASSERT(duration >= 0 && period >= 0 &&
   3e1c0:	f1b1 0900 	subs.w	r9, r1, #0
{
   3e1c4:	4604      	mov	r4, r0
   3e1c6:	4615      	mov	r5, r2
	__ASSERT(duration >= 0 && period >= 0 &&
   3e1c8:	db04      	blt.n	3e1d4 <z_impl_k_timer_start+0x18>
   3e1ca:	2a00      	cmp	r2, #0
   3e1cc:	db02      	blt.n	3e1d4 <z_impl_k_timer_start+0x18>
   3e1ce:	ea59 0302 	orrs.w	r3, r9, r2
   3e1d2:	d10c      	bne.n	3e1ee <z_impl_k_timer_start+0x32>
   3e1d4:	491a      	ldr	r1, [pc, #104]	; (3e240 <z_impl_k_timer_start+0x84>)
   3e1d6:	236f      	movs	r3, #111	; 0x6f
   3e1d8:	4a1a      	ldr	r2, [pc, #104]	; (3e244 <z_impl_k_timer_start+0x88>)
   3e1da:	481b      	ldr	r0, [pc, #108]	; (3e248 <z_impl_k_timer_start+0x8c>)
   3e1dc:	f002 fa11 	bl	40602 <printk>
   3e1e0:	481a      	ldr	r0, [pc, #104]	; (3e24c <z_impl_k_timer_start+0x90>)
   3e1e2:	f002 fa0e 	bl	40602 <printk>
   3e1e6:	216f      	movs	r1, #111	; 0x6f
   3e1e8:	4816      	ldr	r0, [pc, #88]	; (3e244 <z_impl_k_timer_start+0x88>)
   3e1ea:	f002 facd 	bl	40788 <assert_post_action>
   3e1ee:	f240 36e7 	movw	r6, #999	; 0x3e7
   3e1f2:	2700      	movs	r7, #0
   3e1f4:	f44f 4800 	mov.w	r8, #32768	; 0x8000
   3e1f8:	4630      	mov	r0, r6
   3e1fa:	4639      	mov	r1, r7
   3e1fc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   3e200:	2300      	movs	r3, #0
   3e202:	fbe8 0105 	umlal	r0, r1, r8, r5
   3e206:	f7de fde9 	bl	1cddc <__aeabi_uldivmod>
   3e20a:	4639      	mov	r1, r7
		 (duration != 0 || period != 0), "invalid parameters\n");

	volatile s32_t period_in_ticks, duration_in_ticks;

	period_in_ticks = k_ms_to_ticks_ceil32(period);
   3e20c:	9000      	str	r0, [sp, #0]
   3e20e:	4630      	mov	r0, r6
   3e210:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   3e214:	2300      	movs	r3, #0
   3e216:	fbe8 0109 	umlal	r0, r1, r8, r9
   3e21a:	f7de fddf 	bl	1cddc <__aeabi_uldivmod>
	duration_in_ticks = k_ms_to_ticks_ceil32(duration);
   3e21e:	9001      	str	r0, [sp, #4]

	(void)z_abort_timeout(&timer->timeout);
   3e220:	4620      	mov	r0, r4
   3e222:	f7ff fdbd 	bl	3dda0 <z_abort_timeout>
	timer->period = period_in_ticks;
   3e226:	9b00      	ldr	r3, [sp, #0]
	timer->status = 0U;
	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
   3e228:	4620      	mov	r0, r4
	timer->period = period_in_ticks;
   3e22a:	6223      	str	r3, [r4, #32]
	timer->status = 0U;
   3e22c:	2300      	movs	r3, #0
	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
   3e22e:	9a01      	ldr	r2, [sp, #4]
   3e230:	4907      	ldr	r1, [pc, #28]	; (3e250 <z_impl_k_timer_start+0x94>)
	timer->status = 0U;
   3e232:	6263      	str	r3, [r4, #36]	; 0x24
		     duration_in_ticks);
}
   3e234:	b003      	add	sp, #12
   3e236:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
   3e23a:	f7ff bd0b 	b.w	3dc54 <z_add_timeout>
   3e23e:	bf00      	nop
   3e240:	0004d5c3 	.word	0x0004d5c3
   3e244:	0004d5a1 	.word	0x0004d5a1
   3e248:	0004764f 	.word	0x0004764f
   3e24c:	0004d602 	.word	0x0004d602
   3e250:	0003e175 	.word	0x0003e175

0003e254 <k_poll_poller_cb>:

	return events_registered;
}

static int k_poll_poller_cb(struct k_poll_event *event, u32_t state)
{
   3e254:	b538      	push	{r3, r4, r5, lr}
	struct k_thread *thread = event->poller->thread;
   3e256:	6883      	ldr	r3, [r0, #8]
{
   3e258:	460d      	mov	r5, r1
	struct k_thread *thread = event->poller->thread;
   3e25a:	685c      	ldr	r4, [r3, #4]

	__ASSERT(thread != NULL, "poller should have a thread\n");
   3e25c:	b964      	cbnz	r4, 3e278 <k_poll_poller_cb+0x24>
   3e25e:	4915      	ldr	r1, [pc, #84]	; (3e2b4 <k_poll_poller_cb+0x60>)
   3e260:	23e0      	movs	r3, #224	; 0xe0
   3e262:	4a15      	ldr	r2, [pc, #84]	; (3e2b8 <k_poll_poller_cb+0x64>)
   3e264:	4815      	ldr	r0, [pc, #84]	; (3e2bc <k_poll_poller_cb+0x68>)
   3e266:	f002 f9cc 	bl	40602 <printk>
   3e26a:	4815      	ldr	r0, [pc, #84]	; (3e2c0 <k_poll_poller_cb+0x6c>)
   3e26c:	f002 f9c9 	bl	40602 <printk>
   3e270:	21e0      	movs	r1, #224	; 0xe0
   3e272:	4811      	ldr	r0, [pc, #68]	; (3e2b8 <k_poll_poller_cb+0x64>)
   3e274:	f002 fa88 	bl	40788 <assert_post_action>

	if (!z_is_thread_pending(thread)) {
   3e278:	7b63      	ldrb	r3, [r4, #13]
   3e27a:	079a      	lsls	r2, r3, #30
   3e27c:	d401      	bmi.n	3e282 <k_poll_poller_cb+0x2e>
		return 0;
   3e27e:	2000      	movs	r0, #0
	}

	z_ready_thread(thread);

	return 0;
}
   3e280:	bd38      	pop	{r3, r4, r5, pc}
	if (z_is_thread_timeout_expired(thread)) {
   3e282:	6a23      	ldr	r3, [r4, #32]
   3e284:	3302      	adds	r3, #2
   3e286:	d012      	beq.n	3e2ae <k_poll_poller_cb+0x5a>
	z_unpend_thread(thread);
   3e288:	4620      	mov	r0, r4
   3e28a:	f7fe f95d 	bl	3c548 <z_unpend_thread>
	arch_thread_return_value_set(thread,
   3e28e:	2d08      	cmp	r5, #8
   3e290:	bf0c      	ite	eq
   3e292:	f06f 0303 	mvneq.w	r3, #3
   3e296:	2300      	movne	r3, #0
   3e298:	66a3      	str	r3, [r4, #104]	; 0x68
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
   3e29a:	7b63      	ldrb	r3, [r4, #13]
   3e29c:	06db      	lsls	r3, r3, #27
   3e29e:	d1ee      	bne.n	3e27e <k_poll_poller_cb+0x2a>
	if (!z_is_thread_ready(thread)) {
   3e2a0:	69a5      	ldr	r5, [r4, #24]
   3e2a2:	2d00      	cmp	r5, #0
   3e2a4:	d1eb      	bne.n	3e27e <k_poll_poller_cb+0x2a>
		z_add_thread_to_ready_q(thread);
   3e2a6:	4620      	mov	r0, r4
   3e2a8:	f7fe fa56 	bl	3c758 <z_add_thread_to_ready_q>
	return 0;
   3e2ac:	e7e7      	b.n	3e27e <k_poll_poller_cb+0x2a>
		return -EAGAIN;
   3e2ae:	f06f 000a 	mvn.w	r0, #10
   3e2b2:	e7e5      	b.n	3e280 <k_poll_poller_cb+0x2c>
   3e2b4:	0004d786 	.word	0x0004d786
   3e2b8:	0004d765 	.word	0x0004d765
   3e2bc:	0004764f 	.word	0x0004764f
   3e2c0:	0004d79c 	.word	0x0004d79c

0003e2c4 <clear_event_registrations>:
{
   3e2c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   3e2c8:	2414      	movs	r4, #20
   3e2ca:	4680      	mov	r8, r0
   3e2cc:	4617      	mov	r7, r2
	while (num_events--) {
   3e2ce:	fb04 0401 	mla	r4, r4, r1, r0
		__ASSERT(false, "invalid event type\n");
   3e2d2:	4d48      	ldr	r5, [pc, #288]	; (3e3f4 <clear_event_registrations+0x130>)
   3e2d4:	f8df 9158 	ldr.w	r9, [pc, #344]	; 3e430 <clear_event_registrations+0x16c>
   3e2d8:	4e47      	ldr	r6, [pc, #284]	; (3e3f8 <clear_event_registrations+0x134>)
	while (num_events--) {
   3e2da:	4544      	cmp	r4, r8
   3e2dc:	d101      	bne.n	3e2e2 <clear_event_registrations+0x1e>
}
   3e2de:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	event->poller = NULL;
   3e2e2:	2300      	movs	r3, #0
   3e2e4:	f844 3c0c 	str.w	r3, [r4, #-12]
	switch (event->type) {
   3e2e8:	f814 3c07 	ldrb.w	r3, [r4, #-7]
   3e2ec:	f003 030f 	and.w	r3, r3, #15
   3e2f0:	2b04      	cmp	r3, #4
   3e2f2:	d83d      	bhi.n	3e370 <clear_event_registrations+0xac>
   3e2f4:	e8df f003 	tbb	[pc, r3]
   3e2f8:	3c032d49 	.word	0x3c032d49
   3e2fc:	1e          	.byte	0x1e
   3e2fd:	00          	.byte	0x00
		__ASSERT(event->sem != NULL, "invalid semaphore\n");
   3e2fe:	f854 3c04 	ldr.w	r3, [r4, #-4]
   3e302:	b963      	cbnz	r3, 3e31e <clear_event_registrations+0x5a>
   3e304:	493d      	ldr	r1, [pc, #244]	; (3e3fc <clear_event_registrations+0x138>)
   3e306:	2396      	movs	r3, #150	; 0x96
   3e308:	462a      	mov	r2, r5
   3e30a:	4630      	mov	r0, r6
   3e30c:	f002 f979 	bl	40602 <printk>
   3e310:	483b      	ldr	r0, [pc, #236]	; (3e400 <clear_event_registrations+0x13c>)
   3e312:	f002 f976 	bl	40602 <printk>
   3e316:	2196      	movs	r1, #150	; 0x96
		__ASSERT(event->signal != NULL, "invalid poll signal\n");
   3e318:	4628      	mov	r0, r5
   3e31a:	f002 fa35 	bl	40788 <assert_post_action>
	if (remove && sys_dnode_is_linked(&event->_node)) {
   3e31e:	f854 3c14 	ldr.w	r3, [r4, #-20]
   3e322:	b393      	cbz	r3, 3e38a <clear_event_registrations+0xc6>
	node->prev->next = node->next;
   3e324:	f854 2c10 	ldr.w	r2, [r4, #-16]
   3e328:	6013      	str	r3, [r2, #0]
	node->next->prev = node->prev;
   3e32a:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   3e32c:	2300      	movs	r3, #0
	node->prev = NULL;
   3e32e:	e944 3305 	strd	r3, r3, [r4, #-20]
   3e332:	e02a      	b.n	3e38a <clear_event_registrations+0xc6>
		__ASSERT(event->queue != NULL, "invalid queue\n");
   3e334:	f854 3c04 	ldr.w	r3, [r4, #-4]
   3e338:	2b00      	cmp	r3, #0
   3e33a:	d1f0      	bne.n	3e31e <clear_event_registrations+0x5a>
   3e33c:	4931      	ldr	r1, [pc, #196]	; (3e404 <clear_event_registrations+0x140>)
   3e33e:	239a      	movs	r3, #154	; 0x9a
   3e340:	462a      	mov	r2, r5
   3e342:	4630      	mov	r0, r6
   3e344:	f002 f95d 	bl	40602 <printk>
   3e348:	482f      	ldr	r0, [pc, #188]	; (3e408 <clear_event_registrations+0x144>)
   3e34a:	f002 f95a 	bl	40602 <printk>
   3e34e:	219a      	movs	r1, #154	; 0x9a
   3e350:	e7e2      	b.n	3e318 <clear_event_registrations+0x54>
		__ASSERT(event->signal != NULL, "invalid poll signal\n");
   3e352:	f854 3c04 	ldr.w	r3, [r4, #-4]
   3e356:	2b00      	cmp	r3, #0
   3e358:	d1e1      	bne.n	3e31e <clear_event_registrations+0x5a>
   3e35a:	492c      	ldr	r1, [pc, #176]	; (3e40c <clear_event_registrations+0x148>)
   3e35c:	239e      	movs	r3, #158	; 0x9e
   3e35e:	462a      	mov	r2, r5
   3e360:	4630      	mov	r0, r6
   3e362:	f002 f94e 	bl	40602 <printk>
   3e366:	482a      	ldr	r0, [pc, #168]	; (3e410 <clear_event_registrations+0x14c>)
   3e368:	f002 f94b 	bl	40602 <printk>
   3e36c:	219e      	movs	r1, #158	; 0x9e
   3e36e:	e7d3      	b.n	3e318 <clear_event_registrations+0x54>
		__ASSERT(false, "invalid event type\n");
   3e370:	4649      	mov	r1, r9
   3e372:	23a5      	movs	r3, #165	; 0xa5
   3e374:	462a      	mov	r2, r5
   3e376:	4630      	mov	r0, r6
   3e378:	f002 f943 	bl	40602 <printk>
   3e37c:	4825      	ldr	r0, [pc, #148]	; (3e414 <clear_event_registrations+0x150>)
   3e37e:	f002 f940 	bl	40602 <printk>
   3e382:	21a5      	movs	r1, #165	; 0xa5
   3e384:	4628      	mov	r0, r5
   3e386:	f002 f9ff 	bl	40788 <assert_post_action>
   3e38a:	4823      	ldr	r0, [pc, #140]	; (3e418 <clear_event_registrations+0x154>)
   3e38c:	f7ff f986 	bl	3d69c <z_spin_unlock_valid>
   3e390:	b968      	cbnz	r0, 3e3ae <clear_event_registrations+0xea>
   3e392:	235d      	movs	r3, #93	; 0x5d
   3e394:	4a21      	ldr	r2, [pc, #132]	; (3e41c <clear_event_registrations+0x158>)
   3e396:	4922      	ldr	r1, [pc, #136]	; (3e420 <clear_event_registrations+0x15c>)
   3e398:	4630      	mov	r0, r6
   3e39a:	f002 f932 	bl	40602 <printk>
   3e39e:	491e      	ldr	r1, [pc, #120]	; (3e418 <clear_event_registrations+0x154>)
   3e3a0:	4820      	ldr	r0, [pc, #128]	; (3e424 <clear_event_registrations+0x160>)
   3e3a2:	f002 f92e 	bl	40602 <printk>
   3e3a6:	215d      	movs	r1, #93	; 0x5d
   3e3a8:	481c      	ldr	r0, [pc, #112]	; (3e41c <clear_event_registrations+0x158>)
   3e3aa:	f002 f9ed 	bl	40788 <assert_post_action>
   3e3ae:	f387 8811 	msr	BASEPRI, r7
   3e3b2:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
   3e3b6:	f04f 0320 	mov.w	r3, #32
   3e3ba:	f3ef 8711 	mrs	r7, BASEPRI
   3e3be:	f383 8811 	msr	BASEPRI, r3
   3e3c2:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   3e3c6:	4814      	ldr	r0, [pc, #80]	; (3e418 <clear_event_registrations+0x154>)
   3e3c8:	f7ff f95a 	bl	3d680 <z_spin_lock_valid>
   3e3cc:	b968      	cbnz	r0, 3e3ea <clear_event_registrations+0x126>
   3e3ce:	234a      	movs	r3, #74	; 0x4a
   3e3d0:	4a12      	ldr	r2, [pc, #72]	; (3e41c <clear_event_registrations+0x158>)
   3e3d2:	4915      	ldr	r1, [pc, #84]	; (3e428 <clear_event_registrations+0x164>)
   3e3d4:	4630      	mov	r0, r6
   3e3d6:	f002 f914 	bl	40602 <printk>
   3e3da:	490f      	ldr	r1, [pc, #60]	; (3e418 <clear_event_registrations+0x154>)
   3e3dc:	4813      	ldr	r0, [pc, #76]	; (3e42c <clear_event_registrations+0x168>)
   3e3de:	f002 f910 	bl	40602 <printk>
   3e3e2:	214a      	movs	r1, #74	; 0x4a
   3e3e4:	480d      	ldr	r0, [pc, #52]	; (3e41c <clear_event_registrations+0x158>)
   3e3e6:	f002 f9cf 	bl	40788 <assert_post_action>
	z_spin_lock_set_owner(l);
   3e3ea:	480b      	ldr	r0, [pc, #44]	; (3e418 <clear_event_registrations+0x154>)
   3e3ec:	f7ff f966 	bl	3d6bc <z_spin_lock_set_owner>
	return k;
   3e3f0:	3c14      	subs	r4, #20
   3e3f2:	e772      	b.n	3e2da <clear_event_registrations+0x16>
   3e3f4:	0004d765 	.word	0x0004d765
   3e3f8:	0004764f 	.word	0x0004764f
   3e3fc:	0004d618 	.word	0x0004d618
   3e400:	0004d632 	.word	0x0004d632
   3e404:	0004d647 	.word	0x0004d647
   3e408:	0004d663 	.word	0x0004d663
   3e40c:	0004d674 	.word	0x0004d674
   3e410:	0004d691 	.word	0x0004d691
   3e414:	0004d6a8 	.word	0x0004d6a8
   3e418:	20029828 	.word	0x20029828
   3e41c:	000498fb 	.word	0x000498fb
   3e420:	0004994e 	.word	0x0004994e
   3e424:	00049965 	.word	0x00049965
   3e428:	00049921 	.word	0x00049921
   3e42c:	00049936 	.word	0x00049936
   3e430:	0004d39b 	.word	0x0004d39b

0003e434 <register_events>:
{
   3e434:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	for (int ii = 0; ii < num_events; ii++) {
   3e438:	2700      	movs	r7, #0
{
   3e43a:	468a      	mov	sl, r1
   3e43c:	4615      	mov	r5, r2
   3e43e:	4604      	mov	r4, r0
	int events_registered = 0;
   3e440:	46b9      	mov	r9, r7
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   3e442:	4e69      	ldr	r6, [pc, #420]	; (3e5e8 <register_events+0x1b4>)
   3e444:	f8df 81e0 	ldr.w	r8, [pc, #480]	; 3e628 <register_events+0x1f4>
{
   3e448:	9301      	str	r3, [sp, #4]
	for (int ii = 0; ii < num_events; ii++) {
   3e44a:	4557      	cmp	r7, sl
   3e44c:	db03      	blt.n	3e456 <register_events+0x22>
}
   3e44e:	4648      	mov	r0, r9
   3e450:	b003      	add	sp, #12
   3e452:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3e456:	f04f 0320 	mov.w	r3, #32
   3e45a:	f3ef 8b11 	mrs	fp, BASEPRI
   3e45e:	f383 8811 	msr	BASEPRI, r3
   3e462:	f3bf 8f6f 	isb	sy
   3e466:	4630      	mov	r0, r6
   3e468:	f7ff f90a 	bl	3d680 <z_spin_lock_valid>
   3e46c:	b968      	cbnz	r0, 3e48a <register_events+0x56>
   3e46e:	234a      	movs	r3, #74	; 0x4a
   3e470:	4642      	mov	r2, r8
   3e472:	495e      	ldr	r1, [pc, #376]	; (3e5ec <register_events+0x1b8>)
   3e474:	485e      	ldr	r0, [pc, #376]	; (3e5f0 <register_events+0x1bc>)
   3e476:	f002 f8c4 	bl	40602 <printk>
   3e47a:	4631      	mov	r1, r6
   3e47c:	485d      	ldr	r0, [pc, #372]	; (3e5f4 <register_events+0x1c0>)
   3e47e:	f002 f8c0 	bl	40602 <printk>
   3e482:	214a      	movs	r1, #74	; 0x4a
   3e484:	4640      	mov	r0, r8
   3e486:	f002 f97f 	bl	40788 <assert_post_action>
	z_spin_lock_set_owner(l);
   3e48a:	4630      	mov	r0, r6
   3e48c:	f7ff f916 	bl	3d6bc <z_spin_lock_set_owner>
	switch (event->type) {
   3e490:	7b63      	ldrb	r3, [r4, #13]
   3e492:	f003 030f 	and.w	r3, r3, #15
   3e496:	2b04      	cmp	r3, #4
   3e498:	d844      	bhi.n	3e524 <register_events+0xf0>
   3e49a:	e8df f003 	tbb	[pc, r3]
   3e49e:	3d2d      	.short	0x3d2d
   3e4a0:	4303      	.short	0x4303
   3e4a2:	2a          	.byte	0x2a
   3e4a3:	00          	.byte	0x00
		if (k_sem_count_get(event->sem) > 0) {
   3e4a4:	6923      	ldr	r3, [r4, #16]
   3e4a6:	689b      	ldr	r3, [r3, #8]
   3e4a8:	b333      	cbz	r3, 3e4f8 <register_events+0xc4>
			*state = K_POLL_STATE_SEM_AVAILABLE;
   3e4aa:	2202      	movs	r2, #2
	event->poller = NULL;
   3e4ac:	2100      	movs	r1, #0
	event->state |= state;
   3e4ae:	68e3      	ldr	r3, [r4, #12]
	event->poller = NULL;
   3e4b0:	60a1      	str	r1, [r4, #8]
	event->state |= state;
   3e4b2:	f3c3 3004 	ubfx	r0, r3, #12, #5
   3e4b6:	4302      	orrs	r2, r0
   3e4b8:	f362 3310 	bfi	r3, r2, #12, #5
   3e4bc:	60e3      	str	r3, [r4, #12]
			poller->is_polling = false;
   3e4be:	7029      	strb	r1, [r5, #0]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   3e4c0:	4630      	mov	r0, r6
   3e4c2:	f7ff f8eb 	bl	3d69c <z_spin_unlock_valid>
   3e4c6:	b968      	cbnz	r0, 3e4e4 <register_events+0xb0>
   3e4c8:	235d      	movs	r3, #93	; 0x5d
   3e4ca:	4642      	mov	r2, r8
   3e4cc:	494a      	ldr	r1, [pc, #296]	; (3e5f8 <register_events+0x1c4>)
   3e4ce:	4848      	ldr	r0, [pc, #288]	; (3e5f0 <register_events+0x1bc>)
   3e4d0:	f002 f897 	bl	40602 <printk>
   3e4d4:	4631      	mov	r1, r6
   3e4d6:	4849      	ldr	r0, [pc, #292]	; (3e5fc <register_events+0x1c8>)
   3e4d8:	f002 f893 	bl	40602 <printk>
   3e4dc:	215d      	movs	r1, #93	; 0x5d
   3e4de:	4640      	mov	r0, r8
   3e4e0:	f002 f952 	bl	40788 <assert_post_action>
	__asm__ volatile(
   3e4e4:	f38b 8811 	msr	BASEPRI, fp
   3e4e8:	f3bf 8f6f 	isb	sy
	for (int ii = 0; ii < num_events; ii++) {
   3e4ec:	3701      	adds	r7, #1
   3e4ee:	3414      	adds	r4, #20
   3e4f0:	e7ab      	b.n	3e44a <register_events+0x16>
		if (!k_queue_is_empty(event->queue)) {
   3e4f2:	6923      	ldr	r3, [r4, #16]
   3e4f4:	681b      	ldr	r3, [r3, #0]
   3e4f6:	bb33      	cbnz	r3, 3e546 <register_events+0x112>
		} else if (!just_check && poller->is_polling) {
   3e4f8:	9b01      	ldr	r3, [sp, #4]
   3e4fa:	2b00      	cmp	r3, #0
   3e4fc:	d1e0      	bne.n	3e4c0 <register_events+0x8c>
   3e4fe:	782b      	ldrb	r3, [r5, #0]
   3e500:	2b00      	cmp	r3, #0
   3e502:	d0dd      	beq.n	3e4c0 <register_events+0x8c>
	switch (event->type) {
   3e504:	7b63      	ldrb	r3, [r4, #13]
   3e506:	f003 030f 	and.w	r3, r3, #15
   3e50a:	2b04      	cmp	r3, #4
   3e50c:	d85d      	bhi.n	3e5ca <register_events+0x196>
   3e50e:	e8df f003 	tbb	[pc, r3]
   3e512:	4931      	.short	0x4931
   3e514:	5c1c      	.short	0x5c1c
   3e516:	35          	.byte	0x35
   3e517:	00          	.byte	0x00
		if (event->signal->signaled != 0U) {
   3e518:	6923      	ldr	r3, [r4, #16]
   3e51a:	689b      	ldr	r3, [r3, #8]
   3e51c:	2b00      	cmp	r3, #0
   3e51e:	d0eb      	beq.n	3e4f8 <register_events+0xc4>
			*state = K_POLL_STATE_SIGNALED;
   3e520:	2201      	movs	r2, #1
   3e522:	e7c3      	b.n	3e4ac <register_events+0x78>
		__ASSERT(false, "invalid event type (0x%x)\n", event->type);
   3e524:	2350      	movs	r3, #80	; 0x50
   3e526:	4a36      	ldr	r2, [pc, #216]	; (3e600 <register_events+0x1cc>)
   3e528:	4936      	ldr	r1, [pc, #216]	; (3e604 <register_events+0x1d0>)
   3e52a:	4831      	ldr	r0, [pc, #196]	; (3e5f0 <register_events+0x1bc>)
   3e52c:	f002 f869 	bl	40602 <printk>
   3e530:	7b61      	ldrb	r1, [r4, #13]
   3e532:	4835      	ldr	r0, [pc, #212]	; (3e608 <register_events+0x1d4>)
   3e534:	f001 010f 	and.w	r1, r1, #15
   3e538:	f002 f863 	bl	40602 <printk>
   3e53c:	2150      	movs	r1, #80	; 0x50
   3e53e:	4830      	ldr	r0, [pc, #192]	; (3e600 <register_events+0x1cc>)
   3e540:	f002 f922 	bl	40788 <assert_post_action>
		break;
   3e544:	e7d8      	b.n	3e4f8 <register_events+0xc4>
			*state = K_POLL_STATE_FIFO_DATA_AVAILABLE;
   3e546:	2204      	movs	r2, #4
   3e548:	e7b0      	b.n	3e4ac <register_events+0x78>
		__ASSERT(event->sem != NULL, "invalid semaphore\n");
   3e54a:	6923      	ldr	r3, [r4, #16]
   3e54c:	b963      	cbnz	r3, 3e568 <register_events+0x134>
   3e54e:	492f      	ldr	r1, [pc, #188]	; (3e60c <register_events+0x1d8>)
   3e550:	2375      	movs	r3, #117	; 0x75
   3e552:	4a2b      	ldr	r2, [pc, #172]	; (3e600 <register_events+0x1cc>)
   3e554:	4826      	ldr	r0, [pc, #152]	; (3e5f0 <register_events+0x1bc>)
   3e556:	f002 f854 	bl	40602 <printk>
   3e55a:	482d      	ldr	r0, [pc, #180]	; (3e610 <register_events+0x1dc>)
   3e55c:	f002 f851 	bl	40602 <printk>
   3e560:	2175      	movs	r1, #117	; 0x75
   3e562:	4827      	ldr	r0, [pc, #156]	; (3e600 <register_events+0x1cc>)
   3e564:	f002 f910 	bl	40788 <assert_post_action>
		add_event(&event->sem->poll_events, event, poller);
   3e568:	462a      	mov	r2, r5
   3e56a:	4621      	mov	r1, r4
   3e56c:	6920      	ldr	r0, [r4, #16]
   3e56e:	3010      	adds	r0, #16
		add_event(&event->queue->poll_events, event, poller);
   3e570:	f006 fc03 	bl	44d7a <add_event>
	event->poller = poller;
   3e574:	60a5      	str	r5, [r4, #8]
				events_registered += 1;
   3e576:	f109 0901 	add.w	r9, r9, #1
   3e57a:	e7a1      	b.n	3e4c0 <register_events+0x8c>
		__ASSERT(event->queue != NULL, "invalid queue\n");
   3e57c:	6923      	ldr	r3, [r4, #16]
   3e57e:	b963      	cbnz	r3, 3e59a <register_events+0x166>
   3e580:	4924      	ldr	r1, [pc, #144]	; (3e614 <register_events+0x1e0>)
   3e582:	2379      	movs	r3, #121	; 0x79
   3e584:	4a1e      	ldr	r2, [pc, #120]	; (3e600 <register_events+0x1cc>)
   3e586:	481a      	ldr	r0, [pc, #104]	; (3e5f0 <register_events+0x1bc>)
   3e588:	f002 f83b 	bl	40602 <printk>
   3e58c:	4822      	ldr	r0, [pc, #136]	; (3e618 <register_events+0x1e4>)
   3e58e:	f002 f838 	bl	40602 <printk>
   3e592:	2179      	movs	r1, #121	; 0x79
   3e594:	481a      	ldr	r0, [pc, #104]	; (3e600 <register_events+0x1cc>)
   3e596:	f002 f8f7 	bl	40788 <assert_post_action>
		add_event(&event->queue->poll_events, event, poller);
   3e59a:	6920      	ldr	r0, [r4, #16]
   3e59c:	462a      	mov	r2, r5
   3e59e:	4621      	mov	r1, r4
   3e5a0:	300c      	adds	r0, #12
   3e5a2:	e7e5      	b.n	3e570 <register_events+0x13c>
		__ASSERT(event->signal != NULL, "invalid poll signal\n");
   3e5a4:	6923      	ldr	r3, [r4, #16]
   3e5a6:	b963      	cbnz	r3, 3e5c2 <register_events+0x18e>
   3e5a8:	491c      	ldr	r1, [pc, #112]	; (3e61c <register_events+0x1e8>)
   3e5aa:	237d      	movs	r3, #125	; 0x7d
   3e5ac:	4a14      	ldr	r2, [pc, #80]	; (3e600 <register_events+0x1cc>)
   3e5ae:	4810      	ldr	r0, [pc, #64]	; (3e5f0 <register_events+0x1bc>)
   3e5b0:	f002 f827 	bl	40602 <printk>
   3e5b4:	481a      	ldr	r0, [pc, #104]	; (3e620 <register_events+0x1ec>)
   3e5b6:	f002 f824 	bl	40602 <printk>
   3e5ba:	217d      	movs	r1, #125	; 0x7d
   3e5bc:	4810      	ldr	r0, [pc, #64]	; (3e600 <register_events+0x1cc>)
   3e5be:	f002 f8e3 	bl	40788 <assert_post_action>
		add_event(&event->signal->poll_events, event, poller);
   3e5c2:	462a      	mov	r2, r5
   3e5c4:	4621      	mov	r1, r4
   3e5c6:	6920      	ldr	r0, [r4, #16]
   3e5c8:	e7d2      	b.n	3e570 <register_events+0x13c>
		__ASSERT(false, "invalid event type\n");
   3e5ca:	2384      	movs	r3, #132	; 0x84
   3e5cc:	4a0c      	ldr	r2, [pc, #48]	; (3e600 <register_events+0x1cc>)
   3e5ce:	490d      	ldr	r1, [pc, #52]	; (3e604 <register_events+0x1d0>)
   3e5d0:	4807      	ldr	r0, [pc, #28]	; (3e5f0 <register_events+0x1bc>)
   3e5d2:	f002 f816 	bl	40602 <printk>
   3e5d6:	4813      	ldr	r0, [pc, #76]	; (3e624 <register_events+0x1f0>)
   3e5d8:	f002 f813 	bl	40602 <printk>
   3e5dc:	2184      	movs	r1, #132	; 0x84
   3e5de:	4808      	ldr	r0, [pc, #32]	; (3e600 <register_events+0x1cc>)
   3e5e0:	f002 f8d2 	bl	40788 <assert_post_action>
		break;
   3e5e4:	e7c6      	b.n	3e574 <register_events+0x140>
   3e5e6:	bf00      	nop
   3e5e8:	20029828 	.word	0x20029828
   3e5ec:	00049921 	.word	0x00049921
   3e5f0:	0004764f 	.word	0x0004764f
   3e5f4:	00049936 	.word	0x00049936
   3e5f8:	0004994e 	.word	0x0004994e
   3e5fc:	00049965 	.word	0x00049965
   3e600:	0004d765 	.word	0x0004d765
   3e604:	0004d39b 	.word	0x0004d39b
   3e608:	0004d7bb 	.word	0x0004d7bb
   3e60c:	0004d618 	.word	0x0004d618
   3e610:	0004d632 	.word	0x0004d632
   3e614:	0004d647 	.word	0x0004d647
   3e618:	0004d663 	.word	0x0004d663
   3e61c:	0004d674 	.word	0x0004d674
   3e620:	0004d691 	.word	0x0004d691
   3e624:	0004d6a8 	.word	0x0004d6a8
   3e628:	000498fb 	.word	0x000498fb

0003e62c <k_poll_event_init>:
{
   3e62c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   3e62e:	4604      	mov	r4, r0
   3e630:	460f      	mov	r7, r1
   3e632:	461d      	mov	r5, r3
	__ASSERT(mode == K_POLL_MODE_NOTIFY_ONLY,
   3e634:	4616      	mov	r6, r2
   3e636:	b162      	cbz	r2, 3e652 <k_poll_event_init+0x26>
   3e638:	491c      	ldr	r1, [pc, #112]	; (3e6ac <k_poll_event_init+0x80>)
   3e63a:	232a      	movs	r3, #42	; 0x2a
   3e63c:	4a1c      	ldr	r2, [pc, #112]	; (3e6b0 <k_poll_event_init+0x84>)
   3e63e:	481d      	ldr	r0, [pc, #116]	; (3e6b4 <k_poll_event_init+0x88>)
   3e640:	f001 ffdf 	bl	40602 <printk>
   3e644:	481c      	ldr	r0, [pc, #112]	; (3e6b8 <k_poll_event_init+0x8c>)
   3e646:	f001 ffdc 	bl	40602 <printk>
   3e64a:	212a      	movs	r1, #42	; 0x2a
   3e64c:	4818      	ldr	r0, [pc, #96]	; (3e6b0 <k_poll_event_init+0x84>)
   3e64e:	f002 f89b 	bl	40788 <assert_post_action>
	__ASSERT(type < (BIT(_POLL_NUM_TYPES)), "invalid type\n");
   3e652:	2f0f      	cmp	r7, #15
   3e654:	d90c      	bls.n	3e670 <k_poll_event_init+0x44>
   3e656:	4919      	ldr	r1, [pc, #100]	; (3e6bc <k_poll_event_init+0x90>)
   3e658:	232b      	movs	r3, #43	; 0x2b
   3e65a:	4a15      	ldr	r2, [pc, #84]	; (3e6b0 <k_poll_event_init+0x84>)
   3e65c:	4815      	ldr	r0, [pc, #84]	; (3e6b4 <k_poll_event_init+0x88>)
   3e65e:	f001 ffd0 	bl	40602 <printk>
   3e662:	4817      	ldr	r0, [pc, #92]	; (3e6c0 <k_poll_event_init+0x94>)
   3e664:	f001 ffcd 	bl	40602 <printk>
   3e668:	212b      	movs	r1, #43	; 0x2b
   3e66a:	4811      	ldr	r0, [pc, #68]	; (3e6b0 <k_poll_event_init+0x84>)
   3e66c:	f002 f88c 	bl	40788 <assert_post_action>
	__ASSERT(obj != NULL, "must provide an object\n");
   3e670:	b965      	cbnz	r5, 3e68c <k_poll_event_init+0x60>
   3e672:	4914      	ldr	r1, [pc, #80]	; (3e6c4 <k_poll_event_init+0x98>)
   3e674:	232c      	movs	r3, #44	; 0x2c
   3e676:	4a0e      	ldr	r2, [pc, #56]	; (3e6b0 <k_poll_event_init+0x84>)
   3e678:	480e      	ldr	r0, [pc, #56]	; (3e6b4 <k_poll_event_init+0x88>)
   3e67a:	f001 ffc2 	bl	40602 <printk>
   3e67e:	4812      	ldr	r0, [pc, #72]	; (3e6c8 <k_poll_event_init+0x9c>)
   3e680:	f001 ffbf 	bl	40602 <printk>
   3e684:	212c      	movs	r1, #44	; 0x2c
   3e686:	480a      	ldr	r0, [pc, #40]	; (3e6b0 <k_poll_event_init+0x84>)
   3e688:	f002 f87e 	bl	40788 <assert_post_action>
	event->type = type;
   3e68c:	7b63      	ldrb	r3, [r4, #13]
   3e68e:	f367 0303 	bfi	r3, r7, #0, #4
   3e692:	7363      	strb	r3, [r4, #13]
	event->mode = mode;
   3e694:	7ba3      	ldrb	r3, [r4, #14]
   3e696:	f366 0341 	bfi	r3, r6, #1, #1
   3e69a:	73a3      	strb	r3, [r4, #14]
	event->poller = NULL;
   3e69c:	2300      	movs	r3, #0
	event->state = K_POLL_STATE_NOT_READY;
   3e69e:	68e2      	ldr	r2, [r4, #12]
	event->poller = NULL;
   3e6a0:	60a3      	str	r3, [r4, #8]
	event->state = K_POLL_STATE_NOT_READY;
   3e6a2:	4b0a      	ldr	r3, [pc, #40]	; (3e6cc <k_poll_event_init+0xa0>)
   3e6a4:	4013      	ands	r3, r2
	event->obj = obj;
   3e6a6:	e9c4 3503 	strd	r3, r5, [r4, #12]
}
   3e6aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   3e6ac:	0004d6be 	.word	0x0004d6be
   3e6b0:	0004d765 	.word	0x0004d765
   3e6b4:	0004764f 	.word	0x0004764f
   3e6b8:	0004d6de 	.word	0x0004d6de
   3e6bc:	0004d704 	.word	0x0004d704
   3e6c0:	0004d728 	.word	0x0004d728
   3e6c4:	0004d738 	.word	0x0004d738
   3e6c8:	0004d74b 	.word	0x0004d74b
   3e6cc:	00020fff 	.word	0x00020fff

0003e6d0 <z_impl_k_poll>:

int z_impl_k_poll(struct k_poll_event *events, int num_events, s32_t timeout)
{
	int events_registered;
	k_spinlock_key_t key;
	struct _poller poller = { .is_polling = true,
   3e6d0:	2301      	movs	r3, #1
{
   3e6d2:	b5f0      	push	{r4, r5, r6, r7, lr}
   3e6d4:	b087      	sub	sp, #28
	struct _poller poller = { .is_polling = true,
   3e6d6:	f88d 300c 	strb.w	r3, [sp, #12]
				  .thread     = _current,
   3e6da:	4b70      	ldr	r3, [pc, #448]	; (3e89c <z_impl_k_poll+0x1cc>)
{
   3e6dc:	4604      	mov	r4, r0
	struct _poller poller = { .is_polling = true,
   3e6de:	689b      	ldr	r3, [r3, #8]
{
   3e6e0:	460d      	mov	r5, r1
	struct _poller poller = { .is_polling = true,
   3e6e2:	9304      	str	r3, [sp, #16]
   3e6e4:	4b6e      	ldr	r3, [pc, #440]	; (3e8a0 <z_impl_k_poll+0x1d0>)
{
   3e6e6:	4616      	mov	r6, r2
	struct _poller poller = { .is_polling = true,
   3e6e8:	9305      	str	r3, [sp, #20]
   3e6ea:	f3ef 8305 	mrs	r3, IPSR
				  .cb         = k_poll_poller_cb };

	__ASSERT(!arch_is_in_isr(), "");
   3e6ee:	b163      	cbz	r3, 3e70a <z_impl_k_poll+0x3a>
   3e6f0:	496c      	ldr	r1, [pc, #432]	; (3e8a4 <z_impl_k_poll+0x1d4>)
   3e6f2:	23ff      	movs	r3, #255	; 0xff
   3e6f4:	4a6c      	ldr	r2, [pc, #432]	; (3e8a8 <z_impl_k_poll+0x1d8>)
   3e6f6:	486d      	ldr	r0, [pc, #436]	; (3e8ac <z_impl_k_poll+0x1dc>)
   3e6f8:	f001 ff83 	bl	40602 <printk>
   3e6fc:	486c      	ldr	r0, [pc, #432]	; (3e8b0 <z_impl_k_poll+0x1e0>)
   3e6fe:	f001 ff80 	bl	40602 <printk>
   3e702:	21ff      	movs	r1, #255	; 0xff
   3e704:	4868      	ldr	r0, [pc, #416]	; (3e8a8 <z_impl_k_poll+0x1d8>)
   3e706:	f002 f83f 	bl	40788 <assert_post_action>
	__ASSERT(events != NULL, "NULL events\n");
   3e70a:	b974      	cbnz	r4, 3e72a <z_impl_k_poll+0x5a>
   3e70c:	4969      	ldr	r1, [pc, #420]	; (3e8b4 <z_impl_k_poll+0x1e4>)
   3e70e:	f44f 7380 	mov.w	r3, #256	; 0x100
   3e712:	4a65      	ldr	r2, [pc, #404]	; (3e8a8 <z_impl_k_poll+0x1d8>)
   3e714:	4865      	ldr	r0, [pc, #404]	; (3e8ac <z_impl_k_poll+0x1dc>)
   3e716:	f001 ff74 	bl	40602 <printk>
   3e71a:	4867      	ldr	r0, [pc, #412]	; (3e8b8 <z_impl_k_poll+0x1e8>)
   3e71c:	f001 ff71 	bl	40602 <printk>
   3e720:	f44f 7180 	mov.w	r1, #256	; 0x100
   3e724:	4860      	ldr	r0, [pc, #384]	; (3e8a8 <z_impl_k_poll+0x1d8>)
   3e726:	f002 f82f 	bl	40788 <assert_post_action>
	__ASSERT(num_events >= 0, "<0 events\n");
   3e72a:	2d00      	cmp	r5, #0
   3e72c:	da0e      	bge.n	3e74c <z_impl_k_poll+0x7c>
   3e72e:	4963      	ldr	r1, [pc, #396]	; (3e8bc <z_impl_k_poll+0x1ec>)
   3e730:	f240 1301 	movw	r3, #257	; 0x101
   3e734:	4a5c      	ldr	r2, [pc, #368]	; (3e8a8 <z_impl_k_poll+0x1d8>)
   3e736:	485d      	ldr	r0, [pc, #372]	; (3e8ac <z_impl_k_poll+0x1dc>)
   3e738:	f001 ff63 	bl	40602 <printk>
   3e73c:	4860      	ldr	r0, [pc, #384]	; (3e8c0 <z_impl_k_poll+0x1f0>)
   3e73e:	f001 ff60 	bl	40602 <printk>
   3e742:	f240 1101 	movw	r1, #257	; 0x101
   3e746:	4858      	ldr	r0, [pc, #352]	; (3e8a8 <z_impl_k_poll+0x1d8>)
   3e748:	f002 f81e 	bl	40788 <assert_post_action>

	events_registered = register_events(events, num_events, &poller,
   3e74c:	fab6 f386 	clz	r3, r6
   3e750:	aa03      	add	r2, sp, #12
   3e752:	095b      	lsrs	r3, r3, #5
   3e754:	4629      	mov	r1, r5
   3e756:	4620      	mov	r0, r4
   3e758:	f7ff fe6c 	bl	3e434 <register_events>
   3e75c:	4607      	mov	r7, r0
	__asm__ volatile(
   3e75e:	f04f 0320 	mov.w	r3, #32
   3e762:	f3ef 8511 	mrs	r5, BASEPRI
   3e766:	f383 8811 	msr	BASEPRI, r3
   3e76a:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   3e76e:	4855      	ldr	r0, [pc, #340]	; (3e8c4 <z_impl_k_poll+0x1f4>)
   3e770:	f7fe ff86 	bl	3d680 <z_spin_lock_valid>
   3e774:	b968      	cbnz	r0, 3e792 <z_impl_k_poll+0xc2>
   3e776:	234a      	movs	r3, #74	; 0x4a
   3e778:	4a53      	ldr	r2, [pc, #332]	; (3e8c8 <z_impl_k_poll+0x1f8>)
   3e77a:	4954      	ldr	r1, [pc, #336]	; (3e8cc <z_impl_k_poll+0x1fc>)
   3e77c:	484b      	ldr	r0, [pc, #300]	; (3e8ac <z_impl_k_poll+0x1dc>)
   3e77e:	f001 ff40 	bl	40602 <printk>
   3e782:	4950      	ldr	r1, [pc, #320]	; (3e8c4 <z_impl_k_poll+0x1f4>)
   3e784:	4852      	ldr	r0, [pc, #328]	; (3e8d0 <z_impl_k_poll+0x200>)
   3e786:	f001 ff3c 	bl	40602 <printk>
   3e78a:	214a      	movs	r1, #74	; 0x4a
   3e78c:	484e      	ldr	r0, [pc, #312]	; (3e8c8 <z_impl_k_poll+0x1f8>)
   3e78e:	f001 fffb 	bl	40788 <assert_post_action>
	z_spin_lock_set_owner(l);
   3e792:	484c      	ldr	r0, [pc, #304]	; (3e8c4 <z_impl_k_poll+0x1f4>)
   3e794:	f7fe ff92 	bl	3d6bc <z_spin_lock_set_owner>
	/*
	 * If we're not polling anymore, it means that at least one event
	 * condition is met, either when looping through the events here or
	 * because one of the events registered has had its state changed.
	 */
	if (!poller.is_polling) {
   3e798:	f89d 300c 	ldrb.w	r3, [sp, #12]
   3e79c:	b9f3      	cbnz	r3, 3e7dc <z_impl_k_poll+0x10c>
		clear_event_registrations(events, events_registered, key);
   3e79e:	4620      	mov	r0, r4
   3e7a0:	462a      	mov	r2, r5
   3e7a2:	4639      	mov	r1, r7
   3e7a4:	f7ff fd8e 	bl	3e2c4 <clear_event_registrations>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   3e7a8:	4846      	ldr	r0, [pc, #280]	; (3e8c4 <z_impl_k_poll+0x1f4>)
   3e7aa:	f7fe ff77 	bl	3d69c <z_spin_unlock_valid>
   3e7ae:	b968      	cbnz	r0, 3e7cc <z_impl_k_poll+0xfc>
   3e7b0:	235d      	movs	r3, #93	; 0x5d
   3e7b2:	4a45      	ldr	r2, [pc, #276]	; (3e8c8 <z_impl_k_poll+0x1f8>)
   3e7b4:	4947      	ldr	r1, [pc, #284]	; (3e8d4 <z_impl_k_poll+0x204>)
   3e7b6:	483d      	ldr	r0, [pc, #244]	; (3e8ac <z_impl_k_poll+0x1dc>)
   3e7b8:	f001 ff23 	bl	40602 <printk>
   3e7bc:	4941      	ldr	r1, [pc, #260]	; (3e8c4 <z_impl_k_poll+0x1f4>)
   3e7be:	4846      	ldr	r0, [pc, #280]	; (3e8d8 <z_impl_k_poll+0x208>)
   3e7c0:	f001 ff1f 	bl	40602 <printk>
   3e7c4:	215d      	movs	r1, #93	; 0x5d
   3e7c6:	4840      	ldr	r0, [pc, #256]	; (3e8c8 <z_impl_k_poll+0x1f8>)
   3e7c8:	f001 ffde 	bl	40788 <assert_post_action>
	__asm__ volatile(
   3e7cc:	f385 8811 	msr	BASEPRI, r5
   3e7d0:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		return 0;
   3e7d4:	2500      	movs	r5, #0
	key = k_spin_lock(&lock);
	clear_event_registrations(events, events_registered, key);
	k_spin_unlock(&lock, key);

	return swap_rc;
}
   3e7d6:	4628      	mov	r0, r5
   3e7d8:	b007      	add	sp, #28
   3e7da:	bdf0      	pop	{r4, r5, r6, r7, pc}
	poller.is_polling = false;
   3e7dc:	2300      	movs	r3, #0
   3e7de:	f88d 300c 	strb.w	r3, [sp, #12]
	if (timeout == K_NO_WAIT) {
   3e7e2:	b9c6      	cbnz	r6, 3e816 <z_impl_k_poll+0x146>
   3e7e4:	4837      	ldr	r0, [pc, #220]	; (3e8c4 <z_impl_k_poll+0x1f4>)
   3e7e6:	f7fe ff59 	bl	3d69c <z_spin_unlock_valid>
   3e7ea:	b968      	cbnz	r0, 3e808 <z_impl_k_poll+0x138>
   3e7ec:	235d      	movs	r3, #93	; 0x5d
   3e7ee:	4a36      	ldr	r2, [pc, #216]	; (3e8c8 <z_impl_k_poll+0x1f8>)
   3e7f0:	4938      	ldr	r1, [pc, #224]	; (3e8d4 <z_impl_k_poll+0x204>)
   3e7f2:	482e      	ldr	r0, [pc, #184]	; (3e8ac <z_impl_k_poll+0x1dc>)
   3e7f4:	f001 ff05 	bl	40602 <printk>
   3e7f8:	4932      	ldr	r1, [pc, #200]	; (3e8c4 <z_impl_k_poll+0x1f4>)
   3e7fa:	4837      	ldr	r0, [pc, #220]	; (3e8d8 <z_impl_k_poll+0x208>)
   3e7fc:	f001 ff01 	bl	40602 <printk>
   3e800:	215d      	movs	r1, #93	; 0x5d
   3e802:	4831      	ldr	r0, [pc, #196]	; (3e8c8 <z_impl_k_poll+0x1f8>)
   3e804:	f001 ffc0 	bl	40788 <assert_post_action>
   3e808:	f385 8811 	msr	BASEPRI, r5
   3e80c:	f3bf 8f6f 	isb	sy
		return -EAGAIN;
   3e810:	f06f 050a 	mvn.w	r5, #10
   3e814:	e7df      	b.n	3e7d6 <z_impl_k_poll+0x106>
	_wait_q_t wait_q = Z_WAIT_Q_INIT(&wait_q);
   3e816:	aa01      	add	r2, sp, #4
	int swap_rc = z_pend_curr(&lock, key, &wait_q, timeout);
   3e818:	4629      	mov	r1, r5
   3e81a:	4633      	mov	r3, r6
   3e81c:	4829      	ldr	r0, [pc, #164]	; (3e8c4 <z_impl_k_poll+0x1f4>)
	_wait_q_t wait_q = Z_WAIT_Q_INIT(&wait_q);
   3e81e:	e9cd 2201 	strd	r2, r2, [sp, #4]
	int swap_rc = z_pend_curr(&lock, key, &wait_q, timeout);
   3e822:	f7fe fb53 	bl	3cecc <z_pend_curr>
   3e826:	4605      	mov	r5, r0
	__asm__ volatile(
   3e828:	f04f 0320 	mov.w	r3, #32
   3e82c:	f3ef 8611 	mrs	r6, BASEPRI
   3e830:	f383 8811 	msr	BASEPRI, r3
   3e834:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   3e838:	4822      	ldr	r0, [pc, #136]	; (3e8c4 <z_impl_k_poll+0x1f4>)
   3e83a:	f7fe ff21 	bl	3d680 <z_spin_lock_valid>
   3e83e:	b968      	cbnz	r0, 3e85c <z_impl_k_poll+0x18c>
   3e840:	234a      	movs	r3, #74	; 0x4a
   3e842:	4a21      	ldr	r2, [pc, #132]	; (3e8c8 <z_impl_k_poll+0x1f8>)
   3e844:	4921      	ldr	r1, [pc, #132]	; (3e8cc <z_impl_k_poll+0x1fc>)
   3e846:	4819      	ldr	r0, [pc, #100]	; (3e8ac <z_impl_k_poll+0x1dc>)
   3e848:	f001 fedb 	bl	40602 <printk>
   3e84c:	491d      	ldr	r1, [pc, #116]	; (3e8c4 <z_impl_k_poll+0x1f4>)
   3e84e:	4820      	ldr	r0, [pc, #128]	; (3e8d0 <z_impl_k_poll+0x200>)
   3e850:	f001 fed7 	bl	40602 <printk>
   3e854:	214a      	movs	r1, #74	; 0x4a
   3e856:	481c      	ldr	r0, [pc, #112]	; (3e8c8 <z_impl_k_poll+0x1f8>)
   3e858:	f001 ff96 	bl	40788 <assert_post_action>
	z_spin_lock_set_owner(l);
   3e85c:	4819      	ldr	r0, [pc, #100]	; (3e8c4 <z_impl_k_poll+0x1f4>)
   3e85e:	f7fe ff2d 	bl	3d6bc <z_spin_lock_set_owner>
	clear_event_registrations(events, events_registered, key);
   3e862:	4620      	mov	r0, r4
   3e864:	4632      	mov	r2, r6
   3e866:	4639      	mov	r1, r7
   3e868:	f7ff fd2c 	bl	3e2c4 <clear_event_registrations>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   3e86c:	4815      	ldr	r0, [pc, #84]	; (3e8c4 <z_impl_k_poll+0x1f4>)
   3e86e:	f7fe ff15 	bl	3d69c <z_spin_unlock_valid>
   3e872:	b968      	cbnz	r0, 3e890 <z_impl_k_poll+0x1c0>
   3e874:	235d      	movs	r3, #93	; 0x5d
   3e876:	4a14      	ldr	r2, [pc, #80]	; (3e8c8 <z_impl_k_poll+0x1f8>)
   3e878:	4916      	ldr	r1, [pc, #88]	; (3e8d4 <z_impl_k_poll+0x204>)
   3e87a:	480c      	ldr	r0, [pc, #48]	; (3e8ac <z_impl_k_poll+0x1dc>)
   3e87c:	f001 fec1 	bl	40602 <printk>
   3e880:	4910      	ldr	r1, [pc, #64]	; (3e8c4 <z_impl_k_poll+0x1f4>)
   3e882:	4815      	ldr	r0, [pc, #84]	; (3e8d8 <z_impl_k_poll+0x208>)
   3e884:	f001 febd 	bl	40602 <printk>
   3e888:	215d      	movs	r1, #93	; 0x5d
   3e88a:	480f      	ldr	r0, [pc, #60]	; (3e8c8 <z_impl_k_poll+0x1f8>)
   3e88c:	f001 ff7c 	bl	40788 <assert_post_action>
	__asm__ volatile(
   3e890:	f386 8811 	msr	BASEPRI, r6
   3e894:	f3bf 8f6f 	isb	sy
	return swap_rc;
   3e898:	e79d      	b.n	3e7d6 <z_impl_k_poll+0x106>
   3e89a:	bf00      	nop
   3e89c:	2002970c 	.word	0x2002970c
   3e8a0:	0003e255 	.word	0x0003e255
   3e8a4:	0004d33b 	.word	0x0004d33b
   3e8a8:	0004d765 	.word	0x0004d765
   3e8ac:	0004764f 	.word	0x0004764f
   3e8b0:	0004a297 	.word	0x0004a297
   3e8b4:	0004d7d8 	.word	0x0004d7d8
   3e8b8:	0004d7ee 	.word	0x0004d7ee
   3e8bc:	0004d7fd 	.word	0x0004d7fd
   3e8c0:	0004d80d 	.word	0x0004d80d
   3e8c4:	20029828 	.word	0x20029828
   3e8c8:	000498fb 	.word	0x000498fb
   3e8cc:	00049921 	.word	0x00049921
   3e8d0:	00049936 	.word	0x00049936
   3e8d4:	0004994e 	.word	0x0004994e
   3e8d8:	00049965 	.word	0x00049965

0003e8dc <z_impl_k_poll_signal_raise>:
}
#include <syscalls/k_poll_signal_check_mrsh.c>
#endif

int z_impl_k_poll_signal_raise(struct k_poll_signal *signal, int result)
{
   3e8dc:	b570      	push	{r4, r5, r6, lr}
   3e8de:	4604      	mov	r4, r0
   3e8e0:	460e      	mov	r6, r1
	__asm__ volatile(
   3e8e2:	f04f 0320 	mov.w	r3, #32
   3e8e6:	f3ef 8511 	mrs	r5, BASEPRI
   3e8ea:	f383 8811 	msr	BASEPRI, r3
   3e8ee:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   3e8f2:	4821      	ldr	r0, [pc, #132]	; (3e978 <z_impl_k_poll_signal_raise+0x9c>)
   3e8f4:	f7fe fec4 	bl	3d680 <z_spin_lock_valid>
   3e8f8:	b968      	cbnz	r0, 3e916 <z_impl_k_poll_signal_raise+0x3a>
   3e8fa:	234a      	movs	r3, #74	; 0x4a
   3e8fc:	4a1f      	ldr	r2, [pc, #124]	; (3e97c <z_impl_k_poll_signal_raise+0xa0>)
   3e8fe:	4920      	ldr	r1, [pc, #128]	; (3e980 <z_impl_k_poll_signal_raise+0xa4>)
   3e900:	4820      	ldr	r0, [pc, #128]	; (3e984 <z_impl_k_poll_signal_raise+0xa8>)
   3e902:	f001 fe7e 	bl	40602 <printk>
   3e906:	491c      	ldr	r1, [pc, #112]	; (3e978 <z_impl_k_poll_signal_raise+0x9c>)
   3e908:	481f      	ldr	r0, [pc, #124]	; (3e988 <z_impl_k_poll_signal_raise+0xac>)
   3e90a:	f001 fe7a 	bl	40602 <printk>
   3e90e:	214a      	movs	r1, #74	; 0x4a
   3e910:	481a      	ldr	r0, [pc, #104]	; (3e97c <z_impl_k_poll_signal_raise+0xa0>)
   3e912:	f001 ff39 	bl	40788 <assert_post_action>
	z_spin_lock_set_owner(l);
   3e916:	4818      	ldr	r0, [pc, #96]	; (3e978 <z_impl_k_poll_signal_raise+0x9c>)
   3e918:	f7fe fed0 	bl	3d6bc <z_spin_lock_set_owner>
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_poll_event *poll_event;

	signal->result = result;
	signal->signaled = 1U;
   3e91c:	2101      	movs	r1, #1
	return list->head == list;
   3e91e:	6820      	ldr	r0, [r4, #0]
	signal->result = result;
   3e920:	60e6      	str	r6, [r4, #12]

static inline sys_dnode_t *sys_dlist_get(sys_dlist_t *list)
{
	sys_dnode_t *node = NULL;

	if (!sys_dlist_is_empty(list)) {
   3e922:	4284      	cmp	r4, r0
	signal->signaled = 1U;
   3e924:	60a1      	str	r1, [r4, #8]
   3e926:	d117      	bne.n	3e958 <z_impl_k_poll_signal_raise+0x7c>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   3e928:	4813      	ldr	r0, [pc, #76]	; (3e978 <z_impl_k_poll_signal_raise+0x9c>)
   3e92a:	f7fe feb7 	bl	3d69c <z_spin_unlock_valid>
   3e92e:	b968      	cbnz	r0, 3e94c <z_impl_k_poll_signal_raise+0x70>
   3e930:	235d      	movs	r3, #93	; 0x5d
   3e932:	4a12      	ldr	r2, [pc, #72]	; (3e97c <z_impl_k_poll_signal_raise+0xa0>)
   3e934:	4915      	ldr	r1, [pc, #84]	; (3e98c <z_impl_k_poll_signal_raise+0xb0>)
   3e936:	4813      	ldr	r0, [pc, #76]	; (3e984 <z_impl_k_poll_signal_raise+0xa8>)
   3e938:	f001 fe63 	bl	40602 <printk>
   3e93c:	490e      	ldr	r1, [pc, #56]	; (3e978 <z_impl_k_poll_signal_raise+0x9c>)
   3e93e:	4814      	ldr	r0, [pc, #80]	; (3e990 <z_impl_k_poll_signal_raise+0xb4>)
   3e940:	f001 fe5f 	bl	40602 <printk>
   3e944:	215d      	movs	r1, #93	; 0x5d
   3e946:	480d      	ldr	r0, [pc, #52]	; (3e97c <z_impl_k_poll_signal_raise+0xa0>)
   3e948:	f001 ff1e 	bl	40788 <assert_post_action>
	__asm__ volatile(
   3e94c:	f385 8811 	msr	BASEPRI, r5
   3e950:	f3bf 8f6f 	isb	sy

	poll_event = (struct k_poll_event *)sys_dlist_get(&signal->poll_events);
	if (poll_event == NULL) {
		k_spin_unlock(&lock, key);
		return 0;
   3e954:	2400      	movs	r4, #0
   3e956:	e00d      	b.n	3e974 <z_impl_k_poll_signal_raise+0x98>
	node->prev->next = node->next;
   3e958:	e9d0 3200 	ldrd	r3, r2, [r0]
   3e95c:	6013      	str	r3, [r2, #0]
	node->next->prev = node->prev;
   3e95e:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   3e960:	2300      	movs	r3, #0
	node->prev = NULL;
   3e962:	e9c0 3300 	strd	r3, r3, [r0]
	}

	int rc = signal_poll_event(poll_event, K_POLL_STATE_SIGNALED);
   3e966:	f006 f9ed 	bl	44d44 <signal_poll_event>

	z_reschedule(&lock, key);
   3e96a:	4629      	mov	r1, r5
	int rc = signal_poll_event(poll_event, K_POLL_STATE_SIGNALED);
   3e96c:	4604      	mov	r4, r0
	z_reschedule(&lock, key);
   3e96e:	4802      	ldr	r0, [pc, #8]	; (3e978 <z_impl_k_poll_signal_raise+0x9c>)
   3e970:	f7fd fd08 	bl	3c384 <z_reschedule>
	return rc;
}
   3e974:	4620      	mov	r0, r4
   3e976:	bd70      	pop	{r4, r5, r6, pc}
   3e978:	20029828 	.word	0x20029828
   3e97c:	000498fb 	.word	0x000498fb
   3e980:	00049921 	.word	0x00049921
   3e984:	0004764f 	.word	0x0004764f
   3e988:	00049936 	.word	0x00049936
   3e98c:	0004994e 	.word	0x0004994e
   3e990:	00049965 	.word	0x00049965

0003e994 <fabs>:
   3e994:	ec51 0b10 	vmov	r0, r1, d0
   3e998:	ee10 2a10 	vmov	r2, s0
   3e99c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
   3e9a0:	ec43 2b10 	vmov	d0, r2, r3
   3e9a4:	4770      	bx	lr
   3e9a6:	bf00      	nop

0003e9a8 <__assert_func>:
   3e9a8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   3e9aa:	461c      	mov	r4, r3
   3e9ac:	4b09      	ldr	r3, [pc, #36]	; (3e9d4 <__assert_func+0x2c>)
   3e9ae:	4605      	mov	r5, r0
   3e9b0:	681b      	ldr	r3, [r3, #0]
   3e9b2:	68d8      	ldr	r0, [r3, #12]
   3e9b4:	b152      	cbz	r2, 3e9cc <__assert_func+0x24>
   3e9b6:	4b08      	ldr	r3, [pc, #32]	; (3e9d8 <__assert_func+0x30>)
   3e9b8:	9100      	str	r1, [sp, #0]
   3e9ba:	4908      	ldr	r1, [pc, #32]	; (3e9dc <__assert_func+0x34>)
   3e9bc:	e9cd 3201 	strd	r3, r2, [sp, #4]
   3e9c0:	462b      	mov	r3, r5
   3e9c2:	4622      	mov	r2, r4
   3e9c4:	f000 f80e 	bl	3e9e4 <fiprintf>
   3e9c8:	f006 fc1a 	bl	45200 <abort>
   3e9cc:	4b04      	ldr	r3, [pc, #16]	; (3e9e0 <__assert_func+0x38>)
   3e9ce:	461a      	mov	r2, r3
   3e9d0:	e7f2      	b.n	3e9b8 <__assert_func+0x10>
   3e9d2:	bf00      	nop
   3e9d4:	200324dc 	.word	0x200324dc
   3e9d8:	0004d81a 	.word	0x0004d81a
   3e9dc:	0004d827 	.word	0x0004d827
   3e9e0:	0004a299 	.word	0x0004a299

0003e9e4 <fiprintf>:
   3e9e4:	b40e      	push	{r1, r2, r3}
   3e9e6:	b503      	push	{r0, r1, lr}
   3e9e8:	ab03      	add	r3, sp, #12
   3e9ea:	4601      	mov	r1, r0
   3e9ec:	4805      	ldr	r0, [pc, #20]	; (3ea04 <fiprintf+0x20>)
   3e9ee:	f853 2b04 	ldr.w	r2, [r3], #4
   3e9f2:	6800      	ldr	r0, [r0, #0]
   3e9f4:	9301      	str	r3, [sp, #4]
   3e9f6:	f000 f807 	bl	3ea08 <_vfiprintf_r>
   3e9fa:	b002      	add	sp, #8
   3e9fc:	f85d eb04 	ldr.w	lr, [sp], #4
   3ea00:	b003      	add	sp, #12
   3ea02:	4770      	bx	lr
   3ea04:	200324dc 	.word	0x200324dc

0003ea08 <_vfiprintf_r>:
   3ea08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   3ea0c:	460d      	mov	r5, r1
   3ea0e:	b09d      	sub	sp, #116	; 0x74
   3ea10:	4614      	mov	r4, r2
   3ea12:	461e      	mov	r6, r3
   3ea14:	4607      	mov	r7, r0
   3ea16:	b118      	cbz	r0, 3ea20 <_vfiprintf_r+0x18>
   3ea18:	6983      	ldr	r3, [r0, #24]
   3ea1a:	b90b      	cbnz	r3, 3ea20 <_vfiprintf_r+0x18>
   3ea1c:	f000 ffcc 	bl	3f9b8 <__sinit>
   3ea20:	4b85      	ldr	r3, [pc, #532]	; (3ec38 <_vfiprintf_r+0x230>)
   3ea22:	429d      	cmp	r5, r3
   3ea24:	d11b      	bne.n	3ea5e <_vfiprintf_r+0x56>
   3ea26:	687d      	ldr	r5, [r7, #4]
   3ea28:	6e6b      	ldr	r3, [r5, #100]	; 0x64
   3ea2a:	07d9      	lsls	r1, r3, #31
   3ea2c:	d405      	bmi.n	3ea3a <_vfiprintf_r+0x32>
   3ea2e:	89ab      	ldrh	r3, [r5, #12]
   3ea30:	059a      	lsls	r2, r3, #22
   3ea32:	d402      	bmi.n	3ea3a <_vfiprintf_r+0x32>
   3ea34:	6da8      	ldr	r0, [r5, #88]	; 0x58
   3ea36:	f006 fcad 	bl	45394 <__retarget_lock_acquire_recursive>
   3ea3a:	89ab      	ldrh	r3, [r5, #12]
   3ea3c:	071b      	lsls	r3, r3, #28
   3ea3e:	d501      	bpl.n	3ea44 <_vfiprintf_r+0x3c>
   3ea40:	692b      	ldr	r3, [r5, #16]
   3ea42:	b9eb      	cbnz	r3, 3ea80 <_vfiprintf_r+0x78>
   3ea44:	4629      	mov	r1, r5
   3ea46:	4638      	mov	r0, r7
   3ea48:	f000 fe22 	bl	3f690 <__swsetup_r>
   3ea4c:	b1c0      	cbz	r0, 3ea80 <_vfiprintf_r+0x78>
   3ea4e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
   3ea50:	07d8      	lsls	r0, r3, #31
   3ea52:	d50e      	bpl.n	3ea72 <_vfiprintf_r+0x6a>
   3ea54:	f04f 30ff 	mov.w	r0, #4294967295
   3ea58:	b01d      	add	sp, #116	; 0x74
   3ea5a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3ea5e:	4b77      	ldr	r3, [pc, #476]	; (3ec3c <_vfiprintf_r+0x234>)
   3ea60:	429d      	cmp	r5, r3
   3ea62:	d101      	bne.n	3ea68 <_vfiprintf_r+0x60>
   3ea64:	68bd      	ldr	r5, [r7, #8]
   3ea66:	e7df      	b.n	3ea28 <_vfiprintf_r+0x20>
   3ea68:	4b75      	ldr	r3, [pc, #468]	; (3ec40 <_vfiprintf_r+0x238>)
   3ea6a:	429d      	cmp	r5, r3
   3ea6c:	bf08      	it	eq
   3ea6e:	68fd      	ldreq	r5, [r7, #12]
   3ea70:	e7da      	b.n	3ea28 <_vfiprintf_r+0x20>
   3ea72:	89ab      	ldrh	r3, [r5, #12]
   3ea74:	0599      	lsls	r1, r3, #22
   3ea76:	d4ed      	bmi.n	3ea54 <_vfiprintf_r+0x4c>
   3ea78:	6da8      	ldr	r0, [r5, #88]	; 0x58
   3ea7a:	f006 fc8c 	bl	45396 <__retarget_lock_release_recursive>
   3ea7e:	e7e9      	b.n	3ea54 <_vfiprintf_r+0x4c>
   3ea80:	2300      	movs	r3, #0
   3ea82:	f8df 91c0 	ldr.w	r9, [pc, #448]	; 3ec44 <_vfiprintf_r+0x23c>
   3ea86:	f04f 0a01 	mov.w	sl, #1
   3ea8a:	9603      	str	r6, [sp, #12]
   3ea8c:	9309      	str	r3, [sp, #36]	; 0x24
   3ea8e:	2320      	movs	r3, #32
   3ea90:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
   3ea94:	2330      	movs	r3, #48	; 0x30
   3ea96:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
   3ea9a:	4623      	mov	r3, r4
   3ea9c:	461e      	mov	r6, r3
   3ea9e:	f813 2b01 	ldrb.w	r2, [r3], #1
   3eaa2:	b10a      	cbz	r2, 3eaa8 <_vfiprintf_r+0xa0>
   3eaa4:	2a25      	cmp	r2, #37	; 0x25
   3eaa6:	d1f9      	bne.n	3ea9c <_vfiprintf_r+0x94>
   3eaa8:	ebb6 0b04 	subs.w	fp, r6, r4
   3eaac:	d00b      	beq.n	3eac6 <_vfiprintf_r+0xbe>
   3eaae:	465b      	mov	r3, fp
   3eab0:	4622      	mov	r2, r4
   3eab2:	4629      	mov	r1, r5
   3eab4:	4638      	mov	r0, r7
   3eab6:	f006 fa24 	bl	44f02 <__sfputs_r>
   3eaba:	3001      	adds	r0, #1
   3eabc:	f000 80a3 	beq.w	3ec06 <_vfiprintf_r+0x1fe>
   3eac0:	9b09      	ldr	r3, [sp, #36]	; 0x24
   3eac2:	445b      	add	r3, fp
   3eac4:	9309      	str	r3, [sp, #36]	; 0x24
   3eac6:	7833      	ldrb	r3, [r6, #0]
   3eac8:	2b00      	cmp	r3, #0
   3eaca:	f000 809c 	beq.w	3ec06 <_vfiprintf_r+0x1fe>
   3eace:	2300      	movs	r3, #0
   3ead0:	f04f 32ff 	mov.w	r2, #4294967295
   3ead4:	3601      	adds	r6, #1
   3ead6:	9304      	str	r3, [sp, #16]
   3ead8:	9307      	str	r3, [sp, #28]
   3eada:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
   3eade:	931a      	str	r3, [sp, #104]	; 0x68
   3eae0:	e9cd 2305 	strd	r2, r3, [sp, #20]
   3eae4:	4634      	mov	r4, r6
   3eae6:	2205      	movs	r2, #5
   3eae8:	4856      	ldr	r0, [pc, #344]	; (3ec44 <_vfiprintf_r+0x23c>)
   3eaea:	f814 1b01 	ldrb.w	r1, [r4], #1
   3eaee:	f006 f993 	bl	44e18 <memchr>
   3eaf2:	9b04      	ldr	r3, [sp, #16]
   3eaf4:	b9c0      	cbnz	r0, 3eb28 <_vfiprintf_r+0x120>
   3eaf6:	06da      	lsls	r2, r3, #27
   3eaf8:	bf44      	itt	mi
   3eafa:	2220      	movmi	r2, #32
   3eafc:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
   3eb00:	0718      	lsls	r0, r3, #28
   3eb02:	bf44      	itt	mi
   3eb04:	222b      	movmi	r2, #43	; 0x2b
   3eb06:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
   3eb0a:	7832      	ldrb	r2, [r6, #0]
   3eb0c:	2a2a      	cmp	r2, #42	; 0x2a
   3eb0e:	d013      	beq.n	3eb38 <_vfiprintf_r+0x130>
   3eb10:	4634      	mov	r4, r6
   3eb12:	9a07      	ldr	r2, [sp, #28]
   3eb14:	2000      	movs	r0, #0
   3eb16:	260a      	movs	r6, #10
   3eb18:	4621      	mov	r1, r4
   3eb1a:	f811 3b01 	ldrb.w	r3, [r1], #1
   3eb1e:	3b30      	subs	r3, #48	; 0x30
   3eb20:	2b09      	cmp	r3, #9
   3eb22:	d94b      	bls.n	3ebbc <_vfiprintf_r+0x1b4>
   3eb24:	b970      	cbnz	r0, 3eb44 <_vfiprintf_r+0x13c>
   3eb26:	e014      	b.n	3eb52 <_vfiprintf_r+0x14a>
   3eb28:	eba0 0009 	sub.w	r0, r0, r9
   3eb2c:	4626      	mov	r6, r4
   3eb2e:	fa0a f000 	lsl.w	r0, sl, r0
   3eb32:	4318      	orrs	r0, r3
   3eb34:	9004      	str	r0, [sp, #16]
   3eb36:	e7d5      	b.n	3eae4 <_vfiprintf_r+0xdc>
   3eb38:	9a03      	ldr	r2, [sp, #12]
   3eb3a:	1d11      	adds	r1, r2, #4
   3eb3c:	6812      	ldr	r2, [r2, #0]
   3eb3e:	2a00      	cmp	r2, #0
   3eb40:	9103      	str	r1, [sp, #12]
   3eb42:	db01      	blt.n	3eb48 <_vfiprintf_r+0x140>
   3eb44:	9207      	str	r2, [sp, #28]
   3eb46:	e004      	b.n	3eb52 <_vfiprintf_r+0x14a>
   3eb48:	4252      	negs	r2, r2
   3eb4a:	f043 0302 	orr.w	r3, r3, #2
   3eb4e:	9207      	str	r2, [sp, #28]
   3eb50:	9304      	str	r3, [sp, #16]
   3eb52:	7823      	ldrb	r3, [r4, #0]
   3eb54:	2b2e      	cmp	r3, #46	; 0x2e
   3eb56:	d10c      	bne.n	3eb72 <_vfiprintf_r+0x16a>
   3eb58:	7863      	ldrb	r3, [r4, #1]
   3eb5a:	2b2a      	cmp	r3, #42	; 0x2a
   3eb5c:	d133      	bne.n	3ebc6 <_vfiprintf_r+0x1be>
   3eb5e:	9b03      	ldr	r3, [sp, #12]
   3eb60:	3402      	adds	r4, #2
   3eb62:	1d1a      	adds	r2, r3, #4
   3eb64:	681b      	ldr	r3, [r3, #0]
   3eb66:	2b00      	cmp	r3, #0
   3eb68:	9203      	str	r2, [sp, #12]
   3eb6a:	bfb8      	it	lt
   3eb6c:	f04f 33ff 	movlt.w	r3, #4294967295
   3eb70:	9305      	str	r3, [sp, #20]
   3eb72:	4e35      	ldr	r6, [pc, #212]	; (3ec48 <_vfiprintf_r+0x240>)
   3eb74:	2203      	movs	r2, #3
   3eb76:	7821      	ldrb	r1, [r4, #0]
   3eb78:	4630      	mov	r0, r6
   3eb7a:	f006 f94d 	bl	44e18 <memchr>
   3eb7e:	b138      	cbz	r0, 3eb90 <_vfiprintf_r+0x188>
   3eb80:	2340      	movs	r3, #64	; 0x40
   3eb82:	1b80      	subs	r0, r0, r6
   3eb84:	3401      	adds	r4, #1
   3eb86:	fa03 f000 	lsl.w	r0, r3, r0
   3eb8a:	9b04      	ldr	r3, [sp, #16]
   3eb8c:	4303      	orrs	r3, r0
   3eb8e:	9304      	str	r3, [sp, #16]
   3eb90:	f814 1b01 	ldrb.w	r1, [r4], #1
   3eb94:	2206      	movs	r2, #6
   3eb96:	482d      	ldr	r0, [pc, #180]	; (3ec4c <_vfiprintf_r+0x244>)
   3eb98:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
   3eb9c:	f006 f93c 	bl	44e18 <memchr>
   3eba0:	2800      	cmp	r0, #0
   3eba2:	d03f      	beq.n	3ec24 <_vfiprintf_r+0x21c>
   3eba4:	4b2a      	ldr	r3, [pc, #168]	; (3ec50 <_vfiprintf_r+0x248>)
   3eba6:	bb13      	cbnz	r3, 3ebee <_vfiprintf_r+0x1e6>
   3eba8:	9b03      	ldr	r3, [sp, #12]
   3ebaa:	3307      	adds	r3, #7
   3ebac:	f023 0307 	bic.w	r3, r3, #7
   3ebb0:	3308      	adds	r3, #8
   3ebb2:	9303      	str	r3, [sp, #12]
   3ebb4:	9b09      	ldr	r3, [sp, #36]	; 0x24
   3ebb6:	4443      	add	r3, r8
   3ebb8:	9309      	str	r3, [sp, #36]	; 0x24
   3ebba:	e76e      	b.n	3ea9a <_vfiprintf_r+0x92>
   3ebbc:	fb06 3202 	mla	r2, r6, r2, r3
   3ebc0:	2001      	movs	r0, #1
   3ebc2:	460c      	mov	r4, r1
   3ebc4:	e7a8      	b.n	3eb18 <_vfiprintf_r+0x110>
   3ebc6:	2300      	movs	r3, #0
   3ebc8:	3401      	adds	r4, #1
   3ebca:	260a      	movs	r6, #10
   3ebcc:	4619      	mov	r1, r3
   3ebce:	9305      	str	r3, [sp, #20]
   3ebd0:	4620      	mov	r0, r4
   3ebd2:	f810 2b01 	ldrb.w	r2, [r0], #1
   3ebd6:	3a30      	subs	r2, #48	; 0x30
   3ebd8:	2a09      	cmp	r2, #9
   3ebda:	d903      	bls.n	3ebe4 <_vfiprintf_r+0x1dc>
   3ebdc:	2b00      	cmp	r3, #0
   3ebde:	d0c8      	beq.n	3eb72 <_vfiprintf_r+0x16a>
   3ebe0:	9105      	str	r1, [sp, #20]
   3ebe2:	e7c6      	b.n	3eb72 <_vfiprintf_r+0x16a>
   3ebe4:	fb06 2101 	mla	r1, r6, r1, r2
   3ebe8:	2301      	movs	r3, #1
   3ebea:	4604      	mov	r4, r0
   3ebec:	e7f0      	b.n	3ebd0 <_vfiprintf_r+0x1c8>
   3ebee:	ab03      	add	r3, sp, #12
   3ebf0:	462a      	mov	r2, r5
   3ebf2:	a904      	add	r1, sp, #16
   3ebf4:	4638      	mov	r0, r7
   3ebf6:	9300      	str	r3, [sp, #0]
   3ebf8:	4b16      	ldr	r3, [pc, #88]	; (3ec54 <_vfiprintf_r+0x24c>)
   3ebfa:	f000 f82d 	bl	3ec58 <_printf_float>
   3ebfe:	f1b0 3fff 	cmp.w	r0, #4294967295
   3ec02:	4680      	mov	r8, r0
   3ec04:	d1d6      	bne.n	3ebb4 <_vfiprintf_r+0x1ac>
   3ec06:	6e6b      	ldr	r3, [r5, #100]	; 0x64
   3ec08:	07d9      	lsls	r1, r3, #31
   3ec0a:	d405      	bmi.n	3ec18 <_vfiprintf_r+0x210>
   3ec0c:	89ab      	ldrh	r3, [r5, #12]
   3ec0e:	059a      	lsls	r2, r3, #22
   3ec10:	d402      	bmi.n	3ec18 <_vfiprintf_r+0x210>
   3ec12:	6da8      	ldr	r0, [r5, #88]	; 0x58
   3ec14:	f006 fbbf 	bl	45396 <__retarget_lock_release_recursive>
   3ec18:	89ab      	ldrh	r3, [r5, #12]
   3ec1a:	065b      	lsls	r3, r3, #25
   3ec1c:	f53f af1a 	bmi.w	3ea54 <_vfiprintf_r+0x4c>
   3ec20:	9809      	ldr	r0, [sp, #36]	; 0x24
   3ec22:	e719      	b.n	3ea58 <_vfiprintf_r+0x50>
   3ec24:	ab03      	add	r3, sp, #12
   3ec26:	462a      	mov	r2, r5
   3ec28:	a904      	add	r1, sp, #16
   3ec2a:	4638      	mov	r0, r7
   3ec2c:	9300      	str	r3, [sp, #0]
   3ec2e:	4b09      	ldr	r3, [pc, #36]	; (3ec54 <_vfiprintf_r+0x24c>)
   3ec30:	f000 fa3c 	bl	3f0ac <_printf_i>
   3ec34:	e7e3      	b.n	3ebfe <_vfiprintf_r+0x1f6>
   3ec36:	bf00      	nop
   3ec38:	000474a0 	.word	0x000474a0
   3ec3c:	000474c0 	.word	0x000474c0
   3ec40:	00047480 	.word	0x00047480
   3ec44:	0004d957 	.word	0x0004d957
   3ec48:	0004d95d 	.word	0x0004d95d
   3ec4c:	0004d961 	.word	0x0004d961
   3ec50:	0003ec59 	.word	0x0003ec59
   3ec54:	00044f03 	.word	0x00044f03

0003ec58 <_printf_float>:
   3ec58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   3ec5c:	b08d      	sub	sp, #52	; 0x34
   3ec5e:	460c      	mov	r4, r1
   3ec60:	4616      	mov	r6, r2
   3ec62:	461f      	mov	r7, r3
   3ec64:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
   3ec68:	4605      	mov	r5, r0
   3ec6a:	f000 ff23 	bl	3fab4 <_localeconv_r>
   3ec6e:	6803      	ldr	r3, [r0, #0]
   3ec70:	4618      	mov	r0, r3
   3ec72:	9306      	str	r3, [sp, #24]
   3ec74:	f7de fa50 	bl	1d118 <strlen>
   3ec78:	2300      	movs	r3, #0
   3ec7a:	9007      	str	r0, [sp, #28]
   3ec7c:	930a      	str	r3, [sp, #40]	; 0x28
   3ec7e:	f8d8 3000 	ldr.w	r3, [r8]
   3ec82:	f894 a018 	ldrb.w	sl, [r4, #24]
   3ec86:	3307      	adds	r3, #7
   3ec88:	f8d4 b000 	ldr.w	fp, [r4]
   3ec8c:	f023 0307 	bic.w	r3, r3, #7
   3ec90:	f103 0208 	add.w	r2, r3, #8
   3ec94:	f8c8 2000 	str.w	r2, [r8]
   3ec98:	e9d3 2300 	ldrd	r2, r3, [r3]
   3ec9c:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
   3eca0:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
   3eca4:	f04f 32ff 	mov.w	r2, #4294967295
   3eca8:	ed8d 7b04 	vstr	d7, [sp, #16]
   3ecac:	e9dd 8304 	ldrd	r8, r3, [sp, #16]
   3ecb0:	f023 4900 	bic.w	r9, r3, #2147483648	; 0x80000000
   3ecb4:	4640      	mov	r0, r8
   3ecb6:	4ba6      	ldr	r3, [pc, #664]	; (3ef50 <_printf_float+0x2f8>)
   3ecb8:	4649      	mov	r1, r9
   3ecba:	f7de fa0d 	bl	1d0d8 <__aeabi_dcmpun>
   3ecbe:	bb70      	cbnz	r0, 3ed1e <_printf_float+0xc6>
   3ecc0:	f04f 32ff 	mov.w	r2, #4294967295
   3ecc4:	4ba2      	ldr	r3, [pc, #648]	; (3ef50 <_printf_float+0x2f8>)
   3ecc6:	4640      	mov	r0, r8
   3ecc8:	4649      	mov	r1, r9
   3ecca:	f7dd fff1 	bl	1ccb0 <__aeabi_dcmple>
   3ecce:	bb30      	cbnz	r0, 3ed1e <_printf_float+0xc6>
   3ecd0:	2200      	movs	r2, #0
   3ecd2:	2300      	movs	r3, #0
   3ecd4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   3ecd8:	f7dd ffe0 	bl	1cc9c <__aeabi_dcmplt>
   3ecdc:	b110      	cbz	r0, 3ece4 <_printf_float+0x8c>
   3ecde:	232d      	movs	r3, #45	; 0x2d
   3ece0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
   3ece4:	4a9b      	ldr	r2, [pc, #620]	; (3ef54 <_printf_float+0x2fc>)
   3ece6:	4b9c      	ldr	r3, [pc, #624]	; (3ef58 <_printf_float+0x300>)
   3ece8:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
   3ecec:	bf94      	ite	ls
   3ecee:	4690      	movls	r8, r2
   3ecf0:	4698      	movhi	r8, r3
   3ecf2:	f04f 0900 	mov.w	r9, #0
   3ecf6:	2303      	movs	r3, #3
   3ecf8:	f02b 0204 	bic.w	r2, fp, #4
   3ecfc:	6123      	str	r3, [r4, #16]
   3ecfe:	6022      	str	r2, [r4, #0]
   3ed00:	9700      	str	r7, [sp, #0]
   3ed02:	4633      	mov	r3, r6
   3ed04:	aa0b      	add	r2, sp, #44	; 0x2c
   3ed06:	4621      	mov	r1, r4
   3ed08:	4628      	mov	r0, r5
   3ed0a:	f006 f99c 	bl	45046 <_printf_common>
   3ed0e:	3001      	adds	r0, #1
   3ed10:	f040 808c 	bne.w	3ee2c <_printf_float+0x1d4>
   3ed14:	f04f 30ff 	mov.w	r0, #4294967295
   3ed18:	b00d      	add	sp, #52	; 0x34
   3ed1a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3ed1e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   3ed22:	4610      	mov	r0, r2
   3ed24:	4619      	mov	r1, r3
   3ed26:	f7de f9d7 	bl	1d0d8 <__aeabi_dcmpun>
   3ed2a:	b140      	cbz	r0, 3ed3e <_printf_float+0xe6>
   3ed2c:	9b05      	ldr	r3, [sp, #20]
   3ed2e:	4a8b      	ldr	r2, [pc, #556]	; (3ef5c <_printf_float+0x304>)
   3ed30:	2b00      	cmp	r3, #0
   3ed32:	bfbc      	itt	lt
   3ed34:	232d      	movlt	r3, #45	; 0x2d
   3ed36:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
   3ed3a:	4b89      	ldr	r3, [pc, #548]	; (3ef60 <_printf_float+0x308>)
   3ed3c:	e7d4      	b.n	3ece8 <_printf_float+0x90>
   3ed3e:	6863      	ldr	r3, [r4, #4]
   3ed40:	f00a 09df 	and.w	r9, sl, #223	; 0xdf
   3ed44:	1c5a      	adds	r2, r3, #1
   3ed46:	d13e      	bne.n	3edc6 <_printf_float+0x16e>
   3ed48:	2306      	movs	r3, #6
   3ed4a:	6063      	str	r3, [r4, #4]
   3ed4c:	2300      	movs	r3, #0
   3ed4e:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
   3ed52:	6861      	ldr	r1, [r4, #4]
   3ed54:	4628      	mov	r0, r5
   3ed56:	9303      	str	r3, [sp, #12]
   3ed58:	ab0a      	add	r3, sp, #40	; 0x28
   3ed5a:	6022      	str	r2, [r4, #0]
   3ed5c:	e9cd a301 	strd	sl, r3, [sp, #4]
   3ed60:	ab09      	add	r3, sp, #36	; 0x24
   3ed62:	ed9d 0b04 	vldr	d0, [sp, #16]
   3ed66:	9300      	str	r3, [sp, #0]
   3ed68:	f10d 0323 	add.w	r3, sp, #35	; 0x23
   3ed6c:	f006 f8db 	bl	44f26 <__cvt>
   3ed70:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
   3ed74:	4680      	mov	r8, r0
   3ed76:	9909      	ldr	r1, [sp, #36]	; 0x24
   3ed78:	d108      	bne.n	3ed8c <_printf_float+0x134>
   3ed7a:	1cc8      	adds	r0, r1, #3
   3ed7c:	db02      	blt.n	3ed84 <_printf_float+0x12c>
   3ed7e:	6863      	ldr	r3, [r4, #4]
   3ed80:	4299      	cmp	r1, r3
   3ed82:	dd41      	ble.n	3ee08 <_printf_float+0x1b0>
   3ed84:	f1aa 0a02 	sub.w	sl, sl, #2
   3ed88:	fa5f fa8a 	uxtb.w	sl, sl
   3ed8c:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
   3ed90:	d820      	bhi.n	3edd4 <_printf_float+0x17c>
   3ed92:	3901      	subs	r1, #1
   3ed94:	4652      	mov	r2, sl
   3ed96:	f104 0050 	add.w	r0, r4, #80	; 0x50
   3ed9a:	9109      	str	r1, [sp, #36]	; 0x24
   3ed9c:	f006 f920 	bl	44fe0 <__exponent>
   3eda0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   3eda2:	4681      	mov	r9, r0
   3eda4:	1813      	adds	r3, r2, r0
   3eda6:	2a01      	cmp	r2, #1
   3eda8:	6123      	str	r3, [r4, #16]
   3edaa:	dc02      	bgt.n	3edb2 <_printf_float+0x15a>
   3edac:	6822      	ldr	r2, [r4, #0]
   3edae:	07d2      	lsls	r2, r2, #31
   3edb0:	d501      	bpl.n	3edb6 <_printf_float+0x15e>
   3edb2:	3301      	adds	r3, #1
   3edb4:	6123      	str	r3, [r4, #16]
   3edb6:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
   3edba:	2b00      	cmp	r3, #0
   3edbc:	d0a0      	beq.n	3ed00 <_printf_float+0xa8>
   3edbe:	232d      	movs	r3, #45	; 0x2d
   3edc0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
   3edc4:	e79c      	b.n	3ed00 <_printf_float+0xa8>
   3edc6:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
   3edca:	d1bf      	bne.n	3ed4c <_printf_float+0xf4>
   3edcc:	2b00      	cmp	r3, #0
   3edce:	d1bd      	bne.n	3ed4c <_printf_float+0xf4>
   3edd0:	2301      	movs	r3, #1
   3edd2:	e7ba      	b.n	3ed4a <_printf_float+0xf2>
   3edd4:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
   3edd8:	d118      	bne.n	3ee0c <_printf_float+0x1b4>
   3edda:	2900      	cmp	r1, #0
   3eddc:	6863      	ldr	r3, [r4, #4]
   3edde:	dd0b      	ble.n	3edf8 <_printf_float+0x1a0>
   3ede0:	6121      	str	r1, [r4, #16]
   3ede2:	b913      	cbnz	r3, 3edea <_printf_float+0x192>
   3ede4:	6822      	ldr	r2, [r4, #0]
   3ede6:	07d0      	lsls	r0, r2, #31
   3ede8:	d502      	bpl.n	3edf0 <_printf_float+0x198>
   3edea:	3301      	adds	r3, #1
   3edec:	440b      	add	r3, r1
   3edee:	6123      	str	r3, [r4, #16]
   3edf0:	65a1      	str	r1, [r4, #88]	; 0x58
   3edf2:	f04f 0900 	mov.w	r9, #0
   3edf6:	e7de      	b.n	3edb6 <_printf_float+0x15e>
   3edf8:	b913      	cbnz	r3, 3ee00 <_printf_float+0x1a8>
   3edfa:	6822      	ldr	r2, [r4, #0]
   3edfc:	07d2      	lsls	r2, r2, #31
   3edfe:	d501      	bpl.n	3ee04 <_printf_float+0x1ac>
   3ee00:	3302      	adds	r3, #2
   3ee02:	e7f4      	b.n	3edee <_printf_float+0x196>
   3ee04:	2301      	movs	r3, #1
   3ee06:	e7f2      	b.n	3edee <_printf_float+0x196>
   3ee08:	f04f 0a67 	mov.w	sl, #103	; 0x67
   3ee0c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   3ee0e:	4299      	cmp	r1, r3
   3ee10:	db05      	blt.n	3ee1e <_printf_float+0x1c6>
   3ee12:	6823      	ldr	r3, [r4, #0]
   3ee14:	6121      	str	r1, [r4, #16]
   3ee16:	07d8      	lsls	r0, r3, #31
   3ee18:	d5ea      	bpl.n	3edf0 <_printf_float+0x198>
   3ee1a:	1c4b      	adds	r3, r1, #1
   3ee1c:	e7e7      	b.n	3edee <_printf_float+0x196>
   3ee1e:	2900      	cmp	r1, #0
   3ee20:	bfd4      	ite	le
   3ee22:	f1c1 0202 	rsble	r2, r1, #2
   3ee26:	2201      	movgt	r2, #1
   3ee28:	4413      	add	r3, r2
   3ee2a:	e7e0      	b.n	3edee <_printf_float+0x196>
   3ee2c:	6823      	ldr	r3, [r4, #0]
   3ee2e:	055a      	lsls	r2, r3, #21
   3ee30:	d407      	bmi.n	3ee42 <_printf_float+0x1ea>
   3ee32:	6923      	ldr	r3, [r4, #16]
   3ee34:	4642      	mov	r2, r8
   3ee36:	4631      	mov	r1, r6
   3ee38:	4628      	mov	r0, r5
   3ee3a:	47b8      	blx	r7
   3ee3c:	3001      	adds	r0, #1
   3ee3e:	d12b      	bne.n	3ee98 <_printf_float+0x240>
   3ee40:	e768      	b.n	3ed14 <_printf_float+0xbc>
   3ee42:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
   3ee46:	f240 80dc 	bls.w	3f002 <_printf_float+0x3aa>
   3ee4a:	2200      	movs	r2, #0
   3ee4c:	2300      	movs	r3, #0
   3ee4e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
   3ee52:	f7dd ff19 	bl	1cc88 <__aeabi_dcmpeq>
   3ee56:	2800      	cmp	r0, #0
   3ee58:	d033      	beq.n	3eec2 <_printf_float+0x26a>
   3ee5a:	2301      	movs	r3, #1
   3ee5c:	4a41      	ldr	r2, [pc, #260]	; (3ef64 <_printf_float+0x30c>)
   3ee5e:	4631      	mov	r1, r6
   3ee60:	4628      	mov	r0, r5
   3ee62:	47b8      	blx	r7
   3ee64:	3001      	adds	r0, #1
   3ee66:	f43f af55 	beq.w	3ed14 <_printf_float+0xbc>
   3ee6a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
   3ee6e:	429a      	cmp	r2, r3
   3ee70:	db02      	blt.n	3ee78 <_printf_float+0x220>
   3ee72:	6823      	ldr	r3, [r4, #0]
   3ee74:	07d8      	lsls	r0, r3, #31
   3ee76:	d50f      	bpl.n	3ee98 <_printf_float+0x240>
   3ee78:	4631      	mov	r1, r6
   3ee7a:	4628      	mov	r0, r5
   3ee7c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
   3ee80:	47b8      	blx	r7
   3ee82:	3001      	adds	r0, #1
   3ee84:	f43f af46 	beq.w	3ed14 <_printf_float+0xbc>
   3ee88:	f04f 0800 	mov.w	r8, #0
   3ee8c:	f104 091a 	add.w	r9, r4, #26
   3ee90:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   3ee92:	3b01      	subs	r3, #1
   3ee94:	4543      	cmp	r3, r8
   3ee96:	dc09      	bgt.n	3eeac <_printf_float+0x254>
   3ee98:	6823      	ldr	r3, [r4, #0]
   3ee9a:	079b      	lsls	r3, r3, #30
   3ee9c:	f100 8101 	bmi.w	3f0a2 <_printf_float+0x44a>
   3eea0:	68e0      	ldr	r0, [r4, #12]
   3eea2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   3eea4:	4298      	cmp	r0, r3
   3eea6:	bfb8      	it	lt
   3eea8:	4618      	movlt	r0, r3
   3eeaa:	e735      	b.n	3ed18 <_printf_float+0xc0>
   3eeac:	2301      	movs	r3, #1
   3eeae:	464a      	mov	r2, r9
   3eeb0:	4631      	mov	r1, r6
   3eeb2:	4628      	mov	r0, r5
   3eeb4:	47b8      	blx	r7
   3eeb6:	3001      	adds	r0, #1
   3eeb8:	f43f af2c 	beq.w	3ed14 <_printf_float+0xbc>
   3eebc:	f108 0801 	add.w	r8, r8, #1
   3eec0:	e7e6      	b.n	3ee90 <_printf_float+0x238>
   3eec2:	9b09      	ldr	r3, [sp, #36]	; 0x24
   3eec4:	2b00      	cmp	r3, #0
   3eec6:	dc2b      	bgt.n	3ef20 <_printf_float+0x2c8>
   3eec8:	2301      	movs	r3, #1
   3eeca:	4a26      	ldr	r2, [pc, #152]	; (3ef64 <_printf_float+0x30c>)
   3eecc:	4631      	mov	r1, r6
   3eece:	4628      	mov	r0, r5
   3eed0:	47b8      	blx	r7
   3eed2:	3001      	adds	r0, #1
   3eed4:	f43f af1e 	beq.w	3ed14 <_printf_float+0xbc>
   3eed8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
   3eedc:	4313      	orrs	r3, r2
   3eede:	d102      	bne.n	3eee6 <_printf_float+0x28e>
   3eee0:	6823      	ldr	r3, [r4, #0]
   3eee2:	07d9      	lsls	r1, r3, #31
   3eee4:	d5d8      	bpl.n	3ee98 <_printf_float+0x240>
   3eee6:	4631      	mov	r1, r6
   3eee8:	4628      	mov	r0, r5
   3eeea:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
   3eeee:	47b8      	blx	r7
   3eef0:	3001      	adds	r0, #1
   3eef2:	f43f af0f 	beq.w	3ed14 <_printf_float+0xbc>
   3eef6:	f04f 0900 	mov.w	r9, #0
   3eefa:	f104 0a1a 	add.w	sl, r4, #26
   3eefe:	9b09      	ldr	r3, [sp, #36]	; 0x24
   3ef00:	425b      	negs	r3, r3
   3ef02:	454b      	cmp	r3, r9
   3ef04:	dc01      	bgt.n	3ef0a <_printf_float+0x2b2>
   3ef06:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   3ef08:	e794      	b.n	3ee34 <_printf_float+0x1dc>
   3ef0a:	2301      	movs	r3, #1
   3ef0c:	4652      	mov	r2, sl
   3ef0e:	4631      	mov	r1, r6
   3ef10:	4628      	mov	r0, r5
   3ef12:	47b8      	blx	r7
   3ef14:	3001      	adds	r0, #1
   3ef16:	f43f aefd 	beq.w	3ed14 <_printf_float+0xbc>
   3ef1a:	f109 0901 	add.w	r9, r9, #1
   3ef1e:	e7ee      	b.n	3eefe <_printf_float+0x2a6>
   3ef20:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   3ef22:	6da3      	ldr	r3, [r4, #88]	; 0x58
   3ef24:	429a      	cmp	r2, r3
   3ef26:	bfa8      	it	ge
   3ef28:	461a      	movge	r2, r3
   3ef2a:	2a00      	cmp	r2, #0
   3ef2c:	4691      	mov	r9, r2
   3ef2e:	dd07      	ble.n	3ef40 <_printf_float+0x2e8>
   3ef30:	4613      	mov	r3, r2
   3ef32:	4631      	mov	r1, r6
   3ef34:	4642      	mov	r2, r8
   3ef36:	4628      	mov	r0, r5
   3ef38:	47b8      	blx	r7
   3ef3a:	3001      	adds	r0, #1
   3ef3c:	f43f aeea 	beq.w	3ed14 <_printf_float+0xbc>
   3ef40:	f104 031a 	add.w	r3, r4, #26
   3ef44:	f04f 0b00 	mov.w	fp, #0
   3ef48:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
   3ef4c:	9304      	str	r3, [sp, #16]
   3ef4e:	e015      	b.n	3ef7c <_printf_float+0x324>
   3ef50:	7fefffff 	.word	0x7fefffff
   3ef54:	0004d968 	.word	0x0004d968
   3ef58:	000484d9 	.word	0x000484d9
   3ef5c:	0004d96c 	.word	0x0004d96c
   3ef60:	0004d970 	.word	0x0004d970
   3ef64:	0004d39b 	.word	0x0004d39b
   3ef68:	2301      	movs	r3, #1
   3ef6a:	9a04      	ldr	r2, [sp, #16]
   3ef6c:	4631      	mov	r1, r6
   3ef6e:	4628      	mov	r0, r5
   3ef70:	47b8      	blx	r7
   3ef72:	3001      	adds	r0, #1
   3ef74:	f43f aece 	beq.w	3ed14 <_printf_float+0xbc>
   3ef78:	f10b 0b01 	add.w	fp, fp, #1
   3ef7c:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
   3ef80:	ebaa 0309 	sub.w	r3, sl, r9
   3ef84:	455b      	cmp	r3, fp
   3ef86:	dcef      	bgt.n	3ef68 <_printf_float+0x310>
   3ef88:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
   3ef8c:	429a      	cmp	r2, r3
   3ef8e:	db1b      	blt.n	3efc8 <_printf_float+0x370>
   3ef90:	6823      	ldr	r3, [r4, #0]
   3ef92:	07da      	lsls	r2, r3, #31
   3ef94:	d418      	bmi.n	3efc8 <_printf_float+0x370>
   3ef96:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
   3ef9a:	4592      	cmp	sl, r2
   3ef9c:	db1c      	blt.n	3efd8 <_printf_float+0x380>
   3ef9e:	eba3 090a 	sub.w	r9, r3, sl
   3efa2:	f1b9 0f00 	cmp.w	r9, #0
   3efa6:	dd08      	ble.n	3efba <_printf_float+0x362>
   3efa8:	464b      	mov	r3, r9
   3efaa:	eb08 020a 	add.w	r2, r8, sl
   3efae:	4631      	mov	r1, r6
   3efb0:	4628      	mov	r0, r5
   3efb2:	47b8      	blx	r7
   3efb4:	3001      	adds	r0, #1
   3efb6:	f43f aead 	beq.w	3ed14 <_printf_float+0xbc>
   3efba:	f04f 0800 	mov.w	r8, #0
   3efbe:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
   3efc2:	f104 0a1a 	add.w	sl, r4, #26
   3efc6:	e014      	b.n	3eff2 <_printf_float+0x39a>
   3efc8:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
   3efcc:	4631      	mov	r1, r6
   3efce:	4628      	mov	r0, r5
   3efd0:	47b8      	blx	r7
   3efd2:	3001      	adds	r0, #1
   3efd4:	d1df      	bne.n	3ef96 <_printf_float+0x33e>
   3efd6:	e69d      	b.n	3ed14 <_printf_float+0xbc>
   3efd8:	eba3 0902 	sub.w	r9, r3, r2
   3efdc:	e7e1      	b.n	3efa2 <_printf_float+0x34a>
   3efde:	2301      	movs	r3, #1
   3efe0:	4652      	mov	r2, sl
   3efe2:	4631      	mov	r1, r6
   3efe4:	4628      	mov	r0, r5
   3efe6:	47b8      	blx	r7
   3efe8:	3001      	adds	r0, #1
   3efea:	f43f ae93 	beq.w	3ed14 <_printf_float+0xbc>
   3efee:	f108 0801 	add.w	r8, r8, #1
   3eff2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
   3eff6:	1a9b      	subs	r3, r3, r2
   3eff8:	eba3 0309 	sub.w	r3, r3, r9
   3effc:	4543      	cmp	r3, r8
   3effe:	dcee      	bgt.n	3efde <_printf_float+0x386>
   3f000:	e74a      	b.n	3ee98 <_printf_float+0x240>
   3f002:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   3f004:	2a01      	cmp	r2, #1
   3f006:	dc01      	bgt.n	3f00c <_printf_float+0x3b4>
   3f008:	07db      	lsls	r3, r3, #31
   3f00a:	d537      	bpl.n	3f07c <_printf_float+0x424>
   3f00c:	2301      	movs	r3, #1
   3f00e:	4642      	mov	r2, r8
   3f010:	4631      	mov	r1, r6
   3f012:	4628      	mov	r0, r5
   3f014:	47b8      	blx	r7
   3f016:	3001      	adds	r0, #1
   3f018:	f43f ae7c 	beq.w	3ed14 <_printf_float+0xbc>
   3f01c:	4631      	mov	r1, r6
   3f01e:	4628      	mov	r0, r5
   3f020:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
   3f024:	47b8      	blx	r7
   3f026:	3001      	adds	r0, #1
   3f028:	f43f ae74 	beq.w	3ed14 <_printf_float+0xbc>
   3f02c:	2200      	movs	r2, #0
   3f02e:	2300      	movs	r3, #0
   3f030:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
   3f034:	f7dd fe28 	bl	1cc88 <__aeabi_dcmpeq>
   3f038:	b9d8      	cbnz	r0, 3f072 <_printf_float+0x41a>
   3f03a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   3f03c:	f108 0201 	add.w	r2, r8, #1
   3f040:	3b01      	subs	r3, #1
   3f042:	4631      	mov	r1, r6
   3f044:	4628      	mov	r0, r5
   3f046:	47b8      	blx	r7
   3f048:	3001      	adds	r0, #1
   3f04a:	d10e      	bne.n	3f06a <_printf_float+0x412>
   3f04c:	e662      	b.n	3ed14 <_printf_float+0xbc>
   3f04e:	2301      	movs	r3, #1
   3f050:	4652      	mov	r2, sl
   3f052:	4631      	mov	r1, r6
   3f054:	4628      	mov	r0, r5
   3f056:	47b8      	blx	r7
   3f058:	3001      	adds	r0, #1
   3f05a:	f43f ae5b 	beq.w	3ed14 <_printf_float+0xbc>
   3f05e:	f108 0801 	add.w	r8, r8, #1
   3f062:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   3f064:	3b01      	subs	r3, #1
   3f066:	4543      	cmp	r3, r8
   3f068:	dcf1      	bgt.n	3f04e <_printf_float+0x3f6>
   3f06a:	464b      	mov	r3, r9
   3f06c:	f104 0250 	add.w	r2, r4, #80	; 0x50
   3f070:	e6e1      	b.n	3ee36 <_printf_float+0x1de>
   3f072:	f04f 0800 	mov.w	r8, #0
   3f076:	f104 0a1a 	add.w	sl, r4, #26
   3f07a:	e7f2      	b.n	3f062 <_printf_float+0x40a>
   3f07c:	2301      	movs	r3, #1
   3f07e:	4642      	mov	r2, r8
   3f080:	e7df      	b.n	3f042 <_printf_float+0x3ea>
   3f082:	2301      	movs	r3, #1
   3f084:	464a      	mov	r2, r9
   3f086:	4631      	mov	r1, r6
   3f088:	4628      	mov	r0, r5
   3f08a:	47b8      	blx	r7
   3f08c:	3001      	adds	r0, #1
   3f08e:	f43f ae41 	beq.w	3ed14 <_printf_float+0xbc>
   3f092:	f108 0801 	add.w	r8, r8, #1
   3f096:	68e3      	ldr	r3, [r4, #12]
   3f098:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   3f09a:	1a9b      	subs	r3, r3, r2
   3f09c:	4543      	cmp	r3, r8
   3f09e:	dcf0      	bgt.n	3f082 <_printf_float+0x42a>
   3f0a0:	e6fe      	b.n	3eea0 <_printf_float+0x248>
   3f0a2:	f04f 0800 	mov.w	r8, #0
   3f0a6:	f104 0919 	add.w	r9, r4, #25
   3f0aa:	e7f4      	b.n	3f096 <_printf_float+0x43e>

0003f0ac <_printf_i>:
   3f0ac:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   3f0b0:	4606      	mov	r6, r0
   3f0b2:	460c      	mov	r4, r1
   3f0b4:	f101 0043 	add.w	r0, r1, #67	; 0x43
   3f0b8:	7e09      	ldrb	r1, [r1, #24]
   3f0ba:	b085      	sub	sp, #20
   3f0bc:	4698      	mov	r8, r3
   3f0be:	296e      	cmp	r1, #110	; 0x6e
   3f0c0:	4617      	mov	r7, r2
   3f0c2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   3f0c4:	f000 80ba 	beq.w	3f23c <_printf_i+0x190>
   3f0c8:	d824      	bhi.n	3f114 <_printf_i+0x68>
   3f0ca:	2963      	cmp	r1, #99	; 0x63
   3f0cc:	d039      	beq.n	3f142 <_printf_i+0x96>
   3f0ce:	d80a      	bhi.n	3f0e6 <_printf_i+0x3a>
   3f0d0:	2900      	cmp	r1, #0
   3f0d2:	f000 80c3 	beq.w	3f25c <_printf_i+0x1b0>
   3f0d6:	2958      	cmp	r1, #88	; 0x58
   3f0d8:	f000 8091 	beq.w	3f1fe <_printf_i+0x152>
   3f0dc:	f104 0542 	add.w	r5, r4, #66	; 0x42
   3f0e0:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
   3f0e4:	e035      	b.n	3f152 <_printf_i+0xa6>
   3f0e6:	2964      	cmp	r1, #100	; 0x64
   3f0e8:	d001      	beq.n	3f0ee <_printf_i+0x42>
   3f0ea:	2969      	cmp	r1, #105	; 0x69
   3f0ec:	d1f6      	bne.n	3f0dc <_printf_i+0x30>
   3f0ee:	6825      	ldr	r5, [r4, #0]
   3f0f0:	681a      	ldr	r2, [r3, #0]
   3f0f2:	f015 0f80 	tst.w	r5, #128	; 0x80
   3f0f6:	f102 0104 	add.w	r1, r2, #4
   3f0fa:	d02c      	beq.n	3f156 <_printf_i+0xaa>
   3f0fc:	6812      	ldr	r2, [r2, #0]
   3f0fe:	6019      	str	r1, [r3, #0]
   3f100:	2a00      	cmp	r2, #0
   3f102:	da03      	bge.n	3f10c <_printf_i+0x60>
   3f104:	232d      	movs	r3, #45	; 0x2d
   3f106:	4252      	negs	r2, r2
   3f108:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
   3f10c:	f8df c1bc 	ldr.w	ip, [pc, #444]	; 3f2cc <_printf_i+0x220>
   3f110:	230a      	movs	r3, #10
   3f112:	e03f      	b.n	3f194 <_printf_i+0xe8>
   3f114:	2973      	cmp	r1, #115	; 0x73
   3f116:	f000 80a5 	beq.w	3f264 <_printf_i+0x1b8>
   3f11a:	d808      	bhi.n	3f12e <_printf_i+0x82>
   3f11c:	296f      	cmp	r1, #111	; 0x6f
   3f11e:	d021      	beq.n	3f164 <_printf_i+0xb8>
   3f120:	2970      	cmp	r1, #112	; 0x70
   3f122:	d1db      	bne.n	3f0dc <_printf_i+0x30>
   3f124:	6822      	ldr	r2, [r4, #0]
   3f126:	f042 0220 	orr.w	r2, r2, #32
   3f12a:	6022      	str	r2, [r4, #0]
   3f12c:	e003      	b.n	3f136 <_printf_i+0x8a>
   3f12e:	2975      	cmp	r1, #117	; 0x75
   3f130:	d018      	beq.n	3f164 <_printf_i+0xb8>
   3f132:	2978      	cmp	r1, #120	; 0x78
   3f134:	d1d2      	bne.n	3f0dc <_printf_i+0x30>
   3f136:	2278      	movs	r2, #120	; 0x78
   3f138:	f8df c194 	ldr.w	ip, [pc, #404]	; 3f2d0 <_printf_i+0x224>
   3f13c:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
   3f140:	e061      	b.n	3f206 <_printf_i+0x15a>
   3f142:	681a      	ldr	r2, [r3, #0]
   3f144:	f104 0542 	add.w	r5, r4, #66	; 0x42
   3f148:	1d11      	adds	r1, r2, #4
   3f14a:	6019      	str	r1, [r3, #0]
   3f14c:	6813      	ldr	r3, [r2, #0]
   3f14e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
   3f152:	2301      	movs	r3, #1
   3f154:	e093      	b.n	3f27e <_printf_i+0x1d2>
   3f156:	6812      	ldr	r2, [r2, #0]
   3f158:	f015 0f40 	tst.w	r5, #64	; 0x40
   3f15c:	6019      	str	r1, [r3, #0]
   3f15e:	bf18      	it	ne
   3f160:	b212      	sxthne	r2, r2
   3f162:	e7cd      	b.n	3f100 <_printf_i+0x54>
   3f164:	f8d4 c000 	ldr.w	ip, [r4]
   3f168:	681a      	ldr	r2, [r3, #0]
   3f16a:	f01c 0f80 	tst.w	ip, #128	; 0x80
   3f16e:	f102 0504 	add.w	r5, r2, #4
   3f172:	601d      	str	r5, [r3, #0]
   3f174:	d001      	beq.n	3f17a <_printf_i+0xce>
   3f176:	6812      	ldr	r2, [r2, #0]
   3f178:	e003      	b.n	3f182 <_printf_i+0xd6>
   3f17a:	f01c 0f40 	tst.w	ip, #64	; 0x40
   3f17e:	d0fa      	beq.n	3f176 <_printf_i+0xca>
   3f180:	8812      	ldrh	r2, [r2, #0]
   3f182:	296f      	cmp	r1, #111	; 0x6f
   3f184:	f8df c144 	ldr.w	ip, [pc, #324]	; 3f2cc <_printf_i+0x220>
   3f188:	bf0c      	ite	eq
   3f18a:	2308      	moveq	r3, #8
   3f18c:	230a      	movne	r3, #10
   3f18e:	2100      	movs	r1, #0
   3f190:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
   3f194:	6865      	ldr	r5, [r4, #4]
   3f196:	2d00      	cmp	r5, #0
   3f198:	60a5      	str	r5, [r4, #8]
   3f19a:	bfa2      	ittt	ge
   3f19c:	6821      	ldrge	r1, [r4, #0]
   3f19e:	f021 0104 	bicge.w	r1, r1, #4
   3f1a2:	6021      	strge	r1, [r4, #0]
   3f1a4:	b90a      	cbnz	r2, 3f1aa <_printf_i+0xfe>
   3f1a6:	2d00      	cmp	r5, #0
   3f1a8:	d046      	beq.n	3f238 <_printf_i+0x18c>
   3f1aa:	4605      	mov	r5, r0
   3f1ac:	4293      	cmp	r3, r2
   3f1ae:	fbb2 f1f3 	udiv	r1, r2, r3
   3f1b2:	fb03 2e11 	mls	lr, r3, r1, r2
   3f1b6:	f81c e00e 	ldrb.w	lr, [ip, lr]
   3f1ba:	f805 ed01 	strb.w	lr, [r5, #-1]!
   3f1be:	d939      	bls.n	3f234 <_printf_i+0x188>
   3f1c0:	2b08      	cmp	r3, #8
   3f1c2:	d10b      	bne.n	3f1dc <_printf_i+0x130>
   3f1c4:	6823      	ldr	r3, [r4, #0]
   3f1c6:	07da      	lsls	r2, r3, #31
   3f1c8:	d508      	bpl.n	3f1dc <_printf_i+0x130>
   3f1ca:	6923      	ldr	r3, [r4, #16]
   3f1cc:	6862      	ldr	r2, [r4, #4]
   3f1ce:	429a      	cmp	r2, r3
   3f1d0:	bfde      	ittt	le
   3f1d2:	2330      	movle	r3, #48	; 0x30
   3f1d4:	f805 3c01 	strble.w	r3, [r5, #-1]
   3f1d8:	f105 35ff 	addle.w	r5, r5, #4294967295
   3f1dc:	1b40      	subs	r0, r0, r5
   3f1de:	6120      	str	r0, [r4, #16]
   3f1e0:	f8cd 8000 	str.w	r8, [sp]
   3f1e4:	463b      	mov	r3, r7
   3f1e6:	aa03      	add	r2, sp, #12
   3f1e8:	4621      	mov	r1, r4
   3f1ea:	4630      	mov	r0, r6
   3f1ec:	f005 ff2b 	bl	45046 <_printf_common>
   3f1f0:	3001      	adds	r0, #1
   3f1f2:	d149      	bne.n	3f288 <_printf_i+0x1dc>
   3f1f4:	f04f 30ff 	mov.w	r0, #4294967295
   3f1f8:	b005      	add	sp, #20
   3f1fa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   3f1fe:	f8df c0cc 	ldr.w	ip, [pc, #204]	; 3f2cc <_printf_i+0x220>
   3f202:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
   3f206:	681d      	ldr	r5, [r3, #0]
   3f208:	6821      	ldr	r1, [r4, #0]
   3f20a:	f855 2b04 	ldr.w	r2, [r5], #4
   3f20e:	601d      	str	r5, [r3, #0]
   3f210:	060d      	lsls	r5, r1, #24
   3f212:	d50b      	bpl.n	3f22c <_printf_i+0x180>
   3f214:	07cd      	lsls	r5, r1, #31
   3f216:	bf44      	itt	mi
   3f218:	f041 0120 	orrmi.w	r1, r1, #32
   3f21c:	6021      	strmi	r1, [r4, #0]
   3f21e:	b91a      	cbnz	r2, 3f228 <_printf_i+0x17c>
   3f220:	6823      	ldr	r3, [r4, #0]
   3f222:	f023 0320 	bic.w	r3, r3, #32
   3f226:	6023      	str	r3, [r4, #0]
   3f228:	2310      	movs	r3, #16
   3f22a:	e7b0      	b.n	3f18e <_printf_i+0xe2>
   3f22c:	064b      	lsls	r3, r1, #25
   3f22e:	bf48      	it	mi
   3f230:	b292      	uxthmi	r2, r2
   3f232:	e7ef      	b.n	3f214 <_printf_i+0x168>
   3f234:	460a      	mov	r2, r1
   3f236:	e7b9      	b.n	3f1ac <_printf_i+0x100>
   3f238:	4605      	mov	r5, r0
   3f23a:	e7c1      	b.n	3f1c0 <_printf_i+0x114>
   3f23c:	681a      	ldr	r2, [r3, #0]
   3f23e:	f8d4 c000 	ldr.w	ip, [r4]
   3f242:	1d15      	adds	r5, r2, #4
   3f244:	6961      	ldr	r1, [r4, #20]
   3f246:	f01c 0f80 	tst.w	ip, #128	; 0x80
   3f24a:	601d      	str	r5, [r3, #0]
   3f24c:	6813      	ldr	r3, [r2, #0]
   3f24e:	d001      	beq.n	3f254 <_printf_i+0x1a8>
   3f250:	6019      	str	r1, [r3, #0]
   3f252:	e003      	b.n	3f25c <_printf_i+0x1b0>
   3f254:	f01c 0f40 	tst.w	ip, #64	; 0x40
   3f258:	d0fa      	beq.n	3f250 <_printf_i+0x1a4>
   3f25a:	8019      	strh	r1, [r3, #0]
   3f25c:	2300      	movs	r3, #0
   3f25e:	4605      	mov	r5, r0
   3f260:	6123      	str	r3, [r4, #16]
   3f262:	e7bd      	b.n	3f1e0 <_printf_i+0x134>
   3f264:	681a      	ldr	r2, [r3, #0]
   3f266:	1d11      	adds	r1, r2, #4
   3f268:	6019      	str	r1, [r3, #0]
   3f26a:	2100      	movs	r1, #0
   3f26c:	6815      	ldr	r5, [r2, #0]
   3f26e:	6862      	ldr	r2, [r4, #4]
   3f270:	4628      	mov	r0, r5
   3f272:	f005 fdd1 	bl	44e18 <memchr>
   3f276:	b108      	cbz	r0, 3f27c <_printf_i+0x1d0>
   3f278:	1b40      	subs	r0, r0, r5
   3f27a:	6060      	str	r0, [r4, #4]
   3f27c:	6863      	ldr	r3, [r4, #4]
   3f27e:	6123      	str	r3, [r4, #16]
   3f280:	2300      	movs	r3, #0
   3f282:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
   3f286:	e7ab      	b.n	3f1e0 <_printf_i+0x134>
   3f288:	6923      	ldr	r3, [r4, #16]
   3f28a:	462a      	mov	r2, r5
   3f28c:	4639      	mov	r1, r7
   3f28e:	4630      	mov	r0, r6
   3f290:	47c0      	blx	r8
   3f292:	3001      	adds	r0, #1
   3f294:	d0ae      	beq.n	3f1f4 <_printf_i+0x148>
   3f296:	6823      	ldr	r3, [r4, #0]
   3f298:	079b      	lsls	r3, r3, #30
   3f29a:	d413      	bmi.n	3f2c4 <_printf_i+0x218>
   3f29c:	68e0      	ldr	r0, [r4, #12]
   3f29e:	9b03      	ldr	r3, [sp, #12]
   3f2a0:	4298      	cmp	r0, r3
   3f2a2:	bfb8      	it	lt
   3f2a4:	4618      	movlt	r0, r3
   3f2a6:	e7a7      	b.n	3f1f8 <_printf_i+0x14c>
   3f2a8:	2301      	movs	r3, #1
   3f2aa:	464a      	mov	r2, r9
   3f2ac:	4639      	mov	r1, r7
   3f2ae:	4630      	mov	r0, r6
   3f2b0:	47c0      	blx	r8
   3f2b2:	3001      	adds	r0, #1
   3f2b4:	d09e      	beq.n	3f1f4 <_printf_i+0x148>
   3f2b6:	3501      	adds	r5, #1
   3f2b8:	68e3      	ldr	r3, [r4, #12]
   3f2ba:	9a03      	ldr	r2, [sp, #12]
   3f2bc:	1a9b      	subs	r3, r3, r2
   3f2be:	42ab      	cmp	r3, r5
   3f2c0:	dcf2      	bgt.n	3f2a8 <_printf_i+0x1fc>
   3f2c2:	e7eb      	b.n	3f29c <_printf_i+0x1f0>
   3f2c4:	2500      	movs	r5, #0
   3f2c6:	f104 0919 	add.w	r9, r4, #25
   3f2ca:	e7f5      	b.n	3f2b8 <_printf_i+0x20c>
   3f2cc:	0004d974 	.word	0x0004d974
   3f2d0:	0004d985 	.word	0x0004d985

0003f2d4 <srand>:
   3f2d4:	b538      	push	{r3, r4, r5, lr}
   3f2d6:	4b0d      	ldr	r3, [pc, #52]	; (3f30c <srand+0x38>)
   3f2d8:	4605      	mov	r5, r0
   3f2da:	681c      	ldr	r4, [r3, #0]
   3f2dc:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   3f2de:	b97b      	cbnz	r3, 3f300 <srand+0x2c>
   3f2e0:	2018      	movs	r0, #24
   3f2e2:	f000 fc2b 	bl	3fb3c <malloc>
   3f2e6:	4a0a      	ldr	r2, [pc, #40]	; (3f310 <srand+0x3c>)
   3f2e8:	4b0a      	ldr	r3, [pc, #40]	; (3f314 <srand+0x40>)
   3f2ea:	63a0      	str	r0, [r4, #56]	; 0x38
   3f2ec:	e9c0 2300 	strd	r2, r3, [r0]
   3f2f0:	4b09      	ldr	r3, [pc, #36]	; (3f318 <srand+0x44>)
   3f2f2:	2201      	movs	r2, #1
   3f2f4:	6083      	str	r3, [r0, #8]
   3f2f6:	230b      	movs	r3, #11
   3f2f8:	8183      	strh	r3, [r0, #12]
   3f2fa:	2300      	movs	r3, #0
   3f2fc:	e9c0 2304 	strd	r2, r3, [r0, #16]
   3f300:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   3f302:	2200      	movs	r2, #0
   3f304:	611d      	str	r5, [r3, #16]
   3f306:	615a      	str	r2, [r3, #20]
   3f308:	bd38      	pop	{r3, r4, r5, pc}
   3f30a:	bf00      	nop
   3f30c:	200324dc 	.word	0x200324dc
   3f310:	abcd330e 	.word	0xabcd330e
   3f314:	e66d1234 	.word	0xe66d1234
   3f318:	0005deec 	.word	0x0005deec

0003f31c <rand>:
   3f31c:	4b13      	ldr	r3, [pc, #76]	; (3f36c <rand+0x50>)
   3f31e:	b510      	push	{r4, lr}
   3f320:	681c      	ldr	r4, [r3, #0]
   3f322:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   3f324:	b97b      	cbnz	r3, 3f346 <rand+0x2a>
   3f326:	2018      	movs	r0, #24
   3f328:	f000 fc08 	bl	3fb3c <malloc>
   3f32c:	4a10      	ldr	r2, [pc, #64]	; (3f370 <rand+0x54>)
   3f32e:	4b11      	ldr	r3, [pc, #68]	; (3f374 <rand+0x58>)
   3f330:	63a0      	str	r0, [r4, #56]	; 0x38
   3f332:	e9c0 2300 	strd	r2, r3, [r0]
   3f336:	4b10      	ldr	r3, [pc, #64]	; (3f378 <rand+0x5c>)
   3f338:	2201      	movs	r2, #1
   3f33a:	6083      	str	r3, [r0, #8]
   3f33c:	230b      	movs	r3, #11
   3f33e:	8183      	strh	r3, [r0, #12]
   3f340:	2300      	movs	r3, #0
   3f342:	e9c0 2304 	strd	r2, r3, [r0, #16]
   3f346:	6ba1      	ldr	r1, [r4, #56]	; 0x38
   3f348:	480c      	ldr	r0, [pc, #48]	; (3f37c <rand+0x60>)
   3f34a:	690a      	ldr	r2, [r1, #16]
   3f34c:	694b      	ldr	r3, [r1, #20]
   3f34e:	4c0c      	ldr	r4, [pc, #48]	; (3f380 <rand+0x64>)
   3f350:	4350      	muls	r0, r2
   3f352:	fb04 0003 	mla	r0, r4, r3, r0
   3f356:	fba2 3404 	umull	r3, r4, r2, r4
   3f35a:	1c5a      	adds	r2, r3, #1
   3f35c:	4404      	add	r4, r0
   3f35e:	f144 0000 	adc.w	r0, r4, #0
   3f362:	e9c1 2004 	strd	r2, r0, [r1, #16]
   3f366:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
   3f36a:	bd10      	pop	{r4, pc}
   3f36c:	200324dc 	.word	0x200324dc
   3f370:	abcd330e 	.word	0xabcd330e
   3f374:	e66d1234 	.word	0xe66d1234
   3f378:	0005deec 	.word	0x0005deec
   3f37c:	5851f42d 	.word	0x5851f42d
   3f380:	4c957f2d 	.word	0x4c957f2d

0003f384 <sniprintf>:
   3f384:	b40c      	push	{r2, r3}
   3f386:	4b18      	ldr	r3, [pc, #96]	; (3f3e8 <sniprintf+0x64>)
   3f388:	b530      	push	{r4, r5, lr}
   3f38a:	1e0c      	subs	r4, r1, #0
   3f38c:	b09d      	sub	sp, #116	; 0x74
   3f38e:	681d      	ldr	r5, [r3, #0]
   3f390:	da08      	bge.n	3f3a4 <sniprintf+0x20>
   3f392:	238b      	movs	r3, #139	; 0x8b
   3f394:	f04f 30ff 	mov.w	r0, #4294967295
   3f398:	602b      	str	r3, [r5, #0]
   3f39a:	b01d      	add	sp, #116	; 0x74
   3f39c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
   3f3a0:	b002      	add	sp, #8
   3f3a2:	4770      	bx	lr
   3f3a4:	f44f 7302 	mov.w	r3, #520	; 0x208
   3f3a8:	9002      	str	r0, [sp, #8]
   3f3aa:	9006      	str	r0, [sp, #24]
   3f3ac:	a902      	add	r1, sp, #8
   3f3ae:	f8ad 3014 	strh.w	r3, [sp, #20]
   3f3b2:	bf14      	ite	ne
   3f3b4:	f104 33ff 	addne.w	r3, r4, #4294967295
   3f3b8:	4623      	moveq	r3, r4
   3f3ba:	9a20      	ldr	r2, [sp, #128]	; 0x80
   3f3bc:	4628      	mov	r0, r5
   3f3be:	9304      	str	r3, [sp, #16]
   3f3c0:	9307      	str	r3, [sp, #28]
   3f3c2:	f64f 73ff 	movw	r3, #65535	; 0xffff
   3f3c6:	f8ad 3016 	strh.w	r3, [sp, #22]
   3f3ca:	ab21      	add	r3, sp, #132	; 0x84
   3f3cc:	9301      	str	r3, [sp, #4]
   3f3ce:	f000 fcb3 	bl	3fd38 <_svfiprintf_r>
   3f3d2:	1c43      	adds	r3, r0, #1
   3f3d4:	bfbc      	itt	lt
   3f3d6:	238b      	movlt	r3, #139	; 0x8b
   3f3d8:	602b      	strlt	r3, [r5, #0]
   3f3da:	2c00      	cmp	r4, #0
   3f3dc:	d0dd      	beq.n	3f39a <sniprintf+0x16>
   3f3de:	9b02      	ldr	r3, [sp, #8]
   3f3e0:	2200      	movs	r2, #0
   3f3e2:	701a      	strb	r2, [r3, #0]
   3f3e4:	e7d9      	b.n	3f39a <sniprintf+0x16>
   3f3e6:	bf00      	nop
   3f3e8:	200324dc 	.word	0x200324dc

0003f3ec <_strtol_l.isra.0>:
   3f3ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   3f3f0:	4686      	mov	lr, r0
   3f3f2:	4f39      	ldr	r7, [pc, #228]	; (3f4d8 <_strtol_l.isra.0+0xec>)
   3f3f4:	4608      	mov	r0, r1
   3f3f6:	4605      	mov	r5, r0
   3f3f8:	f815 4b01 	ldrb.w	r4, [r5], #1
   3f3fc:	5de6      	ldrb	r6, [r4, r7]
   3f3fe:	f016 0608 	ands.w	r6, r6, #8
   3f402:	d135      	bne.n	3f470 <_strtol_l.isra.0+0x84>
   3f404:	2c2d      	cmp	r4, #45	; 0x2d
   3f406:	d135      	bne.n	3f474 <_strtol_l.isra.0+0x88>
   3f408:	782c      	ldrb	r4, [r5, #0]
   3f40a:	f04f 0801 	mov.w	r8, #1
   3f40e:	1c85      	adds	r5, r0, #2
   3f410:	2b00      	cmp	r3, #0
   3f412:	d05c      	beq.n	3f4ce <_strtol_l.isra.0+0xe2>
   3f414:	2b10      	cmp	r3, #16
   3f416:	d109      	bne.n	3f42c <_strtol_l.isra.0+0x40>
   3f418:	2c30      	cmp	r4, #48	; 0x30
   3f41a:	d107      	bne.n	3f42c <_strtol_l.isra.0+0x40>
   3f41c:	7828      	ldrb	r0, [r5, #0]
   3f41e:	f000 00df 	and.w	r0, r0, #223	; 0xdf
   3f422:	2858      	cmp	r0, #88	; 0x58
   3f424:	d14e      	bne.n	3f4c4 <_strtol_l.isra.0+0xd8>
   3f426:	786c      	ldrb	r4, [r5, #1]
   3f428:	2310      	movs	r3, #16
   3f42a:	3502      	adds	r5, #2
   3f42c:	f1b8 0f00 	cmp.w	r8, #0
   3f430:	f04f 0700 	mov.w	r7, #0
   3f434:	bf14      	ite	ne
   3f436:	f04f 4c00 	movne.w	ip, #2147483648	; 0x80000000
   3f43a:	f06f 4c00 	mvneq.w	ip, #2147483648	; 0x80000000
   3f43e:	4638      	mov	r0, r7
   3f440:	fbbc f9f3 	udiv	r9, ip, r3
   3f444:	fb03 ca19 	mls	sl, r3, r9, ip
   3f448:	f1a4 0630 	sub.w	r6, r4, #48	; 0x30
   3f44c:	2e09      	cmp	r6, #9
   3f44e:	d817      	bhi.n	3f480 <_strtol_l.isra.0+0x94>
   3f450:	4634      	mov	r4, r6
   3f452:	42a3      	cmp	r3, r4
   3f454:	dd23      	ble.n	3f49e <_strtol_l.isra.0+0xb2>
   3f456:	1c7e      	adds	r6, r7, #1
   3f458:	d007      	beq.n	3f46a <_strtol_l.isra.0+0x7e>
   3f45a:	4581      	cmp	r9, r0
   3f45c:	d31c      	bcc.n	3f498 <_strtol_l.isra.0+0xac>
   3f45e:	d101      	bne.n	3f464 <_strtol_l.isra.0+0x78>
   3f460:	45a2      	cmp	sl, r4
   3f462:	db19      	blt.n	3f498 <_strtol_l.isra.0+0xac>
   3f464:	fb00 4003 	mla	r0, r0, r3, r4
   3f468:	2701      	movs	r7, #1
   3f46a:	f815 4b01 	ldrb.w	r4, [r5], #1
   3f46e:	e7eb      	b.n	3f448 <_strtol_l.isra.0+0x5c>
   3f470:	4628      	mov	r0, r5
   3f472:	e7c0      	b.n	3f3f6 <_strtol_l.isra.0+0xa>
   3f474:	2c2b      	cmp	r4, #43	; 0x2b
   3f476:	46b0      	mov	r8, r6
   3f478:	bf04      	itt	eq
   3f47a:	782c      	ldrbeq	r4, [r5, #0]
   3f47c:	1c85      	addeq	r5, r0, #2
   3f47e:	e7c7      	b.n	3f410 <_strtol_l.isra.0+0x24>
   3f480:	f1a4 0641 	sub.w	r6, r4, #65	; 0x41
   3f484:	2e19      	cmp	r6, #25
   3f486:	d801      	bhi.n	3f48c <_strtol_l.isra.0+0xa0>
   3f488:	3c37      	subs	r4, #55	; 0x37
   3f48a:	e7e2      	b.n	3f452 <_strtol_l.isra.0+0x66>
   3f48c:	f1a4 0661 	sub.w	r6, r4, #97	; 0x61
   3f490:	2e19      	cmp	r6, #25
   3f492:	d804      	bhi.n	3f49e <_strtol_l.isra.0+0xb2>
   3f494:	3c57      	subs	r4, #87	; 0x57
   3f496:	e7dc      	b.n	3f452 <_strtol_l.isra.0+0x66>
   3f498:	f04f 37ff 	mov.w	r7, #4294967295
   3f49c:	e7e5      	b.n	3f46a <_strtol_l.isra.0+0x7e>
   3f49e:	1c7b      	adds	r3, r7, #1
   3f4a0:	d106      	bne.n	3f4b0 <_strtol_l.isra.0+0xc4>
   3f4a2:	2322      	movs	r3, #34	; 0x22
   3f4a4:	4660      	mov	r0, ip
   3f4a6:	f8ce 3000 	str.w	r3, [lr]
   3f4aa:	b942      	cbnz	r2, 3f4be <_strtol_l.isra.0+0xd2>
   3f4ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   3f4b0:	f1b8 0f00 	cmp.w	r8, #0
   3f4b4:	d000      	beq.n	3f4b8 <_strtol_l.isra.0+0xcc>
   3f4b6:	4240      	negs	r0, r0
   3f4b8:	2a00      	cmp	r2, #0
   3f4ba:	d0f7      	beq.n	3f4ac <_strtol_l.isra.0+0xc0>
   3f4bc:	b107      	cbz	r7, 3f4c0 <_strtol_l.isra.0+0xd4>
   3f4be:	1e69      	subs	r1, r5, #1
   3f4c0:	6011      	str	r1, [r2, #0]
   3f4c2:	e7f3      	b.n	3f4ac <_strtol_l.isra.0+0xc0>
   3f4c4:	2430      	movs	r4, #48	; 0x30
   3f4c6:	2b00      	cmp	r3, #0
   3f4c8:	d1b0      	bne.n	3f42c <_strtol_l.isra.0+0x40>
   3f4ca:	2308      	movs	r3, #8
   3f4cc:	e7ae      	b.n	3f42c <_strtol_l.isra.0+0x40>
   3f4ce:	2c30      	cmp	r4, #48	; 0x30
   3f4d0:	d0a4      	beq.n	3f41c <_strtol_l.isra.0+0x30>
   3f4d2:	230a      	movs	r3, #10
   3f4d4:	e7aa      	b.n	3f42c <_strtol_l.isra.0+0x40>
   3f4d6:	bf00      	nop
   3f4d8:	0004d857 	.word	0x0004d857

0003f4dc <strtol>:
   3f4dc:	4613      	mov	r3, r2
   3f4de:	460a      	mov	r2, r1
   3f4e0:	4601      	mov	r1, r0
   3f4e2:	4802      	ldr	r0, [pc, #8]	; (3f4ec <strtol+0x10>)
   3f4e4:	6800      	ldr	r0, [r0, #0]
   3f4e6:	f7ff bf81 	b.w	3f3ec <_strtol_l.isra.0>
   3f4ea:	bf00      	nop
   3f4ec:	200324dc 	.word	0x200324dc

0003f4f0 <_strtoul_l.isra.0>:
   3f4f0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   3f4f4:	4686      	mov	lr, r0
   3f4f6:	4f37      	ldr	r7, [pc, #220]	; (3f5d4 <_strtoul_l.isra.0+0xe4>)
   3f4f8:	4608      	mov	r0, r1
   3f4fa:	4605      	mov	r5, r0
   3f4fc:	f815 4b01 	ldrb.w	r4, [r5], #1
   3f500:	5de6      	ldrb	r6, [r4, r7]
   3f502:	f016 0608 	ands.w	r6, r6, #8
   3f506:	d131      	bne.n	3f56c <_strtoul_l.isra.0+0x7c>
   3f508:	2c2d      	cmp	r4, #45	; 0x2d
   3f50a:	d131      	bne.n	3f570 <_strtoul_l.isra.0+0x80>
   3f50c:	782c      	ldrb	r4, [r5, #0]
   3f50e:	f04f 0801 	mov.w	r8, #1
   3f512:	1c85      	adds	r5, r0, #2
   3f514:	2b00      	cmp	r3, #0
   3f516:	d059      	beq.n	3f5cc <_strtoul_l.isra.0+0xdc>
   3f518:	2b10      	cmp	r3, #16
   3f51a:	d109      	bne.n	3f530 <_strtoul_l.isra.0+0x40>
   3f51c:	2c30      	cmp	r4, #48	; 0x30
   3f51e:	d107      	bne.n	3f530 <_strtoul_l.isra.0+0x40>
   3f520:	7828      	ldrb	r0, [r5, #0]
   3f522:	f000 00df 	and.w	r0, r0, #223	; 0xdf
   3f526:	2858      	cmp	r0, #88	; 0x58
   3f528:	d14b      	bne.n	3f5c2 <_strtoul_l.isra.0+0xd2>
   3f52a:	786c      	ldrb	r4, [r5, #1]
   3f52c:	2310      	movs	r3, #16
   3f52e:	3502      	adds	r5, #2
   3f530:	f04f 3cff 	mov.w	ip, #4294967295
   3f534:	2600      	movs	r6, #0
   3f536:	fbbc fcf3 	udiv	ip, ip, r3
   3f53a:	fb03 f90c 	mul.w	r9, r3, ip
   3f53e:	4630      	mov	r0, r6
   3f540:	ea6f 0909 	mvn.w	r9, r9
   3f544:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
   3f548:	2f09      	cmp	r7, #9
   3f54a:	d817      	bhi.n	3f57c <_strtoul_l.isra.0+0x8c>
   3f54c:	463c      	mov	r4, r7
   3f54e:	42a3      	cmp	r3, r4
   3f550:	dd23      	ble.n	3f59a <_strtoul_l.isra.0+0xaa>
   3f552:	2e00      	cmp	r6, #0
   3f554:	db1e      	blt.n	3f594 <_strtoul_l.isra.0+0xa4>
   3f556:	4584      	cmp	ip, r0
   3f558:	d31c      	bcc.n	3f594 <_strtoul_l.isra.0+0xa4>
   3f55a:	d101      	bne.n	3f560 <_strtoul_l.isra.0+0x70>
   3f55c:	45a1      	cmp	r9, r4
   3f55e:	db19      	blt.n	3f594 <_strtoul_l.isra.0+0xa4>
   3f560:	fb00 4003 	mla	r0, r0, r3, r4
   3f564:	2601      	movs	r6, #1
   3f566:	f815 4b01 	ldrb.w	r4, [r5], #1
   3f56a:	e7eb      	b.n	3f544 <_strtoul_l.isra.0+0x54>
   3f56c:	4628      	mov	r0, r5
   3f56e:	e7c4      	b.n	3f4fa <_strtoul_l.isra.0+0xa>
   3f570:	2c2b      	cmp	r4, #43	; 0x2b
   3f572:	46b0      	mov	r8, r6
   3f574:	bf04      	itt	eq
   3f576:	782c      	ldrbeq	r4, [r5, #0]
   3f578:	1c85      	addeq	r5, r0, #2
   3f57a:	e7cb      	b.n	3f514 <_strtoul_l.isra.0+0x24>
   3f57c:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
   3f580:	2f19      	cmp	r7, #25
   3f582:	d801      	bhi.n	3f588 <_strtoul_l.isra.0+0x98>
   3f584:	3c37      	subs	r4, #55	; 0x37
   3f586:	e7e2      	b.n	3f54e <_strtoul_l.isra.0+0x5e>
   3f588:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
   3f58c:	2f19      	cmp	r7, #25
   3f58e:	d804      	bhi.n	3f59a <_strtoul_l.isra.0+0xaa>
   3f590:	3c57      	subs	r4, #87	; 0x57
   3f592:	e7dc      	b.n	3f54e <_strtoul_l.isra.0+0x5e>
   3f594:	f04f 36ff 	mov.w	r6, #4294967295
   3f598:	e7e5      	b.n	3f566 <_strtoul_l.isra.0+0x76>
   3f59a:	2e00      	cmp	r6, #0
   3f59c:	da07      	bge.n	3f5ae <_strtoul_l.isra.0+0xbe>
   3f59e:	2322      	movs	r3, #34	; 0x22
   3f5a0:	f04f 30ff 	mov.w	r0, #4294967295
   3f5a4:	f8ce 3000 	str.w	r3, [lr]
   3f5a8:	b942      	cbnz	r2, 3f5bc <_strtoul_l.isra.0+0xcc>
   3f5aa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   3f5ae:	f1b8 0f00 	cmp.w	r8, #0
   3f5b2:	d000      	beq.n	3f5b6 <_strtoul_l.isra.0+0xc6>
   3f5b4:	4240      	negs	r0, r0
   3f5b6:	2a00      	cmp	r2, #0
   3f5b8:	d0f7      	beq.n	3f5aa <_strtoul_l.isra.0+0xba>
   3f5ba:	b106      	cbz	r6, 3f5be <_strtoul_l.isra.0+0xce>
   3f5bc:	1e69      	subs	r1, r5, #1
   3f5be:	6011      	str	r1, [r2, #0]
   3f5c0:	e7f3      	b.n	3f5aa <_strtoul_l.isra.0+0xba>
   3f5c2:	2430      	movs	r4, #48	; 0x30
   3f5c4:	2b00      	cmp	r3, #0
   3f5c6:	d1b3      	bne.n	3f530 <_strtoul_l.isra.0+0x40>
   3f5c8:	2308      	movs	r3, #8
   3f5ca:	e7b1      	b.n	3f530 <_strtoul_l.isra.0+0x40>
   3f5cc:	2c30      	cmp	r4, #48	; 0x30
   3f5ce:	d0a7      	beq.n	3f520 <_strtoul_l.isra.0+0x30>
   3f5d0:	230a      	movs	r3, #10
   3f5d2:	e7ad      	b.n	3f530 <_strtoul_l.isra.0+0x40>
   3f5d4:	0004d857 	.word	0x0004d857

0003f5d8 <strtoul>:
   3f5d8:	4613      	mov	r3, r2
   3f5da:	460a      	mov	r2, r1
   3f5dc:	4601      	mov	r1, r0
   3f5de:	4802      	ldr	r0, [pc, #8]	; (3f5e8 <strtoul+0x10>)
   3f5e0:	6800      	ldr	r0, [r0, #0]
   3f5e2:	f7ff bf85 	b.w	3f4f0 <_strtoul_l.isra.0>
   3f5e6:	bf00      	nop
   3f5e8:	200324dc 	.word	0x200324dc

0003f5ec <__swbuf_r>:
   3f5ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   3f5ee:	460e      	mov	r6, r1
   3f5f0:	4614      	mov	r4, r2
   3f5f2:	4605      	mov	r5, r0
   3f5f4:	b118      	cbz	r0, 3f5fe <__swbuf_r+0x12>
   3f5f6:	6983      	ldr	r3, [r0, #24]
   3f5f8:	b90b      	cbnz	r3, 3f5fe <__swbuf_r+0x12>
   3f5fa:	f000 f9dd 	bl	3f9b8 <__sinit>
   3f5fe:	4b21      	ldr	r3, [pc, #132]	; (3f684 <__swbuf_r+0x98>)
   3f600:	429c      	cmp	r4, r3
   3f602:	d12b      	bne.n	3f65c <__swbuf_r+0x70>
   3f604:	686c      	ldr	r4, [r5, #4]
   3f606:	69a3      	ldr	r3, [r4, #24]
   3f608:	60a3      	str	r3, [r4, #8]
   3f60a:	89a3      	ldrh	r3, [r4, #12]
   3f60c:	071a      	lsls	r2, r3, #28
   3f60e:	d52f      	bpl.n	3f670 <__swbuf_r+0x84>
   3f610:	6923      	ldr	r3, [r4, #16]
   3f612:	b36b      	cbz	r3, 3f670 <__swbuf_r+0x84>
   3f614:	6923      	ldr	r3, [r4, #16]
   3f616:	b2f6      	uxtb	r6, r6
   3f618:	6820      	ldr	r0, [r4, #0]
   3f61a:	4637      	mov	r7, r6
   3f61c:	1ac0      	subs	r0, r0, r3
   3f61e:	6963      	ldr	r3, [r4, #20]
   3f620:	4283      	cmp	r3, r0
   3f622:	dc04      	bgt.n	3f62e <__swbuf_r+0x42>
   3f624:	4621      	mov	r1, r4
   3f626:	4628      	mov	r0, r5
   3f628:	f000 f948 	bl	3f8bc <_fflush_r>
   3f62c:	bb30      	cbnz	r0, 3f67c <__swbuf_r+0x90>
   3f62e:	68a3      	ldr	r3, [r4, #8]
   3f630:	3001      	adds	r0, #1
   3f632:	3b01      	subs	r3, #1
   3f634:	60a3      	str	r3, [r4, #8]
   3f636:	6823      	ldr	r3, [r4, #0]
   3f638:	1c5a      	adds	r2, r3, #1
   3f63a:	6022      	str	r2, [r4, #0]
   3f63c:	701e      	strb	r6, [r3, #0]
   3f63e:	6963      	ldr	r3, [r4, #20]
   3f640:	4283      	cmp	r3, r0
   3f642:	d004      	beq.n	3f64e <__swbuf_r+0x62>
   3f644:	89a3      	ldrh	r3, [r4, #12]
   3f646:	07db      	lsls	r3, r3, #31
   3f648:	d506      	bpl.n	3f658 <__swbuf_r+0x6c>
   3f64a:	2e0a      	cmp	r6, #10
   3f64c:	d104      	bne.n	3f658 <__swbuf_r+0x6c>
   3f64e:	4621      	mov	r1, r4
   3f650:	4628      	mov	r0, r5
   3f652:	f000 f933 	bl	3f8bc <_fflush_r>
   3f656:	b988      	cbnz	r0, 3f67c <__swbuf_r+0x90>
   3f658:	4638      	mov	r0, r7
   3f65a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   3f65c:	4b0a      	ldr	r3, [pc, #40]	; (3f688 <__swbuf_r+0x9c>)
   3f65e:	429c      	cmp	r4, r3
   3f660:	d101      	bne.n	3f666 <__swbuf_r+0x7a>
   3f662:	68ac      	ldr	r4, [r5, #8]
   3f664:	e7cf      	b.n	3f606 <__swbuf_r+0x1a>
   3f666:	4b09      	ldr	r3, [pc, #36]	; (3f68c <__swbuf_r+0xa0>)
   3f668:	429c      	cmp	r4, r3
   3f66a:	bf08      	it	eq
   3f66c:	68ec      	ldreq	r4, [r5, #12]
   3f66e:	e7ca      	b.n	3f606 <__swbuf_r+0x1a>
   3f670:	4621      	mov	r1, r4
   3f672:	4628      	mov	r0, r5
   3f674:	f000 f80c 	bl	3f690 <__swsetup_r>
   3f678:	2800      	cmp	r0, #0
   3f67a:	d0cb      	beq.n	3f614 <__swbuf_r+0x28>
   3f67c:	f04f 37ff 	mov.w	r7, #4294967295
   3f680:	e7ea      	b.n	3f658 <__swbuf_r+0x6c>
   3f682:	bf00      	nop
   3f684:	000474a0 	.word	0x000474a0
   3f688:	000474c0 	.word	0x000474c0
   3f68c:	00047480 	.word	0x00047480

0003f690 <__swsetup_r>:
   3f690:	4b32      	ldr	r3, [pc, #200]	; (3f75c <__swsetup_r+0xcc>)
   3f692:	b570      	push	{r4, r5, r6, lr}
   3f694:	681d      	ldr	r5, [r3, #0]
   3f696:	4606      	mov	r6, r0
   3f698:	460c      	mov	r4, r1
   3f69a:	b125      	cbz	r5, 3f6a6 <__swsetup_r+0x16>
   3f69c:	69ab      	ldr	r3, [r5, #24]
   3f69e:	b913      	cbnz	r3, 3f6a6 <__swsetup_r+0x16>
   3f6a0:	4628      	mov	r0, r5
   3f6a2:	f000 f989 	bl	3f9b8 <__sinit>
   3f6a6:	4b2e      	ldr	r3, [pc, #184]	; (3f760 <__swsetup_r+0xd0>)
   3f6a8:	429c      	cmp	r4, r3
   3f6aa:	d10f      	bne.n	3f6cc <__swsetup_r+0x3c>
   3f6ac:	686c      	ldr	r4, [r5, #4]
   3f6ae:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   3f6b2:	b29a      	uxth	r2, r3
   3f6b4:	0715      	lsls	r5, r2, #28
   3f6b6:	d42c      	bmi.n	3f712 <__swsetup_r+0x82>
   3f6b8:	06d0      	lsls	r0, r2, #27
   3f6ba:	d411      	bmi.n	3f6e0 <__swsetup_r+0x50>
   3f6bc:	2209      	movs	r2, #9
   3f6be:	6032      	str	r2, [r6, #0]
   3f6c0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   3f6c4:	f04f 30ff 	mov.w	r0, #4294967295
   3f6c8:	81a3      	strh	r3, [r4, #12]
   3f6ca:	e03e      	b.n	3f74a <__swsetup_r+0xba>
   3f6cc:	4b25      	ldr	r3, [pc, #148]	; (3f764 <__swsetup_r+0xd4>)
   3f6ce:	429c      	cmp	r4, r3
   3f6d0:	d101      	bne.n	3f6d6 <__swsetup_r+0x46>
   3f6d2:	68ac      	ldr	r4, [r5, #8]
   3f6d4:	e7eb      	b.n	3f6ae <__swsetup_r+0x1e>
   3f6d6:	4b24      	ldr	r3, [pc, #144]	; (3f768 <__swsetup_r+0xd8>)
   3f6d8:	429c      	cmp	r4, r3
   3f6da:	bf08      	it	eq
   3f6dc:	68ec      	ldreq	r4, [r5, #12]
   3f6de:	e7e6      	b.n	3f6ae <__swsetup_r+0x1e>
   3f6e0:	0751      	lsls	r1, r2, #29
   3f6e2:	d512      	bpl.n	3f70a <__swsetup_r+0x7a>
   3f6e4:	6b61      	ldr	r1, [r4, #52]	; 0x34
   3f6e6:	b141      	cbz	r1, 3f6fa <__swsetup_r+0x6a>
   3f6e8:	f104 0344 	add.w	r3, r4, #68	; 0x44
   3f6ec:	4299      	cmp	r1, r3
   3f6ee:	d002      	beq.n	3f6f6 <__swsetup_r+0x66>
   3f6f0:	4630      	mov	r0, r6
   3f6f2:	f000 fa79 	bl	3fbe8 <_free_r>
   3f6f6:	2300      	movs	r3, #0
   3f6f8:	6363      	str	r3, [r4, #52]	; 0x34
   3f6fa:	89a3      	ldrh	r3, [r4, #12]
   3f6fc:	f023 0324 	bic.w	r3, r3, #36	; 0x24
   3f700:	81a3      	strh	r3, [r4, #12]
   3f702:	2300      	movs	r3, #0
   3f704:	6063      	str	r3, [r4, #4]
   3f706:	6923      	ldr	r3, [r4, #16]
   3f708:	6023      	str	r3, [r4, #0]
   3f70a:	89a3      	ldrh	r3, [r4, #12]
   3f70c:	f043 0308 	orr.w	r3, r3, #8
   3f710:	81a3      	strh	r3, [r4, #12]
   3f712:	6923      	ldr	r3, [r4, #16]
   3f714:	b94b      	cbnz	r3, 3f72a <__swsetup_r+0x9a>
   3f716:	89a3      	ldrh	r3, [r4, #12]
   3f718:	f403 7320 	and.w	r3, r3, #640	; 0x280
   3f71c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   3f720:	d003      	beq.n	3f72a <__swsetup_r+0x9a>
   3f722:	4621      	mov	r1, r4
   3f724:	4630      	mov	r0, r6
   3f726:	f000 f9c9 	bl	3fabc <__smakebuf_r>
   3f72a:	89a2      	ldrh	r2, [r4, #12]
   3f72c:	f012 0301 	ands.w	r3, r2, #1
   3f730:	d00c      	beq.n	3f74c <__swsetup_r+0xbc>
   3f732:	2300      	movs	r3, #0
   3f734:	60a3      	str	r3, [r4, #8]
   3f736:	6963      	ldr	r3, [r4, #20]
   3f738:	425b      	negs	r3, r3
   3f73a:	61a3      	str	r3, [r4, #24]
   3f73c:	6923      	ldr	r3, [r4, #16]
   3f73e:	b953      	cbnz	r3, 3f756 <__swsetup_r+0xc6>
   3f740:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   3f744:	f013 0080 	ands.w	r0, r3, #128	; 0x80
   3f748:	d1ba      	bne.n	3f6c0 <__swsetup_r+0x30>
   3f74a:	bd70      	pop	{r4, r5, r6, pc}
   3f74c:	0792      	lsls	r2, r2, #30
   3f74e:	bf58      	it	pl
   3f750:	6963      	ldrpl	r3, [r4, #20]
   3f752:	60a3      	str	r3, [r4, #8]
   3f754:	e7f2      	b.n	3f73c <__swsetup_r+0xac>
   3f756:	2000      	movs	r0, #0
   3f758:	e7f7      	b.n	3f74a <__swsetup_r+0xba>
   3f75a:	bf00      	nop
   3f75c:	200324dc 	.word	0x200324dc
   3f760:	000474a0 	.word	0x000474a0
   3f764:	000474c0 	.word	0x000474c0
   3f768:	00047480 	.word	0x00047480

0003f76c <__chk_fail>:
   3f76c:	b500      	push	{lr}
   3f76e:	b08d      	sub	sp, #52	; 0x34
   3f770:	4b0f      	ldr	r3, [pc, #60]	; (3f7b0 <__chk_fail+0x44>)
   3f772:	466a      	mov	r2, sp
   3f774:	f103 0628 	add.w	r6, r3, #40	; 0x28
   3f778:	4615      	mov	r5, r2
   3f77a:	6818      	ldr	r0, [r3, #0]
   3f77c:	3308      	adds	r3, #8
   3f77e:	f853 1c04 	ldr.w	r1, [r3, #-4]
   3f782:	4614      	mov	r4, r2
   3f784:	42b3      	cmp	r3, r6
   3f786:	c403      	stmia	r4!, {r0, r1}
   3f788:	4622      	mov	r2, r4
   3f78a:	d1f6      	bne.n	3f77a <__chk_fail+0xe>
   3f78c:	6818      	ldr	r0, [r3, #0]
   3f78e:	889b      	ldrh	r3, [r3, #4]
   3f790:	6020      	str	r0, [r4, #0]
   3f792:	4628      	mov	r0, r5
   3f794:	80a3      	strh	r3, [r4, #4]
   3f796:	f7dd fcbf 	bl	1d118 <strlen>
   3f79a:	4629      	mov	r1, r5
   3f79c:	4602      	mov	r2, r0
   3f79e:	2002      	movs	r0, #2
   3f7a0:	f003 fa43 	bl	42c2a <_write>
   3f7a4:	2006      	movs	r0, #6
   3f7a6:	f000 fbcf 	bl	3ff48 <raise>
   3f7aa:	207f      	movs	r0, #127	; 0x7f
   3f7ac:	f7e7 ff60 	bl	27670 <_exit>
   3f7b0:	0004d996 	.word	0x0004d996

0003f7b4 <__sflush_r>:
   3f7b4:	898a      	ldrh	r2, [r1, #12]
   3f7b6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   3f7ba:	4605      	mov	r5, r0
   3f7bc:	0710      	lsls	r0, r2, #28
   3f7be:	460c      	mov	r4, r1
   3f7c0:	d458      	bmi.n	3f874 <__sflush_r+0xc0>
   3f7c2:	684b      	ldr	r3, [r1, #4]
   3f7c4:	2b00      	cmp	r3, #0
   3f7c6:	dc05      	bgt.n	3f7d4 <__sflush_r+0x20>
   3f7c8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
   3f7ca:	2b00      	cmp	r3, #0
   3f7cc:	dc02      	bgt.n	3f7d4 <__sflush_r+0x20>
   3f7ce:	2000      	movs	r0, #0
   3f7d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   3f7d4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
   3f7d6:	2e00      	cmp	r6, #0
   3f7d8:	d0f9      	beq.n	3f7ce <__sflush_r+0x1a>
   3f7da:	2300      	movs	r3, #0
   3f7dc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
   3f7e0:	682f      	ldr	r7, [r5, #0]
   3f7e2:	602b      	str	r3, [r5, #0]
   3f7e4:	d032      	beq.n	3f84c <__sflush_r+0x98>
   3f7e6:	6d60      	ldr	r0, [r4, #84]	; 0x54
   3f7e8:	89a3      	ldrh	r3, [r4, #12]
   3f7ea:	075a      	lsls	r2, r3, #29
   3f7ec:	d505      	bpl.n	3f7fa <__sflush_r+0x46>
   3f7ee:	6863      	ldr	r3, [r4, #4]
   3f7f0:	1ac0      	subs	r0, r0, r3
   3f7f2:	6b63      	ldr	r3, [r4, #52]	; 0x34
   3f7f4:	b10b      	cbz	r3, 3f7fa <__sflush_r+0x46>
   3f7f6:	6c23      	ldr	r3, [r4, #64]	; 0x40
   3f7f8:	1ac0      	subs	r0, r0, r3
   3f7fa:	2300      	movs	r3, #0
   3f7fc:	4602      	mov	r2, r0
   3f7fe:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
   3f800:	4628      	mov	r0, r5
   3f802:	6a21      	ldr	r1, [r4, #32]
   3f804:	47b0      	blx	r6
   3f806:	1c43      	adds	r3, r0, #1
   3f808:	89a3      	ldrh	r3, [r4, #12]
   3f80a:	d106      	bne.n	3f81a <__sflush_r+0x66>
   3f80c:	6829      	ldr	r1, [r5, #0]
   3f80e:	291d      	cmp	r1, #29
   3f810:	d82c      	bhi.n	3f86c <__sflush_r+0xb8>
   3f812:	4a29      	ldr	r2, [pc, #164]	; (3f8b8 <__sflush_r+0x104>)
   3f814:	40ca      	lsrs	r2, r1
   3f816:	07d6      	lsls	r6, r2, #31
   3f818:	d528      	bpl.n	3f86c <__sflush_r+0xb8>
   3f81a:	2200      	movs	r2, #0
   3f81c:	04d9      	lsls	r1, r3, #19
   3f81e:	6062      	str	r2, [r4, #4]
   3f820:	6922      	ldr	r2, [r4, #16]
   3f822:	6022      	str	r2, [r4, #0]
   3f824:	d504      	bpl.n	3f830 <__sflush_r+0x7c>
   3f826:	1c42      	adds	r2, r0, #1
   3f828:	d101      	bne.n	3f82e <__sflush_r+0x7a>
   3f82a:	682b      	ldr	r3, [r5, #0]
   3f82c:	b903      	cbnz	r3, 3f830 <__sflush_r+0x7c>
   3f82e:	6560      	str	r0, [r4, #84]	; 0x54
   3f830:	6b61      	ldr	r1, [r4, #52]	; 0x34
   3f832:	602f      	str	r7, [r5, #0]
   3f834:	2900      	cmp	r1, #0
   3f836:	d0ca      	beq.n	3f7ce <__sflush_r+0x1a>
   3f838:	f104 0344 	add.w	r3, r4, #68	; 0x44
   3f83c:	4299      	cmp	r1, r3
   3f83e:	d002      	beq.n	3f846 <__sflush_r+0x92>
   3f840:	4628      	mov	r0, r5
   3f842:	f000 f9d1 	bl	3fbe8 <_free_r>
   3f846:	2000      	movs	r0, #0
   3f848:	6360      	str	r0, [r4, #52]	; 0x34
   3f84a:	e7c1      	b.n	3f7d0 <__sflush_r+0x1c>
   3f84c:	6a21      	ldr	r1, [r4, #32]
   3f84e:	2301      	movs	r3, #1
   3f850:	4628      	mov	r0, r5
   3f852:	47b0      	blx	r6
   3f854:	1c41      	adds	r1, r0, #1
   3f856:	d1c7      	bne.n	3f7e8 <__sflush_r+0x34>
   3f858:	682b      	ldr	r3, [r5, #0]
   3f85a:	2b00      	cmp	r3, #0
   3f85c:	d0c4      	beq.n	3f7e8 <__sflush_r+0x34>
   3f85e:	2b1d      	cmp	r3, #29
   3f860:	d001      	beq.n	3f866 <__sflush_r+0xb2>
   3f862:	2b16      	cmp	r3, #22
   3f864:	d101      	bne.n	3f86a <__sflush_r+0xb6>
   3f866:	602f      	str	r7, [r5, #0]
   3f868:	e7b1      	b.n	3f7ce <__sflush_r+0x1a>
   3f86a:	89a3      	ldrh	r3, [r4, #12]
   3f86c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   3f870:	81a3      	strh	r3, [r4, #12]
   3f872:	e7ad      	b.n	3f7d0 <__sflush_r+0x1c>
   3f874:	690f      	ldr	r7, [r1, #16]
   3f876:	2f00      	cmp	r7, #0
   3f878:	d0a9      	beq.n	3f7ce <__sflush_r+0x1a>
   3f87a:	0793      	lsls	r3, r2, #30
   3f87c:	680e      	ldr	r6, [r1, #0]
   3f87e:	600f      	str	r7, [r1, #0]
   3f880:	bf0c      	ite	eq
   3f882:	694b      	ldreq	r3, [r1, #20]
   3f884:	2300      	movne	r3, #0
   3f886:	eba6 0807 	sub.w	r8, r6, r7
   3f88a:	608b      	str	r3, [r1, #8]
   3f88c:	f1b8 0f00 	cmp.w	r8, #0
   3f890:	dd9d      	ble.n	3f7ce <__sflush_r+0x1a>
   3f892:	4643      	mov	r3, r8
   3f894:	463a      	mov	r2, r7
   3f896:	6a21      	ldr	r1, [r4, #32]
   3f898:	4628      	mov	r0, r5
   3f89a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
   3f89c:	47b0      	blx	r6
   3f89e:	2800      	cmp	r0, #0
   3f8a0:	dc06      	bgt.n	3f8b0 <__sflush_r+0xfc>
   3f8a2:	89a3      	ldrh	r3, [r4, #12]
   3f8a4:	f04f 30ff 	mov.w	r0, #4294967295
   3f8a8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   3f8ac:	81a3      	strh	r3, [r4, #12]
   3f8ae:	e78f      	b.n	3f7d0 <__sflush_r+0x1c>
   3f8b0:	4407      	add	r7, r0
   3f8b2:	eba8 0800 	sub.w	r8, r8, r0
   3f8b6:	e7e9      	b.n	3f88c <__sflush_r+0xd8>
   3f8b8:	20400001 	.word	0x20400001

0003f8bc <_fflush_r>:
   3f8bc:	b538      	push	{r3, r4, r5, lr}
   3f8be:	690b      	ldr	r3, [r1, #16]
   3f8c0:	4605      	mov	r5, r0
   3f8c2:	460c      	mov	r4, r1
   3f8c4:	b913      	cbnz	r3, 3f8cc <_fflush_r+0x10>
   3f8c6:	2500      	movs	r5, #0
   3f8c8:	4628      	mov	r0, r5
   3f8ca:	bd38      	pop	{r3, r4, r5, pc}
   3f8cc:	b118      	cbz	r0, 3f8d6 <_fflush_r+0x1a>
   3f8ce:	6983      	ldr	r3, [r0, #24]
   3f8d0:	b90b      	cbnz	r3, 3f8d6 <_fflush_r+0x1a>
   3f8d2:	f000 f871 	bl	3f9b8 <__sinit>
   3f8d6:	4b14      	ldr	r3, [pc, #80]	; (3f928 <_fflush_r+0x6c>)
   3f8d8:	429c      	cmp	r4, r3
   3f8da:	d11b      	bne.n	3f914 <_fflush_r+0x58>
   3f8dc:	686c      	ldr	r4, [r5, #4]
   3f8de:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   3f8e2:	2b00      	cmp	r3, #0
   3f8e4:	d0ef      	beq.n	3f8c6 <_fflush_r+0xa>
   3f8e6:	6e62      	ldr	r2, [r4, #100]	; 0x64
   3f8e8:	07d0      	lsls	r0, r2, #31
   3f8ea:	d404      	bmi.n	3f8f6 <_fflush_r+0x3a>
   3f8ec:	0599      	lsls	r1, r3, #22
   3f8ee:	d402      	bmi.n	3f8f6 <_fflush_r+0x3a>
   3f8f0:	6da0      	ldr	r0, [r4, #88]	; 0x58
   3f8f2:	f005 fd4f 	bl	45394 <__retarget_lock_acquire_recursive>
   3f8f6:	4628      	mov	r0, r5
   3f8f8:	4621      	mov	r1, r4
   3f8fa:	f7ff ff5b 	bl	3f7b4 <__sflush_r>
   3f8fe:	6e63      	ldr	r3, [r4, #100]	; 0x64
   3f900:	4605      	mov	r5, r0
   3f902:	07da      	lsls	r2, r3, #31
   3f904:	d4e0      	bmi.n	3f8c8 <_fflush_r+0xc>
   3f906:	89a3      	ldrh	r3, [r4, #12]
   3f908:	059b      	lsls	r3, r3, #22
   3f90a:	d4dd      	bmi.n	3f8c8 <_fflush_r+0xc>
   3f90c:	6da0      	ldr	r0, [r4, #88]	; 0x58
   3f90e:	f005 fd42 	bl	45396 <__retarget_lock_release_recursive>
   3f912:	e7d9      	b.n	3f8c8 <_fflush_r+0xc>
   3f914:	4b05      	ldr	r3, [pc, #20]	; (3f92c <_fflush_r+0x70>)
   3f916:	429c      	cmp	r4, r3
   3f918:	d101      	bne.n	3f91e <_fflush_r+0x62>
   3f91a:	68ac      	ldr	r4, [r5, #8]
   3f91c:	e7df      	b.n	3f8de <_fflush_r+0x22>
   3f91e:	4b04      	ldr	r3, [pc, #16]	; (3f930 <_fflush_r+0x74>)
   3f920:	429c      	cmp	r4, r3
   3f922:	bf08      	it	eq
   3f924:	68ec      	ldreq	r4, [r5, #12]
   3f926:	e7da      	b.n	3f8de <_fflush_r+0x22>
   3f928:	000474a0 	.word	0x000474a0
   3f92c:	000474c0 	.word	0x000474c0
   3f930:	00047480 	.word	0x00047480

0003f934 <std>:
   3f934:	2300      	movs	r3, #0
   3f936:	b510      	push	{r4, lr}
   3f938:	4604      	mov	r4, r0
   3f93a:	6083      	str	r3, [r0, #8]
   3f93c:	8181      	strh	r1, [r0, #12]
   3f93e:	4619      	mov	r1, r3
   3f940:	6643      	str	r3, [r0, #100]	; 0x64
   3f942:	81c2      	strh	r2, [r0, #14]
   3f944:	2208      	movs	r2, #8
   3f946:	6183      	str	r3, [r0, #24]
   3f948:	e9c0 3300 	strd	r3, r3, [r0]
   3f94c:	e9c0 3304 	strd	r3, r3, [r0, #16]
   3f950:	305c      	adds	r0, #92	; 0x5c
   3f952:	f005 fab7 	bl	44ec4 <memset>
   3f956:	4b05      	ldr	r3, [pc, #20]	; (3f96c <std+0x38>)
   3f958:	6224      	str	r4, [r4, #32]
   3f95a:	6263      	str	r3, [r4, #36]	; 0x24
   3f95c:	4b04      	ldr	r3, [pc, #16]	; (3f970 <std+0x3c>)
   3f95e:	62a3      	str	r3, [r4, #40]	; 0x28
   3f960:	4b04      	ldr	r3, [pc, #16]	; (3f974 <std+0x40>)
   3f962:	62e3      	str	r3, [r4, #44]	; 0x2c
   3f964:	4b04      	ldr	r3, [pc, #16]	; (3f978 <std+0x44>)
   3f966:	6323      	str	r3, [r4, #48]	; 0x30
   3f968:	bd10      	pop	{r4, pc}
   3f96a:	bf00      	nop
   3f96c:	00045a69 	.word	0x00045a69
   3f970:	00045a8b 	.word	0x00045a8b
   3f974:	00045ac3 	.word	0x00045ac3
   3f978:	00045ae7 	.word	0x00045ae7

0003f97c <_cleanup_r>:
   3f97c:	4901      	ldr	r1, [pc, #4]	; (3f984 <_cleanup_r+0x8>)
   3f97e:	f005 bcea 	b.w	45356 <_fwalk_reent>
   3f982:	bf00      	nop
   3f984:	0003f8bd 	.word	0x0003f8bd

0003f988 <__sfp_lock_acquire>:
   3f988:	4801      	ldr	r0, [pc, #4]	; (3f990 <__sfp_lock_acquire+0x8>)
   3f98a:	f005 bd03 	b.w	45394 <__retarget_lock_acquire_recursive>
   3f98e:	bf00      	nop
   3f990:	2002b63c 	.word	0x2002b63c

0003f994 <__sfp_lock_release>:
   3f994:	4801      	ldr	r0, [pc, #4]	; (3f99c <__sfp_lock_release+0x8>)
   3f996:	f005 bcfe 	b.w	45396 <__retarget_lock_release_recursive>
   3f99a:	bf00      	nop
   3f99c:	2002b63c 	.word	0x2002b63c

0003f9a0 <__sinit_lock_acquire>:
   3f9a0:	4801      	ldr	r0, [pc, #4]	; (3f9a8 <__sinit_lock_acquire+0x8>)
   3f9a2:	f005 bcf7 	b.w	45394 <__retarget_lock_acquire_recursive>
   3f9a6:	bf00      	nop
   3f9a8:	2002b637 	.word	0x2002b637

0003f9ac <__sinit_lock_release>:
   3f9ac:	4801      	ldr	r0, [pc, #4]	; (3f9b4 <__sinit_lock_release+0x8>)
   3f9ae:	f005 bcf2 	b.w	45396 <__retarget_lock_release_recursive>
   3f9b2:	bf00      	nop
   3f9b4:	2002b637 	.word	0x2002b637

0003f9b8 <__sinit>:
   3f9b8:	b510      	push	{r4, lr}
   3f9ba:	4604      	mov	r4, r0
   3f9bc:	f7ff fff0 	bl	3f9a0 <__sinit_lock_acquire>
   3f9c0:	69a3      	ldr	r3, [r4, #24]
   3f9c2:	b11b      	cbz	r3, 3f9cc <__sinit+0x14>
   3f9c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   3f9c8:	f7ff bff0 	b.w	3f9ac <__sinit_lock_release>
   3f9cc:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
   3f9d0:	6523      	str	r3, [r4, #80]	; 0x50
   3f9d2:	4620      	mov	r0, r4
   3f9d4:	4b12      	ldr	r3, [pc, #72]	; (3fa20 <__sinit+0x68>)
   3f9d6:	4a13      	ldr	r2, [pc, #76]	; (3fa24 <__sinit+0x6c>)
   3f9d8:	681b      	ldr	r3, [r3, #0]
   3f9da:	62a2      	str	r2, [r4, #40]	; 0x28
   3f9dc:	42a3      	cmp	r3, r4
   3f9de:	bf04      	itt	eq
   3f9e0:	2301      	moveq	r3, #1
   3f9e2:	61a3      	streq	r3, [r4, #24]
   3f9e4:	f000 f820 	bl	3fa28 <__sfp>
   3f9e8:	6060      	str	r0, [r4, #4]
   3f9ea:	4620      	mov	r0, r4
   3f9ec:	f000 f81c 	bl	3fa28 <__sfp>
   3f9f0:	60a0      	str	r0, [r4, #8]
   3f9f2:	4620      	mov	r0, r4
   3f9f4:	f000 f818 	bl	3fa28 <__sfp>
   3f9f8:	2200      	movs	r2, #0
   3f9fa:	60e0      	str	r0, [r4, #12]
   3f9fc:	2104      	movs	r1, #4
   3f9fe:	6860      	ldr	r0, [r4, #4]
   3fa00:	f7ff ff98 	bl	3f934 <std>
   3fa04:	2201      	movs	r2, #1
   3fa06:	2109      	movs	r1, #9
   3fa08:	68a0      	ldr	r0, [r4, #8]
   3fa0a:	f7ff ff93 	bl	3f934 <std>
   3fa0e:	2202      	movs	r2, #2
   3fa10:	2112      	movs	r1, #18
   3fa12:	68e0      	ldr	r0, [r4, #12]
   3fa14:	f7ff ff8e 	bl	3f934 <std>
   3fa18:	2301      	movs	r3, #1
   3fa1a:	61a3      	str	r3, [r4, #24]
   3fa1c:	e7d2      	b.n	3f9c4 <__sinit+0xc>
   3fa1e:	bf00      	nop
   3fa20:	0004747c 	.word	0x0004747c
   3fa24:	0003f97d 	.word	0x0003f97d

0003fa28 <__sfp>:
   3fa28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   3fa2a:	4607      	mov	r7, r0
   3fa2c:	f7ff ffac 	bl	3f988 <__sfp_lock_acquire>
   3fa30:	4b1e      	ldr	r3, [pc, #120]	; (3faac <__sfp+0x84>)
   3fa32:	681e      	ldr	r6, [r3, #0]
   3fa34:	69b3      	ldr	r3, [r6, #24]
   3fa36:	b913      	cbnz	r3, 3fa3e <__sfp+0x16>
   3fa38:	4630      	mov	r0, r6
   3fa3a:	f7ff ffbd 	bl	3f9b8 <__sinit>
   3fa3e:	3648      	adds	r6, #72	; 0x48
   3fa40:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
   3fa44:	3b01      	subs	r3, #1
   3fa46:	d503      	bpl.n	3fa50 <__sfp+0x28>
   3fa48:	6833      	ldr	r3, [r6, #0]
   3fa4a:	b30b      	cbz	r3, 3fa90 <__sfp+0x68>
   3fa4c:	6836      	ldr	r6, [r6, #0]
   3fa4e:	e7f7      	b.n	3fa40 <__sfp+0x18>
   3fa50:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
   3fa54:	b9d5      	cbnz	r5, 3fa8c <__sfp+0x64>
   3fa56:	4b16      	ldr	r3, [pc, #88]	; (3fab0 <__sfp+0x88>)
   3fa58:	f104 0058 	add.w	r0, r4, #88	; 0x58
   3fa5c:	6665      	str	r5, [r4, #100]	; 0x64
   3fa5e:	60e3      	str	r3, [r4, #12]
   3fa60:	f005 fc97 	bl	45392 <__retarget_lock_init_recursive>
   3fa64:	f7ff ff96 	bl	3f994 <__sfp_lock_release>
   3fa68:	6025      	str	r5, [r4, #0]
   3fa6a:	61a5      	str	r5, [r4, #24]
   3fa6c:	2208      	movs	r2, #8
   3fa6e:	4629      	mov	r1, r5
   3fa70:	f104 005c 	add.w	r0, r4, #92	; 0x5c
   3fa74:	e9c4 5501 	strd	r5, r5, [r4, #4]
   3fa78:	e9c4 5504 	strd	r5, r5, [r4, #16]
   3fa7c:	f005 fa22 	bl	44ec4 <memset>
   3fa80:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
   3fa84:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
   3fa88:	4620      	mov	r0, r4
   3fa8a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   3fa8c:	3468      	adds	r4, #104	; 0x68
   3fa8e:	e7d9      	b.n	3fa44 <__sfp+0x1c>
   3fa90:	2104      	movs	r1, #4
   3fa92:	4638      	mov	r0, r7
   3fa94:	f005 fc49 	bl	4532a <__sfmoreglue>
   3fa98:	4604      	mov	r4, r0
   3fa9a:	6030      	str	r0, [r6, #0]
   3fa9c:	2800      	cmp	r0, #0
   3fa9e:	d1d5      	bne.n	3fa4c <__sfp+0x24>
   3faa0:	f7ff ff78 	bl	3f994 <__sfp_lock_release>
   3faa4:	230c      	movs	r3, #12
   3faa6:	603b      	str	r3, [r7, #0]
   3faa8:	e7ee      	b.n	3fa88 <__sfp+0x60>
   3faaa:	bf00      	nop
   3faac:	0004747c 	.word	0x0004747c
   3fab0:	ffff0001 	.word	0xffff0001

0003fab4 <_localeconv_r>:
   3fab4:	4800      	ldr	r0, [pc, #0]	; (3fab8 <_localeconv_r+0x4>)
   3fab6:	4770      	bx	lr
   3fab8:	20032630 	.word	0x20032630

0003fabc <__smakebuf_r>:
   3fabc:	898b      	ldrh	r3, [r1, #12]
   3fabe:	b573      	push	{r0, r1, r4, r5, r6, lr}
   3fac0:	079d      	lsls	r5, r3, #30
   3fac2:	4606      	mov	r6, r0
   3fac4:	460c      	mov	r4, r1
   3fac6:	d507      	bpl.n	3fad8 <__smakebuf_r+0x1c>
   3fac8:	f104 0347 	add.w	r3, r4, #71	; 0x47
   3facc:	6023      	str	r3, [r4, #0]
   3face:	6123      	str	r3, [r4, #16]
   3fad0:	2301      	movs	r3, #1
   3fad2:	6163      	str	r3, [r4, #20]
   3fad4:	b002      	add	sp, #8
   3fad6:	bd70      	pop	{r4, r5, r6, pc}
   3fad8:	ab01      	add	r3, sp, #4
   3fada:	466a      	mov	r2, sp
   3fadc:	f005 fc5c 	bl	45398 <__swhatbuf_r>
   3fae0:	9900      	ldr	r1, [sp, #0]
   3fae2:	4605      	mov	r5, r0
   3fae4:	4630      	mov	r0, r6
   3fae6:	f000 f8cd 	bl	3fc84 <_malloc_r>
   3faea:	b948      	cbnz	r0, 3fb00 <__smakebuf_r+0x44>
   3faec:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   3faf0:	059a      	lsls	r2, r3, #22
   3faf2:	d4ef      	bmi.n	3fad4 <__smakebuf_r+0x18>
   3faf4:	f023 0303 	bic.w	r3, r3, #3
   3faf8:	f043 0302 	orr.w	r3, r3, #2
   3fafc:	81a3      	strh	r3, [r4, #12]
   3fafe:	e7e3      	b.n	3fac8 <__smakebuf_r+0xc>
   3fb00:	4b0d      	ldr	r3, [pc, #52]	; (3fb38 <__smakebuf_r+0x7c>)
   3fb02:	62b3      	str	r3, [r6, #40]	; 0x28
   3fb04:	89a3      	ldrh	r3, [r4, #12]
   3fb06:	6020      	str	r0, [r4, #0]
   3fb08:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   3fb0c:	6120      	str	r0, [r4, #16]
   3fb0e:	81a3      	strh	r3, [r4, #12]
   3fb10:	9b00      	ldr	r3, [sp, #0]
   3fb12:	6163      	str	r3, [r4, #20]
   3fb14:	9b01      	ldr	r3, [sp, #4]
   3fb16:	b15b      	cbz	r3, 3fb30 <__smakebuf_r+0x74>
   3fb18:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   3fb1c:	4630      	mov	r0, r6
   3fb1e:	f000 fa61 	bl	3ffe4 <_isatty_r>
   3fb22:	b128      	cbz	r0, 3fb30 <__smakebuf_r+0x74>
   3fb24:	89a3      	ldrh	r3, [r4, #12]
   3fb26:	f023 0303 	bic.w	r3, r3, #3
   3fb2a:	f043 0301 	orr.w	r3, r3, #1
   3fb2e:	81a3      	strh	r3, [r4, #12]
   3fb30:	89a3      	ldrh	r3, [r4, #12]
   3fb32:	431d      	orrs	r5, r3
   3fb34:	81a5      	strh	r5, [r4, #12]
   3fb36:	e7cd      	b.n	3fad4 <__smakebuf_r+0x18>
   3fb38:	0003f97d 	.word	0x0003f97d

0003fb3c <malloc>:
   3fb3c:	4b02      	ldr	r3, [pc, #8]	; (3fb48 <malloc+0xc>)
   3fb3e:	4601      	mov	r1, r0
   3fb40:	6818      	ldr	r0, [r3, #0]
   3fb42:	f000 b89f 	b.w	3fc84 <_malloc_r>
   3fb46:	bf00      	nop
   3fb48:	200324dc 	.word	0x200324dc

0003fb4c <__pow5mult>:
   3fb4c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   3fb50:	4615      	mov	r5, r2
   3fb52:	f012 0203 	ands.w	r2, r2, #3
   3fb56:	4606      	mov	r6, r0
   3fb58:	460f      	mov	r7, r1
   3fb5a:	d007      	beq.n	3fb6c <__pow5mult+0x20>
   3fb5c:	3a01      	subs	r2, #1
   3fb5e:	4c21      	ldr	r4, [pc, #132]	; (3fbe4 <__pow5mult+0x98>)
   3fb60:	2300      	movs	r3, #0
   3fb62:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
   3fb66:	f005 fc86 	bl	45476 <__multadd>
   3fb6a:	4607      	mov	r7, r0
   3fb6c:	10ad      	asrs	r5, r5, #2
   3fb6e:	d035      	beq.n	3fbdc <__pow5mult+0x90>
   3fb70:	6a74      	ldr	r4, [r6, #36]	; 0x24
   3fb72:	b93c      	cbnz	r4, 3fb84 <__pow5mult+0x38>
   3fb74:	2010      	movs	r0, #16
   3fb76:	f7ff ffe1 	bl	3fb3c <malloc>
   3fb7a:	6270      	str	r0, [r6, #36]	; 0x24
   3fb7c:	6004      	str	r4, [r0, #0]
   3fb7e:	60c4      	str	r4, [r0, #12]
   3fb80:	e9c0 4401 	strd	r4, r4, [r0, #4]
   3fb84:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
   3fb88:	f8d8 4008 	ldr.w	r4, [r8, #8]
   3fb8c:	b94c      	cbnz	r4, 3fba2 <__pow5mult+0x56>
   3fb8e:	f240 2171 	movw	r1, #625	; 0x271
   3fb92:	4630      	mov	r0, r6
   3fb94:	f005 fcfc 	bl	45590 <__i2b>
   3fb98:	2300      	movs	r3, #0
   3fb9a:	4604      	mov	r4, r0
   3fb9c:	f8c8 0008 	str.w	r0, [r8, #8]
   3fba0:	6003      	str	r3, [r0, #0]
   3fba2:	f04f 0800 	mov.w	r8, #0
   3fba6:	07eb      	lsls	r3, r5, #31
   3fba8:	d50a      	bpl.n	3fbc0 <__pow5mult+0x74>
   3fbaa:	4639      	mov	r1, r7
   3fbac:	4622      	mov	r2, r4
   3fbae:	4630      	mov	r0, r6
   3fbb0:	f005 fcf7 	bl	455a2 <__multiply>
   3fbb4:	4681      	mov	r9, r0
   3fbb6:	4639      	mov	r1, r7
   3fbb8:	4630      	mov	r0, r6
   3fbba:	464f      	mov	r7, r9
   3fbbc:	f005 fc44 	bl	45448 <_Bfree>
   3fbc0:	106d      	asrs	r5, r5, #1
   3fbc2:	d00b      	beq.n	3fbdc <__pow5mult+0x90>
   3fbc4:	6820      	ldr	r0, [r4, #0]
   3fbc6:	b938      	cbnz	r0, 3fbd8 <__pow5mult+0x8c>
   3fbc8:	4622      	mov	r2, r4
   3fbca:	4621      	mov	r1, r4
   3fbcc:	4630      	mov	r0, r6
   3fbce:	f005 fce8 	bl	455a2 <__multiply>
   3fbd2:	6020      	str	r0, [r4, #0]
   3fbd4:	f8c0 8000 	str.w	r8, [r0]
   3fbd8:	4604      	mov	r4, r0
   3fbda:	e7e4      	b.n	3fba6 <__pow5mult+0x5a>
   3fbdc:	4638      	mov	r0, r7
   3fbde:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   3fbe2:	bf00      	nop
   3fbe4:	000474e0 	.word	0x000474e0

0003fbe8 <_free_r>:
   3fbe8:	b538      	push	{r3, r4, r5, lr}
   3fbea:	4605      	mov	r5, r0
   3fbec:	2900      	cmp	r1, #0
   3fbee:	d045      	beq.n	3fc7c <_free_r+0x94>
   3fbf0:	f851 3c04 	ldr.w	r3, [r1, #-4]
   3fbf4:	1f0c      	subs	r4, r1, #4
   3fbf6:	2b00      	cmp	r3, #0
   3fbf8:	bfb8      	it	lt
   3fbfa:	18e4      	addlt	r4, r4, r3
   3fbfc:	f000 fa14 	bl	40028 <__malloc_lock>
   3fc00:	4a1f      	ldr	r2, [pc, #124]	; (3fc80 <_free_r+0x98>)
   3fc02:	6813      	ldr	r3, [r2, #0]
   3fc04:	4610      	mov	r0, r2
   3fc06:	b933      	cbnz	r3, 3fc16 <_free_r+0x2e>
   3fc08:	6063      	str	r3, [r4, #4]
   3fc0a:	6014      	str	r4, [r2, #0]
   3fc0c:	4628      	mov	r0, r5
   3fc0e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   3fc12:	f000 ba0f 	b.w	40034 <__malloc_unlock>
   3fc16:	42a3      	cmp	r3, r4
   3fc18:	d90c      	bls.n	3fc34 <_free_r+0x4c>
   3fc1a:	6821      	ldr	r1, [r4, #0]
   3fc1c:	1862      	adds	r2, r4, r1
   3fc1e:	4293      	cmp	r3, r2
   3fc20:	bf02      	ittt	eq
   3fc22:	681a      	ldreq	r2, [r3, #0]
   3fc24:	685b      	ldreq	r3, [r3, #4]
   3fc26:	1852      	addeq	r2, r2, r1
   3fc28:	6063      	str	r3, [r4, #4]
   3fc2a:	bf08      	it	eq
   3fc2c:	6022      	streq	r2, [r4, #0]
   3fc2e:	6004      	str	r4, [r0, #0]
   3fc30:	e7ec      	b.n	3fc0c <_free_r+0x24>
   3fc32:	4613      	mov	r3, r2
   3fc34:	685a      	ldr	r2, [r3, #4]
   3fc36:	b10a      	cbz	r2, 3fc3c <_free_r+0x54>
   3fc38:	42a2      	cmp	r2, r4
   3fc3a:	d9fa      	bls.n	3fc32 <_free_r+0x4a>
   3fc3c:	6819      	ldr	r1, [r3, #0]
   3fc3e:	1858      	adds	r0, r3, r1
   3fc40:	42a0      	cmp	r0, r4
   3fc42:	d10b      	bne.n	3fc5c <_free_r+0x74>
   3fc44:	6820      	ldr	r0, [r4, #0]
   3fc46:	4401      	add	r1, r0
   3fc48:	1858      	adds	r0, r3, r1
   3fc4a:	6019      	str	r1, [r3, #0]
   3fc4c:	4282      	cmp	r2, r0
   3fc4e:	d1dd      	bne.n	3fc0c <_free_r+0x24>
   3fc50:	6810      	ldr	r0, [r2, #0]
   3fc52:	6852      	ldr	r2, [r2, #4]
   3fc54:	4401      	add	r1, r0
   3fc56:	605a      	str	r2, [r3, #4]
   3fc58:	6019      	str	r1, [r3, #0]
   3fc5a:	e7d7      	b.n	3fc0c <_free_r+0x24>
   3fc5c:	d902      	bls.n	3fc64 <_free_r+0x7c>
   3fc5e:	230c      	movs	r3, #12
   3fc60:	602b      	str	r3, [r5, #0]
   3fc62:	e7d3      	b.n	3fc0c <_free_r+0x24>
   3fc64:	6820      	ldr	r0, [r4, #0]
   3fc66:	1821      	adds	r1, r4, r0
   3fc68:	428a      	cmp	r2, r1
   3fc6a:	bf02      	ittt	eq
   3fc6c:	6811      	ldreq	r1, [r2, #0]
   3fc6e:	6852      	ldreq	r2, [r2, #4]
   3fc70:	1809      	addeq	r1, r1, r0
   3fc72:	6062      	str	r2, [r4, #4]
   3fc74:	bf08      	it	eq
   3fc76:	6021      	streq	r1, [r4, #0]
   3fc78:	605c      	str	r4, [r3, #4]
   3fc7a:	e7c7      	b.n	3fc0c <_free_r+0x24>
   3fc7c:	bd38      	pop	{r3, r4, r5, pc}
   3fc7e:	bf00      	nop
   3fc80:	2002982c 	.word	0x2002982c

0003fc84 <_malloc_r>:
   3fc84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   3fc86:	1ccd      	adds	r5, r1, #3
   3fc88:	4606      	mov	r6, r0
   3fc8a:	f025 0503 	bic.w	r5, r5, #3
   3fc8e:	3508      	adds	r5, #8
   3fc90:	2d0c      	cmp	r5, #12
   3fc92:	bf38      	it	cc
   3fc94:	250c      	movcc	r5, #12
   3fc96:	2d00      	cmp	r5, #0
   3fc98:	db01      	blt.n	3fc9e <_malloc_r+0x1a>
   3fc9a:	42a9      	cmp	r1, r5
   3fc9c:	d903      	bls.n	3fca6 <_malloc_r+0x22>
   3fc9e:	230c      	movs	r3, #12
   3fca0:	6033      	str	r3, [r6, #0]
   3fca2:	2000      	movs	r0, #0
   3fca4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   3fca6:	f000 f9bf 	bl	40028 <__malloc_lock>
   3fcaa:	4921      	ldr	r1, [pc, #132]	; (3fd30 <_malloc_r+0xac>)
   3fcac:	680a      	ldr	r2, [r1, #0]
   3fcae:	4614      	mov	r4, r2
   3fcb0:	b99c      	cbnz	r4, 3fcda <_malloc_r+0x56>
   3fcb2:	4f20      	ldr	r7, [pc, #128]	; (3fd34 <_malloc_r+0xb0>)
   3fcb4:	683b      	ldr	r3, [r7, #0]
   3fcb6:	b923      	cbnz	r3, 3fcc2 <_malloc_r+0x3e>
   3fcb8:	4621      	mov	r1, r4
   3fcba:	4630      	mov	r0, r6
   3fcbc:	f000 f934 	bl	3ff28 <_sbrk_r>
   3fcc0:	6038      	str	r0, [r7, #0]
   3fcc2:	4629      	mov	r1, r5
   3fcc4:	4630      	mov	r0, r6
   3fcc6:	f000 f92f 	bl	3ff28 <_sbrk_r>
   3fcca:	1c43      	adds	r3, r0, #1
   3fccc:	d123      	bne.n	3fd16 <_malloc_r+0x92>
   3fcce:	230c      	movs	r3, #12
   3fcd0:	4630      	mov	r0, r6
   3fcd2:	6033      	str	r3, [r6, #0]
   3fcd4:	f000 f9ae 	bl	40034 <__malloc_unlock>
   3fcd8:	e7e3      	b.n	3fca2 <_malloc_r+0x1e>
   3fcda:	6823      	ldr	r3, [r4, #0]
   3fcdc:	1b5b      	subs	r3, r3, r5
   3fcde:	d417      	bmi.n	3fd10 <_malloc_r+0x8c>
   3fce0:	2b0b      	cmp	r3, #11
   3fce2:	d903      	bls.n	3fcec <_malloc_r+0x68>
   3fce4:	6023      	str	r3, [r4, #0]
   3fce6:	441c      	add	r4, r3
   3fce8:	6025      	str	r5, [r4, #0]
   3fcea:	e004      	b.n	3fcf6 <_malloc_r+0x72>
   3fcec:	6863      	ldr	r3, [r4, #4]
   3fcee:	42a2      	cmp	r2, r4
   3fcf0:	bf0c      	ite	eq
   3fcf2:	600b      	streq	r3, [r1, #0]
   3fcf4:	6053      	strne	r3, [r2, #4]
   3fcf6:	4630      	mov	r0, r6
   3fcf8:	f000 f99c 	bl	40034 <__malloc_unlock>
   3fcfc:	f104 000b 	add.w	r0, r4, #11
   3fd00:	1d23      	adds	r3, r4, #4
   3fd02:	f020 0007 	bic.w	r0, r0, #7
   3fd06:	1ac2      	subs	r2, r0, r3
   3fd08:	d0cc      	beq.n	3fca4 <_malloc_r+0x20>
   3fd0a:	1a1b      	subs	r3, r3, r0
   3fd0c:	50a3      	str	r3, [r4, r2]
   3fd0e:	e7c9      	b.n	3fca4 <_malloc_r+0x20>
   3fd10:	4622      	mov	r2, r4
   3fd12:	6864      	ldr	r4, [r4, #4]
   3fd14:	e7cc      	b.n	3fcb0 <_malloc_r+0x2c>
   3fd16:	1cc4      	adds	r4, r0, #3
   3fd18:	f024 0403 	bic.w	r4, r4, #3
   3fd1c:	42a0      	cmp	r0, r4
   3fd1e:	d0e3      	beq.n	3fce8 <_malloc_r+0x64>
   3fd20:	1a21      	subs	r1, r4, r0
   3fd22:	4630      	mov	r0, r6
   3fd24:	f000 f900 	bl	3ff28 <_sbrk_r>
   3fd28:	3001      	adds	r0, #1
   3fd2a:	d1dd      	bne.n	3fce8 <_malloc_r+0x64>
   3fd2c:	e7cf      	b.n	3fcce <_malloc_r+0x4a>
   3fd2e:	bf00      	nop
   3fd30:	2002982c 	.word	0x2002982c
   3fd34:	20029830 	.word	0x20029830

0003fd38 <_svfiprintf_r>:
   3fd38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   3fd3c:	461e      	mov	r6, r3
   3fd3e:	898b      	ldrh	r3, [r1, #12]
   3fd40:	b09d      	sub	sp, #116	; 0x74
   3fd42:	4607      	mov	r7, r0
   3fd44:	061b      	lsls	r3, r3, #24
   3fd46:	460d      	mov	r5, r1
   3fd48:	4614      	mov	r4, r2
   3fd4a:	d50e      	bpl.n	3fd6a <_svfiprintf_r+0x32>
   3fd4c:	690b      	ldr	r3, [r1, #16]
   3fd4e:	b963      	cbnz	r3, 3fd6a <_svfiprintf_r+0x32>
   3fd50:	2140      	movs	r1, #64	; 0x40
   3fd52:	f7ff ff97 	bl	3fc84 <_malloc_r>
   3fd56:	6028      	str	r0, [r5, #0]
   3fd58:	6128      	str	r0, [r5, #16]
   3fd5a:	b920      	cbnz	r0, 3fd66 <_svfiprintf_r+0x2e>
   3fd5c:	230c      	movs	r3, #12
   3fd5e:	603b      	str	r3, [r7, #0]
   3fd60:	f04f 30ff 	mov.w	r0, #4294967295
   3fd64:	e0c9      	b.n	3fefa <_svfiprintf_r+0x1c2>
   3fd66:	2340      	movs	r3, #64	; 0x40
   3fd68:	616b      	str	r3, [r5, #20]
   3fd6a:	2300      	movs	r3, #0
   3fd6c:	f8df 91a4 	ldr.w	r9, [pc, #420]	; 3ff14 <_svfiprintf_r+0x1dc>
   3fd70:	f04f 0a01 	mov.w	sl, #1
   3fd74:	9603      	str	r6, [sp, #12]
   3fd76:	9309      	str	r3, [sp, #36]	; 0x24
   3fd78:	2320      	movs	r3, #32
   3fd7a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
   3fd7e:	2330      	movs	r3, #48	; 0x30
   3fd80:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
   3fd84:	4623      	mov	r3, r4
   3fd86:	461e      	mov	r6, r3
   3fd88:	f813 2b01 	ldrb.w	r2, [r3], #1
   3fd8c:	b10a      	cbz	r2, 3fd92 <_svfiprintf_r+0x5a>
   3fd8e:	2a25      	cmp	r2, #37	; 0x25
   3fd90:	d1f9      	bne.n	3fd86 <_svfiprintf_r+0x4e>
   3fd92:	ebb6 0b04 	subs.w	fp, r6, r4
   3fd96:	d00b      	beq.n	3fdb0 <_svfiprintf_r+0x78>
   3fd98:	465b      	mov	r3, fp
   3fd9a:	4622      	mov	r2, r4
   3fd9c:	4629      	mov	r1, r5
   3fd9e:	4638      	mov	r0, r7
   3fda0:	f005 fddd 	bl	4595e <__ssputs_r>
   3fda4:	3001      	adds	r0, #1
   3fda6:	f000 80a3 	beq.w	3fef0 <_svfiprintf_r+0x1b8>
   3fdaa:	9b09      	ldr	r3, [sp, #36]	; 0x24
   3fdac:	445b      	add	r3, fp
   3fdae:	9309      	str	r3, [sp, #36]	; 0x24
   3fdb0:	7833      	ldrb	r3, [r6, #0]
   3fdb2:	2b00      	cmp	r3, #0
   3fdb4:	f000 809c 	beq.w	3fef0 <_svfiprintf_r+0x1b8>
   3fdb8:	2300      	movs	r3, #0
   3fdba:	f04f 32ff 	mov.w	r2, #4294967295
   3fdbe:	3601      	adds	r6, #1
   3fdc0:	9304      	str	r3, [sp, #16]
   3fdc2:	9307      	str	r3, [sp, #28]
   3fdc4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
   3fdc8:	931a      	str	r3, [sp, #104]	; 0x68
   3fdca:	e9cd 2305 	strd	r2, r3, [sp, #20]
   3fdce:	4634      	mov	r4, r6
   3fdd0:	2205      	movs	r2, #5
   3fdd2:	4850      	ldr	r0, [pc, #320]	; (3ff14 <_svfiprintf_r+0x1dc>)
   3fdd4:	f814 1b01 	ldrb.w	r1, [r4], #1
   3fdd8:	f005 f81e 	bl	44e18 <memchr>
   3fddc:	9b04      	ldr	r3, [sp, #16]
   3fdde:	b9c0      	cbnz	r0, 3fe12 <_svfiprintf_r+0xda>
   3fde0:	06d9      	lsls	r1, r3, #27
   3fde2:	bf44      	itt	mi
   3fde4:	2220      	movmi	r2, #32
   3fde6:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
   3fdea:	071a      	lsls	r2, r3, #28
   3fdec:	bf44      	itt	mi
   3fdee:	222b      	movmi	r2, #43	; 0x2b
   3fdf0:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
   3fdf4:	7832      	ldrb	r2, [r6, #0]
   3fdf6:	2a2a      	cmp	r2, #42	; 0x2a
   3fdf8:	d013      	beq.n	3fe22 <_svfiprintf_r+0xea>
   3fdfa:	4634      	mov	r4, r6
   3fdfc:	9a07      	ldr	r2, [sp, #28]
   3fdfe:	2000      	movs	r0, #0
   3fe00:	260a      	movs	r6, #10
   3fe02:	4621      	mov	r1, r4
   3fe04:	f811 3b01 	ldrb.w	r3, [r1], #1
   3fe08:	3b30      	subs	r3, #48	; 0x30
   3fe0a:	2b09      	cmp	r3, #9
   3fe0c:	d94b      	bls.n	3fea6 <_svfiprintf_r+0x16e>
   3fe0e:	b970      	cbnz	r0, 3fe2e <_svfiprintf_r+0xf6>
   3fe10:	e014      	b.n	3fe3c <_svfiprintf_r+0x104>
   3fe12:	eba0 0009 	sub.w	r0, r0, r9
   3fe16:	4626      	mov	r6, r4
   3fe18:	fa0a f000 	lsl.w	r0, sl, r0
   3fe1c:	4318      	orrs	r0, r3
   3fe1e:	9004      	str	r0, [sp, #16]
   3fe20:	e7d5      	b.n	3fdce <_svfiprintf_r+0x96>
   3fe22:	9a03      	ldr	r2, [sp, #12]
   3fe24:	1d11      	adds	r1, r2, #4
   3fe26:	6812      	ldr	r2, [r2, #0]
   3fe28:	2a00      	cmp	r2, #0
   3fe2a:	9103      	str	r1, [sp, #12]
   3fe2c:	db01      	blt.n	3fe32 <_svfiprintf_r+0xfa>
   3fe2e:	9207      	str	r2, [sp, #28]
   3fe30:	e004      	b.n	3fe3c <_svfiprintf_r+0x104>
   3fe32:	4252      	negs	r2, r2
   3fe34:	f043 0302 	orr.w	r3, r3, #2
   3fe38:	9207      	str	r2, [sp, #28]
   3fe3a:	9304      	str	r3, [sp, #16]
   3fe3c:	7823      	ldrb	r3, [r4, #0]
   3fe3e:	2b2e      	cmp	r3, #46	; 0x2e
   3fe40:	d10c      	bne.n	3fe5c <_svfiprintf_r+0x124>
   3fe42:	7863      	ldrb	r3, [r4, #1]
   3fe44:	2b2a      	cmp	r3, #42	; 0x2a
   3fe46:	d133      	bne.n	3feb0 <_svfiprintf_r+0x178>
   3fe48:	9b03      	ldr	r3, [sp, #12]
   3fe4a:	3402      	adds	r4, #2
   3fe4c:	1d1a      	adds	r2, r3, #4
   3fe4e:	681b      	ldr	r3, [r3, #0]
   3fe50:	2b00      	cmp	r3, #0
   3fe52:	9203      	str	r2, [sp, #12]
   3fe54:	bfb8      	it	lt
   3fe56:	f04f 33ff 	movlt.w	r3, #4294967295
   3fe5a:	9305      	str	r3, [sp, #20]
   3fe5c:	4e2e      	ldr	r6, [pc, #184]	; (3ff18 <_svfiprintf_r+0x1e0>)
   3fe5e:	2203      	movs	r2, #3
   3fe60:	7821      	ldrb	r1, [r4, #0]
   3fe62:	4630      	mov	r0, r6
   3fe64:	f004 ffd8 	bl	44e18 <memchr>
   3fe68:	b138      	cbz	r0, 3fe7a <_svfiprintf_r+0x142>
   3fe6a:	2340      	movs	r3, #64	; 0x40
   3fe6c:	1b80      	subs	r0, r0, r6
   3fe6e:	3401      	adds	r4, #1
   3fe70:	fa03 f000 	lsl.w	r0, r3, r0
   3fe74:	9b04      	ldr	r3, [sp, #16]
   3fe76:	4303      	orrs	r3, r0
   3fe78:	9304      	str	r3, [sp, #16]
   3fe7a:	f814 1b01 	ldrb.w	r1, [r4], #1
   3fe7e:	2206      	movs	r2, #6
   3fe80:	4826      	ldr	r0, [pc, #152]	; (3ff1c <_svfiprintf_r+0x1e4>)
   3fe82:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
   3fe86:	f004 ffc7 	bl	44e18 <memchr>
   3fe8a:	2800      	cmp	r0, #0
   3fe8c:	d038      	beq.n	3ff00 <_svfiprintf_r+0x1c8>
   3fe8e:	4b24      	ldr	r3, [pc, #144]	; (3ff20 <_svfiprintf_r+0x1e8>)
   3fe90:	bb13      	cbnz	r3, 3fed8 <_svfiprintf_r+0x1a0>
   3fe92:	9b03      	ldr	r3, [sp, #12]
   3fe94:	3307      	adds	r3, #7
   3fe96:	f023 0307 	bic.w	r3, r3, #7
   3fe9a:	3308      	adds	r3, #8
   3fe9c:	9303      	str	r3, [sp, #12]
   3fe9e:	9b09      	ldr	r3, [sp, #36]	; 0x24
   3fea0:	4443      	add	r3, r8
   3fea2:	9309      	str	r3, [sp, #36]	; 0x24
   3fea4:	e76e      	b.n	3fd84 <_svfiprintf_r+0x4c>
   3fea6:	fb06 3202 	mla	r2, r6, r2, r3
   3feaa:	2001      	movs	r0, #1
   3feac:	460c      	mov	r4, r1
   3feae:	e7a8      	b.n	3fe02 <_svfiprintf_r+0xca>
   3feb0:	2300      	movs	r3, #0
   3feb2:	3401      	adds	r4, #1
   3feb4:	260a      	movs	r6, #10
   3feb6:	4619      	mov	r1, r3
   3feb8:	9305      	str	r3, [sp, #20]
   3feba:	4620      	mov	r0, r4
   3febc:	f810 2b01 	ldrb.w	r2, [r0], #1
   3fec0:	3a30      	subs	r2, #48	; 0x30
   3fec2:	2a09      	cmp	r2, #9
   3fec4:	d903      	bls.n	3fece <_svfiprintf_r+0x196>
   3fec6:	2b00      	cmp	r3, #0
   3fec8:	d0c8      	beq.n	3fe5c <_svfiprintf_r+0x124>
   3feca:	9105      	str	r1, [sp, #20]
   3fecc:	e7c6      	b.n	3fe5c <_svfiprintf_r+0x124>
   3fece:	fb06 2101 	mla	r1, r6, r1, r2
   3fed2:	2301      	movs	r3, #1
   3fed4:	4604      	mov	r4, r0
   3fed6:	e7f0      	b.n	3feba <_svfiprintf_r+0x182>
   3fed8:	ab03      	add	r3, sp, #12
   3feda:	462a      	mov	r2, r5
   3fedc:	a904      	add	r1, sp, #16
   3fede:	4638      	mov	r0, r7
   3fee0:	9300      	str	r3, [sp, #0]
   3fee2:	4b10      	ldr	r3, [pc, #64]	; (3ff24 <_svfiprintf_r+0x1ec>)
   3fee4:	f7fe feb8 	bl	3ec58 <_printf_float>
   3fee8:	f1b0 3fff 	cmp.w	r0, #4294967295
   3feec:	4680      	mov	r8, r0
   3feee:	d1d6      	bne.n	3fe9e <_svfiprintf_r+0x166>
   3fef0:	89ab      	ldrh	r3, [r5, #12]
   3fef2:	065b      	lsls	r3, r3, #25
   3fef4:	f53f af34 	bmi.w	3fd60 <_svfiprintf_r+0x28>
   3fef8:	9809      	ldr	r0, [sp, #36]	; 0x24
   3fefa:	b01d      	add	sp, #116	; 0x74
   3fefc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3ff00:	ab03      	add	r3, sp, #12
   3ff02:	462a      	mov	r2, r5
   3ff04:	a904      	add	r1, sp, #16
   3ff06:	4638      	mov	r0, r7
   3ff08:	9300      	str	r3, [sp, #0]
   3ff0a:	4b06      	ldr	r3, [pc, #24]	; (3ff24 <_svfiprintf_r+0x1ec>)
   3ff0c:	f7ff f8ce 	bl	3f0ac <_printf_i>
   3ff10:	e7ea      	b.n	3fee8 <_svfiprintf_r+0x1b0>
   3ff12:	bf00      	nop
   3ff14:	0004d957 	.word	0x0004d957
   3ff18:	0004d95d 	.word	0x0004d95d
   3ff1c:	0004d961 	.word	0x0004d961
   3ff20:	0003ec59 	.word	0x0003ec59
   3ff24:	0004595f 	.word	0x0004595f

0003ff28 <_sbrk_r>:
   3ff28:	b538      	push	{r3, r4, r5, lr}
   3ff2a:	2300      	movs	r3, #0
   3ff2c:	4c05      	ldr	r4, [pc, #20]	; (3ff44 <_sbrk_r+0x1c>)
   3ff2e:	4605      	mov	r5, r0
   3ff30:	4608      	mov	r0, r1
   3ff32:	6023      	str	r3, [r4, #0]
   3ff34:	f7e7 fba4 	bl	27680 <_sbrk>
   3ff38:	1c43      	adds	r3, r0, #1
   3ff3a:	d102      	bne.n	3ff42 <_sbrk_r+0x1a>
   3ff3c:	6823      	ldr	r3, [r4, #0]
   3ff3e:	b103      	cbz	r3, 3ff42 <_sbrk_r+0x1a>
   3ff40:	602b      	str	r3, [r5, #0]
   3ff42:	bd38      	pop	{r3, r4, r5, pc}
   3ff44:	2002b630 	.word	0x2002b630

0003ff48 <raise>:
   3ff48:	4b02      	ldr	r3, [pc, #8]	; (3ff54 <raise+0xc>)
   3ff4a:	4601      	mov	r1, r0
   3ff4c:	6818      	ldr	r0, [r3, #0]
   3ff4e:	f005 bd61 	b.w	45a14 <_raise_r>
   3ff52:	bf00      	nop
   3ff54:	200324dc 	.word	0x200324dc

0003ff58 <_kill_r>:
   3ff58:	b538      	push	{r3, r4, r5, lr}
   3ff5a:	2300      	movs	r3, #0
   3ff5c:	4c06      	ldr	r4, [pc, #24]	; (3ff78 <_kill_r+0x20>)
   3ff5e:	4605      	mov	r5, r0
   3ff60:	4608      	mov	r0, r1
   3ff62:	4611      	mov	r1, r2
   3ff64:	6023      	str	r3, [r4, #0]
   3ff66:	f002 fe6b 	bl	42c40 <_kill>
   3ff6a:	1c43      	adds	r3, r0, #1
   3ff6c:	d102      	bne.n	3ff74 <_kill_r+0x1c>
   3ff6e:	6823      	ldr	r3, [r4, #0]
   3ff70:	b103      	cbz	r3, 3ff74 <_kill_r+0x1c>
   3ff72:	602b      	str	r3, [r5, #0]
   3ff74:	bd38      	pop	{r3, r4, r5, pc}
   3ff76:	bf00      	nop
   3ff78:	2002b630 	.word	0x2002b630

0003ff7c <_write_r>:
   3ff7c:	b538      	push	{r3, r4, r5, lr}
   3ff7e:	4605      	mov	r5, r0
   3ff80:	4c06      	ldr	r4, [pc, #24]	; (3ff9c <_write_r+0x20>)
   3ff82:	4608      	mov	r0, r1
   3ff84:	4611      	mov	r1, r2
   3ff86:	2200      	movs	r2, #0
   3ff88:	6022      	str	r2, [r4, #0]
   3ff8a:	461a      	mov	r2, r3
   3ff8c:	f002 fe4d 	bl	42c2a <_write>
   3ff90:	1c43      	adds	r3, r0, #1
   3ff92:	d102      	bne.n	3ff9a <_write_r+0x1e>
   3ff94:	6823      	ldr	r3, [r4, #0]
   3ff96:	b103      	cbz	r3, 3ff9a <_write_r+0x1e>
   3ff98:	602b      	str	r3, [r5, #0]
   3ff9a:	bd38      	pop	{r3, r4, r5, pc}
   3ff9c:	2002b630 	.word	0x2002b630

0003ffa0 <_close_r>:
   3ffa0:	b538      	push	{r3, r4, r5, lr}
   3ffa2:	2300      	movs	r3, #0
   3ffa4:	4c05      	ldr	r4, [pc, #20]	; (3ffbc <_close_r+0x1c>)
   3ffa6:	4605      	mov	r5, r0
   3ffa8:	4608      	mov	r0, r1
   3ffaa:	6023      	str	r3, [r4, #0]
   3ffac:	f002 fe41 	bl	42c32 <_close>
   3ffb0:	1c43      	adds	r3, r0, #1
   3ffb2:	d102      	bne.n	3ffba <_close_r+0x1a>
   3ffb4:	6823      	ldr	r3, [r4, #0]
   3ffb6:	b103      	cbz	r3, 3ffba <_close_r+0x1a>
   3ffb8:	602b      	str	r3, [r5, #0]
   3ffba:	bd38      	pop	{r3, r4, r5, pc}
   3ffbc:	2002b630 	.word	0x2002b630

0003ffc0 <_fstat_r>:
   3ffc0:	b538      	push	{r3, r4, r5, lr}
   3ffc2:	2300      	movs	r3, #0
   3ffc4:	4c06      	ldr	r4, [pc, #24]	; (3ffe0 <_fstat_r+0x20>)
   3ffc6:	4605      	mov	r5, r0
   3ffc8:	4608      	mov	r0, r1
   3ffca:	4611      	mov	r1, r2
   3ffcc:	6023      	str	r3, [r4, #0]
   3ffce:	f002 fe3b 	bl	42c48 <_fstat>
   3ffd2:	1c43      	adds	r3, r0, #1
   3ffd4:	d102      	bne.n	3ffdc <_fstat_r+0x1c>
   3ffd6:	6823      	ldr	r3, [r4, #0]
   3ffd8:	b103      	cbz	r3, 3ffdc <_fstat_r+0x1c>
   3ffda:	602b      	str	r3, [r5, #0]
   3ffdc:	bd38      	pop	{r3, r4, r5, pc}
   3ffde:	bf00      	nop
   3ffe0:	2002b630 	.word	0x2002b630

0003ffe4 <_isatty_r>:
   3ffe4:	b538      	push	{r3, r4, r5, lr}
   3ffe6:	2300      	movs	r3, #0
   3ffe8:	4c05      	ldr	r4, [pc, #20]	; (40000 <CONFIG_FLASH_LOAD_OFFSET>)
   3ffea:	4605      	mov	r5, r0
   3ffec:	4608      	mov	r0, r1
   3ffee:	6023      	str	r3, [r4, #0]
   3fff0:	f002 fe24 	bl	42c3c <_isatty>
   3fff4:	1c43      	adds	r3, r0, #1
   3fff6:	d102      	bne.n	3fffe <_isatty_r+0x1a>
   3fff8:	6823      	ldr	r3, [r4, #0]
   3fffa:	b103      	cbz	r3, 3fffe <_isatty_r+0x1a>
   3fffc:	602b      	str	r3, [r5, #0]
   3fffe:	bd38      	pop	{r3, r4, r5, pc}
   40000:	2002b630 	.word	0x2002b630

00040004 <_lseek_r>:
   40004:	b538      	push	{r3, r4, r5, lr}
   40006:	4605      	mov	r5, r0
   40008:	4c06      	ldr	r4, [pc, #24]	; (40024 <_lseek_r+0x20>)
   4000a:	4608      	mov	r0, r1
   4000c:	4611      	mov	r1, r2
   4000e:	2200      	movs	r2, #0
   40010:	6022      	str	r2, [r4, #0]
   40012:	461a      	mov	r2, r3
   40014:	f002 fe10 	bl	42c38 <_lseek>
   40018:	1c43      	adds	r3, r0, #1
   4001a:	d102      	bne.n	40022 <_lseek_r+0x1e>
   4001c:	6823      	ldr	r3, [r4, #0]
   4001e:	b103      	cbz	r3, 40022 <_lseek_r+0x1e>
   40020:	602b      	str	r3, [r5, #0]
   40022:	bd38      	pop	{r3, r4, r5, pc}
   40024:	2002b630 	.word	0x2002b630

00040028 <__malloc_lock>:
   40028:	4801      	ldr	r0, [pc, #4]	; (40030 <__malloc_lock+0x8>)
   4002a:	f005 b9b3 	b.w	45394 <__retarget_lock_acquire_recursive>
   4002e:	bf00      	nop
   40030:	2002b638 	.word	0x2002b638

00040034 <__malloc_unlock>:
   40034:	4801      	ldr	r0, [pc, #4]	; (4003c <__malloc_unlock+0x8>)
   40036:	f005 b9ae 	b.w	45396 <__retarget_lock_release_recursive>
   4003a:	bf00      	nop
   4003c:	2002b638 	.word	0x2002b638

00040040 <_read_r>:
   40040:	b538      	push	{r3, r4, r5, lr}
   40042:	4605      	mov	r5, r0
   40044:	4c06      	ldr	r4, [pc, #24]	; (40060 <_read_r+0x20>)
   40046:	4608      	mov	r0, r1
   40048:	4611      	mov	r1, r2
   4004a:	2200      	movs	r2, #0
   4004c:	6022      	str	r2, [r4, #0]
   4004e:	461a      	mov	r2, r3
   40050:	f002 fde7 	bl	42c22 <_read>
   40054:	1c43      	adds	r3, r0, #1
   40056:	d102      	bne.n	4005e <_read_r+0x1e>
   40058:	6823      	ldr	r3, [r4, #0]
   4005a:	b103      	cbz	r3, 4005e <_read_r+0x1e>
   4005c:	602b      	str	r3, [r5, #0]
   4005e:	bd38      	pop	{r3, r4, r5, pc}
   40060:	2002b630 	.word	0x2002b630

00040064 <load_credentials_dummy>:
}
   40064:	2000      	movs	r0, #0
   40066:	4770      	bx	lr

00040068 <handle_accel_events>:
{
   40068:	b508      	push	{r3, lr}
	if (!evt) {
   4006a:	b130      	cbz	r0, 4007a <handle_accel_events+0x12>
	if (IS_ENABLED(CONFIG_ACCEL_USE_SIM) && (evt->button == FLIP_INPUT)) {
   4006c:	6843      	ldr	r3, [r0, #4]
   4006e:	2b03      	cmp	r3, #3
   40070:	d106      	bne.n	40080 <handle_accel_events+0x18>
		flip_work(NULL);
   40072:	f7e0 ffcb 	bl	2100c <flip_work.constprop.0>
		return 0;
   40076:	2000      	movs	r0, #0
}
   40078:	bd08      	pop	{r3, pc}
		return -EINVAL;
   4007a:	f06f 0015 	mvn.w	r0, #21
   4007e:	e7fb      	b.n	40078 <handle_accel_events+0x10>
	return -ENOENT;
   40080:	f06f 0001 	mvn.w	r0, #1
   40084:	e7f8      	b.n	40078 <handle_accel_events+0x10>

00040086 <ui_button_is_active>:

bool ui_button_is_active(u32_t button)
{
   40086:	b510      	push	{r4, lr}
   40088:	4604      	mov	r4, r0
	return dk_get_buttons() & BIT((button - 1));
   4008a:	f7f0 fd99 	bl	30bc0 <dk_get_buttons>
   4008e:	2301      	movs	r3, #1
   40090:	3c01      	subs	r4, #1
   40092:	40a3      	lsls	r3, r4
   40094:	4203      	tst	r3, r0
}
   40096:	bf14      	ite	ne
   40098:	2001      	movne	r0, #1
   4009a:	2000      	moveq	r0, #0
   4009c:	bd10      	pop	{r4, pc}

0004009e <get_bit_ptr>:
{
   4009e:	b570      	push	{r4, r5, r6, lr}
   400a0:	250c      	movs	r5, #12
   400a2:	68c6      	ldr	r6, [r0, #12]
	u32_t *bitarray = level <= p->max_inline_level ?
   400a4:	f990 000b 	ldrsb.w	r0, [r0, #11]
   400a8:	434d      	muls	r5, r1
		p->levels[level].bits : p->levels[level].bits_p;
   400aa:	4288      	cmp	r0, r1
	*word = &bitarray[bn / 32];
   400ac:	4610      	mov	r0, r2
   400ae:	eb06 0405 	add.w	r4, r6, r5
		p->levels[level].bits : p->levels[level].bits_p;
   400b2:	bfb8      	it	lt
   400b4:	5974      	ldrlt	r4, [r6, r5]
	*word = &bitarray[bn / 32];
   400b6:	2a00      	cmp	r2, #0
   400b8:	bfb8      	it	lt
   400ba:	f102 001f 	addlt.w	r0, r2, #31
   400be:	1140      	asrs	r0, r0, #5
   400c0:	eb04 0180 	add.w	r1, r4, r0, lsl #2
   400c4:	6019      	str	r1, [r3, #0]
}
   400c6:	f002 001f 	and.w	r0, r2, #31
   400ca:	bd70      	pop	{r4, r5, r6, pc}

000400cc <pool_irq_lock.isra.2.part.3>:
	__asm__ volatile(
   400cc:	f04f 0320 	mov.w	r3, #32
   400d0:	f3ef 8011 	mrs	r0, BASEPRI
   400d4:	f383 8811 	msr	BASEPRI, r3
   400d8:	f3bf 8f6f 	isb	sy
}
   400dc:	4770      	bx	lr

000400de <pool_irq_unlock.isra.4>:
	if (p->flags & SYS_MEM_POOL_KERNEL) {
   400de:	07c3      	lsls	r3, r0, #31
   400e0:	d503      	bpl.n	400ea <pool_irq_unlock.isra.4+0xc>
	__asm__ volatile(
   400e2:	f381 8811 	msr	BASEPRI, r1
   400e6:	f3bf 8f6f 	isb	sy
}
   400ea:	4770      	bx	lr

000400ec <z_sys_mem_pool_base_init>:
	p->max_inline_level = -1;
   400ec:	23ff      	movs	r3, #255	; 0xff
{
   400ee:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	size_t buflen = p->n_max * p->max_sz, sz = p->max_sz;
   400f2:	6846      	ldr	r6, [r0, #4]
	p->max_inline_level = -1;
   400f4:	72c3      	strb	r3, [r0, #11]
	size_t buflen = p->n_max * p->max_sz, sz = p->max_sz;
   400f6:	4632      	mov	r2, r6
	for (i = 0; i < p->n_levels; i++) {
   400f8:	2300      	movs	r3, #0
		sys_dlist_init(&p->levels[i].free_list);
   400fa:	f04f 090c 	mov.w	r9, #12
	size_t buflen = p->n_max * p->max_sz, sz = p->max_sz;
   400fe:	8907      	ldrh	r7, [r0, #8]
	u32_t *bits = (u32_t *)((u8_t *)p->buf + buflen);
   40100:	6801      	ldr	r1, [r0, #0]
	size_t buflen = p->n_max * p->max_sz, sz = p->max_sz;
   40102:	fb06 fc07 	mul.w	ip, r6, r7
	for (i = 0; i < p->n_levels; i++) {
   40106:	f890 800a 	ldrb.w	r8, [r0, #10]
	u32_t *bits = (u32_t *)((u8_t *)p->buf + buflen);
   4010a:	4461      	add	r1, ip
	for (i = 0; i < p->n_levels; i++) {
   4010c:	4598      	cmp	r8, r3
   4010e:	dc05      	bgt.n	4011c <z_sys_mem_pool_base_init+0x30>
   40110:	2300      	movs	r3, #0
	for (i = 0; i < p->n_max; i++) {
   40112:	4619      	mov	r1, r3
   40114:	428f      	cmp	r7, r1
   40116:	dc20      	bgt.n	4015a <z_sys_mem_pool_base_init+0x6e>
}
   40118:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		int nblocks = buflen / sz;
   4011c:	fbbc f5f2 	udiv	r5, ip, r2
		sys_dlist_init(&p->levels[i].free_list);
   40120:	fb09 fe03 	mul.w	lr, r9, r3
   40124:	f8d0 a00c 	ldr.w	sl, [r0, #12]
		if (nblocks <= sizeof(p->levels[i].bits)*8) {
   40128:	2d20      	cmp	r5, #32
		sys_dlist_init(&p->levels[i].free_list);
   4012a:	eb0a 040e 	add.w	r4, sl, lr
   4012e:	f104 0b04 	add.w	fp, r4, #4
	list->tail = (sys_dnode_t *)list;
   40132:	e9c4 bb01 	strd	fp, fp, [r4, #4]
		if (nblocks <= sizeof(p->levels[i].bits)*8) {
   40136:	d805      	bhi.n	40144 <z_sys_mem_pool_base_init+0x58>
			p->max_inline_level = i;
   40138:	72c3      	strb	r3, [r0, #11]
		sz = WB_DN(sz / 4);
   4013a:	0892      	lsrs	r2, r2, #2
   4013c:	f022 0203 	bic.w	r2, r2, #3
	for (i = 0; i < p->n_levels; i++) {
   40140:	3301      	adds	r3, #1
   40142:	e7e3      	b.n	4010c <z_sys_mem_pool_base_init+0x20>
			bits += (nblocks + 31)/32;
   40144:	f115 041f 	adds.w	r4, r5, #31
   40148:	bf48      	it	mi
   4014a:	f105 043e 	addmi.w	r4, r5, #62	; 0x3e
   4014e:	1164      	asrs	r4, r4, #5
			p->levels[i].bits_p = bits;
   40150:	f84a 100e 	str.w	r1, [sl, lr]
			bits += (nblocks + 31)/32;
   40154:	eb01 0184 	add.w	r1, r1, r4, lsl #2
   40158:	e7ef      	b.n	4013a <z_sys_mem_pool_base_init+0x4e>
		sys_dlist_append(&p->levels[0].free_list, block);
   4015a:	68c2      	ldr	r2, [r0, #12]
	return (u8_t *)p->buf + lsz * block;
   4015c:	6805      	ldr	r5, [r0, #0]
		sys_dlist_append(&p->levels[0].free_list, block);
   4015e:	f102 0c04 	add.w	ip, r2, #4
	return (u8_t *)p->buf + lsz * block;
   40162:	18ec      	adds	r4, r5, r3
	node->next = list;
   40164:	f845 c003 	str.w	ip, [r5, r3]
	node->prev = list->tail;
   40168:	6895      	ldr	r5, [r2, #8]
	for (i = 0; i < p->n_max; i++) {
   4016a:	3101      	adds	r1, #1
   4016c:	6065      	str	r5, [r4, #4]
	list->tail->next = node;
   4016e:	6895      	ldr	r5, [r2, #8]
   40170:	4433      	add	r3, r6
   40172:	602c      	str	r4, [r5, #0]
	list->tail = node;
   40174:	6094      	str	r4, [r2, #8]
   40176:	e7cd      	b.n	40114 <z_sys_mem_pool_base_init+0x28>

00040178 <z_sys_mem_pool_block_alloc>:
{
   40178:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   4017c:	b087      	sub	sp, #28
	size_t lsizes[LVL_ARRAY_SZ(p->n_levels)];
   4017e:	7a84      	ldrb	r4, [r0, #10]
{
   40180:	af00      	add	r7, sp, #0
   40182:	e9c7 3201 	strd	r3, r2, [r7, #4]
	size_t lsizes[LVL_ARRAY_SZ(p->n_levels)];
   40186:	00a3      	lsls	r3, r4, #2
   40188:	3307      	adds	r3, #7
   4018a:	f403 63ff 	and.w	r3, r3, #2040	; 0x7f8
   4018e:	ebad 0d03 	sub.w	sp, sp, r3
   40192:	46ea      	mov	sl, sp
	lsizes[0] = p->max_sz;
   40194:	4653      	mov	r3, sl
   40196:	6842      	ldr	r2, [r0, #4]
{
   40198:	4605      	mov	r5, r0
	lsizes[0] = p->max_sz;
   4019a:	f843 2904 	str.w	r2, [r3], #-4
	for (i = 0; i < p->n_levels; i++) {
   4019e:	2200      	movs	r2, #0
   401a0:	4294      	cmp	r4, r2
   401a2:	f102 39ff 	add.w	r9, r2, #4294967295
   401a6:	dd09      	ble.n	401bc <z_sys_mem_pool_block_alloc+0x44>
		if (i > 0) {
   401a8:	b122      	cbz	r2, 401b4 <z_sys_mem_pool_block_alloc+0x3c>
			lsizes[i] = WB_DN(lsizes[i-1] / 4);
   401aa:	6818      	ldr	r0, [r3, #0]
   401ac:	0880      	lsrs	r0, r0, #2
   401ae:	f020 0003 	bic.w	r0, r0, #3
   401b2:	6058      	str	r0, [r3, #4]
		if (lsizes[i] < size) {
   401b4:	f853 0f04 	ldr.w	r0, [r3, #4]!
   401b8:	4288      	cmp	r0, r1
   401ba:	d208      	bcs.n	401ce <z_sys_mem_pool_block_alloc+0x56>
	if (alloc_l < 0) {
   401bc:	f1b9 3fff 	cmp.w	r9, #4294967295
   401c0:	d107      	bne.n	401d2 <z_sys_mem_pool_block_alloc+0x5a>
		*data_p = NULL;
   401c2:	2300      	movs	r3, #0
   401c4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
   401c6:	6013      	str	r3, [r2, #0]
		return -ENOMEM;
   401c8:	f06f 000b 	mvn.w	r0, #11
   401cc:	e02c      	b.n	40228 <z_sys_mem_pool_block_alloc+0xb0>
	for (i = 0; i < p->n_levels; i++) {
   401ce:	3201      	adds	r2, #1
   401d0:	e7e6      	b.n	401a0 <z_sys_mem_pool_block_alloc+0x28>
	if (p->flags & SYS_MEM_POOL_KERNEL) {
   401d2:	7c28      	ldrb	r0, [r5, #16]
   401d4:	f010 0001 	ands.w	r0, r0, #1
   401d8:	d001      	beq.n	401de <z_sys_mem_pool_block_alloc+0x66>
   401da:	f7ff ff77 	bl	400cc <pool_irq_lock.isra.2.part.3>
   401de:	230c      	movs	r3, #12
	key = pool_irq_lock(p);
   401e0:	4680      	mov	r8, r0
	block = sys_dlist_get(&p->levels[l].free_list);
   401e2:	464e      	mov	r6, r9
   401e4:	68ea      	ldr	r2, [r5, #12]
   401e6:	fb03 2309 	mla	r3, r3, r9, r2
	return list->head == list;
   401ea:	461a      	mov	r2, r3
   401ec:	f852 4f04 	ldr.w	r4, [r2, #4]!
	if (!sys_dlist_is_empty(list)) {
   401f0:	4294      	cmp	r4, r2
   401f2:	d11d      	bne.n	40230 <z_sys_mem_pool_block_alloc+0xb8>
	for (i = alloc_l; i >= 0; i--) {
   401f4:	3e01      	subs	r6, #1
   401f6:	1c72      	adds	r2, r6, #1
   401f8:	f1a3 030c 	sub.w	r3, r3, #12
   401fc:	d1f5      	bne.n	401ea <z_sys_mem_pool_block_alloc+0x72>
   401fe:	2400      	movs	r4, #0
	pool_irq_unlock(p, key);
   40200:	4641      	mov	r1, r8
   40202:	7c28      	ldrb	r0, [r5, #16]
   40204:	f7ff ff6b 	bl	400de <pool_irq_unlock.isra.4>
	*data_p = data;
   40208:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   4020a:	601c      	str	r4, [r3, #0]
	if (data == NULL) {
   4020c:	2c00      	cmp	r4, #0
   4020e:	d0db      	beq.n	401c8 <z_sys_mem_pool_block_alloc+0x50>
	*level_p = alloc_l;
   40210:	68bb      	ldr	r3, [r7, #8]
	return 0;
   40212:	2000      	movs	r0, #0
	*level_p = alloc_l;
   40214:	f8c3 9000 	str.w	r9, [r3]
	return ((u8_t *)block - (u8_t *)p->buf) / sz;
   40218:	682b      	ldr	r3, [r5, #0]
   4021a:	1ae4      	subs	r4, r4, r3
   4021c:	f85a 3029 	ldr.w	r3, [sl, r9, lsl #2]
   40220:	fb94 f4f3 	sdiv	r4, r4, r3
	*block_p = block_num(p, data, lsizes[alloc_l]);
   40224:	687b      	ldr	r3, [r7, #4]
   40226:	601c      	str	r4, [r3, #0]
}
   40228:	371c      	adds	r7, #28
   4022a:	46bd      	mov	sp, r7
   4022c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	node->prev->next = node->next;
   40230:	e9d4 3200 	ldrd	r3, r2, [r4]
   40234:	6013      	str	r3, [r2, #0]
	node->next->prev = node->prev;
   40236:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   40238:	2300      	movs	r3, #0
	node->prev = NULL;
   4023a:	e9c4 3300 	strd	r3, r3, [r4]
	return ((u8_t *)block - (u8_t *)p->buf) / sz;
   4023e:	682b      	ldr	r3, [r5, #0]
		data = block_alloc(p, i, lsizes[i]);
   40240:	f85a 1026 	ldr.w	r1, [sl, r6, lsl #2]
	return ((u8_t *)block - (u8_t *)p->buf) / sz;
   40244:	1ae2      	subs	r2, r4, r3
	int bit = get_bit_ptr(p, level, bn, &word);
   40246:	f107 0b14 	add.w	fp, r7, #20
   4024a:	fb92 f2f1 	sdiv	r2, r2, r1
   4024e:	465b      	mov	r3, fp
   40250:	4631      	mov	r1, r6
   40252:	4628      	mov	r0, r5
   40254:	f7ff ff23 	bl	4009e <get_bit_ptr>
	*word |= (1<<bit);
   40258:	2201      	movs	r2, #1
   4025a:	6979      	ldr	r1, [r7, #20]
   4025c:	fa02 f000 	lsl.w	r0, r2, r0
   40260:	680b      	ldr	r3, [r1, #0]
   40262:	603a      	str	r2, [r7, #0]
   40264:	4303      	orrs	r3, r0
   40266:	600b      	str	r3, [r1, #0]
			for (from_l = i; from_l < alloc_l; from_l++) {
   40268:	454e      	cmp	r6, r9
   4026a:	dac9      	bge.n	40200 <z_sys_mem_pool_block_alloc+0x88>
	return ((u8_t *)block - (u8_t *)p->buf) / sz;
   4026c:	682a      	ldr	r2, [r5, #0]
   4026e:	f85a 3026 	ldr.w	r3, [sl, r6, lsl #2]
   40272:	1aa2      	subs	r2, r4, r2
   40274:	fb92 f2f3 	sdiv	r2, r2, r3
	set_alloc_bit(p, l + 1, 4*bn);
   40278:	3601      	adds	r6, #1
	int bit = get_bit_ptr(p, level, bn, &word);
   4027a:	465b      	mov	r3, fp
   4027c:	0092      	lsls	r2, r2, #2
   4027e:	4631      	mov	r1, r6
   40280:	4628      	mov	r0, r5
   40282:	f7ff ff0c 	bl	4009e <get_bit_ptr>
	*word |= (1<<bit);
   40286:	697a      	ldr	r2, [r7, #20]
   40288:	683b      	ldr	r3, [r7, #0]
		sys_dlist_append(&p->levels[l + 1].free_list, block2);
   4028a:	68e9      	ldr	r1, [r5, #12]
	*word |= (1<<bit);
   4028c:	fa03 f000 	lsl.w	r0, r3, r0
   40290:	6813      	ldr	r3, [r2, #0]
   40292:	4303      	orrs	r3, r0
   40294:	6013      	str	r3, [r2, #0]
		sys_dlist_append(&p->levels[l + 1].free_list, block2);
   40296:	230c      	movs	r3, #12
   40298:	2203      	movs	r2, #3
   4029a:	fb03 1106 	mla	r1, r3, r6, r1
		int lsz = lsizes[l + 1];
   4029e:	f85a 0026 	ldr.w	r0, [sl, r6, lsl #2]
		sys_dlist_append(&p->levels[l + 1].free_list, block2);
   402a2:	f101 0e04 	add.w	lr, r1, #4
   402a6:	1823      	adds	r3, r4, r0
   402a8:	60fa      	str	r2, [r7, #12]
	node->prev = list->tail;
   402aa:	688a      	ldr	r2, [r1, #8]
	node->next = list;
   402ac:	f8c3 e000 	str.w	lr, [r3]
	node->prev = list->tail;
   402b0:	605a      	str	r2, [r3, #4]
	list->tail->next = node;
   402b2:	688a      	ldr	r2, [r1, #8]
   402b4:	6013      	str	r3, [r2, #0]
	for (i = 1; i < 4; i++) {
   402b6:	68fa      	ldr	r2, [r7, #12]
	list->tail = node;
   402b8:	608b      	str	r3, [r1, #8]
   402ba:	3a01      	subs	r2, #1
   402bc:	4403      	add	r3, r0
   402be:	60fa      	str	r2, [r7, #12]
   402c0:	d1f3      	bne.n	402aa <z_sys_mem_pool_block_alloc+0x132>
				pool_irq_unlock(p, key);
   402c2:	4641      	mov	r1, r8
   402c4:	7c28      	ldrb	r0, [r5, #16]
   402c6:	f7ff ff0a 	bl	400de <pool_irq_unlock.isra.4>
	if (p->flags & SYS_MEM_POOL_KERNEL) {
   402ca:	7c2b      	ldrb	r3, [r5, #16]
   402cc:	07db      	lsls	r3, r3, #31
   402ce:	d503      	bpl.n	402d8 <z_sys_mem_pool_block_alloc+0x160>
   402d0:	f7ff fefc 	bl	400cc <pool_irq_lock.isra.2.part.3>
				key = pool_irq_lock(p);
   402d4:	4680      	mov	r8, r0
   402d6:	e7c7      	b.n	40268 <z_sys_mem_pool_block_alloc+0xf0>
		return 0;
   402d8:	68f8      	ldr	r0, [r7, #12]
   402da:	e7fb      	b.n	402d4 <z_sys_mem_pool_block_alloc+0x15c>

000402dc <arch_printk_char_out>:
}
   402dc:	2000      	movs	r0, #0
   402de:	4770      	bx	lr

000402e0 <print_err>:
{
   402e0:	b570      	push	{r4, r5, r6, lr}
   402e2:	460d      	mov	r5, r1
   402e4:	4604      	mov	r4, r0
	out('E', ctx);
   402e6:	2045      	movs	r0, #69	; 0x45
   402e8:	47a0      	blx	r4
	out('R', ctx);
   402ea:	4629      	mov	r1, r5
   402ec:	2052      	movs	r0, #82	; 0x52
   402ee:	47a0      	blx	r4
	out('R', ctx);
   402f0:	4629      	mov	r1, r5
   402f2:	4623      	mov	r3, r4
}
   402f4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	out('R', ctx);
   402f8:	2052      	movs	r0, #82	; 0x52
   402fa:	4718      	bx	r3

000402fc <str_out>:
{
   402fc:	b530      	push	{r4, r5, lr}
   402fe:	688a      	ldr	r2, [r1, #8]
	if (ctx->str == NULL || ctx->count >= ctx->max) {
   40300:	680c      	ldr	r4, [r1, #0]
   40302:	1c55      	adds	r5, r2, #1
   40304:	b114      	cbz	r4, 4030c <str_out+0x10>
   40306:	684b      	ldr	r3, [r1, #4]
   40308:	4293      	cmp	r3, r2
   4030a:	dc01      	bgt.n	40310 <str_out+0x14>
		ctx->count++;
   4030c:	608d      	str	r5, [r1, #8]
}
   4030e:	bd30      	pop	{r4, r5, pc}
	if (ctx->count == ctx->max - 1) {
   40310:	3b01      	subs	r3, #1
   40312:	4293      	cmp	r3, r2
		ctx->str[ctx->count++] = '\0';
   40314:	bf08      	it	eq
   40316:	2200      	moveq	r2, #0
   40318:	608d      	str	r5, [r1, #8]
   4031a:	bf0c      	ite	eq
   4031c:	54e2      	strbeq	r2, [r4, r3]
		ctx->str[ctx->count++] = c;
   4031e:	54a0      	strbne	r0, [r4, r2]
   40320:	e7f5      	b.n	4030e <str_out+0x12>

00040322 <z_vprintk>:
{
   40322:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	char length_mod = 0;
   40326:	f04f 0800 	mov.w	r8, #0
{
   4032a:	4606      	mov	r6, r0
   4032c:	460f      	mov	r7, r1
   4032e:	461c      	mov	r4, r3
	int min_width = -1;
   40330:	f04f 3aff 	mov.w	sl, #4294967295
	enum pad_type padding = PAD_NONE;
   40334:	46c1      	mov	r9, r8
	int might_format = 0; /* 1 if encountered a '%' */
   40336:	4645      	mov	r5, r8
{
   40338:	b08b      	sub	sp, #44	; 0x2c
   4033a:	9202      	str	r2, [sp, #8]
	while (*fmt) {
   4033c:	9b02      	ldr	r3, [sp, #8]
   4033e:	7818      	ldrb	r0, [r3, #0]
   40340:	b910      	cbnz	r0, 40348 <z_vprintk+0x26>
}
   40342:	b00b      	add	sp, #44	; 0x2c
   40344:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (!might_format) {
   40348:	b945      	cbnz	r5, 4035c <z_vprintk+0x3a>
			if (*fmt != '%') {
   4034a:	2825      	cmp	r0, #37	; 0x25
   4034c:	f000 814b 	beq.w	405e6 <z_vprintk+0x2c4>
				out((int)*fmt, ctx);
   40350:	4639      	mov	r1, r7
   40352:	47b0      	blx	r6
		++fmt;
   40354:	9b02      	ldr	r3, [sp, #8]
   40356:	3301      	adds	r3, #1
   40358:	9302      	str	r3, [sp, #8]
   4035a:	e7ef      	b.n	4033c <z_vprintk+0x1a>
			switch (*fmt) {
   4035c:	2864      	cmp	r0, #100	; 0x64
   4035e:	d06d      	beq.n	4043c <z_vprintk+0x11a>
   40360:	d819      	bhi.n	40396 <z_vprintk+0x74>
   40362:	2839      	cmp	r0, #57	; 0x39
   40364:	d80a      	bhi.n	4037c <z_vprintk+0x5a>
   40366:	2831      	cmp	r0, #49	; 0x31
   40368:	d25f      	bcs.n	4042a <z_vprintk+0x108>
   4036a:	282d      	cmp	r0, #45	; 0x2d
   4036c:	f000 8141 	beq.w	405f2 <z_vprintk+0x2d0>
   40370:	2830      	cmp	r0, #48	; 0x30
   40372:	d04b      	beq.n	4040c <z_vprintk+0xea>
   40374:	2825      	cmp	r0, #37	; 0x25
   40376:	d107      	bne.n	40388 <z_vprintk+0x66>
				out((int)'%', ctx);
   40378:	4639      	mov	r1, r7
   4037a:	e132      	b.n	405e2 <z_vprintk+0x2c0>
			switch (*fmt) {
   4037c:	2858      	cmp	r0, #88	; 0x58
   4037e:	f000 80bb 	beq.w	404f8 <z_vprintk+0x1d6>
   40382:	2863      	cmp	r0, #99	; 0x63
   40384:	f000 812a 	beq.w	405dc <z_vprintk+0x2ba>
				out((int)'%', ctx);
   40388:	4639      	mov	r1, r7
   4038a:	2025      	movs	r0, #37	; 0x25
   4038c:	47b0      	blx	r6
				out((int)*fmt, ctx);
   4038e:	9b02      	ldr	r3, [sp, #8]
   40390:	4639      	mov	r1, r7
   40392:	7818      	ldrb	r0, [r3, #0]
   40394:	e125      	b.n	405e2 <z_vprintk+0x2c0>
			switch (*fmt) {
   40396:	2870      	cmp	r0, #112	; 0x70
   40398:	f000 80a4 	beq.w	404e4 <z_vprintk+0x1c2>
   4039c:	d811      	bhi.n	403c2 <z_vprintk+0xa0>
   4039e:	2869      	cmp	r0, #105	; 0x69
   403a0:	d04c      	beq.n	4043c <z_vprintk+0x11a>
   403a2:	286c      	cmp	r0, #108	; 0x6c
   403a4:	d105      	bne.n	403b2 <z_vprintk+0x90>
				} else if (*fmt == 'l' && length_mod == 'l') {
   403a6:	f1b8 0f6c 	cmp.w	r8, #108	; 0x6c
   403aa:	d12a      	bne.n	40402 <z_vprintk+0xe0>
					length_mod = 'L';
   403ac:	f04f 084c 	mov.w	r8, #76	; 0x4c
   403b0:	e7d0      	b.n	40354 <z_vprintk+0x32>
			switch (*fmt) {
   403b2:	2868      	cmp	r0, #104	; 0x68
   403b4:	d1e8      	bne.n	40388 <z_vprintk+0x66>
				if (*fmt == 'h' && length_mod == 'h') {
   403b6:	f1b8 0f68 	cmp.w	r8, #104	; 0x68
   403ba:	d122      	bne.n	40402 <z_vprintk+0xe0>
					length_mod = 'H';
   403bc:	f04f 0848 	mov.w	r8, #72	; 0x48
   403c0:	e7c8      	b.n	40354 <z_vprintk+0x32>
			switch (*fmt) {
   403c2:	2875      	cmp	r0, #117	; 0x75
   403c4:	d072      	beq.n	404ac <z_vprintk+0x18a>
   403c6:	d818      	bhi.n	403fa <z_vprintk+0xd8>
   403c8:	2873      	cmp	r0, #115	; 0x73
   403ca:	d1dd      	bne.n	40388 <z_vprintk+0x66>
				char *s = va_arg(ap, char *);
   403cc:	f854 5b04 	ldr.w	r5, [r4], #4
				while (*s) {
   403d0:	46ab      	mov	fp, r5
   403d2:	465b      	mov	r3, fp
   403d4:	f81b 0b01 	ldrb.w	r0, [fp], #1
   403d8:	2800      	cmp	r0, #0
   403da:	f040 80fc 	bne.w	405d6 <z_vprintk+0x2b4>
				if (padding == PAD_SPACE_AFTER) {
   403de:	f1b9 0f03 	cmp.w	r9, #3
   403e2:	f040 810c 	bne.w	405fe <z_vprintk+0x2dc>
					int remaining = min_width - (s - start);
   403e6:	1b5d      	subs	r5, r3, r5
   403e8:	ebaa 0505 	sub.w	r5, sl, r5
					while (remaining-- > 0) {
   403ec:	2d00      	cmp	r5, #0
   403ee:	dd49      	ble.n	40484 <z_vprintk+0x162>
						out(' ', ctx);
   403f0:	4639      	mov	r1, r7
   403f2:	2020      	movs	r0, #32
   403f4:	47b0      	blx	r6
   403f6:	3d01      	subs	r5, #1
   403f8:	e7f8      	b.n	403ec <z_vprintk+0xca>
			switch (*fmt) {
   403fa:	2878      	cmp	r0, #120	; 0x78
   403fc:	d07c      	beq.n	404f8 <z_vprintk+0x1d6>
   403fe:	287a      	cmp	r0, #122	; 0x7a
   40400:	d1c2      	bne.n	40388 <z_vprintk+0x66>
				} else if (length_mod == 0) {
   40402:	f1b8 0f00 	cmp.w	r8, #0
   40406:	d1bf      	bne.n	40388 <z_vprintk+0x66>
   40408:	4680      	mov	r8, r0
   4040a:	e7a3      	b.n	40354 <z_vprintk+0x32>
				if (min_width < 0 && padding == PAD_NONE) {
   4040c:	f1ba 0f00 	cmp.w	sl, #0
   40410:	da0e      	bge.n	40430 <z_vprintk+0x10e>
   40412:	f1b9 0f00 	cmp.w	r9, #0
   40416:	f000 80ef 	beq.w	405f8 <z_vprintk+0x2d6>
					min_width = *fmt - '0';
   4041a:	f1a0 0a30 	sub.w	sl, r0, #48	; 0x30
					padding = PAD_SPACE_BEFORE;
   4041e:	f1b9 0f00 	cmp.w	r9, #0
   40422:	bf08      	it	eq
   40424:	f04f 0902 	moveq.w	r9, #2
   40428:	e794      	b.n	40354 <z_vprintk+0x32>
				if (min_width < 0) {
   4042a:	f1ba 0f00 	cmp.w	sl, #0
   4042e:	dbf4      	blt.n	4041a <z_vprintk+0xf8>
					min_width = 10 * min_width + *fmt - '0';
   40430:	230a      	movs	r3, #10
   40432:	fb03 0a0a 	mla	sl, r3, sl, r0
   40436:	f1aa 0a30 	sub.w	sl, sl, #48	; 0x30
   4043a:	e7f0      	b.n	4041e <z_vprintk+0xfc>
				if (length_mod == 'z') {
   4043c:	f1b8 0f7a 	cmp.w	r8, #122	; 0x7a
   40440:	d102      	bne.n	40448 <z_vprintk+0x126>
					d = va_arg(ap, int);
   40442:	f854 5b04 	ldr.w	r5, [r4], #4
   40446:	e020      	b.n	4048a <z_vprintk+0x168>
				} else if (length_mod == 'l') {
   40448:	f1b8 0f6c 	cmp.w	r8, #108	; 0x6c
   4044c:	d0f9      	beq.n	40442 <z_vprintk+0x120>
				} else if (length_mod == 'L') {
   4044e:	f1b8 0f4c 	cmp.w	r8, #76	; 0x4c
   40452:	d1f6      	bne.n	40442 <z_vprintk+0x120>
					long long lld = va_arg(ap, long long);
   40454:	3407      	adds	r4, #7
   40456:	f024 0407 	bic.w	r4, r4, #7
   4045a:	e8f4 2302 	ldrd	r2, r3, [r4], #8
					if (lld > __LONG_MAX__ ||
   4045e:	f112 4100 	adds.w	r1, r2, #2147483648	; 0x80000000
   40462:	9106      	str	r1, [sp, #24]
   40464:	f143 0100 	adc.w	r1, r3, #0
   40468:	9107      	str	r1, [sp, #28]
   4046a:	2100      	movs	r1, #0
   4046c:	e9dd bc06 	ldrd	fp, ip, [sp, #24]
   40470:	f04f 30ff 	mov.w	r0, #4294967295
   40474:	4561      	cmp	r1, ip
   40476:	bf08      	it	eq
   40478:	4558      	cmpeq	r0, fp
   4047a:	d205      	bcs.n	40488 <z_vprintk+0x166>
						print_err(out, ctx);
   4047c:	4639      	mov	r1, r7
   4047e:	4630      	mov	r0, r6
   40480:	f7ff ff2e 	bl	402e0 <print_err>
			might_format = 0;
   40484:	2500      	movs	r5, #0
				break;
   40486:	e765      	b.n	40354 <z_vprintk+0x32>
					d = lld;
   40488:	4615      	mov	r5, r2
				if (d < 0) {
   4048a:	2d00      	cmp	r5, #0
   4048c:	da05      	bge.n	4049a <z_vprintk+0x178>
					out((int)'-', ctx);
   4048e:	4639      	mov	r1, r7
   40490:	202d      	movs	r0, #45	; 0x2d
   40492:	47b0      	blx	r6
					d = -d;
   40494:	426d      	negs	r5, r5
					min_width--;
   40496:	f10a 3aff 	add.w	sl, sl, #4294967295
				_printk_dec_ulong(out, ctx, d, padding,
   4049a:	464b      	mov	r3, r9
   4049c:	462a      	mov	r2, r5
   4049e:	f8cd a000 	str.w	sl, [sp]
				_printk_dec_ulong(out, ctx, u, padding,
   404a2:	4639      	mov	r1, r7
   404a4:	4630      	mov	r0, r6
   404a6:	f7e1 f8d5 	bl	21654 <_printk_dec_ulong>
				break;
   404aa:	e7eb      	b.n	40484 <z_vprintk+0x162>
				if (length_mod == 'z') {
   404ac:	f1b8 0f7a 	cmp.w	r8, #122	; 0x7a
   404b0:	d102      	bne.n	404b8 <z_vprintk+0x196>
					u = va_arg(ap, unsigned int);
   404b2:	f854 2b04 	ldr.w	r2, [r4], #4
   404b6:	e011      	b.n	404dc <z_vprintk+0x1ba>
				} else if (length_mod == 'l') {
   404b8:	f1b8 0f6c 	cmp.w	r8, #108	; 0x6c
   404bc:	d0f9      	beq.n	404b2 <z_vprintk+0x190>
				} else if (length_mod == 'L') {
   404be:	f1b8 0f4c 	cmp.w	r8, #76	; 0x4c
   404c2:	d1f6      	bne.n	404b2 <z_vprintk+0x190>
					if (llu > ~0UL) {
   404c4:	2100      	movs	r1, #0
   404c6:	f04f 30ff 	mov.w	r0, #4294967295
					unsigned long long llu =
   404ca:	3407      	adds	r4, #7
   404cc:	f024 0407 	bic.w	r4, r4, #7
   404d0:	e8f4 2302 	ldrd	r2, r3, [r4], #8
					if (llu > ~0UL) {
   404d4:	4299      	cmp	r1, r3
   404d6:	bf08      	it	eq
   404d8:	4290      	cmpeq	r0, r2
   404da:	d3cf      	bcc.n	4047c <z_vprintk+0x15a>
				_printk_dec_ulong(out, ctx, u, padding,
   404dc:	f8cd a000 	str.w	sl, [sp]
   404e0:	464b      	mov	r3, r9
   404e2:	e7de      	b.n	404a2 <z_vprintk+0x180>
				out('0', ctx);
   404e4:	4639      	mov	r1, r7
   404e6:	2030      	movs	r0, #48	; 0x30
   404e8:	47b0      	blx	r6
				out('x', ctx);
   404ea:	4639      	mov	r1, r7
   404ec:	2078      	movs	r0, #120	; 0x78
   404ee:	47b0      	blx	r6
					min_width = 8;
   404f0:	f04f 0a08 	mov.w	sl, #8
				padding = PAD_ZERO_BEFORE;
   404f4:	f04f 0901 	mov.w	r9, #1
				if (*fmt == 'p') {
   404f8:	9b02      	ldr	r3, [sp, #8]
   404fa:	781b      	ldrb	r3, [r3, #0]
   404fc:	2b70      	cmp	r3, #112	; 0x70
   404fe:	d104      	bne.n	4050a <z_vprintk+0x1e8>
					x = va_arg(ap, unsigned int);
   40500:	f854 3b04 	ldr.w	r3, [r4], #4
   40504:	9304      	str	r3, [sp, #16]
   40506:	2300      	movs	r3, #0
   40508:	e00d      	b.n	40526 <z_vprintk+0x204>
				} else if (length_mod == 'l') {
   4050a:	f1b8 0f6c 	cmp.w	r8, #108	; 0x6c
   4050e:	d0f7      	beq.n	40500 <z_vprintk+0x1de>
				} else if (length_mod == 'L') {
   40510:	f1b8 0f4c 	cmp.w	r8, #76	; 0x4c
   40514:	d1f4      	bne.n	40500 <z_vprintk+0x1de>
					x = va_arg(ap, unsigned long long);
   40516:	3407      	adds	r4, #7
   40518:	f024 0307 	bic.w	r3, r4, #7
   4051c:	461c      	mov	r4, r3
   4051e:	f854 2b08 	ldr.w	r2, [r4], #8
   40522:	685b      	ldr	r3, [r3, #4]
   40524:	9204      	str	r2, [sp, #16]
	int digits = 0;
   40526:	2100      	movs	r1, #0
	int remaining = 16; /* 16 digits max */
   40528:	2210      	movs	r2, #16
	int shift = sizeof(num) * 8;
   4052a:	f04f 0b40 	mov.w	fp, #64	; 0x40
	int digits = 0;
   4052e:	9103      	str	r1, [sp, #12]
	int found_largest_digit = 0;
   40530:	9105      	str	r1, [sp, #20]
		shift -= 4;
   40532:	f1ab 0b04 	sub.w	fp, fp, #4
		nibble = (num >> shift) & 0xf;
   40536:	9804      	ldr	r0, [sp, #16]
   40538:	f1cb 0c20 	rsb	ip, fp, #32
   4053c:	f1ab 0120 	sub.w	r1, fp, #32
   40540:	fa20 f00b 	lsr.w	r0, r0, fp
   40544:	fa03 fc0c 	lsl.w	ip, r3, ip
   40548:	ea40 000c 	orr.w	r0, r0, ip
   4054c:	fa23 f101 	lsr.w	r1, r3, r1
   40550:	4308      	orrs	r0, r1
		if (nibble != 0 || found_largest_digit != 0 || shift == 0) {
   40552:	f010 000f 	ands.w	r0, r0, #15
   40556:	d106      	bne.n	40566 <z_vprintk+0x244>
   40558:	9905      	ldr	r1, [sp, #20]
   4055a:	b911      	cbnz	r1, 40562 <z_vprintk+0x240>
   4055c:	f1bb 0f00 	cmp.w	fp, #0
   40560:	d122      	bne.n	405a8 <z_vprintk+0x286>
			nibble += nibble > 9 ? 87 : 48;
   40562:	2130      	movs	r1, #48	; 0x30
   40564:	e003      	b.n	4056e <z_vprintk+0x24c>
   40566:	2809      	cmp	r0, #9
   40568:	bf8c      	ite	hi
   4056a:	2157      	movhi	r1, #87	; 0x57
   4056c:	2130      	movls	r1, #48	; 0x30
   4056e:	4408      	add	r0, r1
			out((int)nibble, ctx);
   40570:	b240      	sxtb	r0, r0
   40572:	4639      	mov	r1, r7
   40574:	9308      	str	r3, [sp, #32]
   40576:	9205      	str	r2, [sp, #20]
   40578:	47b0      	blx	r6
			digits++;
   4057a:	9b03      	ldr	r3, [sp, #12]
	while (shift >= 4) {
   4057c:	9a05      	ldr	r2, [sp, #20]
			digits++;
   4057e:	3301      	adds	r3, #1
   40580:	9303      	str	r3, [sp, #12]
	while (shift >= 4) {
   40582:	9b08      	ldr	r3, [sp, #32]
   40584:	f1bb 0f00 	cmp.w	fp, #0
   40588:	d123      	bne.n	405d2 <z_vprintk+0x2b0>
	if (padding == PAD_SPACE_AFTER) {
   4058a:	f1b9 0f03 	cmp.w	r9, #3
   4058e:	f47f af79 	bne.w	40484 <z_vprintk+0x162>
		remaining = min_width * 2 - digits;
   40592:	9b03      	ldr	r3, [sp, #12]
   40594:	ebc3 054a 	rsb	r5, r3, sl, lsl #1
		while (remaining-- > 0) {
   40598:	2d00      	cmp	r5, #0
   4059a:	f77f af73 	ble.w	40484 <z_vprintk+0x162>
			out(' ', ctx);
   4059e:	4639      	mov	r1, r7
   405a0:	2020      	movs	r0, #32
   405a2:	47b0      	blx	r6
   405a4:	3d01      	subs	r5, #1
   405a6:	e7f7      	b.n	40598 <z_vprintk+0x276>
		if (remaining-- <= min_width) {
   405a8:	1e51      	subs	r1, r2, #1
   405aa:	4592      	cmp	sl, r2
   405ac:	9108      	str	r1, [sp, #32]
   405ae:	db07      	blt.n	405c0 <z_vprintk+0x29e>
			if (padding == PAD_ZERO_BEFORE) {
   405b0:	f1b9 0f01 	cmp.w	r9, #1
   405b4:	d106      	bne.n	405c4 <z_vprintk+0x2a2>
				out('0', ctx);
   405b6:	4639      	mov	r1, r7
   405b8:	2030      	movs	r0, #48	; 0x30
   405ba:	9309      	str	r3, [sp, #36]	; 0x24
				out(' ', ctx);
   405bc:	47b0      	blx	r6
   405be:	9b09      	ldr	r3, [sp, #36]	; 0x24
			nibble += nibble > 9 ? 87 : 48;
   405c0:	9a08      	ldr	r2, [sp, #32]
   405c2:	e7b6      	b.n	40532 <z_vprintk+0x210>
			} else if (padding == PAD_SPACE_BEFORE) {
   405c4:	f1b9 0f02 	cmp.w	r9, #2
   405c8:	d1fa      	bne.n	405c0 <z_vprintk+0x29e>
   405ca:	9309      	str	r3, [sp, #36]	; 0x24
				out(' ', ctx);
   405cc:	4639      	mov	r1, r7
   405ce:	2020      	movs	r0, #32
   405d0:	e7f4      	b.n	405bc <z_vprintk+0x29a>
			found_largest_digit = 1;
   405d2:	9505      	str	r5, [sp, #20]
   405d4:	e7ad      	b.n	40532 <z_vprintk+0x210>
					out((int)(*s++), ctx);
   405d6:	4639      	mov	r1, r7
   405d8:	47b0      	blx	r6
   405da:	e6fa      	b.n	403d2 <z_vprintk+0xb0>
				out(c, ctx);
   405dc:	4639      	mov	r1, r7
   405de:	f854 0b04 	ldr.w	r0, [r4], #4
				out((int)'%', ctx);
   405e2:	47b0      	blx	r6
   405e4:	e74e      	b.n	40484 <z_vprintk+0x162>
				length_mod = 0;
   405e6:	46a8      	mov	r8, r5
				padding = PAD_NONE;
   405e8:	46a9      	mov	r9, r5
				min_width = -1;
   405ea:	f04f 3aff 	mov.w	sl, #4294967295
				might_format = 1;
   405ee:	2501      	movs	r5, #1
   405f0:	e6b0      	b.n	40354 <z_vprintk+0x32>
				padding = PAD_SPACE_AFTER;
   405f2:	f04f 0903 	mov.w	r9, #3
   405f6:	e6ad      	b.n	40354 <z_vprintk+0x32>
					padding = PAD_ZERO_BEFORE;
   405f8:	f04f 0901 	mov.w	r9, #1
   405fc:	e6aa      	b.n	40354 <z_vprintk+0x32>
			might_format = 0;
   405fe:	4605      	mov	r5, r0
   40600:	e6a8      	b.n	40354 <z_vprintk+0x32>

00040602 <printk>:
{
   40602:	b40f      	push	{r0, r1, r2, r3}
   40604:	b507      	push	{r0, r1, r2, lr}
   40606:	a904      	add	r1, sp, #16
   40608:	f851 0b04 	ldr.w	r0, [r1], #4
	va_start(ap, fmt);
   4060c:	9101      	str	r1, [sp, #4]
		vprintk(fmt, ap);
   4060e:	f7e1 f873 	bl	216f8 <vprintk>
}
   40612:	b003      	add	sp, #12
   40614:	f85d eb04 	ldr.w	lr, [sp], #4
   40618:	b004      	add	sp, #16
   4061a:	4770      	bx	lr

0004061c <snprintk>:
{
   4061c:	b40c      	push	{r2, r3}
   4061e:	b507      	push	{r0, r1, r2, lr}
   40620:	ab04      	add	r3, sp, #16
   40622:	f853 2b04 	ldr.w	r2, [r3], #4
	va_start(ap, fmt);
   40626:	9301      	str	r3, [sp, #4]
	ret = vsnprintk(str, size, fmt, ap);
   40628:	f7e1 f874 	bl	21714 <vsnprintk>
}
   4062c:	b003      	add	sp, #12
   4062e:	f85d eb04 	ldr.w	lr, [sp], #4
   40632:	b002      	add	sp, #8
   40634:	4770      	bx	lr

00040636 <sys_sem_give>:

	return 0;
}

int sys_sem_give(struct sys_sem *sem)
{
   40636:	b508      	push	{r3, lr}
	z_impl_k_sem_give(sem);
   40638:	f7fc ff24 	bl	3d484 <z_impl_k_sem_give>
	k_sem_give(&sem->kernel_sem);

	return 0;
}
   4063c:	2000      	movs	r0, #0
   4063e:	bd08      	pop	{r3, pc}

00040640 <sys_sem_take>:

int sys_sem_take(struct sys_sem *sem, s32_t timeout)
{
   40640:	b508      	push	{r3, lr}
	return z_impl_k_sem_take(sem, timeout);
   40642:	f7fc ff69 	bl	3d518 <z_impl_k_sem_take>
	int ret_value = 0;

	ret_value = k_sem_take(&sem->kernel_sem, timeout);
	if (ret_value == -EAGAIN || ret_value == -EBUSY) {
   40646:	f110 0f0b 	cmn.w	r0, #11
   4064a:	d005      	beq.n	40658 <sys_sem_take+0x18>
   4064c:	f110 0f10 	cmn.w	r0, #16
		ret_value = -ETIMEDOUT;
   40650:	bf08      	it	eq
   40652:	f06f 0073 	mvneq.w	r0, #115	; 0x73
	}

	return ret_value;
}
   40656:	bd08      	pop	{r3, pc}
		ret_value = -ETIMEDOUT;
   40658:	f06f 0073 	mvn.w	r0, #115	; 0x73
	return ret_value;
   4065c:	e7fb      	b.n	40656 <sys_sem_take+0x16>

0004065e <z_thread_entry>:
 * This routine does not return, and is marked as such so the compiler won't
 * generate preamble code that is only used by functions that actually return.
 */
FUNC_NORETURN void z_thread_entry(k_thread_entry_t entry,
				 void *p1, void *p2, void *p3)
{
   4065e:	4604      	mov	r4, r0
   40660:	b508      	push	{r3, lr}
   40662:	4608      	mov	r0, r1
   40664:	4611      	mov	r1, r2
	entry(p1, p2, p3);
   40666:	461a      	mov	r2, r3
   40668:	47a0      	blx	r4
	return z_impl_k_current_get();
   4066a:	f7fc ff05 	bl	3d478 <z_impl_k_current_get>
	z_impl_k_thread_abort(thread);
   4066e:	f7e6 fd1b 	bl	270a8 <z_impl_k_thread_abort>

00040672 <z_work_q_main>:

#include <kernel.h>
#define WORKQUEUE_THREAD_NAME	"workqueue"

void z_work_q_main(void *work_q_ptr, void *p2, void *p3)
{
   40672:	b510      	push	{r4, lr}
   40674:	4604      	mov	r4, r0
	return z_impl_k_queue_get(queue, timeout);
   40676:	f04f 31ff 	mov.w	r1, #4294967295
   4067a:	4620      	mov	r0, r4
   4067c:	f7fb fc78 	bl	3bf70 <z_impl_k_queue_get>
	while (true) {
		struct k_work *work;
		k_work_handler_t handler;

		work = k_queue_get(&work_q->queue, K_FOREVER);
		if (work == NULL) {
   40680:	4603      	mov	r3, r0
   40682:	2800      	cmp	r0, #0
   40684:	d0f7      	beq.n	40676 <z_work_q_main+0x4>
			continue;
		}

		handler = work->handler;
   40686:	6842      	ldr	r2, [r0, #4]
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   40688:	3308      	adds	r3, #8
   4068a:	e8d3 1fef 	ldaex	r1, [r3]
   4068e:	f021 0c01 	bic.w	ip, r1, #1
   40692:	e8c3 cfee 	stlex	lr, ip, [r3]
   40696:	f1be 0f00 	cmp.w	lr, #0
   4069a:	d1f6      	bne.n	4068a <z_work_q_main+0x18>

		/* Reset pending state so it can be resubmitted by handler */
		if (atomic_test_and_clear_bit(work->flags,
   4069c:	07cb      	lsls	r3, r1, #31
   4069e:	d500      	bpl.n	406a2 <z_work_q_main+0x30>
					      K_WORK_STATE_PENDING)) {
			handler(work);
   406a0:	4790      	blx	r2
	z_impl_k_yield();
   406a2:	f7fc fd6b 	bl	3d17c <z_impl_k_yield>
   406a6:	e7e6      	b.n	40676 <z_work_q_main+0x4>

000406a8 <ring_buf_space_get>:
	return z_ring_buf_custom_space_get(buf->size, buf->head, buf->tail);
   406a8:	6903      	ldr	r3, [r0, #16]
   406aa:	e9d0 2000 	ldrd	r2, r0, [r0]
	if (tail < head) {
   406ae:	4282      	cmp	r2, r0
	return (size - tail) + head - 1;
   406b0:	bf96      	itet	ls
   406b2:	189b      	addls	r3, r3, r2
		return head - tail - 1;
   406b4:	f102 33ff 	addhi.w	r3, r2, #4294967295
	return (size - tail) + head - 1;
   406b8:	f103 33ff 	addls.w	r3, r3, #4294967295
   406bc:	1a18      	subs	r0, r3, r0
}
   406be:	4770      	bx	lr

000406c0 <ring_buf_put_claim>:
	space = z_ring_buf_custom_space_get(buf->size, buf->head,
   406c0:	6803      	ldr	r3, [r0, #0]
{
   406c2:	b570      	push	{r4, r5, r6, lr}
	space = z_ring_buf_custom_space_get(buf->size, buf->head,
   406c4:	6884      	ldr	r4, [r0, #8]
   406c6:	6906      	ldr	r6, [r0, #16]
	if (tail < head) {
   406c8:	42a3      	cmp	r3, r4
	trail_size = buf->size - buf->misc.byte_mode.tmp_tail;
   406ca:	eba6 0504 	sub.w	r5, r6, r4
	return (size - tail) + head - 1;
   406ce:	bf98      	it	ls
   406d0:	199b      	addls	r3, r3, r6
	allocated = MIN(trail_size, size);
   406d2:	4295      	cmp	r5, r2
   406d4:	bf28      	it	cs
   406d6:	4615      	movcs	r5, r2
   406d8:	3b01      	subs	r3, #1
   406da:	1b1b      	subs	r3, r3, r4
   406dc:	42ab      	cmp	r3, r5
   406de:	bf28      	it	cs
   406e0:	462b      	movcs	r3, r5
	*data = &buf->buf.buf8[buf->misc.byte_mode.tmp_tail];
   406e2:	6942      	ldr	r2, [r0, #20]
   406e4:	4422      	add	r2, r4
		wrap(buf->misc.byte_mode.tmp_tail + allocated, buf->size);
   406e6:	441c      	add	r4, r3
	return val >= max ? (val - max) : val;
   406e8:	42a6      	cmp	r6, r4
   406ea:	bf98      	it	ls
   406ec:	1ba4      	subls	r4, r4, r6
	*data = &buf->buf.buf8[buf->misc.byte_mode.tmp_tail];
   406ee:	600a      	str	r2, [r1, #0]
	buf->misc.byte_mode.tmp_tail =
   406f0:	6084      	str	r4, [r0, #8]
}
   406f2:	4618      	mov	r0, r3
   406f4:	bd70      	pop	{r4, r5, r6, pc}

000406f6 <ring_buf_put_finish>:
{
   406f6:	b510      	push	{r4, lr}
   406f8:	4604      	mov	r4, r0
	if (size > ring_buf_space_get(buf)) {
   406fa:	f7ff ffd5 	bl	406a8 <ring_buf_space_get>
   406fe:	4288      	cmp	r0, r1
   40700:	d309      	bcc.n	40716 <ring_buf_put_finish+0x20>
	return 0;
   40702:	2000      	movs	r0, #0
	buf->tail = wrap(buf->tail + size, buf->size);
   40704:	6863      	ldr	r3, [r4, #4]
   40706:	4419      	add	r1, r3
   40708:	6923      	ldr	r3, [r4, #16]
	return val >= max ? (val - max) : val;
   4070a:	4299      	cmp	r1, r3
   4070c:	bf28      	it	cs
   4070e:	1ac9      	subcs	r1, r1, r3
	buf->misc.byte_mode.tmp_tail = buf->tail;
   40710:	e9c4 1101 	strd	r1, r1, [r4, #4]
}
   40714:	bd10      	pop	{r4, pc}
		return -EINVAL;
   40716:	f06f 0015 	mvn.w	r0, #21
   4071a:	e7fb      	b.n	40714 <ring_buf_put_finish+0x1e>

0004071c <ring_buf_get_claim>:
{
   4071c:	b5f0      	push	{r4, r5, r6, r7, lr}
		z_ring_buf_custom_space_get(buf->size,
   4071e:	e9d0 3603 	ldrd	r3, r6, [r0, #12]
   40722:	6844      	ldr	r4, [r0, #4]
	if (tail < head) {
   40724:	42a3      	cmp	r3, r4
	return (size - tail) + head - 1;
   40726:	bf95      	itete	ls
   40728:	18f7      	addls	r7, r6, r3
		return head - tail - 1;
   4072a:	f103 35ff 	addhi.w	r5, r3, #4294967295
	return (size - tail) + head - 1;
   4072e:	f107 37ff 	addls.w	r7, r7, #4294967295
		return head - tail - 1;
   40732:	1b2d      	subhi	r5, r5, r4
	return (size - tail) + head - 1;
   40734:	bf98      	it	ls
   40736:	1b3d      	subls	r5, r7, r4
	space = (buf->size - 1) -
   40738:	1e74      	subs	r4, r6, #1
   4073a:	1b64      	subs	r4, r4, r5
	trail_size = buf->size - buf->misc.byte_mode.tmp_head;
   4073c:	1af5      	subs	r5, r6, r3
	granted_size = MIN(trail_size, granted_size);
   4073e:	42aa      	cmp	r2, r5
   40740:	bf28      	it	cs
   40742:	462a      	movcs	r2, r5
   40744:	42a2      	cmp	r2, r4
   40746:	bf28      	it	cs
   40748:	4622      	movcs	r2, r4
	*data = &buf->buf.buf8[buf->misc.byte_mode.tmp_head];
   4074a:	6944      	ldr	r4, [r0, #20]
   4074c:	441c      	add	r4, r3
		wrap(buf->misc.byte_mode.tmp_head + granted_size, buf->size);
   4074e:	4413      	add	r3, r2
	return val >= max ? (val - max) : val;
   40750:	429e      	cmp	r6, r3
   40752:	bf98      	it	ls
   40754:	1b9b      	subls	r3, r3, r6
	*data = &buf->buf.buf8[buf->misc.byte_mode.tmp_head];
   40756:	600c      	str	r4, [r1, #0]
	buf->misc.byte_mode.tmp_head =
   40758:	60c3      	str	r3, [r0, #12]
}
   4075a:	4610      	mov	r0, r2
   4075c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0004075e <ring_buf_get_finish>:
{
   4075e:	b538      	push	{r3, r4, r5, lr}
	u32_t allocated = (buf->size - 1) - ring_buf_space_get(buf);
   40760:	6905      	ldr	r5, [r0, #16]
{
   40762:	4604      	mov	r4, r0
	u32_t allocated = (buf->size - 1) - ring_buf_space_get(buf);
   40764:	f7ff ffa0 	bl	406a8 <ring_buf_space_get>
   40768:	1e6b      	subs	r3, r5, #1
   4076a:	1a18      	subs	r0, r3, r0
	if (size > allocated) {
   4076c:	4288      	cmp	r0, r1
   4076e:	d308      	bcc.n	40782 <ring_buf_get_finish+0x24>
	return 0;
   40770:	2000      	movs	r0, #0
	buf->head = wrap(buf->head + size, buf->size);
   40772:	6823      	ldr	r3, [r4, #0]
   40774:	4419      	add	r1, r3
	return val >= max ? (val - max) : val;
   40776:	428d      	cmp	r5, r1
   40778:	bf98      	it	ls
   4077a:	1b49      	subls	r1, r1, r5
	buf->head = wrap(buf->head + size, buf->size);
   4077c:	6021      	str	r1, [r4, #0]
	buf->misc.byte_mode.tmp_head = buf->head;
   4077e:	60e1      	str	r1, [r4, #12]
}
   40780:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
   40782:	f06f 0015 	mvn.w	r0, #21
   40786:	e7fb      	b.n	40780 <ring_buf_get_finish+0x22>

00040788 <assert_post_action>:
	if (_is_user_context()) {
		k_oops();
	}
#endif

	k_panic();
   40788:	4040      	eors	r0, r0
   4078a:	f380 8811 	msr	BASEPRI, r0
   4078e:	f04f 0004 	mov.w	r0, #4
   40792:	df02      	svc	2
}
   40794:	4770      	bx	lr

00040796 <_ConfigAbsSyms>:
GEN_ABSOLUTE_SYM(CONFIG_BUILD_OUTPUT_BIN, 1);
GEN_ABSOLUTE_SYM(CONFIG_BOOTLOADER_MCUBOOT, 1);
GEN_ABSOLUTE_SYM(CONFIG_REBOOT, 1);
GEN_ABSOLUTE_SYM(CONFIG_COMPAT_INCLUDES, 1);

GEN_ABS_SYM_END
   40796:	4770      	bx	lr

00040798 <z_platform_init>:

void z_platform_init(void)
{
	SystemInit();
   40798:	f7fa bbec 	b.w	3af74 <SystemInit>

0004079c <fnmatchx>:
    return ok == negate ? NULL : pattern;
}


static int fnmatchx(const char *pattern, const char *string, int flags, size_t recursion)
{
   4079c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   407a0:	b087      	sub	sp, #28
   407a2:	468a      	mov	sl, r1
   407a4:	4614      	mov	r4, r2
   407a6:	9302      	str	r3, [sp, #8]
    const char *stringstart, *r;
    char c, test;

    if ((pattern == NULL) || (string == NULL))
   407a8:	4605      	mov	r5, r0
   407aa:	b918      	cbnz	r0, 407b4 <fnmatchx+0x18>
    {
        return FNM_NOMATCH;
   407ac:	2001      	movs	r0, #1
                return FNM_NOMATCH;
            break;
        }
    }
    /* NOTREACHED */
}
   407ae:	b007      	add	sp, #28
   407b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if ((pattern == NULL) || (string == NULL))
   407b4:	2900      	cmp	r1, #0
   407b6:	d0f9      	beq.n	407ac <fnmatchx+0x10>
    if (recursion-- == 0)
   407b8:	9b02      	ldr	r3, [sp, #8]
   407ba:	2b00      	cmp	r3, #0
   407bc:	f000 8114 	beq.w	409e8 <fnmatchx+0x24c>
   407c0:	460a      	mov	r2, r1
            if (*string == '.' && (flags & FNM_PERIOD) &&
   407c2:	f004 0304 	and.w	r3, r4, #4
   407c6:	9304      	str	r3, [sp, #16]
        switch (c = FOLDCASE(*pattern++, flags)) {
   407c8:	46a8      	mov	r8, r5
   407ca:	4621      	mov	r1, r4
   407cc:	f818 0b01 	ldrb.w	r0, [r8], #1
   407d0:	f7e1 f832 	bl	21838 <foldcase>
   407d4:	b2c0      	uxtb	r0, r0
   407d6:	283f      	cmp	r0, #63	; 0x3f
   407d8:	4606      	mov	r6, r0
   407da:	7817      	ldrb	r7, [r2, #0]
   407dc:	d022      	beq.n	40824 <fnmatchx+0x88>
   407de:	dc0a      	bgt.n	407f6 <fnmatchx+0x5a>
   407e0:	b1c0      	cbz	r0, 40814 <fnmatchx+0x78>
   407e2:	282a      	cmp	r0, #42	; 0x2a
   407e4:	d035      	beq.n	40852 <fnmatchx+0xb6>
            if (c != FOLDCASE(*string++, flags))
   407e6:	4621      	mov	r1, r4
   407e8:	4638      	mov	r0, r7
   407ea:	3201      	adds	r2, #1
   407ec:	f7e1 f824 	bl	21838 <foldcase>
   407f0:	4286      	cmp	r6, r0
   407f2:	d01e      	beq.n	40832 <fnmatchx+0x96>
   407f4:	e7da      	b.n	407ac <fnmatchx+0x10>
        switch (c = FOLDCASE(*pattern++, flags)) {
   407f6:	285b      	cmp	r0, #91	; 0x5b
   407f8:	d07a      	beq.n	408f0 <fnmatchx+0x154>
   407fa:	285c      	cmp	r0, #92	; 0x5c
   407fc:	d1f3      	bne.n	407e6 <fnmatchx+0x4a>
            if (!(flags & FNM_NOESCAPE)) {
   407fe:	07e3      	lsls	r3, r4, #31
   40800:	d4f1      	bmi.n	407e6 <fnmatchx+0x4a>
                if ((c = FOLDCASE(*pattern++, flags)) == EOS) {
   40802:	7868      	ldrb	r0, [r5, #1]
   40804:	f7e1 f818 	bl	21838 <foldcase>
   40808:	b2c6      	uxtb	r6, r0
   4080a:	2e00      	cmp	r6, #0
   4080c:	d0eb      	beq.n	407e6 <fnmatchx+0x4a>
   4080e:	f105 0802 	add.w	r8, r5, #2
   40812:	e7e8      	b.n	407e6 <fnmatchx+0x4a>
            if ((flags & FNM_LEADING_DIR) && *string == '/')
   40814:	06e4      	lsls	r4, r4, #27
   40816:	d501      	bpl.n	4081c <fnmatchx+0x80>
   40818:	2f2f      	cmp	r7, #47	; 0x2f
   4081a:	d0c8      	beq.n	407ae <fnmatchx+0x12>
            return *string == EOS ? 0 : FNM_NOMATCH;
   4081c:	1c38      	adds	r0, r7, #0
                        0 : FNM_NOMATCH;
   4081e:	bf18      	it	ne
   40820:	2001      	movne	r0, #1
   40822:	e7c4      	b.n	407ae <fnmatchx+0x12>
            if (*string == EOS)
   40824:	2f00      	cmp	r7, #0
   40826:	d0c1      	beq.n	407ac <fnmatchx+0x10>
            if (*string == '/' && (flags & FNM_PATHNAME))
   40828:	2f2f      	cmp	r7, #47	; 0x2f
   4082a:	d104      	bne.n	40836 <fnmatchx+0x9a>
   4082c:	07a1      	lsls	r1, r4, #30
   4082e:	d4bd      	bmi.n	407ac <fnmatchx+0x10>
            ++string;
   40830:	3201      	adds	r2, #1
            break;
   40832:	4645      	mov	r5, r8
   40834:	e7c8      	b.n	407c8 <fnmatchx+0x2c>
            if (*string == '.' && (flags & FNM_PERIOD) &&
   40836:	2f2e      	cmp	r7, #46	; 0x2e
   40838:	d1fa      	bne.n	40830 <fnmatchx+0x94>
   4083a:	9b04      	ldr	r3, [sp, #16]
   4083c:	2b00      	cmp	r3, #0
   4083e:	d0f7      	beq.n	40830 <fnmatchx+0x94>
   40840:	4552      	cmp	r2, sl
   40842:	d0b3      	beq.n	407ac <fnmatchx+0x10>
                (string == stringstart ||
   40844:	07a3      	lsls	r3, r4, #30
   40846:	d5f3      	bpl.n	40830 <fnmatchx+0x94>
                ((flags & FNM_PATHNAME) && *(string - 1) == '/')))
   40848:	f812 3c01 	ldrb.w	r3, [r2, #-1]
   4084c:	2b2f      	cmp	r3, #47	; 0x2f
   4084e:	d1ef      	bne.n	40830 <fnmatchx+0x94>
   40850:	e7ac      	b.n	407ac <fnmatchx+0x10>
            c = FOLDCASE(*pattern, flags);
   40852:	7868      	ldrb	r0, [r5, #1]
                c = FOLDCASE(*++pattern, flags);
   40854:	f7e0 fff0 	bl	21838 <foldcase>
   40858:	b2c1      	uxtb	r1, r0
            while (c == '*')
   4085a:	292a      	cmp	r1, #42	; 0x2a
   4085c:	d018      	beq.n	40890 <fnmatchx+0xf4>
            if (*string == '.' && (flags & FNM_PERIOD) &&
   4085e:	2f2e      	cmp	r7, #46	; 0x2e
   40860:	d109      	bne.n	40876 <fnmatchx+0xda>
   40862:	9b04      	ldr	r3, [sp, #16]
   40864:	b13b      	cbz	r3, 40876 <fnmatchx+0xda>
   40866:	4552      	cmp	r2, sl
   40868:	d0a0      	beq.n	407ac <fnmatchx+0x10>
                (string == stringstart ||
   4086a:	07a7      	lsls	r7, r4, #30
   4086c:	d503      	bpl.n	40876 <fnmatchx+0xda>
                ((flags & FNM_PATHNAME) && *(string - 1) == '/')))
   4086e:	f812 3c01 	ldrb.w	r3, [r2, #-1]
   40872:	2b2f      	cmp	r3, #47	; 0x2f
   40874:	d09a      	beq.n	407ac <fnmatchx+0x10>
            if (c == EOS) {
   40876:	b979      	cbnz	r1, 40898 <fnmatchx+0xfc>
                if (flags & FNM_PATHNAME)
   40878:	f014 0002 	ands.w	r0, r4, #2
   4087c:	d097      	beq.n	407ae <fnmatchx+0x12>
                        0 : FNM_NOMATCH;
   4087e:	06e6      	lsls	r6, r4, #27
   40880:	f100 80b4 	bmi.w	409ec <fnmatchx+0x250>
                        strchr(string, '/') == NULL ?
   40884:	212f      	movs	r1, #47	; 0x2f
   40886:	4610      	mov	r0, r2
   40888:	f004 fc55 	bl	45136 <strchr>
                        0 : FNM_NOMATCH;
   4088c:	3000      	adds	r0, #0
   4088e:	e7c6      	b.n	4081e <fnmatchx+0x82>
                c = FOLDCASE(*++pattern, flags);
   40890:	4621      	mov	r1, r4
   40892:	f818 0f01 	ldrb.w	r0, [r8, #1]!
   40896:	e7dd      	b.n	40854 <fnmatchx+0xb8>
            } else if (c == '/' && flags & FNM_PATHNAME) {
   40898:	292f      	cmp	r1, #47	; 0x2f
   4089a:	d101      	bne.n	408a0 <fnmatchx+0x104>
   4089c:	07a5      	lsls	r5, r4, #30
   4089e:	d420      	bmi.n	408e2 <fnmatchx+0x146>
   408a0:	4615      	mov	r5, r2
    if (recursion-- == 0)
   408a2:	9b02      	ldr	r3, [sp, #8]
                switch ((e = fnmatchx(pattern, string,
   408a4:	f024 0904 	bic.w	r9, r4, #4
    if (recursion-- == 0)
   408a8:	1e5f      	subs	r7, r3, #1
                if (test == '/' && flags & FNM_PATHNAME)
   408aa:	f004 0a02 	and.w	sl, r4, #2
   408ae:	46ab      	mov	fp, r5
            while ((test = FOLDCASE(*string, flags)) != EOS) {
   408b0:	4621      	mov	r1, r4
   408b2:	f89b 0000 	ldrb.w	r0, [fp]
   408b6:	f7e0 ffbf 	bl	21838 <foldcase>
   408ba:	b2c6      	uxtb	r6, r0
   408bc:	3501      	adds	r5, #1
   408be:	2e00      	cmp	r6, #0
   408c0:	f43f af74 	beq.w	407ac <fnmatchx+0x10>
                switch ((e = fnmatchx(pattern, string,
   408c4:	463b      	mov	r3, r7
   408c6:	464a      	mov	r2, r9
   408c8:	4659      	mov	r1, fp
   408ca:	4640      	mov	r0, r8
   408cc:	f7ff ff66 	bl	4079c <fnmatchx>
   408d0:	2801      	cmp	r0, #1
   408d2:	f47f af6c 	bne.w	407ae <fnmatchx+0x12>
                if (test == '/' && flags & FNM_PATHNAME)
   408d6:	2e2f      	cmp	r6, #47	; 0x2f
   408d8:	d1e9      	bne.n	408ae <fnmatchx+0x112>
   408da:	f1ba 0f00 	cmp.w	sl, #0
   408de:	d0e6      	beq.n	408ae <fnmatchx+0x112>
   408e0:	e764      	b.n	407ac <fnmatchx+0x10>
                if ((string = strchr(string, '/')) == NULL)
   408e2:	4610      	mov	r0, r2
   408e4:	f004 fc27 	bl	45136 <strchr>
   408e8:	4602      	mov	r2, r0
   408ea:	2800      	cmp	r0, #0
   408ec:	d1a1      	bne.n	40832 <fnmatchx+0x96>
   408ee:	e75d      	b.n	407ac <fnmatchx+0x10>
            if (*string == EOS)
   408f0:	2f00      	cmp	r7, #0
   408f2:	f43f af5b 	beq.w	407ac <fnmatchx+0x10>
            if (*string == '/' && flags & FNM_PATHNAME)
   408f6:	2f2f      	cmp	r7, #47	; 0x2f
   408f8:	d102      	bne.n	40900 <fnmatchx+0x164>
   408fa:	07a0      	lsls	r0, r4, #30
   408fc:	f53f af56 	bmi.w	407ac <fnmatchx+0x10>
            if ((r = rangematch(pattern,
   40900:	4621      	mov	r1, r4
   40902:	4638      	mov	r0, r7
   40904:	f7e0 ff98 	bl	21838 <foldcase>
   40908:	9000      	str	r0, [sp, #0]
    if (pattern == NULL)
   4090a:	f1b8 0f00 	cmp.w	r8, #0
   4090e:	f43f af4d 	beq.w	407ac <fnmatchx+0x10>
    if ((negate = (*pattern == '!' || *pattern == '^')) != 0)
   40912:	786b      	ldrb	r3, [r5, #1]
   40914:	2b21      	cmp	r3, #33	; 0x21
   40916:	d001      	beq.n	4091c <fnmatchx+0x180>
   40918:	2b5e      	cmp	r3, #94	; 0x5e
   4091a:	d126      	bne.n	4096a <fnmatchx+0x1ce>
        ++pattern;
   4091c:	2301      	movs	r3, #1
   4091e:	3502      	adds	r5, #2
    if ((negate = (*pattern == '!' || *pattern == '^')) != 0)
   40920:	9301      	str	r3, [sp, #4]
    need = 1;
   40922:	2301      	movs	r3, #1
    for (ok = 0; (c = FOLDCASE(*pattern++, flags)) != ']' || need;) {
   40924:	f04f 0b00 	mov.w	fp, #0
        if (c == '\\' && !(flags & FNM_NOESCAPE))
   40928:	ea04 0103 	and.w	r1, r4, r3
   4092c:	9103      	str	r1, [sp, #12]
    for (ok = 0; (c = FOLDCASE(*pattern++, flags)) != ']' || need;) {
   4092e:	462e      	mov	r6, r5
   40930:	4621      	mov	r1, r4
   40932:	f816 0b01 	ldrb.w	r0, [r6], #1
   40936:	9305      	str	r3, [sp, #20]
   40938:	f7e0 ff7e 	bl	21838 <foldcase>
   4093c:	fa5f f980 	uxtb.w	r9, r0
   40940:	f1b9 0f5d 	cmp.w	r9, #93	; 0x5d
   40944:	9b05      	ldr	r3, [sp, #20]
   40946:	d113      	bne.n	40970 <fnmatchx+0x1d4>
   40948:	bb2b      	cbnz	r3, 40996 <fnmatchx+0x1fa>
    return ok == negate ? NULL : pattern;
   4094a:	9b01      	ldr	r3, [sp, #4]
   4094c:	455b      	cmp	r3, fp
   4094e:	f43f af2d 	beq.w	407ac <fnmatchx+0x10>
            if ((r = rangematch(pattern,
   40952:	2e00      	cmp	r6, #0
   40954:	f43f af2a 	beq.w	407ac <fnmatchx+0x10>
            if (r == (void *)-1) {
   40958:	1c71      	adds	r1, r6, #1
   4095a:	d103      	bne.n	40964 <fnmatchx+0x1c8>
                if (*string != '[')
   4095c:	2f5b      	cmp	r7, #91	; 0x5b
   4095e:	f47f af25 	bne.w	407ac <fnmatchx+0x10>
   40962:	4646      	mov	r6, r8
            ++string;
   40964:	3201      	adds	r2, #1
            break;
   40966:	46b0      	mov	r8, r6
   40968:	e763      	b.n	40832 <fnmatchx+0x96>
    if ((negate = (*pattern == '!' || *pattern == '^')) != 0)
   4096a:	4645      	mov	r5, r8
   4096c:	2300      	movs	r3, #0
   4096e:	e7d7      	b.n	40920 <fnmatchx+0x184>
        if (c == '/')
   40970:	f1b9 0f2f 	cmp.w	r9, #47	; 0x2f
   40974:	d0f2      	beq.n	4095c <fnmatchx+0x1c0>
        if (c == '\\' && !(flags & FNM_NOESCAPE))
   40976:	f1b9 0f5c 	cmp.w	r9, #92	; 0x5c
   4097a:	d108      	bne.n	4098e <fnmatchx+0x1f2>
   4097c:	9b03      	ldr	r3, [sp, #12]
   4097e:	b953      	cbnz	r3, 40996 <fnmatchx+0x1fa>
            c = FOLDCASE(*pattern++, flags);
   40980:	4621      	mov	r1, r4
   40982:	7868      	ldrb	r0, [r5, #1]
   40984:	f7e0 ff58 	bl	21838 <foldcase>
   40988:	1cae      	adds	r6, r5, #2
   4098a:	fa5f f980 	uxtb.w	r9, r0
        if (c == EOS)
   4098e:	f1b9 0f00 	cmp.w	r9, #0
   40992:	f43f af0b 	beq.w	407ac <fnmatchx+0x10>
        if (*pattern == '-' 
   40996:	7833      	ldrb	r3, [r6, #0]
   40998:	2b2d      	cmp	r3, #45	; 0x2d
   4099a:	d11e      	bne.n	409da <fnmatchx+0x23e>
            && (c2 = FOLDCASE(*(pattern + 1), flags)) != EOS &&
   4099c:	4621      	mov	r1, r4
   4099e:	7870      	ldrb	r0, [r6, #1]
   409a0:	f7e0 ff4a 	bl	21838 <foldcase>
   409a4:	b2c0      	uxtb	r0, r0
   409a6:	b1c0      	cbz	r0, 409da <fnmatchx+0x23e>
   409a8:	285d      	cmp	r0, #93	; 0x5d
   409aa:	d016      	beq.n	409da <fnmatchx+0x23e>
            if (c2 == '\\' && !(flags & FNM_NOESCAPE))
   409ac:	285c      	cmp	r0, #92	; 0x5c
            pattern += 2;
   409ae:	f106 0502 	add.w	r5, r6, #2
            if (c2 == '\\' && !(flags & FNM_NOESCAPE))
   409b2:	d109      	bne.n	409c8 <fnmatchx+0x22c>
   409b4:	9b03      	ldr	r3, [sp, #12]
   409b6:	b93b      	cbnz	r3, 409c8 <fnmatchx+0x22c>
                c2 = FOLDCASE(*pattern++, flags);
   409b8:	78b0      	ldrb	r0, [r6, #2]
   409ba:	f7e0 ff3d 	bl	21838 <foldcase>
   409be:	b2c0      	uxtb	r0, r0
   409c0:	1cf5      	adds	r5, r6, #3
            if (c2 == EOS)
   409c2:	2800      	cmp	r0, #0
   409c4:	f43f aef2 	beq.w	407ac <fnmatchx+0x10>
            if (c <= test && test <= c2)
   409c8:	9b00      	ldr	r3, [sp, #0]
   409ca:	454b      	cmp	r3, r9
   409cc:	db03      	blt.n	409d6 <fnmatchx+0x23a>
                ok = 1;
   409ce:	4283      	cmp	r3, r0
   409d0:	bfd8      	it	le
   409d2:	f04f 0b01 	movle.w	fp, #1
   409d6:	2300      	movs	r3, #0
   409d8:	e7a9      	b.n	4092e <fnmatchx+0x192>
        } else if (c == test)
   409da:	9b00      	ldr	r3, [sp, #0]
   409dc:	4635      	mov	r5, r6
   409de:	454b      	cmp	r3, r9
   409e0:	bf08      	it	eq
   409e2:	f04f 0b01 	moveq.w	fp, #1
   409e6:	e7f6      	b.n	409d6 <fnmatchx+0x23a>
        return FNM_NORES;
   409e8:	2003      	movs	r0, #3
   409ea:	e6e0      	b.n	407ae <fnmatchx+0x12>
                return 0;
   409ec:	4608      	mov	r0, r1
   409ee:	e6de      	b.n	407ae <fnmatchx+0x12>

000409f0 <fnmatch>:

int fnmatch(const char *pattern, const char *string, int flags)
{
    return fnmatchx(pattern, string, flags, 64);
   409f0:	2340      	movs	r3, #64	; 0x40
   409f2:	f7ff bed3 	b.w	4079c <fnmatchx>

000409f6 <log_list_init>:

#include "log_list.h"

void log_list_init(struct log_list_t *list)
{
	list->tail = NULL;
   409f6:	2300      	movs	r3, #0
	list->head = NULL;
   409f8:	e9c0 3300 	strd	r3, r3, [r0]
}
   409fc:	4770      	bx	lr

000409fe <log_list_add_tail>:

void log_list_add_tail(struct log_list_t *list, struct log_msg *msg)
{
	if (list->head == NULL) {
   409fe:	6803      	ldr	r3, [r0, #0]
   40a00:	b923      	cbnz	r3, 40a0c <log_list_add_tail+0xe>
		list->head = msg;
   40a02:	6001      	str	r1, [r0, #0]
	} else {
		list->tail->next = msg;
	}

	list->tail = msg;
	msg->next = NULL;
   40a04:	2300      	movs	r3, #0
	list->tail = msg;
   40a06:	6041      	str	r1, [r0, #4]
	msg->next = NULL;
   40a08:	600b      	str	r3, [r1, #0]
}
   40a0a:	4770      	bx	lr
		list->tail->next = msg;
   40a0c:	6843      	ldr	r3, [r0, #4]
   40a0e:	6019      	str	r1, [r3, #0]
   40a10:	e7f8      	b.n	40a04 <log_list_add_tail+0x6>

00040a12 <log_list_head_peek>:

struct log_msg *log_list_head_peek(struct log_list_t *list)
{
	return list->head;
}
   40a12:	6800      	ldr	r0, [r0, #0]
   40a14:	4770      	bx	lr

00040a16 <log_list_head_get>:

struct log_msg *log_list_head_get(struct log_list_t *list)
{
	struct log_msg *msg = list->head;
   40a16:	6803      	ldr	r3, [r0, #0]

	if (list->head != NULL) {
   40a18:	b10b      	cbz	r3, 40a1e <log_list_head_get+0x8>
		list->head = list->head->next;
   40a1a:	681a      	ldr	r2, [r3, #0]
   40a1c:	6002      	str	r2, [r0, #0]
	}

	return msg;
}
   40a1e:	4618      	mov	r0, r3
   40a20:	4770      	bx	lr

00040a22 <log_backend_is_active>:
	return backend->cb->active;
   40a22:	6843      	ldr	r3, [r0, #4]
}
   40a24:	7958      	ldrb	r0, [r3, #5]
   40a26:	4770      	bx	lr

00040a28 <z_log_msg_std_alloc>:
{
   40a28:	b508      	push	{r3, lr}
	struct  log_msg *msg = (struct  log_msg *)log_msg_chunk_alloc();
   40a2a:	f7e1 fb27 	bl	2207c <log_msg_chunk_alloc>
	if (msg != NULL) {
   40a2e:	b118      	cbz	r0, 40a38 <z_log_msg_std_alloc+0x10>
		msg->hdr.ref_cnt = 1;
   40a30:	2301      	movs	r3, #1
   40a32:	6043      	str	r3, [r0, #4]
		msg->hdr.params.raw = 0U;
   40a34:	2300      	movs	r3, #0
   40a36:	8103      	strh	r3, [r0, #8]
		msg->hdr.params.std.type = LOG_MSG_TYPE_STD;
	}

	return msg;
}
   40a38:	bd08      	pop	{r3, pc}

00040a3a <k_cycle_get_32_wrapper>:
   40a3a:	f7e5 bca3 	b.w	26384 <z_timer_cycle_get_32>

00040a3e <dummy_timestamp>:
   40a3e:	2000      	movs	r0, #0
   40a40:	4770      	bx	lr

00040a42 <log_0>:
{
   40a42:	b538      	push	{r3, r4, r5, lr}
   40a44:	4605      	mov	r5, r0
   40a46:	460c      	mov	r4, r1
 *
 *  @return Pointer to allocated head of the message or NULL.
 */
static inline struct log_msg *log_msg_create_0(const char *str)
{
	struct log_msg *msg = z_log_msg_std_alloc();
   40a48:	f7ff ffee 	bl	40a28 <z_log_msg_std_alloc>

	if (msg != NULL) {
   40a4c:	b128      	cbz	r0, 40a5a <log_0+0x18>
		msg->str = str;
   40a4e:	6105      	str	r5, [r0, #16]
		msg_finalize(msg, src_level);
   40a50:	4621      	mov	r1, r4
}
   40a52:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		msg_finalize(msg, src_level);
   40a56:	f7e1 ba1f 	b.w	21e98 <msg_finalize>
}
   40a5a:	bd38      	pop	{r3, r4, r5, pc}

00040a5c <log_1>:
{
   40a5c:	b570      	push	{r4, r5, r6, lr}
   40a5e:	4604      	mov	r4, r0
   40a60:	460e      	mov	r6, r1
   40a62:	4615      	mov	r5, r2
 *  @return Pointer to allocated head of the message or NULL.
 */
static inline struct log_msg *log_msg_create_1(const char *str,
					       log_arg_t arg1)
{
	struct  log_msg *msg = z_log_msg_std_alloc();
   40a64:	f7ff ffe0 	bl	40a28 <z_log_msg_std_alloc>

	if (msg != NULL) {
   40a68:	b158      	cbz	r0, 40a82 <log_1+0x26>
		msg->str = str;
		msg->hdr.params.std.nargs = 1U;
   40a6a:	2201      	movs	r2, #1
		msg->str = str;
   40a6c:	6104      	str	r4, [r0, #16]
		msg->hdr.params.std.nargs = 1U;
   40a6e:	7a44      	ldrb	r4, [r0, #9]
		msg->payload.single.args[0] = arg1;
   40a70:	6146      	str	r6, [r0, #20]
		msg->hdr.params.std.nargs = 1U;
   40a72:	f362 1407 	bfi	r4, r2, #4, #4
   40a76:	7244      	strb	r4, [r0, #9]
		msg_finalize(msg, src_level);
   40a78:	4629      	mov	r1, r5
}
   40a7a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		msg_finalize(msg, src_level);
   40a7e:	f7e1 ba0b 	b.w	21e98 <msg_finalize>
}
   40a82:	bd70      	pop	{r4, r5, r6, pc}

00040a84 <log_2>:
{
   40a84:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   40a88:	4605      	mov	r5, r0
   40a8a:	4688      	mov	r8, r1
   40a8c:	4617      	mov	r7, r2
   40a8e:	461e      	mov	r6, r3
 */
static inline struct log_msg *log_msg_create_2(const char *str,
					       log_arg_t arg1,
					       log_arg_t arg2)
{
	struct  log_msg *msg = z_log_msg_std_alloc();
   40a90:	f7ff ffca 	bl	40a28 <z_log_msg_std_alloc>

	if (msg != NULL) {
   40a94:	b160      	cbz	r0, 40ab0 <log_2+0x2c>
		msg->str = str;
		msg->hdr.params.std.nargs = 2U;
   40a96:	2302      	movs	r3, #2
		msg->str = str;
   40a98:	6105      	str	r5, [r0, #16]
		msg->hdr.params.std.nargs = 2U;
   40a9a:	7a45      	ldrb	r5, [r0, #9]
		msg->payload.single.args[0] = arg1;
		msg->payload.single.args[1] = arg2;
   40a9c:	e9c0 8705 	strd	r8, r7, [r0, #20]
		msg->hdr.params.std.nargs = 2U;
   40aa0:	f363 1507 	bfi	r5, r3, #4, #4
   40aa4:	7245      	strb	r5, [r0, #9]
		msg_finalize(msg, src_level);
   40aa6:	4631      	mov	r1, r6
}
   40aa8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		msg_finalize(msg, src_level);
   40aac:	f7e1 b9f4 	b.w	21e98 <msg_finalize>
}
   40ab0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00040ab4 <log_3>:
{
   40ab4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   40ab8:	4605      	mov	r5, r0
   40aba:	4689      	mov	r9, r1
   40abc:	4690      	mov	r8, r2
   40abe:	461f      	mov	r7, r3
   40ac0:	f8bd 6020 	ldrh.w	r6, [sp, #32]
static inline struct log_msg *log_msg_create_3(const char *str,
					       log_arg_t arg1,
					       log_arg_t arg2,
					       log_arg_t arg3)
{
	struct  log_msg *msg = z_log_msg_std_alloc();
   40ac4:	f7ff ffb0 	bl	40a28 <z_log_msg_std_alloc>

	if (msg != NULL) {
   40ac8:	b168      	cbz	r0, 40ae6 <log_3+0x32>
		msg->str = str;
		msg->hdr.params.std.nargs = 3U;
   40aca:	2303      	movs	r3, #3
		msg->str = str;
   40acc:	6105      	str	r5, [r0, #16]
		msg->hdr.params.std.nargs = 3U;
   40ace:	7a45      	ldrb	r5, [r0, #9]
		msg->payload.single.args[0] = arg1;
		msg->payload.single.args[1] = arg2;
   40ad0:	e9c0 9805 	strd	r9, r8, [r0, #20]
		msg->hdr.params.std.nargs = 3U;
   40ad4:	f363 1507 	bfi	r5, r3, #4, #4
   40ad8:	7245      	strb	r5, [r0, #9]
		msg->payload.single.args[2] = arg3;
   40ada:	61c7      	str	r7, [r0, #28]
		msg_finalize(msg, src_level);
   40adc:	4631      	mov	r1, r6
}
   40ade:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
		msg_finalize(msg, src_level);
   40ae2:	f7e1 b9d9 	b.w	21e98 <msg_finalize>
}
   40ae6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

00040aea <log_n>:
{
   40aea:	b510      	push	{r4, lr}
   40aec:	461c      	mov	r4, r3
		struct log_msg *msg = log_msg_create_n(str, args, narg);
   40aee:	f7e1 fb19 	bl	22124 <log_msg_create_n>
		if (msg == NULL) {
   40af2:	b120      	cbz	r0, 40afe <log_n+0x14>
		msg_finalize(msg, src_level);
   40af4:	4621      	mov	r1, r4
}
   40af6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		msg_finalize(msg, src_level);
   40afa:	f7e1 b9cd 	b.w	21e98 <msg_finalize>
}
   40afe:	bd10      	pop	{r4, pc}

00040b00 <log_msg_hexdump_data_op>:
static void log_msg_hexdump_data_op(struct log_msg *msg,
				    u8_t *data,
				    size_t *length,
				    size_t offset,
				    bool put_op)
{
   40b00:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   40b04:	461c      	mov	r4, r3
	u32_t available_len = msg->hdr.params.hexdump.length;
   40b06:	8903      	ldrh	r3, [r0, #8]
{
   40b08:	460e      	mov	r6, r1
	u32_t available_len = msg->hdr.params.hexdump.length;
   40b0a:	089b      	lsrs	r3, r3, #2
	u8_t *head_data;
	u32_t chunk_len;
	u32_t req_len;
	u32_t cpy_len;

	if (offset >= available_len) {
   40b0c:	42a3      	cmp	r3, r4
{
   40b0e:	f89d 7020 	ldrb.w	r7, [sp, #32]
	if (offset >= available_len) {
   40b12:	d803      	bhi.n	40b1c <log_msg_hexdump_data_op+0x1c>
		*length = 0;
   40b14:	2300      	movs	r3, #0
   40b16:	6013      	str	r3, [r2, #0]
		offset = 0;
		cont = cont->next;
		req_len -= cpy_len;
		data += cpy_len;
	}
}
   40b18:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	if ((offset + *length) > available_len) {
   40b1c:	6811      	ldr	r1, [r2, #0]
   40b1e:	4421      	add	r1, r4
   40b20:	4299      	cmp	r1, r3
		*length = available_len - offset;
   40b22:	bf84      	itt	hi
   40b24:	1b19      	subhi	r1, r3, r4
   40b26:	6011      	strhi	r1, [r2, #0]
	if (available_len > LOG_MSG_HEXDUMP_BYTES_SINGLE_CHUNK) {
   40b28:	2b0c      	cmp	r3, #12
	req_len = *length;
   40b2a:	f8d2 9000 	ldr.w	r9, [r2]
	if (available_len > LOG_MSG_HEXDUMP_BYTES_SINGLE_CHUNK) {
   40b2e:	d928      	bls.n	40b82 <log_msg_hexdump_data_op+0x82>
	if (offset < chunk_len) {
   40b30:	2c07      	cmp	r4, #7
		cont = msg->payload.ext.next;
   40b32:	f8d0 8014 	ldr.w	r8, [r0, #20]
	if (offset < chunk_len) {
   40b36:	d82b      	bhi.n	40b90 <log_msg_hexdump_data_op+0x90>
		chunk_len = LOG_MSG_HEXDUMP_BYTES_HEAD_CHUNK;
   40b38:	2308      	movs	r3, #8
		head_data = msg->payload.ext.data.bytes;
   40b3a:	3018      	adds	r0, #24
		cpy_len = req_len > chunk_len ? chunk_len : req_len;
   40b3c:	454b      	cmp	r3, r9
   40b3e:	bf28      	it	cs
   40b40:	464b      	movcs	r3, r9
   40b42:	4420      	add	r0, r4
   40b44:	461d      	mov	r5, r3
   40b46:	461a      	mov	r2, r3
		if (put_op) {
   40b48:	b1ff      	cbz	r7, 40b8a <log_msg_hexdump_data_op+0x8a>
   40b4a:	4631      	mov	r1, r6
   40b4c:	f004 f980 	bl	44e50 <memcpy>
		req_len -= cpy_len;
   40b50:	eba9 0905 	sub.w	r9, r9, r5
		data += cpy_len;
   40b54:	442e      	add	r6, r5
	while (req_len > 0) {
   40b56:	f1b9 0f00 	cmp.w	r9, #0
   40b5a:	d0dd      	beq.n	40b18 <log_msg_hexdump_data_op+0x18>
		chunk_len = HEXDUMP_BYTES_CONT_MSG - offset;
   40b5c:	f1c4 051c 	rsb	r5, r4, #28
		cpy_len = req_len > chunk_len ? chunk_len : req_len;
   40b60:	454d      	cmp	r5, r9
   40b62:	bf28      	it	cs
   40b64:	464d      	movcs	r5, r9
		if (put_op) {
   40b66:	1d20      	adds	r0, r4, #4
   40b68:	4440      	add	r0, r8
   40b6a:	462a      	mov	r2, r5
   40b6c:	b1bf      	cbz	r7, 40b9e <log_msg_hexdump_data_op+0x9e>
   40b6e:	4631      	mov	r1, r6
   40b70:	f004 f96e 	bl	44e50 <memcpy>
		req_len -= cpy_len;
   40b74:	eba9 0905 	sub.w	r9, r9, r5
		cont = cont->next;
   40b78:	f8d8 8000 	ldr.w	r8, [r8]
		data += cpy_len;
   40b7c:	442e      	add	r6, r5
		offset = 0;
   40b7e:	2400      	movs	r4, #0
   40b80:	e7e9      	b.n	40b56 <log_msg_hexdump_data_op+0x56>
		head_data = msg->payload.single.bytes;
   40b82:	3014      	adds	r0, #20
	struct log_msg_cont *cont = NULL;
   40b84:	f04f 0800 	mov.w	r8, #0
   40b88:	e7d8      	b.n	40b3c <log_msg_hexdump_data_op+0x3c>
   40b8a:	4601      	mov	r1, r0
   40b8c:	4630      	mov	r0, r6
   40b8e:	e7dd      	b.n	40b4c <log_msg_hexdump_data_op+0x4c>
		offset -= chunk_len;
   40b90:	3c08      	subs	r4, #8
		while (offset >= chunk_len) {
   40b92:	2c1b      	cmp	r4, #27
   40b94:	d9df      	bls.n	40b56 <log_msg_hexdump_data_op+0x56>
			cont = cont->next;
   40b96:	f8d8 8000 	ldr.w	r8, [r8]
			offset -= chunk_len;
   40b9a:	3c1c      	subs	r4, #28
   40b9c:	e7f9      	b.n	40b92 <log_msg_hexdump_data_op+0x92>
   40b9e:	4601      	mov	r1, r0
   40ba0:	4630      	mov	r0, r6
   40ba2:	e7e5      	b.n	40b70 <log_msg_hexdump_data_op+0x70>

00040ba4 <log_msg_get>:
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
   40ba4:	3004      	adds	r0, #4
   40ba6:	e8d0 3fef 	ldaex	r3, [r0]
   40baa:	3301      	adds	r3, #1
   40bac:	e8c0 3fe2 	stlex	r2, r3, [r0]
   40bb0:	2a00      	cmp	r2, #0
   40bb2:	d1f8      	bne.n	40ba6 <log_msg_get+0x2>
}
   40bb4:	4770      	bx	lr

00040bb6 <log_msg_nargs_get>:
	return msg->hdr.params.std.nargs;
   40bb6:	7a40      	ldrb	r0, [r0, #9]
}
   40bb8:	0900      	lsrs	r0, r0, #4
   40bba:	4770      	bx	lr

00040bbc <log_msg_arg_get>:
	if (arg_idx >= msg->hdr.params.std.nargs) {
   40bbc:	7a43      	ldrb	r3, [r0, #9]
   40bbe:	091b      	lsrs	r3, r3, #4
   40bc0:	428b      	cmp	r3, r1
   40bc2:	d916      	bls.n	40bf2 <log_msg_arg_get+0x36>
	if (msg->hdr.params.std.nargs <= LOG_MSG_NARGS_SINGLE_CHUNK) {
   40bc4:	2b03      	cmp	r3, #3
   40bc6:	d803      	bhi.n	40bd0 <log_msg_arg_get+0x14>
		arg = msg->payload.single.args[arg_idx];
   40bc8:	eb00 0181 	add.w	r1, r0, r1, lsl #2
   40bcc:	6948      	ldr	r0, [r1, #20]
   40bce:	4770      	bx	lr
	if (arg_idx < LOG_MSG_NARGS_HEAD_CHUNK) {
   40bd0:	2901      	cmp	r1, #1
   40bd2:	d803      	bhi.n	40bdc <log_msg_arg_get+0x20>
		return msg->payload.ext.data.args[arg_idx];
   40bd4:	eb00 0181 	add.w	r1, r0, r1, lsl #2
   40bd8:	6988      	ldr	r0, [r1, #24]
   40bda:	4770      	bx	lr
	cont = msg->payload.ext.next;
   40bdc:	6943      	ldr	r3, [r0, #20]
	arg_idx -= LOG_MSG_NARGS_HEAD_CHUNK;
   40bde:	3902      	subs	r1, #2
	while (arg_idx >= ARGS_CONT_MSG) {
   40be0:	2906      	cmp	r1, #6
   40be2:	d803      	bhi.n	40bec <log_msg_arg_get+0x30>
	return cont->payload.args[arg_idx];
   40be4:	eb03 0181 	add.w	r1, r3, r1, lsl #2
   40be8:	6848      	ldr	r0, [r1, #4]
   40bea:	4770      	bx	lr
		arg_idx -= ARGS_CONT_MSG;
   40bec:	3907      	subs	r1, #7
		cont = cont->next;
   40bee:	681b      	ldr	r3, [r3, #0]
   40bf0:	e7f6      	b.n	40be0 <log_msg_arg_get+0x24>
		return 0;
   40bf2:	2000      	movs	r0, #0
}
   40bf4:	4770      	bx	lr

00040bf6 <log_msg_put>:
{
   40bf6:	4603      	mov	r3, r0
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
   40bf8:	1d02      	adds	r2, r0, #4
   40bfa:	e8d2 1fef 	ldaex	r1, [r2]
   40bfe:	3901      	subs	r1, #1
   40c00:	e8c2 1fec 	stlex	ip, r1, [r2]
   40c04:	f1bc 0f00 	cmp.w	ip, #0
   40c08:	d1f7      	bne.n	40bfa <log_msg_put+0x4>
	if (msg->hdr.ref_cnt == 0) {
   40c0a:	685b      	ldr	r3, [r3, #4]
   40c0c:	b90b      	cbnz	r3, 40c12 <log_msg_put+0x1c>
		msg_free(msg);
   40c0e:	f7e1 ba47 	b.w	220a0 <msg_free>
}
   40c12:	4770      	bx	lr

00040c14 <log_msg_str_get>:
}
   40c14:	6900      	ldr	r0, [r0, #16]
   40c16:	4770      	bx	lr

00040c18 <log_msg_hexdump_data_get>:

void log_msg_hexdump_data_get(struct log_msg *msg,
			      u8_t *data,
			      size_t *length,
			      size_t offset)
{
   40c18:	b513      	push	{r0, r1, r4, lr}
	log_msg_hexdump_data_op(msg, data, length, offset, false);
   40c1a:	2400      	movs	r4, #0
   40c1c:	9400      	str	r4, [sp, #0]
   40c1e:	f7ff ff6f 	bl	40b00 <log_msg_hexdump_data_op>
}
   40c22:	b002      	add	sp, #8
   40c24:	bd10      	pop	{r4, pc}

00040c26 <buffer_write>:
{
   40c26:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   40c28:	4606      	mov	r6, r0
   40c2a:	460d      	mov	r5, r1
   40c2c:	4614      	mov	r4, r2
   40c2e:	461f      	mov	r7, r3
		processed = outf(buf, len, ctx);
   40c30:	4621      	mov	r1, r4
   40c32:	4628      	mov	r0, r5
   40c34:	463a      	mov	r2, r7
   40c36:	47b0      	blx	r6
	} while (len != 0);
   40c38:	1a24      	subs	r4, r4, r0
		buf += processed;
   40c3a:	4405      	add	r5, r0
	} while (len != 0);
   40c3c:	d1f8      	bne.n	40c30 <buffer_write+0xa>
}
   40c3e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00040c40 <std_print>:
{
   40c40:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   40c44:	b08e      	sub	sp, #56	; 0x38
   40c46:	af0e      	add	r7, sp, #56	; 0x38
   40c48:	4681      	mov	r9, r0
   40c4a:	460d      	mov	r5, r1
	const char *str = log_msg_str_get(msg);
   40c4c:	f7ff ffe2 	bl	40c14 <log_msg_str_get>
   40c50:	4606      	mov	r6, r0
	u32_t nargs = log_msg_nargs_get(msg);
   40c52:	4648      	mov	r0, r9
   40c54:	f7ff ffaf 	bl	40bb6 <log_msg_nargs_get>
	for (i = 0; i < nargs; i++) {
   40c58:	f04f 0800 	mov.w	r8, #0
	u32_t nargs = log_msg_nargs_get(msg);
   40c5c:	4682      	mov	sl, r0
	u32_t *args = alloca(sizeof(u32_t)*nargs);
   40c5e:	0083      	lsls	r3, r0, #2
   40c60:	3307      	adds	r3, #7
   40c62:	f023 0307 	bic.w	r3, r3, #7
   40c66:	ebad 0d03 	sub.w	sp, sp, r3
   40c6a:	ac0e      	add	r4, sp, #56	; 0x38
	for (i = 0; i < nargs; i++) {
   40c6c:	45d0      	cmp	r8, sl
   40c6e:	d116      	bne.n	40c9e <std_print+0x5e>
	switch (log_msg_nargs_get(msg)) {
   40c70:	4648      	mov	r0, r9
   40c72:	f7ff ffa0 	bl	40bb6 <log_msg_nargs_get>
   40c76:	280f      	cmp	r0, #15
   40c78:	d81e      	bhi.n	40cb8 <std_print+0x78>
   40c7a:	e8df f010 	tbh	[pc, r0, lsl #1]
   40c7e:	0019      	.short	0x0019
   40c80:	00260020 	.word	0x00260020
   40c84:	0036002d 	.word	0x0036002d
   40c88:	004e0041 	.word	0x004e0041
   40c8c:	006e005d 	.word	0x006e005d
   40c90:	00960081 	.word	0x00960081
   40c94:	00c600ad 	.word	0x00c600ad
   40c98:	00fe00e1 	.word	0x00fe00e1
   40c9c:	011d      	.short	0x011d
		args[i] = log_msg_arg_get(msg, i);
   40c9e:	4641      	mov	r1, r8
   40ca0:	4648      	mov	r0, r9
   40ca2:	f7ff ff8b 	bl	40bbc <log_msg_arg_get>
   40ca6:	f844 0028 	str.w	r0, [r4, r8, lsl #2]
	for (i = 0; i < nargs; i++) {
   40caa:	f108 0801 	add.w	r8, r8, #1
   40cae:	e7dd      	b.n	40c6c <std_print+0x2c>
		print_formatted(log_output, str);
   40cb0:	4631      	mov	r1, r6
   40cb2:	4628      	mov	r0, r5
   40cb4:	f7e1 fa9e 	bl	221f4 <print_formatted>
}
   40cb8:	46bd      	mov	sp, r7
   40cba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		print_formatted(log_output, str, args[0]);
   40cbe:	6822      	ldr	r2, [r4, #0]
   40cc0:	4631      	mov	r1, r6
   40cc2:	4628      	mov	r0, r5
   40cc4:	f7e1 fa96 	bl	221f4 <print_formatted>
		break;
   40cc8:	e7f6      	b.n	40cb8 <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1]);
   40cca:	e9d4 2300 	ldrd	r2, r3, [r4]
   40cce:	4631      	mov	r1, r6
   40cd0:	4628      	mov	r0, r5
   40cd2:	f7e1 fa8f 	bl	221f4 <print_formatted>
		break;
   40cd6:	e7ef      	b.n	40cb8 <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2]);
   40cd8:	68a3      	ldr	r3, [r4, #8]
   40cda:	4631      	mov	r1, r6
   40cdc:	9300      	str	r3, [sp, #0]
   40cde:	e9d4 2300 	ldrd	r2, r3, [r4]
   40ce2:	4628      	mov	r0, r5
   40ce4:	f7e1 fa86 	bl	221f4 <print_formatted>
		break;
   40ce8:	e7e6      	b.n	40cb8 <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2],
   40cea:	68e3      	ldr	r3, [r4, #12]
   40cec:	4631      	mov	r1, r6
   40cee:	9301      	str	r3, [sp, #4]
   40cf0:	68a3      	ldr	r3, [r4, #8]
   40cf2:	4628      	mov	r0, r5
   40cf4:	9300      	str	r3, [sp, #0]
   40cf6:	e9d4 2300 	ldrd	r2, r3, [r4]
   40cfa:	f7e1 fa7b 	bl	221f4 <print_formatted>
		break;
   40cfe:	e7db      	b.n	40cb8 <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2],
   40d00:	6923      	ldr	r3, [r4, #16]
   40d02:	4631      	mov	r1, r6
   40d04:	9302      	str	r3, [sp, #8]
   40d06:	68e3      	ldr	r3, [r4, #12]
   40d08:	4628      	mov	r0, r5
   40d0a:	9301      	str	r3, [sp, #4]
   40d0c:	68a3      	ldr	r3, [r4, #8]
   40d0e:	9300      	str	r3, [sp, #0]
   40d10:	e9d4 2300 	ldrd	r2, r3, [r4]
   40d14:	f7e1 fa6e 	bl	221f4 <print_formatted>
		break;
   40d18:	e7ce      	b.n	40cb8 <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2],
   40d1a:	6963      	ldr	r3, [r4, #20]
   40d1c:	4631      	mov	r1, r6
   40d1e:	9303      	str	r3, [sp, #12]
   40d20:	6923      	ldr	r3, [r4, #16]
   40d22:	4628      	mov	r0, r5
   40d24:	9302      	str	r3, [sp, #8]
   40d26:	68e3      	ldr	r3, [r4, #12]
   40d28:	9301      	str	r3, [sp, #4]
   40d2a:	68a3      	ldr	r3, [r4, #8]
   40d2c:	9300      	str	r3, [sp, #0]
   40d2e:	e9d4 2300 	ldrd	r2, r3, [r4]
   40d32:	f7e1 fa5f 	bl	221f4 <print_formatted>
		break;
   40d36:	e7bf      	b.n	40cb8 <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2],
   40d38:	69a3      	ldr	r3, [r4, #24]
   40d3a:	4631      	mov	r1, r6
   40d3c:	9304      	str	r3, [sp, #16]
   40d3e:	6963      	ldr	r3, [r4, #20]
   40d40:	4628      	mov	r0, r5
   40d42:	9303      	str	r3, [sp, #12]
   40d44:	6923      	ldr	r3, [r4, #16]
   40d46:	9302      	str	r3, [sp, #8]
   40d48:	68e3      	ldr	r3, [r4, #12]
   40d4a:	9301      	str	r3, [sp, #4]
   40d4c:	68a3      	ldr	r3, [r4, #8]
   40d4e:	9300      	str	r3, [sp, #0]
   40d50:	e9d4 2300 	ldrd	r2, r3, [r4]
   40d54:	f7e1 fa4e 	bl	221f4 <print_formatted>
		break;
   40d58:	e7ae      	b.n	40cb8 <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2],
   40d5a:	69e3      	ldr	r3, [r4, #28]
   40d5c:	4631      	mov	r1, r6
   40d5e:	9305      	str	r3, [sp, #20]
   40d60:	69a3      	ldr	r3, [r4, #24]
   40d62:	4628      	mov	r0, r5
   40d64:	9304      	str	r3, [sp, #16]
   40d66:	6963      	ldr	r3, [r4, #20]
   40d68:	9303      	str	r3, [sp, #12]
   40d6a:	6923      	ldr	r3, [r4, #16]
   40d6c:	9302      	str	r3, [sp, #8]
   40d6e:	68e3      	ldr	r3, [r4, #12]
   40d70:	9301      	str	r3, [sp, #4]
   40d72:	68a3      	ldr	r3, [r4, #8]
   40d74:	9300      	str	r3, [sp, #0]
   40d76:	e9d4 2300 	ldrd	r2, r3, [r4]
   40d7a:	f7e1 fa3b 	bl	221f4 <print_formatted>
		break;
   40d7e:	e79b      	b.n	40cb8 <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2],
   40d80:	6a23      	ldr	r3, [r4, #32]
   40d82:	4631      	mov	r1, r6
   40d84:	9306      	str	r3, [sp, #24]
   40d86:	69e3      	ldr	r3, [r4, #28]
   40d88:	4628      	mov	r0, r5
   40d8a:	9305      	str	r3, [sp, #20]
   40d8c:	69a3      	ldr	r3, [r4, #24]
   40d8e:	9304      	str	r3, [sp, #16]
   40d90:	6963      	ldr	r3, [r4, #20]
   40d92:	9303      	str	r3, [sp, #12]
   40d94:	6923      	ldr	r3, [r4, #16]
   40d96:	9302      	str	r3, [sp, #8]
   40d98:	68e3      	ldr	r3, [r4, #12]
   40d9a:	9301      	str	r3, [sp, #4]
   40d9c:	68a3      	ldr	r3, [r4, #8]
   40d9e:	9300      	str	r3, [sp, #0]
   40da0:	e9d4 2300 	ldrd	r2, r3, [r4]
   40da4:	f7e1 fa26 	bl	221f4 <print_formatted>
		break;
   40da8:	e786      	b.n	40cb8 <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2],
   40daa:	6a63      	ldr	r3, [r4, #36]	; 0x24
   40dac:	4631      	mov	r1, r6
   40dae:	9307      	str	r3, [sp, #28]
   40db0:	6a23      	ldr	r3, [r4, #32]
   40db2:	4628      	mov	r0, r5
   40db4:	9306      	str	r3, [sp, #24]
   40db6:	69e3      	ldr	r3, [r4, #28]
   40db8:	9305      	str	r3, [sp, #20]
   40dba:	69a3      	ldr	r3, [r4, #24]
   40dbc:	9304      	str	r3, [sp, #16]
   40dbe:	6963      	ldr	r3, [r4, #20]
   40dc0:	9303      	str	r3, [sp, #12]
   40dc2:	6923      	ldr	r3, [r4, #16]
   40dc4:	9302      	str	r3, [sp, #8]
   40dc6:	68e3      	ldr	r3, [r4, #12]
   40dc8:	9301      	str	r3, [sp, #4]
   40dca:	68a3      	ldr	r3, [r4, #8]
   40dcc:	9300      	str	r3, [sp, #0]
   40dce:	e9d4 2300 	ldrd	r2, r3, [r4]
   40dd2:	f7e1 fa0f 	bl	221f4 <print_formatted>
		break;
   40dd6:	e76f      	b.n	40cb8 <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2],
   40dd8:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   40dda:	4631      	mov	r1, r6
   40ddc:	9308      	str	r3, [sp, #32]
   40dde:	6a63      	ldr	r3, [r4, #36]	; 0x24
   40de0:	4628      	mov	r0, r5
   40de2:	9307      	str	r3, [sp, #28]
   40de4:	6a23      	ldr	r3, [r4, #32]
   40de6:	9306      	str	r3, [sp, #24]
   40de8:	69e3      	ldr	r3, [r4, #28]
   40dea:	9305      	str	r3, [sp, #20]
   40dec:	69a3      	ldr	r3, [r4, #24]
   40dee:	9304      	str	r3, [sp, #16]
   40df0:	6963      	ldr	r3, [r4, #20]
   40df2:	9303      	str	r3, [sp, #12]
   40df4:	6923      	ldr	r3, [r4, #16]
   40df6:	9302      	str	r3, [sp, #8]
   40df8:	68e3      	ldr	r3, [r4, #12]
   40dfa:	9301      	str	r3, [sp, #4]
   40dfc:	68a3      	ldr	r3, [r4, #8]
   40dfe:	9300      	str	r3, [sp, #0]
   40e00:	e9d4 2300 	ldrd	r2, r3, [r4]
   40e04:	f7e1 f9f6 	bl	221f4 <print_formatted>
		break;
   40e08:	e756      	b.n	40cb8 <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2],
   40e0a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   40e0c:	4631      	mov	r1, r6
   40e0e:	9309      	str	r3, [sp, #36]	; 0x24
   40e10:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   40e12:	4628      	mov	r0, r5
   40e14:	9308      	str	r3, [sp, #32]
   40e16:	6a63      	ldr	r3, [r4, #36]	; 0x24
   40e18:	9307      	str	r3, [sp, #28]
   40e1a:	6a23      	ldr	r3, [r4, #32]
   40e1c:	9306      	str	r3, [sp, #24]
   40e1e:	69e3      	ldr	r3, [r4, #28]
   40e20:	9305      	str	r3, [sp, #20]
   40e22:	69a3      	ldr	r3, [r4, #24]
   40e24:	9304      	str	r3, [sp, #16]
   40e26:	6963      	ldr	r3, [r4, #20]
   40e28:	9303      	str	r3, [sp, #12]
   40e2a:	6923      	ldr	r3, [r4, #16]
   40e2c:	9302      	str	r3, [sp, #8]
   40e2e:	68e3      	ldr	r3, [r4, #12]
   40e30:	9301      	str	r3, [sp, #4]
   40e32:	68a3      	ldr	r3, [r4, #8]
   40e34:	9300      	str	r3, [sp, #0]
   40e36:	e9d4 2300 	ldrd	r2, r3, [r4]
   40e3a:	f7e1 f9db 	bl	221f4 <print_formatted>
		break;
   40e3e:	e73b      	b.n	40cb8 <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2],
   40e40:	6b23      	ldr	r3, [r4, #48]	; 0x30
   40e42:	4631      	mov	r1, r6
   40e44:	930a      	str	r3, [sp, #40]	; 0x28
   40e46:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   40e48:	4628      	mov	r0, r5
   40e4a:	9309      	str	r3, [sp, #36]	; 0x24
   40e4c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   40e4e:	9308      	str	r3, [sp, #32]
   40e50:	6a63      	ldr	r3, [r4, #36]	; 0x24
   40e52:	9307      	str	r3, [sp, #28]
   40e54:	6a23      	ldr	r3, [r4, #32]
   40e56:	9306      	str	r3, [sp, #24]
   40e58:	69e3      	ldr	r3, [r4, #28]
   40e5a:	9305      	str	r3, [sp, #20]
   40e5c:	69a3      	ldr	r3, [r4, #24]
   40e5e:	9304      	str	r3, [sp, #16]
   40e60:	6963      	ldr	r3, [r4, #20]
   40e62:	9303      	str	r3, [sp, #12]
   40e64:	6923      	ldr	r3, [r4, #16]
   40e66:	9302      	str	r3, [sp, #8]
   40e68:	68e3      	ldr	r3, [r4, #12]
   40e6a:	9301      	str	r3, [sp, #4]
   40e6c:	68a3      	ldr	r3, [r4, #8]
   40e6e:	9300      	str	r3, [sp, #0]
   40e70:	e9d4 2300 	ldrd	r2, r3, [r4]
   40e74:	f7e1 f9be 	bl	221f4 <print_formatted>
		break;
   40e78:	e71e      	b.n	40cb8 <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2],
   40e7a:	6b63      	ldr	r3, [r4, #52]	; 0x34
   40e7c:	4631      	mov	r1, r6
   40e7e:	930b      	str	r3, [sp, #44]	; 0x2c
   40e80:	6b23      	ldr	r3, [r4, #48]	; 0x30
   40e82:	4628      	mov	r0, r5
   40e84:	930a      	str	r3, [sp, #40]	; 0x28
   40e86:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   40e88:	9309      	str	r3, [sp, #36]	; 0x24
   40e8a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   40e8c:	9308      	str	r3, [sp, #32]
   40e8e:	6a63      	ldr	r3, [r4, #36]	; 0x24
   40e90:	9307      	str	r3, [sp, #28]
   40e92:	6a23      	ldr	r3, [r4, #32]
   40e94:	9306      	str	r3, [sp, #24]
   40e96:	69e3      	ldr	r3, [r4, #28]
   40e98:	9305      	str	r3, [sp, #20]
   40e9a:	69a3      	ldr	r3, [r4, #24]
   40e9c:	9304      	str	r3, [sp, #16]
   40e9e:	6963      	ldr	r3, [r4, #20]
   40ea0:	9303      	str	r3, [sp, #12]
   40ea2:	6923      	ldr	r3, [r4, #16]
   40ea4:	9302      	str	r3, [sp, #8]
   40ea6:	68e3      	ldr	r3, [r4, #12]
   40ea8:	9301      	str	r3, [sp, #4]
   40eaa:	68a3      	ldr	r3, [r4, #8]
   40eac:	9300      	str	r3, [sp, #0]
   40eae:	e9d4 2300 	ldrd	r2, r3, [r4]
   40eb2:	f7e1 f99f 	bl	221f4 <print_formatted>
		break;
   40eb6:	e6ff      	b.n	40cb8 <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2],
   40eb8:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   40eba:	4631      	mov	r1, r6
   40ebc:	930c      	str	r3, [sp, #48]	; 0x30
   40ebe:	6b63      	ldr	r3, [r4, #52]	; 0x34
   40ec0:	4628      	mov	r0, r5
   40ec2:	930b      	str	r3, [sp, #44]	; 0x2c
   40ec4:	6b23      	ldr	r3, [r4, #48]	; 0x30
   40ec6:	930a      	str	r3, [sp, #40]	; 0x28
   40ec8:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   40eca:	9309      	str	r3, [sp, #36]	; 0x24
   40ecc:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   40ece:	9308      	str	r3, [sp, #32]
   40ed0:	6a63      	ldr	r3, [r4, #36]	; 0x24
   40ed2:	9307      	str	r3, [sp, #28]
   40ed4:	6a23      	ldr	r3, [r4, #32]
   40ed6:	9306      	str	r3, [sp, #24]
   40ed8:	69e3      	ldr	r3, [r4, #28]
   40eda:	9305      	str	r3, [sp, #20]
   40edc:	69a3      	ldr	r3, [r4, #24]
   40ede:	9304      	str	r3, [sp, #16]
   40ee0:	6963      	ldr	r3, [r4, #20]
   40ee2:	9303      	str	r3, [sp, #12]
   40ee4:	6923      	ldr	r3, [r4, #16]
   40ee6:	9302      	str	r3, [sp, #8]
   40ee8:	68e3      	ldr	r3, [r4, #12]
   40eea:	9301      	str	r3, [sp, #4]
   40eec:	68a3      	ldr	r3, [r4, #8]
   40eee:	9300      	str	r3, [sp, #0]
   40ef0:	e9d4 2300 	ldrd	r2, r3, [r4]
   40ef4:	f7e1 f97e 	bl	221f4 <print_formatted>
}
   40ef8:	e6de      	b.n	40cb8 <std_print+0x78>

00040efa <log_output_flush>:
		     log_output->control_block->offset,
   40efa:	6842      	ldr	r2, [r0, #4]
{
   40efc:	b510      	push	{r4, lr}
	buffer_write(log_output->func, log_output->buf,
   40efe:	e9d2 2300 	ldrd	r2, r3, [r2]
{
   40f02:	4604      	mov	r4, r0
	buffer_write(log_output->func, log_output->buf,
   40f04:	6881      	ldr	r1, [r0, #8]
   40f06:	6800      	ldr	r0, [r0, #0]
   40f08:	f7ff fe8d 	bl	40c26 <buffer_write>
	log_output->control_block->offset = 0;
   40f0c:	2200      	movs	r2, #0
   40f0e:	6863      	ldr	r3, [r4, #4]
   40f10:	601a      	str	r2, [r3, #0]
}
   40f12:	bd10      	pop	{r4, pc}

00040f14 <log_halt>:
{
   40f14:	b508      	push	{r3, lr}
	log_backend_deactivate(backend);
   40f16:	4608      	mov	r0, r1
   40f18:	f7e1 fc6a 	bl	227f0 <log_backend_deactivate>
}
   40f1c:	2000      	movs	r0, #0
   40f1e:	bd08      	pop	{r3, pc}

00040f20 <log_go>:
{
   40f20:	b508      	push	{r3, lr}
	log_backend_activate(backend, backend->cb->ctx);
   40f22:	684b      	ldr	r3, [r1, #4]
{
   40f24:	4608      	mov	r0, r1
	log_backend_activate(backend, backend->cb->ctx);
   40f26:	6819      	ldr	r1, [r3, #0]
   40f28:	f7e1 fc7a 	bl	22820 <log_backend_activate>
}
   40f2c:	2000      	movs	r0, #0
   40f2e:	bd08      	pop	{r3, pc}

00040f30 <cmd_log_self_status>:
{
   40f30:	b570      	push	{r4, r5, r6, lr}
   40f32:	4604      	mov	r4, r0
   40f34:	460d      	mov	r5, r1
   40f36:	4616      	mov	r6, r2
	if (!shell_state_precheck(shell)) {
   40f38:	f7e1 fcea 	bl	22910 <shell_state_precheck>
   40f3c:	b130      	cbz	r0, 40f4c <cmd_log_self_status+0x1c>
	log_status(shell, shell->log_backend->backend, argc, argv);
   40f3e:	69e0      	ldr	r0, [r4, #28]
   40f40:	4633      	mov	r3, r6
   40f42:	6801      	ldr	r1, [r0, #0]
   40f44:	462a      	mov	r2, r5
   40f46:	4620      	mov	r0, r4
   40f48:	f7e1 fbe8 	bl	2271c <log_status>
}
   40f4c:	2000      	movs	r0, #0
   40f4e:	bd70      	pop	{r4, r5, r6, pc}

00040f50 <cmd_log_self_halt>:
{
   40f50:	b510      	push	{r4, lr}
   40f52:	4604      	mov	r4, r0
	if (!shell_state_precheck(shell)) {
   40f54:	f7e1 fcdc 	bl	22910 <shell_state_precheck>
   40f58:	b118      	cbz	r0, 40f62 <cmd_log_self_halt+0x12>
	return log_halt(shell, shell->log_backend->backend, argc, argv);
   40f5a:	69e3      	ldr	r3, [r4, #28]
	log_backend_deactivate(backend);
   40f5c:	6818      	ldr	r0, [r3, #0]
   40f5e:	f7e1 fc47 	bl	227f0 <log_backend_deactivate>
}
   40f62:	2000      	movs	r0, #0
   40f64:	bd10      	pop	{r4, pc}

00040f66 <cmd_log_self_go>:
{
   40f66:	b510      	push	{r4, lr}
   40f68:	4604      	mov	r4, r0
	if (!shell_state_precheck(shell)) {
   40f6a:	f7e1 fcd1 	bl	22910 <shell_state_precheck>
   40f6e:	b128      	cbz	r0, 40f7c <cmd_log_self_go+0x16>
	return log_go(shell, shell->log_backend->backend, argc, argv);
   40f70:	69e3      	ldr	r3, [r4, #28]
   40f72:	6818      	ldr	r0, [r3, #0]
	log_backend_activate(backend, backend->cb->ctx);
   40f74:	6843      	ldr	r3, [r0, #4]
   40f76:	6819      	ldr	r1, [r3, #0]
   40f78:	f7e1 fc52 	bl	22820 <log_backend_activate>
}
   40f7c:	2000      	movs	r0, #0
   40f7e:	bd10      	pop	{r4, pc}

00040f80 <cmd_log_self_enable>:
{
   40f80:	b570      	push	{r4, r5, r6, lr}
   40f82:	4604      	mov	r4, r0
   40f84:	460d      	mov	r5, r1
   40f86:	4616      	mov	r6, r2
	if (!shell_state_precheck(shell)) {
   40f88:	f7e1 fcc2 	bl	22910 <shell_state_precheck>
   40f8c:	b140      	cbz	r0, 40fa0 <cmd_log_self_enable+0x20>
	return log_enable(shell, shell->log_backend->backend, argc, argv);
   40f8e:	69e0      	ldr	r0, [r4, #28]
   40f90:	4633      	mov	r3, r6
   40f92:	462a      	mov	r2, r5
   40f94:	6801      	ldr	r1, [r0, #0]
   40f96:	4620      	mov	r0, r4
}
   40f98:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return log_enable(shell, shell->log_backend->backend, argc, argv);
   40f9c:	f7e1 bd30 	b.w	22a00 <log_enable>
}
   40fa0:	bd70      	pop	{r4, r5, r6, pc}

00040fa2 <log_disable>:
{
   40fa2:	b513      	push	{r0, r1, r4, lr}
	filters_set(shell, backend, argc - 1, &argv[1], LOG_LEVEL_NONE);
   40fa4:	2400      	movs	r4, #0
   40fa6:	3304      	adds	r3, #4
   40fa8:	9400      	str	r4, [sp, #0]
   40faa:	3a01      	subs	r2, #1
   40fac:	f7e1 fcc0 	bl	22930 <filters_set>
}
   40fb0:	4620      	mov	r0, r4
   40fb2:	b002      	add	sp, #8
   40fb4:	bd10      	pop	{r4, pc}

00040fb6 <cmd_log_self_disable>:
{
   40fb6:	b570      	push	{r4, r5, r6, lr}
   40fb8:	4604      	mov	r4, r0
   40fba:	460d      	mov	r5, r1
   40fbc:	4616      	mov	r6, r2
	if (!shell_state_precheck(shell)) {
   40fbe:	f7e1 fca7 	bl	22910 <shell_state_precheck>
   40fc2:	b140      	cbz	r0, 40fd6 <cmd_log_self_disable+0x20>
	return log_disable(shell, shell->log_backend->backend, argc, argv);
   40fc4:	69e0      	ldr	r0, [r4, #28]
   40fc6:	4633      	mov	r3, r6
   40fc8:	462a      	mov	r2, r5
   40fca:	6801      	ldr	r1, [r0, #0]
   40fcc:	4620      	mov	r0, r4
}
   40fce:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return log_disable(shell, shell->log_backend->backend, argc, argv);
   40fd2:	f7ff bfe6 	b.w	40fa2 <log_disable>
}
   40fd6:	bd70      	pop	{r4, r5, r6, pc}

00040fd8 <shell_signal_handle>:
{
   40fd8:	b573      	push	{r0, r1, r4, r5, r6, lr}
	struct k_poll_signal *signal = &shell->ctx->signals[sig_idx];
   40fda:	6884      	ldr	r4, [r0, #8]
   40fdc:	0109      	lsls	r1, r1, #4
   40fde:	f501 7117 	add.w	r1, r1, #604	; 0x25c
{
   40fe2:	4605      	mov	r5, r0
   40fe4:	4616      	mov	r6, r2
	struct k_poll_signal *signal = &shell->ctx->signals[sig_idx];
   40fe6:	440c      	add	r4, r1
	z_impl_k_poll_signal_check(signal, signaled, result);
   40fe8:	aa01      	add	r2, sp, #4
   40fea:	4669      	mov	r1, sp
   40fec:	4620      	mov	r0, r4
   40fee:	f003 ff05 	bl	44dfc <z_impl_k_poll_signal_check>
	if (set) {
   40ff2:	9b00      	ldr	r3, [sp, #0]
   40ff4:	b11b      	cbz	r3, 40ffe <shell_signal_handle+0x26>
	signal->signaled = 0U;
   40ff6:	2300      	movs	r3, #0
		handler(shell);
   40ff8:	4628      	mov	r0, r5
   40ffa:	60a3      	str	r3, [r4, #8]
   40ffc:	47b0      	blx	r6
}
   40ffe:	b002      	add	sp, #8
   41000:	bd70      	pop	{r4, r5, r6, pc}

00041002 <k_mutex_unlock>:
	return z_impl_k_mutex_unlock(mutex);
   41002:	f7fa be6f 	b.w	3bce4 <z_impl_k_mutex_unlock>

00041006 <shell_strlen>:
{
   41006:	b508      	push	{r3, lr}
	return str == NULL ? 0U : (u16_t)strlen(str);
   41008:	b110      	cbz	r0, 41010 <shell_strlen+0xa>
   4100a:	f7dc f885 	bl	1d118 <strlen>
   4100e:	b280      	uxth	r0, r0
}
   41010:	bd08      	pop	{r3, pc}

00041012 <shell_raw_fprintf>:
{
   41012:	b40e      	push	{r1, r2, r3}
   41014:	b503      	push	{r0, r1, lr}
   41016:	aa03      	add	r2, sp, #12
   41018:	f852 1b04 	ldr.w	r1, [r2], #4
	va_start(args, fmt);
   4101c:	9201      	str	r2, [sp, #4]
	shell_fprintf_fmt(ctx, fmt, args);
   4101e:	f7e2 fc9b 	bl	23958 <shell_fprintf_fmt>
}
   41022:	b002      	add	sp, #8
   41024:	f85d eb04 	ldr.w	lr, [sp], #4
   41028:	b003      	add	sp, #12
   4102a:	4770      	bx	lr

0004102c <shell_internal_help_print>:
{
   4102c:	b510      	push	{r4, lr}
   4102e:	4604      	mov	r4, r0
	shell_help_cmd_print(shell);
   41030:	f7e3 fa9a 	bl	24568 <shell_help_cmd_print>
	shell_help_subcmd_print(shell);
   41034:	4620      	mov	r0, r4
}
   41036:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	shell_help_subcmd_print(shell);
   4103a:	f7e3 ba07 	b.w	2444c <shell_help_subcmd_print>

0004103e <state_set.constprop.31>:
	shell->ctx->state = state;
   4103e:	2202      	movs	r2, #2
   41040:	6883      	ldr	r3, [r0, #8]
   41042:	711a      	strb	r2, [r3, #4]
	shell->ctx->cmd_buff[0] = '\0'; /* clear command buffer */
   41044:	2200      	movs	r2, #0
   41046:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
	shell->ctx->cmd_buff_pos = 0;
   4104a:	869a      	strh	r2, [r3, #52]	; 0x34
	shell->ctx->cmd_buff_len = 0;
   4104c:	865a      	strh	r2, [r3, #50]	; 0x32
		shell_print_prompt_and_cmd(shell);
   4104e:	f7e3 b88f 	b.w	24170 <shell_print_prompt_and_cmd>

00041052 <k_mutex_lock.constprop.35>:
	return z_impl_k_mutex_lock(mutex, timeout);
   41052:	f04f 31ff 	mov.w	r1, #4294967295
   41056:	f7fa bd67 	b.w	3bb28 <z_impl_k_mutex_lock>

0004105a <shell_log_process>:
	int signaled = 0;
   4105a:	2300      	movs	r3, #0
{
   4105c:	b573      	push	{r0, r1, r4, r5, r6, lr}
   4105e:	4604      	mov	r4, r0
	int signaled = 0;
   41060:	9300      	str	r3, [sp, #0]
			shell_cmd_line_erase(shell);
   41062:	4620      	mov	r0, r4
   41064:	f000 f976 	bl	41354 <shell_cmd_line_erase>
			processed = shell_log_backend_process(shell->log_backend);
   41068:	69e0      	ldr	r0, [r4, #28]
   4106a:	f000 fb47 	bl	416fc <shell_log_backend_process>
   4106e:	4606      	mov	r6, r0
		shell_print_prompt_and_cmd(shell);
   41070:	4620      	mov	r0, r4
		struct k_poll_signal *signal =
   41072:	68a5      	ldr	r5, [r4, #8]
		shell_print_prompt_and_cmd(shell);
   41074:	f7e3 f87c 	bl	24170 <shell_print_prompt_and_cmd>
		if (shell->ctx->cmd_buff_len) {
   41078:	68a3      	ldr	r3, [r4, #8]
		struct k_poll_signal *signal =
   4107a:	f505 7517 	add.w	r5, r5, #604	; 0x25c
		if (shell->ctx->cmd_buff_len) {
   4107e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
   41080:	b113      	cbz	r3, 41088 <shell_log_process+0x2e>
	return z_impl_k_sleep(ms);
   41082:	200f      	movs	r0, #15
   41084:	f7fc f9bc 	bl	3d400 <z_impl_k_sleep>
	z_impl_k_poll_signal_check(signal, signaled, result);
   41088:	aa01      	add	r2, sp, #4
   4108a:	4669      	mov	r1, sp
   4108c:	4628      	mov	r0, r5
   4108e:	f003 feb5 	bl	44dfc <z_impl_k_poll_signal_check>
	} while (processed && !signaled);
   41092:	b116      	cbz	r6, 4109a <shell_log_process+0x40>
   41094:	9b00      	ldr	r3, [sp, #0]
   41096:	2b00      	cmp	r3, #0
   41098:	d0e3      	beq.n	41062 <shell_log_process+0x8>
}
   4109a:	b002      	add	sp, #8
   4109c:	bd70      	pop	{r4, r5, r6, pc}

0004109e <transport_evt_handler>:
	signal = (evt_type == SHELL_TRANSPORT_EVT_RX_RDY) ?
   4109e:	688b      	ldr	r3, [r1, #8]
			&shell->ctx->signals[SHELL_SIGNAL_RXRDY] :
   410a0:	b920      	cbnz	r0, 410ac <transport_evt_handler+0xe>
   410a2:	f503 7017 	add.w	r0, r3, #604	; 0x25c
	return z_impl_k_poll_signal_raise(signal, result);
   410a6:	2100      	movs	r1, #0
   410a8:	f7fd bc18 	b.w	3e8dc <z_impl_k_poll_signal_raise>
   410ac:	f503 7023 	add.w	r0, r3, #652	; 0x28c
   410b0:	e7f9      	b.n	410a6 <transport_evt_handler+0x8>

000410b2 <shell_fprintf_buffer_flush>:


void shell_fprintf_buffer_flush(const struct shell_fprintf *sh_fprintf)
{
	sh_fprintf->fwrite(sh_fprintf->user_ctx, sh_fprintf->buffer,
   410b2:	6902      	ldr	r2, [r0, #16]
{
   410b4:	b510      	push	{r4, lr}
   410b6:	4604      	mov	r4, r0
	sh_fprintf->fwrite(sh_fprintf->user_ctx, sh_fprintf->buffer,
   410b8:	6883      	ldr	r3, [r0, #8]
   410ba:	6812      	ldr	r2, [r2, #0]
   410bc:	6801      	ldr	r1, [r0, #0]
   410be:	68c0      	ldr	r0, [r0, #12]
   410c0:	4798      	blx	r3
			   sh_fprintf->ctrl_blk->buffer_cnt);
	sh_fprintf->ctrl_blk->buffer_cnt = 0;
   410c2:	2200      	movs	r2, #0
   410c4:	6923      	ldr	r3, [r4, #16]
   410c6:	601a      	str	r2, [r3, #0]
}
   410c8:	bd10      	pop	{r4, pc}

000410ca <out_func>:
{
   410ca:	b538      	push	{r3, r4, r5, lr}
	if ((shell->shell_flag == SHELL_FLAG_OLF_CRLF) && (c == '\n')) {
   410cc:	68cb      	ldr	r3, [r1, #12]
{
   410ce:	4605      	mov	r5, r0
	if ((shell->shell_flag == SHELL_FLAG_OLF_CRLF) && (c == '\n')) {
   410d0:	7c1b      	ldrb	r3, [r3, #16]
{
   410d2:	460c      	mov	r4, r1
	if ((shell->shell_flag == SHELL_FLAG_OLF_CRLF) && (c == '\n')) {
   410d4:	2b02      	cmp	r3, #2
   410d6:	d104      	bne.n	410e2 <out_func+0x18>
   410d8:	280a      	cmp	r0, #10
   410da:	d102      	bne.n	410e2 <out_func+0x18>
		(void)out_func('\r', ctx);
   410dc:	200d      	movs	r0, #13
   410de:	f7ff fff4 	bl	410ca <out_func>
	sh_fprintf->buffer[sh_fprintf->ctrl_blk->buffer_cnt] = (u8_t)c;
   410e2:	6923      	ldr	r3, [r4, #16]
   410e4:	6822      	ldr	r2, [r4, #0]
   410e6:	681b      	ldr	r3, [r3, #0]
   410e8:	54d5      	strb	r5, [r2, r3]
	sh_fprintf->ctrl_blk->buffer_cnt++;
   410ea:	6922      	ldr	r2, [r4, #16]
   410ec:	6813      	ldr	r3, [r2, #0]
   410ee:	3301      	adds	r3, #1
   410f0:	6013      	str	r3, [r2, #0]
	if (sh_fprintf->ctrl_blk->buffer_cnt == sh_fprintf->buffer_size) {
   410f2:	6862      	ldr	r2, [r4, #4]
   410f4:	4293      	cmp	r3, r2
   410f6:	d102      	bne.n	410fe <out_func+0x34>
		shell_fprintf_buffer_flush(sh_fprintf);
   410f8:	4620      	mov	r0, r4
   410fa:	f7ff ffda 	bl	410b2 <shell_fprintf_buffer_flush>
}
   410fe:	2000      	movs	r0, #0
   41100:	bd38      	pop	{r3, r4, r5, pc}

00041102 <shell_strlen>:
{
   41102:	b508      	push	{r3, lr}
	return str == NULL ? 0U : (u16_t)strlen(str);
   41104:	b110      	cbz	r0, 4110c <shell_strlen+0xa>
   41106:	f7dc f807 	bl	1d118 <strlen>
   4110a:	b280      	uxth	r0, r0
}
   4110c:	bd08      	pop	{r3, pc}

0004110e <column_span_with_buffer_offsets_get>:
{
   4110e:	b510      	push	{r4, lr}
	return (1 + ((buffer_pos + cons->name_len) % cons->terminal_wid));
   41110:	7b03      	ldrb	r3, [r0, #12]
   41112:	8944      	ldrh	r4, [r0, #10]
   41114:	441a      	add	r2, r3
   41116:	4419      	add	r1, r3
   41118:	fbb2 f0f4 	udiv	r0, r2, r4
   4111c:	fbb1 f3f4 	udiv	r3, r1, r4
   41120:	fb04 2010 	mls	r0, r4, r0, r2
   41124:	fb04 1313 	mls	r3, r4, r3, r1
}
   41128:	1ac0      	subs	r0, r0, r3
   4112a:	bd10      	pop	{r4, pc}

0004112c <row_span_with_buffer_offsets_get>:
{
   4112c:	b510      	push	{r4, lr}
	return ((buffer_pos + cons->name_len) / cons->terminal_wid);
   4112e:	7b03      	ldrb	r3, [r0, #12]
   41130:	8944      	ldrh	r4, [r0, #10]
   41132:	441a      	add	r2, r3
   41134:	4419      	add	r1, r3
   41136:	fbb2 f0f4 	udiv	r0, r2, r4
   4113a:	fbb1 f1f4 	udiv	r1, r1, r4
}
   4113e:	1a40      	subs	r0, r0, r1
   41140:	bd10      	pop	{r4, pc}

00041142 <shell_multiline_data_calc>:
{
   41142:	b530      	push	{r4, r5, lr}
	cons->cur_x = (buff_pos + cons->name_len) % cons->terminal_wid + 1;
   41144:	7b04      	ldrb	r4, [r0, #12]
   41146:	8945      	ldrh	r5, [r0, #10]
   41148:	4421      	add	r1, r4
   4114a:	fbb1 f3f5 	udiv	r3, r1, r5
	cons->cur_y_end = (buff_len + cons->name_len) / cons->terminal_wid + 1;
   4114e:	4422      	add	r2, r4
	cons->cur_x = (buff_pos + cons->name_len) % cons->terminal_wid + 1;
   41150:	fb05 1113 	mls	r1, r5, r3, r1
	cons->cur_y = (buff_pos + cons->name_len) / cons->terminal_wid + 1;
   41154:	3301      	adds	r3, #1
   41156:	8083      	strh	r3, [r0, #4]
	cons->cur_y_end = (buff_len + cons->name_len) / cons->terminal_wid + 1;
   41158:	fbb2 f3f5 	udiv	r3, r2, r5
	cons->cur_x = (buff_pos + cons->name_len) % cons->terminal_wid + 1;
   4115c:	3101      	adds	r1, #1
   4115e:	8001      	strh	r1, [r0, #0]
	cons->cur_y_end = (buff_len + cons->name_len) / cons->terminal_wid + 1;
   41160:	1c59      	adds	r1, r3, #1
	cons->cur_x_end = (buff_len + cons->name_len) % cons->terminal_wid + 1;
   41162:	fb05 2313 	mls	r3, r5, r3, r2
   41166:	3301      	adds	r3, #1
	cons->cur_y_end = (buff_len + cons->name_len) / cons->terminal_wid + 1;
   41168:	80c1      	strh	r1, [r0, #6]
	cons->cur_x_end = (buff_len + cons->name_len) % cons->terminal_wid + 1;
   4116a:	8043      	strh	r3, [r0, #2]
}
   4116c:	bd30      	pop	{r4, r5, pc}

0004116e <shell_pattern_remove>:
{
   4116e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   41170:	460e      	mov	r6, r1
	char *pattern_addr = strstr(buff, pattern);
   41172:	4611      	mov	r1, r2
{
   41174:	4615      	mov	r5, r2
   41176:	4607      	mov	r7, r0
	char *pattern_addr = strstr(buff, pattern);
   41178:	f004 f82b 	bl	451d2 <strstr>
   4117c:	4604      	mov	r4, r0
	u16_t pattern_len = shell_strlen(pattern);
   4117e:	4628      	mov	r0, r5
   41180:	f7ff ffbf 	bl	41102 <shell_strlen>
   41184:	4605      	mov	r5, r0
	if (!pattern_addr) {
   41186:	b1c4      	cbz	r4, 411ba <shell_pattern_remove+0x4c>
	if (pattern_addr > buff) {
   41188:	42a7      	cmp	r7, r4
   4118a:	d207      	bcs.n	4119c <shell_pattern_remove+0x2e>
		if (*(pattern_addr - 1) == ' ') {
   4118c:	f814 3c01 	ldrb.w	r3, [r4, #-1]
   41190:	2b20      	cmp	r3, #32
			pattern_len++; /* space needs to be removed as well */
   41192:	bf02      	ittt	eq
   41194:	3501      	addeq	r5, #1
   41196:	b2ad      	uxtheq	r5, r5
			pattern_addr--; /* set pointer to space */
   41198:	f104 34ff 	addeq.w	r4, r4, #4294967295
	shift = shell_strlen(pattern_addr) - pattern_len + 1; /* +1 for EOS */
   4119c:	4620      	mov	r0, r4
   4119e:	f7ff ffb0 	bl	41102 <shell_strlen>
	*buff_len -= pattern_len;
   411a2:	8833      	ldrh	r3, [r6, #0]
	shift = shell_strlen(pattern_addr) - pattern_len + 1; /* +1 for EOS */
   411a4:	1b42      	subs	r2, r0, r5
	*buff_len -= pattern_len;
   411a6:	1b5b      	subs	r3, r3, r5
	shift = shell_strlen(pattern_addr) - pattern_len + 1; /* +1 for EOS */
   411a8:	3201      	adds	r2, #1
	*buff_len -= pattern_len;
   411aa:	8033      	strh	r3, [r6, #0]
__ssp_bos_icheck3(memmove, void *, const void *)
   411ac:	1961      	adds	r1, r4, r5
   411ae:	4620      	mov	r0, r4
}
   411b0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   411b4:	b292      	uxth	r2, r2
   411b6:	f003 be6b 	b.w	44e90 <memmove>
   411ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000411bc <shell_get_last_command>:
{
   411bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	*match_arg = SHELL_CMD_ROOT_LVL;
   411c0:	2400      	movs	r4, #0
{
   411c2:	461d      	mov	r5, r3
   411c4:	4681      	mov	r9, r0
   411c6:	4688      	mov	r8, r1
   411c8:	4617      	mov	r7, r2
	const struct shell_static_entry *entry = NULL;
   411ca:	46a2      	mov	sl, r4
{
   411cc:	b087      	sub	sp, #28
   411ce:	f89d 3044 	ldrb.w	r3, [sp, #68]	; 0x44
	*match_arg = SHELL_CMD_ROOT_LVL;
   411d2:	602c      	str	r4, [r5, #0]
{
   411d4:	9303      	str	r3, [sp, #12]
	while (*match_arg < argc) {
   411d6:	682b      	ldr	r3, [r5, #0]
   411d8:	4543      	cmp	r3, r8
   411da:	d303      	bcc.n	411e4 <shell_get_last_command+0x28>
}
   411dc:	4650      	mov	r0, sl
   411de:	b007      	add	sp, #28
   411e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			if (shell_wildcard_character_exist(argv[*match_arg])) {
   411e4:	f857 0023 	ldr.w	r0, [r7, r3, lsl #2]
   411e8:	f000 faf4 	bl	417d4 <shell_wildcard_character_exist>
   411ec:	682e      	ldr	r6, [r5, #0]
   411ee:	b110      	cbz	r0, 411f6 <shell_get_last_command+0x3a>
				(*match_arg)++;
   411f0:	3601      	adds	r6, #1
   411f2:	602e      	str	r6, [r5, #0]
				continue;
   411f4:	e7ef      	b.n	411d6 <shell_get_last_command+0x1a>
	size_t idx = 0;
   411f6:	4603      	mov	r3, r0
		entry = find_cmd(shell, cmd, *match_arg, argv[*match_arg],
   411f8:	f857 b026 	ldr.w	fp, [r7, r6, lsl #2]
	const struct shell_static_entry *entry = NULL;
   411fc:	9005      	str	r0, [sp, #20]
		shell_cmd_get(shell, cmd, lvl, idx++, &entry, d_entry);
   411fe:	9a10      	ldr	r2, [sp, #64]	; 0x40
   41200:	4621      	mov	r1, r4
   41202:	9201      	str	r2, [sp, #4]
   41204:	aa05      	add	r2, sp, #20
   41206:	9200      	str	r2, [sp, #0]
   41208:	4648      	mov	r0, r9
   4120a:	4632      	mov	r2, r6
   4120c:	f103 0a01 	add.w	sl, r3, #1
   41210:	f7e2 fc7c 	bl	23b0c <shell_cmd_get>
		if (entry && (strcmp(cmd_str, entry->syntax) == 0)) {
   41214:	9b05      	ldr	r3, [sp, #20]
   41216:	b13b      	cbz	r3, 41228 <shell_get_last_command+0x6c>
   41218:	6819      	ldr	r1, [r3, #0]
   4121a:	4658      	mov	r0, fp
   4121c:	f7db ff72 	bl	1d104 <strcmp>
   41220:	9a05      	ldr	r2, [sp, #20]
   41222:	b920      	cbnz	r0, 4122e <shell_get_last_command+0x72>
		if (entry) {
   41224:	4692      	mov	sl, r2
   41226:	b932      	cbnz	r2, 41236 <shell_get_last_command+0x7a>
   41228:	f04f 0a00 	mov.w	sl, #0
   4122c:	e7d6      	b.n	411dc <shell_get_last_command+0x20>
		shell_cmd_get(shell, cmd, lvl, idx++, &entry, d_entry);
   4122e:	4653      	mov	r3, sl
	} while (entry);
   41230:	2a00      	cmp	r2, #0
   41232:	d1e4      	bne.n	411fe <shell_get_last_command+0x42>
   41234:	e7f8      	b.n	41228 <shell_get_last_command+0x6c>
			(*match_arg)++;
   41236:	682b      	ldr	r3, [r5, #0]
			cmd = entry->subcmd;
   41238:	6894      	ldr	r4, [r2, #8]
			(*match_arg)++;
   4123a:	1c5a      	adds	r2, r3, #1
   4123c:	602a      	str	r2, [r5, #0]
		if (cmd == NULL) {
   4123e:	2c00      	cmp	r4, #0
   41240:	d0f2      	beq.n	41228 <shell_get_last_command+0x6c>
		if (only_static && cmd->is_dynamic) {
   41242:	9a03      	ldr	r2, [sp, #12]
   41244:	2a00      	cmp	r2, #0
   41246:	d0c6      	beq.n	411d6 <shell_get_last_command+0x1a>
   41248:	7822      	ldrb	r2, [r4, #0]
   4124a:	2a00      	cmp	r2, #0
   4124c:	d0c3      	beq.n	411d6 <shell_get_last_command+0x1a>
			(*match_arg)--;
   4124e:	602b      	str	r3, [r5, #0]
			return NULL;
   41250:	e7ea      	b.n	41228 <shell_get_last_command+0x6c>

00041252 <shell_raw_fprintf>:
{
   41252:	b40e      	push	{r1, r2, r3}
   41254:	b503      	push	{r0, r1, lr}
   41256:	aa03      	add	r2, sp, #12
   41258:	f852 1b04 	ldr.w	r1, [r2], #4
	va_start(args, fmt);
   4125c:	9201      	str	r2, [sp, #4]
	shell_fprintf_fmt(ctx, fmt, args);
   4125e:	f7e2 fb7b 	bl	23958 <shell_fprintf_fmt>
}
   41262:	b002      	add	sp, #8
   41264:	f85d eb04 	ldr.w	lr, [sp], #4
   41268:	b003      	add	sp, #12
   4126a:	4770      	bx	lr

0004126c <full_line_cmd.isra.8>:
static inline bool full_line_cmd(const struct shell *shell)
   4126c:	b538      	push	{r3, r4, r5, lr}
	return ((shell->ctx->cmd_buff_len + shell_strlen(shell->ctx->prompt))
   4126e:	6803      	ldr	r3, [r0, #0]
static inline bool full_line_cmd(const struct shell *shell)
   41270:	4604      	mov	r4, r0
	return ((shell->ctx->cmd_buff_len + shell_strlen(shell->ctx->prompt))
   41272:	6818      	ldr	r0, [r3, #0]
   41274:	8e5d      	ldrh	r5, [r3, #50]	; 0x32
	return str == NULL ? 0U : (u16_t)strlen(str);
   41276:	b110      	cbz	r0, 4127e <full_line_cmd.isra.8+0x12>
   41278:	f7db ff4e 	bl	1d118 <strlen>
   4127c:	b280      	uxth	r0, r0
			% shell->ctx->vt100_ctx.cons.terminal_wid == 0U);
   4127e:	6823      	ldr	r3, [r4, #0]
	return ((shell->ctx->cmd_buff_len + shell_strlen(shell->ctx->prompt))
   41280:	4428      	add	r0, r5
			% shell->ctx->vt100_ctx.cons.terminal_wid == 0U);
   41282:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
   41284:	fbb0 f3f2 	udiv	r3, r0, r2
   41288:	fb02 0013 	mls	r0, r2, r3, r0
}
   4128c:	fab0 f080 	clz	r0, r0
   41290:	0940      	lsrs	r0, r0, #5
   41292:	bd38      	pop	{r3, r4, r5, pc}

00041294 <shell_cursor_in_empty_line>:
{
   41294:	b538      	push	{r3, r4, r5, lr}
	return ((shell->ctx->cmd_buff_pos + shell_strlen(shell->ctx->prompt))
   41296:	6883      	ldr	r3, [r0, #8]
{
   41298:	4604      	mov	r4, r0
	return ((shell->ctx->cmd_buff_pos + shell_strlen(shell->ctx->prompt))
   4129a:	6818      	ldr	r0, [r3, #0]
   4129c:	8e9d      	ldrh	r5, [r3, #52]	; 0x34
   4129e:	b110      	cbz	r0, 412a6 <shell_cursor_in_empty_line+0x12>
   412a0:	f7db ff3a 	bl	1d118 <strlen>
   412a4:	b280      	uxth	r0, r0
			% shell->ctx->vt100_ctx.cons.terminal_wid == 0U);
   412a6:	68a3      	ldr	r3, [r4, #8]
	return ((shell->ctx->cmd_buff_pos + shell_strlen(shell->ctx->prompt))
   412a8:	4428      	add	r0, r5
			% shell->ctx->vt100_ctx.cons.terminal_wid == 0U);
   412aa:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
   412ac:	fbb0 f3f2 	udiv	r3, r0, r2
   412b0:	fb02 0013 	mls	r0, r2, r3, r0
}
   412b4:	fab0 f080 	clz	r0, r0
   412b8:	0940      	lsrs	r0, r0, #5
   412ba:	bd38      	pop	{r3, r4, r5, pc}

000412bc <shell_op_cursor_move>:
{
   412bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   412be:	4604      	mov	r4, r0
	struct shell_multiline_cons *cons = &shell->ctx->vt100_ctx.cons;
   412c0:	6880      	ldr	r0, [r0, #8]
	u16_t new_pos = shell->ctx->cmd_buff_pos + val;
   412c2:	8e83      	ldrh	r3, [r0, #52]	; 0x34
	shell_multiline_data_calc(cons, shell->ctx->cmd_buff_pos,
   412c4:	8e42      	ldrh	r2, [r0, #50]	; 0x32
	u16_t new_pos = shell->ctx->cmd_buff_pos + val;
   412c6:	4419      	add	r1, r3
   412c8:	b28d      	uxth	r5, r1
	shell_multiline_data_calc(cons, shell->ctx->cmd_buff_pos,
   412ca:	3020      	adds	r0, #32
   412cc:	4619      	mov	r1, r3
   412ce:	f7ff ff38 	bl	41142 <shell_multiline_data_calc>
	row_span = row_span_with_buffer_offsets_get(&shell->ctx->vt100_ctx.cons,
   412d2:	68a0      	ldr	r0, [r4, #8]
   412d4:	462a      	mov	r2, r5
   412d6:	8e81      	ldrh	r1, [r0, #52]	; 0x34
   412d8:	3020      	adds	r0, #32
   412da:	f7ff ff27 	bl	4112c <row_span_with_buffer_offsets_get>
   412de:	4607      	mov	r7, r0
						    &shell->ctx->vt100_ctx.cons,
   412e0:	68a0      	ldr	r0, [r4, #8]
	col_span = column_span_with_buffer_offsets_get(
   412e2:	462a      	mov	r2, r5
   412e4:	8e81      	ldrh	r1, [r0, #52]	; 0x34
   412e6:	3020      	adds	r0, #32
   412e8:	f7ff ff11 	bl	4110e <column_span_with_buffer_offsets_get>
   412ec:	4606      	mov	r6, r0
	shell_op_cursor_vert_move(shell, -row_span);
   412ee:	4279      	negs	r1, r7
   412f0:	4620      	mov	r0, r4
   412f2:	f7e2 fccb 	bl	23c8c <shell_op_cursor_vert_move>
	shell_op_cursor_horiz_move(shell, col_span);
   412f6:	4631      	mov	r1, r6
   412f8:	4620      	mov	r0, r4
   412fa:	f7e2 fcd7 	bl	23cac <shell_op_cursor_horiz_move>
	shell->ctx->cmd_buff_pos = new_pos;
   412fe:	68a3      	ldr	r3, [r4, #8]
   41300:	869d      	strh	r5, [r3, #52]	; 0x34
}
   41302:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00041304 <shell_op_cursor_home_move>:
	shell_op_cursor_move(shell, -shell->ctx->cmd_buff_pos);
   41304:	6883      	ldr	r3, [r0, #8]
   41306:	8e99      	ldrh	r1, [r3, #52]	; 0x34
   41308:	4249      	negs	r1, r1
   4130a:	b209      	sxth	r1, r1
   4130c:	f7ff bfd6 	b.w	412bc <shell_op_cursor_move>

00041310 <shell_op_cursor_end_move>:
	shell_op_cursor_move(shell, shell->ctx->cmd_buff_len -
   41310:	6883      	ldr	r3, [r0, #8]
   41312:	8e59      	ldrh	r1, [r3, #50]	; 0x32
   41314:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
   41316:	1ac9      	subs	r1, r1, r3
   41318:	b209      	sxth	r1, r1
   4131a:	f7ff bfcf 	b.w	412bc <shell_op_cursor_move>

0004131e <shell_op_left_arrow>:
	if (shell->ctx->cmd_buff_pos > 0) {
   4131e:	6883      	ldr	r3, [r0, #8]
   41320:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
   41322:	b11b      	cbz	r3, 4132c <shell_op_left_arrow+0xe>
		shell_op_cursor_move(shell, -1);
   41324:	f04f 31ff 	mov.w	r1, #4294967295
   41328:	f7ff bfc8 	b.w	412bc <shell_op_cursor_move>
}
   4132c:	4770      	bx	lr

0004132e <shell_op_right_arrow>:
	if (shell->ctx->cmd_buff_pos < shell->ctx->cmd_buff_len) {
   4132e:	6883      	ldr	r3, [r0, #8]
   41330:	8e9a      	ldrh	r2, [r3, #52]	; 0x34
   41332:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
   41334:	429a      	cmp	r2, r3
   41336:	d202      	bcs.n	4133e <shell_op_right_arrow+0x10>
		shell_op_cursor_move(shell, 1);
   41338:	2101      	movs	r1, #1
   4133a:	f7ff bfbf 	b.w	412bc <shell_op_cursor_move>
}
   4133e:	4770      	bx	lr

00041340 <shell_op_delete_from_cursor>:
	shell->ctx->cmd_buff_len = shell->ctx->cmd_buff_pos;
   41340:	6883      	ldr	r3, [r0, #8]
   41342:	8e9a      	ldrh	r2, [r3, #52]	; 0x34
   41344:	865a      	strh	r2, [r3, #50]	; 0x32
	shell->ctx->cmd_buff[shell->ctx->cmd_buff_pos] = '\0';
   41346:	4413      	add	r3, r2
   41348:	2200      	movs	r2, #0
   4134a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
	clear_eos(shell);
   4134e:	6940      	ldr	r0, [r0, #20]
   41350:	f7e2 bc94 	b.w	23c7c <clear_eos.isra.6>

00041354 <shell_cmd_line_erase>:
{
   41354:	b510      	push	{r4, lr}
   41356:	4604      	mov	r4, r0
	shell_multiline_data_calc(&shell->ctx->vt100_ctx.cons,
   41358:	6880      	ldr	r0, [r0, #8]
   4135a:	8e42      	ldrh	r2, [r0, #50]	; 0x32
   4135c:	8e81      	ldrh	r1, [r0, #52]	; 0x34
   4135e:	3020      	adds	r0, #32
   41360:	f7ff feef 	bl	41142 <shell_multiline_data_calc>
				   -(shell->ctx->vt100_ctx.cons.cur_x - 1));
   41364:	68a3      	ldr	r3, [r4, #8]
	shell_op_cursor_horiz_move(shell,
   41366:	4620      	mov	r0, r4
				   -(shell->ctx->vt100_ctx.cons.cur_x - 1));
   41368:	8c19      	ldrh	r1, [r3, #32]
	shell_op_cursor_horiz_move(shell,
   4136a:	f1c1 0101 	rsb	r1, r1, #1
   4136e:	f7e2 fc9d 	bl	23cac <shell_op_cursor_horiz_move>
	shell_op_cursor_vert_move(shell, shell->ctx->vt100_ctx.cons.cur_y - 1);
   41372:	68a3      	ldr	r3, [r4, #8]
   41374:	4620      	mov	r0, r4
   41376:	8c99      	ldrh	r1, [r3, #36]	; 0x24
   41378:	3901      	subs	r1, #1
   4137a:	f7e2 fc87 	bl	23c8c <shell_op_cursor_vert_move>
	clear_eos(shell);
   4137e:	6960      	ldr	r0, [r4, #20]
}
   41380:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	clear_eos(shell);
   41384:	f7e2 bc7a 	b.w	23c7c <clear_eos.isra.6>

00041388 <shell_print_stream>:
	shell_write((const struct shell *) user_ctx, data, data_len);
   41388:	f7e2 bd1e 	b.w	23dc8 <shell_write>

0004138c <shell_internal_vfprintf>:
{
   4138c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	    shell->ctx->internal.flags.use_colors &&
   4138e:	6885      	ldr	r5, [r0, #8]
{
   41390:	461f      	mov	r7, r3
	    shell->ctx->internal.flags.use_colors &&
   41392:	f8d5 3258 	ldr.w	r3, [r5, #600]	; 0x258
{
   41396:	4604      	mov	r4, r0
	if (IS_ENABLED(CONFIG_SHELL_VT100_COLORS) &&
   41398:	079b      	lsls	r3, r3, #30
{
   4139a:	4616      	mov	r6, r2
	if (IS_ENABLED(CONFIG_SHELL_VT100_COLORS) &&
   4139c:	d513      	bpl.n	413c6 <shell_internal_vfprintf+0x3a>
	    shell->ctx->internal.flags.use_colors &&
   4139e:	f895 302e 	ldrb.w	r3, [r5, #46]	; 0x2e
   413a2:	428b      	cmp	r3, r1
   413a4:	d00f      	beq.n	413c6 <shell_internal_vfprintf+0x3a>
			   enum shell_vt100_color color);

static inline void shell_vt100_colors_store(const struct shell *shell,
					    struct shell_vt100_colors *color)
{
	memcpy(color, &shell->ctx->vt100_ctx.col, sizeof(*color));
   413a6:	8deb      	ldrh	r3, [r5, #46]	; 0x2e
   413a8:	f8ad 3004 	strh.w	r3, [sp, #4]
		shell_vt100_color_set(shell, color);
   413ac:	f7e2 fd7c 	bl	23ea8 <shell_vt100_color_set>
		shell_fprintf_fmt(shell->fprintf_ctx, fmt, args);
   413b0:	4631      	mov	r1, r6
   413b2:	6960      	ldr	r0, [r4, #20]
   413b4:	463a      	mov	r2, r7
   413b6:	f7e2 facf 	bl	23958 <shell_fprintf_fmt>
		shell_vt100_colors_restore(shell, &col);
   413ba:	a901      	add	r1, sp, #4
   413bc:	4620      	mov	r0, r4
   413be:	f7e2 fd97 	bl	23ef0 <shell_vt100_colors_restore>
}
   413c2:	b003      	add	sp, #12
   413c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
		shell_fprintf_fmt(shell->fprintf_ctx, fmt, args);
   413c6:	463a      	mov	r2, r7
   413c8:	4631      	mov	r1, r6
   413ca:	6960      	ldr	r0, [r4, #20]
   413cc:	f7e2 fac4 	bl	23958 <shell_fprintf_fmt>
}
   413d0:	e7f7      	b.n	413c2 <shell_internal_vfprintf+0x36>

000413d2 <data_insert>:
{
   413d2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	u16_t after = shell->ctx->cmd_buff_len - shell->ctx->cmd_buff_pos;
   413d6:	6886      	ldr	r6, [r0, #8]
{
   413d8:	4607      	mov	r7, r0
	u16_t after = shell->ctx->cmd_buff_len - shell->ctx->cmd_buff_pos;
   413da:	8e74      	ldrh	r4, [r6, #50]	; 0x32
{
   413dc:	4688      	mov	r8, r1
	if ((shell->ctx->cmd_buff_len + len) >= CONFIG_SHELL_CMD_BUFF_SIZE) {
   413de:	18a3      	adds	r3, r4, r2
   413e0:	2bff      	cmp	r3, #255	; 0xff
{
   413e2:	4615      	mov	r5, r2
	if ((shell->ctx->cmd_buff_len + len) >= CONFIG_SHELL_CMD_BUFF_SIZE) {
   413e4:	dc1f      	bgt.n	41426 <data_insert+0x54>
	u16_t after = shell->ctx->cmd_buff_len - shell->ctx->cmd_buff_pos;
   413e6:	8eb3      	ldrh	r3, [r6, #52]	; 0x34
   413e8:	1ae4      	subs	r4, r4, r3
	char *curr_pos = &shell->ctx->cmd_buff[shell->ctx->cmd_buff_pos];
   413ea:	3338      	adds	r3, #56	; 0x38
   413ec:	441e      	add	r6, r3
	u16_t after = shell->ctx->cmd_buff_len - shell->ctx->cmd_buff_pos;
   413ee:	b2a4      	uxth	r4, r4
   413f0:	4622      	mov	r2, r4
   413f2:	4631      	mov	r1, r6
   413f4:	1970      	adds	r0, r6, r5
   413f6:	f003 fd4b 	bl	44e90 <memmove>
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   413fa:	462a      	mov	r2, r5
   413fc:	4641      	mov	r1, r8
   413fe:	4630      	mov	r0, r6
   41400:	f003 fd26 	bl	44e50 <memcpy>
	shell->ctx->cmd_buff_len += len;
   41404:	68ba      	ldr	r2, [r7, #8]
   41406:	8e53      	ldrh	r3, [r2, #50]	; 0x32
   41408:	442b      	add	r3, r5
   4140a:	b29b      	uxth	r3, r3
   4140c:	8653      	strh	r3, [r2, #50]	; 0x32
	shell->ctx->cmd_buff[shell->ctx->cmd_buff_len] = '\0';
   4140e:	4413      	add	r3, r2
   41410:	2200      	movs	r2, #0
   41412:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
	if (!flag_echo_get(shell)) {
   41416:	68bb      	ldr	r3, [r7, #8]
	return shell->ctx->internal.flags.echo == 1 ? true : false;
   41418:	f8d3 1258 	ldr.w	r1, [r3, #600]	; 0x258
   4141c:	0749      	lsls	r1, r1, #29
   4141e:	d404      	bmi.n	4142a <data_insert+0x58>
		shell->ctx->cmd_buff_pos += len;
   41420:	8e9a      	ldrh	r2, [r3, #52]	; 0x34
   41422:	4415      	add	r5, r2
   41424:	869d      	strh	r5, [r3, #52]	; 0x34
}
   41426:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	reprint_from_cursor(shell, after, false);
   4142a:	4621      	mov	r1, r4
   4142c:	4638      	mov	r0, r7
}
   4142e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	reprint_from_cursor(shell, after, false);
   41432:	f7e2 be41 	b.w	240b8 <reprint_from_cursor>

00041436 <shell_op_completion_insert>:
	data_insert(shell, compl, compl_len);
   41436:	f7ff bfcc 	b.w	413d2 <data_insert>

0004143a <shell_op_char_delete>:
{
   4143a:	b538      	push	{r3, r4, r5, lr}
   4143c:	4605      	mov	r5, r0
	u16_t diff = shell->ctx->cmd_buff_len - shell->ctx->cmd_buff_pos;
   4143e:	6880      	ldr	r0, [r0, #8]
   41440:	8e83      	ldrh	r3, [r0, #52]	; 0x34
   41442:	8e44      	ldrh	r4, [r0, #50]	; 0x32
   41444:	1ae4      	subs	r4, r4, r3
   41446:	b2a4      	uxth	r4, r4
	if (diff == 0U) {
   41448:	b18c      	cbz	r4, 4146e <shell_op_char_delete+0x34>
	char *str = &shell->ctx->cmd_buff[shell->ctx->cmd_buff_pos];
   4144a:	3338      	adds	r3, #56	; 0x38
   4144c:	4418      	add	r0, r3
__ssp_bos_icheck3(memmove, void *, const void *)
   4144e:	4622      	mov	r2, r4
   41450:	1c41      	adds	r1, r0, #1
   41452:	f003 fd1d 	bl	44e90 <memmove>
	--shell->ctx->cmd_buff_len;
   41456:	68aa      	ldr	r2, [r5, #8]
	reprint_from_cursor(shell, --diff, true);
   41458:	1e61      	subs	r1, r4, #1
	--shell->ctx->cmd_buff_len;
   4145a:	8e53      	ldrh	r3, [r2, #50]	; 0x32
	reprint_from_cursor(shell, --diff, true);
   4145c:	4628      	mov	r0, r5
	--shell->ctx->cmd_buff_len;
   4145e:	3b01      	subs	r3, #1
   41460:	8653      	strh	r3, [r2, #50]	; 0x32
	reprint_from_cursor(shell, --diff, true);
   41462:	b289      	uxth	r1, r1
   41464:	2201      	movs	r2, #1
}
   41466:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	reprint_from_cursor(shell, --diff, true);
   4146a:	f7e2 be25 	b.w	240b8 <reprint_from_cursor>
}
   4146e:	bd38      	pop	{r3, r4, r5, pc}

00041470 <shell_op_char_backspace>:
	if ((shell->ctx->cmd_buff_len == 0) ||
   41470:	6883      	ldr	r3, [r0, #8]
{
   41472:	b510      	push	{r4, lr}
	if ((shell->ctx->cmd_buff_len == 0) ||
   41474:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
{
   41476:	4604      	mov	r4, r0
	if ((shell->ctx->cmd_buff_len == 0) ||
   41478:	b152      	cbz	r2, 41490 <shell_op_char_backspace+0x20>
   4147a:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
   4147c:	b143      	cbz	r3, 41490 <shell_op_char_backspace+0x20>
	shell_op_cursor_move(shell, -1);
   4147e:	f04f 31ff 	mov.w	r1, #4294967295
   41482:	f7ff ff1b 	bl	412bc <shell_op_cursor_move>
	shell_op_char_delete(shell);
   41486:	4620      	mov	r0, r4
}
   41488:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	shell_op_char_delete(shell);
   4148c:	f7ff bfd5 	b.w	4143a <shell_op_char_delete>
}
   41490:	bd10      	pop	{r4, pc}

00041492 <z_impl_uart_irq_tx_disable>:
	if (api->irq_tx_disable) {
   41492:	6843      	ldr	r3, [r0, #4]
   41494:	6a1b      	ldr	r3, [r3, #32]
   41496:	b103      	cbz	r3, 4149a <z_impl_uart_irq_tx_disable+0x8>
		api->irq_tx_disable(dev);
   41498:	4718      	bx	r3
}
   4149a:	4770      	bx	lr

0004149c <uninit>:
}
   4149c:	2000      	movs	r0, #0
   4149e:	4770      	bx	lr

000414a0 <read>:
{
   414a0:	b510      	push	{r4, lr}
   414a2:	461c      	mov	r4, r3
	*cnt = ring_buf_get(sh_uart->rx_ringbuf, data, length);
   414a4:	6843      	ldr	r3, [r0, #4]
   414a6:	68d8      	ldr	r0, [r3, #12]
   414a8:	f7e0 f978 	bl	2179c <ring_buf_get>
   414ac:	6020      	str	r0, [r4, #0]
}
   414ae:	2000      	movs	r0, #0
   414b0:	bd10      	pop	{r4, pc}

000414b2 <write>:
{
   414b2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	const struct shell_uart *sh_uart = (struct shell_uart *)transport->ctx;
   414b6:	6845      	ldr	r5, [r0, #4]
{
   414b8:	461e      	mov	r6, r3
		!sh_uart->ctrl_blk->blocking_tx) {
   414ba:	682b      	ldr	r3, [r5, #0]
{
   414bc:	460c      	mov	r4, r1
	if (IS_ENABLED(CONFIG_SHELL_BACKEND_SERIAL_INTERRUPT_DRIVEN) &&
   414be:	7c1b      	ldrb	r3, [r3, #16]
{
   414c0:	4617      	mov	r7, r2
	if (IS_ENABLED(CONFIG_SHELL_BACKEND_SERIAL_INTERRUPT_DRIVEN) &&
   414c2:	b153      	cbz	r3, 414da <write+0x28>
   414c4:	eb01 0802 	add.w	r8, r1, r2
		for (size_t i = 0; i < length; i++) {
   414c8:	4544      	cmp	r4, r8
   414ca:	682b      	ldr	r3, [r5, #0]
   414cc:	d11c      	bne.n	41508 <write+0x56>
		sh_uart->ctrl_blk->handler(SHELL_TRANSPORT_EVT_TX_RDY,
   414ce:	e9d3 2101 	ldrd	r2, r1, [r3, #4]
		*cnt = length;
   414d2:	6037      	str	r7, [r6, #0]
		sh_uart->ctrl_blk->handler(SHELL_TRANSPORT_EVT_TX_RDY,
   414d4:	2001      	movs	r0, #1
   414d6:	4790      	blx	r2
   414d8:	e013      	b.n	41502 <write+0x50>
	*cnt = ring_buf_put(sh_uart->tx_ringbuf, data, length);
   414da:	68a8      	ldr	r0, [r5, #8]
   414dc:	f7e0 f92e 	bl	2173c <ring_buf_put>
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   414e0:	2101      	movs	r1, #1
   414e2:	682b      	ldr	r3, [r5, #0]
   414e4:	6030      	str	r0, [r6, #0]
   414e6:	330c      	adds	r3, #12
   414e8:	e8d3 2fef 	ldaex	r2, [r3]
   414ec:	e8c3 1fe0 	stlex	r0, r1, [r3]
   414f0:	2800      	cmp	r0, #0
   414f2:	d1f9      	bne.n	414e8 <write+0x36>
	if (atomic_set(&sh_uart->ctrl_blk->tx_busy, 1) == 0) {
   414f4:	b92a      	cbnz	r2, 41502 <write+0x50>
		uart_irq_tx_enable(sh_uart->ctrl_blk->dev);
   414f6:	682b      	ldr	r3, [r5, #0]
   414f8:	6818      	ldr	r0, [r3, #0]
	if (api->irq_tx_enable) {
   414fa:	6843      	ldr	r3, [r0, #4]
   414fc:	69db      	ldr	r3, [r3, #28]
   414fe:	b103      	cbz	r3, 41502 <write+0x50>
		api->irq_tx_enable(dev);
   41500:	4798      	blx	r3
}
   41502:	2000      	movs	r0, #0
   41504:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			uart_poll_out(sh_uart->ctrl_blk->dev, data8[i]);
   41508:	6818      	ldr	r0, [r3, #0]
   4150a:	f814 1b01 	ldrb.w	r1, [r4], #1
	api->poll_out(dev, out_char);
   4150e:	6843      	ldr	r3, [r0, #4]
   41510:	685b      	ldr	r3, [r3, #4]
   41512:	4798      	blx	r3
   41514:	e7d8      	b.n	414c8 <write+0x16>

00041516 <enable>:
{
   41516:	b508      	push	{r3, lr}
	sh_uart->ctrl_blk->blocking_tx = blocking_tx;
   41518:	6843      	ldr	r3, [r0, #4]
   4151a:	681b      	ldr	r3, [r3, #0]
   4151c:	7419      	strb	r1, [r3, #16]
	if (blocking_tx) {
   4151e:	b111      	cbz	r1, 41526 <enable+0x10>
		uart_irq_tx_disable(sh_uart->ctrl_blk->dev);
   41520:	6818      	ldr	r0, [r3, #0]
   41522:	f7ff ffb6 	bl	41492 <z_impl_uart_irq_tx_disable>
}
   41526:	2000      	movs	r0, #0
   41528:	bd08      	pop	{r3, pc}

0004152a <shell_raw_fprintf>:
{
   4152a:	b40e      	push	{r1, r2, r3}
   4152c:	b503      	push	{r0, r1, lr}
   4152e:	aa03      	add	r2, sp, #12
   41530:	f852 1b04 	ldr.w	r1, [r2], #4
	va_start(args, fmt);
   41534:	9201      	str	r2, [sp, #4]
	shell_fprintf_fmt(ctx, fmt, args);
   41536:	f7e2 fa0f 	bl	23958 <shell_fprintf_fmt>
}
   4153a:	b002      	add	sp, #8
   4153c:	f85d eb04 	ldr.w	lr, [sp], #4
   41540:	b003      	add	sp, #12
   41542:	4770      	bx	lr

00041544 <cmd_bacskpace_mode_backspace>:
	flag_mode_delete_set(shell, false);
   41544:	6883      	ldr	r3, [r0, #8]
}
   41546:	2000      	movs	r0, #0
	shell->ctx->internal.flags.mode_delete = val ? 1 : 0;
   41548:	f8b3 2258 	ldrh.w	r2, [r3, #600]	; 0x258
   4154c:	f36f 1245 	bfc	r2, #5, #1
   41550:	f8a3 2258 	strh.w	r2, [r3, #600]	; 0x258
   41554:	4770      	bx	lr

00041556 <cmd_bacskpace_mode_delete>:
	flag_mode_delete_set(shell, true);
   41556:	6882      	ldr	r2, [r0, #8]
}
   41558:	2000      	movs	r0, #0
   4155a:	f8b2 3258 	ldrh.w	r3, [r2, #600]	; 0x258
   4155e:	f043 0320 	orr.w	r3, r3, #32
   41562:	f8a2 3258 	strh.w	r3, [r2, #600]	; 0x258
   41566:	4770      	bx	lr

00041568 <cmd_colors_off>:
	flag_use_colors_set(shell, false);
   41568:	6883      	ldr	r3, [r0, #8]
}
   4156a:	2000      	movs	r0, #0
	shell->ctx->internal.flags.use_colors = val ? 1 : 0;
   4156c:	f8b3 2258 	ldrh.w	r2, [r3, #600]	; 0x258
   41570:	f36f 0241 	bfc	r2, #1, #1
   41574:	f8a3 2258 	strh.w	r2, [r3, #600]	; 0x258
   41578:	4770      	bx	lr

0004157a <cmd_colors_on>:
	flag_use_colors_set(shell, true);
   4157a:	6882      	ldr	r2, [r0, #8]
}
   4157c:	2000      	movs	r0, #0
   4157e:	f8b2 3258 	ldrh.w	r3, [r2, #600]	; 0x258
   41582:	f043 0302 	orr.w	r3, r3, #2
   41586:	f8a2 3258 	strh.w	r3, [r2, #600]	; 0x258
   4158a:	4770      	bx	lr

0004158c <cmd_echo_off>:
	flag_echo_set(shell, false);
   4158c:	6883      	ldr	r3, [r0, #8]
}
   4158e:	2000      	movs	r0, #0
	shell->ctx->internal.flags.echo = val ? 1 : 0;
   41590:	f8b3 2258 	ldrh.w	r2, [r3, #600]	; 0x258
   41594:	f36f 0282 	bfc	r2, #2, #1
   41598:	f8a3 2258 	strh.w	r2, [r3, #600]	; 0x258
   4159c:	4770      	bx	lr

0004159e <cmd_echo_on>:
	flag_echo_set(shell, true);
   4159e:	6882      	ldr	r2, [r0, #8]
}
   415a0:	2000      	movs	r0, #0
   415a2:	f8b2 3258 	ldrh.w	r3, [r2, #600]	; 0x258
   415a6:	f043 0304 	orr.w	r3, r3, #4
   415aa:	f8a2 3258 	strh.w	r3, [r2, #600]	; 0x258
   415ae:	4770      	bx	lr

000415b0 <cmd_shell_stats_reset>:
	shell->stats->log_lost_cnt = 0;
   415b0:	6983      	ldr	r3, [r0, #24]
   415b2:	2000      	movs	r0, #0
   415b4:	6018      	str	r0, [r3, #0]
}
   415b6:	4770      	bx	lr

000415b8 <shell_raw_fprintf>:
{
   415b8:	b40e      	push	{r1, r2, r3}
   415ba:	b503      	push	{r0, r1, lr}
   415bc:	aa03      	add	r2, sp, #12
   415be:	f852 1b04 	ldr.w	r1, [r2], #4
	va_start(args, fmt);
   415c2:	9201      	str	r2, [sp, #4]
	shell_fprintf_fmt(ctx, fmt, args);
   415c4:	f7e2 f9c8 	bl	23958 <shell_fprintf_fmt>
}
   415c8:	b002      	add	sp, #8
   415ca:	f85d eb04 	ldr.w	lr, [sp], #4
   415ce:	b003      	add	sp, #12
   415d0:	4770      	bx	lr

000415d2 <remove_from_tail.part.4>:
static bool remove_from_tail(struct shell_history *history)
   415d2:	b508      	push	{r3, lr}
	return sys_dlist_is_empty(list) ? NULL : list->tail;
   415d4:	6883      	ldr	r3, [r0, #8]
	ring_buf_get_finish(history->ring_buf, total_len);
   415d6:	6800      	ldr	r0, [r0, #0]
	node->prev->next = node->next;
   415d8:	e9d3 2100 	ldrd	r2, r1, [r3]
   415dc:	600a      	str	r2, [r1, #0]
	node->next->prev = node->prev;
   415de:	6051      	str	r1, [r2, #4]
	node->next = NULL;
   415e0:	2200      	movs	r2, #0
			h_item->len + h_item->padding;
   415e2:	8919      	ldrh	r1, [r3, #8]
	node->prev = NULL;
   415e4:	e9c3 2200 	strd	r2, r2, [r3]
   415e8:	895b      	ldrh	r3, [r3, #10]
   415ea:	4419      	add	r1, r3
	ring_buf_get_finish(history->ring_buf, total_len);
   415ec:	310c      	adds	r1, #12
   415ee:	f7ff f8b6 	bl	4075e <ring_buf_get_finish>
}
   415f2:	2001      	movs	r0, #1
   415f4:	bd08      	pop	{r3, pc}

000415f6 <shell_history_mode_exit>:
	history->current = NULL;
   415f6:	2300      	movs	r3, #0
   415f8:	60c3      	str	r3, [r0, #12]
}
   415fa:	4770      	bx	lr

000415fc <shell_history_get>:
{
   415fc:	b570      	push	{r4, r5, r6, lr}
   415fe:	4615      	mov	r5, r2
	return list->head == list;
   41600:	4602      	mov	r2, r0
   41602:	f852 4f04 	ldr.w	r4, [r2, #4]!
   41606:	461e      	mov	r6, r3
	if (sys_dlist_is_empty(&history->list)) {
   41608:	4294      	cmp	r4, r2
   4160a:	d102      	bne.n	41612 <shell_history_get+0x16>
		*len = 0U;
   4160c:	2000      	movs	r0, #0
   4160e:	8030      	strh	r0, [r6, #0]
}
   41610:	bd70      	pop	{r4, r5, r6, pc}
	if (!up) { /* button down */
   41612:	68c2      	ldr	r2, [r0, #12]
   41614:	b9b1      	cbnz	r1, 41644 <shell_history_get+0x48>
		if (history->current == NULL) {
   41616:	2a00      	cmp	r2, #0
   41618:	d0f8      	beq.n	4160c <shell_history_get+0x10>
	return (node == list->head) ? NULL : node->prev;
   4161a:	42a2      	cmp	r2, r4
   4161c:	d102      	bne.n	41624 <shell_history_get+0x28>
	history->current = l_item;
   4161e:	2300      	movs	r3, #0
   41620:	60c3      	str	r3, [r0, #12]
	if (l_item) {
   41622:	e7f3      	b.n	4160c <shell_history_get+0x10>
   41624:	6854      	ldr	r4, [r2, #4]
	history->current = l_item;
   41626:	60c4      	str	r4, [r0, #12]
	if (l_item) {
   41628:	2c00      	cmp	r4, #0
   4162a:	d0ef      	beq.n	4160c <shell_history_get+0x10>
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   4162c:	8922      	ldrh	r2, [r4, #8]
   4162e:	f104 010c 	add.w	r1, r4, #12
   41632:	4628      	mov	r0, r5
   41634:	f003 fc0c 	bl	44e50 <memcpy>
		dst[*len] = '\0';
   41638:	2300      	movs	r3, #0
		*len = h_item->len;
   4163a:	8922      	ldrh	r2, [r4, #8]
		return true;
   4163c:	2001      	movs	r0, #1
		*len = h_item->len;
   4163e:	8032      	strh	r2, [r6, #0]
		dst[*len] = '\0';
   41640:	54ab      	strb	r3, [r5, r2]
		return true;
   41642:	e7e5      	b.n	41610 <shell_history_get+0x14>
		sys_dlist_peek_head_not_empty(&history->list) :
   41644:	2a00      	cmp	r2, #0
   41646:	d0ee      	beq.n	41626 <shell_history_get+0x2a>
	return (node == list->tail) ? NULL : node->next;
   41648:	6883      	ldr	r3, [r0, #8]
   4164a:	429a      	cmp	r2, r3
   4164c:	d0e7      	beq.n	4161e <shell_history_get+0x22>
   4164e:	6814      	ldr	r4, [r2, #0]
   41650:	e7e9      	b.n	41626 <shell_history_get+0x2a>

00041652 <shell_history_purge>:
{
   41652:	b538      	push	{r3, r4, r5, lr}
   41654:	4604      	mov	r4, r0
	if (sys_dlist_is_empty(&history->list)) {
   41656:	1d05      	adds	r5, r0, #4
   41658:	6863      	ldr	r3, [r4, #4]
   4165a:	42ab      	cmp	r3, r5
   4165c:	d004      	beq.n	41668 <shell_history_purge+0x16>
   4165e:	4620      	mov	r0, r4
   41660:	f7ff ffb7 	bl	415d2 <remove_from_tail.part.4>
	while (remove_from_tail(history)) {
   41664:	2800      	cmp	r0, #0
   41666:	d1f7      	bne.n	41658 <shell_history_purge+0x6>
}
   41668:	bd38      	pop	{r3, r4, r5, pc}

0004166a <shell_history_init>:

void shell_history_init(struct shell_history *history)
{
	sys_dlist_init(&history->list);
   4166a:	1d03      	adds	r3, r0, #4
	list->tail = (sys_dnode_t *)list;
   4166c:	e9c0 3301 	strd	r3, r3, [r0, #4]
	history->current = NULL;
   41670:	2300      	movs	r3, #0
   41672:	60c3      	str	r3, [r0, #12]
}
   41674:	4770      	bx	lr

00041676 <dropped>:
	}
}

static void dropped(const struct log_backend *const backend, u32_t cnt)
{
	const struct shell *shell = (const struct shell *)backend->cb->ctx;
   41676:	6843      	ldr	r3, [r0, #4]
   41678:	681b      	ldr	r3, [r3, #0]
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
   4167a:	e9d3 3206 	ldrd	r3, r2, [r3, #24]
   4167e:	e8d3 0fef 	ldaex	r0, [r3]
   41682:	4408      	add	r0, r1
   41684:	e8c3 0fec 	stlex	ip, r0, [r3]
   41688:	f1bc 0f00 	cmp.w	ip, #0
   4168c:	d1f7      	bne.n	4167e <dropped+0x8>
   4168e:	68d3      	ldr	r3, [r2, #12]
   41690:	e8d3 2fef 	ldaex	r2, [r3]
   41694:	440a      	add	r2, r1
   41696:	e8c3 2fe0 	stlex	r0, r2, [r3]
   4169a:	2800      	cmp	r0, #0
   4169c:	d1f8      	bne.n	41690 <dropped+0x1a>
	const struct shell_log_backend *log_backend = shell->log_backend;

	atomic_add(&shell->stats->log_lost_cnt, cnt);
	atomic_add(&log_backend->control_block->dropped_cnt, cnt);
}
   4169e:	4770      	bx	lr

000416a0 <shell_log_backend_output_func>:
{
   416a0:	4613      	mov	r3, r2
   416a2:	b510      	push	{r4, lr}
   416a4:	460c      	mov	r4, r1
	shell_print_stream(ctx, data, length);
   416a6:	460a      	mov	r2, r1
   416a8:	4601      	mov	r1, r0
   416aa:	4618      	mov	r0, r3
   416ac:	f7ff fe6c 	bl	41388 <shell_print_stream>
}
   416b0:	4620      	mov	r0, r4
   416b2:	bd10      	pop	{r4, pc}

000416b4 <shell_log_backend_enable>:
{
   416b4:	b538      	push	{r3, r4, r5, lr}
   416b6:	4604      	mov	r4, r0
   416b8:	460d      	mov	r5, r1
		log_backend_enable(backend->backend, ctx, init_log_level);
   416ba:	6800      	ldr	r0, [r0, #0]
   416bc:	f7e0 fa46 	bl	21b4c <log_backend_enable>
	backend->control_block->dropped_cnt = 0;
   416c0:	2200      	movs	r2, #0
		log_output_ctx_set(backend->log_output, ctx);
   416c2:	68a3      	ldr	r3, [r4, #8]
   416c4:	685b      	ldr	r3, [r3, #4]
 * @param ctx		User context.
 */
static inline void log_output_ctx_set(const struct log_output *log_output,
				      void *ctx)
{
	log_output->control_block->ctx = ctx;
   416c6:	605d      	str	r5, [r3, #4]
	backend->control_block->dropped_cnt = 0;
   416c8:	68e3      	ldr	r3, [r4, #12]
   416ca:	601a      	str	r2, [r3, #0]
		backend->control_block->state = SHELL_LOG_BACKEND_ENABLED;
   416cc:	2201      	movs	r2, #1
   416ce:	711a      	strb	r2, [r3, #4]
}
   416d0:	bd38      	pop	{r3, r4, r5, pc}

000416d2 <shell_log_backend_disable>:
{
   416d2:	b513      	push	{r0, r1, r4, lr}
   416d4:	4604      	mov	r4, r0
	while ((msg = msg_from_fifo(backend)) != NULL) {
   416d6:	6860      	ldr	r0, [r4, #4]
	return z_impl_k_msgq_get(msgq, data, timeout);
   416d8:	2200      	movs	r2, #0
   416da:	4669      	mov	r1, sp
   416dc:	f7fa f926 	bl	3b92c <z_impl_k_msgq_get>
	return (err == 0) ? msg.msg : NULL;
   416e0:	b908      	cbnz	r0, 416e6 <shell_log_backend_disable+0x14>
   416e2:	9800      	ldr	r0, [sp, #0]
	while ((msg = msg_from_fifo(backend)) != NULL) {
   416e4:	b938      	cbnz	r0, 416f6 <shell_log_backend_disable+0x24>
	log_backend_disable(backend->backend);
   416e6:	6820      	ldr	r0, [r4, #0]
   416e8:	f7e0 fa98 	bl	21c1c <log_backend_disable>
	backend->control_block->state = SHELL_LOG_BACKEND_DISABLED;
   416ec:	2202      	movs	r2, #2
   416ee:	68e3      	ldr	r3, [r4, #12]
   416f0:	711a      	strb	r2, [r3, #4]
}
   416f2:	b002      	add	sp, #8
   416f4:	bd10      	pop	{r4, pc}
		log_msg_put(msg);
   416f6:	f7ff fa7e 	bl	40bf6 <log_msg_put>
   416fa:	e7ec      	b.n	416d6 <shell_log_backend_disable+0x4>

000416fc <shell_log_backend_process>:
			(const struct shell *)backend->backend->cb->ctx;
   416fc:	6803      	ldr	r3, [r0, #0]
{
   416fe:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	const struct shell *shell =
   41702:	685b      	ldr	r3, [r3, #4]
{
   41704:	4607      	mov	r7, r0
	const struct shell *shell =
   41706:	681e      	ldr	r6, [r3, #0]
	struct log_msg *msg = msg_from_fifo(backend);
   41708:	6840      	ldr	r0, [r0, #4]
			shell->ctx->internal.flags.use_colors;
   4170a:	68b3      	ldr	r3, [r6, #8]
   4170c:	f8d3 5258 	ldr.w	r5, [r3, #600]	; 0x258
   41710:	f3c5 0540 	ubfx	r5, r5, #1, #1
   41714:	2200      	movs	r2, #0
   41716:	4669      	mov	r1, sp
   41718:	f7fa f908 	bl	3b92c <z_impl_k_msgq_get>
	return (err == 0) ? msg.msg : NULL;
   4171c:	b118      	cbz	r0, 41726 <shell_log_backend_process+0x2a>
		return false;
   4171e:	2000      	movs	r0, #0
}
   41720:	b002      	add	sp, #8
   41722:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return (err == 0) ? msg.msg : NULL;
   41726:	9c00      	ldr	r4, [sp, #0]
	if (!msg) {
   41728:	b34c      	cbz	r4, 4177e <shell_log_backend_process+0x82>
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   4172a:	68fb      	ldr	r3, [r7, #12]
   4172c:	e8d3 8fef 	ldaex	r8, [r3]
   41730:	e8c3 0fe2 	stlex	r2, r0, [r3]
   41734:	2a00      	cmp	r2, #0
   41736:	d1f9      	bne.n	4172c <shell_log_backend_process+0x30>
	if (dropped) {
   41738:	f1b8 0f00 	cmp.w	r8, #0
   4173c:	d011      	beq.n	41762 <shell_log_backend_process+0x66>
		if (colors) {
   4173e:	b13d      	cbz	r5, 41750 <shell_log_backend_process+0x54>
	memcpy(color, &shell->ctx->vt100_ctx.col, sizeof(*color));
   41740:	68b3      	ldr	r3, [r6, #8]
			shell_vt100_color_set(shell, SHELL_VT100_COLOR_RED);
   41742:	2102      	movs	r1, #2
   41744:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
   41746:	4630      	mov	r0, r6
   41748:	f8ad 3000 	strh.w	r3, [sp]
   4174c:	f7e2 fbac 	bl	23ea8 <shell_vt100_color_set>
		log_output_dropped_process(backend->log_output, dropped);
   41750:	4641      	mov	r1, r8
   41752:	68b8      	ldr	r0, [r7, #8]
   41754:	f7e0 ff36 	bl	225c4 <log_output_dropped_process>
		if (colors) {
   41758:	b11d      	cbz	r5, 41762 <shell_log_backend_process+0x66>
			shell_vt100_colors_restore(shell, &col);
   4175a:	4669      	mov	r1, sp
   4175c:	4630      	mov	r0, r6
   4175e:	f7e2 fbc7 	bl	23ef0 <shell_vt100_colors_restore>
	msg_process(shell->log_backend->log_output, msg, colors);
   41762:	69f3      	ldr	r3, [r6, #28]
		flags |= LOG_OUTPUT_FLAG_COLORS;
   41764:	2d00      	cmp	r5, #0
	log_output_msg_process(log_output, msg, flags);
   41766:	6898      	ldr	r0, [r3, #8]
   41768:	bf0c      	ite	eq
   4176a:	220e      	moveq	r2, #14
   4176c:	220f      	movne	r2, #15
   4176e:	4621      	mov	r1, r4
   41770:	f7e0 fe9a 	bl	224a8 <log_output_msg_process>
	log_msg_put(msg);
   41774:	4620      	mov	r0, r4
   41776:	f7ff fa3e 	bl	40bf6 <log_msg_put>
	return true;
   4177a:	2001      	movs	r0, #1
   4177c:	e7d0      	b.n	41720 <shell_log_backend_process+0x24>
		return false;
   4177e:	4620      	mov	r0, r4
   41780:	e7ce      	b.n	41720 <shell_log_backend_process+0x24>

00041782 <panic>:
	const struct shell *shell = (const struct shell *)backend->cb->ctx;
   41782:	6843      	ldr	r3, [r0, #4]
{
   41784:	b510      	push	{r4, lr}
	const struct shell *shell = (const struct shell *)backend->cb->ctx;
   41786:	681c      	ldr	r4, [r3, #0]
	err = shell->iface->api->enable(shell->iface, true);
   41788:	2101      	movs	r1, #1
   4178a:	6860      	ldr	r0, [r4, #4]
   4178c:	6803      	ldr	r3, [r0, #0]
   4178e:	689b      	ldr	r3, [r3, #8]
   41790:	4798      	blx	r3
	if (err == 0) {
   41792:	b9d0      	cbnz	r0, 417ca <panic+0x48>
		shell->log_backend->control_block->state =
   41794:	2203      	movs	r2, #3
   41796:	69e3      	ldr	r3, [r4, #28]
		shell_multiline_data_calc(&shell->ctx->vt100_ctx.cons,
   41798:	68a0      	ldr	r0, [r4, #8]
		shell->log_backend->control_block->state =
   4179a:	68db      	ldr	r3, [r3, #12]
		shell_multiline_data_calc(&shell->ctx->vt100_ctx.cons,
   4179c:	8e81      	ldrh	r1, [r0, #52]	; 0x34
		shell->log_backend->control_block->state =
   4179e:	711a      	strb	r2, [r3, #4]
		shell_multiline_data_calc(&shell->ctx->vt100_ctx.cons,
   417a0:	3020      	adds	r0, #32
   417a2:	8a42      	ldrh	r2, [r0, #18]
   417a4:	f7ff fccd 	bl	41142 <shell_multiline_data_calc>
		shell_op_cursor_vert_move(shell, -1);
   417a8:	f04f 31ff 	mov.w	r1, #4294967295
   417ac:	4620      	mov	r0, r4
   417ae:	f7e2 fa6d 	bl	23c8c <shell_op_cursor_vert_move>
					   -shell->ctx->vt100_ctx.cons.cur_x);
   417b2:	68a3      	ldr	r3, [r4, #8]
		shell_op_cursor_horiz_move(shell,
   417b4:	4620      	mov	r0, r4
					   -shell->ctx->vt100_ctx.cons.cur_x);
   417b6:	8c19      	ldrh	r1, [r3, #32]
		shell_op_cursor_horiz_move(shell,
   417b8:	4249      	negs	r1, r1
   417ba:	f7e2 fa77 	bl	23cac <shell_op_cursor_horiz_move>
		while (shell_log_backend_process(shell->log_backend)) {
   417be:	69e0      	ldr	r0, [r4, #28]
   417c0:	f7ff ff9c 	bl	416fc <shell_log_backend_process>
   417c4:	2800      	cmp	r0, #0
   417c6:	d1fa      	bne.n	417be <panic+0x3c>
}
   417c8:	bd10      	pop	{r4, pc}
		shell_log_backend_disable(shell->log_backend);
   417ca:	69e0      	ldr	r0, [r4, #28]
}
   417cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		shell_log_backend_disable(shell->log_backend);
   417d0:	f7ff bf7f 	b.w	416d2 <shell_log_backend_disable>

000417d4 <shell_wildcard_character_exist>:
{
   417d4:	b510      	push	{r4, lr}
   417d6:	4604      	mov	r4, r0
   417d8:	b908      	cbnz	r0, 417de <shell_wildcard_character_exist+0xa>
	return false;
   417da:	2000      	movs	r0, #0
}
   417dc:	bd10      	pop	{r4, pc}
   417de:	f7db fc9b 	bl	1d118 <strlen>
	for (size_t i = 0; i < str_len; i++) {
   417e2:	2300      	movs	r3, #0
   417e4:	b280      	uxth	r0, r0
   417e6:	4283      	cmp	r3, r0
   417e8:	d2f7      	bcs.n	417da <shell_wildcard_character_exist+0x6>
		if ((str[i] == '?') || (str[i] == '*')) {
   417ea:	5ce2      	ldrb	r2, [r4, r3]
   417ec:	2a3f      	cmp	r2, #63	; 0x3f
   417ee:	d003      	beq.n	417f8 <shell_wildcard_character_exist+0x24>
   417f0:	2a2a      	cmp	r2, #42	; 0x2a
   417f2:	d001      	beq.n	417f8 <shell_wildcard_character_exist+0x24>
	for (size_t i = 0; i < str_len; i++) {
   417f4:	3301      	adds	r3, #1
   417f6:	e7f6      	b.n	417e6 <shell_wildcard_character_exist+0x12>
			return true;
   417f8:	2001      	movs	r0, #1
   417fa:	e7ef      	b.n	417dc <shell_wildcard_character_exist+0x8>

000417fc <shell_wildcard_prepare>:
{
   417fc:	b510      	push	{r4, lr}
   417fe:	4604      	mov	r4, r0
__ssp_bos_icheck3(memset, void *, int)
   41800:	6880      	ldr	r0, [r0, #8]
   41802:	f44f 7280 	mov.w	r2, #256	; 0x100
   41806:	2100      	movs	r1, #0
   41808:	f500 709c 	add.w	r0, r0, #312	; 0x138
   4180c:	f003 fb5a 	bl	44ec4 <memset>
	memcpy(shell->ctx->temp_buff,
   41810:	68a0      	ldr	r0, [r4, #8]
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   41812:	8e42      	ldrh	r2, [r0, #50]	; 0x32
   41814:	f100 0138 	add.w	r1, r0, #56	; 0x38
   41818:	f500 709c 	add.w	r0, r0, #312	; 0x138
   4181c:	f003 fb18 	bl	44e50 <memcpy>
	shell_spaces_trim(shell->ctx->temp_buff);
   41820:	68a0      	ldr	r0, [r4, #8]
   41822:	f500 709c 	add.w	r0, r0, #312	; 0x138
   41826:	f7e2 f9c1 	bl	23bac <shell_spaces_trim>
	shell->ctx->cmd_tmp_buff_len = shell_strlen(shell->ctx->temp_buff) + 1;
   4182a:	68a0      	ldr	r0, [r4, #8]
   4182c:	f510 709c 	adds.w	r0, r0, #312	; 0x138
   41830:	d002      	beq.n	41838 <shell_wildcard_prepare+0x3c>
   41832:	f7db fc71 	bl	1d118 <strlen>
   41836:	b280      	uxth	r0, r0
   41838:	68a3      	ldr	r3, [r4, #8]
   4183a:	3001      	adds	r0, #1
   4183c:	86d8      	strh	r0, [r3, #54]	; 0x36
}
   4183e:	bd10      	pop	{r4, pc}

00041840 <shell_wildcard_finalize>:

void shell_wildcard_finalize(const struct shell *shell)
{
   41840:	b510      	push	{r4, lr}
   41842:	4604      	mov	r4, r0
	memcpy(shell->ctx->cmd_buff,
   41844:	6880      	ldr	r0, [r0, #8]
   41846:	8ec2      	ldrh	r2, [r0, #54]	; 0x36
   41848:	f500 719c 	add.w	r1, r0, #312	; 0x138
   4184c:	3038      	adds	r0, #56	; 0x38
   4184e:	f003 faff 	bl	44e50 <memcpy>
	       shell->ctx->temp_buff,
	       shell->ctx->cmd_tmp_buff_len);
	shell->ctx->cmd_buff_len = shell->ctx->cmd_tmp_buff_len;
   41852:	68a3      	ldr	r3, [r4, #8]
   41854:	8eda      	ldrh	r2, [r3, #54]	; 0x36
   41856:	865a      	strh	r2, [r3, #50]	; 0x32
}
   41858:	bd10      	pop	{r4, pc}

0004185a <fcb_append_to_scratch>:
{
   4185a:	b538      	push	{r3, r4, r5, lr}
   4185c:	4604      	mov	r4, r0
		cur = fcb_getnext_sector(fcb, cur);
   4185e:	6a41      	ldr	r1, [r0, #36]	; 0x24
   41860:	f000 fa0f 	bl	41c82 <fcb_getnext_sector>
		if (cur == fcb->f_oldest) {
   41864:	6a23      	ldr	r3, [r4, #32]
		cur = fcb_getnext_sector(fcb, cur);
   41866:	4605      	mov	r5, r0
		if (cur == fcb->f_oldest) {
   41868:	4298      	cmp	r0, r3
   4186a:	d00f      	beq.n	4188c <fcb_append_to_scratch+0x32>
	if (!sector) {
   4186c:	b170      	cbz	r0, 4188c <fcb_append_to_scratch+0x32>
	rc = fcb_sector_hdr_init(fcb, sector, fcb->f_active_id + 1);
   4186e:	8ea2      	ldrh	r2, [r4, #52]	; 0x34
   41870:	4601      	mov	r1, r0
   41872:	3201      	adds	r2, #1
   41874:	b292      	uxth	r2, r2
   41876:	4620      	mov	r0, r4
   41878:	f000 f8b0 	bl	419dc <fcb_sector_hdr_init>
	if (rc) {
   4187c:	b928      	cbnz	r0, 4188a <fcb_append_to_scratch+0x30>
	fcb->f_active.fe_elem_off = sizeof(struct fcb_disk_area);
   4187e:	2308      	movs	r3, #8
   41880:	62a3      	str	r3, [r4, #40]	; 0x28
	fcb->f_active_id++;
   41882:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
	fcb->f_active.fe_sector = sector;
   41884:	6265      	str	r5, [r4, #36]	; 0x24
	fcb->f_active_id++;
   41886:	3301      	adds	r3, #1
   41888:	86a3      	strh	r3, [r4, #52]	; 0x34
}
   4188a:	bd38      	pop	{r3, r4, r5, pc}
		return -ENOSPC;
   4188c:	f06f 001b 	mvn.w	r0, #27
   41890:	e7fb      	b.n	4188a <fcb_append_to_scratch+0x30>

00041892 <fcb_append_finish>:

int
fcb_append_finish(struct fcb *fcb, struct fcb_entry *loc)
{
   41892:	b5f0      	push	{r4, r5, r6, r7, lr}
   41894:	b083      	sub	sp, #12
   41896:	4604      	mov	r4, r0
   41898:	460d      	mov	r5, r1
	int rc;
	u8_t crc8[fcb->f_align];
   4189a:	f890 2036 	ldrb.w	r2, [r0, #54]	; 0x36
{
   4189e:	af02      	add	r7, sp, #8
	u8_t crc8[fcb->f_align];
   418a0:	1dd3      	adds	r3, r2, #7
   418a2:	f403 73fc 	and.w	r3, r3, #504	; 0x1f8
   418a6:	ebad 0d03 	sub.w	sp, sp, r3
   418aa:	ae02      	add	r6, sp, #8
__ssp_bos_icheck3(memset, void *, int)
   418ac:	21ff      	movs	r1, #255	; 0xff
   418ae:	4630      	mov	r0, r6
   418b0:	f003 fb08 	bl	44ec4 <memset>
	off_t off;

	(void)memset(crc8, 0xFF, sizeof(crc8));

	rc = fcb_elem_crc8(fcb, loc, &crc8[0]);
   418b4:	4632      	mov	r2, r6
   418b6:	4629      	mov	r1, r5
   418b8:	4620      	mov	r0, r4
   418ba:	f000 f939 	bl	41b30 <fcb_elem_crc8>
	if (rc) {
   418be:	b9b0      	cbnz	r0, 418ee <fcb_append_finish+0x5c>
		return rc;
	}
	off = loc->fe_data_off + fcb_len_in_flash(fcb, loc->fe_data_len);
   418c0:	f894 3036 	ldrb.w	r3, [r4, #54]	; 0x36
   418c4:	89aa      	ldrh	r2, [r5, #12]
	if (fcb->f_align <= 1U) {
   418c6:	2b01      	cmp	r3, #1
	return (len + (fcb->f_align - 1U)) & ~(fcb->f_align - 1U);
   418c8:	bf82      	ittt	hi
   418ca:	f102 32ff 	addhi.w	r2, r2, #4294967295
   418ce:	18d2      	addhi	r2, r2, r3
   418d0:	4258      	neghi	r0, r3
   418d2:	68a9      	ldr	r1, [r5, #8]
   418d4:	bf88      	it	hi
   418d6:	4002      	andhi	r2, r0

	rc = fcb_flash_write(fcb, loc->fe_sector, off, crc8, fcb->f_align);
   418d8:	9300      	str	r3, [sp, #0]
   418da:	440a      	add	r2, r1
   418dc:	4633      	mov	r3, r6
   418de:	6829      	ldr	r1, [r5, #0]
   418e0:	4620      	mov	r0, r4
   418e2:	f000 f821 	bl	41928 <fcb_flash_write>
	if (rc) {
   418e6:	2800      	cmp	r0, #0
		return -EIO;
   418e8:	bf18      	it	ne
   418ea:	f06f 0004 	mvnne.w	r0, #4
	}
	return 0;
}
   418ee:	3704      	adds	r7, #4
   418f0:	46bd      	mov	sp, r7
   418f2:	bdf0      	pop	{r4, r5, r6, r7, pc}

000418f4 <fcb_get_align>:
u8_t
fcb_get_align(const struct fcb *fcb)
{
	u8_t align;

	if (fcb->fap == NULL) {
   418f4:	6b80      	ldr	r0, [r0, #56]	; 0x38
   418f6:	b108      	cbz	r0, 418fc <fcb_get_align+0x8>
		return 0;
	}

	align = flash_area_align(fcb->fap);
   418f8:	f001 b851 	b.w	4299e <flash_area_align>

	return align;
}
   418fc:	4770      	bx	lr

000418fe <fcb_flash_read>:

int fcb_flash_read(const struct fcb *fcb, const struct flash_sector *sector,
		   off_t off, void *dst, size_t len)
{
   418fe:	b570      	push	{r4, r5, r6, lr}
   41900:	4614      	mov	r4, r2
   41902:	461a      	mov	r2, r3
   41904:	9b04      	ldr	r3, [sp, #16]
	int rc;

	if (off + len > sector->fs_size) {
   41906:	684d      	ldr	r5, [r1, #4]
   41908:	18e6      	adds	r6, r4, r3
   4190a:	42ae      	cmp	r6, r5
   4190c:	d809      	bhi.n	41922 <fcb_flash_read+0x24>
		return -EINVAL;
	}

	if (fcb->fap == NULL) {
   4190e:	6b80      	ldr	r0, [r0, #56]	; 0x38
   41910:	b120      	cbz	r0, 4191c <fcb_flash_read+0x1e>
		return -EIO;
	}

	rc = flash_area_read(fcb->fap, sector->fs_off + off, dst, len);
   41912:	6809      	ldr	r1, [r1, #0]
   41914:	4421      	add	r1, r4
   41916:	f000 ffd6 	bl	428c6 <flash_area_read>

	if (rc != 0) {
   4191a:	b108      	cbz	r0, 41920 <fcb_flash_read+0x22>
		return -EIO;
   4191c:	f06f 0004 	mvn.w	r0, #4
	}

	return 0;
}
   41920:	bd70      	pop	{r4, r5, r6, pc}
		return -EINVAL;
   41922:	f06f 0015 	mvn.w	r0, #21
   41926:	e7fb      	b.n	41920 <fcb_flash_read+0x22>

00041928 <fcb_flash_write>:

int fcb_flash_write(const struct fcb *fcb, const struct flash_sector *sector,
		    off_t off, const void *src, size_t len)
{
   41928:	b570      	push	{r4, r5, r6, lr}
   4192a:	4614      	mov	r4, r2
   4192c:	461a      	mov	r2, r3
   4192e:	9b04      	ldr	r3, [sp, #16]
	int rc;

	if (off + len > sector->fs_size) {
   41930:	684d      	ldr	r5, [r1, #4]
   41932:	18e6      	adds	r6, r4, r3
   41934:	42ae      	cmp	r6, r5
   41936:	d809      	bhi.n	4194c <fcb_flash_write+0x24>
		return -EINVAL;
	}

	if (fcb->fap == NULL) {
   41938:	6b80      	ldr	r0, [r0, #56]	; 0x38
   4193a:	b120      	cbz	r0, 41946 <fcb_flash_write+0x1e>
		return -EIO;
	}

	rc = flash_area_write(fcb->fap, sector->fs_off + off, src, len);
   4193c:	6809      	ldr	r1, [r1, #0]
   4193e:	4421      	add	r1, r4
   41940:	f000 ffde 	bl	42900 <flash_area_write>

	if (rc != 0) {
   41944:	b108      	cbz	r0, 4194a <fcb_flash_write+0x22>
		return -EIO;
   41946:	f06f 0004 	mvn.w	r0, #4
	}

	return 0;
}
   4194a:	bd70      	pop	{r4, r5, r6, pc}
		return -EINVAL;
   4194c:	f06f 0015 	mvn.w	r0, #21
   41950:	e7fb      	b.n	4194a <fcb_flash_write+0x22>

00041952 <fcb_erase_sector>:
int
fcb_erase_sector(const struct fcb *fcb, const struct flash_sector *sector)
{
	int rc;

	if (fcb->fap == NULL) {
   41952:	6b80      	ldr	r0, [r0, #56]	; 0x38
{
   41954:	b508      	push	{r3, lr}
	if (fcb->fap == NULL) {
   41956:	b120      	cbz	r0, 41962 <fcb_erase_sector+0x10>
		return -EIO;
	}

	rc = flash_area_erase(fcb->fap, sector->fs_off, sector->fs_size);
   41958:	e9d1 1200 	ldrd	r1, r2, [r1]
   4195c:	f000 fff9 	bl	42952 <flash_area_erase>

	if (rc != 0) {
   41960:	b108      	cbz	r0, 41966 <fcb_erase_sector+0x14>
		return -EIO;
   41962:	f06f 0004 	mvn.w	r0, #4
	}

	return 0;
}
   41966:	bd08      	pop	{r3, pc}

00041968 <fcb_free_sector_cnt>:
	return rc;
}

int
fcb_free_sector_cnt(struct fcb *fcb)
{
   41968:	b538      	push	{r3, r4, r5, lr}
   4196a:	4605      	mov	r5, r0
	int i;
	struct flash_sector *fa;

	fa = fcb->f_active.fe_sector;
	for (i = 0; i < fcb->f_sector_cnt; i++) {
   4196c:	2400      	movs	r4, #0
	fa = fcb->f_active.fe_sector;
   4196e:	6a41      	ldr	r1, [r0, #36]	; 0x24
	for (i = 0; i < fcb->f_sector_cnt; i++) {
   41970:	796b      	ldrb	r3, [r5, #5]
   41972:	42a3      	cmp	r3, r4
   41974:	dc01      	bgt.n	4197a <fcb_free_sector_cnt+0x12>
		if (fa == fcb->f_oldest) {
			break;
		}
	}
	return i;
}
   41976:	4620      	mov	r0, r4
   41978:	bd38      	pop	{r3, r4, r5, pc}
		fa = fcb_getnext_sector(fcb, fa);
   4197a:	4628      	mov	r0, r5
   4197c:	f000 f981 	bl	41c82 <fcb_getnext_sector>
		if (fa == fcb->f_oldest) {
   41980:	6a2b      	ldr	r3, [r5, #32]
		fa = fcb_getnext_sector(fcb, fa);
   41982:	4601      	mov	r1, r0
		if (fa == fcb->f_oldest) {
   41984:	4283      	cmp	r3, r0
   41986:	d0f6      	beq.n	41976 <fcb_free_sector_cnt+0xe>
	for (i = 0; i < fcb->f_sector_cnt; i++) {
   41988:	3401      	adds	r4, #1
   4198a:	e7f1      	b.n	41970 <fcb_free_sector_cnt+0x8>

0004198c <fcb_put_len>:
 * 1 byte for lengths < 128 bytes, and 2 bytes for < 16384.
 */
int
fcb_put_len(u8_t *buf, u16_t len)
{
	if (len < 0x80) {
   4198c:	297f      	cmp	r1, #127	; 0x7f
   4198e:	d802      	bhi.n	41996 <fcb_put_len+0xa>
		buf[0] = len;
   41990:	7001      	strb	r1, [r0, #0]
		return 1;
   41992:	2001      	movs	r0, #1
   41994:	4770      	bx	lr
	} else if (len < FCB_MAX_LEN) {
   41996:	f647 73fe 	movw	r3, #32766	; 0x7ffe
   4199a:	4299      	cmp	r1, r3
		buf[0] = (len & 0x7f) | 0x80;
   4199c:	bf9f      	itttt	ls
   4199e:	f061 037f 	ornls	r3, r1, #127	; 0x7f
		buf[1] = len >> 7;
   419a2:	09c9      	lsrls	r1, r1, #7
		buf[0] = (len & 0x7f) | 0x80;
   419a4:	7003      	strbls	r3, [r0, #0]
		buf[1] = len >> 7;
   419a6:	7041      	strbls	r1, [r0, #1]
		return 2;
   419a8:	bf94      	ite	ls
   419aa:	2002      	movls	r0, #2
	} else {
		return -EINVAL;
   419ac:	f06f 0015 	mvnhi.w	r0, #21
	}
}
   419b0:	4770      	bx	lr

000419b2 <fcb_get_len>:
int
fcb_get_len(u8_t *buf, u16_t *len)
{
	int rc;

	if (buf[0] & 0x80) {
   419b2:	7803      	ldrb	r3, [r0, #0]
   419b4:	061a      	lsls	r2, r3, #24
   419b6:	d50b      	bpl.n	419d0 <fcb_get_len+0x1e>
		if (buf[0] == 0xff && buf[1] == 0xff) {
   419b8:	7842      	ldrb	r2, [r0, #1]
   419ba:	ea03 0002 	and.w	r0, r3, r2
   419be:	28ff      	cmp	r0, #255	; 0xff
   419c0:	d009      	beq.n	419d6 <fcb_get_len+0x24>
			return -ENOTSUP;
		}
		*len = (buf[0] & 0x7f) | (buf[1] << 7);
   419c2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   419c6:	ea43 13c2 	orr.w	r3, r3, r2, lsl #7
   419ca:	800b      	strh	r3, [r1, #0]
		rc = 2;
   419cc:	2002      	movs	r0, #2
   419ce:	4770      	bx	lr
	} else {
		*len = buf[0];
   419d0:	800b      	strh	r3, [r1, #0]
		rc = 1;
   419d2:	2001      	movs	r0, #1
   419d4:	4770      	bx	lr
			return -ENOTSUP;
   419d6:	f06f 0085 	mvn.w	r0, #133	; 0x85
	}
	return rc;
}
   419da:	4770      	bx	lr

000419dc <fcb_sector_hdr_init>:
/**
 * Initialize erased sector for use.
 */
int
fcb_sector_hdr_init(struct fcb *fcb, struct flash_sector *sector, u16_t id)
{
   419dc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	struct fcb_disk_area fda;
	int rc;

	fda.fd_magic = fcb->f_magic;
	fda.fd_ver = fcb->f_version;
   419de:	7903      	ldrb	r3, [r0, #4]
	fda.fd_magic = fcb->f_magic;
   419e0:	6804      	ldr	r4, [r0, #0]
	fda.fd_ver = fcb->f_version;
   419e2:	f88d 300c 	strb.w	r3, [sp, #12]
	fda._pad = 0xff;
   419e6:	23ff      	movs	r3, #255	; 0xff
   419e8:	f88d 300d 	strb.w	r3, [sp, #13]
	fda.fd_id = id;

	rc = fcb_flash_write(fcb, sector, 0, &fda, sizeof(fda));
   419ec:	2308      	movs	r3, #8
	fda.fd_id = id;
   419ee:	f8ad 200e 	strh.w	r2, [sp, #14]
	rc = fcb_flash_write(fcb, sector, 0, &fda, sizeof(fda));
   419f2:	9300      	str	r3, [sp, #0]
   419f4:	2200      	movs	r2, #0
   419f6:	446b      	add	r3, sp
	fda.fd_magic = fcb->f_magic;
   419f8:	9402      	str	r4, [sp, #8]
	rc = fcb_flash_write(fcb, sector, 0, &fda, sizeof(fda));
   419fa:	f7ff ff95 	bl	41928 <fcb_flash_write>
	if (rc != 0) {
   419fe:	2800      	cmp	r0, #0
		return -EIO;
	}
	return 0;
}
   41a00:	bf18      	it	ne
   41a02:	f06f 0004 	mvnne.w	r0, #4
   41a06:	b004      	add	sp, #16
   41a08:	bd10      	pop	{r4, pc}

00041a0a <fcb_sector_hdr_read>:
 * Returns 0 if sector is unused;
 * Returns 1 if sector has data.
 */
int fcb_sector_hdr_read(struct fcb *fcb, struct flash_sector *sector,
			struct fcb_disk_area *fdap)
{
   41a0a:	b530      	push	{r4, r5, lr}
   41a0c:	4605      	mov	r5, r0
   41a0e:	b085      	sub	sp, #20
	struct fcb_disk_area fda;
	int rc;

	if (!fdap) {
   41a10:	4614      	mov	r4, r2
   41a12:	b902      	cbnz	r2, 41a16 <fcb_sector_hdr_read+0xc>
		fdap = &fda;
   41a14:	ac02      	add	r4, sp, #8
	}
	rc = fcb_flash_read(fcb, sector, 0, fdap, sizeof(*fdap));
   41a16:	2308      	movs	r3, #8
   41a18:	2200      	movs	r2, #0
   41a1a:	9300      	str	r3, [sp, #0]
   41a1c:	4628      	mov	r0, r5
   41a1e:	4623      	mov	r3, r4
   41a20:	f7ff ff6d 	bl	418fe <fcb_flash_read>
	if (rc) {
   41a24:	b950      	cbnz	r0, 41a3c <fcb_sector_hdr_read+0x32>
		return -EIO;
	}
	if (fdap->fd_magic == 0xffffffff) {
   41a26:	6823      	ldr	r3, [r4, #0]
   41a28:	1c5a      	adds	r2, r3, #1
   41a2a:	d005      	beq.n	41a38 <fcb_sector_hdr_read+0x2e>
		return 0;
	}
	if (fdap->fd_magic != fcb->f_magic) {
   41a2c:	682a      	ldr	r2, [r5, #0]
		return -ENOMSG;
   41a2e:	4293      	cmp	r3, r2
   41a30:	bf0c      	ite	eq
   41a32:	2001      	moveq	r0, #1
   41a34:	f06f 0022 	mvnne.w	r0, #34	; 0x22
	}
	return 1;
}
   41a38:	b005      	add	sp, #20
   41a3a:	bd30      	pop	{r4, r5, pc}
		return -EIO;
   41a3c:	f06f 0004 	mvn.w	r0, #4
   41a40:	e7fa      	b.n	41a38 <fcb_sector_hdr_read+0x2e>

00041a42 <fcb_init>:
{
   41a42:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (!fcb->f_sectors || fcb->f_sector_cnt - fcb->f_scratch_cnt < 1) {
   41a46:	688b      	ldr	r3, [r1, #8]
{
   41a48:	b085      	sub	sp, #20
   41a4a:	460c      	mov	r4, r1
	if (!fcb->f_sectors || fcb->f_sector_cnt - fcb->f_scratch_cnt < 1) {
   41a4c:	b92b      	cbnz	r3, 41a5a <fcb_init+0x18>
		return -EINVAL;
   41a4e:	f06f 0515 	mvn.w	r5, #21
}
   41a52:	4628      	mov	r0, r5
   41a54:	b005      	add	sp, #20
   41a56:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (!fcb->f_sectors || fcb->f_sector_cnt - fcb->f_scratch_cnt < 1) {
   41a5a:	794b      	ldrb	r3, [r1, #5]
   41a5c:	798a      	ldrb	r2, [r1, #6]
   41a5e:	1a9b      	subs	r3, r3, r2
   41a60:	2b00      	cmp	r3, #0
   41a62:	ddf4      	ble.n	41a4e <fcb_init+0xc>
	rc = flash_area_open(f_area_id, &fcb->fap);
   41a64:	3138      	adds	r1, #56	; 0x38
   41a66:	b2c0      	uxtb	r0, r0
   41a68:	f7e3 fb80 	bl	2516c <flash_area_open>
	if (rc != 0) {
   41a6c:	4606      	mov	r6, r0
   41a6e:	2800      	cmp	r0, #0
   41a70:	d1ed      	bne.n	41a4e <fcb_init+0xc>
	align = fcb_get_align(fcb);
   41a72:	4620      	mov	r0, r4
   41a74:	f7ff ff3e 	bl	418f4 <fcb_get_align>
	if (align == 0U) {
   41a78:	4683      	mov	fp, r0
   41a7a:	2800      	cmp	r0, #0
   41a7c:	d0e7      	beq.n	41a4e <fcb_init+0xc>
	int oldest = -1, newest = -1;
   41a7e:	f04f 33ff 	mov.w	r3, #4294967295
	struct flash_sector *oldest_sector = NULL, *newest_sector = NULL;
   41a82:	46b2      	mov	sl, r6
   41a84:	4637      	mov	r7, r6
	int oldest = -1, newest = -1;
   41a86:	4698      	mov	r8, r3
	for (i = 0; i < fcb->f_sector_cnt; i++) {
   41a88:	7962      	ldrb	r2, [r4, #5]
   41a8a:	42b2      	cmp	r2, r6
   41a8c:	dc24      	bgt.n	41ad8 <fcb_init+0x96>
	if (oldest < 0) {
   41a8e:	f1b8 3fff 	cmp.w	r8, #4294967295
   41a92:	d149      	bne.n	41b28 <fcb_init+0xe6>
		oldest_sector = newest_sector = &fcb->f_sectors[0];
   41a94:	68a7      	ldr	r7, [r4, #8]
		rc = fcb_sector_hdr_init(fcb, oldest_sector, 0);
   41a96:	2200      	movs	r2, #0
   41a98:	4639      	mov	r1, r7
   41a9a:	4620      	mov	r0, r4
   41a9c:	f7ff ff9e 	bl	419dc <fcb_sector_hdr_init>
		if (rc) {
   41aa0:	4605      	mov	r5, r0
   41aa2:	2800      	cmp	r0, #0
   41aa4:	d1d5      	bne.n	41a52 <fcb_init+0x10>
		oldest_sector = newest_sector = &fcb->f_sectors[0];
   41aa6:	46ba      	mov	sl, r7
	fcb->f_active.fe_elem_off = sizeof(struct fcb_disk_area);
   41aa8:	2308      	movs	r3, #8
	fcb->f_active.fe_sector = newest_sector;
   41aaa:	e9c4 7a08 	strd	r7, sl, [r4, #32]
	fcb->f_align = align;
   41aae:	f884 b036 	strb.w	fp, [r4, #54]	; 0x36
	fcb->f_active.fe_elem_off = sizeof(struct fcb_disk_area);
   41ab2:	62a3      	str	r3, [r4, #40]	; 0x28
	fcb->f_active_id = newest;
   41ab4:	86a5      	strh	r5, [r4, #52]	; 0x34
		rc = fcb_getnext_in_sector(fcb, &fcb->f_active);
   41ab6:	f104 0624 	add.w	r6, r4, #36	; 0x24
   41aba:	4631      	mov	r1, r6
   41abc:	4620      	mov	r0, r4
   41abe:	f000 f8bd 	bl	41c3c <fcb_getnext_in_sector>
		if (rc == -ENOTSUP) {
   41ac2:	f110 0f86 	cmn.w	r0, #134	; 0x86
		rc = fcb_getnext_in_sector(fcb, &fcb->f_active);
   41ac6:	4605      	mov	r5, r0
		if (rc == -ENOTSUP) {
   41ac8:	d030      	beq.n	41b2c <fcb_init+0xea>
		if (rc != 0) {
   41aca:	2800      	cmp	r0, #0
   41acc:	d0f5      	beq.n	41aba <fcb_init+0x78>
	return z_impl_k_mutex_init(mutex);
   41ace:	f104 000c 	add.w	r0, r4, #12
   41ad2:	f002 fffe 	bl	44ad2 <z_impl_k_mutex_init>
   41ad6:	e7bc      	b.n	41a52 <fcb_init+0x10>
		sector = &fcb->f_sectors[i];
   41ad8:	68a2      	ldr	r2, [r4, #8]
		rc = fcb_sector_hdr_read(fcb, sector, &fda);
   41ada:	4620      	mov	r0, r4
		sector = &fcb->f_sectors[i];
   41adc:	eb02 09c6 	add.w	r9, r2, r6, lsl #3
		rc = fcb_sector_hdr_read(fcb, sector, &fda);
   41ae0:	4649      	mov	r1, r9
   41ae2:	aa02      	add	r2, sp, #8
   41ae4:	9301      	str	r3, [sp, #4]
   41ae6:	f7ff ff90 	bl	41a0a <fcb_sector_hdr_read>
		if (rc < 0) {
   41aea:	1e05      	subs	r5, r0, #0
   41aec:	dbb1      	blt.n	41a52 <fcb_init+0x10>
		if (rc == 0) {
   41aee:	9b01      	ldr	r3, [sp, #4]
   41af0:	d008      	beq.n	41b04 <fcb_init+0xc2>
		if (oldest < 0) {
   41af2:	f1b8 3fff 	cmp.w	r8, #4294967295
   41af6:	f8bd 200e 	ldrh.w	r2, [sp, #14]
   41afa:	d105      	bne.n	41b08 <fcb_init+0xc6>
			oldest = newest = fda.fd_id;
   41afc:	4690      	mov	r8, r2
			oldest_sector = newest_sector = sector;
   41afe:	46ca      	mov	sl, r9
   41b00:	464f      	mov	r7, r9
			oldest = newest = fda.fd_id;
   41b02:	4613      	mov	r3, r2
	for (i = 0; i < fcb->f_sector_cnt; i++) {
   41b04:	3601      	adds	r6, #1
   41b06:	e7bf      	b.n	41a88 <fcb_init+0x46>
		if (FCB_ID_GT(fda.fd_id, newest)) {
   41b08:	b215      	sxth	r5, r2
   41b0a:	b218      	sxth	r0, r3
   41b0c:	1a28      	subs	r0, r5, r0
   41b0e:	2800      	cmp	r0, #0
   41b10:	dd02      	ble.n	41b18 <fcb_init+0xd6>
			newest = fda.fd_id;
   41b12:	4613      	mov	r3, r2
			newest_sector = sector;
   41b14:	46ca      	mov	sl, r9
   41b16:	e7f5      	b.n	41b04 <fcb_init+0xc2>
		} else if (FCB_ID_GT(oldest, fda.fd_id)) {
   41b18:	fa0f f188 	sxth.w	r1, r8
   41b1c:	1b49      	subs	r1, r1, r5
			oldest = fda.fd_id;
   41b1e:	2900      	cmp	r1, #0
   41b20:	bfc4      	itt	gt
   41b22:	4690      	movgt	r8, r2
   41b24:	464f      	movgt	r7, r9
   41b26:	e7ed      	b.n	41b04 <fcb_init+0xc2>
   41b28:	461d      	mov	r5, r3
   41b2a:	e7bd      	b.n	41aa8 <fcb_init+0x66>
			rc = 0;
   41b2c:	2500      	movs	r5, #0
   41b2e:	e7ce      	b.n	41ace <fcb_init+0x8c>

00041b30 <fcb_elem_crc8>:
 * Given offset in flash sector, fill in rest of the fcb_entry, and crc8 over
 * the data.
 */
int
fcb_elem_crc8(struct fcb *fcb, struct fcb_entry *loc, u8_t *c8p)
{
   41b30:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   41b34:	460c      	mov	r4, r1
   41b36:	4617      	mov	r7, r2
	u16_t len;
	u32_t off;
	u32_t end;
	int rc;

	if (loc->fe_elem_off + 2 > loc->fe_sector->fs_size) {
   41b38:	e9d1 1200 	ldrd	r1, r2, [r1]
   41b3c:	684b      	ldr	r3, [r1, #4]
   41b3e:	1c95      	adds	r5, r2, #2
   41b40:	429d      	cmp	r5, r3
{
   41b42:	b08c      	sub	sp, #48	; 0x30
   41b44:	4606      	mov	r6, r0
	if (loc->fe_elem_off + 2 > loc->fe_sector->fs_size) {
   41b46:	d84b      	bhi.n	41be0 <fcb_elem_crc8+0xb0>
		return -ENOTSUP;
	}
	rc = fcb_flash_read(fcb, loc->fe_sector, loc->fe_elem_off, tmp_str, 2);
   41b48:	2302      	movs	r3, #2
   41b4a:	9300      	str	r3, [sp, #0]
   41b4c:	ab04      	add	r3, sp, #16
   41b4e:	f7ff fed6 	bl	418fe <fcb_flash_read>
	if (rc) {
   41b52:	b120      	cbz	r0, 41b5e <fcb_elem_crc8+0x2e>
		return -EIO;
   41b54:	f06f 0004 	mvn.w	r0, #4
		crc8 = crc8_ccitt(crc8, tmp_str, blk_sz);
	}
	*c8p = crc8;

	return 0;
}
   41b58:	b00c      	add	sp, #48	; 0x30
   41b5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	cnt = fcb_get_len(tmp_str, &len);
   41b5e:	f10d 010e 	add.w	r1, sp, #14
   41b62:	a804      	add	r0, sp, #16
   41b64:	f7ff ff25 	bl	419b2 <fcb_get_len>
	if (cnt < 0) {
   41b68:	2800      	cmp	r0, #0
   41b6a:	dbf5      	blt.n	41b58 <fcb_elem_crc8+0x28>
	loc->fe_data_off = loc->fe_elem_off + fcb_len_in_flash(fcb, cnt);
   41b6c:	f896 2036 	ldrb.w	r2, [r6, #54]	; 0x36
	if (fcb->f_align <= 1U) {
   41b70:	b283      	uxth	r3, r0
   41b72:	2a01      	cmp	r2, #1
	return (len + (fcb->f_align - 1U)) & ~(fcb->f_align - 1U);
   41b74:	bf84      	itt	hi
   41b76:	f102 35ff 	addhi.w	r5, r2, #4294967295
   41b7a:	195b      	addhi	r3, r3, r5
   41b7c:	6861      	ldr	r1, [r4, #4]
   41b7e:	bf84      	itt	hi
   41b80:	4252      	neghi	r2, r2
   41b82:	4013      	andhi	r3, r2
   41b84:	440b      	add	r3, r1
   41b86:	60a3      	str	r3, [r4, #8]
	loc->fe_data_len = len;
   41b88:	f8bd 300e 	ldrh.w	r3, [sp, #14]
	crc8 = crc8_ccitt(crc8, tmp_str, cnt);
   41b8c:	4602      	mov	r2, r0
	loc->fe_data_len = len;
   41b8e:	81a3      	strh	r3, [r4, #12]
	crc8 = crc8_ccitt(crc8, tmp_str, cnt);
   41b90:	a904      	add	r1, sp, #16
   41b92:	20ff      	movs	r0, #255	; 0xff
   41b94:	f7df fc72 	bl	2147c <crc8_ccitt>
   41b98:	4682      	mov	sl, r0
	off = loc->fe_data_off;
   41b9a:	68a5      	ldr	r5, [r4, #8]
	end = loc->fe_data_off + len;
   41b9c:	f8bd 900e 	ldrh.w	r9, [sp, #14]
   41ba0:	44a9      	add	r9, r5
	for (; off < end; off += blk_sz) {
   41ba2:	454d      	cmp	r5, r9
   41ba4:	d303      	bcc.n	41bae <fcb_elem_crc8+0x7e>
	*c8p = crc8;
   41ba6:	f887 a000 	strb.w	sl, [r7]
	return 0;
   41baa:	2000      	movs	r0, #0
   41bac:	e7d4      	b.n	41b58 <fcb_elem_crc8+0x28>
		blk_sz = end - off;
   41bae:	eba9 0805 	sub.w	r8, r9, r5
   41bb2:	f1b8 0f20 	cmp.w	r8, #32
   41bb6:	bf28      	it	cs
   41bb8:	f04f 0820 	movcs.w	r8, #32
		rc = fcb_flash_read(fcb, loc->fe_sector, off, tmp_str, blk_sz);
   41bbc:	ab04      	add	r3, sp, #16
   41bbe:	f8cd 8000 	str.w	r8, [sp]
   41bc2:	462a      	mov	r2, r5
   41bc4:	6821      	ldr	r1, [r4, #0]
   41bc6:	4630      	mov	r0, r6
   41bc8:	f7ff fe99 	bl	418fe <fcb_flash_read>
		if (rc) {
   41bcc:	2800      	cmp	r0, #0
   41bce:	d1c1      	bne.n	41b54 <fcb_elem_crc8+0x24>
		crc8 = crc8_ccitt(crc8, tmp_str, blk_sz);
   41bd0:	4650      	mov	r0, sl
   41bd2:	4642      	mov	r2, r8
   41bd4:	a904      	add	r1, sp, #16
   41bd6:	f7df fc51 	bl	2147c <crc8_ccitt>
	for (; off < end; off += blk_sz) {
   41bda:	4445      	add	r5, r8
		crc8 = crc8_ccitt(crc8, tmp_str, blk_sz);
   41bdc:	4682      	mov	sl, r0
   41bde:	e7e0      	b.n	41ba2 <fcb_elem_crc8+0x72>
		return -ENOTSUP;
   41be0:	f06f 0085 	mvn.w	r0, #133	; 0x85
   41be4:	e7b8      	b.n	41b58 <fcb_elem_crc8+0x28>

00041be6 <fcb_elem_info>:

int fcb_elem_info(struct fcb *fcb, struct fcb_entry *loc)
{
   41be6:	b530      	push	{r4, r5, lr}
   41be8:	b085      	sub	sp, #20
	int rc;
	u8_t crc8;
	u8_t fl_crc8;
	off_t off;

	rc = fcb_elem_crc8(fcb, loc, &crc8);
   41bea:	f10d 020e 	add.w	r2, sp, #14
{
   41bee:	4605      	mov	r5, r0
   41bf0:	460c      	mov	r4, r1
	rc = fcb_elem_crc8(fcb, loc, &crc8);
   41bf2:	f7ff ff9d 	bl	41b30 <fcb_elem_crc8>
	if (rc) {
   41bf6:	b9e0      	cbnz	r0, 41c32 <fcb_elem_info+0x4c>
		return rc;
	}
	off = loc->fe_data_off + fcb_len_in_flash(fcb, loc->fe_data_len);
   41bf8:	f895 3036 	ldrb.w	r3, [r5, #54]	; 0x36
   41bfc:	89a2      	ldrh	r2, [r4, #12]
	if (fcb->f_align <= 1U) {
   41bfe:	2b01      	cmp	r3, #1
	return (len + (fcb->f_align - 1U)) & ~(fcb->f_align - 1U);
   41c00:	bf81      	itttt	hi
   41c02:	f102 32ff 	addhi.w	r2, r2, #4294967295
   41c06:	18d2      	addhi	r2, r2, r3
   41c08:	425b      	neghi	r3, r3
   41c0a:	401a      	andhi	r2, r3

	rc = fcb_flash_read(fcb, loc->fe_sector, off, &fl_crc8, sizeof(fl_crc8));
   41c0c:	2301      	movs	r3, #1
	off = loc->fe_data_off + fcb_len_in_flash(fcb, loc->fe_data_len);
   41c0e:	68a1      	ldr	r1, [r4, #8]
	rc = fcb_flash_read(fcb, loc->fe_sector, off, &fl_crc8, sizeof(fl_crc8));
   41c10:	9300      	str	r3, [sp, #0]
   41c12:	440a      	add	r2, r1
   41c14:	f10d 030f 	add.w	r3, sp, #15
   41c18:	6821      	ldr	r1, [r4, #0]
   41c1a:	4628      	mov	r0, r5
   41c1c:	f7ff fe6f 	bl	418fe <fcb_flash_read>
	if (rc) {
   41c20:	b948      	cbnz	r0, 41c36 <fcb_elem_info+0x50>
		return -EIO;
	}

	if (fl_crc8 != crc8) {
   41c22:	f89d 200f 	ldrb.w	r2, [sp, #15]
   41c26:	f89d 300e 	ldrb.w	r3, [sp, #14]
   41c2a:	429a      	cmp	r2, r3
		return -EBADMSG;
   41c2c:	bf18      	it	ne
   41c2e:	f06f 004c 	mvnne.w	r0, #76	; 0x4c
	}
	return 0;
}
   41c32:	b005      	add	sp, #20
   41c34:	bd30      	pop	{r4, r5, pc}
		return -EIO;
   41c36:	f06f 0004 	mvn.w	r0, #4
   41c3a:	e7fa      	b.n	41c32 <fcb_elem_info+0x4c>

00041c3c <fcb_getnext_in_sector>:
#include <fs/fcb.h>
#include "fcb_priv.h"

int
fcb_getnext_in_sector(struct fcb *fcb, struct fcb_entry *loc)
{
   41c3c:	b538      	push	{r3, r4, r5, lr}
   41c3e:	4604      	mov	r4, r0
   41c40:	460d      	mov	r5, r1
	int rc;

	rc = fcb_elem_info(fcb, loc);
   41c42:	f7ff ffd0 	bl	41be6 <fcb_elem_info>
	if (rc == 0 || rc == -EBADMSG) {
   41c46:	b110      	cbz	r0, 41c4e <fcb_getnext_in_sector+0x12>
   41c48:	f110 0f4d 	cmn.w	r0, #77	; 0x4d
   41c4c:	d118      	bne.n	41c80 <fcb_getnext_in_sector+0x44>
		do {
			loc->fe_elem_off = loc->fe_data_off +
			  fcb_len_in_flash(fcb, loc->fe_data_len) +
   41c4e:	f894 1036 	ldrb.w	r1, [r4, #54]	; 0x36
   41c52:	89ab      	ldrh	r3, [r5, #12]
	if (fcb->f_align <= 1U) {
   41c54:	2901      	cmp	r1, #1
	return (len + (fcb->f_align - 1U)) & ~(fcb->f_align - 1U);
   41c56:	bf88      	it	hi
   41c58:	f103 33ff 	addhi.w	r3, r3, #4294967295
			loc->fe_elem_off = loc->fe_data_off +
   41c5c:	68aa      	ldr	r2, [r5, #8]
   41c5e:	bf82      	ittt	hi
   41c60:	185b      	addhi	r3, r3, r1
   41c62:	4248      	neghi	r0, r1
   41c64:	4003      	andhi	r3, r0
	if (fcb->f_align <= 1U) {
   41c66:	2901      	cmp	r1, #1
   41c68:	4413      	add	r3, r2
		return len;
   41c6a:	bf92      	itee	ls
   41c6c:	2201      	movls	r2, #1
	return (len + (fcb->f_align - 1U)) & ~(fcb->f_align - 1U);
   41c6e:	424a      	neghi	r2, r1
   41c70:	400a      	andhi	r2, r1
			  fcb_len_in_flash(fcb, loc->fe_data_len) +
   41c72:	4413      	add	r3, r2
			loc->fe_elem_off = loc->fe_data_off +
   41c74:	606b      	str	r3, [r5, #4]
			  fcb_len_in_flash(fcb, FCB_CRC_SZ);
			rc = fcb_elem_info(fcb, loc);
   41c76:	4629      	mov	r1, r5
   41c78:	4620      	mov	r0, r4
   41c7a:	f7ff ffb4 	bl	41be6 <fcb_elem_info>
			if (rc != -EBADMSG) {
   41c7e:	e7e3      	b.n	41c48 <fcb_getnext_in_sector+0xc>
				break;
			}
		} while (rc == -EBADMSG);
	}
	return rc;
}
   41c80:	bd38      	pop	{r3, r4, r5, pc}

00041c82 <fcb_getnext_sector>:

struct flash_sector *
fcb_getnext_sector(struct fcb *fcb, struct flash_sector *sector)
{
	sector++;
	if (sector >= &fcb->f_sectors[fcb->f_sector_cnt]) {
   41c82:	6882      	ldr	r2, [r0, #8]
   41c84:	7943      	ldrb	r3, [r0, #5]
	sector++;
   41c86:	3108      	adds	r1, #8
	if (sector >= &fcb->f_sectors[fcb->f_sector_cnt]) {
   41c88:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
		sector = &fcb->f_sectors[0];
	}
	return sector;
}
   41c8c:	4299      	cmp	r1, r3
   41c8e:	bf34      	ite	cc
   41c90:	4608      	movcc	r0, r1
   41c92:	4610      	movcs	r0, r2
   41c94:	4770      	bx	lr

00041c96 <fcb_getnext_nolock>:
int
fcb_getnext_nolock(struct fcb *fcb, struct fcb_entry *loc)
{
	int rc;

	if (loc->fe_sector == NULL) {
   41c96:	680b      	ldr	r3, [r1, #0]
{
   41c98:	b570      	push	{r4, r5, r6, lr}
   41c9a:	4605      	mov	r5, r0
   41c9c:	460c      	mov	r4, r1
	if (loc->fe_sector == NULL) {
   41c9e:	b90b      	cbnz	r3, 41ca4 <fcb_getnext_nolock+0xe>
		/*
		 * Find the first one we have in flash.
		 */
		loc->fe_sector = fcb->f_oldest;
   41ca0:	6a03      	ldr	r3, [r0, #32]
   41ca2:	600b      	str	r3, [r1, #0]
	}
	if (loc->fe_elem_off == 0U) {
   41ca4:	6863      	ldr	r3, [r4, #4]
   41ca6:	b95b      	cbnz	r3, 41cc0 <fcb_getnext_nolock+0x2a>
		/*
		 * If offset is zero, we serve the first entry from the sector.
		 */
		loc->fe_elem_off = sizeof(struct fcb_disk_area);
   41ca8:	2308      	movs	r3, #8
		rc = fcb_elem_info(fcb, loc);
   41caa:	4621      	mov	r1, r4
		loc->fe_elem_off = sizeof(struct fcb_disk_area);
   41cac:	6063      	str	r3, [r4, #4]
		rc = fcb_elem_info(fcb, loc);
   41cae:	4628      	mov	r0, r5
   41cb0:	f7ff ff99 	bl	41be6 <fcb_elem_info>
		switch (rc) {
   41cb4:	f110 0f4d 	cmn.w	r0, #77	; 0x4d
   41cb8:	d021      	beq.n	41cfe <fcb_getnext_nolock+0x68>
   41cba:	b950      	cbnz	r0, 41cd2 <fcb_getnext_nolock+0x3c>
			goto next_sector;
		}
	} else {
		rc = fcb_getnext_in_sector(fcb, loc);
		if (rc == 0) {
			return 0;
   41cbc:	2000      	movs	r0, #0
			}
		}
	}

	return 0;
}
   41cbe:	bd70      	pop	{r4, r5, r6, pc}
		rc = fcb_getnext_in_sector(fcb, loc);
   41cc0:	4621      	mov	r1, r4
   41cc2:	4628      	mov	r0, r5
   41cc4:	f7ff ffba 	bl	41c3c <fcb_getnext_in_sector>
		if (rc == 0) {
   41cc8:	2800      	cmp	r0, #0
   41cca:	d0f7      	beq.n	41cbc <fcb_getnext_nolock+0x26>
		if (rc == -ENOTSUP) {
   41ccc:	f110 0f86 	cmn.w	r0, #134	; 0x86
   41cd0:	d113      	bne.n	41cfa <fcb_getnext_nolock+0x64>
			loc->fe_elem_off = sizeof(struct fcb_disk_area);
   41cd2:	2608      	movs	r6, #8
			if (loc->fe_sector == fcb->f_active.fe_sector) {
   41cd4:	6821      	ldr	r1, [r4, #0]
   41cd6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   41cd8:	4299      	cmp	r1, r3
   41cda:	d019      	beq.n	41d10 <fcb_getnext_nolock+0x7a>
			loc->fe_sector = fcb_getnext_sector(fcb, loc->fe_sector);
   41cdc:	4628      	mov	r0, r5
   41cde:	f7ff ffd0 	bl	41c82 <fcb_getnext_sector>
			rc = fcb_elem_info(fcb, loc);
   41ce2:	4621      	mov	r1, r4
			loc->fe_elem_off = sizeof(struct fcb_disk_area);
   41ce4:	e9c4 0600 	strd	r0, r6, [r4]
			rc = fcb_elem_info(fcb, loc);
   41ce8:	4628      	mov	r0, r5
   41cea:	f7ff ff7c 	bl	41be6 <fcb_elem_info>
			switch (rc) {
   41cee:	f110 0f4d 	cmn.w	r0, #77	; 0x4d
   41cf2:	d004      	beq.n	41cfe <fcb_getnext_nolock+0x68>
   41cf4:	2800      	cmp	r0, #0
   41cf6:	d0e1      	beq.n	41cbc <fcb_getnext_nolock+0x26>
   41cf8:	e7ec      	b.n	41cd4 <fcb_getnext_nolock+0x3e>
	while (rc == -EBADMSG) {
   41cfa:	304d      	adds	r0, #77	; 0x4d
   41cfc:	d1de      	bne.n	41cbc <fcb_getnext_nolock+0x26>
		rc = fcb_getnext_in_sector(fcb, loc);
   41cfe:	4621      	mov	r1, r4
   41d00:	4628      	mov	r0, r5
   41d02:	f7ff ff9b 	bl	41c3c <fcb_getnext_in_sector>
		if (rc == 0) {
   41d06:	2800      	cmp	r0, #0
   41d08:	d0d8      	beq.n	41cbc <fcb_getnext_nolock+0x26>
		if (rc != -EBADMSG) {
   41d0a:	304d      	adds	r0, #77	; 0x4d
   41d0c:	d0f7      	beq.n	41cfe <fcb_getnext_nolock+0x68>
next_sector:
   41d0e:	e7e0      	b.n	41cd2 <fcb_getnext_nolock+0x3c>
				return -ENOTSUP;
   41d10:	f06f 0085 	mvn.w	r0, #133	; 0x85
   41d14:	e7d3      	b.n	41cbe <fcb_getnext_nolock+0x28>

00041d16 <fcb_getnext>:

int
fcb_getnext(struct fcb *fcb, struct fcb_entry *loc)
{
   41d16:	b570      	push	{r4, r5, r6, lr}
   41d18:	4604      	mov	r4, r0
   41d1a:	460e      	mov	r6, r1
	int rc;

	rc = k_mutex_lock(&fcb->f_mtx, K_FOREVER);
   41d1c:	f100 050c 	add.w	r5, r0, #12
	return z_impl_k_mutex_lock(mutex, timeout);
   41d20:	f04f 31ff 	mov.w	r1, #4294967295
   41d24:	4628      	mov	r0, r5
   41d26:	f7f9 feff 	bl	3bb28 <z_impl_k_mutex_lock>
	if (rc) {
   41d2a:	b948      	cbnz	r0, 41d40 <fcb_getnext+0x2a>
		return -EINVAL;
	}
	rc = fcb_getnext_nolock(fcb, loc);
   41d2c:	4631      	mov	r1, r6
   41d2e:	4620      	mov	r0, r4
   41d30:	f7ff ffb1 	bl	41c96 <fcb_getnext_nolock>
   41d34:	4604      	mov	r4, r0
	return z_impl_k_mutex_unlock(mutex);
   41d36:	4628      	mov	r0, r5
   41d38:	f7f9 ffd4 	bl	3bce4 <z_impl_k_mutex_unlock>
	k_mutex_unlock(&fcb->f_mtx);

	return rc;
}
   41d3c:	4620      	mov	r0, r4
   41d3e:	bd70      	pop	{r4, r5, r6, pc}
		return -EINVAL;
   41d40:	f06f 0415 	mvn.w	r4, #21
   41d44:	e7fa      	b.n	41d3c <fcb_getnext+0x26>

00041d46 <fcb_rotate>:
#include <fs/fcb.h>
#include "fcb_priv.h"

int
fcb_rotate(struct fcb *fcb)
{
   41d46:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   41d48:	4604      	mov	r4, r0
	struct flash_sector *sector;
	int rc = 0;

	rc = k_mutex_lock(&fcb->f_mtx, K_FOREVER);
   41d4a:	f100 060c 	add.w	r6, r0, #12
	return z_impl_k_mutex_lock(mutex, timeout);
   41d4e:	f04f 31ff 	mov.w	r1, #4294967295
   41d52:	4630      	mov	r0, r6
   41d54:	f7f9 fee8 	bl	3bb28 <z_impl_k_mutex_lock>
	if (rc) {
   41d58:	bb48      	cbnz	r0, 41dae <fcb_rotate+0x68>
		return -EINVAL;
	}

	rc = fcb_erase_sector(fcb, fcb->f_oldest);
   41d5a:	6a21      	ldr	r1, [r4, #32]
   41d5c:	4620      	mov	r0, r4
   41d5e:	f7ff fdf8 	bl	41952 <fcb_erase_sector>
	if (rc) {
   41d62:	bb08      	cbnz	r0, 41da8 <fcb_rotate+0x62>
		rc = -EIO;
		goto out;
	}
	if (fcb->f_oldest == fcb->f_active.fe_sector) {
   41d64:	e9d4 1308 	ldrd	r1, r3, [r4, #32]
   41d68:	4299      	cmp	r1, r3
   41d6a:	d112      	bne.n	41d92 <fcb_rotate+0x4c>
		/*
		 * Need to create a new active area, as we're wiping
		 * the current.
		 */
		sector = fcb_getnext_sector(fcb, fcb->f_oldest);
   41d6c:	4620      	mov	r0, r4
   41d6e:	f7ff ff88 	bl	41c82 <fcb_getnext_sector>
		rc = fcb_sector_hdr_init(fcb, sector, fcb->f_active_id + 1);
   41d72:	8ea2      	ldrh	r2, [r4, #52]	; 0x34
   41d74:	4601      	mov	r1, r0
   41d76:	3201      	adds	r2, #1
		sector = fcb_getnext_sector(fcb, fcb->f_oldest);
   41d78:	4607      	mov	r7, r0
		rc = fcb_sector_hdr_init(fcb, sector, fcb->f_active_id + 1);
   41d7a:	b292      	uxth	r2, r2
   41d7c:	4620      	mov	r0, r4
   41d7e:	f7ff fe2d 	bl	419dc <fcb_sector_hdr_init>
		if (rc) {
   41d82:	4605      	mov	r5, r0
   41d84:	b958      	cbnz	r0, 41d9e <fcb_rotate+0x58>
			goto out;
		}
		fcb->f_active.fe_sector = sector;
		fcb->f_active.fe_elem_off = sizeof(struct fcb_disk_area);
   41d86:	2308      	movs	r3, #8
   41d88:	62a3      	str	r3, [r4, #40]	; 0x28
		fcb->f_active_id++;
   41d8a:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
		fcb->f_active.fe_sector = sector;
   41d8c:	6267      	str	r7, [r4, #36]	; 0x24
		fcb->f_active_id++;
   41d8e:	3301      	adds	r3, #1
   41d90:	86a3      	strh	r3, [r4, #52]	; 0x34
	}
	fcb->f_oldest = fcb_getnext_sector(fcb, fcb->f_oldest);
   41d92:	6a21      	ldr	r1, [r4, #32]
   41d94:	4620      	mov	r0, r4
   41d96:	f7ff ff74 	bl	41c82 <fcb_getnext_sector>
   41d9a:	2500      	movs	r5, #0
   41d9c:	6220      	str	r0, [r4, #32]
	return z_impl_k_mutex_unlock(mutex);
   41d9e:	4630      	mov	r0, r6
   41da0:	f7f9 ffa0 	bl	3bce4 <z_impl_k_mutex_unlock>
out:
	k_mutex_unlock(&fcb->f_mtx);
	return rc;
}
   41da4:	4628      	mov	r0, r5
   41da6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		rc = -EIO;
   41da8:	f06f 0504 	mvn.w	r5, #4
   41dac:	e7f7      	b.n	41d9e <fcb_rotate+0x58>
		return -EINVAL;
   41dae:	f06f 0515 	mvn.w	r5, #21
   41db2:	e7f7      	b.n	41da4 <fcb_rotate+0x5e>

00041db4 <boot_flag_read.constprop.6>:
static int boot_flag_read(int flag, u8_t bank_id)
   41db4:	b507      	push	{r0, r1, r2, lr}
	rc = flash_area_open(bank_id, &fa);
   41db6:	2002      	movs	r0, #2
   41db8:	a901      	add	r1, sp, #4
   41dba:	f7e3 f9d7 	bl	2516c <flash_area_open>
	if (rc) {
   41dbe:	b950      	cbnz	r0, 41dd6 <boot_flag_read.constprop.6+0x22>
	rc = boot_flag_offs(flag, fa, &offs);
   41dc0:	9801      	ldr	r0, [sp, #4]
	rc = flash_area_read(fa, offs, &flag_val, sizeof(flag_val));
   41dc2:	2301      	movs	r3, #1
		*offs = IMAGE_OK_OFFS(fa);
   41dc4:	6881      	ldr	r1, [r0, #8]
	rc = flash_area_read(fa, offs, &flag_val, sizeof(flag_val));
   41dc6:	f10d 0203 	add.w	r2, sp, #3
   41dca:	3918      	subs	r1, #24
   41dcc:	f000 fd7b 	bl	428c6 <flash_area_read>
	if (rc != 0) {
   41dd0:	b908      	cbnz	r0, 41dd6 <boot_flag_read.constprop.6+0x22>
	return flag_val;
   41dd2:	f89d 0003 	ldrb.w	r0, [sp, #3]
}
   41dd6:	b003      	add	sp, #12
   41dd8:	f85d fb04 	ldr.w	pc, [sp], #4

00041ddc <boot_flag_write.constprop.7>:
static int boot_flag_write(int flag, u8_t bank_id)
   41ddc:	b513      	push	{r0, r1, r4, lr}
	rc = flash_area_open(bank_id, &fa);
   41dde:	a901      	add	r1, sp, #4
   41de0:	f7e3 f9c4 	bl	2516c <flash_area_open>
	if (rc) {
   41de4:	4604      	mov	r4, r0
   41de6:	b948      	cbnz	r0, 41dfc <boot_flag_write.constprop.7+0x20>
	rc = boot_flag_offs(flag, fa, &offs);
   41de8:	9801      	ldr	r0, [sp, #4]
	rc = boot_write_trailer_byte(fa, offs, BOOT_FLAG_SET);
   41dea:	2201      	movs	r2, #1
		*offs = IMAGE_OK_OFFS(fa);
   41dec:	6881      	ldr	r1, [r0, #8]
	rc = boot_write_trailer_byte(fa, offs, BOOT_FLAG_SET);
   41dee:	3918      	subs	r1, #24
   41df0:	f7e2 ff3e 	bl	24c70 <boot_write_trailer_byte>
   41df4:	4604      	mov	r4, r0
	flash_area_close(fa);
   41df6:	9801      	ldr	r0, [sp, #4]
   41df8:	f000 fd64 	bl	428c4 <flash_area_close>
}
   41dfc:	4620      	mov	r0, r4
   41dfe:	b002      	add	sp, #8
   41e00:	bd10      	pop	{r4, pc}

00041e02 <boot_is_img_confirmed>:

bool boot_is_img_confirmed(void)
{
   41e02:	b508      	push	{r3, lr}
	return boot_flag_read(BOOT_FLAG_IMAGE_OK, bank_id);
   41e04:	f7ff ffd6 	bl	41db4 <boot_flag_read.constprop.6>
	return boot_image_ok_read(FLASH_AREA_IMAGE_PRIMARY) == BOOT_FLAG_SET;
}
   41e08:	1e43      	subs	r3, r0, #1
   41e0a:	4258      	negs	r0, r3
   41e0c:	4158      	adcs	r0, r3
   41e0e:	bd08      	pop	{r3, pc}

00041e10 <boot_write_img_confirmed>:

int boot_write_img_confirmed(void)
{
   41e10:	b513      	push	{r0, r1, r4, lr}
	return boot_flag_read(BOOT_FLAG_IMAGE_OK, bank_id);
   41e12:	f7ff ffcf 	bl	41db4 <boot_flag_read.constprop.6>
	rc = flash_area_open(bank_id, &fa);
   41e16:	a901      	add	r1, sp, #4
	return boot_flag_read(BOOT_FLAG_IMAGE_OK, bank_id);
   41e18:	4604      	mov	r4, r0
	rc = flash_area_open(bank_id, &fa);
   41e1a:	2002      	movs	r0, #2
   41e1c:	f7e3 f9a6 	bl	2516c <flash_area_open>
	if (rc) {
   41e20:	2800      	cmp	r0, #0
		return -EINVAL;
   41e22:	bf0c      	ite	eq
   41e24:	23ff      	moveq	r3, #255	; 0xff
   41e26:	f06f 0315 	mvnne.w	r3, #21
	int rc;

	if (boot_image_ok_read(FLASH_AREA_IMAGE_PRIMARY) !=
   41e2a:	42a3      	cmp	r3, r4
   41e2c:	d104      	bne.n	41e38 <boot_write_img_confirmed+0x28>
	return boot_flag_write(BOOT_FLAG_IMAGE_OK, bank_id);
   41e2e:	2002      	movs	r0, #2
   41e30:	f7ff ffd4 	bl	41ddc <boot_flag_write.constprop.7>
	}

	rc = boot_image_ok_write(FLASH_AREA_IMAGE_PRIMARY);

	return rc;
}
   41e34:	b002      	add	sp, #8
   41e36:	bd10      	pop	{r4, pc}
		return 0;
   41e38:	2000      	movs	r0, #0
   41e3a:	e7fb      	b.n	41e34 <boot_write_img_confirmed+0x24>

00041e3c <boot_erase_img_bank>:

int boot_erase_img_bank(u8_t area_id)
{
   41e3c:	b513      	push	{r0, r1, r4, lr}
	const struct flash_area *fa;
	int rc;

	rc = flash_area_open(area_id, &fa);
   41e3e:	a901      	add	r1, sp, #4
   41e40:	f7e3 f994 	bl	2516c <flash_area_open>
	if (rc) {
   41e44:	4604      	mov	r4, r0
   41e46:	b940      	cbnz	r0, 41e5a <boot_erase_img_bank+0x1e>
		return rc;
	}

	rc = flash_area_erase(fa, 0, fa->fa_size);
   41e48:	9801      	ldr	r0, [sp, #4]
   41e4a:	4621      	mov	r1, r4
   41e4c:	6882      	ldr	r2, [r0, #8]
   41e4e:	f000 fd80 	bl	42952 <flash_area_erase>
   41e52:	4604      	mov	r4, r0

	flash_area_close(fa);
   41e54:	9801      	ldr	r0, [sp, #4]
   41e56:	f000 fd35 	bl	428c4 <flash_area_close>

	return rc;
}
   41e5a:	4620      	mov	r0, r4
   41e5c:	b002      	add	sp, #8
   41e5e:	bd10      	pop	{r4, pc}

00041e60 <flash_img_buffered_write>:

int flash_img_buffered_write(struct flash_img_context *ctx, u8_t *data,
			     size_t len, bool flush)
{
   41e60:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   41e64:	4604      	mov	r4, r0
   41e66:	4689      	mov	r9, r1
   41e68:	4616      	mov	r6, r2
   41e6a:	4698      	mov	r8, r3
	int processed = 0;
   41e6c:	2700      	movs	r7, #0
	while ((len - processed) >=
	       (buf_empty_bytes = CONFIG_IMG_BLOCK_BUF_SIZE - ctx->buf_bytes)) {
		memcpy(ctx->buf + ctx->buf_bytes, data + processed,
		       buf_empty_bytes);

		ctx->buf_bytes = CONFIG_IMG_BLOCK_BUF_SIZE;
   41e6e:	f44f 7a00 	mov.w	sl, #512	; 0x200
	       (buf_empty_bytes = CONFIG_IMG_BLOCK_BUF_SIZE - ctx->buf_bytes)) {
   41e72:	f8b4 0208 	ldrh.w	r0, [r4, #520]	; 0x208
	while ((len - processed) >=
   41e76:	1bf2      	subs	r2, r6, r7
	       (buf_empty_bytes = CONFIG_IMG_BLOCK_BUF_SIZE - ctx->buf_bytes)) {
   41e78:	f5c0 7b00 	rsb	fp, r0, #512	; 0x200
	while ((len - processed) >=
   41e7c:	455a      	cmp	r2, fp
   41e7e:	d222      	bcs.n	41ec6 <flash_img_buffered_write+0x66>

		processed += buf_empty_bytes;
	}

	/* place rest of the data into ctx->buf */
	if (processed < len) {
   41e80:	42b7      	cmp	r7, r6
   41e82:	d20a      	bcs.n	41e9a <flash_img_buffered_write+0x3a>
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   41e84:	eb09 0107 	add.w	r1, r9, r7
   41e88:	4420      	add	r0, r4
   41e8a:	f002 ffe1 	bl	44e50 <memcpy>
		memcpy(ctx->buf + ctx->buf_bytes,
		       data + processed, len - processed);
		ctx->buf_bytes += len - processed;
   41e8e:	f8b4 3208 	ldrh.w	r3, [r4, #520]	; 0x208
   41e92:	441e      	add	r6, r3
   41e94:	1bf6      	subs	r6, r6, r7
   41e96:	f8a4 6208 	strh.w	r6, [r4, #520]	; 0x208
	}

	if (!flush) {
   41e9a:	f1b8 0f00 	cmp.w	r8, #0
   41e9e:	d02a      	beq.n	41ef6 <flash_img_buffered_write+0x96>
		return rc;
	}

	if (ctx->buf_bytes > 0) {
   41ea0:	f8b4 3208 	ldrh.w	r3, [r4, #520]	; 0x208
   41ea4:	b9f3      	cbnz	r3, 41ee4 <flash_img_buffered_write+0x84>
		}
	}
#ifdef CONFIG_IMG_ERASE_PROGRESSIVELY
	/* erase the image trailer area if it was not erased */
	rc = flash_progressive_erase(ctx,
				BOOT_TRAILER_IMG_STATUS_OFFS(ctx->flash_area));
   41ea6:	f8d4 3200 	ldr.w	r3, [r4, #512]	; 0x200
	rc = flash_progressive_erase(ctx,
   41eaa:	4620      	mov	r0, r4
				BOOT_TRAILER_IMG_STATUS_OFFS(ctx->flash_area));
   41eac:	6899      	ldr	r1, [r3, #8]
	rc = flash_progressive_erase(ctx,
   41eae:	3920      	subs	r1, #32
   41eb0:	f7e2 ff38 	bl	24d24 <flash_progressive_erase>
	if (rc) {
   41eb4:	4605      	mov	r5, r0
   41eb6:	b9d8      	cbnz	r0, 41ef0 <flash_img_buffered_write+0x90>
		return rc;
	}
#endif

	flash_area_close(ctx->flash_area);
   41eb8:	f8d4 0200 	ldr.w	r0, [r4, #512]	; 0x200
   41ebc:	f000 fd02 	bl	428c4 <flash_area_close>
	ctx->flash_area = NULL;
   41ec0:	f8c4 5200 	str.w	r5, [r4, #512]	; 0x200

	return rc;
   41ec4:	e014      	b.n	41ef0 <flash_img_buffered_write+0x90>
   41ec6:	465a      	mov	r2, fp
   41ec8:	eb09 0107 	add.w	r1, r9, r7
   41ecc:	4420      	add	r0, r4
   41ece:	f002 ffbf 	bl	44e50 <memcpy>
		ctx->buf_bytes = CONFIG_IMG_BLOCK_BUF_SIZE;
   41ed2:	f8a4 a208 	strh.w	sl, [r4, #520]	; 0x208
		rc = flash_sync(ctx);
   41ed6:	4620      	mov	r0, r4
   41ed8:	f7e2 ff96 	bl	24e08 <flash_sync>
		if (rc) {
   41edc:	4605      	mov	r5, r0
   41ede:	b938      	cbnz	r0, 41ef0 <flash_img_buffered_write+0x90>
		processed += buf_empty_bytes;
   41ee0:	445f      	add	r7, fp
   41ee2:	e7c6      	b.n	41e72 <flash_img_buffered_write+0x12>
		rc = flash_sync(ctx);
   41ee4:	4620      	mov	r0, r4
   41ee6:	f7e2 ff8f 	bl	24e08 <flash_sync>
		if (rc) {
   41eea:	4605      	mov	r5, r0
   41eec:	2800      	cmp	r0, #0
   41eee:	d0da      	beq.n	41ea6 <flash_img_buffered_write+0x46>
}
   41ef0:	4628      	mov	r0, r5
   41ef2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   41ef6:	4645      	mov	r5, r8
   41ef8:	e7fa      	b.n	41ef0 <flash_img_buffered_write+0x90>

00041efa <flash_img_init>:
	return ctx->bytes_written;
}

int flash_img_init(struct flash_img_context *ctx)
{
	ctx->bytes_written = 0;
   41efa:	2300      	movs	r3, #0
   41efc:	f8c0 3204 	str.w	r3, [r0, #516]	; 0x204
	ctx->buf_bytes = 0U;
   41f00:	f8a0 3208 	strh.w	r3, [r0, #520]	; 0x208
#ifdef CONFIG_IMG_ERASE_PROGRESSIVELY
	ctx->off_last = -1;
   41f04:	f04f 33ff 	mov.w	r3, #4294967295
#endif
	return flash_area_open(FLASH_AREA_IMAGE_SECONDARY,
   41f08:	f500 7100 	add.w	r1, r0, #512	; 0x200
	ctx->off_last = -1;
   41f0c:	f8c0 320c 	str.w	r3, [r0, #524]	; 0x20c
	return flash_area_open(FLASH_AREA_IMAGE_SECONDARY,
   41f10:	2006      	movs	r0, #6
   41f12:	f7e3 b92b 	b.w	2516c <flash_area_open>

00041f16 <append_u8>:
{
   41f16:	b510      	push	{r4, lr}
	if (!cpkt) {
   41f18:	b158      	cbz	r0, 41f32 <append_u8+0x1c>
	if (cpkt->max_len - cpkt->offset < 1) {
   41f1a:	8883      	ldrh	r3, [r0, #4]
   41f1c:	88c2      	ldrh	r2, [r0, #6]
   41f1e:	1ad2      	subs	r2, r2, r3
   41f20:	2a00      	cmp	r2, #0
	cpkt->data[cpkt->offset++] = data;
   41f22:	bfc3      	ittte	gt
   41f24:	1c5c      	addgt	r4, r3, #1
   41f26:	6802      	ldrgt	r2, [r0, #0]
   41f28:	8084      	strhgt	r4, [r0, #4]
		return false;
   41f2a:	2000      	movle	r0, #0
	return true;
   41f2c:	bfc4      	itt	gt
   41f2e:	2001      	movgt	r0, #1
	cpkt->data[cpkt->offset++] = data;
   41f30:	54d1      	strbgt	r1, [r2, r3]
}
   41f32:	bd10      	pop	{r4, pc}

00041f34 <append_be16>:
{
   41f34:	b510      	push	{r4, lr}
	if (!cpkt) {
   41f36:	b178      	cbz	r0, 41f58 <append_be16+0x24>
	if (cpkt->max_len - cpkt->offset < 2) {
   41f38:	8883      	ldrh	r3, [r0, #4]
   41f3a:	88c2      	ldrh	r2, [r0, #6]
   41f3c:	1ad2      	subs	r2, r2, r3
   41f3e:	2a01      	cmp	r2, #1
   41f40:	dd0b      	ble.n	41f5a <append_be16+0x26>
	cpkt->data[cpkt->offset++] = data >> 8;
   41f42:	6802      	ldr	r2, [r0, #0]
   41f44:	1c5c      	adds	r4, r3, #1
   41f46:	8084      	strh	r4, [r0, #4]
   41f48:	0a0c      	lsrs	r4, r1, #8
   41f4a:	54d4      	strb	r4, [r2, r3]
	cpkt->data[cpkt->offset++] = (u8_t) data;
   41f4c:	8883      	ldrh	r3, [r0, #4]
   41f4e:	6802      	ldr	r2, [r0, #0]
   41f50:	1c5c      	adds	r4, r3, #1
   41f52:	8084      	strh	r4, [r0, #4]
	return true;
   41f54:	2001      	movs	r0, #1
	cpkt->data[cpkt->offset++] = (u8_t) data;
   41f56:	54d1      	strb	r1, [r2, r3]
}
   41f58:	bd10      	pop	{r4, pc}
		return false;
   41f5a:	2000      	movs	r0, #0
   41f5c:	e7fc      	b.n	41f58 <append_be16+0x24>

00041f5e <decode_delta>:
{
   41f5e:	b570      	push	{r4, r5, r6, lr}
   41f60:	f8bd 4010 	ldrh.w	r4, [sp, #16]
   41f64:	9d06      	ldr	r5, [sp, #24]
	if (opt == COAP_OPTION_EXT_13) {
   41f66:	2c0d      	cmp	r4, #13
   41f68:	d111      	bne.n	41f8e <decode_delta+0x30>
		*hdr_len = 1U;
   41f6a:	2401      	movs	r4, #1
   41f6c:	802c      	strh	r4, [r5, #0]
	if (max_len - offset < 1) {
   41f6e:	1a5c      	subs	r4, r3, r1
   41f70:	2c00      	cmp	r4, #0
   41f72:	dc02      	bgt.n	41f7a <decode_delta+0x1c>
			return -EINVAL;
   41f74:	f06f 0015 	mvn.w	r0, #21
}
   41f78:	bd70      	pop	{r4, r5, r6, pc}
	*value = data[offset++];
   41f7a:	1c4d      	adds	r5, r1, #1
   41f7c:	b2ad      	uxth	r5, r5
   41f7e:	5c44      	ldrb	r4, [r0, r1]
		if (ret < 0) {
   41f80:	1b58      	subs	r0, r3, r5
	*pos = offset;
   41f82:	8015      	strh	r5, [r2, #0]
		if (ret < 0) {
   41f84:	d4f6      	bmi.n	41f74 <decode_delta+0x16>
		opt = val + COAP_OPTION_EXT_13;
   41f86:	340d      	adds	r4, #13
	*opt_ext = opt;
   41f88:	9b05      	ldr	r3, [sp, #20]
   41f8a:	801c      	strh	r4, [r3, #0]
	return ret;
   41f8c:	e7f4      	b.n	41f78 <decode_delta+0x1a>
	} else if (opt == COAP_OPTION_EXT_14) {
   41f8e:	2c0e      	cmp	r4, #14
   41f90:	d113      	bne.n	41fba <decode_delta+0x5c>
		*hdr_len = 2U;
   41f92:	2402      	movs	r4, #2
   41f94:	802c      	strh	r4, [r5, #0]
	if (max_len - offset < 2) {
   41f96:	1a5c      	subs	r4, r3, r1
   41f98:	2c01      	cmp	r4, #1
   41f9a:	ddeb      	ble.n	41f74 <decode_delta+0x16>
	*value = data[offset++] << 8;
   41f9c:	5c46      	ldrb	r6, [r0, r1]
	*value |= data[offset++];
   41f9e:	1c8d      	adds	r5, r1, #2
	*value = data[offset++] << 8;
   41fa0:	3101      	adds	r1, #1
	*value |= data[offset++];
   41fa2:	b289      	uxth	r1, r1
   41fa4:	5c44      	ldrb	r4, [r0, r1]
   41fa6:	b2ad      	uxth	r5, r5
		if (ret < 0) {
   41fa8:	1b58      	subs	r0, r3, r5
	*value |= data[offset++];
   41faa:	ea44 2406 	orr.w	r4, r4, r6, lsl #8
	*pos = offset;
   41fae:	8015      	strh	r5, [r2, #0]
		if (ret < 0) {
   41fb0:	d4e0      	bmi.n	41f74 <decode_delta+0x16>
		opt = val + COAP_OPTION_EXT_269;
   41fb2:	f204 140d 	addw	r4, r4, #269	; 0x10d
   41fb6:	b2a4      	uxth	r4, r4
   41fb8:	e7e6      	b.n	41f88 <decode_delta+0x2a>
	} else if (opt == COAP_OPTION_EXT_15) {
   41fba:	2c0f      	cmp	r4, #15
   41fbc:	d0da      	beq.n	41f74 <decode_delta+0x16>
	int ret = 0;
   41fbe:	2000      	movs	r0, #0
   41fc0:	e7e2      	b.n	41f88 <decode_delta+0x2a>

00041fc2 <update_descriptive_block>:
{
   41fc2:	b530      	push	{r4, r5, lr}
	size_t new_current = GET_NUM(block) << (GET_BLOCK_SIZE(block) + 4);
   41fc4:	f001 0407 	and.w	r4, r1, #7
   41fc8:	110b      	asrs	r3, r1, #4
   41fca:	1d25      	adds	r5, r4, #4
	if (block == -ENOENT) {
   41fcc:	3102      	adds	r1, #2
	size_t new_current = GET_NUM(block) << (GET_BLOCK_SIZE(block) + 4);
   41fce:	fa03 f305 	lsl.w	r3, r3, r5
	if (block == -ENOENT) {
   41fd2:	d015      	beq.n	42000 <update_descriptive_block+0x3e>
	if (size && ctx->total_size && ctx->total_size != size) {
   41fd4:	b11a      	cbz	r2, 41fde <update_descriptive_block+0x1c>
   41fd6:	6801      	ldr	r1, [r0, #0]
   41fd8:	b109      	cbz	r1, 41fde <update_descriptive_block+0x1c>
   41fda:	4291      	cmp	r1, r2
   41fdc:	d112      	bne.n	42004 <update_descriptive_block+0x42>
	if (ctx->current > 0 && GET_BLOCK_SIZE(block) > ctx->block_size) {
   41fde:	6841      	ldr	r1, [r0, #4]
   41fe0:	b111      	cbz	r1, 41fe8 <update_descriptive_block+0x26>
   41fe2:	7a01      	ldrb	r1, [r0, #8]
   41fe4:	428c      	cmp	r4, r1
   41fe6:	dc0d      	bgt.n	42004 <update_descriptive_block+0x42>
	if (ctx->total_size && new_current > ctx->total_size) {
   41fe8:	6801      	ldr	r1, [r0, #0]
   41fea:	b109      	cbz	r1, 41ff0 <update_descriptive_block+0x2e>
   41fec:	4299      	cmp	r1, r3
   41fee:	d309      	bcc.n	42004 <update_descriptive_block+0x42>
	if (size) {
   41ff0:	b102      	cbz	r2, 41ff4 <update_descriptive_block+0x32>
		ctx->total_size = size;
   41ff2:	6002      	str	r2, [r0, #0]
	ctx->current = new_current;
   41ff4:	6043      	str	r3, [r0, #4]
	ctx->block_size = MIN(GET_BLOCK_SIZE(block), ctx->block_size);
   41ff6:	7a03      	ldrb	r3, [r0, #8]
   41ff8:	42a3      	cmp	r3, r4
   41ffa:	bfa8      	it	ge
   41ffc:	4623      	movge	r3, r4
   41ffe:	7203      	strb	r3, [r0, #8]
		return 0;
   42000:	2000      	movs	r0, #0
}
   42002:	bd30      	pop	{r4, r5, pc}
		return -EINVAL;
   42004:	f06f 0015 	mvn.w	r0, #21
   42008:	e7fb      	b.n	42002 <update_descriptive_block+0x40>

0004200a <append.part.8>:
static inline bool append(struct coap_packet *cpkt, const u8_t *data, u16_t len)
   4200a:	b538      	push	{r3, r4, r5, lr}
   4200c:	4604      	mov	r4, r0
	if (cpkt->max_len - cpkt->offset < len) {
   4200e:	8880      	ldrh	r0, [r0, #4]
   42010:	88e3      	ldrh	r3, [r4, #6]
static inline bool append(struct coap_packet *cpkt, const u8_t *data, u16_t len)
   42012:	4615      	mov	r5, r2
	if (cpkt->max_len - cpkt->offset < len) {
   42014:	1a1b      	subs	r3, r3, r0
   42016:	4293      	cmp	r3, r2
   42018:	db08      	blt.n	4202c <append.part.8+0x22>
	memcpy(cpkt->data + cpkt->offset, data, len);
   4201a:	6823      	ldr	r3, [r4, #0]
   4201c:	4418      	add	r0, r3
   4201e:	f002 ff17 	bl	44e50 <memcpy>
	return true;
   42022:	2001      	movs	r0, #1
	cpkt->offset += len;
   42024:	88a3      	ldrh	r3, [r4, #4]
   42026:	441d      	add	r5, r3
   42028:	80a5      	strh	r5, [r4, #4]
}
   4202a:	bd38      	pop	{r3, r4, r5, pc}
		return false;
   4202c:	2000      	movs	r0, #0
   4202e:	e7fc      	b.n	4202a <append.part.8+0x20>

00042030 <parse_option>:
{
   42030:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	if (max_len - offset < 1) {
   42034:	1a5f      	subs	r7, r3, r1
{
   42036:	b086      	sub	sp, #24
	if (max_len - offset < 1) {
   42038:	2f00      	cmp	r7, #0
{
   4203a:	4681      	mov	r9, r0
   4203c:	e9dd a40e 	ldrd	sl, r4, [sp, #56]	; 0x38
   42040:	4616      	mov	r6, r2
   42042:	461d      	mov	r5, r3
   42044:	f8dd 8040 	ldr.w	r8, [sp, #64]	; 0x40
	if (max_len - offset < 1) {
   42048:	dd13      	ble.n	42072 <parse_option+0x42>
	*value = data[offset++];
   4204a:	f101 0c01 	add.w	ip, r1, #1
   4204e:	fa1f fc8c 	uxth.w	ip, ip
   42052:	5c47      	ldrb	r7, [r0, r1]
	if (r < 0) {
   42054:	ebb3 010c 	subs.w	r1, r3, ip
	*pos = offset;
   42058:	f8a2 c000 	strh.w	ip, [r2]
	if (r < 0) {
   4205c:	d40b      	bmi.n	42076 <parse_option+0x46>
	*opt_len += 1U;
   4205e:	f8b4 c000 	ldrh.w	ip, [r4]
	if (opt == COAP_MARKER) {
   42062:	2fff      	cmp	r7, #255	; 0xff
	*opt_len += 1U;
   42064:	f10c 0c01 	add.w	ip, ip, #1
   42068:	f8a4 c000 	strh.w	ip, [r4]
	if (opt == COAP_MARKER) {
   4206c:	d107      	bne.n	4207e <parse_option+0x4e>
		return r > 0 ? 0 : -EINVAL;
   4206e:	2900      	cmp	r1, #0
   42070:	d13a      	bne.n	420e8 <parse_option+0xb8>
   42072:	f06f 0115 	mvn.w	r1, #21
}
   42076:	4608      	mov	r0, r1
   42078:	b006      	add	sp, #24
   4207a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	return (opt & 0xF0) >> 4;
   4207e:	ea4f 1c17 	mov.w	ip, r7, lsr #4
	delta = option_header_get_delta(opt);
   42082:	fa1f fe8c 	uxth.w	lr, ip
	len = option_header_get_len(opt);
   42086:	f007 070f 	and.w	r7, r7, #15
	delta = option_header_get_delta(opt);
   4208a:	f8ad e014 	strh.w	lr, [sp, #20]
	len = option_header_get_len(opt);
   4208e:	f8ad 7016 	strh.w	r7, [sp, #22]
	if (r == 0 && delta > COAP_OPTION_NO_EXT) {
   42092:	bb59      	cbnz	r1, 420ec <parse_option+0xbc>
   42094:	f1bc 0f0c 	cmp.w	ip, #12
   42098:	d8eb      	bhi.n	42072 <parse_option+0x42>
	if (len > COAP_OPTION_NO_EXT) {
   4209a:	f8bd 3016 	ldrh.w	r3, [sp, #22]
   4209e:	2b0c      	cmp	r3, #12
   420a0:	d913      	bls.n	420ca <parse_option+0x9a>
		r = decode_delta(data, *pos, pos, max_len,
   420a2:	f10d 0212 	add.w	r2, sp, #18
   420a6:	9202      	str	r2, [sp, #8]
   420a8:	f10d 0216 	add.w	r2, sp, #22
   420ac:	e9cd 3200 	strd	r3, r2, [sp]
   420b0:	8831      	ldrh	r1, [r6, #0]
   420b2:	462b      	mov	r3, r5
   420b4:	4632      	mov	r2, r6
   420b6:	4648      	mov	r0, r9
   420b8:	f7ff ff51 	bl	41f5e <decode_delta>
		if (r < 0) {
   420bc:	1e01      	subs	r1, r0, #0
   420be:	dbd8      	blt.n	42072 <parse_option+0x42>
		*opt_len += hdr_len;
   420c0:	8823      	ldrh	r3, [r4, #0]
   420c2:	f8bd 2012 	ldrh.w	r2, [sp, #18]
   420c6:	4413      	add	r3, r2
   420c8:	8023      	strh	r3, [r4, #0]
	*opt_delta += delta;
   420ca:	f8ba 3000 	ldrh.w	r3, [sl]
   420ce:	f8bd 2014 	ldrh.w	r2, [sp, #20]
	*opt_len += len;
   420d2:	f8bd 7016 	ldrh.w	r7, [sp, #22]
	*opt_delta += delta;
   420d6:	4413      	add	r3, r2
   420d8:	f8aa 3000 	strh.w	r3, [sl]
	*opt_len += len;
   420dc:	8823      	ldrh	r3, [r4, #0]
   420de:	443b      	add	r3, r7
   420e0:	8023      	strh	r3, [r4, #0]
	if (r == 0) {
   420e2:	b9e1      	cbnz	r1, 4211e <parse_option+0xee>
		if (len == 0U) {
   420e4:	2f00      	cmp	r7, #0
   420e6:	d1c4      	bne.n	42072 <parse_option+0x42>
			return r;
   420e8:	2100      	movs	r1, #0
   420ea:	e7c4      	b.n	42076 <parse_option+0x46>
	if (delta > COAP_OPTION_NO_EXT) {
   420ec:	f1bc 0f0c 	cmp.w	ip, #12
   420f0:	d9d3      	bls.n	4209a <parse_option+0x6a>
		r = decode_delta(data, *pos, pos, max_len,
   420f2:	f10d 0112 	add.w	r1, sp, #18
   420f6:	9102      	str	r1, [sp, #8]
   420f8:	a905      	add	r1, sp, #20
   420fa:	e9cd e100 	strd	lr, r1, [sp]
   420fe:	8811      	ldrh	r1, [r2, #0]
   42100:	f7ff ff2d 	bl	41f5e <decode_delta>
		if ((r < 0) || (r == 0 && len > COAP_OPTION_NO_EXT)) {
   42104:	1e01      	subs	r1, r0, #0
   42106:	dbb4      	blt.n	42072 <parse_option+0x42>
   42108:	d103      	bne.n	42112 <parse_option+0xe2>
   4210a:	f8bd 3016 	ldrh.w	r3, [sp, #22]
   4210e:	2b0c      	cmp	r3, #12
   42110:	d8af      	bhi.n	42072 <parse_option+0x42>
		*opt_len += hdr_len;
   42112:	8823      	ldrh	r3, [r4, #0]
   42114:	f8bd 2012 	ldrh.w	r2, [sp, #18]
   42118:	4413      	add	r3, r2
   4211a:	8023      	strh	r3, [r4, #0]
   4211c:	e7bd      	b.n	4209a <parse_option+0x6a>
	if (option) {
   4211e:	f1b8 0f00 	cmp.w	r8, #0
   42122:	d018      	beq.n	42156 <parse_option+0x126>
		if (len > sizeof(option->value)) {
   42124:	2f0c      	cmp	r7, #12
   42126:	d8a4      	bhi.n	42072 <parse_option+0x42>
		option->delta = *opt_delta;
   42128:	f8ba 3000 	ldrh.w	r3, [sl]
		option->len = len;
   4212c:	f888 7002 	strb.w	r7, [r8, #2]
		option->delta = *opt_delta;
   42130:	f8a8 3000 	strh.w	r3, [r8]
		r = read(data, *pos, pos, max_len, len, &option->value[0]);
   42134:	8834      	ldrh	r4, [r6, #0]
   42136:	f108 0003 	add.w	r0, r8, #3
	if (max_len - offset < len) {
   4213a:	1b2b      	subs	r3, r5, r4
   4213c:	42bb      	cmp	r3, r7
   4213e:	db98      	blt.n	42072 <parse_option+0x42>
   42140:	eb09 0104 	add.w	r1, r9, r4
   42144:	463a      	mov	r2, r7
   42146:	f002 fe83 	bl	44e50 <memcpy>
	offset += len;
   4214a:	1939      	adds	r1, r7, r4
   4214c:	b289      	uxth	r1, r1
	*pos = offset;
   4214e:	8031      	strh	r1, [r6, #0]
		if (r < 0) {
   42150:	1a69      	subs	r1, r5, r1
   42152:	d590      	bpl.n	42076 <parse_option+0x46>
   42154:	e78d      	b.n	42072 <parse_option+0x42>
		*pos += len;
   42156:	8831      	ldrh	r1, [r6, #0]
   42158:	4439      	add	r1, r7
   4215a:	b289      	uxth	r1, r1
   4215c:	8031      	strh	r1, [r6, #0]
		r = max_len - *pos;
   4215e:	1a69      	subs	r1, r5, r1
   42160:	e789      	b.n	42076 <parse_option+0x46>

00042162 <coap_packet_init>:
{
   42162:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   42164:	9f08      	ldr	r7, [sp, #32]
   42166:	f89d 601c 	ldrb.w	r6, [sp, #28]
	if (!cpkt || !data || !max_len) {
   4216a:	4604      	mov	r4, r0
   4216c:	b910      	cbnz	r0, 42174 <coap_packet_init+0x12>
		return -EINVAL;
   4216e:	f06f 0015 	mvn.w	r0, #21
}
   42172:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (!cpkt || !data || !max_len) {
   42174:	2900      	cmp	r1, #0
   42176:	d0fa      	beq.n	4216e <coap_packet_init+0xc>
   42178:	2a00      	cmp	r2, #0
   4217a:	d0f8      	beq.n	4216e <coap_packet_init+0xc>
__ssp_bos_icheck3(memset, void *, int)
   4217c:	2500      	movs	r5, #0
	cpkt->data = data;
   4217e:	6001      	str	r1, [r0, #0]
	hdr |= (type & 0x3) << 4;
   42180:	f89d 1018 	ldrb.w	r1, [sp, #24]
   42184:	60c5      	str	r5, [r0, #12]
   42186:	0109      	lsls	r1, r1, #4
   42188:	6085      	str	r5, [r0, #8]
	cpkt->offset = 0U;
   4218a:	8085      	strh	r5, [r0, #4]
	cpkt->delta = 0U;
   4218c:	8185      	strh	r5, [r0, #12]
	hdr |= (type & 0x3) << 4;
   4218e:	f001 0130 	and.w	r1, r1, #48	; 0x30
	hdr |= tokenlen & 0xF;
   42192:	b275      	sxtb	r5, r6
	hdr |= (type & 0x3) << 4;
   42194:	ea41 1183 	orr.w	r1, r1, r3, lsl #6
	hdr |= tokenlen & 0xF;
   42198:	f005 030f 	and.w	r3, r5, #15
   4219c:	4319      	orrs	r1, r3
	cpkt->max_len = max_len;
   4219e:	80c2      	strh	r2, [r0, #6]
	res = append_u8(cpkt, hdr);
   421a0:	b2c9      	uxtb	r1, r1
   421a2:	f7ff feb8 	bl	41f16 <append_u8>
	if (!res) {
   421a6:	2800      	cmp	r0, #0
   421a8:	d0e1      	beq.n	4216e <coap_packet_init+0xc>
	res = append_u8(cpkt, code);
   421aa:	f89d 1024 	ldrb.w	r1, [sp, #36]	; 0x24
   421ae:	4620      	mov	r0, r4
   421b0:	f7ff feb1 	bl	41f16 <append_u8>
	if (!res) {
   421b4:	2800      	cmp	r0, #0
   421b6:	d0da      	beq.n	4216e <coap_packet_init+0xc>
	res = append_be16(cpkt, id);
   421b8:	f8bd 1028 	ldrh.w	r1, [sp, #40]	; 0x28
   421bc:	4620      	mov	r0, r4
   421be:	f7ff feb9 	bl	41f34 <append_be16>
	if (!res) {
   421c2:	2800      	cmp	r0, #0
   421c4:	d0d3      	beq.n	4216e <coap_packet_init+0xc>
	if (token && tokenlen) {
   421c6:	b91f      	cbnz	r7, 421d0 <coap_packet_init+0x6e>
	cpkt->hdr_len = 1 + 1 + 2 + tokenlen;
   421c8:	3504      	adds	r5, #4
   421ca:	7225      	strb	r5, [r4, #8]
	return 0;
   421cc:	2000      	movs	r0, #0
   421ce:	e7d0      	b.n	42172 <coap_packet_init+0x10>
	if (token && tokenlen) {
   421d0:	2e00      	cmp	r6, #0
   421d2:	d0f9      	beq.n	421c8 <coap_packet_init+0x66>
	if (!cpkt || !data) {
   421d4:	4632      	mov	r2, r6
   421d6:	4639      	mov	r1, r7
   421d8:	4620      	mov	r0, r4
   421da:	f7ff ff16 	bl	4200a <append.part.8>
		if (!res) {
   421de:	2800      	cmp	r0, #0
   421e0:	d1f2      	bne.n	421c8 <coap_packet_init+0x66>
   421e2:	e7c4      	b.n	4216e <coap_packet_init+0xc>

000421e4 <coap_packet_append_option>:
{
   421e4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   421e8:	460f      	mov	r7, r1
   421ea:	4692      	mov	sl, r2
   421ec:	461c      	mov	r4, r3
	if (!cpkt) {
   421ee:	4606      	mov	r6, r0
   421f0:	b918      	cbnz	r0, 421fa <coap_packet_append_option+0x16>
		return -EINVAL;
   421f2:	f06f 0015 	mvn.w	r0, #21
}
   421f6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (len && !value) {
   421fa:	b10b      	cbz	r3, 42200 <coap_packet_append_option+0x1c>
   421fc:	2a00      	cmp	r2, #0
   421fe:	d0f8      	beq.n	421f2 <coap_packet_append_option+0xe>
	if (code < cpkt->delta) {
   42200:	89b3      	ldrh	r3, [r6, #12]
   42202:	42bb      	cmp	r3, r7
   42204:	d8f5      	bhi.n	421f2 <coap_packet_append_option+0xe>
	if (cpkt->opt_len) {
   42206:	8972      	ldrh	r2, [r6, #10]
   42208:	b11a      	cbz	r2, 42212 <coap_packet_append_option+0x2e>
		code = (code == cpkt->delta) ? 0 : code - cpkt->delta;
   4220a:	42bb      	cmp	r3, r7
   4220c:	d034      	beq.n	42278 <coap_packet_append_option+0x94>
   4220e:	1aff      	subs	r7, r7, r3
   42210:	b2bf      	uxth	r7, r7
	if (num < COAP_OPTION_EXT_13) {
   42212:	2f0c      	cmp	r7, #12
   42214:	d832      	bhi.n	4227c <coap_packet_append_option+0x98>
		*ext = 0U;
   42216:	f04f 0b00 	mov.w	fp, #0
		return 0;
   4221a:	46d9      	mov	r9, fp
		*opt = num;
   4221c:	b2fb      	uxtb	r3, r7
	if (num < COAP_OPTION_EXT_13) {
   4221e:	2c0c      	cmp	r4, #12
   42220:	d842      	bhi.n	422a8 <coap_packet_append_option+0xc4>
		*ext = 0U;
   42222:	2500      	movs	r5, #0
		return 0;
   42224:	46a8      	mov	r8, r5
		*opt = num;
   42226:	b2e1      	uxtb	r1, r4
	*opt |= (len & 0xF);
   42228:	ea41 1103 	orr.w	r1, r1, r3, lsl #4
	res = append_u8(cpkt, opt);
   4222c:	b2c9      	uxtb	r1, r1
   4222e:	4630      	mov	r0, r6
   42230:	f7ff fe71 	bl	41f16 <append_u8>
	if (!res) {
   42234:	2800      	cmp	r0, #0
   42236:	d0dc      	beq.n	421f2 <coap_packet_append_option+0xe>
	if (delta_size == 1U) {
   42238:	f1b9 0f01 	cmp.w	r9, #1
   4223c:	d146      	bne.n	422cc <coap_packet_append_option+0xe8>
		res = append_u8(cpkt, (u8_t)delta_ext);
   4223e:	fa5f f18b 	uxtb.w	r1, fp
   42242:	4630      	mov	r0, r6
   42244:	f7ff fe67 	bl	41f16 <append_u8>
		if (!res) {
   42248:	2800      	cmp	r0, #0
   4224a:	d0d2      	beq.n	421f2 <coap_packet_append_option+0xe>
	if (len_size == 1U) {
   4224c:	f1b8 0f01 	cmp.w	r8, #1
   42250:	d105      	bne.n	4225e <coap_packet_append_option+0x7a>
		res = append_u8(cpkt, (u8_t)len_ext);
   42252:	b2e9      	uxtb	r1, r5
   42254:	4630      	mov	r0, r6
   42256:	f7ff fe5e 	bl	41f16 <append_u8>
		if (!res) {
   4225a:	2800      	cmp	r0, #0
   4225c:	d0c9      	beq.n	421f2 <coap_packet_append_option+0xe>
	if (len && value) {
   4225e:	2c00      	cmp	r4, #0
   42260:	d145      	bne.n	422ee <coap_packet_append_option+0x10a>
	return  (1 + delta_size + len_size + len);
   42262:	3401      	adds	r4, #1
	cpkt->opt_len += r;
   42264:	8973      	ldrh	r3, [r6, #10]
	return  (1 + delta_size + len_size + len);
   42266:	444c      	add	r4, r9
   42268:	4444      	add	r4, r8
	cpkt->opt_len += r;
   4226a:	441c      	add	r4, r3
	cpkt->delta += code;
   4226c:	89b3      	ldrh	r3, [r6, #12]
	cpkt->opt_len += r;
   4226e:	8174      	strh	r4, [r6, #10]
	cpkt->delta += code;
   42270:	441f      	add	r7, r3
   42272:	81b7      	strh	r7, [r6, #12]
	return 0;
   42274:	2000      	movs	r0, #0
   42276:	e7be      	b.n	421f6 <coap_packet_append_option+0x12>
		code = (code == cpkt->delta) ? 0 : code - cpkt->delta;
   42278:	2700      	movs	r7, #0
   4227a:	e7cc      	b.n	42216 <coap_packet_append_option+0x32>
	} else if (num < COAP_OPTION_EXT_269) {
   4227c:	f5b7 7f86 	cmp.w	r7, #268	; 0x10c
   42280:	fa0f fb87 	sxth.w	fp, r7
   42284:	d807      	bhi.n	42296 <coap_packet_append_option+0xb2>
		*ext = num - COAP_OPTION_EXT_13;
   42286:	f1ab 0b0d 	sub.w	fp, fp, #13
   4228a:	fa1f fb8b 	uxth.w	fp, fp
		*opt = COAP_OPTION_EXT_13;
   4228e:	230d      	movs	r3, #13
		return 1;
   42290:	f04f 0901 	mov.w	r9, #1
   42294:	e7c3      	b.n	4221e <coap_packet_append_option+0x3a>
	*ext = num - COAP_OPTION_EXT_269;
   42296:	f46f 7186 	mvn.w	r1, #268	; 0x10c
   4229a:	448b      	add	fp, r1
   4229c:	fa1f fb8b 	uxth.w	fp, fp
	*opt = COAP_OPTION_EXT_14;
   422a0:	230e      	movs	r3, #14
	return 2;
   422a2:	f04f 0902 	mov.w	r9, #2
   422a6:	e7ba      	b.n	4221e <coap_packet_append_option+0x3a>
	} else if (num < COAP_OPTION_EXT_269) {
   422a8:	f5b4 7f86 	cmp.w	r4, #268	; 0x10c
   422ac:	b225      	sxth	r5, r4
   422ae:	d805      	bhi.n	422bc <coap_packet_append_option+0xd8>
		*ext = num - COAP_OPTION_EXT_13;
   422b0:	3d0d      	subs	r5, #13
   422b2:	b2ad      	uxth	r5, r5
		*opt = COAP_OPTION_EXT_13;
   422b4:	210d      	movs	r1, #13
		return 1;
   422b6:	f04f 0801 	mov.w	r8, #1
   422ba:	e7b5      	b.n	42228 <coap_packet_append_option+0x44>
	*ext = num - COAP_OPTION_EXT_269;
   422bc:	f46f 7286 	mvn.w	r2, #268	; 0x10c
   422c0:	4415      	add	r5, r2
   422c2:	b2ad      	uxth	r5, r5
	*opt = COAP_OPTION_EXT_14;
   422c4:	210e      	movs	r1, #14
	return 2;
   422c6:	f04f 0802 	mov.w	r8, #2
   422ca:	e7ad      	b.n	42228 <coap_packet_append_option+0x44>
	} else if (delta_size == 2U) {
   422cc:	f1b9 0f02 	cmp.w	r9, #2
   422d0:	d1bc      	bne.n	4224c <coap_packet_append_option+0x68>
		res = append_be16(cpkt, delta_ext);
   422d2:	4659      	mov	r1, fp
   422d4:	4630      	mov	r0, r6
   422d6:	f7ff fe2d 	bl	41f34 <append_be16>
		if (!res) {
   422da:	2800      	cmp	r0, #0
   422dc:	d089      	beq.n	421f2 <coap_packet_append_option+0xe>
	if (len_size == 1U) {
   422de:	f1b8 0f01 	cmp.w	r8, #1
   422e2:	d0b6      	beq.n	42252 <coap_packet_append_option+0x6e>
		res = append_be16(cpkt, len_ext);
   422e4:	4629      	mov	r1, r5
   422e6:	4630      	mov	r0, r6
   422e8:	f7ff fe24 	bl	41f34 <append_be16>
   422ec:	e7b5      	b.n	4225a <coap_packet_append_option+0x76>
	if (len && value) {
   422ee:	f1ba 0f00 	cmp.w	sl, #0
   422f2:	d0b6      	beq.n	42262 <coap_packet_append_option+0x7e>
	if (!cpkt || !data) {
   422f4:	4622      	mov	r2, r4
   422f6:	4651      	mov	r1, sl
   422f8:	4630      	mov	r0, r6
   422fa:	f7ff fe86 	bl	4200a <append.part.8>
		if (!res) {
   422fe:	2800      	cmp	r0, #0
   42300:	d1af      	bne.n	42262 <coap_packet_append_option+0x7e>
   42302:	e776      	b.n	421f2 <coap_packet_append_option+0xe>

00042304 <coap_option_value_to_int>:
	switch (option->len) {
   42304:	7883      	ldrb	r3, [r0, #2]
   42306:	3b01      	subs	r3, #1
   42308:	2b03      	cmp	r3, #3
   4230a:	d816      	bhi.n	4233a <coap_option_value_to_int+0x36>
   4230c:	e8df f003 	tbb	[pc, r3]
   42310:	11090402 	.word	0x11090402
		return option->value[0];
   42314:	78c0      	ldrb	r0, [r0, #3]
   42316:	4770      	bx	lr
		return (option->value[1] << 0) | (option->value[0] << 8);
   42318:	f8b0 0003 	ldrh.w	r0, [r0, #3]
   4231c:	ba40      	rev16	r0, r0
   4231e:	b280      	uxth	r0, r0
   42320:	4770      	bx	lr
			(option->value[0] << 16);
   42322:	78c3      	ldrb	r3, [r0, #3]
		return (option->value[2] << 0) | (option->value[1] << 8) |
   42324:	7902      	ldrb	r2, [r0, #4]
			(option->value[0] << 16);
   42326:	041b      	lsls	r3, r3, #16
		return (option->value[2] << 0) | (option->value[1] << 8) |
   42328:	7940      	ldrb	r0, [r0, #5]
   4232a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   4232e:	4318      	orrs	r0, r3
   42330:	4770      	bx	lr
		return (option->value[3] << 0) | (option->value[2] << 8) |
   42332:	f8d0 0003 	ldr.w	r0, [r0, #3]
   42336:	ba00      	rev	r0, r0
   42338:	4770      	bx	lr
		return 0;
   4233a:	2000      	movs	r0, #0
}
   4233c:	4770      	bx	lr

0004233e <coap_packet_append_payload_marker>:
{
   4233e:	b508      	push	{r3, lr}
	return append_u8(cpkt, COAP_MARKER) ? 0 : -EINVAL;
   42340:	21ff      	movs	r1, #255	; 0xff
   42342:	f7ff fde8 	bl	41f16 <append_u8>
   42346:	2800      	cmp	r0, #0
}
   42348:	bf0c      	ite	eq
   4234a:	f06f 0015 	mvneq.w	r0, #21
   4234e:	2000      	movne	r0, #0
   42350:	bd08      	pop	{r3, pc}

00042352 <coap_packet_parse>:
{
   42352:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   42356:	b086      	sub	sp, #24
   42358:	4688      	mov	r8, r1
   4235a:	4617      	mov	r7, r2
   4235c:	461d      	mov	r5, r3
   4235e:	f89d 6030 	ldrb.w	r6, [sp, #48]	; 0x30
	if (!cpkt || !data) {
   42362:	4604      	mov	r4, r0
   42364:	b920      	cbnz	r0, 42370 <coap_packet_parse+0x1e>
		return -EINVAL;
   42366:	f06f 0015 	mvn.w	r0, #21
}
   4236a:	b006      	add	sp, #24
   4236c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (!cpkt || !data) {
   42370:	2900      	cmp	r1, #0
   42372:	d0f8      	beq.n	42366 <coap_packet_parse+0x14>
	if (len < BASIC_HEADER_SIZE) {
   42374:	2a03      	cmp	r2, #3
   42376:	d9f6      	bls.n	42366 <coap_packet_parse+0x14>
	if (options) {
   42378:	b123      	cbz	r3, 42384 <coap_packet_parse+0x32>
   4237a:	0132      	lsls	r2, r6, #4
   4237c:	2100      	movs	r1, #0
   4237e:	4618      	mov	r0, r3
   42380:	f002 fda0 	bl	44ec4 <memset>
	cpkt->offset = 0U;
   42384:	2000      	movs	r0, #0
	cpkt->data = data;
   42386:	f8c4 8000 	str.w	r8, [r4]
	cpkt->offset = 0U;
   4238a:	80a0      	strh	r0, [r4, #4]
	cpkt->max_len = len;
   4238c:	80e7      	strh	r7, [r4, #6]
	cpkt->opt_len = 0U;
   4238e:	8160      	strh	r0, [r4, #10]
	cpkt->hdr_len = 0U;
   42390:	7220      	strb	r0, [r4, #8]
	cpkt->delta = 0U;
   42392:	81a0      	strh	r0, [r4, #12]
	tkl = cpkt->data[0] & 0x0f;
   42394:	f898 3000 	ldrb.w	r3, [r8]
   42398:	f003 030f 	and.w	r3, r3, #15
	if (tkl > 8) {
   4239c:	2b08      	cmp	r3, #8
   4239e:	d8e2      	bhi.n	42366 <coap_packet_parse+0x14>
	cpkt->hdr_len = BASIC_HEADER_SIZE + tkl;
   423a0:	3304      	adds	r3, #4
   423a2:	7223      	strb	r3, [r4, #8]
	if (cpkt->hdr_len > len) {
   423a4:	b29b      	uxth	r3, r3
   423a6:	42bb      	cmp	r3, r7
   423a8:	d8dd      	bhi.n	42366 <coap_packet_parse+0x14>
	cpkt->offset = cpkt->hdr_len;
   423aa:	80a3      	strh	r3, [r4, #4]
	if (cpkt->hdr_len == len) {
   423ac:	d0dd      	beq.n	4236a <coap_packet_parse+0x18>
	num = 0U;
   423ae:	4607      	mov	r7, r0
	offset = cpkt->offset;
   423b0:	f8ad 3014 	strh.w	r3, [sp, #20]
	opt_len = 0U;
   423b4:	f8ad 0012 	strh.w	r0, [sp, #18]
	delta = 0U;
   423b8:	f8ad 0016 	strh.w	r0, [sp, #22]
		ret = parse_option(cpkt->data, offset, &offset, cpkt->max_len,
   423bc:	f10d 0812 	add.w	r8, sp, #18
		option = num < opt_num ? &options[num++] : NULL;
   423c0:	42b7      	cmp	r7, r6
   423c2:	bf2c      	ite	cs
   423c4:	2300      	movcs	r3, #0
   423c6:	eb05 1307 	addcc.w	r3, r5, r7, lsl #4
		ret = parse_option(cpkt->data, offset, &offset, cpkt->max_len,
   423ca:	e9cd 8301 	strd	r8, r3, [sp, #4]
   423ce:	f10d 0316 	add.w	r3, sp, #22
		option = num < opt_num ? &options[num++] : NULL;
   423d2:	bf38      	it	cc
   423d4:	1c7a      	addcc	r2, r7, #1
		ret = parse_option(cpkt->data, offset, &offset, cpkt->max_len,
   423d6:	9300      	str	r3, [sp, #0]
		option = num < opt_num ? &options[num++] : NULL;
   423d8:	bf38      	it	cc
   423da:	b2d7      	uxtbcc	r7, r2
		ret = parse_option(cpkt->data, offset, &offset, cpkt->max_len,
   423dc:	88e3      	ldrh	r3, [r4, #6]
   423de:	aa05      	add	r2, sp, #20
   423e0:	f8bd 1014 	ldrh.w	r1, [sp, #20]
   423e4:	6820      	ldr	r0, [r4, #0]
   423e6:	f7ff fe23 	bl	42030 <parse_option>
		if (ret < 0) {
   423ea:	2800      	cmp	r0, #0
   423ec:	dbbd      	blt.n	4236a <coap_packet_parse+0x18>
		} else if (ret == 0) {
   423ee:	d1e7      	bne.n	423c0 <coap_packet_parse+0x6e>
	cpkt->opt_len = opt_len;
   423f0:	f8bd 3012 	ldrh.w	r3, [sp, #18]
   423f4:	8163      	strh	r3, [r4, #10]
	cpkt->delta = delta;
   423f6:	f8bd 3016 	ldrh.w	r3, [sp, #22]
   423fa:	81a3      	strh	r3, [r4, #12]
	cpkt->offset = offset;
   423fc:	f8bd 3014 	ldrh.w	r3, [sp, #20]
   42400:	80a3      	strh	r3, [r4, #4]
	return 0;
   42402:	e7b2      	b.n	4236a <coap_packet_parse+0x18>

00042404 <coap_find_options>:
{
   42404:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	opt_len = 0U;
   42408:	2400      	movs	r4, #0
{
   4240a:	4605      	mov	r5, r0
   4240c:	460e      	mov	r6, r1
   4240e:	4617      	mov	r7, r2
   42410:	4699      	mov	r9, r3
	offset = cpkt->hdr_len;
   42412:	7a03      	ldrb	r3, [r0, #8]
{
   42414:	b087      	sub	sp, #28
	offset = cpkt->hdr_len;
   42416:	f8ad 3014 	strh.w	r3, [sp, #20]
	opt_len = 0U;
   4241a:	f8ad 4012 	strh.w	r4, [sp, #18]
	delta = 0U;
   4241e:	f8ad 4016 	strh.w	r4, [sp, #22]
		r = parse_option(cpkt->data, offset, &offset,
   42422:	f10d 0a12 	add.w	sl, sp, #18
   42426:	f10d 0b16 	add.w	fp, sp, #22
	while (delta <= code && num < veclen) {
   4242a:	454c      	cmp	r4, r9
   4242c:	d21b      	bcs.n	42466 <coap_find_options+0x62>
				 &options[num]);
   4242e:	ea4f 1804 	mov.w	r8, r4, lsl #4
		r = parse_option(cpkt->data, offset, &offset,
   42432:	eb07 0308 	add.w	r3, r7, r8
   42436:	e9cd a301 	strd	sl, r3, [sp, #4]
   4243a:	f8cd b000 	str.w	fp, [sp]
   4243e:	88eb      	ldrh	r3, [r5, #6]
   42440:	aa05      	add	r2, sp, #20
   42442:	f8bd 1014 	ldrh.w	r1, [sp, #20]
   42446:	6828      	ldr	r0, [r5, #0]
   42448:	f7ff fdf2 	bl	42030 <parse_option>
		if (r < 0) {
   4244c:	2800      	cmp	r0, #0
   4244e:	db0e      	blt.n	4246e <coap_find_options+0x6a>
		if (code == options[num].delta) {
   42450:	f837 3008 	ldrh.w	r3, [r7, r8]
   42454:	42b3      	cmp	r3, r6
			num++;
   42456:	bf04      	itt	eq
   42458:	3401      	addeq	r4, #1
   4245a:	b2e4      	uxtbeq	r4, r4
		if (r == 0) {
   4245c:	b118      	cbz	r0, 42466 <coap_find_options+0x62>
	while (delta <= code && num < veclen) {
   4245e:	f8bd 3016 	ldrh.w	r3, [sp, #22]
   42462:	42b3      	cmp	r3, r6
   42464:	d9e1      	bls.n	4242a <coap_find_options+0x26>
	return num;
   42466:	4620      	mov	r0, r4
}
   42468:	b007      	add	sp, #28
   4246a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			return -EINVAL;
   4246e:	f06f 0015 	mvn.w	r0, #21
   42472:	e7f9      	b.n	42468 <coap_find_options+0x64>

00042474 <get_block_option>:
{
   42474:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	count = coap_find_options(cpkt, code, &option, count);
   42476:	2301      	movs	r3, #1
   42478:	466a      	mov	r2, sp
   4247a:	f7ff ffc3 	bl	42404 <coap_find_options>
	if (count <= 0) {
   4247e:	2800      	cmp	r0, #0
   42480:	dd05      	ble.n	4248e <get_block_option+0x1a>
	val = coap_option_value_to_int(&option);
   42482:	4668      	mov	r0, sp
   42484:	f7ff ff3e 	bl	42304 <coap_option_value_to_int>
}
   42488:	b005      	add	sp, #20
   4248a:	f85d fb04 	ldr.w	pc, [sp], #4
		return -ENOENT;
   4248e:	f06f 0001 	mvn.w	r0, #1
   42492:	e7f9      	b.n	42488 <get_block_option+0x14>

00042494 <get_observe_option>:
{
   42494:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   42496:	4604      	mov	r4, r0
	struct coap_option option = {};
   42498:	2210      	movs	r2, #16
   4249a:	2100      	movs	r1, #0
   4249c:	4668      	mov	r0, sp
   4249e:	f002 fd11 	bl	44ec4 <memset>
	r = coap_find_options(cpkt, COAP_OPTION_OBSERVE, &option, count);
   424a2:	2301      	movs	r3, #1
   424a4:	466a      	mov	r2, sp
   424a6:	2106      	movs	r1, #6
   424a8:	4620      	mov	r0, r4
   424aa:	f7ff ffab 	bl	42404 <coap_find_options>
	if (r <= 0) {
   424ae:	2800      	cmp	r0, #0
   424b0:	dd04      	ble.n	424bc <get_observe_option+0x28>
	return coap_option_value_to_int(&option);
   424b2:	4668      	mov	r0, sp
   424b4:	f7ff ff26 	bl	42304 <coap_option_value_to_int>
}
   424b8:	b004      	add	sp, #16
   424ba:	bd10      	pop	{r4, pc}
		return -ENOENT;
   424bc:	f06f 0001 	mvn.w	r0, #1
   424c0:	e7fa      	b.n	424b8 <get_observe_option+0x24>

000424c2 <coap_header_get_type>:
	if (!cpkt || !cpkt->data) {
   424c2:	b120      	cbz	r0, 424ce <coap_header_get_type+0xc>
   424c4:	6800      	ldr	r0, [r0, #0]
   424c6:	b110      	cbz	r0, 424ce <coap_header_get_type+0xc>
	return (cpkt->data[0] & 0x30) >> 4;
   424c8:	7800      	ldrb	r0, [r0, #0]
   424ca:	f3c0 1001 	ubfx	r0, r0, #4, #2
}
   424ce:	4770      	bx	lr

000424d0 <coap_header_get_token>:
{
   424d0:	b510      	push	{r4, lr}
   424d2:	460b      	mov	r3, r1
	if (!cpkt || !cpkt->data) {
   424d4:	b160      	cbz	r0, 424f0 <coap_header_get_token+0x20>
   424d6:	6801      	ldr	r1, [r0, #0]
   424d8:	b161      	cbz	r1, 424f4 <coap_header_get_token+0x24>
	tkl = cpkt->data[0] & 0x0f;
   424da:	780c      	ldrb	r4, [r1, #0]
	if (tkl) {
   424dc:	f014 040f 	ands.w	r4, r4, #15
   424e0:	d004      	beq.n	424ec <coap_header_get_token+0x1c>
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   424e2:	4622      	mov	r2, r4
   424e4:	3104      	adds	r1, #4
   424e6:	4618      	mov	r0, r3
   424e8:	f002 fcb2 	bl	44e50 <memcpy>
}
   424ec:	4620      	mov	r0, r4
   424ee:	bd10      	pop	{r4, pc}
		return 0;
   424f0:	4604      	mov	r4, r0
   424f2:	e7fb      	b.n	424ec <coap_header_get_token+0x1c>
   424f4:	460c      	mov	r4, r1
   424f6:	e7f9      	b.n	424ec <coap_header_get_token+0x1c>

000424f8 <coap_header_get_code>:
	if (!cpkt || !cpkt->data) {
   424f8:	b308      	cbz	r0, 4253e <coap_header_get_code+0x46>
   424fa:	6800      	ldr	r0, [r0, #0]
   424fc:	b1f8      	cbz	r0, 4253e <coap_header_get_code+0x46>
	return cpkt->data[1];
   424fe:	7840      	ldrb	r0, [r0, #1]
	switch (code) {
   42500:	2886      	cmp	r0, #134	; 0x86
   42502:	d80d      	bhi.n	42520 <coap_header_get_code+0x28>
   42504:	2880      	cmp	r0, #128	; 0x80
   42506:	d21a      	bcs.n	4253e <coap_header_get_code+0x46>
   42508:	2845      	cmp	r0, #69	; 0x45
   4250a:	d805      	bhi.n	42518 <coap_header_get_code+0x20>
   4250c:	2840      	cmp	r0, #64	; 0x40
   4250e:	d216      	bcs.n	4253e <coap_header_get_code+0x46>
		return COAP_CODE_EMPTY;
   42510:	2805      	cmp	r0, #5
   42512:	bf28      	it	cs
   42514:	2000      	movcs	r0, #0
   42516:	4770      	bx	lr
   42518:	285f      	cmp	r0, #95	; 0x5f
   4251a:	bf18      	it	ne
   4251c:	2000      	movne	r0, #0
   4251e:	4770      	bx	lr
	switch (code) {
   42520:	288d      	cmp	r0, #141	; 0x8d
   42522:	d803      	bhi.n	4252c <coap_header_get_code+0x34>
   42524:	288c      	cmp	r0, #140	; 0x8c
   42526:	d20a      	bcs.n	4253e <coap_header_get_code+0x46>
		return COAP_CODE_EMPTY;
   42528:	2888      	cmp	r0, #136	; 0x88
   4252a:	e7f6      	b.n	4251a <coap_header_get_code+0x22>
	switch (code) {
   4252c:	288f      	cmp	r0, #143	; 0x8f
   4252e:	d006      	beq.n	4253e <coap_header_get_code+0x46>
   42530:	d304      	bcc.n	4253c <coap_header_get_code+0x44>
   42532:	f100 0360 	add.w	r3, r0, #96	; 0x60
   42536:	b2db      	uxtb	r3, r3
		return COAP_CODE_EMPTY;
   42538:	2b06      	cmp	r3, #6
   4253a:	e7ea      	b.n	42512 <coap_header_get_code+0x1a>
   4253c:	2000      	movs	r0, #0
}
   4253e:	4770      	bx	lr

00042540 <is_request>:
{
   42540:	b508      	push	{r3, lr}
	u8_t code = coap_header_get_code(cpkt);
   42542:	f7ff ffd9 	bl	424f8 <coap_header_get_code>
	return !(code & ~COAP_REQUEST_MASK);
   42546:	f030 0307 	bics.w	r3, r0, #7
}
   4254a:	bf0c      	ite	eq
   4254c:	2001      	moveq	r0, #1
   4254e:	2000      	movne	r0, #0
   42550:	bd08      	pop	{r3, pc}

00042552 <coap_header_get_id>:
	if (!cpkt || !cpkt->data) {
   42552:	b128      	cbz	r0, 42560 <coap_header_get_id+0xe>
   42554:	6800      	ldr	r0, [r0, #0]
   42556:	b118      	cbz	r0, 42560 <coap_header_get_id+0xe>
	return (cpkt->data[2] << 8) | cpkt->data[3];
   42558:	7883      	ldrb	r3, [r0, #2]
   4255a:	78c0      	ldrb	r0, [r0, #3]
   4255c:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
}
   42560:	4770      	bx	lr

00042562 <coap_packet_get_payload>:
{
   42562:	b510      	push	{r4, lr}
	if (!cpkt || !len) {
   42564:	b908      	cbnz	r0, 4256a <coap_packet_get_payload+0x8>
		return NULL;
   42566:	2000      	movs	r0, #0
}
   42568:	bd10      	pop	{r4, pc}
	if (!cpkt || !len) {
   4256a:	2900      	cmp	r1, #0
   4256c:	d0fb      	beq.n	42566 <coap_packet_get_payload+0x4>
	payload_len = cpkt->max_len - cpkt->hdr_len - cpkt->opt_len;
   4256e:	7a02      	ldrb	r2, [r0, #8]
   42570:	8944      	ldrh	r4, [r0, #10]
   42572:	88c3      	ldrh	r3, [r0, #6]
   42574:	4422      	add	r2, r4
   42576:	1a9b      	subs	r3, r3, r2
	if (payload_len > 0) {
   42578:	ea23 72e3 	bic.w	r2, r3, r3, asr #31
	return !(*len) ? NULL :
   4257c:	2b00      	cmp	r3, #0
   4257e:	800a      	strh	r2, [r1, #0]
   42580:	ddf1      	ble.n	42566 <coap_packet_get_payload+0x4>
		cpkt->data + cpkt->hdr_len + cpkt->opt_len;
   42582:	7a03      	ldrb	r3, [r0, #8]
   42584:	8942      	ldrh	r2, [r0, #10]
	return !(*len) ? NULL :
   42586:	6800      	ldr	r0, [r0, #0]
		cpkt->data + cpkt->hdr_len + cpkt->opt_len;
   42588:	4413      	add	r3, r2
	return !(*len) ? NULL :
   4258a:	4418      	add	r0, r3
   4258c:	e7ec      	b.n	42568 <coap_packet_get_payload+0x6>

0004258e <coap_block_transfer_init>:
{
   4258e:	4603      	mov	r3, r0
	ctx->block_size = block_size;
   42590:	7201      	strb	r1, [r0, #8]
	ctx->total_size = total_size;
   42592:	6002      	str	r2, [r0, #0]
	ctx->current = 0;
   42594:	2000      	movs	r0, #0
   42596:	6058      	str	r0, [r3, #4]
}
   42598:	4770      	bx	lr

0004259a <coap_append_block1_option>:
{
   4259a:	b570      	push	{r4, r5, r6, lr}
	u16_t bytes = coap_block_size_to_bytes(ctx->block_size);
   4259c:	7a0a      	ldrb	r2, [r1, #8]
{
   4259e:	4606      	mov	r6, r0
	if (is_request(cpkt)) {
   425a0:	f7ff ffce 	bl	42540 <is_request>
   425a4:	2501      	movs	r5, #1
   425a6:	f002 0307 	and.w	r3, r2, #7
   425aa:	3204      	adds	r2, #4
   425ac:	4095      	lsls	r5, r2
   425ae:	684c      	ldr	r4, [r1, #4]
   425b0:	b2ad      	uxth	r5, r5
   425b2:	fbb4 f2f5 	udiv	r2, r4, r5
   425b6:	b178      	cbz	r0, 425d8 <coap_append_block1_option+0x3e>
		SET_MORE(val, ctx->current + bytes < ctx->total_size);
   425b8:	6809      	ldr	r1, [r1, #0]
   425ba:	442c      	add	r4, r5
   425bc:	428c      	cmp	r4, r1
   425be:	bf34      	ite	cc
   425c0:	2408      	movcc	r4, #8
   425c2:	2400      	movcs	r4, #0
		SET_NUM(val, ctx->current / bytes);
   425c4:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
   425c8:	ea43 0204 	orr.w	r2, r3, r4
	r = coap_append_option_int(cpkt, COAP_OPTION_BLOCK1, val);
   425cc:	4630      	mov	r0, r6
}
   425ce:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	r = coap_append_option_int(cpkt, COAP_OPTION_BLOCK1, val);
   425d2:	211b      	movs	r1, #27
   425d4:	f7e2 bcca 	b.w	24f6c <coap_append_option_int>
		SET_NUM(val, ctx->current / bytes);
   425d8:	ea43 1202 	orr.w	r2, r3, r2, lsl #4
   425dc:	e7f6      	b.n	425cc <coap_append_block1_option+0x32>

000425de <coap_append_block2_option>:
{
   425de:	b570      	push	{r4, r5, r6, lr}
	u16_t bytes = coap_block_size_to_bytes(ctx->block_size);
   425e0:	7a0a      	ldrb	r2, [r1, #8]
{
   425e2:	4605      	mov	r5, r0
	if (is_request(cpkt)) {
   425e4:	f7ff ffac 	bl	42540 <is_request>
   425e8:	2401      	movs	r4, #1
   425ea:	1d16      	adds	r6, r2, #4
   425ec:	40b4      	lsls	r4, r6
   425ee:	684b      	ldr	r3, [r1, #4]
   425f0:	b2a4      	uxth	r4, r4
   425f2:	f002 0207 	and.w	r2, r2, #7
   425f6:	fbb3 f6f4 	udiv	r6, r3, r4
   425fa:	b138      	cbz	r0, 4260c <coap_append_block2_option+0x2e>
		SET_NUM(val, ctx->current / bytes);
   425fc:	ea42 1206 	orr.w	r2, r2, r6, lsl #4
	r = coap_append_option_int(cpkt, COAP_OPTION_BLOCK2, val);
   42600:	4628      	mov	r0, r5
}
   42602:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	r = coap_append_option_int(cpkt, COAP_OPTION_BLOCK2, val);
   42606:	2117      	movs	r1, #23
   42608:	f7e2 bcb0 	b.w	24f6c <coap_append_option_int>
		SET_MORE(val, ctx->current + bytes < ctx->total_size);
   4260c:	6809      	ldr	r1, [r1, #0]
   4260e:	4423      	add	r3, r4
   42610:	428b      	cmp	r3, r1
   42612:	bf34      	ite	cc
   42614:	2308      	movcc	r3, #8
   42616:	2300      	movcs	r3, #0
   42618:	431a      	orrs	r2, r3
   4261a:	e7ef      	b.n	425fc <coap_append_block2_option+0x1e>

0004261c <coap_update_from_block>:
{
   4261c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   42620:	460c      	mov	r4, r1
	block1 = get_block_option(cpkt, COAP_OPTION_BLOCK1);
   42622:	211b      	movs	r1, #27
{
   42624:	4680      	mov	r8, r0
	block1 = get_block_option(cpkt, COAP_OPTION_BLOCK1);
   42626:	f7ff ff25 	bl	42474 <get_block_option>
	block2 = get_block_option(cpkt, COAP_OPTION_BLOCK2);
   4262a:	2117      	movs	r1, #23
	block1 = get_block_option(cpkt, COAP_OPTION_BLOCK1);
   4262c:	4607      	mov	r7, r0
	block2 = get_block_option(cpkt, COAP_OPTION_BLOCK2);
   4262e:	4640      	mov	r0, r8
   42630:	f7ff ff20 	bl	42474 <get_block_option>
	size1 = get_block_option(cpkt, COAP_OPTION_SIZE1);
   42634:	213c      	movs	r1, #60	; 0x3c
	block2 = get_block_option(cpkt, COAP_OPTION_BLOCK2);
   42636:	4605      	mov	r5, r0
	size1 = get_block_option(cpkt, COAP_OPTION_SIZE1);
   42638:	4640      	mov	r0, r8
   4263a:	f7ff ff1b 	bl	42474 <get_block_option>
	size2 = get_block_option(cpkt, COAP_OPTION_SIZE2);
   4263e:	211c      	movs	r1, #28
	size1 = get_block_option(cpkt, COAP_OPTION_SIZE1);
   42640:	4606      	mov	r6, r0
	size2 = get_block_option(cpkt, COAP_OPTION_SIZE2);
   42642:	4640      	mov	r0, r8
   42644:	f7ff ff16 	bl	42474 <get_block_option>
	size1 = size1 == -ENOENT ? 0 : size1;
   42648:	1cb3      	adds	r3, r6, #2
   4264a:	bf08      	it	eq
   4264c:	2600      	moveq	r6, #0
	size2 = size2 == -ENOENT ? 0 : size2;
   4264e:	f110 0f02 	cmn.w	r0, #2
   42652:	bf14      	ite	ne
   42654:	4602      	movne	r2, r0
   42656:	2200      	moveq	r2, #0
	if (is_request(cpkt)) {
   42658:	4640      	mov	r0, r8
   4265a:	f7ff ff71 	bl	42540 <is_request>
   4265e:	b1d0      	cbz	r0, 42696 <coap_update_from_block+0x7a>
	size_t new_current = GET_NUM(block) << (GET_BLOCK_SIZE(block) + 4);
   42660:	f005 0307 	and.w	r3, r5, #7
   42664:	1128      	asrs	r0, r5, #4
   42666:	1d1a      	adds	r2, r3, #4
	if (block == -ENOENT) {
   42668:	1ca9      	adds	r1, r5, #2
	size_t new_current = GET_NUM(block) << (GET_BLOCK_SIZE(block) + 4);
   4266a:	fa00 f202 	lsl.w	r2, r0, r2
	if (block == -ENOENT) {
   4266e:	d00b      	beq.n	42688 <coap_update_from_block+0x6c>
	if (GET_MORE(block)) {
   42670:	0729      	lsls	r1, r5, #28
   42672:	d422      	bmi.n	426ba <coap_update_from_block+0x9e>
	if (GET_NUM(block) > 0 && GET_BLOCK_SIZE(block) != ctx->block_size) {
   42674:	2800      	cmp	r0, #0
   42676:	7a21      	ldrb	r1, [r4, #8]
   42678:	dd01      	ble.n	4267e <coap_update_from_block+0x62>
   4267a:	428b      	cmp	r3, r1
   4267c:	d11d      	bne.n	426ba <coap_update_from_block+0x9e>
	ctx->block_size = MIN(GET_BLOCK_SIZE(block), ctx->block_size);
   4267e:	428b      	cmp	r3, r1
   42680:	bfa8      	it	ge
   42682:	460b      	movge	r3, r1
	ctx->current = new_current;
   42684:	6062      	str	r2, [r4, #4]
	ctx->block_size = MIN(GET_BLOCK_SIZE(block), ctx->block_size);
   42686:	7223      	strb	r3, [r4, #8]
		return update_descriptive_block(ctx, block1, size1);
   42688:	4632      	mov	r2, r6
   4268a:	4639      	mov	r1, r7
	return update_descriptive_block(ctx, block2, size2);
   4268c:	4620      	mov	r0, r4
}
   4268e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	return update_descriptive_block(ctx, block2, size2);
   42692:	f7ff bc96 	b.w	41fc2 <update_descriptive_block>
	size_t new_current = GET_NUM(block) << (GET_BLOCK_SIZE(block) + 4);
   42696:	f007 0307 	and.w	r3, r7, #7
   4269a:	1139      	asrs	r1, r7, #4
   4269c:	1d18      	adds	r0, r3, #4
	if (block == -ENOENT) {
   4269e:	3702      	adds	r7, #2
	size_t new_current = GET_NUM(block) << (GET_BLOCK_SIZE(block) + 4);
   426a0:	fa01 f100 	lsl.w	r1, r1, r0
	if (block == -ENOENT) {
   426a4:	d007      	beq.n	426b6 <coap_update_from_block+0x9a>
	if (new_current != ctx->current) {
   426a6:	6860      	ldr	r0, [r4, #4]
   426a8:	4281      	cmp	r1, r0
   426aa:	d106      	bne.n	426ba <coap_update_from_block+0x9e>
	if (GET_BLOCK_SIZE(block) > ctx->block_size) {
   426ac:	7a21      	ldrb	r1, [r4, #8]
   426ae:	428b      	cmp	r3, r1
   426b0:	dc03      	bgt.n	426ba <coap_update_from_block+0x9e>
	ctx->block_size = GET_BLOCK_SIZE(block);
   426b2:	7223      	strb	r3, [r4, #8]
	ctx->total_size = size;
   426b4:	6026      	str	r6, [r4, #0]
	return update_descriptive_block(ctx, block2, size2);
   426b6:	4629      	mov	r1, r5
   426b8:	e7e8      	b.n	4268c <coap_update_from_block+0x70>
}
   426ba:	f06f 0015 	mvn.w	r0, #21
   426be:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000426c2 <coap_next_block>:
{
   426c2:	b510      	push	{r4, lr}
   426c4:	4602      	mov	r2, r0
   426c6:	460c      	mov	r4, r1
	if (is_request(cpkt)) {
   426c8:	f7ff ff3a 	bl	42540 <is_request>
   426cc:	b178      	cbz	r0, 426ee <coap_next_block+0x2c>
		block = get_block_option(cpkt, COAP_OPTION_BLOCK1);
   426ce:	211b      	movs	r1, #27
		block = get_block_option(cpkt, COAP_OPTION_BLOCK2);
   426d0:	4610      	mov	r0, r2
   426d2:	f7ff fecf 	bl	42474 <get_block_option>
	if (!GET_MORE(block)) {
   426d6:	f010 0008 	ands.w	r0, r0, #8
   426da:	d007      	beq.n	426ec <coap_next_block+0x2a>
   426dc:	7a20      	ldrb	r0, [r4, #8]
   426de:	1d03      	adds	r3, r0, #4
   426e0:	2001      	movs	r0, #1
   426e2:	4098      	lsls	r0, r3
	ctx->current += coap_block_size_to_bytes(ctx->block_size);
   426e4:	6863      	ldr	r3, [r4, #4]
   426e6:	fa13 f080 	uxtah	r0, r3, r0
   426ea:	6060      	str	r0, [r4, #4]
}
   426ec:	bd10      	pop	{r4, pc}
		block = get_block_option(cpkt, COAP_OPTION_BLOCK2);
   426ee:	2117      	movs	r1, #23
   426f0:	e7ee      	b.n	426d0 <coap_next_block+0xe>

000426f2 <coap_pending_init>:
{
   426f2:	b570      	push	{r4, r5, r6, lr}
   426f4:	460d      	mov	r5, r1
   426f6:	4616      	mov	r6, r2
__ssp_bos_icheck3(memset, void *, int)
   426f8:	2100      	movs	r1, #0
   426fa:	2218      	movs	r2, #24
   426fc:	4604      	mov	r4, r0
   426fe:	f002 fbe1 	bl	44ec4 <memset>
	pending->id = coap_header_get_id(request);
   42702:	4628      	mov	r0, r5
   42704:	f7ff ff25 	bl	42552 <coap_header_get_id>
   42708:	81a0      	strh	r0, [r4, #12]
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   4270a:	6833      	ldr	r3, [r6, #0]
}
   4270c:	2000      	movs	r0, #0
   4270e:	6023      	str	r3, [r4, #0]
   42710:	6873      	ldr	r3, [r6, #4]
   42712:	6063      	str	r3, [r4, #4]
	pending->data = request->data;
   42714:	682b      	ldr	r3, [r5, #0]
   42716:	6123      	str	r3, [r4, #16]
	pending->len = request->offset;
   42718:	88ab      	ldrh	r3, [r5, #4]
   4271a:	82a3      	strh	r3, [r4, #20]
}
   4271c:	bd70      	pop	{r4, r5, r6, pc}

0004271e <coap_pending_next_unused>:
	for (i = 0, p = pendings; i < len; i++, p++) {
   4271e:	2300      	movs	r3, #0
   42720:	428b      	cmp	r3, r1
   42722:	d101      	bne.n	42728 <coap_pending_next_unused+0xa>
	return NULL;
   42724:	2000      	movs	r0, #0
}
   42726:	4770      	bx	lr
		if (p->timeout == 0) {
   42728:	6882      	ldr	r2, [r0, #8]
   4272a:	2a00      	cmp	r2, #0
   4272c:	d0fb      	beq.n	42726 <coap_pending_next_unused+0x8>
	for (i = 0, p = pendings; i < len; i++, p++) {
   4272e:	3301      	adds	r3, #1
   42730:	3018      	adds	r0, #24
   42732:	e7f5      	b.n	42720 <coap_pending_next_unused+0x2>

00042734 <coap_reply_next_unused>:
	for (i = 0, r = replies; i < len; i++, r++) {
   42734:	2300      	movs	r3, #0
   42736:	428b      	cmp	r3, r1
   42738:	d101      	bne.n	4273e <coap_reply_next_unused+0xa>
	return NULL;
   4273a:	2000      	movs	r0, #0
}
   4273c:	4770      	bx	lr
		if (!r->reply) {
   4273e:	6802      	ldr	r2, [r0, #0]
   42740:	2a00      	cmp	r2, #0
   42742:	d0fb      	beq.n	4273c <coap_reply_next_unused+0x8>
	for (i = 0, r = replies; i < len; i++, r++) {
   42744:	3301      	adds	r3, #1
   42746:	3018      	adds	r0, #24
   42748:	e7f5      	b.n	42736 <coap_reply_next_unused+0x2>

0004274a <coap_pending_received>:
{
   4274a:	b510      	push	{r4, lr}
	u16_t resp_id = coap_header_get_id(response);
   4274c:	f7ff ff01 	bl	42552 <coap_header_get_id>
	for (i = 0, p = pendings; i < len; i++, p++) {
   42750:	2300      	movs	r3, #0
   42752:	4293      	cmp	r3, r2
   42754:	d102      	bne.n	4275c <coap_pending_received+0x12>
	return NULL;
   42756:	2100      	movs	r1, #0
}
   42758:	4608      	mov	r0, r1
   4275a:	bd10      	pop	{r4, pc}
		if (!p->timeout) {
   4275c:	688c      	ldr	r4, [r1, #8]
   4275e:	b114      	cbz	r4, 42766 <coap_pending_received+0x1c>
		if (resp_id != p->id) {
   42760:	898c      	ldrh	r4, [r1, #12]
   42762:	4284      	cmp	r4, r0
   42764:	d0f8      	beq.n	42758 <coap_pending_received+0xe>
	for (i = 0, p = pendings; i < len; i++, p++) {
   42766:	3301      	adds	r3, #1
   42768:	3118      	adds	r1, #24
   4276a:	e7f2      	b.n	42752 <coap_pending_received+0x8>

0004276c <coap_pending_next_to_expire>:
	for (i = 0, p = pendings; i < len; i++, p++) {
   4276c:	2200      	movs	r2, #0
	struct coap_pending *p, *found = NULL;
   4276e:	4613      	mov	r3, r2
{
   42770:	b530      	push	{r4, r5, lr}
	for (i = 0, p = pendings; i < len; i++, p++) {
   42772:	428a      	cmp	r2, r1
   42774:	d101      	bne.n	4277a <coap_pending_next_to_expire+0xe>
}
   42776:	4618      	mov	r0, r3
   42778:	bd30      	pop	{r4, r5, pc}
		if (p->timeout && (!found || found->timeout < p->timeout)) {
   4277a:	6884      	ldr	r4, [r0, #8]
   4277c:	b124      	cbz	r4, 42788 <coap_pending_next_to_expire+0x1c>
   4277e:	b133      	cbz	r3, 4278e <coap_pending_next_to_expire+0x22>
   42780:	689d      	ldr	r5, [r3, #8]
   42782:	42ac      	cmp	r4, r5
   42784:	bfc8      	it	gt
   42786:	4603      	movgt	r3, r0
	for (i = 0, p = pendings; i < len; i++, p++) {
   42788:	3201      	adds	r2, #1
   4278a:	3018      	adds	r0, #24
   4278c:	e7f1      	b.n	42772 <coap_pending_next_to_expire+0x6>
   4278e:	4603      	mov	r3, r0
   42790:	e7fa      	b.n	42788 <coap_pending_next_to_expire+0x1c>

00042792 <coap_pending_clear>:
	pending->timeout = 0;
   42792:	2300      	movs	r3, #0
   42794:	6083      	str	r3, [r0, #8]
	pending->data = NULL;
   42796:	6103      	str	r3, [r0, #16]
}
   42798:	4770      	bx	lr

0004279a <coap_response_received>:
{
   4279a:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   4279e:	4607      	mov	r7, r0
   427a0:	468a      	mov	sl, r1
   427a2:	4614      	mov	r4, r2
   427a4:	4698      	mov	r8, r3
	id = coap_header_get_id(response);
   427a6:	f7ff fed4 	bl	42552 <coap_header_get_id>
	tkl = coap_header_get_token(response, (u8_t *)token);
   427aa:	4669      	mov	r1, sp
	id = coap_header_get_id(response);
   427ac:	4681      	mov	r9, r0
	tkl = coap_header_get_token(response, (u8_t *)token);
   427ae:	4638      	mov	r0, r7
   427b0:	f7ff fe8e 	bl	424d0 <coap_header_get_token>
	for (i = 0, r = replies; i < len; i++, r++) {
   427b4:	2500      	movs	r5, #0
	tkl = coap_header_get_token(response, (u8_t *)token);
   427b6:	4606      	mov	r6, r0
	for (i = 0, r = replies; i < len; i++, r++) {
   427b8:	4545      	cmp	r5, r8
   427ba:	d101      	bne.n	427c0 <coap_response_received+0x26>
	return NULL;
   427bc:	2400      	movs	r4, #0
   427be:	e014      	b.n	427ea <coap_response_received+0x50>
		if ((r->id == 0U) && (r->tkl == 0U)) {
   427c0:	89a3      	ldrh	r3, [r4, #12]
   427c2:	b90b      	cbnz	r3, 427c8 <coap_response_received+0x2e>
   427c4:	7da2      	ldrb	r2, [r4, #22]
   427c6:	b112      	cbz	r2, 427ce <coap_response_received+0x34>
		if ((r->id != id) && (tkl == 0U)) {
   427c8:	454b      	cmp	r3, r9
   427ca:	d003      	beq.n	427d4 <coap_response_received+0x3a>
   427cc:	b98e      	cbnz	r6, 427f2 <coap_response_received+0x58>
	for (i = 0, r = replies; i < len; i++, r++) {
   427ce:	3501      	adds	r5, #1
   427d0:	3418      	adds	r4, #24
   427d2:	e7f1      	b.n	427b8 <coap_response_received+0x1e>
		if (tkl > 0 && memcmp(r->token, token, tkl)) {
   427d4:	b96e      	cbnz	r6, 427f2 <coap_response_received+0x58>
		age = get_observe_option(response);
   427d6:	4638      	mov	r0, r7
   427d8:	f7ff fe5c 	bl	42494 <get_observe_option>
		if (age > 0) {
   427dc:	2800      	cmp	r0, #0
   427de:	dc11      	bgt.n	42804 <coap_response_received+0x6a>
		r->reply(response, r, from);
   427e0:	6823      	ldr	r3, [r4, #0]
   427e2:	4652      	mov	r2, sl
   427e4:	4621      	mov	r1, r4
   427e6:	4638      	mov	r0, r7
   427e8:	4798      	blx	r3
}
   427ea:	4620      	mov	r0, r4
   427ec:	b002      	add	sp, #8
   427ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		if (tkl > 0 && memcmp(r->token, token, tkl)) {
   427f2:	4632      	mov	r2, r6
   427f4:	4669      	mov	r1, sp
   427f6:	f104 000e 	add.w	r0, r4, #14
   427fa:	f002 fb1b 	bl	44e34 <memcmp>
   427fe:	2800      	cmp	r0, #0
   42800:	d0e9      	beq.n	427d6 <coap_response_received+0x3c>
   42802:	e7e4      	b.n	427ce <coap_response_received+0x34>
			if (r->age > age && age != 2) {
   42804:	68a3      	ldr	r3, [r4, #8]
   42806:	4283      	cmp	r3, r0
   42808:	dd01      	ble.n	4280e <coap_response_received+0x74>
   4280a:	2802      	cmp	r0, #2
   4280c:	d1df      	bne.n	427ce <coap_response_received+0x34>
			r->age = age;
   4280e:	60a0      	str	r0, [r4, #8]
   42810:	e7e6      	b.n	427e0 <coap_response_received+0x46>

00042812 <coap_reply_init>:
{
   42812:	b573      	push	{r0, r1, r4, r5, r6, lr}
   42814:	4604      	mov	r4, r0
	reply->id = coap_header_get_id(request);
   42816:	4608      	mov	r0, r1
{
   42818:	460d      	mov	r5, r1
	reply->id = coap_header_get_id(request);
   4281a:	f7ff fe9a 	bl	42552 <coap_header_get_id>
	tkl = coap_header_get_token(request, (u8_t *)&token);
   4281e:	4669      	mov	r1, sp
	reply->id = coap_header_get_id(request);
   42820:	81a0      	strh	r0, [r4, #12]
	tkl = coap_header_get_token(request, (u8_t *)&token);
   42822:	4628      	mov	r0, r5
   42824:	f7ff fe54 	bl	424d0 <coap_header_get_token>
	if (tkl > 0) {
   42828:	4606      	mov	r6, r0
   4282a:	b128      	cbz	r0, 42838 <coap_reply_init+0x26>
   4282c:	4602      	mov	r2, r0
   4282e:	4669      	mov	r1, sp
   42830:	f104 000e 	add.w	r0, r4, #14
   42834:	f002 fb0c 	bl	44e50 <memcpy>
	reply->tkl = tkl;
   42838:	75a6      	strb	r6, [r4, #22]
	age = get_observe_option(request);
   4283a:	4628      	mov	r0, r5
   4283c:	f7ff fe2a 	bl	42494 <get_observe_option>
	if (age == 0) {
   42840:	b908      	cbnz	r0, 42846 <coap_reply_init+0x34>
		reply->age = 2;
   42842:	2302      	movs	r3, #2
   42844:	60a3      	str	r3, [r4, #8]
}
   42846:	b002      	add	sp, #8
   42848:	bd70      	pop	{r4, r5, r6, pc}

0004284a <coap_reply_clear>:
__ssp_bos_icheck3(memset, void *, int)
   4284a:	2218      	movs	r2, #24
   4284c:	2100      	movs	r1, #0
   4284e:	f002 bb39 	b.w	44ec4 <memset>

00042852 <tls_credential_delete>:

	return ret;
}

int tls_credential_delete(sec_tag_t tag, enum tls_credential_type type)
{
   42852:	b538      	push	{r3, r4, r5, lr}
   42854:	460d      	mov	r5, r1
   42856:	4604      	mov	r4, r0
	struct tls_credential *credential;
	int ret = 0;

	credentials_lock();
   42858:	f7e2 fc3e 	bl	250d8 <credentials_lock>

	credential = credential_get(tag, type);
   4285c:	4629      	mov	r1, r5
   4285e:	4620      	mov	r0, r4
   42860:	f7e2 fc24 	bl	250ac <credential_get>

	if (!credential) {
   42864:	4605      	mov	r5, r0
   42866:	b148      	cbz	r0, 4287c <tls_credential_delete+0x2a>
		ret = -ENOENT;
		goto exit;
	}

	(void)memset(credential, 0, sizeof(struct tls_credential));
	credential->type = TLS_CREDENTIAL_NONE;
   42868:	2400      	movs	r4, #0
   4286a:	2210      	movs	r2, #16
   4286c:	2100      	movs	r1, #0
   4286e:	f002 fb29 	bl	44ec4 <memset>
   42872:	702c      	strb	r4, [r5, #0]

exit:
	credentials_unlock();
   42874:	f7e2 fc38 	bl	250e8 <credentials_unlock>

	return ret;
}
   42878:	4620      	mov	r0, r4
   4287a:	bd38      	pop	{r3, r4, r5, pc}
		ret = -ENOENT;
   4287c:	f06f 0401 	mvn.w	r4, #1
   42880:	e7f8      	b.n	42874 <tls_credential_delete+0x22>

00042882 <z_impl_flash_write_protection_set>:
						   bool enable)
{
	const struct flash_driver_api *api =
		(const struct flash_driver_api *)dev->driver_api;

	return api->write_protection(dev, enable);
   42882:	6843      	ldr	r3, [r0, #4]
   42884:	68db      	ldr	r3, [r3, #12]
   42886:	4718      	bx	r3

00042888 <get_sectors_cb>:
{
   42888:	b570      	push	{r4, r5, r6, lr}
	if (info->start_offset < data->area_off) {
   4288a:	6802      	ldr	r2, [r0, #0]
   4288c:	684c      	ldr	r4, [r1, #4]
   4288e:	42a2      	cmp	r2, r4
   42890:	d316      	bcc.n	428c0 <get_sectors_cb+0x38>
	} else if (info->start_offset >= data->area_off + data->area_len) {
   42892:	688b      	ldr	r3, [r1, #8]
   42894:	4423      	add	r3, r4
   42896:	429a      	cmp	r2, r3
   42898:	d206      	bcs.n	428a8 <get_sectors_cb+0x20>
	} else if (data->ret_idx >= data->ret_len) {
   4289a:	e9d1 3504 	ldrd	r3, r5, [r1, #16]
   4289e:	42ab      	cmp	r3, r5
   428a0:	d304      	bcc.n	428ac <get_sectors_cb+0x24>
		data->status = -ENOMEM;
   428a2:	f06f 030b 	mvn.w	r3, #11
   428a6:	618b      	str	r3, [r1, #24]
		*bail_value = false;
   428a8:	2000      	movs	r0, #0
   428aa:	e00a      	b.n	428c2 <get_sectors_cb+0x3a>
	ret[data->ret_idx].fs_off = info->start_offset - data->area_off;
   428ac:	68cd      	ldr	r5, [r1, #12]
   428ae:	1b12      	subs	r2, r2, r4
   428b0:	f845 2033 	str.w	r2, [r5, r3, lsl #3]
	ret[data->ret_idx].fs_size = info->size;
   428b4:	6842      	ldr	r2, [r0, #4]
	ret[data->ret_idx].fs_off = info->start_offset - data->area_off;
   428b6:	eb05 06c3 	add.w	r6, r5, r3, lsl #3
	data->ret_idx++;
   428ba:	3301      	adds	r3, #1
	ret[data->ret_idx].fs_size = info->size;
   428bc:	6072      	str	r2, [r6, #4]
	data->ret_idx++;
   428be:	610b      	str	r3, [r1, #16]
		*bail_value = true;
   428c0:	2001      	movs	r0, #1
}
   428c2:	bd70      	pop	{r4, r5, r6, pc}

000428c4 <flash_area_close>:
}
   428c4:	4770      	bx	lr

000428c6 <flash_area_read>:
#endif /* CONFIG_FLASH_PAGE_LAYOUT */

int flash_area_read(const struct flash_area *fa, off_t off, void *dst,
		    size_t len)
{
   428c6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   428ca:	461e      	mov	r6, r3
	struct device *dev;

	if (!is_in_flash_area_bounds(fa, off, len)) {
   428cc:	6883      	ldr	r3, [r0, #8]
{
   428ce:	4605      	mov	r5, r0
	return (off <= fa->fa_size && off + len <= fa->fa_size);
   428d0:	428b      	cmp	r3, r1
{
   428d2:	460c      	mov	r4, r1
   428d4:	4617      	mov	r7, r2
	return (off <= fa->fa_size && off + len <= fa->fa_size);
   428d6:	d30f      	bcc.n	428f8 <flash_area_read+0x32>
   428d8:	1872      	adds	r2, r6, r1
   428da:	4293      	cmp	r3, r2
   428dc:	d30c      	bcc.n	428f8 <flash_area_read+0x32>
		return -EINVAL;
	}

	dev = device_get_binding(fa->fa_dev_name);
   428de:	68c0      	ldr	r0, [r0, #12]
   428e0:	f7f8 fbd2 	bl	3b088 <z_impl_device_get_binding>

	return flash_read(dev, fa->fa_off + off, dst, len);
   428e4:	6869      	ldr	r1, [r5, #4]
   428e6:	4421      	add	r1, r4
	return api->read(dev, offset, data, len);
   428e8:	6843      	ldr	r3, [r0, #4]
   428ea:	463a      	mov	r2, r7
   428ec:	681c      	ldr	r4, [r3, #0]
   428ee:	4633      	mov	r3, r6
   428f0:	46a4      	mov	ip, r4
}
   428f2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   428f6:	4760      	bx	ip
   428f8:	f06f 0015 	mvn.w	r0, #21
   428fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00042900 <flash_area_write>:

int flash_area_write(const struct flash_area *fa, off_t off, const void *src,
		     size_t len)
{
   42900:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   42904:	4698      	mov	r8, r3
	struct device *flash_dev;
	int rc;

	if (!is_in_flash_area_bounds(fa, off, len)) {
   42906:	6883      	ldr	r3, [r0, #8]
{
   42908:	4607      	mov	r7, r0
	return (off <= fa->fa_size && off + len <= fa->fa_size);
   4290a:	428b      	cmp	r3, r1
{
   4290c:	460d      	mov	r5, r1
   4290e:	4691      	mov	r9, r2
	return (off <= fa->fa_size && off + len <= fa->fa_size);
   42910:	d31c      	bcc.n	4294c <flash_area_write+0x4c>
   42912:	eb08 0201 	add.w	r2, r8, r1
   42916:	4293      	cmp	r3, r2
   42918:	d318      	bcc.n	4294c <flash_area_write+0x4c>
		return -EINVAL;
	}

	flash_dev = device_get_binding(fa->fa_dev_name);
   4291a:	68c0      	ldr	r0, [r0, #12]
   4291c:	f7f8 fbb4 	bl	3b088 <z_impl_device_get_binding>
   42920:	4606      	mov	r6, r0
	return z_impl_flash_write_protection_set(dev, enable);
   42922:	2100      	movs	r1, #0
   42924:	f7ff ffad 	bl	42882 <z_impl_flash_write_protection_set>

	rc = flash_write_protection_set(flash_dev, false);
	if (rc) {
   42928:	4604      	mov	r4, r0
   4292a:	b960      	cbnz	r0, 42946 <flash_area_write+0x46>
		return rc;
	}

	rc = flash_write(flash_dev, fa->fa_off + off, (void *)src, len);
   4292c:	6879      	ldr	r1, [r7, #4]
   4292e:	4429      	add	r1, r5
	return api->write(dev, offset, data, len);
   42930:	6873      	ldr	r3, [r6, #4]
   42932:	464a      	mov	r2, r9
   42934:	685c      	ldr	r4, [r3, #4]
   42936:	4630      	mov	r0, r6
   42938:	4643      	mov	r3, r8
   4293a:	47a0      	blx	r4
   4293c:	4604      	mov	r4, r0
   4293e:	2101      	movs	r1, #1
   42940:	4630      	mov	r0, r6
   42942:	f7ff ff9e 	bl	42882 <z_impl_flash_write_protection_set>

	/* Ignore errors here - this does not affect write operation */
	(void) flash_write_protection_set(flash_dev, true);

	return rc;
}
   42946:	4620      	mov	r0, r4
   42948:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		return -EINVAL;
   4294c:	f06f 0415 	mvn.w	r4, #21
   42950:	e7f9      	b.n	42946 <flash_area_write+0x46>

00042952 <flash_area_erase>:
int flash_area_erase(const struct flash_area *fa, off_t off, size_t len)
{
	struct device *flash_dev;
	int rc;

	if (!is_in_flash_area_bounds(fa, off, len)) {
   42952:	6883      	ldr	r3, [r0, #8]
{
   42954:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	return (off <= fa->fa_size && off + len <= fa->fa_size);
   42958:	428b      	cmp	r3, r1
{
   4295a:	4607      	mov	r7, r0
   4295c:	460d      	mov	r5, r1
   4295e:	4690      	mov	r8, r2
	return (off <= fa->fa_size && off + len <= fa->fa_size);
   42960:	d31a      	bcc.n	42998 <flash_area_erase+0x46>
   42962:	440a      	add	r2, r1
   42964:	4293      	cmp	r3, r2
   42966:	d317      	bcc.n	42998 <flash_area_erase+0x46>
		return -EINVAL;
	}

	flash_dev = device_get_binding(fa->fa_dev_name);
   42968:	68c0      	ldr	r0, [r0, #12]
   4296a:	f7f8 fb8d 	bl	3b088 <z_impl_device_get_binding>
   4296e:	4606      	mov	r6, r0
   42970:	2100      	movs	r1, #0
   42972:	f7ff ff86 	bl	42882 <z_impl_flash_write_protection_set>

	rc = flash_write_protection_set(flash_dev, false);
	if (rc) {
   42976:	4604      	mov	r4, r0
   42978:	b958      	cbnz	r0, 42992 <flash_area_erase+0x40>
		return rc;
	}

	rc = flash_erase(flash_dev, fa->fa_off + off, len);
   4297a:	6879      	ldr	r1, [r7, #4]
   4297c:	4429      	add	r1, r5
	return api->erase(dev, offset, size);
   4297e:	6873      	ldr	r3, [r6, #4]
   42980:	4642      	mov	r2, r8
   42982:	689b      	ldr	r3, [r3, #8]
   42984:	4630      	mov	r0, r6
   42986:	4798      	blx	r3
   42988:	4604      	mov	r4, r0
   4298a:	2101      	movs	r1, #1
   4298c:	4630      	mov	r0, r6
   4298e:	f7ff ff78 	bl	42882 <z_impl_flash_write_protection_set>

	/* Ignore errors here - this does not affect write operation */
	(void) flash_write_protection_set(flash_dev, true);

	return rc;
}
   42992:	4620      	mov	r0, r4
   42994:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -EINVAL;
   42998:	f06f 0415 	mvn.w	r4, #21
   4299c:	e7f9      	b.n	42992 <flash_area_erase+0x40>

0004299e <flash_area_align>:

u8_t flash_area_align(const struct flash_area *fa)
{
   4299e:	b508      	push	{r3, lr}
	struct device *dev;

	dev = device_get_binding(fa->fa_dev_name);
   429a0:	68c0      	ldr	r0, [r0, #12]
   429a2:	f7f8 fb71 	bl	3b088 <z_impl_device_get_binding>
static inline size_t z_impl_flash_get_write_block_size(struct device *dev)
{
	const struct flash_driver_api *api =
		(const struct flash_driver_api *)dev->driver_api;

	return api->write_block_size;
   429a6:	6843      	ldr	r3, [r0, #4]

	return flash_get_write_block_size(dev);
}
   429a8:	7d18      	ldrb	r0, [r3, #20]
   429aa:	bd08      	pop	{r3, pc}

000429ac <flash_area_get_device>:
	return 1;
}

struct device *flash_area_get_device(const struct flash_area *fa)
{
	return device_get_binding(fa->fa_dev_name);
   429ac:	68c0      	ldr	r0, [r0, #12]
   429ae:	f7f8 bb6b 	b.w	3b088 <z_impl_device_get_binding>

000429b2 <settings_load>:
	return settings_load_subtree(NULL);
   429b2:	2000      	movs	r0, #0
   429b4:	f7e2 bc5e 	b.w	25274 <settings_load_subtree>

000429b8 <settings_name_steq>:
{
   429b8:	b530      	push	{r4, r5, lr}
	if (next) {
   429ba:	b10a      	cbz	r2, 429c0 <settings_name_steq+0x8>
		*next = NULL;
   429bc:	2300      	movs	r3, #0
   429be:	6013      	str	r3, [r2, #0]
	if ((!name) || (!key)) {
   429c0:	b190      	cbz	r0, 429e8 <settings_name_steq+0x30>
   429c2:	b151      	cbz	r1, 429da <settings_name_steq+0x22>
   429c4:	1e4d      	subs	r5, r1, #1
	while ((*key != '\0') && (*key == *name) &&
   429c6:	f815 4f01 	ldrb.w	r4, [r5, #1]!
   429ca:	4603      	mov	r3, r0
   429cc:	f810 1b01 	ldrb.w	r1, [r0], #1
   429d0:	b15c      	cbz	r4, 429ea <settings_name_steq+0x32>
   429d2:	428c      	cmp	r4, r1
   429d4:	d101      	bne.n	429da <settings_name_steq+0x22>
	       (*name != '\0') && (*name != SETTINGS_NAME_END)) {
   429d6:	2c3d      	cmp	r4, #61	; 0x3d
   429d8:	d1f5      	bne.n	429c6 <settings_name_steq+0xe>
	return 0;
   429da:	2000      	movs	r0, #0
   429dc:	e004      	b.n	429e8 <settings_name_steq+0x30>
	if ((*name == SETTINGS_NAME_END) || (*name == '\0')) {
   429de:	293d      	cmp	r1, #61	; 0x3d
   429e0:	d008      	beq.n	429f4 <settings_name_steq+0x3c>
   429e2:	fab1 f081 	clz	r0, r1
   429e6:	0940      	lsrs	r0, r0, #5
}
   429e8:	bd30      	pop	{r4, r5, pc}
	if (*name == SETTINGS_NAME_SEPARATOR) {
   429ea:	292f      	cmp	r1, #47	; 0x2f
   429ec:	d1f7      	bne.n	429de <settings_name_steq+0x26>
		if (next) {
   429ee:	b10a      	cbz	r2, 429f4 <settings_name_steq+0x3c>
			*next = name + 1;
   429f0:	3301      	adds	r3, #1
   429f2:	6013      	str	r3, [r2, #0]
		return 1;
   429f4:	2001      	movs	r0, #1
   429f6:	e7f7      	b.n	429e8 <settings_name_steq+0x30>

000429f8 <settings_name_next>:
{
   429f8:	b530      	push	{r4, r5, lr}
   429fa:	4603      	mov	r3, r0
	if (next) {
   429fc:	b109      	cbz	r1, 42a02 <settings_name_next+0xa>
		*next = NULL;
   429fe:	2200      	movs	r2, #0
   42a00:	600a      	str	r2, [r1, #0]
	if (!name) {
   42a02:	b16b      	cbz	r3, 42a20 <settings_name_next+0x28>
   42a04:	461a      	mov	r2, r3
   42a06:	4614      	mov	r4, r2
   42a08:	1ad0      	subs	r0, r2, r3
	while ((*name != '\0') && (*name != SETTINGS_NAME_END) &&
   42a0a:	f812 5b01 	ldrb.w	r5, [r2], #1
   42a0e:	b135      	cbz	r5, 42a1e <settings_name_next+0x26>
   42a10:	2d3d      	cmp	r5, #61	; 0x3d
   42a12:	d004      	beq.n	42a1e <settings_name_next+0x26>
   42a14:	2d2f      	cmp	r5, #47	; 0x2f
   42a16:	d1f6      	bne.n	42a06 <settings_name_next+0xe>
		if (next) {
   42a18:	b109      	cbz	r1, 42a1e <settings_name_next+0x26>
			*next = name + 1;
   42a1a:	3401      	adds	r4, #1
   42a1c:	600c      	str	r4, [r1, #0]
}
   42a1e:	bd30      	pop	{r4, r5, pc}
		return 0;
   42a20:	4618      	mov	r0, r3
   42a22:	e7fc      	b.n	42a1e <settings_name_next+0x26>

00042a24 <settings_line_len_calc>:
{
   42a24:	b510      	push	{r4, lr}
   42a26:	460c      	mov	r4, r1
	len += strlen(name) + 1;
   42a28:	f7da fb76 	bl	1d118 <strlen>
   42a2c:	3401      	adds	r4, #1
}
   42a2e:	4420      	add	r0, r4
   42a30:	bd10      	pop	{r4, pc}

00042a32 <settings_line_raw_read>:
{
   42a32:	b513      	push	{r0, r1, r4, lr}
	return settings_line_raw_read_until(seek, out, len_req, len_read,
   42a34:	9c04      	ldr	r4, [sp, #16]
   42a36:	9401      	str	r4, [sp, #4]
   42a38:	2400      	movs	r4, #0
   42a3a:	9400      	str	r4, [sp, #0]
   42a3c:	f7e2 fdbc 	bl	255b8 <settings_line_raw_read_until>
}
   42a40:	b002      	add	sp, #8
   42a42:	bd10      	pop	{r4, pc}

00042a44 <settings_line_read_cb>:
{
   42a44:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	return settings_line_raw_read(val_off + off, out, len_req, len_read,
   42a46:	6803      	ldr	r3, [r0, #0]
   42a48:	9300      	str	r3, [sp, #0]
   42a4a:	6840      	ldr	r0, [r0, #4]
   42a4c:	ab03      	add	r3, sp, #12
   42a4e:	f7ff fff0 	bl	42a32 <settings_line_raw_read>
	if (rc == 0) {
   42a52:	b918      	cbnz	r0, 42a5c <settings_line_read_cb+0x18>
		return len_read;
   42a54:	9803      	ldr	r0, [sp, #12]
}
   42a56:	b005      	add	sp, #20
   42a58:	f85d fb04 	ldr.w	pc, [sp], #4
	return -1;
   42a5c:	f04f 30ff 	mov.w	r0, #4294967295
   42a60:	e7f9      	b.n	42a56 <settings_line_read_cb+0x12>

00042a62 <settings_line_name_read>:
{
   42a62:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	char const until_char = '=';
   42a64:	243d      	movs	r4, #61	; 0x3d
	return settings_line_raw_read_until(0, out, len_req, len_read,
   42a66:	9301      	str	r3, [sp, #4]
   42a68:	f10d 030f 	add.w	r3, sp, #15
   42a6c:	9300      	str	r3, [sp, #0]
   42a6e:	4613      	mov	r3, r2
   42a70:	460a      	mov	r2, r1
   42a72:	4601      	mov	r1, r0
   42a74:	2000      	movs	r0, #0
	char const until_char = '=';
   42a76:	f88d 400f 	strb.w	r4, [sp, #15]
	return settings_line_raw_read_until(0, out, len_req, len_read,
   42a7a:	f7e2 fd9d 	bl	255b8 <settings_line_raw_read_until>
}
   42a7e:	b004      	add	sp, #16
   42a80:	bd10      	pop	{r4, pc}

00042a82 <settings_line_dup_check_cb>:
{
   42a82:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   42a86:	4689      	mov	r9, r1
   42a88:	b088      	sub	sp, #32
	if (strcmp(name, cdca->name)) {
   42a8a:	6819      	ldr	r1, [r3, #0]
{
   42a8c:	4692      	mov	sl, r2
   42a8e:	461c      	mov	r4, r3
	if (strcmp(name, cdca->name)) {
   42a90:	f7da fb38 	bl	1d104 <strcmp>
   42a94:	4606      	mov	r6, r0
   42a96:	b940      	cbnz	r0, 42aaa <settings_line_dup_check_cb+0x28>
	len_read = settings_line_val_get_len(off, val_read_cb_ctx);
   42a98:	4649      	mov	r1, r9
   42a9a:	4650      	mov	r0, sl
   42a9c:	f7e2 fe4a 	bl	25734 <settings_line_val_get_len>
	if (len_read != cdca->val_len) {
   42aa0:	68a3      	ldr	r3, [r4, #8]
	len_read = settings_line_val_get_len(off, val_read_cb_ctx);
   42aa2:	4605      	mov	r5, r0
	if (len_read != cdca->val_len) {
   42aa4:	4283      	cmp	r3, r0
   42aa6:	d004      	beq.n	42ab2 <settings_line_dup_check_cb+0x30>
		cdca->is_dup = 0;
   42aa8:	60e6      	str	r6, [r4, #12]
}
   42aaa:	2000      	movs	r0, #0
   42aac:	b008      	add	sp, #32
   42aae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	} else if (len_read == 0) {
   42ab2:	b913      	cbnz	r3, 42aba <settings_line_dup_check_cb+0x38>
			cdca->is_dup = 1;
   42ab4:	2301      	movs	r3, #1
			cdca->is_dup = 0;
   42ab6:	60e3      	str	r3, [r4, #12]
   42ab8:	e7f7      	b.n	42aaa <settings_line_dup_check_cb+0x28>
		if (!settings_line_cmp(cdca->val, cdca->val_len,
   42aba:	f8d4 8004 	ldr.w	r8, [r4, #4]
		len_read = exp_len = MIN(sizeof(buf), rem);
   42abe:	2d10      	cmp	r5, #16
   42ac0:	462f      	mov	r7, r5
   42ac2:	bf28      	it	cs
   42ac4:	2710      	movcs	r7, #16
	return settings_line_raw_read(val_off + off, out, len_req, len_read,
   42ac6:	f8cd 9000 	str.w	r9, [sp]
   42aca:	ab03      	add	r3, sp, #12
   42acc:	463a      	mov	r2, r7
   42ace:	a904      	add	r1, sp, #16
   42ad0:	eb0a 0006 	add.w	r0, sl, r6
		len_read = exp_len = MIN(sizeof(buf), rem);
   42ad4:	9703      	str	r7, [sp, #12]
	return settings_line_raw_read(val_off + off, out, len_req, len_read,
   42ad6:	f7ff ffac 	bl	42a32 <settings_line_raw_read>
		if (rc) {
   42ada:	b970      	cbnz	r0, 42afa <settings_line_dup_check_cb+0x78>
		if (len_read != exp_len) {
   42adc:	9b03      	ldr	r3, [sp, #12]
   42ade:	429f      	cmp	r7, r3
   42ae0:	d10b      	bne.n	42afa <settings_line_dup_check_cb+0x78>
		rc = memcmp(val, buf, len_read);
   42ae2:	463a      	mov	r2, r7
   42ae4:	a904      	add	r1, sp, #16
   42ae6:	4640      	mov	r0, r8
   42ae8:	f002 f9a4 	bl	44e34 <memcmp>
		if (rc) {
   42aec:	b928      	cbnz	r0, 42afa <settings_line_dup_check_cb+0x78>
		val += len_read;
   42aee:	9b03      	ldr	r3, [sp, #12]
	for (rem = val_len; rem > 0; rem -= len_read) {
   42af0:	1aed      	subs	r5, r5, r3
		val += len_read;
   42af2:	4498      	add	r8, r3
		off += len_read;
   42af4:	441e      	add	r6, r3
	for (rem = val_len; rem > 0; rem -= len_read) {
   42af6:	d1e2      	bne.n	42abe <settings_line_dup_check_cb+0x3c>
   42af8:	e7dc      	b.n	42ab4 <settings_line_dup_check_cb+0x32>
			cdca->is_dup = 0;
   42afa:	2300      	movs	r3, #0
   42afc:	e7db      	b.n	42ab6 <settings_line_dup_check_cb+0x34>

00042afe <get_len_cb>:
}
   42afe:	8980      	ldrh	r0, [r0, #12]
   42b00:	4770      	bx	lr

00042b02 <write_handler>:
{
   42b02:	b430      	push	{r4, r5}
				FCB_ENTRY_FA_DATA_OFF(entry_ctx->loc) + off,
   42b04:	6805      	ldr	r5, [r0, #0]
   42b06:	6884      	ldr	r4, [r0, #8]
	return flash_area_write(entry_ctx->fap,
   42b08:	6900      	ldr	r0, [r0, #16]
				FCB_ENTRY_FA_DATA_OFF(entry_ctx->loc) + off,
   42b0a:	4421      	add	r1, r4
   42b0c:	682c      	ldr	r4, [r5, #0]
	return flash_area_write(entry_ctx->fap,
   42b0e:	4421      	add	r1, r4
}
   42b10:	bc30      	pop	{r4, r5}
	return flash_area_write(entry_ctx->fap,
   42b12:	f7ff bef5 	b.w	42900 <flash_area_write>

00042b16 <read_handler>:
{
   42b16:	b430      	push	{r4, r5}
	if (off >= entry_ctx->loc.fe_data_len) {
   42b18:	8984      	ldrh	r4, [r0, #12]
   42b1a:	428c      	cmp	r4, r1
   42b1c:	dd0f      	ble.n	42b3e <read_handler+0x28>
	if ((off + *len) > entry_ctx->loc.fe_data_len) {
   42b1e:	681d      	ldr	r5, [r3, #0]
   42b20:	440d      	add	r5, r1
   42b22:	42a5      	cmp	r5, r4
		*len = entry_ctx->loc.fe_data_len - off;
   42b24:	bf84      	itt	hi
   42b26:	1a64      	subhi	r4, r4, r1
   42b28:	601c      	strhi	r4, [r3, #0]
			       FCB_ENTRY_FA_DATA_OFF(entry_ctx->loc) + off, buf,
   42b2a:	6804      	ldr	r4, [r0, #0]
   42b2c:	6885      	ldr	r5, [r0, #8]
   42b2e:	6824      	ldr	r4, [r4, #0]
   42b30:	4429      	add	r1, r5
	return flash_area_read(entry_ctx->fap,
   42b32:	4421      	add	r1, r4
   42b34:	681b      	ldr	r3, [r3, #0]
   42b36:	6900      	ldr	r0, [r0, #16]
}
   42b38:	bc30      	pop	{r4, r5}
	return flash_area_read(entry_ctx->fap,
   42b3a:	f7ff bec4 	b.w	428c6 <flash_area_read>
		*len = 0;
   42b3e:	2000      	movs	r0, #0
}
   42b40:	bc30      	pop	{r4, r5}
		*len = 0;
   42b42:	6018      	str	r0, [r3, #0]
}
   42b44:	4770      	bx	lr

00042b46 <clkstarted_handle>:
{
   42b46:	b538      	push	{r3, r4, r5, lr}
	sub_data->started = true;
   42b48:	240c      	movs	r4, #12
	struct nrf_clock_control_sub_data *sub_data = get_sub_data(dev, type);
   42b4a:	6883      	ldr	r3, [r0, #8]
{
   42b4c:	4605      	mov	r5, r0
	sub_data->started = true;
   42b4e:	fb04 3401 	mla	r4, r4, r1, r3
   42b52:	2301      	movs	r3, #1
   42b54:	7263      	strb	r3, [r4, #9]
	__asm__ volatile(
   42b56:	f04f 0320 	mov.w	r3, #32
   42b5a:	f3ef 8111 	mrs	r1, BASEPRI
   42b5e:	f383 8811 	msr	BASEPRI, r3
   42b62:	f3bf 8f6f 	isb	sy
Z_GENLIST_IS_EMPTY(slist)
   42b66:	6823      	ldr	r3, [r4, #0]
Z_GENLIST_GET(slist, snode)
   42b68:	b12b      	cbz	r3, 42b76 <clkstarted_handle+0x30>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   42b6a:	6860      	ldr	r0, [r4, #4]
   42b6c:	681a      	ldr	r2, [r3, #0]
   42b6e:	4283      	cmp	r3, r0
	list->head = node;
   42b70:	6022      	str	r2, [r4, #0]
	list->tail = node;
   42b72:	bf08      	it	eq
   42b74:	6062      	streq	r2, [r4, #4]
	__asm__ volatile(
   42b76:	f381 8811 	msr	BASEPRI, r1
   42b7a:	f3bf 8f6f 	isb	sy
	while ((async_data = list_get(&sub_data->list)) != NULL) {
   42b7e:	b903      	cbnz	r3, 42b82 <clkstarted_handle+0x3c>
}
   42b80:	bd38      	pop	{r3, r4, r5, pc}
		async_data->cb(dev, async_data->user_data);
   42b82:	e9d3 2101 	ldrd	r2, r1, [r3, #4]
   42b86:	4628      	mov	r0, r5
   42b88:	4790      	blx	r2
   42b8a:	e7e4      	b.n	42b56 <clkstarted_handle+0x10>

00042b8c <clock_start>:
	return clock_async_start(dev, sub_system, NULL);
   42b8c:	2200      	movs	r2, #0
   42b8e:	f7e3 b8bb 	b.w	25d08 <clock_async_start>

00042b92 <z_clock_idle_exit>:
{
}

void __weak z_clock_idle_exit(void)
{
}
   42b92:	4770      	bx	lr

00042b94 <sys_clock_disable>:
   42b94:	4770      	bx	lr

00042b96 <z_irq_spurious>:
	z_arm_reserved();
   42b96:	f7e3 bcc9 	b.w	2652c <z_arm_bus_fault>

00042b9a <z_do_kernel_oops>:
 *   fault handler will executed insted of the SVC.
 *
 * @param esf exception frame
 */
void z_do_kernel_oops(const z_arch_esf_t *esf)
{
   42b9a:	4601      	mov	r1, r0
			reason = K_ERR_KERNEL_OOPS;
		}
	}

#endif /* CONFIG_USERSPACE */
	z_arm_fatal_error(reason, esf);
   42b9c:	6800      	ldr	r0, [r0, #0]
   42b9e:	f7e3 bdd9 	b.w	26754 <z_arm_fatal_error>

00042ba2 <z_arm_nmi>:
 *
 * @return N/A
 */

void z_arm_nmi(void)
{
   42ba2:	b508      	push	{r3, lr}
	handler();
   42ba4:	f7e3 fccc 	bl	26540 <z_SysNmiOnReset>
	z_arm_exc_exit();
}
   42ba8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_arm_exc_exit();
   42bac:	f7e3 bc3c 	b.w	26428 <z_arm_exc_exit>

00042bb0 <z_arm_configure_dynamic_mpu_regions>:
 *
 * For some MPU architectures, such as the unmodified ARMv8-M MPU,
 * the function must execute with MPU enabled.
 */
void z_arm_configure_dynamic_mpu_regions(struct k_thread *thread)
{
   42bb0:	b507      	push	{r0, r1, r2, lr}

	region_num++;
#endif /* CONFIG_MPU_STACK_GUARD */

	/* Configure the dynamic MPU regions */
	arm_core_mpu_configure_dynamic_mpu_regions(
   42bb2:	2100      	movs	r1, #0
   42bb4:	a801      	add	r0, sp, #4
   42bb6:	f7e4 fced 	bl	27594 <arm_core_mpu_configure_dynamic_mpu_regions>
		(const struct k_mem_partition **)dynamic_regions,
		region_num);
}
   42bba:	b003      	add	sp, #12
   42bbc:	f85d fb04 	ldr.w	pc, [sp], #4

00042bc0 <mpu_configure_region>:
{
   42bc0:	b530      	push	{r4, r5, lr}
	get_region_attr_from_k_mem_partition_info(&region_conf.attr,
   42bc2:	684b      	ldr	r3, [r1, #4]
{
   42bc4:	b085      	sub	sp, #20
	region_conf.base = new_region->start;
   42bc6:	680c      	ldr	r4, [r1, #0]
	p_attr->rbar = attr->rbar &
   42bc8:	f89d 2008 	ldrb.w	r2, [sp, #8]
   42bcc:	890d      	ldrh	r5, [r1, #8]
   42bce:	9400      	str	r4, [sp, #0]
	p_attr->mair_idx = attr->mair_idx;
   42bd0:	8949      	ldrh	r1, [r1, #10]
	p_attr->r_limit = REGION_LIMIT_ADDR(base, size);
   42bd2:	f024 041f 	bic.w	r4, r4, #31
   42bd6:	3b01      	subs	r3, #1
   42bd8:	4423      	add	r3, r4
	p_attr->rbar = attr->rbar &
   42bda:	f365 0204 	bfi	r2, r5, #0, #5
	p_attr->mair_idx = attr->mair_idx;
   42bde:	f361 1247 	bfi	r2, r1, #5, #3
	p_attr->r_limit = REGION_LIMIT_ADDR(base, size);
   42be2:	f023 031f 	bic.w	r3, r3, #31
	if (index > (get_num_regions() - 1)) {
   42be6:	280f      	cmp	r0, #15
	p_attr->mair_idx = attr->mair_idx;
   42be8:	f88d 2008 	strb.w	r2, [sp, #8]
	p_attr->r_limit = REGION_LIMIT_ADDR(base, size);
   42bec:	9303      	str	r3, [sp, #12]
   42bee:	4604      	mov	r4, r0
   42bf0:	d905      	bls.n	42bfe <mpu_configure_region+0x3e>
   42bf2:	f7e4 fad9 	bl	271a8 <region_allocate_and_init.part.0>
   42bf6:	4604      	mov	r4, r0
}
   42bf8:	4620      	mov	r0, r4
   42bfa:	b005      	add	sp, #20
   42bfc:	bd30      	pop	{r4, r5, pc}
	region_init(index, region_conf);
   42bfe:	4669      	mov	r1, sp
   42c00:	f7e4 faba 	bl	27178 <region_init>
	return region_allocate_and_init(index,
   42c04:	e7f8      	b.n	42bf8 <mpu_configure_region+0x38>

00042c06 <arm_cmse_mpu_region_get>:
__CMSE_TT_ASM ()

__extension__ static __inline __attribute__ ((__always_inline__))
cmse_address_info_t
cmse_TT (void *__p)
__CMSE_TT_ASM ()
   42c06:	e840 f300 	tt	r3, r0

int arm_cmse_mpu_region_get(u32_t addr)
{
	cmse_address_info_t addr_info =	cmse_TT((void *)addr);

	if (addr_info.flags.mpu_region_valid) {
   42c0a:	f413 3f80 	tst.w	r3, #65536	; 0x10000
   42c0e:	b2d8      	uxtb	r0, r3
		return addr_info.flags.mpu_region;
	}

	return -EINVAL;
}
   42c10:	bf08      	it	eq
   42c12:	f06f 0015 	mvneq.w	r0, #21
   42c16:	4770      	bx	lr

00042c18 <_stdout_hook_default>:
}
   42c18:	f04f 30ff 	mov.w	r0, #4294967295
   42c1c:	4770      	bx	lr

00042c1e <_stdin_hook_default>:
}
   42c1e:	2000      	movs	r0, #0
   42c20:	4770      	bx	lr

00042c22 <_read>:
{
   42c22:	4608      	mov	r0, r1
	return z_impl_zephyr_read_stdin(buf, nbytes);
   42c24:	4611      	mov	r1, r2
   42c26:	f7e4 bcf7 	b.w	27618 <z_impl_zephyr_read_stdin>

00042c2a <_write>:
{
   42c2a:	4608      	mov	r0, r1
	return z_impl_zephyr_write_stdout(buf, nbytes);
   42c2c:	4611      	mov	r1, r2
   42c2e:	f7e4 bd07 	b.w	27640 <z_impl_zephyr_write_stdout>

00042c32 <_close>:
   42c32:	f04f 30ff 	mov.w	r0, #4294967295
   42c36:	4770      	bx	lr

00042c38 <_lseek>:
}
   42c38:	2000      	movs	r0, #0
   42c3a:	4770      	bx	lr

00042c3c <_isatty>:
}
   42c3c:	2001      	movs	r0, #1
   42c3e:	4770      	bx	lr

00042c40 <_kill>:
}
   42c40:	2000      	movs	r0, #0
   42c42:	4770      	bx	lr

00042c44 <_getpid>:
}
   42c44:	2000      	movs	r0, #0
   42c46:	4770      	bx	lr

00042c48 <_fstat>:
	st->st_mode = S_IFCHR;
   42c48:	f44f 5300 	mov.w	r3, #8192	; 0x2000
}
   42c4c:	2000      	movs	r0, #0
	st->st_mode = S_IFCHR;
   42c4e:	604b      	str	r3, [r1, #4]
}
   42c50:	4770      	bx	lr

00042c52 <__errno>:
	if (z_syscall_trap()) {
		return (int *) arch_syscall_invoke0(K_SYSCALL_Z_ERRNO);
	}
#endif
	compiler_barrier();
	return z_impl_z_errno();
   42c52:	f7f8 ba3f 	b.w	3b0d4 <z_impl_z_errno>

00042c56 <net_init>:

	return status;
}

static int net_init(struct device *unused)
{
   42c56:	b508      	push	{r3, lr}
	net_if_init();
   42c58:	f7e4 fe06 	bl	27868 <net_if_init>
	net_if_post_init();
   42c5c:	f7e4 fe18 	bl	27890 <net_if_post_init>
	net_coap_init();
   42c60:	f7e2 f9de 	bl	25020 <net_coap_init>
	net_shell_init();
   42c64:	f000 f91a 	bl	42e9c <net_shell_init>
	net_mgmt_event_init();

	init_rx_queues();

	return services_init();
}
   42c68:	2000      	movs	r0, #0
   42c6a:	bd08      	pop	{r3, pc}

00042c6c <net_if_l2>:
	if (!iface || !iface->if_dev) {
   42c6c:	b110      	cbz	r0, 42c74 <net_if_l2+0x8>
   42c6e:	6800      	ldr	r0, [r0, #0]
   42c70:	b100      	cbz	r0, 42c74 <net_if_l2+0x8>
	return iface->if_dev->l2;
   42c72:	6840      	ldr	r0, [r0, #4]
}
   42c74:	4770      	bx	lr

00042c76 <l2_flags_get>:
{
   42c76:	b510      	push	{r4, lr}
   42c78:	4602      	mov	r2, r0
	if (net_if_l2(iface) && net_if_l2(iface)->get_flags) {
   42c7a:	f7ff fff7 	bl	42c6c <net_if_l2>
   42c7e:	b128      	cbz	r0, 42c8c <l2_flags_get+0x16>
   42c80:	68c3      	ldr	r3, [r0, #12]
   42c82:	b11b      	cbz	r3, 42c8c <l2_flags_get+0x16>
}
   42c84:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		flags = net_if_l2(iface)->get_flags(iface);
   42c88:	4610      	mov	r0, r2
   42c8a:	4718      	bx	r3
}
   42c8c:	2000      	movs	r0, #0
   42c8e:	bd10      	pop	{r4, pc}

00042c90 <net_if_down>:
{
   42c90:	b510      	push	{r4, lr}
   42c92:	4604      	mov	r4, r0
	if (!net_if_l2(iface) || !net_if_l2(iface)->enable) {
   42c94:	f7ff ffea 	bl	42c6c <net_if_l2>
   42c98:	b928      	cbnz	r0, 42ca6 <net_if_down+0x16>
	net_if_flag_clear(iface, NET_IF_UP);
   42c9a:	4620      	mov	r0, r4
   42c9c:	2100      	movs	r1, #0
   42c9e:	f7e4 fd35 	bl	2770c <net_if_flag_clear>
	return 0;
   42ca2:	2000      	movs	r0, #0
}
   42ca4:	bd10      	pop	{r4, pc}
	if (!net_if_l2(iface) || !net_if_l2(iface)->enable) {
   42ca6:	6883      	ldr	r3, [r0, #8]
   42ca8:	2b00      	cmp	r3, #0
   42caa:	d0f6      	beq.n	42c9a <net_if_down+0xa>
	status = net_if_l2(iface)->enable(iface, false);
   42cac:	2100      	movs	r1, #0
   42cae:	4620      	mov	r0, r4
   42cb0:	4798      	blx	r3
	if (status < 0) {
   42cb2:	2800      	cmp	r0, #0
   42cb4:	daf1      	bge.n	42c9a <net_if_down+0xa>
   42cb6:	e7f5      	b.n	42ca4 <net_if_down+0x14>

00042cb8 <z_impl_net_addr_pton>:
#endif /* CONFIG_USERSPACE */

int z_impl_net_addr_pton(sa_family_t family, const char *src,
			 void *dst)
{
	if (family == AF_INET) {
   42cb8:	2801      	cmp	r0, #1
{
   42cba:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   42cbe:	460c      	mov	r4, r1
   42cc0:	4616      	mov	r6, r2
	if (family == AF_INET) {
   42cc2:	d126      	bne.n	42d12 <z_impl_net_addr_pton+0x5a>
		struct in_addr *addr = (struct in_addr *)dst;
		size_t i, len;

		len = strlen(src);
   42cc4:	4608      	mov	r0, r1
   42cc6:	f7da fa27 	bl	1d118 <strlen>
		for (i = 0; i < len; i++) {
   42cca:	4623      	mov	r3, r4
   42ccc:	4420      	add	r0, r4
   42cce:	4298      	cmp	r0, r3
   42cd0:	d112      	bne.n	42cf8 <z_impl_net_addr_pton+0x40>
   42cd2:	4635      	mov	r5, r6
   42cd4:	2300      	movs	r3, #0
   42cd6:	3603      	adds	r6, #3
   42cd8:	f845 3901 	str.w	r3, [r5], #-1
		(void)memset(addr, 0, sizeof(struct in_addr));

		for (i = 0; i < sizeof(struct in_addr); i++) {
			char *endptr;

			addr->s4_addr[i] = strtol(src, &endptr, 10);
   42cdc:	4620      	mov	r0, r4
   42cde:	220a      	movs	r2, #10
   42ce0:	a901      	add	r1, sp, #4
   42ce2:	f7fc fbfb 	bl	3f4dc <strtol>

			src = ++endptr;
   42ce6:	9c01      	ldr	r4, [sp, #4]
			addr->s4_addr[i] = strtol(src, &endptr, 10);
   42ce8:	f805 0f01 	strb.w	r0, [r5, #1]!
		for (i = 0; i < sizeof(struct in_addr); i++) {
   42cec:	42ae      	cmp	r6, r5
			src = ++endptr;
   42cee:	f104 0401 	add.w	r4, r4, #1
		for (i = 0; i < sizeof(struct in_addr); i++) {
   42cf2:	d1f3      	bne.n	42cdc <z_impl_net_addr_pton+0x24>
		}
	} else {
		return -EINVAL;
	}

	return 0;
   42cf4:	2000      	movs	r0, #0
   42cf6:	e009      	b.n	42d0c <z_impl_net_addr_pton+0x54>
			if (!(src[i] >= '0' && src[i] <= '9') &&
   42cf8:	f813 2b01 	ldrb.w	r2, [r3], #1
   42cfc:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
   42d00:	2909      	cmp	r1, #9
   42d02:	d9e4      	bls.n	42cce <z_impl_net_addr_pton+0x16>
   42d04:	2a2e      	cmp	r2, #46	; 0x2e
   42d06:	d0e2      	beq.n	42cce <z_impl_net_addr_pton+0x16>
				return -EINVAL;
   42d08:	f06f 0015 	mvn.w	r0, #21
}
   42d0c:	b003      	add	sp, #12
   42d0e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	} else if (family == AF_INET6) {
   42d12:	2802      	cmp	r0, #2
   42d14:	d1f8      	bne.n	42d08 <z_impl_net_addr_pton+0x50>
		int expected_groups = strchr(src, '.') ? 6 : 8;
   42d16:	212e      	movs	r1, #46	; 0x2e
   42d18:	4620      	mov	r0, r4
   42d1a:	f002 fa0c 	bl	45136 <strchr>
		if (*src == ':') {
   42d1e:	7823      	ldrb	r3, [r4, #0]
		int expected_groups = strchr(src, '.') ? 6 : 8;
   42d20:	2800      	cmp	r0, #0
   42d22:	bf14      	ite	ne
   42d24:	2706      	movne	r7, #6
   42d26:	2708      	moveq	r7, #8
		if (*src == ':') {
   42d28:	2b3a      	cmp	r3, #58	; 0x3a
			src++;
   42d2a:	bf08      	it	eq
   42d2c:	3401      	addeq	r4, #1
		len = strlen(src);
   42d2e:	4620      	mov	r0, r4
   42d30:	f7da f9f2 	bl	1d118 <strlen>
		for (i = 0; i < len; i++) {
   42d34:	2300      	movs	r3, #0
   42d36:	4283      	cmp	r3, r0
   42d38:	db21      	blt.n	42d7e <z_impl_net_addr_pton+0xc6>
		for (i = 0; i < expected_groups; i++) {
   42d3a:	2500      	movs	r5, #0
				UNALIGNED_PUT(htons(strtol(src, NULL, 16)),
   42d3c:	46a9      	mov	r9, r5
			if (!src || *src == '\0') {
   42d3e:	2c00      	cmp	r4, #0
   42d40:	d0e2      	beq.n	42d08 <z_impl_net_addr_pton+0x50>
   42d42:	7823      	ldrb	r3, [r4, #0]
   42d44:	2b00      	cmp	r3, #0
   42d46:	d0df      	beq.n	42d08 <z_impl_net_addr_pton+0x50>
			if (*src != ':') {
   42d48:	2b3a      	cmp	r3, #58	; 0x3a
   42d4a:	d02d      	beq.n	42da8 <z_impl_net_addr_pton+0xf0>
				UNALIGNED_PUT(htons(strtol(src, NULL, 16)),
   42d4c:	2210      	movs	r2, #16
   42d4e:	2100      	movs	r1, #0
   42d50:	4620      	mov	r0, r4
   42d52:	f7fc fbc3 	bl	3f4dc <strtol>
   42d56:	2210      	movs	r2, #16
   42d58:	4680      	mov	r8, r0
   42d5a:	2100      	movs	r1, #0
   42d5c:	4620      	mov	r0, r4
   42d5e:	f7fc fbbd 	bl	3f4dc <strtol>
   42d62:	f3c8 2807 	ubfx	r8, r8, #8, #8
   42d66:	ea48 2800 	orr.w	r8, r8, r0, lsl #8
   42d6a:	f826 8015 	strh.w	r8, [r6, r5, lsl #1]
				src = strchr(src, ':');
   42d6e:	213a      	movs	r1, #58	; 0x3a
   42d70:	4620      	mov	r0, r4
   42d72:	f002 f9e0 	bl	45136 <strchr>
				if (src) {
   42d76:	4604      	mov	r4, r0
   42d78:	b178      	cbz	r0, 42d9a <z_impl_net_addr_pton+0xe2>
			src++;
   42d7a:	3401      	adds	r4, #1
   42d7c:	e010      	b.n	42da0 <z_impl_net_addr_pton+0xe8>
			if (!(src[i] >= '0' && src[i] <= '9') &&
   42d7e:	5ce2      	ldrb	r2, [r4, r3]
   42d80:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
   42d84:	290a      	cmp	r1, #10
   42d86:	d906      	bls.n	42d96 <z_impl_net_addr_pton+0xde>
   42d88:	f022 0120 	bic.w	r1, r2, #32
   42d8c:	3941      	subs	r1, #65	; 0x41
   42d8e:	2905      	cmp	r1, #5
   42d90:	d901      	bls.n	42d96 <z_impl_net_addr_pton+0xde>
			    !(src[i] >= 'a' && src[i] <= 'f') &&
   42d92:	2a2e      	cmp	r2, #46	; 0x2e
   42d94:	d1b8      	bne.n	42d08 <z_impl_net_addr_pton+0x50>
		for (i = 0; i < len; i++) {
   42d96:	3301      	adds	r3, #1
   42d98:	e7cd      	b.n	42d36 <z_impl_net_addr_pton+0x7e>
					if (i < expected_groups - 1) {
   42d9a:	1e7b      	subs	r3, r7, #1
   42d9c:	42ab      	cmp	r3, r5
   42d9e:	dcb3      	bgt.n	42d08 <z_impl_net_addr_pton+0x50>
		for (i = 0; i < expected_groups; i++) {
   42da0:	3501      	adds	r5, #1
   42da2:	42af      	cmp	r7, r5
   42da4:	dccb      	bgt.n	42d3e <z_impl_net_addr_pton+0x86>
   42da6:	e013      	b.n	42dd0 <z_impl_net_addr_pton+0x118>
				UNALIGNED_PUT(0, &addr->s6_addr16[i]);
   42da8:	eb06 0345 	add.w	r3, r6, r5, lsl #1
   42dac:	f806 9015 	strb.w	r9, [r6, r5, lsl #1]
   42db0:	f883 9001 	strb.w	r9, [r3, #1]
			for (; i < expected_groups; i++) {
   42db4:	3501      	adds	r5, #1
   42db6:	42af      	cmp	r7, r5
   42db8:	dcf6      	bgt.n	42da8 <z_impl_net_addr_pton+0xf0>
			tmp = strrchr(src, ':');
   42dba:	213a      	movs	r1, #58	; 0x3a
   42dbc:	4620      	mov	r0, r4
   42dbe:	f002 f9f4 	bl	451aa <strrchr>
			if (src == tmp && (expected_groups == 6 || !src[1])) {
   42dc2:	42a0      	cmp	r0, r4
   42dc4:	d11f      	bne.n	42e06 <z_impl_net_addr_pton+0x14e>
   42dc6:	2f06      	cmp	r7, #6
   42dc8:	d001      	beq.n	42dce <z_impl_net_addr_pton+0x116>
   42dca:	7863      	ldrb	r3, [r4, #1]
   42dcc:	bb63      	cbnz	r3, 42e28 <z_impl_net_addr_pton+0x170>
				src++;
   42dce:	3401      	adds	r4, #1
		if (expected_groups == 6) {
   42dd0:	2f06      	cmp	r7, #6
   42dd2:	d18f      	bne.n	42cf4 <z_impl_net_addr_pton+0x3c>
			for (i = 0; i < 4; i++) {
   42dd4:	2500      	movs	r5, #0
   42dd6:	360c      	adds	r6, #12
				if (!src || !*src) {
   42dd8:	2c00      	cmp	r4, #0
   42dda:	d095      	beq.n	42d08 <z_impl_net_addr_pton+0x50>
   42ddc:	7823      	ldrb	r3, [r4, #0]
   42dde:	2b00      	cmp	r3, #0
   42de0:	d092      	beq.n	42d08 <z_impl_net_addr_pton+0x50>
				addr->s6_addr[12 + i] = strtol(src, NULL, 10);
   42de2:	220a      	movs	r2, #10
   42de4:	2100      	movs	r1, #0
   42de6:	4620      	mov	r0, r4
   42de8:	f7fc fb78 	bl	3f4dc <strtol>
				src = strchr(src, '.');
   42dec:	212e      	movs	r1, #46	; 0x2e
				addr->s6_addr[12 + i] = strtol(src, NULL, 10);
   42dee:	f806 0b01 	strb.w	r0, [r6], #1
				src = strchr(src, '.');
   42df2:	4620      	mov	r0, r4
   42df4:	f002 f99f 	bl	45136 <strchr>
				if (src) {
   42df8:	4604      	mov	r4, r0
   42dfa:	b1b8      	cbz	r0, 42e2c <z_impl_net_addr_pton+0x174>
					src++;
   42dfc:	3401      	adds	r4, #1
			for (i = 0; i < 4; i++) {
   42dfe:	3501      	adds	r5, #1
   42e00:	2d04      	cmp	r5, #4
   42e02:	d1e9      	bne.n	42dd8 <z_impl_net_addr_pton+0x120>
   42e04:	e776      	b.n	42cf4 <z_impl_net_addr_pton+0x3c>
			if (expected_groups == 6) {
   42e06:	2f06      	cmp	r7, #6
   42e08:	d100      	bne.n	42e0c <z_impl_net_addr_pton+0x154>
				tmp--;
   42e0a:	3801      	subs	r0, #1
			i = expected_groups - 1;
   42e0c:	1e7d      	subs	r5, r7, #1
   42e0e:	3001      	adds	r0, #1
				if (*tmp == ':') {
   42e10:	f810 3d01 	ldrb.w	r3, [r0, #-1]!
   42e14:	2b3a      	cmp	r3, #58	; 0x3a
					i--;
   42e16:	bf08      	it	eq
   42e18:	f105 35ff 	addeq.w	r5, r5, #4294967295
				if (i < 0) {
   42e1c:	2d00      	cmp	r5, #0
   42e1e:	f6ff af73 	blt.w	42d08 <z_impl_net_addr_pton+0x50>
			} while (tmp-- != src);
   42e22:	42a0      	cmp	r0, r4
   42e24:	d1f4      	bne.n	42e10 <z_impl_net_addr_pton+0x158>
   42e26:	e7a8      	b.n	42d7a <z_impl_net_addr_pton+0xc2>
   42e28:	4620      	mov	r0, r4
   42e2a:	e7ef      	b.n	42e0c <z_impl_net_addr_pton+0x154>
					if (i < 3) {
   42e2c:	2d03      	cmp	r5, #3
   42e2e:	f47f af6b 	bne.w	42d08 <z_impl_net_addr_pton+0x50>
   42e32:	e7e4      	b.n	42dfe <z_impl_net_addr_pton+0x146>

00042e34 <iface_cb>:
}
   42e34:	4770      	bx	lr

00042e36 <cmd_net_route>:
}
   42e36:	2000      	movs	r0, #0
   42e38:	4770      	bx	lr

00042e3a <cmd_net_vlan_add>:
   42e3a:	f7e4 bd4f 	b.w	278dc <cmd_net_vlan>

00042e3e <cmd_net_vlan_del>:
   42e3e:	f7e4 bd4d 	b.w	278dc <cmd_net_vlan>

00042e42 <cmd_net_tcp_send>:
   42e42:	f7e4 bd5d 	b.w	27900 <cmd_net_tcp_connect>

00042e46 <cmd_net_tcp_close>:
   42e46:	f7e4 bd5b 	b.w	27900 <cmd_net_tcp_connect>

00042e4a <cmd_net_stats_iface>:
   42e4a:	f7e4 bd6b 	b.w	27924 <cmd_net_stats_all>

00042e4e <cmd_net_stats>:
   42e4e:	f7e4 bd69 	b.w	27924 <cmd_net_stats_all>

00042e52 <cmd_net_gptp>:
   42e52:	f7e4 bdf1 	b.w	27a38 <cmd_net_gptp_port>

00042e56 <parse_arg>:
{
   42e56:	b573      	push	{r0, r1, r4, r5, r6, lr}
	const char *str = argv[*i] + 2;
   42e58:	6803      	ldr	r3, [r0, #0]
   42e5a:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
   42e5e:	009d      	lsls	r5, r3, #2
	if (*str == 0) {
   42e60:	78a6      	ldrb	r6, [r4, #2]
   42e62:	b196      	cbz	r6, 42e8a <parse_arg+0x34>
	const char *str = argv[*i] + 2;
   42e64:	3402      	adds	r4, #2
	res = strtol(str, &endptr, 10);
   42e66:	220a      	movs	r2, #10
   42e68:	a901      	add	r1, sp, #4
   42e6a:	4620      	mov	r0, r4
   42e6c:	f7fc fb36 	bl	3f4dc <strtol>
   42e70:	4605      	mov	r5, r0
	if (errno || (endptr == str)) {
   42e72:	f7ff feee 	bl	42c52 <__errno>
   42e76:	6803      	ldr	r3, [r0, #0]
   42e78:	b913      	cbnz	r3, 42e80 <parse_arg+0x2a>
   42e7a:	9b01      	ldr	r3, [sp, #4]
   42e7c:	42a3      	cmp	r3, r4
   42e7e:	d101      	bne.n	42e84 <parse_arg+0x2e>
		return -1;
   42e80:	f04f 35ff 	mov.w	r5, #4294967295
}
   42e84:	4628      	mov	r0, r5
   42e86:	b002      	add	sp, #8
   42e88:	bd70      	pop	{r4, r5, r6, pc}
		if (*i + 1 >= argc) {
   42e8a:	3301      	adds	r3, #1
   42e8c:	428b      	cmp	r3, r1
   42e8e:	d2f7      	bcs.n	42e80 <parse_arg+0x2a>
		str = argv[*i];
   42e90:	442a      	add	r2, r5
		*i += 1;
   42e92:	6003      	str	r3, [r0, #0]
		str = argv[*i];
   42e94:	6854      	ldr	r4, [r2, #4]
   42e96:	e7e6      	b.n	42e66 <parse_arg+0x10>

00042e98 <cmd_net_tcp>:
   42e98:	2000      	movs	r0, #0
   42e9a:	4770      	bx	lr

00042e9c <net_shell_init>:
SHELL_CMD_REGISTER(net, &net_commands, "Networking commands", NULL);

int net_shell_init(void)
{
	return 0;
}
   42e9c:	2000      	movs	r0, #0
   42e9e:	4770      	bx	lr

00042ea0 <sys_slist_append>:
	parent->next = child;
   42ea0:	2300      	movs	r3, #0
   42ea2:	600b      	str	r3, [r1, #0]
Z_GENLIST_APPEND(slist, snode)
   42ea4:	6843      	ldr	r3, [r0, #4]
   42ea6:	b913      	cbnz	r3, 42eae <sys_slist_append+0xe>
	list->head = node;
   42ea8:	e9c0 1100 	strd	r1, r1, [r0]
   42eac:	4770      	bx	lr
	parent->next = child;
   42eae:	6019      	str	r1, [r3, #0]
	list->tail = node;
   42eb0:	6041      	str	r1, [r0, #4]
Z_GENLIST_APPEND(slist, snode)
   42eb2:	4770      	bx	lr

00042eb4 <sys_slist_remove>:
Z_GENLIST_REMOVE(slist, snode)
   42eb4:	6813      	ldr	r3, [r2, #0]
   42eb6:	b939      	cbnz	r1, 42ec8 <sys_slist_remove+0x14>
   42eb8:	6841      	ldr	r1, [r0, #4]
	list->head = node;
   42eba:	6003      	str	r3, [r0, #0]
Z_GENLIST_REMOVE(slist, snode)
   42ebc:	428a      	cmp	r2, r1
   42ebe:	d100      	bne.n	42ec2 <sys_slist_remove+0xe>
	list->tail = node;
   42ec0:	6043      	str	r3, [r0, #4]
	parent->next = child;
   42ec2:	2300      	movs	r3, #0
   42ec4:	6013      	str	r3, [r2, #0]
Z_GENLIST_REMOVE(slist, snode)
   42ec6:	4770      	bx	lr
	parent->next = child;
   42ec8:	600b      	str	r3, [r1, #0]
Z_GENLIST_REMOVE(slist, snode)
   42eca:	6843      	ldr	r3, [r0, #4]
   42ecc:	429a      	cmp	r2, r3
	list->tail = node;
   42ece:	bf08      	it	eq
   42ed0:	6041      	streq	r1, [r0, #4]
   42ed2:	e7f6      	b.n	42ec2 <sys_slist_remove+0xe>

00042ed4 <sys_slist_find_and_remove>:
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   42ed4:	b508      	push	{r3, lr}
   42ed6:	2300      	movs	r3, #0
   42ed8:	6802      	ldr	r2, [r0, #0]
   42eda:	b90a      	cbnz	r2, 42ee0 <sys_slist_find_and_remove+0xc>
   42edc:	4610      	mov	r0, r2
   42ede:	e005      	b.n	42eec <sys_slist_find_and_remove+0x18>
   42ee0:	428a      	cmp	r2, r1
   42ee2:	d104      	bne.n	42eee <sys_slist_find_and_remove+0x1a>
   42ee4:	4619      	mov	r1, r3
   42ee6:	f7ff ffe5 	bl	42eb4 <sys_slist_remove>
   42eea:	2001      	movs	r0, #1
   42eec:	bd08      	pop	{r3, pc}
   42eee:	4613      	mov	r3, r2
   42ef0:	6812      	ldr	r2, [r2, #0]
   42ef2:	e7f2      	b.n	42eda <sys_slist_find_and_remove+0x6>

00042ef4 <engine_get_s32>:
	return in->reader->get_s32(in, value);
   42ef4:	6803      	ldr	r3, [r0, #0]
   42ef6:	681b      	ldr	r3, [r3, #0]
   42ef8:	4718      	bx	r3

00042efa <k_uptime_get>:
	return z_impl_k_uptime_get();
   42efa:	f001 bee2 	b.w	44cc2 <z_impl_k_uptime_get>

00042efe <get_option_int>:
{
   42efe:	b530      	push	{r4, r5, lr}
   42f00:	4604      	mov	r4, r0
   42f02:	460d      	mov	r5, r1
   42f04:	b085      	sub	sp, #20
	struct coap_option option = {};
   42f06:	2210      	movs	r2, #16
   42f08:	2100      	movs	r1, #0
   42f0a:	4668      	mov	r0, sp
   42f0c:	f001 ffda 	bl	44ec4 <memset>
	r = coap_find_options(cpkt, opt, &option, count);
   42f10:	2301      	movs	r3, #1
   42f12:	466a      	mov	r2, sp
   42f14:	4629      	mov	r1, r5
   42f16:	4620      	mov	r0, r4
   42f18:	f7ff fa74 	bl	42404 <coap_find_options>
	if (r <= 0) {
   42f1c:	2800      	cmp	r0, #0
   42f1e:	dd04      	ble.n	42f2a <get_option_int+0x2c>
	return coap_option_value_to_int(&option);
   42f20:	4668      	mov	r0, sp
   42f22:	f7ff f9ef 	bl	42304 <coap_option_value_to_int>
}
   42f26:	b005      	add	sp, #20
   42f28:	bd30      	pop	{r4, r5, pc}
		return -ENOENT;
   42f2a:	f06f 0001 	mvn.w	r0, #1
   42f2e:	e7fa      	b.n	42f26 <get_option_int+0x28>

00042f30 <buf_append>:
{
   42f30:	b570      	push	{r4, r5, r6, lr}
   42f32:	460d      	mov	r5, r1
   42f34:	f8bd 4010 	ldrh.w	r4, [sp, #16]
	if (!dst || !src) {
   42f38:	b168      	cbz	r0, 42f56 <buf_append+0x26>
	if (*dst_len + src_len > dst_size) {
   42f3a:	880e      	ldrh	r6, [r1, #0]
   42f3c:	1931      	adds	r1, r6, r4
   42f3e:	4291      	cmp	r1, r2
   42f40:	dc0c      	bgt.n	42f5c <buf_append+0x2c>
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   42f42:	4622      	mov	r2, r4
   42f44:	4619      	mov	r1, r3
   42f46:	4430      	add	r0, r6
   42f48:	f001 ff82 	bl	44e50 <memcpy>
	return 0;
   42f4c:	2000      	movs	r0, #0
	*dst_len += src_len;
   42f4e:	882b      	ldrh	r3, [r5, #0]
   42f50:	441c      	add	r4, r3
   42f52:	802c      	strh	r4, [r5, #0]
}
   42f54:	bd70      	pop	{r4, r5, r6, pc}
		return -EINVAL;
   42f56:	f06f 0015 	mvn.w	r0, #21
   42f5a:	e7fb      	b.n	42f54 <buf_append+0x24>
		return -ENOMEM;
   42f5c:	f06f 000b 	mvn.w	r0, #11
   42f60:	e7f8      	b.n	42f54 <buf_append+0x24>

00042f62 <lwm2m_default_block_size>:
}
   42f62:	2004      	movs	r0, #4
   42f64:	4770      	bx	lr

00042f66 <lwm2m_notify_observer_path>:
	return lwm2m_notify_observer(path->obj_id, path->obj_inst_id,
   42f66:	8882      	ldrh	r2, [r0, #4]
   42f68:	8841      	ldrh	r1, [r0, #2]
   42f6a:	8800      	ldrh	r0, [r0, #0]
   42f6c:	f7e5 bab2 	b.w	284d4 <lwm2m_notify_observer>

00042f70 <lwm2m_get_engine_obj_field>:
{
   42f70:	b530      	push	{r4, r5, lr}
	if (obj && obj->fields && obj->field_count > 0) {
   42f72:	b170      	cbz	r0, 42f92 <lwm2m_get_engine_obj_field+0x22>
   42f74:	6842      	ldr	r2, [r0, #4]
   42f76:	b15a      	cbz	r2, 42f90 <lwm2m_get_engine_obj_field+0x20>
   42f78:	8b44      	ldrh	r4, [r0, #26]
   42f7a:	b15c      	cbz	r4, 42f94 <lwm2m_get_engine_obj_field+0x24>
		for (i = 0; i < obj->field_count; i++) {
   42f7c:	2300      	movs	r3, #0
			if (obj->fields[i].res_id == res_id) {
   42f7e:	f832 5023 	ldrh.w	r5, [r2, r3, lsl #2]
   42f82:	eb02 0083 	add.w	r0, r2, r3, lsl #2
   42f86:	428d      	cmp	r5, r1
   42f88:	d003      	beq.n	42f92 <lwm2m_get_engine_obj_field+0x22>
		for (i = 0; i < obj->field_count; i++) {
   42f8a:	3301      	adds	r3, #1
   42f8c:	429c      	cmp	r4, r3
   42f8e:	dcf6      	bgt.n	42f7e <lwm2m_get_engine_obj_field+0xe>
	return NULL;
   42f90:	2000      	movs	r0, #0
}
   42f92:	bd30      	pop	{r4, r5, pc}
	return NULL;
   42f94:	4620      	mov	r0, r4
   42f96:	e7fc      	b.n	42f92 <lwm2m_get_engine_obj_field+0x22>

00042f98 <lwm2m_reset_message>:
{
   42f98:	b538      	push	{r3, r4, r5, lr}
   42f9a:	460d      	mov	r5, r1
	if (!msg) {
   42f9c:	4604      	mov	r4, r0
   42f9e:	b1c8      	cbz	r0, 42fd4 <lwm2m_reset_message+0x3c>
	if (msg->pending) {
   42fa0:	f8d0 016c 	ldr.w	r0, [r0, #364]	; 0x16c
   42fa4:	b108      	cbz	r0, 42faa <lwm2m_reset_message+0x12>
		coap_pending_clear(msg->pending);
   42fa6:	f7ff fbf4 	bl	42792 <coap_pending_clear>
	if (msg->reply) {
   42faa:	f8d4 0170 	ldr.w	r0, [r4, #368]	; 0x170
   42fae:	b108      	cbz	r0, 42fb4 <lwm2m_reset_message+0x1c>
		coap_reply_clear(msg->reply);
   42fb0:	f7ff fc4b 	bl	4284a <coap_reply_clear>
	if (release) {
   42fb4:	b13d      	cbz	r5, 42fc6 <lwm2m_reset_message+0x2e>
__ssp_bos_icheck3(memset, void *, int)
   42fb6:	f44f 72c4 	mov.w	r2, #392	; 0x188
   42fba:	2100      	movs	r1, #0
   42fbc:	4620      	mov	r0, r4
}
   42fbe:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   42fc2:	f001 bf7f 	b.w	44ec4 <memset>
		msg->message_timeout_cb = NULL;
   42fc6:	f8c4 517c 	str.w	r5, [r4, #380]	; 0x17c
   42fca:	2210      	movs	r2, #16
   42fcc:	4629      	mov	r1, r5
   42fce:	f104 002c 	add.w	r0, r4, #44	; 0x2c
   42fd2:	e7f4      	b.n	42fbe <lwm2m_reset_message+0x26>
}
   42fd4:	bd38      	pop	{r3, r4, r5, pc}

00042fd6 <lwm2m_engine_set_opaque>:
	return lwm2m_engine_set(pathstr, data_ptr, data_len);
   42fd6:	f7e5 bb55 	b.w	28684 <lwm2m_engine_set>

00042fda <lwm2m_engine_set_string>:
{
   42fda:	b538      	push	{r3, r4, r5, lr}
   42fdc:	4605      	mov	r5, r0
	return lwm2m_engine_set(pathstr, data_ptr, strlen(data_ptr));
   42fde:	4608      	mov	r0, r1
{
   42fe0:	460c      	mov	r4, r1
	return lwm2m_engine_set(pathstr, data_ptr, strlen(data_ptr));
   42fe2:	f7da f899 	bl	1d118 <strlen>
   42fe6:	4621      	mov	r1, r4
   42fe8:	b282      	uxth	r2, r0
   42fea:	4628      	mov	r0, r5
}
   42fec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	return lwm2m_engine_set(pathstr, data_ptr, strlen(data_ptr));
   42ff0:	f7e5 bb48 	b.w	28684 <lwm2m_engine_set>

00042ff4 <lwm2m_engine_set_u8>:
{
   42ff4:	b507      	push	{r0, r1, r2, lr}
	return lwm2m_engine_set(pathstr, &value, 1);
   42ff6:	2201      	movs	r2, #1
{
   42ff8:	f88d 1007 	strb.w	r1, [sp, #7]
	return lwm2m_engine_set(pathstr, &value, 1);
   42ffc:	f10d 0107 	add.w	r1, sp, #7
   43000:	f7e5 fb40 	bl	28684 <lwm2m_engine_set>
}
   43004:	b003      	add	sp, #12
   43006:	f85d fb04 	ldr.w	pc, [sp], #4

0004300a <lwm2m_engine_set_u16>:
{
   4300a:	b507      	push	{r0, r1, r2, lr}
	return lwm2m_engine_set(pathstr, &value, 2);
   4300c:	2202      	movs	r2, #2
{
   4300e:	f8ad 1006 	strh.w	r1, [sp, #6]
	return lwm2m_engine_set(pathstr, &value, 2);
   43012:	f10d 0106 	add.w	r1, sp, #6
   43016:	f7e5 fb35 	bl	28684 <lwm2m_engine_set>
}
   4301a:	b003      	add	sp, #12
   4301c:	f85d fb04 	ldr.w	pc, [sp], #4

00043020 <lwm2m_engine_set_s8>:
{
   43020:	b507      	push	{r0, r1, r2, lr}
	return lwm2m_engine_set(pathstr, &value, 1);
   43022:	2201      	movs	r2, #1
{
   43024:	f88d 1007 	strb.w	r1, [sp, #7]
	return lwm2m_engine_set(pathstr, &value, 1);
   43028:	f10d 0107 	add.w	r1, sp, #7
   4302c:	f7e5 fb2a 	bl	28684 <lwm2m_engine_set>
}
   43030:	b003      	add	sp, #12
   43032:	f85d fb04 	ldr.w	pc, [sp], #4

00043036 <lwm2m_engine_set_s32>:
{
   43036:	b507      	push	{r0, r1, r2, lr}
	return lwm2m_engine_set(pathstr, &value, 4);
   43038:	2204      	movs	r2, #4
{
   4303a:	9101      	str	r1, [sp, #4]
	return lwm2m_engine_set(pathstr, &value, 4);
   4303c:	eb0d 0102 	add.w	r1, sp, r2
   43040:	f7e5 fb20 	bl	28684 <lwm2m_engine_set>
}
   43044:	b003      	add	sp, #12
   43046:	f85d fb04 	ldr.w	pc, [sp], #4

0004304a <lwm2m_engine_set_bool>:
{
   4304a:	b507      	push	{r0, r1, r2, lr}
	return lwm2m_engine_set(pathstr, &temp, 1);
   4304c:	2201      	movs	r2, #1
	u8_t temp = (value != 0 ? 1 : 0);
   4304e:	f88d 1007 	strb.w	r1, [sp, #7]
	return lwm2m_engine_set(pathstr, &temp, 1);
   43052:	f10d 0107 	add.w	r1, sp, #7
   43056:	f7e5 fb15 	bl	28684 <lwm2m_engine_set>
}
   4305a:	b003      	add	sp, #12
   4305c:	f85d fb04 	ldr.w	pc, [sp], #4

00043060 <lwm2m_engine_set_float32>:
	return lwm2m_engine_set(pathstr, value, sizeof(float32_value_t));
   43060:	2208      	movs	r2, #8
   43062:	f7e5 bb0f 	b.w	28684 <lwm2m_engine_set>

00043066 <lwm2m_engine_get_u32>:
	return lwm2m_engine_get(pathstr, value, 4);
   43066:	2204      	movs	r2, #4
   43068:	f7e5 bc58 	b.w	2891c <lwm2m_engine_get>

0004306c <lwm2m_engine_get_s8>:
	return lwm2m_engine_get(pathstr, value, 1);
   4306c:	2201      	movs	r2, #1
   4306e:	f7e5 bc55 	b.w	2891c <lwm2m_engine_get>

00043072 <lwm2m_engine_get_s32>:
	return lwm2m_engine_get(pathstr, value, 4);
   43072:	2204      	movs	r2, #4
   43074:	f7e5 bc52 	b.w	2891c <lwm2m_engine_get>

00043078 <lwm2m_engine_get_bool>:
	s8_t temp = 0;
   43078:	2300      	movs	r3, #0
{
   4307a:	b513      	push	{r0, r1, r4, lr}
   4307c:	460c      	mov	r4, r1
	ret = lwm2m_engine_get_s8(pathstr, &temp);
   4307e:	f10d 0107 	add.w	r1, sp, #7
	s8_t temp = 0;
   43082:	f88d 3007 	strb.w	r3, [sp, #7]
	ret = lwm2m_engine_get_s8(pathstr, &temp);
   43086:	f7ff fff1 	bl	4306c <lwm2m_engine_get_s8>
	if (!ret) {
   4308a:	b928      	cbnz	r0, 43098 <lwm2m_engine_get_bool+0x20>
		*value = temp != 0;
   4308c:	f99d 3007 	ldrsb.w	r3, [sp, #7]
   43090:	3300      	adds	r3, #0
   43092:	bf18      	it	ne
   43094:	2301      	movne	r3, #1
   43096:	7023      	strb	r3, [r4, #0]
}
   43098:	b002      	add	sp, #8
   4309a:	bd10      	pop	{r4, pc}

0004309c <lwm2m_engine_register_read_callback>:
{
   4309c:	b537      	push	{r0, r1, r2, r4, r5, lr}
	struct lwm2m_engine_res *res = NULL;
   4309e:	2400      	movs	r4, #0
{
   430a0:	460d      	mov	r5, r1
	ret = lwm2m_engine_get_resource(pathstr, &res);
   430a2:	a901      	add	r1, sp, #4
	struct lwm2m_engine_res *res = NULL;
   430a4:	9401      	str	r4, [sp, #4]
	ret = lwm2m_engine_get_resource(pathstr, &res);
   430a6:	f7e7 fb47 	bl	2a738 <lwm2m_engine_get_resource>
	if (ret < 0) {
   430aa:	2800      	cmp	r0, #0
	return 0;
   430ac:	bfa2      	ittt	ge
   430ae:	4620      	movge	r0, r4
	res->read_cb = cb;
   430b0:	9b01      	ldrge	r3, [sp, #4]
   430b2:	601d      	strge	r5, [r3, #0]
}
   430b4:	b003      	add	sp, #12
   430b6:	bd30      	pop	{r4, r5, pc}

000430b8 <lwm2m_engine_register_pre_write_callback>:
{
   430b8:	b537      	push	{r0, r1, r2, r4, r5, lr}
	struct lwm2m_engine_res *res = NULL;
   430ba:	2400      	movs	r4, #0
{
   430bc:	460d      	mov	r5, r1
	ret = lwm2m_engine_get_resource(pathstr, &res);
   430be:	a901      	add	r1, sp, #4
	struct lwm2m_engine_res *res = NULL;
   430c0:	9401      	str	r4, [sp, #4]
	ret = lwm2m_engine_get_resource(pathstr, &res);
   430c2:	f7e7 fb39 	bl	2a738 <lwm2m_engine_get_resource>
	if (ret < 0) {
   430c6:	2800      	cmp	r0, #0
	return 0;
   430c8:	bfa2      	ittt	ge
   430ca:	4620      	movge	r0, r4
	res->pre_write_cb = cb;
   430cc:	9b01      	ldrge	r3, [sp, #4]
   430ce:	605d      	strge	r5, [r3, #4]
}
   430d0:	b003      	add	sp, #12
   430d2:	bd30      	pop	{r4, r5, pc}

000430d4 <lwm2m_engine_register_post_write_callback>:
{
   430d4:	b537      	push	{r0, r1, r2, r4, r5, lr}
	struct lwm2m_engine_res *res = NULL;
   430d6:	2400      	movs	r4, #0
{
   430d8:	460d      	mov	r5, r1
	ret = lwm2m_engine_get_resource(pathstr, &res);
   430da:	a901      	add	r1, sp, #4
	struct lwm2m_engine_res *res = NULL;
   430dc:	9401      	str	r4, [sp, #4]
	ret = lwm2m_engine_get_resource(pathstr, &res);
   430de:	f7e7 fb2b 	bl	2a738 <lwm2m_engine_get_resource>
	if (ret < 0) {
   430e2:	2800      	cmp	r0, #0
	return 0;
   430e4:	bfa2      	ittt	ge
   430e6:	4620      	movge	r0, r4
	res->post_write_cb = cb;
   430e8:	9b01      	ldrge	r3, [sp, #4]
   430ea:	609d      	strge	r5, [r3, #8]
}
   430ec:	b003      	add	sp, #12
   430ee:	bd30      	pop	{r4, r5, pc}

000430f0 <lwm2m_engine_register_exec_callback>:
{
   430f0:	b537      	push	{r0, r1, r2, r4, r5, lr}
	struct lwm2m_engine_res *res = NULL;
   430f2:	2400      	movs	r4, #0
{
   430f4:	460d      	mov	r5, r1
	ret = lwm2m_engine_get_resource(pathstr, &res);
   430f6:	a901      	add	r1, sp, #4
	struct lwm2m_engine_res *res = NULL;
   430f8:	9401      	str	r4, [sp, #4]
	ret = lwm2m_engine_get_resource(pathstr, &res);
   430fa:	f7e7 fb1d 	bl	2a738 <lwm2m_engine_get_resource>
	if (ret < 0) {
   430fe:	2800      	cmp	r0, #0
	return 0;
   43100:	bfa2      	ittt	ge
   43102:	4620      	movge	r0, r4
	res->execute_cb = cb;
   43104:	9b01      	ldrge	r3, [sp, #4]
   43106:	60dd      	strge	r5, [r3, #12]
}
   43108:	b003      	add	sp, #12
   4310a:	bd30      	pop	{r4, r5, pc}

0004310c <lwm2m_engine_get_opaque_more>:
{
   4310c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   4310e:	4605      	mov	r5, r0
   43110:	4608      	mov	r0, r1
	u16_t in_len = in->opaque_len;
   43112:	8969      	ldrh	r1, [r5, #10]
	if (in_len > buflen) {
   43114:	4291      	cmp	r1, r2
	u16_t in_len = in->opaque_len;
   43116:	bf94      	ite	ls
   43118:	460c      	movls	r4, r1
		in_len = buflen;
   4311a:	b294      	uxthhi	r4, r2
	in->opaque_len -= in_len;
   4311c:	1b09      	subs	r1, r1, r4
   4311e:	b289      	uxth	r1, r1
   43120:	8169      	strh	r1, [r5, #10]
	if (in->opaque_len == 0U) {
   43122:	b909      	cbnz	r1, 43128 <lwm2m_engine_get_opaque_more+0x1c>
		*last_block = true;
   43124:	2201      	movs	r2, #1
   43126:	701a      	strb	r2, [r3, #0]
	if (buf_read(buf, in_len, CPKT_BUF_READ(in->in_cpkt),
   43128:	686a      	ldr	r2, [r5, #4]
   4312a:	6817      	ldr	r7, [r2, #0]
   4312c:	88d2      	ldrh	r2, [r2, #6]
	if (!src) {
   4312e:	b177      	cbz	r7, 4314e <lwm2m_engine_get_opaque_more+0x42>
	if (*offset + len > src_len) {
   43130:	8929      	ldrh	r1, [r5, #8]
   43132:	190e      	adds	r6, r1, r4
   43134:	4296      	cmp	r6, r2
   43136:	dc0a      	bgt.n	4314e <lwm2m_engine_get_opaque_more+0x42>
	if (dst) {
   43138:	4626      	mov	r6, r4
   4313a:	b118      	cbz	r0, 43144 <lwm2m_engine_get_opaque_more+0x38>
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   4313c:	4622      	mov	r2, r4
   4313e:	4439      	add	r1, r7
   43140:	f001 fe86 	bl	44e50 <memcpy>
	*offset += len;
   43144:	892a      	ldrh	r2, [r5, #8]
   43146:	4414      	add	r4, r2
   43148:	812c      	strh	r4, [r5, #8]
}
   4314a:	4630      	mov	r0, r6
   4314c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		*last_block = true;
   4314e:	2201      	movs	r2, #1
		return 0;
   43150:	2600      	movs	r6, #0
		*last_block = true;
   43152:	701a      	strb	r2, [r3, #0]
		return 0;
   43154:	e7f9      	b.n	4314a <lwm2m_engine_get_opaque_more+0x3e>

00043156 <lwm2m_get_or_create_engine_obj>:
{
   43156:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   4315a:	4605      	mov	r5, r0
   4315c:	4688      	mov	r8, r1
	if (created) {
   4315e:	4614      	mov	r4, r2
   43160:	b10a      	cbz	r2, 43166 <lwm2m_get_or_create_engine_obj+0x10>
		*created = 0U;
   43162:	2300      	movs	r3, #0
   43164:	7013      	strb	r3, [r2, #0]
	*obj_inst = get_engine_obj_inst(msg->path.obj_id,
   43166:	8c2e      	ldrh	r6, [r5, #32]
					msg->path.obj_inst_id);
   43168:	8c6f      	ldrh	r7, [r5, #34]	; 0x22
	*obj_inst = get_engine_obj_inst(msg->path.obj_id,
   4316a:	4630      	mov	r0, r6
   4316c:	4639      	mov	r1, r7
   4316e:	f7e4 fe1f 	bl	27db0 <get_engine_obj_inst>
   43172:	f8c8 0000 	str.w	r0, [r8]
	if (!*obj_inst) {
   43176:	b988      	cbnz	r0, 4319c <lwm2m_get_or_create_engine_obj+0x46>
		ret = lwm2m_create_obj_inst(msg->path.obj_id,
   43178:	4630      	mov	r0, r6
   4317a:	4642      	mov	r2, r8
   4317c:	f7e5 fcf2 	bl	28b64 <lwm2m_create_obj_inst>
		if (ret < 0) {
   43180:	1e06      	subs	r6, r0, #0
   43182:	db08      	blt.n	43196 <lwm2m_get_or_create_engine_obj+0x40>
		if (created) {
   43184:	b10c      	cbz	r4, 4318a <lwm2m_get_or_create_engine_obj+0x34>
			*created = 1U;
   43186:	2301      	movs	r3, #1
   43188:	7023      	strb	r3, [r4, #0]
		if (!msg->ctx->bootstrap_mode) {
   4318a:	682b      	ldr	r3, [r5, #0]
   4318c:	f893 3128 	ldrb.w	r3, [r3, #296]	; 0x128
   43190:	b90b      	cbnz	r3, 43196 <lwm2m_get_or_create_engine_obj+0x40>
			engine_trigger_update();
   43192:	f7ea f8d1 	bl	2d338 <engine_trigger_update>
}
   43196:	4630      	mov	r0, r6
   43198:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	int ret = 0;
   4319c:	2600      	movs	r6, #0
   4319e:	e7fa      	b.n	43196 <lwm2m_get_or_create_engine_obj+0x40>

000431a0 <update_trigger_cb>:
{
   431a0:	b508      	push	{r3, lr}
	engine_trigger_update();
   431a2:	f7ea f8c9 	bl	2d338 <engine_trigger_update>
}
   431a6:	2000      	movs	r0, #0
   431a8:	bd08      	pop	{r3, pc}

000431aa <device_periodic_service>:
	NOTIFY_OBSERVER(LWM2M_OBJECT_DEVICE_ID, 0, DEVICE_CURRENT_TIME_ID);
   431aa:	220d      	movs	r2, #13
   431ac:	2100      	movs	r1, #0
   431ae:	2003      	movs	r0, #3
   431b0:	f7e5 b990 	b.w	284d4 <lwm2m_notify_observer>

000431b4 <get_opaque>:
	return 0;
}

static size_t get_opaque(struct lwm2m_input_context *in,
			 u8_t *value, size_t buflen, bool *last_block)
{
   431b4:	b470      	push	{r4, r5, r6}
	return in->in_cpkt->offset - in->offset;
   431b6:	6845      	ldr	r5, [r0, #4]
	in->opaque_len = get_length_left(in);
   431b8:	8906      	ldrh	r6, [r0, #8]
   431ba:	88ad      	ldrh	r5, [r5, #4]
   431bc:	1bad      	subs	r5, r5, r6
   431be:	8145      	strh	r5, [r0, #10]
	return lwm2m_engine_get_opaque_more(in, value, buflen, last_block);
}
   431c0:	bc70      	pop	{r4, r5, r6}
	return lwm2m_engine_get_opaque_more(in, value, buflen, last_block);
   431c2:	f7ff bfa3 	b.w	4310c <lwm2m_engine_get_opaque_more>

000431c6 <buf_append>:
{
   431c6:	b570      	push	{r4, r5, r6, lr}
   431c8:	460d      	mov	r5, r1
   431ca:	f8bd 4010 	ldrh.w	r4, [sp, #16]
	if (!dst || !src) {
   431ce:	b170      	cbz	r0, 431ee <buf_append+0x28>
   431d0:	b16b      	cbz	r3, 431ee <buf_append+0x28>
	if (*dst_len + src_len > dst_size) {
   431d2:	880e      	ldrh	r6, [r1, #0]
   431d4:	1931      	adds	r1, r6, r4
   431d6:	4291      	cmp	r1, r2
   431d8:	dc0c      	bgt.n	431f4 <buf_append+0x2e>
   431da:	4622      	mov	r2, r4
   431dc:	4619      	mov	r1, r3
   431de:	4430      	add	r0, r6
   431e0:	f001 fe36 	bl	44e50 <memcpy>
	return 0;
   431e4:	2000      	movs	r0, #0
	*dst_len += src_len;
   431e6:	882b      	ldrh	r3, [r5, #0]
   431e8:	441c      	add	r4, r3
   431ea:	802c      	strh	r4, [r5, #0]
}
   431ec:	bd70      	pop	{r4, r5, r6, pc}
		return -EINVAL;
   431ee:	f06f 0015 	mvn.w	r0, #21
   431f2:	e7fb      	b.n	431ec <buf_append+0x26>
		return -ENOMEM;
   431f4:	f06f 000b 	mvn.w	r0, #11
   431f8:	e7f8      	b.n	431ec <buf_append+0x26>

000431fa <put_string>:
{
   431fa:	b513      	push	{r0, r1, r4, lr}
	if (buf_append(CPKT_BUF_WRITE(out->out_cpkt), buf, buflen) < 0) {
   431fc:	6840      	ldr	r0, [r0, #4]
{
   431fe:	461c      	mov	r4, r3
	if (buf_append(CPKT_BUF_WRITE(out->out_cpkt), buf, buflen) < 0) {
   43200:	88c1      	ldrh	r1, [r0, #6]
   43202:	b29b      	uxth	r3, r3
   43204:	9300      	str	r3, [sp, #0]
   43206:	4613      	mov	r3, r2
   43208:	460a      	mov	r2, r1
   4320a:	1d01      	adds	r1, r0, #4
   4320c:	6800      	ldr	r0, [r0, #0]
   4320e:	f7ff ffda 	bl	431c6 <buf_append>
   43212:	2800      	cmp	r0, #0
}
   43214:	bfac      	ite	ge
   43216:	4620      	movge	r0, r4
   43218:	2000      	movlt	r0, #0
   4321a:	b002      	add	sp, #8
   4321c:	bd10      	pop	{r4, pc}

0004321e <buf_read>:
{
   4321e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   43220:	9d06      	ldr	r5, [sp, #24]
   43222:	460c      	mov	r4, r1
	if (!src) {
   43224:	4616      	mov	r6, r2
   43226:	b16a      	cbz	r2, 43244 <buf_read+0x26>
	if (*offset + len > src_len) {
   43228:	8829      	ldrh	r1, [r5, #0]
   4322a:	190a      	adds	r2, r1, r4
   4322c:	429a      	cmp	r2, r3
   4322e:	dc0c      	bgt.n	4324a <buf_read+0x2c>
	if (dst) {
   43230:	b118      	cbz	r0, 4323a <buf_read+0x1c>
   43232:	4622      	mov	r2, r4
   43234:	4431      	add	r1, r6
   43236:	f001 fe0b 	bl	44e50 <memcpy>
	return 0;
   4323a:	2000      	movs	r0, #0
	*offset += len;
   4323c:	882b      	ldrh	r3, [r5, #0]
   4323e:	441c      	add	r4, r3
   43240:	802c      	strh	r4, [r5, #0]
}
   43242:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return -EINVAL;
   43244:	f06f 0015 	mvn.w	r0, #21
   43248:	e7fb      	b.n	43242 <buf_read+0x24>
		return -ENOMEM;
   4324a:	f06f 000b 	mvn.w	r0, #11
   4324e:	e7f8      	b.n	43242 <buf_read+0x24>

00043250 <get_bool>:
{
   43250:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	if (buf_read_u8(&tmp, CPKT_BUF_READ(in->in_cpkt), &in->offset) < 0) {
   43252:	6842      	ldr	r2, [r0, #4]
   43254:	3008      	adds	r0, #8
	return buf_read(value, sizeof(u8_t), src, src_len, offset);
   43256:	88d3      	ldrh	r3, [r2, #6]
   43258:	9000      	str	r0, [sp, #0]
{
   4325a:	460c      	mov	r4, r1
   4325c:	6812      	ldr	r2, [r2, #0]
   4325e:	2101      	movs	r1, #1
   43260:	f10d 000f 	add.w	r0, sp, #15
   43264:	f7ff ffdb 	bl	4321e <buf_read>
	if (buf_read_u8(&tmp, CPKT_BUF_READ(in->in_cpkt), &in->offset) < 0) {
   43268:	2800      	cmp	r0, #0
   4326a:	db0d      	blt.n	43288 <get_bool+0x38>
	if (tmp == '1' || tmp == '0') {
   4326c:	f89d 300f 	ldrb.w	r3, [sp, #15]
   43270:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
   43274:	2a01      	cmp	r2, #1
   43276:	d807      	bhi.n	43288 <get_bool+0x38>
		return 1;
   43278:	2001      	movs	r0, #1
		*value = (tmp == '1') ? true : false;
   4327a:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
   4327e:	4253      	negs	r3, r2
   43280:	4153      	adcs	r3, r2
   43282:	7023      	strb	r3, [r4, #0]
}
   43284:	b004      	add	sp, #16
   43286:	bd10      	pop	{r4, pc}
		return 0;
   43288:	2000      	movs	r0, #0
   4328a:	e7fb      	b.n	43284 <get_bool+0x34>

0004328c <get_string>:
{
   4328c:	b537      	push	{r0, r1, r2, r4, r5, lr}
   4328e:	460d      	mov	r5, r1
	return in->in_cpkt->offset - in->offset;
   43290:	6841      	ldr	r1, [r0, #4]
	u16_t in_len = get_length_left(in);
   43292:	8903      	ldrh	r3, [r0, #8]
   43294:	888c      	ldrh	r4, [r1, #4]
	if (buf_read(value, in_len, CPKT_BUF_READ(in->in_cpkt),
   43296:	3008      	adds	r0, #8
	u16_t in_len = get_length_left(in);
   43298:	1ae4      	subs	r4, r4, r3
   4329a:	b2a4      	uxth	r4, r4
	if (in_len > buflen) {
   4329c:	4294      	cmp	r4, r2
		in_len = buflen - 1;
   4329e:	bf84      	itt	hi
   432a0:	f102 32ff 	addhi.w	r2, r2, #4294967295
   432a4:	b294      	uxthhi	r4, r2
	if (buf_read(value, in_len, CPKT_BUF_READ(in->in_cpkt),
   432a6:	88cb      	ldrh	r3, [r1, #6]
   432a8:	9000      	str	r0, [sp, #0]
   432aa:	680a      	ldr	r2, [r1, #0]
   432ac:	4628      	mov	r0, r5
   432ae:	4621      	mov	r1, r4
   432b0:	f7ff ffb5 	bl	4321e <buf_read>
   432b4:	2300      	movs	r3, #0
   432b6:	2800      	cmp	r0, #0
	value[in_len] = '\0';
   432b8:	bfad      	iteet	ge
   432ba:	4620      	movge	r0, r4
		return 0;
   432bc:	4618      	movlt	r0, r3
		value[0] = '\0';
   432be:	702b      	strblt	r3, [r5, #0]
	value[in_len] = '\0';
   432c0:	542b      	strbge	r3, [r5, r0]
}
   432c2:	b003      	add	sp, #12
   432c4:	bd30      	pop	{r4, r5, pc}

000432c6 <get_s32>:
	s64_t tmp = 0;
   432c6:	2200      	movs	r2, #0
   432c8:	2300      	movs	r3, #0
{
   432ca:	b513      	push	{r0, r1, r4, lr}
	s64_t tmp = 0;
   432cc:	e9cd 2300 	strd	r2, r3, [sp]
	len = plain_text_read_number(in, &tmp, NULL, true, false);
   432d0:	2300      	movs	r3, #0
{
   432d2:	460c      	mov	r4, r1
	len = plain_text_read_number(in, &tmp, NULL, true, false);
   432d4:	461a      	mov	r2, r3
   432d6:	4669      	mov	r1, sp
   432d8:	f7e8 ffd0 	bl	2c27c <plain_text_read_number.constprop.1>
	if (len > 0) {
   432dc:	b108      	cbz	r0, 432e2 <get_s32+0x1c>
		*value = (s32_t)tmp;
   432de:	9b00      	ldr	r3, [sp, #0]
   432e0:	6023      	str	r3, [r4, #0]
}
   432e2:	b002      	add	sp, #8
   432e4:	bd10      	pop	{r4, pc}

000432e6 <get_s64>:
	return plain_text_read_number(in, value, NULL, true, false);
   432e6:	2300      	movs	r3, #0
   432e8:	461a      	mov	r2, r3
   432ea:	f7e8 bfc7 	b.w	2c27c <plain_text_read_number.constprop.1>

000432ee <get_float32fix>:
{
   432ee:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   432f0:	460c      	mov	r4, r1
	len = plain_text_read_number(in, &tmp1, &tmp2, true, true);
   432f2:	2301      	movs	r3, #1
   432f4:	aa02      	add	r2, sp, #8
   432f6:	4669      	mov	r1, sp
   432f8:	f7e8 ffc0 	bl	2c27c <plain_text_read_number.constprop.1>
	if (len > 0) {
   432fc:	b118      	cbz	r0, 43306 <get_float32fix+0x18>
		value->val1 = (s32_t)tmp1;
   432fe:	9b00      	ldr	r3, [sp, #0]
   43300:	6023      	str	r3, [r4, #0]
		value->val2 = (s32_t)tmp2;
   43302:	9b02      	ldr	r3, [sp, #8]
   43304:	6063      	str	r3, [r4, #4]
}
   43306:	b004      	add	sp, #16
   43308:	bd10      	pop	{r4, pc}

0004330a <get_float64fix>:
	return plain_text_read_number(in, &value->val1, &value->val2,
   4330a:	2301      	movs	r3, #1
   4330c:	f101 0208 	add.w	r2, r1, #8
   43310:	f7e8 bfb4 	b.w	2c27c <plain_text_read_number.constprop.1>

00043314 <do_read_op_plain_text>:
};

int do_read_op_plain_text(struct lwm2m_message *msg, int content_format)
{
	/* Plain text can only return single resource */
	if (msg->path.level != 3U) {
   43314:	f890 3028 	ldrb.w	r3, [r0, #40]	; 0x28
   43318:	2b03      	cmp	r3, #3
   4331a:	d102      	bne.n	43322 <do_read_op_plain_text+0xe>
		return -EPERM; /* NOT_ALLOWED */
	}

	return lwm2m_perform_read_op(msg, content_format);
   4331c:	b289      	uxth	r1, r1
   4331e:	f7e7 bc07 	b.w	2ab30 <lwm2m_perform_read_op>
}
   43322:	f04f 30ff 	mov.w	r0, #4294967295
   43326:	4770      	bx	lr

00043328 <do_write_op_plain_text>:

int do_write_op_plain_text(struct lwm2m_message *msg)
{
   43328:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct lwm2m_engine_obj_inst *obj_inst = NULL;
   4332a:	2600      	movs	r6, #0
{
   4332c:	b085      	sub	sp, #20
	struct lwm2m_engine_res *res = NULL;
	struct lwm2m_engine_res_inst *res_inst = NULL;
	int ret, i;
	u8_t created = 0U;

	ret = lwm2m_get_or_create_engine_obj(msg, &obj_inst, &created);
   4332e:	f10d 020b 	add.w	r2, sp, #11
   43332:	a903      	add	r1, sp, #12
{
   43334:	4604      	mov	r4, r0
	struct lwm2m_engine_obj_inst *obj_inst = NULL;
   43336:	9603      	str	r6, [sp, #12]
	u8_t created = 0U;
   43338:	f88d 600b 	strb.w	r6, [sp, #11]
	ret = lwm2m_get_or_create_engine_obj(msg, &obj_inst, &created);
   4333c:	f7ff ff0b 	bl	43156 <lwm2m_get_or_create_engine_obj>
	if (ret < 0) {
   43340:	2800      	cmp	r0, #0
   43342:	db3d      	blt.n	433c0 <do_write_op_plain_text+0x98>
		return ret;
	}

	obj_field = lwm2m_get_engine_obj_field(obj_inst->obj, msg->path.res_id);
   43344:	9b03      	ldr	r3, [sp, #12]
   43346:	8ca1      	ldrh	r1, [r4, #36]	; 0x24
   43348:	6858      	ldr	r0, [r3, #4]
   4334a:	f7ff fe11 	bl	42f70 <lwm2m_get_engine_obj_field>
	if (!obj_field) {
   4334e:	4603      	mov	r3, r0
   43350:	b318      	cbz	r0, 4339a <do_write_op_plain_text+0x72>
		return -ENOENT;
	}

	if (!LWM2M_HAS_PERM(obj_field, LWM2M_PERM_W)) {
   43352:	7882      	ldrb	r2, [r0, #2]
   43354:	f002 0206 	and.w	r2, r2, #6
   43358:	2a06      	cmp	r2, #6
   4335a:	d121      	bne.n	433a0 <do_write_op_plain_text+0x78>
		return -EPERM;
	}

	if (!obj_inst->resources || obj_inst->resource_count == 0U) {
   4335c:	9803      	ldr	r0, [sp, #12]
   4335e:	6881      	ldr	r1, [r0, #8]
   43360:	b309      	cbz	r1, 433a6 <do_write_op_plain_text+0x7e>
   43362:	89c5      	ldrh	r5, [r0, #14]
   43364:	b1fd      	cbz	r5, 433a6 <do_write_op_plain_text+0x7e>
		return -EINVAL;
	}

	for (i = 0; i < obj_inst->resource_count; i++) {
   43366:	4632      	mov	r2, r6
		if (obj_inst->resources[i].res_id == msg->path.res_id) {
   43368:	8ca7      	ldrh	r7, [r4, #36]	; 0x24
   4336a:	8a8e      	ldrh	r6, [r1, #20]
   4336c:	42be      	cmp	r6, r7
   4336e:	d10f      	bne.n	43390 <do_write_op_plain_text+0x68>

	if (!res) {
		return -ENOENT;
	}

	for (i = 0; i < res->res_inst_count; i++) {
   43370:	2500      	movs	r5, #0
		if (res->res_instances[i].res_inst_id ==
   43372:	270c      	movs	r7, #12
	for (i = 0; i < res->res_inst_count; i++) {
   43374:	7d8e      	ldrb	r6, [r1, #22]
   43376:	42ae      	cmp	r6, r5
   43378:	dd0f      	ble.n	4339a <do_write_op_plain_text+0x72>
		if (res->res_instances[i].res_inst_id ==
   4337a:	690a      	ldr	r2, [r1, #16]
   4337c:	f8b4 c026 	ldrh.w	ip, [r4, #38]	; 0x26
   43380:	fb07 2205 	mla	r2, r7, r5, r2
   43384:	f8b2 e006 	ldrh.w	lr, [r2, #6]
   43388:	45e6      	cmp	lr, ip
   4338a:	d00f      	beq.n	433ac <do_write_op_plain_text+0x84>
	for (i = 0; i < res->res_inst_count; i++) {
   4338c:	3501      	adds	r5, #1
   4338e:	e7f2      	b.n	43376 <do_write_op_plain_text+0x4e>
	for (i = 0; i < obj_inst->resource_count; i++) {
   43390:	3201      	adds	r2, #1
   43392:	4295      	cmp	r5, r2
   43394:	f101 0118 	add.w	r1, r1, #24
   43398:	dce7      	bgt.n	4336a <do_write_op_plain_text+0x42>
		return -ENOENT;
   4339a:	f06f 0001 	mvn.w	r0, #1
   4339e:	e00f      	b.n	433c0 <do_write_op_plain_text+0x98>
		return -EPERM;
   433a0:	f04f 30ff 	mov.w	r0, #4294967295
   433a4:	e00c      	b.n	433c0 <do_write_op_plain_text+0x98>
		return -EINVAL;
   433a6:	f06f 0015 	mvn.w	r0, #21
   433aa:	e009      	b.n	433c0 <do_write_op_plain_text+0x98>

	if (!res_inst) {
		return -ENOENT;
	}

	if (msg->path.level < 3) {
   433ac:	f894 5028 	ldrb.w	r5, [r4, #40]	; 0x28
   433b0:	2d02      	cmp	r5, #2
   433b2:	d802      	bhi.n	433ba <do_write_op_plain_text+0x92>
		msg->path.level = 3U;
   433b4:	2503      	movs	r5, #3
   433b6:	f884 5028 	strb.w	r5, [r4, #40]	; 0x28
	}

	return lwm2m_write_handler(obj_inst, res, res_inst, obj_field, msg);
   433ba:	9400      	str	r4, [sp, #0]
   433bc:	f7e7 fa88 	bl	2a8d0 <lwm2m_write_handler>
}
   433c0:	b005      	add	sp, #20
   433c2:	bdf0      	pop	{r4, r5, r6, r7, pc}

000433c4 <put_begin_oi>:
	fd = engine_get_out_user_data(out);
   433c4:	6883      	ldr	r3, [r0, #8]
	if (!fd) {
   433c6:	b113      	cbz	r3, 433ce <put_begin_oi+0xa>
	*mark_pos = out->out_cpkt->offset;
   433c8:	6842      	ldr	r2, [r0, #4]
   433ca:	8892      	ldrh	r2, [r2, #4]
   433cc:	805a      	strh	r2, [r3, #2]
}
   433ce:	2000      	movs	r0, #0
   433d0:	4770      	bx	lr

000433d2 <put_begin_ri>:
	fd = engine_get_out_user_data(out);
   433d2:	6883      	ldr	r3, [r0, #8]
	if (!fd) {
   433d4:	b133      	cbz	r3, 433e4 <put_begin_ri+0x12>
	*writer_flags |= writer_flag;
   433d6:	799a      	ldrb	r2, [r3, #6]
   433d8:	f042 0202 	orr.w	r2, r2, #2
   433dc:	719a      	strb	r2, [r3, #6]
	*mark_pos = out->out_cpkt->offset;
   433de:	6842      	ldr	r2, [r0, #4]
   433e0:	8892      	ldrh	r2, [r2, #4]
   433e2:	809a      	strh	r2, [r3, #4]
}
   433e4:	2000      	movs	r0, #0
   433e6:	4770      	bx	lr

000433e8 <buf_append>:
{
   433e8:	b570      	push	{r4, r5, r6, lr}
   433ea:	460d      	mov	r5, r1
   433ec:	f8bd 4010 	ldrh.w	r4, [sp, #16]
	if (!dst || !src) {
   433f0:	b170      	cbz	r0, 43410 <buf_append+0x28>
   433f2:	b16b      	cbz	r3, 43410 <buf_append+0x28>
	if (*dst_len + src_len > dst_size) {
   433f4:	880e      	ldrh	r6, [r1, #0]
   433f6:	1931      	adds	r1, r6, r4
   433f8:	4291      	cmp	r1, r2
   433fa:	dc0c      	bgt.n	43416 <buf_append+0x2e>
   433fc:	4622      	mov	r2, r4
   433fe:	4619      	mov	r1, r3
   43400:	4430      	add	r0, r6
   43402:	f001 fd25 	bl	44e50 <memcpy>
	return 0;
   43406:	2000      	movs	r0, #0
	*dst_len += src_len;
   43408:	882b      	ldrh	r3, [r5, #0]
   4340a:	441c      	add	r4, r3
   4340c:	802c      	strh	r4, [r5, #0]
}
   4340e:	bd70      	pop	{r4, r5, r6, pc}
		return -EINVAL;
   43410:	f06f 0015 	mvn.w	r0, #21
   43414:	e7fb      	b.n	4340e <buf_append+0x26>
		return -ENOMEM;
   43416:	f06f 000b 	mvn.w	r0, #11
   4341a:	e7f8      	b.n	4340e <buf_append+0x26>

0004341c <buf_read>:
{
   4341c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   4341e:	9d06      	ldr	r5, [sp, #24]
   43420:	460c      	mov	r4, r1
	if (!src) {
   43422:	4616      	mov	r6, r2
   43424:	b16a      	cbz	r2, 43442 <buf_read+0x26>
	if (*offset + len > src_len) {
   43426:	8829      	ldrh	r1, [r5, #0]
   43428:	190a      	adds	r2, r1, r4
   4342a:	429a      	cmp	r2, r3
   4342c:	dc0c      	bgt.n	43448 <buf_read+0x2c>
	if (dst) {
   4342e:	b118      	cbz	r0, 43438 <buf_read+0x1c>
   43430:	4622      	mov	r2, r4
   43432:	4431      	add	r1, r6
   43434:	f001 fd0c 	bl	44e50 <memcpy>
	return 0;
   43438:	2000      	movs	r0, #0
	*offset += len;
   4343a:	882b      	ldrh	r3, [r5, #0]
   4343c:	441c      	add	r4, r3
   4343e:	802c      	strh	r4, [r5, #0]
}
   43440:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return -EINVAL;
   43442:	f06f 0015 	mvn.w	r0, #21
   43446:	e7fb      	b.n	43440 <buf_read+0x24>
		return -ENOMEM;
   43448:	f06f 000b 	mvn.w	r0, #11
   4344c:	e7f8      	b.n	43440 <buf_read+0x24>

0004344e <oma_tlv_put_u8>:
{
   4344e:	b5f0      	push	{r4, r5, r6, r7, lr}
   43450:	b085      	sub	sp, #20
   43452:	f88d 100f 	strb.w	r1, [sp, #15]
	if (insert) {
   43456:	b1e2      	cbz	r2, 43492 <oma_tlv_put_u8+0x44>
		fd = engine_get_out_user_data(out);
   43458:	6884      	ldr	r4, [r0, #8]
		if (!fd) {
   4345a:	b1bc      	cbz	r4, 4348c <oma_tlv_put_u8+0x3e>
		ret = buf_insert(CPKT_BUF_WRITE(out->out_cpkt),
   4345c:	6845      	ldr	r5, [r0, #4]
   4345e:	8826      	ldrh	r6, [r4, #0]
   43460:	682f      	ldr	r7, [r5, #0]
   43462:	88eb      	ldrh	r3, [r5, #6]
	if (!dst || !src) {
   43464:	b317      	cbz	r7, 434ac <oma_tlv_put_u8+0x5e>
	if (*dst_len + src_len > dst_size) {
   43466:	88aa      	ldrh	r2, [r5, #4]
   43468:	1c51      	adds	r1, r2, #1
   4346a:	4299      	cmp	r1, r3
   4346c:	dc21      	bgt.n	434b2 <oma_tlv_put_u8+0x64>
	memmove(dst + offset + src_len, dst + offset, *dst_len - offset);
   4346e:	1c70      	adds	r0, r6, #1
__ssp_bos_icheck3(memmove, void *, const void *)
   43470:	1b92      	subs	r2, r2, r6
   43472:	19b9      	adds	r1, r7, r6
   43474:	4438      	add	r0, r7
   43476:	f001 fd0b 	bl	44e90 <memmove>
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   4347a:	f89d 300f 	ldrb.w	r3, [sp, #15]
   4347e:	55bb      	strb	r3, [r7, r6]
	*dst_len += src_len;
   43480:	88ab      	ldrh	r3, [r5, #4]
   43482:	3301      	adds	r3, #1
   43484:	80ab      	strh	r3, [r5, #4]
		fd->mark_pos++;
   43486:	8823      	ldrh	r3, [r4, #0]
   43488:	3301      	adds	r3, #1
   4348a:	8023      	strh	r3, [r4, #0]
	return 0;
   4348c:	2000      	movs	r0, #0
}
   4348e:	b005      	add	sp, #20
   43490:	bdf0      	pop	{r4, r5, r6, r7, pc}
		ret = buf_append(CPKT_BUF_WRITE(out->out_cpkt), &value, 1);
   43492:	2301      	movs	r3, #1
   43494:	6840      	ldr	r0, [r0, #4]
   43496:	88c2      	ldrh	r2, [r0, #6]
   43498:	9300      	str	r3, [sp, #0]
   4349a:	1d01      	adds	r1, r0, #4
   4349c:	f10d 030f 	add.w	r3, sp, #15
   434a0:	6800      	ldr	r0, [r0, #0]
   434a2:	f7ff ffa1 	bl	433e8 <buf_append>
		if (ret < 0) {
   434a6:	ea00 70e0 	and.w	r0, r0, r0, asr #31
   434aa:	e7f0      	b.n	4348e <oma_tlv_put_u8+0x40>
		return -EINVAL;
   434ac:	f06f 0015 	mvn.w	r0, #21
   434b0:	e7ed      	b.n	4348e <oma_tlv_put_u8+0x40>
		return -ENOMEM;
   434b2:	f06f 000b 	mvn.w	r0, #11
   434b6:	e7ea      	b.n	4348e <oma_tlv_put_u8+0x40>

000434b8 <oma_tlv_put>:
{
   434b8:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   434bc:	4691      	mov	r9, r2
	len_type = get_len_type(tlv);
   434be:	6842      	ldr	r2, [r0, #4]
{
   434c0:	4605      	mov	r5, r0
	if (tlv->length < 8) {
   434c2:	2a07      	cmp	r2, #7
{
   434c4:	460e      	mov	r6, r1
   434c6:	461f      	mov	r7, r3
	if (tlv->length < 8) {
   434c8:	d924      	bls.n	43514 <oma_tlv_put+0x5c>
	} else if (tlv->length < 0x100) {
   434ca:	2aff      	cmp	r2, #255	; 0xff
   434cc:	d925      	bls.n	4351a <oma_tlv_put+0x62>
		return 2;
   434ce:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
   434d2:	bf2c      	ite	cs
   434d4:	f04f 0803 	movcs.w	r8, #3
   434d8:	f04f 0802 	movcc.w	r8, #2
	tmp = (tlv->type << 6) |
   434dc:	8869      	ldrh	r1, [r5, #2]
   434de:	782b      	ldrb	r3, [r5, #0]
   434e0:	29ff      	cmp	r1, #255	; 0xff
   434e2:	bf8c      	ite	hi
   434e4:	2120      	movhi	r1, #32
   434e6:	2100      	movls	r1, #0
	      (len_type << 3) |
   434e8:	f1b8 0f00 	cmp.w	r8, #0
   434ec:	bf18      	it	ne
   434ee:	2200      	movne	r2, #0
	tmp = (tlv->type << 6) |
   434f0:	019b      	lsls	r3, r3, #6
   434f2:	b25b      	sxtb	r3, r3
	      (tlv->id > 255 ? (1 << 5) : 0) |
   434f4:	ea43 03c8 	orr.w	r3, r3, r8, lsl #3
   434f8:	4319      	orrs	r1, r3
   434fa:	b2c9      	uxtb	r1, r1
	tmp = (tlv->type << 6) |
   434fc:	4311      	orrs	r1, r2
	ret = oma_tlv_put_u8(out, tmp, insert);
   434fe:	b2c9      	uxtb	r1, r1
   43500:	463a      	mov	r2, r7
   43502:	4630      	mov	r0, r6
   43504:	f7ff ffa3 	bl	4344e <oma_tlv_put_u8>
	if (ret < 0) {
   43508:	2800      	cmp	r0, #0
   4350a:	da09      	bge.n	43520 <oma_tlv_put+0x68>
		return 0;
   4350c:	2000      	movs	r0, #0
}
   4350e:	b002      	add	sp, #8
   43510:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		return 0;
   43514:	f04f 0800 	mov.w	r8, #0
   43518:	e7e0      	b.n	434dc <oma_tlv_put+0x24>
		return 1;
   4351a:	f04f 0801 	mov.w	r8, #1
   4351e:	e7dd      	b.n	434dc <oma_tlv_put+0x24>
	if (tlv->id > 255) {
   43520:	8869      	ldrh	r1, [r5, #2]
   43522:	29ff      	cmp	r1, #255	; 0xff
   43524:	d928      	bls.n	43578 <oma_tlv_put+0xc0>
		ret = oma_tlv_put_u8(out, (tlv->id >> 8) & 0xff, insert);
   43526:	463a      	mov	r2, r7
   43528:	0a09      	lsrs	r1, r1, #8
   4352a:	4630      	mov	r0, r6
   4352c:	f7ff ff8f 	bl	4344e <oma_tlv_put_u8>
		if (ret < 0) {
   43530:	2800      	cmp	r0, #0
   43532:	dbeb      	blt.n	4350c <oma_tlv_put+0x54>
		pos++;
   43534:	2402      	movs	r4, #2
	ret = oma_tlv_put_u8(out, tlv->id & 0xff, insert);
   43536:	463a      	mov	r2, r7
   43538:	78a9      	ldrb	r1, [r5, #2]
   4353a:	4630      	mov	r0, r6
   4353c:	f7ff ff87 	bl	4344e <oma_tlv_put_u8>
	if (ret < 0) {
   43540:	2800      	cmp	r0, #0
   43542:	dbe3      	blt.n	4350c <oma_tlv_put+0x54>
	for (i = 2; i >= 0; i--) {
   43544:	f04f 0a02 	mov.w	sl, #2
	pos++;
   43548:	3401      	adds	r4, #1
		if (len_type > i) {
   4354a:	45d0      	cmp	r8, sl
   4354c:	dd0b      	ble.n	43566 <oma_tlv_put+0xae>
					     (tlv->length >> (i * 8)) & 0xff,
   4354e:	6869      	ldr	r1, [r5, #4]
   43550:	ea4f 03ca 	mov.w	r3, sl, lsl #3
   43554:	40d9      	lsrs	r1, r3
			ret = oma_tlv_put_u8(out,
   43556:	463a      	mov	r2, r7
   43558:	b2c9      	uxtb	r1, r1
   4355a:	4630      	mov	r0, r6
   4355c:	f7ff ff77 	bl	4344e <oma_tlv_put_u8>
			if (ret < 0) {
   43560:	2800      	cmp	r0, #0
   43562:	dbd3      	blt.n	4350c <oma_tlv_put+0x54>
			pos++;
   43564:	3401      	adds	r4, #1
	for (i = 2; i >= 0; i--) {
   43566:	f11a 3aff 	adds.w	sl, sl, #4294967295
   4356a:	d2ee      	bcs.n	4354a <oma_tlv_put+0x92>
	if (value != NULL && tlv->length > 0 && !insert) {
   4356c:	f1b9 0f00 	cmp.w	r9, #0
   43570:	d104      	bne.n	4357c <oma_tlv_put+0xc4>
	return pos + tlv->length;
   43572:	6868      	ldr	r0, [r5, #4]
   43574:	4420      	add	r0, r4
   43576:	e7ca      	b.n	4350e <oma_tlv_put+0x56>
	pos = 1;
   43578:	2401      	movs	r4, #1
   4357a:	e7dc      	b.n	43536 <oma_tlv_put+0x7e>
   4357c:	686b      	ldr	r3, [r5, #4]
	if (value != NULL && tlv->length > 0 && !insert) {
   4357e:	2b00      	cmp	r3, #0
   43580:	d0f7      	beq.n	43572 <oma_tlv_put+0xba>
   43582:	2f00      	cmp	r7, #0
   43584:	d1f5      	bne.n	43572 <oma_tlv_put+0xba>
		if (buf_append(CPKT_BUF_WRITE(out->out_cpkt),
   43586:	6870      	ldr	r0, [r6, #4]
   43588:	b29b      	uxth	r3, r3
   4358a:	88c2      	ldrh	r2, [r0, #6]
   4358c:	9300      	str	r3, [sp, #0]
   4358e:	1d01      	adds	r1, r0, #4
   43590:	464b      	mov	r3, r9
   43592:	6800      	ldr	r0, [r0, #0]
   43594:	f7ff ff28 	bl	433e8 <buf_append>
   43598:	2800      	cmp	r0, #0
   4359a:	daea      	bge.n	43572 <oma_tlv_put+0xba>
   4359c:	e7b6      	b.n	4350c <oma_tlv_put+0x54>

0004359e <put_string>:
{
   4359e:	b513      	push	{r0, r1, r4, lr}
	fd = engine_get_out_user_data(out);
   435a0:	6884      	ldr	r4, [r0, #8]
	if (!fd) {
   435a2:	b184      	cbz	r4, 435c6 <put_string+0x28>
			OMA_TLV_TYPE_RESOURCE_INSTANCE : OMA_TLV_TYPE_RESOURCE;
   435a4:	79a4      	ldrb	r4, [r4, #6]
   435a6:	07a4      	lsls	r4, r4, #30
   435a8:	d40f      	bmi.n	435ca <put_string+0x2c>
			path->res_inst_id : path->res_id;
   435aa:	888c      	ldrh	r4, [r1, #4]
			OMA_TLV_TYPE_RESOURCE_INSTANCE : OMA_TLV_TYPE_RESOURCE;
   435ac:	2103      	movs	r1, #3
		tlv->type = type;
   435ae:	f88d 1000 	strb.w	r1, [sp]
		tlv->length = buflen;
   435b2:	9301      	str	r3, [sp, #4]
	len = oma_tlv_put(&tlv, out, (u8_t *)buf, false);
   435b4:	4601      	mov	r1, r0
   435b6:	2300      	movs	r3, #0
   435b8:	4668      	mov	r0, sp
		tlv->id = id;
   435ba:	f8ad 4002 	strh.w	r4, [sp, #2]
	len = oma_tlv_put(&tlv, out, (u8_t *)buf, false);
   435be:	f7ff ff7b 	bl	434b8 <oma_tlv_put>
}
   435c2:	b002      	add	sp, #8
   435c4:	bd10      	pop	{r4, pc}
		return 0;
   435c6:	4620      	mov	r0, r4
   435c8:	e7fb      	b.n	435c2 <put_string+0x24>
			path->res_inst_id : path->res_id;
   435ca:	88cc      	ldrh	r4, [r1, #6]
			OMA_TLV_TYPE_RESOURCE_INSTANCE : OMA_TLV_TYPE_RESOURCE;
   435cc:	2101      	movs	r1, #1
   435ce:	e7ee      	b.n	435ae <put_string+0x10>

000435d0 <put_s64>:
{
   435d0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	fd = engine_get_out_user_data(out);
   435d2:	6884      	ldr	r4, [r0, #8]
	if (!fd) {
   435d4:	b1b4      	cbz	r4, 43604 <put_s64+0x34>
	net_value = sys_cpu_to_be64(value);
   435d6:	ba1b      	rev	r3, r3
   435d8:	ba12      	rev	r2, r2
   435da:	e9cd 3200 	strd	r3, r2, [sp]
			OMA_TLV_TYPE_RESOURCE_INSTANCE : OMA_TLV_TYPE_RESOURCE;
   435de:	79a3      	ldrb	r3, [r4, #6]
   435e0:	079b      	lsls	r3, r3, #30
   435e2:	d411      	bmi.n	43608 <put_s64+0x38>
   435e4:	2303      	movs	r3, #3
			path->res_inst_id : path->res_id;
   435e6:	888a      	ldrh	r2, [r1, #4]
		tlv->type = type;
   435e8:	f88d 3008 	strb.w	r3, [sp, #8]
		tlv->length = buflen;
   435ec:	2308      	movs	r3, #8
		tlv->id = id;
   435ee:	f8ad 200a 	strh.w	r2, [sp, #10]
		tlv->length = buflen;
   435f2:	9303      	str	r3, [sp, #12]
	len = oma_tlv_put(&tlv, out, (u8_t *)&net_value, false);
   435f4:	4601      	mov	r1, r0
   435f6:	2300      	movs	r3, #0
   435f8:	466a      	mov	r2, sp
   435fa:	a802      	add	r0, sp, #8
   435fc:	f7ff ff5c 	bl	434b8 <oma_tlv_put>
}
   43600:	b004      	add	sp, #16
   43602:	bd10      	pop	{r4, pc}
		return 0;
   43604:	4620      	mov	r0, r4
   43606:	e7fb      	b.n	43600 <put_s64+0x30>
			path->res_inst_id : path->res_id;
   43608:	88ca      	ldrh	r2, [r1, #6]
			OMA_TLV_TYPE_RESOURCE_INSTANCE : OMA_TLV_TYPE_RESOURCE;
   4360a:	2301      	movs	r3, #1
   4360c:	e7ec      	b.n	435e8 <put_s64+0x18>

0004360e <put_s32>:
{
   4360e:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	fd = engine_get_out_user_data(out);
   43610:	6883      	ldr	r3, [r0, #8]
	if (!fd) {
   43612:	b1ab      	cbz	r3, 43640 <put_s32+0x32>
			OMA_TLV_TYPE_RESOURCE_INSTANCE : OMA_TLV_TYPE_RESOURCE;
   43614:	799b      	ldrb	r3, [r3, #6]
   43616:	ba12      	rev	r2, r2
   43618:	079b      	lsls	r3, r3, #30
	net_value = sys_cpu_to_be32(value);
   4361a:	9201      	str	r2, [sp, #4]
			OMA_TLV_TYPE_RESOURCE_INSTANCE : OMA_TLV_TYPE_RESOURCE;
   4361c:	d412      	bmi.n	43644 <put_s32+0x36>
   4361e:	2303      	movs	r3, #3
			path->res_inst_id : path->res_id;
   43620:	888a      	ldrh	r2, [r1, #4]
		tlv->type = type;
   43622:	f88d 3008 	strb.w	r3, [sp, #8]
		tlv->length = buflen;
   43626:	2304      	movs	r3, #4
		tlv->id = id;
   43628:	f8ad 200a 	strh.w	r2, [sp, #10]
		tlv->length = buflen;
   4362c:	9303      	str	r3, [sp, #12]
	len = oma_tlv_put(&tlv, out, (u8_t *)&net_value, false);
   4362e:	4601      	mov	r1, r0
   43630:	2300      	movs	r3, #0
   43632:	aa01      	add	r2, sp, #4
   43634:	a802      	add	r0, sp, #8
   43636:	f7ff ff3f 	bl	434b8 <oma_tlv_put>
}
   4363a:	b005      	add	sp, #20
   4363c:	f85d fb04 	ldr.w	pc, [sp], #4
		return 0;
   43640:	4618      	mov	r0, r3
   43642:	e7fa      	b.n	4363a <put_s32+0x2c>
			path->res_inst_id : path->res_id;
   43644:	88ca      	ldrh	r2, [r1, #6]
			OMA_TLV_TYPE_RESOURCE_INSTANCE : OMA_TLV_TYPE_RESOURCE;
   43646:	2301      	movs	r3, #1
   43648:	e7eb      	b.n	43622 <put_s32+0x14>

0004364a <put_s16>:
{
   4364a:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	fd = engine_get_out_user_data(out);
   4364c:	6883      	ldr	r3, [r0, #8]
	if (!fd) {
   4364e:	b1cb      	cbz	r3, 43684 <put_s16+0x3a>
	net_value = sys_cpu_to_be16(value);
   43650:	b292      	uxth	r2, r2
			OMA_TLV_TYPE_RESOURCE_INSTANCE : OMA_TLV_TYPE_RESOURCE;
   43652:	799b      	ldrb	r3, [r3, #6]
	net_value = sys_cpu_to_be16(value);
   43654:	0214      	lsls	r4, r2, #8
   43656:	ea44 2212 	orr.w	r2, r4, r2, lsr #8
			OMA_TLV_TYPE_RESOURCE_INSTANCE : OMA_TLV_TYPE_RESOURCE;
   4365a:	079b      	lsls	r3, r3, #30
	net_value = sys_cpu_to_be16(value);
   4365c:	f8ad 2006 	strh.w	r2, [sp, #6]
			OMA_TLV_TYPE_RESOURCE_INSTANCE : OMA_TLV_TYPE_RESOURCE;
   43660:	d412      	bmi.n	43688 <put_s16+0x3e>
   43662:	2303      	movs	r3, #3
			path->res_inst_id : path->res_id;
   43664:	888a      	ldrh	r2, [r1, #4]
		tlv->type = type;
   43666:	f88d 3008 	strb.w	r3, [sp, #8]
		tlv->length = buflen;
   4366a:	2302      	movs	r3, #2
		tlv->id = id;
   4366c:	f8ad 200a 	strh.w	r2, [sp, #10]
		tlv->length = buflen;
   43670:	9303      	str	r3, [sp, #12]
	len = oma_tlv_put(&tlv, out, (u8_t *)&net_value, false);
   43672:	4601      	mov	r1, r0
   43674:	2300      	movs	r3, #0
   43676:	f10d 0206 	add.w	r2, sp, #6
   4367a:	a802      	add	r0, sp, #8
   4367c:	f7ff ff1c 	bl	434b8 <oma_tlv_put>
}
   43680:	b004      	add	sp, #16
   43682:	bd10      	pop	{r4, pc}
		return 0;
   43684:	4618      	mov	r0, r3
   43686:	e7fb      	b.n	43680 <put_s16+0x36>
			path->res_inst_id : path->res_id;
   43688:	88ca      	ldrh	r2, [r1, #6]
			OMA_TLV_TYPE_RESOURCE_INSTANCE : OMA_TLV_TYPE_RESOURCE;
   4368a:	2301      	movs	r3, #1
   4368c:	e7eb      	b.n	43666 <put_s16+0x1c>

0004368e <put_s8>:
{
   4368e:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	fd = engine_get_out_user_data(out);
   43690:	6883      	ldr	r3, [r0, #8]
{
   43692:	f88d 2007 	strb.w	r2, [sp, #7]
	if (!fd) {
   43696:	b1a3      	cbz	r3, 436c2 <put_s8+0x34>
			OMA_TLV_TYPE_RESOURCE_INSTANCE : OMA_TLV_TYPE_RESOURCE;
   43698:	799b      	ldrb	r3, [r3, #6]
   4369a:	079b      	lsls	r3, r3, #30
   4369c:	d413      	bmi.n	436c6 <put_s8+0x38>
   4369e:	2303      	movs	r3, #3
			path->res_inst_id : path->res_id;
   436a0:	888a      	ldrh	r2, [r1, #4]
		tlv->type = type;
   436a2:	f88d 3008 	strb.w	r3, [sp, #8]
		tlv->length = buflen;
   436a6:	2301      	movs	r3, #1
		tlv->id = id;
   436a8:	f8ad 200a 	strh.w	r2, [sp, #10]
		tlv->length = buflen;
   436ac:	9303      	str	r3, [sp, #12]
	len = oma_tlv_put(&tlv, out, (u8_t *)&value, false);
   436ae:	4601      	mov	r1, r0
   436b0:	2300      	movs	r3, #0
   436b2:	f10d 0207 	add.w	r2, sp, #7
   436b6:	a802      	add	r0, sp, #8
   436b8:	f7ff fefe 	bl	434b8 <oma_tlv_put>
}
   436bc:	b005      	add	sp, #20
   436be:	f85d fb04 	ldr.w	pc, [sp], #4
		return 0;
   436c2:	4618      	mov	r0, r3
   436c4:	e7fa      	b.n	436bc <put_s8+0x2e>
			path->res_inst_id : path->res_id;
   436c6:	88ca      	ldrh	r2, [r1, #6]
			OMA_TLV_TYPE_RESOURCE_INSTANCE : OMA_TLV_TYPE_RESOURCE;
   436c8:	2301      	movs	r3, #1
   436ca:	e7ea      	b.n	436a2 <put_s8+0x14>

000436cc <put_bool>:
	return put_s8(out, path, value_s8);
   436cc:	b252      	sxtb	r2, r2
   436ce:	f7ff bfde 	b.w	4368e <put_s8>

000436d2 <put_end_ri>:
	fd = engine_get_out_user_data(out);
   436d2:	6883      	ldr	r3, [r0, #8]
{
   436d4:	b513      	push	{r0, r1, r4, lr}
	if (!fd) {
   436d6:	b1ab      	cbz	r3, 43704 <put_end_ri+0x32>
	*writer_flags &= ~writer_flag;
   436d8:	799a      	ldrb	r2, [r3, #6]
			   OMA_TLV_TYPE_MULTI_RESOURCE, path->res_id);
   436da:	8889      	ldrh	r1, [r1, #4]
	*writer_flags &= ~writer_flag;
   436dc:	f022 0202 	bic.w	r2, r2, #2
   436e0:	719a      	strb	r2, [r3, #6]
	return put_end_tlv(out, fd->mark_pos_ri, &fd->writer_flags,
   436e2:	889c      	ldrh	r4, [r3, #4]
	len = out->out_cpkt->offset - mark_pos;
   436e4:	6842      	ldr	r2, [r0, #4]
   436e6:	8892      	ldrh	r2, [r2, #4]
	fd->mark_pos = mark_pos;
   436e8:	801c      	strh	r4, [r3, #0]
		tlv->type = type;
   436ea:	2302      	movs	r3, #2
	len = out->out_cpkt->offset - mark_pos;
   436ec:	1b12      	subs	r2, r2, r4
		tlv->type = type;
   436ee:	f88d 3000 	strb.w	r3, [sp]
		tlv->id = id;
   436f2:	f8ad 1002 	strh.w	r1, [sp, #2]
		tlv->length = buflen;
   436f6:	9201      	str	r2, [sp, #4]
	len = oma_tlv_put(&tlv, out, NULL, true) - tlv.length;
   436f8:	4601      	mov	r1, r0
   436fa:	2301      	movs	r3, #1
   436fc:	2200      	movs	r2, #0
   436fe:	4668      	mov	r0, sp
   43700:	f7ff feda 	bl	434b8 <oma_tlv_put>
}
   43704:	2000      	movs	r0, #0
   43706:	b002      	add	sp, #8
   43708:	bd10      	pop	{r4, pc}

0004370a <oma_tlv_get>:
{
   4370a:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
	tmp_offset = in->offset;
   4370e:	890b      	ldrh	r3, [r1, #8]
{
   43710:	4617      	mov	r7, r2
	if (buf_read_u8(&buf[0], CPKT_BUF_READ(in->in_cpkt), &tmp_offset) < 0) {
   43712:	684a      	ldr	r2, [r1, #4]
	return buf_read(value, sizeof(u8_t), src, src_len, offset);
   43714:	f10d 0a0e 	add.w	sl, sp, #14
	tmp_offset = in->offset;
   43718:	f8ad 300e 	strh.w	r3, [sp, #14]
   4371c:	88d3      	ldrh	r3, [r2, #6]
   4371e:	f8cd a000 	str.w	sl, [sp]
{
   43722:	4681      	mov	r9, r0
   43724:	4688      	mov	r8, r1
   43726:	6812      	ldr	r2, [r2, #0]
   43728:	2101      	movs	r1, #1
   4372a:	a803      	add	r0, sp, #12
   4372c:	f7ff fe76 	bl	4341c <buf_read>
	if (buf_read_u8(&buf[0], CPKT_BUF_READ(in->in_cpkt), &tmp_offset) < 0) {
   43730:	2800      	cmp	r0, #0
   43732:	db5f      	blt.n	437f4 <oma_tlv_get+0xea>
	tlv->type = (buf[0] >> 6) & 3;
   43734:	f89d 500c 	ldrb.w	r5, [sp, #12]
   43738:	2101      	movs	r1, #1
   4373a:	09ab      	lsrs	r3, r5, #6
   4373c:	f889 3000 	strb.w	r3, [r9]
	if (buf_read_u8(&buf[1], CPKT_BUF_READ(in->in_cpkt), &tmp_offset) < 0) {
   43740:	f8d8 2004 	ldr.w	r2, [r8, #4]
	len_pos = 1 + (((buf[0] & (1 << 5)) != 0U) ? 2 : 1);
   43744:	f015 0f20 	tst.w	r5, #32
   43748:	88d3      	ldrh	r3, [r2, #6]
   4374a:	f8cd a000 	str.w	sl, [sp]
   4374e:	6812      	ldr	r2, [r2, #0]
   43750:	f10d 000d 	add.w	r0, sp, #13
   43754:	bf0c      	ite	eq
   43756:	2602      	moveq	r6, #2
   43758:	2603      	movne	r6, #3
   4375a:	f7ff fe5f 	bl	4341c <buf_read>
	if (buf_read_u8(&buf[1], CPKT_BUF_READ(in->in_cpkt), &tmp_offset) < 0) {
   4375e:	2800      	cmp	r0, #0
   43760:	da03      	bge.n	4376a <oma_tlv_get+0x60>
		return 0;
   43762:	2000      	movs	r0, #0
}
   43764:	b004      	add	sp, #16
   43766:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	tlv->id = buf[1];
   4376a:	f89d 300d 	ldrb.w	r3, [sp, #13]
	if (len_pos > 2) {
   4376e:	2e03      	cmp	r6, #3
	tlv->id = buf[1];
   43770:	f8a9 3002 	strh.w	r3, [r9, #2]
	if (len_pos > 2) {
   43774:	d114      	bne.n	437a0 <oma_tlv_get+0x96>
		if (buf_read_u8(&buf[1], CPKT_BUF_READ(in->in_cpkt),
   43776:	f8d8 2004 	ldr.w	r2, [r8, #4]
   4377a:	2101      	movs	r1, #1
   4377c:	88d3      	ldrh	r3, [r2, #6]
   4377e:	f8cd a000 	str.w	sl, [sp]
   43782:	6812      	ldr	r2, [r2, #0]
   43784:	f10d 000d 	add.w	r0, sp, #13
   43788:	f7ff fe48 	bl	4341c <buf_read>
   4378c:	2800      	cmp	r0, #0
   4378e:	db31      	blt.n	437f4 <oma_tlv_get+0xea>
		tlv->id = (tlv->id << 8) + buf[1];
   43790:	f8b9 2002 	ldrh.w	r2, [r9, #2]
   43794:	f89d 300d 	ldrb.w	r3, [sp, #13]
   43798:	eb03 2302 	add.w	r3, r3, r2, lsl #8
   4379c:	f8a9 3002 	strh.w	r3, [r9, #2]
	len_type = (buf[0] >> 3) & 3;
   437a0:	f3c5 05c1 	ubfx	r5, r5, #3, #2
	if (len_type == 0U) {
   437a4:	b96d      	cbnz	r5, 437c2 <oma_tlv_get+0xb8>
		tlv_len = buf[0] & 7;
   437a6:	4634      	mov	r4, r6
   437a8:	f89d 000c 	ldrb.w	r0, [sp, #12]
   437ac:	f000 0507 	and.w	r5, r0, #7
	tlv->length = tlv_len;
   437b0:	f8c9 5004 	str.w	r5, [r9, #4]
	if (!dont_advance) {
   437b4:	b91f      	cbnz	r7, 437be <oma_tlv_get+0xb4>
		in->offset = tmp_offset;
   437b6:	f8bd 300e 	ldrh.w	r3, [sp, #14]
   437ba:	f8a8 3008 	strh.w	r3, [r8, #8]
	return len_pos + tlv_len;
   437be:	1960      	adds	r0, r4, r5
   437c0:	e7d0      	b.n	43764 <oma_tlv_get+0x5a>
   437c2:	4435      	add	r5, r6
   437c4:	b2ec      	uxtb	r4, r5
		tlv_len = 0;
   437c6:	2500      	movs	r5, #0
			if (buf_read_u8(&buf[1], CPKT_BUF_READ(in->in_cpkt),
   437c8:	f8d8 2004 	ldr.w	r2, [r8, #4]
   437cc:	2101      	movs	r1, #1
   437ce:	88d3      	ldrh	r3, [r2, #6]
   437d0:	f8cd a000 	str.w	sl, [sp]
   437d4:	6812      	ldr	r2, [r2, #0]
   437d6:	f10d 000d 	add.w	r0, sp, #13
   437da:	f7ff fe1f 	bl	4341c <buf_read>
   437de:	2800      	cmp	r0, #0
   437e0:	db08      	blt.n	437f4 <oma_tlv_get+0xea>
			len_pos++;
   437e2:	3601      	adds	r6, #1
   437e4:	b2f6      	uxtb	r6, r6
			tlv_len = tlv_len << 8 | buf[1];
   437e6:	f89d 300d 	ldrb.w	r3, [sp, #13]
		while (len_type > 0) {
   437ea:	42b4      	cmp	r4, r6
			tlv_len = tlv_len << 8 | buf[1];
   437ec:	ea43 2505 	orr.w	r5, r3, r5, lsl #8
		while (len_type > 0) {
   437f0:	d1ea      	bne.n	437c8 <oma_tlv_get+0xbe>
   437f2:	e7dd      	b.n	437b0 <oma_tlv_get+0xa6>
	if (!dont_advance) {
   437f4:	2f00      	cmp	r7, #0
   437f6:	d1b4      	bne.n	43762 <oma_tlv_get+0x58>
		in->offset = tmp_offset;
   437f8:	f8bd 300e 	ldrh.w	r3, [sp, #14]
	return 0;
   437fc:	4638      	mov	r0, r7
		in->offset = tmp_offset;
   437fe:	f8a8 3008 	strh.w	r3, [r8, #8]
   43802:	e7af      	b.n	43764 <oma_tlv_get+0x5a>

00043804 <do_write_op_tlv_dummy_read>:
	engine_clear_out_user_data(&msg->out);
	return ret;
}

static int do_write_op_tlv_dummy_read(struct lwm2m_message *msg)
{
   43804:	b530      	push	{r4, r5, lr}
   43806:	b087      	sub	sp, #28
   43808:	4604      	mov	r4, r0
	struct oma_tlv tlv;
	u8_t read_char;

	oma_tlv_get(&tlv, &msg->in, false);
   4380a:	1d01      	adds	r1, r0, #4
   4380c:	2200      	movs	r2, #0
   4380e:	a804      	add	r0, sp, #16
   43810:	f7ff ff7b 	bl	4370a <oma_tlv_get>
	while (tlv.length--) {
		if (buf_read_u8(&read_char, CPKT_BUF_READ(msg->in.in_cpkt),
   43814:	f104 050c 	add.w	r5, r4, #12
	while (tlv.length--) {
   43818:	9b05      	ldr	r3, [sp, #20]
   4381a:	1e5a      	subs	r2, r3, #1
   4381c:	9205      	str	r2, [sp, #20]
   4381e:	b153      	cbz	r3, 43836 <do_write_op_tlv_dummy_read+0x32>
		if (buf_read_u8(&read_char, CPKT_BUF_READ(msg->in.in_cpkt),
   43820:	68a2      	ldr	r2, [r4, #8]
   43822:	2101      	movs	r1, #1
   43824:	88d3      	ldrh	r3, [r2, #6]
   43826:	9500      	str	r5, [sp, #0]
   43828:	6812      	ldr	r2, [r2, #0]
   4382a:	f10d 000f 	add.w	r0, sp, #15
   4382e:	f7ff fdf5 	bl	4341c <buf_read>
   43832:	2800      	cmp	r0, #0
   43834:	daf0      	bge.n	43818 <do_write_op_tlv_dummy_read+0x14>
			break;
		}
	}

	return 0;
}
   43836:	2000      	movs	r0, #0
   43838:	b007      	add	sp, #28
   4383a:	bd30      	pop	{r4, r5, pc}

0004383c <do_write_op_tlv_item>:

static int do_write_op_tlv_item(struct lwm2m_message *msg)
{
   4383c:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	struct lwm2m_engine_obj_inst *obj_inst = NULL;
   43840:	2600      	movs	r6, #0
	struct lwm2m_engine_res_inst *res_inst = NULL;
	struct lwm2m_engine_obj_field *obj_field = NULL;
	u8_t created = 0U;
	int ret, i;

	ret = lwm2m_get_or_create_engine_obj(msg, &obj_inst, &created);
   43842:	f10d 020b 	add.w	r2, sp, #11
   43846:	a903      	add	r1, sp, #12
{
   43848:	4605      	mov	r5, r0
	struct lwm2m_engine_obj_inst *obj_inst = NULL;
   4384a:	9603      	str	r6, [sp, #12]
	u8_t created = 0U;
   4384c:	f88d 600b 	strb.w	r6, [sp, #11]
	ret = lwm2m_get_or_create_engine_obj(msg, &obj_inst, &created);
   43850:	f7ff fc81 	bl	43156 <lwm2m_get_or_create_engine_obj>
	if (ret < 0) {
   43854:	1e04      	subs	r4, r0, #0
   43856:	db3b      	blt.n	438d0 <do_write_op_tlv_item+0x94>
		goto error;
	}

	obj_field = lwm2m_get_engine_obj_field(obj_inst->obj,
   43858:	9b03      	ldr	r3, [sp, #12]
   4385a:	8ca9      	ldrh	r1, [r5, #36]	; 0x24
   4385c:	6858      	ldr	r0, [r3, #4]
   4385e:	f7ff fb87 	bl	42f70 <lwm2m_get_engine_obj_field>
					       msg->path.res_id);
	if (!obj_field) {
   43862:	4603      	mov	r3, r0
   43864:	2800      	cmp	r0, #0
   43866:	d03d      	beq.n	438e4 <do_write_op_tlv_item+0xa8>
		ret = -ENOENT;
		goto error;
	}

	if (!LWM2M_HAS_PERM(obj_field, LWM2M_PERM_W)) {
   43868:	7887      	ldrb	r7, [r0, #2]
   4386a:	f007 0206 	and.w	r2, r7, #6
   4386e:	2a06      	cmp	r2, #6
   43870:	d132      	bne.n	438d8 <do_write_op_tlv_item+0x9c>
		ret = -EPERM;
		goto error;
	}

	if (!obj_inst->resources || obj_inst->resource_count == 0U) {
   43872:	9803      	ldr	r0, [sp, #12]
   43874:	6881      	ldr	r1, [r0, #8]
   43876:	b391      	cbz	r1, 438de <do_write_op_tlv_item+0xa2>
   43878:	89c2      	ldrh	r2, [r0, #14]
   4387a:	b382      	cbz	r2, 438de <do_write_op_tlv_item+0xa2>
		ret = -EINVAL;
		goto error;
	}

	for (i = 0; i < obj_inst->resource_count; i++) {
		if (obj_inst->resources[i].res_id == msg->path.res_id) {
   4387c:	8cac      	ldrh	r4, [r5, #36]	; 0x24
   4387e:	f8b1 c014 	ldrh.w	ip, [r1, #20]
   43882:	45a4      	cmp	ip, r4
   43884:	d110      	bne.n	438a8 <do_write_op_tlv_item+0x6c>
			break;
		}
	}

	if (res) {
		for (i = 0; i < res->res_inst_count; i++) {
   43886:	2400      	movs	r4, #0
			if (res->res_instances[i].res_inst_id ==
   43888:	f04f 0c0c 	mov.w	ip, #12
		for (i = 0; i < res->res_inst_count; i++) {
   4388c:	7d8e      	ldrb	r6, [r1, #22]
   4388e:	42a6      	cmp	r6, r4
   43890:	dd0f      	ble.n	438b2 <do_write_op_tlv_item+0x76>
			if (res->res_instances[i].res_inst_id ==
   43892:	690a      	ldr	r2, [r1, #16]
   43894:	f8b5 e026 	ldrh.w	lr, [r5, #38]	; 0x26
   43898:	fb0c 2204 	mla	r2, ip, r4, r2
   4389c:	f8b2 8006 	ldrh.w	r8, [r2, #6]
   438a0:	45f0      	cmp	r8, lr
   438a2:	d022      	beq.n	438ea <do_write_op_tlv_item+0xae>
		for (i = 0; i < res->res_inst_count; i++) {
   438a4:	3401      	adds	r4, #1
   438a6:	e7f2      	b.n	4388e <do_write_op_tlv_item+0x52>
	for (i = 0; i < obj_inst->resource_count; i++) {
   438a8:	3601      	adds	r6, #1
   438aa:	42b2      	cmp	r2, r6
   438ac:	f101 0118 	add.w	r1, r1, #24
   438b0:	dce5      	bgt.n	4387e <do_write_op_tlv_item+0x42>
		}
	}

	if (!res || !res_inst) {
		/* if OPTIONAL and BOOTSTRAP-WRITE or CREATE use ENOTSUP */
		if ((msg->ctx->bootstrap_mode ||
   438b2:	682b      	ldr	r3, [r5, #0]
   438b4:	f893 3128 	ldrb.w	r3, [r3, #296]	; 0x128
   438b8:	b91b      	cbnz	r3, 438c2 <do_write_op_tlv_item+0x86>
   438ba:	f895 3185 	ldrb.w	r3, [r5, #389]	; 0x185
   438be:	2b02      	cmp	r3, #2
   438c0:	d110      	bne.n	438e4 <do_write_op_tlv_item+0xa8>
		     msg->operation == LWM2M_OP_CREATE) &&
		    LWM2M_HAS_PERM(obj_field, BIT(LWM2M_FLAG_OPTIONAL))) {
			ret = -ENOTSUP;
   438c2:	f017 0f80 	tst.w	r7, #128	; 0x80
   438c6:	bf0c      	ite	eq
   438c8:	f06f 0401 	mvneq.w	r4, #1
   438cc:	f06f 0485 	mvnne.w	r4, #133	; 0x85
	}

	return ret;

error:
	do_write_op_tlv_dummy_read(msg);
   438d0:	4628      	mov	r0, r5
   438d2:	f7ff ff97 	bl	43804 <do_write_op_tlv_dummy_read>
	return ret;
   438d6:	e015      	b.n	43904 <do_write_op_tlv_item+0xc8>
		ret = -EPERM;
   438d8:	f04f 34ff 	mov.w	r4, #4294967295
   438dc:	e7f8      	b.n	438d0 <do_write_op_tlv_item+0x94>
		ret = -EINVAL;
   438de:	f06f 0415 	mvn.w	r4, #21
   438e2:	e7f5      	b.n	438d0 <do_write_op_tlv_item+0x94>
		ret = -ENOENT;
   438e4:	f06f 0401 	mvn.w	r4, #1
   438e8:	e7f2      	b.n	438d0 <do_write_op_tlv_item+0x94>
	ret = lwm2m_write_handler(obj_inst, res, res_inst, obj_field, msg);
   438ea:	9500      	str	r5, [sp, #0]
   438ec:	f7e6 fff0 	bl	2a8d0 <lwm2m_write_handler>
	if (ret == -EACCES || ret == -ENOENT) {
   438f0:	f110 0f0d 	cmn.w	r0, #13
	ret = lwm2m_write_handler(obj_inst, res, res_inst, obj_field, msg);
   438f4:	4604      	mov	r4, r0
	if (ret == -EACCES || ret == -ENOENT) {
   438f6:	d001      	beq.n	438fc <do_write_op_tlv_item+0xc0>
   438f8:	1ca3      	adds	r3, r4, #2
   438fa:	d103      	bne.n	43904 <do_write_op_tlv_item+0xc8>
		do_write_op_tlv_dummy_read(msg);
   438fc:	4628      	mov	r0, r5
   438fe:	f7ff ff81 	bl	43804 <do_write_op_tlv_dummy_read>
		ret = 0;
   43902:	2400      	movs	r4, #0
}
   43904:	4620      	mov	r0, r4
   43906:	b004      	add	sp, #16
   43908:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0004390c <get_bool>:
	*value = 0;
   4390c:	2300      	movs	r3, #0
{
   4390e:	b513      	push	{r0, r1, r4, lr}
	size = get_number(in, &temp, 2);
   43910:	2202      	movs	r2, #2
{
   43912:	460c      	mov	r4, r1
	*value = 0;
   43914:	700b      	strb	r3, [r1, #0]
	size = get_number(in, &temp, 2);
   43916:	4669      	mov	r1, sp
   43918:	f7e8 fe60 	bl	2c5dc <get_number>
	if (size > 0) {
   4391c:	b130      	cbz	r0, 4392c <get_bool+0x20>
		*value = (temp != 0);
   4391e:	e9dd 2300 	ldrd	r2, r3, [sp]
   43922:	4313      	orrs	r3, r2
   43924:	bf14      	ite	ne
   43926:	2301      	movne	r3, #1
   43928:	2300      	moveq	r3, #0
   4392a:	7023      	strb	r3, [r4, #0]
}
   4392c:	b002      	add	sp, #8
   4392e:	bd10      	pop	{r4, pc}

00043930 <get_s64>:
	return get_number(in, value, 8);
   43930:	2208      	movs	r2, #8
   43932:	f7e8 be53 	b.w	2c5dc <get_number>

00043936 <get_s32>:
	*value = 0;
   43936:	2300      	movs	r3, #0
{
   43938:	b513      	push	{r0, r1, r4, lr}
	size = get_number(in, &temp, 4);
   4393a:	2204      	movs	r2, #4
{
   4393c:	460c      	mov	r4, r1
	*value = 0;
   4393e:	600b      	str	r3, [r1, #0]
	size = get_number(in, &temp, 4);
   43940:	4669      	mov	r1, sp
   43942:	f7e8 fe4b 	bl	2c5dc <get_number>
	if (size > 0) {
   43946:	b108      	cbz	r0, 4394c <get_s32+0x16>
		*value = (s32_t)temp;
   43948:	9b00      	ldr	r3, [sp, #0]
   4394a:	6023      	str	r3, [r4, #0]
}
   4394c:	b002      	add	sp, #8
   4394e:	bd10      	pop	{r4, pc}

00043950 <get_string>:
{
   43950:	b5f0      	push	{r4, r5, r6, r7, lr}
   43952:	b085      	sub	sp, #20
   43954:	4604      	mov	r4, r0
   43956:	460e      	mov	r6, r1
   43958:	4617      	mov	r7, r2
	size_t size = oma_tlv_get(&tlv, in, false);
   4395a:	4601      	mov	r1, r0
   4395c:	2200      	movs	r2, #0
   4395e:	a802      	add	r0, sp, #8
   43960:	f7ff fed3 	bl	4370a <oma_tlv_get>
	if (size > 0) {
   43964:	4605      	mov	r5, r0
   43966:	b918      	cbnz	r0, 43970 <get_string+0x20>
{
   43968:	2500      	movs	r5, #0
}
   4396a:	4628      	mov	r0, r5
   4396c:	b005      	add	sp, #20
   4396e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (buflen <= tlv.length) {
   43970:	9903      	ldr	r1, [sp, #12]
   43972:	42b9      	cmp	r1, r7
   43974:	d2f8      	bcs.n	43968 <get_string+0x18>
		if (buf_read(buf, tlv.length, CPKT_BUF_READ(in->in_cpkt),
   43976:	6862      	ldr	r2, [r4, #4]
   43978:	3408      	adds	r4, #8
   4397a:	88d3      	ldrh	r3, [r2, #6]
   4397c:	9400      	str	r4, [sp, #0]
   4397e:	6812      	ldr	r2, [r2, #0]
   43980:	b289      	uxth	r1, r1
   43982:	4630      	mov	r0, r6
   43984:	f7ff fd4a 	bl	4341c <buf_read>
   43988:	2800      	cmp	r0, #0
   4398a:	dbed      	blt.n	43968 <get_string+0x18>
		buf[tlv.length] = '\0';
   4398c:	2200      	movs	r2, #0
   4398e:	9b03      	ldr	r3, [sp, #12]
   43990:	54f2      	strb	r2, [r6, r3]
   43992:	e7ea      	b.n	4396a <get_string+0x1a>

00043994 <get_opaque>:
{
   43994:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   43996:	4604      	mov	r4, r0
   43998:	461f      	mov	r7, r3
   4399a:	460d      	mov	r5, r1
   4399c:	4616      	mov	r6, r2
	oma_tlv_get(&tlv, in, false);
   4399e:	4601      	mov	r1, r0
   439a0:	2200      	movs	r2, #0
   439a2:	4668      	mov	r0, sp
   439a4:	f7ff feb1 	bl	4370a <oma_tlv_get>
	in->opaque_len = tlv.length;
   439a8:	9b01      	ldr	r3, [sp, #4]
	return lwm2m_engine_get_opaque_more(in, value, buflen, last_block);
   439aa:	4632      	mov	r2, r6
	in->opaque_len = tlv.length;
   439ac:	8163      	strh	r3, [r4, #10]
	return lwm2m_engine_get_opaque_more(in, value, buflen, last_block);
   439ae:	4629      	mov	r1, r5
   439b0:	463b      	mov	r3, r7
   439b2:	4620      	mov	r0, r4
   439b4:	f7ff fbaa 	bl	4310c <lwm2m_engine_get_opaque_more>
}
   439b8:	b003      	add	sp, #12
   439ba:	bdf0      	pop	{r4, r5, r6, r7, pc}

000439bc <put_end_oi>:
	fd = engine_get_out_user_data(out);
   439bc:	6882      	ldr	r2, [r0, #8]
{
   439be:	b513      	push	{r0, r1, r4, lr}
	if (!fd) {
   439c0:	b182      	cbz	r2, 439e4 <put_end_oi+0x28>
	return put_end_tlv(out, fd->mark_pos_oi, &fd->writer_flags, 0,
   439c2:	8854      	ldrh	r4, [r2, #2]
	len = out->out_cpkt->offset - mark_pos;
   439c4:	6843      	ldr	r3, [r0, #4]
			   OMA_TLV_TYPE_OBJECT_INSTANCE, path->obj_inst_id);
   439c6:	8849      	ldrh	r1, [r1, #2]
	len = out->out_cpkt->offset - mark_pos;
   439c8:	889b      	ldrh	r3, [r3, #4]
	fd->mark_pos = mark_pos;
   439ca:	8014      	strh	r4, [r2, #0]
		tlv->type = type;
   439cc:	2200      	movs	r2, #0
	len = out->out_cpkt->offset - mark_pos;
   439ce:	1b1b      	subs	r3, r3, r4
		tlv->id = id;
   439d0:	f8ad 1002 	strh.w	r1, [sp, #2]
		tlv->length = buflen;
   439d4:	9301      	str	r3, [sp, #4]
	len = oma_tlv_put(&tlv, out, NULL, true) - tlv.length;
   439d6:	4601      	mov	r1, r0
   439d8:	2301      	movs	r3, #1
   439da:	4668      	mov	r0, sp
		tlv->type = type;
   439dc:	f88d 2000 	strb.w	r2, [sp]
	len = oma_tlv_put(&tlv, out, NULL, true) - tlv.length;
   439e0:	f7ff fd6a 	bl	434b8 <oma_tlv_put>
}
   439e4:	2000      	movs	r0, #0
   439e6:	b002      	add	sp, #8
   439e8:	bd10      	pop	{r4, pc}

000439ea <do_read_op_tlv>:
{
   439ea:	b537      	push	{r0, r1, r2, r4, r5, lr}
	(void)memset(&fd, 0, sizeof(fd));
   439ec:	2400      	movs	r4, #0
	out->user_data = user_data;
   439ee:	f8c0 d01c 	str.w	sp, [r0, #28]
	ret = lwm2m_perform_read_op(msg, content_format);
   439f2:	b289      	uxth	r1, r1
{
   439f4:	4605      	mov	r5, r0
	(void)memset(&fd, 0, sizeof(fd));
   439f6:	e9cd 4400 	strd	r4, r4, [sp]
	ret = lwm2m_perform_read_op(msg, content_format);
   439fa:	f7e7 f899 	bl	2ab30 <lwm2m_perform_read_op>
	out->user_data = NULL;
   439fe:	61ec      	str	r4, [r5, #28]
}
   43a00:	b003      	add	sp, #12
   43a02:	bd30      	pop	{r4, r5, pc}

00043a04 <do_write_op_tlv>:

int do_write_op_tlv(struct lwm2m_message *msg)
{
	struct lwm2m_engine_obj_inst *obj_inst = NULL;
   43a04:	2300      	movs	r3, #0
{
   43a06:	b5f0      	push	{r4, r5, r6, r7, lr}
   43a08:	4604      	mov	r4, r0
   43a0a:	b087      	sub	sp, #28
	struct lwm2m_engine_obj_inst *obj_inst = NULL;
   43a0c:	9301      	str	r3, [sp, #4]
	while (true) {
		/*
		 * This initial read of TLV data won't advance frag/offset.
		 * We need tlv.type to determine how to proceed.
		 */
		len = oma_tlv_get(&tlv, &msg->in, true);
   43a0e:	1d06      	adds	r6, r0, #4
   43a10:	2201      	movs	r2, #1
   43a12:	4631      	mov	r1, r6
   43a14:	a802      	add	r0, sp, #8
   43a16:	f7ff fe78 	bl	4370a <oma_tlv_get>
		if (len == 0) {
   43a1a:	2800      	cmp	r0, #0
   43a1c:	d040      	beq.n	43aa0 <do_write_op_tlv+0x9c>
			break;
		}

		if (tlv.type == OMA_TLV_TYPE_OBJECT_INSTANCE) {
   43a1e:	f89d 2008 	ldrb.w	r2, [sp, #8]
   43a22:	2a00      	cmp	r2, #0
   43a24:	d13e      	bne.n	43aa4 <do_write_op_tlv+0xa0>
			struct oma_tlv tlv2;
			int len2;
			int pos = 0;

			oma_tlv_get(&tlv, &msg->in, false);
   43a26:	4631      	mov	r1, r6
   43a28:	a802      	add	r0, sp, #8
   43a2a:	f7ff fe6e 	bl	4370a <oma_tlv_get>
			msg->path.obj_inst_id = tlv.id;
   43a2e:	f8bd 100a 	ldrh.w	r1, [sp, #10]
			if (tlv.length == 0U) {
   43a32:	9b03      	ldr	r3, [sp, #12]
			msg->path.obj_inst_id = tlv.id;
   43a34:	8461      	strh	r1, [r4, #34]	; 0x22
			if (tlv.length == 0U) {
   43a36:	b95b      	cbnz	r3, 43a50 <do_write_op_tlv+0x4c>
				/* Create only - no data */
				ret = lwm2m_create_obj_inst(
   43a38:	aa01      	add	r2, sp, #4
   43a3a:	8c20      	ldrh	r0, [r4, #32]
   43a3c:	f7e5 f892 	bl	28b64 <lwm2m_create_obj_inst>
						msg->path.obj_id,
						msg->path.obj_inst_id,
						&obj_inst);
				if (ret < 0) {
   43a40:	2800      	cmp	r0, #0
   43a42:	db2d      	blt.n	43aa0 <do_write_op_tlv+0x9c>
					return ret;
				}

#ifdef CONFIG_LWM2M_RD_CLIENT_SUPPORT
				if (!msg->ctx->bootstrap_mode) {
   43a44:	6823      	ldr	r3, [r4, #0]
   43a46:	f893 3128 	ldrb.w	r3, [r3, #296]	; 0x128
   43a4a:	b90b      	cbnz	r3, 43a50 <do_write_op_tlv+0x4c>
					engine_trigger_update();
   43a4c:	f7e9 fc74 	bl	2d338 <engine_trigger_update>
{
   43a50:	2500      	movs	r5, #0
				}
#endif
			}

			while (pos < tlv.length &&
   43a52:	9b03      	ldr	r3, [sp, #12]
   43a54:	42ab      	cmp	r3, r5
   43a56:	d9db      	bls.n	43a10 <do_write_op_tlv+0xc>
			       (len2 = oma_tlv_get(&tlv2, &msg->in, true))) {
   43a58:	2201      	movs	r2, #1
   43a5a:	4631      	mov	r1, r6
   43a5c:	a804      	add	r0, sp, #16
   43a5e:	f7ff fe54 	bl	4370a <oma_tlv_get>
			while (pos < tlv.length &&
   43a62:	4607      	mov	r7, r0
   43a64:	2800      	cmp	r0, #0
   43a66:	d0d3      	beq.n	43a10 <do_write_op_tlv+0xc>
				if (tlv2.type != OMA_TLV_TYPE_RESOURCE) {
   43a68:	f89d 3010 	ldrb.w	r3, [sp, #16]
   43a6c:	2b03      	cmp	r3, #3
   43a6e:	d001      	beq.n	43a74 <do_write_op_tlv+0x70>
				      (msg->ctx->bootstrap_mode ||
				       msg->operation == LWM2M_OP_CREATE))) {
					return ret;
				}

				pos += len2;
   43a70:	443d      	add	r5, r7
   43a72:	e7ee      	b.n	43a52 <do_write_op_tlv+0x4e>
				msg->path.res_id = tlv2.id;
   43a74:	f8bd 2012 	ldrh.w	r2, [sp, #18]
				msg->path.level = 3U;
   43a78:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
				msg->path.res_id = tlv2.id;
   43a7c:	84a2      	strh	r2, [r4, #36]	; 0x24
				ret = do_write_op_tlv_item(msg);
   43a7e:	4620      	mov	r0, r4
   43a80:	f7ff fedc 	bl	4383c <do_write_op_tlv_item>
				if (ret < 0 &&
   43a84:	2800      	cmp	r0, #0
   43a86:	daf3      	bge.n	43a70 <do_write_op_tlv+0x6c>
   43a88:	f110 0f86 	cmn.w	r0, #134	; 0x86
   43a8c:	d108      	bne.n	43aa0 <do_write_op_tlv+0x9c>
				      (msg->ctx->bootstrap_mode ||
   43a8e:	6823      	ldr	r3, [r4, #0]
				    !((ret == -ENOTSUP) &&
   43a90:	f893 3128 	ldrb.w	r3, [r3, #296]	; 0x128
   43a94:	2b00      	cmp	r3, #0
   43a96:	d1eb      	bne.n	43a70 <do_write_op_tlv+0x6c>
				      (msg->ctx->bootstrap_mode ||
   43a98:	f894 3185 	ldrb.w	r3, [r4, #389]	; 0x185
   43a9c:	2b02      	cmp	r3, #2
   43a9e:	d0e7      	beq.n	43a70 <do_write_op_tlv+0x6c>
			}
		}
	}

	return 0;
}
   43aa0:	b007      	add	sp, #28
   43aa2:	bdf0      	pop	{r4, r5, r6, r7, pc}
		} else if (tlv.type == OMA_TLV_TYPE_RESOURCE) {
   43aa4:	2a03      	cmp	r2, #3
   43aa6:	d1b3      	bne.n	43a10 <do_write_op_tlv+0xc>
			msg->path.res_id = tlv.id;
   43aa8:	f8bd 300a 	ldrh.w	r3, [sp, #10]
			msg->path.level = 3U;
   43aac:	f884 2028 	strb.w	r2, [r4, #40]	; 0x28
			msg->path.res_id = tlv.id;
   43ab0:	84a3      	strh	r3, [r4, #36]	; 0x24
			ret = do_write_op_tlv_item(msg);
   43ab2:	4620      	mov	r0, r4
   43ab4:	f7ff fec2 	bl	4383c <do_write_op_tlv_item>
			if (ret < 0 &&
   43ab8:	2800      	cmp	r0, #0
   43aba:	daa9      	bge.n	43a10 <do_write_op_tlv+0xc>
   43abc:	f110 0f86 	cmn.w	r0, #134	; 0x86
   43ac0:	d1ee      	bne.n	43aa0 <do_write_op_tlv+0x9c>
			      (msg->ctx->bootstrap_mode ||
   43ac2:	6823      	ldr	r3, [r4, #0]
			    !((ret == -ENOTSUP) &&
   43ac4:	f893 3128 	ldrb.w	r3, [r3, #296]	; 0x128
   43ac8:	2b00      	cmp	r3, #0
   43aca:	d1a1      	bne.n	43a10 <do_write_op_tlv+0xc>
			      (msg->ctx->bootstrap_mode ||
   43acc:	f894 3185 	ldrb.w	r3, [r4, #389]	; 0x185
   43ad0:	2b02      	cmp	r3, #2
   43ad2:	d09d      	beq.n	43a10 <do_write_op_tlv+0xc>
   43ad4:	e7e4      	b.n	43aa0 <do_write_op_tlv+0x9c>

00043ad6 <set_update_result_from_error>:
	if (error_code == -ENOMEM) {
   43ad6:	f110 0f0c 	cmn.w	r0, #12
   43ada:	d102      	bne.n	43ae2 <set_update_result_from_error+0xc>
		lwm2m_firmware_set_update_result(RESULT_OUT_OF_MEM);
   43adc:	2003      	movs	r0, #3
		lwm2m_firmware_set_update_result(RESULT_UPDATE_FAILED);
   43ade:	f7e9 be41 	b.w	2d764 <lwm2m_firmware_set_update_result>
	} else if (error_code == -ENOSPC) {
   43ae2:	f110 0f1c 	cmn.w	r0, #28
   43ae6:	d101      	bne.n	43aec <set_update_result_from_error+0x16>
		lwm2m_firmware_set_update_result(RESULT_NO_STORAGE);
   43ae8:	2002      	movs	r0, #2
   43aea:	e7f8      	b.n	43ade <set_update_result_from_error+0x8>
	} else if (error_code == -EFAULT) {
   43aec:	f110 0f0e 	cmn.w	r0, #14
   43af0:	d101      	bne.n	43af6 <set_update_result_from_error+0x20>
		lwm2m_firmware_set_update_result(RESULT_INTEGRITY_FAILED);
   43af2:	2005      	movs	r0, #5
   43af4:	e7f3      	b.n	43ade <set_update_result_from_error+0x8>
	} else if (error_code == -ENOMSG) {
   43af6:	f110 0f23 	cmn.w	r0, #35	; 0x23
   43afa:	d101      	bne.n	43b00 <set_update_result_from_error+0x2a>
		lwm2m_firmware_set_update_result(RESULT_CONNECTION_LOST);
   43afc:	2004      	movs	r0, #4
   43afe:	e7ee      	b.n	43ade <set_update_result_from_error+0x8>
	} else if (error_code == -ENOTSUP) {
   43b00:	f110 0f86 	cmn.w	r0, #134	; 0x86
   43b04:	d101      	bne.n	43b0a <set_update_result_from_error+0x34>
		lwm2m_firmware_set_update_result(RESULT_INVALID_URI);
   43b06:	2007      	movs	r0, #7
   43b08:	e7e9      	b.n	43ade <set_update_result_from_error+0x8>
	} else if (error_code == -EPROTONOSUPPORT) {
   43b0a:	307b      	adds	r0, #123	; 0x7b
		lwm2m_firmware_set_update_result(RESULT_UNSUP_PROTO);
   43b0c:	bf0c      	ite	eq
   43b0e:	2009      	moveq	r0, #9
		lwm2m_firmware_set_update_result(RESULT_UPDATE_FAILED);
   43b10:	2008      	movne	r0, #8
   43b12:	e7e4      	b.n	43ade <set_update_result_from_error+0x8>

00043b14 <http_parser_url_init>:
__ssp_bos_icheck3(memset, void *, int)
   43b14:	2220      	movs	r2, #32
   43b16:	2100      	movs	r1, #0
   43b18:	f001 b9d4 	b.w	44ec4 <memset>

00043b1c <gpio_nrfx_write>:
{
   43b1c:	b510      	push	{r4, lr}
	return port->config->config_info;
   43b1e:	6804      	ldr	r4, [r0, #0]
   43b20:	6880      	ldr	r0, [r0, #8]
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   43b22:	68a4      	ldr	r4, [r4, #8]
	if (access_op == GPIO_ACCESS_BY_PORT) {
   43b24:	2901      	cmp	r1, #1
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   43b26:	6824      	ldr	r4, [r4, #0]
	if (access_op == GPIO_ACCESS_BY_PORT) {
   43b28:	69c0      	ldr	r0, [r0, #28]
   43b2a:	d103      	bne.n	43b34 <gpio_nrfx_write+0x18>
		nrf_gpio_port_out_write(reg, value ^ data->inverted);
   43b2c:	4058      	eors	r0, r3
    p_reg->OUT = value;
   43b2e:	6060      	str	r0, [r4, #4]
}
   43b30:	2000      	movs	r0, #0
   43b32:	bd10      	pop	{r4, pc}
		if ((value > 0) ^ ((BIT(pin) & data->inverted) != 0)) {
   43b34:	3300      	adds	r3, #0
   43b36:	f04f 0101 	mov.w	r1, #1
   43b3a:	bf18      	it	ne
   43b3c:	2301      	movne	r3, #1
   43b3e:	40d0      	lsrs	r0, r2
   43b40:	f000 0001 	and.w	r0, r0, #1
   43b44:	4091      	lsls	r1, r2
   43b46:	4283      	cmp	r3, r0
    p_reg->OUTSET = set_mask;
   43b48:	bf14      	ite	ne
   43b4a:	60a1      	strne	r1, [r4, #8]
}


NRF_STATIC_INLINE void nrf_gpio_port_out_clear(NRF_GPIO_Type * p_reg, uint32_t clr_mask)
{
    p_reg->OUTCLR = clr_mask;
   43b4c:	60e1      	streq	r1, [r4, #12]
   43b4e:	e7ef      	b.n	43b30 <gpio_nrfx_write+0x14>

00043b50 <gpio_nrfx_read>:
{
   43b50:	b570      	push	{r4, r5, r6, lr}
	return port->config->config_info;
   43b52:	6804      	ldr	r4, [r0, #0]
	u32_t port_val = (port_in | port_out) ^ data->inverted;
   43b54:	6880      	ldr	r0, [r0, #8]
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   43b56:	68a4      	ldr	r4, [r4, #8]
	u32_t port_val = (port_in | port_out) ^ data->inverted;
   43b58:	69c0      	ldr	r0, [r0, #28]
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   43b5a:	6825      	ldr	r5, [r4, #0]
	if (access_op == GPIO_ACCESS_BY_PORT) {
   43b5c:	2901      	cmp	r1, #1
    return p_reg->DIR;
   43b5e:	696e      	ldr	r6, [r5, #20]
    return p_reg->IN;
   43b60:	692c      	ldr	r4, [r5, #16]
    return p_reg->OUT;
   43b62:	686d      	ldr	r5, [r5, #4]
	u32_t port_val = (port_in | port_out) ^ data->inverted;
   43b64:	ea80 0004 	eor.w	r0, r0, r4
   43b68:	ea84 0405 	eor.w	r4, r4, r5
   43b6c:	ea04 0406 	and.w	r4, r4, r6
   43b70:	ea80 0004 	eor.w	r0, r0, r4
		*value = (port_val & BIT(pin)) ? 1 : 0;
   43b74:	bf1c      	itt	ne
   43b76:	40d0      	lsrne	r0, r2
   43b78:	f000 0001 	andne.w	r0, r0, #1
   43b7c:	6018      	str	r0, [r3, #0]
}
   43b7e:	2000      	movs	r0, #0
   43b80:	bd70      	pop	{r4, r5, r6, pc}

00043b82 <gpio_nrfx_pin_disable_callback>:
	if (access_op == GPIO_ACCESS_BY_PORT) {
   43b82:	2901      	cmp	r1, #1
{
   43b84:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
		from_pin = pin;
   43b88:	bf18      	it	ne
   43b8a:	b2d4      	uxtbne	r4, r2
{
   43b8c:	4606      	mov	r6, r0
		to_pin   = pin;
   43b8e:	bf12      	itee	ne
   43b90:	4625      	movne	r5, r4
		to_pin   = 31U;
   43b92:	251f      	moveq	r5, #31
		from_pin = 0U;
   43b94:	2400      	moveq	r4, #0
		WRITE_BIT(data->int_en, curr_pin, enable);
   43b96:	f04f 0801 	mov.w	r8, #1
	struct gpio_nrfx_data *data = get_port_data(port);
   43b9a:	6887      	ldr	r7, [r0, #8]
	for (u8_t curr_pin = from_pin; curr_pin <= to_pin; ++curr_pin) {
   43b9c:	42ac      	cmp	r4, r5
   43b9e:	d902      	bls.n	43ba6 <gpio_nrfx_pin_disable_callback+0x24>
	return res;
   43ba0:	2000      	movs	r0, #0
}
   43ba2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		WRITE_BIT(data->int_en, curr_pin, enable);
   43ba6:	68fb      	ldr	r3, [r7, #12]
   43ba8:	fa08 f204 	lsl.w	r2, r8, r4
   43bac:	ea23 0302 	bic.w	r3, r3, r2
   43bb0:	60fb      	str	r3, [r7, #12]
		res = gpiote_pin_int_cfg(port, curr_pin);
   43bb2:	4621      	mov	r1, r4
   43bb4:	4630      	mov	r0, r6
   43bb6:	f7eb fe71 	bl	2f89c <gpiote_pin_int_cfg>
		if (res != 0) {
   43bba:	2800      	cmp	r0, #0
   43bbc:	d1f1      	bne.n	43ba2 <gpio_nrfx_pin_disable_callback+0x20>
	for (u8_t curr_pin = from_pin; curr_pin <= to_pin; ++curr_pin) {
   43bbe:	3401      	adds	r4, #1
   43bc0:	b2e4      	uxtb	r4, r4
   43bc2:	e7eb      	b.n	43b9c <gpio_nrfx_pin_disable_callback+0x1a>

00043bc4 <gpio_nrfx_pin_enable_callback>:
	if (access_op == GPIO_ACCESS_BY_PORT) {
   43bc4:	2901      	cmp	r1, #1
{
   43bc6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
		from_pin = pin;
   43bca:	bf18      	it	ne
   43bcc:	b2d4      	uxtbne	r4, r2
{
   43bce:	4606      	mov	r6, r0
		to_pin   = pin;
   43bd0:	bf12      	itee	ne
   43bd2:	4625      	movne	r5, r4
		to_pin   = 31U;
   43bd4:	251f      	moveq	r5, #31
		from_pin = 0U;
   43bd6:	2400      	moveq	r4, #0
		WRITE_BIT(data->int_en, curr_pin, enable);
   43bd8:	f04f 0801 	mov.w	r8, #1
	struct gpio_nrfx_data *data = get_port_data(port);
   43bdc:	6887      	ldr	r7, [r0, #8]
	for (u8_t curr_pin = from_pin; curr_pin <= to_pin; ++curr_pin) {
   43bde:	42ac      	cmp	r4, r5
   43be0:	d902      	bls.n	43be8 <gpio_nrfx_pin_enable_callback+0x24>
	return res;
   43be2:	2000      	movs	r0, #0
}
   43be4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		WRITE_BIT(data->int_en, curr_pin, enable);
   43be8:	68fb      	ldr	r3, [r7, #12]
   43bea:	fa08 f204 	lsl.w	r2, r8, r4
   43bee:	4313      	orrs	r3, r2
   43bf0:	60fb      	str	r3, [r7, #12]
		res = gpiote_pin_int_cfg(port, curr_pin);
   43bf2:	4621      	mov	r1, r4
   43bf4:	4630      	mov	r0, r6
   43bf6:	f7eb fe51 	bl	2f89c <gpiote_pin_int_cfg>
		if (res != 0) {
   43bfa:	2800      	cmp	r0, #0
   43bfc:	d1f2      	bne.n	43be4 <gpio_nrfx_pin_enable_callback+0x20>
	for (u8_t curr_pin = from_pin; curr_pin <= to_pin; ++curr_pin) {
   43bfe:	3401      	adds	r4, #1
   43c00:	b2e4      	uxtb	r4, r4
   43c02:	e7ec      	b.n	43bde <gpio_nrfx_pin_enable_callback+0x1a>

00043c04 <flash_nrf_write_protection>:
}
   43c04:	2000      	movs	r0, #0
   43c06:	4770      	bx	lr

00043c08 <is_regular_addr_valid>:
{
   43c08:	b538      	push	{r3, r4, r5, lr}
   43c0a:	4604      	mov	r4, r0
   43c0c:	460d      	mov	r5, r1
	size_t flash_size = nrfx_nvmc_flash_size_get();
   43c0e:	f000 ff0d 	bl	44a2c <nrfx_nvmc_flash_size_get>
	if (addr >= flash_size ||
   43c12:	4284      	cmp	r4, r0
   43c14:	d209      	bcs.n	43c2a <is_regular_addr_valid+0x22>
   43c16:	2c00      	cmp	r4, #0
   43c18:	db07      	blt.n	43c2a <is_regular_addr_valid+0x22>
	    addr < 0 ||
   43c1a:	42a8      	cmp	r0, r5
   43c1c:	d305      	bcc.n	43c2a <is_regular_addr_valid+0x22>
	    (addr) + len > flash_size) {
   43c1e:	442c      	add	r4, r5
	    len > flash_size ||
   43c20:	4284      	cmp	r4, r0
   43c22:	bf8c      	ite	hi
   43c24:	2000      	movhi	r0, #0
   43c26:	2001      	movls	r0, #1
}
   43c28:	bd38      	pop	{r3, r4, r5, pc}
		return false;
   43c2a:	2000      	movs	r0, #0
   43c2c:	e7fc      	b.n	43c28 <is_regular_addr_valid+0x20>

00043c2e <flash_nrf_read>:
{
   43c2e:	b570      	push	{r4, r5, r6, lr}
   43c30:	460d      	mov	r5, r1
	if (is_regular_addr_valid(addr, len)) {
   43c32:	4619      	mov	r1, r3
   43c34:	4628      	mov	r0, r5
{
   43c36:	4616      	mov	r6, r2
   43c38:	461c      	mov	r4, r3
	if (is_regular_addr_valid(addr, len)) {
   43c3a:	f7ff ffe5 	bl	43c08 <is_regular_addr_valid>
   43c3e:	b170      	cbz	r0, 43c5e <flash_nrf_read+0x30>
	if (!len) {
   43c40:	b184      	cbz	r4, 43c64 <flash_nrf_read+0x36>
	if (addr < PM_APP_ADDRESS) {
   43c42:	f5b5 3fe1 	cmp.w	r5, #115200	; 0x1c200
		return spm_request_read(data, addr, len);
   43c46:	4622      	mov	r2, r4
   43c48:	4629      	mov	r1, r5
   43c4a:	4630      	mov	r0, r6
	if (addr < PM_APP_ADDRESS) {
   43c4c:	da03      	bge.n	43c56 <flash_nrf_read+0x28>
}
   43c4e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return spm_request_read(data, addr, len);
   43c52:	f7d4 b9c5 	b.w	17fe0 <spm_request_read>
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   43c56:	f001 f8fb 	bl	44e50 <memcpy>
   43c5a:	2000      	movs	r0, #0
}
   43c5c:	bd70      	pop	{r4, r5, r6, pc}
		return -EINVAL;
   43c5e:	f06f 0015 	mvn.w	r0, #21
   43c62:	e7fb      	b.n	43c5c <flash_nrf_read+0x2e>
		return 0;
   43c64:	4620      	mov	r0, r4
   43c66:	e7f9      	b.n	43c5c <flash_nrf_read+0x2e>

00043c68 <flash_get_page_info>:

#include <drivers/flash.h>

static int flash_get_page_info(struct device *dev, off_t offs,
				   bool use_addr, struct flash_pages_info *info)
{
   43c68:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   43c6c:	461d      	mov	r5, r3
	off_t group_offs = 0;
	u32_t num_in_group;
	off_t end = 0;
	size_t layout_size;

	api->page_layout(dev, &layout, &layout_size);
   43c6e:	6843      	ldr	r3, [r0, #4]
{
   43c70:	460c      	mov	r4, r1
	api->page_layout(dev, &layout, &layout_size);
   43c72:	691b      	ldr	r3, [r3, #16]
   43c74:	4669      	mov	r1, sp
{
   43c76:	4616      	mov	r6, r2
	api->page_layout(dev, &layout, &layout_size);
   43c78:	aa01      	add	r2, sp, #4
   43c7a:	4798      	blx	r3

	while (layout_size--) {
   43c7c:	e9dd 1200 	ldrd	r1, r2, [sp]
   43c80:	2300      	movs	r3, #0
	off_t end = 0;
   43c82:	4618      	mov	r0, r3
	off_t group_offs = 0;
   43c84:	469e      	mov	lr, r3
	size_t page_count = 0;
   43c86:	469c      	mov	ip, r3
   43c88:	3a01      	subs	r2, #1
	while (layout_size--) {
   43c8a:	1c57      	adds	r7, r2, #1
   43c8c:	d102      	bne.n	43c94 <flash_get_page_info+0x2c>
		page_count += layout->pages_count;

		layout++;
	}

	return -EINVAL; /* page of the index doesn't exist */
   43c8e:	f06f 0015 	mvn.w	r0, #21
   43c92:	e01a      	b.n	43cca <flash_get_page_info+0x62>
		if (use_addr) {
   43c94:	f8d1 8000 	ldr.w	r8, [r1]
   43c98:	b1d6      	cbz	r6, 43cd0 <flash_get_page_info+0x68>
			end += layout->pages_count * layout->pages_size;
   43c9a:	684f      	ldr	r7, [r1, #4]
   43c9c:	fb07 0008 	mla	r0, r7, r8, r0
		if (offs < end) {
   43ca0:	42a0      	cmp	r0, r4
   43ca2:	f102 37ff 	add.w	r7, r2, #4294967295
   43ca6:	dd18      	ble.n	43cda <flash_get_page_info+0x72>
   43ca8:	9201      	str	r2, [sp, #4]
   43caa:	b103      	cbz	r3, 43cae <flash_get_page_info+0x46>
   43cac:	9100      	str	r1, [sp, #0]
			info->size = layout->pages_size;
   43cae:	9b00      	ldr	r3, [sp, #0]
   43cb0:	685b      	ldr	r3, [r3, #4]
   43cb2:	606b      	str	r3, [r5, #4]
			if (use_addr) {
   43cb4:	b176      	cbz	r6, 43cd4 <flash_get_page_info+0x6c>
				num_in_group = (offs - group_offs) /
   43cb6:	eba4 040e 	sub.w	r4, r4, lr
   43cba:	fbb4 f4f3 	udiv	r4, r4, r3
			return 0;
   43cbe:	2000      	movs	r0, #0
			info->start_offset = group_offs +
   43cc0:	fb04 e303 	mla	r3, r4, r3, lr
			info->index = page_count + num_in_group;
   43cc4:	4464      	add	r4, ip
			info->start_offset = group_offs +
   43cc6:	602b      	str	r3, [r5, #0]
			info->index = page_count + num_in_group;
   43cc8:	60ac      	str	r4, [r5, #8]
}
   43cca:	b002      	add	sp, #8
   43ccc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			end += layout->pages_count;
   43cd0:	4440      	add	r0, r8
   43cd2:	e7e5      	b.n	43ca0 <flash_get_page_info+0x38>
				num_in_group = offs - page_count;
   43cd4:	eba4 040c 	sub.w	r4, r4, ip
   43cd8:	e7f1      	b.n	43cbe <flash_get_page_info+0x56>
		group_offs += layout->pages_count * layout->pages_size;
   43cda:	684b      	ldr	r3, [r1, #4]
		page_count += layout->pages_count;
   43cdc:	44c4      	add	ip, r8
		group_offs += layout->pages_count * layout->pages_size;
   43cde:	fb03 ee08 	mla	lr, r3, r8, lr
		layout++;
   43ce2:	3108      	adds	r1, #8
   43ce4:	2301      	movs	r3, #1
   43ce6:	463a      	mov	r2, r7
   43ce8:	e7cf      	b.n	43c8a <flash_get_page_info+0x22>

00043cea <z_impl_flash_get_page_info_by_offs>:

int z_impl_flash_get_page_info_by_offs(struct device *dev, off_t offs,
				      struct flash_pages_info *info)
{
	return flash_get_page_info(dev, offs, true, info);
   43cea:	4613      	mov	r3, r2
   43cec:	2201      	movs	r2, #1
   43cee:	f7ff bfbb 	b.w	43c68 <flash_get_page_info>

00043cf2 <flash_page_foreach>:

	return count;
}

void flash_page_foreach(struct device *dev, flash_page_cb cb, void *data)
{
   43cf2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	const struct flash_driver_api *api = dev->driver_api;
	const struct flash_pages_layout *layout;
	struct flash_pages_info page_info;
	size_t block, num_blocks, page = 0, i;
	off_t off = 0;
   43cf6:	2400      	movs	r4, #0

	api->page_layout(dev, &layout, &num_blocks);
   43cf8:	6843      	ldr	r3, [r0, #4]
{
   43cfa:	b086      	sub	sp, #24
   43cfc:	4689      	mov	r9, r1
   43cfe:	4692      	mov	sl, r2
	api->page_layout(dev, &layout, &num_blocks);
   43d00:	691b      	ldr	r3, [r3, #16]
   43d02:	aa02      	add	r2, sp, #8
   43d04:	a901      	add	r1, sp, #4
   43d06:	4798      	blx	r3
	size_t block, num_blocks, page = 0, i;
   43d08:	46a0      	mov	r8, r4

	for (block = 0; block < num_blocks; block++) {
   43d0a:	4625      	mov	r5, r4
   43d0c:	9b02      	ldr	r3, [sp, #8]
   43d0e:	42ab      	cmp	r3, r5
   43d10:	d802      	bhi.n	43d18 <flash_page_foreach+0x26>

			off += page_info.size;
			page++;
		}
	}
}
   43d12:	b006      	add	sp, #24
   43d14:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		for (i = 0; i < l->pages_count; i++) {
   43d18:	2600      	movs	r6, #0
		const struct flash_pages_layout *l = &layout[block];
   43d1a:	9f01      	ldr	r7, [sp, #4]
   43d1c:	eb07 07c5 	add.w	r7, r7, r5, lsl #3
		page_info.size = l->pages_size;
   43d20:	687b      	ldr	r3, [r7, #4]
   43d22:	9304      	str	r3, [sp, #16]
		for (i = 0; i < l->pages_count; i++) {
   43d24:	683a      	ldr	r2, [r7, #0]
   43d26:	eb08 0306 	add.w	r3, r8, r6
   43d2a:	42b2      	cmp	r2, r6
   43d2c:	d802      	bhi.n	43d34 <flash_page_foreach+0x42>
	for (block = 0; block < num_blocks; block++) {
   43d2e:	3501      	adds	r5, #1
   43d30:	4698      	mov	r8, r3
   43d32:	e7eb      	b.n	43d0c <flash_page_foreach+0x1a>
			if (!cb(&page_info, data)) {
   43d34:	4651      	mov	r1, sl
   43d36:	a803      	add	r0, sp, #12
			page_info.start_offset = off;
   43d38:	9403      	str	r4, [sp, #12]
			page_info.index = page;
   43d3a:	9305      	str	r3, [sp, #20]
			if (!cb(&page_info, data)) {
   43d3c:	47c8      	blx	r9
   43d3e:	2800      	cmp	r0, #0
   43d40:	d0e7      	beq.n	43d12 <flash_page_foreach+0x20>
			off += page_info.size;
   43d42:	9b04      	ldr	r3, [sp, #16]
		for (i = 0; i < l->pages_count; i++) {
   43d44:	3601      	adds	r6, #1
			off += page_info.size;
   43d46:	441c      	add	r4, r3
			page++;
   43d48:	e7ec      	b.n	43d24 <flash_page_foreach+0x32>

00043d4a <uarte_nrfx_isr_int>:
	if (data->int_driven->disable_tx_irq &&
   43d4a:	6882      	ldr	r2, [r0, #8]
	return dev->config->config_info;
   43d4c:	6803      	ldr	r3, [r0, #0]
	if (data->int_driven->disable_tx_irq &&
   43d4e:	6892      	ldr	r2, [r2, #8]
	return config->uarte_regs;
   43d50:	689b      	ldr	r3, [r3, #8]
	if (data->int_driven->disable_tx_irq &&
   43d52:	7b91      	ldrb	r1, [r2, #14]
	return config->uarte_regs;
   43d54:	681b      	ldr	r3, [r3, #0]
	if (data->int_driven->disable_tx_irq &&
   43d56:	b159      	cbz	r1, 43d70 <uarte_nrfx_isr_int+0x26>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   43d58:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
   43d5c:	b141      	cbz	r1, 43d70 <uarte_nrfx_isr_int+0x26>
    p_reg->INTENCLR = mask;
   43d5e:	f44f 7180 	mov.w	r1, #256	; 0x100
   43d62:	f8c3 1308 	str.w	r1, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   43d66:	2101      	movs	r1, #1
   43d68:	60d9      	str	r1, [r3, #12]
		data->int_driven->disable_tx_irq = false;
   43d6a:	2300      	movs	r3, #0
   43d6c:	7393      	strb	r3, [r2, #14]
		return;
   43d6e:	4770      	bx	lr
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   43d70:	f8d3 1124 	ldr.w	r1, [r3, #292]	; 0x124
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ERROR)) {
   43d74:	b111      	cbz	r1, 43d7c <uarte_nrfx_isr_int+0x32>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   43d76:	2100      	movs	r1, #0
   43d78:	f8c3 1124 	str.w	r1, [r3, #292]	; 0x124
	if (data->int_driven->cb) {
   43d7c:	6813      	ldr	r3, [r2, #0]
   43d7e:	b10b      	cbz	r3, 43d84 <uarte_nrfx_isr_int+0x3a>
		data->int_driven->cb(data->int_driven->cb_data);
   43d80:	6850      	ldr	r0, [r2, #4]
   43d82:	4718      	bx	r3
}
   43d84:	4770      	bx	lr

00043d86 <uarte_nrfx_config_get>:
{
   43d86:	460b      	mov	r3, r1
	*cfg = get_dev_data(dev)->uart_config;
   43d88:	6882      	ldr	r2, [r0, #8]
   43d8a:	e892 0003 	ldmia.w	r2, {r0, r1}
   43d8e:	e883 0003 	stmia.w	r3, {r0, r1}
}
   43d92:	2000      	movs	r0, #0
   43d94:	4770      	bx	lr

00043d96 <uarte_nrfx_err_check>:
	return dev->config->config_info;
   43d96:	6803      	ldr	r3, [r0, #0]
	return config->uarte_regs;
   43d98:	689b      	ldr	r3, [r3, #8]
   43d9a:	681b      	ldr	r3, [r3, #0]
    uint32_t errsrc_mask = p_reg->ERRORSRC;
   43d9c:	f8d3 0480 	ldr.w	r0, [r3, #1152]	; 0x480
    p_reg->ERRORSRC = errsrc_mask;
   43da0:	f8c3 0480 	str.w	r0, [r3, #1152]	; 0x480
}
   43da4:	4770      	bx	lr

00043da6 <uarte_nrfx_poll_in>:
	return dev->config->config_info;
   43da6:	6803      	ldr	r3, [r0, #0]
	const struct uarte_nrfx_data *data = get_dev_data(dev);
   43da8:	6882      	ldr	r2, [r0, #8]
	return config->uarte_regs;
   43daa:	689b      	ldr	r3, [r3, #8]
   43dac:	681b      	ldr	r3, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   43dae:	f8d3 0110 	ldr.w	r0, [r3, #272]	; 0x110
	if (!nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
   43db2:	b138      	cbz	r0, 43dc4 <uarte_nrfx_poll_in+0x1e>
	*c = data->rx_data;
   43db4:	7b12      	ldrb	r2, [r2, #12]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   43db6:	2000      	movs	r0, #0
   43db8:	700a      	strb	r2, [r1, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   43dba:	2201      	movs	r2, #1
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   43dbc:	f8c3 0110 	str.w	r0, [r3, #272]	; 0x110
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   43dc0:	601a      	str	r2, [r3, #0]
	return 0;
   43dc2:	4770      	bx	lr
		return -1;
   43dc4:	f04f 30ff 	mov.w	r0, #4294967295
}
   43dc8:	4770      	bx	lr

00043dca <uarte_nrfx_poll_out>:
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   43dca:	2200      	movs	r2, #0
	return dev->config->config_info;
   43dcc:	6803      	ldr	r3, [r0, #0]
{
   43dce:	b082      	sub	sp, #8
	return config->uarte_regs;
   43dd0:	689b      	ldr	r3, [r3, #8]
{
   43dd2:	f88d 1007 	strb.w	r1, [sp, #7]
	return config->uarte_regs;
   43dd6:	681b      	ldr	r3, [r3, #0]
   43dd8:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   43ddc:	f10d 0207 	add.w	r2, sp, #7
   43de0:	f8c3 2544 	str.w	r2, [r3, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
   43de4:	2201      	movs	r2, #1
   43de6:	f8c3 2548 	str.w	r2, [r3, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   43dea:	609a      	str	r2, [r3, #8]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   43dec:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
	while (!nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDTX)) {
   43df0:	2900      	cmp	r1, #0
   43df2:	d0fb      	beq.n	43dec <uarte_nrfx_poll_out+0x22>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   43df4:	60da      	str	r2, [r3, #12]
}
   43df6:	b002      	add	sp, #8
   43df8:	4770      	bx	lr

00043dfa <uarte_nrfx_fifo_fill>:
	return dev->config->config_info;
   43dfa:	6803      	ldr	r3, [r0, #0]
{
   43dfc:	b570      	push	{r4, r5, r6, lr}
	return config->uarte_regs;
   43dfe:	689b      	ldr	r3, [r3, #8]
   43e00:	681c      	ldr	r4, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   43e02:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
	if (!nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDTX)) {
   43e06:	b1bb      	cbz	r3, 43e38 <uarte_nrfx_fifo_fill+0x3e>
	struct uarte_nrfx_data *data = get_dev_data(dev);
   43e08:	6885      	ldr	r5, [r0, #8]
	if (len > data->int_driven->tx_buff_size) {
   43e0a:	68ab      	ldr	r3, [r5, #8]
   43e0c:	8998      	ldrh	r0, [r3, #12]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   43e0e:	2300      	movs	r3, #0
   43e10:	4290      	cmp	r0, r2
   43e12:	bfa8      	it	ge
   43e14:	4610      	movge	r0, r2
   43e16:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
	for (int i = 0; i < len; i++) {
   43e1a:	68aa      	ldr	r2, [r5, #8]
   43e1c:	4283      	cmp	r3, r0
   43e1e:	6892      	ldr	r2, [r2, #8]
   43e20:	db06      	blt.n	43e30 <uarte_nrfx_fifo_fill+0x36>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   43e22:	2301      	movs	r3, #1
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   43e24:	f8c4 2544 	str.w	r2, [r4, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
   43e28:	f8c4 0548 	str.w	r0, [r4, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   43e2c:	60a3      	str	r3, [r4, #8]
}
   43e2e:	bd70      	pop	{r4, r5, r6, pc}
		data->int_driven->tx_buffer[i] = tx_data[i];
   43e30:	5cce      	ldrb	r6, [r1, r3]
   43e32:	54d6      	strb	r6, [r2, r3]
	for (int i = 0; i < len; i++) {
   43e34:	3301      	adds	r3, #1
   43e36:	e7f0      	b.n	43e1a <uarte_nrfx_fifo_fill+0x20>
		return 0;
   43e38:	4618      	mov	r0, r3
   43e3a:	e7f8      	b.n	43e2e <uarte_nrfx_fifo_fill+0x34>

00043e3c <uarte_nrfx_fifo_read>:
	return dev->config->config_info;
   43e3c:	6803      	ldr	r3, [r0, #0]
	return config->uarte_regs;
   43e3e:	689b      	ldr	r3, [r3, #8]
   43e40:	681a      	ldr	r2, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   43e42:	f8d2 3110 	ldr.w	r3, [r2, #272]	; 0x110
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
   43e46:	b143      	cbz	r3, 43e5a <uarte_nrfx_fifo_read+0x1e>
	const struct uarte_nrfx_data *data = get_dev_data(dev);
   43e48:	6883      	ldr	r3, [r0, #8]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   43e4a:	2000      	movs	r0, #0
   43e4c:	f8c2 0110 	str.w	r0, [r2, #272]	; 0x110
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   43e50:	2001      	movs	r0, #1
		rx_data[num_rx++] = (u8_t)data->rx_data;
   43e52:	7b1b      	ldrb	r3, [r3, #12]
   43e54:	700b      	strb	r3, [r1, #0]
   43e56:	6010      	str	r0, [r2, #0]
   43e58:	4770      	bx	lr
	int num_rx = 0;
   43e5a:	4618      	mov	r0, r3
}
   43e5c:	4770      	bx	lr

00043e5e <uarte_nrfx_irq_tx_enable>:
	data->int_driven->disable_tx_irq = false;
   43e5e:	2100      	movs	r1, #0
	return dev->config->config_info;
   43e60:	6803      	ldr	r3, [r0, #0]
	data->int_driven->disable_tx_irq = false;
   43e62:	6882      	ldr	r2, [r0, #8]
	return config->uarte_regs;
   43e64:	689b      	ldr	r3, [r3, #8]
	data->int_driven->disable_tx_irq = false;
   43e66:	6892      	ldr	r2, [r2, #8]
	return config->uarte_regs;
   43e68:	681b      	ldr	r3, [r3, #0]
	data->int_driven->disable_tx_irq = false;
   43e6a:	7391      	strb	r1, [r2, #14]
    p_reg->INTENSET = mask;
   43e6c:	f44f 7280 	mov.w	r2, #256	; 0x100
   43e70:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
   43e74:	4770      	bx	lr

00043e76 <uarte_nrfx_irq_tx_disable>:
	data->int_driven->disable_tx_irq = true;
   43e76:	2201      	movs	r2, #1
   43e78:	6883      	ldr	r3, [r0, #8]
   43e7a:	689b      	ldr	r3, [r3, #8]
   43e7c:	739a      	strb	r2, [r3, #14]
}
   43e7e:	4770      	bx	lr

00043e80 <uarte_nrfx_irq_tx_ready_complete>:
	return dev->config->config_info;
   43e80:	6803      	ldr	r3, [r0, #0]
	return config->uarte_regs;
   43e82:	689b      	ldr	r3, [r3, #8]
   43e84:	681b      	ldr	r3, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   43e86:	f8d3 0120 	ldr.w	r0, [r3, #288]	; 0x120
	return nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDTX) &&
   43e8a:	b118      	cbz	r0, 43e94 <uarte_nrfx_irq_tx_ready_complete+0x14>
    return p_reg->INTENSET & mask;
   43e8c:	f8d3 0304 	ldr.w	r0, [r3, #772]	; 0x304
   43e90:	f3c0 2000 	ubfx	r0, r0, #8, #1
}
   43e94:	4770      	bx	lr

00043e96 <uarte_nrfx_irq_rx_ready>:
	return dev->config->config_info;
   43e96:	6803      	ldr	r3, [r0, #0]
	return config->uarte_regs;
   43e98:	689b      	ldr	r3, [r3, #8]
   43e9a:	681b      	ldr	r3, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   43e9c:	f8d3 0110 	ldr.w	r0, [r3, #272]	; 0x110
}
   43ea0:	3000      	adds	r0, #0
   43ea2:	bf18      	it	ne
   43ea4:	2001      	movne	r0, #1
   43ea6:	4770      	bx	lr

00043ea8 <uarte_nrfx_irq_rx_enable>:
    p_reg->INTENSET = mask;
   43ea8:	2210      	movs	r2, #16
	return dev->config->config_info;
   43eaa:	6803      	ldr	r3, [r0, #0]
	return config->uarte_regs;
   43eac:	689b      	ldr	r3, [r3, #8]
   43eae:	681b      	ldr	r3, [r3, #0]
   43eb0:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
   43eb4:	4770      	bx	lr

00043eb6 <uarte_nrfx_irq_rx_disable>:
    p_reg->INTENCLR = mask;
   43eb6:	2210      	movs	r2, #16
	return dev->config->config_info;
   43eb8:	6803      	ldr	r3, [r0, #0]
	return config->uarte_regs;
   43eba:	689b      	ldr	r3, [r3, #8]
   43ebc:	681b      	ldr	r3, [r3, #0]
   43ebe:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
}
   43ec2:	4770      	bx	lr

00043ec4 <uarte_nrfx_irq_err_enable>:
    p_reg->INTENSET = mask;
   43ec4:	f44f 7200 	mov.w	r2, #512	; 0x200
	return dev->config->config_info;
   43ec8:	6803      	ldr	r3, [r0, #0]
	return config->uarte_regs;
   43eca:	689b      	ldr	r3, [r3, #8]
   43ecc:	681b      	ldr	r3, [r3, #0]
   43ece:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
   43ed2:	4770      	bx	lr

00043ed4 <uarte_nrfx_irq_err_disable>:
    p_reg->INTENCLR = mask;
   43ed4:	f44f 7200 	mov.w	r2, #512	; 0x200
	return dev->config->config_info;
   43ed8:	6803      	ldr	r3, [r0, #0]
	return config->uarte_regs;
   43eda:	689b      	ldr	r3, [r3, #8]
   43edc:	681b      	ldr	r3, [r3, #0]
   43ede:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
}
   43ee2:	4770      	bx	lr

00043ee4 <uarte_nrfx_irq_update>:
}
   43ee4:	2001      	movs	r0, #1
   43ee6:	4770      	bx	lr

00043ee8 <uarte_nrfx_irq_callback_set>:
	data->int_driven->cb = cb;
   43ee8:	6883      	ldr	r3, [r0, #8]
   43eea:	689b      	ldr	r3, [r3, #8]
	data->int_driven->cb_data = cb_data;
   43eec:	e9c3 1200 	strd	r1, r2, [r3]
}
   43ef0:	4770      	bx	lr

00043ef2 <uarte_nrfx_irq_is_pending>:
{
   43ef2:	b508      	push	{r3, lr}
	return dev->config->config_info;
   43ef4:	6803      	ldr	r3, [r0, #0]
{
   43ef6:	4602      	mov	r2, r0
	return config->uarte_regs;
   43ef8:	689b      	ldr	r3, [r3, #8]
   43efa:	6819      	ldr	r1, [r3, #0]
    return p_reg->INTENSET & mask;
   43efc:	f8d1 3304 	ldr.w	r3, [r1, #772]	; 0x304
		||
   43f00:	05db      	lsls	r3, r3, #23
   43f02:	d405      	bmi.n	43f10 <uarte_nrfx_irq_is_pending+0x1e>
   43f04:	f8d1 0304 	ldr.w	r0, [r1, #772]	; 0x304
   43f08:	f010 0010 	ands.w	r0, r0, #16
   43f0c:	d106      	bne.n	43f1c <uarte_nrfx_irq_is_pending+0x2a>
}
   43f0e:	bd08      	pop	{r3, pc}
		 uarte_nrfx_irq_tx_ready_complete(dev))
   43f10:	f7ff ffb6 	bl	43e80 <uarte_nrfx_irq_tx_ready_complete>
					    NRF_UARTE_INT_ENDTX_MASK) &&
   43f14:	2800      	cmp	r0, #0
   43f16:	d0f5      	beq.n	43f04 <uarte_nrfx_irq_is_pending+0x12>
		||
   43f18:	2001      	movs	r0, #1
   43f1a:	e7f8      	b.n	43f0e <uarte_nrfx_irq_is_pending+0x1c>
		 uarte_nrfx_irq_rx_ready(dev)));
   43f1c:	4610      	mov	r0, r2
   43f1e:	f7ff ffba 	bl	43e96 <uarte_nrfx_irq_rx_ready>
					    NRF_UARTE_INT_ENDRX_MASK) &&
   43f22:	3000      	adds	r0, #0
   43f24:	bf18      	it	ne
   43f26:	2001      	movne	r0, #1
   43f28:	e7f1      	b.n	43f0e <uarte_nrfx_irq_is_pending+0x1c>

00043f2a <entropy_cc310_rng_init>:
{
	/* No initialization is required */
	(void)dev;

	return 0;
}
   43f2a:	2000      	movs	r0, #0
   43f2c:	4770      	bx	lr

00043f2e <trace_proxy_irq_handler>:
ISR_DIRECT_DECLARE(trace_proxy_irq_handler)
   43f2e:	4668      	mov	r0, sp
   43f30:	f020 0107 	bic.w	r1, r0, #7
   43f34:	468d      	mov	sp, r1
   43f36:	b501      	push	{r0, lr}
	bsd_os_trace_irq_handler();
   43f38:	f7f1 f8ca 	bl	350d0 <bsd_os_trace_irq_handler>
	ISR_DIRECT_PM(); /* PM done after servicing interrupt for best latency
   43f3c:	f7e2 fb80 	bl	26640 <_arch_isr_direct_pm>
   43f40:	f7e2 fa72 	bl	26428 <z_arm_exc_exit>
ISR_DIRECT_DECLARE(trace_proxy_irq_handler)
   43f44:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
   43f48:	4685      	mov	sp, r0
   43f4a:	4770      	bx	lr

00043f4c <ipc_proxy_irq_handler>:
ISR_DIRECT_DECLARE(ipc_proxy_irq_handler)
   43f4c:	4668      	mov	r0, sp
   43f4e:	f020 0107 	bic.w	r1, r0, #7
   43f52:	468d      	mov	sp, r1
   43f54:	b501      	push	{r0, lr}
	IPC_IRQHandler();
   43f56:	f7f1 fcb3 	bl	358c0 <IPC_IRQHandler>
	ISR_DIRECT_PM(); /* PM done after servicing interrupt for best latency
   43f5a:	f7e2 fb71 	bl	26640 <_arch_isr_direct_pm>
   43f5e:	f7e2 fa63 	bl	26428 <z_arm_exc_exit>
ISR_DIRECT_DECLARE(ipc_proxy_irq_handler)
   43f62:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
   43f66:	4685      	mov	sp, r0
   43f68:	4770      	bx	lr

00043f6a <trace_task_create>:
{
   43f6a:	b508      	push	{r3, lr}
	IRQ_DIRECT_CONNECT(TRACE_IRQ, TRACE_IRQ_PRIORITY,
   43f6c:	201d      	movs	r0, #29
   43f6e:	2200      	movs	r2, #0
   43f70:	2106      	movs	r1, #6
   43f72:	f7e2 fb33 	bl	265dc <z_arm_irq_priority_set>
}
   43f76:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	irq_enable(TRACE_IRQ);
   43f7a:	201d      	movs	r0, #29
   43f7c:	f7e2 bb1e 	b.w	265bc <arch_irq_enable>

00043f80 <read_task_create>:
{
   43f80:	b508      	push	{r3, lr}
	IRQ_DIRECT_CONNECT(BSD_APPLICATION_IRQ, BSD_APPLICATION_IRQ_PRIORITY,
   43f82:	201c      	movs	r0, #28
   43f84:	2200      	movs	r2, #0
   43f86:	2106      	movs	r1, #6
   43f88:	f7e2 fb28 	bl	265dc <z_arm_irq_priority_set>
}
   43f8c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	irq_enable(BSD_APPLICATION_IRQ);
   43f90:	201c      	movs	r0, #28
   43f92:	f7e2 bb13 	b.w	265bc <arch_irq_enable>

00043f96 <bsd_os_trace_put>:
		remaining_bytes -= transfer_len;
	}
#endif

	return 0;
}
   43f96:	2000      	movs	r0, #0
   43f98:	4770      	bx	lr

00043f9a <z_to_nrf_flags>:
		nrf_flags |= NRF_MSG_DONTWAIT;
   43f9a:	f010 0340 	ands.w	r3, r0, #64	; 0x40
   43f9e:	bf18      	it	ne
   43fa0:	2302      	movne	r3, #2
	if (z_flags & MSG_PEEK) {
   43fa2:	0782      	lsls	r2, r0, #30
		nrf_flags |= NRF_MSG_PEEK;
   43fa4:	bf48      	it	mi
   43fa6:	f043 0308 	orrmi.w	r3, r3, #8
}
   43faa:	4618      	mov	r0, r3
   43fac:	4770      	bx	lr

00043fae <z_to_nrf_family>:
	switch (z_family) {
   43fae:	2803      	cmp	r0, #3
   43fb0:	d00f      	beq.n	43fd2 <z_to_nrf_family+0x24>
   43fb2:	d808      	bhi.n	43fc6 <z_to_nrf_family+0x18>
   43fb4:	2801      	cmp	r0, #1
   43fb6:	d00e      	beq.n	43fd6 <z_to_nrf_family+0x28>
   43fb8:	2802      	cmp	r0, #2
		return -EAFNOSUPPORT;
   43fba:	bf08      	it	eq
   43fbc:	200a      	moveq	r0, #10
   43fbe:	bf18      	it	ne
   43fc0:	f06f 0069 	mvnne.w	r0, #105	; 0x69
   43fc4:	4770      	bx	lr
	switch (z_family) {
   43fc6:	2866      	cmp	r0, #102	; 0x66
   43fc8:	d006      	beq.n	43fd8 <z_to_nrf_family+0x2a>
   43fca:	2867      	cmp	r0, #103	; 0x67
		return -EAFNOSUPPORT;
   43fcc:	bf08      	it	eq
   43fce:	2001      	moveq	r0, #1
   43fd0:	e7f5      	b.n	43fbe <z_to_nrf_family+0x10>
		return NRF_AF_PACKET;
   43fd2:	2005      	movs	r0, #5
   43fd4:	4770      	bx	lr
		return NRF_AF_INET;
   43fd6:	2002      	movs	r0, #2
}
   43fd8:	4770      	bx	lr

00043fda <z_to_nrf_protocol>:
	switch (proto) {
   43fda:	f5b0 7f81 	cmp.w	r0, #258	; 0x102
   43fde:	d01d      	beq.n	4401c <z_to_nrf_protocol+0x42>
   43fe0:	dc08      	bgt.n	43ff4 <z_to_nrf_protocol+0x1a>
   43fe2:	2806      	cmp	r0, #6
   43fe4:	d01d      	beq.n	44022 <z_to_nrf_protocol+0x48>
   43fe6:	2811      	cmp	r0, #17
   43fe8:	d01d      	beq.n	44026 <z_to_nrf_protocol+0x4c>
   43fea:	2800      	cmp	r0, #0
		return -EPROTONOSUPPORT;
   43fec:	bf18      	it	ne
   43fee:	f06f 007a 	mvnne.w	r0, #122	; 0x7a
   43ff2:	4770      	bx	lr
	switch (proto) {
   43ff4:	f240 2301 	movw	r3, #513	; 0x201
   43ff8:	4298      	cmp	r0, r3
   43ffa:	d015      	beq.n	44028 <z_to_nrf_protocol+0x4e>
   43ffc:	dc06      	bgt.n	4400c <z_to_nrf_protocol+0x32>
   43ffe:	f240 1311 	movw	r3, #273	; 0x111
   44002:	4298      	cmp	r0, r3
		return -EPROTONOSUPPORT;
   44004:	bf08      	it	eq
   44006:	f44f 7087 	moveq.w	r0, #270	; 0x10e
   4400a:	e7ef      	b.n	43fec <z_to_nrf_protocol+0x12>
	switch (proto) {
   4400c:	f240 2302 	movw	r3, #514	; 0x202
   44010:	4298      	cmp	r0, r3
   44012:	d009      	beq.n	44028 <z_to_nrf_protocol+0x4e>
   44014:	f240 2303 	movw	r3, #515	; 0x203
   44018:	4298      	cmp	r0, r3
   4401a:	e7e7      	b.n	43fec <z_to_nrf_protocol+0x12>
		return NRF_SPROTO_TLS1v2;
   4401c:	f44f 7082 	mov.w	r0, #260	; 0x104
   44020:	4770      	bx	lr
		return NRF_IPPROTO_TCP;
   44022:	2001      	movs	r0, #1
   44024:	4770      	bx	lr
		return NRF_IPPROTO_UDP;
   44026:	2002      	movs	r0, #2
}
   44028:	4770      	bx	lr

0004402a <nrf91_bsdlib_socket_offload_init>:
}
   4402a:	2000      	movs	r0, #0
   4402c:	4770      	bx	lr

0004402e <nrf91_socket_offload_freeaddrinfo>:
{
   4402e:	b538      	push	{r3, r4, r5, lr}
   44030:	4604      	mov	r4, r0
	while (next != NULL) {
   44032:	b904      	cbnz	r4, 44036 <nrf91_socket_offload_freeaddrinfo+0x8>
}
   44034:	bd38      	pop	{r3, r4, r5, pc}
		k_free(this->ai_addr);
   44036:	6960      	ldr	r0, [r4, #20]
		next = next->ai_next;
   44038:	69e5      	ldr	r5, [r4, #28]
		k_free(this->ai_addr);
   4403a:	f000 fd30 	bl	44a9e <k_free>
		k_free(this);
   4403e:	4620      	mov	r0, r4
   44040:	f000 fd2d 	bl	44a9e <k_free>
		next = next->ai_next;
   44044:	462c      	mov	r4, r5
   44046:	e7f4      	b.n	44032 <nrf91_socket_offload_freeaddrinfo+0x4>

00044048 <z_to_nrf_addrinfo_hints>:
{
   44048:	b538      	push	{r3, r4, r5, lr}
   4404a:	460c      	mov	r4, r1
   4404c:	4605      	mov	r5, r0
__ssp_bos_icheck3(memset, void *, int)
   4404e:	221c      	movs	r2, #28
   44050:	2100      	movs	r1, #0
   44052:	1d20      	adds	r0, r4, #4
   44054:	f000 ff36 	bl	44ec4 <memset>
	nrf_out->ai_flags = z_to_nrf_addrinfo_flags(z_in->ai_flags);
   44058:	2300      	movs	r3, #0
   4405a:	6023      	str	r3, [r4, #0]
	nrf_out->ai_socktype = z_to_nrf_socktype(z_in->ai_socktype);
   4405c:	68ab      	ldr	r3, [r5, #8]
	switch (socktype) {
   4405e:	2b03      	cmp	r3, #3
   44060:	d003      	beq.n	4406a <z_to_nrf_addrinfo_hints+0x22>
		return NRF_SOCK_MGMT;
   44062:	2b04      	cmp	r3, #4
   44064:	bf08      	it	eq
   44066:	f44f 7300 	moveq.w	r3, #512	; 0x200
	nrf_out->ai_socktype = z_to_nrf_socktype(z_in->ai_socktype);
   4406a:	60a3      	str	r3, [r4, #8]
	family = z_to_nrf_family(z_in->ai_family);
   4406c:	88a8      	ldrh	r0, [r5, #4]
   4406e:	f7ff ff9e 	bl	43fae <z_to_nrf_family>
	if (family == -EAFNOSUPPORT) {
   44072:	f110 0f6a 	cmn.w	r0, #106	; 0x6a
   44076:	d00b      	beq.n	44090 <z_to_nrf_addrinfo_hints+0x48>
	nrf_out->ai_family = family;
   44078:	6060      	str	r0, [r4, #4]
	nrf_out->ai_protocol = z_to_nrf_protocol(z_in->ai_protocol);
   4407a:	68e8      	ldr	r0, [r5, #12]
   4407c:	f7ff ffad 	bl	43fda <z_to_nrf_protocol>
	if (nrf_out->ai_protocol == -EPROTONOSUPPORT) {
   44080:	f110 0f7b 	cmn.w	r0, #123	; 0x7b
	nrf_out->ai_protocol = z_to_nrf_protocol(z_in->ai_protocol);
   44084:	60e0      	str	r0, [r4, #12]
	if (nrf_out->ai_protocol == -EPROTONOSUPPORT) {
   44086:	d003      	beq.n	44090 <z_to_nrf_addrinfo_hints+0x48>
	if (z_in->ai_canonname != NULL) {
   44088:	69a8      	ldr	r0, [r5, #24]
   4408a:	b108      	cbz	r0, 44090 <z_to_nrf_addrinfo_hints+0x48>
		nrf_out->ai_canonname = z_in->ai_canonname;
   4408c:	61a0      	str	r0, [r4, #24]
	return 0;
   4408e:	2000      	movs	r0, #0
}
   44090:	bd38      	pop	{r3, r4, r5, pc}

00044092 <nrf91_socket_offload_send>:
{
   44092:	b570      	push	{r4, r5, r6, lr}
   44094:	4604      	mov	r4, r0
	return nrf_send(sd, buf, len, z_to_nrf_flags(flags));
   44096:	4618      	mov	r0, r3
{
   44098:	4615      	mov	r5, r2
	return nrf_send(sd, buf, len, z_to_nrf_flags(flags));
   4409a:	f7ff ff7e 	bl	43f9a <z_to_nrf_flags>
   4409e:	462a      	mov	r2, r5
   440a0:	4603      	mov	r3, r0
   440a2:	4620      	mov	r0, r4
}
   440a4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return nrf_send(sd, buf, len, z_to_nrf_flags(flags));
   440a8:	f7f3 b952 	b.w	37350 <nrf_send>

000440ac <nrf91_socket_offload_recv>:
{
   440ac:	b570      	push	{r4, r5, r6, lr}
   440ae:	4604      	mov	r4, r0
	return nrf_recv(sd, buf, max_len, z_to_nrf_flags(flags));
   440b0:	4618      	mov	r0, r3
{
   440b2:	4615      	mov	r5, r2
	return nrf_recv(sd, buf, max_len, z_to_nrf_flags(flags));
   440b4:	f7ff ff71 	bl	43f9a <z_to_nrf_flags>
   440b8:	462a      	mov	r2, r5
   440ba:	4603      	mov	r3, r0
   440bc:	4620      	mov	r0, r4
}
   440be:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return nrf_recv(sd, buf, max_len, z_to_nrf_flags(flags));
   440c2:	f7f3 b97b 	b.w	373bc <nrf_recv>

000440c6 <nrf91_socket_offload_getsockopt>:
{
   440c6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   440ca:	461d      	mov	r5, r3
	struct nrf_timeval nrf_rcvtimeo = {0, 0};
   440cc:	2300      	movs	r3, #0
{
   440ce:	b086      	sub	sp, #24
   440d0:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
	struct nrf_timeval nrf_rcvtimeo = {0, 0};
   440d4:	e9cd 3304 	strd	r3, r3, [sp, #16]
	nrf_socklen_t nrf_optlen = (nrf_socklen_t)*optlen;
   440d8:	f8d8 3000 	ldr.w	r3, [r8]
	switch (z_in_level) {
   440dc:	f5b1 7f8d 	cmp.w	r1, #282	; 0x11a
{
   440e0:	4607      	mov	r7, r0
   440e2:	460c      	mov	r4, r1
   440e4:	4616      	mov	r6, r2
	nrf_socklen_t nrf_optlen = (nrf_socklen_t)*optlen;
   440e6:	9303      	str	r3, [sp, #12]
	switch (z_in_level) {
   440e8:	d002      	beq.n	440f0 <nrf91_socket_offload_getsockopt+0x2a>
   440ea:	dc2b      	bgt.n	44144 <nrf91_socket_offload_getsockopt+0x7e>
   440ec:	2901      	cmp	r1, #1
   440ee:	d13d      	bne.n	4416c <nrf91_socket_offload_getsockopt+0xa6>
	if (z_to_nrf_optname(level, optname, &nrf_optname) < 0)
   440f0:	aa02      	add	r2, sp, #8
   440f2:	4631      	mov	r1, r6
   440f4:	4620      	mov	r0, r4
   440f6:	f7ec f981 	bl	303fc <z_to_nrf_optname>
   440fa:	2800      	cmp	r0, #0
   440fc:	db36      	blt.n	4416c <nrf91_socket_offload_getsockopt+0xa6>
	if ((level == SOL_SOCKET) && (optname == SO_RCVTIMEO)) {
   440fe:	2c01      	cmp	r4, #1
   44100:	d128      	bne.n	44154 <nrf91_socket_offload_getsockopt+0x8e>
   44102:	2e14      	cmp	r6, #20
   44104:	d126      	bne.n	44154 <nrf91_socket_offload_getsockopt+0x8e>
		nrf_optlen = sizeof(struct nrf_timeval);
   44106:	2308      	movs	r3, #8
   44108:	9303      	str	r3, [sp, #12]
		nrf_optval = &nrf_rcvtimeo;
   4410a:	ab04      	add	r3, sp, #16
	retval = nrf_getsockopt(sd, nrf_level, nrf_optname, nrf_optval,
   4410c:	aa03      	add	r2, sp, #12
   4410e:	9200      	str	r2, [sp, #0]
   44110:	4638      	mov	r0, r7
   44112:	9a02      	ldr	r2, [sp, #8]
   44114:	4621      	mov	r1, r4
   44116:	f7f3 f9d1 	bl	374bc <nrf_getsockopt>
	if ((retval == 0) && (optval != NULL)) {
   4411a:	4607      	mov	r7, r0
   4411c:	b970      	cbnz	r0, 4413c <nrf91_socket_offload_getsockopt+0x76>
   4411e:	b16d      	cbz	r5, 4413c <nrf91_socket_offload_getsockopt+0x76>
		*optlen = nrf_optlen;
   44120:	9b03      	ldr	r3, [sp, #12]
		if (level == SOL_SOCKET) {
   44122:	2c01      	cmp	r4, #1
		*optlen = nrf_optlen;
   44124:	f8c8 3000 	str.w	r3, [r8]
		if (level == SOL_SOCKET) {
   44128:	d108      	bne.n	4413c <nrf91_socket_offload_getsockopt+0x76>
			if (optname == SO_ERROR) {
   4412a:	2e04      	cmp	r6, #4
   4412c:	d114      	bne.n	44158 <nrf91_socket_offload_getsockopt+0x92>
				bsd_os_errno_set(*(int *)optval);
   4412e:	6828      	ldr	r0, [r5, #0]
   44130:	f7ec f830 	bl	30194 <bsd_os_errno_set>
				*(int *)optval = errno;
   44134:	f7fe fd8d 	bl	42c52 <__errno>
   44138:	6803      	ldr	r3, [r0, #0]
   4413a:	602b      	str	r3, [r5, #0]
}
   4413c:	4638      	mov	r0, r7
   4413e:	b006      	add	sp, #24
   44140:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	switch (z_in_level) {
   44144:	f240 2302 	movw	r3, #514	; 0x202
   44148:	4299      	cmp	r1, r3
   4414a:	d0d1      	beq.n	440f0 <nrf91_socket_offload_getsockopt+0x2a>
   4414c:	f240 2303 	movw	r3, #515	; 0x203
   44150:	4299      	cmp	r1, r3
   44152:	e7cc      	b.n	440ee <nrf91_socket_offload_getsockopt+0x28>
   44154:	462b      	mov	r3, r5
   44156:	e7d9      	b.n	4410c <nrf91_socket_offload_getsockopt+0x46>
			} else if (optname == SO_RCVTIMEO) {
   44158:	2e14      	cmp	r6, #20
   4415a:	d1ef      	bne.n	4413c <nrf91_socket_offload_getsockopt+0x76>
				((struct timeval *)optval)->tv_sec =
   4415c:	9b04      	ldr	r3, [sp, #16]
   4415e:	602b      	str	r3, [r5, #0]
				((struct timeval *)optval)->tv_usec =
   44160:	9b05      	ldr	r3, [sp, #20]
   44162:	606b      	str	r3, [r5, #4]
				*optlen = sizeof(struct timeval);
   44164:	2308      	movs	r3, #8
   44166:	f8c8 3000 	str.w	r3, [r8]
   4416a:	e7e7      	b.n	4413c <nrf91_socket_offload_getsockopt+0x76>
	errno = ENOPROTOOPT;
   4416c:	f7fe fd71 	bl	42c52 <__errno>
   44170:	236d      	movs	r3, #109	; 0x6d
	return retval;
   44172:	f04f 37ff 	mov.w	r7, #4294967295
	errno = ENOPROTOOPT;
   44176:	6003      	str	r3, [r0, #0]
	return retval;
   44178:	e7e0      	b.n	4413c <nrf91_socket_offload_getsockopt+0x76>

0004417a <nrf91_socket_offload_poll>:
{
   4417a:	b5f0      	push	{r4, r5, r6, r7, lr}
   4417c:	b091      	sub	sp, #68	; 0x44
   4417e:	4605      	mov	r5, r0
   44180:	460c      	mov	r4, r1
   44182:	4616      	mov	r6, r2
	struct nrf_pollfd tmp[BSD_MAX_SOCKET_COUNT] = {0};
   44184:	2100      	movs	r1, #0
   44186:	2240      	movs	r2, #64	; 0x40
   44188:	4668      	mov	r0, sp
   4418a:	f000 fe9b 	bl	44ec4 <memset>
	for (int i = 0; i < nfds; i++) {
   4418e:	466a      	mov	r2, sp
   44190:	2100      	movs	r1, #0
		if (fds[i].events & POLLIN) {
   44192:	1d2f      	adds	r7, r5, #4
	for (int i = 0; i < nfds; i++) {
   44194:	42a1      	cmp	r1, r4
   44196:	db0c      	blt.n	441b2 <nrf91_socket_offload_poll+0x38>
	retval = nrf_poll((struct nrf_pollfd *)&tmp, nfds, timeout);
   44198:	4632      	mov	r2, r6
   4419a:	4621      	mov	r1, r4
   4419c:	4668      	mov	r0, sp
   4419e:	f7f3 f9ad 	bl	374fc <nrf_poll>
	for (int i = 0; i < nfds; i++) {
   441a2:	2200      	movs	r2, #0
   441a4:	462b      	mov	r3, r5
		fds[i].revents = 0;
   441a6:	4616      	mov	r6, r2
			fds[i].revents |= POLLIN;
   441a8:	2701      	movs	r7, #1
	for (int i = 0; i < nfds; i++) {
   441aa:	42a2      	cmp	r2, r4
   441ac:	db1a      	blt.n	441e4 <nrf91_socket_offload_poll+0x6a>
}
   441ae:	b011      	add	sp, #68	; 0x44
   441b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
		tmp[i].handle = fds[i].fd;
   441b2:	f855 3031 	ldr.w	r3, [r5, r1, lsl #3]
		if (fds[i].events & POLLIN) {
   441b6:	f837 0031 	ldrh.w	r0, [r7, r1, lsl #3]
		tmp[i].handle = fds[i].fd;
   441ba:	6013      	str	r3, [r2, #0]
		if (fds[i].events & POLLIN) {
   441bc:	07c3      	lsls	r3, r0, #31
			tmp[i].requested |= NRF_POLLIN;
   441be:	bf48      	it	mi
   441c0:	8893      	ldrhmi	r3, [r2, #4]
	for (int i = 0; i < nfds; i++) {
   441c2:	f101 0101 	add.w	r1, r1, #1
			tmp[i].requested |= NRF_POLLIN;
   441c6:	bf44      	itt	mi
   441c8:	f043 0301 	orrmi.w	r3, r3, #1
   441cc:	8093      	strhmi	r3, [r2, #4]
		if (fds[i].events & POLLOUT) {
   441ce:	0743      	lsls	r3, r0, #29
			tmp[i].requested |= NRF_POLLOUT;
   441d0:	bf48      	it	mi
   441d2:	8893      	ldrhmi	r3, [r2, #4]
   441d4:	f102 0208 	add.w	r2, r2, #8
   441d8:	bf44      	itt	mi
   441da:	f043 0302 	orrmi.w	r3, r3, #2
   441de:	f822 3c04 	strhmi.w	r3, [r2, #-4]
   441e2:	e7d7      	b.n	44194 <nrf91_socket_offload_poll+0x1a>
		if (tmp[i].returned & NRF_POLLIN) {
   441e4:	eb0d 01c2 	add.w	r1, sp, r2, lsl #3
   441e8:	88c9      	ldrh	r1, [r1, #6]
		fds[i].revents = 0;
   441ea:	80de      	strh	r6, [r3, #6]
		if (tmp[i].returned & NRF_POLLIN) {
   441ec:	07cd      	lsls	r5, r1, #31
			fds[i].revents |= POLLIN;
   441ee:	bf48      	it	mi
   441f0:	80df      	strhmi	r7, [r3, #6]
		if (tmp[i].returned & NRF_POLLOUT) {
   441f2:	078d      	lsls	r5, r1, #30
			fds[i].revents |= POLLOUT;
   441f4:	bf48      	it	mi
   441f6:	88dd      	ldrhmi	r5, [r3, #6]
	for (int i = 0; i < nfds; i++) {
   441f8:	f102 0201 	add.w	r2, r2, #1
			fds[i].revents |= POLLOUT;
   441fc:	bf44      	itt	mi
   441fe:	f045 0504 	orrmi.w	r5, r5, #4
   44202:	80dd      	strhmi	r5, [r3, #6]
		if (tmp[i].returned & NRF_POLLERR) {
   44204:	074d      	lsls	r5, r1, #29
			fds[i].revents |= POLLERR;
   44206:	bf48      	it	mi
   44208:	88dd      	ldrhmi	r5, [r3, #6]
   4420a:	f103 0308 	add.w	r3, r3, #8
   4420e:	bf44      	itt	mi
   44210:	f045 0508 	orrmi.w	r5, r5, #8
   44214:	f823 5c02 	strhmi.w	r5, [r3, #-2]
		if (tmp[i].returned & NRF_POLLNVAL) {
   44218:	06cd      	lsls	r5, r1, #27
			fds[i].revents |= POLLNVAL;
   4421a:	bf42      	ittt	mi
   4421c:	f833 5c02 	ldrhmi.w	r5, [r3, #-2]
   44220:	f045 0520 	orrmi.w	r5, r5, #32
   44224:	f823 5c02 	strhmi.w	r5, [r3, #-2]
		if (tmp[i].returned & NRF_POLLHUP) {
   44228:	0709      	lsls	r1, r1, #28
			fds[i].revents |= POLLHUP;
   4422a:	bf42      	ittt	mi
   4422c:	f833 1c02 	ldrhmi.w	r1, [r3, #-2]
   44230:	f041 0110 	orrmi.w	r1, r1, #16
   44234:	f823 1c02 	strhmi.w	r1, [r3, #-2]
   44238:	e7b7      	b.n	441aa <nrf91_socket_offload_poll+0x30>

0004423a <nrf91_socket_offload_listen>:
	return nrf_listen(sd, backlog);
   4423a:	f7f3 b8eb 	b.w	37414 <nrf_listen>

0004423e <nrf91_socket_offload_close>:
	return nrf_close(sd);
   4423e:	f7f3 b85d 	b.w	372fc <nrf_close>

00044242 <nrf91_socket_offload_fcntl>:
	switch (cmd) {
   44242:	2903      	cmp	r1, #3
{
   44244:	b508      	push	{r3, lr}
	switch (cmd) {
   44246:	d00b      	beq.n	44260 <nrf91_socket_offload_fcntl+0x1e>
   44248:	2904      	cmp	r1, #4
   4424a:	d111      	bne.n	44270 <nrf91_socket_offload_fcntl+0x2e>
		flags = va_arg(args, int);
   4424c:	6812      	ldr	r2, [r2, #0]
		if (flags != 0 && flags != O_NONBLOCK)
   4424e:	f432 4380 	bics.w	r3, r2, #16384	; 0x4000
   44252:	d10d      	bne.n	44270 <nrf91_socket_offload_fcntl+0x2e>
}
   44254:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		retval = nrf_fcntl(fd, NRF_F_SETFL, flags);
   44258:	1392      	asrs	r2, r2, #14
   4425a:	2101      	movs	r1, #1
   4425c:	f7f3 b950 	b.w	37500 <nrf_fcntl>
		flags = nrf_fcntl(fd, NRF_F_GETFL, 0);
   44260:	2200      	movs	r2, #0
   44262:	2102      	movs	r1, #2
   44264:	f7f3 f94c 	bl	37500 <nrf_fcntl>
		retval = (flags & NRF_O_NONBLOCK) ? O_NONBLOCK : 0;
   44268:	0380      	lsls	r0, r0, #14
   4426a:	f400 4080 	and.w	r0, r0, #16384	; 0x4000
}
   4426e:	bd08      	pop	{r3, pc}
	errno = EINVAL;
   44270:	f7fe fcef 	bl	42c52 <__errno>
   44274:	2316      	movs	r3, #22
   44276:	6003      	str	r3, [r0, #0]
	return retval;
   44278:	f04f 30ff 	mov.w	r0, #4294967295
   4427c:	e7f7      	b.n	4426e <nrf91_socket_offload_fcntl+0x2c>

0004427e <nrf_to_z_ipv6>:
	ptr->sin6_port = nrf_in->sin6_port;
   4427e:	890b      	ldrh	r3, [r1, #8]
	ptr->sin6_family = AF_INET6;
   44280:	2202      	movs	r2, #2
	ptr->sin6_port = nrf_in->sin6_port;
   44282:	8043      	strh	r3, [r0, #2]
	ptr->sin6_family = AF_INET6;
   44284:	4603      	mov	r3, r0
{
   44286:	b530      	push	{r4, r5, lr}
	ptr->sin6_family = AF_INET6;
   44288:	f823 2b04 	strh.w	r2, [r3], #4
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   4428c:	f101 0210 	add.w	r2, r1, #16
   44290:	f102 0410 	add.w	r4, r2, #16
   44294:	f852 5b04 	ldr.w	r5, [r2], #4
   44298:	42a2      	cmp	r2, r4
   4429a:	f843 5b04 	str.w	r5, [r3], #4
   4429e:	d1f9      	bne.n	44294 <nrf_to_z_ipv6+0x16>
	ptr->sin6_scope_id = (u8_t)nrf_in->sin6_scope_id;
   442a0:	6a0b      	ldr	r3, [r1, #32]
   442a2:	7503      	strb	r3, [r0, #20]
}
   442a4:	bd30      	pop	{r4, r5, pc}

000442a6 <nrf91_socket_offload_getaddrinfo>:
{
   442a6:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   442aa:	4614      	mov	r4, r2
   442ac:	460e      	mov	r6, r1
	struct nrf_addrinfo *nrf_res = NULL;
   442ae:	2100      	movs	r1, #0
{
   442b0:	b093      	sub	sp, #76	; 0x4c
   442b2:	4605      	mov	r5, r0
	memset(&nrf_hints, 0, sizeof(struct nrf_addrinfo));
   442b4:	2220      	movs	r2, #32
   442b6:	a802      	add	r0, sp, #8
{
   442b8:	461f      	mov	r7, r3
	struct nrf_addrinfo *nrf_res = NULL;
   442ba:	9101      	str	r1, [sp, #4]
	memset(&nrf_hints, 0, sizeof(struct nrf_addrinfo));
   442bc:	f000 fe02 	bl	44ec4 <memset>
	if (hints != NULL) {
   442c0:	b194      	cbz	r4, 442e8 <nrf91_socket_offload_getaddrinfo+0x42>
		error = z_to_nrf_addrinfo_hints(hints, &nrf_hints);
   442c2:	a902      	add	r1, sp, #8
   442c4:	4620      	mov	r0, r4
   442c6:	f7ff febf 	bl	44048 <z_to_nrf_addrinfo_hints>
		if (error == -EPROTONOSUPPORT) {
   442ca:	f110 0f7b 	cmn.w	r0, #123	; 0x7b
   442ce:	f000 80bf 	beq.w	44450 <nrf91_socket_offload_getaddrinfo+0x1aa>
		} else if (error == -EAFNOSUPPORT) {
   442d2:	306a      	adds	r0, #106	; 0x6a
   442d4:	f000 80bf 	beq.w	44456 <nrf91_socket_offload_getaddrinfo+0x1b0>
		if (hints->ai_next != NULL) {
   442d8:	69e0      	ldr	r0, [r4, #28]
   442da:	b120      	cbz	r0, 442e6 <nrf91_socket_offload_getaddrinfo+0x40>
			z_to_nrf_addrinfo_hints(hints->ai_next, &nrf_hints_pdn);
   442dc:	ac0a      	add	r4, sp, #40	; 0x28
   442de:	4621      	mov	r1, r4
   442e0:	f7ff feb2 	bl	44048 <z_to_nrf_addrinfo_hints>
			nrf_hints.ai_next = &nrf_hints_pdn;
   442e4:	9409      	str	r4, [sp, #36]	; 0x24
		nrf_hints_ptr = &nrf_hints;
   442e6:	ac02      	add	r4, sp, #8
	int retval = nrf_getaddrinfo(node, service, nrf_hints_ptr, &nrf_res);
   442e8:	4628      	mov	r0, r5
   442ea:	ab01      	add	r3, sp, #4
   442ec:	4622      	mov	r2, r4
   442ee:	4631      	mov	r1, r6
   442f0:	f7f3 f900 	bl	374f4 <nrf_getaddrinfo>
	if (retval != 0) {
   442f4:	4605      	mov	r5, r0
   442f6:	b1b0      	cbz	r0, 44326 <nrf91_socket_offload_getaddrinfo+0x80>
	switch (nrf_error) {
   442f8:	2823      	cmp	r0, #35	; 0x23
   442fa:	f000 80af 	beq.w	4445c <nrf91_socket_offload_getaddrinfo+0x1b6>
   442fe:	dc0a      	bgt.n	44316 <nrf91_socket_offload_getaddrinfo+0x70>
		return DNS_EAI_SYSTEM;
   44300:	280c      	cmp	r0, #12
   44302:	bf08      	it	eq
   44304:	f06f 0509 	mvneq.w	r5, #9
   44308:	bf18      	it	ne
   4430a:	f06f 050a 	mvnne.w	r5, #10
}
   4430e:	4628      	mov	r0, r5
   44310:	b013      	add	sp, #76	; 0x4c
   44312:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	switch (nrf_error) {
   44316:	282f      	cmp	r0, #47	; 0x2f
   44318:	f000 80a3 	beq.w	44462 <nrf91_socket_offload_getaddrinfo+0x1bc>
		return DNS_EAI_SYSTEM;
   4431c:	2873      	cmp	r0, #115	; 0x73
   4431e:	bf08      	it	eq
   44320:	f06f 0563 	mvneq.w	r5, #99	; 0x63
   44324:	e7f0      	b.n	44308 <nrf91_socket_offload_getaddrinfo+0x62>
	struct addrinfo *latest_z_res = NULL;
   44326:	4680      	mov	r8, r0
	z_out->ai_next = NULL;
   44328:	4681      	mov	r9, r0
	struct nrf_addrinfo *next_nrf_res = nrf_res;
   4432a:	9e01      	ldr	r6, [sp, #4]
	*res = NULL;
   4432c:	6038      	str	r0, [r7, #0]
	while ((retval == 0) && (next_nrf_res != NULL)) {
   4432e:	b91e      	cbnz	r6, 44338 <nrf91_socket_offload_getaddrinfo+0x92>
	nrf_freeaddrinfo(nrf_res);
   44330:	9801      	ldr	r0, [sp, #4]
   44332:	f7f3 f8e1 	bl	374f8 <nrf_freeaddrinfo>
	return retval;
   44336:	e7ea      	b.n	4430e <nrf91_socket_offload_getaddrinfo+0x68>
		struct addrinfo *next_z_res = k_malloc(sizeof(struct addrinfo));
   44338:	2020      	movs	r0, #32
   4433a:	f7f7 fa3b 	bl	3b7b4 <k_malloc>
		if (next_z_res == NULL) {
   4433e:	4604      	mov	r4, r0
   44340:	2800      	cmp	r0, #0
   44342:	d07a      	beq.n	4443a <nrf91_socket_offload_getaddrinfo+0x194>
	family = nrf_to_z_family(nrf_in->ai_family);
   44344:	6872      	ldr	r2, [r6, #4]
	z_out->ai_socktype = nrf_in->ai_socktype;
   44346:	68b3      	ldr	r3, [r6, #8]
	switch (nrf_family) {
   44348:	2a05      	cmp	r2, #5
	z_out->ai_canonname = NULL; /* TODO Do proper content copy. */
   4434a:	e9c0 9906 	strd	r9, r9, [r0, #24]
	z_out->ai_flags = nrf_to_z_addrinfo_flags(nrf_in->ai_flags);
   4434e:	f8c0 9000 	str.w	r9, [r0]
	z_out->ai_socktype = nrf_in->ai_socktype;
   44352:	6083      	str	r3, [r0, #8]
	switch (nrf_family) {
   44354:	d033      	beq.n	443be <nrf91_socket_offload_getaddrinfo+0x118>
   44356:	dc09      	bgt.n	4436c <nrf91_socket_offload_getaddrinfo+0xc6>
   44358:	2a01      	cmp	r2, #1
   4435a:	d032      	beq.n	443c2 <nrf91_socket_offload_getaddrinfo+0x11c>
   4435c:	2a02      	cmp	r2, #2
   4435e:	d032      	beq.n	443c6 <nrf91_socket_offload_getaddrinfo+0x120>
			k_free(next_z_res);
   44360:	4620      	mov	r0, r4
   44362:	f000 fb9c 	bl	44a9e <k_free>
			retval = DNS_EAI_ADDRFAMILY;
   44366:	f06f 0508 	mvn.w	r5, #8
   4436a:	e068      	b.n	4443e <nrf91_socket_offload_getaddrinfo+0x198>
	switch (nrf_family) {
   4436c:	2a0a      	cmp	r2, #10
   4436e:	d02c      	beq.n	443ca <nrf91_socket_offload_getaddrinfo+0x124>
   44370:	2a66      	cmp	r2, #102	; 0x66
   44372:	d1f5      	bne.n	44360 <nrf91_socket_offload_getaddrinfo+0xba>
		return AF_LTE;
   44374:	4613      	mov	r3, r2
	z_out->ai_family = family;
   44376:	6063      	str	r3, [r4, #4]
	z_out->ai_protocol = nrf_to_z_protocol(nrf_in->ai_protocol);
   44378:	68f3      	ldr	r3, [r6, #12]
	switch (proto) {
   4437a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
   4437e:	d045      	beq.n	4440c <nrf91_socket_offload_getaddrinfo+0x166>
   44380:	dc25      	bgt.n	443ce <nrf91_socket_offload_getaddrinfo+0x128>
   44382:	2b01      	cmp	r3, #1
   44384:	d047      	beq.n	44416 <nrf91_socket_offload_getaddrinfo+0x170>
   44386:	2b02      	cmp	r3, #2
   44388:	d043      	beq.n	44412 <nrf91_socket_offload_getaddrinfo+0x16c>
   4438a:	bb43      	cbnz	r3, 443de <nrf91_socket_offload_getaddrinfo+0x138>
	if (nrf_in->ai_family == NRF_AF_INET) {
   4438c:	2a02      	cmp	r2, #2
	z_out->ai_protocol = nrf_to_z_protocol(nrf_in->ai_protocol);
   4438e:	60e3      	str	r3, [r4, #12]
	if (nrf_in->ai_family == NRF_AF_INET) {
   44390:	d143      	bne.n	4441a <nrf91_socket_offload_getaddrinfo+0x174>
		z_out->ai_addr = k_malloc(sizeof(struct sockaddr_in));
   44392:	2008      	movs	r0, #8
   44394:	f7f7 fa0e 	bl	3b7b4 <k_malloc>
   44398:	6160      	str	r0, [r4, #20]
		if (z_out->ai_addr == NULL) {
   4439a:	2800      	cmp	r0, #0
   4439c:	d04a      	beq.n	44434 <nrf91_socket_offload_getaddrinfo+0x18e>
		z_out->ai_addrlen  = sizeof(struct sockaddr_in);
   4439e:	2308      	movs	r3, #8
   443a0:	6123      	str	r3, [r4, #16]
			(const struct nrf_sockaddr_in *)nrf_in->ai_addr);
   443a2:	6973      	ldr	r3, [r6, #20]
	ptr->sin_port = nrf_in->sin_port;
   443a4:	891a      	ldrh	r2, [r3, #8]
	ptr->sin_addr.s_addr = nrf_in->sin_addr.s_addr;
   443a6:	68db      	ldr	r3, [r3, #12]
	ptr->sin_port = nrf_in->sin_port;
   443a8:	8042      	strh	r2, [r0, #2]
	ptr->sin_family = AF_INET;
   443aa:	2201      	movs	r2, #1
	ptr->sin_addr.s_addr = nrf_in->sin_addr.s_addr;
   443ac:	6043      	str	r3, [r0, #4]
	ptr->sin_family = AF_INET;
   443ae:	8002      	strh	r2, [r0, #0]
		if (latest_z_res == NULL) {
   443b0:	f1b8 0f00 	cmp.w	r8, #0
   443b4:	d149      	bne.n	4444a <nrf91_socket_offload_getaddrinfo+0x1a4>
			*res = next_z_res;
   443b6:	603c      	str	r4, [r7, #0]
		next_nrf_res = next_nrf_res->ai_next;
   443b8:	69f6      	ldr	r6, [r6, #28]
   443ba:	46a0      	mov	r8, r4
   443bc:	e7b7      	b.n	4432e <nrf91_socket_offload_getaddrinfo+0x88>
		return AF_PACKET;
   443be:	2303      	movs	r3, #3
   443c0:	e7d9      	b.n	44376 <nrf91_socket_offload_getaddrinfo+0xd0>
		return AF_LOCAL;
   443c2:	2367      	movs	r3, #103	; 0x67
   443c4:	e7d7      	b.n	44376 <nrf91_socket_offload_getaddrinfo+0xd0>
		return AF_INET;
   443c6:	2301      	movs	r3, #1
   443c8:	e7d5      	b.n	44376 <nrf91_socket_offload_getaddrinfo+0xd0>
		return AF_INET6;
   443ca:	2302      	movs	r3, #2
   443cc:	e7d3      	b.n	44376 <nrf91_socket_offload_getaddrinfo+0xd0>
	switch (proto) {
   443ce:	f240 2101 	movw	r1, #513	; 0x201
   443d2:	428b      	cmp	r3, r1
   443d4:	d0da      	beq.n	4438c <nrf91_socket_offload_getaddrinfo+0xe6>
   443d6:	dc0d      	bgt.n	443f4 <nrf91_socket_offload_getaddrinfo+0x14e>
   443d8:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
   443dc:	d013      	beq.n	44406 <nrf91_socket_offload_getaddrinfo+0x160>
	z_out->ai_protocol = nrf_to_z_protocol(nrf_in->ai_protocol);
   443de:	f06f 037a 	mvn.w	r3, #122	; 0x7a
   443e2:	60e3      	str	r3, [r4, #12]
		z_out->ai_addr = NULL;
   443e4:	2300      	movs	r3, #0
   443e6:	6163      	str	r3, [r4, #20]
			k_free(next_z_res);
   443e8:	4620      	mov	r0, r4
   443ea:	f000 fb58 	bl	44a9e <k_free>
			retval = DNS_EAI_SOCKTYPE;
   443ee:	f06f 0506 	mvn.w	r5, #6
   443f2:	e024      	b.n	4443e <nrf91_socket_offload_getaddrinfo+0x198>
	switch (proto) {
   443f4:	f240 2102 	movw	r1, #514	; 0x202
   443f8:	428b      	cmp	r3, r1
   443fa:	d0c7      	beq.n	4438c <nrf91_socket_offload_getaddrinfo+0xe6>
   443fc:	f240 2103 	movw	r1, #515	; 0x203
   44400:	428b      	cmp	r3, r1
   44402:	d0c3      	beq.n	4438c <nrf91_socket_offload_getaddrinfo+0xe6>
   44404:	e7eb      	b.n	443de <nrf91_socket_offload_getaddrinfo+0x138>
	z_out->ai_protocol = nrf_to_z_protocol(nrf_in->ai_protocol);
   44406:	f240 1311 	movw	r3, #273	; 0x111
   4440a:	e7bf      	b.n	4438c <nrf91_socket_offload_getaddrinfo+0xe6>
   4440c:	f44f 7381 	mov.w	r3, #258	; 0x102
   44410:	e7bc      	b.n	4438c <nrf91_socket_offload_getaddrinfo+0xe6>
   44412:	2311      	movs	r3, #17
   44414:	e7ba      	b.n	4438c <nrf91_socket_offload_getaddrinfo+0xe6>
   44416:	2306      	movs	r3, #6
   44418:	e7b8      	b.n	4438c <nrf91_socket_offload_getaddrinfo+0xe6>
	} else if (nrf_in->ai_family == NRF_AF_INET6) {
   4441a:	2a0a      	cmp	r2, #10
   4441c:	d1e4      	bne.n	443e8 <nrf91_socket_offload_getaddrinfo+0x142>
		z_out->ai_addr = k_malloc(sizeof(struct sockaddr_in6));
   4441e:	2018      	movs	r0, #24
   44420:	f7f7 f9c8 	bl	3b7b4 <k_malloc>
   44424:	6160      	str	r0, [r4, #20]
		if (z_out->ai_addr == NULL) {
   44426:	b128      	cbz	r0, 44434 <nrf91_socket_offload_getaddrinfo+0x18e>
		z_out->ai_addrlen  = sizeof(struct sockaddr_in6);
   44428:	2318      	movs	r3, #24
		nrf_to_z_ipv6(z_out->ai_addr,
   4442a:	6971      	ldr	r1, [r6, #20]
		z_out->ai_addrlen  = sizeof(struct sockaddr_in6);
   4442c:	6123      	str	r3, [r4, #16]
		nrf_to_z_ipv6(z_out->ai_addr,
   4442e:	f7ff ff26 	bl	4427e <nrf_to_z_ipv6>
		} else if (error == -EAFNOSUPPORT) {
   44432:	e7bd      	b.n	443b0 <nrf91_socket_offload_getaddrinfo+0x10a>
			k_free(next_z_res);
   44434:	4620      	mov	r0, r4
   44436:	f000 fb32 	bl	44a9e <k_free>
			retval = DNS_EAI_MEMORY;
   4443a:	f06f 0509 	mvn.w	r5, #9
		nrf91_socket_offload_freeaddrinfo(*res);
   4443e:	6838      	ldr	r0, [r7, #0]
   44440:	f7ff fdf5 	bl	4402e <nrf91_socket_offload_freeaddrinfo>
		*res = NULL;
   44444:	2300      	movs	r3, #0
   44446:	603b      	str	r3, [r7, #0]
   44448:	e772      	b.n	44330 <nrf91_socket_offload_getaddrinfo+0x8a>
			latest_z_res->ai_next = next_z_res;
   4444a:	f8c8 401c 	str.w	r4, [r8, #28]
   4444e:	e7b3      	b.n	443b8 <nrf91_socket_offload_getaddrinfo+0x112>
			return DNS_EAI_SOCKTYPE;
   44450:	f06f 0506 	mvn.w	r5, #6
   44454:	e75b      	b.n	4430e <nrf91_socket_offload_getaddrinfo+0x68>
			return DNS_EAI_ADDRFAMILY;
   44456:	f06f 0508 	mvn.w	r5, #8
   4445a:	e758      	b.n	4430e <nrf91_socket_offload_getaddrinfo+0x68>
		return DNS_EAI_AGAIN;
   4445c:	f06f 0502 	mvn.w	r5, #2
   44460:	e755      	b.n	4430e <nrf91_socket_offload_getaddrinfo+0x68>
		return DNS_EAI_NONAME;
   44462:	f06f 0501 	mvn.w	r5, #1
   44466:	e752      	b.n	4430e <nrf91_socket_offload_getaddrinfo+0x68>

00044468 <z_to_nrf_ipv6>:
	nrf_out->sin6_len = sizeof(struct nrf_sockaddr_in6);
   44468:	2224      	movs	r2, #36	; 0x24
{
   4446a:	b5f0      	push	{r4, r5, r6, r7, lr}
	nrf_out->sin6_len = sizeof(struct nrf_sockaddr_in6);
   4446c:	700a      	strb	r2, [r1, #0]
	nrf_out->sin6_port = ptr->sin6_port;
   4446e:	8842      	ldrh	r2, [r0, #2]
{
   44470:	4604      	mov	r4, r0
	nrf_out->sin6_port = ptr->sin6_port;
   44472:	810a      	strh	r2, [r1, #8]
	nrf_out->sin6_family = NRF_AF_INET6;
   44474:	220a      	movs	r2, #10
{
   44476:	460b      	mov	r3, r1
	nrf_out->sin6_family = NRF_AF_INET6;
   44478:	604a      	str	r2, [r1, #4]
   4447a:	f101 0610 	add.w	r6, r1, #16
   4447e:	1d02      	adds	r2, r0, #4
   44480:	f100 0714 	add.w	r7, r0, #20
   44484:	4635      	mov	r5, r6
   44486:	6810      	ldr	r0, [r2, #0]
   44488:	6851      	ldr	r1, [r2, #4]
   4448a:	3208      	adds	r2, #8
   4448c:	c503      	stmia	r5!, {r0, r1}
   4448e:	42ba      	cmp	r2, r7
   44490:	462e      	mov	r6, r5
   44492:	d1f7      	bne.n	44484 <z_to_nrf_ipv6+0x1c>
	nrf_out->sin6_scope_id = (u32_t)ptr->sin6_scope_id;
   44494:	7d22      	ldrb	r2, [r4, #20]
   44496:	621a      	str	r2, [r3, #32]
}
   44498:	bdf0      	pop	{r4, r5, r6, r7, pc}

0004449a <nrf91_socket_offload_sendto>:
{
   4449a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   4449e:	b08d      	sub	sp, #52	; 0x34
   444a0:	9c14      	ldr	r4, [sp, #80]	; 0x50
   444a2:	4605      	mov	r5, r0
   444a4:	460e      	mov	r6, r1
   444a6:	4617      	mov	r7, r2
   444a8:	4698      	mov	r8, r3
	if (to == NULL) {
   444aa:	b96c      	cbnz	r4, 444c8 <nrf91_socket_offload_sendto+0x2e>
		retval = nrf_sendto(sd, buf, len, z_to_nrf_flags(flags), NULL,
   444ac:	4618      	mov	r0, r3
   444ae:	f7ff fd74 	bl	43f9a <z_to_nrf_flags>
   444b2:	e9cd 4400 	strd	r4, r4, [sp]
		retval = nrf_sendto(sd, buf, len, z_to_nrf_flags(flags), &ipv6,
   444b6:	4603      	mov	r3, r0
   444b8:	463a      	mov	r2, r7
   444ba:	4631      	mov	r1, r6
   444bc:	4628      	mov	r0, r5
   444be:	f7f2 ff2b 	bl	37318 <nrf_sendto>
}
   444c2:	b00d      	add	sp, #52	; 0x34
   444c4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	} else if (to->sa_family == AF_INET) {
   444c8:	8823      	ldrh	r3, [r4, #0]
   444ca:	2b01      	cmp	r3, #1
   444cc:	d110      	bne.n	444f0 <nrf91_socket_offload_sendto+0x56>
	nrf_out->sin_port = ptr->sin_port;
   444ce:	8863      	ldrh	r3, [r4, #2]
	nrf_out->sin_len = sizeof(struct nrf_sockaddr_in);
   444d0:	2110      	movs	r1, #16
	nrf_out->sin_port = ptr->sin_port;
   444d2:	f8ad 3014 	strh.w	r3, [sp, #20]
	nrf_out->sin_family = NRF_AF_INET;
   444d6:	2302      	movs	r3, #2
   444d8:	9304      	str	r3, [sp, #16]
	nrf_out->sin_addr.s_addr = ptr->sin_addr.s_addr;
   444da:	6863      	ldr	r3, [r4, #4]
		retval = nrf_sendto(sd, buf, len, z_to_nrf_flags(flags), &ipv4,
   444dc:	4640      	mov	r0, r8
	nrf_out->sin_addr.s_addr = ptr->sin_addr.s_addr;
   444de:	9306      	str	r3, [sp, #24]
	nrf_out->sin_len = sizeof(struct nrf_sockaddr_in);
   444e0:	f88d 100c 	strb.w	r1, [sp, #12]
		retval = nrf_sendto(sd, buf, len, z_to_nrf_flags(flags), &ipv4,
   444e4:	f7ff fd59 	bl	43f9a <z_to_nrf_flags>
   444e8:	ab03      	add	r3, sp, #12
   444ea:	9101      	str	r1, [sp, #4]
   444ec:	9300      	str	r3, [sp, #0]
   444ee:	e7e2      	b.n	444b6 <nrf91_socket_offload_sendto+0x1c>
	} else if (to->sa_family == AF_INET6) {
   444f0:	2b02      	cmp	r3, #2
   444f2:	d10c      	bne.n	4450e <nrf91_socket_offload_sendto+0x74>
		z_to_nrf_ipv6(to, &ipv6);
   444f4:	f10d 090c 	add.w	r9, sp, #12
   444f8:	4649      	mov	r1, r9
   444fa:	4620      	mov	r0, r4
   444fc:	f7ff ffb4 	bl	44468 <z_to_nrf_ipv6>
		retval = nrf_sendto(sd, buf, len, z_to_nrf_flags(flags), &ipv6,
   44500:	4640      	mov	r0, r8
   44502:	f7ff fd4a 	bl	43f9a <z_to_nrf_flags>
   44506:	2324      	movs	r3, #36	; 0x24
   44508:	e9cd 9300 	strd	r9, r3, [sp]
   4450c:	e7d3      	b.n	444b6 <nrf91_socket_offload_sendto+0x1c>
	errno = ENOTSUP;
   4450e:	f7fe fba0 	bl	42c52 <__errno>
   44512:	2386      	movs	r3, #134	; 0x86
   44514:	6003      	str	r3, [r0, #0]
	return retval;
   44516:	f04f 30ff 	mov.w	r0, #4294967295
   4451a:	e7d2      	b.n	444c2 <nrf91_socket_offload_sendto+0x28>

0004451c <nrf91_socket_offload_recvfrom>:
{
   4451c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   44520:	4605      	mov	r5, r0
   44522:	b08c      	sub	sp, #48	; 0x30
   44524:	4618      	mov	r0, r3
   44526:	e9dd 4612 	ldrd	r4, r6, [sp, #72]	; 0x48
   4452a:	4690      	mov	r8, r2
	if (from == NULL) {
   4452c:	f7ff fd35 	bl	43f9a <z_to_nrf_flags>
   44530:	4603      	mov	r3, r0
   44532:	b954      	cbnz	r4, 4454a <nrf91_socket_offload_recvfrom+0x2e>
		retval = nrf_recvfrom(sd, buf, len, z_to_nrf_flags(flags), NULL,
   44534:	4628      	mov	r0, r5
   44536:	e9cd 4400 	strd	r4, r4, [sp]
   4453a:	4642      	mov	r2, r8
   4453c:	f7f2 ff22 	bl	37384 <nrf_recvfrom>
   44540:	4605      	mov	r5, r0
}
   44542:	4628      	mov	r0, r5
   44544:	b00c      	add	sp, #48	; 0x30
   44546:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		nrf_socklen_t sock_len = sizeof(struct nrf_sockaddr_in6);
   4454a:	2224      	movs	r2, #36	; 0x24
		retval = nrf_recvfrom(sd, buf, len, z_to_nrf_flags(flags),
   4454c:	af03      	add	r7, sp, #12
		nrf_socklen_t sock_len = sizeof(struct nrf_sockaddr_in6);
   4454e:	9202      	str	r2, [sp, #8]
		retval = nrf_recvfrom(sd, buf, len, z_to_nrf_flags(flags),
   44550:	aa02      	add	r2, sp, #8
   44552:	9201      	str	r2, [sp, #4]
   44554:	4628      	mov	r0, r5
   44556:	9700      	str	r7, [sp, #0]
   44558:	4642      	mov	r2, r8
   4455a:	f7f2 ff13 	bl	37384 <nrf_recvfrom>
		if (cliaddr->sa_family == NRF_AF_INET) {
   4455e:	9b04      	ldr	r3, [sp, #16]
		retval = nrf_recvfrom(sd, buf, len, z_to_nrf_flags(flags),
   44560:	4605      	mov	r5, r0
		if (cliaddr->sa_family == NRF_AF_INET) {
   44562:	2b02      	cmp	r3, #2
   44564:	d109      	bne.n	4457a <nrf91_socket_offload_recvfrom+0x5e>
	ptr->sin_port = nrf_in->sin_port;
   44566:	f8bd 3014 	ldrh.w	r3, [sp, #20]
   4456a:	8063      	strh	r3, [r4, #2]
	ptr->sin_family = AF_INET;
   4456c:	2301      	movs	r3, #1
   4456e:	8023      	strh	r3, [r4, #0]
	ptr->sin_addr.s_addr = nrf_in->sin_addr.s_addr;
   44570:	9b06      	ldr	r3, [sp, #24]
   44572:	6063      	str	r3, [r4, #4]
			*fromlen = sizeof(struct sockaddr_in);
   44574:	2308      	movs	r3, #8
			*fromlen = sizeof(struct sockaddr_in6);
   44576:	6033      	str	r3, [r6, #0]
	return retval;
   44578:	e7e3      	b.n	44542 <nrf91_socket_offload_recvfrom+0x26>
		} else if (cliaddr->sa_family == NRF_AF_INET6) {
   4457a:	2b0a      	cmp	r3, #10
   4457c:	d1e1      	bne.n	44542 <nrf91_socket_offload_recvfrom+0x26>
			nrf_to_z_ipv6(from, (struct nrf_sockaddr_in6 *)
   4457e:	4639      	mov	r1, r7
   44580:	4620      	mov	r0, r4
   44582:	f7ff fe7c 	bl	4427e <nrf_to_z_ipv6>
			*fromlen = sizeof(struct sockaddr_in6);
   44586:	2318      	movs	r3, #24
   44588:	e7f5      	b.n	44576 <nrf91_socket_offload_recvfrom+0x5a>

0004458a <nrf91_socket_offload_connect>:
{
   4458a:	b530      	push	{r4, r5, lr}
	if (addr->sa_family == AF_INET) {
   4458c:	880c      	ldrh	r4, [r1, #0]
{
   4458e:	b08b      	sub	sp, #44	; 0x2c
	if (addr->sa_family == AF_INET) {
   44590:	2c01      	cmp	r4, #1
{
   44592:	4605      	mov	r5, r0
   44594:	460b      	mov	r3, r1
	if (addr->sa_family == AF_INET) {
   44596:	d10e      	bne.n	445b6 <nrf91_socket_offload_connect+0x2c>
	nrf_out->sin_port = ptr->sin_port;
   44598:	8849      	ldrh	r1, [r1, #2]
	nrf_out->sin_len = sizeof(struct nrf_sockaddr_in);
   4459a:	2210      	movs	r2, #16
	nrf_out->sin_port = ptr->sin_port;
   4459c:	f8ad 100c 	strh.w	r1, [sp, #12]
	nrf_out->sin_family = NRF_AF_INET;
   445a0:	2102      	movs	r1, #2
	nrf_out->sin_addr.s_addr = ptr->sin_addr.s_addr;
   445a2:	685b      	ldr	r3, [r3, #4]
	nrf_out->sin_family = NRF_AF_INET;
   445a4:	9102      	str	r1, [sp, #8]
	nrf_out->sin_len = sizeof(struct nrf_sockaddr_in);
   445a6:	f88d 2004 	strb.w	r2, [sp, #4]
	nrf_out->sin_addr.s_addr = ptr->sin_addr.s_addr;
   445aa:	9304      	str	r3, [sp, #16]
		retval = nrf_connect(sd, (const struct nrf_sockaddr_in *)&ipv4,
   445ac:	a901      	add	r1, sp, #4
		retval = nrf_connect(sd, (const struct nrf_sockaddr *)&ipv6,
   445ae:	f7f2 ff1f 	bl	373f0 <nrf_connect>
}
   445b2:	b00b      	add	sp, #44	; 0x2c
   445b4:	bd30      	pop	{r4, r5, pc}
	} else if (addr->sa_family == AF_INET6) {
   445b6:	2c02      	cmp	r4, #2
   445b8:	d107      	bne.n	445ca <nrf91_socket_offload_connect+0x40>
		z_to_nrf_ipv6(addr, &ipv6);
   445ba:	a901      	add	r1, sp, #4
   445bc:	4618      	mov	r0, r3
   445be:	f7ff ff53 	bl	44468 <z_to_nrf_ipv6>
		retval = nrf_connect(sd, (const struct nrf_sockaddr *)&ipv6,
   445c2:	2224      	movs	r2, #36	; 0x24
   445c4:	a901      	add	r1, sp, #4
   445c6:	4628      	mov	r0, r5
   445c8:	e7f1      	b.n	445ae <nrf91_socket_offload_connect+0x24>
		retval = nrf_connect(sd, (void *)addr, addrlen);
   445ca:	f7f2 ff11 	bl	373f0 <nrf_connect>
		if (retval < 0) {
   445ce:	2800      	cmp	r0, #0
   445d0:	daef      	bge.n	445b2 <nrf91_socket_offload_connect+0x28>
	errno = ENOTSUP;
   445d2:	f7fe fb3e 	bl	42c52 <__errno>
   445d6:	2386      	movs	r3, #134	; 0x86
   445d8:	6003      	str	r3, [r0, #0]
   445da:	f04f 30ff 	mov.w	r0, #4294967295
   445de:	e7e8      	b.n	445b2 <nrf91_socket_offload_connect+0x28>

000445e0 <nrf91_socket_offload_accept>:
{
   445e0:	b5f0      	push	{r4, r5, r6, r7, lr}
   445e2:	4616      	mov	r6, r2
   445e4:	b08b      	sub	sp, #44	; 0x2c
	if ((addr != NULL) && (addrlen != NULL)) {
   445e6:	460c      	mov	r4, r1
   445e8:	b1f1      	cbz	r1, 44628 <nrf91_socket_offload_accept+0x48>
   445ea:	b302      	cbz	r2, 4462e <nrf91_socket_offload_accept+0x4e>
		if (*addrlen == sizeof(struct sockaddr_in)) {
   445ec:	6813      	ldr	r3, [r2, #0]
		nrf_addrlen_ptr = &nrf_addrlen;
   445ee:	466a      	mov	r2, sp
		if (*addrlen == sizeof(struct sockaddr_in)) {
   445f0:	2b08      	cmp	r3, #8
			nrf_addrlen = sizeof(struct nrf_sockaddr_in);
   445f2:	bf0c      	ite	eq
   445f4:	2310      	moveq	r3, #16
			nrf_addrlen = sizeof(struct nrf_sockaddr_in6);
   445f6:	2324      	movne	r3, #36	; 0x24
		nrf_addr_ptr = (struct nrf_sockaddr *)&nrf_addr;
   445f8:	ad01      	add	r5, sp, #4
			nrf_addrlen = sizeof(struct nrf_sockaddr_in6);
   445fa:	9300      	str	r3, [sp, #0]
	retval = nrf_accept(sd, nrf_addr_ptr, nrf_addrlen_ptr);
   445fc:	4629      	mov	r1, r5
   445fe:	f7f2 ff19 	bl	37434 <nrf_accept>
	if (retval < 0) {
   44602:	1e07      	subs	r7, r0, #0
   44604:	db22      	blt.n	4464c <nrf91_socket_offload_accept+0x6c>
	if ((addr != NULL) && (addrlen != NULL)) {
   44606:	b164      	cbz	r4, 44622 <nrf91_socket_offload_accept+0x42>
   44608:	b15e      	cbz	r6, 44622 <nrf91_socket_offload_accept+0x42>
		if (nrf_addr_ptr->sa_family == NRF_AF_INET) {
   4460a:	686b      	ldr	r3, [r5, #4]
   4460c:	2b02      	cmp	r3, #2
   4460e:	d110      	bne.n	44632 <nrf91_socket_offload_accept+0x52>
			*addrlen = sizeof(struct sockaddr_in);
   44610:	2308      	movs	r3, #8
   44612:	6033      	str	r3, [r6, #0]
	ptr->sin_port = nrf_in->sin_port;
   44614:	f8bd 300c 	ldrh.w	r3, [sp, #12]
   44618:	8063      	strh	r3, [r4, #2]
	ptr->sin_family = AF_INET;
   4461a:	2301      	movs	r3, #1
   4461c:	8023      	strh	r3, [r4, #0]
	ptr->sin_addr.s_addr = nrf_in->sin_addr.s_addr;
   4461e:	9b04      	ldr	r3, [sp, #16]
   44620:	6063      	str	r3, [r4, #4]
}
   44622:	4638      	mov	r0, r7
   44624:	b00b      	add	sp, #44	; 0x2c
   44626:	bdf0      	pop	{r4, r5, r6, r7, pc}
	nrf_socklen_t *nrf_addrlen_ptr = NULL;
   44628:	460a      	mov	r2, r1
	struct nrf_sockaddr *nrf_addr_ptr = NULL;
   4462a:	460d      	mov	r5, r1
   4462c:	e7e6      	b.n	445fc <nrf91_socket_offload_accept+0x1c>
   4462e:	4615      	mov	r5, r2
   44630:	e7e4      	b.n	445fc <nrf91_socket_offload_accept+0x1c>
		} else if (nrf_addr_ptr->sa_family == NRF_AF_INET6) {
   44632:	2b0a      	cmp	r3, #10
   44634:	d106      	bne.n	44644 <nrf91_socket_offload_accept+0x64>
			*addrlen = sizeof(struct sockaddr_in6);
   44636:	2318      	movs	r3, #24
			nrf_to_z_ipv6(
   44638:	a901      	add	r1, sp, #4
			*addrlen = sizeof(struct sockaddr_in6);
   4463a:	6033      	str	r3, [r6, #0]
			nrf_to_z_ipv6(
   4463c:	4620      	mov	r0, r4
   4463e:	f7ff fe1e 	bl	4427e <nrf_to_z_ipv6>
   44642:	e7ee      	b.n	44622 <nrf91_socket_offload_accept+0x42>
	errno = ENOTSUP;
   44644:	f7fe fb05 	bl	42c52 <__errno>
   44648:	2386      	movs	r3, #134	; 0x86
   4464a:	6003      	str	r3, [r0, #0]
		return -1;
   4464c:	f04f 37ff 	mov.w	r7, #4294967295
   44650:	e7e7      	b.n	44622 <nrf91_socket_offload_accept+0x42>

00044652 <nrf91_socket_offload_socket>:
{
   44652:	b510      	push	{r4, lr}
	family = z_to_nrf_family(family);
   44654:	b280      	uxth	r0, r0
   44656:	f7ff fcaa 	bl	43fae <z_to_nrf_family>
	if (family == -EAFNOSUPPORT) {
   4465a:	f110 0f6a 	cmn.w	r0, #106	; 0x6a
	family = z_to_nrf_family(family);
   4465e:	4604      	mov	r4, r0
	if (family == -EAFNOSUPPORT) {
   44660:	d106      	bne.n	44670 <nrf91_socket_offload_socket+0x1e>
		errno = EAFNOSUPPORT;
   44662:	f7fe faf6 	bl	42c52 <__errno>
   44666:	236a      	movs	r3, #106	; 0x6a
		errno = EPROTONOSUPPORT;
   44668:	6003      	str	r3, [r0, #0]
}
   4466a:	f04f 30ff 	mov.w	r0, #4294967295
   4466e:	bd10      	pop	{r4, pc}
	switch (socktype) {
   44670:	2903      	cmp	r1, #3
   44672:	d003      	beq.n	4467c <nrf91_socket_offload_socket+0x2a>
		return NRF_SOCK_MGMT;
   44674:	2904      	cmp	r1, #4
   44676:	bf08      	it	eq
   44678:	f44f 7100 	moveq.w	r1, #512	; 0x200
	proto = z_to_nrf_protocol(proto);
   4467c:	4610      	mov	r0, r2
   4467e:	f7ff fcac 	bl	43fda <z_to_nrf_protocol>
	if (proto == -EPROTONOSUPPORT) {
   44682:	f110 0f7b 	cmn.w	r0, #123	; 0x7b
	proto = z_to_nrf_protocol(proto);
   44686:	4602      	mov	r2, r0
	if (proto == -EPROTONOSUPPORT) {
   44688:	d103      	bne.n	44692 <nrf91_socket_offload_socket+0x40>
		errno = EPROTONOSUPPORT;
   4468a:	f7fe fae2 	bl	42c52 <__errno>
   4468e:	237b      	movs	r3, #123	; 0x7b
   44690:	e7ea      	b.n	44668 <nrf91_socket_offload_socket+0x16>
	retval = nrf_socket(family, type, proto);
   44692:	4620      	mov	r0, r4
}
   44694:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	retval = nrf_socket(family, type, proto);
   44698:	f7f2 be1e 	b.w	372d8 <nrf_socket>

0004469c <nrf91_socket_offload_setsockopt>:
{
   4469c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	switch (z_in_level) {
   446a0:	f5b1 7f8d 	cmp.w	r1, #282	; 0x11a
{
   446a4:	b086      	sub	sp, #24
   446a6:	4680      	mov	r8, r0
   446a8:	460c      	mov	r4, r1
   446aa:	4617      	mov	r7, r2
   446ac:	461d      	mov	r5, r3
   446ae:	9e0c      	ldr	r6, [sp, #48]	; 0x30
	switch (z_in_level) {
   446b0:	d002      	beq.n	446b8 <nrf91_socket_offload_setsockopt+0x1c>
   446b2:	dc1c      	bgt.n	446ee <nrf91_socket_offload_setsockopt+0x52>
   446b4:	2901      	cmp	r1, #1
   446b6:	d122      	bne.n	446fe <nrf91_socket_offload_setsockopt+0x62>
	if (z_to_nrf_optname(level, optname, &nrf_optname) < 0)
   446b8:	aa03      	add	r2, sp, #12
   446ba:	4639      	mov	r1, r7
   446bc:	4620      	mov	r0, r4
   446be:	f7eb fe9d 	bl	303fc <z_to_nrf_optname>
   446c2:	2800      	cmp	r0, #0
   446c4:	db1b      	blt.n	446fe <nrf91_socket_offload_setsockopt+0x62>
	if ((level == SOL_SOCKET) && (optname == SO_RCVTIMEO)) {
   446c6:	2c01      	cmp	r4, #1
   446c8:	d107      	bne.n	446da <nrf91_socket_offload_setsockopt+0x3e>
   446ca:	2f14      	cmp	r7, #20
   446cc:	d105      	bne.n	446da <nrf91_socket_offload_setsockopt+0x3e>
		nrf_optlen = sizeof(struct nrf_timeval);
   446ce:	2608      	movs	r6, #8
		nrf_rcvtimeo.tv_sec = ((struct timeval *)optval)->tv_sec;
   446d0:	682b      	ldr	r3, [r5, #0]
   446d2:	9304      	str	r3, [sp, #16]
		nrf_rcvtimeo.tv_usec = ((struct timeval *)optval)->tv_usec;
   446d4:	686b      	ldr	r3, [r5, #4]
		nrf_optval = &nrf_rcvtimeo;
   446d6:	ad04      	add	r5, sp, #16
		nrf_rcvtimeo.tv_usec = ((struct timeval *)optval)->tv_usec;
   446d8:	9305      	str	r3, [sp, #20]
	retval = nrf_setsockopt(sd, nrf_level, nrf_optname, nrf_optval,
   446da:	9600      	str	r6, [sp, #0]
   446dc:	462b      	mov	r3, r5
   446de:	9a03      	ldr	r2, [sp, #12]
   446e0:	4621      	mov	r1, r4
   446e2:	4640      	mov	r0, r8
   446e4:	f7f2 fece 	bl	37484 <nrf_setsockopt>
}
   446e8:	b006      	add	sp, #24
   446ea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	switch (z_in_level) {
   446ee:	f240 2302 	movw	r3, #514	; 0x202
   446f2:	4299      	cmp	r1, r3
   446f4:	d0e0      	beq.n	446b8 <nrf91_socket_offload_setsockopt+0x1c>
   446f6:	f240 2303 	movw	r3, #515	; 0x203
   446fa:	4299      	cmp	r1, r3
   446fc:	e7db      	b.n	446b6 <nrf91_socket_offload_setsockopt+0x1a>
	errno = ENOPROTOOPT;
   446fe:	f7fe faa8 	bl	42c52 <__errno>
   44702:	236d      	movs	r3, #109	; 0x6d
   44704:	6003      	str	r3, [r0, #0]
   44706:	f04f 30ff 	mov.w	r0, #4294967295
   4470a:	e7ed      	b.n	446e8 <nrf91_socket_offload_setsockopt+0x4c>

0004470c <nrf91_socket_offload_bind>:
{
   4470c:	b510      	push	{r4, lr}
	if (addr->sa_family == AF_INET) {
   4470e:	880a      	ldrh	r2, [r1, #0]
{
   44710:	b08a      	sub	sp, #40	; 0x28
	if (addr->sa_family == AF_INET) {
   44712:	2a01      	cmp	r2, #1
{
   44714:	4604      	mov	r4, r0
   44716:	460b      	mov	r3, r1
	if (addr->sa_family == AF_INET) {
   44718:	d10e      	bne.n	44738 <nrf91_socket_offload_bind+0x2c>
	nrf_out->sin_port = ptr->sin_port;
   4471a:	8849      	ldrh	r1, [r1, #2]
	nrf_out->sin_len = sizeof(struct nrf_sockaddr_in);
   4471c:	2210      	movs	r2, #16
	nrf_out->sin_port = ptr->sin_port;
   4471e:	f8ad 100c 	strh.w	r1, [sp, #12]
	nrf_out->sin_family = NRF_AF_INET;
   44722:	2102      	movs	r1, #2
	nrf_out->sin_addr.s_addr = ptr->sin_addr.s_addr;
   44724:	685b      	ldr	r3, [r3, #4]
	nrf_out->sin_family = NRF_AF_INET;
   44726:	9102      	str	r1, [sp, #8]
	nrf_out->sin_len = sizeof(struct nrf_sockaddr_in);
   44728:	f88d 2004 	strb.w	r2, [sp, #4]
	nrf_out->sin_addr.s_addr = ptr->sin_addr.s_addr;
   4472c:	9304      	str	r3, [sp, #16]
		retval = nrf_bind(sd, (const struct nrf_sockaddr *)&ipv4,
   4472e:	a901      	add	r1, sp, #4
		retval = nrf_bind(sd, (const struct nrf_sockaddr *)&ipv6,
   44730:	f7f2 fe96 	bl	37460 <nrf_bind>
}
   44734:	b00a      	add	sp, #40	; 0x28
   44736:	bd10      	pop	{r4, pc}
	} else if (addr->sa_family == AF_INET6) {
   44738:	2a02      	cmp	r2, #2
   4473a:	d107      	bne.n	4474c <nrf91_socket_offload_bind+0x40>
		z_to_nrf_ipv6(addr, &ipv6);
   4473c:	a901      	add	r1, sp, #4
   4473e:	4618      	mov	r0, r3
   44740:	f7ff fe92 	bl	44468 <z_to_nrf_ipv6>
		retval = nrf_bind(sd, (const struct nrf_sockaddr *)&ipv6,
   44744:	2224      	movs	r2, #36	; 0x24
   44746:	a901      	add	r1, sp, #4
   44748:	4620      	mov	r0, r4
   4474a:	e7f1      	b.n	44730 <nrf91_socket_offload_bind+0x24>
	errno = ENOTSUP;
   4474c:	f7fe fa81 	bl	42c52 <__errno>
   44750:	2386      	movs	r3, #134	; 0x86
   44752:	6003      	str	r3, [r0, #0]
   44754:	f04f 30ff 	mov.w	r0, #4294967295
   44758:	e7ec      	b.n	44734 <nrf91_socket_offload_bind+0x28>

0004475a <dk_set_leds_state>:
	if ((leds_on_mask & ~DK_ALL_LEDS_MSK) != 0 ||
   4475a:	ea40 0301 	orr.w	r3, r0, r1
   4475e:	f033 030f 	bics.w	r3, r3, #15
   44762:	d101      	bne.n	44768 <dk_set_leds_state+0xe>
   44764:	f7eb bebe 	b.w	304e4 <dk_set_leds_state.part.6>
}
   44768:	f06f 0015 	mvn.w	r0, #21
   4476c:	4770      	bx	lr

0004476e <dk_set_leds>:
	return dk_set_leds_state(leds, DK_ALL_LEDS_MSK);
   4476e:	210f      	movs	r1, #15
   44770:	f7ff bff3 	b.w	4475a <dk_set_leds_state>

00044774 <is_lfcr>:
	if ((chr == '\r') || (chr == '\n')) {
   44774:	280d      	cmp	r0, #13
   44776:	d004      	beq.n	44782 <is_lfcr+0xe>
   44778:	f1a0 030a 	sub.w	r3, r0, #10
   4477c:	4258      	negs	r0, r3
   4477e:	4158      	adcs	r0, r3
   44780:	4770      	bx	lr
		return true;
   44782:	2001      	movs	r0, #1
}
   44784:	4770      	bx	lr

00044786 <skip_command_prefix>:
{
   44786:	b510      	push	{r4, lr}
	*cmd += sizeof("AT") - 1;
   44788:	6802      	ldr	r2, [r0, #0]
{
   4478a:	4601      	mov	r1, r0
	*cmd += sizeof("AT") - 1;
   4478c:	1c93      	adds	r3, r2, #2
   4478e:	6003      	str	r3, [r0, #0]
	if (is_lfcr(**cmd) || is_terminated(**cmd)) {
   44790:	7894      	ldrb	r4, [r2, #2]
   44792:	4620      	mov	r0, r4
   44794:	f7ff ffee 	bl	44774 <is_lfcr>
   44798:	b910      	cbnz	r0, 447a0 <skip_command_prefix+0x1a>
	if (chr == AT_CMD_BUFFER_TERMINATOR) {
   4479a:	b10c      	cbz	r4, 447a0 <skip_command_prefix+0x1a>
	(*cmd)++;
   4479c:	3203      	adds	r2, #3
   4479e:	600a      	str	r2, [r1, #0]
}
   447a0:	bd10      	pop	{r4, pc}

000447a2 <at_params_list_init>:
{
   447a2:	b538      	push	{r3, r4, r5, lr}
   447a4:	460d      	mov	r5, r1
	if (list == NULL) {
   447a6:	4604      	mov	r4, r0
   447a8:	b140      	cbz	r0, 447bc <at_params_list_init+0x1a>
	list->params = k_calloc(max_params_count, sizeof(struct at_param));
   447aa:	210c      	movs	r1, #12
   447ac:	4628      	mov	r0, r5
   447ae:	f000 f97b 	bl	44aa8 <k_calloc>
   447b2:	6060      	str	r0, [r4, #4]
	if (list->params == NULL) {
   447b4:	b128      	cbz	r0, 447c2 <at_params_list_init+0x20>
	return 0;
   447b6:	2000      	movs	r0, #0
	list->param_count = max_params_count;
   447b8:	6025      	str	r5, [r4, #0]
}
   447ba:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
   447bc:	f06f 0015 	mvn.w	r0, #21
   447c0:	e7fb      	b.n	447ba <at_params_list_init+0x18>
		return -ENOMEM;
   447c2:	f06f 000b 	mvn.w	r0, #11
   447c6:	e7f8      	b.n	447ba <at_params_list_init+0x18>

000447c8 <at_params_list_free>:

void at_params_list_free(struct at_param_list *list)
{
   447c8:	b538      	push	{r3, r4, r5, lr}
	if (list == NULL || list->params == NULL) {
   447ca:	4604      	mov	r4, r0
   447cc:	b148      	cbz	r0, 447e2 <at_params_list_free+0x1a>
   447ce:	6843      	ldr	r3, [r0, #4]
   447d0:	b13b      	cbz	r3, 447e2 <at_params_list_free+0x1a>
		return;
	}

	at_params_list_clear(list);

	list->param_count = 0;
   447d2:	2500      	movs	r5, #0
	at_params_list_clear(list);
   447d4:	f7ed f8aa 	bl	3192c <at_params_list_clear>
	list->param_count = 0;
   447d8:	6025      	str	r5, [r4, #0]
	k_free(list->params);
   447da:	6860      	ldr	r0, [r4, #4]
   447dc:	f000 f95f 	bl	44a9e <k_free>
	list->params = NULL;
   447e0:	6065      	str	r5, [r4, #4]
}
   447e2:	bd38      	pop	{r3, r4, r5, pc}

000447e4 <at_params_short_put>:

int at_params_short_put(const struct at_param_list *list, size_t index,
			u16_t value)
{
   447e4:	b538      	push	{r3, r4, r5, lr}
   447e6:	4615      	mov	r5, r2
	if (list == NULL || list->params == NULL) {
   447e8:	b910      	cbnz	r0, 447f0 <at_params_short_put+0xc>
		return -EINVAL;
   447ea:	f06f 0015 	mvn.w	r0, #21
	at_param_clear(param);

	param->type = AT_PARAM_TYPE_NUM_SHORT;
	param->value.int_val = (u32_t)(value & USHRT_MAX);
	return 0;
}
   447ee:	bd38      	pop	{r3, r4, r5, pc}
	if (list == NULL || list->params == NULL) {
   447f0:	6843      	ldr	r3, [r0, #4]
   447f2:	2b00      	cmp	r3, #0
   447f4:	d0f9      	beq.n	447ea <at_params_short_put+0x6>
	struct at_param *param = at_params_get(list, index);
   447f6:	f7ed f82d 	bl	31854 <at_params_get>
	if (param == NULL) {
   447fa:	4604      	mov	r4, r0
   447fc:	2800      	cmp	r0, #0
   447fe:	d0f4      	beq.n	447ea <at_params_short_put+0x6>
	at_param_clear(param);
   44800:	f7ed f872 	bl	318e8 <at_param_clear>
	param->type = AT_PARAM_TYPE_NUM_SHORT;
   44804:	2301      	movs	r3, #1
	param->value.int_val = (u32_t)(value & USHRT_MAX);
   44806:	60a5      	str	r5, [r4, #8]
	param->type = AT_PARAM_TYPE_NUM_SHORT;
   44808:	7023      	strb	r3, [r4, #0]
	return 0;
   4480a:	2000      	movs	r0, #0
   4480c:	e7ef      	b.n	447ee <at_params_short_put+0xa>

0004480e <at_params_empty_put>:

int at_params_empty_put(const struct at_param_list *list, size_t index)
{
   4480e:	b510      	push	{r4, lr}
	if (list == NULL || list->params == NULL) {
   44810:	b910      	cbnz	r0, 44818 <at_params_empty_put+0xa>
		return -EINVAL;
   44812:	f06f 0015 	mvn.w	r0, #21

	param->type = AT_PARAM_TYPE_EMPTY;
	param->value.int_val = 0;

	return 0;
}
   44816:	bd10      	pop	{r4, pc}
	if (list == NULL || list->params == NULL) {
   44818:	6843      	ldr	r3, [r0, #4]
   4481a:	2b00      	cmp	r3, #0
   4481c:	d0f9      	beq.n	44812 <at_params_empty_put+0x4>
	struct at_param *param = at_params_get(list, index);
   4481e:	f7ed f819 	bl	31854 <at_params_get>
	if (param == NULL) {
   44822:	4604      	mov	r4, r0
   44824:	2800      	cmp	r0, #0
   44826:	d0f4      	beq.n	44812 <at_params_empty_put+0x4>
	at_param_clear(param);
   44828:	f7ed f85e 	bl	318e8 <at_param_clear>
	param->type = AT_PARAM_TYPE_EMPTY;
   4482c:	2305      	movs	r3, #5
	param->value.int_val = 0;
   4482e:	2000      	movs	r0, #0
	param->type = AT_PARAM_TYPE_EMPTY;
   44830:	7023      	strb	r3, [r4, #0]
	param->value.int_val = 0;
   44832:	60a0      	str	r0, [r4, #8]
	return 0;
   44834:	e7ef      	b.n	44816 <at_params_empty_put+0x8>

00044836 <at_params_int_put>:

int at_params_int_put(const struct at_param_list *list, size_t index,
		      u32_t value)
{
   44836:	b538      	push	{r3, r4, r5, lr}
   44838:	4615      	mov	r5, r2
	if (list == NULL || list->params == NULL) {
   4483a:	b910      	cbnz	r0, 44842 <at_params_int_put+0xc>
		return -EINVAL;
   4483c:	f06f 0015 	mvn.w	r0, #21
	at_param_clear(param);

	param->type = AT_PARAM_TYPE_NUM_INT;
	param->value.int_val = value;
	return 0;
}
   44840:	bd38      	pop	{r3, r4, r5, pc}
	if (list == NULL || list->params == NULL) {
   44842:	6843      	ldr	r3, [r0, #4]
   44844:	2b00      	cmp	r3, #0
   44846:	d0f9      	beq.n	4483c <at_params_int_put+0x6>
	struct at_param *param = at_params_get(list, index);
   44848:	f7ed f804 	bl	31854 <at_params_get>
	if (param == NULL) {
   4484c:	4604      	mov	r4, r0
   4484e:	2800      	cmp	r0, #0
   44850:	d0f4      	beq.n	4483c <at_params_int_put+0x6>
	at_param_clear(param);
   44852:	f7ed f849 	bl	318e8 <at_param_clear>
	param->type = AT_PARAM_TYPE_NUM_INT;
   44856:	2302      	movs	r3, #2
	param->value.int_val = value;
   44858:	60a5      	str	r5, [r4, #8]
	param->type = AT_PARAM_TYPE_NUM_INT;
   4485a:	7023      	strb	r3, [r4, #0]
	return 0;
   4485c:	2000      	movs	r0, #0
   4485e:	e7ef      	b.n	44840 <at_params_int_put+0xa>

00044860 <at_params_string_put>:

int at_params_string_put(const struct at_param_list *list, size_t index,
			 const char *str, size_t str_len)
{
   44860:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   44862:	4616      	mov	r6, r2
   44864:	461d      	mov	r5, r3
	if (list == NULL || list->params == NULL || str == NULL) {
   44866:	b910      	cbnz	r0, 4486e <at_params_string_put+0xe>
		return -EINVAL;
   44868:	f06f 0015 	mvn.w	r0, #21
	param->size = str_len;
	param->type = AT_PARAM_TYPE_STRING;
	param->value.str_val = param_value;

	return 0;
}
   4486c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (list == NULL || list->params == NULL || str == NULL) {
   4486e:	6843      	ldr	r3, [r0, #4]
   44870:	2b00      	cmp	r3, #0
   44872:	d0f9      	beq.n	44868 <at_params_string_put+0x8>
   44874:	2a00      	cmp	r2, #0
   44876:	d0f7      	beq.n	44868 <at_params_string_put+0x8>
	struct at_param *param = at_params_get(list, index);
   44878:	f7ec ffec 	bl	31854 <at_params_get>
	if (param == NULL) {
   4487c:	4604      	mov	r4, r0
   4487e:	2800      	cmp	r0, #0
   44880:	d0f2      	beq.n	44868 <at_params_string_put+0x8>
	char *param_value = (char *)k_malloc(str_len + 1);
   44882:	1c68      	adds	r0, r5, #1
   44884:	f7f6 ff96 	bl	3b7b4 <k_malloc>
	if (param_value == NULL) {
   44888:	4607      	mov	r7, r0
   4488a:	b160      	cbz	r0, 448a6 <at_params_string_put+0x46>
   4488c:	462a      	mov	r2, r5
   4488e:	4631      	mov	r1, r6
   44890:	f000 fade 	bl	44e50 <memcpy>
	at_param_clear(param);
   44894:	4620      	mov	r0, r4
   44896:	f7ed f827 	bl	318e8 <at_param_clear>
	param->type = AT_PARAM_TYPE_STRING;
   4489a:	2303      	movs	r3, #3
	param->size = str_len;
   4489c:	6065      	str	r5, [r4, #4]
	param->type = AT_PARAM_TYPE_STRING;
   4489e:	7023      	strb	r3, [r4, #0]
	param->value.str_val = param_value;
   448a0:	60a7      	str	r7, [r4, #8]
	return 0;
   448a2:	2000      	movs	r0, #0
   448a4:	e7e2      	b.n	4486c <at_params_string_put+0xc>
		return -ENOMEM;
   448a6:	f06f 000b 	mvn.w	r0, #11
   448aa:	e7df      	b.n	4486c <at_params_string_put+0xc>

000448ac <at_params_array_put>:

int at_params_array_put(const struct at_param_list *list, size_t index,
			const u32_t *array, size_t array_len)
{
   448ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   448ae:	4616      	mov	r6, r2
   448b0:	461d      	mov	r5, r3
	if (list == NULL || list->params == NULL || array == NULL) {
   448b2:	b910      	cbnz	r0, 448ba <at_params_array_put+0xe>
		return -EINVAL;
   448b4:	f06f 0015 	mvn.w	r0, #21
	param->size = array_len;
	param->type = AT_PARAM_TYPE_ARRAY;
	param->value.array_val = param_value;

	return 0;
}
   448b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (list == NULL || list->params == NULL || array == NULL) {
   448ba:	6843      	ldr	r3, [r0, #4]
   448bc:	2b00      	cmp	r3, #0
   448be:	d0f9      	beq.n	448b4 <at_params_array_put+0x8>
   448c0:	2a00      	cmp	r2, #0
   448c2:	d0f7      	beq.n	448b4 <at_params_array_put+0x8>
	struct at_param *param = at_params_get(list, index);
   448c4:	f7ec ffc6 	bl	31854 <at_params_get>
	if (param == NULL) {
   448c8:	4604      	mov	r4, r0
   448ca:	2800      	cmp	r0, #0
   448cc:	d0f2      	beq.n	448b4 <at_params_array_put+0x8>
	u32_t *param_value = (u32_t *)k_malloc(array_len);
   448ce:	4628      	mov	r0, r5
   448d0:	f7f6 ff70 	bl	3b7b4 <k_malloc>
	if (param_value == NULL) {
   448d4:	4607      	mov	r7, r0
   448d6:	b160      	cbz	r0, 448f2 <at_params_array_put+0x46>
   448d8:	462a      	mov	r2, r5
   448da:	4631      	mov	r1, r6
   448dc:	f000 fab8 	bl	44e50 <memcpy>
	at_param_clear(param);
   448e0:	4620      	mov	r0, r4
   448e2:	f7ed f801 	bl	318e8 <at_param_clear>
	param->type = AT_PARAM_TYPE_ARRAY;
   448e6:	2304      	movs	r3, #4
	param->size = array_len;
   448e8:	6065      	str	r5, [r4, #4]
	param->type = AT_PARAM_TYPE_ARRAY;
   448ea:	7023      	strb	r3, [r4, #0]
	param->value.array_val = param_value;
   448ec:	60a7      	str	r7, [r4, #8]
	return 0;
   448ee:	2000      	movs	r0, #0
   448f0:	e7e2      	b.n	448b8 <at_params_array_put+0xc>
		return -ENOMEM;
   448f2:	f06f 000b 	mvn.w	r0, #11
   448f6:	e7df      	b.n	448b8 <at_params_array_put+0xc>

000448f8 <at_params_short_get>:
	return 0;
}

int at_params_short_get(const struct at_param_list *list, size_t index,
			u16_t *value)
{
   448f8:	b510      	push	{r4, lr}
   448fa:	4614      	mov	r4, r2
	if (list == NULL || list->params == NULL || value == NULL) {
   448fc:	b910      	cbnz	r0, 44904 <at_params_short_get+0xc>
		return -EINVAL;
   448fe:	f06f 0015 	mvn.w	r0, #21
		return -EINVAL;
	}

	*value = (u16_t)param->value.int_val;
	return 0;
}
   44902:	bd10      	pop	{r4, pc}
	if (list == NULL || list->params == NULL || value == NULL) {
   44904:	6843      	ldr	r3, [r0, #4]
   44906:	2b00      	cmp	r3, #0
   44908:	d0f9      	beq.n	448fe <at_params_short_get+0x6>
   4490a:	2a00      	cmp	r2, #0
   4490c:	d0f7      	beq.n	448fe <at_params_short_get+0x6>
	struct at_param *param = at_params_get(list, index);
   4490e:	f7ec ffa1 	bl	31854 <at_params_get>
	if (param == NULL) {
   44912:	2800      	cmp	r0, #0
   44914:	d0f3      	beq.n	448fe <at_params_short_get+0x6>
	if (param->type != AT_PARAM_TYPE_NUM_SHORT) {
   44916:	7803      	ldrb	r3, [r0, #0]
   44918:	2b01      	cmp	r3, #1
   4491a:	d1f0      	bne.n	448fe <at_params_short_get+0x6>
	*value = (u16_t)param->value.int_val;
   4491c:	6883      	ldr	r3, [r0, #8]
	return 0;
   4491e:	2000      	movs	r0, #0
	*value = (u16_t)param->value.int_val;
   44920:	8023      	strh	r3, [r4, #0]
	return 0;
   44922:	e7ee      	b.n	44902 <at_params_short_get+0xa>

00044924 <at_params_int_get>:

int at_params_int_get(const struct at_param_list *list, size_t index,
		      u32_t *value)
{
   44924:	b510      	push	{r4, lr}
   44926:	4614      	mov	r4, r2
	if (list == NULL || list->params == NULL || value == NULL) {
   44928:	b910      	cbnz	r0, 44930 <at_params_int_get+0xc>
		return -EINVAL;
   4492a:	f06f 0015 	mvn.w	r0, #21
		return -EINVAL;
	}

	*value = param->value.int_val;
	return 0;
}
   4492e:	bd10      	pop	{r4, pc}
	if (list == NULL || list->params == NULL || value == NULL) {
   44930:	6843      	ldr	r3, [r0, #4]
   44932:	2b00      	cmp	r3, #0
   44934:	d0f9      	beq.n	4492a <at_params_int_get+0x6>
   44936:	2a00      	cmp	r2, #0
   44938:	d0f7      	beq.n	4492a <at_params_int_get+0x6>
	struct at_param *param = at_params_get(list, index);
   4493a:	f7ec ff8b 	bl	31854 <at_params_get>
	if (param == NULL) {
   4493e:	2800      	cmp	r0, #0
   44940:	d0f3      	beq.n	4492a <at_params_int_get+0x6>
	if ((param->type != AT_PARAM_TYPE_NUM_INT) &&
   44942:	7803      	ldrb	r3, [r0, #0]
   44944:	3b01      	subs	r3, #1
   44946:	2b01      	cmp	r3, #1
   44948:	d8ef      	bhi.n	4492a <at_params_int_get+0x6>
	*value = param->value.int_val;
   4494a:	6883      	ldr	r3, [r0, #8]
	return 0;
   4494c:	2000      	movs	r0, #0
	*value = param->value.int_val;
   4494e:	6023      	str	r3, [r4, #0]
	return 0;
   44950:	e7ed      	b.n	4492e <at_params_int_get+0xa>

00044952 <at_params_string_get>:

int at_params_string_get(const struct at_param_list *list, size_t index,
			 char *value, size_t *len)
{
   44952:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   44954:	4616      	mov	r6, r2
   44956:	461c      	mov	r4, r3
	if (list == NULL || list->params == NULL || value == NULL ||
   44958:	b910      	cbnz	r0, 44960 <at_params_string_get+0xe>
	    value == NULL || len == NULL) {
		return -EINVAL;
   4495a:	f06f 0015 	mvn.w	r0, #21

	memcpy(value, param->value.str_val, param_len);
	*len = param_len;

	return 0;
}
   4495e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (list == NULL || list->params == NULL || value == NULL ||
   44960:	6843      	ldr	r3, [r0, #4]
   44962:	2b00      	cmp	r3, #0
   44964:	d0f9      	beq.n	4495a <at_params_string_get+0x8>
   44966:	2a00      	cmp	r2, #0
   44968:	d0f7      	beq.n	4495a <at_params_string_get+0x8>
	    value == NULL || len == NULL) {
   4496a:	2c00      	cmp	r4, #0
   4496c:	d0f5      	beq.n	4495a <at_params_string_get+0x8>
	struct at_param *param = at_params_get(list, index);
   4496e:	f7ec ff71 	bl	31854 <at_params_get>
	if (param == NULL) {
   44972:	4607      	mov	r7, r0
   44974:	2800      	cmp	r0, #0
   44976:	d0f0      	beq.n	4495a <at_params_string_get+0x8>
	if (param->type != AT_PARAM_TYPE_STRING) {
   44978:	7803      	ldrb	r3, [r0, #0]
   4497a:	2b03      	cmp	r3, #3
   4497c:	d1ed      	bne.n	4495a <at_params_string_get+0x8>
	size_t param_len = at_param_size(param);
   4497e:	f7ec ff8b 	bl	31898 <at_param_size>
	if (*len < param_len) {
   44982:	6823      	ldr	r3, [r4, #0]
	size_t param_len = at_param_size(param);
   44984:	4605      	mov	r5, r0
	if (*len < param_len) {
   44986:	4283      	cmp	r3, r0
   44988:	d307      	bcc.n	4499a <at_params_string_get+0x48>
   4498a:	4602      	mov	r2, r0
   4498c:	68b9      	ldr	r1, [r7, #8]
   4498e:	4630      	mov	r0, r6
   44990:	f000 fa5e 	bl	44e50 <memcpy>
	*len = param_len;
   44994:	6025      	str	r5, [r4, #0]
	return 0;
   44996:	2000      	movs	r0, #0
   44998:	e7e1      	b.n	4495e <at_params_string_get+0xc>
		return -ENOMEM;
   4499a:	f06f 000b 	mvn.w	r0, #11
   4499e:	e7de      	b.n	4495e <at_params_string_get+0xc>

000449a0 <at_params_valid_count_get>:

	return 0;
}

u32_t at_params_valid_count_get(const struct at_param_list *list)
{
   449a0:	b538      	push	{r3, r4, r5, lr}
	if (list == NULL || list->params == NULL) {
   449a2:	4605      	mov	r5, r0
   449a4:	b180      	cbz	r0, 449c8 <at_params_valid_count_get+0x28>
   449a6:	6843      	ldr	r3, [r0, #4]
   449a8:	b173      	cbz	r3, 449c8 <at_params_valid_count_get+0x28>
		return -EINVAL;
	}

	size_t valid_i = 0;
	struct at_param *param = at_params_get(list, valid_i);
   449aa:	2100      	movs	r1, #0
   449ac:	f7ec ff52 	bl	31854 <at_params_get>
	size_t valid_i = 0;
   449b0:	2400      	movs	r4, #0

	while (param != NULL && param->type != AT_PARAM_TYPE_INVALID) {
   449b2:	b108      	cbz	r0, 449b8 <at_params_valid_count_get+0x18>
   449b4:	7803      	ldrb	r3, [r0, #0]
   449b6:	b90b      	cbnz	r3, 449bc <at_params_valid_count_get+0x1c>
		valid_i += 1;
		param = at_params_get(list, valid_i);
	}

	return valid_i;
}
   449b8:	4620      	mov	r0, r4
   449ba:	bd38      	pop	{r3, r4, r5, pc}
		valid_i += 1;
   449bc:	3401      	adds	r4, #1
		param = at_params_get(list, valid_i);
   449be:	4621      	mov	r1, r4
   449c0:	4628      	mov	r0, r5
   449c2:	f7ec ff47 	bl	31854 <at_params_get>
   449c6:	e7f4      	b.n	449b2 <at_params_valid_count_get+0x12>
		return -EINVAL;
   449c8:	f06f 0415 	mvn.w	r4, #21
   449cc:	e7f4      	b.n	449b8 <at_params_valid_count_get+0x18>

000449ce <response_is_valid>:
{
   449ce:	b570      	push	{r4, r5, r6, lr}
   449d0:	4606      	mov	r6, r0
	if ((response_len < strlen(check)) ||
   449d2:	4610      	mov	r0, r2
{
   449d4:	460d      	mov	r5, r1
   449d6:	4614      	mov	r4, r2
	if ((response_len < strlen(check)) ||
   449d8:	f7d8 fb9e 	bl	1d118 <strlen>
   449dc:	42a8      	cmp	r0, r5
   449de:	d808      	bhi.n	449f2 <response_is_valid+0x24>
	    (memcmp(response, check, response_len) != 0)) {
   449e0:	462a      	mov	r2, r5
   449e2:	4621      	mov	r1, r4
   449e4:	4630      	mov	r0, r6
   449e6:	f000 fa25 	bl	44e34 <memcmp>
	if ((response_len < strlen(check)) ||
   449ea:	fab0 f080 	clz	r0, r0
   449ee:	0940      	lsrs	r0, r0, #5
}
   449f0:	bd70      	pop	{r4, r5, r6, pc}
		return false;
   449f2:	2000      	movs	r0, #0
   449f4:	e7fc      	b.n	449f0 <response_is_valid+0x22>

000449f6 <lte_lc_init>:
	return w_lte_lc_init();
   449f6:	f7ec bfd1 	b.w	3199c <w_lte_lc_init>

000449fa <lte_lc_connect>:
	return w_lte_lc_connect();
   449fa:	f7ed b8e7 	b.w	31bcc <w_lte_lc_connect>

000449fe <sensor_sim_attr_set>:
}
   449fe:	2000      	movs	r0, #0
   44a00:	4770      	bx	lr

00044a02 <sensor_sim_thread>:
{
   44a02:	b570      	push	{r4, r5, r6, lr}
   44a04:	4604      	mov	r4, r0
	struct sensor_sim_data *drv_data = dev->driver_data;
   44a06:	6885      	ldr	r5, [r0, #8]
			drv_data->drdy_handler(dev, &drv_data->drdy_trigger);
   44a08:	f105 0634 	add.w	r6, r5, #52	; 0x34
	return z_impl_k_sleep(ms);
   44a0c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   44a10:	f7f8 fcf6 	bl	3d400 <z_impl_k_sleep>
		if (drv_data->drdy_handler != NULL) {
   44a14:	6b2b      	ldr	r3, [r5, #48]	; 0x30
   44a16:	2b00      	cmp	r3, #0
   44a18:	d0f8      	beq.n	44a0c <sensor_sim_thread+0xa>
			drv_data->drdy_handler(dev, &drv_data->drdy_trigger);
   44a1a:	4631      	mov	r1, r6
   44a1c:	4620      	mov	r0, r4
   44a1e:	4798      	blx	r3
   44a20:	e7f4      	b.n	44a0c <sensor_sim_thread+0xa>

00044a22 <notify_event>:
	if (drv_data->handler) {
   44a22:	6883      	ldr	r3, [r0, #8]
   44a24:	689b      	ldr	r3, [r3, #8]
   44a26:	b103      	cbz	r3, 44a2a <notify_event+0x8>
		drv_data->handler(dev, evt);
   44a28:	4718      	bx	r3
}
   44a2a:	4770      	bx	lr

00044a2c <nrfx_nvmc_flash_size_get>:
}

uint32_t nrfx_nvmc_flash_size_get(void)
{
    return flash_total_size_get();
}
   44a2c:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   44a30:	4770      	bx	lr

00044a32 <nrfx_nvmc_flash_page_size_get>:

uint32_t nrfx_nvmc_flash_page_size_get(void)
{
    return flash_page_size_get();
}
   44a32:	f44f 5080 	mov.w	r0, #4096	; 0x1000
   44a36:	4770      	bx	lr

00044a38 <nrfx_nvmc_flash_page_count_get>:

uint32_t nrfx_nvmc_flash_page_count_get(void)
{
    return flash_page_count_get();
}
   44a38:	f44f 7080 	mov.w	r0, #256	; 0x100
   44a3c:	4770      	bx	lr

00044a3e <z_sys_power_save_idle_exit>:
	z_clock_idle_exit();
   44a3e:	f7fe b8a8 	b.w	42b92 <z_clock_idle_exit>

00044a42 <k_mem_slab_init>:
{
   44a42:	b530      	push	{r4, r5, lr}
	slab->num_used = 0U;
   44a44:	2400      	movs	r4, #0
   44a46:	6184      	str	r4, [r0, #24]
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
   44a48:	ea41 0402 	orr.w	r4, r1, r2
   44a4c:	f014 0403 	ands.w	r4, r4, #3
	slab->block_size = block_size;
   44a50:	e9c0 3202 	strd	r3, r2, [r0, #8]
	slab->buffer = buffer;
   44a54:	6101      	str	r1, [r0, #16]
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
   44a56:	d10c      	bne.n	44a72 <k_mem_slab_init+0x30>
	slab->free_list = NULL;
   44a58:	6144      	str	r4, [r0, #20]
	for (j = 0U; j < slab->num_blocks; j++) {
   44a5a:	42a3      	cmp	r3, r4
   44a5c:	d103      	bne.n	44a66 <k_mem_slab_init+0x24>
   44a5e:	e9c0 0000 	strd	r0, r0, [r0]
   44a62:	2000      	movs	r0, #0
}
   44a64:	bd30      	pop	{r4, r5, pc}
		*(char **)p = slab->free_list;
   44a66:	6945      	ldr	r5, [r0, #20]
	for (j = 0U; j < slab->num_blocks; j++) {
   44a68:	3401      	adds	r4, #1
		*(char **)p = slab->free_list;
   44a6a:	600d      	str	r5, [r1, #0]
		slab->free_list = p;
   44a6c:	6141      	str	r1, [r0, #20]
		p += slab->block_size;
   44a6e:	4411      	add	r1, r2
   44a70:	e7f3      	b.n	44a5a <k_mem_slab_init+0x18>
		return -EINVAL;
   44a72:	f06f 0015 	mvn.w	r0, #21
	return rc;
   44a76:	e7f5      	b.n	44a64 <k_mem_slab_init+0x22>

00044a78 <k_mem_pool_malloc>:
{
   44a78:	b507      	push	{r0, r1, r2, lr}
   44a7a:	2204      	movs	r2, #4
   44a7c:	188a      	adds	r2, r1, r2
   44a7e:	d204      	bcs.n	44a8a <k_mem_pool_malloc+0x12>
	if (k_mem_pool_alloc(pool, &block, size, K_NO_WAIT) != 0) {
   44a80:	2300      	movs	r3, #0
   44a82:	4669      	mov	r1, sp
   44a84:	f7f6 fdd0 	bl	3b628 <k_mem_pool_alloc>
   44a88:	b118      	cbz	r0, 44a92 <k_mem_pool_malloc+0x1a>
		return NULL;
   44a8a:	2000      	movs	r0, #0
}
   44a8c:	b003      	add	sp, #12
   44a8e:	f85d fb04 	ldr.w	pc, [sp], #4
   44a92:	e9dd 3200 	ldrd	r3, r2, [sp]
   44a96:	601a      	str	r2, [r3, #0]
	return (char *)block.data + WB_UP(sizeof(struct k_mem_block_id));
   44a98:	9800      	ldr	r0, [sp, #0]
   44a9a:	3004      	adds	r0, #4
   44a9c:	e7f6      	b.n	44a8c <k_mem_pool_malloc+0x14>

00044a9e <k_free>:
	if (ptr != NULL) {
   44a9e:	b110      	cbz	r0, 44aa6 <k_free+0x8>
		k_mem_pool_free_id(ptr);
   44aa0:	3804      	subs	r0, #4
   44aa2:	f7f6 be29 	b.w	3b6f8 <k_mem_pool_free_id>
}
   44aa6:	4770      	bx	lr

00044aa8 <k_calloc>:
{
   44aa8:	b538      	push	{r3, r4, r5, lr}
	return a != 0 && (c / a) != b;
}

static inline bool size_mul_overflow(size_t a, size_t b, size_t *result)
{
	size_t c = a * b;
   44aaa:	fb01 f400 	mul.w	r4, r1, r0

	*result = c;

	return a != 0 && (c / a) != b;
   44aae:	b118      	cbz	r0, 44ab8 <k_calloc+0x10>
   44ab0:	fbb4 f0f0 	udiv	r0, r4, r0
   44ab4:	4281      	cmp	r1, r0
   44ab6:	d10a      	bne.n	44ace <k_calloc+0x26>
	ret = k_malloc(bounds);
   44ab8:	4620      	mov	r0, r4
   44aba:	f7f6 fe7b 	bl	3b7b4 <k_malloc>
	if (ret != NULL) {
   44abe:	4605      	mov	r5, r0
   44ac0:	b118      	cbz	r0, 44aca <k_calloc+0x22>
__ssp_bos_icheck3(memset, void *, int)
   44ac2:	4622      	mov	r2, r4
   44ac4:	2100      	movs	r1, #0
   44ac6:	f000 f9fd 	bl	44ec4 <memset>
}
   44aca:	4628      	mov	r0, r5
   44acc:	bd38      	pop	{r3, r4, r5, pc}
		return NULL;
   44ace:	2500      	movs	r5, #0
   44ad0:	e7fb      	b.n	44aca <k_calloc+0x22>

00044ad2 <z_impl_k_mutex_init>:
{
   44ad2:	4603      	mov	r3, r0
	mutex->owner = NULL;
   44ad4:	2000      	movs	r0, #0
   44ad6:	e9c3 3300 	strd	r3, r3, [r3]
	mutex->lock_count = 0U;
   44ada:	e9c3 0002 	strd	r0, r0, [r3, #8]
}
   44ade:	4770      	bx	lr

00044ae0 <z_queue_node_peek>:
{
   44ae0:	b510      	push	{r4, lr}
	if ((node != NULL) && (sys_sfnode_flags_get(node) != (u8_t)0)) {
   44ae2:	4604      	mov	r4, r0
   44ae4:	b130      	cbz	r0, 44af4 <z_queue_node_peek+0x14>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   44ae6:	6802      	ldr	r2, [r0, #0]
   44ae8:	0793      	lsls	r3, r2, #30
   44aea:	d003      	beq.n	44af4 <z_queue_node_peek+0x14>
		ret = anode->data;
   44aec:	6844      	ldr	r4, [r0, #4]
		if (needs_free) {
   44aee:	b109      	cbz	r1, 44af4 <z_queue_node_peek+0x14>
			k_free(anode);
   44af0:	f7ff ffd5 	bl	44a9e <k_free>
}
   44af4:	4620      	mov	r0, r4
   44af6:	bd10      	pop	{r4, pc}

00044af8 <z_impl_k_queue_init>:
	list->head = NULL;
   44af8:	2300      	movs	r3, #0
	list->tail = NULL;
   44afa:	e9c0 3300 	strd	r3, r3, [r0]
	queue->lock = (struct k_spinlock) {};
   44afe:	6083      	str	r3, [r0, #8]
	sys_dlist_init(&queue->poll_events);
   44b00:	f100 030c 	add.w	r3, r0, #12
   44b04:	e9c0 3303 	strd	r3, r3, [r0, #12]
}
   44b08:	4770      	bx	lr

00044b0a <k_queue_append>:
	(void)queue_insert(queue, sys_sflist_peek_tail(&queue->data_q),
   44b0a:	460a      	mov	r2, r1
   44b0c:	2300      	movs	r3, #0
   44b0e:	6841      	ldr	r1, [r0, #4]
   44b10:	f7f7 b9a6 	b.w	3be60 <queue_insert>

00044b14 <z_is_thread_ready>:
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
   44b14:	7b43      	ldrb	r3, [r0, #13]
   44b16:	06db      	lsls	r3, r3, #27
   44b18:	bf03      	ittte	eq
   44b1a:	6980      	ldreq	r0, [r0, #24]
   44b1c:	fab0 f080 	clzeq	r0, r0
   44b20:	0940      	lsreq	r0, r0, #5
   44b22:	2000      	movne	r0, #0
}
   44b24:	4770      	bx	lr

00044b26 <z_is_t1_higher_prio_than_t2>:
	if (thread_1->base.prio < thread_2->base.prio) {
   44b26:	f990 000e 	ldrsb.w	r0, [r0, #14]
   44b2a:	f991 300e 	ldrsb.w	r3, [r1, #14]
}
   44b2e:	4298      	cmp	r0, r3
   44b30:	bfac      	ite	ge
   44b32:	2000      	movge	r0, #0
   44b34:	2001      	movlt	r0, #1
   44b36:	4770      	bx	lr

00044b38 <z_reschedule_irqlock>:
	return arch_irq_unlocked(key) && !arch_is_in_isr();
   44b38:	4603      	mov	r3, r0
   44b3a:	b920      	cbnz	r0, 44b46 <z_reschedule_irqlock+0xe>
   44b3c:	f3ef 8205 	mrs	r2, IPSR
   44b40:	b90a      	cbnz	r2, 44b46 <z_reschedule_irqlock+0xe>
   44b42:	f7e1 bd21 	b.w	26588 <arch_swap>
   44b46:	f383 8811 	msr	BASEPRI, r3
   44b4a:	f3bf 8f6f 	isb	sy
}
   44b4e:	4770      	bx	lr

00044b50 <z_reschedule_unlocked>:
	__asm__ volatile(
   44b50:	f04f 0320 	mov.w	r3, #32
   44b54:	f3ef 8011 	mrs	r0, BASEPRI
   44b58:	f383 8811 	msr	BASEPRI, r3
   44b5c:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
   44b60:	f7ff bfea 	b.w	44b38 <z_reschedule_irqlock>

00044b64 <z_priq_dumb_best>:
	return list->head == list;
   44b64:	6803      	ldr	r3, [r0, #0]
}
   44b66:	4298      	cmp	r0, r3
   44b68:	bf14      	ite	ne
   44b6a:	4618      	movne	r0, r3
   44b6c:	2000      	moveq	r0, #0
   44b6e:	4770      	bx	lr

00044b70 <z_unpend_all>:
{
   44b70:	b570      	push	{r4, r5, r6, lr}
   44b72:	4606      	mov	r6, r0
	int need_sched = 0;
   44b74:	2500      	movs	r5, #0
   44b76:	6834      	ldr	r4, [r6, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   44b78:	42a6      	cmp	r6, r4
   44b7a:	d000      	beq.n	44b7e <z_unpend_all+0xe>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
   44b7c:	b90c      	cbnz	r4, 44b82 <z_unpend_all+0x12>
}
   44b7e:	4628      	mov	r0, r5
   44b80:	bd70      	pop	{r4, r5, r6, pc}
		z_unpend_thread(thread);
   44b82:	4620      	mov	r0, r4
   44b84:	f7f7 fce0 	bl	3c548 <z_unpend_thread>
	if (z_is_thread_ready(thread)) {
   44b88:	4620      	mov	r0, r4
   44b8a:	f7ff ffc3 	bl	44b14 <z_is_thread_ready>
		need_sched = 1;
   44b8e:	2501      	movs	r5, #1
   44b90:	2800      	cmp	r0, #0
   44b92:	d0f0      	beq.n	44b76 <z_unpend_all+0x6>
		z_add_thread_to_ready_q(thread);
   44b94:	4620      	mov	r0, r4
   44b96:	f7f7 fddf 	bl	3c758 <z_add_thread_to_ready_q>
   44b9a:	e7ec      	b.n	44b76 <z_unpend_all+0x6>

00044b9c <z_impl_k_sem_init>:
	CHECKIF(limit == 0U || initial_count > limit) {
   44b9c:	b15a      	cbz	r2, 44bb6 <z_impl_k_sem_init+0x1a>
   44b9e:	428a      	cmp	r2, r1
   44ba0:	d309      	bcc.n	44bb6 <z_impl_k_sem_init+0x1a>
	sys_dlist_init(&sem->poll_events);
   44ba2:	f100 0310 	add.w	r3, r0, #16
	sem->limit = limit;
   44ba6:	e9c0 1202 	strd	r1, r2, [r0, #8]
	list->tail = (sys_dnode_t *)list;
   44baa:	e9c0 0000 	strd	r0, r0, [r0]
   44bae:	e9c0 3304 	strd	r3, r3, [r0, #16]
	return 0;
   44bb2:	2000      	movs	r0, #0
   44bb4:	4770      	bx	lr
		return -EINVAL;
   44bb6:	f06f 0015 	mvn.w	r0, #21
}
   44bba:	4770      	bx	lr

00044bbc <k_is_in_isr>:
   44bbc:	f3ef 8005 	mrs	r0, IPSR
}
   44bc0:	3000      	adds	r0, #0
   44bc2:	bf18      	it	ne
   44bc4:	2001      	movne	r0, #1
   44bc6:	4770      	bx	lr

00044bc8 <z_impl_k_busy_wait>:
	arch_busy_wait(usec_to_wait);
   44bc8:	f7dc be2c 	b.w	21824 <arch_busy_wait>

00044bcc <z_impl_k_thread_name_set>:
}
   44bcc:	f06f 0057 	mvn.w	r0, #87	; 0x57
   44bd0:	4770      	bx	lr

00044bd2 <k_thread_name_get>:
}
   44bd2:	2000      	movs	r0, #0
   44bd4:	4770      	bx	lr

00044bd6 <z_new_thread_init>:
{
   44bd6:	b510      	push	{r4, lr}
	thread_base->user_options = (u8_t)options;
   44bd8:	9c02      	ldr	r4, [sp, #8]
	thread_base->prio = priority;
   44bda:	7383      	strb	r3, [r0, #14]
	thread_base->user_options = (u8_t)options;
   44bdc:	7304      	strb	r4, [r0, #12]
	thread_base->sched_locked = 0U;
   44bde:	2300      	movs	r3, #0
	thread_base->thread_state = (u8_t)initial_state;
   44be0:	2404      	movs	r4, #4
	thread_base->sched_locked = 0U;
   44be2:	73c3      	strb	r3, [r0, #15]
	thread_base->thread_state = (u8_t)initial_state;
   44be4:	7344      	strb	r4, [r0, #13]
	node->prev = NULL;
   44be6:	e9c0 3306 	strd	r3, r3, [r0, #24]
	thread->fn_abort = NULL;
   44bea:	e9c0 3313 	strd	r3, r3, [r0, #76]	; 0x4c
	thread->stack_info.size = (u32_t)stackSize;
   44bee:	e9c0 1216 	strd	r1, r2, [r0, #88]	; 0x58
}
   44bf2:	bd10      	pop	{r4, pc}

00044bf4 <k_work_submit_to_queue>:
{
   44bf4:	b500      	push	{lr}
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   44bf6:	f101 0308 	add.w	r3, r1, #8
   44bfa:	e8d3 2fef 	ldaex	r2, [r3]
   44bfe:	f042 0c01 	orr.w	ip, r2, #1
   44c02:	e8c3 cfee 	stlex	lr, ip, [r3]
   44c06:	f1be 0f00 	cmp.w	lr, #0
   44c0a:	d1f6      	bne.n	44bfa <k_work_submit_to_queue+0x6>
	if (!atomic_test_and_set_bit(work->flags, K_WORK_STATE_PENDING)) {
   44c0c:	07d3      	lsls	r3, r2, #31
   44c0e:	d403      	bmi.n	44c18 <k_work_submit_to_queue+0x24>
}
   44c10:	f85d eb04 	ldr.w	lr, [sp], #4
		k_queue_append(&work_q->queue, work);
   44c14:	f7ff bf79 	b.w	44b0a <k_queue_append>
}
   44c18:	f85d fb04 	ldr.w	pc, [sp], #4

00044c1c <work_timeout>:
	k_work_submit_to_queue(w->work_q, &w->work);
   44c1c:	f1a0 010c 	sub.w	r1, r0, #12
   44c20:	6900      	ldr	r0, [r0, #16]
   44c22:	f7ff bfe7 	b.w	44bf4 <k_work_submit_to_queue>

00044c26 <work_cancel>:
	CHECKIF(work->work_q == NULL) {
   44c26:	69c3      	ldr	r3, [r0, #28]
{
   44c28:	b570      	push	{r4, r5, r6, lr}
   44c2a:	4604      	mov	r4, r0
	CHECKIF(work->work_q == NULL) {
   44c2c:	2b00      	cmp	r3, #0
   44c2e:	d039      	beq.n	44ca4 <work_cancel+0x7e>
	return atomic_test_bit(work->flags, K_WORK_STATE_PENDING);
   44c30:	f100 0508 	add.w	r5, r0, #8
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   44c34:	e8d5 3faf 	lda	r3, [r5]
	if (k_work_pending(&work->work)) {
   44c38:	07db      	lsls	r3, r3, #31
   44c3a:	d52f      	bpl.n	44c9c <work_cancel+0x76>
 * @return true if node was removed
 */
static inline bool sys_sflist_find_and_remove(sys_sflist_t *list,
					      sys_sfnode_t *node);

Z_GENLIST_FIND_AND_REMOVE(sflist, sfnode)
   44c3c:	2100      	movs	r1, #0
		if (!k_queue_remove(&work->work_q->queue, &work->work)) {
   44c3e:	69c2      	ldr	r2, [r0, #28]
   44c40:	6813      	ldr	r3, [r2, #0]
   44c42:	b913      	cbnz	r3, 44c4a <work_cancel+0x24>
			return -EINVAL;
   44c44:	f06f 0015 	mvn.w	r0, #21
}
   44c48:	bd70      	pop	{r4, r5, r6, pc}
   44c4a:	429c      	cmp	r4, r3
   44c4c:	d121      	bne.n	44c92 <work_cancel+0x6c>
Z_GENLIST_REMOVE(sflist, sfnode)
   44c4e:	6823      	ldr	r3, [r4, #0]
   44c50:	6856      	ldr	r6, [r2, #4]
   44c52:	f023 0003 	bic.w	r0, r3, #3
   44c56:	b991      	cbnz	r1, 44c7e <work_cancel+0x58>
   44c58:	42b4      	cmp	r4, r6
	list->head = node;
   44c5a:	6010      	str	r0, [r2, #0]
Z_GENLIST_REMOVE(sflist, sfnode)
   44c5c:	d100      	bne.n	44c60 <work_cancel+0x3a>
	list->tail = node;
   44c5e:	6050      	str	r0, [r2, #4]
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   44c60:	6823      	ldr	r3, [r4, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   44c62:	f003 0303 	and.w	r3, r3, #3
   44c66:	6023      	str	r3, [r4, #0]
	work->work_q = NULL;
   44c68:	2000      	movs	r0, #0
   44c6a:	61e0      	str	r0, [r4, #28]
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   44c6c:	e8d5 3fef 	ldaex	r3, [r5]
   44c70:	f023 0301 	bic.w	r3, r3, #1
   44c74:	e8c5 3fe2 	stlex	r2, r3, [r5]
   44c78:	2a00      	cmp	r2, #0
   44c7a:	d0e5      	beq.n	44c48 <work_cancel+0x22>
   44c7c:	e7f6      	b.n	44c6c <work_cancel+0x46>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   44c7e:	680b      	ldr	r3, [r1, #0]
Z_GENLIST_REMOVE(sflist, sfnode)
   44c80:	42b4      	cmp	r4, r6
	parent->next_and_flags = cur_flags | (unative_t)child;
   44c82:	f003 0303 	and.w	r3, r3, #3
   44c86:	ea43 0300 	orr.w	r3, r3, r0
   44c8a:	600b      	str	r3, [r1, #0]
	list->tail = node;
   44c8c:	bf08      	it	eq
   44c8e:	6051      	streq	r1, [r2, #4]
   44c90:	e7e6      	b.n	44c60 <work_cancel+0x3a>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   44c92:	6818      	ldr	r0, [r3, #0]
Z_GENLIST_FIND_AND_REMOVE(sflist, sfnode)
   44c94:	4619      	mov	r1, r3
   44c96:	f020 0303 	bic.w	r3, r0, #3
   44c9a:	e7d2      	b.n	44c42 <work_cancel+0x1c>
		(void)z_abort_timeout(&work->timeout);
   44c9c:	300c      	adds	r0, #12
   44c9e:	f7f9 f87f 	bl	3dda0 <z_abort_timeout>
   44ca2:	e7e1      	b.n	44c68 <work_cancel+0x42>
		return -EAGAIN;
   44ca4:	f06f 000a 	mvn.w	r0, #10
   44ca8:	e7ce      	b.n	44c48 <work_cancel+0x22>

00044caa <k_delayed_work_init>:
	*work = (struct k_work)Z_WORK_INITIALIZER(handler);
   44caa:	2300      	movs	r3, #0
   44cac:	e9c0 3100 	strd	r3, r1, [r0]
	node->next = NULL;
   44cb0:	e9c0 3302 	strd	r3, r3, [r0, #8]
	node->prev = NULL;
   44cb4:	6103      	str	r3, [r0, #16]
	work->work_q = NULL;
   44cb6:	61c3      	str	r3, [r0, #28]
}
   44cb8:	4770      	bx	lr

00044cba <z_tick_get_32>:

u32_t z_tick_get_32(void)
{
   44cba:	b508      	push	{r3, lr}
#ifdef CONFIG_TICKLESS_KERNEL
	return (u32_t)z_tick_get();
   44cbc:	f7f9 fa08 	bl	3e0d0 <z_tick_get>
#else
	return (u32_t)curr_tick;
#endif
}
   44cc0:	bd08      	pop	{r3, pc}

00044cc2 <z_impl_k_uptime_get>:

s64_t z_impl_k_uptime_get(void)
{
   44cc2:	b510      	push	{r4, lr}
	return k_ticks_to_ms_floor64(z_tick_get());
   44cc4:	f7f9 fa04 	bl	3e0d0 <z_tick_get>
			return (t * to_hz + off) / from_hz;
   44cc8:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
   44ccc:	fba0 2304 	umull	r2, r3, r0, r4
   44cd0:	fb04 3301 	mla	r3, r4, r1, r3
   44cd4:	0bd0      	lsrs	r0, r2, #15
}
   44cd6:	ea40 4043 	orr.w	r0, r0, r3, lsl #17
   44cda:	0bd9      	lsrs	r1, r3, #15
   44cdc:	bd10      	pop	{r4, pc}

00044cde <k_timer_init>:
	timer->status = 0U;
   44cde:	2300      	movs	r3, #0
	timer->stop_fn = stop_fn;
   44ce0:	e9c0 1206 	strd	r1, r2, [r0, #24]
   44ce4:	f100 0210 	add.w	r2, r0, #16
	timer->status = 0U;
   44ce8:	6243      	str	r3, [r0, #36]	; 0x24
	list->tail = (sys_dnode_t *)list;
   44cea:	e9c0 2204 	strd	r2, r2, [r0, #16]
	node->prev = NULL;
   44cee:	e9c0 3300 	strd	r3, r3, [r0]
	timer->user_data = NULL;
   44cf2:	6283      	str	r3, [r0, #40]	; 0x28
}
   44cf4:	4770      	bx	lr

00044cf6 <z_impl_k_timer_stop>:
}
#include <syscalls/k_timer_start_mrsh.c>
#endif

void z_impl_k_timer_stop(struct k_timer *timer)
{
   44cf6:	b510      	push	{r4, lr}
   44cf8:	4604      	mov	r4, r0
	int inactive = z_abort_timeout(&timer->timeout) != 0;
   44cfa:	f7f9 f851 	bl	3dda0 <z_abort_timeout>

	if (inactive) {
   44cfe:	bb00      	cbnz	r0, 44d42 <z_impl_k_timer_stop+0x4c>
		return;
	}

	if (timer->stop_fn != NULL) {
   44d00:	69e3      	ldr	r3, [r4, #28]
   44d02:	b10b      	cbz	r3, 44d08 <z_impl_k_timer_stop+0x12>
		timer->stop_fn(timer);
   44d04:	4620      	mov	r0, r4
   44d06:	4798      	blx	r3
	struct k_thread *thread = z_find_first_thread_to_unpend(wait_q, NULL);
   44d08:	f104 0010 	add.w	r0, r4, #16
   44d0c:	2100      	movs	r1, #0
   44d0e:	f7f7 fa9d 	bl	3c24c <z_find_first_thread_to_unpend>
	if (thread != NULL) {
   44d12:	4604      	mov	r4, r0
   44d14:	b1a8      	cbz	r0, 44d42 <z_impl_k_timer_stop+0x4c>
		z_unpend_thread_no_timeout(thread);
   44d16:	f7f7 fae3 	bl	3c2e0 <z_unpend_thread_no_timeout>
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
   44d1a:	7b63      	ldrb	r3, [r4, #13]
   44d1c:	06db      	lsls	r3, r3, #27
   44d1e:	d104      	bne.n	44d2a <z_impl_k_timer_stop+0x34>
	if (z_is_thread_ready(thread)) {
   44d20:	69a3      	ldr	r3, [r4, #24]
   44d22:	b913      	cbnz	r3, 44d2a <z_impl_k_timer_stop+0x34>
		z_add_thread_to_ready_q(thread);
   44d24:	4620      	mov	r0, r4
   44d26:	f7f7 fd17 	bl	3c758 <z_add_thread_to_ready_q>
   44d2a:	f04f 0320 	mov.w	r3, #32
   44d2e:	f3ef 8011 	mrs	r0, BASEPRI
   44d32:	f383 8811 	msr	BASEPRI, r3
   44d36:	f3bf 8f6f 	isb	sy

	if (pending_thread != NULL) {
		z_ready_thread(pending_thread);
		z_reschedule_unlocked();
	}
}
   44d3a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	(void) z_reschedule_irqlock(arch_irq_lock());
   44d3e:	f7ff befb 	b.w	44b38 <z_reschedule_irqlock>
   44d42:	bd10      	pop	{r4, pc}

00044d44 <signal_poll_event>:
{
   44d44:	b570      	push	{r4, r5, r6, lr}
	struct _poller *poller = event->poller;
   44d46:	6884      	ldr	r4, [r0, #8]
{
   44d48:	4605      	mov	r5, r0
   44d4a:	460e      	mov	r6, r1
	if (poller) {
   44d4c:	b19c      	cbz	r4, 44d76 <signal_poll_event+0x32>
		if (poller->cb != NULL) {
   44d4e:	68a3      	ldr	r3, [r4, #8]
   44d50:	b95b      	cbnz	r3, 44d6a <signal_poll_event+0x26>
	int retcode = 0;
   44d52:	4618      	mov	r0, r3
		poller->is_polling = false;
   44d54:	7023      	strb	r3, [r4, #0]
	event->poller = NULL;
   44d56:	2300      	movs	r3, #0
   44d58:	60ab      	str	r3, [r5, #8]
	event->state |= state;
   44d5a:	68eb      	ldr	r3, [r5, #12]
   44d5c:	f3c3 3204 	ubfx	r2, r3, #12, #5
   44d60:	4316      	orrs	r6, r2
   44d62:	f366 3310 	bfi	r3, r6, #12, #5
   44d66:	60eb      	str	r3, [r5, #12]
	return retcode;
   44d68:	e004      	b.n	44d74 <signal_poll_event+0x30>
			retcode = poller->cb(event, state);
   44d6a:	4798      	blx	r3
		poller->is_polling = false;
   44d6c:	2300      	movs	r3, #0
		if (retcode < 0) {
   44d6e:	2800      	cmp	r0, #0
		poller->is_polling = false;
   44d70:	7023      	strb	r3, [r4, #0]
		if (retcode < 0) {
   44d72:	daf0      	bge.n	44d56 <signal_poll_event+0x12>
}
   44d74:	bd70      	pop	{r4, r5, r6, pc}
	int retcode = 0;
   44d76:	4620      	mov	r0, r4
   44d78:	e7ed      	b.n	44d56 <signal_poll_event+0x12>

00044d7a <add_event>:
{
   44d7a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   44d7c:	4617      	mov	r7, r2
	return sys_dlist_is_empty(list) ? NULL : list->tail;
   44d7e:	e9d0 2300 	ldrd	r2, r3, [r0]
   44d82:	4290      	cmp	r0, r2
   44d84:	4604      	mov	r4, r0
   44d86:	460d      	mov	r5, r1
   44d88:	d106      	bne.n	44d98 <add_event+0x1e>
	node->prev = list->tail;
   44d8a:	6863      	ldr	r3, [r4, #4]
	node->next = list;
   44d8c:	602c      	str	r4, [r5, #0]
	node->prev = list->tail;
   44d8e:	606b      	str	r3, [r5, #4]
	list->tail->next = node;
   44d90:	6863      	ldr	r3, [r4, #4]
   44d92:	601d      	str	r5, [r3, #0]
	list->tail = node;
   44d94:	6065      	str	r5, [r4, #4]
}
   44d96:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if ((pending == NULL) ||
   44d98:	2b00      	cmp	r3, #0
   44d9a:	d0f6      	beq.n	44d8a <add_event+0x10>
		z_is_t1_higher_prio_than_t2(pending->poller->thread,
   44d9c:	689b      	ldr	r3, [r3, #8]
   44d9e:	6879      	ldr	r1, [r7, #4]
   44da0:	6858      	ldr	r0, [r3, #4]
   44da2:	f7ff fec0 	bl	44b26 <z_is_t1_higher_prio_than_t2>
	if ((pending == NULL) ||
   44da6:	2800      	cmp	r0, #0
   44da8:	d1ef      	bne.n	44d8a <add_event+0x10>
	return list->head == list;
   44daa:	6826      	ldr	r6, [r4, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   44dac:	42b4      	cmp	r4, r6
   44dae:	d0ec      	beq.n	44d8a <add_event+0x10>
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
   44db0:	2e00      	cmp	r6, #0
   44db2:	d0ea      	beq.n	44d8a <add_event+0x10>
		if (z_is_t1_higher_prio_than_t2(poller->thread,
   44db4:	68b3      	ldr	r3, [r6, #8]
   44db6:	6878      	ldr	r0, [r7, #4]
   44db8:	6859      	ldr	r1, [r3, #4]
   44dba:	f7ff feb4 	bl	44b26 <z_is_t1_higher_prio_than_t2>
   44dbe:	b128      	cbz	r0, 44dcc <add_event+0x52>
	node->prev = successor->prev;
   44dc0:	6873      	ldr	r3, [r6, #4]
	node->next = successor;
   44dc2:	e9c5 6300 	strd	r6, r3, [r5]
	successor->prev->next = node;
   44dc6:	601d      	str	r5, [r3, #0]
	successor->prev = node;
   44dc8:	6075      	str	r5, [r6, #4]
			return;
   44dca:	e7e4      	b.n	44d96 <add_event+0x1c>
	return (node == list->tail) ? NULL : node->next;
   44dcc:	6863      	ldr	r3, [r4, #4]
   44dce:	429e      	cmp	r6, r3
   44dd0:	d0db      	beq.n	44d8a <add_event+0x10>
   44dd2:	6836      	ldr	r6, [r6, #0]
   44dd4:	e7ec      	b.n	44db0 <add_event+0x36>

00044dd6 <z_handle_obj_poll_events>:
	return list->head == list;
   44dd6:	6803      	ldr	r3, [r0, #0]
	if (!sys_dlist_is_empty(list)) {
   44dd8:	4298      	cmp	r0, r3
   44dda:	d009      	beq.n	44df0 <z_handle_obj_poll_events+0x1a>
	node->prev->next = node->next;
   44ddc:	e9d3 2000 	ldrd	r2, r0, [r3]
   44de0:	6002      	str	r2, [r0, #0]
	node->next->prev = node->prev;
   44de2:	6050      	str	r0, [r2, #4]
	node->next = NULL;
   44de4:	2200      	movs	r2, #0
		(void) signal_poll_event(poll_event, state);
   44de6:	4618      	mov	r0, r3
	node->prev = NULL;
   44de8:	e9c3 2200 	strd	r2, r2, [r3]
   44dec:	f7ff bfaa 	b.w	44d44 <signal_poll_event>
}
   44df0:	4770      	bx	lr

00044df2 <z_impl_k_poll_signal_init>:
	signal->signaled = 0U;
   44df2:	2300      	movs	r3, #0
	list->tail = (sys_dnode_t *)list;
   44df4:	e9c0 0000 	strd	r0, r0, [r0]
   44df8:	6083      	str	r3, [r0, #8]
}
   44dfa:	4770      	bx	lr

00044dfc <z_impl_k_poll_signal_check>:
	*signaled = signal->signaled;
   44dfc:	6883      	ldr	r3, [r0, #8]
   44dfe:	600b      	str	r3, [r1, #0]
	*result = signal->result;
   44e00:	68c3      	ldr	r3, [r0, #12]
   44e02:	6013      	str	r3, [r2, #0]
}
   44e04:	4770      	bx	lr

00044e06 <_OffsetAbsSyms>:
					    sizeof(struct _preempt_float));
#else
GEN_ABSOLUTE_SYM(_K_THREAD_NO_FLOAT_SIZEOF, sizeof(struct k_thread));
#endif

GEN_ABS_SYM_END
   44e06:	4770      	bx	lr

00044e08 <abs>:
   44e08:	2800      	cmp	r0, #0
   44e0a:	bfb8      	it	lt
   44e0c:	4240      	neglt	r0, r0
   44e0e:	4770      	bx	lr

00044e10 <atoi>:
   44e10:	220a      	movs	r2, #10
   44e12:	2100      	movs	r1, #0
   44e14:	f7fa bb62 	b.w	3f4dc <strtol>

00044e18 <memchr>:
   44e18:	b2c9      	uxtb	r1, r1
   44e1a:	4402      	add	r2, r0
   44e1c:	b510      	push	{r4, lr}
   44e1e:	4290      	cmp	r0, r2
   44e20:	4603      	mov	r3, r0
   44e22:	d101      	bne.n	44e28 <memchr+0x10>
   44e24:	2300      	movs	r3, #0
   44e26:	e003      	b.n	44e30 <memchr+0x18>
   44e28:	781c      	ldrb	r4, [r3, #0]
   44e2a:	3001      	adds	r0, #1
   44e2c:	428c      	cmp	r4, r1
   44e2e:	d1f6      	bne.n	44e1e <memchr+0x6>
   44e30:	4618      	mov	r0, r3
   44e32:	bd10      	pop	{r4, pc}

00044e34 <memcmp>:
   44e34:	b530      	push	{r4, r5, lr}
   44e36:	3901      	subs	r1, #1
   44e38:	2400      	movs	r4, #0
   44e3a:	42a2      	cmp	r2, r4
   44e3c:	d101      	bne.n	44e42 <memcmp+0xe>
   44e3e:	2000      	movs	r0, #0
   44e40:	e005      	b.n	44e4e <memcmp+0x1a>
   44e42:	5d03      	ldrb	r3, [r0, r4]
   44e44:	3401      	adds	r4, #1
   44e46:	5d0d      	ldrb	r5, [r1, r4]
   44e48:	42ab      	cmp	r3, r5
   44e4a:	d0f6      	beq.n	44e3a <memcmp+0x6>
   44e4c:	1b58      	subs	r0, r3, r5
   44e4e:	bd30      	pop	{r4, r5, pc}

00044e50 <memcpy>:
   44e50:	440a      	add	r2, r1
   44e52:	1e43      	subs	r3, r0, #1
   44e54:	4291      	cmp	r1, r2
   44e56:	d100      	bne.n	44e5a <memcpy+0xa>
   44e58:	4770      	bx	lr
   44e5a:	b510      	push	{r4, lr}
   44e5c:	f811 4b01 	ldrb.w	r4, [r1], #1
   44e60:	4291      	cmp	r1, r2
   44e62:	f803 4f01 	strb.w	r4, [r3, #1]!
   44e66:	d1f9      	bne.n	44e5c <memcpy+0xc>
   44e68:	bd10      	pop	{r4, pc}

00044e6a <__memcpy_chk>:
   44e6a:	429a      	cmp	r2, r3
   44e6c:	b508      	push	{r3, lr}
   44e6e:	d901      	bls.n	44e74 <__memcpy_chk+0xa>
   44e70:	f7fa fc7c 	bl	3f76c <__chk_fail>
   44e74:	4281      	cmp	r1, r0
   44e76:	d804      	bhi.n	44e82 <__memcpy_chk+0x18>
   44e78:	188b      	adds	r3, r1, r2
   44e7a:	4298      	cmp	r0, r3
   44e7c:	d3f8      	bcc.n	44e70 <__memcpy_chk+0x6>
   44e7e:	4281      	cmp	r1, r0
   44e80:	d102      	bne.n	44e88 <__memcpy_chk+0x1e>
   44e82:	1883      	adds	r3, r0, r2
   44e84:	4299      	cmp	r1, r3
   44e86:	d3f3      	bcc.n	44e70 <__memcpy_chk+0x6>
   44e88:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   44e8c:	f7ff bfe0 	b.w	44e50 <memcpy>

00044e90 <memmove>:
   44e90:	4288      	cmp	r0, r1
   44e92:	eb01 0302 	add.w	r3, r1, r2
   44e96:	b510      	push	{r4, lr}
   44e98:	d902      	bls.n	44ea0 <memmove+0x10>
   44e9a:	4283      	cmp	r3, r0
   44e9c:	461c      	mov	r4, r3
   44e9e:	d807      	bhi.n	44eb0 <memmove+0x20>
   44ea0:	1e42      	subs	r2, r0, #1
   44ea2:	4299      	cmp	r1, r3
   44ea4:	d008      	beq.n	44eb8 <memmove+0x28>
   44ea6:	f811 4b01 	ldrb.w	r4, [r1], #1
   44eaa:	f802 4f01 	strb.w	r4, [r2, #1]!
   44eae:	e7f8      	b.n	44ea2 <memmove+0x12>
   44eb0:	1883      	adds	r3, r0, r2
   44eb2:	1a9a      	subs	r2, r3, r2
   44eb4:	429a      	cmp	r2, r3
   44eb6:	d100      	bne.n	44eba <memmove+0x2a>
   44eb8:	bd10      	pop	{r4, pc}
   44eba:	f814 1d01 	ldrb.w	r1, [r4, #-1]!
   44ebe:	f803 1d01 	strb.w	r1, [r3, #-1]!
   44ec2:	e7f7      	b.n	44eb4 <memmove+0x24>

00044ec4 <memset>:
   44ec4:	4402      	add	r2, r0
   44ec6:	4603      	mov	r3, r0
   44ec8:	4293      	cmp	r3, r2
   44eca:	d100      	bne.n	44ece <memset+0xa>
   44ecc:	4770      	bx	lr
   44ece:	f803 1b01 	strb.w	r1, [r3], #1
   44ed2:	e7f9      	b.n	44ec8 <memset+0x4>

00044ed4 <__sfputc_r>:
   44ed4:	6893      	ldr	r3, [r2, #8]
   44ed6:	3b01      	subs	r3, #1
   44ed8:	2b00      	cmp	r3, #0
   44eda:	6093      	str	r3, [r2, #8]
   44edc:	b410      	push	{r4}
   44ede:	da08      	bge.n	44ef2 <__sfputc_r+0x1e>
   44ee0:	6994      	ldr	r4, [r2, #24]
   44ee2:	42a3      	cmp	r3, r4
   44ee4:	db01      	blt.n	44eea <__sfputc_r+0x16>
   44ee6:	290a      	cmp	r1, #10
   44ee8:	d103      	bne.n	44ef2 <__sfputc_r+0x1e>
   44eea:	f85d 4b04 	ldr.w	r4, [sp], #4
   44eee:	f7fa bb7d 	b.w	3f5ec <__swbuf_r>
   44ef2:	6813      	ldr	r3, [r2, #0]
   44ef4:	1c58      	adds	r0, r3, #1
   44ef6:	6010      	str	r0, [r2, #0]
   44ef8:	4608      	mov	r0, r1
   44efa:	7019      	strb	r1, [r3, #0]
   44efc:	f85d 4b04 	ldr.w	r4, [sp], #4
   44f00:	4770      	bx	lr

00044f02 <__sfputs_r>:
   44f02:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   44f04:	4606      	mov	r6, r0
   44f06:	460f      	mov	r7, r1
   44f08:	4614      	mov	r4, r2
   44f0a:	18d5      	adds	r5, r2, r3
   44f0c:	42ac      	cmp	r4, r5
   44f0e:	d101      	bne.n	44f14 <__sfputs_r+0x12>
   44f10:	2000      	movs	r0, #0
   44f12:	e007      	b.n	44f24 <__sfputs_r+0x22>
   44f14:	463a      	mov	r2, r7
   44f16:	f814 1b01 	ldrb.w	r1, [r4], #1
   44f1a:	4630      	mov	r0, r6
   44f1c:	f7ff ffda 	bl	44ed4 <__sfputc_r>
   44f20:	1c43      	adds	r3, r0, #1
   44f22:	d1f3      	bne.n	44f0c <__sfputs_r+0xa>
   44f24:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00044f26 <__cvt>:
   44f26:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
   44f2a:	ec55 4b10 	vmov	r4, r5, d0
   44f2e:	2d00      	cmp	r5, #0
   44f30:	460e      	mov	r6, r1
   44f32:	4691      	mov	r9, r2
   44f34:	4619      	mov	r1, r3
   44f36:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
   44f3a:	f04f 0200 	mov.w	r2, #0
   44f3e:	da03      	bge.n	44f48 <__cvt+0x22>
   44f40:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
   44f44:	222d      	movs	r2, #45	; 0x2d
   44f46:	461d      	mov	r5, r3
   44f48:	9f0d      	ldr	r7, [sp, #52]	; 0x34
   44f4a:	700a      	strb	r2, [r1, #0]
   44f4c:	f027 0720 	bic.w	r7, r7, #32
   44f50:	2f46      	cmp	r7, #70	; 0x46
   44f52:	d004      	beq.n	44f5e <__cvt+0x38>
   44f54:	2f45      	cmp	r7, #69	; 0x45
   44f56:	d100      	bne.n	44f5a <__cvt+0x34>
   44f58:	3601      	adds	r6, #1
   44f5a:	2102      	movs	r1, #2
   44f5c:	e000      	b.n	44f60 <__cvt+0x3a>
   44f5e:	2103      	movs	r1, #3
   44f60:	ab03      	add	r3, sp, #12
   44f62:	4632      	mov	r2, r6
   44f64:	9301      	str	r3, [sp, #4]
   44f66:	ab02      	add	r3, sp, #8
   44f68:	ec45 4b10 	vmov	d0, r4, r5
   44f6c:	9300      	str	r3, [sp, #0]
   44f6e:	4653      	mov	r3, sl
   44f70:	f7d9 ff92 	bl	1ee98 <_dtoa_r>
   44f74:	2f47      	cmp	r7, #71	; 0x47
   44f76:	4680      	mov	r8, r0
   44f78:	d102      	bne.n	44f80 <__cvt+0x5a>
   44f7a:	f019 0f01 	tst.w	r9, #1
   44f7e:	d022      	beq.n	44fc6 <__cvt+0xa0>
   44f80:	2f46      	cmp	r7, #70	; 0x46
   44f82:	eb08 0906 	add.w	r9, r8, r6
   44f86:	d111      	bne.n	44fac <__cvt+0x86>
   44f88:	f898 3000 	ldrb.w	r3, [r8]
   44f8c:	2b30      	cmp	r3, #48	; 0x30
   44f8e:	d10a      	bne.n	44fa6 <__cvt+0x80>
   44f90:	2200      	movs	r2, #0
   44f92:	2300      	movs	r3, #0
   44f94:	4620      	mov	r0, r4
   44f96:	4629      	mov	r1, r5
   44f98:	f7d7 fe76 	bl	1cc88 <__aeabi_dcmpeq>
   44f9c:	b918      	cbnz	r0, 44fa6 <__cvt+0x80>
   44f9e:	f1c6 0601 	rsb	r6, r6, #1
   44fa2:	f8ca 6000 	str.w	r6, [sl]
   44fa6:	f8da 3000 	ldr.w	r3, [sl]
   44faa:	4499      	add	r9, r3
   44fac:	2200      	movs	r2, #0
   44fae:	2300      	movs	r3, #0
   44fb0:	4620      	mov	r0, r4
   44fb2:	4629      	mov	r1, r5
   44fb4:	f7d7 fe68 	bl	1cc88 <__aeabi_dcmpeq>
   44fb8:	b108      	cbz	r0, 44fbe <__cvt+0x98>
   44fba:	f8cd 900c 	str.w	r9, [sp, #12]
   44fbe:	2230      	movs	r2, #48	; 0x30
   44fc0:	9b03      	ldr	r3, [sp, #12]
   44fc2:	454b      	cmp	r3, r9
   44fc4:	d308      	bcc.n	44fd8 <__cvt+0xb2>
   44fc6:	9b03      	ldr	r3, [sp, #12]
   44fc8:	4640      	mov	r0, r8
   44fca:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   44fcc:	eba3 0308 	sub.w	r3, r3, r8
   44fd0:	6013      	str	r3, [r2, #0]
   44fd2:	b004      	add	sp, #16
   44fd4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   44fd8:	1c59      	adds	r1, r3, #1
   44fda:	9103      	str	r1, [sp, #12]
   44fdc:	701a      	strb	r2, [r3, #0]
   44fde:	e7ef      	b.n	44fc0 <__cvt+0x9a>

00044fe0 <__exponent>:
   44fe0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   44fe2:	2900      	cmp	r1, #0
   44fe4:	7002      	strb	r2, [r0, #0]
   44fe6:	bfba      	itte	lt
   44fe8:	4249      	neglt	r1, r1
   44fea:	232d      	movlt	r3, #45	; 0x2d
   44fec:	232b      	movge	r3, #43	; 0x2b
   44fee:	2909      	cmp	r1, #9
   44ff0:	7043      	strb	r3, [r0, #1]
   44ff2:	dd22      	ble.n	4503a <__exponent+0x5a>
   44ff4:	f10d 0307 	add.w	r3, sp, #7
   44ff8:	260a      	movs	r6, #10
   44ffa:	461f      	mov	r7, r3
   44ffc:	2963      	cmp	r1, #99	; 0x63
   44ffe:	f103 35ff 	add.w	r5, r3, #4294967295
   45002:	fb91 f2f6 	sdiv	r2, r1, r6
   45006:	fb06 1412 	mls	r4, r6, r2, r1
   4500a:	f104 0430 	add.w	r4, r4, #48	; 0x30
   4500e:	f803 4c01 	strb.w	r4, [r3, #-1]
   45012:	dc0a      	bgt.n	4502a <__exponent+0x4a>
   45014:	3230      	adds	r2, #48	; 0x30
   45016:	3b02      	subs	r3, #2
   45018:	f805 2c01 	strb.w	r2, [r5, #-1]
   4501c:	1c82      	adds	r2, r0, #2
   4501e:	42bb      	cmp	r3, r7
   45020:	4614      	mov	r4, r2
   45022:	d305      	bcc.n	45030 <__exponent+0x50>
   45024:	1a20      	subs	r0, r4, r0
   45026:	b003      	add	sp, #12
   45028:	bdf0      	pop	{r4, r5, r6, r7, pc}
   4502a:	462b      	mov	r3, r5
   4502c:	4611      	mov	r1, r2
   4502e:	e7e5      	b.n	44ffc <__exponent+0x1c>
   45030:	f813 1b01 	ldrb.w	r1, [r3], #1
   45034:	f802 1b01 	strb.w	r1, [r2], #1
   45038:	e7f1      	b.n	4501e <__exponent+0x3e>
   4503a:	2330      	movs	r3, #48	; 0x30
   4503c:	1d04      	adds	r4, r0, #4
   4503e:	4419      	add	r1, r3
   45040:	7083      	strb	r3, [r0, #2]
   45042:	70c1      	strb	r1, [r0, #3]
   45044:	e7ee      	b.n	45024 <__exponent+0x44>

00045046 <_printf_common>:
   45046:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   4504a:	4691      	mov	r9, r2
   4504c:	461f      	mov	r7, r3
   4504e:	688a      	ldr	r2, [r1, #8]
   45050:	4606      	mov	r6, r0
   45052:	690b      	ldr	r3, [r1, #16]
   45054:	460c      	mov	r4, r1
   45056:	f8dd 8020 	ldr.w	r8, [sp, #32]
   4505a:	4293      	cmp	r3, r2
   4505c:	bfb8      	it	lt
   4505e:	4613      	movlt	r3, r2
   45060:	f8c9 3000 	str.w	r3, [r9]
   45064:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
   45068:	b112      	cbz	r2, 45070 <_printf_common+0x2a>
   4506a:	3301      	adds	r3, #1
   4506c:	f8c9 3000 	str.w	r3, [r9]
   45070:	6823      	ldr	r3, [r4, #0]
   45072:	0699      	lsls	r1, r3, #26
   45074:	bf42      	ittt	mi
   45076:	f8d9 3000 	ldrmi.w	r3, [r9]
   4507a:	3302      	addmi	r3, #2
   4507c:	f8c9 3000 	strmi.w	r3, [r9]
   45080:	6825      	ldr	r5, [r4, #0]
   45082:	f015 0506 	ands.w	r5, r5, #6
   45086:	d107      	bne.n	45098 <_printf_common+0x52>
   45088:	f104 0a19 	add.w	sl, r4, #25
   4508c:	68e3      	ldr	r3, [r4, #12]
   4508e:	f8d9 2000 	ldr.w	r2, [r9]
   45092:	1a9b      	subs	r3, r3, r2
   45094:	42ab      	cmp	r3, r5
   45096:	dc2b      	bgt.n	450f0 <_printf_common+0xaa>
   45098:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
   4509c:	6822      	ldr	r2, [r4, #0]
   4509e:	3300      	adds	r3, #0
   450a0:	bf18      	it	ne
   450a2:	2301      	movne	r3, #1
   450a4:	0692      	lsls	r2, r2, #26
   450a6:	d430      	bmi.n	4510a <_printf_common+0xc4>
   450a8:	f104 0243 	add.w	r2, r4, #67	; 0x43
   450ac:	4639      	mov	r1, r7
   450ae:	4630      	mov	r0, r6
   450b0:	47c0      	blx	r8
   450b2:	3001      	adds	r0, #1
   450b4:	d023      	beq.n	450fe <_printf_common+0xb8>
   450b6:	6823      	ldr	r3, [r4, #0]
   450b8:	341a      	adds	r4, #26
   450ba:	f854 5c0e 	ldr.w	r5, [r4, #-14]
   450be:	f003 0306 	and.w	r3, r3, #6
   450c2:	f8d9 2000 	ldr.w	r2, [r9]
   450c6:	f04f 0900 	mov.w	r9, #0
   450ca:	2b04      	cmp	r3, #4
   450cc:	f854 3c12 	ldr.w	r3, [r4, #-18]
   450d0:	bf08      	it	eq
   450d2:	1aad      	subeq	r5, r5, r2
   450d4:	f854 2c0a 	ldr.w	r2, [r4, #-10]
   450d8:	bf14      	ite	ne
   450da:	2500      	movne	r5, #0
   450dc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
   450e0:	4293      	cmp	r3, r2
   450e2:	bfc4      	itt	gt
   450e4:	1a9b      	subgt	r3, r3, r2
   450e6:	18ed      	addgt	r5, r5, r3
   450e8:	454d      	cmp	r5, r9
   450ea:	d11a      	bne.n	45122 <_printf_common+0xdc>
   450ec:	2000      	movs	r0, #0
   450ee:	e008      	b.n	45102 <_printf_common+0xbc>
   450f0:	2301      	movs	r3, #1
   450f2:	4652      	mov	r2, sl
   450f4:	4639      	mov	r1, r7
   450f6:	4630      	mov	r0, r6
   450f8:	47c0      	blx	r8
   450fa:	3001      	adds	r0, #1
   450fc:	d103      	bne.n	45106 <_printf_common+0xc0>
   450fe:	f04f 30ff 	mov.w	r0, #4294967295
   45102:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   45106:	3501      	adds	r5, #1
   45108:	e7c0      	b.n	4508c <_printf_common+0x46>
   4510a:	18e1      	adds	r1, r4, r3
   4510c:	1c5a      	adds	r2, r3, #1
   4510e:	2030      	movs	r0, #48	; 0x30
   45110:	3302      	adds	r3, #2
   45112:	4422      	add	r2, r4
   45114:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
   45118:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
   4511c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
   45120:	e7c2      	b.n	450a8 <_printf_common+0x62>
   45122:	2301      	movs	r3, #1
   45124:	4622      	mov	r2, r4
   45126:	4639      	mov	r1, r7
   45128:	4630      	mov	r0, r6
   4512a:	47c0      	blx	r8
   4512c:	3001      	adds	r0, #1
   4512e:	d0e6      	beq.n	450fe <_printf_common+0xb8>
   45130:	f109 0901 	add.w	r9, r9, #1
   45134:	e7d8      	b.n	450e8 <_printf_common+0xa2>

00045136 <strchr>:
   45136:	b2c9      	uxtb	r1, r1
   45138:	4603      	mov	r3, r0
   4513a:	f810 2b01 	ldrb.w	r2, [r0], #1
   4513e:	b11a      	cbz	r2, 45148 <strchr+0x12>
   45140:	428a      	cmp	r2, r1
   45142:	d1f9      	bne.n	45138 <strchr+0x2>
   45144:	4618      	mov	r0, r3
   45146:	4770      	bx	lr
   45148:	2900      	cmp	r1, #0
   4514a:	bf18      	it	ne
   4514c:	2300      	movne	r3, #0
   4514e:	e7f9      	b.n	45144 <strchr+0xe>

00045150 <strcpy>:
   45150:	4603      	mov	r3, r0
   45152:	f811 2b01 	ldrb.w	r2, [r1], #1
   45156:	f803 2b01 	strb.w	r2, [r3], #1
   4515a:	2a00      	cmp	r2, #0
   4515c:	d1f9      	bne.n	45152 <strcpy+0x2>
   4515e:	4770      	bx	lr

00045160 <strncmp>:
   45160:	b510      	push	{r4, lr}
   45162:	b16a      	cbz	r2, 45180 <strncmp+0x20>
   45164:	3901      	subs	r1, #1
   45166:	1884      	adds	r4, r0, r2
   45168:	f810 3b01 	ldrb.w	r3, [r0], #1
   4516c:	f811 2f01 	ldrb.w	r2, [r1, #1]!
   45170:	4293      	cmp	r3, r2
   45172:	d103      	bne.n	4517c <strncmp+0x1c>
   45174:	42a0      	cmp	r0, r4
   45176:	d001      	beq.n	4517c <strncmp+0x1c>
   45178:	2b00      	cmp	r3, #0
   4517a:	d1f5      	bne.n	45168 <strncmp+0x8>
   4517c:	1a98      	subs	r0, r3, r2
   4517e:	bd10      	pop	{r4, pc}
   45180:	4610      	mov	r0, r2
   45182:	e7fc      	b.n	4517e <strncmp+0x1e>

00045184 <strncpy>:
   45184:	3901      	subs	r1, #1
   45186:	4603      	mov	r3, r0
   45188:	b510      	push	{r4, lr}
   4518a:	b132      	cbz	r2, 4519a <strncpy+0x16>
   4518c:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   45190:	3a01      	subs	r2, #1
   45192:	f803 4b01 	strb.w	r4, [r3], #1
   45196:	2c00      	cmp	r4, #0
   45198:	d1f7      	bne.n	4518a <strncpy+0x6>
   4519a:	441a      	add	r2, r3
   4519c:	2100      	movs	r1, #0
   4519e:	4293      	cmp	r3, r2
   451a0:	d100      	bne.n	451a4 <strncpy+0x20>
   451a2:	bd10      	pop	{r4, pc}
   451a4:	f803 1b01 	strb.w	r1, [r3], #1
   451a8:	e7f9      	b.n	4519e <strncpy+0x1a>

000451aa <strrchr>:
   451aa:	b538      	push	{r3, r4, r5, lr}
   451ac:	4603      	mov	r3, r0
   451ae:	460d      	mov	r5, r1
   451b0:	b969      	cbnz	r1, 451ce <strrchr+0x24>
   451b2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   451b6:	f7ff bfbe 	b.w	45136 <strchr>
   451ba:	1c43      	adds	r3, r0, #1
   451bc:	4604      	mov	r4, r0
   451be:	4629      	mov	r1, r5
   451c0:	4618      	mov	r0, r3
   451c2:	f7ff ffb8 	bl	45136 <strchr>
   451c6:	2800      	cmp	r0, #0
   451c8:	d1f7      	bne.n	451ba <strrchr+0x10>
   451ca:	4620      	mov	r0, r4
   451cc:	bd38      	pop	{r3, r4, r5, pc}
   451ce:	2400      	movs	r4, #0
   451d0:	e7f5      	b.n	451be <strrchr+0x14>

000451d2 <strstr>:
   451d2:	b5f0      	push	{r4, r5, r6, r7, lr}
   451d4:	780c      	ldrb	r4, [r1, #0]
   451d6:	b164      	cbz	r4, 451f2 <strstr+0x20>
   451d8:	4603      	mov	r3, r0
   451da:	781a      	ldrb	r2, [r3, #0]
   451dc:	4618      	mov	r0, r3
   451de:	1c5e      	adds	r6, r3, #1
   451e0:	b90a      	cbnz	r2, 451e6 <strstr+0x14>
   451e2:	4610      	mov	r0, r2
   451e4:	e005      	b.n	451f2 <strstr+0x20>
   451e6:	4294      	cmp	r4, r2
   451e8:	d108      	bne.n	451fc <strstr+0x2a>
   451ea:	460d      	mov	r5, r1
   451ec:	f815 2f01 	ldrb.w	r2, [r5, #1]!
   451f0:	b902      	cbnz	r2, 451f4 <strstr+0x22>
   451f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
   451f4:	f813 7f01 	ldrb.w	r7, [r3, #1]!
   451f8:	4297      	cmp	r7, r2
   451fa:	d0f7      	beq.n	451ec <strstr+0x1a>
   451fc:	4633      	mov	r3, r6
   451fe:	e7ec      	b.n	451da <strstr+0x8>

00045200 <abort>:
   45200:	b508      	push	{r3, lr}
   45202:	2006      	movs	r0, #6
   45204:	f7fa fea0 	bl	3ff48 <raise>
   45208:	2001      	movs	r0, #1
   4520a:	f7e2 fa31 	bl	27670 <_exit>

0004520e <quorem>:
   4520e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   45212:	6903      	ldr	r3, [r0, #16]
   45214:	4680      	mov	r8, r0
   45216:	690c      	ldr	r4, [r1, #16]
   45218:	42a3      	cmp	r3, r4
   4521a:	f2c0 8084 	blt.w	45326 <quorem+0x118>
   4521e:	3c01      	subs	r4, #1
   45220:	f108 0514 	add.w	r5, r8, #20
   45224:	f101 0714 	add.w	r7, r1, #20
   45228:	00a0      	lsls	r0, r4, #2
   4522a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
   4522e:	182b      	adds	r3, r5, r0
   45230:	eb07 0900 	add.w	r9, r7, r0
   45234:	9301      	str	r3, [sp, #4]
   45236:	f857 3024 	ldr.w	r3, [r7, r4, lsl #2]
   4523a:	3301      	adds	r3, #1
   4523c:	429a      	cmp	r2, r3
   4523e:	fbb2 f6f3 	udiv	r6, r2, r3
   45242:	d333      	bcc.n	452ac <quorem+0x9e>
   45244:	f04f 0a00 	mov.w	sl, #0
   45248:	46bc      	mov	ip, r7
   4524a:	46ae      	mov	lr, r5
   4524c:	46d3      	mov	fp, sl
   4524e:	f85c 2b04 	ldr.w	r2, [ip], #4
   45252:	b293      	uxth	r3, r2
   45254:	45e1      	cmp	r9, ip
   45256:	ea4f 4212 	mov.w	r2, r2, lsr #16
   4525a:	fb06 a303 	mla	r3, r6, r3, sl
   4525e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
   45262:	b29b      	uxth	r3, r3
   45264:	fb06 a202 	mla	r2, r6, r2, sl
   45268:	ebab 0303 	sub.w	r3, fp, r3
   4526c:	f8de b000 	ldr.w	fp, [lr]
   45270:	ea4f 4a12 	mov.w	sl, r2, lsr #16
   45274:	fa1f fb8b 	uxth.w	fp, fp
   45278:	445b      	add	r3, fp
   4527a:	fa1f fb82 	uxth.w	fp, r2
   4527e:	f8de 2000 	ldr.w	r2, [lr]
   45282:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
   45286:	eb02 4223 	add.w	r2, r2, r3, asr #16
   4528a:	b29b      	uxth	r3, r3
   4528c:	ea4f 4b22 	mov.w	fp, r2, asr #16
   45290:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
   45294:	f84e 3b04 	str.w	r3, [lr], #4
   45298:	d2d9      	bcs.n	4524e <quorem+0x40>
   4529a:	582b      	ldr	r3, [r5, r0]
   4529c:	b933      	cbnz	r3, 452ac <quorem+0x9e>
   4529e:	9b01      	ldr	r3, [sp, #4]
   452a0:	3b04      	subs	r3, #4
   452a2:	429d      	cmp	r5, r3
   452a4:	461a      	mov	r2, r3
   452a6:	d332      	bcc.n	4530e <quorem+0x100>
   452a8:	f8c8 4010 	str.w	r4, [r8, #16]
   452ac:	4640      	mov	r0, r8
   452ae:	f000 fa5a 	bl	45766 <__mcmp>
   452b2:	2800      	cmp	r0, #0
   452b4:	db27      	blt.n	45306 <quorem+0xf8>
   452b6:	3601      	adds	r6, #1
   452b8:	4628      	mov	r0, r5
   452ba:	f04f 0c00 	mov.w	ip, #0
   452be:	f857 1b04 	ldr.w	r1, [r7], #4
   452c2:	f8d0 e000 	ldr.w	lr, [r0]
   452c6:	b28b      	uxth	r3, r1
   452c8:	45b9      	cmp	r9, r7
   452ca:	fa1f f28e 	uxth.w	r2, lr
   452ce:	ebac 0303 	sub.w	r3, ip, r3
   452d2:	4413      	add	r3, r2
   452d4:	ea4f 4211 	mov.w	r2, r1, lsr #16
   452d8:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
   452dc:	eb02 4223 	add.w	r2, r2, r3, asr #16
   452e0:	b29b      	uxth	r3, r3
   452e2:	ea4f 4c22 	mov.w	ip, r2, asr #16
   452e6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
   452ea:	f840 3b04 	str.w	r3, [r0], #4
   452ee:	d2e6      	bcs.n	452be <quorem+0xb0>
   452f0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
   452f4:	eb05 0384 	add.w	r3, r5, r4, lsl #2
   452f8:	b92a      	cbnz	r2, 45306 <quorem+0xf8>
   452fa:	3b04      	subs	r3, #4
   452fc:	429d      	cmp	r5, r3
   452fe:	461a      	mov	r2, r3
   45300:	d30b      	bcc.n	4531a <quorem+0x10c>
   45302:	f8c8 4010 	str.w	r4, [r8, #16]
   45306:	4630      	mov	r0, r6
   45308:	b003      	add	sp, #12
   4530a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   4530e:	6812      	ldr	r2, [r2, #0]
   45310:	3b04      	subs	r3, #4
   45312:	2a00      	cmp	r2, #0
   45314:	d1c8      	bne.n	452a8 <quorem+0x9a>
   45316:	3c01      	subs	r4, #1
   45318:	e7c3      	b.n	452a2 <quorem+0x94>
   4531a:	6812      	ldr	r2, [r2, #0]
   4531c:	3b04      	subs	r3, #4
   4531e:	2a00      	cmp	r2, #0
   45320:	d1ef      	bne.n	45302 <quorem+0xf4>
   45322:	3c01      	subs	r4, #1
   45324:	e7ea      	b.n	452fc <quorem+0xee>
   45326:	2000      	movs	r0, #0
   45328:	e7ee      	b.n	45308 <quorem+0xfa>

0004532a <__sfmoreglue>:
   4532a:	b570      	push	{r4, r5, r6, lr}
   4532c:	1e4a      	subs	r2, r1, #1
   4532e:	2568      	movs	r5, #104	; 0x68
   45330:	460e      	mov	r6, r1
   45332:	4355      	muls	r5, r2
   45334:	f105 0174 	add.w	r1, r5, #116	; 0x74
   45338:	f7fa fca4 	bl	3fc84 <_malloc_r>
   4533c:	4604      	mov	r4, r0
   4533e:	b140      	cbz	r0, 45352 <__sfmoreglue+0x28>
   45340:	2100      	movs	r1, #0
   45342:	f105 0268 	add.w	r2, r5, #104	; 0x68
   45346:	e9c0 1600 	strd	r1, r6, [r0]
   4534a:	300c      	adds	r0, #12
   4534c:	60a0      	str	r0, [r4, #8]
   4534e:	f7ff fdb9 	bl	44ec4 <memset>
   45352:	4620      	mov	r0, r4
   45354:	bd70      	pop	{r4, r5, r6, pc}

00045356 <_fwalk_reent>:
   45356:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   4535a:	4680      	mov	r8, r0
   4535c:	4689      	mov	r9, r1
   4535e:	f100 0448 	add.w	r4, r0, #72	; 0x48
   45362:	2600      	movs	r6, #0
   45364:	b914      	cbnz	r4, 4536c <_fwalk_reent+0x16>
   45366:	4630      	mov	r0, r6
   45368:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   4536c:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
   45370:	3f01      	subs	r7, #1
   45372:	d501      	bpl.n	45378 <_fwalk_reent+0x22>
   45374:	6824      	ldr	r4, [r4, #0]
   45376:	e7f5      	b.n	45364 <_fwalk_reent+0xe>
   45378:	89ab      	ldrh	r3, [r5, #12]
   4537a:	2b01      	cmp	r3, #1
   4537c:	d907      	bls.n	4538e <_fwalk_reent+0x38>
   4537e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
   45382:	3301      	adds	r3, #1
   45384:	d003      	beq.n	4538e <_fwalk_reent+0x38>
   45386:	4629      	mov	r1, r5
   45388:	4640      	mov	r0, r8
   4538a:	47c8      	blx	r9
   4538c:	4306      	orrs	r6, r0
   4538e:	3568      	adds	r5, #104	; 0x68
   45390:	e7ee      	b.n	45370 <_fwalk_reent+0x1a>

00045392 <__retarget_lock_init_recursive>:
   45392:	4770      	bx	lr

00045394 <__retarget_lock_acquire_recursive>:
   45394:	4770      	bx	lr

00045396 <__retarget_lock_release_recursive>:
   45396:	4770      	bx	lr

00045398 <__swhatbuf_r>:
   45398:	b570      	push	{r4, r5, r6, lr}
   4539a:	460e      	mov	r6, r1
   4539c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   453a0:	b096      	sub	sp, #88	; 0x58
   453a2:	4614      	mov	r4, r2
   453a4:	2900      	cmp	r1, #0
   453a6:	461d      	mov	r5, r3
   453a8:	da07      	bge.n	453ba <__swhatbuf_r+0x22>
   453aa:	2300      	movs	r3, #0
   453ac:	602b      	str	r3, [r5, #0]
   453ae:	89b3      	ldrh	r3, [r6, #12]
   453b0:	061a      	lsls	r2, r3, #24
   453b2:	d410      	bmi.n	453d6 <__swhatbuf_r+0x3e>
   453b4:	f44f 6380 	mov.w	r3, #1024	; 0x400
   453b8:	e00e      	b.n	453d8 <__swhatbuf_r+0x40>
   453ba:	466a      	mov	r2, sp
   453bc:	f7fa fe00 	bl	3ffc0 <_fstat_r>
   453c0:	2800      	cmp	r0, #0
   453c2:	dbf2      	blt.n	453aa <__swhatbuf_r+0x12>
   453c4:	9a01      	ldr	r2, [sp, #4]
   453c6:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
   453ca:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
   453ce:	425a      	negs	r2, r3
   453d0:	415a      	adcs	r2, r3
   453d2:	602a      	str	r2, [r5, #0]
   453d4:	e7ee      	b.n	453b4 <__swhatbuf_r+0x1c>
   453d6:	2340      	movs	r3, #64	; 0x40
   453d8:	2000      	movs	r0, #0
   453da:	6023      	str	r3, [r4, #0]
   453dc:	b016      	add	sp, #88	; 0x58
   453de:	bd70      	pop	{r4, r5, r6, pc}

000453e0 <_Balloc>:
   453e0:	b570      	push	{r4, r5, r6, lr}
   453e2:	6a45      	ldr	r5, [r0, #36]	; 0x24
   453e4:	4604      	mov	r4, r0
   453e6:	460e      	mov	r6, r1
   453e8:	b93d      	cbnz	r5, 453fa <_Balloc+0x1a>
   453ea:	2010      	movs	r0, #16
   453ec:	f7fa fba6 	bl	3fb3c <malloc>
   453f0:	6260      	str	r0, [r4, #36]	; 0x24
   453f2:	6005      	str	r5, [r0, #0]
   453f4:	60c5      	str	r5, [r0, #12]
   453f6:	e9c0 5501 	strd	r5, r5, [r0, #4]
   453fa:	6a65      	ldr	r5, [r4, #36]	; 0x24
   453fc:	68eb      	ldr	r3, [r5, #12]
   453fe:	b183      	cbz	r3, 45422 <_Balloc+0x42>
   45400:	6a63      	ldr	r3, [r4, #36]	; 0x24
   45402:	68db      	ldr	r3, [r3, #12]
   45404:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
   45408:	b9b8      	cbnz	r0, 4543a <_Balloc+0x5a>
   4540a:	2101      	movs	r1, #1
   4540c:	4620      	mov	r0, r4
   4540e:	fa01 f506 	lsl.w	r5, r1, r6
   45412:	1d6a      	adds	r2, r5, #5
   45414:	0092      	lsls	r2, r2, #2
   45416:	f000 fa6e 	bl	458f6 <_calloc_r>
   4541a:	b160      	cbz	r0, 45436 <_Balloc+0x56>
   4541c:	e9c0 6501 	strd	r6, r5, [r0, #4]
   45420:	e00e      	b.n	45440 <_Balloc+0x60>
   45422:	2221      	movs	r2, #33	; 0x21
   45424:	2104      	movs	r1, #4
   45426:	4620      	mov	r0, r4
   45428:	f000 fa65 	bl	458f6 <_calloc_r>
   4542c:	6a63      	ldr	r3, [r4, #36]	; 0x24
   4542e:	60e8      	str	r0, [r5, #12]
   45430:	68db      	ldr	r3, [r3, #12]
   45432:	2b00      	cmp	r3, #0
   45434:	d1e4      	bne.n	45400 <_Balloc+0x20>
   45436:	2000      	movs	r0, #0
   45438:	bd70      	pop	{r4, r5, r6, pc}
   4543a:	6802      	ldr	r2, [r0, #0]
   4543c:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
   45440:	2300      	movs	r3, #0
   45442:	e9c0 3303 	strd	r3, r3, [r0, #12]
   45446:	e7f7      	b.n	45438 <_Balloc+0x58>

00045448 <_Bfree>:
   45448:	b570      	push	{r4, r5, r6, lr}
   4544a:	6a44      	ldr	r4, [r0, #36]	; 0x24
   4544c:	4606      	mov	r6, r0
   4544e:	460d      	mov	r5, r1
   45450:	b93c      	cbnz	r4, 45462 <_Bfree+0x1a>
   45452:	2010      	movs	r0, #16
   45454:	f7fa fb72 	bl	3fb3c <malloc>
   45458:	6270      	str	r0, [r6, #36]	; 0x24
   4545a:	6004      	str	r4, [r0, #0]
   4545c:	60c4      	str	r4, [r0, #12]
   4545e:	e9c0 4401 	strd	r4, r4, [r0, #4]
   45462:	b13d      	cbz	r5, 45474 <_Bfree+0x2c>
   45464:	6a73      	ldr	r3, [r6, #36]	; 0x24
   45466:	686a      	ldr	r2, [r5, #4]
   45468:	68db      	ldr	r3, [r3, #12]
   4546a:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
   4546e:	6029      	str	r1, [r5, #0]
   45470:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
   45474:	bd70      	pop	{r4, r5, r6, pc}

00045476 <__multadd>:
   45476:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   4547a:	f101 0c14 	add.w	ip, r1, #20
   4547e:	461f      	mov	r7, r3
   45480:	4606      	mov	r6, r0
   45482:	460c      	mov	r4, r1
   45484:	690d      	ldr	r5, [r1, #16]
   45486:	2300      	movs	r3, #0
   45488:	f8dc 0000 	ldr.w	r0, [ip]
   4548c:	3301      	adds	r3, #1
   4548e:	b281      	uxth	r1, r0
   45490:	429d      	cmp	r5, r3
   45492:	ea4f 4010 	mov.w	r0, r0, lsr #16
   45496:	fb02 7101 	mla	r1, r2, r1, r7
   4549a:	ea4f 4711 	mov.w	r7, r1, lsr #16
   4549e:	b289      	uxth	r1, r1
   454a0:	fb02 7000 	mla	r0, r2, r0, r7
   454a4:	eb01 4100 	add.w	r1, r1, r0, lsl #16
   454a8:	ea4f 4710 	mov.w	r7, r0, lsr #16
   454ac:	f84c 1b04 	str.w	r1, [ip], #4
   454b0:	dcea      	bgt.n	45488 <__multadd+0x12>
   454b2:	b1d7      	cbz	r7, 454ea <__multadd+0x74>
   454b4:	68a3      	ldr	r3, [r4, #8]
   454b6:	42ab      	cmp	r3, r5
   454b8:	dc12      	bgt.n	454e0 <__multadd+0x6a>
   454ba:	6861      	ldr	r1, [r4, #4]
   454bc:	4630      	mov	r0, r6
   454be:	3101      	adds	r1, #1
   454c0:	f7ff ff8e 	bl	453e0 <_Balloc>
   454c4:	6922      	ldr	r2, [r4, #16]
   454c6:	4680      	mov	r8, r0
   454c8:	f104 010c 	add.w	r1, r4, #12
   454cc:	3202      	adds	r2, #2
   454ce:	300c      	adds	r0, #12
   454d0:	0092      	lsls	r2, r2, #2
   454d2:	f7ff fcbd 	bl	44e50 <memcpy>
   454d6:	4621      	mov	r1, r4
   454d8:	4644      	mov	r4, r8
   454da:	4630      	mov	r0, r6
   454dc:	f7ff ffb4 	bl	45448 <_Bfree>
   454e0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
   454e4:	3501      	adds	r5, #1
   454e6:	615f      	str	r7, [r3, #20]
   454e8:	6125      	str	r5, [r4, #16]
   454ea:	4620      	mov	r0, r4
   454ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000454f0 <__hi0bits>:
   454f0:	0c02      	lsrs	r2, r0, #16
   454f2:	4603      	mov	r3, r0
   454f4:	0412      	lsls	r2, r2, #16
   454f6:	b9ca      	cbnz	r2, 4552c <__hi0bits+0x3c>
   454f8:	0403      	lsls	r3, r0, #16
   454fa:	2010      	movs	r0, #16
   454fc:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
   45500:	bf04      	itt	eq
   45502:	021b      	lsleq	r3, r3, #8
   45504:	3008      	addeq	r0, #8
   45506:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
   4550a:	bf04      	itt	eq
   4550c:	011b      	lsleq	r3, r3, #4
   4550e:	3004      	addeq	r0, #4
   45510:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
   45514:	bf04      	itt	eq
   45516:	009b      	lsleq	r3, r3, #2
   45518:	3002      	addeq	r0, #2
   4551a:	2b00      	cmp	r3, #0
   4551c:	db05      	blt.n	4552a <__hi0bits+0x3a>
   4551e:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
   45522:	f100 0001 	add.w	r0, r0, #1
   45526:	bf08      	it	eq
   45528:	2020      	moveq	r0, #32
   4552a:	4770      	bx	lr
   4552c:	2000      	movs	r0, #0
   4552e:	e7e5      	b.n	454fc <__hi0bits+0xc>

00045530 <__lo0bits>:
   45530:	6803      	ldr	r3, [r0, #0]
   45532:	4601      	mov	r1, r0
   45534:	f013 0207 	ands.w	r2, r3, #7
   45538:	d00b      	beq.n	45552 <__lo0bits+0x22>
   4553a:	07da      	lsls	r2, r3, #31
   4553c:	d424      	bmi.n	45588 <__lo0bits+0x58>
   4553e:	0798      	lsls	r0, r3, #30
   45540:	bf47      	ittee	mi
   45542:	085b      	lsrmi	r3, r3, #1
   45544:	2001      	movmi	r0, #1
   45546:	089b      	lsrpl	r3, r3, #2
   45548:	2002      	movpl	r0, #2
   4554a:	bf4c      	ite	mi
   4554c:	600b      	strmi	r3, [r1, #0]
   4554e:	600b      	strpl	r3, [r1, #0]
   45550:	4770      	bx	lr
   45552:	b298      	uxth	r0, r3
   45554:	b9b0      	cbnz	r0, 45584 <__lo0bits+0x54>
   45556:	0c1b      	lsrs	r3, r3, #16
   45558:	2010      	movs	r0, #16
   4555a:	f013 0fff 	tst.w	r3, #255	; 0xff
   4555e:	bf04      	itt	eq
   45560:	0a1b      	lsreq	r3, r3, #8
   45562:	3008      	addeq	r0, #8
   45564:	071a      	lsls	r2, r3, #28
   45566:	bf04      	itt	eq
   45568:	091b      	lsreq	r3, r3, #4
   4556a:	3004      	addeq	r0, #4
   4556c:	079a      	lsls	r2, r3, #30
   4556e:	bf04      	itt	eq
   45570:	089b      	lsreq	r3, r3, #2
   45572:	3002      	addeq	r0, #2
   45574:	07da      	lsls	r2, r3, #31
   45576:	d403      	bmi.n	45580 <__lo0bits+0x50>
   45578:	085b      	lsrs	r3, r3, #1
   4557a:	f100 0001 	add.w	r0, r0, #1
   4557e:	d005      	beq.n	4558c <__lo0bits+0x5c>
   45580:	600b      	str	r3, [r1, #0]
   45582:	4770      	bx	lr
   45584:	4610      	mov	r0, r2
   45586:	e7e8      	b.n	4555a <__lo0bits+0x2a>
   45588:	2000      	movs	r0, #0
   4558a:	4770      	bx	lr
   4558c:	2020      	movs	r0, #32
   4558e:	4770      	bx	lr

00045590 <__i2b>:
   45590:	b510      	push	{r4, lr}
   45592:	460c      	mov	r4, r1
   45594:	2101      	movs	r1, #1
   45596:	f7ff ff23 	bl	453e0 <_Balloc>
   4559a:	2201      	movs	r2, #1
   4559c:	6144      	str	r4, [r0, #20]
   4559e:	6102      	str	r2, [r0, #16]
   455a0:	bd10      	pop	{r4, pc}

000455a2 <__multiply>:
   455a2:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   455a6:	4690      	mov	r8, r2
   455a8:	690a      	ldr	r2, [r1, #16]
   455aa:	460c      	mov	r4, r1
   455ac:	f8d8 3010 	ldr.w	r3, [r8, #16]
   455b0:	429a      	cmp	r2, r3
   455b2:	bfbe      	ittt	lt
   455b4:	460b      	movlt	r3, r1
   455b6:	4644      	movlt	r4, r8
   455b8:	4698      	movlt	r8, r3
   455ba:	6927      	ldr	r7, [r4, #16]
   455bc:	68a3      	ldr	r3, [r4, #8]
   455be:	f8d8 9010 	ldr.w	r9, [r8, #16]
   455c2:	6861      	ldr	r1, [r4, #4]
   455c4:	eb07 0609 	add.w	r6, r7, r9
   455c8:	42b3      	cmp	r3, r6
   455ca:	bfb8      	it	lt
   455cc:	3101      	addlt	r1, #1
   455ce:	f7ff ff07 	bl	453e0 <_Balloc>
   455d2:	f100 0514 	add.w	r5, r0, #20
   455d6:	2200      	movs	r2, #0
   455d8:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
   455dc:	462b      	mov	r3, r5
   455de:	4573      	cmp	r3, lr
   455e0:	d316      	bcc.n	45610 <__multiply+0x6e>
   455e2:	f104 0314 	add.w	r3, r4, #20
   455e6:	f108 0214 	add.w	r2, r8, #20
   455ea:	eb03 0787 	add.w	r7, r3, r7, lsl #2
   455ee:	eb02 0389 	add.w	r3, r2, r9, lsl #2
   455f2:	9300      	str	r3, [sp, #0]
   455f4:	9b00      	ldr	r3, [sp, #0]
   455f6:	9201      	str	r2, [sp, #4]
   455f8:	4293      	cmp	r3, r2
   455fa:	d80c      	bhi.n	45616 <__multiply+0x74>
   455fc:	2e00      	cmp	r6, #0
   455fe:	dd03      	ble.n	45608 <__multiply+0x66>
   45600:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
   45604:	2b00      	cmp	r3, #0
   45606:	d059      	beq.n	456bc <__multiply+0x11a>
   45608:	6106      	str	r6, [r0, #16]
   4560a:	b003      	add	sp, #12
   4560c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   45610:	f843 2b04 	str.w	r2, [r3], #4
   45614:	e7e3      	b.n	455de <__multiply+0x3c>
   45616:	f8b2 a000 	ldrh.w	sl, [r2]
   4561a:	f1ba 0f00 	cmp.w	sl, #0
   4561e:	d023      	beq.n	45668 <__multiply+0xc6>
   45620:	f104 0914 	add.w	r9, r4, #20
   45624:	46ac      	mov	ip, r5
   45626:	f04f 0800 	mov.w	r8, #0
   4562a:	f859 1b04 	ldr.w	r1, [r9], #4
   4562e:	f8dc b000 	ldr.w	fp, [ip]
   45632:	b28b      	uxth	r3, r1
   45634:	454f      	cmp	r7, r9
   45636:	fa1f fb8b 	uxth.w	fp, fp
   4563a:	fb0a b303 	mla	r3, sl, r3, fp
   4563e:	ea4f 4b11 	mov.w	fp, r1, lsr #16
   45642:	f8dc 1000 	ldr.w	r1, [ip]
   45646:	4443      	add	r3, r8
   45648:	ea4f 4811 	mov.w	r8, r1, lsr #16
   4564c:	fb0a 810b 	mla	r1, sl, fp, r8
   45650:	eb01 4113 	add.w	r1, r1, r3, lsr #16
   45654:	b29b      	uxth	r3, r3
   45656:	ea4f 4811 	mov.w	r8, r1, lsr #16
   4565a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
   4565e:	f84c 3b04 	str.w	r3, [ip], #4
   45662:	d8e2      	bhi.n	4562a <__multiply+0x88>
   45664:	f8cc 8000 	str.w	r8, [ip]
   45668:	9b01      	ldr	r3, [sp, #4]
   4566a:	3204      	adds	r2, #4
   4566c:	f8b3 9002 	ldrh.w	r9, [r3, #2]
   45670:	f1b9 0f00 	cmp.w	r9, #0
   45674:	d020      	beq.n	456b8 <__multiply+0x116>
   45676:	682b      	ldr	r3, [r5, #0]
   45678:	f104 0814 	add.w	r8, r4, #20
   4567c:	46ac      	mov	ip, r5
   4567e:	f04f 0a00 	mov.w	sl, #0
   45682:	f8b8 1000 	ldrh.w	r1, [r8]
   45686:	b29b      	uxth	r3, r3
   45688:	f8bc b002 	ldrh.w	fp, [ip, #2]
   4568c:	fb09 b101 	mla	r1, r9, r1, fp
   45690:	448a      	add	sl, r1
   45692:	ea43 430a 	orr.w	r3, r3, sl, lsl #16
   45696:	f84c 3b04 	str.w	r3, [ip], #4
   4569a:	f858 3b04 	ldr.w	r3, [r8], #4
   4569e:	f8bc 1000 	ldrh.w	r1, [ip]
   456a2:	0c1b      	lsrs	r3, r3, #16
   456a4:	4547      	cmp	r7, r8
   456a6:	fb09 1303 	mla	r3, r9, r3, r1
   456aa:	eb03 431a 	add.w	r3, r3, sl, lsr #16
   456ae:	ea4f 4a13 	mov.w	sl, r3, lsr #16
   456b2:	d8e6      	bhi.n	45682 <__multiply+0xe0>
   456b4:	f8cc 3000 	str.w	r3, [ip]
   456b8:	3504      	adds	r5, #4
   456ba:	e79b      	b.n	455f4 <__multiply+0x52>
   456bc:	3e01      	subs	r6, #1
   456be:	e79d      	b.n	455fc <__multiply+0x5a>

000456c0 <__lshift>:
   456c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   456c4:	460c      	mov	r4, r1
   456c6:	ea4f 1a62 	mov.w	sl, r2, asr #5
   456ca:	4607      	mov	r7, r0
   456cc:	4616      	mov	r6, r2
   456ce:	6923      	ldr	r3, [r4, #16]
   456d0:	6849      	ldr	r1, [r1, #4]
   456d2:	eb0a 0903 	add.w	r9, sl, r3
   456d6:	68a3      	ldr	r3, [r4, #8]
   456d8:	f109 0501 	add.w	r5, r9, #1
   456dc:	42ab      	cmp	r3, r5
   456de:	db33      	blt.n	45748 <__lshift+0x88>
   456e0:	4638      	mov	r0, r7
   456e2:	f7ff fe7d 	bl	453e0 <_Balloc>
   456e6:	2300      	movs	r3, #0
   456e8:	4680      	mov	r8, r0
   456ea:	f100 0114 	add.w	r1, r0, #20
   456ee:	f100 0210 	add.w	r2, r0, #16
   456f2:	4618      	mov	r0, r3
   456f4:	4553      	cmp	r3, sl
   456f6:	db2a      	blt.n	4574e <__lshift+0x8e>
   456f8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
   456fc:	f104 0314 	add.w	r3, r4, #20
   45700:	6920      	ldr	r0, [r4, #16]
   45702:	f016 021f 	ands.w	r2, r6, #31
   45706:	eb01 018a 	add.w	r1, r1, sl, lsl #2
   4570a:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
   4570e:	d022      	beq.n	45756 <__lshift+0x96>
   45710:	f1c2 0e20 	rsb	lr, r2, #32
   45714:	2000      	movs	r0, #0
   45716:	681e      	ldr	r6, [r3, #0]
   45718:	4096      	lsls	r6, r2
   4571a:	4330      	orrs	r0, r6
   4571c:	f841 0b04 	str.w	r0, [r1], #4
   45720:	f853 0b04 	ldr.w	r0, [r3], #4
   45724:	459c      	cmp	ip, r3
   45726:	fa20 f00e 	lsr.w	r0, r0, lr
   4572a:	d8f4      	bhi.n	45716 <__lshift+0x56>
   4572c:	6008      	str	r0, [r1, #0]
   4572e:	b108      	cbz	r0, 45734 <__lshift+0x74>
   45730:	f109 0502 	add.w	r5, r9, #2
   45734:	3d01      	subs	r5, #1
   45736:	4638      	mov	r0, r7
   45738:	4621      	mov	r1, r4
   4573a:	f8c8 5010 	str.w	r5, [r8, #16]
   4573e:	f7ff fe83 	bl	45448 <_Bfree>
   45742:	4640      	mov	r0, r8
   45744:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   45748:	3101      	adds	r1, #1
   4574a:	005b      	lsls	r3, r3, #1
   4574c:	e7c6      	b.n	456dc <__lshift+0x1c>
   4574e:	f842 0f04 	str.w	r0, [r2, #4]!
   45752:	3301      	adds	r3, #1
   45754:	e7ce      	b.n	456f4 <__lshift+0x34>
   45756:	3904      	subs	r1, #4
   45758:	f853 2b04 	ldr.w	r2, [r3], #4
   4575c:	459c      	cmp	ip, r3
   4575e:	f841 2f04 	str.w	r2, [r1, #4]!
   45762:	d8f9      	bhi.n	45758 <__lshift+0x98>
   45764:	e7e6      	b.n	45734 <__lshift+0x74>

00045766 <__mcmp>:
   45766:	6903      	ldr	r3, [r0, #16]
   45768:	690a      	ldr	r2, [r1, #16]
   4576a:	1a9b      	subs	r3, r3, r2
   4576c:	b530      	push	{r4, r5, lr}
   4576e:	d10c      	bne.n	4578a <__mcmp+0x24>
   45770:	0092      	lsls	r2, r2, #2
   45772:	3014      	adds	r0, #20
   45774:	3114      	adds	r1, #20
   45776:	1884      	adds	r4, r0, r2
   45778:	4411      	add	r1, r2
   4577a:	f854 5d04 	ldr.w	r5, [r4, #-4]!
   4577e:	f851 2d04 	ldr.w	r2, [r1, #-4]!
   45782:	4295      	cmp	r5, r2
   45784:	d003      	beq.n	4578e <__mcmp+0x28>
   45786:	d305      	bcc.n	45794 <__mcmp+0x2e>
   45788:	2301      	movs	r3, #1
   4578a:	4618      	mov	r0, r3
   4578c:	bd30      	pop	{r4, r5, pc}
   4578e:	42a0      	cmp	r0, r4
   45790:	d3f3      	bcc.n	4577a <__mcmp+0x14>
   45792:	e7fa      	b.n	4578a <__mcmp+0x24>
   45794:	f04f 33ff 	mov.w	r3, #4294967295
   45798:	e7f7      	b.n	4578a <__mcmp+0x24>

0004579a <__mdiff>:
   4579a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   4579e:	460d      	mov	r5, r1
   457a0:	4607      	mov	r7, r0
   457a2:	4611      	mov	r1, r2
   457a4:	4614      	mov	r4, r2
   457a6:	4628      	mov	r0, r5
   457a8:	f7ff ffdd 	bl	45766 <__mcmp>
   457ac:	1e06      	subs	r6, r0, #0
   457ae:	d108      	bne.n	457c2 <__mdiff+0x28>
   457b0:	4631      	mov	r1, r6
   457b2:	4638      	mov	r0, r7
   457b4:	f7ff fe14 	bl	453e0 <_Balloc>
   457b8:	2301      	movs	r3, #1
   457ba:	e9c0 3604 	strd	r3, r6, [r0, #16]
   457be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   457c2:	bfa3      	ittte	ge
   457c4:	4623      	movge	r3, r4
   457c6:	462c      	movge	r4, r5
   457c8:	2600      	movge	r6, #0
   457ca:	2601      	movlt	r6, #1
   457cc:	bfa8      	it	ge
   457ce:	461d      	movge	r5, r3
   457d0:	6861      	ldr	r1, [r4, #4]
   457d2:	4638      	mov	r0, r7
   457d4:	f7ff fe04 	bl	453e0 <_Balloc>
   457d8:	f105 0914 	add.w	r9, r5, #20
   457dc:	60c6      	str	r6, [r0, #12]
   457de:	f104 0214 	add.w	r2, r4, #20
   457e2:	6926      	ldr	r6, [r4, #16]
   457e4:	f100 0114 	add.w	r1, r0, #20
   457e8:	692b      	ldr	r3, [r5, #16]
   457ea:	f04f 0e00 	mov.w	lr, #0
   457ee:	eb02 0786 	add.w	r7, r2, r6, lsl #2
   457f2:	eb09 0883 	add.w	r8, r9, r3, lsl #2
   457f6:	f852 ab04 	ldr.w	sl, [r2], #4
   457fa:	f859 5b04 	ldr.w	r5, [r9], #4
   457fe:	fa1f f38a 	uxth.w	r3, sl
   45802:	4694      	mov	ip, r2
   45804:	b2ac      	uxth	r4, r5
   45806:	45c8      	cmp	r8, r9
   45808:	4473      	add	r3, lr
   4580a:	eba3 0304 	sub.w	r3, r3, r4
   4580e:	ea4f 4415 	mov.w	r4, r5, lsr #16
   45812:	ebc4 441a 	rsb	r4, r4, sl, lsr #16
   45816:	eb04 4423 	add.w	r4, r4, r3, asr #16
   4581a:	b29b      	uxth	r3, r3
   4581c:	ea4f 4e24 	mov.w	lr, r4, asr #16
   45820:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
   45824:	f841 4b04 	str.w	r4, [r1], #4
   45828:	d8e5      	bhi.n	457f6 <__mdiff+0x5c>
   4582a:	45bc      	cmp	ip, r7
   4582c:	d304      	bcc.n	45838 <__mdiff+0x9e>
   4582e:	f851 3d04 	ldr.w	r3, [r1, #-4]!
   45832:	b183      	cbz	r3, 45856 <__mdiff+0xbc>
   45834:	6106      	str	r6, [r0, #16]
   45836:	e7c2      	b.n	457be <__mdiff+0x24>
   45838:	f85c 4b04 	ldr.w	r4, [ip], #4
   4583c:	b2a2      	uxth	r2, r4
   4583e:	4472      	add	r2, lr
   45840:	1413      	asrs	r3, r2, #16
   45842:	b292      	uxth	r2, r2
   45844:	eb03 4314 	add.w	r3, r3, r4, lsr #16
   45848:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
   4584c:	ea4f 4e23 	mov.w	lr, r3, asr #16
   45850:	f841 2b04 	str.w	r2, [r1], #4
   45854:	e7e9      	b.n	4582a <__mdiff+0x90>
   45856:	3e01      	subs	r6, #1
   45858:	e7e9      	b.n	4582e <__mdiff+0x94>

0004585a <__d2b>:
   4585a:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   4585e:	ec59 8b10 	vmov	r8, r9, d0
   45862:	f3c9 540a 	ubfx	r4, r9, #20, #11
   45866:	460e      	mov	r6, r1
   45868:	2101      	movs	r1, #1
   4586a:	4615      	mov	r5, r2
   4586c:	f7ff fdb8 	bl	453e0 <_Balloc>
   45870:	f3c9 0313 	ubfx	r3, r9, #0, #20
   45874:	4607      	mov	r7, r0
   45876:	bb2c      	cbnz	r4, 458c4 <__d2b+0x6a>
   45878:	9301      	str	r3, [sp, #4]
   4587a:	f1b8 0300 	subs.w	r3, r8, #0
   4587e:	d026      	beq.n	458ce <__d2b+0x74>
   45880:	4668      	mov	r0, sp
   45882:	9300      	str	r3, [sp, #0]
   45884:	f7ff fe54 	bl	45530 <__lo0bits>
   45888:	9900      	ldr	r1, [sp, #0]
   4588a:	b1f0      	cbz	r0, 458ca <__d2b+0x70>
   4588c:	9a01      	ldr	r2, [sp, #4]
   4588e:	f1c0 0320 	rsb	r3, r0, #32
   45892:	fa02 f303 	lsl.w	r3, r2, r3
   45896:	40c2      	lsrs	r2, r0
   45898:	430b      	orrs	r3, r1
   4589a:	9201      	str	r2, [sp, #4]
   4589c:	617b      	str	r3, [r7, #20]
   4589e:	9b01      	ldr	r3, [sp, #4]
   458a0:	2b00      	cmp	r3, #0
   458a2:	61bb      	str	r3, [r7, #24]
   458a4:	bf14      	ite	ne
   458a6:	2102      	movne	r1, #2
   458a8:	2101      	moveq	r1, #1
   458aa:	6139      	str	r1, [r7, #16]
   458ac:	b1c4      	cbz	r4, 458e0 <__d2b+0x86>
   458ae:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
   458b2:	4404      	add	r4, r0
   458b4:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
   458b8:	6034      	str	r4, [r6, #0]
   458ba:	6028      	str	r0, [r5, #0]
   458bc:	4638      	mov	r0, r7
   458be:	b003      	add	sp, #12
   458c0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   458c4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   458c8:	e7d6      	b.n	45878 <__d2b+0x1e>
   458ca:	6179      	str	r1, [r7, #20]
   458cc:	e7e7      	b.n	4589e <__d2b+0x44>
   458ce:	a801      	add	r0, sp, #4
   458d0:	f7ff fe2e 	bl	45530 <__lo0bits>
   458d4:	9b01      	ldr	r3, [sp, #4]
   458d6:	2101      	movs	r1, #1
   458d8:	3020      	adds	r0, #32
   458da:	617b      	str	r3, [r7, #20]
   458dc:	6139      	str	r1, [r7, #16]
   458de:	e7e5      	b.n	458ac <__d2b+0x52>
   458e0:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
   458e4:	eb07 0381 	add.w	r3, r7, r1, lsl #2
   458e8:	6030      	str	r0, [r6, #0]
   458ea:	6918      	ldr	r0, [r3, #16]
   458ec:	f7ff fe00 	bl	454f0 <__hi0bits>
   458f0:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
   458f4:	e7e1      	b.n	458ba <__d2b+0x60>

000458f6 <_calloc_r>:
   458f6:	b538      	push	{r3, r4, r5, lr}
   458f8:	fb02 f401 	mul.w	r4, r2, r1
   458fc:	4621      	mov	r1, r4
   458fe:	f7fa f9c1 	bl	3fc84 <_malloc_r>
   45902:	4605      	mov	r5, r0
   45904:	b118      	cbz	r0, 4590e <_calloc_r+0x18>
   45906:	4622      	mov	r2, r4
   45908:	2100      	movs	r1, #0
   4590a:	f7ff fadb 	bl	44ec4 <memset>
   4590e:	4628      	mov	r0, r5
   45910:	bd38      	pop	{r3, r4, r5, pc}

00045912 <_realloc_r>:
   45912:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   45914:	4607      	mov	r7, r0
   45916:	4614      	mov	r4, r2
   45918:	460e      	mov	r6, r1
   4591a:	b921      	cbnz	r1, 45926 <_realloc_r+0x14>
   4591c:	4611      	mov	r1, r2
   4591e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   45922:	f7fa b9af 	b.w	3fc84 <_malloc_r>
   45926:	b922      	cbnz	r2, 45932 <_realloc_r+0x20>
   45928:	4625      	mov	r5, r4
   4592a:	f7fa f95d 	bl	3fbe8 <_free_r>
   4592e:	4628      	mov	r0, r5
   45930:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   45932:	f000 f8ee 	bl	45b12 <_malloc_usable_size_r>
   45936:	42a0      	cmp	r0, r4
   45938:	d20f      	bcs.n	4595a <_realloc_r+0x48>
   4593a:	4621      	mov	r1, r4
   4593c:	4638      	mov	r0, r7
   4593e:	f7fa f9a1 	bl	3fc84 <_malloc_r>
   45942:	4605      	mov	r5, r0
   45944:	2800      	cmp	r0, #0
   45946:	d0f2      	beq.n	4592e <_realloc_r+0x1c>
   45948:	4631      	mov	r1, r6
   4594a:	4622      	mov	r2, r4
   4594c:	f7ff fa80 	bl	44e50 <memcpy>
   45950:	4631      	mov	r1, r6
   45952:	4638      	mov	r0, r7
   45954:	f7fa f948 	bl	3fbe8 <_free_r>
   45958:	e7e9      	b.n	4592e <_realloc_r+0x1c>
   4595a:	4635      	mov	r5, r6
   4595c:	e7e7      	b.n	4592e <_realloc_r+0x1c>

0004595e <__ssputs_r>:
   4595e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   45962:	688e      	ldr	r6, [r1, #8]
   45964:	4682      	mov	sl, r0
   45966:	460c      	mov	r4, r1
   45968:	4691      	mov	r9, r2
   4596a:	429e      	cmp	r6, r3
   4596c:	4698      	mov	r8, r3
   4596e:	d838      	bhi.n	459e2 <__ssputs_r+0x84>
   45970:	f8b1 c00c 	ldrh.w	ip, [r1, #12]
   45974:	f41c 6f90 	tst.w	ip, #1152	; 0x480
   45978:	d031      	beq.n	459de <__ssputs_r+0x80>
   4597a:	6962      	ldr	r2, [r4, #20]
   4597c:	3301      	adds	r3, #1
   4597e:	6825      	ldr	r5, [r4, #0]
   45980:	6909      	ldr	r1, [r1, #16]
   45982:	eb02 0242 	add.w	r2, r2, r2, lsl #1
   45986:	1a6f      	subs	r7, r5, r1
   45988:	eb02 72d2 	add.w	r2, r2, r2, lsr #31
   4598c:	443b      	add	r3, r7
   4598e:	1055      	asrs	r5, r2, #1
   45990:	429d      	cmp	r5, r3
   45992:	bf38      	it	cc
   45994:	461d      	movcc	r5, r3
   45996:	f41c 6f80 	tst.w	ip, #1024	; 0x400
   4599a:	d030      	beq.n	459fe <__ssputs_r+0xa0>
   4599c:	4629      	mov	r1, r5
   4599e:	f7fa f971 	bl	3fc84 <_malloc_r>
   459a2:	4606      	mov	r6, r0
   459a4:	b950      	cbnz	r0, 459bc <__ssputs_r+0x5e>
   459a6:	230c      	movs	r3, #12
   459a8:	f04f 30ff 	mov.w	r0, #4294967295
   459ac:	f8ca 3000 	str.w	r3, [sl]
   459b0:	89a3      	ldrh	r3, [r4, #12]
   459b2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   459b6:	81a3      	strh	r3, [r4, #12]
   459b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   459bc:	463a      	mov	r2, r7
   459be:	6921      	ldr	r1, [r4, #16]
   459c0:	f7ff fa46 	bl	44e50 <memcpy>
   459c4:	89a3      	ldrh	r3, [r4, #12]
   459c6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
   459ca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   459ce:	81a3      	strh	r3, [r4, #12]
   459d0:	6126      	str	r6, [r4, #16]
   459d2:	443e      	add	r6, r7
   459d4:	6165      	str	r5, [r4, #20]
   459d6:	1bed      	subs	r5, r5, r7
   459d8:	6026      	str	r6, [r4, #0]
   459da:	4646      	mov	r6, r8
   459dc:	60a5      	str	r5, [r4, #8]
   459de:	4546      	cmp	r6, r8
   459e0:	d900      	bls.n	459e4 <__ssputs_r+0x86>
   459e2:	4646      	mov	r6, r8
   459e4:	4632      	mov	r2, r6
   459e6:	4649      	mov	r1, r9
   459e8:	6820      	ldr	r0, [r4, #0]
   459ea:	f7ff fa51 	bl	44e90 <memmove>
   459ee:	68a3      	ldr	r3, [r4, #8]
   459f0:	2000      	movs	r0, #0
   459f2:	1b9b      	subs	r3, r3, r6
   459f4:	60a3      	str	r3, [r4, #8]
   459f6:	6823      	ldr	r3, [r4, #0]
   459f8:	441e      	add	r6, r3
   459fa:	6026      	str	r6, [r4, #0]
   459fc:	e7dc      	b.n	459b8 <__ssputs_r+0x5a>
   459fe:	462a      	mov	r2, r5
   45a00:	f7ff ff87 	bl	45912 <_realloc_r>
   45a04:	4606      	mov	r6, r0
   45a06:	2800      	cmp	r0, #0
   45a08:	d1e2      	bne.n	459d0 <__ssputs_r+0x72>
   45a0a:	6921      	ldr	r1, [r4, #16]
   45a0c:	4650      	mov	r0, sl
   45a0e:	f7fa f8eb 	bl	3fbe8 <_free_r>
   45a12:	e7c8      	b.n	459a6 <__ssputs_r+0x48>

00045a14 <_raise_r>:
   45a14:	291f      	cmp	r1, #31
   45a16:	b538      	push	{r3, r4, r5, lr}
   45a18:	4604      	mov	r4, r0
   45a1a:	460d      	mov	r5, r1
   45a1c:	d904      	bls.n	45a28 <_raise_r+0x14>
   45a1e:	2316      	movs	r3, #22
   45a20:	6003      	str	r3, [r0, #0]
   45a22:	f04f 30ff 	mov.w	r0, #4294967295
   45a26:	bd38      	pop	{r3, r4, r5, pc}
   45a28:	6c42      	ldr	r2, [r0, #68]	; 0x44
   45a2a:	b112      	cbz	r2, 45a32 <_raise_r+0x1e>
   45a2c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
   45a30:	b94b      	cbnz	r3, 45a46 <_raise_r+0x32>
   45a32:	4620      	mov	r0, r4
   45a34:	f000 f816 	bl	45a64 <_getpid_r>
   45a38:	462a      	mov	r2, r5
   45a3a:	4601      	mov	r1, r0
   45a3c:	4620      	mov	r0, r4
   45a3e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   45a42:	f7fa ba89 	b.w	3ff58 <_kill_r>
   45a46:	2b01      	cmp	r3, #1
   45a48:	d00a      	beq.n	45a60 <_raise_r+0x4c>
   45a4a:	1c59      	adds	r1, r3, #1
   45a4c:	d103      	bne.n	45a56 <_raise_r+0x42>
   45a4e:	2316      	movs	r3, #22
   45a50:	6003      	str	r3, [r0, #0]
   45a52:	2001      	movs	r0, #1
   45a54:	e7e7      	b.n	45a26 <_raise_r+0x12>
   45a56:	2400      	movs	r4, #0
   45a58:	4628      	mov	r0, r5
   45a5a:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
   45a5e:	4798      	blx	r3
   45a60:	2000      	movs	r0, #0
   45a62:	e7e0      	b.n	45a26 <_raise_r+0x12>

00045a64 <_getpid_r>:
   45a64:	f7fd b8ee 	b.w	42c44 <_getpid>

00045a68 <__sread>:
   45a68:	b510      	push	{r4, lr}
   45a6a:	460c      	mov	r4, r1
   45a6c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   45a70:	f7fa fae6 	bl	40040 <_read_r>
   45a74:	2800      	cmp	r0, #0
   45a76:	bfab      	itete	ge
   45a78:	6d63      	ldrge	r3, [r4, #84]	; 0x54
   45a7a:	89a3      	ldrhlt	r3, [r4, #12]
   45a7c:	181b      	addge	r3, r3, r0
   45a7e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
   45a82:	bfac      	ite	ge
   45a84:	6563      	strge	r3, [r4, #84]	; 0x54
   45a86:	81a3      	strhlt	r3, [r4, #12]
   45a88:	bd10      	pop	{r4, pc}

00045a8a <__swrite>:
   45a8a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   45a8e:	461f      	mov	r7, r3
   45a90:	898b      	ldrh	r3, [r1, #12]
   45a92:	4605      	mov	r5, r0
   45a94:	460c      	mov	r4, r1
   45a96:	05db      	lsls	r3, r3, #23
   45a98:	4616      	mov	r6, r2
   45a9a:	d505      	bpl.n	45aa8 <__swrite+0x1e>
   45a9c:	2302      	movs	r3, #2
   45a9e:	2200      	movs	r2, #0
   45aa0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   45aa4:	f7fa faae 	bl	40004 <_lseek_r>
   45aa8:	89a3      	ldrh	r3, [r4, #12]
   45aaa:	4632      	mov	r2, r6
   45aac:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   45ab0:	4628      	mov	r0, r5
   45ab2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
   45ab6:	81a3      	strh	r3, [r4, #12]
   45ab8:	463b      	mov	r3, r7
   45aba:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   45abe:	f7fa ba5d 	b.w	3ff7c <_write_r>

00045ac2 <__sseek>:
   45ac2:	b510      	push	{r4, lr}
   45ac4:	460c      	mov	r4, r1
   45ac6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   45aca:	f7fa fa9b 	bl	40004 <_lseek_r>
   45ace:	1c43      	adds	r3, r0, #1
   45ad0:	89a3      	ldrh	r3, [r4, #12]
   45ad2:	bf15      	itete	ne
   45ad4:	6560      	strne	r0, [r4, #84]	; 0x54
   45ad6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
   45ada:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
   45ade:	81a3      	strheq	r3, [r4, #12]
   45ae0:	bf18      	it	ne
   45ae2:	81a3      	strhne	r3, [r4, #12]
   45ae4:	bd10      	pop	{r4, pc}

00045ae6 <__sclose>:
   45ae6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   45aea:	f7fa ba59 	b.w	3ffa0 <_close_r>

00045aee <__ascii_mbtowc>:
   45aee:	b082      	sub	sp, #8
   45af0:	b901      	cbnz	r1, 45af4 <__ascii_mbtowc+0x6>
   45af2:	a901      	add	r1, sp, #4
   45af4:	b142      	cbz	r2, 45b08 <__ascii_mbtowc+0x1a>
   45af6:	b14b      	cbz	r3, 45b0c <__ascii_mbtowc+0x1e>
   45af8:	7813      	ldrb	r3, [r2, #0]
   45afa:	600b      	str	r3, [r1, #0]
   45afc:	7812      	ldrb	r2, [r2, #0]
   45afe:	1c10      	adds	r0, r2, #0
   45b00:	bf18      	it	ne
   45b02:	2001      	movne	r0, #1
   45b04:	b002      	add	sp, #8
   45b06:	4770      	bx	lr
   45b08:	4610      	mov	r0, r2
   45b0a:	e7fb      	b.n	45b04 <__ascii_mbtowc+0x16>
   45b0c:	f06f 0001 	mvn.w	r0, #1
   45b10:	e7f8      	b.n	45b04 <__ascii_mbtowc+0x16>

00045b12 <_malloc_usable_size_r>:
   45b12:	f851 3c04 	ldr.w	r3, [r1, #-4]
   45b16:	1f18      	subs	r0, r3, #4
   45b18:	2b00      	cmp	r3, #0
   45b1a:	bfbc      	itt	lt
   45b1c:	580b      	ldrlt	r3, [r1, r0]
   45b1e:	18c0      	addlt	r0, r0, r3
   45b20:	4770      	bx	lr

00045b22 <__ascii_wctomb>:
   45b22:	b149      	cbz	r1, 45b38 <__ascii_wctomb+0x16>
   45b24:	2aff      	cmp	r2, #255	; 0xff
   45b26:	bf8d      	iteet	hi
   45b28:	238a      	movhi	r3, #138	; 0x8a
   45b2a:	700a      	strbls	r2, [r1, #0]
   45b2c:	2001      	movls	r0, #1
   45b2e:	6003      	strhi	r3, [r0, #0]
   45b30:	bf88      	it	hi
   45b32:	f04f 30ff 	movhi.w	r0, #4294967295
   45b36:	4770      	bx	lr
   45b38:	4608      	mov	r0, r1
   45b3a:	4770      	bx	lr
