
zephyr.elf:     file format elf32-littlearm


Disassembly of section text:

00000000 <_vector_table>:

	return fd_entry->obj;
}

int z_reserve_fd(void)
{
   0:	20000a90 	.word	0x20000a90
	if (z_syscall_trap()) {
		return (int) z_arch_syscall_invoke2(*(u32_t *)&mutex, *(u32_t *)&timeout, K_SYSCALL_K_MUTEX_LOCK);
	}
#endif
	compiler_barrier();
	return z_impl_k_mutex_lock(mutex, timeout);
   4:	000012d9 	.word	0x000012d9
   8:	00003c29 	.word	0x00003c29
   c:	000010f9 	.word	0x000010f9
		if (fdtable[fd].obj == NULL) {
  10:	000010f9 	.word	0x000010f9
  14:	000010f9 	.word	0x000010f9
	for (fd = 0; fd < ARRAY_SIZE(fdtable); fd++) {
  18:	000010f9 	.word	0x000010f9
	if (z_syscall_trap()) {
		return (int *) z_arch_syscall_invoke0(K_SYSCALL_Z_ERRNO);
	}
#endif
	compiler_barrier();
	return z_impl_z_errno();
  1c:	000010f9 	.word	0x000010f9
	errno = ENFILE;
  20:	000010f9 	.word	0x000010f9
	return -1;
  24:	000010f9 	.word	0x000010f9
		z_arch_syscall_invoke1(*(u32_t *)&mutex, K_SYSCALL_K_MUTEX_UNLOCK);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_mutex_unlock(mutex);
  28:	000010f9 	.word	0x000010f9
  2c:	000010c1 	.word	0x000010c1
	}

	k_mutex_unlock(&fdtable_lock);

	return fd;
}
  30:	000010f9 	.word	0x000010f9
		fdtable[fd].obj = FD_OBJ_RESERVED;
  34:	000010f9 	.word	0x000010f9
  38:	0000106d 	.word	0x0000106d
  3c:	00003b2b 	.word	0x00003b2b

00000040 <_irq_vector_table>:
  40:	00001125 00001125 00001125 00001125     %...%...%...%...
  50:	00001125 00001125 00001125 00001125     %...%...%...%...
  60:	00001125 00001125 00001125 00001125     %...%...%...%...
  70:	00001125 00001125 00001125 00001125     %...%...%...%...
  80:	00001125 00001125 00001125 00001125     %...%...%...%...
  90:	00001125 00001125 00001125 00001125     %...%...%...%...
  a0:	00001125 00001125 00001125 00001125     %...%...%...%...
  b0:	00001125 00001125 00001125 00001125     %...%...%...%...
  c0:	00001125 00001125 00001125 00001125     %...%...%...%...
  d0:	00001125 00001125 00001125 00001125     %...%...%...%...
  e0:	00001125 00001125 00001125 00001125     %...%...%...%...
  f0:	00001125 00001125 00001125 00001125     %...%...%...%...
 100:	00001125 00001125 00001125 00001125     %...%...%...%...
 110:	00001125 00001125 00001125 00001125     %...%...%...%...
 120:	00001125 00001125 00001125 00001125     %...%...%...%...
 130:	00001125 00001125 00001125 00001125     %...%...%...%...
 140:	00001125                                %...

00000144 <_vector_end>:
	...

00000200 <m_firmware_info>:
 200:	281ee6de 8fcebb4c 00005b01 00008000     ...(L....[......
 210:	00000001 00000000 200013d0 00001a3d     ........... =...

Disassembly of section _TEXT_SECTION_NAME_2:

00000220 <__aeabi_ldivmod>:
     220:	b97b      	cbnz	r3, 242 <__aeabi_ldivmod+0x22>
     222:	b972      	cbnz	r2, 242 <__aeabi_ldivmod+0x22>
     224:	2900      	cmp	r1, #0
     226:	bfbe      	ittt	lt
     228:	2000      	movlt	r0, #0
     22a:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
     22e:	e006      	blt.n	23e <__aeabi_ldivmod+0x1e>
     230:	bf08      	it	eq
     232:	2800      	cmpeq	r0, #0
     234:	bf1c      	itt	ne
     236:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
     23a:	f04f 30ff 	movne.w	r0, #4294967295
     23e:	f000 b9af 	b.w	5a0 <__aeabi_idiv0>
     242:	f1ad 0c08 	sub.w	ip, sp, #8
     246:	e96d ce04 	strd	ip, lr, [sp, #-16]!
     24a:	2900      	cmp	r1, #0
     24c:	db09      	blt.n	262 <__aeabi_ldivmod+0x42>
     24e:	2b00      	cmp	r3, #0
     250:	db1a      	blt.n	288 <__aeabi_ldivmod+0x68>
     252:	f000 f835 	bl	2c0 <__udivmoddi4>
     256:	f8dd e004 	ldr.w	lr, [sp, #4]
     25a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
     25e:	b004      	add	sp, #16
     260:	4770      	bx	lr
     262:	4240      	negs	r0, r0
     264:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
     268:	2b00      	cmp	r3, #0
     26a:	db1b      	blt.n	2a4 <__aeabi_ldivmod+0x84>
     26c:	f000 f828 	bl	2c0 <__udivmoddi4>
     270:	f8dd e004 	ldr.w	lr, [sp, #4]
     274:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
     278:	b004      	add	sp, #16
     27a:	4240      	negs	r0, r0
     27c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
     280:	4252      	negs	r2, r2
     282:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
     286:	4770      	bx	lr
     288:	4252      	negs	r2, r2
     28a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
     28e:	f000 f817 	bl	2c0 <__udivmoddi4>
     292:	f8dd e004 	ldr.w	lr, [sp, #4]
     296:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
     29a:	b004      	add	sp, #16
     29c:	4240      	negs	r0, r0
     29e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
     2a2:	4770      	bx	lr
     2a4:	4252      	negs	r2, r2
     2a6:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
     2aa:	f000 f809 	bl	2c0 <__udivmoddi4>
     2ae:	f8dd e004 	ldr.w	lr, [sp, #4]
     2b2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
     2b6:	b004      	add	sp, #16
     2b8:	4252      	negs	r2, r2
     2ba:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
     2be:	4770      	bx	lr

000002c0 <__udivmoddi4>:
     2c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
     2c4:	468c      	mov	ip, r1
     2c6:	9d08      	ldr	r5, [sp, #32]
     2c8:	4604      	mov	r4, r0
     2ca:	468a      	mov	sl, r1
     2cc:	2b00      	cmp	r3, #0
     2ce:	d14a      	bne.n	366 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x66>
     2d0:	428a      	cmp	r2, r1
     2d2:	4617      	mov	r7, r2
     2d4:	d962      	bls.n	39c <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x9c>
     2d6:	fab2 f682 	clz	r6, r2
     2da:	b14e      	cbz	r6, 2f0 <__udivmoddi4+0x30>
     2dc:	f1c6 0e20 	rsb	lr, r6, #32
     2e0:	fa01 f306 	lsl.w	r3, r1, r6
     2e4:	40b7      	lsls	r7, r6
     2e6:	40b4      	lsls	r4, r6
     2e8:	fa20 fe0e 	lsr.w	lr, r0, lr
     2ec:	ea4e 0a03 	orr.w	sl, lr, r3
     2f0:	ea4f 4817 	mov.w	r8, r7, lsr #16
     2f4:	0c23      	lsrs	r3, r4, #16
     2f6:	fa1f f987 	uxth.w	r9, r7
     2fa:	fbba fef8 	udiv	lr, sl, r8
     2fe:	fb08 aa1e 	mls	sl, r8, lr, sl
     302:	fb0e f209 	mul.w	r2, lr, r9
     306:	ea43 430a 	orr.w	r3, r3, sl, lsl #16
     30a:	429a      	cmp	r2, r3
     30c:	d90b      	bls.n	326 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x26>
     30e:	18fb      	adds	r3, r7, r3
     310:	f10e 31ff 	add.w	r1, lr, #4294967295
     314:	bf2c      	ite	cs
     316:	2001      	movcs	r0, #1
     318:	2000      	movcc	r0, #0
     31a:	429a      	cmp	r2, r3
     31c:	d902      	bls.n	324 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x24>
     31e:	2800      	cmp	r0, #0
     320:	f000 812a 	beq.w	578 <CONFIG_FLASH_SIZE+0x178>
     324:	468e      	mov	lr, r1
     326:	1a9a      	subs	r2, r3, r2
     328:	b2a3      	uxth	r3, r4
     32a:	fbb2 f0f8 	udiv	r0, r2, r8
     32e:	fb08 2210 	mls	r2, r8, r0, r2
     332:	fb00 f909 	mul.w	r9, r0, r9
     336:	ea43 4402 	orr.w	r4, r3, r2, lsl #16
     33a:	45a1      	cmp	r9, r4
     33c:	d907      	bls.n	34e <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x4e>
     33e:	193c      	adds	r4, r7, r4
     340:	f100 33ff 	add.w	r3, r0, #4294967295
     344:	d202      	bcs.n	34c <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x4c>
     346:	45a1      	cmp	r9, r4
     348:	f200 8110 	bhi.w	56c <CONFIG_FLASH_SIZE+0x16c>
     34c:	4618      	mov	r0, r3
     34e:	eba4 0409 	sub.w	r4, r4, r9
     352:	ea40 400e 	orr.w	r0, r0, lr, lsl #16
     356:	2100      	movs	r1, #0
     358:	b11d      	cbz	r5, 362 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x62>
     35a:	40f4      	lsrs	r4, r6
     35c:	2300      	movs	r3, #0
     35e:	e9c5 4300 	strd	r4, r3, [r5]
     362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     366:	428b      	cmp	r3, r1
     368:	d908      	bls.n	37c <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x7c>
     36a:	2d00      	cmp	r5, #0
     36c:	f000 80f2 	beq.w	554 <CONFIG_FLASH_SIZE+0x154>
     370:	2100      	movs	r1, #0
     372:	e9c5 0c00 	strd	r0, ip, [r5]
     376:	4608      	mov	r0, r1
     378:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     37c:	fab3 f183 	clz	r1, r3
     380:	2900      	cmp	r1, #0
     382:	d14e      	bne.n	422 <CONFIG_FLASH_SIZE+0x22>
     384:	4563      	cmp	r3, ip
     386:	f0c0 80e8 	bcc.w	55a <CONFIG_FLASH_SIZE+0x15a>
     38a:	4282      	cmp	r2, r0
     38c:	f240 80e5 	bls.w	55a <CONFIG_FLASH_SIZE+0x15a>
     390:	4608      	mov	r0, r1
     392:	2d00      	cmp	r5, #0
     394:	d0e5      	beq.n	362 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x62>
     396:	e9c5 4a00 	strd	r4, sl, [r5]
     39a:	e7e2      	b.n	362 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x62>
     39c:	b902      	cbnz	r2, 3a0 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0xa0>
     39e:	deff      	udf	#255	; 0xff
     3a0:	fab2 f682 	clz	r6, r2
     3a4:	2e00      	cmp	r6, #0
     3a6:	f040 8099 	bne.w	4dc <CONFIG_FLASH_SIZE+0xdc>
     3aa:	1a8b      	subs	r3, r1, r2
     3ac:	ea4f 4e12 	mov.w	lr, r2, lsr #16
     3b0:	fa1f f882 	uxth.w	r8, r2
     3b4:	2101      	movs	r1, #1
     3b6:	ea4f 4c14 	mov.w	ip, r4, lsr #16
     3ba:	fbb3 f2fe 	udiv	r2, r3, lr
     3be:	fb0e 3012 	mls	r0, lr, r2, r3
     3c2:	fb08 f902 	mul.w	r9, r8, r2
     3c6:	ea4c 4c00 	orr.w	ip, ip, r0, lsl #16
     3ca:	45e1      	cmp	r9, ip
     3cc:	d908      	bls.n	3e0 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0xe0>
     3ce:	eb17 0c0c 	adds.w	ip, r7, ip
     3d2:	f102 33ff 	add.w	r3, r2, #4294967295
     3d6:	d202      	bcs.n	3de <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0xde>
     3d8:	45e1      	cmp	r9, ip
     3da:	f200 80ca 	bhi.w	572 <CONFIG_FLASH_SIZE+0x172>
     3de:	461a      	mov	r2, r3
     3e0:	ebac 0c09 	sub.w	ip, ip, r9
     3e4:	b2a3      	uxth	r3, r4
     3e6:	fbbc f0fe 	udiv	r0, ip, lr
     3ea:	fb0e cc10 	mls	ip, lr, r0, ip
     3ee:	fb08 f800 	mul.w	r8, r8, r0
     3f2:	ea43 440c 	orr.w	r4, r3, ip, lsl #16
     3f6:	45a0      	cmp	r8, r4
     3f8:	d90e      	bls.n	418 <CONFIG_FLASH_SIZE+0x18>
     3fa:	193c      	adds	r4, r7, r4
     3fc:	f100 33ff 	add.w	r3, r0, #4294967295
     400:	bf2c      	ite	cs
     402:	f04f 0c01 	movcs.w	ip, #1
     406:	f04f 0c00 	movcc.w	ip, #0
     40a:	45a0      	cmp	r8, r4
     40c:	d903      	bls.n	416 <CONFIG_FLASH_SIZE+0x16>
     40e:	f1bc 0f00 	cmp.w	ip, #0
     412:	f000 80a8 	beq.w	566 <CONFIG_FLASH_SIZE+0x166>
     416:	4618      	mov	r0, r3
     418:	eba4 0408 	sub.w	r4, r4, r8
     41c:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
     420:	e79a      	b.n	358 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x58>
     422:	f1c1 0420 	rsb	r4, r1, #32
     426:	408b      	lsls	r3, r1
     428:	fa02 fe01 	lsl.w	lr, r2, r1
     42c:	fa0c f601 	lsl.w	r6, ip, r1
     430:	40e2      	lsrs	r2, r4
     432:	fa20 f704 	lsr.w	r7, r0, r4
     436:	fa2c fc04 	lsr.w	ip, ip, r4
     43a:	fa00 f801 	lsl.w	r8, r0, r1
     43e:	4313      	orrs	r3, r2
     440:	433e      	orrs	r6, r7
     442:	0c1f      	lsrs	r7, r3, #16
     444:	0c32      	lsrs	r2, r6, #16
     446:	fa1f f983 	uxth.w	r9, r3
     44a:	fbbc f0f7 	udiv	r0, ip, r7
     44e:	fb07 cc10 	mls	ip, r7, r0, ip
     452:	fb00 fa09 	mul.w	sl, r0, r9
     456:	ea42 4c0c 	orr.w	ip, r2, ip, lsl #16
     45a:	45e2      	cmp	sl, ip
     45c:	d908      	bls.n	470 <CONFIG_FLASH_SIZE+0x70>
     45e:	eb13 0c0c 	adds.w	ip, r3, ip
     462:	f100 32ff 	add.w	r2, r0, #4294967295
     466:	d202      	bcs.n	46e <CONFIG_FLASH_SIZE+0x6e>
     468:	45e2      	cmp	sl, ip
     46a:	f200 8089 	bhi.w	580 <CONFIG_FLASH_SIZE+0x180>
     46e:	4610      	mov	r0, r2
     470:	ebac 0c0a 	sub.w	ip, ip, sl
     474:	b2b6      	uxth	r6, r6
     476:	fbbc faf7 	udiv	sl, ip, r7
     47a:	fb07 cc1a 	mls	ip, r7, sl, ip
     47e:	fb0a f909 	mul.w	r9, sl, r9
     482:	ea46 420c 	orr.w	r2, r6, ip, lsl #16
     486:	4591      	cmp	r9, r2
     488:	d906      	bls.n	498 <CONFIG_FLASH_SIZE+0x98>
     48a:	189a      	adds	r2, r3, r2
     48c:	f10a 36ff 	add.w	r6, sl, #4294967295
     490:	d201      	bcs.n	496 <CONFIG_FLASH_SIZE+0x96>
     492:	4591      	cmp	r9, r2
     494:	d87a      	bhi.n	58c <CONFIG_FLASH_SIZE+0x18c>
     496:	46b2      	mov	sl, r6
     498:	ea4a 4000 	orr.w	r0, sl, r0, lsl #16
     49c:	eba2 0209 	sub.w	r2, r2, r9
     4a0:	fba0 670e 	umull	r6, r7, r0, lr
     4a4:	42ba      	cmp	r2, r7
     4a6:	46b4      	mov	ip, r6
     4a8:	46b9      	mov	r9, r7
     4aa:	d302      	bcc.n	4b2 <CONFIG_FLASH_SIZE+0xb2>
     4ac:	d107      	bne.n	4be <CONFIG_FLASH_SIZE+0xbe>
     4ae:	45b0      	cmp	r8, r6
     4b0:	d205      	bcs.n	4be <CONFIG_FLASH_SIZE+0xbe>
     4b2:	ebb6 0c0e 	subs.w	ip, r6, lr
     4b6:	eb67 0303 	sbc.w	r3, r7, r3
     4ba:	3801      	subs	r0, #1
     4bc:	4699      	mov	r9, r3
     4be:	2d00      	cmp	r5, #0
     4c0:	d06b      	beq.n	59a <CONFIG_FLASH_SIZE+0x19a>
     4c2:	ebb8 030c 	subs.w	r3, r8, ip
     4c6:	eb62 0209 	sbc.w	r2, r2, r9
     4ca:	fa02 f404 	lsl.w	r4, r2, r4
     4ce:	40cb      	lsrs	r3, r1
     4d0:	40ca      	lsrs	r2, r1
     4d2:	2100      	movs	r1, #0
     4d4:	431c      	orrs	r4, r3
     4d6:	e9c5 4200 	strd	r4, r2, [r5]
     4da:	e742      	b.n	362 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x62>
     4dc:	40b7      	lsls	r7, r6
     4de:	f1c6 0220 	rsb	r2, r6, #32
     4e2:	fa01 f306 	lsl.w	r3, r1, r6
     4e6:	40b4      	lsls	r4, r6
     4e8:	fa21 fc02 	lsr.w	ip, r1, r2
     4ec:	ea4f 4e17 	mov.w	lr, r7, lsr #16
     4f0:	fa20 f202 	lsr.w	r2, r0, r2
     4f4:	fa1f f887 	uxth.w	r8, r7
     4f8:	fbbc f1fe 	udiv	r1, ip, lr
     4fc:	431a      	orrs	r2, r3
     4fe:	fb0e cc11 	mls	ip, lr, r1, ip
     502:	fb01 f008 	mul.w	r0, r1, r8
     506:	0c13      	lsrs	r3, r2, #16
     508:	ea43 4c0c 	orr.w	ip, r3, ip, lsl #16
     50c:	4560      	cmp	r0, ip
     50e:	d907      	bls.n	520 <CONFIG_FLASH_SIZE+0x120>
     510:	eb17 0c0c 	adds.w	ip, r7, ip
     514:	f101 33ff 	add.w	r3, r1, #4294967295
     518:	d201      	bcs.n	51e <CONFIG_FLASH_SIZE+0x11e>
     51a:	4560      	cmp	r0, ip
     51c:	d833      	bhi.n	586 <CONFIG_FLASH_SIZE+0x186>
     51e:	4619      	mov	r1, r3
     520:	ebac 0c00 	sub.w	ip, ip, r0
     524:	b292      	uxth	r2, r2
     526:	fbbc f0fe 	udiv	r0, ip, lr
     52a:	fb0e cc10 	mls	ip, lr, r0, ip
     52e:	fb00 f308 	mul.w	r3, r0, r8
     532:	ea42 4c0c 	orr.w	ip, r2, ip, lsl #16
     536:	4563      	cmp	r3, ip
     538:	d907      	bls.n	54a <CONFIG_FLASH_SIZE+0x14a>
     53a:	eb17 0c0c 	adds.w	ip, r7, ip
     53e:	f100 32ff 	add.w	r2, r0, #4294967295
     542:	d201      	bcs.n	548 <CONFIG_FLASH_SIZE+0x148>
     544:	4563      	cmp	r3, ip
     546:	d825      	bhi.n	594 <CONFIG_FLASH_SIZE+0x194>
     548:	4610      	mov	r0, r2
     54a:	ebac 0303 	sub.w	r3, ip, r3
     54e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
     552:	e730      	b.n	3b6 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0xb6>
     554:	4629      	mov	r1, r5
     556:	4628      	mov	r0, r5
     558:	e703      	b.n	362 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x62>
     55a:	1a84      	subs	r4, r0, r2
     55c:	eb6c 0303 	sbc.w	r3, ip, r3
     560:	2001      	movs	r0, #1
     562:	469a      	mov	sl, r3
     564:	e715      	b.n	392 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x92>
     566:	3802      	subs	r0, #2
     568:	443c      	add	r4, r7
     56a:	e755      	b.n	418 <CONFIG_FLASH_SIZE+0x18>
     56c:	3802      	subs	r0, #2
     56e:	443c      	add	r4, r7
     570:	e6ed      	b.n	34e <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x4e>
     572:	3a02      	subs	r2, #2
     574:	44bc      	add	ip, r7
     576:	e733      	b.n	3e0 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0xe0>
     578:	f1ae 0e02 	sub.w	lr, lr, #2
     57c:	443b      	add	r3, r7
     57e:	e6d2      	b.n	326 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x26>
     580:	3802      	subs	r0, #2
     582:	449c      	add	ip, r3
     584:	e774      	b.n	470 <CONFIG_FLASH_SIZE+0x70>
     586:	3902      	subs	r1, #2
     588:	44bc      	add	ip, r7
     58a:	e7c9      	b.n	520 <CONFIG_FLASH_SIZE+0x120>
     58c:	f1aa 0a02 	sub.w	sl, sl, #2
     590:	441a      	add	r2, r3
     592:	e781      	b.n	498 <CONFIG_FLASH_SIZE+0x98>
     594:	3802      	subs	r0, #2
     596:	44bc      	add	ip, r7
     598:	e7d7      	b.n	54a <CONFIG_FLASH_SIZE+0x14a>
     59a:	4629      	mov	r1, r5
     59c:	e6e1      	b.n	362 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x62>
     59e:	bf00      	nop

000005a0 <__aeabi_idiv0>:
     5a0:	4770      	bx	lr
     5a2:	bf00      	nop

000005a4 <__gnu_cmse_nonsecure_call>:
     5a4:	e92d 4fe0 	stmdb	sp!, {r5, r6, r7, r8, r9, sl, fp, lr}
     5a8:	4627      	mov	r7, r4
     5aa:	46a0      	mov	r8, r4
     5ac:	46a1      	mov	r9, r4
     5ae:	46a2      	mov	sl, r4
     5b0:	46a3      	mov	fp, r4
     5b2:	46a4      	mov	ip, r4
     5b4:	ed2d 8b10 	vpush	{d8-d15}
     5b8:	f04f 0500 	mov.w	r5, #0
     5bc:	ec45 5b18 	vmov	d8, r5, r5
     5c0:	ec45 5a19 	vmov	s18, s19, r5, r5
     5c4:	ec45 5a1a 	vmov	s20, s21, r5, r5
     5c8:	ec45 5a1b 	vmov	s22, s23, r5, r5
     5cc:	ec45 5a1c 	vmov	s24, s25, r5, r5
     5d0:	ec45 5a1d 	vmov	s26, s27, r5, r5
     5d4:	ec45 5a1e 	vmov	s28, s29, r5, r5
     5d8:	ec45 5a1f 	vmov	s30, s31, r5, r5
     5dc:	eef1 5a10 	vmrs	r5, fpscr
     5e0:	f64f 7660 	movw	r6, #65376	; 0xff60
     5e4:	f6c0 76ff 	movt	r6, #4095	; 0xfff
     5e8:	4035      	ands	r5, r6
     5ea:	eee1 5a10 	vmsr	fpscr, r5
     5ee:	f384 8800 	msr	CPSR_f, r4
     5f2:	4625      	mov	r5, r4
     5f4:	4626      	mov	r6, r4
     5f6:	47a4      	blxns	r4
     5f8:	ecbd 8b10 	vpop	{d8-d15}
     5fc:	e8bd 8fe0 	ldmia.w	sp!, {r5, r6, r7, r8, r9, sl, fp, pc}

00000600 <tz_nonsecure_state_setup>:
}
#endif /* CONFIG_ARMV8_M_MAINLINE */

void tz_nonsecure_state_setup(const tz_nonsecure_setup_conf_t *p_ns_conf)
{
	configure_nonsecure_vtor_offset(p_ns_conf->vtor_ns);
     600:	6882      	ldr	r2, [r0, #8]
	SCB_NS->VTOR = vtor_ns;
     602:	4b0c      	ldr	r3, [pc, #48]	; (634 <tz_nonsecure_state_setup+0x34>)
     604:	609a      	str	r2, [r3, #8]
  \details Assigns the given value to the non-secure Main Stack Pointer (MSP) when in secure state.
  \param [in]    topOfMainStack  Main Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __TZ_set_MSP_NS(uint32_t topOfMainStack)
{
  __ASM volatile ("MSR msp_ns, %0" : : "r" (topOfMainStack) : );
     606:	6803      	ldr	r3, [r0, #0]
     608:	f383 8888 	msr	MSP_NS, r3
  __ASM volatile ("MSR psp_ns, %0" : : "r" (topOfProcStack) : );
     60c:	6843      	ldr	r3, [r0, #4]
     60e:	f383 8889 	msr	PSP_NS, r3
	configure_nonsecure_psp(p_ns_conf->psp_ns);
	/* Select which stack-pointer to use (MSP or PSP) and
	 * the privilege level for thread mode.
	 */
	configure_nonsecure_control(p_ns_conf->control_ns.spsel,
		p_ns_conf->control_ns.npriv);
     612:	7b02      	ldrb	r2, [r0, #12]
     614:	f002 0101 	and.w	r1, r2, #1
  __ASM volatile ("MRS %0, control_ns" : "=r" (result) );
     618:	f3ef 8394 	mrs	r3, CONTROL_NS
	control_ns &= ~(CONTROL_SPSEL_Msk | CONTROL_nPRIV_Msk);
     61c:	f023 0303 	bic.w	r3, r3, #3
	if (spsel_ns) {
     620:	0792      	lsls	r2, r2, #30
		control_ns |= CONTROL_SPSEL_Msk;
     622:	bf48      	it	mi
     624:	f043 0302 	orrmi.w	r3, r3, #2
	if (npriv_ns) {
     628:	b109      	cbz	r1, 62e <tz_nonsecure_state_setup+0x2e>
		control_ns |= CONTROL_nPRIV_Msk;
     62a:	f043 0301 	orr.w	r3, r3, #1
  __ASM volatile ("MSR control_ns, %0" : : "r" (control) : "memory");
     62e:	f383 8894 	msr	CONTROL_NS, r3
}
     632:	4770      	bx	lr
     634:	e002ed00 	.word	0xe002ed00

00000638 <tz_nbanked_exception_target_state_set>:

void tz_nbanked_exception_target_state_set(int secure_state)
{
	u32_t aircr_payload = SCB->AIRCR & (~(SCB_AIRCR_VECTKEY_Msk));
     638:	4a08      	ldr	r2, [pc, #32]	; (65c <tz_nbanked_exception_target_state_set+0x24>)
     63a:	68d3      	ldr	r3, [r2, #12]
	if (secure_state) {
     63c:	b148      	cbz	r0, 652 <tz_nbanked_exception_target_state_set+0x1a>
		aircr_payload &= ~(SCB_AIRCR_BFHFNMINS_Msk);
     63e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
     642:	041b      	lsls	r3, r3, #16
     644:	0c1b      	lsrs	r3, r3, #16
	} else {
		aircr_payload |= SCB_AIRCR_BFHFNMINS_Msk;
	}
	SCB->AIRCR = ((AIRCR_VECT_KEY_PERMIT_WRITE << SCB_AIRCR_VECTKEY_Pos)
			& SCB_AIRCR_VECTKEY_Msk)
		| aircr_payload;
     646:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
     64a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
	SCB->AIRCR = ((AIRCR_VECT_KEY_PERMIT_WRITE << SCB_AIRCR_VECTKEY_Pos)
     64e:	60d3      	str	r3, [r2, #12]
}
     650:	4770      	bx	lr
	u32_t aircr_payload = SCB->AIRCR & (~(SCB_AIRCR_VECTKEY_Msk));
     652:	b29b      	uxth	r3, r3
		aircr_payload |= SCB_AIRCR_BFHFNMINS_Msk;
     654:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
     658:	e7f5      	b.n	646 <tz_nbanked_exception_target_state_set+0xe>
     65a:	bf00      	nop
     65c:	e000ed00 	.word	0xe000ed00

00000660 <tz_nonsecure_exception_prio_config>:

void tz_nonsecure_exception_prio_config(int secure_boost)
{
	u32_t aircr_payload = SCB->AIRCR & (~(SCB_AIRCR_VECTKEY_Msk));
     660:	4a08      	ldr	r2, [pc, #32]	; (684 <tz_nonsecure_exception_prio_config+0x24>)
     662:	68d3      	ldr	r3, [r2, #12]
	if (secure_boost) {
     664:	b140      	cbz	r0, 678 <tz_nonsecure_exception_prio_config+0x18>
	u32_t aircr_payload = SCB->AIRCR & (~(SCB_AIRCR_VECTKEY_Msk));
     666:	b29b      	uxth	r3, r3
		aircr_payload |= SCB_AIRCR_PRIS_Msk;
     668:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
	} else {
		aircr_payload &= ~(SCB_AIRCR_PRIS_Msk);
	}
	SCB->AIRCR = ((AIRCR_VECT_KEY_PERMIT_WRITE << SCB_AIRCR_VECTKEY_Pos)
			& SCB_AIRCR_VECTKEY_Msk)
		| aircr_payload;
     66c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
     670:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
	SCB->AIRCR = ((AIRCR_VECT_KEY_PERMIT_WRITE << SCB_AIRCR_VECTKEY_Pos)
     674:	60d3      	str	r3, [r2, #12]
}
     676:	4770      	bx	lr
		aircr_payload &= ~(SCB_AIRCR_PRIS_Msk);
     678:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
     67c:	041b      	lsls	r3, r3, #16
     67e:	0c1b      	lsrs	r3, r3, #16
     680:	e7f4      	b.n	66c <tz_nonsecure_exception_prio_config+0xc>
     682:	bf00      	nop
     684:	e000ed00 	.word	0xe000ed00

00000688 <tz_nonsecure_system_reset_req_block>:

void tz_nonsecure_system_reset_req_block(int block)
{
	u32_t aircr_payload = SCB->AIRCR & (~(SCB_AIRCR_VECTKEY_Msk));
     688:	4a08      	ldr	r2, [pc, #32]	; (6ac <tz_nonsecure_system_reset_req_block+0x24>)
     68a:	68d3      	ldr	r3, [r2, #12]
	if (block) {
     68c:	b140      	cbz	r0, 6a0 <tz_nonsecure_system_reset_req_block+0x18>
	u32_t aircr_payload = SCB->AIRCR & (~(SCB_AIRCR_VECTKEY_Msk));
     68e:	b29b      	uxth	r3, r3
		aircr_payload |= SCB_AIRCR_SYSRESETREQS_Msk;
     690:	f043 0308 	orr.w	r3, r3, #8
	} else {
		aircr_payload &= ~(SCB_AIRCR_SYSRESETREQS_Msk);
	}
	SCB->AIRCR = ((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)
			& SCB_AIRCR_VECTKEY_Msk)
		| aircr_payload;
     694:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
     698:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
	SCB->AIRCR = ((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)
     69c:	60d3      	str	r3, [r2, #12]
}
     69e:	4770      	bx	lr
		aircr_payload &= ~(SCB_AIRCR_SYSRESETREQS_Msk);
     6a0:	f023 0308 	bic.w	r3, r3, #8
     6a4:	041b      	lsls	r3, r3, #16
     6a6:	0c1b      	lsrs	r3, r3, #16
     6a8:	e7f4      	b.n	694 <tz_nonsecure_system_reset_req_block+0xc>
     6aa:	bf00      	nop
     6ac:	e000ed00 	.word	0xe000ed00

000006b0 <tz_nonsecure_fpu_access_enable>:

#if defined(CONFIG_ARMV7_M_ARMV8_M_FP)
void tz_nonsecure_fpu_access_enable(void)
{
	SCB->NSACR |=
     6b0:	4a03      	ldr	r2, [pc, #12]	; (6c0 <tz_nonsecure_fpu_access_enable+0x10>)
     6b2:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
     6b6:	f443 6340 	orr.w	r3, r3, #3072	; 0xc00
     6ba:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
		(1UL << SCB_NSACR_CP10_Pos) | (1UL << SCB_NSACR_CP11_Pos);
}
     6be:	4770      	bx	lr
     6c0:	e000ed00 	.word	0xe000ed00

000006c4 <tz_sau_configure>:
#endif /* CONFIG_ARMV7_M_ARMV8_M_FP */

void tz_sau_configure(int enable, int allns)
{
     6c4:	4b08      	ldr	r3, [pc, #32]	; (6e8 <tz_sau_configure+0x24>)
  \brief   Enable SAU
  \details Enables the Security Attribution Unit (SAU).
 */
__STATIC_INLINE void TZ_SAU_Enable(void)
{
    SAU->CTRL |=  (SAU_CTRL_ENABLE_Msk);
     6c6:	681a      	ldr	r2, [r3, #0]
	if (enable) {
     6c8:	b118      	cbz	r0, 6d2 <tz_sau_configure+0xe>
     6ca:	f042 0201 	orr.w	r2, r2, #1
	} else {
		TZ_SAU_Disable();
		if (allns) {
			SAU->CTRL |= SAU_CTRL_ALLNS_Msk;
		} else {
			SAU->CTRL &= ~(SAU_CTRL_ALLNS_Msk);
     6ce:	601a      	str	r2, [r3, #0]
		}
	}
}
     6d0:	4770      	bx	lr
  \brief   Disable SAU
  \details Disables the Security Attribution Unit (SAU).
 */
__STATIC_INLINE void TZ_SAU_Disable(void)
{
    SAU->CTRL &= ~(SAU_CTRL_ENABLE_Msk);
     6d2:	f022 0201 	bic.w	r2, r2, #1
     6d6:	601a      	str	r2, [r3, #0]
			SAU->CTRL |= SAU_CTRL_ALLNS_Msk;
     6d8:	681a      	ldr	r2, [r3, #0]
		if (allns) {
     6da:	b111      	cbz	r1, 6e2 <tz_sau_configure+0x1e>
			SAU->CTRL |= SAU_CTRL_ALLNS_Msk;
     6dc:	f042 0202 	orr.w	r2, r2, #2
     6e0:	e7f5      	b.n	6ce <tz_sau_configure+0xa>
			SAU->CTRL &= ~(SAU_CTRL_ALLNS_Msk);
     6e2:	f022 0202 	bic.w	r2, r2, #2
     6e6:	e7f2      	b.n	6ce <tz_sau_configure+0xa>
     6e8:	e000edd0 	.word	0xe000edd0

000006ec <char_out>:

static int char_out(int c, void *ctx_p)
{
	struct out_context *ctx = ctx_p;

	ctx->count++;
     6ec:	680b      	ldr	r3, [r1, #0]
     6ee:	3301      	adds	r3, #1
     6f0:	600b      	str	r3, [r1, #0]
	return _char_out(c);
     6f2:	4b01      	ldr	r3, [pc, #4]	; (6f8 <char_out+0xc>)
     6f4:	681b      	ldr	r3, [r3, #0]
     6f6:	4718      	bx	r3
     6f8:	200013d4 	.word	0x200013d4

000006fc <_printk_dec_ulong>:
 * @return N/A
 */
static void _printk_dec_ulong(out_func_t out, void *ctx,
			      const unsigned long num, enum pad_type padding,
			      int min_width)
{
     6fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     700:	b085      	sub	sp, #20
     702:	9c0e      	ldr	r4, [sp, #56]	; 0x38
     704:	469b      	mov	fp, r3
     706:	2c01      	cmp	r4, #1
     708:	bfb8      	it	lt
     70a:	2401      	movlt	r4, #1
     70c:	2b01      	cmp	r3, #1
     70e:	bf0c      	ite	eq
     710:	2330      	moveq	r3, #48	; 0x30
     712:	2320      	movne	r3, #32
     714:	4616      	mov	r6, r2
     716:	4682      	mov	sl, r0
     718:	4688      	mov	r8, r1
     71a:	2501      	movs	r5, #1
     71c:	270a      	movs	r7, #10
     71e:	2200      	movs	r2, #0
     720:	f8df 906c 	ldr.w	r9, [pc, #108]	; 790 <_printk_dec_ulong+0x94>
     724:	9302      	str	r3, [sp, #8]
     726:	fbb6 f3f9 	udiv	r3, r6, r9
     72a:	9301      	str	r3, [sp, #4]
	if (min_width <= 0) {
		min_width = 1;
	}

	while (pos >= 10) {
		if (found_largest_digit != 0 || remainder >= pos) {
     72c:	b90a      	cbnz	r2, 732 <_printk_dec_ulong+0x36>
     72e:	45b1      	cmp	r9, r6
     730:	d81c      	bhi.n	76c <_printk_dec_ulong+0x70>
			found_largest_digit = 1;
			out((int)(remainder / pos + 48), ctx);
     732:	9b01      	ldr	r3, [sp, #4]
     734:	4641      	mov	r1, r8
     736:	f103 0030 	add.w	r0, r3, #48	; 0x30
     73a:	47d0      	blx	sl
			found_largest_digit = 1;
     73c:	2201      	movs	r2, #1
			digits++;
     73e:	3501      	adds	r5, #1
				&& padding < PAD_SPACE_AFTER) {
			out((int)(padding == PAD_ZERO_BEFORE ? '0' : ' '), ctx);
			digits++;
		}
		remaining--;
		remainder %= pos;
     740:	9b01      	ldr	r3, [sp, #4]
		remaining--;
     742:	3f01      	subs	r7, #1
		remainder %= pos;
     744:	fb09 6613 	mls	r6, r9, r3, r6
		pos /= 10;
     748:	230a      	movs	r3, #10
	while (pos >= 10) {
     74a:	2f01      	cmp	r7, #1
		pos /= 10;
     74c:	fbb9 f9f3 	udiv	r9, r9, r3
	while (pos >= 10) {
     750:	d1e9      	bne.n	726 <_printk_dec_ulong+0x2a>
	}
	out((int)(remainder + 48), ctx);
     752:	4641      	mov	r1, r8
     754:	f106 0030 	add.w	r0, r6, #48	; 0x30
     758:	47d0      	blx	sl

	if (padding == PAD_SPACE_AFTER) {
     75a:	f1bb 0f03 	cmp.w	fp, #3
     75e:	d102      	bne.n	766 <_printk_dec_ulong+0x6a>
		remaining = min_width - digits;
     760:	1b64      	subs	r4, r4, r5
		while (remaining-- > 0) {
     762:	2c00      	cmp	r4, #0
     764:	dc0e      	bgt.n	784 <_printk_dec_ulong+0x88>
			out(' ', ctx);
		}
	}
}
     766:	b005      	add	sp, #20
     768:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		} else if (remaining <= min_width
     76c:	42bc      	cmp	r4, r7
     76e:	dbe7      	blt.n	740 <_printk_dec_ulong+0x44>
				&& padding < PAD_SPACE_AFTER) {
     770:	f1bb 0f02 	cmp.w	fp, #2
     774:	d8e4      	bhi.n	740 <_printk_dec_ulong+0x44>
			out((int)(padding == PAD_ZERO_BEFORE ? '0' : ' '), ctx);
     776:	4641      	mov	r1, r8
     778:	9802      	ldr	r0, [sp, #8]
     77a:	9203      	str	r2, [sp, #12]
			digits++;
     77c:	3501      	adds	r5, #1
			out((int)(padding == PAD_ZERO_BEFORE ? '0' : ' '), ctx);
     77e:	47d0      	blx	sl
			digits++;
     780:	9a03      	ldr	r2, [sp, #12]
     782:	e7dd      	b.n	740 <_printk_dec_ulong+0x44>
			out(' ', ctx);
     784:	4641      	mov	r1, r8
     786:	2020      	movs	r0, #32
     788:	47d0      	blx	sl
     78a:	3c01      	subs	r4, #1
     78c:	e7e9      	b.n	762 <_printk_dec_ulong+0x66>
     78e:	bf00      	nop
     790:	3b9aca00 	.word	0x3b9aca00

00000794 <__printk_hook_install>:
	_char_out = fn;
     794:	4b01      	ldr	r3, [pc, #4]	; (79c <__printk_hook_install+0x8>)
     796:	6018      	str	r0, [r3, #0]
}
     798:	4770      	bx	lr
     79a:	bf00      	nop
     79c:	200013d4 	.word	0x200013d4

000007a0 <vprintk>:
	struct out_context ctx = { 0 };
     7a0:	2300      	movs	r3, #0
{
     7a2:	b513      	push	{r0, r1, r4, lr}
	struct out_context ctx = { 0 };
     7a4:	ac02      	add	r4, sp, #8
     7a6:	f844 3d04 	str.w	r3, [r4, #-4]!
	z_vprintk(char_out, &ctx, fmt, ap);
     7aa:	4602      	mov	r2, r0
     7ac:	460b      	mov	r3, r1
     7ae:	4803      	ldr	r0, [pc, #12]	; (7bc <vprintk+0x1c>)
     7b0:	4621      	mov	r1, r4
     7b2:	f002 ff73 	bl	369c <z_vprintk>
}
     7b6:	b002      	add	sp, #8
     7b8:	bd10      	pop	{r4, pc}
     7ba:	bf00      	nop
     7bc:	000006ed 	.word	0x000006ed

000007c0 <nordicsemi_nrf91_init>:
		:
		: "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	unsigned int tmp;

	__asm__ volatile(
     7c0:	f04f 0220 	mov.w	r2, #32
     7c4:	f3ef 8311 	mrs	r3, BASEPRI
     7c8:	f382 8811 	msr	BASEPRI, r2
     7cc:	f3bf 8f6f 	isb	sy

	key = irq_lock();

#ifdef CONFIG_NRF_ENABLE_ICACHE
	/* Enable the instruction cache */
	NRF_NVMC->ICACHECNF = NVMC_ICACHECNF_CACHEEN_Msk;
     7d0:	2101      	movs	r1, #1
     7d2:	4a04      	ldr	r2, [pc, #16]	; (7e4 <nordicsemi_nrf91_init+0x24>)
     7d4:	f8c2 1540 	str.w	r1, [r2, #1344]	; 0x540
	__asm__ volatile(
		"cpsie i;"
		"isb"
		: : : "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile(
     7d8:	f383 8811 	msr	BASEPRI, r3
     7dc:	f3bf 8f6f 	isb	sy
	NMI_INIT();

	irq_unlock(key);

	return 0;
}
     7e0:	2000      	movs	r0, #0
     7e2:	4770      	bx	lr
     7e4:	50039000 	.word	0x50039000

000007e8 <console_out>:
		return c;
	}

#endif  /* CONFIG_UART_CONSOLE_DEBUG_SERVER_HOOKS */

	if ('\n' == c) {
     7e8:	280a      	cmp	r0, #10
{
     7ea:	b538      	push	{r3, r4, r5, lr}
     7ec:	4604      	mov	r4, r0
     7ee:	4d07      	ldr	r5, [pc, #28]	; (80c <CONFIG_ISR_STACK_SIZE+0xc>)
	if ('\n' == c) {
     7f0:	d104      	bne.n	7fc <console_out+0x14>
     7f2:	6828      	ldr	r0, [r5, #0]
						unsigned char out_char)
{
	const struct uart_driver_api *api =
		(const struct uart_driver_api *)dev->driver_api;

	api->poll_out(dev, out_char);
     7f4:	6843      	ldr	r3, [r0, #4]
     7f6:	210d      	movs	r1, #13
     7f8:	685b      	ldr	r3, [r3, #4]
     7fa:	4798      	blx	r3
		uart_poll_out(uart_console_dev, '\r');
	}
	uart_poll_out(uart_console_dev, c);
     7fc:	6828      	ldr	r0, [r5, #0]
     7fe:	6843      	ldr	r3, [r0, #4]
     800:	b2e1      	uxtb	r1, r4
     802:	685b      	ldr	r3, [r3, #4]
     804:	4798      	blx	r3

	return c;
}
     806:	4620      	mov	r0, r4
     808:	bd38      	pop	{r3, r4, r5, pc}
     80a:	bf00      	nop
     80c:	20000008 	.word	0x20000008

00000810 <uart_console_hook_install>:
 *
 * @return N/A
 */

void uart_console_hook_install(void)
{
     810:	b510      	push	{r4, lr}
	__stdout_hook_install(console_out);
     812:	4c04      	ldr	r4, [pc, #16]	; (824 <uart_console_hook_install+0x14>)
     814:	4620      	mov	r0, r4
     816:	f001 f819 	bl	184c <__stdout_hook_install>
	__printk_hook_install(console_out);
     81a:	4620      	mov	r0, r4
}
     81c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	__printk_hook_install(console_out);
     820:	f7ff bfb8 	b.w	794 <__printk_hook_install>
     824:	000007e9 	.word	0x000007e9

00000828 <uart_console_init>:
 * @brief Initialize one UART as the console/debug port
 *
 * @return 0 if successful, otherwise failed.
 */
static int uart_console_init(struct device *arg)
{
     828:	b508      	push	{r3, lr}
	if (z_syscall_trap()) {
		return (struct device *) z_arch_syscall_invoke1(*(u32_t *)&name, K_SYSCALL_DEVICE_GET_BINDING);
	}
#endif
	compiler_barrier();
	return z_impl_device_get_binding(name);
     82a:	4804      	ldr	r0, [pc, #16]	; (83c <uart_console_init+0x14>)
     82c:	f001 f9fe 	bl	1c2c <z_impl_device_get_binding>

	ARG_UNUSED(arg);

	uart_console_dev = device_get_binding(CONFIG_UART_CONSOLE_ON_DEV_NAME);
     830:	4b03      	ldr	r3, [pc, #12]	; (840 <uart_console_init+0x18>)
     832:	6018      	str	r0, [r3, #0]
		}
	}
	k_busy_wait(1000000);
#endif

	uart_console_hook_install();
     834:	f7ff ffec 	bl	810 <uart_console_hook_install>

	return 0;
}
     838:	2000      	movs	r0, #0
     83a:	bd08      	pop	{r3, pc}
     83c:	000046c3 	.word	0x000046c3
     840:	20000008 	.word	0x20000008

00000844 <nrf_power_clock_isr>:
	}
#endif
}

void nrf_power_clock_isr(void *arg)
{
     844:	b508      	push	{r3, lr}
#endif
}

__STATIC_INLINE bool nrf_clock_event_check(nrf_clock_event_t event)
{
    return (bool)*((volatile uint32_t *)((uint8_t *)NRF_CLOCK + event));
     846:	4b11      	ldr	r3, [pc, #68]	; (88c <nrf_power_clock_isr+0x48>)
     848:	681a      	ldr	r2, [r3, #0]
	bool ret = nrf_clock_event_check(evt) &&
     84a:	b16a      	cbz	r2, 868 <nrf_power_clock_isr+0x24>
    return (bool)(NRF_CLOCK->INTENCLR & int_mask);
     84c:	f04f 2250 	mov.w	r2, #1342197760	; 0x50005000
     850:	f8d2 2308 	ldr.w	r2, [r2, #776]	; 0x308
	if (ret) {
     854:	07d1      	lsls	r1, r2, #31
     856:	d507      	bpl.n	868 <nrf_power_clock_isr+0x24>
    *((volatile uint32_t *)((uint8_t *)NRF_CLOCK + event)) = 0x0UL;
     858:	2200      	movs	r2, #0
	ARG_UNUSED(arg);

	if (clock_event_check_and_clean(NRF_CLOCK_EVENT_HFCLKSTARTED,
					NRF_CLOCK_INT_HF_STARTED_MASK)) {
		struct device *hfclk_dev = DEVICE_GET(clock_nrf5_m16src);
		struct nrf_clock_control *data = hfclk_dev->driver_data;
     85a:	480d      	ldr	r0, [pc, #52]	; (890 <nrf_power_clock_isr+0x4c>)
     85c:	601a      	str	r2, [r3, #0]

		/* Check needed due to anomaly 201:
		 * HFCLKSTARTED may be generated twice.
		 */
		if (!data->started) {
     85e:	6883      	ldr	r3, [r0, #8]
     860:	7a5b      	ldrb	r3, [r3, #9]
     862:	b90b      	cbnz	r3, 868 <nrf_power_clock_isr+0x24>
			clkstarted_handle(hfclk_dev);
     864:	f003 f944 	bl	3af0 <clkstarted_handle>
    return (bool)*((volatile uint32_t *)((uint8_t *)NRF_CLOCK + event));
     868:	4b0a      	ldr	r3, [pc, #40]	; (894 <nrf_power_clock_isr+0x50>)
     86a:	681a      	ldr	r2, [r3, #0]
	bool ret = nrf_clock_event_check(evt) &&
     86c:	b162      	cbz	r2, 888 <nrf_power_clock_isr+0x44>
    return (bool)(NRF_CLOCK->INTENCLR & int_mask);
     86e:	f04f 2250 	mov.w	r2, #1342197760	; 0x50005000
     872:	f8d2 2308 	ldr.w	r2, [r2, #776]	; 0x308
	if (ret) {
     876:	0792      	lsls	r2, r2, #30
     878:	d506      	bpl.n	888 <nrf_power_clock_isr+0x44>
    *((volatile uint32_t *)((uint8_t *)NRF_CLOCK + event)) = 0x0UL;
     87a:	2200      	movs	r2, #0

		if (IS_ENABLED(
			CONFIG_CLOCK_CONTROL_NRF_K32SRC_RC_CALIBRATION)) {
			z_nrf_clock_calibration_lfclk_started(lfclk_dev);
		}
		clkstarted_handle(lfclk_dev);
     87c:	4806      	ldr	r0, [pc, #24]	; (898 <nrf_power_clock_isr+0x54>)
     87e:	601a      	str	r2, [r3, #0]
	usb_power_isr();

	if (IS_ENABLED(CONFIG_CLOCK_CONTROL_NRF_K32SRC_RC_CALIBRATION)) {
		z_nrf_clock_calibration_isr();
	}
}
     880:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		clkstarted_handle(lfclk_dev);
     884:	f003 b934 	b.w	3af0 <clkstarted_handle>
}
     888:	bd08      	pop	{r3, pc}
     88a:	bf00      	nop
     88c:	50005100 	.word	0x50005100
     890:	20001484 	.word	0x20001484
     894:	50005104 	.word	0x50005104
     898:	20001490 	.word	0x20001490

0000089c <rtc1_nrf_isr>:
 * symbol.
 */
void rtc1_nrf_isr(void *arg)
{
	ARG_UNUSED(arg);
	RTC->EVENTS_COMPARE[0] = 0;
     89c:	2200      	movs	r2, #0
     89e:	4b0d      	ldr	r3, [pc, #52]	; (8d4 <rtc1_nrf_isr+0x38>)
     8a0:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
	__asm__ volatile(
     8a4:	f04f 0220 	mov.w	r2, #32
     8a8:	f3ef 8111 	mrs	r1, BASEPRI
     8ac:	f382 8811 	msr	BASEPRI, r2
     8b0:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&lock);
	u32_t t = counter();
	u32_t dticks = counter_sub(t, last_count) / CYC_PER_TICK;
     8b4:	4a08      	ldr	r2, [pc, #32]	; (8d8 <rtc1_nrf_isr+0x3c>)
#endif
}

__STATIC_INLINE uint32_t nrf_rtc_counter_get(NRF_RTC_Type * p_reg)
{
     return p_reg->COUNTER;
     8b6:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
     8ba:	6813      	ldr	r3, [r2, #0]
	return (a - b) & COUNTER_MAX;
     8bc:	1ac0      	subs	r0, r0, r3
     8be:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000

	last_count += dticks * CYC_PER_TICK;
     8c2:	4403      	add	r3, r0
     8c4:	6013      	str	r3, [r2, #0]
	__asm__ volatile(
     8c6:	f381 8811 	msr	BASEPRI, r1
     8ca:	f3bf 8f6f 	isb	sy
		}
		set_comparator(next);
	}

	k_spin_unlock(&lock, key);
	z_clock_announce(IS_ENABLED(CONFIG_TICKLESS_KERNEL) ? dticks : 1);
     8ce:	f001 bf2d 	b.w	272c <z_clock_announce>
     8d2:	bf00      	nop
     8d4:	50015000 	.word	0x50015000
     8d8:	20000024 	.word	0x20000024

000008dc <z_clock_driver_init>:
}

int z_clock_driver_init(struct device *device)
{
     8dc:	b570      	push	{r4, r5, r6, lr}
     8de:	4818      	ldr	r0, [pc, #96]	; (940 <z_clock_driver_init+0x64>)
     8e0:	f001 f9a4 	bl	1c2c <z_impl_device_get_binding>
	struct device *clock;

	ARG_UNUSED(device);

	clock = device_get_binding(DT_INST_0_NORDIC_NRF_CLOCK_LABEL "_32K");
	if (!clock) {
     8e4:	b348      	cbz	r0, 93a <z_clock_driver_init+0x5e>
				   clock_control_subsys_t sys)
{
	const struct clock_control_driver_api *api =
		(const struct clock_control_driver_api *)dev->driver_api;

	return api->on(dev, sys);
     8e6:	6843      	ldr	r3, [r0, #4]
     8e8:	2100      	movs	r1, #0
     8ea:	681b      	ldr	r3, [r3, #0]
     8ec:	4798      	blx	r3
    p_reg->CC[ch] = cc_val;
     8ee:	2601      	movs	r6, #1
}

__STATIC_INLINE void nrf_rtc_prescaler_set(NRF_RTC_Type * p_reg, uint32_t val)
{
    NRFX_ASSERT(val <= (RTC_PRESCALER_PRESCALER_Msk >> RTC_PRESCALER_PRESCALER_Pos));
    p_reg->PRESCALER = val;
     8f0:	2400      	movs	r4, #0
    p_reg->INTENSET = mask;
     8f2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
     8f6:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
    p_reg->PRESCALER = val;
     8fa:	4d12      	ldr	r5, [pc, #72]	; (944 <z_clock_driver_init+0x68>)

	/* Clear the event flag and possible pending interrupt */
	nrf_rtc_event_clear(RTC, NRF_RTC_EVENT_COMPARE_0);
	NVIC_ClearPendingIRQ(RTC1_IRQn);

	IRQ_CONNECT(RTC1_IRQn, 1, rtc1_nrf_isr, 0, 0);
     8fc:	4631      	mov	r1, r6
     8fe:	f8c5 4508 	str.w	r4, [r5, #1288]	; 0x508
    p_reg->CC[ch] = cc_val;
     902:	f8c5 6540 	str.w	r6, [r5, #1344]	; 0x540
    p_reg->INTENSET = mask;
     906:	f8c5 3304 	str.w	r3, [r5, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
     90a:	4b0f      	ldr	r3, [pc, #60]	; (948 <z_clock_driver_init+0x6c>)
     90c:	2015      	movs	r0, #21
     90e:	601c      	str	r4, [r3, #0]
     910:	4b0e      	ldr	r3, [pc, #56]	; (94c <z_clock_driver_init+0x70>)
     912:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
     916:	4622      	mov	r2, r4
     918:	f000 fc4e 	bl	11b8 <z_arm_irq_priority_set>
	irq_enable(RTC1_IRQn);
     91c:	2015      	movs	r0, #21
     91e:	f000 fc3b 	bl	1198 <z_arch_irq_enable>

	if (!IS_ENABLED(TICKLESS_KERNEL)) {
		set_comparator(counter() + CYC_PER_TICK);
	}

	return 0;
     922:	4620      	mov	r0, r4
    return (uint32_t)p_reg + task;
}

__STATIC_INLINE void nrf_rtc_task_trigger(NRF_RTC_Type * p_reg, nrf_rtc_task_t task)
{
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
     924:	4b0a      	ldr	r3, [pc, #40]	; (950 <z_clock_driver_init+0x74>)
     926:	601e      	str	r6, [r3, #0]
     928:	602e      	str	r6, [r5, #0]
     return p_reg->COUNTER;
     92a:	f8d5 3504 	ldr.w	r3, [r5, #1284]	; 0x504
		set_comparator(counter() + CYC_PER_TICK);
     92e:	4433      	add	r3, r6
	nrf_rtc_cc_set(RTC, 0, cyc & COUNTER_MAX);
     930:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    p_reg->CC[ch] = cc_val;
     934:	f8c5 3540 	str.w	r3, [r5, #1344]	; 0x540
}
     938:	bd70      	pop	{r4, r5, r6, pc}
		return -1;
     93a:	f04f 30ff 	mov.w	r0, #4294967295
     93e:	e7fb      	b.n	938 <z_clock_driver_init+0x5c>
     940:	000046ca 	.word	0x000046ca
     944:	50015000 	.word	0x50015000
     948:	50015140 	.word	0x50015140
     94c:	e000e100 	.word	0xe000e100
     950:	50015008 	.word	0x50015008

00000954 <z_clock_set_timeout>:

void z_clock_set_timeout(s32_t ticks, bool idle)
{
     954:	b570      	push	{r4, r5, r6, lr}
	ARG_UNUSED(idle);

#ifdef CONFIG_TICKLESS_KERNEL
	ticks = (ticks == K_FOREVER) ? MAX_TICKS : ticks;
     956:	4e21      	ldr	r6, [pc, #132]	; (9dc <z_clock_set_timeout+0x88>)
     958:	f1b0 3fff 	cmp.w	r0, #4294967295
     95c:	bf08      	it	eq
     95e:	4630      	moveq	r0, r6
	__asm__ volatile(
     960:	f04f 0320 	mov.w	r3, #32
     964:	f3ef 8411 	mrs	r4, BASEPRI
     968:	f383 8811 	msr	BASEPRI, r3
     96c:	f3bf 8f6f 	isb	sy
     return p_reg->COUNTER;
     970:	491b      	ldr	r1, [pc, #108]	; (9e0 <z_clock_set_timeout+0x8c>)
	k_spinlock_key_t key = k_spin_lock(&lock);
	u32_t cyc, dt, t = counter();
	bool zli_fixup = IS_ENABLED(CONFIG_ZERO_LATENCY_IRQS);

	/* Round up to next tick boundary */
	cyc = ticks * CYC_PER_TICK + 1 + counter_sub(t, last_count);
     972:	4b1c      	ldr	r3, [pc, #112]	; (9e4 <z_clock_set_timeout+0x90>)
     974:	f8d1 2504 	ldr.w	r2, [r1, #1284]	; 0x504
     978:	681d      	ldr	r5, [r3, #0]
	ticks = MAX(MIN(ticks - 1, (s32_t)MAX_TICKS), 0);
     97a:	3801      	subs	r0, #1
	return (a - b) & COUNTER_MAX;
     97c:	1b53      	subs	r3, r2, r5
     97e:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
	cyc += (CYC_PER_TICK - 1);
	cyc = (cyc / CYC_PER_TICK) * CYC_PER_TICK;
	cyc += last_count;
     982:	3501      	adds	r5, #1
     984:	442b      	add	r3, r5
	cyc = ticks * CYC_PER_TICK + 1 + counter_sub(t, last_count);
     986:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
	cyc += last_count;
     98a:	42b0      	cmp	r0, r6
     98c:	bfd4      	ite	le
     98e:	1818      	addle	r0, r3, r0
     990:	1998      	addgt	r0, r3, r6
	return (a - b) & COUNTER_MAX;
     992:	1a82      	subs	r2, r0, r2
     994:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
     998:	f020 437f 	bic.w	r3, r0, #4278190080	; 0xff000000
	 * least on nRF52.  Some experimentation on nrf52840 shows
	 * that you need to be early by about 400 processor cycles
	 * (about 1/5th of a RTC cycle) in order to reliably get the
	 * interrupt.  The docs say two cycles, they mean two cycles.
	 */
	if (counter_sub(cyc, t) > 2) {
     99c:	2a02      	cmp	r2, #2
    p_reg->CC[ch] = cc_val;
     99e:	f8c1 3540 	str.w	r3, [r1, #1344]	; 0x540
     9a2:	d904      	bls.n	9ae <z_clock_set_timeout+0x5a>
	__asm__ volatile(
     9a4:	f384 8811 	msr	BASEPRI, r4
     9a8:	f3bf 8f6f 	isb	sy
	}
#endif

	k_spin_unlock(&lock, key);
#endif /* CONFIG_TICKLESS_KERNEL */
}
     9ac:	bd70      	pop	{r4, r5, r6, pc}
     return p_reg->COUNTER;
     9ae:	f8d1 3504 	ldr.w	r3, [r1, #1284]	; 0x504
		if (dt == 0 || dt > 0x7fffff) {
     9b2:	4a0d      	ldr	r2, [pc, #52]	; (9e8 <z_clock_set_timeout+0x94>)
	return (a - b) & COUNTER_MAX;
     9b4:	1ac3      	subs	r3, r0, r3
     9b6:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
		if (dt == 0 || dt > 0x7fffff) {
     9ba:	1e5d      	subs	r5, r3, #1
     9bc:	4295      	cmp	r5, r2
     9be:	d905      	bls.n	9cc <z_clock_set_timeout+0x78>
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
     9c0:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
     9c4:	4b09      	ldr	r3, [pc, #36]	; (9ec <z_clock_set_timeout+0x98>)
     9c6:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
     9ca:	e7eb      	b.n	9a4 <z_clock_set_timeout+0x50>
		} else if (dt == 1) {
     9cc:	2b01      	cmp	r3, #1
			set_comparator(cyc + 2);
     9ce:	bf02      	ittt	eq
     9d0:	3002      	addeq	r0, #2
	nrf_rtc_cc_set(RTC, 0, cyc & COUNTER_MAX);
     9d2:	f020 407f 	biceq.w	r0, r0, #4278190080	; 0xff000000
    p_reg->CC[ch] = cc_val;
     9d6:	f8c1 0540 	streq.w	r0, [r1, #1344]	; 0x540
     9da:	e7e3      	b.n	9a4 <z_clock_set_timeout+0x50>
     9dc:	00fffffe 	.word	0x00fffffe
     9e0:	50015000 	.word	0x50015000
     9e4:	20000024 	.word	0x20000024
     9e8:	007ffffe 	.word	0x007ffffe
     9ec:	e000e100 	.word	0xe000e100

000009f0 <z_clock_elapsed>:
	__asm__ volatile(
     9f0:	f04f 0220 	mov.w	r2, #32
     9f4:	f3ef 8311 	mrs	r3, BASEPRI
     9f8:	f382 8811 	msr	BASEPRI, r2
     9fc:	f3bf 8f6f 	isb	sy
     return p_reg->COUNTER;
     a00:	4a06      	ldr	r2, [pc, #24]	; (a1c <z_clock_elapsed+0x2c>)
     a02:	f8d2 0504 	ldr.w	r0, [r2, #1284]	; 0x504
	if (!IS_ENABLED(CONFIG_TICKLESS_KERNEL)) {
		return 0;
	}

	k_spinlock_key_t key = k_spin_lock(&lock);
	u32_t ret = counter_sub(counter(), last_count) / CYC_PER_TICK;
     a06:	4a06      	ldr	r2, [pc, #24]	; (a20 <z_clock_elapsed+0x30>)
	return (a - b) & COUNTER_MAX;
     a08:	6812      	ldr	r2, [r2, #0]
     a0a:	1a80      	subs	r0, r0, r2
     a0c:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
	__asm__ volatile(
     a10:	f383 8811 	msr	BASEPRI, r3
     a14:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&lock, key);
	return ret;
}
     a18:	4770      	bx	lr
     a1a:	bf00      	nop
     a1c:	50015000 	.word	0x50015000
     a20:	20000024 	.word	0x20000024

00000a24 <spm_config_peripheral.constprop.1>:
		     SPU_PERIPHID_PERM_SECUREMAPPING_Split;

	return present && (usel || split);
}

static int spm_config_peripheral(u8_t id, bool dma_present)
     a24:	b508      	push	{r3, lr}
	 * Assign DMA capabilities and lock down the attribution.
	 *
	 * Note: the function assumes that the peripheral ID matches
	 * the IRQ line.
	 */
	NVIC_DisableIRQ(id);
     a26:	b243      	sxtb	r3, r0
  if ((int32_t)(IRQn) >= 0)
     a28:	2b00      	cmp	r3, #0
     a2a:	db0c      	blt.n	a46 <spm_config_peripheral.constprop.1+0x22>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
     a2c:	2201      	movs	r2, #1
     a2e:	f000 011f 	and.w	r1, r0, #31
     a32:	408a      	lsls	r2, r1
     a34:	095b      	lsrs	r3, r3, #5
     a36:	4910      	ldr	r1, [pc, #64]	; (a78 <spm_config_peripheral.constprop.1+0x54>)
     a38:	3320      	adds	r3, #32
     a3a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
     a3e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
     a42:	f3bf 8f6f 	isb	sy
     a46:	0083      	lsls	r3, r0, #2
     a48:	f103 43a0 	add.w	r3, r3, #1342177280	; 0x50000000
     a4c:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
	if (id == NRFX_PERIPHERAL_ID_GET(NRF_GPIOTE1_NS)) {
     a50:	2831      	cmp	r0, #49	; 0x31
	const u32_t perm = NRF_SPU->PERIPHID[id].PERM;
     a52:	f8d3 2800 	ldr.w	r2, [r3, #2048]	; 0x800
	if (id == NRFX_PERIPHERAL_ID_GET(NRF_GPIOTE1_NS)) {
     a56:	d006      	beq.n	a66 <spm_config_peripheral.constprop.1+0x42>
	return present && (usel || split);
     a58:	2a00      	cmp	r2, #0
     a5a:	da07      	bge.n	a6c <spm_config_peripheral.constprop.1+0x48>
	bool usel = (perm & SPU_PERIPHID_PERM_SECUREMAPPING_Msk) ==
     a5c:	f002 0203 	and.w	r2, r2, #3
	return present && (usel || split);
     a60:	3a02      	subs	r2, #2

	if (usel_or_split(id)) {
     a62:	2a01      	cmp	r2, #1
     a64:	d802      	bhi.n	a6c <spm_config_peripheral.constprop.1+0x48>
		NRF_SPU->PERIPHID[id].PERM = PERIPH_PRESENT | PERIPH_NONSEC |
     a66:	4a05      	ldr	r2, [pc, #20]	; (a7c <spm_config_peripheral.constprop.1+0x58>)
     a68:	f8c3 2800 	str.w	r2, [r3, #2048]	; 0x800
	}

	/* Even for non-present peripherals we force IRQs to be routed
	 * to Non-Secure state.
	 */
	irq_target_state_set(id, 0);
     a6c:	2100      	movs	r1, #0
     a6e:	f003 f8ac 	bl	3bca <irq_target_state_set>
	return 0;
}
     a72:	2000      	movs	r0, #0
     a74:	bd08      	pop	{r3, pc}
     a76:	bf00      	nop
     a78:	e000e100 	.word	0xe000e100
     a7c:	80000100 	.word	0x80000100

00000a80 <spm_jump>:
	tz_nonsecure_fpu_access_enable();
#endif /* CONFIG_ARMV7_M_ARMV8_M_FP */
}

void spm_jump(void)
{
     a80:	b530      	push	{r4, r5, lr}
	 * The assumption is that the MSP is located at VTOR_NS[0].
	 */
	u32_t *vtor_ns = (u32_t *)NON_SECURE_APP_ADDRESS;

	PRINT("SPM: NS image at 0x%x\n", (u32_t)vtor_ns);
	PRINT("SPM: NS MSP at 0x%x\n", vtor_ns[0]);
     a82:	f44f 4440 	mov.w	r4, #49152	; 0xc000
	PRINT("SPM: NS reset vector at 0x%x\n", vtor_ns[1]);
     a86:	f24c 0504 	movw	r5, #49156	; 0xc004
{
     a8a:	b085      	sub	sp, #20
	PRINT("SPM: NS image at 0x%x\n", (u32_t)vtor_ns);
     a8c:	f44f 4140 	mov.w	r1, #49152	; 0xc000
     a90:	482c      	ldr	r0, [pc, #176]	; (b44 <spm_jump+0xc4>)
     a92:	f002 ff79 	bl	3988 <printk>
	PRINT("SPM: NS MSP at 0x%x\n", vtor_ns[0]);
     a96:	6821      	ldr	r1, [r4, #0]
     a98:	482b      	ldr	r0, [pc, #172]	; (b48 <spm_jump+0xc8>)
     a9a:	f002 ff75 	bl	3988 <printk>
	PRINT("SPM: NS reset vector at 0x%x\n", vtor_ns[1]);
     a9e:	6829      	ldr	r1, [r5, #0]
     aa0:	482a      	ldr	r0, [pc, #168]	; (b4c <spm_jump+0xcc>)
     aa2:	f002 ff71 	bl	3988 <printk>

	/* Configure Non-Secure stack */
	tz_nonsecure_setup_conf_t spm_ns_conf = {
     aa6:	2210      	movs	r2, #16
     aa8:	2100      	movs	r1, #0
     aaa:	4668      	mov	r0, sp
     aac:	f003 f93e 	bl	3d2c <memset>
		.vtor_ns = (u32_t)vtor_ns,
		.msp_ns = vtor_ns[0],
     ab0:	6823      	ldr	r3, [r4, #0]
	tz_nonsecure_state_setup(spm_ns_conf);
     ab2:	4668      	mov	r0, sp
	tz_nonsecure_setup_conf_t spm_ns_conf = {
     ab4:	9300      	str	r3, [sp, #0]
     ab6:	9402      	str	r4, [sp, #8]
	tz_nonsecure_state_setup(spm_ns_conf);
     ab8:	f7ff fda2 	bl	600 <tz_nonsecure_state_setup>
	tz_nonsecure_exception_prio_config(1);
     abc:	2001      	movs	r0, #1
     abe:	f7ff fdcf 	bl	660 <tz_nonsecure_exception_prio_config>
	tz_nbanked_exception_target_state_set(0);
     ac2:	2000      	movs	r0, #0
     ac4:	f7ff fdb8 	bl	638 <tz_nbanked_exception_target_state_set>
	tz_nonsecure_system_reset_req_block(
     ac8:	2000      	movs	r0, #0
     aca:	f7ff fddd 	bl	688 <tz_nonsecure_system_reset_req_block>
	tz_sau_configure(0, 1);
     ace:	2101      	movs	r1, #1
     ad0:	2000      	movs	r0, #0
     ad2:	f7ff fdf7 	bl	6c4 <tz_sau_configure>
	tz_nonsecure_fpu_access_enable();
     ad6:	f7ff fdeb 	bl	6b0 <tz_nonsecure_fpu_access_enable>

	spm_configure_ns(&spm_ns_conf);

	/* Generate function pointer for Non-Secure function call. */
	TZ_NONSECURE_FUNC_PTR_DECLARE(reset_ns);
	reset_ns = TZ_NONSECURE_FUNC_PTR_CREATE(vtor_ns[1]);
     ada:	682c      	ldr	r4, [r5, #0]

	if (TZ_NONSECURE_FUNC_PTR_IS_NS(reset_ns)) {
		PRINT("SPM: prepare to jump to Non-Secure image.\n");
     adc:	481c      	ldr	r0, [pc, #112]	; (b50 <spm_jump+0xd0>)
     ade:	f002 ff53 	bl	3988 <printk>
		/* Note: Move UARTE0 before jumping, if it is
		 * to be used on the Non-Secure domain.
		 */

		/* Configure UARTE0 as non-secure */
		spm_config_peripheral(
     ae2:	2008      	movs	r0, #8
     ae4:	f7ff ff9e 	bl	a24 <spm_config_peripheral.constprop.1>
	reset_ns = TZ_NONSECURE_FUNC_PTR_CREATE(vtor_ns[1]);
     ae8:	f024 0401 	bic.w	r4, r4, #1
  __ASM volatile ("dsb 0xF":::"memory");
     aec:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
     af0:	f3bf 8f6f 	isb	sy

		__DSB();
		__ISB();

		/* Jump to Non-Secure firmware */
		reset_ns();
     af4:	0864      	lsrs	r4, r4, #1
     af6:	0064      	lsls	r4, r4, #1
     af8:	4620      	mov	r0, r4
     afa:	4621      	mov	r1, r4
     afc:	4622      	mov	r2, r4
     afe:	4623      	mov	r3, r4
     b00:	ed9f 0a14 	vldr	s0, [pc, #80]	; b54 <spm_jump+0xd4>
     b04:	eddf 0a13 	vldr	s1, [pc, #76]	; b54 <spm_jump+0xd4>
     b08:	ed9f 1a12 	vldr	s2, [pc, #72]	; b54 <spm_jump+0xd4>
     b0c:	eddf 1a11 	vldr	s3, [pc, #68]	; b54 <spm_jump+0xd4>
     b10:	ed9f 2a10 	vldr	s4, [pc, #64]	; b54 <spm_jump+0xd4>
     b14:	eddf 2a0f 	vldr	s5, [pc, #60]	; b54 <spm_jump+0xd4>
     b18:	ed9f 3a0e 	vldr	s6, [pc, #56]	; b54 <spm_jump+0xd4>
     b1c:	eddf 3a0d 	vldr	s7, [pc, #52]	; b54 <spm_jump+0xd4>
     b20:	ed9f 4a0c 	vldr	s8, [pc, #48]	; b54 <spm_jump+0xd4>
     b24:	eddf 4a0b 	vldr	s9, [pc, #44]	; b54 <spm_jump+0xd4>
     b28:	ed9f 5a0a 	vldr	s10, [pc, #40]	; b54 <spm_jump+0xd4>
     b2c:	eddf 5a09 	vldr	s11, [pc, #36]	; b54 <spm_jump+0xd4>
     b30:	ed9f 6a08 	vldr	s12, [pc, #32]	; b54 <spm_jump+0xd4>
     b34:	eddf 6a07 	vldr	s13, [pc, #28]	; b54 <spm_jump+0xd4>
     b38:	ed9f 7a06 	vldr	s14, [pc, #24]	; b54 <spm_jump+0xd4>
     b3c:	eddf 7a05 	vldr	s15, [pc, #20]	; b54 <spm_jump+0xd4>
     b40:	f7ff fd30 	bl	5a4 <__gnu_cmse_nonsecure_call>
     b44:	0000482c 	.word	0x0000482c
     b48:	00004843 	.word	0x00004843
     b4c:	00004858 	.word	0x00004858
     b50:	00004876 	.word	0x00004876
     b54:	00000000 	.word	0x00000000

00000b58 <spm_config>:
		      (u32_t)reset_ns);
	}
}

void spm_config(void)
{
     b58:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	PRINT("Flash region\t\tDomain\t\tPermissions\n");
     b5c:	486f      	ldr	r0, [pc, #444]	; (d1c <spm_config+0x1c4>)
     b5e:	f002 ff13 	bl	3988 <printk>
	for (size_t i = 0; i < ARRAY_SIZE(flash_perm); i++) {
     b62:	2100      	movs	r1, #0
		NRF_SPU->FLASHREGION[i].PERM = flash_perm[i];
     b64:	f8df 8200 	ldr.w	r8, [pc, #512]	; d68 <spm_config+0x210>
     b68:	4f6d      	ldr	r7, [pc, #436]	; (d20 <spm_config+0x1c8>)
		PRINT("%c", flash_perm[i] & FLASH_READ  ? 'r' : '-');
     b6a:	4d6e      	ldr	r5, [pc, #440]	; (d24 <spm_config+0x1cc>)
		NRF_SPU->FLASHREGION[i].PERM = flash_perm[i];
     b6c:	f858 4021 	ldr.w	r4, [r8, r1, lsl #2]
     b70:	03ca      	lsls	r2, r1, #15
     b72:	f501 73c0 	add.w	r3, r1, #384	; 0x180
     b76:	f847 4023 	str.w	r4, [r7, r3, lsl #2]
		PRINT("%02u 0x%05x 0x%05x \t", i, 32 * KB(i), 32 * KB(i + 1));
     b7a:	486b      	ldr	r0, [pc, #428]	; (d28 <spm_config+0x1d0>)
     b7c:	f502 4300 	add.w	r3, r2, #32768	; 0x8000
     b80:	1c4e      	adds	r6, r1, #1
     b82:	f002 ff01 	bl	3988 <printk>
		PRINT("%s", flash_perm[i] & FLASH_SECURE ? "Secure\t\t" :
     b86:	4b69      	ldr	r3, [pc, #420]	; (d2c <spm_config+0x1d4>)
     b88:	f014 0f10 	tst.w	r4, #16
     b8c:	4968      	ldr	r1, [pc, #416]	; (d30 <spm_config+0x1d8>)
     b8e:	4869      	ldr	r0, [pc, #420]	; (d34 <spm_config+0x1dc>)
     b90:	bf08      	it	eq
     b92:	4619      	moveq	r1, r3
     b94:	f002 fef8 	bl	3988 <printk>
		PRINT("%c", flash_perm[i] & FLASH_READ  ? 'r' : '-');
     b98:	f014 0f04 	tst.w	r4, #4
     b9c:	bf14      	ite	ne
     b9e:	2172      	movne	r1, #114	; 0x72
     ba0:	212d      	moveq	r1, #45	; 0x2d
     ba2:	4628      	mov	r0, r5
     ba4:	f002 fef0 	bl	3988 <printk>
		PRINT("%c", flash_perm[i] & FLASH_WRITE ? 'w' : '-');
     ba8:	f014 0f02 	tst.w	r4, #2
     bac:	bf14      	ite	ne
     bae:	2177      	movne	r1, #119	; 0x77
     bb0:	212d      	moveq	r1, #45	; 0x2d
     bb2:	4628      	mov	r0, r5
     bb4:	f002 fee8 	bl	3988 <printk>
		PRINT("%c", flash_perm[i] & FLASH_EXEC  ? 'x' : '-');
     bb8:	f014 0f01 	tst.w	r4, #1
     bbc:	bf14      	ite	ne
     bbe:	2178      	movne	r1, #120	; 0x78
     bc0:	212d      	moveq	r1, #45	; 0x2d
     bc2:	4628      	mov	r0, r5
     bc4:	f002 fee0 	bl	3988 <printk>
		PRINT("%c", flash_perm[i] & FLASH_LOCK  ? 'l' : '-');
     bc8:	f414 7f80 	tst.w	r4, #256	; 0x100
     bcc:	bf14      	ite	ne
     bce:	216c      	movne	r1, #108	; 0x6c
     bd0:	212d      	moveq	r1, #45	; 0x2d
     bd2:	4628      	mov	r0, r5
     bd4:	f002 fed8 	bl	3988 <printk>
		PRINT("\n");
     bd8:	4857      	ldr	r0, [pc, #348]	; (d38 <spm_config+0x1e0>)
     bda:	f002 fed5 	bl	3988 <printk>
	for (size_t i = 0; i < ARRAY_SIZE(flash_perm); i++) {
     bde:	2e20      	cmp	r6, #32
     be0:	4631      	mov	r1, r6
     be2:	d1c3      	bne.n	b6c <spm_config+0x14>
	u32_t nsc_size = FLASH_NSC_SIZE_FROM_ADDR(__sg_start);
     be4:	4b55      	ldr	r3, [pc, #340]	; (d3c <spm_config+0x1e4>)
	NRF_SPU->FLASHNSC[0].REGION = FLASH_NSC_REGION_FROM_ADDR(__sg_start);
     be6:	4a4e      	ldr	r2, [pc, #312]	; (d20 <spm_config+0x1c8>)
     be8:	f3c3 31c4 	ubfx	r1, r3, #15, #5
	u32_t nsc_size = FLASH_NSC_SIZE_FROM_ADDR(__sg_start);
     bec:	f3c3 030e 	ubfx	r3, r3, #0, #15
     bf0:	f5c3 4300 	rsb	r3, r3, #32768	; 0x8000
	NRF_SPU->FLASHNSC[0].SIZE = FLASH_NSC_SIZE_REG(nsc_size);
     bf4:	f3c3 1343 	ubfx	r3, r3, #5, #4
	NRF_SPU->FLASHNSC[0].REGION = FLASH_NSC_REGION_FROM_ADDR(__sg_start);
     bf8:	f8c2 1500 	str.w	r1, [r2, #1280]	; 0x500
	NRF_SPU->FLASHNSC[0].SIZE = FLASH_NSC_SIZE_REG(nsc_size);
     bfc:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504
	PRINT("Non-secure callable region 0 placed in flash region %d with size %d.\n",
     c00:	f8d2 1500 	ldr.w	r1, [r2, #1280]	; 0x500
     c04:	f8d2 2504 	ldr.w	r2, [r2, #1284]	; 0x504
     c08:	484d      	ldr	r0, [pc, #308]	; (d40 <spm_config+0x1e8>)
     c0a:	0152      	lsls	r2, r2, #5
     c0c:	f002 febc 	bl	3988 <printk>
	PRINT("\n");
     c10:	4849      	ldr	r0, [pc, #292]	; (d38 <spm_config+0x1e0>)
     c12:	f002 feb9 	bl	3988 <printk>
	int err = spm_secure_services_init();
     c16:	f002 ff8a 	bl	3b2e <spm_secure_services_init>
	if (err != 0) {
     c1a:	4601      	mov	r1, r0
     c1c:	b110      	cbz	r0, c24 <spm_config+0xcc>
		PRINT("Could not initialize secure services (err %d).\n", err);
     c1e:	4849      	ldr	r0, [pc, #292]	; (d44 <spm_config+0x1ec>)
     c20:	f002 feb2 	bl	3988 <printk>
	PRINT("\n");
     c24:	4844      	ldr	r0, [pc, #272]	; (d38 <spm_config+0x1e0>)
     c26:	f002 feaf 	bl	3988 <printk>
	PRINT("SRAM region\t\tDomain\t\tPermissions\n");
     c2a:	4847      	ldr	r0, [pc, #284]	; (d48 <spm_config+0x1f0>)
     c2c:	f002 feac 	bl	3988 <printk>
	for (size_t i = 0; i < ARRAY_SIZE(sram_perm); i++) {
     c30:	2100      	movs	r1, #0
		NRF_SPU->RAMREGION[i].PERM = sram_perm[i];
     c32:	f8df 8138 	ldr.w	r8, [pc, #312]	; d6c <spm_config+0x214>
     c36:	4f3a      	ldr	r7, [pc, #232]	; (d20 <spm_config+0x1c8>)
		PRINT("%c", sram_perm[i] & SRAM_READ  ? 'r' : '-');
     c38:	4d3a      	ldr	r5, [pc, #232]	; (d24 <spm_config+0x1cc>)
		NRF_SPU->RAMREGION[i].PERM = sram_perm[i];
     c3a:	f858 4021 	ldr.w	r4, [r8, r1, lsl #2]
     c3e:	034a      	lsls	r2, r1, #13
     c40:	f501 73e0 	add.w	r3, r1, #448	; 0x1c0
     c44:	f847 4023 	str.w	r4, [r7, r3, lsl #2]
		PRINT("%02u 0x%05x 0x%05x\t", i, 8 * KB(i), 8 * KB(i + 1));
     c48:	4840      	ldr	r0, [pc, #256]	; (d4c <spm_config+0x1f4>)
     c4a:	f502 5300 	add.w	r3, r2, #8192	; 0x2000
     c4e:	1c4e      	adds	r6, r1, #1
     c50:	f002 fe9a 	bl	3988 <printk>
		PRINT("%s", sram_perm[i] & SRAM_SECURE ? "Secure\t\t" :
     c54:	4b35      	ldr	r3, [pc, #212]	; (d2c <spm_config+0x1d4>)
     c56:	f014 0f10 	tst.w	r4, #16
     c5a:	4935      	ldr	r1, [pc, #212]	; (d30 <spm_config+0x1d8>)
     c5c:	4835      	ldr	r0, [pc, #212]	; (d34 <spm_config+0x1dc>)
     c5e:	bf08      	it	eq
     c60:	4619      	moveq	r1, r3
     c62:	f002 fe91 	bl	3988 <printk>
		PRINT("%c", sram_perm[i] & SRAM_READ  ? 'r' : '-');
     c66:	f014 0f04 	tst.w	r4, #4
     c6a:	bf14      	ite	ne
     c6c:	2172      	movne	r1, #114	; 0x72
     c6e:	212d      	moveq	r1, #45	; 0x2d
     c70:	4628      	mov	r0, r5
     c72:	f002 fe89 	bl	3988 <printk>
		PRINT("%c", sram_perm[i] & SRAM_WRITE ? 'w' : '-');
     c76:	f014 0f02 	tst.w	r4, #2
     c7a:	bf14      	ite	ne
     c7c:	2177      	movne	r1, #119	; 0x77
     c7e:	212d      	moveq	r1, #45	; 0x2d
     c80:	4628      	mov	r0, r5
     c82:	f002 fe81 	bl	3988 <printk>
		PRINT("%c", sram_perm[i] & SRAM_EXEC  ? 'x' : '-');
     c86:	f014 0f01 	tst.w	r4, #1
     c8a:	bf14      	ite	ne
     c8c:	2178      	movne	r1, #120	; 0x78
     c8e:	212d      	moveq	r1, #45	; 0x2d
     c90:	4628      	mov	r0, r5
     c92:	f002 fe79 	bl	3988 <printk>
		PRINT("%c", sram_perm[i] & SRAM_LOCK  ? 'l' : '-');
     c96:	f414 7f80 	tst.w	r4, #256	; 0x100
     c9a:	bf14      	ite	ne
     c9c:	216c      	movne	r1, #108	; 0x6c
     c9e:	212d      	moveq	r1, #45	; 0x2d
     ca0:	4628      	mov	r0, r5
     ca2:	f002 fe71 	bl	3988 <printk>
		PRINT("\n");
     ca6:	4824      	ldr	r0, [pc, #144]	; (d38 <spm_config+0x1e0>)
     ca8:	f002 fe6e 	bl	3988 <printk>
	for (size_t i = 0; i < ARRAY_SIZE(sram_perm); i++) {
     cac:	2e20      	cmp	r6, #32
     cae:	4631      	mov	r1, r6
     cb0:	d1c3      	bne.n	c3a <spm_config+0xe2>
	PRINT("\n");
     cb2:	4821      	ldr	r0, [pc, #132]	; (d38 <spm_config+0x1e0>)
     cb4:	f002 fe68 	bl	3988 <printk>
	NRF_SPU->DPPI[0].PERM = mask;
     cb8:	f64f 73ff 	movw	r3, #65535	; 0xffff
		NRF_SPU->GPIOPORT[0].PERM = 0;
     cbc:	2400      	movs	r4, #0
	NRF_SPU->DPPI[0].PERM = mask;
     cbe:	4d18      	ldr	r5, [pc, #96]	; (d20 <spm_config+0x1c8>)
	PRINT("Peripheral\t\tDomain\t\tStatus\n");
     cc0:	4823      	ldr	r0, [pc, #140]	; (d50 <spm_config+0x1f8>)
	NRF_SPU->DPPI[0].PERM = mask;
     cc2:	f8c5 3480 	str.w	r3, [r5, #1152]	; 0x480
	PRINT("Peripheral\t\tDomain\t\tStatus\n");
     cc6:	f002 fe5f 	bl	3988 <printk>
		PRINT("%02u %-21s%s", i, periph[i].name,
     cca:	f8df 80a4 	ldr.w	r8, [pc, #164]	; d70 <spm_config+0x218>
		NRF_SPU->GPIOPORT[0].PERM = 0;
     cce:	f8c5 44c0 	str.w	r4, [r5, #1216]	; 0x4c0
		PRINT("%02u %-21s%s", i, periph[i].name,
     cd2:	f8df 90a0 	ldr.w	r9, [pc, #160]	; d74 <spm_config+0x21c>
     cd6:	4d1f      	ldr	r5, [pc, #124]	; (d54 <spm_config+0x1fc>)
     cd8:	eb05 06c4 	add.w	r6, r5, r4, lsl #3
     cdc:	7977      	ldrb	r7, [r6, #5]
     cde:	f855 2034 	ldr.w	r2, [r5, r4, lsl #3]
     ce2:	2f00      	cmp	r7, #0
     ce4:	bf14      	ite	ne
     ce6:	4643      	movne	r3, r8
     ce8:	464b      	moveq	r3, r9
     cea:	4621      	mov	r1, r4
     cec:	481a      	ldr	r0, [pc, #104]	; (d58 <spm_config+0x200>)
     cee:	f002 fe4b 	bl	3988 <printk>
		if (!periph[i].nonsecure) {
     cf2:	b957      	cbnz	r7, d0a <spm_config+0x1b2>
			PRINT("\tSKIP\n");
     cf4:	4819      	ldr	r0, [pc, #100]	; (d5c <spm_config+0x204>)
	for (size_t i = 0; i < ARRAY_SIZE(periph); i++) {
     cf6:	3401      	adds	r4, #1
			PRINT("\tOK\n");
     cf8:	f002 fe46 	bl	3988 <printk>
	for (size_t i = 0; i < ARRAY_SIZE(periph); i++) {
     cfc:	2c19      	cmp	r4, #25
     cfe:	d1eb      	bne.n	cd8 <spm_config+0x180>
	PRINT("\n");
     d00:	480d      	ldr	r0, [pc, #52]	; (d38 <spm_config+0x1e0>)
	spm_config_flash();
	spm_config_sram();
	spm_config_peripherals();
}
     d02:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	PRINT("\n");
     d06:	f002 be3f 	b.w	3988 <printk>
		err = spm_config_peripheral(periph[i].id, false);
     d0a:	7930      	ldrb	r0, [r6, #4]
     d0c:	f7ff fe8a 	bl	a24 <spm_config_peripheral.constprop.1>
		if (err) {
     d10:	b108      	cbz	r0, d16 <spm_config+0x1be>
			PRINT("\tERROR\n");
     d12:	4813      	ldr	r0, [pc, #76]	; (d60 <spm_config+0x208>)
     d14:	e7ef      	b.n	cf6 <spm_config+0x19e>
			PRINT("\tOK\n");
     d16:	4813      	ldr	r0, [pc, #76]	; (d64 <spm_config+0x20c>)
     d18:	e7ed      	b.n	cf6 <spm_config+0x19e>
     d1a:	bf00      	nop
     d1c:	00004708 	.word	0x00004708
     d20:	50003000 	.word	0x50003000
     d24:	00004740 	.word	0x00004740
     d28:	0000472b 	.word	0x0000472b
     d2c:	000046f1 	.word	0x000046f1
     d30:	000046e8 	.word	0x000046e8
     d34:	00004815 	.word	0x00004815
     d38:	00004a37 	.word	0x00004a37
     d3c:	00007fe0 	.word	0x00007fe0
     d40:	00004743 	.word	0x00004743
     d44:	00004789 	.word	0x00004789
     d48:	000047b9 	.word	0x000047b9
     d4c:	000047db 	.word	0x000047db
     d50:	000047ef 	.word	0x000047ef
     d54:	00004410 	.word	0x00004410
     d58:	0000480b 	.word	0x0000480b
     d5c:	00004818 	.word	0x00004818
     d60:	0000481f 	.word	0x0000481f
     d64:	00004827 	.word	0x00004827
     d68:	00004390 	.word	0x00004390
     d6c:	000044d8 	.word	0x000044d8
     d70:	000046fd 	.word	0x000046fd
     d74:	000046f5 	.word	0x000046f5

00000d78 <__acle_se_spm_request_read>:
	size_t size;
};

__TZ_NONSECURE_ENTRY_FUNC
int spm_request_read(void *destination, u32_t addr, size_t len)
{
     d78:	b510      	push	{r4, lr}
		 .size = FICR_PUBLIC_SIZE},
		{.start = FICR_RESTRICTED_ADDR,
		 .size = FICR_RESTRICTED_SIZE},
	};

	if (destination == NULL || len <= 0) {
     d7a:	2800      	cmp	r0, #0
     d7c:	d04b      	beq.n	e16 <__acle_se_spm_request_read+0x9e>
     d7e:	2a00      	cmp	r2, #0
     d80:	d049      	beq.n	e16 <__acle_se_spm_request_read+0x9e>

	for (size_t i = 0; i < ARRAY_SIZE(ranges); i++) {
		u32_t start = ranges[i].start;
		u32_t size = ranges[i].size;

		if (addr >= start && addr + len <= start + size) {
     d82:	4b26      	ldr	r3, [pc, #152]	; (e1c <__acle_se_spm_request_read+0xa4>)
     d84:	4299      	cmp	r1, r3
     d86:	d93c      	bls.n	e02 <__acle_se_spm_request_read+0x8a>
     d88:	1854      	adds	r4, r2, r1
     d8a:	f603 231d 	addw	r3, r3, #2589	; 0xa1d
     d8e:	429c      	cmp	r4, r3
     d90:	d83a      	bhi.n	e08 <__acle_se_spm_request_read+0x90>
			memcpy(destination, (const void *)addr, len);
     d92:	f002 ff9e 	bl	3cd2 <memcpy>
			return 0;
     d96:	2000      	movs	r0, #0
		}
	}

	return -EPERM;
}
     d98:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
     d9c:	4671      	mov	r1, lr
     d9e:	4672      	mov	r2, lr
     da0:	4673      	mov	r3, lr
     da2:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
     da6:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
     daa:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
     dae:	eef7 1a00 	vmov.f32	s3, #112	; 0x3f800000  1.0
     db2:	eeb7 2a00 	vmov.f32	s4, #112	; 0x3f800000  1.0
     db6:	eef7 2a00 	vmov.f32	s5, #112	; 0x3f800000  1.0
     dba:	eeb7 3a00 	vmov.f32	s6, #112	; 0x3f800000  1.0
     dbe:	eef7 3a00 	vmov.f32	s7, #112	; 0x3f800000  1.0
     dc2:	eeb7 4a00 	vmov.f32	s8, #112	; 0x3f800000  1.0
     dc6:	eef7 4a00 	vmov.f32	s9, #112	; 0x3f800000  1.0
     dca:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
     dce:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
     dd2:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
     dd6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
     dda:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
     dde:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
     de2:	f38e 8c00 	msr	CPSR_fs, lr
     de6:	b410      	push	{r4}
     de8:	eef1 ca10 	vmrs	ip, fpscr
     dec:	f64f 7460 	movw	r4, #65376	; 0xff60
     df0:	f6c0 74ff 	movt	r4, #4095	; 0xfff
     df4:	ea0c 0c04 	and.w	ip, ip, r4
     df8:	eee1 ca10 	vmsr	fpscr, ip
     dfc:	bc10      	pop	{r4}
     dfe:	46f4      	mov	ip, lr
     e00:	4774      	bxns	lr
		if (addr >= start && addr + len <= start + size) {
     e02:	4b07      	ldr	r3, [pc, #28]	; (e20 <__acle_se_spm_request_read+0xa8>)
     e04:	4299      	cmp	r1, r3
     e06:	d903      	bls.n	e10 <__acle_se_spm_request_read+0x98>
     e08:	4b06      	ldr	r3, [pc, #24]	; (e24 <__acle_se_spm_request_read+0xac>)
     e0a:	1854      	adds	r4, r2, r1
     e0c:	429c      	cmp	r4, r3
     e0e:	d9c0      	bls.n	d92 <__acle_se_spm_request_read+0x1a>
	return -EPERM;
     e10:	f04f 30ff 	mov.w	r0, #4294967295
     e14:	e7c0      	b.n	d98 <__acle_se_spm_request_read+0x20>
		return -EINVAL;
     e16:	f06f 0015 	mvn.w	r0, #21
     e1a:	e7bd      	b.n	d98 <__acle_se_spm_request_read+0x20>
     e1c:	00ff0203 	.word	0x00ff0203
     e20:	00ff012f 	.word	0x00ff012f
     e24:	00ff0138 	.word	0x00ff0138

00000e28 <__acle_se_spm_firmware_info>:
#endif /* CONFIG_SPM_SERVICE_RNG */

#ifdef CONFIG_SPM_SERVICE_FIND_FIRMWARE_INFO
__TZ_NONSECURE_ENTRY_FUNC
int spm_firmware_info(u32_t fw_address, struct fw_info *info)
{
     e28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     e2c:	4684      	mov	ip, r0
     e2e:	b085      	sub	sp, #20
	const struct fw_info *tmp_info;

	if (info == NULL) {
     e30:	460f      	mov	r7, r1
     e32:	2900      	cmp	r1, #0
     e34:	d06a      	beq.n	f0c <__acle_se_spm_firmware_info+0xe4>
/* Search for the firmware_info structure inside the firmware. */
static inline const struct fw_info *fw_info_find(u32_t firmware_address)
{
	const struct fw_info *finfo;

	for (u32_t i = 0; i < FW_INFO_OFFSET_COUNT; i++) {
     e36:	2400      	movs	r4, #0
		if (expected_32[i] != actual_32[i]) {
     e38:	f645 3a01 	movw	sl, #23297	; 0x5b01
		finfo = fw_info_check(firmware_address +
						allowed_offsets[i]);
     e3c:	f8df e0d8 	ldr.w	lr, [pc, #216]	; f18 <__acle_se_spm_firmware_info+0xf0>
	const u32_t fw_info_magic[] = {FIRMWARE_INFO_MAGIC};
     e40:	4e34      	ldr	r6, [pc, #208]	; (f14 <__acle_se_spm_firmware_info+0xec>)
		if (expected_32[i] != actual_32[i]) {
     e42:	f8df 80d8 	ldr.w	r8, [pc, #216]	; f1c <__acle_se_spm_firmware_info+0xf4>
     e46:	f8df 90d8 	ldr.w	r9, [pc, #216]	; f20 <__acle_se_spm_firmware_info+0xf8>
	const u32_t fw_info_magic[] = {FIRMWARE_INFO_MAGIC};
     e4a:	ad01      	add	r5, sp, #4
		finfo = fw_info_check(firmware_address +
     e4c:	f85e b024 	ldr.w	fp, [lr, r4, lsl #2]
	const u32_t fw_info_magic[] = {FIRMWARE_INFO_MAGIC};
     e50:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
		finfo = fw_info_check(firmware_address +
     e54:	eb0c 030b 	add.w	r3, ip, fp
	const u32_t fw_info_magic[] = {FIRMWARE_INFO_MAGIC};
     e58:	e885 0007 	stmia.w	r5, {r0, r1, r2}
	if (((u32_t)expected % 4) || ((u32_t)actual % 4) || ((u32_t)len % 4)) {
     e5c:	079a      	lsls	r2, r3, #30
     e5e:	d144      	bne.n	eea <__acle_se_spm_firmware_info+0xc2>
		if (expected_32[i] != actual_32[i]) {
     e60:	f85c 200b 	ldr.w	r2, [ip, fp]
     e64:	4542      	cmp	r2, r8
     e66:	d105      	bne.n	e74 <__acle_se_spm_firmware_info+0x4c>
     e68:	685a      	ldr	r2, [r3, #4]
     e6a:	454a      	cmp	r2, r9
     e6c:	d102      	bne.n	e74 <__acle_se_spm_firmware_info+0x4c>
     e6e:	689a      	ldr	r2, [r3, #8]
     e70:	4552      	cmp	r2, sl
     e72:	d044      	beq.n	efe <__acle_se_spm_firmware_info+0xd6>
	for (u32_t i = 0; i < FW_INFO_OFFSET_COUNT; i++) {
     e74:	3401      	adds	r4, #1
     e76:	2c03      	cmp	r4, #3
     e78:	d1e8      	bne.n	e4c <__acle_se_spm_firmware_info+0x24>
	if (tmp_info != NULL) {
		memcpy(info, tmp_info, sizeof(*tmp_info));
		return 0;
	}

	return -EFAULT;
     e7a:	f06f 000d 	mvn.w	r0, #13
}
     e7e:	b005      	add	sp, #20
     e80:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
     e84:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
     e88:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
     e8c:	eef7 1a00 	vmov.f32	s3, #112	; 0x3f800000  1.0
     e90:	eeb7 2a00 	vmov.f32	s4, #112	; 0x3f800000  1.0
     e94:	eef7 2a00 	vmov.f32	s5, #112	; 0x3f800000  1.0
     e98:	eeb7 3a00 	vmov.f32	s6, #112	; 0x3f800000  1.0
     e9c:	eef7 3a00 	vmov.f32	s7, #112	; 0x3f800000  1.0
     ea0:	eeb7 4a00 	vmov.f32	s8, #112	; 0x3f800000  1.0
     ea4:	eef7 4a00 	vmov.f32	s9, #112	; 0x3f800000  1.0
     ea8:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
     eac:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
     eb0:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
     eb4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
     eb8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
     ebc:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     ec0:	4671      	mov	r1, lr
     ec2:	4672      	mov	r2, lr
     ec4:	4673      	mov	r3, lr
     ec6:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
     eca:	f38e 8c00 	msr	CPSR_fs, lr
     ece:	b410      	push	{r4}
     ed0:	eef1 ca10 	vmrs	ip, fpscr
     ed4:	f64f 7460 	movw	r4, #65376	; 0xff60
     ed8:	f6c0 74ff 	movt	r4, #4095	; 0xfff
     edc:	ea0c 0c04 	and.w	ip, ip, r4
     ee0:	eee1 ca10 	vmsr	fpscr, ip
     ee4:	bc10      	pop	{r4}
     ee6:	46f4      	mov	ip, lr
     ee8:	4774      	bxns	lr
	if (((u32_t)expected % 4) || ((u32_t)actual % 4) || ((u32_t)len % 4)) {
     eea:	2200      	movs	r2, #0
		if (expected_8[i] != actual_8[i]) {
     eec:	5c98      	ldrb	r0, [r3, r2]
     eee:	5ca9      	ldrb	r1, [r5, r2]
     ef0:	4288      	cmp	r0, r1
     ef2:	d1bf      	bne.n	e74 <__acle_se_spm_firmware_info+0x4c>
	for (u32_t i = 0; i < len; i++) {
     ef4:	3201      	adds	r2, #1
     ef6:	2a0c      	cmp	r2, #12
     ef8:	d1f8      	bne.n	eec <__acle_se_spm_firmware_info+0xc4>
		if (finfo) {
     efa:	2b00      	cmp	r3, #0
     efc:	d0ba      	beq.n	e74 <__acle_se_spm_firmware_info+0x4c>
		memcpy(info, tmp_info, sizeof(*tmp_info));
     efe:	2220      	movs	r2, #32
     f00:	4619      	mov	r1, r3
     f02:	4638      	mov	r0, r7
     f04:	f002 fee5 	bl	3cd2 <memcpy>
		return 0;
     f08:	2000      	movs	r0, #0
     f0a:	e7b8      	b.n	e7e <__acle_se_spm_firmware_info+0x56>
		return -EINVAL;
     f0c:	f06f 0015 	mvn.w	r0, #21
     f10:	e7b5      	b.n	e7e <__acle_se_spm_firmware_info+0x56>
     f12:	bf00      	nop
     f14:	00004330 	.word	0x00004330
     f18:	00004558 	.word	0x00004558
     f1c:	281ee6de 	.word	0x281ee6de
     f20:	8fcebb4c 	.word	0x8fcebb4c

00000f24 <nrf_cc310_platform_abort_init>:

/** @brief Function to initialize the nrf_cc310_platform abort APIs.
 */
void nrf_cc310_platform_abort_init(void)
{
	nrf_cc310_platform_set_abort(&apis);
     f24:	4801      	ldr	r0, [pc, #4]	; (f2c <nrf_cc310_platform_abort_init+0x8>)
     f26:	f001 be61 	b.w	2bec <nrf_cc310_platform_set_abort>
     f2a:	bf00      	nop
     f2c:	00004564 	.word	0x00004564

00000f30 <mutex_unlock>:
}


/** @brief Static function to unlock a mutex
 */
static int32_t mutex_unlock(nrf_cc310_platform_mutex_t *mutex) {
     f30:	b508      	push	{r3, lr}
    struct k_mutex * p_mutex;

    /* Ensure that the mutex param is valid (not NULL) */
    if(mutex == NULL) {
     f32:	b130      	cbz	r0, f42 <mutex_unlock+0x12>
        return NRF_CC310_PLATFORM_ERROR_PARAM_NULL;
    }

    /* Ensure that the mutex has been initialized */
    if (mutex->flags == NRF_CC310_PLATFORM_MUTEX_MASK_INVALID) {
     f34:	6843      	ldr	r3, [r0, #4]
     f36:	b13b      	cbz	r3, f48 <mutex_unlock+0x18>
        return NRF_CC310_PLATFORM_ERROR_MUTEX_NOT_INITIALIZED;
    }

    p_mutex = (struct k_mutex *)mutex->mutex;
     f38:	6800      	ldr	r0, [r0, #0]
     f3a:	f001 f865 	bl	2008 <z_impl_k_mutex_unlock>

    k_mutex_unlock(p_mutex);
    return NRF_CC310_PLATFORM_SUCCESS;
     f3e:	2000      	movs	r0, #0
}
     f40:	bd08      	pop	{r3, pc}
        return NRF_CC310_PLATFORM_ERROR_PARAM_NULL;
     f42:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
     f46:	e7fb      	b.n	f40 <mutex_unlock+0x10>
        return NRF_CC310_PLATFORM_ERROR_MUTEX_NOT_INITIALIZED;
     f48:	4800      	ldr	r0, [pc, #0]	; (f4c <mutex_unlock+0x1c>)
     f4a:	e7f9      	b.n	f40 <mutex_unlock+0x10>
     f4c:	ffff8fea 	.word	0xffff8fea

00000f50 <mutex_lock>:
static int32_t mutex_lock(nrf_cc310_platform_mutex_t *mutex) {
     f50:	b508      	push	{r3, lr}
    if(mutex == NULL) {
     f52:	b158      	cbz	r0, f6c <mutex_lock+0x1c>
    if (mutex->flags == NRF_CC310_PLATFORM_MUTEX_MASK_INVALID) {
     f54:	6843      	ldr	r3, [r0, #4]
     f56:	b163      	cbz	r3, f72 <mutex_lock+0x22>
    p_mutex = (struct k_mutex *)mutex->mutex;
     f58:	6800      	ldr	r0, [r0, #0]
	return z_impl_k_mutex_lock(mutex, timeout);
     f5a:	f04f 31ff 	mov.w	r1, #4294967295
     f5e:	f000 ffe1 	bl	1f24 <z_impl_k_mutex_lock>
    if (ret == 0) {
     f62:	2800      	cmp	r0, #0
        return NRF_CC310_PLATFORM_ERROR_MUTEX_FAILED;
     f64:	4804      	ldr	r0, [pc, #16]	; (f78 <mutex_lock+0x28>)
     f66:	bf08      	it	eq
     f68:	2000      	moveq	r0, #0
}
     f6a:	bd08      	pop	{r3, pc}
        return NRF_CC310_PLATFORM_ERROR_PARAM_NULL;
     f6c:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
     f70:	e7fb      	b.n	f6a <mutex_lock+0x1a>
        return NRF_CC310_PLATFORM_ERROR_MUTEX_NOT_INITIALIZED;
     f72:	4802      	ldr	r0, [pc, #8]	; (f7c <mutex_lock+0x2c>)
     f74:	e7f9      	b.n	f6a <mutex_lock+0x1a>
     f76:	bf00      	nop
     f78:	ffff8fe9 	.word	0xffff8fe9
     f7c:	ffff8fea 	.word	0xffff8fea

00000f80 <mutex_free>:
static void mutex_free(nrf_cc310_platform_mutex_t *mutex) {
     f80:	b538      	push	{r3, r4, r5, lr}
    if (mutex == NULL) {
     f82:	4604      	mov	r4, r0
     f84:	b918      	cbnz	r0, f8e <mutex_free+0xe>
        platform_abort_apis.abort_fn(
     f86:	4b0b      	ldr	r3, [pc, #44]	; (fb4 <mutex_free+0x34>)
     f88:	480b      	ldr	r0, [pc, #44]	; (fb8 <mutex_free+0x38>)
     f8a:	685b      	ldr	r3, [r3, #4]
     f8c:	4798      	blx	r3
    if (mutex->flags == NRF_CC310_PLATFORM_MUTEX_MASK_INVALID) {
     f8e:	6865      	ldr	r5, [r4, #4]
     f90:	b155      	cbz	r5, fa8 <mutex_free+0x28>
    if ((mutex->flags & NRF_CC310_PLATFORM_MUTEX_MASK_IS_ALLOCATED) == 0) {
     f92:	f015 0502 	ands.w	r5, r5, #2
     f96:	6820      	ldr	r0, [r4, #0]
     f98:	d107      	bne.n	faa <mutex_free+0x2a>
        k_mem_slab_free(&mutex_slab, mutex->mutex);
     f9a:	4601      	mov	r1, r0
     f9c:	4807      	ldr	r0, [pc, #28]	; (fbc <mutex_free+0x3c>)
     f9e:	f000 ff93 	bl	1ec8 <k_mem_slab_free>
        mutex->mutex = NULL;
     fa2:	6025      	str	r5, [r4, #0]
    mutex->flags = NRF_CC310_PLATFORM_MUTEX_MASK_INVALID;
     fa4:	2300      	movs	r3, #0
     fa6:	6063      	str	r3, [r4, #4]
}
     fa8:	bd38      	pop	{r3, r4, r5, pc}
        memset(mutex->mutex, 0, sizeof(struct k_mutex));
     faa:	2214      	movs	r2, #20
     fac:	2100      	movs	r1, #0
     fae:	f002 febd 	bl	3d2c <memset>
     fb2:	e7f7      	b.n	fa4 <mutex_free+0x24>
     fb4:	20001428 	.word	0x20001428
     fb8:	00004994 	.word	0x00004994
     fbc:	20000028 	.word	0x20000028

00000fc0 <mutex_init>:
static void mutex_init(nrf_cc310_platform_mutex_t *mutex) {
     fc0:	b510      	push	{r4, lr}
    if (mutex == NULL) {
     fc2:	4604      	mov	r4, r0
     fc4:	b918      	cbnz	r0, fce <mutex_init+0xe>
        platform_abort_apis.abort_fn(
     fc6:	4b13      	ldr	r3, [pc, #76]	; (1014 <mutex_init+0x54>)
     fc8:	4813      	ldr	r0, [pc, #76]	; (1018 <mutex_init+0x58>)
     fca:	685b      	ldr	r3, [r3, #4]
     fcc:	4798      	blx	r3
    if (mutex->flags == NRF_CC310_PLATFORM_MUTEX_MASK_INVALID &&
     fce:	6863      	ldr	r3, [r4, #4]
     fd0:	b9bb      	cbnz	r3, 1002 <mutex_init+0x42>
     fd2:	6823      	ldr	r3, [r4, #0]
     fd4:	b9ab      	cbnz	r3, 1002 <mutex_init+0x42>
        ret = k_mem_slab_alloc(&mutex_slab, &mutex->mutex, K_FOREVER);
     fd6:	f04f 32ff 	mov.w	r2, #4294967295
     fda:	4621      	mov	r1, r4
     fdc:	480f      	ldr	r0, [pc, #60]	; (101c <mutex_init+0x5c>)
     fde:	f000 ff45 	bl	1e6c <k_mem_slab_alloc>
        if(ret != 0 || mutex->mutex == NULL)
     fe2:	b908      	cbnz	r0, fe8 <mutex_init+0x28>
     fe4:	6823      	ldr	r3, [r4, #0]
     fe6:	b91b      	cbnz	r3, ff0 <mutex_init+0x30>
            platform_abort_apis.abort_fn(
     fe8:	4b0a      	ldr	r3, [pc, #40]	; (1014 <mutex_init+0x54>)
     fea:	480d      	ldr	r0, [pc, #52]	; (1020 <mutex_init+0x60>)
     fec:	685b      	ldr	r3, [r3, #4]
     fee:	4798      	blx	r3
        memset(mutex->mutex, 0, sizeof(struct k_mutex));
     ff0:	2214      	movs	r2, #20
     ff2:	2100      	movs	r1, #0
     ff4:	6820      	ldr	r0, [r4, #0]
     ff6:	f002 fe99 	bl	3d2c <memset>
        mutex->flags |= NRF_CC310_PLATFORM_MUTEX_MASK_IS_ALLOCATED;
     ffa:	6863      	ldr	r3, [r4, #4]
     ffc:	f043 0302 	orr.w	r3, r3, #2
    1000:	6063      	str	r3, [r4, #4]
    p_mutex = (struct k_mutex *)mutex->mutex;
    1002:	6820      	ldr	r0, [r4, #0]
	z_impl_k_mutex_init(mutex);
    1004:	f002 ff2a 	bl	3e5c <z_impl_k_mutex_init>
    mutex->flags |= NRF_CC310_PLATFORM_MUTEX_MASK_IS_VALID;
    1008:	6863      	ldr	r3, [r4, #4]
    100a:	f043 0301 	orr.w	r3, r3, #1
    100e:	6063      	str	r3, [r4, #4]
}
    1010:	bd10      	pop	{r4, pc}
    1012:	bf00      	nop
    1014:	20001428 	.word	0x20001428
    1018:	00004994 	.word	0x00004994
    101c:	20000028 	.word	0x20000028
    1020:	000049ba 	.word	0x000049ba

00001024 <nrf_cc310_platform_mutex_init>:
};

/** @brief Function to initialize the nrf_cc310_platform mutex APIs
 */
void nrf_cc310_platform_mutex_init(void)
{
    1024:	b508      	push	{r3, lr}
    k_mem_slab_init(&mutex_slab,
    1026:	4906      	ldr	r1, [pc, #24]	; (1040 <nrf_cc310_platform_mutex_init+0x1c>)
    1028:	2340      	movs	r3, #64	; 0x40
    102a:	4806      	ldr	r0, [pc, #24]	; (1044 <nrf_cc310_platform_mutex_init+0x20>)
    102c:	2214      	movs	r2, #20
    102e:	f002 ff03 	bl	3e38 <k_mem_slab_init>
            mutex_slab_buffer,
            sizeof(struct k_mutex),
            NUM_MUTEXES);

    nrf_cc310_platform_set_mutexes(&mutex_apis, &mutexes);
}
    1032:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    nrf_cc310_platform_set_mutexes(&mutex_apis, &mutexes);
    1036:	4904      	ldr	r1, [pc, #16]	; (1048 <nrf_cc310_platform_mutex_init+0x24>)
    1038:	4804      	ldr	r0, [pc, #16]	; (104c <nrf_cc310_platform_mutex_init+0x28>)
    103a:	f001 be0f 	b.w	2c5c <nrf_cc310_platform_set_mutexes>
    103e:	bf00      	nop
    1040:	20000044 	.word	0x20000044
    1044:	20000028 	.word	0x20000028
    1048:	0000457c 	.word	0x0000457c
    104c:	0000456c 	.word	0x0000456c

00001050 <z_arm_exc_exit>:
    /* r0 contains the caller mode */
    push {r0, lr}
#endif

#ifdef CONFIG_PREEMPT_ENABLED
    ldr r0, =_kernel
    1050:	4804      	ldr	r0, [pc, #16]	; (1064 <_EXIT_EXC+0x2>)

    ldr r1, [r0, #_kernel_offset_to_current]
    1052:	6881      	ldr	r1, [r0, #8]

    ldr r0, [r0, #_kernel_offset_to_ready_q_cache]
    1054:	6a40      	ldr	r0, [r0, #36]	; 0x24
    cmp r0, r1
    1056:	4288      	cmp	r0, r1
    beq _EXIT_EXC
    1058:	d003      	beq.n	1062 <_EXIT_EXC>

#if defined(CONFIG_CPU_CORTEX_M)
    /* context switch required, pend the PendSV exception */
    ldr r1, =_SCS_ICSR
    105a:	4903      	ldr	r1, [pc, #12]	; (1068 <_EXIT_EXC+0x6>)
    ldr r2, =_SCS_ICSR_PENDSV
    105c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    str r2, [r1]
    1060:	600a      	str	r2, [r1, #0]

00001062 <_EXIT_EXC>:
    bl z_check_stack_sentinel
#endif /* CONFIG_CPU_CORTEX_M */
#endif /* CONFIG_STACK_SENTINEL */

#if defined(CONFIG_CPU_CORTEX_M)
    bx lr
    1062:	4770      	bx	lr
    ldr r0, =_kernel
    1064:	20000630 	.word	0x20000630
    ldr r1, =_SCS_ICSR
    1068:	e000ed04 	.word	0xe000ed04

0000106c <z_arm_pendsv>:
    pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_TRACING */

    /* load _kernel into r1 and current k_thread into r2 */
    ldr r1, =_kernel
    106c:	4912      	ldr	r1, [pc, #72]	; (10b8 <z_arm_pendsv+0x4c>)
    ldr r2, [r1, #_kernel_offset_to_current]
    106e:	688a      	ldr	r2, [r1, #8]

    /* addr of callee-saved regs in thread in r0 */
    ldr r0, =_thread_offset_to_callee_saved
    1070:	f04f 0028 	mov.w	r0, #40	; 0x28
    add r0, r2
    1074:	4410      	add	r0, r2

    /* save callee-saved + psp in thread */
#if defined(CONFIG_CPU_CORTEX_M)
    mrs ip, PSP
    1076:	f3ef 8c09 	mrs	ip, PSP
    mov r6, r11
    mov r7, ip
    /* store r8-12 */
    stmea r0!, {r3-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    stmia r0, {v1-v8, ip}
    107a:	e880 1ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}

    /* Protect the kernel state while we play with the thread lists */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    107e:	2020      	movs	r0, #32
    msr BASEPRI, r0
    1080:	f380 8811 	msr	BASEPRI, r0
    isb /* Make the effect of disabling interrupts be realized immediately */
    1084:	f3bf 8f6f 	isb	sy
     * the new thread is context-switched in since all decisions
     * to pend PendSV have been taken with the current kernel
     * state and this is what we're handling currently.
     */
#if defined(CONFIG_CPU_CORTEX_M)
    ldr v4, =_SCS_ICSR
    1088:	4f0c      	ldr	r7, [pc, #48]	; (10bc <z_arm_pendsv+0x50>)
    ldr v3, =_SCS_ICSR_UNPENDSV
    108a:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000
#endif

    /* _kernel is still in r1 */

    /* fetch the thread to run from the ready queue cache */
    ldr r2, [r1, #_kernel_offset_to_ready_q_cache]
    108e:	6a4a      	ldr	r2, [r1, #36]	; 0x24

    str r2, [r1, #_kernel_offset_to_current]
    1090:	608a      	str	r2, [r1, #8]
     * has been handled.
     */

    /* _SCS_ICSR is still in v4 and _SCS_ICSR_UNPENDSV in v3 */
#if defined(CONFIG_CPU_CORTEX_M)
    str v3, [v4, #0]
    1092:	603e      	str	r6, [r7, #0]

    ldr r0, [r4]
    movs.n r3, #0
    str r3, [r4]
#else
    ldr r0, [r2, #_thread_offset_to_basepri]
    1094:	6e50      	ldr	r0, [r2, #100]	; 0x64
    movs r3, #0
    1096:	2300      	movs	r3, #0
    str r3, [r2, #_thread_offset_to_basepri]
    1098:	6653      	str	r3, [r2, #100]	; 0x64
    /* restore r4-r7, go back 9*4 bytes to the start of the stored block */
    subs r0, #36
    ldmia r0!, {r4-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    /* restore BASEPRI for the incoming thread */
    msr BASEPRI, r0
    109a:	f380 8811 	msr	BASEPRI, r0
    isb
#endif

#if defined (CONFIG_ARM_MPU)
    /* Re-program dynamic memory map */
    push {r2,lr}
    109e:	b504      	push	{r2, lr}
    mov r0, r2 /* _current thread */
    10a0:	4610      	mov	r0, r2
    bl z_arm_configure_dynamic_mpu_regions
    10a2:	f002 fdc8 	bl	3c36 <z_arm_configure_dynamic_mpu_regions>
    pop {r2,lr}
    10a6:	e8bd 4004 	ldmia.w	sp!, {r2, lr}
    isb

#endif

    /* load callee-saved + psp from thread */
    add r0, r2, #_thread_offset_to_callee_saved
    10aa:	f102 0028 	add.w	r0, r2, #40	; 0x28
    ldmia r0, {v1-v8, ip}
    10ae:	e890 1ff0 	ldmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
    mov r0, #0
    msr PSPLIM, r0
#endif /* CONFIG_BUILTIN_STACK_GUARD */

#if defined(CONFIG_CPU_CORTEX_M)
    msr PSP, ip
    10b2:	f38c 8809 	msr	PSP, ip

    /*
     * Cortex-M: return from PendSV exception
     * Cortex-R: return to the caller (_IntExit or z_arm_svc)
     */
    bx lr
    10b6:	4770      	bx	lr
    ldr r1, =_kernel
    10b8:	20000630 	.word	0x20000630
    ldr v4, =_SCS_ICSR
    10bc:	e000ed04 	.word	0xe000ed04

000010c0 <z_arm_svc>:
 */
SECTION_FUNC(TEXT, z_arm_svc)
  /* Use EXC_RETURN state to find out if stack frame is on the
   * MSP or PSP
   */
    tst lr, #0x4    /* did we come from thread mode ? */
    10c0:	f01e 0f04 	tst.w	lr, #4
    ite eq  /* if zero (equal), came from handler mode */
    10c4:	bf0c      	ite	eq
        mrseq r0, MSP   /* handler mode, stack frame is on MSP */
    10c6:	f3ef 8008 	mrseq	r0, MSP
        mrsne r0, PSP   /* thread mode, stack frame is on PSP */
    10ca:	f3ef 8009 	mrsne	r0, PSP


    /* Figure out what SVC call number was invoked */

    ldr r1, [r0, #24]   /* grab address of PC from stack frame */
    10ce:	6981      	ldr	r1, [r0, #24]
    /* SVC is a two-byte instruction, point to it and read the
     * SVC number (lower byte of SCV instruction)
     */
    ldrb r1, [r1, #-2]
    10d0:	f811 1c02 	ldrb.w	r1, [r1, #-2]
    tst r2, #0x1
    bne _oops

#endif /* CONFIG_USERSPACE */

    cmp r1, #2
    10d4:	2902      	cmp	r1, #2
    beq _oops
    10d6:	d0ff      	beq.n	10d8 <_oops>

000010d8 <_oops>:
    /* exception return is done in z_arm_int_exit() */
    b z_arm_int_exit
#endif

_oops:
    push {r0, lr}
    10d8:	b501      	push	{r0, lr}
    bl z_do_kernel_oops
    10da:	f002 fda1 	bl	3c20 <z_do_kernel_oops>
    pop {r0, pc}
    10de:	bd01      	pop	{r0, pc}

000010e0 <z_arm_cpu_idle_init>:
 * void z_arm_cpu_idle_init(void);
 */

SECTION_FUNC(TEXT, z_arm_cpu_idle_init)
#if defined(CONFIG_CPU_CORTEX_M)
	ldr r1, =_SCB_SCR
    10e0:	4901      	ldr	r1, [pc, #4]	; (10e8 <z_arm_cpu_idle_init+0x8>)
	movs.n r2, #_SCR_INIT_BITS
    10e2:	2210      	movs	r2, #16
	str r2, [r1]
    10e4:	600a      	str	r2, [r1, #0]
#endif
	bx lr
    10e6:	4770      	bx	lr
	ldr r1, =_SCB_SCR
    10e8:	e000ed10 	.word	0xe000ed10

000010ec <z_arch_cpu_idle>:
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE) \
	|| defined(CONFIG_ARMV7_R)
	cpsie i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* clear BASEPRI so wfi is awakened by incoming interrupts */
	eors.n r0, r0
    10ec:	4040      	eors	r0, r0
	msr BASEPRI, r0
    10ee:	f380 8811 	msr	BASEPRI, r0
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	wfi
    10f2:	bf30      	wfi

	bx lr
    10f4:	4770      	bx	lr
    10f6:	bf00      	nop

000010f8 <z_arm_bus_fault>:
	mrs r0, MSP
_stack_frame_endif:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* force unlock interrupts */
	eors.n r0, r0
    10f8:	4040      	eors	r0, r0
	msr BASEPRI, r0
    10fa:	f380 8811 	msr	BASEPRI, r0
	/* RETTOBASE flag is not banked between security states.
	 * Therefore, we cannot rely on this flag, to obtain the SP
	 * of the current security state.
	 * Instead, we use the EXC_RETURN.SPSEL flag.
	 */
 	ldr r0, =0x4
    10fe:	f04f 0004 	mov.w	r0, #4
	mov r1, lr
    1102:	4671      	mov	r1, lr
	tst r1, r0
    1104:	4201      	tst	r1, r0
	beq _s_stack_frame_msp
    1106:	d002      	beq.n	110e <_s_stack_frame_msp>
	mrs r0, PSP
    1108:	f3ef 8009 	mrs	r0, PSP
	bne _s_stack_frame_endif
    110c:	d101      	bne.n	1112 <_s_stack_frame_endif>

0000110e <_s_stack_frame_msp>:
_s_stack_frame_msp:
	mrs r0, MSP
    110e:	f3ef 8008 	mrs	r0, MSP

00001112 <_s_stack_frame_endif>:
	 *
	 * To determine this we need to inspect the EXC_RETURN value
	 * located in the LR. Therefore, we supply the LR value as an
	 * argument to the fault handler.
	 */
	mov r1, lr
    1112:	4671      	mov	r1, lr
#endif /* CONFIG_ARM_SECURE_FIRMWARE || CONFIG_ARM_NONSECURE_FIRMWARE */
	push {r0, lr}
    1114:	b501      	push	{r0, lr}
	bl z_arm_fault
    1116:	f000 f961 	bl	13dc <z_arm_fault>

#if defined(CONFIG_CPU_CORTEX_M)
	pop {r0, pc}
    111a:	bd01      	pop	{r0, pc}

0000111c <z_SysNmiOnReset>:
_ASM_FILE_PROLOGUE

GTEXT(z_SysNmiOnReset)

SECTION_FUNC(TEXT, z_SysNmiOnReset)
    wfi
    111c:	bf30      	wfi
    b z_SysNmiOnReset
    111e:	f7ff bffd 	b.w	111c <z_SysNmiOnReset>
    1122:	bf00      	nop

00001124 <_isr_wrapper>:
 * @return N/A
 */
SECTION_FUNC(TEXT, _isr_wrapper)

#if defined(CONFIG_CPU_CORTEX_M)
	push {r0,lr}		/* r0, lr are now the first items on the stack */
    1124:	b501      	push	{r0, lr}
	 * device for the next timer deadline is not interrupted.  For
	 * non-tickless idle, this ensures that the clearing of the kernel idle
	 * state is not interrupted.  In each case, z_sys_power_save_idle_exit
	 * is called with interrupts disabled.
	 */
	cpsid i  /* PRIMASK = 1 */
    1126:	b672      	cpsid	i

	/* is this a wakeup from idle ? */
	ldr r2, =_kernel
    1128:	4a0b      	ldr	r2, [pc, #44]	; (1158 <_isr_wrapper+0x34>)
	/* requested idle duration, in ticks */
	ldr r0, [r2, #_kernel_offset_to_idle]
    112a:	6a10      	ldr	r0, [r2, #32]
	cmp r0, #0
    112c:	2800      	cmp	r0, #0
	str r1, [r2, #_kernel_offset_to_idle]
	bl z_sys_power_save_idle_exit
_idle_state_cleared:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	ittt ne
    112e:	bf1e      	ittt	ne
	movne	r1, #0
    1130:	2100      	movne	r1, #0
		/* clear kernel idle state */
		strne	r1, [r2, #_kernel_offset_to_idle]
    1132:	6211      	strne	r1, [r2, #32]
		blne	z_sys_power_save_idle_exit
    1134:	f002 fe7e 	blne	3e34 <z_sys_power_save_idle_exit>
_idle_state_cleared:
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	cpsie i		/* re-enable interrupts (PRIMASK = 0) */
    1138:	b662      	cpsie	i
#endif

#if defined(CONFIG_CPU_CORTEX_M)
	mrs r0, IPSR	/* get exception number */
    113a:	f3ef 8005 	mrs	r0, IPSR
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r1, =16
	subs r0, r1	/* get IRQ number */
	lsls r0, #3	/* table is 8-byte wide */
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	sub r0, r0, #16	/* get IRQ number */
    113e:	f1a0 0010 	sub.w	r0, r0, #16
	lsl r0, r0, #3	/* table is 8-byte wide */
    1142:	ea4f 00c0 	mov.w	r0, r0, lsl #3
	 */
	mov r0, #0
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
	ldr r1, =_sw_isr_table
    1146:	4905      	ldr	r1, [pc, #20]	; (115c <_isr_wrapper+0x38>)
	add r1, r1, r0	/* table entry: ISRs must have their MSB set to stay
    1148:	4401      	add	r1, r0
			 * in thumb mode */

	ldm r1!,{r0,r3}	/* arg in r0, ISR in r3 */
    114a:	c909      	ldmia	r1!, {r0, r3}
#else
	pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
	ldm sp!,{r0-r3} /* Restore r0 to r3 regs */
#endif /* CONFIG_EXECUTION_BENCHMARKING */
	blx r3		/* call ISR */
    114c:	4798      	blx	r3

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	pop {r0, r3}
	mov lr, r3
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	pop {r0, lr}
    114e:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
#endif

	/* Use 'bx' instead of 'b' because 'bx' can jump further, and use
	 * 'bx' instead of 'blx' because exception return is done in
	 * z_arm_int_exit() */
	ldr r1, =z_arm_int_exit
    1152:	4903      	ldr	r1, [pc, #12]	; (1160 <_isr_wrapper+0x3c>)
	bx r1
    1154:	4708      	bx	r1
    1156:	0000      	.short	0x0000
	ldr r2, =_kernel
    1158:	20000630 	.word	0x20000630
	ldr r1, =_sw_isr_table
    115c:	000040b0 	.word	0x000040b0
	ldr r1, =z_arm_int_exit
    1160:	00001051 	.word	0x00001051

00001164 <z_arch_swap>:
#ifdef CONFIG_EXECUTION_BENCHMARKING
	read_timer_start_of_swap();
#endif

	/* store off key and return value */
	_current->arch.basepri = key;
    1164:	4a09      	ldr	r2, [pc, #36]	; (118c <z_arch_swap+0x28>)
	_current->arch.swap_return_value = _k_neg_eagain;
    1166:	490a      	ldr	r1, [pc, #40]	; (1190 <z_arch_swap+0x2c>)
	_current->arch.basepri = key;
    1168:	6893      	ldr	r3, [r2, #8]
	_current->arch.swap_return_value = _k_neg_eagain;
    116a:	6809      	ldr	r1, [r1, #0]
	_current->arch.basepri = key;
    116c:	6658      	str	r0, [r3, #100]	; 0x64
	_current->arch.swap_return_value = _k_neg_eagain;
    116e:	6699      	str	r1, [r3, #104]	; 0x68

#if defined(CONFIG_CPU_CORTEX_M)
	/* set pending bit to make sure we will take a PendSV exception */
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    1170:	4908      	ldr	r1, [pc, #32]	; (1194 <z_arch_swap+0x30>)
    1172:	684b      	ldr	r3, [r1, #4]
    1174:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
    1178:	604b      	str	r3, [r1, #4]
    117a:	2300      	movs	r3, #0
    117c:	f383 8811 	msr	BASEPRI, r3
    1180:	f3bf 8f6f 	isb	sy
#endif

	/* Context switch is performed here. Returning implies the
	 * thread has been context-switched-in again.
	 */
	return _current->arch.swap_return_value;
    1184:	6893      	ldr	r3, [r2, #8]
}
    1186:	6e98      	ldr	r0, [r3, #104]	; 0x68
    1188:	4770      	bx	lr
    118a:	bf00      	nop
    118c:	20000630 	.word	0x20000630
    1190:	000045c0 	.word	0x000045c0
    1194:	e000ed00 	.word	0xe000ed00

00001198 <z_arch_irq_enable>:
#define REG_FROM_IRQ(irq) (irq / NUM_IRQS_PER_REG)
#define BIT_FROM_IRQ(irq) (irq % NUM_IRQS_PER_REG)

void z_arch_irq_enable(unsigned int irq)
{
	NVIC_EnableIRQ((IRQn_Type)irq);
    1198:	b243      	sxtb	r3, r0
  if ((int32_t)(IRQn) >= 0)
    119a:	2b00      	cmp	r3, #0
    119c:	db08      	blt.n	11b0 <z_arch_irq_enable+0x18>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    119e:	2201      	movs	r2, #1
    11a0:	f000 001f 	and.w	r0, r0, #31
    11a4:	fa02 f000 	lsl.w	r0, r2, r0
    11a8:	4a02      	ldr	r2, [pc, #8]	; (11b4 <z_arch_irq_enable+0x1c>)
    11aa:	095b      	lsrs	r3, r3, #5
    11ac:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
}
    11b0:	4770      	bx	lr
    11b2:	bf00      	nop
    11b4:	e000e100 	.word	0xe000e100

000011b8 <z_arm_irq_priority_set>:
	 */
	__ASSERT(prio <= (BIT(DT_NUM_IRQ_PRIO_BITS) - 1),
		 "invalid priority %d! values must be less than %lu\n",
		 prio - _IRQ_PRIO_OFFSET,
		 BIT(DT_NUM_IRQ_PRIO_BITS) - (_IRQ_PRIO_OFFSET));
	NVIC_SetPriority((IRQn_Type)irq, prio);
    11b8:	b243      	sxtb	r3, r0
  if ((int32_t)(IRQn) >= 0)
    11ba:	2b00      	cmp	r3, #0
	prio += _IRQ_PRIO_OFFSET;
    11bc:	f101 0101 	add.w	r1, r1, #1
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    11c0:	bfa8      	it	ge
    11c2:	f103 4360 	addge.w	r3, r3, #3758096384	; 0xe0000000
    11c6:	ea4f 1141 	mov.w	r1, r1, lsl #5
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    11ca:	bfb8      	it	lt
    11cc:	4b05      	ldrlt	r3, [pc, #20]	; (11e4 <z_arm_irq_priority_set+0x2c>)
    11ce:	b2c9      	uxtb	r1, r1
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    11d0:	bfab      	itete	ge
    11d2:	f503 4361 	addge.w	r3, r3, #57600	; 0xe100
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    11d6:	f000 000f 	andlt.w	r0, r0, #15
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    11da:	f883 1300 	strbge.w	r1, [r3, #768]	; 0x300
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    11de:	5419      	strblt	r1, [r3, r0]
}
    11e0:	4770      	bx	lr
    11e2:	bf00      	nop
    11e4:	e000ed14 	.word	0xe000ed14

000011e8 <z_arch_new_thread>:
 */
void z_arch_new_thread(struct k_thread *thread, k_thread_stack_t *stack,
		       size_t stackSize, k_thread_entry_t pEntry,
		       void *parameter1, void *parameter2, void *parameter3,
		       int priority, unsigned int options)
{
    11e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
			- MPU_GUARD_ALIGN_AND_SIZE;
		stackSize -= MPU_GUARD_ALIGN_AND_SIZE_FLOAT
			- MPU_GUARD_ALIGN_AND_SIZE;
	}
#endif
	stackEnd = pStackMem + stackSize;
    11ec:	188c      	adds	r4, r1, r2
{
    11ee:	4688      	mov	r8, r1
    11f0:	4617      	mov	r7, r2
    11f2:	461e      	mov	r6, r3
	 * if it isn't.
	 */
	*((u32_t *)pStack) = STACK_SENTINEL;
#endif /* CONFIG_STACK_SENTINEL */
	/* Initialize various struct k_thread members */
	z_init_thread_base(&thread->base, prio, _THREAD_PRESTART, options);
    11f4:	2204      	movs	r2, #4
    11f6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    11f8:	9909      	ldr	r1, [sp, #36]	; 0x24
    11fa:	4605      	mov	r5, r0
    11fc:	f002 ff0b 	bl	4016 <z_init_thread_base>

	/* static threads overwrite it afterwards with real value */
	thread->init_data = NULL;
    1200:	2200      	movs	r2, #0
	pInitCtx->basic.pc = (u32_t)z_thread_entry;
#endif

#if defined(CONFIG_CPU_CORTEX_M)
	/* force ARM mode by clearing LSB of address */
	pInitCtx->basic.pc &= 0xfffffffe;
    1202:	490d      	ldr	r1, [pc, #52]	; (1238 <z_arch_new_thread+0x50>)
	pInitCtx = (struct __esf *)(STACK_ROUND_DOWN(stackEnd -
    1204:	f1a4 0320 	sub.w	r3, r4, #32
    1208:	f023 0307 	bic.w	r3, r3, #7
	pInitCtx->basic.pc &= 0xfffffffe;
    120c:	f021 0101 	bic.w	r1, r1, #1
	thread->fn_abort = NULL;
    1210:	e9c5 2213 	strd	r2, r2, [r5, #76]	; 0x4c
	thread->mem_domain_info.mem_domain = NULL;
#endif /* CONFIG_USERSPACE */

#if defined(CONFIG_THREAD_STACK_INFO)
	thread->stack_info.start = (uintptr_t)pStack;
	thread->stack_info.size = (u32_t)stackSize;
    1214:	e9c5 8716 	strd	r8, r7, [r5, #88]	; 0x58
    1218:	6199      	str	r1, [r3, #24]
#endif

	pInitCtx->basic.a1 = (u32_t)pEntry;
	pInitCtx->basic.a2 = (u32_t)parameter1;
    121a:	9906      	ldr	r1, [sp, #24]
	pInitCtx->basic.a1 = (u32_t)pEntry;
    121c:	601e      	str	r6, [r3, #0]
	pInitCtx->basic.a2 = (u32_t)parameter1;
    121e:	6059      	str	r1, [r3, #4]
	pInitCtx->basic.a3 = (u32_t)parameter2;
    1220:	9907      	ldr	r1, [sp, #28]
    1222:	6099      	str	r1, [r3, #8]
	pInitCtx->basic.a4 = (u32_t)parameter3;
    1224:	9908      	ldr	r1, [sp, #32]
    1226:	60d9      	str	r1, [r3, #12]
	pInitCtx->basic.xpsr =
    1228:	f04f 7180 	mov.w	r1, #16777216	; 0x1000000
    122c:	61d9      	str	r1, [r3, #28]
		0x01000000UL; /* clear all, thumb bit is 1, even if RO */

	thread->callee_saved.psp = (u32_t)pInitCtx;
    122e:	64ab      	str	r3, [r5, #72]	; 0x48
#if defined(CONFIG_CPU_CORTEX_R)
	pInitCtx->basic.lr = (u32_t)pInitCtx->basic.pc;
	thread->callee_saved.spsr = A_BIT | T_BIT | MODE_SYS;
	thread->callee_saved.lr = (u32_t)pInitCtx->basic.pc;
#endif
	thread->arch.basepri = 0;
    1230:	666a      	str	r2, [r5, #100]	; 0x64

	/*
	 * initial values in all other registers/thread entries are
	 * irrelevant.
	 */
}
    1232:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    1236:	bf00      	nop
    1238:	00003669 	.word	0x00003669

0000123c <z_arch_switch_to_main_thread>:

void z_arch_switch_to_main_thread(struct k_thread *main_thread,
				  k_thread_stack_t *main_stack,
				  size_t main_stack_size,
				  k_thread_entry_t _main)
{
    123c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    123e:	461e      	mov	r6, r3
    1240:	4605      	mov	r5, r0
    1242:	460c      	mov	r4, r1
    1244:	4617      	mov	r7, r2
  __ASM volatile ("VMSR fpscr, %0" : : "r" (fpscr) : "vfpcc", "memory");
    1246:	2300      	movs	r3, #0
    1248:	eee1 3a10 	vmsr	fpscr, r3
	 * to set up access permissions for fixed memory sections, such
	 * as Application Memory or No-Cacheable SRAM area.
	 *
	 * This function is invoked once, upon system initialization.
	 */
	z_arm_configure_static_mpu_regions();
    124c:	f000 f96e 	bl	152c <z_arm_configure_static_mpu_regions>
	start_of_main_stack =
		Z_THREAD_STACK_BUFFER(main_stack) + main_stack_size;

	start_of_main_stack = (char *)STACK_ROUND_DOWN(start_of_main_stack);

	_current = main_thread;
    1250:	4b0b      	ldr	r3, [pc, #44]	; (1280 <z_arch_switch_to_main_thread+0x44>)
	start_of_main_stack =
    1252:	443c      	add	r4, r7
#ifdef CONFIG_ARM_MPU
	/*
	 * If stack protection is enabled, make sure to set it
	 * before jumping to thread entry function
	 */
	z_arm_configure_dynamic_mpu_regions(main_thread);
    1254:	4628      	mov	r0, r5
	_current = main_thread;
    1256:	609d      	str	r5, [r3, #8]
	start_of_main_stack = (char *)STACK_ROUND_DOWN(start_of_main_stack);
    1258:	f024 0407 	bic.w	r4, r4, #7
	z_arm_configure_dynamic_mpu_regions(main_thread);
    125c:	f002 fceb 	bl	3c36 <z_arm_configure_dynamic_mpu_regions>

	/*
	 * Set PSP to the highest address of the main stack
	 * before enabling interrupts and jumping to main.
	 */
	__asm__ volatile (
    1260:	4630      	mov	r0, r6
    1262:	f384 8809 	msr	PSP, r4
    1266:	b663      	cpsie	if
    1268:	f04f 0100 	mov.w	r1, #0
    126c:	f381 8811 	msr	BASEPRI, r1
    1270:	f3bf 8f6f 	isb	sy
    1274:	2100      	movs	r1, #0
    1276:	2200      	movs	r2, #0
    1278:	2300      	movs	r3, #0
    127a:	f002 f9f5 	bl	3668 <z_thread_entry>
    127e:	bf00      	nop
    1280:	20000630 	.word	0x20000630

00001284 <z_arm_prep_c>:
#else
#define VECTOR_ADDRESS CONFIG_SRAM_BASE_ADDRESS
#endif
static inline void relocate_vector_table(void)
{
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
    1284:	4a11      	ldr	r2, [pc, #68]	; (12cc <z_arm_prep_c+0x48>)
 * This routine prepares for the execution of and runs C code.
 *
 * @return N/A
 */
void z_arm_prep_c(void)
{
    1286:	b508      	push	{r3, lr}
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
    1288:	4b11      	ldr	r3, [pc, #68]	; (12d0 <z_arm_prep_c+0x4c>)
    128a:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
    128e:	609a      	str	r2, [r3, #8]
  __ASM volatile ("dsb 0xF":::"memory");
    1290:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    1294:	f3bf 8f6f 	isb	sy
	SCB->CPACR |= CPACR_CP10_PRIV_ACCESS | CPACR_CP11_PRIV_ACCESS;
    1298:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
    129c:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
    12a0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	FPU->FPCCR &= (~(FPU_FPCCR_ASPEN_Msk | FPU_FPCCR_LSPEN_Msk));
    12a4:	4a0b      	ldr	r2, [pc, #44]	; (12d4 <z_arm_prep_c+0x50>)
    12a6:	6853      	ldr	r3, [r2, #4]
    12a8:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
    12ac:	6053      	str	r3, [r2, #4]
  __ASM volatile ("dsb 0xF":::"memory");
    12ae:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    12b2:	f3bf 8f6f 	isb	sy
  __ASM volatile ("VMSR fpscr, %0" : : "r" (fpscr) : "vfpcc", "memory");
    12b6:	2300      	movs	r3, #0
    12b8:	eee1 3a10 	vmsr	fpscr, r3
	relocate_vector_table();
	enable_floating_point();
	z_bss_zero();
    12bc:	f000 fcf6 	bl	1cac <z_bss_zero>
	z_data_copy();
    12c0:	f000 fcfe 	bl	1cc0 <z_data_copy>
#if defined(CONFIG_ARMV7_R) && defined(CONFIG_INIT_STACKS)
	z_arm_init_stacks();
#endif
	z_arm_int_lib_init();
    12c4:	f000 f900 	bl	14c8 <z_arm_int_lib_init>
	z_cstart();
    12c8:	f000 fd2c 	bl	1d24 <z_cstart>
    12cc:	00000000 	.word	0x00000000
    12d0:	e000ed00 	.word	0xe000ed00
    12d4:	e000ef30 	.word	0xe000ef30

000012d8 <__start>:
 * search for a __start symbol instead, so create that alias here.
 */
SECTION_SUBSEC_FUNC(TEXT,_reset_section,__start)

#if defined(CONFIG_PLATFORM_SPECIFIC_INIT)
    bl z_platform_init
    12d8:	f002 fb64 	bl	39a4 <z_platform_init>

    /* lock interrupts: will get unlocked when switch to main task */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    12dc:	2020      	movs	r0, #32
    msr BASEPRI, r0
    12de:	f380 8811 	msr	BASEPRI, r0

    /*
     * Set PSP and use it to boot without using MSP, so that it
     * gets set to _interrupt_stack during initialization.
     */
    ldr r0, =_interrupt_stack
    12e2:	4808      	ldr	r0, [pc, #32]	; (1304 <__start+0x2c>)
    ldr r1, =CONFIG_ISR_STACK_SIZE
    12e4:	f44f 6100 	mov.w	r1, #2048	; 0x800
    adds r0, r0, r1
    12e8:	1840      	adds	r0, r0, r1
    msr PSP, r0
    12ea:	f380 8809 	msr	PSP, r0
    mrs r0, CONTROL
    12ee:	f3ef 8014 	mrs	r0, CONTROL
    movs r1, #2
    12f2:	2102      	movs	r1, #2
    orrs r0, r1 /* CONTROL_SPSEL_Msk */
    12f4:	4308      	orrs	r0, r1
    msr CONTROL, r0
    12f6:	f380 8814 	msr	CONTROL, r0
    /*
     * When changing the stack pointer, software must use an ISB instruction
     * immediately after the MSR instruction. This ensures that instructions
     * after the ISB instruction execute using the new stack pointer.
     */
    isb
    12fa:	f3bf 8f6f 	isb	sy
    /*
     * 'bl' jumps the furthest of the branch instructions that are
     * supported on all platforms. So it is used when jumping to z_arm_prep_c
     * (even though we do not intend to return).
     */
    bl z_arm_prep_c
    12fe:	f7ff ffc1 	bl	1284 <z_arm_prep_c>
    1302:	0000      	.short	0x0000
    ldr r0, =_interrupt_stack
    1304:	20000bd0 	.word	0x20000bd0

00001308 <mem_manage_fault.isra.2>:
	u32_t reason = K_ERR_CPU_EXCEPTION;
	u32_t mmfar = -EINVAL;

	PR_FAULT_INFO("***** MPU FAULT *****");

	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
    1308:	4b0c      	ldr	r3, [pc, #48]	; (133c <mem_manage_fault.isra.2+0x34>)
    130a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Stacking error (context area might be"
			" not valid)");
	}
	if ((SCB->CFSR & SCB_CFSR_MUNSTKERR_Msk) != 0) {
    130c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Unstacking error");
	}
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
    130e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    1310:	0792      	lsls	r2, r2, #30
    1312:	d508      	bpl.n	1326 <mem_manage_fault.isra.2+0x1e>
		 * The MMFAR address is valid only if this bit is 1.
		 *
		 * Software must follow this sequence because another higher
		 * priority exception might change the MMFAR value.
		 */
		mmfar = SCB->MMFAR;
    1314:	6b5a      	ldr	r2, [r3, #52]	; 0x34

		if ((SCB->CFSR & SCB_CFSR_MMARVALID_Msk) != 0) {
    1316:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    1318:	0612      	lsls	r2, r2, #24
    131a:	d504      	bpl.n	1326 <mem_manage_fault.isra.2+0x1e>
			PR_EXC("  MMFAR Address: 0x%x", mmfar);
			if (from_hard_fault) {
    131c:	b118      	cbz	r0, 1326 <mem_manage_fault.isra.2+0x1e>
				/* clear SCB_MMAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
    131e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    1320:	f022 0280 	bic.w	r2, r2, #128	; 0x80
    1324:	629a      	str	r2, [r3, #40]	; 0x28

	/* clear MMFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;

	/* Assess whether system shall ignore/recover from this MPU fault. */
	*recoverable = memory_fault_recoverable(esf);
    1326:	2000      	movs	r0, #0
	if ((SCB->CFSR & SCB_CFSR_IACCVIOL_Msk) != 0) {
    1328:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
    132a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if (SCB->CFSR & SCB_CFSR_MSTKERR_Msk) {
    132c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
    132e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    1330:	f042 02ff 	orr.w	r2, r2, #255	; 0xff
    1334:	629a      	str	r2, [r3, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf);
    1336:	7008      	strb	r0, [r1, #0]

	return reason;
}
    1338:	4770      	bx	lr
    133a:	bf00      	nop
    133c:	e000ed00 	.word	0xe000ed00

00001340 <bus_fault.isra.3>:
{
	u32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** BUS FAULT *****");

	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
    1340:	4b0d      	ldr	r3, [pc, #52]	; (1378 <bus_fault.isra.3+0x38>)
    1342:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Stacking error");
	}
	if (SCB->CFSR & SCB_CFSR_UNSTKERR_Msk) {
    1344:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Unstacking error");
	}
	if (SCB->CFSR & SCB_CFSR_PRECISERR_Msk) {
    1346:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    1348:	0592      	lsls	r2, r2, #22
    134a:	d508      	bpl.n	135e <bus_fault.isra.3+0x1e>
		 * The BFAR address is valid only if this bit is 1.
		 *
		 * Software must follow this sequence because another
		 * higher priority exception might change the BFAR value.
		 */
		STORE_xFAR(bfar, SCB->BFAR);
    134c:	6b9a      	ldr	r2, [r3, #56]	; 0x38

		if ((SCB->CFSR & SCB_CFSR_BFARVALID_Msk) != 0) {
    134e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    1350:	0412      	lsls	r2, r2, #16
    1352:	d504      	bpl.n	135e <bus_fault.isra.3+0x1e>
			PR_EXC("  BFAR Address: 0x%x", bfar);
			if (from_hard_fault) {
    1354:	b118      	cbz	r0, 135e <bus_fault.isra.3+0x1e>
				/* clear SCB_CFSR_BFAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_BFARVALID_Msk;
    1356:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    1358:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
    135c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* defined(CONFIG_ARM_MPU) && defined(CONFIG_CPU_HAS_NXP_MPU) */

	/* clear BFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;

	*recoverable = memory_fault_recoverable(esf);
    135e:	2000      	movs	r0, #0
	if (SCB->CFSR & SCB_CFSR_IMPRECISERR_Msk) {
    1360:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_IBUSERR_Msk) != 0) {
    1362:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    1364:	05d2      	lsls	r2, r2, #23
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
    1366:	4a04      	ldr	r2, [pc, #16]	; (1378 <bus_fault.isra.3+0x38>)
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
    1368:	bf58      	it	pl
    136a:	6a9b      	ldrpl	r3, [r3, #40]	; 0x28
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
    136c:	6a93      	ldr	r3, [r2, #40]	; 0x28
    136e:	f443 437f 	orr.w	r3, r3, #65280	; 0xff00
    1372:	6293      	str	r3, [r2, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf);
    1374:	7008      	strb	r0, [r1, #0]

	return reason;
}
    1376:	4770      	bx	lr
    1378:	e000ed00 	.word	0xe000ed00

0000137c <usage_fault.isra.4>:
	u32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** USAGE FAULT *****");

	/* bits are sticky: they stack and must be reset */
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
    137c:	4b07      	ldr	r3, [pc, #28]	; (139c <usage_fault.isra.4+0x20>)

	/* clear UFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;

	return reason;
}
    137e:	2000      	movs	r0, #0
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
    1380:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_UNALIGNED_Msk) != 0) {
    1382:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_STKOF_Msk) != 0) {
    1384:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_NOCP_Msk) != 0) {
    1386:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_INVPC_Msk) != 0) {
    1388:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_INVSTATE_Msk) != 0) {
    138a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_UNDEFINSTR_Msk) != 0) {
    138c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
    138e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    1390:	ea6f 4202 	mvn.w	r2, r2, lsl #16
    1394:	ea6f 4212 	mvn.w	r2, r2, lsr #16
    1398:	629a      	str	r2, [r3, #40]	; 0x28
}
    139a:	4770      	bx	lr
    139c:	e000ed00 	.word	0xe000ed00

000013a0 <secure_fault.isra.5>:
 */
static void secure_fault(const z_arch_esf_t *esf)
{
	PR_FAULT_INFO("***** SECURE FAULT *****");

	STORE_xFAR(sfar, SAU->SFAR);
    13a0:	4b0d      	ldr	r3, [pc, #52]	; (13d8 <secure_fault.isra.5+0x38>)
    13a2:	699a      	ldr	r2, [r3, #24]
	if ((SAU->SFSR & SAU_SFSR_SFARVALID_Msk) != 0) {
    13a4:	695a      	ldr	r2, [r3, #20]
		PR_EXC("  Address: 0x%x", sfar);
	}

	/* bits are sticky: they stack and must be reset */
	if ((SAU->SFSR & SAU_SFSR_INVEP_Msk) != 0) {
    13a6:	695a      	ldr	r2, [r3, #20]
    13a8:	07d0      	lsls	r0, r2, #31
    13aa:	d40f      	bmi.n	13cc <secure_fault.isra.5+0x2c>
		PR_FAULT_INFO("  Invalid entry point");
	} else if ((SAU->SFSR & SAU_SFSR_INVIS_Msk) != 0) {
    13ac:	695a      	ldr	r2, [r3, #20]
    13ae:	0791      	lsls	r1, r2, #30
    13b0:	d40c      	bmi.n	13cc <secure_fault.isra.5+0x2c>
		PR_FAULT_INFO("  Invalid integrity signature");
	} else if ((SAU->SFSR & SAU_SFSR_INVER_Msk) != 0) {
    13b2:	695a      	ldr	r2, [r3, #20]
    13b4:	0752      	lsls	r2, r2, #29
    13b6:	d409      	bmi.n	13cc <secure_fault.isra.5+0x2c>
		PR_FAULT_INFO("  Invalid exception return");
	} else if ((SAU->SFSR & SAU_SFSR_AUVIOL_Msk) != 0) {
    13b8:	695a      	ldr	r2, [r3, #20]
    13ba:	0710      	lsls	r0, r2, #28
    13bc:	d406      	bmi.n	13cc <secure_fault.isra.5+0x2c>
		PR_FAULT_INFO("  Attribution unit violation");
	} else if ((SAU->SFSR & SAU_SFSR_INVTRAN_Msk) != 0) {
    13be:	695a      	ldr	r2, [r3, #20]
    13c0:	06d1      	lsls	r1, r2, #27
    13c2:	d403      	bmi.n	13cc <secure_fault.isra.5+0x2c>
		PR_FAULT_INFO("  Invalid transition");
	} else if ((SAU->SFSR & SAU_SFSR_LSPERR_Msk) != 0) {
    13c4:	695a      	ldr	r2, [r3, #20]
    13c6:	0692      	lsls	r2, r2, #26
		PR_FAULT_INFO("  Lazy state preservation");
	} else if ((SAU->SFSR & SAU_SFSR_LSERR_Msk) != 0) {
    13c8:	bf58      	it	pl
    13ca:	695a      	ldrpl	r2, [r3, #20]
		PR_FAULT_INFO("  Lazy state error");
	}

	/* clear SFSR sticky bits */
	SAU->SFSR |= 0xFF;
    13cc:	695a      	ldr	r2, [r3, #20]
    13ce:	f042 02ff 	orr.w	r2, r2, #255	; 0xff
    13d2:	615a      	str	r2, [r3, #20]
}
    13d4:	4770      	bx	lr
    13d6:	bf00      	nop
    13d8:	e000edd0 	.word	0xe000edd0

000013dc <z_arm_fault>:
 *
 * Note: exc_return argument shall only be used by the Fault handler if we are
 * running a Secure Firmware.
 */
void z_arm_fault(z_arch_esf_t *esf, u32_t exc_return)
{
    13dc:	b537      	push	{r0, r1, r2, r4, r5, lr}
    13de:	4604      	mov	r4, r0
	u32_t reason = K_ERR_CPU_EXCEPTION;
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    13e0:	4a31      	ldr	r2, [pc, #196]	; (14a8 <z_arm_fault+0xcc>)
	bool recoverable;

#if defined(CONFIG_ARM_SECURE_FIRMWARE)
	if ((exc_return & EXC_RETURN_INDICATOR_PREFIX) !=
    13e2:	f001 407f 	and.w	r0, r1, #4278190080	; 0xff000000
    13e6:	f1b0 4f7f 	cmp.w	r0, #4278190080	; 0xff000000
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    13ea:	6853      	ldr	r3, [r2, #4]
	if ((exc_return & EXC_RETURN_INDICATOR_PREFIX) !=
    13ec:	d159      	bne.n	14a2 <z_arm_fault+0xc6>
			EXC_RETURN_INDICATOR_PREFIX) {
		/* Invalid EXC_RETURN value */
		goto _exit_fatal;
	}
	if ((exc_return & EXC_RETURN_EXCEPTION_SECURE_Secure) == 0U) {
    13ee:	f011 0001 	ands.w	r0, r1, #1
    13f2:	d00a      	beq.n	140a <z_arm_fault+0x2e>
		 * This is a fatal error.
		 */
		goto _exit_fatal;
	}

	if (exc_return & EXC_RETURN_RETURN_STACK_Secure) {
    13f4:	0648      	lsls	r0, r1, #25
    13f6:	d411      	bmi.n	141c <z_arm_fault+0x40>

		/* Handle the actual fault.
		 * Extract the correct stack frame from the Non-Secure state
		 * and supply it to the fault handing function.
		 */
		if (exc_return & EXC_RETURN_MODE_THREAD) {
    13f8:	f011 0008 	ands.w	r0, r1, #8
    13fc:	d009      	beq.n	1412 <z_arm_fault+0x36>
  __ASM volatile ("MRS %0, psp_ns"  : "=r" (result) );
    13fe:	f3ef 8489 	mrs	r4, PSP_NS
			esf = (z_arch_esf_t *)__TZ_get_PSP_NS();
			if ((SCB->ICSR & SCB_ICSR_RETTOBASE_Msk) == 0) {
    1402:	6850      	ldr	r0, [r2, #4]
    1404:	f410 6000 	ands.w	r0, r0, #2048	; 0x800
    1408:	d108      	bne.n	141c <z_arm_fault+0x40>

#if defined(CONFIG_ARM_SECURE_FIRMWARE) || \
	defined(CONFIG_ARM_NONSECURE_FIRMWARE)
_exit_fatal:
#endif
	z_arm_fatal_error(reason, esf);
    140a:	4621      	mov	r1, r4
    140c:	f002 fc06 	bl	3c1c <z_arm_fatal_error>
    1410:	e025      	b.n	145e <z_arm_fault+0x82>
  __ASM volatile ("MRS %0, msp_ns" : "=r" (result) );
    1412:	f3ef 8488 	mrs	r4, MSP_NS
			if ((SCB->ICSR & SCB_ICSR_RETTOBASE_Msk) != 0) {
    1416:	6852      	ldr	r2, [r2, #4]
    1418:	0511      	lsls	r1, r2, #20
    141a:	d4f6      	bmi.n	140a <z_arm_fault+0x2e>
	*recoverable = false;
    141c:	2200      	movs	r2, #0
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    141e:	f3c3 0308 	ubfx	r3, r3, #0, #9
	switch (fault) {
    1422:	3b03      	subs	r3, #3
	*recoverable = false;
    1424:	f88d 2007 	strb.w	r2, [sp, #7]
	switch (fault) {
    1428:	2b04      	cmp	r3, #4
    142a:	d830      	bhi.n	148e <z_arm_fault+0xb2>
    142c:	e8df f003 	tbb	[pc, r3]
    1430:	26353103 	.word	0x26353103
    1434:	2d          	.byte	0x2d
    1435:	00          	.byte	0x00
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
    1436:	4b1c      	ldr	r3, [pc, #112]	; (14a8 <z_arm_fault+0xcc>)
    1438:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    143a:	0792      	lsls	r2, r2, #30
    143c:	d427      	bmi.n	148e <z_arm_fault+0xb2>
	} else if ((SCB->HFSR & SCB_HFSR_FORCED_Msk) != 0) {
    143e:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
    1440:	f010 4080 	ands.w	r0, r0, #1073741824	; 0x40000000
    1444:	d007      	beq.n	1456 <z_arm_fault+0x7a>
		if (SCB_MMFSR != 0) {
    1446:	3328      	adds	r3, #40	; 0x28
    1448:	781b      	ldrb	r3, [r3, #0]
    144a:	b153      	cbz	r3, 1462 <z_arm_fault+0x86>
			reason = mem_manage_fault(esf, 1, recoverable);
    144c:	2001      	movs	r0, #1
    144e:	f10d 0107 	add.w	r1, sp, #7
		reason = mem_manage_fault(esf, 0, recoverable);
    1452:	f7ff ff59 	bl	1308 <mem_manage_fault.isra.2>
	if (recoverable) {
    1456:	f89d 3007 	ldrb.w	r3, [sp, #7]
    145a:	2b00      	cmp	r3, #0
    145c:	d0d5      	beq.n	140a <z_arm_fault+0x2e>
}
    145e:	b003      	add	sp, #12
    1460:	bd30      	pop	{r4, r5, pc}
		} else if (SCB_BFSR != 0) {
    1462:	4b12      	ldr	r3, [pc, #72]	; (14ac <z_arm_fault+0xd0>)
    1464:	781b      	ldrb	r3, [r3, #0]
    1466:	b12b      	cbz	r3, 1474 <z_arm_fault+0x98>
			reason = bus_fault(esf, 1, recoverable);
    1468:	2001      	movs	r0, #1
    146a:	f10d 0107 	add.w	r1, sp, #7
		reason = bus_fault(esf, 0, recoverable);
    146e:	f7ff ff67 	bl	1340 <bus_fault.isra.3>
    1472:	e7f0      	b.n	1456 <z_arm_fault+0x7a>
		} else if (SCB_UFSR != 0) {
    1474:	4b0e      	ldr	r3, [pc, #56]	; (14b0 <z_arm_fault+0xd4>)
    1476:	8818      	ldrh	r0, [r3, #0]
    1478:	b285      	uxth	r5, r0
    147a:	b115      	cbz	r5, 1482 <z_arm_fault+0xa6>
		reason = usage_fault(esf);
    147c:	f7ff ff7e 	bl	137c <usage_fault.isra.4>
    1480:	e7e9      	b.n	1456 <z_arm_fault+0x7a>
		} else if (SAU->SFSR != 0) {
    1482:	4b0c      	ldr	r3, [pc, #48]	; (14b4 <z_arm_fault+0xd8>)
    1484:	6958      	ldr	r0, [r3, #20]
    1486:	2800      	cmp	r0, #0
    1488:	d0e5      	beq.n	1456 <z_arm_fault+0x7a>
		secure_fault(esf);
    148a:	f7ff ff89 	bl	13a0 <secure_fault.isra.5>
	u32_t reason = K_ERR_CPU_EXCEPTION;
    148e:	2000      	movs	r0, #0
    1490:	e7e1      	b.n	1456 <z_arm_fault+0x7a>
		reason = mem_manage_fault(esf, 0, recoverable);
    1492:	f10d 0107 	add.w	r1, sp, #7
    1496:	2000      	movs	r0, #0
    1498:	e7db      	b.n	1452 <z_arm_fault+0x76>
		reason = bus_fault(esf, 0, recoverable);
    149a:	f10d 0107 	add.w	r1, sp, #7
    149e:	2000      	movs	r0, #0
    14a0:	e7e5      	b.n	146e <z_arm_fault+0x92>
	u32_t reason = K_ERR_CPU_EXCEPTION;
    14a2:	2000      	movs	r0, #0
    14a4:	e7b1      	b.n	140a <z_arm_fault+0x2e>
    14a6:	bf00      	nop
    14a8:	e000ed00 	.word	0xe000ed00
    14ac:	e000ed29 	.word	0xe000ed29
    14b0:	e000ed2a 	.word	0xe000ed2a
    14b4:	e000edd0 	.word	0xe000edd0

000014b8 <z_arm_fault_init>:
 */
void z_arm_fault_init(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
    14b8:	4a02      	ldr	r2, [pc, #8]	; (14c4 <z_arm_fault_init+0xc>)
    14ba:	6953      	ldr	r3, [r2, #20]
    14bc:	f043 0310 	orr.w	r3, r3, #16
    14c0:	6153      	str	r3, [r2, #20]
	 * Stack to attempt to descend into secure region, in which case a
	 * Secure Hard Fault will occur and we can track the fault from there.
	 */
	SCB->CCR |= SCB_CCR_STKOFHFNMIGN_Msk;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
}
    14c2:	4770      	bx	lr
    14c4:	e000ed00 	.word	0xe000ed00

000014c8 <z_arm_int_lib_init>:
 * @return N/A
 */

void z_arm_int_lib_init(void)
{
	int irq = 0;
    14c8:	2300      	movs	r3, #0
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    14ca:	2120      	movs	r1, #32
    14cc:	4803      	ldr	r0, [pc, #12]	; (14dc <z_arm_int_lib_init+0x14>)
    14ce:	18c2      	adds	r2, r0, r3

	for (; irq < CONFIG_NUM_IRQS; irq++) {
    14d0:	3301      	adds	r3, #1
    14d2:	2b41      	cmp	r3, #65	; 0x41
    14d4:	f882 1300 	strb.w	r1, [r2, #768]	; 0x300
    14d8:	d1f9      	bne.n	14ce <z_arm_int_lib_init+0x6>
		NVIC_SetPriority((IRQn_Type)irq, _IRQ_PRIO_OFFSET);
	}
}
    14da:	4770      	bx	lr
    14dc:	e000e100 	.word	0xe000e100

000014e0 <z_impl_k_thread_abort>:
#include <sys/__assert.h>

extern void z_thread_single_abort(struct k_thread *thread);

void z_impl_k_thread_abort(k_tid_t thread)
{
    14e0:	b538      	push	{r3, r4, r5, lr}
    14e2:	4605      	mov	r5, r0
	__asm__ volatile(
    14e4:	f04f 0320 	mov.w	r3, #32
    14e8:	f3ef 8411 	mrs	r4, BASEPRI
    14ec:	f383 8811 	msr	BASEPRI, r3
    14f0:	f3bf 8f6f 	isb	sy
	key = irq_lock();

	__ASSERT(!(thread->base.user_options & K_ESSENTIAL),
		 "essential thread aborted");

	z_thread_single_abort(thread);
    14f4:	f002 fd70 	bl	3fd8 <z_thread_single_abort>
	z_thread_monitor_exit(thread);

	if (_current == thread) {
    14f8:	4b0a      	ldr	r3, [pc, #40]	; (1524 <z_impl_k_thread_abort+0x44>)
    14fa:	689b      	ldr	r3, [r3, #8]
    14fc:	42ab      	cmp	r3, r5
    14fe:	d10b      	bne.n	1518 <z_impl_k_thread_abort+0x38>
		if ((SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk) == 0) {
    1500:	4b09      	ldr	r3, [pc, #36]	; (1528 <z_impl_k_thread_abort+0x48>)
    1502:	685a      	ldr	r2, [r3, #4]
    1504:	f3c2 0208 	ubfx	r2, r2, #0, #9
    1508:	b912      	cbnz	r2, 1510 <z_impl_k_thread_abort+0x30>
	z_check_stack_sentinel();

#ifndef CONFIG_ARM
	sys_trace_thread_switched_out();
#endif
	ret = z_arch_swap(key);
    150a:	4620      	mov	r0, r4
    150c:	f7ff fe2a 	bl	1164 <z_arch_swap>
			(void)z_swap_irqlock(key);
			CODE_UNREACHABLE;
		} else {
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    1510:	685a      	ldr	r2, [r3, #4]
    1512:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
    1516:	605a      	str	r2, [r3, #4]
		}
	}

	/* The abort handler might have altered the ready queue. */
	z_reschedule_irqlock(key);
    1518:	4620      	mov	r0, r4
}
    151a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule_irqlock(key);
    151e:	f002 bcd4 	b.w	3eca <z_reschedule_irqlock>
    1522:	bf00      	nop
    1524:	20000630 	.word	0x20000630
    1528:	e000ed00 	.word	0xe000ed00

0000152c <z_arm_configure_static_mpu_regions>:
 *
 * For some MPU architectures, such as the unmodified ARMv8-M MPU,
 * the function must execute with MPU enabled.
 */
void z_arm_configure_static_mpu_regions(void)
{
    152c:	b510      	push	{r4, lr}
		.size = (u32_t)&_nocache_ram_size,
		.attr = K_MEM_PARTITION_P_RW_U_NA_NOCACHE,
		};
#endif /* CONFIG_NOCACHE_MEMORY */
#if defined(CONFIG_ARCH_HAS_RAMFUNC_SUPPORT)
		const struct k_mem_partition ramfunc_region =
    152e:	4b0e      	ldr	r3, [pc, #56]	; (1568 <z_arm_configure_static_mpu_regions+0x3c>)
{
    1530:	b088      	sub	sp, #32
		const struct k_mem_partition ramfunc_region =
    1532:	9302      	str	r3, [sp, #8]
    1534:	4b0d      	ldr	r3, [pc, #52]	; (156c <z_arm_configure_static_mpu_regions+0x40>)
	/* Configure the static MPU regions within firmware SRAM boundaries.
	 * Start address of the image is given by _image_ram_start. The end
	 * of the firmware SRAM area is marked by __kernel_ram_end, taking
	 * into account the unused SRAM area, as well.
	 */
	arm_core_mpu_configure_static_mpu_regions(static_regions,
    1536:	4c0e      	ldr	r4, [pc, #56]	; (1570 <z_arm_configure_static_mpu_regions+0x44>)
		const struct k_mem_partition ramfunc_region =
    1538:	9303      	str	r3, [sp, #12]
    153a:	4b0e      	ldr	r3, [pc, #56]	; (1574 <z_arm_configure_static_mpu_regions+0x48>)
	const struct k_mem_partition *static_regions[] = {
    153c:	a808      	add	r0, sp, #32
		const struct k_mem_partition ramfunc_region =
    153e:	9304      	str	r3, [sp, #16]
	const struct k_mem_partition *static_regions[] = {
    1540:	ab02      	add	r3, sp, #8
    1542:	f840 3d1c 	str.w	r3, [r0, #-28]!
	arm_core_mpu_configure_static_mpu_regions(static_regions,
    1546:	4a0c      	ldr	r2, [pc, #48]	; (1578 <z_arm_configure_static_mpu_regions+0x4c>)
    1548:	4623      	mov	r3, r4
    154a:	2101      	movs	r1, #1
    154c:	f000 f902 	bl	1754 <arm_core_mpu_configure_static_mpu_regions>
	/* Define a constant array of k_mem_partition objects that holds the
	 * boundaries of the areas, inside which dynamic region programming
	 * is allowed. The information is passed to the underlying driver at
	 * initialization.
	 */
	const struct k_mem_partition dyn_region_areas[] = {
    1550:	2300      	movs	r3, #0
    1552:	9307      	str	r3, [sp, #28]
		{
		.start = _MPU_DYNAMIC_REGIONS_AREA_START,
    1554:	4b09      	ldr	r3, [pc, #36]	; (157c <z_arm_configure_static_mpu_regions+0x50>)
		.size =  _MPU_DYNAMIC_REGIONS_AREA_SIZE,
		}
	};

	arm_core_mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
    1556:	2101      	movs	r1, #1
		.size =  _MPU_DYNAMIC_REGIONS_AREA_SIZE,
    1558:	1ae4      	subs	r4, r4, r3
	arm_core_mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
    155a:	a805      	add	r0, sp, #20
	const struct k_mem_partition dyn_region_areas[] = {
    155c:	9305      	str	r3, [sp, #20]
    155e:	9406      	str	r4, [sp, #24]
	arm_core_mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
    1560:	f000 f902 	bl	1768 <arm_core_mpu_mark_areas_for_dynamic_regions>
		ARRAY_SIZE(dyn_region_areas));
#endif /* CONFIG_MPU_REQUIRES_NON_OVERLAPPING_REGIONS */
}
    1564:	b008      	add	sp, #32
    1566:	bd10      	pop	{r4, pc}
    1568:	20000000 	.word	0x20000000
    156c:	00000000 	.word	0x00000000
    1570:	20010000 	.word	0x20010000
    1574:	00010006 	.word	0x00010006
    1578:	20000000 	.word	0x20000000
    157c:	20000000 	.word	0x20000000

00001580 <region_init>:
 * Note:
 *   The caller must provide a valid region index.
 */
static void region_init(const u32_t index,
	const struct arm_mpu_region *region_conf)
{
    1580:	b510      	push	{r4, lr}
	ARM_MPU_SetRegion(
		/* RNR */
		index,
		/* RBAR */
		(region_conf->base & MPU_RBAR_BASE_Msk)
    1582:	680b      	ldr	r3, [r1, #0]
		| (region_conf->attr.rbar &
    1584:	7a0c      	ldrb	r4, [r1, #8]
		(region_conf->base & MPU_RBAR_BASE_Msk)
    1586:	f023 031f 	bic.w	r3, r3, #31
		| (region_conf->attr.rbar &
    158a:	f004 021f 	and.w	r2, r4, #31
    158e:	431a      	orrs	r2, r3
			(MPU_RBAR_XN_Msk | MPU_RBAR_AP_Msk | MPU_RBAR_SH_Msk)),
		/* RLAR */
		(region_conf->attr.r_limit & MPU_RLAR_LIMIT_Msk)
    1590:	68cb      	ldr	r3, [r1, #12]
		| ((region_conf->attr.mair_idx << MPU_RLAR_AttrIndx_Pos)
    1592:	0964      	lsrs	r4, r4, #5
		(region_conf->attr.r_limit & MPU_RLAR_LIMIT_Msk)
    1594:	f023 031f 	bic.w	r3, r3, #31
* \param rbar Value for RBAR register.
* \param rlar Value for RLAR register.
*/   
__STATIC_INLINE void ARM_MPU_SetRegionEx(MPU_Type* mpu, uint32_t rnr, uint32_t rbar, uint32_t rlar)
{
  mpu->RNR = rnr;
    1598:	4904      	ldr	r1, [pc, #16]	; (15ac <region_init+0x2c>)
			& MPU_RLAR_AttrIndx_Msk)
		| MPU_RLAR_EN_Msk
    159a:	f043 0301 	orr.w	r3, r3, #1
    159e:	ea43 0344 	orr.w	r3, r3, r4, lsl #1
    15a2:	6088      	str	r0, [r1, #8]
  mpu->RBAR = rbar;
    15a4:	60ca      	str	r2, [r1, #12]
  mpu->RLAR = rlar;
    15a6:	610b      	str	r3, [r1, #16]
	);

	LOG_DBG("[%d] 0x%08x 0x%08x 0x%08x 0x%08x",
			index, region_conf->base, region_conf->attr.rbar,
			region_conf->attr.mair_idx, region_conf->attr.r_limit);
}
    15a8:	bd10      	pop	{r4, pc}
    15aa:	bf00      	nop
    15ac:	e000ed90 	.word	0xe000ed90

000015b0 <mpu_configure_regions.constprop.1>:

/* This internal function programs a set of given MPU regions
 * over a background memory area, optionally performing a
 * sanity check of the memory regions to be programmed.
 */
static int mpu_configure_regions(const struct k_mem_partition
    15b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    15b4:	4680      	mov	r8, r0
    15b6:	4689      	mov	r9, r1
    15b8:	4614      	mov	r4, r2
	bool do_sanity_check)
{
	int i;
	int reg_index = start_reg_index;

	for (i = 0; i < regions_num; i++) {
    15ba:	2700      	movs	r7, #0
	MPU->RNR = index;
    15bc:	4d48      	ldr	r5, [pc, #288]	; (16e0 <mpu_configure_regions.constprop.1+0x130>)
static int mpu_configure_regions(const struct k_mem_partition
    15be:	b085      	sub	sp, #20
	for (i = 0; i < regions_num; i++) {
    15c0:	454f      	cmp	r7, r9
    15c2:	da07      	bge.n	15d4 <mpu_configure_regions.constprop.1+0x24>
		if (regions[i]->size == 0U) {
    15c4:	f858 3027 	ldr.w	r3, [r8, r7, lsl #2]
    15c8:	685e      	ldr	r6, [r3, #4]
    15ca:	b3c6      	cbz	r6, 163e <mpu_configure_regions.constprop.1+0x8e>
		&&
    15cc:	2e1f      	cmp	r6, #31
    15ce:	d805      	bhi.n	15dc <mpu_configure_regions.constprop.1+0x2c>

			reg_index =
				mpu_configure_region(reg_index, regions[i]);

			if (reg_index == -EINVAL) {
				return reg_index;
    15d0:	f06f 0415 	mvn.w	r4, #21
			reg_index++;
		}
	}

	return reg_index;
}
    15d4:	4620      	mov	r0, r4
    15d6:	b005      	add	sp, #20
    15d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		&&
    15dc:	06f2      	lsls	r2, r6, #27
    15de:	d1f7      	bne.n	15d0 <mpu_configure_regions.constprop.1+0x20>
		((part->start &
    15e0:	f8d3 a000 	ldr.w	sl, [r3]
		&&
    15e4:	f01a 0f1f 	tst.w	sl, #31
    15e8:	d1f2      	bne.n	15d0 <mpu_configure_regions.constprop.1+0x20>
	u32_t region_start_addr = arm_cmse_mpu_region_get(start);
    15ea:	4650      	mov	r0, sl
    15ec:	f001 ffe7 	bl	35be <arm_cmse_mpu_region_get>
    15f0:	4683      	mov	fp, r0
	u32_t region_end_addr = arm_cmse_mpu_region_get(start + size - 1);
    15f2:	eb06 000a 	add.w	r0, r6, sl
    15f6:	3801      	subs	r0, #1
    15f8:	f001 ffe1 	bl	35be <arm_cmse_mpu_region_get>
	if (region_start_addr == region_end_addr) {
    15fc:	4583      	cmp	fp, r0
    15fe:	d1e7      	bne.n	15d0 <mpu_configure_regions.constprop.1+0x20>
		if ((u_reg_index == -EINVAL) ||
    1600:	f11b 0f16 	cmn.w	fp, #22
    1604:	d0e4      	beq.n	15d0 <mpu_configure_regions.constprop.1+0x20>
			(u_reg_index > (reg_index - 1))) {
    1606:	1e63      	subs	r3, r4, #1
		if ((u_reg_index == -EINVAL) ||
    1608:	455b      	cmp	r3, fp
    160a:	dbe1      	blt.n	15d0 <mpu_configure_regions.constprop.1+0x20>
	MPU->RNR = index;
    160c:	f8c5 b008 	str.w	fp, [r5, #8]
	return MPU->RBAR & MPU_RBAR_BASE_Msk;
    1610:	68e8      	ldr	r0, [r5, #12]
		u32_t reg_last = regions[i]->start + regions[i]->size - 1;
    1612:	f858 1027 	ldr.w	r1, [r8, r7, lsl #2]
	MPU->RNR = index;
    1616:	f8c5 b008 	str.w	fp, [r5, #8]
	return (MPU->RLAR & MPU_RLAR_LIMIT_Msk) | (~MPU_RLAR_LIMIT_Msk);
    161a:	692e      	ldr	r6, [r5, #16]
	return MPU->RBAR & MPU_RBAR_BASE_Msk;
    161c:	f020 001f 	bic.w	r0, r0, #31
		u32_t reg_last = regions[i]->start + regions[i]->size - 1;
    1620:	e9d1 3200 	ldrd	r3, r2, [r1]
    1624:	441a      	add	r2, r3
		if ((regions[i]->start == u_reg_base) &&
    1626:	4298      	cmp	r0, r3
	return (MPU->RLAR & MPU_RLAR_LIMIT_Msk) | (~MPU_RLAR_LIMIT_Msk);
    1628:	f046 061f 	orr.w	r6, r6, #31
		u32_t reg_last = regions[i]->start + regions[i]->size - 1;
    162c:	f102 3aff 	add.w	sl, r2, #4294967295
		if ((regions[i]->start == u_reg_base) &&
    1630:	d118      	bne.n	1664 <mpu_configure_regions.constprop.1+0xb4>
    1632:	4556      	cmp	r6, sl
    1634:	d105      	bne.n	1642 <mpu_configure_regions.constprop.1+0x92>
			mpu_configure_region(u_reg_index, regions[i]);
    1636:	fa5f f08b 	uxtb.w	r0, fp
    163a:	f002 fb04 	bl	3c46 <mpu_configure_region>
	for (i = 0; i < regions_num; i++) {
    163e:	3701      	adds	r7, #1
    1640:	e7be      	b.n	15c0 <mpu_configure_regions.constprop.1+0x10>
	MPU->RNR = index;
    1642:	f8c5 b008 	str.w	fp, [r5, #8]
	MPU->RBAR = (MPU->RBAR & (~MPU_RBAR_BASE_Msk))
    1646:	68eb      	ldr	r3, [r5, #12]
		| (base & MPU_RBAR_BASE_Msk);
    1648:	f022 021f 	bic.w	r2, r2, #31
	MPU->RBAR = (MPU->RBAR & (~MPU_RBAR_BASE_Msk))
    164c:	f003 031f 	and.w	r3, r3, #31
		| (base & MPU_RBAR_BASE_Msk);
    1650:	431a      	orrs	r2, r3
	MPU->RBAR = (MPU->RBAR & (~MPU_RBAR_BASE_Msk))
    1652:	60ea      	str	r2, [r5, #12]
			reg_index =
    1654:	b2e0      	uxtb	r0, r4
			reg_index =
    1656:	f002 faf6 	bl	3c46 <mpu_configure_region>
			if (reg_index == -EINVAL) {
    165a:	f110 0f16 	cmn.w	r0, #22
    165e:	d0b7      	beq.n	15d0 <mpu_configure_regions.constprop.1+0x20>
			reg_index++;
    1660:	1c44      	adds	r4, r0, #1
    1662:	e7ec      	b.n	163e <mpu_configure_regions.constprop.1+0x8e>
	MPU->RNR = index;
    1664:	f8c5 b008 	str.w	fp, [r5, #8]
	MPU->RLAR = (MPU->RLAR & (~MPU_RLAR_LIMIT_Msk))
    1668:	692a      	ldr	r2, [r5, #16]
    166a:	3b01      	subs	r3, #1
    166c:	f023 031f 	bic.w	r3, r3, #31
    1670:	f002 021f 	and.w	r2, r2, #31
		| (limit & MPU_RLAR_LIMIT_Msk);
    1674:	4313      	orrs	r3, r2
		} else if (reg_last == u_reg_last) {
    1676:	4556      	cmp	r6, sl
    1678:	b2e0      	uxtb	r0, r4
	MPU->RLAR = (MPU->RLAR & (~MPU_RLAR_LIMIT_Msk))
    167a:	612b      	str	r3, [r5, #16]
		} else if (reg_last == u_reg_last) {
    167c:	d0eb      	beq.n	1656 <mpu_configure_regions.constprop.1+0xa6>
			reg_index =
    167e:	f002 fae2 	bl	3c46 <mpu_configure_region>
			if (reg_index == -EINVAL) {
    1682:	f110 0f16 	cmn.w	r0, #22
    1686:	d0a3      	beq.n	15d0 <mpu_configure_regions.constprop.1+0x20>
	MPU->RNR = index;
    1688:	f8c5 b008 	str.w	fp, [r5, #8]
	attr->rbar = MPU->RBAR &
    168c:	68ea      	ldr	r2, [r5, #12]
    168e:	f89d 3008 	ldrb.w	r3, [sp, #8]
			REGION_LIMIT_ADDR((regions[i]->start +
    1692:	3e01      	subs	r6, #1
	attr->rbar = MPU->RBAR &
    1694:	f362 0304 	bfi	r3, r2, #0, #5
    1698:	f88d 3008 	strb.w	r3, [sp, #8]
	attr->mair_idx = (MPU->RLAR & MPU_RLAR_AttrIndx_Msk) >>
    169c:	692b      	ldr	r3, [r5, #16]
    169e:	f89d 2008 	ldrb.w	r2, [sp, #8]
    16a2:	085b      	lsrs	r3, r3, #1
    16a4:	f363 1247 	bfi	r2, r3, #5, #3
    16a8:	f88d 2008 	strb.w	r2, [sp, #8]
			fill_region.base = regions[i]->start +
    16ac:	f858 2027 	ldr.w	r2, [r8, r7, lsl #2]
			reg_index++;
    16b0:	3001      	adds	r0, #1
			fill_region.base = regions[i]->start +
    16b2:	e9d2 3200 	ldrd	r3, r2, [r2]
    16b6:	4413      	add	r3, r2
    16b8:	9300      	str	r3, [sp, #0]
			REGION_LIMIT_ADDR((regions[i]->start +
    16ba:	f023 031f 	bic.w	r3, r3, #31
    16be:	441e      	add	r6, r3
    16c0:	eba6 060a 	sub.w	r6, r6, sl
    16c4:	b2c4      	uxtb	r4, r0
    16c6:	f026 061f 	bic.w	r6, r6, #31

static int region_allocate_and_init(const u8_t index,
	const struct arm_mpu_region *region_conf)
{
	/* Attempt to allocate new region index. */
	if (index > (get_num_regions() - 1)) {
    16ca:	2c0f      	cmp	r4, #15
			fill_region.attr.r_limit =
    16cc:	9603      	str	r6, [sp, #12]
    16ce:	f63f af7f 	bhi.w	15d0 <mpu_configure_regions.constprop.1+0x20>
	}

	LOG_DBG("Program MPU region at index 0x%x", index);

	/* Program region */
	region_init(index, region_conf);
    16d2:	4620      	mov	r0, r4
    16d4:	4669      	mov	r1, sp
    16d6:	f7ff ff53 	bl	1580 <region_init>
			reg_index++;
    16da:	3401      	adds	r4, #1
    16dc:	e7af      	b.n	163e <mpu_configure_regions.constprop.1+0x8e>
    16de:	bf00      	nop
    16e0:	e000ed90 	.word	0xe000ed90

000016e4 <arm_core_mpu_enable>:
void arm_core_mpu_enable(void)
{
	/* Enable MPU and use the default memory map as a
	 * background region for privileged software access.
	 */
	MPU->CTRL = MPU_CTRL_ENABLE_Msk | MPU_CTRL_PRIVDEFENA_Msk;
    16e4:	2205      	movs	r2, #5
    16e6:	4b03      	ldr	r3, [pc, #12]	; (16f4 <arm_core_mpu_enable+0x10>)
    16e8:	605a      	str	r2, [r3, #4]
  __ASM volatile ("dsb 0xF":::"memory");
    16ea:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    16ee:	f3bf 8f6f 	isb	sy

	/* Make sure that all the registers are set before proceeding */
	__DSB();
	__ISB();
}
    16f2:	4770      	bx	lr
    16f4:	e000ed90 	.word	0xe000ed90

000016f8 <arm_core_mpu_disable>:
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
    16f8:	f3bf 8f5f 	dmb	sy
{
	/* Force any outstanding transfers to complete before disabling MPU */
	__DMB();

	/* Disable MPU */
	MPU->CTRL = 0;
    16fc:	2200      	movs	r2, #0
    16fe:	4b01      	ldr	r3, [pc, #4]	; (1704 <arm_core_mpu_disable+0xc>)
    1700:	605a      	str	r2, [r3, #4]
}
    1702:	4770      	bx	lr
    1704:	e000ed90 	.word	0xe000ed90

00001708 <arm_mpu_init>:
 *
 * This function provides the default configuration mechanism for the Memory
 * Protection Unit (MPU).
 */
static int arm_mpu_init(struct device *arg)
{
    1708:	b570      	push	{r4, r5, r6, lr}
	u32_t r_index;

	if (mpu_config.num_regions > get_num_regions()) {
    170a:	4d0e      	ldr	r5, [pc, #56]	; (1744 <arm_mpu_init+0x3c>)
    170c:	682e      	ldr	r6, [r5, #0]
    170e:	2e10      	cmp	r6, #16
    1710:	d815      	bhi.n	173e <arm_mpu_init+0x36>

	/* Architecture-specific configuration */
	mpu_init();

	/* Program fixed regions configured at SOC definition. */
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    1712:	2400      	movs	r4, #0
	arm_core_mpu_disable();
    1714:	f7ff fff0 	bl	16f8 <arm_core_mpu_disable>
	MPU->MAIR0 =
    1718:	4b0b      	ldr	r3, [pc, #44]	; (1748 <arm_mpu_init+0x40>)
    171a:	4a0c      	ldr	r2, [pc, #48]	; (174c <arm_mpu_init+0x44>)
    171c:	631a      	str	r2, [r3, #48]	; 0x30
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    171e:	42a6      	cmp	r6, r4
    1720:	d105      	bne.n	172e <arm_mpu_init+0x26>
		region_init(r_index, &mpu_config.mpu_regions[r_index]);
	}

	/* Update the number of programmed MPU regions. */
	static_regions_num = mpu_config.num_regions;
    1722:	4b0b      	ldr	r3, [pc, #44]	; (1750 <arm_mpu_init+0x48>)
    1724:	701e      	strb	r6, [r3, #0]


	arm_core_mpu_enable();
    1726:	f7ff ffdd 	bl	16e4 <arm_core_mpu_enable>
	__ASSERT(
		(MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos ==
		DT_NUM_MPU_REGIONS,
		"Invalid number of MPU regions\n");
#endif /* CORTEX_M0PLUS || CPU_CORTEX_M3 || CPU_CORTEX_M4 */
	return 0;
    172a:	2000      	movs	r0, #0
}
    172c:	bd70      	pop	{r4, r5, r6, pc}
		region_init(r_index, &mpu_config.mpu_regions[r_index]);
    172e:	6869      	ldr	r1, [r5, #4]
    1730:	4620      	mov	r0, r4
    1732:	eb01 1104 	add.w	r1, r1, r4, lsl #4
    1736:	f7ff ff23 	bl	1580 <region_init>
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    173a:	3401      	adds	r4, #1
    173c:	e7ef      	b.n	171e <arm_mpu_init+0x16>
		return -1;
    173e:	f04f 30ff 	mov.w	r0, #4294967295
    1742:	e7f3      	b.n	172c <arm_mpu_init+0x24>
    1744:	0000433c 	.word	0x0000433c
    1748:	e000ed90 	.word	0xe000ed90
    174c:	0044ffaa 	.word	0x0044ffaa
    1750:	2000068c 	.word	0x2000068c

00001754 <arm_core_mpu_configure_static_mpu_regions>:
{
    1754:	b510      	push	{r4, lr}
static int mpu_configure_static_mpu_regions(const struct k_mem_partition
	*static_regions[], const u8_t regions_num,
	const u32_t background_area_base,
	const u32_t background_area_end)
{
	int mpu_reg_index = static_regions_num;
    1756:	4c03      	ldr	r4, [pc, #12]	; (1764 <arm_core_mpu_configure_static_mpu_regions+0x10>)
	 * given boundaries.
	 */
	ARG_UNUSED(background_area_base);
	ARG_UNUSED(background_area_end);

	mpu_reg_index = mpu_configure_regions(static_regions,
    1758:	7822      	ldrb	r2, [r4, #0]
    175a:	f7ff ff29 	bl	15b0 <mpu_configure_regions.constprop.1>
		regions_num, mpu_reg_index, true);

	static_regions_num = mpu_reg_index;
    175e:	7020      	strb	r0, [r4, #0]
}
    1760:	bd10      	pop	{r4, pc}
    1762:	bf00      	nop
    1764:	2000068c 	.word	0x2000068c

00001768 <arm_core_mpu_mark_areas_for_dynamic_regions>:
{
    1768:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    176c:	4689      	mov	r9, r1
    176e:	4607      	mov	r7, r0
{
	/* In ARMv8-M architecture we need to store the index values
	 * and the default configuration of the MPU regions, inside
	 * which dynamic memory regions may be programmed at run-time.
	 */
	for (int i = 0; i < dyn_region_areas_num; i++) {
    1770:	2600      	movs	r6, #0
    1772:	f8df 8090 	ldr.w	r8, [pc, #144]	; 1804 <arm_core_mpu_mark_areas_for_dynamic_regions+0x9c>
		if (dyn_reg_info[i].index == -EINVAL) {

			return -EINVAL;
		}

		if (dyn_reg_info[i].index >= static_regions_num) {
    1776:	f8df a090 	ldr.w	sl, [pc, #144]	; 1808 <arm_core_mpu_mark_areas_for_dynamic_regions+0xa0>
	MPU->RNR = index;
    177a:	4c21      	ldr	r4, [pc, #132]	; (1800 <arm_core_mpu_mark_areas_for_dynamic_regions+0x98>)
	for (int i = 0; i < dyn_region_areas_num; i++) {
    177c:	454e      	cmp	r6, r9
    177e:	da19      	bge.n	17b4 <arm_core_mpu_mark_areas_for_dynamic_regions+0x4c>
		if (dyn_region_areas[i].size == 0U) {
    1780:	f8d7 b004 	ldr.w	fp, [r7, #4]
    1784:	f1bb 0f00 	cmp.w	fp, #0
    1788:	d036      	beq.n	17f8 <arm_core_mpu_mark_areas_for_dynamic_regions+0x90>
			get_region_index(dyn_region_areas[i].start,
    178a:	683b      	ldr	r3, [r7, #0]
	u32_t region_start_addr = arm_cmse_mpu_region_get(start);
    178c:	4618      	mov	r0, r3
    178e:	9301      	str	r3, [sp, #4]
    1790:	f001 ff15 	bl	35be <arm_cmse_mpu_region_get>
	u32_t region_end_addr = arm_cmse_mpu_region_get(start + size - 1);
    1794:	9b01      	ldr	r3, [sp, #4]
	u32_t region_start_addr = arm_cmse_mpu_region_get(start);
    1796:	4605      	mov	r5, r0
	u32_t region_end_addr = arm_cmse_mpu_region_get(start + size - 1);
    1798:	eb0b 0003 	add.w	r0, fp, r3
    179c:	3801      	subs	r0, #1
    179e:	f001 ff0e 	bl	35be <arm_cmse_mpu_region_get>
    17a2:	2314      	movs	r3, #20
	if (region_start_addr == region_end_addr) {
    17a4:	4285      	cmp	r5, r0
    17a6:	fb03 f306 	mul.w	r3, r3, r6
    17aa:	d006      	beq.n	17ba <arm_core_mpu_mark_areas_for_dynamic_regions+0x52>
		dyn_reg_info[i].index =
    17ac:	f06f 0215 	mvn.w	r2, #21
    17b0:	f848 2003 	str.w	r2, [r8, r3]
}
    17b4:	b003      	add	sp, #12
    17b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (dyn_reg_info[i].index == -EINVAL) {
    17ba:	f115 0f16 	cmn.w	r5, #22
		dyn_reg_info[i].index =
    17be:	f848 5003 	str.w	r5, [r8, r3]
		if (dyn_reg_info[i].index == -EINVAL) {
    17c2:	d0f7      	beq.n	17b4 <arm_core_mpu_mark_areas_for_dynamic_regions+0x4c>
		if (dyn_reg_info[i].index >= static_regions_num) {
    17c4:	f89a 2000 	ldrb.w	r2, [sl]
    17c8:	42aa      	cmp	r2, r5
    17ca:	ddf3      	ble.n	17b4 <arm_core_mpu_mark_areas_for_dynamic_regions+0x4c>
	MPU->RNR = index;
    17cc:	60a5      	str	r5, [r4, #8]
	attr->rbar = MPU->RBAR &
    17ce:	4443      	add	r3, r8
	MPU->RNR = index;
    17d0:	60a5      	str	r5, [r4, #8]
	attr->rbar = MPU->RBAR &
    17d2:	68e0      	ldr	r0, [r4, #12]
    17d4:	7b19      	ldrb	r1, [r3, #12]
    17d6:	f360 0104 	bfi	r1, r0, #0, #5
    17da:	7319      	strb	r1, [r3, #12]
	attr->mair_idx = (MPU->RLAR & MPU_RLAR_AttrIndx_Msk) >>
    17dc:	6921      	ldr	r1, [r4, #16]
    17de:	7b18      	ldrb	r0, [r3, #12]
    17e0:	0849      	lsrs	r1, r1, #1
    17e2:	f361 1047 	bfi	r0, r1, #5, #3
    17e6:	7318      	strb	r0, [r3, #12]
	region_conf->base = (MPU->RBAR & MPU_RBAR_BASE_Msk);
    17e8:	68e2      	ldr	r2, [r4, #12]
    17ea:	f022 021f 	bic.w	r2, r2, #31
    17ee:	605a      	str	r2, [r3, #4]
	region_conf->attr.r_limit = MPU->RLAR & MPU_RLAR_LIMIT_Msk;
    17f0:	6922      	ldr	r2, [r4, #16]
    17f2:	f022 021f 	bic.w	r2, r2, #31
    17f6:	611a      	str	r2, [r3, #16]
	for (int i = 0; i < dyn_region_areas_num; i++) {
    17f8:	3601      	adds	r6, #1
    17fa:	370c      	adds	r7, #12
    17fc:	e7be      	b.n	177c <arm_core_mpu_mark_areas_for_dynamic_regions+0x14>
    17fe:	bf00      	nop
    1800:	e000ed90 	.word	0xe000ed90
    1804:	20000544 	.word	0x20000544
    1808:	2000068c 	.word	0x2000068c

0000180c <arm_core_mpu_configure_dynamic_mpu_regions>:
{
    180c:	b570      	push	{r4, r5, r6, lr}
 * performed, the error signal is propagated to the caller of the function.
 */
static int mpu_configure_dynamic_mpu_regions(const struct k_mem_partition
	*dynamic_regions[], u8_t regions_num)
{
	int mpu_reg_index = static_regions_num;
    180e:	4b0c      	ldr	r3, [pc, #48]	; (1840 <arm_core_mpu_configure_dynamic_mpu_regions+0x34>)
    1810:	460e      	mov	r6, r1
    1812:	781c      	ldrb	r4, [r3, #0]
    1814:	4605      	mov	r5, r0
    1816:	4623      	mov	r3, r4
  mpu->RLAR = 0U;
    1818:	2100      	movs	r1, #0
  mpu->RNR = rnr;
    181a:	4a0a      	ldr	r2, [pc, #40]	; (1844 <arm_core_mpu_configure_dynamic_mpu_regions+0x38>)

	/* Disable all MPU regions except for the static ones. */
	for (int i = mpu_reg_index; i < get_num_regions(); i++) {
    181c:	2b0f      	cmp	r3, #15
    181e:	dd0b      	ble.n	1838 <arm_core_mpu_configure_dynamic_mpu_regions+0x2c>

	/* Reset MPU regions inside which dynamic memory regions may
	 * be programmed.
	 */
	for (int i = 0; i < MPU_DYNAMIC_REGION_AREAS_NUM; i++) {
		region_init(dyn_reg_info[i].index,
    1820:	4b09      	ldr	r3, [pc, #36]	; (1848 <arm_core_mpu_configure_dynamic_mpu_regions+0x3c>)
    1822:	1d19      	adds	r1, r3, #4
    1824:	6818      	ldr	r0, [r3, #0]
    1826:	f7ff feab 	bl	1580 <region_init>
	/* In ARMv8-M architecture the dynamic regions are programmed on SRAM,
	 * forming a full partition of the background area, specified by the
	 * given boundaries.
	 */

	mpu_reg_index = mpu_configure_regions(dynamic_regions,
    182a:	4622      	mov	r2, r4
    182c:	4631      	mov	r1, r6
    182e:	4628      	mov	r0, r5
}
    1830:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    1834:	f7ff bebc 	b.w	15b0 <mpu_configure_regions.constprop.1>
    1838:	6093      	str	r3, [r2, #8]
  mpu->RLAR = 0U;
    183a:	6111      	str	r1, [r2, #16]
	for (int i = mpu_reg_index; i < get_num_regions(); i++) {
    183c:	3301      	adds	r3, #1
    183e:	e7ed      	b.n	181c <arm_core_mpu_configure_dynamic_mpu_regions+0x10>
    1840:	2000068c 	.word	0x2000068c
    1844:	e000ed90 	.word	0xe000ed90
    1848:	20000544 	.word	0x20000544

0000184c <__stdout_hook_install>:

static int (*_stdout_hook)(int) = _stdout_hook_default;

void __stdout_hook_install(int (*hook)(int))
{
	_stdout_hook = hook;
    184c:	4b01      	ldr	r3, [pc, #4]	; (1854 <__stdout_hook_install+0x8>)
    184e:	6018      	str	r0, [r3, #0]
}
    1850:	4770      	bx	lr
    1852:	bf00      	nop
    1854:	200013f8 	.word	0x200013f8

00001858 <uarte_nrfx_configure>:
	return 0;
}

static int uarte_nrfx_configure(struct device *dev,
				const struct uart_config *cfg)
{
    1858:	b5f0      	push	{r4, r5, r6, r7, lr}
	nrf_uarte_hwfc_t hwfc;
#ifdef UARTE_CONFIG_STOP_Two
	bool two_stop_bits = false;
#endif

	switch (cfg->stop_bits) {
    185a:	794b      	ldrb	r3, [r1, #5]
    185c:	2b01      	cmp	r3, #1
    185e:	d029      	beq.n	18b4 <uarte_nrfx_configure+0x5c>
    1860:	2b03      	cmp	r3, #3
    1862:	d124      	bne.n	18ae <uarte_nrfx_configure+0x56>
	case UART_CFG_STOP_BITS_1:
		break;
#ifdef UARTE_CONFIG_STOP_Two
	case UART_CFG_STOP_BITS_2:
		two_stop_bits = true;
    1864:	2601      	movs	r6, #1
#endif
	default:
		return -ENOTSUP;
	}

	if (cfg->data_bits != UART_CFG_DATA_BITS_8) {
    1866:	798b      	ldrb	r3, [r1, #6]
    1868:	2b03      	cmp	r3, #3
    186a:	d120      	bne.n	18ae <uarte_nrfx_configure+0x56>
		return -ENOTSUP;
	}

	switch (cfg->flow_ctrl) {
    186c:	79cd      	ldrb	r5, [r1, #7]
    186e:	b12d      	cbz	r5, 187c <uarte_nrfx_configure+0x24>
    1870:	2d01      	cmp	r5, #1
    1872:	d11c      	bne.n	18ae <uarte_nrfx_configure+0x56>
	return dev->config->config_info;
    1874:	6803      	ldr	r3, [r0, #0]
	case UART_CFG_FLOW_CTRL_NONE:
		hwfc = NRF_UARTE_HWFC_DISABLED;
		break;
	case UART_CFG_FLOW_CTRL_RTS_CTS:
		if (get_dev_config(dev)->rts_cts_pins_set) {
    1876:	689b      	ldr	r3, [r3, #8]
    1878:	791b      	ldrb	r3, [r3, #4]
    187a:	b1c3      	cbz	r3, 18ae <uarte_nrfx_configure+0x56>
		break;
	default:
		return -ENOTSUP;
	}

	switch (cfg->parity) {
    187c:	790a      	ldrb	r2, [r1, #4]
    187e:	b112      	cbz	r2, 1886 <uarte_nrfx_configure+0x2e>
    1880:	2a02      	cmp	r2, #2
    1882:	d114      	bne.n	18ae <uarte_nrfx_configure+0x56>
	case UART_CFG_PARITY_NONE:
		parity = NRF_UARTE_PARITY_EXCLUDED;
		break;
	case UART_CFG_PARITY_EVEN:
		parity = NRF_UARTE_PARITY_INCLUDED;
    1884:	220e      	movs	r2, #14
	switch (baudrate) {
    1886:	f647 2712 	movw	r7, #31250	; 0x7a12
	return dev->config->config_info;
    188a:	6803      	ldr	r3, [r0, #0]
	return config->uarte_regs;
    188c:	689b      	ldr	r3, [r3, #8]
    188e:	681c      	ldr	r4, [r3, #0]
	switch (baudrate) {
    1890:	680b      	ldr	r3, [r1, #0]
    1892:	42bb      	cmp	r3, r7
    1894:	d074      	beq.n	1980 <uarte_nrfx_configure+0x128>
    1896:	d829      	bhi.n	18ec <uarte_nrfx_configure+0x94>
    1898:	f5b3 5f96 	cmp.w	r3, #4800	; 0x12c0
    189c:	d06a      	beq.n	1974 <uarte_nrfx_configure+0x11c>
    189e:	d814      	bhi.n	18ca <uarte_nrfx_configure+0x72>
    18a0:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
    18a4:	d04f      	beq.n	1946 <uarte_nrfx_configure+0xee>
    18a6:	d807      	bhi.n	18b8 <uarte_nrfx_configure+0x60>
    18a8:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
    18ac:	d07d      	beq.n	19aa <uarte_nrfx_configure+0x152>
		return -ENOTSUP;
    18ae:	f06f 0022 	mvn.w	r0, #34	; 0x22
    18b2:	e05b      	b.n	196c <uarte_nrfx_configure+0x114>
	bool two_stop_bits = false;
    18b4:	2600      	movs	r6, #0
    18b6:	e7d6      	b.n	1866 <uarte_nrfx_configure+0xe>
	switch (baudrate) {
    18b8:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
    18bc:	d057      	beq.n	196e <uarte_nrfx_configure+0x116>
    18be:	f5b3 6f16 	cmp.w	r3, #2400	; 0x960
    18c2:	d1f4      	bne.n	18ae <uarte_nrfx_configure+0x56>
		nrf_baudrate = NRF_UARTE_BAUDRATE_2400;
    18c4:	f44f 231d 	mov.w	r3, #643072	; 0x9d000
    18c8:	e03f      	b.n	194a <uarte_nrfx_configure+0xf2>
	switch (baudrate) {
    18ca:	f5b3 5f61 	cmp.w	r3, #14400	; 0x3840
    18ce:	d053      	beq.n	1978 <uarte_nrfx_configure+0x120>
    18d0:	d804      	bhi.n	18dc <uarte_nrfx_configure+0x84>
    18d2:	f5b3 5f16 	cmp.w	r3, #9600	; 0x2580
    18d6:	d1ea      	bne.n	18ae <uarte_nrfx_configure+0x56>
		nrf_baudrate = NRF_UARTE_BAUDRATE_9600;
    18d8:	4b35      	ldr	r3, [pc, #212]	; (19b0 <uarte_nrfx_configure+0x158>)
    18da:	e036      	b.n	194a <uarte_nrfx_configure+0xf2>
	switch (baudrate) {
    18dc:	f5b3 4f96 	cmp.w	r3, #19200	; 0x4b00
    18e0:	d04c      	beq.n	197c <uarte_nrfx_configure+0x124>
    18e2:	f5b3 4fe1 	cmp.w	r3, #28800	; 0x7080
    18e6:	d1e2      	bne.n	18ae <uarte_nrfx_configure+0x56>
		nrf_baudrate = NRF_UARTE_BAUDRATE_28800;
    18e8:	4b32      	ldr	r3, [pc, #200]	; (19b4 <uarte_nrfx_configure+0x15c>)
    18ea:	e02e      	b.n	194a <uarte_nrfx_configure+0xf2>
	switch (baudrate) {
    18ec:	f5b3 3fe1 	cmp.w	r3, #115200	; 0x1c200
    18f0:	d04f      	beq.n	1992 <uarte_nrfx_configure+0x13a>
    18f2:	d812      	bhi.n	191a <uarte_nrfx_configure+0xc2>
    18f4:	f64d 27c0 	movw	r7, #56000	; 0xdac0
    18f8:	42bb      	cmp	r3, r7
    18fa:	d044      	beq.n	1986 <uarte_nrfx_configure+0x12e>
    18fc:	d805      	bhi.n	190a <uarte_nrfx_configure+0xb2>
    18fe:	f5b3 4f16 	cmp.w	r3, #38400	; 0x9600
    1902:	d1d4      	bne.n	18ae <uarte_nrfx_configure+0x56>
		nrf_baudrate = NRF_UARTE_BAUDRATE_38400;
    1904:	f44f 031d 	mov.w	r3, #10289152	; 0x9d0000
    1908:	e01f      	b.n	194a <uarte_nrfx_configure+0xf2>
	switch (baudrate) {
    190a:	f5b3 4f61 	cmp.w	r3, #57600	; 0xe100
    190e:	d03d      	beq.n	198c <uarte_nrfx_configure+0x134>
    1910:	f5b3 3f96 	cmp.w	r3, #76800	; 0x12c00
    1914:	d1cb      	bne.n	18ae <uarte_nrfx_configure+0x56>
		nrf_baudrate = NRF_UARTE_BAUDRATE_76800;
    1916:	4b28      	ldr	r3, [pc, #160]	; (19b8 <uarte_nrfx_configure+0x160>)
    1918:	e017      	b.n	194a <uarte_nrfx_configure+0xf2>
	switch (baudrate) {
    191a:	f5b3 2fe1 	cmp.w	r3, #460800	; 0x70800
    191e:	d03e      	beq.n	199e <uarte_nrfx_configure+0x146>
    1920:	d808      	bhi.n	1934 <uarte_nrfx_configure+0xdc>
    1922:	f5b3 3f61 	cmp.w	r3, #230400	; 0x38400
    1926:	d037      	beq.n	1998 <uarte_nrfx_configure+0x140>
    1928:	4f24      	ldr	r7, [pc, #144]	; (19bc <uarte_nrfx_configure+0x164>)
    192a:	42bb      	cmp	r3, r7
    192c:	d1bf      	bne.n	18ae <uarte_nrfx_configure+0x56>
		nrf_baudrate = NRF_UARTE_BAUDRATE_250000;
    192e:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
    1932:	e00a      	b.n	194a <uarte_nrfx_configure+0xf2>
	switch (baudrate) {
    1934:	f5b3 2f61 	cmp.w	r3, #921600	; 0xe1000
    1938:	d034      	beq.n	19a4 <uarte_nrfx_configure+0x14c>
    193a:	4f21      	ldr	r7, [pc, #132]	; (19c0 <uarte_nrfx_configure+0x168>)
    193c:	42bb      	cmp	r3, r7
    193e:	d1b6      	bne.n	18ae <uarte_nrfx_configure+0x56>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1000000;
    1940:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    1944:	e001      	b.n	194a <uarte_nrfx_configure+0xf2>
		nrf_baudrate = 0x00027000;
    1946:	f44f 331c 	mov.w	r3, #159744	; 0x27000

__STATIC_INLINE void nrf_uarte_configure(NRF_UARTE_Type   * p_reg,
                                         nrf_uarte_parity_t parity,
                                         nrf_uarte_hwfc_t   hwfc)
{
    p_reg->CONFIG = (uint32_t)parity | (uint32_t)hwfc;
    194a:	432a      	orrs	r2, r5
}

__STATIC_INLINE void nrf_uarte_baudrate_set(NRF_UARTE_Type   * p_reg, nrf_uarte_baudrate_t baudrate)
{
    p_reg->BAUDRATE = baudrate;
    194c:	f8c4 3524 	str.w	r3, [r4, #1316]	; 0x524
    p_reg->CONFIG = (uint32_t)parity | (uint32_t)hwfc;
    1950:	f8c4 256c 	str.w	r2, [r4, #1388]	; 0x56c
	}

	nrf_uarte_configure(get_uarte_instance(dev), parity, hwfc);

#ifdef UARTE_CONFIG_STOP_Two
	if (two_stop_bits) {
    1954:	b12e      	cbz	r6, 1962 <uarte_nrfx_configure+0x10a>
		/* TODO Change this to nrfx HAL function when available */
		get_uarte_instance(dev)->CONFIG |=
    1956:	f8d4 356c 	ldr.w	r3, [r4, #1388]	; 0x56c
    195a:	f043 0310 	orr.w	r3, r3, #16
    195e:	f8c4 356c 	str.w	r3, [r4, #1388]	; 0x56c
			UARTE_CONFIG_STOP_Two << UARTE_CONFIG_STOP_Pos;
	}
#endif
	get_dev_data(dev)->uart_config = *cfg;
    1962:	6883      	ldr	r3, [r0, #8]
    1964:	c903      	ldmia	r1, {r0, r1}
    1966:	e883 0003 	stmia.w	r3, {r0, r1}

	return 0;
    196a:	2000      	movs	r0, #0
}
    196c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		nrf_baudrate = NRF_UARTE_BAUDRATE_1200;
    196e:	f44f 239e 	mov.w	r3, #323584	; 0x4f000
    1972:	e7ea      	b.n	194a <uarte_nrfx_configure+0xf2>
		nrf_baudrate = NRF_UARTE_BAUDRATE_4800;
    1974:	4b13      	ldr	r3, [pc, #76]	; (19c4 <uarte_nrfx_configure+0x16c>)
    1976:	e7e8      	b.n	194a <uarte_nrfx_configure+0xf2>
		nrf_baudrate = NRF_UARTE_BAUDRATE_14400;
    1978:	4b13      	ldr	r3, [pc, #76]	; (19c8 <uarte_nrfx_configure+0x170>)
    197a:	e7e6      	b.n	194a <uarte_nrfx_configure+0xf2>
		nrf_baudrate = NRF_UARTE_BAUDRATE_19200;
    197c:	4b13      	ldr	r3, [pc, #76]	; (19cc <uarte_nrfx_configure+0x174>)
    197e:	e7e4      	b.n	194a <uarte_nrfx_configure+0xf2>
		nrf_baudrate = NRF_UARTE_BAUDRATE_31250;
    1980:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
    1984:	e7e1      	b.n	194a <uarte_nrfx_configure+0xf2>
		nrf_baudrate = NRF_UARTE_BAUDRATE_56000;
    1986:	f44f 0365 	mov.w	r3, #15007744	; 0xe50000
    198a:	e7de      	b.n	194a <uarte_nrfx_configure+0xf2>
		nrf_baudrate = NRF_UARTE_BAUDRATE_57600;
    198c:	f44f 036b 	mov.w	r3, #15400960	; 0xeb0000
    1990:	e7db      	b.n	194a <uarte_nrfx_configure+0xf2>
		nrf_baudrate = NRF_UARTE_BAUDRATE_115200;
    1992:	f04f 73eb 	mov.w	r3, #30801920	; 0x1d60000
    1996:	e7d8      	b.n	194a <uarte_nrfx_configure+0xf2>
		nrf_baudrate = NRF_UARTE_BAUDRATE_230400;
    1998:	f04f 736c 	mov.w	r3, #61865984	; 0x3b00000
    199c:	e7d5      	b.n	194a <uarte_nrfx_configure+0xf2>
		nrf_baudrate = NRF_UARTE_BAUDRATE_460800;
    199e:	f04f 63e8 	mov.w	r3, #121634816	; 0x7400000
    19a2:	e7d2      	b.n	194a <uarte_nrfx_configure+0xf2>
		nrf_baudrate = NRF_UARTE_BAUDRATE_921600;
    19a4:	f04f 6370 	mov.w	r3, #251658240	; 0xf000000
    19a8:	e7cf      	b.n	194a <uarte_nrfx_configure+0xf2>
		nrf_baudrate = 0x00014000;
    19aa:	f44f 33a0 	mov.w	r3, #81920	; 0x14000
    19ae:	e7cc      	b.n	194a <uarte_nrfx_configure+0xf2>
    19b0:	00275000 	.word	0x00275000
    19b4:	0075c000 	.word	0x0075c000
    19b8:	013a9000 	.word	0x013a9000
    19bc:	0003d090 	.word	0x0003d090
    19c0:	000f4240 	.word	0x000f4240
    19c4:	0013b000 	.word	0x0013b000
    19c8:	003af000 	.word	0x003af000
    19cc:	004ea000 	.word	0x004ea000

000019d0 <uarte_0_init>:
	return dev->config->config_info;
    19d0:	6802      	ldr	r2, [r0, #0]
	#if defined(DT_NORDIC_NRF_UARTE_UART_0_RTS_PIN) && \
	    defined(DT_NORDIC_NRF_UARTE_UART_0_CTS_PIN)
		#define UARTE_0_CONFIG_RTS_CTS 1
	#endif

	UART_NRF_UARTE_DEVICE(0);
    19d2:	b570      	push	{r4, r5, r6, lr}
	return config->uarte_regs;
    19d4:	6892      	ldr	r2, [r2, #8]
}


__STATIC_INLINE void nrf_gpio_port_out_set(NRF_GPIO_Type * p_reg, uint32_t set_mask)
{
    p_reg->OUTSET = set_mask;
    19d6:	4b18      	ldr	r3, [pc, #96]	; (1a38 <uarte_0_init+0x68>)
    19d8:	6814      	ldr	r4, [r2, #0]
    19da:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
	struct uarte_nrfx_data *data = get_dev_data(dev);
    19de:	6885      	ldr	r5, [r0, #8]
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
    19e0:	2103      	movs	r1, #3
    p_reg->OUTSET = set_mask;
    19e2:	609a      	str	r2, [r3, #8]
    p_reg->PSEL.TXD = pseltxd;
    19e4:	261d      	movs	r6, #29
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
    19e6:	2200      	movs	r2, #0
    19e8:	f8c3 1274 	str.w	r1, [r3, #628]	; 0x274
    19ec:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270
    19f0:	f8c4 650c 	str.w	r6, [r4, #1292]	; 0x50c
    p_reg->PSEL.RXD = pselrxd;
    19f4:	261c      	movs	r6, #28
    19f6:	f8c4 6514 	str.w	r6, [r4, #1300]	; 0x514
    p_reg->OUTSET = set_mask;
    19fa:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000
    19fe:	609e      	str	r6, [r3, #8]
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
    1a00:	f8c3 126c 	str.w	r1, [r3, #620]	; 0x26c
    1a04:	f8c3 2268 	str.w	r2, [r3, #616]	; 0x268
    p_reg->PSEL.RTS = pselrts;
    1a08:	231b      	movs	r3, #27
    1a0a:	f8c4 3508 	str.w	r3, [r4, #1288]	; 0x508
    p_reg->PSEL.CTS = pselcts;
    1a0e:	231a      	movs	r3, #26
	err = uarte_nrfx_configure(dev, &get_dev_data(dev)->uart_config);
    1a10:	4629      	mov	r1, r5
    1a12:	f8c4 3510 	str.w	r3, [r4, #1296]	; 0x510
    1a16:	f7ff ff1f 	bl	1858 <uarte_nrfx_configure>
	if (err) {
    1a1a:	b958      	cbnz	r0, 1a34 <uarte_0_init+0x64>
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
    1a1c:	2308      	movs	r3, #8
    1a1e:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
	nrf_uarte_rx_buffer_set(uarte, &data->rx_data, 1);
    1a22:	441d      	add	r5, r3
__STATIC_INLINE void nrf_uarte_rx_buffer_set(NRF_UARTE_Type * p_reg,
                                             uint8_t *        p_buffer,
                                             size_t           length)
{
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
    p_reg->RXD.MAXCNT = length;
    1a24:	2301      	movs	r3, #1
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    1a26:	f8c4 0110 	str.w	r0, [r4, #272]	; 0x110
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
    1a2a:	f8c4 5534 	str.w	r5, [r4, #1332]	; 0x534
    p_reg->RXD.MAXCNT = length;
    1a2e:	f8c4 3538 	str.w	r3, [r4, #1336]	; 0x538
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    1a32:	6023      	str	r3, [r4, #0]
	UART_NRF_UARTE_DEVICE(0);
    1a34:	bd70      	pop	{r4, r5, r6, pc}
    1a36:	bf00      	nop
    1a38:	50842500 	.word	0x50842500

00001a3c <abi_getter>:
extern const struct fw_info_abi * const _ext_abis_start[];
extern const u32_t _ext_abis_size;
__noinit fw_info_abi_getter abi_getter_in;

int abi_getter(u32_t id, u32_t index, const struct fw_info_abi **abi)
{
    1a3c:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (!abi) {
    1a3e:	b1da      	cbz	r2, 1a78 <abi_getter+0x3c>
		return -EFAULT;
	}

	bool id_found = false;

	for (u32_t i = 0; i < (u32_t)&_ext_abis_size; i++) {
    1a40:	2300      	movs	r3, #0
	bool id_found = false;
    1a42:	461c      	mov	r4, r3
	for (u32_t i = 0; i < (u32_t)&_ext_abis_size; i++) {
    1a44:	4e0e      	ldr	r6, [pc, #56]	; (1a80 <abi_getter+0x44>)
		const struct fw_info_abi *ext_abi = _ext_abis_start[i];
    1a46:	4f0f      	ldr	r7, [pc, #60]	; (1a84 <abi_getter+0x48>)
	for (u32_t i = 0; i < (u32_t)&_ext_abis_size; i++) {
    1a48:	42b3      	cmp	r3, r6
    1a4a:	d306      	bcc.n	1a5a <abi_getter+0x1e>
				*abi = ext_abi;
				return 0;
			}
		}
	}
	return id_found ? -EBADF : -ENOENT;
    1a4c:	2c00      	cmp	r4, #0
    1a4e:	bf14      	ite	ne
    1a50:	f06f 0008 	mvnne.w	r0, #8
    1a54:	f06f 0001 	mvneq.w	r0, #1
    1a58:	e009      	b.n	1a6e <abi_getter+0x32>
		const struct fw_info_abi *ext_abi = _ext_abis_start[i];
    1a5a:	f857 5023 	ldr.w	r5, [r7, r3, lsl #2]
		if (ext_abi->abi_id == id) {
    1a5e:	f8d5 c00c 	ldr.w	ip, [r5, #12]
    1a62:	4560      	cmp	r0, ip
    1a64:	d106      	bne.n	1a74 <abi_getter+0x38>
			if (index-- == 0) {
    1a66:	1e4c      	subs	r4, r1, #1
    1a68:	b911      	cbnz	r1, 1a70 <abi_getter+0x34>
				return 0;
    1a6a:	4608      	mov	r0, r1
				*abi = ext_abi;
    1a6c:	6015      	str	r5, [r2, #0]
}
    1a6e:	bdf0      	pop	{r4, r5, r6, r7, pc}
			if (index-- == 0) {
    1a70:	4621      	mov	r1, r4
			id_found = true;
    1a72:	2401      	movs	r4, #1
	for (u32_t i = 0; i < (u32_t)&_ext_abis_size; i++) {
    1a74:	3301      	adds	r3, #1
    1a76:	e7e7      	b.n	1a48 <abi_getter+0xc>
		return -EFAULT;
    1a78:	f06f 000d 	mvn.w	r0, #13
    1a7c:	e7f7      	b.n	1a6e <abi_getter+0x32>
    1a7e:	bf00      	nop
    1a80:	00000000 	.word	0x00000000
    1a84:	00004a44 	.word	0x00004a44

00001a88 <SystemInit>:
        /* Perform Secure-mode initialization routines. */

        /* Set all ARM SAU regions to NonSecure if TrustZone extensions are enabled.
        * Nordic SPU should handle Secure Attribution tasks */
        #if defined (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U)
          SAU->CTRL |= (1 << SAU_CTRL_ALLNS_Pos);
    1a88:	4a52      	ldr	r2, [pc, #328]	; (1bd4 <SystemInit+0x14c>)
    1a8a:	6813      	ldr	r3, [r2, #0]
    1a8c:	f043 0302 	orr.w	r3, r3, #2
    1a90:	6013      	str	r3, [r2, #0]
        #endif

        /* Trimming of the device. Copy all the trimming values from FICR into the target addresses. Trim 
         until one ADDR is not initialized. */
        uint32_t index = 0;
        for (index = 0; index < 256ul && NRF_FICR_S->TRIMCNF[index].ADDR != 0xFFFFFFFFul; index++){
    1a92:	2200      	movs	r2, #0
    1a94:	00d3      	lsls	r3, r2, #3
    1a96:	f503 037f 	add.w	r3, r3, #16711680	; 0xff0000
    1a9a:	f8d3 1300 	ldr.w	r1, [r3, #768]	; 0x300
    1a9e:	3101      	adds	r1, #1
    1aa0:	d008      	beq.n	1ab4 <SystemInit+0x2c>
          #if defined ( __ICCARM__ )
              #pragma diag_suppress=Pa082
          #endif
          *(volatile uint32_t *)NRF_FICR_S->TRIMCNF[index].ADDR = NRF_FICR_S->TRIMCNF[index].DATA;
    1aa2:	f8d3 1300 	ldr.w	r1, [r3, #768]	; 0x300
        for (index = 0; index < 256ul && NRF_FICR_S->TRIMCNF[index].ADDR != 0xFFFFFFFFul; index++){
    1aa6:	3201      	adds	r2, #1
          *(volatile uint32_t *)NRF_FICR_S->TRIMCNF[index].ADDR = NRF_FICR_S->TRIMCNF[index].DATA;
    1aa8:	f8d3 3304 	ldr.w	r3, [r3, #772]	; 0x304
        for (index = 0; index < 256ul && NRF_FICR_S->TRIMCNF[index].ADDR != 0xFFFFFFFFul; index++){
    1aac:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
          *(volatile uint32_t *)NRF_FICR_S->TRIMCNF[index].ADDR = NRF_FICR_S->TRIMCNF[index].DATA;
    1ab0:	600b      	str	r3, [r1, #0]
        for (index = 0; index < 256ul && NRF_FICR_S->TRIMCNF[index].ADDR != 0xFFFFFFFFul; index++){
    1ab2:	d1ef      	bne.n	1a94 <SystemInit+0xc>
    }
    
    
    bool uicr_HFXOSRC_erased()
    {
        if ((NRF_UICR_S->HFXOSRC & UICR_HFXOSRC_HFXOSRC_Msk) != UICR_HFXOSRC_HFXOSRC_TCXO) {
    1ab4:	4a48      	ldr	r2, [pc, #288]	; (1bd8 <SystemInit+0x150>)
    1ab6:	69d3      	ldr	r3, [r2, #28]
    1ab8:	f013 0301 	ands.w	r3, r3, #1
    1abc:	d03b      	beq.n	1b36 <SystemInit+0xae>
          while (NRF_NVMC_S->READY != NVMC_READY_READY_Ready);
    1abe:	4b47      	ldr	r3, [pc, #284]	; (1bdc <SystemInit+0x154>)
    1ac0:	4619      	mov	r1, r3
    1ac2:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
    1ac6:	2a01      	cmp	r2, #1
    1ac8:	d1fb      	bne.n	1ac2 <SystemInit+0x3a>
          NRF_NVMC_S->CONFIG = NVMC_CONFIG_WEN_Wen;
    1aca:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
          while (NRF_NVMC_S->READY != NVMC_READY_READY_Ready);
    1ace:	f8d1 3400 	ldr.w	r3, [r1, #1024]	; 0x400
    1ad2:	2b01      	cmp	r3, #1
    1ad4:	d1fb      	bne.n	1ace <SystemInit+0x46>
        if ((NRF_UICR_S->HFXOSRC & UICR_HFXOSRC_HFXOSRC_Msk) != UICR_HFXOSRC_HFXOSRC_TCXO) {
    1ad6:	4b40      	ldr	r3, [pc, #256]	; (1bd8 <SystemInit+0x150>)
    1ad8:	69da      	ldr	r2, [r3, #28]
    1ada:	07d2      	lsls	r2, r2, #31
    1adc:	d508      	bpl.n	1af0 <SystemInit+0x68>
            NRF_UICR_S->HFXOSRC = (NRF_UICR_S->HFXOSRC & ~UICR_HFXOSRC_HFXOSRC_Msk) | UICR_HFXOSRC_HFXOSRC_TCXO;
    1ade:	69da      	ldr	r2, [r3, #28]
            while (NRF_NVMC_S->READY != NVMC_READY_READY_Ready);
    1ae0:	493e      	ldr	r1, [pc, #248]	; (1bdc <SystemInit+0x154>)
            NRF_UICR_S->HFXOSRC = (NRF_UICR_S->HFXOSRC & ~UICR_HFXOSRC_HFXOSRC_Msk) | UICR_HFXOSRC_HFXOSRC_TCXO;
    1ae2:	f022 0201 	bic.w	r2, r2, #1
    1ae6:	61da      	str	r2, [r3, #28]
            while (NRF_NVMC_S->READY != NVMC_READY_READY_Ready);
    1ae8:	f8d1 2400 	ldr.w	r2, [r1, #1024]	; 0x400
    1aec:	2a01      	cmp	r2, #1
    1aee:	d1fb      	bne.n	1ae8 <SystemInit+0x60>
        if (NRF_UICR_S->HFXOCNT == 0xFFFFFFFFul) {
    1af0:	6a1a      	ldr	r2, [r3, #32]
    1af2:	3201      	adds	r2, #1
    1af4:	d10a      	bne.n	1b0c <SystemInit+0x84>
            NRF_UICR_S->HFXOCNT = (NRF_UICR_S->HFXOCNT & ~UICR_HFXOCNT_HFXOCNT_Msk) | 0x20;
    1af6:	6a1a      	ldr	r2, [r3, #32]
    1af8:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
    1afc:	f042 0220 	orr.w	r2, r2, #32
    1b00:	621a      	str	r2, [r3, #32]
            while (NRF_NVMC_S->READY != NVMC_READY_READY_Ready);
    1b02:	4a36      	ldr	r2, [pc, #216]	; (1bdc <SystemInit+0x154>)
    1b04:	f8d2 3400 	ldr.w	r3, [r2, #1024]	; 0x400
    1b08:	2b01      	cmp	r3, #1
    1b0a:	d1fb      	bne.n	1b04 <SystemInit+0x7c>
          NRF_NVMC_S->CONFIG = NVMC_CONFIG_WEN_Ren;
    1b0c:	2200      	movs	r2, #0
    1b0e:	4b33      	ldr	r3, [pc, #204]	; (1bdc <SystemInit+0x154>)
    1b10:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
          while (NRF_NVMC_S->READY != NVMC_READY_READY_Ready);
    1b14:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
    1b18:	2a01      	cmp	r2, #1
    1b1a:	d1fb      	bne.n	1b14 <SystemInit+0x8c>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
    1b1c:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
    1b20:	492f      	ldr	r1, [pc, #188]	; (1be0 <SystemInit+0x158>)
    1b22:	4b30      	ldr	r3, [pc, #192]	; (1be4 <SystemInit+0x15c>)
    1b24:	68ca      	ldr	r2, [r1, #12]
    1b26:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
    1b2a:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
    1b2c:	60cb      	str	r3, [r1, #12]
    1b2e:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
    1b32:	bf00      	nop
    1b34:	e7fd      	b.n	1b32 <SystemInit+0xaa>
        if (NRF_UICR_S->HFXOCNT == 0xFFFFFFFFul) {
    1b36:	6a12      	ldr	r2, [r2, #32]
    1b38:	3201      	adds	r2, #1
    1b3a:	d0c0      	beq.n	1abe <SystemInit+0x36>
    }
    

    bool errata_6()
    {
        if (*(uint32_t *)0x00FF0130 == 0x9ul){
    1b3c:	4a2a      	ldr	r2, [pc, #168]	; (1be8 <SystemInit+0x160>)
    1b3e:	6811      	ldr	r1, [r2, #0]
    1b40:	2909      	cmp	r1, #9
    1b42:	d10a      	bne.n	1b5a <SystemInit+0xd2>
            if (*(uint32_t *)0x00FF0134 == 0x01ul){
    1b44:	4929      	ldr	r1, [pc, #164]	; (1bec <SystemInit+0x164>)
    1b46:	6809      	ldr	r1, [r1, #0]
    1b48:	3901      	subs	r1, #1
    1b4a:	2901      	cmp	r1, #1
            NRF_POWER_S->EVENTS_SLEEPENTER = (POWER_EVENTS_SLEEPENTER_EVENTS_SLEEPENTER_NotGenerated << POWER_EVENTS_SLEEPENTER_EVENTS_SLEEPENTER_Pos);
    1b4c:	bf9e      	ittt	ls
    1b4e:	f04f 2150 	movls.w	r1, #1342197760	; 0x50005000
    1b52:	f8c1 3114 	strls.w	r3, [r1, #276]	; 0x114
            NRF_POWER_S->EVENTS_SLEEPEXIT = (POWER_EVENTS_SLEEPEXIT_EVENTS_SLEEPEXIT_NotGenerated << POWER_EVENTS_SLEEPEXIT_EVENTS_SLEEPEXIT_Pos);
    1b56:	f8c1 3118 	strls.w	r3, [r1, #280]	; 0x118
    }

    
    bool errata_14()
    {
        if (*(uint32_t *)0x00FF0130 == 0x9ul){
    1b5a:	6813      	ldr	r3, [r2, #0]
    1b5c:	2b09      	cmp	r3, #9
    1b5e:	d109      	bne.n	1b74 <SystemInit+0xec>
            if (*(uint32_t *)0x00FF0134 == 0x01ul){
    1b60:	4b22      	ldr	r3, [pc, #136]	; (1bec <SystemInit+0x164>)
    1b62:	681b      	ldr	r3, [r3, #0]
    1b64:	2b01      	cmp	r3, #1
            *((volatile uint32_t *)0x50004A38) = 0x01ul;
    1b66:	bf01      	itttt	eq
    1b68:	4a21      	ldreq	r2, [pc, #132]	; (1bf0 <SystemInit+0x168>)
    1b6a:	6013      	streq	r3, [r2, #0]
            NRF_REGULATORS_S->DCDCEN = REGULATORS_DCDCEN_DCDCEN_Enabled << REGULATORS_DCDCEN_DCDCEN_Pos;
    1b6c:	f6a2 2238 	subweq	r2, r2, #2616	; 0xa38
    1b70:	f8c2 3578 	streq.w	r3, [r2, #1400]	; 0x578
    }


    bool errata_15()
    {
        if (*(uint32_t *)0x00FF0130 == 0x9ul){
    1b74:	4b1c      	ldr	r3, [pc, #112]	; (1be8 <SystemInit+0x160>)
    1b76:	681a      	ldr	r2, [r3, #0]
    1b78:	2a09      	cmp	r2, #9
    1b7a:	d10b      	bne.n	1b94 <SystemInit+0x10c>
            if (*(uint32_t *)0x00FF0134 == 0x02ul){
    1b7c:	4a1b      	ldr	r2, [pc, #108]	; (1bec <SystemInit+0x164>)
    1b7e:	6812      	ldr	r2, [r2, #0]
    1b80:	2a02      	cmp	r2, #2
    1b82:	d107      	bne.n	1b94 <SystemInit+0x10c>
            *((volatile uint32_t *)0x50004A38) = 0x00ul;
    1b84:	2100      	movs	r1, #0
    1b86:	4a1a      	ldr	r2, [pc, #104]	; (1bf0 <SystemInit+0x168>)
    1b88:	6011      	str	r1, [r2, #0]
            NRF_REGULATORS_S->DCDCEN = REGULATORS_DCDCEN_DCDCEN_Enabled << REGULATORS_DCDCEN_DCDCEN_Pos;
    1b8a:	2101      	movs	r1, #1
    1b8c:	f6a2 2238 	subw	r2, r2, #2616	; 0xa38
    1b90:	f8c2 1578 	str.w	r1, [r2, #1400]	; 0x578
        if (*(uint32_t *)0x00FF0130 == 0x9ul){
    1b94:	681b      	ldr	r3, [r3, #0]
    1b96:	2b09      	cmp	r3, #9
    1b98:	d106      	bne.n	1ba8 <SystemInit+0x120>
            if (*(uint32_t *)0x00FF0134 == 0x02ul){
    1b9a:	4b14      	ldr	r3, [pc, #80]	; (1bec <SystemInit+0x164>)
    1b9c:	681b      	ldr	r3, [r3, #0]
    1b9e:	2b02      	cmp	r3, #2
            *((volatile uint32_t *)0x5003AEE4) = 0xC;
    1ba0:	bf02      	ittt	eq
    1ba2:	220c      	moveq	r2, #12
    1ba4:	4b13      	ldreq	r3, [pc, #76]	; (1bf4 <SystemInit+0x16c>)
    1ba6:	601a      	streq	r2, [r3, #0]
        SCB->NSACR |= (3UL << 10);
    1ba8:	4b0d      	ldr	r3, [pc, #52]	; (1be0 <SystemInit+0x158>)
    1baa:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
    1bae:	f442 6240 	orr.w	r2, r2, #3072	; 0xc00
    1bb2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      SCB->CPACR |= (3UL << 20) | (3UL << 22);
    1bb6:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
    1bba:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
    1bbe:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    1bc2:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    1bc6:	f3bf 8f6f 	isb	sy
    SystemCoreClock = __SYSTEM_CLOCK;
    1bca:	4b0b      	ldr	r3, [pc, #44]	; (1bf8 <SystemInit+0x170>)
    1bcc:	4a0b      	ldr	r2, [pc, #44]	; (1bfc <SystemInit+0x174>)
    1bce:	601a      	str	r2, [r3, #0]
}
    1bd0:	4770      	bx	lr
    1bd2:	bf00      	nop
    1bd4:	e000edd0 	.word	0xe000edd0
    1bd8:	00ff8000 	.word	0x00ff8000
    1bdc:	50039000 	.word	0x50039000
    1be0:	e000ed00 	.word	0xe000ed00
    1be4:	05fa0004 	.word	0x05fa0004
    1be8:	00ff0130 	.word	0x00ff0130
    1bec:	00ff0134 	.word	0x00ff0134
    1bf0:	50004a38 	.word	0x50004a38
    1bf4:	5003aee4 	.word	0x5003aee4
    1bf8:	20001408 	.word	0x20001408
    1bfc:	03d09000 	.word	0x03d09000

00001c00 <z_sys_device_do_config_level>:
 * off and the next one begins.
 *
 * @param level init level to run.
 */
void z_sys_device_do_config_level(s32_t level)
{
    1c00:	b570      	push	{r4, r5, r6, lr}
		retval = device_conf->init(info);
		if (retval != 0) {
			/* Initialization failed. Clear the API struct so that
			 * device_get_binding() will not succeed for it.
			 */
			info->driver_api = NULL;
    1c02:	2600      	movs	r6, #0
	for (info = config_levels[level]; info < config_levels[level+1];
    1c04:	4b08      	ldr	r3, [pc, #32]	; (1c28 <z_sys_device_do_config_level+0x28>)
    1c06:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
    1c0a:	3001      	adds	r0, #1
    1c0c:	f853 5020 	ldr.w	r5, [r3, r0, lsl #2]
    1c10:	42a5      	cmp	r5, r4
    1c12:	d800      	bhi.n	1c16 <z_sys_device_do_config_level+0x16>
		} else {
			z_object_init(info);
		}
	}
}
    1c14:	bd70      	pop	{r4, r5, r6, pc}
		retval = device_conf->init(info);
    1c16:	6823      	ldr	r3, [r4, #0]
    1c18:	4620      	mov	r0, r4
    1c1a:	685b      	ldr	r3, [r3, #4]
    1c1c:	4798      	blx	r3
		if (retval != 0) {
    1c1e:	b100      	cbz	r0, 1c22 <z_sys_device_do_config_level+0x22>
			info->driver_api = NULL;
    1c20:	6066      	str	r6, [r4, #4]
								info++) {
    1c22:	340c      	adds	r4, #12
    1c24:	e7f4      	b.n	1c10 <z_sys_device_do_config_level+0x10>
    1c26:	bf00      	nop
    1c28:	000045ac 	.word	0x000045ac

00001c2c <z_impl_device_get_binding>:
	/* Split the search into two loops: in the common scenario, where
	 * device names are stored in ROM (and are referenced by the user
	 * with CONFIG_* macros), only cheap pointer comparisons will be
	 * performed.  Reserve string comparisons for a fallback.
	 */
	for (info = __device_init_start; info != __device_init_end; info++) {
    1c2c:	4b10      	ldr	r3, [pc, #64]	; (1c70 <z_impl_device_get_binding+0x44>)
{
    1c2e:	b570      	push	{r4, r5, r6, lr}
    1c30:	4605      	mov	r5, r0
    1c32:	461e      	mov	r6, r3
	for (info = __device_init_start; info != __device_init_end; info++) {
    1c34:	4c0f      	ldr	r4, [pc, #60]	; (1c74 <z_impl_device_get_binding+0x48>)
    1c36:	429c      	cmp	r4, r3
    1c38:	d104      	bne.n	1c44 <z_impl_device_get_binding+0x18>
		    (info->config->name == name)) {
			return info;
		}
	}

	for (info = __device_init_start; info != __device_init_end; info++) {
    1c3a:	4c0e      	ldr	r4, [pc, #56]	; (1c74 <z_impl_device_get_binding+0x48>)
    1c3c:	42b4      	cmp	r4, r6
    1c3e:	d109      	bne.n	1c54 <z_impl_device_get_binding+0x28>
		if (strcmp(name, info->config->name) == 0) {
			return info;
		}
	}

	return NULL;
    1c40:	2400      	movs	r4, #0
    1c42:	e012      	b.n	1c6a <z_impl_device_get_binding+0x3e>
		if ((info->driver_api != NULL) &&
    1c44:	6862      	ldr	r2, [r4, #4]
    1c46:	b11a      	cbz	r2, 1c50 <z_impl_device_get_binding+0x24>
		    (info->config->name == name)) {
    1c48:	6822      	ldr	r2, [r4, #0]
		if ((info->driver_api != NULL) &&
    1c4a:	6812      	ldr	r2, [r2, #0]
    1c4c:	42aa      	cmp	r2, r5
    1c4e:	d00c      	beq.n	1c6a <z_impl_device_get_binding+0x3e>
	for (info = __device_init_start; info != __device_init_end; info++) {
    1c50:	340c      	adds	r4, #12
    1c52:	e7f0      	b.n	1c36 <z_impl_device_get_binding+0xa>
		if (info->driver_api == NULL) {
    1c54:	6863      	ldr	r3, [r4, #4]
    1c56:	b90b      	cbnz	r3, 1c5c <z_impl_device_get_binding+0x30>
	for (info = __device_init_start; info != __device_init_end; info++) {
    1c58:	340c      	adds	r4, #12
    1c5a:	e7ef      	b.n	1c3c <z_impl_device_get_binding+0x10>
		if (strcmp(name, info->config->name) == 0) {
    1c5c:	6823      	ldr	r3, [r4, #0]
    1c5e:	4628      	mov	r0, r5
    1c60:	6819      	ldr	r1, [r3, #0]
    1c62:	f002 f812 	bl	3c8a <strcmp>
    1c66:	2800      	cmp	r0, #0
    1c68:	d1f6      	bne.n	1c58 <z_impl_device_get_binding+0x2c>
}
    1c6a:	4620      	mov	r0, r4
    1c6c:	bd70      	pop	{r4, r5, r6, pc}
    1c6e:	bf00      	nop
    1c70:	200014cc 	.word	0x200014cc
    1c74:	20001454 	.word	0x20001454

00001c78 <idle>:
#else
#define IDLE_YIELD_IF_COOP() do { } while (false)
#endif

void idle(void *unused1, void *unused2, void *unused3)
{
    1c78:	b508      	push	{r3, lr}
	_kernel.idle = ticks;
    1c7a:	4d0b      	ldr	r5, [pc, #44]	; (1ca8 <idle+0x30>)
    1c7c:	f04f 0220 	mov.w	r2, #32
    1c80:	f3ef 8311 	mrs	r3, BASEPRI
    1c84:	f382 8811 	msr	BASEPRI, r2
    1c88:	f3bf 8f6f 	isb	sy
	s32_t ticks = z_get_next_timeout_expiry();
    1c8c:	f002 f9e1 	bl	4052 <z_get_next_timeout_expiry>
	z_set_timeout_expiry((ticks < IDLE_THRESH) ? 1 : ticks, true);
    1c90:	2101      	movs	r1, #1
	s32_t ticks = z_get_next_timeout_expiry();
    1c92:	4604      	mov	r4, r0
	z_set_timeout_expiry((ticks < IDLE_THRESH) ? 1 : ticks, true);
    1c94:	2802      	cmp	r0, #2
    1c96:	bfd8      	it	le
    1c98:	4608      	movle	r0, r1
    1c9a:	f002 f9ea 	bl	4072 <z_set_timeout_expiry>
	_kernel.idle = ticks;
    1c9e:	622c      	str	r4, [r5, #32]
 * @return N/A
 * @req K-CPU-IDLE-001
 */
static inline void k_cpu_idle(void)
{
	z_arch_cpu_idle();
    1ca0:	f7ff fa24 	bl	10ec <z_arch_cpu_idle>
    1ca4:	e7ea      	b.n	1c7c <idle+0x4>
    1ca6:	bf00      	nop
    1ca8:	20000630 	.word	0x20000630

00001cac <z_bss_zero>:
 *
 * @return N/A
 */
void z_bss_zero(void)
{
	(void)memset(__bss_start, 0, __bss_end - __bss_start);
    1cac:	4802      	ldr	r0, [pc, #8]	; (1cb8 <z_bss_zero+0xc>)
    1cae:	4a03      	ldr	r2, [pc, #12]	; (1cbc <z_bss_zero+0x10>)
    1cb0:	2100      	movs	r1, #0
    1cb2:	1a12      	subs	r2, r2, r0
    1cb4:	f002 b83a 	b.w	3d2c <memset>
    1cb8:	20000000 	.word	0x20000000
    1cbc:	20000690 	.word	0x20000690

00001cc0 <z_data_copy>:
 * This routine copies the data section from ROM to RAM.
 *
 * @return N/A
 */
void z_data_copy(void)
{
    1cc0:	b508      	push	{r3, lr}
	(void)memcpy(&__data_ram_start, &__data_rom_start,
		 __data_ram_end - __data_ram_start);
    1cc2:	4806      	ldr	r0, [pc, #24]	; (1cdc <z_data_copy+0x1c>)
	(void)memcpy(&__data_ram_start, &__data_rom_start,
    1cc4:	4a06      	ldr	r2, [pc, #24]	; (1ce0 <z_data_copy+0x20>)
    1cc6:	4907      	ldr	r1, [pc, #28]	; (1ce4 <z_data_copy+0x24>)
    1cc8:	1a12      	subs	r2, r2, r0
    1cca:	f002 f802 	bl	3cd2 <memcpy>
#else
	(void)memcpy(&_app_smem_start, &_app_smem_rom_start,
		 _app_smem_end - _app_smem_start);
#endif /* CONFIG_STACK_CANARIES */
#endif /* CONFIG_USERSPACE */
}
    1cce:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	(void)memcpy(&_ramfunc_ram_start, &_ramfunc_rom_start,
    1cd2:	4a05      	ldr	r2, [pc, #20]	; (1ce8 <z_data_copy+0x28>)
    1cd4:	4905      	ldr	r1, [pc, #20]	; (1cec <z_data_copy+0x2c>)
    1cd6:	4806      	ldr	r0, [pc, #24]	; (1cf0 <z_data_copy+0x30>)
    1cd8:	f001 bffb 	b.w	3cd2 <memcpy>
    1cdc:	200013d4 	.word	0x200013d4
    1ce0:	20001530 	.word	0x20001530
    1ce4:	00004a44 	.word	0x00004a44
    1ce8:	00000000 	.word	0x00000000
    1cec:	00004a44 	.word	0x00004a44
    1cf0:	20000000 	.word	0x20000000

00001cf4 <bg_thread_main>:
 * init functions, then invokes application's main() routine.
 *
 * @return N/A
 */
static void bg_thread_main(void *unused1, void *unused2, void *unused3)
{
    1cf4:	b508      	push	{r3, lr}
	static const unsigned int boot_delay = CONFIG_BOOT_DELAY;
#else
	static const unsigned int boot_delay;
#endif

	z_sys_device_do_config_level(_SYS_INIT_LEVEL_POST_KERNEL);
    1cf6:	2002      	movs	r0, #2
    1cf8:	f7ff ff82 	bl	1c00 <z_sys_device_do_config_level>
	if (boot_delay > 0 && IS_ENABLED(CONFIG_MULTITHREADING)) {
		printk("***** delaying boot " STRINGIFY(CONFIG_BOOT_DELAY)
		       "ms (per build configuration) *****\n");
		k_busy_wait(CONFIG_BOOT_DELAY * USEC_PER_MSEC);
	}
	PRINT_BOOT_BANNER();
    1cfc:	4807      	ldr	r0, [pc, #28]	; (1d1c <bg_thread_main+0x28>)
    1cfe:	f001 fe43 	bl	3988 <printk>

	/* Final init level before app starts */
	z_sys_device_do_config_level(_SYS_INIT_LEVEL_APPLICATION);
    1d02:	2003      	movs	r0, #3
    1d04:	f7ff ff7c 	bl	1c00 <z_sys_device_do_config_level>
	extern void __do_init_array_aux(void);
	__do_global_ctors_aux();
	__do_init_array_aux();
#endif

	z_init_static_threads();
    1d08:	f000 fc36 	bl	2578 <z_init_static_threads>
	z_timestamp_main = k_cycle_get_32();
#endif

	extern void main(void);

	main();
    1d0c:	f001 fc50 	bl	35b0 <main>

	/* Mark nonessenrial since main() has no more work to do */
	z_main_thread.base.user_options &= ~K_ESSENTIAL;
    1d10:	4a03      	ldr	r2, [pc, #12]	; (1d20 <bg_thread_main+0x2c>)
    1d12:	7b13      	ldrb	r3, [r2, #12]
    1d14:	f023 0301 	bic.w	r3, r3, #1
    1d18:	7313      	strb	r3, [r2, #12]

	/* Dump coverage data once the main() has exited. */
	gcov_coverage_dump();
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */
    1d1a:	bd08      	pop	{r3, pc}
    1d1c:	000049f2 	.word	0x000049f2
    1d20:	200005c4 	.word	0x200005c4

00001d24 <z_cstart>:
 * cleared/zeroed.
 *
 * @return Does not return
 */
FUNC_NORETURN void z_cstart(void)
{
    1d24:	b580      	push	{r7, lr}
 *
 * @return N/A
 */
static ALWAYS_INLINE void z_arm_interrupt_stack_setup(void)
{
	u32_t msp = (u32_t)(Z_THREAD_STACK_BUFFER(_interrupt_stack)) +
    1d26:	4b37      	ldr	r3, [pc, #220]	; (1e04 <z_cstart+0xe0>)
    1d28:	b0a2      	sub	sp, #136	; 0x88
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
    1d2a:	f383 8808 	msr	MSP, r3
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    1d2e:	2500      	movs	r5, #0
    1d30:	23e0      	movs	r3, #224	; 0xe0
    1d32:	4c35      	ldr	r4, [pc, #212]	; (1e08 <z_cstart+0xe4>)

	/* perform any architecture-specific initialization */
	z_arch_kernel_init();

#ifdef CONFIG_MULTITHREADING
	struct k_thread dummy_thread = {
    1d34:	2701      	movs	r7, #1
    1d36:	f884 3022 	strb.w	r3, [r4, #34]	; 0x22
    1d3a:	77e5      	strb	r5, [r4, #31]
    1d3c:	7625      	strb	r5, [r4, #24]
    1d3e:	7665      	strb	r5, [r4, #25]
    1d40:	76a5      	strb	r5, [r4, #26]
    1d42:	76e5      	strb	r5, [r4, #27]
#if defined(CONFIG_ARM_SECURE_FIRMWARE)
	NVIC_SetPriority(SecureFault_IRQn, _EXC_FAULT_PRIO);
#endif /* CONFIG_ARM_SECURE_FIRMWARE */

	/* Enable Usage, Mem, & Bus Faults */
	SCB->SHCSR |= SCB_SHCSR_USGFAULTENA_Msk | SCB_SHCSR_MEMFAULTENA_Msk |
    1d44:	6a63      	ldr	r3, [r4, #36]	; 0x24
	_kernel.ready_q.cache = &z_main_thread;
    1d46:	4e31      	ldr	r6, [pc, #196]	; (1e0c <z_cstart+0xe8>)
    1d48:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
    1d4c:	6263      	str	r3, [r4, #36]	; 0x24
		      SCB_SHCSR_BUSFAULTENA_Msk;
#if defined(CONFIG_ARM_SECURE_FIRMWARE)
	/* Enable Secure Fault */
	SCB->SHCSR |= SCB_SHCSR_SECUREFAULTENA_Msk;
    1d4e:	6a63      	ldr	r3, [r4, #36]	; 0x24
    1d50:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
    1d54:	6263      	str	r3, [r4, #36]	; 0x24
	/* Clear BFAR before setting BusFaults to target Non-Secure state. */
	SCB->BFAR = 0;
    1d56:	63a5      	str	r5, [r4, #56]	; 0x38

static ALWAYS_INLINE void z_arch_kernel_init(void)
{
	z_arm_interrupt_stack_setup();
	z_arm_exc_setup();
	z_arm_fault_init();
    1d58:	f7ff fbae 	bl	14b8 <z_arm_fault_init>
	z_arm_cpu_idle_init();
    1d5c:	f7ff f9c0 	bl	10e0 <z_arm_cpu_idle_init>
static ALWAYS_INLINE void z_arm_clear_faults(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Reset all faults */
	SCB->CFSR = SCB_CFSR_USGFAULTSR_Msk |
    1d60:	f04f 33ff 	mov.w	r3, #4294967295
    1d64:	62a3      	str	r3, [r4, #40]	; 0x28
		    SCB_CFSR_MEMFAULTSR_Msk |
		    SCB_CFSR_BUSFAULTSR_Msk;

	/* Clear all Hard Faults - HFSR is write-one-to-clear */
	SCB->HFSR = 0xffffffff;
    1d66:	62e3      	str	r3, [r4, #44]	; 0x2c
	struct k_thread dummy_thread = {
    1d68:	ab07      	add	r3, sp, #28
    1d6a:	226c      	movs	r2, #108	; 0x6c
    1d6c:	4629      	mov	r1, r5
    1d6e:	4618      	mov	r0, r3
    1d70:	f001 ffdc 	bl	3d2c <memset>
# ifdef CONFIG_SCHED_CPU_MASK
		 .base.cpu_mask = -1,
# endif
	};

	_current = &dummy_thread;
    1d74:	4c26      	ldr	r4, [pc, #152]	; (1e10 <z_cstart+0xec>)
	struct k_thread dummy_thread = {
    1d76:	f88d 7029 	strb.w	r7, [sp, #41]	; 0x29
	_current = &dummy_thread;
    1d7a:	60a0      	str	r0, [r4, #8]
#ifdef CONFIG_USERSPACE
	z_app_shmem_bss_zero();
#endif

	/* perform basic hardware initialization */
	z_sys_device_do_config_level(_SYS_INIT_LEVEL_PRE_KERNEL_1);
    1d7c:	4628      	mov	r0, r5
    1d7e:	f7ff ff3f 	bl	1c00 <z_sys_device_do_config_level>
	z_sys_device_do_config_level(_SYS_INIT_LEVEL_PRE_KERNEL_2);
    1d82:	4638      	mov	r0, r7
    1d84:	f7ff ff3c 	bl	1c00 <z_sys_device_do_config_level>
	z_sched_init();
    1d88:	f000 fba6 	bl	24d8 <z_sched_init>
	z_setup_new_thread(&z_main_thread, z_main_stack,
    1d8c:	4b21      	ldr	r3, [pc, #132]	; (1e14 <z_cstart+0xf0>)
	_kernel.ready_q.cache = &z_main_thread;
    1d8e:	6266      	str	r6, [r4, #36]	; 0x24
	z_setup_new_thread(&z_main_thread, z_main_stack,
    1d90:	f44f 6280 	mov.w	r2, #1024	; 0x400
    1d94:	e9cd 7304 	strd	r7, r3, [sp, #16]
    1d98:	e9cd 5502 	strd	r5, r5, [sp, #8]
    1d9c:	4b1e      	ldr	r3, [pc, #120]	; (1e18 <z_cstart+0xf4>)
    1d9e:	e9cd 5500 	strd	r5, r5, [sp]
    1da2:	491e      	ldr	r1, [pc, #120]	; (1e1c <z_cstart+0xf8>)
    1da4:	4630      	mov	r0, r6
    1da6:	f000 fbcd 	bl	2544 <z_setup_new_thread>
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
}

static inline void z_mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
    1daa:	7b73      	ldrb	r3, [r6, #13]
    1dac:	f023 0204 	bic.w	r2, r3, #4
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
    1db0:	f013 0f1b 	tst.w	r3, #27
	thread->base.thread_state &= ~_THREAD_PRESTART;
    1db4:	7372      	strb	r2, [r6, #13]
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
    1db6:	d104      	bne.n	1dc2 <z_cstart+0x9e>
	return true;
}

static ALWAYS_INLINE void z_ready_thread(struct k_thread *thread)
{
	if (z_is_thread_ready(thread)) {
    1db8:	69b3      	ldr	r3, [r6, #24]
    1dba:	b913      	cbnz	r3, 1dc2 <z_cstart+0x9e>
		z_add_thread_to_ready_q(thread);
    1dbc:	4630      	mov	r0, r6
    1dbe:	f000 fa1b 	bl	21f8 <z_add_thread_to_ready_q>
	z_setup_new_thread(thr, stack,
    1dc2:	4b17      	ldr	r3, [pc, #92]	; (1e20 <z_cstart+0xfc>)
    1dc4:	2201      	movs	r2, #1
    1dc6:	9305      	str	r3, [sp, #20]
    1dc8:	230f      	movs	r3, #15
    1dca:	e9cd 3203 	strd	r3, r2, [sp, #12]
    1dce:	2300      	movs	r3, #0
    1dd0:	4d14      	ldr	r5, [pc, #80]	; (1e24 <z_cstart+0x100>)
    1dd2:	e9cd 3301 	strd	r3, r3, [sp, #4]
    1dd6:	9300      	str	r3, [sp, #0]
    1dd8:	f44f 72a0 	mov.w	r2, #320	; 0x140
    1ddc:	4b12      	ldr	r3, [pc, #72]	; (1e28 <z_cstart+0x104>)
    1dde:	4913      	ldr	r1, [pc, #76]	; (1e2c <z_cstart+0x108>)
    1de0:	4628      	mov	r0, r5
    1de2:	f000 fbaf 	bl	2544 <z_setup_new_thread>
	thread->base.thread_state &= ~_THREAD_PRESTART;
    1de6:	7b6b      	ldrb	r3, [r5, #13]
	_kernel.cpus[0].idle_thread = &z_idle_thread;
    1de8:	60e5      	str	r5, [r4, #12]
    1dea:	f023 0304 	bic.w	r3, r3, #4
    1dee:	736b      	strb	r3, [r5, #13]
 * @return N/A
 */

static inline void sys_dlist_init(sys_dlist_t *list)
{
	list->head = (sys_dnode_t *)list;
    1df0:	4b0f      	ldr	r3, [pc, #60]	; (1e30 <z_cstart+0x10c>)
	z_arch_switch_to_main_thread(&z_main_thread, z_main_stack,
    1df2:	f44f 6280 	mov.w	r2, #1024	; 0x400
	list->tail = (sys_dnode_t *)list;
    1df6:	e9c4 3306 	strd	r3, r3, [r4, #24]
    1dfa:	4908      	ldr	r1, [pc, #32]	; (1e1c <z_cstart+0xf8>)
    1dfc:	4b06      	ldr	r3, [pc, #24]	; (1e18 <z_cstart+0xf4>)
    1dfe:	4803      	ldr	r0, [pc, #12]	; (1e0c <z_cstart+0xe8>)
    1e00:	f7ff fa1c 	bl	123c <z_arch_switch_to_main_thread>
    1e04:	200013d0 	.word	0x200013d0
    1e08:	e000ed00 	.word	0xe000ed00
    1e0c:	200005c4 	.word	0x200005c4
    1e10:	20000630 	.word	0x20000630
    1e14:	00004a39 	.word	0x00004a39
    1e18:	00001cf5 	.word	0x00001cf5
    1e1c:	20000690 	.word	0x20000690
    1e20:	00004a3e 	.word	0x00004a3e
    1e24:	20000558 	.word	0x20000558
    1e28:	00001c79 	.word	0x00001c79
    1e2c:	20000a90 	.word	0x20000a90
    1e30:	20000648 	.word	0x20000648

00001e34 <init_mem_slab_module>:
 * Perform any initialization that wasn't done at build time.
 *
 * @return N/A
 */
static int init_mem_slab_module(struct device *dev)
{
    1e34:	b570      	push	{r4, r5, r6, lr}
	slab->free_list = NULL;
    1e36:	2400      	movs	r4, #0
	ARG_UNUSED(dev);

	Z_STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
    1e38:	4b0a      	ldr	r3, [pc, #40]	; (1e64 <init_mem_slab_module+0x30>)
    1e3a:	480b      	ldr	r0, [pc, #44]	; (1e68 <init_mem_slab_module+0x34>)
    1e3c:	4283      	cmp	r3, r0
    1e3e:	d301      	bcc.n	1e44 <init_mem_slab_module+0x10>
		create_free_list(slab);
		SYS_TRACING_OBJ_INIT(k_mem_slab, slab);
		z_object_init(slab);
	}
	return 0;
}
    1e40:	2000      	movs	r0, #0
    1e42:	bd70      	pop	{r4, r5, r6, pc}
	for (j = 0U; j < slab->num_blocks; j++) {
    1e44:	2100      	movs	r1, #0
	p = slab->buffer;
    1e46:	691a      	ldr	r2, [r3, #16]
	for (j = 0U; j < slab->num_blocks; j++) {
    1e48:	689d      	ldr	r5, [r3, #8]
	slab->free_list = NULL;
    1e4a:	615c      	str	r4, [r3, #20]
	for (j = 0U; j < slab->num_blocks; j++) {
    1e4c:	42a9      	cmp	r1, r5
    1e4e:	d101      	bne.n	1e54 <init_mem_slab_module+0x20>
	Z_STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
    1e50:	331c      	adds	r3, #28
    1e52:	e7f3      	b.n	1e3c <init_mem_slab_module+0x8>
		*(char **)p = slab->free_list;
    1e54:	695e      	ldr	r6, [r3, #20]
	for (j = 0U; j < slab->num_blocks; j++) {
    1e56:	3101      	adds	r1, #1
		*(char **)p = slab->free_list;
    1e58:	6016      	str	r6, [r2, #0]
		p += slab->block_size;
    1e5a:	68de      	ldr	r6, [r3, #12]
		slab->free_list = p;
    1e5c:	615a      	str	r2, [r3, #20]
		p += slab->block_size;
    1e5e:	4432      	add	r2, r6
    1e60:	e7f4      	b.n	1e4c <init_mem_slab_module+0x18>
    1e62:	bf00      	nop
    1e64:	200014cc 	.word	0x200014cc
    1e68:	200014cc 	.word	0x200014cc

00001e6c <k_mem_slab_alloc>:

	z_object_init(slab);
}

int k_mem_slab_alloc(struct k_mem_slab *slab, void **mem, s32_t timeout)
{
    1e6c:	b510      	push	{r4, lr}
    1e6e:	4613      	mov	r3, r2
    1e70:	460c      	mov	r4, r1
    1e72:	f04f 0220 	mov.w	r2, #32
    1e76:	f3ef 8111 	mrs	r1, BASEPRI
    1e7a:	f382 8811 	msr	BASEPRI, r2
    1e7e:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	int result;

	if (slab->free_list != NULL) {
    1e82:	6942      	ldr	r2, [r0, #20]
    1e84:	b162      	cbz	r2, 1ea0 <k_mem_slab_alloc+0x34>
		/* take a free block */
		*mem = slab->free_list;
    1e86:	6022      	str	r2, [r4, #0]
		slab->free_list = *(char **)(slab->free_list);
    1e88:	6943      	ldr	r3, [r0, #20]
    1e8a:	681b      	ldr	r3, [r3, #0]
    1e8c:	6143      	str	r3, [r0, #20]
		slab->num_used++;
    1e8e:	6983      	ldr	r3, [r0, #24]
    1e90:	3301      	adds	r3, #1
    1e92:	6183      	str	r3, [r0, #24]
		result = 0;
    1e94:	2000      	movs	r0, #0
	__asm__ volatile(
    1e96:	f381 8811 	msr	BASEPRI, r1
    1e9a:	f3bf 8f6f 	isb	sy
		return result;
	}

	k_spin_unlock(&lock, key);

	return result;
    1e9e:	e00d      	b.n	1ebc <k_mem_slab_alloc+0x50>
	} else if (timeout == K_NO_WAIT) {
    1ea0:	b91b      	cbnz	r3, 1eaa <k_mem_slab_alloc+0x3e>
		*mem = NULL;
    1ea2:	6023      	str	r3, [r4, #0]
		result = -ENOMEM;
    1ea4:	f06f 000b 	mvn.w	r0, #11
    1ea8:	e7f5      	b.n	1e96 <k_mem_slab_alloc+0x2a>
		result = z_pend_curr(&lock, key, &slab->wait_q, timeout);
    1eaa:	4602      	mov	r2, r0
    1eac:	4804      	ldr	r0, [pc, #16]	; (1ec0 <k_mem_slab_alloc+0x54>)
    1eae:	f000 fabd 	bl	242c <z_pend_curr>
		if (result == 0) {
    1eb2:	b918      	cbnz	r0, 1ebc <k_mem_slab_alloc+0x50>
			*mem = _current->base.swap_data;
    1eb4:	4b03      	ldr	r3, [pc, #12]	; (1ec4 <k_mem_slab_alloc+0x58>)
    1eb6:	689b      	ldr	r3, [r3, #8]
    1eb8:	695b      	ldr	r3, [r3, #20]
    1eba:	6023      	str	r3, [r4, #0]
}
    1ebc:	bd10      	pop	{r4, pc}
    1ebe:	bf00      	nop
    1ec0:	2000068d 	.word	0x2000068d
    1ec4:	20000630 	.word	0x20000630

00001ec8 <k_mem_slab_free>:

void k_mem_slab_free(struct k_mem_slab *slab, void **mem)
{
    1ec8:	b570      	push	{r4, r5, r6, lr}
    1eca:	4604      	mov	r4, r0
    1ecc:	460d      	mov	r5, r1
	__asm__ volatile(
    1ece:	f04f 0320 	mov.w	r3, #32
    1ed2:	f3ef 8611 	mrs	r6, BASEPRI
    1ed6:	f383 8811 	msr	BASEPRI, r3
    1eda:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_thread *pending_thread = z_unpend_first_thread(&slab->wait_q);
    1ede:	f002 f845 	bl	3f6c <z_unpend_first_thread>

	if (pending_thread != NULL) {
    1ee2:	b180      	cbz	r0, 1f06 <k_mem_slab_free+0x3e>
}

static ALWAYS_INLINE void
z_arch_thread_return_value_set(struct k_thread *thread, unsigned int value)
{
	thread->arch.swap_return_value = value;
    1ee4:	2100      	movs	r1, #0
		z_thread_return_value_set_with_data(pending_thread, 0, *mem);
    1ee6:	682a      	ldr	r2, [r5, #0]
    1ee8:	6681      	str	r1, [r0, #104]	; 0x68
	thread->base.swap_data = data;
    1eea:	6142      	str	r2, [r0, #20]
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
    1eec:	7b42      	ldrb	r2, [r0, #13]
    1eee:	06d2      	lsls	r2, r2, #27
    1ef0:	d103      	bne.n	1efa <k_mem_slab_free+0x32>
	if (z_is_thread_ready(thread)) {
    1ef2:	6983      	ldr	r3, [r0, #24]
    1ef4:	b90b      	cbnz	r3, 1efa <k_mem_slab_free+0x32>
		z_add_thread_to_ready_q(thread);
    1ef6:	f000 f97f 	bl	21f8 <z_add_thread_to_ready_q>
		z_ready_thread(pending_thread);
		z_reschedule(&lock, key);
    1efa:	4631      	mov	r1, r6
		**(char ***)mem = slab->free_list;
		slab->free_list = *(char **)mem;
		slab->num_used--;
		k_spin_unlock(&lock, key);
	}
}
    1efc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		z_reschedule(&lock, key);
    1f00:	4807      	ldr	r0, [pc, #28]	; (1f20 <k_mem_slab_free+0x58>)
    1f02:	f001 bfd3 	b.w	3eac <z_reschedule>
		**(char ***)mem = slab->free_list;
    1f06:	682b      	ldr	r3, [r5, #0]
    1f08:	6962      	ldr	r2, [r4, #20]
    1f0a:	601a      	str	r2, [r3, #0]
		slab->free_list = *(char **)mem;
    1f0c:	682b      	ldr	r3, [r5, #0]
    1f0e:	6163      	str	r3, [r4, #20]
		slab->num_used--;
    1f10:	69a3      	ldr	r3, [r4, #24]
    1f12:	3b01      	subs	r3, #1
    1f14:	61a3      	str	r3, [r4, #24]
	__asm__ volatile(
    1f16:	f386 8811 	msr	BASEPRI, r6
    1f1a:	f3bf 8f6f 	isb	sy
}
    1f1e:	bd70      	pop	{r4, r5, r6, pc}
    1f20:	2000068d 	.word	0x2000068d

00001f24 <z_impl_k_mutex_lock>:
	}
	return false;
}

int z_impl_k_mutex_lock(struct k_mutex *mutex, s32_t timeout)
{
    1f24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1f26:	4604      	mov	r4, r0
    1f28:	460f      	mov	r7, r1
	__asm__ volatile(
    1f2a:	f04f 0320 	mov.w	r3, #32
    1f2e:	f3ef 8511 	mrs	r5, BASEPRI
    1f32:	f383 8811 	msr	BASEPRI, r3
    1f36:	f3bf 8f6f 	isb	sy
	bool resched = false;

	sys_trace_void(SYS_TRACE_ID_MUTEX_LOCK);
	key = k_spin_lock(&lock);

	if (likely((mutex->lock_count == 0U) || (mutex->owner == _current))) {
    1f3a:	68c2      	ldr	r2, [r0, #12]
    1f3c:	4930      	ldr	r1, [pc, #192]	; (2000 <z_impl_k_mutex_lock+0xdc>)
    1f3e:	b15a      	cbz	r2, 1f58 <z_impl_k_mutex_lock+0x34>
    1f40:	6880      	ldr	r0, [r0, #8]
    1f42:	688e      	ldr	r6, [r1, #8]
    1f44:	42b0      	cmp	r0, r6
    1f46:	d015      	beq.n	1f74 <z_impl_k_mutex_lock+0x50>
		sys_trace_end_call(SYS_TRACE_ID_MUTEX_LOCK);

		return 0;
	}

	if (unlikely(timeout == (s32_t)K_NO_WAIT)) {
    1f48:	b9b7      	cbnz	r7, 1f78 <z_impl_k_mutex_lock+0x54>
	__asm__ volatile(
    1f4a:	f385 8811 	msr	BASEPRI, r5
    1f4e:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		sys_trace_end_call(SYS_TRACE_ID_MUTEX_LOCK);
		return -EBUSY;
    1f52:	f06f 000f 	mvn.w	r0, #15
    1f56:	e00c      	b.n	1f72 <z_impl_k_mutex_lock+0x4e>
					_current->base.prio :
    1f58:	688b      	ldr	r3, [r1, #8]
    1f5a:	f993 300e 	ldrsb.w	r3, [r3, #14]
		mutex->owner_orig_prio = (mutex->lock_count == 0U) ?
    1f5e:	6123      	str	r3, [r4, #16]
		mutex->owner = _current;
    1f60:	688b      	ldr	r3, [r1, #8]
		mutex->lock_count++;
    1f62:	3201      	adds	r2, #1
    1f64:	60e2      	str	r2, [r4, #12]
		mutex->owner = _current;
    1f66:	60a3      	str	r3, [r4, #8]
    1f68:	f385 8811 	msr	BASEPRI, r5
    1f6c:	f3bf 8f6f 	isb	sy
		return 0;
    1f70:	2000      	movs	r0, #0
		k_spin_unlock(&lock, key);
	}

	sys_trace_end_call(SYS_TRACE_ID_MUTEX_LOCK);
	return -EAGAIN;
}
    1f72:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
					_current->base.prio :
    1f74:	6923      	ldr	r3, [r4, #16]
    1f76:	e7f2      	b.n	1f5e <z_impl_k_mutex_lock+0x3a>
	new_prio = new_prio_for_inheritance(_current->base.prio,
    1f78:	f990 300e 	ldrsb.w	r3, [r0, #14]
    1f7c:	f996 100e 	ldrsb.w	r1, [r6, #14]
    1f80:	4299      	cmp	r1, r3
    1f82:	bfa8      	it	ge
    1f84:	4619      	movge	r1, r3
    1f86:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
	if (z_is_prio_higher(new_prio, mutex->owner->base.prio)) {
    1f8a:	4299      	cmp	r1, r3
    1f8c:	da2b      	bge.n	1fe6 <z_impl_k_mutex_lock+0xc2>
		return z_set_prio(mutex->owner, new_prio);
    1f8e:	f000 fa61 	bl	2454 <z_set_prio>
    1f92:	4606      	mov	r6, r0
	int got_mutex = z_pend_curr(&lock, key, &mutex->wait_q, timeout);
    1f94:	463b      	mov	r3, r7
    1f96:	4622      	mov	r2, r4
    1f98:	4629      	mov	r1, r5
    1f9a:	481a      	ldr	r0, [pc, #104]	; (2004 <z_impl_k_mutex_lock+0xe0>)
    1f9c:	f000 fa46 	bl	242c <z_pend_curr>
	if (got_mutex == 0) {
    1fa0:	2800      	cmp	r0, #0
    1fa2:	d0e6      	beq.n	1f72 <z_impl_k_mutex_lock+0x4e>
	__asm__ volatile(
    1fa4:	f04f 0320 	mov.w	r3, #32
    1fa8:	f3ef 8511 	mrs	r5, BASEPRI
    1fac:	f383 8811 	msr	BASEPRI, r3
    1fb0:	f3bf 8f6f 	isb	sy
 * @return true if empty, false otherwise
 */

static inline bool sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
    1fb4:	6823      	ldr	r3, [r4, #0]
    1fb6:	6921      	ldr	r1, [r4, #16]
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
    1fb8:	429c      	cmp	r4, r3
    1fba:	d007      	beq.n	1fcc <z_impl_k_mutex_lock+0xa8>
		new_prio_for_inheritance(waiter->base.prio, new_prio) :
    1fbc:	b133      	cbz	r3, 1fcc <z_impl_k_mutex_lock+0xa8>
    1fbe:	f993 300e 	ldrsb.w	r3, [r3, #14]
    1fc2:	4299      	cmp	r1, r3
    1fc4:	bfa8      	it	ge
    1fc6:	4619      	movge	r1, r3
    1fc8:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
	resched = adjust_owner_prio(mutex, new_prio) || resched;
    1fcc:	68a0      	ldr	r0, [r4, #8]
	if (mutex->owner->base.prio != new_prio) {
    1fce:	f990 300e 	ldrsb.w	r3, [r0, #14]
    1fd2:	4299      	cmp	r1, r3
    1fd4:	d109      	bne.n	1fea <z_impl_k_mutex_lock+0xc6>
	if (resched) {
    1fd6:	b16e      	cbz	r6, 1ff4 <z_impl_k_mutex_lock+0xd0>
		z_reschedule(&lock, key);
    1fd8:	4629      	mov	r1, r5
    1fda:	480a      	ldr	r0, [pc, #40]	; (2004 <z_impl_k_mutex_lock+0xe0>)
    1fdc:	f001 ff66 	bl	3eac <z_reschedule>
	return -EAGAIN;
    1fe0:	f06f 000a 	mvn.w	r0, #10
    1fe4:	e7c5      	b.n	1f72 <z_impl_k_mutex_lock+0x4e>
	bool resched = false;
    1fe6:	2600      	movs	r6, #0
    1fe8:	e7d4      	b.n	1f94 <z_impl_k_mutex_lock+0x70>
		return z_set_prio(mutex->owner, new_prio);
    1fea:	f000 fa33 	bl	2454 <z_set_prio>
	resched = adjust_owner_prio(mutex, new_prio) || resched;
    1fee:	2800      	cmp	r0, #0
    1ff0:	d1f2      	bne.n	1fd8 <z_impl_k_mutex_lock+0xb4>
    1ff2:	e7f0      	b.n	1fd6 <z_impl_k_mutex_lock+0xb2>
	__asm__ volatile(
    1ff4:	f385 8811 	msr	BASEPRI, r5
    1ff8:	f3bf 8f6f 	isb	sy
    1ffc:	e7f0      	b.n	1fe0 <z_impl_k_mutex_lock+0xbc>
    1ffe:	bf00      	nop
    2000:	20000630 	.word	0x20000630
    2004:	2000068d 	.word	0x2000068d

00002008 <z_impl_k_mutex_unlock>:
{
#ifdef CONFIG_PREEMPT_ENABLED
	__ASSERT(!z_arch_is_in_isr(), "");
	__ASSERT(_current->base.sched_locked != 1, "");

	--_current->base.sched_locked;
    2008:	4b1e      	ldr	r3, [pc, #120]	; (2084 <z_impl_k_mutex_unlock+0x7c>)
}
#include <syscalls/k_mutex_lock_mrsh.c>
#endif

void z_impl_k_mutex_unlock(struct k_mutex *mutex)
{
    200a:	b570      	push	{r4, r5, r6, lr}
    200c:	689a      	ldr	r2, [r3, #8]
    200e:	4604      	mov	r4, r0
    2010:	7bd3      	ldrb	r3, [r2, #15]
    2012:	3b01      	subs	r3, #1
    2014:	73d3      	strb	r3, [r2, #15]
	sys_trace_void(SYS_TRACE_ID_MUTEX_UNLOCK);
	z_sched_lock();

	K_DEBUG("mutex %p lock_count: %d\n", mutex, mutex->lock_count);

	if (mutex->lock_count - 1U != 0U) {
    2016:	68c3      	ldr	r3, [r0, #12]
    2018:	2b01      	cmp	r3, #1
    201a:	d005      	beq.n	2028 <z_impl_k_mutex_unlock+0x20>
		mutex->lock_count--;
    201c:	3b01      	subs	r3, #1
    201e:	60c3      	str	r3, [r0, #12]


k_mutex_unlock_return:
	k_sched_unlock();
	sys_trace_end_call(SYS_TRACE_ID_MUTEX_UNLOCK);
}
    2020:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	k_sched_unlock();
    2024:	f000 b8cc 	b.w	21c0 <k_sched_unlock>
	__asm__ volatile(
    2028:	f04f 0320 	mov.w	r3, #32
    202c:	f3ef 8611 	mrs	r6, BASEPRI
    2030:	f383 8811 	msr	BASEPRI, r3
    2034:	f3bf 8f6f 	isb	sy
	adjust_owner_prio(mutex, mutex->owner_orig_prio);
    2038:	6901      	ldr	r1, [r0, #16]
    203a:	6880      	ldr	r0, [r0, #8]
	if (mutex->owner->base.prio != new_prio) {
    203c:	f990 300e 	ldrsb.w	r3, [r0, #14]
    2040:	4299      	cmp	r1, r3
    2042:	d001      	beq.n	2048 <z_impl_k_mutex_unlock+0x40>
		return z_set_prio(mutex->owner, new_prio);
    2044:	f000 fa06 	bl	2454 <z_set_prio>
	new_owner = z_unpend_first_thread(&mutex->wait_q);
    2048:	4620      	mov	r0, r4
    204a:	f001 ff8f 	bl	3f6c <z_unpend_first_thread>
    204e:	4605      	mov	r5, r0
	mutex->owner = new_owner;
    2050:	60a0      	str	r0, [r4, #8]
	if (new_owner != NULL) {
    2052:	b180      	cbz	r0, 2076 <z_impl_k_mutex_unlock+0x6e>
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
    2054:	7b43      	ldrb	r3, [r0, #13]
    2056:	06db      	lsls	r3, r3, #27
    2058:	d103      	bne.n	2062 <z_impl_k_mutex_unlock+0x5a>
	if (z_is_thread_ready(thread)) {
    205a:	6983      	ldr	r3, [r0, #24]
    205c:	b90b      	cbnz	r3, 2062 <z_impl_k_mutex_unlock+0x5a>
		z_add_thread_to_ready_q(thread);
    205e:	f000 f8cb 	bl	21f8 <z_add_thread_to_ready_q>
	__asm__ volatile(
    2062:	f386 8811 	msr	BASEPRI, r6
    2066:	f3bf 8f6f 	isb	sy
    206a:	2300      	movs	r3, #0
    206c:	66ab      	str	r3, [r5, #104]	; 0x68
		mutex->owner_orig_prio = new_owner->base.prio;
    206e:	f995 300e 	ldrsb.w	r3, [r5, #14]
    2072:	6123      	str	r3, [r4, #16]
    2074:	e7d4      	b.n	2020 <z_impl_k_mutex_unlock+0x18>
		mutex->lock_count = 0U;
    2076:	60e0      	str	r0, [r4, #12]
    2078:	f386 8811 	msr	BASEPRI, r6
    207c:	f3bf 8f6f 	isb	sy
    2080:	e7ce      	b.n	2020 <z_impl_k_mutex_unlock+0x18>
    2082:	bf00      	nop
    2084:	20000630 	.word	0x20000630

00002088 <resched.part.15>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    2088:	f3ef 8005 	mrs	r0, IPSR
		|| (vector && !(SCB->ICSR & SCB_ICSR_RETTOBASE_Msk))
    208c:	280d      	cmp	r0, #13
    208e:	d809      	bhi.n	20a4 <resched.part.15+0x1c>
    2090:	b128      	cbz	r0, 209e <resched.part.15+0x16>
    2092:	4b05      	ldr	r3, [pc, #20]	; (20a8 <resched.part.15+0x20>)
    2094:	6858      	ldr	r0, [r3, #4]
    2096:	f480 6000 	eor.w	r0, r0, #2048	; 0x800
    209a:	f3c0 20c0 	ubfx	r0, r0, #11, #1
#ifdef CONFIG_SMP
	_current_cpu->swap_ok = 0;
#endif

	return z_arch_irq_unlocked(key) && !z_arch_is_in_isr();
}
    209e:	f080 0001 	eor.w	r0, r0, #1
    20a2:	4770      	bx	lr
    20a4:	2001      	movs	r0, #1
    20a6:	e7fa      	b.n	209e <resched.part.15+0x16>
    20a8:	e000ed00 	.word	0xe000ed00

000020ac <z_reset_time_slice>:
{
    20ac:	b510      	push	{r4, lr}
	if (slice_time != 0) {
    20ae:	4c08      	ldr	r4, [pc, #32]	; (20d0 <z_reset_time_slice+0x24>)
    20b0:	6823      	ldr	r3, [r4, #0]
    20b2:	b15b      	cbz	r3, 20cc <z_reset_time_slice+0x20>
		_current_cpu->slice_ticks = slice_time + z_clock_elapsed();
    20b4:	f7fe fc9c 	bl	9f0 <z_clock_elapsed>
    20b8:	6823      	ldr	r3, [r4, #0]
    20ba:	4a06      	ldr	r2, [pc, #24]	; (20d4 <z_reset_time_slice+0x28>)
    20bc:	4418      	add	r0, r3
    20be:	6110      	str	r0, [r2, #16]
		z_set_timeout_expiry(slice_time, false);
    20c0:	2100      	movs	r1, #0
}
    20c2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		z_set_timeout_expiry(slice_time, false);
    20c6:	4618      	mov	r0, r3
    20c8:	f001 bfd3 	b.w	4072 <z_set_timeout_expiry>
}
    20cc:	bd10      	pop	{r4, pc}
    20ce:	bf00      	nop
    20d0:	20000668 	.word	0x20000668
    20d4:	20000630 	.word	0x20000630

000020d8 <k_sched_time_slice_set>:
{
    20d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    20da:	460d      	mov	r5, r1
	__asm__ volatile(
    20dc:	f04f 0320 	mov.w	r3, #32
    20e0:	f3ef 8411 	mrs	r4, BASEPRI
    20e4:	f383 8811 	msr	BASEPRI, r3
    20e8:	f3bf 8f6f 	isb	sy

#ifdef _NEED_PRECISE_TICK_MS_CONVERSION
	int cyc = sys_clock_hw_cycles_per_sec();

	/* use 64-bit math to keep precision */
	return (s32_t)ceiling_fraction((s64_t)ms * cyc,
    20ec:	f44f 4100 	mov.w	r1, #32768	; 0x8000
    20f0:	f240 36e7 	movw	r6, #999	; 0x3e7
    20f4:	2700      	movs	r7, #0
		_current_cpu->slice_ticks = 0;
    20f6:	2200      	movs	r2, #0
    20f8:	fbc1 6700 	smlal	r6, r7, r1, r0
    20fc:	4b09      	ldr	r3, [pc, #36]	; (2124 <k_sched_time_slice_set+0x4c>)
    20fe:	4630      	mov	r0, r6
    2100:	611a      	str	r2, [r3, #16]
    2102:	4639      	mov	r1, r7
    2104:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    2108:	2300      	movs	r3, #0
    210a:	f7fe f889 	bl	220 <__aeabi_ldivmod>
    210e:	4b06      	ldr	r3, [pc, #24]	; (2128 <k_sched_time_slice_set+0x50>)
    2110:	6018      	str	r0, [r3, #0]
		slice_max_prio = prio;
    2112:	4b06      	ldr	r3, [pc, #24]	; (212c <k_sched_time_slice_set+0x54>)
    2114:	601d      	str	r5, [r3, #0]
		z_reset_time_slice();
    2116:	f7ff ffc9 	bl	20ac <z_reset_time_slice>
	__asm__ volatile(
    211a:	f384 8811 	msr	BASEPRI, r4
    211e:	f3bf 8f6f 	isb	sy
}
    2122:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    2124:	20000630 	.word	0x20000630
    2128:	20000668 	.word	0x20000668
    212c:	20000664 	.word	0x20000664

00002130 <k_sched_lock>:
	__asm__ volatile(
    2130:	f04f 0320 	mov.w	r3, #32
    2134:	f3ef 8111 	mrs	r1, BASEPRI
    2138:	f383 8811 	msr	BASEPRI, r3
    213c:	f3bf 8f6f 	isb	sy
	--_current->base.sched_locked;
    2140:	4b04      	ldr	r3, [pc, #16]	; (2154 <k_sched_lock+0x24>)
    2142:	689a      	ldr	r2, [r3, #8]
    2144:	7bd3      	ldrb	r3, [r2, #15]
    2146:	3b01      	subs	r3, #1
    2148:	73d3      	strb	r3, [r2, #15]
	__asm__ volatile(
    214a:	f381 8811 	msr	BASEPRI, r1
    214e:	f3bf 8f6f 	isb	sy
void k_sched_lock(void)
{
	LOCKED(&sched_spinlock) {
		z_sched_lock();
	}
}
    2152:	4770      	bx	lr
    2154:	20000630 	.word	0x20000630

00002158 <z_priq_dumb_remove>:
}

void z_priq_dumb_remove(sys_dlist_t *pq, struct k_thread *thread)
{
#if defined(CONFIG_SWAP_NONATOMIC) && defined(CONFIG_SCHED_DUMB)
	if (pq == &_kernel.ready_q.runq && thread == _current &&
    2158:	4b09      	ldr	r3, [pc, #36]	; (2180 <z_priq_dumb_remove+0x28>)
    215a:	f103 0228 	add.w	r2, r3, #40	; 0x28
    215e:	4282      	cmp	r2, r0
    2160:	d105      	bne.n	216e <z_priq_dumb_remove+0x16>
    2162:	689b      	ldr	r3, [r3, #8]
    2164:	428b      	cmp	r3, r1
    2166:	d102      	bne.n	216e <z_priq_dumb_remove+0x16>
    2168:	7b4b      	ldrb	r3, [r1, #13]
    216a:	06db      	lsls	r3, r3, #27
    216c:	d107      	bne.n	217e <z_priq_dumb_remove+0x26>
 * @return N/A
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	node->prev->next = node->next;
    216e:	e9d1 2300 	ldrd	r2, r3, [r1]
    2172:	601a      	str	r2, [r3, #0]
	node->next->prev = node->prev;
    2174:	680a      	ldr	r2, [r1, #0]
    2176:	6053      	str	r3, [r2, #4]
	node->next = NULL;
    2178:	2300      	movs	r3, #0
	node->prev = NULL;
    217a:	e9c1 3300 	strd	r3, r3, [r1]
#endif

	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));

	sys_dlist_remove(&thread->base.qnode_dlist);
}
    217e:	4770      	bx	lr
    2180:	20000630 	.word	0x20000630

00002184 <update_cache>:
{
    2184:	b538      	push	{r3, r4, r5, lr}
	struct k_thread *th = _priq_run_best(&_kernel.ready_q.runq);
    2186:	4c0d      	ldr	r4, [pc, #52]	; (21bc <update_cache+0x38>)
{
    2188:	4602      	mov	r2, r0
	struct k_thread *th = _priq_run_best(&_kernel.ready_q.runq);
    218a:	f104 0028 	add.w	r0, r4, #40	; 0x28
    218e:	f001 feb6 	bl	3efe <z_priq_dumb_best>
	return th ? th : _current_cpu->idle_thread;
    2192:	4605      	mov	r5, r0
    2194:	b900      	cbnz	r0, 2198 <update_cache+0x14>
    2196:	68e5      	ldr	r5, [r4, #12]
    2198:	68a3      	ldr	r3, [r4, #8]
	if (preempt_ok != 0) {
    219a:	b94a      	cbnz	r2, 21b0 <update_cache+0x2c>
	if (z_is_thread_prevented_from_running(_current)) {
    219c:	7b5a      	ldrb	r2, [r3, #13]
    219e:	06d2      	lsls	r2, r2, #27
    21a0:	d106      	bne.n	21b0 <update_cache+0x2c>
	if (IS_ENABLED(CONFIG_SWAP_NONATOMIC)
    21a2:	69aa      	ldr	r2, [r5, #24]
    21a4:	b922      	cbnz	r2, 21b0 <update_cache+0x2c>
	if (is_preempt(_current) || is_metairq(th)) {
    21a6:	89da      	ldrh	r2, [r3, #14]
    21a8:	2a7f      	cmp	r2, #127	; 0x7f
    21aa:	d901      	bls.n	21b0 <update_cache+0x2c>
		_kernel.ready_q.cache = _current;
    21ac:	6263      	str	r3, [r4, #36]	; 0x24
}
    21ae:	bd38      	pop	{r3, r4, r5, pc}
		if (th != _current) {
    21b0:	429d      	cmp	r5, r3
    21b2:	d001      	beq.n	21b8 <update_cache+0x34>
			z_reset_time_slice();
    21b4:	f7ff ff7a 	bl	20ac <z_reset_time_slice>
		_kernel.ready_q.cache = th;
    21b8:	6265      	str	r5, [r4, #36]	; 0x24
}
    21ba:	e7f8      	b.n	21ae <update_cache+0x2a>
    21bc:	20000630 	.word	0x20000630

000021c0 <k_sched_unlock>:
{
    21c0:	b510      	push	{r4, lr}
	__asm__ volatile(
    21c2:	f04f 0320 	mov.w	r3, #32
    21c6:	f3ef 8411 	mrs	r4, BASEPRI
    21ca:	f383 8811 	msr	BASEPRI, r3
    21ce:	f3bf 8f6f 	isb	sy
		++_current->base.sched_locked;
    21d2:	4b08      	ldr	r3, [pc, #32]	; (21f4 <k_sched_unlock+0x34>)
		update_cache(0);
    21d4:	2000      	movs	r0, #0
		++_current->base.sched_locked;
    21d6:	689a      	ldr	r2, [r3, #8]
    21d8:	7bd3      	ldrb	r3, [r2, #15]
    21da:	3301      	adds	r3, #1
    21dc:	73d3      	strb	r3, [r2, #15]
		update_cache(0);
    21de:	f7ff ffd1 	bl	2184 <update_cache>
	__asm__ volatile(
    21e2:	f384 8811 	msr	BASEPRI, r4
    21e6:	f3bf 8f6f 	isb	sy
}
    21ea:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule_unlocked();
    21ee:	f001 be7c 	b.w	3eea <z_reschedule_unlocked>
    21f2:	bf00      	nop
    21f4:	20000630 	.word	0x20000630

000021f8 <z_add_thread_to_ready_q>:
{
    21f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	__asm__ volatile(
    21fa:	f04f 0320 	mov.w	r3, #32
    21fe:	f3ef 8411 	mrs	r4, BASEPRI
    2202:	f383 8811 	msr	BASEPRI, r3
    2206:	f3bf 8f6f 	isb	sy
	return list->head == list;
    220a:	4a16      	ldr	r2, [pc, #88]	; (2264 <z_add_thread_to_ready_q+0x6c>)
    220c:	4611      	mov	r1, r2
    220e:	f851 3f28 	ldr.w	r3, [r1, #40]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
    2212:	428b      	cmp	r3, r1
    2214:	d00c      	beq.n	2230 <z_add_thread_to_ready_q+0x38>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    2216:	b15b      	cbz	r3, 2230 <z_add_thread_to_ready_q+0x38>
    2218:	6ad6      	ldr	r6, [r2, #44]	; 0x2c
	if (t1->base.prio < t2->base.prio) {
    221a:	f990 500e 	ldrsb.w	r5, [r0, #14]
    221e:	f993 700e 	ldrsb.w	r7, [r3, #14]
    2222:	42af      	cmp	r7, r5
    2224:	dc0b      	bgt.n	223e <z_add_thread_to_ready_q+0x46>
	return (node == list->tail) ? NULL : node->next;
    2226:	42b3      	cmp	r3, r6
    2228:	d002      	beq.n	2230 <z_add_thread_to_ready_q+0x38>
    222a:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    222c:	2b00      	cmp	r3, #0
    222e:	d1f6      	bne.n	221e <z_add_thread_to_ready_q+0x26>
	node->prev = list->tail;
    2230:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
	node->next = list;
    2232:	6001      	str	r1, [r0, #0]
	node->prev = list->tail;
    2234:	6043      	str	r3, [r0, #4]
	list->tail->next = node;
    2236:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
    2238:	6018      	str	r0, [r3, #0]
	list->tail = node;
    223a:	62d0      	str	r0, [r2, #44]	; 0x2c
    223c:	e005      	b.n	224a <z_add_thread_to_ready_q+0x52>
	node->prev = successor->prev;
    223e:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
    2240:	e9c0 3200 	strd	r3, r2, [r0]
	successor->prev->next = node;
    2244:	685a      	ldr	r2, [r3, #4]
    2246:	6010      	str	r0, [r2, #0]
	successor->prev = node;
    2248:	6058      	str	r0, [r3, #4]
	thread->base.thread_state |= states;
    224a:	7b43      	ldrb	r3, [r0, #13]
    224c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    2250:	7343      	strb	r3, [r0, #13]
		update_cache(0);
    2252:	2000      	movs	r0, #0
    2254:	f7ff ff96 	bl	2184 <update_cache>
	__asm__ volatile(
    2258:	f384 8811 	msr	BASEPRI, r4
    225c:	f3bf 8f6f 	isb	sy
}
    2260:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    2262:	bf00      	nop
    2264:	20000630 	.word	0x20000630

00002268 <z_move_thread_to_end_of_prio_q>:
{
    2268:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    226a:	4604      	mov	r4, r0
	__asm__ volatile(
    226c:	f04f 0320 	mov.w	r3, #32
    2270:	f3ef 8511 	mrs	r5, BASEPRI
    2274:	f383 8811 	msr	BASEPRI, r3
    2278:	f3bf 8f6f 	isb	sy
		if (z_is_thread_queued(thread)) {
    227c:	7b43      	ldrb	r3, [r0, #13]
    227e:	065a      	lsls	r2, r3, #25
    2280:	d503      	bpl.n	228a <z_move_thread_to_end_of_prio_q+0x22>
			_priq_run_remove(&_kernel.ready_q.runq, thread);
    2282:	4601      	mov	r1, r0
    2284:	4818      	ldr	r0, [pc, #96]	; (22e8 <z_move_thread_to_end_of_prio_q+0x80>)
    2286:	f7ff ff67 	bl	2158 <z_priq_dumb_remove>
	return list->head == list;
    228a:	4a18      	ldr	r2, [pc, #96]	; (22ec <z_move_thread_to_end_of_prio_q+0x84>)
	return sys_dlist_is_empty(list) ? NULL : list->head;
    228c:	f102 0128 	add.w	r1, r2, #40	; 0x28
    2290:	e9d2 300a 	ldrd	r3, r0, [r2, #40]	; 0x28
    2294:	428b      	cmp	r3, r1
    2296:	d00b      	beq.n	22b0 <z_move_thread_to_end_of_prio_q+0x48>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    2298:	b153      	cbz	r3, 22b0 <z_move_thread_to_end_of_prio_q+0x48>
	if (t1->base.prio < t2->base.prio) {
    229a:	f994 600e 	ldrsb.w	r6, [r4, #14]
    229e:	f993 700e 	ldrsb.w	r7, [r3, #14]
    22a2:	42b7      	cmp	r7, r6
    22a4:	dc0a      	bgt.n	22bc <z_move_thread_to_end_of_prio_q+0x54>
	return (node == list->tail) ? NULL : node->next;
    22a6:	4283      	cmp	r3, r0
    22a8:	d002      	beq.n	22b0 <z_move_thread_to_end_of_prio_q+0x48>
    22aa:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    22ac:	2b00      	cmp	r3, #0
    22ae:	d1f6      	bne.n	229e <z_move_thread_to_end_of_prio_q+0x36>
	node->prev = list->tail;
    22b0:	e9c4 1000 	strd	r1, r0, [r4]
	list->tail->next = node;
    22b4:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
    22b6:	601c      	str	r4, [r3, #0]
	list->tail = node;
    22b8:	62d4      	str	r4, [r2, #44]	; 0x2c
    22ba:	e005      	b.n	22c8 <z_move_thread_to_end_of_prio_q+0x60>
	node->prev = successor->prev;
    22bc:	6859      	ldr	r1, [r3, #4]
	node->next = successor;
    22be:	e9c4 3100 	strd	r3, r1, [r4]
	successor->prev->next = node;
    22c2:	6859      	ldr	r1, [r3, #4]
    22c4:	600c      	str	r4, [r1, #0]
	successor->prev = node;
    22c6:	605c      	str	r4, [r3, #4]
    22c8:	7b63      	ldrb	r3, [r4, #13]
		update_cache(thread == _current);
    22ca:	6890      	ldr	r0, [r2, #8]
    22cc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    22d0:	7363      	strb	r3, [r4, #13]
    22d2:	1b03      	subs	r3, r0, r4
    22d4:	4258      	negs	r0, r3
    22d6:	4158      	adcs	r0, r3
    22d8:	f7ff ff54 	bl	2184 <update_cache>
	__asm__ volatile(
    22dc:	f385 8811 	msr	BASEPRI, r5
    22e0:	f3bf 8f6f 	isb	sy
}
    22e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    22e6:	bf00      	nop
    22e8:	20000658 	.word	0x20000658
    22ec:	20000630 	.word	0x20000630

000022f0 <z_time_slice>:
	if (pending_current == _current) {
    22f0:	4a15      	ldr	r2, [pc, #84]	; (2348 <z_time_slice+0x58>)
    22f2:	4916      	ldr	r1, [pc, #88]	; (234c <z_time_slice+0x5c>)
{
    22f4:	b538      	push	{r3, r4, r5, lr}
	if (pending_current == _current) {
    22f6:	680c      	ldr	r4, [r1, #0]
    22f8:	6893      	ldr	r3, [r2, #8]
    22fa:	42a3      	cmp	r3, r4
    22fc:	4614      	mov	r4, r2
    22fe:	d103      	bne.n	2308 <z_time_slice+0x18>
}
    2300:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
			z_reset_time_slice();
    2304:	f7ff bed2 	b.w	20ac <z_reset_time_slice>
	pending_current = NULL;
    2308:	2500      	movs	r5, #0
    230a:	600d      	str	r5, [r1, #0]
	if (slice_time && sliceable(_current)) {
    230c:	4910      	ldr	r1, [pc, #64]	; (2350 <z_time_slice+0x60>)
    230e:	6809      	ldr	r1, [r1, #0]
    2310:	b1b9      	cbz	r1, 2342 <z_time_slice+0x52>
		&& !z_is_thread_timeout_active(t);
    2312:	89d9      	ldrh	r1, [r3, #14]
    2314:	297f      	cmp	r1, #127	; 0x7f
    2316:	d814      	bhi.n	2342 <z_time_slice+0x52>
		&& !z_is_prio_higher(t->base.prio, slice_max_prio)
    2318:	490e      	ldr	r1, [pc, #56]	; (2354 <z_time_slice+0x64>)
    231a:	f993 500e 	ldrsb.w	r5, [r3, #14]
    231e:	6809      	ldr	r1, [r1, #0]
    2320:	428d      	cmp	r5, r1
    2322:	db0e      	blt.n	2342 <z_time_slice+0x52>
		&& !z_is_idle_thread_object(t)
    2324:	490c      	ldr	r1, [pc, #48]	; (2358 <z_time_slice+0x68>)
    2326:	428b      	cmp	r3, r1
    2328:	d00b      	beq.n	2342 <z_time_slice+0x52>
		&& !z_is_thread_timeout_active(t);
    232a:	6999      	ldr	r1, [r3, #24]
    232c:	b949      	cbnz	r1, 2342 <z_time_slice+0x52>
		if (ticks >= _current_cpu->slice_ticks) {
    232e:	6911      	ldr	r1, [r2, #16]
    2330:	4281      	cmp	r1, r0
    2332:	dc03      	bgt.n	233c <z_time_slice+0x4c>
			z_move_thread_to_end_of_prio_q(_current);
    2334:	4618      	mov	r0, r3
    2336:	f7ff ff97 	bl	2268 <z_move_thread_to_end_of_prio_q>
    233a:	e7e1      	b.n	2300 <z_time_slice+0x10>
			_current_cpu->slice_ticks -= ticks;
    233c:	1a09      	subs	r1, r1, r0
    233e:	6111      	str	r1, [r2, #16]
}
    2340:	bd38      	pop	{r3, r4, r5, pc}
		_current_cpu->slice_ticks = 0;
    2342:	2300      	movs	r3, #0
    2344:	6123      	str	r3, [r4, #16]
    2346:	e7fb      	b.n	2340 <z_time_slice+0x50>
    2348:	20000630 	.word	0x20000630
    234c:	20000660 	.word	0x20000660
    2350:	20000668 	.word	0x20000668
    2354:	20000664 	.word	0x20000664
    2358:	20000558 	.word	0x20000558

0000235c <z_remove_thread_from_ready_q>:
{
    235c:	b538      	push	{r3, r4, r5, lr}
    235e:	4604      	mov	r4, r0
	__asm__ volatile(
    2360:	f04f 0320 	mov.w	r3, #32
    2364:	f3ef 8511 	mrs	r5, BASEPRI
    2368:	f383 8811 	msr	BASEPRI, r3
    236c:	f3bf 8f6f 	isb	sy
		if (z_is_thread_queued(thread)) {
    2370:	7b43      	ldrb	r3, [r0, #13]
    2372:	065a      	lsls	r2, r3, #25
    2374:	d507      	bpl.n	2386 <z_remove_thread_from_ready_q+0x2a>
			_priq_run_remove(&_kernel.ready_q.runq, thread);
    2376:	4601      	mov	r1, r0
    2378:	4809      	ldr	r0, [pc, #36]	; (23a0 <z_remove_thread_from_ready_q+0x44>)
    237a:	f7ff feed 	bl	2158 <z_priq_dumb_remove>
	thread->base.thread_state &= ~states;
    237e:	7b63      	ldrb	r3, [r4, #13]
    2380:	f023 0340 	bic.w	r3, r3, #64	; 0x40
    2384:	7363      	strb	r3, [r4, #13]
		update_cache(thread == _current);
    2386:	4b07      	ldr	r3, [pc, #28]	; (23a4 <z_remove_thread_from_ready_q+0x48>)
    2388:	6898      	ldr	r0, [r3, #8]
    238a:	1b03      	subs	r3, r0, r4
    238c:	4258      	negs	r0, r3
    238e:	4158      	adcs	r0, r3
    2390:	f7ff fef8 	bl	2184 <update_cache>
	__asm__ volatile(
    2394:	f385 8811 	msr	BASEPRI, r5
    2398:	f3bf 8f6f 	isb	sy
}
    239c:	bd38      	pop	{r3, r4, r5, pc}
    239e:	bf00      	nop
    23a0:	20000658 	.word	0x20000658
    23a4:	20000630 	.word	0x20000630

000023a8 <pend>:
{
    23a8:	b570      	push	{r4, r5, r6, lr}
    23aa:	4604      	mov	r4, r0
    23ac:	460d      	mov	r5, r1
    23ae:	4616      	mov	r6, r2
	z_remove_thread_from_ready_q(thread);
    23b0:	f7ff ffd4 	bl	235c <z_remove_thread_from_ready_q>
	thread->base.thread_state |= _THREAD_PENDING;
    23b4:	7b63      	ldrb	r3, [r4, #13]
    23b6:	f043 0302 	orr.w	r3, r3, #2
    23ba:	7363      	strb	r3, [r4, #13]
	if (wait_q != NULL) {
    23bc:	b1ed      	cbz	r5, 23fa <pend+0x52>
	return list->head == list;
    23be:	682b      	ldr	r3, [r5, #0]
		thread->base.pended_on = wait_q;
    23c0:	60a5      	str	r5, [r4, #8]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    23c2:	429d      	cmp	r5, r3
    23c4:	d00c      	beq.n	23e0 <pend+0x38>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    23c6:	b15b      	cbz	r3, 23e0 <pend+0x38>
	if (t1->base.prio < t2->base.prio) {
    23c8:	f994 200e 	ldrsb.w	r2, [r4, #14]
    23cc:	f993 100e 	ldrsb.w	r1, [r3, #14]
    23d0:	4291      	cmp	r1, r2
    23d2:	dc0c      	bgt.n	23ee <pend+0x46>
	return (node == list->tail) ? NULL : node->next;
    23d4:	6869      	ldr	r1, [r5, #4]
    23d6:	428b      	cmp	r3, r1
    23d8:	d002      	beq.n	23e0 <pend+0x38>
    23da:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    23dc:	2b00      	cmp	r3, #0
    23de:	d1f5      	bne.n	23cc <pend+0x24>
	node->prev = list->tail;
    23e0:	686b      	ldr	r3, [r5, #4]
	node->next = list;
    23e2:	6025      	str	r5, [r4, #0]
	node->prev = list->tail;
    23e4:	6063      	str	r3, [r4, #4]
	list->tail->next = node;
    23e6:	686b      	ldr	r3, [r5, #4]
    23e8:	601c      	str	r4, [r3, #0]
	list->tail = node;
    23ea:	606c      	str	r4, [r5, #4]
    23ec:	e005      	b.n	23fa <pend+0x52>
	node->prev = successor->prev;
    23ee:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
    23f0:	e9c4 3200 	strd	r3, r2, [r4]
	successor->prev->next = node;
    23f4:	685a      	ldr	r2, [r3, #4]
    23f6:	6014      	str	r4, [r2, #0]
	successor->prev = node;
    23f8:	605c      	str	r4, [r3, #4]
	if (timeout != K_FOREVER) {
    23fa:	1c73      	adds	r3, r6, #1
    23fc:	d013      	beq.n	2426 <pend+0x7e>
    23fe:	f44f 4500 	mov.w	r5, #32768	; 0x8000
    2402:	f240 30e7 	movw	r0, #999	; 0x3e7
    2406:	2100      	movs	r1, #0
    2408:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    240c:	fbc5 0106 	smlal	r0, r1, r5, r6
    2410:	2300      	movs	r3, #0
    2412:	f7fd ff05 	bl	220 <__aeabi_ldivmod>

extern void z_thread_timeout(struct _timeout *to);

static inline void z_add_thread_timeout(struct k_thread *th, s32_t ticks)
{
	z_add_timeout(&th->base.timeout, z_thread_timeout, ticks);
    2416:	4904      	ldr	r1, [pc, #16]	; (2428 <pend+0x80>)
    2418:	1c42      	adds	r2, r0, #1
    241a:	f104 0018 	add.w	r0, r4, #24
}
    241e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    2422:	f000 b93f 	b.w	26a4 <z_add_timeout>
    2426:	bd70      	pop	{r4, r5, r6, pc}
    2428:	00003f0b 	.word	0x00003f0b

0000242c <z_pend_curr>:
{
    242c:	b510      	push	{r4, lr}
    242e:	460c      	mov	r4, r1
    2430:	4611      	mov	r1, r2
	pending_current = _current;
    2432:	4a06      	ldr	r2, [pc, #24]	; (244c <z_pend_curr+0x20>)
    2434:	6890      	ldr	r0, [r2, #8]
    2436:	4a06      	ldr	r2, [pc, #24]	; (2450 <z_pend_curr+0x24>)
    2438:	6010      	str	r0, [r2, #0]
	pend(_current, wait_q, timeout);
    243a:	461a      	mov	r2, r3
    243c:	f7ff ffb4 	bl	23a8 <pend>
    2440:	4620      	mov	r0, r4
}
    2442:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    2446:	f7fe be8d 	b.w	1164 <z_arch_swap>
    244a:	bf00      	nop
    244c:	20000630 	.word	0x20000630
    2450:	20000660 	.word	0x20000660

00002454 <z_set_prio>:
{
    2454:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    2458:	4604      	mov	r4, r0
	__asm__ volatile(
    245a:	f04f 0320 	mov.w	r3, #32
    245e:	f3ef 8911 	mrs	r9, BASEPRI
    2462:	f383 8811 	msr	BASEPRI, r3
    2466:	f3bf 8f6f 	isb	sy
		need_sched = z_is_thread_ready(thread);
    246a:	f001 fcfd 	bl	3e68 <z_is_thread_ready>
    246e:	b24e      	sxtb	r6, r1
		if (need_sched) {
    2470:	4680      	mov	r8, r0
    2472:	b368      	cbz	r0, 24d0 <z_set_prio+0x7c>
				_priq_run_remove(&_kernel.ready_q.runq, thread);
    2474:	4d17      	ldr	r5, [pc, #92]	; (24d4 <z_set_prio+0x80>)
    2476:	4621      	mov	r1, r4
    2478:	f105 0728 	add.w	r7, r5, #40	; 0x28
    247c:	4638      	mov	r0, r7
    247e:	f7ff fe6b 	bl	2158 <z_priq_dumb_remove>
	return list->head == list;
    2482:	6aab      	ldr	r3, [r5, #40]	; 0x28
				thread->base.prio = prio;
    2484:	73a6      	strb	r6, [r4, #14]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    2486:	42bb      	cmp	r3, r7
    2488:	462a      	mov	r2, r5
    248a:	d00a      	beq.n	24a2 <z_set_prio+0x4e>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    248c:	b14b      	cbz	r3, 24a2 <z_set_prio+0x4e>
    248e:	6ae9      	ldr	r1, [r5, #44]	; 0x2c
	if (t1->base.prio < t2->base.prio) {
    2490:	f993 000e 	ldrsb.w	r0, [r3, #14]
    2494:	42b0      	cmp	r0, r6
    2496:	dc0b      	bgt.n	24b0 <z_set_prio+0x5c>
	return (node == list->tail) ? NULL : node->next;
    2498:	4299      	cmp	r1, r3
    249a:	d002      	beq.n	24a2 <z_set_prio+0x4e>
    249c:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    249e:	2b00      	cmp	r3, #0
    24a0:	d1f6      	bne.n	2490 <z_set_prio+0x3c>
	node->prev = list->tail;
    24a2:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
	node->next = list;
    24a4:	6027      	str	r7, [r4, #0]
	node->prev = list->tail;
    24a6:	6063      	str	r3, [r4, #4]
	list->tail->next = node;
    24a8:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
    24aa:	601c      	str	r4, [r3, #0]
	list->tail = node;
    24ac:	62d4      	str	r4, [r2, #44]	; 0x2c
    24ae:	e005      	b.n	24bc <z_set_prio+0x68>
	node->prev = successor->prev;
    24b0:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
    24b2:	e9c4 3200 	strd	r3, r2, [r4]
	successor->prev->next = node;
    24b6:	685a      	ldr	r2, [r3, #4]
    24b8:	6014      	str	r4, [r2, #0]
	successor->prev = node;
    24ba:	605c      	str	r4, [r3, #4]
			update_cache(1);
    24bc:	2001      	movs	r0, #1
    24be:	f7ff fe61 	bl	2184 <update_cache>
	__asm__ volatile(
    24c2:	f389 8811 	msr	BASEPRI, r9
    24c6:	f3bf 8f6f 	isb	sy
}
    24ca:	4640      	mov	r0, r8
    24cc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			thread->base.prio = prio;
    24d0:	73a6      	strb	r6, [r4, #14]
    24d2:	e7f6      	b.n	24c2 <z_set_prio+0x6e>
    24d4:	20000630 	.word	0x20000630

000024d8 <z_sched_init>:
		sys_dlist_init(&_kernel.ready_q.runq.queues[i]);
	}
#endif

#ifdef CONFIG_TIMESLICING
	k_sched_time_slice_set(CONFIG_TIMESLICE_SIZE,
    24d8:	2100      	movs	r1, #0
	list->head = (sys_dnode_t *)list;
    24da:	4b04      	ldr	r3, [pc, #16]	; (24ec <z_sched_init+0x14>)
    24dc:	4608      	mov	r0, r1
    24de:	f103 0228 	add.w	r2, r3, #40	; 0x28
	list->tail = (sys_dnode_t *)list;
    24e2:	e9c3 220a 	strd	r2, r2, [r3, #40]	; 0x28
    24e6:	f7ff bdf7 	b.w	20d8 <k_sched_time_slice_set>
    24ea:	bf00      	nop
    24ec:	20000630 	.word	0x20000630

000024f0 <z_impl_k_current_get>:
#endif

k_tid_t z_impl_k_current_get(void)
{
	return _current;
}
    24f0:	4b01      	ldr	r3, [pc, #4]	; (24f8 <z_impl_k_current_get+0x8>)
    24f2:	6898      	ldr	r0, [r3, #8]
    24f4:	4770      	bx	lr
    24f6:	bf00      	nop
    24f8:	20000630 	.word	0x20000630

000024fc <z_impl_k_thread_start>:
}
#endif

#ifdef CONFIG_MULTITHREADING
void z_impl_k_thread_start(struct k_thread *thread)
{
    24fc:	b510      	push	{r4, lr}
    24fe:	4602      	mov	r2, r0
	__asm__ volatile(
    2500:	f04f 0320 	mov.w	r3, #32
    2504:	f3ef 8411 	mrs	r4, BASEPRI
    2508:	f383 8811 	msr	BASEPRI, r3
    250c:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock); /* protect kernel queues */

	if (z_has_thread_started(thread)) {
    2510:	7b43      	ldrb	r3, [r0, #13]
    2512:	0759      	lsls	r1, r3, #29
    2514:	d404      	bmi.n	2520 <z_impl_k_thread_start+0x24>
	__asm__ volatile(
    2516:	f384 8811 	msr	BASEPRI, r4
    251a:	f3bf 8f6f 	isb	sy
	}

	z_mark_thread_as_started(thread);
	z_ready_thread(thread);
	z_reschedule(&lock, key);
}
    251e:	bd10      	pop	{r4, pc}
	thread->base.thread_state &= ~_THREAD_PRESTART;
    2520:	f023 0304 	bic.w	r3, r3, #4
    2524:	7343      	strb	r3, [r0, #13]
	if (z_is_thread_ready(thread)) {
    2526:	f001 fd4e 	bl	3fc6 <z_is_thread_ready>
    252a:	b110      	cbz	r0, 2532 <z_impl_k_thread_start+0x36>
		z_add_thread_to_ready_q(thread);
    252c:	4610      	mov	r0, r2
    252e:	f7ff fe63 	bl	21f8 <z_add_thread_to_ready_q>
	z_reschedule(&lock, key);
    2532:	4621      	mov	r1, r4
}
    2534:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule(&lock, key);
    2538:	4801      	ldr	r0, [pc, #4]	; (2540 <z_impl_k_thread_start+0x44>)
    253a:	f001 bcb7 	b.w	3eac <z_reschedule>
    253e:	bf00      	nop
    2540:	2000068d 	.word	0x2000068d

00002544 <z_setup_new_thread>:
void z_setup_new_thread(struct k_thread *new_thread,
		       k_thread_stack_t *stack, size_t stack_size,
		       k_thread_entry_t entry,
		       void *p1, void *p2, void *p3,
		       int prio, u32_t options, const char *name)
{
    2544:	b530      	push	{r4, r5, lr}
    2546:	b087      	sub	sp, #28
	stack_size = STACK_ROUND_DOWN(stack_size
			- sizeof(*new_thread->userspace_local_data));
#endif
#endif

	z_arch_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
    2548:	9d0e      	ldr	r5, [sp, #56]	; 0x38
{
    254a:	4604      	mov	r4, r0
	z_arch_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
    254c:	9504      	str	r5, [sp, #16]
    254e:	9d0d      	ldr	r5, [sp, #52]	; 0x34
    2550:	9503      	str	r5, [sp, #12]
    2552:	9d0c      	ldr	r5, [sp, #48]	; 0x30
    2554:	9502      	str	r5, [sp, #8]
    2556:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
    2558:	9501      	str	r5, [sp, #4]
    255a:	9d0a      	ldr	r5, [sp, #40]	; 0x28
    255c:	9500      	str	r5, [sp, #0]
    255e:	f7fe fe43 	bl	11e8 <z_arch_new_thread>
#ifdef CONFIG_SCHED_CPU_MASK
	new_thread->base.cpu_mask = -1;
#endif
#ifdef CONFIG_ARCH_HAS_CUSTOM_SWAP_TO_MAIN
	/* _current may be null if the dummy thread is not used */
	if (!_current) {
    2562:	4b04      	ldr	r3, [pc, #16]	; (2574 <z_setup_new_thread+0x30>)
    2564:	689b      	ldr	r3, [r3, #8]
    2566:	b913      	cbnz	r3, 256e <z_setup_new_thread+0x2a>
	}
#endif
#ifdef CONFIG_SCHED_DEADLINE
	new_thread->base.prio_deadline = 0;
#endif
	new_thread->resource_pool = _current->resource_pool;
    2568:	6623      	str	r3, [r4, #96]	; 0x60
	sys_trace_thread_create(new_thread);
}
    256a:	b007      	add	sp, #28
    256c:	bd30      	pop	{r4, r5, pc}
	new_thread->resource_pool = _current->resource_pool;
    256e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
    2570:	e7fa      	b.n	2568 <z_setup_new_thread+0x24>
    2572:	bf00      	nop
    2574:	20000630 	.word	0x20000630

00002578 <z_init_static_threads>:
	}
}
#endif /* CONFIG_USERSPACE */

void z_init_static_threads(void)
{
    2578:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	_FOREACH_STATIC_THREAD(thread_data) {
    257c:	4e28      	ldr	r6, [pc, #160]	; (2620 <z_init_static_threads+0xa8>)
    257e:	4d29      	ldr	r5, [pc, #164]	; (2624 <z_init_static_threads+0xac>)
    2580:	46b0      	mov	r8, r6
{
    2582:	b087      	sub	sp, #28
	_FOREACH_STATIC_THREAD(thread_data) {
    2584:	42b5      	cmp	r5, r6
    2586:	f105 0430 	add.w	r4, r5, #48	; 0x30
    258a:	d310      	bcc.n	25ae <z_init_static_threads+0x36>
	 * until they are all started.
	 *
	 * Note that static threads defined using the legacy API have a
	 * delay of K_FOREVER.
	 */
	k_sched_lock();
    258c:	f7ff fdd0 	bl	2130 <k_sched_lock>
    2590:	f44f 4900 	mov.w	r9, #32768	; 0x8000
    2594:	f240 36e7 	movw	r6, #999	; 0x3e7
    2598:	2700      	movs	r7, #0
	_FOREACH_STATIC_THREAD(thread_data) {
    259a:	4c22      	ldr	r4, [pc, #136]	; (2624 <z_init_static_threads+0xac>)
    259c:	f8df a088 	ldr.w	sl, [pc, #136]	; 2628 <z_init_static_threads+0xb0>
    25a0:	4544      	cmp	r4, r8
    25a2:	d321      	bcc.n	25e8 <z_init_static_threads+0x70>
			schedule_new_thread(thread_data->init_thread,
					    thread_data->init_delay);
		}
	}
	k_sched_unlock();
}
    25a4:	b007      	add	sp, #28
    25a6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	k_sched_unlock();
    25aa:	f7ff be09 	b.w	21c0 <k_sched_unlock>
		z_setup_new_thread(
    25ae:	f854 3c04 	ldr.w	r3, [r4, #-4]
    25b2:	9305      	str	r3, [sp, #20]
    25b4:	f854 3c10 	ldr.w	r3, [r4, #-16]
    25b8:	9304      	str	r3, [sp, #16]
    25ba:	f854 3c14 	ldr.w	r3, [r4, #-20]
    25be:	9303      	str	r3, [sp, #12]
    25c0:	f854 3c18 	ldr.w	r3, [r4, #-24]
    25c4:	9302      	str	r3, [sp, #8]
    25c6:	f854 3c1c 	ldr.w	r3, [r4, #-28]
    25ca:	9301      	str	r3, [sp, #4]
    25cc:	f854 3c20 	ldr.w	r3, [r4, #-32]
    25d0:	9300      	str	r3, [sp, #0]
    25d2:	e954 230a 	ldrd	r2, r3, [r4, #-40]	; 0x28
    25d6:	e954 010c 	ldrd	r0, r1, [r4, #-48]	; 0x30
    25da:	f7ff ffb3 	bl	2544 <z_setup_new_thread>
		thread_data->init_thread->init_data = thread_data;
    25de:	f854 3c30 	ldr.w	r3, [r4, #-48]
    25e2:	64dd      	str	r5, [r3, #76]	; 0x4c
    25e4:	4625      	mov	r5, r4
    25e6:	e7cd      	b.n	2584 <z_init_static_threads+0xc>
		if (thread_data->init_delay != K_FOREVER) {
    25e8:	6a61      	ldr	r1, [r4, #36]	; 0x24
    25ea:	1c4b      	adds	r3, r1, #1
    25ec:	d004      	beq.n	25f8 <z_init_static_threads+0x80>
			schedule_new_thread(thread_data->init_thread,
    25ee:	6825      	ldr	r5, [r4, #0]
	if (delay == 0) {
    25f0:	b921      	cbnz	r1, 25fc <z_init_static_threads+0x84>
	z_impl_k_thread_start(thread);
    25f2:	4628      	mov	r0, r5
    25f4:	f7ff ff82 	bl	24fc <z_impl_k_thread_start>
	_FOREACH_STATIC_THREAD(thread_data) {
    25f8:	3430      	adds	r4, #48	; 0x30
    25fa:	e7d1      	b.n	25a0 <z_init_static_threads+0x28>
    25fc:	46b3      	mov	fp, r6
    25fe:	46bc      	mov	ip, r7
    2600:	fbc9 bc01 	smlal	fp, ip, r9, r1
    2604:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    2608:	2300      	movs	r3, #0
    260a:	4658      	mov	r0, fp
    260c:	4661      	mov	r1, ip
    260e:	f7fd fe07 	bl	220 <__aeabi_ldivmod>
    2612:	4651      	mov	r1, sl
    2614:	1c42      	adds	r2, r0, #1
    2616:	f105 0018 	add.w	r0, r5, #24
    261a:	f000 f843 	bl	26a4 <z_add_timeout>
    261e:	e7eb      	b.n	25f8 <z_init_static_threads+0x80>
    2620:	200014cc 	.word	0x200014cc
    2624:	200014cc 	.word	0x200014cc
    2628:	00003f0b 	.word	0x00003f0b

0000262c <elapsed>:
	sys_dlist_remove(&t->node);
}

static s32_t elapsed(void)
{
	return announce_remaining == 0 ? z_clock_elapsed() : 0;
    262c:	4b03      	ldr	r3, [pc, #12]	; (263c <elapsed+0x10>)
    262e:	681b      	ldr	r3, [r3, #0]
    2630:	b90b      	cbnz	r3, 2636 <elapsed+0xa>
    2632:	f7fe b9dd 	b.w	9f0 <z_clock_elapsed>
}
    2636:	2000      	movs	r0, #0
    2638:	4770      	bx	lr
    263a:	bf00      	nop
    263c:	2000066c 	.word	0x2000066c

00002640 <remove_timeout>:
{
    2640:	6803      	ldr	r3, [r0, #0]
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    2642:	b140      	cbz	r0, 2656 <remove_timeout+0x16>
    2644:	4a08      	ldr	r2, [pc, #32]	; (2668 <remove_timeout+0x28>)
	return (node == list->tail) ? NULL : node->next;
    2646:	6852      	ldr	r2, [r2, #4]
    2648:	4290      	cmp	r0, r2
    264a:	d004      	beq.n	2656 <remove_timeout+0x16>
	if (next(t) != NULL) {
    264c:	b11b      	cbz	r3, 2656 <remove_timeout+0x16>
		next(t)->dticks += t->dticks;
    264e:	689a      	ldr	r2, [r3, #8]
    2650:	6881      	ldr	r1, [r0, #8]
    2652:	440a      	add	r2, r1
    2654:	609a      	str	r2, [r3, #8]
	node->prev->next = node->next;
    2656:	6842      	ldr	r2, [r0, #4]
    2658:	6013      	str	r3, [r2, #0]
	node->next->prev = node->prev;
    265a:	6803      	ldr	r3, [r0, #0]
    265c:	605a      	str	r2, [r3, #4]
	node->next = NULL;
    265e:	2300      	movs	r3, #0
	node->prev = NULL;
    2660:	e9c0 3300 	strd	r3, r3, [r0]
}
    2664:	4770      	bx	lr
    2666:	bf00      	nop
    2668:	2000140c 	.word	0x2000140c

0000266c <next_timeout>:
	return list->head == list;
    266c:	4b0b      	ldr	r3, [pc, #44]	; (269c <next_timeout+0x30>)

static s32_t next_timeout(void)
{
    266e:	b510      	push	{r4, lr}
    2670:	681c      	ldr	r4, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    2672:	429c      	cmp	r4, r3
    2674:	bf08      	it	eq
    2676:	2400      	moveq	r4, #0
	struct _timeout *to = first();
	s32_t ticks_elapsed = elapsed();
    2678:	f7ff ffd8 	bl	262c <elapsed>
	s32_t ret = to == NULL ? MAX_WAIT : MAX(0, to->dticks - ticks_elapsed);
    267c:	b154      	cbz	r4, 2694 <next_timeout+0x28>
    267e:	68a3      	ldr	r3, [r4, #8]
    2680:	1a18      	subs	r0, r3, r0
    2682:	ea20 70e0 	bic.w	r0, r0, r0, asr #31

#ifdef CONFIG_TIMESLICING
	if (_current_cpu->slice_ticks && _current_cpu->slice_ticks < ret) {
    2686:	4b06      	ldr	r3, [pc, #24]	; (26a0 <next_timeout+0x34>)
    2688:	691b      	ldr	r3, [r3, #16]
    268a:	b113      	cbz	r3, 2692 <next_timeout+0x26>
    268c:	4298      	cmp	r0, r3
    268e:	bfa8      	it	ge
    2690:	4618      	movge	r0, r3
		ret = _current_cpu->slice_ticks;
	}
#endif
	return ret;
}
    2692:	bd10      	pop	{r4, pc}
	s32_t ret = to == NULL ? MAX_WAIT : MAX(0, to->dticks - ticks_elapsed);
    2694:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
    2698:	e7f5      	b.n	2686 <next_timeout+0x1a>
    269a:	bf00      	nop
    269c:	2000140c 	.word	0x2000140c
    26a0:	20000630 	.word	0x20000630

000026a4 <z_add_timeout>:

void z_add_timeout(struct _timeout *to, _timeout_func_t fn, s32_t ticks)
{
    26a4:	b570      	push	{r4, r5, r6, lr}
    26a6:	4604      	mov	r4, r0
    26a8:	4616      	mov	r6, r2
	__ASSERT(!sys_dnode_is_linked(&to->node), "");
	to->fn = fn;
    26aa:	60c1      	str	r1, [r0, #12]
	__asm__ volatile(
    26ac:	f04f 0320 	mov.w	r3, #32
    26b0:	f3ef 8511 	mrs	r5, BASEPRI
    26b4:	f383 8811 	msr	BASEPRI, r3
    26b8:	f3bf 8f6f 	isb	sy
	ticks = MAX(1, ticks);

	LOCKED(&timeout_lock) {
		struct _timeout *t;

		to->dticks = ticks + elapsed();
    26bc:	f7ff ffb6 	bl	262c <elapsed>
    26c0:	2e01      	cmp	r6, #1
    26c2:	bfac      	ite	ge
    26c4:	1980      	addge	r0, r0, r6
    26c6:	3001      	addlt	r0, #1
	return list->head == list;
    26c8:	4b17      	ldr	r3, [pc, #92]	; (2728 <z_add_timeout+0x84>)
    26ca:	60a0      	str	r0, [r4, #8]
    26cc:	681a      	ldr	r2, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    26ce:	429a      	cmp	r2, r3
    26d0:	d001      	beq.n	26d6 <z_add_timeout+0x32>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    26d2:	685e      	ldr	r6, [r3, #4]
		for (t = first(); t != NULL; t = next(t)) {
    26d4:	b932      	cbnz	r2, 26e4 <z_add_timeout+0x40>
	node->prev = list->tail;
    26d6:	685a      	ldr	r2, [r3, #4]
	node->next = list;
    26d8:	6023      	str	r3, [r4, #0]
	node->prev = list->tail;
    26da:	6062      	str	r2, [r4, #4]
	list->tail->next = node;
    26dc:	685a      	ldr	r2, [r3, #4]
    26de:	6014      	str	r4, [r2, #0]
	list->tail = node;
    26e0:	605c      	str	r4, [r3, #4]
    26e2:	e00b      	b.n	26fc <z_add_timeout+0x58>
			__ASSERT(t->dticks >= 0, "");

			if (t->dticks > to->dticks) {
    26e4:	6890      	ldr	r0, [r2, #8]
    26e6:	68a1      	ldr	r1, [r4, #8]
    26e8:	4288      	cmp	r0, r1
    26ea:	dd16      	ble.n	271a <z_add_timeout+0x76>
				t->dticks -= to->dticks;
    26ec:	1a41      	subs	r1, r0, r1
    26ee:	6091      	str	r1, [r2, #8]
	node->prev = successor->prev;
    26f0:	6851      	ldr	r1, [r2, #4]
	node->next = successor;
    26f2:	e9c4 2100 	strd	r2, r1, [r4]
	successor->prev->next = node;
    26f6:	6851      	ldr	r1, [r2, #4]
    26f8:	600c      	str	r4, [r1, #0]
	successor->prev = node;
    26fa:	6054      	str	r4, [r2, #4]
	return list->head == list;
    26fc:	681a      	ldr	r2, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    26fe:	429a      	cmp	r2, r3
    2700:	d006      	beq.n	2710 <z_add_timeout+0x6c>

		if (t == NULL) {
			sys_dlist_append(&timeout_list, &to->node);
		}

		if (to == first()) {
    2702:	4294      	cmp	r4, r2
    2704:	d104      	bne.n	2710 <z_add_timeout+0x6c>
			z_clock_set_timeout(next_timeout(), false);
    2706:	f7ff ffb1 	bl	266c <next_timeout>
    270a:	2100      	movs	r1, #0
    270c:	f7fe f922 	bl	954 <z_clock_set_timeout>
	__asm__ volatile(
    2710:	f385 8811 	msr	BASEPRI, r5
    2714:	f3bf 8f6f 	isb	sy
		}
	}
}
    2718:	bd70      	pop	{r4, r5, r6, pc}
			to->dticks -= t->dticks;
    271a:	1a09      	subs	r1, r1, r0
	return (node == list->tail) ? NULL : node->next;
    271c:	4296      	cmp	r6, r2
    271e:	60a1      	str	r1, [r4, #8]
    2720:	d0d9      	beq.n	26d6 <z_add_timeout+0x32>
    2722:	6812      	ldr	r2, [r2, #0]
    2724:	e7d6      	b.n	26d4 <z_add_timeout+0x30>
    2726:	bf00      	nop
    2728:	2000140c 	.word	0x2000140c

0000272c <z_clock_announce>:
		}
	}
}

void z_clock_announce(s32_t ticks)
{
    272c:	e92d 4bf0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, fp, lr}
    2730:	4604      	mov	r4, r0
#ifdef CONFIG_TIMESLICING
	z_time_slice(ticks);
    2732:	f7ff fddd 	bl	22f0 <z_time_slice>
	__asm__ volatile(
    2736:	f04f 0320 	mov.w	r3, #32
    273a:	f3ef 8511 	mrs	r5, BASEPRI
    273e:	f383 8811 	msr	BASEPRI, r3
    2742:	f3bf 8f6f 	isb	sy
    2746:	4f21      	ldr	r7, [pc, #132]	; (27cc <z_clock_announce+0xa0>)
#endif

	k_spinlock_key_t key = k_spin_lock(&timeout_lock);

	announce_remaining = ticks;
    2748:	4e21      	ldr	r6, [pc, #132]	; (27d0 <z_clock_announce+0xa4>)
    274a:	46b8      	mov	r8, r7
	return list->head == list;
    274c:	f8df 9084 	ldr.w	r9, [pc, #132]	; 27d4 <z_clock_announce+0xa8>
    2750:	6034      	str	r4, [r6, #0]
    2752:	f8d9 4000 	ldr.w	r4, [r9]
    2756:	6832      	ldr	r2, [r6, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    2758:	454c      	cmp	r4, r9
    275a:	e9d7 bc00 	ldrd	fp, ip, [r7]
    275e:	d005      	beq.n	276c <z_clock_announce+0x40>

	while (first() != NULL && first()->dticks <= announce_remaining) {
    2760:	b124      	cbz	r4, 276c <z_clock_announce+0x40>
    2762:	68a3      	ldr	r3, [r4, #8]
    2764:	4293      	cmp	r3, r2
    2766:	dd14      	ble.n	2792 <z_clock_announce+0x66>
		t->fn(t);
		key = k_spin_lock(&timeout_lock);
	}

	if (first() != NULL) {
		first()->dticks -= announce_remaining;
    2768:	1a9b      	subs	r3, r3, r2
    276a:	60a3      	str	r3, [r4, #8]
	}

	curr_tick += announce_remaining;
	announce_remaining = 0;
    276c:	2400      	movs	r4, #0
	curr_tick += announce_remaining;
    276e:	eb1b 0002 	adds.w	r0, fp, r2
    2772:	eb4c 71e2 	adc.w	r1, ip, r2, asr #31
    2776:	e9c8 0100 	strd	r0, r1, [r8]
	announce_remaining = 0;
    277a:	6034      	str	r4, [r6, #0]

	z_clock_set_timeout(next_timeout(), false);
    277c:	f7ff ff76 	bl	266c <next_timeout>
    2780:	4621      	mov	r1, r4
    2782:	f7fe f8e7 	bl	954 <z_clock_set_timeout>
	__asm__ volatile(
    2786:	f385 8811 	msr	BASEPRI, r5
    278a:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&timeout_lock, key);
}
    278e:	e8bd 8bf0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, fp, pc}
		curr_tick += dt;
    2792:	eb1b 0003 	adds.w	r0, fp, r3
    2796:	eb4c 71e3 	adc.w	r1, ip, r3, asr #31
		announce_remaining -= dt;
    279a:	1ad3      	subs	r3, r2, r3
    279c:	6033      	str	r3, [r6, #0]
		t->dticks = 0;
    279e:	2300      	movs	r3, #0
		curr_tick += dt;
    27a0:	e9c7 0100 	strd	r0, r1, [r7]
		t->dticks = 0;
    27a4:	60a3      	str	r3, [r4, #8]
		remove_timeout(t);
    27a6:	4620      	mov	r0, r4
    27a8:	f7ff ff4a 	bl	2640 <remove_timeout>
    27ac:	f385 8811 	msr	BASEPRI, r5
    27b0:	f3bf 8f6f 	isb	sy
		t->fn(t);
    27b4:	68e3      	ldr	r3, [r4, #12]
    27b6:	4798      	blx	r3
	__asm__ volatile(
    27b8:	f04f 0320 	mov.w	r3, #32
    27bc:	f3ef 8511 	mrs	r5, BASEPRI
    27c0:	f383 8811 	msr	BASEPRI, r3
    27c4:	f3bf 8f6f 	isb	sy
    27c8:	e7c3      	b.n	2752 <z_clock_announce+0x26>
    27ca:	bf00      	nop
    27cc:	20000000 	.word	0x20000000
    27d0:	2000066c 	.word	0x2000066c
    27d4:	2000140c 	.word	0x2000140c

000027d8 <init_static_pools>:
	z_waitq_init(&p->wait_q);
	z_sys_mem_pool_base_init(&p->base);
}

int init_static_pools(struct device *unused)
{
    27d8:	b538      	push	{r3, r4, r5, lr}
	ARG_UNUSED(unused);

	Z_STRUCT_SECTION_FOREACH(k_mem_pool, p) {
    27da:	4c07      	ldr	r4, [pc, #28]	; (27f8 <init_static_pools+0x20>)
    27dc:	4d07      	ldr	r5, [pc, #28]	; (27fc <init_static_pools+0x24>)
    27de:	42ac      	cmp	r4, r5
    27e0:	d301      	bcc.n	27e6 <init_static_pools+0xe>
		k_mem_pool_init(p);
	}

	return 0;
}
    27e2:	2000      	movs	r0, #0
    27e4:	bd38      	pop	{r3, r4, r5, pc}
    27e6:	f104 0314 	add.w	r3, r4, #20
	z_sys_mem_pool_base_init(&p->base);
    27ea:	4620      	mov	r0, r4
	list->tail = (sys_dnode_t *)list;
    27ec:	e9c4 3305 	strd	r3, r3, [r4, #20]
    27f0:	f000 feee 	bl	35d0 <z_sys_mem_pool_base_init>
	Z_STRUCT_SECTION_FOREACH(k_mem_pool, p) {
    27f4:	341c      	adds	r4, #28
    27f6:	e7f2      	b.n	27de <init_static_pools+0x6>
    27f8:	200014cc 	.word	0x200014cc
    27fc:	200014cc 	.word	0x200014cc

00002800 <CC_PalMemCopyPlat>:
    2800:	f001 ba50 	b.w	3ca4 <memmove>

00002804 <CC_PalMemSetZeroPlat>:
    2804:	460a      	mov	r2, r1
    2806:	2100      	movs	r1, #0
    2808:	f001 ba90 	b.w	3d2c <memset>

0000280c <CC_PalInit>:
    280c:	b510      	push	{r4, lr}
    280e:	4811      	ldr	r0, [pc, #68]	; (2854 <CC_PalInit+0x48>)
    2810:	f000 f848 	bl	28a4 <CC_PalMutexCreate>
    2814:	b100      	cbz	r0, 2818 <CC_PalInit+0xc>
    2816:	bd10      	pop	{r4, pc}
    2818:	480f      	ldr	r0, [pc, #60]	; (2858 <CC_PalInit+0x4c>)
    281a:	f000 f843 	bl	28a4 <CC_PalMutexCreate>
    281e:	2800      	cmp	r0, #0
    2820:	d1f9      	bne.n	2816 <CC_PalInit+0xa>
    2822:	4c0e      	ldr	r4, [pc, #56]	; (285c <CC_PalInit+0x50>)
    2824:	4620      	mov	r0, r4
    2826:	f000 f83d 	bl	28a4 <CC_PalMutexCreate>
    282a:	2800      	cmp	r0, #0
    282c:	d1f3      	bne.n	2816 <CC_PalInit+0xa>
    282e:	4b0c      	ldr	r3, [pc, #48]	; (2860 <CC_PalInit+0x54>)
    2830:	480c      	ldr	r0, [pc, #48]	; (2864 <CC_PalInit+0x58>)
    2832:	601c      	str	r4, [r3, #0]
    2834:	f000 f836 	bl	28a4 <CC_PalMutexCreate>
    2838:	4601      	mov	r1, r0
    283a:	2800      	cmp	r0, #0
    283c:	d1eb      	bne.n	2816 <CC_PalInit+0xa>
    283e:	f000 f82d 	bl	289c <CC_PalDmaInit>
    2842:	4604      	mov	r4, r0
    2844:	b108      	cbz	r0, 284a <CC_PalInit+0x3e>
    2846:	4620      	mov	r0, r4
    2848:	bd10      	pop	{r4, pc}
    284a:	f000 f851 	bl	28f0 <CC_PalPowerSaveModeInit>
    284e:	4620      	mov	r0, r4
    2850:	e7fa      	b.n	2848 <CC_PalInit+0x3c>
    2852:	bf00      	nop
    2854:	20001420 	.word	0x20001420
    2858:	20001414 	.word	0x20001414
    285c:	2000141c 	.word	0x2000141c
    2860:	20001424 	.word	0x20001424
    2864:	20001418 	.word	0x20001418

00002868 <CC_PalTerminate>:
    2868:	b508      	push	{r3, lr}
    286a:	4808      	ldr	r0, [pc, #32]	; (288c <CC_PalTerminate+0x24>)
    286c:	f000 f824 	bl	28b8 <CC_PalMutexDestroy>
    2870:	4807      	ldr	r0, [pc, #28]	; (2890 <CC_PalTerminate+0x28>)
    2872:	f000 f821 	bl	28b8 <CC_PalMutexDestroy>
    2876:	4807      	ldr	r0, [pc, #28]	; (2894 <CC_PalTerminate+0x2c>)
    2878:	f000 f81e 	bl	28b8 <CC_PalMutexDestroy>
    287c:	4806      	ldr	r0, [pc, #24]	; (2898 <CC_PalTerminate+0x30>)
    287e:	f000 f81b 	bl	28b8 <CC_PalMutexDestroy>
    2882:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    2886:	f000 b80b 	b.w	28a0 <CC_PalDmaTerminate>
    288a:	bf00      	nop
    288c:	20001420 	.word	0x20001420
    2890:	20001414 	.word	0x20001414
    2894:	2000141c 	.word	0x2000141c
    2898:	20001418 	.word	0x20001418

0000289c <CC_PalDmaInit>:
    289c:	2000      	movs	r0, #0
    289e:	4770      	bx	lr

000028a0 <CC_PalDmaTerminate>:
    28a0:	4770      	bx	lr
    28a2:	bf00      	nop

000028a4 <CC_PalMutexCreate>:
    28a4:	b508      	push	{r3, lr}
    28a6:	4b03      	ldr	r3, [pc, #12]	; (28b4 <CC_PalMutexCreate+0x10>)
    28a8:	6802      	ldr	r2, [r0, #0]
    28aa:	681b      	ldr	r3, [r3, #0]
    28ac:	6810      	ldr	r0, [r2, #0]
    28ae:	4798      	blx	r3
    28b0:	2000      	movs	r0, #0
    28b2:	bd08      	pop	{r3, pc}
    28b4:	20001430 	.word	0x20001430

000028b8 <CC_PalMutexDestroy>:
    28b8:	b508      	push	{r3, lr}
    28ba:	4b03      	ldr	r3, [pc, #12]	; (28c8 <CC_PalMutexDestroy+0x10>)
    28bc:	6802      	ldr	r2, [r0, #0]
    28be:	685b      	ldr	r3, [r3, #4]
    28c0:	6810      	ldr	r0, [r2, #0]
    28c2:	4798      	blx	r3
    28c4:	2000      	movs	r0, #0
    28c6:	bd08      	pop	{r3, pc}
    28c8:	20001430 	.word	0x20001430

000028cc <CC_PalMutexLock>:
    28cc:	6802      	ldr	r2, [r0, #0]
    28ce:	4b02      	ldr	r3, [pc, #8]	; (28d8 <CC_PalMutexLock+0xc>)
    28d0:	6810      	ldr	r0, [r2, #0]
    28d2:	689b      	ldr	r3, [r3, #8]
    28d4:	4718      	bx	r3
    28d6:	bf00      	nop
    28d8:	20001430 	.word	0x20001430

000028dc <CC_PalMutexUnlock>:
    28dc:	b508      	push	{r3, lr}
    28de:	4b03      	ldr	r3, [pc, #12]	; (28ec <CC_PalMutexUnlock+0x10>)
    28e0:	6802      	ldr	r2, [r0, #0]
    28e2:	68db      	ldr	r3, [r3, #12]
    28e4:	6810      	ldr	r0, [r2, #0]
    28e6:	4798      	blx	r3
    28e8:	2000      	movs	r0, #0
    28ea:	bd08      	pop	{r3, pc}
    28ec:	20001430 	.word	0x20001430

000028f0 <CC_PalPowerSaveModeInit>:
    28f0:	b570      	push	{r4, r5, r6, lr}
    28f2:	4c09      	ldr	r4, [pc, #36]	; (2918 <CC_PalPowerSaveModeInit+0x28>)
    28f4:	4d09      	ldr	r5, [pc, #36]	; (291c <CC_PalPowerSaveModeInit+0x2c>)
    28f6:	6920      	ldr	r0, [r4, #16]
    28f8:	68ab      	ldr	r3, [r5, #8]
    28fa:	4798      	blx	r3
    28fc:	b118      	cbz	r0, 2906 <CC_PalPowerSaveModeInit+0x16>
    28fe:	4b08      	ldr	r3, [pc, #32]	; (2920 <CC_PalPowerSaveModeInit+0x30>)
    2900:	4808      	ldr	r0, [pc, #32]	; (2924 <CC_PalPowerSaveModeInit+0x34>)
    2902:	685b      	ldr	r3, [r3, #4]
    2904:	4798      	blx	r3
    2906:	2100      	movs	r1, #0
    2908:	4a07      	ldr	r2, [pc, #28]	; (2928 <CC_PalPowerSaveModeInit+0x38>)
    290a:	68eb      	ldr	r3, [r5, #12]
    290c:	6011      	str	r1, [r2, #0]
    290e:	6920      	ldr	r0, [r4, #16]
    2910:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    2914:	4718      	bx	r3
    2916:	bf00      	nop
    2918:	20001440 	.word	0x20001440
    291c:	20001430 	.word	0x20001430
    2920:	20001428 	.word	0x20001428
    2924:	000045c4 	.word	0x000045c4
    2928:	20000670 	.word	0x20000670

0000292c <CC_PalPowerSaveModeSelect>:
    292c:	b570      	push	{r4, r5, r6, lr}
    292e:	4c14      	ldr	r4, [pc, #80]	; (2980 <CC_PalPowerSaveModeSelect+0x54>)
    2930:	4d14      	ldr	r5, [pc, #80]	; (2984 <CC_PalPowerSaveModeSelect+0x58>)
    2932:	4606      	mov	r6, r0
    2934:	68ab      	ldr	r3, [r5, #8]
    2936:	6920      	ldr	r0, [r4, #16]
    2938:	4798      	blx	r3
    293a:	b9f0      	cbnz	r0, 297a <CC_PalPowerSaveModeSelect+0x4e>
    293c:	4a12      	ldr	r2, [pc, #72]	; (2988 <CC_PalPowerSaveModeSelect+0x5c>)
    293e:	6813      	ldr	r3, [r2, #0]
    2940:	b95e      	cbnz	r6, 295a <CC_PalPowerSaveModeSelect+0x2e>
    2942:	b91b      	cbnz	r3, 294c <CC_PalPowerSaveModeSelect+0x20>
    2944:	2001      	movs	r0, #1
    2946:	4911      	ldr	r1, [pc, #68]	; (298c <CC_PalPowerSaveModeSelect+0x60>)
    2948:	f8c1 0500 	str.w	r0, [r1, #1280]	; 0x500
    294c:	3301      	adds	r3, #1
    294e:	6013      	str	r3, [r2, #0]
    2950:	68eb      	ldr	r3, [r5, #12]
    2952:	6920      	ldr	r0, [r4, #16]
    2954:	4798      	blx	r3
    2956:	2000      	movs	r0, #0
    2958:	bd70      	pop	{r4, r5, r6, pc}
    295a:	2b00      	cmp	r3, #0
    295c:	d0f8      	beq.n	2950 <CC_PalPowerSaveModeSelect+0x24>
    295e:	2b01      	cmp	r3, #1
    2960:	bf08      	it	eq
    2962:	490a      	ldreq	r1, [pc, #40]	; (298c <CC_PalPowerSaveModeSelect+0x60>)
    2964:	f103 33ff 	add.w	r3, r3, #4294967295
    2968:	bf08      	it	eq
    296a:	f8c1 0500 	streq.w	r0, [r1, #1280]	; 0x500
    296e:	6920      	ldr	r0, [r4, #16]
    2970:	6013      	str	r3, [r2, #0]
    2972:	68eb      	ldr	r3, [r5, #12]
    2974:	4798      	blx	r3
    2976:	2000      	movs	r0, #0
    2978:	e7ee      	b.n	2958 <CC_PalPowerSaveModeSelect+0x2c>
    297a:	4805      	ldr	r0, [pc, #20]	; (2990 <CC_PalPowerSaveModeSelect+0x64>)
    297c:	bd70      	pop	{r4, r5, r6, pc}
    297e:	bf00      	nop
    2980:	20001440 	.word	0x20001440
    2984:	20001430 	.word	0x20001430
    2988:	20000670 	.word	0x20000670
    298c:	50840000 	.word	0x50840000
    2990:	ffff8fe9 	.word	0xffff8fe9

00002994 <CC_HalInit>:
    2994:	2000      	movs	r0, #0
    2996:	4770      	bx	lr

00002998 <CC_HalTerminate>:
    2998:	2000      	movs	r0, #0
    299a:	4770      	bx	lr

0000299c <CC_HalClearInterruptBit>:
    299c:	0543      	lsls	r3, r0, #21
    299e:	d503      	bpl.n	29a8 <CC_HalClearInterruptBit+0xc>
    29a0:	f04f 32ff 	mov.w	r2, #4294967295
    29a4:	4b02      	ldr	r3, [pc, #8]	; (29b0 <CC_HalClearInterruptBit+0x14>)
    29a6:	601a      	str	r2, [r3, #0]
    29a8:	4b02      	ldr	r3, [pc, #8]	; (29b4 <CC_HalClearInterruptBit+0x18>)
    29aa:	6018      	str	r0, [r3, #0]
    29ac:	4770      	bx	lr
    29ae:	bf00      	nop
    29b0:	50841108 	.word	0x50841108
    29b4:	50841a08 	.word	0x50841a08

000029b8 <CC_HalMaskInterrupt>:
    29b8:	4b01      	ldr	r3, [pc, #4]	; (29c0 <CC_HalMaskInterrupt+0x8>)
    29ba:	6018      	str	r0, [r3, #0]
    29bc:	4770      	bx	lr
    29be:	bf00      	nop
    29c0:	50841a04 	.word	0x50841a04

000029c4 <CC_HalWaitInterruptRND>:
    29c4:	b108      	cbz	r0, 29ca <CC_HalWaitInterruptRND+0x6>
    29c6:	f000 b803 	b.w	29d0 <CC_PalWaitInterruptRND>
    29ca:	f44f 0075 	mov.w	r0, #16056320	; 0xf50000
    29ce:	4770      	bx	lr

000029d0 <CC_PalWaitInterruptRND>:
    29d0:	4602      	mov	r2, r0
    29d2:	4807      	ldr	r0, [pc, #28]	; (29f0 <CC_PalWaitInterruptRND+0x20>)
    29d4:	6803      	ldr	r3, [r0, #0]
    29d6:	4213      	tst	r3, r2
    29d8:	d0fc      	beq.n	29d4 <CC_PalWaitInterruptRND+0x4>
    29da:	b121      	cbz	r1, 29e6 <CC_PalWaitInterruptRND+0x16>
    29dc:	4b05      	ldr	r3, [pc, #20]	; (29f4 <CC_PalWaitInterruptRND+0x24>)
    29de:	4806      	ldr	r0, [pc, #24]	; (29f8 <CC_PalWaitInterruptRND+0x28>)
    29e0:	681b      	ldr	r3, [r3, #0]
    29e2:	600b      	str	r3, [r1, #0]
    29e4:	6003      	str	r3, [r0, #0]
    29e6:	4b05      	ldr	r3, [pc, #20]	; (29fc <CC_PalWaitInterruptRND+0x2c>)
    29e8:	2000      	movs	r0, #0
    29ea:	601a      	str	r2, [r3, #0]
    29ec:	4770      	bx	lr
    29ee:	bf00      	nop
    29f0:	50841a00 	.word	0x50841a00
    29f4:	50841104 	.word	0x50841104
    29f8:	50841108 	.word	0x50841108
    29fc:	50841a08 	.word	0x50841a08

00002a00 <mbedtls_platform_setup>:
    2a00:	f000 b8a0 	b.w	2b44 <nrf_cc310_platform_init>

00002a04 <mbedtls_platform_zeroize>:
    2a04:	b130      	cbz	r0, 2a14 <mbedtls_platform_zeroize+0x10>
    2a06:	b129      	cbz	r1, 2a14 <mbedtls_platform_zeroize+0x10>
    2a08:	2300      	movs	r3, #0
    2a0a:	4401      	add	r1, r0
    2a0c:	7003      	strb	r3, [r0, #0]
    2a0e:	3001      	adds	r0, #1
    2a10:	4281      	cmp	r1, r0
    2a12:	d1fb      	bne.n	2a0c <mbedtls_platform_zeroize+0x8>
    2a14:	4770      	bx	lr
    2a16:	bf00      	nop

00002a18 <mbedtls_hardware_poll>:
    2a18:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    2a1c:	f5ad 7d1a 	sub.w	sp, sp, #616	; 0x268
    2a20:	460f      	mov	r7, r1
    2a22:	9205      	str	r2, [sp, #20]
    2a24:	2100      	movs	r1, #0
    2a26:	4614      	mov	r4, r2
    2a28:	a812      	add	r0, sp, #72	; 0x48
    2a2a:	f44f 7208 	mov.w	r2, #544	; 0x220
    2a2e:	461e      	mov	r6, r3
    2a30:	f001 f97c 	bl	3d2c <memset>
    2a34:	2300      	movs	r3, #0
    2a36:	a808      	add	r0, sp, #32
    2a38:	4619      	mov	r1, r3
    2a3a:	2228      	movs	r2, #40	; 0x28
    2a3c:	9306      	str	r3, [sp, #24]
    2a3e:	f001 f975 	bl	3d2c <memset>
    2a42:	2f00      	cmp	r7, #0
    2a44:	d03c      	beq.n	2ac0 <mbedtls_hardware_poll+0xa8>
    2a46:	2e00      	cmp	r6, #0
    2a48:	d03a      	beq.n	2ac0 <mbedtls_hardware_poll+0xa8>
    2a4a:	2c00      	cmp	r4, #0
    2a4c:	d038      	beq.n	2ac0 <mbedtls_hardware_poll+0xa8>
    2a4e:	2104      	movs	r1, #4
    2a50:	a806      	add	r0, sp, #24
    2a52:	f7ff fed7 	bl	2804 <CC_PalMemSetZeroPlat>
    2a56:	a808      	add	r0, sp, #32
    2a58:	2128      	movs	r1, #40	; 0x28
    2a5a:	f7ff fed3 	bl	2804 <CC_PalMemSetZeroPlat>
    2a5e:	a808      	add	r0, sp, #32
    2a60:	f000 f832 	bl	2ac8 <RNG_PLAT_SetUserRngParameters>
    2a64:	b178      	cbz	r0, 2a86 <mbedtls_hardware_poll+0x6e>
    2a66:	f04f 35ff 	mov.w	r5, #4294967295
    2a6a:	a812      	add	r0, sp, #72	; 0x48
    2a6c:	f44f 7108 	mov.w	r1, #544	; 0x220
    2a70:	f7ff ffc8 	bl	2a04 <mbedtls_platform_zeroize>
    2a74:	a806      	add	r0, sp, #24
    2a76:	2104      	movs	r1, #4
    2a78:	f7ff ffc4 	bl	2a04 <mbedtls_platform_zeroize>
    2a7c:	4628      	mov	r0, r5
    2a7e:	f50d 7d1a 	add.w	sp, sp, #616	; 0x268
    2a82:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    2a86:	ab12      	add	r3, sp, #72	; 0x48
    2a88:	f10d 081c 	add.w	r8, sp, #28
    2a8c:	9003      	str	r0, [sp, #12]
    2a8e:	e9cd 6301 	strd	r6, r3, [sp, #4]
    2a92:	4602      	mov	r2, r0
    2a94:	ab05      	add	r3, sp, #20
    2a96:	a908      	add	r1, sp, #32
    2a98:	f8cd 8000 	str.w	r8, [sp]
    2a9c:	a806      	add	r0, sp, #24
    2a9e:	f000 fce9 	bl	3474 <LLF_RND_GetTrngSource>
    2aa2:	2800      	cmp	r0, #0
    2aa4:	d1df      	bne.n	2a66 <mbedtls_hardware_poll+0x4e>
    2aa6:	6833      	ldr	r3, [r6, #0]
    2aa8:	42a3      	cmp	r3, r4
    2aaa:	d3dc      	bcc.n	2a66 <mbedtls_hardware_poll+0x4e>
    2aac:	f8d8 1000 	ldr.w	r1, [r8]
    2ab0:	4605      	mov	r5, r0
    2ab2:	3108      	adds	r1, #8
    2ab4:	4638      	mov	r0, r7
    2ab6:	4622      	mov	r2, r4
    2ab8:	f7ff fea2 	bl	2800 <CC_PalMemCopyPlat>
    2abc:	6034      	str	r4, [r6, #0]
    2abe:	e7d4      	b.n	2a6a <mbedtls_hardware_poll+0x52>
    2ac0:	f04f 35ff 	mov.w	r5, #4294967295
    2ac4:	e7da      	b.n	2a7c <mbedtls_hardware_poll+0x64>
    2ac6:	bf00      	nop

00002ac8 <RNG_PLAT_SetUserRngParameters>:
    2ac8:	231c      	movs	r3, #28
    2aca:	b530      	push	{r4, r5, lr}
    2acc:	b083      	sub	sp, #12
    2ace:	a902      	add	r1, sp, #8
    2ad0:	f841 3d04 	str.w	r3, [r1, #-4]!
    2ad4:	4604      	mov	r4, r0
    2ad6:	f000 f9b1 	bl	2e3c <CC_PalTrngParamGet>
    2ada:	4605      	mov	r5, r0
    2adc:	b9d8      	cbnz	r0, 2b16 <RNG_PLAT_SetUserRngParameters+0x4e>
    2ade:	9b01      	ldr	r3, [sp, #4]
    2ae0:	2b1c      	cmp	r3, #28
    2ae2:	d11b      	bne.n	2b1c <RNG_PLAT_SetUserRngParameters+0x54>
    2ae4:	e9d4 3200 	ldrd	r3, r2, [r4]
    2ae8:	2101      	movs	r1, #1
    2aea:	3300      	adds	r3, #0
    2aec:	61e1      	str	r1, [r4, #28]
    2aee:	bf18      	it	ne
    2af0:	2301      	movne	r3, #1
    2af2:	b10a      	cbz	r2, 2af8 <RNG_PLAT_SetUserRngParameters+0x30>
    2af4:	f043 0302 	orr.w	r3, r3, #2
    2af8:	68a2      	ldr	r2, [r4, #8]
    2afa:	b932      	cbnz	r2, 2b0a <RNG_PLAT_SetUserRngParameters+0x42>
    2afc:	68e2      	ldr	r2, [r4, #12]
    2afe:	b9aa      	cbnz	r2, 2b2c <RNG_PLAT_SetUserRngParameters+0x64>
    2b00:	e9c4 3208 	strd	r3, r2, [r4, #32]
    2b04:	b93b      	cbnz	r3, 2b16 <RNG_PLAT_SetUserRngParameters+0x4e>
    2b06:	4d0d      	ldr	r5, [pc, #52]	; (2b3c <RNG_PLAT_SetUserRngParameters+0x74>)
    2b08:	e009      	b.n	2b1e <RNG_PLAT_SetUserRngParameters+0x56>
    2b0a:	68e2      	ldr	r2, [r4, #12]
    2b0c:	f043 0304 	orr.w	r3, r3, #4
    2b10:	b962      	cbnz	r2, 2b2c <RNG_PLAT_SetUserRngParameters+0x64>
    2b12:	e9c4 3208 	strd	r3, r2, [r4, #32]
    2b16:	4628      	mov	r0, r5
    2b18:	b003      	add	sp, #12
    2b1a:	bd30      	pop	{r4, r5, pc}
    2b1c:	4d08      	ldr	r5, [pc, #32]	; (2b40 <RNG_PLAT_SetUserRngParameters+0x78>)
    2b1e:	4620      	mov	r0, r4
    2b20:	211c      	movs	r1, #28
    2b22:	f7ff fe6f 	bl	2804 <CC_PalMemSetZeroPlat>
    2b26:	4628      	mov	r0, r5
    2b28:	b003      	add	sp, #12
    2b2a:	bd30      	pop	{r4, r5, pc}
    2b2c:	2200      	movs	r2, #0
    2b2e:	4628      	mov	r0, r5
    2b30:	f043 0308 	orr.w	r3, r3, #8
    2b34:	e9c4 3208 	strd	r3, r2, [r4, #32]
    2b38:	b003      	add	sp, #12
    2b3a:	bd30      	pop	{r4, r5, pc}
    2b3c:	00f00c0e 	.word	0x00f00c0e
    2b40:	00f00c37 	.word	0x00f00c37

00002b44 <nrf_cc310_platform_init>:
    2b44:	b510      	push	{r4, lr}
    2b46:	4c0c      	ldr	r4, [pc, #48]	; (2b78 <nrf_cc310_platform_init+0x34>)
    2b48:	6823      	ldr	r3, [r4, #0]
    2b4a:	b113      	cbz	r3, 2b52 <nrf_cc310_platform_init+0xe>
    2b4c:	4b0b      	ldr	r3, [pc, #44]	; (2b7c <nrf_cc310_platform_init+0x38>)
    2b4e:	681b      	ldr	r3, [r3, #0]
    2b50:	b96b      	cbnz	r3, 2b6e <nrf_cc310_platform_init+0x2a>
    2b52:	f000 f931 	bl	2db8 <CC_LibInit>
    2b56:	b138      	cbz	r0, 2b68 <nrf_cc310_platform_init+0x24>
    2b58:	3801      	subs	r0, #1
    2b5a:	2806      	cmp	r0, #6
    2b5c:	bf96      	itet	ls
    2b5e:	4b08      	ldrls	r3, [pc, #32]	; (2b80 <nrf_cc310_platform_init+0x3c>)
    2b60:	4808      	ldrhi	r0, [pc, #32]	; (2b84 <nrf_cc310_platform_init+0x40>)
    2b62:	f853 0020 	ldrls.w	r0, [r3, r0, lsl #2]
    2b66:	bd10      	pop	{r4, pc}
    2b68:	2201      	movs	r2, #1
    2b6a:	4b04      	ldr	r3, [pc, #16]	; (2b7c <nrf_cc310_platform_init+0x38>)
    2b6c:	601a      	str	r2, [r3, #0]
    2b6e:	2301      	movs	r3, #1
    2b70:	2000      	movs	r0, #0
    2b72:	6023      	str	r3, [r4, #0]
    2b74:	bd10      	pop	{r4, pc}
    2b76:	bf00      	nop
    2b78:	20000674 	.word	0x20000674
    2b7c:	20000678 	.word	0x20000678
    2b80:	000045e4 	.word	0x000045e4
    2b84:	ffff8ffe 	.word	0xffff8ffe

00002b88 <nrf_cc310_platform_init_no_rng>:
    2b88:	b510      	push	{r4, lr}
    2b8a:	4c09      	ldr	r4, [pc, #36]	; (2bb0 <nrf_cc310_platform_init_no_rng+0x28>)
    2b8c:	6823      	ldr	r3, [r4, #0]
    2b8e:	b11b      	cbz	r3, 2b98 <nrf_cc310_platform_init_no_rng+0x10>
    2b90:	2301      	movs	r3, #1
    2b92:	2000      	movs	r0, #0
    2b94:	6023      	str	r3, [r4, #0]
    2b96:	bd10      	pop	{r4, pc}
    2b98:	f000 f87c 	bl	2c94 <CC_LibInitNoRng>
    2b9c:	2800      	cmp	r0, #0
    2b9e:	d0f7      	beq.n	2b90 <nrf_cc310_platform_init_no_rng+0x8>
    2ba0:	3801      	subs	r0, #1
    2ba2:	2806      	cmp	r0, #6
    2ba4:	bf96      	itet	ls
    2ba6:	4b03      	ldrls	r3, [pc, #12]	; (2bb4 <nrf_cc310_platform_init_no_rng+0x2c>)
    2ba8:	4803      	ldrhi	r0, [pc, #12]	; (2bb8 <nrf_cc310_platform_init_no_rng+0x30>)
    2baa:	f853 0020 	ldrls.w	r0, [r3, r0, lsl #2]
    2bae:	bd10      	pop	{r4, pc}
    2bb0:	20000674 	.word	0x20000674
    2bb4:	000045e4 	.word	0x000045e4
    2bb8:	ffff8ffe 	.word	0xffff8ffe

00002bbc <nrf_cc310_platform_abort>:
    2bbc:	f3bf 8f4f 	dsb	sy
    2bc0:	4905      	ldr	r1, [pc, #20]	; (2bd8 <nrf_cc310_platform_abort+0x1c>)
    2bc2:	4b06      	ldr	r3, [pc, #24]	; (2bdc <nrf_cc310_platform_abort+0x20>)
    2bc4:	68ca      	ldr	r2, [r1, #12]
    2bc6:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
    2bca:	4313      	orrs	r3, r2
    2bcc:	60cb      	str	r3, [r1, #12]
    2bce:	f3bf 8f4f 	dsb	sy
    2bd2:	bf00      	nop
    2bd4:	e7fd      	b.n	2bd2 <nrf_cc310_platform_abort+0x16>
    2bd6:	bf00      	nop
    2bd8:	e000ed00 	.word	0xe000ed00
    2bdc:	05fa0004 	.word	0x05fa0004

00002be0 <CC_PalAbort>:
    2be0:	4b01      	ldr	r3, [pc, #4]	; (2be8 <CC_PalAbort+0x8>)
    2be2:	685b      	ldr	r3, [r3, #4]
    2be4:	4718      	bx	r3
    2be6:	bf00      	nop
    2be8:	20001428 	.word	0x20001428

00002bec <nrf_cc310_platform_set_abort>:
    2bec:	4b02      	ldr	r3, [pc, #8]	; (2bf8 <nrf_cc310_platform_set_abort+0xc>)
    2bee:	e9d0 1200 	ldrd	r1, r2, [r0]
    2bf2:	e9c3 1200 	strd	r1, r2, [r3]
    2bf6:	4770      	bx	lr
    2bf8:	20001428 	.word	0x20001428

00002bfc <mutex_free>:
    2bfc:	4770      	bx	lr
    2bfe:	bf00      	nop

00002c00 <mutex_unlock>:
    2c00:	b510      	push	{r4, lr}
    2c02:	4604      	mov	r4, r0
    2c04:	b120      	cbz	r0, 2c10 <mutex_unlock+0x10>
    2c06:	f3bf 8f5f 	dmb	sy
    2c0a:	2000      	movs	r0, #0
    2c0c:	6020      	str	r0, [r4, #0]
    2c0e:	bd10      	pop	{r4, pc}
    2c10:	4803      	ldr	r0, [pc, #12]	; (2c20 <mutex_unlock+0x20>)
    2c12:	f7ff ffe5 	bl	2be0 <CC_PalAbort>
    2c16:	f3bf 8f5f 	dmb	sy
    2c1a:	2000      	movs	r0, #0
    2c1c:	6020      	str	r0, [r4, #0]
    2c1e:	bd10      	pop	{r4, pc}
    2c20:	00004624 	.word	0x00004624

00002c24 <mutex_init>:
    2c24:	b510      	push	{r4, lr}
    2c26:	4604      	mov	r4, r0
    2c28:	b110      	cbz	r0, 2c30 <mutex_init+0xc>
    2c2a:	2300      	movs	r3, #0
    2c2c:	6023      	str	r3, [r4, #0]
    2c2e:	bd10      	pop	{r4, pc}
    2c30:	4802      	ldr	r0, [pc, #8]	; (2c3c <mutex_init+0x18>)
    2c32:	f7ff ffd5 	bl	2be0 <CC_PalAbort>
    2c36:	2300      	movs	r3, #0
    2c38:	6023      	str	r3, [r4, #0]
    2c3a:	bd10      	pop	{r4, pc}
    2c3c:	00004600 	.word	0x00004600

00002c40 <mutex_lock>:
    2c40:	b150      	cbz	r0, 2c58 <mutex_lock+0x18>
    2c42:	2201      	movs	r2, #1
    2c44:	e8d0 3fef 	ldaex	r3, [r0]
    2c48:	e8c0 2fe1 	stlex	r1, r2, [r0]
    2c4c:	2900      	cmp	r1, #0
    2c4e:	d1f9      	bne.n	2c44 <mutex_lock+0x4>
    2c50:	2b01      	cmp	r3, #1
    2c52:	d0f7      	beq.n	2c44 <mutex_lock+0x4>
    2c54:	f3bf 8f5f 	dmb	sy
    2c58:	2000      	movs	r0, #0
    2c5a:	4770      	bx	lr

00002c5c <nrf_cc310_platform_set_mutexes>:
    2c5c:	b470      	push	{r4, r5, r6}
    2c5e:	4b0b      	ldr	r3, [pc, #44]	; (2c8c <nrf_cc310_platform_set_mutexes+0x30>)
    2c60:	6806      	ldr	r6, [r0, #0]
    2c62:	68c2      	ldr	r2, [r0, #12]
    2c64:	e9d0 5401 	ldrd	r5, r4, [r0, #4]
    2c68:	e9c3 4202 	strd	r4, r2, [r3, #8]
    2c6c:	e9c3 6500 	strd	r6, r5, [r3]
    2c70:	e9d1 0203 	ldrd	r0, r2, [r1, #12]
    2c74:	680e      	ldr	r6, [r1, #0]
    2c76:	4b06      	ldr	r3, [pc, #24]	; (2c90 <nrf_cc310_platform_set_mutexes+0x34>)
    2c78:	e9d1 5401 	ldrd	r5, r4, [r1, #4]
    2c7c:	e9c3 6500 	strd	r6, r5, [r3]
    2c80:	e9c3 4002 	strd	r4, r0, [r3, #8]
    2c84:	611a      	str	r2, [r3, #16]
    2c86:	bc70      	pop	{r4, r5, r6}
    2c88:	4770      	bx	lr
    2c8a:	bf00      	nop
    2c8c:	20001430 	.word	0x20001430
    2c90:	20001440 	.word	0x20001440

00002c94 <CC_LibInitNoRng>:
    2c94:	b510      	push	{r4, lr}
    2c96:	f7ff fe7d 	bl	2994 <CC_HalInit>
    2c9a:	b970      	cbnz	r0, 2cba <CC_LibInitNoRng+0x26>
    2c9c:	f7ff fdb6 	bl	280c <CC_PalInit>
    2ca0:	b980      	cbnz	r0, 2cc4 <CC_LibInitNoRng+0x30>
    2ca2:	f7ff fe43 	bl	292c <CC_PalPowerSaveModeSelect>
    2ca6:	b980      	cbnz	r0, 2cca <CC_LibInitNoRng+0x36>
    2ca8:	4b11      	ldr	r3, [pc, #68]	; (2cf0 <CC_LibInitNoRng+0x5c>)
    2caa:	681b      	ldr	r3, [r3, #0]
    2cac:	0e1b      	lsrs	r3, r3, #24
    2cae:	2bf0      	cmp	r3, #240	; 0xf0
    2cb0:	d00d      	beq.n	2cce <CC_LibInitNoRng+0x3a>
    2cb2:	2406      	movs	r4, #6
    2cb4:	f7ff fe70 	bl	2998 <CC_HalTerminate>
    2cb8:	e000      	b.n	2cbc <CC_LibInitNoRng+0x28>
    2cba:	2403      	movs	r4, #3
    2cbc:	f7ff fdd4 	bl	2868 <CC_PalTerminate>
    2cc0:	4620      	mov	r0, r4
    2cc2:	bd10      	pop	{r4, pc}
    2cc4:	2404      	movs	r4, #4
    2cc6:	4620      	mov	r0, r4
    2cc8:	bd10      	pop	{r4, pc}
    2cca:	2400      	movs	r4, #0
    2ccc:	e7f2      	b.n	2cb4 <CC_LibInitNoRng+0x20>
    2cce:	4a09      	ldr	r2, [pc, #36]	; (2cf4 <CC_LibInitNoRng+0x60>)
    2cd0:	4b09      	ldr	r3, [pc, #36]	; (2cf8 <CC_LibInitNoRng+0x64>)
    2cd2:	6812      	ldr	r2, [r2, #0]
    2cd4:	429a      	cmp	r2, r3
    2cd6:	d001      	beq.n	2cdc <CC_LibInitNoRng+0x48>
    2cd8:	2407      	movs	r4, #7
    2cda:	e7eb      	b.n	2cb4 <CC_LibInitNoRng+0x20>
    2cdc:	2001      	movs	r0, #1
    2cde:	f7ff fe25 	bl	292c <CC_PalPowerSaveModeSelect>
    2ce2:	2800      	cmp	r0, #0
    2ce4:	d1f1      	bne.n	2cca <CC_LibInitNoRng+0x36>
    2ce6:	4b05      	ldr	r3, [pc, #20]	; (2cfc <CC_LibInitNoRng+0x68>)
    2ce8:	4604      	mov	r4, r0
    2cea:	6018      	str	r0, [r3, #0]
    2cec:	e7e8      	b.n	2cc0 <CC_LibInitNoRng+0x2c>
    2cee:	bf00      	nop
    2cf0:	50841928 	.word	0x50841928
    2cf4:	50841a24 	.word	0x50841a24
    2cf8:	20e00000 	.word	0x20e00000
    2cfc:	50841a0c 	.word	0x50841a0c

00002d00 <CC_LibInitRngModule>:
    2d00:	b530      	push	{r4, r5, lr}
    2d02:	f5ad 7d15 	sub.w	sp, sp, #596	; 0x254
    2d06:	f44f 7208 	mov.w	r2, #544	; 0x220
    2d0a:	2100      	movs	r1, #0
    2d0c:	a80c      	add	r0, sp, #48	; 0x30
    2d0e:	f001 f80d 	bl	3d2c <memset>
    2d12:	2300      	movs	r3, #0
    2d14:	a802      	add	r0, sp, #8
    2d16:	4619      	mov	r1, r3
    2d18:	2228      	movs	r2, #40	; 0x28
    2d1a:	9301      	str	r3, [sp, #4]
    2d1c:	f001 f806 	bl	3d2c <memset>
    2d20:	a802      	add	r0, sp, #8
    2d22:	f7ff fed1 	bl	2ac8 <RNG_PLAT_SetUserRngParameters>
    2d26:	b118      	cbz	r0, 2d30 <CC_LibInitRngModule+0x30>
    2d28:	2005      	movs	r0, #5
    2d2a:	f50d 7d15 	add.w	sp, sp, #596	; 0x254
    2d2e:	bd30      	pop	{r4, r5, pc}
    2d30:	4d1c      	ldr	r5, [pc, #112]	; (2da4 <CC_LibInitRngModule+0xa4>)
    2d32:	f04f 31ff 	mov.w	r1, #4294967295
    2d36:	6828      	ldr	r0, [r5, #0]
    2d38:	f7ff fdc8 	bl	28cc <CC_PalMutexLock>
    2d3c:	4604      	mov	r4, r0
    2d3e:	b9f0      	cbnz	r0, 2d7e <CC_LibInitRngModule+0x7e>
    2d40:	2000      	movs	r0, #0
    2d42:	f7ff fdf3 	bl	292c <CC_PalPowerSaveModeSelect>
    2d46:	b9b0      	cbnz	r0, 2d76 <CC_LibInitRngModule+0x76>
    2d48:	aa0c      	add	r2, sp, #48	; 0x30
    2d4a:	a902      	add	r1, sp, #8
    2d4c:	a801      	add	r0, sp, #4
    2d4e:	f000 fbd5 	bl	34fc <LLF_RND_RunTrngStartupTest>
    2d52:	4604      	mov	r4, r0
    2d54:	2001      	movs	r0, #1
    2d56:	f7ff fde9 	bl	292c <CC_PalPowerSaveModeSelect>
    2d5a:	b9f0      	cbnz	r0, 2d9a <CC_LibInitRngModule+0x9a>
    2d5c:	6828      	ldr	r0, [r5, #0]
    2d5e:	f7ff fdbd 	bl	28dc <CC_PalMutexUnlock>
    2d62:	b110      	cbz	r0, 2d6a <CC_LibInitRngModule+0x6a>
    2d64:	4810      	ldr	r0, [pc, #64]	; (2da8 <CC_LibInitRngModule+0xa8>)
    2d66:	f7ff ff3b 	bl	2be0 <CC_PalAbort>
    2d6a:	4620      	mov	r0, r4
    2d6c:	2c00      	cmp	r4, #0
    2d6e:	d1db      	bne.n	2d28 <CC_LibInitRngModule+0x28>
    2d70:	f50d 7d15 	add.w	sp, sp, #596	; 0x254
    2d74:	bd30      	pop	{r4, r5, pc}
    2d76:	480d      	ldr	r0, [pc, #52]	; (2dac <CC_LibInitRngModule+0xac>)
    2d78:	f7ff ff32 	bl	2be0 <CC_PalAbort>
    2d7c:	e7e4      	b.n	2d48 <CC_LibInitRngModule+0x48>
    2d7e:	480c      	ldr	r0, [pc, #48]	; (2db0 <CC_LibInitRngModule+0xb0>)
    2d80:	f7ff ff2e 	bl	2be0 <CC_PalAbort>
    2d84:	2c01      	cmp	r4, #1
    2d86:	d1db      	bne.n	2d40 <CC_LibInitRngModule+0x40>
    2d88:	6828      	ldr	r0, [r5, #0]
    2d8a:	f7ff fda7 	bl	28dc <CC_PalMutexUnlock>
    2d8e:	2800      	cmp	r0, #0
    2d90:	d0ca      	beq.n	2d28 <CC_LibInitRngModule+0x28>
    2d92:	4805      	ldr	r0, [pc, #20]	; (2da8 <CC_LibInitRngModule+0xa8>)
    2d94:	f7ff ff24 	bl	2be0 <CC_PalAbort>
    2d98:	e7c6      	b.n	2d28 <CC_LibInitRngModule+0x28>
    2d9a:	4806      	ldr	r0, [pc, #24]	; (2db4 <CC_LibInitRngModule+0xb4>)
    2d9c:	f7ff ff20 	bl	2be0 <CC_PalAbort>
    2da0:	e7dc      	b.n	2d5c <CC_LibInitRngModule+0x5c>
    2da2:	bf00      	nop
    2da4:	20001424 	.word	0x20001424
    2da8:	0000465c 	.word	0x0000465c
    2dac:	00004674 	.word	0x00004674
    2db0:	00004644 	.word	0x00004644
    2db4:	00004694 	.word	0x00004694

00002db8 <CC_LibInit>:
    2db8:	b508      	push	{r3, lr}
    2dba:	f7ff fdeb 	bl	2994 <CC_HalInit>
    2dbe:	b118      	cbz	r0, 2dc8 <CC_LibInit+0x10>
    2dc0:	f7ff fd52 	bl	2868 <CC_PalTerminate>
    2dc4:	2003      	movs	r0, #3
    2dc6:	bd08      	pop	{r3, pc}
    2dc8:	f7ff fd20 	bl	280c <CC_PalInit>
    2dcc:	b968      	cbnz	r0, 2dea <CC_LibInit+0x32>
    2dce:	f7ff fdad 	bl	292c <CC_PalPowerSaveModeSelect>
    2dd2:	b960      	cbnz	r0, 2dee <CC_LibInit+0x36>
    2dd4:	4b15      	ldr	r3, [pc, #84]	; (2e2c <CC_LibInit+0x74>)
    2dd6:	681b      	ldr	r3, [r3, #0]
    2dd8:	0e1b      	lsrs	r3, r3, #24
    2dda:	2bf0      	cmp	r3, #240	; 0xf0
    2ddc:	d012      	beq.n	2e04 <CC_LibInit+0x4c>
    2dde:	f7ff fddb 	bl	2998 <CC_HalTerminate>
    2de2:	f7ff fd41 	bl	2868 <CC_PalTerminate>
    2de6:	2006      	movs	r0, #6
    2de8:	bd08      	pop	{r3, pc}
    2dea:	2004      	movs	r0, #4
    2dec:	bd08      	pop	{r3, pc}
    2dee:	f7ff fdd3 	bl	2998 <CC_HalTerminate>
    2df2:	f7ff fd39 	bl	2868 <CC_PalTerminate>
    2df6:	f7ff ff83 	bl	2d00 <CC_LibInitRngModule>
    2dfa:	2800      	cmp	r0, #0
    2dfc:	bf0c      	ite	eq
    2dfe:	2000      	moveq	r0, #0
    2e00:	2005      	movne	r0, #5
    2e02:	bd08      	pop	{r3, pc}
    2e04:	4a0a      	ldr	r2, [pc, #40]	; (2e30 <CC_LibInit+0x78>)
    2e06:	4b0b      	ldr	r3, [pc, #44]	; (2e34 <CC_LibInit+0x7c>)
    2e08:	6812      	ldr	r2, [r2, #0]
    2e0a:	429a      	cmp	r2, r3
    2e0c:	d005      	beq.n	2e1a <CC_LibInit+0x62>
    2e0e:	f7ff fdc3 	bl	2998 <CC_HalTerminate>
    2e12:	f7ff fd29 	bl	2868 <CC_PalTerminate>
    2e16:	2007      	movs	r0, #7
    2e18:	bd08      	pop	{r3, pc}
    2e1a:	2001      	movs	r0, #1
    2e1c:	f7ff fd86 	bl	292c <CC_PalPowerSaveModeSelect>
    2e20:	2800      	cmp	r0, #0
    2e22:	d1e4      	bne.n	2dee <CC_LibInit+0x36>
    2e24:	4b04      	ldr	r3, [pc, #16]	; (2e38 <CC_LibInit+0x80>)
    2e26:	6018      	str	r0, [r3, #0]
    2e28:	e7e5      	b.n	2df6 <CC_LibInit+0x3e>
    2e2a:	bf00      	nop
    2e2c:	50841928 	.word	0x50841928
    2e30:	50841a24 	.word	0x50841a24
    2e34:	20e00000 	.word	0x20e00000
    2e38:	50841a0c 	.word	0x50841a0c

00002e3c <CC_PalTrngParamGet>:
    2e3c:	b118      	cbz	r0, 2e46 <CC_PalTrngParamGet+0xa>
    2e3e:	b111      	cbz	r1, 2e46 <CC_PalTrngParamGet+0xa>
    2e40:	680b      	ldr	r3, [r1, #0]
    2e42:	2b1c      	cmp	r3, #28
    2e44:	d001      	beq.n	2e4a <CC_PalTrngParamGet+0xe>
    2e46:	2001      	movs	r0, #1
    2e48:	4770      	bx	lr
    2e4a:	f44f 037f 	mov.w	r3, #16711680	; 0xff0000
    2e4e:	4a3a      	ldr	r2, [pc, #232]	; (2f38 <CC_PalTrngParamGet+0xfc>)
    2e50:	f8d3 1c10 	ldr.w	r1, [r3, #3088]	; 0xc10
    2e54:	4291      	cmp	r1, r2
    2e56:	d05a      	beq.n	2f0e <CC_PalTrngParamGet+0xd2>
    2e58:	f8d3 2c10 	ldr.w	r2, [r3, #3088]	; 0xc10
    2e5c:	3201      	adds	r2, #1
    2e5e:	d056      	beq.n	2f0e <CC_PalTrngParamGet+0xd2>
    2e60:	f8d3 2c10 	ldr.w	r2, [r3, #3088]	; 0xc10
    2e64:	f44f 037f 	mov.w	r3, #16711680	; 0xff0000
    2e68:	6002      	str	r2, [r0, #0]
    2e6a:	f8d3 1c14 	ldr.w	r1, [r3, #3092]	; 0xc14
    2e6e:	4a33      	ldr	r2, [pc, #204]	; (2f3c <CC_PalTrngParamGet+0x100>)
    2e70:	4291      	cmp	r1, r2
    2e72:	d05e      	beq.n	2f32 <CC_PalTrngParamGet+0xf6>
    2e74:	f8d3 2c14 	ldr.w	r2, [r3, #3092]	; 0xc14
    2e78:	3201      	adds	r2, #1
    2e7a:	d05a      	beq.n	2f32 <CC_PalTrngParamGet+0xf6>
    2e7c:	f8d3 2c14 	ldr.w	r2, [r3, #3092]	; 0xc14
    2e80:	f44f 037f 	mov.w	r3, #16711680	; 0xff0000
    2e84:	6042      	str	r2, [r0, #4]
    2e86:	f8d3 2c18 	ldr.w	r2, [r3, #3096]	; 0xc18
    2e8a:	f512 7f94 	cmn.w	r2, #296	; 0x128
    2e8e:	d04d      	beq.n	2f2c <CC_PalTrngParamGet+0xf0>
    2e90:	f8d3 2c18 	ldr.w	r2, [r3, #3096]	; 0xc18
    2e94:	3201      	adds	r2, #1
    2e96:	d049      	beq.n	2f2c <CC_PalTrngParamGet+0xf0>
    2e98:	f8d3 2c18 	ldr.w	r2, [r3, #3096]	; 0xc18
    2e9c:	f44f 037f 	mov.w	r3, #16711680	; 0xff0000
    2ea0:	6082      	str	r2, [r0, #8]
    2ea2:	f8d3 1c1c 	ldr.w	r1, [r3, #3100]	; 0xc1c
    2ea6:	4a26      	ldr	r2, [pc, #152]	; (2f40 <CC_PalTrngParamGet+0x104>)
    2ea8:	4291      	cmp	r1, r2
    2eaa:	d03c      	beq.n	2f26 <CC_PalTrngParamGet+0xea>
    2eac:	f8d3 2c1c 	ldr.w	r2, [r3, #3100]	; 0xc1c
    2eb0:	3201      	adds	r2, #1
    2eb2:	d038      	beq.n	2f26 <CC_PalTrngParamGet+0xea>
    2eb4:	f8d3 2c1c 	ldr.w	r2, [r3, #3100]	; 0xc1c
    2eb8:	f44f 037f 	mov.w	r3, #16711680	; 0xff0000
    2ebc:	60c2      	str	r2, [r0, #12]
    2ebe:	f8d3 2c00 	ldr.w	r2, [r3, #3072]	; 0xc00
    2ec2:	3270      	adds	r2, #112	; 0x70
    2ec4:	d02d      	beq.n	2f22 <CC_PalTrngParamGet+0xe6>
    2ec6:	f8d3 2c00 	ldr.w	r2, [r3, #3072]	; 0xc00
    2eca:	3201      	adds	r2, #1
    2ecc:	d029      	beq.n	2f22 <CC_PalTrngParamGet+0xe6>
    2ece:	f8d3 2c00 	ldr.w	r2, [r3, #3072]	; 0xc00
    2ed2:	f44f 037f 	mov.w	r3, #16711680	; 0xff0000
    2ed6:	6102      	str	r2, [r0, #16]
    2ed8:	f8d3 2c04 	ldr.w	r2, [r3, #3076]	; 0xc04
    2edc:	32af      	adds	r2, #175	; 0xaf
    2ede:	d01e      	beq.n	2f1e <CC_PalTrngParamGet+0xe2>
    2ee0:	f8d3 2c04 	ldr.w	r2, [r3, #3076]	; 0xc04
    2ee4:	3201      	adds	r2, #1
    2ee6:	d01a      	beq.n	2f1e <CC_PalTrngParamGet+0xe2>
    2ee8:	f8d3 2c04 	ldr.w	r2, [r3, #3076]	; 0xc04
    2eec:	f44f 037f 	mov.w	r3, #16711680	; 0xff0000
    2ef0:	6142      	str	r2, [r0, #20]
    2ef2:	f8d3 1c08 	ldr.w	r1, [r3, #3080]	; 0xc08
    2ef6:	4a13      	ldr	r2, [pc, #76]	; (2f44 <CC_PalTrngParamGet+0x108>)
    2ef8:	4291      	cmp	r1, r2
    2efa:	d00b      	beq.n	2f14 <CC_PalTrngParamGet+0xd8>
    2efc:	f8d3 2c08 	ldr.w	r2, [r3, #3080]	; 0xc08
    2f00:	3201      	adds	r2, #1
    2f02:	d007      	beq.n	2f14 <CC_PalTrngParamGet+0xd8>
    2f04:	f8d3 3c08 	ldr.w	r3, [r3, #3080]	; 0xc08
    2f08:	6183      	str	r3, [r0, #24]
    2f0a:	2000      	movs	r0, #0
    2f0c:	4770      	bx	lr
    2f0e:	f640 02fc 	movw	r2, #2300	; 0x8fc
    2f12:	e7a7      	b.n	2e64 <CC_PalTrngParamGet+0x28>
    2f14:	f240 3337 	movw	r3, #823	; 0x337
    2f18:	6183      	str	r3, [r0, #24]
    2f1a:	2000      	movs	r0, #0
    2f1c:	4770      	bx	lr
    2f1e:	2251      	movs	r2, #81	; 0x51
    2f20:	e7e4      	b.n	2eec <CC_PalTrngParamGet+0xb0>
    2f22:	2290      	movs	r2, #144	; 0x90
    2f24:	e7d5      	b.n	2ed2 <CC_PalTrngParamGet+0x96>
    2f26:	f642 1204 	movw	r2, #10500	; 0x2904
    2f2a:	e7c5      	b.n	2eb8 <CC_PalTrngParamGet+0x7c>
    2f2c:	f640 62d8 	movw	r2, #3800	; 0xed8
    2f30:	e7b4      	b.n	2e9c <CC_PalTrngParamGet+0x60>
    2f32:	f242 02d0 	movw	r2, #8400	; 0x20d0
    2f36:	e7a3      	b.n	2e80 <CC_PalTrngParamGet+0x44>
    2f38:	fffff8fc 	.word	0xfffff8fc
    2f3c:	ffff20d0 	.word	0xffff20d0
    2f40:	ffff2904 	.word	0xffff2904
    2f44:	fffff337 	.word	0xfffff337

00002f48 <LLF_RND_AdaptiveProportionTest>:
    2f48:	b3a8      	cbz	r0, 2fb6 <LLF_RND_AdaptiveProportionTest+0x6e>
    2f4a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    2f4e:	1e4c      	subs	r4, r1, #1
    2f50:	f5b4 7f04 	cmp.w	r4, #528	; 0x210
    2f54:	d22c      	bcs.n	2fb0 <LLF_RND_AdaptiveProportionTest+0x68>
    2f56:	b35b      	cbz	r3, 2fb0 <LLF_RND_AdaptiveProportionTest+0x68>
    2f58:	b352      	cbz	r2, 2fb0 <LLF_RND_AdaptiveProportionTest+0x68>
    2f5a:	f04f 0c00 	mov.w	ip, #0
    2f5e:	00c9      	lsls	r1, r1, #3
    2f60:	46e6      	mov	lr, ip
    2f62:	4665      	mov	r5, ip
    2f64:	4664      	mov	r4, ip
    2f66:	1e4f      	subs	r7, r1, #1
    2f68:	f103 38ff 	add.w	r8, r3, #4294967295
    2f6c:	e00c      	b.n	2f88 <LLF_RND_AdaptiveProportionTest+0x40>
    2f6e:	42ab      	cmp	r3, r5
    2f70:	d016      	beq.n	2fa0 <LLF_RND_AdaptiveProportionTest+0x58>
    2f72:	458e      	cmp	lr, r1
    2f74:	d101      	bne.n	2f7a <LLF_RND_AdaptiveProportionTest+0x32>
    2f76:	f10c 0c01 	add.w	ip, ip, #1
    2f7a:	45a8      	cmp	r8, r5
    2f7c:	d016      	beq.n	2fac <LLF_RND_AdaptiveProportionTest+0x64>
    2f7e:	3401      	adds	r4, #1
    2f80:	42bc      	cmp	r4, r7
    2f82:	f105 0501 	add.w	r5, r5, #1
    2f86:	d818      	bhi.n	2fba <LLF_RND_AdaptiveProportionTest+0x72>
    2f88:	0961      	lsrs	r1, r4, #5
    2f8a:	f850 1021 	ldr.w	r1, [r0, r1, lsl #2]
    2f8e:	f004 061f 	and.w	r6, r4, #31
    2f92:	40f1      	lsrs	r1, r6
    2f94:	2e1f      	cmp	r6, #31
    2f96:	bf18      	it	ne
    2f98:	f001 0101 	andne.w	r1, r1, #1
    2f9c:	2c00      	cmp	r4, #0
    2f9e:	d1e6      	bne.n	2f6e <LLF_RND_AdaptiveProportionTest+0x26>
    2fa0:	2500      	movs	r5, #0
    2fa2:	45a8      	cmp	r8, r5
    2fa4:	468e      	mov	lr, r1
    2fa6:	f04f 0c01 	mov.w	ip, #1
    2faa:	d1e8      	bne.n	2f7e <LLF_RND_AdaptiveProportionTest+0x36>
    2fac:	4562      	cmp	r2, ip
    2fae:	d2e6      	bcs.n	2f7e <LLF_RND_AdaptiveProportionTest+0x36>
    2fb0:	4803      	ldr	r0, [pc, #12]	; (2fc0 <LLF_RND_AdaptiveProportionTest+0x78>)
    2fb2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    2fb6:	4802      	ldr	r0, [pc, #8]	; (2fc0 <LLF_RND_AdaptiveProportionTest+0x78>)
    2fb8:	4770      	bx	lr
    2fba:	2000      	movs	r0, #0
    2fbc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    2fc0:	00f10c37 	.word	0x00f10c37

00002fc4 <getTrngSource>:
    2fc4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    2fc8:	b08f      	sub	sp, #60	; 0x3c
    2fca:	460d      	mov	r5, r1
    2fcc:	e9dd 4119 	ldrd	r4, r1, [sp, #100]	; 0x64
    2fd0:	4683      	mov	fp, r0
    2fd2:	2900      	cmp	r1, #0
    2fd4:	d157      	bne.n	3086 <getTrngSource+0xc2>
    2fd6:	6929      	ldr	r1, [r5, #16]
    2fd8:	9103      	str	r1, [sp, #12]
    2fda:	2100      	movs	r1, #0
    2fdc:	601c      	str	r4, [r3, #0]
    2fde:	9b18      	ldr	r3, [sp, #96]	; 0x60
    2fe0:	6019      	str	r1, [r3, #0]
    2fe2:	2a00      	cmp	r2, #0
    2fe4:	f000 8122 	beq.w	322c <getTrngSource+0x268>
    2fe8:	4a81      	ldr	r2, [pc, #516]	; (31f0 <getTrngSource+0x22c>)
    2fea:	4b82      	ldr	r3, [pc, #520]	; (31f4 <getTrngSource+0x230>)
    2fec:	6811      	ldr	r1, [r2, #0]
    2fee:	6a6a      	ldr	r2, [r5, #36]	; 0x24
    2ff0:	681b      	ldr	r3, [r3, #0]
    2ff2:	429a      	cmp	r2, r3
    2ff4:	d157      	bne.n	30a6 <getTrngSource+0xe2>
    2ff6:	290a      	cmp	r1, #10
    2ff8:	d155      	bne.n	30a6 <getTrngSource+0xe2>
    2ffa:	f89b 3003 	ldrb.w	r3, [fp, #3]
    2ffe:	9306      	str	r3, [sp, #24]
    3000:	9903      	ldr	r1, [sp, #12]
    3002:	2304      	movs	r3, #4
    3004:	4608      	mov	r0, r1
    3006:	4a7c      	ldr	r2, [pc, #496]	; (31f8 <getTrngSource+0x234>)
    3008:	9302      	str	r3, [sp, #8]
    300a:	fba2 0200 	umull	r0, r2, r2, r0
    300e:	0892      	lsrs	r2, r2, #2
    3010:	00cb      	lsls	r3, r1, #3
    3012:	eb02 0242 	add.w	r2, r2, r2, lsl #1
    3016:	f104 0008 	add.w	r0, r4, #8
    301a:	eba1 0242 	sub.w	r2, r1, r2, lsl #1
    301e:	3b01      	subs	r3, #1
    3020:	f8df 91d0 	ldr.w	r9, [pc, #464]	; 31f4 <getTrngSource+0x230>
    3024:	f8df a200 	ldr.w	sl, [pc, #512]	; 3228 <getTrngSource+0x264>
    3028:	9004      	str	r0, [sp, #16]
    302a:	9200      	str	r2, [sp, #0]
    302c:	9305      	str	r3, [sp, #20]
    302e:	9b18      	ldr	r3, [sp, #96]	; 0x60
    3030:	9c03      	ldr	r4, [sp, #12]
    3032:	601c      	str	r4, [r3, #0]
    3034:	2c00      	cmp	r4, #0
    3036:	f000 80cc 	beq.w	31d2 <getTrngSource+0x20e>
    303a:	2600      	movs	r6, #0
    303c:	9f04      	ldr	r7, [sp, #16]
    303e:	f000 faa9 	bl	3594 <LLF_RND_TurnOffTrng>
    3042:	2300      	movs	r3, #0
    3044:	9307      	str	r3, [sp, #28]
    3046:	9b06      	ldr	r3, [sp, #24]
    3048:	f1bb 0f00 	cmp.w	fp, #0
    304c:	d03a      	beq.n	30c4 <getTrngSource+0x100>
    304e:	2d00      	cmp	r5, #0
    3050:	d034      	beq.n	30bc <getTrngSource+0xf8>
    3052:	bb53      	cbnz	r3, 30aa <getTrngSource+0xe6>
    3054:	005b      	lsls	r3, r3, #1
    3056:	9306      	str	r3, [sp, #24]
    3058:	f1bb 0f00 	cmp.w	fp, #0
    305c:	d036      	beq.n	30cc <getTrngSource+0x108>
    305e:	2d00      	cmp	r5, #0
    3060:	d034      	beq.n	30cc <getTrngSource+0x108>
    3062:	b1e3      	cbz	r3, 309e <getTrngSource+0xda>
    3064:	a906      	add	r1, sp, #24
    3066:	4628      	mov	r0, r5
    3068:	f000 fa84 	bl	3574 <LLF_RND_GetFastestRosc>
    306c:	2800      	cmp	r0, #0
    306e:	f000 817d 	beq.w	336c <getTrngSource+0x3a8>
    3072:	4b62      	ldr	r3, [pc, #392]	; (31fc <getTrngSource+0x238>)
    3074:	4298      	cmp	r0, r3
    3076:	d012      	beq.n	309e <getTrngSource+0xda>
    3078:	9000      	str	r0, [sp, #0]
    307a:	f000 fa8b 	bl	3594 <LLF_RND_TurnOffTrng>
    307e:	9800      	ldr	r0, [sp, #0]
    3080:	b00f      	add	sp, #60	; 0x3c
    3082:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    3086:	f44f 017f 	mov.w	r1, #16711680	; 0xff0000
    308a:	f8d1 0c0c 	ldr.w	r0, [r1, #3084]	; 0xc0c
    308e:	3001      	adds	r0, #1
    3090:	bf0c      	ite	eq
    3092:	f44f 7104 	moveq.w	r1, #528	; 0x210
    3096:	f8d1 1c0c 	ldrne.w	r1, [r1, #3084]	; 0xc0c
    309a:	9103      	str	r1, [sp, #12]
    309c:	e79d      	b.n	2fda <getTrngSource+0x16>
    309e:	6a2b      	ldr	r3, [r5, #32]
    30a0:	b973      	cbnz	r3, 30c0 <getTrngSource+0xfc>
    30a2:	4856      	ldr	r0, [pc, #344]	; (31fc <getTrngSource+0x238>)
    30a4:	e7e8      	b.n	3078 <getTrngSource+0xb4>
    30a6:	4856      	ldr	r0, [pc, #344]	; (3200 <getTrngSource+0x23c>)
    30a8:	e7e6      	b.n	3078 <getTrngSource+0xb4>
    30aa:	a906      	add	r1, sp, #24
    30ac:	4628      	mov	r0, r5
    30ae:	f000 fa61 	bl	3574 <LLF_RND_GetFastestRosc>
    30b2:	b168      	cbz	r0, 30d0 <getTrngSource+0x10c>
    30b4:	4b53      	ldr	r3, [pc, #332]	; (3204 <getTrngSource+0x240>)
    30b6:	4298      	cmp	r0, r3
    30b8:	d0de      	beq.n	3078 <getTrngSource+0xb4>
    30ba:	9b06      	ldr	r3, [sp, #24]
    30bc:	2b08      	cmp	r3, #8
    30be:	d1c9      	bne.n	3054 <getTrngSource+0x90>
    30c0:	4851      	ldr	r0, [pc, #324]	; (3208 <getTrngSource+0x244>)
    30c2:	e7d9      	b.n	3078 <getTrngSource+0xb4>
    30c4:	2b08      	cmp	r3, #8
    30c6:	d0fb      	beq.n	30c0 <getTrngSource+0xfc>
    30c8:	005b      	lsls	r3, r3, #1
    30ca:	9306      	str	r3, [sp, #24]
    30cc:	484f      	ldr	r0, [pc, #316]	; (320c <getTrngSource+0x248>)
    30ce:	e7d3      	b.n	3078 <getTrngSource+0xb4>
    30d0:	4629      	mov	r1, r5
    30d2:	9806      	ldr	r0, [sp, #24]
    30d4:	f000 fa30 	bl	3538 <LLF_RND_GetRoscSampleCnt>
    30d8:	2800      	cmp	r0, #0
    30da:	d1eb      	bne.n	30b4 <getTrngSource+0xf0>
    30dc:	9b06      	ldr	r3, [sp, #24]
    30de:	2b08      	cmp	r3, #8
    30e0:	f000 810e 	beq.w	3300 <getTrngSource+0x33c>
    30e4:	2b04      	cmp	r3, #4
    30e6:	f000 8131 	beq.w	334c <getTrngSource+0x388>
    30ea:	f1a3 0302 	sub.w	r3, r3, #2
    30ee:	fab3 f383 	clz	r3, r3
    30f2:	095b      	lsrs	r3, r3, #5
    30f4:	9301      	str	r3, [sp, #4]
    30f6:	2301      	movs	r3, #1
    30f8:	4619      	mov	r1, r3
    30fa:	4a45      	ldr	r2, [pc, #276]	; (3210 <getTrngSource+0x24c>)
    30fc:	6013      	str	r3, [r2, #0]
    30fe:	f842 3c84 	str.w	r3, [r2, #-132]
    3102:	4b43      	ldr	r3, [pc, #268]	; (3210 <getTrngSource+0x24c>)
    3104:	6019      	str	r1, [r3, #0]
    3106:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    3108:	f8c9 3000 	str.w	r3, [r9]
    310c:	f8d9 2000 	ldr.w	r2, [r9]
    3110:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    3112:	429a      	cmp	r2, r3
    3114:	d1f5      	bne.n	3102 <getTrngSource+0x13e>
    3116:	f04f 0800 	mov.w	r8, #0
    311a:	f04f 30ff 	mov.w	r0, #4294967295
    311e:	f8ca 8000 	str.w	r8, [sl]
    3122:	f7ff fc3b 	bl	299c <CC_HalClearInterruptBit>
    3126:	4a3b      	ldr	r2, [pc, #236]	; (3214 <getTrngSource+0x250>)
    3128:	4b3b      	ldr	r3, [pc, #236]	; (3218 <getTrngSource+0x254>)
    312a:	4640      	mov	r0, r8
    312c:	601a      	str	r2, [r3, #0]
    312e:	f7ff fc43 	bl	29b8 <CC_HalMaskInterrupt>
    3132:	220a      	movs	r2, #10
    3134:	9801      	ldr	r0, [sp, #4]
    3136:	4939      	ldr	r1, [pc, #228]	; (321c <getTrngSource+0x258>)
    3138:	4b2d      	ldr	r3, [pc, #180]	; (31f0 <getTrngSource+0x22c>)
    313a:	6008      	str	r0, [r1, #0]
    313c:	601a      	str	r2, [r3, #0]
    313e:	692a      	ldr	r2, [r5, #16]
    3140:	f1a8 3855 	sub.w	r8, r8, #1431655765	; 0x55555555
    3144:	fba8 1202 	umull	r1, r2, r8, r2
    3148:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    314a:	0912      	lsrs	r2, r2, #4
    314c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    3150:	03db      	lsls	r3, r3, #15
    3152:	fb03 f302 	mul.w	r3, r3, r2
    3156:	4a32      	ldr	r2, [pc, #200]	; (3220 <getTrngSource+0x25c>)
    3158:	099b      	lsrs	r3, r3, #6
    315a:	6013      	str	r3, [r2, #0]
    315c:	2301      	movs	r3, #1
    315e:	f8ca 3000 	str.w	r3, [sl]
    3162:	9906      	ldr	r1, [sp, #24]
    3164:	f8db 2000 	ldr.w	r2, [fp]
    3168:	020b      	lsls	r3, r1, #8
    316a:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
    316e:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
    3172:	4313      	orrs	r3, r2
    3174:	f8cb 3000 	str.w	r3, [fp]
    3178:	a807      	add	r0, sp, #28
    317a:	f000 f9cd 	bl	3518 <LLF_RND_WaitRngInterrupt>
    317e:	2800      	cmp	r0, #0
    3180:	d198      	bne.n	30b4 <getTrngSource+0xf0>
    3182:	4b28      	ldr	r3, [pc, #160]	; (3224 <getTrngSource+0x260>)
    3184:	fba8 2804 	umull	r2, r8, r8, r4
    3188:	681a      	ldr	r2, [r3, #0]
    318a:	3314      	adds	r3, #20
    318c:	9208      	str	r2, [sp, #32]
    318e:	f853 2c10 	ldr.w	r2, [r3, #-16]
    3192:	ebb6 0f98 	cmp.w	r6, r8, lsr #2
    3196:	9209      	str	r2, [sp, #36]	; 0x24
    3198:	f853 2c0c 	ldr.w	r2, [r3, #-12]
    319c:	920a      	str	r2, [sp, #40]	; 0x28
    319e:	f853 2c08 	ldr.w	r2, [r3, #-8]
    31a2:	920b      	str	r2, [sp, #44]	; 0x2c
    31a4:	f853 2c04 	ldr.w	r2, [r3, #-4]
    31a8:	920c      	str	r2, [sp, #48]	; 0x30
    31aa:	681b      	ldr	r3, [r3, #0]
    31ac:	930d      	str	r3, [sp, #52]	; 0x34
    31ae:	d101      	bne.n	31b4 <getTrngSource+0x1f0>
    31b0:	9b00      	ldr	r3, [sp, #0]
    31b2:	b99b      	cbnz	r3, 31dc <getTrngSource+0x218>
    31b4:	4638      	mov	r0, r7
    31b6:	2218      	movs	r2, #24
    31b8:	a908      	add	r1, sp, #32
    31ba:	f7ff fb21 	bl	2800 <CC_PalMemCopyPlat>
    31be:	3c18      	subs	r4, #24
    31c0:	3718      	adds	r7, #24
    31c2:	3601      	adds	r6, #1
    31c4:	2c00      	cmp	r4, #0
    31c6:	f47f af3a 	bne.w	303e <getTrngSource+0x7a>
    31ca:	9b04      	ldr	r3, [sp, #16]
    31cc:	2b00      	cmp	r3, #0
    31ce:	f040 809a 	bne.w	3306 <getTrngSource+0x342>
    31d2:	2300      	movs	r3, #0
    31d4:	9a18      	ldr	r2, [sp, #96]	; 0x60
    31d6:	6013      	str	r3, [r2, #0]
    31d8:	9b06      	ldr	r3, [sp, #24]
    31da:	e76f      	b.n	30bc <getTrngSource+0xf8>
    31dc:	461a      	mov	r2, r3
    31de:	4638      	mov	r0, r7
    31e0:	a908      	add	r1, sp, #32
    31e2:	1ae4      	subs	r4, r4, r3
    31e4:	f7ff fb0c 	bl	2800 <CC_PalMemCopyPlat>
    31e8:	9b00      	ldr	r3, [sp, #0]
    31ea:	441f      	add	r7, r3
    31ec:	e7e9      	b.n	31c2 <getTrngSource+0x1fe>
    31ee:	bf00      	nop
    31f0:	50841138 	.word	0x50841138
    31f4:	50841130 	.word	0x50841130
    31f8:	aaaaaaab 	.word	0xaaaaaaab
    31fc:	00f10c31 	.word	0x00f10c31
    3200:	00f10c30 	.word	0x00f10c30
    3204:	00f10c02 	.word	0x00f10c02
    3208:	00f10c32 	.word	0x00f10c32
    320c:	00f10c35 	.word	0x00f10c35
    3210:	508411c4 	.word	0x508411c4
    3214:	0ffffffe 	.word	0x0ffffffe
    3218:	50841100 	.word	0x50841100
    321c:	5084110c 	.word	0x5084110c
    3220:	508411d8 	.word	0x508411d8
    3224:	50841114 	.word	0x50841114
    3228:	5084112c 	.word	0x5084112c
    322c:	f1bb 0f00 	cmp.w	fp, #0
    3230:	f43f af4c 	beq.w	30cc <getTrngSource+0x108>
    3234:	2d00      	cmp	r5, #0
    3236:	f43f af49 	beq.w	30cc <getTrngSource+0x108>
    323a:	2301      	movs	r3, #1
    323c:	a90e      	add	r1, sp, #56	; 0x38
    323e:	f841 3d20 	str.w	r3, [r1, #-32]!
    3242:	f8cb 2000 	str.w	r2, [fp]
    3246:	4628      	mov	r0, r5
    3248:	f000 f994 	bl	3574 <LLF_RND_GetFastestRosc>
    324c:	2800      	cmp	r0, #0
    324e:	f47f af13 	bne.w	3078 <getTrngSource+0xb4>
    3252:	4629      	mov	r1, r5
    3254:	9806      	ldr	r0, [sp, #24]
    3256:	f000 f96f 	bl	3538 <LLF_RND_GetRoscSampleCnt>
    325a:	2800      	cmp	r0, #0
    325c:	f47f af0c 	bne.w	3078 <getTrngSource+0xb4>
    3260:	9f06      	ldr	r7, [sp, #24]
    3262:	2f08      	cmp	r7, #8
    3264:	f000 80eb 	beq.w	343e <getTrngSource+0x47a>
    3268:	2f04      	cmp	r7, #4
    326a:	f000 80ea 	beq.w	3442 <getTrngSource+0x47e>
    326e:	f1a7 0702 	sub.w	r7, r7, #2
    3272:	fab7 f787 	clz	r7, r7
    3276:	097f      	lsrs	r7, r7, #5
    3278:	2201      	movs	r2, #1
    327a:	4616      	mov	r6, r2
    327c:	4b73      	ldr	r3, [pc, #460]	; (344c <getTrngSource+0x488>)
    327e:	4974      	ldr	r1, [pc, #464]	; (3450 <getTrngSource+0x48c>)
    3280:	601a      	str	r2, [r3, #0]
    3282:	4618      	mov	r0, r3
    3284:	600a      	str	r2, [r1, #0]
    3286:	3b94      	subs	r3, #148	; 0x94
    3288:	6006      	str	r6, [r0, #0]
    328a:	6a6a      	ldr	r2, [r5, #36]	; 0x24
    328c:	601a      	str	r2, [r3, #0]
    328e:	6819      	ldr	r1, [r3, #0]
    3290:	6a6a      	ldr	r2, [r5, #36]	; 0x24
    3292:	4291      	cmp	r1, r2
    3294:	d1f8      	bne.n	3288 <getTrngSource+0x2c4>
    3296:	f04f 0800 	mov.w	r8, #0
    329a:	4b6e      	ldr	r3, [pc, #440]	; (3454 <getTrngSource+0x490>)
    329c:	f04f 30ff 	mov.w	r0, #4294967295
    32a0:	f8c3 8000 	str.w	r8, [r3]
    32a4:	f7ff fb7a 	bl	299c <CC_HalClearInterruptBit>
    32a8:	4b6b      	ldr	r3, [pc, #428]	; (3458 <getTrngSource+0x494>)
    32aa:	4a6c      	ldr	r2, [pc, #432]	; (345c <getTrngSource+0x498>)
    32ac:	4640      	mov	r0, r8
    32ae:	601a      	str	r2, [r3, #0]
    32b0:	f7ff fb82 	bl	29b8 <CC_HalMaskInterrupt>
    32b4:	220a      	movs	r2, #10
    32b6:	496a      	ldr	r1, [pc, #424]	; (3460 <getTrngSource+0x49c>)
    32b8:	4b6a      	ldr	r3, [pc, #424]	; (3464 <getTrngSource+0x4a0>)
    32ba:	600f      	str	r7, [r1, #0]
    32bc:	601a      	str	r2, [r3, #0]
    32be:	991a      	ldr	r1, [sp, #104]	; 0x68
    32c0:	692b      	ldr	r3, [r5, #16]
    32c2:	2901      	cmp	r1, #1
    32c4:	6a6a      	ldr	r2, [r5, #36]	; 0x24
    32c6:	f000 80b1 	beq.w	342c <getTrngSource+0x468>
    32ca:	4967      	ldr	r1, [pc, #412]	; (3468 <getTrngSource+0x4a4>)
    32cc:	fba1 1303 	umull	r1, r3, r1, r3
    32d0:	091b      	lsrs	r3, r3, #4
    32d2:	2101      	movs	r1, #1
    32d4:	eb02 0242 	add.w	r2, r2, r2, lsl #1
    32d8:	03d2      	lsls	r2, r2, #15
    32da:	fb03 f302 	mul.w	r3, r3, r2
    32de:	4a63      	ldr	r2, [pc, #396]	; (346c <getTrngSource+0x4a8>)
    32e0:	099b      	lsrs	r3, r3, #6
    32e2:	6013      	str	r3, [r2, #0]
    32e4:	4b5b      	ldr	r3, [pc, #364]	; (3454 <getTrngSource+0x490>)
    32e6:	6019      	str	r1, [r3, #0]
    32e8:	9906      	ldr	r1, [sp, #24]
    32ea:	f8db 2000 	ldr.w	r2, [fp]
    32ee:	020b      	lsls	r3, r1, #8
    32f0:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
    32f4:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
    32f8:	4313      	orrs	r3, r2
    32fa:	f8cb 3000 	str.w	r3, [fp]
    32fe:	e67f      	b.n	3000 <getTrngSource+0x3c>
    3300:	2303      	movs	r3, #3
    3302:	9301      	str	r3, [sp, #4]
    3304:	e6f7      	b.n	30f6 <getTrngSource+0x132>
    3306:	9b03      	ldr	r3, [sp, #12]
    3308:	f5b3 7f04 	cmp.w	r3, #528	; 0x210
    330c:	f63f af61 	bhi.w	31d2 <getTrngSource+0x20e>
    3310:	e9dd 7c04 	ldrd	r7, ip, [sp, #16]
    3314:	4620      	mov	r0, r4
    3316:	4623      	mov	r3, r4
    3318:	696e      	ldr	r6, [r5, #20]
    331a:	e004      	b.n	3326 <getTrngSource+0x362>
    331c:	2001      	movs	r0, #1
    331e:	3301      	adds	r3, #1
    3320:	4563      	cmp	r3, ip
    3322:	4614      	mov	r4, r2
    3324:	d815      	bhi.n	3352 <getTrngSource+0x38e>
    3326:	095a      	lsrs	r2, r3, #5
    3328:	f857 2022 	ldr.w	r2, [r7, r2, lsl #2]
    332c:	f003 011f 	and.w	r1, r3, #31
    3330:	40ca      	lsrs	r2, r1
    3332:	291f      	cmp	r1, #31
    3334:	bf18      	it	ne
    3336:	f002 0201 	andne.w	r2, r2, #1
    333a:	2b00      	cmp	r3, #0
    333c:	d0ee      	beq.n	331c <getTrngSource+0x358>
    333e:	42a2      	cmp	r2, r4
    3340:	d1ec      	bne.n	331c <getTrngSource+0x358>
    3342:	3001      	adds	r0, #1
    3344:	4286      	cmp	r6, r0
    3346:	d1ea      	bne.n	331e <getTrngSource+0x35a>
    3348:	4849      	ldr	r0, [pc, #292]	; (3470 <getTrngSource+0x4ac>)
    334a:	e00b      	b.n	3364 <getTrngSource+0x3a0>
    334c:	2302      	movs	r3, #2
    334e:	9301      	str	r3, [sp, #4]
    3350:	e6d1      	b.n	30f6 <getTrngSource+0x132>
    3352:	f44f 6380 	mov.w	r3, #1024	; 0x400
    3356:	e9dd 1003 	ldrd	r1, r0, [sp, #12]
    335a:	69aa      	ldr	r2, [r5, #24]
    335c:	f7ff fdf4 	bl	2f48 <LLF_RND_AdaptiveProportionTest>
    3360:	2800      	cmp	r0, #0
    3362:	d05d      	beq.n	3420 <getTrngSource+0x45c>
    3364:	2300      	movs	r3, #0
    3366:	9a18      	ldr	r2, [sp, #96]	; 0x60
    3368:	6013      	str	r3, [r2, #0]
    336a:	e6a3      	b.n	30b4 <getTrngSource+0xf0>
    336c:	4629      	mov	r1, r5
    336e:	9806      	ldr	r0, [sp, #24]
    3370:	f000 f8e2 	bl	3538 <LLF_RND_GetRoscSampleCnt>
    3374:	2800      	cmp	r0, #0
    3376:	f47f ae7c 	bne.w	3072 <getTrngSource+0xae>
    337a:	9c06      	ldr	r4, [sp, #24]
    337c:	2c08      	cmp	r4, #8
    337e:	d051      	beq.n	3424 <getTrngSource+0x460>
    3380:	2c04      	cmp	r4, #4
    3382:	d051      	beq.n	3428 <getTrngSource+0x464>
    3384:	f1a4 0402 	sub.w	r4, r4, #2
    3388:	fab4 f484 	clz	r4, r4
    338c:	0964      	lsrs	r4, r4, #5
    338e:	2301      	movs	r3, #1
    3390:	461e      	mov	r6, r3
    3392:	4619      	mov	r1, r3
    3394:	4a2d      	ldr	r2, [pc, #180]	; (344c <getTrngSource+0x488>)
    3396:	6013      	str	r3, [r2, #0]
    3398:	f842 3c84 	str.w	r3, [r2, #-132]
    339c:	4b2b      	ldr	r3, [pc, #172]	; (344c <getTrngSource+0x488>)
    339e:	6019      	str	r1, [r3, #0]
    33a0:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    33a2:	f8c9 3000 	str.w	r3, [r9]
    33a6:	f8d9 2000 	ldr.w	r2, [r9]
    33aa:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    33ac:	429a      	cmp	r2, r3
    33ae:	d1f5      	bne.n	339c <getTrngSource+0x3d8>
    33b0:	2700      	movs	r7, #0
    33b2:	f04f 30ff 	mov.w	r0, #4294967295
    33b6:	f8ca 7000 	str.w	r7, [sl]
    33ba:	f7ff faef 	bl	299c <CC_HalClearInterruptBit>
    33be:	4b26      	ldr	r3, [pc, #152]	; (3458 <getTrngSource+0x494>)
    33c0:	4a26      	ldr	r2, [pc, #152]	; (345c <getTrngSource+0x498>)
    33c2:	4638      	mov	r0, r7
    33c4:	601a      	str	r2, [r3, #0]
    33c6:	f7ff faf7 	bl	29b8 <CC_HalMaskInterrupt>
    33ca:	220a      	movs	r2, #10
    33cc:	4924      	ldr	r1, [pc, #144]	; (3460 <getTrngSource+0x49c>)
    33ce:	4b25      	ldr	r3, [pc, #148]	; (3464 <getTrngSource+0x4a0>)
    33d0:	600c      	str	r4, [r1, #0]
    33d2:	601a      	str	r2, [r3, #0]
    33d4:	692a      	ldr	r2, [r5, #16]
    33d6:	4924      	ldr	r1, [pc, #144]	; (3468 <getTrngSource+0x4a4>)
    33d8:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    33da:	fba1 1202 	umull	r1, r2, r1, r2
    33de:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    33e2:	0912      	lsrs	r2, r2, #4
    33e4:	03db      	lsls	r3, r3, #15
    33e6:	fb03 f302 	mul.w	r3, r3, r2
    33ea:	4a20      	ldr	r2, [pc, #128]	; (346c <getTrngSource+0x4a8>)
    33ec:	099b      	lsrs	r3, r3, #6
    33ee:	6013      	str	r3, [r2, #0]
    33f0:	f8ca 6000 	str.w	r6, [sl]
    33f4:	9b06      	ldr	r3, [sp, #24]
    33f6:	f8db 1000 	ldr.w	r1, [fp]
    33fa:	021a      	lsls	r2, r3, #8
    33fc:	ea42 6303 	orr.w	r3, r2, r3, lsl #24
    3400:	f021 427f 	bic.w	r2, r1, #4278190080	; 0xff000000
    3404:	431a      	orrs	r2, r3
    3406:	0a13      	lsrs	r3, r2, #8
    3408:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
    340c:	4313      	orrs	r3, r2
    340e:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    3412:	f8cb 3000 	str.w	r3, [fp]
    3416:	9b02      	ldr	r3, [sp, #8]
    3418:	3b01      	subs	r3, #1
    341a:	9302      	str	r3, [sp, #8]
    341c:	f47f ae07 	bne.w	302e <getTrngSource+0x6a>
    3420:	2000      	movs	r0, #0
    3422:	e629      	b.n	3078 <getTrngSource+0xb4>
    3424:	2403      	movs	r4, #3
    3426:	e7b2      	b.n	338e <getTrngSource+0x3ca>
    3428:	2402      	movs	r4, #2
    342a:	e7b0      	b.n	338e <getTrngSource+0x3ca>
    342c:	f44f 037f 	mov.w	r3, #16711680	; 0xff0000
    3430:	f8d3 1c0c 	ldr.w	r1, [r3, #3084]	; 0xc0c
    3434:	3101      	adds	r1, #1
    3436:	d006      	beq.n	3446 <getTrngSource+0x482>
    3438:	f8d3 3c0c 	ldr.w	r3, [r3, #3084]	; 0xc0c
    343c:	e745      	b.n	32ca <getTrngSource+0x306>
    343e:	2703      	movs	r7, #3
    3440:	e71a      	b.n	3278 <getTrngSource+0x2b4>
    3442:	2702      	movs	r7, #2
    3444:	e718      	b.n	3278 <getTrngSource+0x2b4>
    3446:	2316      	movs	r3, #22
    3448:	e743      	b.n	32d2 <getTrngSource+0x30e>
    344a:	bf00      	nop
    344c:	508411c4 	.word	0x508411c4
    3450:	50841140 	.word	0x50841140
    3454:	5084112c 	.word	0x5084112c
    3458:	50841100 	.word	0x50841100
    345c:	0ffffffe 	.word	0x0ffffffe
    3460:	5084110c 	.word	0x5084110c
    3464:	50841138 	.word	0x50841138
    3468:	aaaaaaab 	.word	0xaaaaaaab
    346c:	508411d8 	.word	0x508411d8
    3470:	00f10c36 	.word	0x00f10c36

00003474 <LLF_RND_GetTrngSource>:
    3474:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    3478:	4c1b      	ldr	r4, [pc, #108]	; (34e8 <LLF_RND_GetTrngSource+0x74>)
    347a:	b085      	sub	sp, #20
    347c:	4607      	mov	r7, r0
    347e:	e9dd 560d 	ldrd	r5, r6, [sp, #52]	; 0x34
    3482:	4688      	mov	r8, r1
    3484:	6820      	ldr	r0, [r4, #0]
    3486:	f04f 31ff 	mov.w	r1, #4294967295
    348a:	4691      	mov	r9, r2
    348c:	f7ff fa1e 	bl	28cc <CC_PalMutexLock>
    3490:	bb28      	cbnz	r0, 34de <LLF_RND_GetTrngSource+0x6a>
    3492:	2000      	movs	r0, #0
    3494:	f7ff fa4a 	bl	292c <CC_PalPowerSaveModeSelect>
    3498:	b9e8      	cbnz	r0, 34d6 <LLF_RND_GetTrngSource+0x62>
    349a:	2300      	movs	r3, #0
    349c:	e9cd 5600 	strd	r5, r6, [sp]
    34a0:	9302      	str	r3, [sp, #8]
    34a2:	464a      	mov	r2, r9
    34a4:	4641      	mov	r1, r8
    34a6:	4638      	mov	r0, r7
    34a8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    34aa:	f7ff fd8b 	bl	2fc4 <getTrngSource>
    34ae:	4605      	mov	r5, r0
    34b0:	2001      	movs	r0, #1
    34b2:	f7ff fa3b 	bl	292c <CC_PalPowerSaveModeSelect>
    34b6:	b950      	cbnz	r0, 34ce <LLF_RND_GetTrngSource+0x5a>
    34b8:	6820      	ldr	r0, [r4, #0]
    34ba:	f7ff fa0f 	bl	28dc <CC_PalMutexUnlock>
    34be:	b110      	cbz	r0, 34c6 <LLF_RND_GetTrngSource+0x52>
    34c0:	480a      	ldr	r0, [pc, #40]	; (34ec <LLF_RND_GetTrngSource+0x78>)
    34c2:	f7ff fb8d 	bl	2be0 <CC_PalAbort>
    34c6:	4628      	mov	r0, r5
    34c8:	b005      	add	sp, #20
    34ca:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    34ce:	4808      	ldr	r0, [pc, #32]	; (34f0 <LLF_RND_GetTrngSource+0x7c>)
    34d0:	f7ff fb86 	bl	2be0 <CC_PalAbort>
    34d4:	e7f0      	b.n	34b8 <LLF_RND_GetTrngSource+0x44>
    34d6:	4807      	ldr	r0, [pc, #28]	; (34f4 <LLF_RND_GetTrngSource+0x80>)
    34d8:	f7ff fb82 	bl	2be0 <CC_PalAbort>
    34dc:	e7dd      	b.n	349a <LLF_RND_GetTrngSource+0x26>
    34de:	4806      	ldr	r0, [pc, #24]	; (34f8 <LLF_RND_GetTrngSource+0x84>)
    34e0:	f7ff fb7e 	bl	2be0 <CC_PalAbort>
    34e4:	e7d5      	b.n	3492 <LLF_RND_GetTrngSource+0x1e>
    34e6:	bf00      	nop
    34e8:	20001424 	.word	0x20001424
    34ec:	0000465c 	.word	0x0000465c
    34f0:	00004694 	.word	0x00004694
    34f4:	00004674 	.word	0x00004674
    34f8:	00004644 	.word	0x00004644

000034fc <LLF_RND_RunTrngStartupTest>:
    34fc:	b510      	push	{r4, lr}
    34fe:	2401      	movs	r4, #1
    3500:	b086      	sub	sp, #24
    3502:	ab05      	add	r3, sp, #20
    3504:	e9cd 2401 	strd	r2, r4, [sp, #4]
    3508:	9300      	str	r3, [sp, #0]
    350a:	2200      	movs	r2, #0
    350c:	ab04      	add	r3, sp, #16
    350e:	f7ff fd59 	bl	2fc4 <getTrngSource>
    3512:	b006      	add	sp, #24
    3514:	bd10      	pop	{r4, pc}
    3516:	bf00      	nop

00003518 <LLF_RND_WaitRngInterrupt>:
    3518:	b508      	push	{r3, lr}
    351a:	4601      	mov	r1, r0
    351c:	f44f 6080 	mov.w	r0, #1024	; 0x400
    3520:	f7ff fa50 	bl	29c4 <CC_HalWaitInterruptRND>
    3524:	2300      	movs	r3, #0
    3526:	4902      	ldr	r1, [pc, #8]	; (3530 <LLF_RND_WaitRngInterrupt+0x18>)
    3528:	4a02      	ldr	r2, [pc, #8]	; (3534 <LLF_RND_WaitRngInterrupt+0x1c>)
    352a:	600b      	str	r3, [r1, #0]
    352c:	6013      	str	r3, [r2, #0]
    352e:	bd08      	pop	{r3, pc}
    3530:	508411c8 	.word	0x508411c8
    3534:	5084112c 	.word	0x5084112c

00003538 <LLF_RND_GetRoscSampleCnt>:
    3538:	3801      	subs	r0, #1
    353a:	2807      	cmp	r0, #7
    353c:	d815      	bhi.n	356a <LLF_RND_GetRoscSampleCnt+0x32>
    353e:	e8df f000 	tbb	[pc, r0]
    3542:	0c10      	.short	0x0c10
    3544:	14140814 	.word	0x14140814
    3548:	0414      	.short	0x0414
    354a:	68cb      	ldr	r3, [r1, #12]
    354c:	2000      	movs	r0, #0
    354e:	624b      	str	r3, [r1, #36]	; 0x24
    3550:	4770      	bx	lr
    3552:	688b      	ldr	r3, [r1, #8]
    3554:	2000      	movs	r0, #0
    3556:	624b      	str	r3, [r1, #36]	; 0x24
    3558:	4770      	bx	lr
    355a:	684b      	ldr	r3, [r1, #4]
    355c:	2000      	movs	r0, #0
    355e:	624b      	str	r3, [r1, #36]	; 0x24
    3560:	4770      	bx	lr
    3562:	680b      	ldr	r3, [r1, #0]
    3564:	2000      	movs	r0, #0
    3566:	624b      	str	r3, [r1, #36]	; 0x24
    3568:	4770      	bx	lr
    356a:	4801      	ldr	r0, [pc, #4]	; (3570 <LLF_RND_GetRoscSampleCnt+0x38>)
    356c:	4770      	bx	lr
    356e:	bf00      	nop
    3570:	00f10c31 	.word	0x00f10c31

00003574 <LLF_RND_GetFastestRosc>:
    3574:	680b      	ldr	r3, [r1, #0]
    3576:	e002      	b.n	357e <LLF_RND_GetFastestRosc+0xa>
    3578:	2b08      	cmp	r3, #8
    357a:	600b      	str	r3, [r1, #0]
    357c:	d806      	bhi.n	358c <LLF_RND_GetFastestRosc+0x18>
    357e:	6a02      	ldr	r2, [r0, #32]
    3580:	4213      	tst	r3, r2
    3582:	ea4f 0343 	mov.w	r3, r3, lsl #1
    3586:	d0f7      	beq.n	3578 <LLF_RND_GetFastestRosc+0x4>
    3588:	2000      	movs	r0, #0
    358a:	4770      	bx	lr
    358c:	4800      	ldr	r0, [pc, #0]	; (3590 <LLF_RND_GetFastestRosc+0x1c>)
    358e:	4770      	bx	lr
    3590:	00f10c31 	.word	0x00f10c31

00003594 <LLF_RND_TurnOffTrng>:
    3594:	2300      	movs	r3, #0
    3596:	4904      	ldr	r1, [pc, #16]	; (35a8 <LLF_RND_TurnOffTrng+0x14>)
    3598:	4a04      	ldr	r2, [pc, #16]	; (35ac <LLF_RND_TurnOffTrng+0x18>)
    359a:	600b      	str	r3, [r1, #0]
    359c:	f44f 6080 	mov.w	r0, #1024	; 0x400
    35a0:	6013      	str	r3, [r2, #0]
    35a2:	f7ff b9fb 	b.w	299c <CC_HalClearInterruptBit>
    35a6:	bf00      	nop
    35a8:	5084112c 	.word	0x5084112c
    35ac:	508411c4 	.word	0x508411c4

000035b0 <main>:
 *  0 kB  |---------------------|
 */


void main(void)
{
    35b0:	b508      	push	{r3, lr}
	spm_config();
    35b2:	f7fd fad1 	bl	b58 <spm_config>
	spm_jump();
}
    35b6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	spm_jump();
    35ba:	f7fd ba61 	b.w	a80 <spm_jump>

000035be <arm_cmse_mpu_region_get>:
__CMSE_TT_ASM ()

__extension__ static __inline __attribute__ ((__always_inline__))
cmse_address_info_t
cmse_TT (void *__p)
__CMSE_TT_ASM ()
    35be:	e840 f300 	tt	r3, r0

int arm_cmse_mpu_region_get(u32_t addr)
{
	cmse_address_info_t addr_info =	cmse_TT((void *)addr);

	if (addr_info.flags.mpu_region_valid) {
    35c2:	f413 3f80 	tst.w	r3, #65536	; 0x10000
    35c6:	b2d8      	uxtb	r0, r3
		return addr_info.flags.mpu_region;
	}

	return -EINVAL;
}
    35c8:	bf08      	it	eq
    35ca:	f06f 0015 	mvneq.w	r0, #21
    35ce:	4770      	bx	lr

000035d0 <z_sys_mem_pool_base_init>:
{
	int i;
	size_t buflen = p->n_max * p->max_sz, sz = p->max_sz;
	u32_t *bits = (u32_t *)((u8_t *)p->buf + buflen);

	p->max_inline_level = -1;
    35d0:	23ff      	movs	r3, #255	; 0xff
{
    35d2:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	size_t buflen = p->n_max * p->max_sz, sz = p->max_sz;
    35d6:	6845      	ldr	r5, [r0, #4]

	for (i = 0; i < p->n_levels; i++) {
    35d8:	2200      	movs	r2, #0
	size_t buflen = p->n_max * p->max_sz, sz = p->max_sz;
    35da:	4629      	mov	r1, r5
		int nblocks = buflen / sz;

		sys_dlist_init(&p->levels[i].free_list);
    35dc:	f04f 0a0c 	mov.w	sl, #12

		if (nblocks <= sizeof(p->levels[i].bits)*8) {
			p->max_inline_level = i;
		} else {
			p->levels[i].bits_p = bits;
			bits += (nblocks + 31)/32;
    35e0:	f04f 0b20 	mov.w	fp, #32
	size_t buflen = p->n_max * p->max_sz, sz = p->max_sz;
    35e4:	8907      	ldrh	r7, [r0, #8]
	u32_t *bits = (u32_t *)((u8_t *)p->buf + buflen);
    35e6:	6804      	ldr	r4, [r0, #0]
	size_t buflen = p->n_max * p->max_sz, sz = p->max_sz;
    35e8:	fb05 fc07 	mul.w	ip, r5, r7
	p->max_inline_level = -1;
    35ec:	72c3      	strb	r3, [r0, #11]
	for (i = 0; i < p->n_levels; i++) {
    35ee:	7a83      	ldrb	r3, [r0, #10]
	u32_t *bits = (u32_t *)((u8_t *)p->buf + buflen);
    35f0:	4464      	add	r4, ip
	for (i = 0; i < p->n_levels; i++) {
    35f2:	9301      	str	r3, [sp, #4]
    35f4:	9b01      	ldr	r3, [sp, #4]
    35f6:	4293      	cmp	r3, r2
    35f8:	dc08      	bgt.n	360c <z_sys_mem_pool_base_init+0x3c>
    35fa:	2300      	movs	r3, #0
		}

		sz = WB_DN(sz / 4);
	}

	for (i = 0; i < p->n_max; i++) {
    35fc:	4619      	mov	r1, r3
    35fe:	428f      	cmp	r7, r1
    3600:	eb05 0c03 	add.w	ip, r5, r3
    3604:	dc21      	bgt.n	364a <z_sys_mem_pool_base_init+0x7a>
		void *block = block_ptr(p, p->max_sz, i);

		sys_dlist_append(&p->levels[0].free_list, block);
	}
}
    3606:	b003      	add	sp, #12
    3608:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		int nblocks = buflen / sz;
    360c:	fbbc f3f1 	udiv	r3, ip, r1
		if (nblocks <= sizeof(p->levels[i].bits)*8) {
    3610:	2b20      	cmp	r3, #32
			bits += (nblocks + 31)/32;
    3612:	bf84      	itt	hi
    3614:	331f      	addhi	r3, #31
    3616:	fb93 f3fb 	sdivhi	r3, r3, fp
		sys_dlist_init(&p->levels[i].free_list);
    361a:	fb0a fe02 	mul.w	lr, sl, r2
    361e:	f8d0 800c 	ldr.w	r8, [r0, #12]
		sz = WB_DN(sz / 4);
    3622:	ea4f 0191 	mov.w	r1, r1, lsr #2
		sys_dlist_init(&p->levels[i].free_list);
    3626:	eb08 060e 	add.w	r6, r8, lr
    362a:	f106 0904 	add.w	r9, r6, #4
    362e:	e9c6 9901 	strd	r9, r9, [r6, #4]
		sz = WB_DN(sz / 4);
    3632:	f021 0103 	bic.w	r1, r1, #3
			p->max_inline_level = i;
    3636:	bf94      	ite	ls
    3638:	72c2      	strbls	r2, [r0, #11]
			p->levels[i].bits_p = bits;
    363a:	f848 400e 	strhi.w	r4, [r8, lr]
	for (i = 0; i < p->n_levels; i++) {
    363e:	f102 0201 	add.w	r2, r2, #1
			bits += (nblocks + 31)/32;
    3642:	bf88      	it	hi
    3644:	eb04 0483 	addhi.w	r4, r4, r3, lsl #2
    3648:	e7d4      	b.n	35f4 <z_sys_mem_pool_base_init+0x24>
		sys_dlist_append(&p->levels[0].free_list, block);
    364a:	68c2      	ldr	r2, [r0, #12]
	return (u8_t *)p->buf + lsz * block;
    364c:	6806      	ldr	r6, [r0, #0]
		sys_dlist_append(&p->levels[0].free_list, block);
    364e:	f102 0e04 	add.w	lr, r2, #4
	return (u8_t *)p->buf + lsz * block;
    3652:	18f4      	adds	r4, r6, r3
	node->next = list;
    3654:	f846 e003 	str.w	lr, [r6, r3]
	node->prev = list->tail;
    3658:	6893      	ldr	r3, [r2, #8]
	for (i = 0; i < p->n_max; i++) {
    365a:	3101      	adds	r1, #1
    365c:	6063      	str	r3, [r4, #4]
	list->tail->next = node;
    365e:	6893      	ldr	r3, [r2, #8]
    3660:	601c      	str	r4, [r3, #0]
	list->tail = node;
    3662:	6094      	str	r4, [r2, #8]
    3664:	4663      	mov	r3, ip
    3666:	e7ca      	b.n	35fe <z_sys_mem_pool_base_init+0x2e>

00003668 <z_thread_entry>:
 * This routine does not return, and is marked as such so the compiler won't
 * generate preamble code that is only used by functions that actually return.
 */
FUNC_NORETURN void z_thread_entry(k_thread_entry_t entry,
				 void *p1, void *p2, void *p3)
{
    3668:	4604      	mov	r4, r0
    366a:	b508      	push	{r3, lr}
    366c:	4608      	mov	r0, r1
    366e:	4611      	mov	r1, r2
	entry(p1, p2, p3);
    3670:	461a      	mov	r2, r3
    3672:	47a0      	blx	r4
	return z_impl_k_current_get();
    3674:	f7fe ff3c 	bl	24f0 <z_impl_k_current_get>
	z_impl_k_thread_abort(thread);
    3678:	f7fd ff32 	bl	14e0 <z_impl_k_thread_abort>

0000367c <z_arch_printk_char_out>:
}
    367c:	2000      	movs	r0, #0
    367e:	4770      	bx	lr

00003680 <print_err>:
{
    3680:	b570      	push	{r4, r5, r6, lr}
    3682:	460d      	mov	r5, r1
    3684:	4604      	mov	r4, r0
	out('E', ctx);
    3686:	2045      	movs	r0, #69	; 0x45
    3688:	47a0      	blx	r4
	out('R', ctx);
    368a:	4629      	mov	r1, r5
    368c:	2052      	movs	r0, #82	; 0x52
    368e:	47a0      	blx	r4
	out('R', ctx);
    3690:	4629      	mov	r1, r5
    3692:	4623      	mov	r3, r4
}
    3694:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	out('R', ctx);
    3698:	2052      	movs	r0, #82	; 0x52
    369a:	4718      	bx	r3

0000369c <z_vprintk>:
{
    369c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	char length_mod = 0;
    36a0:	2700      	movs	r7, #0
{
    36a2:	4605      	mov	r5, r0
    36a4:	460e      	mov	r6, r1
    36a6:	4692      	mov	sl, r2
    36a8:	461c      	mov	r4, r3
	int min_width = -1;
    36aa:	f04f 39ff 	mov.w	r9, #4294967295
	enum pad_type padding = PAD_NONE;
    36ae:	46b8      	mov	r8, r7
	int might_format = 0; /* 1 if encountered a '%' */
    36b0:	46bb      	mov	fp, r7
{
    36b2:	b089      	sub	sp, #36	; 0x24
	while (*fmt) {
    36b4:	f89a 0000 	ldrb.w	r0, [sl]
    36b8:	b910      	cbnz	r0, 36c0 <z_vprintk+0x24>
}
    36ba:	b009      	add	sp, #36	; 0x24
    36bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (!might_format) {
    36c0:	f1bb 0f00 	cmp.w	fp, #0
    36c4:	d107      	bne.n	36d6 <z_vprintk+0x3a>
			if (*fmt != '%') {
    36c6:	2825      	cmp	r0, #37	; 0x25
    36c8:	f000 814e 	beq.w	3968 <z_vprintk+0x2cc>
				out((int)*fmt, ctx);
    36cc:	4631      	mov	r1, r6
    36ce:	47a8      	blx	r5
		++fmt;
    36d0:	f10a 0a01 	add.w	sl, sl, #1
    36d4:	e7ee      	b.n	36b4 <z_vprintk+0x18>
			switch (*fmt) {
    36d6:	2864      	cmp	r0, #100	; 0x64
    36d8:	d068      	beq.n	37ac <z_vprintk+0x110>
    36da:	d81a      	bhi.n	3712 <z_vprintk+0x76>
    36dc:	2839      	cmp	r0, #57	; 0x39
    36de:	d80b      	bhi.n	36f8 <z_vprintk+0x5c>
    36e0:	2831      	cmp	r0, #49	; 0x31
    36e2:	d25a      	bcs.n	379a <z_vprintk+0xfe>
    36e4:	282d      	cmp	r0, #45	; 0x2d
    36e6:	f000 8146 	beq.w	3976 <z_vprintk+0x2da>
    36ea:	2830      	cmp	r0, #48	; 0x30
    36ec:	d046      	beq.n	377c <z_vprintk+0xe0>
    36ee:	2825      	cmp	r0, #37	; 0x25
    36f0:	d108      	bne.n	3704 <z_vprintk+0x68>
				out((int)'%', ctx);
    36f2:	4631      	mov	r1, r6
				out((int)*fmt, ctx);
    36f4:	47a8      	blx	r5
    36f6:	e07a      	b.n	37ee <z_vprintk+0x152>
			switch (*fmt) {
    36f8:	2858      	cmp	r0, #88	; 0x58
    36fa:	f000 80b4 	beq.w	3866 <z_vprintk+0x1ca>
    36fe:	2863      	cmp	r0, #99	; 0x63
    3700:	f000 812c 	beq.w	395c <z_vprintk+0x2c0>
				out((int)'%', ctx);
    3704:	4631      	mov	r1, r6
    3706:	2025      	movs	r0, #37	; 0x25
    3708:	47a8      	blx	r5
				out((int)*fmt, ctx);
    370a:	4631      	mov	r1, r6
    370c:	f89a 0000 	ldrb.w	r0, [sl]
    3710:	e7f0      	b.n	36f4 <z_vprintk+0x58>
			switch (*fmt) {
    3712:	2870      	cmp	r0, #112	; 0x70
    3714:	f000 809d 	beq.w	3852 <z_vprintk+0x1b6>
    3718:	d80d      	bhi.n	3736 <z_vprintk+0x9a>
    371a:	2869      	cmp	r0, #105	; 0x69
    371c:	d046      	beq.n	37ac <z_vprintk+0x110>
    371e:	286c      	cmp	r0, #108	; 0x6c
    3720:	d103      	bne.n	372a <z_vprintk+0x8e>
				} else if (*fmt == 'l' && length_mod == 'l') {
    3722:	2f6c      	cmp	r7, #108	; 0x6c
    3724:	d126      	bne.n	3774 <z_vprintk+0xd8>
					length_mod = 'L';
    3726:	274c      	movs	r7, #76	; 0x4c
    3728:	e7d2      	b.n	36d0 <z_vprintk+0x34>
			switch (*fmt) {
    372a:	2868      	cmp	r0, #104	; 0x68
    372c:	d1ea      	bne.n	3704 <z_vprintk+0x68>
				if (*fmt == 'h' && length_mod == 'h') {
    372e:	2f68      	cmp	r7, #104	; 0x68
    3730:	d120      	bne.n	3774 <z_vprintk+0xd8>
					length_mod = 'H';
    3732:	2748      	movs	r7, #72	; 0x48
    3734:	e7cc      	b.n	36d0 <z_vprintk+0x34>
			switch (*fmt) {
    3736:	2875      	cmp	r0, #117	; 0x75
    3738:	d070      	beq.n	381c <z_vprintk+0x180>
    373a:	d817      	bhi.n	376c <z_vprintk+0xd0>
    373c:	2873      	cmp	r0, #115	; 0x73
    373e:	d1e1      	bne.n	3704 <z_vprintk+0x68>
				char *s = va_arg(ap, char *);
    3740:	6822      	ldr	r2, [r4, #0]
    3742:	f104 0b04 	add.w	fp, r4, #4
    3746:	4611      	mov	r1, r2
				while (*s) {
    3748:	460c      	mov	r4, r1
    374a:	f814 0b01 	ldrb.w	r0, [r4], #1
    374e:	2800      	cmp	r0, #0
    3750:	f040 80f9 	bne.w	3946 <z_vprintk+0x2aa>
				if (padding == PAD_SPACE_AFTER) {
    3754:	f1b8 0f03 	cmp.w	r8, #3
    3758:	f040 8113 	bne.w	3982 <z_vprintk+0x2e6>
					int remaining = min_width - (s - start);
    375c:	1a8c      	subs	r4, r1, r2
    375e:	eba9 0404 	sub.w	r4, r9, r4
					while (remaining-- > 0) {
    3762:	2c00      	cmp	r4, #0
    3764:	f300 80f5 	bgt.w	3952 <z_vprintk+0x2b6>
				int c = va_arg(ap, int);
    3768:	465c      	mov	r4, fp
    376a:	e040      	b.n	37ee <z_vprintk+0x152>
			switch (*fmt) {
    376c:	2878      	cmp	r0, #120	; 0x78
    376e:	d07a      	beq.n	3866 <z_vprintk+0x1ca>
    3770:	287a      	cmp	r0, #122	; 0x7a
    3772:	d1c7      	bne.n	3704 <z_vprintk+0x68>
				} else if (length_mod == 0) {
    3774:	2f00      	cmp	r7, #0
    3776:	d1c5      	bne.n	3704 <z_vprintk+0x68>
    3778:	4607      	mov	r7, r0
    377a:	e7a9      	b.n	36d0 <z_vprintk+0x34>
				if (min_width < 0 && padding == PAD_NONE) {
    377c:	f1b9 0f00 	cmp.w	r9, #0
    3780:	da0e      	bge.n	37a0 <z_vprintk+0x104>
    3782:	f1b8 0f00 	cmp.w	r8, #0
    3786:	f000 80f9 	beq.w	397c <z_vprintk+0x2e0>
					min_width = *fmt - '0';
    378a:	f1a0 0930 	sub.w	r9, r0, #48	; 0x30
					padding = PAD_SPACE_BEFORE;
    378e:	f1b8 0f00 	cmp.w	r8, #0
    3792:	bf08      	it	eq
    3794:	f04f 0802 	moveq.w	r8, #2
    3798:	e79a      	b.n	36d0 <z_vprintk+0x34>
				if (min_width < 0) {
    379a:	f1b9 0f00 	cmp.w	r9, #0
    379e:	dbf4      	blt.n	378a <z_vprintk+0xee>
					min_width = 10 * min_width + *fmt - '0';
    37a0:	220a      	movs	r2, #10
    37a2:	fb02 0909 	mla	r9, r2, r9, r0
    37a6:	f1a9 0930 	sub.w	r9, r9, #48	; 0x30
    37aa:	e7f0      	b.n	378e <z_vprintk+0xf2>
				if (length_mod == 'z') {
    37ac:	2f7a      	cmp	r7, #122	; 0x7a
    37ae:	d103      	bne.n	37b8 <z_vprintk+0x11c>
					d = va_arg(ap, int);
    37b0:	f8d4 b000 	ldr.w	fp, [r4]
    37b4:	3404      	adds	r4, #4
    37b6:	e01e      	b.n	37f6 <z_vprintk+0x15a>
				} else if (length_mod == 'l') {
    37b8:	2f6c      	cmp	r7, #108	; 0x6c
    37ba:	d0f9      	beq.n	37b0 <z_vprintk+0x114>
				} else if (length_mod == 'L') {
    37bc:	2f4c      	cmp	r7, #76	; 0x4c
    37be:	d1f7      	bne.n	37b0 <z_vprintk+0x114>
					if (lld > __LONG_MAX__ ||
    37c0:	f04f 0c00 	mov.w	ip, #0
    37c4:	f04f 3bff 	mov.w	fp, #4294967295
					long long lld = va_arg(ap, long long);
    37c8:	3407      	adds	r4, #7
    37ca:	f024 0307 	bic.w	r3, r4, #7
    37ce:	f103 0408 	add.w	r4, r3, #8
    37d2:	e9d3 2300 	ldrd	r2, r3, [r3]
					if (lld > __LONG_MAX__ ||
    37d6:	f112 4000 	adds.w	r0, r2, #2147483648	; 0x80000000
    37da:	f143 0100 	adc.w	r1, r3, #0
    37de:	458c      	cmp	ip, r1
    37e0:	bf08      	it	eq
    37e2:	4583      	cmpeq	fp, r0
    37e4:	d206      	bcs.n	37f4 <z_vprintk+0x158>
						print_err(out, ctx);
    37e6:	4631      	mov	r1, r6
    37e8:	4628      	mov	r0, r5
    37ea:	f7ff ff49 	bl	3680 <print_err>
			might_format = 0;
    37ee:	f04f 0b00 	mov.w	fp, #0
				break;
    37f2:	e76d      	b.n	36d0 <z_vprintk+0x34>
					d = lld;
    37f4:	4693      	mov	fp, r2
				if (d < 0) {
    37f6:	f1bb 0f00 	cmp.w	fp, #0
    37fa:	da06      	bge.n	380a <z_vprintk+0x16e>
					out((int)'-', ctx);
    37fc:	4631      	mov	r1, r6
    37fe:	202d      	movs	r0, #45	; 0x2d
    3800:	47a8      	blx	r5
					d = -d;
    3802:	f1cb 0b00 	rsb	fp, fp, #0
					min_width--;
    3806:	f109 39ff 	add.w	r9, r9, #4294967295
				_printk_dec_ulong(out, ctx, d, padding,
    380a:	4643      	mov	r3, r8
    380c:	465a      	mov	r2, fp
    380e:	f8cd 9000 	str.w	r9, [sp]
				_printk_dec_ulong(out, ctx, u, padding,
    3812:	4631      	mov	r1, r6
    3814:	4628      	mov	r0, r5
    3816:	f7fc ff71 	bl	6fc <_printk_dec_ulong>
    381a:	e7e8      	b.n	37ee <z_vprintk+0x152>
				if (length_mod == 'z') {
    381c:	2f7a      	cmp	r7, #122	; 0x7a
    381e:	d102      	bne.n	3826 <z_vprintk+0x18a>
					u = va_arg(ap, unsigned int);
    3820:	6822      	ldr	r2, [r4, #0]
    3822:	3404      	adds	r4, #4
    3824:	e011      	b.n	384a <z_vprintk+0x1ae>
				} else if (length_mod == 'l') {
    3826:	2f6c      	cmp	r7, #108	; 0x6c
    3828:	d0fa      	beq.n	3820 <z_vprintk+0x184>
				} else if (length_mod == 'L') {
    382a:	2f4c      	cmp	r7, #76	; 0x4c
    382c:	d1f8      	bne.n	3820 <z_vprintk+0x184>
					if (llu > ~0UL) {
    382e:	2100      	movs	r1, #0
    3830:	f04f 30ff 	mov.w	r0, #4294967295
					unsigned long long llu =
    3834:	3407      	adds	r4, #7
    3836:	f024 0307 	bic.w	r3, r4, #7
    383a:	f103 0408 	add.w	r4, r3, #8
    383e:	e9d3 2300 	ldrd	r2, r3, [r3]
					if (llu > ~0UL) {
    3842:	4299      	cmp	r1, r3
    3844:	bf08      	it	eq
    3846:	4290      	cmpeq	r0, r2
    3848:	d3cd      	bcc.n	37e6 <z_vprintk+0x14a>
				_printk_dec_ulong(out, ctx, u, padding,
    384a:	f8cd 9000 	str.w	r9, [sp]
    384e:	4643      	mov	r3, r8
    3850:	e7df      	b.n	3812 <z_vprintk+0x176>
				  out('0', ctx);
    3852:	4631      	mov	r1, r6
    3854:	2030      	movs	r0, #48	; 0x30
    3856:	47a8      	blx	r5
				  out('x', ctx);
    3858:	4631      	mov	r1, r6
    385a:	2078      	movs	r0, #120	; 0x78
    385c:	47a8      	blx	r5
				  min_width = 8;
    385e:	f04f 0908 	mov.w	r9, #8
				  padding = PAD_ZERO_BEFORE;
    3862:	f04f 0801 	mov.w	r8, #1
				if (*fmt == 'p') {
    3866:	f89a 2000 	ldrb.w	r2, [sl]
    386a:	2a70      	cmp	r2, #112	; 0x70
    386c:	d105      	bne.n	387a <z_vprintk+0x1de>
					x = va_arg(ap, unsigned int);
    386e:	6823      	ldr	r3, [r4, #0]
    3870:	3404      	adds	r4, #4
    3872:	9304      	str	r3, [sp, #16]
    3874:	2300      	movs	r3, #0
    3876:	9302      	str	r3, [sp, #8]
    3878:	e00c      	b.n	3894 <z_vprintk+0x1f8>
				} else if (length_mod == 'l') {
    387a:	2f6c      	cmp	r7, #108	; 0x6c
    387c:	d0f7      	beq.n	386e <z_vprintk+0x1d2>
				} else if (length_mod == 'L') {
    387e:	2f4c      	cmp	r7, #76	; 0x4c
    3880:	d1f5      	bne.n	386e <z_vprintk+0x1d2>
					x = va_arg(ap, unsigned long long);
    3882:	3407      	adds	r4, #7
    3884:	f024 0207 	bic.w	r2, r4, #7
    3888:	6813      	ldr	r3, [r2, #0]
    388a:	f102 0408 	add.w	r4, r2, #8
    388e:	9304      	str	r3, [sp, #16]
    3890:	6853      	ldr	r3, [r2, #4]
    3892:	9302      	str	r3, [sp, #8]
	int digits = 0;
    3894:	2200      	movs	r2, #0
	int remaining = 16; /* 16 digits max */
    3896:	2310      	movs	r3, #16
	int digits = 0;
    3898:	9203      	str	r2, [sp, #12]
	int found_largest_digit = 0;
    389a:	9205      	str	r2, [sp, #20]
	int shift = sizeof(num) * 8;
    389c:	2240      	movs	r2, #64	; 0x40
		shift -= 4;
    389e:	3a04      	subs	r2, #4
		nibble = (num >> shift) & 0xf;
    38a0:	9902      	ldr	r1, [sp, #8]
    38a2:	9804      	ldr	r0, [sp, #16]
    38a4:	f1c2 0c20 	rsb	ip, r2, #32
    38a8:	f1a2 0e20 	sub.w	lr, r2, #32
    38ac:	40d0      	lsrs	r0, r2
    38ae:	fa01 fc0c 	lsl.w	ip, r1, ip
    38b2:	ea40 000c 	orr.w	r0, r0, ip
    38b6:	fa21 fe0e 	lsr.w	lr, r1, lr
    38ba:	ea40 000e 	orr.w	r0, r0, lr
		if (nibble != 0 || found_largest_digit != 0 || shift == 0) {
    38be:	f010 000f 	ands.w	r0, r0, #15
    38c2:	d108      	bne.n	38d6 <z_vprintk+0x23a>
    38c4:	9905      	ldr	r1, [sp, #20]
    38c6:	b901      	cbnz	r1, 38ca <z_vprintk+0x22e>
    38c8:	bb42      	cbnz	r2, 391c <z_vprintk+0x280>
			nibble += nibble > 9 ? 87 : 48;
    38ca:	f04f 0c30 	mov.w	ip, #48	; 0x30
    38ce:	e008      	b.n	38e2 <z_vprintk+0x246>
			found_largest_digit = 1;
    38d0:	f8cd b014 	str.w	fp, [sp, #20]
    38d4:	e7e3      	b.n	389e <z_vprintk+0x202>
			nibble += nibble > 9 ? 87 : 48;
    38d6:	2809      	cmp	r0, #9
    38d8:	bf8c      	ite	hi
    38da:	f04f 0c57 	movhi.w	ip, #87	; 0x57
    38de:	f04f 0c30 	movls.w	ip, #48	; 0x30
			out((int)nibble, ctx);
    38e2:	4631      	mov	r1, r6
    38e4:	4460      	add	r0, ip
    38e6:	e9cd 2305 	strd	r2, r3, [sp, #20]
    38ea:	47a8      	blx	r5
			digits++;
    38ec:	9b03      	ldr	r3, [sp, #12]
    38ee:	3301      	adds	r3, #1
    38f0:	9303      	str	r3, [sp, #12]
	while (shift >= 4) {
    38f2:	e9dd 2305 	ldrd	r2, r3, [sp, #20]
    38f6:	2a00      	cmp	r2, #0
    38f8:	d1ea      	bne.n	38d0 <z_vprintk+0x234>
	if (padding == PAD_SPACE_AFTER) {
    38fa:	f1b8 0f03 	cmp.w	r8, #3
    38fe:	f47f af76 	bne.w	37ee <z_vprintk+0x152>
		remaining = min_width * 2 - digits;
    3902:	9b03      	ldr	r3, [sp, #12]
    3904:	ebc3 0b49 	rsb	fp, r3, r9, lsl #1
		while (remaining-- > 0) {
    3908:	f1bb 0f00 	cmp.w	fp, #0
    390c:	f77f af6f 	ble.w	37ee <z_vprintk+0x152>
			out(' ', ctx);
    3910:	4631      	mov	r1, r6
    3912:	2020      	movs	r0, #32
    3914:	47a8      	blx	r5
    3916:	f10b 3bff 	add.w	fp, fp, #4294967295
    391a:	e7f5      	b.n	3908 <z_vprintk+0x26c>
		if (remaining-- <= min_width) {
    391c:	1e59      	subs	r1, r3, #1
    391e:	4599      	cmp	r9, r3
    3920:	9106      	str	r1, [sp, #24]
    3922:	db07      	blt.n	3934 <z_vprintk+0x298>
			if (padding == PAD_ZERO_BEFORE) {
    3924:	f1b8 0f01 	cmp.w	r8, #1
    3928:	d106      	bne.n	3938 <z_vprintk+0x29c>
				out('0', ctx);
    392a:	4631      	mov	r1, r6
    392c:	2030      	movs	r0, #48	; 0x30
    392e:	9207      	str	r2, [sp, #28]
				out(' ', ctx);
    3930:	47a8      	blx	r5
    3932:	9a07      	ldr	r2, [sp, #28]
					x = va_arg(ap, unsigned int);
    3934:	9b06      	ldr	r3, [sp, #24]
    3936:	e7b2      	b.n	389e <z_vprintk+0x202>
			} else if (padding == PAD_SPACE_BEFORE) {
    3938:	f1b8 0f02 	cmp.w	r8, #2
    393c:	d1fa      	bne.n	3934 <z_vprintk+0x298>
    393e:	9207      	str	r2, [sp, #28]
				out(' ', ctx);
    3940:	4631      	mov	r1, r6
    3942:	2020      	movs	r0, #32
    3944:	e7f4      	b.n	3930 <z_vprintk+0x294>
					out((int)(*s++), ctx);
    3946:	4631      	mov	r1, r6
    3948:	9202      	str	r2, [sp, #8]
    394a:	47a8      	blx	r5
    394c:	4621      	mov	r1, r4
    394e:	9a02      	ldr	r2, [sp, #8]
    3950:	e6fa      	b.n	3748 <z_vprintk+0xac>
						out(' ', ctx);
    3952:	4631      	mov	r1, r6
    3954:	2020      	movs	r0, #32
    3956:	47a8      	blx	r5
    3958:	3c01      	subs	r4, #1
    395a:	e702      	b.n	3762 <z_vprintk+0xc6>
				out(c, ctx);
    395c:	4631      	mov	r1, r6
    395e:	6820      	ldr	r0, [r4, #0]
				int c = va_arg(ap, int);
    3960:	f104 0b04 	add.w	fp, r4, #4
				out(c, ctx);
    3964:	47a8      	blx	r5
    3966:	e6ff      	b.n	3768 <z_vprintk+0xcc>
				length_mod = 0;
    3968:	465f      	mov	r7, fp
				padding = PAD_NONE;
    396a:	46d8      	mov	r8, fp
				min_width = -1;
    396c:	f04f 39ff 	mov.w	r9, #4294967295
				might_format = 1;
    3970:	f04f 0b01 	mov.w	fp, #1
    3974:	e6ac      	b.n	36d0 <z_vprintk+0x34>
				padding = PAD_SPACE_AFTER;
    3976:	f04f 0803 	mov.w	r8, #3
    397a:	e6a9      	b.n	36d0 <z_vprintk+0x34>
					padding = PAD_ZERO_BEFORE;
    397c:	f04f 0801 	mov.w	r8, #1
    3980:	e6a6      	b.n	36d0 <z_vprintk+0x34>
				char *s = va_arg(ap, char *);
    3982:	465c      	mov	r4, fp
			might_format = 0;
    3984:	4683      	mov	fp, r0
    3986:	e6a3      	b.n	36d0 <z_vprintk+0x34>

00003988 <printk>:
{
    3988:	b40f      	push	{r0, r1, r2, r3}
    398a:	b507      	push	{r0, r1, r2, lr}
    398c:	a904      	add	r1, sp, #16
    398e:	f851 0b04 	ldr.w	r0, [r1], #4
	va_start(ap, fmt);
    3992:	9101      	str	r1, [sp, #4]
		vprintk(fmt, ap);
    3994:	f7fc ff04 	bl	7a0 <vprintk>
}
    3998:	b003      	add	sp, #12
    399a:	f85d eb04 	ldr.w	lr, [sp], #4
    399e:	b004      	add	sp, #16
    39a0:	4770      	bx	lr

000039a2 <_ConfigAbsSyms>:
GEN_ABSOLUTE_SYM(CONFIG_OUTPUT_DISASSEMBLY, 1);
GEN_ABSOLUTE_SYM(CONFIG_OUTPUT_PRINT_MEMORY_USAGE, 1);
GEN_ABSOLUTE_SYM(CONFIG_BUILD_OUTPUT_BIN, 1);
GEN_ABSOLUTE_SYM(CONFIG_COMPAT_INCLUDES, 1);

GEN_ABS_SYM_END
    39a2:	4770      	bx	lr

000039a4 <z_platform_init>:
	nrfx_coredep_delay_us(time_us);
}

void z_platform_init(void)
{
	SystemInit();
    39a4:	f7fe b870 	b.w	1a88 <SystemInit>

000039a8 <get_status>:
	struct nrf_clock_control *data = dev->driver_data;
    39a8:	6883      	ldr	r3, [r0, #8]
	if (data->started) {
    39aa:	7a5a      	ldrb	r2, [r3, #9]
    39ac:	b932      	cbnz	r2, 39bc <get_status+0x14>
	if (data->ref > 0) {
    39ae:	f993 0008 	ldrsb.w	r0, [r3, #8]
		return CLOCK_CONTROL_STATUS_ON;
    39b2:	2800      	cmp	r0, #0
    39b4:	bfcc      	ite	gt
    39b6:	2000      	movgt	r0, #0
    39b8:	2001      	movle	r0, #1
    39ba:	4770      	bx	lr
    39bc:	2002      	movs	r0, #2
}
    39be:	4770      	bx	lr

000039c0 <clock_stop>:
	const struct nrf_clock_control_config *config =
    39c0:	6802      	ldr	r2, [r0, #0]
{
    39c2:	b570      	push	{r4, r5, r6, lr}
	const struct nrf_clock_control_config *config =
    39c4:	6895      	ldr	r5, [r2, #8]
	struct nrf_clock_control *data = dev->driver_data;
    39c6:	6884      	ldr	r4, [r0, #8]
    39c8:	f04f 0320 	mov.w	r3, #32
    39cc:	f3ef 8611 	mrs	r6, BASEPRI
    39d0:	f383 8811 	msr	BASEPRI, r3
    39d4:	f3bf 8f6f 	isb	sy
	data->ref--;
    39d8:	7a23      	ldrb	r3, [r4, #8]
    39da:	3b01      	subs	r3, #1
    39dc:	b25b      	sxtb	r3, r3
	if (data->ref == 0) {
    39de:	2b00      	cmp	r3, #0
	data->ref--;
    39e0:	7223      	strb	r3, [r4, #8]
	if (data->ref == 0) {
    39e2:	d118      	bne.n	3a16 <clock_stop+0x56>
 * @param list A pointer on the list to initialize
 */
static inline void sys_slist_init(sys_slist_t *list)
{
	list->head = NULL;
	list->tail = NULL;
    39e4:	e9c4 3300 	strd	r3, r3, [r4]
		do_stop =  (config->stop_handler) ?
    39e8:	686b      	ldr	r3, [r5, #4]
				config->stop_handler(dev) : true;
    39ea:	b983      	cbnz	r3, 3a0e <clock_stop+0x4e>
    *((volatile uint32_t *)((uint8_t *)NRF_CLOCK + task)) = 0x1UL;
    39ec:	2201      	movs	r2, #1
    39ee:	7aeb      	ldrb	r3, [r5, #11]
    39f0:	f103 2350 	add.w	r3, r3, #1342197760	; 0x50005000
    39f4:	601a      	str	r2, [r3, #0]
    *((volatile uint32_t *)((uint8_t *)NRF_CLOCK + event)) = 0x0UL;
    39f6:	2200      	movs	r2, #0
    39f8:	892b      	ldrh	r3, [r5, #8]
    39fa:	f103 2350 	add.w	r3, r3, #1342197760	; 0x50005000
    39fe:	601a      	str	r2, [r3, #0]
		data->started = false;
    3a00:	2000      	movs	r0, #0
    3a02:	7260      	strb	r0, [r4, #9]
	__asm__ volatile(
    3a04:	f386 8811 	msr	BASEPRI, r6
    3a08:	f3bf 8f6f 	isb	sy
}
    3a0c:	bd70      	pop	{r4, r5, r6, pc}
				config->stop_handler(dev) : true;
    3a0e:	4798      	blx	r3
    3a10:	2800      	cmp	r0, #0
    3a12:	d1eb      	bne.n	39ec <clock_stop+0x2c>
    3a14:	e7f4      	b.n	3a00 <clock_stop+0x40>
    3a16:	f04f 0000 	mov.w	r0, #0
		data->ref = 0;
    3a1a:	bfbc      	itt	lt
    3a1c:	7220      	strblt	r0, [r4, #8]
		err = -EALREADY;
    3a1e:	f06f 0044 	mvnlt.w	r0, #68	; 0x44
    3a22:	e7ef      	b.n	3a04 <clock_stop+0x44>

00003a24 <clock_async_start>:
{
    3a24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	const struct nrf_clock_control_config *config =
    3a26:	6803      	ldr	r3, [r0, #0]
{
    3a28:	4606      	mov	r6, r0
    3a2a:	4614      	mov	r4, r2
	const struct nrf_clock_control_config *config =
    3a2c:	689f      	ldr	r7, [r3, #8]
	struct nrf_clock_control *clk_data = dev->driver_data;
    3a2e:	6885      	ldr	r5, [r0, #8]
	__asm__ volatile(
    3a30:	f04f 0320 	mov.w	r3, #32
    3a34:	f3ef 8211 	mrs	r2, BASEPRI
    3a38:	f383 8811 	msr	BASEPRI, r3
    3a3c:	f3bf 8f6f 	isb	sy
	ref = ++clk_data->ref;
    3a40:	7a2b      	ldrb	r3, [r5, #8]
    3a42:	3301      	adds	r3, #1
    3a44:	b25b      	sxtb	r3, r3
    3a46:	722b      	strb	r3, [r5, #8]
	__asm__ volatile(
    3a48:	f382 8811 	msr	BASEPRI, r2
    3a4c:	f3bf 8f6f 	isb	sy
	if (clk_data->started) {
    3a50:	7a6a      	ldrb	r2, [r5, #9]
    3a52:	b132      	cbz	r2, 3a62 <clock_async_start+0x3e>
		if (data) {
    3a54:	b90c      	cbnz	r4, 3a5a <clock_async_start+0x36>
	return 0;
    3a56:	2000      	movs	r0, #0
}
    3a58:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			data->cb(dev, data->user_data);
    3a5a:	e9d4 3101 	ldrd	r3, r1, [r4, #4]
    3a5e:	4798      	blx	r3
    3a60:	e7f9      	b.n	3a56 <clock_async_start+0x32>
		if (ref == 1) {
    3a62:	2b01      	cmp	r3, #1
    3a64:	d106      	bne.n	3a74 <clock_async_start+0x50>
			do_start =  (config->start_handler) ?
    3a66:	683b      	ldr	r3, [r7, #0]
					config->start_handler(dev) : true;
    3a68:	b933      	cbnz	r3, 3a78 <clock_async_start+0x54>
    *((volatile uint32_t *)((uint8_t *)NRF_CLOCK + task)) = 0x1UL;
    3a6a:	2201      	movs	r2, #1
    3a6c:	7abb      	ldrb	r3, [r7, #10]
    3a6e:	f103 2350 	add.w	r3, r3, #1342197760	; 0x50005000
    3a72:	601a      	str	r2, [r3, #0]
		if (data) {
    3a74:	b94c      	cbnz	r4, 3a8a <clock_async_start+0x66>
    3a76:	e7ee      	b.n	3a56 <clock_async_start+0x32>
					config->start_handler(dev) : true;
    3a78:	4798      	blx	r3
    3a7a:	2800      	cmp	r0, #0
    3a7c:	d1f5      	bne.n	3a6a <clock_async_start+0x46>
			} else if (data) {
    3a7e:	2c00      	cmp	r4, #0
    3a80:	d0e9      	beq.n	3a56 <clock_async_start+0x32>
				data->cb(dev, data->user_data);
    3a82:	e9d4 3101 	ldrd	r3, r1, [r4, #4]
    3a86:	4630      	mov	r0, r6
    3a88:	4798      	blx	r3
	sys_snode_t *item = sys_slist_peek_head(list);
    3a8a:	682b      	ldr	r3, [r5, #0]
		if (item == node) {
    3a8c:	429c      	cmp	r4, r3
    3a8e:	d00d      	beq.n	3aac <clock_async_start+0x88>
 *
 * @return a pointer on the next node (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_next(sys_snode_t *node);

Z_GENLIST_PEEK_NEXT(slist, snode)
    3a90:	b113      	cbz	r3, 3a98 <clock_async_start+0x74>
	return node->next;
    3a92:	681b      	ldr	r3, [r3, #0]
	} while (item);
    3a94:	2b00      	cmp	r3, #0
    3a96:	d1f9      	bne.n	3a8c <clock_async_start+0x68>
	parent->next = child;
    3a98:	2000      	movs	r0, #0
    3a9a:	6020      	str	r0, [r4, #0]
 * @param node A pointer on the node to append
 */
static inline void sys_slist_append(sys_slist_t *list,
				    sys_snode_t *node);

Z_GENLIST_APPEND(slist, snode)
    3a9c:	686b      	ldr	r3, [r5, #4]
    3a9e:	b913      	cbnz	r3, 3aa6 <clock_async_start+0x82>
	list->head = node;
    3aa0:	e9c5 4400 	strd	r4, r4, [r5]
    3aa4:	e7d7      	b.n	3a56 <clock_async_start+0x32>
	parent->next = child;
    3aa6:	601c      	str	r4, [r3, #0]
	list->tail = node;
    3aa8:	606c      	str	r4, [r5, #4]
    3aaa:	e7d5      	b.n	3a58 <clock_async_start+0x34>
				return -EALREADY;
    3aac:	f06f 0044 	mvn.w	r0, #68	; 0x44
    3ab0:	e7d2      	b.n	3a58 <clock_async_start+0x34>

00003ab2 <clock_start>:
	return clock_async_start(dev, sub_system, NULL);
    3ab2:	2200      	movs	r2, #0
    3ab4:	f7ff bfb6 	b.w	3a24 <clock_async_start>

00003ab8 <lfclk_init>:
	sys_slist_init(&((struct nrf_clock_control *)dev->driver_data)->list);
    3ab8:	6883      	ldr	r3, [r0, #8]
	list->head = NULL;
    3aba:	2000      	movs	r0, #0
	list->tail = NULL;
    3abc:	e9c3 0000 	strd	r0, r0, [r3]
}
    3ac0:	4770      	bx	lr

00003ac2 <hfclk_init>:
{
    3ac2:	b510      	push	{r4, lr}
	IRQ_CONNECT(DT_INST_0_NORDIC_NRF_CLOCK_IRQ_0,
    3ac4:	2200      	movs	r2, #0
{
    3ac6:	4604      	mov	r4, r0
	IRQ_CONNECT(DT_INST_0_NORDIC_NRF_CLOCK_IRQ_0,
    3ac8:	2101      	movs	r1, #1
    3aca:	2005      	movs	r0, #5
    3acc:	f7fd fb74 	bl	11b8 <z_arm_irq_priority_set>
	irq_enable(DT_INST_0_NORDIC_NRF_CLOCK_IRQ_0);
    3ad0:	2005      	movs	r0, #5
    3ad2:	f7fd fb61 	bl	1198 <z_arch_irq_enable>
}

__STATIC_INLINE void nrf_clock_lf_src_set(nrf_clock_lfclk_t source)
{
    NRF_CLOCK->LFCLKSRC = (uint32_t)(source);
    3ad6:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    3ada:	2202      	movs	r2, #2
    3adc:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    NRF_CLOCK->INTENSET = int_mask;
    3ae0:	2203      	movs	r2, #3
	list->head = NULL;
    3ae2:	2000      	movs	r0, #0
    3ae4:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
	sys_slist_init(&((struct nrf_clock_control *)dev->driver_data)->list);
    3ae8:	68a3      	ldr	r3, [r4, #8]
	list->tail = NULL;
    3aea:	e9c3 0000 	strd	r0, r0, [r3]
}
    3aee:	bd10      	pop	{r4, pc}

00003af0 <clkstarted_handle>:
{
    3af0:	b538      	push	{r3, r4, r5, lr}
	struct nrf_clock_control *data = dev->driver_data;
    3af2:	6884      	ldr	r4, [r0, #8]
{
    3af4:	4605      	mov	r5, r0
Z_GENLIST_IS_EMPTY(slist)
    3af6:	6823      	ldr	r3, [r4, #0]
 *
 * @return A pointer to the first node of the list (or NULL if empty)
 */
static inline sys_snode_t *sys_slist_get(sys_slist_t *list);

Z_GENLIST_GET(slist, snode)
    3af8:	b12b      	cbz	r3, 3b06 <clkstarted_handle+0x16>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
    3afa:	6861      	ldr	r1, [r4, #4]
	return node->next;
    3afc:	681a      	ldr	r2, [r3, #0]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
    3afe:	428b      	cmp	r3, r1
	list->head = node;
    3b00:	6022      	str	r2, [r4, #0]
	list->tail = node;
    3b02:	bf08      	it	eq
    3b04:	6062      	streq	r2, [r4, #4]
	data->started = true;
    3b06:	2201      	movs	r2, #1
    3b08:	7262      	strb	r2, [r4, #9]
	while (node != NULL) {
    3b0a:	b903      	cbnz	r3, 3b0e <clkstarted_handle+0x1e>
}
    3b0c:	bd38      	pop	{r3, r4, r5, pc}
		async_data->cb(dev, async_data->user_data);
    3b0e:	e9d3 2101 	ldrd	r2, r1, [r3, #4]
    3b12:	4628      	mov	r0, r5
    3b14:	4790      	blx	r2
Z_GENLIST_IS_EMPTY(slist)
    3b16:	6823      	ldr	r3, [r4, #0]
Z_GENLIST_GET(slist, snode)
    3b18:	2b00      	cmp	r3, #0
    3b1a:	d0f7      	beq.n	3b0c <clkstarted_handle+0x1c>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
    3b1c:	6861      	ldr	r1, [r4, #4]
	return node->next;
    3b1e:	681a      	ldr	r2, [r3, #0]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
    3b20:	428b      	cmp	r3, r1
	list->head = node;
    3b22:	6022      	str	r2, [r4, #0]
	list->tail = node;
    3b24:	bf08      	it	eq
    3b26:	6062      	streq	r2, [r4, #4]
    3b28:	e7ef      	b.n	3b0a <clkstarted_handle+0x1a>

00003b2a <z_clock_isr>:
/* Weak-linked noop defaults for optional driver interfaces: */

void __weak z_clock_isr(void *arg)
{
	__ASSERT_NO_MSG(false);
}
    3b2a:	4770      	bx	lr

00003b2c <z_clock_idle_exit>:
{
}

void __weak z_clock_idle_exit(void)
{
}
    3b2c:	4770      	bx	lr

00003b2e <spm_secure_services_init>:
	mbedtls_platform_context platform_ctx = {0};
    3b2e:	2300      	movs	r3, #0
{
    3b30:	b507      	push	{r0, r1, r2, lr}
	mbedtls_platform_context platform_ctx = {0};
    3b32:	a802      	add	r0, sp, #8
    3b34:	f800 3d04 	strb.w	r3, [r0, #-4]!
	err = mbedtls_platform_setup(&platform_ctx);
    3b38:	f7fe ff62 	bl	2a00 <mbedtls_platform_setup>
}
    3b3c:	b003      	add	sp, #12
    3b3e:	f85d fb04 	ldr.w	pc, [sp], #4

00003b42 <__acle_se_spm_request_random_number>:
	if (len != MBEDTLS_ENTROPY_MAX_GATHER) {
    3b42:	2990      	cmp	r1, #144	; 0x90
{
    3b44:	b508      	push	{r3, lr}
    3b46:	4613      	mov	r3, r2
	if (len != MBEDTLS_ENTROPY_MAX_GATHER) {
    3b48:	d139      	bne.n	3bbe <__acle_se_spm_request_random_number+0x7c>
	err = mbedtls_hardware_poll(NULL, output, len, olen);
    3b4a:	460a      	mov	r2, r1
    3b4c:	4601      	mov	r1, r0
    3b4e:	2000      	movs	r0, #0
    3b50:	f7fe ff62 	bl	2a18 <mbedtls_hardware_poll>
}
    3b54:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    3b58:	4671      	mov	r1, lr
    3b5a:	4672      	mov	r2, lr
    3b5c:	4673      	mov	r3, lr
    3b5e:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
    3b62:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
    3b66:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
    3b6a:	eef7 1a00 	vmov.f32	s3, #112	; 0x3f800000  1.0
    3b6e:	eeb7 2a00 	vmov.f32	s4, #112	; 0x3f800000  1.0
    3b72:	eef7 2a00 	vmov.f32	s5, #112	; 0x3f800000  1.0
    3b76:	eeb7 3a00 	vmov.f32	s6, #112	; 0x3f800000  1.0
    3b7a:	eef7 3a00 	vmov.f32	s7, #112	; 0x3f800000  1.0
    3b7e:	eeb7 4a00 	vmov.f32	s8, #112	; 0x3f800000  1.0
    3b82:	eef7 4a00 	vmov.f32	s9, #112	; 0x3f800000  1.0
    3b86:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
    3b8a:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
    3b8e:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
    3b92:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
    3b96:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
    3b9a:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    3b9e:	f38e 8c00 	msr	CPSR_fs, lr
    3ba2:	b410      	push	{r4}
    3ba4:	eef1 ca10 	vmrs	ip, fpscr
    3ba8:	f64f 7460 	movw	r4, #65376	; 0xff60
    3bac:	f6c0 74ff 	movt	r4, #4095	; 0xfff
    3bb0:	ea0c 0c04 	and.w	ip, ip, r4
    3bb4:	eee1 ca10 	vmsr	fpscr, ip
    3bb8:	bc10      	pop	{r4}
    3bba:	46f4      	mov	ip, lr
    3bbc:	4774      	bxns	lr
		return -EINVAL;
    3bbe:	f06f 0015 	mvn.w	r0, #21
    3bc2:	e7c7      	b.n	3b54 <__acle_se_spm_request_random_number+0x12>

00003bc4 <abort_function>:
{
    3bc4:	e7fe      	b.n	3bc4 <abort_function>

00003bc6 <z_irq_spurious>:
 * @return N/A
 */
void z_irq_spurious(void *unused)
{
	ARG_UNUSED(unused);
	z_arm_reserved();
    3bc6:	f7fd ba97 	b.w	10f8 <z_arm_bus_fault>

00003bca <irq_target_state_set>:
 * @param secure_state 1 if target state is Secure, 0 otherwise.
 *
 * @return N/A
 */
void irq_target_state_set(unsigned int irq, int secure_state)
{
    3bca:	b243      	sxtb	r3, r0
	if (secure_state) {
    3bcc:	b1a9      	cbz	r1, 3bfa <irq_target_state_set+0x30>
  if ((int32_t)(IRQn) >= 0)
    3bce:	2b00      	cmp	r3, #0
    3bd0:	db12      	blt.n	3bf8 <irq_target_state_set+0x2e>
    NVIC->ITNS[(((uint32_t)IRQn) >> 5UL)] &= ~((uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL)));
    3bd2:	2101      	movs	r1, #1
    3bd4:	095b      	lsrs	r3, r3, #5
    3bd6:	009b      	lsls	r3, r3, #2
    3bd8:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
    3bdc:	f503 4361 	add.w	r3, r3, #57600	; 0xe100
    3be0:	f8d3 2280 	ldr.w	r2, [r3, #640]	; 0x280
    3be4:	f000 001f 	and.w	r0, r0, #31
    3be8:	fa01 f000 	lsl.w	r0, r1, r0
    3bec:	ea22 0000 	bic.w	r0, r2, r0
    NVIC->ITNS[(((uint32_t)IRQn) >> 5UL)] |=  ((uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL)));
    3bf0:	f8c3 0280 	str.w	r0, [r3, #640]	; 0x280
    return((uint32_t)(((NVIC->ITNS[(((uint32_t)IRQn) >> 5UL)] & (1UL << (((uint32_t)IRQn) & 0x1FUL))) != 0UL) ? 1UL : 0UL));
    3bf4:	f8d3 3280 	ldr.w	r3, [r3, #640]	; 0x280
		/* Set target state to Non-Secure */
		if (NVIC_SetTargetState(irq) != 1) {
			__ASSERT(0, "NVIC SetTargetState error");
		}
	}
}
    3bf8:	4770      	bx	lr
  if ((int32_t)(IRQn) >= 0)
    3bfa:	2b00      	cmp	r3, #0
    3bfc:	dbfc      	blt.n	3bf8 <irq_target_state_set+0x2e>
    NVIC->ITNS[(((uint32_t)IRQn) >> 5UL)] |=  ((uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL)));
    3bfe:	2201      	movs	r2, #1
    3c00:	095b      	lsrs	r3, r3, #5
    3c02:	009b      	lsls	r3, r3, #2
    3c04:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
    3c08:	f503 4361 	add.w	r3, r3, #57600	; 0xe100
    3c0c:	f8d3 1280 	ldr.w	r1, [r3, #640]	; 0x280
    3c10:	f000 001f 	and.w	r0, r0, #31
    3c14:	fa02 f000 	lsl.w	r0, r2, r0
    3c18:	4308      	orrs	r0, r1
    3c1a:	e7e9      	b.n	3bf0 <irq_target_state_set+0x26>

00003c1c <z_arm_fatal_error>:
{

	if (esf != NULL) {
		esf_dump(esf);
	}
	z_fatal_error(reason, esf);
    3c1c:	f000 b8fb 	b.w	3e16 <z_fatal_error>

00003c20 <z_do_kernel_oops>:
}

void z_do_kernel_oops(const z_arch_esf_t *esf)
{
    3c20:	4601      	mov	r1, r0
	z_fatal_error(reason, esf);
    3c22:	6800      	ldr	r0, [r0, #0]
    3c24:	f000 b8f7 	b.w	3e16 <z_fatal_error>

00003c28 <z_arm_nmi>:
 *
 * @return N/A
 */

void z_arm_nmi(void)
{
    3c28:	b508      	push	{r3, lr}
	handler();
    3c2a:	f7fd fa77 	bl	111c <z_SysNmiOnReset>
	z_arm_exc_exit();
}
    3c2e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_arm_exc_exit();
    3c32:	f7fd ba0d 	b.w	1050 <z_arm_exc_exit>

00003c36 <z_arm_configure_dynamic_mpu_regions>:
 *
 * For some MPU architectures, such as the unmodified ARMv8-M MPU,
 * the function must execute with MPU enabled.
 */
void z_arm_configure_dynamic_mpu_regions(struct k_thread *thread)
{
    3c36:	b507      	push	{r0, r1, r2, lr}

	region_num++;
#endif /* CONFIG_MPU_STACK_GUARD */

	/* Configure the dynamic MPU regions */
	arm_core_mpu_configure_dynamic_mpu_regions(
    3c38:	2100      	movs	r1, #0
    3c3a:	a801      	add	r0, sp, #4
    3c3c:	f7fd fde6 	bl	180c <arm_core_mpu_configure_dynamic_mpu_regions>
		(const struct k_mem_partition **)dynamic_regions,
		region_num);
}
    3c40:	b003      	add	sp, #12
    3c42:	f85d fb04 	ldr.w	pc, [sp], #4

00003c46 <mpu_configure_region>:
{
    3c46:	b530      	push	{r4, r5, lr}
    3c48:	b085      	sub	sp, #20
	p_attr->rbar = attr->rbar &
    3c4a:	f89d 2008 	ldrb.w	r2, [sp, #8]
    3c4e:	890d      	ldrh	r5, [r1, #8]
	region_conf.base = new_region->start;
    3c50:	680b      	ldr	r3, [r1, #0]
	get_region_attr_from_k_mem_partition_info(&region_conf.attr,
    3c52:	684c      	ldr	r4, [r1, #4]
	p_attr->mair_idx = attr->mair_idx;
    3c54:	8949      	ldrh	r1, [r1, #10]
	p_attr->rbar = attr->rbar &
    3c56:	f365 0204 	bfi	r2, r5, #0, #5
	p_attr->mair_idx = attr->mair_idx;
    3c5a:	f361 1247 	bfi	r2, r1, #5, #3
	region_conf.base = new_region->start;
    3c5e:	9300      	str	r3, [sp, #0]
    3c60:	f88d 2008 	strb.w	r2, [sp, #8]
	p_attr->r_limit = REGION_LIMIT_ADDR(base, size);
    3c64:	f023 031f 	bic.w	r3, r3, #31
    3c68:	1e62      	subs	r2, r4, #1
    3c6a:	4413      	add	r3, r2
    3c6c:	f023 031f 	bic.w	r3, r3, #31
	if (index > (get_num_regions() - 1)) {
    3c70:	280f      	cmp	r0, #15
    3c72:	9303      	str	r3, [sp, #12]
    3c74:	4604      	mov	r4, r0
    3c76:	d805      	bhi.n	3c84 <mpu_configure_region+0x3e>
	region_init(index, region_conf);
    3c78:	4669      	mov	r1, sp
    3c7a:	f7fd fc81 	bl	1580 <region_init>
}
    3c7e:	4620      	mov	r0, r4
    3c80:	b005      	add	sp, #20
    3c82:	bd30      	pop	{r4, r5, pc}
		return -EINVAL;
    3c84:	f06f 0415 	mvn.w	r4, #21
	return region_allocate_and_init(index,
    3c88:	e7f9      	b.n	3c7e <mpu_configure_region+0x38>

00003c8a <strcmp>:
 *
 * @return negative # if <s1> < <s2>, 0 if <s1> == <s2>, else positive #
 */

int strcmp(const char *s1, const char *s2)
{
    3c8a:	3801      	subs	r0, #1
    3c8c:	3901      	subs	r1, #1
	while ((*s1 == *s2) && (*s1 != '\0')) {
    3c8e:	f810 3f01 	ldrb.w	r3, [r0, #1]!
    3c92:	f811 2f01 	ldrb.w	r2, [r1, #1]!
    3c96:	4293      	cmp	r3, r2
    3c98:	d102      	bne.n	3ca0 <strcmp+0x16>
    3c9a:	2b00      	cmp	r3, #0
    3c9c:	d1f7      	bne.n	3c8e <strcmp+0x4>
    3c9e:	461a      	mov	r2, r3
		s1++;
		s2++;
	}

	return *s1 - *s2;
}
    3ca0:	1a98      	subs	r0, r3, r2
    3ca2:	4770      	bx	lr

00003ca4 <memmove>:
void *memmove(void *d, const void *s, size_t n)
{
	char *dest = d;
	const char *src  = s;

	if ((size_t) (dest - src) < n) {
    3ca4:	1a43      	subs	r3, r0, r1
    3ca6:	4293      	cmp	r3, r2
{
    3ca8:	b510      	push	{r4, lr}
    3caa:	eb00 0302 	add.w	r3, r0, r2
	if ((size_t) (dest - src) < n) {
    3cae:	d308      	bcc.n	3cc2 <memmove+0x1e>
	char *dest = d;
    3cb0:	4602      	mov	r2, r0
    3cb2:	3901      	subs	r1, #1
			n--;
			dest[n] = src[n];
		}
	} else {
		/* It is safe to perform a forward-copy */
		while (n > 0) {
    3cb4:	429a      	cmp	r2, r3
    3cb6:	d00b      	beq.n	3cd0 <memmove+0x2c>
			*dest = *src;
    3cb8:	f811 4f01 	ldrb.w	r4, [r1, #1]!
    3cbc:	f802 4b01 	strb.w	r4, [r2], #1
    3cc0:	e7f8      	b.n	3cb4 <memmove+0x10>
    3cc2:	440a      	add	r2, r1
			dest[n] = src[n];
    3cc4:	f812 4d01 	ldrb.w	r4, [r2, #-1]!
		while (n > 0) {
    3cc8:	428a      	cmp	r2, r1
			dest[n] = src[n];
    3cca:	f803 4d01 	strb.w	r4, [r3, #-1]!
		while (n > 0) {
    3cce:	d1f9      	bne.n	3cc4 <memmove+0x20>
			n--;
		}
	}

	return d;
}
    3cd0:	bd10      	pop	{r4, pc}

00003cd2 <memcpy>:
 *
 * @return pointer to start of destination buffer
 */

void *memcpy(void *_MLIBC_RESTRICT d, const void *_MLIBC_RESTRICT s, size_t n)
{
    3cd2:	b5f0      	push	{r4, r5, r6, r7, lr}

	unsigned char *d_byte = (unsigned char *)d;
	const unsigned char *s_byte = (const unsigned char *)s;
	const uintptr_t mask = sizeof(mem_word_t) - 1;

	if ((((uintptr_t)d ^ (uintptr_t)s_byte) & mask) == 0) {
    3cd4:	ea81 0400 	eor.w	r4, r1, r0
    3cd8:	07a5      	lsls	r5, r4, #30
    3cda:	4603      	mov	r3, r0
    3cdc:	d00b      	beq.n	3cf6 <memcpy+0x24>
    3cde:	3b01      	subs	r3, #1
    3ce0:	440a      	add	r2, r1
		s_byte = (unsigned char *)s_word;
	}

	/* do byte-sized copying until finished */

	while (n > 0) {
    3ce2:	4291      	cmp	r1, r2
    3ce4:	d11d      	bne.n	3d22 <memcpy+0x50>
		*(d_byte++) = *(s_byte++);
		n--;
	}

	return d;
}
    3ce6:	bdf0      	pop	{r4, r5, r6, r7, pc}
			if (n == 0) {
    3ce8:	2a00      	cmp	r2, #0
    3cea:	d0fc      	beq.n	3ce6 <memcpy+0x14>
			*(d_byte++) = *(s_byte++);
    3cec:	f811 4b01 	ldrb.w	r4, [r1], #1
			n--;
    3cf0:	3a01      	subs	r2, #1
			*(d_byte++) = *(s_byte++);
    3cf2:	f803 4b01 	strb.w	r4, [r3], #1
		while (((uintptr_t)d_byte) & mask) {
    3cf6:	079c      	lsls	r4, r3, #30
    3cf8:	d1f6      	bne.n	3ce8 <memcpy+0x16>
    3cfa:	460c      	mov	r4, r1
    3cfc:	1f1d      	subs	r5, r3, #4
    3cfe:	188f      	adds	r7, r1, r2
		while (n >= sizeof(mem_word_t)) {
    3d00:	1b3e      	subs	r6, r7, r4
    3d02:	2e03      	cmp	r6, #3
    3d04:	d808      	bhi.n	3d18 <memcpy+0x46>
    3d06:	f06f 0503 	mvn.w	r5, #3
    3d0a:	0894      	lsrs	r4, r2, #2
    3d0c:	fb05 2204 	mla	r2, r5, r4, r2
    3d10:	00a4      	lsls	r4, r4, #2
    3d12:	4423      	add	r3, r4
    3d14:	4421      	add	r1, r4
    3d16:	e7e2      	b.n	3cde <memcpy+0xc>
			*(d_word++) = *(s_word++);
    3d18:	f854 6b04 	ldr.w	r6, [r4], #4
    3d1c:	f845 6f04 	str.w	r6, [r5, #4]!
    3d20:	e7ee      	b.n	3d00 <memcpy+0x2e>
		*(d_byte++) = *(s_byte++);
    3d22:	f811 4b01 	ldrb.w	r4, [r1], #1
    3d26:	f803 4f01 	strb.w	r4, [r3, #1]!
    3d2a:	e7da      	b.n	3ce2 <memcpy+0x10>

00003d2c <memset>:

void *memset(void *buf, int c, size_t n)
{
	/* do byte-sized initialization until word-aligned or finished */

	unsigned char *d_byte = (unsigned char *)buf;
    3d2c:	4603      	mov	r3, r0
{
    3d2e:	b5f0      	push	{r4, r5, r6, r7, lr}
	unsigned char c_byte = (unsigned char)c;
    3d30:	b2c9      	uxtb	r1, r1

	while (((uintptr_t)d_byte) & (sizeof(mem_word_t) - 1)) {
    3d32:	079c      	lsls	r4, r3, #30
    3d34:	d10f      	bne.n	3d56 <memset+0x2a>
	c_word |= c_word << 16;
#if Z_MEM_WORD_T_WIDTH > 32
	c_word |= c_word << 32;
#endif

	while (n >= sizeof(mem_word_t)) {
    3d36:	461d      	mov	r5, r3
	c_word |= c_word << 8;
    3d38:	ea41 2401 	orr.w	r4, r1, r1, lsl #8
	c_word |= c_word << 16;
    3d3c:	ea44 4404 	orr.w	r4, r4, r4, lsl #16
    3d40:	189f      	adds	r7, r3, r2
	while (n >= sizeof(mem_word_t)) {
    3d42:	1b7e      	subs	r6, r7, r5
    3d44:	2e03      	cmp	r6, #3
    3d46:	d80c      	bhi.n	3d62 <memset+0x36>
    3d48:	0894      	lsrs	r4, r2, #2
    3d4a:	eb03 0484 	add.w	r4, r3, r4, lsl #2
    3d4e:	4413      	add	r3, r2

	/* do byte-sized initialization until finished */

	d_byte = (unsigned char *)d_word;

	while (n > 0) {
    3d50:	429c      	cmp	r4, r3
    3d52:	d109      	bne.n	3d68 <memset+0x3c>
		*(d_byte++) = c_byte;
		n--;
	}

	return buf;
}
    3d54:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (n == 0) {
    3d56:	2a00      	cmp	r2, #0
    3d58:	d0fc      	beq.n	3d54 <memset+0x28>
		*(d_byte++) = c_byte;
    3d5a:	f803 1b01 	strb.w	r1, [r3], #1
		n--;
    3d5e:	3a01      	subs	r2, #1
    3d60:	e7e7      	b.n	3d32 <memset+0x6>
		*(d_word++) = c_word;
    3d62:	f845 4b04 	str.w	r4, [r5], #4
    3d66:	e7ec      	b.n	3d42 <memset+0x16>
		*(d_byte++) = c_byte;
    3d68:	f804 1b01 	strb.w	r1, [r4], #1
    3d6c:	e7f0      	b.n	3d50 <memset+0x24>

00003d6e <_stdout_hook_default>:
}
    3d6e:	f04f 30ff 	mov.w	r0, #4294967295
    3d72:	4770      	bx	lr

00003d74 <uarte_nrfx_config_get>:
{
    3d74:	460b      	mov	r3, r1
	*cfg = get_dev_data(dev)->uart_config;
    3d76:	6882      	ldr	r2, [r0, #8]
    3d78:	e892 0003 	ldmia.w	r2, {r0, r1}
    3d7c:	e883 0003 	stmia.w	r3, {r0, r1}
}
    3d80:	2000      	movs	r0, #0
    3d82:	4770      	bx	lr

00003d84 <uarte_nrfx_err_check>:
	return dev->config->config_info;
    3d84:	6803      	ldr	r3, [r0, #0]
	return config->uarte_regs;
    3d86:	689b      	ldr	r3, [r3, #8]
    3d88:	681b      	ldr	r3, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    3d8a:	f8d3 0124 	ldr.w	r0, [r3, #292]	; 0x124
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ERROR)) {
    3d8e:	b118      	cbz	r0, 3d98 <uarte_nrfx_err_check+0x14>
    uint32_t errsrc_mask = p_reg->ERRORSRC;
    3d90:	f8d3 0480 	ldr.w	r0, [r3, #1152]	; 0x480
    p_reg->ERRORSRC = errsrc_mask;
    3d94:	f8c3 0480 	str.w	r0, [r3, #1152]	; 0x480
}
    3d98:	4770      	bx	lr

00003d9a <uarte_nrfx_poll_in>:
	return dev->config->config_info;
    3d9a:	6803      	ldr	r3, [r0, #0]
	const struct uarte_nrfx_data *data = get_dev_data(dev);
    3d9c:	6882      	ldr	r2, [r0, #8]
	return config->uarte_regs;
    3d9e:	689b      	ldr	r3, [r3, #8]
    3da0:	681b      	ldr	r3, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    3da2:	f8d3 0110 	ldr.w	r0, [r3, #272]	; 0x110
	if (!nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
    3da6:	b138      	cbz	r0, 3db8 <uarte_nrfx_poll_in+0x1e>
	*c = data->rx_data;
    3da8:	7a12      	ldrb	r2, [r2, #8]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    3daa:	2000      	movs	r0, #0
    3dac:	700a      	strb	r2, [r1, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    3dae:	2201      	movs	r2, #1
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    3db0:	f8c3 0110 	str.w	r0, [r3, #272]	; 0x110
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    3db4:	601a      	str	r2, [r3, #0]
	return 0;
    3db6:	4770      	bx	lr
		return -1;
    3db8:	f04f 30ff 	mov.w	r0, #4294967295
}
    3dbc:	4770      	bx	lr

00003dbe <uarte_nrfx_poll_out>:
{
    3dbe:	b082      	sub	sp, #8
    3dc0:	aa02      	add	r2, sp, #8
    3dc2:	f802 1d01 	strb.w	r1, [r2, #-1]!
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    3dc6:	2100      	movs	r1, #0
	return dev->config->config_info;
    3dc8:	6803      	ldr	r3, [r0, #0]
	return config->uarte_regs;
    3dca:	689b      	ldr	r3, [r3, #8]
    3dcc:	681b      	ldr	r3, [r3, #0]
    3dce:	f8c3 1120 	str.w	r1, [r3, #288]	; 0x120
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
    3dd2:	f8c3 2544 	str.w	r2, [r3, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
    3dd6:	2201      	movs	r2, #1
    3dd8:	f8c3 2548 	str.w	r2, [r3, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    3ddc:	609a      	str	r2, [r3, #8]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    3dde:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
	while (!nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDTX)) {
    3de2:	2900      	cmp	r1, #0
    3de4:	d0fb      	beq.n	3dde <uarte_nrfx_poll_out+0x20>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    3de6:	60da      	str	r2, [r3, #12]
}
    3de8:	b002      	add	sp, #8
    3dea:	4770      	bx	lr

00003dec <hw_cc310_init>:
#if CONFIG_HW_CC310

#include "nrf_cc310_platform.h"

static int hw_cc310_init(struct device *dev)
{
    3dec:	b508      	push	{r3, lr}
	int res;

	__ASSERT_NO_MSG(dev != NULL);

	/* Set the RTOS abort APIs */
	nrf_cc310_platform_abort_init();
    3dee:	f7fd f899 	bl	f24 <nrf_cc310_platform_abort_init>

	/* Set the RTOS mutex APIs */
	nrf_cc310_platform_mutex_init();
    3df2:	f7fd f917 	bl	1024 <nrf_cc310_platform_mutex_init>
	res = nrf_cc310_platform_init();
#else
	res = nrf_cc310_platform_init_no_rng();
#endif
	return res;
}
    3df6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	res = nrf_cc310_platform_init_no_rng();
    3dfa:	f7fe bec5 	b.w	2b88 <nrf_cc310_platform_init_no_rng>

00003dfe <z_arch_system_halt>:
	__asm__ volatile(
    3dfe:	f04f 0220 	mov.w	r2, #32
    3e02:	f3ef 8311 	mrs	r3, BASEPRI
    3e06:	f382 8811 	msr	BASEPRI, r2
    3e0a:	f3bf 8f6f 	isb	sy
    3e0e:	e7fe      	b.n	3e0e <z_arch_system_halt+0x10>

00003e10 <k_sys_fatal_error_handler>:
/* LCOV_EXCL_STOP */

/* LCOV_EXCL_START */
__weak void k_sys_fatal_error_handler(unsigned int reason,
				      const z_arch_esf_t *esf)
{
    3e10:	b508      	push	{r3, lr}
	ARG_UNUSED(esf);

	LOG_PANIC();
	LOG_ERR("Halting system");
	z_arch_system_halt(reason);
    3e12:	f7ff fff4 	bl	3dfe <z_arch_system_halt>

00003e16 <z_fatal_error>:
	z_arch_system_halt(reason);
}
/* LCOV_EXCL_STOP */

void z_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
    3e16:	b570      	push	{r4, r5, r6, lr}
    3e18:	4605      	mov	r5, r0
    3e1a:	460e      	mov	r6, r1
	return z_impl_k_current_get();
    3e1c:	f7fe fb68 	bl	24f0 <z_impl_k_current_get>
	 */

	LOG_ERR("Current thread: %p (%s)", thread,
		log_strdup(thread_name_get(thread)));

	k_sys_fatal_error_handler(reason, esf);
    3e20:	4631      	mov	r1, r6
    3e22:	4604      	mov	r4, r0
    3e24:	4628      	mov	r0, r5
    3e26:	f7ff fff3 	bl	3e10 <k_sys_fatal_error_handler>
	z_impl_k_thread_abort(thread);
    3e2a:	4620      	mov	r0, r4
		/* FIXME: #17656 */
		__ASSERT(!k_is_in_isr(),
			 "Attempted to recover from a fatal error in ISR");
	}
	k_thread_abort(thread);
}
    3e2c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    3e30:	f7fd bb56 	b.w	14e0 <z_impl_k_thread_abort>

00003e34 <z_sys_power_save_idle_exit>:
	z_clock_idle_exit();
    3e34:	f7ff be7a 	b.w	3b2c <z_clock_idle_exit>

00003e38 <k_mem_slab_init>:
{
    3e38:	b530      	push	{r4, r5, lr}
	slab->num_used = 0U;
    3e3a:	2400      	movs	r4, #0
	slab->block_size = block_size;
    3e3c:	e9c0 3202 	strd	r3, r2, [r0, #8]
	slab->free_list = NULL;
    3e40:	e9c0 4405 	strd	r4, r4, [r0, #20]
	slab->buffer = buffer;
    3e44:	6101      	str	r1, [r0, #16]
	for (j = 0U; j < slab->num_blocks; j++) {
    3e46:	42a3      	cmp	r3, r4
    3e48:	d102      	bne.n	3e50 <k_mem_slab_init+0x18>
	list->tail = (sys_dnode_t *)list;
    3e4a:	e9c0 0000 	strd	r0, r0, [r0]
}
    3e4e:	bd30      	pop	{r4, r5, pc}
		*(char **)p = slab->free_list;
    3e50:	6945      	ldr	r5, [r0, #20]
	for (j = 0U; j < slab->num_blocks; j++) {
    3e52:	3401      	adds	r4, #1
		*(char **)p = slab->free_list;
    3e54:	600d      	str	r5, [r1, #0]
		slab->free_list = p;
    3e56:	6141      	str	r1, [r0, #20]
		p += slab->block_size;
    3e58:	4411      	add	r1, r2
    3e5a:	e7f4      	b.n	3e46 <k_mem_slab_init+0xe>

00003e5c <z_impl_k_mutex_init>:
	mutex->owner = NULL;
    3e5c:	2300      	movs	r3, #0
    3e5e:	e9c0 0000 	strd	r0, r0, [r0]
	mutex->lock_count = 0U;
    3e62:	e9c0 3302 	strd	r3, r3, [r0, #8]
}
    3e66:	4770      	bx	lr

00003e68 <z_is_thread_ready>:
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
    3e68:	7b43      	ldrb	r3, [r0, #13]
    3e6a:	06db      	lsls	r3, r3, #27
    3e6c:	bf03      	ittte	eq
    3e6e:	6980      	ldreq	r0, [r0, #24]
    3e70:	fab0 f080 	clzeq	r0, r0
    3e74:	0940      	lsreq	r0, r0, #5
    3e76:	2000      	movne	r0, #0
}
    3e78:	4770      	bx	lr

00003e7a <z_unpend_thread_no_timeout>:
{
    3e7a:	b538      	push	{r3, r4, r5, lr}
    3e7c:	4604      	mov	r4, r0
    3e7e:	f04f 0320 	mov.w	r3, #32
    3e82:	f3ef 8511 	mrs	r5, BASEPRI
    3e86:	f383 8811 	msr	BASEPRI, r3
    3e8a:	f3bf 8f6f 	isb	sy
		_priq_wait_remove(&pended_on(thread)->waitq, thread);
    3e8e:	4601      	mov	r1, r0
    3e90:	6880      	ldr	r0, [r0, #8]
    3e92:	f7fe f961 	bl	2158 <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
    3e96:	7b63      	ldrb	r3, [r4, #13]
    3e98:	f023 0302 	bic.w	r3, r3, #2
    3e9c:	7363      	strb	r3, [r4, #13]
	__asm__ volatile(
    3e9e:	f385 8811 	msr	BASEPRI, r5
    3ea2:	f3bf 8f6f 	isb	sy
	thread->base.pended_on = NULL;
    3ea6:	2300      	movs	r3, #0
    3ea8:	60a3      	str	r3, [r4, #8]
}
    3eaa:	bd38      	pop	{r3, r4, r5, pc}

00003eac <z_reschedule>:
{
    3eac:	b508      	push	{r3, lr}
	return z_arch_irq_unlocked(key) && !z_arch_is_in_isr();
    3eae:	b939      	cbnz	r1, 3ec0 <z_reschedule+0x14>
    3eb0:	f7fe f8ea 	bl	2088 <resched.part.15>
	if (resched(key.key)) {
    3eb4:	b120      	cbz	r0, 3ec0 <z_reschedule+0x14>
}
    3eb6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    3eba:	4608      	mov	r0, r1
    3ebc:	f7fd b952 	b.w	1164 <z_arch_swap>
    3ec0:	f381 8811 	msr	BASEPRI, r1
    3ec4:	f3bf 8f6f 	isb	sy
    3ec8:	bd08      	pop	{r3, pc}

00003eca <z_reschedule_irqlock>:
{
    3eca:	b508      	push	{r3, lr}
	return z_arch_irq_unlocked(key) && !z_arch_is_in_isr();
    3ecc:	4602      	mov	r2, r0
    3ece:	b938      	cbnz	r0, 3ee0 <z_reschedule_irqlock+0x16>
    3ed0:	f7fe f8da 	bl	2088 <resched.part.15>
	if (resched(key)) {
    3ed4:	b120      	cbz	r0, 3ee0 <z_reschedule_irqlock+0x16>
}
    3ed6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    3eda:	4610      	mov	r0, r2
    3edc:	f7fd b942 	b.w	1164 <z_arch_swap>
    3ee0:	f382 8811 	msr	BASEPRI, r2
    3ee4:	f3bf 8f6f 	isb	sy
    3ee8:	bd08      	pop	{r3, pc}

00003eea <z_reschedule_unlocked>:
	__asm__ volatile(
    3eea:	f04f 0320 	mov.w	r3, #32
    3eee:	f3ef 8011 	mrs	r0, BASEPRI
    3ef2:	f383 8811 	msr	BASEPRI, r3
    3ef6:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(z_arch_irq_lock());
    3efa:	f7ff bfe6 	b.w	3eca <z_reschedule_irqlock>

00003efe <z_priq_dumb_best>:
	return list->head == list;
    3efe:	6803      	ldr	r3, [r0, #0]
}
    3f00:	4298      	cmp	r0, r3
    3f02:	bf14      	ite	ne
    3f04:	4618      	movne	r0, r3
    3f06:	2000      	moveq	r0, #0
    3f08:	4770      	bx	lr

00003f0a <z_thread_timeout>:
	if (th->base.pended_on != NULL) {
    3f0a:	f850 3c10 	ldr.w	r3, [r0, #-16]
{
    3f0e:	b570      	push	{r4, r5, r6, lr}
    3f10:	4604      	mov	r4, r0
	struct k_thread *th = CONTAINER_OF(to, struct k_thread, base.timeout);
    3f12:	f1a0 0518 	sub.w	r5, r0, #24
	if (th->base.pended_on != NULL) {
    3f16:	b1cb      	cbz	r3, 3f4c <z_thread_timeout+0x42>
    3f18:	f04f 0320 	mov.w	r3, #32
    3f1c:	f3ef 8611 	mrs	r6, BASEPRI
    3f20:	f383 8811 	msr	BASEPRI, r3
    3f24:	f3bf 8f6f 	isb	sy
		_priq_wait_remove(&pended_on(thread)->waitq, thread);
    3f28:	4629      	mov	r1, r5
    3f2a:	f850 0c10 	ldr.w	r0, [r0, #-16]
    3f2e:	f7fe f913 	bl	2158 <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
    3f32:	f814 3c0b 	ldrb.w	r3, [r4, #-11]
    3f36:	f023 0302 	bic.w	r3, r3, #2
    3f3a:	f804 3c0b 	strb.w	r3, [r4, #-11]
	__asm__ volatile(
    3f3e:	f386 8811 	msr	BASEPRI, r6
    3f42:	f3bf 8f6f 	isb	sy
	thread->base.pended_on = NULL;
    3f46:	2300      	movs	r3, #0
    3f48:	f844 3c10 	str.w	r3, [r4, #-16]
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
    3f4c:	f814 3c0b 	ldrb.w	r3, [r4, #-11]
	if (z_is_thread_ready(thread)) {
    3f50:	4628      	mov	r0, r5
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
    3f52:	f023 0314 	bic.w	r3, r3, #20
    3f56:	f804 3c0b 	strb.w	r3, [r4, #-11]
	if (z_is_thread_ready(thread)) {
    3f5a:	f7ff ff85 	bl	3e68 <z_is_thread_ready>
    3f5e:	b120      	cbz	r0, 3f6a <z_thread_timeout+0x60>
		z_add_thread_to_ready_q(thread);
    3f60:	4628      	mov	r0, r5
}
    3f62:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    3f66:	f7fe b947 	b.w	21f8 <z_add_thread_to_ready_q>
    3f6a:	bd70      	pop	{r4, r5, r6, pc}

00003f6c <z_unpend_first_thread>:
{
    3f6c:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
    3f6e:	f04f 0320 	mov.w	r3, #32
    3f72:	f3ef 8211 	mrs	r2, BASEPRI
    3f76:	f383 8811 	msr	BASEPRI, r3
    3f7a:	f3bf 8f6f 	isb	sy
		ret = _priq_wait_best(&wait_q->waitq);
    3f7e:	f7ff ffbe 	bl	3efe <z_priq_dumb_best>
    3f82:	4604      	mov	r4, r0
	__asm__ volatile(
    3f84:	f382 8811 	msr	BASEPRI, r2
    3f88:	f3bf 8f6f 	isb	sy

static inline struct k_thread *z_unpend1_no_timeout(_wait_q_t *wait_q)
{
	struct k_thread *thread = z_find_first_thread_to_unpend(wait_q, NULL);

	if (thread != NULL) {
    3f8c:	b1c8      	cbz	r0, 3fc2 <z_unpend_first_thread+0x56>
	__asm__ volatile(
    3f8e:	f04f 0320 	mov.w	r3, #32
    3f92:	f3ef 8511 	mrs	r5, BASEPRI
    3f96:	f383 8811 	msr	BASEPRI, r3
    3f9a:	f3bf 8f6f 	isb	sy
		_priq_wait_remove(&pended_on(thread)->waitq, thread);
    3f9e:	4601      	mov	r1, r0
    3fa0:	6880      	ldr	r0, [r0, #8]
    3fa2:	f7fe f8d9 	bl	2158 <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
    3fa6:	7b63      	ldrb	r3, [r4, #13]
    3fa8:	f023 0302 	bic.w	r3, r3, #2
    3fac:	7363      	strb	r3, [r4, #13]
	__asm__ volatile(
    3fae:	f385 8811 	msr	BASEPRI, r5
    3fb2:	f3bf 8f6f 	isb	sy
	thread->base.pended_on = NULL;
    3fb6:	2300      	movs	r3, #0
}

static inline int z_abort_thread_timeout(struct k_thread *thread)
{
	return z_abort_timeout(&thread->base.timeout);
    3fb8:	f104 0018 	add.w	r0, r4, #24
    3fbc:	60a3      	str	r3, [r4, #8]
    3fbe:	f000 f832 	bl	4026 <z_abort_timeout>
}
    3fc2:	4620      	mov	r0, r4
    3fc4:	bd38      	pop	{r3, r4, r5, pc}

00003fc6 <z_is_thread_ready>:
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
    3fc6:	7b43      	ldrb	r3, [r0, #13]
    3fc8:	06db      	lsls	r3, r3, #27
    3fca:	bf03      	ittte	eq
    3fcc:	6980      	ldreq	r0, [r0, #24]
    3fce:	fab0 f080 	clzeq	r0, r0
    3fd2:	0940      	lsreq	r0, r0, #5
    3fd4:	2000      	movne	r0, #0
}
    3fd6:	4770      	bx	lr

00003fd8 <z_thread_single_abort>:
	if (thread->fn_abort != NULL) {
    3fd8:	6d03      	ldr	r3, [r0, #80]	; 0x50
{
    3fda:	b510      	push	{r4, lr}
    3fdc:	4604      	mov	r4, r0
	if (thread->fn_abort != NULL) {
    3fde:	b103      	cbz	r3, 3fe2 <z_thread_single_abort+0xa>
		thread->fn_abort();
    3fe0:	4798      	blx	r3
	if (z_is_thread_ready(thread)) {
    3fe2:	4620      	mov	r0, r4
    3fe4:	f7ff ffef 	bl	3fc6 <z_is_thread_ready>
    3fe8:	b138      	cbz	r0, 3ffa <z_thread_single_abort+0x22>
		z_remove_thread_from_ready_q(thread);
    3fea:	4620      	mov	r0, r4
    3fec:	f7fe f9b6 	bl	235c <z_remove_thread_from_ready_q>
	thread->base.thread_state |= _THREAD_DEAD;
    3ff0:	7b63      	ldrb	r3, [r4, #13]
    3ff2:	f043 0308 	orr.w	r3, r3, #8
    3ff6:	7363      	strb	r3, [r4, #13]
}
    3ff8:	bd10      	pop	{r4, pc}
		if (z_is_thread_pending(thread)) {
    3ffa:	7b63      	ldrb	r3, [r4, #13]
    3ffc:	079b      	lsls	r3, r3, #30
    3ffe:	d502      	bpl.n	4006 <z_thread_single_abort+0x2e>
			z_unpend_thread_no_timeout(thread);
    4000:	4620      	mov	r0, r4
    4002:	f7ff ff3a 	bl	3e7a <z_unpend_thread_no_timeout>
		if (z_is_thread_timeout_active(thread)) {
    4006:	69a3      	ldr	r3, [r4, #24]
    4008:	2b00      	cmp	r3, #0
    400a:	d0f1      	beq.n	3ff0 <z_thread_single_abort+0x18>
    400c:	f104 0018 	add.w	r0, r4, #24
    4010:	f000 f809 	bl	4026 <z_abort_timeout>
    4014:	e7ec      	b.n	3ff0 <z_thread_single_abort+0x18>

00004016 <z_init_thread_base>:
void z_init_thread_base(struct _thread_base *thread_base, int priority,
		       u32_t initial_state, unsigned int options)
{
	/* k_q_node is initialized upon first insertion in a list */

	thread_base->user_options = (u8_t)options;
    4016:	7303      	strb	r3, [r0, #12]
	thread_base->thread_state = (u8_t)initial_state;

	thread_base->prio = priority;

	thread_base->sched_locked = 0U;
    4018:	2300      	movs	r3, #0
	thread_base->thread_state = (u8_t)initial_state;
    401a:	7342      	strb	r2, [r0, #13]
	thread_base->prio = priority;
    401c:	7381      	strb	r1, [r0, #14]
	thread_base->sched_locked = 0U;
    401e:	73c3      	strb	r3, [r0, #15]
	node->prev = NULL;
    4020:	e9c0 3306 	strd	r3, r3, [r0, #24]
#endif

	/* swap_data does not need to be initialized */

	z_init_thread_timeout(thread_base);
}
    4024:	4770      	bx	lr

00004026 <z_abort_timeout>:
{
    4026:	b510      	push	{r4, lr}
	__asm__ volatile(
    4028:	f04f 0220 	mov.w	r2, #32
    402c:	f3ef 8411 	mrs	r4, BASEPRI
    4030:	f382 8811 	msr	BASEPRI, r2
    4034:	f3bf 8f6f 	isb	sy
		if (sys_dnode_is_linked(&to->node)) {
    4038:	6803      	ldr	r3, [r0, #0]
    403a:	b13b      	cbz	r3, 404c <z_abort_timeout+0x26>
			remove_timeout(to);
    403c:	f7fe fb00 	bl	2640 <remove_timeout>
			ret = 0;
    4040:	2000      	movs	r0, #0
	__asm__ volatile(
    4042:	f384 8811 	msr	BASEPRI, r4
    4046:	f3bf 8f6f 	isb	sy
}
    404a:	bd10      	pop	{r4, pc}
	int ret = -EINVAL;
    404c:	f06f 0015 	mvn.w	r0, #21
    4050:	e7f7      	b.n	4042 <z_abort_timeout+0x1c>

00004052 <z_get_next_timeout_expiry>:
{
    4052:	b510      	push	{r4, lr}
	__asm__ volatile(
    4054:	f04f 0320 	mov.w	r3, #32
    4058:	f3ef 8411 	mrs	r4, BASEPRI
    405c:	f383 8811 	msr	BASEPRI, r3
    4060:	f3bf 8f6f 	isb	sy
		ret = next_timeout();
    4064:	f7fe fb02 	bl	266c <next_timeout>
	__asm__ volatile(
    4068:	f384 8811 	msr	BASEPRI, r4
    406c:	f3bf 8f6f 	isb	sy
}
    4070:	bd10      	pop	{r4, pc}

00004072 <z_set_timeout_expiry>:
{
    4072:	b570      	push	{r4, r5, r6, lr}
    4074:	4604      	mov	r4, r0
    4076:	460e      	mov	r6, r1
	__asm__ volatile(
    4078:	f04f 0320 	mov.w	r3, #32
    407c:	f3ef 8511 	mrs	r5, BASEPRI
    4080:	f383 8811 	msr	BASEPRI, r3
    4084:	f3bf 8f6f 	isb	sy
		int next = next_timeout();
    4088:	f7fe faf0 	bl	266c <next_timeout>
		if (!imminent && (sooner || IS_ENABLED(CONFIG_SMP))) {
    408c:	2801      	cmp	r0, #1
    408e:	dd05      	ble.n	409c <z_set_timeout_expiry+0x2a>
    4090:	42a0      	cmp	r0, r4
    4092:	dd03      	ble.n	409c <z_set_timeout_expiry+0x2a>
			z_clock_set_timeout(ticks, idle);
    4094:	4631      	mov	r1, r6
    4096:	4620      	mov	r0, r4
    4098:	f7fc fc5c 	bl	954 <z_clock_set_timeout>
	__asm__ volatile(
    409c:	f385 8811 	msr	BASEPRI, r5
    40a0:	f3bf 8f6f 	isb	sy
}
    40a4:	bd70      	pop	{r4, r5, r6, pc}

000040a6 <_OffsetAbsSyms>:
					    sizeof(struct _preempt_float));
#else
GEN_ABSOLUTE_SYM(_K_THREAD_NO_FLOAT_SIZEOF, sizeof(struct k_thread));
#endif

GEN_ABS_SYM_END
    40a6:	4770      	bx	lr

Disassembly of section .gnu.sgstubs:

00004ba0 <spm_request_read-0x3440>:
	...

00007fe0 <spm_request_read>:
    7fe0:	e97f e97f 	sg
    7fe4:	f7f8 bec8 	b.w	d78 <__acle_se_spm_request_read>

00007fe8 <spm_firmware_info>:
    7fe8:	e97f e97f 	sg
    7fec:	f7f8 bf1c 	b.w	e28 <__acle_se_spm_firmware_info>

00007ff0 <spm_request_random_number>:
    7ff0:	e97f e97f 	sg
    7ff4:	f7fb bda5 	b.w	3b42 <__acle_se_spm_request_random_number>
	...
