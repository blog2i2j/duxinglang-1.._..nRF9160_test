
zephyr.elf:     file format elf32-littlearm


Disassembly of section text:

0000c000 <_vector_table>:
    c000:	20024a38 	.word	0x20024a38
    c004:	0000dca1 	.word	0x0000dca1
    c008:	00011a35 	.word	0x00011a35
    c00c:	0000da45 	.word	0x0000da45
    c010:	0000da45 	.word	0x0000da45
    c014:	0000da45 	.word	0x0000da45
    c018:	0000da45 	.word	0x0000da45
    c01c:	0000da45 	.word	0x0000da45
    c020:	0000da45 	.word	0x0000da45
    c024:	0000da45 	.word	0x0000da45
    c028:	0000da45 	.word	0x0000da45
    c02c:	0000da0d 	.word	0x0000da0d
    c030:	0000da45 	.word	0x0000da45
    c034:	0000da45 	.word	0x0000da45
    c038:	0000d9b9 	.word	0x0000d9b9
    c03c:	00011a25 	.word	0x00011a25

0000c040 <_irq_vector_table>:
    c040:	0000da71 0000da71 0000da71 0000da71     q...q...q...q...
    c050:	0000da71 0000da71 0000da71 0000da71     q...q...q...q...
    c060:	0000da71 0000da71 0000da71 0000da71     q...q...q...q...
    c070:	0000da71 0000da71 0000da71 0000da71     q...q...q...q...
    c080:	0000da71 0000da71 0000da71 0000da71     q...q...q...q...
    c090:	0000da71 0000da71 0000da71 0000da71     q...q...q...q...
    c0a0:	0000da71 0000da71 0000da71 0000da71     q...q...q...q...
    c0b0:	0000da71 0000da71 0000da71 0000da71     q...q...q...q...
    c0c0:	0000da71 0000da71 0000da71 0000da71     q...q...q...q...
    c0d0:	0000da71 0000da71 0000da71 0000da71     q...q...q...q...
    c0e0:	0000da71 0000da71 0000da71 0000da71     q...q...q...q...
    c0f0:	0000da71 0000da71 0000da71 0000da71     q...q...q...q...
    c100:	0000da71 0000da71 0000da71 0000da71     q...q...q...q...
    c110:	0000da71 0000da71 0000da71 0000da71     q...q...q...q...
    c120:	0000da71 0000da71 0000da71 0000da71     q...q...q...q...
    c130:	0000da71 0000da71 0000da71 0000da71     q...q...q...q...
    c140:	0000da71                                q...

0000c144 <_vector_end>:
	...

0000c200 <m_firmware_info>:
    c200:	281ee6de 8fcebb4c 00005b01 00007238     ...(L....[..8r..
    c210:	00000001 0000c000 20025818 0000fa71     .........X. q...

Disassembly of section _TEXT_SECTION_NAME_2:

0000c220 <__aeabi_ldivmod>:
    c220:	b97b      	cbnz	r3, c242 <__aeabi_ldivmod+0x22>
    c222:	b972      	cbnz	r2, c242 <__aeabi_ldivmod+0x22>
    c224:	2900      	cmp	r1, #0
    c226:	bfbe      	ittt	lt
    c228:	2000      	movlt	r0, #0
    c22a:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
    c22e:	e006      	blt.n	c23e <__aeabi_ldivmod+0x1e>
    c230:	bf08      	it	eq
    c232:	2800      	cmpeq	r0, #0
    c234:	bf1c      	itt	ne
    c236:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
    c23a:	f04f 30ff 	movne.w	r0, #4294967295
    c23e:	f000 b9af 	b.w	c5a0 <__aeabi_idiv0>
    c242:	f1ad 0c08 	sub.w	ip, sp, #8
    c246:	e96d ce04 	strd	ip, lr, [sp, #-16]!
    c24a:	2900      	cmp	r1, #0
    c24c:	db09      	blt.n	c262 <__aeabi_ldivmod+0x42>
    c24e:	2b00      	cmp	r3, #0
    c250:	db1a      	blt.n	c288 <__aeabi_ldivmod+0x68>
    c252:	f000 f835 	bl	c2c0 <__udivmoddi4>
    c256:	f8dd e004 	ldr.w	lr, [sp, #4]
    c25a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    c25e:	b004      	add	sp, #16
    c260:	4770      	bx	lr
    c262:	4240      	negs	r0, r0
    c264:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
    c268:	2b00      	cmp	r3, #0
    c26a:	db1b      	blt.n	c2a4 <__aeabi_ldivmod+0x84>
    c26c:	f000 f828 	bl	c2c0 <__udivmoddi4>
    c270:	f8dd e004 	ldr.w	lr, [sp, #4]
    c274:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    c278:	b004      	add	sp, #16
    c27a:	4240      	negs	r0, r0
    c27c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
    c280:	4252      	negs	r2, r2
    c282:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
    c286:	4770      	bx	lr
    c288:	4252      	negs	r2, r2
    c28a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
    c28e:	f000 f817 	bl	c2c0 <__udivmoddi4>
    c292:	f8dd e004 	ldr.w	lr, [sp, #4]
    c296:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    c29a:	b004      	add	sp, #16
    c29c:	4240      	negs	r0, r0
    c29e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
    c2a2:	4770      	bx	lr
    c2a4:	4252      	negs	r2, r2
    c2a6:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
    c2aa:	f000 f809 	bl	c2c0 <__udivmoddi4>
    c2ae:	f8dd e004 	ldr.w	lr, [sp, #4]
    c2b2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    c2b6:	b004      	add	sp, #16
    c2b8:	4252      	negs	r2, r2
    c2ba:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
    c2be:	4770      	bx	lr

0000c2c0 <__udivmoddi4>:
    c2c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    c2c4:	468c      	mov	ip, r1
    c2c6:	9d08      	ldr	r5, [sp, #32]
    c2c8:	4604      	mov	r4, r0
    c2ca:	468a      	mov	sl, r1
    c2cc:	2b00      	cmp	r3, #0
    c2ce:	d14a      	bne.n	c366 <__udivmoddi4+0xa6>
    c2d0:	428a      	cmp	r2, r1
    c2d2:	4617      	mov	r7, r2
    c2d4:	d962      	bls.n	c39c <__udivmoddi4+0xdc>
    c2d6:	fab2 f682 	clz	r6, r2
    c2da:	b14e      	cbz	r6, c2f0 <__udivmoddi4+0x30>
    c2dc:	f1c6 0e20 	rsb	lr, r6, #32
    c2e0:	fa01 f306 	lsl.w	r3, r1, r6
    c2e4:	40b7      	lsls	r7, r6
    c2e6:	40b4      	lsls	r4, r6
    c2e8:	fa20 fe0e 	lsr.w	lr, r0, lr
    c2ec:	ea4e 0a03 	orr.w	sl, lr, r3
    c2f0:	ea4f 4817 	mov.w	r8, r7, lsr #16
    c2f4:	0c23      	lsrs	r3, r4, #16
    c2f6:	fa1f f987 	uxth.w	r9, r7
    c2fa:	fbba fef8 	udiv	lr, sl, r8
    c2fe:	fb08 aa1e 	mls	sl, r8, lr, sl
    c302:	fb0e f209 	mul.w	r2, lr, r9
    c306:	ea43 430a 	orr.w	r3, r3, sl, lsl #16
    c30a:	429a      	cmp	r2, r3
    c30c:	d90b      	bls.n	c326 <__udivmoddi4+0x66>
    c30e:	18fb      	adds	r3, r7, r3
    c310:	f10e 31ff 	add.w	r1, lr, #4294967295
    c314:	bf2c      	ite	cs
    c316:	2001      	movcs	r0, #1
    c318:	2000      	movcc	r0, #0
    c31a:	429a      	cmp	r2, r3
    c31c:	d902      	bls.n	c324 <__udivmoddi4+0x64>
    c31e:	2800      	cmp	r0, #0
    c320:	f000 812a 	beq.w	c578 <__udivmoddi4+0x2b8>
    c324:	468e      	mov	lr, r1
    c326:	1a9a      	subs	r2, r3, r2
    c328:	b2a3      	uxth	r3, r4
    c32a:	fbb2 f0f8 	udiv	r0, r2, r8
    c32e:	fb08 2210 	mls	r2, r8, r0, r2
    c332:	fb00 f909 	mul.w	r9, r0, r9
    c336:	ea43 4402 	orr.w	r4, r3, r2, lsl #16
    c33a:	45a1      	cmp	r9, r4
    c33c:	d907      	bls.n	c34e <__udivmoddi4+0x8e>
    c33e:	193c      	adds	r4, r7, r4
    c340:	f100 33ff 	add.w	r3, r0, #4294967295
    c344:	d202      	bcs.n	c34c <__udivmoddi4+0x8c>
    c346:	45a1      	cmp	r9, r4
    c348:	f200 8110 	bhi.w	c56c <__udivmoddi4+0x2ac>
    c34c:	4618      	mov	r0, r3
    c34e:	eba4 0409 	sub.w	r4, r4, r9
    c352:	ea40 400e 	orr.w	r0, r0, lr, lsl #16
    c356:	2100      	movs	r1, #0
    c358:	b11d      	cbz	r5, c362 <__udivmoddi4+0xa2>
    c35a:	40f4      	lsrs	r4, r6
    c35c:	2300      	movs	r3, #0
    c35e:	e9c5 4300 	strd	r4, r3, [r5]
    c362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    c366:	428b      	cmp	r3, r1
    c368:	d908      	bls.n	c37c <__udivmoddi4+0xbc>
    c36a:	2d00      	cmp	r5, #0
    c36c:	f000 80f2 	beq.w	c554 <__udivmoddi4+0x294>
    c370:	2100      	movs	r1, #0
    c372:	e9c5 0c00 	strd	r0, ip, [r5]
    c376:	4608      	mov	r0, r1
    c378:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    c37c:	fab3 f183 	clz	r1, r3
    c380:	2900      	cmp	r1, #0
    c382:	d14e      	bne.n	c422 <__udivmoddi4+0x162>
    c384:	4563      	cmp	r3, ip
    c386:	f0c0 80e8 	bcc.w	c55a <__udivmoddi4+0x29a>
    c38a:	4282      	cmp	r2, r0
    c38c:	f240 80e5 	bls.w	c55a <__udivmoddi4+0x29a>
    c390:	4608      	mov	r0, r1
    c392:	2d00      	cmp	r5, #0
    c394:	d0e5      	beq.n	c362 <__udivmoddi4+0xa2>
    c396:	e9c5 4a00 	strd	r4, sl, [r5]
    c39a:	e7e2      	b.n	c362 <__udivmoddi4+0xa2>
    c39c:	b902      	cbnz	r2, c3a0 <__udivmoddi4+0xe0>
    c39e:	deff      	udf	#255	; 0xff
    c3a0:	fab2 f682 	clz	r6, r2
    c3a4:	2e00      	cmp	r6, #0
    c3a6:	f040 8099 	bne.w	c4dc <__udivmoddi4+0x21c>
    c3aa:	1a8b      	subs	r3, r1, r2
    c3ac:	ea4f 4e12 	mov.w	lr, r2, lsr #16
    c3b0:	fa1f f882 	uxth.w	r8, r2
    c3b4:	2101      	movs	r1, #1
    c3b6:	ea4f 4c14 	mov.w	ip, r4, lsr #16
    c3ba:	fbb3 f2fe 	udiv	r2, r3, lr
    c3be:	fb0e 3012 	mls	r0, lr, r2, r3
    c3c2:	fb08 f902 	mul.w	r9, r8, r2
    c3c6:	ea4c 4c00 	orr.w	ip, ip, r0, lsl #16
    c3ca:	45e1      	cmp	r9, ip
    c3cc:	d908      	bls.n	c3e0 <__udivmoddi4+0x120>
    c3ce:	eb17 0c0c 	adds.w	ip, r7, ip
    c3d2:	f102 33ff 	add.w	r3, r2, #4294967295
    c3d6:	d202      	bcs.n	c3de <__udivmoddi4+0x11e>
    c3d8:	45e1      	cmp	r9, ip
    c3da:	f200 80ca 	bhi.w	c572 <__udivmoddi4+0x2b2>
    c3de:	461a      	mov	r2, r3
    c3e0:	ebac 0c09 	sub.w	ip, ip, r9
    c3e4:	b2a3      	uxth	r3, r4
    c3e6:	fbbc f0fe 	udiv	r0, ip, lr
    c3ea:	fb0e cc10 	mls	ip, lr, r0, ip
    c3ee:	fb08 f800 	mul.w	r8, r8, r0
    c3f2:	ea43 440c 	orr.w	r4, r3, ip, lsl #16
    c3f6:	45a0      	cmp	r8, r4
    c3f8:	d90e      	bls.n	c418 <__udivmoddi4+0x158>
    c3fa:	193c      	adds	r4, r7, r4
    c3fc:	f100 33ff 	add.w	r3, r0, #4294967295
    c400:	bf2c      	ite	cs
    c402:	f04f 0c01 	movcs.w	ip, #1
    c406:	f04f 0c00 	movcc.w	ip, #0
    c40a:	45a0      	cmp	r8, r4
    c40c:	d903      	bls.n	c416 <__udivmoddi4+0x156>
    c40e:	f1bc 0f00 	cmp.w	ip, #0
    c412:	f000 80a8 	beq.w	c566 <__udivmoddi4+0x2a6>
    c416:	4618      	mov	r0, r3
    c418:	eba4 0408 	sub.w	r4, r4, r8
    c41c:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
    c420:	e79a      	b.n	c358 <__udivmoddi4+0x98>
    c422:	f1c1 0420 	rsb	r4, r1, #32
    c426:	408b      	lsls	r3, r1
    c428:	fa02 fe01 	lsl.w	lr, r2, r1
    c42c:	fa0c f601 	lsl.w	r6, ip, r1
    c430:	40e2      	lsrs	r2, r4
    c432:	fa20 f704 	lsr.w	r7, r0, r4
    c436:	fa2c fc04 	lsr.w	ip, ip, r4
    c43a:	fa00 f801 	lsl.w	r8, r0, r1
    c43e:	4313      	orrs	r3, r2
    c440:	433e      	orrs	r6, r7
    c442:	0c1f      	lsrs	r7, r3, #16
    c444:	0c32      	lsrs	r2, r6, #16
    c446:	fa1f f983 	uxth.w	r9, r3
    c44a:	fbbc f0f7 	udiv	r0, ip, r7
    c44e:	fb07 cc10 	mls	ip, r7, r0, ip
    c452:	fb00 fa09 	mul.w	sl, r0, r9
    c456:	ea42 4c0c 	orr.w	ip, r2, ip, lsl #16
    c45a:	45e2      	cmp	sl, ip
    c45c:	d908      	bls.n	c470 <__udivmoddi4+0x1b0>
    c45e:	eb13 0c0c 	adds.w	ip, r3, ip
    c462:	f100 32ff 	add.w	r2, r0, #4294967295
    c466:	d202      	bcs.n	c46e <__udivmoddi4+0x1ae>
    c468:	45e2      	cmp	sl, ip
    c46a:	f200 8089 	bhi.w	c580 <__udivmoddi4+0x2c0>
    c46e:	4610      	mov	r0, r2
    c470:	ebac 0c0a 	sub.w	ip, ip, sl
    c474:	b2b6      	uxth	r6, r6
    c476:	fbbc faf7 	udiv	sl, ip, r7
    c47a:	fb07 cc1a 	mls	ip, r7, sl, ip
    c47e:	fb0a f909 	mul.w	r9, sl, r9
    c482:	ea46 420c 	orr.w	r2, r6, ip, lsl #16
    c486:	4591      	cmp	r9, r2
    c488:	d906      	bls.n	c498 <__udivmoddi4+0x1d8>
    c48a:	189a      	adds	r2, r3, r2
    c48c:	f10a 36ff 	add.w	r6, sl, #4294967295
    c490:	d201      	bcs.n	c496 <__udivmoddi4+0x1d6>
    c492:	4591      	cmp	r9, r2
    c494:	d87a      	bhi.n	c58c <__udivmoddi4+0x2cc>
    c496:	46b2      	mov	sl, r6
    c498:	ea4a 4000 	orr.w	r0, sl, r0, lsl #16
    c49c:	eba2 0209 	sub.w	r2, r2, r9
    c4a0:	fba0 670e 	umull	r6, r7, r0, lr
    c4a4:	42ba      	cmp	r2, r7
    c4a6:	46b4      	mov	ip, r6
    c4a8:	46b9      	mov	r9, r7
    c4aa:	d302      	bcc.n	c4b2 <__udivmoddi4+0x1f2>
    c4ac:	d107      	bne.n	c4be <__udivmoddi4+0x1fe>
    c4ae:	45b0      	cmp	r8, r6
    c4b0:	d205      	bcs.n	c4be <__udivmoddi4+0x1fe>
    c4b2:	ebb6 0c0e 	subs.w	ip, r6, lr
    c4b6:	eb67 0303 	sbc.w	r3, r7, r3
    c4ba:	3801      	subs	r0, #1
    c4bc:	4699      	mov	r9, r3
    c4be:	2d00      	cmp	r5, #0
    c4c0:	d06b      	beq.n	c59a <__udivmoddi4+0x2da>
    c4c2:	ebb8 030c 	subs.w	r3, r8, ip
    c4c6:	eb62 0209 	sbc.w	r2, r2, r9
    c4ca:	fa02 f404 	lsl.w	r4, r2, r4
    c4ce:	40cb      	lsrs	r3, r1
    c4d0:	40ca      	lsrs	r2, r1
    c4d2:	2100      	movs	r1, #0
    c4d4:	431c      	orrs	r4, r3
    c4d6:	e9c5 4200 	strd	r4, r2, [r5]
    c4da:	e742      	b.n	c362 <__udivmoddi4+0xa2>
    c4dc:	40b7      	lsls	r7, r6
    c4de:	f1c6 0220 	rsb	r2, r6, #32
    c4e2:	fa01 f306 	lsl.w	r3, r1, r6
    c4e6:	40b4      	lsls	r4, r6
    c4e8:	fa21 fc02 	lsr.w	ip, r1, r2
    c4ec:	ea4f 4e17 	mov.w	lr, r7, lsr #16
    c4f0:	fa20 f202 	lsr.w	r2, r0, r2
    c4f4:	fa1f f887 	uxth.w	r8, r7
    c4f8:	fbbc f1fe 	udiv	r1, ip, lr
    c4fc:	431a      	orrs	r2, r3
    c4fe:	fb0e cc11 	mls	ip, lr, r1, ip
    c502:	fb01 f008 	mul.w	r0, r1, r8
    c506:	0c13      	lsrs	r3, r2, #16
    c508:	ea43 4c0c 	orr.w	ip, r3, ip, lsl #16
    c50c:	4560      	cmp	r0, ip
    c50e:	d907      	bls.n	c520 <__udivmoddi4+0x260>
    c510:	eb17 0c0c 	adds.w	ip, r7, ip
    c514:	f101 33ff 	add.w	r3, r1, #4294967295
    c518:	d201      	bcs.n	c51e <__udivmoddi4+0x25e>
    c51a:	4560      	cmp	r0, ip
    c51c:	d833      	bhi.n	c586 <__udivmoddi4+0x2c6>
    c51e:	4619      	mov	r1, r3
    c520:	ebac 0c00 	sub.w	ip, ip, r0
    c524:	b292      	uxth	r2, r2
    c526:	fbbc f0fe 	udiv	r0, ip, lr
    c52a:	fb0e cc10 	mls	ip, lr, r0, ip
    c52e:	fb00 f308 	mul.w	r3, r0, r8
    c532:	ea42 4c0c 	orr.w	ip, r2, ip, lsl #16
    c536:	4563      	cmp	r3, ip
    c538:	d907      	bls.n	c54a <__udivmoddi4+0x28a>
    c53a:	eb17 0c0c 	adds.w	ip, r7, ip
    c53e:	f100 32ff 	add.w	r2, r0, #4294967295
    c542:	d201      	bcs.n	c548 <__udivmoddi4+0x288>
    c544:	4563      	cmp	r3, ip
    c546:	d825      	bhi.n	c594 <__udivmoddi4+0x2d4>
    c548:	4610      	mov	r0, r2
    c54a:	ebac 0303 	sub.w	r3, ip, r3
    c54e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
    c552:	e730      	b.n	c3b6 <__udivmoddi4+0xf6>
    c554:	4629      	mov	r1, r5
    c556:	4628      	mov	r0, r5
    c558:	e703      	b.n	c362 <__udivmoddi4+0xa2>
    c55a:	1a84      	subs	r4, r0, r2
    c55c:	eb6c 0303 	sbc.w	r3, ip, r3
    c560:	2001      	movs	r0, #1
    c562:	469a      	mov	sl, r3
    c564:	e715      	b.n	c392 <__udivmoddi4+0xd2>
    c566:	3802      	subs	r0, #2
    c568:	443c      	add	r4, r7
    c56a:	e755      	b.n	c418 <__udivmoddi4+0x158>
    c56c:	3802      	subs	r0, #2
    c56e:	443c      	add	r4, r7
    c570:	e6ed      	b.n	c34e <__udivmoddi4+0x8e>
    c572:	3a02      	subs	r2, #2
    c574:	44bc      	add	ip, r7
    c576:	e733      	b.n	c3e0 <__udivmoddi4+0x120>
    c578:	f1ae 0e02 	sub.w	lr, lr, #2
    c57c:	443b      	add	r3, r7
    c57e:	e6d2      	b.n	c326 <__udivmoddi4+0x66>
    c580:	3802      	subs	r0, #2
    c582:	449c      	add	ip, r3
    c584:	e774      	b.n	c470 <__udivmoddi4+0x1b0>
    c586:	3902      	subs	r1, #2
    c588:	44bc      	add	ip, r7
    c58a:	e7c9      	b.n	c520 <__udivmoddi4+0x260>
    c58c:	f1aa 0a02 	sub.w	sl, sl, #2
    c590:	441a      	add	r2, r3
    c592:	e781      	b.n	c498 <__udivmoddi4+0x1d8>
    c594:	3802      	subs	r0, #2
    c596:	44bc      	add	ip, r7
    c598:	e7d7      	b.n	c54a <__udivmoddi4+0x28a>
    c59a:	4629      	mov	r1, r5
    c59c:	e6e1      	b.n	c362 <__udivmoddi4+0xa2>
    c59e:	bf00      	nop

0000c5a0 <__aeabi_idiv0>:
    c5a0:	4770      	bx	lr
    c5a2:	bf00      	nop

0000c5a4 <main>:
    /* If you have a backlight, set it up and turn it on here */
}

void main(void)
{
	LOG_INF("ST7789V display sample");
    c5a4:	2303      	movs	r3, #3
    c5a6:	f04f 0100 	mov.w	r1, #0
{
    c5aa:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	LOG_INF("ST7789V display sample");
    c5ae:	f363 0102 	bfi	r1, r3, #0, #3
 * @return Source ID.
 */
static inline u32_t log_const_source_id(
				const struct log_source_const_data *data)
{
	return ((u8_t *)data - (u8_t *)__log_const_start)/
    c5b2:	4e5c      	ldr	r6, [pc, #368]	; (c724 <main+0x180>)
    c5b4:	4b5c      	ldr	r3, [pc, #368]	; (c728 <main+0x184>)
    c5b6:	f36f 01c5 	bfc	r1, #3, #3
    c5ba:	1af6      	subs	r6, r6, r3
    c5bc:	f3c6 06c9 	ubfx	r6, r6, #3, #10
{
    c5c0:	b08b      	sub	sp, #44	; 0x2c
	LOG_INF("ST7789V display sample");
    c5c2:	f366 118f 	bfi	r1, r6, #6, #10
    c5c6:	4859      	ldr	r0, [pc, #356]	; (c72c <main+0x188>)
    c5c8:	f004 fe26 	bl	11218 <log_0>
	if (z_syscall_trap()) {
		return (struct device *) z_arch_syscall_invoke1(*(u32_t *)&name, K_SYSCALL_DEVICE_GET_BINDING);
	}
#endif
	compiler_barrier();
	return z_impl_device_get_binding(name);
    c5cc:	4858      	ldr	r0, [pc, #352]	; (c730 <main+0x18c>)
    c5ce:	f003 fbe7 	bl	fda0 <z_impl_device_get_binding>
	const size_t rgb_size = 3;
#endif

	display_dev = device_get_binding(DT_INST_0_SITRONIX_ST7789V_LABEL);

	if (display_dev == NULL) {
    c5d2:	4604      	mov	r4, r0
    c5d4:	b970      	cbnz	r0, c5f4 <main+0x50>
		LOG_ERR("Device not found. Aborting test.");
    c5d6:	f04f 0100 	mov.w	r1, #0
    c5da:	2301      	movs	r3, #1
    c5dc:	f363 0102 	bfi	r1, r3, #0, #3
    c5e0:	f360 01c5 	bfi	r1, r0, #3, #3
    c5e4:	4853      	ldr	r0, [pc, #332]	; (c734 <main+0x190>)
    c5e6:	f366 118f 	bfi	r1, r6, #6, #10

	/* Allocate rectangular buffer for corner data */
	u8_t *buf = k_malloc(buf_size);

	if (buf == NULL) {
		LOG_ERR("Could not allocate memory. Aborting test.");
    c5ea:	f004 fe15 	bl	11218 <log_0>
			break;
		}
		++cnt;
		k_sleep(K_MSEC(100));
	}
}
    c5ee:	b00b      	add	sp, #44	; 0x2c
    c5f0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
					    capabilities)
{
	struct display_driver_api *api =
		(struct display_driver_api *)dev->driver_api;

	api->get_capabilities(dev, capabilities);
    c5f4:	6843      	ldr	r3, [r0, #4]
    c5f6:	a906      	add	r1, sp, #24
    c5f8:	69db      	ldr	r3, [r3, #28]
    c5fa:	4798      	blx	r3
	u8_t *buf = k_malloc(buf_size);
    c5fc:	f44f 60c8 	mov.w	r0, #1600	; 0x640
	x1 = capabilities.x_resolution - w;
    c600:	f8bd 8018 	ldrh.w	r8, [sp, #24]
	y2 = capabilities.y_resolution - h;
    c604:	f8bd 901a 	ldrh.w	r9, [sp, #26]
	u8_t *buf = k_malloc(buf_size);
    c608:	f003 fe14 	bl	10234 <k_malloc>
	if (buf == NULL) {
    c60c:	4605      	mov	r5, r0
    c60e:	b950      	cbnz	r0, c626 <main+0x82>
		LOG_ERR("Could not allocate memory. Aborting test.");
    c610:	f04f 0100 	mov.w	r1, #0
    c614:	2301      	movs	r3, #1
    c616:	f363 0102 	bfi	r1, r3, #0, #3
    c61a:	f360 01c5 	bfi	r1, r0, #3, #3
    c61e:	f366 118f 	bfi	r1, r6, #6, #10
    c622:	4845      	ldr	r0, [pc, #276]	; (c738 <main+0x194>)
    c624:	e7e1      	b.n	c5ea <main+0x46>
	h_step = (w * h) / capabilities.x_resolution;
    c626:	f44f 7748 	mov.w	r7, #800	; 0x320
	(void)memset(buf, 0, buf_size);
    c62a:	f44f 62c8 	mov.w	r2, #1600	; 0x640
    c62e:	2100      	movs	r1, #0
    c630:	f005 fa8d 	bl	11b4e <memset>
	h_step = (w * h) / capabilities.x_resolution;
    c634:	f8bd 3018 	ldrh.w	r3, [sp, #24]
	buf_desc.buf_size = buf_size;
    c638:	f44f 62c8 	mov.w	r2, #1600	; 0x640
	h_step = (w * h) / capabilities.x_resolution;
    c63c:	fbb7 f7f3 	udiv	r7, r7, r3
	for (int idx = 0; idx < capabilities.y_resolution; idx += h_step) {
    c640:	2600      	movs	r6, #0
	buf_desc.buf_size = buf_size;
    c642:	9203      	str	r2, [sp, #12]
	buf_desc.pitch = capabilities.x_resolution;
    c644:	f8ad 3014 	strh.w	r3, [sp, #20]
	buf_desc.width = capabilities.x_resolution;
    c648:	f8ad 3010 	strh.w	r3, [sp, #16]
	buf_desc.height = h_step;
    c64c:	f8ad 7012 	strh.w	r7, [sp, #18]
	for (int idx = 0; idx < capabilities.y_resolution; idx += h_step) {
    c650:	f8bd 301a 	ldrh.w	r3, [sp, #26]
    c654:	429e      	cmp	r6, r3
    c656:	db2e      	blt.n	c6b6 <main+0x112>
	size_t cnt = 0;
    c658:	2600      	movs	r6, #0
	return api->blanking_off(dev);
    c65a:	6863      	ldr	r3, [r4, #4]
    c65c:	4620      	mov	r0, r4
    c65e:	685b      	ldr	r3, [r3, #4]
    c660:	4798      	blx	r3
	buf_desc.width = w;
    c662:	4b36      	ldr	r3, [pc, #216]	; (c73c <main+0x198>)
	int grey_count = 0;
    c664:	4637      	mov	r7, r6
	buf_desc.width = w;
    c666:	9304      	str	r3, [sp, #16]
	buf_desc.height = h;
    c668:	2328      	movs	r3, #40	; 0x28
    c66a:	f8ad 3014 	strh.w	r3, [sp, #20]
		color_r = (color == 0) ? 0xF800U : 0U;
    c66e:	f016 0203 	ands.w	r2, r6, #3
    c672:	d045      	beq.n	c700 <main+0x15c>
		color_g = (color == 1) ? 0x07E0U : 0U;
    c674:	2a01      	cmp	r2, #1
    c676:	d04b      	beq.n	c710 <main+0x16c>
		color_b = (color == 2) ? 0x001FU : 0U;
    c678:	2a02      	cmp	r2, #2
    c67a:	d04e      	beq.n	c71a <main+0x176>
			u16_t t = grey_count & 0x1f;
    c67c:	f007 011f 	and.w	r1, r7, #31
			color_rgb = t << 11 | t << (5+1) | t;
    c680:	018b      	lsls	r3, r1, #6
    c682:	ea43 23c1 	orr.w	r3, r3, r1, lsl #11
    c686:	430b      	orrs	r3, r1
			grey_count++;
    c688:	3701      	adds	r7, #1
		for (size_t idx = 0; idx < buf_size; idx += rgb_size) {
    c68a:	2100      	movs	r1, #0
			*(buf + idx + 0) = (color_rgb >> 8) & 0xFFU;
    c68c:	ea4f 2c13 	mov.w	ip, r3, lsr #8
    c690:	f805 c001 	strb.w	ip, [r5, r1]
			*(buf + idx + 1) = (color_rgb >> 0) & 0xFFU;
    c694:	1868      	adds	r0, r5, r1
		for (size_t idx = 0; idx < buf_size; idx += rgb_size) {
    c696:	3102      	adds	r1, #2
    c698:	f5b1 6fc8 	cmp.w	r1, #1600	; 0x640
			*(buf + idx + 1) = (color_rgb >> 0) & 0xFFU;
    c69c:	7043      	strb	r3, [r0, #1]
		for (size_t idx = 0; idx < buf_size; idx += rgb_size) {
    c69e:	d1f7      	bne.n	c690 <main+0xec>
		switch (cnt % 4) {
    c6a0:	2a02      	cmp	r2, #2
    c6a2:	d01f      	beq.n	c6e4 <main+0x140>
    c6a4:	2a03      	cmp	r2, #3
    c6a6:	d025      	beq.n	c6f4 <main+0x150>
    c6a8:	2a01      	cmp	r2, #1
    c6aa:	d00d      	beq.n	c6c8 <main+0x124>
			display_write(display_dev, x0, y0, &buf_desc, buf);
    c6ac:	2200      	movs	r2, #0
    c6ae:	9500      	str	r5, [sp, #0]
    c6b0:	ab03      	add	r3, sp, #12
			display_write(display_dev, x3, y3, &buf_desc, buf);
    c6b2:	2100      	movs	r1, #0
    c6b4:	e00e      	b.n	c6d4 <main+0x130>
		display_write(display_dev, 0, idx, &buf_desc,  buf);
    c6b6:	b2b2      	uxth	r2, r6
    c6b8:	9500      	str	r5, [sp, #0]
    c6ba:	ab03      	add	r3, sp, #12
    c6bc:	2100      	movs	r1, #0
    c6be:	4620      	mov	r0, r4
    c6c0:	f004 faae 	bl	10c20 <display_write>
	for (int idx = 0; idx < capabilities.y_resolution; idx += h_step) {
    c6c4:	443e      	add	r6, r7
    c6c6:	e7c3      	b.n	c650 <main+0xac>
			display_write(display_dev, x1, y1, &buf_desc, buf);
    c6c8:	2200      	movs	r2, #0
    c6ca:	f1a8 0128 	sub.w	r1, r8, #40	; 0x28
    c6ce:	9500      	str	r5, [sp, #0]
    c6d0:	ab03      	add	r3, sp, #12
			display_write(display_dev, x2, y2, &buf_desc, buf);
    c6d2:	b289      	uxth	r1, r1
			display_write(display_dev, x3, y3, &buf_desc, buf);
    c6d4:	4620      	mov	r0, r4
    c6d6:	f004 faa3 	bl	10c20 <display_write>
		++cnt;
    c6da:	3601      	adds	r6, #1
	if (z_syscall_trap()) {
		return (s32_t) z_arch_syscall_invoke1(*(u32_t *)&ms, K_SYSCALL_K_SLEEP);
	}
#endif
	compiler_barrier();
	return z_impl_k_sleep(ms);
    c6dc:	2064      	movs	r0, #100	; 0x64
    c6de:	f005 fd04 	bl	120ea <z_impl_k_sleep>
    c6e2:	e7c4      	b.n	c66e <main+0xca>
			display_write(display_dev, x2, y2, &buf_desc, buf);
    c6e4:	f1a9 0214 	sub.w	r2, r9, #20
    c6e8:	f1a8 0128 	sub.w	r1, r8, #40	; 0x28
    c6ec:	9500      	str	r5, [sp, #0]
    c6ee:	ab03      	add	r3, sp, #12
    c6f0:	b292      	uxth	r2, r2
    c6f2:	e7ee      	b.n	c6d2 <main+0x12e>
			display_write(display_dev, x3, y3, &buf_desc, buf);
    c6f4:	f1a9 0214 	sub.w	r2, r9, #20
    c6f8:	9500      	str	r5, [sp, #0]
    c6fa:	ab03      	add	r3, sp, #12
    c6fc:	b292      	uxth	r2, r2
    c6fe:	e7d8      	b.n	c6b2 <main+0x10e>
		color_r = (color == 0) ? 0xF800U : 0U;
    c700:	f44f 4378 	mov.w	r3, #63488	; 0xf800
    c704:	4610      	mov	r0, r2
		color_b = (color == 2) ? 0x001FU : 0U;
    c706:	4611      	mov	r1, r2
		color_rgb = color_r + color_g + color_b;
    c708:	4401      	add	r1, r0
    c70a:	440b      	add	r3, r1
    c70c:	b29b      	uxth	r3, r3
    c70e:	e7bc      	b.n	c68a <main+0xe6>
		color_r = (color == 0) ? 0xF800U : 0U;
    c710:	2300      	movs	r3, #0
		color_g = (color == 1) ? 0x07E0U : 0U;
    c712:	f44f 60fc 	mov.w	r0, #2016	; 0x7e0
		color_b = (color == 2) ? 0x001FU : 0U;
    c716:	4619      	mov	r1, r3
    c718:	e7f6      	b.n	c708 <main+0x164>
		color_r = (color == 0) ? 0xF800U : 0U;
    c71a:	2300      	movs	r3, #0
		color_b = (color == 2) ? 0x001FU : 0U;
    c71c:	211f      	movs	r1, #31
    c71e:	4618      	mov	r0, r3
    c720:	e7f2      	b.n	c708 <main+0x164>
    c722:	bf00      	nop
    c724:	00012550 	.word	0x00012550
    c728:	00012550 	.word	0x00012550
    c72c:	00012714 	.word	0x00012714
    c730:	0001272b 	.word	0x0001272b
    c734:	00012731 	.word	0x00012731
    c738:	00012752 	.word	0x00012752
    c73c:	00140028 	.word	0x00140028

0000c740 <char_out>:

static int char_out(int c, void *ctx_p)
{
	struct out_context *ctx = ctx_p;

	ctx->count++;
    c740:	680b      	ldr	r3, [r1, #0]
    c742:	3301      	adds	r3, #1
    c744:	600b      	str	r3, [r1, #0]
	return _char_out(c);
    c746:	4b01      	ldr	r3, [pc, #4]	; (c74c <char_out+0xc>)
    c748:	681b      	ldr	r3, [r3, #0]
    c74a:	4718      	bx	r3
    c74c:	2002581c 	.word	0x2002581c

0000c750 <_printk_dec_ulong>:
 * @return N/A
 */
static void _printk_dec_ulong(out_func_t out, void *ctx,
			      const unsigned long num, enum pad_type padding,
			      int min_width)
{
    c750:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    c754:	b085      	sub	sp, #20
    c756:	9c0e      	ldr	r4, [sp, #56]	; 0x38
    c758:	469b      	mov	fp, r3
    c75a:	2c01      	cmp	r4, #1
    c75c:	bfb8      	it	lt
    c75e:	2401      	movlt	r4, #1
    c760:	2b01      	cmp	r3, #1
    c762:	bf0c      	ite	eq
    c764:	2330      	moveq	r3, #48	; 0x30
    c766:	2320      	movne	r3, #32
    c768:	4616      	mov	r6, r2
    c76a:	4682      	mov	sl, r0
    c76c:	4688      	mov	r8, r1
    c76e:	2501      	movs	r5, #1
    c770:	270a      	movs	r7, #10
    c772:	2200      	movs	r2, #0
    c774:	f8df 906c 	ldr.w	r9, [pc, #108]	; c7e4 <_printk_dec_ulong+0x94>
    c778:	9302      	str	r3, [sp, #8]
    c77a:	fbb6 f3f9 	udiv	r3, r6, r9
    c77e:	9301      	str	r3, [sp, #4]
	if (min_width <= 0) {
		min_width = 1;
	}

	while (pos >= 10) {
		if (found_largest_digit != 0 || remainder >= pos) {
    c780:	b90a      	cbnz	r2, c786 <_printk_dec_ulong+0x36>
    c782:	45b1      	cmp	r9, r6
    c784:	d81c      	bhi.n	c7c0 <_printk_dec_ulong+0x70>
			found_largest_digit = 1;
			out((int)(remainder / pos + 48), ctx);
    c786:	9b01      	ldr	r3, [sp, #4]
    c788:	4641      	mov	r1, r8
    c78a:	f103 0030 	add.w	r0, r3, #48	; 0x30
    c78e:	47d0      	blx	sl
			found_largest_digit = 1;
    c790:	2201      	movs	r2, #1
			digits++;
    c792:	3501      	adds	r5, #1
				&& padding < PAD_SPACE_AFTER) {
			out((int)(padding == PAD_ZERO_BEFORE ? '0' : ' '), ctx);
			digits++;
		}
		remaining--;
		remainder %= pos;
    c794:	9b01      	ldr	r3, [sp, #4]
		remaining--;
    c796:	3f01      	subs	r7, #1
		remainder %= pos;
    c798:	fb09 6613 	mls	r6, r9, r3, r6
		pos /= 10;
    c79c:	230a      	movs	r3, #10
	while (pos >= 10) {
    c79e:	2f01      	cmp	r7, #1
		pos /= 10;
    c7a0:	fbb9 f9f3 	udiv	r9, r9, r3
	while (pos >= 10) {
    c7a4:	d1e9      	bne.n	c77a <_printk_dec_ulong+0x2a>
	}
	out((int)(remainder + 48), ctx);
    c7a6:	4641      	mov	r1, r8
    c7a8:	f106 0030 	add.w	r0, r6, #48	; 0x30
    c7ac:	47d0      	blx	sl

	if (padding == PAD_SPACE_AFTER) {
    c7ae:	f1bb 0f03 	cmp.w	fp, #3
    c7b2:	d102      	bne.n	c7ba <_printk_dec_ulong+0x6a>
		remaining = min_width - digits;
    c7b4:	1b64      	subs	r4, r4, r5
		while (remaining-- > 0) {
    c7b6:	2c00      	cmp	r4, #0
    c7b8:	dc0e      	bgt.n	c7d8 <_printk_dec_ulong+0x88>
			out(' ', ctx);
		}
	}
}
    c7ba:	b005      	add	sp, #20
    c7bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		} else if (remaining <= min_width
    c7c0:	42bc      	cmp	r4, r7
    c7c2:	dbe7      	blt.n	c794 <_printk_dec_ulong+0x44>
				&& padding < PAD_SPACE_AFTER) {
    c7c4:	f1bb 0f02 	cmp.w	fp, #2
    c7c8:	d8e4      	bhi.n	c794 <_printk_dec_ulong+0x44>
			out((int)(padding == PAD_ZERO_BEFORE ? '0' : ' '), ctx);
    c7ca:	4641      	mov	r1, r8
    c7cc:	9802      	ldr	r0, [sp, #8]
    c7ce:	9203      	str	r2, [sp, #12]
			digits++;
    c7d0:	3501      	adds	r5, #1
			out((int)(padding == PAD_ZERO_BEFORE ? '0' : ' '), ctx);
    c7d2:	47d0      	blx	sl
			digits++;
    c7d4:	9a03      	ldr	r2, [sp, #12]
    c7d6:	e7dd      	b.n	c794 <_printk_dec_ulong+0x44>
			out(' ', ctx);
    c7d8:	4641      	mov	r1, r8
    c7da:	2020      	movs	r0, #32
    c7dc:	47d0      	blx	sl
    c7de:	3c01      	subs	r4, #1
    c7e0:	e7e9      	b.n	c7b6 <_printk_dec_ulong+0x66>
    c7e2:	bf00      	nop
    c7e4:	3b9aca00 	.word	0x3b9aca00

0000c7e8 <__printk_hook_install>:
	_char_out = fn;
    c7e8:	4b01      	ldr	r3, [pc, #4]	; (c7f0 <__printk_hook_install+0x8>)
    c7ea:	6018      	str	r0, [r3, #0]
}
    c7ec:	4770      	bx	lr
    c7ee:	bf00      	nop
    c7f0:	2002581c 	.word	0x2002581c

0000c7f4 <vprintk>:
	struct out_context ctx = { 0 };
    c7f4:	2300      	movs	r3, #0
{
    c7f6:	b513      	push	{r0, r1, r4, lr}
	struct out_context ctx = { 0 };
    c7f8:	ac02      	add	r4, sp, #8
    c7fa:	f844 3d04 	str.w	r3, [r4, #-4]!
	z_vprintk(char_out, &ctx, fmt, ap);
    c7fe:	4602      	mov	r2, r0
    c800:	460b      	mov	r3, r1
    c802:	4803      	ldr	r0, [pc, #12]	; (c810 <vprintk+0x1c>)
    c804:	4621      	mov	r1, r4
    c806:	f004 fb5e 	bl	10ec6 <z_vprintk>
}
    c80a:	b002      	add	sp, #8
    c80c:	bd10      	pop	{r4, pc}
    c80e:	bf00      	nop
    c810:	0000c741 	.word	0x0000c741

0000c814 <nordicsemi_nrf91_init>:
		:
		: "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	unsigned int tmp;

	__asm__ volatile(
    c814:	f04f 0220 	mov.w	r2, #32
    c818:	f3ef 8311 	mrs	r3, BASEPRI
    c81c:	f382 8811 	msr	BASEPRI, r2
    c820:	f3bf 8f6f 	isb	sy

	key = irq_lock();

#ifdef CONFIG_NRF_ENABLE_ICACHE
	/* Enable the instruction cache */
	NRF_NVMC->ICACHECNF = NVMC_ICACHECNF_CACHEEN_Msk;
    c824:	2101      	movs	r1, #1
    c826:	4a04      	ldr	r2, [pc, #16]	; (c838 <nordicsemi_nrf91_init+0x24>)
    c828:	f8c2 1540 	str.w	r1, [r2, #1344]	; 0x540
	__asm__ volatile(
		"cpsie i;"
		"isb"
		: : : "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile(
    c82c:	f383 8811 	msr	BASEPRI, r3
    c830:	f3bf 8f6f 	isb	sy
	NMI_INIT();

	irq_unlock(key);

	return 0;
}
    c834:	2000      	movs	r0, #0
    c836:	4770      	bx	lr
    c838:	40039000 	.word	0x40039000

0000c83c <z_arch_busy_wait>:

#else // NRFX_CHECK(NRFX_DELAY_DWT_BASED)

__STATIC_INLINE void nrfx_coredep_delay_us(uint32_t time_us)
{
    if (time_us == 0)
    c83c:	b120      	cbz	r0, c848 <z_arch_busy_wait+0xc>
    };

    typedef void (* delay_func_t)(uint32_t);
    const delay_func_t delay_cycles =
        // Set LSB to 1 to execute the code in the Thumb mode.
        (delay_func_t)((((uint32_t)delay_machine_code) | 1));
    c83e:	4b03      	ldr	r3, [pc, #12]	; (c84c <z_arch_busy_wait+0x10>)
    uint32_t cycles = time_us * NRFX_DELAY_CPU_FREQ_MHZ;
    delay_cycles(cycles);
    c840:	0180      	lsls	r0, r0, #6
    c842:	f043 0301 	orr.w	r3, r3, #1
    c846:	4718      	bx	r3

void z_arch_busy_wait(u32_t time_us)
{
	nrfx_coredep_delay_us(time_us);
}
    c848:	4770      	bx	lr
    c84a:	bf00      	nop
    c84c:	000125b0 	.word	0x000125b0

0000c850 <log_process_thread_timer_expiry_fn>:
		z_arch_syscall_invoke1(*(u32_t *)&sem, K_SYSCALL_K_SEM_GIVE);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_sem_give(sem);
    c850:	4801      	ldr	r0, [pc, #4]	; (c858 <log_process_thread_timer_expiry_fn+0x8>)
    c852:	f003 bf8d 	b.w	10770 <z_impl_k_sem_give>
    c856:	bf00      	nop
    c858:	20025948 	.word	0x20025948

0000c85c <enable_logger>:

K_THREAD_STACK_DEFINE(logging_stack, CONFIG_LOG_PROCESS_THREAD_STACK_SIZE);
struct k_thread logging_thread;

static int enable_logger(struct device *arg)
{
    c85c:	b530      	push	{r4, r5, lr}
	ARG_UNUSED(arg);

	if (IS_ENABLED(CONFIG_LOG_PROCESS_THREAD)) {
		k_timer_init(&log_process_thread_timer,
    c85e:	2200      	movs	r2, #0
{
    c860:	b087      	sub	sp, #28
		k_timer_init(&log_process_thread_timer,
    c862:	490d      	ldr	r1, [pc, #52]	; (c898 <enable_logger+0x3c>)
    c864:	480d      	ldr	r0, [pc, #52]	; (c89c <enable_logger+0x40>)
    c866:	f005 fce8 	bl	1223a <k_timer_init>
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
    c86a:	2400      	movs	r4, #0
    c86c:	230e      	movs	r3, #14
    c86e:	4d0c      	ldr	r5, [pc, #48]	; (c8a0 <enable_logger+0x44>)
    c870:	e9cd 4302 	strd	r4, r3, [sp, #8]
    c874:	e9cd 4404 	strd	r4, r4, [sp, #16]
    c878:	e9cd 4400 	strd	r4, r4, [sp]
    c87c:	4b09      	ldr	r3, [pc, #36]	; (c8a4 <enable_logger+0x48>)
    c87e:	f44f 7240 	mov.w	r2, #768	; 0x300
    c882:	4909      	ldr	r1, [pc, #36]	; (c8a8 <enable_logger+0x4c>)
    c884:	4628      	mov	r0, r5
    c886:	f003 fffb 	bl	10880 <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread_id, value);
    c88a:	4908      	ldr	r1, [pc, #32]	; (c8ac <enable_logger+0x50>)
    c88c:	4628      	mov	r0, r5
    c88e:	f005 fc56 	bl	1213e <z_impl_k_thread_name_set>
	} else {
		log_init();
	}

	return 0;
}
    c892:	4620      	mov	r0, r4
    c894:	b007      	add	sp, #28
    c896:	bd30      	pop	{r4, r5, pc}
    c898:	0000c851 	.word	0x0000c851
    c89c:	2002001c 	.word	0x2002001c
    c8a0:	20020064 	.word	0x20020064
    c8a4:	0000cc2d 	.word	0x0000cc2d
    c8a8:	20024338 	.word	0x20024338
    c8ac:	00012793 	.word	0x00012793

0000c8b0 <log_core_init>:
{
    c8b0:	b508      	push	{r3, lr}
		log_msg_pool_init();
    c8b2:	f000 fa4b 	bl	cd4c <log_msg_pool_init>
		log_list_init(&list);
    c8b6:	4809      	ldr	r0, [pc, #36]	; (c8dc <log_core_init+0x2c>)
    c8b8:	f004 fc8b 	bl	111d2 <log_list_init>
		k_mem_slab_init(&log_strdup_pool, log_strdup_pool_buf,
    c8bc:	2304      	movs	r3, #4
    c8be:	2228      	movs	r2, #40	; 0x28
    c8c0:	4807      	ldr	r0, [pc, #28]	; (c8e0 <log_core_init+0x30>)
    c8c2:	4908      	ldr	r1, [pc, #32]	; (c8e4 <log_core_init+0x34>)
    c8c4:	f005 fb2c 	bl	11f20 <k_mem_slab_init>
		timestamp_func = k_cycle_get_32_wrapper;
    c8c8:	4b07      	ldr	r3, [pc, #28]	; (c8e8 <log_core_init+0x38>)
    c8ca:	4a08      	ldr	r2, [pc, #32]	; (c8ec <log_core_init+0x3c>)
	log_output_timestamp_freq_set(freq);
    c8cc:	f44f 4000 	mov.w	r0, #32768	; 0x8000
		timestamp_func = k_cycle_get_32_wrapper;
    c8d0:	601a      	str	r2, [r3, #0]
}
    c8d2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	log_output_timestamp_freq_set(freq);
    c8d6:	f000 bc6f 	b.w	d1b8 <log_output_timestamp_freq_set>
    c8da:	bf00      	nop
    c8dc:	20020014 	.word	0x20020014
    c8e0:	20020048 	.word	0x20020048
    c8e4:	20025378 	.word	0x20025378
    c8e8:	20025820 	.word	0x20025820
    c8ec:	00011211 	.word	0x00011211

0000c8f0 <dropped_notify>:
{
    c8f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
{
	/* This builtin, as described by Intel, is not a traditional
	 * test-and-set operation, but rather an atomic exchange operation. It
	 * writes value into *ptr, and returns the previous contents of *ptr.
	 */
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    c8f2:	2500      	movs	r5, #0
    c8f4:	4b0c      	ldr	r3, [pc, #48]	; (c928 <dropped_notify+0x38>)
    c8f6:	e8d3 7fef 	ldaex	r7, [r3]
    c8fa:	e8c3 5fe2 	stlex	r2, r5, [r3]
    c8fe:	2a00      	cmp	r2, #0
    c900:	d1f9      	bne.n	c8f6 <dropped_notify+0x6>
 *
 * @return Number of backends.
 */
static inline int log_backend_count_get(void)
{
	return __log_backends_end - __log_backends_start;
    c902:	4c0a      	ldr	r4, [pc, #40]	; (c92c <dropped_notify+0x3c>)
    c904:	4e0a      	ldr	r6, [pc, #40]	; (c930 <dropped_notify+0x40>)
    c906:	1b36      	subs	r6, r6, r4
    c908:	1136      	asrs	r6, r6, #4
	for (int i = 0; i < log_backend_count_get(); i++) {
    c90a:	42b5      	cmp	r5, r6
    c90c:	db00      	blt.n	c910 <dropped_notify+0x20>
}
    c90e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 */
static inline bool log_backend_is_active(
				const struct log_backend *const backend)
{
	__ASSERT_NO_MSG(backend != NULL);
	return backend->cb->active;
    c910:	6863      	ldr	r3, [r4, #4]
		if (log_backend_is_active(backend)) {
    c912:	795b      	ldrb	r3, [r3, #5]
    c914:	b12b      	cbz	r3, c922 <dropped_notify+0x32>
	if (backend->api->dropped != NULL) {
    c916:	6823      	ldr	r3, [r4, #0]
    c918:	68db      	ldr	r3, [r3, #12]
    c91a:	b113      	cbz	r3, c922 <dropped_notify+0x32>
		backend->api->dropped(backend, cnt);
    c91c:	4639      	mov	r1, r7
    c91e:	4620      	mov	r0, r4
    c920:	4798      	blx	r3
	for (int i = 0; i < log_backend_count_get(); i++) {
    c922:	3501      	adds	r5, #1
    c924:	3410      	adds	r4, #16
    c926:	e7f0      	b.n	c90a <dropped_notify+0x1a>
    c928:	2002000c 	.word	0x2002000c
    c92c:	000125a0 	.word	0x000125a0
    c930:	000125b0 	.word	0x000125b0

0000c934 <log_dropped>:
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
    c934:	4b04      	ldr	r3, [pc, #16]	; (c948 <log_dropped+0x14>)
    c936:	e8d3 2fef 	ldaex	r2, [r3]
    c93a:	3201      	adds	r2, #1
    c93c:	e8c3 2fe1 	stlex	r1, r2, [r3]
    c940:	2900      	cmp	r1, #0
    c942:	d1f8      	bne.n	c936 <log_dropped+0x2>
}
    c944:	4770      	bx	lr
    c946:	bf00      	nop
    c948:	2002000c 	.word	0x2002000c

0000c94c <log_source_name_get>:
 * @return Source ID.
 */
static inline u32_t log_const_source_id(
				const struct log_source_const_data *data)
{
	return ((u8_t *)data - (u8_t *)__log_const_start)/
    c94c:	4a04      	ldr	r2, [pc, #16]	; (c960 <log_source_name_get+0x14>)
    c94e:	4b05      	ldr	r3, [pc, #20]	; (c964 <log_source_name_get+0x18>)
    c950:	1a9b      	subs	r3, r3, r2
	return src_id < log_sources_count() ? log_name_get(src_id) : NULL;
    c952:	ebb1 0fd3 	cmp.w	r1, r3, lsr #3
	return __log_const_start[source_id].name;
    c956:	bf34      	ite	cc
    c958:	f852 0031 	ldrcc.w	r0, [r2, r1, lsl #3]
    c95c:	2000      	movcs	r0, #0
}
    c95e:	4770      	bx	lr
    c960:	00012550 	.word	0x00012550
    c964:	000125a0 	.word	0x000125a0

0000c968 <log_backend_enable>:
	id += backend - log_backend_get(0);
    c968:	4b09      	ldr	r3, [pc, #36]	; (c990 <log_backend_enable+0x28>)
	log_backend_id_set(backend, id);
    c96a:	6842      	ldr	r2, [r0, #4]
	id += backend - log_backend_get(0);
    c96c:	1ac3      	subs	r3, r0, r3
    c96e:	111b      	asrs	r3, r3, #4
    c970:	3301      	adds	r3, #1
{
    c972:	b510      	push	{r4, lr}
	log_backend_id_set(backend, id);
    c974:	7113      	strb	r3, [r2, #4]
	backend->cb->active = true;
    c976:	2201      	movs	r2, #1
	log_backend_activate(backend, ctx);
    c978:	6843      	ldr	r3, [r0, #4]
	if (!backend_attached) {
    c97a:	4c06      	ldr	r4, [pc, #24]	; (c994 <log_backend_enable+0x2c>)
    c97c:	715a      	strb	r2, [r3, #5]
    c97e:	7822      	ldrb	r2, [r4, #0]
	backend->cb->ctx = ctx;
    c980:	6019      	str	r1, [r3, #0]
    c982:	b912      	cbnz	r2, c98a <log_backend_enable+0x22>
	z_impl_k_sem_give(sem);
    c984:	4804      	ldr	r0, [pc, #16]	; (c998 <log_backend_enable+0x30>)
    c986:	f003 fef3 	bl	10770 <z_impl_k_sem_give>
	backend_attached = true;
    c98a:	2301      	movs	r3, #1
    c98c:	7023      	strb	r3, [r4, #0]
}
    c98e:	bd10      	pop	{r4, pc}
    c990:	000125a0 	.word	0x000125a0
    c994:	2002432c 	.word	0x2002432c
    c998:	20025948 	.word	0x20025948

0000c99c <log_init>:
{
    c99c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    c99e:	4b0f      	ldr	r3, [pc, #60]	; (c9dc <log_init+0x40>)
    c9a0:	e8d3 4fef 	ldaex	r4, [r3]
    c9a4:	1c62      	adds	r2, r4, #1
    c9a6:	e8c3 2fe1 	stlex	r1, r2, [r3]
    c9aa:	2900      	cmp	r1, #0
    c9ac:	d1f8      	bne.n	c9a0 <log_init+0x4>
	if (atomic_inc(&initialized) != 0) {
    c9ae:	b92c      	cbnz	r4, c9bc <log_init+0x20>
	return __log_backends_end - __log_backends_start;
    c9b0:	4d0b      	ldr	r5, [pc, #44]	; (c9e0 <log_init+0x44>)
    c9b2:	4e0c      	ldr	r6, [pc, #48]	; (c9e4 <log_init+0x48>)
    c9b4:	1b76      	subs	r6, r6, r5
    c9b6:	1136      	asrs	r6, r6, #4
	for (i = 0; i < log_backend_count_get(); i++) {
    c9b8:	42b4      	cmp	r4, r6
    c9ba:	db00      	blt.n	c9be <log_init+0x22>
}
    c9bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    c9be:	0127      	lsls	r7, r4, #4
		if (backend->autostart) {
    c9c0:	19eb      	adds	r3, r5, r7
    c9c2:	7b1b      	ldrb	r3, [r3, #12]
    c9c4:	b143      	cbz	r3, c9d8 <log_init+0x3c>
			if (backend->api->init != NULL) {
    c9c6:	59eb      	ldr	r3, [r5, r7]
    c9c8:	695b      	ldr	r3, [r3, #20]
    c9ca:	b103      	cbz	r3, c9ce <log_init+0x32>
				backend->api->init();
    c9cc:	4798      	blx	r3
			log_backend_enable(backend, NULL, CONFIG_LOG_MAX_LEVEL);
    c9ce:	2204      	movs	r2, #4
    c9d0:	2100      	movs	r1, #0
    c9d2:	19e8      	adds	r0, r5, r7
    c9d4:	f7ff ffc8 	bl	c968 <log_backend_enable>
	for (i = 0; i < log_backend_count_get(); i++) {
    c9d8:	3401      	adds	r4, #1
    c9da:	e7ed      	b.n	c9b8 <log_init+0x1c>
    c9dc:	20020010 	.word	0x20020010
    c9e0:	000125a0 	.word	0x000125a0
    c9e4:	000125b0 	.word	0x000125b0

0000c9e8 <log_strdup>:
	return (((const char *)addr >= (const char *)RO_START) &&
    c9e8:	4b14      	ldr	r3, [pc, #80]	; (ca3c <log_strdup+0x54>)
{
    c9ea:	b537      	push	{r0, r1, r2, r4, r5, lr}
	return (((const char *)addr >= (const char *)RO_START) &&
    c9ec:	4298      	cmp	r0, r3
{
    c9ee:	4604      	mov	r4, r0
	return (((const char *)addr >= (const char *)RO_START) &&
    c9f0:	d302      	bcc.n	c9f8 <log_strdup+0x10>
	if (IS_ENABLED(CONFIG_LOG_IMMEDIATE) ||
    c9f2:	4b13      	ldr	r3, [pc, #76]	; (ca40 <log_strdup+0x58>)
    c9f4:	4298      	cmp	r0, r3
    c9f6:	d31b      	bcc.n	ca30 <log_strdup+0x48>
	err = k_mem_slab_alloc(&log_strdup_pool, (void **)&dup, K_NO_WAIT);
    c9f8:	2200      	movs	r2, #0
    c9fa:	a901      	add	r1, sp, #4
    c9fc:	4811      	ldr	r0, [pc, #68]	; (ca44 <log_strdup+0x5c>)
    c9fe:	f003 fb5d 	bl	100bc <k_mem_slab_alloc>
	if (err != 0) {
    ca02:	4605      	mov	r5, r0
    ca04:	b9b8      	cbnz	r0, ca36 <log_strdup+0x4e>
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    ca06:	2201      	movs	r2, #1
    ca08:	9b01      	ldr	r3, [sp, #4]
    ca0a:	e8d3 1fef 	ldaex	r1, [r3]
    ca0e:	e8c3 2fe0 	stlex	r0, r2, [r3]
    ca12:	2800      	cmp	r0, #0
    ca14:	d1f9      	bne.n	ca0a <log_strdup+0x22>
	strncpy(dup->buf, str, sizeof(dup->buf) - 2);
    ca16:	9801      	ldr	r0, [sp, #4]
    ca18:	4621      	mov	r1, r4
    ca1a:	221f      	movs	r2, #31
    ca1c:	3004      	adds	r0, #4
    ca1e:	f005 f83b 	bl	11a98 <strncpy>
	dup->buf[sizeof(dup->buf) - 2] = '~';
    ca22:	237e      	movs	r3, #126	; 0x7e
    ca24:	9c01      	ldr	r4, [sp, #4]
    ca26:	f884 3023 	strb.w	r3, [r4, #35]	; 0x23
	dup->buf[sizeof(dup->buf) - 1] = '\0';
    ca2a:	f884 5024 	strb.w	r5, [r4, #36]	; 0x24
	return dup->buf;
    ca2e:	3404      	adds	r4, #4
}
    ca30:	4620      	mov	r0, r4
    ca32:	b003      	add	sp, #12
    ca34:	bd30      	pop	{r4, r5, pc}
		return (char *)log_strdup_fail_msg;
    ca36:	4c04      	ldr	r4, [pc, #16]	; (ca48 <log_strdup+0x60>)
    ca38:	e7fa      	b.n	ca30 <log_strdup+0x48>
    ca3a:	bf00      	nop
    ca3c:	000122ac 	.word	0x000122ac
    ca40:	000130e8 	.word	0x000130e8
    ca44:	20020048 	.word	0x20020048
    ca48:	0001279b 	.word	0x0001279b

0000ca4c <log_is_strdup>:
	return PART_OF_ARRAY(log_strdup_pool_buf, (u8_t *)buf);
    ca4c:	b148      	cbz	r0, ca62 <log_is_strdup+0x16>
    ca4e:	4b05      	ldr	r3, [pc, #20]	; (ca64 <log_is_strdup+0x18>)
    ca50:	4298      	cmp	r0, r3
    ca52:	d305      	bcc.n	ca60 <log_is_strdup+0x14>
    ca54:	33a0      	adds	r3, #160	; 0xa0
    ca56:	4298      	cmp	r0, r3
    ca58:	bf2c      	ite	cs
    ca5a:	2000      	movcs	r0, #0
    ca5c:	2001      	movcc	r0, #1
    ca5e:	4770      	bx	lr
    ca60:	2000      	movs	r0, #0
}
    ca62:	4770      	bx	lr
    ca64:	20025378 	.word	0x20025378

0000ca68 <z_impl_log_process>:
{
    ca68:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (!backend_attached && !bypass) {
    ca6c:	4b50      	ldr	r3, [pc, #320]	; (cbb0 <z_impl_log_process+0x148>)
{
    ca6e:	4604      	mov	r4, r0
	if (!backend_attached && !bypass) {
    ca70:	781b      	ldrb	r3, [r3, #0]
    ca72:	b903      	cbnz	r3, ca76 <z_impl_log_process+0xe>
    ca74:	b340      	cbz	r0, cac8 <z_impl_log_process+0x60>
	__asm__ volatile(
    ca76:	f04f 0320 	mov.w	r3, #32
    ca7a:	f3ef 8611 	mrs	r6, BASEPRI
    ca7e:	f383 8811 	msr	BASEPRI, r3
    ca82:	f3bf 8f6f 	isb	sy
	msg = log_list_head_get(&list);
    ca86:	484b      	ldr	r0, [pc, #300]	; (cbb4 <z_impl_log_process+0x14c>)
    ca88:	f004 fbb3 	bl	111f2 <log_list_head_get>
    ca8c:	4605      	mov	r5, r0
	__asm__ volatile(
    ca8e:	f386 8811 	msr	BASEPRI, r6
    ca92:	f3bf 8f6f 	isb	sy
	if (msg != NULL) {
    ca96:	b158      	cbz	r0, cab0 <z_impl_log_process+0x48>
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
    ca98:	4b47      	ldr	r3, [pc, #284]	; (cbb8 <z_impl_log_process+0x150>)
    ca9a:	e8d3 2fef 	ldaex	r2, [r3]
    ca9e:	3a01      	subs	r2, #1
    caa0:	e8c3 2fe1 	stlex	r1, r2, [r3]
    caa4:	2900      	cmp	r1, #0
    caa6:	d1f8      	bne.n	ca9a <z_impl_log_process+0x32>
	if (!bypass) {
    caa8:	b18c      	cbz	r4, cace <z_impl_log_process+0x66>
	log_msg_put(msg);
    caaa:	4628      	mov	r0, r5
    caac:	f004 fc8e 	bl	113cc <log_msg_put>
	if (!bypass && dropped_cnt) {
    cab0:	b924      	cbnz	r4, cabc <z_impl_log_process+0x54>
    cab2:	4b42      	ldr	r3, [pc, #264]	; (cbbc <z_impl_log_process+0x154>)
    cab4:	681b      	ldr	r3, [r3, #0]
    cab6:	b10b      	cbz	r3, cabc <z_impl_log_process+0x54>
		dropped_notify();
    cab8:	f7ff ff1a 	bl	c8f0 <dropped_notify>
	return (log_list_head_peek(&list) != NULL);
    cabc:	483d      	ldr	r0, [pc, #244]	; (cbb4 <z_impl_log_process+0x14c>)
    cabe:	f004 fb96 	bl	111ee <log_list_head_peek>
    cac2:	1c04      	adds	r4, r0, #0
    cac4:	bf18      	it	ne
    cac6:	2401      	movne	r4, #1
}
    cac8:	4620      	mov	r0, r4
    caca:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		    !panic_mode) {
    cace:	4b3c      	ldr	r3, [pc, #240]	; (cbc0 <z_impl_log_process+0x158>)
    cad0:	781b      	ldrb	r3, [r3, #0]
		if (IS_ENABLED(CONFIG_LOG_DETECT_MISSED_STRDUP) &&
    cad2:	b9db      	cbnz	r3, cb0c <z_impl_log_process+0xa4>
 * @retval true  Standard message.
 * @retval false Hexdump message.
 */
static inline bool log_msg_is_std(struct log_msg *msg)
{
	return  (msg->hdr.params.generic.type == LOG_MSG_TYPE_STD);
    cad4:	7a2b      	ldrb	r3, [r5, #8]
	if (!log_msg_is_std(msg)) {
    cad6:	07db      	lsls	r3, r3, #31
    cad8:	d418      	bmi.n	cb0c <z_impl_log_process+0xa4>
	msg_str = log_msg_str_get(msg);
    cada:	f004 fc86 	bl	113ea <log_msg_str_get>
    cade:	4681      	mov	r9, r0
	mask = count_s(msg_str, log_msg_nargs_get(msg));
    cae0:	4628      	mov	r0, r5
    cae2:	f004 fc53 	bl	1138c <log_msg_nargs_get>
	u32_t mask = 0;
    cae6:	4626      	mov	r6, r4
	bool arm = false;
    cae8:	4622      	mov	r2, r4
	mask = count_s(msg_str, log_msg_nargs_get(msg));
    caea:	46cc      	mov	ip, r9
	u32_t arg = 0;
    caec:	4623      	mov	r3, r4
				mask |= BIT(arg);
    caee:	f04f 0e01 	mov.w	lr, #1
	while ((curr = *str++) && arg < nargs) {
    caf2:	f81c 1b01 	ldrb.w	r1, [ip], #1
    caf6:	b109      	cbz	r1, cafc <z_impl_log_process+0x94>
    caf8:	4298      	cmp	r0, r3
    cafa:	d80e      	bhi.n	cb1a <z_impl_log_process+0xb2>
	return ((u8_t *)data - (u8_t *)__log_const_start)/
    cafc:	4b31      	ldr	r3, [pc, #196]	; (cbc4 <z_impl_log_process+0x15c>)
				LOG_ERR(ERR_MSG, idx, msg_str);
    cafe:	4a32      	ldr	r2, [pc, #200]	; (cbc8 <z_impl_log_process+0x160>)
    cb00:	f8df b0dc 	ldr.w	fp, [pc, #220]	; cbe0 <z_impl_log_process+0x178>
    cb04:	1a9b      	subs	r3, r3, r2
    cb06:	f3c3 0ac9 	ubfx	sl, r3, #3, #10
	while (mask) {
    cb0a:	b9d6      	cbnz	r6, cb42 <z_impl_log_process+0xda>
    cb0c:	4e2f      	ldr	r6, [pc, #188]	; (cbcc <z_impl_log_process+0x164>)
    cb0e:	4f30      	ldr	r7, [pc, #192]	; (cbd0 <z_impl_log_process+0x168>)
    cb10:	f04f 0800 	mov.w	r8, #0
    cb14:	1bbf      	subs	r7, r7, r6
    cb16:	113f      	asrs	r7, r7, #4
    cb18:	e047      	b.n	cbaa <z_impl_log_process+0x142>
		if (curr == '%') {
    cb1a:	2925      	cmp	r1, #37	; 0x25
    cb1c:	d102      	bne.n	cb24 <z_impl_log_process+0xbc>
			arm = !arm;
    cb1e:	f082 0201 	eor.w	r2, r2, #1
    cb22:	e7e6      	b.n	caf2 <z_impl_log_process+0x8a>
		} else if (arm && isalpha(curr)) {
    cb24:	2a00      	cmp	r2, #0
    cb26:	d0e4      	beq.n	caf2 <z_impl_log_process+0x8a>
	return (int)(((unsigned)(a)-(unsigned)'A') < 26U);
}

static inline int isalpha(int c)
{
	return (int)((((unsigned)c|32u)-(unsigned)'a') < 26U);
    cb28:	f041 0720 	orr.w	r7, r1, #32
    cb2c:	3f61      	subs	r7, #97	; 0x61
    cb2e:	2f19      	cmp	r7, #25
    cb30:	d8df      	bhi.n	caf2 <z_impl_log_process+0x8a>
			if (curr == 's') {
    cb32:	2973      	cmp	r1, #115	; 0x73
				mask |= BIT(arg);
    cb34:	bf04      	itt	eq
    cb36:	fa0e f203 	lsleq.w	r2, lr, r3
    cb3a:	4316      	orreq	r6, r2
			arg++;
    cb3c:	3301      	adds	r3, #1
			arm = false;
    cb3e:	2200      	movs	r2, #0
    cb40:	e7d7      	b.n	caf2 <z_impl_log_process+0x8a>
		idx = 31 - __builtin_clz(mask);
    cb42:	fab6 f786 	clz	r7, r6
    cb46:	f1c7 071f 	rsb	r7, r7, #31
		str = (const char *)log_msg_arg_get(msg, idx);
    cb4a:	4639      	mov	r1, r7
    cb4c:	4628      	mov	r0, r5
    cb4e:	f004 fc20 	bl	11392 <log_msg_arg_get>
	return (((const char *)addr >= (const char *)RO_START) &&
    cb52:	4b20      	ldr	r3, [pc, #128]	; (cbd4 <z_impl_log_process+0x16c>)
		str = (const char *)log_msg_arg_get(msg, idx);
    cb54:	4602      	mov	r2, r0
	return (((const char *)addr >= (const char *)RO_START) &&
    cb56:	4298      	cmp	r0, r3
    cb58:	d302      	bcc.n	cb60 <z_impl_log_process+0xf8>
		if (!is_rodata(str) && !log_is_strdup(str) &&
    cb5a:	4b1f      	ldr	r3, [pc, #124]	; (cbd8 <z_impl_log_process+0x170>)
    cb5c:	4298      	cmp	r0, r3
    cb5e:	d313      	bcc.n	cb88 <z_impl_log_process+0x120>
    cb60:	4610      	mov	r0, r2
    cb62:	f7ff ff73 	bl	ca4c <log_is_strdup>
    cb66:	b978      	cbnz	r0, cb88 <z_impl_log_process+0x120>
    cb68:	4b1c      	ldr	r3, [pc, #112]	; (cbdc <z_impl_log_process+0x174>)
    cb6a:	429a      	cmp	r2, r3
    cb6c:	d00c      	beq.n	cb88 <z_impl_log_process+0x120>
				LOG_ERR(ERR_MSG, idx, msg_str);
    cb6e:	2301      	movs	r3, #1
    cb70:	f363 0802 	bfi	r8, r3, #0, #3
    cb74:	f360 08c5 	bfi	r8, r0, #3, #3
    cb78:	f36a 188f 	bfi	r8, sl, #6, #10
    cb7c:	4643      	mov	r3, r8
    cb7e:	464a      	mov	r2, r9
    cb80:	4639      	mov	r1, r7
    cb82:	4658      	mov	r0, fp
    cb84:	f004 fb69 	bl	1125a <log_2>
		mask &= ~BIT(idx);
    cb88:	2301      	movs	r3, #1
    cb8a:	fa03 f707 	lsl.w	r7, r3, r7
    cb8e:	ea26 0607 	bic.w	r6, r6, r7
    cb92:	e7ba      	b.n	cb0a <z_impl_log_process+0xa2>
	return backend->cb->active;
    cb94:	6873      	ldr	r3, [r6, #4]
			if (log_backend_is_active(backend) &&
    cb96:	795b      	ldrb	r3, [r3, #5]
    cb98:	b123      	cbz	r3, cba4 <z_impl_log_process+0x13c>
	backend->api->put(backend, msg);
    cb9a:	6833      	ldr	r3, [r6, #0]
    cb9c:	4629      	mov	r1, r5
    cb9e:	681b      	ldr	r3, [r3, #0]
    cba0:	4630      	mov	r0, r6
    cba2:	4798      	blx	r3
		for (int i = 0; i < log_backend_count_get(); i++) {
    cba4:	f108 0801 	add.w	r8, r8, #1
    cba8:	3610      	adds	r6, #16
    cbaa:	45b8      	cmp	r8, r7
    cbac:	dbf2      	blt.n	cb94 <z_impl_log_process+0x12c>
    cbae:	e77c      	b.n	caaa <z_impl_log_process+0x42>
    cbb0:	2002432c 	.word	0x2002432c
    cbb4:	20020014 	.word	0x20020014
    cbb8:	20020008 	.word	0x20020008
    cbbc:	2002000c 	.word	0x2002000c
    cbc0:	2002432d 	.word	0x2002432d
    cbc4:	00012568 	.word	0x00012568
    cbc8:	00012550 	.word	0x00012550
    cbcc:	000125a0 	.word	0x000125a0
    cbd0:	000125b0 	.word	0x000125b0
    cbd4:	000122ac 	.word	0x000122ac
    cbd8:	000130e8 	.word	0x000130e8
    cbdc:	0001279b 	.word	0x0001279b
    cbe0:	000127b9 	.word	0x000127b9

0000cbe4 <z_impl_log_panic>:
{
    cbe4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (panic_mode) {
    cbe6:	4f0e      	ldr	r7, [pc, #56]	; (cc20 <z_impl_log_panic+0x3c>)
    cbe8:	783d      	ldrb	r5, [r7, #0]
    cbea:	b975      	cbnz	r5, cc0a <z_impl_log_panic+0x26>
	log_init();
    cbec:	f7ff fed6 	bl	c99c <log_init>
	return __log_backends_end - __log_backends_start;
    cbf0:	4c0c      	ldr	r4, [pc, #48]	; (cc24 <z_impl_log_panic+0x40>)
    cbf2:	4e0d      	ldr	r6, [pc, #52]	; (cc28 <z_impl_log_panic+0x44>)
    cbf4:	1b36      	subs	r6, r6, r4
    cbf6:	1136      	asrs	r6, r6, #4
	for (int i = 0; i < log_backend_count_get(); i++) {
    cbf8:	42b5      	cmp	r5, r6
    cbfa:	db07      	blt.n	cc0c <z_impl_log_panic+0x28>
	if (z_syscall_trap()) {
		return (bool) z_arch_syscall_invoke1(*(u32_t *)&bypass, K_SYSCALL_LOG_PROCESS);
	}
#endif
	compiler_barrier();
	return z_impl_log_process(bypass);
    cbfc:	2000      	movs	r0, #0
    cbfe:	f7ff ff33 	bl	ca68 <z_impl_log_process>
		while (log_process(false) == true) {
    cc02:	2800      	cmp	r0, #0
    cc04:	d1fa      	bne.n	cbfc <z_impl_log_panic+0x18>
	panic_mode = true;
    cc06:	2301      	movs	r3, #1
    cc08:	703b      	strb	r3, [r7, #0]
}
    cc0a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return backend->cb->active;
    cc0c:	6863      	ldr	r3, [r4, #4]
		if (log_backend_is_active(backend)) {
    cc0e:	795b      	ldrb	r3, [r3, #5]
    cc10:	b11b      	cbz	r3, cc1a <z_impl_log_panic+0x36>
	backend->api->panic(backend);
    cc12:	6823      	ldr	r3, [r4, #0]
    cc14:	4620      	mov	r0, r4
    cc16:	691b      	ldr	r3, [r3, #16]
    cc18:	4798      	blx	r3
	for (int i = 0; i < log_backend_count_get(); i++) {
    cc1a:	3501      	adds	r5, #1
    cc1c:	3410      	adds	r4, #16
    cc1e:	e7eb      	b.n	cbf8 <z_impl_log_panic+0x14>
    cc20:	2002432d 	.word	0x2002432d
    cc24:	000125a0 	.word	0x000125a0
    cc28:	000125b0 	.word	0x000125b0

0000cc2c <log_process_thread_func>:
{
    cc2c:	b508      	push	{r3, lr}
	log_init();
    cc2e:	f7ff feb5 	bl	c99c <log_init>
	return z_impl_k_current_get();
    cc32:	f003 fd97 	bl	10764 <z_impl_k_current_get>
	proc_tid = process_tid;
    cc36:	4b0b      	ldr	r3, [pc, #44]	; (cc64 <log_process_thread_func+0x38>)
    cc38:	6018      	str	r0, [r3, #0]
	if (CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD &&
    cc3a:	b130      	cbz	r0, cc4a <log_process_thread_func+0x1e>
	    buffered_cnt >= CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD) {
    cc3c:	4b0a      	ldr	r3, [pc, #40]	; (cc68 <log_process_thread_func+0x3c>)
	    process_tid &&
    cc3e:	681b      	ldr	r3, [r3, #0]
    cc40:	2b09      	cmp	r3, #9
    cc42:	dd02      	ble.n	cc4a <log_process_thread_func+0x1e>
	z_impl_k_sem_give(sem);
    cc44:	4809      	ldr	r0, [pc, #36]	; (cc6c <log_process_thread_func+0x40>)
    cc46:	f003 fd93 	bl	10770 <z_impl_k_sem_give>
	return z_impl_k_sem_take(sem, timeout);
    cc4a:	4c08      	ldr	r4, [pc, #32]	; (cc6c <log_process_thread_func+0x40>)
    cc4c:	2000      	movs	r0, #0
    cc4e:	f7ff ff0b 	bl	ca68 <z_impl_log_process>
		if (log_process(false) == false) {
    cc52:	2800      	cmp	r0, #0
    cc54:	d1fa      	bne.n	cc4c <log_process_thread_func+0x20>
    cc56:	f04f 31ff 	mov.w	r1, #4294967295
    cc5a:	4620      	mov	r0, r4
    cc5c:	f003 fdae 	bl	107bc <z_impl_k_sem_take>
    cc60:	e7f4      	b.n	cc4c <log_process_thread_func+0x20>
    cc62:	bf00      	nop
    cc64:	200200d0 	.word	0x200200d0
    cc68:	20020008 	.word	0x20020008
    cc6c:	20025948 	.word	0x20025948

0000cc70 <msg_finalize>:
	msg->hdr.timestamp = timestamp_func();
    cc70:	4b24      	ldr	r3, [pc, #144]	; (cd04 <msg_finalize+0x94>)
{
    cc72:	b570      	push	{r4, r5, r6, lr}
	msg->hdr.timestamp = timestamp_func();
    cc74:	681b      	ldr	r3, [r3, #0]
	msg->hdr.ids = src_level;
    cc76:	8141      	strh	r1, [r0, #10]
{
    cc78:	4605      	mov	r5, r0
	msg->hdr.timestamp = timestamp_func();
    cc7a:	4798      	blx	r3
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
    cc7c:	4c22      	ldr	r4, [pc, #136]	; (cd08 <msg_finalize+0x98>)
    cc7e:	60e8      	str	r0, [r5, #12]
    cc80:	e8d4 3fef 	ldaex	r3, [r4]
    cc84:	3301      	adds	r3, #1
    cc86:	e8c4 3fe2 	stlex	r2, r3, [r4]
    cc8a:	2a00      	cmp	r2, #0
    cc8c:	d1f8      	bne.n	cc80 <msg_finalize+0x10>
	__asm__ volatile(
    cc8e:	f04f 0320 	mov.w	r3, #32
    cc92:	f3ef 8611 	mrs	r6, BASEPRI
    cc96:	f383 8811 	msr	BASEPRI, r3
    cc9a:	f3bf 8f6f 	isb	sy
	log_list_add_tail(&list, msg);
    cc9e:	481b      	ldr	r0, [pc, #108]	; (cd0c <msg_finalize+0x9c>)
    cca0:	4629      	mov	r1, r5
    cca2:	f004 fa9a 	bl	111da <log_list_add_tail>
	__asm__ volatile(
    cca6:	f386 8811 	msr	BASEPRI, r6
    ccaa:	f3bf 8f6f 	isb	sy
	if (panic_mode) {
    ccae:	4b18      	ldr	r3, [pc, #96]	; (cd10 <msg_finalize+0xa0>)
    ccb0:	781a      	ldrb	r2, [r3, #0]
    ccb2:	b17a      	cbz	r2, ccd4 <msg_finalize+0x64>
	__asm__ volatile(
    ccb4:	f04f 0320 	mov.w	r3, #32
    ccb8:	f3ef 8411 	mrs	r4, BASEPRI
    ccbc:	f383 8811 	msr	BASEPRI, r3
    ccc0:	f3bf 8f6f 	isb	sy
    ccc4:	2000      	movs	r0, #0
    ccc6:	f7ff fecf 	bl	ca68 <z_impl_log_process>
	__asm__ volatile(
    ccca:	f384 8811 	msr	BASEPRI, r4
    ccce:	f3bf 8f6f 	isb	sy
}
    ccd2:	bd70      	pop	{r4, r5, r6, pc}
	} else if (proc_tid != NULL && buffered_cnt == 1) {
    ccd4:	490f      	ldr	r1, [pc, #60]	; (cd14 <msg_finalize+0xa4>)
    ccd6:	6823      	ldr	r3, [r4, #0]
    ccd8:	6809      	ldr	r1, [r1, #0]
    ccda:	2900      	cmp	r1, #0
    ccdc:	d0f9      	beq.n	ccd2 <msg_finalize+0x62>
    ccde:	2b01      	cmp	r3, #1
    cce0:	d106      	bne.n	ccf0 <msg_finalize+0x80>
}
    cce2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	z_impl_k_timer_start(timer, duration, period);
    cce6:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
    ccea:	480b      	ldr	r0, [pc, #44]	; (cd18 <msg_finalize+0xa8>)
    ccec:	f003 bf6a 	b.w	10bc4 <z_impl_k_timer_start>
		if ((buffered_cnt == CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD) &&
    ccf0:	2b0a      	cmp	r3, #10
    ccf2:	d1ee      	bne.n	ccd2 <msg_finalize+0x62>
	z_impl_k_timer_stop(timer);
    ccf4:	4808      	ldr	r0, [pc, #32]	; (cd18 <msg_finalize+0xa8>)
    ccf6:	f005 faac 	bl	12252 <z_impl_k_timer_stop>
}
    ccfa:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	z_impl_k_sem_give(sem);
    ccfe:	4807      	ldr	r0, [pc, #28]	; (cd1c <msg_finalize+0xac>)
    cd00:	f003 bd36 	b.w	10770 <z_impl_k_sem_give>
    cd04:	20025820 	.word	0x20025820
    cd08:	20020008 	.word	0x20020008
    cd0c:	20020014 	.word	0x20020014
    cd10:	2002432d 	.word	0x2002432d
    cd14:	200200d0 	.word	0x200200d0
    cd18:	2002001c 	.word	0x2002001c
    cd1c:	20025948 	.word	0x20025948

0000cd20 <log_free>:
{
    cd20:	b507      	push	{r0, r1, r2, lr}
	struct log_strdup_buf *dup = CONTAINER_OF(str, struct log_strdup_buf,
    cd22:	3804      	subs	r0, #4
    cd24:	9001      	str	r0, [sp, #4]
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
    cd26:	e8d0 3fef 	ldaex	r3, [r0]
    cd2a:	1e5a      	subs	r2, r3, #1
    cd2c:	e8c0 2fe1 	stlex	r1, r2, [r0]
    cd30:	2900      	cmp	r1, #0
    cd32:	d1f8      	bne.n	cd26 <log_free+0x6>
	if (atomic_dec(&dup->refcount) == 1) {
    cd34:	2b01      	cmp	r3, #1
    cd36:	d103      	bne.n	cd40 <log_free+0x20>
		k_mem_slab_free(&log_strdup_pool, (void **)&dup);
    cd38:	a901      	add	r1, sp, #4
    cd3a:	4803      	ldr	r0, [pc, #12]	; (cd48 <log_free+0x28>)
    cd3c:	f003 f9ec 	bl	10118 <k_mem_slab_free>
}
    cd40:	b003      	add	sp, #12
    cd42:	f85d fb04 	ldr.w	pc, [sp], #4
    cd46:	bf00      	nop
    cd48:	20020048 	.word	0x20020048

0000cd4c <log_msg_pool_init>:
static u8_t __noinit __aligned(sizeof(void *))
		log_msg_pool_buf[CONFIG_LOG_BUFFER_SIZE];

void log_msg_pool_init(void)
{
	k_mem_slab_init(&log_msg_pool, log_msg_pool_buf, MSG_SIZE, NUM_OF_MSGS);
    cd4c:	2320      	movs	r3, #32
    cd4e:	4902      	ldr	r1, [pc, #8]	; (cd58 <log_msg_pool_init+0xc>)
    cd50:	461a      	mov	r2, r3
    cd52:	4802      	ldr	r0, [pc, #8]	; (cd5c <log_msg_pool_init+0x10>)
    cd54:	f005 b8e4 	b.w	11f20 <k_mem_slab_init>
    cd58:	20025418 	.word	0x20025418
    cd5c:	200200d4 	.word	0x200200d4

0000cd60 <log_msg_no_space_handle>:
	k_mem_slab_free(&log_msg_pool, (void **)&msg);
}

union log_msg_chunk *log_msg_no_space_handle(void)
{
	union log_msg_chunk *msg = NULL;
    cd60:	2300      	movs	r3, #0
{
    cd62:	b573      	push	{r0, r1, r4, r5, r6, lr}

	if (IS_ENABLED(CONFIG_LOG_MODE_OVERFLOW)) {
		do {
			more = log_process(true);
			log_dropped();
			err = k_mem_slab_alloc(&log_msg_pool,
    cd64:	4e0a      	ldr	r6, [pc, #40]	; (cd90 <log_msg_no_space_handle+0x30>)
	union log_msg_chunk *msg = NULL;
    cd66:	ac02      	add	r4, sp, #8
    cd68:	f844 3d04 	str.w	r3, [r4, #-4]!
    cd6c:	2001      	movs	r0, #1
    cd6e:	f7ff fe7b 	bl	ca68 <z_impl_log_process>
    cd72:	4605      	mov	r5, r0
			log_dropped();
    cd74:	f7ff fdde 	bl	c934 <log_dropped>
			err = k_mem_slab_alloc(&log_msg_pool,
    cd78:	2200      	movs	r2, #0
    cd7a:	4621      	mov	r1, r4
    cd7c:	4630      	mov	r0, r6
    cd7e:	f003 f99d 	bl	100bc <k_mem_slab_alloc>
					       (void **)&msg,
					       K_NO_WAIT);
		} while ((err != 0) && more);
    cd82:	b108      	cbz	r0, cd88 <log_msg_no_space_handle+0x28>
    cd84:	2d00      	cmp	r5, #0
    cd86:	d1f1      	bne.n	cd6c <log_msg_no_space_handle+0xc>
	} else {
		log_dropped();
	}
	return msg;

}
    cd88:	9801      	ldr	r0, [sp, #4]
    cd8a:	b002      	add	sp, #8
    cd8c:	bd70      	pop	{r4, r5, r6, pc}
    cd8e:	bf00      	nop
    cd90:	200200d4 	.word	0x200200d4

0000cd94 <log_msg_chunk_alloc>:
{
    cd94:	b507      	push	{r0, r1, r2, lr}
	union log_msg_chunk *msg = NULL;
    cd96:	2200      	movs	r2, #0
    cd98:	a902      	add	r1, sp, #8
    cd9a:	f841 2d04 	str.w	r2, [r1, #-4]!
	int err = k_mem_slab_alloc(&log_msg_pool, (void **)&msg,
    cd9e:	4805      	ldr	r0, [pc, #20]	; (cdb4 <log_msg_chunk_alloc+0x20>)
    cda0:	f003 f98c 	bl	100bc <k_mem_slab_alloc>
	if (err != 0) {
    cda4:	b110      	cbz	r0, cdac <log_msg_chunk_alloc+0x18>
		msg = log_msg_no_space_handle();
    cda6:	f7ff ffdb 	bl	cd60 <log_msg_no_space_handle>
    cdaa:	9001      	str	r0, [sp, #4]
}
    cdac:	9801      	ldr	r0, [sp, #4]
    cdae:	b003      	add	sp, #12
    cdb0:	f85d fb04 	ldr.w	pc, [sp], #4
    cdb4:	200200d4 	.word	0x200200d4

0000cdb8 <msg_free>:
{
    cdb8:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    cdba:	7a04      	ldrb	r4, [r0, #8]
	u32_t nargs = msg->hdr.params.std.nargs;
    cdbc:	7a45      	ldrb	r5, [r0, #9]
	if (log_msg_is_std(msg) && nargs) {
    cdbe:	f014 0401 	ands.w	r4, r4, #1
{
    cdc2:	9001      	str	r0, [sp, #4]
	u32_t nargs = msg->hdr.params.std.nargs;
    cdc4:	ea4f 1515 	mov.w	r5, r5, lsr #4
	if (log_msg_is_std(msg) && nargs) {
    cdc8:	d010      	beq.n	cdec <msg_free+0x34>
	if (msg->hdr.params.generic.ext == 1) {
    cdca:	9b01      	ldr	r3, [sp, #4]
    cdcc:	7a1a      	ldrb	r2, [r3, #8]
    cdce:	0792      	lsls	r2, r2, #30
    cdd0:	d506      	bpl.n	cde0 <msg_free+0x28>
    cdd2:	695b      	ldr	r3, [r3, #20]
    cdd4:	ac04      	add	r4, sp, #16
		k_mem_slab_free(&log_msg_pool, (void **)&cont);
    cdd6:	4d11      	ldr	r5, [pc, #68]	; (ce1c <msg_free+0x64>)
    cdd8:	f844 3d04 	str.w	r3, [r4, #-4]!
	while (cont != NULL) {
    cddc:	9b03      	ldr	r3, [sp, #12]
    cdde:	b9b3      	cbnz	r3, ce0e <msg_free+0x56>
	k_mem_slab_free(&log_msg_pool, (void **)&msg);
    cde0:	a901      	add	r1, sp, #4
    cde2:	480e      	ldr	r0, [pc, #56]	; (ce1c <msg_free+0x64>)
    cde4:	f003 f998 	bl	10118 <k_mem_slab_free>
}
    cde8:	b004      	add	sp, #16
    cdea:	bd70      	pop	{r4, r5, r6, pc}
	if (log_msg_is_std(msg) && nargs) {
    cdec:	2d00      	cmp	r5, #0
    cdee:	d0ec      	beq.n	cdca <msg_free+0x12>
		for (i = 0; i < nargs; i++) {
    cdf0:	42ac      	cmp	r4, r5
    cdf2:	9801      	ldr	r0, [sp, #4]
    cdf4:	d2e9      	bcs.n	cdca <msg_free+0x12>
			void *buf = (void *)log_msg_arg_get(msg, i);
    cdf6:	4621      	mov	r1, r4
    cdf8:	f004 facb 	bl	11392 <log_msg_arg_get>
    cdfc:	4606      	mov	r6, r0
			if (log_is_strdup(buf)) {
    cdfe:	f7ff fe25 	bl	ca4c <log_is_strdup>
    ce02:	b110      	cbz	r0, ce0a <msg_free+0x52>
				log_free(buf);
    ce04:	4630      	mov	r0, r6
    ce06:	f7ff ff8b 	bl	cd20 <log_free>
		for (i = 0; i < nargs; i++) {
    ce0a:	3401      	adds	r4, #1
    ce0c:	e7f0      	b.n	cdf0 <msg_free+0x38>
		next = cont->next;
    ce0e:	681e      	ldr	r6, [r3, #0]
		k_mem_slab_free(&log_msg_pool, (void **)&cont);
    ce10:	4621      	mov	r1, r4
    ce12:	4628      	mov	r0, r5
    ce14:	f003 f980 	bl	10118 <k_mem_slab_free>
		cont = next;
    ce18:	9603      	str	r6, [sp, #12]
    ce1a:	e7df      	b.n	cddc <msg_free+0x24>
    ce1c:	200200d4 	.word	0x200200d4

0000ce20 <print_formatted>:
	return 0;
}

static int print_formatted(const struct log_output *log_output,
			   const char *fmt, ...)
{
    ce20:	b40e      	push	{r1, r2, r3}
    ce22:	b503      	push	{r0, r1, lr}
    ce24:	ab03      	add	r3, sp, #12
    ce26:	f853 2b04 	ldr.w	r2, [r3], #4
	va_start(args, fmt);
#if !defined(CONFIG_NEWLIB_LIBC) && !defined(CONFIG_ARCH_POSIX) && \
    defined(CONFIG_LOG_ENABLE_FANCY_OUTPUT_FORMATTING)
	length = z_prf(out_func, (void *)log_output, (char *)fmt, args);
#else
	z_vprintk(out_func, (void *)log_output, fmt, args);
    ce2a:	4601      	mov	r1, r0
    ce2c:	4804      	ldr	r0, [pc, #16]	; (ce40 <print_formatted+0x20>)
	va_start(args, fmt);
    ce2e:	9301      	str	r3, [sp, #4]
	z_vprintk(out_func, (void *)log_output, fmt, args);
    ce30:	f004 f849 	bl	10ec6 <z_vprintk>
#endif
	va_end(args);

	return length;
}
    ce34:	2000      	movs	r0, #0
    ce36:	b002      	add	sp, #8
    ce38:	f85d eb04 	ldr.w	lr, [sp], #4
    ce3c:	b003      	add	sp, #12
    ce3e:	4770      	bx	lr
    ce40:	0001179f 	.word	0x0001179f

0000ce44 <prefix_print>:
}

static u32_t prefix_print(const struct log_output *log_output,
			 u32_t flags, bool func_on, u32_t timestamp, u8_t level,
			 u8_t domain_id, u16_t source_id)
{
    ce44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
			"<%d>1 ",
			facility * 8 +
			level_to_rfc5424_severity(level));
	}

	if (stamp) {
    ce48:	f011 0402 	ands.w	r4, r1, #2
{
    ce4c:	b085      	sub	sp, #20
    ce4e:	4606      	mov	r6, r0
    ce50:	4690      	mov	r8, r2
    ce52:	f89d 7038 	ldrb.w	r7, [sp, #56]	; 0x38
	bool colors_on = flags & LOG_OUTPUT_FLAG_COLORS;
    ce56:	f001 0901 	and.w	r9, r1, #1
	bool level_on = flags & LOG_OUTPUT_FLAG_LEVEL;
    ce5a:	f001 0508 	and.w	r5, r1, #8
	if (stamp) {
    ce5e:	d007      	beq.n	ce70 <prefix_print+0x2c>
	if (!format) {
    ce60:	f011 0f44 	tst.w	r1, #68	; 0x44
    ce64:	d137      	bne.n	ced6 <prefix_print+0x92>
		length = print_formatted(log_output, "[%08lu] ", timestamp);
    ce66:	461a      	mov	r2, r3
    ce68:	4932      	ldr	r1, [pc, #200]	; (cf34 <prefix_print+0xf0>)
    ce6a:	f7ff ffd9 	bl	ce20 <print_formatted>
		length += timestamp_print(log_output, flags, timestamp);
    ce6e:	4604      	mov	r4, r0
	if (color) {
    ce70:	f1b9 0f00 	cmp.w	r9, #0
    ce74:	d00a      	beq.n	ce8c <prefix_print+0x48>
		const char *color = start && (colors[level] != NULL) ?
    ce76:	4b30      	ldr	r3, [pc, #192]	; (cf38 <prefix_print+0xf4>)
		print_formatted(log_output, "%s", color);
    ce78:	4930      	ldr	r1, [pc, #192]	; (cf3c <prefix_print+0xf8>)
		const char *color = start && (colors[level] != NULL) ?
    ce7a:	f853 2027 	ldr.w	r2, [r3, r7, lsl #2]
		print_formatted(log_output, "%s", color);
    ce7e:	4b30      	ldr	r3, [pc, #192]	; (cf40 <prefix_print+0xfc>)
    ce80:	4630      	mov	r0, r6
    ce82:	2a00      	cmp	r2, #0
    ce84:	bf08      	it	eq
    ce86:	461a      	moveq	r2, r3
    ce88:	f7ff ffca 	bl	ce20 <print_formatted>
	if (level_on) {
    ce8c:	b13d      	cbz	r5, ce9e <prefix_print+0x5a>
		total += print_formatted(log_output, "<%s> ", severity[level]);
    ce8e:	4b2d      	ldr	r3, [pc, #180]	; (cf44 <prefix_print+0x100>)
    ce90:	492d      	ldr	r1, [pc, #180]	; (cf48 <prefix_print+0x104>)
    ce92:	f853 2027 	ldr.w	r2, [r3, r7, lsl #2]
    ce96:	4630      	mov	r0, r6
    ce98:	f7ff ffc2 	bl	ce20 <print_formatted>
    ce9c:	4605      	mov	r5, r0
	total += print_formatted(log_output,
    ce9e:	f1b8 0f00 	cmp.w	r8, #0
    cea2:	d044      	beq.n	cf2e <prefix_print+0xea>
				((1 << level) & LOG_FUNCTION_PREFIX_MASK)) ?
    cea4:	2301      	movs	r3, #1
    cea6:	fa03 f707 	lsl.w	r7, r3, r7
	total += print_formatted(log_output,
    ceaa:	4b28      	ldr	r3, [pc, #160]	; (cf4c <prefix_print+0x108>)
    ceac:	f017 0f10 	tst.w	r7, #16
    ceb0:	4f27      	ldr	r7, [pc, #156]	; (cf50 <prefix_print+0x10c>)
    ceb2:	bf18      	it	ne
    ceb4:	461f      	movne	r7, r3
    ceb6:	f8bd 1040 	ldrh.w	r1, [sp, #64]	; 0x40
    ceba:	f89d 003c 	ldrb.w	r0, [sp, #60]	; 0x3c
    cebe:	f7ff fd45 	bl	c94c <log_source_name_get>
    cec2:	4639      	mov	r1, r7
    cec4:	4602      	mov	r2, r0
    cec6:	4630      	mov	r0, r6
    cec8:	f7ff ffaa 	bl	ce20 <print_formatted>
    cecc:	4428      	add	r0, r5
		length += ids_print(log_output, level_on, func_on,
				    domain_id, source_id, level);
	}

	return length;
}
    cece:	4420      	add	r0, r4
    ced0:	b005      	add	sp, #20
    ced2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	} else if (freq != 0U) {
    ced6:	4a1f      	ldr	r2, [pc, #124]	; (cf54 <prefix_print+0x110>)
    ced8:	6811      	ldr	r1, [r2, #0]
    ceda:	b331      	cbz	r1, cf2a <prefix_print+0xe6>
		timestamp /= timestamp_div;
    cedc:	4a1e      	ldr	r2, [pc, #120]	; (cf58 <prefix_print+0x114>)
    cede:	f44f 6e61 	mov.w	lr, #3600	; 0xe10
    cee2:	6814      	ldr	r4, [r2, #0]
		ms = (remainder * 1000U) / freq;
    cee4:	f44f 7c7a 	mov.w	ip, #1000	; 0x3e8
		timestamp /= timestamp_div;
    cee8:	fbb3 f3f4 	udiv	r3, r3, r4
		seconds = timestamp / freq;
    ceec:	fbb3 f4f1 	udiv	r4, r3, r1
    cef0:	fbb4 f2fe 	udiv	r2, r4, lr
    cef4:	fb0e 4e12 	mls	lr, lr, r2, r4
		remainder = timestamp % freq;
    cef8:	fb01 3414 	mls	r4, r1, r4, r3
		ms = (remainder * 1000U) / freq;
    cefc:	fb0c f404 	mul.w	r4, ip, r4
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
    cf00:	fbb4 fbf1 	udiv	fp, r4, r1
		mins = seconds / 60U;
    cf04:	f04f 0a3c 	mov.w	sl, #60	; 0x3c
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
    cf08:	fb01 441b 	mls	r4, r1, fp, r4
    cf0c:	fb0c f404 	mul.w	r4, ip, r4
		mins = seconds / 60U;
    cf10:	fbbe f3fa 	udiv	r3, lr, sl
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
    cf14:	fbb4 f1f1 	udiv	r1, r4, r1
			length = print_formatted(log_output,
    cf18:	e9cd b101 	strd	fp, r1, [sp, #4]
    cf1c:	fb0a e113 	mls	r1, sl, r3, lr
    cf20:	9100      	str	r1, [sp, #0]
    cf22:	490e      	ldr	r1, [pc, #56]	; (cf5c <prefix_print+0x118>)
    cf24:	f7ff ff7c 	bl	ce20 <print_formatted>
    cf28:	e7a1      	b.n	ce6e <prefix_print+0x2a>
		length = 0;
    cf2a:	4608      	mov	r0, r1
    cf2c:	e79f      	b.n	ce6e <prefix_print+0x2a>
	total += print_formatted(log_output,
    cf2e:	4f08      	ldr	r7, [pc, #32]	; (cf50 <prefix_print+0x10c>)
    cf30:	e7c1      	b.n	ceb6 <prefix_print+0x72>
    cf32:	bf00      	nop
    cf34:	0001283c 	.word	0x0001283c
    cf38:	000125e0 	.word	0x000125e0
    cf3c:	00013078 	.word	0x00013078
    cf40:	0001282e 	.word	0x0001282e
    cf44:	000125f4 	.word	0x000125f4
    cf48:	00012861 	.word	0x00012861
    cf4c:	00012833 	.word	0x00012833
    cf50:	00012837 	.word	0x00012837
    cf54:	200200f0 	.word	0x200200f0
    cf58:	200200f4 	.word	0x200200f4
    cf5c:	00012845 	.word	0x00012845

0000cf60 <postfix_print>:

static void postfix_print(const struct log_output *log_output,
			  u32_t flags, u8_t level)
{
    cf60:	b538      	push	{r3, r4, r5, lr}
    cf62:	460c      	mov	r4, r1
	if (color) {
    cf64:	07e1      	lsls	r1, r4, #31
{
    cf66:	4605      	mov	r5, r0
	if (color) {
    cf68:	d503      	bpl.n	cf72 <postfix_print+0x12>
		print_formatted(log_output, "%s", color);
    cf6a:	4a08      	ldr	r2, [pc, #32]	; (cf8c <postfix_print+0x2c>)
    cf6c:	4908      	ldr	r1, [pc, #32]	; (cf90 <postfix_print+0x30>)
    cf6e:	f7ff ff57 	bl	ce20 <print_formatted>
	if ((flags & LOG_OUTPUT_FLAG_CRLF_NONE) != 0U) {
    cf72:	06e2      	lsls	r2, r4, #27
    cf74:	d408      	bmi.n	cf88 <postfix_print+0x28>
	if ((flags & LOG_OUTPUT_FLAG_CRLF_LFONLY) != 0U) {
    cf76:	06a3      	lsls	r3, r4, #26
		print_formatted(ctx, "\r\n");
    cf78:	4628      	mov	r0, r5
	color_postfix(log_output, (flags & LOG_OUTPUT_FLAG_COLORS),
			      level);
	newline_print(log_output, flags);
}
    cf7a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		print_formatted(ctx, "\n");
    cf7e:	bf4c      	ite	mi
    cf80:	4904      	ldrmi	r1, [pc, #16]	; (cf94 <postfix_print+0x34>)
		print_formatted(ctx, "\r\n");
    cf82:	4905      	ldrpl	r1, [pc, #20]	; (cf98 <postfix_print+0x38>)
    cf84:	f7ff bf4c 	b.w	ce20 <print_formatted>
}
    cf88:	bd38      	pop	{r3, r4, r5, pc}
    cf8a:	bf00      	nop
    cf8c:	0001282e 	.word	0x0001282e
    cf90:	00013078 	.word	0x00013078
    cf94:	00012820 	.word	0x00012820
    cf98:	0001281f 	.word	0x0001281f

0000cf9c <hexdump_line_print>:
{
    cf9c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    cfa0:	4698      	mov	r8, r3
    cfa2:	9b08      	ldr	r3, [sp, #32]
    cfa4:	4604      	mov	r4, r0
	if ((flags & LOG_OUTPUT_FLAG_CRLF_NONE) != 0U) {
    cfa6:	06dd      	lsls	r5, r3, #27
{
    cfa8:	460e      	mov	r6, r1
    cfaa:	4617      	mov	r7, r2
	if ((flags & LOG_OUTPUT_FLAG_CRLF_NONE) != 0U) {
    cfac:	d405      	bmi.n	cfba <hexdump_line_print+0x1e>
	if ((flags & LOG_OUTPUT_FLAG_CRLF_LFONLY) != 0U) {
    cfae:	0699      	lsls	r1, r3, #26
		print_formatted(ctx, "\n");
    cfb0:	bf4c      	ite	mi
    cfb2:	4929      	ldrmi	r1, [pc, #164]	; (d058 <hexdump_line_print+0xbc>)
		print_formatted(ctx, "\r\n");
    cfb4:	4929      	ldrpl	r1, [pc, #164]	; (d05c <hexdump_line_print+0xc0>)
    cfb6:	f7ff ff33 	bl	ce20 <print_formatted>
{
    cfba:	2500      	movs	r5, #0
		print_formatted(log_output, " ");
    cfbc:	f8df 90a4 	ldr.w	r9, [pc, #164]	; d064 <hexdump_line_print+0xc8>
	for (int i = 0; i < prefix_offset; i++) {
    cfc0:	4545      	cmp	r5, r8
    cfc2:	db2a      	blt.n	d01a <hexdump_line_print+0x7e>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    cfc4:	2500      	movs	r5, #0
			print_formatted(log_output, "   ");
    cfc6:	f8df 80a0 	ldr.w	r8, [pc, #160]	; d068 <hexdump_line_print+0xcc>
			print_formatted(log_output, "%02x ", data[i]);
    cfca:	f8df 90a0 	ldr.w	r9, [pc, #160]	; d06c <hexdump_line_print+0xd0>
			print_formatted(log_output, " ");
    cfce:	f8df a094 	ldr.w	sl, [pc, #148]	; d064 <hexdump_line_print+0xc8>
		if (i < length) {
    cfd2:	42af      	cmp	r7, r5
    cfd4:	d92e      	bls.n	d034 <hexdump_line_print+0x98>
			print_formatted(log_output, "%02x ", data[i]);
    cfd6:	5d72      	ldrb	r2, [r6, r5]
    cfd8:	4649      	mov	r1, r9
    cfda:	4620      	mov	r0, r4
    cfdc:	f7ff ff20 	bl	ce20 <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    cfe0:	3501      	adds	r5, #1
    cfe2:	2d10      	cmp	r5, #16
    cfe4:	d11f      	bne.n	d026 <hexdump_line_print+0x8a>
	print_formatted(log_output, "|");
    cfe6:	491e      	ldr	r1, [pc, #120]	; (d060 <hexdump_line_print+0xc4>)
    cfe8:	4620      	mov	r0, r4
    cfea:	f7ff ff19 	bl	ce20 <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    cfee:	2500      	movs	r5, #0
			print_formatted(log_output, " ");
    cff0:	f8df 8070 	ldr.w	r8, [pc, #112]	; d064 <hexdump_line_print+0xc8>
			print_formatted(log_output, "%c",
    cff4:	f8df 9078 	ldr.w	r9, [pc, #120]	; d070 <hexdump_line_print+0xd4>
		if (i < length) {
    cff8:	42af      	cmp	r7, r5
    cffa:	d927      	bls.n	d04c <hexdump_line_print+0xb0>
			char c = (char)data[i];
    cffc:	5d72      	ldrb	r2, [r6, r5]
			print_formatted(log_output, "%c",
    cffe:	4649      	mov	r1, r9
			(((unsigned)c) <= (unsigned)'~'));
}

static inline int isprint(int c)
{
	return (int)((((unsigned)c) >= ' ') &&
    d000:	f1a2 0320 	sub.w	r3, r2, #32
    d004:	2b5f      	cmp	r3, #95	; 0x5f
    d006:	bf28      	it	cs
    d008:	222e      	movcs	r2, #46	; 0x2e
    d00a:	4620      	mov	r0, r4
    d00c:	f7ff ff08 	bl	ce20 <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    d010:	3501      	adds	r5, #1
    d012:	2d10      	cmp	r5, #16
    d014:	d113      	bne.n	d03e <hexdump_line_print+0xa2>
}
    d016:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		print_formatted(log_output, " ");
    d01a:	4649      	mov	r1, r9
    d01c:	4620      	mov	r0, r4
    d01e:	f7ff feff 	bl	ce20 <print_formatted>
	for (int i = 0; i < prefix_offset; i++) {
    d022:	3501      	adds	r5, #1
    d024:	e7cc      	b.n	cfc0 <hexdump_line_print+0x24>
		if (i > 0 && !(i % 8)) {
    d026:	076a      	lsls	r2, r5, #29
    d028:	d1d3      	bne.n	cfd2 <hexdump_line_print+0x36>
			print_formatted(log_output, " ");
    d02a:	4651      	mov	r1, sl
    d02c:	4620      	mov	r0, r4
    d02e:	f7ff fef7 	bl	ce20 <print_formatted>
    d032:	e7ce      	b.n	cfd2 <hexdump_line_print+0x36>
			print_formatted(log_output, "   ");
    d034:	4641      	mov	r1, r8
    d036:	4620      	mov	r0, r4
    d038:	f7ff fef2 	bl	ce20 <print_formatted>
    d03c:	e7d0      	b.n	cfe0 <hexdump_line_print+0x44>
		if (i > 0 && !(i % 8)) {
    d03e:	076b      	lsls	r3, r5, #29
    d040:	d1da      	bne.n	cff8 <hexdump_line_print+0x5c>
			print_formatted(log_output, " ");
    d042:	4641      	mov	r1, r8
    d044:	4620      	mov	r0, r4
    d046:	f7ff feeb 	bl	ce20 <print_formatted>
    d04a:	e7d5      	b.n	cff8 <hexdump_line_print+0x5c>
			print_formatted(log_output, " ");
    d04c:	4641      	mov	r1, r8
    d04e:	4620      	mov	r0, r4
    d050:	f7ff fee6 	bl	ce20 <print_formatted>
    d054:	e7dc      	b.n	d010 <hexdump_line_print+0x74>
    d056:	bf00      	nop
    d058:	00012820 	.word	0x00012820
    d05c:	0001281f 	.word	0x0001281f
    d060:	000127f9 	.word	0x000127f9
    d064:	000127f7 	.word	0x000127f7
    d068:	000127f5 	.word	0x000127f5
    d06c:	000127ef 	.word	0x000127ef
    d070:	000127fb 	.word	0x000127fb

0000d074 <log_output_msg_process>:

void log_output_msg_process(const struct log_output *log_output,
			    struct log_msg *msg,
			    u32_t flags)
{
    d074:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    d078:	4617      	mov	r7, r2
    d07a:	7a0a      	ldrb	r2, [r1, #8]
	return msg->hdr.ids.level;
    d07c:	7a8b      	ldrb	r3, [r1, #10]
    d07e:	43d2      	mvns	r2, r2
	u16_t source_id = (u16_t)log_msg_source_id_get(msg);
	bool raw_string = (level == LOG_LEVEL_INTERNAL_RAW_STRING);
	int prefix_offset;

	prefix_offset = raw_string ?
			0 : prefix_print(log_output, flags, std_msg, timestamp,
    d080:	f013 0407 	ands.w	r4, r3, #7
{
    d084:	b08a      	sub	sp, #40	; 0x28
    d086:	4605      	mov	r5, r0
    d088:	460e      	mov	r6, r1
    d08a:	b2d2      	uxtb	r2, r2
			0 : prefix_print(log_output, flags, std_msg, timestamp,
    d08c:	d01b      	beq.n	d0c6 <log_output_msg_process+0x52>
	return msg->hdr.ids.source_id;
    d08e:	8949      	ldrh	r1, [r1, #10]
    d090:	f3c3 03c2 	ubfx	r3, r3, #3, #3
    d094:	0989      	lsrs	r1, r1, #6
    d096:	9102      	str	r1, [sp, #8]
    d098:	e9cd 4300 	strd	r4, r3, [sp]
    d09c:	f002 0201 	and.w	r2, r2, #1
    d0a0:	68f3      	ldr	r3, [r6, #12]
    d0a2:	4639      	mov	r1, r7
    d0a4:	f7ff fece 	bl	ce44 <prefix_print>
    d0a8:	4681      	mov	r9, r0
	return  (msg->hdr.params.generic.type == LOG_MSG_TYPE_STD);
    d0aa:	7a33      	ldrb	r3, [r6, #8]
					 level, domain_id, source_id);

	if (log_msg_is_std(msg)) {
    d0ac:	07da      	lsls	r2, r3, #31
    d0ae:	d40c      	bmi.n	d0ca <log_output_msg_process+0x56>
		std_print(msg, log_output);
    d0b0:	4629      	mov	r1, r5
    d0b2:	4630      	mov	r0, r6
    d0b4:	f004 fa09 	bl	114ca <std_print>
		raw_string_print(msg, log_output);
	} else {
		hexdump_print(msg, log_output, prefix_offset, flags);
	}

	if (!raw_string) {
    d0b8:	b34c      	cbz	r4, d10e <log_output_msg_process+0x9a>
		postfix_print(log_output, flags, level);
    d0ba:	4622      	mov	r2, r4
    d0bc:	4639      	mov	r1, r7
    d0be:	4628      	mov	r0, r5
    d0c0:	f7ff ff4e 	bl	cf60 <postfix_print>
    d0c4:	e023      	b.n	d10e <log_output_msg_process+0x9a>
			0 : prefix_print(log_output, flags, std_msg, timestamp,
    d0c6:	46a1      	mov	r9, r4
    d0c8:	e7ef      	b.n	d0aa <log_output_msg_process+0x36>
	} else if (raw_string) {
    d0ca:	bb34      	cbnz	r4, d11a <log_output_msg_process+0xa6>
	size_t offset = 0;
    d0cc:	4627      	mov	r7, r4
		length = log_output->size;
    d0ce:	68eb      	ldr	r3, [r5, #12]
		log_msg_hexdump_data_get(msg, log_output->buf, &length, offset);
    d0d0:	aa06      	add	r2, sp, #24
		length = log_output->size;
    d0d2:	9306      	str	r3, [sp, #24]
		log_msg_hexdump_data_get(msg, log_output->buf, &length, offset);
    d0d4:	68a9      	ldr	r1, [r5, #8]
    d0d6:	463b      	mov	r3, r7
    d0d8:	4630      	mov	r0, r6
    d0da:	f004 f9e2 	bl	114a2 <log_msg_hexdump_data_get>
		log_output->control_block->offset = length;
    d0de:	9a06      	ldr	r2, [sp, #24]
    d0e0:	686b      	ldr	r3, [r5, #4]
    d0e2:	601a      	str	r2, [r3, #0]
		if (length != 0) {
    d0e4:	b13a      	cbz	r2, d0f6 <log_output_msg_process+0x82>
			eol = (log_output->buf[length - 1] == '\n');
    d0e6:	68ab      	ldr	r3, [r5, #8]
    d0e8:	4413      	add	r3, r2
    d0ea:	f813 4c01 	ldrb.w	r4, [r3, #-1]
    d0ee:	f1a4 030a 	sub.w	r3, r4, #10
    d0f2:	425c      	negs	r4, r3
    d0f4:	415c      	adcs	r4, r3
		log_output_flush(log_output);
    d0f6:	4628      	mov	r0, r5
    d0f8:	f004 fb44 	bl	11784 <log_output_flush>
		offset += length;
    d0fc:	9b06      	ldr	r3, [sp, #24]
    d0fe:	441f      	add	r7, r3
	} while (length > 0);
    d100:	2b00      	cmp	r3, #0
    d102:	d1e4      	bne.n	d0ce <log_output_msg_process+0x5a>
	if (eol) {
    d104:	b11c      	cbz	r4, d10e <log_output_msg_process+0x9a>
		print_formatted(log_output, "\r");
    d106:	4915      	ldr	r1, [pc, #84]	; (d15c <log_output_msg_process+0xe8>)
    d108:	4628      	mov	r0, r5
    d10a:	f7ff fe89 	bl	ce20 <print_formatted>
	}

	log_output_flush(log_output);
    d10e:	4628      	mov	r0, r5
    d110:	f004 fb38 	bl	11784 <log_output_flush>
}
    d114:	b00a      	add	sp, #40	; 0x28
    d116:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	print_formatted(log_output, "%s", log_msg_str_get(msg));
    d11a:	4630      	mov	r0, r6
    d11c:	f004 f965 	bl	113ea <log_msg_str_get>
    d120:	490f      	ldr	r1, [pc, #60]	; (d160 <log_output_msg_process+0xec>)
    d122:	4602      	mov	r2, r0
    d124:	4628      	mov	r0, r5
    d126:	f7ff fe7b 	bl	ce20 <print_formatted>
	u32_t offset = 0U;
    d12a:	f04f 0800 	mov.w	r8, #0
		length = sizeof(buf);
    d12e:	f04f 0a10 	mov.w	sl, #16
		log_msg_hexdump_data_get(msg, buf, &length, offset);
    d132:	aa05      	add	r2, sp, #20
    d134:	4643      	mov	r3, r8
    d136:	a906      	add	r1, sp, #24
    d138:	4630      	mov	r0, r6
		length = sizeof(buf);
    d13a:	f8cd a014 	str.w	sl, [sp, #20]
		log_msg_hexdump_data_get(msg, buf, &length, offset);
    d13e:	f004 f9b0 	bl	114a2 <log_msg_hexdump_data_get>
		if (length) {
    d142:	9a05      	ldr	r2, [sp, #20]
    d144:	2a00      	cmp	r2, #0
    d146:	d0b8      	beq.n	d0ba <log_output_msg_process+0x46>
			hexdump_line_print(log_output, buf, length,
    d148:	464b      	mov	r3, r9
    d14a:	9700      	str	r7, [sp, #0]
    d14c:	a906      	add	r1, sp, #24
    d14e:	4628      	mov	r0, r5
    d150:	f7ff ff24 	bl	cf9c <hexdump_line_print>
			offset += length;
    d154:	9b05      	ldr	r3, [sp, #20]
    d156:	4498      	add	r8, r3
    d158:	e7eb      	b.n	d132 <log_output_msg_process+0xbe>
    d15a:	bf00      	nop
    d15c:	00012801 	.word	0x00012801
    d160:	00013078 	.word	0x00013078

0000d164 <log_output_dropped_process>:
	postfix_print(log_output, flags, level);
	log_output_flush(log_output);
}

void log_output_dropped_process(const struct log_output *log_output, u32_t cnt)
{
    d164:	b573      	push	{r0, r1, r4, r5, r6, lr}
	int len;
	static const char prefix[] = DROPPED_COLOR_PREFIX "--- ";
	static const char postfix[] =
			" messages dropped ---\r\n" DROPPED_COLOR_POSTFIX;
	log_output_func_t outf = log_output->func;
	struct device *dev = (struct device *)log_output->control_block->ctx;
    d166:	e9d0 4300 	ldrd	r4, r3, [r0]
    d16a:	685d      	ldr	r5, [r3, #4]

	cnt = MIN(cnt, 9999);
	len = snprintf(buf, sizeof(buf), "%d", cnt);
    d16c:	f242 730f 	movw	r3, #9999	; 0x270f
    d170:	428b      	cmp	r3, r1
    d172:	bf28      	it	cs
    d174:	460b      	movcs	r3, r1
    d176:	4a0d      	ldr	r2, [pc, #52]	; (d1ac <log_output_dropped_process+0x48>)
    d178:	2105      	movs	r1, #5
    d17a:	4668      	mov	r0, sp
    d17c:	f001 ff4c 	bl	f018 <snprintf>
    d180:	4606      	mov	r6, r0

	buffer_write(outf, (u8_t *)prefix, sizeof(prefix) - 1, dev);
    d182:	462b      	mov	r3, r5
    d184:	4620      	mov	r0, r4
    d186:	220b      	movs	r2, #11
    d188:	4909      	ldr	r1, [pc, #36]	; (d1b0 <log_output_dropped_process+0x4c>)
    d18a:	f004 f991 	bl	114b0 <buffer_write>
	buffer_write(outf, buf, len, dev);
    d18e:	462b      	mov	r3, r5
    d190:	4632      	mov	r2, r6
    d192:	4669      	mov	r1, sp
    d194:	4620      	mov	r0, r4
    d196:	f004 f98b 	bl	114b0 <buffer_write>
	buffer_write(outf, (u8_t *)postfix, sizeof(postfix) - 1, dev);
    d19a:	462b      	mov	r3, r5
    d19c:	221b      	movs	r2, #27
    d19e:	4905      	ldr	r1, [pc, #20]	; (d1b4 <log_output_dropped_process+0x50>)
    d1a0:	4620      	mov	r0, r4
    d1a2:	f004 f985 	bl	114b0 <buffer_write>
}
    d1a6:	b002      	add	sp, #8
    d1a8:	bd70      	pop	{r4, r5, r6, pc}
    d1aa:	bf00      	nop
    d1ac:	000127fe 	.word	0x000127fe
    d1b0:	00012822 	.word	0x00012822
    d1b4:	00012803 	.word	0x00012803

0000d1b8 <log_output_timestamp_freq_set>:

void log_output_timestamp_freq_set(u32_t frequency)
{
	timestamp_div = 1U;
    d1b8:	2301      	movs	r3, #1
	/* There is no point to have frequency higher than 1MHz (ns are not
	 * printed) and too high frequency leads to overflows in calculations.
	 */
	while (frequency > 1000000) {
    d1ba:	2100      	movs	r1, #0
	timestamp_div = 1U;
    d1bc:	4a07      	ldr	r2, [pc, #28]	; (d1dc <log_output_timestamp_freq_set+0x24>)
{
    d1be:	b510      	push	{r4, lr}
	while (frequency > 1000000) {
    d1c0:	4c07      	ldr	r4, [pc, #28]	; (d1e0 <log_output_timestamp_freq_set+0x28>)
	timestamp_div = 1U;
    d1c2:	6013      	str	r3, [r2, #0]
	while (frequency > 1000000) {
    d1c4:	42a0      	cmp	r0, r4
    d1c6:	d804      	bhi.n	d1d2 <log_output_timestamp_freq_set+0x1a>
    d1c8:	b101      	cbz	r1, d1cc <log_output_timestamp_freq_set+0x14>
    d1ca:	6013      	str	r3, [r2, #0]
		frequency /= 2U;
		timestamp_div *= 2U;
	}

	freq = frequency;
    d1cc:	4b05      	ldr	r3, [pc, #20]	; (d1e4 <log_output_timestamp_freq_set+0x2c>)
    d1ce:	6018      	str	r0, [r3, #0]
}
    d1d0:	bd10      	pop	{r4, pc}
		frequency /= 2U;
    d1d2:	0840      	lsrs	r0, r0, #1
		timestamp_div *= 2U;
    d1d4:	005b      	lsls	r3, r3, #1
    d1d6:	2101      	movs	r1, #1
    d1d8:	e7f4      	b.n	d1c4 <log_output_timestamp_freq_set+0xc>
    d1da:	bf00      	nop
    d1dc:	200200f4 	.word	0x200200f4
    d1e0:	000f4240 	.word	0x000f4240
    d1e4:	200200f0 	.word	0x200200f0

0000d1e8 <log_backend_uart_init>:
{
	log_backend_std_put(&log_output, 0, msg);
}

static void log_backend_uart_init(void)
{
    d1e8:	b508      	push	{r3, lr}
    d1ea:	4803      	ldr	r0, [pc, #12]	; (d1f8 <log_backend_uart_init+0x10>)
    d1ec:	f002 fdd8 	bl	fda0 <z_impl_device_get_binding>
 * @param ctx		User context.
 */
static inline void log_output_ctx_set(const struct log_output *log_output,
				      void *ctx)
{
	log_output->control_block->ctx = ctx;
    d1f0:	4b02      	ldr	r3, [pc, #8]	; (d1fc <log_backend_uart_init+0x14>)
    d1f2:	6058      	str	r0, [r3, #4]

	dev = device_get_binding(CONFIG_UART_CONSOLE_ON_DEV_NAME);
	assert(dev);

	log_output_ctx_set(&log_output, dev);
}
    d1f4:	bd08      	pop	{r3, pc}
    d1f6:	bf00      	nop
    d1f8:	00012887 	.word	0x00012887
    d1fc:	20020100 	.word	0x20020100

0000d200 <panic>:
 * @param log_output	Log output instance.
 */
static inline void
log_backend_std_panic(const struct log_output *const log_output)
{
	log_output_flush(log_output);
    d200:	4801      	ldr	r0, [pc, #4]	; (d208 <panic+0x8>)
    d202:	f004 babf 	b.w	11784 <log_output_flush>
    d206:	bf00      	nop
    d208:	00012620 	.word	0x00012620

0000d20c <dropped>:
 * @param cnt		Number of dropped messages.
 */
static inline void
log_backend_std_dropped(const struct log_output *const log_output, u32_t cnt)
{
	log_output_dropped_process(log_output, cnt);
    d20c:	4801      	ldr	r0, [pc, #4]	; (d214 <dropped+0x8>)
    d20e:	f7ff bfa9 	b.w	d164 <log_output_dropped_process>
    d212:	bf00      	nop
    d214:	00012620 	.word	0x00012620

0000d218 <put>:
{
    d218:	b510      	push	{r4, lr}
    d21a:	460c      	mov	r4, r1
	log_msg_get(msg);
    d21c:	4608      	mov	r0, r1
    d21e:	f004 f8ac 	bl	1137a <log_msg_get>
	log_output_msg_process(log_output, msg, flags);
    d222:	4621      	mov	r1, r4
    d224:	4804      	ldr	r0, [pc, #16]	; (d238 <put+0x20>)
    d226:	220f      	movs	r2, #15
    d228:	f7ff ff24 	bl	d074 <log_output_msg_process>
	log_msg_put(msg);
    d22c:	4620      	mov	r0, r4
}
    d22e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    d232:	f004 b8cb 	b.w	113cc <log_msg_put>
    d236:	bf00      	nop
    d238:	00012620 	.word	0x00012620

0000d23c <console_out>:
		return c;
	}

#endif  /* CONFIG_UART_CONSOLE_DEBUG_SERVER_HOOKS */

	if ('\n' == c) {
    d23c:	280a      	cmp	r0, #10
{
    d23e:	b538      	push	{r3, r4, r5, lr}
    d240:	4604      	mov	r4, r0
    d242:	4d07      	ldr	r5, [pc, #28]	; (d260 <console_out+0x24>)
	if ('\n' == c) {
    d244:	d104      	bne.n	d250 <console_out+0x14>
    d246:	6828      	ldr	r0, [r5, #0]
						unsigned char out_char)
{
	const struct uart_driver_api *api =
		(const struct uart_driver_api *)dev->driver_api;

	api->poll_out(dev, out_char);
    d248:	6843      	ldr	r3, [r0, #4]
    d24a:	210d      	movs	r1, #13
    d24c:	685b      	ldr	r3, [r3, #4]
    d24e:	4798      	blx	r3
		uart_poll_out(uart_console_dev, '\r');
	}
	uart_poll_out(uart_console_dev, c);
    d250:	6828      	ldr	r0, [r5, #0]
    d252:	6843      	ldr	r3, [r0, #4]
    d254:	b2e1      	uxtb	r1, r4
    d256:	685b      	ldr	r3, [r3, #4]
    d258:	4798      	blx	r3

	return c;
}
    d25a:	4620      	mov	r0, r4
    d25c:	bd38      	pop	{r3, r4, r5, pc}
    d25e:	bf00      	nop
    d260:	2002010c 	.word	0x2002010c

0000d264 <uart_console_hook_install>:
 *
 * @return N/A
 */

void uart_console_hook_install(void)
{
    d264:	b510      	push	{r4, lr}
	__stdout_hook_install(console_out);
    d266:	4c04      	ldr	r4, [pc, #16]	; (d278 <uart_console_hook_install+0x14>)
    d268:	4620      	mov	r0, r4
    d26a:	f001 fecf 	bl	f00c <__stdout_hook_install>
	__printk_hook_install(console_out);
    d26e:	4620      	mov	r0, r4
}
    d270:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	__printk_hook_install(console_out);
    d274:	f7ff bab8 	b.w	c7e8 <__printk_hook_install>
    d278:	0000d23d 	.word	0x0000d23d

0000d27c <uart_console_init>:
 * @brief Initialize one UART as the console/debug port
 *
 * @return 0 if successful, otherwise failed.
 */
static int uart_console_init(struct device *arg)
{
    d27c:	b508      	push	{r3, lr}
    d27e:	4804      	ldr	r0, [pc, #16]	; (d290 <uart_console_init+0x14>)
    d280:	f002 fd8e 	bl	fda0 <z_impl_device_get_binding>

	ARG_UNUSED(arg);

	uart_console_dev = device_get_binding(CONFIG_UART_CONSOLE_ON_DEV_NAME);
    d284:	4b03      	ldr	r3, [pc, #12]	; (d294 <uart_console_init+0x18>)
    d286:	6018      	str	r0, [r3, #0]
		}
	}
	k_busy_wait(1000000);
#endif

	uart_console_hook_install();
    d288:	f7ff ffec 	bl	d264 <uart_console_hook_install>

	return 0;
}
    d28c:	2000      	movs	r0, #0
    d28e:	bd08      	pop	{r3, pc}
    d290:	00012887 	.word	0x00012887
    d294:	2002010c 	.word	0x2002010c

0000d298 <hfclk_init>:
 * symbol.
 */
void nrf_power_clock_isr(void *arg);

static int hfclk_init(struct device *dev)
{
    d298:	b510      	push	{r4, lr}
	IRQ_CONNECT(DT_INST_0_NORDIC_NRF_CLOCK_IRQ_0,
    d29a:	2200      	movs	r2, #0
{
    d29c:	4604      	mov	r4, r0
	IRQ_CONNECT(DT_INST_0_NORDIC_NRF_CLOCK_IRQ_0,
    d29e:	2101      	movs	r1, #1
    d2a0:	2005      	movs	r0, #5
    d2a2:	f000 fc2f 	bl	db04 <z_arm_irq_priority_set>
		    DT_INST_0_NORDIC_NRF_CLOCK_IRQ_0_PRIORITY,
		    nrf_power_clock_isr, 0, 0);

	irq_enable(DT_INST_0_NORDIC_NRF_CLOCK_IRQ_0);
    d2a6:	2005      	movs	r0, #5
    d2a8:	f000 fc1c 	bl	dae4 <z_arch_irq_enable>
    return (bool)*((volatile uint32_t *)((uint8_t *)NRF_CLOCK + event));
}

__STATIC_INLINE void nrf_clock_lf_src_set(nrf_clock_lfclk_t source)
{
    NRF_CLOCK->LFCLKSRC = (uint32_t)(source);
    d2ac:	2202      	movs	r2, #2
    d2ae:	4b05      	ldr	r3, [pc, #20]	; (d2c4 <hfclk_init+0x2c>)
 *
 * @param list A pointer on the list to initialize
 */
static inline void sys_slist_init(sys_slist_t *list)
{
	list->head = NULL;
    d2b0:	2000      	movs	r0, #0
    d2b2:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    NRF_CLOCK->INTENSET = int_mask;
    d2b6:	2203      	movs	r2, #3
    d2b8:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
			(NRF_POWER_INT_USBDETECTED_MASK |
			NRF_POWER_INT_USBREMOVED_MASK |
			NRF_POWER_INT_USBPWRRDY_MASK),
			(0))));

	sys_slist_init(&((struct nrf_clock_control *)dev->driver_data)->list);
    d2bc:	68a3      	ldr	r3, [r4, #8]
	list->tail = NULL;
    d2be:	e9c3 0000 	strd	r0, r0, [r3]

	return 0;
}
    d2c2:	bd10      	pop	{r4, pc}
    d2c4:	40005000 	.word	0x40005000

0000d2c8 <nrf_power_clock_isr>:
	}
#endif
}

void nrf_power_clock_isr(void *arg)
{
    d2c8:	b508      	push	{r3, lr}
    return (bool)*((volatile uint32_t *)((uint8_t *)NRF_CLOCK + event));
    d2ca:	4b10      	ldr	r3, [pc, #64]	; (d30c <nrf_power_clock_isr+0x44>)
    d2cc:	681a      	ldr	r2, [r3, #0]
	bool ret = nrf_clock_event_check(evt) &&
    d2ce:	b162      	cbz	r2, d2ea <nrf_power_clock_isr+0x22>
    return (bool)(NRF_CLOCK->INTENCLR & int_mask);
    d2d0:	4a0f      	ldr	r2, [pc, #60]	; (d310 <nrf_power_clock_isr+0x48>)
    d2d2:	f8d2 2308 	ldr.w	r2, [r2, #776]	; 0x308
	if (ret) {
    d2d6:	07d1      	lsls	r1, r2, #31
    d2d8:	d507      	bpl.n	d2ea <nrf_power_clock_isr+0x22>
    *((volatile uint32_t *)((uint8_t *)NRF_CLOCK + event)) = 0x0UL;
    d2da:	2200      	movs	r2, #0
	ARG_UNUSED(arg);

	if (clock_event_check_and_clean(NRF_CLOCK_EVENT_HFCLKSTARTED,
					NRF_CLOCK_INT_HF_STARTED_MASK)) {
		struct device *hfclk_dev = DEVICE_GET(clock_nrf5_m16src);
		struct nrf_clock_control *data = hfclk_dev->driver_data;
    d2dc:	480d      	ldr	r0, [pc, #52]	; (d314 <nrf_power_clock_isr+0x4c>)
    d2de:	601a      	str	r2, [r3, #0]

		/* Check needed due to anomaly 201:
		 * HFCLKSTARTED may be generated twice.
		 */
		if (!data->started) {
    d2e0:	6883      	ldr	r3, [r0, #8]
    d2e2:	7a5b      	ldrb	r3, [r3, #9]
    d2e4:	b90b      	cbnz	r3, d2ea <nrf_power_clock_isr+0x22>
			clkstarted_handle(hfclk_dev);
    d2e6:	f004 fb0e 	bl	11906 <clkstarted_handle>
    return (bool)*((volatile uint32_t *)((uint8_t *)NRF_CLOCK + event));
    d2ea:	4b0b      	ldr	r3, [pc, #44]	; (d318 <nrf_power_clock_isr+0x50>)
    d2ec:	681a      	ldr	r2, [r3, #0]
	bool ret = nrf_clock_event_check(evt) &&
    d2ee:	b15a      	cbz	r2, d308 <nrf_power_clock_isr+0x40>
    return (bool)(NRF_CLOCK->INTENCLR & int_mask);
    d2f0:	4a07      	ldr	r2, [pc, #28]	; (d310 <nrf_power_clock_isr+0x48>)
    d2f2:	f8d2 2308 	ldr.w	r2, [r2, #776]	; 0x308
	if (ret) {
    d2f6:	0792      	lsls	r2, r2, #30
    d2f8:	d506      	bpl.n	d308 <nrf_power_clock_isr+0x40>
    *((volatile uint32_t *)((uint8_t *)NRF_CLOCK + event)) = 0x0UL;
    d2fa:	2200      	movs	r2, #0

		if (IS_ENABLED(
			CONFIG_CLOCK_CONTROL_NRF_K32SRC_RC_CALIBRATION)) {
			z_nrf_clock_calibration_lfclk_started(lfclk_dev);
		}
		clkstarted_handle(lfclk_dev);
    d2fc:	4807      	ldr	r0, [pc, #28]	; (d31c <nrf_power_clock_isr+0x54>)
    d2fe:	601a      	str	r2, [r3, #0]
	usb_power_isr();

	if (IS_ENABLED(CONFIG_CLOCK_CONTROL_NRF_K32SRC_RC_CALIBRATION)) {
		z_nrf_clock_calibration_isr();
	}
}
    d300:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		clkstarted_handle(lfclk_dev);
    d304:	f004 baff 	b.w	11906 <clkstarted_handle>
}
    d308:	bd08      	pop	{r3, pc}
    d30a:	bf00      	nop
    d30c:	40005100 	.word	0x40005100
    d310:	40005000 	.word	0x40005000
    d314:	200258c0 	.word	0x200258c0
    d318:	40005104 	.word	0x40005104
    d31c:	200258cc 	.word	0x200258cc

0000d320 <st7789v_set_pixel_format>:

int st7789v_set_pixel_format(const struct device *dev,
			     const enum display_pixel_format pixel_format)
{
#ifdef CONFIG_ST7789V_RGB565
	if (pixel_format == PIXEL_FORMAT_RGB_565) {
    d320:	2910      	cmp	r1, #16
{
    d322:	b508      	push	{r3, lr}
	if (pixel_format == PIXEL_FORMAT_RGB_565) {
    d324:	d012      	beq.n	d34c <st7789v_set_pixel_format+0x2c>
#else
	if (pixel_format == PIXEL_FORMAT_RGB_888) {
#endif
		return 0;
	}
	LOG_ERR("Pixel format change not implemented");
    d326:	2301      	movs	r3, #1
    d328:	f04f 0100 	mov.w	r1, #0
    d32c:	4a08      	ldr	r2, [pc, #32]	; (d350 <st7789v_set_pixel_format+0x30>)
    d32e:	f363 0102 	bfi	r1, r3, #0, #3
    d332:	4b08      	ldr	r3, [pc, #32]	; (d354 <st7789v_set_pixel_format+0x34>)
    d334:	f36f 01c5 	bfc	r1, #3, #3
    d338:	1a9b      	subs	r3, r3, r2
    d33a:	08db      	lsrs	r3, r3, #3
    d33c:	4806      	ldr	r0, [pc, #24]	; (d358 <st7789v_set_pixel_format+0x38>)
    d33e:	f363 118f 	bfi	r1, r3, #6, #10
    d342:	f003 ff69 	bl	11218 <log_0>
    d346:	f06f 0022 	mvn.w	r0, #34	; 0x22
	return -ENOTSUP;
}
    d34a:	bd08      	pop	{r3, pc}
		return 0;
    d34c:	2000      	movs	r0, #0
    d34e:	e7fc      	b.n	d34a <st7789v_set_pixel_format+0x2a>
    d350:	00012550 	.word	0x00012550
    d354:	00012560 	.word	0x00012560
    d358:	000129e7 	.word	0x000129e7

0000d35c <st7789v_set_orientation>:

int st7789v_set_orientation(const struct device *dev,
			    const enum display_orientation orientation)
{
    d35c:	b508      	push	{r3, lr}
	if (orientation == DISPLAY_ORIENTATION_NORMAL) {
    d35e:	b191      	cbz	r1, d386 <st7789v_set_orientation+0x2a>
		return 0;
	}
	LOG_ERR("Changing display orientation not implemented");
    d360:	2301      	movs	r3, #1
    d362:	f04f 0100 	mov.w	r1, #0
    d366:	4a09      	ldr	r2, [pc, #36]	; (d38c <st7789v_set_orientation+0x30>)
    d368:	f363 0102 	bfi	r1, r3, #0, #3
    d36c:	4b08      	ldr	r3, [pc, #32]	; (d390 <st7789v_set_orientation+0x34>)
    d36e:	f36f 01c5 	bfc	r1, #3, #3
    d372:	1a9b      	subs	r3, r3, r2
    d374:	08db      	lsrs	r3, r3, #3
    d376:	4807      	ldr	r0, [pc, #28]	; (d394 <st7789v_set_orientation+0x38>)
    d378:	f363 118f 	bfi	r1, r3, #6, #10
    d37c:	f003 ff4c 	bl	11218 <log_0>
    d380:	f06f 0022 	mvn.w	r0, #34	; 0x22
	return -ENOTSUP;
}
    d384:	bd08      	pop	{r3, pc}
		return 0;
    d386:	4608      	mov	r0, r1
    d388:	e7fc      	b.n	d384 <st7789v_set_orientation+0x28>
    d38a:	bf00      	nop
    d38c:	00012550 	.word	0x00012550
    d390:	00012560 	.word	0x00012560
    d394:	000129ba 	.word	0x000129ba

0000d398 <st7789v_init>:
{
    d398:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    d39c:	4680      	mov	r8, r0
	struct st7789v_data *data = (struct st7789v_data *)dev->driver_data;
    d39e:	6884      	ldr	r4, [r0, #8]
    d3a0:	4855      	ldr	r0, [pc, #340]	; (d4f8 <st7789v_init+0x160>)
    d3a2:	f002 fcfd 	bl	fda0 <z_impl_device_get_binding>
    d3a6:	4e55      	ldr	r6, [pc, #340]	; (d4fc <st7789v_init+0x164>)
    d3a8:	4b55      	ldr	r3, [pc, #340]	; (d500 <st7789v_init+0x168>)
	data->spi_dev = device_get_binding(DISPLAY_SPI_DEV);
    d3aa:	6020      	str	r0, [r4, #0]
    d3ac:	1af6      	subs	r6, r6, r3
    d3ae:	f3c6 06c9 	ubfx	r6, r6, #3, #10
	if (data->spi_dev == NULL) {
    d3b2:	b980      	cbnz	r0, d3d6 <st7789v_init+0x3e>
		LOG_ERR("Could not get SPI device for LCD");
    d3b4:	f04f 0100 	mov.w	r1, #0
    d3b8:	2301      	movs	r3, #1
    d3ba:	f363 0102 	bfi	r1, r3, #0, #3
    d3be:	f360 01c5 	bfi	r1, r0, #3, #3
    d3c2:	4850      	ldr	r0, [pc, #320]	; (d504 <st7789v_init+0x16c>)
    d3c4:	f366 118f 	bfi	r1, r6, #6, #10
		LOG_ERR("Could not get GPIO port for cmd/DATA port");
    d3c8:	f003 ff26 	bl	11218 <log_0>
		return -EPERM;
    d3cc:	f04f 35ff 	mov.w	r5, #4294967295
}
    d3d0:	4628      	mov	r0, r5
    d3d2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	data->spi_config.frequency = ST7789V_SPI_MAX_FREQUENCY;
    d3d6:	4a4c      	ldr	r2, [pc, #304]	; (d508 <st7789v_init+0x170>)
    d3d8:	4b4c      	ldr	r3, [pc, #304]	; (d50c <st7789v_init+0x174>)
    d3da:	e9c4 2301 	strd	r2, r3, [r4, #4]
    d3de:	484c      	ldr	r0, [pc, #304]	; (d510 <st7789v_init+0x178>)
    d3e0:	f002 fcde 	bl	fda0 <z_impl_device_get_binding>
	data->cs_ctrl.delay = 0U;
    d3e4:	2500      	movs	r5, #0
    d3e6:	230d      	movs	r3, #13
    d3e8:	e9c4 3505 	strd	r3, r5, [r4, #20]
	data->spi_config.cs = &(data->cs_ctrl);
    d3ec:	f104 0310 	add.w	r3, r4, #16
	data->cs_ctrl.gpio_dev =
    d3f0:	6120      	str	r0, [r4, #16]
	data->spi_config.cs = &(data->cs_ctrl);
    d3f2:	60e3      	str	r3, [r4, #12]
    d3f4:	4846      	ldr	r0, [pc, #280]	; (d510 <st7789v_init+0x178>)
    d3f6:	f002 fcd3 	bl	fda0 <z_impl_device_get_binding>
	data->reset_gpio =
    d3fa:	61e0      	str	r0, [r4, #28]
	if (data->reset_gpio == NULL) {
    d3fc:	b950      	cbnz	r0, d414 <st7789v_init+0x7c>
		LOG_ERR("Could not get GPIO port for display reset");
    d3fe:	f04f 0100 	mov.w	r1, #0
    d402:	2201      	movs	r2, #1
    d404:	f362 0102 	bfi	r1, r2, #0, #3
    d408:	f360 01c5 	bfi	r1, r0, #3, #3
    d40c:	f366 118f 	bfi	r1, r6, #6, #10
    d410:	4840      	ldr	r0, [pc, #256]	; (d514 <st7789v_init+0x17c>)
    d412:	e7d9      	b.n	d3c8 <st7789v_init+0x30>
				    u32_t pin, int flags)
{
	const struct gpio_driver_api *api =
		(const struct gpio_driver_api *)port->driver_api;

	return api->config(port, access_op, pin, flags);
    d414:	6843      	ldr	r3, [r0, #4]
    d416:	220c      	movs	r2, #12
    d418:	681f      	ldr	r7, [r3, #0]
    d41a:	4629      	mov	r1, r5
    d41c:	2301      	movs	r3, #1
    d41e:	47b8      	blx	r7
	if (gpio_pin_configure(data->reset_gpio, ST7789V_RESET_PIN, GPIO_DIR_OUT)) {
    d420:	4607      	mov	r7, r0
    d422:	b170      	cbz	r0, d442 <st7789v_init+0xaa>
		LOG_ERR("Couldn't configure reset pin");
    d424:	f04f 0100 	mov.w	r1, #0
    d428:	2301      	movs	r3, #1
    d42a:	f363 0102 	bfi	r1, r3, #0, #3
    d42e:	f365 01c5 	bfi	r1, r5, #3, #3
    d432:	4839      	ldr	r0, [pc, #228]	; (d518 <st7789v_init+0x180>)
    d434:	f366 118f 	bfi	r1, r6, #6, #10
		LOG_ERR("Couldn't configure cmd/DATA pin");
    d438:	f003 feee 	bl	11218 <log_0>
		return -EIO;
    d43c:	f06f 0504 	mvn.w	r5, #4
    d440:	e7c6      	b.n	d3d0 <st7789v_init+0x38>
    d442:	4833      	ldr	r0, [pc, #204]	; (d510 <st7789v_init+0x178>)
    d444:	f002 fcac 	bl	fda0 <z_impl_device_get_binding>
	data->cmd_data_gpio =
    d448:	6220      	str	r0, [r4, #32]
	if (data->cmd_data_gpio == NULL) {
    d44a:	b950      	cbnz	r0, d462 <st7789v_init+0xca>
		LOG_ERR("Could not get GPIO port for cmd/DATA port");
    d44c:	f04f 0100 	mov.w	r1, #0
    d450:	2201      	movs	r2, #1
    d452:	f362 0102 	bfi	r1, r2, #0, #3
    d456:	f360 01c5 	bfi	r1, r0, #3, #3
    d45a:	f366 118f 	bfi	r1, r6, #6, #10
    d45e:	482f      	ldr	r0, [pc, #188]	; (d51c <st7789v_init+0x184>)
    d460:	e7b2      	b.n	d3c8 <st7789v_init+0x30>
    d462:	6843      	ldr	r3, [r0, #4]
    d464:	220a      	movs	r2, #10
    d466:	681d      	ldr	r5, [r3, #0]
    d468:	4639      	mov	r1, r7
    d46a:	2301      	movs	r3, #1
    d46c:	47a8      	blx	r5
	if (gpio_pin_configure(data->cmd_data_gpio, ST7789V_CMD_DATA_PIN,
    d46e:	4605      	mov	r5, r0
    d470:	b150      	cbz	r0, d488 <st7789v_init+0xf0>
		LOG_ERR("Couldn't configure cmd/DATA pin");
    d472:	f04f 0100 	mov.w	r1, #0
    d476:	2301      	movs	r3, #1
    d478:	f363 0102 	bfi	r1, r3, #0, #3
    d47c:	f367 01c5 	bfi	r1, r7, #3, #3
    d480:	f366 118f 	bfi	r1, r6, #6, #10
    d484:	4826      	ldr	r0, [pc, #152]	; (d520 <st7789v_init+0x188>)
    d486:	e7d7      	b.n	d438 <st7789v_init+0xa0>
	data->height = 320;
    d488:	4b26      	ldr	r3, [pc, #152]	; (d524 <st7789v_init+0x18c>)
	LOG_DBG("Resetting display");
    d48a:	f04f 0200 	mov.w	r2, #0
	data->width = 240;
    d48e:	e9c4 3009 	strd	r3, r0, [r4, #36]	; 0x24
	LOG_DBG("Resetting display");
    d492:	2304      	movs	r3, #4
    d494:	f363 0202 	bfi	r2, r3, #0, #3
    d498:	f360 02c5 	bfi	r2, r0, #3, #3
    d49c:	f366 128f 	bfi	r2, r6, #6, #10
    d4a0:	4921      	ldr	r1, [pc, #132]	; (d528 <st7789v_init+0x190>)
    d4a2:	4822      	ldr	r0, [pc, #136]	; (d52c <st7789v_init+0x194>)
    d4a4:	f003 fec5 	bl	11232 <log_1>
	gpio_pin_write(data->reset_gpio, ST7789V_RESET_PIN, 1);
    d4a8:	2201      	movs	r2, #1
    d4aa:	210c      	movs	r1, #12
    d4ac:	69e0      	ldr	r0, [r4, #28]
    d4ae:	f004 fa61 	bl	11974 <gpio_pin_write>
	return z_impl_k_sleep(ms);
    d4b2:	2001      	movs	r0, #1
    d4b4:	f004 fe19 	bl	120ea <z_impl_k_sleep>
	gpio_pin_write(data->reset_gpio, ST7789V_RESET_PIN, 0);
    d4b8:	462a      	mov	r2, r5
    d4ba:	210c      	movs	r1, #12
    d4bc:	69e0      	ldr	r0, [r4, #28]
    d4be:	f004 fa59 	bl	11974 <gpio_pin_write>
    d4c2:	2006      	movs	r0, #6
    d4c4:	f004 fe11 	bl	120ea <z_impl_k_sleep>
	gpio_pin_write(data->reset_gpio, ST7789V_RESET_PIN, 1);
    d4c8:	2201      	movs	r2, #1
    d4ca:	210c      	movs	r1, #12
    d4cc:	69e0      	ldr	r0, [r4, #28]
    d4ce:	f004 fa51 	bl	11974 <gpio_pin_write>
    d4d2:	2014      	movs	r0, #20
    d4d4:	f004 fe09 	bl	120ea <z_impl_k_sleep>
	st7789v_blanking_on(dev);
    d4d8:	4640      	mov	r0, r8
    d4da:	f004 fa91 	bl	11a00 <st7789v_blanking_on>
	st7789v_lcd_init(data);
    d4de:	4620      	mov	r0, r4
    d4e0:	f000 f8b2 	bl	d648 <st7789v_lcd_init>
	st7789v_transmit(data, ST7789V_CMD_SLEEP_OUT, NULL, 0);
    d4e4:	462b      	mov	r3, r5
    d4e6:	462a      	mov	r2, r5
    d4e8:	2111      	movs	r1, #17
    d4ea:	4620      	mov	r0, r4
    d4ec:	f004 fa5b 	bl	119a6 <st7789v_transmit>
    d4f0:	2078      	movs	r0, #120	; 0x78
    d4f2:	f004 fdfa 	bl	120ea <z_impl_k_sleep>
    d4f6:	e76b      	b.n	d3d0 <st7789v_init+0x38>
    d4f8:	0001272b 	.word	0x0001272b
    d4fc:	00012560 	.word	0x00012560
    d500:	00012550 	.word	0x00012550
    d504:	000128eb 	.word	0x000128eb
    d508:	00b71b00 	.word	0x00b71b00
    d50c:	00010100 	.word	0x00010100
    d510:	0001290c 	.word	0x0001290c
    d514:	00012913 	.word	0x00012913
    d518:	0001293d 	.word	0x0001293d
    d51c:	0001295a 	.word	0x0001295a
    d520:	00012984 	.word	0x00012984
    d524:	00f00140 	.word	0x00f00140
    d528:	000128c7 	.word	0x000128c7
    d52c:	000129a4 	.word	0x000129a4

0000d530 <st7789v_write>:
{
    d530:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    d534:	461e      	mov	r6, r3
	LOG_DBG("Writing %dx%d (w,h) @ %dx%d (x,y)",
    d536:	f04f 0804 	mov.w	r8, #4
    d53a:	f04f 0300 	mov.w	r3, #0
{
    d53e:	460d      	mov	r5, r1
    d540:	4614      	mov	r4, r2
    d542:	493d      	ldr	r1, [pc, #244]	; (d638 <st7789v_write+0x108>)
    d544:	4a3d      	ldr	r2, [pc, #244]	; (d63c <st7789v_write+0x10c>)
	LOG_DBG("Writing %dx%d (w,h) @ %dx%d (x,y)",
    d546:	f368 0302 	bfi	r3, r8, #0, #3
    d54a:	1a52      	subs	r2, r2, r1
    d54c:	08d2      	lsrs	r2, r2, #3
    d54e:	f36f 03c5 	bfc	r3, #3, #3
    d552:	f362 138f 	bfi	r3, r2, #6, #10
    d556:	4a3a      	ldr	r2, [pc, #232]	; (d640 <st7789v_write+0x110>)
{
    d558:	b089      	sub	sp, #36	; 0x24
	LOG_DBG("Writing %dx%d (w,h) @ %dx%d (x,y)",
    d55a:	9203      	str	r2, [sp, #12]
    d55c:	88b2      	ldrh	r2, [r6, #4]
	struct st7789v_data *data = (struct st7789v_data *)dev->driver_data;
    d55e:	6887      	ldr	r7, [r0, #8]
	LOG_DBG("Writing %dx%d (w,h) @ %dx%d (x,y)",
    d560:	9204      	str	r2, [sp, #16]
    d562:	88f2      	ldrh	r2, [r6, #6]
    d564:	a903      	add	r1, sp, #12
    d566:	e9cd 2505 	strd	r2, r5, [sp, #20]
    d56a:	4836      	ldr	r0, [pc, #216]	; (d644 <st7789v_write+0x114>)
    d56c:	2205      	movs	r2, #5
{
    d56e:	f8dd 9048 	ldr.w	r9, [sp, #72]	; 0x48
	LOG_DBG("Writing %dx%d (w,h) @ %dx%d (x,y)",
    d572:	9407      	str	r4, [sp, #28]
    d574:	f003 fea4 	bl	112c0 <log_n>
	u16_t ram_x = x + data->x_offset;
    d578:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
	st7789v_set_mem_area(data, x, y, desc->width, desc->height);
    d57a:	88b3      	ldrh	r3, [r6, #4]
	u16_t ram_x = x + data->x_offset;
    d57c:	4415      	add	r5, r2
	u16_t ram_y = y + data->y_offset;
    d57e:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
	u16_t ram_x = x + data->x_offset;
    d580:	b2ad      	uxth	r5, r5
	u16_t ram_y = y + data->y_offset;
    d582:	4414      	add	r4, r2
	spi_data[0] = sys_cpu_to_be16(ram_x);
    d584:	ba6a      	rev16	r2, r5
	spi_data[1] = sys_cpu_to_be16(ram_x + w - 1);
    d586:	441d      	add	r5, r3
	st7789v_set_mem_area(data, x, y, desc->width, desc->height);
    d588:	f8b6 a006 	ldrh.w	sl, [r6, #6]
	spi_data[1] = sys_cpu_to_be16(ram_x + w - 1);
    d58c:	3d01      	subs	r5, #1
	st7789v_transmit(data, ST7789V_CMD_CASET, (u8_t *)&spi_data[0], 4);
    d58e:	4643      	mov	r3, r8
	u16_t ram_y = y + data->y_offset;
    d590:	b2a4      	uxth	r4, r4
	spi_data[0] = sys_cpu_to_be16(ram_x);
    d592:	f8ad 200c 	strh.w	r2, [sp, #12]
	spi_data[1] = sys_cpu_to_be16(ram_x + w - 1);
    d596:	ba6d      	rev16	r5, r5
	st7789v_transmit(data, ST7789V_CMD_CASET, (u8_t *)&spi_data[0], 4);
    d598:	aa03      	add	r2, sp, #12
    d59a:	212a      	movs	r1, #42	; 0x2a
    d59c:	4638      	mov	r0, r7
	spi_data[1] = sys_cpu_to_be16(ram_x + w - 1);
    d59e:	f8ad 500e 	strh.w	r5, [sp, #14]
	st7789v_transmit(data, ST7789V_CMD_CASET, (u8_t *)&spi_data[0], 4);
    d5a2:	f004 fa00 	bl	119a6 <st7789v_transmit>
	spi_data[0] = sys_cpu_to_be16(ram_y);
    d5a6:	ba63      	rev16	r3, r4
	spi_data[1] = sys_cpu_to_be16(ram_y + h - 1);
    d5a8:	4454      	add	r4, sl
    d5aa:	3c01      	subs	r4, #1
	spi_data[0] = sys_cpu_to_be16(ram_y);
    d5ac:	f8ad 300c 	strh.w	r3, [sp, #12]
	spi_data[1] = sys_cpu_to_be16(ram_y + h - 1);
    d5b0:	ba64      	rev16	r4, r4
	st7789v_transmit(data, ST7789V_CMD_RASET, (u8_t *)&spi_data[0], 4);
    d5b2:	4643      	mov	r3, r8
    d5b4:	aa03      	add	r2, sp, #12
    d5b6:	212b      	movs	r1, #43	; 0x2b
    d5b8:	4638      	mov	r0, r7
	spi_data[1] = sys_cpu_to_be16(ram_y + h - 1);
    d5ba:	f8ad 400e 	strh.w	r4, [sp, #14]
	st7789v_transmit(data, ST7789V_CMD_RASET, (u8_t *)&spi_data[0], 4);
    d5be:	f004 f9f2 	bl	119a6 <st7789v_transmit>
	if (desc->pitch > desc->width) {
    d5c2:	88b3      	ldrh	r3, [r6, #4]
    d5c4:	8932      	ldrh	r2, [r6, #8]
    d5c6:	88f5      	ldrh	r5, [r6, #6]
		nbr_of_writes = desc->height;
    d5c8:	429a      	cmp	r2, r3
    d5ca:	bf84      	itt	hi
    d5cc:	46aa      	movhi	sl, r5
    d5ce:	2501      	movhi	r5, #1
	st7789v_transmit(data, ST7789V_CMD_RAMWR,
    d5d0:	ea4f 0343 	mov.w	r3, r3, lsl #1
    d5d4:	fb05 f303 	mul.w	r3, r5, r3
    d5d8:	464a      	mov	r2, r9
    d5da:	f04f 012c 	mov.w	r1, #44	; 0x2c
    d5de:	4638      	mov	r0, r7
		nbr_of_writes = desc->height;
    d5e0:	bf98      	it	ls
    d5e2:	f04f 0a01 	movls.w	sl, #1
	st7789v_transmit(data, ST7789V_CMD_RAMWR,
    d5e6:	f004 f9de 	bl	119a6 <st7789v_transmit>
	tx_bufs.buffers = &tx_buf;
    d5ea:	eb0d 0308 	add.w	r3, sp, r8
    d5ee:	9303      	str	r3, [sp, #12]
	tx_bufs.count = 1;
    d5f0:	2301      	movs	r3, #1
	for (write_cnt = 1U; write_cnt < nbr_of_writes; ++write_cnt) {
    d5f2:	f04f 0800 	mov.w	r8, #0
	write_data_start += (desc->pitch * ST7789V_PIXEL_SIZE);
    d5f6:	8934      	ldrh	r4, [r6, #8]
	tx_bufs.count = 1;
    d5f8:	9304      	str	r3, [sp, #16]
	write_data_start += (desc->pitch * ST7789V_PIXEL_SIZE);
    d5fa:	eb09 0444 	add.w	r4, r9, r4, lsl #1
		spi_write(data->spi_dev, &data->spi_config, &tx_bufs);
    d5fe:	f107 0904 	add.w	r9, r7, #4
    d602:	f108 0801 	add.w	r8, r8, #1
	for (write_cnt = 1U; write_cnt < nbr_of_writes; ++write_cnt) {
    d606:	fa1f f388 	uxth.w	r3, r8
    d60a:	459a      	cmp	sl, r3
    d60c:	d803      	bhi.n	d616 <st7789v_write+0xe6>
}
    d60e:	2000      	movs	r0, #0
    d610:	b009      	add	sp, #36	; 0x24
    d612:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		tx_buf.len = desc->width * ST7789V_PIXEL_SIZE * write_h;
    d616:	88b3      	ldrh	r3, [r6, #4]
		tx_buf.buf = (void *)write_data_start;
    d618:	9401      	str	r4, [sp, #4]
		tx_buf.len = desc->width * ST7789V_PIXEL_SIZE * write_h;
    d61a:	005b      	lsls	r3, r3, #1
    d61c:	436b      	muls	r3, r5
		spi_write(data->spi_dev, &data->spi_config, &tx_bufs);
    d61e:	6838      	ldr	r0, [r7, #0]
		tx_buf.len = desc->width * ST7789V_PIXEL_SIZE * write_h;
    d620:	9302      	str	r3, [sp, #8]
				       const struct spi_buf_set *rx_bufs)
{
	const struct spi_driver_api *api =
		(const struct spi_driver_api *)dev->driver_api;

	return api->transceive(dev, config, tx_bufs, rx_bufs);
    d622:	6843      	ldr	r3, [r0, #4]
    d624:	aa03      	add	r2, sp, #12
    d626:	f8d3 b000 	ldr.w	fp, [r3]
    d62a:	4649      	mov	r1, r9
    d62c:	2300      	movs	r3, #0
    d62e:	47d8      	blx	fp
		write_data_start += (desc->pitch * ST7789V_PIXEL_SIZE);
    d630:	8933      	ldrh	r3, [r6, #8]
    d632:	eb04 0443 	add.w	r4, r4, r3, lsl #1
    d636:	e7e4      	b.n	d602 <st7789v_write+0xd2>
    d638:	00012550 	.word	0x00012550
    d63c:	00012560 	.word	0x00012560
    d640:	000128dd 	.word	0x000128dd
    d644:	00012a0b 	.word	0x00012a0b

0000d648 <st7789v_lcd_init>:
#include "display_st7789v.h"
#include <zephyr.h>
#include <stddef.h>

void st7789v_lcd_init(struct st7789v_data *p_st7789v)
{
    d648:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	 * RAM area (so the LCD actually starts at column 35).
	 * We switch the rows/column addressing around so that the
	 * display is 320x170, and so the effective LCD is offset
	 * by 35 "rows".
	 */
	st7789v_set_lcd_margins(p_st7789v, 0, 35);
    d64c:	2223      	movs	r2, #35	; 0x23
    d64e:	2100      	movs	r1, #0
{
    d650:	4604      	mov	r4, r0
	st7789v_set_lcd_margins(p_st7789v, 0, 35);
    d652:	f004 f9a5 	bl	119a0 <st7789v_set_lcd_margins>

	u8_t cmd;
	u8_t data[14];

	cmd = ST7789V_CMD_PORCTRL;
	data[0] = 0x0c;
    d656:	4b5c      	ldr	r3, [pc, #368]	; (d7c8 <st7789v_lcd_init+0x180>)
	data[2] = 0x02;
	data[3] = 0x01;
	st7789v_transmit(p_st7789v, cmd, data, 4);

	cmd = ST7789V_CMD_DGMEN;
	data[0] = 0x00;
    d658:	2600      	movs	r6, #0
	data[0] = 0x0c;
    d65a:	9300      	str	r3, [sp, #0]
	data[3] = 0x33;
    d65c:	2333      	movs	r3, #51	; 0x33
	st7789v_transmit(p_st7789v, cmd, data, 5);
    d65e:	466a      	mov	r2, sp
	data[3] = 0x33;
    d660:	f88d 3004 	strb.w	r3, [sp, #4]
	st7789v_transmit(p_st7789v, cmd, data, 5);
    d664:	4620      	mov	r0, r4
    d666:	2305      	movs	r3, #5
    d668:	21b2      	movs	r1, #178	; 0xb2
    d66a:	f004 f99c 	bl	119a6 <st7789v_transmit>
	data[0] = 0x5a;
    d66e:	4b57      	ldr	r3, [pc, #348]	; (d7cc <st7789v_lcd_init+0x184>)
	st7789v_transmit(p_st7789v, cmd, data, 4);
    d670:	466a      	mov	r2, sp
	data[0] = 0x5a;
    d672:	9300      	str	r3, [sp, #0]
	st7789v_transmit(p_st7789v, cmd, data, 4);
    d674:	4620      	mov	r0, r4
    d676:	2304      	movs	r3, #4
    d678:	21df      	movs	r1, #223	; 0xdf
    d67a:	f004 f994 	bl	119a6 <st7789v_transmit>
	st7789v_transmit(p_st7789v, cmd, data, 1);
    d67e:	466a      	mov	r2, sp
    d680:	4620      	mov	r0, r4
    d682:	2301      	movs	r3, #1
    d684:	21ba      	movs	r1, #186	; 0xba
	data[0] = 0x00;
    d686:	f88d 6000 	strb.w	r6, [sp]
	st7789v_transmit(p_st7789v, cmd, data, 1);
    d68a:	f004 f98c 	bl	119a6 <st7789v_transmit>

	cmd = ST7789V_CMD_GCTRL;
	data[0] = 0x35;
    d68e:	2335      	movs	r3, #53	; 0x35
	st7789v_transmit(p_st7789v, cmd, data, 1);
    d690:	466a      	mov	r2, sp
	data[0] = 0x35;
    d692:	f88d 3000 	strb.w	r3, [sp]
	st7789v_transmit(p_st7789v, cmd, data, 1);
    d696:	4620      	mov	r0, r4
    d698:	2301      	movs	r3, #1
    d69a:	21b7      	movs	r1, #183	; 0xb7
    d69c:	f004 f983 	bl	119a6 <st7789v_transmit>

	cmd = ST7789V_CMD_VCOMS;
	data[0] = 0x2b;
    d6a0:	232b      	movs	r3, #43	; 0x2b
	data[0] = ST7789V_LCMCTRL_XBGR;
	st7789v_transmit(p_st7789v, cmd, data, 1);
#endif

	cmd = ST7789V_CMD_VDVVRHEN;
	data[0] = 0x01;
    d6a2:	2501      	movs	r5, #1
	st7789v_transmit(p_st7789v, cmd, data, 1);

	cmd = ST7789V_CMD_VRH;
	data[0] = 0x0f;
    d6a4:	f04f 080f 	mov.w	r8, #15
	st7789v_transmit(p_st7789v, cmd, data, 1);

	cmd = ST7789V_CMD_VDS;
	data[0] = 0x20;
    d6a8:	2720      	movs	r7, #32
	data[0] = 0x2b;
    d6aa:	f88d 3000 	strb.w	r3, [sp]
	st7789v_transmit(p_st7789v, cmd, data, 1);
    d6ae:	466a      	mov	r2, sp
    d6b0:	4620      	mov	r0, r4
    d6b2:	2301      	movs	r3, #1
    d6b4:	21bb      	movs	r1, #187	; 0xbb
    d6b6:	f004 f976 	bl	119a6 <st7789v_transmit>
	st7789v_transmit(p_st7789v, cmd, data, 1);
    d6ba:	462b      	mov	r3, r5
    d6bc:	466a      	mov	r2, sp
    d6be:	4620      	mov	r0, r4
    d6c0:	21c2      	movs	r1, #194	; 0xc2
	data[0] = 0x01;
    d6c2:	f88d 5000 	strb.w	r5, [sp]
	st7789v_transmit(p_st7789v, cmd, data, 1);
    d6c6:	f004 f96e 	bl	119a6 <st7789v_transmit>
	st7789v_transmit(p_st7789v, cmd, data, 1);
    d6ca:	462b      	mov	r3, r5
    d6cc:	466a      	mov	r2, sp
    d6ce:	4620      	mov	r0, r4
    d6d0:	21c3      	movs	r1, #195	; 0xc3
	data[0] = 0x0f;
    d6d2:	f88d 8000 	strb.w	r8, [sp]
	st7789v_transmit(p_st7789v, cmd, data, 1);
    d6d6:	f004 f966 	bl	119a6 <st7789v_transmit>
	st7789v_transmit(p_st7789v, cmd, data, 1);
    d6da:	462b      	mov	r3, r5
    d6dc:	466a      	mov	r2, sp
    d6de:	4620      	mov	r0, r4
    d6e0:	21c4      	movs	r1, #196	; 0xc4
	data[0] = 0x20;
    d6e2:	f88d 7000 	strb.w	r7, [sp]
	st7789v_transmit(p_st7789v, cmd, data, 1);
    d6e6:	f004 f95e 	bl	119a6 <st7789v_transmit>

	cmd = ST7789V_CMD_FRCTRL2;
	data[0] = 0x0f;
	st7789v_transmit(p_st7789v, cmd, data, 1);
    d6ea:	462b      	mov	r3, r5
    d6ec:	466a      	mov	r2, sp
    d6ee:	4620      	mov	r0, r4
    d6f0:	21c6      	movs	r1, #198	; 0xc6
	data[0] = 0x0f;
    d6f2:	f88d 8000 	strb.w	r8, [sp]
	st7789v_transmit(p_st7789v, cmd, data, 1);
    d6f6:	f004 f956 	bl	119a6 <st7789v_transmit>

	cmd = ST7789V_CMD_PWCTRL1;
	data[0] = 0x52;
    d6fa:	f24a 1352 	movw	r3, #41298	; 0xa152
	data[1] = (0x2 << 6) | (0x2 << 4) | 0x01;
	st7789v_transmit(p_st7789v, cmd, data, 2);
    d6fe:	466a      	mov	r2, sp
	data[0] = 0x52;
    d700:	f8ad 3000 	strh.w	r3, [sp]
	st7789v_transmit(p_st7789v, cmd, data, 2);
    d704:	4620      	mov	r0, r4
    d706:	2302      	movs	r3, #2
    d708:	21d0      	movs	r1, #208	; 0xd0
    d70a:	f004 f94c 	bl	119a6 <st7789v_transmit>
	data[0] |= ST7789V_MADCTL_MX_RIGHT_TO_LEFT;
#endif
#ifdef CONFIG_ST7789V_REVERSE_Y
	data[0] |= ST7789V_MADCTL_MY_BOTTOM_TO_TOP;
#endif
	st7789v_transmit(p_st7789v, cmd, data, 1);
    d70e:	462b      	mov	r3, r5
    d710:	466a      	mov	r2, sp
    d712:	4620      	mov	r0, r4
    d714:	2136      	movs	r1, #54	; 0x36
	data[0] = ST7789V_MADCTL_MV_REVERSE_MODE;
    d716:	f88d 7000 	strb.w	r7, [sp]
	st7789v_transmit(p_st7789v, cmd, data, 1);
    d71a:	f004 f944 	bl	119a6 <st7789v_transmit>

	cmd = ST7789V_CMD_COLMOD;
#ifdef CONFIG_ST7789V_RGB565
	data[0] = ST7789V_COLMOD_RGB_65K
    d71e:	2355      	movs	r3, #85	; 0x55
		| ST7789V_COLMOD_FMT_16bit;
#else
	data[0] = ST7789V_COLMOD_RGB_262K
		| ST7789V_COLMOD_FMT_18bit;
#endif
	st7789v_transmit(p_st7789v, cmd, data, 1);
    d720:	466a      	mov	r2, sp
	data[0] = ST7789V_COLMOD_RGB_65K
    d722:	f88d 3000 	strb.w	r3, [sp]
	st7789v_transmit(p_st7789v, cmd, data, 1);
    d726:	4620      	mov	r0, r4
    d728:	462b      	mov	r3, r5
    d72a:	213a      	movs	r1, #58	; 0x3a
    d72c:	f004 f93b 	bl	119a6 <st7789v_transmit>

	cmd = ST7789V_CMD_INV_ON;
	st7789v_transmit(p_st7789v, cmd, NULL, 0);
    d730:	4633      	mov	r3, r6
    d732:	4632      	mov	r2, r6
    d734:	4620      	mov	r0, r4
    d736:	2121      	movs	r1, #33	; 0x21
    d738:	f004 f935 	bl	119a6 <st7789v_transmit>

	cmd = ST7789V_CMD_GAMSET;
	data[0] = 0x01U;
	st7789v_transmit(p_st7789v, cmd, data, 1);
    d73c:	462b      	mov	r3, r5
    d73e:	466a      	mov	r2, sp
    d740:	4620      	mov	r0, r4
    d742:	2126      	movs	r1, #38	; 0x26
	data[0] = 0x01U;
    d744:	f88d 5000 	strb.w	r5, [sp]
	st7789v_transmit(p_st7789v, cmd, data, 1);
    d748:	f004 f92d 	bl	119a6 <st7789v_transmit>

	cmd = ST7789V_CMD_PVGAMCTRL;
	data[0] = 0xD0 | 0x00;		/* v63 | V0 */
	data[1] = 0x00;			/* v1 */
	data[2] = 0x02;			/* v2 */
	data[3] = 0x07;			/* v4 */
    d74c:	4d20      	ldr	r5, [pc, #128]	; (d7d0 <st7789v_lcd_init+0x188>)
    d74e:	4b21      	ldr	r3, [pc, #132]	; (d7d4 <st7789v_lcd_init+0x18c>)
	data[9] = (0x02 << 4) | 0x09;	/* J1 | V50 */
	data[10] = 0x12;		/* V57 */
	data[11] = 0x12;		/* V59 */
	data[12] = 0x12;		/* V61 */
	data[13] = 0x17;		/* V62 */
	st7789v_transmit(p_st7789v, cmd, data, 14);
    d750:	466a      	mov	r2, sp
	data[3] = 0x07;			/* v4 */
    d752:	e9cd 5300 	strd	r5, r3, [sp]
	data[7] = (0x5 << 4) | 0x4;	/* V36 | V27 */
    d756:	4b20      	ldr	r3, [pc, #128]	; (d7d8 <st7789v_lcd_init+0x190>)
	st7789v_transmit(p_st7789v, cmd, data, 14);
    d758:	4620      	mov	r0, r4
	data[7] = (0x5 << 4) | 0x4;	/* V36 | V27 */
    d75a:	9302      	str	r3, [sp, #8]
	data[11] = 0x12;		/* V59 */
    d75c:	f241 7312 	movw	r3, #5906	; 0x1712
	st7789v_transmit(p_st7789v, cmd, data, 14);
    d760:	21e0      	movs	r1, #224	; 0xe0
	data[11] = 0x12;		/* V59 */
    d762:	f8ad 300c 	strh.w	r3, [sp, #12]
	st7789v_transmit(p_st7789v, cmd, data, 14);
    d766:	230e      	movs	r3, #14
    d768:	f004 f91d 	bl	119a6 <st7789v_transmit>

	cmd = ST7789V_CMD_NVGAMCTRL;
	data[0] = (0xd << 4) | 0x00;	/* V63 | V0 */
	data[1] = 0x00;			/* v1 */
	data[2] = 0x02;			/* v2 */
	data[3] = 0x07;			/* v4 */
    d76c:	4b1b      	ldr	r3, [pc, #108]	; (d7dc <st7789v_lcd_init+0x194>)
	data[9] = (0x01 << 4) | 0x0c;	/* J1 | V50 */
	data[10] = 0x18;		/* V57 */
	data[11] = 0x16;		/* V59 */
	data[12] = 0x1c;		/* V61 */
	data[13] = 0x1d;		/* V62 */
	st7789v_transmit(p_st7789v, cmd, data, 14);
    d76e:	466a      	mov	r2, sp
	data[3] = 0x07;			/* v4 */
    d770:	9301      	str	r3, [sp, #4]
	data[7] = (0x4 << 4) | 0x4;	/* V36 | V27 */
    d772:	f103 4351 	add.w	r3, r3, #3506438144	; 0xd1000000
    d776:	f503 036b 	add.w	r3, r3, #15400960	; 0xeb0000
    d77a:	f203 733f 	addw	r3, r3, #1855	; 0x73f
    d77e:	9302      	str	r3, [sp, #8]
	data[11] = 0x16;		/* V59 */
    d780:	f641 531c 	movw	r3, #7452	; 0x1d1c
	st7789v_transmit(p_st7789v, cmd, data, 14);
    d784:	4620      	mov	r0, r4
	data[11] = 0x16;		/* V59 */
    d786:	f8ad 300c 	strh.w	r3, [sp, #12]
	st7789v_transmit(p_st7789v, cmd, data, 14);
    d78a:	21e1      	movs	r1, #225	; 0xe1
    d78c:	230e      	movs	r3, #14
	data[0] = (0xd << 4) | 0x00;	/* V63 | V0 */
    d78e:	9500      	str	r5, [sp, #0]
	st7789v_transmit(p_st7789v, cmd, data, 14);
    d790:	f004 f909 	bl	119a6 <st7789v_transmit>

	cmd = ST7789V_CMD_RAMCTRL;
	data[0] = 0x00;
    d794:	f44f 4370 	mov.w	r3, #61440	; 0xf000
	data[1] = (0x3 << 6) | (0x3u << 4);
#if CONFIG_ST7789V_SWAP_PIXEL_LCD_ENDIANNESS
	data[1] |= 0x08;
#endif
	st7789v_transmit(p_st7789v, cmd, data, 2);
    d798:	466a      	mov	r2, sp
	data[0] = 0x00;
    d79a:	f8ad 3000 	strh.w	r3, [sp]
	st7789v_transmit(p_st7789v, cmd, data, 2);
    d79e:	4620      	mov	r0, r4
    d7a0:	2302      	movs	r3, #2
    d7a2:	21b0      	movs	r1, #176	; 0xb0
    d7a4:	f004 f8ff 	bl	119a6 <st7789v_transmit>

	cmd = ST7789V_CMD_RGBCTRL;
	data[0] = 0x80 | (0x2 << 5) | 0xd;
    d7a8:	f640 03cd 	movw	r3, #2253	; 0x8cd
    d7ac:	f8ad 3000 	strh.w	r3, [sp]
	data[1] = 0x08;
    d7b0:	2314      	movs	r3, #20
	data[2] = 0x14;
	st7789v_transmit(p_st7789v, cmd, data, 3);
    d7b2:	466a      	mov	r2, sp
	data[1] = 0x08;
    d7b4:	f88d 3002 	strb.w	r3, [sp, #2]
	st7789v_transmit(p_st7789v, cmd, data, 3);
    d7b8:	21b1      	movs	r1, #177	; 0xb1
    d7ba:	2303      	movs	r3, #3
    d7bc:	4620      	mov	r0, r4
    d7be:	f004 f8f2 	bl	119a6 <st7789v_transmit>
}
    d7c2:	b004      	add	sp, #16
    d7c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    d7c8:	33000c0c 	.word	0x33000c0c
    d7cc:	0102695a 	.word	0x0102695a
    d7d0:	070200d0 	.word	0x070200d0
    d7d4:	54311a0b 	.word	0x54311a0b
    d7d8:	12122940 	.word	0x12122940
    d7dc:	442d1505 	.word	0x442d1505

0000d7e0 <rtc1_nrf_isr>:
 * symbol.
 */
void rtc1_nrf_isr(void *arg)
{
	ARG_UNUSED(arg);
	RTC->EVENTS_COMPARE[0] = 0;
    d7e0:	2200      	movs	r2, #0
    d7e2:	4b0d      	ldr	r3, [pc, #52]	; (d818 <rtc1_nrf_isr+0x38>)
    d7e4:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
	__asm__ volatile(
    d7e8:	f04f 0220 	mov.w	r2, #32
    d7ec:	f3ef 8111 	mrs	r1, BASEPRI
    d7f0:	f382 8811 	msr	BASEPRI, r2
    d7f4:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&lock);
	u32_t t = counter();
	u32_t dticks = counter_sub(t, last_count) / CYC_PER_TICK;
    d7f8:	4a08      	ldr	r2, [pc, #32]	; (d81c <rtc1_nrf_isr+0x3c>)
#endif
}

__STATIC_INLINE uint32_t nrf_rtc_counter_get(NRF_RTC_Type * p_reg)
{
     return p_reg->COUNTER;
    d7fa:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
    d7fe:	6813      	ldr	r3, [r2, #0]
	return (a - b) & COUNTER_MAX;
    d800:	1ac0      	subs	r0, r0, r3
    d802:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000

	last_count += dticks * CYC_PER_TICK;
    d806:	4403      	add	r3, r0
    d808:	6013      	str	r3, [r2, #0]
	__asm__ volatile(
    d80a:	f381 8811 	msr	BASEPRI, r1
    d80e:	f3bf 8f6f 	isb	sy
		}
		set_comparator(next);
	}

	k_spin_unlock(&lock, key);
	z_clock_announce(IS_ENABLED(CONFIG_TICKLESS_KERNEL) ? dticks : 1);
    d812:	f003 b93f 	b.w	10a94 <z_clock_announce>
    d816:	bf00      	nop
    d818:	40015000 	.word	0x40015000
    d81c:	20020154 	.word	0x20020154

0000d820 <z_clock_driver_init>:
}

int z_clock_driver_init(struct device *device)
{
    d820:	b570      	push	{r4, r5, r6, lr}
    d822:	4818      	ldr	r0, [pc, #96]	; (d884 <z_clock_driver_init+0x64>)
    d824:	f002 fabc 	bl	fda0 <z_impl_device_get_binding>
	struct device *clock;

	ARG_UNUSED(device);

	clock = device_get_binding(DT_INST_0_NORDIC_NRF_CLOCK_LABEL "_32K");
	if (!clock) {
    d828:	b348      	cbz	r0, d87e <z_clock_driver_init+0x5e>
				   clock_control_subsys_t sys)
{
	const struct clock_control_driver_api *api =
		(const struct clock_control_driver_api *)dev->driver_api;

	return api->on(dev, sys);
    d82a:	6843      	ldr	r3, [r0, #4]
    d82c:	2100      	movs	r1, #0
    d82e:	681b      	ldr	r3, [r3, #0]
    d830:	4798      	blx	r3
    p_reg->CC[ch] = cc_val;
    d832:	2601      	movs	r6, #1
}

__STATIC_INLINE void nrf_rtc_prescaler_set(NRF_RTC_Type * p_reg, uint32_t val)
{
    NRFX_ASSERT(val <= (RTC_PRESCALER_PRESCALER_Msk >> RTC_PRESCALER_PRESCALER_Pos));
    p_reg->PRESCALER = val;
    d834:	2400      	movs	r4, #0
    p_reg->INTENSET = mask;
    d836:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    d83a:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
    p_reg->PRESCALER = val;
    d83e:	4d12      	ldr	r5, [pc, #72]	; (d888 <z_clock_driver_init+0x68>)

	/* Clear the event flag and possible pending interrupt */
	nrf_rtc_event_clear(RTC, NRF_RTC_EVENT_COMPARE_0);
	NVIC_ClearPendingIRQ(RTC1_IRQn);

	IRQ_CONNECT(RTC1_IRQn, 1, rtc1_nrf_isr, 0, 0);
    d840:	4631      	mov	r1, r6
    d842:	f8c5 4508 	str.w	r4, [r5, #1288]	; 0x508
    p_reg->CC[ch] = cc_val;
    d846:	f8c5 6540 	str.w	r6, [r5, #1344]	; 0x540
    p_reg->INTENSET = mask;
    d84a:	f8c5 3304 	str.w	r3, [r5, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    d84e:	4b0f      	ldr	r3, [pc, #60]	; (d88c <z_clock_driver_init+0x6c>)
    d850:	2015      	movs	r0, #21
    d852:	601c      	str	r4, [r3, #0]
    d854:	4b0e      	ldr	r3, [pc, #56]	; (d890 <z_clock_driver_init+0x70>)
    d856:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    d85a:	4622      	mov	r2, r4
    d85c:	f000 f952 	bl	db04 <z_arm_irq_priority_set>
	irq_enable(RTC1_IRQn);
    d860:	2015      	movs	r0, #21
    d862:	f000 f93f 	bl	dae4 <z_arch_irq_enable>

	if (!IS_ENABLED(TICKLESS_KERNEL)) {
		set_comparator(counter() + CYC_PER_TICK);
	}

	return 0;
    d866:	4620      	mov	r0, r4
    return (uint32_t)p_reg + task;
}

__STATIC_INLINE void nrf_rtc_task_trigger(NRF_RTC_Type * p_reg, nrf_rtc_task_t task)
{
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
    d868:	4b0a      	ldr	r3, [pc, #40]	; (d894 <z_clock_driver_init+0x74>)
    d86a:	601e      	str	r6, [r3, #0]
    d86c:	602e      	str	r6, [r5, #0]
     return p_reg->COUNTER;
    d86e:	f8d5 3504 	ldr.w	r3, [r5, #1284]	; 0x504
		set_comparator(counter() + CYC_PER_TICK);
    d872:	4433      	add	r3, r6
	nrf_rtc_cc_set(RTC, 0, cyc & COUNTER_MAX);
    d874:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    p_reg->CC[ch] = cc_val;
    d878:	f8c5 3540 	str.w	r3, [r5, #1344]	; 0x540
}
    d87c:	bd70      	pop	{r4, r5, r6, pc}
		return -1;
    d87e:	f04f 30ff 	mov.w	r0, #4294967295
    d882:	e7fb      	b.n	d87c <z_clock_driver_init+0x5c>
    d884:	000128a5 	.word	0x000128a5
    d888:	40015000 	.word	0x40015000
    d88c:	40015140 	.word	0x40015140
    d890:	e000e100 	.word	0xe000e100
    d894:	40015008 	.word	0x40015008

0000d898 <z_clock_set_timeout>:

void z_clock_set_timeout(s32_t ticks, bool idle)
{
    d898:	b570      	push	{r4, r5, r6, lr}
	ARG_UNUSED(idle);

#ifdef CONFIG_TICKLESS_KERNEL
	ticks = (ticks == K_FOREVER) ? MAX_TICKS : ticks;
    d89a:	4e21      	ldr	r6, [pc, #132]	; (d920 <z_clock_set_timeout+0x88>)
    d89c:	f1b0 3fff 	cmp.w	r0, #4294967295
    d8a0:	bf08      	it	eq
    d8a2:	4630      	moveq	r0, r6
	__asm__ volatile(
    d8a4:	f04f 0320 	mov.w	r3, #32
    d8a8:	f3ef 8411 	mrs	r4, BASEPRI
    d8ac:	f383 8811 	msr	BASEPRI, r3
    d8b0:	f3bf 8f6f 	isb	sy
     return p_reg->COUNTER;
    d8b4:	491b      	ldr	r1, [pc, #108]	; (d924 <z_clock_set_timeout+0x8c>)
	k_spinlock_key_t key = k_spin_lock(&lock);
	u32_t cyc, dt, t = counter();
	bool zli_fixup = IS_ENABLED(CONFIG_ZERO_LATENCY_IRQS);

	/* Round up to next tick boundary */
	cyc = ticks * CYC_PER_TICK + 1 + counter_sub(t, last_count);
    d8b6:	4b1c      	ldr	r3, [pc, #112]	; (d928 <z_clock_set_timeout+0x90>)
    d8b8:	f8d1 2504 	ldr.w	r2, [r1, #1284]	; 0x504
    d8bc:	681d      	ldr	r5, [r3, #0]
	ticks = MAX(MIN(ticks - 1, (s32_t)MAX_TICKS), 0);
    d8be:	3801      	subs	r0, #1
	return (a - b) & COUNTER_MAX;
    d8c0:	1b53      	subs	r3, r2, r5
    d8c2:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
	cyc += (CYC_PER_TICK - 1);
	cyc = (cyc / CYC_PER_TICK) * CYC_PER_TICK;
	cyc += last_count;
    d8c6:	3501      	adds	r5, #1
    d8c8:	442b      	add	r3, r5
	cyc = ticks * CYC_PER_TICK + 1 + counter_sub(t, last_count);
    d8ca:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
	cyc += last_count;
    d8ce:	42b0      	cmp	r0, r6
    d8d0:	bfd4      	ite	le
    d8d2:	1818      	addle	r0, r3, r0
    d8d4:	1998      	addgt	r0, r3, r6
	return (a - b) & COUNTER_MAX;
    d8d6:	1a82      	subs	r2, r0, r2
    d8d8:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
    d8dc:	f020 437f 	bic.w	r3, r0, #4278190080	; 0xff000000
	 * least on nRF52.  Some experimentation on nrf52840 shows
	 * that you need to be early by about 400 processor cycles
	 * (about 1/5th of a RTC cycle) in order to reliably get the
	 * interrupt.  The docs say two cycles, they mean two cycles.
	 */
	if (counter_sub(cyc, t) > 2) {
    d8e0:	2a02      	cmp	r2, #2
    p_reg->CC[ch] = cc_val;
    d8e2:	f8c1 3540 	str.w	r3, [r1, #1344]	; 0x540
    d8e6:	d904      	bls.n	d8f2 <z_clock_set_timeout+0x5a>
	__asm__ volatile(
    d8e8:	f384 8811 	msr	BASEPRI, r4
    d8ec:	f3bf 8f6f 	isb	sy
	}
#endif

	k_spin_unlock(&lock, key);
#endif /* CONFIG_TICKLESS_KERNEL */
}
    d8f0:	bd70      	pop	{r4, r5, r6, pc}
     return p_reg->COUNTER;
    d8f2:	f8d1 3504 	ldr.w	r3, [r1, #1284]	; 0x504
		if (dt == 0 || dt > 0x7fffff) {
    d8f6:	4a0d      	ldr	r2, [pc, #52]	; (d92c <z_clock_set_timeout+0x94>)
	return (a - b) & COUNTER_MAX;
    d8f8:	1ac3      	subs	r3, r0, r3
    d8fa:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
		if (dt == 0 || dt > 0x7fffff) {
    d8fe:	1e5d      	subs	r5, r3, #1
    d900:	4295      	cmp	r5, r2
    d902:	d905      	bls.n	d910 <z_clock_set_timeout+0x78>
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    d904:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
    d908:	4b09      	ldr	r3, [pc, #36]	; (d930 <z_clock_set_timeout+0x98>)
    d90a:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
    d90e:	e7eb      	b.n	d8e8 <z_clock_set_timeout+0x50>
		} else if (dt == 1) {
    d910:	2b01      	cmp	r3, #1
			set_comparator(cyc + 2);
    d912:	bf02      	ittt	eq
    d914:	3002      	addeq	r0, #2
	nrf_rtc_cc_set(RTC, 0, cyc & COUNTER_MAX);
    d916:	f020 407f 	biceq.w	r0, r0, #4278190080	; 0xff000000
    p_reg->CC[ch] = cc_val;
    d91a:	f8c1 0540 	streq.w	r0, [r1, #1344]	; 0x540
    d91e:	e7e3      	b.n	d8e8 <z_clock_set_timeout+0x50>
    d920:	00fffffe 	.word	0x00fffffe
    d924:	40015000 	.word	0x40015000
    d928:	20020154 	.word	0x20020154
    d92c:	007ffffe 	.word	0x007ffffe
    d930:	e000e100 	.word	0xe000e100

0000d934 <z_clock_elapsed>:
	__asm__ volatile(
    d934:	f04f 0220 	mov.w	r2, #32
    d938:	f3ef 8311 	mrs	r3, BASEPRI
    d93c:	f382 8811 	msr	BASEPRI, r2
    d940:	f3bf 8f6f 	isb	sy
     return p_reg->COUNTER;
    d944:	4a06      	ldr	r2, [pc, #24]	; (d960 <z_clock_elapsed+0x2c>)
    d946:	f8d2 0504 	ldr.w	r0, [r2, #1284]	; 0x504
	if (!IS_ENABLED(CONFIG_TICKLESS_KERNEL)) {
		return 0;
	}

	k_spinlock_key_t key = k_spin_lock(&lock);
	u32_t ret = counter_sub(counter(), last_count) / CYC_PER_TICK;
    d94a:	4a06      	ldr	r2, [pc, #24]	; (d964 <z_clock_elapsed+0x30>)
	return (a - b) & COUNTER_MAX;
    d94c:	6812      	ldr	r2, [r2, #0]
    d94e:	1a80      	subs	r0, r0, r2
    d950:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
	__asm__ volatile(
    d954:	f383 8811 	msr	BASEPRI, r3
    d958:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&lock, key);
	return ret;
}
    d95c:	4770      	bx	lr
    d95e:	bf00      	nop
    d960:	40015000 	.word	0x40015000
    d964:	20020154 	.word	0x20020154

0000d968 <z_timer_cycle_get_32>:
	__asm__ volatile(
    d968:	f04f 0320 	mov.w	r3, #32
    d96c:	f3ef 8211 	mrs	r2, BASEPRI
    d970:	f383 8811 	msr	BASEPRI, r3
    d974:	f3bf 8f6f 	isb	sy

u32_t z_timer_cycle_get_32(void)
{
	k_spinlock_key_t key = k_spin_lock(&lock);
	u32_t ret = counter_sub(counter(), last_count) + last_count;
    d978:	4906      	ldr	r1, [pc, #24]	; (d994 <z_timer_cycle_get_32+0x2c>)
    d97a:	4b07      	ldr	r3, [pc, #28]	; (d998 <z_timer_cycle_get_32+0x30>)
    d97c:	6808      	ldr	r0, [r1, #0]
    d97e:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
	__asm__ volatile(
    d982:	f382 8811 	msr	BASEPRI, r2
    d986:	f3bf 8f6f 	isb	sy
	return (a - b) & COUNTER_MAX;
    d98a:	1a1b      	subs	r3, r3, r0
    d98c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000

	k_spin_unlock(&lock, key);
	return ret;
}
    d990:	4418      	add	r0, r3
    d992:	4770      	bx	lr
    d994:	20020154 	.word	0x20020154
    d998:	40015000 	.word	0x40015000

0000d99c <z_arm_exc_exit>:
    /* r0 contains the caller mode */
    push {r0, lr}
#endif

#ifdef CONFIG_PREEMPT_ENABLED
    ldr r0, =_kernel
    d99c:	4804      	ldr	r0, [pc, #16]	; (d9b0 <_EXIT_EXC+0x2>)

    ldr r1, [r0, #_kernel_offset_to_current]
    d99e:	6881      	ldr	r1, [r0, #8]

    ldr r0, [r0, #_kernel_offset_to_ready_q_cache]
    d9a0:	6a40      	ldr	r0, [r0, #36]	; 0x24
    cmp r0, r1
    d9a2:	4288      	cmp	r0, r1
    beq _EXIT_EXC
    d9a4:	d003      	beq.n	d9ae <_EXIT_EXC>

#if defined(CONFIG_CPU_CORTEX_M)
    /* context switch required, pend the PendSV exception */
    ldr r1, =_SCS_ICSR
    d9a6:	4903      	ldr	r1, [pc, #12]	; (d9b4 <_EXIT_EXC+0x6>)
    ldr r2, =_SCS_ICSR_PENDSV
    d9a8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    str r2, [r1]
    d9ac:	600a      	str	r2, [r1, #0]

0000d9ae <_EXIT_EXC>:
    bl z_check_stack_sentinel
#endif /* CONFIG_CPU_CORTEX_M */
#endif /* CONFIG_STACK_SENTINEL */

#if defined(CONFIG_CPU_CORTEX_M)
    bx lr
    d9ae:	4770      	bx	lr
    ldr r0, =_kernel
    d9b0:	200242ec 	.word	0x200242ec
    ldr r1, =_SCS_ICSR
    d9b4:	e000ed04 	.word	0xe000ed04

0000d9b8 <z_arm_pendsv>:
    pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_TRACING */

    /* load _kernel into r1 and current k_thread into r2 */
    ldr r1, =_kernel
    d9b8:	4912      	ldr	r1, [pc, #72]	; (da04 <z_arm_pendsv+0x4c>)
    ldr r2, [r1, #_kernel_offset_to_current]
    d9ba:	688a      	ldr	r2, [r1, #8]

    /* addr of callee-saved regs in thread in r0 */
    ldr r0, =_thread_offset_to_callee_saved
    d9bc:	f04f 0028 	mov.w	r0, #40	; 0x28
    add r0, r2
    d9c0:	4410      	add	r0, r2

    /* save callee-saved + psp in thread */
#if defined(CONFIG_CPU_CORTEX_M)
    mrs ip, PSP
    d9c2:	f3ef 8c09 	mrs	ip, PSP
    mov r6, r11
    mov r7, ip
    /* store r8-12 */
    stmea r0!, {r3-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    stmia r0, {v1-v8, ip}
    d9c6:	e880 1ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}

    /* Protect the kernel state while we play with the thread lists */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    d9ca:	2020      	movs	r0, #32
    msr BASEPRI, r0
    d9cc:	f380 8811 	msr	BASEPRI, r0
    isb /* Make the effect of disabling interrupts be realized immediately */
    d9d0:	f3bf 8f6f 	isb	sy
     * the new thread is context-switched in since all decisions
     * to pend PendSV have been taken with the current kernel
     * state and this is what we're handling currently.
     */
#if defined(CONFIG_CPU_CORTEX_M)
    ldr v4, =_SCS_ICSR
    d9d4:	4f0c      	ldr	r7, [pc, #48]	; (da08 <z_arm_pendsv+0x50>)
    ldr v3, =_SCS_ICSR_UNPENDSV
    d9d6:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000
#endif

    /* _kernel is still in r1 */

    /* fetch the thread to run from the ready queue cache */
    ldr r2, [r1, #_kernel_offset_to_ready_q_cache]
    d9da:	6a4a      	ldr	r2, [r1, #36]	; 0x24

    str r2, [r1, #_kernel_offset_to_current]
    d9dc:	608a      	str	r2, [r1, #8]
     * has been handled.
     */

    /* _SCS_ICSR is still in v4 and _SCS_ICSR_UNPENDSV in v3 */
#if defined(CONFIG_CPU_CORTEX_M)
    str v3, [v4, #0]
    d9de:	603e      	str	r6, [r7, #0]

    ldr r0, [r4]
    movs.n r3, #0
    str r3, [r4]
#else
    ldr r0, [r2, #_thread_offset_to_basepri]
    d9e0:	6e50      	ldr	r0, [r2, #100]	; 0x64
    movs r3, #0
    d9e2:	2300      	movs	r3, #0
    str r3, [r2, #_thread_offset_to_basepri]
    d9e4:	6653      	str	r3, [r2, #100]	; 0x64
    /* restore r4-r7, go back 9*4 bytes to the start of the stored block */
    subs r0, #36
    ldmia r0!, {r4-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    /* restore BASEPRI for the incoming thread */
    msr BASEPRI, r0
    d9e6:	f380 8811 	msr	BASEPRI, r0
    isb
#endif

#if defined (CONFIG_ARM_MPU)
    /* Re-program dynamic memory map */
    push {r2,lr}
    d9ea:	b504      	push	{r2, lr}
    mov r0, r2 /* _current thread */
    d9ec:	4610      	mov	r0, r2
    bl z_arm_configure_dynamic_mpu_regions
    d9ee:	f004 f828 	bl	11a42 <z_arm_configure_dynamic_mpu_regions>
    pop {r2,lr}
    d9f2:	e8bd 4004 	ldmia.w	sp!, {r2, lr}
    isb

#endif

    /* load callee-saved + psp from thread */
    add r0, r2, #_thread_offset_to_callee_saved
    d9f6:	f102 0028 	add.w	r0, r2, #40	; 0x28
    ldmia r0, {v1-v8, ip}
    d9fa:	e890 1ff0 	ldmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
    mov r0, #0
    msr PSPLIM, r0
#endif /* CONFIG_BUILTIN_STACK_GUARD */

#if defined(CONFIG_CPU_CORTEX_M)
    msr PSP, ip
    d9fe:	f38c 8809 	msr	PSP, ip

    /*
     * Cortex-M: return from PendSV exception
     * Cortex-R: return to the caller (_IntExit or z_arm_svc)
     */
    bx lr
    da02:	4770      	bx	lr
    ldr r1, =_kernel
    da04:	200242ec 	.word	0x200242ec
    ldr v4, =_SCS_ICSR
    da08:	e000ed04 	.word	0xe000ed04

0000da0c <z_arm_svc>:
 */
SECTION_FUNC(TEXT, z_arm_svc)
  /* Use EXC_RETURN state to find out if stack frame is on the
   * MSP or PSP
   */
    tst lr, #0x4    /* did we come from thread mode ? */
    da0c:	f01e 0f04 	tst.w	lr, #4
    ite eq  /* if zero (equal), came from handler mode */
    da10:	bf0c      	ite	eq
        mrseq r0, MSP   /* handler mode, stack frame is on MSP */
    da12:	f3ef 8008 	mrseq	r0, MSP
        mrsne r0, PSP   /* thread mode, stack frame is on PSP */
    da16:	f3ef 8009 	mrsne	r0, PSP


    /* Figure out what SVC call number was invoked */

    ldr r1, [r0, #24]   /* grab address of PC from stack frame */
    da1a:	6981      	ldr	r1, [r0, #24]
    /* SVC is a two-byte instruction, point to it and read the
     * SVC number (lower byte of SCV instruction)
     */
    ldrb r1, [r1, #-2]
    da1c:	f811 1c02 	ldrb.w	r1, [r1, #-2]
    tst r2, #0x1
    bne _oops

#endif /* CONFIG_USERSPACE */

    cmp r1, #2
    da20:	2902      	cmp	r1, #2
    beq _oops
    da22:	d0ff      	beq.n	da24 <_oops>

0000da24 <_oops>:
    /* exception return is done in z_arm_int_exit() */
    b z_arm_int_exit
#endif

_oops:
    push {r0, lr}
    da24:	b501      	push	{r0, lr}
    bl z_do_kernel_oops
    da26:	f004 f801 	bl	11a2c <z_do_kernel_oops>
    pop {r0, pc}
    da2a:	bd01      	pop	{r0, pc}

0000da2c <z_arm_cpu_idle_init>:
 * void z_arm_cpu_idle_init(void);
 */

SECTION_FUNC(TEXT, z_arm_cpu_idle_init)
#if defined(CONFIG_CPU_CORTEX_M)
	ldr r1, =_SCB_SCR
    da2c:	4901      	ldr	r1, [pc, #4]	; (da34 <z_arm_cpu_idle_init+0x8>)
	movs.n r2, #_SCR_INIT_BITS
    da2e:	2210      	movs	r2, #16
	str r2, [r1]
    da30:	600a      	str	r2, [r1, #0]
#endif
	bx lr
    da32:	4770      	bx	lr
	ldr r1, =_SCB_SCR
    da34:	e000ed10 	.word	0xe000ed10

0000da38 <z_arch_cpu_idle>:
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE) \
	|| defined(CONFIG_ARMV7_R)
	cpsie i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* clear BASEPRI so wfi is awakened by incoming interrupts */
	eors.n r0, r0
    da38:	4040      	eors	r0, r0
	msr BASEPRI, r0
    da3a:	f380 8811 	msr	BASEPRI, r0
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	wfi
    da3e:	bf30      	wfi

	bx lr
    da40:	4770      	bx	lr
    da42:	bf00      	nop

0000da44 <z_arm_bus_fault>:
	mrs r0, MSP
_stack_frame_endif:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* force unlock interrupts */
	eors.n r0, r0
    da44:	4040      	eors	r0, r0
	msr BASEPRI, r0
    da46:	f380 8811 	msr	BASEPRI, r0
	/* RETTOBASE flag is not banked between security states.
	 * Therefore, we cannot rely on this flag, to obtain the SP
	 * of the current security state.
	 * Instead, we use the EXC_RETURN.SPSEL flag.
	 */
 	ldr r0, =0x4
    da4a:	f04f 0004 	mov.w	r0, #4
	mov r1, lr
    da4e:	4671      	mov	r1, lr
	tst r1, r0
    da50:	4201      	tst	r1, r0
	beq _s_stack_frame_msp
    da52:	d002      	beq.n	da5a <_s_stack_frame_msp>
	mrs r0, PSP
    da54:	f3ef 8009 	mrs	r0, PSP
	bne _s_stack_frame_endif
    da58:	d101      	bne.n	da5e <_s_stack_frame_endif>

0000da5a <_s_stack_frame_msp>:
_s_stack_frame_msp:
	mrs r0, MSP
    da5a:	f3ef 8008 	mrs	r0, MSP

0000da5e <_s_stack_frame_endif>:
	 *
	 * To determine this we need to inspect the EXC_RETURN value
	 * located in the LR. Therefore, we supply the LR value as an
	 * argument to the fault handler.
	 */
	mov r1, lr
    da5e:	4671      	mov	r1, lr
#endif /* CONFIG_ARM_SECURE_FIRMWARE || CONFIG_ARM_NONSECURE_FIRMWARE */
	push {r0, lr}
    da60:	b501      	push	{r0, lr}
	bl z_arm_fault
    da62:	f000 fb0d 	bl	e080 <z_arm_fault>

#if defined(CONFIG_CPU_CORTEX_M)
	pop {r0, pc}
    da66:	bd01      	pop	{r0, pc}

0000da68 <z_SysNmiOnReset>:
_ASM_FILE_PROLOGUE

GTEXT(z_SysNmiOnReset)

SECTION_FUNC(TEXT, z_SysNmiOnReset)
    wfi
    da68:	bf30      	wfi
    b z_SysNmiOnReset
    da6a:	f7ff bffd 	b.w	da68 <z_SysNmiOnReset>
    da6e:	bf00      	nop

0000da70 <_isr_wrapper>:
 * @return N/A
 */
SECTION_FUNC(TEXT, _isr_wrapper)

#if defined(CONFIG_CPU_CORTEX_M)
	push {r0,lr}		/* r0, lr are now the first items on the stack */
    da70:	b501      	push	{r0, lr}
	 * device for the next timer deadline is not interrupted.  For
	 * non-tickless idle, this ensures that the clearing of the kernel idle
	 * state is not interrupted.  In each case, z_sys_power_save_idle_exit
	 * is called with interrupts disabled.
	 */
	cpsid i  /* PRIMASK = 1 */
    da72:	b672      	cpsid	i

	/* is this a wakeup from idle ? */
	ldr r2, =_kernel
    da74:	4a0b      	ldr	r2, [pc, #44]	; (daa4 <_isr_wrapper+0x34>)
	/* requested idle duration, in ticks */
	ldr r0, [r2, #_kernel_offset_to_idle]
    da76:	6a10      	ldr	r0, [r2, #32]
	cmp r0, #0
    da78:	2800      	cmp	r0, #0
	str r1, [r2, #_kernel_offset_to_idle]
	bl z_sys_power_save_idle_exit
_idle_state_cleared:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	ittt ne
    da7a:	bf1e      	ittt	ne
	movne	r1, #0
    da7c:	2100      	movne	r1, #0
		/* clear kernel idle state */
		strne	r1, [r2, #_kernel_offset_to_idle]
    da7e:	6211      	strne	r1, [r2, #32]
		blne	z_sys_power_save_idle_exit
    da80:	f004 fa4c 	blne	11f1c <z_sys_power_save_idle_exit>
_idle_state_cleared:
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	cpsie i		/* re-enable interrupts (PRIMASK = 0) */
    da84:	b662      	cpsie	i
#endif

#if defined(CONFIG_CPU_CORTEX_M)
	mrs r0, IPSR	/* get exception number */
    da86:	f3ef 8005 	mrs	r0, IPSR
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r1, =16
	subs r0, r1	/* get IRQ number */
	lsls r0, #3	/* table is 8-byte wide */
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	sub r0, r0, #16	/* get IRQ number */
    da8a:	f1a0 0010 	sub.w	r0, r0, #16
	lsl r0, r0, #3	/* table is 8-byte wide */
    da8e:	ea4f 00c0 	mov.w	r0, r0, lsl #3
	 */
	mov r0, #0
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
	ldr r1, =_sw_isr_table
    da92:	4905      	ldr	r1, [pc, #20]	; (daa8 <_isr_wrapper+0x38>)
	add r1, r1, r0	/* table entry: ISRs must have their MSB set to stay
    da94:	4401      	add	r1, r0
			 * in thumb mode */

	ldm r1!,{r0,r3}	/* arg in r0, ISR in r3 */
    da96:	c909      	ldmia	r1!, {r0, r3}
#else
	pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
	ldm sp!,{r0-r3} /* Restore r0 to r3 regs */
#endif /* CONFIG_EXECUTION_BENCHMARKING */
	blx r3		/* call ISR */
    da98:	4798      	blx	r3

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	pop {r0, r3}
	mov lr, r3
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	pop {r0, lr}
    da9a:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
#endif

	/* Use 'bx' instead of 'b' because 'bx' can jump further, and use
	 * 'bx' instead of 'blx' because exception return is done in
	 * z_arm_int_exit() */
	ldr r1, =z_arm_int_exit
    da9e:	4903      	ldr	r1, [pc, #12]	; (daac <_isr_wrapper+0x3c>)
	bx r1
    daa0:	4708      	bx	r1
    daa2:	0000      	.short	0x0000
	ldr r2, =_kernel
    daa4:	200242ec 	.word	0x200242ec
	ldr r1, =_sw_isr_table
    daa8:	000122ac 	.word	0x000122ac
	ldr r1, =z_arm_int_exit
    daac:	0000d99d 	.word	0x0000d99d

0000dab0 <z_arch_swap>:
#ifdef CONFIG_EXECUTION_BENCHMARKING
	read_timer_start_of_swap();
#endif

	/* store off key and return value */
	_current->arch.basepri = key;
    dab0:	4a09      	ldr	r2, [pc, #36]	; (dad8 <z_arch_swap+0x28>)
	_current->arch.swap_return_value = _k_neg_eagain;
    dab2:	490a      	ldr	r1, [pc, #40]	; (dadc <z_arch_swap+0x2c>)
	_current->arch.basepri = key;
    dab4:	6893      	ldr	r3, [r2, #8]
	_current->arch.swap_return_value = _k_neg_eagain;
    dab6:	6809      	ldr	r1, [r1, #0]
	_current->arch.basepri = key;
    dab8:	6658      	str	r0, [r3, #100]	; 0x64
	_current->arch.swap_return_value = _k_neg_eagain;
    daba:	6699      	str	r1, [r3, #104]	; 0x68

#if defined(CONFIG_CPU_CORTEX_M)
	/* set pending bit to make sure we will take a PendSV exception */
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    dabc:	4908      	ldr	r1, [pc, #32]	; (dae0 <z_arch_swap+0x30>)
    dabe:	684b      	ldr	r3, [r1, #4]
    dac0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
    dac4:	604b      	str	r3, [r1, #4]
    dac6:	2300      	movs	r3, #0
    dac8:	f383 8811 	msr	BASEPRI, r3
    dacc:	f3bf 8f6f 	isb	sy
#endif

	/* Context switch is performed here. Returning implies the
	 * thread has been context-switched-in again.
	 */
	return _current->arch.swap_return_value;
    dad0:	6893      	ldr	r3, [r2, #8]
}
    dad2:	6e98      	ldr	r0, [r3, #104]	; 0x68
    dad4:	4770      	bx	lr
    dad6:	bf00      	nop
    dad8:	200242ec 	.word	0x200242ec
    dadc:	000126fc 	.word	0x000126fc
    dae0:	e000ed00 	.word	0xe000ed00

0000dae4 <z_arch_irq_enable>:
#define REG_FROM_IRQ(irq) (irq / NUM_IRQS_PER_REG)
#define BIT_FROM_IRQ(irq) (irq % NUM_IRQS_PER_REG)

void z_arch_irq_enable(unsigned int irq)
{
	NVIC_EnableIRQ((IRQn_Type)irq);
    dae4:	b243      	sxtb	r3, r0
  if ((int32_t)(IRQn) >= 0)
    dae6:	2b00      	cmp	r3, #0
    dae8:	db08      	blt.n	dafc <z_arch_irq_enable+0x18>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    daea:	2201      	movs	r2, #1
    daec:	f000 001f 	and.w	r0, r0, #31
    daf0:	fa02 f000 	lsl.w	r0, r2, r0
    daf4:	4a02      	ldr	r2, [pc, #8]	; (db00 <z_arch_irq_enable+0x1c>)
    daf6:	095b      	lsrs	r3, r3, #5
    daf8:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
}
    dafc:	4770      	bx	lr
    dafe:	bf00      	nop
    db00:	e000e100 	.word	0xe000e100

0000db04 <z_arm_irq_priority_set>:
	 */
	__ASSERT(prio <= (BIT(DT_NUM_IRQ_PRIO_BITS) - 1),
		 "invalid priority %d! values must be less than %lu\n",
		 prio - _IRQ_PRIO_OFFSET,
		 BIT(DT_NUM_IRQ_PRIO_BITS) - (_IRQ_PRIO_OFFSET));
	NVIC_SetPriority((IRQn_Type)irq, prio);
    db04:	b243      	sxtb	r3, r0
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
    db06:	2b00      	cmp	r3, #0
	prio += _IRQ_PRIO_OFFSET;
    db08:	f101 0101 	add.w	r1, r1, #1
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    db0c:	bfa8      	it	ge
    db0e:	f103 4360 	addge.w	r3, r3, #3758096384	; 0xe0000000
    db12:	ea4f 1141 	mov.w	r1, r1, lsl #5
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    db16:	bfb8      	it	lt
    db18:	4b05      	ldrlt	r3, [pc, #20]	; (db30 <z_arm_irq_priority_set+0x2c>)
    db1a:	b2c9      	uxtb	r1, r1
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    db1c:	bfab      	itete	ge
    db1e:	f503 4361 	addge.w	r3, r3, #57600	; 0xe100
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    db22:	f000 000f 	andlt.w	r0, r0, #15
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    db26:	f883 1300 	strbge.w	r1, [r3, #768]	; 0x300
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    db2a:	5419      	strblt	r1, [r3, r0]
}
    db2c:	4770      	bx	lr
    db2e:	bf00      	nop
    db30:	e000ed14 	.word	0xe000ed14

0000db34 <z_arch_new_thread>:
 */
void z_arch_new_thread(struct k_thread *thread, k_thread_stack_t *stack,
		       size_t stackSize, k_thread_entry_t pEntry,
		       void *parameter1, void *parameter2, void *parameter3,
		       int priority, unsigned int options)
{
    db34:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
			- MPU_GUARD_ALIGN_AND_SIZE;
		stackSize -= MPU_GUARD_ALIGN_AND_SIZE_FLOAT
			- MPU_GUARD_ALIGN_AND_SIZE;
	}
#endif
	stackEnd = pStackMem + stackSize;
    db38:	188c      	adds	r4, r1, r2
{
    db3a:	4688      	mov	r8, r1
    db3c:	4617      	mov	r7, r2
    db3e:	461e      	mov	r6, r3
	 * if it isn't.
	 */
	*((u32_t *)pStack) = STACK_SENTINEL;
#endif /* CONFIG_STACK_SENTINEL */
	/* Initialize various struct k_thread members */
	z_init_thread_base(&thread->base, prio, _THREAD_PRESTART, options);
    db40:	2204      	movs	r2, #4
    db42:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    db44:	9909      	ldr	r1, [sp, #36]	; 0x24
    db46:	4605      	mov	r5, r0
    db48:	f004 fb1d 	bl	12186 <z_init_thread_base>

	/* static threads overwrite it afterwards with real value */
	thread->init_data = NULL;
    db4c:	2200      	movs	r2, #0
	pInitCtx->basic.pc = (u32_t)z_thread_entry;
#endif

#if defined(CONFIG_CPU_CORTEX_M)
	/* force ARM mode by clearing LSB of address */
	pInitCtx->basic.pc &= 0xfffffffe;
    db4e:	490d      	ldr	r1, [pc, #52]	; (db84 <z_arch_new_thread+0x50>)
	pInitCtx = (struct __esf *)(STACK_ROUND_DOWN(stackEnd -
    db50:	f1a4 0320 	sub.w	r3, r4, #32
    db54:	f023 0307 	bic.w	r3, r3, #7
	pInitCtx->basic.pc &= 0xfffffffe;
    db58:	f021 0101 	bic.w	r1, r1, #1
	thread->fn_abort = NULL;
    db5c:	e9c5 2213 	strd	r2, r2, [r5, #76]	; 0x4c
	thread->mem_domain_info.mem_domain = NULL;
#endif /* CONFIG_USERSPACE */

#if defined(CONFIG_THREAD_STACK_INFO)
	thread->stack_info.start = (uintptr_t)pStack;
	thread->stack_info.size = (u32_t)stackSize;
    db60:	e9c5 8716 	strd	r8, r7, [r5, #88]	; 0x58
    db64:	6199      	str	r1, [r3, #24]
#endif

	pInitCtx->basic.a1 = (u32_t)pEntry;
	pInitCtx->basic.a2 = (u32_t)parameter1;
    db66:	9906      	ldr	r1, [sp, #24]
	pInitCtx->basic.a1 = (u32_t)pEntry;
    db68:	601e      	str	r6, [r3, #0]
	pInitCtx->basic.a2 = (u32_t)parameter1;
    db6a:	6059      	str	r1, [r3, #4]
	pInitCtx->basic.a3 = (u32_t)parameter2;
    db6c:	9907      	ldr	r1, [sp, #28]
    db6e:	6099      	str	r1, [r3, #8]
	pInitCtx->basic.a4 = (u32_t)parameter3;
    db70:	9908      	ldr	r1, [sp, #32]
    db72:	60d9      	str	r1, [r3, #12]
	pInitCtx->basic.xpsr =
    db74:	f04f 7180 	mov.w	r1, #16777216	; 0x1000000
    db78:	61d9      	str	r1, [r3, #28]
		0x01000000UL; /* clear all, thumb bit is 1, even if RO */

	thread->callee_saved.psp = (u32_t)pInitCtx;
    db7a:	64ab      	str	r3, [r5, #72]	; 0x48
#if defined(CONFIG_CPU_CORTEX_R)
	pInitCtx->basic.lr = (u32_t)pInitCtx->basic.pc;
	thread->callee_saved.spsr = A_BIT | T_BIT | MODE_SYS;
	thread->callee_saved.lr = (u32_t)pInitCtx->basic.pc;
#endif
	thread->arch.basepri = 0;
    db7c:	666a      	str	r2, [r5, #100]	; 0x64

	/*
	 * initial values in all other registers/thread entries are
	 * irrelevant.
	 */
}
    db7e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    db82:	bf00      	nop
    db84:	00010e93 	.word	0x00010e93

0000db88 <z_arch_switch_to_main_thread>:

void z_arch_switch_to_main_thread(struct k_thread *main_thread,
				  k_thread_stack_t *main_stack,
				  size_t main_stack_size,
				  k_thread_entry_t _main)
{
    db88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    db8a:	4605      	mov	r5, r0
    db8c:	460c      	mov	r4, r1
    db8e:	4617      	mov	r7, r2
    db90:	461e      	mov	r6, r3
	 * to set up access permissions for fixed memory sections, such
	 * as Application Memory or No-Cacheable SRAM area.
	 *
	 * This function is invoked once, upon system initialization.
	 */
	z_arm_configure_static_mpu_regions();
    db92:	f000 fb81 	bl	e298 <z_arm_configure_static_mpu_regions>
	start_of_main_stack =
		Z_THREAD_STACK_BUFFER(main_stack) + main_stack_size;

	start_of_main_stack = (char *)STACK_ROUND_DOWN(start_of_main_stack);

	_current = main_thread;
    db96:	4b0b      	ldr	r3, [pc, #44]	; (dbc4 <z_arch_switch_to_main_thread+0x3c>)
	start_of_main_stack =
    db98:	443c      	add	r4, r7
#ifdef CONFIG_ARM_MPU
	/*
	 * If stack protection is enabled, make sure to set it
	 * before jumping to thread entry function
	 */
	z_arm_configure_dynamic_mpu_regions(main_thread);
    db9a:	4628      	mov	r0, r5
	_current = main_thread;
    db9c:	609d      	str	r5, [r3, #8]
	start_of_main_stack = (char *)STACK_ROUND_DOWN(start_of_main_stack);
    db9e:	f024 0407 	bic.w	r4, r4, #7
	z_arm_configure_dynamic_mpu_regions(main_thread);
    dba2:	f003 ff4e 	bl	11a42 <z_arm_configure_dynamic_mpu_regions>

	/*
	 * Set PSP to the highest address of the main stack
	 * before enabling interrupts and jumping to main.
	 */
	__asm__ volatile (
    dba6:	4630      	mov	r0, r6
    dba8:	f384 8809 	msr	PSP, r4
    dbac:	b663      	cpsie	if
    dbae:	f04f 0100 	mov.w	r1, #0
    dbb2:	f381 8811 	msr	BASEPRI, r1
    dbb6:	f3bf 8f6f 	isb	sy
    dbba:	2100      	movs	r1, #0
    dbbc:	2200      	movs	r2, #0
    dbbe:	2300      	movs	r3, #0
    dbc0:	f003 f967 	bl	10e92 <z_thread_entry>
    dbc4:	200242ec 	.word	0x200242ec

0000dbc8 <z_arm_fatal_error>:
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
		esf->basic.pc);
}

void z_arm_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
    dbc8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    dbca:	4607      	mov	r7, r0

	if (esf != NULL) {
    dbcc:	460c      	mov	r4, r1
    dbce:	2900      	cmp	r1, #0
    dbd0:	d03d      	beq.n	dc4e <z_arm_fatal_error+0x86>
	LOG_ERR("r0/a1:  0x%08x  r1/a2:  0x%08x  r2/a3:  0x%08x",
    dbd2:	2601      	movs	r6, #1
    dbd4:	f04f 0300 	mov.w	r3, #0
    dbd8:	4a20      	ldr	r2, [pc, #128]	; (dc5c <z_arm_fatal_error+0x94>)
    dbda:	4d21      	ldr	r5, [pc, #132]	; (dc60 <z_arm_fatal_error+0x98>)
    dbdc:	f366 0302 	bfi	r3, r6, #0, #3
    dbe0:	1aad      	subs	r5, r5, r2
    dbe2:	f3c5 05c9 	ubfx	r5, r5, #3, #10
    dbe6:	f36f 03c5 	bfc	r3, #3, #3
    dbea:	f365 138f 	bfi	r3, r5, #6, #10
    dbee:	f8ad 3000 	strh.w	r3, [sp]
    dbf2:	e9d1 2301 	ldrd	r2, r3, [r1, #4]
    dbf6:	481b      	ldr	r0, [pc, #108]	; (dc64 <z_arm_fatal_error+0x9c>)
    dbf8:	6809      	ldr	r1, [r1, #0]
    dbfa:	f003 fb46 	bl	1128a <log_3>
	LOG_ERR("r3/a4:  0x%08x r12/ip:  0x%08x r14/lr:  0x%08x",
    dbfe:	f04f 0300 	mov.w	r3, #0
    dc02:	f366 0302 	bfi	r3, r6, #0, #3
    dc06:	f36f 03c5 	bfc	r3, #3, #3
    dc0a:	f365 138f 	bfi	r3, r5, #6, #10
    dc0e:	f8ad 3000 	strh.w	r3, [sp]
    dc12:	e9d4 2304 	ldrd	r2, r3, [r4, #16]
    dc16:	68e1      	ldr	r1, [r4, #12]
    dc18:	4813      	ldr	r0, [pc, #76]	; (dc68 <z_arm_fatal_error+0xa0>)
    dc1a:	f003 fb36 	bl	1128a <log_3>
	LOG_ERR(" xpsr:  0x%08x", esf->basic.xpsr);
    dc1e:	f04f 0200 	mov.w	r2, #0
    dc22:	f366 0202 	bfi	r2, r6, #0, #3
    dc26:	f36f 02c5 	bfc	r2, #3, #3
    dc2a:	f365 128f 	bfi	r2, r5, #6, #10
    dc2e:	69e1      	ldr	r1, [r4, #28]
    dc30:	480e      	ldr	r0, [pc, #56]	; (dc6c <z_arm_fatal_error+0xa4>)
    dc32:	f003 fafe 	bl	11232 <log_1>
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
    dc36:	f04f 0200 	mov.w	r2, #0
    dc3a:	f366 0202 	bfi	r2, r6, #0, #3
    dc3e:	f36f 02c5 	bfc	r2, #3, #3
    dc42:	f365 128f 	bfi	r2, r5, #6, #10
    dc46:	69a1      	ldr	r1, [r4, #24]
    dc48:	4809      	ldr	r0, [pc, #36]	; (dc70 <z_arm_fatal_error+0xa8>)
    dc4a:	f003 faf2 	bl	11232 <log_1>
		esf_dump(esf);
	}
	z_fatal_error(reason, esf);
    dc4e:	4621      	mov	r1, r4
    dc50:	4638      	mov	r0, r7
}
    dc52:	b003      	add	sp, #12
    dc54:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	z_fatal_error(reason, esf);
    dc58:	f002 b8e6 	b.w	fe28 <z_fatal_error>
    dc5c:	00012550 	.word	0x00012550
    dc60:	00012578 	.word	0x00012578
    dc64:	00012a4b 	.word	0x00012a4b
    dc68:	00012a7a 	.word	0x00012a7a
    dc6c:	00012aa9 	.word	0x00012aa9
    dc70:	00012ab8 	.word	0x00012ab8

0000dc74 <z_arm_prep_c>:
 * This routine prepares for the execution of and runs C code.
 *
 * @return N/A
 */
void z_arm_prep_c(void)
{
    dc74:	b508      	push	{r3, lr}
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
    dc76:	4b08      	ldr	r3, [pc, #32]	; (dc98 <z_arm_prep_c+0x24>)
    dc78:	4a08      	ldr	r2, [pc, #32]	; (dc9c <z_arm_prep_c+0x28>)
    dc7a:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
    dc7e:	6093      	str	r3, [r2, #8]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
    dc80:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    dc84:	f3bf 8f6f 	isb	sy
	relocate_vector_table();
	enable_floating_point();
	z_bss_zero();
    dc88:	f002 f93c 	bl	ff04 <z_bss_zero>
	z_data_copy();
    dc8c:	f002 f944 	bl	ff18 <z_data_copy>
#if defined(CONFIG_ARMV7_R) && defined(CONFIG_INIT_STACKS)
	z_arm_init_stacks();
#endif
	z_arm_int_lib_init();
    dc90:	f000 fad0 	bl	e234 <z_arm_int_lib_init>
	z_cstart();
    dc94:	f002 f972 	bl	ff7c <z_cstart>
    dc98:	0000c000 	.word	0x0000c000
    dc9c:	e000ed00 	.word	0xe000ed00

0000dca0 <__start>:
 * search for a __start symbol instead, so create that alias here.
 */
SECTION_SUBSEC_FUNC(TEXT,_reset_section,__start)

#if defined(CONFIG_PLATFORM_SPECIFIC_INIT)
    bl z_platform_init
    dca0:	f003 fa95 	bl	111ce <z_platform_init>

    /* lock interrupts: will get unlocked when switch to main task */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    dca4:	2020      	movs	r0, #32
    msr BASEPRI, r0
    dca6:	f380 8811 	msr	BASEPRI, r0

    /*
     * Set PSP and use it to boot without using MSP, so that it
     * gets set to _interrupt_stack during initialization.
     */
    ldr r0, =_interrupt_stack
    dcaa:	4808      	ldr	r0, [pc, #32]	; (dccc <__start+0x2c>)
    ldr r1, =CONFIG_ISR_STACK_SIZE
    dcac:	f44f 6100 	mov.w	r1, #2048	; 0x800
    adds r0, r0, r1
    dcb0:	1840      	adds	r0, r0, r1
    msr PSP, r0
    dcb2:	f380 8809 	msr	PSP, r0
    mrs r0, CONTROL
    dcb6:	f3ef 8014 	mrs	r0, CONTROL
    movs r1, #2
    dcba:	2102      	movs	r1, #2
    orrs r0, r1 /* CONTROL_SPSEL_Msk */
    dcbc:	4308      	orrs	r0, r1
    msr CONTROL, r0
    dcbe:	f380 8814 	msr	CONTROL, r0
    /*
     * When changing the stack pointer, software must use an ISB instruction
     * immediately after the MSR instruction. This ensures that instructions
     * after the ISB instruction execute using the new stack pointer.
     */
    isb
    dcc2:	f3bf 8f6f 	isb	sy
    /*
     * 'bl' jumps the furthest of the branch instructions that are
     * supported on all platforms. So it is used when jumping to z_arm_prep_c
     * (even though we do not intend to return).
     */
    bl z_arm_prep_c
    dcc6:	f7ff ffd5 	bl	dc74 <z_arm_prep_c>
    dcca:	0000      	.short	0x0000
    ldr r0, =_interrupt_stack
    dccc:	20024b78 	.word	0x20024b78

0000dcd0 <usage_fault.isra.2>:
 *
 * See z_arm_fault_dump() for example.
 *
 * @return error code to identify the fatal error reason
 */
static u32_t usage_fault(const z_arch_esf_t *esf)
    dcd0:	b570      	push	{r4, r5, r6, lr}
{
	u32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** USAGE FAULT *****");
    dcd2:	f04f 0100 	mov.w	r1, #0
    dcd6:	2601      	movs	r6, #1
    dcd8:	4b40      	ldr	r3, [pc, #256]	; (dddc <usage_fault.isra.2+0x10c>)
    dcda:	4c41      	ldr	r4, [pc, #260]	; (dde0 <usage_fault.isra.2+0x110>)
    dcdc:	f366 0102 	bfi	r1, r6, #0, #3
    dce0:	1ae4      	subs	r4, r4, r3
    dce2:	f36f 01c5 	bfc	r1, #3, #3
    dce6:	f3c4 04c9 	ubfx	r4, r4, #3, #10

	/* bits are sticky: they stack and must be reset */
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
    dcea:	4d3e      	ldr	r5, [pc, #248]	; (dde4 <usage_fault.isra.2+0x114>)
	PR_FAULT_INFO("***** USAGE FAULT *****");
    dcec:	f364 118f 	bfi	r1, r4, #6, #10
    dcf0:	483d      	ldr	r0, [pc, #244]	; (dde8 <usage_fault.isra.2+0x118>)
    dcf2:	f003 fa91 	bl	11218 <log_0>
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
    dcf6:	6aaa      	ldr	r2, [r5, #40]	; 0x28
    dcf8:	0192      	lsls	r2, r2, #6
    dcfa:	d50a      	bpl.n	dd12 <usage_fault.isra.2+0x42>
		PR_FAULT_INFO("  Division by zero");
    dcfc:	f04f 0100 	mov.w	r1, #0
    dd00:	f366 0102 	bfi	r1, r6, #0, #3
    dd04:	f36f 01c5 	bfc	r1, #3, #3
    dd08:	f364 118f 	bfi	r1, r4, #6, #10
    dd0c:	4837      	ldr	r0, [pc, #220]	; (ddec <usage_fault.isra.2+0x11c>)
    dd0e:	f003 fa83 	bl	11218 <log_0>
	}
	if ((SCB->CFSR & SCB_CFSR_UNALIGNED_Msk) != 0) {
    dd12:	6aab      	ldr	r3, [r5, #40]	; 0x28
    dd14:	01db      	lsls	r3, r3, #7
    dd16:	d50b      	bpl.n	dd30 <usage_fault.isra.2+0x60>
		PR_FAULT_INFO("  Unaligned memory access");
    dd18:	f04f 0100 	mov.w	r1, #0
    dd1c:	2301      	movs	r3, #1
    dd1e:	f363 0102 	bfi	r1, r3, #0, #3
    dd22:	f36f 01c5 	bfc	r1, #3, #3
    dd26:	f364 118f 	bfi	r1, r4, #6, #10
    dd2a:	4831      	ldr	r0, [pc, #196]	; (ddf0 <usage_fault.isra.2+0x120>)
    dd2c:	f003 fa74 	bl	11218 <log_0>
	}
#if defined(CONFIG_ARMV8_M_MAINLINE)
	if ((SCB->CFSR & SCB_CFSR_STKOF_Msk) != 0) {
    dd30:	4d2c      	ldr	r5, [pc, #176]	; (dde4 <usage_fault.isra.2+0x114>)
    dd32:	6aaa      	ldr	r2, [r5, #40]	; 0x28
    dd34:	02d6      	lsls	r6, r2, #11
    dd36:	d50b      	bpl.n	dd50 <usage_fault.isra.2+0x80>
		PR_FAULT_INFO("  Stack overflow (context area not valid)");
    dd38:	f04f 0100 	mov.w	r1, #0
    dd3c:	2301      	movs	r3, #1
    dd3e:	f363 0102 	bfi	r1, r3, #0, #3
    dd42:	f36f 01c5 	bfc	r1, #3, #3
    dd46:	f364 118f 	bfi	r1, r4, #6, #10
    dd4a:	482a      	ldr	r0, [pc, #168]	; (ddf4 <usage_fault.isra.2+0x124>)
    dd4c:	f003 fa64 	bl	11218 <log_0>
		 */
		reason = K_ERR_STACK_CHK_FAIL;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
	}
#endif /* CONFIG_ARMV8_M_MAINLINE */
	if ((SCB->CFSR & SCB_CFSR_NOCP_Msk) != 0) {
    dd50:	6aab      	ldr	r3, [r5, #40]	; 0x28
    dd52:	0318      	lsls	r0, r3, #12
    dd54:	d50b      	bpl.n	dd6e <usage_fault.isra.2+0x9e>
		PR_FAULT_INFO("  No coprocessor instructions");
    dd56:	f04f 0100 	mov.w	r1, #0
    dd5a:	2301      	movs	r3, #1
    dd5c:	f363 0102 	bfi	r1, r3, #0, #3
    dd60:	f36f 01c5 	bfc	r1, #3, #3
    dd64:	f364 118f 	bfi	r1, r4, #6, #10
    dd68:	4823      	ldr	r0, [pc, #140]	; (ddf8 <usage_fault.isra.2+0x128>)
    dd6a:	f003 fa55 	bl	11218 <log_0>
	}
	if ((SCB->CFSR & SCB_CFSR_INVPC_Msk) != 0) {
    dd6e:	4d1d      	ldr	r5, [pc, #116]	; (dde4 <usage_fault.isra.2+0x114>)
    dd70:	6aaa      	ldr	r2, [r5, #40]	; 0x28
    dd72:	0351      	lsls	r1, r2, #13
    dd74:	d50b      	bpl.n	dd8e <usage_fault.isra.2+0xbe>
		PR_FAULT_INFO("  Illegal load of EXC_RETURN into PC");
    dd76:	f04f 0100 	mov.w	r1, #0
    dd7a:	2301      	movs	r3, #1
    dd7c:	f363 0102 	bfi	r1, r3, #0, #3
    dd80:	f36f 01c5 	bfc	r1, #3, #3
    dd84:	f364 118f 	bfi	r1, r4, #6, #10
    dd88:	481c      	ldr	r0, [pc, #112]	; (ddfc <usage_fault.isra.2+0x12c>)
    dd8a:	f003 fa45 	bl	11218 <log_0>
	}
	if ((SCB->CFSR & SCB_CFSR_INVSTATE_Msk) != 0) {
    dd8e:	6aab      	ldr	r3, [r5, #40]	; 0x28
    dd90:	039a      	lsls	r2, r3, #14
    dd92:	d50b      	bpl.n	ddac <usage_fault.isra.2+0xdc>
		PR_FAULT_INFO("  Illegal use of the EPSR");
    dd94:	f04f 0100 	mov.w	r1, #0
    dd98:	2301      	movs	r3, #1
    dd9a:	f363 0102 	bfi	r1, r3, #0, #3
    dd9e:	f36f 01c5 	bfc	r1, #3, #3
    dda2:	f364 118f 	bfi	r1, r4, #6, #10
    dda6:	4816      	ldr	r0, [pc, #88]	; (de00 <usage_fault.isra.2+0x130>)
    dda8:	f003 fa36 	bl	11218 <log_0>
	}
	if ((SCB->CFSR & SCB_CFSR_UNDEFINSTR_Msk) != 0) {
    ddac:	4d0d      	ldr	r5, [pc, #52]	; (dde4 <usage_fault.isra.2+0x114>)
    ddae:	6aab      	ldr	r3, [r5, #40]	; 0x28
    ddb0:	03db      	lsls	r3, r3, #15
    ddb2:	d50b      	bpl.n	ddcc <usage_fault.isra.2+0xfc>
		PR_FAULT_INFO("  Attempt to execute undefined instruction");
    ddb4:	f04f 0100 	mov.w	r1, #0
    ddb8:	2301      	movs	r3, #1
    ddba:	f363 0102 	bfi	r1, r3, #0, #3
    ddbe:	f36f 01c5 	bfc	r1, #3, #3
    ddc2:	f364 118f 	bfi	r1, r4, #6, #10
    ddc6:	480f      	ldr	r0, [pc, #60]	; (de04 <usage_fault.isra.2+0x134>)
    ddc8:	f003 fa26 	bl	11218 <log_0>
	}

	/* clear UFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
    ddcc:	6aab      	ldr	r3, [r5, #40]	; 0x28

	return reason;
}
    ddce:	2000      	movs	r0, #0
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
    ddd0:	ea6f 4303 	mvn.w	r3, r3, lsl #16
    ddd4:	ea6f 4313 	mvn.w	r3, r3, lsr #16
    ddd8:	62ab      	str	r3, [r5, #40]	; 0x28
}
    ddda:	bd70      	pop	{r4, r5, r6, pc}
    dddc:	00012550 	.word	0x00012550
    dde0:	00012578 	.word	0x00012578
    dde4:	e000ed00 	.word	0xe000ed00
    dde8:	00012c46 	.word	0x00012c46
    ddec:	00012c5e 	.word	0x00012c5e
    ddf0:	00012c71 	.word	0x00012c71
    ddf4:	00012c8b 	.word	0x00012c8b
    ddf8:	00012cb5 	.word	0x00012cb5
    ddfc:	00012cd3 	.word	0x00012cd3
    de00:	00012cf8 	.word	0x00012cf8
    de04:	00012d12 	.word	0x00012d12

0000de08 <mem_manage_fault.isra.4>:
static u32_t mem_manage_fault(z_arch_esf_t *esf, int from_hard_fault,
    de08:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    de0c:	460e      	mov	r6, r1
	PR_FAULT_INFO("***** MPU FAULT *****");
    de0e:	f04f 0801 	mov.w	r8, #1
    de12:	f04f 0100 	mov.w	r1, #0
    de16:	4b3d      	ldr	r3, [pc, #244]	; (df0c <mem_manage_fault.isra.4+0x104>)
    de18:	4c3d      	ldr	r4, [pc, #244]	; (df10 <mem_manage_fault.isra.4+0x108>)
    de1a:	f368 0102 	bfi	r1, r8, #0, #3
    de1e:	1ae4      	subs	r4, r4, r3
    de20:	f36f 01c5 	bfc	r1, #3, #3
    de24:	f3c4 04c9 	ubfx	r4, r4, #3, #10
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
    de28:	4d3a      	ldr	r5, [pc, #232]	; (df14 <mem_manage_fault.isra.4+0x10c>)
	PR_FAULT_INFO("***** MPU FAULT *****");
    de2a:	f364 118f 	bfi	r1, r4, #6, #10
static u32_t mem_manage_fault(z_arch_esf_t *esf, int from_hard_fault,
    de2e:	4607      	mov	r7, r0
	PR_FAULT_INFO("***** MPU FAULT *****");
    de30:	4839      	ldr	r0, [pc, #228]	; (df18 <mem_manage_fault.isra.4+0x110>)
    de32:	f003 f9f1 	bl	11218 <log_0>
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
    de36:	6aaa      	ldr	r2, [r5, #40]	; 0x28
    de38:	06d1      	lsls	r1, r2, #27
    de3a:	d50a      	bpl.n	de52 <mem_manage_fault.isra.4+0x4a>
		PR_FAULT_INFO("  Stacking error (context area might be"
    de3c:	f04f 0100 	mov.w	r1, #0
    de40:	f368 0102 	bfi	r1, r8, #0, #3
    de44:	f36f 01c5 	bfc	r1, #3, #3
    de48:	f364 118f 	bfi	r1, r4, #6, #10
    de4c:	4833      	ldr	r0, [pc, #204]	; (df1c <mem_manage_fault.isra.4+0x114>)
    de4e:	f003 f9e3 	bl	11218 <log_0>
	if ((SCB->CFSR & SCB_CFSR_MUNSTKERR_Msk) != 0) {
    de52:	6aab      	ldr	r3, [r5, #40]	; 0x28
    de54:	071a      	lsls	r2, r3, #28
    de56:	d50b      	bpl.n	de70 <mem_manage_fault.isra.4+0x68>
		PR_FAULT_INFO("  Unstacking error");
    de58:	f04f 0100 	mov.w	r1, #0
    de5c:	2301      	movs	r3, #1
    de5e:	f363 0102 	bfi	r1, r3, #0, #3
    de62:	f36f 01c5 	bfc	r1, #3, #3
    de66:	f364 118f 	bfi	r1, r4, #6, #10
    de6a:	482d      	ldr	r0, [pc, #180]	; (df20 <mem_manage_fault.isra.4+0x118>)
    de6c:	f003 f9d4 	bl	11218 <log_0>
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
    de70:	4d28      	ldr	r5, [pc, #160]	; (df14 <mem_manage_fault.isra.4+0x10c>)
    de72:	6aab      	ldr	r3, [r5, #40]	; 0x28
    de74:	079b      	lsls	r3, r3, #30
    de76:	d520      	bpl.n	deba <mem_manage_fault.isra.4+0xb2>
		PR_FAULT_INFO("  Data Access Violation");
    de78:	f04f 0801 	mov.w	r8, #1
    de7c:	f04f 0100 	mov.w	r1, #0
    de80:	f368 0102 	bfi	r1, r8, #0, #3
    de84:	f36f 01c5 	bfc	r1, #3, #3
    de88:	f364 118f 	bfi	r1, r4, #6, #10
    de8c:	4825      	ldr	r0, [pc, #148]	; (df24 <mem_manage_fault.isra.4+0x11c>)
    de8e:	f003 f9c3 	bl	11218 <log_0>
		mmfar = SCB->MMFAR;
    de92:	6b69      	ldr	r1, [r5, #52]	; 0x34
		if ((SCB->CFSR & SCB_CFSR_MMARVALID_Msk) != 0) {
    de94:	6aab      	ldr	r3, [r5, #40]	; 0x28
    de96:	0618      	lsls	r0, r3, #24
    de98:	d50f      	bpl.n	deba <mem_manage_fault.isra.4+0xb2>
			PR_EXC("  MMFAR Address: 0x%x", mmfar);
    de9a:	f04f 0200 	mov.w	r2, #0
    de9e:	f368 0202 	bfi	r2, r8, #0, #3
    dea2:	f36f 02c5 	bfc	r2, #3, #3
    dea6:	f364 128f 	bfi	r2, r4, #6, #10
    deaa:	481f      	ldr	r0, [pc, #124]	; (df28 <mem_manage_fault.isra.4+0x120>)
    deac:	f003 f9c1 	bl	11232 <log_1>
			if (from_hard_fault) {
    deb0:	b11f      	cbz	r7, deba <mem_manage_fault.isra.4+0xb2>
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
    deb2:	6aab      	ldr	r3, [r5, #40]	; 0x28
    deb4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    deb8:	62ab      	str	r3, [r5, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_IACCVIOL_Msk) != 0) {
    deba:	4d16      	ldr	r5, [pc, #88]	; (df14 <mem_manage_fault.isra.4+0x10c>)
    debc:	6aaa      	ldr	r2, [r5, #40]	; 0x28
    debe:	07d2      	lsls	r2, r2, #31
    dec0:	d50b      	bpl.n	deda <mem_manage_fault.isra.4+0xd2>
		PR_FAULT_INFO("  Instruction Access Violation");
    dec2:	f04f 0100 	mov.w	r1, #0
    dec6:	2301      	movs	r3, #1
    dec8:	f363 0102 	bfi	r1, r3, #0, #3
    decc:	f36f 01c5 	bfc	r1, #3, #3
    ded0:	f364 118f 	bfi	r1, r4, #6, #10
    ded4:	4815      	ldr	r0, [pc, #84]	; (df2c <mem_manage_fault.isra.4+0x124>)
    ded6:	f003 f99f 	bl	11218 <log_0>
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
    deda:	6aab      	ldr	r3, [r5, #40]	; 0x28
    dedc:	069b      	lsls	r3, r3, #26
    dede:	d50b      	bpl.n	def8 <mem_manage_fault.isra.4+0xf0>
		PR_FAULT_INFO(
    dee0:	f04f 0100 	mov.w	r1, #0
    dee4:	2301      	movs	r3, #1
    dee6:	f363 0102 	bfi	r1, r3, #0, #3
    deea:	f36f 01c5 	bfc	r1, #3, #3
    deee:	f364 118f 	bfi	r1, r4, #6, #10
    def2:	480f      	ldr	r0, [pc, #60]	; (df30 <mem_manage_fault.isra.4+0x128>)
    def4:	f003 f990 	bl	11218 <log_0>
	*recoverable = memory_fault_recoverable(esf);
    def8:	2000      	movs	r0, #0
	if (SCB->CFSR & SCB_CFSR_MSTKERR_Msk) {
    defa:	4b06      	ldr	r3, [pc, #24]	; (df14 <mem_manage_fault.isra.4+0x10c>)
    defc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
    defe:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    df00:	f042 02ff 	orr.w	r2, r2, #255	; 0xff
    df04:	629a      	str	r2, [r3, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf);
    df06:	7030      	strb	r0, [r6, #0]
}
    df08:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    df0c:	00012550 	.word	0x00012550
    df10:	00012578 	.word	0x00012578
    df14:	e000ed00 	.word	0xe000ed00
    df18:	00012b6e 	.word	0x00012b6e
    df1c:	00012b84 	.word	0x00012b84
    df20:	00012bb7 	.word	0x00012bb7
    df24:	00012bca 	.word	0x00012bca
    df28:	00012be2 	.word	0x00012be2
    df2c:	00012bf8 	.word	0x00012bf8
    df30:	00012c17 	.word	0x00012c17

0000df34 <bus_fault.isra.5>:
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
    df34:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    df38:	460e      	mov	r6, r1
	PR_FAULT_INFO("***** BUS FAULT *****");
    df3a:	f04f 0801 	mov.w	r8, #1
    df3e:	f04f 0100 	mov.w	r1, #0
    df42:	4b44      	ldr	r3, [pc, #272]	; (e054 <bus_fault.isra.5+0x120>)
    df44:	4c44      	ldr	r4, [pc, #272]	; (e058 <bus_fault.isra.5+0x124>)
    df46:	f368 0102 	bfi	r1, r8, #0, #3
    df4a:	1ae4      	subs	r4, r4, r3
    df4c:	f36f 01c5 	bfc	r1, #3, #3
    df50:	f3c4 04c9 	ubfx	r4, r4, #3, #10
	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
    df54:	4d41      	ldr	r5, [pc, #260]	; (e05c <bus_fault.isra.5+0x128>)
	PR_FAULT_INFO("***** BUS FAULT *****");
    df56:	f364 118f 	bfi	r1, r4, #6, #10
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
    df5a:	4607      	mov	r7, r0
	PR_FAULT_INFO("***** BUS FAULT *****");
    df5c:	4840      	ldr	r0, [pc, #256]	; (e060 <bus_fault.isra.5+0x12c>)
    df5e:	f003 f95b 	bl	11218 <log_0>
	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
    df62:	6aaa      	ldr	r2, [r5, #40]	; 0x28
    df64:	04d1      	lsls	r1, r2, #19
    df66:	d50a      	bpl.n	df7e <bus_fault.isra.5+0x4a>
		PR_FAULT_INFO("  Stacking error");
    df68:	f04f 0100 	mov.w	r1, #0
    df6c:	f368 0102 	bfi	r1, r8, #0, #3
    df70:	f36f 01c5 	bfc	r1, #3, #3
    df74:	f364 118f 	bfi	r1, r4, #6, #10
    df78:	483a      	ldr	r0, [pc, #232]	; (e064 <bus_fault.isra.5+0x130>)
    df7a:	f003 f94d 	bl	11218 <log_0>
	if (SCB->CFSR & SCB_CFSR_UNSTKERR_Msk) {
    df7e:	6aab      	ldr	r3, [r5, #40]	; 0x28
    df80:	051a      	lsls	r2, r3, #20
    df82:	d50b      	bpl.n	df9c <bus_fault.isra.5+0x68>
		PR_FAULT_INFO("  Unstacking error");
    df84:	f04f 0100 	mov.w	r1, #0
    df88:	2301      	movs	r3, #1
    df8a:	f363 0102 	bfi	r1, r3, #0, #3
    df8e:	f36f 01c5 	bfc	r1, #3, #3
    df92:	f364 118f 	bfi	r1, r4, #6, #10
    df96:	4834      	ldr	r0, [pc, #208]	; (e068 <bus_fault.isra.5+0x134>)
    df98:	f003 f93e 	bl	11218 <log_0>
	if (SCB->CFSR & SCB_CFSR_PRECISERR_Msk) {
    df9c:	4d2f      	ldr	r5, [pc, #188]	; (e05c <bus_fault.isra.5+0x128>)
    df9e:	6aab      	ldr	r3, [r5, #40]	; 0x28
    dfa0:	059b      	lsls	r3, r3, #22
    dfa2:	d520      	bpl.n	dfe6 <bus_fault.isra.5+0xb2>
		PR_FAULT_INFO("  Precise data bus error");
    dfa4:	f04f 0801 	mov.w	r8, #1
    dfa8:	f04f 0100 	mov.w	r1, #0
    dfac:	f368 0102 	bfi	r1, r8, #0, #3
    dfb0:	f36f 01c5 	bfc	r1, #3, #3
    dfb4:	f364 118f 	bfi	r1, r4, #6, #10
    dfb8:	482c      	ldr	r0, [pc, #176]	; (e06c <bus_fault.isra.5+0x138>)
    dfba:	f003 f92d 	bl	11218 <log_0>
		STORE_xFAR(bfar, SCB->BFAR);
    dfbe:	6ba9      	ldr	r1, [r5, #56]	; 0x38
		if ((SCB->CFSR & SCB_CFSR_BFARVALID_Msk) != 0) {
    dfc0:	6aab      	ldr	r3, [r5, #40]	; 0x28
    dfc2:	0418      	lsls	r0, r3, #16
    dfc4:	d50f      	bpl.n	dfe6 <bus_fault.isra.5+0xb2>
			PR_EXC("  BFAR Address: 0x%x", bfar);
    dfc6:	f04f 0200 	mov.w	r2, #0
    dfca:	f368 0202 	bfi	r2, r8, #0, #3
    dfce:	f36f 02c5 	bfc	r2, #3, #3
    dfd2:	f364 128f 	bfi	r2, r4, #6, #10
    dfd6:	4826      	ldr	r0, [pc, #152]	; (e070 <bus_fault.isra.5+0x13c>)
    dfd8:	f003 f92b 	bl	11232 <log_1>
			if (from_hard_fault) {
    dfdc:	b11f      	cbz	r7, dfe6 <bus_fault.isra.5+0xb2>
				SCB->CFSR &= ~SCB_CFSR_BFARVALID_Msk;
    dfde:	6aab      	ldr	r3, [r5, #40]	; 0x28
    dfe0:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
    dfe4:	62ab      	str	r3, [r5, #40]	; 0x28
	if (SCB->CFSR & SCB_CFSR_IMPRECISERR_Msk) {
    dfe6:	4d1d      	ldr	r5, [pc, #116]	; (e05c <bus_fault.isra.5+0x128>)
    dfe8:	6aab      	ldr	r3, [r5, #40]	; 0x28
    dfea:	0559      	lsls	r1, r3, #21
    dfec:	d50b      	bpl.n	e006 <bus_fault.isra.5+0xd2>
		PR_FAULT_INFO("  Imprecise data bus error");
    dfee:	f04f 0100 	mov.w	r1, #0
    dff2:	2301      	movs	r3, #1
    dff4:	f363 0102 	bfi	r1, r3, #0, #3
    dff8:	f36f 01c5 	bfc	r1, #3, #3
    dffc:	f364 118f 	bfi	r1, r4, #6, #10
    e000:	481c      	ldr	r0, [pc, #112]	; (e074 <bus_fault.isra.5+0x140>)
    e002:	f003 f909 	bl	11218 <log_0>
	if ((SCB->CFSR & SCB_CFSR_IBUSERR_Msk) != 0) {
    e006:	6aab      	ldr	r3, [r5, #40]	; 0x28
    e008:	f413 7380 	ands.w	r3, r3, #256	; 0x100
    e00c:	d014      	beq.n	e038 <bus_fault.isra.5+0x104>
		PR_FAULT_INFO("  Instruction bus error");
    e00e:	f04f 0100 	mov.w	r1, #0
    e012:	2301      	movs	r3, #1
    e014:	f363 0102 	bfi	r1, r3, #0, #3
    e018:	f36f 01c5 	bfc	r1, #3, #3
    e01c:	4816      	ldr	r0, [pc, #88]	; (e078 <bus_fault.isra.5+0x144>)
    e01e:	f364 118f 	bfi	r1, r4, #6, #10
		PR_FAULT_INFO("  Floating-point lazy state preservation error");
    e022:	f003 f8f9 	bl	11218 <log_0>
	*recoverable = memory_fault_recoverable(esf);
    e026:	2000      	movs	r0, #0
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
    e028:	4a0c      	ldr	r2, [pc, #48]	; (e05c <bus_fault.isra.5+0x128>)
    e02a:	6a93      	ldr	r3, [r2, #40]	; 0x28
    e02c:	f443 437f 	orr.w	r3, r3, #65280	; 0xff00
    e030:	6293      	str	r3, [r2, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf);
    e032:	7030      	strb	r0, [r6, #0]
}
    e034:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
    e038:	6aaa      	ldr	r2, [r5, #40]	; 0x28
    e03a:	0492      	lsls	r2, r2, #18
    e03c:	d5f3      	bpl.n	e026 <bus_fault.isra.5+0xf2>
		PR_FAULT_INFO("  Floating-point lazy state preservation error");
    e03e:	f04f 0100 	mov.w	r1, #0
    e042:	2201      	movs	r2, #1
    e044:	f362 0102 	bfi	r1, r2, #0, #3
    e048:	f363 01c5 	bfi	r1, r3, #3, #3
    e04c:	f364 118f 	bfi	r1, r4, #6, #10
    e050:	480a      	ldr	r0, [pc, #40]	; (e07c <bus_fault.isra.5+0x148>)
    e052:	e7e6      	b.n	e022 <bus_fault.isra.5+0xee>
    e054:	00012550 	.word	0x00012550
    e058:	00012578 	.word	0x00012578
    e05c:	e000ed00 	.word	0xe000ed00
    e060:	00012ae6 	.word	0x00012ae6
    e064:	00012afc 	.word	0x00012afc
    e068:	00012bb7 	.word	0x00012bb7
    e06c:	00012b0d 	.word	0x00012b0d
    e070:	00012b26 	.word	0x00012b26
    e074:	00012b3b 	.word	0x00012b3b
    e078:	00012b56 	.word	0x00012b56
    e07c:	00012c17 	.word	0x00012c17

0000e080 <z_arm_fault>:
 * running a Secure Firmware.
 */
void z_arm_fault(z_arch_esf_t *esf, u32_t exc_return)
{
	u32_t reason = K_ERR_CPU_EXCEPTION;
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    e080:	4b5a      	ldr	r3, [pc, #360]	; (e1ec <z_arm_fault+0x16c>)
{
    e082:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    e084:	685c      	ldr	r4, [r3, #4]
				goto _exit_fatal;
			}
		}
	}
#elif defined(CONFIG_ARM_NONSECURE_FIRMWARE)
	if ((exc_return & EXC_RETURN_INDICATOR_PREFIX) !=
    e086:	f001 437f 	and.w	r3, r1, #4278190080	; 0xff000000
    e08a:	f1b3 4f7f 	cmp.w	r3, #4278190080	; 0xff000000
{
    e08e:	4606      	mov	r6, r0
	if ((exc_return & EXC_RETURN_INDICATOR_PREFIX) !=
    e090:	f040 80aa 	bne.w	e1e8 <z_arm_fault+0x168>
			EXC_RETURN_INDICATOR_PREFIX) {
		/* Invalid EXC_RETURN value */
		goto _exit_fatal;
	}
	if (exc_return & EXC_RETURN_EXCEPTION_SECURE_Secure) {
    e094:	f011 0301 	ands.w	r3, r1, #1
    e098:	f040 80a6 	bne.w	e1e8 <z_arm_fault+0x168>
		 * This is a fatal error.
		 */
		goto _exit_fatal;
	}

	if (exc_return & EXC_RETURN_RETURN_STACK_Secure) {
    e09c:	064a      	lsls	r2, r1, #25
    e09e:	d50f      	bpl.n	e0c0 <z_arm_fault+0x40>
		 * Note that Non-Secure firmware cannot inspect the Secure
		 * stack to determine the root cause of the fault. Fault
		 * inspection will indicate the Non-Secure instruction
		 * that performed the branch to the Secure domain.
		 */
		PR_FAULT_INFO("Exception occurred in Secure State");
    e0a0:	2201      	movs	r2, #1
    e0a2:	f04f 0100 	mov.w	r1, #0
    e0a6:	f362 0102 	bfi	r1, r2, #0, #3
    e0aa:	f363 01c5 	bfi	r1, r3, #3, #3
    e0ae:	4a50      	ldr	r2, [pc, #320]	; (e1f0 <z_arm_fault+0x170>)
    e0b0:	4b50      	ldr	r3, [pc, #320]	; (e1f4 <z_arm_fault+0x174>)
    e0b2:	4851      	ldr	r0, [pc, #324]	; (e1f8 <z_arm_fault+0x178>)
    e0b4:	1a9b      	subs	r3, r3, r2
    e0b6:	08db      	lsrs	r3, r3, #3
    e0b8:	f363 118f 	bfi	r1, r3, #6, #10
    e0bc:	f003 f8ac 	bl	11218 <log_0>
	*recoverable = false;
    e0c0:	2300      	movs	r3, #0
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    e0c2:	f3c4 0008 	ubfx	r0, r4, #0, #9
	*recoverable = false;
    e0c6:	f88d 3007 	strb.w	r3, [sp, #7]
	switch (fault) {
    e0ca:	1ec3      	subs	r3, r0, #3
    e0cc:	2b09      	cmp	r3, #9
    e0ce:	d873      	bhi.n	e1b8 <z_arm_fault+0x138>
    e0d0:	e8df f003 	tbb	[pc, r3]
    e0d4:	585f5b05 	.word	0x585f5b05
    e0d8:	72727272 	.word	0x72727272
    e0dc:	6372      	.short	0x6372
	PR_FAULT_INFO("***** HARD FAULT *****");
    e0de:	2701      	movs	r7, #1
    e0e0:	f04f 0100 	mov.w	r1, #0
	*recoverable = false;
    e0e4:	2400      	movs	r4, #0
	PR_FAULT_INFO("***** HARD FAULT *****");
    e0e6:	4b42      	ldr	r3, [pc, #264]	; (e1f0 <z_arm_fault+0x170>)
    e0e8:	4d42      	ldr	r5, [pc, #264]	; (e1f4 <z_arm_fault+0x174>)
    e0ea:	f367 0102 	bfi	r1, r7, #0, #3
    e0ee:	1aed      	subs	r5, r5, r3
    e0f0:	f36f 01c5 	bfc	r1, #3, #3
    e0f4:	f3c5 05c9 	ubfx	r5, r5, #3, #10
    e0f8:	f365 118f 	bfi	r1, r5, #6, #10
    e0fc:	483f      	ldr	r0, [pc, #252]	; (e1fc <z_arm_fault+0x17c>)
    e0fe:	f003 f88b 	bl	11218 <log_0>
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
    e102:	4a3a      	ldr	r2, [pc, #232]	; (e1ec <z_arm_fault+0x16c>)
	*recoverable = false;
    e104:	f88d 4007 	strb.w	r4, [sp, #7]
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
    e108:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
    e10a:	f013 0302 	ands.w	r3, r3, #2
    e10e:	d00c      	beq.n	e12a <z_arm_fault+0xaa>
		PR_EXC("  Bus fault on vector table read");
    e110:	f04f 0100 	mov.w	r1, #0
    e114:	f367 0102 	bfi	r1, r7, #0, #3
    e118:	f364 01c5 	bfi	r1, r4, #3, #3
    e11c:	4838      	ldr	r0, [pc, #224]	; (e200 <z_arm_fault+0x180>)
    e11e:	f365 118f 	bfi	r1, r5, #6, #10
	PR_FAULT_INFO(
    e122:	f003 f879 	bl	11218 <log_0>
	u32_t reason = K_ERR_CPU_EXCEPTION;
    e126:	2000      	movs	r0, #0
    e128:	e016      	b.n	e158 <z_arm_fault+0xd8>
	} else if ((SCB->HFSR & SCB_HFSR_FORCED_Msk) != 0) {
    e12a:	6ad0      	ldr	r0, [r2, #44]	; 0x2c
    e12c:	f010 4080 	ands.w	r0, r0, #1073741824	; 0x40000000
    e130:	d015      	beq.n	e15e <z_arm_fault+0xde>
		PR_EXC("  Fault escalation (see below)");
    e132:	f04f 0100 	mov.w	r1, #0
    e136:	f367 0102 	bfi	r1, r7, #0, #3
    e13a:	f363 01c5 	bfi	r1, r3, #3, #3
    e13e:	f365 118f 	bfi	r1, r5, #6, #10
    e142:	4830      	ldr	r0, [pc, #192]	; (e204 <z_arm_fault+0x184>)
    e144:	f003 f868 	bl	11218 <log_0>
		if (SCB_MMFSR != 0) {
    e148:	4b2f      	ldr	r3, [pc, #188]	; (e208 <z_arm_fault+0x188>)
    e14a:	781b      	ldrb	r3, [r3, #0]
    e14c:	b163      	cbz	r3, e168 <z_arm_fault+0xe8>
			reason = mem_manage_fault(esf, 1, recoverable);
    e14e:	4638      	mov	r0, r7
    e150:	f10d 0107 	add.w	r1, sp, #7
		reason = mem_manage_fault(esf, 0, recoverable);
    e154:	f7ff fe58 	bl	de08 <mem_manage_fault.isra.4>
#else
	(void) exc_return;
#endif /* CONFIG_ARM_SECURE_FIRMWARE */

	reason = fault_handle(esf, fault, &recoverable);
	if (recoverable) {
    e158:	f89d 3007 	ldrb.w	r3, [sp, #7]
    e15c:	b913      	cbnz	r3, e164 <z_arm_fault+0xe4>

#if defined(CONFIG_ARM_SECURE_FIRMWARE) || \
	defined(CONFIG_ARM_NONSECURE_FIRMWARE)
_exit_fatal:
#endif
	z_arm_fatal_error(reason, esf);
    e15e:	4631      	mov	r1, r6
    e160:	f7ff fd32 	bl	dbc8 <z_arm_fatal_error>
}
    e164:	b003      	add	sp, #12
    e166:	bdf0      	pop	{r4, r5, r6, r7, pc}
		} else if (SCB_BFSR != 0) {
    e168:	4b28      	ldr	r3, [pc, #160]	; (e20c <z_arm_fault+0x18c>)
    e16a:	781b      	ldrb	r3, [r3, #0]
    e16c:	b12b      	cbz	r3, e17a <z_arm_fault+0xfa>
			reason = bus_fault(esf, 1, recoverable);
    e16e:	4638      	mov	r0, r7
    e170:	f10d 0107 	add.w	r1, sp, #7
		reason = bus_fault(esf, 0, recoverable);
    e174:	f7ff fede 	bl	df34 <bus_fault.isra.5>
    e178:	e7ee      	b.n	e158 <z_arm_fault+0xd8>
		} else if (SCB_UFSR != 0) {
    e17a:	4b25      	ldr	r3, [pc, #148]	; (e210 <z_arm_fault+0x190>)
    e17c:	8818      	ldrh	r0, [r3, #0]
    e17e:	b280      	uxth	r0, r0
    e180:	2800      	cmp	r0, #0
    e182:	d0e9      	beq.n	e158 <z_arm_fault+0xd8>
		reason = usage_fault(esf);
    e184:	f7ff fda4 	bl	dcd0 <usage_fault.isra.2>
    e188:	e7e6      	b.n	e158 <z_arm_fault+0xd8>
		reason = mem_manage_fault(esf, 0, recoverable);
    e18a:	f10d 0107 	add.w	r1, sp, #7
    e18e:	2000      	movs	r0, #0
    e190:	e7e0      	b.n	e154 <z_arm_fault+0xd4>
		reason = bus_fault(esf, 0, recoverable);
    e192:	f10d 0107 	add.w	r1, sp, #7
    e196:	2000      	movs	r0, #0
    e198:	e7ec      	b.n	e174 <z_arm_fault+0xf4>
	PR_FAULT_INFO(
    e19a:	2301      	movs	r3, #1
    e19c:	f04f 0100 	mov.w	r1, #0
    e1a0:	4a13      	ldr	r2, [pc, #76]	; (e1f0 <z_arm_fault+0x170>)
    e1a2:	f363 0102 	bfi	r1, r3, #0, #3
    e1a6:	4b13      	ldr	r3, [pc, #76]	; (e1f4 <z_arm_fault+0x174>)
    e1a8:	f36f 01c5 	bfc	r1, #3, #3
    e1ac:	1a9b      	subs	r3, r3, r2
    e1ae:	08db      	lsrs	r3, r3, #3
    e1b0:	f363 118f 	bfi	r1, r3, #6, #10
    e1b4:	4817      	ldr	r0, [pc, #92]	; (e214 <z_arm_fault+0x194>)
    e1b6:	e7b4      	b.n	e122 <z_arm_fault+0xa2>
	PR_FAULT_INFO("***** %s %d) *****",
    e1b8:	2201      	movs	r2, #1
    e1ba:	f04f 0300 	mov.w	r3, #0
    e1be:	490c      	ldr	r1, [pc, #48]	; (e1f0 <z_arm_fault+0x170>)
    e1c0:	f362 0302 	bfi	r3, r2, #0, #3
    e1c4:	4a0b      	ldr	r2, [pc, #44]	; (e1f4 <z_arm_fault+0x174>)
    e1c6:	4c14      	ldr	r4, [pc, #80]	; (e218 <z_arm_fault+0x198>)
    e1c8:	1a52      	subs	r2, r2, r1
    e1ca:	4914      	ldr	r1, [pc, #80]	; (e21c <z_arm_fault+0x19c>)
    e1cc:	08d2      	lsrs	r2, r2, #3
    e1ce:	f36f 03c5 	bfc	r3, #3, #3
    e1d2:	f362 138f 	bfi	r3, r2, #6, #10
    e1d6:	280f      	cmp	r0, #15
    e1d8:	bfc8      	it	gt
    e1da:	4621      	movgt	r1, r4
    e1dc:	f1a0 0210 	sub.w	r2, r0, #16
    e1e0:	480f      	ldr	r0, [pc, #60]	; (e220 <z_arm_fault+0x1a0>)
    e1e2:	f003 f83a 	bl	1125a <log_2>
    e1e6:	e79e      	b.n	e126 <z_arm_fault+0xa6>
	u32_t reason = K_ERR_CPU_EXCEPTION;
    e1e8:	2000      	movs	r0, #0
    e1ea:	e7b8      	b.n	e15e <z_arm_fault+0xde>
    e1ec:	e000ed00 	.word	0xe000ed00
    e1f0:	00012550 	.word	0x00012550
    e1f4:	00012578 	.word	0x00012578
    e1f8:	00012d3d 	.word	0x00012d3d
    e1fc:	00012d60 	.word	0x00012d60
    e200:	00012d77 	.word	0x00012d77
    e204:	00012d98 	.word	0x00012d98
    e208:	e000ed28 	.word	0xe000ed28
    e20c:	e000ed29 	.word	0xe000ed29
    e210:	e000ed2a 	.word	0xe000ed2a
    e214:	00012db7 	.word	0x00012db7
    e218:	00012e02 	.word	0x00012e02
    e21c:	00012ded 	.word	0x00012ded
    e220:	00012e1b 	.word	0x00012e1b

0000e224 <z_arm_fault_init>:
 */
void z_arm_fault_init(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
    e224:	4a02      	ldr	r2, [pc, #8]	; (e230 <z_arm_fault_init+0xc>)
    e226:	6953      	ldr	r3, [r2, #20]
    e228:	f043 0310 	orr.w	r3, r3, #16
    e22c:	6153      	str	r3, [r2, #20]
	 * Stack to attempt to descend into secure region, in which case a
	 * Secure Hard Fault will occur and we can track the fault from there.
	 */
	SCB->CCR |= SCB_CCR_STKOFHFNMIGN_Msk;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
}
    e22e:	4770      	bx	lr
    e230:	e000ed00 	.word	0xe000ed00

0000e234 <z_arm_int_lib_init>:
 * @return N/A
 */

void z_arm_int_lib_init(void)
{
	int irq = 0;
    e234:	2300      	movs	r3, #0
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    e236:	2120      	movs	r1, #32
    e238:	4803      	ldr	r0, [pc, #12]	; (e248 <z_arm_int_lib_init+0x14>)
    e23a:	18c2      	adds	r2, r0, r3

	for (; irq < CONFIG_NUM_IRQS; irq++) {
    e23c:	3301      	adds	r3, #1
    e23e:	2b41      	cmp	r3, #65	; 0x41
    e240:	f882 1300 	strb.w	r1, [r2, #768]	; 0x300
    e244:	d1f9      	bne.n	e23a <z_arm_int_lib_init+0x6>
		NVIC_SetPriority((IRQn_Type)irq, _IRQ_PRIO_OFFSET);
	}
}
    e246:	4770      	bx	lr
    e248:	e000e100 	.word	0xe000e100

0000e24c <z_impl_k_thread_abort>:
#include <sys/__assert.h>

extern void z_thread_single_abort(struct k_thread *thread);

void z_impl_k_thread_abort(k_tid_t thread)
{
    e24c:	b538      	push	{r3, r4, r5, lr}
    e24e:	4605      	mov	r5, r0
	__asm__ volatile(
    e250:	f04f 0320 	mov.w	r3, #32
    e254:	f3ef 8411 	mrs	r4, BASEPRI
    e258:	f383 8811 	msr	BASEPRI, r3
    e25c:	f3bf 8f6f 	isb	sy
	key = irq_lock();

	__ASSERT(!(thread->base.user_options & K_ESSENTIAL),
		 "essential thread aborted");

	z_thread_single_abort(thread);
    e260:	f003 ff72 	bl	12148 <z_thread_single_abort>
	z_thread_monitor_exit(thread);

	if (_current == thread) {
    e264:	4b0a      	ldr	r3, [pc, #40]	; (e290 <z_impl_k_thread_abort+0x44>)
    e266:	689b      	ldr	r3, [r3, #8]
    e268:	42ab      	cmp	r3, r5
    e26a:	d10b      	bne.n	e284 <z_impl_k_thread_abort+0x38>
		if ((SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk) == 0) {
    e26c:	4b09      	ldr	r3, [pc, #36]	; (e294 <z_impl_k_thread_abort+0x48>)
    e26e:	685a      	ldr	r2, [r3, #4]
    e270:	f3c2 0208 	ubfx	r2, r2, #0, #9
    e274:	b912      	cbnz	r2, e27c <z_impl_k_thread_abort+0x30>
	z_check_stack_sentinel();

#ifndef CONFIG_ARM
	sys_trace_thread_switched_out();
#endif
	ret = z_arch_swap(key);
    e276:	4620      	mov	r0, r4
    e278:	f7ff fc1a 	bl	dab0 <z_arch_swap>
			(void)z_swap_irqlock(key);
			CODE_UNREACHABLE;
		} else {
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    e27c:	685a      	ldr	r2, [r3, #4]
    e27e:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
    e282:	605a      	str	r2, [r3, #4]
		}
	}

	/* The abort handler might have altered the ready queue. */
	z_reschedule_irqlock(key);
    e284:	4620      	mov	r0, r4
}
    e286:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule_irqlock(key);
    e28a:	f003 beb0 	b.w	11fee <z_reschedule_irqlock>
    e28e:	bf00      	nop
    e290:	200242ec 	.word	0x200242ec
    e294:	e000ed00 	.word	0xe000ed00

0000e298 <z_arm_configure_static_mpu_regions>:
 *
 * For some MPU architectures, such as the unmodified ARMv8-M MPU,
 * the function must execute with MPU enabled.
 */
void z_arm_configure_static_mpu_regions(void)
{
    e298:	b510      	push	{r4, lr}
		.size = (u32_t)&_nocache_ram_size,
		.attr = K_MEM_PARTITION_P_RW_U_NA_NOCACHE,
		};
#endif /* CONFIG_NOCACHE_MEMORY */
#if defined(CONFIG_ARCH_HAS_RAMFUNC_SUPPORT)
		const struct k_mem_partition ramfunc_region =
    e29a:	4b0e      	ldr	r3, [pc, #56]	; (e2d4 <z_arm_configure_static_mpu_regions+0x3c>)
{
    e29c:	b088      	sub	sp, #32
		const struct k_mem_partition ramfunc_region =
    e29e:	9302      	str	r3, [sp, #8]
    e2a0:	4b0d      	ldr	r3, [pc, #52]	; (e2d8 <z_arm_configure_static_mpu_regions+0x40>)
	/* Configure the static MPU regions within firmware SRAM boundaries.
	 * Start address of the image is given by _image_ram_start. The end
	 * of the firmware SRAM area is marked by __kernel_ram_end, taking
	 * into account the unused SRAM area, as well.
	 */
	arm_core_mpu_configure_static_mpu_regions(static_regions,
    e2a2:	4c0e      	ldr	r4, [pc, #56]	; (e2dc <z_arm_configure_static_mpu_regions+0x44>)
		const struct k_mem_partition ramfunc_region =
    e2a4:	9303      	str	r3, [sp, #12]
    e2a6:	4b0e      	ldr	r3, [pc, #56]	; (e2e0 <z_arm_configure_static_mpu_regions+0x48>)
	const struct k_mem_partition *static_regions[] = {
    e2a8:	a808      	add	r0, sp, #32
		const struct k_mem_partition ramfunc_region =
    e2aa:	9304      	str	r3, [sp, #16]
	const struct k_mem_partition *static_regions[] = {
    e2ac:	ab02      	add	r3, sp, #8
    e2ae:	f840 3d1c 	str.w	r3, [r0, #-28]!
	arm_core_mpu_configure_static_mpu_regions(static_regions,
    e2b2:	4a0c      	ldr	r2, [pc, #48]	; (e2e4 <z_arm_configure_static_mpu_regions+0x4c>)
    e2b4:	4623      	mov	r3, r4
    e2b6:	2101      	movs	r1, #1
    e2b8:	f000 f956 	bl	e568 <arm_core_mpu_configure_static_mpu_regions>
	/* Define a constant array of k_mem_partition objects that holds the
	 * boundaries of the areas, inside which dynamic region programming
	 * is allowed. The information is passed to the underlying driver at
	 * initialization.
	 */
	const struct k_mem_partition dyn_region_areas[] = {
    e2bc:	2300      	movs	r3, #0
    e2be:	9307      	str	r3, [sp, #28]
		{
		.start = _MPU_DYNAMIC_REGIONS_AREA_START,
    e2c0:	4b09      	ldr	r3, [pc, #36]	; (e2e8 <z_arm_configure_static_mpu_regions+0x50>)
		.size =  _MPU_DYNAMIC_REGIONS_AREA_SIZE,
		}
	};

	arm_core_mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
    e2c2:	2101      	movs	r1, #1
		.size =  _MPU_DYNAMIC_REGIONS_AREA_SIZE,
    e2c4:	1ae4      	subs	r4, r4, r3
	arm_core_mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
    e2c6:	a805      	add	r0, sp, #20
	const struct k_mem_partition dyn_region_areas[] = {
    e2c8:	9305      	str	r3, [sp, #20]
    e2ca:	9406      	str	r4, [sp, #24]
	arm_core_mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
    e2cc:	f000 f956 	bl	e57c <arm_core_mpu_mark_areas_for_dynamic_regions>
		ARRAY_SIZE(dyn_region_areas));
#endif /* CONFIG_MPU_REQUIRES_NON_OVERLAPPING_REGIONS */
}
    e2d0:	b008      	add	sp, #32
    e2d2:	bd10      	pop	{r4, pc}
    e2d4:	20020000 	.word	0x20020000
    e2d8:	00000000 	.word	0x00000000
    e2dc:	20040000 	.word	0x20040000
    e2e0:	00010006 	.word	0x00010006
    e2e4:	20020000 	.word	0x20020000
    e2e8:	20020000 	.word	0x20020000

0000e2ec <region_init>:
 * Note:
 *   The caller must provide a valid region index.
 */
static void region_init(const u32_t index,
	const struct arm_mpu_region *region_conf)
{
    e2ec:	b510      	push	{r4, lr}
	ARM_MPU_SetRegion(
		/* RNR */
		index,
		/* RBAR */
		(region_conf->base & MPU_RBAR_BASE_Msk)
    e2ee:	680b      	ldr	r3, [r1, #0]
		| (region_conf->attr.rbar &
    e2f0:	7a0c      	ldrb	r4, [r1, #8]
		(region_conf->base & MPU_RBAR_BASE_Msk)
    e2f2:	f023 031f 	bic.w	r3, r3, #31
		| (region_conf->attr.rbar &
    e2f6:	f004 021f 	and.w	r2, r4, #31
    e2fa:	431a      	orrs	r2, r3
			(MPU_RBAR_XN_Msk | MPU_RBAR_AP_Msk | MPU_RBAR_SH_Msk)),
		/* RLAR */
		(region_conf->attr.r_limit & MPU_RLAR_LIMIT_Msk)
    e2fc:	68cb      	ldr	r3, [r1, #12]
		| ((region_conf->attr.mair_idx << MPU_RLAR_AttrIndx_Pos)
    e2fe:	0964      	lsrs	r4, r4, #5
		(region_conf->attr.r_limit & MPU_RLAR_LIMIT_Msk)
    e300:	f023 031f 	bic.w	r3, r3, #31
* \param rbar Value for RBAR register.
* \param rlar Value for RLAR register.
*/   
__STATIC_INLINE void ARM_MPU_SetRegionEx(MPU_Type* mpu, uint32_t rnr, uint32_t rbar, uint32_t rlar)
{
  mpu->RNR = rnr;
    e304:	4904      	ldr	r1, [pc, #16]	; (e318 <region_init+0x2c>)
			& MPU_RLAR_AttrIndx_Msk)
		| MPU_RLAR_EN_Msk
    e306:	f043 0301 	orr.w	r3, r3, #1
    e30a:	ea43 0344 	orr.w	r3, r3, r4, lsl #1
    e30e:	6088      	str	r0, [r1, #8]
  mpu->RBAR = rbar;
    e310:	60ca      	str	r2, [r1, #12]
  mpu->RLAR = rlar;
    e312:	610b      	str	r3, [r1, #16]
	);

	LOG_DBG("[%d] 0x%08x 0x%08x 0x%08x 0x%08x",
			index, region_conf->base, region_conf->attr.rbar,
			region_conf->attr.mair_idx, region_conf->attr.r_limit);
}
    e314:	bd10      	pop	{r4, pc}
    e316:	bf00      	nop
    e318:	e000ed90 	.word	0xe000ed90

0000e31c <region_allocate_and_init.part.0>:
#include <arm_mpu_v8_internal.h>
#else
#error "Unsupported ARM CPU"
#endif

static int region_allocate_and_init(const u8_t index,
    e31c:	b508      	push	{r3, lr}
{
	/* Attempt to allocate new region index. */
	if (index > (get_num_regions() - 1)) {

		/* No available MPU region index. */
		LOG_ERR("Failed to allocate new MPU region %u\n", index);
    e31e:	f04f 0200 	mov.w	r2, #0
    e322:	2301      	movs	r3, #1
    e324:	4908      	ldr	r1, [pc, #32]	; (e348 <region_allocate_and_init.part.0+0x2c>)
    e326:	f363 0202 	bfi	r2, r3, #0, #3
    e32a:	4b08      	ldr	r3, [pc, #32]	; (e34c <region_allocate_and_init.part.0+0x30>)
    e32c:	f36f 02c5 	bfc	r2, #3, #3
    e330:	1a5b      	subs	r3, r3, r1
    e332:	08db      	lsrs	r3, r3, #3
    e334:	4601      	mov	r1, r0
    e336:	f363 128f 	bfi	r2, r3, #6, #10
    e33a:	4805      	ldr	r0, [pc, #20]	; (e350 <region_allocate_and_init.part.0+0x34>)
    e33c:	f002 ff79 	bl	11232 <log_1>

	/* Program region */
	region_init(index, region_conf);

	return index;
}
    e340:	f06f 0015 	mvn.w	r0, #21
    e344:	bd08      	pop	{r3, pc}
    e346:	bf00      	nop
    e348:	00012550 	.word	0x00012550
    e34c:	00012570 	.word	0x00012570
    e350:	00012e78 	.word	0x00012e78

0000e354 <mpu_configure_regions.constprop.2>:

/* This internal function programs a set of given MPU regions
 * over a background memory area, optionally performing a
 * sanity check of the memory regions to be programmed.
 */
static int mpu_configure_regions(const struct k_mem_partition
    e354:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    e358:	4607      	mov	r7, r0
    e35a:	4688      	mov	r8, r1
    e35c:	4614      	mov	r4, r2
	bool do_sanity_check)
{
	int i;
	int reg_index = start_reg_index;

	for (i = 0; i < regions_num; i++) {
    e35e:	2600      	movs	r6, #0
	MPU->RNR = index;
    e360:	4d60      	ldr	r5, [pc, #384]	; (e4e4 <mpu_configure_regions.constprop.2+0x190>)
static int mpu_configure_regions(const struct k_mem_partition
    e362:	b085      	sub	sp, #20
	for (i = 0; i < regions_num; i++) {
    e364:	4546      	cmp	r6, r8
    e366:	da41      	bge.n	e3ec <mpu_configure_regions.constprop.2+0x98>
		if (regions[i]->size == 0U) {
    e368:	f857 3026 	ldr.w	r3, [r7, r6, lsl #2]
    e36c:	f8d3 9004 	ldr.w	r9, [r3, #4]
    e370:	f1b9 0f00 	cmp.w	r9, #0
    e374:	d05d      	beq.n	e432 <mpu_configure_regions.constprop.2+0xde>
		&&
    e376:	f1b9 0f1f 	cmp.w	r9, #31
    e37a:	d924      	bls.n	e3c6 <mpu_configure_regions.constprop.2+0x72>
		&&
    e37c:	f019 0f1f 	tst.w	r9, #31
    e380:	d121      	bne.n	e3c6 <mpu_configure_regions.constprop.2+0x72>
		((part->start &
    e382:	f8d3 a000 	ldr.w	sl, [r3]
		&&
    e386:	f01a 0f1f 	tst.w	sl, #31
    e38a:	d11c      	bne.n	e3c6 <mpu_configure_regions.constprop.2+0x72>
	u32_t region_start_addr = arm_cmse_mpu_region_get(start);
    e38c:	4650      	mov	r0, sl
    e38e:	f002 fc4d 	bl	10c2c <arm_cmse_mpu_region_get>
    e392:	4683      	mov	fp, r0
	u32_t region_end_addr = arm_cmse_mpu_region_get(start + size - 1);
    e394:	eb09 000a 	add.w	r0, r9, sl
    e398:	3801      	subs	r0, #1
    e39a:	f002 fc47 	bl	10c2c <arm_cmse_mpu_region_get>
	if (region_start_addr == region_end_addr) {
    e39e:	4583      	cmp	fp, r0
    e3a0:	d028      	beq.n	e3f4 <mpu_configure_regions.constprop.2+0xa0>
	return -EINVAL;
    e3a2:	f06f 0b15 	mvn.w	fp, #21
		int u_reg_index =
			get_region_index(regions[i]->start, regions[i]->size);

		if ((u_reg_index == -EINVAL) ||
			(u_reg_index > (reg_index - 1))) {
			LOG_ERR("Invalid underlying region index %u",
    e3a6:	2301      	movs	r3, #1
    e3a8:	f04f 0200 	mov.w	r2, #0
    e3ac:	494e      	ldr	r1, [pc, #312]	; (e4e8 <mpu_configure_regions.constprop.2+0x194>)
    e3ae:	f363 0202 	bfi	r2, r3, #0, #3
    e3b2:	4b4e      	ldr	r3, [pc, #312]	; (e4ec <mpu_configure_regions.constprop.2+0x198>)
    e3b4:	f36f 02c5 	bfc	r2, #3, #3
    e3b8:	1a5b      	subs	r3, r3, r1
    e3ba:	08db      	lsrs	r3, r3, #3
    e3bc:	f363 128f 	bfi	r2, r3, #6, #10
    e3c0:	4659      	mov	r1, fp
    e3c2:	484b      	ldr	r0, [pc, #300]	; (e4f0 <mpu_configure_regions.constprop.2+0x19c>)
    e3c4:	e00e      	b.n	e3e4 <mpu_configure_regions.constprop.2+0x90>
			LOG_ERR("Partition %u: sanity check failed.", i);
    e3c6:	2301      	movs	r3, #1
    e3c8:	f04f 0200 	mov.w	r2, #0
    e3cc:	4946      	ldr	r1, [pc, #280]	; (e4e8 <mpu_configure_regions.constprop.2+0x194>)
    e3ce:	f363 0202 	bfi	r2, r3, #0, #3
    e3d2:	4b46      	ldr	r3, [pc, #280]	; (e4ec <mpu_configure_regions.constprop.2+0x198>)
    e3d4:	f36f 02c5 	bfc	r2, #3, #3
    e3d8:	1a5b      	subs	r3, r3, r1
    e3da:	4631      	mov	r1, r6
    e3dc:	08db      	lsrs	r3, r3, #3
    e3de:	4845      	ldr	r0, [pc, #276]	; (e4f4 <mpu_configure_regions.constprop.2+0x1a0>)
    e3e0:	f363 128f 	bfi	r2, r3, #6, #10
			LOG_ERR("Invalid underlying region index %u",
    e3e4:	f002 ff25 	bl	11232 <log_1>

			reg_index =
				mpu_configure_region(reg_index, regions[i]);

			if (reg_index == -EINVAL) {
				return reg_index;
    e3e8:	f06f 0415 	mvn.w	r4, #21
			reg_index++;
		}
	}

	return reg_index;
}
    e3ec:	4620      	mov	r0, r4
    e3ee:	b005      	add	sp, #20
    e3f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if ((u_reg_index == -EINVAL) ||
    e3f4:	f11b 0f16 	cmn.w	fp, #22
    e3f8:	d0d5      	beq.n	e3a6 <mpu_configure_regions.constprop.2+0x52>
			(u_reg_index > (reg_index - 1))) {
    e3fa:	1e63      	subs	r3, r4, #1
		if ((u_reg_index == -EINVAL) ||
    e3fc:	455b      	cmp	r3, fp
    e3fe:	dbd2      	blt.n	e3a6 <mpu_configure_regions.constprop.2+0x52>
	MPU->RNR = index;
    e400:	f8c5 b008 	str.w	fp, [r5, #8]
	return MPU->RBAR & MPU_RBAR_BASE_Msk;
    e404:	68e8      	ldr	r0, [r5, #12]
	MPU->RNR = index;
    e406:	f8c5 b008 	str.w	fp, [r5, #8]
	return (MPU->RLAR & MPU_RLAR_LIMIT_Msk) | (~MPU_RLAR_LIMIT_Msk);
    e40a:	692b      	ldr	r3, [r5, #16]
		u32_t reg_last = regions[i]->start + regions[i]->size - 1;
    e40c:	f857 1026 	ldr.w	r1, [r7, r6, lsl #2]
	return MPU->RBAR & MPU_RBAR_BASE_Msk;
    e410:	f020 001f 	bic.w	r0, r0, #31
	return (MPU->RLAR & MPU_RLAR_LIMIT_Msk) | (~MPU_RLAR_LIMIT_Msk);
    e414:	f043 0a1f 	orr.w	sl, r3, #31
		u32_t reg_last = regions[i]->start + regions[i]->size - 1;
    e418:	e9d1 3200 	ldrd	r3, r2, [r1]
    e41c:	441a      	add	r2, r3
		if ((regions[i]->start == u_reg_base) &&
    e41e:	4298      	cmp	r0, r3
		u32_t reg_last = regions[i]->start + regions[i]->size - 1;
    e420:	f102 39ff 	add.w	r9, r2, #4294967295
		if ((regions[i]->start == u_reg_base) &&
    e424:	d118      	bne.n	e458 <mpu_configure_regions.constprop.2+0x104>
    e426:	45ca      	cmp	sl, r9
    e428:	d105      	bne.n	e436 <mpu_configure_regions.constprop.2+0xe2>
			mpu_configure_region(u_reg_index, regions[i]);
    e42a:	fa5f f08b 	uxtb.w	r0, fp
    e42e:	f003 fb10 	bl	11a52 <mpu_configure_region>
	for (i = 0; i < regions_num; i++) {
    e432:	3601      	adds	r6, #1
    e434:	e796      	b.n	e364 <mpu_configure_regions.constprop.2+0x10>
	MPU->RNR = index;
    e436:	f8c5 b008 	str.w	fp, [r5, #8]
	MPU->RBAR = (MPU->RBAR & (~MPU_RBAR_BASE_Msk))
    e43a:	68eb      	ldr	r3, [r5, #12]
		| (base & MPU_RBAR_BASE_Msk);
    e43c:	f022 021f 	bic.w	r2, r2, #31
	MPU->RBAR = (MPU->RBAR & (~MPU_RBAR_BASE_Msk))
    e440:	f003 031f 	and.w	r3, r3, #31
		| (base & MPU_RBAR_BASE_Msk);
    e444:	431a      	orrs	r2, r3
	MPU->RBAR = (MPU->RBAR & (~MPU_RBAR_BASE_Msk))
    e446:	60ea      	str	r2, [r5, #12]
			reg_index =
    e448:	b2e0      	uxtb	r0, r4
			reg_index =
    e44a:	f003 fb02 	bl	11a52 <mpu_configure_region>
			if (reg_index == -EINVAL) {
    e44e:	f110 0f16 	cmn.w	r0, #22
    e452:	d0c9      	beq.n	e3e8 <mpu_configure_regions.constprop.2+0x94>
			reg_index++;
    e454:	1c44      	adds	r4, r0, #1
    e456:	e7ec      	b.n	e432 <mpu_configure_regions.constprop.2+0xde>
	MPU->RNR = index;
    e458:	f8c5 b008 	str.w	fp, [r5, #8]
	MPU->RLAR = (MPU->RLAR & (~MPU_RLAR_LIMIT_Msk))
    e45c:	692a      	ldr	r2, [r5, #16]
    e45e:	3b01      	subs	r3, #1
    e460:	f023 031f 	bic.w	r3, r3, #31
    e464:	f002 021f 	and.w	r2, r2, #31
		| (limit & MPU_RLAR_LIMIT_Msk);
    e468:	4313      	orrs	r3, r2
		} else if (reg_last == u_reg_last) {
    e46a:	45ca      	cmp	sl, r9
    e46c:	b2e0      	uxtb	r0, r4
	MPU->RLAR = (MPU->RLAR & (~MPU_RLAR_LIMIT_Msk))
    e46e:	612b      	str	r3, [r5, #16]
		} else if (reg_last == u_reg_last) {
    e470:	d0eb      	beq.n	e44a <mpu_configure_regions.constprop.2+0xf6>
			reg_index =
    e472:	f003 faee 	bl	11a52 <mpu_configure_region>
			if (reg_index == -EINVAL) {
    e476:	f110 0f16 	cmn.w	r0, #22
    e47a:	d0b5      	beq.n	e3e8 <mpu_configure_regions.constprop.2+0x94>
	MPU->RNR = index;
    e47c:	f8c5 b008 	str.w	fp, [r5, #8]
	attr->rbar = MPU->RBAR &
    e480:	68ea      	ldr	r2, [r5, #12]
    e482:	f89d 3008 	ldrb.w	r3, [sp, #8]
			REGION_LIMIT_ADDR((regions[i]->start +
    e486:	f10a 3aff 	add.w	sl, sl, #4294967295
	attr->rbar = MPU->RBAR &
    e48a:	f362 0304 	bfi	r3, r2, #0, #5
    e48e:	f88d 3008 	strb.w	r3, [sp, #8]
	attr->mair_idx = (MPU->RLAR & MPU_RLAR_AttrIndx_Msk) >>
    e492:	692b      	ldr	r3, [r5, #16]
    e494:	f89d 2008 	ldrb.w	r2, [sp, #8]
    e498:	085b      	lsrs	r3, r3, #1
    e49a:	f363 1247 	bfi	r2, r3, #5, #3
			fill_region.base = regions[i]->start +
    e49e:	f857 3026 	ldr.w	r3, [r7, r6, lsl #2]
	attr->mair_idx = (MPU->RLAR & MPU_RLAR_AttrIndx_Msk) >>
    e4a2:	f88d 2008 	strb.w	r2, [sp, #8]
			fill_region.base = regions[i]->start +
    e4a6:	e9d3 1300 	ldrd	r1, r3, [r3]
    e4aa:	440b      	add	r3, r1
    e4ac:	9300      	str	r3, [sp, #0]
			REGION_LIMIT_ADDR((regions[i]->start +
    e4ae:	f023 031f 	bic.w	r3, r3, #31
			reg_index++;
    e4b2:	1c44      	adds	r4, r0, #1
			REGION_LIMIT_ADDR((regions[i]->start +
    e4b4:	4453      	add	r3, sl
    e4b6:	eba3 0309 	sub.w	r3, r3, r9
				region_allocate_and_init(reg_index,
    e4ba:	b2e4      	uxtb	r4, r4
			REGION_LIMIT_ADDR((regions[i]->start +
    e4bc:	f023 031f 	bic.w	r3, r3, #31
	if (index > (get_num_regions() - 1)) {
    e4c0:	2c0f      	cmp	r4, #15
			fill_region.attr.r_limit =
    e4c2:	9303      	str	r3, [sp, #12]
    e4c4:	d908      	bls.n	e4d8 <mpu_configure_regions.constprop.2+0x184>
    e4c6:	4620      	mov	r0, r4
    e4c8:	f7ff ff28 	bl	e31c <region_allocate_and_init.part.0>
			if (reg_index == -EINVAL) {
    e4cc:	f110 0f16 	cmn.w	r0, #22
    e4d0:	4604      	mov	r4, r0
    e4d2:	d089      	beq.n	e3e8 <mpu_configure_regions.constprop.2+0x94>
			reg_index++;
    e4d4:	3401      	adds	r4, #1
    e4d6:	e7ac      	b.n	e432 <mpu_configure_regions.constprop.2+0xde>
	region_init(index, region_conf);
    e4d8:	4669      	mov	r1, sp
    e4da:	4620      	mov	r0, r4
    e4dc:	f7ff ff06 	bl	e2ec <region_init>
    e4e0:	e7f8      	b.n	e4d4 <mpu_configure_regions.constprop.2+0x180>
    e4e2:	bf00      	nop
    e4e4:	e000ed90 	.word	0xe000ed90
    e4e8:	00012550 	.word	0x00012550
    e4ec:	00012570 	.word	0x00012570
    e4f0:	00012e55 	.word	0x00012e55
    e4f4:	00012e32 	.word	0x00012e32

0000e4f8 <arm_core_mpu_enable>:
void arm_core_mpu_enable(void)
{
	/* Enable MPU and use the default memory map as a
	 * background region for privileged software access.
	 */
	MPU->CTRL = MPU_CTRL_ENABLE_Msk | MPU_CTRL_PRIVDEFENA_Msk;
    e4f8:	2205      	movs	r2, #5
    e4fa:	4b03      	ldr	r3, [pc, #12]	; (e508 <arm_core_mpu_enable+0x10>)
    e4fc:	605a      	str	r2, [r3, #4]
  __ASM volatile ("dsb 0xF":::"memory");
    e4fe:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    e502:	f3bf 8f6f 	isb	sy

	/* Make sure that all the registers are set before proceeding */
	__DSB();
	__ISB();
}
    e506:	4770      	bx	lr
    e508:	e000ed90 	.word	0xe000ed90

0000e50c <arm_core_mpu_disable>:
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
    e50c:	f3bf 8f5f 	dmb	sy
{
	/* Force any outstanding transfers to complete before disabling MPU */
	__DMB();

	/* Disable MPU */
	MPU->CTRL = 0;
    e510:	2200      	movs	r2, #0
    e512:	4b01      	ldr	r3, [pc, #4]	; (e518 <arm_core_mpu_disable+0xc>)
    e514:	605a      	str	r2, [r3, #4]
}
    e516:	4770      	bx	lr
    e518:	e000ed90 	.word	0xe000ed90

0000e51c <arm_mpu_init>:
 *
 * This function provides the default configuration mechanism for the Memory
 * Protection Unit (MPU).
 */
static int arm_mpu_init(struct device *arg)
{
    e51c:	b570      	push	{r4, r5, r6, lr}
	u32_t r_index;

	if (mpu_config.num_regions > get_num_regions()) {
    e51e:	4d0e      	ldr	r5, [pc, #56]	; (e558 <arm_mpu_init+0x3c>)
    e520:	682e      	ldr	r6, [r5, #0]
    e522:	2e10      	cmp	r6, #16
    e524:	d815      	bhi.n	e552 <arm_mpu_init+0x36>

	/* Architecture-specific configuration */
	mpu_init();

	/* Program fixed regions configured at SOC definition. */
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    e526:	2400      	movs	r4, #0
	arm_core_mpu_disable();
    e528:	f7ff fff0 	bl	e50c <arm_core_mpu_disable>
	MPU->MAIR0 =
    e52c:	4b0b      	ldr	r3, [pc, #44]	; (e55c <arm_mpu_init+0x40>)
    e52e:	4a0c      	ldr	r2, [pc, #48]	; (e560 <arm_mpu_init+0x44>)
    e530:	631a      	str	r2, [r3, #48]	; 0x30
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    e532:	42a6      	cmp	r6, r4
    e534:	d105      	bne.n	e542 <arm_mpu_init+0x26>
		region_init(r_index, &mpu_config.mpu_regions[r_index]);
	}

	/* Update the number of programmed MPU regions. */
	static_regions_num = mpu_config.num_regions;
    e536:	4b0b      	ldr	r3, [pc, #44]	; (e564 <arm_mpu_init+0x48>)
    e538:	701e      	strb	r6, [r3, #0]


	arm_core_mpu_enable();
    e53a:	f7ff ffdd 	bl	e4f8 <arm_core_mpu_enable>
	__ASSERT(
		(MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos ==
		DT_NUM_MPU_REGIONS,
		"Invalid number of MPU regions\n");
#endif /* CORTEX_M0PLUS || CPU_CORTEX_M3 || CPU_CORTEX_M4 */
	return 0;
    e53e:	2000      	movs	r0, #0
}
    e540:	bd70      	pop	{r4, r5, r6, pc}
		region_init(r_index, &mpu_config.mpu_regions[r_index]);
    e542:	6869      	ldr	r1, [r5, #4]
    e544:	4620      	mov	r0, r4
    e546:	eb01 1104 	add.w	r1, r1, r4, lsl #4
    e54a:	f7ff fecf 	bl	e2ec <region_init>
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    e54e:	3401      	adds	r4, #1
    e550:	e7ef      	b.n	e532 <arm_mpu_init+0x16>
		return -1;
    e552:	f04f 30ff 	mov.w	r0, #4294967295
    e556:	e7f3      	b.n	e540 <arm_mpu_init+0x24>
    e558:	000125b8 	.word	0x000125b8
    e55c:	e000ed90 	.word	0xe000ed90
    e560:	0044ffaa 	.word	0x0044ffaa
    e564:	2002432f 	.word	0x2002432f

0000e568 <arm_core_mpu_configure_static_mpu_regions>:
{
    e568:	b510      	push	{r4, lr}
static int mpu_configure_static_mpu_regions(const struct k_mem_partition
	*static_regions[], const u8_t regions_num,
	const u32_t background_area_base,
	const u32_t background_area_end)
{
	int mpu_reg_index = static_regions_num;
    e56a:	4c03      	ldr	r4, [pc, #12]	; (e578 <arm_core_mpu_configure_static_mpu_regions+0x10>)
	 * given boundaries.
	 */
	ARG_UNUSED(background_area_base);
	ARG_UNUSED(background_area_end);

	mpu_reg_index = mpu_configure_regions(static_regions,
    e56c:	7822      	ldrb	r2, [r4, #0]
    e56e:	f7ff fef1 	bl	e354 <mpu_configure_regions.constprop.2>
		regions_num, mpu_reg_index, true);

	static_regions_num = mpu_reg_index;
    e572:	7020      	strb	r0, [r4, #0]
}
    e574:	bd10      	pop	{r4, pc}
    e576:	bf00      	nop
    e578:	2002432f 	.word	0x2002432f

0000e57c <arm_core_mpu_mark_areas_for_dynamic_regions>:
{
    e57c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    e580:	4689      	mov	r9, r1
    e582:	4607      	mov	r7, r0
{
	/* In ARMv8-M architecture we need to store the index values
	 * and the default configuration of the MPU regions, inside
	 * which dynamic memory regions may be programmed at run-time.
	 */
	for (int i = 0; i < dyn_region_areas_num; i++) {
    e584:	2600      	movs	r6, #0
    e586:	f8df 8090 	ldr.w	r8, [pc, #144]	; e618 <arm_core_mpu_mark_areas_for_dynamic_regions+0x9c>
		if (dyn_reg_info[i].index == -EINVAL) {

			return -EINVAL;
		}

		if (dyn_reg_info[i].index >= static_regions_num) {
    e58a:	f8df a090 	ldr.w	sl, [pc, #144]	; e61c <arm_core_mpu_mark_areas_for_dynamic_regions+0xa0>
	MPU->RNR = index;
    e58e:	4c21      	ldr	r4, [pc, #132]	; (e614 <arm_core_mpu_mark_areas_for_dynamic_regions+0x98>)
	for (int i = 0; i < dyn_region_areas_num; i++) {
    e590:	454e      	cmp	r6, r9
    e592:	da19      	bge.n	e5c8 <arm_core_mpu_mark_areas_for_dynamic_regions+0x4c>
		if (dyn_region_areas[i].size == 0U) {
    e594:	f8d7 b004 	ldr.w	fp, [r7, #4]
    e598:	f1bb 0f00 	cmp.w	fp, #0
    e59c:	d036      	beq.n	e60c <arm_core_mpu_mark_areas_for_dynamic_regions+0x90>
			get_region_index(dyn_region_areas[i].start,
    e59e:	683b      	ldr	r3, [r7, #0]
	u32_t region_start_addr = arm_cmse_mpu_region_get(start);
    e5a0:	4618      	mov	r0, r3
    e5a2:	9301      	str	r3, [sp, #4]
    e5a4:	f002 fb42 	bl	10c2c <arm_cmse_mpu_region_get>
	u32_t region_end_addr = arm_cmse_mpu_region_get(start + size - 1);
    e5a8:	9b01      	ldr	r3, [sp, #4]
	u32_t region_start_addr = arm_cmse_mpu_region_get(start);
    e5aa:	4605      	mov	r5, r0
	u32_t region_end_addr = arm_cmse_mpu_region_get(start + size - 1);
    e5ac:	eb0b 0003 	add.w	r0, fp, r3
    e5b0:	3801      	subs	r0, #1
    e5b2:	f002 fb3b 	bl	10c2c <arm_cmse_mpu_region_get>
    e5b6:	2314      	movs	r3, #20
	if (region_start_addr == region_end_addr) {
    e5b8:	4285      	cmp	r5, r0
    e5ba:	fb03 f306 	mul.w	r3, r3, r6
    e5be:	d006      	beq.n	e5ce <arm_core_mpu_mark_areas_for_dynamic_regions+0x52>
		dyn_reg_info[i].index =
    e5c0:	f06f 0215 	mvn.w	r2, #21
    e5c4:	f848 2003 	str.w	r2, [r8, r3]
}
    e5c8:	b003      	add	sp, #12
    e5ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (dyn_reg_info[i].index == -EINVAL) {
    e5ce:	f115 0f16 	cmn.w	r5, #22
		dyn_reg_info[i].index =
    e5d2:	f848 5003 	str.w	r5, [r8, r3]
		if (dyn_reg_info[i].index == -EINVAL) {
    e5d6:	d0f7      	beq.n	e5c8 <arm_core_mpu_mark_areas_for_dynamic_regions+0x4c>
		if (dyn_reg_info[i].index >= static_regions_num) {
    e5d8:	f89a 2000 	ldrb.w	r2, [sl]
    e5dc:	42aa      	cmp	r2, r5
    e5de:	ddf3      	ble.n	e5c8 <arm_core_mpu_mark_areas_for_dynamic_regions+0x4c>
	MPU->RNR = index;
    e5e0:	60a5      	str	r5, [r4, #8]
	attr->rbar = MPU->RBAR &
    e5e2:	4443      	add	r3, r8
	MPU->RNR = index;
    e5e4:	60a5      	str	r5, [r4, #8]
	attr->rbar = MPU->RBAR &
    e5e6:	68e0      	ldr	r0, [r4, #12]
    e5e8:	7b19      	ldrb	r1, [r3, #12]
    e5ea:	f360 0104 	bfi	r1, r0, #0, #5
    e5ee:	7319      	strb	r1, [r3, #12]
	attr->mair_idx = (MPU->RLAR & MPU_RLAR_AttrIndx_Msk) >>
    e5f0:	6921      	ldr	r1, [r4, #16]
    e5f2:	7b18      	ldrb	r0, [r3, #12]
    e5f4:	0849      	lsrs	r1, r1, #1
    e5f6:	f361 1047 	bfi	r0, r1, #5, #3
    e5fa:	7318      	strb	r0, [r3, #12]
	region_conf->base = (MPU->RBAR & MPU_RBAR_BASE_Msk);
    e5fc:	68e2      	ldr	r2, [r4, #12]
    e5fe:	f022 021f 	bic.w	r2, r2, #31
    e602:	605a      	str	r2, [r3, #4]
	region_conf->attr.r_limit = MPU->RLAR & MPU_RLAR_LIMIT_Msk;
    e604:	6922      	ldr	r2, [r4, #16]
    e606:	f022 021f 	bic.w	r2, r2, #31
    e60a:	611a      	str	r2, [r3, #16]
	for (int i = 0; i < dyn_region_areas_num; i++) {
    e60c:	3601      	adds	r6, #1
    e60e:	370c      	adds	r7, #12
    e610:	e7be      	b.n	e590 <arm_core_mpu_mark_areas_for_dynamic_regions+0x14>
    e612:	bf00      	nop
    e614:	e000ed90 	.word	0xe000ed90
    e618:	20020158 	.word	0x20020158
    e61c:	2002432f 	.word	0x2002432f

0000e620 <arm_core_mpu_configure_dynamic_mpu_regions>:
{
    e620:	b570      	push	{r4, r5, r6, lr}
 * performed, the error signal is propagated to the caller of the function.
 */
static int mpu_configure_dynamic_mpu_regions(const struct k_mem_partition
	*dynamic_regions[], u8_t regions_num)
{
	int mpu_reg_index = static_regions_num;
    e622:	4b0c      	ldr	r3, [pc, #48]	; (e654 <arm_core_mpu_configure_dynamic_mpu_regions+0x34>)
    e624:	460e      	mov	r6, r1
    e626:	781c      	ldrb	r4, [r3, #0]
    e628:	4605      	mov	r5, r0
    e62a:	4623      	mov	r3, r4
  mpu->RLAR = 0U;
    e62c:	2100      	movs	r1, #0
  mpu->RNR = rnr;
    e62e:	4a0a      	ldr	r2, [pc, #40]	; (e658 <arm_core_mpu_configure_dynamic_mpu_regions+0x38>)

	/* Disable all MPU regions except for the static ones. */
	for (int i = mpu_reg_index; i < get_num_regions(); i++) {
    e630:	2b0f      	cmp	r3, #15
    e632:	dd0b      	ble.n	e64c <arm_core_mpu_configure_dynamic_mpu_regions+0x2c>

	/* Reset MPU regions inside which dynamic memory regions may
	 * be programmed.
	 */
	for (int i = 0; i < MPU_DYNAMIC_REGION_AREAS_NUM; i++) {
		region_init(dyn_reg_info[i].index,
    e634:	4b09      	ldr	r3, [pc, #36]	; (e65c <arm_core_mpu_configure_dynamic_mpu_regions+0x3c>)
    e636:	1d19      	adds	r1, r3, #4
    e638:	6818      	ldr	r0, [r3, #0]
    e63a:	f7ff fe57 	bl	e2ec <region_init>
	/* In ARMv8-M architecture the dynamic regions are programmed on SRAM,
	 * forming a full partition of the background area, specified by the
	 * given boundaries.
	 */

	mpu_reg_index = mpu_configure_regions(dynamic_regions,
    e63e:	4622      	mov	r2, r4
    e640:	4631      	mov	r1, r6
    e642:	4628      	mov	r0, r5
}
    e644:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    e648:	f7ff be84 	b.w	e354 <mpu_configure_regions.constprop.2>
    e64c:	6093      	str	r3, [r2, #8]
  mpu->RLAR = 0U;
    e64e:	6111      	str	r1, [r2, #16]
	for (int i = mpu_reg_index; i < get_num_regions(); i++) {
    e650:	3301      	adds	r3, #1
    e652:	e7ed      	b.n	e630 <arm_core_mpu_configure_dynamic_mpu_regions+0x10>
    e654:	2002432f 	.word	0x2002432f
    e658:	e000ed90 	.word	0xe000ed90
    e65c:	20020158 	.word	0x20020158

0000e660 <z_prf>:
	*sptr = p;
	return i;
}

int z_prf(int (*func)(), void *dest, const char *format, va_list vargs)
{
    e660:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    e664:	461e      	mov	r6, r3
	struct zero_padding zero;
	VALTYPE val;

#define PUTC(c)	do { if ((*func)(c, dest) == EOF) return EOF; } while (false)

	count = 0;
    e666:	2300      	movs	r3, #0
{
    e668:	b09d      	sub	sp, #116	; 0x74
    e66a:	e9cd 0102 	strd	r0, r1, [sp, #8]
	count = 0;
    e66e:	9301      	str	r3, [sp, #4]

	while ((c = *format++)) {
    e670:	7810      	ldrb	r0, [r2, #0]
    e672:	1c53      	adds	r3, r2, #1
    e674:	9306      	str	r3, [sp, #24]
    e676:	b158      	cbz	r0, e690 <z_prf+0x30>
		if (c != '%') {
    e678:	2825      	cmp	r0, #37	; 0x25
    e67a:	f000 8089 	beq.w	e790 <z_prf+0x130>
			PUTC(c);
    e67e:	9903      	ldr	r1, [sp, #12]
    e680:	9b02      	ldr	r3, [sp, #8]
    e682:	4798      	blx	r3
    e684:	3001      	adds	r0, #1
    e686:	f040 840b 	bne.w	eea0 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x440>
    e68a:	f04f 33ff 	mov.w	r3, #4294967295
    e68e:	9301      	str	r3, [sp, #4]
		}
	}
	return count;

#undef PUTC
}
    e690:	9801      	ldr	r0, [sp, #4]
    e692:	b01d      	add	sp, #116	; 0x74
    e694:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				switch (c) {
    e698:	2c23      	cmp	r4, #35	; 0x23
    e69a:	d070      	beq.n	e77e <z_prf+0x11e>
    e69c:	d865      	bhi.n	e76a <z_prf+0x10a>
    e69e:	2c00      	cmp	r4, #0
    e6a0:	d0f6      	beq.n	e690 <z_prf+0x30>
					fspace = true;
    e6a2:	2c20      	cmp	r4, #32
    e6a4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    e6a6:	bf08      	it	eq
    e6a8:	2301      	moveq	r3, #1
    e6aa:	930c      	str	r3, [sp, #48]	; 0x30
					fplus = true;
    e6ac:	f8cd 8018 	str.w	r8, [sp, #24]
			while (strchr("-+ #0", (c = *format++)) != NULL) {
    e6b0:	f8dd 8018 	ldr.w	r8, [sp, #24]
    e6b4:	48bb      	ldr	r0, [pc, #748]	; (e9a4 <z_prf+0x344>)
    e6b6:	f818 4b01 	ldrb.w	r4, [r8], #1
    e6ba:	4621      	mov	r1, r4
    e6bc:	f003 f9ff 	bl	11abe <strchr>
    e6c0:	2800      	cmp	r0, #0
    e6c2:	d1e9      	bne.n	e698 <z_prf+0x38>
			if (c == '*') {
    e6c4:	2c2a      	cmp	r4, #42	; 0x2a
    e6c6:	d16a      	bne.n	e79e <z_prf+0x13e>
				width = va_arg(vargs, int);
    e6c8:	6832      	ldr	r2, [r6, #0]
    e6ca:	1d33      	adds	r3, r6, #4
				if (width < 0) {
    e6cc:	2a00      	cmp	r2, #0
				width = va_arg(vargs, int);
    e6ce:	9207      	str	r2, [sp, #28]
					width = -width;
    e6d0:	bfbe      	ittt	lt
    e6d2:	4252      	neglt	r2, r2
    e6d4:	9207      	strlt	r2, [sp, #28]
					fminus = true;
    e6d6:	2201      	movlt	r2, #1
				width = va_arg(vargs, int);
    e6d8:	461e      	mov	r6, r3
					fminus = true;
    e6da:	bfb8      	it	lt
    e6dc:	920d      	strlt	r2, [sp, #52]	; 0x34
				c = *format++;
    e6de:	9a06      	ldr	r2, [sp, #24]
    e6e0:	7854      	ldrb	r4, [r2, #1]
    e6e2:	f102 0802 	add.w	r8, r2, #2
			if (c == '.') {
    e6e6:	2c2e      	cmp	r4, #46	; 0x2e
    e6e8:	d17e      	bne.n	e7e8 <z_prf+0x188>
				if (c == '*') {
    e6ea:	f898 3000 	ldrb.w	r3, [r8]
    e6ee:	2b2a      	cmp	r3, #42	; 0x2a
    e6f0:	d177      	bne.n	e7e2 <z_prf+0x182>
					precision = va_arg(vargs, int);
    e6f2:	6835      	ldr	r5, [r6, #0]
				c = *format++;
    e6f4:	f108 0801 	add.w	r8, r8, #1
					precision = va_arg(vargs, int);
    e6f8:	3604      	adds	r6, #4
				c = *format++;
    e6fa:	f898 4000 	ldrb.w	r4, [r8]
    e6fe:	f108 0801 	add.w	r8, r8, #1
			if (strchr("hlz", c) != NULL) {
    e702:	4621      	mov	r1, r4
    e704:	48a8      	ldr	r0, [pc, #672]	; (e9a8 <z_prf+0x348>)
    e706:	4627      	mov	r7, r4
    e708:	f003 f9d9 	bl	11abe <strchr>
    e70c:	2800      	cmp	r0, #0
    e70e:	d06e      	beq.n	e7ee <z_prf+0x18e>
				c = *format++;
    e710:	f108 0301 	add.w	r3, r8, #1
				} else if (i == 'h' && c == 'h') {
    e714:	2f68      	cmp	r7, #104	; 0x68
				c = *format++;
    e716:	9306      	str	r3, [sp, #24]
    e718:	f898 4000 	ldrb.w	r4, [r8]
				} else if (i == 'h' && c == 'h') {
    e71c:	d107      	bne.n	e72e <z_prf+0xce>
    e71e:	2c68      	cmp	r4, #104	; 0x68
    e720:	d105      	bne.n	e72e <z_prf+0xce>
					i = 'H';
    e722:	2748      	movs	r7, #72	; 0x48
					c = *format++;
    e724:	f108 0302 	add.w	r3, r8, #2
    e728:	f898 4001 	ldrb.w	r4, [r8, #1]
    e72c:	9306      	str	r3, [sp, #24]
			switch (c) {
    e72e:	2c67      	cmp	r4, #103	; 0x67
    e730:	d87c      	bhi.n	e82c <z_prf+0x1cc>
    e732:	2c65      	cmp	r4, #101	; 0x65
    e734:	f080 813a 	bcs.w	e9ac <z_prf+0x34c>
    e738:	2c47      	cmp	r4, #71	; 0x47
    e73a:	d85c      	bhi.n	e7f6 <z_prf+0x196>
    e73c:	2c45      	cmp	r4, #69	; 0x45
    e73e:	f080 8135 	bcs.w	e9ac <z_prf+0x34c>
    e742:	2c00      	cmp	r4, #0
    e744:	d0a4      	beq.n	e690 <z_prf+0x30>
    e746:	2c25      	cmp	r4, #37	; 0x25
    e748:	f000 83a6 	beq.w	ee98 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x438>
				PUTC('%');
    e74c:	9903      	ldr	r1, [sp, #12]
    e74e:	2025      	movs	r0, #37	; 0x25
    e750:	9b02      	ldr	r3, [sp, #8]
    e752:	4798      	blx	r3
    e754:	3001      	adds	r0, #1
    e756:	d098      	beq.n	e68a <z_prf+0x2a>
				PUTC(c);
    e758:	9903      	ldr	r1, [sp, #12]
    e75a:	4620      	mov	r0, r4
    e75c:	9b02      	ldr	r3, [sp, #8]
    e75e:	4798      	blx	r3
    e760:	3001      	adds	r0, #1
    e762:	d092      	beq.n	e68a <z_prf+0x2a>
				count += 2;
    e764:	9b01      	ldr	r3, [sp, #4]
    e766:	3302      	adds	r3, #2
    e768:	e39c      	b.n	eea4 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x444>
				switch (c) {
    e76a:	2c2d      	cmp	r4, #45	; 0x2d
    e76c:	d00d      	beq.n	e78a <z_prf+0x12a>
    e76e:	2c30      	cmp	r4, #48	; 0x30
    e770:	d008      	beq.n	e784 <z_prf+0x124>
					fplus = true;
    e772:	2c2b      	cmp	r4, #43	; 0x2b
    e774:	9b09      	ldr	r3, [sp, #36]	; 0x24
    e776:	bf08      	it	eq
    e778:	2301      	moveq	r3, #1
    e77a:	9309      	str	r3, [sp, #36]	; 0x24
    e77c:	e796      	b.n	e6ac <z_prf+0x4c>
					falt = true;
    e77e:	2301      	movs	r3, #1
    e780:	9305      	str	r3, [sp, #20]
					break;
    e782:	e793      	b.n	e6ac <z_prf+0x4c>
					fzero = true;
    e784:	2301      	movs	r3, #1
    e786:	9308      	str	r3, [sp, #32]
					break;
    e788:	e790      	b.n	e6ac <z_prf+0x4c>
					fminus = true;
    e78a:	2301      	movs	r3, #1
    e78c:	930d      	str	r3, [sp, #52]	; 0x34
    e78e:	e78d      	b.n	e6ac <z_prf+0x4c>
			fminus = fplus = fspace = falt = fzero = false;
    e790:	2300      	movs	r3, #0
    e792:	9308      	str	r3, [sp, #32]
    e794:	930c      	str	r3, [sp, #48]	; 0x30
    e796:	9309      	str	r3, [sp, #36]	; 0x24
    e798:	930d      	str	r3, [sp, #52]	; 0x34
    e79a:	9305      	str	r3, [sp, #20]
    e79c:	e788      	b.n	e6b0 <z_prf+0x50>
			(((unsigned)c) <= (unsigned)'~'));
}

static inline int isdigit(int a)
{
	return (int)(((unsigned)(a)-(unsigned)'0') < 10U);
    e79e:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
			} else if (!isdigit(c)) {
    e7a2:	2b09      	cmp	r3, #9
				width = 0;
    e7a4:	9007      	str	r0, [sp, #28]
			} else if (!isdigit(c)) {
    e7a6:	d89e      	bhi.n	e6e6 <z_prf+0x86>
		i = 10 * i + *p++ - '0';
    e7a8:	220a      	movs	r2, #10
	while (isdigit(*p)) {
    e7aa:	f8dd 8018 	ldr.w	r8, [sp, #24]
    e7ae:	f818 4b01 	ldrb.w	r4, [r8], #1
    e7b2:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
    e7b6:	2b09      	cmp	r3, #9
    e7b8:	d895      	bhi.n	e6e6 <z_prf+0x86>
		i = 10 * i + *p++ - '0';
    e7ba:	9b07      	ldr	r3, [sp, #28]
    e7bc:	fb02 4403 	mla	r4, r2, r3, r4
    e7c0:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
    e7c4:	e9cd 8306 	strd	r8, r3, [sp, #24]
    e7c8:	e7ef      	b.n	e7aa <z_prf+0x14a>
    e7ca:	4690      	mov	r8, r2
    e7cc:	fb01 3505 	mla	r5, r1, r5, r3
    e7d0:	3d30      	subs	r5, #48	; 0x30
	while (isdigit(*p)) {
    e7d2:	4642      	mov	r2, r8
    e7d4:	f812 3b01 	ldrb.w	r3, [r2], #1
    e7d8:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
    e7dc:	2809      	cmp	r0, #9
    e7de:	d9f4      	bls.n	e7ca <z_prf+0x16a>
    e7e0:	e78b      	b.n	e6fa <z_prf+0x9a>
	int i = 0;
    e7e2:	2500      	movs	r5, #0
		i = 10 * i + *p++ - '0';
    e7e4:	210a      	movs	r1, #10
    e7e6:	e7f4      	b.n	e7d2 <z_prf+0x172>
			precision = -1;
    e7e8:	f04f 35ff 	mov.w	r5, #4294967295
    e7ec:	e789      	b.n	e702 <z_prf+0xa2>
    e7ee:	f8cd 8018 	str.w	r8, [sp, #24]
			i = 0;
    e7f2:	4607      	mov	r7, r0
    e7f4:	e79b      	b.n	e72e <z_prf+0xce>
			switch (c) {
    e7f6:	2c63      	cmp	r4, #99	; 0x63
    e7f8:	d059      	beq.n	e8ae <z_prf+0x24e>
    e7fa:	d821      	bhi.n	e840 <z_prf+0x1e0>
    e7fc:	2c58      	cmp	r4, #88	; 0x58
    e7fe:	d1a5      	bne.n	e74c <z_prf+0xec>
    e800:	1d33      	adds	r3, r6, #4
				if (c == 'o') {
    e802:	2c6f      	cmp	r4, #111	; 0x6f
    e804:	9304      	str	r3, [sp, #16]
    e806:	6831      	ldr	r1, [r6, #0]
    e808:	af15      	add	r7, sp, #84	; 0x54
    e80a:	f040 831b 	bne.w	ee44 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x3e4>
	if (alt_form) {
    e80e:	9b05      	ldr	r3, [sp, #20]
    e810:	2b00      	cmp	r3, #0
    e812:	f000 830b 	beq.w	ee2c <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x3cc>
		*buf++ = '0';
    e816:	2330      	movs	r3, #48	; 0x30
    e818:	f88d 3054 	strb.w	r3, [sp, #84]	; 0x54
		if (!value) {
    e81c:	2900      	cmp	r1, #0
    e81e:	f040 830e 	bne.w	ee3e <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x3de>
			*buf++ = 0;
    e822:	f88d 1055 	strb.w	r1, [sp, #85]	; 0x55
			prefix = 0;
    e826:	468b      	mov	fp, r1
			return 1;
    e828:	2701      	movs	r7, #1
    e82a:	e026      	b.n	e87a <z_prf+0x21a>
			switch (c) {
    e82c:	2c70      	cmp	r4, #112	; 0x70
    e82e:	f000 82e8 	beq.w	ee02 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x3a2>
    e832:	d827      	bhi.n	e884 <z_prf+0x224>
    e834:	2c6e      	cmp	r4, #110	; 0x6e
    e836:	f000 82cf 	beq.w	edd8 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x378>
    e83a:	d8e1      	bhi.n	e800 <z_prf+0x1a0>
    e83c:	2c69      	cmp	r4, #105	; 0x69
    e83e:	d185      	bne.n	e74c <z_prf+0xec>
    e840:	6834      	ldr	r4, [r6, #0]
    e842:	1d33      	adds	r3, r6, #4
	if (value < 0) {
    e844:	2c00      	cmp	r4, #0
    e846:	9304      	str	r3, [sp, #16]
    e848:	f280 809e 	bge.w	e988 <z_prf+0x328>
		*buf++ = '-';
    e84c:	232d      	movs	r3, #45	; 0x2d
		value = -value;
    e84e:	4261      	negs	r1, r4
		*buf++ = '-';
    e850:	f88d 3054 	strb.w	r3, [sp, #84]	; 0x54
		*buf++ = ' ';
    e854:	f10d 0755 	add.w	r7, sp, #85	; 0x55
	return _to_x(buf, value, 10);
    e858:	4638      	mov	r0, r7
    e85a:	220a      	movs	r2, #10
    e85c:	f003 f998 	bl	11b90 <_to_x>
				if (fplus || fspace || val < 0) {
    e860:	9b09      	ldr	r3, [sp, #36]	; 0x24
	return (buf + _to_udec(buf, value)) - start;
    e862:	4407      	add	r7, r0
    e864:	a815      	add	r0, sp, #84	; 0x54
    e866:	1a3f      	subs	r7, r7, r0
				if (fplus || fspace || val < 0) {
    e868:	2b00      	cmp	r3, #0
    e86a:	f040 831e 	bne.w	eeaa <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x44a>
    e86e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    e870:	2b00      	cmp	r3, #0
    e872:	f040 831a 	bne.w	eeaa <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x44a>
    e876:	ea4f 7bd4 	mov.w	fp, r4, lsr #31
			if (precision >= 0) {
    e87a:	2d00      	cmp	r5, #0
    e87c:	f2c0 831a 	blt.w	eeb4 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x454>
    e880:	ae15      	add	r6, sp, #84	; 0x54
    e882:	e01e      	b.n	e8c2 <z_prf+0x262>
			switch (c) {
    e884:	2c75      	cmp	r4, #117	; 0x75
    e886:	d0bb      	beq.n	e800 <z_prf+0x1a0>
    e888:	2c78      	cmp	r4, #120	; 0x78
    e88a:	d0b9      	beq.n	e800 <z_prf+0x1a0>
    e88c:	2c73      	cmp	r4, #115	; 0x73
    e88e:	f47f af5d 	bne.w	e74c <z_prf+0xec>
					precision = INT_MAX;
    e892:	2d00      	cmp	r5, #0
    e894:	bfb8      	it	lt
    e896:	f06f 4500 	mvnlt.w	r5, #2147483648	; 0x80000000
				for (clen = 0; clen < precision; clen++) {
    e89a:	2700      	movs	r7, #0
				cptr = va_arg(vargs, char *);
    e89c:	1d33      	adds	r3, r6, #4
    e89e:	6836      	ldr	r6, [r6, #0]
    e8a0:	9304      	str	r3, [sp, #16]
				for (clen = 0; clen < precision; clen++) {
    e8a2:	42bd      	cmp	r5, r7
    e8a4:	f040 82bd 	bne.w	ee22 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x3c2>
    e8a8:	2500      	movs	r5, #0
    e8aa:	46ab      	mov	fp, r5
    e8ac:	e009      	b.n	e8c2 <z_prf+0x262>
				break;
    e8ae:	f04f 0b00 	mov.w	fp, #0
				clen = 1;
    e8b2:	2701      	movs	r7, #1
				break;
    e8b4:	465d      	mov	r5, fp
				buf[0] = va_arg(vargs, int);
    e8b6:	1d33      	adds	r3, r6, #4
    e8b8:	9304      	str	r3, [sp, #16]
    e8ba:	6833      	ldr	r3, [r6, #0]
    e8bc:	ae1c      	add	r6, sp, #112	; 0x70
    e8be:	f806 3d1c 	strb.w	r3, [r6, #-28]!
				zero_head = precision - clen + prefix;
    e8c2:	eba5 0a07 	sub.w	sl, r5, r7
			zero.predot = zero.postdot = zero.trail = 0;
    e8c6:	2500      	movs	r5, #0
    e8c8:	46a8      	mov	r8, r5
    e8ca:	46a9      	mov	r9, r5
				zero_head = precision - clen + prefix;
    e8cc:	44da      	add	sl, fp
    e8ce:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
			width -= clen + zero_head;
    e8d2:	9b07      	ldr	r3, [sp, #28]
    e8d4:	eb0a 0407 	add.w	r4, sl, r7
    e8d8:	1b1c      	subs	r4, r3, r4
			if (!fminus && width > 0) {
    e8da:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    e8dc:	b913      	cbnz	r3, e8e4 <z_prf+0x284>
    e8de:	2c00      	cmp	r4, #0
    e8e0:	f300 8307 	bgt.w	eef2 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x492>
    e8e4:	eb06 030b 	add.w	r3, r6, fp
			while (prefix-- > 0) {
    e8e8:	429e      	cmp	r6, r3
    e8ea:	f040 8304 	bne.w	eef6 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x496>
    e8ee:	4653      	mov	r3, sl
			while (zero_head-- > 0) {
    e8f0:	f113 33ff 	adds.w	r3, r3, #4294967295
    e8f4:	f080 830b 	bcs.w	ef0e <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x4ae>
			clen -= prefix;
    e8f8:	eba7 070b 	sub.w	r7, r7, fp
			if (zero.predot) {
    e8fc:	f1b9 0f00 	cmp.w	r9, #0
    e900:	f000 832a 	beq.w	ef58 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x4f8>
				c = *cptr;
    e904:	7830      	ldrb	r0, [r6, #0]
    e906:	19f2      	adds	r2, r6, r7
    e908:	f1a0 0130 	sub.w	r1, r0, #48	; 0x30
				while (isdigit(c)) {
    e90c:	2909      	cmp	r1, #9
    e90e:	eba2 0306 	sub.w	r3, r2, r6
    e912:	f240 8307 	bls.w	ef24 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x4c4>
    e916:	464a      	mov	r2, r9
				while (zero.predot-- > 0) {
    e918:	2a00      	cmp	r2, #0
    e91a:	f040 830e 	bne.w	ef3a <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x4da>
				clen -= zero.predot;
    e91e:	eba3 0909 	sub.w	r9, r3, r9
			if (zero.postdot) {
    e922:	f1b8 0f00 	cmp.w	r8, #0
    e926:	d018      	beq.n	e95a <z_prf+0x2fa>
    e928:	eb06 0309 	add.w	r3, r6, r9
					c = *cptr++;
    e92c:	f816 2b01 	ldrb.w	r2, [r6], #1
    e930:	9307      	str	r3, [sp, #28]
					PUTC(c);
    e932:	9903      	ldr	r1, [sp, #12]
    e934:	4610      	mov	r0, r2
    e936:	9b02      	ldr	r3, [sp, #8]
    e938:	9205      	str	r2, [sp, #20]
    e93a:	4798      	blx	r3
    e93c:	3001      	adds	r0, #1
    e93e:	f43f aea4 	beq.w	e68a <z_prf+0x2a>
				} while (c != '.');
    e942:	9a05      	ldr	r2, [sp, #20]
    e944:	9b07      	ldr	r3, [sp, #28]
    e946:	2a2e      	cmp	r2, #46	; 0x2e
    e948:	eba3 0906 	sub.w	r9, r3, r6
    e94c:	d1ee      	bne.n	e92c <z_prf+0x2cc>
    e94e:	4643      	mov	r3, r8
				while (zero.postdot-- > 0) {
    e950:	2b00      	cmp	r3, #0
    e952:	f300 8303 	bgt.w	ef5c <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x4fc>
				clen -= zero.postdot;
    e956:	eba9 0908 	sub.w	r9, r9, r8
			if (zero.trail) {
    e95a:	b19d      	cbz	r5, e984 <z_prf+0x324>
				c = *cptr;
    e95c:	7830      	ldrb	r0, [r6, #0]
    e95e:	eb06 0809 	add.w	r8, r6, r9
    e962:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
				while (isdigit(c) || c == '.') {
    e966:	2b09      	cmp	r3, #9
    e968:	eba8 0906 	sub.w	r9, r8, r6
    e96c:	f240 8303 	bls.w	ef76 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x516>
    e970:	282e      	cmp	r0, #46	; 0x2e
    e972:	f000 8300 	beq.w	ef76 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x516>
    e976:	46a8      	mov	r8, r5
				while (zero.trail-- > 0) {
    e978:	f1b8 0f00 	cmp.w	r8, #0
    e97c:	f300 8304 	bgt.w	ef88 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x528>
				clen -= zero.trail;
    e980:	eba9 0905 	sub.w	r9, r9, r5
    e984:	44b1      	add	r9, r6
    e986:	e312      	b.n	efae <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x54e>
	} else if (fplus) {
    e988:	9b09      	ldr	r3, [sp, #36]	; 0x24
    e98a:	b123      	cbz	r3, e996 <z_prf+0x336>
		*buf++ = '+';
    e98c:	232b      	movs	r3, #43	; 0x2b
		*buf++ = ' ';
    e98e:	f88d 3054 	strb.w	r3, [sp, #84]	; 0x54
    e992:	4621      	mov	r1, r4
    e994:	e75e      	b.n	e854 <z_prf+0x1f4>
	} else if (fspace) {
    e996:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    e998:	b10b      	cbz	r3, e99e <z_prf+0x33e>
		*buf++ = ' ';
    e99a:	2320      	movs	r3, #32
    e99c:	e7f7      	b.n	e98e <z_prf+0x32e>
	} else if (fspace) {
    e99e:	4621      	mov	r1, r4
    e9a0:	af15      	add	r7, sp, #84	; 0x54
    e9a2:	e759      	b.n	e858 <z_prf+0x1f8>
    e9a4:	00012e9e 	.word	0x00012e9e
    e9a8:	00012ea4 	.word	0x00012ea4
				u.d = va_arg(vargs, double);
    e9ac:	3607      	adds	r6, #7
    e9ae:	f026 0607 	bic.w	r6, r6, #7
				double_val = u.i;
    e9b2:	e9d6 0100 	ldrd	r0, r1, [r6]
	fract = (double_temp << 11) & ~HIGHBIT64;
    e9b6:	02c2      	lsls	r2, r0, #11
    e9b8:	4690      	mov	r8, r2
				u.d = va_arg(vargs, double);
    e9ba:	f106 0308 	add.w	r3, r6, #8
    e9be:	9304      	str	r3, [sp, #16]
	fract = (double_temp << 11) & ~HIGHBIT64;
    e9c0:	02cb      	lsls	r3, r1, #11
    e9c2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
	if (sign) {
    e9c6:	2800      	cmp	r0, #0
	fract = (double_temp << 11) & ~HIGHBIT64;
    e9c8:	f023 4900 	bic.w	r9, r3, #2147483648	; 0x80000000
	if (sign) {
    e9cc:	f171 0300 	sbcs.w	r3, r1, #0
	exp = double_temp >> 52 & 0x7ff;
    e9d0:	f3c1 560a 	ubfx	r6, r1, #20, #11
	fract = (double_temp << 11) & ~HIGHBIT64;
    e9d4:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
	if (sign) {
    e9d8:	da42      	bge.n	ea60 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1>
		*buf++ = '-';
    e9da:	212d      	movs	r1, #45	; 0x2d
		*buf++ = ' ';
    e9dc:	f88d 1054 	strb.w	r1, [sp, #84]	; 0x54
    e9e0:	f10d 0755 	add.w	r7, sp, #85	; 0x55
	if (exp == 0x7ff) {
    e9e4:	f240 71ff 	movw	r1, #2047	; 0x7ff
    e9e8:	428e      	cmp	r6, r1
    e9ea:	d154      	bne.n	ea96 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x36>
		if (!fract) {
    e9ec:	ea58 0309 	orrs.w	r3, r8, r9
    e9f0:	f1a4 0441 	sub.w	r4, r4, #65	; 0x41
    e9f4:	f107 0003 	add.w	r0, r7, #3
    e9f8:	d142      	bne.n	ea80 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x20>
			if (isupper(c)) {
    e9fa:	2c19      	cmp	r4, #25
    e9fc:	d83a      	bhi.n	ea74 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x14>
				*buf++ = 'I';
    e9fe:	2349      	movs	r3, #73	; 0x49
    ea00:	703b      	strb	r3, [r7, #0]
				*buf++ = 'N';
    ea02:	234e      	movs	r3, #78	; 0x4e
    ea04:	707b      	strb	r3, [r7, #1]
				*buf++ = 'F';
    ea06:	2346      	movs	r3, #70	; 0x46
		*buf = 0;
    ea08:	2500      	movs	r5, #0
			zero.predot = zero.postdot = zero.trail = 0;
    ea0a:	46a8      	mov	r8, r5
    ea0c:	46a9      	mov	r9, r5
				*buf++ = 'n';
    ea0e:	70bb      	strb	r3, [r7, #2]
		*buf = 0;
    ea10:	70fd      	strb	r5, [r7, #3]
		return buf - start;
    ea12:	af15      	add	r7, sp, #84	; 0x54
    ea14:	1bc0      	subs	r0, r0, r7
				if (fplus || fspace || (buf[0] == '-')) {
    ea16:	9b09      	ldr	r3, [sp, #36]	; 0x24
    ea18:	2b00      	cmp	r3, #0
    ea1a:	f040 81da 	bne.w	edd2 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x372>
    ea1e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    ea20:	2b00      	cmp	r3, #0
    ea22:	f040 81d6 	bne.w	edd2 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x372>
    ea26:	f89d b054 	ldrb.w	fp, [sp, #84]	; 0x54
    ea2a:	f1ab 032d 	sub.w	r3, fp, #45	; 0x2d
    ea2e:	f1d3 0b00 	rsbs	fp, r3, #0
    ea32:	eb4b 0b03 	adc.w	fp, fp, r3
				if (!isdigit(buf[prefix])) {
    ea36:	ab1c      	add	r3, sp, #112	; 0x70
    ea38:	445b      	add	r3, fp
    ea3a:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
				clen += zero.predot + zero.postdot + zero.trail;
    ea3e:	eb08 0709 	add.w	r7, r8, r9
    ea42:	3b30      	subs	r3, #48	; 0x30
    ea44:	442f      	add	r7, r5
				if (!isdigit(buf[prefix])) {
    ea46:	2b09      	cmp	r3, #9
				clen += zero.predot + zero.postdot + zero.trail;
    ea48:	4407      	add	r7, r0
				if (!isdigit(buf[prefix])) {
    ea4a:	f200 8237 	bhi.w	eebc <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x45c>
			} else if (fzero) {
    ea4e:	9b08      	ldr	r3, [sp, #32]
    ea50:	2b00      	cmp	r3, #0
    ea52:	f000 8239 	beq.w	eec8 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x468>
				zero_head = width - clen;
    ea56:	9b07      	ldr	r3, [sp, #28]
    ea58:	ae15      	add	r6, sp, #84	; 0x54
    ea5a:	eba3 0a07 	sub.w	sl, r3, r7
    ea5e:	e736      	b.n	e8ce <z_prf+0x26e>
	} else if (fplus) {
    ea60:	9b09      	ldr	r3, [sp, #36]	; 0x24
    ea62:	b10b      	cbz	r3, ea68 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x8>
		*buf++ = '+';
    ea64:	212b      	movs	r1, #43	; 0x2b
    ea66:	e7b9      	b.n	e9dc <z_prf+0x37c>
	} else if (fspace) {
    ea68:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    ea6a:	b10b      	cbz	r3, ea70 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x10>
		*buf++ = ' ';
    ea6c:	2120      	movs	r1, #32
    ea6e:	e7b5      	b.n	e9dc <z_prf+0x37c>
	} else if (fspace) {
    ea70:	af15      	add	r7, sp, #84	; 0x54
    ea72:	e7b7      	b.n	e9e4 <z_prf+0x384>
				*buf++ = 'i';
    ea74:	2369      	movs	r3, #105	; 0x69
    ea76:	703b      	strb	r3, [r7, #0]
				*buf++ = 'n';
    ea78:	236e      	movs	r3, #110	; 0x6e
    ea7a:	707b      	strb	r3, [r7, #1]
				*buf++ = 'f';
    ea7c:	2366      	movs	r3, #102	; 0x66
    ea7e:	e7c3      	b.n	ea08 <z_prf+0x3a8>
			if (isupper(c)) {
    ea80:	2c19      	cmp	r4, #25
				*buf++ = 'N';
    ea82:	bf99      	ittee	ls
    ea84:	234e      	movls	r3, #78	; 0x4e
				*buf++ = 'A';
    ea86:	2241      	movls	r2, #65	; 0x41
				*buf++ = 'n';
    ea88:	236e      	movhi	r3, #110	; 0x6e
				*buf++ = 'a';
    ea8a:	2261      	movhi	r2, #97	; 0x61
				*buf++ = 'N';
    ea8c:	bf94      	ite	ls
    ea8e:	703b      	strbls	r3, [r7, #0]
				*buf++ = 'n';
    ea90:	703b      	strbhi	r3, [r7, #0]
				*buf++ = 'a';
    ea92:	707a      	strb	r2, [r7, #1]
    ea94:	e7b8      	b.n	ea08 <z_prf+0x3a8>
		c = 'f';
    ea96:	2c46      	cmp	r4, #70	; 0x46
	if ((exp | fract) != 0) {
    ea98:	ea48 0006 	orr.w	r0, r8, r6
    ea9c:	ea49 71e6 	orr.w	r1, r9, r6, asr #31
		c = 'f';
    eaa0:	bf08      	it	eq
    eaa2:	2466      	moveq	r4, #102	; 0x66
	if ((exp | fract) != 0) {
    eaa4:	ea50 0301 	orrs.w	r3, r0, r1
    eaa8:	f000 80da 	beq.w	ec60 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x200>
		if (exp == 0) {
    eaac:	2e00      	cmp	r6, #0
    eaae:	d07a      	beq.n	eba6 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x146>
		fract |= HIGHBIT64;
    eab0:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
    eab4:	4610      	mov	r0, r2
		exp -= (1023 - 1);	/* +1 since .1 vs 1. */
    eab6:	f2a6 38fe 	subw	r8, r6, #1022	; 0x3fe
		fract |= HIGHBIT64;
    eaba:	2600      	movs	r6, #0
    eabc:	f043 4100 	orr.w	r1, r3, #2147483648	; 0x80000000
    eac0:	f10d 0970 	add.w	r9, sp, #112	; 0x70
    eac4:	e969 010c 	strd	r0, r1, [r9, #-48]!	; 0x30
	while (exp <= -3) {
    eac8:	f118 0f02 	cmn.w	r8, #2
    eacc:	db7a      	blt.n	ebc4 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x164>
		while ((fract >> 32) <= (MAXFP1 / 2)) {
    eace:	f06f 4a00 	mvn.w	sl, #2147483648	; 0x80000000
    ead2:	f04f 0b00 	mov.w	fp, #0
	while (exp > 0) {
    ead6:	f1b8 0f00 	cmp.w	r8, #0
    eada:	f300 80a4 	bgt.w	ec26 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x1c6>
		_rlrshift(&fract);
    eade:	a810      	add	r0, sp, #64	; 0x40
		exp++;
    eae0:	f108 0801 	add.w	r8, r8, #1
		_rlrshift(&fract);
    eae4:	f003 f874 	bl	11bd0 <_rlrshift>
	while (exp < (0 + 4)) {
    eae8:	f1b8 0f04 	cmp.w	r8, #4
    eaec:	d1f7      	bne.n	eade <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x7e>
		precision = 6;		/* Default precision if none given */
    eaee:	2d00      	cmp	r5, #0
	if ((c == 'g') || (c == 'G')) {
    eaf0:	f004 03df 	and.w	r3, r4, #223	; 0xdf
		precision = 6;		/* Default precision if none given */
    eaf4:	bfb8      	it	lt
    eaf6:	2506      	movlt	r5, #6
	if ((c == 'g') || (c == 'G')) {
    eaf8:	2b47      	cmp	r3, #71	; 0x47
    eafa:	f040 80b9 	bne.w	ec70 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x210>
		if (decexp < (-4 + 1) || decexp > precision) {
    eafe:	1cf2      	adds	r2, r6, #3
    eb00:	db02      	blt.n	eb08 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xa8>
    eb02:	42b5      	cmp	r5, r6
    eb04:	f280 80af 	bge.w	ec66 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x206>
			c += 'e' - 'g';
    eb08:	3c02      	subs	r4, #2
    eb0a:	b2e4      	uxtb	r4, r4
			if (precision > 0) {
    eb0c:	2d00      	cmp	r5, #0
    eb0e:	f000 8273 	beq.w	eff8 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x598>
		if (!falt && (precision > 0)) {
    eb12:	9b05      	ldr	r3, [sp, #20]
				precision--;
    eb14:	3d01      	subs	r5, #1
		if (!falt && (precision > 0)) {
    eb16:	2b00      	cmp	r3, #0
    eb18:	f040 826e 	bne.w	eff8 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x598>
    eb1c:	2d00      	cmp	r5, #0
    eb1e:	bfd4      	ite	le
    eb20:	f04f 0a00 	movle.w	sl, #0
    eb24:	f04f 0a01 	movgt.w	sl, #1
	if (c == 'f') {
    eb28:	2c66      	cmp	r4, #102	; 0x66
    eb2a:	f040 8267 	bne.w	effc <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x59c>
		if (exp < 0) {
    eb2e:	eb15 0806 	adds.w	r8, r5, r6
    eb32:	f140 80a3 	bpl.w	ec7c <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x21c>
	digit_count = 16;
    eb36:	2310      	movs	r3, #16
    eb38:	2466      	movs	r4, #102	; 0x66
			exp = 0;
    eb3a:	f04f 0800 	mov.w	r8, #0
	digit_count = 16;
    eb3e:	930f      	str	r3, [sp, #60]	; 0x3c
	ltemp = 0x0800000000000000;
    eb40:	2200      	movs	r2, #0
    eb42:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
    eb46:	f10d 0970 	add.w	r9, sp, #112	; 0x70
    eb4a:	e969 230a 	strd	r2, r3, [r9, #-40]!	; 0x28
	while (exp--) {
    eb4e:	f118 38ff 	adds.w	r8, r8, #4294967295
    eb52:	f080 8095 	bcs.w	ec80 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x220>
	fract += ltemp;
    eb56:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
    eb5a:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
    eb5e:	eb12 0800 	adds.w	r8, r2, r0
    eb62:	eb43 0901 	adc.w	r9, r3, r1
    eb66:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
	if ((fract >> 32) & 0xF0000000) {
    eb6a:	f009 4870 	and.w	r8, r9, #4026531840	; 0xf0000000
    eb6e:	f04f 0900 	mov.w	r9, #0
    eb72:	ea58 0309 	orrs.w	r3, r8, r9
    eb76:	d006      	beq.n	eb86 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x126>
		_ldiv5(&fract);
    eb78:	a810      	add	r0, sp, #64	; 0x40
    eb7a:	f003 f83c 	bl	11bf6 <_ldiv5>
		_rlrshift(&fract);
    eb7e:	a810      	add	r0, sp, #64	; 0x40
    eb80:	f003 f826 	bl	11bd0 <_rlrshift>
		decexp++;
    eb84:	3601      	adds	r6, #1
	if (c == 'f') {
    eb86:	2c66      	cmp	r4, #102	; 0x66
    eb88:	f040 80c4 	bne.w	ed14 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x2b4>
		if (decexp > 0) {
    eb8c:	2e00      	cmp	r6, #0
    eb8e:	dc7d      	bgt.n	ec8c <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x22c>
			*buf++ = '0';
    eb90:	2330      	movs	r3, #48	; 0x30
    eb92:	703b      	strb	r3, [r7, #0]
		if (falt || (precision > 0)) {
    eb94:	9b05      	ldr	r3, [sp, #20]
			*buf++ = '0';
    eb96:	f107 0b01 	add.w	fp, r7, #1
		if (falt || (precision > 0)) {
    eb9a:	2b00      	cmp	r3, #0
    eb9c:	f040 808d 	bne.w	ecba <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x25a>
			zero.predot = zero.postdot = zero.trail = 0;
    eba0:	4699      	mov	r9, r3
    eba2:	e085      	b.n	ecb0 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x250>
				exp--;
    eba4:	3e01      	subs	r6, #1
			while (((fract <<= 1) & HIGHBIT64) == 0) {
    eba6:	eb18 0808 	adds.w	r8, r8, r8
    ebaa:	eb49 0909 	adc.w	r9, r9, r9
    ebae:	f1b8 0f00 	cmp.w	r8, #0
    ebb2:	f179 0300 	sbcs.w	r3, r9, #0
    ebb6:	daf5      	bge.n	eba4 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x144>
    ebb8:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
    ebbc:	e778      	b.n	eab0 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x50>
			_rlrshift(&fract);
    ebbe:	4648      	mov	r0, r9
    ebc0:	f003 f806 	bl	11bd0 <_rlrshift>
		while ((fract >> 32) >= (MAXFP1 / 5)) {
    ebc4:	e9dd a010 	ldrd	sl, r0, [sp, #64]	; 0x40
    ebc8:	2300      	movs	r3, #0
    ebca:	930b      	str	r3, [sp, #44]	; 0x2c
    ebcc:	2300      	movs	r3, #0
    ebce:	900a      	str	r0, [sp, #40]	; 0x28
    ebd0:	4abc      	ldr	r2, [pc, #752]	; (eec4 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x464>)
    ebd2:	e9dd bc0a 	ldrd	fp, ip, [sp, #40]	; 0x28
    ebd6:	4563      	cmp	r3, ip
    ebd8:	bf08      	it	eq
    ebda:	455a      	cmpeq	r2, fp
    ebdc:	f108 0801 	add.w	r8, r8, #1
    ebe0:	d3ed      	bcc.n	ebbe <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x15e>
		fract *= 5U;
    ebe2:	2205      	movs	r2, #5
		decexp--;
    ebe4:	f04f 0c00 	mov.w	ip, #0
		fract *= 5U;
    ebe8:	fbaa ab02 	umull	sl, fp, sl, r2
    ebec:	fb02 bb00 	mla	fp, r2, r0, fp
    ebf0:	e9cd ab10 	strd	sl, fp, [sp, #64]	; 0x40
		decexp--;
    ebf4:	3e01      	subs	r6, #1
		while ((fract >> 32) <= (MAXFP1 / 2)) {
    ebf6:	2300      	movs	r3, #0
    ebf8:	2100      	movs	r1, #0
    ebfa:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
    ebfe:	4299      	cmp	r1, r3
    ec00:	bf08      	it	eq
    ec02:	4558      	cmpeq	r0, fp
    ec04:	d206      	bcs.n	ec14 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x1b4>
    ec06:	f1bc 0f00 	cmp.w	ip, #0
    ec0a:	f43f af5d 	beq.w	eac8 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x68>
    ec0e:	e9cd ab10 	strd	sl, fp, [sp, #64]	; 0x40
    ec12:	e759      	b.n	eac8 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x68>
			fract <<= 1;
    ec14:	eb1a 0a0a 	adds.w	sl, sl, sl
    ec18:	eb4b 0b0b 	adc.w	fp, fp, fp
			exp--;
    ec1c:	f108 38ff 	add.w	r8, r8, #4294967295
    ec20:	f04f 0c01 	mov.w	ip, #1
    ec24:	e7e7      	b.n	ebf6 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x196>
		_ldiv5(&fract);
    ec26:	a810      	add	r0, sp, #64	; 0x40
    ec28:	f002 ffe5 	bl	11bf6 <_ldiv5>
    ec2c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
		decexp++;
    ec30:	f04f 0c00 	mov.w	ip, #0
		exp--;
    ec34:	f108 38ff 	add.w	r8, r8, #4294967295
		decexp++;
    ec38:	3601      	adds	r6, #1
		while ((fract >> 32) <= (MAXFP1 / 2)) {
    ec3a:	2300      	movs	r3, #0
    ec3c:	459b      	cmp	fp, r3
    ec3e:	bf08      	it	eq
    ec40:	458a      	cmpeq	sl, r1
    ec42:	d206      	bcs.n	ec52 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x1f2>
    ec44:	f1bc 0f00 	cmp.w	ip, #0
    ec48:	f43f af45 	beq.w	ead6 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x76>
    ec4c:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
    ec50:	e741      	b.n	ead6 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x76>
			fract <<= 1;
    ec52:	1800      	adds	r0, r0, r0
    ec54:	4149      	adcs	r1, r1
			exp--;
    ec56:	f108 38ff 	add.w	r8, r8, #4294967295
    ec5a:	f04f 0c01 	mov.w	ip, #1
    ec5e:	e7ec      	b.n	ec3a <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x1da>
	if ((exp | fract) != 0) {
    ec60:	2600      	movs	r6, #0
    ec62:	46b0      	mov	r8, r6
    ec64:	e73b      	b.n	eade <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x7e>
		if (!falt && (precision > 0)) {
    ec66:	9b05      	ldr	r3, [sp, #20]
			precision -= decexp;
    ec68:	1bad      	subs	r5, r5, r6
		if (!falt && (precision > 0)) {
    ec6a:	b923      	cbnz	r3, ec76 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x216>
			c = 'f';
    ec6c:	2466      	movs	r4, #102	; 0x66
    ec6e:	e755      	b.n	eb1c <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xbc>
	prune_zero = false;		/* Assume trailing 0's allowed     */
    ec70:	f04f 0a00 	mov.w	sl, #0
    ec74:	e758      	b.n	eb28 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xc8>
    ec76:	f04f 0a00 	mov.w	sl, #0
    ec7a:	e758      	b.n	eb2e <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xce>
		if (exp < 0) {
    ec7c:	2466      	movs	r4, #102	; 0x66
    ec7e:	e1bf      	b.n	f000 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x5a0>
		_ldiv5(&ltemp);
    ec80:	4648      	mov	r0, r9
    ec82:	f002 ffb8 	bl	11bf6 <_ldiv5>
		_rlrshift(&ltemp);
    ec86:	f002 ffa3 	bl	11bd0 <_rlrshift>
    ec8a:	e760      	b.n	eb4e <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xee>
		if (decexp > 0) {
    ec8c:	46bb      	mov	fp, r7
			while (decexp > 0 && digit_count > 0) {
    ec8e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    ec90:	2b00      	cmp	r3, #0
    ec92:	dd07      	ble.n	eca4 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x244>
				*buf++ = _get_digit(&fract, &digit_count);
    ec94:	a90f      	add	r1, sp, #60	; 0x3c
    ec96:	a810      	add	r0, sp, #64	; 0x40
    ec98:	f002 ffdd 	bl	11c56 <_get_digit>
			while (decexp > 0 && digit_count > 0) {
    ec9c:	3e01      	subs	r6, #1
				*buf++ = _get_digit(&fract, &digit_count);
    ec9e:	f80b 0b01 	strb.w	r0, [fp], #1
			while (decexp > 0 && digit_count > 0) {
    eca2:	d1f4      	bne.n	ec8e <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x22e>
		if (falt || (precision > 0)) {
    eca4:	9b05      	ldr	r3, [sp, #20]
    eca6:	2b00      	cmp	r3, #0
    eca8:	f040 819d 	bne.w	efe6 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x586>
			zp->predot = decexp;
    ecac:	46b1      	mov	r9, r6
			decexp = 0;
    ecae:	461e      	mov	r6, r3
		if (falt || (precision > 0)) {
    ecb0:	2d00      	cmp	r5, #0
    ecb2:	dc04      	bgt.n	ecbe <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x25e>
			zero.predot = zero.postdot = zero.trail = 0;
    ecb4:	f04f 0800 	mov.w	r8, #0
    ecb8:	e020      	b.n	ecfc <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x29c>
    ecba:	f04f 0900 	mov.w	r9, #0
			*buf++ = '.';
    ecbe:	222e      	movs	r2, #46	; 0x2e
    ecc0:	f10b 0301 	add.w	r3, fp, #1
    ecc4:	f88b 2000 	strb.w	r2, [fp]
		if (decexp < 0 && precision > 0) {
    ecc8:	2e00      	cmp	r6, #0
    ecca:	f000 8193 	beq.w	eff4 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x594>
    ecce:	2d00      	cmp	r5, #0
    ecd0:	dd1e      	ble.n	ed10 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x2b0>
			zp->postdot = -decexp;
    ecd2:	f1c6 0800 	rsb	r8, r6, #0
    ecd6:	45a8      	cmp	r8, r5
    ecd8:	bfa8      	it	ge
    ecda:	46a8      	movge	r8, r5
			precision -= zp->postdot;
    ecdc:	eba5 0508 	sub.w	r5, r5, r8
			zero.predot = zero.postdot = zero.trail = 0;
    ece0:	469b      	mov	fp, r3
    ece2:	e006      	b.n	ecf2 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x292>
			*buf++ = _get_digit(&fract, &digit_count);
    ece4:	a90f      	add	r1, sp, #60	; 0x3c
    ece6:	a810      	add	r0, sp, #64	; 0x40
    ece8:	f002 ffb5 	bl	11c56 <_get_digit>
			precision--;
    ecec:	3d01      	subs	r5, #1
			*buf++ = _get_digit(&fract, &digit_count);
    ecee:	f80b 0b01 	strb.w	r0, [fp], #1
		while (precision > 0 && digit_count > 0) {
    ecf2:	2d00      	cmp	r5, #0
    ecf4:	dd02      	ble.n	ecfc <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x29c>
    ecf6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    ecf8:	2b00      	cmp	r3, #0
    ecfa:	dcf3      	bgt.n	ece4 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x284>
	if (prune_zero) {
    ecfc:	f1ba 0f00 	cmp.w	sl, #0
    ed00:	d11e      	bne.n	ed40 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x2e0>
	*buf = 0;
    ed02:	2300      	movs	r3, #0
	return buf - start;
    ed04:	af15      	add	r7, sp, #84	; 0x54
	*buf = 0;
    ed06:	f88b 3000 	strb.w	r3, [fp]
	return buf - start;
    ed0a:	ebab 0007 	sub.w	r0, fp, r7
    ed0e:	e682      	b.n	ea16 <z_prf+0x3b6>
			*buf++ = '.';
    ed10:	469b      	mov	fp, r3
    ed12:	e7cf      	b.n	ecb4 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x254>
		*buf = _get_digit(&fract, &digit_count);
    ed14:	a90f      	add	r1, sp, #60	; 0x3c
    ed16:	a810      	add	r0, sp, #64	; 0x40
    ed18:	f002 ff9d 	bl	11c56 <_get_digit>
		if (falt || (precision > 0)) {
    ed1c:	9b05      	ldr	r3, [sp, #20]
		if (*buf++ != '0') {
    ed1e:	2830      	cmp	r0, #48	; 0x30
		*buf = _get_digit(&fract, &digit_count);
    ed20:	7038      	strb	r0, [r7, #0]
			decexp--;
    ed22:	bf18      	it	ne
    ed24:	f106 36ff 	addne.w	r6, r6, #4294967295
		if (falt || (precision > 0)) {
    ed28:	2b00      	cmp	r3, #0
    ed2a:	d13c      	bne.n	eda6 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x346>
    ed2c:	2d00      	cmp	r5, #0
    ed2e:	dc3a      	bgt.n	eda6 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x346>
		if (*buf++ != '0') {
    ed30:	f107 0b01 	add.w	fp, r7, #1
	if (prune_zero) {
    ed34:	f1ba 0f00 	cmp.w	sl, #0
    ed38:	d048      	beq.n	edcc <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x36c>
			zero.predot = zero.postdot = zero.trail = 0;
    ed3a:	f04f 0900 	mov.w	r9, #0
    ed3e:	46c8      	mov	r8, r9
		while (*--buf == '0')
    ed40:	f81b 2c01 	ldrb.w	r2, [fp, #-1]
    ed44:	f10b 33ff 	add.w	r3, fp, #4294967295
    ed48:	2a30      	cmp	r2, #48	; 0x30
    ed4a:	d03d      	beq.n	edc8 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x368>
    ed4c:	2a2e      	cmp	r2, #46	; 0x2e
    ed4e:	bf08      	it	eq
    ed50:	469b      	moveq	fp, r3
    ed52:	2500      	movs	r5, #0
	if ((c == 'e') || (c == 'E')) {
    ed54:	f004 03df 	and.w	r3, r4, #223	; 0xdf
    ed58:	2b45      	cmp	r3, #69	; 0x45
    ed5a:	d1d2      	bne.n	ed02 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x2a2>
		if (decexp < 0) {
    ed5c:	2e00      	cmp	r6, #0
			*buf++ = '-';
    ed5e:	bfb4      	ite	lt
    ed60:	232d      	movlt	r3, #45	; 0x2d
			*buf++ = '+';
    ed62:	232b      	movge	r3, #43	; 0x2b
		*buf++ = c;
    ed64:	465a      	mov	r2, fp
			decexp = -decexp;
    ed66:	bfb8      	it	lt
    ed68:	4276      	neglt	r6, r6
		if (decexp >= 100) {
    ed6a:	2e63      	cmp	r6, #99	; 0x63
		*buf++ = c;
    ed6c:	f802 4b02 	strb.w	r4, [r2], #2
			*buf++ = '+';
    ed70:	f88b 3001 	strb.w	r3, [fp, #1]
		if (decexp >= 100) {
    ed74:	dd0a      	ble.n	ed8c <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x32c>
			*buf++ = (decexp / 100) + '0';
    ed76:	2164      	movs	r1, #100	; 0x64
    ed78:	fb96 f3f1 	sdiv	r3, r6, r1
			decexp %= 100;
    ed7c:	fb01 6613 	mls	r6, r1, r3, r6
			*buf++ = (decexp / 100) + '0';
    ed80:	f103 0030 	add.w	r0, r3, #48	; 0x30
    ed84:	f10b 0203 	add.w	r2, fp, #3
    ed88:	f88b 0002 	strb.w	r0, [fp, #2]
		*buf++ = (decexp / 10) + '0';
    ed8c:	210a      	movs	r1, #10
    ed8e:	fb96 f3f1 	sdiv	r3, r6, r1
    ed92:	4693      	mov	fp, r2
		decexp %= 10;
    ed94:	fb01 6613 	mls	r6, r1, r3, r6
		*buf++ = (decexp / 10) + '0';
    ed98:	f103 0030 	add.w	r0, r3, #48	; 0x30
		*buf++ = decexp + '0';
    ed9c:	3630      	adds	r6, #48	; 0x30
		*buf++ = (decexp / 10) + '0';
    ed9e:	f80b 0b02 	strb.w	r0, [fp], #2
		*buf++ = decexp + '0';
    eda2:	7056      	strb	r6, [r2, #1]
    eda4:	e7ad      	b.n	ed02 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x2a2>
			*buf++ = '.';
    eda6:	232e      	movs	r3, #46	; 0x2e
    eda8:	f107 0b02 	add.w	fp, r7, #2
    edac:	707b      	strb	r3, [r7, #1]
		while (precision > 0 && digit_count > 0) {
    edae:	2d00      	cmp	r5, #0
    edb0:	ddc0      	ble.n	ed34 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x2d4>
    edb2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    edb4:	2b00      	cmp	r3, #0
    edb6:	ddbd      	ble.n	ed34 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x2d4>
			*buf++ = _get_digit(&fract, &digit_count);
    edb8:	a90f      	add	r1, sp, #60	; 0x3c
    edba:	a810      	add	r0, sp, #64	; 0x40
    edbc:	f002 ff4b 	bl	11c56 <_get_digit>
			precision--;
    edc0:	3d01      	subs	r5, #1
			*buf++ = _get_digit(&fract, &digit_count);
    edc2:	f80b 0b01 	strb.w	r0, [fp], #1
    edc6:	e7f2      	b.n	edae <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x34e>
		while (*--buf == '0')
    edc8:	469b      	mov	fp, r3
    edca:	e7b9      	b.n	ed40 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x2e0>
			zero.predot = zero.postdot = zero.trail = 0;
    edcc:	46d1      	mov	r9, sl
    edce:	46d0      	mov	r8, sl
    edd0:	e7c0      	b.n	ed54 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x2f4>
					prefix = 1;
    edd2:	f04f 0b01 	mov.w	fp, #1
    edd6:	e62e      	b.n	ea36 <z_prf+0x3d6>
    edd8:	4632      	mov	r2, r6
    edda:	f852 3b04 	ldr.w	r3, [r2], #4
				switch (i) {
    edde:	2f68      	cmp	r7, #104	; 0x68
    ede0:	9204      	str	r2, [sp, #16]
    ede2:	d006      	beq.n	edf2 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x392>
    ede4:	2f6c      	cmp	r7, #108	; 0x6c
    ede6:	d009      	beq.n	edfc <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x39c>
    ede8:	2f48      	cmp	r7, #72	; 0x48
    edea:	d107      	bne.n	edfc <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x39c>
					*va_arg(vargs, char *) = count;
    edec:	9a01      	ldr	r2, [sp, #4]
    edee:	701a      	strb	r2, [r3, #0]
					break;
    edf0:	e001      	b.n	edf6 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x396>
					*va_arg(vargs, short *) = count;
    edf2:	9a01      	ldr	r2, [sp, #4]
    edf4:	801a      	strh	r2, [r3, #0]
				continue;
    edf6:	9e04      	ldr	r6, [sp, #16]
    edf8:	9a06      	ldr	r2, [sp, #24]
    edfa:	e439      	b.n	e670 <z_prf+0x10>
					*va_arg(vargs, int *) = count;
    edfc:	9a01      	ldr	r2, [sp, #4]
    edfe:	601a      	str	r2, [r3, #0]
					break;
    ee00:	e7f9      	b.n	edf6 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x396>
				val = (uintptr_t) va_arg(vargs, void *);
    ee02:	1d33      	adds	r3, r6, #4
    ee04:	9304      	str	r3, [sp, #16]
		*buf++ = '0';
    ee06:	f647 0330 	movw	r3, #30768	; 0x7830
				clen = _to_hex(buf, val, true, 'x');
    ee0a:	6831      	ldr	r1, [r6, #0]
	len = _to_x(buf, value, 16);
    ee0c:	2210      	movs	r2, #16
    ee0e:	f10d 0056 	add.w	r0, sp, #86	; 0x56
		*buf++ = '0';
    ee12:	f8ad 3054 	strh.w	r3, [sp, #84]	; 0x54
	len = _to_x(buf, value, 16);
    ee16:	f002 febb 	bl	11b90 <_to_x>
				prefix = 2;
    ee1a:	f04f 0b02 	mov.w	fp, #2
	return len + (buf - buf0);
    ee1e:	1c87      	adds	r7, r0, #2
				break;
    ee20:	e52b      	b.n	e87a <z_prf+0x21a>
					if (cptr[clen] == '\0') {
    ee22:	5df3      	ldrb	r3, [r6, r7]
    ee24:	2b00      	cmp	r3, #0
    ee26:	d043      	beq.n	eeb0 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x450>
				for (clen = 0; clen < precision; clen++) {
    ee28:	3701      	adds	r7, #1
    ee2a:	e53a      	b.n	e8a2 <z_prf+0x242>
	if (alt_form) {
    ee2c:	4638      	mov	r0, r7
	return (buf - buf0) + _to_x(buf, value, 8);
    ee2e:	2208      	movs	r2, #8
    ee30:	1bc7      	subs	r7, r0, r7
    ee32:	f002 fead 	bl	11b90 <_to_x>
    ee36:	4407      	add	r7, r0
			prefix = 0;
    ee38:	f04f 0b00 	mov.w	fp, #0
    ee3c:	e51d      	b.n	e87a <z_prf+0x21a>
		*buf++ = '0';
    ee3e:	f10d 0055 	add.w	r0, sp, #85	; 0x55
    ee42:	e7f4      	b.n	ee2e <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x3ce>
				} else if (c == 'u') {
    ee44:	2c75      	cmp	r4, #117	; 0x75
    ee46:	d105      	bne.n	ee54 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x3f4>
	return _to_x(buf, value, 10);
    ee48:	4638      	mov	r0, r7
    ee4a:	220a      	movs	r2, #10
    ee4c:	f002 fea0 	bl	11b90 <_to_x>
    ee50:	4607      	mov	r7, r0
    ee52:	e7f1      	b.n	ee38 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x3d8>
	if (alt_form) {
    ee54:	9b05      	ldr	r3, [sp, #20]
    ee56:	b1eb      	cbz	r3, ee94 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x434>
		*buf++ = '0';
    ee58:	f647 0330 	movw	r3, #30768	; 0x7830
		*buf++ = 'x';
    ee5c:	f10d 0656 	add.w	r6, sp, #86	; 0x56
		*buf++ = '0';
    ee60:	f8ad 3054 	strh.w	r3, [sp, #84]	; 0x54
	len = _to_x(buf, value, 16);
    ee64:	2210      	movs	r2, #16
    ee66:	4630      	mov	r0, r6
    ee68:	f002 fe92 	bl	11b90 <_to_x>
	if (prefix == 'X') {
    ee6c:	2c58      	cmp	r4, #88	; 0x58
    ee6e:	d10b      	bne.n	ee88 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x428>
    ee70:	463b      	mov	r3, r7
		if (*buf >= 'a' && *buf <= 'z') {
    ee72:	781a      	ldrb	r2, [r3, #0]
    ee74:	f1a2 0161 	sub.w	r1, r2, #97	; 0x61
    ee78:	2919      	cmp	r1, #25
			*buf += 'A' - 'a';
    ee7a:	bf9c      	itt	ls
    ee7c:	3a20      	subls	r2, #32
    ee7e:	701a      	strbls	r2, [r3, #0]
	} while (*buf++);
    ee80:	f813 2b01 	ldrb.w	r2, [r3], #1
    ee84:	2a00      	cmp	r2, #0
    ee86:	d1f4      	bne.n	ee72 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x412>
			prefix = 0;
    ee88:	9b05      	ldr	r3, [sp, #20]
	return len + (buf - buf0);
    ee8a:	1bf7      	subs	r7, r6, r7
    ee8c:	4407      	add	r7, r0
			prefix = 0;
    ee8e:	ea4f 0b43 	mov.w	fp, r3, lsl #1
    ee92:	e4f2      	b.n	e87a <z_prf+0x21a>
	if (alt_form) {
    ee94:	463e      	mov	r6, r7
    ee96:	e7e5      	b.n	ee64 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x404>
				PUTC('%');
    ee98:	9903      	ldr	r1, [sp, #12]
    ee9a:	4620      	mov	r0, r4
    ee9c:	f7ff bbf0 	b.w	e680 <z_prf+0x20>
				count++;
    eea0:	9b01      	ldr	r3, [sp, #4]
    eea2:	3301      	adds	r3, #1
				count += 2;
    eea4:	9301      	str	r3, [sp, #4]
				continue;
    eea6:	9604      	str	r6, [sp, #16]
    eea8:	e7a5      	b.n	edf6 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x396>
					prefix = 1;
    eeaa:	f04f 0b01 	mov.w	fp, #1
    eeae:	e4e4      	b.n	e87a <z_prf+0x21a>
    eeb0:	461d      	mov	r5, r3
    eeb2:	e4fa      	b.n	e8aa <z_prf+0x24a>
			zero.predot = zero.postdot = zero.trail = 0;
    eeb4:	2500      	movs	r5, #0
    eeb6:	46a8      	mov	r8, r5
    eeb8:	46a9      	mov	r9, r5
    eeba:	e5c8      	b.n	ea4e <z_prf+0x3ee>
			cptr = buf;
    eebc:	ae15      	add	r6, sp, #84	; 0x54
				zero_head = 0;
    eebe:	f04f 0a00 	mov.w	sl, #0
    eec2:	e506      	b.n	e8d2 <z_prf+0x272>
    eec4:	33333332 	.word	0x33333332
    eec8:	ae15      	add	r6, sp, #84	; 0x54
    eeca:	f8dd a020 	ldr.w	sl, [sp, #32]
    eece:	e500      	b.n	e8d2 <z_prf+0x272>
    eed0:	9305      	str	r3, [sp, #20]
					PUTC(' ');
    eed2:	9903      	ldr	r1, [sp, #12]
    eed4:	9b02      	ldr	r3, [sp, #8]
    eed6:	2020      	movs	r0, #32
    eed8:	4798      	blx	r3
    eeda:	3001      	adds	r0, #1
    eedc:	9b05      	ldr	r3, [sp, #20]
    eede:	f43f abd4 	beq.w	e68a <z_prf+0x2a>
				while (width-- > 0) {
    eee2:	f113 33ff 	adds.w	r3, r3, #4294967295
    eee6:	d2f3      	bcs.n	eed0 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x470>
				count += width;
    eee8:	9a01      	ldr	r2, [sp, #4]
    eeea:	4422      	add	r2, r4
    eeec:	9201      	str	r2, [sp, #4]
				while (width-- > 0) {
    eeee:	461c      	mov	r4, r3
    eef0:	e4f8      	b.n	e8e4 <z_prf+0x284>
    eef2:	4623      	mov	r3, r4
    eef4:	e7f5      	b.n	eee2 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x482>
    eef6:	9305      	str	r3, [sp, #20]
				PUTC(*cptr++);
    eef8:	9903      	ldr	r1, [sp, #12]
    eefa:	9b02      	ldr	r3, [sp, #8]
    eefc:	f816 0b01 	ldrb.w	r0, [r6], #1
    ef00:	4798      	blx	r3
    ef02:	3001      	adds	r0, #1
    ef04:	9b05      	ldr	r3, [sp, #20]
    ef06:	f47f acef 	bne.w	e8e8 <z_prf+0x288>
    ef0a:	f7ff bbbe 	b.w	e68a <z_prf+0x2a>
    ef0e:	9305      	str	r3, [sp, #20]
				PUTC('0');
    ef10:	9903      	ldr	r1, [sp, #12]
    ef12:	9b02      	ldr	r3, [sp, #8]
    ef14:	2030      	movs	r0, #48	; 0x30
    ef16:	4798      	blx	r3
    ef18:	3001      	adds	r0, #1
    ef1a:	9b05      	ldr	r3, [sp, #20]
    ef1c:	f47f ace8 	bne.w	e8f0 <z_prf+0x290>
    ef20:	f7ff bbb3 	b.w	e68a <z_prf+0x2a>
					PUTC(c);
    ef24:	e9dd 3102 	ldrd	r3, r1, [sp, #8]
    ef28:	9205      	str	r2, [sp, #20]
    ef2a:	4798      	blx	r3
    ef2c:	3001      	adds	r0, #1
    ef2e:	f43f abac 	beq.w	e68a <z_prf+0x2a>
					c = *++cptr;
    ef32:	f816 0f01 	ldrb.w	r0, [r6, #1]!
    ef36:	9a05      	ldr	r2, [sp, #20]
    ef38:	e4e6      	b.n	e908 <z_prf+0x2a8>
    ef3a:	9305      	str	r3, [sp, #20]
					PUTC('0');
    ef3c:	9903      	ldr	r1, [sp, #12]
    ef3e:	9b02      	ldr	r3, [sp, #8]
    ef40:	2030      	movs	r0, #48	; 0x30
    ef42:	9207      	str	r2, [sp, #28]
    ef44:	4798      	blx	r3
    ef46:	9a07      	ldr	r2, [sp, #28]
    ef48:	3001      	adds	r0, #1
    ef4a:	f102 32ff 	add.w	r2, r2, #4294967295
    ef4e:	9b05      	ldr	r3, [sp, #20]
    ef50:	f47f ace2 	bne.w	e918 <z_prf+0x2b8>
    ef54:	f7ff bb99 	b.w	e68a <z_prf+0x2a>
			clen -= prefix;
    ef58:	46b9      	mov	r9, r7
    ef5a:	e4e2      	b.n	e922 <z_prf+0x2c2>
    ef5c:	9305      	str	r3, [sp, #20]
					PUTC('0');
    ef5e:	9903      	ldr	r1, [sp, #12]
    ef60:	9b02      	ldr	r3, [sp, #8]
    ef62:	2030      	movs	r0, #48	; 0x30
    ef64:	4798      	blx	r3
    ef66:	9b05      	ldr	r3, [sp, #20]
    ef68:	3001      	adds	r0, #1
    ef6a:	f103 33ff 	add.w	r3, r3, #4294967295
    ef6e:	f47f acef 	bne.w	e950 <z_prf+0x2f0>
    ef72:	f7ff bb8a 	b.w	e68a <z_prf+0x2a>
					PUTC(c);
    ef76:	e9dd 3102 	ldrd	r3, r1, [sp, #8]
    ef7a:	4798      	blx	r3
    ef7c:	3001      	adds	r0, #1
    ef7e:	f43f ab84 	beq.w	e68a <z_prf+0x2a>
					c = *++cptr;
    ef82:	f816 0f01 	ldrb.w	r0, [r6, #1]!
    ef86:	e4ec      	b.n	e962 <z_prf+0x302>
					PUTC('0');
    ef88:	9903      	ldr	r1, [sp, #12]
    ef8a:	2030      	movs	r0, #48	; 0x30
    ef8c:	9b02      	ldr	r3, [sp, #8]
    ef8e:	4798      	blx	r3
    ef90:	3001      	adds	r0, #1
    ef92:	f108 38ff 	add.w	r8, r8, #4294967295
    ef96:	f47f acef 	bne.w	e978 <z_prf+0x318>
    ef9a:	f7ff bb76 	b.w	e68a <z_prf+0x2a>
				PUTC(*cptr++);
    ef9e:	9903      	ldr	r1, [sp, #12]
    efa0:	f816 0b01 	ldrb.w	r0, [r6], #1
    efa4:	9b02      	ldr	r3, [sp, #8]
    efa6:	4798      	blx	r3
    efa8:	3001      	adds	r0, #1
    efaa:	f43f ab6e 	beq.w	e68a <z_prf+0x2a>
    efae:	eba9 0306 	sub.w	r3, r9, r6
			while (clen-- > 0) {
    efb2:	2b00      	cmp	r3, #0
    efb4:	dcf3      	bgt.n	ef9e <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x53e>
			count += prefix;
    efb6:	9b01      	ldr	r3, [sp, #4]
			if (width > 0) {
    efb8:	2c00      	cmp	r4, #0
			count += prefix;
    efba:	445b      	add	r3, fp
    efbc:	469b      	mov	fp, r3
			count += zero_head;
    efbe:	44d3      	add	fp, sl
			count += clen;
    efc0:	eb07 030b 	add.w	r3, r7, fp
    efc4:	9301      	str	r3, [sp, #4]
			if (width > 0) {
    efc6:	f77f af16 	ble.w	edf6 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x396>
				count += width;
    efca:	4423      	add	r3, r4
    efcc:	9301      	str	r3, [sp, #4]
				while (width-- > 0) {
    efce:	f114 34ff 	adds.w	r4, r4, #4294967295
    efd2:	f4ff af10 	bcc.w	edf6 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x396>
					PUTC(' ');
    efd6:	9903      	ldr	r1, [sp, #12]
    efd8:	2020      	movs	r0, #32
    efda:	9b02      	ldr	r3, [sp, #8]
    efdc:	4798      	blx	r3
    efde:	3001      	adds	r0, #1
    efe0:	d1f5      	bne.n	efce <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x56e>
    efe2:	f7ff bb52 	b.w	e68a <z_prf+0x2a>
			*buf++ = '.';
    efe6:	222e      	movs	r2, #46	; 0x2e
			zp->predot = decexp;
    efe8:	46b1      	mov	r9, r6
			decexp = 0;
    efea:	2600      	movs	r6, #0
			*buf++ = '.';
    efec:	f10b 0301 	add.w	r3, fp, #1
    eff0:	f88b 2000 	strb.w	r2, [fp]
			zero.predot = zero.postdot = zero.trail = 0;
    eff4:	46b0      	mov	r8, r6
    eff6:	e673      	b.n	ece0 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x280>
	prune_zero = false;		/* Assume trailing 0's allowed     */
    eff8:	f04f 0a00 	mov.w	sl, #0
		exp = precision + 1;
    effc:	f105 0801 	add.w	r8, r5, #1
	digit_count = 16;
    f000:	2310      	movs	r3, #16
    f002:	4598      	cmp	r8, r3
    f004:	930f      	str	r3, [sp, #60]	; 0x3c
    f006:	bfa8      	it	ge
    f008:	4698      	movge	r8, r3
    f00a:	e599      	b.n	eb40 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xe0>

0000f00c <__stdout_hook_install>:

static int (*_stdout_hook)(int) = _stdout_hook_default;

void __stdout_hook_install(int (*hook)(int))
{
	_stdout_hook = hook;
    f00c:	4b01      	ldr	r3, [pc, #4]	; (f014 <__stdout_hook_install+0x8>)
    f00e:	6018      	str	r0, [r3, #0]
}
    f010:	4770      	bx	lr
    f012:	bf00      	nop
    f014:	20025824 	.word	0x20025824

0000f018 <snprintf>:
	return 0; /* indicate keep going so we get the total count */
}

int snprintf(char *_MLIBC_RESTRICT s, size_t len,
	     const char *_MLIBC_RESTRICT format, ...)
{
    f018:	b40c      	push	{r2, r3}
    f01a:	b51f      	push	{r0, r1, r2, r3, r4, lr}

	struct emitter p;
	int     r;
	char    dummy;

	if (len == 0) {
    f01c:	b909      	cbnz	r1, f022 <snprintf+0xa>
		s = &dummy; /* write final NUL to dummy, can't change *s */
    f01e:	f10d 0003 	add.w	r0, sp, #3
	}

	p.ptr = s;
	p.len = (int) len;
    f022:	e9cd 0102 	strd	r0, r1, [sp, #8]

	va_start(vargs, format);
    f026:	ab07      	add	r3, sp, #28
	r = z_prf(sprintf_out, (void *) (&p), format, vargs);
    f028:	9a06      	ldr	r2, [sp, #24]
    f02a:	a902      	add	r1, sp, #8
    f02c:	4805      	ldr	r0, [pc, #20]	; (f044 <snprintf+0x2c>)
	va_start(vargs, format);
    f02e:	9301      	str	r3, [sp, #4]
	r = z_prf(sprintf_out, (void *) (&p), format, vargs);
    f030:	f7ff fb16 	bl	e660 <z_prf>
	va_end(vargs);

	*(p.ptr) = 0;
    f034:	2200      	movs	r2, #0
    f036:	9b02      	ldr	r3, [sp, #8]
    f038:	701a      	strb	r2, [r3, #0]
	return r;
}
    f03a:	b005      	add	sp, #20
    f03c:	f85d eb04 	ldr.w	lr, [sp], #4
    f040:	b002      	add	sp, #8
    f042:	4770      	bx	lr
    f044:	00011c93 	.word	0x00011c93

0000f048 <nrf_gpio_cfg_sense_set>:
        sense_config);
}


__STATIC_INLINE void nrf_gpio_cfg_sense_set(uint32_t pin_number, nrf_gpio_pin_sense_t sense_config)
{
    f048:	4b07      	ldr	r3, [pc, #28]	; (f068 <nrf_gpio_cfg_sense_set+0x20>)
    f04a:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);

    /*lint -e{845} // A zero has been given as right argument to operator '|'" */
    reg->PIN_CNF[pin_number] &= ~GPIO_PIN_CNF_SENSE_Msk;
    f04e:	f8d0 3200 	ldr.w	r3, [r0, #512]	; 0x200
    f052:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
    f056:	f8c0 3200 	str.w	r3, [r0, #512]	; 0x200
    reg->PIN_CNF[pin_number] |= (sense_config << GPIO_PIN_CNF_SENSE_Pos);
    f05a:	f8d0 3200 	ldr.w	r3, [r0, #512]	; 0x200
    f05e:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
    f062:	f8c0 1200 	str.w	r1, [r0, #512]	; 0x200
}
    f066:	4770      	bx	lr
    f068:	40842500 	.word	0x40842500

0000f06c <gpiote_pin_int_cfg>:
	}
	return NRF_GPIO_PIN_SENSE_LOW;
}

static int gpiote_pin_int_cfg(struct device *port, u32_t pin)
{
    f06c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	return port->config->config_info;
    f06e:	6803      	ldr	r3, [r0, #0]
	struct gpio_nrfx_data *data = get_port_data(port);
	const struct gpio_nrfx_cfg *cfg = get_port_cfg(port);
	u32_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
    f070:	f001 021f 	and.w	r2, r1, #31
    f074:	689b      	ldr	r3, [r3, #8]
    NRF_GPIOTE->INTENCLR = mask;
}

__STATIC_INLINE uint32_t nrf_gpiote_int_is_enabled(uint32_t mask)
{
    return (NRF_GPIOTE->INTENSET & mask);
    f076:	4d49      	ldr	r5, [pc, #292]	; (f19c <gpiote_pin_int_cfg+0x130>)
    f078:	791b      	ldrb	r3, [r3, #4]
{
    f07a:	460c      	mov	r4, r1
	u32_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
    f07c:	ea42 1243 	orr.w	r2, r2, r3, lsl #5
	for (size_t i = 0; i < GPIOTE_CH_NUM; i++) {
    f080:	2300      	movs	r3, #0
    f082:	f8d5 1304 	ldr.w	r1, [r5, #772]	; 0x304
	struct gpio_nrfx_data *data = get_port_data(port);
    f086:	6886      	ldr	r6, [r0, #8]
    f088:	b2c9      	uxtb	r1, r1
                              ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk);
}

__STATIC_INLINE uint32_t nrf_gpiote_event_pin_get(uint32_t idx)
{
    return ((NRF_GPIOTE->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
    f08a:	f503 70a2 	add.w	r0, r3, #324	; 0x144
    f08e:	f855 0020 	ldr.w	r0, [r5, r0, lsl #2]
    f092:	f3c0 2004 	ubfx	r0, r0, #8, #5
		if ((nrf_gpiote_event_pin_get(i) == abs_pin)
    f096:	4282      	cmp	r2, r0
    f098:	d165      	bne.n	f166 <gpiote_pin_int_cfg+0xfa>
		    && (intenset & BIT(i))) {
    f09a:	fa21 f003 	lsr.w	r0, r1, r3
    f09e:	07c0      	lsls	r0, r0, #31
    f0a0:	d561      	bpl.n	f166 <gpiote_pin_int_cfg+0xfa>
    f0a2:	0099      	lsls	r1, r3, #2
    f0a4:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
    f0a8:	f501 3144 	add.w	r1, r1, #200704	; 0x31000
   NRF_GPIOTE->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Event;
    f0ac:	f8d1 0510 	ldr.w	r0, [r1, #1296]	; 0x510
    f0b0:	f020 0001 	bic.w	r0, r0, #1
    f0b4:	f8c1 0510 	str.w	r0, [r1, #1296]	; 0x510
			nrf_gpiote_int_disable(BIT(i));
    f0b8:	2101      	movs	r1, #1
    f0ba:	fa01 f303 	lsl.w	r3, r1, r3
    NRF_GPIOTE->INTENCLR = mask;
    f0be:	f8c5 3308 	str.w	r3, [r5, #776]	; 0x308
	int res = 0;

	gpiote_channel_free(abs_pin);
	nrf_gpio_cfg_sense_set(abs_pin, NRF_GPIO_PIN_NOSENSE);
    f0c2:	4610      	mov	r0, r2
    f0c4:	2100      	movs	r1, #0
    f0c6:	f7ff ffbf 	bl	f048 <nrf_gpio_cfg_sense_set>

	/* Pins trigger interrupts only if pin has been configured to do so
	 * and callback has been enabled for that pin.
	 */
	if ((data->pin_int_en & BIT(pin)) && (data->int_en & BIT(pin))) {
    f0ca:	68b0      	ldr	r0, [r6, #8]
    f0cc:	40e0      	lsrs	r0, r4
    f0ce:	f010 0001 	ands.w	r0, r0, #1
    f0d2:	d047      	beq.n	f164 <gpiote_pin_int_cfg+0xf8>
    f0d4:	68f0      	ldr	r0, [r6, #12]
    f0d6:	40e0      	lsrs	r0, r4
    f0d8:	f010 0001 	ands.w	r0, r0, #1
    f0dc:	d042      	beq.n	f164 <gpiote_pin_int_cfg+0xf8>
		if (data->trig_edge & BIT(pin)) {
    f0de:	6970      	ldr	r0, [r6, #20]
    f0e0:	40e0      	lsrs	r0, r4
    f0e2:	f010 0701 	ands.w	r7, r0, #1
    f0e6:	d04a      	beq.n	f17e <gpiote_pin_int_cfg+0x112>
		/* For edge triggering we use GPIOTE channels. */
			nrf_gpiote_polarity_t pol;

			if (data->double_edge & BIT(pin)) {
    f0e8:	69b3      	ldr	r3, [r6, #24]
    f0ea:	40e3      	lsrs	r3, r4
    f0ec:	07db      	lsls	r3, r3, #31
    f0ee:	d43e      	bmi.n	f16e <gpiote_pin_int_cfg+0x102>
				pol = NRF_GPIOTE_POLARITY_TOGGLE;
			} else if (((data->active_level & BIT(pin)) != 0U)
    f0f0:	6933      	ldr	r3, [r6, #16]
				   ^ ((BIT(pin) & data->inverted) != 0)) {
    f0f2:	69f1      	ldr	r1, [r6, #28]
			} else if (((data->active_level & BIT(pin)) != 0U)
    f0f4:	40e3      	lsrs	r3, r4
				   ^ ((BIT(pin) & data->inverted) != 0)) {
    f0f6:	fa21 f404 	lsr.w	r4, r1, r4
			} else if (((data->active_level & BIT(pin)) != 0U)
    f0fa:	f003 0301 	and.w	r3, r3, #1
    f0fe:	f004 0401 	and.w	r4, r4, #1
				pol = NRF_GPIOTE_POLARITY_LOTOHI;
    f102:	42a3      	cmp	r3, r4
    f104:	bf0c      	ite	eq
    f106:	2402      	moveq	r4, #2
    f108:	2401      	movne	r4, #1
			} else {
				pol = NRF_GPIOTE_POLARITY_HITOLO;
    f10a:	2100      	movs	r1, #0
    NRF_GPIOTE->CONFIG[idx] = 0;
}

__STATIC_INLINE bool nrf_gpiote_te_is_enabled(uint32_t idx)
{
    return (NRF_GPIOTE->CONFIG[idx] & GPIOTE_CONFIG_MODE_Msk) != GPIOTE_CONFIG_MODE_Disabled;
    f10c:	f501 73a2 	add.w	r3, r1, #324	; 0x144
    f110:	f855 0023 	ldr.w	r0, [r5, r3, lsl #2]
		if (!nrf_gpiote_te_is_enabled(channel)) {
    f114:	f010 0003 	ands.w	r0, r0, #3
    f118:	d12b      	bne.n	f172 <gpiote_pin_int_cfg+0x106>
			nrf_gpiote_events_t evt =
    f11a:	008b      	lsls	r3, r1, #2
    f11c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    f120:	f503 3344 	add.w	r3, r3, #200704	; 0x31000
  NRF_GPIOTE->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk | GPIOTE_CONFIG_POLARITY_Msk);
    f124:	f8d3 6510 	ldr.w	r6, [r3, #1296]	; 0x510
  NRF_GPIOTE->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    f128:	0212      	lsls	r2, r2, #8
  NRF_GPIOTE->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk | GPIOTE_CONFIG_POLARITY_Msk);
    f12a:	f426 3647 	bic.w	r6, r6, #203776	; 0x31c00
    f12e:	f426 7640 	bic.w	r6, r6, #768	; 0x300
    f132:	f8c3 6510 	str.w	r6, [r3, #1296]	; 0x510
  NRF_GPIOTE->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    f136:	f8d3 6510 	ldr.w	r6, [r3, #1296]	; 0x510
    f13a:	f402 52f8 	and.w	r2, r2, #7936	; 0x1f00
    f13e:	ea42 4404 	orr.w	r4, r2, r4, lsl #16
    *(uint32_t *)nrf_gpiote_event_addr_get(event) = 0;
    f142:	4a17      	ldr	r2, [pc, #92]	; (f1a0 <gpiote_pin_int_cfg+0x134>)
  NRF_GPIOTE->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    f144:	4334      	orrs	r4, r6
    f146:	f8c3 4510 	str.w	r4, [r3, #1296]	; 0x510
    *(uint32_t *)nrf_gpiote_event_addr_get(event) = 0;
    f14a:	f842 0021 	str.w	r0, [r2, r1, lsl #2]
   NRF_GPIOTE->CONFIG[idx] |= GPIOTE_CONFIG_MODE_Event;
    f14e:	f8d3 2510 	ldr.w	r2, [r3, #1296]	; 0x510
    f152:	f042 0201 	orr.w	r2, r2, #1
    f156:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
			nrf_gpiote_int_enable(BIT(channel));
    f15a:	2301      	movs	r3, #1
    f15c:	fa03 f101 	lsl.w	r1, r3, r1
    NRF_GPIOTE->INTENSET = mask;
    f160:	f8c5 1304 	str.w	r1, [r5, #772]	; 0x304

			nrf_gpio_cfg_sense_set(abs_pin, sense);
		}
	}
	return res;
}
    f164:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	for (size_t i = 0; i < GPIOTE_CH_NUM; i++) {
    f166:	3301      	adds	r3, #1
    f168:	2b08      	cmp	r3, #8
    f16a:	d18e      	bne.n	f08a <gpiote_pin_int_cfg+0x1e>
    f16c:	e7a9      	b.n	f0c2 <gpiote_pin_int_cfg+0x56>
				pol = NRF_GPIOTE_POLARITY_TOGGLE;
    f16e:	2403      	movs	r4, #3
    f170:	e7cb      	b.n	f10a <gpiote_pin_int_cfg+0x9e>
    f172:	3101      	adds	r1, #1
	for (u8_t channel = 0; channel < GPIOTE_CH_NUM; ++channel) {
    f174:	2908      	cmp	r1, #8
    f176:	d1c9      	bne.n	f10c <gpiote_pin_int_cfg+0xa0>
	return -ENODEV;
    f178:	f06f 0012 	mvn.w	r0, #18
    f17c:	e7f2      	b.n	f164 <gpiote_pin_int_cfg+0xf8>
	if ((BIT(pin) & (data->active_level ^ data->inverted)) != 0) {
    f17e:	69f1      	ldr	r1, [r6, #28]
    f180:	6933      	ldr	r3, [r6, #16]
			nrf_gpio_cfg_sense_set(abs_pin, sense);
    f182:	4610      	mov	r0, r2
	if ((BIT(pin) & (data->active_level ^ data->inverted)) != 0) {
    f184:	404b      	eors	r3, r1
    f186:	fa23 f404 	lsr.w	r4, r3, r4
		return NRF_GPIO_PIN_SENSE_HIGH;
    f18a:	f014 0f01 	tst.w	r4, #1
			nrf_gpio_cfg_sense_set(abs_pin, sense);
    f18e:	bf0c      	ite	eq
    f190:	2103      	moveq	r1, #3
    f192:	2102      	movne	r1, #2
    f194:	f7ff ff58 	bl	f048 <nrf_gpio_cfg_sense_set>
	int res = 0;
    f198:	4638      	mov	r0, r7
    f19a:	e7e3      	b.n	f164 <gpiote_pin_int_cfg+0xf8>
    f19c:	40031000 	.word	0x40031000
    f1a0:	40031100 	.word	0x40031100

0000f1a4 <gpio_nrfx_init>:
#endif
	}
}

static int gpio_nrfx_init(struct device *port)
{
    f1a4:	b508      	push	{r3, lr}
	static bool gpio_initialized;

	if (!gpio_initialized) {
    f1a6:	4b09      	ldr	r3, [pc, #36]	; (f1cc <gpio_nrfx_init+0x28>)
    f1a8:	781a      	ldrb	r2, [r3, #0]
    f1aa:	b96a      	cbnz	r2, f1c8 <gpio_nrfx_init+0x24>
		gpio_initialized = true;
    f1ac:	2101      	movs	r1, #1
		IRQ_CONNECT(DT_NORDIC_NRF_GPIOTE_GPIOTE_0_IRQ_0,
    f1ae:	2031      	movs	r0, #49	; 0x31
		gpio_initialized = true;
    f1b0:	7019      	strb	r1, [r3, #0]
		IRQ_CONNECT(DT_NORDIC_NRF_GPIOTE_GPIOTE_0_IRQ_0,
    f1b2:	2105      	movs	r1, #5
    f1b4:	f7fe fca6 	bl	db04 <z_arm_irq_priority_set>
			    DT_NORDIC_NRF_GPIOTE_GPIOTE_0_IRQ_0_PRIORITY,
			    gpiote_event_handler, NULL, 0);

		irq_enable(DT_NORDIC_NRF_GPIOTE_GPIOTE_0_IRQ_0);
    f1b8:	2031      	movs	r0, #49	; 0x31
    f1ba:	f7fe fc93 	bl	dae4 <z_arch_irq_enable>
    f1be:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
    f1c2:	4b03      	ldr	r3, [pc, #12]	; (f1d0 <gpio_nrfx_init+0x2c>)
    f1c4:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
		nrf_gpiote_int_enable(NRF_GPIOTE_INT_PORT_MASK);
	}

	return 0;
}
    f1c8:	2000      	movs	r0, #0
    f1ca:	bd08      	pop	{r3, pc}
    f1cc:	20024330 	.word	0x20024330
    f1d0:	40031000 	.word	0x40031000

0000f1d4 <gpio_nrfx_config>:
{
    f1d4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    f1d8:	4680      	mov	r8, r0
	struct gpio_nrfx_data *data = get_port_data(port);
    f1da:	6885      	ldr	r5, [r0, #8]
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK)) {
    f1dc:	f403 4070 	and.w	r0, r3, #61440	; 0xf000
    f1e0:	f5b0 4f80 	cmp.w	r0, #16384	; 0x4000
{
    f1e4:	461e      	mov	r6, r3
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK)) {
    f1e6:	d049      	beq.n	f27c <gpio_nrfx_config+0xa8>
    f1e8:	dc2c      	bgt.n	f244 <gpio_nrfx_config+0x70>
    f1ea:	f5b0 5f80 	cmp.w	r0, #4096	; 0x1000
    f1ee:	d03d      	beq.n	f26c <gpio_nrfx_config+0x98>
    f1f0:	f5b0 5f40 	cmp.w	r0, #12288	; 0x3000
    f1f4:	d03e      	beq.n	f274 <gpio_nrfx_config+0xa0>
    f1f6:	bb60      	cbnz	r0, f252 <gpio_nrfx_config+0x7e>
	if ((flags & GPIO_PUD_MASK) == GPIO_PUD_PULL_UP) {
    f1f8:	f406 7740 	and.w	r7, r6, #768	; 0x300
    f1fc:	f5b7 7f80 	cmp.w	r7, #256	; 0x100
    f200:	d03e      	beq.n	f280 <gpio_nrfx_config+0xac>
		pull = NRF_GPIO_PIN_PULLUP;
    f202:	f5a7 7400 	sub.w	r4, r7, #512	; 0x200
    f206:	4263      	negs	r3, r4
    f208:	4163      	adcs	r3, r4
	if (access_op == GPIO_ACCESS_BY_PORT) {
    f20a:	2901      	cmp	r1, #1
		from_pin = pin;
    f20c:	bf19      	ittee	ne
    f20e:	b2d4      	uxtbne	r4, r2
		to_pin   = pin;
    f210:	46a1      	movne	r9, r4
		to_pin   = 31U;
    f212:	f04f 091f 	moveq.w	r9, #31
		from_pin = 0U;
    f216:	2400      	moveq	r4, #0
    f218:	f04f 0b01 	mov.w	fp, #1
	dir = ((flags & GPIO_DIR_MASK) == GPIO_DIR_OUT)
    f21c:	f006 0c01 	and.w	ip, r6, #1
                               | ((uint32_t)input << GPIO_PIN_CNF_INPUT_Pos)
    f220:	ea4f 074c 	mov.w	r7, ip, lsl #1
                               | ((uint32_t)drive << GPIO_PIN_CNF_DRIVE_Pos)
    f224:	ea47 070c 	orr.w	r7, r7, ip
    f228:	ea47 2000 	orr.w	r0, r7, r0, lsl #8
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
    f22c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; f2f8 <gpio_nrfx_config+0x124>
                               | ((uint32_t)drive << GPIO_PIN_CNF_DRIVE_Pos)
    f230:	ea40 0783 	orr.w	r7, r0, r3, lsl #2
		WRITE_BIT(data->pin_int_en, curr_pin, flags & GPIO_INT);
    f234:	f006 0302 	and.w	r3, r6, #2
	for (u8_t curr_pin = from_pin; curr_pin <= to_pin; ++curr_pin) {
    f238:	45a1      	cmp	r9, r4
    f23a:	d223      	bcs.n	f284 <gpio_nrfx_config+0xb0>
	return 0;
    f23c:	2000      	movs	r0, #0
}
    f23e:	b003      	add	sp, #12
    f240:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK)) {
    f244:	f5b0 4fe0 	cmp.w	r0, #28672	; 0x7000
    f248:	d016      	beq.n	f278 <gpio_nrfx_config+0xa4>
    f24a:	dc05      	bgt.n	f258 <gpio_nrfx_config+0x84>
    f24c:	f5b0 4fa0 	cmp.w	r0, #20480	; 0x5000
    f250:	d00e      	beq.n	f270 <gpio_nrfx_config+0x9c>
		return -EINVAL;
    f252:	f06f 0015 	mvn.w	r0, #21
    f256:	e7f2      	b.n	f23e <gpio_nrfx_config+0x6a>
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK)) {
    f258:	f5b0 4f40 	cmp.w	r0, #49152	; 0xc000
    f25c:	d004      	beq.n	f268 <gpio_nrfx_config+0x94>
    f25e:	f5b0 4f50 	cmp.w	r0, #53248	; 0xd000
    f262:	d1f6      	bne.n	f252 <gpio_nrfx_config+0x7e>
		drive = NRF_GPIO_PIN_H0D1;
    f264:	2007      	movs	r0, #7
		break;
    f266:	e7c7      	b.n	f1f8 <gpio_nrfx_config+0x24>
		drive = NRF_GPIO_PIN_S0D1;
    f268:	2006      	movs	r0, #6
		break;
    f26a:	e7c5      	b.n	f1f8 <gpio_nrfx_config+0x24>
		drive = NRF_GPIO_PIN_H0S1;
    f26c:	2001      	movs	r0, #1
		break;
    f26e:	e7c3      	b.n	f1f8 <gpio_nrfx_config+0x24>
		drive = NRF_GPIO_PIN_H0H1;
    f270:	2003      	movs	r0, #3
		break;
    f272:	e7c1      	b.n	f1f8 <gpio_nrfx_config+0x24>
		drive = NRF_GPIO_PIN_D0S1;
    f274:	2004      	movs	r0, #4
		break;
    f276:	e7bf      	b.n	f1f8 <gpio_nrfx_config+0x24>
		drive = NRF_GPIO_PIN_D0H1;
    f278:	2005      	movs	r0, #5
		break;
    f27a:	e7bd      	b.n	f1f8 <gpio_nrfx_config+0x24>
		drive = NRF_GPIO_PIN_S0H1;
    f27c:	2002      	movs	r0, #2
    f27e:	e7bb      	b.n	f1f8 <gpio_nrfx_config+0x24>
		pull = NRF_GPIO_PIN_PULLUP;
    f280:	2303      	movs	r3, #3
    f282:	e7c2      	b.n	f20a <gpio_nrfx_config+0x36>
	return port->config->config_info;
    f284:	f8d8 2000 	ldr.w	r2, [r8]
		nrf_gpio_cfg(NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num,
    f288:	6892      	ldr	r2, [r2, #8]
    f28a:	7911      	ldrb	r1, [r2, #4]
    f28c:	f004 021f 	and.w	r2, r4, #31
    f290:	ea42 1241 	orr.w	r2, r2, r1, lsl #5
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
    f294:	3280      	adds	r2, #128	; 0x80
    f296:	f84a 7022 	str.w	r7, [sl, r2, lsl #2]
    f29a:	68a9      	ldr	r1, [r5, #8]
    f29c:	fa0b f204 	lsl.w	r2, fp, r4
		WRITE_BIT(data->pin_int_en, curr_pin, flags & GPIO_INT);
    f2a0:	2b00      	cmp	r3, #0
    f2a2:	d025      	beq.n	f2f0 <gpio_nrfx_config+0x11c>
    f2a4:	4311      	orrs	r1, r2
    f2a6:	60a9      	str	r1, [r5, #8]
    f2a8:	6969      	ldr	r1, [r5, #20]
		WRITE_BIT(data->trig_edge, curr_pin, flags & GPIO_INT_EDGE);
    f2aa:	06b0      	lsls	r0, r6, #26
    f2ac:	bf4c      	ite	mi
    f2ae:	4311      	orrmi	r1, r2
    f2b0:	4391      	bicpl	r1, r2
    f2b2:	6169      	str	r1, [r5, #20]
    f2b4:	69a9      	ldr	r1, [r5, #24]
		WRITE_BIT(data->double_edge, curr_pin,
    f2b6:	0670      	lsls	r0, r6, #25
    f2b8:	bf4c      	ite	mi
    f2ba:	4311      	orrmi	r1, r2
    f2bc:	4391      	bicpl	r1, r2
    f2be:	61a9      	str	r1, [r5, #24]
    f2c0:	6929      	ldr	r1, [r5, #16]
		WRITE_BIT(data->active_level, curr_pin,
    f2c2:	0770      	lsls	r0, r6, #29
    f2c4:	bf4c      	ite	mi
    f2c6:	4311      	orrmi	r1, r2
    f2c8:	4391      	bicpl	r1, r2
    f2ca:	6129      	str	r1, [r5, #16]
    f2cc:	69e9      	ldr	r1, [r5, #28]
		WRITE_BIT(data->inverted, curr_pin, flags & GPIO_POL_INV);
    f2ce:	0630      	lsls	r0, r6, #24
    f2d0:	bf4c      	ite	mi
    f2d2:	430a      	orrmi	r2, r1
    f2d4:	ea21 0202 	bicpl.w	r2, r1, r2
    f2d8:	61ea      	str	r2, [r5, #28]
		res = gpiote_pin_int_cfg(port, curr_pin);
    f2da:	4621      	mov	r1, r4
    f2dc:	4640      	mov	r0, r8
    f2de:	9301      	str	r3, [sp, #4]
    f2e0:	f7ff fec4 	bl	f06c <gpiote_pin_int_cfg>
		if (res != 0) {
    f2e4:	2800      	cmp	r0, #0
    f2e6:	d1aa      	bne.n	f23e <gpio_nrfx_config+0x6a>
	for (u8_t curr_pin = from_pin; curr_pin <= to_pin; ++curr_pin) {
    f2e8:	3401      	adds	r4, #1
    f2ea:	b2e4      	uxtb	r4, r4
    f2ec:	9b01      	ldr	r3, [sp, #4]
    f2ee:	e7a3      	b.n	f238 <gpio_nrfx_config+0x64>
		WRITE_BIT(data->pin_int_en, curr_pin, flags & GPIO_INT);
    f2f0:	ea21 0102 	bic.w	r1, r1, r2
    f2f4:	e7d7      	b.n	f2a6 <gpio_nrfx_config+0xd2>
    f2f6:	bf00      	nop
    f2f8:	40842500 	.word	0x40842500

0000f2fc <gpiote_event_handler>:
{
    f2fc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    return (*(uint32_t *)nrf_gpiote_event_addr_get(event) == 0x1UL) ? true : false;
    f300:	4e48      	ldr	r6, [pc, #288]	; (f424 <gpiote_event_handler+0x128>)
    f302:	6835      	ldr	r5, [r6, #0]
	if (port_event) {
    f304:	2d01      	cmp	r5, #1
    f306:	d161      	bne.n	f3cc <gpiote_event_handler+0xd0>
	u32_t bit = 1U << pin;
    f308:	462f      	mov	r7, r5
	u32_t pin = 0U;
    f30a:	f04f 0900 	mov.w	r9, #0
	struct gpio_nrfx_data *data = get_port_data(port);
    f30e:	4a46      	ldr	r2, [pc, #280]	; (f428 <gpiote_event_handler+0x12c>)
    f310:	6893      	ldr	r3, [r2, #8]
	return port->config->config_info;
    f312:	6812      	ldr	r2, [r2, #0]
	u32_t pin_states = ~(port_in ^ data->inverted ^ data->active_level);
    f314:	69dc      	ldr	r4, [r3, #28]
	return port->config->config_info;
    f316:	f8d2 8008 	ldr.w	r8, [r2, #8]
	u32_t out = data->int_en & data->pin_int_en;
    f31a:	e9d3 1202 	ldrd	r1, r2, [r3, #8]
    f31e:	400a      	ands	r2, r1
	out &= ~data->trig_edge & ~data->double_edge;
    f320:	e9d3 1005 	ldrd	r1, r0, [r3, #20]
    f324:	4301      	orrs	r1, r0
    f326:	ea22 0201 	bic.w	r2, r2, r1
	u32_t port_in = nrf_gpio_port_in_read(cfg->port);
    f32a:	f8d8 1000 	ldr.w	r1, [r8]
	u32_t pin_states = ~(port_in ^ data->inverted ^ data->active_level);
    f32e:	691b      	ldr	r3, [r3, #16]
}


__STATIC_INLINE uint32_t nrf_gpio_port_in_read(NRF_GPIO_Type const * p_reg)
{
    return p_reg->IN;
    f330:	6909      	ldr	r1, [r1, #16]
    f332:	405c      	eors	r4, r3
    f334:	404c      	eors	r4, r1
	u32_t out = pin_states & level_pins;
    f336:	ea22 0404 	bic.w	r4, r2, r4
	while (level_pins) {
    f33a:	2a00      	cmp	r2, #0
    f33c:	d135      	bne.n	f3aa <gpiote_event_handler+0xae>
    *(uint32_t *)nrf_gpiote_event_addr_get(event) = 0;
    f33e:	6032      	str	r2, [r6, #0]
	u32_t fired_triggers[GPIO_COUNT] = {0};
    f340:	2300      	movs	r3, #0
		if (nrf_gpiote_int_is_enabled(BIT(i)) &&
    f342:	2701      	movs	r7, #1
    f344:	469e      	mov	lr, r3
    return (NRF_GPIOTE->INTENSET & mask);
    f346:	4e39      	ldr	r6, [pc, #228]	; (f42c <gpiote_event_handler+0x130>)
    f348:	f8df c0e4 	ldr.w	ip, [pc, #228]	; f430 <gpiote_event_handler+0x134>
    f34c:	f8d6 2304 	ldr.w	r2, [r6, #772]	; 0x304
    f350:	fa07 f103 	lsl.w	r1, r7, r3
    f354:	4211      	tst	r1, r2
    f356:	d00f      	beq.n	f378 <gpiote_event_handler+0x7c>
    f358:	eb03 020c 	add.w	r2, r3, ip
    f35c:	0092      	lsls	r2, r2, #2
    f35e:	6811      	ldr	r1, [r2, #0]
    f360:	2901      	cmp	r1, #1
    f362:	d109      	bne.n	f378 <gpiote_event_handler+0x7c>
    return ((NRF_GPIOTE->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
    f364:	f503 70a2 	add.w	r0, r3, #324	; 0x144
    f368:	f856 0020 	ldr.w	r0, [r6, r0, lsl #2]
    *(uint32_t *)nrf_gpiote_event_addr_get(event) = 0;
    f36c:	f8c2 e000 	str.w	lr, [r2]
    return ((NRF_GPIOTE->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
    f370:	f3c0 2004 	ubfx	r0, r0, #8, #5
			fired_triggers[abs_pin / 32U] |= BIT(abs_pin % 32);
    f374:	4081      	lsls	r1, r0
    f376:	430c      	orrs	r4, r1
	for (size_t i = 0; i < GPIOTE_CH_NUM; i++) {
    f378:	3301      	adds	r3, #1
    f37a:	2b08      	cmp	r3, #8
    f37c:	d1e6      	bne.n	f34c <gpiote_event_handler+0x50>
	if (fired_triggers[0]) {
    f37e:	b33c      	cbz	r4, f3d0 <gpiote_event_handler+0xd4>
	struct gpio_nrfx_data *data = get_port_data(port);
    f380:	4f29      	ldr	r7, [pc, #164]	; (f428 <gpiote_event_handler+0x12c>)
    f382:	f8d7 8008 	ldr.w	r8, [r7, #8]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
    f386:	f8d8 1000 	ldr.w	r1, [r8]
    f38a:	b309      	cbz	r1, f3d0 <gpiote_event_handler+0xd4>

#define SYS_SLIST_STATIC_INIT(ptr_to_list) {NULL, NULL}

static inline sys_snode_t *z_snode_next_peek(sys_snode_t *node)
{
	return node->next;
    f38c:	680e      	ldr	r6, [r1, #0]
		if ((cb->pin_mask & pins) & data->int_en) {
    f38e:	f8d8 300c 	ldr.w	r3, [r8, #12]
    f392:	688a      	ldr	r2, [r1, #8]
    f394:	4023      	ands	r3, r4
    f396:	4213      	tst	r3, r2
    f398:	d003      	beq.n	f3a2 <gpiote_event_handler+0xa6>
			cb->handler(port, cb, pins);
    f39a:	684b      	ldr	r3, [r1, #4]
    f39c:	4622      	mov	r2, r4
    f39e:	4638      	mov	r0, r7
    f3a0:	4798      	blx	r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
    f3a2:	b1ae      	cbz	r6, f3d0 <gpiote_event_handler+0xd4>
    f3a4:	4631      	mov	r1, r6
    f3a6:	6836      	ldr	r6, [r6, #0]
    f3a8:	e7f1      	b.n	f38e <gpiote_event_handler+0x92>
		if (level_pins & bit) {
    f3aa:	423a      	tst	r2, r7
    f3ac:	d00a      	beq.n	f3c4 <gpiote_event_handler+0xc8>
			u32_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
    f3ae:	f898 3004 	ldrb.w	r3, [r8, #4]
    f3b2:	f009 001f 	and.w	r0, r9, #31
			nrf_gpio_cfg_sense_set(abs_pin, NRF_GPIO_PIN_NOSENSE);
    f3b6:	2100      	movs	r1, #0
    f3b8:	ea40 1043 	orr.w	r0, r0, r3, lsl #5
    f3bc:	f7ff fe44 	bl	f048 <nrf_gpio_cfg_sense_set>
			level_pins &= ~bit;
    f3c0:	ea22 0207 	bic.w	r2, r2, r7
		++pin;
    f3c4:	f109 0901 	add.w	r9, r9, #1
		bit <<= 1;
    f3c8:	007f      	lsls	r7, r7, #1
    f3ca:	e7b6      	b.n	f33a <gpiote_event_handler+0x3e>
	u32_t fired_triggers[GPIO_COUNT] = {0};
    f3cc:	2400      	movs	r4, #0
    f3ce:	e7b7      	b.n	f340 <gpiote_event_handler+0x44>
	if (port_event) {
    f3d0:	2d01      	cmp	r5, #1
    f3d2:	d10d      	bne.n	f3f0 <gpiote_event_handler+0xf4>
	u32_t pin = 0U;
    f3d4:	2600      	movs	r6, #0
	const struct gpio_nrfx_data *data = get_port_data(port);
    f3d6:	4b14      	ldr	r3, [pc, #80]	; (f428 <gpiote_event_handler+0x12c>)
    f3d8:	689c      	ldr	r4, [r3, #8]
	return port->config->config_info;
    f3da:	681b      	ldr	r3, [r3, #0]
    f3dc:	689f      	ldr	r7, [r3, #8]
	u32_t out = data->int_en & data->pin_int_en;
    f3de:	e9d4 3202 	ldrd	r3, r2, [r4, #8]
    f3e2:	401a      	ands	r2, r3
	out &= ~data->trig_edge & ~data->double_edge;
    f3e4:	e9d4 3105 	ldrd	r3, r1, [r4, #20]
    f3e8:	430b      	orrs	r3, r1
    f3ea:	ea22 0203 	bic.w	r2, r2, r3
	while (level_pins) {
    f3ee:	b90a      	cbnz	r2, f3f4 <gpiote_event_handler+0xf8>
}
    f3f0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		if (level_pins & bit) {
    f3f4:	4215      	tst	r5, r2
    f3f6:	d012      	beq.n	f41e <gpiote_event_handler+0x122>
	if ((BIT(pin) & (data->active_level ^ data->inverted)) != 0) {
    f3f8:	69e1      	ldr	r1, [r4, #28]
    f3fa:	6923      	ldr	r3, [r4, #16]
			u32_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
    f3fc:	f897 c004 	ldrb.w	ip, [r7, #4]
	if ((BIT(pin) & (data->active_level ^ data->inverted)) != 0) {
    f400:	404b      	eors	r3, r1
    f402:	40f3      	lsrs	r3, r6
		return NRF_GPIO_PIN_SENSE_HIGH;
    f404:	f013 0f01 	tst.w	r3, #1
			u32_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
    f408:	f006 001f 	and.w	r0, r6, #31
			nrf_gpio_cfg_sense_set(abs_pin, sense);
    f40c:	bf0c      	ite	eq
    f40e:	2103      	moveq	r1, #3
    f410:	2102      	movne	r1, #2
    f412:	ea40 104c 	orr.w	r0, r0, ip, lsl #5
    f416:	f7ff fe17 	bl	f048 <nrf_gpio_cfg_sense_set>
			level_pins &= ~bit;
    f41a:	ea22 0205 	bic.w	r2, r2, r5
		++pin;
    f41e:	3601      	adds	r6, #1
		bit <<= 1;
    f420:	006d      	lsls	r5, r5, #1
    f422:	e7e4      	b.n	f3ee <gpiote_event_handler+0xf2>
    f424:	4003117c 	.word	0x4003117c
    f428:	20025908 	.word	0x20025908
    f42c:	40031000 	.word	0x40031000
    f430:	1000c440 	.word	0x1000c440

0000f434 <spi_3_init>:
#ifdef CONFIG_SPI_2_NRF_SPIM
SPI_NRFX_SPIM_DEVICE(2);
#endif

#ifdef CONFIG_SPI_3_NRF_SPIM
SPI_NRFX_SPIM_DEVICE(3);
    f434:	b510      	push	{r4, lr}
    f436:	4604      	mov	r4, r0
    f438:	2200      	movs	r2, #0
    f43a:	2101      	movs	r1, #1
    f43c:	200b      	movs	r0, #11
    f43e:	f7fe fb61 	bl	db04 <z_arm_irq_priority_set>
	return dev->config->config_info;
    f442:	6823      	ldr	r3, [r4, #0]
	nrfx_err_t result = nrfx_spim_init(&get_dev_config(dev)->spim,
    f444:	4a11      	ldr	r2, [pc, #68]	; (f48c <spi_3_init+0x58>)
	return dev->config->config_info;
    f446:	6898      	ldr	r0, [r3, #8]
	nrfx_err_t result = nrfx_spim_init(&get_dev_config(dev)->spim,
    f448:	4623      	mov	r3, r4
    f44a:	f100 010c 	add.w	r1, r0, #12
    f44e:	f000 fb3d 	bl	facc <nrfx_spim_init>
	if (result != NRFX_SUCCESS) {
    f452:	4b0f      	ldr	r3, [pc, #60]	; (f490 <spi_3_init+0x5c>)
    f454:	4298      	cmp	r0, r3
    f456:	d014      	beq.n	f482 <spi_3_init+0x4e>
		LOG_ERR("Failed to initialize device: %s",
    f458:	2301      	movs	r3, #1
    f45a:	f04f 0200 	mov.w	r2, #0
    f45e:	490d      	ldr	r1, [pc, #52]	; (f494 <spi_3_init+0x60>)
    f460:	f363 0202 	bfi	r2, r3, #0, #3
    f464:	4b0c      	ldr	r3, [pc, #48]	; (f498 <spi_3_init+0x64>)
    f466:	f36f 02c5 	bfc	r2, #3, #3
    f46a:	1a5b      	subs	r3, r3, r1
    f46c:	08db      	lsrs	r3, r3, #3
    f46e:	f363 128f 	bfi	r2, r3, #6, #10
    f472:	6823      	ldr	r3, [r4, #0]
    f474:	4809      	ldr	r0, [pc, #36]	; (f49c <spi_3_init+0x68>)
    f476:	6819      	ldr	r1, [r3, #0]
    f478:	f001 fedb 	bl	11232 <log_1>
		return -EBUSY;
    f47c:	f06f 000f 	mvn.w	r0, #15
SPI_NRFX_SPIM_DEVICE(3);
    f480:	bd10      	pop	{r4, pc}
	spi_context_unlock_unconditionally(&get_dev_data(dev)->ctx);
    f482:	68a0      	ldr	r0, [r4, #8]
    f484:	f002 fce4 	bl	11e50 <spi_context_unlock_unconditionally>
	return 0;
    f488:	2000      	movs	r0, #0
SPI_NRFX_SPIM_DEVICE(3);
    f48a:	e7f9      	b.n	f480 <spi_3_init+0x4c>
    f48c:	0000f52d 	.word	0x0000f52d
    f490:	0bad0000 	.word	0x0bad0000
    f494:	00012550 	.word	0x00012550
    f498:	00012590 	.word	0x00012590
    f49c:	00012ec6 	.word	0x00012ec6

0000f4a0 <transfer_next_chunk>:
{
    f4a0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	struct spi_nrfx_data *dev_data = get_dev_data(dev);
    f4a2:	6885      	ldr	r5, [r0, #8]
	return !!(ctx->rx_buf && ctx->rx_len);
}

static inline size_t spi_context_longest_current_buf(struct spi_context *ctx)
{
	if (!ctx->tx_len) {
    f4a4:	6bea      	ldr	r2, [r5, #60]	; 0x3c
    f4a6:	6c6b      	ldr	r3, [r5, #68]	; 0x44
    f4a8:	b98a      	cbnz	r2, f4ce <transfer_next_chunk+0x2e>
	if (chunk_len > 0) {
    f4aa:	2b00      	cmp	r3, #0
    f4ac:	d133      	bne.n	f516 <transfer_next_chunk+0x76>
	int error = 0;
    f4ae:	461c      	mov	r4, r3
	_spi_context_cs_control(ctx, on, false);
    f4b0:	2200      	movs	r2, #0
    f4b2:	4628      	mov	r0, r5
    f4b4:	4611      	mov	r1, r2
    f4b6:	f002 fca1 	bl	11dfc <_spi_context_cs_control.isra.7>
	ctx->sync_status = status;
    f4ba:	626c      	str	r4, [r5, #36]	; 0x24
	z_impl_k_sem_give(sem);
    f4bc:	f105 0014 	add.w	r0, r5, #20
    f4c0:	f001 f956 	bl	10770 <z_impl_k_sem_give>
	dev_data->busy = false;
    f4c4:	2300      	movs	r3, #0
    f4c6:	f885 304c 	strb.w	r3, [r5, #76]	; 0x4c
}
    f4ca:	b004      	add	sp, #16
    f4cc:	bd70      	pop	{r4, r5, r6, pc}
		return ctx->rx_len;
	} else if (!ctx->rx_len) {
    f4ce:	b323      	cbz	r3, f51a <transfer_next_chunk+0x7a>
    f4d0:	4293      	cmp	r3, r2
    f4d2:	4619      	mov	r1, r3
    f4d4:	bf28      	it	cs
    f4d6:	4611      	movcs	r1, r2
	return dev->config->config_info;
    f4d8:	6800      	ldr	r0, [r0, #0]
		const u8_t *tx_buf = ctx->tx_buf;
    f4da:	6bac      	ldr	r4, [r5, #56]	; 0x38
	return dev->config->config_info;
    f4dc:	6880      	ldr	r0, [r0, #8]
		xfer.p_tx_buffer = tx_buf;
    f4de:	9400      	str	r4, [sp, #0]
    f4e0:	6886      	ldr	r6, [r0, #8]
    f4e2:	42b1      	cmp	r1, r6
    f4e4:	bf28      	it	cs
    f4e6:	4631      	movcs	r1, r6
		dev_data->chunk_len = chunk_len;
    f4e8:	64a9      	str	r1, [r5, #72]	; 0x48
	return !!(ctx->tx_buf && ctx->tx_len);
    f4ea:	b1c4      	cbz	r4, f51e <transfer_next_chunk+0x7e>
		xfer.tx_length   = spi_context_tx_buf_on(ctx) ? chunk_len : 0;
    f4ec:	2a00      	cmp	r2, #0
    f4ee:	bf18      	it	ne
    f4f0:	460a      	movne	r2, r1
    f4f2:	9201      	str	r2, [sp, #4]
		xfer.p_rx_buffer = ctx->rx_buf;
    f4f4:	6c2a      	ldr	r2, [r5, #64]	; 0x40
    f4f6:	9202      	str	r2, [sp, #8]
	return !!(ctx->rx_buf && ctx->rx_len);
    f4f8:	b19a      	cbz	r2, f522 <transfer_next_chunk+0x82>
		xfer.rx_length   = spi_context_rx_buf_on(ctx) ? chunk_len : 0;
    f4fa:	2b00      	cmp	r3, #0
    f4fc:	bf18      	it	ne
    f4fe:	460b      	movne	r3, r1
			result = nrfx_spim_xfer(&dev_config->spim, &xfer, 0);
    f500:	2200      	movs	r2, #0
    f502:	4669      	mov	r1, sp
		xfer.rx_length   = spi_context_rx_buf_on(ctx) ? chunk_len : 0;
    f504:	9303      	str	r3, [sp, #12]
			result = nrfx_spim_xfer(&dev_config->spim, &xfer, 0);
    f506:	f000 fb83 	bl	fc10 <nrfx_spim_xfer>
			if (result == NRFX_SUCCESS) {
    f50a:	4b07      	ldr	r3, [pc, #28]	; (f528 <transfer_next_chunk+0x88>)
    f50c:	4298      	cmp	r0, r3
    f50e:	d0dc      	beq.n	f4ca <transfer_next_chunk+0x2a>
    f510:	f06f 0404 	mvn.w	r4, #4
    f514:	e7cc      	b.n	f4b0 <transfer_next_chunk+0x10>
    f516:	4619      	mov	r1, r3
    f518:	e7de      	b.n	f4d8 <transfer_next_chunk+0x38>
	} else if (!ctx->rx_len) {
    f51a:	4611      	mov	r1, r2
    f51c:	e7dc      	b.n	f4d8 <transfer_next_chunk+0x38>
		xfer.tx_length   = spi_context_tx_buf_on(ctx) ? chunk_len : 0;
    f51e:	4622      	mov	r2, r4
    f520:	e7e7      	b.n	f4f2 <transfer_next_chunk+0x52>
		xfer.rx_length   = spi_context_rx_buf_on(ctx) ? chunk_len : 0;
    f522:	4613      	mov	r3, r2
    f524:	e7ec      	b.n	f500 <transfer_next_chunk+0x60>
    f526:	bf00      	nop
    f528:	0bad0000 	.word	0x0bad0000

0000f52c <event_handler>:
	if (p_event->type == NRFX_SPIM_EVENT_DONE) {
    f52c:	7800      	ldrb	r0, [r0, #0]
{
    f52e:	b538      	push	{r3, r4, r5, lr}
    f530:	460d      	mov	r5, r1
	if (p_event->type == NRFX_SPIM_EVENT_DONE) {
    f532:	2800      	cmp	r0, #0
    f534:	d15b      	bne.n	f5ee <event_handler+0xc2>
	struct spi_nrfx_data *dev_data = get_dev_data(dev);
    f536:	688c      	ldr	r4, [r1, #8]
	if (!ctx->tx_len) {
    f538:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    f53a:	b193      	cbz	r3, f562 <event_handler+0x36>
		spi_context_update_tx(&dev_data->ctx, 1, dev_data->chunk_len);
    f53c:	6ca2      	ldr	r2, [r4, #72]	; 0x48
	if (len > ctx->tx_len) {
    f53e:	429a      	cmp	r2, r3
    f540:	d929      	bls.n	f596 <event_handler+0x6a>
		LOG_ERR("Update exceeds current buffer");
    f542:	2301      	movs	r3, #1
    f544:	f04f 0100 	mov.w	r1, #0
    f548:	4a29      	ldr	r2, [pc, #164]	; (f5f0 <event_handler+0xc4>)
    f54a:	f363 0102 	bfi	r1, r3, #0, #3
    f54e:	4b29      	ldr	r3, [pc, #164]	; (f5f4 <event_handler+0xc8>)
    f550:	f360 01c5 	bfi	r1, r0, #3, #3
    f554:	1a9b      	subs	r3, r3, r2
    f556:	08db      	lsrs	r3, r3, #3
    f558:	f363 118f 	bfi	r1, r3, #6, #10
    f55c:	4826      	ldr	r0, [pc, #152]	; (f5f8 <event_handler+0xcc>)
    f55e:	f001 fe5b 	bl	11218 <log_0>
	if (!ctx->rx_len) {
    f562:	6c63      	ldr	r3, [r4, #68]	; 0x44
    f564:	b193      	cbz	r3, f58c <event_handler+0x60>
		spi_context_update_rx(&dev_data->ctx, 1, dev_data->chunk_len);
    f566:	6ca2      	ldr	r2, [r4, #72]	; 0x48
	if (len > ctx->rx_len) {
    f568:	429a      	cmp	r2, r3
    f56a:	d92a      	bls.n	f5c2 <event_handler+0x96>
		LOG_ERR("Update exceeds current buffer");
    f56c:	2301      	movs	r3, #1
    f56e:	f04f 0100 	mov.w	r1, #0
    f572:	4a1f      	ldr	r2, [pc, #124]	; (f5f0 <event_handler+0xc4>)
    f574:	f363 0102 	bfi	r1, r3, #0, #3
    f578:	4b1e      	ldr	r3, [pc, #120]	; (f5f4 <event_handler+0xc8>)
    f57a:	f36f 01c5 	bfc	r1, #3, #3
    f57e:	1a9b      	subs	r3, r3, r2
    f580:	08db      	lsrs	r3, r3, #3
    f582:	f363 118f 	bfi	r1, r3, #6, #10
    f586:	481c      	ldr	r0, [pc, #112]	; (f5f8 <event_handler+0xcc>)
    f588:	f001 fe46 	bl	11218 <log_0>
		transfer_next_chunk(dev);
    f58c:	4628      	mov	r0, r5
}
    f58e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		transfer_next_chunk(dev);
    f592:	f7ff bf85 	b.w	f4a0 <transfer_next_chunk>
	ctx->tx_len -= len;
    f596:	1a9b      	subs	r3, r3, r2
    f598:	63e3      	str	r3, [r4, #60]	; 0x3c
	if (!ctx->tx_len) {
    f59a:	b963      	cbnz	r3, f5b6 <event_handler+0x8a>
		ctx->tx_count--;
    f59c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    f59e:	3b01      	subs	r3, #1
    f5a0:	62e3      	str	r3, [r4, #44]	; 0x2c
		if (ctx->tx_count) {
    f5a2:	b163      	cbz	r3, f5be <event_handler+0x92>
			ctx->current_tx++;
    f5a4:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    f5a6:	f103 0208 	add.w	r2, r3, #8
    f5aa:	62a2      	str	r2, [r4, #40]	; 0x28
			ctx->tx_buf = (const u8_t *)ctx->current_tx->buf;
    f5ac:	689a      	ldr	r2, [r3, #8]
			ctx->tx_len = ctx->current_tx->len / dfs;
    f5ae:	68db      	ldr	r3, [r3, #12]
			ctx->tx_buf = (const u8_t *)ctx->current_tx->buf;
    f5b0:	63a2      	str	r2, [r4, #56]	; 0x38
			ctx->tx_len = ctx->current_tx->len / dfs;
    f5b2:	63e3      	str	r3, [r4, #60]	; 0x3c
    f5b4:	e7d5      	b.n	f562 <event_handler+0x36>
	} else if (ctx->tx_buf) {
    f5b6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    f5b8:	2b00      	cmp	r3, #0
    f5ba:	d0d2      	beq.n	f562 <event_handler+0x36>
		ctx->tx_buf += dfs * len;
    f5bc:	4413      	add	r3, r2
    f5be:	63a3      	str	r3, [r4, #56]	; 0x38
    f5c0:	e7cf      	b.n	f562 <event_handler+0x36>
	ctx->rx_len -= len;
    f5c2:	1a9b      	subs	r3, r3, r2
    f5c4:	6463      	str	r3, [r4, #68]	; 0x44
	if (!ctx->rx_len) {
    f5c6:	b963      	cbnz	r3, f5e2 <event_handler+0xb6>
		ctx->rx_count--;
    f5c8:	6b63      	ldr	r3, [r4, #52]	; 0x34
    f5ca:	3b01      	subs	r3, #1
    f5cc:	6363      	str	r3, [r4, #52]	; 0x34
		if (ctx->rx_count) {
    f5ce:	b163      	cbz	r3, f5ea <event_handler+0xbe>
			ctx->current_rx++;
    f5d0:	6b23      	ldr	r3, [r4, #48]	; 0x30
    f5d2:	f103 0208 	add.w	r2, r3, #8
    f5d6:	6322      	str	r2, [r4, #48]	; 0x30
			ctx->rx_buf = (u8_t *)ctx->current_rx->buf;
    f5d8:	689a      	ldr	r2, [r3, #8]
			ctx->rx_len = ctx->current_rx->len / dfs;
    f5da:	68db      	ldr	r3, [r3, #12]
			ctx->rx_buf = (u8_t *)ctx->current_rx->buf;
    f5dc:	6422      	str	r2, [r4, #64]	; 0x40
			ctx->rx_len = ctx->current_rx->len / dfs;
    f5de:	6463      	str	r3, [r4, #68]	; 0x44
    f5e0:	e7d4      	b.n	f58c <event_handler+0x60>
	} else if (ctx->rx_buf) {
    f5e2:	6c23      	ldr	r3, [r4, #64]	; 0x40
    f5e4:	2b00      	cmp	r3, #0
    f5e6:	d0d1      	beq.n	f58c <event_handler+0x60>
		ctx->rx_buf += dfs * len;
    f5e8:	4413      	add	r3, r2
    f5ea:	6423      	str	r3, [r4, #64]	; 0x40
    f5ec:	e7ce      	b.n	f58c <event_handler+0x60>
}
    f5ee:	bd38      	pop	{r3, r4, r5, pc}
    f5f0:	00012550 	.word	0x00012550
    f5f4:	00012590 	.word	0x00012590
    f5f8:	00012ea8 	.word	0x00012ea8

0000f5fc <spi_nrfx_transceive>:
{
    f5fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    f600:	4607      	mov	r7, r0
	k_sem_take(&ctx->lock, K_FOREVER);
    f602:	6880      	ldr	r0, [r0, #8]
    f604:	4688      	mov	r8, r1
    f606:	4616      	mov	r6, r2
    f608:	461d      	mov	r5, r3
    f60a:	3004      	adds	r0, #4
	return z_impl_k_sem_take(sem, timeout);
    f60c:	f04f 31ff 	mov.w	r1, #4294967295
    f610:	f001 f8d4 	bl	107bc <z_impl_k_sem_take>
	struct spi_nrfx_data *dev_data = get_dev_data(dev);
    f614:	68bc      	ldr	r4, [r7, #8]
	if (spi_context_configured(ctx, spi_cfg)) {
    f616:	6823      	ldr	r3, [r4, #0]
    f618:	4598      	cmp	r8, r3
    f61a:	f000 80be 	beq.w	f79a <spi_nrfx_transceive+0x19e>
	if (SPI_OP_MODE_GET(spi_cfg->operation) != SPI_OP_MODE_MASTER) {
    f61e:	f8b8 3004 	ldrh.w	r3, [r8, #4]
	const nrfx_spim_t *spim = &get_dev_config(dev)->spim;
    f622:	6838      	ldr	r0, [r7, #0]
	if (SPI_OP_MODE_GET(spi_cfg->operation) != SPI_OP_MODE_MASTER) {
    f624:	f013 0c01 	ands.w	ip, r3, #1
    f628:	d018      	beq.n	f65c <spi_nrfx_transceive+0x60>
		LOG_ERR("Slave mode is not supported on %s",
    f62a:	2301      	movs	r3, #1
    f62c:	f04f 0200 	mov.w	r2, #0
    f630:	4988      	ldr	r1, [pc, #544]	; (f854 <spi_nrfx_transceive+0x258>)
    f632:	f363 0202 	bfi	r2, r3, #0, #3
    f636:	4b88      	ldr	r3, [pc, #544]	; (f858 <spi_nrfx_transceive+0x25c>)
    f638:	f36f 02c5 	bfc	r2, #3, #3
    f63c:	1a5b      	subs	r3, r3, r1
    f63e:	08db      	lsrs	r3, r3, #3
    f640:	6801      	ldr	r1, [r0, #0]
    f642:	f363 128f 	bfi	r2, r3, #6, #10
    f646:	4885      	ldr	r0, [pc, #532]	; (f85c <spi_nrfx_transceive+0x260>)
    f648:	f001 fdf3 	bl	11232 <log_1>
		return -EINVAL;
    f64c:	f06f 0515 	mvn.w	r5, #21
	z_impl_k_sem_give(sem);
    f650:	1d20      	adds	r0, r4, #4
    f652:	f001 f88d 	bl	10770 <z_impl_k_sem_give>
}
    f656:	4628      	mov	r0, r5
    f658:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	if (spi_cfg->operation & SPI_MODE_LOOP) {
    f65c:	f013 0208 	ands.w	r2, r3, #8
    f660:	d010      	beq.n	f684 <spi_nrfx_transceive+0x88>
		LOG_ERR("Loopback mode is not supported");
    f662:	2301      	movs	r3, #1
    f664:	f04f 0100 	mov.w	r1, #0
    f668:	4a7a      	ldr	r2, [pc, #488]	; (f854 <spi_nrfx_transceive+0x258>)
    f66a:	f363 0102 	bfi	r1, r3, #0, #3
    f66e:	4b7a      	ldr	r3, [pc, #488]	; (f858 <spi_nrfx_transceive+0x25c>)
    f670:	f36c 01c5 	bfi	r1, ip, #3, #3
    f674:	1a9b      	subs	r3, r3, r2
    f676:	08db      	lsrs	r3, r3, #3
    f678:	4879      	ldr	r0, [pc, #484]	; (f860 <spi_nrfx_transceive+0x264>)
    f67a:	f363 118f 	bfi	r1, r3, #6, #10
		LOG_ERR("Word sizes other than 8 bits"
    f67e:	f001 fdcb 	bl	11218 <log_0>
    f682:	e7e3      	b.n	f64c <spi_nrfx_transceive+0x50>
	if ((spi_cfg->operation & SPI_LINES_MASK) != SPI_LINES_SINGLE) {
    f684:	f413 51c0 	ands.w	r1, r3, #6144	; 0x1800
    f688:	d00e      	beq.n	f6a8 <spi_nrfx_transceive+0xac>
		LOG_ERR("Only single line mode is supported");
    f68a:	2301      	movs	r3, #1
    f68c:	f04f 0100 	mov.w	r1, #0
    f690:	f363 0102 	bfi	r1, r3, #0, #3
    f694:	f362 01c5 	bfi	r1, r2, #3, #3
    f698:	4b6f      	ldr	r3, [pc, #444]	; (f858 <spi_nrfx_transceive+0x25c>)
    f69a:	4a6e      	ldr	r2, [pc, #440]	; (f854 <spi_nrfx_transceive+0x258>)
    f69c:	4871      	ldr	r0, [pc, #452]	; (f864 <spi_nrfx_transceive+0x268>)
    f69e:	1a9b      	subs	r3, r3, r2
    f6a0:	08db      	lsrs	r3, r3, #3
    f6a2:	f363 118f 	bfi	r1, r3, #6, #10
    f6a6:	e7ea      	b.n	f67e <spi_nrfx_transceive+0x82>
	if (SPI_WORD_SIZE_GET(spi_cfg->operation) != 8) {
    f6a8:	f3c3 1345 	ubfx	r3, r3, #5, #6
    f6ac:	2b08      	cmp	r3, #8
    f6ae:	d00f      	beq.n	f6d0 <spi_nrfx_transceive+0xd4>
		LOG_ERR("Word sizes other than 8 bits"
    f6b0:	2301      	movs	r3, #1
    f6b2:	f04f 0200 	mov.w	r2, #0
    f6b6:	f363 0202 	bfi	r2, r3, #0, #3
    f6ba:	f361 02c5 	bfi	r2, r1, #3, #3
    f6be:	4b66      	ldr	r3, [pc, #408]	; (f858 <spi_nrfx_transceive+0x25c>)
    f6c0:	4964      	ldr	r1, [pc, #400]	; (f854 <spi_nrfx_transceive+0x258>)
    f6c2:	4869      	ldr	r0, [pc, #420]	; (f868 <spi_nrfx_transceive+0x26c>)
    f6c4:	1a5b      	subs	r3, r3, r1
    f6c6:	08db      	lsrs	r3, r3, #3
    f6c8:	f363 128f 	bfi	r2, r3, #6, #10
    f6cc:	4611      	mov	r1, r2
    f6ce:	e7d6      	b.n	f67e <spi_nrfx_transceive+0x82>
	if (spi_cfg->frequency < 125000) {
    f6d0:	f8d8 2000 	ldr.w	r2, [r8]
    f6d4:	4b65      	ldr	r3, [pc, #404]	; (f86c <spi_nrfx_transceive+0x270>)
    f6d6:	429a      	cmp	r2, r3
    f6d8:	d80f      	bhi.n	f6fa <spi_nrfx_transceive+0xfe>
		LOG_ERR("Frequencies lower than 125 kHz are not supported");
    f6da:	2301      	movs	r3, #1
    f6dc:	f04f 0200 	mov.w	r2, #0
    f6e0:	f363 0202 	bfi	r2, r3, #0, #3
    f6e4:	f361 02c5 	bfi	r2, r1, #3, #3
    f6e8:	4b5b      	ldr	r3, [pc, #364]	; (f858 <spi_nrfx_transceive+0x25c>)
    f6ea:	495a      	ldr	r1, [pc, #360]	; (f854 <spi_nrfx_transceive+0x258>)
    f6ec:	4860      	ldr	r0, [pc, #384]	; (f870 <spi_nrfx_transceive+0x274>)
    f6ee:	1a5b      	subs	r3, r3, r1
    f6f0:	08db      	lsrs	r3, r3, #3
    f6f2:	f363 128f 	bfi	r2, r3, #6, #10
    f6f6:	4611      	mov	r1, r2
    f6f8:	e7c1      	b.n	f67e <spi_nrfx_transceive+0x82>
	if (ctx->config->cs && ctx->config->cs->gpio_dev) {
    f6fa:	f8d8 3008 	ldr.w	r3, [r8, #8]
	return dev->config->config_info;
    f6fe:	f8d0 9008 	ldr.w	r9, [r0, #8]
	ctx->config = spi_cfg;
    f702:	f8c4 8000 	str.w	r8, [r4]
    f706:	2b00      	cmp	r3, #0
    f708:	d06f      	beq.n	f7ea <spi_nrfx_transceive+0x1ee>
    f70a:	6818      	ldr	r0, [r3, #0]
    f70c:	2800      	cmp	r0, #0
    f70e:	d06c      	beq.n	f7ea <spi_nrfx_transceive+0x1ee>
		gpio_pin_configure(ctx->config->cs->gpio_dev,
    f710:	685a      	ldr	r2, [r3, #4]
    f712:	6843      	ldr	r3, [r0, #4]
    f714:	f8d3 a000 	ldr.w	sl, [r3]
    f718:	2301      	movs	r3, #1
    f71a:	47d0      	blx	sl
		gpio_pin_write(ctx->config->cs->gpio_dev,
    f71c:	6822      	ldr	r2, [r4, #0]
    f71e:	6893      	ldr	r3, [r2, #8]
	if (ctx->config->operation & SPI_CS_ACTIVE_HIGH) {
    f720:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
		gpio_pin_write(ctx->config->cs->gpio_dev,
    f724:	e9d3 0100 	ldrd	r0, r1, [r3]
    f728:	43d2      	mvns	r2, r2
    f72a:	0fd2      	lsrs	r2, r2, #31
    f72c:	f002 fb5d 	bl	11dea <gpio_pin_write>
	nrf_spim_configure(spim->p_reg,
    f730:	f8b8 3004 	ldrh.w	r3, [r8, #4]
    f734:	f8d9 1000 	ldr.w	r1, [r9]
	if (SPI_MODE_GET(operation) & SPI_MODE_CPOL) {
    f738:	0798      	lsls	r0, r3, #30
    f73a:	f003 0204 	and.w	r2, r3, #4
    f73e:	d565      	bpl.n	f80c <spi_nrfx_transceive+0x210>
			return NRF_SPIM_MODE_3;
    f740:	2a00      	cmp	r2, #0
    f742:	bf0c      	ite	eq
    f744:	2202      	moveq	r2, #2
    f746:	2203      	movne	r2, #3
                                        nrf_spim_mode_t      spi_mode,
                                        nrf_spim_bit_order_t spi_bit_order)
{
    uint32_t config = (spi_bit_order == NRF_SPIM_BIT_ORDER_MSB_FIRST ?
        SPIM_CONFIG_ORDER_MsbFirst : SPIM_CONFIG_ORDER_LsbFirst);
    switch (spi_mode)
    f748:	2a02      	cmp	r2, #2
	if (operation & SPI_TRANSFER_LSB) {
    f74a:	f3c3 1300 	ubfx	r3, r3, #4, #1
    f74e:	d061      	beq.n	f814 <spi_nrfx_transceive+0x218>
    f750:	2a03      	cmp	r2, #3
    f752:	d062      	beq.n	f81a <spi_nrfx_transceive+0x21e>
    f754:	2a01      	cmp	r2, #1
    f756:	d101      	bne.n	f75c <spi_nrfx_transceive+0x160>
        config |= (SPIM_CONFIG_CPOL_ActiveHigh << SPIM_CONFIG_CPOL_Pos) |
                  (SPIM_CONFIG_CPHA_Leading    << SPIM_CONFIG_CPHA_Pos);
        break;

    case NRF_SPIM_MODE_1:
        config |= (SPIM_CONFIG_CPOL_ActiveHigh << SPIM_CONFIG_CPOL_Pos) |
    f758:	f043 0302 	orr.w	r3, r3, #2
    case NRF_SPIM_MODE_3:
        config |= (SPIM_CONFIG_CPOL_ActiveLow  << SPIM_CONFIG_CPOL_Pos) |
                  (SPIM_CONFIG_CPHA_Trailing   << SPIM_CONFIG_CPHA_Pos);
        break;
    }
    p_reg->CONFIG = config;
    f75c:	f8c1 3554 	str.w	r3, [r1, #1364]	; 0x554
	if (frequency < 250000) {
    f760:	4a44      	ldr	r2, [pc, #272]	; (f874 <spi_nrfx_transceive+0x278>)
	nrf_spim_frequency_set(spim->p_reg,
    f762:	f8d8 3000 	ldr.w	r3, [r8]
	if (frequency < 250000) {
    f766:	4293      	cmp	r3, r2
    f768:	d95a      	bls.n	f820 <spi_nrfx_transceive+0x224>
	} else if (frequency < 500000) {
    f76a:	4a43      	ldr	r2, [pc, #268]	; (f878 <spi_nrfx_transceive+0x27c>)
    f76c:	4293      	cmp	r3, r2
    f76e:	d95a      	bls.n	f826 <spi_nrfx_transceive+0x22a>
	} else if (frequency < 1000000) {
    f770:	4a42      	ldr	r2, [pc, #264]	; (f87c <spi_nrfx_transceive+0x280>)
    f772:	4293      	cmp	r3, r2
    f774:	d95a      	bls.n	f82c <spi_nrfx_transceive+0x230>
	} else if (frequency < 2000000) {
    f776:	4a42      	ldr	r2, [pc, #264]	; (f880 <spi_nrfx_transceive+0x284>)
    f778:	4293      	cmp	r3, r2
    f77a:	d95a      	bls.n	f832 <spi_nrfx_transceive+0x236>
	} else if (frequency < 4000000) {
    f77c:	4a41      	ldr	r2, [pc, #260]	; (f884 <spi_nrfx_transceive+0x288>)
    f77e:	4293      	cmp	r3, r2
    f780:	d95a      	bls.n	f838 <spi_nrfx_transceive+0x23c>
		return NRF_SPIM_FREQ_4M;
    f782:	f502 1274 	add.w	r2, r2, #3997696	; 0x3d0000
    f786:	f502 6210 	add.w	r2, r2, #2304	; 0x900
    f78a:	4293      	cmp	r3, r2
    f78c:	bf8c      	ite	hi
    f78e:	f04f 4300 	movhi.w	r3, #2147483648	; 0x80000000
    f792:	f04f 4380 	movls.w	r3, #1073741824	; 0x40000000
    p_reg->FREQUENCY = (uint32_t)frequency;
    f796:	f8c1 3524 	str.w	r3, [r1, #1316]	; 0x524
		dev_data->busy = true;
    f79a:	2301      	movs	r3, #1
    f79c:	f884 304c 	strb.w	r3, [r4, #76]	; 0x4c
	if (tx_bufs) {
    f7a0:	2e00      	cmp	r6, #0
    f7a2:	d04c      	beq.n	f83e <spi_nrfx_transceive+0x242>
		ctx->current_tx = tx_bufs->buffers;
    f7a4:	6833      	ldr	r3, [r6, #0]
		ctx->tx_count = tx_bufs->count;
    f7a6:	6872      	ldr	r2, [r6, #4]
		ctx->current_tx = tx_bufs->buffers;
    f7a8:	62a3      	str	r3, [r4, #40]	; 0x28
		ctx->tx_count = tx_bufs->count;
    f7aa:	62e2      	str	r2, [r4, #44]	; 0x2c
		ctx->tx_buf = (const u8_t *)ctx->current_tx->buf;
    f7ac:	681a      	ldr	r2, [r3, #0]
		ctx->tx_len = ctx->current_tx->len / dfs;
    f7ae:	685b      	ldr	r3, [r3, #4]
		ctx->tx_buf = (const u8_t *)ctx->current_tx->buf;
    f7b0:	63a2      	str	r2, [r4, #56]	; 0x38
		ctx->tx_len = ctx->current_tx->len / dfs;
    f7b2:	63e3      	str	r3, [r4, #60]	; 0x3c
	if (rx_bufs) {
    f7b4:	2d00      	cmp	r5, #0
    f7b6:	d047      	beq.n	f848 <spi_nrfx_transceive+0x24c>
		ctx->current_rx = rx_bufs->buffers;
    f7b8:	682b      	ldr	r3, [r5, #0]
		ctx->rx_count = rx_bufs->count;
    f7ba:	686a      	ldr	r2, [r5, #4]
		ctx->current_rx = rx_bufs->buffers;
    f7bc:	6323      	str	r3, [r4, #48]	; 0x30
		ctx->rx_count = rx_bufs->count;
    f7be:	6362      	str	r2, [r4, #52]	; 0x34
		ctx->rx_buf = (u8_t *)ctx->current_rx->buf;
    f7c0:	681a      	ldr	r2, [r3, #0]
		ctx->rx_len = ctx->current_rx->len / dfs;
    f7c2:	685b      	ldr	r3, [r3, #4]
		ctx->rx_buf = (u8_t *)ctx->current_rx->buf;
    f7c4:	6422      	str	r2, [r4, #64]	; 0x40
		ctx->rx_len = ctx->current_rx->len / dfs;
    f7c6:	6463      	str	r3, [r4, #68]	; 0x44
	ctx->sync_status = 0;
    f7c8:	2200      	movs	r2, #0
	_spi_context_cs_control(ctx, on, false);
    f7ca:	2101      	movs	r1, #1
	ctx->sync_status = 0;
    f7cc:	6262      	str	r2, [r4, #36]	; 0x24
	_spi_context_cs_control(ctx, on, false);
    f7ce:	4620      	mov	r0, r4
    f7d0:	f002 fb14 	bl	11dfc <_spi_context_cs_control.isra.7>
		transfer_next_chunk(dev);
    f7d4:	4638      	mov	r0, r7
    f7d6:	f7ff fe63 	bl	f4a0 <transfer_next_chunk>
	return z_impl_k_sem_take(sem, timeout);
    f7da:	f04f 31ff 	mov.w	r1, #4294967295
    f7de:	f104 0014 	add.w	r0, r4, #20
    f7e2:	f000 ffeb 	bl	107bc <z_impl_k_sem_take>
	status = ctx->sync_status;
    f7e6:	6a65      	ldr	r5, [r4, #36]	; 0x24
    f7e8:	e732      	b.n	f650 <spi_nrfx_transceive+0x54>
		LOG_INF("CS control inhibited (no GPIO device)");
    f7ea:	2303      	movs	r3, #3
    f7ec:	f04f 0100 	mov.w	r1, #0
    f7f0:	4a18      	ldr	r2, [pc, #96]	; (f854 <spi_nrfx_transceive+0x258>)
    f7f2:	f363 0102 	bfi	r1, r3, #0, #3
    f7f6:	4b18      	ldr	r3, [pc, #96]	; (f858 <spi_nrfx_transceive+0x25c>)
    f7f8:	f36f 01c5 	bfc	r1, #3, #3
    f7fc:	1a9b      	subs	r3, r3, r2
    f7fe:	08db      	lsrs	r3, r3, #3
    f800:	f363 118f 	bfi	r1, r3, #6, #10
    f804:	4820      	ldr	r0, [pc, #128]	; (f888 <spi_nrfx_transceive+0x28c>)
    f806:	f001 fd07 	bl	11218 <log_0>
    f80a:	e791      	b.n	f730 <spi_nrfx_transceive+0x134>
			return NRF_SPIM_MODE_3;
    f80c:	3200      	adds	r2, #0
    f80e:	bf18      	it	ne
    f810:	2201      	movne	r2, #1
    f812:	e799      	b.n	f748 <spi_nrfx_transceive+0x14c>
        config |= (SPIM_CONFIG_CPOL_ActiveLow  << SPIM_CONFIG_CPOL_Pos) |
    f814:	f043 0304 	orr.w	r3, r3, #4
    f818:	e7a0      	b.n	f75c <spi_nrfx_transceive+0x160>
        config |= (SPIM_CONFIG_CPOL_ActiveLow  << SPIM_CONFIG_CPOL_Pos) |
    f81a:	f043 0306 	orr.w	r3, r3, #6
    f81e:	e79d      	b.n	f75c <spi_nrfx_transceive+0x160>
		return NRF_SPIM_FREQ_125K;
    f820:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
    f824:	e7b7      	b.n	f796 <spi_nrfx_transceive+0x19a>
		return NRF_SPIM_FREQ_250K;
    f826:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
    f82a:	e7b4      	b.n	f796 <spi_nrfx_transceive+0x19a>
		return NRF_SPIM_FREQ_500K;
    f82c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
    f830:	e7b1      	b.n	f796 <spi_nrfx_transceive+0x19a>
		return NRF_SPIM_FREQ_1M;
    f832:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    f836:	e7ae      	b.n	f796 <spi_nrfx_transceive+0x19a>
		return NRF_SPIM_FREQ_2M;
    f838:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
    f83c:	e7ab      	b.n	f796 <spi_nrfx_transceive+0x19a>
		ctx->tx_count = 0;
    f83e:	e9c4 660a 	strd	r6, r6, [r4, #40]	; 0x28
		ctx->tx_len = 0;
    f842:	e9c4 660e 	strd	r6, r6, [r4, #56]	; 0x38
    f846:	e7b5      	b.n	f7b4 <spi_nrfx_transceive+0x1b8>
		ctx->rx_count = 0;
    f848:	e9c4 550c 	strd	r5, r5, [r4, #48]	; 0x30
		ctx->rx_len = 0;
    f84c:	e9c4 5510 	strd	r5, r5, [r4, #64]	; 0x40
    f850:	e7ba      	b.n	f7c8 <spi_nrfx_transceive+0x1cc>
    f852:	bf00      	nop
    f854:	00012550 	.word	0x00012550
    f858:	00012590 	.word	0x00012590
    f85c:	00012ee6 	.word	0x00012ee6
    f860:	00012f08 	.word	0x00012f08
    f864:	00012f27 	.word	0x00012f27
    f868:	00012f4a 	.word	0x00012f4a
    f86c:	0001e847 	.word	0x0001e847
    f870:	00012f79 	.word	0x00012f79
    f874:	0003d08f 	.word	0x0003d08f
    f878:	0007a11f 	.word	0x0007a11f
    f87c:	000f423f 	.word	0x000f423f
    f880:	001e847f 	.word	0x001e847f
    f884:	003d08ff 	.word	0x003d08ff
    f888:	00012faa 	.word	0x00012faa

0000f88c <uarte_nrfx_configure>:
	return 0;
}

static int uarte_nrfx_configure(struct device *dev,
				const struct uart_config *cfg)
{
    f88c:	b5f0      	push	{r4, r5, r6, r7, lr}
	nrf_uarte_hwfc_t hwfc;
#ifdef UARTE_CONFIG_STOP_Two
	bool two_stop_bits = false;
#endif

	switch (cfg->stop_bits) {
    f88e:	794b      	ldrb	r3, [r1, #5]
    f890:	2b01      	cmp	r3, #1
    f892:	d029      	beq.n	f8e8 <uarte_nrfx_configure+0x5c>
    f894:	2b03      	cmp	r3, #3
    f896:	d124      	bne.n	f8e2 <uarte_nrfx_configure+0x56>
	case UART_CFG_STOP_BITS_1:
		break;
#ifdef UARTE_CONFIG_STOP_Two
	case UART_CFG_STOP_BITS_2:
		two_stop_bits = true;
    f898:	2601      	movs	r6, #1
#endif
	default:
		return -ENOTSUP;
	}

	if (cfg->data_bits != UART_CFG_DATA_BITS_8) {
    f89a:	798b      	ldrb	r3, [r1, #6]
    f89c:	2b03      	cmp	r3, #3
    f89e:	d120      	bne.n	f8e2 <uarte_nrfx_configure+0x56>
		return -ENOTSUP;
	}

	switch (cfg->flow_ctrl) {
    f8a0:	79cd      	ldrb	r5, [r1, #7]
    f8a2:	b12d      	cbz	r5, f8b0 <uarte_nrfx_configure+0x24>
    f8a4:	2d01      	cmp	r5, #1
    f8a6:	d11c      	bne.n	f8e2 <uarte_nrfx_configure+0x56>
	return dev->config->config_info;
    f8a8:	6803      	ldr	r3, [r0, #0]
	case UART_CFG_FLOW_CTRL_NONE:
		hwfc = NRF_UARTE_HWFC_DISABLED;
		break;
	case UART_CFG_FLOW_CTRL_RTS_CTS:
		if (get_dev_config(dev)->rts_cts_pins_set) {
    f8aa:	689b      	ldr	r3, [r3, #8]
    f8ac:	791b      	ldrb	r3, [r3, #4]
    f8ae:	b1c3      	cbz	r3, f8e2 <uarte_nrfx_configure+0x56>
		break;
	default:
		return -ENOTSUP;
	}

	switch (cfg->parity) {
    f8b0:	790a      	ldrb	r2, [r1, #4]
    f8b2:	b112      	cbz	r2, f8ba <uarte_nrfx_configure+0x2e>
    f8b4:	2a02      	cmp	r2, #2
    f8b6:	d114      	bne.n	f8e2 <uarte_nrfx_configure+0x56>
	case UART_CFG_PARITY_NONE:
		parity = NRF_UARTE_PARITY_EXCLUDED;
		break;
	case UART_CFG_PARITY_EVEN:
		parity = NRF_UARTE_PARITY_INCLUDED;
    f8b8:	220e      	movs	r2, #14
	switch (baudrate) {
    f8ba:	f647 2712 	movw	r7, #31250	; 0x7a12
	return dev->config->config_info;
    f8be:	6803      	ldr	r3, [r0, #0]
	return config->uarte_regs;
    f8c0:	689b      	ldr	r3, [r3, #8]
    f8c2:	681c      	ldr	r4, [r3, #0]
	switch (baudrate) {
    f8c4:	680b      	ldr	r3, [r1, #0]
    f8c6:	42bb      	cmp	r3, r7
    f8c8:	d074      	beq.n	f9b4 <uarte_nrfx_configure+0x128>
    f8ca:	d829      	bhi.n	f920 <uarte_nrfx_configure+0x94>
    f8cc:	f5b3 5f96 	cmp.w	r3, #4800	; 0x12c0
    f8d0:	d06a      	beq.n	f9a8 <uarte_nrfx_configure+0x11c>
    f8d2:	d814      	bhi.n	f8fe <uarte_nrfx_configure+0x72>
    f8d4:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
    f8d8:	d04f      	beq.n	f97a <uarte_nrfx_configure+0xee>
    f8da:	d807      	bhi.n	f8ec <uarte_nrfx_configure+0x60>
    f8dc:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
    f8e0:	d07d      	beq.n	f9de <uarte_nrfx_configure+0x152>
		return -ENOTSUP;
    f8e2:	f06f 0022 	mvn.w	r0, #34	; 0x22
    f8e6:	e05b      	b.n	f9a0 <uarte_nrfx_configure+0x114>
	bool two_stop_bits = false;
    f8e8:	2600      	movs	r6, #0
    f8ea:	e7d6      	b.n	f89a <uarte_nrfx_configure+0xe>
	switch (baudrate) {
    f8ec:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
    f8f0:	d057      	beq.n	f9a2 <uarte_nrfx_configure+0x116>
    f8f2:	f5b3 6f16 	cmp.w	r3, #2400	; 0x960
    f8f6:	d1f4      	bne.n	f8e2 <uarte_nrfx_configure+0x56>
		nrf_baudrate = NRF_UARTE_BAUDRATE_2400;
    f8f8:	f44f 231d 	mov.w	r3, #643072	; 0x9d000
    f8fc:	e03f      	b.n	f97e <uarte_nrfx_configure+0xf2>
	switch (baudrate) {
    f8fe:	f5b3 5f61 	cmp.w	r3, #14400	; 0x3840
    f902:	d053      	beq.n	f9ac <uarte_nrfx_configure+0x120>
    f904:	d804      	bhi.n	f910 <uarte_nrfx_configure+0x84>
    f906:	f5b3 5f16 	cmp.w	r3, #9600	; 0x2580
    f90a:	d1ea      	bne.n	f8e2 <uarte_nrfx_configure+0x56>
		nrf_baudrate = NRF_UARTE_BAUDRATE_9600;
    f90c:	4b35      	ldr	r3, [pc, #212]	; (f9e4 <uarte_nrfx_configure+0x158>)
    f90e:	e036      	b.n	f97e <uarte_nrfx_configure+0xf2>
	switch (baudrate) {
    f910:	f5b3 4f96 	cmp.w	r3, #19200	; 0x4b00
    f914:	d04c      	beq.n	f9b0 <uarte_nrfx_configure+0x124>
    f916:	f5b3 4fe1 	cmp.w	r3, #28800	; 0x7080
    f91a:	d1e2      	bne.n	f8e2 <uarte_nrfx_configure+0x56>
		nrf_baudrate = NRF_UARTE_BAUDRATE_28800;
    f91c:	4b32      	ldr	r3, [pc, #200]	; (f9e8 <uarte_nrfx_configure+0x15c>)
    f91e:	e02e      	b.n	f97e <uarte_nrfx_configure+0xf2>
	switch (baudrate) {
    f920:	f5b3 3fe1 	cmp.w	r3, #115200	; 0x1c200
    f924:	d04f      	beq.n	f9c6 <uarte_nrfx_configure+0x13a>
    f926:	d812      	bhi.n	f94e <uarte_nrfx_configure+0xc2>
    f928:	f64d 27c0 	movw	r7, #56000	; 0xdac0
    f92c:	42bb      	cmp	r3, r7
    f92e:	d044      	beq.n	f9ba <uarte_nrfx_configure+0x12e>
    f930:	d805      	bhi.n	f93e <uarte_nrfx_configure+0xb2>
    f932:	f5b3 4f16 	cmp.w	r3, #38400	; 0x9600
    f936:	d1d4      	bne.n	f8e2 <uarte_nrfx_configure+0x56>
		nrf_baudrate = NRF_UARTE_BAUDRATE_38400;
    f938:	f44f 031d 	mov.w	r3, #10289152	; 0x9d0000
    f93c:	e01f      	b.n	f97e <uarte_nrfx_configure+0xf2>
	switch (baudrate) {
    f93e:	f5b3 4f61 	cmp.w	r3, #57600	; 0xe100
    f942:	d03d      	beq.n	f9c0 <uarte_nrfx_configure+0x134>
    f944:	f5b3 3f96 	cmp.w	r3, #76800	; 0x12c00
    f948:	d1cb      	bne.n	f8e2 <uarte_nrfx_configure+0x56>
		nrf_baudrate = NRF_UARTE_BAUDRATE_76800;
    f94a:	4b28      	ldr	r3, [pc, #160]	; (f9ec <uarte_nrfx_configure+0x160>)
    f94c:	e017      	b.n	f97e <uarte_nrfx_configure+0xf2>
	switch (baudrate) {
    f94e:	f5b3 2fe1 	cmp.w	r3, #460800	; 0x70800
    f952:	d03e      	beq.n	f9d2 <uarte_nrfx_configure+0x146>
    f954:	d808      	bhi.n	f968 <uarte_nrfx_configure+0xdc>
    f956:	f5b3 3f61 	cmp.w	r3, #230400	; 0x38400
    f95a:	d037      	beq.n	f9cc <uarte_nrfx_configure+0x140>
    f95c:	4f24      	ldr	r7, [pc, #144]	; (f9f0 <uarte_nrfx_configure+0x164>)
    f95e:	42bb      	cmp	r3, r7
    f960:	d1bf      	bne.n	f8e2 <uarte_nrfx_configure+0x56>
		nrf_baudrate = NRF_UARTE_BAUDRATE_250000;
    f962:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
    f966:	e00a      	b.n	f97e <uarte_nrfx_configure+0xf2>
	switch (baudrate) {
    f968:	f5b3 2f61 	cmp.w	r3, #921600	; 0xe1000
    f96c:	d034      	beq.n	f9d8 <uarte_nrfx_configure+0x14c>
    f96e:	4f21      	ldr	r7, [pc, #132]	; (f9f4 <uarte_nrfx_configure+0x168>)
    f970:	42bb      	cmp	r3, r7
    f972:	d1b6      	bne.n	f8e2 <uarte_nrfx_configure+0x56>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1000000;
    f974:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    f978:	e001      	b.n	f97e <uarte_nrfx_configure+0xf2>
		nrf_baudrate = 0x00027000;
    f97a:	f44f 331c 	mov.w	r3, #159744	; 0x27000

__STATIC_INLINE void nrf_uarte_configure(NRF_UARTE_Type   * p_reg,
                                         nrf_uarte_parity_t parity,
                                         nrf_uarte_hwfc_t   hwfc)
{
    p_reg->CONFIG = (uint32_t)parity | (uint32_t)hwfc;
    f97e:	432a      	orrs	r2, r5
}

__STATIC_INLINE void nrf_uarte_baudrate_set(NRF_UARTE_Type   * p_reg, nrf_uarte_baudrate_t baudrate)
{
    p_reg->BAUDRATE = baudrate;
    f980:	f8c4 3524 	str.w	r3, [r4, #1316]	; 0x524
    p_reg->CONFIG = (uint32_t)parity | (uint32_t)hwfc;
    f984:	f8c4 256c 	str.w	r2, [r4, #1388]	; 0x56c
	}

	nrf_uarte_configure(get_uarte_instance(dev), parity, hwfc);

#ifdef UARTE_CONFIG_STOP_Two
	if (two_stop_bits) {
    f988:	b12e      	cbz	r6, f996 <uarte_nrfx_configure+0x10a>
		/* TODO Change this to nrfx HAL function when available */
		get_uarte_instance(dev)->CONFIG |=
    f98a:	f8d4 356c 	ldr.w	r3, [r4, #1388]	; 0x56c
    f98e:	f043 0310 	orr.w	r3, r3, #16
    f992:	f8c4 356c 	str.w	r3, [r4, #1388]	; 0x56c
			UARTE_CONFIG_STOP_Two << UARTE_CONFIG_STOP_Pos;
	}
#endif
	get_dev_data(dev)->uart_config = *cfg;
    f996:	6883      	ldr	r3, [r0, #8]
    f998:	c903      	ldmia	r1, {r0, r1}
    f99a:	e883 0003 	stmia.w	r3, {r0, r1}

	return 0;
    f99e:	2000      	movs	r0, #0
}
    f9a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
		nrf_baudrate = NRF_UARTE_BAUDRATE_1200;
    f9a2:	f44f 239e 	mov.w	r3, #323584	; 0x4f000
    f9a6:	e7ea      	b.n	f97e <uarte_nrfx_configure+0xf2>
		nrf_baudrate = NRF_UARTE_BAUDRATE_4800;
    f9a8:	4b13      	ldr	r3, [pc, #76]	; (f9f8 <uarte_nrfx_configure+0x16c>)
    f9aa:	e7e8      	b.n	f97e <uarte_nrfx_configure+0xf2>
		nrf_baudrate = NRF_UARTE_BAUDRATE_14400;
    f9ac:	4b13      	ldr	r3, [pc, #76]	; (f9fc <uarte_nrfx_configure+0x170>)
    f9ae:	e7e6      	b.n	f97e <uarte_nrfx_configure+0xf2>
		nrf_baudrate = NRF_UARTE_BAUDRATE_19200;
    f9b0:	4b13      	ldr	r3, [pc, #76]	; (fa00 <uarte_nrfx_configure+0x174>)
    f9b2:	e7e4      	b.n	f97e <uarte_nrfx_configure+0xf2>
		nrf_baudrate = NRF_UARTE_BAUDRATE_31250;
    f9b4:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
    f9b8:	e7e1      	b.n	f97e <uarte_nrfx_configure+0xf2>
		nrf_baudrate = NRF_UARTE_BAUDRATE_56000;
    f9ba:	f44f 0365 	mov.w	r3, #15007744	; 0xe50000
    f9be:	e7de      	b.n	f97e <uarte_nrfx_configure+0xf2>
		nrf_baudrate = NRF_UARTE_BAUDRATE_57600;
    f9c0:	f44f 036b 	mov.w	r3, #15400960	; 0xeb0000
    f9c4:	e7db      	b.n	f97e <uarte_nrfx_configure+0xf2>
		nrf_baudrate = NRF_UARTE_BAUDRATE_115200;
    f9c6:	f04f 73eb 	mov.w	r3, #30801920	; 0x1d60000
    f9ca:	e7d8      	b.n	f97e <uarte_nrfx_configure+0xf2>
		nrf_baudrate = NRF_UARTE_BAUDRATE_230400;
    f9cc:	f04f 736c 	mov.w	r3, #61865984	; 0x3b00000
    f9d0:	e7d5      	b.n	f97e <uarte_nrfx_configure+0xf2>
		nrf_baudrate = NRF_UARTE_BAUDRATE_460800;
    f9d2:	f04f 63e8 	mov.w	r3, #121634816	; 0x7400000
    f9d6:	e7d2      	b.n	f97e <uarte_nrfx_configure+0xf2>
		nrf_baudrate = NRF_UARTE_BAUDRATE_921600;
    f9d8:	f04f 6370 	mov.w	r3, #251658240	; 0xf000000
    f9dc:	e7cf      	b.n	f97e <uarte_nrfx_configure+0xf2>
		nrf_baudrate = 0x00014000;
    f9de:	f44f 33a0 	mov.w	r3, #81920	; 0x14000
    f9e2:	e7cc      	b.n	f97e <uarte_nrfx_configure+0xf2>
    f9e4:	00275000 	.word	0x00275000
    f9e8:	0075c000 	.word	0x0075c000
    f9ec:	013a9000 	.word	0x013a9000
    f9f0:	0003d090 	.word	0x0003d090
    f9f4:	000f4240 	.word	0x000f4240
    f9f8:	0013b000 	.word	0x0013b000
    f9fc:	003af000 	.word	0x003af000
    fa00:	004ea000 	.word	0x004ea000

0000fa04 <uarte_0_init>:
	return dev->config->config_info;
    fa04:	6802      	ldr	r2, [r0, #0]
	#if defined(DT_NORDIC_NRF_UARTE_UART_0_RTS_PIN) && \
	    defined(DT_NORDIC_NRF_UARTE_UART_0_CTS_PIN)
		#define UARTE_0_CONFIG_RTS_CTS 1
	#endif

	UART_NRF_UARTE_DEVICE(0);
    fa06:	b570      	push	{r4, r5, r6, lr}
	return config->uarte_regs;
    fa08:	6892      	ldr	r2, [r2, #8]
}


__STATIC_INLINE void nrf_gpio_port_out_set(NRF_GPIO_Type * p_reg, uint32_t set_mask)
{
    p_reg->OUTSET = set_mask;
    fa0a:	4b18      	ldr	r3, [pc, #96]	; (fa6c <uarte_0_init+0x68>)
    fa0c:	6814      	ldr	r4, [r2, #0]
    fa0e:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
	struct uarte_nrfx_data *data = get_dev_data(dev);
    fa12:	6885      	ldr	r5, [r0, #8]
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
    fa14:	2103      	movs	r1, #3
    p_reg->OUTSET = set_mask;
    fa16:	609a      	str	r2, [r3, #8]
    p_reg->PSEL.TXD = pseltxd;
    fa18:	261d      	movs	r6, #29
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
    fa1a:	2200      	movs	r2, #0
    fa1c:	f8c3 1274 	str.w	r1, [r3, #628]	; 0x274
    fa20:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270
    fa24:	f8c4 650c 	str.w	r6, [r4, #1292]	; 0x50c
    p_reg->PSEL.RXD = pselrxd;
    fa28:	261c      	movs	r6, #28
    fa2a:	f8c4 6514 	str.w	r6, [r4, #1300]	; 0x514
    p_reg->OUTSET = set_mask;
    fa2e:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000
    fa32:	609e      	str	r6, [r3, #8]
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
    fa34:	f8c3 126c 	str.w	r1, [r3, #620]	; 0x26c
    fa38:	f8c3 2268 	str.w	r2, [r3, #616]	; 0x268
    p_reg->PSEL.RTS = pselrts;
    fa3c:	231b      	movs	r3, #27
    fa3e:	f8c4 3508 	str.w	r3, [r4, #1288]	; 0x508
    p_reg->PSEL.CTS = pselcts;
    fa42:	231a      	movs	r3, #26
	err = uarte_nrfx_configure(dev, &get_dev_data(dev)->uart_config);
    fa44:	4629      	mov	r1, r5
    fa46:	f8c4 3510 	str.w	r3, [r4, #1296]	; 0x510
    fa4a:	f7ff ff1f 	bl	f88c <uarte_nrfx_configure>
	if (err) {
    fa4e:	b958      	cbnz	r0, fa68 <uarte_0_init+0x64>
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
    fa50:	2308      	movs	r3, #8
    fa52:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
	nrf_uarte_rx_buffer_set(uarte, &data->rx_data, 1);
    fa56:	441d      	add	r5, r3
__STATIC_INLINE void nrf_uarte_rx_buffer_set(NRF_UARTE_Type * p_reg,
                                             uint8_t *        p_buffer,
                                             size_t           length)
{
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
    p_reg->RXD.MAXCNT = length;
    fa58:	2301      	movs	r3, #1
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    fa5a:	f8c4 0110 	str.w	r0, [r4, #272]	; 0x110
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
    fa5e:	f8c4 5534 	str.w	r5, [r4, #1332]	; 0x534
    p_reg->RXD.MAXCNT = length;
    fa62:	f8c4 3538 	str.w	r3, [r4, #1336]	; 0x538
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    fa66:	6023      	str	r3, [r4, #0]
	UART_NRF_UARTE_DEVICE(0);
    fa68:	bd70      	pop	{r4, r5, r6, pc}
    fa6a:	bf00      	nop
    fa6c:	40842500 	.word	0x40842500

0000fa70 <abi_getter>:
extern const struct fw_info_abi * const _ext_abis_start[];
extern const u32_t _ext_abis_size;
__noinit fw_info_abi_getter abi_getter_in;

int abi_getter(u32_t id, u32_t index, const struct fw_info_abi **abi)
{
    fa70:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (!abi) {
    fa72:	b1da      	cbz	r2, faac <abi_getter+0x3c>
		return -EFAULT;
	}

	bool id_found = false;

	for (u32_t i = 0; i < (u32_t)&_ext_abis_size; i++) {
    fa74:	2300      	movs	r3, #0
	bool id_found = false;
    fa76:	461c      	mov	r4, r3
	for (u32_t i = 0; i < (u32_t)&_ext_abis_size; i++) {
    fa78:	4e0e      	ldr	r6, [pc, #56]	; (fab4 <abi_getter+0x44>)
		const struct fw_info_abi *ext_abi = _ext_abis_start[i];
    fa7a:	4f0f      	ldr	r7, [pc, #60]	; (fab8 <abi_getter+0x48>)
	for (u32_t i = 0; i < (u32_t)&_ext_abis_size; i++) {
    fa7c:	42b3      	cmp	r3, r6
    fa7e:	d306      	bcc.n	fa8e <abi_getter+0x1e>
				*abi = ext_abi;
				return 0;
			}
		}
	}
	return id_found ? -EBADF : -ENOENT;
    fa80:	2c00      	cmp	r4, #0
    fa82:	bf14      	ite	ne
    fa84:	f06f 0008 	mvnne.w	r0, #8
    fa88:	f06f 0001 	mvneq.w	r0, #1
    fa8c:	e009      	b.n	faa2 <abi_getter+0x32>
		const struct fw_info_abi *ext_abi = _ext_abis_start[i];
    fa8e:	f857 5023 	ldr.w	r5, [r7, r3, lsl #2]
		if (ext_abi->abi_id == id) {
    fa92:	f8d5 c00c 	ldr.w	ip, [r5, #12]
    fa96:	4560      	cmp	r0, ip
    fa98:	d106      	bne.n	faa8 <abi_getter+0x38>
			if (index-- == 0) {
    fa9a:	1e4c      	subs	r4, r1, #1
    fa9c:	b911      	cbnz	r1, faa4 <abi_getter+0x34>
				return 0;
    fa9e:	4608      	mov	r0, r1
				*abi = ext_abi;
    faa0:	6015      	str	r5, [r2, #0]
}
    faa2:	bdf0      	pop	{r4, r5, r6, r7, pc}
			if (index-- == 0) {
    faa4:	4621      	mov	r1, r4
			id_found = true;
    faa6:	2401      	movs	r4, #1
	for (u32_t i = 0; i < (u32_t)&_ext_abis_size; i++) {
    faa8:	3301      	adds	r3, #1
    faaa:	e7e7      	b.n	fa7c <abi_getter+0xc>
		return -EFAULT;
    faac:	f06f 000d 	mvn.w	r0, #13
    fab0:	e7f7      	b.n	faa2 <abi_getter+0x32>
    fab2:	bf00      	nop
    fab4:	00000000 	.word	0x00000000
    fab8:	000130e8 	.word	0x000130e8

0000fabc <SystemInit>:
    static bool errata_20(void);
#endif

void SystemCoreClockUpdate(void)
{
    SystemCoreClock = __SYSTEM_CLOCK;
    fabc:	4b01      	ldr	r3, [pc, #4]	; (fac4 <SystemInit+0x8>)
    fabe:	4a02      	ldr	r2, [pc, #8]	; (fac8 <SystemInit+0xc>)
    fac0:	601a      	str	r2, [r3, #0]
      __DSB();
      __ISB();
    #endif
    
    SystemCoreClockUpdate();
}
    fac2:	4770      	bx	lr
    fac4:	20025884 	.word	0x20025884
    fac8:	03d09000 	.word	0x03d09000

0000facc <nrfx_spim_init>:

nrfx_err_t nrfx_spim_init(nrfx_spim_t  const * const p_instance,
                          nrfx_spim_config_t const * p_config,
                          nrfx_spim_evt_handler_t    handler,
                          void                     * p_context)
{
    facc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    fad0:	4696      	mov	lr, r2
    NRFX_ASSERT(p_config);
    spim_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
    nrfx_err_t err_code;

    if (p_cb->state != NRFX_DRV_STATE_UNINITIALIZED)
    fad2:	2224      	movs	r2, #36	; 0x24
    spim_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
    fad4:	7904      	ldrb	r4, [r0, #4]
    if (p_cb->state != NRFX_DRV_STATE_UNINITIALIZED)
    fad6:	4d4a      	ldr	r5, [pc, #296]	; (fc00 <nrfx_spim_init+0x134>)
    fad8:	4362      	muls	r2, r4
    fada:	18ae      	adds	r6, r5, r2
    fadc:	7f37      	ldrb	r7, [r6, #28]
    fade:	2f00      	cmp	r7, #0
    fae0:	f040 808c 	bne.w	fbfc <nrfx_spim_init+0x130>
                         NRFX_LOG_ERROR_STRING_GET(err_code));
        return err_code;
    }
#endif

    NRF_SPIM_Type * p_spim = (NRF_SPIM_Type *)p_instance->p_reg;
    fae4:	6800      	ldr	r0, [r0, #0]
                         NRFX_LOG_ERROR_STRING_GET(err_code));
        return err_code;
    }
#endif // NRFX_CHECK(NRFX_PRS_ENABLED)

    p_cb->handler = handler;
    fae6:	f845 e002 	str.w	lr, [r5, r2]
    faea:	2201      	movs	r2, #1
    p_cb->p_context = p_context;
    faec:	6073      	str	r3, [r6, #4]
    faee:	f891 8000 	ldrb.w	r8, [r1]
    // Configure pins used by the peripheral:
    // - SCK - output with initial value corresponding with the SPI mode used:
    //   0 - for modes 0 and 1 (CPOL = 0), 1 - for modes 2 and 3 (CPOL = 1);
    //   according to the reference manual guidelines this pin and its input
    //   buffer must always be connected for the SPI to work.
    if (p_config->mode <= NRF_SPIM_MODE_1)
    faf2:	f891 c00c 	ldrb.w	ip, [r1, #12]
    faf6:	4b43      	ldr	r3, [pc, #268]	; (fc04 <nrfx_spim_init+0x138>)
    faf8:	fa02 f208 	lsl.w	r2, r2, r8
    fafc:	f1bc 0f01 	cmp.w	ip, #1
}


__STATIC_INLINE void nrf_gpio_port_out_clear(NRF_GPIO_Type * p_reg, uint32_t clr_mask)
{
    p_reg->OUTCLR = clr_mask;
    fb00:	bf94      	ite	ls
    fb02:	60da      	strls	r2, [r3, #12]
    p_reg->OUTSET = set_mask;
    fb04:	609a      	strhi	r2, [r3, #8]
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
    fb06:	2201      	movs	r2, #1
    fb08:	f108 0680 	add.w	r6, r8, #128	; 0x80
    fb0c:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
                 NRF_GPIO_PIN_INPUT_CONNECT,
                 NRF_GPIO_PIN_NOPULL,
                 NRF_GPIO_PIN_S0S1,
                 NRF_GPIO_PIN_NOSENSE);
    // - MOSI (optional) - output with initial value 0,
    if (p_config->mosi_pin != NRFX_SPIM_PIN_NOT_USED)
    fb10:	784e      	ldrb	r6, [r1, #1]
    fb12:	2eff      	cmp	r6, #255	; 0xff
    fb14:	bf1f      	itttt	ne
    fb16:	2703      	movne	r7, #3
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
    fb18:	40b2      	lslne	r2, r6
    p_reg->OUTCLR = clr_mask;
    fb1a:	60da      	strne	r2, [r3, #12]
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
    fb1c:	f106 0280 	addne.w	r2, r6, #128	; 0x80
    fb20:	bf18      	it	ne
    fb22:	f843 7022 	strne.w	r7, [r3, r2, lsl #2]
    else
    {
        mosi_pin = NRF_SPIM_PIN_NOT_CONNECTED;
    }
    // - MISO (optional) - input,
    if (p_config->miso_pin != NRFX_SPIM_PIN_NOT_USED)
    fb26:	788f      	ldrb	r7, [r1, #2]
        mosi_pin = NRF_SPIM_PIN_NOT_CONNECTED;
    fb28:	bf08      	it	eq
    fb2a:	f04f 36ff 	moveq.w	r6, #4294967295
    if (p_config->miso_pin != NRFX_SPIM_PIN_NOT_USED)
    fb2e:	2fff      	cmp	r7, #255	; 0xff
    fb30:	bf1e      	ittt	ne
    fb32:	f04f 0a04 	movne.w	sl, #4
    fb36:	f107 0280 	addne.w	r2, r7, #128	; 0x80
    fb3a:	f843 a022 	strne.w	sl, [r3, r2, lsl #2]
    }
    else
    {
        miso_pin = NRF_SPIM_PIN_NOT_CONNECTED;
    }
    p_cb->miso_pin = p_config->miso_pin;
    fb3e:	f04f 0224 	mov.w	r2, #36	; 0x24
    fb42:	fb02 5204 	mla	r2, r2, r4, r5
    fb46:	f882 7020 	strb.w	r7, [r2, #32]
        miso_pin = p_config->miso_pin;
    fb4a:	bf18      	it	ne
    fb4c:	46b9      	movne	r9, r7
    // - Slave Select (optional) - output with initial value 1 (inactive).

    // 'p_cb->ss_pin' variable is used during transfers to check if SS pin should be toggled,
    // so this field needs to be initialized even if the pin is not used.
    p_cb->ss_pin = p_config->ss_pin;
    fb4e:	78cf      	ldrb	r7, [r1, #3]
        miso_pin = NRF_SPIM_PIN_NOT_CONNECTED;
    fb50:	bf08      	it	eq
    fb52:	f04f 39ff 	moveq.w	r9, #4294967295

    if (p_config->ss_pin != NRFX_SPIM_PIN_NOT_USED)
    fb56:	2fff      	cmp	r7, #255	; 0xff
    p_cb->ss_pin = p_config->ss_pin;
    fb58:	77d7      	strb	r7, [r2, #31]
    if (p_config->ss_pin != NRFX_SPIM_PIN_NOT_USED)
    fb5a:	d010      	beq.n	fb7e <nrfx_spim_init+0xb2>
    fb5c:	2201      	movs	r2, #1
    {
        if (p_config->ss_active_high)
    fb5e:	f891 a004 	ldrb.w	sl, [r1, #4]
    fb62:	40ba      	lsls	r2, r7
    fb64:	f1ba 0f00 	cmp.w	sl, #0
    fb68:	d040      	beq.n	fbec <nrfx_spim_init+0x120>
    p_reg->OUTCLR = clr_mask;
    fb6a:	60da      	str	r2, [r3, #12]
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
    fb6c:	2203      	movs	r2, #3
    fb6e:	3780      	adds	r7, #128	; 0x80
    fb70:	f843 2027 	str.w	r2, [r3, r7, lsl #2]
                                   (p_config->ss_active_high == true ?
                                        NRF_SPIM_CSN_POL_HIGH : NRF_SPIM_CSN_POL_LOW),
                                   p_config->ss_duration);
        }
#endif
        p_cb->ss_active_high = p_config->ss_active_high;
    fb74:	2324      	movs	r3, #36	; 0x24
    fb76:	fb03 5304 	mla	r3, r3, r4, r5
    fb7a:	f883 a01e 	strb.w	sl, [r3, #30]
    p_reg->FREQUENCY = (uint32_t)frequency;
    fb7e:	688b      	ldr	r3, [r1, #8]
    p_reg->PSEL.SCK  = sck_pin;
    fb80:	f8c0 8508 	str.w	r8, [r0, #1288]	; 0x508
    p_reg->PSEL.MOSI = mosi_pin;
    fb84:	f8c0 650c 	str.w	r6, [r0, #1292]	; 0x50c
    p_reg->PSEL.MISO = miso_pin;
    fb88:	f8c0 9510 	str.w	r9, [r0, #1296]	; 0x510
    p_reg->FREQUENCY = (uint32_t)frequency;
    fb8c:	f8c0 3524 	str.w	r3, [r0, #1316]	; 0x524
        SPIM_CONFIG_ORDER_MsbFirst : SPIM_CONFIG_ORDER_LsbFirst);
    fb90:	7b4b      	ldrb	r3, [r1, #13]
    fb92:	3300      	adds	r3, #0
    fb94:	bf18      	it	ne
    fb96:	2301      	movne	r3, #1
    switch (spi_mode)
    fb98:	f1bc 0f02 	cmp.w	ip, #2
    fb9c:	d028      	beq.n	fbf0 <nrfx_spim_init+0x124>
    fb9e:	f1bc 0f03 	cmp.w	ip, #3
    fba2:	d028      	beq.n	fbf6 <nrfx_spim_init+0x12a>
    fba4:	f1bc 0f01 	cmp.w	ip, #1
    fba8:	d101      	bne.n	fbae <nrfx_spim_init+0xe2>
        config |= (SPIM_CONFIG_CPOL_ActiveHigh << SPIM_CONFIG_CPOL_Pos) |
    fbaa:	f043 0302 	orr.w	r3, r3, #2
    p_reg->CONFIG = config;
    fbae:	f8c0 3554 	str.w	r3, [r0, #1364]	; 0x554
}

__STATIC_INLINE void nrf_spim_orc_set(NRF_SPIM_Type * p_reg,
                                      uint8_t         orc)
{
    p_reg->ORC = orc;
    fbb2:	798b      	ldrb	r3, [r1, #6]
    fbb4:	f8c0 35c0 	str.w	r3, [r0, #1472]	; 0x5c0
    nrf_spim_frequency_set(p_spim, p_config->frequency);
    nrf_spim_configure(p_spim, p_config->mode, p_config->bit_order);

    nrf_spim_orc_set(p_spim, p_config->orc);

    if (p_cb->handler)
    fbb8:	f1be 0f00 	cmp.w	lr, #0
    fbbc:	d002      	beq.n	fbc4 <nrfx_spim_init+0xf8>
    p_reg->INTENSET = mask;
    fbbe:	2340      	movs	r3, #64	; 0x40
    fbc0:	f8c0 3304 	str.w	r3, [r0, #772]	; 0x304
    p_reg->ENABLE = (SPIM_ENABLE_ENABLE_Enabled << SPIM_ENABLE_ENABLE_Pos);
    fbc4:	2307      	movs	r3, #7
    fbc6:	f8c0 3500 	str.w	r3, [r0, #1280]	; 0x500
        nrf_spim_int_enable(p_spim, NRF_SPIM_INT_END_MASK);
    }

    nrf_spim_enable(p_spim);

    if (p_cb->handler)
    fbca:	f1be 0f00 	cmp.w	lr, #0
    fbce:	d003      	beq.n	fbd8 <nrfx_spim_init+0x10c>
    {
        NRFX_IRQ_PRIORITY_SET(nrfx_get_irq_number(p_instance->p_reg),
            p_config->irq_priority);
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(p_instance->p_reg));
    fbd0:	f340 3007 	sbfx	r0, r0, #12, #8
    fbd4:	f7fd ff86 	bl	dae4 <z_arch_irq_enable>
    }

    p_cb->transfer_in_progress = false;
    fbd8:	2324      	movs	r3, #36	; 0x24
    fbda:	fb03 5404 	mla	r4, r3, r4, r5
    fbde:	2300      	movs	r3, #0
    fbe0:	7763      	strb	r3, [r4, #29]
    p_cb->state = NRFX_DRV_STATE_INITIALIZED;
    fbe2:	2301      	movs	r3, #1

    err_code = NRFX_SUCCESS;
    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
    fbe4:	4808      	ldr	r0, [pc, #32]	; (fc08 <nrfx_spim_init+0x13c>)
    p_cb->state = NRFX_DRV_STATE_INITIALIZED;
    fbe6:	7723      	strb	r3, [r4, #28]
}
    fbe8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    p_reg->OUTSET = set_mask;
    fbec:	609a      	str	r2, [r3, #8]
    fbee:	e7bd      	b.n	fb6c <nrfx_spim_init+0xa0>
        config |= (SPIM_CONFIG_CPOL_ActiveLow  << SPIM_CONFIG_CPOL_Pos) |
    fbf0:	f043 0304 	orr.w	r3, r3, #4
    fbf4:	e7db      	b.n	fbae <nrfx_spim_init+0xe2>
        config |= (SPIM_CONFIG_CPOL_ActiveLow  << SPIM_CONFIG_CPOL_Pos) |
    fbf6:	f043 0306 	orr.w	r3, r3, #6
    fbfa:	e7d8      	b.n	fbae <nrfx_spim_init+0xe2>
        return err_code;
    fbfc:	4803      	ldr	r0, [pc, #12]	; (fc0c <nrfx_spim_init+0x140>)
    fbfe:	e7f3      	b.n	fbe8 <nrfx_spim_init+0x11c>
    fc00:	2002018c 	.word	0x2002018c
    fc04:	40842500 	.word	0x40842500
    fc08:	0bad0000 	.word	0x0bad0000
    fc0c:	0bad0005 	.word	0x0bad0005

0000fc10 <nrfx_spim_xfer>:
                                     p_xfer_desc->rx_length,
                                     p_xfer_desc->tx_length));

    nrfx_err_t err_code = NRFX_SUCCESS;

    if (p_cb->transfer_in_progress)
    fc10:	2324      	movs	r3, #36	; 0x24
{
    fc12:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    spim_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
    fc16:	7904      	ldrb	r4, [r0, #4]
    if (p_cb->transfer_in_progress)
    fc18:	4d3f      	ldr	r5, [pc, #252]	; (fd18 <nrfx_spim_xfer+0x108>)
    fc1a:	4363      	muls	r3, r4
{
    fc1c:	4617      	mov	r7, r2
    if (p_cb->transfer_in_progress)
    fc1e:	18ea      	adds	r2, r5, r3
{
    fc20:	460e      	mov	r6, r1
    if (p_cb->transfer_in_progress)
    fc22:	7f51      	ldrb	r1, [r2, #29]
{
    fc24:	4680      	mov	r8, r0
    if (p_cb->transfer_in_progress)
    fc26:	2900      	cmp	r1, #0
    fc28:	d173      	bne.n	fd12 <nrfx_spim_xfer+0x102>
                         NRFX_LOG_ERROR_STRING_GET(err_code));
        return err_code;
    }
    else
    {
        if (p_cb->handler && !(flags & (NRFX_SPIM_FLAG_REPEATED_XFER |
    fc2a:	58eb      	ldr	r3, [r5, r3]
    fc2c:	b123      	cbz	r3, fc38 <nrfx_spim_xfer+0x28>
    fc2e:	f017 0f14 	tst.w	r7, #20
                                        NRFX_SPIM_FLAG_NO_XFER_EVT_HANDLER)))
        {
            p_cb->transfer_in_progress = true;
    fc32:	bf04      	itt	eq
    fc34:	2301      	moveq	r3, #1
    fc36:	7753      	strbeq	r3, [r2, #29]
        }
    }

    p_cb->evt.xfer_desc = *p_xfer_desc;
    fc38:	f04f 0c24 	mov.w	ip, #36	; 0x24
    fc3c:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
    fc40:	fb0c 5c04 	mla	ip, ip, r4, r5
    fc44:	f10c 0e0c 	add.w	lr, ip, #12
    fc48:	e88e 000f 	stmia.w	lr, {r0, r1, r2, r3}

    if (p_cb->ss_pin != NRFX_SPIM_PIN_NOT_USED)
    fc4c:	f89c 201f 	ldrb.w	r2, [ip, #31]
    fc50:	2aff      	cmp	r2, #255	; 0xff
    fc52:	d006      	beq.n	fc62 <nrfx_spim_xfer+0x52>
    fc54:	2301      	movs	r3, #1
    {
#if NRFX_CHECK(NRFX_SPIM_EXTENDED_ENABLED)
        if (!p_cb->use_hw_ss)
#endif
        {
            if (p_cb->ss_active_high)
    fc56:	f89c 101e 	ldrb.w	r1, [ip, #30]
    fc5a:	4093      	lsls	r3, r2
    fc5c:	4a2f      	ldr	r2, [pc, #188]	; (fd1c <nrfx_spim_xfer+0x10c>)
    fc5e:	b1b1      	cbz	r1, fc8e <nrfx_spim_xfer+0x7e>
    fc60:	6093      	str	r3, [r2, #8]
    if ((p_xfer_desc->p_tx_buffer != NULL && !nrfx_is_in_ram(p_xfer_desc->p_tx_buffer)) ||
    fc62:	6831      	ldr	r1, [r6, #0]
    fc64:	b121      	cbz	r1, fc70 <nrfx_spim_xfer+0x60>

#ifndef SUPPRESS_INLINE_IMPLEMENTATION

__STATIC_INLINE bool nrfx_is_in_ram(void const * p_object)
{
    return ((((uint32_t)p_object) & 0xE0000000u) == 0x20000000u);
    fc66:	f001 4360 	and.w	r3, r1, #3758096384	; 0xe0000000
    fc6a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
    fc6e:	d106      	bne.n	fc7e <nrfx_spim_xfer+0x6e>
        (p_xfer_desc->p_rx_buffer != NULL && !nrfx_is_in_ram(p_xfer_desc->p_rx_buffer)))
    fc70:	68b2      	ldr	r2, [r6, #8]
    if ((p_xfer_desc->p_tx_buffer != NULL && !nrfx_is_in_ram(p_xfer_desc->p_tx_buffer)) ||
    fc72:	b172      	cbz	r2, fc92 <nrfx_spim_xfer+0x82>
    fc74:	f002 4360 	and.w	r3, r2, #3758096384	; 0xe0000000
        (p_xfer_desc->p_rx_buffer != NULL && !nrfx_is_in_ram(p_xfer_desc->p_rx_buffer)))
    fc78:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
    fc7c:	d009      	beq.n	fc92 <nrfx_spim_xfer+0x82>
        p_cb->transfer_in_progress = false;
    fc7e:	2324      	movs	r3, #36	; 0x24
    fc80:	fb03 5404 	mla	r4, r3, r4, r5
    fc84:	2300      	movs	r3, #0
        return err_code;
    fc86:	4826      	ldr	r0, [pc, #152]	; (fd20 <nrfx_spim_xfer+0x110>)
        p_cb->transfer_in_progress = false;
    fc88:	7763      	strb	r3, [r4, #29]
            }
        }
    }

    return spim_xfer(p_instance->p_reg, p_cb,  p_xfer_desc, flags);
}
    fc8a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    p_reg->OUTCLR = clr_mask;
    fc8e:	60d3      	str	r3, [r2, #12]
    fc90:	e7e7      	b.n	fc62 <nrfx_spim_xfer+0x52>
    return spim_xfer(p_instance->p_reg, p_cb,  p_xfer_desc, flags);
    fc92:	f8d8 3000 	ldr.w	r3, [r8]
    nrf_spim_tx_buffer_set(p_spim, p_xfer_desc->p_tx_buffer, p_xfer_desc->tx_length);
    fc96:	6870      	ldr	r0, [r6, #4]
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
    fc98:	f8c3 1544 	str.w	r1, [r3, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
    fc9c:	f8c3 0548 	str.w	r0, [r3, #1352]	; 0x548
    nrf_spim_rx_buffer_set(p_spim, p_xfer_desc->p_rx_buffer, p_xfer_desc->rx_length);
    fca0:	68f1      	ldr	r1, [r6, #12]
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
    fca2:	f8c3 2534 	str.w	r2, [r3, #1332]	; 0x534
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    fca6:	2200      	movs	r2, #0
    p_reg->RXD.MAXCNT = length;
    fca8:	f8c3 1538 	str.w	r1, [r3, #1336]	; 0x538
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    fcac:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
    if (NRFX_SPIM_FLAG_TX_POSTINC & flags)
    fcb0:	f017 0201 	ands.w	r2, r7, #1
}


__STATIC_INLINE void nrf_spim_tx_list_enable(NRF_SPIM_Type * p_reg)
{
    p_reg->TXD.LIST = 1;
    fcb4:	bf18      	it	ne
    fcb6:	2201      	movne	r2, #1
}

__STATIC_INLINE void nrf_spim_tx_list_disable(NRF_SPIM_Type * p_reg)
{
    p_reg->TXD.LIST = 0;
    fcb8:	f8c3 2550 	str.w	r2, [r3, #1360]	; 0x550
    if (NRFX_SPIM_FLAG_RX_POSTINC & flags)
    fcbc:	f017 0202 	ands.w	r2, r7, #2
}

__STATIC_INLINE void nrf_spim_rx_list_enable(NRF_SPIM_Type * p_reg)
{
    p_reg->RXD.LIST = 1;
    fcc0:	bf18      	it	ne
    fcc2:	2201      	movne	r2, #1
}

__STATIC_INLINE void nrf_spim_rx_list_disable(NRF_SPIM_Type * p_reg)
{
    p_reg->RXD.LIST = 0;
    fcc4:	f8c3 2540 	str.w	r2, [r3, #1344]	; 0x540
    if (!(flags & NRFX_SPIM_FLAG_HOLD_XFER))
    fcc8:	073a      	lsls	r2, r7, #28
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    fcca:	bf5c      	itt	pl
    fccc:	2201      	movpl	r2, #1
    fcce:	611a      	strpl	r2, [r3, #16]
    if (!p_cb->handler)
    fcd0:	2224      	movs	r2, #36	; 0x24
    fcd2:	4362      	muls	r2, r4
    fcd4:	58aa      	ldr	r2, [r5, r2]
    fcd6:	b99a      	cbnz	r2, fd00 <nrfx_spim_xfer+0xf0>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    fcd8:	f8d3 2118 	ldr.w	r2, [r3, #280]	; 0x118
        while (!nrf_spim_event_check(p_spim, NRF_SPIM_EVENT_END)){}
    fcdc:	2a00      	cmp	r2, #0
    fcde:	d0fb      	beq.n	fcd8 <nrfx_spim_xfer+0xc8>
        if (p_cb->ss_pin != NRFX_SPIM_PIN_NOT_USED)
    fce0:	2324      	movs	r3, #36	; 0x24
    fce2:	fb03 5404 	mla	r4, r3, r4, r5
    fce6:	7fe2      	ldrb	r2, [r4, #31]
    fce8:	2aff      	cmp	r2, #255	; 0xff
    fcea:	d005      	beq.n	fcf8 <nrfx_spim_xfer+0xe8>
    fcec:	2301      	movs	r3, #1
                if (p_cb->ss_active_high)
    fcee:	7fa1      	ldrb	r1, [r4, #30]
    fcf0:	4093      	lsls	r3, r2
    fcf2:	4a0a      	ldr	r2, [pc, #40]	; (fd1c <nrfx_spim_xfer+0x10c>)
    fcf4:	b111      	cbz	r1, fcfc <nrfx_spim_xfer+0xec>
    fcf6:	60d3      	str	r3, [r2, #12]
    return err_code;
    fcf8:	480a      	ldr	r0, [pc, #40]	; (fd24 <nrfx_spim_xfer+0x114>)
    fcfa:	e7c6      	b.n	fc8a <nrfx_spim_xfer+0x7a>
    p_reg->OUTSET = set_mask;
    fcfc:	6093      	str	r3, [r2, #8]
    fcfe:	e7fb      	b.n	fcf8 <nrfx_spim_xfer+0xe8>
    fd00:	2240      	movs	r2, #64	; 0x40
    if (!enable)
    fd02:	f017 0f04 	tst.w	r7, #4
    p_reg->INTENCLR = mask;
    fd06:	bf14      	ite	ne
    fd08:	f8c3 2308 	strne.w	r2, [r3, #776]	; 0x308
    p_reg->INTENSET = mask;
    fd0c:	f8c3 2304 	streq.w	r2, [r3, #772]	; 0x304
    fd10:	e7f2      	b.n	fcf8 <nrfx_spim_xfer+0xe8>
        return err_code;
    fd12:	4805      	ldr	r0, [pc, #20]	; (fd28 <nrfx_spim_xfer+0x118>)
    fd14:	e7b9      	b.n	fc8a <nrfx_spim_xfer+0x7a>
    fd16:	bf00      	nop
    fd18:	2002018c 	.word	0x2002018c
    fd1c:	40842500 	.word	0x40842500
    fd20:	0bad000a 	.word	0x0bad000a
    fd24:	0bad0000 	.word	0x0bad0000
    fd28:	0bad000b 	.word	0x0bad000b

0000fd2c <nrfx_spim_3_irq_handler>:
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    fd2c:	4b0d      	ldr	r3, [pc, #52]	; (fd64 <nrfx_spim_3_irq_handler+0x38>)
    fd2e:	f8d3 2118 	ldr.w	r2, [r3, #280]	; 0x118
        nrf_spim_task_trigger(p_spim, NRF_SPIM_TASK_START);
        return;
    }
#endif

    if (nrf_spim_event_check(p_spim, NRF_SPIM_EVENT_END))
    fd32:	b1aa      	cbz	r2, fd60 <nrfx_spim_3_irq_handler+0x34>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    fd34:	2200      	movs	r2, #0
    fd36:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
    if (p_cb->ss_pin != NRFX_SPIM_PIN_NOT_USED)
    fd3a:	4b0b      	ldr	r3, [pc, #44]	; (fd68 <nrfx_spim_3_irq_handler+0x3c>)
    fd3c:	7fd9      	ldrb	r1, [r3, #31]
    fd3e:	29ff      	cmp	r1, #255	; 0xff
    fd40:	d005      	beq.n	fd4e <nrfx_spim_3_irq_handler+0x22>
    fd42:	2201      	movs	r2, #1
            if (p_cb->ss_active_high)
    fd44:	7f98      	ldrb	r0, [r3, #30]
    fd46:	408a      	lsls	r2, r1
    fd48:	4908      	ldr	r1, [pc, #32]	; (fd6c <nrfx_spim_3_irq_handler+0x40>)
    fd4a:	b138      	cbz	r0, fd5c <nrfx_spim_3_irq_handler+0x30>
    p_reg->OUTCLR = clr_mask;
    fd4c:	60ca      	str	r2, [r1, #12]
    p_cb->transfer_in_progress = false;
    fd4e:	2200      	movs	r2, #0
    p_cb->handler(&p_cb->evt, p_cb->p_context);
    fd50:	4807      	ldr	r0, [pc, #28]	; (fd70 <nrfx_spim_3_irq_handler+0x44>)
    p_cb->transfer_in_progress = false;
    fd52:	775a      	strb	r2, [r3, #29]
    p_cb->evt.type = NRFX_SPIM_EVENT_DONE;
    fd54:	721a      	strb	r2, [r3, #8]
    p_cb->handler(&p_cb->evt, p_cb->p_context);
    fd56:	e9d3 2100 	ldrd	r2, r1, [r3]
    fd5a:	4710      	bx	r2
    p_reg->OUTSET = set_mask;
    fd5c:	608a      	str	r2, [r1, #8]
    fd5e:	e7f6      	b.n	fd4e <nrfx_spim_3_irq_handler+0x22>

#if NRFX_CHECK(NRFX_SPIM3_ENABLED)
void nrfx_spim_3_irq_handler(void)
{
    irq_handler(NRF_SPIM3, &m_cb[NRFX_SPIM3_INST_IDX]);
}
    fd60:	4770      	bx	lr
    fd62:	bf00      	nop
    fd64:	4000b000 	.word	0x4000b000
    fd68:	2002018c 	.word	0x2002018c
    fd6c:	40842500 	.word	0x40842500
    fd70:	20020194 	.word	0x20020194

0000fd74 <z_sys_device_do_config_level>:
 * off and the next one begins.
 *
 * @param level init level to run.
 */
void z_sys_device_do_config_level(s32_t level)
{
    fd74:	b570      	push	{r4, r5, r6, lr}
		retval = device_conf->init(info);
		if (retval != 0) {
			/* Initialization failed. Clear the API struct so that
			 * device_get_binding() will not succeed for it.
			 */
			info->driver_api = NULL;
    fd76:	2600      	movs	r6, #0
	for (info = config_levels[level]; info < config_levels[level+1];
    fd78:	4b08      	ldr	r3, [pc, #32]	; (fd9c <z_sys_device_do_config_level+0x28>)
    fd7a:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
    fd7e:	3001      	adds	r0, #1
    fd80:	f853 5020 	ldr.w	r5, [r3, r0, lsl #2]
    fd84:	42a5      	cmp	r5, r4
    fd86:	d800      	bhi.n	fd8a <z_sys_device_do_config_level+0x16>
		} else {
			z_object_init(info);
		}
	}
}
    fd88:	bd70      	pop	{r4, r5, r6, pc}
		retval = device_conf->init(info);
    fd8a:	6823      	ldr	r3, [r4, #0]
    fd8c:	4620      	mov	r0, r4
    fd8e:	685b      	ldr	r3, [r3, #4]
    fd90:	4798      	blx	r3
		if (retval != 0) {
    fd92:	b100      	cbz	r0, fd96 <z_sys_device_do_config_level+0x22>
			info->driver_api = NULL;
    fd94:	6066      	str	r6, [r4, #4]
								info++) {
    fd96:	340c      	adds	r4, #12
    fd98:	e7f4      	b.n	fd84 <z_sys_device_do_config_level+0x10>
    fd9a:	bf00      	nop
    fd9c:	000126e8 	.word	0x000126e8

0000fda0 <z_impl_device_get_binding>:
	/* Split the search into two loops: in the common scenario, where
	 * device names are stored in ROM (and are referenced by the user
	 * with CONFIG_* macros), only cheap pointer comparisons will be
	 * performed.  Reserve string comparisons for a fallback.
	 */
	for (info = __device_init_start; info != __device_init_end; info++) {
    fda0:	4b10      	ldr	r3, [pc, #64]	; (fde4 <z_impl_device_get_binding+0x44>)
{
    fda2:	b570      	push	{r4, r5, r6, lr}
    fda4:	4605      	mov	r5, r0
    fda6:	461e      	mov	r6, r3
	for (info = __device_init_start; info != __device_init_end; info++) {
    fda8:	4c0f      	ldr	r4, [pc, #60]	; (fde8 <z_impl_device_get_binding+0x48>)
    fdaa:	429c      	cmp	r4, r3
    fdac:	d104      	bne.n	fdb8 <z_impl_device_get_binding+0x18>
		    (info->config->name == name)) {
			return info;
		}
	}

	for (info = __device_init_start; info != __device_init_end; info++) {
    fdae:	4c0e      	ldr	r4, [pc, #56]	; (fde8 <z_impl_device_get_binding+0x48>)
    fdb0:	42b4      	cmp	r4, r6
    fdb2:	d109      	bne.n	fdc8 <z_impl_device_get_binding+0x28>
		if (strcmp(name, info->config->name) == 0) {
			return info;
		}
	}

	return NULL;
    fdb4:	2400      	movs	r4, #0
    fdb6:	e012      	b.n	fdde <z_impl_device_get_binding+0x3e>
		if ((info->driver_api != NULL) &&
    fdb8:	6862      	ldr	r2, [r4, #4]
    fdba:	b11a      	cbz	r2, fdc4 <z_impl_device_get_binding+0x24>
		    (info->config->name == name)) {
    fdbc:	6822      	ldr	r2, [r4, #0]
		if ((info->driver_api != NULL) &&
    fdbe:	6812      	ldr	r2, [r2, #0]
    fdc0:	42aa      	cmp	r2, r5
    fdc2:	d00c      	beq.n	fdde <z_impl_device_get_binding+0x3e>
	for (info = __device_init_start; info != __device_init_end; info++) {
    fdc4:	340c      	adds	r4, #12
    fdc6:	e7f0      	b.n	fdaa <z_impl_device_get_binding+0xa>
		if (info->driver_api == NULL) {
    fdc8:	6863      	ldr	r3, [r4, #4]
    fdca:	b90b      	cbnz	r3, fdd0 <z_impl_device_get_binding+0x30>
	for (info = __device_init_start; info != __device_init_end; info++) {
    fdcc:	340c      	adds	r4, #12
    fdce:	e7ef      	b.n	fdb0 <z_impl_device_get_binding+0x10>
		if (strcmp(name, info->config->name) == 0) {
    fdd0:	6823      	ldr	r3, [r4, #0]
    fdd2:	4628      	mov	r0, r5
    fdd4:	6819      	ldr	r1, [r3, #0]
    fdd6:	f001 fe80 	bl	11ada <strcmp>
    fdda:	2800      	cmp	r0, #0
    fddc:	d1f6      	bne.n	fdcc <z_impl_device_get_binding+0x2c>
}
    fdde:	4620      	mov	r0, r4
    fde0:	bd70      	pop	{r4, r5, r6, pc}
    fde2:	bf00      	nop
    fde4:	2002592c 	.word	0x2002592c
    fde8:	20025890 	.word	0x20025890

0000fdec <k_sys_fatal_error_handler>:
/* LCOV_EXCL_STOP */

/* LCOV_EXCL_START */
__weak void k_sys_fatal_error_handler(unsigned int reason,
				      const z_arch_esf_t *esf)
{
    fdec:	b510      	push	{r4, lr}
    fdee:	4604      	mov	r4, r0
	z_impl_log_panic();
    fdf0:	f7fc fef8 	bl	cbe4 <z_impl_log_panic>
	ARG_UNUSED(esf);

	LOG_PANIC();
	LOG_ERR("Halting system");
    fdf4:	2301      	movs	r3, #1
    fdf6:	f04f 0100 	mov.w	r1, #0
    fdfa:	4a08      	ldr	r2, [pc, #32]	; (fe1c <k_sys_fatal_error_handler+0x30>)
    fdfc:	f363 0102 	bfi	r1, r3, #0, #3
    fe00:	4b07      	ldr	r3, [pc, #28]	; (fe20 <k_sys_fatal_error_handler+0x34>)
    fe02:	f36f 01c5 	bfc	r1, #3, #3
    fe06:	1a9b      	subs	r3, r3, r2
    fe08:	08db      	lsrs	r3, r3, #3
    fe0a:	4806      	ldr	r0, [pc, #24]	; (fe24 <k_sys_fatal_error_handler+0x38>)
    fe0c:	f363 118f 	bfi	r1, r3, #6, #10
    fe10:	f001 fa02 	bl	11218 <log_0>
	z_arch_system_halt(reason);
    fe14:	4620      	mov	r0, r4
    fe16:	f002 f878 	bl	11f0a <z_arch_system_halt>
    fe1a:	bf00      	nop
    fe1c:	00012550 	.word	0x00012550
    fe20:	00012578 	.word	0x00012578
    fe24:	00012fee 	.word	0x00012fee

0000fe28 <z_fatal_error>:
	z_arch_system_halt(reason);
}
/* LCOV_EXCL_STOP */

void z_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
    fe28:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    fe2c:	4606      	mov	r6, r0
    fe2e:	4688      	mov	r8, r1
	return z_impl_k_current_get();
    fe30:	f000 fc98 	bl	10764 <z_impl_k_current_get>
	struct k_thread *thread = k_current_get();

	/* sanitycheck looks for the "ZEPHYR FATAL ERROR" string, don't
	 * change it without also updating sanitycheck
	 */
	LOG_ERR(">>> ZEPHYR FATAL ERROR %d: %s", reason, reason_to_str(reason));
    fe34:	2201      	movs	r2, #1
    fe36:	f04f 0300 	mov.w	r3, #0
    fe3a:	4c1e      	ldr	r4, [pc, #120]	; (feb4 <z_fatal_error+0x8c>)
    fe3c:	f362 0302 	bfi	r3, r2, #0, #3
    fe40:	4a1d      	ldr	r2, [pc, #116]	; (feb8 <z_fatal_error+0x90>)
    fe42:	2e04      	cmp	r6, #4
    fe44:	eba4 0402 	sub.w	r4, r4, r2
    fe48:	bf98      	it	ls
    fe4a:	4a1c      	ldrls	r2, [pc, #112]	; (febc <z_fatal_error+0x94>)
    fe4c:	f3c4 04c9 	ubfx	r4, r4, #3, #10
    fe50:	f36f 03c5 	bfc	r3, #3, #3
    fe54:	4607      	mov	r7, r0
    fe56:	f364 138f 	bfi	r3, r4, #6, #10
    fe5a:	bf94      	ite	ls
    fe5c:	f852 2026 	ldrls.w	r2, [r2, r6, lsl #2]
    fe60:	4a17      	ldrhi	r2, [pc, #92]	; (fec0 <z_fatal_error+0x98>)
    fe62:	4818      	ldr	r0, [pc, #96]	; (fec4 <z_fatal_error+0x9c>)
    fe64:	4631      	mov	r1, r6
    fe66:	f001 f9f8 	bl	1125a <log_2>
	 * if (k_is_in_isr()) {
	 *     LOG_ERR("Fault during interrupt handling\n");
	 * }
	 */

	LOG_ERR("Current thread: %p (%s)", thread,
    fe6a:	f04f 0500 	mov.w	r5, #0
    fe6e:	2301      	movs	r3, #1
    fe70:	f363 0502 	bfi	r5, r3, #0, #3
    fe74:	f36f 05c5 	bfc	r5, #3, #3
	const char *thread_name = k_thread_name_get(thread);
    fe78:	4638      	mov	r0, r7
	LOG_ERR("Current thread: %p (%s)", thread,
    fe7a:	f364 158f 	bfi	r5, r4, #6, #10
	const char *thread_name = k_thread_name_get(thread);
    fe7e:	f002 f961 	bl	12144 <k_thread_name_get>
	if (thread_name == NULL || thread_name[0] == '\0') {
    fe82:	b1a8      	cbz	r0, feb0 <z_fatal_error+0x88>
    fe84:	7802      	ldrb	r2, [r0, #0]
		thread_name = "unknown";
    fe86:	4b10      	ldr	r3, [pc, #64]	; (fec8 <z_fatal_error+0xa0>)
    fe88:	2a00      	cmp	r2, #0
    fe8a:	bf08      	it	eq
    fe8c:	4618      	moveq	r0, r3
	LOG_ERR("Current thread: %p (%s)", thread,
    fe8e:	f7fc fdab 	bl	c9e8 <log_strdup>
    fe92:	462b      	mov	r3, r5
    fe94:	4602      	mov	r2, r0
    fe96:	4639      	mov	r1, r7
    fe98:	480c      	ldr	r0, [pc, #48]	; (fecc <z_fatal_error+0xa4>)
    fe9a:	f001 f9de 	bl	1125a <log_2>
		log_strdup(thread_name_get(thread)));

	k_sys_fatal_error_handler(reason, esf);
    fe9e:	4641      	mov	r1, r8
    fea0:	4630      	mov	r0, r6
    fea2:	f7ff ffa3 	bl	fdec <k_sys_fatal_error_handler>
	z_impl_k_thread_abort(thread);
    fea6:	4638      	mov	r0, r7
		/* FIXME: #17656 */
		__ASSERT(!k_is_in_isr(),
			 "Attempted to recover from a fatal error in ISR");
	}
	k_thread_abort(thread);
}
    fea8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    feac:	f7fe b9ce 	b.w	e24c <z_impl_k_thread_abort>
		thread_name = "unknown";
    feb0:	4805      	ldr	r0, [pc, #20]	; (fec8 <z_fatal_error+0xa0>)
    feb2:	e7ec      	b.n	fe8e <z_fatal_error+0x66>
    feb4:	00012578 	.word	0x00012578
    feb8:	00012550 	.word	0x00012550
    febc:	00012700 	.word	0x00012700
    fec0:	00013047 	.word	0x00013047
    fec4:	0001305d 	.word	0x0001305d
    fec8:	00013055 	.word	0x00013055
    fecc:	0001307b 	.word	0x0001307b

0000fed0 <idle>:
#else
#define IDLE_YIELD_IF_COOP() do { } while (false)
#endif

void idle(void *unused1, void *unused2, void *unused3)
{
    fed0:	b508      	push	{r3, lr}
	_kernel.idle = ticks;
    fed2:	4d0b      	ldr	r5, [pc, #44]	; (ff00 <idle+0x30>)
    fed4:	f04f 0220 	mov.w	r2, #32
    fed8:	f3ef 8311 	mrs	r3, BASEPRI
    fedc:	f382 8811 	msr	BASEPRI, r2
    fee0:	f3bf 8f6f 	isb	sy
	s32_t ticks = z_get_next_timeout_expiry();
    fee4:	f002 f96d 	bl	121c2 <z_get_next_timeout_expiry>
	z_set_timeout_expiry((ticks < IDLE_THRESH) ? 1 : ticks, true);
    fee8:	2101      	movs	r1, #1
	s32_t ticks = z_get_next_timeout_expiry();
    feea:	4604      	mov	r4, r0
	z_set_timeout_expiry((ticks < IDLE_THRESH) ? 1 : ticks, true);
    feec:	2802      	cmp	r0, #2
    feee:	bfd8      	it	le
    fef0:	4608      	movle	r0, r1
    fef2:	f002 f976 	bl	121e2 <z_set_timeout_expiry>
	_kernel.idle = ticks;
    fef6:	622c      	str	r4, [r5, #32]
 * @return N/A
 * @req K-CPU-IDLE-001
 */
static inline void k_cpu_idle(void)
{
	z_arch_cpu_idle();
    fef8:	f7fd fd9e 	bl	da38 <z_arch_cpu_idle>
    fefc:	e7ea      	b.n	fed4 <idle+0x4>
    fefe:	bf00      	nop
    ff00:	200242ec 	.word	0x200242ec

0000ff04 <z_bss_zero>:
 *
 * @return N/A
 */
void z_bss_zero(void)
{
	(void)memset(__bss_start, 0, __bss_end - __bss_start);
    ff04:	4802      	ldr	r0, [pc, #8]	; (ff10 <z_bss_zero+0xc>)
    ff06:	4a03      	ldr	r2, [pc, #12]	; (ff14 <z_bss_zero+0x10>)
    ff08:	2100      	movs	r1, #0
    ff0a:	1a12      	subs	r2, r2, r0
    ff0c:	f001 be1f 	b.w	11b4e <memset>
    ff10:	20020000 	.word	0x20020000
    ff14:	20024334 	.word	0x20024334

0000ff18 <z_data_copy>:
 * This routine copies the data section from ROM to RAM.
 *
 * @return N/A
 */
void z_data_copy(void)
{
    ff18:	b508      	push	{r3, lr}
	(void)memcpy(&__data_ram_start, &__data_rom_start,
		 __data_ram_end - __data_ram_start);
    ff1a:	4806      	ldr	r0, [pc, #24]	; (ff34 <z_data_copy+0x1c>)
	(void)memcpy(&__data_ram_start, &__data_rom_start,
    ff1c:	4a06      	ldr	r2, [pc, #24]	; (ff38 <z_data_copy+0x20>)
    ff1e:	4907      	ldr	r1, [pc, #28]	; (ff3c <z_data_copy+0x24>)
    ff20:	1a12      	subs	r2, r2, r0
    ff22:	f001 fde7 	bl	11af4 <memcpy>
#else
	(void)memcpy(&_app_smem_start, &_app_smem_rom_start,
		 _app_smem_end - _app_smem_start);
#endif /* CONFIG_STACK_CANARIES */
#endif /* CONFIG_USERSPACE */
}
    ff26:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	(void)memcpy(&_ramfunc_ram_start, &_ramfunc_rom_start,
    ff2a:	4a05      	ldr	r2, [pc, #20]	; (ff40 <z_data_copy+0x28>)
    ff2c:	4905      	ldr	r1, [pc, #20]	; (ff44 <z_data_copy+0x2c>)
    ff2e:	4806      	ldr	r0, [pc, #24]	; (ff48 <z_data_copy+0x30>)
    ff30:	f001 bde0 	b.w	11af4 <memcpy>
    ff34:	2002581c 	.word	0x2002581c
    ff38:	2002596c 	.word	0x2002596c
    ff3c:	000130e8 	.word	0x000130e8
    ff40:	00000000 	.word	0x00000000
    ff44:	000130e8 	.word	0x000130e8
    ff48:	20020000 	.word	0x20020000

0000ff4c <bg_thread_main>:
 * init functions, then invokes application's main() routine.
 *
 * @return N/A
 */
static void bg_thread_main(void *unused1, void *unused2, void *unused3)
{
    ff4c:	b508      	push	{r3, lr}
	static const unsigned int boot_delay = CONFIG_BOOT_DELAY;
#else
	static const unsigned int boot_delay;
#endif

	z_sys_device_do_config_level(_SYS_INIT_LEVEL_POST_KERNEL);
    ff4e:	2002      	movs	r0, #2
    ff50:	f7ff ff10 	bl	fd74 <z_sys_device_do_config_level>
	if (boot_delay > 0 && IS_ENABLED(CONFIG_MULTITHREADING)) {
		printk("***** delaying boot " STRINGIFY(CONFIG_BOOT_DELAY)
		       "ms (per build configuration) *****\n");
		k_busy_wait(CONFIG_BOOT_DELAY * USEC_PER_MSEC);
	}
	PRINT_BOOT_BANNER();
    ff54:	4807      	ldr	r0, [pc, #28]	; (ff74 <bg_thread_main+0x28>)
    ff56:	f001 f92c 	bl	111b2 <printk>

	/* Final init level before app starts */
	z_sys_device_do_config_level(_SYS_INIT_LEVEL_APPLICATION);
    ff5a:	2003      	movs	r0, #3
    ff5c:	f7ff ff0a 	bl	fd74 <z_sys_device_do_config_level>
	extern void __do_init_array_aux(void);
	__do_global_ctors_aux();
	__do_init_array_aux();
#endif

	z_init_static_threads();
    ff60:	f000 fcbe 	bl	108e0 <z_init_static_threads>
	z_timestamp_main = k_cycle_get_32();
#endif

	extern void main(void);

	main();
    ff64:	f7fc fb1e 	bl	c5a4 <main>

	/* Mark nonessenrial since main() has no more work to do */
	z_main_thread.base.user_options &= ~K_ESSENTIAL;
    ff68:	4a03      	ldr	r2, [pc, #12]	; (ff78 <bg_thread_main+0x2c>)
    ff6a:	7b13      	ldrb	r3, [r2, #12]
    ff6c:	f023 0301 	bic.w	r3, r3, #1
    ff70:	7313      	strb	r3, [r2, #12]

	/* Dump coverage data once the main() has exited. */
	gcov_coverage_dump();
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */
    ff72:	bd08      	pop	{r3, pc}
    ff74:	00013093 	.word	0x00013093
    ff78:	2002021c 	.word	0x2002021c

0000ff7c <z_cstart>:
 * cleared/zeroed.
 *
 * @return Does not return
 */
FUNC_NORETURN void z_cstart(void)
{
    ff7c:	b580      	push	{r7, lr}
    ff7e:	b0a2      	sub	sp, #136	; 0x88
	/* gcov hook needed to get the coverage report.*/
	gcov_static_init();

	LOG_CORE_INIT();
    ff80:	f7fc fc96 	bl	c8b0 <log_core_init>
 *
 * @return N/A
 */
static ALWAYS_INLINE void z_arm_interrupt_stack_setup(void)
{
	u32_t msp = (u32_t)(Z_THREAD_STACK_BUFFER(_interrupt_stack)) +
    ff84:	4b33      	ldr	r3, [pc, #204]	; (10054 <z_cstart+0xd8>)
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
    ff86:	f383 8808 	msr	MSP, r3
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    ff8a:	2400      	movs	r4, #0
    ff8c:	23e0      	movs	r3, #224	; 0xe0
    ff8e:	4d32      	ldr	r5, [pc, #200]	; (10058 <z_cstart+0xdc>)

	/* perform any architecture-specific initialization */
	z_arch_kernel_init();

#ifdef CONFIG_MULTITHREADING
	struct k_thread dummy_thread = {
    ff90:	2701      	movs	r7, #1
    ff92:	f885 3022 	strb.w	r3, [r5, #34]	; 0x22
    ff96:	77ec      	strb	r4, [r5, #31]
    ff98:	762c      	strb	r4, [r5, #24]
    ff9a:	766c      	strb	r4, [r5, #25]
    ff9c:	76ac      	strb	r4, [r5, #26]
#if defined(CONFIG_ARM_SECURE_FIRMWARE)
	NVIC_SetPriority(SecureFault_IRQn, _EXC_FAULT_PRIO);
#endif /* CONFIG_ARM_SECURE_FIRMWARE */

	/* Enable Usage, Mem, & Bus Faults */
	SCB->SHCSR |= SCB_SHCSR_USGFAULTENA_Msk | SCB_SHCSR_MEMFAULTENA_Msk |
    ff9e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
# ifdef CONFIG_SCHED_CPU_MASK
		 .base.cpu_mask = -1,
# endif
	};

	_current = &dummy_thread;
    ffa0:	4e2e      	ldr	r6, [pc, #184]	; (1005c <z_cstart+0xe0>)
    ffa2:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
    ffa6:	626b      	str	r3, [r5, #36]	; 0x24

static ALWAYS_INLINE void z_arch_kernel_init(void)
{
	z_arm_interrupt_stack_setup();
	z_arm_exc_setup();
	z_arm_fault_init();
    ffa8:	f7fe f93c 	bl	e224 <z_arm_fault_init>
	z_arm_cpu_idle_init();
    ffac:	f7fd fd3e 	bl	da2c <z_arm_cpu_idle_init>
static ALWAYS_INLINE void z_arm_clear_faults(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Reset all faults */
	SCB->CFSR = SCB_CFSR_USGFAULTSR_Msk |
    ffb0:	f04f 33ff 	mov.w	r3, #4294967295
    ffb4:	62ab      	str	r3, [r5, #40]	; 0x28
		    SCB_CFSR_MEMFAULTSR_Msk |
		    SCB_CFSR_BUSFAULTSR_Msk;

	/* Clear all Hard Faults - HFSR is write-one-to-clear */
	SCB->HFSR = 0xffffffff;
    ffb6:	62eb      	str	r3, [r5, #44]	; 0x2c
	struct k_thread dummy_thread = {
    ffb8:	ab07      	add	r3, sp, #28
    ffba:	226c      	movs	r2, #108	; 0x6c
    ffbc:	4621      	mov	r1, r4
    ffbe:	4618      	mov	r0, r3
    ffc0:	f001 fdc5 	bl	11b4e <memset>
	_current = &dummy_thread;
    ffc4:	60b0      	str	r0, [r6, #8]
#ifdef CONFIG_USERSPACE
	z_app_shmem_bss_zero();
#endif

	/* perform basic hardware initialization */
	z_sys_device_do_config_level(_SYS_INIT_LEVEL_PRE_KERNEL_1);
    ffc6:	4620      	mov	r0, r4
	struct k_thread dummy_thread = {
    ffc8:	f88d 7029 	strb.w	r7, [sp, #41]	; 0x29
	z_sys_device_do_config_level(_SYS_INIT_LEVEL_PRE_KERNEL_1);
    ffcc:	f7ff fed2 	bl	fd74 <z_sys_device_do_config_level>
	z_sys_device_do_config_level(_SYS_INIT_LEVEL_PRE_KERNEL_2);
    ffd0:	4638      	mov	r0, r7
    ffd2:	f7ff fecf 	bl	fd74 <z_sys_device_do_config_level>
	_kernel.ready_q.cache = &z_main_thread;
    ffd6:	4d22      	ldr	r5, [pc, #136]	; (10060 <z_cstart+0xe4>)
	z_sched_init();
    ffd8:	f000 fb6a 	bl	106b0 <z_sched_init>
	z_setup_new_thread(&z_main_thread, z_main_stack,
    ffdc:	4b21      	ldr	r3, [pc, #132]	; (10064 <z_cstart+0xe8>)
    ffde:	f44f 6280 	mov.w	r2, #1024	; 0x400
    ffe2:	e9cd 7304 	strd	r7, r3, [sp, #16]
    ffe6:	e9cd 4402 	strd	r4, r4, [sp, #8]
    ffea:	4b1f      	ldr	r3, [pc, #124]	; (10068 <z_cstart+0xec>)
    ffec:	e9cd 4400 	strd	r4, r4, [sp]
    fff0:	491e      	ldr	r1, [pc, #120]	; (1006c <z_cstart+0xf0>)
    fff2:	4628      	mov	r0, r5
	_kernel.ready_q.cache = &z_main_thread;
    fff4:	6275      	str	r5, [r6, #36]	; 0x24
	z_setup_new_thread(&z_main_thread, z_main_stack,
    fff6:	f000 fc29 	bl	1084c <z_setup_new_thread>
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
}

static inline void z_mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
    fffa:	7b6b      	ldrb	r3, [r5, #13]
    fffc:	f023 0204 	bic.w	r2, r3, #4
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
   10000:	f013 0f1b 	tst.w	r3, #27
	thread->base.thread_state &= ~_THREAD_PRESTART;
   10004:	736a      	strb	r2, [r5, #13]
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
   10006:	d104      	bne.n	10012 <z_cstart+0x96>
	return true;
}

static ALWAYS_INLINE void z_ready_thread(struct k_thread *thread)
{
	if (z_is_thread_ready(thread)) {
   10008:	69ab      	ldr	r3, [r5, #24]
   1000a:	b913      	cbnz	r3, 10012 <z_cstart+0x96>
		z_add_thread_to_ready_q(thread);
   1000c:	4628      	mov	r0, r5
   1000e:	f000 f9cf 	bl	103b0 <z_add_thread_to_ready_q>
	z_setup_new_thread(thr, stack,
   10012:	4b17      	ldr	r3, [pc, #92]	; (10070 <z_cstart+0xf4>)
   10014:	2201      	movs	r2, #1
   10016:	9305      	str	r3, [sp, #20]
   10018:	230f      	movs	r3, #15
   1001a:	e9cd 3203 	strd	r3, r2, [sp, #12]
   1001e:	2300      	movs	r3, #0
   10020:	4d14      	ldr	r5, [pc, #80]	; (10074 <z_cstart+0xf8>)
   10022:	e9cd 3301 	strd	r3, r3, [sp, #4]
   10026:	9300      	str	r3, [sp, #0]
   10028:	f44f 72a0 	mov.w	r2, #320	; 0x140
   1002c:	4b12      	ldr	r3, [pc, #72]	; (10078 <z_cstart+0xfc>)
   1002e:	4913      	ldr	r1, [pc, #76]	; (1007c <z_cstart+0x100>)
   10030:	4628      	mov	r0, r5
   10032:	f000 fc0b 	bl	1084c <z_setup_new_thread>
	thread->base.thread_state &= ~_THREAD_PRESTART;
   10036:	7b6b      	ldrb	r3, [r5, #13]
	z_arch_switch_to_main_thread(&z_main_thread, z_main_stack,
   10038:	f44f 6280 	mov.w	r2, #1024	; 0x400
   1003c:	f023 0304 	bic.w	r3, r3, #4
   10040:	736b      	strb	r3, [r5, #13]
 * @return N/A
 */

static inline void sys_dlist_init(sys_dlist_t *list)
{
	list->head = (sys_dnode_t *)list;
   10042:	4b0f      	ldr	r3, [pc, #60]	; (10080 <z_cstart+0x104>)
   10044:	4909      	ldr	r1, [pc, #36]	; (1006c <z_cstart+0xf0>)
	list->tail = (sys_dnode_t *)list;
   10046:	e9c6 3306 	strd	r3, r3, [r6, #24]
   1004a:	4805      	ldr	r0, [pc, #20]	; (10060 <z_cstart+0xe4>)
   1004c:	4b06      	ldr	r3, [pc, #24]	; (10068 <z_cstart+0xec>)
	_kernel.cpus[0].idle_thread = &z_idle_thread;
   1004e:	60f5      	str	r5, [r6, #12]
	z_arch_switch_to_main_thread(&z_main_thread, z_main_stack,
   10050:	f7fd fd9a 	bl	db88 <z_arch_switch_to_main_thread>
   10054:	20025378 	.word	0x20025378
   10058:	e000ed00 	.word	0xe000ed00
   1005c:	200242ec 	.word	0x200242ec
   10060:	2002021c 	.word	0x2002021c
   10064:	000130dd 	.word	0x000130dd
   10068:	0000ff4d 	.word	0x0000ff4d
   1006c:	20024638 	.word	0x20024638
   10070:	000130e2 	.word	0x000130e2
   10074:	200201b0 	.word	0x200201b0
   10078:	0000fed1 	.word	0x0000fed1
   1007c:	20024a38 	.word	0x20024a38
   10080:	20024304 	.word	0x20024304

00010084 <init_mem_slab_module>:
 * Perform any initialization that wasn't done at build time.
 *
 * @return N/A
 */
static int init_mem_slab_module(struct device *dev)
{
   10084:	b570      	push	{r4, r5, r6, lr}
	slab->free_list = NULL;
   10086:	2400      	movs	r4, #0
	ARG_UNUSED(dev);

	Z_STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
   10088:	4b0a      	ldr	r3, [pc, #40]	; (100b4 <init_mem_slab_module+0x30>)
   1008a:	480b      	ldr	r0, [pc, #44]	; (100b8 <init_mem_slab_module+0x34>)
   1008c:	4283      	cmp	r3, r0
   1008e:	d301      	bcc.n	10094 <init_mem_slab_module+0x10>
		create_free_list(slab);
		SYS_TRACING_OBJ_INIT(k_mem_slab, slab);
		z_object_init(slab);
	}
	return 0;
}
   10090:	2000      	movs	r0, #0
   10092:	bd70      	pop	{r4, r5, r6, pc}
	for (j = 0U; j < slab->num_blocks; j++) {
   10094:	2100      	movs	r1, #0
	p = slab->buffer;
   10096:	691a      	ldr	r2, [r3, #16]
	for (j = 0U; j < slab->num_blocks; j++) {
   10098:	689d      	ldr	r5, [r3, #8]
	slab->free_list = NULL;
   1009a:	615c      	str	r4, [r3, #20]
	for (j = 0U; j < slab->num_blocks; j++) {
   1009c:	42a9      	cmp	r1, r5
   1009e:	d101      	bne.n	100a4 <init_mem_slab_module+0x20>
	Z_STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
   100a0:	331c      	adds	r3, #28
   100a2:	e7f3      	b.n	1008c <init_mem_slab_module+0x8>
		*(char **)p = slab->free_list;
   100a4:	695e      	ldr	r6, [r3, #20]
	for (j = 0U; j < slab->num_blocks; j++) {
   100a6:	3101      	adds	r1, #1
		*(char **)p = slab->free_list;
   100a8:	6016      	str	r6, [r2, #0]
		p += slab->block_size;
   100aa:	68de      	ldr	r6, [r3, #12]
		slab->free_list = p;
   100ac:	615a      	str	r2, [r3, #20]
		p += slab->block_size;
   100ae:	4432      	add	r2, r6
   100b0:	e7f4      	b.n	1009c <init_mem_slab_module+0x18>
   100b2:	bf00      	nop
   100b4:	2002592c 	.word	0x2002592c
   100b8:	2002592c 	.word	0x2002592c

000100bc <k_mem_slab_alloc>:

	z_object_init(slab);
}

int k_mem_slab_alloc(struct k_mem_slab *slab, void **mem, s32_t timeout)
{
   100bc:	b510      	push	{r4, lr}
   100be:	4613      	mov	r3, r2
   100c0:	460c      	mov	r4, r1
   100c2:	f04f 0220 	mov.w	r2, #32
   100c6:	f3ef 8111 	mrs	r1, BASEPRI
   100ca:	f382 8811 	msr	BASEPRI, r2
   100ce:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	int result;

	if (slab->free_list != NULL) {
   100d2:	6942      	ldr	r2, [r0, #20]
   100d4:	b162      	cbz	r2, 100f0 <k_mem_slab_alloc+0x34>
		/* take a free block */
		*mem = slab->free_list;
   100d6:	6022      	str	r2, [r4, #0]
		slab->free_list = *(char **)(slab->free_list);
   100d8:	6943      	ldr	r3, [r0, #20]
   100da:	681b      	ldr	r3, [r3, #0]
   100dc:	6143      	str	r3, [r0, #20]
		slab->num_used++;
   100de:	6983      	ldr	r3, [r0, #24]
   100e0:	3301      	adds	r3, #1
   100e2:	6183      	str	r3, [r0, #24]
		result = 0;
   100e4:	2000      	movs	r0, #0
	__asm__ volatile(
   100e6:	f381 8811 	msr	BASEPRI, r1
   100ea:	f3bf 8f6f 	isb	sy
		return result;
	}

	k_spin_unlock(&lock, key);

	return result;
   100ee:	e00d      	b.n	1010c <k_mem_slab_alloc+0x50>
	} else if (timeout == K_NO_WAIT) {
   100f0:	b91b      	cbnz	r3, 100fa <k_mem_slab_alloc+0x3e>
		*mem = NULL;
   100f2:	6023      	str	r3, [r4, #0]
		result = -ENOMEM;
   100f4:	f06f 000b 	mvn.w	r0, #11
   100f8:	e7f5      	b.n	100e6 <k_mem_slab_alloc+0x2a>
		result = z_pend_curr(&lock, key, &slab->wait_q, timeout);
   100fa:	4602      	mov	r2, r0
   100fc:	4804      	ldr	r0, [pc, #16]	; (10110 <k_mem_slab_alloc+0x54>)
   100fe:	f000 fa95 	bl	1062c <z_pend_curr>
		if (result == 0) {
   10102:	b918      	cbnz	r0, 1010c <k_mem_slab_alloc+0x50>
			*mem = _current->base.swap_data;
   10104:	4b03      	ldr	r3, [pc, #12]	; (10114 <k_mem_slab_alloc+0x58>)
   10106:	689b      	ldr	r3, [r3, #8]
   10108:	695b      	ldr	r3, [r3, #20]
   1010a:	6023      	str	r3, [r4, #0]
}
   1010c:	bd10      	pop	{r4, pc}
   1010e:	bf00      	nop
   10110:	20024331 	.word	0x20024331
   10114:	200242ec 	.word	0x200242ec

00010118 <k_mem_slab_free>:

void k_mem_slab_free(struct k_mem_slab *slab, void **mem)
{
   10118:	b570      	push	{r4, r5, r6, lr}
   1011a:	4604      	mov	r4, r0
   1011c:	460d      	mov	r5, r1
	__asm__ volatile(
   1011e:	f04f 0320 	mov.w	r3, #32
   10122:	f3ef 8611 	mrs	r6, BASEPRI
   10126:	f383 8811 	msr	BASEPRI, r3
   1012a:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_thread *pending_thread = z_unpend_first_thread(&slab->wait_q);
   1012e:	f001 ffaf 	bl	12090 <z_unpend_first_thread>

	if (pending_thread != NULL) {
   10132:	b180      	cbz	r0, 10156 <k_mem_slab_free+0x3e>
}

static ALWAYS_INLINE void
z_arch_thread_return_value_set(struct k_thread *thread, unsigned int value)
{
	thread->arch.swap_return_value = value;
   10134:	2100      	movs	r1, #0
		z_thread_return_value_set_with_data(pending_thread, 0, *mem);
   10136:	682a      	ldr	r2, [r5, #0]
   10138:	6681      	str	r1, [r0, #104]	; 0x68
	thread->base.swap_data = data;
   1013a:	6142      	str	r2, [r0, #20]
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
   1013c:	7b42      	ldrb	r2, [r0, #13]
   1013e:	06d2      	lsls	r2, r2, #27
   10140:	d103      	bne.n	1014a <k_mem_slab_free+0x32>
	if (z_is_thread_ready(thread)) {
   10142:	6983      	ldr	r3, [r0, #24]
   10144:	b90b      	cbnz	r3, 1014a <k_mem_slab_free+0x32>
		z_add_thread_to_ready_q(thread);
   10146:	f000 f933 	bl	103b0 <z_add_thread_to_ready_q>
		z_ready_thread(pending_thread);
		z_reschedule(&lock, key);
   1014a:	4631      	mov	r1, r6
		**(char ***)mem = slab->free_list;
		slab->free_list = *(char **)mem;
		slab->num_used--;
		k_spin_unlock(&lock, key);
	}
}
   1014c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		z_reschedule(&lock, key);
   10150:	4807      	ldr	r0, [pc, #28]	; (10170 <k_mem_slab_free+0x58>)
   10152:	f001 bf3d 	b.w	11fd0 <z_reschedule>
		**(char ***)mem = slab->free_list;
   10156:	682b      	ldr	r3, [r5, #0]
   10158:	6962      	ldr	r2, [r4, #20]
   1015a:	601a      	str	r2, [r3, #0]
		slab->free_list = *(char **)mem;
   1015c:	682b      	ldr	r3, [r5, #0]
   1015e:	6163      	str	r3, [r4, #20]
		slab->num_used--;
   10160:	69a3      	ldr	r3, [r4, #24]
   10162:	3b01      	subs	r3, #1
   10164:	61a3      	str	r3, [r4, #24]
	__asm__ volatile(
   10166:	f386 8811 	msr	BASEPRI, r6
   1016a:	f3bf 8f6f 	isb	sy
}
   1016e:	bd70      	pop	{r4, r5, r6, pc}
   10170:	20024331 	.word	0x20024331

00010174 <init_static_pools>:
	z_waitq_init(&p->wait_q);
	z_sys_mem_pool_base_init(&p->base);
}

int init_static_pools(struct device *unused)
{
   10174:	b538      	push	{r3, r4, r5, lr}
	ARG_UNUSED(unused);

	Z_STRUCT_SECTION_FOREACH(k_mem_pool, p) {
   10176:	4c07      	ldr	r4, [pc, #28]	; (10194 <init_static_pools+0x20>)
   10178:	4d07      	ldr	r5, [pc, #28]	; (10198 <init_static_pools+0x24>)
   1017a:	42ac      	cmp	r4, r5
   1017c:	d301      	bcc.n	10182 <init_static_pools+0xe>
		k_mem_pool_init(p);
	}

	return 0;
}
   1017e:	2000      	movs	r0, #0
   10180:	bd38      	pop	{r3, r4, r5, pc}
   10182:	f104 0314 	add.w	r3, r4, #20
	z_sys_mem_pool_base_init(&p->base);
   10186:	4620      	mov	r0, r4
   10188:	e9c4 3305 	strd	r3, r3, [r4, #20]
   1018c:	f000 fd7d 	bl	10c8a <z_sys_mem_pool_base_init>
	Z_STRUCT_SECTION_FOREACH(k_mem_pool, p) {
   10190:	341c      	adds	r4, #28
   10192:	e7f2      	b.n	1017a <init_static_pools+0x6>
   10194:	2002592c 	.word	0x2002592c
   10198:	20025948 	.word	0x20025948

0001019c <k_mem_pool_alloc>:

SYS_INIT(init_static_pools, PRE_KERNEL_1, CONFIG_KERNEL_INIT_PRIORITY_OBJECTS);

int k_mem_pool_alloc(struct k_mem_pool *p, struct k_mem_block *block,
		     size_t size, s32_t timeout)
{
   1019c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	int ret;
	s64_t end = 0;

	__ASSERT(!(z_arch_is_in_isr() && timeout != K_NO_WAIT), "");

	if (timeout > 0) {
   101a0:	1e1c      	subs	r4, r3, #0
{
   101a2:	b085      	sub	sp, #20
   101a4:	4607      	mov	r7, r0
   101a6:	460d      	mov	r5, r1
   101a8:	4692      	mov	sl, r2
	if (timeout > 0) {
   101aa:	dd3b      	ble.n	10224 <k_mem_pool_alloc+0x88>
	return z_impl_k_uptime_get();
   101ac:	f002 f837 	bl	1221e <z_impl_k_uptime_get>
		end = k_uptime_get() + timeout;
   101b0:	eb10 0804 	adds.w	r8, r0, r4
	return pool - &_k_mem_pool_list_start[0];
   101b4:	4b1d      	ldr	r3, [pc, #116]	; (1022c <k_mem_pool_alloc+0x90>)
   101b6:	4e1e      	ldr	r6, [pc, #120]	; (10230 <k_mem_pool_alloc+0x94>)
   101b8:	1afb      	subs	r3, r7, r3
   101ba:	109b      	asrs	r3, r3, #2
   101bc:	435e      	muls	r6, r3
		if (ret == 0 || timeout == K_NO_WAIT ||
		    ret != -ENOMEM) {
			return ret;
		}

		z_pend_curr_unlocked(&p->wait_q, timeout);
   101be:	f107 0b14 	add.w	fp, r7, #20
		block->id.pool = pool_id(p);
   101c2:	b2f6      	uxtb	r6, r6
		ret = z_sys_mem_pool_block_alloc(&p->base, size,
   101c4:	ab03      	add	r3, sp, #12
   101c6:	aa02      	add	r2, sp, #8
   101c8:	9500      	str	r5, [sp, #0]
   101ca:	4651      	mov	r1, sl
   101cc:	4638      	mov	r0, r7
   101ce:	f000 fda8 	bl	10d22 <z_sys_mem_pool_block_alloc>
		block->id.level = level_num;
   101d2:	796b      	ldrb	r3, [r5, #5]
   101d4:	9a02      	ldr	r2, [sp, #8]
		block->id.pool = pool_id(p);
   101d6:	712e      	strb	r6, [r5, #4]
		block->id.level = level_num;
   101d8:	f362 0303 	bfi	r3, r2, #0, #4
   101dc:	716b      	strb	r3, [r5, #5]
		block->id.block = block_num;
   101de:	686b      	ldr	r3, [r5, #4]
   101e0:	9a03      	ldr	r2, [sp, #12]
   101e2:	f362 331f 	bfi	r3, r2, #12, #20
   101e6:	606b      	str	r3, [r5, #4]
		if (ret == 0 || timeout == K_NO_WAIT ||
   101e8:	b1c8      	cbz	r0, 1021e <k_mem_pool_alloc+0x82>
   101ea:	b1c4      	cbz	r4, 1021e <k_mem_pool_alloc+0x82>
   101ec:	f110 0f0c 	cmn.w	r0, #12
   101f0:	d115      	bne.n	1021e <k_mem_pool_alloc+0x82>
	__asm__ volatile(
   101f2:	f04f 0320 	mov.w	r3, #32
   101f6:	f3ef 8011 	mrs	r0, BASEPRI
   101fa:	f383 8811 	msr	BASEPRI, r3
   101fe:	f3bf 8f6f 	isb	sy
	(void) z_pend_curr_irqlock(z_arch_irq_lock(), wait_q, timeout);
   10202:	4622      	mov	r2, r4
   10204:	4659      	mov	r1, fp
   10206:	f000 f9ed 	bl	105e4 <z_pend_curr_irqlock>

		if (timeout != K_FOREVER) {
   1020a:	1c63      	adds	r3, r4, #1
   1020c:	d0da      	beq.n	101c4 <k_mem_pool_alloc+0x28>
   1020e:	f002 f806 	bl	1221e <z_impl_k_uptime_get>
			timeout = end - k_uptime_get();
   10212:	eba8 0400 	sub.w	r4, r8, r0
			if (timeout <= 0) {
   10216:	2c00      	cmp	r4, #0
   10218:	dcd4      	bgt.n	101c4 <k_mem_pool_alloc+0x28>
				break;
			}
		}
	}

	return -EAGAIN;
   1021a:	f06f 000a 	mvn.w	r0, #10
}
   1021e:	b005      	add	sp, #20
   10220:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	s64_t end = 0;
   10224:	f04f 0800 	mov.w	r8, #0
   10228:	e7c4      	b.n	101b4 <k_mem_pool_alloc+0x18>
   1022a:	bf00      	nop
   1022c:	2002592c 	.word	0x2002592c
   10230:	b6db6db7 	.word	0xb6db6db7

00010234 <k_malloc>:
		  CONFIG_HEAP_MEM_POOL_SIZE, 1, 4);
#define _HEAP_MEM_POOL (&_heap_mem_pool)

void *k_malloc(size_t size)
{
	return k_mem_pool_malloc(_HEAP_MEM_POOL, size);
   10234:	4601      	mov	r1, r0
   10236:	4801      	ldr	r0, [pc, #4]	; (1023c <k_malloc+0x8>)
   10238:	f001 be84 	b.w	11f44 <k_mem_pool_malloc>
   1023c:	2002592c 	.word	0x2002592c

00010240 <resched.part.15>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   10240:	f3ef 8005 	mrs	r0, IPSR
		|| (vector && !(SCB->ICSR & SCB_ICSR_RETTOBASE_Msk))
   10244:	280d      	cmp	r0, #13
   10246:	d809      	bhi.n	1025c <resched.part.15+0x1c>
   10248:	b128      	cbz	r0, 10256 <resched.part.15+0x16>
   1024a:	4b05      	ldr	r3, [pc, #20]	; (10260 <resched.part.15+0x20>)
   1024c:	6858      	ldr	r0, [r3, #4]
   1024e:	f480 6000 	eor.w	r0, r0, #2048	; 0x800
   10252:	f3c0 20c0 	ubfx	r0, r0, #11, #1
#ifdef CONFIG_SMP
	_current_cpu->swap_ok = 0;
#endif

	return z_arch_irq_unlocked(key) && !z_arch_is_in_isr();
}
   10256:	f080 0001 	eor.w	r0, r0, #1
   1025a:	4770      	bx	lr
   1025c:	2001      	movs	r0, #1
   1025e:	e7fa      	b.n	10256 <resched.part.15+0x16>
   10260:	e000ed00 	.word	0xe000ed00

00010264 <z_reset_time_slice>:
{
   10264:	b510      	push	{r4, lr}
	if (slice_time != 0) {
   10266:	4c08      	ldr	r4, [pc, #32]	; (10288 <z_reset_time_slice+0x24>)
   10268:	6823      	ldr	r3, [r4, #0]
   1026a:	b15b      	cbz	r3, 10284 <z_reset_time_slice+0x20>
		_current_cpu->slice_ticks = slice_time + z_clock_elapsed();
   1026c:	f7fd fb62 	bl	d934 <z_clock_elapsed>
   10270:	6823      	ldr	r3, [r4, #0]
   10272:	4a06      	ldr	r2, [pc, #24]	; (1028c <z_reset_time_slice+0x28>)
   10274:	4418      	add	r0, r3
   10276:	6110      	str	r0, [r2, #16]
		z_set_timeout_expiry(slice_time, false);
   10278:	2100      	movs	r1, #0
}
   1027a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		z_set_timeout_expiry(slice_time, false);
   1027e:	4618      	mov	r0, r3
   10280:	f001 bfaf 	b.w	121e2 <z_set_timeout_expiry>
}
   10284:	bd10      	pop	{r4, pc}
   10286:	bf00      	nop
   10288:	20024324 	.word	0x20024324
   1028c:	200242ec 	.word	0x200242ec

00010290 <k_sched_time_slice_set>:
{
   10290:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   10292:	460d      	mov	r5, r1
   10294:	f04f 0320 	mov.w	r3, #32
   10298:	f3ef 8411 	mrs	r4, BASEPRI
   1029c:	f383 8811 	msr	BASEPRI, r3
   102a0:	f3bf 8f6f 	isb	sy

#ifdef _NEED_PRECISE_TICK_MS_CONVERSION
	int cyc = sys_clock_hw_cycles_per_sec();

	/* use 64-bit math to keep precision */
	return (s32_t)ceiling_fraction((s64_t)ms * cyc,
   102a4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
   102a8:	f240 36e7 	movw	r6, #999	; 0x3e7
   102ac:	2700      	movs	r7, #0
		_current_cpu->slice_ticks = 0;
   102ae:	2200      	movs	r2, #0
   102b0:	fbc1 6700 	smlal	r6, r7, r1, r0
   102b4:	4b09      	ldr	r3, [pc, #36]	; (102dc <k_sched_time_slice_set+0x4c>)
   102b6:	4630      	mov	r0, r6
   102b8:	611a      	str	r2, [r3, #16]
   102ba:	4639      	mov	r1, r7
   102bc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   102c0:	2300      	movs	r3, #0
   102c2:	f7fb ffad 	bl	c220 <__aeabi_ldivmod>
   102c6:	4b06      	ldr	r3, [pc, #24]	; (102e0 <k_sched_time_slice_set+0x50>)
   102c8:	6018      	str	r0, [r3, #0]
		slice_max_prio = prio;
   102ca:	4b06      	ldr	r3, [pc, #24]	; (102e4 <k_sched_time_slice_set+0x54>)
   102cc:	601d      	str	r5, [r3, #0]
		z_reset_time_slice();
   102ce:	f7ff ffc9 	bl	10264 <z_reset_time_slice>
	__asm__ volatile(
   102d2:	f384 8811 	msr	BASEPRI, r4
   102d6:	f3bf 8f6f 	isb	sy
}
   102da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   102dc:	200242ec 	.word	0x200242ec
   102e0:	20024324 	.word	0x20024324
   102e4:	20024320 	.word	0x20024320

000102e8 <k_sched_lock>:
	__asm__ volatile(
   102e8:	f04f 0320 	mov.w	r3, #32
   102ec:	f3ef 8111 	mrs	r1, BASEPRI
   102f0:	f383 8811 	msr	BASEPRI, r3
   102f4:	f3bf 8f6f 	isb	sy
{
#ifdef CONFIG_PREEMPT_ENABLED
	__ASSERT(!z_arch_is_in_isr(), "");
	__ASSERT(_current->base.sched_locked != 1, "");

	--_current->base.sched_locked;
   102f8:	4b04      	ldr	r3, [pc, #16]	; (1030c <k_sched_lock+0x24>)
   102fa:	689a      	ldr	r2, [r3, #8]
   102fc:	7bd3      	ldrb	r3, [r2, #15]
   102fe:	3b01      	subs	r3, #1
   10300:	73d3      	strb	r3, [r2, #15]
	__asm__ volatile(
   10302:	f381 8811 	msr	BASEPRI, r1
   10306:	f3bf 8f6f 	isb	sy
void k_sched_lock(void)
{
	LOCKED(&sched_spinlock) {
		z_sched_lock();
	}
}
   1030a:	4770      	bx	lr
   1030c:	200242ec 	.word	0x200242ec

00010310 <z_priq_dumb_remove>:
}

void z_priq_dumb_remove(sys_dlist_t *pq, struct k_thread *thread)
{
#if defined(CONFIG_SWAP_NONATOMIC) && defined(CONFIG_SCHED_DUMB)
	if (pq == &_kernel.ready_q.runq && thread == _current &&
   10310:	4b09      	ldr	r3, [pc, #36]	; (10338 <z_priq_dumb_remove+0x28>)
   10312:	f103 0228 	add.w	r2, r3, #40	; 0x28
   10316:	4282      	cmp	r2, r0
   10318:	d105      	bne.n	10326 <z_priq_dumb_remove+0x16>
   1031a:	689b      	ldr	r3, [r3, #8]
   1031c:	428b      	cmp	r3, r1
   1031e:	d102      	bne.n	10326 <z_priq_dumb_remove+0x16>
   10320:	7b4b      	ldrb	r3, [r1, #13]
   10322:	06db      	lsls	r3, r3, #27
   10324:	d107      	bne.n	10336 <z_priq_dumb_remove+0x26>
 * @return N/A
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	node->prev->next = node->next;
   10326:	e9d1 2300 	ldrd	r2, r3, [r1]
   1032a:	601a      	str	r2, [r3, #0]
	node->next->prev = node->prev;
   1032c:	680a      	ldr	r2, [r1, #0]
   1032e:	6053      	str	r3, [r2, #4]
	node->next = NULL;
   10330:	2300      	movs	r3, #0
	node->prev = NULL;
   10332:	e9c1 3300 	strd	r3, r3, [r1]
#endif

	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));

	sys_dlist_remove(&thread->base.qnode_dlist);
}
   10336:	4770      	bx	lr
   10338:	200242ec 	.word	0x200242ec

0001033c <update_cache>:
{
   1033c:	b538      	push	{r3, r4, r5, lr}
	struct k_thread *th = _priq_run_best(&_kernel.ready_q.runq);
   1033e:	4c0d      	ldr	r4, [pc, #52]	; (10374 <update_cache+0x38>)
{
   10340:	4602      	mov	r2, r0
	struct k_thread *th = _priq_run_best(&_kernel.ready_q.runq);
   10342:	f104 0028 	add.w	r0, r4, #40	; 0x28
   10346:	f001 fe6c 	bl	12022 <z_priq_dumb_best>
	return th ? th : _current_cpu->idle_thread;
   1034a:	4605      	mov	r5, r0
   1034c:	b900      	cbnz	r0, 10350 <update_cache+0x14>
   1034e:	68e5      	ldr	r5, [r4, #12]
   10350:	68a3      	ldr	r3, [r4, #8]
	if (preempt_ok != 0) {
   10352:	b94a      	cbnz	r2, 10368 <update_cache+0x2c>
	if (z_is_thread_prevented_from_running(_current)) {
   10354:	7b5a      	ldrb	r2, [r3, #13]
   10356:	06d2      	lsls	r2, r2, #27
   10358:	d106      	bne.n	10368 <update_cache+0x2c>
	if (IS_ENABLED(CONFIG_SWAP_NONATOMIC)
   1035a:	69aa      	ldr	r2, [r5, #24]
   1035c:	b922      	cbnz	r2, 10368 <update_cache+0x2c>
	if (is_preempt(_current) || is_metairq(th)) {
   1035e:	89da      	ldrh	r2, [r3, #14]
   10360:	2a7f      	cmp	r2, #127	; 0x7f
   10362:	d901      	bls.n	10368 <update_cache+0x2c>
		_kernel.ready_q.cache = _current;
   10364:	6263      	str	r3, [r4, #36]	; 0x24
}
   10366:	bd38      	pop	{r3, r4, r5, pc}
		if (th != _current) {
   10368:	429d      	cmp	r5, r3
   1036a:	d001      	beq.n	10370 <update_cache+0x34>
			z_reset_time_slice();
   1036c:	f7ff ff7a 	bl	10264 <z_reset_time_slice>
		_kernel.ready_q.cache = th;
   10370:	6265      	str	r5, [r4, #36]	; 0x24
}
   10372:	e7f8      	b.n	10366 <update_cache+0x2a>
   10374:	200242ec 	.word	0x200242ec

00010378 <k_sched_unlock>:
{
   10378:	b510      	push	{r4, lr}
	__asm__ volatile(
   1037a:	f04f 0320 	mov.w	r3, #32
   1037e:	f3ef 8411 	mrs	r4, BASEPRI
   10382:	f383 8811 	msr	BASEPRI, r3
   10386:	f3bf 8f6f 	isb	sy
		++_current->base.sched_locked;
   1038a:	4b08      	ldr	r3, [pc, #32]	; (103ac <k_sched_unlock+0x34>)
		update_cache(0);
   1038c:	2000      	movs	r0, #0
		++_current->base.sched_locked;
   1038e:	689a      	ldr	r2, [r3, #8]
   10390:	7bd3      	ldrb	r3, [r2, #15]
   10392:	3301      	adds	r3, #1
   10394:	73d3      	strb	r3, [r2, #15]
		update_cache(0);
   10396:	f7ff ffd1 	bl	1033c <update_cache>
	__asm__ volatile(
   1039a:	f384 8811 	msr	BASEPRI, r4
   1039e:	f3bf 8f6f 	isb	sy
}
   103a2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule_unlocked();
   103a6:	f001 be32 	b.w	1200e <z_reschedule_unlocked>
   103aa:	bf00      	nop
   103ac:	200242ec 	.word	0x200242ec

000103b0 <z_add_thread_to_ready_q>:
{
   103b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	__asm__ volatile(
   103b2:	f04f 0320 	mov.w	r3, #32
   103b6:	f3ef 8411 	mrs	r4, BASEPRI
   103ba:	f383 8811 	msr	BASEPRI, r3
   103be:	f3bf 8f6f 	isb	sy
	return list->head == list;
   103c2:	4a16      	ldr	r2, [pc, #88]	; (1041c <z_add_thread_to_ready_q+0x6c>)
   103c4:	4611      	mov	r1, r2
   103c6:	f851 3f28 	ldr.w	r3, [r1, #40]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   103ca:	428b      	cmp	r3, r1
   103cc:	d00c      	beq.n	103e8 <z_add_thread_to_ready_q+0x38>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   103ce:	b15b      	cbz	r3, 103e8 <z_add_thread_to_ready_q+0x38>
   103d0:	6ad6      	ldr	r6, [r2, #44]	; 0x2c
	if (t1->base.prio < t2->base.prio) {
   103d2:	f990 500e 	ldrsb.w	r5, [r0, #14]
   103d6:	f993 700e 	ldrsb.w	r7, [r3, #14]
   103da:	42af      	cmp	r7, r5
   103dc:	dc0b      	bgt.n	103f6 <z_add_thread_to_ready_q+0x46>
	return (node == list->tail) ? NULL : node->next;
   103de:	42b3      	cmp	r3, r6
   103e0:	d002      	beq.n	103e8 <z_add_thread_to_ready_q+0x38>
   103e2:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   103e4:	2b00      	cmp	r3, #0
   103e6:	d1f6      	bne.n	103d6 <z_add_thread_to_ready_q+0x26>
	node->prev = list->tail;
   103e8:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
	node->next = list;
   103ea:	6001      	str	r1, [r0, #0]
	node->prev = list->tail;
   103ec:	6043      	str	r3, [r0, #4]
	list->tail->next = node;
   103ee:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
   103f0:	6018      	str	r0, [r3, #0]
	list->tail = node;
   103f2:	62d0      	str	r0, [r2, #44]	; 0x2c
   103f4:	e005      	b.n	10402 <z_add_thread_to_ready_q+0x52>
	node->prev = successor->prev;
   103f6:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   103f8:	e9c0 3200 	strd	r3, r2, [r0]
	successor->prev->next = node;
   103fc:	685a      	ldr	r2, [r3, #4]
   103fe:	6010      	str	r0, [r2, #0]
	successor->prev = node;
   10400:	6058      	str	r0, [r3, #4]
	thread->base.thread_state |= states;
   10402:	7b43      	ldrb	r3, [r0, #13]
   10404:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   10408:	7343      	strb	r3, [r0, #13]
		update_cache(0);
   1040a:	2000      	movs	r0, #0
   1040c:	f7ff ff96 	bl	1033c <update_cache>
	__asm__ volatile(
   10410:	f384 8811 	msr	BASEPRI, r4
   10414:	f3bf 8f6f 	isb	sy
}
   10418:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1041a:	bf00      	nop
   1041c:	200242ec 	.word	0x200242ec

00010420 <z_move_thread_to_end_of_prio_q>:
{
   10420:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   10422:	4604      	mov	r4, r0
	__asm__ volatile(
   10424:	f04f 0320 	mov.w	r3, #32
   10428:	f3ef 8511 	mrs	r5, BASEPRI
   1042c:	f383 8811 	msr	BASEPRI, r3
   10430:	f3bf 8f6f 	isb	sy
		if (z_is_thread_queued(thread)) {
   10434:	7b43      	ldrb	r3, [r0, #13]
   10436:	065a      	lsls	r2, r3, #25
   10438:	d503      	bpl.n	10442 <z_move_thread_to_end_of_prio_q+0x22>
			_priq_run_remove(&_kernel.ready_q.runq, thread);
   1043a:	4601      	mov	r1, r0
   1043c:	4818      	ldr	r0, [pc, #96]	; (104a0 <z_move_thread_to_end_of_prio_q+0x80>)
   1043e:	f7ff ff67 	bl	10310 <z_priq_dumb_remove>
	return list->head == list;
   10442:	4a18      	ldr	r2, [pc, #96]	; (104a4 <z_move_thread_to_end_of_prio_q+0x84>)
	return sys_dlist_is_empty(list) ? NULL : list->head;
   10444:	f102 0128 	add.w	r1, r2, #40	; 0x28
   10448:	e9d2 300a 	ldrd	r3, r0, [r2, #40]	; 0x28
   1044c:	428b      	cmp	r3, r1
   1044e:	d00b      	beq.n	10468 <z_move_thread_to_end_of_prio_q+0x48>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   10450:	b153      	cbz	r3, 10468 <z_move_thread_to_end_of_prio_q+0x48>
	if (t1->base.prio < t2->base.prio) {
   10452:	f994 600e 	ldrsb.w	r6, [r4, #14]
   10456:	f993 700e 	ldrsb.w	r7, [r3, #14]
   1045a:	42b7      	cmp	r7, r6
   1045c:	dc0a      	bgt.n	10474 <z_move_thread_to_end_of_prio_q+0x54>
	return (node == list->tail) ? NULL : node->next;
   1045e:	4283      	cmp	r3, r0
   10460:	d002      	beq.n	10468 <z_move_thread_to_end_of_prio_q+0x48>
   10462:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   10464:	2b00      	cmp	r3, #0
   10466:	d1f6      	bne.n	10456 <z_move_thread_to_end_of_prio_q+0x36>
	node->prev = list->tail;
   10468:	e9c4 1000 	strd	r1, r0, [r4]
	list->tail->next = node;
   1046c:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
   1046e:	601c      	str	r4, [r3, #0]
	list->tail = node;
   10470:	62d4      	str	r4, [r2, #44]	; 0x2c
   10472:	e005      	b.n	10480 <z_move_thread_to_end_of_prio_q+0x60>
	node->prev = successor->prev;
   10474:	6859      	ldr	r1, [r3, #4]
	node->next = successor;
   10476:	e9c4 3100 	strd	r3, r1, [r4]
	successor->prev->next = node;
   1047a:	6859      	ldr	r1, [r3, #4]
   1047c:	600c      	str	r4, [r1, #0]
	successor->prev = node;
   1047e:	605c      	str	r4, [r3, #4]
   10480:	7b63      	ldrb	r3, [r4, #13]
		update_cache(thread == _current);
   10482:	6890      	ldr	r0, [r2, #8]
   10484:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   10488:	7363      	strb	r3, [r4, #13]
   1048a:	1b03      	subs	r3, r0, r4
   1048c:	4258      	negs	r0, r3
   1048e:	4158      	adcs	r0, r3
   10490:	f7ff ff54 	bl	1033c <update_cache>
	__asm__ volatile(
   10494:	f385 8811 	msr	BASEPRI, r5
   10498:	f3bf 8f6f 	isb	sy
}
   1049c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1049e:	bf00      	nop
   104a0:	20024314 	.word	0x20024314
   104a4:	200242ec 	.word	0x200242ec

000104a8 <z_time_slice>:
	if (pending_current == _current) {
   104a8:	4a15      	ldr	r2, [pc, #84]	; (10500 <z_time_slice+0x58>)
   104aa:	4916      	ldr	r1, [pc, #88]	; (10504 <z_time_slice+0x5c>)
{
   104ac:	b538      	push	{r3, r4, r5, lr}
	if (pending_current == _current) {
   104ae:	680c      	ldr	r4, [r1, #0]
   104b0:	6893      	ldr	r3, [r2, #8]
   104b2:	42a3      	cmp	r3, r4
   104b4:	4614      	mov	r4, r2
   104b6:	d103      	bne.n	104c0 <z_time_slice+0x18>
}
   104b8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
			z_reset_time_slice();
   104bc:	f7ff bed2 	b.w	10264 <z_reset_time_slice>
	pending_current = NULL;
   104c0:	2500      	movs	r5, #0
   104c2:	600d      	str	r5, [r1, #0]
	if (slice_time && sliceable(_current)) {
   104c4:	4910      	ldr	r1, [pc, #64]	; (10508 <z_time_slice+0x60>)
   104c6:	6809      	ldr	r1, [r1, #0]
   104c8:	b1b9      	cbz	r1, 104fa <z_time_slice+0x52>
		&& !z_is_thread_timeout_active(t);
   104ca:	89d9      	ldrh	r1, [r3, #14]
   104cc:	297f      	cmp	r1, #127	; 0x7f
   104ce:	d814      	bhi.n	104fa <z_time_slice+0x52>
		&& !z_is_prio_higher(t->base.prio, slice_max_prio)
   104d0:	490e      	ldr	r1, [pc, #56]	; (1050c <z_time_slice+0x64>)
   104d2:	f993 500e 	ldrsb.w	r5, [r3, #14]
   104d6:	6809      	ldr	r1, [r1, #0]
   104d8:	428d      	cmp	r5, r1
   104da:	db0e      	blt.n	104fa <z_time_slice+0x52>
		&& !z_is_idle_thread_object(t)
   104dc:	490c      	ldr	r1, [pc, #48]	; (10510 <z_time_slice+0x68>)
   104de:	428b      	cmp	r3, r1
   104e0:	d00b      	beq.n	104fa <z_time_slice+0x52>
		&& !z_is_thread_timeout_active(t);
   104e2:	6999      	ldr	r1, [r3, #24]
   104e4:	b949      	cbnz	r1, 104fa <z_time_slice+0x52>
		if (ticks >= _current_cpu->slice_ticks) {
   104e6:	6911      	ldr	r1, [r2, #16]
   104e8:	4281      	cmp	r1, r0
   104ea:	dc03      	bgt.n	104f4 <z_time_slice+0x4c>
			z_move_thread_to_end_of_prio_q(_current);
   104ec:	4618      	mov	r0, r3
   104ee:	f7ff ff97 	bl	10420 <z_move_thread_to_end_of_prio_q>
   104f2:	e7e1      	b.n	104b8 <z_time_slice+0x10>
			_current_cpu->slice_ticks -= ticks;
   104f4:	1a09      	subs	r1, r1, r0
   104f6:	6111      	str	r1, [r2, #16]
}
   104f8:	bd38      	pop	{r3, r4, r5, pc}
		_current_cpu->slice_ticks = 0;
   104fa:	2300      	movs	r3, #0
   104fc:	6123      	str	r3, [r4, #16]
   104fe:	e7fb      	b.n	104f8 <z_time_slice+0x50>
   10500:	200242ec 	.word	0x200242ec
   10504:	2002431c 	.word	0x2002431c
   10508:	20024324 	.word	0x20024324
   1050c:	20024320 	.word	0x20024320
   10510:	200201b0 	.word	0x200201b0

00010514 <z_remove_thread_from_ready_q>:
{
   10514:	b538      	push	{r3, r4, r5, lr}
   10516:	4604      	mov	r4, r0
	__asm__ volatile(
   10518:	f04f 0320 	mov.w	r3, #32
   1051c:	f3ef 8511 	mrs	r5, BASEPRI
   10520:	f383 8811 	msr	BASEPRI, r3
   10524:	f3bf 8f6f 	isb	sy
		if (z_is_thread_queued(thread)) {
   10528:	7b43      	ldrb	r3, [r0, #13]
   1052a:	065a      	lsls	r2, r3, #25
   1052c:	d507      	bpl.n	1053e <z_remove_thread_from_ready_q+0x2a>
			_priq_run_remove(&_kernel.ready_q.runq, thread);
   1052e:	4601      	mov	r1, r0
   10530:	4809      	ldr	r0, [pc, #36]	; (10558 <z_remove_thread_from_ready_q+0x44>)
   10532:	f7ff feed 	bl	10310 <z_priq_dumb_remove>
	thread->base.thread_state &= ~states;
   10536:	7b63      	ldrb	r3, [r4, #13]
   10538:	f023 0340 	bic.w	r3, r3, #64	; 0x40
   1053c:	7363      	strb	r3, [r4, #13]
		update_cache(thread == _current);
   1053e:	4b07      	ldr	r3, [pc, #28]	; (1055c <z_remove_thread_from_ready_q+0x48>)
   10540:	6898      	ldr	r0, [r3, #8]
   10542:	1b03      	subs	r3, r0, r4
   10544:	4258      	negs	r0, r3
   10546:	4158      	adcs	r0, r3
   10548:	f7ff fef8 	bl	1033c <update_cache>
	__asm__ volatile(
   1054c:	f385 8811 	msr	BASEPRI, r5
   10550:	f3bf 8f6f 	isb	sy
}
   10554:	bd38      	pop	{r3, r4, r5, pc}
   10556:	bf00      	nop
   10558:	20024314 	.word	0x20024314
   1055c:	200242ec 	.word	0x200242ec

00010560 <pend>:
{
   10560:	b570      	push	{r4, r5, r6, lr}
   10562:	4604      	mov	r4, r0
   10564:	460d      	mov	r5, r1
   10566:	4616      	mov	r6, r2
	z_remove_thread_from_ready_q(thread);
   10568:	f7ff ffd4 	bl	10514 <z_remove_thread_from_ready_q>
	thread->base.thread_state |= _THREAD_PENDING;
   1056c:	7b63      	ldrb	r3, [r4, #13]
   1056e:	f043 0302 	orr.w	r3, r3, #2
   10572:	7363      	strb	r3, [r4, #13]
	if (wait_q != NULL) {
   10574:	b1ed      	cbz	r5, 105b2 <pend+0x52>
	return list->head == list;
   10576:	682b      	ldr	r3, [r5, #0]
		thread->base.pended_on = wait_q;
   10578:	60a5      	str	r5, [r4, #8]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1057a:	429d      	cmp	r5, r3
   1057c:	d00c      	beq.n	10598 <pend+0x38>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   1057e:	b15b      	cbz	r3, 10598 <pend+0x38>
	if (t1->base.prio < t2->base.prio) {
   10580:	f994 200e 	ldrsb.w	r2, [r4, #14]
   10584:	f993 100e 	ldrsb.w	r1, [r3, #14]
   10588:	4291      	cmp	r1, r2
   1058a:	dc0c      	bgt.n	105a6 <pend+0x46>
	return (node == list->tail) ? NULL : node->next;
   1058c:	6869      	ldr	r1, [r5, #4]
   1058e:	428b      	cmp	r3, r1
   10590:	d002      	beq.n	10598 <pend+0x38>
   10592:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   10594:	2b00      	cmp	r3, #0
   10596:	d1f5      	bne.n	10584 <pend+0x24>
	node->prev = list->tail;
   10598:	686b      	ldr	r3, [r5, #4]
	node->next = list;
   1059a:	6025      	str	r5, [r4, #0]
	node->prev = list->tail;
   1059c:	6063      	str	r3, [r4, #4]
	list->tail->next = node;
   1059e:	686b      	ldr	r3, [r5, #4]
   105a0:	601c      	str	r4, [r3, #0]
	list->tail = node;
   105a2:	606c      	str	r4, [r5, #4]
   105a4:	e005      	b.n	105b2 <pend+0x52>
	node->prev = successor->prev;
   105a6:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   105a8:	e9c4 3200 	strd	r3, r2, [r4]
	successor->prev->next = node;
   105ac:	685a      	ldr	r2, [r3, #4]
   105ae:	6014      	str	r4, [r2, #0]
	successor->prev = node;
   105b0:	605c      	str	r4, [r3, #4]
	if (timeout != K_FOREVER) {
   105b2:	1c73      	adds	r3, r6, #1
   105b4:	d013      	beq.n	105de <pend+0x7e>
   105b6:	f44f 4500 	mov.w	r5, #32768	; 0x8000
   105ba:	f240 30e7 	movw	r0, #999	; 0x3e7
   105be:	2100      	movs	r1, #0
   105c0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   105c4:	fbc5 0106 	smlal	r0, r1, r5, r6
   105c8:	2300      	movs	r3, #0
   105ca:	f7fb fe29 	bl	c220 <__aeabi_ldivmod>

extern void z_thread_timeout(struct _timeout *to);

static inline void z_add_thread_timeout(struct k_thread *th, s32_t ticks)
{
	z_add_timeout(&th->base.timeout, z_thread_timeout, ticks);
   105ce:	4904      	ldr	r1, [pc, #16]	; (105e0 <pend+0x80>)
   105d0:	1c42      	adds	r2, r0, #1
   105d2:	f104 0018 	add.w	r0, r4, #24
}
   105d6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   105da:	f000 ba17 	b.w	10a0c <z_add_timeout>
   105de:	bd70      	pop	{r4, r5, r6, pc}
   105e0:	0001202f 	.word	0x0001202f

000105e4 <z_pend_curr_irqlock>:
{
   105e4:	b570      	push	{r4, r5, r6, lr}
   105e6:	4606      	mov	r6, r0
	pend(_current, wait_q, timeout);
   105e8:	4d0e      	ldr	r5, [pc, #56]	; (10624 <z_pend_curr_irqlock+0x40>)
	pending_current = _current;
   105ea:	4c0f      	ldr	r4, [pc, #60]	; (10628 <z_pend_curr_irqlock+0x44>)
	pend(_current, wait_q, timeout);
   105ec:	68a8      	ldr	r0, [r5, #8]
   105ee:	f7ff ffb7 	bl	10560 <pend>
	pending_current = _current;
   105f2:	68ab      	ldr	r3, [r5, #8]
   105f4:	4630      	mov	r0, r6
   105f6:	6023      	str	r3, [r4, #0]
   105f8:	f7fd fa5a 	bl	dab0 <z_arch_swap>
	__asm__ volatile(
   105fc:	f04f 0220 	mov.w	r2, #32
   10600:	f3ef 8311 	mrs	r3, BASEPRI
   10604:	f382 8811 	msr	BASEPRI, r2
   10608:	f3bf 8f6f 	isb	sy
		if (pending_current == _current) {
   1060c:	6822      	ldr	r2, [r4, #0]
   1060e:	68a9      	ldr	r1, [r5, #8]
   10610:	4291      	cmp	r1, r2
			pending_current = NULL;
   10612:	bf04      	itt	eq
   10614:	2200      	moveq	r2, #0
   10616:	6022      	streq	r2, [r4, #0]
	__asm__ volatile(
   10618:	f383 8811 	msr	BASEPRI, r3
   1061c:	f3bf 8f6f 	isb	sy
}
   10620:	bd70      	pop	{r4, r5, r6, pc}
   10622:	bf00      	nop
   10624:	200242ec 	.word	0x200242ec
   10628:	2002431c 	.word	0x2002431c

0001062c <z_pend_curr>:
{
   1062c:	b510      	push	{r4, lr}
   1062e:	460c      	mov	r4, r1
   10630:	4611      	mov	r1, r2
	pending_current = _current;
   10632:	4a06      	ldr	r2, [pc, #24]	; (1064c <z_pend_curr+0x20>)
   10634:	6890      	ldr	r0, [r2, #8]
   10636:	4a06      	ldr	r2, [pc, #24]	; (10650 <z_pend_curr+0x24>)
   10638:	6010      	str	r0, [r2, #0]
	pend(_current, wait_q, timeout);
   1063a:	461a      	mov	r2, r3
   1063c:	f7ff ff90 	bl	10560 <pend>
   10640:	4620      	mov	r0, r4
}
   10642:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   10646:	f7fd ba33 	b.w	dab0 <z_arch_swap>
   1064a:	bf00      	nop
   1064c:	200242ec 	.word	0x200242ec
   10650:	2002431c 	.word	0x2002431c

00010654 <z_tick_sleep.part.19>:
	z_impl_k_yield();
}
#include <syscalls/k_yield_mrsh.c>
#endif

static s32_t z_tick_sleep(s32_t ticks)
   10654:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (ticks == 0) {
		k_yield();
		return 0;
	}

	ticks += _TICK_ALIGN;
   10656:	1c46      	adds	r6, r0, #1
	expected_wakeup_time = ticks + z_tick_get_32();
   10658:	f001 fddd 	bl	12216 <z_tick_get_32>
   1065c:	1834      	adds	r4, r6, r0
	__asm__ volatile(
   1065e:	f04f 0320 	mov.w	r3, #32
   10662:	f3ef 8711 	mrs	r7, BASEPRI
   10666:	f383 8811 	msr	BASEPRI, r3
   1066a:	f3bf 8f6f 	isb	sy
	 */
	struct k_spinlock local_lock = {};
	k_spinlock_key_t key = k_spin_lock(&local_lock);

#if defined(CONFIG_TIMESLICING) && defined(CONFIG_SWAP_NONATOMIC)
	pending_current = _current;
   1066e:	4d0d      	ldr	r5, [pc, #52]	; (106a4 <z_tick_sleep.part.19+0x50>)
   10670:	4b0d      	ldr	r3, [pc, #52]	; (106a8 <z_tick_sleep.part.19+0x54>)
   10672:	68a8      	ldr	r0, [r5, #8]
   10674:	6018      	str	r0, [r3, #0]
#endif
	z_remove_thread_from_ready_q(_current);
   10676:	f7ff ff4d 	bl	10514 <z_remove_thread_from_ready_q>
   1067a:	68a8      	ldr	r0, [r5, #8]
   1067c:	490b      	ldr	r1, [pc, #44]	; (106ac <z_tick_sleep.part.19+0x58>)
   1067e:	4632      	mov	r2, r6
   10680:	3018      	adds	r0, #24
   10682:	f000 f9c3 	bl	10a0c <z_add_timeout>
	z_add_thread_timeout(_current, ticks);
	z_mark_thread_as_suspended(_current);
   10686:	68aa      	ldr	r2, [r5, #8]
   10688:	4638      	mov	r0, r7
	thread->base.thread_state |= _THREAD_SUSPENDED;
   1068a:	7b53      	ldrb	r3, [r2, #13]
   1068c:	f043 0310 	orr.w	r3, r3, #16
   10690:	7353      	strb	r3, [r2, #13]
   10692:	f7fd fa0d 	bl	dab0 <z_arch_swap>

	(void)z_swap(&local_lock, key);

	__ASSERT(!z_is_thread_state_set(_current, _THREAD_SUSPENDED), "");

	ticks = expected_wakeup_time - z_tick_get_32();
   10696:	f001 fdbe 	bl	12216 <z_tick_get_32>
   1069a:	1a20      	subs	r0, r4, r0
		return ticks;
	}
#endif

	return 0;
}
   1069c:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   106a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   106a2:	bf00      	nop
   106a4:	200242ec 	.word	0x200242ec
   106a8:	2002431c 	.word	0x2002431c
   106ac:	0001202f 	.word	0x0001202f

000106b0 <z_sched_init>:
	k_sched_time_slice_set(CONFIG_TIMESLICE_SIZE,
   106b0:	2100      	movs	r1, #0
	list->head = (sys_dnode_t *)list;
   106b2:	4b04      	ldr	r3, [pc, #16]	; (106c4 <z_sched_init+0x14>)
   106b4:	4608      	mov	r0, r1
   106b6:	f103 0228 	add.w	r2, r3, #40	; 0x28
	list->tail = (sys_dnode_t *)list;
   106ba:	e9c3 220a 	strd	r2, r2, [r3, #40]	; 0x28
   106be:	f7ff bde7 	b.w	10290 <k_sched_time_slice_set>
   106c2:	bf00      	nop
   106c4:	200242ec 	.word	0x200242ec

000106c8 <z_impl_k_yield>:
{
   106c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (!z_is_idle_thread_object(_current)) {
   106ca:	4c24      	ldr	r4, [pc, #144]	; (1075c <z_impl_k_yield+0x94>)
   106cc:	4b24      	ldr	r3, [pc, #144]	; (10760 <z_impl_k_yield+0x98>)
   106ce:	68a2      	ldr	r2, [r4, #8]
   106d0:	429a      	cmp	r2, r3
   106d2:	d036      	beq.n	10742 <z_impl_k_yield+0x7a>
   106d4:	f04f 0320 	mov.w	r3, #32
   106d8:	f3ef 8611 	mrs	r6, BASEPRI
   106dc:	f383 8811 	msr	BASEPRI, r3
   106e0:	f3bf 8f6f 	isb	sy
				_priq_run_remove(&_kernel.ready_q.runq,
   106e4:	f104 0528 	add.w	r5, r4, #40	; 0x28
   106e8:	68a1      	ldr	r1, [r4, #8]
   106ea:	4628      	mov	r0, r5
   106ec:	f7ff fe10 	bl	10310 <z_priq_dumb_remove>
	return list->head == list;
   106f0:	6aa2      	ldr	r2, [r4, #40]	; 0x28
			_priq_run_add(&_kernel.ready_q.runq, _current);
   106f2:	68a3      	ldr	r3, [r4, #8]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   106f4:	42aa      	cmp	r2, r5
   106f6:	d00c      	beq.n	10712 <z_impl_k_yield+0x4a>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   106f8:	b15a      	cbz	r2, 10712 <z_impl_k_yield+0x4a>
   106fa:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
	if (t1->base.prio < t2->base.prio) {
   106fc:	f993 100e 	ldrsb.w	r1, [r3, #14]
   10700:	f992 700e 	ldrsb.w	r7, [r2, #14]
   10704:	428f      	cmp	r7, r1
   10706:	dc0b      	bgt.n	10720 <z_impl_k_yield+0x58>
	return (node == list->tail) ? NULL : node->next;
   10708:	4282      	cmp	r2, r0
   1070a:	d002      	beq.n	10712 <z_impl_k_yield+0x4a>
   1070c:	6812      	ldr	r2, [r2, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   1070e:	2a00      	cmp	r2, #0
   10710:	d1f6      	bne.n	10700 <z_impl_k_yield+0x38>
	node->prev = list->tail;
   10712:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
	node->next = list;
   10714:	601d      	str	r5, [r3, #0]
	node->prev = list->tail;
   10716:	605a      	str	r2, [r3, #4]
	list->tail->next = node;
   10718:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
   1071a:	6013      	str	r3, [r2, #0]
	list->tail = node;
   1071c:	62e3      	str	r3, [r4, #44]	; 0x2c
   1071e:	e005      	b.n	1072c <z_impl_k_yield+0x64>
	node->prev = successor->prev;
   10720:	6851      	ldr	r1, [r2, #4]
	node->next = successor;
   10722:	e9c3 2100 	strd	r2, r1, [r3]
	successor->prev->next = node;
   10726:	6851      	ldr	r1, [r2, #4]
   10728:	600b      	str	r3, [r1, #0]
	successor->prev = node;
   1072a:	6053      	str	r3, [r2, #4]
	thread->base.thread_state |= states;
   1072c:	7b5a      	ldrb	r2, [r3, #13]
			update_cache(1);
   1072e:	2001      	movs	r0, #1
   10730:	f042 0240 	orr.w	r2, r2, #64	; 0x40
   10734:	735a      	strb	r2, [r3, #13]
   10736:	f7ff fe01 	bl	1033c <update_cache>
	__asm__ volatile(
   1073a:	f386 8811 	msr	BASEPRI, r6
   1073e:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
   10742:	f04f 0320 	mov.w	r3, #32
   10746:	f3ef 8011 	mrs	r0, BASEPRI
   1074a:	f383 8811 	msr	BASEPRI, r3
   1074e:	f3bf 8f6f 	isb	sy
}
   10752:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   10756:	f7fd b9ab 	b.w	dab0 <z_arch_swap>
   1075a:	bf00      	nop
   1075c:	200242ec 	.word	0x200242ec
   10760:	200201b0 	.word	0x200201b0

00010764 <z_impl_k_current_get>:
#endif

k_tid_t z_impl_k_current_get(void)
{
	return _current;
}
   10764:	4b01      	ldr	r3, [pc, #4]	; (1076c <z_impl_k_current_get+0x8>)
   10766:	6898      	ldr	r0, [r3, #8]
   10768:	4770      	bx	lr
   1076a:	bf00      	nop
   1076c:	200242ec 	.word	0x200242ec

00010770 <z_impl_k_sem_give>:
		handle_poll_events(sem);
	}
}

void z_impl_k_sem_give(struct k_sem *sem)
{
   10770:	b570      	push	{r4, r5, r6, lr}
   10772:	4604      	mov	r4, r0
   10774:	f04f 0320 	mov.w	r3, #32
   10778:	f3ef 8611 	mrs	r6, BASEPRI
   1077c:	f383 8811 	msr	BASEPRI, r3
   10780:	f3bf 8f6f 	isb	sy
	struct k_thread *thread = z_unpend_first_thread(&sem->wait_q);
   10784:	f001 fc84 	bl	12090 <z_unpend_first_thread>
	if (thread != NULL) {
   10788:	4605      	mov	r5, r0
   1078a:	b170      	cbz	r0, 107aa <z_impl_k_sem_give+0x3a>
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
   1078c:	7b43      	ldrb	r3, [r0, #13]
   1078e:	06db      	lsls	r3, r3, #27
   10790:	d103      	bne.n	1079a <z_impl_k_sem_give+0x2a>
	if (z_is_thread_ready(thread)) {
   10792:	6983      	ldr	r3, [r0, #24]
   10794:	b90b      	cbnz	r3, 1079a <z_impl_k_sem_give+0x2a>
		z_add_thread_to_ready_q(thread);
   10796:	f7ff fe0b 	bl	103b0 <z_add_thread_to_ready_q>
   1079a:	2300      	movs	r3, #0
   1079c:	66ab      	str	r3, [r5, #104]	; 0x68
	k_spinlock_key_t key = k_spin_lock(&lock);

	sys_trace_void(SYS_TRACE_ID_SEMA_GIVE);
	do_sem_give(sem);
	sys_trace_end_call(SYS_TRACE_ID_SEMA_GIVE);
	z_reschedule(&lock, key);
   1079e:	4631      	mov	r1, r6
}
   107a0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	z_reschedule(&lock, key);
   107a4:	4804      	ldr	r0, [pc, #16]	; (107b8 <z_impl_k_sem_give+0x48>)
   107a6:	f001 bc13 	b.w	11fd0 <z_reschedule>
	sem->count += (sem->count != sem->limit) ? 1U : 0U;
   107aa:	e9d4 3202 	ldrd	r3, r2, [r4, #8]
   107ae:	429a      	cmp	r2, r3
   107b0:	bf18      	it	ne
   107b2:	3301      	addne	r3, #1
   107b4:	60a3      	str	r3, [r4, #8]
   107b6:	e7f2      	b.n	1079e <z_impl_k_sem_give+0x2e>
   107b8:	20024331 	.word	0x20024331

000107bc <z_impl_k_sem_take>:
}
#include <syscalls/k_sem_give_mrsh.c>
#endif

int z_impl_k_sem_take(struct k_sem *sem, s32_t timeout)
{
   107bc:	b410      	push	{r4}
   107be:	4602      	mov	r2, r0
   107c0:	460b      	mov	r3, r1
   107c2:	f04f 0020 	mov.w	r0, #32
   107c6:	f3ef 8111 	mrs	r1, BASEPRI
   107ca:	f380 8811 	msr	BASEPRI, r0
   107ce:	f3bf 8f6f 	isb	sy
	__ASSERT(((z_arch_is_in_isr() == false) || (timeout == K_NO_WAIT)), "");

	sys_trace_void(SYS_TRACE_ID_SEMA_TAKE);
	k_spinlock_key_t key = k_spin_lock(&lock);

	if (likely(sem->count > 0U)) {
   107d2:	6894      	ldr	r4, [r2, #8]
   107d4:	b144      	cbz	r4, 107e8 <z_impl_k_sem_take+0x2c>
		sem->count--;
   107d6:	3c01      	subs	r4, #1
   107d8:	6094      	str	r4, [r2, #8]
	__asm__ volatile(
   107da:	f381 8811 	msr	BASEPRI, r1
   107de:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		sys_trace_end_call(SYS_TRACE_ID_SEMA_TAKE);
		return 0;
   107e2:	2000      	movs	r0, #0

	sys_trace_end_call(SYS_TRACE_ID_SEMA_TAKE);

	int ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);
	return ret;
}
   107e4:	bc10      	pop	{r4}
   107e6:	4770      	bx	lr
	if (timeout == K_NO_WAIT) {
   107e8:	b933      	cbnz	r3, 107f8 <z_impl_k_sem_take+0x3c>
   107ea:	f381 8811 	msr	BASEPRI, r1
   107ee:	f3bf 8f6f 	isb	sy
		return -EBUSY;
   107f2:	f06f 000f 	mvn.w	r0, #15
   107f6:	e7f5      	b.n	107e4 <z_impl_k_sem_take+0x28>
	int ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);
   107f8:	4801      	ldr	r0, [pc, #4]	; (10800 <z_impl_k_sem_take+0x44>)
}
   107fa:	bc10      	pop	{r4}
	int ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);
   107fc:	f7ff bf16 	b.w	1062c <z_pend_curr>
   10800:	20024331 	.word	0x20024331

00010804 <z_impl_k_thread_start>:
}
#endif

#ifdef CONFIG_MULTITHREADING
void z_impl_k_thread_start(struct k_thread *thread)
{
   10804:	b510      	push	{r4, lr}
   10806:	4602      	mov	r2, r0
	__asm__ volatile(
   10808:	f04f 0320 	mov.w	r3, #32
   1080c:	f3ef 8411 	mrs	r4, BASEPRI
   10810:	f383 8811 	msr	BASEPRI, r3
   10814:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock); /* protect kernel queues */

	if (z_has_thread_started(thread)) {
   10818:	7b43      	ldrb	r3, [r0, #13]
   1081a:	0759      	lsls	r1, r3, #29
   1081c:	d404      	bmi.n	10828 <z_impl_k_thread_start+0x24>
	__asm__ volatile(
   1081e:	f384 8811 	msr	BASEPRI, r4
   10822:	f3bf 8f6f 	isb	sy
	}

	z_mark_thread_as_started(thread);
	z_ready_thread(thread);
	z_reschedule(&lock, key);
}
   10826:	bd10      	pop	{r4, pc}
	thread->base.thread_state &= ~_THREAD_PRESTART;
   10828:	f023 0304 	bic.w	r3, r3, #4
   1082c:	7343      	strb	r3, [r0, #13]
	if (z_is_thread_ready(thread)) {
   1082e:	f001 fc7b 	bl	12128 <z_is_thread_ready>
   10832:	b110      	cbz	r0, 1083a <z_impl_k_thread_start+0x36>
		z_add_thread_to_ready_q(thread);
   10834:	4610      	mov	r0, r2
   10836:	f7ff fdbb 	bl	103b0 <z_add_thread_to_ready_q>
	z_reschedule(&lock, key);
   1083a:	4621      	mov	r1, r4
}
   1083c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule(&lock, key);
   10840:	4801      	ldr	r0, [pc, #4]	; (10848 <z_impl_k_thread_start+0x44>)
   10842:	f001 bbc5 	b.w	11fd0 <z_reschedule>
   10846:	bf00      	nop
   10848:	20024331 	.word	0x20024331

0001084c <z_setup_new_thread>:
void z_setup_new_thread(struct k_thread *new_thread,
		       k_thread_stack_t *stack, size_t stack_size,
		       k_thread_entry_t entry,
		       void *p1, void *p2, void *p3,
		       int prio, u32_t options, const char *name)
{
   1084c:	b530      	push	{r4, r5, lr}
   1084e:	b087      	sub	sp, #28
	stack_size = STACK_ROUND_DOWN(stack_size
			- sizeof(*new_thread->userspace_local_data));
#endif
#endif

	z_arch_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   10850:	9d0e      	ldr	r5, [sp, #56]	; 0x38
{
   10852:	4604      	mov	r4, r0
	z_arch_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   10854:	9504      	str	r5, [sp, #16]
   10856:	9d0d      	ldr	r5, [sp, #52]	; 0x34
   10858:	9503      	str	r5, [sp, #12]
   1085a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
   1085c:	9502      	str	r5, [sp, #8]
   1085e:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
   10860:	9501      	str	r5, [sp, #4]
   10862:	9d0a      	ldr	r5, [sp, #40]	; 0x28
   10864:	9500      	str	r5, [sp, #0]
   10866:	f7fd f965 	bl	db34 <z_arch_new_thread>
#ifdef CONFIG_SCHED_CPU_MASK
	new_thread->base.cpu_mask = -1;
#endif
#ifdef CONFIG_ARCH_HAS_CUSTOM_SWAP_TO_MAIN
	/* _current may be null if the dummy thread is not used */
	if (!_current) {
   1086a:	4b04      	ldr	r3, [pc, #16]	; (1087c <z_setup_new_thread+0x30>)
   1086c:	689b      	ldr	r3, [r3, #8]
   1086e:	b913      	cbnz	r3, 10876 <z_setup_new_thread+0x2a>
	}
#endif
#ifdef CONFIG_SCHED_DEADLINE
	new_thread->base.prio_deadline = 0;
#endif
	new_thread->resource_pool = _current->resource_pool;
   10870:	6623      	str	r3, [r4, #96]	; 0x60
	sys_trace_thread_create(new_thread);
}
   10872:	b007      	add	sp, #28
   10874:	bd30      	pop	{r4, r5, pc}
	new_thread->resource_pool = _current->resource_pool;
   10876:	6e1b      	ldr	r3, [r3, #96]	; 0x60
   10878:	e7fa      	b.n	10870 <z_setup_new_thread+0x24>
   1087a:	bf00      	nop
   1087c:	200242ec 	.word	0x200242ec

00010880 <z_impl_k_thread_create>:
k_tid_t z_impl_k_thread_create(struct k_thread *new_thread,
			      k_thread_stack_t *stack,
			      size_t stack_size, k_thread_entry_t entry,
			      void *p1, void *p2, void *p3,
			      int prio, u32_t options, s32_t delay)
{
   10880:	b570      	push	{r4, r5, r6, lr}
	__ASSERT((options & K_USER) == 0,
		 "Platform is capable of user mode, and test thread created with K_USER option,"
		 " but neither CONFIG_TEST_USERSPACE nor CONFIG_USERSPACE is set\n");
#endif

	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   10882:	2600      	movs	r6, #0
{
   10884:	b086      	sub	sp, #24
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   10886:	9605      	str	r6, [sp, #20]
   10888:	9e0e      	ldr	r6, [sp, #56]	; 0x38
{
   1088a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   1088c:	9604      	str	r6, [sp, #16]
   1088e:	9e0d      	ldr	r6, [sp, #52]	; 0x34
{
   10890:	4604      	mov	r4, r0
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   10892:	9603      	str	r6, [sp, #12]
   10894:	9e0c      	ldr	r6, [sp, #48]	; 0x30
   10896:	9602      	str	r6, [sp, #8]
   10898:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
   1089a:	9601      	str	r6, [sp, #4]
   1089c:	9e0a      	ldr	r6, [sp, #40]	; 0x28
   1089e:	9600      	str	r6, [sp, #0]
   108a0:	f7ff ffd4 	bl	1084c <z_setup_new_thread>
			  prio, options, NULL);

	if (delay != K_FOREVER) {
   108a4:	1c6b      	adds	r3, r5, #1
   108a6:	d003      	beq.n	108b0 <z_impl_k_thread_create+0x30>
	if (delay == 0) {
   108a8:	b92d      	cbnz	r5, 108b6 <z_impl_k_thread_create+0x36>
	z_impl_k_thread_start(thread);
   108aa:	4620      	mov	r0, r4
   108ac:	f7ff ffaa 	bl	10804 <z_impl_k_thread_start>
		schedule_new_thread(new_thread, delay);
	}

	return new_thread;
}
   108b0:	4620      	mov	r0, r4
   108b2:	b006      	add	sp, #24
   108b4:	bd70      	pop	{r4, r5, r6, pc}
   108b6:	f44f 4600 	mov.w	r6, #32768	; 0x8000
   108ba:	f240 30e7 	movw	r0, #999	; 0x3e7
   108be:	2100      	movs	r1, #0
   108c0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   108c4:	2300      	movs	r3, #0
   108c6:	fbc6 0105 	smlal	r0, r1, r6, r5
   108ca:	f7fb fca9 	bl	c220 <__aeabi_ldivmod>
   108ce:	4903      	ldr	r1, [pc, #12]	; (108dc <z_impl_k_thread_create+0x5c>)
   108d0:	1c42      	adds	r2, r0, #1
   108d2:	f104 0018 	add.w	r0, r4, #24
   108d6:	f000 f899 	bl	10a0c <z_add_timeout>
   108da:	e7e9      	b.n	108b0 <z_impl_k_thread_create+0x30>
   108dc:	0001202f 	.word	0x0001202f

000108e0 <z_init_static_threads>:
	}
}
#endif /* CONFIG_USERSPACE */

void z_init_static_threads(void)
{
   108e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	_FOREACH_STATIC_THREAD(thread_data) {
   108e4:	4e28      	ldr	r6, [pc, #160]	; (10988 <z_init_static_threads+0xa8>)
   108e6:	4d29      	ldr	r5, [pc, #164]	; (1098c <z_init_static_threads+0xac>)
   108e8:	46b0      	mov	r8, r6
{
   108ea:	b087      	sub	sp, #28
	_FOREACH_STATIC_THREAD(thread_data) {
   108ec:	42b5      	cmp	r5, r6
   108ee:	f105 0430 	add.w	r4, r5, #48	; 0x30
   108f2:	d310      	bcc.n	10916 <z_init_static_threads+0x36>
	 * until they are all started.
	 *
	 * Note that static threads defined using the legacy API have a
	 * delay of K_FOREVER.
	 */
	k_sched_lock();
   108f4:	f7ff fcf8 	bl	102e8 <k_sched_lock>
   108f8:	f44f 4900 	mov.w	r9, #32768	; 0x8000
   108fc:	f240 36e7 	movw	r6, #999	; 0x3e7
   10900:	2700      	movs	r7, #0
	_FOREACH_STATIC_THREAD(thread_data) {
   10902:	4c22      	ldr	r4, [pc, #136]	; (1098c <z_init_static_threads+0xac>)
   10904:	f8df a088 	ldr.w	sl, [pc, #136]	; 10990 <z_init_static_threads+0xb0>
   10908:	4544      	cmp	r4, r8
   1090a:	d321      	bcc.n	10950 <z_init_static_threads+0x70>
			schedule_new_thread(thread_data->init_thread,
					    thread_data->init_delay);
		}
	}
	k_sched_unlock();
}
   1090c:	b007      	add	sp, #28
   1090e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	k_sched_unlock();
   10912:	f7ff bd31 	b.w	10378 <k_sched_unlock>
		z_setup_new_thread(
   10916:	f854 3c04 	ldr.w	r3, [r4, #-4]
   1091a:	9305      	str	r3, [sp, #20]
   1091c:	f854 3c10 	ldr.w	r3, [r4, #-16]
   10920:	9304      	str	r3, [sp, #16]
   10922:	f854 3c14 	ldr.w	r3, [r4, #-20]
   10926:	9303      	str	r3, [sp, #12]
   10928:	f854 3c18 	ldr.w	r3, [r4, #-24]
   1092c:	9302      	str	r3, [sp, #8]
   1092e:	f854 3c1c 	ldr.w	r3, [r4, #-28]
   10932:	9301      	str	r3, [sp, #4]
   10934:	f854 3c20 	ldr.w	r3, [r4, #-32]
   10938:	9300      	str	r3, [sp, #0]
   1093a:	e954 230a 	ldrd	r2, r3, [r4, #-40]	; 0x28
   1093e:	e954 010c 	ldrd	r0, r1, [r4, #-48]	; 0x30
   10942:	f7ff ff83 	bl	1084c <z_setup_new_thread>
		thread_data->init_thread->init_data = thread_data;
   10946:	f854 3c30 	ldr.w	r3, [r4, #-48]
   1094a:	64dd      	str	r5, [r3, #76]	; 0x4c
   1094c:	4625      	mov	r5, r4
   1094e:	e7cd      	b.n	108ec <z_init_static_threads+0xc>
		if (thread_data->init_delay != K_FOREVER) {
   10950:	6a61      	ldr	r1, [r4, #36]	; 0x24
   10952:	1c4b      	adds	r3, r1, #1
   10954:	d004      	beq.n	10960 <z_init_static_threads+0x80>
			schedule_new_thread(thread_data->init_thread,
   10956:	6825      	ldr	r5, [r4, #0]
	if (delay == 0) {
   10958:	b921      	cbnz	r1, 10964 <z_init_static_threads+0x84>
   1095a:	4628      	mov	r0, r5
   1095c:	f7ff ff52 	bl	10804 <z_impl_k_thread_start>
	_FOREACH_STATIC_THREAD(thread_data) {
   10960:	3430      	adds	r4, #48	; 0x30
   10962:	e7d1      	b.n	10908 <z_init_static_threads+0x28>
   10964:	46b3      	mov	fp, r6
   10966:	46bc      	mov	ip, r7
   10968:	fbc9 bc01 	smlal	fp, ip, r9, r1
   1096c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   10970:	2300      	movs	r3, #0
   10972:	4658      	mov	r0, fp
   10974:	4661      	mov	r1, ip
   10976:	f7fb fc53 	bl	c220 <__aeabi_ldivmod>
   1097a:	4651      	mov	r1, sl
   1097c:	1c42      	adds	r2, r0, #1
   1097e:	f105 0018 	add.w	r0, r5, #24
   10982:	f000 f843 	bl	10a0c <z_add_timeout>
   10986:	e7eb      	b.n	10960 <z_init_static_threads+0x80>
   10988:	2002592c 	.word	0x2002592c
   1098c:	2002592c 	.word	0x2002592c
   10990:	0001202f 	.word	0x0001202f

00010994 <elapsed>:
	sys_dlist_remove(&t->node);
}

static s32_t elapsed(void)
{
	return announce_remaining == 0 ? z_clock_elapsed() : 0;
   10994:	4b03      	ldr	r3, [pc, #12]	; (109a4 <elapsed+0x10>)
   10996:	681b      	ldr	r3, [r3, #0]
   10998:	b90b      	cbnz	r3, 1099e <elapsed+0xa>
   1099a:	f7fc bfcb 	b.w	d934 <z_clock_elapsed>
}
   1099e:	2000      	movs	r0, #0
   109a0:	4770      	bx	lr
   109a2:	bf00      	nop
   109a4:	20024328 	.word	0x20024328

000109a8 <remove_timeout>:
{
   109a8:	6803      	ldr	r3, [r0, #0]
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   109aa:	b140      	cbz	r0, 109be <remove_timeout+0x16>
   109ac:	4a08      	ldr	r2, [pc, #32]	; (109d0 <remove_timeout+0x28>)
	return (node == list->tail) ? NULL : node->next;
   109ae:	6852      	ldr	r2, [r2, #4]
   109b0:	4290      	cmp	r0, r2
   109b2:	d004      	beq.n	109be <remove_timeout+0x16>
	if (next(t) != NULL) {
   109b4:	b11b      	cbz	r3, 109be <remove_timeout+0x16>
		next(t)->dticks += t->dticks;
   109b6:	689a      	ldr	r2, [r3, #8]
   109b8:	6881      	ldr	r1, [r0, #8]
   109ba:	440a      	add	r2, r1
   109bc:	609a      	str	r2, [r3, #8]
	node->prev->next = node->next;
   109be:	6842      	ldr	r2, [r0, #4]
   109c0:	6013      	str	r3, [r2, #0]
	node->next->prev = node->prev;
   109c2:	6803      	ldr	r3, [r0, #0]
   109c4:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   109c6:	2300      	movs	r3, #0
	node->prev = NULL;
   109c8:	e9c0 3300 	strd	r3, r3, [r0]
}
   109cc:	4770      	bx	lr
   109ce:	bf00      	nop
   109d0:	20025888 	.word	0x20025888

000109d4 <next_timeout>:
	return list->head == list;
   109d4:	4b0b      	ldr	r3, [pc, #44]	; (10a04 <next_timeout+0x30>)

static s32_t next_timeout(void)
{
   109d6:	b510      	push	{r4, lr}
   109d8:	681c      	ldr	r4, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   109da:	429c      	cmp	r4, r3
   109dc:	bf08      	it	eq
   109de:	2400      	moveq	r4, #0
	struct _timeout *to = first();
	s32_t ticks_elapsed = elapsed();
   109e0:	f7ff ffd8 	bl	10994 <elapsed>
	s32_t ret = to == NULL ? MAX_WAIT : MAX(0, to->dticks - ticks_elapsed);
   109e4:	b154      	cbz	r4, 109fc <next_timeout+0x28>
   109e6:	68a3      	ldr	r3, [r4, #8]
   109e8:	1a18      	subs	r0, r3, r0
   109ea:	ea20 70e0 	bic.w	r0, r0, r0, asr #31

#ifdef CONFIG_TIMESLICING
	if (_current_cpu->slice_ticks && _current_cpu->slice_ticks < ret) {
   109ee:	4b06      	ldr	r3, [pc, #24]	; (10a08 <next_timeout+0x34>)
   109f0:	691b      	ldr	r3, [r3, #16]
   109f2:	b113      	cbz	r3, 109fa <next_timeout+0x26>
   109f4:	4298      	cmp	r0, r3
   109f6:	bfa8      	it	ge
   109f8:	4618      	movge	r0, r3
		ret = _current_cpu->slice_ticks;
	}
#endif
	return ret;
}
   109fa:	bd10      	pop	{r4, pc}
	s32_t ret = to == NULL ? MAX_WAIT : MAX(0, to->dticks - ticks_elapsed);
   109fc:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
   10a00:	e7f5      	b.n	109ee <next_timeout+0x1a>
   10a02:	bf00      	nop
   10a04:	20025888 	.word	0x20025888
   10a08:	200242ec 	.word	0x200242ec

00010a0c <z_add_timeout>:

void z_add_timeout(struct _timeout *to, _timeout_func_t fn, s32_t ticks)
{
   10a0c:	b570      	push	{r4, r5, r6, lr}
   10a0e:	4604      	mov	r4, r0
   10a10:	4616      	mov	r6, r2
	__ASSERT(!sys_dnode_is_linked(&to->node), "");
	to->fn = fn;
   10a12:	60c1      	str	r1, [r0, #12]
	__asm__ volatile(
   10a14:	f04f 0320 	mov.w	r3, #32
   10a18:	f3ef 8511 	mrs	r5, BASEPRI
   10a1c:	f383 8811 	msr	BASEPRI, r3
   10a20:	f3bf 8f6f 	isb	sy
	ticks = MAX(1, ticks);

	LOCKED(&timeout_lock) {
		struct _timeout *t;

		to->dticks = ticks + elapsed();
   10a24:	f7ff ffb6 	bl	10994 <elapsed>
   10a28:	2e01      	cmp	r6, #1
   10a2a:	bfac      	ite	ge
   10a2c:	1980      	addge	r0, r0, r6
   10a2e:	3001      	addlt	r0, #1
	return list->head == list;
   10a30:	4b17      	ldr	r3, [pc, #92]	; (10a90 <z_add_timeout+0x84>)
   10a32:	60a0      	str	r0, [r4, #8]
   10a34:	681a      	ldr	r2, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   10a36:	429a      	cmp	r2, r3
   10a38:	d001      	beq.n	10a3e <z_add_timeout+0x32>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   10a3a:	685e      	ldr	r6, [r3, #4]
		for (t = first(); t != NULL; t = next(t)) {
   10a3c:	b932      	cbnz	r2, 10a4c <z_add_timeout+0x40>
	node->prev = list->tail;
   10a3e:	685a      	ldr	r2, [r3, #4]
	node->next = list;
   10a40:	6023      	str	r3, [r4, #0]
	node->prev = list->tail;
   10a42:	6062      	str	r2, [r4, #4]
	list->tail->next = node;
   10a44:	685a      	ldr	r2, [r3, #4]
   10a46:	6014      	str	r4, [r2, #0]
	list->tail = node;
   10a48:	605c      	str	r4, [r3, #4]
   10a4a:	e00b      	b.n	10a64 <z_add_timeout+0x58>
			__ASSERT(t->dticks >= 0, "");

			if (t->dticks > to->dticks) {
   10a4c:	6890      	ldr	r0, [r2, #8]
   10a4e:	68a1      	ldr	r1, [r4, #8]
   10a50:	4288      	cmp	r0, r1
   10a52:	dd16      	ble.n	10a82 <z_add_timeout+0x76>
				t->dticks -= to->dticks;
   10a54:	1a41      	subs	r1, r0, r1
   10a56:	6091      	str	r1, [r2, #8]
	node->prev = successor->prev;
   10a58:	6851      	ldr	r1, [r2, #4]
	node->next = successor;
   10a5a:	e9c4 2100 	strd	r2, r1, [r4]
	successor->prev->next = node;
   10a5e:	6851      	ldr	r1, [r2, #4]
   10a60:	600c      	str	r4, [r1, #0]
	successor->prev = node;
   10a62:	6054      	str	r4, [r2, #4]
	return list->head == list;
   10a64:	681a      	ldr	r2, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   10a66:	429a      	cmp	r2, r3
   10a68:	d006      	beq.n	10a78 <z_add_timeout+0x6c>

		if (t == NULL) {
			sys_dlist_append(&timeout_list, &to->node);
		}

		if (to == first()) {
   10a6a:	4294      	cmp	r4, r2
   10a6c:	d104      	bne.n	10a78 <z_add_timeout+0x6c>
			z_clock_set_timeout(next_timeout(), false);
   10a6e:	f7ff ffb1 	bl	109d4 <next_timeout>
   10a72:	2100      	movs	r1, #0
   10a74:	f7fc ff10 	bl	d898 <z_clock_set_timeout>
	__asm__ volatile(
   10a78:	f385 8811 	msr	BASEPRI, r5
   10a7c:	f3bf 8f6f 	isb	sy
		}
	}
}
   10a80:	bd70      	pop	{r4, r5, r6, pc}
			to->dticks -= t->dticks;
   10a82:	1a09      	subs	r1, r1, r0
	return (node == list->tail) ? NULL : node->next;
   10a84:	4296      	cmp	r6, r2
   10a86:	60a1      	str	r1, [r4, #8]
   10a88:	d0d9      	beq.n	10a3e <z_add_timeout+0x32>
   10a8a:	6812      	ldr	r2, [r2, #0]
   10a8c:	e7d6      	b.n	10a3c <z_add_timeout+0x30>
   10a8e:	bf00      	nop
   10a90:	20025888 	.word	0x20025888

00010a94 <z_clock_announce>:
		}
	}
}

void z_clock_announce(s32_t ticks)
{
   10a94:	e92d 4bf0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, fp, lr}
   10a98:	4604      	mov	r4, r0
#ifdef CONFIG_TIMESLICING
	z_time_slice(ticks);
   10a9a:	f7ff fd05 	bl	104a8 <z_time_slice>
	__asm__ volatile(
   10a9e:	f04f 0320 	mov.w	r3, #32
   10aa2:	f3ef 8511 	mrs	r5, BASEPRI
   10aa6:	f383 8811 	msr	BASEPRI, r3
   10aaa:	f3bf 8f6f 	isb	sy
   10aae:	4f21      	ldr	r7, [pc, #132]	; (10b34 <z_clock_announce+0xa0>)
#endif

	k_spinlock_key_t key = k_spin_lock(&timeout_lock);

	announce_remaining = ticks;
   10ab0:	4e21      	ldr	r6, [pc, #132]	; (10b38 <z_clock_announce+0xa4>)
   10ab2:	46b8      	mov	r8, r7
	return list->head == list;
   10ab4:	f8df 9084 	ldr.w	r9, [pc, #132]	; 10b3c <z_clock_announce+0xa8>
   10ab8:	6034      	str	r4, [r6, #0]
   10aba:	f8d9 4000 	ldr.w	r4, [r9]
   10abe:	6832      	ldr	r2, [r6, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   10ac0:	454c      	cmp	r4, r9
   10ac2:	e9d7 bc00 	ldrd	fp, ip, [r7]
   10ac6:	d005      	beq.n	10ad4 <z_clock_announce+0x40>

	while (first() != NULL && first()->dticks <= announce_remaining) {
   10ac8:	b124      	cbz	r4, 10ad4 <z_clock_announce+0x40>
   10aca:	68a3      	ldr	r3, [r4, #8]
   10acc:	4293      	cmp	r3, r2
   10ace:	dd14      	ble.n	10afa <z_clock_announce+0x66>
		t->fn(t);
		key = k_spin_lock(&timeout_lock);
	}

	if (first() != NULL) {
		first()->dticks -= announce_remaining;
   10ad0:	1a9b      	subs	r3, r3, r2
   10ad2:	60a3      	str	r3, [r4, #8]
	}

	curr_tick += announce_remaining;
	announce_remaining = 0;
   10ad4:	2400      	movs	r4, #0
	curr_tick += announce_remaining;
   10ad6:	eb1b 0002 	adds.w	r0, fp, r2
   10ada:	eb4c 71e2 	adc.w	r1, ip, r2, asr #31
   10ade:	e9c8 0100 	strd	r0, r1, [r8]
	announce_remaining = 0;
   10ae2:	6034      	str	r4, [r6, #0]

	z_clock_set_timeout(next_timeout(), false);
   10ae4:	f7ff ff76 	bl	109d4 <next_timeout>
   10ae8:	4621      	mov	r1, r4
   10aea:	f7fc fed5 	bl	d898 <z_clock_set_timeout>
	__asm__ volatile(
   10aee:	f385 8811 	msr	BASEPRI, r5
   10af2:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&timeout_lock, key);
}
   10af6:	e8bd 8bf0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, fp, pc}
		curr_tick += dt;
   10afa:	eb1b 0003 	adds.w	r0, fp, r3
   10afe:	eb4c 71e3 	adc.w	r1, ip, r3, asr #31
		announce_remaining -= dt;
   10b02:	1ad3      	subs	r3, r2, r3
   10b04:	6033      	str	r3, [r6, #0]
		t->dticks = 0;
   10b06:	2300      	movs	r3, #0
		curr_tick += dt;
   10b08:	e9c7 0100 	strd	r0, r1, [r7]
		t->dticks = 0;
   10b0c:	60a3      	str	r3, [r4, #8]
		remove_timeout(t);
   10b0e:	4620      	mov	r0, r4
   10b10:	f7ff ff4a 	bl	109a8 <remove_timeout>
   10b14:	f385 8811 	msr	BASEPRI, r5
   10b18:	f3bf 8f6f 	isb	sy
		t->fn(t);
   10b1c:	68e3      	ldr	r3, [r4, #12]
   10b1e:	4798      	blx	r3
	__asm__ volatile(
   10b20:	f04f 0320 	mov.w	r3, #32
   10b24:	f3ef 8511 	mrs	r5, BASEPRI
   10b28:	f383 8811 	msr	BASEPRI, r3
   10b2c:	f3bf 8f6f 	isb	sy
   10b30:	e7c3      	b.n	10aba <z_clock_announce+0x26>
   10b32:	bf00      	nop
   10b34:	20020000 	.word	0x20020000
   10b38:	20024328 	.word	0x20024328
   10b3c:	20025888 	.word	0x20025888

00010b40 <z_tick_get>:

s64_t z_tick_get(void)
{
   10b40:	e92d 4818 	stmdb	sp!, {r3, r4, fp, lr}
   10b44:	f04f 0320 	mov.w	r3, #32
   10b48:	f3ef 8411 	mrs	r4, BASEPRI
   10b4c:	f383 8811 	msr	BASEPRI, r3
   10b50:	f3bf 8f6f 	isb	sy
	u64_t t = 0U;

	LOCKED(&timeout_lock) {
		t = curr_tick + z_clock_elapsed();
   10b54:	f7fc feee 	bl	d934 <z_clock_elapsed>
   10b58:	4b07      	ldr	r3, [pc, #28]	; (10b78 <z_tick_get+0x38>)
   10b5a:	e9d3 2300 	ldrd	r2, r3, [r3]
   10b5e:	eb12 0b00 	adds.w	fp, r2, r0
   10b62:	f143 0c00 	adc.w	ip, r3, #0
   10b66:	4658      	mov	r0, fp
   10b68:	4661      	mov	r1, ip
	__asm__ volatile(
   10b6a:	f384 8811 	msr	BASEPRI, r4
   10b6e:	f3bf 8f6f 	isb	sy
	}
	return t;
}
   10b72:	e8bd 8818 	ldmia.w	sp!, {r3, r4, fp, pc}
   10b76:	bf00      	nop
   10b78:	20020000 	.word	0x20020000

00010b7c <z_timer_expiration_handler>:

	/*
	 * if the timer is periodic, start it again; don't add _TICK_ALIGN
	 * since we're already aligned to a tick boundary
	 */
	if (timer->period > 0) {
   10b7c:	6a02      	ldr	r2, [r0, #32]
{
   10b7e:	b538      	push	{r3, r4, r5, lr}
	if (timer->period > 0) {
   10b80:	2a00      	cmp	r2, #0
{
   10b82:	4604      	mov	r4, r0
	if (timer->period > 0) {
   10b84:	dd02      	ble.n	10b8c <z_timer_expiration_handler+0x10>
		z_add_timeout(&timer->timeout, z_timer_expiration_handler,
   10b86:	490e      	ldr	r1, [pc, #56]	; (10bc0 <z_timer_expiration_handler+0x44>)
   10b88:	f7ff ff40 	bl	10a0c <z_add_timeout>
			     timer->period);
	}

	/* update timer's status */
	timer->status += 1U;
   10b8c:	6a63      	ldr	r3, [r4, #36]	; 0x24
   10b8e:	3301      	adds	r3, #1
   10b90:	6263      	str	r3, [r4, #36]	; 0x24

	/* invoke timer expiry function */
	if (timer->expiry_fn != NULL) {
   10b92:	69a3      	ldr	r3, [r4, #24]
   10b94:	b10b      	cbz	r3, 10b9a <z_timer_expiration_handler+0x1e>
		timer->expiry_fn(timer);
   10b96:	4620      	mov	r0, r4
   10b98:	4798      	blx	r3
	return list->head == list;
   10b9a:	f854 5f10 	ldr.w	r5, [r4, #16]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   10b9e:	42a5      	cmp	r5, r4
   10ba0:	d00d      	beq.n	10bbe <z_timer_expiration_handler+0x42>
	}

	thread = z_waitq_head(&timer->wait_q);

	if (thread == NULL) {
   10ba2:	b165      	cbz	r5, 10bbe <z_timer_expiration_handler+0x42>
	 * place a thread can be taken off this pend queue, and b) the
	 * only place a thread can be put on the pend queue is at
	 * thread level, which of course cannot interrupt the current
	 * context.
	 */
	z_unpend_thread_no_timeout(thread);
   10ba4:	4628      	mov	r0, r5
   10ba6:	f001 f9fa 	bl	11f9e <z_unpend_thread_no_timeout>
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
   10baa:	7b6b      	ldrb	r3, [r5, #13]
   10bac:	06db      	lsls	r3, r3, #27
   10bae:	d104      	bne.n	10bba <z_timer_expiration_handler+0x3e>
	if (z_is_thread_ready(thread)) {
   10bb0:	69ab      	ldr	r3, [r5, #24]
   10bb2:	b913      	cbnz	r3, 10bba <z_timer_expiration_handler+0x3e>
		z_add_thread_to_ready_q(thread);
   10bb4:	4628      	mov	r0, r5
   10bb6:	f7ff fbfb 	bl	103b0 <z_add_thread_to_ready_q>
   10bba:	2300      	movs	r3, #0
   10bbc:	66ab      	str	r3, [r5, #104]	; 0x68

	z_ready_thread(thread);

	z_arch_thread_return_value_set(thread, 0);
}
   10bbe:	bd38      	pop	{r3, r4, r5, pc}
   10bc0:	00010b7d 	.word	0x00010b7d

00010bc4 <z_impl_k_timer_start>:
	z_object_init(timer);
}


void z_impl_k_timer_start(struct k_timer *timer, s32_t duration, s32_t period)
{
   10bc4:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   10bc8:	f240 36e7 	movw	r6, #999	; 0x3e7
   10bcc:	2700      	movs	r7, #0
   10bce:	4604      	mov	r4, r0
   10bd0:	4688      	mov	r8, r1
   10bd2:	f44f 4500 	mov.w	r5, #32768	; 0x8000
   10bd6:	4630      	mov	r0, r6
   10bd8:	4639      	mov	r1, r7
   10bda:	2300      	movs	r3, #0
   10bdc:	fbc5 0102 	smlal	r0, r1, r5, r2
   10be0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   10be4:	f7fb fb1c 	bl	c220 <__aeabi_ldivmod>
   10be8:	4639      	mov	r1, r7
	__ASSERT(duration >= 0 && period >= 0 &&
		 (duration != 0 || period != 0), "invalid parameters\n");

	volatile s32_t period_in_ticks, duration_in_ticks;

	period_in_ticks = z_ms_to_ticks(period);
   10bea:	9000      	str	r0, [sp, #0]
   10bec:	4630      	mov	r0, r6
   10bee:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   10bf2:	2300      	movs	r3, #0
   10bf4:	fbc5 0108 	smlal	r0, r1, r5, r8
   10bf8:	f7fb fb12 	bl	c220 <__aeabi_ldivmod>
	duration_in_ticks = z_ms_to_ticks(duration);
   10bfc:	9001      	str	r0, [sp, #4]

	(void)z_abort_timeout(&timer->timeout);
   10bfe:	4620      	mov	r0, r4
   10c00:	f001 fac9 	bl	12196 <z_abort_timeout>
	timer->period = period_in_ticks;
   10c04:	9b00      	ldr	r3, [sp, #0]
	timer->status = 0U;
	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
   10c06:	4620      	mov	r0, r4
	timer->period = period_in_ticks;
   10c08:	6223      	str	r3, [r4, #32]
	timer->status = 0U;
   10c0a:	2300      	movs	r3, #0
	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
   10c0c:	9a01      	ldr	r2, [sp, #4]
   10c0e:	4903      	ldr	r1, [pc, #12]	; (10c1c <z_impl_k_timer_start+0x58>)
	timer->status = 0U;
   10c10:	6263      	str	r3, [r4, #36]	; 0x24
		     duration_in_ticks);
}
   10c12:	b002      	add	sp, #8
   10c14:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
   10c18:	f7ff bef8 	b.w	10a0c <z_add_timeout>
   10c1c:	00010b7d 	.word	0x00010b7d

00010c20 <display_write>:
{
   10c20:	b410      	push	{r4}
	return api->write(dev, x, y, desc, buf);
   10c22:	6844      	ldr	r4, [r0, #4]
   10c24:	68a4      	ldr	r4, [r4, #8]
   10c26:	46a4      	mov	ip, r4
}
   10c28:	bc10      	pop	{r4}
	return api->write(dev, x, y, desc, buf);
   10c2a:	4760      	bx	ip

00010c2c <arm_cmse_mpu_region_get>:
__CMSE_TT_ASM ()

__extension__ static __inline __attribute__ ((__always_inline__))
cmse_address_info_t
cmse_TT (void *__p)
__CMSE_TT_ASM ()
   10c2c:	e840 f300 	tt	r3, r0

int arm_cmse_mpu_region_get(u32_t addr)
{
	cmse_address_info_t addr_info =	cmse_TT((void *)addr);

	if (addr_info.flags.mpu_region_valid) {
   10c30:	f413 3f80 	tst.w	r3, #65536	; 0x10000
   10c34:	b2d8      	uxtb	r0, r3
		return addr_info.flags.mpu_region;
	}

	return -EINVAL;
}
   10c36:	bf08      	it	eq
   10c38:	f06f 0015 	mvneq.w	r0, #21
   10c3c:	4770      	bx	lr

00010c3e <get_bit_ptr>:
/* Places a 32 bit output pointer in word, and an integer bit index
 * within that word as the return value
 */
static int get_bit_ptr(struct sys_mem_pool_base *p, int level, int bn,
		       u32_t **word)
{
   10c3e:	b570      	push	{r4, r5, r6, lr}
   10c40:	250c      	movs	r5, #12
   10c42:	434d      	muls	r5, r1
   10c44:	68c6      	ldr	r6, [r0, #12]
	u32_t *bitarray = level <= p->max_inline_level ?
   10c46:	f990 000b 	ldrsb.w	r0, [r0, #11]
   10c4a:	1974      	adds	r4, r6, r5
		p->levels[level].bits : p->levels[level].bits_p;
   10c4c:	4288      	cmp	r0, r1
   10c4e:	bfa8      	it	ge
   10c50:	4621      	movge	r1, r4

	*word = &bitarray[bn / 32];
   10c52:	f04f 0420 	mov.w	r4, #32
   10c56:	fb92 f4f4 	sdiv	r4, r2, r4
		p->levels[level].bits : p->levels[level].bits_p;
   10c5a:	bfb8      	it	lt
   10c5c:	5971      	ldrlt	r1, [r6, r5]

	return bn & 0x1f;
}
   10c5e:	f002 001f 	and.w	r0, r2, #31
	*word = &bitarray[bn / 32];
   10c62:	eb01 0184 	add.w	r1, r1, r4, lsl #2
   10c66:	6019      	str	r1, [r3, #0]
}
   10c68:	bd70      	pop	{r4, r5, r6, pc}

00010c6a <pool_irq_lock.isra.2.part.3>:
	__asm__ volatile(
   10c6a:	f04f 0320 	mov.w	r3, #32
   10c6e:	f3ef 8011 	mrs	r0, BASEPRI
   10c72:	f383 8811 	msr	BASEPRI, r3
   10c76:	f3bf 8f6f 	isb	sy
	if (p->flags & SYS_MEM_POOL_KERNEL) {
		return irq_lock();
	} else {
		return 0;
	}
}
   10c7a:	4770      	bx	lr

00010c7c <pool_irq_unlock.isra.4>:

static inline void pool_irq_unlock(struct sys_mem_pool_base *p, int key)
{
	if (p->flags & SYS_MEM_POOL_KERNEL) {
   10c7c:	07c3      	lsls	r3, r0, #31
   10c7e:	d503      	bpl.n	10c88 <pool_irq_unlock.isra.4+0xc>
	__asm__ volatile(
   10c80:	f381 8811 	msr	BASEPRI, r1
   10c84:	f3bf 8f6f 	isb	sy
		irq_unlock(key);
	}
}
   10c88:	4770      	bx	lr

00010c8a <z_sys_mem_pool_base_init>:
	p->max_inline_level = -1;
   10c8a:	23ff      	movs	r3, #255	; 0xff
{
   10c8c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	size_t buflen = p->n_max * p->max_sz, sz = p->max_sz;
   10c90:	6845      	ldr	r5, [r0, #4]
	for (i = 0; i < p->n_levels; i++) {
   10c92:	2200      	movs	r2, #0
	size_t buflen = p->n_max * p->max_sz, sz = p->max_sz;
   10c94:	4629      	mov	r1, r5
		sys_dlist_init(&p->levels[i].free_list);
   10c96:	f04f 0a0c 	mov.w	sl, #12
			bits += (nblocks + 31)/32;
   10c9a:	f04f 0b20 	mov.w	fp, #32
	size_t buflen = p->n_max * p->max_sz, sz = p->max_sz;
   10c9e:	8907      	ldrh	r7, [r0, #8]
	u32_t *bits = (u32_t *)((u8_t *)p->buf + buflen);
   10ca0:	6804      	ldr	r4, [r0, #0]
	size_t buflen = p->n_max * p->max_sz, sz = p->max_sz;
   10ca2:	fb05 fc07 	mul.w	ip, r5, r7
	p->max_inline_level = -1;
   10ca6:	72c3      	strb	r3, [r0, #11]
	for (i = 0; i < p->n_levels; i++) {
   10ca8:	7a83      	ldrb	r3, [r0, #10]
	u32_t *bits = (u32_t *)((u8_t *)p->buf + buflen);
   10caa:	4464      	add	r4, ip
	for (i = 0; i < p->n_levels; i++) {
   10cac:	9301      	str	r3, [sp, #4]
   10cae:	9b01      	ldr	r3, [sp, #4]
   10cb0:	4293      	cmp	r3, r2
   10cb2:	dc08      	bgt.n	10cc6 <z_sys_mem_pool_base_init+0x3c>
   10cb4:	2300      	movs	r3, #0
	for (i = 0; i < p->n_max; i++) {
   10cb6:	4619      	mov	r1, r3
   10cb8:	428f      	cmp	r7, r1
   10cba:	eb05 0c03 	add.w	ip, r5, r3
   10cbe:	dc21      	bgt.n	10d04 <z_sys_mem_pool_base_init+0x7a>
}
   10cc0:	b003      	add	sp, #12
   10cc2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		int nblocks = buflen / sz;
   10cc6:	fbbc f3f1 	udiv	r3, ip, r1
		if (nblocks <= sizeof(p->levels[i].bits)*8) {
   10cca:	2b20      	cmp	r3, #32
			bits += (nblocks + 31)/32;
   10ccc:	bf84      	itt	hi
   10cce:	331f      	addhi	r3, #31
   10cd0:	fb93 f3fb 	sdivhi	r3, r3, fp
		sys_dlist_init(&p->levels[i].free_list);
   10cd4:	fb0a fe02 	mul.w	lr, sl, r2
   10cd8:	f8d0 800c 	ldr.w	r8, [r0, #12]
		sz = WB_DN(sz / 4);
   10cdc:	ea4f 0191 	mov.w	r1, r1, lsr #2
		sys_dlist_init(&p->levels[i].free_list);
   10ce0:	eb08 060e 	add.w	r6, r8, lr
   10ce4:	f106 0904 	add.w	r9, r6, #4
	list->tail = (sys_dnode_t *)list;
   10ce8:	e9c6 9901 	strd	r9, r9, [r6, #4]
		sz = WB_DN(sz / 4);
   10cec:	f021 0103 	bic.w	r1, r1, #3
			p->max_inline_level = i;
   10cf0:	bf94      	ite	ls
   10cf2:	72c2      	strbls	r2, [r0, #11]
			p->levels[i].bits_p = bits;
   10cf4:	f848 400e 	strhi.w	r4, [r8, lr]
	for (i = 0; i < p->n_levels; i++) {
   10cf8:	f102 0201 	add.w	r2, r2, #1
			bits += (nblocks + 31)/32;
   10cfc:	bf88      	it	hi
   10cfe:	eb04 0483 	addhi.w	r4, r4, r3, lsl #2
   10d02:	e7d4      	b.n	10cae <z_sys_mem_pool_base_init+0x24>
		sys_dlist_append(&p->levels[0].free_list, block);
   10d04:	68c2      	ldr	r2, [r0, #12]
	return (u8_t *)p->buf + lsz * block;
   10d06:	6806      	ldr	r6, [r0, #0]
		sys_dlist_append(&p->levels[0].free_list, block);
   10d08:	f102 0e04 	add.w	lr, r2, #4
	return (u8_t *)p->buf + lsz * block;
   10d0c:	18f4      	adds	r4, r6, r3
	node->next = list;
   10d0e:	f846 e003 	str.w	lr, [r6, r3]
	node->prev = list->tail;
   10d12:	6893      	ldr	r3, [r2, #8]
	for (i = 0; i < p->n_max; i++) {
   10d14:	3101      	adds	r1, #1
   10d16:	6063      	str	r3, [r4, #4]
	list->tail->next = node;
   10d18:	6893      	ldr	r3, [r2, #8]
   10d1a:	601c      	str	r4, [r3, #0]
	list->tail = node;
   10d1c:	6094      	str	r4, [r2, #8]
   10d1e:	4663      	mov	r3, ip
   10d20:	e7ca      	b.n	10cb8 <z_sys_mem_pool_base_init+0x2e>

00010d22 <z_sys_mem_pool_block_alloc>:
	return block;
}

int z_sys_mem_pool_block_alloc(struct sys_mem_pool_base *p, size_t size,
			      u32_t *level_p, u32_t *block_p, void **data_p)
{
   10d22:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   10d26:	b089      	sub	sp, #36	; 0x24
	int i, from_l, alloc_l = -1;
	unsigned int key;
	void *data = NULL;
	size_t lsizes[LVL_ARRAY_SZ(p->n_levels)];
   10d28:	7a84      	ldrb	r4, [r0, #10]
{
   10d2a:	af00      	add	r7, sp, #0
   10d2c:	e9c7 3202 	strd	r3, r2, [r7, #8]
	size_t lsizes[LVL_ARRAY_SZ(p->n_levels)];
   10d30:	00a3      	lsls	r3, r4, #2
   10d32:	330a      	adds	r3, #10
   10d34:	f403 63ff 	and.w	r3, r3, #2040	; 0x7f8
   10d38:	ebad 0d03 	sub.w	sp, sp, r3
   10d3c:	46ea      	mov	sl, sp
	 * want to allocate and the smallest one with a free entry
	 * from which we can split an allocation if needed.  Along the
	 * way, we populate an array of sizes for each level so we
	 * don't need to waste RAM storing it.
	 */
	lsizes[0] = p->max_sz;
   10d3e:	4653      	mov	r3, sl
   10d40:	6842      	ldr	r2, [r0, #4]
{
   10d42:	4605      	mov	r5, r0
	lsizes[0] = p->max_sz;
   10d44:	f843 2904 	str.w	r2, [r3], #-4
	for (i = 0; i < p->n_levels; i++) {
   10d48:	2200      	movs	r2, #0
   10d4a:	4294      	cmp	r4, r2
   10d4c:	f102 39ff 	add.w	r9, r2, #4294967295
   10d50:	dd09      	ble.n	10d66 <z_sys_mem_pool_block_alloc+0x44>
		if (i > 0) {
   10d52:	b122      	cbz	r2, 10d5e <z_sys_mem_pool_block_alloc+0x3c>
			lsizes[i] = WB_DN(lsizes[i-1] / 4);
   10d54:	6818      	ldr	r0, [r3, #0]
   10d56:	0880      	lsrs	r0, r0, #2
   10d58:	f020 0003 	bic.w	r0, r0, #3
   10d5c:	6058      	str	r0, [r3, #4]
		}

		if (lsizes[i] < size) {
   10d5e:	f853 0f04 	ldr.w	r0, [r3, #4]!
   10d62:	4288      	cmp	r0, r1
   10d64:	d208      	bcs.n	10d78 <z_sys_mem_pool_block_alloc+0x56>
		}

		alloc_l = i;
	}

	if (alloc_l < 0) {
   10d66:	f1b9 3fff 	cmp.w	r9, #4294967295
   10d6a:	d107      	bne.n	10d7c <z_sys_mem_pool_block_alloc+0x5a>
		*data_p = NULL;
   10d6c:	2300      	movs	r3, #0
   10d6e:	6cba      	ldr	r2, [r7, #72]	; 0x48
   10d70:	6013      	str	r3, [r2, #0]
	pool_irq_unlock(p, key);

	*data_p = data;

	if (data == NULL) {
		return -ENOMEM;
   10d72:	f06f 000b 	mvn.w	r0, #11
   10d76:	e047      	b.n	10e08 <z_sys_mem_pool_block_alloc+0xe6>
	for (i = 0; i < p->n_levels; i++) {
   10d78:	3201      	adds	r2, #1
   10d7a:	e7e6      	b.n	10d4a <z_sys_mem_pool_block_alloc+0x28>
	if (p->flags & SYS_MEM_POOL_KERNEL) {
   10d7c:	7c28      	ldrb	r0, [r5, #16]
   10d7e:	f010 0001 	ands.w	r0, r0, #1
   10d82:	d001      	beq.n	10d88 <z_sys_mem_pool_block_alloc+0x66>
   10d84:	f7ff ff71 	bl	10c6a <pool_irq_lock.isra.2.part.3>
   10d88:	230c      	movs	r3, #12
	block = sys_dlist_get(&p->levels[l].free_list);
   10d8a:	46c8      	mov	r8, r9
   10d8c:	fb03 f309 	mul.w	r3, r3, r9
   10d90:	1d1a      	adds	r2, r3, #4
   10d92:	68eb      	ldr	r3, [r5, #12]
	key = pool_irq_lock(p);
   10d94:	6178      	str	r0, [r7, #20]
   10d96:	4413      	add	r3, r2
	return list->head == list;
   10d98:	681c      	ldr	r4, [r3, #0]

static inline sys_dnode_t *sys_dlist_get(sys_dlist_t *list)
{
	sys_dnode_t *node = NULL;

	if (!sys_dlist_is_empty(list)) {
   10d9a:	42a3      	cmp	r3, r4
   10d9c:	d070      	beq.n	10e80 <z_sys_mem_pool_block_alloc+0x15e>
	node->prev->next = node->next;
   10d9e:	e9d4 2300 	ldrd	r2, r3, [r4]
   10da2:	601a      	str	r2, [r3, #0]
	node->next->prev = node->prev;
   10da4:	6822      	ldr	r2, [r4, #0]
		data = block_alloc(p, i, lsizes[i]);
   10da6:	f85a 1028 	ldr.w	r1, [sl, r8, lsl #2]
   10daa:	6053      	str	r3, [r2, #4]
	node->next = NULL;
   10dac:	2300      	movs	r3, #0
	node->prev = NULL;
   10dae:	e9c4 3300 	strd	r3, r3, [r4]
	return ((u8_t *)block - (u8_t *)p->buf) / sz;
   10db2:	682b      	ldr	r3, [r5, #0]
	int bit = get_bit_ptr(p, level, bn, &word);
   10db4:	f107 0b1c 	add.w	fp, r7, #28
	return ((u8_t *)block - (u8_t *)p->buf) / sz;
   10db8:	1ae2      	subs	r2, r4, r3
	int bit = get_bit_ptr(p, level, bn, &word);
   10dba:	fb92 f2f1 	sdiv	r2, r2, r1
   10dbe:	465b      	mov	r3, fp
   10dc0:	4641      	mov	r1, r8
   10dc2:	4628      	mov	r0, r5
   10dc4:	f7ff ff3b 	bl	10c3e <get_bit_ptr>
	*word |= (1<<bit);
   10dc8:	2201      	movs	r2, #1
   10dca:	69f9      	ldr	r1, [r7, #28]
   10dcc:	fa02 f000 	lsl.w	r0, r2, r0
   10dd0:	680b      	ldr	r3, [r1, #0]
   10dd2:	eb0a 0688 	add.w	r6, sl, r8, lsl #2
   10dd6:	4303      	orrs	r3, r0
   10dd8:	600b      	str	r3, [r1, #0]
   10dda:	607a      	str	r2, [r7, #4]
			for (from_l = i; from_l < alloc_l; from_l++) {
   10ddc:	45c8      	cmp	r8, r9
   10dde:	db17      	blt.n	10e10 <z_sys_mem_pool_block_alloc+0xee>
	pool_irq_unlock(p, key);
   10de0:	6979      	ldr	r1, [r7, #20]
   10de2:	7c28      	ldrb	r0, [r5, #16]
   10de4:	f7ff ff4a 	bl	10c7c <pool_irq_unlock.isra.4>
	*data_p = data;
   10de8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   10dea:	601c      	str	r4, [r3, #0]
	if (data == NULL) {
   10dec:	2c00      	cmp	r4, #0
   10dee:	d0c0      	beq.n	10d72 <z_sys_mem_pool_block_alloc+0x50>
	}

	*level_p = alloc_l;
   10df0:	68fb      	ldr	r3, [r7, #12]
	*block_p = block_num(p, data, lsizes[alloc_l]);

	return 0;
   10df2:	2000      	movs	r0, #0
	*level_p = alloc_l;
   10df4:	f8c3 9000 	str.w	r9, [r3]
	return ((u8_t *)block - (u8_t *)p->buf) / sz;
   10df8:	682b      	ldr	r3, [r5, #0]
   10dfa:	1ae4      	subs	r4, r4, r3
   10dfc:	f85a 3029 	ldr.w	r3, [sl, r9, lsl #2]
   10e00:	fb94 f4f3 	sdiv	r4, r4, r3
	*block_p = block_num(p, data, lsizes[alloc_l]);
   10e04:	68bb      	ldr	r3, [r7, #8]
   10e06:	601c      	str	r4, [r3, #0]
}
   10e08:	3724      	adds	r7, #36	; 0x24
   10e0a:	46bd      	mov	sp, r7
   10e0c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	return ((u8_t *)block - (u8_t *)p->buf) / sz;
   10e10:	682b      	ldr	r3, [r5, #0]
	bn = block_num(p, block, lsizes[l]);
   10e12:	6832      	ldr	r2, [r6, #0]
	return ((u8_t *)block - (u8_t *)p->buf) / sz;
   10e14:	1ae3      	subs	r3, r4, r3
   10e16:	fb93 f2f2 	sdiv	r2, r3, r2
	set_alloc_bit(p, l + 1, 4*bn);
   10e1a:	f108 0801 	add.w	r8, r8, #1
	int bit = get_bit_ptr(p, level, bn, &word);
   10e1e:	465b      	mov	r3, fp
   10e20:	0092      	lsls	r2, r2, #2
   10e22:	4641      	mov	r1, r8
   10e24:	4628      	mov	r0, r5
   10e26:	f7ff ff0a 	bl	10c3e <get_bit_ptr>
	*word |= (1<<bit);
   10e2a:	69fa      	ldr	r2, [r7, #28]
   10e2c:	687b      	ldr	r3, [r7, #4]
		sys_dlist_append(&p->levels[l + 1].free_list, block2);
   10e2e:	68e9      	ldr	r1, [r5, #12]
	*word |= (1<<bit);
   10e30:	fa03 f000 	lsl.w	r0, r3, r0
   10e34:	6813      	ldr	r3, [r2, #0]
   10e36:	4303      	orrs	r3, r0
   10e38:	6013      	str	r3, [r2, #0]
		sys_dlist_append(&p->levels[l + 1].free_list, block2);
   10e3a:	230c      	movs	r3, #12
   10e3c:	2203      	movs	r2, #3
   10e3e:	fb03 1108 	mla	r1, r3, r8, r1
		int lsz = lsizes[l + 1];
   10e42:	f856 0f04 	ldr.w	r0, [r6, #4]!
		sys_dlist_append(&p->levels[l + 1].free_list, block2);
   10e46:	f101 0e04 	add.w	lr, r1, #4
   10e4a:	1823      	adds	r3, r4, r0
   10e4c:	613a      	str	r2, [r7, #16]
	node->prev = list->tail;
   10e4e:	688a      	ldr	r2, [r1, #8]
	node->next = list;
   10e50:	f8c3 e000 	str.w	lr, [r3]
	node->prev = list->tail;
   10e54:	605a      	str	r2, [r3, #4]
	list->tail->next = node;
   10e56:	688a      	ldr	r2, [r1, #8]
   10e58:	6013      	str	r3, [r2, #0]
	for (i = 1; i < 4; i++) {
   10e5a:	693a      	ldr	r2, [r7, #16]
	list->tail = node;
   10e5c:	608b      	str	r3, [r1, #8]
   10e5e:	3a01      	subs	r2, #1
   10e60:	4403      	add	r3, r0
   10e62:	613a      	str	r2, [r7, #16]
   10e64:	d1f3      	bne.n	10e4e <z_sys_mem_pool_block_alloc+0x12c>
				pool_irq_unlock(p, key);
   10e66:	6979      	ldr	r1, [r7, #20]
   10e68:	7c28      	ldrb	r0, [r5, #16]
   10e6a:	f7ff ff07 	bl	10c7c <pool_irq_unlock.isra.4>
	if (p->flags & SYS_MEM_POOL_KERNEL) {
   10e6e:	7c2b      	ldrb	r3, [r5, #16]
   10e70:	07db      	lsls	r3, r3, #31
   10e72:	d503      	bpl.n	10e7c <z_sys_mem_pool_block_alloc+0x15a>
   10e74:	f7ff fef9 	bl	10c6a <pool_irq_lock.isra.2.part.3>
				key = pool_irq_lock(p);
   10e78:	6178      	str	r0, [r7, #20]
   10e7a:	e7af      	b.n	10ddc <z_sys_mem_pool_block_alloc+0xba>
		return 0;
   10e7c:	6938      	ldr	r0, [r7, #16]
   10e7e:	e7fb      	b.n	10e78 <z_sys_mem_pool_block_alloc+0x156>
	for (i = alloc_l; i >= 0; i--) {
   10e80:	f108 38ff 	add.w	r8, r8, #4294967295
   10e84:	f1b8 3fff 	cmp.w	r8, #4294967295
   10e88:	f1a4 030c 	sub.w	r3, r4, #12
   10e8c:	d184      	bne.n	10d98 <z_sys_mem_pool_block_alloc+0x76>
   10e8e:	2400      	movs	r4, #0
   10e90:	e7a6      	b.n	10de0 <z_sys_mem_pool_block_alloc+0xbe>

00010e92 <z_thread_entry>:
 * This routine does not return, and is marked as such so the compiler won't
 * generate preamble code that is only used by functions that actually return.
 */
FUNC_NORETURN void z_thread_entry(k_thread_entry_t entry,
				 void *p1, void *p2, void *p3)
{
   10e92:	4604      	mov	r4, r0
   10e94:	b508      	push	{r3, lr}
   10e96:	4608      	mov	r0, r1
   10e98:	4611      	mov	r1, r2
	entry(p1, p2, p3);
   10e9a:	461a      	mov	r2, r3
   10e9c:	47a0      	blx	r4
	return z_impl_k_current_get();
   10e9e:	f7ff fc61 	bl	10764 <z_impl_k_current_get>
	z_impl_k_thread_abort(thread);
   10ea2:	f7fd f9d3 	bl	e24c <z_impl_k_thread_abort>

00010ea6 <z_arch_printk_char_out>:
}
   10ea6:	2000      	movs	r0, #0
   10ea8:	4770      	bx	lr

00010eaa <print_err>:
{
   10eaa:	b570      	push	{r4, r5, r6, lr}
   10eac:	460d      	mov	r5, r1
   10eae:	4604      	mov	r4, r0
	out('E', ctx);
   10eb0:	2045      	movs	r0, #69	; 0x45
   10eb2:	47a0      	blx	r4
	out('R', ctx);
   10eb4:	4629      	mov	r1, r5
   10eb6:	2052      	movs	r0, #82	; 0x52
   10eb8:	47a0      	blx	r4
	out('R', ctx);
   10eba:	4629      	mov	r1, r5
   10ebc:	4623      	mov	r3, r4
}
   10ebe:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	out('R', ctx);
   10ec2:	2052      	movs	r0, #82	; 0x52
   10ec4:	4718      	bx	r3

00010ec6 <z_vprintk>:
{
   10ec6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	char length_mod = 0;
   10eca:	2700      	movs	r7, #0
{
   10ecc:	4605      	mov	r5, r0
   10ece:	460e      	mov	r6, r1
   10ed0:	4692      	mov	sl, r2
   10ed2:	461c      	mov	r4, r3
	int min_width = -1;
   10ed4:	f04f 39ff 	mov.w	r9, #4294967295
	enum pad_type padding = PAD_NONE;
   10ed8:	46b8      	mov	r8, r7
	int might_format = 0; /* 1 if encountered a '%' */
   10eda:	46bb      	mov	fp, r7
{
   10edc:	b089      	sub	sp, #36	; 0x24
	while (*fmt) {
   10ede:	f89a 0000 	ldrb.w	r0, [sl]
   10ee2:	b910      	cbnz	r0, 10eea <z_vprintk+0x24>
}
   10ee4:	b009      	add	sp, #36	; 0x24
   10ee6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (!might_format) {
   10eea:	f1bb 0f00 	cmp.w	fp, #0
   10eee:	d107      	bne.n	10f00 <z_vprintk+0x3a>
			if (*fmt != '%') {
   10ef0:	2825      	cmp	r0, #37	; 0x25
   10ef2:	f000 814e 	beq.w	11192 <z_vprintk+0x2cc>
				out((int)*fmt, ctx);
   10ef6:	4631      	mov	r1, r6
   10ef8:	47a8      	blx	r5
		++fmt;
   10efa:	f10a 0a01 	add.w	sl, sl, #1
   10efe:	e7ee      	b.n	10ede <z_vprintk+0x18>
			switch (*fmt) {
   10f00:	2864      	cmp	r0, #100	; 0x64
   10f02:	d068      	beq.n	10fd6 <z_vprintk+0x110>
   10f04:	d81a      	bhi.n	10f3c <z_vprintk+0x76>
   10f06:	2839      	cmp	r0, #57	; 0x39
   10f08:	d80b      	bhi.n	10f22 <z_vprintk+0x5c>
   10f0a:	2831      	cmp	r0, #49	; 0x31
   10f0c:	d25a      	bcs.n	10fc4 <z_vprintk+0xfe>
   10f0e:	282d      	cmp	r0, #45	; 0x2d
   10f10:	f000 8146 	beq.w	111a0 <z_vprintk+0x2da>
   10f14:	2830      	cmp	r0, #48	; 0x30
   10f16:	d046      	beq.n	10fa6 <z_vprintk+0xe0>
   10f18:	2825      	cmp	r0, #37	; 0x25
   10f1a:	d108      	bne.n	10f2e <z_vprintk+0x68>
				out((int)'%', ctx);
   10f1c:	4631      	mov	r1, r6
				out((int)*fmt, ctx);
   10f1e:	47a8      	blx	r5
   10f20:	e07a      	b.n	11018 <z_vprintk+0x152>
			switch (*fmt) {
   10f22:	2858      	cmp	r0, #88	; 0x58
   10f24:	f000 80b4 	beq.w	11090 <z_vprintk+0x1ca>
   10f28:	2863      	cmp	r0, #99	; 0x63
   10f2a:	f000 812c 	beq.w	11186 <z_vprintk+0x2c0>
				out((int)'%', ctx);
   10f2e:	4631      	mov	r1, r6
   10f30:	2025      	movs	r0, #37	; 0x25
   10f32:	47a8      	blx	r5
				out((int)*fmt, ctx);
   10f34:	4631      	mov	r1, r6
   10f36:	f89a 0000 	ldrb.w	r0, [sl]
   10f3a:	e7f0      	b.n	10f1e <z_vprintk+0x58>
			switch (*fmt) {
   10f3c:	2870      	cmp	r0, #112	; 0x70
   10f3e:	f000 809d 	beq.w	1107c <z_vprintk+0x1b6>
   10f42:	d80d      	bhi.n	10f60 <z_vprintk+0x9a>
   10f44:	2869      	cmp	r0, #105	; 0x69
   10f46:	d046      	beq.n	10fd6 <z_vprintk+0x110>
   10f48:	286c      	cmp	r0, #108	; 0x6c
   10f4a:	d103      	bne.n	10f54 <z_vprintk+0x8e>
				} else if (*fmt == 'l' && length_mod == 'l') {
   10f4c:	2f6c      	cmp	r7, #108	; 0x6c
   10f4e:	d126      	bne.n	10f9e <z_vprintk+0xd8>
					length_mod = 'L';
   10f50:	274c      	movs	r7, #76	; 0x4c
   10f52:	e7d2      	b.n	10efa <z_vprintk+0x34>
			switch (*fmt) {
   10f54:	2868      	cmp	r0, #104	; 0x68
   10f56:	d1ea      	bne.n	10f2e <z_vprintk+0x68>
				if (*fmt == 'h' && length_mod == 'h') {
   10f58:	2f68      	cmp	r7, #104	; 0x68
   10f5a:	d120      	bne.n	10f9e <z_vprintk+0xd8>
					length_mod = 'H';
   10f5c:	2748      	movs	r7, #72	; 0x48
   10f5e:	e7cc      	b.n	10efa <z_vprintk+0x34>
			switch (*fmt) {
   10f60:	2875      	cmp	r0, #117	; 0x75
   10f62:	d070      	beq.n	11046 <z_vprintk+0x180>
   10f64:	d817      	bhi.n	10f96 <z_vprintk+0xd0>
   10f66:	2873      	cmp	r0, #115	; 0x73
   10f68:	d1e1      	bne.n	10f2e <z_vprintk+0x68>
				char *s = va_arg(ap, char *);
   10f6a:	6822      	ldr	r2, [r4, #0]
   10f6c:	f104 0b04 	add.w	fp, r4, #4
   10f70:	4611      	mov	r1, r2
				while (*s) {
   10f72:	460c      	mov	r4, r1
   10f74:	f814 0b01 	ldrb.w	r0, [r4], #1
   10f78:	2800      	cmp	r0, #0
   10f7a:	f040 80f9 	bne.w	11170 <z_vprintk+0x2aa>
				if (padding == PAD_SPACE_AFTER) {
   10f7e:	f1b8 0f03 	cmp.w	r8, #3
   10f82:	f040 8113 	bne.w	111ac <z_vprintk+0x2e6>
					int remaining = min_width - (s - start);
   10f86:	1a8c      	subs	r4, r1, r2
   10f88:	eba9 0404 	sub.w	r4, r9, r4
					while (remaining-- > 0) {
   10f8c:	2c00      	cmp	r4, #0
   10f8e:	f300 80f5 	bgt.w	1117c <z_vprintk+0x2b6>
				int c = va_arg(ap, int);
   10f92:	465c      	mov	r4, fp
   10f94:	e040      	b.n	11018 <z_vprintk+0x152>
			switch (*fmt) {
   10f96:	2878      	cmp	r0, #120	; 0x78
   10f98:	d07a      	beq.n	11090 <z_vprintk+0x1ca>
   10f9a:	287a      	cmp	r0, #122	; 0x7a
   10f9c:	d1c7      	bne.n	10f2e <z_vprintk+0x68>
				} else if (length_mod == 0) {
   10f9e:	2f00      	cmp	r7, #0
   10fa0:	d1c5      	bne.n	10f2e <z_vprintk+0x68>
   10fa2:	4607      	mov	r7, r0
   10fa4:	e7a9      	b.n	10efa <z_vprintk+0x34>
				if (min_width < 0 && padding == PAD_NONE) {
   10fa6:	f1b9 0f00 	cmp.w	r9, #0
   10faa:	da0e      	bge.n	10fca <z_vprintk+0x104>
   10fac:	f1b8 0f00 	cmp.w	r8, #0
   10fb0:	f000 80f9 	beq.w	111a6 <z_vprintk+0x2e0>
					min_width = *fmt - '0';
   10fb4:	f1a0 0930 	sub.w	r9, r0, #48	; 0x30
					padding = PAD_SPACE_BEFORE;
   10fb8:	f1b8 0f00 	cmp.w	r8, #0
   10fbc:	bf08      	it	eq
   10fbe:	f04f 0802 	moveq.w	r8, #2
   10fc2:	e79a      	b.n	10efa <z_vprintk+0x34>
				if (min_width < 0) {
   10fc4:	f1b9 0f00 	cmp.w	r9, #0
   10fc8:	dbf4      	blt.n	10fb4 <z_vprintk+0xee>
					min_width = 10 * min_width + *fmt - '0';
   10fca:	220a      	movs	r2, #10
   10fcc:	fb02 0909 	mla	r9, r2, r9, r0
   10fd0:	f1a9 0930 	sub.w	r9, r9, #48	; 0x30
   10fd4:	e7f0      	b.n	10fb8 <z_vprintk+0xf2>
				if (length_mod == 'z') {
   10fd6:	2f7a      	cmp	r7, #122	; 0x7a
   10fd8:	d103      	bne.n	10fe2 <z_vprintk+0x11c>
					d = va_arg(ap, int);
   10fda:	f8d4 b000 	ldr.w	fp, [r4]
   10fde:	3404      	adds	r4, #4
   10fe0:	e01e      	b.n	11020 <z_vprintk+0x15a>
				} else if (length_mod == 'l') {
   10fe2:	2f6c      	cmp	r7, #108	; 0x6c
   10fe4:	d0f9      	beq.n	10fda <z_vprintk+0x114>
				} else if (length_mod == 'L') {
   10fe6:	2f4c      	cmp	r7, #76	; 0x4c
   10fe8:	d1f7      	bne.n	10fda <z_vprintk+0x114>
					if (lld > __LONG_MAX__ ||
   10fea:	f04f 0c00 	mov.w	ip, #0
   10fee:	f04f 3bff 	mov.w	fp, #4294967295
					long long lld = va_arg(ap, long long);
   10ff2:	3407      	adds	r4, #7
   10ff4:	f024 0307 	bic.w	r3, r4, #7
   10ff8:	f103 0408 	add.w	r4, r3, #8
   10ffc:	e9d3 2300 	ldrd	r2, r3, [r3]
					if (lld > __LONG_MAX__ ||
   11000:	f112 4000 	adds.w	r0, r2, #2147483648	; 0x80000000
   11004:	f143 0100 	adc.w	r1, r3, #0
   11008:	458c      	cmp	ip, r1
   1100a:	bf08      	it	eq
   1100c:	4583      	cmpeq	fp, r0
   1100e:	d206      	bcs.n	1101e <z_vprintk+0x158>
						print_err(out, ctx);
   11010:	4631      	mov	r1, r6
   11012:	4628      	mov	r0, r5
   11014:	f7ff ff49 	bl	10eaa <print_err>
			might_format = 0;
   11018:	f04f 0b00 	mov.w	fp, #0
				break;
   1101c:	e76d      	b.n	10efa <z_vprintk+0x34>
					d = lld;
   1101e:	4693      	mov	fp, r2
				if (d < 0) {
   11020:	f1bb 0f00 	cmp.w	fp, #0
   11024:	da06      	bge.n	11034 <z_vprintk+0x16e>
					out((int)'-', ctx);
   11026:	4631      	mov	r1, r6
   11028:	202d      	movs	r0, #45	; 0x2d
   1102a:	47a8      	blx	r5
					d = -d;
   1102c:	f1cb 0b00 	rsb	fp, fp, #0
					min_width--;
   11030:	f109 39ff 	add.w	r9, r9, #4294967295
				_printk_dec_ulong(out, ctx, d, padding,
   11034:	4643      	mov	r3, r8
   11036:	465a      	mov	r2, fp
   11038:	f8cd 9000 	str.w	r9, [sp]
				_printk_dec_ulong(out, ctx, u, padding,
   1103c:	4631      	mov	r1, r6
   1103e:	4628      	mov	r0, r5
   11040:	f7fb fb86 	bl	c750 <_printk_dec_ulong>
   11044:	e7e8      	b.n	11018 <z_vprintk+0x152>
				if (length_mod == 'z') {
   11046:	2f7a      	cmp	r7, #122	; 0x7a
   11048:	d102      	bne.n	11050 <z_vprintk+0x18a>
					u = va_arg(ap, unsigned int);
   1104a:	6822      	ldr	r2, [r4, #0]
   1104c:	3404      	adds	r4, #4
   1104e:	e011      	b.n	11074 <z_vprintk+0x1ae>
				} else if (length_mod == 'l') {
   11050:	2f6c      	cmp	r7, #108	; 0x6c
   11052:	d0fa      	beq.n	1104a <z_vprintk+0x184>
				} else if (length_mod == 'L') {
   11054:	2f4c      	cmp	r7, #76	; 0x4c
   11056:	d1f8      	bne.n	1104a <z_vprintk+0x184>
					if (llu > ~0UL) {
   11058:	2100      	movs	r1, #0
   1105a:	f04f 30ff 	mov.w	r0, #4294967295
					unsigned long long llu =
   1105e:	3407      	adds	r4, #7
   11060:	f024 0307 	bic.w	r3, r4, #7
   11064:	f103 0408 	add.w	r4, r3, #8
   11068:	e9d3 2300 	ldrd	r2, r3, [r3]
					if (llu > ~0UL) {
   1106c:	4299      	cmp	r1, r3
   1106e:	bf08      	it	eq
   11070:	4290      	cmpeq	r0, r2
   11072:	d3cd      	bcc.n	11010 <z_vprintk+0x14a>
				_printk_dec_ulong(out, ctx, u, padding,
   11074:	f8cd 9000 	str.w	r9, [sp]
   11078:	4643      	mov	r3, r8
   1107a:	e7df      	b.n	1103c <z_vprintk+0x176>
				  out('0', ctx);
   1107c:	4631      	mov	r1, r6
   1107e:	2030      	movs	r0, #48	; 0x30
   11080:	47a8      	blx	r5
				  out('x', ctx);
   11082:	4631      	mov	r1, r6
   11084:	2078      	movs	r0, #120	; 0x78
   11086:	47a8      	blx	r5
				  min_width = 8;
   11088:	f04f 0908 	mov.w	r9, #8
				  padding = PAD_ZERO_BEFORE;
   1108c:	f04f 0801 	mov.w	r8, #1
				if (*fmt == 'p') {
   11090:	f89a 2000 	ldrb.w	r2, [sl]
   11094:	2a70      	cmp	r2, #112	; 0x70
   11096:	d105      	bne.n	110a4 <z_vprintk+0x1de>
					x = va_arg(ap, unsigned int);
   11098:	6823      	ldr	r3, [r4, #0]
   1109a:	3404      	adds	r4, #4
   1109c:	9304      	str	r3, [sp, #16]
   1109e:	2300      	movs	r3, #0
   110a0:	9302      	str	r3, [sp, #8]
   110a2:	e00c      	b.n	110be <z_vprintk+0x1f8>
				} else if (length_mod == 'l') {
   110a4:	2f6c      	cmp	r7, #108	; 0x6c
   110a6:	d0f7      	beq.n	11098 <z_vprintk+0x1d2>
				} else if (length_mod == 'L') {
   110a8:	2f4c      	cmp	r7, #76	; 0x4c
   110aa:	d1f5      	bne.n	11098 <z_vprintk+0x1d2>
					x = va_arg(ap, unsigned long long);
   110ac:	3407      	adds	r4, #7
   110ae:	f024 0207 	bic.w	r2, r4, #7
   110b2:	6813      	ldr	r3, [r2, #0]
   110b4:	f102 0408 	add.w	r4, r2, #8
   110b8:	9304      	str	r3, [sp, #16]
   110ba:	6853      	ldr	r3, [r2, #4]
   110bc:	9302      	str	r3, [sp, #8]
	int digits = 0;
   110be:	2200      	movs	r2, #0
	int remaining = 16; /* 16 digits max */
   110c0:	2310      	movs	r3, #16
	int digits = 0;
   110c2:	9203      	str	r2, [sp, #12]
	int found_largest_digit = 0;
   110c4:	9205      	str	r2, [sp, #20]
	int shift = sizeof(num) * 8;
   110c6:	2240      	movs	r2, #64	; 0x40
		shift -= 4;
   110c8:	3a04      	subs	r2, #4
		nibble = (num >> shift) & 0xf;
   110ca:	9902      	ldr	r1, [sp, #8]
   110cc:	9804      	ldr	r0, [sp, #16]
   110ce:	f1c2 0c20 	rsb	ip, r2, #32
   110d2:	f1a2 0e20 	sub.w	lr, r2, #32
   110d6:	40d0      	lsrs	r0, r2
   110d8:	fa01 fc0c 	lsl.w	ip, r1, ip
   110dc:	ea40 000c 	orr.w	r0, r0, ip
   110e0:	fa21 fe0e 	lsr.w	lr, r1, lr
   110e4:	ea40 000e 	orr.w	r0, r0, lr
		if (nibble != 0 || found_largest_digit != 0 || shift == 0) {
   110e8:	f010 000f 	ands.w	r0, r0, #15
   110ec:	d108      	bne.n	11100 <z_vprintk+0x23a>
   110ee:	9905      	ldr	r1, [sp, #20]
   110f0:	b901      	cbnz	r1, 110f4 <z_vprintk+0x22e>
   110f2:	bb42      	cbnz	r2, 11146 <z_vprintk+0x280>
			nibble += nibble > 9 ? 87 : 48;
   110f4:	f04f 0c30 	mov.w	ip, #48	; 0x30
   110f8:	e008      	b.n	1110c <z_vprintk+0x246>
			found_largest_digit = 1;
   110fa:	f8cd b014 	str.w	fp, [sp, #20]
   110fe:	e7e3      	b.n	110c8 <z_vprintk+0x202>
			nibble += nibble > 9 ? 87 : 48;
   11100:	2809      	cmp	r0, #9
   11102:	bf8c      	ite	hi
   11104:	f04f 0c57 	movhi.w	ip, #87	; 0x57
   11108:	f04f 0c30 	movls.w	ip, #48	; 0x30
			out((int)nibble, ctx);
   1110c:	4631      	mov	r1, r6
   1110e:	4460      	add	r0, ip
   11110:	e9cd 2305 	strd	r2, r3, [sp, #20]
   11114:	47a8      	blx	r5
			digits++;
   11116:	9b03      	ldr	r3, [sp, #12]
   11118:	3301      	adds	r3, #1
   1111a:	9303      	str	r3, [sp, #12]
	while (shift >= 4) {
   1111c:	e9dd 2305 	ldrd	r2, r3, [sp, #20]
   11120:	2a00      	cmp	r2, #0
   11122:	d1ea      	bne.n	110fa <z_vprintk+0x234>
	if (padding == PAD_SPACE_AFTER) {
   11124:	f1b8 0f03 	cmp.w	r8, #3
   11128:	f47f af76 	bne.w	11018 <z_vprintk+0x152>
		remaining = min_width * 2 - digits;
   1112c:	9b03      	ldr	r3, [sp, #12]
   1112e:	ebc3 0b49 	rsb	fp, r3, r9, lsl #1
		while (remaining-- > 0) {
   11132:	f1bb 0f00 	cmp.w	fp, #0
   11136:	f77f af6f 	ble.w	11018 <z_vprintk+0x152>
			out(' ', ctx);
   1113a:	4631      	mov	r1, r6
   1113c:	2020      	movs	r0, #32
   1113e:	47a8      	blx	r5
   11140:	f10b 3bff 	add.w	fp, fp, #4294967295
   11144:	e7f5      	b.n	11132 <z_vprintk+0x26c>
		if (remaining-- <= min_width) {
   11146:	1e59      	subs	r1, r3, #1
   11148:	4599      	cmp	r9, r3
   1114a:	9106      	str	r1, [sp, #24]
   1114c:	db07      	blt.n	1115e <z_vprintk+0x298>
			if (padding == PAD_ZERO_BEFORE) {
   1114e:	f1b8 0f01 	cmp.w	r8, #1
   11152:	d106      	bne.n	11162 <z_vprintk+0x29c>
				out('0', ctx);
   11154:	4631      	mov	r1, r6
   11156:	2030      	movs	r0, #48	; 0x30
   11158:	9207      	str	r2, [sp, #28]
				out(' ', ctx);
   1115a:	47a8      	blx	r5
   1115c:	9a07      	ldr	r2, [sp, #28]
					x = va_arg(ap, unsigned int);
   1115e:	9b06      	ldr	r3, [sp, #24]
   11160:	e7b2      	b.n	110c8 <z_vprintk+0x202>
			} else if (padding == PAD_SPACE_BEFORE) {
   11162:	f1b8 0f02 	cmp.w	r8, #2
   11166:	d1fa      	bne.n	1115e <z_vprintk+0x298>
   11168:	9207      	str	r2, [sp, #28]
				out(' ', ctx);
   1116a:	4631      	mov	r1, r6
   1116c:	2020      	movs	r0, #32
   1116e:	e7f4      	b.n	1115a <z_vprintk+0x294>
					out((int)(*s++), ctx);
   11170:	4631      	mov	r1, r6
   11172:	9202      	str	r2, [sp, #8]
   11174:	47a8      	blx	r5
   11176:	4621      	mov	r1, r4
   11178:	9a02      	ldr	r2, [sp, #8]
   1117a:	e6fa      	b.n	10f72 <z_vprintk+0xac>
						out(' ', ctx);
   1117c:	4631      	mov	r1, r6
   1117e:	2020      	movs	r0, #32
   11180:	47a8      	blx	r5
   11182:	3c01      	subs	r4, #1
   11184:	e702      	b.n	10f8c <z_vprintk+0xc6>
				out(c, ctx);
   11186:	4631      	mov	r1, r6
   11188:	6820      	ldr	r0, [r4, #0]
				int c = va_arg(ap, int);
   1118a:	f104 0b04 	add.w	fp, r4, #4
				out(c, ctx);
   1118e:	47a8      	blx	r5
   11190:	e6ff      	b.n	10f92 <z_vprintk+0xcc>
				length_mod = 0;
   11192:	465f      	mov	r7, fp
				padding = PAD_NONE;
   11194:	46d8      	mov	r8, fp
				min_width = -1;
   11196:	f04f 39ff 	mov.w	r9, #4294967295
				might_format = 1;
   1119a:	f04f 0b01 	mov.w	fp, #1
   1119e:	e6ac      	b.n	10efa <z_vprintk+0x34>
				padding = PAD_SPACE_AFTER;
   111a0:	f04f 0803 	mov.w	r8, #3
   111a4:	e6a9      	b.n	10efa <z_vprintk+0x34>
					padding = PAD_ZERO_BEFORE;
   111a6:	f04f 0801 	mov.w	r8, #1
   111aa:	e6a6      	b.n	10efa <z_vprintk+0x34>
				char *s = va_arg(ap, char *);
   111ac:	465c      	mov	r4, fp
			might_format = 0;
   111ae:	4683      	mov	fp, r0
   111b0:	e6a3      	b.n	10efa <z_vprintk+0x34>

000111b2 <printk>:
{
   111b2:	b40f      	push	{r0, r1, r2, r3}
   111b4:	b507      	push	{r0, r1, r2, lr}
   111b6:	a904      	add	r1, sp, #16
   111b8:	f851 0b04 	ldr.w	r0, [r1], #4
	va_start(ap, fmt);
   111bc:	9101      	str	r1, [sp, #4]
		vprintk(fmt, ap);
   111be:	f7fb fb19 	bl	c7f4 <vprintk>
}
   111c2:	b003      	add	sp, #12
   111c4:	f85d eb04 	ldr.w	lr, [sp], #4
   111c8:	b004      	add	sp, #16
   111ca:	4770      	bx	lr

000111cc <_ConfigAbsSyms>:
GEN_ABSOLUTE_SYM(CONFIG_OUTPUT_DISASSEMBLY, 1);
GEN_ABSOLUTE_SYM(CONFIG_OUTPUT_PRINT_MEMORY_USAGE, 1);
GEN_ABSOLUTE_SYM(CONFIG_BUILD_OUTPUT_BIN, 1);
GEN_ABSOLUTE_SYM(CONFIG_COMPAT_INCLUDES, 1);

GEN_ABS_SYM_END
   111cc:	4770      	bx	lr

000111ce <z_platform_init>:

void z_platform_init(void)
{
	SystemInit();
   111ce:	f7fe bc75 	b.w	fabc <SystemInit>

000111d2 <log_list_init>:

#include "log_list.h"

void log_list_init(struct log_list_t *list)
{
	list->tail = NULL;
   111d2:	2300      	movs	r3, #0
	list->head = NULL;
   111d4:	e9c0 3300 	strd	r3, r3, [r0]
}
   111d8:	4770      	bx	lr

000111da <log_list_add_tail>:

void log_list_add_tail(struct log_list_t *list, struct log_msg *msg)
{
	if (list->head == NULL) {
   111da:	6803      	ldr	r3, [r0, #0]
   111dc:	b923      	cbnz	r3, 111e8 <log_list_add_tail+0xe>
		list->head = msg;
   111de:	6001      	str	r1, [r0, #0]
	} else {
		list->tail->next = msg;
	}

	list->tail = msg;
	msg->next = NULL;
   111e0:	2300      	movs	r3, #0
	list->tail = msg;
   111e2:	6041      	str	r1, [r0, #4]
	msg->next = NULL;
   111e4:	600b      	str	r3, [r1, #0]
}
   111e6:	4770      	bx	lr
		list->tail->next = msg;
   111e8:	6843      	ldr	r3, [r0, #4]
   111ea:	6019      	str	r1, [r3, #0]
   111ec:	e7f8      	b.n	111e0 <log_list_add_tail+0x6>

000111ee <log_list_head_peek>:

struct log_msg *log_list_head_peek(struct log_list_t *list)
{
	return list->head;
}
   111ee:	6800      	ldr	r0, [r0, #0]
   111f0:	4770      	bx	lr

000111f2 <log_list_head_get>:

struct log_msg *log_list_head_get(struct log_list_t *list)
{
	struct log_msg *msg = list->head;
   111f2:	6803      	ldr	r3, [r0, #0]

	if (list->head != NULL) {
   111f4:	b10b      	cbz	r3, 111fa <log_list_head_get+0x8>
		list->head = list->head->next;
   111f6:	681a      	ldr	r2, [r3, #0]
   111f8:	6002      	str	r2, [r0, #0]
	}

	return msg;
}
   111fa:	4618      	mov	r0, r3
   111fc:	4770      	bx	lr

000111fe <z_log_msg_std_alloc>:
/** @brief Allocate chunk for standard log message.
 *
 *  @return Allocated chunk of NULL.
 */
static inline struct log_msg *z_log_msg_std_alloc(void)
{
   111fe:	b508      	push	{r3, lr}
	struct  log_msg *msg = (struct  log_msg *)log_msg_chunk_alloc();
   11200:	f7fb fdc8 	bl	cd94 <log_msg_chunk_alloc>

	if (msg != NULL) {
   11204:	b118      	cbz	r0, 1120e <z_log_msg_std_alloc+0x10>
		/* all fields reset to 0, reference counter to 1 */
		msg->hdr.ref_cnt = 1;
   11206:	2301      	movs	r3, #1
   11208:	6043      	str	r3, [r0, #4]
   1120a:	2300      	movs	r3, #0
   1120c:	8103      	strh	r3, [r0, #8]
		msg->hdr.params.raw = 0U;
		msg->hdr.params.std.type = LOG_MSG_TYPE_STD;
	}

	return msg;
}
   1120e:	bd08      	pop	{r3, pc}

00011210 <k_cycle_get_32_wrapper>:
#ifndef _ASMLANGUAGE
extern u32_t z_timer_cycle_get_32(void);

static inline u32_t z_arch_k_cycle_get_32(void)
{
	return z_timer_cycle_get_32();
   11210:	f7fc bbaa 	b.w	d968 <z_timer_cycle_get_32>

00011214 <dummy_timestamp>:
   11214:	2000      	movs	r0, #0
   11216:	4770      	bx	lr

00011218 <log_0>:
{
   11218:	b538      	push	{r3, r4, r5, lr}
   1121a:	4605      	mov	r5, r0
   1121c:	460c      	mov	r4, r1
 *
 *  @return Pointer to allocated head of the message or NULL.
 */
static inline struct log_msg *log_msg_create_0(const char *str)
{
	struct log_msg *msg = z_log_msg_std_alloc();
   1121e:	f7ff ffee 	bl	111fe <z_log_msg_std_alloc>

	if (msg != NULL) {
   11222:	b128      	cbz	r0, 11230 <log_0+0x18>
		msg->str = str;
   11224:	6105      	str	r5, [r0, #16]
		msg_finalize(msg, src_level);
   11226:	4621      	mov	r1, r4
}
   11228:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		msg_finalize(msg, src_level);
   1122c:	f7fb bd20 	b.w	cc70 <msg_finalize>
}
   11230:	bd38      	pop	{r3, r4, r5, pc}

00011232 <log_1>:
{
   11232:	b570      	push	{r4, r5, r6, lr}
   11234:	4604      	mov	r4, r0
   11236:	460e      	mov	r6, r1
   11238:	4615      	mov	r5, r2
 *  @return Pointer to allocated head of the message or NULL.
 */
static inline struct log_msg *log_msg_create_1(const char *str,
					       log_arg_t arg1)
{
	struct  log_msg *msg = z_log_msg_std_alloc();
   1123a:	f7ff ffe0 	bl	111fe <z_log_msg_std_alloc>

	if (msg != NULL) {
   1123e:	b158      	cbz	r0, 11258 <log_1+0x26>
		msg->str = str;
		msg->hdr.params.std.nargs = 1U;
   11240:	2201      	movs	r2, #1
		msg->str = str;
   11242:	6104      	str	r4, [r0, #16]
		msg->hdr.params.std.nargs = 1U;
   11244:	7a44      	ldrb	r4, [r0, #9]
		msg->payload.single.args[0] = arg1;
   11246:	6146      	str	r6, [r0, #20]
		msg->hdr.params.std.nargs = 1U;
   11248:	f362 1407 	bfi	r4, r2, #4, #4
   1124c:	7244      	strb	r4, [r0, #9]
		msg_finalize(msg, src_level);
   1124e:	4629      	mov	r1, r5
}
   11250:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		msg_finalize(msg, src_level);
   11254:	f7fb bd0c 	b.w	cc70 <msg_finalize>
}
   11258:	bd70      	pop	{r4, r5, r6, pc}

0001125a <log_2>:
{
   1125a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1125e:	4605      	mov	r5, r0
   11260:	4688      	mov	r8, r1
   11262:	4617      	mov	r7, r2
   11264:	461e      	mov	r6, r3
 */
static inline struct log_msg *log_msg_create_2(const char *str,
					       log_arg_t arg1,
					       log_arg_t arg2)
{
	struct  log_msg *msg = z_log_msg_std_alloc();
   11266:	f7ff ffca 	bl	111fe <z_log_msg_std_alloc>

	if (msg != NULL) {
   1126a:	b160      	cbz	r0, 11286 <log_2+0x2c>
		msg->str = str;
		msg->hdr.params.std.nargs = 2U;
   1126c:	2302      	movs	r3, #2
		msg->str = str;
   1126e:	6105      	str	r5, [r0, #16]
		msg->hdr.params.std.nargs = 2U;
   11270:	7a45      	ldrb	r5, [r0, #9]
		msg->payload.single.args[0] = arg1;
		msg->payload.single.args[1] = arg2;
   11272:	e9c0 8705 	strd	r8, r7, [r0, #20]
		msg->hdr.params.std.nargs = 2U;
   11276:	f363 1507 	bfi	r5, r3, #4, #4
   1127a:	7245      	strb	r5, [r0, #9]
		msg_finalize(msg, src_level);
   1127c:	4631      	mov	r1, r6
}
   1127e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		msg_finalize(msg, src_level);
   11282:	f7fb bcf5 	b.w	cc70 <msg_finalize>
}
   11286:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0001128a <log_3>:
{
   1128a:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1128e:	4605      	mov	r5, r0
   11290:	4689      	mov	r9, r1
   11292:	4690      	mov	r8, r2
   11294:	461f      	mov	r7, r3
   11296:	f8bd 6020 	ldrh.w	r6, [sp, #32]
static inline struct log_msg *log_msg_create_3(const char *str,
					       log_arg_t arg1,
					       log_arg_t arg2,
					       log_arg_t arg3)
{
	struct  log_msg *msg = z_log_msg_std_alloc();
   1129a:	f7ff ffb0 	bl	111fe <z_log_msg_std_alloc>

	if (msg != NULL) {
   1129e:	b168      	cbz	r0, 112bc <log_3+0x32>
		msg->str = str;
		msg->hdr.params.std.nargs = 3U;
   112a0:	2303      	movs	r3, #3
		msg->str = str;
   112a2:	6105      	str	r5, [r0, #16]
		msg->hdr.params.std.nargs = 3U;
   112a4:	7a45      	ldrb	r5, [r0, #9]
		msg->payload.single.args[0] = arg1;
		msg->payload.single.args[1] = arg2;
   112a6:	e9c0 9805 	strd	r9, r8, [r0, #20]
		msg->hdr.params.std.nargs = 3U;
   112aa:	f363 1507 	bfi	r5, r3, #4, #4
   112ae:	7245      	strb	r5, [r0, #9]
		msg->payload.single.args[2] = arg3;
   112b0:	61c7      	str	r7, [r0, #28]
		msg_finalize(msg, src_level);
   112b2:	4631      	mov	r1, r6
}
   112b4:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
		msg_finalize(msg, src_level);
   112b8:	f7fb bcda 	b.w	cc70 <msg_finalize>
}
   112bc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

000112c0 <log_n>:
{
   112c0:	b510      	push	{r4, lr}
   112c2:	461c      	mov	r4, r3
		struct log_msg *msg = log_msg_create_n(str, args, narg);
   112c4:	f000 f893 	bl	113ee <log_msg_create_n>
		if (msg == NULL) {
   112c8:	b120      	cbz	r0, 112d4 <log_n+0x14>
		msg_finalize(msg, src_level);
   112ca:	4621      	mov	r1, r4
}
   112cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		msg_finalize(msg, src_level);
   112d0:	f7fb bcce 	b.w	cc70 <msg_finalize>
}
   112d4:	bd10      	pop	{r4, pc}

000112d6 <log_msg_hexdump_data_op>:
static void log_msg_hexdump_data_op(struct log_msg *msg,
				    u8_t *data,
				    size_t *length,
				    size_t offset,
				    bool put_op)
{
   112d6:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   112da:	461c      	mov	r4, r3
	u32_t available_len = msg->hdr.params.hexdump.length;
   112dc:	8903      	ldrh	r3, [r0, #8]
{
   112de:	460e      	mov	r6, r1
	u32_t available_len = msg->hdr.params.hexdump.length;
   112e0:	089b      	lsrs	r3, r3, #2
	u8_t *head_data;
	u32_t chunk_len;
	u32_t req_len;
	u32_t cpy_len;

	if (offset >= available_len) {
   112e2:	42a3      	cmp	r3, r4
{
   112e4:	f89d 7020 	ldrb.w	r7, [sp, #32]
	if (offset >= available_len) {
   112e8:	d803      	bhi.n	112f2 <log_msg_hexdump_data_op+0x1c>
		*length = 0;
   112ea:	2300      	movs	r3, #0
   112ec:	6013      	str	r3, [r2, #0]
		offset = 0;
		cont = cont->next;
		req_len -= cpy_len;
		data += cpy_len;
	}
}
   112ee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	if ((offset + *length) > available_len) {
   112f2:	6811      	ldr	r1, [r2, #0]
   112f4:	4421      	add	r1, r4
   112f6:	4299      	cmp	r1, r3
		*length = available_len - offset;
   112f8:	bf84      	itt	hi
   112fa:	1b19      	subhi	r1, r3, r4
   112fc:	6011      	strhi	r1, [r2, #0]
	if (available_len > LOG_MSG_HEXDUMP_BYTES_SINGLE_CHUNK) {
   112fe:	2b0c      	cmp	r3, #12
	req_len = *length;
   11300:	f8d2 9000 	ldr.w	r9, [r2]
	if (available_len > LOG_MSG_HEXDUMP_BYTES_SINGLE_CHUNK) {
   11304:	d928      	bls.n	11358 <log_msg_hexdump_data_op+0x82>
	if (offset < chunk_len) {
   11306:	2c07      	cmp	r4, #7
		cont = msg->payload.ext.next;
   11308:	f8d0 8014 	ldr.w	r8, [r0, #20]
	if (offset < chunk_len) {
   1130c:	d82b      	bhi.n	11366 <log_msg_hexdump_data_op+0x90>
		chunk_len = LOG_MSG_HEXDUMP_BYTES_HEAD_CHUNK;
   1130e:	2308      	movs	r3, #8
		head_data = msg->payload.ext.data.bytes;
   11310:	3018      	adds	r0, #24
		cpy_len = req_len > chunk_len ? chunk_len : req_len;
   11312:	454b      	cmp	r3, r9
   11314:	bf28      	it	cs
   11316:	464b      	movcs	r3, r9
   11318:	4420      	add	r0, r4
   1131a:	461d      	mov	r5, r3
			(void)memcpy(&head_data[offset], data, cpy_len);
   1131c:	461a      	mov	r2, r3
		if (put_op) {
   1131e:	b1ff      	cbz	r7, 11360 <log_msg_hexdump_data_op+0x8a>
			(void)memcpy(&head_data[offset], data, cpy_len);
   11320:	4631      	mov	r1, r6
			(void)memcpy(data, &head_data[offset], cpy_len);
   11322:	f000 fbe7 	bl	11af4 <memcpy>
		req_len -= cpy_len;
   11326:	eba9 0905 	sub.w	r9, r9, r5
		data += cpy_len;
   1132a:	442e      	add	r6, r5
	while (req_len > 0) {
   1132c:	f1b9 0f00 	cmp.w	r9, #0
   11330:	d0dd      	beq.n	112ee <log_msg_hexdump_data_op+0x18>
		chunk_len = HEXDUMP_BYTES_CONT_MSG - offset;
   11332:	f1c4 051c 	rsb	r5, r4, #28
		cpy_len = req_len > chunk_len ? chunk_len : req_len;
   11336:	454d      	cmp	r5, r9
   11338:	bf28      	it	cs
   1133a:	464d      	movcs	r5, r9
   1133c:	1d20      	adds	r0, r4, #4
   1133e:	4440      	add	r0, r8
			(void)memcpy(&cont->payload.bytes[offset],
   11340:	462a      	mov	r2, r5
		if (put_op) {
   11342:	b1bf      	cbz	r7, 11374 <log_msg_hexdump_data_op+0x9e>
			(void)memcpy(&cont->payload.bytes[offset],
   11344:	4631      	mov	r1, r6
			(void)memcpy(data, &cont->payload.bytes[offset],
   11346:	f000 fbd5 	bl	11af4 <memcpy>
		req_len -= cpy_len;
   1134a:	eba9 0905 	sub.w	r9, r9, r5
		cont = cont->next;
   1134e:	f8d8 8000 	ldr.w	r8, [r8]
		data += cpy_len;
   11352:	442e      	add	r6, r5
		offset = 0;
   11354:	2400      	movs	r4, #0
   11356:	e7e9      	b.n	1132c <log_msg_hexdump_data_op+0x56>
		head_data = msg->payload.single.bytes;
   11358:	3014      	adds	r0, #20
	struct log_msg_cont *cont = NULL;
   1135a:	f04f 0800 	mov.w	r8, #0
   1135e:	e7d8      	b.n	11312 <log_msg_hexdump_data_op+0x3c>
			(void)memcpy(data, &head_data[offset], cpy_len);
   11360:	4601      	mov	r1, r0
   11362:	4630      	mov	r0, r6
   11364:	e7dd      	b.n	11322 <log_msg_hexdump_data_op+0x4c>
		offset -= chunk_len;
   11366:	3c08      	subs	r4, #8
		while (offset >= chunk_len) {
   11368:	2c1b      	cmp	r4, #27
   1136a:	d9df      	bls.n	1132c <log_msg_hexdump_data_op+0x56>
			cont = cont->next;
   1136c:	f8d8 8000 	ldr.w	r8, [r8]
			offset -= chunk_len;
   11370:	3c1c      	subs	r4, #28
   11372:	e7f9      	b.n	11368 <log_msg_hexdump_data_op+0x92>
			(void)memcpy(data, &cont->payload.bytes[offset],
   11374:	4601      	mov	r1, r0
   11376:	4630      	mov	r0, r6
   11378:	e7e5      	b.n	11346 <log_msg_hexdump_data_op+0x70>

0001137a <log_msg_get>:
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
   1137a:	3004      	adds	r0, #4
   1137c:	e8d0 3fef 	ldaex	r3, [r0]
   11380:	3301      	adds	r3, #1
   11382:	e8c0 3fe2 	stlex	r2, r3, [r0]
   11386:	2a00      	cmp	r2, #0
   11388:	d1f8      	bne.n	1137c <log_msg_get+0x2>
}
   1138a:	4770      	bx	lr

0001138c <log_msg_nargs_get>:
	return msg->hdr.params.std.nargs;
   1138c:	7a40      	ldrb	r0, [r0, #9]
}
   1138e:	0900      	lsrs	r0, r0, #4
   11390:	4770      	bx	lr

00011392 <log_msg_arg_get>:
	if (arg_idx >= msg->hdr.params.std.nargs) {
   11392:	7a43      	ldrb	r3, [r0, #9]
   11394:	091b      	lsrs	r3, r3, #4
   11396:	428b      	cmp	r3, r1
   11398:	d916      	bls.n	113c8 <log_msg_arg_get+0x36>
	if (msg->hdr.params.std.nargs <= LOG_MSG_NARGS_SINGLE_CHUNK) {
   1139a:	2b03      	cmp	r3, #3
   1139c:	d803      	bhi.n	113a6 <log_msg_arg_get+0x14>
		arg = msg->payload.single.args[arg_idx];
   1139e:	eb00 0181 	add.w	r1, r0, r1, lsl #2
   113a2:	6948      	ldr	r0, [r1, #20]
   113a4:	4770      	bx	lr
	if (arg_idx < LOG_MSG_NARGS_HEAD_CHUNK) {
   113a6:	2901      	cmp	r1, #1
   113a8:	d803      	bhi.n	113b2 <log_msg_arg_get+0x20>
		return msg->payload.ext.data.args[arg_idx];
   113aa:	eb00 0181 	add.w	r1, r0, r1, lsl #2
   113ae:	6988      	ldr	r0, [r1, #24]
   113b0:	4770      	bx	lr
	cont = msg->payload.ext.next;
   113b2:	6943      	ldr	r3, [r0, #20]
	arg_idx -= LOG_MSG_NARGS_HEAD_CHUNK;
   113b4:	3902      	subs	r1, #2
	while (arg_idx >= ARGS_CONT_MSG) {
   113b6:	2906      	cmp	r1, #6
   113b8:	d803      	bhi.n	113c2 <log_msg_arg_get+0x30>
	return cont->payload.args[arg_idx];
   113ba:	eb03 0181 	add.w	r1, r3, r1, lsl #2
   113be:	6848      	ldr	r0, [r1, #4]
   113c0:	4770      	bx	lr
		arg_idx -= ARGS_CONT_MSG;
   113c2:	3907      	subs	r1, #7
		cont = cont->next;
   113c4:	681b      	ldr	r3, [r3, #0]
   113c6:	e7f6      	b.n	113b6 <log_msg_arg_get+0x24>
		return 0;
   113c8:	2000      	movs	r0, #0
}
   113ca:	4770      	bx	lr

000113cc <log_msg_put>:
{
   113cc:	4603      	mov	r3, r0
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
   113ce:	1d02      	adds	r2, r0, #4
   113d0:	e8d2 1fef 	ldaex	r1, [r2]
   113d4:	3901      	subs	r1, #1
   113d6:	e8c2 1fec 	stlex	ip, r1, [r2]
   113da:	f1bc 0f00 	cmp.w	ip, #0
   113de:	d1f7      	bne.n	113d0 <log_msg_put+0x4>
	if (msg->hdr.ref_cnt == 0) {
   113e0:	685b      	ldr	r3, [r3, #4]
   113e2:	b90b      	cbnz	r3, 113e8 <log_msg_put+0x1c>
		msg_free(msg);
   113e4:	f7fb bce8 	b.w	cdb8 <msg_free>
}
   113e8:	4770      	bx	lr

000113ea <log_msg_str_get>:
}
   113ea:	6900      	ldr	r0, [r0, #16]
   113ec:	4770      	bx	lr

000113ee <log_msg_create_n>:
{
   113ee:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   113f2:	4682      	mov	sl, r0
   113f4:	4688      	mov	r8, r1
   113f6:	4615      	mov	r5, r2
	struct  log_msg *msg = (struct  log_msg *)log_msg_chunk_alloc();
   113f8:	f7fb fccc 	bl	cd94 <log_msg_chunk_alloc>
	if (msg != NULL) {
   113fc:	4604      	mov	r4, r0
   113fe:	b360      	cbz	r0, 1145a <log_msg_create_n+0x6c>
		msg->hdr.ref_cnt = 1;
   11400:	2301      	movs	r3, #1
   11402:	2600      	movs	r6, #0
	if ((msg == NULL) || nargs <= LOG_MSG_NARGS_SINGLE_CHUNK) {
   11404:	2d03      	cmp	r5, #3
   11406:	6043      	str	r3, [r0, #4]
   11408:	8106      	strh	r6, [r0, #8]
   1140a:	d90f      	bls.n	1142c <log_msg_create_n+0x3e>
	msg->hdr.params.std.nargs = 0U;
   1140c:	7a42      	ldrb	r2, [r0, #9]
	n -= LOG_MSG_NARGS_HEAD_CHUNK;
   1140e:	f1a5 0902 	sub.w	r9, r5, #2
	msg->hdr.params.std.nargs = 0U;
   11412:	f366 1207 	bfi	r2, r6, #4, #4
   11416:	7242      	strb	r2, [r0, #9]
	msg->hdr.params.generic.ext = 1;
   11418:	7a02      	ldrb	r2, [r0, #8]
	next = &msg->payload.ext.next;
   1141a:	f100 0b14 	add.w	fp, r0, #20
	msg->hdr.params.generic.ext = 1;
   1141e:	f042 0202 	orr.w	r2, r2, #2
   11422:	7202      	strb	r2, [r0, #8]
	*next = NULL;
   11424:	6146      	str	r6, [r0, #20]
	while (n > 0) {
   11426:	f1b9 0f00 	cmp.w	r9, #0
   1142a:	dc0e      	bgt.n	1144a <log_msg_create_n+0x5c>
		msg->hdr.params.std.nargs = nargs;
   1142c:	7a63      	ldrb	r3, [r4, #9]
	if (nargs > LOG_MSG_NARGS_SINGLE_CHUNK) {
   1142e:	2d03      	cmp	r5, #3
		msg->hdr.params.std.nargs = nargs;
   11430:	f365 1307 	bfi	r3, r5, #4, #4
		msg->str = str;
   11434:	f8c4 a010 	str.w	sl, [r4, #16]
		msg->hdr.params.std.nargs = nargs;
   11438:	7263      	strb	r3, [r4, #9]
	if (nargs > LOG_MSG_NARGS_SINGLE_CHUNK) {
   1143a:	d818      	bhi.n	1146e <log_msg_create_n+0x80>
		(void)memcpy(msg->payload.single.args, args,
   1143c:	00aa      	lsls	r2, r5, #2
   1143e:	4641      	mov	r1, r8
   11440:	f104 0014 	add.w	r0, r4, #20
   11444:	f000 fb56 	bl	11af4 <memcpy>
   11448:	e007      	b.n	1145a <log_msg_create_n+0x6c>
		cont = (struct log_msg_cont *)log_msg_chunk_alloc();
   1144a:	f7fb fca3 	bl	cd94 <log_msg_chunk_alloc>
		if (cont == NULL) {
   1144e:	4607      	mov	r7, r0
   11450:	b930      	cbnz	r0, 11460 <log_msg_create_n+0x72>
			msg_free(msg);
   11452:	4620      	mov	r0, r4
   11454:	f7fb fcb0 	bl	cdb8 <msg_free>
			return NULL;
   11458:	463c      	mov	r4, r7
}
   1145a:	4620      	mov	r0, r4
   1145c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		*next = cont;
   11460:	f8cb 0000 	str.w	r0, [fp]
   11464:	f1a9 0907 	sub.w	r9, r9, #7
		cont->next = NULL;
   11468:	6006      	str	r6, [r0, #0]
		next = &cont->next;
   1146a:	4683      	mov	fp, r0
   1146c:	e7db      	b.n	11426 <log_msg_create_n+0x38>
		(void)memcpy(msg->payload.ext.data.args, args,
   1146e:	4641      	mov	r1, r8
   11470:	2208      	movs	r2, #8
   11472:	f104 0018 	add.w	r0, r4, #24
	struct log_msg_cont *cont = msg->payload.ext.next;
   11476:	6967      	ldr	r7, [r4, #20]
		(void)memcpy(msg->payload.ext.data.args, args,
   11478:	f000 fb3c 	bl	11af4 <memcpy>
		nargs -= LOG_MSG_NARGS_HEAD_CHUNK;
   1147c:	3d02      	subs	r5, #2
		args += LOG_MSG_NARGS_HEAD_CHUNK;
   1147e:	f108 0808 	add.w	r8, r8, #8
		u32_t cpy_args = MIN(nargs, ARGS_CONT_MSG);
   11482:	2d07      	cmp	r5, #7
   11484:	462e      	mov	r6, r5
   11486:	bf28      	it	cs
   11488:	2607      	movcs	r6, #7
		(void)memcpy(cont->payload.args, args,
   1148a:	ea4f 0986 	mov.w	r9, r6, lsl #2
   1148e:	4641      	mov	r1, r8
   11490:	1d38      	adds	r0, r7, #4
   11492:	464a      	mov	r2, r9
   11494:	f000 fb2e 	bl	11af4 <memcpy>
	while (nargs != 0U) {
   11498:	1bad      	subs	r5, r5, r6
		args += cpy_args;
   1149a:	44c8      	add	r8, r9
		cont = cont->next;
   1149c:	683f      	ldr	r7, [r7, #0]
	while (nargs != 0U) {
   1149e:	d1f0      	bne.n	11482 <log_msg_create_n+0x94>
   114a0:	e7db      	b.n	1145a <log_msg_create_n+0x6c>

000114a2 <log_msg_hexdump_data_get>:

void log_msg_hexdump_data_get(struct log_msg *msg,
			      u8_t *data,
			      size_t *length,
			      size_t offset)
{
   114a2:	b513      	push	{r0, r1, r4, lr}
	log_msg_hexdump_data_op(msg, data, length, offset, false);
   114a4:	2400      	movs	r4, #0
   114a6:	9400      	str	r4, [sp, #0]
   114a8:	f7ff ff15 	bl	112d6 <log_msg_hexdump_data_op>
}
   114ac:	b002      	add	sp, #8
   114ae:	bd10      	pop	{r4, pc}

000114b0 <buffer_write>:
{
   114b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   114b2:	4606      	mov	r6, r0
   114b4:	460d      	mov	r5, r1
   114b6:	4614      	mov	r4, r2
   114b8:	461f      	mov	r7, r3
		processed = outf(buf, len, ctx);
   114ba:	4621      	mov	r1, r4
   114bc:	4628      	mov	r0, r5
   114be:	463a      	mov	r2, r7
   114c0:	47b0      	blx	r6
	} while (len != 0);
   114c2:	1a24      	subs	r4, r4, r0
		buf += processed;
   114c4:	4405      	add	r5, r0
	} while (len != 0);
   114c6:	d1f8      	bne.n	114ba <buffer_write+0xa>
}
   114c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000114ca <std_print>:
{
   114ca:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   114ce:	b08e      	sub	sp, #56	; 0x38
   114d0:	af0e      	add	r7, sp, #56	; 0x38
   114d2:	4681      	mov	r9, r0
   114d4:	460d      	mov	r5, r1
	const char *str = log_msg_str_get(msg);
   114d6:	f7ff ff88 	bl	113ea <log_msg_str_get>
   114da:	4606      	mov	r6, r0
	u32_t nargs = log_msg_nargs_get(msg);
   114dc:	4648      	mov	r0, r9
   114de:	f7ff ff55 	bl	1138c <log_msg_nargs_get>
	for (i = 0; i < nargs; i++) {
   114e2:	f04f 0800 	mov.w	r8, #0
	u32_t nargs = log_msg_nargs_get(msg);
   114e6:	4682      	mov	sl, r0
	u32_t *args = alloca(sizeof(u32_t)*nargs);
   114e8:	0083      	lsls	r3, r0, #2
   114ea:	330e      	adds	r3, #14
   114ec:	f023 0307 	bic.w	r3, r3, #7
   114f0:	ebad 0d03 	sub.w	sp, sp, r3
   114f4:	ac0e      	add	r4, sp, #56	; 0x38
	for (i = 0; i < nargs; i++) {
   114f6:	45d0      	cmp	r8, sl
   114f8:	d116      	bne.n	11528 <std_print+0x5e>
	switch (log_msg_nargs_get(msg)) {
   114fa:	4648      	mov	r0, r9
   114fc:	f7ff ff46 	bl	1138c <log_msg_nargs_get>
   11500:	280f      	cmp	r0, #15
   11502:	d81e      	bhi.n	11542 <std_print+0x78>
   11504:	e8df f010 	tbh	[pc, r0, lsl #1]
   11508:	00200019 	.word	0x00200019
   1150c:	002d0026 	.word	0x002d0026
   11510:	00410036 	.word	0x00410036
   11514:	005d004e 	.word	0x005d004e
   11518:	0081006e 	.word	0x0081006e
   1151c:	00ad0096 	.word	0x00ad0096
   11520:	00e100c6 	.word	0x00e100c6
   11524:	011d00fe 	.word	0x011d00fe
		args[i] = log_msg_arg_get(msg, i);
   11528:	4641      	mov	r1, r8
   1152a:	4648      	mov	r0, r9
   1152c:	f7ff ff31 	bl	11392 <log_msg_arg_get>
   11530:	f844 0028 	str.w	r0, [r4, r8, lsl #2]
	for (i = 0; i < nargs; i++) {
   11534:	f108 0801 	add.w	r8, r8, #1
   11538:	e7dd      	b.n	114f6 <std_print+0x2c>
		print_formatted(log_output, str);
   1153a:	4631      	mov	r1, r6
   1153c:	4628      	mov	r0, r5
   1153e:	f7fb fc6f 	bl	ce20 <print_formatted>
}
   11542:	46bd      	mov	sp, r7
   11544:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		print_formatted(log_output, str, args[0]);
   11548:	6822      	ldr	r2, [r4, #0]
   1154a:	4631      	mov	r1, r6
   1154c:	4628      	mov	r0, r5
   1154e:	f7fb fc67 	bl	ce20 <print_formatted>
		break;
   11552:	e7f6      	b.n	11542 <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1]);
   11554:	e9d4 2300 	ldrd	r2, r3, [r4]
   11558:	4631      	mov	r1, r6
   1155a:	4628      	mov	r0, r5
   1155c:	f7fb fc60 	bl	ce20 <print_formatted>
		break;
   11560:	e7ef      	b.n	11542 <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2]);
   11562:	68a3      	ldr	r3, [r4, #8]
   11564:	4631      	mov	r1, r6
   11566:	9300      	str	r3, [sp, #0]
   11568:	e9d4 2300 	ldrd	r2, r3, [r4]
   1156c:	4628      	mov	r0, r5
   1156e:	f7fb fc57 	bl	ce20 <print_formatted>
		break;
   11572:	e7e6      	b.n	11542 <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2],
   11574:	68e3      	ldr	r3, [r4, #12]
   11576:	4631      	mov	r1, r6
   11578:	9301      	str	r3, [sp, #4]
   1157a:	68a3      	ldr	r3, [r4, #8]
   1157c:	4628      	mov	r0, r5
   1157e:	9300      	str	r3, [sp, #0]
   11580:	e9d4 2300 	ldrd	r2, r3, [r4]
   11584:	f7fb fc4c 	bl	ce20 <print_formatted>
		break;
   11588:	e7db      	b.n	11542 <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2],
   1158a:	6923      	ldr	r3, [r4, #16]
   1158c:	4631      	mov	r1, r6
   1158e:	9302      	str	r3, [sp, #8]
   11590:	68e3      	ldr	r3, [r4, #12]
   11592:	4628      	mov	r0, r5
   11594:	9301      	str	r3, [sp, #4]
   11596:	68a3      	ldr	r3, [r4, #8]
   11598:	9300      	str	r3, [sp, #0]
   1159a:	e9d4 2300 	ldrd	r2, r3, [r4]
   1159e:	f7fb fc3f 	bl	ce20 <print_formatted>
		break;
   115a2:	e7ce      	b.n	11542 <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2],
   115a4:	6963      	ldr	r3, [r4, #20]
   115a6:	4631      	mov	r1, r6
   115a8:	9303      	str	r3, [sp, #12]
   115aa:	6923      	ldr	r3, [r4, #16]
   115ac:	4628      	mov	r0, r5
   115ae:	9302      	str	r3, [sp, #8]
   115b0:	68e3      	ldr	r3, [r4, #12]
   115b2:	9301      	str	r3, [sp, #4]
   115b4:	68a3      	ldr	r3, [r4, #8]
   115b6:	9300      	str	r3, [sp, #0]
   115b8:	e9d4 2300 	ldrd	r2, r3, [r4]
   115bc:	f7fb fc30 	bl	ce20 <print_formatted>
		break;
   115c0:	e7bf      	b.n	11542 <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2],
   115c2:	69a3      	ldr	r3, [r4, #24]
   115c4:	4631      	mov	r1, r6
   115c6:	9304      	str	r3, [sp, #16]
   115c8:	6963      	ldr	r3, [r4, #20]
   115ca:	4628      	mov	r0, r5
   115cc:	9303      	str	r3, [sp, #12]
   115ce:	6923      	ldr	r3, [r4, #16]
   115d0:	9302      	str	r3, [sp, #8]
   115d2:	68e3      	ldr	r3, [r4, #12]
   115d4:	9301      	str	r3, [sp, #4]
   115d6:	68a3      	ldr	r3, [r4, #8]
   115d8:	9300      	str	r3, [sp, #0]
   115da:	e9d4 2300 	ldrd	r2, r3, [r4]
   115de:	f7fb fc1f 	bl	ce20 <print_formatted>
		break;
   115e2:	e7ae      	b.n	11542 <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2],
   115e4:	69e3      	ldr	r3, [r4, #28]
   115e6:	4631      	mov	r1, r6
   115e8:	9305      	str	r3, [sp, #20]
   115ea:	69a3      	ldr	r3, [r4, #24]
   115ec:	4628      	mov	r0, r5
   115ee:	9304      	str	r3, [sp, #16]
   115f0:	6963      	ldr	r3, [r4, #20]
   115f2:	9303      	str	r3, [sp, #12]
   115f4:	6923      	ldr	r3, [r4, #16]
   115f6:	9302      	str	r3, [sp, #8]
   115f8:	68e3      	ldr	r3, [r4, #12]
   115fa:	9301      	str	r3, [sp, #4]
   115fc:	68a3      	ldr	r3, [r4, #8]
   115fe:	9300      	str	r3, [sp, #0]
   11600:	e9d4 2300 	ldrd	r2, r3, [r4]
   11604:	f7fb fc0c 	bl	ce20 <print_formatted>
		break;
   11608:	e79b      	b.n	11542 <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2],
   1160a:	6a23      	ldr	r3, [r4, #32]
   1160c:	4631      	mov	r1, r6
   1160e:	9306      	str	r3, [sp, #24]
   11610:	69e3      	ldr	r3, [r4, #28]
   11612:	4628      	mov	r0, r5
   11614:	9305      	str	r3, [sp, #20]
   11616:	69a3      	ldr	r3, [r4, #24]
   11618:	9304      	str	r3, [sp, #16]
   1161a:	6963      	ldr	r3, [r4, #20]
   1161c:	9303      	str	r3, [sp, #12]
   1161e:	6923      	ldr	r3, [r4, #16]
   11620:	9302      	str	r3, [sp, #8]
   11622:	68e3      	ldr	r3, [r4, #12]
   11624:	9301      	str	r3, [sp, #4]
   11626:	68a3      	ldr	r3, [r4, #8]
   11628:	9300      	str	r3, [sp, #0]
   1162a:	e9d4 2300 	ldrd	r2, r3, [r4]
   1162e:	f7fb fbf7 	bl	ce20 <print_formatted>
		break;
   11632:	e786      	b.n	11542 <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2],
   11634:	6a63      	ldr	r3, [r4, #36]	; 0x24
   11636:	4631      	mov	r1, r6
   11638:	9307      	str	r3, [sp, #28]
   1163a:	6a23      	ldr	r3, [r4, #32]
   1163c:	4628      	mov	r0, r5
   1163e:	9306      	str	r3, [sp, #24]
   11640:	69e3      	ldr	r3, [r4, #28]
   11642:	9305      	str	r3, [sp, #20]
   11644:	69a3      	ldr	r3, [r4, #24]
   11646:	9304      	str	r3, [sp, #16]
   11648:	6963      	ldr	r3, [r4, #20]
   1164a:	9303      	str	r3, [sp, #12]
   1164c:	6923      	ldr	r3, [r4, #16]
   1164e:	9302      	str	r3, [sp, #8]
   11650:	68e3      	ldr	r3, [r4, #12]
   11652:	9301      	str	r3, [sp, #4]
   11654:	68a3      	ldr	r3, [r4, #8]
   11656:	9300      	str	r3, [sp, #0]
   11658:	e9d4 2300 	ldrd	r2, r3, [r4]
   1165c:	f7fb fbe0 	bl	ce20 <print_formatted>
		break;
   11660:	e76f      	b.n	11542 <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2],
   11662:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   11664:	4631      	mov	r1, r6
   11666:	9308      	str	r3, [sp, #32]
   11668:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1166a:	4628      	mov	r0, r5
   1166c:	9307      	str	r3, [sp, #28]
   1166e:	6a23      	ldr	r3, [r4, #32]
   11670:	9306      	str	r3, [sp, #24]
   11672:	69e3      	ldr	r3, [r4, #28]
   11674:	9305      	str	r3, [sp, #20]
   11676:	69a3      	ldr	r3, [r4, #24]
   11678:	9304      	str	r3, [sp, #16]
   1167a:	6963      	ldr	r3, [r4, #20]
   1167c:	9303      	str	r3, [sp, #12]
   1167e:	6923      	ldr	r3, [r4, #16]
   11680:	9302      	str	r3, [sp, #8]
   11682:	68e3      	ldr	r3, [r4, #12]
   11684:	9301      	str	r3, [sp, #4]
   11686:	68a3      	ldr	r3, [r4, #8]
   11688:	9300      	str	r3, [sp, #0]
   1168a:	e9d4 2300 	ldrd	r2, r3, [r4]
   1168e:	f7fb fbc7 	bl	ce20 <print_formatted>
		break;
   11692:	e756      	b.n	11542 <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2],
   11694:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   11696:	4631      	mov	r1, r6
   11698:	9309      	str	r3, [sp, #36]	; 0x24
   1169a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   1169c:	4628      	mov	r0, r5
   1169e:	9308      	str	r3, [sp, #32]
   116a0:	6a63      	ldr	r3, [r4, #36]	; 0x24
   116a2:	9307      	str	r3, [sp, #28]
   116a4:	6a23      	ldr	r3, [r4, #32]
   116a6:	9306      	str	r3, [sp, #24]
   116a8:	69e3      	ldr	r3, [r4, #28]
   116aa:	9305      	str	r3, [sp, #20]
   116ac:	69a3      	ldr	r3, [r4, #24]
   116ae:	9304      	str	r3, [sp, #16]
   116b0:	6963      	ldr	r3, [r4, #20]
   116b2:	9303      	str	r3, [sp, #12]
   116b4:	6923      	ldr	r3, [r4, #16]
   116b6:	9302      	str	r3, [sp, #8]
   116b8:	68e3      	ldr	r3, [r4, #12]
   116ba:	9301      	str	r3, [sp, #4]
   116bc:	68a3      	ldr	r3, [r4, #8]
   116be:	9300      	str	r3, [sp, #0]
   116c0:	e9d4 2300 	ldrd	r2, r3, [r4]
   116c4:	f7fb fbac 	bl	ce20 <print_formatted>
		break;
   116c8:	e73b      	b.n	11542 <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2],
   116ca:	6b23      	ldr	r3, [r4, #48]	; 0x30
   116cc:	4631      	mov	r1, r6
   116ce:	930a      	str	r3, [sp, #40]	; 0x28
   116d0:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   116d2:	4628      	mov	r0, r5
   116d4:	9309      	str	r3, [sp, #36]	; 0x24
   116d6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   116d8:	9308      	str	r3, [sp, #32]
   116da:	6a63      	ldr	r3, [r4, #36]	; 0x24
   116dc:	9307      	str	r3, [sp, #28]
   116de:	6a23      	ldr	r3, [r4, #32]
   116e0:	9306      	str	r3, [sp, #24]
   116e2:	69e3      	ldr	r3, [r4, #28]
   116e4:	9305      	str	r3, [sp, #20]
   116e6:	69a3      	ldr	r3, [r4, #24]
   116e8:	9304      	str	r3, [sp, #16]
   116ea:	6963      	ldr	r3, [r4, #20]
   116ec:	9303      	str	r3, [sp, #12]
   116ee:	6923      	ldr	r3, [r4, #16]
   116f0:	9302      	str	r3, [sp, #8]
   116f2:	68e3      	ldr	r3, [r4, #12]
   116f4:	9301      	str	r3, [sp, #4]
   116f6:	68a3      	ldr	r3, [r4, #8]
   116f8:	9300      	str	r3, [sp, #0]
   116fa:	e9d4 2300 	ldrd	r2, r3, [r4]
   116fe:	f7fb fb8f 	bl	ce20 <print_formatted>
		break;
   11702:	e71e      	b.n	11542 <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2],
   11704:	6b63      	ldr	r3, [r4, #52]	; 0x34
   11706:	4631      	mov	r1, r6
   11708:	930b      	str	r3, [sp, #44]	; 0x2c
   1170a:	6b23      	ldr	r3, [r4, #48]	; 0x30
   1170c:	4628      	mov	r0, r5
   1170e:	930a      	str	r3, [sp, #40]	; 0x28
   11710:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   11712:	9309      	str	r3, [sp, #36]	; 0x24
   11714:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   11716:	9308      	str	r3, [sp, #32]
   11718:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1171a:	9307      	str	r3, [sp, #28]
   1171c:	6a23      	ldr	r3, [r4, #32]
   1171e:	9306      	str	r3, [sp, #24]
   11720:	69e3      	ldr	r3, [r4, #28]
   11722:	9305      	str	r3, [sp, #20]
   11724:	69a3      	ldr	r3, [r4, #24]
   11726:	9304      	str	r3, [sp, #16]
   11728:	6963      	ldr	r3, [r4, #20]
   1172a:	9303      	str	r3, [sp, #12]
   1172c:	6923      	ldr	r3, [r4, #16]
   1172e:	9302      	str	r3, [sp, #8]
   11730:	68e3      	ldr	r3, [r4, #12]
   11732:	9301      	str	r3, [sp, #4]
   11734:	68a3      	ldr	r3, [r4, #8]
   11736:	9300      	str	r3, [sp, #0]
   11738:	e9d4 2300 	ldrd	r2, r3, [r4]
   1173c:	f7fb fb70 	bl	ce20 <print_formatted>
		break;
   11740:	e6ff      	b.n	11542 <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2],
   11742:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   11744:	4631      	mov	r1, r6
   11746:	930c      	str	r3, [sp, #48]	; 0x30
   11748:	6b63      	ldr	r3, [r4, #52]	; 0x34
   1174a:	4628      	mov	r0, r5
   1174c:	930b      	str	r3, [sp, #44]	; 0x2c
   1174e:	6b23      	ldr	r3, [r4, #48]	; 0x30
   11750:	930a      	str	r3, [sp, #40]	; 0x28
   11752:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   11754:	9309      	str	r3, [sp, #36]	; 0x24
   11756:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   11758:	9308      	str	r3, [sp, #32]
   1175a:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1175c:	9307      	str	r3, [sp, #28]
   1175e:	6a23      	ldr	r3, [r4, #32]
   11760:	9306      	str	r3, [sp, #24]
   11762:	69e3      	ldr	r3, [r4, #28]
   11764:	9305      	str	r3, [sp, #20]
   11766:	69a3      	ldr	r3, [r4, #24]
   11768:	9304      	str	r3, [sp, #16]
   1176a:	6963      	ldr	r3, [r4, #20]
   1176c:	9303      	str	r3, [sp, #12]
   1176e:	6923      	ldr	r3, [r4, #16]
   11770:	9302      	str	r3, [sp, #8]
   11772:	68e3      	ldr	r3, [r4, #12]
   11774:	9301      	str	r3, [sp, #4]
   11776:	68a3      	ldr	r3, [r4, #8]
   11778:	9300      	str	r3, [sp, #0]
   1177a:	e9d4 2300 	ldrd	r2, r3, [r4]
   1177e:	f7fb fb4f 	bl	ce20 <print_formatted>
}
   11782:	e6de      	b.n	11542 <std_print+0x78>

00011784 <log_output_flush>:
		     log_output->control_block->offset,
   11784:	6842      	ldr	r2, [r0, #4]
{
   11786:	b510      	push	{r4, lr}
	buffer_write(log_output->func, log_output->buf,
   11788:	e9d2 2300 	ldrd	r2, r3, [r2]
{
   1178c:	4604      	mov	r4, r0
	buffer_write(log_output->func, log_output->buf,
   1178e:	6881      	ldr	r1, [r0, #8]
   11790:	6800      	ldr	r0, [r0, #0]
   11792:	f7ff fe8d 	bl	114b0 <buffer_write>
	log_output->control_block->offset = 0;
   11796:	2200      	movs	r2, #0
   11798:	6863      	ldr	r3, [r4, #4]
   1179a:	601a      	str	r2, [r3, #0]
}
   1179c:	bd10      	pop	{r4, pc}

0001179e <out_func>:
{
   1179e:	b508      	push	{r3, lr}
	out_ctx->buf[out_ctx->control_block->offset] = (u8_t)c;
   117a0:	e9d1 3201 	ldrd	r3, r2, [r1, #4]
   117a4:	681b      	ldr	r3, [r3, #0]
   117a6:	54d0      	strb	r0, [r2, r3]
	out_ctx->control_block->offset++;
   117a8:	684a      	ldr	r2, [r1, #4]
   117aa:	6813      	ldr	r3, [r2, #0]
   117ac:	3301      	adds	r3, #1
   117ae:	6013      	str	r3, [r2, #0]
	if (out_ctx->control_block->offset == out_ctx->size) {
   117b0:	68ca      	ldr	r2, [r1, #12]
   117b2:	4293      	cmp	r3, r2
   117b4:	d102      	bne.n	117bc <out_func+0x1e>
		log_output_flush(out_ctx);
   117b6:	4608      	mov	r0, r1
   117b8:	f7ff ffe4 	bl	11784 <log_output_flush>
}
   117bc:	2000      	movs	r0, #0
   117be:	bd08      	pop	{r3, pc}

000117c0 <char_out>:
{
   117c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   117c2:	460d      	mov	r5, r1
   117c4:	4616      	mov	r6, r2
   117c6:	4604      	mov	r4, r0
   117c8:	1847      	adds	r7, r0, r1
	for (size_t i = 0; i < length; i++) {
   117ca:	42bc      	cmp	r4, r7
   117cc:	d101      	bne.n	117d2 <char_out+0x12>
}
   117ce:	4628      	mov	r0, r5
   117d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		uart_poll_out(dev, data[i]);
   117d2:	f814 1b01 	ldrb.w	r1, [r4], #1
   117d6:	6873      	ldr	r3, [r6, #4]
   117d8:	4630      	mov	r0, r6
   117da:	685b      	ldr	r3, [r3, #4]
   117dc:	4798      	blx	r3
   117de:	e7f4      	b.n	117ca <char_out+0xa>

000117e0 <get_status>:
	struct nrf_clock_control *data = dev->driver_data;
   117e0:	6883      	ldr	r3, [r0, #8]
	if (data->started) {
   117e2:	7a5a      	ldrb	r2, [r3, #9]
   117e4:	b932      	cbnz	r2, 117f4 <get_status+0x14>
	if (data->ref > 0) {
   117e6:	f993 0008 	ldrsb.w	r0, [r3, #8]
		return CLOCK_CONTROL_STATUS_ON;
   117ea:	2800      	cmp	r0, #0
   117ec:	bfcc      	ite	gt
   117ee:	2000      	movgt	r0, #0
   117f0:	2001      	movle	r0, #1
   117f2:	4770      	bx	lr
   117f4:	2002      	movs	r0, #2
}
   117f6:	4770      	bx	lr

000117f8 <clock_stop>:
	const struct nrf_clock_control_config *config =
   117f8:	6802      	ldr	r2, [r0, #0]
{
   117fa:	b570      	push	{r4, r5, r6, lr}
	const struct nrf_clock_control_config *config =
   117fc:	6896      	ldr	r6, [r2, #8]
	struct nrf_clock_control *data = dev->driver_data;
   117fe:	6884      	ldr	r4, [r0, #8]
	__asm__ volatile(
   11800:	f04f 0320 	mov.w	r3, #32
   11804:	f3ef 8511 	mrs	r5, BASEPRI
   11808:	f383 8811 	msr	BASEPRI, r3
   1180c:	f3bf 8f6f 	isb	sy
	data->ref--;
   11810:	7a23      	ldrb	r3, [r4, #8]
   11812:	3b01      	subs	r3, #1
   11814:	b25b      	sxtb	r3, r3
	if (data->ref == 0) {
   11816:	2b00      	cmp	r3, #0
	data->ref--;
   11818:	7223      	strb	r3, [r4, #8]
	if (data->ref == 0) {
   1181a:	d11c      	bne.n	11856 <clock_stop+0x5e>
	list->tail = NULL;
   1181c:	e9c4 3300 	strd	r3, r3, [r4]
		do_stop =  (config->stop_handler) ?
   11820:	6873      	ldr	r3, [r6, #4]
				config->stop_handler(dev) : true;
   11822:	b9a3      	cbnz	r3, 1184e <clock_stop+0x56>
    *((volatile uint32_t *)((uint8_t *)NRF_CLOCK + task)) = 0x1UL;
   11824:	2201      	movs	r2, #1
   11826:	7af3      	ldrb	r3, [r6, #11]
   11828:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   1182c:	f503 43a0 	add.w	r3, r3, #20480	; 0x5000
   11830:	601a      	str	r2, [r3, #0]
    *((volatile uint32_t *)((uint8_t *)NRF_CLOCK + event)) = 0x0UL;
   11832:	2200      	movs	r2, #0
   11834:	8933      	ldrh	r3, [r6, #8]
   11836:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   1183a:	f503 43a0 	add.w	r3, r3, #20480	; 0x5000
   1183e:	601a      	str	r2, [r3, #0]
		data->started = false;
   11840:	2000      	movs	r0, #0
   11842:	7260      	strb	r0, [r4, #9]
	__asm__ volatile(
   11844:	f385 8811 	msr	BASEPRI, r5
   11848:	f3bf 8f6f 	isb	sy
}
   1184c:	bd70      	pop	{r4, r5, r6, pc}
				config->stop_handler(dev) : true;
   1184e:	4798      	blx	r3
   11850:	2800      	cmp	r0, #0
   11852:	d1e7      	bne.n	11824 <clock_stop+0x2c>
   11854:	e7f4      	b.n	11840 <clock_stop+0x48>
   11856:	f04f 0000 	mov.w	r0, #0
		data->ref = 0;
   1185a:	bfbc      	itt	lt
   1185c:	7220      	strblt	r0, [r4, #8]
		err = -EALREADY;
   1185e:	f06f 0044 	mvnlt.w	r0, #68	; 0x44
   11862:	e7ef      	b.n	11844 <clock_stop+0x4c>

00011864 <clock_async_start>:
{
   11864:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	const struct nrf_clock_control_config *config =
   11866:	6803      	ldr	r3, [r0, #0]
{
   11868:	4606      	mov	r6, r0
   1186a:	4614      	mov	r4, r2
	const struct nrf_clock_control_config *config =
   1186c:	689f      	ldr	r7, [r3, #8]
	struct nrf_clock_control *clk_data = dev->driver_data;
   1186e:	6885      	ldr	r5, [r0, #8]
	__asm__ volatile(
   11870:	f04f 0320 	mov.w	r3, #32
   11874:	f3ef 8211 	mrs	r2, BASEPRI
   11878:	f383 8811 	msr	BASEPRI, r3
   1187c:	f3bf 8f6f 	isb	sy
	ref = ++clk_data->ref;
   11880:	7a2b      	ldrb	r3, [r5, #8]
   11882:	3301      	adds	r3, #1
   11884:	b25b      	sxtb	r3, r3
   11886:	722b      	strb	r3, [r5, #8]
	__asm__ volatile(
   11888:	f382 8811 	msr	BASEPRI, r2
   1188c:	f3bf 8f6f 	isb	sy
	if (clk_data->started) {
   11890:	7a6a      	ldrb	r2, [r5, #9]
   11892:	b132      	cbz	r2, 118a2 <clock_async_start+0x3e>
		if (data) {
   11894:	b90c      	cbnz	r4, 1189a <clock_async_start+0x36>
	return 0;
   11896:	2000      	movs	r0, #0
}
   11898:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			data->cb(dev, data->user_data);
   1189a:	e9d4 3101 	ldrd	r3, r1, [r4, #4]
   1189e:	4798      	blx	r3
   118a0:	e7f9      	b.n	11896 <clock_async_start+0x32>
		if (ref == 1) {
   118a2:	2b01      	cmp	r3, #1
   118a4:	d108      	bne.n	118b8 <clock_async_start+0x54>
			do_start =  (config->start_handler) ?
   118a6:	683b      	ldr	r3, [r7, #0]
					config->start_handler(dev) : true;
   118a8:	b943      	cbnz	r3, 118bc <clock_async_start+0x58>
    *((volatile uint32_t *)((uint8_t *)NRF_CLOCK + task)) = 0x1UL;
   118aa:	2201      	movs	r2, #1
   118ac:	7abb      	ldrb	r3, [r7, #10]
   118ae:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   118b2:	f503 43a0 	add.w	r3, r3, #20480	; 0x5000
   118b6:	601a      	str	r2, [r3, #0]
		if (data) {
   118b8:	b94c      	cbnz	r4, 118ce <clock_async_start+0x6a>
   118ba:	e7ec      	b.n	11896 <clock_async_start+0x32>
					config->start_handler(dev) : true;
   118bc:	4798      	blx	r3
   118be:	2800      	cmp	r0, #0
   118c0:	d1f3      	bne.n	118aa <clock_async_start+0x46>
			} else if (data) {
   118c2:	2c00      	cmp	r4, #0
   118c4:	d0e7      	beq.n	11896 <clock_async_start+0x32>
				data->cb(dev, data->user_data);
   118c6:	e9d4 3101 	ldrd	r3, r1, [r4, #4]
   118ca:	4630      	mov	r0, r6
   118cc:	4798      	blx	r3
	sys_snode_t *item = sys_slist_peek_head(list);
   118ce:	682b      	ldr	r3, [r5, #0]
		if (item == node) {
   118d0:	429c      	cmp	r4, r3
   118d2:	d00d      	beq.n	118f0 <clock_async_start+0x8c>
 *
 * @return a pointer on the next node (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_next(sys_snode_t *node);

Z_GENLIST_PEEK_NEXT(slist, snode)
   118d4:	b113      	cbz	r3, 118dc <clock_async_start+0x78>
	return node->next;
   118d6:	681b      	ldr	r3, [r3, #0]
	} while (item);
   118d8:	2b00      	cmp	r3, #0
   118da:	d1f9      	bne.n	118d0 <clock_async_start+0x6c>
	parent->next = child;
   118dc:	2000      	movs	r0, #0
   118de:	6020      	str	r0, [r4, #0]
 * @param node A pointer on the node to append
 */
static inline void sys_slist_append(sys_slist_t *list,
				    sys_snode_t *node);

Z_GENLIST_APPEND(slist, snode)
   118e0:	686b      	ldr	r3, [r5, #4]
   118e2:	b913      	cbnz	r3, 118ea <clock_async_start+0x86>
	list->head = node;
   118e4:	e9c5 4400 	strd	r4, r4, [r5]
   118e8:	e7d5      	b.n	11896 <clock_async_start+0x32>
	parent->next = child;
   118ea:	601c      	str	r4, [r3, #0]
	list->tail = node;
   118ec:	606c      	str	r4, [r5, #4]
   118ee:	e7d3      	b.n	11898 <clock_async_start+0x34>
				return -EALREADY;
   118f0:	f06f 0044 	mvn.w	r0, #68	; 0x44
   118f4:	e7d0      	b.n	11898 <clock_async_start+0x34>

000118f6 <clock_start>:
	return clock_async_start(dev, sub_system, NULL);
   118f6:	2200      	movs	r2, #0
   118f8:	f7ff bfb4 	b.w	11864 <clock_async_start>

000118fc <lfclk_init>:
	sys_slist_init(&((struct nrf_clock_control *)dev->driver_data)->list);
   118fc:	6883      	ldr	r3, [r0, #8]
	list->head = NULL;
   118fe:	2000      	movs	r0, #0
	list->tail = NULL;
   11900:	e9c3 0000 	strd	r0, r0, [r3]
}
   11904:	4770      	bx	lr

00011906 <clkstarted_handle>:
{
   11906:	b538      	push	{r3, r4, r5, lr}
	struct nrf_clock_control *data = dev->driver_data;
   11908:	6884      	ldr	r4, [r0, #8]
{
   1190a:	4605      	mov	r5, r0
Z_GENLIST_IS_EMPTY(slist)
   1190c:	6823      	ldr	r3, [r4, #0]
 *
 * @return A pointer to the first node of the list (or NULL if empty)
 */
static inline sys_snode_t *sys_slist_get(sys_slist_t *list);

Z_GENLIST_GET(slist, snode)
   1190e:	b12b      	cbz	r3, 1191c <clkstarted_handle+0x16>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   11910:	6861      	ldr	r1, [r4, #4]
	return node->next;
   11912:	681a      	ldr	r2, [r3, #0]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   11914:	428b      	cmp	r3, r1
	list->head = node;
   11916:	6022      	str	r2, [r4, #0]
	list->tail = node;
   11918:	bf08      	it	eq
   1191a:	6062      	streq	r2, [r4, #4]
	data->started = true;
   1191c:	2201      	movs	r2, #1
   1191e:	7262      	strb	r2, [r4, #9]
	while (node != NULL) {
   11920:	b903      	cbnz	r3, 11924 <clkstarted_handle+0x1e>
}
   11922:	bd38      	pop	{r3, r4, r5, pc}
		async_data->cb(dev, async_data->user_data);
   11924:	e9d3 2101 	ldrd	r2, r1, [r3, #4]
   11928:	4628      	mov	r0, r5
   1192a:	4790      	blx	r2
Z_GENLIST_IS_EMPTY(slist)
   1192c:	6823      	ldr	r3, [r4, #0]
Z_GENLIST_GET(slist, snode)
   1192e:	2b00      	cmp	r3, #0
   11930:	d0f7      	beq.n	11922 <clkstarted_handle+0x1c>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   11932:	6861      	ldr	r1, [r4, #4]
	return node->next;
   11934:	681a      	ldr	r2, [r3, #0]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   11936:	428b      	cmp	r3, r1
	list->head = node;
   11938:	6022      	str	r2, [r4, #0]
	list->tail = node;
   1193a:	bf08      	it	eq
   1193c:	6062      	streq	r2, [r4, #4]
   1193e:	e7ef      	b.n	11920 <clkstarted_handle+0x1a>

00011940 <st7789v_read>:
}
   11940:	f06f 0022 	mvn.w	r0, #34	; 0x22
   11944:	4770      	bx	lr

00011946 <st7789v_get_framebuffer>:
}
   11946:	2000      	movs	r0, #0
   11948:	4770      	bx	lr

0001194a <st7789v_set_brightness>:
}
   1194a:	f06f 0022 	mvn.w	r0, #34	; 0x22
   1194e:	4770      	bx	lr

00011950 <st7789v_get_capabilities>:
{
   11950:	b538      	push	{r3, r4, r5, lr}
   11952:	460c      	mov	r4, r1
	struct st7789v_data *data = (struct st7789v_data *)dev->driver_data;
   11954:	6885      	ldr	r5, [r0, #8]
	memset(capabilities, 0, sizeof(struct display_capabilities));
   11956:	2210      	movs	r2, #16
   11958:	2100      	movs	r1, #0
   1195a:	4620      	mov	r0, r4
   1195c:	f000 f8f7 	bl	11b4e <memset>
	capabilities->x_resolution = data->width;
   11960:	8ceb      	ldrh	r3, [r5, #38]	; 0x26
   11962:	8023      	strh	r3, [r4, #0]
	capabilities->y_resolution = data->height;
   11964:	8cab      	ldrh	r3, [r5, #36]	; 0x24
   11966:	8063      	strh	r3, [r4, #2]
	capabilities->supported_pixel_formats = PIXEL_FORMAT_RGB_565;
   11968:	2310      	movs	r3, #16
   1196a:	6063      	str	r3, [r4, #4]
	capabilities->current_pixel_format = PIXEL_FORMAT_RGB_565;
   1196c:	7323      	strb	r3, [r4, #12]
	capabilities->current_orientation = DISPLAY_ORIENTATION_NORMAL;
   1196e:	2300      	movs	r3, #0
   11970:	7363      	strb	r3, [r4, #13]
}
   11972:	bd38      	pop	{r3, r4, r5, pc}

00011974 <gpio_pin_write>:
 * @param value Value set on the pin.
 * @return 0 if successful, negative errno code on failure.
 */
static inline int gpio_pin_write(struct device *port, u32_t pin,
				 u32_t value)
{
   11974:	b410      	push	{r4}
   11976:	4613      	mov	r3, r2
	return api->write(port, access_op, pin, value);
   11978:	6842      	ldr	r2, [r0, #4]
   1197a:	6854      	ldr	r4, [r2, #4]
   1197c:	460a      	mov	r2, r1
   1197e:	46a4      	mov	ip, r4
   11980:	2100      	movs	r1, #0
	return gpio_write(port, GPIO_ACCESS_BY_PIN, pin, value);
}
   11982:	bc10      	pop	{r4}
	return api->write(port, access_op, pin, value);
   11984:	4760      	bx	ip

00011986 <st7789v_set_contrast>:
   11986:	f06f 0022 	mvn.w	r0, #34	; 0x22
   1198a:	4770      	bx	lr

0001198c <st7789v_set_cmd.isra.0>:
static void st7789v_set_cmd(struct st7789v_data *data, int is_cmd)
   1198c:	b410      	push	{r4}
   1198e:	6843      	ldr	r3, [r0, #4]
   11990:	220a      	movs	r2, #10
   11992:	685c      	ldr	r4, [r3, #4]
   11994:	f081 0301 	eor.w	r3, r1, #1
   11998:	46a4      	mov	ip, r4
   1199a:	2100      	movs	r1, #0
}
   1199c:	bc10      	pop	{r4}
   1199e:	4760      	bx	ip

000119a0 <st7789v_set_lcd_margins>:
	data->x_offset = x_offset;
   119a0:	8501      	strh	r1, [r0, #40]	; 0x28
	data->y_offset = y_offset;
   119a2:	8542      	strh	r2, [r0, #42]	; 0x2a
}
   119a4:	4770      	bx	lr

000119a6 <st7789v_transmit>:
{
   119a6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   119aa:	4605      	mov	r5, r0
   119ac:	b086      	sub	sp, #24
   119ae:	461f      	mov	r7, r3
   119b0:	ab06      	add	r3, sp, #24
   119b2:	f803 1d11 	strb.w	r1, [r3, #-17]!
	spi_write(data->spi_dev, &data->spi_config, &tx_bufs);
   119b6:	462c      	mov	r4, r5
	struct spi_buf tx_buf = { .buf = &cmd, .len = 1 };
   119b8:	2101      	movs	r1, #1
   119ba:	9302      	str	r3, [sp, #8]
	st7789v_set_cmd(data, true);
   119bc:	6a00      	ldr	r0, [r0, #32]
	struct spi_buf_set tx_bufs = { .buffers = &tx_buf, .count = 1 };
   119be:	ab02      	add	r3, sp, #8
{
   119c0:	4616      	mov	r6, r2
	struct spi_buf tx_buf = { .buf = &cmd, .len = 1 };
   119c2:	9103      	str	r1, [sp, #12]
	struct spi_buf_set tx_bufs = { .buffers = &tx_buf, .count = 1 };
   119c4:	e9cd 3104 	strd	r3, r1, [sp, #16]
	st7789v_set_cmd(data, true);
   119c8:	f7ff ffe0 	bl	1198c <st7789v_set_cmd.isra.0>
	spi_write(data->spi_dev, &data->spi_config, &tx_bufs);
   119cc:	f854 0b04 	ldr.w	r0, [r4], #4
   119d0:	6843      	ldr	r3, [r0, #4]
   119d2:	aa04      	add	r2, sp, #16
   119d4:	f8d3 8000 	ldr.w	r8, [r3]
   119d8:	4621      	mov	r1, r4
   119da:	2300      	movs	r3, #0
   119dc:	47c0      	blx	r8
	if (tx_data != NULL) {
   119de:	b166      	cbz	r6, 119fa <st7789v_transmit+0x54>
		st7789v_set_cmd(data, false);
   119e0:	6a28      	ldr	r0, [r5, #32]
   119e2:	2100      	movs	r1, #0
		tx_buf.len = tx_count;
   119e4:	e9cd 6702 	strd	r6, r7, [sp, #8]
		st7789v_set_cmd(data, false);
   119e8:	f7ff ffd0 	bl	1198c <st7789v_set_cmd.isra.0>
		spi_write(data->spi_dev, &data->spi_config, &tx_bufs);
   119ec:	6828      	ldr	r0, [r5, #0]
   119ee:	6843      	ldr	r3, [r0, #4]
   119f0:	aa04      	add	r2, sp, #16
   119f2:	681d      	ldr	r5, [r3, #0]
   119f4:	4621      	mov	r1, r4
   119f6:	2300      	movs	r3, #0
   119f8:	47a8      	blx	r5
}
   119fa:	b006      	add	sp, #24
   119fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00011a00 <st7789v_blanking_on>:
{
   11a00:	b508      	push	{r3, lr}
	st7789v_transmit(driver, ST7789V_CMD_DISP_OFF, NULL, 0);
   11a02:	2300      	movs	r3, #0
   11a04:	2128      	movs	r1, #40	; 0x28
   11a06:	461a      	mov	r2, r3
   11a08:	6880      	ldr	r0, [r0, #8]
   11a0a:	f7ff ffcc 	bl	119a6 <st7789v_transmit>
}
   11a0e:	2000      	movs	r0, #0
   11a10:	bd08      	pop	{r3, pc}

00011a12 <st7789v_blanking_off>:
{
   11a12:	b508      	push	{r3, lr}
	st7789v_transmit(driver, ST7789V_CMD_DISP_ON, NULL, 0);
   11a14:	2300      	movs	r3, #0
   11a16:	2129      	movs	r1, #41	; 0x29
   11a18:	461a      	mov	r2, r3
   11a1a:	6880      	ldr	r0, [r0, #8]
   11a1c:	f7ff ffc3 	bl	119a6 <st7789v_transmit>
}
   11a20:	2000      	movs	r0, #0
   11a22:	bd08      	pop	{r3, pc}

00011a24 <z_clock_isr>:
/* Weak-linked noop defaults for optional driver interfaces: */

void __weak z_clock_isr(void *arg)
{
	__ASSERT_NO_MSG(false);
}
   11a24:	4770      	bx	lr

00011a26 <z_clock_idle_exit>:
{
}

void __weak z_clock_idle_exit(void)
{
}
   11a26:	4770      	bx	lr

00011a28 <z_irq_spurious>:
 * @return N/A
 */
void z_irq_spurious(void *unused)
{
	ARG_UNUSED(unused);
	z_arm_reserved();
   11a28:	f7fc b80c 	b.w	da44 <z_arm_bus_fault>

00011a2c <z_do_kernel_oops>:

void z_do_kernel_oops(const z_arch_esf_t *esf)
{
   11a2c:	4601      	mov	r1, r0
			reason = K_ERR_KERNEL_OOPS;
		}
	}

#endif /* CONFIG_USERSPACE */
	z_arm_fatal_error(reason, esf);
   11a2e:	6800      	ldr	r0, [r0, #0]
   11a30:	f7fc b8ca 	b.w	dbc8 <z_arm_fatal_error>

00011a34 <z_arm_nmi>:
 *
 * @return N/A
 */

void z_arm_nmi(void)
{
   11a34:	b508      	push	{r3, lr}
	handler();
   11a36:	f7fc f817 	bl	da68 <z_SysNmiOnReset>
	z_arm_exc_exit();
}
   11a3a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_arm_exc_exit();
   11a3e:	f7fb bfad 	b.w	d99c <z_arm_exc_exit>

00011a42 <z_arm_configure_dynamic_mpu_regions>:
 *
 * For some MPU architectures, such as the unmodified ARMv8-M MPU,
 * the function must execute with MPU enabled.
 */
void z_arm_configure_dynamic_mpu_regions(struct k_thread *thread)
{
   11a42:	b507      	push	{r0, r1, r2, lr}

	region_num++;
#endif /* CONFIG_MPU_STACK_GUARD */

	/* Configure the dynamic MPU regions */
	arm_core_mpu_configure_dynamic_mpu_regions(
   11a44:	2100      	movs	r1, #0
   11a46:	a801      	add	r0, sp, #4
   11a48:	f7fc fdea 	bl	e620 <arm_core_mpu_configure_dynamic_mpu_regions>
		(const struct k_mem_partition **)dynamic_regions,
		region_num);
}
   11a4c:	b003      	add	sp, #12
   11a4e:	f85d fb04 	ldr.w	pc, [sp], #4

00011a52 <mpu_configure_region>:
{
   11a52:	b530      	push	{r4, r5, lr}
	get_region_attr_from_k_mem_partition_info(&region_conf.attr,
   11a54:	684b      	ldr	r3, [r1, #4]
{
   11a56:	b085      	sub	sp, #20
	region_conf.base = new_region->start;
   11a58:	680c      	ldr	r4, [r1, #0]
	p_attr->rbar = attr->rbar &
   11a5a:	f89d 2008 	ldrb.w	r2, [sp, #8]
   11a5e:	890d      	ldrh	r5, [r1, #8]
   11a60:	9400      	str	r4, [sp, #0]
	p_attr->mair_idx = attr->mair_idx;
   11a62:	8949      	ldrh	r1, [r1, #10]
	p_attr->r_limit = REGION_LIMIT_ADDR(base, size);
   11a64:	f024 041f 	bic.w	r4, r4, #31
   11a68:	3b01      	subs	r3, #1
   11a6a:	4423      	add	r3, r4
	p_attr->rbar = attr->rbar &
   11a6c:	f365 0204 	bfi	r2, r5, #0, #5
	p_attr->mair_idx = attr->mair_idx;
   11a70:	f361 1247 	bfi	r2, r1, #5, #3
	p_attr->r_limit = REGION_LIMIT_ADDR(base, size);
   11a74:	f023 031f 	bic.w	r3, r3, #31
	if (index > (get_num_regions() - 1)) {
   11a78:	280f      	cmp	r0, #15
	p_attr->mair_idx = attr->mair_idx;
   11a7a:	f88d 2008 	strb.w	r2, [sp, #8]
	p_attr->r_limit = REGION_LIMIT_ADDR(base, size);
   11a7e:	9303      	str	r3, [sp, #12]
   11a80:	4604      	mov	r4, r0
   11a82:	d905      	bls.n	11a90 <mpu_configure_region+0x3e>
   11a84:	f7fc fc4a 	bl	e31c <region_allocate_and_init.part.0>
   11a88:	4604      	mov	r4, r0
}
   11a8a:	4620      	mov	r0, r4
   11a8c:	b005      	add	sp, #20
   11a8e:	bd30      	pop	{r4, r5, pc}
	region_init(index, region_conf);
   11a90:	4669      	mov	r1, sp
   11a92:	f7fc fc2b 	bl	e2ec <region_init>
	return region_allocate_and_init(index,
   11a96:	e7f8      	b.n	11a8a <mpu_configure_region+0x38>

00011a98 <strncpy>:
 *
 * @return pointer to destination buffer <d>
 */

char *strncpy(char *_MLIBC_RESTRICT d, const char *_MLIBC_RESTRICT s, size_t n)
{
   11a98:	b570      	push	{r4, r5, r6, lr}
   11a9a:	4605      	mov	r5, r0
   11a9c:	3901      	subs	r1, #1
   11a9e:	462c      	mov	r4, r5
	char *dest = d;

	while ((n > 0) && *s != '\0') {
   11aa0:	b142      	cbz	r2, 11ab4 <strncpy+0x1c>
   11aa2:	f811 3f01 	ldrb.w	r3, [r1, #1]!
   11aa6:	1e56      	subs	r6, r2, #1
   11aa8:	b92b      	cbnz	r3, 11ab6 <strncpy+0x1e>
   11aaa:	442a      	add	r2, r5
		d++;
		n--;
	}

	while (n > 0) {
		*d = '\0';
   11aac:	f804 3b01 	strb.w	r3, [r4], #1
	while (n > 0) {
   11ab0:	42a2      	cmp	r2, r4
   11ab2:	d1fb      	bne.n	11aac <strncpy+0x14>
		d++;
		n--;
	}

	return dest;
}
   11ab4:	bd70      	pop	{r4, r5, r6, pc}
		*d = *s;
   11ab6:	f805 3b01 	strb.w	r3, [r5], #1
		n--;
   11aba:	4632      	mov	r2, r6
   11abc:	e7ef      	b.n	11a9e <strncpy+0x6>

00011abe <strchr>:
 * @return pointer to 1st instance of found byte, or NULL if not found
 */

char *strchr(const char *s, int c)
{
	char tmp = (char) c;
   11abe:	b2c9      	uxtb	r1, r1

	while ((*s != tmp) && (*s != '\0')) {
   11ac0:	7802      	ldrb	r2, [r0, #0]
   11ac2:	4603      	mov	r3, r0
   11ac4:	428a      	cmp	r2, r1
   11ac6:	f100 0001 	add.w	r0, r0, #1
   11aca:	d004      	beq.n	11ad6 <strchr+0x18>
   11acc:	2a00      	cmp	r2, #0
   11ace:	d1f7      	bne.n	11ac0 <strchr+0x2>
		s++;
	}

	return (*s == tmp) ? (char *) s : NULL;
   11ad0:	2900      	cmp	r1, #0
   11ad2:	bf18      	it	ne
   11ad4:	2300      	movne	r3, #0
}
   11ad6:	4618      	mov	r0, r3
   11ad8:	4770      	bx	lr

00011ada <strcmp>:
 *
 * @return negative # if <s1> < <s2>, 0 if <s1> == <s2>, else positive #
 */

int strcmp(const char *s1, const char *s2)
{
   11ada:	3801      	subs	r0, #1
   11adc:	3901      	subs	r1, #1
	while ((*s1 == *s2) && (*s1 != '\0')) {
   11ade:	f810 3f01 	ldrb.w	r3, [r0, #1]!
   11ae2:	f811 2f01 	ldrb.w	r2, [r1, #1]!
   11ae6:	4293      	cmp	r3, r2
   11ae8:	d102      	bne.n	11af0 <strcmp+0x16>
   11aea:	2b00      	cmp	r3, #0
   11aec:	d1f7      	bne.n	11ade <strcmp+0x4>
   11aee:	461a      	mov	r2, r3
		s1++;
		s2++;
	}

	return *s1 - *s2;
}
   11af0:	1a98      	subs	r0, r3, r2
   11af2:	4770      	bx	lr

00011af4 <memcpy>:
 *
 * @return pointer to start of destination buffer
 */

void *memcpy(void *_MLIBC_RESTRICT d, const void *_MLIBC_RESTRICT s, size_t n)
{
   11af4:	b5f0      	push	{r4, r5, r6, r7, lr}

	unsigned char *d_byte = (unsigned char *)d;
	const unsigned char *s_byte = (const unsigned char *)s;
	const uintptr_t mask = sizeof(mem_word_t) - 1;

	if ((((uintptr_t)d ^ (uintptr_t)s_byte) & mask) == 0) {
   11af6:	ea81 0400 	eor.w	r4, r1, r0
   11afa:	07a5      	lsls	r5, r4, #30
   11afc:	4603      	mov	r3, r0
   11afe:	d00b      	beq.n	11b18 <memcpy+0x24>
   11b00:	3b01      	subs	r3, #1
   11b02:	440a      	add	r2, r1
		s_byte = (unsigned char *)s_word;
	}

	/* do byte-sized copying until finished */

	while (n > 0) {
   11b04:	4291      	cmp	r1, r2
   11b06:	d11d      	bne.n	11b44 <memcpy+0x50>
		*(d_byte++) = *(s_byte++);
		n--;
	}

	return d;
}
   11b08:	bdf0      	pop	{r4, r5, r6, r7, pc}
			if (n == 0) {
   11b0a:	2a00      	cmp	r2, #0
   11b0c:	d0fc      	beq.n	11b08 <memcpy+0x14>
			*(d_byte++) = *(s_byte++);
   11b0e:	f811 4b01 	ldrb.w	r4, [r1], #1
			n--;
   11b12:	3a01      	subs	r2, #1
			*(d_byte++) = *(s_byte++);
   11b14:	f803 4b01 	strb.w	r4, [r3], #1
		while (((uintptr_t)d_byte) & mask) {
   11b18:	079c      	lsls	r4, r3, #30
   11b1a:	d1f6      	bne.n	11b0a <memcpy+0x16>
   11b1c:	460c      	mov	r4, r1
   11b1e:	1f1d      	subs	r5, r3, #4
   11b20:	188f      	adds	r7, r1, r2
		while (n >= sizeof(mem_word_t)) {
   11b22:	1b3e      	subs	r6, r7, r4
   11b24:	2e03      	cmp	r6, #3
   11b26:	d808      	bhi.n	11b3a <memcpy+0x46>
   11b28:	f06f 0503 	mvn.w	r5, #3
   11b2c:	0894      	lsrs	r4, r2, #2
   11b2e:	fb05 2204 	mla	r2, r5, r4, r2
   11b32:	00a4      	lsls	r4, r4, #2
   11b34:	4423      	add	r3, r4
   11b36:	4421      	add	r1, r4
   11b38:	e7e2      	b.n	11b00 <memcpy+0xc>
			*(d_word++) = *(s_word++);
   11b3a:	f854 6b04 	ldr.w	r6, [r4], #4
   11b3e:	f845 6f04 	str.w	r6, [r5, #4]!
   11b42:	e7ee      	b.n	11b22 <memcpy+0x2e>
		*(d_byte++) = *(s_byte++);
   11b44:	f811 4b01 	ldrb.w	r4, [r1], #1
   11b48:	f803 4f01 	strb.w	r4, [r3, #1]!
   11b4c:	e7da      	b.n	11b04 <memcpy+0x10>

00011b4e <memset>:

void *memset(void *buf, int c, size_t n)
{
	/* do byte-sized initialization until word-aligned or finished */

	unsigned char *d_byte = (unsigned char *)buf;
   11b4e:	4603      	mov	r3, r0
{
   11b50:	b5f0      	push	{r4, r5, r6, r7, lr}
	unsigned char c_byte = (unsigned char)c;
   11b52:	b2c9      	uxtb	r1, r1

	while (((uintptr_t)d_byte) & (sizeof(mem_word_t) - 1)) {
   11b54:	079c      	lsls	r4, r3, #30
   11b56:	d10f      	bne.n	11b78 <memset+0x2a>
	c_word |= c_word << 16;
#if Z_MEM_WORD_T_WIDTH > 32
	c_word |= c_word << 32;
#endif

	while (n >= sizeof(mem_word_t)) {
   11b58:	461d      	mov	r5, r3
	c_word |= c_word << 8;
   11b5a:	ea41 2401 	orr.w	r4, r1, r1, lsl #8
	c_word |= c_word << 16;
   11b5e:	ea44 4404 	orr.w	r4, r4, r4, lsl #16
   11b62:	189f      	adds	r7, r3, r2
	while (n >= sizeof(mem_word_t)) {
   11b64:	1b7e      	subs	r6, r7, r5
   11b66:	2e03      	cmp	r6, #3
   11b68:	d80c      	bhi.n	11b84 <memset+0x36>
   11b6a:	0894      	lsrs	r4, r2, #2
   11b6c:	eb03 0484 	add.w	r4, r3, r4, lsl #2
   11b70:	4413      	add	r3, r2

	/* do byte-sized initialization until finished */

	d_byte = (unsigned char *)d_word;

	while (n > 0) {
   11b72:	429c      	cmp	r4, r3
   11b74:	d109      	bne.n	11b8a <memset+0x3c>
		*(d_byte++) = c_byte;
		n--;
	}

	return buf;
}
   11b76:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (n == 0) {
   11b78:	2a00      	cmp	r2, #0
   11b7a:	d0fc      	beq.n	11b76 <memset+0x28>
		*(d_byte++) = c_byte;
   11b7c:	f803 1b01 	strb.w	r1, [r3], #1
		n--;
   11b80:	3a01      	subs	r2, #1
   11b82:	e7e7      	b.n	11b54 <memset+0x6>
		*(d_word++) = c_word;
   11b84:	f845 4b04 	str.w	r4, [r5], #4
   11b88:	e7ec      	b.n	11b64 <memset+0x16>
		*(d_byte++) = c_byte;
   11b8a:	f804 1b01 	strb.w	r1, [r4], #1
   11b8e:	e7f0      	b.n	11b72 <memset+0x24>

00011b90 <_to_x>:
{
   11b90:	4603      	mov	r3, r0
   11b92:	b570      	push	{r4, r5, r6, lr}
		unsigned int d = n % base;
   11b94:	fbb1 f6f2 	udiv	r6, r1, r2
   11b98:	fb02 1116 	mls	r1, r2, r6, r1
		*buf++ = '0' + d + (d > 9 ? ('a' - '0' - 10) : 0);
   11b9c:	2909      	cmp	r1, #9
   11b9e:	bf8c      	ite	hi
   11ba0:	2527      	movhi	r5, #39	; 0x27
   11ba2:	2500      	movls	r5, #0
   11ba4:	461c      	mov	r4, r3
   11ba6:	3130      	adds	r1, #48	; 0x30
   11ba8:	4429      	add	r1, r5
   11baa:	f804 1b01 	strb.w	r1, [r4], #1
	} while (n);
   11bae:	4631      	mov	r1, r6
   11bb0:	b92e      	cbnz	r6, 11bbe <_to_x+0x2e>
	*buf = 0;
   11bb2:	705e      	strb	r6, [r3, #1]
	len = buf - start;
   11bb4:	1a24      	subs	r4, r4, r0
	for (buf--; buf > start; buf--, start++) {
   11bb6:	4283      	cmp	r3, r0
   11bb8:	d803      	bhi.n	11bc2 <_to_x+0x32>
}
   11bba:	4620      	mov	r0, r4
   11bbc:	bd70      	pop	{r4, r5, r6, pc}
   11bbe:	4623      	mov	r3, r4
   11bc0:	e7e8      	b.n	11b94 <_to_x+0x4>
		char tmp = *buf;
   11bc2:	781a      	ldrb	r2, [r3, #0]
		*buf = *start;
   11bc4:	7801      	ldrb	r1, [r0, #0]
   11bc6:	f803 1901 	strb.w	r1, [r3], #-1
		*start = tmp;
   11bca:	f800 2b01 	strb.w	r2, [r0], #1
   11bce:	e7f2      	b.n	11bb6 <_to_x+0x26>

00011bd0 <_rlrshift>:
	*v = (*v & 1) + (*v >> 1);
   11bd0:	e9d0 2300 	ldrd	r2, r3, [r0]
{
   11bd4:	e92d 4830 	stmdb	sp!, {r4, r5, fp, lr}
	*v = (*v & 1) + (*v >> 1);
   11bd8:	ea5f 0c53 	movs.w	ip, r3, lsr #1
   11bdc:	ea4f 0b32 	mov.w	fp, r2, rrx
   11be0:	2500      	movs	r5, #0
   11be2:	f002 0401 	and.w	r4, r2, #1
   11be6:	eb1b 0204 	adds.w	r2, fp, r4
   11bea:	eb4c 0305 	adc.w	r3, ip, r5
   11bee:	e9c0 2300 	strd	r2, r3, [r0]
}
   11bf2:	e8bd 8830 	ldmia.w	sp!, {r4, r5, fp, pc}

00011bf6 <_ldiv5>:
		q = (uint64_t)(hi / 5U) << shifts[i];
   11bf6:	2105      	movs	r1, #5
	uint64_t rem = *v, quot = 0U, q;
   11bf8:	e9d0 2300 	ldrd	r2, r3, [r0]
{
   11bfc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	rem += 2U;
   11c00:	f112 0802 	adds.w	r8, r2, #2
   11c04:	f143 0900 	adc.w	r9, r3, #0
		q = (uint64_t)(hi / 5U) << shifts[i];
   11c08:	fbb9 f5f1 	udiv	r5, r9, r1
		rem -= q * 5U;
   11c0c:	2600      	movs	r6, #0
   11c0e:	fb01 f705 	mul.w	r7, r1, r5
   11c12:	ebb8 0806 	subs.w	r8, r8, r6
   11c16:	eb69 0907 	sbc.w	r9, r9, r7
		hi = rem >> shifts[i];
   11c1a:	ea4f 06d8 	mov.w	r6, r8, lsr #3
   11c1e:	ea46 7649 	orr.w	r6, r6, r9, lsl #29
		q = (uint64_t)(hi / 5U) << shifts[i];
   11c22:	fbb6 fcf1 	udiv	ip, r6, r1
   11c26:	2400      	movs	r4, #0
		rem -= q * 5U;
   11c28:	46c2      	mov	sl, r8
		q = (uint64_t)(hi / 5U) << shifts[i];
   11c2a:	ea4f 06cc 	mov.w	r6, ip, lsl #3
		rem -= q * 5U;
   11c2e:	fba6 8901 	umull	r8, r9, r6, r1
		quot += q;
   11c32:	19a2      	adds	r2, r4, r6
		q = (uint64_t)(hi / 5U) << shifts[i];
   11c34:	ea4f 775c 	mov.w	r7, ip, lsr #29
		quot += q;
   11c38:	eb45 0307 	adc.w	r3, r5, r7
   11c3c:	4614      	mov	r4, r2
		rem -= q * 5U;
   11c3e:	ebba 0208 	subs.w	r2, sl, r8
		q = (uint64_t)(hi / 5U) << shifts[i];
   11c42:	fbb2 f2f1 	udiv	r2, r2, r1
		quot += q;
   11c46:	461d      	mov	r5, r3
   11c48:	18a4      	adds	r4, r4, r2
   11c4a:	f145 0500 	adc.w	r5, r5, #0
	*v = quot;
   11c4e:	e9c0 4500 	strd	r4, r5, [r0]
}
   11c52:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00011c56 <_get_digit>:
	if (*digit_count > 0) {
   11c56:	680b      	ldr	r3, [r1, #0]
{
   11c58:	e92d 4810 	stmdb	sp!, {r4, fp, lr}
	if (*digit_count > 0) {
   11c5c:	2b00      	cmp	r3, #0
   11c5e:	dd13      	ble.n	11c88 <_get_digit+0x32>
		*digit_count -= 1;
   11c60:	3b01      	subs	r3, #1
   11c62:	600b      	str	r3, [r1, #0]
		*fr = *fr * 10U;
   11c64:	210a      	movs	r1, #10
   11c66:	6802      	ldr	r2, [r0, #0]
   11c68:	6844      	ldr	r4, [r0, #4]
   11c6a:	fba2 bc01 	umull	fp, ip, r2, r1
		*fr &= 0x0FFFFFFFFFFFFFFFull;
   11c6e:	465a      	mov	r2, fp
		*fr = *fr * 10U;
   11c70:	fb01 cc04 	mla	ip, r1, r4, ip
		*fr &= 0x0FFFFFFFFFFFFFFFull;
   11c74:	f02c 4370 	bic.w	r3, ip, #4026531840	; 0xf0000000
   11c78:	e9c0 2300 	strd	r2, r3, [r0]
		rval = ((*fr >> 60) & 0xF) + '0';
   11c7c:	ea4f 711c 	mov.w	r1, ip, lsr #28
   11c80:	3130      	adds	r1, #48	; 0x30
}
   11c82:	4608      	mov	r0, r1
   11c84:	e8bd 8810 	ldmia.w	sp!, {r4, fp, pc}
		rval = '0';
   11c88:	2130      	movs	r1, #48	; 0x30
   11c8a:	e7fa      	b.n	11c82 <_get_digit+0x2c>

00011c8c <_stdout_hook_default>:
}
   11c8c:	f04f 30ff 	mov.w	r0, #4294967295
   11c90:	4770      	bx	lr

00011c92 <sprintf_out>:
	if (p->len > 1) { /* need to reserve a byte for EOS */
   11c92:	684b      	ldr	r3, [r1, #4]
   11c94:	2b01      	cmp	r3, #1
   11c96:	dd07      	ble.n	11ca8 <sprintf_out+0x16>
		*(p->ptr) = c;
   11c98:	680b      	ldr	r3, [r1, #0]
   11c9a:	7018      	strb	r0, [r3, #0]
		p->ptr += 1;
   11c9c:	680b      	ldr	r3, [r1, #0]
   11c9e:	3301      	adds	r3, #1
   11ca0:	600b      	str	r3, [r1, #0]
		p->len -= 1;
   11ca2:	684b      	ldr	r3, [r1, #4]
   11ca4:	3b01      	subs	r3, #1
   11ca6:	604b      	str	r3, [r1, #4]
}
   11ca8:	2000      	movs	r0, #0
   11caa:	4770      	bx	lr

00011cac <gpio_nrfx_write>:
{
   11cac:	b510      	push	{r4, lr}
	return port->config->config_info;
   11cae:	6804      	ldr	r4, [r0, #0]
   11cb0:	6880      	ldr	r0, [r0, #8]
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   11cb2:	68a4      	ldr	r4, [r4, #8]
	if (access_op == GPIO_ACCESS_BY_PORT) {
   11cb4:	2901      	cmp	r1, #1
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   11cb6:	6824      	ldr	r4, [r4, #0]
   11cb8:	69c0      	ldr	r0, [r0, #28]
	if (access_op == GPIO_ACCESS_BY_PORT) {
   11cba:	d103      	bne.n	11cc4 <gpio_nrfx_write+0x18>
		nrf_gpio_port_out_write(reg, value ^ data->inverted);
   11cbc:	4058      	eors	r0, r3
    p_reg->OUT = value;
   11cbe:	6060      	str	r0, [r4, #4]
}
   11cc0:	2000      	movs	r0, #0
   11cc2:	bd10      	pop	{r4, pc}
		if ((value > 0) ^ ((BIT(pin) & data->inverted) != 0)) {
   11cc4:	3300      	adds	r3, #0
   11cc6:	f04f 0101 	mov.w	r1, #1
   11cca:	bf18      	it	ne
   11ccc:	2301      	movne	r3, #1
   11cce:	40d0      	lsrs	r0, r2
   11cd0:	f000 0001 	and.w	r0, r0, #1
   11cd4:	4091      	lsls	r1, r2
   11cd6:	4283      	cmp	r3, r0
    p_reg->OUTSET = set_mask;
   11cd8:	bf14      	ite	ne
   11cda:	60a1      	strne	r1, [r4, #8]
    p_reg->OUTCLR = clr_mask;
   11cdc:	60e1      	streq	r1, [r4, #12]
   11cde:	e7ef      	b.n	11cc0 <gpio_nrfx_write+0x14>

00011ce0 <gpio_nrfx_read>:
{
   11ce0:	b570      	push	{r4, r5, r6, lr}
	return port->config->config_info;
   11ce2:	6804      	ldr	r4, [r0, #0]
	u32_t port_val = (port_in | port_out) ^ data->inverted;
   11ce4:	6880      	ldr	r0, [r0, #8]
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   11ce6:	68a4      	ldr	r4, [r4, #8]
	u32_t port_val = (port_in | port_out) ^ data->inverted;
   11ce8:	69c0      	ldr	r0, [r0, #28]
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   11cea:	6825      	ldr	r5, [r4, #0]
	if (access_op == GPIO_ACCESS_BY_PORT) {
   11cec:	2901      	cmp	r1, #1
    return p_reg->DIR;
   11cee:	696e      	ldr	r6, [r5, #20]
    return p_reg->IN;
   11cf0:	692c      	ldr	r4, [r5, #16]
    return p_reg->OUT;
   11cf2:	686d      	ldr	r5, [r5, #4]
	u32_t port_val = (port_in | port_out) ^ data->inverted;
   11cf4:	ea80 0004 	eor.w	r0, r0, r4
   11cf8:	ea84 0405 	eor.w	r4, r4, r5
   11cfc:	ea04 0406 	and.w	r4, r4, r6
   11d00:	ea80 0004 	eor.w	r0, r0, r4
		*value = (port_val & BIT(pin)) ? 1 : 0;
   11d04:	bf1c      	itt	ne
   11d06:	40d0      	lsrne	r0, r2
   11d08:	f000 0001 	andne.w	r0, r0, #1
   11d0c:	6018      	str	r0, [r3, #0]
}
   11d0e:	2000      	movs	r0, #0
   11d10:	bd70      	pop	{r4, r5, r6, pc}

00011d12 <gpio_nrfx_manage_callback>:
	return gpio_manage_callback(&get_port_data(port)->callbacks,
   11d12:	6883      	ldr	r3, [r0, #8]
{
   11d14:	b530      	push	{r4, r5, lr}
Z_GENLIST_IS_EMPTY(slist)
   11d16:	6818      	ldr	r0, [r3, #0]
					bool set)
{
	__ASSERT(callback, "No callback!");
	__ASSERT(callback->handler, "No callback handler!");

	if (!sys_slist_is_empty(callbacks)) {
   11d18:	b158      	cbz	r0, 11d32 <gpio_nrfx_manage_callback+0x20>
 * @return true if node was removed
 */
static inline bool sys_slist_find_and_remove(sys_slist_t *list,
					     sys_snode_t *node);

Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   11d1a:	2400      	movs	r4, #0
   11d1c:	4281      	cmp	r1, r0
   11d1e:	d113      	bne.n	11d48 <gpio_nrfx_manage_callback+0x36>
   11d20:	6808      	ldr	r0, [r1, #0]
Z_GENLIST_REMOVE(slist, snode)
   11d22:	b95c      	cbnz	r4, 11d3c <gpio_nrfx_manage_callback+0x2a>
   11d24:	685c      	ldr	r4, [r3, #4]
	list->head = node;
   11d26:	6018      	str	r0, [r3, #0]
Z_GENLIST_REMOVE(slist, snode)
   11d28:	42a1      	cmp	r1, r4
   11d2a:	d100      	bne.n	11d2e <gpio_nrfx_manage_callback+0x1c>
	list->tail = node;
   11d2c:	6058      	str	r0, [r3, #4]
	parent->next = child;
   11d2e:	2000      	movs	r0, #0
   11d30:	6008      	str	r0, [r1, #0]
				return -EINVAL;
			}
		}
	}

	if (set) {
   11d32:	b972      	cbnz	r2, 11d52 <gpio_nrfx_manage_callback+0x40>
		sys_slist_prepend(callbacks, &callback->node);
	}

	return 0;
   11d34:	2000      	movs	r0, #0
}
   11d36:	bd30      	pop	{r4, r5, pc}
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   11d38:	4628      	mov	r0, r5
   11d3a:	e7ef      	b.n	11d1c <gpio_nrfx_manage_callback+0xa>
	parent->next = child;
   11d3c:	6020      	str	r0, [r4, #0]
Z_GENLIST_REMOVE(slist, snode)
   11d3e:	6858      	ldr	r0, [r3, #4]
   11d40:	4281      	cmp	r1, r0
	list->tail = node;
   11d42:	bf08      	it	eq
   11d44:	605c      	streq	r4, [r3, #4]
   11d46:	e7f2      	b.n	11d2e <gpio_nrfx_manage_callback+0x1c>
	return node->next;
   11d48:	6805      	ldr	r5, [r0, #0]
   11d4a:	4604      	mov	r4, r0
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   11d4c:	2d00      	cmp	r5, #0
   11d4e:	d1f3      	bne.n	11d38 <gpio_nrfx_manage_callback+0x26>
			if (!set) {
   11d50:	b13a      	cbz	r2, 11d62 <gpio_nrfx_manage_callback+0x50>
Z_GENLIST_PREPEND(slist, snode)
   11d52:	681a      	ldr	r2, [r3, #0]
	parent->next = child;
   11d54:	600a      	str	r2, [r1, #0]
Z_GENLIST_PREPEND(slist, snode)
   11d56:	6858      	ldr	r0, [r3, #4]
	list->head = node;
   11d58:	6019      	str	r1, [r3, #0]
Z_GENLIST_PREPEND(slist, snode)
   11d5a:	2800      	cmp	r0, #0
   11d5c:	d1ea      	bne.n	11d34 <gpio_nrfx_manage_callback+0x22>
	list->tail = node;
   11d5e:	6059      	str	r1, [r3, #4]
   11d60:	e7e9      	b.n	11d36 <gpio_nrfx_manage_callback+0x24>
				return -EINVAL;
   11d62:	f06f 0015 	mvn.w	r0, #21
	return gpio_manage_callback(&get_port_data(port)->callbacks,
   11d66:	e7e6      	b.n	11d36 <gpio_nrfx_manage_callback+0x24>

00011d68 <gpio_nrfx_pin_disable_callback>:
	if (access_op == GPIO_ACCESS_BY_PORT) {
   11d68:	2901      	cmp	r1, #1
{
   11d6a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
		from_pin = pin;
   11d6e:	bf18      	it	ne
   11d70:	b2d4      	uxtbne	r4, r2
{
   11d72:	4606      	mov	r6, r0
		to_pin   = pin;
   11d74:	bf12      	itee	ne
   11d76:	4625      	movne	r5, r4
		to_pin   = 31U;
   11d78:	251f      	moveq	r5, #31
		from_pin = 0U;
   11d7a:	2400      	moveq	r4, #0
		WRITE_BIT(data->int_en, curr_pin, enable);
   11d7c:	f04f 0801 	mov.w	r8, #1
	struct gpio_nrfx_data *data = get_port_data(port);
   11d80:	6887      	ldr	r7, [r0, #8]
	for (u8_t curr_pin = from_pin; curr_pin <= to_pin; ++curr_pin) {
   11d82:	42ac      	cmp	r4, r5
   11d84:	d902      	bls.n	11d8c <gpio_nrfx_pin_disable_callback+0x24>
	return res;
   11d86:	2000      	movs	r0, #0
}
   11d88:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		WRITE_BIT(data->int_en, curr_pin, enable);
   11d8c:	68fb      	ldr	r3, [r7, #12]
   11d8e:	fa08 f204 	lsl.w	r2, r8, r4
   11d92:	ea23 0302 	bic.w	r3, r3, r2
   11d96:	60fb      	str	r3, [r7, #12]
		res = gpiote_pin_int_cfg(port, curr_pin);
   11d98:	4621      	mov	r1, r4
   11d9a:	4630      	mov	r0, r6
   11d9c:	f7fd f966 	bl	f06c <gpiote_pin_int_cfg>
		if (res != 0) {
   11da0:	2800      	cmp	r0, #0
   11da2:	d1f1      	bne.n	11d88 <gpio_nrfx_pin_disable_callback+0x20>
	for (u8_t curr_pin = from_pin; curr_pin <= to_pin; ++curr_pin) {
   11da4:	3401      	adds	r4, #1
   11da6:	b2e4      	uxtb	r4, r4
   11da8:	e7eb      	b.n	11d82 <gpio_nrfx_pin_disable_callback+0x1a>

00011daa <gpio_nrfx_pin_enable_callback>:
	if (access_op == GPIO_ACCESS_BY_PORT) {
   11daa:	2901      	cmp	r1, #1
{
   11dac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
		from_pin = pin;
   11db0:	bf18      	it	ne
   11db2:	b2d4      	uxtbne	r4, r2
{
   11db4:	4606      	mov	r6, r0
		to_pin   = pin;
   11db6:	bf12      	itee	ne
   11db8:	4625      	movne	r5, r4
		to_pin   = 31U;
   11dba:	251f      	moveq	r5, #31
		from_pin = 0U;
   11dbc:	2400      	moveq	r4, #0
		WRITE_BIT(data->int_en, curr_pin, enable);
   11dbe:	f04f 0801 	mov.w	r8, #1
	struct gpio_nrfx_data *data = get_port_data(port);
   11dc2:	6887      	ldr	r7, [r0, #8]
	for (u8_t curr_pin = from_pin; curr_pin <= to_pin; ++curr_pin) {
   11dc4:	42ac      	cmp	r4, r5
   11dc6:	d902      	bls.n	11dce <gpio_nrfx_pin_enable_callback+0x24>
	return res;
   11dc8:	2000      	movs	r0, #0
}
   11dca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		WRITE_BIT(data->int_en, curr_pin, enable);
   11dce:	68fb      	ldr	r3, [r7, #12]
   11dd0:	fa08 f204 	lsl.w	r2, r8, r4
   11dd4:	4313      	orrs	r3, r2
   11dd6:	60fb      	str	r3, [r7, #12]
		res = gpiote_pin_int_cfg(port, curr_pin);
   11dd8:	4621      	mov	r1, r4
   11dda:	4630      	mov	r0, r6
   11ddc:	f7fd f946 	bl	f06c <gpiote_pin_int_cfg>
		if (res != 0) {
   11de0:	2800      	cmp	r0, #0
   11de2:	d1f2      	bne.n	11dca <gpio_nrfx_pin_enable_callback+0x20>
	for (u8_t curr_pin = from_pin; curr_pin <= to_pin; ++curr_pin) {
   11de4:	3401      	adds	r4, #1
   11de6:	b2e4      	uxtb	r4, r4
   11de8:	e7ec      	b.n	11dc4 <gpio_nrfx_pin_enable_callback+0x1a>

00011dea <gpio_pin_write>:
{
   11dea:	b410      	push	{r4}
   11dec:	4613      	mov	r3, r2
	return api->write(port, access_op, pin, value);
   11dee:	6842      	ldr	r2, [r0, #4]
   11df0:	6854      	ldr	r4, [r2, #4]
   11df2:	460a      	mov	r2, r1
   11df4:	46a4      	mov	ip, r4
   11df6:	2100      	movs	r1, #0
}
   11df8:	bc10      	pop	{r4}
	return api->write(port, access_op, pin, value);
   11dfa:	4760      	bx	ip

00011dfc <_spi_context_cs_control.isra.7>:
static inline void _spi_context_cs_control(struct spi_context *ctx,
   11dfc:	b538      	push	{r3, r4, r5, lr}
	if (ctx->config && ctx->config->cs && ctx->config->cs->gpio_dev) {
   11dfe:	6804      	ldr	r4, [r0, #0]
static inline void _spi_context_cs_control(struct spi_context *ctx,
   11e00:	4605      	mov	r5, r0
	if (ctx->config && ctx->config->cs && ctx->config->cs->gpio_dev) {
   11e02:	b324      	cbz	r4, 11e4e <_spi_context_cs_control.isra.7+0x52>
   11e04:	68a3      	ldr	r3, [r4, #8]
   11e06:	b313      	cbz	r3, 11e4e <_spi_context_cs_control.isra.7+0x52>
   11e08:	6818      	ldr	r0, [r3, #0]
   11e0a:	b300      	cbz	r0, 11e4e <_spi_context_cs_control.isra.7+0x52>
		if (on) {
   11e0c:	b161      	cbz	r1, 11e28 <_spi_context_cs_control.isra.7+0x2c>
	if (ctx->config->operation & SPI_CS_ACTIVE_HIGH) {
   11e0e:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
			gpio_pin_write(ctx->config->cs->gpio_dev,
   11e12:	6859      	ldr	r1, [r3, #4]
   11e14:	0fd2      	lsrs	r2, r2, #31
   11e16:	f7ff ffe8 	bl	11dea <gpio_pin_write>
			k_busy_wait(ctx->config->cs->delay);
   11e1a:	682b      	ldr	r3, [r5, #0]
   11e1c:	689b      	ldr	r3, [r3, #8]
   11e1e:	6898      	ldr	r0, [r3, #8]
}
   11e20:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_impl_k_busy_wait(usec_to_wait);
   11e24:	f000 b989 	b.w	1213a <z_impl_k_busy_wait>
			if (!force_off &&
   11e28:	b912      	cbnz	r2, 11e30 <_spi_context_cs_control.isra.7+0x34>
   11e2a:	88a2      	ldrh	r2, [r4, #4]
   11e2c:	0492      	lsls	r2, r2, #18
   11e2e:	d40e      	bmi.n	11e4e <_spi_context_cs_control.isra.7+0x52>
			k_busy_wait(ctx->config->cs->delay);
   11e30:	6898      	ldr	r0, [r3, #8]
   11e32:	f000 f982 	bl	1213a <z_impl_k_busy_wait>
			gpio_pin_write(ctx->config->cs->gpio_dev,
   11e36:	682a      	ldr	r2, [r5, #0]
   11e38:	6893      	ldr	r3, [r2, #8]
	if (ctx->config->operation & SPI_CS_ACTIVE_HIGH) {
   11e3a:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
			gpio_pin_write(ctx->config->cs->gpio_dev,
   11e3e:	e9d3 0100 	ldrd	r0, r1, [r3]
   11e42:	43d2      	mvns	r2, r2
}
   11e44:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
			gpio_pin_write(ctx->config->cs->gpio_dev,
   11e48:	0fd2      	lsrs	r2, r2, #31
   11e4a:	f7ff bfce 	b.w	11dea <gpio_pin_write>
}
   11e4e:	bd38      	pop	{r3, r4, r5, pc}

00011e50 <spi_context_unlock_unconditionally>:
{
   11e50:	b510      	push	{r4, lr}
	_spi_context_cs_control(ctx, false, true);
   11e52:	2201      	movs	r2, #1
   11e54:	2100      	movs	r1, #0
{
   11e56:	4604      	mov	r4, r0
	_spi_context_cs_control(ctx, false, true);
   11e58:	f7ff ffd0 	bl	11dfc <_spi_context_cs_control.isra.7>
	if (!k_sem_count_get(&ctx->lock)) {
   11e5c:	68e3      	ldr	r3, [r4, #12]
   11e5e:	b923      	cbnz	r3, 11e6a <spi_context_unlock_unconditionally+0x1a>
	z_impl_k_sem_give(sem);
   11e60:	1d20      	adds	r0, r4, #4
}
   11e62:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   11e66:	f7fe bc83 	b.w	10770 <z_impl_k_sem_give>
   11e6a:	bd10      	pop	{r4, pc}

00011e6c <spi_nrfx_release>:
	struct spi_nrfx_data *dev_data = get_dev_data(dev);
   11e6c:	6880      	ldr	r0, [r0, #8]
{
   11e6e:	b510      	push	{r4, lr}
	if (!spi_context_configured(&dev_data->ctx, spi_cfg)) {
   11e70:	6803      	ldr	r3, [r0, #0]
   11e72:	428b      	cmp	r3, r1
   11e74:	d106      	bne.n	11e84 <spi_nrfx_release+0x18>
	if (dev_data->busy) {
   11e76:	f890 404c 	ldrb.w	r4, [r0, #76]	; 0x4c
   11e7a:	b934      	cbnz	r4, 11e8a <spi_nrfx_release+0x1e>
	spi_context_unlock_unconditionally(&dev_data->ctx);
   11e7c:	f7ff ffe8 	bl	11e50 <spi_context_unlock_unconditionally>
	return 0;
   11e80:	4620      	mov	r0, r4
}
   11e82:	bd10      	pop	{r4, pc}
		return -EINVAL;
   11e84:	f06f 0015 	mvn.w	r0, #21
   11e88:	e7fb      	b.n	11e82 <spi_nrfx_release+0x16>
		return -EBUSY;
   11e8a:	f06f 000f 	mvn.w	r0, #15
   11e8e:	e7f8      	b.n	11e82 <spi_nrfx_release+0x16>

00011e90 <uarte_nrfx_config_get>:
{
   11e90:	460b      	mov	r3, r1
	*cfg = get_dev_data(dev)->uart_config;
   11e92:	6882      	ldr	r2, [r0, #8]
   11e94:	e892 0003 	ldmia.w	r2, {r0, r1}
   11e98:	e883 0003 	stmia.w	r3, {r0, r1}
}
   11e9c:	2000      	movs	r0, #0
   11e9e:	4770      	bx	lr

00011ea0 <uarte_nrfx_err_check>:
	return dev->config->config_info;
   11ea0:	6803      	ldr	r3, [r0, #0]
	return config->uarte_regs;
   11ea2:	689b      	ldr	r3, [r3, #8]
   11ea4:	681b      	ldr	r3, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   11ea6:	f8d3 0124 	ldr.w	r0, [r3, #292]	; 0x124
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ERROR)) {
   11eaa:	b118      	cbz	r0, 11eb4 <uarte_nrfx_err_check+0x14>
    uint32_t errsrc_mask = p_reg->ERRORSRC;
   11eac:	f8d3 0480 	ldr.w	r0, [r3, #1152]	; 0x480
    p_reg->ERRORSRC = errsrc_mask;
   11eb0:	f8c3 0480 	str.w	r0, [r3, #1152]	; 0x480
}
   11eb4:	4770      	bx	lr

00011eb6 <uarte_nrfx_poll_in>:
	return dev->config->config_info;
   11eb6:	6803      	ldr	r3, [r0, #0]
	const struct uarte_nrfx_data *data = get_dev_data(dev);
   11eb8:	6882      	ldr	r2, [r0, #8]
	return config->uarte_regs;
   11eba:	689b      	ldr	r3, [r3, #8]
   11ebc:	681b      	ldr	r3, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   11ebe:	f8d3 0110 	ldr.w	r0, [r3, #272]	; 0x110
	if (!nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
   11ec2:	b138      	cbz	r0, 11ed4 <uarte_nrfx_poll_in+0x1e>
	*c = data->rx_data;
   11ec4:	7a12      	ldrb	r2, [r2, #8]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   11ec6:	2000      	movs	r0, #0
   11ec8:	700a      	strb	r2, [r1, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   11eca:	2201      	movs	r2, #1
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   11ecc:	f8c3 0110 	str.w	r0, [r3, #272]	; 0x110
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   11ed0:	601a      	str	r2, [r3, #0]
	return 0;
   11ed2:	4770      	bx	lr
		return -1;
   11ed4:	f04f 30ff 	mov.w	r0, #4294967295
}
   11ed8:	4770      	bx	lr

00011eda <uarte_nrfx_poll_out>:
{
   11eda:	b082      	sub	sp, #8
   11edc:	aa02      	add	r2, sp, #8
   11ede:	f802 1d01 	strb.w	r1, [r2, #-1]!
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   11ee2:	2100      	movs	r1, #0
	return dev->config->config_info;
   11ee4:	6803      	ldr	r3, [r0, #0]
	return config->uarte_regs;
   11ee6:	689b      	ldr	r3, [r3, #8]
   11ee8:	681b      	ldr	r3, [r3, #0]
   11eea:	f8c3 1120 	str.w	r1, [r3, #288]	; 0x120
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   11eee:	f8c3 2544 	str.w	r2, [r3, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
   11ef2:	2201      	movs	r2, #1
   11ef4:	f8c3 2548 	str.w	r2, [r3, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   11ef8:	609a      	str	r2, [r3, #8]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   11efa:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
	while (!nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDTX)) {
   11efe:	2900      	cmp	r1, #0
   11f00:	d0fb      	beq.n	11efa <uarte_nrfx_poll_out+0x20>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   11f02:	60da      	str	r2, [r3, #12]
}
   11f04:	b002      	add	sp, #8
   11f06:	4770      	bx	lr

00011f08 <nrfx_isr>:

#include <nrfx.h>

void nrfx_isr(void *irq_handler)
{
	((nrfx_irq_handler_t)irq_handler)();
   11f08:	4700      	bx	r0

00011f0a <z_arch_system_halt>:
	__asm__ volatile(
   11f0a:	f04f 0220 	mov.w	r2, #32
   11f0e:	f3ef 8311 	mrs	r3, BASEPRI
   11f12:	f382 8811 	msr	BASEPRI, r2
   11f16:	f3bf 8f6f 	isb	sy
   11f1a:	e7fe      	b.n	11f1a <z_arch_system_halt+0x10>

00011f1c <z_sys_power_save_idle_exit>:
	z_clock_idle_exit();
   11f1c:	f7ff bd83 	b.w	11a26 <z_clock_idle_exit>

00011f20 <k_mem_slab_init>:
{
   11f20:	b530      	push	{r4, r5, lr}
	slab->num_used = 0U;
   11f22:	2400      	movs	r4, #0
	slab->block_size = block_size;
   11f24:	e9c0 3202 	strd	r3, r2, [r0, #8]
	slab->free_list = NULL;
   11f28:	e9c0 4405 	strd	r4, r4, [r0, #20]
	slab->buffer = buffer;
   11f2c:	6101      	str	r1, [r0, #16]
	for (j = 0U; j < slab->num_blocks; j++) {
   11f2e:	42a3      	cmp	r3, r4
   11f30:	d102      	bne.n	11f38 <k_mem_slab_init+0x18>
	list->tail = (sys_dnode_t *)list;
   11f32:	e9c0 0000 	strd	r0, r0, [r0]
}
   11f36:	bd30      	pop	{r4, r5, pc}
		*(char **)p = slab->free_list;
   11f38:	6945      	ldr	r5, [r0, #20]
	for (j = 0U; j < slab->num_blocks; j++) {
   11f3a:	3401      	adds	r4, #1
		*(char **)p = slab->free_list;
   11f3c:	600d      	str	r5, [r1, #0]
		slab->free_list = p;
   11f3e:	6141      	str	r1, [r0, #20]
		p += slab->block_size;
   11f40:	4411      	add	r1, r2
   11f42:	e7f4      	b.n	11f2e <k_mem_slab_init+0xe>

00011f44 <k_mem_pool_malloc>:
{
   11f44:	b513      	push	{r0, r1, r4, lr}
	return __builtin_add_overflow(a, b, result);
}

static inline bool size_add_overflow(size_t a, size_t b, size_t *result)
{
	return __builtin_add_overflow(a, b, result);
   11f46:	2404      	movs	r4, #4
   11f48:	190a      	adds	r2, r1, r4
   11f4a:	d204      	bcs.n	11f56 <k_mem_pool_malloc+0x12>
	if (k_mem_pool_alloc(pool, &block, size, K_NO_WAIT) != 0) {
   11f4c:	2300      	movs	r3, #0
   11f4e:	4669      	mov	r1, sp
   11f50:	f7fe f924 	bl	1019c <k_mem_pool_alloc>
   11f54:	b110      	cbz	r0, 11f5c <k_mem_pool_malloc+0x18>
		return NULL;
   11f56:	2000      	movs	r0, #0
}
   11f58:	b002      	add	sp, #8
   11f5a:	bd10      	pop	{r4, pc}
	(void)memcpy(block.data, &block.id, sizeof(struct k_mem_block_id));
   11f5c:	4622      	mov	r2, r4
   11f5e:	a901      	add	r1, sp, #4
   11f60:	9800      	ldr	r0, [sp, #0]
   11f62:	f7ff fdc7 	bl	11af4 <memcpy>
	return (char *)block.data + WB_UP(sizeof(struct k_mem_block_id));
   11f66:	9800      	ldr	r0, [sp, #0]
   11f68:	3004      	adds	r0, #4
   11f6a:	e7f5      	b.n	11f58 <k_mem_pool_malloc+0x14>

00011f6c <z_is_thread_ready>:
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
   11f6c:	7b43      	ldrb	r3, [r0, #13]
   11f6e:	06db      	lsls	r3, r3, #27
   11f70:	bf03      	ittte	eq
   11f72:	6980      	ldreq	r0, [r0, #24]
   11f74:	fab0 f080 	clzeq	r0, r0
   11f78:	0940      	lsreq	r0, r0, #5
   11f7a:	2000      	movne	r0, #0
}
   11f7c:	4770      	bx	lr

00011f7e <z_find_first_thread_to_unpend>:
{
   11f7e:	b510      	push	{r4, lr}
   11f80:	f04f 0320 	mov.w	r3, #32
   11f84:	f3ef 8411 	mrs	r4, BASEPRI
   11f88:	f383 8811 	msr	BASEPRI, r3
   11f8c:	f3bf 8f6f 	isb	sy
		ret = _priq_wait_best(&wait_q->waitq);
   11f90:	f000 f847 	bl	12022 <z_priq_dumb_best>
	__asm__ volatile(
   11f94:	f384 8811 	msr	BASEPRI, r4
   11f98:	f3bf 8f6f 	isb	sy
}
   11f9c:	bd10      	pop	{r4, pc}

00011f9e <z_unpend_thread_no_timeout>:
{
   11f9e:	b538      	push	{r3, r4, r5, lr}
   11fa0:	4604      	mov	r4, r0
	__asm__ volatile(
   11fa2:	f04f 0320 	mov.w	r3, #32
   11fa6:	f3ef 8511 	mrs	r5, BASEPRI
   11faa:	f383 8811 	msr	BASEPRI, r3
   11fae:	f3bf 8f6f 	isb	sy
		_priq_wait_remove(&pended_on(thread)->waitq, thread);
   11fb2:	4601      	mov	r1, r0
   11fb4:	6880      	ldr	r0, [r0, #8]
   11fb6:	f7fe f9ab 	bl	10310 <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
   11fba:	7b63      	ldrb	r3, [r4, #13]
   11fbc:	f023 0302 	bic.w	r3, r3, #2
   11fc0:	7363      	strb	r3, [r4, #13]
	__asm__ volatile(
   11fc2:	f385 8811 	msr	BASEPRI, r5
   11fc6:	f3bf 8f6f 	isb	sy
	thread->base.pended_on = NULL;
   11fca:	2300      	movs	r3, #0
   11fcc:	60a3      	str	r3, [r4, #8]
}
   11fce:	bd38      	pop	{r3, r4, r5, pc}

00011fd0 <z_reschedule>:
{
   11fd0:	b508      	push	{r3, lr}
	return z_arch_irq_unlocked(key) && !z_arch_is_in_isr();
   11fd2:	b939      	cbnz	r1, 11fe4 <z_reschedule+0x14>
   11fd4:	f7fe f934 	bl	10240 <resched.part.15>
	if (resched(key.key)) {
   11fd8:	b120      	cbz	r0, 11fe4 <z_reschedule+0x14>
}
   11fda:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   11fde:	4608      	mov	r0, r1
   11fe0:	f7fb bd66 	b.w	dab0 <z_arch_swap>
   11fe4:	f381 8811 	msr	BASEPRI, r1
   11fe8:	f3bf 8f6f 	isb	sy
   11fec:	bd08      	pop	{r3, pc}

00011fee <z_reschedule_irqlock>:
{
   11fee:	b508      	push	{r3, lr}
	return z_arch_irq_unlocked(key) && !z_arch_is_in_isr();
   11ff0:	4602      	mov	r2, r0
   11ff2:	b938      	cbnz	r0, 12004 <z_reschedule_irqlock+0x16>
   11ff4:	f7fe f924 	bl	10240 <resched.part.15>
	if (resched(key)) {
   11ff8:	b120      	cbz	r0, 12004 <z_reschedule_irqlock+0x16>
}
   11ffa:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   11ffe:	4610      	mov	r0, r2
   12000:	f7fb bd56 	b.w	dab0 <z_arch_swap>
   12004:	f382 8811 	msr	BASEPRI, r2
   12008:	f3bf 8f6f 	isb	sy
   1200c:	bd08      	pop	{r3, pc}

0001200e <z_reschedule_unlocked>:
	__asm__ volatile(
   1200e:	f04f 0320 	mov.w	r3, #32
   12012:	f3ef 8011 	mrs	r0, BASEPRI
   12016:	f383 8811 	msr	BASEPRI, r3
   1201a:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(z_arch_irq_lock());
   1201e:	f7ff bfe6 	b.w	11fee <z_reschedule_irqlock>

00012022 <z_priq_dumb_best>:
	return list->head == list;
   12022:	6803      	ldr	r3, [r0, #0]
}
   12024:	4298      	cmp	r0, r3
   12026:	bf14      	ite	ne
   12028:	4618      	movne	r0, r3
   1202a:	2000      	moveq	r0, #0
   1202c:	4770      	bx	lr

0001202e <z_thread_timeout>:
	if (th->base.pended_on != NULL) {
   1202e:	f850 3c10 	ldr.w	r3, [r0, #-16]
{
   12032:	b570      	push	{r4, r5, r6, lr}
   12034:	4604      	mov	r4, r0
	struct k_thread *th = CONTAINER_OF(to, struct k_thread, base.timeout);
   12036:	f1a0 0518 	sub.w	r5, r0, #24
	if (th->base.pended_on != NULL) {
   1203a:	b1cb      	cbz	r3, 12070 <z_thread_timeout+0x42>
   1203c:	f04f 0320 	mov.w	r3, #32
   12040:	f3ef 8611 	mrs	r6, BASEPRI
   12044:	f383 8811 	msr	BASEPRI, r3
   12048:	f3bf 8f6f 	isb	sy
		_priq_wait_remove(&pended_on(thread)->waitq, thread);
   1204c:	4629      	mov	r1, r5
   1204e:	f850 0c10 	ldr.w	r0, [r0, #-16]
   12052:	f7fe f95d 	bl	10310 <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
   12056:	f814 3c0b 	ldrb.w	r3, [r4, #-11]
   1205a:	f023 0302 	bic.w	r3, r3, #2
   1205e:	f804 3c0b 	strb.w	r3, [r4, #-11]
	__asm__ volatile(
   12062:	f386 8811 	msr	BASEPRI, r6
   12066:	f3bf 8f6f 	isb	sy
	thread->base.pended_on = NULL;
   1206a:	2300      	movs	r3, #0
   1206c:	f844 3c10 	str.w	r3, [r4, #-16]
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
   12070:	f814 3c0b 	ldrb.w	r3, [r4, #-11]
	if (z_is_thread_ready(thread)) {
   12074:	4628      	mov	r0, r5
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
   12076:	f023 0314 	bic.w	r3, r3, #20
   1207a:	f804 3c0b 	strb.w	r3, [r4, #-11]
	if (z_is_thread_ready(thread)) {
   1207e:	f7ff ff75 	bl	11f6c <z_is_thread_ready>
   12082:	b120      	cbz	r0, 1208e <z_thread_timeout+0x60>
		z_add_thread_to_ready_q(thread);
   12084:	4628      	mov	r0, r5
}
   12086:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   1208a:	f7fe b991 	b.w	103b0 <z_add_thread_to_ready_q>
   1208e:	bd70      	pop	{r4, r5, r6, pc}

00012090 <z_unpend_first_thread>:
{
   12090:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
   12092:	f04f 0320 	mov.w	r3, #32
   12096:	f3ef 8211 	mrs	r2, BASEPRI
   1209a:	f383 8811 	msr	BASEPRI, r3
   1209e:	f3bf 8f6f 	isb	sy
		ret = _priq_wait_best(&wait_q->waitq);
   120a2:	f7ff ffbe 	bl	12022 <z_priq_dumb_best>
   120a6:	4604      	mov	r4, r0
	__asm__ volatile(
   120a8:	f382 8811 	msr	BASEPRI, r2
   120ac:	f3bf 8f6f 	isb	sy

static inline struct k_thread *z_unpend1_no_timeout(_wait_q_t *wait_q)
{
	struct k_thread *thread = z_find_first_thread_to_unpend(wait_q, NULL);

	if (thread != NULL) {
   120b0:	b1c8      	cbz	r0, 120e6 <z_unpend_first_thread+0x56>
	__asm__ volatile(
   120b2:	f04f 0320 	mov.w	r3, #32
   120b6:	f3ef 8511 	mrs	r5, BASEPRI
   120ba:	f383 8811 	msr	BASEPRI, r3
   120be:	f3bf 8f6f 	isb	sy
		_priq_wait_remove(&pended_on(thread)->waitq, thread);
   120c2:	4601      	mov	r1, r0
   120c4:	6880      	ldr	r0, [r0, #8]
   120c6:	f7fe f923 	bl	10310 <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
   120ca:	7b63      	ldrb	r3, [r4, #13]
   120cc:	f023 0302 	bic.w	r3, r3, #2
   120d0:	7363      	strb	r3, [r4, #13]
	__asm__ volatile(
   120d2:	f385 8811 	msr	BASEPRI, r5
   120d6:	f3bf 8f6f 	isb	sy
	thread->base.pended_on = NULL;
   120da:	2300      	movs	r3, #0
}

static inline int z_abort_thread_timeout(struct k_thread *thread)
{
	return z_abort_timeout(&thread->base.timeout);
   120dc:	f104 0018 	add.w	r0, r4, #24
   120e0:	60a3      	str	r3, [r4, #8]
   120e2:	f000 f858 	bl	12196 <z_abort_timeout>
}
   120e6:	4620      	mov	r0, r4
   120e8:	bd38      	pop	{r3, r4, r5, pc}

000120ea <z_impl_k_sleep>:
{
   120ea:	b538      	push	{r3, r4, r5, lr}
   120ec:	f44f 4100 	mov.w	r1, #32768	; 0x8000
   120f0:	f240 34e7 	movw	r4, #999	; 0x3e7
   120f4:	2500      	movs	r5, #0
   120f6:	fbc1 4500 	smlal	r4, r5, r1, r0
   120fa:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   120fe:	4620      	mov	r0, r4
   12100:	2300      	movs	r3, #0
   12102:	4629      	mov	r1, r5
   12104:	f7fa f88c 	bl	c220 <__aeabi_ldivmod>
	if (ticks == 0) {
   12108:	4604      	mov	r4, r0
   1210a:	b948      	cbnz	r0, 12120 <z_impl_k_sleep+0x36>
	z_impl_k_yield();
   1210c:	f7fe fadc 	bl	106c8 <z_impl_k_yield>
}

static inline u64_t __ticks_to_ms(s64_t ticks)
{
#ifdef CONFIG_SYS_CLOCK_EXISTS
	return (u64_t)ticks * MSEC_PER_SEC /
   12110:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   12114:	fb84 2302 	smull	r2, r3, r4, r2
   12118:	0bd0      	lsrs	r0, r2, #15
}
   1211a:	ea40 4043 	orr.w	r0, r0, r3, lsl #17
   1211e:	bd38      	pop	{r3, r4, r5, pc}
   12120:	f7fe fa98 	bl	10654 <z_tick_sleep.part.19>
   12124:	4604      	mov	r4, r0
   12126:	e7f3      	b.n	12110 <z_impl_k_sleep+0x26>

00012128 <z_is_thread_ready>:
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
   12128:	7b43      	ldrb	r3, [r0, #13]
   1212a:	06db      	lsls	r3, r3, #27
   1212c:	bf03      	ittte	eq
   1212e:	6980      	ldreq	r0, [r0, #24]
   12130:	fab0 f080 	clzeq	r0, r0
   12134:	0940      	lsreq	r0, r0, #5
   12136:	2000      	movne	r0, #0
}
   12138:	4770      	bx	lr

0001213a <z_impl_k_busy_wait>:
	z_arch_busy_wait(usec_to_wait);
   1213a:	f7fa bb7f 	b.w	c83c <z_arch_busy_wait>

0001213e <z_impl_k_thread_name_set>:
}
   1213e:	f06f 0046 	mvn.w	r0, #70	; 0x46
   12142:	4770      	bx	lr

00012144 <k_thread_name_get>:
}
   12144:	2000      	movs	r0, #0
   12146:	4770      	bx	lr

00012148 <z_thread_single_abort>:
	if (thread->fn_abort != NULL) {
   12148:	6d03      	ldr	r3, [r0, #80]	; 0x50
{
   1214a:	b510      	push	{r4, lr}
   1214c:	4604      	mov	r4, r0
	if (thread->fn_abort != NULL) {
   1214e:	b103      	cbz	r3, 12152 <z_thread_single_abort+0xa>
		thread->fn_abort();
   12150:	4798      	blx	r3
	if (z_is_thread_ready(thread)) {
   12152:	4620      	mov	r0, r4
   12154:	f7ff ffe8 	bl	12128 <z_is_thread_ready>
   12158:	b138      	cbz	r0, 1216a <z_thread_single_abort+0x22>
		z_remove_thread_from_ready_q(thread);
   1215a:	4620      	mov	r0, r4
   1215c:	f7fe f9da 	bl	10514 <z_remove_thread_from_ready_q>
	thread->base.thread_state |= _THREAD_DEAD;
   12160:	7b63      	ldrb	r3, [r4, #13]
   12162:	f043 0308 	orr.w	r3, r3, #8
   12166:	7363      	strb	r3, [r4, #13]
}
   12168:	bd10      	pop	{r4, pc}
		if (z_is_thread_pending(thread)) {
   1216a:	7b63      	ldrb	r3, [r4, #13]
   1216c:	079b      	lsls	r3, r3, #30
   1216e:	d502      	bpl.n	12176 <z_thread_single_abort+0x2e>
			z_unpend_thread_no_timeout(thread);
   12170:	4620      	mov	r0, r4
   12172:	f7ff ff14 	bl	11f9e <z_unpend_thread_no_timeout>
		if (z_is_thread_timeout_active(thread)) {
   12176:	69a3      	ldr	r3, [r4, #24]
   12178:	2b00      	cmp	r3, #0
   1217a:	d0f1      	beq.n	12160 <z_thread_single_abort+0x18>
   1217c:	f104 0018 	add.w	r0, r4, #24
   12180:	f000 f809 	bl	12196 <z_abort_timeout>
   12184:	e7ec      	b.n	12160 <z_thread_single_abort+0x18>

00012186 <z_init_thread_base>:
void z_init_thread_base(struct _thread_base *thread_base, int priority,
		       u32_t initial_state, unsigned int options)
{
	/* k_q_node is initialized upon first insertion in a list */

	thread_base->user_options = (u8_t)options;
   12186:	7303      	strb	r3, [r0, #12]
	thread_base->thread_state = (u8_t)initial_state;

	thread_base->prio = priority;

	thread_base->sched_locked = 0U;
   12188:	2300      	movs	r3, #0
	thread_base->thread_state = (u8_t)initial_state;
   1218a:	7342      	strb	r2, [r0, #13]
	thread_base->prio = priority;
   1218c:	7381      	strb	r1, [r0, #14]
	thread_base->sched_locked = 0U;
   1218e:	73c3      	strb	r3, [r0, #15]
	node->prev = NULL;
   12190:	e9c0 3306 	strd	r3, r3, [r0, #24]
#endif

	/* swap_data does not need to be initialized */

	z_init_thread_timeout(thread_base);
}
   12194:	4770      	bx	lr

00012196 <z_abort_timeout>:
{
   12196:	b510      	push	{r4, lr}
	__asm__ volatile(
   12198:	f04f 0220 	mov.w	r2, #32
   1219c:	f3ef 8411 	mrs	r4, BASEPRI
   121a0:	f382 8811 	msr	BASEPRI, r2
   121a4:	f3bf 8f6f 	isb	sy
		if (sys_dnode_is_linked(&to->node)) {
   121a8:	6803      	ldr	r3, [r0, #0]
   121aa:	b13b      	cbz	r3, 121bc <z_abort_timeout+0x26>
			remove_timeout(to);
   121ac:	f7fe fbfc 	bl	109a8 <remove_timeout>
			ret = 0;
   121b0:	2000      	movs	r0, #0
	__asm__ volatile(
   121b2:	f384 8811 	msr	BASEPRI, r4
   121b6:	f3bf 8f6f 	isb	sy
}
   121ba:	bd10      	pop	{r4, pc}
	int ret = -EINVAL;
   121bc:	f06f 0015 	mvn.w	r0, #21
   121c0:	e7f7      	b.n	121b2 <z_abort_timeout+0x1c>

000121c2 <z_get_next_timeout_expiry>:
{
   121c2:	b510      	push	{r4, lr}
	__asm__ volatile(
   121c4:	f04f 0320 	mov.w	r3, #32
   121c8:	f3ef 8411 	mrs	r4, BASEPRI
   121cc:	f383 8811 	msr	BASEPRI, r3
   121d0:	f3bf 8f6f 	isb	sy
		ret = next_timeout();
   121d4:	f7fe fbfe 	bl	109d4 <next_timeout>
	__asm__ volatile(
   121d8:	f384 8811 	msr	BASEPRI, r4
   121dc:	f3bf 8f6f 	isb	sy
}
   121e0:	bd10      	pop	{r4, pc}

000121e2 <z_set_timeout_expiry>:
{
   121e2:	b570      	push	{r4, r5, r6, lr}
   121e4:	4604      	mov	r4, r0
   121e6:	460e      	mov	r6, r1
	__asm__ volatile(
   121e8:	f04f 0320 	mov.w	r3, #32
   121ec:	f3ef 8511 	mrs	r5, BASEPRI
   121f0:	f383 8811 	msr	BASEPRI, r3
   121f4:	f3bf 8f6f 	isb	sy
		int next = next_timeout();
   121f8:	f7fe fbec 	bl	109d4 <next_timeout>
		if (!imminent && (sooner || IS_ENABLED(CONFIG_SMP))) {
   121fc:	2801      	cmp	r0, #1
   121fe:	dd05      	ble.n	1220c <z_set_timeout_expiry+0x2a>
   12200:	42a0      	cmp	r0, r4
   12202:	dd03      	ble.n	1220c <z_set_timeout_expiry+0x2a>
			z_clock_set_timeout(ticks, idle);
   12204:	4631      	mov	r1, r6
   12206:	4620      	mov	r0, r4
   12208:	f7fb fb46 	bl	d898 <z_clock_set_timeout>
	__asm__ volatile(
   1220c:	f385 8811 	msr	BASEPRI, r5
   12210:	f3bf 8f6f 	isb	sy
}
   12214:	bd70      	pop	{r4, r5, r6, pc}

00012216 <z_tick_get_32>:

u32_t z_tick_get_32(void)
{
   12216:	b508      	push	{r3, lr}
#ifdef CONFIG_TICKLESS_KERNEL
	return (u32_t)z_tick_get();
   12218:	f7fe fc92 	bl	10b40 <z_tick_get>
#else
	return (u32_t)curr_tick;
#endif
}
   1221c:	bd08      	pop	{r3, pc}

0001221e <z_impl_k_uptime_get>:

s64_t z_impl_k_uptime_get(void)
{
   1221e:	b510      	push	{r4, lr}
	return __ticks_to_ms(z_tick_get());
   12220:	f7fe fc8e 	bl	10b40 <z_tick_get>
   12224:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
   12228:	fba0 2304 	umull	r2, r3, r0, r4
   1222c:	fb04 3301 	mla	r3, r4, r1, r3
   12230:	0bd0      	lsrs	r0, r2, #15
}
   12232:	ea40 4043 	orr.w	r0, r0, r3, lsl #17
   12236:	0bd9      	lsrs	r1, r3, #15
   12238:	bd10      	pop	{r4, pc}

0001223a <k_timer_init>:
	timer->status = 0U;
   1223a:	2300      	movs	r3, #0
	timer->stop_fn = stop_fn;
   1223c:	e9c0 1206 	strd	r1, r2, [r0, #24]
	SYS_DLIST_FOR_EACH_CONTAINER(&((wq)->waitq), thread_ptr, \
				     base.qnode_dlist)

static inline void z_waitq_init(_wait_q_t *w)
{
	sys_dlist_init(&w->waitq);
   12240:	f100 0210 	add.w	r2, r0, #16
	timer->status = 0U;
   12244:	6243      	str	r3, [r0, #36]	; 0x24
	list->tail = (sys_dnode_t *)list;
   12246:	e9c0 2204 	strd	r2, r2, [r0, #16]
	node->prev = NULL;
   1224a:	e9c0 3300 	strd	r3, r3, [r0]
	timer->user_data = NULL;
   1224e:	6283      	str	r3, [r0, #40]	; 0x28
}
   12250:	4770      	bx	lr

00012252 <z_impl_k_timer_stop>:
}
#include <syscalls/k_timer_start_mrsh.c>
#endif

void z_impl_k_timer_stop(struct k_timer *timer)
{
   12252:	b510      	push	{r4, lr}
   12254:	4604      	mov	r4, r0
	int inactive = z_abort_timeout(&timer->timeout) != 0;
   12256:	f7ff ff9e 	bl	12196 <z_abort_timeout>

	if (inactive) {
   1225a:	bb00      	cbnz	r0, 1229e <z_impl_k_timer_stop+0x4c>
		return;
	}

	if (timer->stop_fn != NULL) {
   1225c:	69e3      	ldr	r3, [r4, #28]
   1225e:	b10b      	cbz	r3, 12264 <z_impl_k_timer_stop+0x12>
		timer->stop_fn(timer);
   12260:	4620      	mov	r0, r4
   12262:	4798      	blx	r3
	struct k_thread *thread = z_find_first_thread_to_unpend(wait_q, NULL);
   12264:	f104 0010 	add.w	r0, r4, #16
   12268:	2100      	movs	r1, #0
   1226a:	f7ff fe88 	bl	11f7e <z_find_first_thread_to_unpend>
	if (thread != NULL) {
   1226e:	4604      	mov	r4, r0
   12270:	b1a8      	cbz	r0, 1229e <z_impl_k_timer_stop+0x4c>
		z_unpend_thread_no_timeout(thread);
   12272:	f7ff fe94 	bl	11f9e <z_unpend_thread_no_timeout>
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
   12276:	7b63      	ldrb	r3, [r4, #13]
   12278:	06db      	lsls	r3, r3, #27
   1227a:	d104      	bne.n	12286 <z_impl_k_timer_stop+0x34>
	if (z_is_thread_ready(thread)) {
   1227c:	69a3      	ldr	r3, [r4, #24]
   1227e:	b913      	cbnz	r3, 12286 <z_impl_k_timer_stop+0x34>
		z_add_thread_to_ready_q(thread);
   12280:	4620      	mov	r0, r4
   12282:	f7fe f895 	bl	103b0 <z_add_thread_to_ready_q>
	__asm__ volatile(
   12286:	f04f 0320 	mov.w	r3, #32
   1228a:	f3ef 8011 	mrs	r0, BASEPRI
   1228e:	f383 8811 	msr	BASEPRI, r3
   12292:	f3bf 8f6f 	isb	sy

	if (pending_thread != NULL) {
		z_ready_thread(pending_thread);
		z_reschedule_unlocked();
	}
}
   12296:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	(void) z_reschedule_irqlock(z_arch_irq_lock());
   1229a:	f7ff bea8 	b.w	11fee <z_reschedule_irqlock>
   1229e:	bd10      	pop	{r4, pc}

000122a0 <_OffsetAbsSyms>:
					    sizeof(struct _preempt_float));
#else
GEN_ABSOLUTE_SYM(_K_THREAD_NO_FLOAT_SIZEOF, sizeof(struct k_thread));
#endif

GEN_ABS_SYM_END
   122a0:	4770      	bx	lr
