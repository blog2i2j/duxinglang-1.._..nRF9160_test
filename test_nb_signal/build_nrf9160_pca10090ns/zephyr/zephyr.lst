
zephyr.elf:     file format elf32-littlearm


Disassembly of section rom_start:

0000c000 <_vector_table>:
    c000:	20025718 	.word	0x20025718
    c004:	0000d179 	.word	0x0000d179
    c008:	0001964b 	.word	0x0001964b
    c00c:	0000cf01 	.word	0x0000cf01
    c010:	0000cf01 	.word	0x0000cf01
    c014:	0000cf01 	.word	0x0000cf01
    c018:	0000cf01 	.word	0x0000cf01
    c01c:	0000cf01 	.word	0x0000cf01
    c020:	0000cf01 	.word	0x0000cf01
    c024:	0000cf01 	.word	0x0000cf01
    c028:	0000cf01 	.word	0x0000cf01
    c02c:	0000cec9 	.word	0x0000cec9
    c030:	0000cf01 	.word	0x0000cf01
    c034:	0000cf01 	.word	0x0000cf01
    c038:	0000ce19 	.word	0x0000ce19
    c03c:	0000caf9 	.word	0x0000caf9

0000c040 <_irq_vector_table>:
    c040:	0000cf1d 0000cf1d 0000cf1d 0000cf1d     ................
    c050:	0000cf1d 0000cf1d 0000cf1d 0000cf1d     ................
    c060:	0000cf1d 0000cf1d 0000cf1d 0000cf1d     ................
    c070:	0000cf1d 0000cf1d 0000cf1d 0000cf1d     ................
    c080:	0000cf1d 0000cf1d 0000cf1d 0000cf1d     ................
    c090:	0000cf1d 0000cf1d 0000cf1d 0000cf1d     ................
    c0a0:	0000cf1d 0000cf1d 0000cf1d 0000cf1d     ................
    c0b0:	0000e981 00019b6f 0000cf1d 0000cf1d     ....o...........
    c0c0:	0000cf1d 0000cf1d 0000cf1d 0000cf1d     ................
    c0d0:	0000cf1d 0000cf1d 0000cf1d 0000cf1d     ................
    c0e0:	0000cf1d 0000cf1d 00019b8d 0000cf1d     ................
    c0f0:	0000cf1d 0000cf1d 0000cf1d 0000cf1d     ................
    c100:	0000cf1d 0000cf1d 0000cf1d 0000cf1d     ................
    c110:	0000cf1d 0000cf1d 0000cf1d 0000cf1d     ................
    c120:	0000cf1d 0000cf1d 0000cf1d 0000cf1d     ................
    c130:	0000cf1d 0000cf1d 0000cf1d 0000cf1d     ................
    c140:	0000cf1d                                ....

0000c144 <_vector_end>:
	...

0000c200 <m_firmware_info>:
    c200:	281ee6de 8fcebb4c 00005b02 0000003c     ...(L....[..<...
    c210:	0000f9c4 00000001 0000c000 0000c000     ................
    c220:	9102ffff 00000000 00000000 00000000     ................
	...

Disassembly of section text:

0000c23c <__aeabi_uldivmod>:
    c23c:	b953      	cbnz	r3, c254 <__aeabi_uldivmod+0x18>
    c23e:	b94a      	cbnz	r2, c254 <__aeabi_uldivmod+0x18>
    c240:	2900      	cmp	r1, #0
    c242:	bf08      	it	eq
    c244:	2800      	cmpeq	r0, #0
    c246:	bf1c      	itt	ne
    c248:	f04f 31ff 	movne.w	r1, #4294967295
    c24c:	f04f 30ff 	movne.w	r0, #4294967295
    c250:	f000 b970 	b.w	c534 <__aeabi_idiv0>
    c254:	f1ad 0c08 	sub.w	ip, sp, #8
    c258:	e96d ce04 	strd	ip, lr, [sp, #-16]!
    c25c:	f000 f806 	bl	c26c <__udivmoddi4>
    c260:	f8dd e004 	ldr.w	lr, [sp, #4]
    c264:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    c268:	b004      	add	sp, #16
    c26a:	4770      	bx	lr

0000c26c <__udivmoddi4>:
    c26c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    c270:	9e09      	ldr	r6, [sp, #36]	; 0x24
    c272:	4604      	mov	r4, r0
    c274:	4689      	mov	r9, r1
    c276:	2b00      	cmp	r3, #0
    c278:	f040 8083 	bne.w	c382 <__udivmoddi4+0x116>
    c27c:	428a      	cmp	r2, r1
    c27e:	4615      	mov	r5, r2
    c280:	d945      	bls.n	c30e <__udivmoddi4+0xa2>
    c282:	fab2 f282 	clz	r2, r2
    c286:	b14a      	cbz	r2, c29c <__udivmoddi4+0x30>
    c288:	f1c2 0720 	rsb	r7, r2, #32
    c28c:	fa01 f302 	lsl.w	r3, r1, r2
    c290:	4095      	lsls	r5, r2
    c292:	4094      	lsls	r4, r2
    c294:	fa20 f707 	lsr.w	r7, r0, r7
    c298:	ea47 0903 	orr.w	r9, r7, r3
    c29c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
    c2a0:	0c23      	lsrs	r3, r4, #16
    c2a2:	fa1f f885 	uxth.w	r8, r5
    c2a6:	fbb9 fcfe 	udiv	ip, r9, lr
    c2aa:	fb0e 991c 	mls	r9, lr, ip, r9
    c2ae:	fb0c f108 	mul.w	r1, ip, r8
    c2b2:	ea43 4309 	orr.w	r3, r3, r9, lsl #16
    c2b6:	4299      	cmp	r1, r3
    c2b8:	d90a      	bls.n	c2d0 <__udivmoddi4+0x64>
    c2ba:	18eb      	adds	r3, r5, r3
    c2bc:	bf2c      	ite	cs
    c2be:	2001      	movcs	r0, #1
    c2c0:	2000      	movcc	r0, #0
    c2c2:	4299      	cmp	r1, r3
    c2c4:	d902      	bls.n	c2cc <__udivmoddi4+0x60>
    c2c6:	2800      	cmp	r0, #0
    c2c8:	f000 811d 	beq.w	c506 <__udivmoddi4+0x29a>
    c2cc:	f10c 3cff 	add.w	ip, ip, #4294967295
    c2d0:	1a59      	subs	r1, r3, r1
    c2d2:	b2a3      	uxth	r3, r4
    c2d4:	fbb1 f0fe 	udiv	r0, r1, lr
    c2d8:	fb0e 1110 	mls	r1, lr, r0, r1
    c2dc:	fb00 f808 	mul.w	r8, r0, r8
    c2e0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
    c2e4:	45a0      	cmp	r8, r4
    c2e6:	d905      	bls.n	c2f4 <__udivmoddi4+0x88>
    c2e8:	192c      	adds	r4, r5, r4
    c2ea:	d202      	bcs.n	c2f2 <__udivmoddi4+0x86>
    c2ec:	45a0      	cmp	r8, r4
    c2ee:	f200 810e 	bhi.w	c50e <__udivmoddi4+0x2a2>
    c2f2:	3801      	subs	r0, #1
    c2f4:	eba4 0408 	sub.w	r4, r4, r8
    c2f8:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
    c2fc:	2700      	movs	r7, #0
    c2fe:	b11e      	cbz	r6, c308 <__udivmoddi4+0x9c>
    c300:	40d4      	lsrs	r4, r2
    c302:	2300      	movs	r3, #0
    c304:	e9c6 4300 	strd	r4, r3, [r6]
    c308:	4639      	mov	r1, r7
    c30a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    c30e:	2a00      	cmp	r2, #0
    c310:	d051      	beq.n	c3b6 <__udivmoddi4+0x14a>
    c312:	fab2 f282 	clz	r2, r2
    c316:	2a00      	cmp	r2, #0
    c318:	f040 80af 	bne.w	c47a <__udivmoddi4+0x20e>
    c31c:	1b49      	subs	r1, r1, r5
    c31e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
    c322:	fa1f f885 	uxth.w	r8, r5
    c326:	2701      	movs	r7, #1
    c328:	0c23      	lsrs	r3, r4, #16
    c32a:	fbb1 fcfe 	udiv	ip, r1, lr
    c32e:	fb0e 111c 	mls	r1, lr, ip, r1
    c332:	fb08 f00c 	mul.w	r0, r8, ip
    c336:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
    c33a:	4298      	cmp	r0, r3
    c33c:	d90a      	bls.n	c354 <__udivmoddi4+0xe8>
    c33e:	18eb      	adds	r3, r5, r3
    c340:	bf2c      	ite	cs
    c342:	2101      	movcs	r1, #1
    c344:	2100      	movcc	r1, #0
    c346:	4298      	cmp	r0, r3
    c348:	d902      	bls.n	c350 <__udivmoddi4+0xe4>
    c34a:	2900      	cmp	r1, #0
    c34c:	f000 80d7 	beq.w	c4fe <__udivmoddi4+0x292>
    c350:	f10c 3cff 	add.w	ip, ip, #4294967295
    c354:	1a19      	subs	r1, r3, r0
    c356:	b2a3      	uxth	r3, r4
    c358:	fbb1 f0fe 	udiv	r0, r1, lr
    c35c:	fb0e 1110 	mls	r1, lr, r0, r1
    c360:	fb08 f800 	mul.w	r8, r8, r0
    c364:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
    c368:	45a0      	cmp	r8, r4
    c36a:	d905      	bls.n	c378 <__udivmoddi4+0x10c>
    c36c:	192c      	adds	r4, r5, r4
    c36e:	d202      	bcs.n	c376 <__udivmoddi4+0x10a>
    c370:	45a0      	cmp	r8, r4
    c372:	f200 80c1 	bhi.w	c4f8 <__udivmoddi4+0x28c>
    c376:	3801      	subs	r0, #1
    c378:	eba4 0408 	sub.w	r4, r4, r8
    c37c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
    c380:	e7bd      	b.n	c2fe <__udivmoddi4+0x92>
    c382:	428b      	cmp	r3, r1
    c384:	d908      	bls.n	c398 <__udivmoddi4+0x12c>
    c386:	2e00      	cmp	r6, #0
    c388:	d074      	beq.n	c474 <__udivmoddi4+0x208>
    c38a:	2700      	movs	r7, #0
    c38c:	e9c6 0100 	strd	r0, r1, [r6]
    c390:	4638      	mov	r0, r7
    c392:	4639      	mov	r1, r7
    c394:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    c398:	fab3 f783 	clz	r7, r3
    c39c:	b967      	cbnz	r7, c3b8 <__udivmoddi4+0x14c>
    c39e:	428b      	cmp	r3, r1
    c3a0:	f0c0 80a4 	bcc.w	c4ec <__udivmoddi4+0x280>
    c3a4:	4282      	cmp	r2, r0
    c3a6:	f240 80a1 	bls.w	c4ec <__udivmoddi4+0x280>
    c3aa:	4638      	mov	r0, r7
    c3ac:	2e00      	cmp	r6, #0
    c3ae:	d0ab      	beq.n	c308 <__udivmoddi4+0x9c>
    c3b0:	e9c6 4900 	strd	r4, r9, [r6]
    c3b4:	e7a8      	b.n	c308 <__udivmoddi4+0x9c>
    c3b6:	deff      	udf	#255	; 0xff
    c3b8:	f1c7 0520 	rsb	r5, r7, #32
    c3bc:	40bb      	lsls	r3, r7
    c3be:	fa02 fc07 	lsl.w	ip, r2, r7
    c3c2:	fa01 f407 	lsl.w	r4, r1, r7
    c3c6:	40ea      	lsrs	r2, r5
    c3c8:	fa20 f805 	lsr.w	r8, r0, r5
    c3cc:	40e9      	lsrs	r1, r5
    c3ce:	fa00 fe07 	lsl.w	lr, r0, r7
    c3d2:	431a      	orrs	r2, r3
    c3d4:	ea48 0404 	orr.w	r4, r8, r4
    c3d8:	ea4f 4812 	mov.w	r8, r2, lsr #16
    c3dc:	0c20      	lsrs	r0, r4, #16
    c3de:	fa1f f982 	uxth.w	r9, r2
    c3e2:	fbb1 faf8 	udiv	sl, r1, r8
    c3e6:	fb08 111a 	mls	r1, r8, sl, r1
    c3ea:	fb0a fb09 	mul.w	fp, sl, r9
    c3ee:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
    c3f2:	458b      	cmp	fp, r1
    c3f4:	d90a      	bls.n	c40c <__udivmoddi4+0x1a0>
    c3f6:	1851      	adds	r1, r2, r1
    c3f8:	bf2c      	ite	cs
    c3fa:	2301      	movcs	r3, #1
    c3fc:	2300      	movcc	r3, #0
    c3fe:	458b      	cmp	fp, r1
    c400:	d902      	bls.n	c408 <__udivmoddi4+0x19c>
    c402:	2b00      	cmp	r3, #0
    c404:	f000 8088 	beq.w	c518 <__udivmoddi4+0x2ac>
    c408:	f10a 3aff 	add.w	sl, sl, #4294967295
    c40c:	eba1 010b 	sub.w	r1, r1, fp
    c410:	b2a4      	uxth	r4, r4
    c412:	fbb1 f0f8 	udiv	r0, r1, r8
    c416:	fb08 1110 	mls	r1, r8, r0, r1
    c41a:	fb00 f909 	mul.w	r9, r0, r9
    c41e:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
    c422:	4589      	cmp	r9, r1
    c424:	d904      	bls.n	c430 <__udivmoddi4+0x1c4>
    c426:	1851      	adds	r1, r2, r1
    c428:	d201      	bcs.n	c42e <__udivmoddi4+0x1c2>
    c42a:	4589      	cmp	r9, r1
    c42c:	d87b      	bhi.n	c526 <__udivmoddi4+0x2ba>
    c42e:	3801      	subs	r0, #1
    c430:	ea40 400a 	orr.w	r0, r0, sl, lsl #16
    c434:	eba1 0109 	sub.w	r1, r1, r9
    c438:	fba0 890c 	umull	r8, r9, r0, ip
    c43c:	4549      	cmp	r1, r9
    c43e:	4644      	mov	r4, r8
    c440:	464b      	mov	r3, r9
    c442:	d302      	bcc.n	c44a <__udivmoddi4+0x1de>
    c444:	d106      	bne.n	c454 <__udivmoddi4+0x1e8>
    c446:	45c6      	cmp	lr, r8
    c448:	d204      	bcs.n	c454 <__udivmoddi4+0x1e8>
    c44a:	3801      	subs	r0, #1
    c44c:	ebb8 040c 	subs.w	r4, r8, ip
    c450:	eb69 0302 	sbc.w	r3, r9, r2
    c454:	2e00      	cmp	r6, #0
    c456:	d05d      	beq.n	c514 <__udivmoddi4+0x2a8>
    c458:	ebbe 0204 	subs.w	r2, lr, r4
    c45c:	eb61 0103 	sbc.w	r1, r1, r3
    c460:	fa01 f505 	lsl.w	r5, r1, r5
    c464:	fa22 f307 	lsr.w	r3, r2, r7
    c468:	40f9      	lsrs	r1, r7
    c46a:	2700      	movs	r7, #0
    c46c:	431d      	orrs	r5, r3
    c46e:	e9c6 5100 	strd	r5, r1, [r6]
    c472:	e749      	b.n	c308 <__udivmoddi4+0x9c>
    c474:	4637      	mov	r7, r6
    c476:	4630      	mov	r0, r6
    c478:	e746      	b.n	c308 <__udivmoddi4+0x9c>
    c47a:	f1c2 0020 	rsb	r0, r2, #32
    c47e:	4095      	lsls	r5, r2
    c480:	fa01 f702 	lsl.w	r7, r1, r2
    c484:	fa21 f300 	lsr.w	r3, r1, r0
    c488:	ea4f 4e15 	mov.w	lr, r5, lsr #16
    c48c:	fa24 f100 	lsr.w	r1, r4, r0
    c490:	fa1f f885 	uxth.w	r8, r5
    c494:	4094      	lsls	r4, r2
    c496:	4339      	orrs	r1, r7
    c498:	fbb3 f0fe 	udiv	r0, r3, lr
    c49c:	0c0f      	lsrs	r7, r1, #16
    c49e:	fb0e 3310 	mls	r3, lr, r0, r3
    c4a2:	fb00 fc08 	mul.w	ip, r0, r8
    c4a6:	ea47 4303 	orr.w	r3, r7, r3, lsl #16
    c4aa:	459c      	cmp	ip, r3
    c4ac:	d907      	bls.n	c4be <__udivmoddi4+0x252>
    c4ae:	18eb      	adds	r3, r5, r3
    c4b0:	bf2c      	ite	cs
    c4b2:	2701      	movcs	r7, #1
    c4b4:	2700      	movcc	r7, #0
    c4b6:	459c      	cmp	ip, r3
    c4b8:	d900      	bls.n	c4bc <__udivmoddi4+0x250>
    c4ba:	b38f      	cbz	r7, c520 <__udivmoddi4+0x2b4>
    c4bc:	3801      	subs	r0, #1
    c4be:	eba3 030c 	sub.w	r3, r3, ip
    c4c2:	b289      	uxth	r1, r1
    c4c4:	fbb3 f7fe 	udiv	r7, r3, lr
    c4c8:	fb0e 3317 	mls	r3, lr, r7, r3
    c4cc:	fb07 fc08 	mul.w	ip, r7, r8
    c4d0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
    c4d4:	458c      	cmp	ip, r1
    c4d6:	d904      	bls.n	c4e2 <__udivmoddi4+0x276>
    c4d8:	1869      	adds	r1, r5, r1
    c4da:	d201      	bcs.n	c4e0 <__udivmoddi4+0x274>
    c4dc:	458c      	cmp	ip, r1
    c4de:	d825      	bhi.n	c52c <__udivmoddi4+0x2c0>
    c4e0:	3f01      	subs	r7, #1
    c4e2:	eba1 010c 	sub.w	r1, r1, ip
    c4e6:	ea47 4700 	orr.w	r7, r7, r0, lsl #16
    c4ea:	e71d      	b.n	c328 <__udivmoddi4+0xbc>
    c4ec:	1a84      	subs	r4, r0, r2
    c4ee:	eb61 0303 	sbc.w	r3, r1, r3
    c4f2:	2001      	movs	r0, #1
    c4f4:	4699      	mov	r9, r3
    c4f6:	e759      	b.n	c3ac <__udivmoddi4+0x140>
    c4f8:	3802      	subs	r0, #2
    c4fa:	442c      	add	r4, r5
    c4fc:	e73c      	b.n	c378 <__udivmoddi4+0x10c>
    c4fe:	f1ac 0c02 	sub.w	ip, ip, #2
    c502:	442b      	add	r3, r5
    c504:	e726      	b.n	c354 <__udivmoddi4+0xe8>
    c506:	f1ac 0c02 	sub.w	ip, ip, #2
    c50a:	442b      	add	r3, r5
    c50c:	e6e0      	b.n	c2d0 <__udivmoddi4+0x64>
    c50e:	3802      	subs	r0, #2
    c510:	442c      	add	r4, r5
    c512:	e6ef      	b.n	c2f4 <__udivmoddi4+0x88>
    c514:	4637      	mov	r7, r6
    c516:	e6f7      	b.n	c308 <__udivmoddi4+0x9c>
    c518:	f1aa 0a02 	sub.w	sl, sl, #2
    c51c:	4411      	add	r1, r2
    c51e:	e775      	b.n	c40c <__udivmoddi4+0x1a0>
    c520:	3802      	subs	r0, #2
    c522:	442b      	add	r3, r5
    c524:	e7cb      	b.n	c4be <__udivmoddi4+0x252>
    c526:	3802      	subs	r0, #2
    c528:	4411      	add	r1, r2
    c52a:	e781      	b.n	c430 <__udivmoddi4+0x1c4>
    c52c:	3f02      	subs	r7, #2
    c52e:	4429      	add	r1, r5
    c530:	e7d7      	b.n	c4e2 <__udivmoddi4+0x276>
    c532:	bf00      	nop

0000c534 <__aeabi_idiv0>:
    c534:	4770      	bx	lr
    c536:	bf00      	nop

0000c538 <bsd_recoverable_error_handler>:
#include <string.h>

/**@brief Recoverable BSD library error. */
void bsd_recoverable_error_handler(uint32_t err)
{
	printk("bsdlib recoverable error: %u\n", err);
    c538:	4601      	mov	r1, r0
    c53a:	4801      	ldr	r0, [pc, #4]	; (c540 <bsd_recoverable_error_handler+0x8>)
    c53c:	f00d b835 	b.w	195aa <printk>
    c540:	0001abc8 	.word	0x0001abc8

0000c544 <main>:
}

void main(void)
{
    c544:	b508      	push	{r3, lr}
	printk("The AT host sample started\n");
    c546:	4803      	ldr	r0, [pc, #12]	; (c554 <main+0x10>)
    c548:	f00d f82f 	bl	195aa <printk>
 * @return N/A
 * @req K-CPU-IDLE-001
 */
static inline void k_cpu_idle(void)
{
	arch_cpu_idle();
    c54c:	f000 fcd2 	bl	cef4 <arch_cpu_idle>
    c550:	e7fc      	b.n	c54c <main+0x8>
    c552:	bf00      	nop
    c554:	0001abe6 	.word	0x0001abe6

0000c558 <z_sys_mem_pool_block_free>:
	return 0;
}

void z_sys_mem_pool_block_free(struct sys_mem_pool_base *p, u32_t level,
			      u32_t block)
{
    c558:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    c55c:	b085      	sub	sp, #20
	size_t lsizes[LVL_ARRAY_SZ(p->n_levels)];
    c55e:	7a83      	ldrb	r3, [r0, #10]
{
    c560:	af00      	add	r7, sp, #0
	size_t lsizes[LVL_ARRAY_SZ(p->n_levels)];
    c562:	009b      	lsls	r3, r3, #2
    c564:	3307      	adds	r3, #7
    c566:	f403 63ff 	and.w	r3, r3, #2040	; 0x7f8
    c56a:	ebad 0d03 	sub.w	sp, sp, r3
    c56e:	46eb      	mov	fp, sp
	 * to avoid having to store it in precious RAM bytes.
	 * Overhead here is somewhat higher because block_free()
	 * doesn't inherently need to traverse all the larger
	 * sublevels.
	 */
	lsizes[0] = p->max_sz;
    c570:	6843      	ldr	r3, [r0, #4]
{
    c572:	4606      	mov	r6, r0
	lsizes[0] = p->max_sz;
    c574:	465c      	mov	r4, fp
	for (i = 1; i <= level; i++) {
    c576:	2001      	movs	r0, #1
	lsizes[0] = p->max_sz;
    c578:	f8cb 3000 	str.w	r3, [fp]
	for (i = 1; i <= level; i++) {
    c57c:	4281      	cmp	r1, r0
    c57e:	d222      	bcs.n	c5c6 <z_sys_mem_pool_block_free+0x6e>
	if (p->flags & SYS_MEM_POOL_KERNEL) {
    c580:	7c30      	ldrb	r0, [r6, #16]
		lsizes[i] = WB_DN(lsizes[i-1] / 4);
	}

	block_free(p, level, lsizes, block);
    c582:	4688      	mov	r8, r1
	if (p->flags & SYS_MEM_POOL_KERNEL) {
    c584:	f010 0001 	ands.w	r0, r0, #1
	block_free(p, level, lsizes, block);
    c588:	4615      	mov	r5, r2
	if (p->flags & SYS_MEM_POOL_KERNEL) {
    c58a:	d001      	beq.n	c590 <z_sys_mem_pool_block_free+0x38>
    c58c:	f00c fd85 	bl	1909a <pool_irq_lock.isra.2.part.3>
	unsigned int key = pool_irq_lock(p);
    c590:	4604      	mov	r4, r0
	while (level >= 0) {
    c592:	f1b8 0f00 	cmp.w	r8, #0
    c596:	da1e      	bge.n	c5d6 <z_sys_mem_pool_block_free+0x7e>
	__ASSERT(0, "out of levels");
    c598:	23bc      	movs	r3, #188	; 0xbc
    c59a:	4a50      	ldr	r2, [pc, #320]	; (c6dc <z_sys_mem_pool_block_free+0x184>)
    c59c:	4950      	ldr	r1, [pc, #320]	; (c6e0 <z_sys_mem_pool_block_free+0x188>)
    c59e:	4851      	ldr	r0, [pc, #324]	; (c6e4 <z_sys_mem_pool_block_free+0x18c>)
    c5a0:	f00d f803 	bl	195aa <printk>
    c5a4:	4850      	ldr	r0, [pc, #320]	; (c6e8 <z_sys_mem_pool_block_free+0x190>)
    c5a6:	f00d f800 	bl	195aa <printk>
    c5aa:	21bc      	movs	r1, #188	; 0xbc
    c5ac:	484b      	ldr	r0, [pc, #300]	; (c6dc <z_sys_mem_pool_block_free+0x184>)
    c5ae:	f00d f813 	bl	195d8 <assert_post_action>
	return -1;
    c5b2:	f04f 34ff 	mov.w	r4, #4294967295
	pool_irq_unlock(p, key);
    c5b6:	4621      	mov	r1, r4
    c5b8:	7c30      	ldrb	r0, [r6, #16]
    c5ba:	f00c fd77 	bl	190ac <pool_irq_unlock.isra.4>
}
    c5be:	3714      	adds	r7, #20
    c5c0:	46bd      	mov	sp, r7
    c5c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		lsizes[i] = WB_DN(lsizes[i-1] / 4);
    c5c6:	6823      	ldr	r3, [r4, #0]
	for (i = 1; i <= level; i++) {
    c5c8:	3001      	adds	r0, #1
		lsizes[i] = WB_DN(lsizes[i-1] / 4);
    c5ca:	089b      	lsrs	r3, r3, #2
    c5cc:	f023 0303 	bic.w	r3, r3, #3
    c5d0:	f844 3f04 	str.w	r3, [r4, #4]!
    c5d4:	e7d2      	b.n	c57c <z_sys_mem_pool_block_free+0x24>
		int i, lsz = lsizes[level];
    c5d6:	f85b 3028 	ldr.w	r3, [fp, r8, lsl #2]
	int bit = get_bit_ptr(p, level, bn, &word);
    c5da:	462a      	mov	r2, r5
	return (u8_t *)p->buf + lsz * block;
    c5dc:	fb03 fa05 	mul.w	sl, r3, r5
		int i, lsz = lsizes[level];
    c5e0:	607b      	str	r3, [r7, #4]
	return (u8_t *)p->buf + lsz * block;
    c5e2:	6833      	ldr	r3, [r6, #0]
	int bit = get_bit_ptr(p, level, bn, &word);
    c5e4:	4641      	mov	r1, r8
	return (u8_t *)p->buf + lsz * block;
    c5e6:	603b      	str	r3, [r7, #0]
    c5e8:	eb03 090a 	add.w	r9, r3, sl
	int bit = get_bit_ptr(p, level, bn, &word);
    c5ec:	4630      	mov	r0, r6
    c5ee:	f107 030c 	add.w	r3, r7, #12
    c5f2:	f00c fd3b 	bl	1906c <get_bit_ptr>
	return (*word >> bit) & 1;
    c5f6:	68fb      	ldr	r3, [r7, #12]
    c5f8:	681b      	ldr	r3, [r3, #0]
    c5fa:	fa23 f000 	lsr.w	r0, r3, r0
		__ASSERT(alloc_bit_is_set(p, level, bn),
    c5fe:	07c3      	lsls	r3, r0, #31
    c600:	d40d      	bmi.n	c61e <z_sys_mem_pool_block_free+0xc6>
    c602:	23a3      	movs	r3, #163	; 0xa3
    c604:	4a35      	ldr	r2, [pc, #212]	; (c6dc <z_sys_mem_pool_block_free+0x184>)
    c606:	4939      	ldr	r1, [pc, #228]	; (c6ec <z_sys_mem_pool_block_free+0x194>)
    c608:	4836      	ldr	r0, [pc, #216]	; (c6e4 <z_sys_mem_pool_block_free+0x18c>)
    c60a:	f00c ffce 	bl	195aa <printk>
    c60e:	4649      	mov	r1, r9
    c610:	4837      	ldr	r0, [pc, #220]	; (c6f0 <z_sys_mem_pool_block_free+0x198>)
    c612:	f00c ffca 	bl	195aa <printk>
    c616:	21a3      	movs	r1, #163	; 0xa3
    c618:	4830      	ldr	r0, [pc, #192]	; (c6dc <z_sys_mem_pool_block_free+0x184>)
    c61a:	f00c ffdd 	bl	195d8 <assert_post_action>
	int bit = get_bit_ptr(p, level, bn, &word);
    c61e:	f107 030c 	add.w	r3, r7, #12
    c622:	462a      	mov	r2, r5
    c624:	4641      	mov	r1, r8
    c626:	4630      	mov	r0, r6
    c628:	f00c fd20 	bl	1906c <get_bit_ptr>
	*word &= ~(1<<bit);
    c62c:	2301      	movs	r3, #1
    c62e:	68fa      	ldr	r2, [r7, #12]
    c630:	fa03 f000 	lsl.w	r0, r3, r0
    c634:	6813      	ldr	r3, [r2, #0]
 * @return N/A
 */

static inline void sys_dlist_append(sys_dlist_t *list, sys_dnode_t *node)
{
	node->next = list;
    c636:	6839      	ldr	r1, [r7, #0]
    c638:	ea23 0300 	bic.w	r3, r3, r0
    c63c:	6013      	str	r3, [r2, #0]
		sys_dlist_append(&p->levels[level].free_list, block);
    c63e:	230c      	movs	r3, #12
    c640:	68f2      	ldr	r2, [r6, #12]
    c642:	fb03 2308 	mla	r3, r3, r8, r2
    c646:	1d1a      	adds	r2, r3, #4
    c648:	f841 200a 	str.w	r2, [r1, sl]
	node->prev = list->tail;
    c64c:	689a      	ldr	r2, [r3, #8]
		pool_irq_unlock(p, key);
    c64e:	4621      	mov	r1, r4
    c650:	f8c9 2004 	str.w	r2, [r9, #4]

	list->tail->next = node;
    c654:	689a      	ldr	r2, [r3, #8]
    c656:	f8c2 9000 	str.w	r9, [r2]
	list->tail = node;
    c65a:	f8c3 9008 	str.w	r9, [r3, #8]
    c65e:	7c30      	ldrb	r0, [r6, #16]
    c660:	f00c fd24 	bl	190ac <pool_irq_unlock.isra.4>
	if (p->flags & SYS_MEM_POOL_KERNEL) {
    c664:	7c30      	ldrb	r0, [r6, #16]
    c666:	f010 0001 	ands.w	r0, r0, #1
    c66a:	d001      	beq.n	c670 <z_sys_mem_pool_block_free+0x118>
    c66c:	f00c fd15 	bl	1909a <pool_irq_lock.isra.2.part.3>
		key = pool_irq_lock(p);
    c670:	4604      	mov	r4, r0
		if (level == 0 || partner_alloc_bits(p, level, bn) != 0) {
    c672:	f1b8 0f00 	cmp.w	r8, #0
    c676:	d09e      	beq.n	c5b6 <z_sys_mem_pool_block_free+0x5e>
	int bit = get_bit_ptr(p, level, bn, &word);
    c678:	f107 030c 	add.w	r3, r7, #12
    c67c:	462a      	mov	r2, r5
    c67e:	4641      	mov	r1, r8
    c680:	4630      	mov	r0, r6
    c682:	f00c fcf3 	bl	1906c <get_bit_ptr>
	return (*word >> (4*(bit / 4))) & 0xf;
    c686:	68fb      	ldr	r3, [r7, #12]
    c688:	2800      	cmp	r0, #0
    c68a:	bfb8      	it	lt
    c68c:	3003      	addlt	r0, #3
    c68e:	681b      	ldr	r3, [r3, #0]
    c690:	f020 0003 	bic.w	r0, r0, #3
    c694:	fa23 f000 	lsr.w	r0, r3, r0
		if (level == 0 || partner_alloc_bits(p, level, bn) != 0) {
    c698:	f010 000f 	ands.w	r0, r0, #15
    c69c:	d18b      	bne.n	c5b6 <z_sys_mem_pool_block_free+0x5e>
	node->next = NULL;
    c69e:	4684      	mov	ip, r0
			int b = (bn & ~3) + i;
    c6a0:	f025 0a03 	bic.w	sl, r5, #3
	return (u8_t *)p->buf + lsz * block;
    c6a4:	687a      	ldr	r2, [r7, #4]
			int b = (bn & ~3) + i;
    c6a6:	eb0a 0300 	add.w	r3, sl, r0
	return (u8_t *)p->buf + lsz * block;
    c6aa:	4353      	muls	r3, r2
    c6ac:	6832      	ldr	r2, [r6, #0]
		for (i = 0; i < 4; i++) {
    c6ae:	3001      	adds	r0, #1
	return (u8_t *)p->buf + lsz * block;
    c6b0:	18d1      	adds	r1, r2, r3
 * @return N/A
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	node->prev->next = node->next;
    c6b2:	f8d1 9004 	ldr.w	r9, [r1, #4]
    c6b6:	f852 e003 	ldr.w	lr, [r2, r3]
		for (i = 0; i < 4; i++) {
    c6ba:	2804      	cmp	r0, #4
    c6bc:	f8c9 e000 	str.w	lr, [r9]
	node->next->prev = node->prev;
    c6c0:	f8ce 9004 	str.w	r9, [lr, #4]
	node->next = NULL;
    c6c4:	f842 c003 	str.w	ip, [r2, r3]
	node->prev = NULL;
    c6c8:	f8c1 c004 	str.w	ip, [r1, #4]
    c6cc:	d1ea      	bne.n	c6a4 <z_sys_mem_pool_block_free+0x14c>
		bn = bn / 4;
    c6ce:	2d00      	cmp	r5, #0
    c6d0:	bfb8      	it	lt
    c6d2:	3503      	addlt	r5, #3
		level = level - 1;
    c6d4:	f108 38ff 	add.w	r8, r8, #4294967295
		bn = bn / 4;
    c6d8:	10ad      	asrs	r5, r5, #2
    c6da:	e75a      	b.n	c592 <z_sys_mem_pool_block_free+0x3a>
    c6dc:	0001ac02 	.word	0x0001ac02
    c6e0:	0001b6d7 	.word	0x0001b6d7
    c6e4:	0001ac45 	.word	0x0001ac45
    c6e8:	0001ac87 	.word	0x0001ac87
    c6ec:	0001ac26 	.word	0x0001ac26
    c6f0:	0001ac62 	.word	0x0001ac62

0000c6f4 <char_out>:

static int char_out(int c, void *ctx_p)
{
	struct out_context *ctx = ctx_p;

	ctx->count++;
    c6f4:	680b      	ldr	r3, [r1, #0]
    c6f6:	3301      	adds	r3, #1
    c6f8:	600b      	str	r3, [r1, #0]
	return _char_out(c);
    c6fa:	4b01      	ldr	r3, [pc, #4]	; (c700 <char_out+0xc>)
    c6fc:	681b      	ldr	r3, [r3, #0]
    c6fe:	4718      	bx	r3
    c700:	20026058 	.word	0x20026058

0000c704 <_printk_dec_ulong>:
 * @return N/A
 */
static void _printk_dec_ulong(out_func_t out, void *ctx,
			      const unsigned long num, enum pad_type padding,
			      int min_width)
{
    c704:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    c708:	b085      	sub	sp, #20
    c70a:	9c0e      	ldr	r4, [sp, #56]	; 0x38
    c70c:	469b      	mov	fp, r3
    c70e:	2c01      	cmp	r4, #1
    c710:	bfb8      	it	lt
    c712:	2401      	movlt	r4, #1
    c714:	2b01      	cmp	r3, #1
    c716:	bf0c      	ite	eq
    c718:	2330      	moveq	r3, #48	; 0x30
    c71a:	2320      	movne	r3, #32
    c71c:	4616      	mov	r6, r2
    c71e:	4682      	mov	sl, r0
    c720:	4688      	mov	r8, r1
    c722:	2501      	movs	r5, #1
    c724:	270a      	movs	r7, #10
    c726:	2200      	movs	r2, #0
    c728:	f8df 906c 	ldr.w	r9, [pc, #108]	; c798 <_printk_dec_ulong+0x94>
    c72c:	9302      	str	r3, [sp, #8]
	if (min_width <= 0) {
		min_width = 1;
	}

	while (pos >= 10) {
		if (found_largest_digit != 0 || remainder >= pos) {
    c72e:	fbb6 f3f9 	udiv	r3, r6, r9
    c732:	9301      	str	r3, [sp, #4]
    c734:	b90a      	cbnz	r2, c73a <_printk_dec_ulong+0x36>
    c736:	45b1      	cmp	r9, r6
    c738:	d81c      	bhi.n	c774 <_printk_dec_ulong+0x70>
			found_largest_digit = 1;
			out((int)(remainder / pos + 48), ctx);
    c73a:	9b01      	ldr	r3, [sp, #4]
    c73c:	4641      	mov	r1, r8
    c73e:	f103 0030 	add.w	r0, r3, #48	; 0x30
    c742:	47d0      	blx	sl
			found_largest_digit = 1;
    c744:	2201      	movs	r2, #1
			digits++;
    c746:	3501      	adds	r5, #1
				&& padding < PAD_SPACE_AFTER) {
			out((int)(padding == PAD_ZERO_BEFORE ? '0' : ' '), ctx);
			digits++;
		}
		remaining--;
		remainder %= pos;
    c748:	9b01      	ldr	r3, [sp, #4]
		remaining--;
    c74a:	3f01      	subs	r7, #1
		remainder %= pos;
    c74c:	fb09 6613 	mls	r6, r9, r3, r6
		pos /= 10;
    c750:	230a      	movs	r3, #10
	while (pos >= 10) {
    c752:	2f01      	cmp	r7, #1
		pos /= 10;
    c754:	fbb9 f9f3 	udiv	r9, r9, r3
	while (pos >= 10) {
    c758:	d1e9      	bne.n	c72e <_printk_dec_ulong+0x2a>
	}
	out((int)(remainder + 48), ctx);
    c75a:	4641      	mov	r1, r8
    c75c:	f106 0030 	add.w	r0, r6, #48	; 0x30
    c760:	47d0      	blx	sl

	if (padding == PAD_SPACE_AFTER) {
    c762:	f1bb 0f03 	cmp.w	fp, #3
    c766:	d102      	bne.n	c76e <_printk_dec_ulong+0x6a>
		remaining = min_width - digits;
    c768:	1b64      	subs	r4, r4, r5
		while (remaining-- > 0) {
    c76a:	2c00      	cmp	r4, #0
    c76c:	dc0e      	bgt.n	c78c <_printk_dec_ulong+0x88>
			out(' ', ctx);
		}
	}
}
    c76e:	b005      	add	sp, #20
    c770:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		} else if (remaining <= min_width
    c774:	42bc      	cmp	r4, r7
    c776:	dbe7      	blt.n	c748 <_printk_dec_ulong+0x44>
				&& padding < PAD_SPACE_AFTER) {
    c778:	f1bb 0f02 	cmp.w	fp, #2
    c77c:	d8e4      	bhi.n	c748 <_printk_dec_ulong+0x44>
			out((int)(padding == PAD_ZERO_BEFORE ? '0' : ' '), ctx);
    c77e:	4641      	mov	r1, r8
    c780:	9802      	ldr	r0, [sp, #8]
    c782:	9203      	str	r2, [sp, #12]
			digits++;
    c784:	3501      	adds	r5, #1
			out((int)(padding == PAD_ZERO_BEFORE ? '0' : ' '), ctx);
    c786:	47d0      	blx	sl
			digits++;
    c788:	9a03      	ldr	r2, [sp, #12]
    c78a:	e7dd      	b.n	c748 <_printk_dec_ulong+0x44>
			out(' ', ctx);
    c78c:	4641      	mov	r1, r8
    c78e:	2020      	movs	r0, #32
    c790:	47d0      	blx	sl
    c792:	3c01      	subs	r4, #1
    c794:	e7e9      	b.n	c76a <_printk_dec_ulong+0x66>
    c796:	bf00      	nop
    c798:	3b9aca00 	.word	0x3b9aca00

0000c79c <vprintk>:
	struct out_context ctx = { 0 };
    c79c:	2300      	movs	r3, #0
{
    c79e:	b507      	push	{r0, r1, r2, lr}
	z_vprintk(char_out, &ctx, fmt, ap);
    c7a0:	4602      	mov	r2, r0
	struct out_context ctx = { 0 };
    c7a2:	9301      	str	r3, [sp, #4]
	z_vprintk(char_out, &ctx, fmt, ap);
    c7a4:	4803      	ldr	r0, [pc, #12]	; (c7b4 <vprintk+0x18>)
    c7a6:	460b      	mov	r3, r1
    c7a8:	a901      	add	r1, sp, #4
    c7aa:	f00c fd8e 	bl	192ca <z_vprintk>
}
    c7ae:	b003      	add	sp, #12
    c7b0:	f85d fb04 	ldr.w	pc, [sp], #4
    c7b4:	0000c6f5 	.word	0x0000c6f5

0000c7b8 <nordicsemi_nrf91_init>:
		:
		: "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	unsigned int tmp;

	__asm__ volatile(
    c7b8:	f04f 0220 	mov.w	r2, #32
    c7bc:	f3ef 8311 	mrs	r3, BASEPRI
    c7c0:	f382 8811 	msr	BASEPRI, r2
    c7c4:	f3bf 8f6f 	isb	sy

	key = irq_lock();

#ifdef CONFIG_NRF_ENABLE_ICACHE
	/* Enable the instruction cache */
	NRF_NVMC->ICACHECNF = NVMC_ICACHECNF_CACHEEN_Msk;
    c7c8:	2101      	movs	r1, #1
    c7ca:	4a04      	ldr	r2, [pc, #16]	; (c7dc <nordicsemi_nrf91_init+0x24>)
    c7cc:	f8c2 1540 	str.w	r1, [r2, #1344]	; 0x540
	__asm__ volatile(
		"cpsie i;"
		"isb"
		: : : "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile(
    c7d0:	f383 8811 	msr	BASEPRI, r3
    c7d4:	f3bf 8f6f 	isb	sy
	NMI_INIT();

	irq_unlock(key);

	return 0;
}
    c7d8:	2000      	movs	r0, #0
    c7da:	4770      	bx	lr
    c7dc:	40039000 	.word	0x40039000

0000c7e0 <socket_offload_register>:

/* Only one provider may register socket operations upon boot. */
const struct socket_offload *socket_ops;

void socket_offload_register(const struct socket_offload *ops)
{
    c7e0:	b538      	push	{r3, r4, r5, lr}
	__ASSERT_NO_MSG(ops);
    c7e2:	4605      	mov	r5, r0
    c7e4:	b948      	cbnz	r0, c7fa <socket_offload_register+0x1a>
    c7e6:	490c      	ldr	r1, [pc, #48]	; (c818 <socket_offload_register+0x38>)
    c7e8:	480c      	ldr	r0, [pc, #48]	; (c81c <socket_offload_register+0x3c>)
    c7ea:	2311      	movs	r3, #17
    c7ec:	4a0c      	ldr	r2, [pc, #48]	; (c820 <socket_offload_register+0x40>)
    c7ee:	f00c fedc 	bl	195aa <printk>
    c7f2:	2111      	movs	r1, #17
    c7f4:	480a      	ldr	r0, [pc, #40]	; (c820 <socket_offload_register+0x40>)
    c7f6:	f00c feef 	bl	195d8 <assert_post_action>
	__ASSERT_NO_MSG(socket_ops == NULL);
    c7fa:	4c0a      	ldr	r4, [pc, #40]	; (c824 <socket_offload_register+0x44>)
    c7fc:	6822      	ldr	r2, [r4, #0]
    c7fe:	b14a      	cbz	r2, c814 <socket_offload_register+0x34>
    c800:	4909      	ldr	r1, [pc, #36]	; (c828 <socket_offload_register+0x48>)
    c802:	4806      	ldr	r0, [pc, #24]	; (c81c <socket_offload_register+0x3c>)
    c804:	2312      	movs	r3, #18
    c806:	4a06      	ldr	r2, [pc, #24]	; (c820 <socket_offload_register+0x40>)
    c808:	f00c fecf 	bl	195aa <printk>
    c80c:	2112      	movs	r1, #18
    c80e:	4804      	ldr	r0, [pc, #16]	; (c820 <socket_offload_register+0x40>)
    c810:	f00c fee2 	bl	195d8 <assert_post_action>

	socket_ops = ops;
    c814:	6025      	str	r5, [r4, #0]
}
    c816:	bd38      	pop	{r3, r4, r5, pc}
    c818:	0001acd2 	.word	0x0001acd2
    c81c:	0001ac45 	.word	0x0001ac45
    c820:	0001ac97 	.word	0x0001ac97
    c824:	20020008 	.word	0x20020008
    c828:	0001acd6 	.word	0x0001acd6

0000c82c <clk_init>:
 * symbol.
 */
void nrf_power_clock_isr(void *arg);

static int clk_init(struct device *dev)
{
    c82c:	b510      	push	{r4, lr}
	IRQ_CONNECT(DT_INST_0_NORDIC_NRF_CLOCK_IRQ_0,
    c82e:	2200      	movs	r2, #0
{
    c830:	4604      	mov	r4, r0
	IRQ_CONNECT(DT_INST_0_NORDIC_NRF_CLOCK_IRQ_0,
    c832:	2101      	movs	r1, #1
    c834:	2005      	movs	r0, #5
    c836:	f000 fbbb 	bl	cfb0 <z_arm_irq_priority_set>
		    DT_INST_0_NORDIC_NRF_CLOCK_IRQ_0_PRIORITY,
		    nrf_power_clock_isr, 0, 0);

	irq_enable(DT_INST_0_NORDIC_NRF_CLOCK_IRQ_0);
    c83a:	2005      	movs	r0, #5
    c83c:	f000 fba8 	bl	cf90 <arch_irq_enable>
    return false;
}

NRF_STATIC_INLINE void nrf_clock_lf_src_set(NRF_CLOCK_Type * p_reg, nrf_clock_lfclk_t source)
{
    p_reg->LFCLKSRC = (uint32_t)(source);
    c840:	2202      	movs	r2, #2
    c842:	4b07      	ldr	r3, [pc, #28]	; (c860 <clk_init+0x34>)
 *
 * @param list A pointer on the list to initialize
 */
static inline void sys_slist_init(sys_slist_t *list)
{
	list->head = NULL;
    c844:	2000      	movs	r0, #0
    c846:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    p_reg->INTENSET = mask;
    c84a:	2203      	movs	r2, #3
    c84c:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304

	clock_irqs_enable();

	for (enum clock_control_nrf_type i = 0;
		i < CLOCK_CONTROL_NRF_TYPE_COUNT; i++) {
		sys_slist_init(&(get_sub_data(dev, i)->list));
    c850:	68a3      	ldr	r3, [r4, #8]
	list->tail = NULL;
    c852:	e9c3 0000 	strd	r0, r0, [r3]
    c856:	68a3      	ldr	r3, [r4, #8]
    c858:	e9c3 0003 	strd	r0, r0, [r3, #12]
	}

	return 0;
}
    c85c:	bd10      	pop	{r4, pc}
    c85e:	bf00      	nop
    c860:	40005000 	.word	0x40005000

0000c864 <get_status>:
{
    c864:	b538      	push	{r3, r4, r5, lr}
	__ASSERT_NO_MSG(type < CLOCK_CONTROL_NRF_TYPE_COUNT);
    c866:	b2cc      	uxtb	r4, r1
    c868:	2c01      	cmp	r4, #1
{
    c86a:	4605      	mov	r5, r0
	__ASSERT_NO_MSG(type < CLOCK_CONTROL_NRF_TYPE_COUNT);
    c86c:	d909      	bls.n	c882 <get_status+0x1e>
    c86e:	490b      	ldr	r1, [pc, #44]	; (c89c <get_status+0x38>)
    c870:	480b      	ldr	r0, [pc, #44]	; (c8a0 <get_status+0x3c>)
    c872:	2384      	movs	r3, #132	; 0x84
    c874:	4a0b      	ldr	r2, [pc, #44]	; (c8a4 <get_status+0x40>)
    c876:	f00c fe98 	bl	195aa <printk>
    c87a:	2184      	movs	r1, #132	; 0x84
    c87c:	4809      	ldr	r0, [pc, #36]	; (c8a4 <get_status+0x40>)
    c87e:	f00c feab 	bl	195d8 <assert_post_action>
	if (data->started) {
    c882:	210c      	movs	r1, #12
	data = get_sub_data(dev, type);
    c884:	68ab      	ldr	r3, [r5, #8]
	if (data->started) {
    c886:	fb04 3101 	mla	r1, r4, r1, r3
    c88a:	7a4b      	ldrb	r3, [r1, #9]
    c88c:	b923      	cbnz	r3, c898 <get_status+0x34>
	if (data->ref > 0) {
    c88e:	7a08      	ldrb	r0, [r1, #8]
		return CLOCK_CONTROL_STATUS_ON;
    c890:	fab0 f080 	clz	r0, r0
    c894:	0940      	lsrs	r0, r0, #5
}
    c896:	bd38      	pop	{r3, r4, r5, pc}
		return CLOCK_CONTROL_STATUS_ON;
    c898:	2002      	movs	r0, #2
    c89a:	e7fc      	b.n	c896 <get_status+0x32>
    c89c:	0001ad8b 	.word	0x0001ad8b
    c8a0:	0001ac45 	.word	0x0001ac45
    c8a4:	0001ad50 	.word	0x0001ad50

0000c8a8 <clock_async_start>:
{
    c8a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	enum clock_control_nrf_type type = (enum clock_control_nrf_type)subsys;
    c8ac:	b2cd      	uxtb	r5, r1
	__ASSERT_NO_MSG(type < CLOCK_CONTROL_NRF_TYPE_COUNT);
    c8ae:	2d01      	cmp	r5, #1
{
    c8b0:	4607      	mov	r7, r0
    c8b2:	4614      	mov	r4, r2
	__ASSERT_NO_MSG(type < CLOCK_CONTROL_NRF_TYPE_COUNT);
    c8b4:	d909      	bls.n	c8ca <clock_async_start+0x22>
    c8b6:	494a      	ldr	r1, [pc, #296]	; (c9e0 <clock_async_start+0x138>)
    c8b8:	484a      	ldr	r0, [pc, #296]	; (c9e4 <clock_async_start+0x13c>)
    c8ba:	23fd      	movs	r3, #253	; 0xfd
    c8bc:	4a4a      	ldr	r2, [pc, #296]	; (c9e8 <clock_async_start+0x140>)
    c8be:	f00c fe74 	bl	195aa <printk>
    c8c2:	21fd      	movs	r1, #253	; 0xfd
    c8c4:	4848      	ldr	r0, [pc, #288]	; (c9e8 <clock_async_start+0x140>)
    c8c6:	f00c fe87 	bl	195d8 <assert_post_action>
	const struct nrf_clock_control_config *config =
    c8ca:	683b      	ldr	r3, [r7, #0]
	clk_data = get_sub_data(dev, type);
    c8cc:	f8d7 8008 	ldr.w	r8, [r7, #8]
	const struct nrf_clock_control_config *config =
    c8d0:	f8d3 9008 	ldr.w	r9, [r3, #8]
	__ASSERT_NO_MSG((data == NULL) ||
    c8d4:	2c00      	cmp	r4, #0
    c8d6:	d159      	bne.n	c98c <clock_async_start+0xe4>
	__asm__ volatile(
    c8d8:	f04f 0320 	mov.w	r3, #32
    c8dc:	f3ef 8a11 	mrs	sl, BASEPRI
    c8e0:	f383 8811 	msr	BASEPRI, r3
    c8e4:	f3bf 8f6f 	isb	sy
	ref = ++clk_data->ref;
    c8e8:	230c      	movs	r3, #12
    c8ea:	fb03 8305 	mla	r3, r3, r5, r8
    c8ee:	7a1e      	ldrb	r6, [r3, #8]
    c8f0:	3601      	adds	r6, #1
    c8f2:	b2f6      	uxtb	r6, r6
    c8f4:	721e      	strb	r6, [r3, #8]
	__ASSERT_NO_MSG(clk_data->ref > 0);
    c8f6:	b95e      	cbnz	r6, c910 <clock_async_start+0x68>
    c8f8:	493c      	ldr	r1, [pc, #240]	; (c9ec <clock_async_start+0x144>)
    c8fa:	483a      	ldr	r0, [pc, #232]	; (c9e4 <clock_async_start+0x13c>)
    c8fc:	f44f 7387 	mov.w	r3, #270	; 0x10e
    c900:	4a39      	ldr	r2, [pc, #228]	; (c9e8 <clock_async_start+0x140>)
    c902:	f00c fe52 	bl	195aa <printk>
    c906:	f44f 7187 	mov.w	r1, #270	; 0x10e
    c90a:	4837      	ldr	r0, [pc, #220]	; (c9e8 <clock_async_start+0x140>)
    c90c:	f00c fe64 	bl	195d8 <assert_post_action>
	__asm__ volatile(
    c910:	f38a 8811 	msr	BASEPRI, sl
    c914:	f3bf 8f6f 	isb	sy
	if (data) {
    c918:	b32c      	cbz	r4, c966 <clock_async_start+0xbe>
    p_reg->INTENCLR = mask;
    c91a:	2203      	movs	r2, #3
    c91c:	4b34      	ldr	r3, [pc, #208]	; (c9f0 <clock_async_start+0x148>)
    c91e:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
		already_started = clk_data->started;
    c922:	220c      	movs	r2, #12
    c924:	436a      	muls	r2, r5
    c926:	eb08 0302 	add.w	r3, r8, r2
    c92a:	7a59      	ldrb	r1, [r3, #9]
		if (!already_started) {
    c92c:	b991      	cbnz	r1, c954 <clock_async_start+0xac>
	__asm__ volatile(
    c92e:	f04f 0020 	mov.w	r0, #32
    c932:	f3ef 8c11 	mrs	ip, BASEPRI
    c936:	f380 8811 	msr	BASEPRI, r0
    c93a:	f3bf 8f6f 	isb	sy
	return node->next;
}

static inline void z_snode_next_set(sys_snode_t *parent, sys_snode_t *child)
{
	parent->next = child;
    c93e:	6021      	str	r1, [r4, #0]
 * @param node A pointer on the node to append
 */
static inline void sys_slist_append(sys_slist_t *list,
				    sys_snode_t *node);

Z_GENLIST_APPEND(slist, snode)
    c940:	6858      	ldr	r0, [r3, #4]
    c942:	2800      	cmp	r0, #0
    c944:	d13c      	bne.n	c9c0 <clock_async_start+0x118>
	list->tail = node;
    c946:	605c      	str	r4, [r3, #4]
	list->head = node;
    c948:	f848 4002 	str.w	r4, [r8, r2]
	__asm__ volatile(
    c94c:	f38c 8811 	msr	BASEPRI, ip
    c950:	f3bf 8f6f 	isb	sy
    p_reg->INTENSET = mask;
    c954:	2203      	movs	r2, #3
    c956:	4b26      	ldr	r3, [pc, #152]	; (c9f0 <clock_async_start+0x148>)
    c958:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
		if (already_started) {
    c95c:	b119      	cbz	r1, c966 <clock_async_start+0xbe>
			data->cb(dev, data->user_data);
    c95e:	e9d4 3101 	ldrd	r3, r1, [r4, #4]
    c962:	4638      	mov	r0, r7
    c964:	4798      	blx	r3
	if (ref == 1) {
    c966:	2e01      	cmp	r6, #1
    c968:	d10e      	bne.n	c988 <clock_async_start+0xe0>
		do_start =  (config->start_handler) ?
    c96a:	230c      	movs	r3, #12
    c96c:	436b      	muls	r3, r5
    c96e:	f859 3003 	ldr.w	r3, [r9, r3]
				config->start_handler(dev) : true;
    c972:	bb43      	cbnz	r3, c9c6 <clock_async_start+0x11e>
			nrf_clock_task_trigger(NRF_CLOCK,
    c974:	230c      	movs	r3, #12
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    c976:	2201      	movs	r2, #1
    c978:	fb03 9505 	mla	r5, r3, r5, r9
    c97c:	7aab      	ldrb	r3, [r5, #10]
    c97e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    c982:	f503 43a0 	add.w	r3, r3, #20480	; 0x5000
    c986:	601a      	str	r2, [r3, #0]
	return 0;
    c988:	2000      	movs	r0, #0
    c98a:	e027      	b.n	c9dc <clock_async_start+0x134>
	__ASSERT_NO_MSG((data == NULL) ||
    c98c:	6863      	ldr	r3, [r4, #4]
    c98e:	b95b      	cbnz	r3, c9a8 <clock_async_start+0x100>
    c990:	4918      	ldr	r1, [pc, #96]	; (c9f4 <clock_async_start+0x14c>)
    c992:	4814      	ldr	r0, [pc, #80]	; (c9e4 <clock_async_start+0x13c>)
    c994:	f44f 7381 	mov.w	r3, #258	; 0x102
    c998:	4a13      	ldr	r2, [pc, #76]	; (c9e8 <clock_async_start+0x140>)
    c99a:	f00c fe06 	bl	195aa <printk>
    c99e:	f44f 7181 	mov.w	r1, #258	; 0x102
    c9a2:	4811      	ldr	r0, [pc, #68]	; (c9e8 <clock_async_start+0x140>)
    c9a4:	f00c fe18 	bl	195d8 <assert_post_action>
	sys_snode_t *item = sys_slist_peek_head(list);
    c9a8:	230c      	movs	r3, #12
    c9aa:	436b      	muls	r3, r5
    c9ac:	f858 3003 	ldr.w	r3, [r8, r3]
		if (item == node) {
    c9b0:	429c      	cmp	r4, r3
    c9b2:	d011      	beq.n	c9d8 <clock_async_start+0x130>
Z_GENLIST_PEEK_NEXT(slist, snode)
    c9b4:	2b00      	cmp	r3, #0
    c9b6:	d08f      	beq.n	c8d8 <clock_async_start+0x30>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
    c9b8:	681b      	ldr	r3, [r3, #0]
	} while (item);
    c9ba:	2b00      	cmp	r3, #0
    c9bc:	d1f8      	bne.n	c9b0 <clock_async_start+0x108>
    c9be:	e78b      	b.n	c8d8 <clock_async_start+0x30>
	parent->next = child;
    c9c0:	6004      	str	r4, [r0, #0]
	list->tail = node;
    c9c2:	605c      	str	r4, [r3, #4]
    c9c4:	e7c2      	b.n	c94c <clock_async_start+0xa4>
				config->start_handler(dev) : true;
    c9c6:	4638      	mov	r0, r7
    c9c8:	4798      	blx	r3
    c9ca:	2800      	cmp	r0, #0
    c9cc:	d1d2      	bne.n	c974 <clock_async_start+0xcc>
			clkstarted_handle(dev, type);
    c9ce:	4629      	mov	r1, r5
    c9d0:	4638      	mov	r0, r7
    c9d2:	f00c fe0b 	bl	195ec <clkstarted_handle>
    c9d6:	e7d7      	b.n	c988 <clock_async_start+0xe0>
		return -EBUSY;
    c9d8:	f06f 000f 	mvn.w	r0, #15
}
    c9dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    c9e0:	0001ad8b 	.word	0x0001ad8b
    c9e4:	0001ac45 	.word	0x0001ac45
    c9e8:	0001ad50 	.word	0x0001ad50
    c9ec:	0001ad3e 	.word	0x0001ad3e
    c9f0:	40005000 	.word	0x40005000
    c9f4:	0001acf0 	.word	0x0001acf0

0000c9f8 <clock_stop>:
{
    c9f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	__ASSERT_NO_MSG(type < CLOCK_CONTROL_NRF_TYPE_COUNT);
    c9fc:	b2cc      	uxtb	r4, r1
    c9fe:	2c01      	cmp	r4, #1
{
    ca00:	4605      	mov	r5, r0
	__ASSERT_NO_MSG(type < CLOCK_CONTROL_NRF_TYPE_COUNT);
    ca02:	d909      	bls.n	ca18 <clock_stop+0x20>
    ca04:	4924      	ldr	r1, [pc, #144]	; (ca98 <clock_stop+0xa0>)
    ca06:	4825      	ldr	r0, [pc, #148]	; (ca9c <clock_stop+0xa4>)
    ca08:	2399      	movs	r3, #153	; 0x99
    ca0a:	4a25      	ldr	r2, [pc, #148]	; (caa0 <clock_stop+0xa8>)
    ca0c:	f00c fdcd 	bl	195aa <printk>
    ca10:	2199      	movs	r1, #153	; 0x99
    ca12:	4823      	ldr	r0, [pc, #140]	; (caa0 <clock_stop+0xa8>)
    ca14:	f00c fde0 	bl	195d8 <assert_post_action>
	const struct nrf_clock_control_config *config =
    ca18:	682b      	ldr	r3, [r5, #0]
	data = get_sub_data(dev, type);
    ca1a:	68af      	ldr	r7, [r5, #8]
	const struct nrf_clock_control_config *config =
    ca1c:	f8d3 8008 	ldr.w	r8, [r3, #8]
	__asm__ volatile(
    ca20:	f04f 0320 	mov.w	r3, #32
    ca24:	f3ef 8611 	mrs	r6, BASEPRI
    ca28:	f383 8811 	msr	BASEPRI, r3
    ca2c:	f3bf 8f6f 	isb	sy
	if (data->ref == 0) {
    ca30:	220c      	movs	r2, #12
    ca32:	4362      	muls	r2, r4
    ca34:	18b9      	adds	r1, r7, r2
    ca36:	7a0b      	ldrb	r3, [r1, #8]
    ca38:	b34b      	cbz	r3, ca8e <clock_stop+0x96>
	data->ref--;
    ca3a:	3b01      	subs	r3, #1
    ca3c:	b2db      	uxtb	r3, r3
    ca3e:	720b      	strb	r3, [r1, #8]
	if (data->ref == 0) {
    ca40:	bb43      	cbnz	r3, ca94 <clock_stop+0x9c>
	list->head = NULL;
    ca42:	50bb      	str	r3, [r7, r2]
		do_stop =  (config->stop_handler) ?
    ca44:	4442      	add	r2, r8
	list->tail = NULL;
    ca46:	604b      	str	r3, [r1, #4]
    ca48:	6853      	ldr	r3, [r2, #4]
				config->stop_handler(dev) : true;
    ca4a:	b9db      	cbnz	r3, ca84 <clock_stop+0x8c>
			nrf_clock_task_trigger(NRF_CLOCK, config->stop_tsk);
    ca4c:	220c      	movs	r2, #12
    ca4e:	2101      	movs	r1, #1
    ca50:	fb04 8202 	mla	r2, r4, r2, r8
    ca54:	7ad3      	ldrb	r3, [r2, #11]
    ca56:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    ca5a:	f503 43a0 	add.w	r3, r3, #20480	; 0x5000
    ca5e:	6019      	str	r1, [r3, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    ca60:	8913      	ldrh	r3, [r2, #8]
    ca62:	2200      	movs	r2, #0
    ca64:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    ca68:	f503 43a0 	add.w	r3, r3, #20480	; 0x5000
    ca6c:	601a      	str	r2, [r3, #0]
		data->started = false;
    ca6e:	230c      	movs	r3, #12
    ca70:	2000      	movs	r0, #0
    ca72:	fb04 7403 	mla	r4, r4, r3, r7
    ca76:	7260      	strb	r0, [r4, #9]
	__asm__ volatile(
    ca78:	f386 8811 	msr	BASEPRI, r6
    ca7c:	f3bf 8f6f 	isb	sy
}
    ca80:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
				config->stop_handler(dev) : true;
    ca84:	4628      	mov	r0, r5
    ca86:	4798      	blx	r3
    ca88:	2800      	cmp	r0, #0
    ca8a:	d1df      	bne.n	ca4c <clock_stop+0x54>
    ca8c:	e7ef      	b.n	ca6e <clock_stop+0x76>
		err = -EALREADY;
    ca8e:	f06f 0044 	mvn.w	r0, #68	; 0x44
    ca92:	e7f1      	b.n	ca78 <clock_stop+0x80>
	int err = 0;
    ca94:	2000      	movs	r0, #0
    ca96:	e7ef      	b.n	ca78 <clock_stop+0x80>
    ca98:	0001ad8b 	.word	0x0001ad8b
    ca9c:	0001ac45 	.word	0x0001ac45
    caa0:	0001ad50 	.word	0x0001ad50

0000caa4 <nrf_power_clock_isr>:
	}
#endif
}

void nrf_power_clock_isr(void *arg)
{
    caa4:	b508      	push	{r3, lr}
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    caa6:	4b10      	ldr	r3, [pc, #64]	; (cae8 <nrf_power_clock_isr+0x44>)
    caa8:	681a      	ldr	r2, [r3, #0]
	bool ret = nrf_clock_event_check(NRF_CLOCK, evt) &&
    caaa:	b162      	cbz	r2, cac6 <nrf_power_clock_isr+0x22>
    return p_reg->INTENSET & mask;
    caac:	4a0f      	ldr	r2, [pc, #60]	; (caec <nrf_power_clock_isr+0x48>)
    caae:	f8d2 2304 	ldr.w	r2, [r2, #772]	; 0x304
	if (ret) {
    cab2:	07d1      	lsls	r1, r2, #31
    cab4:	d507      	bpl.n	cac6 <nrf_power_clock_isr+0x22>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    cab6:	2200      	movs	r2, #0
	struct device *dev = DEVICE_GET(clock_nrf);

	if (clock_event_check_and_clean(NRF_CLOCK_EVENT_HFCLKSTARTED,
					NRF_CLOCK_INT_HF_STARTED_MASK)) {
		struct nrf_clock_control_sub_data *data =
				get_sub_data(dev, CLOCK_CONTROL_NRF_TYPE_HFCLK);
    cab8:	480d      	ldr	r0, [pc, #52]	; (caf0 <nrf_power_clock_isr+0x4c>)
    caba:	601a      	str	r2, [r3, #0]

		/* Check needed due to anomaly 201:
		 * HFCLKSTARTED may be generated twice.
		 */
		if (!data->started) {
    cabc:	6883      	ldr	r3, [r0, #8]
    cabe:	7a59      	ldrb	r1, [r3, #9]
    cac0:	b909      	cbnz	r1, cac6 <nrf_power_clock_isr+0x22>
			clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_HFCLK);
    cac2:	f00c fd93 	bl	195ec <clkstarted_handle>
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    cac6:	4b0b      	ldr	r3, [pc, #44]	; (caf4 <nrf_power_clock_isr+0x50>)
    cac8:	681a      	ldr	r2, [r3, #0]
	bool ret = nrf_clock_event_check(NRF_CLOCK, evt) &&
    caca:	b162      	cbz	r2, cae6 <nrf_power_clock_isr+0x42>
    return p_reg->INTENSET & mask;
    cacc:	4a07      	ldr	r2, [pc, #28]	; (caec <nrf_power_clock_isr+0x48>)
    cace:	f8d2 2304 	ldr.w	r2, [r2, #772]	; 0x304
	if (ret) {
    cad2:	0792      	lsls	r2, r2, #30
    cad4:	d507      	bpl.n	cae6 <nrf_power_clock_isr+0x42>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    cad6:	2200      	movs	r2, #0
					NRF_CLOCK_INT_LF_STARTED_MASK)) {
		if (IS_ENABLED(
			CONFIG_CLOCK_CONTROL_NRF_K32SRC_RC_CALIBRATION)) {
			z_nrf_clock_calibration_lfclk_started(dev);
		}
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_LFCLK);
    cad8:	2101      	movs	r1, #1
    cada:	601a      	str	r2, [r3, #0]
    cadc:	4804      	ldr	r0, [pc, #16]	; (caf0 <nrf_power_clock_isr+0x4c>)
	usb_power_isr();

	if (IS_ENABLED(CONFIG_CLOCK_CONTROL_NRF_K32SRC_RC_CALIBRATION)) {
		z_nrf_clock_calibration_isr();
	}
}
    cade:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_LFCLK);
    cae2:	f00c bd83 	b.w	195ec <clkstarted_handle>
}
    cae6:	bd08      	pop	{r3, pc}
    cae8:	40005100 	.word	0x40005100
    caec:	40005000 	.word	0x40005000
    caf0:	20026094 	.word	0x20026094
    caf4:	40005104 	.word	0x40005104

0000caf8 <z_clock_isr>:
#include <drivers/timer/system_timer.h>

/* Weak-linked noop defaults for optional driver interfaces: */

void __weak z_clock_isr(void *arg)
{
    caf8:	b510      	push	{r4, lr}
	__ASSERT_NO_MSG(false);
    cafa:	4c06      	ldr	r4, [pc, #24]	; (cb14 <z_clock_isr+0x1c>)
    cafc:	4906      	ldr	r1, [pc, #24]	; (cb18 <z_clock_isr+0x20>)
    cafe:	4622      	mov	r2, r4
    cb00:	4806      	ldr	r0, [pc, #24]	; (cb1c <z_clock_isr+0x24>)
    cb02:	2317      	movs	r3, #23
    cb04:	f00c fd51 	bl	195aa <printk>
    cb08:	4620      	mov	r0, r4
}
    cb0a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	__ASSERT_NO_MSG(false);
    cb0e:	2117      	movs	r1, #23
    cb10:	f00c bd62 	b.w	195d8 <assert_post_action>
    cb14:	0001adbf 	.word	0x0001adbf
    cb18:	0001b6d7 	.word	0x0001b6d7
    cb1c:	0001ac45 	.word	0x0001ac45

0000cb20 <rtc1_nrf_isr>:
 * symbol.
 */
void rtc1_nrf_isr(void *arg)
{
	ARG_UNUSED(arg);
	RTC->EVENTS_COMPARE[0] = 0;
    cb20:	2200      	movs	r2, #0
{
    cb22:	b538      	push	{r3, r4, r5, lr}
	RTC->EVENTS_COMPARE[0] = 0;
    cb24:	4b22      	ldr	r3, [pc, #136]	; (cbb0 <rtc1_nrf_isr+0x90>)
    cb26:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
	__asm__ volatile(
    cb2a:	f04f 0320 	mov.w	r3, #32
    cb2e:	f3ef 8511 	mrs	r5, BASEPRI
    cb32:	f383 8811 	msr	BASEPRI, r3
    cb36:	f3bf 8f6f 	isb	sy
	 * actually a wrapper for a global spinlock!
	 */
	k.key = arch_irq_lock();

#ifdef CONFIG_SPIN_VALIDATE
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    cb3a:	481e      	ldr	r0, [pc, #120]	; (cbb4 <rtc1_nrf_isr+0x94>)
    cb3c:	f00b fec4 	bl	188c8 <z_spin_lock_valid>
    cb40:	b968      	cbnz	r0, cb5e <rtc1_nrf_isr+0x3e>
    cb42:	234a      	movs	r3, #74	; 0x4a
    cb44:	4a1c      	ldr	r2, [pc, #112]	; (cbb8 <rtc1_nrf_isr+0x98>)
    cb46:	491d      	ldr	r1, [pc, #116]	; (cbbc <rtc1_nrf_isr+0x9c>)
    cb48:	481d      	ldr	r0, [pc, #116]	; (cbc0 <rtc1_nrf_isr+0xa0>)
    cb4a:	f00c fd2e 	bl	195aa <printk>
    cb4e:	4919      	ldr	r1, [pc, #100]	; (cbb4 <rtc1_nrf_isr+0x94>)
    cb50:	481c      	ldr	r0, [pc, #112]	; (cbc4 <rtc1_nrf_isr+0xa4>)
    cb52:	f00c fd2a 	bl	195aa <printk>
    cb56:	214a      	movs	r1, #74	; 0x4a
    cb58:	4817      	ldr	r0, [pc, #92]	; (cbb8 <rtc1_nrf_isr+0x98>)
    cb5a:	f00c fd3d 	bl	195d8 <assert_post_action>
	while (!atomic_cas(&l->locked, 0, 1)) {
	}
#endif

#ifdef CONFIG_SPIN_VALIDATE
	z_spin_lock_set_owner(l);
    cb5e:	4815      	ldr	r0, [pc, #84]	; (cbb4 <rtc1_nrf_isr+0x94>)
    cb60:	f00b fed0 	bl	18904 <z_spin_lock_set_owner>
#endif
}

NRF_STATIC_INLINE uint32_t nrf_rtc_counter_get(NRF_RTC_Type const * p_reg)
{
     return p_reg->COUNTER;
    cb64:	4b12      	ldr	r3, [pc, #72]	; (cbb0 <rtc1_nrf_isr+0x90>)

	k_spinlock_key_t key = k_spin_lock(&lock);
	u32_t t = counter();
	u32_t dticks = counter_sub(t, last_count) / CYC_PER_TICK;
    cb66:	4a18      	ldr	r2, [pc, #96]	; (cbc8 <rtc1_nrf_isr+0xa8>)
    cb68:	f8d3 4504 	ldr.w	r4, [r3, #1284]	; 0x504
    cb6c:	6813      	ldr	r3, [r2, #0]
static ALWAYS_INLINE void k_spin_unlock(struct k_spinlock *l,
					k_spinlock_key_t key)
{
	ARG_UNUSED(l);
#ifdef CONFIG_SPIN_VALIDATE
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    cb6e:	4811      	ldr	r0, [pc, #68]	; (cbb4 <rtc1_nrf_isr+0x94>)
	return (a - b) & COUNTER_MAX;
    cb70:	1ae4      	subs	r4, r4, r3
    cb72:	f024 447f 	bic.w	r4, r4, #4278190080	; 0xff000000

	last_count += dticks * CYC_PER_TICK;
    cb76:	4423      	add	r3, r4
    cb78:	6013      	str	r3, [r2, #0]
    cb7a:	f00b feb3 	bl	188e4 <z_spin_unlock_valid>
    cb7e:	b968      	cbnz	r0, cb9c <rtc1_nrf_isr+0x7c>
    cb80:	235d      	movs	r3, #93	; 0x5d
    cb82:	4a0d      	ldr	r2, [pc, #52]	; (cbb8 <rtc1_nrf_isr+0x98>)
    cb84:	4911      	ldr	r1, [pc, #68]	; (cbcc <rtc1_nrf_isr+0xac>)
    cb86:	480e      	ldr	r0, [pc, #56]	; (cbc0 <rtc1_nrf_isr+0xa0>)
    cb88:	f00c fd0f 	bl	195aa <printk>
    cb8c:	4909      	ldr	r1, [pc, #36]	; (cbb4 <rtc1_nrf_isr+0x94>)
    cb8e:	4810      	ldr	r0, [pc, #64]	; (cbd0 <rtc1_nrf_isr+0xb0>)
    cb90:	f00c fd0b 	bl	195aa <printk>
    cb94:	215d      	movs	r1, #93	; 0x5d
    cb96:	4808      	ldr	r0, [pc, #32]	; (cbb8 <rtc1_nrf_isr+0x98>)
    cb98:	f00c fd1e 	bl	195d8 <assert_post_action>
	__asm__ volatile(
    cb9c:	f385 8811 	msr	BASEPRI, r5
    cba0:	f3bf 8f6f 	isb	sy
		}
		set_comparator(next);
	}

	k_spin_unlock(&lock, key);
	z_clock_announce(IS_ENABLED(CONFIG_TICKLESS_KERNEL) ? dticks : 1);
    cba4:	4620      	mov	r0, r4
}
    cba6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_clock_announce(IS_ENABLED(CONFIG_TICKLESS_KERNEL) ? dticks : 1);
    cbaa:	f00c b95b 	b.w	18e64 <z_clock_announce>
    cbae:	bf00      	nop
    cbb0:	40015000 	.word	0x40015000
    cbb4:	20020028 	.word	0x20020028
    cbb8:	0001adf1 	.word	0x0001adf1
    cbbc:	0001ae17 	.word	0x0001ae17
    cbc0:	0001ac45 	.word	0x0001ac45
    cbc4:	0001ae2c 	.word	0x0001ae2c
    cbc8:	20020024 	.word	0x20020024
    cbcc:	0001ae44 	.word	0x0001ae44
    cbd0:	0001ae5b 	.word	0x0001ae5b

0000cbd4 <z_clock_driver_init>:

int z_clock_driver_init(struct device *device)
{
    cbd4:	b570      	push	{r4, r5, r6, lr}
	if (z_syscall_trap()) {
		return (struct device *) arch_syscall_invoke1(*(uintptr_t *)&name, K_SYSCALL_DEVICE_GET_BINDING);
	}
#endif
	compiler_barrier();
	return z_impl_device_get_binding(name);
    cbd6:	4815      	ldr	r0, [pc, #84]	; (cc2c <z_clock_driver_init+0x58>)
    cbd8:	f00a fc28 	bl	1742c <z_impl_device_get_binding>
	struct device *clock;

	ARG_UNUSED(device);

	clock = device_get_binding(DT_INST_0_NORDIC_NRF_CLOCK_LABEL);
	if (!clock) {
    cbdc:	b310      	cbz	r0, cc24 <z_clock_driver_init+0x50>
				   clock_control_subsys_t sys)
{
	const struct clock_control_driver_api *api =
		(const struct clock_control_driver_api *)dev->driver_api;

	return api->on(dev, sys);
    cbde:	6843      	ldr	r3, [r0, #4]
    cbe0:	2101      	movs	r1, #1
    cbe2:	681b      	ldr	r3, [r3, #0]
    cbe4:	4798      	blx	r3
}

NRF_STATIC_INLINE void nrf_rtc_prescaler_set(NRF_RTC_Type * p_reg, uint32_t val)
{
    NRFX_ASSERT(val <= (RTC_PRESCALER_PRESCALER_Msk >> RTC_PRESCALER_PRESCALER_Pos));
    p_reg->PRESCALER = val;
    cbe6:	2400      	movs	r4, #0
    p_reg->CC[ch] = cc_val;
    cbe8:	2601      	movs	r6, #1
    p_reg->INTENSET = mask;
    cbea:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    cbee:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
    p_reg->PRESCALER = val;
    cbf2:	4d0f      	ldr	r5, [pc, #60]	; (cc30 <z_clock_driver_init+0x5c>)

	/* Clear the event flag and possible pending interrupt */
	nrf_rtc_event_clear(RTC, NRF_RTC_EVENT_COMPARE_0);
	NVIC_ClearPendingIRQ(RTC1_IRQn);

	IRQ_CONNECT(RTC1_IRQn, 1, rtc1_nrf_isr, 0, 0);
    cbf4:	4631      	mov	r1, r6
    cbf6:	f8c5 4508 	str.w	r4, [r5, #1288]	; 0x508
    p_reg->CC[ch] = cc_val;
    cbfa:	f8c5 6540 	str.w	r6, [r5, #1344]	; 0x540
    p_reg->INTENSET = mask;
    cbfe:	f8c5 3304 	str.w	r3, [r5, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    cc02:	4b0c      	ldr	r3, [pc, #48]	; (cc34 <z_clock_driver_init+0x60>)
    cc04:	2015      	movs	r0, #21
    cc06:	601c      	str	r4, [r3, #0]
    cc08:	4b0b      	ldr	r3, [pc, #44]	; (cc38 <z_clock_driver_init+0x64>)
    cc0a:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    cc0e:	4622      	mov	r2, r4
    cc10:	f000 f9ce 	bl	cfb0 <z_arm_irq_priority_set>
	irq_enable(RTC1_IRQn);
    cc14:	2015      	movs	r0, #21
    cc16:	f000 f9bb 	bl	cf90 <arch_irq_enable>

	if (!IS_ENABLED(CONFIG_TICKLESS_KERNEL)) {
		set_comparator(counter() + CYC_PER_TICK);
	}

	return 0;
    cc1a:	4620      	mov	r0, r4
    return (uint32_t)p_reg + task;
}

NRF_STATIC_INLINE void nrf_rtc_task_trigger(NRF_RTC_Type * p_reg, nrf_rtc_task_t task)
{
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
    cc1c:	4b07      	ldr	r3, [pc, #28]	; (cc3c <z_clock_driver_init+0x68>)
    cc1e:	601e      	str	r6, [r3, #0]
    cc20:	602e      	str	r6, [r5, #0]
}
    cc22:	bd70      	pop	{r4, r5, r6, pc}
		return -1;
    cc24:	f04f 30ff 	mov.w	r0, #4294967295
    cc28:	e7fb      	b.n	cc22 <z_clock_driver_init+0x4e>
    cc2a:	bf00      	nop
    cc2c:	0001adaf 	.word	0x0001adaf
    cc30:	40015000 	.word	0x40015000
    cc34:	40015140 	.word	0x40015140
    cc38:	e000e100 	.word	0xe000e100
    cc3c:	40015008 	.word	0x40015008

0000cc40 <z_clock_set_timeout>:

void z_clock_set_timeout(s32_t ticks, bool idle)
{
    cc40:	b570      	push	{r4, r5, r6, lr}
	ARG_UNUSED(idle);

#ifdef CONFIG_TICKLESS_KERNEL
	ticks = (ticks == K_FOREVER) ? MAX_TICKS : ticks;
    cc42:	4c3a      	ldr	r4, [pc, #232]	; (cd2c <z_clock_set_timeout+0xec>)
    cc44:	f1b0 3fff 	cmp.w	r0, #4294967295
    cc48:	bf18      	it	ne
    cc4a:	4604      	movne	r4, r0
	__asm__ volatile(
    cc4c:	f04f 0320 	mov.w	r3, #32
    cc50:	f3ef 8511 	mrs	r5, BASEPRI
    cc54:	f383 8811 	msr	BASEPRI, r3
    cc58:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    cc5c:	4834      	ldr	r0, [pc, #208]	; (cd30 <z_clock_set_timeout+0xf0>)
    cc5e:	f00b fe33 	bl	188c8 <z_spin_lock_valid>
    cc62:	b968      	cbnz	r0, cc80 <z_clock_set_timeout+0x40>
    cc64:	234a      	movs	r3, #74	; 0x4a
    cc66:	4a33      	ldr	r2, [pc, #204]	; (cd34 <z_clock_set_timeout+0xf4>)
    cc68:	4933      	ldr	r1, [pc, #204]	; (cd38 <z_clock_set_timeout+0xf8>)
    cc6a:	4834      	ldr	r0, [pc, #208]	; (cd3c <z_clock_set_timeout+0xfc>)
    cc6c:	f00c fc9d 	bl	195aa <printk>
    cc70:	492f      	ldr	r1, [pc, #188]	; (cd30 <z_clock_set_timeout+0xf0>)
    cc72:	4833      	ldr	r0, [pc, #204]	; (cd40 <z_clock_set_timeout+0x100>)
    cc74:	f00c fc99 	bl	195aa <printk>
    cc78:	214a      	movs	r1, #74	; 0x4a
    cc7a:	482e      	ldr	r0, [pc, #184]	; (cd34 <z_clock_set_timeout+0xf4>)
    cc7c:	f00c fcac 	bl	195d8 <assert_post_action>
	z_spin_lock_set_owner(l);
    cc80:	482b      	ldr	r0, [pc, #172]	; (cd30 <z_clock_set_timeout+0xf0>)
    cc82:	f00b fe3f 	bl	18904 <z_spin_lock_set_owner>
     return p_reg->COUNTER;
    cc86:	4b2f      	ldr	r3, [pc, #188]	; (cd44 <z_clock_set_timeout+0x104>)
    cc88:	4e28      	ldr	r6, [pc, #160]	; (cd2c <z_clock_set_timeout+0xec>)
    cc8a:	f8d3 2504 	ldr.w	r2, [r3, #1284]	; 0x504
	ticks = MAX(MIN(ticks - 1, (s32_t)MAX_TICKS), 0);

	k_spinlock_key_t key = k_spin_lock(&lock);
	u32_t cyc, dt, t = counter();
	u32_t unannounced = counter_sub(t, last_count);
    cc8e:	4b2e      	ldr	r3, [pc, #184]	; (cd48 <z_clock_set_timeout+0x108>)
    cc90:	681b      	ldr	r3, [r3, #0]
	return (a - b) & COUNTER_MAX;
    cc92:	1ad0      	subs	r0, r2, r3
	/* If we haven't announced for more than half the 24-bit wrap
	 * duration, then force an announce to avoid loss of a wrap
	 * event.  This can happen if new timeouts keep being set
	 * before the existing one triggers the interrupt.
	 */
	if (unannounced >= COUNTER_HALF_SPAN) {
    cc94:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
	return (a - b) & COUNTER_MAX;
    cc98:	f020 417f 	bic.w	r1, r0, #4278190080	; 0xff000000
	if (unannounced >= COUNTER_HALF_SPAN) {
    cc9c:	d12c      	bne.n	ccf8 <z_clock_set_timeout+0xb8>
	ticks = MAX(MIN(ticks - 1, (s32_t)MAX_TICKS), 0);
    cc9e:	1e60      	subs	r0, r4, #1
    cca0:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
    cca4:	42b0      	cmp	r0, r6
    cca6:	bfa8      	it	ge
    cca8:	4630      	movge	r0, r6
	}

	/* Get the cycles from last_count to the tick boundary after
	 * the requested ticks have passed starting now.
	 */
	cyc = ticks * CYC_PER_TICK + 1 + unannounced;
    ccaa:	3101      	adds	r1, #1
    ccac:	4408      	add	r0, r1
	 */
	if (cyc > MAX_CYCLES) {
		cyc = MAX_CYCLES;
	}

	cyc += last_count;
    ccae:	42b0      	cmp	r0, r6
    ccb0:	bf94      	ite	ls
    ccb2:	181b      	addls	r3, r3, r0
    ccb4:	199b      	addhi	r3, r3, r6
	return (a - b) & COUNTER_MAX;
    ccb6:	1a9a      	subs	r2, r3, r2
    ccb8:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
    ccbc:	4921      	ldr	r1, [pc, #132]	; (cd44 <z_clock_set_timeout+0x104>)
    ccbe:	f023 407f 	bic.w	r0, r3, #4278190080	; 0xff000000
	 * least on nRF52.  Some experimentation on nrf52840 shows
	 * that you need to be early by about 400 processor cycles
	 * (about 1/5th of a RTC cycle) in order to reliably get the
	 * interrupt.  The docs say two cycles, they mean two cycles.
	 */
	if (counter_sub(cyc, t) > 2) {
    ccc2:	2a02      	cmp	r2, #2
    p_reg->CC[ch] = cc_val;
    ccc4:	f8c1 0540 	str.w	r0, [r1, #1344]	; 0x540
    ccc8:	d918      	bls.n	ccfc <z_clock_set_timeout+0xbc>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    ccca:	4819      	ldr	r0, [pc, #100]	; (cd30 <z_clock_set_timeout+0xf0>)
    cccc:	f00b fe0a 	bl	188e4 <z_spin_unlock_valid>
    ccd0:	b968      	cbnz	r0, ccee <z_clock_set_timeout+0xae>
    ccd2:	235d      	movs	r3, #93	; 0x5d
    ccd4:	4a17      	ldr	r2, [pc, #92]	; (cd34 <z_clock_set_timeout+0xf4>)
    ccd6:	491d      	ldr	r1, [pc, #116]	; (cd4c <z_clock_set_timeout+0x10c>)
    ccd8:	4818      	ldr	r0, [pc, #96]	; (cd3c <z_clock_set_timeout+0xfc>)
    ccda:	f00c fc66 	bl	195aa <printk>
    ccde:	4914      	ldr	r1, [pc, #80]	; (cd30 <z_clock_set_timeout+0xf0>)
    cce0:	481b      	ldr	r0, [pc, #108]	; (cd50 <z_clock_set_timeout+0x110>)
    cce2:	f00c fc62 	bl	195aa <printk>
    cce6:	215d      	movs	r1, #93	; 0x5d
    cce8:	4812      	ldr	r0, [pc, #72]	; (cd34 <z_clock_set_timeout+0xf4>)
    ccea:	f00c fc75 	bl	195d8 <assert_post_action>
	__asm__ volatile(
    ccee:	f385 8811 	msr	BASEPRI, r5
    ccf2:	f3bf 8f6f 	isb	sy
	}
#endif

	k_spin_unlock(&lock, key);
#endif /* CONFIG_TICKLESS_KERNEL */
}
    ccf6:	bd70      	pop	{r4, r5, r6, pc}
		ticks = 0;
    ccf8:	2000      	movs	r0, #0
    ccfa:	e7d6      	b.n	ccaa <z_clock_set_timeout+0x6a>
     return p_reg->COUNTER;
    ccfc:	f8d1 2504 	ldr.w	r2, [r1, #1284]	; 0x504
		if (dt == 0 || dt > 0x7fffff) {
    cd00:	4814      	ldr	r0, [pc, #80]	; (cd54 <z_clock_set_timeout+0x114>)
	return (a - b) & COUNTER_MAX;
    cd02:	1a9a      	subs	r2, r3, r2
    cd04:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
		if (dt == 0 || dt > 0x7fffff) {
    cd08:	1e54      	subs	r4, r2, #1
    cd0a:	4284      	cmp	r4, r0
    cd0c:	d905      	bls.n	cd1a <z_clock_set_timeout+0xda>
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    cd0e:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
    cd12:	4b11      	ldr	r3, [pc, #68]	; (cd58 <z_clock_set_timeout+0x118>)
    cd14:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
    cd18:	e7d7      	b.n	ccca <z_clock_set_timeout+0x8a>
		} else if (dt == 1) {
    cd1a:	2a01      	cmp	r2, #1
			set_comparator(cyc + 2);
    cd1c:	bf02      	ittt	eq
    cd1e:	3302      	addeq	r3, #2
	nrf_rtc_cc_set(RTC, 0, cyc & COUNTER_MAX);
    cd20:	f023 437f 	biceq.w	r3, r3, #4278190080	; 0xff000000
    p_reg->CC[ch] = cc_val;
    cd24:	f8c1 3540 	streq.w	r3, [r1, #1344]	; 0x540
    cd28:	e7cf      	b.n	ccca <z_clock_set_timeout+0x8a>
    cd2a:	bf00      	nop
    cd2c:	00fffffe 	.word	0x00fffffe
    cd30:	20020028 	.word	0x20020028
    cd34:	0001adf1 	.word	0x0001adf1
    cd38:	0001ae17 	.word	0x0001ae17
    cd3c:	0001ac45 	.word	0x0001ac45
    cd40:	0001ae2c 	.word	0x0001ae2c
    cd44:	40015000 	.word	0x40015000
    cd48:	20020024 	.word	0x20020024
    cd4c:	0001ae44 	.word	0x0001ae44
    cd50:	0001ae5b 	.word	0x0001ae5b
    cd54:	007ffffe 	.word	0x007ffffe
    cd58:	e000e100 	.word	0xe000e100

0000cd5c <z_clock_elapsed>:

u32_t z_clock_elapsed(void)
{
    cd5c:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
    cd5e:	f04f 0320 	mov.w	r3, #32
    cd62:	f3ef 8511 	mrs	r5, BASEPRI
    cd66:	f383 8811 	msr	BASEPRI, r3
    cd6a:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    cd6e:	481a      	ldr	r0, [pc, #104]	; (cdd8 <z_clock_elapsed+0x7c>)
    cd70:	f00b fdaa 	bl	188c8 <z_spin_lock_valid>
    cd74:	b968      	cbnz	r0, cd92 <z_clock_elapsed+0x36>
    cd76:	234a      	movs	r3, #74	; 0x4a
    cd78:	4a18      	ldr	r2, [pc, #96]	; (cddc <z_clock_elapsed+0x80>)
    cd7a:	4919      	ldr	r1, [pc, #100]	; (cde0 <z_clock_elapsed+0x84>)
    cd7c:	4819      	ldr	r0, [pc, #100]	; (cde4 <z_clock_elapsed+0x88>)
    cd7e:	f00c fc14 	bl	195aa <printk>
    cd82:	4915      	ldr	r1, [pc, #84]	; (cdd8 <z_clock_elapsed+0x7c>)
    cd84:	4818      	ldr	r0, [pc, #96]	; (cde8 <z_clock_elapsed+0x8c>)
    cd86:	f00c fc10 	bl	195aa <printk>
    cd8a:	214a      	movs	r1, #74	; 0x4a
    cd8c:	4813      	ldr	r0, [pc, #76]	; (cddc <z_clock_elapsed+0x80>)
    cd8e:	f00c fc23 	bl	195d8 <assert_post_action>
	z_spin_lock_set_owner(l);
    cd92:	4811      	ldr	r0, [pc, #68]	; (cdd8 <z_clock_elapsed+0x7c>)
    cd94:	f00b fdb6 	bl	18904 <z_spin_lock_set_owner>
     return p_reg->COUNTER;
    cd98:	4b14      	ldr	r3, [pc, #80]	; (cdec <z_clock_elapsed+0x90>)
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    cd9a:	480f      	ldr	r0, [pc, #60]	; (cdd8 <z_clock_elapsed+0x7c>)
    cd9c:	f8d3 4504 	ldr.w	r4, [r3, #1284]	; 0x504
	if (!IS_ENABLED(CONFIG_TICKLESS_KERNEL)) {
		return 0;
	}

	k_spinlock_key_t key = k_spin_lock(&lock);
	u32_t ret = counter_sub(counter(), last_count) / CYC_PER_TICK;
    cda0:	4b13      	ldr	r3, [pc, #76]	; (cdf0 <z_clock_elapsed+0x94>)
	return (a - b) & COUNTER_MAX;
    cda2:	681b      	ldr	r3, [r3, #0]
    cda4:	1ae4      	subs	r4, r4, r3
    cda6:	f024 447f 	bic.w	r4, r4, #4278190080	; 0xff000000
    cdaa:	f00b fd9b 	bl	188e4 <z_spin_unlock_valid>
    cdae:	b968      	cbnz	r0, cdcc <z_clock_elapsed+0x70>
    cdb0:	235d      	movs	r3, #93	; 0x5d
    cdb2:	4a0a      	ldr	r2, [pc, #40]	; (cddc <z_clock_elapsed+0x80>)
    cdb4:	490f      	ldr	r1, [pc, #60]	; (cdf4 <z_clock_elapsed+0x98>)
    cdb6:	480b      	ldr	r0, [pc, #44]	; (cde4 <z_clock_elapsed+0x88>)
    cdb8:	f00c fbf7 	bl	195aa <printk>
    cdbc:	4906      	ldr	r1, [pc, #24]	; (cdd8 <z_clock_elapsed+0x7c>)
    cdbe:	480e      	ldr	r0, [pc, #56]	; (cdf8 <z_clock_elapsed+0x9c>)
    cdc0:	f00c fbf3 	bl	195aa <printk>
    cdc4:	215d      	movs	r1, #93	; 0x5d
    cdc6:	4805      	ldr	r0, [pc, #20]	; (cddc <z_clock_elapsed+0x80>)
    cdc8:	f00c fc06 	bl	195d8 <assert_post_action>
	__asm__ volatile(
    cdcc:	f385 8811 	msr	BASEPRI, r5
    cdd0:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&lock, key);
	return ret;
}
    cdd4:	4620      	mov	r0, r4
    cdd6:	bd38      	pop	{r3, r4, r5, pc}
    cdd8:	20020028 	.word	0x20020028
    cddc:	0001adf1 	.word	0x0001adf1
    cde0:	0001ae17 	.word	0x0001ae17
    cde4:	0001ac45 	.word	0x0001ac45
    cde8:	0001ae2c 	.word	0x0001ae2c
    cdec:	40015000 	.word	0x40015000
    cdf0:	20020024 	.word	0x20020024
    cdf4:	0001ae44 	.word	0x0001ae44
    cdf8:	0001ae5b 	.word	0x0001ae5b

0000cdfc <z_arm_exc_exit>:
    /* r0 contains the caller mode */
    push {r0, lr}
#endif

#ifdef CONFIG_PREEMPT_ENABLED
    ldr r0, =_kernel
    cdfc:	4804      	ldr	r0, [pc, #16]	; (ce10 <_EXIT_EXC+0x2>)

    ldr r1, [r0, #_kernel_offset_to_current]
    cdfe:	6881      	ldr	r1, [r0, #8]

    ldr r0, [r0, #_kernel_offset_to_ready_q_cache]
    ce00:	6a40      	ldr	r0, [r0, #36]	; 0x24
    cmp r0, r1
    ce02:	4288      	cmp	r0, r1
    beq _EXIT_EXC
    ce04:	d003      	beq.n	ce0e <_EXIT_EXC>

#if defined(CONFIG_CPU_CORTEX_M)
    /* context switch required, pend the PendSV exception */
    ldr r1, =_SCS_ICSR
    ce06:	4903      	ldr	r1, [pc, #12]	; (ce14 <_EXIT_EXC+0x6>)
    ldr r2, =_SCS_ICSR_PENDSV
    ce08:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    str r2, [r1]
    ce0c:	600a      	str	r2, [r1, #0]

0000ce0e <_EXIT_EXC>:
    bl z_check_stack_sentinel
#endif /* CONFIG_CPU_CORTEX_M */
#endif /* CONFIG_STACK_SENTINEL */

#if defined(CONFIG_CPU_CORTEX_M)
    bx lr
    ce0e:	4770      	bx	lr
    ldr r0, =_kernel
    ce10:	2002496c 	.word	0x2002496c
    ldr r1, =_SCS_ICSR
    ce14:	e000ed04 	.word	0xe000ed04

0000ce18 <z_arm_pendsv>:
    pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_TRACING */

    /* load _kernel into r1 and current k_thread into r2 */
    ldr r1, =_kernel
    ce18:	4929      	ldr	r1, [pc, #164]	; (cec0 <in_fp_endif+0x2c>)
    ldr r2, [r1, #_kernel_offset_to_current]
    ce1a:	688a      	ldr	r2, [r1, #8]

    /* addr of callee-saved regs in thread in r0 */
    ldr r0, =_thread_offset_to_callee_saved
    ce1c:	f04f 0028 	mov.w	r0, #40	; 0x28
    add r0, r2
    ce20:	4410      	add	r0, r2

    /* save callee-saved + psp in thread */
#if defined(CONFIG_CPU_CORTEX_M)
    mrs ip, PSP
    ce22:	f3ef 8c09 	mrs	ip, PSP
    mov r6, r11
    mov r7, ip
    /* store r8-12 */
    stmea r0!, {r3-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    stmia r0, {v1-v8, ip}
    ce26:	e880 1ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
#ifdef CONFIG_FP_SHARING
    /* Assess whether switched-out thread had been using the FP registers. */
    ldr r0, =0x10 /* EXC_RETURN.F_Type Mask */
    ce2a:	f04f 0010 	mov.w	r0, #16
    tst lr, r0    /* EXC_RETURN & EXC_RETURN.F_Type_Msk */
    ce2e:	ea1e 0f00 	tst.w	lr, r0
    beq out_fp_active
    ce32:	d004      	beq.n	ce3e <out_fp_active>
    /* FP context inactive: clear FP state */
    ldr r0, [r2, #_thread_offset_to_mode]
    ce34:	f8d2 00ac 	ldr.w	r0, [r2, #172]	; 0xac
    bic r0, #0x4 /* _current->arch.mode &= ~(CONTROL_FPCA_Msk) */
    ce38:	f020 0004 	bic.w	r0, r0, #4
    b out_fp_endif
    ce3c:	e007      	b.n	ce4e <out_fp_endif>

0000ce3e <out_fp_active>:

out_fp_active:
    /* FP context active: set FP state and store callee-saved registers */
    add r0, r2, #_thread_offset_to_preempt_float
    ce3e:	f102 006c 	add.w	r0, r2, #108	; 0x6c
    vstmia r0, {s16-s31}
    ce42:	ec80 8a10 	vstmia	r0, {s16-s31}
    ldr r0, [r2, #_thread_offset_to_mode]
    ce46:	f8d2 00ac 	ldr.w	r0, [r2, #172]	; 0xac
    orrs r0, r0, #0x4 /* _current->arch.mode |= CONTROL_FPCA_Msk */
    ce4a:	f050 0004 	orrs.w	r0, r0, #4

0000ce4e <out_fp_endif>:

out_fp_endif:
    str r0, [r2, #_thread_offset_to_mode]
    ce4e:	f8c2 00ac 	str.w	r0, [r2, #172]	; 0xac

    /* Protect the kernel state while we play with the thread lists */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    ce52:	2020      	movs	r0, #32
    msr BASEPRI, r0
    ce54:	f380 8811 	msr	BASEPRI, r0
    isb /* Make the effect of disabling interrupts be realized immediately */
    ce58:	f3bf 8f6f 	isb	sy
     * the new thread is context-switched in since all decisions
     * to pend PendSV have been taken with the current kernel
     * state and this is what we're handling currently.
     */
#if defined(CONFIG_CPU_CORTEX_M)
    ldr v4, =_SCS_ICSR
    ce5c:	4f19      	ldr	r7, [pc, #100]	; (cec4 <in_fp_endif+0x30>)
    ldr v3, =_SCS_ICSR_UNPENDSV
    ce5e:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000
#endif

    /* _kernel is still in r1 */

    /* fetch the thread to run from the ready queue cache */
    ldr r2, [r1, #_kernel_offset_to_ready_q_cache]
    ce62:	6a4a      	ldr	r2, [r1, #36]	; 0x24

    str r2, [r1, #_kernel_offset_to_current]
    ce64:	608a      	str	r2, [r1, #8]
     * has been handled.
     */

    /* _SCS_ICSR is still in v4 and _SCS_ICSR_UNPENDSV in v3 */
#if defined(CONFIG_CPU_CORTEX_M)
    str v3, [v4, #0]
    ce66:	603e      	str	r6, [r7, #0]

    ldr r0, [r4]
    movs.n r3, #0
    str r3, [r4]
#else
    ldr r0, [r2, #_thread_offset_to_basepri]
    ce68:	6e50      	ldr	r0, [r2, #100]	; 0x64
    movs r3, #0
    ce6a:	2300      	movs	r3, #0
    str r3, [r2, #_thread_offset_to_basepri]
    ce6c:	6653      	str	r3, [r2, #100]	; 0x64
    /* restore r4-r7, go back 9*4 bytes to the start of the stored block */
    subs r0, #36
    ldmia r0!, {r4-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    /* restore BASEPRI for the incoming thread */
    msr BASEPRI, r0
    ce6e:	f380 8811 	msr	BASEPRI, r0

#ifdef CONFIG_FP_SHARING
    /* Assess whether switched-in thread had been using the FP registers. */
    ldr r0, [r2, #_thread_offset_to_mode]
    ce72:	f8d2 00ac 	ldr.w	r0, [r2, #172]	; 0xac
    tst r0, #0x04 /* thread.arch.mode & CONTROL.FPCA Msk */
    ce76:	f010 0f04 	tst.w	r0, #4
    bne in_fp_active
    ce7a:	d105      	bne.n	ce88 <in_fp_active>
    /* FP context inactive for swapped-in thread:
     * - reset FPSCR to 0
     * - set EXC_RETURN.F_Type (prevents FP frame un-stacking when returning
     *   from pendSV)
     */
    movs.n r3, #0
    ce7c:	2300      	movs	r3, #0
    vmsr fpscr, r3
    ce7e:	eee1 3a10 	vmsr	fpscr, r3
    orrs lr, lr, #0x10 /* EXC_RETURN & EXC_RETURN.F_Type_Msk */
    ce82:	f05e 0e10 	orrs.w	lr, lr, #16
    b in_fp_endif
    ce86:	e005      	b.n	ce94 <in_fp_endif>

0000ce88 <in_fp_active>:
    /* FP context active:
     * - clear EXC_RETURN.F_Type
     * - FPSCR and caller-saved registers will be restored automatically
     * - restore callee-saved FP registers
     */
    bic lr, #0x10 /* EXC_RETURN | (~EXC_RETURN.F_Type_Msk) */
    ce88:	f02e 0e10 	bic.w	lr, lr, #16
    add r0, r2, #_thread_offset_to_preempt_float
    ce8c:	f102 006c 	add.w	r0, r2, #108	; 0x6c
    vldmia r0, {s16-s31}
    ce90:	ec90 8a10 	vldmia	r0, {s16-s31}

0000ce94 <in_fp_endif>:
in_fp_endif:
    /* Clear CONTROL.FPCA that may have been set by FP instructions */
    mrs r3, CONTROL
    ce94:	f3ef 8314 	mrs	r3, CONTROL
    bic r3, #0x4 /* CONTROL.FPCA Msk */
    ce98:	f023 0304 	bic.w	r3, r3, #4
    msr CONTROL, r3
    ce9c:	f383 8814 	msr	CONTROL, r3
    isb
    cea0:	f3bf 8f6f 	isb	sy
#endif

#if defined (CONFIG_ARM_MPU)
    /* Re-program dynamic memory map */
    push {r2,lr}
    cea4:	b504      	push	{r2, lr}
    mov r0, r2 /* _current thread */
    cea6:	4610      	mov	r0, r2
    bl z_arm_configure_dynamic_mpu_regions
    cea8:	f00c fbd6 	bl	19658 <z_arm_configure_dynamic_mpu_regions>
    pop {r2,lr}
    ceac:	e8bd 4004 	ldmia.w	sp!, {r2, lr}
    isb

#endif

    /* load callee-saved + psp from thread */
    add r0, r2, #_thread_offset_to_callee_saved
    ceb0:	f102 0028 	add.w	r0, r2, #40	; 0x28
    ldmia r0, {v1-v8, ip}
    ceb4:	e890 1ff0 	ldmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
    mov r0, #0
    msr PSPLIM, r0
#endif /* CONFIG_BUILTIN_STACK_GUARD */

#if defined(CONFIG_CPU_CORTEX_M)
    msr PSP, ip
    ceb8:	f38c 8809 	msr	PSP, ip

    /*
     * Cortex-M: return from PendSV exception
     * Cortex-R: return to the caller (_IntExit or z_arm_svc)
     */
    bx lr
    cebc:	4770      	bx	lr
    cebe:	0000      	.short	0x0000
    ldr r1, =_kernel
    cec0:	2002496c 	.word	0x2002496c
    ldr v4, =_SCS_ICSR
    cec4:	e000ed04 	.word	0xe000ed04

0000cec8 <z_arm_svc>:
  bne _stack_frame_endif
_stack_frame_msp:
  mrs r0, MSP
_stack_frame_endif:
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    tst lr, #0x4    /* did we come from thread mode ? */
    cec8:	f01e 0f04 	tst.w	lr, #4
    ite eq  /* if zero (equal), came from handler mode */
    cecc:	bf0c      	ite	eq
        mrseq r0, MSP   /* handler mode, stack frame is on MSP */
    cece:	f3ef 8008 	mrseq	r0, MSP
        mrsne r0, PSP   /* thread mode, stack frame is on PSP */
    ced2:	f3ef 8009 	mrsne	r0, PSP
#endif


    /* Figure out what SVC call number was invoked */

    ldr r1, [r0, #24]   /* grab address of PC from stack frame */
    ced6:	6981      	ldr	r1, [r0, #24]
     */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    subs r1, r1, #2
    ldrb r1, [r1]
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    ldrb r1, [r1, #-2]
    ced8:	f811 1c02 	ldrb.w	r1, [r1, #-2]
#endif
    bne _oops

#endif /* CONFIG_USERSPACE */

    cmp r1, #2
    cedc:	2902      	cmp	r1, #2
    beq _oops
    cede:	d0ff      	beq.n	cee0 <_oops>

0000cee0 <_oops>:
    /* exception return is done in z_arm_int_exit() */
    b z_arm_int_exit
#endif

_oops:
    push {r0, lr}
    cee0:	b501      	push	{r0, lr}
    bl z_do_kernel_oops
    cee2:	f00c fbae 	bl	19642 <z_do_kernel_oops>
    /* return from SVC exception is done here */
    pop {r0, pc}
    cee6:	bd01      	pop	{r0, pc}

0000cee8 <z_arm_cpu_idle_init>:
 * void z_arm_cpu_idle_init(void);
 */

SECTION_FUNC(TEXT, z_arm_cpu_idle_init)
#if defined(CONFIG_CPU_CORTEX_M)
	ldr r1, =_SCB_SCR
    cee8:	4901      	ldr	r1, [pc, #4]	; (cef0 <z_arm_cpu_idle_init+0x8>)
	movs.n r2, #_SCR_INIT_BITS
    ceea:	2210      	movs	r2, #16
	str r2, [r1]
    ceec:	600a      	str	r2, [r1, #0]
#endif
	bx lr
    ceee:	4770      	bx	lr
	ldr r1, =_SCB_SCR
    cef0:	e000ed10 	.word	0xe000ed10

0000cef4 <arch_cpu_idle>:
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE) \
	|| defined(CONFIG_ARMV7_R)
	cpsie i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* clear BASEPRI so wfi is awakened by incoming interrupts */
	eors.n r0, r0
    cef4:	4040      	eors	r0, r0
	msr BASEPRI, r0
    cef6:	f380 8811 	msr	BASEPRI, r0
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	wfi
    cefa:	bf30      	wfi

	bx lr
    cefc:	4770      	bx	lr
    cefe:	bf00      	nop

0000cf00 <z_arm_bus_fault>:
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
SECTION_SUBSEC_FUNC(TEXT,__fault,z_arm_reserved)

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE) || \
	defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	mrs r0, MSP
    cf00:	f3ef 8008 	mrs	r0, MSP
	mrs r1, PSP
    cf04:	f3ef 8109 	mrs	r1, PSP
	mov r2, lr /* EXC_RETURN */
    cf08:	4672      	mov	r2, lr

	push {r0, lr}
    cf0a:	b501      	push	{r0, lr}
	mov r0, #0
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE || CONFIG_ARMv7_M_ARMV8_M_MAINLINE */

	bl z_arm_fault
    cf0c:	f000 f9b4 	bl	d278 <z_arm_fault>

#if defined(CONFIG_CPU_CORTEX_M)
	pop {r0, pc}
    cf10:	bd01      	pop	{r0, pc}
    cf12:	bf00      	nop

0000cf14 <z_SysNmiOnReset>:
_ASM_FILE_PROLOGUE

GTEXT(z_SysNmiOnReset)

SECTION_FUNC(TEXT, z_SysNmiOnReset)
    wfi
    cf14:	bf30      	wfi
    b z_SysNmiOnReset
    cf16:	f7ff bffd 	b.w	cf14 <z_SysNmiOnReset>
    cf1a:	bf00      	nop

0000cf1c <_isr_wrapper>:
 * @return N/A
 */
SECTION_FUNC(TEXT, _isr_wrapper)

#if defined(CONFIG_CPU_CORTEX_M)
	push {r0,lr}		/* r0, lr are now the first items on the stack */
    cf1c:	b501      	push	{r0, lr}
      * FIXME: Remove the Cortex-M conditional compilation checks for `cpsid i`
      *        and `cpsie i` after the Cortex-R port is updated to support
      *        interrupt nesting.  For more details, refer to the issue #21758.
      */
#if defined(CONFIG_CPU_CORTEX_M)
	cpsid i  /* PRIMASK = 1 */
    cf1e:	b672      	cpsid	i
#endif

	/* is this a wakeup from idle ? */
	ldr r2, =_kernel
    cf20:	4a0b      	ldr	r2, [pc, #44]	; (cf50 <_isr_wrapper+0x34>)
	/* requested idle duration, in ticks */
	ldr r0, [r2, #_kernel_offset_to_idle]
    cf22:	6a10      	ldr	r0, [r2, #32]
	cmp r0, #0
    cf24:	2800      	cmp	r0, #0
	str r1, [r2, #_kernel_offset_to_idle]
	bl z_sys_power_save_idle_exit
_idle_state_cleared:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	ittt ne
    cf26:	bf1e      	ittt	ne
	movne	r1, #0
    cf28:	2100      	movne	r1, #0
		/* clear kernel idle state */
		strne	r1, [r2, #_kernel_offset_to_idle]
    cf2a:	6211      	strne	r1, [r2, #32]
		blne	z_sys_power_save_idle_exit
    cf2c:	f00d fa4d 	blne	1a3ca <z_sys_power_save_idle_exit>
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
	cpsie i		/* re-enable interrupts (PRIMASK = 0) */
    cf30:	b662      	cpsie	i
#endif

#endif /* CONFIG_SYS_POWER_MANAGEMENT */

#if defined(CONFIG_CPU_CORTEX_M)
	mrs r0, IPSR	/* get exception number */
    cf32:	f3ef 8005 	mrs	r0, IPSR
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r1, =16
	subs r0, r1	/* get IRQ number */
	lsls r0, #3	/* table is 8-byte wide */
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	sub r0, r0, #16	/* get IRQ number */
    cf36:	f1a0 0010 	sub.w	r0, r0, #16
	lsl r0, r0, #3	/* table is 8-byte wide */
    cf3a:	ea4f 00c0 	mov.w	r0, r0, lsl #3
	 */
	mov r0, #0
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
	ldr r1, =_sw_isr_table
    cf3e:	4905      	ldr	r1, [pc, #20]	; (cf54 <_isr_wrapper+0x38>)
	add r1, r1, r0	/* table entry: ISRs must have their MSB set to stay
    cf40:	4401      	add	r1, r0
			 * in thumb mode */

	ldm r1!,{r0,r3}	/* arg in r0, ISR in r3 */
    cf42:	c909      	ldmia	r1!, {r0, r3}
#else
	pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
	ldm sp!,{r0-r3} /* Restore r0 to r3 regs */
#endif /* CONFIG_EXECUTION_BENCHMARKING */
	blx r3		/* call ISR */
    cf44:	4798      	blx	r3

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	pop {r0, r3}
	mov lr, r3
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	pop {r0, lr}
    cf46:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
#endif

	/* Use 'bx' instead of 'b' because 'bx' can jump further, and use
	 * 'bx' instead of 'blx' because exception return is done in
	 * z_arm_int_exit() */
	ldr r1, =z_arm_int_exit
    cf4a:	4903      	ldr	r1, [pc, #12]	; (cf58 <_isr_wrapper+0x3c>)
	bx r1
    cf4c:	4708      	bx	r1
    cf4e:	0000      	.short	0x0000
	ldr r2, =_kernel
    cf50:	2002496c 	.word	0x2002496c
	ldr r1, =_sw_isr_table
    cf54:	0001a52c 	.word	0x0001a52c
	ldr r1, =z_arm_int_exit
    cf58:	0000cdfd 	.word	0x0000cdfd

0000cf5c <arch_swap>:
#ifdef CONFIG_EXECUTION_BENCHMARKING
	read_timer_start_of_swap();
#endif

	/* store off key and return value */
	_current->arch.basepri = key;
    cf5c:	4a09      	ldr	r2, [pc, #36]	; (cf84 <arch_swap+0x28>)
	_current->arch.swap_return_value = _k_neg_eagain;
    cf5e:	490a      	ldr	r1, [pc, #40]	; (cf88 <arch_swap+0x2c>)
	_current->arch.basepri = key;
    cf60:	6893      	ldr	r3, [r2, #8]
	_current->arch.swap_return_value = _k_neg_eagain;
    cf62:	6809      	ldr	r1, [r1, #0]
	_current->arch.basepri = key;
    cf64:	6658      	str	r0, [r3, #100]	; 0x64
	_current->arch.swap_return_value = _k_neg_eagain;
    cf66:	6699      	str	r1, [r3, #104]	; 0x68

#if defined(CONFIG_CPU_CORTEX_M)
	/* set pending bit to make sure we will take a PendSV exception */
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    cf68:	4908      	ldr	r1, [pc, #32]	; (cf8c <arch_swap+0x30>)
    cf6a:	684b      	ldr	r3, [r1, #4]
    cf6c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
    cf70:	604b      	str	r3, [r1, #4]
    cf72:	2300      	movs	r3, #0
    cf74:	f383 8811 	msr	BASEPRI, r3
    cf78:	f3bf 8f6f 	isb	sy
#endif

	/* Context switch is performed here. Returning implies the
	 * thread has been context-switched-in again.
	 */
	return _current->arch.swap_return_value;
    cf7c:	6893      	ldr	r3, [r2, #8]
}
    cf7e:	6e98      	ldr	r0, [r3, #104]	; 0x68
    cf80:	4770      	bx	lr
    cf82:	bf00      	nop
    cf84:	2002496c 	.word	0x2002496c
    cf88:	0001abc4 	.word	0x0001abc4
    cf8c:	e000ed00 	.word	0xe000ed00

0000cf90 <arch_irq_enable>:
#define REG_FROM_IRQ(irq) (irq / NUM_IRQS_PER_REG)
#define BIT_FROM_IRQ(irq) (irq % NUM_IRQS_PER_REG)

void arch_irq_enable(unsigned int irq)
{
	NVIC_EnableIRQ((IRQn_Type)irq);
    cf90:	b243      	sxtb	r3, r0
  if ((int32_t)(IRQn) >= 0)
    cf92:	2b00      	cmp	r3, #0
    cf94:	db08      	blt.n	cfa8 <arch_irq_enable+0x18>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    cf96:	2201      	movs	r2, #1
    cf98:	f000 001f 	and.w	r0, r0, #31
    cf9c:	fa02 f000 	lsl.w	r0, r2, r0
    cfa0:	4a02      	ldr	r2, [pc, #8]	; (cfac <arch_irq_enable+0x1c>)
    cfa2:	095b      	lsrs	r3, r3, #5
    cfa4:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
}
    cfa8:	4770      	bx	lr
    cfaa:	bf00      	nop
    cfac:	e000e100 	.word	0xe000e100

0000cfb0 <z_arm_irq_priority_set>:
 * priority levels which are reserved.
 *
 * @return N/A
 */
void z_arm_irq_priority_set(unsigned int irq, unsigned int prio, u32_t flags)
{
    cfb0:	b570      	push	{r4, r5, r6, lr}
	} else {
		prio += _IRQ_PRIO_OFFSET;
	}
#else
	ARG_UNUSED(flags);
	prio += _IRQ_PRIO_OFFSET;
    cfb2:	1c4c      	adds	r4, r1, #1
	/* The last priority level is also used by PendSV exception, but
	 * allow other interrupts to use the same level, even if it ends up
	 * affecting performance (can still be useful on systems with a
	 * reduced set of priorities, like Cortex-M0/M0+).
	 */
	__ASSERT(prio <= (BIT(DT_NUM_IRQ_PRIO_BITS) - 1),
    cfb4:	2c07      	cmp	r4, #7
{
    cfb6:	4605      	mov	r5, r0
    cfb8:	460e      	mov	r6, r1
	__ASSERT(prio <= (BIT(DT_NUM_IRQ_PRIO_BITS) - 1),
    cfba:	d90e      	bls.n	cfda <z_arm_irq_priority_set+0x2a>
    cfbc:	235f      	movs	r3, #95	; 0x5f
    cfbe:	4a10      	ldr	r2, [pc, #64]	; (d000 <z_arm_irq_priority_set+0x50>)
    cfc0:	4910      	ldr	r1, [pc, #64]	; (d004 <z_arm_irq_priority_set+0x54>)
    cfc2:	4811      	ldr	r0, [pc, #68]	; (d008 <z_arm_irq_priority_set+0x58>)
    cfc4:	f00c faf1 	bl	195aa <printk>
    cfc8:	4631      	mov	r1, r6
    cfca:	4810      	ldr	r0, [pc, #64]	; (d00c <z_arm_irq_priority_set+0x5c>)
    cfcc:	2207      	movs	r2, #7
    cfce:	f00c faec 	bl	195aa <printk>
    cfd2:	215f      	movs	r1, #95	; 0x5f
    cfd4:	480a      	ldr	r0, [pc, #40]	; (d000 <z_arm_irq_priority_set+0x50>)
    cfd6:	f00c faff 	bl	195d8 <assert_post_action>
		 "invalid priority %d! values must be less than %lu\n",
		 prio - _IRQ_PRIO_OFFSET,
		 BIT(DT_NUM_IRQ_PRIO_BITS) - (_IRQ_PRIO_OFFSET));
	NVIC_SetPriority((IRQn_Type)irq, prio);
    cfda:	b26b      	sxtb	r3, r5
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
    cfdc:	2b00      	cmp	r3, #0
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    cfde:	bfa8      	it	ge
    cfe0:	f103 4360 	addge.w	r3, r3, #3758096384	; 0xe0000000
    cfe4:	ea4f 1444 	mov.w	r4, r4, lsl #5
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    cfe8:	bfb8      	it	lt
    cfea:	4b09      	ldrlt	r3, [pc, #36]	; (d010 <z_arm_irq_priority_set+0x60>)
    cfec:	b2e4      	uxtb	r4, r4
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    cfee:	bfab      	itete	ge
    cff0:	f503 4361 	addge.w	r3, r3, #57600	; 0xe100
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    cff4:	f005 050f 	andlt.w	r5, r5, #15
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    cff8:	f883 4300 	strbge.w	r4, [r3, #768]	; 0x300
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    cffc:	555c      	strblt	r4, [r3, r5]
}
    cffe:	bd70      	pop	{r4, r5, r6, pc}
    d000:	0001ae70 	.word	0x0001ae70
    d004:	0001aea6 	.word	0x0001aea6
    d008:	0001ac45 	.word	0x0001ac45
    d00c:	0001aec1 	.word	0x0001aec1
    d010:	e000ed14 	.word	0xe000ed14

0000d014 <_arch_isr_direct_pm>:
	z_arm_reserved();
}

#ifdef CONFIG_SYS_POWER_MANAGEMENT
void _arch_isr_direct_pm(void)
{
    d014:	b508      	push	{r3, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Lock all interrupts. irq_lock() will on this CPU only disable those
	 * lower than BASEPRI, which is not what we want. See comments in
	 * arch/arm/core/aarch32/isr_wrapper.S
	 */
	__asm__ volatile("cpsid i" : : : "memory");
    d016:	b672      	cpsid	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	if (_kernel.idle) {
    d018:	4b04      	ldr	r3, [pc, #16]	; (d02c <_arch_isr_direct_pm+0x18>)
    d01a:	6a18      	ldr	r0, [r3, #32]
    d01c:	b118      	cbz	r0, d026 <_arch_isr_direct_pm+0x12>
		s32_t idle_val = _kernel.idle;

		_kernel.idle = 0;
    d01e:	2200      	movs	r2, #0
    d020:	621a      	str	r2, [r3, #32]
		z_sys_power_save_idle_exit(idle_val);
    d022:	f00d f9d2 	bl	1a3ca <z_sys_power_save_idle_exit>

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE) \
	|| defined(CONFIG_ARMV7_R)
	irq_unlock(key);
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile("cpsie i" : : : "memory");
    d026:	b662      	cpsie	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

}
    d028:	bd08      	pop	{r3, pc}
    d02a:	bf00      	nop
    d02c:	2002496c 	.word	0x2002496c

0000d030 <arch_new_thread>:
 */
void arch_new_thread(struct k_thread *thread, k_thread_stack_t *stack,
		     size_t stackSize, k_thread_entry_t pEntry,
		     void *parameter1, void *parameter2, void *parameter3,
		     int priority, unsigned int options)
{
    d030:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    d034:	9e0d      	ldr	r6, [sp, #52]	; 0x34
    d036:	4605      	mov	r5, r0
	char *pStackMem = Z_THREAD_STACK_BUFFER(stack);
	char *stackEnd;
	/* Offset between the top of stack and the high end of stack area. */
	u32_t top_of_stack_offset = 0U;

	Z_ASSERT_VALID_PRIO(priority, pEntry);
    d038:	2e0f      	cmp	r6, #15
{
    d03a:	4688      	mov	r8, r1
    d03c:	4691      	mov	r9, r2
    d03e:	461f      	mov	r7, r3
	Z_ASSERT_VALID_PRIO(priority, pEntry);
    d040:	d126      	bne.n	d090 <arch_new_thread+0x60>
    d042:	4b1e      	ldr	r3, [pc, #120]	; (d0bc <arch_new_thread+0x8c>)
    d044:	429f      	cmp	r7, r3
    d046:	d127      	bne.n	d098 <arch_new_thread+0x68>
#endif
	stackEnd = pStackMem + stackSize;

	struct __esf *pInitCtx;

	z_new_thread_init(thread, pStackMem, stackSize, priority,
    d048:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    d04a:	464a      	mov	r2, r9
    d04c:	9300      	str	r3, [sp, #0]
    d04e:	4641      	mov	r1, r8
    d050:	4633      	mov	r3, r6
    d052:	4628      	mov	r0, r5
    d054:	f00d fa1f 	bl	1a496 <z_new_thread_init>
	stackEnd = pStackMem + stackSize;
    d058:	eb08 0409 	add.w	r4, r8, r9
	pInitCtx->basic.pc = (u32_t)z_thread_entry;
#endif

#if defined(CONFIG_CPU_CORTEX_M)
	/* force ARM mode by clearing LSB of address */
	pInitCtx->basic.pc &= 0xfffffffe;
    d05c:	4a18      	ldr	r2, [pc, #96]	; (d0c0 <arch_new_thread+0x90>)
	pInitCtx = (struct __esf *)(STACK_ROUND_DOWN(stackEnd -
    d05e:	f1a4 0320 	sub.w	r3, r4, #32
    d062:	f023 0307 	bic.w	r3, r3, #7
	pInitCtx->basic.pc &= 0xfffffffe;
    d066:	f022 0201 	bic.w	r2, r2, #1
    d06a:	619a      	str	r2, [r3, #24]
#endif

	pInitCtx->basic.a1 = (u32_t)pEntry;
	pInitCtx->basic.a2 = (u32_t)parameter1;
    d06c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
	pInitCtx->basic.a1 = (u32_t)pEntry;
    d06e:	601f      	str	r7, [r3, #0]
	pInitCtx->basic.a2 = (u32_t)parameter1;
    d070:	605a      	str	r2, [r3, #4]
	pInitCtx->basic.a3 = (u32_t)parameter2;
    d072:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    d074:	609a      	str	r2, [r3, #8]
	pInitCtx->basic.a4 = (u32_t)parameter3;
    d076:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    d078:	60da      	str	r2, [r3, #12]
	pInitCtx->basic.xpsr =
    d07a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
    d07e:	61da      	str	r2, [r3, #28]
		0x01000000UL; /* clear all, thumb bit is 1, even if RO */

	thread->callee_saved.psp = (u32_t)pInitCtx;
    d080:	64ab      	str	r3, [r5, #72]	; 0x48
#if defined(CONFIG_CPU_CORTEX_R)
	pInitCtx->basic.lr = (u32_t)pInitCtx->basic.pc;
	thread->callee_saved.spsr = A_BIT | T_BIT | MODE_SYS;
	thread->callee_saved.lr = (u32_t)pInitCtx->basic.pc;
#endif
	thread->arch.basepri = 0;
    d082:	2300      	movs	r3, #0
    d084:	666b      	str	r3, [r5, #100]	; 0x64

#if defined(CONFIG_USERSPACE) || defined(CONFIG_FP_SHARING)
	thread->arch.mode = 0;
    d086:	f8c5 30ac 	str.w	r3, [r5, #172]	; 0xac

	/*
	 * initial values in all other registers/thread entries are
	 * irrelevant.
	 */
}
    d08a:	b003      	add	sp, #12
    d08c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	Z_ASSERT_VALID_PRIO(priority, pEntry);
    d090:	f106 0310 	add.w	r3, r6, #16
    d094:	2b1e      	cmp	r3, #30
    d096:	d9d7      	bls.n	d048 <arch_new_thread+0x18>
    d098:	232d      	movs	r3, #45	; 0x2d
    d09a:	4a0a      	ldr	r2, [pc, #40]	; (d0c4 <arch_new_thread+0x94>)
    d09c:	490a      	ldr	r1, [pc, #40]	; (d0c8 <arch_new_thread+0x98>)
    d09e:	480b      	ldr	r0, [pc, #44]	; (d0cc <arch_new_thread+0x9c>)
    d0a0:	f00c fa83 	bl	195aa <printk>
    d0a4:	4631      	mov	r1, r6
    d0a6:	f06f 030f 	mvn.w	r3, #15
    d0aa:	220e      	movs	r2, #14
    d0ac:	4808      	ldr	r0, [pc, #32]	; (d0d0 <arch_new_thread+0xa0>)
    d0ae:	f00c fa7c 	bl	195aa <printk>
    d0b2:	212d      	movs	r1, #45	; 0x2d
    d0b4:	4803      	ldr	r0, [pc, #12]	; (d0c4 <arch_new_thread+0x94>)
    d0b6:	f00c fa8f 	bl	195d8 <assert_post_action>
    d0ba:	e7c5      	b.n	d048 <arch_new_thread+0x18>
    d0bc:	000174d1 	.word	0x000174d1
    d0c0:	000195c5 	.word	0x000195c5
    d0c4:	0001aef6 	.word	0x0001aef6
    d0c8:	0001af28 	.word	0x0001af28
    d0cc:	0001ac45 	.word	0x0001ac45
    d0d0:	0001afb5 	.word	0x0001afb5

0000d0d4 <arch_switch_to_main_thread>:

void arch_switch_to_main_thread(struct k_thread *main_thread,
				k_thread_stack_t *main_stack,
				size_t main_stack_size,
				k_thread_entry_t _main)
{
    d0d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    d0d8:	461f      	mov	r7, r3
    d0da:	4606      	mov	r6, r0
    d0dc:	460c      	mov	r4, r1
    d0de:	4690      	mov	r8, r2
// Re-enable using built-in when GCC has been fixed
// || (__GNUC__ > 7) || (__GNUC__ == 7 && __GNUC_MINOR__ >= 2)
  /* see https://gcc.gnu.org/ml/gcc-patches/2017-04/msg00443.html */
  __builtin_arm_set_fpscr(fpscr);
#else
  __ASM volatile ("VMSR fpscr, %0" : : "r" (fpscr) : "vfpcc", "memory");
    d0e0:	2300      	movs	r3, #0
    d0e2:	eee1 3a10 	vmsr	fpscr, r3
  __ASM volatile ("MRS %0, control" : "=r" (result) );
    d0e6:	f3ef 8514 	mrs	r5, CONTROL
	 * initialized at thread creation for threads that make use of the FP).
	 */
	__set_FPSCR(0);
#if defined(CONFIG_FP_SHARING)
	/* In Sharing mode clearing FPSCR may set the CONTROL.FPCA flag. */
	__set_CONTROL(__get_CONTROL() & (~(CONTROL_FPCA_Msk)));
    d0ea:	f025 0504 	bic.w	r5, r5, #4
  __ASM volatile ("MSR control, %0" : : "r" (control) : "memory");
    d0ee:	f385 8814 	msr	CONTROL, r5
           so that all instructions following the ISB are fetched from cache or memory,
           after the instruction has been completed.
 */
__STATIC_FORCEINLINE void __ISB(void)
{
  __ASM volatile ("isb 0xF":::"memory");
    d0f2:	f3bf 8f6f 	isb	sy
	 * to set up access permissions for fixed memory sections, such
	 * as Application Memory or No-Cacheable SRAM area.
	 *
	 * This function is invoked once, upon system initialization.
	 */
	z_arm_configure_static_mpu_regions();
    d0f6:	f000 f9b5 	bl	d464 <z_arm_configure_static_mpu_regions>
	start_of_main_stack =
		Z_THREAD_STACK_BUFFER(main_stack) + main_stack_size;

	start_of_main_stack = (char *)STACK_ROUND_DOWN(start_of_main_stack);

	_current = main_thread;
    d0fa:	4b0a      	ldr	r3, [pc, #40]	; (d124 <arch_switch_to_main_thread+0x50>)
	start_of_main_stack =
    d0fc:	4444      	add	r4, r8
#ifdef CONFIG_ARM_MPU
	/*
	 * If stack protection is enabled, make sure to set it
	 * before jumping to thread entry function
	 */
	z_arm_configure_dynamic_mpu_regions(main_thread);
    d0fe:	4630      	mov	r0, r6
	_current = main_thread;
    d100:	609e      	str	r6, [r3, #8]
	start_of_main_stack = (char *)STACK_ROUND_DOWN(start_of_main_stack);
    d102:	f024 0407 	bic.w	r4, r4, #7
	z_arm_configure_dynamic_mpu_regions(main_thread);
    d106:	f00c faa7 	bl	19658 <z_arm_configure_dynamic_mpu_regions>

	/*
	 * Set PSP to the highest address of the main stack
	 * before enabling interrupts and jumping to main.
	 */
	__asm__ volatile (
    d10a:	4638      	mov	r0, r7
    d10c:	f384 8809 	msr	PSP, r4
    d110:	2100      	movs	r1, #0
    d112:	b663      	cpsie	if
    d114:	f381 8811 	msr	BASEPRI, r1
    d118:	f3bf 8f6f 	isb	sy
    d11c:	2200      	movs	r2, #0
    d11e:	2300      	movs	r3, #0
    d120:	f00c fa50 	bl	195c4 <z_thread_entry>
	:
	: "r" (_main), "r" (start_of_main_stack)
	: "r0" /* not to be overwritten by msr PSP, %1 */
	);

	CODE_UNREACHABLE;
    d124:	2002496c 	.word	0x2002496c

0000d128 <z_arm_prep_c>:
#else
#define VECTOR_ADDRESS CONFIG_SRAM_BASE_ADDRESS
#endif
static inline void relocate_vector_table(void)
{
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
    d128:	4a11      	ldr	r2, [pc, #68]	; (d170 <z_arm_prep_c+0x48>)
 * This routine prepares for the execution of and runs C code.
 *
 * @return N/A
 */
void z_arm_prep_c(void)
{
    d12a:	b508      	push	{r3, lr}
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
    d12c:	4b11      	ldr	r3, [pc, #68]	; (d174 <z_arm_prep_c+0x4c>)
    d12e:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
    d132:	609a      	str	r2, [r3, #8]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
    d134:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    d138:	f3bf 8f6f 	isb	sy
	SCB->CPACR |= CPACR_CP10_PRIV_ACCESS | CPACR_CP11_PRIV_ACCESS;
    d13c:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
    d140:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
    d144:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	FPU->FPCCR = FPU_FPCCR_ASPEN_Msk | FPU_FPCCR_LSPEN_Msk;
    d148:	f04f 4240 	mov.w	r2, #3221225472	; 0xc0000000
    d14c:	f8c3 2234 	str.w	r2, [r3, #564]	; 0x234
  __ASM volatile ("dsb 0xF":::"memory");
    d150:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    d154:	f3bf 8f6f 	isb	sy
  __ASM volatile ("VMSR fpscr, %0" : : "r" (fpscr) : "vfpcc", "memory");
    d158:	2300      	movs	r3, #0
    d15a:	eee1 3a10 	vmsr	fpscr, r3
	relocate_vector_table();
	enable_floating_point();
	z_bss_zero();
    d15e:	f00a f9d1 	bl	17504 <z_bss_zero>
	z_data_copy();
    d162:	f00a f9d9 	bl	17518 <z_data_copy>
#if defined(CONFIG_ARMV7_R) && defined(CONFIG_INIT_STACKS)
	z_arm_init_stacks();
#endif
	z_arm_int_lib_init();
    d166:	f000 f933 	bl	d3d0 <z_arm_int_lib_init>
	z_cstart();
    d16a:	f00a fa07 	bl	1757c <z_cstart>
    d16e:	bf00      	nop
    d170:	0000c000 	.word	0x0000c000
    d174:	e000ed00 	.word	0xe000ed00

0000d178 <__start>:
 * search for a __start symbol instead, so create that alias here.
 */
SECTION_SUBSEC_FUNC(TEXT,_reset_section,__start)

#if defined(CONFIG_PLATFORM_SPECIFIC_INIT)
    bl z_platform_init
    d178:	f00c fa36 	bl	195e8 <z_platform_init>

    /* lock interrupts: will get unlocked when switch to main task */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    d17c:	2020      	movs	r0, #32
    msr BASEPRI, r0
    d17e:	f380 8811 	msr	BASEPRI, r0

    /*
     * Set PSP and use it to boot without using MSP, so that it
     * gets set to _interrupt_stack during initialization.
     */
    ldr r0, =_interrupt_stack
    d182:	4808      	ldr	r0, [pc, #32]	; (d1a4 <__start+0x2c>)
    ldr r1, =CONFIG_ISR_STACK_SIZE
    d184:	f44f 6100 	mov.w	r1, #2048	; 0x800
    adds r0, r0, r1
    d188:	1840      	adds	r0, r0, r1
    msr PSP, r0
    d18a:	f380 8809 	msr	PSP, r0
    mrs r0, CONTROL
    d18e:	f3ef 8014 	mrs	r0, CONTROL
    movs r1, #2
    d192:	2102      	movs	r1, #2
    orrs r0, r1 /* CONTROL_SPSEL_Msk */
    d194:	4308      	orrs	r0, r1
    msr CONTROL, r0
    d196:	f380 8814 	msr	CONTROL, r0
    /*
     * When changing the stack pointer, software must use an ISB instruction
     * immediately after the MSR instruction. This ensures that instructions
     * after the ISB instruction execute using the new stack pointer.
     */
    isb
    d19a:	f3bf 8f6f 	isb	sy
    /*
     * 'bl' jumps the furthest of the branch instructions that are
     * supported on all platforms. So it is used when jumping to z_arm_prep_c
     * (even though we do not intend to return).
     */
    bl z_arm_prep_c
    d19e:	f7ff ffc3 	bl	d128 <z_arm_prep_c>
    d1a2:	0000      	.short	0x0000
    ldr r0, =_interrupt_stack
    d1a4:	20025858 	.word	0x20025858

0000d1a8 <bus_fault.isra.2>:
{
	u32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** BUS FAULT *****");

	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
    d1a8:	4b0d      	ldr	r3, [pc, #52]	; (d1e0 <bus_fault.isra.2+0x38>)
    d1aa:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Stacking error");
	}
	if (SCB->CFSR & SCB_CFSR_UNSTKERR_Msk) {
    d1ac:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Unstacking error");
	}
	if (SCB->CFSR & SCB_CFSR_PRECISERR_Msk) {
    d1ae:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    d1b0:	0592      	lsls	r2, r2, #22
    d1b2:	d508      	bpl.n	d1c6 <bus_fault.isra.2+0x1e>
		 * The BFAR address is valid only if this bit is 1.
		 *
		 * Software must follow this sequence because another
		 * higher priority exception might change the BFAR value.
		 */
		STORE_xFAR(bfar, SCB->BFAR);
    d1b4:	6b9a      	ldr	r2, [r3, #56]	; 0x38

		if ((SCB->CFSR & SCB_CFSR_BFARVALID_Msk) != 0) {
    d1b6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    d1b8:	0412      	lsls	r2, r2, #16
    d1ba:	d504      	bpl.n	d1c6 <bus_fault.isra.2+0x1e>
			PR_EXC("  BFAR Address: 0x%x", bfar);
			if (from_hard_fault) {
    d1bc:	b118      	cbz	r0, d1c6 <bus_fault.isra.2+0x1e>
				/* clear SCB_CFSR_BFAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_BFARVALID_Msk;
    d1be:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    d1c0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
    d1c4:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* defined(CONFIG_ARM_MPU) && defined(CONFIG_CPU_HAS_NXP_MPU) */

	/* clear BFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;

	*recoverable = memory_fault_recoverable(esf);
    d1c6:	2000      	movs	r0, #0
	if (SCB->CFSR & SCB_CFSR_IMPRECISERR_Msk) {
    d1c8:	4b05      	ldr	r3, [pc, #20]	; (d1e0 <bus_fault.isra.2+0x38>)
    d1ca:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_IBUSERR_Msk) != 0) {
    d1cc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    d1ce:	05d2      	lsls	r2, r2, #23
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
    d1d0:	bf58      	it	pl
    d1d2:	6a9a      	ldrpl	r2, [r3, #40]	; 0x28
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
    d1d4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    d1d6:	f442 427f 	orr.w	r2, r2, #65280	; 0xff00
    d1da:	629a      	str	r2, [r3, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf);
    d1dc:	7008      	strb	r0, [r1, #0]

	return reason;
}
    d1de:	4770      	bx	lr
    d1e0:	e000ed00 	.word	0xe000ed00

0000d1e4 <usage_fault.isra.3>:
	u32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** USAGE FAULT *****");

	/* bits are sticky: they stack and must be reset */
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
    d1e4:	4b07      	ldr	r3, [pc, #28]	; (d204 <usage_fault.isra.3+0x20>)

	/* clear UFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;

	return reason;
}
    d1e6:	2000      	movs	r0, #0
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
    d1e8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_UNALIGNED_Msk) != 0) {
    d1ea:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_STKOF_Msk) != 0) {
    d1ec:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_NOCP_Msk) != 0) {
    d1ee:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_INVPC_Msk) != 0) {
    d1f0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_INVSTATE_Msk) != 0) {
    d1f2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_UNDEFINSTR_Msk) != 0) {
    d1f4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
    d1f6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    d1f8:	ea6f 4202 	mvn.w	r2, r2, lsl #16
    d1fc:	ea6f 4212 	mvn.w	r2, r2, lsr #16
    d200:	629a      	str	r2, [r3, #40]	; 0x28
}
    d202:	4770      	bx	lr
    d204:	e000ed00 	.word	0xe000ed00

0000d208 <mem_manage_fault.isra.6>:
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
    d208:	4b16      	ldr	r3, [pc, #88]	; (d264 <mem_manage_fault.isra.6+0x5c>)
static u32_t mem_manage_fault(z_arch_esf_t *esf, int from_hard_fault,
    d20a:	b510      	push	{r4, lr}
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
    d20c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_MUNSTKERR_Msk) != 0) {
    d20e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
    d210:	6a9a      	ldr	r2, [r3, #40]	; 0x28
static u32_t mem_manage_fault(z_arch_esf_t *esf, int from_hard_fault,
    d212:	460c      	mov	r4, r1
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
    d214:	0791      	lsls	r1, r2, #30
    d216:	d508      	bpl.n	d22a <mem_manage_fault.isra.6+0x22>
		mmfar = SCB->MMFAR;
    d218:	6b5a      	ldr	r2, [r3, #52]	; 0x34
		if ((SCB->CFSR & SCB_CFSR_MMARVALID_Msk) != 0) {
    d21a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    d21c:	0612      	lsls	r2, r2, #24
    d21e:	d504      	bpl.n	d22a <mem_manage_fault.isra.6+0x22>
			if (from_hard_fault) {
    d220:	b118      	cbz	r0, d22a <mem_manage_fault.isra.6+0x22>
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
    d222:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    d224:	f022 0280 	bic.w	r2, r2, #128	; 0x80
    d228:	629a      	str	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_IACCVIOL_Msk) != 0) {
    d22a:	4b0e      	ldr	r3, [pc, #56]	; (d264 <mem_manage_fault.isra.6+0x5c>)
    d22c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
    d22e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if (SCB->CFSR & SCB_CFSR_MSTKERR_Msk) {
    d230:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    d232:	06db      	lsls	r3, r3, #27
    d234:	d50e      	bpl.n	d254 <mem_manage_fault.isra.6+0x4c>
	__ASSERT(0,
    d236:	490c      	ldr	r1, [pc, #48]	; (d268 <mem_manage_fault.isra.6+0x60>)
    d238:	f44f 739b 	mov.w	r3, #310	; 0x136
    d23c:	4a0b      	ldr	r2, [pc, #44]	; (d26c <mem_manage_fault.isra.6+0x64>)
    d23e:	480c      	ldr	r0, [pc, #48]	; (d270 <mem_manage_fault.isra.6+0x68>)
    d240:	f00c f9b3 	bl	195aa <printk>
    d244:	480b      	ldr	r0, [pc, #44]	; (d274 <mem_manage_fault.isra.6+0x6c>)
    d246:	f00c f9b0 	bl	195aa <printk>
    d24a:	f44f 719b 	mov.w	r1, #310	; 0x136
    d24e:	4807      	ldr	r0, [pc, #28]	; (d26c <mem_manage_fault.isra.6+0x64>)
    d250:	f00c f9c2 	bl	195d8 <assert_post_action>
	*recoverable = memory_fault_recoverable(esf);
    d254:	2000      	movs	r0, #0
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
    d256:	4a03      	ldr	r2, [pc, #12]	; (d264 <mem_manage_fault.isra.6+0x5c>)
    d258:	6a93      	ldr	r3, [r2, #40]	; 0x28
    d25a:	f043 03ff 	orr.w	r3, r3, #255	; 0xff
    d25e:	6293      	str	r3, [r2, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf);
    d260:	7020      	strb	r0, [r4, #0]
}
    d262:	bd10      	pop	{r4, pc}
    d264:	e000ed00 	.word	0xe000ed00
    d268:	0001b6d7 	.word	0x0001b6d7
    d26c:	0001afe6 	.word	0x0001afe6
    d270:	0001ac45 	.word	0x0001ac45
    d274:	0001b020 	.word	0x0001b020

0000d278 <z_arm_fault>:
 * @param psp PSP value immediately after the exception occurred
 * @param exc_return EXC_RETURN value present in LR after exception entry.
 *
 */
void z_arm_fault(u32_t msp, u32_t psp, u32_t exc_return)
{
    d278:	b570      	push	{r4, r5, r6, lr}
	u32_t reason = K_ERR_CPU_EXCEPTION;
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    d27a:	4b41      	ldr	r3, [pc, #260]	; (d380 <z_arm_fault+0x108>)
{
    d27c:	b09c      	sub	sp, #112	; 0x70
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    d27e:	685c      	ldr	r4, [r3, #4]
    d280:	2500      	movs	r5, #0
    d282:	f3c4 0408 	ubfx	r4, r4, #0, #9
    d286:	f385 8811 	msr	BASEPRI, r5
    d28a:	f3bf 8f6f 	isb	sy
	if ((exc_return & EXC_RETURN_INDICATOR_PREFIX) !=
    d28e:	f002 437f 	and.w	r3, r2, #4278190080	; 0xff000000
    d292:	f1b3 4f7f 	cmp.w	r3, #4278190080	; 0xff000000
    d296:	d10e      	bne.n	d2b6 <z_arm_fault+0x3e>
	if (exc_return & EXC_RETURN_EXCEPTION_SECURE_Secure) {
    d298:	07d3      	lsls	r3, r2, #31
    d29a:	d40c      	bmi.n	d2b6 <z_arm_fault+0x3e>
	if (exc_return & EXC_RETURN_RETURN_STACK_Secure) {
    d29c:	0656      	lsls	r6, r2, #25
    d29e:	d404      	bmi.n	d2aa <z_arm_fault+0x32>
		if (exc_return & EXC_RETURN_MODE_THREAD) {
    d2a0:	0715      	lsls	r5, r2, #28
    d2a2:	d405      	bmi.n	d2b0 <z_arm_fault+0x38>
			ptr_esf = (z_arch_esf_t *)msp;
    d2a4:	4606      	mov	r6, r0
			*nested_exc = true;
    d2a6:	2501      	movs	r5, #1
    d2a8:	e004      	b.n	d2b4 <z_arm_fault+0x3c>
		if (exc_return & EXC_RETURN_SPSEL_PROCESS) {
    d2aa:	f012 0504 	ands.w	r5, r2, #4
    d2ae:	d01c      	beq.n	d2ea <z_arm_fault+0x72>
			ptr_esf = (z_arch_esf_t *)psp;
    d2b0:	460e      	mov	r6, r1
	*nested_exc = false;
    d2b2:	2500      	movs	r5, #0

	/* Retrieve the Exception Stack Frame (ESF) to be supplied
	 * as argument to the remainder of the fault handling process.
	 */
	 esf = get_esf(msp, psp, exc_return, &nested_exc);
	__ASSERT(esf != NULL,
    d2b4:	b97e      	cbnz	r6, d2d6 <z_arm_fault+0x5e>
    d2b6:	f240 33b1 	movw	r3, #945	; 0x3b1
    d2ba:	4a32      	ldr	r2, [pc, #200]	; (d384 <z_arm_fault+0x10c>)
    d2bc:	4932      	ldr	r1, [pc, #200]	; (d388 <z_arm_fault+0x110>)
    d2be:	4833      	ldr	r0, [pc, #204]	; (d38c <z_arm_fault+0x114>)
    d2c0:	f00c f973 	bl	195aa <printk>
    d2c4:	4832      	ldr	r0, [pc, #200]	; (d390 <z_arm_fault+0x118>)
    d2c6:	f00c f970 	bl	195aa <printk>
    d2ca:	f240 31b1 	movw	r1, #945	; 0x3b1
    d2ce:	482d      	ldr	r0, [pc, #180]	; (d384 <z_arm_fault+0x10c>)
    d2d0:	f00c f982 	bl	195d8 <assert_post_action>
    d2d4:	2600      	movs	r6, #0
	*recoverable = false;
    d2d6:	2300      	movs	r3, #0
    d2d8:	f88d 3007 	strb.w	r3, [sp, #7]
	switch (fault) {
    d2dc:	1ee3      	subs	r3, r4, #3
    d2de:	2b03      	cmp	r3, #3
    d2e0:	d847      	bhi.n	d372 <z_arm_fault+0xfa>
    d2e2:	e8df f003 	tbb	[pc, r3]
    d2e6:	3e04      	.short	0x3e04
    d2e8:	3b42      	.short	0x3b42
			ptr_esf = (z_arch_esf_t *)msp;
    d2ea:	4606      	mov	r6, r0
	if (!alternative_state_exc) {
    d2ec:	e7e2      	b.n	d2b4 <z_arm_fault+0x3c>
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
    d2ee:	4b24      	ldr	r3, [pc, #144]	; (d380 <z_arm_fault+0x108>)
    d2f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    d2f2:	0792      	lsls	r2, r2, #30
    d2f4:	d43d      	bmi.n	d372 <z_arm_fault+0xfa>
	} else if ((SCB->HFSR & SCB_HFSR_FORCED_Msk) != 0) {
    d2f6:	6adc      	ldr	r4, [r3, #44]	; 0x2c
    d2f8:	f014 4480 	ands.w	r4, r4, #1073741824	; 0x40000000
    d2fc:	d008      	beq.n	d310 <z_arm_fault+0x98>
		if (SCB_MMFSR != 0) {
    d2fe:	3328      	adds	r3, #40	; 0x28
    d300:	781b      	ldrb	r3, [r3, #0]
    d302:	b1eb      	cbz	r3, d340 <z_arm_fault+0xc8>
			reason = mem_manage_fault(esf, 1, recoverable);
    d304:	2001      	movs	r0, #1
    d306:	f10d 0107 	add.w	r1, sp, #7
		reason = mem_manage_fault(esf, 0, recoverable);
    d30a:	f7ff ff7d 	bl	d208 <mem_manage_fault.isra.6>
		reason = usage_fault(esf);
    d30e:	4604      	mov	r4, r0
		"ESF could not be retrieved successfully. Shall never occur.");

	reason = fault_handle(esf, fault, &recoverable);
	if (recoverable) {
    d310:	f89d 3007 	ldrb.w	r3, [sp, #7]
    d314:	b993      	cbnz	r3, d33c <z_arm_fault+0xc4>
		return;
	}

	/* Copy ESF */
	memcpy(&esf_copy, esf, sizeof(z_arch_esf_t));
    d316:	2268      	movs	r2, #104	; 0x68
    d318:	4631      	mov	r1, r6
    d31a:	a802      	add	r0, sp, #8
    d31c:	f00c fac8 	bl	198b0 <memcpy>
	/* Overwrite stacked IPSR to mark a nested exception,
	 * or a return to Thread mode. Note that this may be
	 * required, if the retrieved ESF contents are invalid
	 * due to, for instance, a stacking error.
	 */
	if (nested_exc) {
    d320:	9b09      	ldr	r3, [sp, #36]	; 0x24
    d322:	b345      	cbz	r5, d376 <z_arm_fault+0xfe>
		if ((esf_copy.basic.xpsr & IPSR_ISR_Msk) == 0) {
    d324:	f3c3 0208 	ubfx	r2, r3, #0, #9
    d328:	b922      	cbnz	r2, d334 <z_arm_fault+0xbc>
			esf_copy.basic.xpsr |= IPSR_ISR_Msk;
    d32a:	ea6f 2353 	mvn.w	r3, r3, lsr #9
    d32e:	ea6f 2343 	mvn.w	r3, r3, lsl #9
		}
	} else {
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
    d332:	9309      	str	r3, [sp, #36]	; 0x24
	}

	z_arm_fatal_error(reason, &esf_copy);
    d334:	a902      	add	r1, sp, #8
    d336:	4620      	mov	r0, r4
    d338:	f00c f981 	bl	1963e <z_arm_fatal_error>
}
    d33c:	b01c      	add	sp, #112	; 0x70
    d33e:	bd70      	pop	{r4, r5, r6, pc}
		} else if (SCB_BFSR != 0) {
    d340:	4b14      	ldr	r3, [pc, #80]	; (d394 <z_arm_fault+0x11c>)
    d342:	781b      	ldrb	r3, [r3, #0]
    d344:	b12b      	cbz	r3, d352 <z_arm_fault+0xda>
			reason = bus_fault(esf, 1, recoverable);
    d346:	2001      	movs	r0, #1
    d348:	f10d 0107 	add.w	r1, sp, #7
		reason = bus_fault(esf, 0, recoverable);
    d34c:	f7ff ff2c 	bl	d1a8 <bus_fault.isra.2>
    d350:	e7dd      	b.n	d30e <z_arm_fault+0x96>
		} else if (SCB_UFSR != 0) {
    d352:	4b11      	ldr	r3, [pc, #68]	; (d398 <z_arm_fault+0x120>)
    d354:	881c      	ldrh	r4, [r3, #0]
    d356:	b2a4      	uxth	r4, r4
    d358:	2c00      	cmp	r4, #0
    d35a:	d0d9      	beq.n	d310 <z_arm_fault+0x98>
		reason = usage_fault(esf);
    d35c:	f7ff ff42 	bl	d1e4 <usage_fault.isra.3>
    d360:	e7d5      	b.n	d30e <z_arm_fault+0x96>
		reason = mem_manage_fault(esf, 0, recoverable);
    d362:	f10d 0107 	add.w	r1, sp, #7
    d366:	2000      	movs	r0, #0
    d368:	e7cf      	b.n	d30a <z_arm_fault+0x92>
		reason = bus_fault(esf, 0, recoverable);
    d36a:	f10d 0107 	add.w	r1, sp, #7
    d36e:	2000      	movs	r0, #0
    d370:	e7ec      	b.n	d34c <z_arm_fault+0xd4>
	u32_t reason = K_ERR_CPU_EXCEPTION;
    d372:	2400      	movs	r4, #0
    d374:	e7cc      	b.n	d310 <z_arm_fault+0x98>
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
    d376:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
    d37a:	f023 0301 	bic.w	r3, r3, #1
    d37e:	e7d8      	b.n	d332 <z_arm_fault+0xba>
    d380:	e000ed00 	.word	0xe000ed00
    d384:	0001afe6 	.word	0x0001afe6
    d388:	0001b05a 	.word	0x0001b05a
    d38c:	0001ac45 	.word	0x0001ac45
    d390:	0001b06d 	.word	0x0001b06d
    d394:	e000ed29 	.word	0xe000ed29
    d398:	e000ed2a 	.word	0xe000ed2a

0000d39c <z_arm_fault_init>:
 */
void z_arm_fault_init(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
    d39c:	4a02      	ldr	r2, [pc, #8]	; (d3a8 <z_arm_fault_init+0xc>)
    d39e:	6953      	ldr	r3, [r2, #20]
    d3a0:	f043 0310 	orr.w	r3, r3, #16
    d3a4:	6153      	str	r3, [r2, #20]
	 * Stack to attempt to descend into secure region, in which case a
	 * Secure Hard Fault will occur and we can track the fault from there.
	 */
	SCB->CCR |= SCB_CCR_STKOFHFNMIGN_Msk;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
}
    d3a6:	4770      	bx	lr
    d3a8:	e000ed00 	.word	0xe000ed00

0000d3ac <sys_arch_reboot>:
  __ASM volatile ("dsb 0xF":::"memory");
    d3ac:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
    d3b0:	4905      	ldr	r1, [pc, #20]	; (d3c8 <sys_arch_reboot+0x1c>)
    d3b2:	4b06      	ldr	r3, [pc, #24]	; (d3cc <sys_arch_reboot+0x20>)
    d3b4:	68ca      	ldr	r2, [r1, #12]
    d3b6:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
    d3ba:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
    d3bc:	60cb      	str	r3, [r1, #12]
    d3be:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
    d3c2:	bf00      	nop
    d3c4:	e7fd      	b.n	d3c2 <sys_arch_reboot+0x16>
    d3c6:	bf00      	nop
    d3c8:	e000ed00 	.word	0xe000ed00
    d3cc:	05fa0004 	.word	0x05fa0004

0000d3d0 <z_arm_int_lib_init>:
 * @return N/A
 */

void z_arm_int_lib_init(void)
{
	int irq = 0;
    d3d0:	2300      	movs	r3, #0
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    d3d2:	2120      	movs	r1, #32
    d3d4:	4803      	ldr	r0, [pc, #12]	; (d3e4 <z_arm_int_lib_init+0x14>)
    d3d6:	18c2      	adds	r2, r0, r3

	for (; irq < CONFIG_NUM_IRQS; irq++) {
    d3d8:	3301      	adds	r3, #1
    d3da:	2b41      	cmp	r3, #65	; 0x41
    d3dc:	f882 1300 	strb.w	r1, [r2, #768]	; 0x300
    d3e0:	d1f9      	bne.n	d3d6 <z_arm_int_lib_init+0x6>
		NVIC_SetPriority((IRQn_Type)irq, _IRQ_PRIO_OFFSET);
	}
}
    d3e2:	4770      	bx	lr
    d3e4:	e000e100 	.word	0xe000e100

0000d3e8 <z_impl_k_thread_abort>:
#include <sys/__assert.h>

extern void z_thread_single_abort(struct k_thread *thread);

void z_impl_k_thread_abort(k_tid_t thread)
{
    d3e8:	b538      	push	{r3, r4, r5, lr}
    d3ea:	4604      	mov	r4, r0
	__asm__ volatile(
    d3ec:	f04f 0320 	mov.w	r3, #32
    d3f0:	f3ef 8511 	mrs	r5, BASEPRI
    d3f4:	f383 8811 	msr	BASEPRI, r3
    d3f8:	f3bf 8f6f 	isb	sy
	unsigned int key;

	key = irq_lock();

	__ASSERT(!(thread->base.user_options & K_ESSENTIAL),
    d3fc:	7b03      	ldrb	r3, [r0, #12]
    d3fe:	07db      	lsls	r3, r3, #31
    d400:	d50c      	bpl.n	d41c <z_impl_k_thread_abort+0x34>
    d402:	4912      	ldr	r1, [pc, #72]	; (d44c <z_impl_k_thread_abort+0x64>)
    d404:	2324      	movs	r3, #36	; 0x24
    d406:	4a12      	ldr	r2, [pc, #72]	; (d450 <z_impl_k_thread_abort+0x68>)
    d408:	4812      	ldr	r0, [pc, #72]	; (d454 <z_impl_k_thread_abort+0x6c>)
    d40a:	f00c f8ce 	bl	195aa <printk>
    d40e:	4812      	ldr	r0, [pc, #72]	; (d458 <z_impl_k_thread_abort+0x70>)
    d410:	f00c f8cb 	bl	195aa <printk>
    d414:	2124      	movs	r1, #36	; 0x24
    d416:	480e      	ldr	r0, [pc, #56]	; (d450 <z_impl_k_thread_abort+0x68>)
    d418:	f00c f8de 	bl	195d8 <assert_post_action>
		 "essential thread aborted");

	z_thread_single_abort(thread);
    d41c:	4620      	mov	r0, r4
    d41e:	f00a fe4f 	bl	180c0 <z_thread_single_abort>
	z_thread_monitor_exit(thread);

	if (_current == thread) {
    d422:	4b0e      	ldr	r3, [pc, #56]	; (d45c <z_impl_k_thread_abort+0x74>)
    d424:	689b      	ldr	r3, [r3, #8]
    d426:	42a3      	cmp	r3, r4
    d428:	d10b      	bne.n	d442 <z_impl_k_thread_abort+0x5a>
		if ((SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk) == 0) {
    d42a:	4b0d      	ldr	r3, [pc, #52]	; (d460 <z_impl_k_thread_abort+0x78>)
    d42c:	685a      	ldr	r2, [r3, #4]
    d42e:	f3c2 0208 	ubfx	r2, r2, #0, #9
    d432:	b912      	cbnz	r2, d43a <z_impl_k_thread_abort+0x52>
	int ret;
	z_check_stack_sentinel();
#ifndef CONFIG_ARM
	sys_trace_thread_switched_out();
#endif
	ret = arch_swap(key);
    d434:	4628      	mov	r0, r5
    d436:	f7ff fd91 	bl	cf5c <arch_swap>
			(void)z_swap_irqlock(key);
			CODE_UNREACHABLE;
		} else {
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    d43a:	685a      	ldr	r2, [r3, #4]
    d43c:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
    d440:	605a      	str	r2, [r3, #4]
		}
	}

	/* The abort handler might have altered the ready queue. */
	z_reschedule_irqlock(key);
    d442:	4628      	mov	r0, r5
}
    d444:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule_irqlock(key);
    d448:	f00c bfe3 	b.w	1a412 <z_reschedule_irqlock>
    d44c:	0001b0ec 	.word	0x0001b0ec
    d450:	0001b0ab 	.word	0x0001b0ab
    d454:	0001ac45 	.word	0x0001ac45
    d458:	0001b11a 	.word	0x0001b11a
    d45c:	2002496c 	.word	0x2002496c
    d460:	e000ed00 	.word	0xe000ed00

0000d464 <z_arm_configure_static_mpu_regions>:
 *
 * For some MPU architectures, such as the unmodified ARMv8-M MPU,
 * the function must execute with MPU enabled.
 */
void z_arm_configure_static_mpu_regions(void)
{
    d464:	b510      	push	{r4, lr}
		.size = (u32_t)&_nocache_ram_size,
		.attr = K_MEM_PARTITION_P_RW_U_NA_NOCACHE,
		};
#endif /* CONFIG_NOCACHE_MEMORY */
#if defined(CONFIG_ARCH_HAS_RAMFUNC_SUPPORT)
		const struct k_mem_partition ramfunc_region =
    d466:	4b0e      	ldr	r3, [pc, #56]	; (d4a0 <z_arm_configure_static_mpu_regions+0x3c>)
{
    d468:	b088      	sub	sp, #32
		const struct k_mem_partition ramfunc_region =
    d46a:	9302      	str	r3, [sp, #8]
    d46c:	4b0d      	ldr	r3, [pc, #52]	; (d4a4 <z_arm_configure_static_mpu_regions+0x40>)
	/* Configure the static MPU regions within firmware SRAM boundaries.
	 * Start address of the image is given by _image_ram_start. The end
	 * of the firmware SRAM area is marked by __kernel_ram_end, taking
	 * into account the unused SRAM area, as well.
	 */
	arm_core_mpu_configure_static_mpu_regions(static_regions,
    d46e:	4c0e      	ldr	r4, [pc, #56]	; (d4a8 <z_arm_configure_static_mpu_regions+0x44>)
		const struct k_mem_partition ramfunc_region =
    d470:	9303      	str	r3, [sp, #12]
    d472:	4b0e      	ldr	r3, [pc, #56]	; (d4ac <z_arm_configure_static_mpu_regions+0x48>)
	arm_core_mpu_configure_static_mpu_regions(static_regions,
    d474:	4a0e      	ldr	r2, [pc, #56]	; (d4b0 <z_arm_configure_static_mpu_regions+0x4c>)
		const struct k_mem_partition ramfunc_region =
    d476:	9304      	str	r3, [sp, #16]
	const struct k_mem_partition *static_regions[] = {
    d478:	ab02      	add	r3, sp, #8
    d47a:	9301      	str	r3, [sp, #4]
	arm_core_mpu_configure_static_mpu_regions(static_regions,
    d47c:	a801      	add	r0, sp, #4
    d47e:	4623      	mov	r3, r4
    d480:	2101      	movs	r1, #1
    d482:	f000 f935 	bl	d6f0 <arm_core_mpu_configure_static_mpu_regions>
	/* Define a constant array of k_mem_partition objects that holds the
	 * boundaries of the areas, inside which dynamic region programming
	 * is allowed. The information is passed to the underlying driver at
	 * initialization.
	 */
	const struct k_mem_partition dyn_region_areas[] = {
    d486:	2300      	movs	r3, #0
    d488:	9307      	str	r3, [sp, #28]
		{
		.start = _MPU_DYNAMIC_REGIONS_AREA_START,
    d48a:	4b0a      	ldr	r3, [pc, #40]	; (d4b4 <z_arm_configure_static_mpu_regions+0x50>)
		.size =  _MPU_DYNAMIC_REGIONS_AREA_SIZE,
		}
	};

	arm_core_mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
    d48c:	2101      	movs	r1, #1
		.size =  _MPU_DYNAMIC_REGIONS_AREA_SIZE,
    d48e:	1ae4      	subs	r4, r4, r3
	arm_core_mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
    d490:	a805      	add	r0, sp, #20
	const struct k_mem_partition dyn_region_areas[] = {
    d492:	9305      	str	r3, [sp, #20]
    d494:	9406      	str	r4, [sp, #24]
	arm_core_mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
    d496:	f000 f94f 	bl	d738 <arm_core_mpu_mark_areas_for_dynamic_regions>
		ARRAY_SIZE(dyn_region_areas));
#endif /* CONFIG_MPU_REQUIRES_NON_OVERLAPPING_REGIONS */
}
    d49a:	b008      	add	sp, #32
    d49c:	bd10      	pop	{r4, pc}
    d49e:	bf00      	nop
    d4a0:	20020000 	.word	0x20020000
    d4a4:	00000000 	.word	0x00000000
    d4a8:	20040000 	.word	0x20040000
    d4ac:	00010006 	.word	0x00010006
    d4b0:	20020000 	.word	0x20020000
    d4b4:	20020000 	.word	0x20020000

0000d4b8 <region_init>:
 * Note:
 *   The caller must provide a valid region index.
 */
static void region_init(const u32_t index,
	const struct arm_mpu_region *region_conf)
{
    d4b8:	b510      	push	{r4, lr}
	ARM_MPU_SetRegion(
		/* RNR */
		index,
		/* RBAR */
		(region_conf->base & MPU_RBAR_BASE_Msk)
    d4ba:	680b      	ldr	r3, [r1, #0]
		| (region_conf->attr.rbar &
    d4bc:	7a0c      	ldrb	r4, [r1, #8]
		(region_conf->base & MPU_RBAR_BASE_Msk)
    d4be:	f023 021f 	bic.w	r2, r3, #31
		| (region_conf->attr.rbar &
    d4c2:	f004 031f 	and.w	r3, r4, #31
    d4c6:	431a      	orrs	r2, r3
			(MPU_RBAR_XN_Msk | MPU_RBAR_AP_Msk | MPU_RBAR_SH_Msk)),
		/* RLAR */
		(region_conf->attr.r_limit & MPU_RLAR_LIMIT_Msk)
    d4c8:	68cb      	ldr	r3, [r1, #12]
		| ((region_conf->attr.mair_idx << MPU_RLAR_AttrIndx_Pos)
    d4ca:	0964      	lsrs	r4, r4, #5
		(region_conf->attr.r_limit & MPU_RLAR_LIMIT_Msk)
    d4cc:	f023 031f 	bic.w	r3, r3, #31
* \param rbar Value for RBAR register.
* \param rlar Value for RLAR register.
*/   
__STATIC_INLINE void ARM_MPU_SetRegionEx(MPU_Type* mpu, uint32_t rnr, uint32_t rbar, uint32_t rlar)
{
  mpu->RNR = rnr;
    d4d0:	4904      	ldr	r1, [pc, #16]	; (d4e4 <region_init+0x2c>)
		| ((region_conf->attr.mair_idx << MPU_RLAR_AttrIndx_Pos)
    d4d2:	ea43 0344 	orr.w	r3, r3, r4, lsl #1
			& MPU_RLAR_AttrIndx_Msk)
		| MPU_RLAR_EN_Msk
    d4d6:	f043 0301 	orr.w	r3, r3, #1
    d4da:	6088      	str	r0, [r1, #8]
  mpu->RBAR = rbar;
    d4dc:	60ca      	str	r2, [r1, #12]
  mpu->RLAR = rlar;
    d4de:	610b      	str	r3, [r1, #16]
	);

	LOG_DBG("[%d] 0x%08x 0x%08x 0x%08x 0x%08x",
			index, region_conf->base, region_conf->attr.rbar,
			region_conf->attr.mair_idx, region_conf->attr.r_limit);
}
    d4e0:	bd10      	pop	{r4, pc}
    d4e2:	bf00      	nop
    d4e4:	e000ed90 	.word	0xe000ed90

0000d4e8 <mpu_configure_regions_and_partition.constprop.2>:
 * sanity check of the memory regions to be programmed.
 *
 * The function performs a full partition of the background memory
 * area, effectively, leaving no space in this area uncovered by MPU.
 */
static int mpu_configure_regions_and_partition(const struct k_mem_partition
    d4e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    d4ec:	4680      	mov	r8, r0
    d4ee:	4689      	mov	r9, r1
    d4f0:	4614      	mov	r4, r2
	bool do_sanity_check)
{
	int i;
	int reg_index = start_reg_index;

	for (i = 0; i < regions_num; i++) {
    d4f2:	2700      	movs	r7, #0
	MPU->RNR = index;
    d4f4:	4d48      	ldr	r5, [pc, #288]	; (d618 <mpu_configure_regions_and_partition.constprop.2+0x130>)
static int mpu_configure_regions_and_partition(const struct k_mem_partition
    d4f6:	b085      	sub	sp, #20
	for (i = 0; i < regions_num; i++) {
    d4f8:	454f      	cmp	r7, r9
    d4fa:	da07      	bge.n	d50c <mpu_configure_regions_and_partition.constprop.2+0x24>
		if (regions[i]->size == 0U) {
    d4fc:	f858 3027 	ldr.w	r3, [r8, r7, lsl #2]
    d500:	685e      	ldr	r6, [r3, #4]
    d502:	b3c6      	cbz	r6, d576 <mpu_configure_regions_and_partition.constprop.2+0x8e>
		&&
    d504:	2e1f      	cmp	r6, #31
    d506:	d805      	bhi.n	d514 <mpu_configure_regions_and_partition.constprop.2+0x2c>

			reg_index =
				mpu_configure_region(reg_index, regions[i]);

			if (reg_index == -EINVAL) {
				return reg_index;
    d508:	f06f 0415 	mvn.w	r4, #21
			reg_index++;
		}
	}

	return reg_index;
}
    d50c:	4620      	mov	r0, r4
    d50e:	b005      	add	sp, #20
    d510:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		&&
    d514:	06f2      	lsls	r2, r6, #27
    d516:	d1f7      	bne.n	d508 <mpu_configure_regions_and_partition.constprop.2+0x20>
		((part->start &
    d518:	f8d3 a000 	ldr.w	sl, [r3]
		&&
    d51c:	f01a 0f1f 	tst.w	sl, #31
    d520:	d1f2      	bne.n	d508 <mpu_configure_regions_and_partition.constprop.2+0x20>
	u32_t region_start_addr = arm_cmse_mpu_region_get(start);
    d522:	4650      	mov	r0, sl
    d524:	f00c f8c2 	bl	196ac <arm_cmse_mpu_region_get>
    d528:	4683      	mov	fp, r0
	u32_t region_end_addr = arm_cmse_mpu_region_get(start + size - 1);
    d52a:	eb06 000a 	add.w	r0, r6, sl
    d52e:	3801      	subs	r0, #1
    d530:	f00c f8bc 	bl	196ac <arm_cmse_mpu_region_get>
	if (region_start_addr == region_end_addr) {
    d534:	4583      	cmp	fp, r0
    d536:	d1e7      	bne.n	d508 <mpu_configure_regions_and_partition.constprop.2+0x20>
		if ((u_reg_index == -EINVAL) ||
    d538:	f11b 0f16 	cmn.w	fp, #22
    d53c:	d0e4      	beq.n	d508 <mpu_configure_regions_and_partition.constprop.2+0x20>
			(u_reg_index > (reg_index - 1))) {
    d53e:	1e63      	subs	r3, r4, #1
		if ((u_reg_index == -EINVAL) ||
    d540:	455b      	cmp	r3, fp
    d542:	dbe1      	blt.n	d508 <mpu_configure_regions_and_partition.constprop.2+0x20>
	MPU->RNR = index;
    d544:	f8c5 b008 	str.w	fp, [r5, #8]
	return MPU->RBAR & MPU_RBAR_BASE_Msk;
    d548:	68e8      	ldr	r0, [r5, #12]
		u32_t reg_last = regions[i]->start + regions[i]->size - 1;
    d54a:	f858 1027 	ldr.w	r1, [r8, r7, lsl #2]
	MPU->RNR = index;
    d54e:	f8c5 b008 	str.w	fp, [r5, #8]
	return (MPU->RLAR & MPU_RLAR_LIMIT_Msk) | (~MPU_RLAR_LIMIT_Msk);
    d552:	692e      	ldr	r6, [r5, #16]
	return MPU->RBAR & MPU_RBAR_BASE_Msk;
    d554:	f020 001f 	bic.w	r0, r0, #31
		u32_t reg_last = regions[i]->start + regions[i]->size - 1;
    d558:	e9d1 3200 	ldrd	r3, r2, [r1]
    d55c:	441a      	add	r2, r3
		if ((regions[i]->start == u_reg_base) &&
    d55e:	4298      	cmp	r0, r3
	return (MPU->RLAR & MPU_RLAR_LIMIT_Msk) | (~MPU_RLAR_LIMIT_Msk);
    d560:	f046 061f 	orr.w	r6, r6, #31
		u32_t reg_last = regions[i]->start + regions[i]->size - 1;
    d564:	f102 3aff 	add.w	sl, r2, #4294967295
		if ((regions[i]->start == u_reg_base) &&
    d568:	d118      	bne.n	d59c <mpu_configure_regions_and_partition.constprop.2+0xb4>
    d56a:	4556      	cmp	r6, sl
    d56c:	d105      	bne.n	d57a <mpu_configure_regions_and_partition.constprop.2+0x92>
			mpu_configure_region(u_reg_index, regions[i]);
    d56e:	fa5f f08b 	uxtb.w	r0, fp
    d572:	f00c f879 	bl	19668 <mpu_configure_region>
	for (i = 0; i < regions_num; i++) {
    d576:	3701      	adds	r7, #1
    d578:	e7be      	b.n	d4f8 <mpu_configure_regions_and_partition.constprop.2+0x10>
	MPU->RNR = index;
    d57a:	f8c5 b008 	str.w	fp, [r5, #8]
	MPU->RBAR = (MPU->RBAR & (~MPU_RBAR_BASE_Msk))
    d57e:	68eb      	ldr	r3, [r5, #12]
		| (base & MPU_RBAR_BASE_Msk);
    d580:	f022 021f 	bic.w	r2, r2, #31
	MPU->RBAR = (MPU->RBAR & (~MPU_RBAR_BASE_Msk))
    d584:	f003 031f 	and.w	r3, r3, #31
		| (base & MPU_RBAR_BASE_Msk);
    d588:	431a      	orrs	r2, r3
	MPU->RBAR = (MPU->RBAR & (~MPU_RBAR_BASE_Msk))
    d58a:	60ea      	str	r2, [r5, #12]
				mpu_configure_region(reg_index, regions[i]);
    d58c:	b2e0      	uxtb	r0, r4
				mpu_configure_region(reg_index, regions[i]);
    d58e:	f00c f86b 	bl	19668 <mpu_configure_region>
			if (reg_index == -EINVAL) {
    d592:	f110 0f16 	cmn.w	r0, #22
    d596:	d0b7      	beq.n	d508 <mpu_configure_regions_and_partition.constprop.2+0x20>
			reg_index++;
    d598:	1c44      	adds	r4, r0, #1
    d59a:	e7ec      	b.n	d576 <mpu_configure_regions_and_partition.constprop.2+0x8e>
	MPU->RNR = index;
    d59c:	f8c5 b008 	str.w	fp, [r5, #8]
	MPU->RLAR = (MPU->RLAR & (~MPU_RLAR_LIMIT_Msk))
    d5a0:	692a      	ldr	r2, [r5, #16]
    d5a2:	3b01      	subs	r3, #1
    d5a4:	f023 031f 	bic.w	r3, r3, #31
    d5a8:	f002 021f 	and.w	r2, r2, #31
		| (limit & MPU_RLAR_LIMIT_Msk);
    d5ac:	4313      	orrs	r3, r2
		} else if (reg_last == u_reg_last) {
    d5ae:	4556      	cmp	r6, sl
    d5b0:	b2e0      	uxtb	r0, r4
	MPU->RLAR = (MPU->RLAR & (~MPU_RLAR_LIMIT_Msk))
    d5b2:	612b      	str	r3, [r5, #16]
		} else if (reg_last == u_reg_last) {
    d5b4:	d0eb      	beq.n	d58e <mpu_configure_regions_and_partition.constprop.2+0xa6>
				mpu_configure_region(reg_index, regions[i]);
    d5b6:	f00c f857 	bl	19668 <mpu_configure_region>
			if (reg_index == -EINVAL) {
    d5ba:	f110 0f16 	cmn.w	r0, #22
    d5be:	d0a3      	beq.n	d508 <mpu_configure_regions_and_partition.constprop.2+0x20>
	MPU->RNR = index;
    d5c0:	f8c5 b008 	str.w	fp, [r5, #8]
	attr->rbar = MPU->RBAR &
    d5c4:	68ea      	ldr	r2, [r5, #12]
    d5c6:	f89d 3008 	ldrb.w	r3, [sp, #8]
			REGION_LIMIT_ADDR((regions[i]->start +
    d5ca:	3e01      	subs	r6, #1
	attr->rbar = MPU->RBAR &
    d5cc:	f362 0304 	bfi	r3, r2, #0, #5
    d5d0:	f88d 3008 	strb.w	r3, [sp, #8]
	attr->mair_idx = (MPU->RLAR & MPU_RLAR_AttrIndx_Msk) >>
    d5d4:	692b      	ldr	r3, [r5, #16]
    d5d6:	f89d 2008 	ldrb.w	r2, [sp, #8]
    d5da:	085b      	lsrs	r3, r3, #1
    d5dc:	f363 1247 	bfi	r2, r3, #5, #3
    d5e0:	f88d 2008 	strb.w	r2, [sp, #8]
			fill_region.base = regions[i]->start +
    d5e4:	f858 2027 	ldr.w	r2, [r8, r7, lsl #2]
			reg_index++;
    d5e8:	3001      	adds	r0, #1
			fill_region.base = regions[i]->start +
    d5ea:	e9d2 3200 	ldrd	r3, r2, [r2]
    d5ee:	4413      	add	r3, r2
    d5f0:	9300      	str	r3, [sp, #0]
			REGION_LIMIT_ADDR((regions[i]->start +
    d5f2:	f023 031f 	bic.w	r3, r3, #31
    d5f6:	441e      	add	r6, r3
    d5f8:	eba6 060a 	sub.w	r6, r6, sl
    d5fc:	b2c4      	uxtb	r4, r0
    d5fe:	f026 061f 	bic.w	r6, r6, #31

static int region_allocate_and_init(const u8_t index,
	const struct arm_mpu_region *region_conf)
{
	/* Attempt to allocate new region index. */
	if (index > (get_num_regions() - 1)) {
    d602:	2c0f      	cmp	r4, #15
			fill_region.attr.r_limit =
    d604:	9603      	str	r6, [sp, #12]
    d606:	f63f af7f 	bhi.w	d508 <mpu_configure_regions_and_partition.constprop.2+0x20>
	}

	LOG_DBG("Program MPU region at index 0x%x", index);

	/* Program region */
	region_init(index, region_conf);
    d60a:	4620      	mov	r0, r4
    d60c:	4669      	mov	r1, sp
    d60e:	f7ff ff53 	bl	d4b8 <region_init>
			reg_index++;
    d612:	3401      	adds	r4, #1
    d614:	e7af      	b.n	d576 <mpu_configure_regions_and_partition.constprop.2+0x8e>
    d616:	bf00      	nop
    d618:	e000ed90 	.word	0xe000ed90

0000d61c <arm_core_mpu_enable>:
void arm_core_mpu_enable(void)
{
	/* Enable MPU and use the default memory map as a
	 * background region for privileged software access.
	 */
	MPU->CTRL = MPU_CTRL_ENABLE_Msk | MPU_CTRL_PRIVDEFENA_Msk;
    d61c:	2205      	movs	r2, #5
    d61e:	4b03      	ldr	r3, [pc, #12]	; (d62c <arm_core_mpu_enable+0x10>)
    d620:	605a      	str	r2, [r3, #4]
    d622:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    d626:	f3bf 8f6f 	isb	sy

	/* Make sure that all the registers are set before proceeding */
	__DSB();
	__ISB();
}
    d62a:	4770      	bx	lr
    d62c:	e000ed90 	.word	0xe000ed90

0000d630 <arm_core_mpu_disable>:
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
    d630:	f3bf 8f5f 	dmb	sy
{
	/* Force any outstanding transfers to complete before disabling MPU */
	__DMB();

	/* Disable MPU */
	MPU->CTRL = 0;
    d634:	2200      	movs	r2, #0
    d636:	4b01      	ldr	r3, [pc, #4]	; (d63c <arm_core_mpu_disable+0xc>)
    d638:	605a      	str	r2, [r3, #4]
}
    d63a:	4770      	bx	lr
    d63c:	e000ed90 	.word	0xe000ed90

0000d640 <arm_mpu_init>:
 *
 * This function provides the default configuration mechanism for the Memory
 * Protection Unit (MPU).
 */
static int arm_mpu_init(struct device *arg)
{
    d640:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	u32_t r_index;

	if (mpu_config.num_regions > get_num_regions()) {
    d642:	4f21      	ldr	r7, [pc, #132]	; (d6c8 <arm_mpu_init+0x88>)
    d644:	683e      	ldr	r6, [r7, #0]
    d646:	2e10      	cmp	r6, #16
    d648:	d913      	bls.n	d672 <arm_mpu_init+0x32>
		 * what is supported by hardware. As this operation
		 * is executed during system (pre-kernel) initialization,
		 * we want to ensure we can detect an attempt to
		 * perform invalid configuration.
		 */
		__ASSERT(0,
    d64a:	f240 132d 	movw	r3, #301	; 0x12d
    d64e:	4a1f      	ldr	r2, [pc, #124]	; (d6cc <arm_mpu_init+0x8c>)
    d650:	491f      	ldr	r1, [pc, #124]	; (d6d0 <arm_mpu_init+0x90>)
    d652:	4820      	ldr	r0, [pc, #128]	; (d6d4 <arm_mpu_init+0x94>)
    d654:	f00b ffa9 	bl	195aa <printk>
    d658:	2210      	movs	r2, #16
    d65a:	4631      	mov	r1, r6
    d65c:	481e      	ldr	r0, [pc, #120]	; (d6d8 <arm_mpu_init+0x98>)
    d65e:	f00b ffa4 	bl	195aa <printk>
    d662:	481a      	ldr	r0, [pc, #104]	; (d6cc <arm_mpu_init+0x8c>)
    d664:	f240 112d 	movw	r1, #301	; 0x12d
    d668:	f00b ffb6 	bl	195d8 <assert_post_action>
			"Request to configure: %u regions (supported: %u)\n",
			mpu_config.num_regions,
			get_num_regions()
		);
		return -1;
    d66c:	f04f 30ff 	mov.w	r0, #4294967295
		(MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos ==
		DT_NUM_MPU_REGIONS,
		"Invalid number of MPU regions\n");
#endif /* CORTEX_M0PLUS || CPU_CORTEX_M3 || CPU_CORTEX_M4 */
	return 0;
}
    d670:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    d672:	2400      	movs	r4, #0
	arm_core_mpu_disable();
    d674:	f7ff ffdc 	bl	d630 <arm_core_mpu_disable>
	MPU->MAIR0 =
    d678:	4d18      	ldr	r5, [pc, #96]	; (d6dc <arm_mpu_init+0x9c>)
    d67a:	4a19      	ldr	r2, [pc, #100]	; (d6e0 <arm_mpu_init+0xa0>)
    d67c:	632a      	str	r2, [r5, #48]	; 0x30
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    d67e:	42a6      	cmp	r6, r4
    d680:	d119      	bne.n	d6b6 <arm_mpu_init+0x76>
	static_regions_num = mpu_config.num_regions;
    d682:	4b18      	ldr	r3, [pc, #96]	; (d6e4 <arm_mpu_init+0xa4>)
    d684:	701e      	strb	r6, [r3, #0]
	arm_core_mpu_enable();
    d686:	f7ff ffc9 	bl	d61c <arm_core_mpu_enable>
	__ASSERT(
    d68a:	682b      	ldr	r3, [r5, #0]
    d68c:	f3c3 2307 	ubfx	r3, r3, #8, #8
    d690:	2b10      	cmp	r3, #16
    d692:	d00e      	beq.n	d6b2 <arm_mpu_init+0x72>
    d694:	4914      	ldr	r1, [pc, #80]	; (d6e8 <arm_mpu_init+0xa8>)
    d696:	f44f 73a7 	mov.w	r3, #334	; 0x14e
    d69a:	4a0c      	ldr	r2, [pc, #48]	; (d6cc <arm_mpu_init+0x8c>)
    d69c:	480d      	ldr	r0, [pc, #52]	; (d6d4 <arm_mpu_init+0x94>)
    d69e:	f00b ff84 	bl	195aa <printk>
    d6a2:	4812      	ldr	r0, [pc, #72]	; (d6ec <arm_mpu_init+0xac>)
    d6a4:	f00b ff81 	bl	195aa <printk>
    d6a8:	f44f 71a7 	mov.w	r1, #334	; 0x14e
    d6ac:	4807      	ldr	r0, [pc, #28]	; (d6cc <arm_mpu_init+0x8c>)
    d6ae:	f00b ff93 	bl	195d8 <assert_post_action>
	return 0;
    d6b2:	2000      	movs	r0, #0
    d6b4:	e7dc      	b.n	d670 <arm_mpu_init+0x30>
		region_init(r_index, &mpu_config.mpu_regions[r_index]);
    d6b6:	6879      	ldr	r1, [r7, #4]
    d6b8:	4620      	mov	r0, r4
    d6ba:	eb01 1104 	add.w	r1, r1, r4, lsl #4
    d6be:	f7ff fefb 	bl	d4b8 <region_init>
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    d6c2:	3401      	adds	r4, #1
    d6c4:	e7db      	b.n	d67e <arm_mpu_init+0x3e>
    d6c6:	bf00      	nop
    d6c8:	0001a7fc 	.word	0x0001a7fc
    d6cc:	0001b1bd 	.word	0x0001b1bd
    d6d0:	0001b6d7 	.word	0x0001b6d7
    d6d4:	0001ac45 	.word	0x0001ac45
    d6d8:	0001b1fd 	.word	0x0001b1fd
    d6dc:	e000ed90 	.word	0xe000ed90
    d6e0:	0044ffaa 	.word	0x0044ffaa
    d6e4:	200249ca 	.word	0x200249ca
    d6e8:	0001b231 	.word	0x0001b231
    d6ec:	0001b282 	.word	0x0001b282

0000d6f0 <arm_core_mpu_configure_static_mpu_regions>:
{
    d6f0:	b538      	push	{r3, r4, r5, lr}
static int mpu_configure_static_mpu_regions(const struct k_mem_partition
	*static_regions[], const u8_t regions_num,
	const u32_t background_area_base,
	const u32_t background_area_end)
{
	int mpu_reg_index = static_regions_num;
    d6f2:	4c0c      	ldr	r4, [pc, #48]	; (d724 <arm_core_mpu_configure_static_mpu_regions+0x34>)
    d6f4:	460d      	mov	r5, r1
	 * given boundaries.
	 */
	ARG_UNUSED(background_area_base);
	ARG_UNUSED(background_area_end);

	mpu_reg_index = mpu_configure_regions_and_partition(static_regions,
    d6f6:	7822      	ldrb	r2, [r4, #0]
    d6f8:	f7ff fef6 	bl	d4e8 <mpu_configure_regions_and_partition.constprop.2>
		regions_num, mpu_reg_index, true);

	static_regions_num = mpu_reg_index;
    d6fc:	7020      	strb	r0, [r4, #0]
	if (mpu_configure_static_mpu_regions(static_regions, regions_num,
    d6fe:	3016      	adds	r0, #22
    d700:	d10f      	bne.n	d722 <arm_core_mpu_configure_static_mpu_regions+0x32>
		__ASSERT(0, "Configuring %u static MPU regions failed\n",
    d702:	23f3      	movs	r3, #243	; 0xf3
    d704:	4a08      	ldr	r2, [pc, #32]	; (d728 <arm_core_mpu_configure_static_mpu_regions+0x38>)
    d706:	4909      	ldr	r1, [pc, #36]	; (d72c <arm_core_mpu_configure_static_mpu_regions+0x3c>)
    d708:	4809      	ldr	r0, [pc, #36]	; (d730 <arm_core_mpu_configure_static_mpu_regions+0x40>)
    d70a:	f00b ff4e 	bl	195aa <printk>
    d70e:	4629      	mov	r1, r5
    d710:	4808      	ldr	r0, [pc, #32]	; (d734 <arm_core_mpu_configure_static_mpu_regions+0x44>)
    d712:	f00b ff4a 	bl	195aa <printk>
}
    d716:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		__ASSERT(0, "Configuring %u static MPU regions failed\n",
    d71a:	21f3      	movs	r1, #243	; 0xf3
    d71c:	4802      	ldr	r0, [pc, #8]	; (d728 <arm_core_mpu_configure_static_mpu_regions+0x38>)
    d71e:	f00b bf5b 	b.w	195d8 <assert_post_action>
}
    d722:	bd38      	pop	{r3, r4, r5, pc}
    d724:	200249ca 	.word	0x200249ca
    d728:	0001b1bd 	.word	0x0001b1bd
    d72c:	0001b6d7 	.word	0x0001b6d7
    d730:	0001ac45 	.word	0x0001ac45
    d734:	0001b162 	.word	0x0001b162

0000d738 <arm_core_mpu_mark_areas_for_dynamic_regions>:
{
    d738:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    d73c:	4c2e      	ldr	r4, [pc, #184]	; (d7f8 <arm_core_mpu_mark_areas_for_dynamic_regions+0xc0>)
    d73e:	4689      	mov	r9, r1
{
	/* In ARMv8-M architecture we need to store the index values
	 * and the default configuration of the MPU regions, inside
	 * which dynamic memory regions may be programmed at run-time.
	 */
	for (int i = 0; i < dyn_region_areas_num; i++) {
    d740:	4680      	mov	r8, r0
    d742:	2700      	movs	r7, #0
    d744:	46a2      	mov	sl, r4
	attr->rbar = MPU->RBAR &
    d746:	f04f 0b14 	mov.w	fp, #20
	MPU->RNR = index;
    d74a:	4d2c      	ldr	r5, [pc, #176]	; (d7fc <arm_core_mpu_mark_areas_for_dynamic_regions+0xc4>)
	for (int i = 0; i < dyn_region_areas_num; i++) {
    d74c:	454f      	cmp	r7, r9
    d74e:	db02      	blt.n	d756 <arm_core_mpu_mark_areas_for_dynamic_regions+0x1e>
}
    d750:	b003      	add	sp, #12
    d752:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (dyn_region_areas[i].size == 0U) {
    d756:	f8d8 3004 	ldr.w	r3, [r8, #4]
    d75a:	9301      	str	r3, [sp, #4]
    d75c:	2b00      	cmp	r3, #0
    d75e:	d046      	beq.n	d7ee <arm_core_mpu_mark_areas_for_dynamic_regions+0xb6>
		}
		/* Non-empty area */

		/* Retrieve HW MPU region index */
		dyn_reg_info[i].index =
			get_region_index(dyn_region_areas[i].start,
    d760:	f8d8 1000 	ldr.w	r1, [r8]
	u32_t region_start_addr = arm_cmse_mpu_region_get(start);
    d764:	4608      	mov	r0, r1
    d766:	9100      	str	r1, [sp, #0]
    d768:	f00b ffa0 	bl	196ac <arm_cmse_mpu_region_get>
	u32_t region_end_addr = arm_cmse_mpu_region_get(start + size - 1);
    d76c:	e9dd 1300 	ldrd	r1, r3, [sp]
	u32_t region_start_addr = arm_cmse_mpu_region_get(start);
    d770:	4606      	mov	r6, r0
	u32_t region_end_addr = arm_cmse_mpu_region_get(start + size - 1);
    d772:	1858      	adds	r0, r3, r1
    d774:	3801      	subs	r0, #1
    d776:	f00b ff99 	bl	196ac <arm_cmse_mpu_region_get>
	if (region_start_addr == region_end_addr) {
    d77a:	4286      	cmp	r6, r0
    d77c:	4a20      	ldr	r2, [pc, #128]	; (d800 <arm_core_mpu_mark_areas_for_dynamic_regions+0xc8>)
    d77e:	d018      	beq.n	d7b2 <arm_core_mpu_mark_areas_for_dynamic_regions+0x7a>
		dyn_reg_info[i].index =
    d780:	2314      	movs	r3, #20
    d782:	435f      	muls	r7, r3
    d784:	f06f 0315 	mvn.w	r3, #21
    d788:	f84a 3007 	str.w	r3, [sl, r7]
		__ASSERT(0, "Marking %u areas for dynamic regions failed\n",
    d78c:	f240 1303 	movw	r3, #259	; 0x103
    d790:	4a1c      	ldr	r2, [pc, #112]	; (d804 <arm_core_mpu_mark_areas_for_dynamic_regions+0xcc>)
    d792:	491d      	ldr	r1, [pc, #116]	; (d808 <arm_core_mpu_mark_areas_for_dynamic_regions+0xd0>)
    d794:	481d      	ldr	r0, [pc, #116]	; (d80c <arm_core_mpu_mark_areas_for_dynamic_regions+0xd4>)
    d796:	f00b ff08 	bl	195aa <printk>
    d79a:	4649      	mov	r1, r9
    d79c:	481c      	ldr	r0, [pc, #112]	; (d810 <arm_core_mpu_mark_areas_for_dynamic_regions+0xd8>)
    d79e:	f00b ff04 	bl	195aa <printk>
    d7a2:	f240 1103 	movw	r1, #259	; 0x103
    d7a6:	4817      	ldr	r0, [pc, #92]	; (d804 <arm_core_mpu_mark_areas_for_dynamic_regions+0xcc>)
}
    d7a8:	b003      	add	sp, #12
    d7aa:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		__ASSERT(0, "Marking %u areas for dynamic regions failed\n",
    d7ae:	f00b bf13 	b.w	195d8 <assert_post_action>
					dyn_region_areas[i].size);

		if (dyn_reg_info[i].index == -EINVAL) {
    d7b2:	f116 0f16 	cmn.w	r6, #22
		dyn_reg_info[i].index =
    d7b6:	6026      	str	r6, [r4, #0]
		if (dyn_reg_info[i].index == -EINVAL) {
    d7b8:	d0e8      	beq.n	d78c <arm_core_mpu_mark_areas_for_dynamic_regions+0x54>

			return -EINVAL;
		}

		if (dyn_reg_info[i].index >= static_regions_num) {
    d7ba:	7813      	ldrb	r3, [r2, #0]
    d7bc:	42b3      	cmp	r3, r6
    d7be:	dde5      	ble.n	d78c <arm_core_mpu_mark_areas_for_dynamic_regions+0x54>
	attr->rbar = MPU->RBAR &
    d7c0:	fb0b a307 	mla	r3, fp, r7, sl
	MPU->RNR = index;
    d7c4:	60ae      	str	r6, [r5, #8]
	MPU->RNR = index;
    d7c6:	60ae      	str	r6, [r5, #8]
	attr->rbar = MPU->RBAR &
    d7c8:	68e8      	ldr	r0, [r5, #12]
    d7ca:	7b19      	ldrb	r1, [r3, #12]
    d7cc:	f360 0104 	bfi	r1, r0, #0, #5
    d7d0:	7319      	strb	r1, [r3, #12]
	attr->mair_idx = (MPU->RLAR & MPU_RLAR_AttrIndx_Msk) >>
    d7d2:	6929      	ldr	r1, [r5, #16]
    d7d4:	7b18      	ldrb	r0, [r3, #12]
    d7d6:	0849      	lsrs	r1, r1, #1
    d7d8:	f361 1047 	bfi	r0, r1, #5, #3
    d7dc:	7318      	strb	r0, [r3, #12]
	region_conf->base = (MPU->RBAR & MPU_RBAR_BASE_Msk);
    d7de:	68eb      	ldr	r3, [r5, #12]
    d7e0:	f023 031f 	bic.w	r3, r3, #31
    d7e4:	6063      	str	r3, [r4, #4]
	region_conf->attr.r_limit = MPU->RLAR & MPU_RLAR_LIMIT_Msk;
    d7e6:	692b      	ldr	r3, [r5, #16]
    d7e8:	f023 031f 	bic.w	r3, r3, #31
    d7ec:	6123      	str	r3, [r4, #16]
	for (int i = 0; i < dyn_region_areas_num; i++) {
    d7ee:	3701      	adds	r7, #1
    d7f0:	3414      	adds	r4, #20
    d7f2:	f108 080c 	add.w	r8, r8, #12
    d7f6:	e7a9      	b.n	d74c <arm_core_mpu_mark_areas_for_dynamic_regions+0x14>
    d7f8:	2002002c 	.word	0x2002002c
    d7fc:	e000ed90 	.word	0xe000ed90
    d800:	200249ca 	.word	0x200249ca
    d804:	0001b1bd 	.word	0x0001b1bd
    d808:	0001b6d7 	.word	0x0001b6d7
    d80c:	0001ac45 	.word	0x0001ac45
    d810:	0001b18e 	.word	0x0001b18e

0000d814 <arm_core_mpu_configure_dynamic_mpu_regions>:
{
    d814:	b570      	push	{r4, r5, r6, lr}
 * performed, the error signal is propagated to the caller of the function.
 */
static int mpu_configure_dynamic_mpu_regions(const struct k_mem_partition
	*dynamic_regions[], u8_t regions_num)
{
	int mpu_reg_index = static_regions_num;
    d816:	4b16      	ldr	r3, [pc, #88]	; (d870 <arm_core_mpu_configure_dynamic_mpu_regions+0x5c>)
    d818:	460c      	mov	r4, r1
    d81a:	781d      	ldrb	r5, [r3, #0]
    d81c:	4606      	mov	r6, r0
    d81e:	462b      	mov	r3, r5
  mpu->RLAR = 0U;
    d820:	2100      	movs	r1, #0
  mpu->RNR = rnr;
    d822:	4a14      	ldr	r2, [pc, #80]	; (d874 <arm_core_mpu_configure_dynamic_mpu_regions+0x60>)

	/* Disable all MPU regions except for the static ones. */
	for (int i = mpu_reg_index; i < get_num_regions(); i++) {
    d824:	2b0f      	cmp	r3, #15
    d826:	dd1d      	ble.n	d864 <arm_core_mpu_configure_dynamic_mpu_regions+0x50>
#if defined(CONFIG_MPU_GAP_FILLING)
	/* Reset MPU regions inside which dynamic memory regions may
	 * be programmed.
	 */
	for (int i = 0; i < MPU_DYNAMIC_REGION_AREAS_NUM; i++) {
		region_init(dyn_reg_info[i].index,
    d828:	4913      	ldr	r1, [pc, #76]	; (d878 <arm_core_mpu_configure_dynamic_mpu_regions+0x64>)
    d82a:	f851 0b04 	ldr.w	r0, [r1], #4
    d82e:	f7ff fe43 	bl	d4b8 <region_init>

	/* In ARMv8-M architecture the dynamic regions are programmed on SRAM,
	 * forming a full partition of the background area, specified by the
	 * given boundaries.
	 */
	mpu_reg_index = mpu_configure_regions_and_partition(dynamic_regions,
    d832:	462a      	mov	r2, r5
    d834:	4621      	mov	r1, r4
    d836:	4630      	mov	r0, r6
    d838:	f7ff fe56 	bl	d4e8 <mpu_configure_regions_and_partition.constprop.2>
	if (mpu_configure_dynamic_mpu_regions(dynamic_regions, regions_num)
    d83c:	3016      	adds	r0, #22
    d83e:	d115      	bne.n	d86c <arm_core_mpu_configure_dynamic_mpu_regions+0x58>
		__ASSERT(0, "Configuring %u dynamic MPU regions failed\n",
    d840:	f44f 7389 	mov.w	r3, #274	; 0x112
    d844:	4a0d      	ldr	r2, [pc, #52]	; (d87c <arm_core_mpu_configure_dynamic_mpu_regions+0x68>)
    d846:	490e      	ldr	r1, [pc, #56]	; (d880 <arm_core_mpu_configure_dynamic_mpu_regions+0x6c>)
    d848:	480e      	ldr	r0, [pc, #56]	; (d884 <arm_core_mpu_configure_dynamic_mpu_regions+0x70>)
    d84a:	f00b feae 	bl	195aa <printk>
    d84e:	4621      	mov	r1, r4
    d850:	480d      	ldr	r0, [pc, #52]	; (d888 <arm_core_mpu_configure_dynamic_mpu_regions+0x74>)
    d852:	f00b feaa 	bl	195aa <printk>
}
    d856:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		__ASSERT(0, "Configuring %u dynamic MPU regions failed\n",
    d85a:	f44f 7189 	mov.w	r1, #274	; 0x112
    d85e:	4807      	ldr	r0, [pc, #28]	; (d87c <arm_core_mpu_configure_dynamic_mpu_regions+0x68>)
    d860:	f00b beba 	b.w	195d8 <assert_post_action>
    d864:	6093      	str	r3, [r2, #8]
  mpu->RLAR = 0U;
    d866:	6111      	str	r1, [r2, #16]
	for (int i = mpu_reg_index; i < get_num_regions(); i++) {
    d868:	3301      	adds	r3, #1
    d86a:	e7db      	b.n	d824 <arm_core_mpu_configure_dynamic_mpu_regions+0x10>
}
    d86c:	bd70      	pop	{r4, r5, r6, pc}
    d86e:	bf00      	nop
    d870:	200249ca 	.word	0x200249ca
    d874:	e000ed90 	.word	0xe000ed90
    d878:	2002002c 	.word	0x2002002c
    d87c:	0001b1bd 	.word	0x0001b1bd
    d880:	0001b6d7 	.word	0x0001b6d7
    d884:	0001ac45 	.word	0x0001ac45
    d888:	0001b135 	.word	0x0001b135

0000d88c <z_prf>:
	*sptr = p;
	return i;
}

int z_prf(int (*func)(), void *dest, const char *format, va_list vargs)
{
    d88c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    d890:	461e      	mov	r6, r3
	struct zero_padding zero;
	VALTYPE val;

#define PUTC(c)	do { if ((*func)(c, dest) == EOF) return EOF; } while (false)

	count = 0;
    d892:	2300      	movs	r3, #0
{
    d894:	b0a3      	sub	sp, #140	; 0x8c
    d896:	e9cd 0102 	strd	r0, r1, [sp, #8]
	count = 0;
    d89a:	9301      	str	r3, [sp, #4]

	while ((c = *format++)) {
    d89c:	4613      	mov	r3, r2
    d89e:	f813 0b01 	ldrb.w	r0, [r3], #1
    d8a2:	9308      	str	r3, [sp, #32]
    d8a4:	b158      	cbz	r0, d8be <z_prf+0x32>
		if (c != '%') {
    d8a6:	2825      	cmp	r0, #37	; 0x25
    d8a8:	f000 8085 	beq.w	d9b6 <z_prf+0x12a>
			PUTC(c);
    d8ac:	9903      	ldr	r1, [sp, #12]
    d8ae:	9b02      	ldr	r3, [sp, #8]
    d8b0:	4798      	blx	r3
    d8b2:	3001      	adds	r0, #1
    d8b4:	f040 8417 	bne.w	e0e6 <z_prf+0x85a>
    d8b8:	f04f 33ff 	mov.w	r3, #4294967295
    d8bc:	9301      	str	r3, [sp, #4]
		}
	}
	return count;

#undef PUTC
}
    d8be:	9801      	ldr	r0, [sp, #4]
    d8c0:	b023      	add	sp, #140	; 0x8c
    d8c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				switch (c) {
    d8c6:	2c23      	cmp	r4, #35	; 0x23
    d8c8:	d06c      	beq.n	d9a4 <z_prf+0x118>
    d8ca:	d861      	bhi.n	d990 <z_prf+0x104>
    d8cc:	2c00      	cmp	r4, #0
    d8ce:	d0f6      	beq.n	d8be <z_prf+0x32>
					fspace = true;
    d8d0:	2c20      	cmp	r4, #32
    d8d2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    d8d4:	bf08      	it	eq
    d8d6:	2301      	moveq	r3, #1
    d8d8:	930e      	str	r3, [sp, #56]	; 0x38
					fminus = true;
    d8da:	f8cd 8020 	str.w	r8, [sp, #32]
			while (strchr("-+ #0", (c = *format++)) != NULL) {
    d8de:	f8dd 8020 	ldr.w	r8, [sp, #32]
    d8e2:	48b7      	ldr	r0, [pc, #732]	; (dbc0 <z_prf+0x334>)
    d8e4:	f818 4b01 	ldrb.w	r4, [r8], #1
    d8e8:	4621      	mov	r1, r4
    d8ea:	f00b ffa1 	bl	19830 <strchr>
    d8ee:	2800      	cmp	r0, #0
    d8f0:	d1e9      	bne.n	d8c6 <z_prf+0x3a>
			if (c == '*') {
    d8f2:	2c2a      	cmp	r4, #42	; 0x2a
    d8f4:	d166      	bne.n	d9c4 <z_prf+0x138>
				width = va_arg(vargs, int);
    d8f6:	f856 3b04 	ldr.w	r3, [r6], #4
				c = *format++;
    d8fa:	f898 4000 	ldrb.w	r4, [r8]
				if (width < 0) {
    d8fe:	2b00      	cmp	r3, #0
				width = va_arg(vargs, int);
    d900:	9309      	str	r3, [sp, #36]	; 0x24
					width = -width;
    d902:	bfbf      	itttt	lt
    d904:	425b      	neglt	r3, r3
    d906:	9309      	strlt	r3, [sp, #36]	; 0x24
					fminus = true;
    d908:	2301      	movlt	r3, #1
    d90a:	930f      	strlt	r3, [sp, #60]	; 0x3c
				c = *format++;
    d90c:	9b08      	ldr	r3, [sp, #32]
    d90e:	f103 0802 	add.w	r8, r3, #2
			if (c == '.') {
    d912:	2c2e      	cmp	r4, #46	; 0x2e
    d914:	d17b      	bne.n	da0e <z_prf+0x182>
				if (c == '*') {
    d916:	f898 3000 	ldrb.w	r3, [r8]
    d91a:	2b2a      	cmp	r3, #42	; 0x2a
    d91c:	d174      	bne.n	da08 <z_prf+0x17c>
					precision = va_arg(vargs, int);
    d91e:	f856 5b04 	ldr.w	r5, [r6], #4
				c = *format++;
    d922:	f108 0801 	add.w	r8, r8, #1
				c = *format++;
    d926:	f818 4b01 	ldrb.w	r4, [r8], #1
			if (strchr("hlz", c) != NULL) {
    d92a:	4621      	mov	r1, r4
    d92c:	48a5      	ldr	r0, [pc, #660]	; (dbc4 <z_prf+0x338>)
    d92e:	4627      	mov	r7, r4
    d930:	f00b ff7e 	bl	19830 <strchr>
    d934:	2800      	cmp	r0, #0
    d936:	d06d      	beq.n	da14 <z_prf+0x188>
				c = *format++;
    d938:	4643      	mov	r3, r8
    d93a:	f813 4b01 	ldrb.w	r4, [r3], #1
				} else if (i == 'h' && c == 'h') {
    d93e:	2f68      	cmp	r7, #104	; 0x68
				c = *format++;
    d940:	9308      	str	r3, [sp, #32]
				} else if (i == 'h' && c == 'h') {
    d942:	d107      	bne.n	d954 <z_prf+0xc8>
    d944:	2c68      	cmp	r4, #104	; 0x68
    d946:	d105      	bne.n	d954 <z_prf+0xc8>
					i = 'H';
    d948:	2748      	movs	r7, #72	; 0x48
					c = *format++;
    d94a:	f108 0302 	add.w	r3, r8, #2
    d94e:	f898 4001 	ldrb.w	r4, [r8, #1]
    d952:	9308      	str	r3, [sp, #32]
			switch (c) {
    d954:	2c67      	cmp	r4, #103	; 0x67
    d956:	d87b      	bhi.n	da50 <z_prf+0x1c4>
    d958:	2c65      	cmp	r4, #101	; 0x65
    d95a:	f080 8135 	bcs.w	dbc8 <z_prf+0x33c>
    d95e:	2c47      	cmp	r4, #71	; 0x47
    d960:	d85c      	bhi.n	da1c <z_prf+0x190>
    d962:	2c45      	cmp	r4, #69	; 0x45
    d964:	f080 8130 	bcs.w	dbc8 <z_prf+0x33c>
    d968:	2c00      	cmp	r4, #0
    d96a:	d0a8      	beq.n	d8be <z_prf+0x32>
    d96c:	2c25      	cmp	r4, #37	; 0x25
    d96e:	f000 83b6 	beq.w	e0de <z_prf+0x852>
				PUTC('%');
    d972:	9903      	ldr	r1, [sp, #12]
    d974:	2025      	movs	r0, #37	; 0x25
    d976:	9b02      	ldr	r3, [sp, #8]
    d978:	4798      	blx	r3
    d97a:	3001      	adds	r0, #1
    d97c:	d09c      	beq.n	d8b8 <z_prf+0x2c>
				PUTC(c);
    d97e:	9903      	ldr	r1, [sp, #12]
    d980:	4620      	mov	r0, r4
    d982:	9b02      	ldr	r3, [sp, #8]
    d984:	4798      	blx	r3
    d986:	3001      	adds	r0, #1
    d988:	d096      	beq.n	d8b8 <z_prf+0x2c>
				count += 2;
    d98a:	9b01      	ldr	r3, [sp, #4]
    d98c:	3302      	adds	r3, #2
    d98e:	e3ac      	b.n	e0ea <z_prf+0x85e>
				switch (c) {
    d990:	2c2d      	cmp	r4, #45	; 0x2d
    d992:	d00a      	beq.n	d9aa <z_prf+0x11e>
    d994:	2c30      	cmp	r4, #48	; 0x30
    d996:	d00b      	beq.n	d9b0 <z_prf+0x124>
					fplus = true;
    d998:	2c2b      	cmp	r4, #43	; 0x2b
    d99a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    d99c:	bf08      	it	eq
    d99e:	2301      	moveq	r3, #1
    d9a0:	930b      	str	r3, [sp, #44]	; 0x2c
    d9a2:	e79a      	b.n	d8da <z_prf+0x4e>
					falt = true;
    d9a4:	f04f 0b01 	mov.w	fp, #1
    d9a8:	e797      	b.n	d8da <z_prf+0x4e>
					fminus = true;
    d9aa:	2301      	movs	r3, #1
    d9ac:	930f      	str	r3, [sp, #60]	; 0x3c
    d9ae:	e794      	b.n	d8da <z_prf+0x4e>
					fzero = true;
    d9b0:	2301      	movs	r3, #1
    d9b2:	930a      	str	r3, [sp, #40]	; 0x28
    d9b4:	e791      	b.n	d8da <z_prf+0x4e>
			fminus = fplus = fspace = falt = fzero = false;
    d9b6:	2300      	movs	r3, #0
    d9b8:	930a      	str	r3, [sp, #40]	; 0x28
    d9ba:	930e      	str	r3, [sp, #56]	; 0x38
    d9bc:	930b      	str	r3, [sp, #44]	; 0x2c
    d9be:	930f      	str	r3, [sp, #60]	; 0x3c
    d9c0:	469b      	mov	fp, r3
    d9c2:	e78c      	b.n	d8de <z_prf+0x52>
			(((unsigned)c) <= (unsigned)'~'));
}

static inline int isdigit(int a)
{
	return (int)(((unsigned)(a)-(unsigned)'0') < 10U);
    d9c4:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
			} else if (!isdigit(c)) {
    d9c8:	2b09      	cmp	r3, #9
				width = 0;
    d9ca:	9009      	str	r0, [sp, #36]	; 0x24
			} else if (!isdigit(c)) {
    d9cc:	d8a1      	bhi.n	d912 <z_prf+0x86>
		i = 10 * i + *p++ - '0';
    d9ce:	220a      	movs	r2, #10
	while (isdigit(*p)) {
    d9d0:	f8dd 8020 	ldr.w	r8, [sp, #32]
    d9d4:	f818 4b01 	ldrb.w	r4, [r8], #1
    d9d8:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
    d9dc:	2b09      	cmp	r3, #9
    d9de:	d898      	bhi.n	d912 <z_prf+0x86>
		i = 10 * i + *p++ - '0';
    d9e0:	9b09      	ldr	r3, [sp, #36]	; 0x24
    d9e2:	fb02 4403 	mla	r4, r2, r3, r4
    d9e6:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
    d9ea:	e9cd 8308 	strd	r8, r3, [sp, #32]
    d9ee:	e7ef      	b.n	d9d0 <z_prf+0x144>
    d9f0:	4690      	mov	r8, r2
    d9f2:	fb01 3505 	mla	r5, r1, r5, r3
    d9f6:	3d30      	subs	r5, #48	; 0x30
	while (isdigit(*p)) {
    d9f8:	4642      	mov	r2, r8
    d9fa:	f812 3b01 	ldrb.w	r3, [r2], #1
    d9fe:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
    da02:	2809      	cmp	r0, #9
    da04:	d9f4      	bls.n	d9f0 <z_prf+0x164>
    da06:	e78e      	b.n	d926 <z_prf+0x9a>
	int i = 0;
    da08:	2500      	movs	r5, #0
		i = 10 * i + *p++ - '0';
    da0a:	210a      	movs	r1, #10
    da0c:	e7f4      	b.n	d9f8 <z_prf+0x16c>
			precision = -1;
    da0e:	f04f 35ff 	mov.w	r5, #4294967295
    da12:	e78a      	b.n	d92a <z_prf+0x9e>
    da14:	f8cd 8020 	str.w	r8, [sp, #32]
			i = 0;
    da18:	4607      	mov	r7, r0
    da1a:	e79b      	b.n	d954 <z_prf+0xc8>
			switch (c) {
    da1c:	2c63      	cmp	r4, #99	; 0x63
    da1e:	d059      	beq.n	dad4 <z_prf+0x248>
    da20:	d820      	bhi.n	da64 <z_prf+0x1d8>
    da22:	2c58      	cmp	r4, #88	; 0x58
    da24:	d1a5      	bne.n	d972 <z_prf+0xe6>
				if (c == 'o') {
    da26:	2c6f      	cmp	r4, #111	; 0x6f
    da28:	f106 0904 	add.w	r9, r6, #4
    da2c:	6831      	ldr	r1, [r6, #0]
    da2e:	f040 8328 	bne.w	e082 <z_prf+0x7f6>
	if (alt_form) {
    da32:	f1bb 0f00 	cmp.w	fp, #0
    da36:	f000 8317 	beq.w	e068 <z_prf+0x7dc>
		*buf++ = '0';
    da3a:	2330      	movs	r3, #48	; 0x30
    da3c:	f88d 306c 	strb.w	r3, [sp, #108]	; 0x6c
		if (!value) {
    da40:	2900      	cmp	r1, #0
    da42:	f040 831b 	bne.w	e07c <z_prf+0x7f0>
			*buf++ = 0;
    da46:	f88d 106d 	strb.w	r1, [sp, #109]	; 0x6d
			prefix = 0;
    da4a:	460f      	mov	r7, r1
			return 1;
    da4c:	2601      	movs	r6, #1
    da4e:	e025      	b.n	da9c <z_prf+0x210>
			switch (c) {
    da50:	2c70      	cmp	r4, #112	; 0x70
    da52:	f000 82f5 	beq.w	e040 <z_prf+0x7b4>
    da56:	d827      	bhi.n	daa8 <z_prf+0x21c>
    da58:	2c6e      	cmp	r4, #110	; 0x6e
    da5a:	f000 82de 	beq.w	e01a <z_prf+0x78e>
    da5e:	d8e2      	bhi.n	da26 <z_prf+0x19a>
    da60:	2c69      	cmp	r4, #105	; 0x69
    da62:	d186      	bne.n	d972 <z_prf+0xe6>
				switch (i) {
    da64:	6837      	ldr	r7, [r6, #0]
    da66:	f106 0904 	add.w	r9, r6, #4
	if (value < 0) {
    da6a:	2f00      	cmp	r7, #0
    da6c:	f280 809a 	bge.w	dba4 <z_prf+0x318>
		*buf++ = '-';
    da70:	232d      	movs	r3, #45	; 0x2d
		value = -value;
    da72:	4279      	negs	r1, r7
		*buf++ = '-';
    da74:	f88d 306c 	strb.w	r3, [sp, #108]	; 0x6c
		*buf++ = ' ';
    da78:	f10d 066d 	add.w	r6, sp, #109	; 0x6d
	return _to_x(buf, value, 10);
    da7c:	4630      	mov	r0, r6
    da7e:	220a      	movs	r2, #10
    da80:	f00b ff62 	bl	19948 <_to_x>
				if (fplus || fspace || val < 0) {
    da84:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
	return (buf + _to_udec(buf, value)) - start;
    da86:	4406      	add	r6, r0
    da88:	a81b      	add	r0, sp, #108	; 0x6c
    da8a:	1a36      	subs	r6, r6, r0
				if (fplus || fspace || val < 0) {
    da8c:	2b00      	cmp	r3, #0
    da8e:	f040 832f 	bne.w	e0f0 <z_prf+0x864>
    da92:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    da94:	2b00      	cmp	r3, #0
    da96:	f040 832b 	bne.w	e0f0 <z_prf+0x864>
    da9a:	0fff      	lsrs	r7, r7, #31
			if (precision >= 0) {
    da9c:	2d00      	cmp	r5, #0
    da9e:	da21      	bge.n	dae4 <z_prf+0x258>
			zero.predot = zero.postdot = zero.trail = 0;
    daa0:	2500      	movs	r5, #0
    daa2:	46ab      	mov	fp, r5
    daa4:	46a8      	mov	r8, r5
    daa6:	e0e1      	b.n	dc6c <z_prf+0x3e0>
			switch (c) {
    daa8:	2c75      	cmp	r4, #117	; 0x75
    daaa:	d0bc      	beq.n	da26 <z_prf+0x19a>
    daac:	2c78      	cmp	r4, #120	; 0x78
    daae:	d0ba      	beq.n	da26 <z_prf+0x19a>
    dab0:	2c73      	cmp	r4, #115	; 0x73
    dab2:	f47f af5e 	bne.w	d972 <z_prf+0xe6>
				cptr = va_arg(vargs, char *);
    dab6:	46b1      	mov	r9, r6
					precision = INT_MAX;
    dab8:	2d00      	cmp	r5, #0
    daba:	bfb8      	it	lt
    dabc:	f06f 4500 	mvnlt.w	r5, #2147483648	; 0x80000000
				for (clen = 0; clen < precision; clen++) {
    dac0:	2600      	movs	r6, #0
				cptr = va_arg(vargs, char *);
    dac2:	f859 3b04 	ldr.w	r3, [r9], #4
				for (clen = 0; clen < precision; clen++) {
    dac6:	42b5      	cmp	r5, r6
    dac8:	f040 82c9 	bne.w	e05e <z_prf+0x7d2>
    dacc:	462e      	mov	r6, r5
    dace:	2500      	movs	r5, #0
    dad0:	462f      	mov	r7, r5
    dad2:	e008      	b.n	dae6 <z_prf+0x25a>
				break;
    dad4:	2700      	movs	r7, #0
				buf[0] = va_arg(vargs, int);
    dad6:	46b1      	mov	r9, r6
				break;
    dad8:	463d      	mov	r5, r7
				clen = 1;
    dada:	2601      	movs	r6, #1
				buf[0] = va_arg(vargs, int);
    dadc:	f859 3b04 	ldr.w	r3, [r9], #4
    dae0:	f88d 306c 	strb.w	r3, [sp, #108]	; 0x6c
				break;
    dae4:	ab1b      	add	r3, sp, #108	; 0x6c
				zero_head = precision - clen + prefix;
    dae6:	19ea      	adds	r2, r5, r7
			zero.predot = zero.postdot = zero.trail = 0;
    dae8:	2500      	movs	r5, #0
    daea:	46ab      	mov	fp, r5
    daec:	46a8      	mov	r8, r5
				zero_head = precision - clen + prefix;
    daee:	1b92      	subs	r2, r2, r6
			if (zero_head < 0) {
    daf0:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
			width -= clen + zero_head;
    daf4:	1991      	adds	r1, r2, r6
    daf6:	9106      	str	r1, [sp, #24]
    daf8:	9909      	ldr	r1, [sp, #36]	; 0x24
    dafa:	1990      	adds	r0, r2, r6
    dafc:	1a0c      	subs	r4, r1, r0
			if (!fminus && width > 0) {
    dafe:	990f      	ldr	r1, [sp, #60]	; 0x3c
    db00:	b911      	cbnz	r1, db08 <z_prf+0x27c>
    db02:	2c00      	cmp	r4, #0
    db04:	f300 8311 	bgt.w	e12a <z_prf+0x89e>
			while (prefix-- > 0) {
    db08:	eb03 0a07 	add.w	sl, r3, r7
    db0c:	4553      	cmp	r3, sl
    db0e:	f040 8311 	bne.w	e134 <z_prf+0x8a8>
			while (zero_head-- > 0) {
    db12:	f112 32ff 	adds.w	r2, r2, #4294967295
    db16:	f080 831b 	bcs.w	e150 <z_prf+0x8c4>
			clen -= prefix;
    db1a:	1bf6      	subs	r6, r6, r7
			if (zero.predot) {
    db1c:	f1b8 0f00 	cmp.w	r8, #0
    db20:	d011      	beq.n	db46 <z_prf+0x2ba>
				c = *cptr;
    db22:	f89a 0000 	ldrb.w	r0, [sl]
				while (isdigit(c)) {
    db26:	eb0a 0706 	add.w	r7, sl, r6
    db2a:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
    db2e:	2b09      	cmp	r3, #9
    db30:	eba7 060a 	sub.w	r6, r7, sl
    db34:	f240 8317 	bls.w	e166 <z_prf+0x8da>
    db38:	4647      	mov	r7, r8
				while (zero.predot-- > 0) {
    db3a:	f117 37ff 	adds.w	r7, r7, #4294967295
    db3e:	f080 831b 	bcs.w	e178 <z_prf+0x8ec>
				clen -= zero.predot;
    db42:	eba6 0608 	sub.w	r6, r6, r8
			if (zero.postdot) {
    db46:	f1bb 0f00 	cmp.w	fp, #0
    db4a:	d015      	beq.n	db78 <z_prf+0x2ec>
    db4c:	eb0a 0706 	add.w	r7, sl, r6
					c = *cptr++;
    db50:	f81a 8b01 	ldrb.w	r8, [sl], #1
					PUTC(c);
    db54:	9903      	ldr	r1, [sp, #12]
    db56:	4640      	mov	r0, r8
    db58:	9b02      	ldr	r3, [sp, #8]
    db5a:	4798      	blx	r3
    db5c:	3001      	adds	r0, #1
    db5e:	f43f aeab 	beq.w	d8b8 <z_prf+0x2c>
				} while (c != '.');
    db62:	f1b8 0f2e 	cmp.w	r8, #46	; 0x2e
    db66:	eba7 060a 	sub.w	r6, r7, sl
    db6a:	d1f1      	bne.n	db50 <z_prf+0x2c4>
				while (zero.postdot-- > 0) {
    db6c:	465f      	mov	r7, fp
    db6e:	2f00      	cmp	r7, #0
    db70:	f300 830b 	bgt.w	e18a <z_prf+0x8fe>
				clen -= zero.postdot;
    db74:	eba6 060b 	sub.w	r6, r6, fp
			if (zero.trail) {
    db78:	b195      	cbz	r5, dba0 <z_prf+0x314>
				c = *cptr;
    db7a:	f89a 0000 	ldrb.w	r0, [sl]
				while (isdigit(c) || c == '.') {
    db7e:	eb0a 0706 	add.w	r7, sl, r6
    db82:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
    db86:	2b09      	cmp	r3, #9
    db88:	eba7 060a 	sub.w	r6, r7, sl
    db8c:	f240 8308 	bls.w	e1a0 <z_prf+0x914>
    db90:	282e      	cmp	r0, #46	; 0x2e
    db92:	f000 8305 	beq.w	e1a0 <z_prf+0x914>
				while (zero.trail-- > 0) {
    db96:	462f      	mov	r7, r5
    db98:	2f00      	cmp	r7, #0
    db9a:	f300 830a 	bgt.w	e1b2 <z_prf+0x926>
				clen -= zero.trail;
    db9e:	1b76      	subs	r6, r6, r5
    dba0:	4456      	add	r6, sl
    dba2:	e319      	b.n	e1d8 <z_prf+0x94c>
	} else if (fplus) {
    dba4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    dba6:	b123      	cbz	r3, dbb2 <z_prf+0x326>
		*buf++ = '+';
    dba8:	232b      	movs	r3, #43	; 0x2b
		*buf++ = ' ';
    dbaa:	f88d 306c 	strb.w	r3, [sp, #108]	; 0x6c
    dbae:	4639      	mov	r1, r7
    dbb0:	e762      	b.n	da78 <z_prf+0x1ec>
	} else if (fspace) {
    dbb2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    dbb4:	b10b      	cbz	r3, dbba <z_prf+0x32e>
		*buf++ = ' ';
    dbb6:	2320      	movs	r3, #32
    dbb8:	e7f7      	b.n	dbaa <z_prf+0x31e>
	} else if (fspace) {
    dbba:	4639      	mov	r1, r7
    dbbc:	ae1b      	add	r6, sp, #108	; 0x6c
    dbbe:	e75d      	b.n	da7c <z_prf+0x1f0>
    dbc0:	0001b2a3 	.word	0x0001b2a3
    dbc4:	0001b2a9 	.word	0x0001b2a9
				u.d = va_arg(vargs, double);
    dbc8:	f106 0907 	add.w	r9, r6, #7
    dbcc:	f029 0907 	bic.w	r9, r9, #7
    dbd0:	e8f9 2302 	ldrd	r2, r3, [r9], #8
	fract = (double_temp << 11) & ~HIGHBIT64;
    dbd4:	02d8      	lsls	r0, r3, #11
    dbd6:	ea40 5052 	orr.w	r0, r0, r2, lsr #21
    dbda:	02d6      	lsls	r6, r2, #11
    dbdc:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
	if (sign) {
    dbe0:	2a00      	cmp	r2, #0
	exp = double_temp >> 52 & 0x7ff;
    dbe2:	f3c3 510a 	ubfx	r1, r3, #20, #11
	fract = (double_temp << 11) & ~HIGHBIT64;
    dbe6:	9604      	str	r6, [sp, #16]
    dbe8:	9005      	str	r0, [sp, #20]
	if (sign) {
    dbea:	f173 0300 	sbcs.w	r3, r3, #0
	fract = (double_temp << 11) & ~HIGHBIT64;
    dbee:	e9dd 6704 	ldrd	r6, r7, [sp, #16]
    dbf2:	e9cd 6716 	strd	r6, r7, [sp, #88]	; 0x58
	if (sign) {
    dbf6:	da41      	bge.n	dc7c <z_prf+0x3f0>
		*buf++ = '-';
    dbf8:	232d      	movs	r3, #45	; 0x2d
		*buf++ = ' ';
    dbfa:	f88d 306c 	strb.w	r3, [sp, #108]	; 0x6c
    dbfe:	f10d 076d 	add.w	r7, sp, #109	; 0x6d
	if (exp == 0x7ff) {
    dc02:	f240 73ff 	movw	r3, #2047	; 0x7ff
    dc06:	4299      	cmp	r1, r3
    dc08:	d153      	bne.n	dcb2 <z_prf+0x426>
		if (!fract) {
    dc0a:	e9dd 1204 	ldrd	r1, r2, [sp, #16]
    dc0e:	430a      	orrs	r2, r1
    dc10:	f1a4 0441 	sub.w	r4, r4, #65	; 0x41
    dc14:	f107 0303 	add.w	r3, r7, #3
    dc18:	d140      	bne.n	dc9c <z_prf+0x410>
			if (isupper(c)) {
    dc1a:	2c19      	cmp	r4, #25
    dc1c:	d838      	bhi.n	dc90 <z_prf+0x404>
				*buf++ = 'I';
    dc1e:	2249      	movs	r2, #73	; 0x49
    dc20:	703a      	strb	r2, [r7, #0]
				*buf++ = 'N';
    dc22:	224e      	movs	r2, #78	; 0x4e
    dc24:	707a      	strb	r2, [r7, #1]
				*buf++ = 'F';
    dc26:	2246      	movs	r2, #70	; 0x46
		*buf = 0;
    dc28:	2500      	movs	r5, #0
			zero.predot = zero.postdot = zero.trail = 0;
    dc2a:	46ab      	mov	fp, r5
    dc2c:	46a8      	mov	r8, r5
		return buf - start;
    dc2e:	ae1b      	add	r6, sp, #108	; 0x6c
				*buf++ = 'n';
    dc30:	70ba      	strb	r2, [r7, #2]
		*buf = 0;
    dc32:	70fd      	strb	r5, [r7, #3]
		return buf - start;
    dc34:	1b9b      	subs	r3, r3, r6
				if (fplus || fspace || (buf[0] == '-')) {
    dc36:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    dc38:	2a00      	cmp	r2, #0
    dc3a:	f040 81ec 	bne.w	e016 <z_prf+0x78a>
    dc3e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    dc40:	2a00      	cmp	r2, #0
    dc42:	f040 81e8 	bne.w	e016 <z_prf+0x78a>
    dc46:	f89d 706c 	ldrb.w	r7, [sp, #108]	; 0x6c
    dc4a:	f1a7 022d 	sub.w	r2, r7, #45	; 0x2d
    dc4e:	4257      	negs	r7, r2
    dc50:	4157      	adcs	r7, r2
				clen += zero.predot + zero.postdot + zero.trail;
    dc52:	eb05 0608 	add.w	r6, r5, r8
    dc56:	4433      	add	r3, r6
    dc58:	eb03 060b 	add.w	r6, r3, fp
				if (!isdigit(buf[prefix])) {
    dc5c:	ab22      	add	r3, sp, #136	; 0x88
    dc5e:	443b      	add	r3, r7
    dc60:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
    dc64:	3b30      	subs	r3, #48	; 0x30
    dc66:	2b09      	cmp	r3, #9
    dc68:	f200 8246 	bhi.w	e0f8 <z_prf+0x86c>
			} else if (fzero) {
    dc6c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    dc6e:	2b00      	cmp	r3, #0
    dc70:	f000 8245 	beq.w	e0fe <z_prf+0x872>
    dc74:	9b09      	ldr	r3, [sp, #36]	; 0x24
    dc76:	1b9a      	subs	r2, r3, r6
    dc78:	ab1b      	add	r3, sp, #108	; 0x6c
    dc7a:	e739      	b.n	daf0 <z_prf+0x264>
	} else if (fplus) {
    dc7c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    dc7e:	b10b      	cbz	r3, dc84 <z_prf+0x3f8>
		*buf++ = '+';
    dc80:	232b      	movs	r3, #43	; 0x2b
    dc82:	e7ba      	b.n	dbfa <z_prf+0x36e>
	} else if (fspace) {
    dc84:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    dc86:	b10b      	cbz	r3, dc8c <z_prf+0x400>
		*buf++ = ' ';
    dc88:	2320      	movs	r3, #32
    dc8a:	e7b6      	b.n	dbfa <z_prf+0x36e>
	} else if (fspace) {
    dc8c:	af1b      	add	r7, sp, #108	; 0x6c
    dc8e:	e7b8      	b.n	dc02 <z_prf+0x376>
				*buf++ = 'i';
    dc90:	2269      	movs	r2, #105	; 0x69
    dc92:	703a      	strb	r2, [r7, #0]
				*buf++ = 'n';
    dc94:	226e      	movs	r2, #110	; 0x6e
    dc96:	707a      	strb	r2, [r7, #1]
				*buf++ = 'f';
    dc98:	2266      	movs	r2, #102	; 0x66
    dc9a:	e7c5      	b.n	dc28 <z_prf+0x39c>
			if (isupper(c)) {
    dc9c:	2c19      	cmp	r4, #25
				*buf++ = 'N';
    dc9e:	bf99      	ittee	ls
    dca0:	224e      	movls	r2, #78	; 0x4e
				*buf++ = 'A';
    dca2:	2141      	movls	r1, #65	; 0x41
				*buf++ = 'n';
    dca4:	226e      	movhi	r2, #110	; 0x6e
				*buf++ = 'a';
    dca6:	2161      	movhi	r1, #97	; 0x61
				*buf++ = 'N';
    dca8:	bf94      	ite	ls
    dcaa:	703a      	strbls	r2, [r7, #0]
				*buf++ = 'n';
    dcac:	703a      	strbhi	r2, [r7, #0]
				*buf++ = 'a';
    dcae:	7079      	strb	r1, [r7, #1]
    dcb0:	e7ba      	b.n	dc28 <z_prf+0x39c>
	if ((exp | fract) != 0) {
    dcb2:	9b04      	ldr	r3, [sp, #16]
    dcb4:	9805      	ldr	r0, [sp, #20]
    dcb6:	430b      	orrs	r3, r1
    dcb8:	9310      	str	r3, [sp, #64]	; 0x40
    dcba:	17cb      	asrs	r3, r1, #31
    dcbc:	4303      	orrs	r3, r0
		c = 'f';
    dcbe:	2c46      	cmp	r4, #70	; 0x46
	if ((exp | fract) != 0) {
    dcc0:	9311      	str	r3, [sp, #68]	; 0x44
		c = 'f';
    dcc2:	bf08      	it	eq
    dcc4:	2466      	moveq	r4, #102	; 0x66
	if ((exp | fract) != 0) {
    dcc6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
    dcca:	4313      	orrs	r3, r2
    dccc:	f000 8111 	beq.w	def2 <z_prf+0x666>
		if (exp == 0) {
    dcd0:	2900      	cmp	r1, #0
    dcd2:	f000 809b 	beq.w	de0c <z_prf+0x580>
		fract |= HIGHBIT64;
    dcd6:	2600      	movs	r6, #0
    dcd8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
		exp -= (1023 - 1);	/* +1 since .1 vs 1. */
    dcda:	f2a1 38fe 	subw	r8, r1, #1022	; 0x3fe
		fract |= HIGHBIT64;
    dcde:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
    dce2:	9317      	str	r3, [sp, #92]	; 0x5c
	while (exp <= -3) {
    dce4:	f118 0f02 	cmn.w	r8, #2
    dce8:	f2c0 80a4 	blt.w	de34 <z_prf+0x5a8>
	while (exp > 0) {
    dcec:	f1b8 0f00 	cmp.w	r8, #0
    dcf0:	f300 80dd 	bgt.w	deae <z_prf+0x622>
		_rlrshift(&fract);
    dcf4:	a816      	add	r0, sp, #88	; 0x58
		exp++;
    dcf6:	f108 0801 	add.w	r8, r8, #1
		_rlrshift(&fract);
    dcfa:	f00b fe47 	bl	1998c <_rlrshift>
	while (exp < (0 + 4)) {
    dcfe:	f1b8 0f04 	cmp.w	r8, #4
    dd02:	d1f7      	bne.n	dcf4 <z_prf+0x468>
		precision = 6;		/* Default precision if none given */
    dd04:	2d00      	cmp	r5, #0
	if ((c == 'g') || (c == 'G')) {
    dd06:	f004 03df 	and.w	r3, r4, #223	; 0xdf
		precision = 6;		/* Default precision if none given */
    dd0a:	bfb8      	it	lt
    dd0c:	2506      	movlt	r5, #6
	if ((c == 'g') || (c == 'G')) {
    dd0e:	2b47      	cmp	r3, #71	; 0x47
    dd10:	f040 80f8 	bne.w	df04 <z_prf+0x678>
		if (decexp < (-4 + 1) || decexp > precision) {
    dd14:	1cf1      	adds	r1, r6, #3
    dd16:	db02      	blt.n	dd1e <z_prf+0x492>
    dd18:	42b5      	cmp	r5, r6
    dd1a:	f280 80ed 	bge.w	def8 <z_prf+0x66c>
			c += 'e' - 'g';
    dd1e:	3c02      	subs	r4, #2
    dd20:	b2e4      	uxtb	r4, r4
			if (precision > 0) {
    dd22:	2d00      	cmp	r5, #0
    dd24:	f000 80f4 	beq.w	df10 <z_prf+0x684>
				precision--;
    dd28:	3d01      	subs	r5, #1
		if (!falt && (precision > 0)) {
    dd2a:	f1bb 0f00 	cmp.w	fp, #0
    dd2e:	f040 80ef 	bne.w	df10 <z_prf+0x684>
    dd32:	2d00      	cmp	r5, #0
    dd34:	bfd4      	ite	le
    dd36:	f04f 0a00 	movle.w	sl, #0
    dd3a:	f04f 0a01 	movgt.w	sl, #1
	if (c == 'f') {
    dd3e:	2c66      	cmp	r4, #102	; 0x66
    dd40:	f040 80e8 	bne.w	df14 <z_prf+0x688>
		if (exp < 0) {
    dd44:	eb15 0806 	adds.w	r8, r5, r6
    dd48:	f140 80ec 	bpl.w	df24 <z_prf+0x698>
	digit_count = 16;
    dd4c:	2310      	movs	r3, #16
    dd4e:	2466      	movs	r4, #102	; 0x66
			exp = 0;
    dd50:	f04f 0800 	mov.w	r8, #0
	digit_count = 16;
    dd54:	9315      	str	r3, [sp, #84]	; 0x54
	ltemp = 0x0800000000000000;
    dd56:	2200      	movs	r2, #0
    dd58:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
    dd5c:	e9cd 2318 	strd	r2, r3, [sp, #96]	; 0x60
	while (exp--) {
    dd60:	f118 38ff 	adds.w	r8, r8, #4294967295
    dd64:	f080 80e0 	bcs.w	df28 <z_prf+0x69c>
	fract += ltemp;
    dd68:	9b16      	ldr	r3, [sp, #88]	; 0x58
    dd6a:	9a18      	ldr	r2, [sp, #96]	; 0x60
    dd6c:	9919      	ldr	r1, [sp, #100]	; 0x64
    dd6e:	189b      	adds	r3, r3, r2
    dd70:	9a17      	ldr	r2, [sp, #92]	; 0x5c
    dd72:	eb41 0202 	adc.w	r2, r1, r2
    dd76:	e9cd 3216 	strd	r3, r2, [sp, #88]	; 0x58
	if ((fract >> 32) & 0xF0000000) {
    dd7a:	f002 4370 	and.w	r3, r2, #4026531840	; 0xf0000000
    dd7e:	9312      	str	r3, [sp, #72]	; 0x48
    dd80:	2300      	movs	r3, #0
    dd82:	9313      	str	r3, [sp, #76]	; 0x4c
    dd84:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
    dd88:	4313      	orrs	r3, r2
    dd8a:	d006      	beq.n	dd9a <z_prf+0x50e>
		_ldiv5(&fract);
    dd8c:	a816      	add	r0, sp, #88	; 0x58
    dd8e:	f00b fe0e 	bl	199ae <_ldiv5>
		_rlrshift(&fract);
    dd92:	a816      	add	r0, sp, #88	; 0x58
    dd94:	f00b fdfa 	bl	1998c <_rlrshift>
		decexp++;
    dd98:	3601      	adds	r6, #1
	if (c == 'f') {
    dd9a:	2c66      	cmp	r4, #102	; 0x66
    dd9c:	f040 80e1 	bne.w	df62 <z_prf+0x6d6>
		if (decexp > 0) {
    dda0:	2e00      	cmp	r6, #0
    dda2:	f340 80c8 	ble.w	df36 <z_prf+0x6aa>
			while (decexp > 0 && digit_count > 0) {
    dda6:	9b15      	ldr	r3, [sp, #84]	; 0x54
    dda8:	2b00      	cmp	r3, #0
    ddaa:	dd07      	ble.n	ddbc <z_prf+0x530>
				*buf++ = _get_digit(&fract, &digit_count);
    ddac:	a915      	add	r1, sp, #84	; 0x54
    ddae:	a816      	add	r0, sp, #88	; 0x58
    ddb0:	f00b fe28 	bl	19a04 <_get_digit>
			while (decexp > 0 && digit_count > 0) {
    ddb4:	3e01      	subs	r6, #1
				*buf++ = _get_digit(&fract, &digit_count);
    ddb6:	f807 0b01 	strb.w	r0, [r7], #1
			while (decexp > 0 && digit_count > 0) {
    ddba:	d1f4      	bne.n	dda6 <z_prf+0x51a>
			zp->predot = decexp;
    ddbc:	46b0      	mov	r8, r6
    ddbe:	463b      	mov	r3, r7
			decexp = 0;
    ddc0:	2600      	movs	r6, #0
		if (falt || (precision > 0)) {
    ddc2:	f1bb 0f00 	cmp.w	fp, #0
    ddc6:	d101      	bne.n	ddcc <z_prf+0x540>
    ddc8:	2d00      	cmp	r5, #0
    ddca:	dd15      	ble.n	ddf8 <z_prf+0x56c>
			*buf++ = '.';
    ddcc:	222e      	movs	r2, #46	; 0x2e
    ddce:	f803 2b01 	strb.w	r2, [r3], #1
		if (decexp < 0 && precision > 0) {
    ddd2:	2e00      	cmp	r6, #0
    ddd4:	f000 80c0 	beq.w	df58 <z_prf+0x6cc>
    ddd8:	2d00      	cmp	r5, #0
    ddda:	f340 80bf 	ble.w	df5c <z_prf+0x6d0>
			zp->postdot = -decexp;
    ddde:	f1c6 0b00 	rsb	fp, r6, #0
    dde2:	45ab      	cmp	fp, r5
    dde4:	bfa8      	it	ge
    dde6:	46ab      	movge	fp, r5
			precision -= zp->postdot;
    dde8:	eba5 050b 	sub.w	r5, r5, fp
		while (precision > 0 && digit_count > 0) {
    ddec:	2d00      	cmp	r5, #0
    ddee:	dd03      	ble.n	ddf8 <z_prf+0x56c>
    ddf0:	9a15      	ldr	r2, [sp, #84]	; 0x54
    ddf2:	2a00      	cmp	r2, #0
    ddf4:	f300 80a6 	bgt.w	df44 <z_prf+0x6b8>
	if (prune_zero) {
    ddf8:	f1ba 0f00 	cmp.w	sl, #0
    ddfc:	f040 80c6 	bne.w	df8c <z_prf+0x700>
	*buf = 0;
    de00:	2200      	movs	r2, #0
	return buf - start;
    de02:	ae1b      	add	r6, sp, #108	; 0x6c
	*buf = 0;
    de04:	701a      	strb	r2, [r3, #0]
	return buf - start;
    de06:	1b9b      	subs	r3, r3, r6
    de08:	e715      	b.n	dc36 <z_prf+0x3aa>
				exp--;
    de0a:	3901      	subs	r1, #1
			while (((fract <<= 1) & HIGHBIT64) == 0) {
    de0c:	9b04      	ldr	r3, [sp, #16]
    de0e:	18db      	adds	r3, r3, r3
    de10:	9304      	str	r3, [sp, #16]
    de12:	9b05      	ldr	r3, [sp, #20]
    de14:	415b      	adcs	r3, r3
    de16:	9305      	str	r3, [sp, #20]
    de18:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
    de1c:	2a00      	cmp	r2, #0
    de1e:	f173 0300 	sbcs.w	r3, r3, #0
    de22:	daf2      	bge.n	de0a <z_prf+0x57e>
    de24:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
    de28:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
    de2c:	e753      	b.n	dcd6 <z_prf+0x44a>
			_rlrshift(&fract);
    de2e:	a816      	add	r0, sp, #88	; 0x58
    de30:	f00b fdac 	bl	1998c <_rlrshift>
		while ((fract >> 32) >= (MAXFP1 / 5)) {
    de34:	e9dd ec16 	ldrd	lr, ip, [sp, #88]	; 0x58
    de38:	2300      	movs	r3, #0
    de3a:	2100      	movs	r1, #0
    de3c:	f8cd c030 	str.w	ip, [sp, #48]	; 0x30
    de40:	930d      	str	r3, [sp, #52]	; 0x34
    de42:	48bb      	ldr	r0, [pc, #748]	; (e130 <z_prf+0x8a4>)
    de44:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
    de48:	4299      	cmp	r1, r3
    de4a:	bf08      	it	eq
    de4c:	4290      	cmpeq	r0, r2
    de4e:	f108 0801 	add.w	r8, r8, #1
    de52:	d3ec      	bcc.n	de2e <z_prf+0x5a2>
		fract *= 5U;
    de54:	2005      	movs	r0, #5
    de56:	fbae 2300 	umull	r2, r3, lr, r0
    de5a:	e9cd 2306 	strd	r2, r3, [sp, #24]
    de5e:	9b07      	ldr	r3, [sp, #28]
		decexp--;
    de60:	3e01      	subs	r6, #1
		fract *= 5U;
    de62:	fb00 330c 	mla	r3, r0, ip, r3
		decexp--;
    de66:	f04f 0c00 	mov.w	ip, #0
		fract *= 5U;
    de6a:	9307      	str	r3, [sp, #28]
    de6c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
    de70:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
		while ((fract >> 32) <= (MAXFP1 / 2)) {
    de74:	2100      	movs	r1, #0
    de76:	2300      	movs	r3, #0
    de78:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
    de7c:	9807      	ldr	r0, [sp, #28]
    de7e:	428b      	cmp	r3, r1
    de80:	bf08      	it	eq
    de82:	4282      	cmpeq	r2, r0
    de84:	d208      	bcs.n	de98 <z_prf+0x60c>
    de86:	f1bc 0f00 	cmp.w	ip, #0
    de8a:	f43f af2b 	beq.w	dce4 <z_prf+0x458>
    de8e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
    de92:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
    de96:	e725      	b.n	dce4 <z_prf+0x458>
			fract <<= 1;
    de98:	9b06      	ldr	r3, [sp, #24]
			exp--;
    de9a:	f108 38ff 	add.w	r8, r8, #4294967295
			fract <<= 1;
    de9e:	18db      	adds	r3, r3, r3
    dea0:	9306      	str	r3, [sp, #24]
    dea2:	9b07      	ldr	r3, [sp, #28]
    dea4:	f04f 0c01 	mov.w	ip, #1
    dea8:	415b      	adcs	r3, r3
    deaa:	9307      	str	r3, [sp, #28]
			exp--;
    deac:	e7e2      	b.n	de74 <z_prf+0x5e8>
		_ldiv5(&fract);
    deae:	a816      	add	r0, sp, #88	; 0x58
    deb0:	f00b fd7d 	bl	199ae <_ldiv5>
		exp--;
    deb4:	e9dd ae16 	ldrd	sl, lr, [sp, #88]	; 0x58
		decexp++;
    deb8:	f04f 0c00 	mov.w	ip, #0
		exp--;
    debc:	f108 38ff 	add.w	r8, r8, #4294967295
		decexp++;
    dec0:	3601      	adds	r6, #1
		while ((fract >> 32) <= (MAXFP1 / 2)) {
    dec2:	2300      	movs	r3, #0
    dec4:	2100      	movs	r1, #0
    dec6:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
    deca:	4299      	cmp	r1, r3
    decc:	bf08      	it	eq
    dece:	4570      	cmpeq	r0, lr
    ded0:	d206      	bcs.n	dee0 <z_prf+0x654>
    ded2:	f1bc 0f00 	cmp.w	ip, #0
    ded6:	f43f af09 	beq.w	dcec <z_prf+0x460>
    deda:	e9cd ae16 	strd	sl, lr, [sp, #88]	; 0x58
    dede:	e705      	b.n	dcec <z_prf+0x460>
			fract <<= 1;
    dee0:	eb1a 0a0a 	adds.w	sl, sl, sl
    dee4:	eb4e 0e0e 	adc.w	lr, lr, lr
			exp--;
    dee8:	f108 38ff 	add.w	r8, r8, #4294967295
    deec:	f04f 0c01 	mov.w	ip, #1
    def0:	e7e7      	b.n	dec2 <z_prf+0x636>
	if ((exp | fract) != 0) {
    def2:	2600      	movs	r6, #0
    def4:	46b0      	mov	r8, r6
    def6:	e6fd      	b.n	dcf4 <z_prf+0x468>
			precision -= decexp;
    def8:	1bad      	subs	r5, r5, r6
		if (!falt && (precision > 0)) {
    defa:	f1bb 0f00 	cmp.w	fp, #0
    defe:	d104      	bne.n	df0a <z_prf+0x67e>
			c = 'f';
    df00:	2466      	movs	r4, #102	; 0x66
    df02:	e716      	b.n	dd32 <z_prf+0x4a6>
	prune_zero = false;		/* Assume trailing 0's allowed     */
    df04:	f04f 0a00 	mov.w	sl, #0
    df08:	e719      	b.n	dd3e <z_prf+0x4b2>
    df0a:	f04f 0a00 	mov.w	sl, #0
    df0e:	e719      	b.n	dd44 <z_prf+0x4b8>
    df10:	f04f 0a00 	mov.w	sl, #0
		exp = precision + 1;
    df14:	f105 0801 	add.w	r8, r5, #1
	digit_count = 16;
    df18:	2310      	movs	r3, #16
    df1a:	4598      	cmp	r8, r3
    df1c:	9315      	str	r3, [sp, #84]	; 0x54
	if (exp > 16) {
    df1e:	bfa8      	it	ge
    df20:	4698      	movge	r8, r3
    df22:	e718      	b.n	dd56 <z_prf+0x4ca>
		if (exp < 0) {
    df24:	2466      	movs	r4, #102	; 0x66
    df26:	e7f7      	b.n	df18 <z_prf+0x68c>
		_ldiv5(&ltemp);
    df28:	a818      	add	r0, sp, #96	; 0x60
    df2a:	f00b fd40 	bl	199ae <_ldiv5>
		_rlrshift(&ltemp);
    df2e:	a818      	add	r0, sp, #96	; 0x60
    df30:	f00b fd2c 	bl	1998c <_rlrshift>
    df34:	e714      	b.n	dd60 <z_prf+0x4d4>
			*buf++ = '0';
    df36:	463b      	mov	r3, r7
    df38:	2230      	movs	r2, #48	; 0x30
			zero.predot = zero.postdot = zero.trail = 0;
    df3a:	f04f 0800 	mov.w	r8, #0
			*buf++ = '0';
    df3e:	f803 2b01 	strb.w	r2, [r3], #1
    df42:	e73e      	b.n	ddc2 <z_prf+0x536>
			*buf++ = _get_digit(&fract, &digit_count);
    df44:	a915      	add	r1, sp, #84	; 0x54
    df46:	a816      	add	r0, sp, #88	; 0x58
    df48:	9306      	str	r3, [sp, #24]
    df4a:	f00b fd5b 	bl	19a04 <_get_digit>
    df4e:	9b06      	ldr	r3, [sp, #24]
			precision--;
    df50:	3d01      	subs	r5, #1
			*buf++ = _get_digit(&fract, &digit_count);
    df52:	f803 0b01 	strb.w	r0, [r3], #1
			precision--;
    df56:	e749      	b.n	ddec <z_prf+0x560>
			zero.predot = zero.postdot = zero.trail = 0;
    df58:	46b3      	mov	fp, r6
    df5a:	e747      	b.n	ddec <z_prf+0x560>
    df5c:	f04f 0b00 	mov.w	fp, #0
    df60:	e74a      	b.n	ddf8 <z_prf+0x56c>
		*buf = _get_digit(&fract, &digit_count);
    df62:	a915      	add	r1, sp, #84	; 0x54
    df64:	a816      	add	r0, sp, #88	; 0x58
    df66:	f00b fd4d 	bl	19a04 <_get_digit>
		if (*buf++ != '0') {
    df6a:	2830      	cmp	r0, #48	; 0x30
		*buf = _get_digit(&fract, &digit_count);
    df6c:	7038      	strb	r0, [r7, #0]
			decexp--;
    df6e:	bf18      	it	ne
    df70:	f106 36ff 	addne.w	r6, r6, #4294967295
		if (falt || (precision > 0)) {
    df74:	f1bb 0f00 	cmp.w	fp, #0
    df78:	d138      	bne.n	dfec <z_prf+0x760>
    df7a:	2d00      	cmp	r5, #0
    df7c:	dc36      	bgt.n	dfec <z_prf+0x760>
		if (*buf++ != '0') {
    df7e:	1c7b      	adds	r3, r7, #1
	if (prune_zero) {
    df80:	f1ba 0f00 	cmp.w	sl, #0
    df84:	d044      	beq.n	e010 <z_prf+0x784>
			zero.predot = zero.postdot = zero.trail = 0;
    df86:	f04f 0b00 	mov.w	fp, #0
    df8a:	46d8      	mov	r8, fp
		while (*--buf == '0')
    df8c:	461a      	mov	r2, r3
    df8e:	f813 1d01 	ldrb.w	r1, [r3, #-1]!
    df92:	2930      	cmp	r1, #48	; 0x30
    df94:	d0fa      	beq.n	df8c <z_prf+0x700>
		if (*buf != '.') {
    df96:	292e      	cmp	r1, #46	; 0x2e
    df98:	bf18      	it	ne
    df9a:	4613      	movne	r3, r2
    df9c:	2500      	movs	r5, #0
	if ((c == 'e') || (c == 'E')) {
    df9e:	f004 02df 	and.w	r2, r4, #223	; 0xdf
    dfa2:	2a45      	cmp	r2, #69	; 0x45
    dfa4:	f47f af2c 	bne.w	de00 <z_prf+0x574>
		if (decexp < 0) {
    dfa8:	2e00      	cmp	r6, #0
			*buf++ = '-';
    dfaa:	bfb4      	ite	lt
    dfac:	222d      	movlt	r2, #45	; 0x2d
			*buf++ = '+';
    dfae:	222b      	movge	r2, #43	; 0x2b
		*buf++ = c;
    dfb0:	4619      	mov	r1, r3
			decexp = -decexp;
    dfb2:	bfb8      	it	lt
    dfb4:	4276      	neglt	r6, r6
		if (decexp >= 100) {
    dfb6:	2e63      	cmp	r6, #99	; 0x63
		*buf++ = c;
    dfb8:	f801 4b02 	strb.w	r4, [r1], #2
			*buf++ = '-';
    dfbc:	705a      	strb	r2, [r3, #1]
		if (decexp >= 100) {
    dfbe:	dd08      	ble.n	dfd2 <z_prf+0x746>
			*buf++ = (decexp / 100) + '0';
    dfc0:	2064      	movs	r0, #100	; 0x64
    dfc2:	fb96 f2f0 	sdiv	r2, r6, r0
			decexp %= 100;
    dfc6:	fb00 6612 	mls	r6, r0, r2, r6
			*buf++ = (decexp / 100) + '0';
    dfca:	f102 0430 	add.w	r4, r2, #48	; 0x30
    dfce:	1cd9      	adds	r1, r3, #3
    dfd0:	709c      	strb	r4, [r3, #2]
		*buf++ = (decexp / 10) + '0';
    dfd2:	200a      	movs	r0, #10
    dfd4:	fb96 f2f0 	sdiv	r2, r6, r0
    dfd8:	460b      	mov	r3, r1
		decexp %= 10;
    dfda:	fb00 6612 	mls	r6, r0, r2, r6
		*buf++ = (decexp / 10) + '0';
    dfde:	f102 0430 	add.w	r4, r2, #48	; 0x30
		*buf++ = decexp + '0';
    dfe2:	3630      	adds	r6, #48	; 0x30
		*buf++ = (decexp / 10) + '0';
    dfe4:	f803 4b02 	strb.w	r4, [r3], #2
		*buf++ = decexp + '0';
    dfe8:	704e      	strb	r6, [r1, #1]
    dfea:	e709      	b.n	de00 <z_prf+0x574>
			*buf++ = '.';
    dfec:	222e      	movs	r2, #46	; 0x2e
    dfee:	1cbb      	adds	r3, r7, #2
    dff0:	707a      	strb	r2, [r7, #1]
		while (precision > 0 && digit_count > 0) {
    dff2:	2d00      	cmp	r5, #0
    dff4:	ddc4      	ble.n	df80 <z_prf+0x6f4>
    dff6:	9a15      	ldr	r2, [sp, #84]	; 0x54
    dff8:	2a00      	cmp	r2, #0
    dffa:	ddc1      	ble.n	df80 <z_prf+0x6f4>
			*buf++ = _get_digit(&fract, &digit_count);
    dffc:	a915      	add	r1, sp, #84	; 0x54
    dffe:	a816      	add	r0, sp, #88	; 0x58
    e000:	9306      	str	r3, [sp, #24]
    e002:	f00b fcff 	bl	19a04 <_get_digit>
    e006:	9b06      	ldr	r3, [sp, #24]
			precision--;
    e008:	3d01      	subs	r5, #1
			*buf++ = _get_digit(&fract, &digit_count);
    e00a:	f803 0b01 	strb.w	r0, [r3], #1
			precision--;
    e00e:	e7f0      	b.n	dff2 <z_prf+0x766>
			zero.predot = zero.postdot = zero.trail = 0;
    e010:	46d3      	mov	fp, sl
    e012:	46d0      	mov	r8, sl
    e014:	e7c3      	b.n	df9e <z_prf+0x712>
					prefix = 1;
    e016:	2701      	movs	r7, #1
    e018:	e61b      	b.n	dc52 <z_prf+0x3c6>
				switch (i) {
    e01a:	46b1      	mov	r9, r6
    e01c:	2f68      	cmp	r7, #104	; 0x68
    e01e:	f859 3b04 	ldr.w	r3, [r9], #4
    e022:	d005      	beq.n	e030 <z_prf+0x7a4>
    e024:	dc01      	bgt.n	e02a <z_prf+0x79e>
    e026:	2f48      	cmp	r7, #72	; 0x48
    e028:	d007      	beq.n	e03a <z_prf+0x7ae>
					*va_arg(vargs, int *) = count;
    e02a:	9a01      	ldr	r2, [sp, #4]
    e02c:	601a      	str	r2, [r3, #0]
					break;
    e02e:	e001      	b.n	e034 <z_prf+0x7a8>
					*va_arg(vargs, short *) = count;
    e030:	9a01      	ldr	r2, [sp, #4]
    e032:	801a      	strh	r2, [r3, #0]
				continue;
    e034:	464e      	mov	r6, r9
    e036:	9a08      	ldr	r2, [sp, #32]
    e038:	e430      	b.n	d89c <z_prf+0x10>
					*va_arg(vargs, char *) = count;
    e03a:	9a01      	ldr	r2, [sp, #4]
    e03c:	701a      	strb	r2, [r3, #0]
					break;
    e03e:	e7f9      	b.n	e034 <z_prf+0x7a8>
				val = (uintptr_t) va_arg(vargs, void *);
    e040:	46b1      	mov	r9, r6
		*buf++ = '0';
    e042:	f647 0330 	movw	r3, #30768	; 0x7830
	len = _to_x(buf, value, 16);
    e046:	2210      	movs	r2, #16
    e048:	f859 1b04 	ldr.w	r1, [r9], #4
    e04c:	f10d 006e 	add.w	r0, sp, #110	; 0x6e
		*buf++ = '0';
    e050:	f8ad 306c 	strh.w	r3, [sp, #108]	; 0x6c
	len = _to_x(buf, value, 16);
    e054:	f00b fc78 	bl	19948 <_to_x>
				prefix = 2;
    e058:	2702      	movs	r7, #2
	return len + (buf - buf0);
    e05a:	1c86      	adds	r6, r0, #2
				break;
    e05c:	e51e      	b.n	da9c <z_prf+0x210>
					if (cptr[clen] == '\0') {
    e05e:	5d9a      	ldrb	r2, [r3, r6]
    e060:	2a00      	cmp	r2, #0
    e062:	d047      	beq.n	e0f4 <z_prf+0x868>
				for (clen = 0; clen < precision; clen++) {
    e064:	3601      	adds	r6, #1
    e066:	e52e      	b.n	dac6 <z_prf+0x23a>
	if (alt_form) {
    e068:	ac1b      	add	r4, sp, #108	; 0x6c
	return (buf - buf0) + _to_x(buf, value, 8);
    e06a:	2208      	movs	r2, #8
    e06c:	4620      	mov	r0, r4
    e06e:	f00b fc6b 	bl	19948 <_to_x>
    e072:	ae1b      	add	r6, sp, #108	; 0x6c
    e074:	1ba6      	subs	r6, r4, r6
    e076:	4406      	add	r6, r0
			prefix = 0;
    e078:	2700      	movs	r7, #0
    e07a:	e50f      	b.n	da9c <z_prf+0x210>
		*buf++ = '0';
    e07c:	f10d 046d 	add.w	r4, sp, #109	; 0x6d
    e080:	e7f3      	b.n	e06a <z_prf+0x7de>
				} else if (c == 'u') {
    e082:	2c75      	cmp	r4, #117	; 0x75
    e084:	d105      	bne.n	e092 <z_prf+0x806>
	return _to_x(buf, value, 10);
    e086:	220a      	movs	r2, #10
    e088:	a81b      	add	r0, sp, #108	; 0x6c
    e08a:	f00b fc5d 	bl	19948 <_to_x>
    e08e:	4606      	mov	r6, r0
    e090:	e7f2      	b.n	e078 <z_prf+0x7ec>
	if (alt_form) {
    e092:	f1bb 0f00 	cmp.w	fp, #0
    e096:	d012      	beq.n	e0be <z_prf+0x832>
		*buf++ = '0';
    e098:	f647 0330 	movw	r3, #30768	; 0x7830
		*buf++ = 'x';
    e09c:	f10d 086e 	add.w	r8, sp, #110	; 0x6e
		*buf++ = '0';
    e0a0:	f8ad 306c 	strh.w	r3, [sp, #108]	; 0x6c
	len = _to_x(buf, value, 16);
    e0a4:	2210      	movs	r2, #16
    e0a6:	4640      	mov	r0, r8
    e0a8:	f00b fc4e 	bl	19948 <_to_x>
	if (prefix == 'X') {
    e0ac:	2c58      	cmp	r4, #88	; 0x58
    e0ae:	d009      	beq.n	e0c4 <z_prf+0x838>
	return len + (buf - buf0);
    e0b0:	ae1b      	add	r6, sp, #108	; 0x6c
    e0b2:	eba8 0606 	sub.w	r6, r8, r6
    e0b6:	4406      	add	r6, r0
						prefix = 2;
    e0b8:	ea4f 074b 	mov.w	r7, fp, lsl #1
    e0bc:	e4ee      	b.n	da9c <z_prf+0x210>
	if (alt_form) {
    e0be:	f10d 086c 	add.w	r8, sp, #108	; 0x6c
    e0c2:	e7ef      	b.n	e0a4 <z_prf+0x818>
	if (prefix == 'X') {
    e0c4:	aa1b      	add	r2, sp, #108	; 0x6c
		if (*buf >= 'a' && *buf <= 'z') {
    e0c6:	7813      	ldrb	r3, [r2, #0]
    e0c8:	f1a3 0161 	sub.w	r1, r3, #97	; 0x61
    e0cc:	2919      	cmp	r1, #25
			*buf += 'A' - 'a';
    e0ce:	bf9c      	itt	ls
    e0d0:	3b20      	subls	r3, #32
    e0d2:	7013      	strbls	r3, [r2, #0]
	} while (*buf++);
    e0d4:	f812 3b01 	ldrb.w	r3, [r2], #1
    e0d8:	2b00      	cmp	r3, #0
    e0da:	d1f4      	bne.n	e0c6 <z_prf+0x83a>
    e0dc:	e7e8      	b.n	e0b0 <z_prf+0x824>
				PUTC('%');
    e0de:	9903      	ldr	r1, [sp, #12]
    e0e0:	4620      	mov	r0, r4
    e0e2:	f7ff bbe4 	b.w	d8ae <z_prf+0x22>
				count++;
    e0e6:	9b01      	ldr	r3, [sp, #4]
    e0e8:	3301      	adds	r3, #1
				count += 2;
    e0ea:	9301      	str	r3, [sp, #4]
				continue;
    e0ec:	46b1      	mov	r9, r6
    e0ee:	e7a1      	b.n	e034 <z_prf+0x7a8>
					prefix = 1;
    e0f0:	2701      	movs	r7, #1
    e0f2:	e4d3      	b.n	da9c <z_prf+0x210>
    e0f4:	4615      	mov	r5, r2
    e0f6:	e4eb      	b.n	dad0 <z_prf+0x244>
			cptr = buf;
    e0f8:	ab1b      	add	r3, sp, #108	; 0x6c
				zero_head = 0;
    e0fa:	2200      	movs	r2, #0
    e0fc:	e4fa      	b.n	daf4 <z_prf+0x268>
    e0fe:	ab1b      	add	r3, sp, #108	; 0x6c
    e100:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    e102:	e4f7      	b.n	daf4 <z_prf+0x268>
    e104:	e9cd 3209 	strd	r3, r2, [sp, #36]	; 0x24
					PUTC(' ');
    e108:	9903      	ldr	r1, [sp, #12]
    e10a:	9b02      	ldr	r3, [sp, #8]
    e10c:	2020      	movs	r0, #32
    e10e:	4798      	blx	r3
    e110:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
    e114:	3001      	adds	r0, #1
    e116:	f43f abcf 	beq.w	d8b8 <z_prf+0x2c>
				while (width-- > 0) {
    e11a:	f11a 3aff 	adds.w	sl, sl, #4294967295
    e11e:	d2f1      	bcs.n	e104 <z_prf+0x878>
				count += width;
    e120:	9901      	ldr	r1, [sp, #4]
    e122:	4421      	add	r1, r4
    e124:	9101      	str	r1, [sp, #4]
				while (width-- > 0) {
    e126:	4654      	mov	r4, sl
    e128:	e4ee      	b.n	db08 <z_prf+0x27c>
    e12a:	46a2      	mov	sl, r4
    e12c:	e7f5      	b.n	e11a <z_prf+0x88e>
    e12e:	bf00      	nop
    e130:	33333332 	.word	0x33333332
				PUTC(*cptr++);
    e134:	f813 0b01 	ldrb.w	r0, [r3], #1
    e138:	9903      	ldr	r1, [sp, #12]
    e13a:	9309      	str	r3, [sp, #36]	; 0x24
    e13c:	9b02      	ldr	r3, [sp, #8]
    e13e:	920a      	str	r2, [sp, #40]	; 0x28
    e140:	4798      	blx	r3
    e142:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
    e146:	3001      	adds	r0, #1
    e148:	f47f ace0 	bne.w	db0c <z_prf+0x280>
    e14c:	f7ff bbb4 	b.w	d8b8 <z_prf+0x2c>
				PUTC('0');
    e150:	9903      	ldr	r1, [sp, #12]
    e152:	2030      	movs	r0, #48	; 0x30
    e154:	9b02      	ldr	r3, [sp, #8]
    e156:	9209      	str	r2, [sp, #36]	; 0x24
    e158:	4798      	blx	r3
    e15a:	3001      	adds	r0, #1
    e15c:	9a09      	ldr	r2, [sp, #36]	; 0x24
    e15e:	f47f acd8 	bne.w	db12 <z_prf+0x286>
    e162:	f7ff bba9 	b.w	d8b8 <z_prf+0x2c>
					PUTC(c);
    e166:	e9dd 3102 	ldrd	r3, r1, [sp, #8]
    e16a:	4798      	blx	r3
    e16c:	3001      	adds	r0, #1
    e16e:	f43f aba3 	beq.w	d8b8 <z_prf+0x2c>
					c = *++cptr;
    e172:	f81a 0f01 	ldrb.w	r0, [sl, #1]!
    e176:	e4d8      	b.n	db2a <z_prf+0x29e>
					PUTC('0');
    e178:	9903      	ldr	r1, [sp, #12]
    e17a:	2030      	movs	r0, #48	; 0x30
    e17c:	9b02      	ldr	r3, [sp, #8]
    e17e:	4798      	blx	r3
    e180:	3001      	adds	r0, #1
    e182:	f47f acda 	bne.w	db3a <z_prf+0x2ae>
    e186:	f7ff bb97 	b.w	d8b8 <z_prf+0x2c>
					PUTC('0');
    e18a:	9903      	ldr	r1, [sp, #12]
    e18c:	2030      	movs	r0, #48	; 0x30
    e18e:	9b02      	ldr	r3, [sp, #8]
    e190:	4798      	blx	r3
    e192:	3001      	adds	r0, #1
    e194:	f107 37ff 	add.w	r7, r7, #4294967295
    e198:	f47f ace9 	bne.w	db6e <z_prf+0x2e2>
    e19c:	f7ff bb8c 	b.w	d8b8 <z_prf+0x2c>
					PUTC(c);
    e1a0:	e9dd 3102 	ldrd	r3, r1, [sp, #8]
    e1a4:	4798      	blx	r3
    e1a6:	3001      	adds	r0, #1
    e1a8:	f43f ab86 	beq.w	d8b8 <z_prf+0x2c>
					c = *++cptr;
    e1ac:	f81a 0f01 	ldrb.w	r0, [sl, #1]!
    e1b0:	e4e7      	b.n	db82 <z_prf+0x2f6>
					PUTC('0');
    e1b2:	9903      	ldr	r1, [sp, #12]
    e1b4:	2030      	movs	r0, #48	; 0x30
    e1b6:	9b02      	ldr	r3, [sp, #8]
    e1b8:	4798      	blx	r3
    e1ba:	3001      	adds	r0, #1
    e1bc:	f107 37ff 	add.w	r7, r7, #4294967295
    e1c0:	f47f acea 	bne.w	db98 <z_prf+0x30c>
    e1c4:	f7ff bb78 	b.w	d8b8 <z_prf+0x2c>
				PUTC(*cptr++);
    e1c8:	9903      	ldr	r1, [sp, #12]
    e1ca:	f81a 0b01 	ldrb.w	r0, [sl], #1
    e1ce:	9b02      	ldr	r3, [sp, #8]
    e1d0:	4798      	blx	r3
    e1d2:	3001      	adds	r0, #1
    e1d4:	f43f ab70 	beq.w	d8b8 <z_prf+0x2c>
    e1d8:	eba6 030a 	sub.w	r3, r6, sl
			while (clen-- > 0) {
    e1dc:	2b00      	cmp	r3, #0
    e1de:	dcf3      	bgt.n	e1c8 <z_prf+0x93c>
			count += clen;
    e1e0:	9b01      	ldr	r3, [sp, #4]
    e1e2:	9a06      	ldr	r2, [sp, #24]
			if (width > 0) {
    e1e4:	2c00      	cmp	r4, #0
			count += clen;
    e1e6:	4413      	add	r3, r2
    e1e8:	9301      	str	r3, [sp, #4]
			if (width > 0) {
    e1ea:	f77f af23 	ble.w	e034 <z_prf+0x7a8>
    e1ee:	4625      	mov	r5, r4
    e1f0:	e006      	b.n	e200 <z_prf+0x974>
					PUTC(' ');
    e1f2:	9903      	ldr	r1, [sp, #12]
    e1f4:	2020      	movs	r0, #32
    e1f6:	9b02      	ldr	r3, [sp, #8]
    e1f8:	4798      	blx	r3
    e1fa:	3001      	adds	r0, #1
    e1fc:	f43f ab5c 	beq.w	d8b8 <z_prf+0x2c>
				while (width-- > 0) {
    e200:	f115 35ff 	adds.w	r5, r5, #4294967295
    e204:	d2f5      	bcs.n	e1f2 <z_prf+0x966>
				count += width;
    e206:	9b01      	ldr	r3, [sp, #4]
    e208:	4423      	add	r3, r4
    e20a:	9301      	str	r3, [sp, #4]
    e20c:	e712      	b.n	e034 <z_prf+0x7a8>
    e20e:	bf00      	nop

0000e210 <snprintf>:
	return 0; /* indicate keep going so we get the total count */
}

int snprintf(char *_MLIBC_RESTRICT s, size_t len,
	     const char *_MLIBC_RESTRICT format, ...)
{
    e210:	b40c      	push	{r2, r3}
    e212:	b51f      	push	{r0, r1, r2, r3, r4, lr}

	struct emitter p;
	int     r;
	char    dummy;

	if (len == 0) {
    e214:	b909      	cbnz	r1, e21a <snprintf+0xa>
		s = &dummy; /* write final NUL to dummy, can't change *s */
    e216:	f10d 0003 	add.w	r0, sp, #3
	}

	p.ptr = s;
	p.len = (int) len;
    e21a:	e9cd 0102 	strd	r0, r1, [sp, #8]

	va_start(vargs, format);
    e21e:	ab07      	add	r3, sp, #28
	r = z_prf(sprintf_out, (void *) (&p), format, vargs);
    e220:	9a06      	ldr	r2, [sp, #24]
    e222:	a902      	add	r1, sp, #8
    e224:	4805      	ldr	r0, [pc, #20]	; (e23c <snprintf+0x2c>)
	va_start(vargs, format);
    e226:	9301      	str	r3, [sp, #4]
	r = z_prf(sprintf_out, (void *) (&p), format, vargs);
    e228:	f7ff fb30 	bl	d88c <z_prf>
	va_end(vargs);

	*(p.ptr) = 0;
    e22c:	2200      	movs	r2, #0
    e22e:	9b02      	ldr	r3, [sp, #8]
    e230:	701a      	strb	r2, [r3, #0]
	return r;
}
    e232:	b005      	add	sp, #20
    e234:	f85d eb04 	ldr.w	lr, [sp], #4
    e238:	b002      	add	sp, #8
    e23a:	4770      	bx	lr
    e23c:	00019a33 	.word	0x00019a33

0000e240 <net_if_flag_is_set>:
 *
 * @return True if the value is set, false otherwise
 */
static inline bool net_if_flag_is_set(struct net_if *iface,
				      enum net_if_flag value)
{
    e240:	b538      	push	{r3, r4, r5, lr}
    e242:	460d      	mov	r5, r1
	NET_ASSERT(iface);
    e244:	4604      	mov	r4, r0
    e246:	b970      	cbnz	r0, e266 <net_if_flag_is_set+0x26>
    e248:	490b      	ldr	r1, [pc, #44]	; (e278 <net_if_flag_is_set+0x38>)
    e24a:	f240 2311 	movw	r3, #529	; 0x211
    e24e:	4a0b      	ldr	r2, [pc, #44]	; (e27c <net_if_flag_is_set+0x3c>)
    e250:	480b      	ldr	r0, [pc, #44]	; (e280 <net_if_flag_is_set+0x40>)
    e252:	f00b f9aa 	bl	195aa <printk>
    e256:	480b      	ldr	r0, [pc, #44]	; (e284 <net_if_flag_is_set+0x44>)
    e258:	f00b f9a7 	bl	195aa <printk>
    e25c:	f240 2111 	movw	r1, #529	; 0x211
    e260:	4806      	ldr	r0, [pc, #24]	; (e27c <net_if_flag_is_set+0x3c>)
    e262:	f00b f9b9 	bl	195d8 <assert_post_action>
 * @return Value of @a target.
 */
#ifdef CONFIG_ATOMIC_OPERATIONS_BUILTIN
static inline atomic_val_t atomic_get(const atomic_t *target)
{
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    e266:	6823      	ldr	r3, [r4, #0]
    e268:	330c      	adds	r3, #12
    e26a:	e8d3 0faf 	lda	r0, [r3]
 */
static inline bool atomic_test_bit(const atomic_t *target, int bit)
{
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));

	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
    e26e:	4128      	asrs	r0, r5

	return atomic_test_bit(iface->if_dev->flags, value);
}
    e270:	f000 0001 	and.w	r0, r0, #1
    e274:	bd38      	pop	{r3, r4, r5, pc}
    e276:	bf00      	nop
    e278:	0001b2e4 	.word	0x0001b2e4
    e27c:	0001b2bc 	.word	0x0001b2bc
    e280:	0001ac45 	.word	0x0001ac45
    e284:	0001b2ea 	.word	0x0001b2ea

0000e288 <net_if_flag_set.constprop.24>:
static inline void net_if_flag_set(struct net_if *iface,
    e288:	b510      	push	{r4, lr}
	NET_ASSERT(iface);
    e28a:	4604      	mov	r4, r0
    e28c:	b970      	cbnz	r0, e2ac <net_if_flag_set.constprop.24+0x24>
    e28e:	490d      	ldr	r1, [pc, #52]	; (e2c4 <net_if_flag_set.constprop.24+0x3c>)
    e290:	f240 13e3 	movw	r3, #483	; 0x1e3
    e294:	4a0c      	ldr	r2, [pc, #48]	; (e2c8 <net_if_flag_set.constprop.24+0x40>)
    e296:	480d      	ldr	r0, [pc, #52]	; (e2cc <net_if_flag_set.constprop.24+0x44>)
    e298:	f00b f987 	bl	195aa <printk>
    e29c:	480c      	ldr	r0, [pc, #48]	; (e2d0 <net_if_flag_set.constprop.24+0x48>)
    e29e:	f00b f984 	bl	195aa <printk>
    e2a2:	f240 11e3 	movw	r1, #483	; 0x1e3
    e2a6:	4808      	ldr	r0, [pc, #32]	; (e2c8 <net_if_flag_set.constprop.24+0x40>)
    e2a8:	f00b f996 	bl	195d8 <assert_post_action>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    e2ac:	6823      	ldr	r3, [r4, #0]
    e2ae:	330c      	adds	r3, #12
    e2b0:	e8d3 2fef 	ldaex	r2, [r3]
    e2b4:	f042 0201 	orr.w	r2, r2, #1
    e2b8:	e8c3 2fe1 	stlex	r1, r2, [r3]
    e2bc:	2900      	cmp	r1, #0
    e2be:	d1f7      	bne.n	e2b0 <net_if_flag_set.constprop.24+0x28>
}
    e2c0:	bd10      	pop	{r4, pc}
    e2c2:	bf00      	nop
    e2c4:	0001b2e4 	.word	0x0001b2e4
    e2c8:	0001b2bc 	.word	0x0001b2bc
    e2cc:	0001ac45 	.word	0x0001ac45
    e2d0:	0001b2ea 	.word	0x0001b2ea

0000e2d4 <net_if_up>:
		cb(iface, user_data);
	}
}

int net_if_up(struct net_if *iface)
{
    e2d4:	b538      	push	{r3, r4, r5, lr}
	int status;

	NET_DBG("iface %p", iface);

	if (net_if_flag_is_set(iface, NET_IF_UP)) {
    e2d6:	2100      	movs	r1, #0
{
    e2d8:	4605      	mov	r5, r0
	if (net_if_flag_is_set(iface, NET_IF_UP)) {
    e2da:	f7ff ffb1 	bl	e240 <net_if_flag_is_set>
    e2de:	b928      	cbnz	r0, e2ec <net_if_up+0x18>
 * @return True if socket offloading is active, false otherwise.
 */
static inline bool net_if_is_socket_offloaded(struct net_if *iface)
{
#if defined(CONFIG_NET_SOCKETS_OFFLOAD)
	return iface->if_dev->offloaded;
    e2e0:	682b      	ldr	r3, [r5, #0]

	if ((IS_ENABLED(CONFIG_NET_OFFLOAD) &&
	     net_if_is_ip_offloaded(iface)) ||
	    (IS_ENABLED(CONFIG_NET_SOCKETS_OFFLOAD) &&
	     net_if_is_socket_offloaded(iface))) {
		net_if_flag_set(iface, NET_IF_UP);
    e2e2:	4628      	mov	r0, r5
	if ((IS_ENABLED(CONFIG_NET_OFFLOAD) &&
    e2e4:	7e9b      	ldrb	r3, [r3, #26]
    e2e6:	b11b      	cbz	r3, e2f0 <net_if_up+0x1c>
		net_if_flag_set(iface, NET_IF_UP);
    e2e8:	f7ff ffce 	bl	e288 <net_if_flag_set.constprop.24>
		return 0;
    e2ec:	2000      	movs	r0, #0
    e2ee:	e023      	b.n	e338 <net_if_up+0x64>
		goto exit;
	}

	/* If the L2 does not support enable just set the flag */
	if (!net_if_l2(iface) || !net_if_l2(iface)->enable) {
    e2f0:	f00b fbb3 	bl	19a5a <net_if_l2>
    e2f4:	b9c0      	cbnz	r0, e328 <net_if_up+0x54>

done:
	/* In many places it's assumed that link address was set with
	 * net_if_set_link_addr(). Better check that now.
	 */
	NET_ASSERT(net_if_get_link_addr(iface)->addr != NULL);
    e2f6:	682b      	ldr	r3, [r5, #0]
    e2f8:	691b      	ldr	r3, [r3, #16]
    e2fa:	b973      	cbnz	r3, e31a <net_if_up+0x46>
    e2fc:	490f      	ldr	r1, [pc, #60]	; (e33c <net_if_up+0x68>)
    e2fe:	f640 538f 	movw	r3, #3471	; 0xd8f
    e302:	4a0f      	ldr	r2, [pc, #60]	; (e340 <net_if_up+0x6c>)
    e304:	480f      	ldr	r0, [pc, #60]	; (e344 <net_if_up+0x70>)
    e306:	f00b f950 	bl	195aa <printk>
    e30a:	480f      	ldr	r0, [pc, #60]	; (e348 <net_if_up+0x74>)
    e30c:	f00b f94d 	bl	195aa <printk>
    e310:	f640 518f 	movw	r1, #3471	; 0xd8f
    e314:	480a      	ldr	r0, [pc, #40]	; (e340 <net_if_up+0x6c>)
    e316:	f00b f95f 	bl	195d8 <assert_post_action>

	net_if_flag_set(iface, NET_IF_UP);
    e31a:	4628      	mov	r0, r5
    e31c:	f7ff ffb4 	bl	e288 <net_if_flag_set.constprop.24>

	/* If the interface is only having point-to-point traffic then we do
	 * not need to run DAD etc for it.
	 */
	if (!(l2_flags_get(iface) & NET_L2_POINT_TO_POINT)) {
    e320:	4628      	mov	r0, r5
    e322:	f00b fb9f 	bl	19a64 <l2_flags_get>
    e326:	e7e1      	b.n	e2ec <net_if_up+0x18>
	if (!net_if_l2(iface) || !net_if_l2(iface)->enable) {
    e328:	6883      	ldr	r3, [r0, #8]
    e32a:	2b00      	cmp	r3, #0
    e32c:	d0e3      	beq.n	e2f6 <net_if_up+0x22>
	status = net_if_l2(iface)->enable(iface, true);
    e32e:	2101      	movs	r1, #1
    e330:	4628      	mov	r0, r5
    e332:	4798      	blx	r3
	if (status < 0) {
    e334:	2800      	cmp	r0, #0
    e336:	dade      	bge.n	e2f6 <net_if_up+0x22>

exit:
	net_mgmt_event_notify(NET_EVENT_IF_UP, iface);

	return 0;
}
    e338:	bd38      	pop	{r3, r4, r5, pc}
    e33a:	bf00      	nop
    e33c:	0001b2ed 	.word	0x0001b2ed
    e340:	0001b31e 	.word	0x0001b31e
    e344:	0001ac45 	.word	0x0001ac45
    e348:	0001b2ea 	.word	0x0001b2ea

0000e34c <net_if_init>:
	k_fifo_put(&tx_ts_queue, pkt);
}
#endif /* CONFIG_NET_PKT_TIMESTAMP_THREAD */

void net_if_init(void)
{
    e34c:	b538      	push	{r3, r4, r5, lr}

	NET_DBG("");

	net_tc_tx_init();

	for (iface = __net_if_start, if_count = 0; iface != __net_if_end;
    e34e:	4c07      	ldr	r4, [pc, #28]	; (e36c <net_if_init+0x20>)
    e350:	4d07      	ldr	r5, [pc, #28]	; (e370 <net_if_init+0x24>)
    e352:	42ac      	cmp	r4, r5
    e354:	d100      	bne.n	e358 <net_if_init+0xc>
		NET_WARN("You have configured only %d VLAN interfaces"
			 " but you have %d network interfaces.",
			 CONFIG_NET_VLAN_COUNT, if_count);
	}
#endif
}
    e356:	bd38      	pop	{r3, r4, r5, pc}
	return iface->if_dev->dev;
    e358:	6823      	ldr	r3, [r4, #0]
	const struct net_if_api *api = net_if_get_device(iface)->driver_api;
    e35a:	681b      	ldr	r3, [r3, #0]
    e35c:	685b      	ldr	r3, [r3, #4]
	if (!api || !api->init) {
    e35e:	b11b      	cbz	r3, e368 <net_if_init+0x1c>
    e360:	681b      	ldr	r3, [r3, #0]
    e362:	b10b      	cbz	r3, e368 <net_if_init+0x1c>
	api->init(iface);
    e364:	4620      	mov	r0, r4
    e366:	4798      	blx	r3
	     iface++, if_count++) {
    e368:	3420      	adds	r4, #32
    e36a:	e7f2      	b.n	e352 <net_if_init+0x6>
    e36c:	20026140 	.word	0x20026140
    e370:	20026160 	.word	0x20026160

0000e374 <net_if_post_init>:

void net_if_post_init(void)
{
    e374:	b538      	push	{r3, r4, r5, lr}
	struct net_if *iface;

	NET_DBG("");

	/* After TX is running, attempt to bring the interface up */
	for (iface = __net_if_start; iface != __net_if_end; iface++) {
    e376:	4c07      	ldr	r4, [pc, #28]	; (e394 <net_if_post_init+0x20>)
    e378:	4d07      	ldr	r5, [pc, #28]	; (e398 <net_if_post_init+0x24>)
    e37a:	42ac      	cmp	r4, r5
    e37c:	d100      	bne.n	e380 <net_if_post_init+0xc>
		if (!net_if_flag_is_set(iface, NET_IF_NO_AUTO_START)) {
			net_if_up(iface);
		}
	}
}
    e37e:	bd38      	pop	{r3, r4, r5, pc}
		if (!net_if_flag_is_set(iface, NET_IF_NO_AUTO_START)) {
    e380:	2103      	movs	r1, #3
    e382:	4620      	mov	r0, r4
    e384:	f7ff ff5c 	bl	e240 <net_if_flag_is_set>
    e388:	b910      	cbnz	r0, e390 <net_if_post_init+0x1c>
			net_if_up(iface);
    e38a:	4620      	mov	r0, r4
    e38c:	f7ff ffa2 	bl	e2d4 <net_if_up>
	for (iface = __net_if_start; iface != __net_if_end; iface++) {
    e390:	3420      	adds	r4, #32
    e392:	e7f2      	b.n	e37a <net_if_post_init+0x6>
    e394:	20026140 	.word	0x20026140
    e398:	20026160 	.word	0x20026160

0000e39c <gpio_nrfx_manage_callback>:
}

static int gpio_nrfx_manage_callback(struct device *port,
				     struct gpio_callback *callback,
				     bool set)
{
    e39c:	b570      	push	{r4, r5, r6, lr}
    e39e:	4616      	mov	r6, r2
	return gpio_manage_callback(&get_port_data(port)->callbacks,
    e3a0:	6884      	ldr	r4, [r0, #8]
 */
static inline int gpio_manage_callback(sys_slist_t *callbacks,
					struct gpio_callback *callback,
					bool set)
{
	__ASSERT(callback, "No callback!");
    e3a2:	460d      	mov	r5, r1
    e3a4:	b961      	cbnz	r1, e3c0 <gpio_nrfx_manage_callback+0x24>
    e3a6:	4922      	ldr	r1, [pc, #136]	; (e430 <gpio_nrfx_manage_callback+0x94>)
    e3a8:	231c      	movs	r3, #28
    e3aa:	4a22      	ldr	r2, [pc, #136]	; (e434 <gpio_nrfx_manage_callback+0x98>)
    e3ac:	4822      	ldr	r0, [pc, #136]	; (e438 <gpio_nrfx_manage_callback+0x9c>)
    e3ae:	f00b f8fc 	bl	195aa <printk>
    e3b2:	4822      	ldr	r0, [pc, #136]	; (e43c <gpio_nrfx_manage_callback+0xa0>)
    e3b4:	f00b f8f9 	bl	195aa <printk>
    e3b8:	211c      	movs	r1, #28
    e3ba:	481e      	ldr	r0, [pc, #120]	; (e434 <gpio_nrfx_manage_callback+0x98>)
    e3bc:	f00b f90c 	bl	195d8 <assert_post_action>
	__ASSERT(callback->handler, "No callback handler!");
    e3c0:	686b      	ldr	r3, [r5, #4]
    e3c2:	b963      	cbnz	r3, e3de <gpio_nrfx_manage_callback+0x42>
    e3c4:	491e      	ldr	r1, [pc, #120]	; (e440 <gpio_nrfx_manage_callback+0xa4>)
    e3c6:	231d      	movs	r3, #29
    e3c8:	4a1a      	ldr	r2, [pc, #104]	; (e434 <gpio_nrfx_manage_callback+0x98>)
    e3ca:	481b      	ldr	r0, [pc, #108]	; (e438 <gpio_nrfx_manage_callback+0x9c>)
    e3cc:	f00b f8ed 	bl	195aa <printk>
    e3d0:	481c      	ldr	r0, [pc, #112]	; (e444 <gpio_nrfx_manage_callback+0xa8>)
    e3d2:	f00b f8ea 	bl	195aa <printk>
    e3d6:	211d      	movs	r1, #29
    e3d8:	4816      	ldr	r0, [pc, #88]	; (e434 <gpio_nrfx_manage_callback+0x98>)
    e3da:	f00b f8fd 	bl	195d8 <assert_post_action>
Z_GENLIST_IS_EMPTY(slist)
    e3de:	6823      	ldr	r3, [r4, #0]

	if (!sys_slist_is_empty(callbacks)) {
    e3e0:	b15b      	cbz	r3, e3fa <gpio_nrfx_manage_callback+0x5e>
 * @return true if node was removed
 */
static inline bool sys_slist_find_and_remove(sys_slist_t *list,
					     sys_snode_t *node);

Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    e3e2:	2200      	movs	r2, #0
    e3e4:	429d      	cmp	r5, r3
    e3e6:	d113      	bne.n	e410 <gpio_nrfx_manage_callback+0x74>
Z_GENLIST_REMOVE(slist, snode)
    e3e8:	682b      	ldr	r3, [r5, #0]
    e3ea:	b95a      	cbnz	r2, e404 <gpio_nrfx_manage_callback+0x68>
    e3ec:	6862      	ldr	r2, [r4, #4]
	list->head = node;
    e3ee:	6023      	str	r3, [r4, #0]
Z_GENLIST_REMOVE(slist, snode)
    e3f0:	4295      	cmp	r5, r2
    e3f2:	d100      	bne.n	e3f6 <gpio_nrfx_manage_callback+0x5a>
	list->tail = node;
    e3f4:	6063      	str	r3, [r4, #4]
	parent->next = child;
    e3f6:	2300      	movs	r3, #0
    e3f8:	602b      	str	r3, [r5, #0]
				return -EINVAL;
			}
		}
	}

	if (set) {
    e3fa:	b976      	cbnz	r6, e41a <gpio_nrfx_manage_callback+0x7e>
		sys_slist_prepend(callbacks, &callback->node);
	}

	return 0;
    e3fc:	2000      	movs	r0, #0
				     callback, set);
}
    e3fe:	bd70      	pop	{r4, r5, r6, pc}
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    e400:	460b      	mov	r3, r1
    e402:	e7ef      	b.n	e3e4 <gpio_nrfx_manage_callback+0x48>
	parent->next = child;
    e404:	6013      	str	r3, [r2, #0]
Z_GENLIST_REMOVE(slist, snode)
    e406:	6863      	ldr	r3, [r4, #4]
    e408:	429d      	cmp	r5, r3
	list->tail = node;
    e40a:	bf08      	it	eq
    e40c:	6062      	streq	r2, [r4, #4]
    e40e:	e7f2      	b.n	e3f6 <gpio_nrfx_manage_callback+0x5a>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
    e410:	6819      	ldr	r1, [r3, #0]
	return node->next;
    e412:	461a      	mov	r2, r3
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    e414:	2900      	cmp	r1, #0
    e416:	d1f3      	bne.n	e400 <gpio_nrfx_manage_callback+0x64>
			if (!set) {
    e418:	b13e      	cbz	r6, e42a <gpio_nrfx_manage_callback+0x8e>
Z_GENLIST_PREPEND(slist, snode)
    e41a:	6823      	ldr	r3, [r4, #0]
	parent->next = child;
    e41c:	602b      	str	r3, [r5, #0]
Z_GENLIST_PREPEND(slist, snode)
    e41e:	6860      	ldr	r0, [r4, #4]
	list->head = node;
    e420:	6025      	str	r5, [r4, #0]
Z_GENLIST_PREPEND(slist, snode)
    e422:	2800      	cmp	r0, #0
    e424:	d1ea      	bne.n	e3fc <gpio_nrfx_manage_callback+0x60>
	list->tail = node;
    e426:	6065      	str	r5, [r4, #4]
    e428:	e7e9      	b.n	e3fe <gpio_nrfx_manage_callback+0x62>
				return -EINVAL;
    e42a:	f06f 0015 	mvn.w	r0, #21
	return gpio_manage_callback(&get_port_data(port)->callbacks,
    e42e:	e7e6      	b.n	e3fe <gpio_nrfx_manage_callback+0x62>
    e430:	0001b375 	.word	0x0001b375
    e434:	0001b348 	.word	0x0001b348
    e438:	0001ac45 	.word	0x0001ac45
    e43c:	0001b37e 	.word	0x0001b37e
    e440:	0001b38d 	.word	0x0001b38d
    e444:	0001b39f 	.word	0x0001b39f

0000e448 <nrf_gpio_pin_port_decode.isra.8.part.9>:
 *
 * @param[in,out] p_pin Pointer to the absolute pin number overriden by the pin number that is relative to the port.
 *
 * @return Pointer to port register set.
 */
NRF_STATIC_INLINE NRF_GPIO_Type * nrf_gpio_pin_port_decode(uint32_t * p_pin)
    e448:	b510      	push	{r4, lr}
{
    NRFX_ASSERT(*p_pin < NUMBER_OF_PINS);
    e44a:	4c07      	ldr	r4, [pc, #28]	; (e468 <nrf_gpio_pin_port_decode.isra.8.part.9+0x20>)
    e44c:	4907      	ldr	r1, [pc, #28]	; (e46c <nrf_gpio_pin_port_decode.isra.8.part.9+0x24>)
    e44e:	4622      	mov	r2, r4
    e450:	4807      	ldr	r0, [pc, #28]	; (e470 <nrf_gpio_pin_port_decode.isra.8.part.9+0x28>)
    e452:	f240 13ff 	movw	r3, #511	; 0x1ff
    e456:	f00b f8a8 	bl	195aa <printk>
    e45a:	4620      	mov	r0, r4
    {
        *p_pin = *p_pin & (P0_PIN_NUM - 1);
        return NRF_P1;
    }
#endif
}
    e45c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    NRFX_ASSERT(*p_pin < NUMBER_OF_PINS);
    e460:	f240 11ff 	movw	r1, #511	; 0x1ff
    e464:	f00b b8b8 	b.w	195d8 <assert_post_action>
    e468:	0001b3ee 	.word	0x0001b3ee
    e46c:	0001b421 	.word	0x0001b421
    e470:	0001ac45 	.word	0x0001ac45

0000e474 <nrf_gpio_cfg_sense_set>:
    e474:	281f      	cmp	r0, #31
}


NRF_STATIC_INLINE void nrf_gpio_cfg_sense_set(uint32_t             pin_number,
                                              nrf_gpio_pin_sense_t sense_config)
{
    e476:	b538      	push	{r3, r4, r5, lr}
    e478:	4604      	mov	r4, r0
    e47a:	460d      	mov	r5, r1
    NRFX_ASSERT(*p_pin < NUMBER_OF_PINS);
    e47c:	d901      	bls.n	e482 <nrf_gpio_cfg_sense_set+0xe>
    e47e:	f7ff ffe3 	bl	e448 <nrf_gpio_pin_port_decode.isra.8.part.9>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    /*lint -e{845} // A zero has been given as right argument to operator '|'" */
    uint32_t cnf = reg->PIN_CNF[pin_number] & ~GPIO_PIN_CNF_SENSE_Msk;
    e482:	4806      	ldr	r0, [pc, #24]	; (e49c <nrf_gpio_cfg_sense_set+0x28>)
    e484:	eb00 0084 	add.w	r0, r0, r4, lsl #2
    e488:	f8d0 3200 	ldr.w	r3, [r0, #512]	; 0x200
    e48c:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000

    reg->PIN_CNF[pin_number] = cnf | (sense_config << GPIO_PIN_CNF_SENSE_Pos);
    e490:	ea43 4305 	orr.w	r3, r3, r5, lsl #16
    e494:	f8c0 3200 	str.w	r3, [r0, #512]	; 0x200
}
    e498:	bd38      	pop	{r3, r4, r5, pc}
    e49a:	bf00      	nop
    e49c:	40842500 	.word	0x40842500

0000e4a0 <gpio_nrfx_init>:
#endif
	}
}

static int gpio_nrfx_init(struct device *port)
{
    e4a0:	b508      	push	{r3, lr}
	static bool gpio_initialized;

	if (!gpio_initialized) {
    e4a2:	4b09      	ldr	r3, [pc, #36]	; (e4c8 <gpio_nrfx_init+0x28>)
    e4a4:	781a      	ldrb	r2, [r3, #0]
    e4a6:	b96a      	cbnz	r2, e4c4 <gpio_nrfx_init+0x24>
		gpio_initialized = true;
    e4a8:	2101      	movs	r1, #1
		IRQ_CONNECT(DT_NORDIC_NRF_GPIOTE_GPIOTE_0_IRQ_0,
    e4aa:	2031      	movs	r0, #49	; 0x31
		gpio_initialized = true;
    e4ac:	7019      	strb	r1, [r3, #0]
		IRQ_CONNECT(DT_NORDIC_NRF_GPIOTE_GPIOTE_0_IRQ_0,
    e4ae:	2105      	movs	r1, #5
    e4b0:	f7fe fd7e 	bl	cfb0 <z_arm_irq_priority_set>
			    DT_NORDIC_NRF_GPIOTE_GPIOTE_0_IRQ_0_PRIORITY,
			    gpiote_event_handler, NULL, 0);

		irq_enable(DT_NORDIC_NRF_GPIOTE_GPIOTE_0_IRQ_0);
    e4b4:	2031      	movs	r0, #49	; 0x31
    e4b6:	f7fe fd6b 	bl	cf90 <arch_irq_enable>
    return ((uint32_t)p_reg + event);
}

NRF_STATIC_INLINE void nrf_gpiote_int_enable(NRF_GPIOTE_Type * p_reg, uint32_t mask)
{
    p_reg->INTENSET = mask;
    e4ba:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
    e4be:	4b03      	ldr	r3, [pc, #12]	; (e4cc <gpio_nrfx_init+0x2c>)
    e4c0:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
		nrf_gpiote_int_enable(NRF_GPIOTE, NRF_GPIOTE_INT_PORT_MASK);
	}

	return 0;
}
    e4c4:	2000      	movs	r0, #0
    e4c6:	bd08      	pop	{r3, pc}
    e4c8:	200249cb 	.word	0x200249cb
    e4cc:	40031000 	.word	0x40031000

0000e4d0 <gpiote_pin_int_cfg>:
{
    e4d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	return port->config->config_info;
    e4d4:	6803      	ldr	r3, [r0, #0]
	u32_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
    e4d6:	f001 041f 	and.w	r4, r1, #31
    e4da:	689b      	ldr	r3, [r3, #8]
{
    e4dc:	460d      	mov	r5, r1
	u32_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
    e4de:	791b      	ldrb	r3, [r3, #4]
    p_reg->INTENCLR = mask;
}

NRF_STATIC_INLINE uint32_t nrf_gpiote_int_enable_check(NRF_GPIOTE_Type const * p_reg, uint32_t mask)
{
    return p_reg->INTENSET & mask;
    e4e0:	4e4b      	ldr	r6, [pc, #300]	; (e610 <gpiote_pin_int_cfg+0x140>)
    e4e2:	ea44 1443 	orr.w	r4, r4, r3, lsl #5
	for (size_t i = 0; i < GPIOTE_CH_NUM; i++) {
    e4e6:	2300      	movs	r3, #0
    e4e8:	f8d6 2304 	ldr.w	r2, [r6, #772]	; 0x304
	struct gpio_nrfx_data *data = get_port_data(port);
    e4ec:	6887      	ldr	r7, [r0, #8]
    e4ee:	b2d2      	uxtb	r2, r2
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk);
}

NRF_STATIC_INLINE uint32_t nrf_gpiote_event_pin_get(NRF_GPIOTE_Type const * p_reg, uint32_t idx)
{
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
    e4f0:	f503 71a2 	add.w	r1, r3, #324	; 0x144
    e4f4:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
    e4f8:	f3c1 2104 	ubfx	r1, r1, #8, #5
		if ((nrf_gpiote_event_pin_get(NRF_GPIOTE, i) == abs_pin)
    e4fc:	428c      	cmp	r4, r1
    e4fe:	d16c      	bne.n	e5da <gpiote_pin_int_cfg+0x10a>
		    && (intenset & BIT(i))) {
    e500:	fa22 f103 	lsr.w	r1, r2, r3
    e504:	07c9      	lsls	r1, r1, #31
    e506:	d568      	bpl.n	e5da <gpiote_pin_int_cfg+0x10a>
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Event;
    e508:	009a      	lsls	r2, r3, #2
    e50a:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
    e50e:	f502 3244 	add.w	r2, r2, #200704	; 0x31000
    e512:	f8d2 1510 	ldr.w	r1, [r2, #1296]	; 0x510
    e516:	f021 0101 	bic.w	r1, r1, #1
    e51a:	f8c2 1510 	str.w	r1, [r2, #1296]	; 0x510
			nrf_gpiote_int_disable(NRF_GPIOTE, BIT(i));
    e51e:	2201      	movs	r2, #1
    e520:	fa02 f303 	lsl.w	r3, r2, r3
    p_reg->INTENCLR = mask;
    e524:	f8c6 3308 	str.w	r3, [r6, #776]	; 0x308
	nrf_gpio_cfg_sense_set(abs_pin, NRF_GPIO_PIN_NOSENSE);
    e528:	4620      	mov	r0, r4
    e52a:	2100      	movs	r1, #0
    e52c:	f7ff ffa2 	bl	e474 <nrf_gpio_cfg_sense_set>
	if ((data->pin_int_en & BIT(pin)) && (data->int_en & BIT(pin))) {
    e530:	68b8      	ldr	r0, [r7, #8]
    e532:	40e8      	lsrs	r0, r5
    e534:	f010 0001 	ands.w	r0, r0, #1
    e538:	d04d      	beq.n	e5d6 <gpiote_pin_int_cfg+0x106>
    e53a:	68f8      	ldr	r0, [r7, #12]
    e53c:	40e8      	lsrs	r0, r5
    e53e:	f010 0001 	ands.w	r0, r0, #1
    e542:	d048      	beq.n	e5d6 <gpiote_pin_int_cfg+0x106>
		if (data->trig_edge & BIT(pin)) {
    e544:	6978      	ldr	r0, [r7, #20]
    e546:	40e8      	lsrs	r0, r5
    e548:	f010 0801 	ands.w	r8, r0, #1
    e54c:	d051      	beq.n	e5f2 <gpiote_pin_int_cfg+0x122>
			if (data->double_edge & BIT(pin)) {
    e54e:	69bb      	ldr	r3, [r7, #24]
    e550:	40eb      	lsrs	r3, r5
    e552:	07db      	lsls	r3, r3, #31
    e554:	d445      	bmi.n	e5e2 <gpiote_pin_int_cfg+0x112>
			} else if (((data->active_level & BIT(pin)) != 0U)
    e556:	693b      	ldr	r3, [r7, #16]
				   ^ ((BIT(pin) & data->inverted) != 0)) {
    e558:	69fa      	ldr	r2, [r7, #28]
			} else if (((data->active_level & BIT(pin)) != 0U)
    e55a:	40eb      	lsrs	r3, r5
				   ^ ((BIT(pin) & data->inverted) != 0)) {
    e55c:	fa22 f505 	lsr.w	r5, r2, r5
			} else if (((data->active_level & BIT(pin)) != 0U)
    e560:	f003 0301 	and.w	r3, r3, #1
    e564:	f005 0501 	and.w	r5, r5, #1
				pol = NRF_GPIOTE_POLARITY_HITOLO;
    e568:	42ab      	cmp	r3, r5
    e56a:	bf14      	ite	ne
    e56c:	2501      	movne	r5, #1
    e56e:	2502      	moveq	r5, #2
    e570:	2100      	movs	r1, #0
    p_reg->CONFIG[idx] = 0;
}

NRF_STATIC_INLINE bool nrf_gpiote_te_is_enabled(NRF_GPIOTE_Type const * p_reg, uint32_t idx)
{
    return (p_reg->CONFIG[idx] & GPIOTE_CONFIG_MODE_Msk) != GPIOTE_CONFIG_MODE_Disabled;
    e572:	f501 73a2 	add.w	r3, r1, #324	; 0x144
    e576:	f856 0023 	ldr.w	r0, [r6, r3, lsl #2]
		if (!nrf_gpiote_te_is_enabled(NRF_GPIOTE, channel)) {
    e57a:	f010 0003 	ands.w	r0, r0, #3
    e57e:	d132      	bne.n	e5e6 <gpiote_pin_int_cfg+0x116>
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk | GPIOTE_CONFIG_POLARITY_Msk);
    e580:	008b      	lsls	r3, r1, #2
    e582:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    e586:	f503 3344 	add.w	r3, r3, #200704	; 0x31000
    e58a:	f8d3 2510 	ldr.w	r2, [r3, #1296]	; 0x510
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    e58e:	0224      	lsls	r4, r4, #8
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk | GPIOTE_CONFIG_POLARITY_Msk);
    e590:	f422 3247 	bic.w	r2, r2, #203776	; 0x31c00
    e594:	f422 7240 	bic.w	r2, r2, #768	; 0x300
    e598:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    e59c:	f8d3 2510 	ldr.w	r2, [r3, #1296]	; 0x510
    e5a0:	f404 54f8 	and.w	r4, r4, #7936	; 0x1f00
    e5a4:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
    e5a8:	4315      	orrs	r5, r2
			nrf_gpiote_event_t evt =
    e5aa:	f101 0240 	add.w	r2, r1, #64	; 0x40
    e5ae:	0092      	lsls	r2, r2, #2
    return ((uint32_t)p_reg + event);
    e5b0:	b292      	uxth	r2, r2
    e5b2:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
    e5b6:	f502 3244 	add.w	r2, r2, #200704	; 0x31000
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    e5ba:	f8c3 5510 	str.w	r5, [r3, #1296]	; 0x510
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    e5be:	6010      	str	r0, [r2, #0]
   p_reg->CONFIG[idx] |= GPIOTE_CONFIG_MODE_Event;
    e5c0:	f8d3 2510 	ldr.w	r2, [r3, #1296]	; 0x510
    e5c4:	f042 0201 	orr.w	r2, r2, #1
    e5c8:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
			nrf_gpiote_int_enable(NRF_GPIOTE, BIT(channel));
    e5cc:	2301      	movs	r3, #1
    e5ce:	fa03 f101 	lsl.w	r1, r3, r1
    p_reg->INTENSET = mask;
    e5d2:	f8c6 1304 	str.w	r1, [r6, #772]	; 0x304
}
    e5d6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	for (size_t i = 0; i < GPIOTE_CH_NUM; i++) {
    e5da:	3301      	adds	r3, #1
    e5dc:	2b08      	cmp	r3, #8
    e5de:	d187      	bne.n	e4f0 <gpiote_pin_int_cfg+0x20>
    e5e0:	e7a2      	b.n	e528 <gpiote_pin_int_cfg+0x58>
				pol = NRF_GPIOTE_POLARITY_TOGGLE;
    e5e2:	2503      	movs	r5, #3
    e5e4:	e7c4      	b.n	e570 <gpiote_pin_int_cfg+0xa0>
    e5e6:	3101      	adds	r1, #1
	for (u8_t channel = 0; channel < GPIOTE_CH_NUM; ++channel) {
    e5e8:	2908      	cmp	r1, #8
    e5ea:	d1c2      	bne.n	e572 <gpiote_pin_int_cfg+0xa2>
	return -ENODEV;
    e5ec:	f06f 0012 	mvn.w	r0, #18
    e5f0:	e7f1      	b.n	e5d6 <gpiote_pin_int_cfg+0x106>
	if ((BIT(pin) & (data->active_level ^ data->inverted)) != 0) {
    e5f2:	693b      	ldr	r3, [r7, #16]
    e5f4:	69fa      	ldr	r2, [r7, #28]
			nrf_gpio_cfg_sense_set(abs_pin, sense);
    e5f6:	4620      	mov	r0, r4
	if ((BIT(pin) & (data->active_level ^ data->inverted)) != 0) {
    e5f8:	4053      	eors	r3, r2
    e5fa:	fa23 f505 	lsr.w	r5, r3, r5
		return NRF_GPIO_PIN_SENSE_HIGH;
    e5fe:	f015 0f01 	tst.w	r5, #1
			nrf_gpio_cfg_sense_set(abs_pin, sense);
    e602:	bf0c      	ite	eq
    e604:	2103      	moveq	r1, #3
    e606:	2102      	movne	r1, #2
    e608:	f7ff ff34 	bl	e474 <nrf_gpio_cfg_sense_set>
	int res = 0;
    e60c:	4640      	mov	r0, r8
    e60e:	e7e2      	b.n	e5d6 <gpiote_pin_int_cfg+0x106>
    e610:	40031000 	.word	0x40031000

0000e614 <gpio_nrfx_config>:
{
    e614:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    e618:	4607      	mov	r7, r0
	struct gpio_nrfx_data *data = get_port_data(port);
    e61a:	6884      	ldr	r4, [r0, #8]
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK)) {
    e61c:	f403 4070 	and.w	r0, r3, #61440	; 0xf000
    e620:	f5b0 4f80 	cmp.w	r0, #16384	; 0x4000
{
    e624:	461d      	mov	r5, r3
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK)) {
    e626:	d041      	beq.n	e6ac <gpio_nrfx_config+0x98>
    e628:	dc09      	bgt.n	e63e <gpio_nrfx_config+0x2a>
    e62a:	f5b0 5f80 	cmp.w	r0, #4096	; 0x1000
    e62e:	d03f      	beq.n	e6b0 <gpio_nrfx_config+0x9c>
    e630:	f5b0 5f40 	cmp.w	r0, #12288	; 0x3000
    e634:	d03e      	beq.n	e6b4 <gpio_nrfx_config+0xa0>
    e636:	b190      	cbz	r0, e65e <gpio_nrfx_config+0x4a>
		return -EINVAL;
    e638:	f06f 0015 	mvn.w	r0, #21
    e63c:	e033      	b.n	e6a6 <gpio_nrfx_config+0x92>
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK)) {
    e63e:	f5b0 4fe0 	cmp.w	r0, #28672	; 0x7000
    e642:	d039      	beq.n	e6b8 <gpio_nrfx_config+0xa4>
    e644:	dc04      	bgt.n	e650 <gpio_nrfx_config+0x3c>
    e646:	f5b0 4fa0 	cmp.w	r0, #20480	; 0x5000
    e64a:	d1f5      	bne.n	e638 <gpio_nrfx_config+0x24>
		drive = NRF_GPIO_PIN_H0H1;
    e64c:	2003      	movs	r0, #3
    e64e:	e006      	b.n	e65e <gpio_nrfx_config+0x4a>
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK)) {
    e650:	f5b0 4f40 	cmp.w	r0, #49152	; 0xc000
    e654:	d032      	beq.n	e6bc <gpio_nrfx_config+0xa8>
    e656:	f5b0 4f50 	cmp.w	r0, #53248	; 0xd000
    e65a:	d1ed      	bne.n	e638 <gpio_nrfx_config+0x24>
		drive = NRF_GPIO_PIN_H0D1;
    e65c:	2007      	movs	r0, #7
	if ((flags & GPIO_PUD_MASK) == GPIO_PUD_PULL_UP) {
    e65e:	f405 7640 	and.w	r6, r5, #768	; 0x300
    e662:	f5b6 7f80 	cmp.w	r6, #256	; 0x100
    e666:	d02b      	beq.n	e6c0 <gpio_nrfx_config+0xac>
		pull = NRF_GPIO_PIN_NOPULL;
    e668:	f5a6 7600 	sub.w	r6, r6, #512	; 0x200
    e66c:	4273      	negs	r3, r6
    e66e:	4173      	adcs	r3, r6
	if (access_op == GPIO_ACCESS_BY_PORT) {
    e670:	2901      	cmp	r1, #1
		from_pin = pin;
    e672:	bf19      	ittee	ne
    e674:	fa5f f982 	uxtbne.w	r9, r2
		to_pin   = pin;
    e678:	46c8      	movne	r8, r9
		to_pin   = 31U;
    e67a:	f04f 081f 	moveq.w	r8, #31
		from_pin = 0U;
    e67e:	f04f 0900 	moveq.w	r9, #0
    e682:	f04f 0a01 	mov.w	sl, #1
	dir = ((flags & GPIO_DIR_MASK) == GPIO_DIR_OUT)
    e686:	f005 0c01 	and.w	ip, r5, #1
                               | ((uint32_t)input << GPIO_PIN_CNF_INPUT_Pos)
    e68a:	ea4f 064c 	mov.w	r6, ip, lsl #1
                               | ((uint32_t)drive << GPIO_PIN_CNF_DRIVE_Pos)
    e68e:	ea46 060c 	orr.w	r6, r6, ip
    e692:	ea46 2000 	orr.w	r0, r6, r0, lsl #8
    e696:	ea40 0683 	orr.w	r6, r0, r3, lsl #2
		WRITE_BIT(data->pin_int_en, curr_pin, flags & GPIO_INT);
    e69a:	f005 0302 	and.w	r3, r5, #2
    e69e:	9301      	str	r3, [sp, #4]
	for (u8_t curr_pin = from_pin; curr_pin <= to_pin; ++curr_pin) {
    e6a0:	45c8      	cmp	r8, r9
    e6a2:	d20f      	bcs.n	e6c4 <gpio_nrfx_config+0xb0>
	return 0;
    e6a4:	2000      	movs	r0, #0
}
    e6a6:	b003      	add	sp, #12
    e6a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		drive = NRF_GPIO_PIN_S0H1;
    e6ac:	2002      	movs	r0, #2
    e6ae:	e7d6      	b.n	e65e <gpio_nrfx_config+0x4a>
		drive = NRF_GPIO_PIN_H0S1;
    e6b0:	2001      	movs	r0, #1
    e6b2:	e7d4      	b.n	e65e <gpio_nrfx_config+0x4a>
		drive = NRF_GPIO_PIN_D0S1;
    e6b4:	2004      	movs	r0, #4
    e6b6:	e7d2      	b.n	e65e <gpio_nrfx_config+0x4a>
		drive = NRF_GPIO_PIN_D0H1;
    e6b8:	2005      	movs	r0, #5
    e6ba:	e7d0      	b.n	e65e <gpio_nrfx_config+0x4a>
		drive = NRF_GPIO_PIN_S0D1;
    e6bc:	2006      	movs	r0, #6
    e6be:	e7ce      	b.n	e65e <gpio_nrfx_config+0x4a>
		pull = NRF_GPIO_PIN_PULLUP;
    e6c0:	2303      	movs	r3, #3
    e6c2:	e7d5      	b.n	e670 <gpio_nrfx_config+0x5c>
	return port->config->config_info;
    e6c4:	683b      	ldr	r3, [r7, #0]
		nrf_gpio_cfg(NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num,
    e6c6:	689b      	ldr	r3, [r3, #8]
    e6c8:	7919      	ldrb	r1, [r3, #4]
    e6ca:	f009 031f 	and.w	r3, r9, #31
    e6ce:	ea43 1b41 	orr.w	fp, r3, r1, lsl #5
    NRFX_ASSERT(*p_pin < NUMBER_OF_PINS);
    e6d2:	f1bb 0f1f 	cmp.w	fp, #31
    e6d6:	dd01      	ble.n	e6dc <gpio_nrfx_config+0xc8>
    e6d8:	f7ff feb6 	bl	e448 <nrf_gpio_pin_port_decode.isra.8.part.9>
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
    e6dc:	4a19      	ldr	r2, [pc, #100]	; (e744 <gpio_nrfx_config+0x130>)
    e6de:	f10b 0380 	add.w	r3, fp, #128	; 0x80
    e6e2:	f842 6023 	str.w	r6, [r2, r3, lsl #2]
		WRITE_BIT(data->pin_int_en, curr_pin, flags & GPIO_INT);
    e6e6:	9a01      	ldr	r2, [sp, #4]
    e6e8:	fa0a f309 	lsl.w	r3, sl, r9
    e6ec:	68a1      	ldr	r1, [r4, #8]
    e6ee:	b32a      	cbz	r2, e73c <gpio_nrfx_config+0x128>
    e6f0:	4319      	orrs	r1, r3
    e6f2:	60a1      	str	r1, [r4, #8]
		WRITE_BIT(data->trig_edge, curr_pin, flags & GPIO_INT_EDGE);
    e6f4:	6961      	ldr	r1, [r4, #20]
    e6f6:	06a8      	lsls	r0, r5, #26
    e6f8:	bf4c      	ite	mi
    e6fa:	4319      	orrmi	r1, r3
    e6fc:	4399      	bicpl	r1, r3
    e6fe:	6161      	str	r1, [r4, #20]
		WRITE_BIT(data->double_edge, curr_pin,
    e700:	69a1      	ldr	r1, [r4, #24]
    e702:	066a      	lsls	r2, r5, #25
    e704:	bf4c      	ite	mi
    e706:	4319      	orrmi	r1, r3
    e708:	4399      	bicpl	r1, r3
    e70a:	61a1      	str	r1, [r4, #24]
		WRITE_BIT(data->active_level, curr_pin,
    e70c:	6921      	ldr	r1, [r4, #16]
    e70e:	0768      	lsls	r0, r5, #29
    e710:	bf4c      	ite	mi
    e712:	4319      	orrmi	r1, r3
    e714:	4399      	bicpl	r1, r3
    e716:	6121      	str	r1, [r4, #16]
		WRITE_BIT(data->inverted, curr_pin, flags & GPIO_POL_INV);
    e718:	69e1      	ldr	r1, [r4, #28]
    e71a:	062a      	lsls	r2, r5, #24
    e71c:	bf4c      	ite	mi
    e71e:	430b      	orrmi	r3, r1
    e720:	ea21 0303 	bicpl.w	r3, r1, r3
    e724:	61e3      	str	r3, [r4, #28]
		res = gpiote_pin_int_cfg(port, curr_pin);
    e726:	4649      	mov	r1, r9
    e728:	4638      	mov	r0, r7
    e72a:	f7ff fed1 	bl	e4d0 <gpiote_pin_int_cfg>
		if (res != 0) {
    e72e:	2800      	cmp	r0, #0
    e730:	d1b9      	bne.n	e6a6 <gpio_nrfx_config+0x92>
	for (u8_t curr_pin = from_pin; curr_pin <= to_pin; ++curr_pin) {
    e732:	f109 0201 	add.w	r2, r9, #1
    e736:	fa5f f982 	uxtb.w	r9, r2
    e73a:	e7b1      	b.n	e6a0 <gpio_nrfx_config+0x8c>
		WRITE_BIT(data->pin_int_en, curr_pin, flags & GPIO_INT);
    e73c:	ea21 0103 	bic.w	r1, r1, r3
    e740:	e7d7      	b.n	e6f2 <gpio_nrfx_config+0xde>
    e742:	bf00      	nop
    e744:	40842500 	.word	0x40842500

0000e748 <gpiote_event_handler>:
{
    e748:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    e74c:	4b56      	ldr	r3, [pc, #344]	; (e8a8 <gpiote_event_handler+0x160>)
    e74e:	681e      	ldr	r6, [r3, #0]
	if (port_event) {
    e750:	4698      	mov	r8, r3
    e752:	2e00      	cmp	r6, #0
    e754:	d05e      	beq.n	e814 <gpiote_event_handler+0xcc>
	u32_t bit = 1U << pin;
    e756:	2701      	movs	r7, #1
	u32_t pin = 0U;
    e758:	f04f 0a00 	mov.w	sl, #0
	struct gpio_nrfx_data *data = get_port_data(port);
    e75c:	4a53      	ldr	r2, [pc, #332]	; (e8ac <gpiote_event_handler+0x164>)
    e75e:	6893      	ldr	r3, [r2, #8]
	return port->config->config_info;
    e760:	6812      	ldr	r2, [r2, #0]
	u32_t pin_states = ~(port_in ^ data->inverted ^ data->active_level);
    e762:	69dc      	ldr	r4, [r3, #28]
	return port->config->config_info;
    e764:	f8d2 9008 	ldr.w	r9, [r2, #8]
	u32_t out = data->int_en & data->pin_int_en;
    e768:	e9d3 2502 	ldrd	r2, r5, [r3, #8]
    e76c:	4015      	ands	r5, r2
	out &= ~data->trig_edge & ~data->double_edge;
    e76e:	e9d3 2105 	ldrd	r2, r1, [r3, #20]
    e772:	430a      	orrs	r2, r1
    e774:	ea25 0502 	bic.w	r5, r5, r2
	u32_t port_in = nrf_gpio_port_in_read(cfg->port);
    e778:	f8d9 2000 	ldr.w	r2, [r9]
	u32_t pin_states = ~(port_in ^ data->inverted ^ data->active_level);
    e77c:	691b      	ldr	r3, [r3, #16]
}


NRF_STATIC_INLINE uint32_t nrf_gpio_port_in_read(NRF_GPIO_Type const * p_reg)
{
    return p_reg->IN;
    e77e:	6912      	ldr	r2, [r2, #16]
    e780:	405c      	eors	r4, r3
    e782:	4054      	eors	r4, r2
	u32_t out = pin_states & level_pins;
    e784:	ea25 0404 	bic.w	r4, r5, r4
	while (level_pins) {
    e788:	bb9d      	cbnz	r5, e7f2 <gpiote_event_handler+0xaa>
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    e78a:	f8c8 5000 	str.w	r5, [r8]
	u32_t fired_triggers[GPIO_COUNT] = {0};
    e78e:	2300      	movs	r3, #0
		if (nrf_gpiote_int_enable_check(NRF_GPIOTE, BIT(i)) &&
    e790:	2001      	movs	r0, #1
    e792:	461f      	mov	r7, r3
    return p_reg->INTENSET & mask;
    e794:	4946      	ldr	r1, [pc, #280]	; (e8b0 <gpiote_event_handler+0x168>)
    e796:	4d47      	ldr	r5, [pc, #284]	; (e8b4 <gpiote_event_handler+0x16c>)
    e798:	f8d1 2304 	ldr.w	r2, [r1, #772]	; 0x304
    e79c:	fa00 fc03 	lsl.w	ip, r0, r3
    e7a0:	ea1c 0f02 	tst.w	ip, r2
    e7a4:	d00d      	beq.n	e7c2 <gpiote_event_handler+0x7a>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    e7a6:	f855 2023 	ldr.w	r2, [r5, r3, lsl #2]
    e7aa:	b152      	cbz	r2, e7c2 <gpiote_event_handler+0x7a>
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
    e7ac:	f503 72a2 	add.w	r2, r3, #324	; 0x144
    e7b0:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    e7b4:	f845 7023 	str.w	r7, [r5, r3, lsl #2]
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
    e7b8:	f3c2 2204 	ubfx	r2, r2, #8, #5
			fired_triggers[abs_pin / 32U] |= BIT(abs_pin % 32);
    e7bc:	fa00 f202 	lsl.w	r2, r0, r2
    e7c0:	4314      	orrs	r4, r2
	for (size_t i = 0; i < GPIOTE_CH_NUM; i++) {
    e7c2:	3301      	adds	r3, #1
    e7c4:	2b08      	cmp	r3, #8
    e7c6:	d1e7      	bne.n	e798 <gpiote_event_handler+0x50>
	if (fired_triggers[0]) {
    e7c8:	bb34      	cbnz	r4, e818 <gpiote_event_handler+0xd0>
	if (port_event) {
    e7ca:	b186      	cbz	r6, e7ee <gpiote_event_handler+0xa6>
	u32_t bit = 1U << pin;
    e7cc:	2701      	movs	r7, #1
	u32_t pin = 0U;
    e7ce:	f04f 0800 	mov.w	r8, #0
	const struct gpio_nrfx_data *data = get_port_data(port);
    e7d2:	4b36      	ldr	r3, [pc, #216]	; (e8ac <gpiote_event_handler+0x164>)
    e7d4:	689d      	ldr	r5, [r3, #8]
	return port->config->config_info;
    e7d6:	681b      	ldr	r3, [r3, #0]
    e7d8:	689e      	ldr	r6, [r3, #8]
	u32_t out = data->int_en & data->pin_int_en;
    e7da:	e9d5 3402 	ldrd	r3, r4, [r5, #8]
    e7de:	401c      	ands	r4, r3
	out &= ~data->trig_edge & ~data->double_edge;
    e7e0:	e9d5 3205 	ldrd	r3, r2, [r5, #20]
    e7e4:	4313      	orrs	r3, r2
    e7e6:	ea24 0403 	bic.w	r4, r4, r3
	while (level_pins) {
    e7ea:	2c00      	cmp	r4, #0
    e7ec:	d142      	bne.n	e874 <gpiote_event_handler+0x12c>
}
    e7ee:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (level_pins & bit) {
    e7f2:	423d      	tst	r5, r7
    e7f4:	d00a      	beq.n	e80c <gpiote_event_handler+0xc4>
			u32_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
    e7f6:	f899 3004 	ldrb.w	r3, [r9, #4]
    e7fa:	f00a 001f 	and.w	r0, sl, #31
			nrf_gpio_cfg_sense_set(abs_pin, NRF_GPIO_PIN_NOSENSE);
    e7fe:	2100      	movs	r1, #0
    e800:	ea40 1043 	orr.w	r0, r0, r3, lsl #5
    e804:	f7ff fe36 	bl	e474 <nrf_gpio_cfg_sense_set>
			level_pins &= ~bit;
    e808:	ea25 0507 	bic.w	r5, r5, r7
		++pin;
    e80c:	f10a 0a01 	add.w	sl, sl, #1
		bit <<= 1;
    e810:	007f      	lsls	r7, r7, #1
    e812:	e7b9      	b.n	e788 <gpiote_event_handler+0x40>
	u32_t fired_triggers[GPIO_COUNT] = {0};
    e814:	4634      	mov	r4, r6
    e816:	e7ba      	b.n	e78e <gpiote_event_handler+0x46>
	struct gpio_nrfx_data *data = get_port_data(port);
    e818:	4b24      	ldr	r3, [pc, #144]	; (e8ac <gpiote_event_handler+0x164>)
    e81a:	f8d3 9008 	ldr.w	r9, [r3, #8]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
    e81e:	f8d9 5000 	ldr.w	r5, [r9]
    e822:	2d00      	cmp	r5, #0
    e824:	d0d1      	beq.n	e7ca <gpiote_event_handler+0x82>
			cb->handler(port, cb, pins);
    e826:	4698      	mov	r8, r3
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
    e828:	682f      	ldr	r7, [r5, #0]
			__ASSERT(cb->handler, "No callback handler!");
    e82a:	f8df a094 	ldr.w	sl, [pc, #148]	; e8c0 <gpiote_event_handler+0x178>
    e82e:	f8df b094 	ldr.w	fp, [pc, #148]	; e8c4 <gpiote_event_handler+0x17c>
		if ((cb->pin_mask & pins) & data->int_en) {
    e832:	f8d9 300c 	ldr.w	r3, [r9, #12]
    e836:	68aa      	ldr	r2, [r5, #8]
    e838:	4023      	ands	r3, r4
    e83a:	4213      	tst	r3, r2
    e83c:	d015      	beq.n	e86a <gpiote_event_handler+0x122>
			__ASSERT(cb->handler, "No callback handler!");
    e83e:	686b      	ldr	r3, [r5, #4]
    e840:	b973      	cbnz	r3, e860 <gpiote_event_handler+0x118>
    e842:	4659      	mov	r1, fp
    e844:	f44f 73d2 	mov.w	r3, #420	; 0x1a4
    e848:	4652      	mov	r2, sl
    e84a:	481b      	ldr	r0, [pc, #108]	; (e8b8 <gpiote_event_handler+0x170>)
    e84c:	f00a fead 	bl	195aa <printk>
    e850:	481a      	ldr	r0, [pc, #104]	; (e8bc <gpiote_event_handler+0x174>)
    e852:	f00a feaa 	bl	195aa <printk>
    e856:	f44f 71d2 	mov.w	r1, #420	; 0x1a4
    e85a:	4650      	mov	r0, sl
    e85c:	f00a febc 	bl	195d8 <assert_post_action>
			cb->handler(port, cb, pins);
    e860:	686b      	ldr	r3, [r5, #4]
    e862:	4622      	mov	r2, r4
    e864:	4629      	mov	r1, r5
    e866:	4640      	mov	r0, r8
    e868:	4798      	blx	r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
    e86a:	2f00      	cmp	r7, #0
    e86c:	d0ad      	beq.n	e7ca <gpiote_event_handler+0x82>
    e86e:	463d      	mov	r5, r7
    e870:	683f      	ldr	r7, [r7, #0]
    e872:	e7de      	b.n	e832 <gpiote_event_handler+0xea>
		if (level_pins & bit) {
    e874:	4227      	tst	r7, r4
    e876:	d013      	beq.n	e8a0 <gpiote_event_handler+0x158>
	if ((BIT(pin) & (data->active_level ^ data->inverted)) != 0) {
    e878:	692b      	ldr	r3, [r5, #16]
    e87a:	69ea      	ldr	r2, [r5, #28]
			u32_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
    e87c:	f896 c004 	ldrb.w	ip, [r6, #4]
	if ((BIT(pin) & (data->active_level ^ data->inverted)) != 0) {
    e880:	4053      	eors	r3, r2
    e882:	fa23 f308 	lsr.w	r3, r3, r8
		return NRF_GPIO_PIN_SENSE_HIGH;
    e886:	f013 0f01 	tst.w	r3, #1
			u32_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
    e88a:	f008 001f 	and.w	r0, r8, #31
			nrf_gpio_cfg_sense_set(abs_pin, sense);
    e88e:	bf0c      	ite	eq
    e890:	2103      	moveq	r1, #3
    e892:	2102      	movne	r1, #2
    e894:	ea40 104c 	orr.w	r0, r0, ip, lsl #5
    e898:	f7ff fdec 	bl	e474 <nrf_gpio_cfg_sense_set>
			level_pins &= ~bit;
    e89c:	ea24 0407 	bic.w	r4, r4, r7
		++pin;
    e8a0:	f108 0801 	add.w	r8, r8, #1
		bit <<= 1;
    e8a4:	007f      	lsls	r7, r7, #1
    e8a6:	e7a0      	b.n	e7ea <gpiote_event_handler+0xa2>
    e8a8:	4003117c 	.word	0x4003117c
    e8ac:	200260c4 	.word	0x200260c4
    e8b0:	40031000 	.word	0x40031000
    e8b4:	40031100 	.word	0x40031100
    e8b8:	0001ac45 	.word	0x0001ac45
    e8bc:	0001b39f 	.word	0x0001b39f
    e8c0:	0001b3b6 	.word	0x0001b3b6
    e8c4:	0001b3e2 	.word	0x0001b3e2

0000e8c8 <entropy_cc310_rng_get_entropy>:
#include "nrf_cc310_platform_entropy.h"
#endif

static int entropy_cc310_rng_get_entropy(struct device *dev, u8_t *buffer,
					 u16_t length)
{
    e8c8:	b537      	push	{r0, r1, r2, r4, r5, lr}
    e8ca:	460d      	mov	r5, r1
    e8cc:	4614      	mov	r4, r2
	int res = -EINVAL;
	size_t olen;

	__ASSERT_NO_MSG(dev != NULL);
    e8ce:	b948      	cbnz	r0, e8e4 <entropy_cc310_rng_get_entropy+0x1c>
    e8d0:	4910      	ldr	r1, [pc, #64]	; (e914 <entropy_cc310_rng_get_entropy+0x4c>)
    e8d2:	4811      	ldr	r0, [pc, #68]	; (e918 <entropy_cc310_rng_get_entropy+0x50>)
    e8d4:	231e      	movs	r3, #30
    e8d6:	4a11      	ldr	r2, [pc, #68]	; (e91c <entropy_cc310_rng_get_entropy+0x54>)
    e8d8:	f00a fe67 	bl	195aa <printk>
    e8dc:	211e      	movs	r1, #30
    e8de:	480f      	ldr	r0, [pc, #60]	; (e91c <entropy_cc310_rng_get_entropy+0x54>)
    e8e0:	f00a fe7a 	bl	195d8 <assert_post_action>
	__ASSERT_NO_MSG(buffer != NULL);
    e8e4:	b94d      	cbnz	r5, e8fa <entropy_cc310_rng_get_entropy+0x32>
    e8e6:	490e      	ldr	r1, [pc, #56]	; (e920 <entropy_cc310_rng_get_entropy+0x58>)
    e8e8:	480b      	ldr	r0, [pc, #44]	; (e918 <entropy_cc310_rng_get_entropy+0x50>)
    e8ea:	231f      	movs	r3, #31
    e8ec:	4a0b      	ldr	r2, [pc, #44]	; (e91c <entropy_cc310_rng_get_entropy+0x54>)
    e8ee:	f00a fe5c 	bl	195aa <printk>
    e8f2:	211f      	movs	r1, #31
    e8f4:	4809      	ldr	r0, [pc, #36]	; (e91c <entropy_cc310_rng_get_entropy+0x54>)
    e8f6:	f00a fe6f 	bl	195d8 <assert_post_action>

#if defined(CONFIG_SPM)
	/** This is a call from a non-secure app that enables secure services,
	 *  in which case entropy is gathered by calling through SPM
	 */
	res = spm_request_random_number(buffer, length, &olen);
    e8fa:	aa01      	add	r2, sp, #4
    e8fc:	4621      	mov	r1, r4
    e8fe:	4628      	mov	r0, r5
    e900:	f7f9 fb76 	bl	7ff0 <spm_request_random_number>
	if (olen != length) {
    e904:	9b01      	ldr	r3, [sp, #4]
		return -EINVAL;
    e906:	429c      	cmp	r4, r3
		return -EINVAL;
	}
#endif

	return res;
}
    e908:	bf18      	it	ne
    e90a:	f06f 0015 	mvnne.w	r0, #21
    e90e:	b003      	add	sp, #12
    e910:	bd30      	pop	{r4, r5, pc}
    e912:	bf00      	nop
    e914:	0001b466 	.word	0x0001b466
    e918:	0001ac45 	.word	0x0001ac45
    e91c:	0001b436 	.word	0x0001b436
    e920:	0001b479 	.word	0x0001b479

0000e924 <_bsdlib_init>:
static int _bsdlib_init(struct device *unused)
{
	/* Setup the network IRQ used by the BSD library.
	 * Note: No call to irq_enable() here, that is done through bsd_init().
	 */
	IRQ_DIRECT_CONNECT(BSD_NETWORK_IRQ, BSD_NETWORK_IRQ_PRIORITY,
    e924:	2200      	movs	r2, #0
{
    e926:	b508      	push	{r3, lr}
	IRQ_DIRECT_CONNECT(BSD_NETWORK_IRQ, BSD_NETWORK_IRQ_PRIORITY,
    e928:	4611      	mov	r1, r2
    e92a:	202a      	movs	r0, #42	; 0x2a
    e92c:	f7fe fb40 	bl	cfb0 <z_arm_irq_priority_set>
			   ipc_proxy_irq_handler, 0);

	init_ret = bsd_init();
    e930:	f002 fc38 	bl	111a4 <bsd_init>
    e934:	4b01      	ldr	r3, [pc, #4]	; (e93c <_bsdlib_init+0x18>)
    e936:	6018      	str	r0, [r3, #0]
		 */
		return 0;
	}

	return init_ret;
}
    e938:	2000      	movs	r0, #0
    e93a:	bd08      	pop	{r3, pc}
    e93c:	20020060 	.word	0x20020060

0000e940 <thread_monitor_entry_get>:

/* Get thread monitor structure assigned to a specific thread id, with a RPC
 * counter value at which bsdlib last checked the 'readiness' of a thread
 */
static struct thread_monitor_entry *thread_monitor_entry_get(k_tid_t id)
{
    e940:	b570      	push	{r4, r5, r6, lr}
			new_entry = entry;
			break;
		}

		/* Identify oldest entry. */
		entry_age = rpc_event_cnt - entry->cnt;
    e942:	4b0d      	ldr	r3, [pc, #52]	; (e978 <thread_monitor_entry_get+0x38>)
	struct thread_monitor_entry *new_entry = thread_event_monitor;
    e944:	4c0d      	ldr	r4, [pc, #52]	; (e97c <thread_monitor_entry_get+0x3c>)
		entry_age = rpc_event_cnt - entry->cnt;
    e946:	681a      	ldr	r2, [r3, #0]
    e948:	250a      	movs	r5, #10
	int entry_age, oldest_entry_age = 0;
    e94a:	2600      	movs	r6, #0
	struct thread_monitor_entry *entry = thread_event_monitor;
    e94c:	4623      	mov	r3, r4
		if (entry->id == id) {
    e94e:	6819      	ldr	r1, [r3, #0]
    e950:	4281      	cmp	r1, r0
    e952:	d00e      	beq.n	e972 <thread_monitor_entry_get+0x32>
		} else if (entry->id == 0) {
    e954:	b151      	cbz	r1, e96c <thread_monitor_entry_get+0x2c>
		entry_age = rpc_event_cnt - entry->cnt;
    e956:	6859      	ldr	r1, [r3, #4]
    e958:	1a51      	subs	r1, r2, r1
		if (entry_age > oldest_entry_age) {
    e95a:	42b1      	cmp	r1, r6
    e95c:	bfc4      	itt	gt
    e95e:	461c      	movgt	r4, r3
    e960:	460e      	movgt	r6, r1
	for ( ; PART_OF_ARRAY(thread_event_monitor, entry); entry++) {
    e962:	3d01      	subs	r5, #1
    e964:	f103 0308 	add.w	r3, r3, #8
    e968:	d1f1      	bne.n	e94e <thread_monitor_entry_get+0xe>
    e96a:	4623      	mov	r3, r4
			new_entry = entry;
		}
	}

	new_entry->id = id;
	new_entry->cnt = rpc_event_cnt - 1;
    e96c:	3a01      	subs	r2, #1
	new_entry->id = id;
    e96e:	6018      	str	r0, [r3, #0]
	new_entry->cnt = rpc_event_cnt - 1;
    e970:	605a      	str	r2, [r3, #4]

	return new_entry;
}
    e972:	4618      	mov	r0, r3
    e974:	bd70      	pop	{r4, r5, r6, pc}
    e976:	bf00      	nop
    e978:	20020064 	.word	0x20020064
    e97c:	20020070 	.word	0x20020070

0000e980 <rpc_proxy_irq_handler>:
			  */

	return 1; /* We should check if scheduling decision should be made */
}

ISR_DIRECT_DECLARE(rpc_proxy_irq_handler)
    e980:	4668      	mov	r0, sp
    e982:	f020 0107 	bic.w	r1, r0, #7
    e986:	468d      	mov	sp, r1
    e988:	b519      	push	{r0, r3, r4, lr}
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
    e98a:	4b0d      	ldr	r3, [pc, #52]	; (e9c0 <rpc_proxy_irq_handler+0x40>)
    e98c:	e8d3 2fef 	ldaex	r2, [r3]
    e990:	3201      	adds	r2, #1
    e992:	e8c3 2fe1 	stlex	r1, r2, [r3]
    e996:	2900      	cmp	r1, #0
    e998:	d1f8      	bne.n	e98c <rpc_proxy_irq_handler+0xc>
{
	atomic_inc(&rpc_event_cnt);

	bsd_os_application_irq_handler();
    e99a:	f006 fdbb 	bl	15514 <bsd_os_application_irq_handler>

	struct sleeping_thread *thread;

	/* Wake up all sleeping threads. */
	SYS_SLIST_FOR_EACH_CONTAINER(&sleeping_threads, thread, node) {
    e99e:	4b09      	ldr	r3, [pc, #36]	; (e9c4 <rpc_proxy_irq_handler+0x44>)
    e9a0:	681c      	ldr	r4, [r3, #0]
    e9a2:	b93c      	cbnz	r4, e9b4 <rpc_proxy_irq_handler+0x34>
		k_sem_give(&thread->sem);
	}

	ISR_DIRECT_PM(); /* PM done after servicing interrupt for best latency
    e9a4:	f7fe fb36 	bl	d014 <_arch_isr_direct_pm>
{
#ifdef CONFIG_TRACING
	sys_trace_isr_exit();
#endif
	if (maybe_swap) {
		z_arm_int_exit();
    e9a8:	f7fe fa28 	bl	cdfc <z_arm_exc_exit>
ISR_DIRECT_DECLARE(rpc_proxy_irq_handler)
    e9ac:	e8bd 4019 	ldmia.w	sp!, {r0, r3, r4, lr}
    e9b0:	4685      	mov	sp, r0
    e9b2:	4770      	bx	lr
		arch_syscall_invoke1(*(uintptr_t *)&sem, K_SYSCALL_K_SEM_GIVE);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_sem_give(sem);
    e9b4:	1d20      	adds	r0, r4, #4
    e9b6:	f009 fea1 	bl	186fc <z_impl_k_sem_give>
    e9ba:	6824      	ldr	r4, [r4, #0]
	return node->next;
    e9bc:	e7f1      	b.n	e9a2 <rpc_proxy_irq_handler+0x22>
    e9be:	bf00      	nop
    e9c0:	20020064 	.word	0x20020064
    e9c4:	20020068 	.word	0x20020068

0000e9c8 <bsd_os_timedwait>:
{
    e9c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    e9cc:	4688      	mov	r8, r1
    e9ce:	b089      	sub	sp, #36	; 0x24
	return z_impl_k_uptime_get();
    e9d0:	f00b fd70 	bl	1a4b4 <z_impl_k_uptime_get>
	if (*timeout == 0) {
    e9d4:	f8d8 3000 	ldr.w	r3, [r8]
    e9d8:	4606      	mov	r6, r0
    e9da:	2b00      	cmp	r3, #0
    e9dc:	460f      	mov	r7, r1
    e9de:	d103      	bne.n	e9e8 <bsd_os_timedwait+0x20>
	z_impl_k_yield();
    e9e0:	f009 fdda 	bl	18598 <z_impl_k_yield>
		return NRF_ETIMEDOUT;
    e9e4:	203c      	movs	r0, #60	; 0x3c
    e9e6:	e06e      	b.n	eac6 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x66>
		*timeout = K_FOREVER;
    e9e8:	bfbc      	itt	lt
    e9ea:	f04f 33ff 	movlt.w	r3, #4294967295
    e9ee:	f8c8 3000 	strlt.w	r3, [r8]
	return z_impl_k_sem_init(sem, initial_count, limit);
    e9f2:	2201      	movs	r2, #1
    e9f4:	2100      	movs	r1, #0
    e9f6:	a802      	add	r0, sp, #8
    e9f8:	f00b fd3d 	bl	1a476 <z_impl_k_sem_init>
    e9fc:	f10d 0a04 	add.w	sl, sp, #4
    ea00:	f04f 0320 	mov.w	r3, #32
    ea04:	f3ef 8b11 	mrs	fp, BASEPRI
    ea08:	f383 8811 	msr	BASEPRI, r3
    ea0c:	f3bf 8f6f 	isb	sy
	return z_impl_k_current_get();
    ea10:	f009 fe6e 	bl	186f0 <z_impl_k_current_get>
	entry = thread_monitor_entry_get(k_current_get());
    ea14:	f7ff ff94 	bl	e940 <thread_monitor_entry_get>
	if (rpc_event_cnt != entry->cnt) {
    ea18:	4933      	ldr	r1, [pc, #204]	; (eae8 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x88>)
    ea1a:	6843      	ldr	r3, [r0, #4]
    ea1c:	680a      	ldr	r2, [r1, #0]
    ea1e:	4689      	mov	r9, r1
    ea20:	4293      	cmp	r3, r2
    ea22:	f04f 0300 	mov.w	r3, #0
    ea26:	d108      	bne.n	ea3a <bsd_os_timedwait+0x72>
	parent->next = child;
    ea28:	9301      	str	r3, [sp, #4]
Z_GENLIST_APPEND(slist, snode)
    ea2a:	4b30      	ldr	r3, [pc, #192]	; (eaec <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x8c>)
    ea2c:	685a      	ldr	r2, [r3, #4]
    ea2e:	2a00      	cmp	r2, #0
    ea30:	d14c      	bne.n	eacc <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x6c>
	list->head = node;
    ea32:	e9c3 aa00 	strd	sl, sl, [r3]
		allow_to_sleep = true;
    ea36:	2301      	movs	r3, #1
    ea38:	e000      	b.n	ea3c <bsd_os_timedwait+0x74>
	entry->cnt = rpc_event_cnt;
    ea3a:	6042      	str	r2, [r0, #4]
	__asm__ volatile(
    ea3c:	f38b 8811 	msr	BASEPRI, fp
    ea40:	f3bf 8f6f 	isb	sy
	if (!sleeping_thread_add(&thread)) {
    ea44:	2b00      	cmp	r3, #0
    ea46:	d03d      	beq.n	eac4 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x64>
	(void)k_sem_take(&thread.sem, *timeout);
    ea48:	f8d8 1000 	ldr.w	r1, [r8]
	return z_impl_k_sem_take(sem, timeout);
    ea4c:	a802      	add	r0, sp, #8
    ea4e:	f009 fe9f 	bl	18790 <z_impl_k_sem_take>
	__asm__ volatile(
    ea52:	f04f 0320 	mov.w	r3, #32
    ea56:	f3ef 8b11 	mrs	fp, BASEPRI
    ea5a:	f383 8811 	msr	BASEPRI, r3
    ea5e:	f3bf 8f6f 	isb	sy
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    ea62:	2000      	movs	r0, #0
    ea64:	4b21      	ldr	r3, [pc, #132]	; (eaec <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x8c>)
    ea66:	681a      	ldr	r2, [r3, #0]
    ea68:	b152      	cbz	r2, ea80 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x20>
    ea6a:	4552      	cmp	r2, sl
    ea6c:	d139      	bne.n	eae2 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x82>
Z_GENLIST_REMOVE(slist, snode)
    ea6e:	9901      	ldr	r1, [sp, #4]
    ea70:	bb88      	cbnz	r0, ead6 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x76>
    ea72:	6858      	ldr	r0, [r3, #4]
	list->head = node;
    ea74:	6019      	str	r1, [r3, #0]
Z_GENLIST_REMOVE(slist, snode)
    ea76:	4290      	cmp	r0, r2
    ea78:	d100      	bne.n	ea7c <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x1c>
	list->tail = node;
    ea7a:	6059      	str	r1, [r3, #4]
	parent->next = child;
    ea7c:	2300      	movs	r3, #0
    ea7e:	9301      	str	r3, [sp, #4]
	return z_impl_k_current_get();
    ea80:	f009 fe36 	bl	186f0 <z_impl_k_current_get>
	entry = thread_monitor_entry_get(k_current_get());
    ea84:	f7ff ff5c 	bl	e940 <thread_monitor_entry_get>
	entry->cnt = rpc_event_cnt;
    ea88:	f8d9 3000 	ldr.w	r3, [r9]
    ea8c:	6043      	str	r3, [r0, #4]
	__asm__ volatile(
    ea8e:	f38b 8811 	msr	BASEPRI, fp
    ea92:	f3bf 8f6f 	isb	sy
	if (*timeout == K_FOREVER) {
    ea96:	f8d8 9000 	ldr.w	r9, [r8]
    ea9a:	f1b9 3fff 	cmp.w	r9, #4294967295
    ea9e:	d011      	beq.n	eac4 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x64>
	return z_impl_k_uptime_get();
    eaa0:	f00b fd08 	bl	1a4b4 <z_impl_k_uptime_get>
	remaining = *timeout - (k_uptime_get() - start);
    eaa4:	eb16 0209 	adds.w	r2, r6, r9
    eaa8:	eb47 73e9 	adc.w	r3, r7, r9, asr #31
    eaac:	1a14      	subs	r4, r2, r0
    eaae:	eb63 0501 	sbc.w	r5, r3, r1
	*timeout = remaining > 0 ? remaining : 0;
    eab2:	2c00      	cmp	r4, #0
    eab4:	f175 0300 	sbcs.w	r3, r5, #0
    eab8:	bfb8      	it	lt
    eaba:	2400      	movlt	r4, #0
    eabc:	f8c8 4000 	str.w	r4, [r8]
	if (*timeout == 0) {
    eac0:	2c00      	cmp	r4, #0
    eac2:	d08f      	beq.n	e9e4 <bsd_os_timedwait+0x1c>
	return 0;
    eac4:	2000      	movs	r0, #0
}
    eac6:	b009      	add	sp, #36	; 0x24
    eac8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    eacc:	f8c2 a000 	str.w	sl, [r2]
	list->tail = node;
    ead0:	f8c3 a004 	str.w	sl, [r3, #4]
    ead4:	e7af      	b.n	ea36 <bsd_os_timedwait+0x6e>
	parent->next = child;
    ead6:	6001      	str	r1, [r0, #0]
Z_GENLIST_REMOVE(slist, snode)
    ead8:	6859      	ldr	r1, [r3, #4]
    eada:	4291      	cmp	r1, r2
	list->tail = node;
    eadc:	bf08      	it	eq
    eade:	6058      	streq	r0, [r3, #4]
    eae0:	e7cc      	b.n	ea7c <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x1c>
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    eae2:	4610      	mov	r0, r2
    eae4:	6812      	ldr	r2, [r2, #0]
    eae6:	e7bf      	b.n	ea68 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x8>
    eae8:	20020064 	.word	0x20020064
    eaec:	20020068 	.word	0x20020068

0000eaf0 <bsd_os_errno_set>:
	switch (err_code) {
    eaf0:	282d      	cmp	r0, #45	; 0x2d
{
    eaf2:	b510      	push	{r4, lr}
    eaf4:	4604      	mov	r4, r0
	switch (err_code) {
    eaf6:	d00c      	beq.n	eb12 <bsd_os_errno_set+0x22>
    eaf8:	dc40      	bgt.n	eb7c <bsd_os_errno_set+0x8c>
    eafa:	2816      	cmp	r0, #22
    eafc:	d009      	beq.n	eb12 <bsd_os_errno_set+0x22>
    eafe:	dc29      	bgt.n	eb54 <bsd_os_errno_set+0x64>
    eb00:	2808      	cmp	r0, #8
    eb02:	d006      	beq.n	eb12 <bsd_os_errno_set+0x22>
    eb04:	dc09      	bgt.n	eb1a <bsd_os_errno_set+0x2a>
    eb06:	2802      	cmp	r0, #2
    eb08:	d003      	beq.n	eb12 <bsd_os_errno_set+0x22>
    eb0a:	2805      	cmp	r0, #5
    eb0c:	d001      	beq.n	eb12 <bsd_os_errno_set+0x22>
    eb0e:	2801      	cmp	r0, #1
    eb10:	d10c      	bne.n	eb2c <bsd_os_errno_set+0x3c>
		errno = ETIMEDOUT;
    eb12:	f00b f82a 	bl	19b6a <z_errno>
    eb16:	6004      	str	r4, [r0, #0]
}
    eb18:	bd10      	pop	{r4, pc}
	switch (err_code) {
    eb1a:	280c      	cmp	r0, #12
    eb1c:	d0f9      	beq.n	eb12 <bsd_os_errno_set+0x22>
    eb1e:	dc01      	bgt.n	eb24 <bsd_os_errno_set+0x34>
    eb20:	2809      	cmp	r0, #9
    eb22:	e7f5      	b.n	eb10 <bsd_os_errno_set+0x20>
    eb24:	280d      	cmp	r0, #13
    eb26:	d0f4      	beq.n	eb12 <bsd_os_errno_set+0x22>
    eb28:	280e      	cmp	r0, #14
    eb2a:	d060      	beq.n	ebee <bsd_os_errno_set+0xfe>
		__ASSERT(false, "Untranslated errno %d set by bsdlib!", err_code);
    eb2c:	f44f 73a5 	mov.w	r3, #330	; 0x14a
    eb30:	4a47      	ldr	r2, [pc, #284]	; (ec50 <bsd_os_errno_set+0x160>)
    eb32:	4948      	ldr	r1, [pc, #288]	; (ec54 <bsd_os_errno_set+0x164>)
    eb34:	4848      	ldr	r0, [pc, #288]	; (ec58 <bsd_os_errno_set+0x168>)
    eb36:	f00a fd38 	bl	195aa <printk>
    eb3a:	4621      	mov	r1, r4
    eb3c:	4847      	ldr	r0, [pc, #284]	; (ec5c <bsd_os_errno_set+0x16c>)
    eb3e:	f00a fd34 	bl	195aa <printk>
    eb42:	f44f 71a5 	mov.w	r1, #330	; 0x14a
    eb46:	4842      	ldr	r0, [pc, #264]	; (ec50 <bsd_os_errno_set+0x160>)
    eb48:	f00a fd46 	bl	195d8 <assert_post_action>
		errno = 0xBAADBAAD;
    eb4c:	f00b f80d 	bl	19b6a <z_errno>
    eb50:	4b43      	ldr	r3, [pc, #268]	; (ec60 <bsd_os_errno_set+0x170>)
    eb52:	e04f      	b.n	ebf4 <bsd_os_errno_set+0x104>
	switch (err_code) {
    eb54:	2828      	cmp	r0, #40	; 0x28
    eb56:	d076      	beq.n	ec46 <bsd_os_errno_set+0x156>
    eb58:	dc05      	bgt.n	eb66 <bsd_os_errno_set+0x76>
    eb5a:	2823      	cmp	r0, #35	; 0x23
    eb5c:	d04c      	beq.n	ebf8 <bsd_os_errno_set+0x108>
    eb5e:	2825      	cmp	r0, #37	; 0x25
    eb60:	d0d7      	beq.n	eb12 <bsd_os_errno_set+0x22>
    eb62:	2818      	cmp	r0, #24
    eb64:	e7d4      	b.n	eb10 <bsd_os_errno_set+0x20>
    eb66:	282a      	cmp	r0, #42	; 0x2a
    eb68:	d0d3      	beq.n	eb12 <bsd_os_errno_set+0x22>
    eb6a:	db49      	blt.n	ec00 <bsd_os_errno_set+0x110>
    eb6c:	282b      	cmp	r0, #43	; 0x2b
    eb6e:	d0d0      	beq.n	eb12 <bsd_os_errno_set+0x22>
    eb70:	282c      	cmp	r0, #44	; 0x2c
    eb72:	d1db      	bne.n	eb2c <bsd_os_errno_set+0x3c>
		errno = ESOCKTNOSUPPORT;
    eb74:	f00a fff9 	bl	19b6a <z_errno>
    eb78:	232c      	movs	r3, #44	; 0x2c
    eb7a:	e03b      	b.n	ebf4 <bsd_os_errno_set+0x104>
	switch (err_code) {
    eb7c:	283c      	cmp	r0, #60	; 0x3c
    eb7e:	d0c8      	beq.n	eb12 <bsd_os_errno_set+0x22>
    eb80:	dc15      	bgt.n	ebae <bsd_os_errno_set+0xbe>
    eb82:	2833      	cmp	r0, #51	; 0x33
    eb84:	d0c5      	beq.n	eb12 <bsd_os_errno_set+0x22>
    eb86:	dc05      	bgt.n	eb94 <bsd_os_errno_set+0xa4>
    eb88:	2830      	cmp	r0, #48	; 0x30
    eb8a:	d0c2      	beq.n	eb12 <bsd_os_errno_set+0x22>
    eb8c:	2832      	cmp	r0, #50	; 0x32
    eb8e:	d03b      	beq.n	ec08 <bsd_os_errno_set+0x118>
    eb90:	282f      	cmp	r0, #47	; 0x2f
    eb92:	e7bd      	b.n	eb10 <bsd_os_errno_set+0x20>
    eb94:	2836      	cmp	r0, #54	; 0x36
    eb96:	d0bc      	beq.n	eb12 <bsd_os_errno_set+0x22>
    eb98:	dc01      	bgt.n	eb9e <bsd_os_errno_set+0xae>
    eb9a:	2834      	cmp	r0, #52	; 0x34
    eb9c:	e7b8      	b.n	eb10 <bsd_os_errno_set+0x20>
    eb9e:	2838      	cmp	r0, #56	; 0x38
    eba0:	d0b7      	beq.n	eb12 <bsd_os_errno_set+0x22>
    eba2:	2839      	cmp	r0, #57	; 0x39
    eba4:	d1c2      	bne.n	eb2c <bsd_os_errno_set+0x3c>
		errno = ENOTCONN;
    eba6:	f00a ffe0 	bl	19b6a <z_errno>
    ebaa:	2339      	movs	r3, #57	; 0x39
    ebac:	e022      	b.n	ebf4 <bsd_os_errno_set+0x104>
	switch (err_code) {
    ebae:	287d      	cmp	r0, #125	; 0x7d
    ebb0:	d036      	beq.n	ec20 <bsd_os_errno_set+0x130>
    ebb2:	dc10      	bgt.n	ebd6 <bsd_os_errno_set+0xe6>
    ebb4:	2870      	cmp	r0, #112	; 0x70
    ebb6:	d02b      	beq.n	ec10 <bsd_os_errno_set+0x120>
    ebb8:	dc05      	bgt.n	ebc6 <bsd_os_errno_set+0xd6>
    ebba:	2869      	cmp	r0, #105	; 0x69
    ebbc:	d1b6      	bne.n	eb2c <bsd_os_errno_set+0x3c>
		errno = ENOBUFS;
    ebbe:	f00a ffd4 	bl	19b6a <z_errno>
    ebc2:	2337      	movs	r3, #55	; 0x37
    ebc4:	e016      	b.n	ebf4 <bsd_os_errno_set+0x104>
	switch (err_code) {
    ebc6:	2872      	cmp	r0, #114	; 0x72
    ebc8:	d026      	beq.n	ec18 <bsd_os_errno_set+0x128>
    ebca:	2873      	cmp	r0, #115	; 0x73
    ebcc:	d1ae      	bne.n	eb2c <bsd_os_errno_set+0x3c>
		errno = EINPROGRESS;
    ebce:	f00a ffcc 	bl	19b6a <z_errno>
    ebd2:	2344      	movs	r3, #68	; 0x44
    ebd4:	e00e      	b.n	ebf4 <bsd_os_errno_set+0x104>
	switch (err_code) {
    ebd6:	287f      	cmp	r0, #127	; 0x7f
    ebd8:	d02b      	beq.n	ec32 <bsd_os_errno_set+0x142>
    ebda:	db25      	blt.n	ec28 <bsd_os_errno_set+0x138>
    ebdc:	2880      	cmp	r0, #128	; 0x80
    ebde:	d02d      	beq.n	ec3c <bsd_os_errno_set+0x14c>
    ebe0:	2881      	cmp	r0, #129	; 0x81
    ebe2:	d1a3      	bne.n	eb2c <bsd_os_errno_set+0x3c>
		errno = EKEYREJECTED;
    ebe4:	f00a ffc1 	bl	19b6a <z_errno>
    ebe8:	f240 73d4 	movw	r3, #2004	; 0x7d4
    ebec:	e002      	b.n	ebf4 <bsd_os_errno_set+0x104>
		errno = EFAULT;
    ebee:	f00a ffbc 	bl	19b6a <z_errno>
    ebf2:	230e      	movs	r3, #14
		errno = 0xBAADBAAD;
    ebf4:	6003      	str	r3, [r0, #0]
}
    ebf6:	e78f      	b.n	eb18 <bsd_os_errno_set+0x28>
		errno = EAGAIN;
    ebf8:	f00a ffb7 	bl	19b6a <z_errno>
    ebfc:	230b      	movs	r3, #11
    ebfe:	e7f9      	b.n	ebf4 <bsd_os_errno_set+0x104>
		errno = EPROTOTYPE;
    ec00:	f00a ffb3 	bl	19b6a <z_errno>
    ec04:	2329      	movs	r3, #41	; 0x29
    ec06:	e7f5      	b.n	ebf4 <bsd_os_errno_set+0x104>
		errno = ENETDOWN;
    ec08:	f00a ffaf 	bl	19b6a <z_errno>
    ec0c:	233e      	movs	r3, #62	; 0x3e
    ec0e:	e7f1      	b.n	ebf4 <bsd_os_errno_set+0x104>
		errno = EHOSTDOWN;
    ec10:	f00a ffab 	bl	19b6a <z_errno>
    ec14:	2343      	movs	r3, #67	; 0x43
    ec16:	e7ed      	b.n	ebf4 <bsd_os_errno_set+0x104>
		errno = EALREADY;
    ec18:	f00a ffa7 	bl	19b6a <z_errno>
    ec1c:	2345      	movs	r3, #69	; 0x45
    ec1e:	e7e9      	b.n	ebf4 <bsd_os_errno_set+0x104>
		errno = ECANCELED;
    ec20:	f00a ffa3 	bl	19b6a <z_errno>
    ec24:	2348      	movs	r3, #72	; 0x48
    ec26:	e7e5      	b.n	ebf4 <bsd_os_errno_set+0x104>
		errno = ENOKEY;
    ec28:	f00a ff9f 	bl	19b6a <z_errno>
    ec2c:	f240 73d1 	movw	r3, #2001	; 0x7d1
    ec30:	e7e0      	b.n	ebf4 <bsd_os_errno_set+0x104>
		errno = EKEYEXPIRED;
    ec32:	f00a ff9a 	bl	19b6a <z_errno>
    ec36:	f240 73d2 	movw	r3, #2002	; 0x7d2
    ec3a:	e7db      	b.n	ebf4 <bsd_os_errno_set+0x104>
		errno = EKEYREVOKED;
    ec3c:	f00a ff95 	bl	19b6a <z_errno>
    ec40:	f240 73d3 	movw	r3, #2003	; 0x7d3
    ec44:	e7d6      	b.n	ebf4 <bsd_os_errno_set+0x104>
		errno = EMSGSIZE;
    ec46:	f00a ff90 	bl	19b6a <z_errno>
    ec4a:	2324      	movs	r3, #36	; 0x24
    ec4c:	e7d2      	b.n	ebf4 <bsd_os_errno_set+0x104>
    ec4e:	bf00      	nop
    ec50:	0001b499 	.word	0x0001b499
    ec54:	0001b6d7 	.word	0x0001b6d7
    ec58:	0001ac45 	.word	0x0001ac45
    ec5c:	0001b4bd 	.word	0x0001b4bd
    ec60:	baadbaad 	.word	0xbaadbaad

0000ec64 <bsd_os_application_irq_set>:
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    ec64:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    ec68:	4b01      	ldr	r3, [pc, #4]	; (ec70 <bsd_os_application_irq_set+0xc>)
    ec6a:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
}
    ec6e:	4770      	bx	lr
    ec70:	e000e100 	.word	0xe000e100

0000ec74 <bsd_os_application_irq_clear>:
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    ec74:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    ec78:	4b01      	ldr	r3, [pc, #4]	; (ec80 <bsd_os_application_irq_clear+0xc>)
    ec7a:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
}
    ec7e:	4770      	bx	lr
    ec80:	e000e100 	.word	0xe000e100

0000ec84 <bsd_os_trace_irq_set>:
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    ec84:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
    ec88:	4b01      	ldr	r3, [pc, #4]	; (ec90 <bsd_os_trace_irq_set+0xc>)
    ec8a:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
}
    ec8e:	4770      	bx	lr
    ec90:	e000e100 	.word	0xe000e100

0000ec94 <bsd_os_trace_irq_clear>:
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    ec94:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
    ec98:	4b01      	ldr	r3, [pc, #4]	; (eca0 <bsd_os_trace_irq_clear+0xc>)
    ec9a:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
}
    ec9e:	4770      	bx	lr
    eca0:	e000e100 	.word	0xe000e100

0000eca4 <bsd_os_init>:
#endif
}

/* This function is called by bsd_init and must not be called explicitly. */
void bsd_os_init(void)
{
    eca4:	b508      	push	{r3, lr}
	list->head = NULL;
    eca6:	2300      	movs	r3, #0
    eca8:	4a07      	ldr	r2, [pc, #28]	; (ecc8 <bsd_os_init+0x24>)
	list->tail = NULL;
    ecaa:	e9c2 3300 	strd	r3, r3, [r2]
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    ecae:	4a07      	ldr	r2, [pc, #28]	; (eccc <bsd_os_init+0x28>)
    ecb0:	e8d2 1fef 	ldaex	r1, [r2]
    ecb4:	e8c2 3fe0 	stlex	r0, r3, [r2]
    ecb8:	2800      	cmp	r0, #0
    ecba:	d1f9      	bne.n	ecb0 <bsd_os_init+0xc>
	sys_slist_init(&sleeping_threads);
	atomic_clear(&rpc_event_cnt);

	read_task_create();
    ecbc:	f00a ff80 	bl	19bc0 <read_task_create>

	/* Configure and enable modem tracing over UART. */
	trace_uart_init();
	trace_task_create();
}
    ecc0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	trace_task_create();
    ecc4:	f00a bf71 	b.w	19baa <trace_task_create>
    ecc8:	20020068 	.word	0x20020068
    eccc:	20020064 	.word	0x20020064

0000ecd0 <z_to_nrf_optname>:
static int z_to_nrf_optname(int z_in_level, int z_in_optname,
			    int *nrf_out_optname)
{
	int retval = 0;

	switch (z_in_level) {
    ecd0:	f5b0 7f8d 	cmp.w	r0, #282	; 0x11a
    ecd4:	d03c      	beq.n	ed50 <z_to_nrf_optname+0x80>
    ecd6:	dc04      	bgt.n	ece2 <z_to_nrf_optname+0x12>
    ecd8:	2801      	cmp	r0, #1
    ecda:	d044      	beq.n	ed66 <z_to_nrf_optname+0x96>
			break;
		}
		break;

	default:
		retval = -1;
    ecdc:	f04f 30ff 	mov.w	r0, #4294967295
		break;
	}

	return retval;
}
    ece0:	4770      	bx	lr
	switch (z_in_level) {
    ece2:	f240 2302 	movw	r3, #514	; 0x202
    ece6:	4298      	cmp	r0, r3
    ece8:	d052      	beq.n	ed90 <z_to_nrf_optname+0xc0>
    ecea:	f240 2303 	movw	r3, #515	; 0x203
    ecee:	4298      	cmp	r0, r3
    ecf0:	d1f4      	bne.n	ecdc <z_to_nrf_optname+0xc>
		switch (z_in_optname) {
    ecf2:	3901      	subs	r1, #1
    ecf4:	2913      	cmp	r1, #19
    ecf6:	d8f1      	bhi.n	ecdc <z_to_nrf_optname+0xc>
    ecf8:	a301      	add	r3, pc, #4	; (adr r3, ed00 <z_to_nrf_optname+0x30>)
    ecfa:	f853 f021 	ldr.w	pc, [r3, r1, lsl #2]
    ecfe:	bf00      	nop
    ed00:	0000ed9d 	.word	0x0000ed9d
    ed04:	0000ed61 	.word	0x0000ed61
    ed08:	0000ed81 	.word	0x0000ed81
    ed0c:	0000ed73 	.word	0x0000ed73
    ed10:	0000ed85 	.word	0x0000ed85
    ed14:	0000ed89 	.word	0x0000ed89
    ed18:	0000ed8d 	.word	0x0000ed8d
    ed1c:	0000ecdd 	.word	0x0000ecdd
    ed20:	0000ecdd 	.word	0x0000ecdd
    ed24:	0000ecdd 	.word	0x0000ecdd
    ed28:	0000ecdd 	.word	0x0000ecdd
    ed2c:	0000ecdd 	.word	0x0000ecdd
    ed30:	0000ecdd 	.word	0x0000ecdd
    ed34:	0000ecdd 	.word	0x0000ecdd
    ed38:	0000ecdd 	.word	0x0000ecdd
    ed3c:	0000ecdd 	.word	0x0000ecdd
    ed40:	0000ecdd 	.word	0x0000ecdd
    ed44:	0000ecdd 	.word	0x0000ecdd
    ed48:	0000ecdd 	.word	0x0000ecdd
    ed4c:	0000ed77 	.word	0x0000ed77
		switch (z_in_optname) {
    ed50:	3901      	subs	r1, #1
    ed52:	2905      	cmp	r1, #5
    ed54:	d8c2      	bhi.n	ecdc <z_to_nrf_optname+0xc>
    ed56:	e8df f001 	tbb	[pc, r1]
    ed5a:	1503      	.short	0x1503
    ed5c:	210c1917 	.word	0x210c1917
			*nrf_out_optname = NRF_SO_SEC_TAG_LIST;
    ed60:	2302      	movs	r3, #2
			*nrf_out_optname = NRF_SO_DFU_OFFSET;
    ed62:	6013      	str	r3, [r2, #0]
    ed64:	e00a      	b.n	ed7c <z_to_nrf_optname+0xac>
		switch (z_in_optname) {
    ed66:	2914      	cmp	r1, #20
    ed68:	d005      	beq.n	ed76 <z_to_nrf_optname+0xa6>
    ed6a:	2919      	cmp	r1, #25
    ed6c:	d005      	beq.n	ed7a <z_to_nrf_optname+0xaa>
    ed6e:	2904      	cmp	r1, #4
    ed70:	d1b4      	bne.n	ecdc <z_to_nrf_optname+0xc>
			*nrf_out_optname = NRF_SO_SEC_PEER_VERIFY;
    ed72:	2304      	movs	r3, #4
    ed74:	e7f5      	b.n	ed62 <z_to_nrf_optname+0x92>
			*nrf_out_optname = NRF_SO_RCVTIMEO;
    ed76:	2314      	movs	r3, #20
    ed78:	e7f3      	b.n	ed62 <z_to_nrf_optname+0x92>
			*nrf_out_optname = NRF_SO_BINDTODEVICE;
    ed7a:	6011      	str	r1, [r2, #0]
	int retval = 0;
    ed7c:	2000      	movs	r0, #0
			break;
    ed7e:	4770      	bx	lr
			*nrf_out_optname = NRF_SO_DFU_TIMEO;
    ed80:	2303      	movs	r3, #3
    ed82:	e7ee      	b.n	ed62 <z_to_nrf_optname+0x92>
			*nrf_out_optname = NRF_SO_DFU_REVERT;
    ed84:	2305      	movs	r3, #5
    ed86:	e7ec      	b.n	ed62 <z_to_nrf_optname+0x92>
			*nrf_out_optname = NRF_SO_DFU_BACKUP_DELETE;
    ed88:	2306      	movs	r3, #6
    ed8a:	e7ea      	b.n	ed62 <z_to_nrf_optname+0x92>
			*nrf_out_optname = NRF_SO_DFU_OFFSET;
    ed8c:	2307      	movs	r3, #7
    ed8e:	e7e8      	b.n	ed62 <z_to_nrf_optname+0x92>
		switch (z_in_optname) {
    ed90:	2902      	cmp	r1, #2
    ed92:	d0e5      	beq.n	ed60 <z_to_nrf_optname+0x90>
    ed94:	2903      	cmp	r1, #3
    ed96:	d0f3      	beq.n	ed80 <z_to_nrf_optname+0xb0>
    ed98:	2901      	cmp	r1, #1
    ed9a:	d19f      	bne.n	ecdc <z_to_nrf_optname+0xc>
			*nrf_out_optname = NRF_SO_SEC_ROLE;
    ed9c:	2301      	movs	r3, #1
    ed9e:	e7e0      	b.n	ed62 <z_to_nrf_optname+0x92>

0000eda0 <nrf91_socket_iface_init>:

static void nrf91_socket_iface_init(struct net_if *iface)
{
	nrf91_socket_iface_data.iface = iface;

	iface->if_dev->offloaded = true;
    eda0:	2201      	movs	r2, #1
	nrf91_socket_iface_data.iface = iface;
    eda2:	4b03      	ldr	r3, [pc, #12]	; (edb0 <nrf91_socket_iface_init+0x10>)
    eda4:	6018      	str	r0, [r3, #0]
	iface->if_dev->offloaded = true;
    eda6:	6803      	ldr	r3, [r0, #0]

	socket_offload_register(&nrf91_socket_offload_ops);
    eda8:	4802      	ldr	r0, [pc, #8]	; (edb4 <nrf91_socket_iface_init+0x14>)
	iface->if_dev->offloaded = true;
    edaa:	769a      	strb	r2, [r3, #26]
	socket_offload_register(&nrf91_socket_offload_ops);
    edac:	f7fd bd18 	b.w	c7e0 <socket_offload_register>
    edb0:	200200c0 	.word	0x200200c0
    edb4:	0001a850 	.word	0x0001a850

0000edb8 <check_ext_api_requests>:
	}
};
#endif

static int check_ext_api_requests(struct device *dev)
{
    edb8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	(void)dev;

	const struct fw_info_ext_api_request *ext_api_req =
			skip_ext_apis(&m_firmware_info);

	for (u32_t i = 0; i < m_firmware_info.ext_api_request_num; i++) {
    edbc:	2500      	movs	r5, #0
			skip_ext_apis(&m_firmware_info);
    edbe:	4c21      	ldr	r4, [pc, #132]	; (ee44 <check_ext_api_requests+0x8c>)
 */
static inline const struct fw_info_ext_api *fw_info_ext_api_check(
							u32_t ext_api_addr)
{
	const struct fw_info_ext_api *ext_api;
	const u32_t ext_api_magic[] = {EXT_API_MAGIC};
    edc0:	4e21      	ldr	r6, [pc, #132]	; (ee48 <check_ext_api_requests+0x90>)
	for (u32_t i = 0; i < m_firmware_info.ext_api_request_num; i++) {
    edc2:	f854 8c04 	ldr.w	r8, [r4, #-4]
			/* EXT_API hard requirement not met. */
			printk("ERROR: Cannot fulfill EXT_API request.\r\n");
			k_panic();
		} else {
			/* EXT_API soft requirement not met. */
			printk("WARNING: Optional EXT_API request not "
    edc6:	f8df 9088 	ldr.w	r9, [pc, #136]	; ee50 <check_ext_api_requests+0x98>
{
    edca:	b085      	sub	sp, #20
	for (u32_t i = 0; i < m_firmware_info.ext_api_request_num; i++) {
    edcc:	45a8      	cmp	r8, r5
    edce:	d803      	bhi.n	edd8 <check_ext_api_requests+0x20>
		}
		ADVANCE_EXT_API_REQ(ext_api_req);
	}

	return 0;
}
    edd0:	2000      	movs	r0, #0
    edd2:	b005      	add	sp, #20
    edd4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		if (fw_info_ext_api_check((u32_t)*(ext_api_req->ext_api))
    edd8:	6a63      	ldr	r3, [r4, #36]	; 0x24
    edda:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
    edde:	681f      	ldr	r7, [r3, #0]
    ede0:	ab01      	add	r3, sp, #4
    ede2:	e883 0007 	stmia.w	r3, {r0, r1, r2}

	ext_api = (const struct fw_info_ext_api *)(ext_api_addr);
	if (memcmp(ext_api->magic, ext_api_magic, CONFIG_FW_INFO_MAGIC_LEN)
    ede6:	220c      	movs	r2, #12
    ede8:	4619      	mov	r1, r3
    edea:	4638      	mov	r0, r7
    edec:	f00a fd50 	bl	19890 <memcmp>
    edf0:	b990      	cbnz	r0, ee18 <check_ext_api_requests+0x60>
    edf2:	b18f      	cbz	r7, ee18 <check_ext_api_requests+0x60>
			&& ext_api_satisfies_req(*(ext_api_req->ext_api),
    edf4:	6a63      	ldr	r3, [r4, #36]	; 0x24
	const u32_t req_id = ext_api_req->request.ext_api_id;
    edf6:	6921      	ldr	r1, [r4, #16]
			&& ext_api_satisfies_req(*(ext_api_req->ext_api),
    edf8:	681b      	ldr	r3, [r3, #0]
	return ((ext_api->ext_api_id == req_id)
    edfa:	691a      	ldr	r2, [r3, #16]
		&& ((ext_api->ext_api_flags & req_flags) == req_flags));
    edfc:	4291      	cmp	r1, r2
    edfe:	d10b      	bne.n	ee18 <check_ext_api_requests+0x60>
		&&  (ext_api->ext_api_version >= req_min_version)
    ee00:	699a      	ldr	r2, [r3, #24]
	const u32_t req_min_version = ext_api_req->request.ext_api_version;
    ee02:	69a1      	ldr	r1, [r4, #24]
		&&  (ext_api->ext_api_version >= req_min_version)
    ee04:	4291      	cmp	r1, r2
    ee06:	d807      	bhi.n	ee18 <check_ext_api_requests+0x60>
	const u32_t req_max_version = ext_api_req->ext_api_max_version;
    ee08:	69e1      	ldr	r1, [r4, #28]
		&&  (ext_api->ext_api_version <  req_max_version)
    ee0a:	4291      	cmp	r1, r2
    ee0c:	d904      	bls.n	ee18 <check_ext_api_requests+0x60>
	const u32_t req_flags = ext_api_req->request.ext_api_flags;
    ee0e:	6962      	ldr	r2, [r4, #20]
		&& ((ext_api->ext_api_flags & req_flags) == req_flags));
    ee10:	695b      	ldr	r3, [r3, #20]
    ee12:	ea32 0303 	bics.w	r3, r2, r3
    ee16:	d00a      	beq.n	ee2e <check_ext_api_requests+0x76>
		} else if (ext_api_req->required) {
    ee18:	6a27      	ldr	r7, [r4, #32]
    ee1a:	b167      	cbz	r7, ee36 <check_ext_api_requests+0x7e>
			printk("ERROR: Cannot fulfill EXT_API request.\r\n");
    ee1c:	480b      	ldr	r0, [pc, #44]	; (ee4c <check_ext_api_requests+0x94>)
    ee1e:	f00a fbc4 	bl	195aa <printk>
			k_panic();
    ee22:	4040      	eors	r0, r0
    ee24:	f380 8811 	msr	BASEPRI, r0
    ee28:	f04f 0004 	mov.w	r0, #4
    ee2c:	df02      	svc	2
		ADVANCE_EXT_API_REQ(ext_api_req);
    ee2e:	68e3      	ldr	r3, [r4, #12]
	for (u32_t i = 0; i < m_firmware_info.ext_api_request_num; i++) {
    ee30:	3501      	adds	r5, #1
		ADVANCE_EXT_API_REQ(ext_api_req);
    ee32:	441c      	add	r4, r3
    ee34:	e7ca      	b.n	edcc <check_ext_api_requests+0x14>
			printk("WARNING: Optional EXT_API request not "
    ee36:	4648      	mov	r0, r9
    ee38:	f00a fbb7 	bl	195aa <printk>
			*ext_api_req->ext_api = NULL;
    ee3c:	6a63      	ldr	r3, [r4, #36]	; 0x24
    ee3e:	601f      	str	r7, [r3, #0]
    ee40:	e7f5      	b.n	ee2e <check_ext_api_requests+0x76>
    ee42:	bf00      	nop
    ee44:	0000c23c 	.word	0x0000c23c
    ee48:	0001a7b8 	.word	0x0001a7b8
    ee4c:	0001b4f1 	.word	0x0001b4f1
    ee50:	0001b51a 	.word	0x0001b51a

0000ee54 <rpc_logobj_client_evt_handler>:
    ee54:	b120      	cbz	r0, ee60 <rpc_logobj_client_evt_handler+0xc>
    ee56:	f850 1b08 	ldr.w	r1, [r0], #8
    ee5a:	0c09      	lsrs	r1, r1, #16
    ee5c:	f000 b852 	b.w	ef04 <logobj_event_handler>
    ee60:	4770      	bx	lr
    ee62:	bf00      	nop

0000ee64 <rpc_logobj_client_init>:
    ee64:	4801      	ldr	r0, [pc, #4]	; (ee6c <rpc_logobj_client_init+0x8>)
    ee66:	f006 bbcf 	b.w	15608 <rpc_client_register>
    ee6a:	bf00      	nop
    ee6c:	0001a890 	.word	0x0001a890

0000ee70 <rpc_logobj_client_request_alloc>:
    ee70:	2300      	movs	r3, #0
    ee72:	b510      	push	{r4, lr}
    ee74:	b082      	sub	sp, #8
    ee76:	9301      	str	r3, [sp, #4]
    ee78:	b961      	cbnz	r1, ee94 <rpc_logobj_client_request_alloc+0x24>
    ee7a:	b170      	cbz	r0, ee9a <rpc_logobj_client_request_alloc+0x2a>
    ee7c:	4604      	mov	r4, r0
    ee7e:	aa01      	add	r2, sp, #4
    ee80:	2009      	movs	r0, #9
    ee82:	f006 fdf9 	bl	15a78 <rpc_message_alloc>
    ee86:	b918      	cbnz	r0, ee90 <rpc_logobj_client_request_alloc+0x20>
    ee88:	9b01      	ldr	r3, [sp, #4]
    ee8a:	b10b      	cbz	r3, ee90 <rpc_logobj_client_request_alloc+0x20>
    ee8c:	3308      	adds	r3, #8
    ee8e:	6023      	str	r3, [r4, #0]
    ee90:	b002      	add	sp, #8
    ee92:	bd10      	pop	{r4, pc}
    ee94:	200f      	movs	r0, #15
    ee96:	b002      	add	sp, #8
    ee98:	bd10      	pop	{r4, pc}
    ee9a:	200e      	movs	r0, #14
    ee9c:	b002      	add	sp, #8
    ee9e:	bd10      	pop	{r4, pc}

0000eea0 <rpc_logobj_client_request_send>:
    eea0:	f401 4370 	and.w	r3, r1, #61440	; 0xf000
    eea4:	f5b3 4fe0 	cmp.w	r3, #28672	; 0x7000
    eea8:	d10b      	bne.n	eec2 <rpc_logobj_client_request_send+0x22>
    eeaa:	b160      	cbz	r0, eec6 <rpc_logobj_client_request_send+0x26>
    eeac:	4603      	mov	r3, r0
    eeae:	f830 2c08 	ldrh.w	r2, [r0, #-8]
    eeb2:	2009      	movs	r0, #9
    eeb4:	ea42 4101 	orr.w	r1, r2, r1, lsl #16
    eeb8:	f843 1d08 	str.w	r1, [r3, #-8]!
    eebc:	4619      	mov	r1, r3
    eebe:	f006 bdc3 	b.w	15a48 <rpc_message_send>
    eec2:	200f      	movs	r0, #15
    eec4:	4770      	bx	lr
    eec6:	200e      	movs	r0, #14
    eec8:	4770      	bx	lr
    eeca:	bf00      	nop

0000eecc <rpc_logobj_client_message_free>:
    eecc:	b120      	cbz	r0, eed8 <rpc_logobj_client_message_free+0xc>
    eece:	f1a0 0108 	sub.w	r1, r0, #8
    eed2:	2009      	movs	r0, #9
    eed4:	f006 be02 	b.w	15adc <rpc_message_free>
    eed8:	200e      	movs	r0, #14
    eeda:	4770      	bx	lr

0000eedc <rpc_logobj_client_data_free>:
    eedc:	b118      	cbz	r0, eee6 <rpc_logobj_client_data_free+0xa>
    eede:	4601      	mov	r1, r0
    eee0:	2009      	movs	r0, #9
    eee2:	f006 bf0d 	b.w	15d00 <rpc_message_data_free>
    eee6:	200e      	movs	r0, #14
    eee8:	4770      	bx	lr
    eeea:	bf00      	nop

0000eeec <packet_free_cb>:
    eeec:	b510      	push	{r4, lr}
    eeee:	4604      	mov	r4, r0
    eef0:	6800      	ldr	r0, [r0, #0]
    eef2:	f7ff fff3 	bl	eedc <rpc_logobj_client_data_free>
    eef6:	68a0      	ldr	r0, [r4, #8]
    eef8:	b118      	cbz	r0, ef02 <packet_free_cb+0x16>
    eefa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    eefe:	f001 b935 	b.w	1016c <nrf_free>
    ef02:	bd10      	pop	{r4, pc}

0000ef04 <logobj_event_handler>:
    ef04:	b530      	push	{r4, r5, lr}
    ef06:	4b3b      	ldr	r3, [pc, #236]	; (eff4 <logobj_event_handler+0xf0>)
    ef08:	b085      	sub	sp, #20
    ef0a:	681d      	ldr	r5, [r3, #0]
    ef0c:	2d00      	cmp	r5, #0
    ef0e:	d04c      	beq.n	efaa <logobj_event_handler+0xa6>
    ef10:	f248 0302 	movw	r3, #32770	; 0x8002
    ef14:	4299      	cmp	r1, r3
    ef16:	d053      	beq.n	efc0 <logobj_event_handler+0xbc>
    ef18:	d91c      	bls.n	ef54 <logobj_event_handler+0x50>
    ef1a:	f248 0303 	movw	r3, #32771	; 0x8003
    ef1e:	4299      	cmp	r1, r3
    ef20:	d05a      	beq.n	efd8 <logobj_event_handler+0xd4>
    ef22:	f249 0301 	movw	r3, #36865	; 0x9001
    ef26:	4299      	cmp	r1, r3
    ef28:	d147      	bne.n	efba <logobj_event_handler+0xb6>
    ef2a:	2400      	movs	r4, #0
    ef2c:	6843      	ldr	r3, [r0, #4]
    ef2e:	6802      	ldr	r2, [r0, #0]
    ef30:	e9cd 4402 	strd	r4, r4, [sp, #8]
    ef34:	e9cd 2300 	strd	r2, r3, [sp]
    ef38:	69e8      	ldr	r0, [r5, #28]
    ef3a:	4669      	mov	r1, sp
    ef3c:	6803      	ldr	r3, [r0, #0]
    ef3e:	685b      	ldr	r3, [r3, #4]
    ef40:	4798      	blx	r3
    ef42:	3001      	adds	r0, #1
    ef44:	d04e      	beq.n	efe4 <logobj_event_handler+0xe0>
    ef46:	4620      	mov	r0, r4
    ef48:	682b      	ldr	r3, [r5, #0]
    ef4a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
    ef4e:	602b      	str	r3, [r5, #0]
    ef50:	b005      	add	sp, #20
    ef52:	bd30      	pop	{r4, r5, pc}
    ef54:	f248 0301 	movw	r3, #32769	; 0x8001
    ef58:	4299      	cmp	r1, r3
    ef5a:	d12e      	bne.n	efba <logobj_event_handler+0xb6>
    ef5c:	68c3      	ldr	r3, [r0, #12]
    ef5e:	2b00      	cmp	r3, #0
    ef60:	d135      	bne.n	efce <logobj_event_handler+0xca>
    ef62:	6828      	ldr	r0, [r5, #0]
    ef64:	f410 0080 	ands.w	r0, r0, #4194304	; 0x400000
    ef68:	d03e      	beq.n	efe8 <logobj_event_handler+0xe4>
    ef6a:	682b      	ldr	r3, [r5, #0]
    ef6c:	b29b      	uxth	r3, r3
    ef6e:	2b01      	cmp	r3, #1
    ef70:	d105      	bne.n	ef7e <logobj_event_handler+0x7a>
    ef72:	682b      	ldr	r3, [r5, #0]
    ef74:	0c1b      	lsrs	r3, r3, #16
    ef76:	041b      	lsls	r3, r3, #16
    ef78:	f043 0302 	orr.w	r3, r3, #2
    ef7c:	602b      	str	r3, [r5, #0]
    ef7e:	4b1e      	ldr	r3, [pc, #120]	; (eff8 <logobj_event_handler+0xf4>)
    ef80:	781a      	ldrb	r2, [r3, #0]
    ef82:	f002 01ff 	and.w	r1, r2, #255	; 0xff
    ef86:	2a00      	cmp	r2, #0
    ef88:	d031      	beq.n	efee <logobj_event_handler+0xea>
    ef8a:	4a1c      	ldr	r2, [pc, #112]	; (effc <logobj_event_handler+0xf8>)
    ef8c:	7811      	ldrb	r1, [r2, #0]
    ef8e:	b909      	cbnz	r1, ef94 <logobj_event_handler+0x90>
    ef90:	2101      	movs	r1, #1
    ef92:	7011      	strb	r1, [r2, #0]
    ef94:	2000      	movs	r0, #0
    ef96:	7018      	strb	r0, [r3, #0]
    ef98:	682b      	ldr	r3, [r5, #0]
    ef9a:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
    ef9e:	602b      	str	r3, [r5, #0]
    efa0:	682b      	ldr	r3, [r5, #0]
    efa2:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
    efa6:	602b      	str	r3, [r5, #0]
    efa8:	e7d2      	b.n	ef50 <logobj_event_handler+0x4c>
    efaa:	6800      	ldr	r0, [r0, #0]
    efac:	2800      	cmp	r0, #0
    efae:	d0cf      	beq.n	ef50 <logobj_event_handler+0x4c>
    efb0:	f7ff ff94 	bl	eedc <rpc_logobj_client_data_free>
    efb4:	4628      	mov	r0, r5
    efb6:	b005      	add	sp, #20
    efb8:	bd30      	pop	{r4, r5, pc}
    efba:	2000      	movs	r0, #0
    efbc:	b005      	add	sp, #20
    efbe:	bd30      	pop	{r4, r5, pc}
    efc0:	682b      	ldr	r3, [r5, #0]
    efc2:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
    efc6:	d00b      	beq.n	efe0 <logobj_event_handler+0xdc>
    efc8:	68c0      	ldr	r0, [r0, #12]
    efca:	2800      	cmp	r0, #0
    efcc:	d0e4      	beq.n	ef98 <logobj_event_handler+0x94>
    efce:	230e      	movs	r3, #14
    efd0:	2000      	movs	r0, #0
    efd2:	606b      	str	r3, [r5, #4]
    efd4:	b005      	add	sp, #20
    efd6:	bd30      	pop	{r4, r5, pc}
    efd8:	68c3      	ldr	r3, [r0, #12]
    efda:	2b01      	cmp	r3, #1
    efdc:	d1a5      	bne.n	ef2a <logobj_event_handler+0x26>
    efde:	e7f6      	b.n	efce <logobj_event_handler+0xca>
    efe0:	4618      	mov	r0, r3
    efe2:	e7b5      	b.n	ef50 <logobj_event_handler+0x4c>
    efe4:	2002      	movs	r0, #2
    efe6:	e7b3      	b.n	ef50 <logobj_event_handler+0x4c>
    efe8:	230e      	movs	r3, #14
    efea:	606b      	str	r3, [r5, #4]
    efec:	e7b0      	b.n	ef50 <logobj_event_handler+0x4c>
    efee:	4a03      	ldr	r2, [pc, #12]	; (effc <logobj_event_handler+0xf8>)
    eff0:	7011      	strb	r1, [r2, #0]
    eff2:	e7cf      	b.n	ef94 <logobj_event_handler+0x90>
    eff4:	200200c8 	.word	0x200200c8
    eff8:	200249cc 	.word	0x200249cc
    effc:	200249cd 	.word	0x200249cd

0000f000 <logobj_interface_init>:
    f000:	2300      	movs	r3, #0
    f002:	b510      	push	{r4, lr}
    f004:	4907      	ldr	r1, [pc, #28]	; (f024 <logobj_interface_init+0x24>)
    f006:	4a08      	ldr	r2, [pc, #32]	; (f028 <logobj_interface_init+0x28>)
    f008:	4c08      	ldr	r4, [pc, #32]	; (f02c <logobj_interface_init+0x2c>)
    f00a:	4809      	ldr	r0, [pc, #36]	; (f030 <logobj_interface_init+0x30>)
    f00c:	7023      	strb	r3, [r4, #0]
    f00e:	6003      	str	r3, [r0, #0]
    f010:	700b      	strb	r3, [r1, #0]
    f012:	6013      	str	r3, [r2, #0]
    f014:	f7ff ff26 	bl	ee64 <rpc_logobj_client_init>
    f018:	3000      	adds	r0, #0
    f01a:	bf18      	it	ne
    f01c:	2001      	movne	r0, #1
    f01e:	4240      	negs	r0, r0
    f020:	bd10      	pop	{r4, pc}
    f022:	bf00      	nop
    f024:	200249cc 	.word	0x200249cc
    f028:	200200c4 	.word	0x200200c4
    f02c:	200249cd 	.word	0x200249cd
    f030:	200200c8 	.word	0x200200c8

0000f034 <logobj_interface_open>:
    f034:	2300      	movs	r3, #0
    f036:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    f03a:	2866      	cmp	r0, #102	; 0x66
    f03c:	b082      	sub	sp, #8
    f03e:	9300      	str	r3, [sp, #0]
    f040:	d172      	bne.n	f128 <logobj_interface_open+0xf4>
    f042:	2902      	cmp	r1, #2
    f044:	4689      	mov	r9, r1
    f046:	d16f      	bne.n	f128 <logobj_interface_open+0xf4>
    f048:	f240 2305 	movw	r3, #517	; 0x205
    f04c:	429a      	cmp	r2, r3
    f04e:	4692      	mov	sl, r2
    f050:	d16a      	bne.n	f128 <logobj_interface_open+0xf4>
    f052:	4f48      	ldr	r7, [pc, #288]	; (f174 <logobj_interface_open+0x140>)
    f054:	683d      	ldr	r5, [r7, #0]
    f056:	2d00      	cmp	r5, #0
    f058:	d17c      	bne.n	f154 <logobj_interface_open+0x120>
    f05a:	4680      	mov	r8, r0
    f05c:	4a46      	ldr	r2, [pc, #280]	; (f178 <logobj_interface_open+0x144>)
    f05e:	4668      	mov	r0, sp
    f060:	f006 f870 	bl	15144 <interface_socket_allocate>
    f064:	9b00      	ldr	r3, [sp, #0]
    f066:	4606      	mov	r6, r0
    f068:	2b00      	cmp	r3, #0
    f06a:	d07d      	beq.n	f168 <logobj_interface_open+0x134>
    f06c:	4629      	mov	r1, r5
    f06e:	2204      	movs	r2, #4
    f070:	4842      	ldr	r0, [pc, #264]	; (f17c <logobj_interface_open+0x148>)
    f072:	603b      	str	r3, [r7, #0]
    f074:	f00a fc46 	bl	19904 <memset>
    f078:	9c00      	ldr	r4, [sp, #0]
    f07a:	4629      	mov	r1, r5
    f07c:	e9c4 8903 	strd	r8, r9, [r4, #12]
    f080:	f8c4 a014 	str.w	sl, [r4, #20]
    f084:	a801      	add	r0, sp, #4
    f086:	f7ff fef3 	bl	ee70 <rpc_logobj_client_request_alloc>
    f08a:	2800      	cmp	r0, #0
    f08c:	d13c      	bne.n	f108 <logobj_interface_open+0xd4>
    f08e:	2201      	movs	r2, #1
    f090:	2104      	movs	r1, #4
    f092:	9b01      	ldr	r3, [sp, #4]
    f094:	4d3a      	ldr	r5, [pc, #232]	; (f180 <logobj_interface_open+0x14c>)
    f096:	7358      	strb	r0, [r3, #13]
    f098:	7398      	strb	r0, [r3, #14]
    f09a:	73d8      	strb	r0, [r3, #15]
    f09c:	7258      	strb	r0, [r3, #9]
    f09e:	7298      	strb	r0, [r3, #10]
    f0a0:	72d8      	strb	r0, [r3, #11]
    f0a2:	7219      	strb	r1, [r3, #8]
    f0a4:	702a      	strb	r2, [r5, #0]
    f0a6:	731a      	strb	r2, [r3, #12]
    f0a8:	6822      	ldr	r2, [r4, #0]
    f0aa:	4618      	mov	r0, r3
    f0ac:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
    f0b0:	6022      	str	r2, [r4, #0]
    f0b2:	f247 0101 	movw	r1, #28673	; 0x7001
    f0b6:	f7ff fef3 	bl	eea0 <rpc_logobj_client_request_send>
    f0ba:	bb38      	cbnz	r0, f10c <logobj_interface_open+0xd8>
    f0bc:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
    f0c0:	f04f 33ff 	mov.w	r3, #4294967295
    f0c4:	4611      	mov	r1, r2
    f0c6:	4630      	mov	r0, r6
    f0c8:	f006 f8ee 	bl	152a8 <interface_socket_wait>
    f0cc:	4604      	mov	r4, r0
    f0ce:	b310      	cbz	r0, f116 <logobj_interface_open+0xe2>
    f0d0:	9a00      	ldr	r2, [sp, #0]
    f0d2:	2e00      	cmp	r6, #0
    f0d4:	6813      	ldr	r3, [r2, #0]
    f0d6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
    f0da:	6013      	str	r3, [r2, #0]
    f0dc:	9a00      	ldr	r2, [sp, #0]
    f0de:	6813      	ldr	r3, [r2, #0]
    f0e0:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
    f0e4:	6013      	str	r3, [r2, #0]
    f0e6:	9a00      	ldr	r2, [sp, #0]
    f0e8:	6813      	ldr	r3, [r2, #0]
    f0ea:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
    f0ee:	6013      	str	r3, [r2, #0]
    f0f0:	da36      	bge.n	f160 <logobj_interface_open+0x12c>
    f0f2:	2300      	movs	r3, #0
    f0f4:	4620      	mov	r0, r4
    f0f6:	603b      	str	r3, [r7, #0]
    f0f8:	f04f 36ff 	mov.w	r6, #4294967295
    f0fc:	f7ff fcf8 	bl	eaf0 <bsd_os_errno_set>
    f100:	4630      	mov	r0, r6
    f102:	b002      	add	sp, #8
    f104:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    f108:	240c      	movs	r4, #12
    f10a:	e7e1      	b.n	f0d0 <logobj_interface_open+0x9c>
    f10c:	9801      	ldr	r0, [sp, #4]
    f10e:	f7ff fedd 	bl	eecc <rpc_logobj_client_message_free>
    f112:	2405      	movs	r4, #5
    f114:	e7dc      	b.n	f0d0 <logobj_interface_open+0x9c>
    f116:	4630      	mov	r0, r6
    f118:	f006 f93a 	bl	15390 <interface_socket_from_handle_get>
    f11c:	b150      	cbz	r0, f134 <logobj_interface_open+0x100>
    f11e:	6844      	ldr	r4, [r0, #4]
    f120:	b144      	cbz	r4, f134 <logobj_interface_open+0x100>
    f122:	2300      	movs	r3, #0
    f124:	6043      	str	r3, [r0, #4]
    f126:	e7d3      	b.n	f0d0 <logobj_interface_open+0x9c>
    f128:	2016      	movs	r0, #22
    f12a:	f7ff fce1 	bl	eaf0 <bsd_os_errno_set>
    f12e:	f04f 36ff 	mov.w	r6, #4294967295
    f132:	e7e5      	b.n	f100 <logobj_interface_open+0xcc>
    f134:	9a00      	ldr	r2, [sp, #0]
    f136:	6813      	ldr	r3, [r2, #0]
    f138:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
    f13c:	6013      	str	r3, [r2, #0]
    f13e:	9a00      	ldr	r2, [sp, #0]
    f140:	6813      	ldr	r3, [r2, #0]
    f142:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
    f146:	6013      	str	r3, [r2, #0]
    f148:	9a00      	ldr	r2, [sp, #0]
    f14a:	6813      	ldr	r3, [r2, #0]
    f14c:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
    f150:	6013      	str	r3, [r2, #0]
    f152:	e7d5      	b.n	f100 <logobj_interface_open+0xcc>
    f154:	2001      	movs	r0, #1
    f156:	f7ff fccb 	bl	eaf0 <bsd_os_errno_set>
    f15a:	f04f 36ff 	mov.w	r6, #4294967295
    f15e:	e7cf      	b.n	f100 <logobj_interface_open+0xcc>
    f160:	4630      	mov	r0, r6
    f162:	f006 f853 	bl	1520c <interface_socket_free>
    f166:	e7c4      	b.n	f0f2 <logobj_interface_open+0xbe>
    f168:	2018      	movs	r0, #24
    f16a:	f7ff fcc1 	bl	eaf0 <bsd_os_errno_set>
    f16e:	f04f 36ff 	mov.w	r6, #4294967295
    f172:	e7c5      	b.n	f100 <logobj_interface_open+0xcc>
    f174:	200200c8 	.word	0x200200c8
    f178:	0000eeed 	.word	0x0000eeed
    f17c:	200200c4 	.word	0x200200c4
    f180:	200249cc 	.word	0x200249cc

0000f184 <logobj_interface_read>:
    f184:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    f188:	b085      	sub	sp, #20
    f18a:	2900      	cmp	r1, #0
    f18c:	d068      	beq.n	f260 <logobj_interface_read+0xdc>
    f18e:	2a00      	cmp	r2, #0
    f190:	4617      	mov	r7, r2
    f192:	dd65      	ble.n	f260 <logobj_interface_read+0xdc>
    f194:	461d      	mov	r5, r3
    f196:	4680      	mov	r8, r0
    f198:	460e      	mov	r6, r1
    f19a:	f006 f8f9 	bl	15390 <interface_socket_from_handle_get>
    f19e:	4604      	mov	r4, r0
    f1a0:	2800      	cmp	r0, #0
    f1a2:	d063      	beq.n	f26c <logobj_interface_read+0xe8>
    f1a4:	bb4d      	cbnz	r5, f1fa <logobj_interface_read+0x76>
    f1a6:	69e0      	ldr	r0, [r4, #28]
    f1a8:	07aa      	lsls	r2, r5, #30
    f1aa:	6803      	ldr	r3, [r0, #0]
    f1ac:	68db      	ldr	r3, [r3, #12]
    f1ae:	d52d      	bpl.n	f20c <logobj_interface_read+0x88>
    f1b0:	4798      	blx	r3
    f1b2:	3001      	adds	r0, #1
    f1b4:	d044      	beq.n	f240 <logobj_interface_read+0xbc>
    f1b6:	6823      	ldr	r3, [r4, #0]
    f1b8:	69e0      	ldr	r0, [r4, #28]
    f1ba:	f413 3380 	ands.w	r3, r3, #65536	; 0x10000
    f1be:	d041      	beq.n	f244 <logobj_interface_read+0xc0>
    f1c0:	2100      	movs	r1, #0
    f1c2:	6823      	ldr	r3, [r4, #0]
    f1c4:	462a      	mov	r2, r5
    f1c6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
    f1ca:	6023      	str	r3, [r4, #0]
    f1cc:	e9cd 1102 	strd	r1, r1, [sp, #8]
    f1d0:	e9cd 6700 	strd	r6, r7, [sp]
    f1d4:	6803      	ldr	r3, [r0, #0]
    f1d6:	4669      	mov	r1, sp
    f1d8:	689b      	ldr	r3, [r3, #8]
    f1da:	4798      	blx	r3
    f1dc:	4605      	mov	r5, r0
    f1de:	69e0      	ldr	r0, [r4, #28]
    f1e0:	6803      	ldr	r3, [r0, #0]
    f1e2:	68db      	ldr	r3, [r3, #12]
    f1e4:	4798      	blx	r3
    f1e6:	3001      	adds	r0, #1
    f1e8:	d003      	beq.n	f1f2 <logobj_interface_read+0x6e>
    f1ea:	6823      	ldr	r3, [r4, #0]
    f1ec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
    f1f0:	6023      	str	r3, [r4, #0]
    f1f2:	4628      	mov	r0, r5
    f1f4:	b005      	add	sp, #20
    f1f6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    f1fa:	f015 0f0a 	tst.w	r5, #10
    f1fe:	d1d2      	bne.n	f1a6 <logobj_interface_read+0x22>
    f200:	202d      	movs	r0, #45	; 0x2d
    f202:	f7ff fc75 	bl	eaf0 <bsd_os_errno_set>
    f206:	f04f 35ff 	mov.w	r5, #4294967295
    f20a:	e7f2      	b.n	f1f2 <logobj_interface_read+0x6e>
    f20c:	6822      	ldr	r2, [r4, #0]
    f20e:	f012 5980 	ands.w	r9, r2, #268435456	; 0x10000000
    f212:	d1cd      	bne.n	f1b0 <logobj_interface_read+0x2c>
    f214:	4798      	blx	r3
    f216:	1c43      	adds	r3, r0, #1
    f218:	d1cd      	bne.n	f1b6 <logobj_interface_read+0x32>
    f21a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    f21e:	6a23      	ldr	r3, [r4, #32]
    f220:	4611      	mov	r1, r2
    f222:	2b00      	cmp	r3, #0
    f224:	bf08      	it	eq
    f226:	4603      	moveq	r3, r0
    f228:	4640      	mov	r0, r8
    f22a:	f006 f83d 	bl	152a8 <interface_socket_wait>
    f22e:	b158      	cbz	r0, f248 <logobj_interface_read+0xc4>
    f230:	f04f 35ff 	mov.w	r5, #4294967295
    f234:	f7ff fc5c 	bl	eaf0 <bsd_os_errno_set>
    f238:	4628      	mov	r0, r5
    f23a:	b005      	add	sp, #20
    f23c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    f240:	2023      	movs	r0, #35	; 0x23
    f242:	e7f5      	b.n	f230 <logobj_interface_read+0xac>
    f244:	461d      	mov	r5, r3
    f246:	e7cb      	b.n	f1e0 <logobj_interface_read+0x5c>
    f248:	4640      	mov	r0, r8
    f24a:	f006 f8a1 	bl	15390 <interface_socket_from_handle_get>
    f24e:	4603      	mov	r3, r0
    f250:	2800      	cmp	r0, #0
    f252:	d0b0      	beq.n	f1b6 <logobj_interface_read+0x32>
    f254:	6840      	ldr	r0, [r0, #4]
    f256:	2800      	cmp	r0, #0
    f258:	d0ad      	beq.n	f1b6 <logobj_interface_read+0x32>
    f25a:	f8c3 9004 	str.w	r9, [r3, #4]
    f25e:	e7e7      	b.n	f230 <logobj_interface_read+0xac>
    f260:	2016      	movs	r0, #22
    f262:	f7ff fc45 	bl	eaf0 <bsd_os_errno_set>
    f266:	f04f 35ff 	mov.w	r5, #4294967295
    f26a:	e7c2      	b.n	f1f2 <logobj_interface_read+0x6e>
    f26c:	2009      	movs	r0, #9
    f26e:	f7ff fc3f 	bl	eaf0 <bsd_os_errno_set>
    f272:	f04f 35ff 	mov.w	r5, #4294967295
    f276:	e7bc      	b.n	f1f2 <logobj_interface_read+0x6e>

0000f278 <logobj_interface_write>:
    f278:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    f27c:	b082      	sub	sp, #8
    f27e:	2900      	cmp	r1, #0
    f280:	d05e      	beq.n	f340 <logobj_interface_write+0xc8>
    f282:	2a04      	cmp	r2, #4
    f284:	d15c      	bne.n	f340 <logobj_interface_write+0xc8>
    f286:	461e      	mov	r6, r3
    f288:	4607      	mov	r7, r0
    f28a:	460d      	mov	r5, r1
    f28c:	f006 f880 	bl	15390 <interface_socket_from_handle_get>
    f290:	4604      	mov	r4, r0
    f292:	2800      	cmp	r0, #0
    f294:	d070      	beq.n	f378 <logobj_interface_write+0x100>
    f296:	b1e6      	cbz	r6, f2d2 <logobj_interface_write+0x5a>
    f298:	07b0      	lsls	r0, r6, #30
    f29a:	d567      	bpl.n	f36c <logobj_interface_write+0xf4>
    f29c:	6823      	ldr	r3, [r4, #0]
    f29e:	039b      	lsls	r3, r3, #14
    f2a0:	d560      	bpl.n	f364 <logobj_interface_write+0xec>
    f2a2:	2600      	movs	r6, #0
    f2a4:	6823      	ldr	r3, [r4, #0]
    f2a6:	2100      	movs	r1, #0
    f2a8:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
    f2ac:	6023      	str	r3, [r4, #0]
    f2ae:	a801      	add	r0, sp, #4
    f2b0:	f8d5 8000 	ldr.w	r8, [r5]
    f2b4:	f7ff fddc 	bl	ee70 <rpc_logobj_client_request_alloc>
    f2b8:	b198      	cbz	r0, f2e2 <logobj_interface_write+0x6a>
    f2ba:	200c      	movs	r0, #12
    f2bc:	6823      	ldr	r3, [r4, #0]
    f2be:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
    f2c2:	6023      	str	r3, [r4, #0]
    f2c4:	f7ff fc14 	bl	eaf0 <bsd_os_errno_set>
    f2c8:	f04f 30ff 	mov.w	r0, #4294967295
    f2cc:	b002      	add	sp, #8
    f2ce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    f2d2:	6803      	ldr	r3, [r0, #0]
    f2d4:	00d9      	lsls	r1, r3, #3
    f2d6:	d4e1      	bmi.n	f29c <logobj_interface_write+0x24>
    f2d8:	6803      	ldr	r3, [r0, #0]
    f2da:	039a      	lsls	r2, r3, #14
    f2dc:	d544      	bpl.n	f368 <logobj_interface_write+0xf0>
    f2de:	2601      	movs	r6, #1
    f2e0:	e7e0      	b.n	f2a4 <logobj_interface_write+0x2c>
    f2e2:	2504      	movs	r5, #4
    f2e4:	9b01      	ldr	r3, [sp, #4]
    f2e6:	f247 0103 	movw	r1, #28675	; 0x7003
    f2ea:	f8c3 800c 	str.w	r8, [r3, #12]
    f2ee:	7258      	strb	r0, [r3, #9]
    f2f0:	7298      	strb	r0, [r3, #10]
    f2f2:	72d8      	strb	r0, [r3, #11]
    f2f4:	721d      	strb	r5, [r3, #8]
    f2f6:	4618      	mov	r0, r3
    f2f8:	f7ff fdd2 	bl	eea0 <rpc_logobj_client_request_send>
    f2fc:	4680      	mov	r8, r0
    f2fe:	b9b0      	cbnz	r0, f32e <logobj_interface_write+0xb6>
    f300:	b93e      	cbnz	r6, f312 <logobj_interface_write+0x9a>
    f302:	4628      	mov	r0, r5
    f304:	6823      	ldr	r3, [r4, #0]
    f306:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
    f30a:	6023      	str	r3, [r4, #0]
    f30c:	b002      	add	sp, #8
    f30e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    f312:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    f316:	f04f 33ff 	mov.w	r3, #4294967295
    f31a:	4611      	mov	r1, r2
    f31c:	4638      	mov	r0, r7
    f31e:	f005 ffc3 	bl	152a8 <interface_socket_wait>
    f322:	b198      	cbz	r0, f34c <logobj_interface_write+0xd4>
    f324:	6823      	ldr	r3, [r4, #0]
    f326:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
    f32a:	6023      	str	r3, [r4, #0]
    f32c:	e7ca      	b.n	f2c4 <logobj_interface_write+0x4c>
    f32e:	9801      	ldr	r0, [sp, #4]
    f330:	f7ff fdcc 	bl	eecc <rpc_logobj_client_message_free>
    f334:	6823      	ldr	r3, [r4, #0]
    f336:	2005      	movs	r0, #5
    f338:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
    f33c:	6023      	str	r3, [r4, #0]
    f33e:	e7c1      	b.n	f2c4 <logobj_interface_write+0x4c>
    f340:	2016      	movs	r0, #22
    f342:	f7ff fbd5 	bl	eaf0 <bsd_os_errno_set>
    f346:	f04f 30ff 	mov.w	r0, #4294967295
    f34a:	e7bf      	b.n	f2cc <logobj_interface_write+0x54>
    f34c:	4638      	mov	r0, r7
    f34e:	f006 f81f 	bl	15390 <interface_socket_from_handle_get>
    f352:	4603      	mov	r3, r0
    f354:	2800      	cmp	r0, #0
    f356:	d0d4      	beq.n	f302 <logobj_interface_write+0x8a>
    f358:	6840      	ldr	r0, [r0, #4]
    f35a:	2800      	cmp	r0, #0
    f35c:	d0d1      	beq.n	f302 <logobj_interface_write+0x8a>
    f35e:	f8c3 8004 	str.w	r8, [r3, #4]
    f362:	e7df      	b.n	f324 <logobj_interface_write+0xac>
    f364:	2073      	movs	r0, #115	; 0x73
    f366:	e7ad      	b.n	f2c4 <logobj_interface_write+0x4c>
    f368:	2009      	movs	r0, #9
    f36a:	e7ab      	b.n	f2c4 <logobj_interface_write+0x4c>
    f36c:	202d      	movs	r0, #45	; 0x2d
    f36e:	f7ff fbbf 	bl	eaf0 <bsd_os_errno_set>
    f372:	f04f 30ff 	mov.w	r0, #4294967295
    f376:	e7a9      	b.n	f2cc <logobj_interface_write+0x54>
    f378:	2009      	movs	r0, #9
    f37a:	f7ff fbb9 	bl	eaf0 <bsd_os_errno_set>
    f37e:	f04f 30ff 	mov.w	r0, #4294967295
    f382:	e7a3      	b.n	f2cc <logobj_interface_write+0x54>

0000f384 <logobj_interface_setopt>:
    f384:	b5f0      	push	{r4, r5, r6, r7, lr}
    f386:	2901      	cmp	r1, #1
    f388:	b085      	sub	sp, #20
    f38a:	d068      	beq.n	f45e <logobj_interface_setopt+0xda>
    f38c:	461e      	mov	r6, r3
    f38e:	f240 2305 	movw	r3, #517	; 0x205
    f392:	4299      	cmp	r1, r3
    f394:	f040 8095 	bne.w	f4c2 <logobj_interface_setopt+0x13e>
    f398:	4607      	mov	r7, r0
    f39a:	4615      	mov	r5, r2
    f39c:	f005 fff8 	bl	15390 <interface_socket_from_handle_get>
    f3a0:	4604      	mov	r4, r0
    f3a2:	2800      	cmp	r0, #0
    f3a4:	f000 80b2 	beq.w	f50c <logobj_interface_setopt+0x188>
    f3a8:	2d01      	cmp	r5, #1
    f3aa:	d019      	beq.n	f3e0 <logobj_interface_setopt+0x5c>
    f3ac:	2d02      	cmp	r5, #2
    f3ae:	d010      	beq.n	f3d2 <logobj_interface_setopt+0x4e>
    f3b0:	252a      	movs	r5, #42	; 0x2a
    f3b2:	6803      	ldr	r3, [r0, #0]
    f3b4:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
    f3b8:	6023      	str	r3, [r4, #0]
    f3ba:	6823      	ldr	r3, [r4, #0]
    f3bc:	4628      	mov	r0, r5
    f3be:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
    f3c2:	6023      	str	r3, [r4, #0]
    f3c4:	f7ff fb94 	bl	eaf0 <bsd_os_errno_set>
    f3c8:	f04f 35ff 	mov.w	r5, #4294967295
    f3cc:	4628      	mov	r0, r5
    f3ce:	b005      	add	sp, #20
    f3d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    f3d2:	b116      	cbz	r6, f3da <logobj_interface_setopt+0x56>
    f3d4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    f3d6:	2b01      	cmp	r3, #1
    f3d8:	d049      	beq.n	f46e <logobj_interface_setopt+0xea>
    f3da:	6823      	ldr	r3, [r4, #0]
    f3dc:	2516      	movs	r5, #22
    f3de:	e7e9      	b.n	f3b4 <logobj_interface_setopt+0x30>
    f3e0:	2e00      	cmp	r6, #0
    f3e2:	d0fa      	beq.n	f3da <logobj_interface_setopt+0x56>
    f3e4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    f3e6:	2b04      	cmp	r3, #4
    f3e8:	d1f7      	bne.n	f3da <logobj_interface_setopt+0x56>
    f3ea:	2100      	movs	r1, #0
    f3ec:	a803      	add	r0, sp, #12
    f3ee:	f7ff fd3f 	bl	ee70 <rpc_logobj_client_request_alloc>
    f3f2:	4605      	mov	r5, r0
    f3f4:	2800      	cmp	r0, #0
    f3f6:	d16a      	bne.n	f4ce <logobj_interface_setopt+0x14a>
    f3f8:	9803      	ldr	r0, [sp, #12]
    f3fa:	2208      	movs	r2, #8
    f3fc:	4629      	mov	r1, r5
    f3fe:	300c      	adds	r0, #12
    f400:	f00a fa80 	bl	19904 <memset>
    f404:	9803      	ldr	r0, [sp, #12]
    f406:	4631      	mov	r1, r6
    f408:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    f40a:	300c      	adds	r0, #12
    f40c:	f00a fa50 	bl	198b0 <memcpy>
    f410:	2308      	movs	r3, #8
    f412:	9803      	ldr	r0, [sp, #12]
    f414:	f247 0102 	movw	r1, #28674	; 0x7002
    f418:	7203      	strb	r3, [r0, #8]
    f41a:	7245      	strb	r5, [r0, #9]
    f41c:	7285      	strb	r5, [r0, #10]
    f41e:	72c5      	strb	r5, [r0, #11]
    f420:	6823      	ldr	r3, [r4, #0]
    f422:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
    f426:	6023      	str	r3, [r4, #0]
    f428:	f7ff fd3a 	bl	eea0 <rpc_logobj_client_request_send>
    f42c:	2800      	cmp	r0, #0
    f42e:	d151      	bne.n	f4d4 <logobj_interface_setopt+0x150>
    f430:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
    f434:	f04f 33ff 	mov.w	r3, #4294967295
    f438:	4611      	mov	r1, r2
    f43a:	4638      	mov	r0, r7
    f43c:	f005 ff34 	bl	152a8 <interface_socket_wait>
    f440:	4605      	mov	r5, r0
    f442:	2800      	cmp	r0, #0
    f444:	d13b      	bne.n	f4be <logobj_interface_setopt+0x13a>
    f446:	4638      	mov	r0, r7
    f448:	f005 ffa2 	bl	15390 <interface_socket_from_handle_get>
    f44c:	2800      	cmp	r0, #0
    f44e:	d04f      	beq.n	f4f0 <logobj_interface_setopt+0x16c>
    f450:	6843      	ldr	r3, [r0, #4]
    f452:	2b00      	cmp	r3, #0
    f454:	d04c      	beq.n	f4f0 <logobj_interface_setopt+0x16c>
    f456:	2200      	movs	r2, #0
    f458:	461d      	mov	r5, r3
    f45a:	6042      	str	r2, [r0, #4]
    f45c:	e02f      	b.n	f4be <logobj_interface_setopt+0x13a>
    f45e:	9c0a      	ldr	r4, [sp, #40]	; 0x28
    f460:	9400      	str	r4, [sp, #0]
    f462:	f005 ffbd 	bl	153e0 <interface_socket_setopt>
    f466:	4605      	mov	r5, r0
    f468:	4628      	mov	r0, r5
    f46a:	b005      	add	sp, #20
    f46c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    f46e:	2100      	movs	r1, #0
    f470:	a803      	add	r0, sp, #12
    f472:	7835      	ldrb	r5, [r6, #0]
    f474:	f7ff fcfc 	bl	ee70 <rpc_logobj_client_request_alloc>
    f478:	bb48      	cbnz	r0, f4ce <logobj_interface_setopt+0x14a>
    f47a:	2d01      	cmp	r5, #1
    f47c:	bf08      	it	eq
    f47e:	4b26      	ldreq	r3, [pc, #152]	; (f518 <logobj_interface_setopt+0x194>)
    f480:	f04f 0204 	mov.w	r2, #4
    f484:	bf08      	it	eq
    f486:	701d      	strbeq	r5, [r3, #0]
    f488:	2300      	movs	r3, #0
    f48a:	9803      	ldr	r0, [sp, #12]
    f48c:	f247 0101 	movw	r1, #28673	; 0x7001
    f490:	7243      	strb	r3, [r0, #9]
    f492:	60c5      	str	r5, [r0, #12]
    f494:	7283      	strb	r3, [r0, #10]
    f496:	72c3      	strb	r3, [r0, #11]
    f498:	7202      	strb	r2, [r0, #8]
    f49a:	6823      	ldr	r3, [r4, #0]
    f49c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
    f4a0:	6023      	str	r3, [r4, #0]
    f4a2:	f7ff fcfd 	bl	eea0 <rpc_logobj_client_request_send>
    f4a6:	4606      	mov	r6, r0
    f4a8:	b9a0      	cbnz	r0, f4d4 <logobj_interface_setopt+0x150>
    f4aa:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
    f4ae:	f04f 33ff 	mov.w	r3, #4294967295
    f4b2:	4611      	mov	r1, r2
    f4b4:	4638      	mov	r0, r7
    f4b6:	f005 fef7 	bl	152a8 <interface_socket_wait>
    f4ba:	4605      	mov	r5, r0
    f4bc:	b180      	cbz	r0, f4e0 <logobj_interface_setopt+0x15c>
    f4be:	6823      	ldr	r3, [r4, #0]
    f4c0:	e778      	b.n	f3b4 <logobj_interface_setopt+0x30>
    f4c2:	202a      	movs	r0, #42	; 0x2a
    f4c4:	f7ff fb14 	bl	eaf0 <bsd_os_errno_set>
    f4c8:	f04f 35ff 	mov.w	r5, #4294967295
    f4cc:	e77e      	b.n	f3cc <logobj_interface_setopt+0x48>
    f4ce:	6823      	ldr	r3, [r4, #0]
    f4d0:	250c      	movs	r5, #12
    f4d2:	e76f      	b.n	f3b4 <logobj_interface_setopt+0x30>
    f4d4:	9803      	ldr	r0, [sp, #12]
    f4d6:	f7ff fcf9 	bl	eecc <rpc_logobj_client_message_free>
    f4da:	2505      	movs	r5, #5
    f4dc:	6823      	ldr	r3, [r4, #0]
    f4de:	e769      	b.n	f3b4 <logobj_interface_setopt+0x30>
    f4e0:	4638      	mov	r0, r7
    f4e2:	f005 ff55 	bl	15390 <interface_socket_from_handle_get>
    f4e6:	b140      	cbz	r0, f4fa <logobj_interface_setopt+0x176>
    f4e8:	6845      	ldr	r5, [r0, #4]
    f4ea:	b135      	cbz	r5, f4fa <logobj_interface_setopt+0x176>
    f4ec:	6046      	str	r6, [r0, #4]
    f4ee:	e7e6      	b.n	f4be <logobj_interface_setopt+0x13a>
    f4f0:	4631      	mov	r1, r6
    f4f2:	2204      	movs	r2, #4
    f4f4:	4809      	ldr	r0, [pc, #36]	; (f51c <logobj_interface_setopt+0x198>)
    f4f6:	f00a f9db 	bl	198b0 <memcpy>
    f4fa:	6823      	ldr	r3, [r4, #0]
    f4fc:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
    f500:	6023      	str	r3, [r4, #0]
    f502:	6823      	ldr	r3, [r4, #0]
    f504:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
    f508:	6023      	str	r3, [r4, #0]
    f50a:	e75f      	b.n	f3cc <logobj_interface_setopt+0x48>
    f50c:	2009      	movs	r0, #9
    f50e:	f7ff faef 	bl	eaf0 <bsd_os_errno_set>
    f512:	f04f 35ff 	mov.w	r5, #4294967295
    f516:	e759      	b.n	f3cc <logobj_interface_setopt+0x48>
    f518:	200249cc 	.word	0x200249cc
    f51c:	200200c4 	.word	0x200200c4

0000f520 <logobj_interface_getopt>:
    f520:	b5f0      	push	{r4, r5, r6, r7, lr}
    f522:	2901      	cmp	r1, #1
    f524:	b083      	sub	sp, #12
    f526:	9e08      	ldr	r6, [sp, #32]
    f528:	d030      	beq.n	f58c <logobj_interface_getopt+0x6c>
    f52a:	461f      	mov	r7, r3
    f52c:	f240 2305 	movw	r3, #517	; 0x205
    f530:	4299      	cmp	r1, r3
    f532:	d134      	bne.n	f59e <logobj_interface_getopt+0x7e>
    f534:	4615      	mov	r5, r2
    f536:	f005 ff2b 	bl	15390 <interface_socket_from_handle_get>
    f53a:	2800      	cmp	r0, #0
    f53c:	d037      	beq.n	f5ae <logobj_interface_getopt+0x8e>
    f53e:	2d01      	cmp	r5, #1
    f540:	d015      	beq.n	f56e <logobj_interface_getopt+0x4e>
    f542:	2d02      	cmp	r5, #2
    f544:	d10b      	bne.n	f55e <logobj_interface_getopt+0x3e>
    f546:	b387      	cbz	r7, f5aa <logobj_interface_getopt+0x8a>
    f548:	6833      	ldr	r3, [r6, #0]
    f54a:	b373      	cbz	r3, f5aa <logobj_interface_getopt+0x8a>
    f54c:	2300      	movs	r3, #0
    f54e:	2201      	movs	r2, #1
    f550:	4618      	mov	r0, r3
    f552:	491a      	ldr	r1, [pc, #104]	; (f5bc <logobj_interface_getopt+0x9c>)
    f554:	7809      	ldrb	r1, [r1, #0]
    f556:	7039      	strb	r1, [r7, #0]
    f558:	6032      	str	r2, [r6, #0]
    f55a:	b003      	add	sp, #12
    f55c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    f55e:	2009      	movs	r0, #9
    f560:	f7ff fac6 	bl	eaf0 <bsd_os_errno_set>
    f564:	f04f 33ff 	mov.w	r3, #4294967295
    f568:	4618      	mov	r0, r3
    f56a:	b003      	add	sp, #12
    f56c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    f56e:	b1e7      	cbz	r7, f5aa <logobj_interface_getopt+0x8a>
    f570:	6833      	ldr	r3, [r6, #0]
    f572:	2b03      	cmp	r3, #3
    f574:	d919      	bls.n	f5aa <logobj_interface_getopt+0x8a>
    f576:	4638      	mov	r0, r7
    f578:	2204      	movs	r2, #4
    f57a:	4911      	ldr	r1, [pc, #68]	; (f5c0 <logobj_interface_getopt+0xa0>)
    f57c:	f00a f998 	bl	198b0 <memcpy>
    f580:	2300      	movs	r3, #0
    f582:	2204      	movs	r2, #4
    f584:	4618      	mov	r0, r3
    f586:	6032      	str	r2, [r6, #0]
    f588:	b003      	add	sp, #12
    f58a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    f58c:	9600      	str	r6, [sp, #0]
    f58e:	f005 ff69 	bl	15464 <interface_socket_getopt>
    f592:	4603      	mov	r3, r0
    f594:	2800      	cmp	r0, #0
    f596:	d1e3      	bne.n	f560 <logobj_interface_getopt+0x40>
    f598:	4618      	mov	r0, r3
    f59a:	b003      	add	sp, #12
    f59c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    f59e:	202a      	movs	r0, #42	; 0x2a
    f5a0:	f7ff faa6 	bl	eaf0 <bsd_os_errno_set>
    f5a4:	f04f 33ff 	mov.w	r3, #4294967295
    f5a8:	e7de      	b.n	f568 <logobj_interface_getopt+0x48>
    f5aa:	2016      	movs	r0, #22
    f5ac:	e7d8      	b.n	f560 <logobj_interface_getopt+0x40>
    f5ae:	2009      	movs	r0, #9
    f5b0:	f7ff fa9e 	bl	eaf0 <bsd_os_errno_set>
    f5b4:	f04f 33ff 	mov.w	r3, #4294967295
    f5b8:	e7d6      	b.n	f568 <logobj_interface_getopt+0x48>
    f5ba:	bf00      	nop
    f5bc:	200249cd 	.word	0x200249cd
    f5c0:	200200c4 	.word	0x200200c4

0000f5c4 <logobj_interface_close>:
    f5c4:	b510      	push	{r4, lr}
    f5c6:	4604      	mov	r4, r0
    f5c8:	f005 fee2 	bl	15390 <interface_socket_from_handle_get>
    f5cc:	b138      	cbz	r0, f5de <logobj_interface_close+0x1a>
    f5ce:	4620      	mov	r0, r4
    f5d0:	f005 fe1c 	bl	1520c <interface_socket_free>
    f5d4:	2300      	movs	r3, #0
    f5d6:	4a05      	ldr	r2, [pc, #20]	; (f5ec <logobj_interface_close+0x28>)
    f5d8:	4618      	mov	r0, r3
    f5da:	6013      	str	r3, [r2, #0]
    f5dc:	bd10      	pop	{r4, pc}
    f5de:	2009      	movs	r0, #9
    f5e0:	f7ff fa86 	bl	eaf0 <bsd_os_errno_set>
    f5e4:	f04f 30ff 	mov.w	r0, #4294967295
    f5e8:	bd10      	pop	{r4, pc}
    f5ea:	bf00      	nop
    f5ec:	200200c8 	.word	0x200200c8

0000f5f0 <packet_free_cb>:
    f5f0:	6800      	ldr	r0, [r0, #0]
    f5f2:	f004 b9ef 	b.w	139d4 <rpc_at_client_data_free>
    f5f6:	bf00      	nop

0000f5f8 <at_interface_write>:
    f5f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    f5fc:	b082      	sub	sp, #8
    f5fe:	9c08      	ldr	r4, [sp, #32]
    f600:	2c00      	cmp	r4, #0
    f602:	d15b      	bne.n	f6bc <at_interface_write+0xc4>
    f604:	460f      	mov	r7, r1
    f606:	4615      	mov	r5, r2
    f608:	4698      	mov	r8, r3
    f60a:	4606      	mov	r6, r0
    f60c:	f005 fec0 	bl	15390 <interface_socket_from_handle_get>
    f610:	4604      	mov	r4, r0
    f612:	f1b8 0f00 	cmp.w	r8, #0
    f616:	d12b      	bne.n	f670 <at_interface_write+0x78>
    f618:	2800      	cmp	r0, #0
    f61a:	d055      	beq.n	f6c8 <at_interface_write+0xd0>
    f61c:	6803      	ldr	r3, [r0, #0]
    f61e:	039b      	lsls	r3, r3, #14
    f620:	d552      	bpl.n	f6c8 <at_interface_write+0xd0>
    f622:	6803      	ldr	r3, [r0, #0]
    f624:	4629      	mov	r1, r5
    f626:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
    f62a:	6003      	str	r3, [r0, #0]
    f62c:	6803      	ldr	r3, [r0, #0]
    f62e:	a801      	add	r0, sp, #4
    f630:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
    f634:	6023      	str	r3, [r4, #0]
    f636:	f004 f9a3 	bl	13980 <rpc_at_client_request_alloc>
    f63a:	bb08      	cbnz	r0, f680 <at_interface_write+0x88>
    f63c:	2204      	movs	r2, #4
    f63e:	9b01      	ldr	r3, [sp, #4]
    f640:	721a      	strb	r2, [r3, #8]
    f642:	7258      	strb	r0, [r3, #9]
    f644:	7298      	strb	r0, [r3, #10]
    f646:	72d8      	strb	r0, [r3, #11]
    f648:	60de      	str	r6, [r3, #12]
    f64a:	b9fd      	cbnz	r5, f68c <at_interface_write+0x94>
    f64c:	4618      	mov	r0, r3
    f64e:	2101      	movs	r1, #1
    f650:	f004 f9aa 	bl	139a8 <rpc_at_client_request_send>
    f654:	bb48      	cbnz	r0, f6aa <at_interface_write+0xb2>
    f656:	f44f 3200 	mov.w	r2, #131072	; 0x20000
    f65a:	4630      	mov	r0, r6
    f65c:	4611      	mov	r1, r2
    f65e:	f04f 33ff 	mov.w	r3, #4294967295
    f662:	f005 fe21 	bl	152a8 <interface_socket_wait>
    f666:	b960      	cbnz	r0, f682 <at_interface_write+0x8a>
    f668:	4628      	mov	r0, r5
    f66a:	b002      	add	sp, #8
    f66c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    f670:	b360      	cbz	r0, f6cc <at_interface_write+0xd4>
    f672:	6803      	ldr	r3, [r0, #0]
    f674:	202d      	movs	r0, #45	; 0x2d
    f676:	f7ff fa3b 	bl	eaf0 <bsd_os_errno_set>
    f67a:	f04f 30ff 	mov.w	r0, #4294967295
    f67e:	e7f4      	b.n	f66a <at_interface_write+0x72>
    f680:	200c      	movs	r0, #12
    f682:	6823      	ldr	r3, [r4, #0]
    f684:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
    f688:	6023      	str	r3, [r4, #0]
    f68a:	e7f4      	b.n	f676 <at_interface_write+0x7e>
    f68c:	4639      	mov	r1, r7
    f68e:	6818      	ldr	r0, [r3, #0]
    f690:	462a      	mov	r2, r5
    f692:	f00a f90d 	bl	198b0 <memcpy>
    f696:	2101      	movs	r1, #1
    f698:	9801      	ldr	r0, [sp, #4]
    f69a:	f004 f985 	bl	139a8 <rpc_at_client_request_send>
    f69e:	2800      	cmp	r0, #0
    f6a0:	d0d9      	beq.n	f656 <at_interface_write+0x5e>
    f6a2:	9b01      	ldr	r3, [sp, #4]
    f6a4:	6818      	ldr	r0, [r3, #0]
    f6a6:	f004 f995 	bl	139d4 <rpc_at_client_data_free>
    f6aa:	9801      	ldr	r0, [sp, #4]
    f6ac:	f004 f98a 	bl	139c4 <rpc_at_client_message_free>
    f6b0:	6823      	ldr	r3, [r4, #0]
    f6b2:	2023      	movs	r0, #35	; 0x23
    f6b4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
    f6b8:	6023      	str	r3, [r4, #0]
    f6ba:	e7dc      	b.n	f676 <at_interface_write+0x7e>
    f6bc:	2038      	movs	r0, #56	; 0x38
    f6be:	f7ff fa17 	bl	eaf0 <bsd_os_errno_set>
    f6c2:	f04f 30ff 	mov.w	r0, #4294967295
    f6c6:	e7d0      	b.n	f66a <at_interface_write+0x72>
    f6c8:	2016      	movs	r0, #22
    f6ca:	e7d4      	b.n	f676 <at_interface_write+0x7e>
    f6cc:	202d      	movs	r0, #45	; 0x2d
    f6ce:	e7d2      	b.n	f676 <at_interface_write+0x7e>

0000f6d0 <at_interface_init>:
    f6d0:	f004 b950 	b.w	13974 <rpc_at_client_init>

0000f6d4 <at_interface_open>:
    f6d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    f6d8:	2600      	movs	r6, #0
    f6da:	b082      	sub	sp, #8
    f6dc:	2902      	cmp	r1, #2
    f6de:	9600      	str	r6, [sp, #0]
    f6e0:	d13e      	bne.n	f760 <at_interface_open+0x8c>
    f6e2:	4680      	mov	r8, r0
    f6e4:	4617      	mov	r7, r2
    f6e6:	4668      	mov	r0, sp
    f6e8:	4a20      	ldr	r2, [pc, #128]	; (f76c <at_interface_open+0x98>)
    f6ea:	460c      	mov	r4, r1
    f6ec:	f005 fd2a 	bl	15144 <interface_socket_allocate>
    f6f0:	9b00      	ldr	r3, [sp, #0]
    f6f2:	4605      	mov	r5, r0
    f6f4:	b30b      	cbz	r3, f73a <at_interface_open+0x66>
    f6f6:	e9c3 8403 	strd	r8, r4, [r3, #12]
    f6fa:	615f      	str	r7, [r3, #20]
    f6fc:	4631      	mov	r1, r6
    f6fe:	a801      	add	r0, sp, #4
    f700:	f004 f93e 	bl	13980 <rpc_at_client_request_alloc>
    f704:	bb50      	cbnz	r0, f75c <at_interface_open+0x88>
    f706:	2204      	movs	r2, #4
    f708:	9b01      	ldr	r3, [sp, #4]
    f70a:	2105      	movs	r1, #5
    f70c:	7258      	strb	r0, [r3, #9]
    f70e:	7298      	strb	r0, [r3, #10]
    f710:	72d8      	strb	r0, [r3, #11]
    f712:	721a      	strb	r2, [r3, #8]
    f714:	60dd      	str	r5, [r3, #12]
    f716:	4618      	mov	r0, r3
    f718:	f004 f946 	bl	139a8 <rpc_at_client_request_send>
    f71c:	b988      	cbnz	r0, f742 <at_interface_open+0x6e>
    f71e:	4622      	mov	r2, r4
    f720:	4621      	mov	r1, r4
    f722:	f04f 33ff 	mov.w	r3, #4294967295
    f726:	4628      	mov	r0, r5
    f728:	f005 fdbe 	bl	152a8 <interface_socket_wait>
    f72c:	4604      	mov	r4, r0
    f72e:	b960      	cbnz	r0, f74a <at_interface_open+0x76>
    f730:	9a00      	ldr	r2, [sp, #0]
    f732:	6813      	ldr	r3, [r2, #0]
    f734:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
    f738:	6013      	str	r3, [r2, #0]
    f73a:	4628      	mov	r0, r5
    f73c:	b002      	add	sp, #8
    f73e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    f742:	9801      	ldr	r0, [sp, #4]
    f744:	f004 f93e 	bl	139c4 <rpc_at_client_message_free>
    f748:	2423      	movs	r4, #35	; 0x23
    f74a:	4628      	mov	r0, r5
    f74c:	f005 fd5e 	bl	1520c <interface_socket_free>
    f750:	4620      	mov	r0, r4
    f752:	f7ff f9cd 	bl	eaf0 <bsd_os_errno_set>
    f756:	f04f 35ff 	mov.w	r5, #4294967295
    f75a:	e7ee      	b.n	f73a <at_interface_open+0x66>
    f75c:	240c      	movs	r4, #12
    f75e:	e7f4      	b.n	f74a <at_interface_open+0x76>
    f760:	2029      	movs	r0, #41	; 0x29
    f762:	f7ff f9c5 	bl	eaf0 <bsd_os_errno_set>
    f766:	f04f 35ff 	mov.w	r5, #4294967295
    f76a:	e7e6      	b.n	f73a <at_interface_open+0x66>
    f76c:	0000f5f1 	.word	0x0000f5f1

0000f770 <at_interface_close>:
    f770:	b5f0      	push	{r4, r5, r6, r7, lr}
    f772:	b083      	sub	sp, #12
    f774:	4606      	mov	r6, r0
    f776:	f005 fe0b 	bl	15390 <interface_socket_from_handle_get>
    f77a:	2800      	cmp	r0, #0
    f77c:	d03d      	beq.n	f7fa <at_interface_close+0x8a>
    f77e:	230d      	movs	r3, #13
    f780:	6807      	ldr	r7, [r0, #0]
    f782:	6003      	str	r3, [r0, #0]
    f784:	6803      	ldr	r3, [r0, #0]
    f786:	4604      	mov	r4, r0
    f788:	039b      	lsls	r3, r3, #14
    f78a:	d41f      	bmi.n	f7cc <at_interface_close+0x5c>
    f78c:	2100      	movs	r1, #0
    f78e:	a801      	add	r0, sp, #4
    f790:	f004 f8f6 	bl	13980 <rpc_at_client_request_alloc>
    f794:	bb20      	cbnz	r0, f7e0 <at_interface_close+0x70>
    f796:	2204      	movs	r2, #4
    f798:	9b01      	ldr	r3, [sp, #4]
    f79a:	2106      	movs	r1, #6
    f79c:	7258      	strb	r0, [r3, #9]
    f79e:	7298      	strb	r0, [r3, #10]
    f7a0:	72d8      	strb	r0, [r3, #11]
    f7a2:	721a      	strb	r2, [r3, #8]
    f7a4:	60de      	str	r6, [r3, #12]
    f7a6:	4618      	mov	r0, r3
    f7a8:	f004 f8fe 	bl	139a8 <rpc_at_client_request_send>
    f7ac:	b9d0      	cbnz	r0, f7e4 <at_interface_close+0x74>
    f7ae:	220e      	movs	r2, #14
    f7b0:	f04f 33ff 	mov.w	r3, #4294967295
    f7b4:	4611      	mov	r1, r2
    f7b6:	4630      	mov	r0, r6
    f7b8:	f005 fd76 	bl	152a8 <interface_socket_wait>
    f7bc:	4605      	mov	r5, r0
    f7be:	b9a8      	cbnz	r0, f7ec <at_interface_close+0x7c>
    f7c0:	4630      	mov	r0, r6
    f7c2:	f005 fd23 	bl	1520c <interface_socket_free>
    f7c6:	4628      	mov	r0, r5
    f7c8:	b003      	add	sp, #12
    f7ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
    f7cc:	6803      	ldr	r3, [r0, #0]
    f7ce:	2100      	movs	r1, #0
    f7d0:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
    f7d4:	6003      	str	r3, [r0, #0]
    f7d6:	a801      	add	r0, sp, #4
    f7d8:	f004 f8d2 	bl	13980 <rpc_at_client_request_alloc>
    f7dc:	2800      	cmp	r0, #0
    f7de:	d0da      	beq.n	f796 <at_interface_close+0x26>
    f7e0:	250c      	movs	r5, #12
    f7e2:	e003      	b.n	f7ec <at_interface_close+0x7c>
    f7e4:	9801      	ldr	r0, [sp, #4]
    f7e6:	f004 f8ed 	bl	139c4 <rpc_at_client_message_free>
    f7ea:	2523      	movs	r5, #35	; 0x23
    f7ec:	6027      	str	r7, [r4, #0]
    f7ee:	4628      	mov	r0, r5
    f7f0:	f7ff f97e 	bl	eaf0 <bsd_os_errno_set>
    f7f4:	f04f 35ff 	mov.w	r5, #4294967295
    f7f8:	e7e5      	b.n	f7c6 <at_interface_close+0x56>
    f7fa:	2516      	movs	r5, #22
    f7fc:	e7f7      	b.n	f7ee <at_interface_close+0x7e>
    f7fe:	bf00      	nop

0000f800 <at_interface_read>:
    f800:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    f804:	b084      	sub	sp, #16
    f806:	4688      	mov	r8, r1
    f808:	4615      	mov	r5, r2
    f80a:	461e      	mov	r6, r3
    f80c:	4607      	mov	r7, r0
    f80e:	f005 fdbf 	bl	15390 <interface_socket_from_handle_get>
    f812:	2800      	cmp	r0, #0
    f814:	d043      	beq.n	f89e <at_interface_read+0x9e>
    f816:	2300      	movs	r3, #0
    f818:	4604      	mov	r4, r0
    f81a:	e9cd 8500 	strd	r8, r5, [sp]
    f81e:	e9cd 3302 	strd	r3, r3, [sp, #8]
    f822:	bb2e      	cbnz	r6, f870 <at_interface_read+0x70>
    f824:	f016 0502 	ands.w	r5, r6, #2
    f828:	d00d      	beq.n	f846 <at_interface_read+0x46>
    f82a:	e028      	b.n	f87e <at_interface_read+0x7e>
    f82c:	b9cd      	cbnz	r5, f862 <at_interface_read+0x62>
    f82e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    f832:	6a23      	ldr	r3, [r4, #32]
    f834:	4611      	mov	r1, r2
    f836:	2b00      	cmp	r3, #0
    f838:	bf08      	it	eq
    f83a:	f04f 33ff 	moveq.w	r3, #4294967295
    f83e:	4638      	mov	r0, r7
    f840:	f005 fd32 	bl	152a8 <interface_socket_wait>
    f844:	4605      	mov	r5, r0
    f846:	6823      	ldr	r3, [r4, #0]
    f848:	69e0      	ldr	r0, [r4, #28]
    f84a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
    f84e:	6023      	str	r3, [r4, #0]
    f850:	6803      	ldr	r3, [r0, #0]
    f852:	4632      	mov	r2, r6
    f854:	689b      	ldr	r3, [r3, #8]
    f856:	4669      	mov	r1, sp
    f858:	4798      	blx	r3
    f85a:	f1b0 0800 	subs.w	r8, r0, #0
    f85e:	dbe5      	blt.n	f82c <at_interface_read+0x2c>
    f860:	b115      	cbz	r5, f868 <at_interface_read+0x68>
    f862:	4628      	mov	r0, r5
    f864:	f7ff f944 	bl	eaf0 <bsd_os_errno_set>
    f868:	4640      	mov	r0, r8
    f86a:	b004      	add	sp, #16
    f86c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    f870:	f016 0f0a 	tst.w	r6, #10
    f874:	d1d6      	bne.n	f824 <at_interface_read+0x24>
    f876:	252d      	movs	r5, #45	; 0x2d
    f878:	f04f 38ff 	mov.w	r8, #4294967295
    f87c:	e7f1      	b.n	f862 <at_interface_read+0x62>
    f87e:	6823      	ldr	r3, [r4, #0]
    f880:	69e0      	ldr	r0, [r4, #28]
    f882:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
    f886:	6023      	str	r3, [r4, #0]
    f888:	6803      	ldr	r3, [r0, #0]
    f88a:	4632      	mov	r2, r6
    f88c:	689b      	ldr	r3, [r3, #8]
    f88e:	4669      	mov	r1, sp
    f890:	4798      	blx	r3
    f892:	f1b0 3fff 	cmp.w	r0, #4294967295
    f896:	4680      	mov	r8, r0
    f898:	d1e6      	bne.n	f868 <at_interface_read+0x68>
    f89a:	2523      	movs	r5, #35	; 0x23
    f89c:	e7e1      	b.n	f862 <at_interface_read+0x62>
    f89e:	2516      	movs	r5, #22
    f8a0:	f04f 38ff 	mov.w	r8, #4294967295
    f8a4:	e7dd      	b.n	f862 <at_interface_read+0x62>
    f8a6:	bf00      	nop

0000f8a8 <at_interface_getopt>:
    f8a8:	f005 bddc 	b.w	15464 <interface_socket_getopt>

0000f8ac <at_interface_setopt>:
    f8ac:	f005 bd98 	b.w	153e0 <interface_socket_setopt>

0000f8b0 <rpc_at_event_handler>:
    f8b0:	b570      	push	{r4, r5, r6, lr}
    f8b2:	4606      	mov	r6, r0
    f8b4:	b084      	sub	sp, #16
    f8b6:	68c0      	ldr	r0, [r0, #12]
    f8b8:	460d      	mov	r5, r1
    f8ba:	f005 fd69 	bl	15390 <interface_socket_from_handle_get>
    f8be:	4604      	mov	r4, r0
    f8c0:	b348      	cbz	r0, f916 <rpc_at_event_handler+0x66>
    f8c2:	6803      	ldr	r3, [r0, #0]
    f8c4:	b29b      	uxth	r3, r3
    f8c6:	2b01      	cmp	r3, #1
    f8c8:	d01f      	beq.n	f90a <rpc_at_event_handler+0x5a>
    f8ca:	6803      	ldr	r3, [r0, #0]
    f8cc:	b29b      	uxth	r3, r3
    f8ce:	2b0d      	cmp	r3, #13
    f8d0:	d029      	beq.n	f926 <rpc_at_event_handler+0x76>
    f8d2:	6803      	ldr	r3, [r0, #0]
    f8d4:	b29b      	uxth	r3, r3
    f8d6:	2b02      	cmp	r3, #2
    f8d8:	d02d      	beq.n	f936 <rpc_at_event_handler+0x86>
    f8da:	3d03      	subs	r5, #3
    f8dc:	2d01      	cmp	r5, #1
    f8de:	d817      	bhi.n	f910 <rpc_at_event_handler+0x60>
    f8e0:	2500      	movs	r5, #0
    f8e2:	6873      	ldr	r3, [r6, #4]
    f8e4:	6832      	ldr	r2, [r6, #0]
    f8e6:	e9cd 5502 	strd	r5, r5, [sp, #8]
    f8ea:	e9cd 2300 	strd	r2, r3, [sp]
    f8ee:	69e0      	ldr	r0, [r4, #28]
    f8f0:	4669      	mov	r1, sp
    f8f2:	6803      	ldr	r3, [r0, #0]
    f8f4:	685b      	ldr	r3, [r3, #4]
    f8f6:	4798      	blx	r3
    f8f8:	3001      	adds	r0, #1
    f8fa:	d019      	beq.n	f930 <rpc_at_event_handler+0x80>
    f8fc:	4628      	mov	r0, r5
    f8fe:	6823      	ldr	r3, [r4, #0]
    f900:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
    f904:	6023      	str	r3, [r4, #0]
    f906:	b004      	add	sp, #16
    f908:	bd70      	pop	{r4, r5, r6, pc}
    f90a:	2d02      	cmp	r5, #2
    f90c:	d1e5      	bne.n	f8da <rpc_at_event_handler+0x2a>
    f90e:	6005      	str	r5, [r0, #0]
    f910:	2000      	movs	r0, #0
    f912:	b004      	add	sp, #16
    f914:	bd70      	pop	{r4, r5, r6, pc}
    f916:	6830      	ldr	r0, [r6, #0]
    f918:	2800      	cmp	r0, #0
    f91a:	d0f9      	beq.n	f910 <rpc_at_event_handler+0x60>
    f91c:	f004 f85a 	bl	139d4 <rpc_at_client_data_free>
    f920:	4620      	mov	r0, r4
    f922:	b004      	add	sp, #16
    f924:	bd70      	pop	{r4, r5, r6, pc}
    f926:	2d02      	cmp	r5, #2
    f928:	d1d7      	bne.n	f8da <rpc_at_event_handler+0x2a>
    f92a:	230e      	movs	r3, #14
    f92c:	6003      	str	r3, [r0, #0]
    f92e:	e7ef      	b.n	f910 <rpc_at_event_handler+0x60>
    f930:	2002      	movs	r0, #2
    f932:	b004      	add	sp, #16
    f934:	bd70      	pop	{r4, r5, r6, pc}
    f936:	6803      	ldr	r3, [r0, #0]
    f938:	029b      	lsls	r3, r3, #10
    f93a:	d5ce      	bpl.n	f8da <rpc_at_event_handler+0x2a>
    f93c:	2d02      	cmp	r5, #2
    f93e:	d1cc      	bne.n	f8da <rpc_at_event_handler+0x2a>
    f940:	6803      	ldr	r3, [r0, #0]
    f942:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
    f946:	6003      	str	r3, [r0, #0]
    f948:	6803      	ldr	r3, [r0, #0]
    f94a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
    f94e:	6003      	str	r3, [r0, #0]
    f950:	e7de      	b.n	f910 <rpc_at_event_handler+0x60>
    f952:	bf00      	nop

0000f954 <dfu_client_event_handler>:
    f954:	f850 1b08 	ldr.w	r1, [r0], #8
    f958:	0c09      	lsrs	r1, r1, #16
    f95a:	f001 b925 	b.w	10ba8 <rpc_dfu_event_handler>
    f95e:	bf00      	nop

0000f960 <rpc_dfu_client_init>:
    f960:	4801      	ldr	r0, [pc, #4]	; (f968 <rpc_dfu_client_init+0x8>)
    f962:	f005 be51 	b.w	15608 <rpc_client_register>
    f966:	bf00      	nop
    f968:	0001a8a0 	.word	0x0001a8a0

0000f96c <rpc_dfu_client_request_alloc>:
    f96c:	2300      	movs	r3, #0
    f96e:	b510      	push	{r4, lr}
    f970:	b082      	sub	sp, #8
    f972:	9301      	str	r3, [sp, #4]
    f974:	b158      	cbz	r0, f98e <rpc_dfu_client_request_alloc+0x22>
    f976:	4604      	mov	r4, r0
    f978:	aa01      	add	r2, sp, #4
    f97a:	2006      	movs	r0, #6
    f97c:	f006 f87c 	bl	15a78 <rpc_message_alloc>
    f980:	b918      	cbnz	r0, f98a <rpc_dfu_client_request_alloc+0x1e>
    f982:	9b01      	ldr	r3, [sp, #4]
    f984:	b10b      	cbz	r3, f98a <rpc_dfu_client_request_alloc+0x1e>
    f986:	3308      	adds	r3, #8
    f988:	6023      	str	r3, [r4, #0]
    f98a:	b002      	add	sp, #8
    f98c:	bd10      	pop	{r4, pc}
    f98e:	2007      	movs	r0, #7
    f990:	b002      	add	sp, #8
    f992:	bd10      	pop	{r4, pc}

0000f994 <rpc_dfu_client_request_send>:
    f994:	f411 4f70 	tst.w	r1, #61440	; 0xf000
    f998:	d10b      	bne.n	f9b2 <rpc_dfu_client_request_send+0x1e>
    f99a:	b160      	cbz	r0, f9b6 <rpc_dfu_client_request_send+0x22>
    f99c:	4603      	mov	r3, r0
    f99e:	f830 2c08 	ldrh.w	r2, [r0, #-8]
    f9a2:	2006      	movs	r0, #6
    f9a4:	ea42 4101 	orr.w	r1, r2, r1, lsl #16
    f9a8:	f843 1d08 	str.w	r1, [r3, #-8]!
    f9ac:	4619      	mov	r1, r3
    f9ae:	f006 b84b 	b.w	15a48 <rpc_message_send>
    f9b2:	200f      	movs	r0, #15
    f9b4:	4770      	bx	lr
    f9b6:	2007      	movs	r0, #7
    f9b8:	4770      	bx	lr
    f9ba:	bf00      	nop

0000f9bc <rpc_dfu_client_message_free>:
    f9bc:	b120      	cbz	r0, f9c8 <_flash_used+0x4>
    f9be:	f1a0 0108 	sub.w	r1, r0, #8
    f9c2:	2006      	movs	r0, #6
    f9c4:	f006 b88a 	b.w	15adc <rpc_message_free>
    f9c8:	2007      	movs	r0, #7
    f9ca:	4770      	bx	lr

0000f9cc <rpc_dfu_client_data_free>:
    f9cc:	b118      	cbz	r0, f9d6 <rpc_dfu_client_data_free+0xa>
    f9ce:	4601      	mov	r1, r0
    f9d0:	2006      	movs	r0, #6
    f9d2:	f006 b995 	b.w	15d00 <rpc_message_data_free>
    f9d6:	2007      	movs	r0, #7
    f9d8:	4770      	bx	lr
    f9da:	bf00      	nop

0000f9dc <mem_free>:
    f9dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    f9e0:	f8df c0cc 	ldr.w	ip, [pc, #204]	; fab0 <mem_free+0xd4>
    f9e4:	b083      	sub	sp, #12
    f9e6:	9000      	str	r0, [sp, #0]
    f9e8:	f10c 0b3c 	add.w	fp, ip, #60	; 0x3c
    f9ec:	f8dc 3008 	ldr.w	r3, [ip, #8]
    f9f0:	b12b      	cbz	r3, f9fe <mem_free+0x22>
    f9f2:	f8dc 2000 	ldr.w	r2, [ip]
    f9f6:	9c00      	ldr	r4, [sp, #0]
    f9f8:	7810      	ldrb	r0, [r2, #0]
    f9fa:	42a0      	cmp	r0, r4
    f9fc:	d006      	beq.n	fa0c <mem_free+0x30>
    f9fe:	f10c 0c0c 	add.w	ip, ip, #12
    fa02:	45e3      	cmp	fp, ip
    fa04:	d1f2      	bne.n	f9ec <mem_free+0x10>
    fa06:	b003      	add	sp, #12
    fa08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    fa0c:	f8dc a004 	ldr.w	sl, [ip, #4]
    fa10:	eb03 080a 	add.w	r8, r3, sl
    fa14:	45c2      	cmp	sl, r8
    fa16:	d2f2      	bcs.n	f9fe <mem_free+0x22>
    fa18:	6853      	ldr	r3, [r2, #4]
    fa1a:	f8cd c004 	str.w	ip, [sp, #4]
    fa1e:	46d6      	mov	lr, sl
    fa20:	469c      	mov	ip, r3
    fa22:	f8d2 9010 	ldr.w	r9, [r2, #16]
    fa26:	8997      	ldrh	r7, [r2, #12]
    fa28:	ebae 000a 	sub.w	r0, lr, sl
    fa2c:	b3df      	cbz	r7, faa6 <mem_free+0xca>
    fa2e:	f8b9 2002 	ldrh.w	r2, [r9, #2]
    fa32:	4290      	cmp	r0, r2
    fa34:	d31c      	bcc.n	fa70 <mem_free+0x94>
    fa36:	4665      	mov	r5, ip
    fa38:	2400      	movs	r4, #0
    fa3a:	f109 0304 	add.w	r3, r9, #4
    fa3e:	e003      	b.n	fa48 <mem_free+0x6c>
    fa40:	885a      	ldrh	r2, [r3, #2]
    fa42:	3304      	adds	r3, #4
    fa44:	4282      	cmp	r2, r0
    fa46:	d815      	bhi.n	fa74 <mem_free+0x98>
    fa48:	f833 6c04 	ldrh.w	r6, [r3, #-4]
    fa4c:	3401      	adds	r4, #1
    fa4e:	42a7      	cmp	r7, r4
    fa50:	fb02 5506 	mla	r5, r2, r6, r5
    fa54:	eba0 0002 	sub.w	r0, r0, r2
    fa58:	461e      	mov	r6, r3
    fa5a:	d1f1      	bne.n	fa40 <mem_free+0x64>
    fa5c:	2000      	movs	r0, #0
    fa5e:	4281      	cmp	r1, r0
    fa60:	d00d      	beq.n	fa7e <mem_free+0xa2>
    fa62:	f10e 0e01 	add.w	lr, lr, #1
    fa66:	45f0      	cmp	r8, lr
    fa68:	d1de      	bne.n	fa28 <mem_free+0x4c>
    fa6a:	f8dd c004 	ldr.w	ip, [sp, #4]
    fa6e:	e7c6      	b.n	f9fe <mem_free+0x22>
    fa70:	4665      	mov	r5, ip
    fa72:	464e      	mov	r6, r9
    fa74:	8833      	ldrh	r3, [r6, #0]
    fa76:	fb00 5003 	mla	r0, r0, r3, r5
    fa7a:	4281      	cmp	r1, r0
    fa7c:	d1f1      	bne.n	fa62 <mem_free+0x86>
    fa7e:	f5be 7f00 	cmp.w	lr, #512	; 0x200
    fa82:	f8dd c004 	ldr.w	ip, [sp, #4]
    fa86:	d0ba      	beq.n	f9fe <mem_free+0x22>
    fa88:	2301      	movs	r3, #1
    fa8a:	4a08      	ldr	r2, [pc, #32]	; (faac <mem_free+0xd0>)
    fa8c:	ea4f 115e 	mov.w	r1, lr, lsr #5
    fa90:	f852 0021 	ldr.w	r0, [r2, r1, lsl #2]
    fa94:	f00e 0e1f 	and.w	lr, lr, #31
    fa98:	fa03 fe0e 	lsl.w	lr, r3, lr
    fa9c:	ea4e 0000 	orr.w	r0, lr, r0
    faa0:	f842 0021 	str.w	r0, [r2, r1, lsl #2]
    faa4:	e7af      	b.n	fa06 <mem_free+0x2a>
    faa6:	4638      	mov	r0, r7
    faa8:	e7d9      	b.n	fa5e <mem_free+0x82>
    faaa:	bf00      	nop
    faac:	200200cc 	.word	0x200200cc
    fab0:	20020110 	.word	0x20020110

0000fab4 <mem_alloc.constprop.5>:
    fab4:	2800      	cmp	r0, #0
    fab6:	d050      	beq.n	fb5a <mem_alloc.constprop.5+0xa6>
    fab8:	4b6d      	ldr	r3, [pc, #436]	; (fc70 <mem_alloc.constprop.5+0x1bc>)
    faba:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
    fabe:	4290      	cmp	r0, r2
    fac0:	d84b      	bhi.n	fb5a <mem_alloc.constprop.5+0xa6>
    fac2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    fac6:	f8d3 b08c 	ldr.w	fp, [r3, #140]	; 0x8c
    faca:	b083      	sub	sp, #12
    facc:	f1bb 0f00 	cmp.w	fp, #0
    fad0:	d054      	beq.n	fb7c <mem_alloc.constprop.5+0xc8>
    fad2:	f10b 32ff 	add.w	r2, fp, #4294967295
    fad6:	4691      	mov	r9, r2
    fad8:	2600      	movs	r6, #0
    fada:	f04f 0812 	mov.w	r8, #18
    fade:	4f65      	ldr	r7, [pc, #404]	; (fc74 <mem_alloc.constprop.5+0x1c0>)
    fae0:	9201      	str	r2, [sp, #4]
    fae2:	f10b 0e11 	add.w	lr, fp, #17
    fae6:	eb06 0209 	add.w	r2, r6, r9
    faea:	f853 4038 	ldr.w	r4, [r3, r8, lsl #3]
    faee:	3201      	adds	r2, #1
    faf0:	0852      	lsrs	r2, r2, #1
    faf2:	eb04 0c44 	add.w	ip, r4, r4, lsl #1
    faf6:	f102 0112 	add.w	r1, r2, #18
    fafa:	f853 5031 	ldr.w	r5, [r3, r1, lsl #3]
    fafe:	f857 a02c 	ldr.w	sl, [r7, ip, lsl #2]
    fb02:	f853 403e 	ldr.w	r4, [r3, lr, lsl #3]
    fb06:	eb03 0cc8 	add.w	ip, r3, r8, lsl #3
    fb0a:	f8dc c004 	ldr.w	ip, [ip, #4]
    fb0e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
    fb12:	eb04 0444 	add.w	r4, r4, r4, lsl #1
    fb16:	f8da a010 	ldr.w	sl, [sl, #16]
    fb1a:	f857 5025 	ldr.w	r5, [r7, r5, lsl #2]
    fb1e:	f857 4024 	ldr.w	r4, [r7, r4, lsl #2]
    fb22:	f83a a02c 	ldrh.w	sl, [sl, ip, lsl #2]
    fb26:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
    fb2a:	eb03 0cce 	add.w	ip, r3, lr, lsl #3
    fb2e:	6849      	ldr	r1, [r1, #4]
    fb30:	692d      	ldr	r5, [r5, #16]
    fb32:	6924      	ldr	r4, [r4, #16]
    fb34:	f8dc c004 	ldr.w	ip, [ip, #4]
    fb38:	4550      	cmp	r0, sl
    fb3a:	f835 5021 	ldrh.w	r5, [r5, r1, lsl #2]
    fb3e:	f834 102c 	ldrh.w	r1, [r4, ip, lsl #2]
    fb42:	d915      	bls.n	fb70 <mem_alloc.constprop.5+0xbc>
    fb44:	4288      	cmp	r0, r1
    fb46:	d211      	bcs.n	fb6c <mem_alloc.constprop.5+0xb8>
    fb48:	42a8      	cmp	r0, r5
    fb4a:	d908      	bls.n	fb5e <mem_alloc.constprop.5+0xaa>
    fb4c:	1c56      	adds	r6, r2, #1
    fb4e:	45b1      	cmp	r9, r6
    fb50:	f0c0 8087 	bcc.w	fc62 <mem_alloc.constprop.5+0x1ae>
    fb54:	f102 0813 	add.w	r8, r2, #19
    fb58:	e7c5      	b.n	fae6 <mem_alloc.constprop.5+0x32>
    fb5a:	2000      	movs	r0, #0
    fb5c:	4770      	bx	lr
    fb5e:	f102 39ff 	add.w	r9, r2, #4294967295
    fb62:	454e      	cmp	r6, r9
    fb64:	d87d      	bhi.n	fc62 <mem_alloc.constprop.5+0x1ae>
    fb66:	f102 0e11 	add.w	lr, r2, #17
    fb6a:	e7bc      	b.n	fae6 <mem_alloc.constprop.5+0x32>
    fb6c:	f109 0601 	add.w	r6, r9, #1
    fb70:	45b3      	cmp	fp, r6
    fb72:	d007      	beq.n	fb84 <mem_alloc.constprop.5+0xd0>
    fb74:	2e10      	cmp	r6, #16
    fb76:	d001      	beq.n	fb7c <mem_alloc.constprop.5+0xc8>
    fb78:	45b3      	cmp	fp, r6
    fb7a:	d808      	bhi.n	fb8e <mem_alloc.constprop.5+0xda>
    fb7c:	2000      	movs	r0, #0
    fb7e:	b003      	add	sp, #12
    fb80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    fb84:	9a01      	ldr	r2, [sp, #4]
    fb86:	2a10      	cmp	r2, #16
    fb88:	bf18      	it	ne
    fb8a:	4616      	movne	r6, r2
    fb8c:	d0f6      	beq.n	fb7c <mem_alloc.constprop.5+0xc8>
    fb8e:	f8df c0e8 	ldr.w	ip, [pc, #232]	; fc78 <mem_alloc.constprop.5+0x1c4>
    fb92:	eb03 08c6 	add.w	r8, r3, r6, lsl #3
    fb96:	e9d8 2424 	ldrd	r2, r4, [r8, #144]	; 0x90
    fb9a:	eb02 0242 	add.w	r2, r2, r2, lsl #1
    fb9e:	f857 3022 	ldr.w	r3, [r7, r2, lsl #2]
    fba2:	eb07 0282 	add.w	r2, r7, r2, lsl #2
    fba6:	f8d2 e004 	ldr.w	lr, [r2, #4]
    fbaa:	691d      	ldr	r5, [r3, #16]
    fbac:	2c00      	cmp	r4, #0
    fbae:	d056      	beq.n	fc5e <mem_alloc.constprop.5+0x1aa>
    fbb0:	462a      	mov	r2, r5
    fbb2:	4670      	mov	r0, lr
    fbb4:	00a4      	lsls	r4, r4, #2
    fbb6:	eb05 0904 	add.w	r9, r5, r4
    fbba:	8851      	ldrh	r1, [r2, #2]
    fbbc:	3204      	adds	r2, #4
    fbbe:	4591      	cmp	r9, r2
    fbc0:	4408      	add	r0, r1
    fbc2:	d1fa      	bne.n	fbba <mem_alloc.constprop.5+0x106>
    fbc4:	1929      	adds	r1, r5, r4
    fbc6:	f8b1 a002 	ldrh.w	sl, [r1, #2]
    fbca:	4482      	add	sl, r0
    fbcc:	4582      	cmp	sl, r0
    fbce:	d918      	bls.n	fc02 <mem_alloc.constprop.5+0x14e>
    fbd0:	0941      	lsrs	r1, r0, #5
    fbd2:	f85c 2021 	ldr.w	r2, [ip, r1, lsl #2]
    fbd6:	f000 041f 	and.w	r4, r0, #31
    fbda:	fa22 f904 	lsr.w	r9, r2, r4
    fbde:	f019 0f01 	tst.w	r9, #1
    fbe2:	d007      	beq.n	fbf4 <mem_alloc.constprop.5+0x140>
    fbe4:	e013      	b.n	fc0e <mem_alloc.constprop.5+0x15a>
    fbe6:	f85c 2021 	ldr.w	r2, [ip, r1, lsl #2]
    fbea:	fa22 f904 	lsr.w	r9, r2, r4
    fbee:	f019 0f01 	tst.w	r9, #1
    fbf2:	d10c      	bne.n	fc0e <mem_alloc.constprop.5+0x15a>
    fbf4:	3001      	adds	r0, #1
    fbf6:	4582      	cmp	sl, r0
    fbf8:	ea4f 1150 	mov.w	r1, r0, lsr #5
    fbfc:	f000 041f 	and.w	r4, r0, #31
    fc00:	d1f1      	bne.n	fbe6 <mem_alloc.constprop.5+0x132>
    fc02:	3601      	adds	r6, #1
    fc04:	455e      	cmp	r6, fp
    fc06:	f108 0808 	add.w	r8, r8, #8
    fc0a:	d3c4      	bcc.n	fb96 <mem_alloc.constprop.5+0xe2>
    fc0c:	e7b6      	b.n	fb7c <mem_alloc.constprop.5+0xc8>
    fc0e:	2601      	movs	r6, #1
    fc10:	fa06 f404 	lsl.w	r4, r6, r4
    fc14:	899e      	ldrh	r6, [r3, #12]
    fc16:	ea22 0204 	bic.w	r2, r2, r4
    fc1a:	eba0 000e 	sub.w	r0, r0, lr
    fc1e:	f84c 2021 	str.w	r2, [ip, r1, lsl #2]
    fc22:	685c      	ldr	r4, [r3, #4]
    fc24:	2e00      	cmp	r6, #0
    fc26:	d0a9      	beq.n	fb7c <mem_alloc.constprop.5+0xc8>
    fc28:	886a      	ldrh	r2, [r5, #2]
    fc2a:	4282      	cmp	r2, r0
    fc2c:	d811      	bhi.n	fc52 <mem_alloc.constprop.5+0x19e>
    fc2e:	2100      	movs	r1, #0
    fc30:	1d2b      	adds	r3, r5, #4
    fc32:	e003      	b.n	fc3c <mem_alloc.constprop.5+0x188>
    fc34:	885a      	ldrh	r2, [r3, #2]
    fc36:	3304      	adds	r3, #4
    fc38:	4282      	cmp	r2, r0
    fc3a:	d80a      	bhi.n	fc52 <mem_alloc.constprop.5+0x19e>
    fc3c:	f833 5c04 	ldrh.w	r5, [r3, #-4]
    fc40:	3101      	adds	r1, #1
    fc42:	428e      	cmp	r6, r1
    fc44:	fb02 4405 	mla	r4, r2, r5, r4
    fc48:	eba0 0002 	sub.w	r0, r0, r2
    fc4c:	461d      	mov	r5, r3
    fc4e:	d1f1      	bne.n	fc34 <mem_alloc.constprop.5+0x180>
    fc50:	e794      	b.n	fb7c <mem_alloc.constprop.5+0xc8>
    fc52:	882b      	ldrh	r3, [r5, #0]
    fc54:	fb00 4003 	mla	r0, r0, r3, r4
    fc58:	b003      	add	sp, #12
    fc5a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    fc5e:	4670      	mov	r0, lr
    fc60:	e7b0      	b.n	fbc4 <mem_alloc.constprop.5+0x110>
    fc62:	f1bb 0f10 	cmp.w	fp, #16
    fc66:	bf08      	it	eq
    fc68:	260f      	moveq	r6, #15
    fc6a:	d090      	beq.n	fb8e <mem_alloc.constprop.5+0xda>
    fc6c:	e786      	b.n	fb7c <mem_alloc.constprop.5+0xc8>
    fc6e:	bf00      	nop
    fc70:	2002014c 	.word	0x2002014c
    fc74:	20020110 	.word	0x20020110
    fc78:	200200cc 	.word	0x200200cc

0000fc7c <mem_alloc.constprop.4>:
    fc7c:	2800      	cmp	r0, #0
    fc7e:	d04c      	beq.n	fd1a <mem_alloc.constprop.4+0x9e>
    fc80:	4b6b      	ldr	r3, [pc, #428]	; (fe30 <mem_alloc.constprop.4+0x1b4>)
    fc82:	681a      	ldr	r2, [r3, #0]
    fc84:	4290      	cmp	r0, r2
    fc86:	d848      	bhi.n	fd1a <mem_alloc.constprop.4+0x9e>
    fc88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    fc8c:	685f      	ldr	r7, [r3, #4]
    fc8e:	b083      	sub	sp, #12
    fc90:	9700      	str	r7, [sp, #0]
    fc92:	2f00      	cmp	r7, #0
    fc94:	d051      	beq.n	fd3a <mem_alloc.constprop.4+0xbe>
    fc96:	1e7a      	subs	r2, r7, #1
    fc98:	4696      	mov	lr, r2
    fc9a:	2100      	movs	r1, #0
    fc9c:	f04f 0c01 	mov.w	ip, #1
    fca0:	4c64      	ldr	r4, [pc, #400]	; (fe34 <mem_alloc.constprop.4+0x1b8>)
    fca2:	9201      	str	r2, [sp, #4]
    fca4:	eb01 020e 	add.w	r2, r1, lr
    fca8:	3201      	adds	r2, #1
    fcaa:	f853 503c 	ldr.w	r5, [r3, ip, lsl #3]
    fcae:	0852      	lsrs	r2, r2, #1
    fcb0:	f102 0801 	add.w	r8, r2, #1
    fcb4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
    fcb8:	f853 9037 	ldr.w	r9, [r3, r7, lsl #3]
    fcbc:	f854 a025 	ldr.w	sl, [r4, r5, lsl #2]
    fcc0:	f853 6038 	ldr.w	r6, [r3, r8, lsl #3]
    fcc4:	eb09 0549 	add.w	r5, r9, r9, lsl #1
    fcc8:	eb03 09cc 	add.w	r9, r3, ip, lsl #3
    fccc:	f8d9 9004 	ldr.w	r9, [r9, #4]
    fcd0:	eb06 0646 	add.w	r6, r6, r6, lsl #1
    fcd4:	f8da a010 	ldr.w	sl, [sl, #16]
    fcd8:	f854 6026 	ldr.w	r6, [r4, r6, lsl #2]
    fcdc:	f854 5025 	ldr.w	r5, [r4, r5, lsl #2]
    fce0:	f83a a029 	ldrh.w	sl, [sl, r9, lsl #2]
    fce4:	eb03 0bc8 	add.w	fp, r3, r8, lsl #3
    fce8:	eb03 09c7 	add.w	r9, r3, r7, lsl #3
    fcec:	6936      	ldr	r6, [r6, #16]
    fcee:	f8db b004 	ldr.w	fp, [fp, #4]
    fcf2:	692d      	ldr	r5, [r5, #16]
    fcf4:	f8d9 9004 	ldr.w	r9, [r9, #4]
    fcf8:	4550      	cmp	r0, sl
    fcfa:	f836 602b 	ldrh.w	r6, [r6, fp, lsl #2]
    fcfe:	f835 5029 	ldrh.w	r5, [r5, r9, lsl #2]
    fd02:	d913      	bls.n	fd2c <mem_alloc.constprop.4+0xb0>
    fd04:	42a8      	cmp	r0, r5
    fd06:	d210      	bcs.n	fd2a <mem_alloc.constprop.4+0xae>
    fd08:	42b0      	cmp	r0, r6
    fd0a:	d908      	bls.n	fd1e <mem_alloc.constprop.4+0xa2>
    fd0c:	45c6      	cmp	lr, r8
    fd0e:	4641      	mov	r1, r8
    fd10:	f0c0 8087 	bcc.w	fe22 <mem_alloc.constprop.4+0x1a6>
    fd14:	f108 0c01 	add.w	ip, r8, #1
    fd18:	e7c4      	b.n	fca4 <mem_alloc.constprop.4+0x28>
    fd1a:	2000      	movs	r0, #0
    fd1c:	4770      	bx	lr
    fd1e:	f102 3eff 	add.w	lr, r2, #4294967295
    fd22:	4571      	cmp	r1, lr
    fd24:	d87d      	bhi.n	fe22 <mem_alloc.constprop.4+0x1a6>
    fd26:	4617      	mov	r7, r2
    fd28:	e7bc      	b.n	fca4 <mem_alloc.constprop.4+0x28>
    fd2a:	4639      	mov	r1, r7
    fd2c:	9a00      	ldr	r2, [sp, #0]
    fd2e:	428a      	cmp	r2, r1
    fd30:	d007      	beq.n	fd42 <mem_alloc.constprop.4+0xc6>
    fd32:	2910      	cmp	r1, #16
    fd34:	d001      	beq.n	fd3a <mem_alloc.constprop.4+0xbe>
    fd36:	428a      	cmp	r2, r1
    fd38:	d808      	bhi.n	fd4c <mem_alloc.constprop.4+0xd0>
    fd3a:	2000      	movs	r0, #0
    fd3c:	b003      	add	sp, #12
    fd3e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    fd42:	9a01      	ldr	r2, [sp, #4]
    fd44:	2a10      	cmp	r2, #16
    fd46:	bf18      	it	ne
    fd48:	4611      	movne	r1, r2
    fd4a:	d0f6      	beq.n	fd3a <mem_alloc.constprop.4+0xbe>
    fd4c:	f8df c0e8 	ldr.w	ip, [pc, #232]	; fe38 <mem_alloc.constprop.4+0x1bc>
    fd50:	f8dd 9000 	ldr.w	r9, [sp]
    fd54:	eb03 08c1 	add.w	r8, r3, r1, lsl #3
    fd58:	e9d8 2602 	ldrd	r2, r6, [r8, #8]
    fd5c:	eb02 0242 	add.w	r2, r2, r2, lsl #1
    fd60:	f854 3022 	ldr.w	r3, [r4, r2, lsl #2]
    fd64:	eb04 0282 	add.w	r2, r4, r2, lsl #2
    fd68:	f8d2 e004 	ldr.w	lr, [r2, #4]
    fd6c:	691f      	ldr	r7, [r3, #16]
    fd6e:	2e00      	cmp	r6, #0
    fd70:	d055      	beq.n	fe1e <mem_alloc.constprop.4+0x1a2>
    fd72:	463a      	mov	r2, r7
    fd74:	4670      	mov	r0, lr
    fd76:	00b6      	lsls	r6, r6, #2
    fd78:	eb07 0a06 	add.w	sl, r7, r6
    fd7c:	8855      	ldrh	r5, [r2, #2]
    fd7e:	3204      	adds	r2, #4
    fd80:	4592      	cmp	sl, r2
    fd82:	4428      	add	r0, r5
    fd84:	d1fa      	bne.n	fd7c <mem_alloc.constprop.4+0x100>
    fd86:	19bd      	adds	r5, r7, r6
    fd88:	f8b5 b002 	ldrh.w	fp, [r5, #2]
    fd8c:	4483      	add	fp, r0
    fd8e:	4583      	cmp	fp, r0
    fd90:	d918      	bls.n	fdc4 <mem_alloc.constprop.4+0x148>
    fd92:	0945      	lsrs	r5, r0, #5
    fd94:	f85c 2025 	ldr.w	r2, [ip, r5, lsl #2]
    fd98:	f000 061f 	and.w	r6, r0, #31
    fd9c:	fa22 fa06 	lsr.w	sl, r2, r6
    fda0:	f01a 0f01 	tst.w	sl, #1
    fda4:	d007      	beq.n	fdb6 <mem_alloc.constprop.4+0x13a>
    fda6:	e013      	b.n	fdd0 <mem_alloc.constprop.4+0x154>
    fda8:	f85c 2025 	ldr.w	r2, [ip, r5, lsl #2]
    fdac:	fa22 fa06 	lsr.w	sl, r2, r6
    fdb0:	f01a 0f01 	tst.w	sl, #1
    fdb4:	d10c      	bne.n	fdd0 <mem_alloc.constprop.4+0x154>
    fdb6:	3001      	adds	r0, #1
    fdb8:	4583      	cmp	fp, r0
    fdba:	ea4f 1550 	mov.w	r5, r0, lsr #5
    fdbe:	f000 061f 	and.w	r6, r0, #31
    fdc2:	d1f1      	bne.n	fda8 <mem_alloc.constprop.4+0x12c>
    fdc4:	3101      	adds	r1, #1
    fdc6:	4549      	cmp	r1, r9
    fdc8:	f108 0808 	add.w	r8, r8, #8
    fdcc:	d3c4      	bcc.n	fd58 <mem_alloc.constprop.4+0xdc>
    fdce:	e7b4      	b.n	fd3a <mem_alloc.constprop.4+0xbe>
    fdd0:	2101      	movs	r1, #1
    fdd2:	40b1      	lsls	r1, r6
    fdd4:	899e      	ldrh	r6, [r3, #12]
    fdd6:	ea22 0201 	bic.w	r2, r2, r1
    fdda:	eba0 000e 	sub.w	r0, r0, lr
    fdde:	f84c 2025 	str.w	r2, [ip, r5, lsl #2]
    fde2:	685c      	ldr	r4, [r3, #4]
    fde4:	2e00      	cmp	r6, #0
    fde6:	d0a8      	beq.n	fd3a <mem_alloc.constprop.4+0xbe>
    fde8:	887a      	ldrh	r2, [r7, #2]
    fdea:	4282      	cmp	r2, r0
    fdec:	d811      	bhi.n	fe12 <mem_alloc.constprop.4+0x196>
    fdee:	2100      	movs	r1, #0
    fdf0:	1d3b      	adds	r3, r7, #4
    fdf2:	e003      	b.n	fdfc <mem_alloc.constprop.4+0x180>
    fdf4:	885a      	ldrh	r2, [r3, #2]
    fdf6:	3304      	adds	r3, #4
    fdf8:	4282      	cmp	r2, r0
    fdfa:	d80a      	bhi.n	fe12 <mem_alloc.constprop.4+0x196>
    fdfc:	f833 5c04 	ldrh.w	r5, [r3, #-4]
    fe00:	3101      	adds	r1, #1
    fe02:	428e      	cmp	r6, r1
    fe04:	eba0 0002 	sub.w	r0, r0, r2
    fe08:	fb02 4405 	mla	r4, r2, r5, r4
    fe0c:	461f      	mov	r7, r3
    fe0e:	d1f1      	bne.n	fdf4 <mem_alloc.constprop.4+0x178>
    fe10:	e793      	b.n	fd3a <mem_alloc.constprop.4+0xbe>
    fe12:	883b      	ldrh	r3, [r7, #0]
    fe14:	fb00 4003 	mla	r0, r0, r3, r4
    fe18:	b003      	add	sp, #12
    fe1a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    fe1e:	4670      	mov	r0, lr
    fe20:	e7b1      	b.n	fd86 <mem_alloc.constprop.4+0x10a>
    fe22:	9a00      	ldr	r2, [sp, #0]
    fe24:	2a10      	cmp	r2, #16
    fe26:	bf08      	it	eq
    fe28:	210f      	moveq	r1, #15
    fe2a:	d08f      	beq.n	fd4c <mem_alloc.constprop.4+0xd0>
    fe2c:	e785      	b.n	fd3a <mem_alloc.constprop.4+0xbe>
    fe2e:	bf00      	nop
    fe30:	2002014c 	.word	0x2002014c
    fe34:	20020110 	.word	0x20020110
    fe38:	200200cc 	.word	0x200200cc

0000fe3c <nrf_mem_init>:
    fe3c:	b570      	push	{r4, r5, r6, lr}
    fe3e:	2200      	movs	r2, #0
    fe40:	2501      	movs	r5, #1
    fe42:	4833      	ldr	r0, [pc, #204]	; (ff10 <nrf_mem_init+0xd4>)
    fe44:	0951      	lsrs	r1, r2, #5
    fe46:	f850 4021 	ldr.w	r4, [r0, r1, lsl #2]
    fe4a:	f002 031f 	and.w	r3, r2, #31
    fe4e:	fa05 f303 	lsl.w	r3, r5, r3
    fe52:	3201      	adds	r2, #1
    fe54:	4323      	orrs	r3, r4
    fe56:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
    fe5a:	f840 3021 	str.w	r3, [r0, r1, lsl #2]
    fe5e:	d1f1      	bne.n	fe44 <nrf_mem_init+0x8>
    fe60:	2400      	movs	r4, #0
    fe62:	4b2c      	ldr	r3, [pc, #176]	; (ff14 <nrf_mem_init+0xd8>)
    fe64:	4621      	mov	r1, r4
    fe66:	223c      	movs	r2, #60	; 0x3c
    fe68:	482b      	ldr	r0, [pc, #172]	; (ff18 <nrf_mem_init+0xdc>)
    fe6a:	601c      	str	r4, [r3, #0]
    fe6c:	f009 fd4a 	bl	19904 <memset>
    fe70:	2110      	movs	r1, #16
    fe72:	2205      	movs	r2, #5
    fe74:	4b29      	ldr	r3, [pc, #164]	; (ff1c <nrf_mem_init+0xe0>)
    fe76:	4e2a      	ldr	r6, [pc, #168]	; (ff20 <nrf_mem_init+0xe4>)
    fe78:	e9c3 4400 	strd	r4, r4, [r3]
    fe7c:	60d9      	str	r1, [r3, #12]
    fe7e:	6159      	str	r1, [r3, #20]
    fe80:	61d9      	str	r1, [r3, #28]
    fe82:	6259      	str	r1, [r3, #36]	; 0x24
    fe84:	62d9      	str	r1, [r3, #44]	; 0x2c
    fe86:	6359      	str	r1, [r3, #52]	; 0x34
    fe88:	63d9      	str	r1, [r3, #60]	; 0x3c
    fe8a:	6459      	str	r1, [r3, #68]	; 0x44
    fe8c:	64d9      	str	r1, [r3, #76]	; 0x4c
    fe8e:	6559      	str	r1, [r3, #84]	; 0x54
    fe90:	65d9      	str	r1, [r3, #92]	; 0x5c
    fe92:	6659      	str	r1, [r3, #100]	; 0x64
    fe94:	66d9      	str	r1, [r3, #108]	; 0x6c
    fe96:	6759      	str	r1, [r3, #116]	; 0x74
    fe98:	67d9      	str	r1, [r3, #124]	; 0x7c
    fe9a:	609a      	str	r2, [r3, #8]
    fe9c:	611a      	str	r2, [r3, #16]
    fe9e:	619a      	str	r2, [r3, #24]
    fea0:	621a      	str	r2, [r3, #32]
    fea2:	629a      	str	r2, [r3, #40]	; 0x28
    fea4:	631a      	str	r2, [r3, #48]	; 0x30
    fea6:	639a      	str	r2, [r3, #56]	; 0x38
    fea8:	641a      	str	r2, [r3, #64]	; 0x40
    feaa:	649a      	str	r2, [r3, #72]	; 0x48
    feac:	651a      	str	r2, [r3, #80]	; 0x50
    feae:	659a      	str	r2, [r3, #88]	; 0x58
    feb0:	661a      	str	r2, [r3, #96]	; 0x60
    feb2:	669a      	str	r2, [r3, #104]	; 0x68
    feb4:	671a      	str	r2, [r3, #112]	; 0x70
    feb6:	679a      	str	r2, [r3, #120]	; 0x78
    feb8:	e9c3 2120 	strd	r2, r1, [r3, #128]	; 0x80
    febc:	e9c3 4422 	strd	r4, r4, [r3, #136]	; 0x88
    fec0:	e9c3 2124 	strd	r2, r1, [r3, #144]	; 0x90
    fec4:	e9c3 2126 	strd	r2, r1, [r3, #152]	; 0x98
    fec8:	e9c3 2128 	strd	r2, r1, [r3, #160]	; 0xa0
    fecc:	e9c3 212a 	strd	r2, r1, [r3, #168]	; 0xa8
    fed0:	e9c3 212c 	strd	r2, r1, [r3, #176]	; 0xb0
    fed4:	e9c3 212e 	strd	r2, r1, [r3, #184]	; 0xb8
    fed8:	e9c3 2130 	strd	r2, r1, [r3, #192]	; 0xc0
    fedc:	e9c3 2132 	strd	r2, r1, [r3, #200]	; 0xc8
    fee0:	e9c3 2134 	strd	r2, r1, [r3, #208]	; 0xd0
    fee4:	e9c3 2136 	strd	r2, r1, [r3, #216]	; 0xd8
    fee8:	e9c3 2138 	strd	r2, r1, [r3, #224]	; 0xe0
    feec:	e9c3 213a 	strd	r2, r1, [r3, #232]	; 0xe8
    fef0:	e9c3 213c 	strd	r2, r1, [r3, #240]	; 0xf0
    fef4:	e9c3 213e 	strd	r2, r1, [r3, #248]	; 0xf8
    fef8:	f8c3 1104 	str.w	r1, [r3, #260]	; 0x104
    fefc:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
    ff00:	f8c3 110c 	str.w	r1, [r3, #268]	; 0x10c
    ff04:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
    ff08:	4620      	mov	r0, r4
    ff0a:	7035      	strb	r5, [r6, #0]
    ff0c:	bd70      	pop	{r4, r5, r6, pc}
    ff0e:	bf00      	nop
    ff10:	200200cc 	.word	0x200200cc
    ff14:	2002010c 	.word	0x2002010c
    ff18:	20020110 	.word	0x20020110
    ff1c:	2002014c 	.word	0x2002014c
    ff20:	200249ce 	.word	0x200249ce

0000ff24 <nrf_mem_register>:
    ff24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    ff28:	4b87      	ldr	r3, [pc, #540]	; (10148 <nrf_mem_register+0x224>)
    ff2a:	b087      	sub	sp, #28
    ff2c:	781b      	ldrb	r3, [r3, #0]
    ff2e:	2b00      	cmp	r3, #0
    ff30:	f000 808c 	beq.w	1004c <nrf_mem_register+0x128>
    ff34:	b328      	cbz	r0, ff82 <nrf_mem_register+0x5e>
    ff36:	b321      	cbz	r1, ff82 <nrf_mem_register+0x5e>
    ff38:	780b      	ldrb	r3, [r1, #0]
    ff3a:	f8df 8218 	ldr.w	r8, [pc, #536]	; 10154 <nrf_mem_register+0x230>
    ff3e:	eb03 1303 	add.w	r3, r3, r3, lsl #4
    ff42:	eb08 03c3 	add.w	r3, r8, r3, lsl #3
    ff46:	685b      	ldr	r3, [r3, #4]
    ff48:	f8b1 c00c 	ldrh.w	ip, [r1, #12]
    ff4c:	4463      	add	r3, ip
    ff4e:	2b10      	cmp	r3, #16
    ff50:	d811      	bhi.n	ff76 <nrf_mem_register+0x52>
    ff52:	f04f 0a00 	mov.w	sl, #0
    ff56:	4689      	mov	r9, r1
    ff58:	4b7c      	ldr	r3, [pc, #496]	; (1014c <nrf_mem_register+0x228>)
    ff5a:	4f7d      	ldr	r7, [pc, #500]	; (10150 <nrf_mem_register+0x22c>)
    ff5c:	681b      	ldr	r3, [r3, #0]
    ff5e:	ea4f 0e8c 	mov.w	lr, ip, lsl #2
    ff62:	9300      	str	r3, [sp, #0]
    ff64:	68b9      	ldr	r1, [r7, #8]
    ff66:	b191      	cbz	r1, ff8e <nrf_mem_register+0x6a>
    ff68:	f10a 0a01 	add.w	sl, sl, #1
    ff6c:	f1ba 0f05 	cmp.w	sl, #5
    ff70:	f107 070c 	add.w	r7, r7, #12
    ff74:	d1f6      	bne.n	ff64 <nrf_mem_register+0x40>
    ff76:	f248 1b07 	movw	fp, #33031	; 0x8107
    ff7a:	4658      	mov	r0, fp
    ff7c:	b007      	add	sp, #28
    ff7e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ff82:	f248 1b0e 	movw	fp, #33038	; 0x810e
    ff86:	4658      	mov	r0, fp
    ff88:	b007      	add	sp, #28
    ff8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ff8e:	f1bc 0f00 	cmp.w	ip, #0
    ff92:	d061      	beq.n	10058 <nrf_mem_register+0x134>
    ff94:	460d      	mov	r5, r1
    ff96:	460c      	mov	r4, r1
    ff98:	f8d9 3010 	ldr.w	r3, [r9, #16]
    ff9c:	eb0e 0b03 	add.w	fp, lr, r3
    ffa0:	885a      	ldrh	r2, [r3, #2]
    ffa2:	f833 6b04 	ldrh.w	r6, [r3], #4
    ffa6:	4415      	add	r5, r2
    ffa8:	459b      	cmp	fp, r3
    ffaa:	fb02 4406 	mla	r4, r2, r6, r4
    ffae:	d1f7      	bne.n	ffa0 <nrf_mem_register+0x7c>
    ffb0:	f8d9 3008 	ldr.w	r3, [r9, #8]
    ffb4:	42a3      	cmp	r3, r4
    ffb6:	d3d7      	bcc.n	ff68 <nrf_mem_register+0x44>
    ffb8:	9b00      	ldr	r3, [sp, #0]
    ffba:	442b      	add	r3, r5
    ffbc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
    ffc0:	d2d2      	bcs.n	ff68 <nrf_mem_register+0x44>
    ffc2:	4c63      	ldr	r4, [pc, #396]	; (10150 <nrf_mem_register+0x22c>)
    ffc4:	eb0a 024a 	add.w	r2, sl, sl, lsl #1
    ffc8:	0092      	lsls	r2, r2, #2
    ffca:	f8c0 a000 	str.w	sl, [r0]
    ffce:	18a0      	adds	r0, r4, r2
    ffd0:	f844 9002 	str.w	r9, [r4, r2]
    ffd4:	9a00      	ldr	r2, [sp, #0]
    ffd6:	468b      	mov	fp, r1
    ffd8:	e9c0 2501 	strd	r2, r5, [r0, #4]
    ffdc:	f899 2001 	ldrb.w	r2, [r9, #1]
    ffe0:	485a      	ldr	r0, [pc, #360]	; (1014c <nrf_mem_register+0x228>)
    ffe2:	2a01      	cmp	r2, #1
    ffe4:	6003      	str	r3, [r0, #0]
    ffe6:	d0c8      	beq.n	ff7a <nrf_mem_register+0x56>
    ffe8:	f8b9 300c 	ldrh.w	r3, [r9, #12]
    ffec:	2b00      	cmp	r3, #0
    ffee:	d0c4      	beq.n	ff7a <nrf_mem_register+0x56>
    fff0:	2500      	movs	r5, #0
    fff2:	f8cd 9004 	str.w	r9, [sp, #4]
    fff6:	f8cd a00c 	str.w	sl, [sp, #12]
    fffa:	f8cd b014 	str.w	fp, [sp, #20]
    fffe:	9b01      	ldr	r3, [sp, #4]
   10000:	781f      	ldrb	r7, [r3, #0]
   10002:	691a      	ldr	r2, [r3, #16]
   10004:	013b      	lsls	r3, r7, #4
   10006:	eb03 0907 	add.w	r9, r3, r7
   1000a:	9300      	str	r3, [sp, #0]
   1000c:	eb08 03c9 	add.w	r3, r8, r9, lsl #3
   10010:	6859      	ldr	r1, [r3, #4]
   10012:	f832 4025 	ldrh.w	r4, [r2, r5, lsl #2]
   10016:	9102      	str	r1, [sp, #8]
   10018:	bb39      	cbnz	r1, 1006a <nrf_mem_register+0x146>
   1001a:	9a03      	ldr	r2, [sp, #12]
   1001c:	60dd      	str	r5, [r3, #12]
   1001e:	609a      	str	r2, [r3, #8]
   10020:	9b00      	ldr	r3, [sp, #0]
   10022:	443b      	add	r3, r7
   10024:	461f      	mov	r7, r3
   10026:	eb08 01c3 	add.w	r1, r8, r3, lsl #3
   1002a:	684b      	ldr	r3, [r1, #4]
   1002c:	f858 2037 	ldr.w	r2, [r8, r7, lsl #3]
   10030:	3301      	adds	r3, #1
   10032:	4294      	cmp	r4, r2
   10034:	604b      	str	r3, [r1, #4]
   10036:	d912      	bls.n	1005e <nrf_mem_register+0x13a>
   10038:	9b01      	ldr	r3, [sp, #4]
   1003a:	f848 4037 	str.w	r4, [r8, r7, lsl #3]
   1003e:	899b      	ldrh	r3, [r3, #12]
   10040:	3501      	adds	r5, #1
   10042:	429d      	cmp	r5, r3
   10044:	d3db      	bcc.n	fffe <nrf_mem_register+0xda>
   10046:	f8dd b014 	ldr.w	fp, [sp, #20]
   1004a:	e796      	b.n	ff7a <nrf_mem_register+0x56>
   1004c:	f248 1b08 	movw	fp, #33032	; 0x8108
   10050:	4658      	mov	r0, fp
   10052:	b007      	add	sp, #28
   10054:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   10058:	9b00      	ldr	r3, [sp, #0]
   1005a:	4665      	mov	r5, ip
   1005c:	e7ae      	b.n	ffbc <nrf_mem_register+0x98>
   1005e:	9b01      	ldr	r3, [sp, #4]
   10060:	3501      	adds	r5, #1
   10062:	899b      	ldrh	r3, [r3, #12]
   10064:	42ab      	cmp	r3, r5
   10066:	d8ca      	bhi.n	fffe <nrf_mem_register+0xda>
   10068:	e7ed      	b.n	10046 <nrf_mem_register+0x122>
   1006a:	2600      	movs	r6, #0
   1006c:	f101 3aff 	add.w	sl, r1, #4294967295
   10070:	9504      	str	r5, [sp, #16]
   10072:	eb06 000a 	add.w	r0, r6, sl
   10076:	eb09 0206 	add.w	r2, r9, r6
   1007a:	3201      	adds	r2, #1
   1007c:	3001      	adds	r0, #1
   1007e:	f858 c032 	ldr.w	ip, [r8, r2, lsl #3]
   10082:	0840      	lsrs	r0, r0, #1
   10084:	4d32      	ldr	r5, [pc, #200]	; (10150 <nrf_mem_register+0x22c>)
   10086:	eb09 0100 	add.w	r1, r9, r0
   1008a:	eb09 030a 	add.w	r3, r9, sl
   1008e:	3101      	adds	r1, #1
   10090:	3301      	adds	r3, #1
   10092:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
   10096:	f858 e031 	ldr.w	lr, [r8, r1, lsl #3]
   1009a:	f855 b02c 	ldr.w	fp, [r5, ip, lsl #2]
   1009e:	f858 c033 	ldr.w	ip, [r8, r3, lsl #3]
   100a2:	eb08 02c2 	add.w	r2, r8, r2, lsl #3
   100a6:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
   100aa:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
   100ae:	f8db b010 	ldr.w	fp, [fp, #16]
   100b2:	6852      	ldr	r2, [r2, #4]
   100b4:	f855 e02e 	ldr.w	lr, [r5, lr, lsl #2]
   100b8:	f855 c02c 	ldr.w	ip, [r5, ip, lsl #2]
   100bc:	eb08 01c1 	add.w	r1, r8, r1, lsl #3
   100c0:	eb08 03c3 	add.w	r3, r8, r3, lsl #3
   100c4:	f83b 2022 	ldrh.w	r2, [fp, r2, lsl #2]
   100c8:	f8de e010 	ldr.w	lr, [lr, #16]
   100cc:	6849      	ldr	r1, [r1, #4]
   100ce:	f8dc c010 	ldr.w	ip, [ip, #16]
   100d2:	685b      	ldr	r3, [r3, #4]
   100d4:	4294      	cmp	r4, r2
   100d6:	f83e 1021 	ldrh.w	r1, [lr, r1, lsl #2]
   100da:	f83c 3023 	ldrh.w	r3, [ip, r3, lsl #2]
   100de:	d92d      	bls.n	1013c <nrf_mem_register+0x218>
   100e0:	429c      	cmp	r4, r3
   100e2:	d22d      	bcs.n	10140 <nrf_mem_register+0x21c>
   100e4:	428c      	cmp	r4, r1
   100e6:	d924      	bls.n	10132 <nrf_mem_register+0x20e>
   100e8:	1c46      	adds	r6, r0, #1
   100ea:	45b2      	cmp	sl, r6
   100ec:	d2c1      	bcs.n	10072 <nrf_mem_register+0x14e>
   100ee:	2610      	movs	r6, #16
   100f0:	9d04      	ldr	r5, [sp, #16]
   100f2:	9a02      	ldr	r2, [sp, #8]
   100f4:	42b2      	cmp	r2, r6
   100f6:	d911      	bls.n	1011c <nrf_mem_register+0x1f8>
   100f8:	9b00      	ldr	r3, [sp, #0]
   100fa:	443b      	add	r3, r7
   100fc:	441a      	add	r2, r3
   100fe:	4433      	add	r3, r6
   10100:	eb08 0ac2 	add.w	sl, r8, r2, lsl #3
   10104:	eb08 09c3 	add.w	r9, r8, r3, lsl #3
   10108:	2208      	movs	r2, #8
   1010a:	4651      	mov	r1, sl
   1010c:	eb0a 0002 	add.w	r0, sl, r2
   10110:	f1aa 0a08 	sub.w	sl, sl, #8
   10114:	f009 fbcc 	bl	198b0 <memcpy>
   10118:	45d1      	cmp	r9, sl
   1011a:	d1f5      	bne.n	10108 <nrf_mem_register+0x1e4>
   1011c:	9b00      	ldr	r3, [sp, #0]
   1011e:	9903      	ldr	r1, [sp, #12]
   10120:	443b      	add	r3, r7
   10122:	4433      	add	r3, r6
   10124:	3301      	adds	r3, #1
   10126:	eb08 02c3 	add.w	r2, r8, r3, lsl #3
   1012a:	f848 1033 	str.w	r1, [r8, r3, lsl #3]
   1012e:	6055      	str	r5, [r2, #4]
   10130:	e776      	b.n	10020 <nrf_mem_register+0xfc>
   10132:	f100 3aff 	add.w	sl, r0, #4294967295
   10136:	4556      	cmp	r6, sl
   10138:	d99b      	bls.n	10072 <nrf_mem_register+0x14e>
   1013a:	e7d8      	b.n	100ee <nrf_mem_register+0x1ca>
   1013c:	9d04      	ldr	r5, [sp, #16]
   1013e:	e7d8      	b.n	100f2 <nrf_mem_register+0x1ce>
   10140:	9d04      	ldr	r5, [sp, #16]
   10142:	f10a 0601 	add.w	r6, sl, #1
   10146:	e7d4      	b.n	100f2 <nrf_mem_register+0x1ce>
   10148:	200249ce 	.word	0x200249ce
   1014c:	2002010c 	.word	0x2002010c
   10150:	20020110 	.word	0x20020110
   10154:	2002014c 	.word	0x2002014c

00010158 <nrf_malloc>:
   10158:	4b03      	ldr	r3, [pc, #12]	; (10168 <nrf_malloc+0x10>)
   1015a:	781b      	ldrb	r3, [r3, #0]
   1015c:	b10b      	cbz	r3, 10162 <nrf_malloc+0xa>
   1015e:	f7ff bd8d 	b.w	fc7c <mem_alloc.constprop.4>
   10162:	4618      	mov	r0, r3
   10164:	4770      	bx	lr
   10166:	bf00      	nop
   10168:	200249ce 	.word	0x200249ce

0001016c <nrf_free>:
   1016c:	4b04      	ldr	r3, [pc, #16]	; (10180 <nrf_free+0x14>)
   1016e:	781b      	ldrb	r3, [r3, #0]
   10170:	b123      	cbz	r3, 1017c <nrf_free+0x10>
   10172:	b118      	cbz	r0, 1017c <nrf_free+0x10>
   10174:	4601      	mov	r1, r0
   10176:	2000      	movs	r0, #0
   10178:	f7ff bc30 	b.w	f9dc <mem_free>
   1017c:	4770      	bx	lr
   1017e:	bf00      	nop
   10180:	200249ce 	.word	0x200249ce

00010184 <nrf_shared_malloc>:
   10184:	4b03      	ldr	r3, [pc, #12]	; (10194 <nrf_shared_malloc+0x10>)
   10186:	781b      	ldrb	r3, [r3, #0]
   10188:	b10b      	cbz	r3, 1018e <nrf_shared_malloc+0xa>
   1018a:	f7ff bc93 	b.w	fab4 <mem_alloc.constprop.5>
   1018e:	4618      	mov	r0, r3
   10190:	4770      	bx	lr
   10192:	bf00      	nop
   10194:	200249ce 	.word	0x200249ce

00010198 <nrf_shared_free>:
   10198:	4b04      	ldr	r3, [pc, #16]	; (101ac <nrf_shared_free+0x14>)
   1019a:	781b      	ldrb	r3, [r3, #0]
   1019c:	b123      	cbz	r3, 101a8 <nrf_shared_free+0x10>
   1019e:	b118      	cbz	r0, 101a8 <nrf_shared_free+0x10>
   101a0:	4601      	mov	r1, r0
   101a2:	2001      	movs	r0, #1
   101a4:	f7ff bc1a 	b.w	f9dc <mem_free>
   101a8:	4770      	bx	lr
   101aa:	bf00      	nop
   101ac:	200249ce 	.word	0x200249ce

000101b0 <ip_client_event_handler>:
   101b0:	f850 1b08 	ldr.w	r1, [r0], #8
   101b4:	0c09      	lsrs	r1, r1, #16
   101b6:	f004 bd33 	b.w	14c20 <rpc_ip_event_handler>
   101ba:	bf00      	nop

000101bc <rpc_ip_client_init>:
   101bc:	4801      	ldr	r0, [pc, #4]	; (101c4 <rpc_ip_client_init+0x8>)
   101be:	f005 ba23 	b.w	15608 <rpc_client_register>
   101c2:	bf00      	nop
   101c4:	0001a8b0 	.word	0x0001a8b0

000101c8 <rpc_ip_client_request_alloc>:
   101c8:	2300      	movs	r3, #0
   101ca:	b510      	push	{r4, lr}
   101cc:	b082      	sub	sp, #8
   101ce:	9301      	str	r3, [sp, #4]
   101d0:	b158      	cbz	r0, 101ea <rpc_ip_client_request_alloc+0x22>
   101d2:	4604      	mov	r4, r0
   101d4:	aa01      	add	r2, sp, #4
   101d6:	2004      	movs	r0, #4
   101d8:	f005 fc4e 	bl	15a78 <rpc_message_alloc>
   101dc:	b918      	cbnz	r0, 101e6 <rpc_ip_client_request_alloc+0x1e>
   101de:	9b01      	ldr	r3, [sp, #4]
   101e0:	b10b      	cbz	r3, 101e6 <rpc_ip_client_request_alloc+0x1e>
   101e2:	3308      	adds	r3, #8
   101e4:	6023      	str	r3, [r4, #0]
   101e6:	b002      	add	sp, #8
   101e8:	bd10      	pop	{r4, pc}
   101ea:	2007      	movs	r0, #7
   101ec:	b002      	add	sp, #8
   101ee:	bd10      	pop	{r4, pc}

000101f0 <rpc_ip_client_request_send>:
   101f0:	f401 4370 	and.w	r3, r1, #61440	; 0xf000
   101f4:	f5b3 4fe0 	cmp.w	r3, #28672	; 0x7000
   101f8:	d10b      	bne.n	10212 <rpc_ip_client_request_send+0x22>
   101fa:	b160      	cbz	r0, 10216 <rpc_ip_client_request_send+0x26>
   101fc:	4603      	mov	r3, r0
   101fe:	f830 2c08 	ldrh.w	r2, [r0, #-8]
   10202:	2004      	movs	r0, #4
   10204:	ea42 4101 	orr.w	r1, r2, r1, lsl #16
   10208:	f843 1d08 	str.w	r1, [r3, #-8]!
   1020c:	4619      	mov	r1, r3
   1020e:	f005 bc1b 	b.w	15a48 <rpc_message_send>
   10212:	200f      	movs	r0, #15
   10214:	4770      	bx	lr
   10216:	2007      	movs	r0, #7
   10218:	4770      	bx	lr
   1021a:	bf00      	nop

0001021c <rpc_ip_client_message_free>:
   1021c:	b120      	cbz	r0, 10228 <rpc_ip_client_message_free+0xc>
   1021e:	f1a0 0108 	sub.w	r1, r0, #8
   10222:	2004      	movs	r0, #4
   10224:	f005 bc5a 	b.w	15adc <rpc_message_free>
   10228:	2007      	movs	r0, #7
   1022a:	4770      	bx	lr

0001022c <rpc_ip_client_data_free>:
   1022c:	b118      	cbz	r0, 10236 <rpc_ip_client_data_free+0xa>
   1022e:	4601      	mov	r1, r0
   10230:	2004      	movs	r0, #4
   10232:	f005 bd65 	b.w	15d00 <rpc_message_data_free>
   10236:	2007      	movs	r0, #7
   10238:	4770      	bx	lr
   1023a:	bf00      	nop

0001023c <secure_client_socket>:
   1023c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   10240:	460c      	mov	r4, r1
   10242:	680b      	ldr	r3, [r1, #0]
   10244:	4f46      	ldr	r7, [pc, #280]	; (10360 <secure_client_socket+0x124>)
   10246:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
   1024a:	600b      	str	r3, [r1, #0]
   1024c:	680b      	ldr	r3, [r1, #0]
   1024e:	00c6      	lsls	r6, r0, #3
   10250:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
   10254:	600b      	str	r3, [r1, #0]
   10256:	eb07 0a06 	add.w	sl, r7, r6
   1025a:	b082      	sub	sp, #8
   1025c:	f8da 3004 	ldr.w	r3, [sl, #4]
   10260:	6989      	ldr	r1, [r1, #24]
   10262:	f247 0281 	movw	r2, #28801	; 0x7081
   10266:	4605      	mov	r5, r0
   10268:	f8d4 8000 	ldr.w	r8, [r4]
   1026c:	f003 fbd0 	bl	13a10 <ip_interface_request_create>
   10270:	2800      	cmp	r0, #0
   10272:	d06f      	beq.n	10354 <secure_client_socket+0x118>
   10274:	f8da 2004 	ldr.w	r2, [sl, #4]
   10278:	4681      	mov	r9, r0
   1027a:	2a00      	cmp	r2, #0
   1027c:	d15f      	bne.n	1033e <secure_client_socket+0x102>
   1027e:	4b39      	ldr	r3, [pc, #228]	; (10364 <secure_client_socket+0x128>)
   10280:	1971      	adds	r1, r6, r5
   10282:	eb03 0181 	add.w	r1, r3, r1, lsl #2
   10286:	2224      	movs	r2, #36	; 0x24
   10288:	f109 0014 	add.w	r0, r9, #20
   1028c:	f009 fb10 	bl	198b0 <memcpy>
   10290:	f8d9 3008 	ldr.w	r3, [r9, #8]
   10294:	4649      	mov	r1, r9
   10296:	3324      	adds	r3, #36	; 0x24
   10298:	f8c9 3008 	str.w	r3, [r9, #8]
   1029c:	6822      	ldr	r2, [r4, #0]
   1029e:	4643      	mov	r3, r8
   102a0:	0c12      	lsrs	r2, r2, #16
   102a2:	0412      	lsls	r2, r2, #16
   102a4:	f042 020a 	orr.w	r2, r2, #10
   102a8:	6022      	str	r2, [r4, #0]
   102aa:	4620      	mov	r0, r4
   102ac:	f247 0281 	movw	r2, #28801	; 0x7081
   102b0:	f003 fbce 	bl	13a50 <ip_interface_request_send>
   102b4:	4603      	mov	r3, r0
   102b6:	b970      	cbnz	r0, 102d6 <secure_client_socket+0x9a>
   102b8:	6823      	ldr	r3, [r4, #0]
   102ba:	00db      	lsls	r3, r3, #3
   102bc:	d40f      	bmi.n	102de <secure_client_socket+0xa2>
   102be:	f04f 33ff 	mov.w	r3, #4294967295
   102c2:	f64f 72ff 	movw	r2, #65535	; 0xffff
   102c6:	210b      	movs	r1, #11
   102c8:	4628      	mov	r0, r5
   102ca:	f003 fbd5 	bl	13a78 <ip_interface_wait>
   102ce:	4603      	mov	r3, r0
   102d0:	b150      	cbz	r0, 102e8 <secure_client_socket+0xac>
   102d2:	f8c4 8000 	str.w	r8, [r4]
   102d6:	4618      	mov	r0, r3
   102d8:	b002      	add	sp, #8
   102da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   102de:	2373      	movs	r3, #115	; 0x73
   102e0:	4618      	mov	r0, r3
   102e2:	b002      	add	sp, #8
   102e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   102e8:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
   102ec:	f04f 33ff 	mov.w	r3, #4294967295
   102f0:	4611      	mov	r1, r2
   102f2:	4628      	mov	r0, r5
   102f4:	f003 fbc0 	bl	13a78 <ip_interface_wait>
   102f8:	4603      	mov	r3, r0
   102fa:	bb30      	cbnz	r0, 1034a <secure_client_socket+0x10e>
   102fc:	f857 0035 	ldr.w	r0, [r7, r5, lsl #3]
   10300:	b138      	cbz	r0, 10312 <secure_client_socket+0xd6>
   10302:	9301      	str	r3, [sp, #4]
   10304:	f7ff ff32 	bl	1016c <nrf_free>
   10308:	9b01      	ldr	r3, [sp, #4]
   1030a:	443e      	add	r6, r7
   1030c:	6073      	str	r3, [r6, #4]
   1030e:	f847 3035 	str.w	r3, [r7, r5, lsl #3]
   10312:	4618      	mov	r0, r3
   10314:	6822      	ldr	r2, [r4, #0]
   10316:	f022 6280 	bic.w	r2, r2, #67108864	; 0x4000000
   1031a:	6022      	str	r2, [r4, #0]
   1031c:	6822      	ldr	r2, [r4, #0]
   1031e:	0c12      	lsrs	r2, r2, #16
   10320:	0412      	lsls	r2, r2, #16
   10322:	f042 020c 	orr.w	r2, r2, #12
   10326:	6022      	str	r2, [r4, #0]
   10328:	6822      	ldr	r2, [r4, #0]
   1032a:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
   1032e:	6022      	str	r2, [r4, #0]
   10330:	6822      	ldr	r2, [r4, #0]
   10332:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
   10336:	6022      	str	r2, [r4, #0]
   10338:	b002      	add	sp, #8
   1033a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1033e:	f857 1035 	ldr.w	r1, [r7, r5, lsl #3]
   10342:	6800      	ldr	r0, [r0, #0]
   10344:	f009 fab4 	bl	198b0 <memcpy>
   10348:	e799      	b.n	1027e <secure_client_socket+0x42>
   1034a:	2b73      	cmp	r3, #115	; 0x73
   1034c:	d0c3      	beq.n	102d6 <secure_client_socket+0x9a>
   1034e:	f8c4 8000 	str.w	r8, [r4]
   10352:	e7c0      	b.n	102d6 <secure_client_socket+0x9a>
   10354:	230c      	movs	r3, #12
   10356:	4618      	mov	r0, r3
   10358:	b002      	add	sp, #8
   1035a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1035e:	bf00      	nop
   10360:	200203a0 	.word	0x200203a0
   10364:	2002025c 	.word	0x2002025c

00010368 <tls_interface_init>:
   10368:	2000      	movs	r0, #0
   1036a:	4770      	bx	lr

0001036c <tls_interface_open>:
   1036c:	b538      	push	{r3, r4, r5, lr}
   1036e:	1e4b      	subs	r3, r1, #1
   10370:	2b01      	cmp	r3, #1
   10372:	d808      	bhi.n	10386 <tls_interface_open+0x1a>
   10374:	4614      	mov	r4, r2
   10376:	b162      	cbz	r2, 10392 <tls_interface_open+0x26>
   10378:	2901      	cmp	r1, #1
   1037a:	d02d      	beq.n	103d8 <tls_interface_open+0x6c>
   1037c:	f5b2 7f87 	cmp.w	r2, #270	; 0x10e
   10380:	bf08      	it	eq
   10382:	2202      	moveq	r2, #2
   10384:	d00d      	beq.n	103a2 <tls_interface_open+0x36>
   10386:	2029      	movs	r0, #41	; 0x29
   10388:	f7fe fbb2 	bl	eaf0 <bsd_os_errno_set>
   1038c:	f04f 35ff 	mov.w	r5, #4294967295
   10390:	e020      	b.n	103d4 <tls_interface_open+0x68>
   10392:	2901      	cmp	r1, #1
   10394:	bf0b      	itete	eq
   10396:	2201      	moveq	r2, #1
   10398:	2202      	movne	r2, #2
   1039a:	f44f 7482 	moveq.w	r4, #260	; 0x104
   1039e:	f44f 7487 	movne.w	r4, #270	; 0x10e
   103a2:	f003 fb95 	bl	13ad0 <ip_interface_open>
   103a6:	1e05      	subs	r5, r0, #0
   103a8:	db1b      	blt.n	103e2 <tls_interface_open+0x76>
   103aa:	4b0f      	ldr	r3, [pc, #60]	; (103e8 <tls_interface_open+0x7c>)
   103ac:	eb05 00c5 	add.w	r0, r5, r5, lsl #3
   103b0:	eb03 0080 	add.w	r0, r3, r0, lsl #2
   103b4:	2224      	movs	r2, #36	; 0x24
   103b6:	490d      	ldr	r1, [pc, #52]	; (103ec <tls_interface_open+0x80>)
   103b8:	f009 fa7a 	bl	198b0 <memcpy>
   103bc:	4628      	mov	r0, r5
   103be:	f004 ffe7 	bl	15390 <interface_socket_from_handle_get>
   103c2:	6803      	ldr	r3, [r0, #0]
   103c4:	6144      	str	r4, [r0, #20]
   103c6:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
   103ca:	6003      	str	r3, [r0, #0]
   103cc:	6803      	ldr	r3, [r0, #0]
   103ce:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
   103d2:	6003      	str	r3, [r0, #0]
   103d4:	4628      	mov	r0, r5
   103d6:	bd38      	pop	{r3, r4, r5, pc}
   103d8:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
   103dc:	d1d3      	bne.n	10386 <tls_interface_open+0x1a>
   103de:	460a      	mov	r2, r1
   103e0:	e7df      	b.n	103a2 <tls_interface_open+0x36>
   103e2:	f04f 35ff 	mov.w	r5, #4294967295
   103e6:	e7f5      	b.n	103d4 <tls_interface_open+0x68>
   103e8:	2002025c 	.word	0x2002025c
   103ec:	0001a8c0 	.word	0x0001a8c0

000103f0 <tls_interface_close>:
   103f0:	b538      	push	{r3, r4, r5, lr}
   103f2:	4604      	mov	r4, r0
   103f4:	f004 ffcc 	bl	15390 <interface_socket_from_handle_get>
   103f8:	b180      	cbz	r0, 1041c <tls_interface_close+0x2c>
   103fa:	4d0b      	ldr	r5, [pc, #44]	; (10428 <tls_interface_close+0x38>)
   103fc:	f855 0034 	ldr.w	r0, [r5, r4, lsl #3]
   10400:	b138      	cbz	r0, 10412 <tls_interface_close+0x22>
   10402:	f7ff feb3 	bl	1016c <nrf_free>
   10406:	2300      	movs	r3, #0
   10408:	eb05 02c4 	add.w	r2, r5, r4, lsl #3
   1040c:	f845 3034 	str.w	r3, [r5, r4, lsl #3]
   10410:	6053      	str	r3, [r2, #4]
   10412:	4620      	mov	r0, r4
   10414:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   10418:	f003 bc0c 	b.w	13c34 <ip_interface_close>
   1041c:	2009      	movs	r0, #9
   1041e:	f7fe fb67 	bl	eaf0 <bsd_os_errno_set>
   10422:	f04f 30ff 	mov.w	r0, #4294967295
   10426:	bd38      	pop	{r3, r4, r5, pc}
   10428:	200203a0 	.word	0x200203a0

0001042c <tls_interface_sendto>:
   1042c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   10430:	460d      	mov	r5, r1
   10432:	e9dd 8908 	ldrd	r8, r9, [sp, #32]
   10436:	4616      	mov	r6, r2
   10438:	461f      	mov	r7, r3
   1043a:	4604      	mov	r4, r0
   1043c:	f004 ffa8 	bl	15390 <interface_socket_from_handle_get>
   10440:	2800      	cmp	r0, #0
   10442:	d03b      	beq.n	104bc <tls_interface_sendto+0x90>
   10444:	6803      	ldr	r3, [r0, #0]
   10446:	b29b      	uxth	r3, r3
   10448:	2b0c      	cmp	r3, #12
   1044a:	d039      	beq.n	104c0 <tls_interface_sendto+0x94>
   1044c:	6803      	ldr	r3, [r0, #0]
   1044e:	b29b      	uxth	r3, r3
   10450:	2b0b      	cmp	r3, #11
   10452:	d111      	bne.n	10478 <tls_interface_sendto+0x4c>
   10454:	4b20      	ldr	r3, [pc, #128]	; (104d8 <tls_interface_sendto+0xac>)
   10456:	eb04 04c4 	add.w	r4, r4, r4, lsl #3
   1045a:	f813 3024 	ldrb.w	r3, [r3, r4, lsl #2]
   1045e:	2b02      	cmp	r3, #2
   10460:	d038      	beq.n	104d4 <tls_interface_sendto+0xa8>
   10462:	6903      	ldr	r3, [r0, #16]
   10464:	2b01      	cmp	r3, #1
   10466:	bf14      	ite	ne
   10468:	2039      	movne	r0, #57	; 0x39
   1046a:	202a      	moveq	r0, #42	; 0x2a
   1046c:	f7fe fb40 	bl	eaf0 <bsd_os_errno_set>
   10470:	f04f 30ff 	mov.w	r0, #4294967295
   10474:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   10478:	6903      	ldr	r3, [r0, #16]
   1047a:	2b01      	cmp	r3, #1
   1047c:	d00b      	beq.n	10496 <tls_interface_sendto+0x6a>
   1047e:	2b02      	cmp	r3, #2
   10480:	d001      	beq.n	10486 <tls_interface_sendto+0x5a>
   10482:	2039      	movs	r0, #57	; 0x39
   10484:	e7f2      	b.n	1046c <tls_interface_sendto+0x40>
   10486:	6803      	ldr	r3, [r0, #0]
   10488:	b29b      	uxth	r3, r3
   1048a:	2b02      	cmp	r3, #2
   1048c:	d007      	beq.n	1049e <tls_interface_sendto+0x72>
   1048e:	6803      	ldr	r3, [r0, #0]
   10490:	b29b      	uxth	r3, r3
   10492:	2b04      	cmp	r3, #4
   10494:	d003      	beq.n	1049e <tls_interface_sendto+0x72>
   10496:	6803      	ldr	r3, [r0, #0]
   10498:	b29b      	uxth	r3, r3
   1049a:	2b05      	cmp	r3, #5
   1049c:	d1f1      	bne.n	10482 <tls_interface_sendto+0x56>
   1049e:	4b0e      	ldr	r3, [pc, #56]	; (104d8 <tls_interface_sendto+0xac>)
   104a0:	eb04 02c4 	add.w	r2, r4, r4, lsl #3
   104a4:	f813 3022 	ldrb.w	r3, [r3, r2, lsl #2]
   104a8:	2b02      	cmp	r3, #2
   104aa:	d1ea      	bne.n	10482 <tls_interface_sendto+0x56>
   104ac:	4601      	mov	r1, r0
   104ae:	4620      	mov	r0, r4
   104b0:	f7ff fec4 	bl	1023c <secure_client_socket>
   104b4:	2800      	cmp	r0, #0
   104b6:	d003      	beq.n	104c0 <tls_interface_sendto+0x94>
   104b8:	dcd8      	bgt.n	1046c <tls_interface_sendto+0x40>
   104ba:	e7d9      	b.n	10470 <tls_interface_sendto+0x44>
   104bc:	2009      	movs	r0, #9
   104be:	e7d5      	b.n	1046c <tls_interface_sendto+0x40>
   104c0:	e9cd 8908 	strd	r8, r9, [sp, #32]
   104c4:	463b      	mov	r3, r7
   104c6:	4632      	mov	r2, r6
   104c8:	4629      	mov	r1, r5
   104ca:	4620      	mov	r0, r4
   104cc:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   104d0:	f003 bc20 	b.w	13d14 <ip_interface_sendto>
   104d4:	2023      	movs	r0, #35	; 0x23
   104d6:	e7c9      	b.n	1046c <tls_interface_sendto+0x40>
   104d8:	2002025c 	.word	0x2002025c

000104dc <tls_interface_recvfrom>:
   104dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   104e0:	460d      	mov	r5, r1
   104e2:	e9dd 8908 	ldrd	r8, r9, [sp, #32]
   104e6:	4616      	mov	r6, r2
   104e8:	461f      	mov	r7, r3
   104ea:	4604      	mov	r4, r0
   104ec:	f004 ff50 	bl	15390 <interface_socket_from_handle_get>
   104f0:	2800      	cmp	r0, #0
   104f2:	d038      	beq.n	10566 <tls_interface_recvfrom+0x8a>
   104f4:	6803      	ldr	r3, [r0, #0]
   104f6:	b29b      	uxth	r3, r3
   104f8:	2b0c      	cmp	r3, #12
   104fa:	d00f      	beq.n	1051c <tls_interface_recvfrom+0x40>
   104fc:	6803      	ldr	r3, [r0, #0]
   104fe:	b29b      	uxth	r3, r3
   10500:	2b0d      	cmp	r3, #13
   10502:	d00b      	beq.n	1051c <tls_interface_recvfrom+0x40>
   10504:	6903      	ldr	r3, [r0, #16]
   10506:	2b01      	cmp	r3, #1
   10508:	d01a      	beq.n	10540 <tls_interface_recvfrom+0x64>
   1050a:	2b02      	cmp	r3, #2
   1050c:	d010      	beq.n	10530 <tls_interface_recvfrom+0x54>
   1050e:	2023      	movs	r0, #35	; 0x23
   10510:	f7fe faee 	bl	eaf0 <bsd_os_errno_set>
   10514:	f04f 30ff 	mov.w	r0, #4294967295
   10518:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1051c:	e9cd 8908 	strd	r8, r9, [sp, #32]
   10520:	463b      	mov	r3, r7
   10522:	4632      	mov	r2, r6
   10524:	4629      	mov	r1, r5
   10526:	4620      	mov	r0, r4
   10528:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1052c:	f003 bd6a 	b.w	14004 <ip_interface_recvfrom>
   10530:	6803      	ldr	r3, [r0, #0]
   10532:	b29b      	uxth	r3, r3
   10534:	2b02      	cmp	r3, #2
   10536:	d007      	beq.n	10548 <tls_interface_recvfrom+0x6c>
   10538:	6803      	ldr	r3, [r0, #0]
   1053a:	b29b      	uxth	r3, r3
   1053c:	2b04      	cmp	r3, #4
   1053e:	d003      	beq.n	10548 <tls_interface_recvfrom+0x6c>
   10540:	6803      	ldr	r3, [r0, #0]
   10542:	b29b      	uxth	r3, r3
   10544:	2b05      	cmp	r3, #5
   10546:	d1e2      	bne.n	1050e <tls_interface_recvfrom+0x32>
   10548:	4b08      	ldr	r3, [pc, #32]	; (1056c <tls_interface_recvfrom+0x90>)
   1054a:	eb04 02c4 	add.w	r2, r4, r4, lsl #3
   1054e:	f813 3022 	ldrb.w	r3, [r3, r2, lsl #2]
   10552:	2b02      	cmp	r3, #2
   10554:	d1db      	bne.n	1050e <tls_interface_recvfrom+0x32>
   10556:	4601      	mov	r1, r0
   10558:	4620      	mov	r0, r4
   1055a:	f7ff fe6f 	bl	1023c <secure_client_socket>
   1055e:	2800      	cmp	r0, #0
   10560:	d0dc      	beq.n	1051c <tls_interface_recvfrom+0x40>
   10562:	dcd5      	bgt.n	10510 <tls_interface_recvfrom+0x34>
   10564:	e7d6      	b.n	10514 <tls_interface_recvfrom+0x38>
   10566:	2009      	movs	r0, #9
   10568:	e7d2      	b.n	10510 <tls_interface_recvfrom+0x34>
   1056a:	bf00      	nop
   1056c:	2002025c 	.word	0x2002025c

00010570 <tls_interface_bind>:
   10570:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   10574:	460c      	mov	r4, r1
   10576:	4617      	mov	r7, r2
   10578:	4606      	mov	r6, r0
   1057a:	f004 ff09 	bl	15390 <interface_socket_from_handle_get>
   1057e:	2800      	cmp	r0, #0
   10580:	d06d      	beq.n	1065e <tls_interface_bind+0xee>
   10582:	6803      	ldr	r3, [r0, #0]
   10584:	4605      	mov	r5, r0
   10586:	b29b      	uxth	r3, r3
   10588:	2b02      	cmp	r3, #2
   1058a:	d15a      	bne.n	10642 <tls_interface_bind+0xd2>
   1058c:	4621      	mov	r1, r4
   1058e:	463a      	mov	r2, r7
   10590:	4630      	mov	r0, r6
   10592:	f003 ff25 	bl	143e0 <ip_interface_bind>
   10596:	4604      	mov	r4, r0
   10598:	2800      	cmp	r0, #0
   1059a:	d148      	bne.n	1062e <tls_interface_bind+0xbe>
   1059c:	00f7      	lsls	r7, r6, #3
   1059e:	f8df 80c4 	ldr.w	r8, [pc, #196]	; 10664 <tls_interface_bind+0xf4>
   105a2:	19bb      	adds	r3, r7, r6
   105a4:	f818 3023 	ldrb.w	r3, [r8, r3, lsl #2]
   105a8:	2b01      	cmp	r3, #1
   105aa:	d002      	beq.n	105b2 <tls_interface_bind+0x42>
   105ac:	4620      	mov	r0, r4
   105ae:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   105b2:	f8df b0b4 	ldr.w	fp, [pc, #180]	; 10668 <tls_interface_bind+0xf8>
   105b6:	f247 0281 	movw	r2, #28801	; 0x7081
   105ba:	eb0b 0a07 	add.w	sl, fp, r7
   105be:	f8da 3004 	ldr.w	r3, [sl, #4]
   105c2:	69a9      	ldr	r1, [r5, #24]
   105c4:	4630      	mov	r0, r6
   105c6:	f003 fa23 	bl	13a10 <ip_interface_request_create>
   105ca:	4681      	mov	r9, r0
   105cc:	2800      	cmp	r0, #0
   105ce:	d044      	beq.n	1065a <tls_interface_bind+0xea>
   105d0:	f8da 2004 	ldr.w	r2, [sl, #4]
   105d4:	2a00      	cmp	r2, #0
   105d6:	d13a      	bne.n	1064e <tls_interface_bind+0xde>
   105d8:	19b9      	adds	r1, r7, r6
   105da:	eb08 0181 	add.w	r1, r8, r1, lsl #2
   105de:	2224      	movs	r2, #36	; 0x24
   105e0:	f109 0014 	add.w	r0, r9, #20
   105e4:	f009 f964 	bl	198b0 <memcpy>
   105e8:	f8d9 3008 	ldr.w	r3, [r9, #8]
   105ec:	4649      	mov	r1, r9
   105ee:	3324      	adds	r3, #36	; 0x24
   105f0:	f8c9 3008 	str.w	r3, [r9, #8]
   105f4:	682a      	ldr	r2, [r5, #0]
   105f6:	2304      	movs	r3, #4
   105f8:	0c12      	lsrs	r2, r2, #16
   105fa:	0412      	lsls	r2, r2, #16
   105fc:	f042 020a 	orr.w	r2, r2, #10
   10600:	602a      	str	r2, [r5, #0]
   10602:	4628      	mov	r0, r5
   10604:	f247 0281 	movw	r2, #28801	; 0x7081
   10608:	f003 fa22 	bl	13a50 <ip_interface_request_send>
   1060c:	b9e8      	cbnz	r0, 1064a <tls_interface_bind+0xda>
   1060e:	682b      	ldr	r3, [r5, #0]
   10610:	00db      	lsls	r3, r3, #3
   10612:	d418      	bmi.n	10646 <tls_interface_bind+0xd6>
   10614:	4630      	mov	r0, r6
   10616:	f04f 33ff 	mov.w	r3, #4294967295
   1061a:	f64f 72ff 	movw	r2, #65535	; 0xffff
   1061e:	210b      	movs	r1, #11
   10620:	f003 fa2a 	bl	13a78 <ip_interface_wait>
   10624:	2800      	cmp	r0, #0
   10626:	d0c1      	beq.n	105ac <tls_interface_bind+0x3c>
   10628:	2304      	movs	r3, #4
   1062a:	4604      	mov	r4, r0
   1062c:	602b      	str	r3, [r5, #0]
   1062e:	2c00      	cmp	r4, #0
   10630:	ddbc      	ble.n	105ac <tls_interface_bind+0x3c>
   10632:	4620      	mov	r0, r4
   10634:	f04f 34ff 	mov.w	r4, #4294967295
   10638:	f7fe fa5a 	bl	eaf0 <bsd_os_errno_set>
   1063c:	4620      	mov	r0, r4
   1063e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   10642:	242d      	movs	r4, #45	; 0x2d
   10644:	e7f5      	b.n	10632 <tls_interface_bind+0xc2>
   10646:	2473      	movs	r4, #115	; 0x73
   10648:	e7f3      	b.n	10632 <tls_interface_bind+0xc2>
   1064a:	4604      	mov	r4, r0
   1064c:	e7ef      	b.n	1062e <tls_interface_bind+0xbe>
   1064e:	f85b 1036 	ldr.w	r1, [fp, r6, lsl #3]
   10652:	6800      	ldr	r0, [r0, #0]
   10654:	f009 f92c 	bl	198b0 <memcpy>
   10658:	e7be      	b.n	105d8 <tls_interface_bind+0x68>
   1065a:	240c      	movs	r4, #12
   1065c:	e7e9      	b.n	10632 <tls_interface_bind+0xc2>
   1065e:	2409      	movs	r4, #9
   10660:	e7e7      	b.n	10632 <tls_interface_bind+0xc2>
   10662:	bf00      	nop
   10664:	2002025c 	.word	0x2002025c
   10668:	200203a0 	.word	0x200203a0

0001066c <tls_interface_connect>:
   1066c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1066e:	460e      	mov	r6, r1
   10670:	4617      	mov	r7, r2
   10672:	4604      	mov	r4, r0
   10674:	f004 fe8c 	bl	15390 <interface_socket_from_handle_get>
   10678:	b1e8      	cbz	r0, 106b6 <tls_interface_connect+0x4a>
   1067a:	4b13      	ldr	r3, [pc, #76]	; (106c8 <tls_interface_connect+0x5c>)
   1067c:	eb04 02c4 	add.w	r2, r4, r4, lsl #3
   10680:	f813 3022 	ldrb.w	r3, [r3, r2, lsl #2]
   10684:	2b02      	cmp	r3, #2
   10686:	d11c      	bne.n	106c2 <tls_interface_connect+0x56>
   10688:	6803      	ldr	r3, [r0, #0]
   1068a:	4605      	mov	r5, r0
   1068c:	b29b      	uxth	r3, r3
   1068e:	2b02      	cmp	r3, #2
   10690:	d003      	beq.n	1069a <tls_interface_connect+0x2e>
   10692:	6803      	ldr	r3, [r0, #0]
   10694:	b29b      	uxth	r3, r3
   10696:	2b04      	cmp	r3, #4
   10698:	d113      	bne.n	106c2 <tls_interface_connect+0x56>
   1069a:	463a      	mov	r2, r7
   1069c:	4631      	mov	r1, r6
   1069e:	4620      	mov	r0, r4
   106a0:	f003 fde4 	bl	1426c <ip_interface_connect>
   106a4:	b110      	cbz	r0, 106ac <tls_interface_connect+0x40>
   106a6:	2800      	cmp	r0, #0
   106a8:	dc06      	bgt.n	106b8 <tls_interface_connect+0x4c>
   106aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   106ac:	4629      	mov	r1, r5
   106ae:	4620      	mov	r0, r4
   106b0:	f7ff fdc4 	bl	1023c <secure_client_socket>
   106b4:	e7f7      	b.n	106a6 <tls_interface_connect+0x3a>
   106b6:	2009      	movs	r0, #9
   106b8:	f7fe fa1a 	bl	eaf0 <bsd_os_errno_set>
   106bc:	f04f 30ff 	mov.w	r0, #4294967295
   106c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   106c2:	202d      	movs	r0, #45	; 0x2d
   106c4:	e7f8      	b.n	106b8 <tls_interface_connect+0x4c>
   106c6:	bf00      	nop
   106c8:	2002025c 	.word	0x2002025c

000106cc <tls_interface_listen>:
   106cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   106d0:	b083      	sub	sp, #12
   106d2:	9101      	str	r1, [sp, #4]
   106d4:	4605      	mov	r5, r0
   106d6:	f004 fe5b 	bl	15390 <interface_socket_from_handle_get>
   106da:	2800      	cmp	r0, #0
   106dc:	d079      	beq.n	107d2 <tls_interface_listen+0x106>
   106de:	6903      	ldr	r3, [r0, #16]
   106e0:	4604      	mov	r4, r0
   106e2:	2b01      	cmp	r3, #1
   106e4:	d173      	bne.n	107ce <tls_interface_listen+0x102>
   106e6:	6803      	ldr	r3, [r0, #0]
   106e8:	b29b      	uxth	r3, r3
   106ea:	2b04      	cmp	r3, #4
   106ec:	d05f      	beq.n	107ae <tls_interface_listen+0xe2>
   106ee:	6823      	ldr	r3, [r4, #0]
   106f0:	b29b      	uxth	r3, r3
   106f2:	2b0b      	cmp	r3, #11
   106f4:	d16b      	bne.n	107ce <tls_interface_listen+0x102>
   106f6:	00ee      	lsls	r6, r5, #3
   106f8:	4f37      	ldr	r7, [pc, #220]	; (107d8 <tls_interface_listen+0x10c>)
   106fa:	1973      	adds	r3, r6, r5
   106fc:	f817 3023 	ldrb.w	r3, [r7, r3, lsl #2]
   10700:	2b01      	cmp	r3, #1
   10702:	d164      	bne.n	107ce <tls_interface_listen+0x102>
   10704:	2201      	movs	r2, #1
   10706:	f8df 90d4 	ldr.w	r9, [pc, #212]	; 107dc <tls_interface_listen+0x110>
   1070a:	1973      	adds	r3, r6, r5
   1070c:	00ee      	lsls	r6, r5, #3
   1070e:	f807 2023 	strb.w	r2, [r7, r3, lsl #2]
   10712:	eb09 0806 	add.w	r8, r9, r6
   10716:	69a1      	ldr	r1, [r4, #24]
   10718:	f8d8 3004 	ldr.w	r3, [r8, #4]
   1071c:	f247 0281 	movw	r2, #28801	; 0x7081
   10720:	4628      	mov	r0, r5
   10722:	f8d4 a000 	ldr.w	sl, [r4]
   10726:	f003 f973 	bl	13a10 <ip_interface_request_create>
   1072a:	4683      	mov	fp, r0
   1072c:	2800      	cmp	r0, #0
   1072e:	d04c      	beq.n	107ca <tls_interface_listen+0xfe>
   10730:	f8d8 2004 	ldr.w	r2, [r8, #4]
   10734:	2a00      	cmp	r2, #0
   10736:	d142      	bne.n	107be <tls_interface_listen+0xf2>
   10738:	1971      	adds	r1, r6, r5
   1073a:	eb07 0181 	add.w	r1, r7, r1, lsl #2
   1073e:	2224      	movs	r2, #36	; 0x24
   10740:	f10b 0014 	add.w	r0, fp, #20
   10744:	f009 f8b4 	bl	198b0 <memcpy>
   10748:	f8db 2008 	ldr.w	r2, [fp, #8]
   1074c:	4659      	mov	r1, fp
   1074e:	3224      	adds	r2, #36	; 0x24
   10750:	f8cb 2008 	str.w	r2, [fp, #8]
   10754:	6822      	ldr	r2, [r4, #0]
   10756:	4653      	mov	r3, sl
   10758:	0c12      	lsrs	r2, r2, #16
   1075a:	0412      	lsls	r2, r2, #16
   1075c:	f042 020a 	orr.w	r2, r2, #10
   10760:	6022      	str	r2, [r4, #0]
   10762:	4620      	mov	r0, r4
   10764:	f247 0281 	movw	r2, #28801	; 0x7081
   10768:	f003 f972 	bl	13a50 <ip_interface_request_send>
   1076c:	b968      	cbnz	r0, 1078a <tls_interface_listen+0xbe>
   1076e:	6823      	ldr	r3, [r4, #0]
   10770:	00db      	lsls	r3, r3, #3
   10772:	d40f      	bmi.n	10794 <tls_interface_listen+0xc8>
   10774:	f04f 33ff 	mov.w	r3, #4294967295
   10778:	f64f 72ff 	movw	r2, #65535	; 0xffff
   1077c:	210b      	movs	r1, #11
   1077e:	4628      	mov	r0, r5
   10780:	f003 f97a 	bl	13a78 <ip_interface_wait>
   10784:	b170      	cbz	r0, 107a4 <tls_interface_listen+0xd8>
   10786:	f8c4 a000 	str.w	sl, [r4]
   1078a:	2800      	cmp	r0, #0
   1078c:	dc03      	bgt.n	10796 <tls_interface_listen+0xca>
   1078e:	b003      	add	sp, #12
   10790:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   10794:	2073      	movs	r0, #115	; 0x73
   10796:	f7fe f9ab 	bl	eaf0 <bsd_os_errno_set>
   1079a:	f04f 30ff 	mov.w	r0, #4294967295
   1079e:	b003      	add	sp, #12
   107a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   107a4:	9901      	ldr	r1, [sp, #4]
   107a6:	4628      	mov	r0, r5
   107a8:	f003 feba 	bl	14520 <ip_interface_listen>
   107ac:	e7ed      	b.n	1078a <tls_interface_listen+0xbe>
   107ae:	00ee      	lsls	r6, r5, #3
   107b0:	4f09      	ldr	r7, [pc, #36]	; (107d8 <tls_interface_listen+0x10c>)
   107b2:	1973      	adds	r3, r6, r5
   107b4:	f817 3023 	ldrb.w	r3, [r7, r3, lsl #2]
   107b8:	2b02      	cmp	r3, #2
   107ba:	d198      	bne.n	106ee <tls_interface_listen+0x22>
   107bc:	e7a2      	b.n	10704 <tls_interface_listen+0x38>
   107be:	f859 1035 	ldr.w	r1, [r9, r5, lsl #3]
   107c2:	6800      	ldr	r0, [r0, #0]
   107c4:	f009 f874 	bl	198b0 <memcpy>
   107c8:	e7b6      	b.n	10738 <tls_interface_listen+0x6c>
   107ca:	200c      	movs	r0, #12
   107cc:	e7e3      	b.n	10796 <tls_interface_listen+0xca>
   107ce:	202d      	movs	r0, #45	; 0x2d
   107d0:	e7e1      	b.n	10796 <tls_interface_listen+0xca>
   107d2:	2009      	movs	r0, #9
   107d4:	e7df      	b.n	10796 <tls_interface_listen+0xca>
   107d6:	bf00      	nop
   107d8:	2002025c 	.word	0x2002025c
   107dc:	200203a0 	.word	0x200203a0

000107e0 <tls_interface_accept>:
   107e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   107e2:	460c      	mov	r4, r1
   107e4:	4616      	mov	r6, r2
   107e6:	461f      	mov	r7, r3
   107e8:	4605      	mov	r5, r0
   107ea:	f004 fdd1 	bl	15390 <interface_socket_from_handle_get>
   107ee:	2800      	cmp	r0, #0
   107f0:	d03b      	beq.n	1086a <tls_interface_accept+0x8a>
   107f2:	6800      	ldr	r0, [r0, #0]
   107f4:	b280      	uxth	r0, r0
   107f6:	2806      	cmp	r0, #6
   107f8:	d137      	bne.n	1086a <tls_interface_accept+0x8a>
   107fa:	4621      	mov	r1, r4
   107fc:	463b      	mov	r3, r7
   107fe:	4632      	mov	r2, r6
   10800:	4628      	mov	r0, r5
   10802:	f003 ff03 	bl	1460c <ip_interface_accept>
   10806:	4604      	mov	r4, r0
   10808:	b118      	cbz	r0, 10812 <tls_interface_accept+0x32>
   1080a:	2c00      	cmp	r4, #0
   1080c:	dc2e      	bgt.n	1086c <tls_interface_accept+0x8c>
   1080e:	4620      	mov	r0, r4
   10810:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   10812:	4628      	mov	r0, r5
   10814:	f004 fdbc 	bl	15390 <interface_socket_from_handle_get>
   10818:	6803      	ldr	r3, [r0, #0]
   1081a:	4f18      	ldr	r7, [pc, #96]	; (1087c <tls_interface_accept+0x9c>)
   1081c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
   10820:	6003      	str	r3, [r0, #0]
   10822:	6803      	ldr	r3, [r0, #0]
   10824:	eb05 05c5 	add.w	r5, r5, r5, lsl #3
   10828:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
   1082c:	4606      	mov	r6, r0
   1082e:	6003      	str	r3, [r0, #0]
   10830:	eb07 0185 	add.w	r1, r7, r5, lsl #2
   10834:	2224      	movs	r2, #36	; 0x24
   10836:	4638      	mov	r0, r7
   10838:	f009 f83a 	bl	198b0 <memcpy>
   1083c:	2302      	movs	r3, #2
   1083e:	703b      	strb	r3, [r7, #0]
   10840:	6833      	ldr	r3, [r6, #0]
   10842:	4620      	mov	r0, r4
   10844:	0c1b      	lsrs	r3, r3, #16
   10846:	041b      	lsls	r3, r3, #16
   10848:	f043 030b 	orr.w	r3, r3, #11
   1084c:	6033      	str	r3, [r6, #0]
   1084e:	f64f 72ff 	movw	r2, #65535	; 0xffff
   10852:	f04f 33ff 	mov.w	r3, #4294967295
   10856:	210c      	movs	r1, #12
   10858:	f003 f90e 	bl	13a78 <ip_interface_wait>
   1085c:	4604      	mov	r4, r0
   1085e:	2800      	cmp	r0, #0
   10860:	d0d5      	beq.n	1080e <tls_interface_accept+0x2e>
   10862:	2000      	movs	r0, #0
   10864:	f003 f9e6 	bl	13c34 <ip_interface_close>
   10868:	e7cf      	b.n	1080a <tls_interface_accept+0x2a>
   1086a:	2409      	movs	r4, #9
   1086c:	4620      	mov	r0, r4
   1086e:	f04f 34ff 	mov.w	r4, #4294967295
   10872:	f7fe f93d 	bl	eaf0 <bsd_os_errno_set>
   10876:	4620      	mov	r0, r4
   10878:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1087a:	bf00      	nop
   1087c:	2002025c 	.word	0x2002025c

00010880 <tls_interface_setopt>:
   10880:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   10884:	f5b1 7f8d 	cmp.w	r1, #282	; 0x11a
   10888:	9e06      	ldr	r6, [sp, #24]
   1088a:	d11e      	bne.n	108ca <tls_interface_setopt+0x4a>
   1088c:	461f      	mov	r7, r3
   1088e:	4605      	mov	r5, r0
   10890:	2b00      	cmp	r3, #0
   10892:	f000 808c 	beq.w	109ae <tls_interface_setopt+0x12e>
   10896:	4690      	mov	r8, r2
   10898:	f004 fd7a 	bl	15390 <interface_socket_from_handle_get>
   1089c:	2800      	cmp	r0, #0
   1089e:	d07b      	beq.n	10998 <tls_interface_setopt+0x118>
   108a0:	6804      	ldr	r4, [r0, #0]
   108a2:	b2a4      	uxth	r4, r4
   108a4:	2c02      	cmp	r4, #2
   108a6:	d007      	beq.n	108b8 <tls_interface_setopt+0x38>
   108a8:	6803      	ldr	r3, [r0, #0]
   108aa:	b29b      	uxth	r3, r3
   108ac:	2b04      	cmp	r3, #4
   108ae:	d003      	beq.n	108b8 <tls_interface_setopt+0x38>
   108b0:	6803      	ldr	r3, [r0, #0]
   108b2:	b29b      	uxth	r3, r3
   108b4:	2b05      	cmp	r3, #5
   108b6:	d16f      	bne.n	10998 <tls_interface_setopt+0x118>
   108b8:	f108 32ff 	add.w	r2, r8, #4294967295
   108bc:	2a04      	cmp	r2, #4
   108be:	d87c      	bhi.n	109ba <tls_interface_setopt+0x13a>
   108c0:	e8df f002 	tbb	[pc, r2]
   108c4:	41324e24 	.word	0x41324e24
   108c8:	07          	.byte	0x07
   108c9:	00          	.byte	0x00
   108ca:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   108ce:	f003 bfd5 	b.w	1487c <ip_interface_setopt>
   108d2:	4c3b      	ldr	r4, [pc, #236]	; (109c0 <tls_interface_setopt+0x140>)
   108d4:	f854 0035 	ldr.w	r0, [r4, r5, lsl #3]
   108d8:	b138      	cbz	r0, 108ea <tls_interface_setopt+0x6a>
   108da:	f7ff fc47 	bl	1016c <nrf_free>
   108de:	2200      	movs	r2, #0
   108e0:	eb04 03c5 	add.w	r3, r4, r5, lsl #3
   108e4:	f844 2035 	str.w	r2, [r4, r5, lsl #3]
   108e8:	605a      	str	r2, [r3, #4]
   108ea:	4630      	mov	r0, r6
   108ec:	b34e      	cbz	r6, 10942 <tls_interface_setopt+0xc2>
   108ee:	f7ff fc33 	bl	10158 <nrf_malloc>
   108f2:	f844 0035 	str.w	r0, [r4, r5, lsl #3]
   108f6:	2800      	cmp	r0, #0
   108f8:	d057      	beq.n	109aa <tls_interface_setopt+0x12a>
   108fa:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
   108fe:	4632      	mov	r2, r6
   10900:	4639      	mov	r1, r7
   10902:	6066      	str	r6, [r4, #4]
   10904:	f008 ffd4 	bl	198b0 <memcpy>
   10908:	2000      	movs	r0, #0
   1090a:	e01a      	b.n	10942 <tls_interface_setopt+0xc2>
   1090c:	2e04      	cmp	r6, #4
   1090e:	d14a      	bne.n	109a6 <tls_interface_setopt+0x126>
   10910:	6838      	ldr	r0, [r7, #0]
   10912:	2800      	cmp	r0, #0
   10914:	d039      	beq.n	1098a <tls_interface_setopt+0x10a>
   10916:	2801      	cmp	r0, #1
   10918:	d145      	bne.n	109a6 <tls_interface_setopt+0x126>
   1091a:	4a2a      	ldr	r2, [pc, #168]	; (109c4 <tls_interface_setopt+0x144>)
   1091c:	eb05 04c5 	add.w	r4, r5, r5, lsl #3
   10920:	f802 0024 	strb.w	r0, [r2, r4, lsl #2]
   10924:	2000      	movs	r0, #0
   10926:	e00c      	b.n	10942 <tls_interface_setopt+0xc2>
   10928:	2e01      	cmp	r6, #1
   1092a:	d13c      	bne.n	109a6 <tls_interface_setopt+0x126>
   1092c:	783a      	ldrb	r2, [r7, #0]
   1092e:	2000      	movs	r0, #0
   10930:	3200      	adds	r2, #0
   10932:	bf18      	it	ne
   10934:	2201      	movne	r2, #1
   10936:	4b23      	ldr	r3, [pc, #140]	; (109c4 <tls_interface_setopt+0x144>)
   10938:	eb05 04c5 	add.w	r4, r5, r5, lsl #3
   1093c:	eb03 0484 	add.w	r4, r3, r4, lsl #2
   10940:	7062      	strb	r2, [r4, #1]
   10942:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   10946:	2e04      	cmp	r6, #4
   10948:	d12d      	bne.n	109a6 <tls_interface_setopt+0x126>
   1094a:	683a      	ldr	r2, [r7, #0]
   1094c:	2a02      	cmp	r2, #2
   1094e:	d82a      	bhi.n	109a6 <tls_interface_setopt+0x126>
   10950:	4b1c      	ldr	r3, [pc, #112]	; (109c4 <tls_interface_setopt+0x144>)
   10952:	eb05 04c5 	add.w	r4, r5, r5, lsl #3
   10956:	eb03 0484 	add.w	r4, r3, r4, lsl #2
   1095a:	70a2      	strb	r2, [r4, #2]
   1095c:	2000      	movs	r0, #0
   1095e:	e7f0      	b.n	10942 <tls_interface_setopt+0xc2>
   10960:	ea5f 0c96 	movs.w	ip, r6, lsr #2
   10964:	d01f      	beq.n	109a6 <tls_interface_setopt+0x126>
   10966:	f016 0403 	ands.w	r4, r6, #3
   1096a:	d11c      	bne.n	109a6 <tls_interface_setopt+0x126>
   1096c:	eb05 05c5 	add.w	r5, r5, r5, lsl #3
   10970:	00ad      	lsls	r5, r5, #2
   10972:	4b14      	ldr	r3, [pc, #80]	; (109c4 <tls_interface_setopt+0x144>)
   10974:	1d28      	adds	r0, r5, #4
   10976:	4418      	add	r0, r3
   10978:	442b      	add	r3, r5
   1097a:	4632      	mov	r2, r6
   1097c:	4639      	mov	r1, r7
   1097e:	f883 c003 	strb.w	ip, [r3, #3]
   10982:	f008 ff95 	bl	198b0 <memcpy>
   10986:	4620      	mov	r0, r4
   10988:	e7db      	b.n	10942 <tls_interface_setopt+0xc2>
   1098a:	2102      	movs	r1, #2
   1098c:	4a0d      	ldr	r2, [pc, #52]	; (109c4 <tls_interface_setopt+0x144>)
   1098e:	eb05 04c5 	add.w	r4, r5, r5, lsl #3
   10992:	f802 1024 	strb.w	r1, [r2, r4, lsl #2]
   10996:	e7d4      	b.n	10942 <tls_interface_setopt+0xc2>
   10998:	2009      	movs	r0, #9
   1099a:	f7fe f8a9 	bl	eaf0 <bsd_os_errno_set>
   1099e:	f04f 30ff 	mov.w	r0, #4294967295
   109a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   109a6:	2016      	movs	r0, #22
   109a8:	e7f7      	b.n	1099a <tls_interface_setopt+0x11a>
   109aa:	200c      	movs	r0, #12
   109ac:	e7f5      	b.n	1099a <tls_interface_setopt+0x11a>
   109ae:	200e      	movs	r0, #14
   109b0:	f7fe f89e 	bl	eaf0 <bsd_os_errno_set>
   109b4:	f04f 30ff 	mov.w	r0, #4294967295
   109b8:	e7c3      	b.n	10942 <tls_interface_setopt+0xc2>
   109ba:	202a      	movs	r0, #42	; 0x2a
   109bc:	e7ed      	b.n	1099a <tls_interface_setopt+0x11a>
   109be:	bf00      	nop
   109c0:	200203a0 	.word	0x200203a0
   109c4:	2002025c 	.word	0x2002025c

000109c8 <tls_interface_getopt>:
   109c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   109cc:	f5b1 7f8d 	cmp.w	r1, #282	; 0x11a
   109d0:	9f06      	ldr	r7, [sp, #24]
   109d2:	d112      	bne.n	109fa <tls_interface_getopt+0x32>
   109d4:	461d      	mov	r5, r3
   109d6:	b16b      	cbz	r3, 109f4 <tls_interface_getopt+0x2c>
   109d8:	b167      	cbz	r7, 109f4 <tls_interface_getopt+0x2c>
   109da:	4606      	mov	r6, r0
   109dc:	4614      	mov	r4, r2
   109de:	f004 fcd7 	bl	15390 <interface_socket_from_handle_get>
   109e2:	2800      	cmp	r0, #0
   109e4:	d04f      	beq.n	10a86 <tls_interface_getopt+0xbe>
   109e6:	3c01      	subs	r4, #1
   109e8:	2c03      	cmp	r4, #3
   109ea:	d852      	bhi.n	10a92 <tls_interface_getopt+0xca>
   109ec:	e8df f004 	tbb	[pc, r4]
   109f0:	09152139 	.word	0x09152139
   109f4:	200e      	movs	r0, #14
   109f6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   109fa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   109fe:	f003 bff9 	b.w	149f4 <ip_interface_getopt>
   10a02:	683b      	ldr	r3, [r7, #0]
   10a04:	2b04      	cmp	r3, #4
   10a06:	d13c      	bne.n	10a82 <tls_interface_getopt+0xba>
   10a08:	4b23      	ldr	r3, [pc, #140]	; (10a98 <tls_interface_getopt+0xd0>)
   10a0a:	eb06 06c6 	add.w	r6, r6, r6, lsl #3
   10a0e:	eb03 0686 	add.w	r6, r3, r6, lsl #2
   10a12:	78b3      	ldrb	r3, [r6, #2]
   10a14:	2000      	movs	r0, #0
   10a16:	602b      	str	r3, [r5, #0]
   10a18:	e7ed      	b.n	109f6 <tls_interface_getopt+0x2e>
   10a1a:	683b      	ldr	r3, [r7, #0]
   10a1c:	2b01      	cmp	r3, #1
   10a1e:	d130      	bne.n	10a82 <tls_interface_getopt+0xba>
   10a20:	4b1d      	ldr	r3, [pc, #116]	; (10a98 <tls_interface_getopt+0xd0>)
   10a22:	eb06 06c6 	add.w	r6, r6, r6, lsl #3
   10a26:	eb03 0686 	add.w	r6, r3, r6, lsl #2
   10a2a:	7873      	ldrb	r3, [r6, #1]
   10a2c:	2000      	movs	r0, #0
   10a2e:	702b      	strb	r3, [r5, #0]
   10a30:	e7e1      	b.n	109f6 <tls_interface_getopt+0x2e>
   10a32:	eb06 06c6 	add.w	r6, r6, r6, lsl #3
   10a36:	4918      	ldr	r1, [pc, #96]	; (10a98 <tls_interface_getopt+0xd0>)
   10a38:	683b      	ldr	r3, [r7, #0]
   10a3a:	00b6      	lsls	r6, r6, #2
   10a3c:	198a      	adds	r2, r1, r6
   10a3e:	f013 0403 	ands.w	r4, r3, #3
   10a42:	78d0      	ldrb	r0, [r2, #3]
   10a44:	d121      	bne.n	10a8a <tls_interface_getopt+0xc2>
   10a46:	089b      	lsrs	r3, r3, #2
   10a48:	4283      	cmp	r3, r0
   10a4a:	bf28      	it	cs
   10a4c:	4603      	movcs	r3, r0
   10a4e:	009a      	lsls	r2, r3, #2
   10a50:	b1db      	cbz	r3, 10a8a <tls_interface_getopt+0xc2>
   10a52:	3604      	adds	r6, #4
   10a54:	4431      	add	r1, r6
   10a56:	603a      	str	r2, [r7, #0]
   10a58:	4628      	mov	r0, r5
   10a5a:	f008 ff29 	bl	198b0 <memcpy>
   10a5e:	4620      	mov	r0, r4
   10a60:	e7c9      	b.n	109f6 <tls_interface_getopt+0x2e>
   10a62:	683b      	ldr	r3, [r7, #0]
   10a64:	2b04      	cmp	r3, #4
   10a66:	d10c      	bne.n	10a82 <tls_interface_getopt+0xba>
   10a68:	4b0b      	ldr	r3, [pc, #44]	; (10a98 <tls_interface_getopt+0xd0>)
   10a6a:	eb06 06c6 	add.w	r6, r6, r6, lsl #3
   10a6e:	f813 3026 	ldrb.w	r3, [r3, r6, lsl #2]
   10a72:	2000      	movs	r0, #0
   10a74:	f1a3 0301 	sub.w	r3, r3, #1
   10a78:	fab3 f383 	clz	r3, r3
   10a7c:	095b      	lsrs	r3, r3, #5
   10a7e:	602b      	str	r3, [r5, #0]
   10a80:	e7b9      	b.n	109f6 <tls_interface_getopt+0x2e>
   10a82:	2016      	movs	r0, #22
   10a84:	e7b7      	b.n	109f6 <tls_interface_getopt+0x2e>
   10a86:	2009      	movs	r0, #9
   10a88:	e7b5      	b.n	109f6 <tls_interface_getopt+0x2e>
   10a8a:	2800      	cmp	r0, #0
   10a8c:	d1f9      	bne.n	10a82 <tls_interface_getopt+0xba>
   10a8e:	6038      	str	r0, [r7, #0]
   10a90:	e7b1      	b.n	109f6 <tls_interface_getopt+0x2e>
   10a92:	202a      	movs	r0, #42	; 0x2a
   10a94:	e7af      	b.n	109f6 <tls_interface_getopt+0x2e>
   10a96:	bf00      	nop
   10a98:	2002025c 	.word	0x2002025c

00010a9c <tls_rpc_ip_event_handler>:
   10a9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   10a9e:	f248 0581 	movw	r5, #32897	; 0x8081
   10aa2:	42ab      	cmp	r3, r5
   10aa4:	460c      	mov	r4, r1
   10aa6:	d062      	beq.n	10b6e <tls_rpc_ip_event_handler+0xd2>
   10aa8:	f249 0182 	movw	r1, #36994	; 0x9082
   10aac:	428b      	cmp	r3, r1
   10aae:	4606      	mov	r6, r0
   10ab0:	d02e      	beq.n	10b10 <tls_rpc_ip_event_handler+0x74>
   10ab2:	f248 0102 	movw	r1, #32770	; 0x8002
   10ab6:	428b      	cmp	r3, r1
   10ab8:	d001      	beq.n	10abe <tls_rpc_ip_event_handler+0x22>
   10aba:	2001      	movs	r0, #1
   10abc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   10abe:	2c00      	cmp	r4, #0
   10ac0:	d0fb      	beq.n	10aba <tls_rpc_ip_event_handler+0x1e>
   10ac2:	6963      	ldr	r3, [r4, #20]
   10ac4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
   10ac8:	d002      	beq.n	10ad0 <tls_rpc_ip_event_handler+0x34>
   10aca:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
   10ace:	d1f4      	bne.n	10aba <tls_rpc_ip_event_handler+0x1e>
   10ad0:	6823      	ldr	r3, [r4, #0]
   10ad2:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
   10ad6:	6023      	str	r3, [r4, #0]
   10ad8:	6955      	ldr	r5, [r2, #20]
   10ada:	2d00      	cmp	r5, #0
   10adc:	d156      	bne.n	10b8c <tls_rpc_ip_event_handler+0xf0>
   10ade:	6823      	ldr	r3, [r4, #0]
   10ae0:	0c1b      	lsrs	r3, r3, #16
   10ae2:	041b      	lsls	r3, r3, #16
   10ae4:	f043 0305 	orr.w	r3, r3, #5
   10ae8:	6023      	str	r3, [r4, #0]
   10aea:	6823      	ldr	r3, [r4, #0]
   10aec:	00da      	lsls	r2, r3, #3
   10aee:	d50d      	bpl.n	10b0c <tls_rpc_ip_event_handler+0x70>
   10af0:	4b2b      	ldr	r3, [pc, #172]	; (10ba0 <tls_rpc_ip_event_handler+0x104>)
   10af2:	eb06 02c6 	add.w	r2, r6, r6, lsl #3
   10af6:	f813 3022 	ldrb.w	r3, [r3, r2, lsl #2]
   10afa:	2b02      	cmp	r3, #2
   10afc:	d106      	bne.n	10b0c <tls_rpc_ip_event_handler+0x70>
   10afe:	4630      	mov	r0, r6
   10b00:	4621      	mov	r1, r4
   10b02:	f7ff fb9b 	bl	1023c <secure_client_socket>
   10b06:	b108      	cbz	r0, 10b0c <tls_rpc_ip_event_handler+0x70>
   10b08:	2873      	cmp	r0, #115	; 0x73
   10b0a:	d142      	bne.n	10b92 <tls_rpc_ip_event_handler+0xf6>
   10b0c:	2000      	movs	r0, #0
   10b0e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   10b10:	2c00      	cmp	r4, #0
   10b12:	d0fb      	beq.n	10b0c <tls_rpc_ip_event_handler+0x70>
   10b14:	6823      	ldr	r3, [r4, #0]
   10b16:	b29b      	uxth	r3, r3
   10b18:	2b0b      	cmp	r3, #11
   10b1a:	d1f7      	bne.n	10b0c <tls_rpc_ip_event_handler+0x70>
   10b1c:	6915      	ldr	r5, [r2, #16]
   10b1e:	2d00      	cmp	r5, #0
   10b20:	d134      	bne.n	10b8c <tls_rpc_ip_event_handler+0xf0>
   10b22:	6823      	ldr	r3, [r4, #0]
   10b24:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
   10b28:	6023      	str	r3, [r4, #0]
   10b2a:	6823      	ldr	r3, [r4, #0]
   10b2c:	00db      	lsls	r3, r3, #3
   10b2e:	d5ed      	bpl.n	10b0c <tls_rpc_ip_event_handler+0x70>
   10b30:	4f1c      	ldr	r7, [pc, #112]	; (10ba4 <tls_rpc_ip_event_handler+0x108>)
   10b32:	f857 0030 	ldr.w	r0, [r7, r0, lsl #3]
   10b36:	b130      	cbz	r0, 10b46 <tls_rpc_ip_event_handler+0xaa>
   10b38:	f7ff fb18 	bl	1016c <nrf_free>
   10b3c:	eb07 03c6 	add.w	r3, r7, r6, lsl #3
   10b40:	f847 5036 	str.w	r5, [r7, r6, lsl #3]
   10b44:	605d      	str	r5, [r3, #4]
   10b46:	6823      	ldr	r3, [r4, #0]
   10b48:	2000      	movs	r0, #0
   10b4a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
   10b4e:	6023      	str	r3, [r4, #0]
   10b50:	6823      	ldr	r3, [r4, #0]
   10b52:	0c1b      	lsrs	r3, r3, #16
   10b54:	041b      	lsls	r3, r3, #16
   10b56:	f043 030c 	orr.w	r3, r3, #12
   10b5a:	6023      	str	r3, [r4, #0]
   10b5c:	6823      	ldr	r3, [r4, #0]
   10b5e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   10b62:	6023      	str	r3, [r4, #0]
   10b64:	6823      	ldr	r3, [r4, #0]
   10b66:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   10b6a:	6023      	str	r3, [r4, #0]
   10b6c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   10b6e:	2900      	cmp	r1, #0
   10b70:	d0cc      	beq.n	10b0c <tls_rpc_ip_event_handler+0x70>
   10b72:	680b      	ldr	r3, [r1, #0]
   10b74:	b29b      	uxth	r3, r3
   10b76:	2b0a      	cmp	r3, #10
   10b78:	d1c8      	bne.n	10b0c <tls_rpc_ip_event_handler+0x70>
   10b7a:	6950      	ldr	r0, [r2, #20]
   10b7c:	b938      	cbnz	r0, 10b8e <tls_rpc_ip_event_handler+0xf2>
   10b7e:	680b      	ldr	r3, [r1, #0]
   10b80:	0c1b      	lsrs	r3, r3, #16
   10b82:	041b      	lsls	r3, r3, #16
   10b84:	f043 030b 	orr.w	r3, r3, #11
   10b88:	600b      	str	r3, [r1, #0]
   10b8a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   10b8c:	4628      	mov	r0, r5
   10b8e:	f002 ff35 	bl	139fc <rpc_error_to_nrf_bsd_error>
   10b92:	6060      	str	r0, [r4, #4]
   10b94:	6823      	ldr	r3, [r4, #0]
   10b96:	2000      	movs	r0, #0
   10b98:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
   10b9c:	6023      	str	r3, [r4, #0]
   10b9e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   10ba0:	2002025c 	.word	0x2002025c
   10ba4:	200203a0 	.word	0x200203a0

00010ba8 <rpc_dfu_event_handler>:
   10ba8:	b508      	push	{r3, lr}
   10baa:	4a08      	ldr	r2, [pc, #32]	; (10bcc <rpc_dfu_event_handler+0x24>)
   10bac:	68c1      	ldr	r1, [r0, #12]
   10bae:	8812      	ldrh	r2, [r2, #0]
   10bb0:	4603      	mov	r3, r0
   10bb2:	ebb2 4f11 	cmp.w	r2, r1, lsr #16
   10bb6:	d005      	beq.n	10bc4 <rpc_dfu_event_handler+0x1c>
   10bb8:	6800      	ldr	r0, [r0, #0]
   10bba:	b110      	cbz	r0, 10bc2 <rpc_dfu_event_handler+0x1a>
   10bbc:	f7fe ff06 	bl	f9cc <rpc_dfu_client_data_free>
   10bc0:	2000      	movs	r0, #0
   10bc2:	bd08      	pop	{r3, pc}
   10bc4:	4a02      	ldr	r2, [pc, #8]	; (10bd0 <rpc_dfu_event_handler+0x28>)
   10bc6:	2001      	movs	r0, #1
   10bc8:	6013      	str	r3, [r2, #0]
   10bca:	bd08      	pop	{r3, pc}
   10bcc:	200249c0 	.word	0x200249c0
   10bd0:	200203ec 	.word	0x200203ec

00010bd4 <mfu_interface_init>:
   10bd4:	2300      	movs	r3, #0
   10bd6:	b510      	push	{r4, lr}
   10bd8:	4808      	ldr	r0, [pc, #32]	; (10bfc <mfu_interface_init+0x28>)
   10bda:	4909      	ldr	r1, [pc, #36]	; (10c00 <mfu_interface_init+0x2c>)
   10bdc:	4a09      	ldr	r2, [pc, #36]	; (10c04 <mfu_interface_init+0x30>)
   10bde:	4c0a      	ldr	r4, [pc, #40]	; (10c08 <mfu_interface_init+0x34>)
   10be0:	8003      	strh	r3, [r0, #0]
   10be2:	600b      	str	r3, [r1, #0]
   10be4:	6013      	str	r3, [r2, #0]
   10be6:	6023      	str	r3, [r4, #0]
   10be8:	f7fe feba 	bl	f960 <rpc_dfu_client_init>
   10bec:	b910      	cbnz	r0, 10bf4 <mfu_interface_init+0x20>
   10bee:	2301      	movs	r3, #1
   10bf0:	6023      	str	r3, [r4, #0]
   10bf2:	bd10      	pop	{r4, pc}
   10bf4:	f04f 30ff 	mov.w	r0, #4294967295
   10bf8:	bd10      	pop	{r4, pc}
   10bfa:	bf00      	nop
   10bfc:	200249c0 	.word	0x200249c0
   10c00:	200203ec 	.word	0x200203ec
   10c04:	200203e8 	.word	0x200203e8
   10c08:	200203e0 	.word	0x200203e0

00010c0c <mfu_interface_open>:
   10c0c:	b508      	push	{r3, lr}
   10c0e:	4b07      	ldr	r3, [pc, #28]	; (10c2c <mfu_interface_open+0x20>)
   10c10:	681a      	ldr	r2, [r3, #0]
   10c12:	2a01      	cmp	r2, #1
   10c14:	d103      	bne.n	10c1e <mfu_interface_open+0x12>
   10c16:	2202      	movs	r2, #2
   10c18:	601a      	str	r2, [r3, #0]
   10c1a:	4805      	ldr	r0, [pc, #20]	; (10c30 <mfu_interface_open+0x24>)
   10c1c:	bd08      	pop	{r3, pc}
   10c1e:	2001      	movs	r0, #1
   10c20:	f7fd ff66 	bl	eaf0 <bsd_os_errno_set>
   10c24:	f04f 30ff 	mov.w	r0, #4294967295
   10c28:	bd08      	pop	{r3, pc}
   10c2a:	bf00      	nop
   10c2c:	200203e0 	.word	0x200203e0
   10c30:	49765432 	.word	0x49765432

00010c34 <mfu_interface_close>:
   10c34:	b5f0      	push	{r4, r5, r6, r7, lr}
   10c36:	4c32      	ldr	r4, [pc, #200]	; (10d00 <mfu_interface_close+0xcc>)
   10c38:	b083      	sub	sp, #12
   10c3a:	6823      	ldr	r3, [r4, #0]
   10c3c:	1e9a      	subs	r2, r3, #2
   10c3e:	2a01      	cmp	r2, #1
   10c40:	d857      	bhi.n	10cf2 <mfu_interface_close+0xbe>
   10c42:	2b03      	cmp	r3, #3
   10c44:	d004      	beq.n	10c50 <mfu_interface_close+0x1c>
   10c46:	2301      	movs	r3, #1
   10c48:	2000      	movs	r0, #0
   10c4a:	6023      	str	r3, [r4, #0]
   10c4c:	b003      	add	sp, #12
   10c4e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   10c50:	2100      	movs	r1, #0
   10c52:	4668      	mov	r0, sp
   10c54:	f7fe fe8a 	bl	f96c <rpc_dfu_client_request_alloc>
   10c58:	4603      	mov	r3, r0
   10c5a:	2800      	cmp	r0, #0
   10c5c:	d13d      	bne.n	10cda <mfu_interface_close+0xa6>
   10c5e:	2104      	movs	r1, #4
   10c60:	4e28      	ldr	r6, [pc, #160]	; (10d04 <mfu_interface_close+0xd0>)
   10c62:	9800      	ldr	r0, [sp, #0]
   10c64:	8832      	ldrh	r2, [r6, #0]
   10c66:	7201      	strb	r1, [r0, #8]
   10c68:	3201      	adds	r2, #1
   10c6a:	b292      	uxth	r2, r2
   10c6c:	0411      	lsls	r1, r2, #16
   10c6e:	f041 0106 	orr.w	r1, r1, #6
   10c72:	4d25      	ldr	r5, [pc, #148]	; (10d08 <mfu_interface_close+0xd4>)
   10c74:	60c1      	str	r1, [r0, #12]
   10c76:	7103      	strb	r3, [r0, #4]
   10c78:	7143      	strb	r3, [r0, #5]
   10c7a:	7183      	strb	r3, [r0, #6]
   10c7c:	71c3      	strb	r3, [r0, #7]
   10c7e:	7243      	strb	r3, [r0, #9]
   10c80:	7283      	strb	r3, [r0, #10]
   10c82:	72c3      	strb	r3, [r0, #11]
   10c84:	2106      	movs	r1, #6
   10c86:	8032      	strh	r2, [r6, #0]
   10c88:	602b      	str	r3, [r5, #0]
   10c8a:	f7fe fe83 	bl	f994 <rpc_dfu_client_request_send>
   10c8e:	b9d8      	cbnz	r0, 10cc8 <mfu_interface_close+0x94>
   10c90:	f04f 33ff 	mov.w	r3, #4294967295
   10c94:	ae02      	add	r6, sp, #8
   10c96:	4627      	mov	r7, r4
   10c98:	f846 3d04 	str.w	r3, [r6, #-4]!
   10c9c:	e004      	b.n	10ca8 <mfu_interface_close+0x74>
   10c9e:	4631      	mov	r1, r6
   10ca0:	4638      	mov	r0, r7
   10ca2:	f7fd fe91 	bl	e9c8 <bsd_os_timedwait>
   10ca6:	b9f0      	cbnz	r0, 10ce6 <mfu_interface_close+0xb2>
   10ca8:	6828      	ldr	r0, [r5, #0]
   10caa:	2800      	cmp	r0, #0
   10cac:	d0f7      	beq.n	10c9e <mfu_interface_close+0x6a>
   10cae:	6905      	ldr	r5, [r0, #16]
   10cb0:	f7fe fe84 	bl	f9bc <rpc_dfu_client_message_free>
   10cb4:	2d00      	cmp	r5, #0
   10cb6:	d0c6      	beq.n	10c46 <mfu_interface_close+0x12>
   10cb8:	4b14      	ldr	r3, [pc, #80]	; (10d0c <mfu_interface_close+0xd8>)
   10cba:	2008      	movs	r0, #8
   10cbc:	601d      	str	r5, [r3, #0]
   10cbe:	f7fd ff17 	bl	eaf0 <bsd_os_errno_set>
   10cc2:	f04f 30ff 	mov.w	r0, #4294967295
   10cc6:	e7c1      	b.n	10c4c <mfu_interface_close+0x18>
   10cc8:	9800      	ldr	r0, [sp, #0]
   10cca:	6803      	ldr	r3, [r0, #0]
   10ccc:	b11b      	cbz	r3, 10cd6 <mfu_interface_close+0xa2>
   10cce:	4618      	mov	r0, r3
   10cd0:	f7fe fe7c 	bl	f9cc <rpc_dfu_client_data_free>
   10cd4:	9800      	ldr	r0, [sp, #0]
   10cd6:	f7fe fe71 	bl	f9bc <rpc_dfu_client_message_free>
   10cda:	200c      	movs	r0, #12
   10cdc:	f7fd ff08 	bl	eaf0 <bsd_os_errno_set>
   10ce0:	f04f 30ff 	mov.w	r0, #4294967295
   10ce4:	e7b2      	b.n	10c4c <mfu_interface_close+0x18>
   10ce6:	203c      	movs	r0, #60	; 0x3c
   10ce8:	f7fd ff02 	bl	eaf0 <bsd_os_errno_set>
   10cec:	f04f 30ff 	mov.w	r0, #4294967295
   10cf0:	e7ac      	b.n	10c4c <mfu_interface_close+0x18>
   10cf2:	2001      	movs	r0, #1
   10cf4:	f7fd fefc 	bl	eaf0 <bsd_os_errno_set>
   10cf8:	f04f 30ff 	mov.w	r0, #4294967295
   10cfc:	e7a6      	b.n	10c4c <mfu_interface_close+0x18>
   10cfe:	bf00      	nop
   10d00:	200203e0 	.word	0x200203e0
   10d04:	200249c0 	.word	0x200249c0
   10d08:	200203ec 	.word	0x200203ec
   10d0c:	200203e4 	.word	0x200203e4

00010d10 <mfu_interface_sendto>:
   10d10:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   10d14:	4e64      	ldr	r6, [pc, #400]	; (10ea8 <mfu_interface_sendto+0x198>)
   10d16:	460f      	mov	r7, r1
   10d18:	6831      	ldr	r1, [r6, #0]
   10d1a:	4615      	mov	r5, r2
   10d1c:	1e8a      	subs	r2, r1, #2
   10d1e:	2a01      	cmp	r2, #1
   10d20:	b082      	sub	sp, #8
   10d22:	f200 80b4 	bhi.w	10e8e <mfu_interface_sendto+0x17e>
   10d26:	2f00      	cmp	r7, #0
   10d28:	f000 80a5 	beq.w	10e76 <mfu_interface_sendto+0x166>
   10d2c:	2d00      	cmp	r5, #0
   10d2e:	f000 80a2 	beq.w	10e76 <mfu_interface_sendto+0x166>
   10d32:	2b00      	cmp	r3, #0
   10d34:	f040 80b1 	bne.w	10e9a <mfu_interface_sendto+0x18a>
   10d38:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   10d3a:	2b00      	cmp	r3, #0
   10d3c:	f040 80a1 	bne.w	10e82 <mfu_interface_sendto+0x172>
   10d40:	2902      	cmp	r1, #2
   10d42:	d04f      	beq.n	10de4 <mfu_interface_sendto+0xd4>
   10d44:	46e8      	mov	r8, sp
   10d46:	4640      	mov	r0, r8
   10d48:	4629      	mov	r1, r5
   10d4a:	f7fe fe0f 	bl	f96c <rpc_dfu_client_request_alloc>
   10d4e:	4606      	mov	r6, r0
   10d50:	b140      	cbz	r0, 10d64 <mfu_interface_sendto+0x54>
   10d52:	200c      	movs	r0, #12
   10d54:	f7fd fecc 	bl	eaf0 <bsd_os_errno_set>
   10d58:	f04f 35ff 	mov.w	r5, #4294967295
   10d5c:	4628      	mov	r0, r5
   10d5e:	b002      	add	sp, #8
   10d60:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   10d64:	9b00      	ldr	r3, [sp, #0]
   10d66:	4639      	mov	r1, r7
   10d68:	6818      	ldr	r0, [r3, #0]
   10d6a:	462a      	mov	r2, r5
   10d6c:	f008 fda0 	bl	198b0 <memcpy>
   10d70:	2104      	movs	r1, #4
   10d72:	4c4e      	ldr	r4, [pc, #312]	; (10eac <mfu_interface_sendto+0x19c>)
   10d74:	9800      	ldr	r0, [sp, #0]
   10d76:	8823      	ldrh	r3, [r4, #0]
   10d78:	6045      	str	r5, [r0, #4]
   10d7a:	3301      	adds	r3, #1
   10d7c:	b29b      	uxth	r3, r3
   10d7e:	041a      	lsls	r2, r3, #16
   10d80:	8023      	strh	r3, [r4, #0]
   10d82:	430a      	orrs	r2, r1
   10d84:	4c4a      	ldr	r4, [pc, #296]	; (10eb0 <mfu_interface_sendto+0x1a0>)
   10d86:	60c2      	str	r2, [r0, #12]
   10d88:	7246      	strb	r6, [r0, #9]
   10d8a:	7286      	strb	r6, [r0, #10]
   10d8c:	72c6      	strb	r6, [r0, #11]
   10d8e:	7201      	strb	r1, [r0, #8]
   10d90:	6026      	str	r6, [r4, #0]
   10d92:	f7fe fdff 	bl	f994 <rpc_dfu_client_request_send>
   10d96:	2800      	cmp	r0, #0
   10d98:	d163      	bne.n	10e62 <mfu_interface_sendto+0x152>
   10d9a:	f04f 33ff 	mov.w	r3, #4294967295
   10d9e:	ae02      	add	r6, sp, #8
   10da0:	4f41      	ldr	r7, [pc, #260]	; (10ea8 <mfu_interface_sendto+0x198>)
   10da2:	f846 3d04 	str.w	r3, [r6, #-4]!
   10da6:	e004      	b.n	10db2 <mfu_interface_sendto+0xa2>
   10da8:	4631      	mov	r1, r6
   10daa:	4638      	mov	r0, r7
   10dac:	f7fd fe0c 	bl	e9c8 <bsd_os_timedwait>
   10db0:	b978      	cbnz	r0, 10dd2 <mfu_interface_sendto+0xc2>
   10db2:	6820      	ldr	r0, [r4, #0]
   10db4:	2800      	cmp	r0, #0
   10db6:	d0f7      	beq.n	10da8 <mfu_interface_sendto+0x98>
   10db8:	6904      	ldr	r4, [r0, #16]
   10dba:	f7fe fdff 	bl	f9bc <rpc_dfu_client_message_free>
   10dbe:	2c00      	cmp	r4, #0
   10dc0:	d0cc      	beq.n	10d5c <mfu_interface_sendto+0x4c>
   10dc2:	4b3c      	ldr	r3, [pc, #240]	; (10eb4 <mfu_interface_sendto+0x1a4>)
   10dc4:	2008      	movs	r0, #8
   10dc6:	601c      	str	r4, [r3, #0]
   10dc8:	f04f 35ff 	mov.w	r5, #4294967295
   10dcc:	f7fd fe90 	bl	eaf0 <bsd_os_errno_set>
   10dd0:	e7c4      	b.n	10d5c <mfu_interface_sendto+0x4c>
   10dd2:	f04f 35ff 	mov.w	r5, #4294967295
   10dd6:	203c      	movs	r0, #60	; 0x3c
   10dd8:	f7fd fe8a 	bl	eaf0 <bsd_os_errno_set>
   10ddc:	4628      	mov	r0, r5
   10dde:	b002      	add	sp, #8
   10de0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   10de4:	46e8      	mov	r8, sp
   10de6:	4619      	mov	r1, r3
   10de8:	4640      	mov	r0, r8
   10dea:	f7fe fdbf 	bl	f96c <rpc_dfu_client_request_alloc>
   10dee:	4602      	mov	r2, r0
   10df0:	2800      	cmp	r0, #0
   10df2:	d1ae      	bne.n	10d52 <mfu_interface_sendto+0x42>
   10df4:	f04f 0c08 	mov.w	ip, #8
   10df8:	492c      	ldr	r1, [pc, #176]	; (10eac <mfu_interface_sendto+0x19c>)
   10dfa:	482f      	ldr	r0, [pc, #188]	; (10eb8 <mfu_interface_sendto+0x1a8>)
   10dfc:	880b      	ldrh	r3, [r1, #0]
   10dfe:	6804      	ldr	r4, [r0, #0]
   10e00:	3301      	adds	r3, #1
   10e02:	9800      	ldr	r0, [sp, #0]
   10e04:	b29b      	uxth	r3, r3
   10e06:	800b      	strh	r3, [r1, #0]
   10e08:	041b      	lsls	r3, r3, #16
   10e0a:	f043 0303 	orr.w	r3, r3, #3
   10e0e:	6104      	str	r4, [r0, #16]
   10e10:	4c27      	ldr	r4, [pc, #156]	; (10eb0 <mfu_interface_sendto+0x1a0>)
   10e12:	60c3      	str	r3, [r0, #12]
   10e14:	7102      	strb	r2, [r0, #4]
   10e16:	7142      	strb	r2, [r0, #5]
   10e18:	7182      	strb	r2, [r0, #6]
   10e1a:	71c2      	strb	r2, [r0, #7]
   10e1c:	7242      	strb	r2, [r0, #9]
   10e1e:	7282      	strb	r2, [r0, #10]
   10e20:	72c2      	strb	r2, [r0, #11]
   10e22:	f880 c008 	strb.w	ip, [r0, #8]
   10e26:	2103      	movs	r1, #3
   10e28:	6022      	str	r2, [r4, #0]
   10e2a:	f7fe fdb3 	bl	f994 <rpc_dfu_client_request_send>
   10e2e:	b9c0      	cbnz	r0, 10e62 <mfu_interface_sendto+0x152>
   10e30:	f04f 33ff 	mov.w	r3, #4294967295
   10e34:	f10d 0908 	add.w	r9, sp, #8
   10e38:	f849 3d04 	str.w	r3, [r9, #-4]!
   10e3c:	46b2      	mov	sl, r6
   10e3e:	e005      	b.n	10e4c <mfu_interface_sendto+0x13c>
   10e40:	4649      	mov	r1, r9
   10e42:	4650      	mov	r0, sl
   10e44:	f7fd fdc0 	bl	e9c8 <bsd_os_timedwait>
   10e48:	2800      	cmp	r0, #0
   10e4a:	d1c2      	bne.n	10dd2 <mfu_interface_sendto+0xc2>
   10e4c:	6820      	ldr	r0, [r4, #0]
   10e4e:	2800      	cmp	r0, #0
   10e50:	d0f6      	beq.n	10e40 <mfu_interface_sendto+0x130>
   10e52:	6904      	ldr	r4, [r0, #16]
   10e54:	f7fe fdb2 	bl	f9bc <rpc_dfu_client_message_free>
   10e58:	2c00      	cmp	r4, #0
   10e5a:	d1b2      	bne.n	10dc2 <mfu_interface_sendto+0xb2>
   10e5c:	2303      	movs	r3, #3
   10e5e:	6033      	str	r3, [r6, #0]
   10e60:	e771      	b.n	10d46 <mfu_interface_sendto+0x36>
   10e62:	9800      	ldr	r0, [sp, #0]
   10e64:	6803      	ldr	r3, [r0, #0]
   10e66:	b11b      	cbz	r3, 10e70 <mfu_interface_sendto+0x160>
   10e68:	4618      	mov	r0, r3
   10e6a:	f7fe fdaf 	bl	f9cc <rpc_dfu_client_data_free>
   10e6e:	9800      	ldr	r0, [sp, #0]
   10e70:	f7fe fda4 	bl	f9bc <rpc_dfu_client_message_free>
   10e74:	e76d      	b.n	10d52 <mfu_interface_sendto+0x42>
   10e76:	2016      	movs	r0, #22
   10e78:	f7fd fe3a 	bl	eaf0 <bsd_os_errno_set>
   10e7c:	f04f 35ff 	mov.w	r5, #4294967295
   10e80:	e76c      	b.n	10d5c <mfu_interface_sendto+0x4c>
   10e82:	2038      	movs	r0, #56	; 0x38
   10e84:	f7fd fe34 	bl	eaf0 <bsd_os_errno_set>
   10e88:	f04f 35ff 	mov.w	r5, #4294967295
   10e8c:	e766      	b.n	10d5c <mfu_interface_sendto+0x4c>
   10e8e:	2001      	movs	r0, #1
   10e90:	f7fd fe2e 	bl	eaf0 <bsd_os_errno_set>
   10e94:	f04f 35ff 	mov.w	r5, #4294967295
   10e98:	e760      	b.n	10d5c <mfu_interface_sendto+0x4c>
   10e9a:	202d      	movs	r0, #45	; 0x2d
   10e9c:	f7fd fe28 	bl	eaf0 <bsd_os_errno_set>
   10ea0:	f04f 35ff 	mov.w	r5, #4294967295
   10ea4:	e75a      	b.n	10d5c <mfu_interface_sendto+0x4c>
   10ea6:	bf00      	nop
   10ea8:	200203e0 	.word	0x200203e0
   10eac:	200249c0 	.word	0x200249c0
   10eb0:	200203ec 	.word	0x200203ec
   10eb4:	200203e4 	.word	0x200203e4
   10eb8:	200203e8 	.word	0x200203e8

00010ebc <mfu_interface_setopt>:
   10ebc:	b5f0      	push	{r4, r5, r6, r7, lr}
   10ebe:	4846      	ldr	r0, [pc, #280]	; (10fd8 <mfu_interface_setopt+0x11c>)
   10ec0:	b083      	sub	sp, #12
   10ec2:	6800      	ldr	r0, [r0, #0]
   10ec4:	3802      	subs	r0, #2
   10ec6:	2801      	cmp	r0, #1
   10ec8:	d877      	bhi.n	10fba <mfu_interface_setopt+0xfe>
   10eca:	f240 2003 	movw	r0, #515	; 0x203
   10ece:	4281      	cmp	r1, r0
   10ed0:	d16d      	bne.n	10fae <mfu_interface_setopt+0xf2>
   10ed2:	3a04      	subs	r2, #4
   10ed4:	2a03      	cmp	r2, #3
   10ed6:	d85c      	bhi.n	10f92 <mfu_interface_setopt+0xd6>
   10ed8:	e8df f002 	tbb	[pc, r2]
   10edc:	514e024b 	.word	0x514e024b
   10ee0:	2407      	movs	r4, #7
   10ee2:	4625      	mov	r5, r4
   10ee4:	2100      	movs	r1, #0
   10ee6:	4668      	mov	r0, sp
   10ee8:	f7fe fd40 	bl	f96c <rpc_dfu_client_request_alloc>
   10eec:	4603      	mov	r3, r0
   10eee:	2800      	cmp	r0, #0
   10ef0:	d138      	bne.n	10f64 <mfu_interface_setopt+0xa8>
   10ef2:	2704      	movs	r7, #4
   10ef4:	4e39      	ldr	r6, [pc, #228]	; (10fdc <mfu_interface_setopt+0x120>)
   10ef6:	9800      	ldr	r0, [sp, #0]
   10ef8:	8832      	ldrh	r2, [r6, #0]
   10efa:	4629      	mov	r1, r5
   10efc:	3201      	adds	r2, #1
   10efe:	b292      	uxth	r2, r2
   10f00:	ea44 4502 	orr.w	r5, r4, r2, lsl #16
   10f04:	4c36      	ldr	r4, [pc, #216]	; (10fe0 <mfu_interface_setopt+0x124>)
   10f06:	60c5      	str	r5, [r0, #12]
   10f08:	7103      	strb	r3, [r0, #4]
   10f0a:	7143      	strb	r3, [r0, #5]
   10f0c:	7183      	strb	r3, [r0, #6]
   10f0e:	71c3      	strb	r3, [r0, #7]
   10f10:	7243      	strb	r3, [r0, #9]
   10f12:	7283      	strb	r3, [r0, #10]
   10f14:	72c3      	strb	r3, [r0, #11]
   10f16:	7207      	strb	r7, [r0, #8]
   10f18:	8032      	strh	r2, [r6, #0]
   10f1a:	6023      	str	r3, [r4, #0]
   10f1c:	f7fe fd3a 	bl	f994 <rpc_dfu_client_request_send>
   10f20:	b9b8      	cbnz	r0, 10f52 <mfu_interface_setopt+0x96>
   10f22:	f04f 33ff 	mov.w	r3, #4294967295
   10f26:	ad02      	add	r5, sp, #8
   10f28:	4e2b      	ldr	r6, [pc, #172]	; (10fd8 <mfu_interface_setopt+0x11c>)
   10f2a:	f845 3d04 	str.w	r3, [r5, #-4]!
   10f2e:	e005      	b.n	10f3c <mfu_interface_setopt+0x80>
   10f30:	4629      	mov	r1, r5
   10f32:	4630      	mov	r0, r6
   10f34:	f7fd fd48 	bl	e9c8 <bsd_os_timedwait>
   10f38:	2800      	cmp	r0, #0
   10f3a:	d131      	bne.n	10fa0 <mfu_interface_setopt+0xe4>
   10f3c:	6820      	ldr	r0, [r4, #0]
   10f3e:	2800      	cmp	r0, #0
   10f40:	d0f6      	beq.n	10f30 <mfu_interface_setopt+0x74>
   10f42:	6904      	ldr	r4, [r0, #16]
   10f44:	f7fe fd3a 	bl	f9bc <rpc_dfu_client_message_free>
   10f48:	2c00      	cmp	r4, #0
   10f4a:	d13c      	bne.n	10fc6 <mfu_interface_setopt+0x10a>
   10f4c:	4620      	mov	r0, r4
   10f4e:	b003      	add	sp, #12
   10f50:	bdf0      	pop	{r4, r5, r6, r7, pc}
   10f52:	9800      	ldr	r0, [sp, #0]
   10f54:	6803      	ldr	r3, [r0, #0]
   10f56:	b11b      	cbz	r3, 10f60 <mfu_interface_setopt+0xa4>
   10f58:	4618      	mov	r0, r3
   10f5a:	f7fe fd37 	bl	f9cc <rpc_dfu_client_data_free>
   10f5e:	9800      	ldr	r0, [sp, #0]
   10f60:	f7fe fd2c 	bl	f9bc <rpc_dfu_client_message_free>
   10f64:	200c      	movs	r0, #12
   10f66:	f7fd fdc3 	bl	eaf0 <bsd_os_errno_set>
   10f6a:	f04f 30ff 	mov.w	r0, #4294967295
   10f6e:	b003      	add	sp, #12
   10f70:	bdf0      	pop	{r4, r5, r6, r7, pc}
   10f72:	2405      	movs	r4, #5
   10f74:	4625      	mov	r5, r4
   10f76:	e7b5      	b.n	10ee4 <mfu_interface_setopt+0x28>
   10f78:	2408      	movs	r4, #8
   10f7a:	4625      	mov	r5, r4
   10f7c:	e7b2      	b.n	10ee4 <mfu_interface_setopt+0x28>
   10f7e:	b1b3      	cbz	r3, 10fae <mfu_interface_setopt+0xf2>
   10f80:	9a08      	ldr	r2, [sp, #32]
   10f82:	2a04      	cmp	r2, #4
   10f84:	d113      	bne.n	10fae <mfu_interface_setopt+0xf2>
   10f86:	2000      	movs	r0, #0
   10f88:	681a      	ldr	r2, [r3, #0]
   10f8a:	4b16      	ldr	r3, [pc, #88]	; (10fe4 <mfu_interface_setopt+0x128>)
   10f8c:	601a      	str	r2, [r3, #0]
   10f8e:	b003      	add	sp, #12
   10f90:	bdf0      	pop	{r4, r5, r6, r7, pc}
   10f92:	202a      	movs	r0, #42	; 0x2a
   10f94:	f7fd fdac 	bl	eaf0 <bsd_os_errno_set>
   10f98:	f04f 30ff 	mov.w	r0, #4294967295
   10f9c:	b003      	add	sp, #12
   10f9e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   10fa0:	203c      	movs	r0, #60	; 0x3c
   10fa2:	f7fd fda5 	bl	eaf0 <bsd_os_errno_set>
   10fa6:	f04f 30ff 	mov.w	r0, #4294967295
   10faa:	b003      	add	sp, #12
   10fac:	bdf0      	pop	{r4, r5, r6, r7, pc}
   10fae:	2016      	movs	r0, #22
   10fb0:	f7fd fd9e 	bl	eaf0 <bsd_os_errno_set>
   10fb4:	f04f 30ff 	mov.w	r0, #4294967295
   10fb8:	e7c9      	b.n	10f4e <mfu_interface_setopt+0x92>
   10fba:	2001      	movs	r0, #1
   10fbc:	f7fd fd98 	bl	eaf0 <bsd_os_errno_set>
   10fc0:	f04f 30ff 	mov.w	r0, #4294967295
   10fc4:	e7c3      	b.n	10f4e <mfu_interface_setopt+0x92>
   10fc6:	4b08      	ldr	r3, [pc, #32]	; (10fe8 <mfu_interface_setopt+0x12c>)
   10fc8:	2008      	movs	r0, #8
   10fca:	601c      	str	r4, [r3, #0]
   10fcc:	f7fd fd90 	bl	eaf0 <bsd_os_errno_set>
   10fd0:	f04f 30ff 	mov.w	r0, #4294967295
   10fd4:	e7bb      	b.n	10f4e <mfu_interface_setopt+0x92>
   10fd6:	bf00      	nop
   10fd8:	200203e0 	.word	0x200203e0
   10fdc:	200249c0 	.word	0x200249c0
   10fe0:	200203ec 	.word	0x200203ec
   10fe4:	200203e8 	.word	0x200203e8
   10fe8:	200203e4 	.word	0x200203e4

00010fec <mfu_interface_getopt>:
   10fec:	f240 2003 	movw	r0, #515	; 0x203
   10ff0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   10ff4:	4281      	cmp	r1, r0
   10ff6:	b082      	sub	sp, #8
   10ff8:	9e08      	ldr	r6, [sp, #32]
   10ffa:	f040 80ae 	bne.w	1115a <mfu_interface_getopt+0x16e>
   10ffe:	461d      	mov	r5, r3
   11000:	2b00      	cmp	r3, #0
   11002:	f000 80aa 	beq.w	1115a <mfu_interface_getopt+0x16e>
   11006:	2e00      	cmp	r6, #0
   11008:	f000 80a7 	beq.w	1115a <mfu_interface_getopt+0x16e>
   1100c:	4b5e      	ldr	r3, [pc, #376]	; (11188 <mfu_interface_getopt+0x19c>)
   1100e:	681b      	ldr	r3, [r3, #0]
   11010:	3b02      	subs	r3, #2
   11012:	2b01      	cmp	r3, #1
   11014:	f200 80a7 	bhi.w	11166 <mfu_interface_getopt+0x17a>
   11018:	3a01      	subs	r2, #1
   1101a:	2a13      	cmp	r2, #19
   1101c:	d879      	bhi.n	11112 <mfu_interface_getopt+0x126>
   1101e:	e8df f002 	tbb	[pc, r2]
   11022:	5f17      	.short	0x5f17
   11024:	78787878 	.word	0x78787878
   11028:	78787872 	.word	0x78787872
   1102c:	78787878 	.word	0x78787878
   11030:	78787878 	.word	0x78787878
   11034:	0a78      	.short	0x0a78
   11036:	6833      	ldr	r3, [r6, #0]
   11038:	2b04      	cmp	r3, #4
   1103a:	f040 808e 	bne.w	1115a <mfu_interface_getopt+0x16e>
   1103e:	2200      	movs	r2, #0
   11040:	4610      	mov	r0, r2
   11042:	4b52      	ldr	r3, [pc, #328]	; (1118c <mfu_interface_getopt+0x1a0>)
   11044:	6819      	ldr	r1, [r3, #0]
   11046:	601a      	str	r2, [r3, #0]
   11048:	6029      	str	r1, [r5, #0]
   1104a:	b002      	add	sp, #8
   1104c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   11050:	6833      	ldr	r3, [r6, #0]
   11052:	2b24      	cmp	r3, #36	; 0x24
   11054:	f040 8081 	bne.w	1115a <mfu_interface_getopt+0x16e>
   11058:	2401      	movs	r4, #1
   1105a:	46a0      	mov	r8, r4
   1105c:	2100      	movs	r1, #0
   1105e:	4668      	mov	r0, sp
   11060:	f7fe fc84 	bl	f96c <rpc_dfu_client_request_alloc>
   11064:	2800      	cmp	r0, #0
   11066:	d146      	bne.n	110f6 <mfu_interface_getopt+0x10a>
   11068:	4949      	ldr	r1, [pc, #292]	; (11190 <mfu_interface_getopt+0x1a4>)
   1106a:	9b00      	ldr	r3, [sp, #0]
   1106c:	880a      	ldrh	r2, [r1, #0]
   1106e:	f1b8 0f03 	cmp.w	r8, #3
   11072:	f102 0201 	add.w	r2, r2, #1
   11076:	b292      	uxth	r2, r2
   11078:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
   1107c:	7118      	strb	r0, [r3, #4]
   1107e:	800a      	strh	r2, [r1, #0]
   11080:	60dc      	str	r4, [r3, #12]
   11082:	7158      	strb	r0, [r3, #5]
   11084:	7198      	strb	r0, [r3, #6]
   11086:	71d8      	strb	r0, [r3, #7]
   11088:	d04b      	beq.n	11122 <mfu_interface_getopt+0x136>
   1108a:	2104      	movs	r1, #4
   1108c:	2200      	movs	r2, #0
   1108e:	4f41      	ldr	r7, [pc, #260]	; (11194 <mfu_interface_getopt+0x1a8>)
   11090:	6099      	str	r1, [r3, #8]
   11092:	4618      	mov	r0, r3
   11094:	4641      	mov	r1, r8
   11096:	603a      	str	r2, [r7, #0]
   11098:	f7fe fc7c 	bl	f994 <rpc_dfu_client_request_send>
   1109c:	2800      	cmp	r0, #0
   1109e:	d14d      	bne.n	1113c <mfu_interface_getopt+0x150>
   110a0:	f04f 33ff 	mov.w	r3, #4294967295
   110a4:	ac02      	add	r4, sp, #8
   110a6:	f844 3d04 	str.w	r3, [r4, #-4]!
   110aa:	f8df 80dc 	ldr.w	r8, [pc, #220]	; 11188 <mfu_interface_getopt+0x19c>
   110ae:	e005      	b.n	110bc <mfu_interface_getopt+0xd0>
   110b0:	4621      	mov	r1, r4
   110b2:	4640      	mov	r0, r8
   110b4:	f7fd fc88 	bl	e9c8 <bsd_os_timedwait>
   110b8:	2800      	cmp	r0, #0
   110ba:	d137      	bne.n	1112c <mfu_interface_getopt+0x140>
   110bc:	6839      	ldr	r1, [r7, #0]
   110be:	2900      	cmp	r1, #0
   110c0:	d0f6      	beq.n	110b0 <mfu_interface_getopt+0xc4>
   110c2:	690c      	ldr	r4, [r1, #16]
   110c4:	2c00      	cmp	r4, #0
   110c6:	d154      	bne.n	11172 <mfu_interface_getopt+0x186>
   110c8:	6832      	ldr	r2, [r6, #0]
   110ca:	3114      	adds	r1, #20
   110cc:	4628      	mov	r0, r5
   110ce:	f008 fbef 	bl	198b0 <memcpy>
   110d2:	6838      	ldr	r0, [r7, #0]
   110d4:	f7fe fc72 	bl	f9bc <rpc_dfu_client_message_free>
   110d8:	4620      	mov	r0, r4
   110da:	b002      	add	sp, #8
   110dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   110e0:	6833      	ldr	r3, [r6, #0]
   110e2:	2b04      	cmp	r3, #4
   110e4:	d139      	bne.n	1115a <mfu_interface_getopt+0x16e>
   110e6:	2402      	movs	r4, #2
   110e8:	2100      	movs	r1, #0
   110ea:	4668      	mov	r0, sp
   110ec:	46a0      	mov	r8, r4
   110ee:	f7fe fc3d 	bl	f96c <rpc_dfu_client_request_alloc>
   110f2:	2800      	cmp	r0, #0
   110f4:	d0b8      	beq.n	11068 <mfu_interface_getopt+0x7c>
   110f6:	200c      	movs	r0, #12
   110f8:	f7fd fcfa 	bl	eaf0 <bsd_os_errno_set>
   110fc:	f04f 30ff 	mov.w	r0, #4294967295
   11100:	b002      	add	sp, #8
   11102:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   11106:	6833      	ldr	r3, [r6, #0]
   11108:	2b04      	cmp	r3, #4
   1110a:	d126      	bne.n	1115a <mfu_interface_getopt+0x16e>
   1110c:	2409      	movs	r4, #9
   1110e:	46a0      	mov	r8, r4
   11110:	e7a4      	b.n	1105c <mfu_interface_getopt+0x70>
   11112:	202a      	movs	r0, #42	; 0x2a
   11114:	f7fd fcec 	bl	eaf0 <bsd_os_errno_set>
   11118:	f04f 30ff 	mov.w	r0, #4294967295
   1111c:	b002      	add	sp, #8
   1111e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   11122:	4a1d      	ldr	r2, [pc, #116]	; (11198 <mfu_interface_getopt+0x1ac>)
   11124:	2108      	movs	r1, #8
   11126:	6812      	ldr	r2, [r2, #0]
   11128:	611a      	str	r2, [r3, #16]
   1112a:	e7af      	b.n	1108c <mfu_interface_getopt+0xa0>
   1112c:	203c      	movs	r0, #60	; 0x3c
   1112e:	f7fd fcdf 	bl	eaf0 <bsd_os_errno_set>
   11132:	f04f 30ff 	mov.w	r0, #4294967295
   11136:	b002      	add	sp, #8
   11138:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1113c:	9800      	ldr	r0, [sp, #0]
   1113e:	6803      	ldr	r3, [r0, #0]
   11140:	b11b      	cbz	r3, 1114a <mfu_interface_getopt+0x15e>
   11142:	4618      	mov	r0, r3
   11144:	f7fe fc42 	bl	f9cc <rpc_dfu_client_data_free>
   11148:	9800      	ldr	r0, [sp, #0]
   1114a:	f7fe fc37 	bl	f9bc <rpc_dfu_client_message_free>
   1114e:	200c      	movs	r0, #12
   11150:	f7fd fcce 	bl	eaf0 <bsd_os_errno_set>
   11154:	f04f 30ff 	mov.w	r0, #4294967295
   11158:	e7d2      	b.n	11100 <mfu_interface_getopt+0x114>
   1115a:	2016      	movs	r0, #22
   1115c:	f7fd fcc8 	bl	eaf0 <bsd_os_errno_set>
   11160:	f04f 30ff 	mov.w	r0, #4294967295
   11164:	e771      	b.n	1104a <mfu_interface_getopt+0x5e>
   11166:	2001      	movs	r0, #1
   11168:	f7fd fcc2 	bl	eaf0 <bsd_os_errno_set>
   1116c:	f04f 30ff 	mov.w	r0, #4294967295
   11170:	e76b      	b.n	1104a <mfu_interface_getopt+0x5e>
   11172:	4b06      	ldr	r3, [pc, #24]	; (1118c <mfu_interface_getopt+0x1a0>)
   11174:	2008      	movs	r0, #8
   11176:	601c      	str	r4, [r3, #0]
   11178:	f7fd fcba 	bl	eaf0 <bsd_os_errno_set>
   1117c:	6838      	ldr	r0, [r7, #0]
   1117e:	f7fe fc1d 	bl	f9bc <rpc_dfu_client_message_free>
   11182:	f04f 30ff 	mov.w	r0, #4294967295
   11186:	e760      	b.n	1104a <mfu_interface_getopt+0x5e>
   11188:	200203e0 	.word	0x200203e0
   1118c:	200203e4 	.word	0x200203e4
   11190:	200249c0 	.word	0x200249c0
   11194:	200203ec 	.word	0x200203ec
   11198:	200203e8 	.word	0x200203e8

0001119c <bsd_platform_error_handler>:
   1119c:	b508      	push	{r3, lr}
   1119e:	f7fb f9cb 	bl	c538 <bsd_recoverable_error_handler>
   111a2:	bd08      	pop	{r3, pc}

000111a4 <bsd_init>:
   111a4:	b510      	push	{r4, lr}
   111a6:	4c06      	ldr	r4, [pc, #24]	; (111c0 <bsd_init+0x1c>)
   111a8:	7823      	ldrb	r3, [r4, #0]
   111aa:	b92b      	cbnz	r3, 111b8 <bsd_init+0x14>
   111ac:	f000 f818 	bl	111e0 <bsd_platform_init>
   111b0:	b908      	cbnz	r0, 111b6 <bsd_init+0x12>
   111b2:	2301      	movs	r3, #1
   111b4:	7023      	strb	r3, [r4, #0]
   111b6:	bd10      	pop	{r4, pc}
   111b8:	f04f 30ff 	mov.w	r0, #4294967295
   111bc:	bd10      	pop	{r4, pc}
   111be:	bf00      	nop
   111c0:	200249cf 	.word	0x200249cf

000111c4 <unimplemented_method>:
   111c4:	b40f      	push	{r0, r1, r2, r3}
   111c6:	b508      	push	{r3, lr}
   111c8:	202d      	movs	r0, #45	; 0x2d
   111ca:	f7fd fc91 	bl	eaf0 <bsd_os_errno_set>
   111ce:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   111d2:	f04f 30ff 	mov.w	r0, #4294967295
   111d6:	b004      	add	sp, #16
   111d8:	4770      	bx	lr
   111da:	bf00      	nop

000111dc <rpc_transport_ipc_fault_handler>:
   111dc:	f7ff bfde 	b.w	1119c <bsd_platform_error_handler>

000111e0 <bsd_platform_init>:
   111e0:	b5f0      	push	{r4, r5, r6, r7, lr}
   111e2:	b093      	sub	sp, #76	; 0x4c
   111e4:	f7fe fe2a 	bl	fe3c <nrf_mem_init>
   111e8:	2800      	cmp	r0, #0
   111ea:	d14c      	bne.n	11286 <bsd_platform_init+0xa6>
   111ec:	4928      	ldr	r1, [pc, #160]	; (11290 <bsd_platform_init+0xb0>)
   111ee:	a801      	add	r0, sp, #4
   111f0:	f7fe fe98 	bl	ff24 <nrf_mem_register>
   111f4:	2800      	cmp	r0, #0
   111f6:	d146      	bne.n	11286 <bsd_platform_init+0xa6>
   111f8:	f7fd fd54 	bl	eca4 <bsd_os_init>
   111fc:	f004 f9fa 	bl	155f4 <rpc_framework_init>
   11200:	2800      	cmp	r0, #0
   11202:	d140      	bne.n	11286 <bsd_platform_init+0xa6>
   11204:	2320      	movs	r3, #32
   11206:	f44f 4180 	mov.w	r1, #16384	; 0x4000
   1120a:	2208      	movs	r2, #8
   1120c:	f44f 5c40 	mov.w	ip, #12288	; 0x3000
   11210:	4f20      	ldr	r7, [pc, #128]	; (11294 <bsd_platform_init+0xb4>)
   11212:	4e21      	ldr	r6, [pc, #132]	; (11298 <bsd_platform_init+0xb8>)
   11214:	9303      	str	r3, [sp, #12]
   11216:	9305      	str	r3, [sp, #20]
   11218:	9307      	str	r3, [sp, #28]
   1121a:	4d20      	ldr	r5, [pc, #128]	; (1129c <bsd_platform_init+0xbc>)
   1121c:	9109      	str	r1, [sp, #36]	; 0x24
   1121e:	910d      	str	r1, [sp, #52]	; 0x34
   11220:	4c1f      	ldr	r4, [pc, #124]	; (112a0 <bsd_platform_init+0xc0>)
   11222:	4920      	ldr	r1, [pc, #128]	; (112a4 <bsd_platform_init+0xc4>)
   11224:	4b20      	ldr	r3, [pc, #128]	; (112a8 <bsd_platform_init+0xc8>)
   11226:	e9cd 0010 	strd	r0, r0, [sp, #64]	; 0x40
   1122a:	eb0d 0002 	add.w	r0, sp, r2
   1122e:	f8cd c02c 	str.w	ip, [sp, #44]	; 0x2c
   11232:	e9cd 220e 	strd	r2, r2, [sp, #56]	; 0x38
   11236:	9702      	str	r7, [sp, #8]
   11238:	9604      	str	r6, [sp, #16]
   1123a:	9506      	str	r5, [sp, #24]
   1123c:	9408      	str	r4, [sp, #32]
   1123e:	910a      	str	r1, [sp, #40]	; 0x28
   11240:	930c      	str	r3, [sp, #48]	; 0x30
   11242:	f000 fbe9 	bl	11a18 <rpc_transport_ipc_init>
   11246:	b108      	cbz	r0, 1124c <bsd_platform_init+0x6c>
   11248:	b013      	add	sp, #76	; 0x4c
   1124a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1124c:	f003 ff6e 	bl	1512c <interface_init>
   11250:	b9c8      	cbnz	r0, 11286 <bsd_platform_init+0xa6>
   11252:	f7fe fa3d 	bl	f6d0 <at_interface_init>
   11256:	b9b0      	cbnz	r0, 11286 <bsd_platform_init+0xa6>
   11258:	f002 fc22 	bl	13aa0 <ip_interface_init>
   1125c:	b998      	cbnz	r0, 11286 <bsd_platform_init+0xa6>
   1125e:	f7ff f883 	bl	10368 <tls_interface_init>
   11262:	b980      	cbnz	r0, 11286 <bsd_platform_init+0xa6>
   11264:	f7ff fcb6 	bl	10bd4 <mfu_interface_init>
   11268:	b968      	cbnz	r0, 11286 <bsd_platform_init+0xa6>
   1126a:	f001 f9e9 	bl	12640 <pdn_interface_init>
   1126e:	b950      	cbnz	r0, 11286 <bsd_platform_init+0xa6>
   11270:	f005 fc94 	bl	16b9c <gnss_interface_init>
   11274:	b938      	cbnz	r0, 11286 <bsd_platform_init+0xa6>
   11276:	f7fd fec3 	bl	f000 <logobj_interface_init>
   1127a:	3000      	adds	r0, #0
   1127c:	bf18      	it	ne
   1127e:	2001      	movne	r0, #1
   11280:	4240      	negs	r0, r0
   11282:	b013      	add	sp, #76	; 0x4c
   11284:	bdf0      	pop	{r4, r5, r6, r7, pc}
   11286:	f04f 30ff 	mov.w	r0, #4294967295
   1128a:	b013      	add	sp, #76	; 0x4c
   1128c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1128e:	bf00      	nop
   11290:	0001aa3c 	.word	0x0001aa3c
   11294:	20010000 	.word	0x20010000
   11298:	20010040 	.word	0x20010040
   1129c:	20010020 	.word	0x20010020
   112a0:	20017060 	.word	0x20017060
   112a4:	20010060 	.word	0x20010060
   112a8:	20013060 	.word	0x20013060

000112ac <bsd_platform_af_method_table_get>:
   112ac:	2805      	cmp	r0, #5
   112ae:	d02a      	beq.n	11306 <bsd_platform_af_method_table_get+0x5a>
   112b0:	b508      	push	{r3, lr}
   112b2:	d914      	bls.n	112de <bsd_platform_af_method_table_get+0x32>
   112b4:	280a      	cmp	r0, #10
   112b6:	d016      	beq.n	112e6 <bsd_platform_af_method_table_get+0x3a>
   112b8:	2866      	cmp	r0, #102	; 0x66
   112ba:	d11f      	bne.n	112fc <bsd_platform_af_method_table_get+0x50>
   112bc:	f240 2302 	movw	r3, #514	; 0x202
   112c0:	429a      	cmp	r2, r3
   112c2:	d035      	beq.n	11330 <bsd_platform_af_method_table_get+0x84>
   112c4:	f240 2305 	movw	r3, #517	; 0x205
   112c8:	429a      	cmp	r2, r3
   112ca:	d035      	beq.n	11338 <bsd_platform_af_method_table_get+0x8c>
   112cc:	f240 2301 	movw	r3, #513	; 0x201
   112d0:	429a      	cmp	r2, r3
   112d2:	d02f      	beq.n	11334 <bsd_platform_af_method_table_get+0x88>
   112d4:	202b      	movs	r0, #43	; 0x2b
   112d6:	f7fd fc0b 	bl	eaf0 <bsd_os_errno_set>
   112da:	2000      	movs	r0, #0
   112dc:	bd08      	pop	{r3, pc}
   112de:	2801      	cmp	r0, #1
   112e0:	d016      	beq.n	11310 <bsd_platform_af_method_table_get+0x64>
   112e2:	2802      	cmp	r0, #2
   112e4:	d10a      	bne.n	112fc <bsd_platform_af_method_table_get+0x50>
   112e6:	f5b2 7f83 	cmp.w	r2, #262	; 0x106
   112ea:	d21a      	bcs.n	11322 <bsd_platform_af_method_table_get+0x76>
   112ec:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
   112f0:	d21a      	bcs.n	11328 <bsd_platform_af_method_table_get+0x7c>
   112f2:	3a01      	subs	r2, #1
   112f4:	2a01      	cmp	r2, #1
   112f6:	d8ed      	bhi.n	112d4 <bsd_platform_af_method_table_get+0x28>
   112f8:	4810      	ldr	r0, [pc, #64]	; (1133c <bsd_platform_af_method_table_get+0x90>)
   112fa:	bd08      	pop	{r3, pc}
   112fc:	2016      	movs	r0, #22
   112fe:	f7fd fbf7 	bl	eaf0 <bsd_os_errno_set>
   11302:	2000      	movs	r0, #0
   11304:	bd08      	pop	{r3, pc}
   11306:	2903      	cmp	r1, #3
   11308:	480d      	ldr	r0, [pc, #52]	; (11340 <bsd_platform_af_method_table_get+0x94>)
   1130a:	bf18      	it	ne
   1130c:	2000      	movne	r0, #0
   1130e:	4770      	bx	lr
   11310:	f240 2303 	movw	r3, #515	; 0x203
   11314:	429a      	cmp	r2, r3
   11316:	d009      	beq.n	1132c <bsd_platform_af_method_table_get+0x80>
   11318:	f5b2 7f01 	cmp.w	r2, #516	; 0x204
   1131c:	d1da      	bne.n	112d4 <bsd_platform_af_method_table_get+0x28>
   1131e:	4809      	ldr	r0, [pc, #36]	; (11344 <bsd_platform_af_method_table_get+0x98>)
   11320:	bd08      	pop	{r3, pc}
   11322:	f5b2 7f87 	cmp.w	r2, #270	; 0x10e
   11326:	d1d5      	bne.n	112d4 <bsd_platform_af_method_table_get+0x28>
   11328:	4807      	ldr	r0, [pc, #28]	; (11348 <bsd_platform_af_method_table_get+0x9c>)
   1132a:	bd08      	pop	{r3, pc}
   1132c:	4807      	ldr	r0, [pc, #28]	; (1134c <bsd_platform_af_method_table_get+0xa0>)
   1132e:	bd08      	pop	{r3, pc}
   11330:	4807      	ldr	r0, [pc, #28]	; (11350 <bsd_platform_af_method_table_get+0xa4>)
   11332:	bd08      	pop	{r3, pc}
   11334:	4807      	ldr	r0, [pc, #28]	; (11354 <bsd_platform_af_method_table_get+0xa8>)
   11336:	bd08      	pop	{r3, pc}
   11338:	4807      	ldr	r0, [pc, #28]	; (11358 <bsd_platform_af_method_table_get+0xac>)
   1133a:	bd08      	pop	{r3, pc}
   1133c:	0001a90c 	.word	0x0001a90c
   11340:	0001a9fc 	.word	0x0001a9fc
   11344:	0001a9ac 	.word	0x0001a9ac
   11348:	0001a934 	.word	0x0001a934
   1134c:	0001a95c 	.word	0x0001a95c
   11350:	0001a984 	.word	0x0001a984
   11354:	0001a8e4 	.word	0x0001a8e4
   11358:	0001a9d4 	.word	0x0001a9d4

0001135c <bsd_platform_fd_method_table_get>:
   1135c:	b538      	push	{r3, r4, r5, lr}
   1135e:	4605      	mov	r5, r0
   11360:	f004 f816 	bl	15390 <interface_socket_from_handle_get>
   11364:	4604      	mov	r4, r0
   11366:	b960      	cbnz	r0, 11382 <bsd_platform_fd_method_table_get+0x26>
   11368:	4b2c      	ldr	r3, [pc, #176]	; (1141c <bsd_platform_fd_method_table_get+0xc0>)
   1136a:	429d      	cmp	r5, r3
   1136c:	d02f      	beq.n	113ce <bsd_platform_fd_method_table_get+0x72>
   1136e:	0c2b      	lsrs	r3, r5, #16
   11370:	4a2b      	ldr	r2, [pc, #172]	; (11420 <bsd_platform_fd_method_table_get+0xc4>)
   11372:	041b      	lsls	r3, r3, #16
   11374:	4293      	cmp	r3, r2
   11376:	d03d      	beq.n	113f4 <bsd_platform_fd_method_table_get+0x98>
   11378:	4b2a      	ldr	r3, [pc, #168]	; (11424 <bsd_platform_fd_method_table_get+0xc8>)
   1137a:	429d      	cmp	r5, r3
   1137c:	d149      	bne.n	11412 <bsd_platform_fd_method_table_get+0xb6>
   1137e:	482a      	ldr	r0, [pc, #168]	; (11428 <bsd_platform_fd_method_table_get+0xcc>)
   11380:	bd38      	pop	{r3, r4, r5, pc}
   11382:	68c3      	ldr	r3, [r0, #12]
   11384:	6942      	ldr	r2, [r0, #20]
   11386:	2b05      	cmp	r3, #5
   11388:	d036      	beq.n	113f8 <bsd_platform_fd_method_table_get+0x9c>
   1138a:	d911      	bls.n	113b0 <bsd_platform_fd_method_table_get+0x54>
   1138c:	2b0a      	cmp	r3, #10
   1138e:	d013      	beq.n	113b8 <bsd_platform_fd_method_table_get+0x5c>
   11390:	2b66      	cmp	r3, #102	; 0x66
   11392:	d11e      	bne.n	113d2 <bsd_platform_fd_method_table_get+0x76>
   11394:	f240 2302 	movw	r3, #514	; 0x202
   11398:	429a      	cmp	r2, r3
   1139a:	d02b      	beq.n	113f4 <bsd_platform_fd_method_table_get+0x98>
   1139c:	f240 2305 	movw	r3, #517	; 0x205
   113a0:	429a      	cmp	r2, r3
   113a2:	d02f      	beq.n	11404 <bsd_platform_fd_method_table_get+0xa8>
   113a4:	f240 2301 	movw	r3, #513	; 0x201
   113a8:	429a      	cmp	r2, r3
   113aa:	d11e      	bne.n	113ea <bsd_platform_fd_method_table_get+0x8e>
   113ac:	481f      	ldr	r0, [pc, #124]	; (1142c <bsd_platform_fd_method_table_get+0xd0>)
   113ae:	bd38      	pop	{r3, r4, r5, pc}
   113b0:	2b01      	cmp	r3, #1
   113b2:	d013      	beq.n	113dc <bsd_platform_fd_method_table_get+0x80>
   113b4:	2b02      	cmp	r3, #2
   113b6:	d10c      	bne.n	113d2 <bsd_platform_fd_method_table_get+0x76>
   113b8:	f5b2 7f83 	cmp.w	r2, #262	; 0x106
   113bc:	d224      	bcs.n	11408 <bsd_platform_fd_method_table_get+0xac>
   113be:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
   113c2:	d224      	bcs.n	1140e <bsd_platform_fd_method_table_get+0xb2>
   113c4:	3a01      	subs	r2, #1
   113c6:	2a01      	cmp	r2, #1
   113c8:	d80f      	bhi.n	113ea <bsd_platform_fd_method_table_get+0x8e>
   113ca:	4819      	ldr	r0, [pc, #100]	; (11430 <bsd_platform_fd_method_table_get+0xd4>)
   113cc:	bd38      	pop	{r3, r4, r5, pc}
   113ce:	4819      	ldr	r0, [pc, #100]	; (11434 <bsd_platform_fd_method_table_get+0xd8>)
   113d0:	bd38      	pop	{r3, r4, r5, pc}
   113d2:	2016      	movs	r0, #22
   113d4:	f7fd fb8c 	bl	eaf0 <bsd_os_errno_set>
   113d8:	2000      	movs	r0, #0
   113da:	bd38      	pop	{r3, r4, r5, pc}
   113dc:	f240 2303 	movw	r3, #515	; 0x203
   113e0:	429a      	cmp	r2, r3
   113e2:	d0f4      	beq.n	113ce <bsd_platform_fd_method_table_get+0x72>
   113e4:	f5b2 7f01 	cmp.w	r2, #516	; 0x204
   113e8:	d0c9      	beq.n	1137e <bsd_platform_fd_method_table_get+0x22>
   113ea:	202b      	movs	r0, #43	; 0x2b
   113ec:	f7fd fb80 	bl	eaf0 <bsd_os_errno_set>
   113f0:	2000      	movs	r0, #0
   113f2:	bd38      	pop	{r3, r4, r5, pc}
   113f4:	4810      	ldr	r0, [pc, #64]	; (11438 <bsd_platform_fd_method_table_get+0xdc>)
   113f6:	bd38      	pop	{r3, r4, r5, pc}
   113f8:	6903      	ldr	r3, [r0, #16]
   113fa:	4810      	ldr	r0, [pc, #64]	; (1143c <bsd_platform_fd_method_table_get+0xe0>)
   113fc:	2b03      	cmp	r3, #3
   113fe:	bf18      	it	ne
   11400:	2000      	movne	r0, #0
   11402:	bd38      	pop	{r3, r4, r5, pc}
   11404:	480e      	ldr	r0, [pc, #56]	; (11440 <bsd_platform_fd_method_table_get+0xe4>)
   11406:	bd38      	pop	{r3, r4, r5, pc}
   11408:	f5b2 7f87 	cmp.w	r2, #270	; 0x10e
   1140c:	d1ed      	bne.n	113ea <bsd_platform_fd_method_table_get+0x8e>
   1140e:	480d      	ldr	r0, [pc, #52]	; (11444 <bsd_platform_fd_method_table_get+0xe8>)
   11410:	bd38      	pop	{r3, r4, r5, pc}
   11412:	2009      	movs	r0, #9
   11414:	f7fd fb6c 	bl	eaf0 <bsd_os_errno_set>
   11418:	4620      	mov	r0, r4
   1141a:	bd38      	pop	{r3, r4, r5, pc}
   1141c:	49765432 	.word	0x49765432
   11420:	789a0000 	.word	0x789a0000
   11424:	49765443 	.word	0x49765443
   11428:	0001a9ac 	.word	0x0001a9ac
   1142c:	0001a8e4 	.word	0x0001a8e4
   11430:	0001a90c 	.word	0x0001a90c
   11434:	0001a95c 	.word	0x0001a95c
   11438:	0001a984 	.word	0x0001a984
   1143c:	0001a9fc 	.word	0x0001a9fc
   11440:	0001a9d4 	.word	0x0001a9d4
   11444:	0001a934 	.word	0x0001a934

00011448 <bsd_platform_getaddrinfo>:
   11448:	f003 bad6 	b.w	149f8 <ip_interface_getaddrinfo>

0001144c <bsd_platform_freeaddrinfo>:
   1144c:	f003 bbca 	b.w	14be4 <ip_interface_freeaddrinfo>

00011450 <bsd_platform_poll>:
   11450:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   11454:	ea42 72e2 	orr.w	r2, r2, r2, asr #31
   11458:	b083      	sub	sp, #12
   1145a:	9200      	str	r2, [sp, #0]
   1145c:	2800      	cmp	r0, #0
   1145e:	d048      	beq.n	114f2 <bsd_platform_poll+0xa2>
   11460:	1e4b      	subs	r3, r1, #1
   11462:	2b08      	cmp	r3, #8
   11464:	d845      	bhi.n	114f2 <bsd_platform_poll+0xa2>
   11466:	4680      	mov	r8, r0
   11468:	4605      	mov	r5, r0
   1146a:	2400      	movs	r4, #0
   1146c:	eb00 07c1 	add.w	r7, r0, r1, lsl #3
   11470:	88ab      	ldrh	r3, [r5, #4]
   11472:	6828      	ldr	r0, [r5, #0]
   11474:	f003 0303 	and.w	r3, r3, #3
   11478:	a901      	add	r1, sp, #4
   1147a:	f043 061c 	orr.w	r6, r3, #28
   1147e:	f003 ff95 	bl	153ac <interface_socket_event_get>
   11482:	9b01      	ldr	r3, [sp, #4]
   11484:	3508      	adds	r5, #8
   11486:	4033      	ands	r3, r6
   11488:	f825 3c02 	strh.w	r3, [r5, #-2]
   1148c:	b103      	cbz	r3, 11490 <bsd_platform_poll+0x40>
   1148e:	3401      	adds	r4, #1
   11490:	42af      	cmp	r7, r5
   11492:	d1ed      	bne.n	11470 <bsd_platform_poll+0x20>
   11494:	bb9c      	cbnz	r4, 114fe <bsd_platform_poll+0xae>
   11496:	4669      	mov	r1, sp
   11498:	4640      	mov	r0, r8
   1149a:	f7fd fa95 	bl	e9c8 <bsd_os_timedwait>
   1149e:	4607      	mov	r7, r0
   114a0:	b108      	cbz	r0, 114a6 <bsd_platform_poll+0x56>
   114a2:	283c      	cmp	r0, #60	; 0x3c
   114a4:	d11d      	bne.n	114e2 <bsd_platform_poll+0x92>
   114a6:	46c1      	mov	r9, r8
   114a8:	2600      	movs	r6, #0
   114aa:	f8b9 3004 	ldrh.w	r3, [r9, #4]
   114ae:	f8d9 0000 	ldr.w	r0, [r9]
   114b2:	f003 0303 	and.w	r3, r3, #3
   114b6:	a901      	add	r1, sp, #4
   114b8:	f043 041c 	orr.w	r4, r3, #28
   114bc:	f003 ff76 	bl	153ac <interface_socket_event_get>
   114c0:	9b01      	ldr	r3, [sp, #4]
   114c2:	f109 0908 	add.w	r9, r9, #8
   114c6:	4023      	ands	r3, r4
   114c8:	f829 3c02 	strh.w	r3, [r9, #-2]
   114cc:	b103      	cbz	r3, 114d0 <bsd_platform_poll+0x80>
   114ce:	3601      	adds	r6, #1
   114d0:	454d      	cmp	r5, r9
   114d2:	d1ea      	bne.n	114aa <bsd_platform_poll+0x5a>
   114d4:	b90e      	cbnz	r6, 114da <bsd_platform_poll+0x8a>
   114d6:	2f00      	cmp	r7, #0
   114d8:	d0dd      	beq.n	11496 <bsd_platform_poll+0x46>
   114da:	4630      	mov	r0, r6
   114dc:	b003      	add	sp, #12
   114de:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   114e2:	2023      	movs	r0, #35	; 0x23
   114e4:	f7fd fb04 	bl	eaf0 <bsd_os_errno_set>
   114e8:	f04f 30ff 	mov.w	r0, #4294967295
   114ec:	b003      	add	sp, #12
   114ee:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   114f2:	2016      	movs	r0, #22
   114f4:	f7fd fafc 	bl	eaf0 <bsd_os_errno_set>
   114f8:	f04f 30ff 	mov.w	r0, #4294967295
   114fc:	e7ee      	b.n	114dc <bsd_platform_poll+0x8c>
   114fe:	4620      	mov	r0, r4
   11500:	e7ec      	b.n	114dc <bsd_platform_poll+0x8c>
   11502:	bf00      	nop

00011504 <bsd_platform_fcntl>:
   11504:	b508      	push	{r3, lr}
   11506:	4b06      	ldr	r3, [pc, #24]	; (11520 <bsd_platform_fcntl+0x1c>)
   11508:	4298      	cmp	r0, r3
   1150a:	d003      	beq.n	11514 <bsd_platform_fcntl+0x10>
   1150c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   11510:	f003 bfd6 	b.w	154c0 <interface_socket_fcntl>
   11514:	202d      	movs	r0, #45	; 0x2d
   11516:	f7fd faeb 	bl	eaf0 <bsd_os_errno_set>
   1151a:	f04f 30ff 	mov.w	r0, #4294967295
   1151e:	bd08      	pop	{r3, pc}
   11520:	49765432 	.word	0x49765432

00011524 <ipc_trace_init>:
   11524:	4b01      	ldr	r3, [pc, #4]	; (1152c <ipc_trace_init+0x8>)
   11526:	6018      	str	r0, [r3, #0]
   11528:	4770      	bx	lr
   1152a:	bf00      	nop
   1152c:	200203fc 	.word	0x200203fc

00011530 <bsd_os_trace_irq_handler>:
   11530:	b5f0      	push	{r4, r5, r6, r7, lr}
   11532:	4b6c      	ldr	r3, [pc, #432]	; (116e4 <bsd_os_trace_irq_handler+0x1b4>)
   11534:	b083      	sub	sp, #12
   11536:	781b      	ldrb	r3, [r3, #0]
   11538:	2b00      	cmp	r3, #0
   1153a:	f000 80ad 	beq.w	11698 <bsd_os_trace_irq_handler+0x168>
   1153e:	4b6a      	ldr	r3, [pc, #424]	; (116e8 <bsd_os_trace_irq_handler+0x1b8>)
   11540:	681c      	ldr	r4, [r3, #0]
   11542:	68a2      	ldr	r2, [r4, #8]
   11544:	6863      	ldr	r3, [r4, #4]
   11546:	429a      	cmp	r2, r3
   11548:	d02d      	beq.n	115a6 <bsd_os_trace_irq_handler+0x76>
   1154a:	f64b 63ef 	movw	r3, #48879	; 0xbeef
   1154e:	f8ad 3000 	strh.w	r3, [sp]
   11552:	7823      	ldrb	r3, [r4, #0]
   11554:	466e      	mov	r6, sp
   11556:	f88d 3004 	strb.w	r3, [sp, #4]
   1155a:	6863      	ldr	r3, [r4, #4]
   1155c:	2105      	movs	r1, #5
   1155e:	429a      	cmp	r2, r3
   11560:	bf2a      	itet	cs
   11562:	6927      	ldrcs	r7, [r4, #16]
   11564:	1a9f      	subcc	r7, r3, r2
   11566:	1abf      	subcs	r7, r7, r2
   11568:	429a      	cmp	r2, r3
   1156a:	bf94      	ite	ls
   1156c:	2500      	movls	r5, #0
   1156e:	68e5      	ldrhi	r5, [r4, #12]
   11570:	b2bf      	uxth	r7, r7
   11572:	bf88      	it	hi
   11574:	1b5b      	subhi	r3, r3, r5
   11576:	4630      	mov	r0, r6
   11578:	bf88      	it	hi
   1157a:	b29d      	uxthhi	r5, r3
   1157c:	f8ad 7002 	strh.w	r7, [sp, #2]
   11580:	f008 fb29 	bl	19bd6 <bsd_os_trace_put>
   11584:	f8bd 1002 	ldrh.w	r1, [sp, #2]
   11588:	68a0      	ldr	r0, [r4, #8]
   1158a:	f008 fb24 	bl	19bd6 <bsd_os_trace_put>
   1158e:	68a3      	ldr	r3, [r4, #8]
   11590:	6922      	ldr	r2, [r4, #16]
   11592:	441f      	add	r7, r3
   11594:	4297      	cmp	r7, r2
   11596:	bf08      	it	eq
   11598:	68e3      	ldreq	r3, [r4, #12]
   1159a:	60a7      	str	r7, [r4, #8]
   1159c:	bf08      	it	eq
   1159e:	60a3      	streq	r3, [r4, #8]
   115a0:	2d00      	cmp	r5, #0
   115a2:	f040 808d 	bne.w	116c0 <bsd_os_trace_irq_handler+0x190>
   115a6:	4b51      	ldr	r3, [pc, #324]	; (116ec <bsd_os_trace_irq_handler+0x1bc>)
   115a8:	681c      	ldr	r4, [r3, #0]
   115aa:	68a2      	ldr	r2, [r4, #8]
   115ac:	6863      	ldr	r3, [r4, #4]
   115ae:	429a      	cmp	r2, r3
   115b0:	d02c      	beq.n	1160c <bsd_os_trace_irq_handler+0xdc>
   115b2:	f64b 63ef 	movw	r3, #48879	; 0xbeef
   115b6:	f8ad 3000 	strh.w	r3, [sp]
   115ba:	7823      	ldrb	r3, [r4, #0]
   115bc:	466e      	mov	r6, sp
   115be:	f88d 3004 	strb.w	r3, [sp, #4]
   115c2:	6863      	ldr	r3, [r4, #4]
   115c4:	2105      	movs	r1, #5
   115c6:	429a      	cmp	r2, r3
   115c8:	bf2a      	itet	cs
   115ca:	6927      	ldrcs	r7, [r4, #16]
   115cc:	1a9f      	subcc	r7, r3, r2
   115ce:	1abf      	subcs	r7, r7, r2
   115d0:	429a      	cmp	r2, r3
   115d2:	bf94      	ite	ls
   115d4:	2500      	movls	r5, #0
   115d6:	68e5      	ldrhi	r5, [r4, #12]
   115d8:	b2bf      	uxth	r7, r7
   115da:	bf88      	it	hi
   115dc:	1b5b      	subhi	r3, r3, r5
   115de:	4630      	mov	r0, r6
   115e0:	bf88      	it	hi
   115e2:	b29d      	uxthhi	r5, r3
   115e4:	f8ad 7002 	strh.w	r7, [sp, #2]
   115e8:	f008 faf5 	bl	19bd6 <bsd_os_trace_put>
   115ec:	f8bd 1002 	ldrh.w	r1, [sp, #2]
   115f0:	68a0      	ldr	r0, [r4, #8]
   115f2:	f008 faf0 	bl	19bd6 <bsd_os_trace_put>
   115f6:	68a3      	ldr	r3, [r4, #8]
   115f8:	6922      	ldr	r2, [r4, #16]
   115fa:	441f      	add	r7, r3
   115fc:	4297      	cmp	r7, r2
   115fe:	bf08      	it	eq
   11600:	68e3      	ldreq	r3, [r4, #12]
   11602:	60a7      	str	r7, [r4, #8]
   11604:	bf08      	it	eq
   11606:	60a3      	streq	r3, [r4, #8]
   11608:	2d00      	cmp	r5, #0
   1160a:	d148      	bne.n	1169e <bsd_os_trace_irq_handler+0x16e>
   1160c:	4b38      	ldr	r3, [pc, #224]	; (116f0 <bsd_os_trace_irq_handler+0x1c0>)
   1160e:	681c      	ldr	r4, [r3, #0]
   11610:	68a2      	ldr	r2, [r4, #8]
   11612:	6863      	ldr	r3, [r4, #4]
   11614:	429a      	cmp	r2, r3
   11616:	d02b      	beq.n	11670 <bsd_os_trace_irq_handler+0x140>
   11618:	f64b 63ef 	movw	r3, #48879	; 0xbeef
   1161c:	f8ad 3000 	strh.w	r3, [sp]
   11620:	7823      	ldrb	r3, [r4, #0]
   11622:	466e      	mov	r6, sp
   11624:	f88d 3004 	strb.w	r3, [sp, #4]
   11628:	6863      	ldr	r3, [r4, #4]
   1162a:	2105      	movs	r1, #5
   1162c:	429a      	cmp	r2, r3
   1162e:	bf2a      	itet	cs
   11630:	6927      	ldrcs	r7, [r4, #16]
   11632:	1a9f      	subcc	r7, r3, r2
   11634:	1abf      	subcs	r7, r7, r2
   11636:	429a      	cmp	r2, r3
   11638:	bf94      	ite	ls
   1163a:	2500      	movls	r5, #0
   1163c:	68e5      	ldrhi	r5, [r4, #12]
   1163e:	b2bf      	uxth	r7, r7
   11640:	bf88      	it	hi
   11642:	1b5b      	subhi	r3, r3, r5
   11644:	4630      	mov	r0, r6
   11646:	bf88      	it	hi
   11648:	b29d      	uxthhi	r5, r3
   1164a:	f8ad 7002 	strh.w	r7, [sp, #2]
   1164e:	f008 fac2 	bl	19bd6 <bsd_os_trace_put>
   11652:	f8bd 1002 	ldrh.w	r1, [sp, #2]
   11656:	68a0      	ldr	r0, [r4, #8]
   11658:	f008 fabd 	bl	19bd6 <bsd_os_trace_put>
   1165c:	68a3      	ldr	r3, [r4, #8]
   1165e:	6922      	ldr	r2, [r4, #16]
   11660:	441f      	add	r7, r3
   11662:	4297      	cmp	r7, r2
   11664:	bf08      	it	eq
   11666:	68e3      	ldreq	r3, [r4, #12]
   11668:	60a7      	str	r7, [r4, #8]
   1166a:	bf08      	it	eq
   1166c:	60a3      	streq	r3, [r4, #8]
   1166e:	b90d      	cbnz	r5, 11674 <bsd_os_trace_irq_handler+0x144>
   11670:	b003      	add	sp, #12
   11672:	bdf0      	pop	{r4, r5, r6, r7, pc}
   11674:	4630      	mov	r0, r6
   11676:	2105      	movs	r1, #5
   11678:	f8ad 5002 	strh.w	r5, [sp, #2]
   1167c:	f008 faab 	bl	19bd6 <bsd_os_trace_put>
   11680:	f8bd 1002 	ldrh.w	r1, [sp, #2]
   11684:	68e0      	ldr	r0, [r4, #12]
   11686:	f008 faa6 	bl	19bd6 <bsd_os_trace_put>
   1168a:	f8bd 2002 	ldrh.w	r2, [sp, #2]
   1168e:	68e3      	ldr	r3, [r4, #12]
   11690:	4413      	add	r3, r2
   11692:	60a3      	str	r3, [r4, #8]
   11694:	b003      	add	sp, #12
   11696:	bdf0      	pop	{r4, r5, r6, r7, pc}
   11698:	f7fd fafc 	bl	ec94 <bsd_os_trace_irq_clear>
   1169c:	e74f      	b.n	1153e <bsd_os_trace_irq_handler+0xe>
   1169e:	2105      	movs	r1, #5
   116a0:	4630      	mov	r0, r6
   116a2:	f8ad 5002 	strh.w	r5, [sp, #2]
   116a6:	f008 fa96 	bl	19bd6 <bsd_os_trace_put>
   116aa:	f8bd 1002 	ldrh.w	r1, [sp, #2]
   116ae:	68e0      	ldr	r0, [r4, #12]
   116b0:	f008 fa91 	bl	19bd6 <bsd_os_trace_put>
   116b4:	f8bd 2002 	ldrh.w	r2, [sp, #2]
   116b8:	68e3      	ldr	r3, [r4, #12]
   116ba:	4413      	add	r3, r2
   116bc:	60a3      	str	r3, [r4, #8]
   116be:	e7a5      	b.n	1160c <bsd_os_trace_irq_handler+0xdc>
   116c0:	2105      	movs	r1, #5
   116c2:	4630      	mov	r0, r6
   116c4:	f8ad 5002 	strh.w	r5, [sp, #2]
   116c8:	f008 fa85 	bl	19bd6 <bsd_os_trace_put>
   116cc:	f8bd 1002 	ldrh.w	r1, [sp, #2]
   116d0:	68e0      	ldr	r0, [r4, #12]
   116d2:	f008 fa80 	bl	19bd6 <bsd_os_trace_put>
   116d6:	f8bd 2002 	ldrh.w	r2, [sp, #2]
   116da:	68e3      	ldr	r3, [r4, #12]
   116dc:	4413      	add	r3, r2
   116de:	60a3      	str	r3, [r4, #8]
   116e0:	e761      	b.n	115a6 <bsd_os_trace_irq_handler+0x76>
   116e2:	bf00      	nop
   116e4:	200249d0 	.word	0x200249d0
   116e8:	200203f8 	.word	0x200203f8
   116ec:	200203f0 	.word	0x200203f0
   116f0:	200203f4 	.word	0x200203f4

000116f4 <ipc_trace_handle>:
   116f4:	2200      	movs	r2, #0
   116f6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   116fa:	4bb0      	ldr	r3, [pc, #704]	; (119bc <ipc_trace_handle+0x2c8>)
   116fc:	b083      	sub	sp, #12
   116fe:	681b      	ldr	r3, [r3, #0]
   11700:	6919      	ldr	r1, [r3, #16]
   11702:	695c      	ldr	r4, [r3, #20]
   11704:	7c18      	ldrb	r0, [r3, #16]
   11706:	741a      	strb	r2, [r3, #16]
   11708:	7c58      	ldrb	r0, [r3, #17]
   1170a:	745a      	strb	r2, [r3, #17]
   1170c:	7c98      	ldrb	r0, [r3, #18]
   1170e:	749a      	strb	r2, [r3, #18]
   11710:	7cd8      	ldrb	r0, [r3, #19]
   11712:	74da      	strb	r2, [r3, #19]
   11714:	7d18      	ldrb	r0, [r3, #20]
   11716:	751a      	strb	r2, [r3, #20]
   11718:	7d58      	ldrb	r0, [r3, #21]
   1171a:	755a      	strb	r2, [r3, #21]
   1171c:	7d98      	ldrb	r0, [r3, #22]
   1171e:	759a      	strb	r2, [r3, #22]
   11720:	7dd8      	ldrb	r0, [r3, #23]
   11722:	75da      	strb	r2, [r3, #23]
   11724:	b1b9      	cbz	r1, 11756 <ipc_trace_handle+0x62>
   11726:	3901      	subs	r1, #1
   11728:	2903      	cmp	r1, #3
   1172a:	d814      	bhi.n	11756 <ipc_trace_handle+0x62>
   1172c:	e8df f011 	tbh	[pc, r1, lsl #1]
   11730:	010300d6 	.word	0x010300d6
   11734:	00160004 	.word	0x00160004
   11738:	2501      	movs	r5, #1
   1173a:	2003      	movs	r0, #3
   1173c:	2200      	movs	r2, #0
   1173e:	f06f 015f 	mvn.w	r1, #95	; 0x5f
   11742:	4c9f      	ldr	r4, [pc, #636]	; (119c0 <ipc_trace_handle+0x2cc>)
   11744:	7025      	strb	r5, [r4, #0]
   11746:	7a1c      	ldrb	r4, [r3, #8]
   11748:	7218      	strb	r0, [r3, #8]
   1174a:	7a58      	ldrb	r0, [r3, #9]
   1174c:	725a      	strb	r2, [r3, #9]
   1174e:	7a98      	ldrb	r0, [r3, #10]
   11750:	729a      	strb	r2, [r3, #10]
   11752:	7ada      	ldrb	r2, [r3, #11]
   11754:	72d9      	strb	r1, [r3, #11]
   11756:	b003      	add	sp, #12
   11758:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1175c:	2104      	movs	r1, #4
   1175e:	2200      	movs	r2, #0
   11760:	f06f 005f 	mvn.w	r0, #95	; 0x5f
   11764:	7a1c      	ldrb	r4, [r3, #8]
   11766:	7219      	strb	r1, [r3, #8]
   11768:	7a59      	ldrb	r1, [r3, #9]
   1176a:	725a      	strb	r2, [r3, #9]
   1176c:	4994      	ldr	r1, [pc, #592]	; (119c0 <ipc_trace_handle+0x2cc>)
   1176e:	7a9c      	ldrb	r4, [r3, #10]
   11770:	729a      	strb	r2, [r3, #10]
   11772:	7adc      	ldrb	r4, [r3, #11]
   11774:	72d8      	strb	r0, [r3, #11]
   11776:	700a      	strb	r2, [r1, #0]
   11778:	780b      	ldrb	r3, [r1, #0]
   1177a:	2b00      	cmp	r3, #0
   1177c:	f000 8117 	beq.w	119ae <ipc_trace_handle+0x2ba>
   11780:	4b90      	ldr	r3, [pc, #576]	; (119c4 <ipc_trace_handle+0x2d0>)
   11782:	681c      	ldr	r4, [r3, #0]
   11784:	68a2      	ldr	r2, [r4, #8]
   11786:	6863      	ldr	r3, [r4, #4]
   11788:	429a      	cmp	r2, r3
   1178a:	d02d      	beq.n	117e8 <ipc_trace_handle+0xf4>
   1178c:	f64b 63ef 	movw	r3, #48879	; 0xbeef
   11790:	f8ad 3000 	strh.w	r3, [sp]
   11794:	7823      	ldrb	r3, [r4, #0]
   11796:	466e      	mov	r6, sp
   11798:	f88d 3004 	strb.w	r3, [sp, #4]
   1179c:	6863      	ldr	r3, [r4, #4]
   1179e:	2105      	movs	r1, #5
   117a0:	429a      	cmp	r2, r3
   117a2:	bf2a      	itet	cs
   117a4:	6927      	ldrcs	r7, [r4, #16]
   117a6:	1a9f      	subcc	r7, r3, r2
   117a8:	1abf      	subcs	r7, r7, r2
   117aa:	429a      	cmp	r2, r3
   117ac:	bf94      	ite	ls
   117ae:	2500      	movls	r5, #0
   117b0:	68e5      	ldrhi	r5, [r4, #12]
   117b2:	b2bf      	uxth	r7, r7
   117b4:	bf88      	it	hi
   117b6:	1b5b      	subhi	r3, r3, r5
   117b8:	4630      	mov	r0, r6
   117ba:	bf88      	it	hi
   117bc:	b29d      	uxthhi	r5, r3
   117be:	f8ad 7002 	strh.w	r7, [sp, #2]
   117c2:	f008 fa08 	bl	19bd6 <bsd_os_trace_put>
   117c6:	f8bd 1002 	ldrh.w	r1, [sp, #2]
   117ca:	68a0      	ldr	r0, [r4, #8]
   117cc:	f008 fa03 	bl	19bd6 <bsd_os_trace_put>
   117d0:	68a3      	ldr	r3, [r4, #8]
   117d2:	6922      	ldr	r2, [r4, #16]
   117d4:	441f      	add	r7, r3
   117d6:	4297      	cmp	r7, r2
   117d8:	bf08      	it	eq
   117da:	68e3      	ldreq	r3, [r4, #12]
   117dc:	60a7      	str	r7, [r4, #8]
   117de:	bf08      	it	eq
   117e0:	60a3      	streq	r3, [r4, #8]
   117e2:	2d00      	cmp	r5, #0
   117e4:	f040 80d2 	bne.w	1198c <ipc_trace_handle+0x298>
   117e8:	4b77      	ldr	r3, [pc, #476]	; (119c8 <ipc_trace_handle+0x2d4>)
   117ea:	681c      	ldr	r4, [r3, #0]
   117ec:	68a2      	ldr	r2, [r4, #8]
   117ee:	6863      	ldr	r3, [r4, #4]
   117f0:	429a      	cmp	r2, r3
   117f2:	d02d      	beq.n	11850 <ipc_trace_handle+0x15c>
   117f4:	f64b 63ef 	movw	r3, #48879	; 0xbeef
   117f8:	f8ad 3000 	strh.w	r3, [sp]
   117fc:	7823      	ldrb	r3, [r4, #0]
   117fe:	466e      	mov	r6, sp
   11800:	f88d 3004 	strb.w	r3, [sp, #4]
   11804:	6863      	ldr	r3, [r4, #4]
   11806:	2105      	movs	r1, #5
   11808:	429a      	cmp	r2, r3
   1180a:	bf2a      	itet	cs
   1180c:	6927      	ldrcs	r7, [r4, #16]
   1180e:	1a9f      	subcc	r7, r3, r2
   11810:	1abf      	subcs	r7, r7, r2
   11812:	429a      	cmp	r2, r3
   11814:	bf94      	ite	ls
   11816:	2500      	movls	r5, #0
   11818:	68e5      	ldrhi	r5, [r4, #12]
   1181a:	b2bf      	uxth	r7, r7
   1181c:	bf88      	it	hi
   1181e:	1b5b      	subhi	r3, r3, r5
   11820:	4630      	mov	r0, r6
   11822:	bf88      	it	hi
   11824:	b29d      	uxthhi	r5, r3
   11826:	f8ad 7002 	strh.w	r7, [sp, #2]
   1182a:	f008 f9d4 	bl	19bd6 <bsd_os_trace_put>
   1182e:	f8bd 1002 	ldrh.w	r1, [sp, #2]
   11832:	68a0      	ldr	r0, [r4, #8]
   11834:	f008 f9cf 	bl	19bd6 <bsd_os_trace_put>
   11838:	68a3      	ldr	r3, [r4, #8]
   1183a:	6922      	ldr	r2, [r4, #16]
   1183c:	441f      	add	r7, r3
   1183e:	4297      	cmp	r7, r2
   11840:	bf08      	it	eq
   11842:	68e3      	ldreq	r3, [r4, #12]
   11844:	60a7      	str	r7, [r4, #8]
   11846:	bf08      	it	eq
   11848:	60a3      	streq	r3, [r4, #8]
   1184a:	2d00      	cmp	r5, #0
   1184c:	f040 808d 	bne.w	1196a <ipc_trace_handle+0x276>
   11850:	4b5e      	ldr	r3, [pc, #376]	; (119cc <ipc_trace_handle+0x2d8>)
   11852:	681c      	ldr	r4, [r3, #0]
   11854:	68a2      	ldr	r2, [r4, #8]
   11856:	6863      	ldr	r3, [r4, #4]
   11858:	429a      	cmp	r2, r3
   1185a:	f43f af7c 	beq.w	11756 <ipc_trace_handle+0x62>
   1185e:	f64b 63ef 	movw	r3, #48879	; 0xbeef
   11862:	f8ad 3000 	strh.w	r3, [sp]
   11866:	7823      	ldrb	r3, [r4, #0]
   11868:	466e      	mov	r6, sp
   1186a:	f88d 3004 	strb.w	r3, [sp, #4]
   1186e:	6863      	ldr	r3, [r4, #4]
   11870:	2105      	movs	r1, #5
   11872:	429a      	cmp	r2, r3
   11874:	bf2a      	itet	cs
   11876:	6927      	ldrcs	r7, [r4, #16]
   11878:	1a9f      	subcc	r7, r3, r2
   1187a:	1abf      	subcs	r7, r7, r2
   1187c:	429a      	cmp	r2, r3
   1187e:	bf94      	ite	ls
   11880:	2500      	movls	r5, #0
   11882:	68e5      	ldrhi	r5, [r4, #12]
   11884:	b2bf      	uxth	r7, r7
   11886:	bf88      	it	hi
   11888:	1b5b      	subhi	r3, r3, r5
   1188a:	4630      	mov	r0, r6
   1188c:	bf88      	it	hi
   1188e:	b29d      	uxthhi	r5, r3
   11890:	f8ad 7002 	strh.w	r7, [sp, #2]
   11894:	f008 f99f 	bl	19bd6 <bsd_os_trace_put>
   11898:	f8bd 1002 	ldrh.w	r1, [sp, #2]
   1189c:	68a0      	ldr	r0, [r4, #8]
   1189e:	f008 f99a 	bl	19bd6 <bsd_os_trace_put>
   118a2:	68a3      	ldr	r3, [r4, #8]
   118a4:	6922      	ldr	r2, [r4, #16]
   118a6:	441f      	add	r7, r3
   118a8:	4297      	cmp	r7, r2
   118aa:	bf08      	it	eq
   118ac:	68e3      	ldreq	r3, [r4, #12]
   118ae:	60a7      	str	r7, [r4, #8]
   118b0:	bf08      	it	eq
   118b2:	60a3      	streq	r3, [r4, #8]
   118b4:	2d00      	cmp	r5, #0
   118b6:	f43f af4e 	beq.w	11756 <ipc_trace_handle+0x62>
   118ba:	2105      	movs	r1, #5
   118bc:	4630      	mov	r0, r6
   118be:	f8ad 5002 	strh.w	r5, [sp, #2]
   118c2:	f008 f988 	bl	19bd6 <bsd_os_trace_put>
   118c6:	f8bd 1002 	ldrh.w	r1, [sp, #2]
   118ca:	68e0      	ldr	r0, [r4, #12]
   118cc:	f008 f983 	bl	19bd6 <bsd_os_trace_put>
   118d0:	f8bd 2002 	ldrh.w	r2, [sp, #2]
   118d4:	68e3      	ldr	r3, [r4, #12]
   118d6:	4413      	add	r3, r2
   118d8:	60a3      	str	r3, [r4, #8]
   118da:	e73c      	b.n	11756 <ipc_trace_handle+0x62>
   118dc:	4a38      	ldr	r2, [pc, #224]	; (119c0 <ipc_trace_handle+0x2cc>)
   118de:	7811      	ldrb	r1, [r2, #0]
   118e0:	b109      	cbz	r1, 118e6 <ipc_trace_handle+0x1f2>
   118e2:	2100      	movs	r1, #0
   118e4:	7011      	strb	r1, [r2, #0]
   118e6:	68a5      	ldr	r5, [r4, #8]
   118e8:	2d00      	cmp	r5, #0
   118ea:	d039      	beq.n	11960 <ipc_trace_handle+0x26c>
   118ec:	f04f 0c00 	mov.w	ip, #0
   118f0:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 119c8 <ipc_trace_handle+0x2d4>
   118f4:	f8df b0cc 	ldr.w	fp, [pc, #204]	; 119c4 <ipc_trace_handle+0x2d0>
   118f8:	4934      	ldr	r1, [pc, #208]	; (119cc <ipc_trace_handle+0x2d8>)
   118fa:	46e1      	mov	r9, ip
   118fc:	4666      	mov	r6, ip
   118fe:	4662      	mov	r2, ip
   11900:	f8d1 e000 	ldr.w	lr, [r1]
   11904:	f8da 8000 	ldr.w	r8, [sl]
   11908:	f8db 7000 	ldr.w	r7, [fp]
   1190c:	e008      	b.n	11920 <ipc_trace_handle+0x22c>
   1190e:	2963      	cmp	r1, #99	; 0x63
   11910:	d016      	beq.n	11940 <ipc_trace_handle+0x24c>
   11912:	2961      	cmp	r1, #97	; 0x61
   11914:	bf04      	itt	eq
   11916:	4607      	moveq	r7, r0
   11918:	2601      	moveq	r6, #1
   1191a:	3201      	adds	r2, #1
   1191c:	42aa      	cmp	r2, r5
   1191e:	d013      	beq.n	11948 <ipc_trace_handle+0x254>
   11920:	1c91      	adds	r1, r2, #2
   11922:	eb04 0181 	add.w	r1, r4, r1, lsl #2
   11926:	6848      	ldr	r0, [r1, #4]
   11928:	7801      	ldrb	r1, [r0, #0]
   1192a:	2962      	cmp	r1, #98	; 0x62
   1192c:	d1ef      	bne.n	1190e <ipc_trace_handle+0x21a>
   1192e:	4680      	mov	r8, r0
   11930:	f04f 0901 	mov.w	r9, #1
   11934:	e7f1      	b.n	1191a <ipc_trace_handle+0x226>
   11936:	f7fd f9a5 	bl	ec84 <bsd_os_trace_irq_set>
   1193a:	b003      	add	sp, #12
   1193c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11940:	4686      	mov	lr, r0
   11942:	f04f 0c01 	mov.w	ip, #1
   11946:	e7e8      	b.n	1191a <ipc_trace_handle+0x226>
   11948:	bba6      	cbnz	r6, 119b4 <ipc_trace_handle+0x2c0>
   1194a:	f1b9 0f00 	cmp.w	r9, #0
   1194e:	d001      	beq.n	11954 <ipc_trace_handle+0x260>
   11950:	f8ca 8000 	str.w	r8, [sl]
   11954:	f1bc 0f00 	cmp.w	ip, #0
   11958:	d002      	beq.n	11960 <ipc_trace_handle+0x26c>
   1195a:	4a1c      	ldr	r2, [pc, #112]	; (119cc <ipc_trace_handle+0x2d8>)
   1195c:	f8c2 e000 	str.w	lr, [r2]
   11960:	2001      	movs	r0, #1
   11962:	2200      	movs	r2, #0
   11964:	f06f 015f 	mvn.w	r1, #95	; 0x5f
   11968:	e6ed      	b.n	11746 <ipc_trace_handle+0x52>
   1196a:	2105      	movs	r1, #5
   1196c:	4630      	mov	r0, r6
   1196e:	f8ad 5002 	strh.w	r5, [sp, #2]
   11972:	f008 f930 	bl	19bd6 <bsd_os_trace_put>
   11976:	f8bd 1002 	ldrh.w	r1, [sp, #2]
   1197a:	68e0      	ldr	r0, [r4, #12]
   1197c:	f008 f92b 	bl	19bd6 <bsd_os_trace_put>
   11980:	f8bd 2002 	ldrh.w	r2, [sp, #2]
   11984:	68e3      	ldr	r3, [r4, #12]
   11986:	4413      	add	r3, r2
   11988:	60a3      	str	r3, [r4, #8]
   1198a:	e761      	b.n	11850 <ipc_trace_handle+0x15c>
   1198c:	2105      	movs	r1, #5
   1198e:	4630      	mov	r0, r6
   11990:	f8ad 5002 	strh.w	r5, [sp, #2]
   11994:	f008 f91f 	bl	19bd6 <bsd_os_trace_put>
   11998:	f8bd 1002 	ldrh.w	r1, [sp, #2]
   1199c:	68e0      	ldr	r0, [r4, #12]
   1199e:	f008 f91a 	bl	19bd6 <bsd_os_trace_put>
   119a2:	f8bd 2002 	ldrh.w	r2, [sp, #2]
   119a6:	68e3      	ldr	r3, [r4, #12]
   119a8:	4413      	add	r3, r2
   119aa:	60a3      	str	r3, [r4, #8]
   119ac:	e71c      	b.n	117e8 <ipc_trace_handle+0xf4>
   119ae:	f7fd f971 	bl	ec94 <bsd_os_trace_irq_clear>
   119b2:	e6e5      	b.n	11780 <ipc_trace_handle+0x8c>
   119b4:	f8cb 7000 	str.w	r7, [fp]
   119b8:	e7c7      	b.n	1194a <ipc_trace_handle+0x256>
   119ba:	bf00      	nop
   119bc:	200203fc 	.word	0x200203fc
   119c0:	200249d0 	.word	0x200249d0
   119c4:	200203f8 	.word	0x200203f8
   119c8:	200203f0 	.word	0x200203f0
   119cc:	200203f4 	.word	0x200203f4

000119d0 <rpc_trace_coredump_in_progress>:
   119d0:	4b01      	ldr	r3, [pc, #4]	; (119d8 <rpc_trace_coredump_in_progress+0x8>)
   119d2:	7818      	ldrb	r0, [r3, #0]
   119d4:	4770      	bx	lr
   119d6:	bf00      	nop
   119d8:	200249d0 	.word	0x200249d0

000119dc <transport_reset>:
   119dc:	2000      	movs	r0, #0
   119de:	4770      	bx	lr

000119e0 <transport_data_free>:
   119e0:	4b0b      	ldr	r3, [pc, #44]	; (11a10 <transport_data_free+0x30>)
   119e2:	e9d3 2300 	ldrd	r2, r3, [r3]
   119e6:	4413      	add	r3, r2
   119e8:	4298      	cmp	r0, r3
   119ea:	d20d      	bcs.n	11a08 <transport_data_free+0x28>
   119ec:	4282      	cmp	r2, r0
   119ee:	d80b      	bhi.n	11a08 <transport_data_free+0x28>
   119f0:	b510      	push	{r4, lr}
   119f2:	4604      	mov	r4, r0
   119f4:	f000 fd5a 	bl	124ac <rpc_transport_ipc_tx_rpc_ctrl_alloc>
   119f8:	b140      	cbz	r0, 11a0c <transport_data_free+0x2c>
   119fa:	4a06      	ldr	r2, [pc, #24]	; (11a14 <transport_data_free+0x34>)
   119fc:	6084      	str	r4, [r0, #8]
   119fe:	6002      	str	r2, [r0, #0]
   11a00:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   11a04:	f000 bc9a 	b.w	1233c <rpc_transport_ipc_tx_send>
   11a08:	f7fe bbc6 	b.w	10198 <nrf_shared_free>
   11a0c:	bd10      	pop	{r4, pc}
   11a0e:	bf00      	nop
   11a10:	20020400 	.word	0x20020400
   11a14:	00020001 	.word	0x00020001

00011a18 <rpc_transport_ipc_init>:
   11a18:	2800      	cmp	r0, #0
   11a1a:	d02b      	beq.n	11a74 <rpc_transport_ipc_init+0x5c>
   11a1c:	b530      	push	{r4, r5, lr}
   11a1e:	b089      	sub	sp, #36	; 0x24
   11a20:	aa01      	add	r2, sp, #4
   11a22:	4669      	mov	r1, sp
   11a24:	4604      	mov	r4, r0
   11a26:	f000 fb9f 	bl	12168 <rpc_transport_ipc_tx_init>
   11a2a:	4603      	mov	r3, r0
   11a2c:	b140      	cbz	r0, 11a40 <rpc_transport_ipc_init+0x28>
   11a2e:	4a13      	ldr	r2, [pc, #76]	; (11a7c <rpc_transport_ipc_init+0x64>)
   11a30:	f104 0028 	add.w	r0, r4, #40	; 0x28
   11a34:	c803      	ldmia	r0, {r0, r1}
   11a36:	e882 0003 	stmia.w	r2, {r0, r1}
   11a3a:	4618      	mov	r0, r3
   11a3c:	b009      	add	sp, #36	; 0x24
   11a3e:	bd30      	pop	{r4, r5, pc}
   11a40:	e9dd 1200 	ldrd	r1, r2, [sp]
   11a44:	4620      	mov	r0, r4
   11a46:	f000 f84b 	bl	11ae0 <rpc_transport_ipc_rx_init>
   11a4a:	4603      	mov	r3, r0
   11a4c:	2800      	cmp	r0, #0
   11a4e:	d1ee      	bne.n	11a2e <rpc_transport_ipc_init+0x16>
   11a50:	4b0b      	ldr	r3, [pc, #44]	; (11a80 <rpc_transport_ipc_init+0x68>)
   11a52:	490c      	ldr	r1, [pc, #48]	; (11a84 <rpc_transport_ipc_init+0x6c>)
   11a54:	480c      	ldr	r0, [pc, #48]	; (11a88 <rpc_transport_ipc_init+0x70>)
   11a56:	4a0d      	ldr	r2, [pc, #52]	; (11a8c <rpc_transport_ipc_init+0x74>)
   11a58:	9303      	str	r3, [sp, #12]
   11a5a:	4d0d      	ldr	r5, [pc, #52]	; (11a90 <rpc_transport_ipc_init+0x78>)
   11a5c:	4b0d      	ldr	r3, [pc, #52]	; (11a94 <rpc_transport_ipc_init+0x7c>)
   11a5e:	9104      	str	r1, [sp, #16]
   11a60:	9005      	str	r0, [sp, #20]
   11a62:	490d      	ldr	r1, [pc, #52]	; (11a98 <rpc_transport_ipc_init+0x80>)
   11a64:	a802      	add	r0, sp, #8
   11a66:	9307      	str	r3, [sp, #28]
   11a68:	9506      	str	r5, [sp, #24]
   11a6a:	9202      	str	r2, [sp, #8]
   11a6c:	f003 ff44 	bl	158f8 <rpc_transport_register>
   11a70:	4603      	mov	r3, r0
   11a72:	e7dc      	b.n	11a2e <rpc_transport_ipc_init+0x16>
   11a74:	230e      	movs	r3, #14
   11a76:	4618      	mov	r0, r3
   11a78:	4770      	bx	lr
   11a7a:	bf00      	nop
   11a7c:	20020400 	.word	0x20020400
   11a80:	0001243d 	.word	0x0001243d
   11a84:	0001250d 	.word	0x0001250d
   11a88:	000120fd 	.word	0x000120fd
   11a8c:	0001233d 	.word	0x0001233d
   11a90:	000119e1 	.word	0x000119e1
   11a94:	000119dd 	.word	0x000119dd
   11a98:	20020408 	.word	0x20020408

00011a9c <rpc_transport_rx_handle>:
   11a9c:	b160      	cbz	r0, 11ab8 <rpc_transport_rx_handle+0x1c>
   11a9e:	b508      	push	{r3, lr}
   11aa0:	6843      	ldr	r3, [r0, #4]
   11aa2:	b2db      	uxtb	r3, r3
   11aa4:	2b02      	cmp	r3, #2
   11aa6:	d00e      	beq.n	11ac6 <rpc_transport_rx_handle+0x2a>
   11aa8:	6803      	ldr	r3, [r0, #0]
   11aaa:	0c1b      	lsrs	r3, r3, #16
   11aac:	2b02      	cmp	r3, #2
   11aae:	d005      	beq.n	11abc <rpc_transport_rx_handle+0x20>
   11ab0:	2b04      	cmp	r3, #4
   11ab2:	d00e      	beq.n	11ad2 <rpc_transport_rx_handle+0x36>
   11ab4:	2000      	movs	r0, #0
   11ab6:	bd08      	pop	{r3, pc}
   11ab8:	2000      	movs	r0, #0
   11aba:	4770      	bx	lr
   11abc:	6880      	ldr	r0, [r0, #8]
   11abe:	f7fe fb6b 	bl	10198 <nrf_shared_free>
   11ac2:	2000      	movs	r0, #0
   11ac4:	bd08      	pop	{r3, pc}
   11ac6:	4601      	mov	r1, r0
   11ac8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   11acc:	4803      	ldr	r0, [pc, #12]	; (11adc <rpc_transport_rx_handle+0x40>)
   11ace:	f003 be05 	b.w	156dc <rpc_transport_input>
   11ad2:	4802      	ldr	r0, [pc, #8]	; (11adc <rpc_transport_rx_handle+0x40>)
   11ad4:	f003 ff70 	bl	159b8 <rpc_transport_unregister>
   11ad8:	2000      	movs	r0, #0
   11ada:	bd08      	pop	{r3, pc}
   11adc:	20020408 	.word	0x20020408

00011ae0 <rpc_transport_ipc_rx_init>:
   11ae0:	2800      	cmp	r0, #0
   11ae2:	f000 80ff 	beq.w	11ce4 <rpc_transport_ipc_rx_init+0x204>
   11ae6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11aea:	6805      	ldr	r5, [r0, #0]
   11aec:	b095      	sub	sp, #84	; 0x54
   11aee:	2d00      	cmp	r5, #0
   11af0:	f000 80ee 	beq.w	11cd0 <rpc_transport_ipc_rx_init+0x1f0>
   11af4:	6883      	ldr	r3, [r0, #8]
   11af6:	2b00      	cmp	r3, #0
   11af8:	f000 80ea 	beq.w	11cd0 <rpc_transport_ipc_rx_init+0x1f0>
   11afc:	6907      	ldr	r7, [r0, #16]
   11afe:	2f00      	cmp	r7, #0
   11b00:	f000 80e6 	beq.w	11cd0 <rpc_transport_ipc_rx_init+0x1f0>
   11b04:	6a84      	ldr	r4, [r0, #40]	; 0x28
   11b06:	2c00      	cmp	r4, #0
   11b08:	f000 80e2 	beq.w	11cd0 <rpc_transport_ipc_rx_init+0x1f0>
   11b0c:	6844      	ldr	r4, [r0, #4]
   11b0e:	2c1b      	cmp	r4, #27
   11b10:	f240 80e3 	bls.w	11cda <rpc_transport_ipc_rx_init+0x1fa>
   11b14:	68c4      	ldr	r4, [r0, #12]
   11b16:	2c0b      	cmp	r4, #11
   11b18:	f240 80df 	bls.w	11cda <rpc_transport_ipc_rx_init+0x1fa>
   11b1c:	f8d0 e014 	ldr.w	lr, [r0, #20]
   11b20:	f1be 0f17 	cmp.w	lr, #23
   11b24:	f240 80d9 	bls.w	11cda <rpc_transport_ipc_rx_init+0x1fa>
   11b28:	2600      	movs	r6, #0
   11b2a:	4604      	mov	r4, r0
   11b2c:	486f      	ldr	r0, [pc, #444]	; (11cec <rpc_transport_ipc_rx_init+0x20c>)
   11b2e:	e9cd 1200 	strd	r1, r2, [sp]
   11b32:	f8df a1d8 	ldr.w	sl, [pc, #472]	; 11d0c <rpc_transport_ipc_rx_init+0x22c>
   11b36:	496e      	ldr	r1, [pc, #440]	; (11cf0 <rpc_transport_ipc_rx_init+0x210>)
   11b38:	8006      	strh	r6, [r0, #0]
   11b3a:	6ba0      	ldr	r0, [r4, #56]	; 0x38
   11b3c:	f8df c1d0 	ldr.w	ip, [pc, #464]	; 11d10 <rpc_transport_ipc_rx_init+0x230>
   11b40:	f8df 81d0 	ldr.w	r8, [pc, #464]	; 11d14 <rpc_transport_ipc_rx_init+0x234>
   11b44:	f8df b1d0 	ldr.w	fp, [pc, #464]	; 11d18 <rpc_transport_ipc_rx_init+0x238>
   11b48:	f8df 91d0 	ldr.w	r9, [pc, #464]	; 11d1c <rpc_transport_ipc_rx_init+0x23c>
   11b4c:	4672      	mov	r2, lr
   11b4e:	600e      	str	r6, [r1, #0]
   11b50:	f8ca 0000 	str.w	r0, [sl]
   11b54:	4631      	mov	r1, r6
   11b56:	4638      	mov	r0, r7
   11b58:	f8cc 6000 	str.w	r6, [ip]
   11b5c:	f8cb 3000 	str.w	r3, [fp]
   11b60:	f8c8 6000 	str.w	r6, [r8]
   11b64:	f8c9 6000 	str.w	r6, [r9]
   11b68:	f007 fecc 	bl	19904 <memset>
   11b6c:	69e3      	ldr	r3, [r4, #28]
   11b6e:	4638      	mov	r0, r7
   11b70:	603b      	str	r3, [r7, #0]
   11b72:	69a3      	ldr	r3, [r4, #24]
   11b74:	607b      	str	r3, [r7, #4]
   11b76:	f7ff fcd5 	bl	11524 <ipc_trace_init>
   11b7a:	2201      	movs	r2, #1
   11b7c:	f04f 0c04 	mov.w	ip, #4
   11b80:	4b5c      	ldr	r3, [pc, #368]	; (11cf4 <rpc_transport_ipc_rx_init+0x214>)
   11b82:	495d      	ldr	r1, [pc, #372]	; (11cf8 <rpc_transport_ipc_rx_init+0x218>)
   11b84:	f8c3 5610 	str.w	r5, [r3, #1552]	; 0x610
   11b88:	6809      	ldr	r1, [r1, #0]
   11b8a:	2080      	movs	r0, #128	; 0x80
   11b8c:	9104      	str	r1, [sp, #16]
   11b8e:	495b      	ldr	r1, [pc, #364]	; (11cfc <rpc_transport_ipc_rx_init+0x21c>)
   11b90:	f8dd e010 	ldr.w	lr, [sp, #16]
   11b94:	f8c3 6614 	str.w	r6, [r3, #1556]	; 0x614
   11b98:	6809      	ldr	r1, [r1, #0]
   11b9a:	702e      	strb	r6, [r5, #0]
   11b9c:	9103      	str	r1, [sp, #12]
   11b9e:	706e      	strb	r6, [r5, #1]
   11ba0:	70ee      	strb	r6, [r5, #3]
   11ba2:	70aa      	strb	r2, [r5, #2]
   11ba4:	9903      	ldr	r1, [sp, #12]
   11ba6:	6aa1      	ldr	r1, [r4, #40]	; 0x28
   11ba8:	f8db e000 	ldr.w	lr, [fp]
   11bac:	6069      	str	r1, [r5, #4]
   11bae:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
   11bb0:	9c01      	ldr	r4, [sp, #4]
   11bb2:	60a9      	str	r1, [r5, #8]
   11bb4:	60ec      	str	r4, [r5, #12]
   11bb6:	9c00      	ldr	r4, [sp, #0]
   11bb8:	4951      	ldr	r1, [pc, #324]	; (11d00 <rpc_transport_ipc_rx_init+0x220>)
   11bba:	61af      	str	r7, [r5, #24]
   11bbc:	f8c5 e014 	str.w	lr, [r5, #20]
   11bc0:	612c      	str	r4, [r5, #16]
   11bc2:	f8c3 2590 	str.w	r2, [r3, #1424]	; 0x590
   11bc6:	680c      	ldr	r4, [r1, #0]
   11bc8:	f5a1 6192 	sub.w	r1, r1, #1168	; 0x490
   11bcc:	9405      	str	r4, [sp, #20]
   11bce:	9c05      	ldr	r4, [sp, #20]
   11bd0:	f8c3 c598 	str.w	ip, [r3, #1432]	; 0x598
   11bd4:	f8d1 4498 	ldr.w	r4, [r1, #1176]	; 0x498
   11bd8:	f44f 6780 	mov.w	r7, #1024	; 0x400
   11bdc:	9406      	str	r4, [sp, #24]
   11bde:	9c06      	ldr	r4, [sp, #24]
   11be0:	2410      	movs	r4, #16
   11be2:	f8c3 45a0 	str.w	r4, [r3, #1440]	; 0x5a0
   11be6:	f8d1 44a0 	ldr.w	r4, [r1, #1184]	; 0x4a0
   11bea:	4d46      	ldr	r5, [pc, #280]	; (11d04 <rpc_transport_ipc_rx_init+0x224>)
   11bec:	9407      	str	r4, [sp, #28]
   11bee:	9c07      	ldr	r4, [sp, #28]
   11bf0:	2440      	movs	r4, #64	; 0x40
   11bf2:	f8c3 45a8 	str.w	r4, [r3, #1448]	; 0x5a8
   11bf6:	f8d1 44a8 	ldr.w	r4, [r1, #1192]	; 0x4a8
   11bfa:	9408      	str	r4, [sp, #32]
   11bfc:	9c08      	ldr	r4, [sp, #32]
   11bfe:	f8c3 05ac 	str.w	r0, [r3, #1452]	; 0x5ac
   11c02:	f8d1 04ac 	ldr.w	r0, [r1, #1196]	; 0x4ac
   11c06:	9009      	str	r0, [sp, #36]	; 0x24
   11c08:	9809      	ldr	r0, [sp, #36]	; 0x24
   11c0a:	f8c3 6100 	str.w	r6, [r3, #256]	; 0x100
   11c0e:	6808      	ldr	r0, [r1, #0]
   11c10:	900a      	str	r0, [sp, #40]	; 0x28
   11c12:	980a      	ldr	r0, [sp, #40]	; 0x28
   11c14:	f8c3 6108 	str.w	r6, [r3, #264]	; 0x108
   11c18:	6888      	ldr	r0, [r1, #8]
   11c1a:	900b      	str	r0, [sp, #44]	; 0x2c
   11c1c:	980b      	ldr	r0, [sp, #44]	; 0x2c
   11c1e:	f8c3 6110 	str.w	r6, [r3, #272]	; 0x110
   11c22:	6908      	ldr	r0, [r1, #16]
   11c24:	900c      	str	r0, [sp, #48]	; 0x30
   11c26:	980c      	ldr	r0, [sp, #48]	; 0x30
   11c28:	f8c3 6118 	str.w	r6, [r3, #280]	; 0x118
   11c2c:	6988      	ldr	r0, [r1, #24]
   11c2e:	900d      	str	r0, [sp, #52]	; 0x34
   11c30:	980d      	ldr	r0, [sp, #52]	; 0x34
   11c32:	f8c3 611c 	str.w	r6, [r3, #284]	; 0x11c
   11c36:	69c8      	ldr	r0, [r1, #28]
   11c38:	f501 7101 	add.w	r1, r1, #516	; 0x204
   11c3c:	900e      	str	r0, [sp, #56]	; 0x38
   11c3e:	980e      	ldr	r0, [sp, #56]	; 0x38
   11c40:	f8d3 0304 	ldr.w	r0, [r3, #772]	; 0x304
   11c44:	4310      	orrs	r0, r2
   11c46:	f8c3 0304 	str.w	r0, [r3, #772]	; 0x304
   11c4a:	680c      	ldr	r4, [r1, #0]
   11c4c:	482e      	ldr	r0, [pc, #184]	; (11d08 <rpc_transport_ipc_rx_init+0x228>)
   11c4e:	940f      	str	r4, [sp, #60]	; 0x3c
   11c50:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
   11c52:	f8d3 4304 	ldr.w	r4, [r3, #772]	; 0x304
   11c56:	ea44 040c 	orr.w	r4, r4, ip
   11c5a:	f8c3 4304 	str.w	r4, [r3, #772]	; 0x304
   11c5e:	680c      	ldr	r4, [r1, #0]
   11c60:	9410      	str	r4, [sp, #64]	; 0x40
   11c62:	9c10      	ldr	r4, [sp, #64]	; 0x40
   11c64:	f8d3 4304 	ldr.w	r4, [r3, #772]	; 0x304
   11c68:	f044 0410 	orr.w	r4, r4, #16
   11c6c:	f8c3 4304 	str.w	r4, [r3, #772]	; 0x304
   11c70:	680c      	ldr	r4, [r1, #0]
   11c72:	9411      	str	r4, [sp, #68]	; 0x44
   11c74:	9c11      	ldr	r4, [sp, #68]	; 0x44
   11c76:	f8d3 4304 	ldr.w	r4, [r3, #772]	; 0x304
   11c7a:	f044 0440 	orr.w	r4, r4, #64	; 0x40
   11c7e:	f8c3 4304 	str.w	r4, [r3, #772]	; 0x304
   11c82:	680c      	ldr	r4, [r1, #0]
   11c84:	9412      	str	r4, [sp, #72]	; 0x48
   11c86:	9c12      	ldr	r4, [sp, #72]	; 0x48
   11c88:	f8d3 4304 	ldr.w	r4, [r3, #772]	; 0x304
   11c8c:	f044 0480 	orr.w	r4, r4, #128	; 0x80
   11c90:	f8c3 4304 	str.w	r4, [r3, #772]	; 0x304
   11c94:	f8da 3000 	ldr.w	r3, [sl]
   11c98:	6809      	ldr	r1, [r1, #0]
   11c9a:	015b      	lsls	r3, r3, #5
   11c9c:	9113      	str	r1, [sp, #76]	; 0x4c
   11c9e:	b2db      	uxtb	r3, r3
   11ca0:	9913      	ldr	r1, [sp, #76]	; 0x4c
   11ca2:	f8c8 2000 	str.w	r2, [r8]
   11ca6:	f880 332a 	strb.w	r3, [r0, #810]	; 0x32a
   11caa:	f8c0 7184 	str.w	r7, [r0, #388]	; 0x184
   11cae:	6047      	str	r7, [r0, #4]
   11cb0:	9602      	str	r6, [sp, #8]
   11cb2:	f8c5 6610 	str.w	r6, [r5, #1552]	; 0x610
   11cb6:	f8d5 3610 	ldr.w	r3, [r5, #1552]	; 0x610
   11cba:	9302      	str	r3, [sp, #8]
   11cbc:	9b02      	ldr	r3, [sp, #8]
   11cbe:	f8d8 3000 	ldr.w	r3, [r8]
   11cc2:	2b01      	cmp	r3, #1
   11cc4:	d0fb      	beq.n	11cbe <rpc_transport_ipc_rx_init+0x1de>
   11cc6:	f8d9 0000 	ldr.w	r0, [r9]
   11cca:	b015      	add	sp, #84	; 0x54
   11ccc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11cd0:	f24c 000e 	movw	r0, #49166	; 0xc00e
   11cd4:	b015      	add	sp, #84	; 0x54
   11cd6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11cda:	f24c 0009 	movw	r0, #49161	; 0xc009
   11cde:	b015      	add	sp, #84	; 0x54
   11ce0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11ce4:	f24c 000e 	movw	r0, #49166	; 0xc00e
   11ce8:	4770      	bx	lr
   11cea:	bf00      	nop
   11cec:	200249c2 	.word	0x200249c2
   11cf0:	20020418 	.word	0x20020418
   11cf4:	4002a000 	.word	0x4002a000
   11cf8:	4002a610 	.word	0x4002a610
   11cfc:	4002a614 	.word	0x4002a614
   11d00:	4002a590 	.word	0x4002a590
   11d04:	40005000 	.word	0x40005000
   11d08:	e000e100 	.word	0xe000e100
   11d0c:	20020410 	.word	0x20020410
   11d10:	2002041c 	.word	0x2002041c
   11d14:	20020414 	.word	0x20020414
   11d18:	20020420 	.word	0x20020420
   11d1c:	2002040c 	.word	0x2002040c

00011d20 <IPC_IRQHandler>:
   11d20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11d24:	f44f 6580 	mov.w	r5, #1024	; 0x400
   11d28:	4ca7      	ldr	r4, [pc, #668]	; (11fc8 <IPC_IRQHandler+0x2a8>)
   11d2a:	b087      	sub	sp, #28
   11d2c:	f8c4 5084 	str.w	r5, [r4, #132]	; 0x84
   11d30:	f3bf 8f4f 	dsb	sy
   11d34:	f3bf 8f6f 	isb	sy
   11d38:	4ea4      	ldr	r6, [pc, #656]	; (11fcc <IPC_IRQHandler+0x2ac>)
   11d3a:	f8c4 5184 	str.w	r5, [r4, #388]	; 0x184
   11d3e:	f8d6 330c 	ldr.w	r3, [r6, #780]	; 0x30c
   11d42:	061f      	lsls	r7, r3, #24
   11d44:	f100 80c8 	bmi.w	11ed8 <IPC_IRQHandler+0x1b8>
   11d48:	4ba0      	ldr	r3, [pc, #640]	; (11fcc <IPC_IRQHandler+0x2ac>)
   11d4a:	f8d3 230c 	ldr.w	r2, [r3, #780]	; 0x30c
   11d4e:	07d0      	lsls	r0, r2, #31
   11d50:	f100 80d4 	bmi.w	11efc <IPC_IRQHandler+0x1dc>
   11d54:	f8d3 230c 	ldr.w	r2, [r3, #780]	; 0x30c
   11d58:	f012 0240 	ands.w	r2, r2, #64	; 0x40
   11d5c:	f040 80b6 	bne.w	11ecc <IPC_IRQHandler+0x1ac>
   11d60:	f8d3 130c 	ldr.w	r1, [r3, #780]	; 0x30c
   11d64:	0749      	lsls	r1, r1, #29
   11d66:	f100 80e6 	bmi.w	11f36 <IPC_IRQHandler+0x216>
   11d6a:	f8d3 330c 	ldr.w	r3, [r3, #780]	; 0x30c
   11d6e:	06da      	lsls	r2, r3, #27
   11d70:	f140 809d 	bpl.w	11eae <IPC_IRQHandler+0x18e>
   11d74:	2100      	movs	r1, #0
   11d76:	4a95      	ldr	r2, [pc, #596]	; (11fcc <IPC_IRQHandler+0x2ac>)
   11d78:	4b95      	ldr	r3, [pc, #596]	; (11fd0 <IPC_IRQHandler+0x2b0>)
   11d7a:	f8c2 1110 	str.w	r1, [r2, #272]	; 0x110
   11d7e:	681b      	ldr	r3, [r3, #0]
   11d80:	9304      	str	r3, [sp, #16]
   11d82:	9b04      	ldr	r3, [sp, #16]
   11d84:	f8df 8270 	ldr.w	r8, [pc, #624]	; 11ff8 <IPC_IRQHandler+0x2d8>
   11d88:	4f92      	ldr	r7, [pc, #584]	; (11fd4 <IPC_IRQHandler+0x2b4>)
   11d8a:	f8df 9270 	ldr.w	r9, [pc, #624]	; 11ffc <IPC_IRQHandler+0x2dc>
   11d8e:	f8d8 a000 	ldr.w	sl, [r8]
   11d92:	f8da 1000 	ldr.w	r1, [sl]
   11d96:	2900      	cmp	r1, #0
   11d98:	d03f      	beq.n	11e1a <IPC_IRQHandler+0xfa>
   11d9a:	2200      	movs	r2, #0
   11d9c:	4614      	mov	r4, r2
   11d9e:	e002      	b.n	11da6 <IPC_IRQHandler+0x86>
   11da0:	3401      	adds	r4, #1
   11da2:	428c      	cmp	r4, r1
   11da4:	d227      	bcs.n	11df6 <IPC_IRQHandler+0xd6>
   11da6:	eb0a 05c4 	add.w	r5, sl, r4, lsl #3
   11daa:	68ab      	ldr	r3, [r5, #8]
   11dac:	2b00      	cmp	r3, #0
   11dae:	d0f7      	beq.n	11da0 <IPC_IRQHandler+0x80>
   11db0:	686e      	ldr	r6, [r5, #4]
   11db2:	b2f6      	uxtb	r6, r6
   11db4:	2e01      	cmp	r6, #1
   11db6:	d1f3      	bne.n	11da0 <IPC_IRQHandler+0x80>
   11db8:	6868      	ldr	r0, [r5, #4]
   11dba:	f8b9 3000 	ldrh.w	r3, [r9]
   11dbe:	ebb3 4f10 	cmp.w	r3, r0, lsr #16
   11dc2:	d1ed      	bne.n	11da0 <IPC_IRQHandler+0x80>
   11dc4:	686a      	ldr	r2, [r5, #4]
   11dc6:	3301      	adds	r3, #1
   11dc8:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
   11dcc:	f042 0202 	orr.w	r2, r2, #2
   11dd0:	606a      	str	r2, [r5, #4]
   11dd2:	68a8      	ldr	r0, [r5, #8]
   11dd4:	f8a9 3000 	strh.w	r3, [r9]
   11dd8:	f7ff fe60 	bl	11a9c <rpc_transport_rx_handle>
   11ddc:	4632      	mov	r2, r6
   11dde:	b928      	cbnz	r0, 11dec <IPC_IRQHandler+0xcc>
   11de0:	686b      	ldr	r3, [r5, #4]
   11de2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
   11de6:	f043 0303 	orr.w	r3, r3, #3
   11dea:	606b      	str	r3, [r5, #4]
   11dec:	f8da 1000 	ldr.w	r1, [sl]
   11df0:	3401      	adds	r4, #1
   11df2:	428c      	cmp	r4, r1
   11df4:	d3d7      	bcc.n	11da6 <IPC_IRQHandler+0x86>
   11df6:	2a00      	cmp	r2, #0
   11df8:	d1cd      	bne.n	11d96 <IPC_IRQHandler+0x76>
   11dfa:	b171      	cbz	r1, 11e1a <IPC_IRQHandler+0xfa>
   11dfc:	4613      	mov	r3, r2
   11dfe:	eb0a 02c3 	add.w	r2, sl, r3, lsl #3
   11e02:	6890      	ldr	r0, [r2, #8]
   11e04:	3301      	adds	r3, #1
   11e06:	b130      	cbz	r0, 11e16 <IPC_IRQHandler+0xf6>
   11e08:	f8d2 b004 	ldr.w	fp, [r2, #4]
   11e0c:	fa5f fb8b 	uxtb.w	fp, fp
   11e10:	f1bb 0f01 	cmp.w	fp, #1
   11e14:	d003      	beq.n	11e1e <IPC_IRQHandler+0xfe>
   11e16:	428b      	cmp	r3, r1
   11e18:	d1f1      	bne.n	11dfe <IPC_IRQHandler+0xde>
   11e1a:	f04f 0b00 	mov.w	fp, #0
   11e1e:	f8d7 a000 	ldr.w	sl, [r7]
   11e22:	f8da 2000 	ldr.w	r2, [sl]
   11e26:	2a00      	cmp	r2, #0
   11e28:	d03d      	beq.n	11ea6 <IPC_IRQHandler+0x186>
   11e2a:	2100      	movs	r1, #0
   11e2c:	460c      	mov	r4, r1
   11e2e:	e002      	b.n	11e36 <IPC_IRQHandler+0x116>
   11e30:	3401      	adds	r4, #1
   11e32:	4294      	cmp	r4, r2
   11e34:	d227      	bcs.n	11e86 <IPC_IRQHandler+0x166>
   11e36:	eb0a 05c4 	add.w	r5, sl, r4, lsl #3
   11e3a:	68ab      	ldr	r3, [r5, #8]
   11e3c:	2b00      	cmp	r3, #0
   11e3e:	d0f7      	beq.n	11e30 <IPC_IRQHandler+0x110>
   11e40:	686e      	ldr	r6, [r5, #4]
   11e42:	b2f6      	uxtb	r6, r6
   11e44:	2e01      	cmp	r6, #1
   11e46:	d1f3      	bne.n	11e30 <IPC_IRQHandler+0x110>
   11e48:	6868      	ldr	r0, [r5, #4]
   11e4a:	f8b9 3000 	ldrh.w	r3, [r9]
   11e4e:	ebb3 4f10 	cmp.w	r3, r0, lsr #16
   11e52:	d1ed      	bne.n	11e30 <IPC_IRQHandler+0x110>
   11e54:	686a      	ldr	r2, [r5, #4]
   11e56:	3301      	adds	r3, #1
   11e58:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
   11e5c:	f042 0202 	orr.w	r2, r2, #2
   11e60:	606a      	str	r2, [r5, #4]
   11e62:	68a8      	ldr	r0, [r5, #8]
   11e64:	f8a9 3000 	strh.w	r3, [r9]
   11e68:	f7ff fe18 	bl	11a9c <rpc_transport_rx_handle>
   11e6c:	4631      	mov	r1, r6
   11e6e:	b928      	cbnz	r0, 11e7c <IPC_IRQHandler+0x15c>
   11e70:	686a      	ldr	r2, [r5, #4]
   11e72:	f022 03ff 	bic.w	r3, r2, #255	; 0xff
   11e76:	f043 0303 	orr.w	r3, r3, #3
   11e7a:	606b      	str	r3, [r5, #4]
   11e7c:	f8da 2000 	ldr.w	r2, [sl]
   11e80:	3401      	adds	r4, #1
   11e82:	4294      	cmp	r4, r2
   11e84:	d3d7      	bcc.n	11e36 <IPC_IRQHandler+0x116>
   11e86:	2900      	cmp	r1, #0
   11e88:	d1cd      	bne.n	11e26 <IPC_IRQHandler+0x106>
   11e8a:	b162      	cbz	r2, 11ea6 <IPC_IRQHandler+0x186>
   11e8c:	460b      	mov	r3, r1
   11e8e:	eb0a 01c3 	add.w	r1, sl, r3, lsl #3
   11e92:	6888      	ldr	r0, [r1, #8]
   11e94:	3301      	adds	r3, #1
   11e96:	b120      	cbz	r0, 11ea2 <IPC_IRQHandler+0x182>
   11e98:	6849      	ldr	r1, [r1, #4]
   11e9a:	b2c9      	uxtb	r1, r1
   11e9c:	2901      	cmp	r1, #1
   11e9e:	f43f af76 	beq.w	11d8e <IPC_IRQHandler+0x6e>
   11ea2:	4293      	cmp	r3, r2
   11ea4:	d1f3      	bne.n	11e8e <IPC_IRQHandler+0x16e>
   11ea6:	f1bb 0f00 	cmp.w	fp, #0
   11eaa:	f47f af70 	bne.w	11d8e <IPC_IRQHandler+0x6e>
   11eae:	f44f 6180 	mov.w	r1, #1024	; 0x400
   11eb2:	4b49      	ldr	r3, [pc, #292]	; (11fd8 <IPC_IRQHandler+0x2b8>)
   11eb4:	4a44      	ldr	r2, [pc, #272]	; (11fc8 <IPC_IRQHandler+0x2a8>)
   11eb6:	681b      	ldr	r3, [r3, #0]
   11eb8:	015b      	lsls	r3, r3, #5
   11eba:	b2db      	uxtb	r3, r3
   11ebc:	f882 332a 	strb.w	r3, [r2, #810]	; 0x32a
   11ec0:	f8c2 1184 	str.w	r1, [r2, #388]	; 0x184
   11ec4:	6051      	str	r1, [r2, #4]
   11ec6:	b007      	add	sp, #28
   11ec8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11ecc:	2206      	movs	r2, #6
   11ece:	4b43      	ldr	r3, [pc, #268]	; (11fdc <IPC_IRQHandler+0x2bc>)
   11ed0:	601a      	str	r2, [r3, #0]
   11ed2:	b007      	add	sp, #28
   11ed4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11ed8:	f7ff fc0c 	bl	116f4 <ipc_trace_handle>
   11edc:	f7ff fd78 	bl	119d0 <rpc_trace_coredump_in_progress>
   11ee0:	2800      	cmp	r0, #0
   11ee2:	d149      	bne.n	11f78 <IPC_IRQHandler+0x258>
   11ee4:	4b3e      	ldr	r3, [pc, #248]	; (11fe0 <IPC_IRQHandler+0x2c0>)
   11ee6:	f8c6 011c 	str.w	r0, [r6, #284]	; 0x11c
   11eea:	681b      	ldr	r3, [r3, #0]
   11eec:	9301      	str	r3, [sp, #4]
   11eee:	9b01      	ldr	r3, [sp, #4]
   11ef0:	4b36      	ldr	r3, [pc, #216]	; (11fcc <IPC_IRQHandler+0x2ac>)
   11ef2:	f8d3 230c 	ldr.w	r2, [r3, #780]	; 0x30c
   11ef6:	07d0      	lsls	r0, r2, #31
   11ef8:	f57f af2c 	bpl.w	11d54 <IPC_IRQHandler+0x34>
   11efc:	2000      	movs	r0, #0
   11efe:	f248 0202 	movw	r2, #32770	; 0x8002
   11f02:	4938      	ldr	r1, [pc, #224]	; (11fe4 <IPC_IRQHandler+0x2c4>)
   11f04:	f8c3 0100 	str.w	r0, [r3, #256]	; 0x100
   11f08:	6809      	ldr	r1, [r1, #0]
   11f0a:	9102      	str	r1, [sp, #8]
   11f0c:	9902      	ldr	r1, [sp, #8]
   11f0e:	f8d3 3614 	ldr.w	r3, [r3, #1556]	; 0x614
   11f12:	4293      	cmp	r3, r2
   11f14:	d040      	beq.n	11f98 <IPC_IRQHandler+0x278>
   11f16:	d81e      	bhi.n	11f56 <IPC_IRQHandler+0x236>
   11f18:	2b00      	cmp	r3, #0
   11f1a:	d04f      	beq.n	11fbc <IPC_IRQHandler+0x29c>
   11f1c:	2b02      	cmp	r3, #2
   11f1e:	d942      	bls.n	11fa6 <IPC_IRQHandler+0x286>
   11f20:	f248 0201 	movw	r2, #32769	; 0x8001
   11f24:	4293      	cmp	r3, r2
   11f26:	d149      	bne.n	11fbc <IPC_IRQHandler+0x29c>
   11f28:	2003      	movs	r0, #3
   11f2a:	2207      	movs	r2, #7
   11f2c:	492b      	ldr	r1, [pc, #172]	; (11fdc <IPC_IRQHandler+0x2bc>)
   11f2e:	4b2e      	ldr	r3, [pc, #184]	; (11fe8 <IPC_IRQHandler+0x2c8>)
   11f30:	6008      	str	r0, [r1, #0]
   11f32:	601a      	str	r2, [r3, #0]
   11f34:	e7cd      	b.n	11ed2 <IPC_IRQHandler+0x1b2>
   11f36:	4d29      	ldr	r5, [pc, #164]	; (11fdc <IPC_IRQHandler+0x2bc>)
   11f38:	6829      	ldr	r1, [r5, #0]
   11f3a:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
   11f3e:	2901      	cmp	r1, #1
   11f40:	492a      	ldr	r1, [pc, #168]	; (11fec <IPC_IRQHandler+0x2cc>)
   11f42:	d05d      	beq.n	12000 <IPC_IRQHandler+0x2e0>
   11f44:	680a      	ldr	r2, [r1, #0]
   11f46:	9203      	str	r2, [sp, #12]
   11f48:	9a03      	ldr	r2, [sp, #12]
   11f4a:	f8d3 330c 	ldr.w	r3, [r3, #780]	; 0x30c
   11f4e:	06db      	lsls	r3, r3, #27
   11f50:	f53f af10 	bmi.w	11d74 <IPC_IRQHandler+0x54>
   11f54:	e716      	b.n	11d84 <IPC_IRQHandler+0x64>
   11f56:	4a26      	ldr	r2, [pc, #152]	; (11ff0 <IPC_IRQHandler+0x2d0>)
   11f58:	4293      	cmp	r3, r2
   11f5a:	d814      	bhi.n	11f86 <IPC_IRQHandler+0x266>
   11f5c:	f1b3 6f88 	cmp.w	r3, #71303168	; 0x4400000
   11f60:	d814      	bhi.n	11f8c <IPC_IRQHandler+0x26c>
   11f62:	f248 0203 	movw	r2, #32771	; 0x8003
   11f66:	4293      	cmp	r3, r2
   11f68:	d128      	bne.n	11fbc <IPC_IRQHandler+0x29c>
   11f6a:	2003      	movs	r0, #3
   11f6c:	2204      	movs	r2, #4
   11f6e:	491b      	ldr	r1, [pc, #108]	; (11fdc <IPC_IRQHandler+0x2bc>)
   11f70:	4b1d      	ldr	r3, [pc, #116]	; (11fe8 <IPC_IRQHandler+0x2c8>)
   11f72:	6008      	str	r0, [r1, #0]
   11f74:	601a      	str	r2, [r3, #0]
   11f76:	e7ac      	b.n	11ed2 <IPC_IRQHandler+0x1b2>
   11f78:	23e0      	movs	r3, #224	; 0xe0
   11f7a:	f884 332a 	strb.w	r3, [r4, #810]	; 0x32a
   11f7e:	6065      	str	r5, [r4, #4]
   11f80:	b007      	add	sp, #28
   11f82:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11f86:	4a1b      	ldr	r2, [pc, #108]	; (11ff4 <IPC_IRQHandler+0x2d4>)
   11f88:	4293      	cmp	r3, r2
   11f8a:	d117      	bne.n	11fbc <IPC_IRQHandler+0x29c>
   11f8c:	2003      	movs	r0, #3
   11f8e:	4913      	ldr	r1, [pc, #76]	; (11fdc <IPC_IRQHandler+0x2bc>)
   11f90:	4a15      	ldr	r2, [pc, #84]	; (11fe8 <IPC_IRQHandler+0x2c8>)
   11f92:	6008      	str	r0, [r1, #0]
   11f94:	6013      	str	r3, [r2, #0]
   11f96:	e79c      	b.n	11ed2 <IPC_IRQHandler+0x1b2>
   11f98:	2003      	movs	r0, #3
   11f9a:	2206      	movs	r2, #6
   11f9c:	490f      	ldr	r1, [pc, #60]	; (11fdc <IPC_IRQHandler+0x2bc>)
   11f9e:	4b12      	ldr	r3, [pc, #72]	; (11fe8 <IPC_IRQHandler+0x2c8>)
   11fa0:	6008      	str	r0, [r1, #0]
   11fa2:	601a      	str	r2, [r3, #0]
   11fa4:	e795      	b.n	11ed2 <IPC_IRQHandler+0x1b2>
   11fa6:	2303      	movs	r3, #3
   11fa8:	4618      	mov	r0, r3
   11faa:	490c      	ldr	r1, [pc, #48]	; (11fdc <IPC_IRQHandler+0x2bc>)
   11fac:	4a0e      	ldr	r2, [pc, #56]	; (11fe8 <IPC_IRQHandler+0x2c8>)
   11fae:	600b      	str	r3, [r1, #0]
   11fb0:	6013      	str	r3, [r2, #0]
   11fb2:	b007      	add	sp, #28
   11fb4:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11fb8:	f7ff b910 	b.w	111dc <rpc_transport_ipc_fault_handler>
   11fbc:	2303      	movs	r3, #3
   11fbe:	4907      	ldr	r1, [pc, #28]	; (11fdc <IPC_IRQHandler+0x2bc>)
   11fc0:	4a09      	ldr	r2, [pc, #36]	; (11fe8 <IPC_IRQHandler+0x2c8>)
   11fc2:	600b      	str	r3, [r1, #0]
   11fc4:	6013      	str	r3, [r2, #0]
   11fc6:	e784      	b.n	11ed2 <IPC_IRQHandler+0x1b2>
   11fc8:	e000e100 	.word	0xe000e100
   11fcc:	4002a000 	.word	0x4002a000
   11fd0:	4002a110 	.word	0x4002a110
   11fd4:	20020418 	.word	0x20020418
   11fd8:	20020410 	.word	0x20020410
   11fdc:	20020414 	.word	0x20020414
   11fe0:	4002a11c 	.word	0x4002a11c
   11fe4:	4002a100 	.word	0x4002a100
   11fe8:	2002040c 	.word	0x2002040c
   11fec:	4002a108 	.word	0x4002a108
   11ff0:	04400004 	.word	0x04400004
   11ff4:	05500001 	.word	0x05500001
   11ff8:	2002041c 	.word	0x2002041c
   11ffc:	200249c2 	.word	0x200249c2
   12000:	4a37      	ldr	r2, [pc, #220]	; (120e0 <IPC_IRQHandler+0x3c0>)
   12002:	680b      	ldr	r3, [r1, #0]
   12004:	6812      	ldr	r2, [r2, #0]
   12006:	9305      	str	r3, [sp, #20]
   12008:	6893      	ldr	r3, [r2, #8]
   1200a:	4836      	ldr	r0, [pc, #216]	; (120e4 <IPC_IRQHandler+0x3c4>)
   1200c:	4936      	ldr	r1, [pc, #216]	; (120e8 <IPC_IRQHandler+0x3c8>)
   1200e:	6003      	str	r3, [r0, #0]
   12010:	6854      	ldr	r4, [r2, #4]
   12012:	9a05      	ldr	r2, [sp, #20]
   12014:	600c      	str	r4, [r1, #0]
   12016:	b16b      	cbz	r3, 12034 <IPC_IRQHandler+0x314>
   12018:	b164      	cbz	r4, 12034 <IPC_IRQHandler+0x314>
   1201a:	681b      	ldr	r3, [r3, #0]
   1201c:	2b10      	cmp	r3, #16
   1201e:	d802      	bhi.n	12026 <IPC_IRQHandler+0x306>
   12020:	6822      	ldr	r2, [r4, #0]
   12022:	2a10      	cmp	r2, #16
   12024:	d90c      	bls.n	12040 <IPC_IRQHandler+0x320>
   12026:	2103      	movs	r1, #3
   12028:	f24c 0206 	movw	r2, #49158	; 0xc006
   1202c:	4b2f      	ldr	r3, [pc, #188]	; (120ec <IPC_IRQHandler+0x3cc>)
   1202e:	6029      	str	r1, [r5, #0]
   12030:	601a      	str	r2, [r3, #0]
   12032:	e74e      	b.n	11ed2 <IPC_IRQHandler+0x1b2>
   12034:	2103      	movs	r1, #3
   12036:	2210      	movs	r2, #16
   12038:	4b2c      	ldr	r3, [pc, #176]	; (120ec <IPC_IRQHandler+0x3cc>)
   1203a:	6029      	str	r1, [r5, #0]
   1203c:	601a      	str	r2, [r3, #0]
   1203e:	e748      	b.n	11ed2 <IPC_IRQHandler+0x1b2>
   12040:	f8df 80b4 	ldr.w	r8, [pc, #180]	; 120f8 <IPC_IRQHandler+0x3d8>
   12044:	2a00      	cmp	r2, #0
   12046:	d042      	beq.n	120ce <IPC_IRQHandler+0x3ae>
   12048:	2300      	movs	r3, #0
   1204a:	f104 0904 	add.w	r9, r4, #4
   1204e:	461e      	mov	r6, r3
   12050:	e002      	b.n	12058 <IPC_IRQHandler+0x338>
   12052:	3601      	adds	r6, #1
   12054:	4296      	cmp	r6, r2
   12056:	d22a      	bcs.n	120ae <IPC_IRQHandler+0x38e>
   12058:	00f7      	lsls	r7, r6, #3
   1205a:	19e1      	adds	r1, r4, r7
   1205c:	6888      	ldr	r0, [r1, #8]
   1205e:	2800      	cmp	r0, #0
   12060:	d0f7      	beq.n	12052 <IPC_IRQHandler+0x332>
   12062:	f8d1 a004 	ldr.w	sl, [r1, #4]
   12066:	fa5f fa8a 	uxtb.w	sl, sl
   1206a:	f1ba 0f01 	cmp.w	sl, #1
   1206e:	d1f0      	bne.n	12052 <IPC_IRQHandler+0x332>
   12070:	f8d1 c004 	ldr.w	ip, [r1, #4]
   12074:	f8b8 0000 	ldrh.w	r0, [r8]
   12078:	ebb0 4f1c 	cmp.w	r0, ip, lsr #16
   1207c:	d1e9      	bne.n	12052 <IPC_IRQHandler+0x332>
   1207e:	684b      	ldr	r3, [r1, #4]
   12080:	1c42      	adds	r2, r0, #1
   12082:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
   12086:	f043 0302 	orr.w	r3, r3, #2
   1208a:	604b      	str	r3, [r1, #4]
   1208c:	6888      	ldr	r0, [r1, #8]
   1208e:	f8a8 2000 	strh.w	r2, [r8]
   12092:	f7ff fd03 	bl	11a9c <rpc_transport_rx_handle>
   12096:	4653      	mov	r3, sl
   12098:	b938      	cbnz	r0, 120aa <IPC_IRQHandler+0x38a>
   1209a:	f859 2007 	ldr.w	r2, [r9, r7]
   1209e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
   120a2:	f042 0203 	orr.w	r2, r2, #3
   120a6:	f849 2007 	str.w	r2, [r9, r7]
   120aa:	6822      	ldr	r2, [r4, #0]
   120ac:	e7d1      	b.n	12052 <IPC_IRQHandler+0x332>
   120ae:	2b00      	cmp	r3, #0
   120b0:	d1c8      	bne.n	12044 <IPC_IRQHandler+0x324>
   120b2:	b912      	cbnz	r2, 120ba <IPC_IRQHandler+0x39a>
   120b4:	e00b      	b.n	120ce <IPC_IRQHandler+0x3ae>
   120b6:	4293      	cmp	r3, r2
   120b8:	d009      	beq.n	120ce <IPC_IRQHandler+0x3ae>
   120ba:	eb04 01c3 	add.w	r1, r4, r3, lsl #3
   120be:	6888      	ldr	r0, [r1, #8]
   120c0:	3301      	adds	r3, #1
   120c2:	2800      	cmp	r0, #0
   120c4:	d0f7      	beq.n	120b6 <IPC_IRQHandler+0x396>
   120c6:	6849      	ldr	r1, [r1, #4]
   120c8:	b2c9      	uxtb	r1, r1
   120ca:	2901      	cmp	r1, #1
   120cc:	d1f3      	bne.n	120b6 <IPC_IRQHandler+0x396>
   120ce:	2002      	movs	r0, #2
   120d0:	4b07      	ldr	r3, [pc, #28]	; (120f0 <IPC_IRQHandler+0x3d0>)
   120d2:	f44f 6180 	mov.w	r1, #1024	; 0x400
   120d6:	4a07      	ldr	r2, [pc, #28]	; (120f4 <IPC_IRQHandler+0x3d4>)
   120d8:	681b      	ldr	r3, [r3, #0]
   120da:	6028      	str	r0, [r5, #0]
   120dc:	e6ec      	b.n	11eb8 <IPC_IRQHandler+0x198>
   120de:	bf00      	nop
   120e0:	20020420 	.word	0x20020420
   120e4:	2002041c 	.word	0x2002041c
   120e8:	20020418 	.word	0x20020418
   120ec:	2002040c 	.word	0x2002040c
   120f0:	20020410 	.word	0x20020410
   120f4:	e000e100 	.word	0xe000e100
   120f8:	200249c2 	.word	0x200249c2

000120fc <rpc_transport_msg_free>:
   120fc:	b430      	push	{r4, r5}
   120fe:	4b18      	ldr	r3, [pc, #96]	; (12160 <rpc_transport_msg_free+0x64>)
   12100:	681c      	ldr	r4, [r3, #0]
   12102:	6825      	ldr	r5, [r4, #0]
   12104:	b16d      	cbz	r5, 12122 <rpc_transport_msg_free+0x26>
   12106:	68a3      	ldr	r3, [r4, #8]
   12108:	4283      	cmp	r3, r0
   1210a:	d027      	beq.n	1215c <rpc_transport_msg_free+0x60>
   1210c:	2300      	movs	r3, #0
   1210e:	e002      	b.n	12116 <rpc_transport_msg_free+0x1a>
   12110:	6889      	ldr	r1, [r1, #8]
   12112:	4281      	cmp	r1, r0
   12114:	d019      	beq.n	1214a <rpc_transport_msg_free+0x4e>
   12116:	3301      	adds	r3, #1
   12118:	00da      	lsls	r2, r3, #3
   1211a:	42ab      	cmp	r3, r5
   1211c:	eb04 0102 	add.w	r1, r4, r2
   12120:	d1f6      	bne.n	12110 <rpc_transport_msg_free+0x14>
   12122:	4b10      	ldr	r3, [pc, #64]	; (12164 <rpc_transport_msg_free+0x68>)
   12124:	681c      	ldr	r4, [r3, #0]
   12126:	6825      	ldr	r5, [r4, #0]
   12128:	b16d      	cbz	r5, 12146 <rpc_transport_msg_free+0x4a>
   1212a:	68a3      	ldr	r3, [r4, #8]
   1212c:	4283      	cmp	r3, r0
   1212e:	d015      	beq.n	1215c <rpc_transport_msg_free+0x60>
   12130:	2300      	movs	r3, #0
   12132:	e002      	b.n	1213a <rpc_transport_msg_free+0x3e>
   12134:	6889      	ldr	r1, [r1, #8]
   12136:	4281      	cmp	r1, r0
   12138:	d007      	beq.n	1214a <rpc_transport_msg_free+0x4e>
   1213a:	3301      	adds	r3, #1
   1213c:	00da      	lsls	r2, r3, #3
   1213e:	429d      	cmp	r5, r3
   12140:	eb04 0102 	add.w	r1, r4, r2
   12144:	d1f6      	bne.n	12134 <rpc_transport_msg_free+0x38>
   12146:	bc30      	pop	{r4, r5}
   12148:	4770      	bx	lr
   1214a:	3204      	adds	r2, #4
   1214c:	58a3      	ldr	r3, [r4, r2]
   1214e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
   12152:	f043 0303 	orr.w	r3, r3, #3
   12156:	50a3      	str	r3, [r4, r2]
   12158:	bc30      	pop	{r4, r5}
   1215a:	4770      	bx	lr
   1215c:	2204      	movs	r2, #4
   1215e:	e7f5      	b.n	1214c <rpc_transport_msg_free+0x50>
   12160:	2002041c 	.word	0x2002041c
   12164:	20020418 	.word	0x20020418

00012168 <rpc_transport_ipc_tx_init>:
   12168:	2800      	cmp	r0, #0
   1216a:	f000 80b8 	beq.w	122de <rpc_transport_ipc_tx_init+0x176>
   1216e:	2900      	cmp	r1, #0
   12170:	f000 80b5 	beq.w	122de <rpc_transport_ipc_tx_init+0x176>
   12174:	2a00      	cmp	r2, #0
   12176:	f000 80b2 	beq.w	122de <rpc_transport_ipc_tx_init+0x176>
   1217a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1217e:	6a04      	ldr	r4, [r0, #32]
   12180:	b085      	sub	sp, #20
   12182:	2c00      	cmp	r4, #0
   12184:	f000 80a6 	beq.w	122d4 <rpc_transport_ipc_tx_init+0x16c>
   12188:	6a40      	ldr	r0, [r0, #36]	; 0x24
   1218a:	2800      	cmp	r0, #0
   1218c:	f000 80a2 	beq.w	122d4 <rpc_transport_ipc_tx_init+0x16c>
   12190:	f642 4587 	movw	r5, #11399	; 0x2c87
   12194:	f04f 0a00 	mov.w	sl, #0
   12198:	4e55      	ldr	r6, [pc, #340]	; (122f0 <rpc_transport_ipc_tx_init+0x188>)
   1219a:	42a8      	cmp	r0, r5
   1219c:	f886 a000 	strb.w	sl, [r6]
   121a0:	f240 80a0 	bls.w	122e4 <rpc_transport_ipc_tx_init+0x17c>
   121a4:	2708      	movs	r7, #8
   121a6:	f8df 9180 	ldr.w	r9, [pc, #384]	; 12328 <rpc_transport_ipc_tx_init+0x1c0>
   121aa:	4620      	mov	r0, r4
   121ac:	4616      	mov	r6, r2
   121ae:	460d      	mov	r5, r1
   121b0:	2244      	movs	r2, #68	; 0x44
   121b2:	4651      	mov	r1, sl
   121b4:	f8c9 4000 	str.w	r4, [r9]
   121b8:	f007 fba4 	bl	19904 <memset>
   121bc:	f8d9 2000 	ldr.w	r2, [r9]
   121c0:	f104 0344 	add.w	r3, r4, #68	; 0x44
   121c4:	f8df 8164 	ldr.w	r8, [pc, #356]	; 1232c <rpc_transport_ipc_tx_init+0x1c4>
   121c8:	f882 a001 	strb.w	sl, [r2, #1]
   121cc:	f882 a002 	strb.w	sl, [r2, #2]
   121d0:	f882 a003 	strb.w	sl, [r2, #3]
   121d4:	7017      	strb	r7, [r2, #0]
   121d6:	4618      	mov	r0, r3
   121d8:	2244      	movs	r2, #68	; 0x44
   121da:	4651      	mov	r1, sl
   121dc:	f8c8 3000 	str.w	r3, [r8]
   121e0:	f007 fb90 	bl	19904 <memset>
   121e4:	f8d8 2000 	ldr.w	r2, [r8]
   121e8:	f104 0388 	add.w	r3, r4, #136	; 0x88
   121ec:	f8df b140 	ldr.w	fp, [pc, #320]	; 12330 <rpc_transport_ipc_tx_init+0x1c8>
   121f0:	7017      	strb	r7, [r2, #0]
   121f2:	f882 a001 	strb.w	sl, [r2, #1]
   121f6:	f882 a002 	strb.w	sl, [r2, #2]
   121fa:	f882 a003 	strb.w	sl, [r2, #3]
   121fe:	4618      	mov	r0, r3
   12200:	f44f 7200 	mov.w	r2, #512	; 0x200
   12204:	4651      	mov	r1, sl
   12206:	f8cb 3000 	str.w	r3, [fp]
   1220a:	f007 fb7b 	bl	19904 <memset>
   1220e:	4b39      	ldr	r3, [pc, #228]	; (122f4 <rpc_transport_ipc_tx_init+0x18c>)
   12210:	f504 7c22 	add.w	ip, r4, #648	; 0x288
   12214:	f8c3 c000 	str.w	ip, [r3]
   12218:	4651      	mov	r1, sl
   1221a:	4660      	mov	r0, ip
   1221c:	f44f 7200 	mov.w	r2, #512	; 0x200
   12220:	f007 fb70 	bl	19904 <memset>
   12224:	f44f 5c20 	mov.w	ip, #10240	; 0x2800
   12228:	2106      	movs	r1, #6
   1222a:	f04f 0e01 	mov.w	lr, #1
   1222e:	f44f 3001 	mov.w	r0, #132096	; 0x20400
   12232:	f44f 3288 	mov.w	r2, #69632	; 0x11000
   12236:	4b30      	ldr	r3, [pc, #192]	; (122f8 <rpc_transport_ipc_tx_init+0x190>)
   12238:	f504 6491 	add.w	r4, r4, #1160	; 0x488
   1223c:	605c      	str	r4, [r3, #4]
   1223e:	4c2f      	ldr	r4, [pc, #188]	; (122fc <rpc_transport_ipc_tx_init+0x194>)
   12240:	f8c3 c008 	str.w	ip, [r3, #8]
   12244:	8199      	strh	r1, [r3, #12]
   12246:	f8a3 e000 	strh.w	lr, [r3]
   1224a:	4619      	mov	r1, r3
   1224c:	611c      	str	r4, [r3, #16]
   1224e:	4b2c      	ldr	r3, [pc, #176]	; (12300 <rpc_transport_ipc_tx_init+0x198>)
   12250:	f8df c0e0 	ldr.w	ip, [pc, #224]	; 12334 <rpc_transport_ipc_tx_init+0x1cc>
   12254:	6120      	str	r0, [r4, #16]
   12256:	482b      	ldr	r0, [pc, #172]	; (12304 <rpc_transport_ipc_tx_init+0x19c>)
   12258:	6063      	str	r3, [r4, #4]
   1225a:	f503 73c0 	add.w	r3, r3, #384	; 0x180
   1225e:	60a0      	str	r0, [r4, #8]
   12260:	f8c4 c000 	str.w	ip, [r4]
   12264:	4828      	ldr	r0, [pc, #160]	; (12308 <rpc_transport_ipc_tx_init+0x1a0>)
   12266:	60e3      	str	r3, [r4, #12]
   12268:	6162      	str	r2, [r4, #20]
   1226a:	f7fd fe5b 	bl	ff24 <nrf_mem_register>
   1226e:	2800      	cmp	r0, #0
   12270:	d132      	bne.n	122d8 <rpc_transport_ipc_tx_init+0x170>
   12272:	f04f 0c02 	mov.w	ip, #2
   12276:	2420      	movs	r4, #32
   12278:	f8d9 1000 	ldr.w	r1, [r9]
   1227c:	f8db 2000 	ldr.w	r2, [fp]
   12280:	6029      	str	r1, [r5, #0]
   12282:	4b1c      	ldr	r3, [pc, #112]	; (122f4 <rpc_transport_ipc_tx_init+0x18c>)
   12284:	f8d8 1000 	ldr.w	r1, [r8]
   12288:	f8df e0ac 	ldr.w	lr, [pc, #172]	; 12338 <rpc_transport_ipc_tx_init+0x1d0>
   1228c:	4d1f      	ldr	r5, [pc, #124]	; (1230c <rpc_transport_ipc_tx_init+0x1a4>)
   1228e:	6031      	str	r1, [r6, #0]
   12290:	f8ce 2000 	str.w	r2, [lr]
   12294:	681b      	ldr	r3, [r3, #0]
   12296:	491e      	ldr	r1, [pc, #120]	; (12310 <rpc_transport_ipc_tx_init+0x1a8>)
   12298:	f502 7200 	add.w	r2, r2, #512	; 0x200
   1229c:	602a      	str	r2, [r5, #0]
   1229e:	4e1d      	ldr	r6, [pc, #116]	; (12314 <rpc_transport_ipc_tx_init+0x1ac>)
   122a0:	4a1d      	ldr	r2, [pc, #116]	; (12318 <rpc_transport_ipc_tx_init+0x1b0>)
   122a2:	4d1e      	ldr	r5, [pc, #120]	; (1231c <rpc_transport_ipc_tx_init+0x1b4>)
   122a4:	600b      	str	r3, [r1, #0]
   122a6:	f503 7300 	add.w	r3, r3, #512	; 0x200
   122aa:	491d      	ldr	r1, [pc, #116]	; (12320 <rpc_transport_ipc_tx_init+0x1b8>)
   122ac:	6033      	str	r3, [r6, #0]
   122ae:	8028      	strh	r0, [r5, #0]
   122b0:	f8c2 c514 	str.w	ip, [r2, #1300]	; 0x514
   122b4:	6809      	ldr	r1, [r1, #0]
   122b6:	4b1b      	ldr	r3, [pc, #108]	; (12324 <rpc_transport_ipc_tx_init+0x1bc>)
   122b8:	9103      	str	r1, [sp, #12]
   122ba:	9903      	ldr	r1, [sp, #12]
   122bc:	f8c2 751c 	str.w	r7, [r2, #1308]	; 0x51c
   122c0:	6819      	ldr	r1, [r3, #0]
   122c2:	443b      	add	r3, r7
   122c4:	9102      	str	r1, [sp, #8]
   122c6:	9902      	ldr	r1, [sp, #8]
   122c8:	f8c2 4524 	str.w	r4, [r2, #1316]	; 0x524
   122cc:	681b      	ldr	r3, [r3, #0]
   122ce:	9301      	str	r3, [sp, #4]
   122d0:	9b01      	ldr	r3, [sp, #4]
   122d2:	e001      	b.n	122d8 <rpc_transport_ipc_tx_init+0x170>
   122d4:	f24c 0007 	movw	r0, #49159	; 0xc007
   122d8:	b005      	add	sp, #20
   122da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   122de:	f24c 000e 	movw	r0, #49166	; 0xc00e
   122e2:	4770      	bx	lr
   122e4:	f24c 0004 	movw	r0, #49156	; 0xc004
   122e8:	b005      	add	sp, #20
   122ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   122ee:	bf00      	nop
   122f0:	200249d1 	.word	0x200249d1
   122f4:	2002044c 	.word	0x2002044c
   122f8:	20020438 	.word	0x20020438
   122fc:	2002045c 	.word	0x2002045c
   12300:	00040080 	.word	0x00040080
   12304:	00040100 	.word	0x00040100
   12308:	20020424 	.word	0x20020424
   1230c:	20020430 	.word	0x20020430
   12310:	2002042c 	.word	0x2002042c
   12314:	20020428 	.word	0x20020428
   12318:	4002a000 	.word	0x4002a000
   1231c:	200249c4 	.word	0x200249c4
   12320:	4002a514 	.word	0x4002a514
   12324:	4002a51c 	.word	0x4002a51c
   12328:	20020458 	.word	0x20020458
   1232c:	20020450 	.word	0x20020450
   12330:	20020454 	.word	0x20020454
   12334:	00080040 	.word	0x00080040
   12338:	20020434 	.word	0x20020434

0001233c <rpc_transport_ipc_tx_send>:
   1233c:	2800      	cmp	r0, #0
   1233e:	d05f      	beq.n	12400 <rpc_transport_ipc_tx_send+0xc4>
   12340:	b470      	push	{r4, r5, r6}
   12342:	4b33      	ldr	r3, [pc, #204]	; (12410 <rpc_transport_ipc_tx_send+0xd4>)
   12344:	b083      	sub	sp, #12
   12346:	681a      	ldr	r2, [r3, #0]
   12348:	4b32      	ldr	r3, [pc, #200]	; (12414 <rpc_transport_ipc_tx_send+0xd8>)
   1234a:	4282      	cmp	r2, r0
   1234c:	d81e      	bhi.n	1238c <rpc_transport_ipc_tx_send+0x50>
   1234e:	681b      	ldr	r3, [r3, #0]
   12350:	4931      	ldr	r1, [pc, #196]	; (12418 <rpc_transport_ipc_tx_send+0xdc>)
   12352:	4283      	cmp	r3, r0
   12354:	6809      	ldr	r1, [r1, #0]
   12356:	d803      	bhi.n	12360 <rpc_transport_ipc_tx_send+0x24>
   12358:	4c30      	ldr	r4, [pc, #192]	; (1241c <rpc_transport_ipc_tx_send+0xe0>)
   1235a:	6824      	ldr	r4, [r4, #0]
   1235c:	4284      	cmp	r4, r0
   1235e:	d847      	bhi.n	123f0 <rpc_transport_ipc_tx_send+0xb4>
   12360:	4281      	cmp	r1, r0
   12362:	d90e      	bls.n	12382 <rpc_transport_ipc_tx_send+0x46>
   12364:	4b2e      	ldr	r3, [pc, #184]	; (12420 <rpc_transport_ipc_tx_send+0xe4>)
   12366:	781b      	ldrb	r3, [r3, #0]
   12368:	2b00      	cmp	r3, #0
   1236a:	d14c      	bne.n	12406 <rpc_transport_ipc_tx_send+0xca>
   1236c:	1a83      	subs	r3, r0, r2
   1236e:	492d      	ldr	r1, [pc, #180]	; (12424 <rpc_transport_ipc_tx_send+0xe8>)
   12370:	099e      	lsrs	r6, r3, #6
   12372:	069b      	lsls	r3, r3, #26
   12374:	680a      	ldr	r2, [r1, #0]
   12376:	4c2c      	ldr	r4, [pc, #176]	; (12428 <rpc_transport_ipc_tx_send+0xec>)
   12378:	f04f 0103 	mov.w	r1, #3
   1237c:	f04f 0502 	mov.w	r5, #2
   12380:	d014      	beq.n	123ac <rpc_transport_ipc_tx_send+0x70>
   12382:	f24c 0010 	movw	r0, #49168	; 0xc010
   12386:	b003      	add	sp, #12
   12388:	bc70      	pop	{r4, r5, r6}
   1238a:	4770      	bx	lr
   1238c:	681b      	ldr	r3, [r3, #0]
   1238e:	4298      	cmp	r0, r3
   12390:	d3f7      	bcc.n	12382 <rpc_transport_ipc_tx_send+0x46>
   12392:	4a22      	ldr	r2, [pc, #136]	; (1241c <rpc_transport_ipc_tx_send+0xe0>)
   12394:	6812      	ldr	r2, [r2, #0]
   12396:	4290      	cmp	r0, r2
   12398:	d2f3      	bcs.n	12382 <rpc_transport_ipc_tx_send+0x46>
   1239a:	2101      	movs	r1, #1
   1239c:	1ac3      	subs	r3, r0, r3
   1239e:	4a23      	ldr	r2, [pc, #140]	; (1242c <rpc_transport_ipc_tx_send+0xf0>)
   123a0:	099e      	lsrs	r6, r3, #6
   123a2:	069b      	lsls	r3, r3, #26
   123a4:	460d      	mov	r5, r1
   123a6:	6812      	ldr	r2, [r2, #0]
   123a8:	4c21      	ldr	r4, [pc, #132]	; (12430 <rpc_transport_ipc_tx_send+0xf4>)
   123aa:	d1ea      	bne.n	12382 <rpc_transport_ipc_tx_send+0x46>
   123ac:	6843      	ldr	r3, [r0, #4]
   123ae:	b2db      	uxtb	r3, r3
   123b0:	429d      	cmp	r5, r3
   123b2:	d120      	bne.n	123f6 <rpc_transport_ipc_tx_send+0xba>
   123b4:	2020      	movs	r0, #32
   123b6:	eb02 02c6 	add.w	r2, r2, r6, lsl #3
   123ba:	4d1e      	ldr	r5, [pc, #120]	; (12434 <rpc_transport_ipc_tx_send+0xf8>)
   123bc:	6853      	ldr	r3, [r2, #4]
   123be:	882e      	ldrh	r6, [r5, #0]
   123c0:	b29b      	uxth	r3, r3
   123c2:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
   123c6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
   123ca:	f043 0301 	orr.w	r3, r3, #1
   123ce:	6053      	str	r3, [r2, #4]
   123d0:	bf00      	nop
   123d2:	3801      	subs	r0, #1
   123d4:	d1fc      	bne.n	123d0 <rpc_transport_ipc_tx_send+0x94>
   123d6:	2201      	movs	r2, #1
   123d8:	4b17      	ldr	r3, [pc, #92]	; (12438 <rpc_transport_ipc_tx_send+0xfc>)
   123da:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
   123de:	6822      	ldr	r2, [r4, #0]
   123e0:	882b      	ldrh	r3, [r5, #0]
   123e2:	9201      	str	r2, [sp, #4]
   123e4:	9a01      	ldr	r2, [sp, #4]
   123e6:	3301      	adds	r3, #1
   123e8:	802b      	strh	r3, [r5, #0]
   123ea:	b003      	add	sp, #12
   123ec:	bc70      	pop	{r4, r5, r6}
   123ee:	4770      	bx	lr
   123f0:	4281      	cmp	r1, r0
   123f2:	d9d2      	bls.n	1239a <rpc_transport_ipc_tx_send+0x5e>
   123f4:	e7b6      	b.n	12364 <rpc_transport_ipc_tx_send+0x28>
   123f6:	f24c 0007 	movw	r0, #49159	; 0xc007
   123fa:	b003      	add	sp, #12
   123fc:	bc70      	pop	{r4, r5, r6}
   123fe:	4770      	bx	lr
   12400:	f24c 000e 	movw	r0, #49166	; 0xc00e
   12404:	4770      	bx	lr
   12406:	f24c 000f 	movw	r0, #49167	; 0xc00f
   1240a:	b003      	add	sp, #12
   1240c:	bc70      	pop	{r4, r5, r6}
   1240e:	4770      	bx	lr
   12410:	20020434 	.word	0x20020434
   12414:	2002042c 	.word	0x2002042c
   12418:	20020430 	.word	0x20020430
   1241c:	20020428 	.word	0x20020428
   12420:	200249d1 	.word	0x200249d1
   12424:	20020458 	.word	0x20020458
   12428:	4002a00c 	.word	0x4002a00c
   1242c:	20020450 	.word	0x20020450
   12430:	4002a004 	.word	0x4002a004
   12434:	200249c4 	.word	0x200249c4
   12438:	4002a000 	.word	0x4002a000

0001243c <rpc_transport_ipc_tx_rpc_data_alloc>:
   1243c:	4b18      	ldr	r3, [pc, #96]	; (124a0 <rpc_transport_ipc_tx_rpc_data_alloc+0x64>)
   1243e:	781b      	ldrb	r3, [r3, #0]
   12440:	bb63      	cbnz	r3, 1249c <rpc_transport_ipc_tx_rpc_data_alloc+0x60>
   12442:	b4f0      	push	{r4, r5, r6, r7}
   12444:	4a17      	ldr	r2, [pc, #92]	; (124a4 <rpc_transport_ipc_tx_rpc_data_alloc+0x68>)
   12446:	f003 00ff 	and.w	r0, r3, #255	; 0xff
   1244a:	6814      	ldr	r4, [r2, #0]
   1244c:	4b16      	ldr	r3, [pc, #88]	; (124a8 <rpc_transport_ipc_tx_rpc_data_alloc+0x6c>)
   1244e:	6825      	ldr	r5, [r4, #0]
   12450:	681e      	ldr	r6, [r3, #0]
   12452:	b1a5      	cbz	r5, 1247e <rpc_transport_ipc_tx_rpc_data_alloc+0x42>
   12454:	4607      	mov	r7, r0
   12456:	00c1      	lsls	r1, r0, #3
   12458:	1863      	adds	r3, r4, r1
   1245a:	685a      	ldr	r2, [r3, #4]
   1245c:	b2d2      	uxtb	r2, r2
   1245e:	2a03      	cmp	r2, #3
   12460:	d104      	bne.n	1246c <rpc_transport_ipc_tx_rpc_data_alloc+0x30>
   12462:	609f      	str	r7, [r3, #8]
   12464:	685a      	ldr	r2, [r3, #4]
   12466:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
   1246a:	605a      	str	r2, [r3, #4]
   1246c:	685a      	ldr	r2, [r3, #4]
   1246e:	f012 0fff 	tst.w	r2, #255	; 0xff
   12472:	d101      	bne.n	12478 <rpc_transport_ipc_tx_rpc_data_alloc+0x3c>
   12474:	689b      	ldr	r3, [r3, #8]
   12476:	b12b      	cbz	r3, 12484 <rpc_transport_ipc_tx_rpc_data_alloc+0x48>
   12478:	3001      	adds	r0, #1
   1247a:	42a8      	cmp	r0, r5
   1247c:	d1eb      	bne.n	12456 <rpc_transport_ipc_tx_rpc_data_alloc+0x1a>
   1247e:	2000      	movs	r0, #0
   12480:	bcf0      	pop	{r4, r5, r6, r7}
   12482:	4770      	bx	lr
   12484:	eb06 1080 	add.w	r0, r6, r0, lsl #6
   12488:	4421      	add	r1, r4
   1248a:	6088      	str	r0, [r1, #8]
   1248c:	6843      	ldr	r3, [r0, #4]
   1248e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
   12492:	f043 0302 	orr.w	r3, r3, #2
   12496:	6043      	str	r3, [r0, #4]
   12498:	bcf0      	pop	{r4, r5, r6, r7}
   1249a:	4770      	bx	lr
   1249c:	2000      	movs	r0, #0
   1249e:	4770      	bx	lr
   124a0:	200249d1 	.word	0x200249d1
   124a4:	20020458 	.word	0x20020458
   124a8:	20020454 	.word	0x20020454

000124ac <rpc_transport_ipc_tx_rpc_ctrl_alloc>:
   124ac:	b4f0      	push	{r4, r5, r6, r7}
   124ae:	4a15      	ldr	r2, [pc, #84]	; (12504 <rpc_transport_ipc_tx_rpc_ctrl_alloc+0x58>)
   124b0:	4b15      	ldr	r3, [pc, #84]	; (12508 <rpc_transport_ipc_tx_rpc_ctrl_alloc+0x5c>)
   124b2:	6814      	ldr	r4, [r2, #0]
   124b4:	681e      	ldr	r6, [r3, #0]
   124b6:	6825      	ldr	r5, [r4, #0]
   124b8:	b1ad      	cbz	r5, 124e6 <rpc_transport_ipc_tx_rpc_ctrl_alloc+0x3a>
   124ba:	2000      	movs	r0, #0
   124bc:	4607      	mov	r7, r0
   124be:	00c1      	lsls	r1, r0, #3
   124c0:	1863      	adds	r3, r4, r1
   124c2:	685a      	ldr	r2, [r3, #4]
   124c4:	b2d2      	uxtb	r2, r2
   124c6:	2a03      	cmp	r2, #3
   124c8:	d104      	bne.n	124d4 <rpc_transport_ipc_tx_rpc_ctrl_alloc+0x28>
   124ca:	609f      	str	r7, [r3, #8]
   124cc:	685a      	ldr	r2, [r3, #4]
   124ce:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
   124d2:	605a      	str	r2, [r3, #4]
   124d4:	685a      	ldr	r2, [r3, #4]
   124d6:	f012 0fff 	tst.w	r2, #255	; 0xff
   124da:	d101      	bne.n	124e0 <rpc_transport_ipc_tx_rpc_ctrl_alloc+0x34>
   124dc:	689b      	ldr	r3, [r3, #8]
   124de:	b12b      	cbz	r3, 124ec <rpc_transport_ipc_tx_rpc_ctrl_alloc+0x40>
   124e0:	3001      	adds	r0, #1
   124e2:	4285      	cmp	r5, r0
   124e4:	d1eb      	bne.n	124be <rpc_transport_ipc_tx_rpc_ctrl_alloc+0x12>
   124e6:	2000      	movs	r0, #0
   124e8:	bcf0      	pop	{r4, r5, r6, r7}
   124ea:	4770      	bx	lr
   124ec:	eb06 1080 	add.w	r0, r6, r0, lsl #6
   124f0:	4421      	add	r1, r4
   124f2:	6088      	str	r0, [r1, #8]
   124f4:	6843      	ldr	r3, [r0, #4]
   124f6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
   124fa:	f043 0301 	orr.w	r3, r3, #1
   124fe:	6043      	str	r3, [r0, #4]
   12500:	bcf0      	pop	{r4, r5, r6, r7}
   12502:	4770      	bx	lr
   12504:	20020450 	.word	0x20020450
   12508:	2002044c 	.word	0x2002044c

0001250c <rpc_transport_ipc_tx_data_alloc>:
   1250c:	4b03      	ldr	r3, [pc, #12]	; (1251c <rpc_transport_ipc_tx_data_alloc+0x10>)
   1250e:	781b      	ldrb	r3, [r3, #0]
   12510:	b90b      	cbnz	r3, 12516 <rpc_transport_ipc_tx_data_alloc+0xa>
   12512:	f7fd be37 	b.w	10184 <nrf_shared_malloc>
   12516:	2000      	movs	r0, #0
   12518:	4770      	bx	lr
   1251a:	bf00      	nop
   1251c:	200249d1 	.word	0x200249d1

00012520 <ok_rsp_parser>:
   12520:	2000      	movs	r0, #0
   12522:	4770      	bx	lr

00012524 <pdn_state_get_parser>:
   12524:	2200      	movs	r2, #0
   12526:	b570      	push	{r4, r5, r6, lr}
   12528:	780b      	ldrb	r3, [r1, #0]
   1252a:	b084      	sub	sp, #16
   1252c:	460e      	mov	r6, r1
   1252e:	e9cd 2200 	strd	r2, r2, [sp]
   12532:	e9cd 2202 	strd	r2, r2, [sp, #8]
   12536:	b323      	cbz	r3, 12582 <pdn_state_get_parser+0x5e>
   12538:	460c      	mov	r4, r1
   1253a:	2b20      	cmp	r3, #32
   1253c:	460d      	mov	r5, r1
   1253e:	d01b      	beq.n	12578 <pdn_state_get_parser+0x54>
   12540:	700b      	strb	r3, [r1, #0]
   12542:	3201      	adds	r2, #1
   12544:	f814 3f01 	ldrb.w	r3, [r4, #1]!
   12548:	18b1      	adds	r1, r6, r2
   1254a:	460d      	mov	r5, r1
   1254c:	2b00      	cmp	r3, #0
   1254e:	d1f4      	bne.n	1253a <pdn_state_get_parser+0x16>
   12550:	2200      	movs	r2, #0
   12552:	4b0d      	ldr	r3, [pc, #52]	; (12588 <pdn_state_get_parser+0x64>)
   12554:	702a      	strb	r2, [r5, #0]
   12556:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
   1255a:	4a0c      	ldr	r2, [pc, #48]	; (1258c <pdn_state_get_parser+0x68>)
   1255c:	681b      	ldr	r3, [r3, #0]
   1255e:	2110      	movs	r1, #16
   12560:	4668      	mov	r0, sp
   12562:	f7fb fe55 	bl	e210 <snprintf>
   12566:	4669      	mov	r1, sp
   12568:	4630      	mov	r0, r6
   1256a:	f007 f944 	bl	197f6 <strstr>
   1256e:	3000      	adds	r0, #0
   12570:	bf18      	it	ne
   12572:	2001      	movne	r0, #1
   12574:	b004      	add	sp, #16
   12576:	bd70      	pop	{r4, r5, r6, pc}
   12578:	f814 3f01 	ldrb.w	r3, [r4, #1]!
   1257c:	2b00      	cmp	r3, #0
   1257e:	d1dc      	bne.n	1253a <pdn_state_get_parser+0x16>
   12580:	e7e6      	b.n	12550 <pdn_state_get_parser+0x2c>
   12582:	460d      	mov	r5, r1
   12584:	e7e4      	b.n	12550 <pdn_state_get_parser+0x2c>
   12586:	bf00      	nop
   12588:	20020578 	.word	0x20020578
   1258c:	0001aaf8 	.word	0x0001aaf8

00012590 <pdn_id_get_parser>:
   12590:	b570      	push	{r4, r5, r6, lr}
   12592:	780b      	ldrb	r3, [r1, #0]
   12594:	4606      	mov	r6, r0
   12596:	b313      	cbz	r3, 125de <pdn_id_get_parser+0x4e>
   12598:	4608      	mov	r0, r1
   1259a:	2400      	movs	r4, #0
   1259c:	460a      	mov	r2, r1
   1259e:	2b20      	cmp	r3, #32
   125a0:	4615      	mov	r5, r2
   125a2:	d017      	beq.n	125d4 <pdn_id_get_parser+0x44>
   125a4:	7013      	strb	r3, [r2, #0]
   125a6:	3401      	adds	r4, #1
   125a8:	f810 3f01 	ldrb.w	r3, [r0, #1]!
   125ac:	190a      	adds	r2, r1, r4
   125ae:	4615      	mov	r5, r2
   125b0:	2b00      	cmp	r3, #0
   125b2:	d1f4      	bne.n	1259e <pdn_id_get_parser+0xe>
   125b4:	2300      	movs	r3, #0
   125b6:	4608      	mov	r0, r1
   125b8:	702b      	strb	r3, [r5, #0]
   125ba:	213a      	movs	r1, #58	; 0x3a
   125bc:	f007 f938 	bl	19830 <strchr>
   125c0:	b130      	cbz	r0, 125d0 <pdn_id_get_parser+0x40>
   125c2:	3001      	adds	r0, #1
   125c4:	f007 f87b 	bl	196be <atoi>
   125c8:	4b06      	ldr	r3, [pc, #24]	; (125e4 <pdn_id_get_parser+0x54>)
   125ca:	f853 3026 	ldr.w	r3, [r3, r6, lsl #2]
   125ce:	6058      	str	r0, [r3, #4]
   125d0:	2000      	movs	r0, #0
   125d2:	bd70      	pop	{r4, r5, r6, pc}
   125d4:	f810 3f01 	ldrb.w	r3, [r0, #1]!
   125d8:	2b00      	cmp	r3, #0
   125da:	d1e0      	bne.n	1259e <pdn_id_get_parser+0xe>
   125dc:	e7ea      	b.n	125b4 <pdn_id_get_parser+0x24>
   125de:	460d      	mov	r5, r1
   125e0:	e7e8      	b.n	125b4 <pdn_id_get_parser+0x24>
   125e2:	bf00      	nop
   125e4:	20020578 	.word	0x20020578

000125e8 <context_create_parser>:
   125e8:	b570      	push	{r4, r5, r6, lr}
   125ea:	780b      	ldrb	r3, [r1, #0]
   125ec:	4606      	mov	r6, r0
   125ee:	b313      	cbz	r3, 12636 <context_create_parser+0x4e>
   125f0:	4608      	mov	r0, r1
   125f2:	2400      	movs	r4, #0
   125f4:	460a      	mov	r2, r1
   125f6:	2b20      	cmp	r3, #32
   125f8:	4615      	mov	r5, r2
   125fa:	d017      	beq.n	1262c <context_create_parser+0x44>
   125fc:	7013      	strb	r3, [r2, #0]
   125fe:	3401      	adds	r4, #1
   12600:	f810 3f01 	ldrb.w	r3, [r0, #1]!
   12604:	190a      	adds	r2, r1, r4
   12606:	4615      	mov	r5, r2
   12608:	2b00      	cmp	r3, #0
   1260a:	d1f4      	bne.n	125f6 <context_create_parser+0xe>
   1260c:	2300      	movs	r3, #0
   1260e:	4608      	mov	r0, r1
   12610:	702b      	strb	r3, [r5, #0]
   12612:	213a      	movs	r1, #58	; 0x3a
   12614:	f007 f90c 	bl	19830 <strchr>
   12618:	b130      	cbz	r0, 12628 <context_create_parser+0x40>
   1261a:	4b08      	ldr	r3, [pc, #32]	; (1263c <context_create_parser+0x54>)
   1261c:	3001      	adds	r0, #1
   1261e:	f853 4026 	ldr.w	r4, [r3, r6, lsl #2]
   12622:	f007 f84c 	bl	196be <atoi>
   12626:	6020      	str	r0, [r4, #0]
   12628:	2000      	movs	r0, #0
   1262a:	bd70      	pop	{r4, r5, r6, pc}
   1262c:	f810 3f01 	ldrb.w	r3, [r0, #1]!
   12630:	2b00      	cmp	r3, #0
   12632:	d1e0      	bne.n	125f6 <context_create_parser+0xe>
   12634:	e7ea      	b.n	1260c <context_create_parser+0x24>
   12636:	460d      	mov	r5, r1
   12638:	e7e8      	b.n	1260c <context_create_parser+0x24>
   1263a:	bf00      	nop
   1263c:	20020578 	.word	0x20020578

00012640 <pdn_interface_init>:
   12640:	f04f 33ff 	mov.w	r3, #4294967295
   12644:	b510      	push	{r4, lr}
   12646:	4c09      	ldr	r4, [pc, #36]	; (1266c <pdn_interface_init+0x2c>)
   12648:	2228      	movs	r2, #40	; 0x28
   1264a:	2100      	movs	r1, #0
   1264c:	4808      	ldr	r0, [pc, #32]	; (12670 <pdn_interface_init+0x30>)
   1264e:	6023      	str	r3, [r4, #0]
   12650:	f007 f958 	bl	19904 <memset>
   12654:	f240 2201 	movw	r2, #513	; 0x201
   12658:	2102      	movs	r1, #2
   1265a:	2066      	movs	r0, #102	; 0x66
   1265c:	f7fd f83a 	bl	f6d4 <at_interface_open>
   12660:	2800      	cmp	r0, #0
   12662:	6020      	str	r0, [r4, #0]
   12664:	bfb4      	ite	lt
   12666:	2003      	movlt	r0, #3
   12668:	2000      	movge	r0, #0
   1266a:	bd10      	pop	{r4, pc}
   1266c:	20020474 	.word	0x20020474
   12670:	20020578 	.word	0x20020578

00012674 <pdn_interface_open>:
   12674:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   12678:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
   1267c:	b083      	sub	sp, #12
   1267e:	f040 80ad 	bne.w	127dc <pdn_interface_open+0x168>
   12682:	4c5f      	ldr	r4, [pc, #380]	; (12800 <pdn_interface_open+0x18c>)
   12684:	6825      	ldr	r5, [r4, #0]
   12686:	b34d      	cbz	r5, 126dc <pdn_interface_open+0x68>
   12688:	6863      	ldr	r3, [r4, #4]
   1268a:	2b00      	cmp	r3, #0
   1268c:	f000 8098 	beq.w	127c0 <pdn_interface_open+0x14c>
   12690:	68a3      	ldr	r3, [r4, #8]
   12692:	2b00      	cmp	r3, #0
   12694:	f000 8096 	beq.w	127c4 <pdn_interface_open+0x150>
   12698:	68e3      	ldr	r3, [r4, #12]
   1269a:	2b00      	cmp	r3, #0
   1269c:	f000 8094 	beq.w	127c8 <pdn_interface_open+0x154>
   126a0:	6923      	ldr	r3, [r4, #16]
   126a2:	2b00      	cmp	r3, #0
   126a4:	f000 8092 	beq.w	127cc <pdn_interface_open+0x158>
   126a8:	6963      	ldr	r3, [r4, #20]
   126aa:	2b00      	cmp	r3, #0
   126ac:	f000 8090 	beq.w	127d0 <pdn_interface_open+0x15c>
   126b0:	69a3      	ldr	r3, [r4, #24]
   126b2:	2b00      	cmp	r3, #0
   126b4:	f000 808e 	beq.w	127d4 <pdn_interface_open+0x160>
   126b8:	69e3      	ldr	r3, [r4, #28]
   126ba:	2b00      	cmp	r3, #0
   126bc:	f000 808c 	beq.w	127d8 <pdn_interface_open+0x164>
   126c0:	6a23      	ldr	r3, [r4, #32]
   126c2:	b153      	cbz	r3, 126da <pdn_interface_open+0x66>
   126c4:	6a63      	ldr	r3, [r4, #36]	; 0x24
   126c6:	2509      	movs	r5, #9
   126c8:	b143      	cbz	r3, 126dc <pdn_interface_open+0x68>
   126ca:	200c      	movs	r0, #12
   126cc:	f7fc fa10 	bl	eaf0 <bsd_os_errno_set>
   126d0:	f04f 30ff 	mov.w	r0, #4294967295
   126d4:	b003      	add	sp, #12
   126d6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   126da:	2508      	movs	r5, #8
   126dc:	2074      	movs	r0, #116	; 0x74
   126de:	f7fd fd3b 	bl	10158 <nrf_malloc>
   126e2:	f844 0025 	str.w	r0, [r4, r5, lsl #2]
   126e6:	2800      	cmp	r0, #0
   126e8:	d0ef      	beq.n	126ca <pdn_interface_open+0x56>
   126ea:	2274      	movs	r2, #116	; 0x74
   126ec:	2100      	movs	r1, #0
   126ee:	f007 f909 	bl	19904 <memset>
   126f2:	2101      	movs	r1, #1
   126f4:	2003      	movs	r0, #3
   126f6:	f04f 37ff 	mov.w	r7, #4294967295
   126fa:	f854 3025 	ldr.w	r3, [r4, r5, lsl #2]
   126fe:	4a41      	ldr	r2, [pc, #260]	; (12804 <pdn_interface_open+0x190>)
   12700:	6099      	str	r1, [r3, #8]
   12702:	f854 3025 	ldr.w	r3, [r4, r5, lsl #2]
   12706:	f44f 7180 	mov.w	r1, #256	; 0x100
   1270a:	6718      	str	r0, [r3, #112]	; 0x70
   1270c:	605f      	str	r7, [r3, #4]
   1270e:	483e      	ldr	r0, [pc, #248]	; (12808 <pdn_interface_open+0x194>)
   12710:	f8df 8100 	ldr.w	r8, [pc, #256]	; 12814 <pdn_interface_open+0x1a0>
   12714:	f7fb fd7c 	bl	e210 <snprintf>
   12718:	483b      	ldr	r0, [pc, #236]	; (12808 <pdn_interface_open+0x194>)
   1271a:	f8d8 9000 	ldr.w	r9, [r8]
   1271e:	2600      	movs	r6, #0
   12720:	f007 f894 	bl	1984c <strlen>
   12724:	4633      	mov	r3, r6
   12726:	4602      	mov	r2, r0
   12728:	4937      	ldr	r1, [pc, #220]	; (12808 <pdn_interface_open+0x194>)
   1272a:	4648      	mov	r0, r9
   1272c:	9601      	str	r6, [sp, #4]
   1272e:	9600      	str	r6, [sp, #0]
   12730:	f7fc ff62 	bl	f5f8 <at_interface_write>
   12734:	4681      	mov	r9, r0
   12736:	4834      	ldr	r0, [pc, #208]	; (12808 <pdn_interface_open+0x194>)
   12738:	f007 f888 	bl	1984c <strlen>
   1273c:	4548      	cmp	r0, r9
   1273e:	d153      	bne.n	127e8 <pdn_interface_open+0x174>
   12740:	4633      	mov	r3, r6
   12742:	e9cd 6600 	strd	r6, r6, [sp]
   12746:	f44f 7280 	mov.w	r2, #256	; 0x100
   1274a:	492f      	ldr	r1, [pc, #188]	; (12808 <pdn_interface_open+0x194>)
   1274c:	f8d8 0000 	ldr.w	r0, [r8]
   12750:	f7fd f856 	bl	f800 <at_interface_read>
   12754:	4606      	mov	r6, r0
   12756:	482d      	ldr	r0, [pc, #180]	; (1280c <pdn_interface_open+0x198>)
   12758:	f007 f878 	bl	1984c <strlen>
   1275c:	4286      	cmp	r6, r0
   1275e:	db15      	blt.n	1278c <pdn_interface_open+0x118>
   12760:	4602      	mov	r2, r0
   12762:	4929      	ldr	r1, [pc, #164]	; (12808 <pdn_interface_open+0x194>)
   12764:	4829      	ldr	r0, [pc, #164]	; (1280c <pdn_interface_open+0x198>)
   12766:	f007 f884 	bl	19872 <strncmp>
   1276a:	b978      	cbnz	r0, 1278c <pdn_interface_open+0x118>
   1276c:	4926      	ldr	r1, [pc, #152]	; (12808 <pdn_interface_open+0x194>)
   1276e:	4628      	mov	r0, r5
   12770:	f7ff ff3a 	bl	125e8 <context_create_parser>
   12774:	b9b0      	cbnz	r0, 127a4 <pdn_interface_open+0x130>
   12776:	2202      	movs	r2, #2
   12778:	f854 3025 	ldr.w	r3, [r4, r5, lsl #2]
   1277c:	f045 40f1 	orr.w	r0, r5, #2021654528	; 0x78800000
   12780:	f440 10d0 	orr.w	r0, r0, #1703936	; 0x1a0000
   12784:	609a      	str	r2, [r3, #8]
   12786:	b003      	add	sp, #12
   12788:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   1278c:	4820      	ldr	r0, [pc, #128]	; (12810 <pdn_interface_open+0x19c>)
   1278e:	f007 f85d 	bl	1984c <strlen>
   12792:	491d      	ldr	r1, [pc, #116]	; (12808 <pdn_interface_open+0x194>)
   12794:	4602      	mov	r2, r0
   12796:	481e      	ldr	r0, [pc, #120]	; (12810 <pdn_interface_open+0x19c>)
   12798:	f007 f86b 	bl	19872 <strncmp>
   1279c:	b960      	cbnz	r0, 127b8 <pdn_interface_open+0x144>
   1279e:	2008      	movs	r0, #8
   127a0:	f7fc f9a6 	bl	eaf0 <bsd_os_errno_set>
   127a4:	f854 0025 	ldr.w	r0, [r4, r5, lsl #2]
   127a8:	f7fd fce0 	bl	1016c <nrf_free>
   127ac:	2300      	movs	r3, #0
   127ae:	f04f 30ff 	mov.w	r0, #4294967295
   127b2:	f844 3025 	str.w	r3, [r4, r5, lsl #2]
   127b6:	e78d      	b.n	126d4 <pdn_interface_open+0x60>
   127b8:	2005      	movs	r0, #5
   127ba:	f7fc f999 	bl	eaf0 <bsd_os_errno_set>
   127be:	e7f1      	b.n	127a4 <pdn_interface_open+0x130>
   127c0:	2501      	movs	r5, #1
   127c2:	e78b      	b.n	126dc <pdn_interface_open+0x68>
   127c4:	2502      	movs	r5, #2
   127c6:	e789      	b.n	126dc <pdn_interface_open+0x68>
   127c8:	2503      	movs	r5, #3
   127ca:	e787      	b.n	126dc <pdn_interface_open+0x68>
   127cc:	2504      	movs	r5, #4
   127ce:	e785      	b.n	126dc <pdn_interface_open+0x68>
   127d0:	2505      	movs	r5, #5
   127d2:	e783      	b.n	126dc <pdn_interface_open+0x68>
   127d4:	2506      	movs	r5, #6
   127d6:	e781      	b.n	126dc <pdn_interface_open+0x68>
   127d8:	2507      	movs	r5, #7
   127da:	e77f      	b.n	126dc <pdn_interface_open+0x68>
   127dc:	2029      	movs	r0, #41	; 0x29
   127de:	f7fc f987 	bl	eaf0 <bsd_os_errno_set>
   127e2:	f04f 30ff 	mov.w	r0, #4294967295
   127e6:	e775      	b.n	126d4 <pdn_interface_open+0x60>
   127e8:	2005      	movs	r0, #5
   127ea:	f7fc f981 	bl	eaf0 <bsd_os_errno_set>
   127ee:	f854 0025 	ldr.w	r0, [r4, r5, lsl #2]
   127f2:	f7fd fcbb 	bl	1016c <nrf_free>
   127f6:	f844 6025 	str.w	r6, [r4, r5, lsl #2]
   127fa:	4638      	mov	r0, r7
   127fc:	e76a      	b.n	126d4 <pdn_interface_open+0x60>
   127fe:	bf00      	nop
   12800:	20020578 	.word	0x20020578
   12804:	0001aad4 	.word	0x0001aad4
   12808:	20020478 	.word	0x20020478
   1280c:	0001aae4 	.word	0x0001aae4
   12810:	0001aaf0 	.word	0x0001aaf0
   12814:	20020474 	.word	0x20020474

00012818 <pdn_interface_connect>:
   12818:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1281c:	b083      	sub	sp, #12
   1281e:	2900      	cmp	r1, #0
   12820:	f000 813d 	beq.w	12a9e <pdn_interface_connect+0x286>
   12824:	2a64      	cmp	r2, #100	; 0x64
   12826:	4691      	mov	r9, r2
   12828:	f200 8139 	bhi.w	12a9e <pdn_interface_connect+0x286>
   1282c:	4605      	mov	r5, r0
   1282e:	4608      	mov	r0, r1
   12830:	4688      	mov	r8, r1
   12832:	f007 f80b 	bl	1984c <strlen>
   12836:	2864      	cmp	r0, #100	; 0x64
   12838:	f200 8131 	bhi.w	12a9e <pdn_interface_connect+0x286>
   1283c:	0c2b      	lsrs	r3, r5, #16
   1283e:	4aa5      	ldr	r2, [pc, #660]	; (12ad4 <pdn_interface_connect+0x2bc>)
   12840:	041b      	lsls	r3, r3, #16
   12842:	4293      	cmp	r3, r2
   12844:	f040 8122 	bne.w	12a8c <pdn_interface_connect+0x274>
   12848:	f025 45f1 	bic.w	r5, r5, #2021654528	; 0x78800000
   1284c:	f425 15d0 	bic.w	r5, r5, #1703936	; 0x1a0000
   12850:	2d09      	cmp	r5, #9
   12852:	f300 811b 	bgt.w	12a8c <pdn_interface_connect+0x274>
   12856:	4fa0      	ldr	r7, [pc, #640]	; (12ad8 <pdn_interface_connect+0x2c0>)
   12858:	f857 3025 	ldr.w	r3, [r7, r5, lsl #2]
   1285c:	2b00      	cmp	r3, #0
   1285e:	f000 8115 	beq.w	12a8c <pdn_interface_connect+0x274>
   12862:	689a      	ldr	r2, [r3, #8]
   12864:	2a00      	cmp	r2, #0
   12866:	f000 8111 	beq.w	12a8c <pdn_interface_connect+0x274>
   1286a:	689b      	ldr	r3, [r3, #8]
   1286c:	2b02      	cmp	r3, #2
   1286e:	f040 810d 	bne.w	12a8c <pdn_interface_connect+0x274>
   12872:	4e9a      	ldr	r6, [pc, #616]	; (12adc <pdn_interface_connect+0x2c4>)
   12874:	4a9a      	ldr	r2, [pc, #616]	; (12ae0 <pdn_interface_connect+0x2c8>)
   12876:	f44f 7180 	mov.w	r1, #256	; 0x100
   1287a:	4630      	mov	r0, r6
   1287c:	f7fb fcc8 	bl	e210 <snprintf>
   12880:	f857 3025 	ldr.w	r3, [r7, r5, lsl #2]
   12884:	4604      	mov	r4, r0
   12886:	f5c0 7180 	rsb	r1, r0, #256	; 0x100
   1288a:	681b      	ldr	r3, [r3, #0]
   1288c:	4a95      	ldr	r2, [pc, #596]	; (12ae4 <pdn_interface_connect+0x2cc>)
   1288e:	1830      	adds	r0, r6, r0
   12890:	f7fb fcbe 	bl	e210 <snprintf>
   12894:	f857 3025 	ldr.w	r3, [r7, r5, lsl #2]
   12898:	4404      	add	r4, r0
   1289a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
   1289c:	f003 0203 	and.w	r2, r3, #3
   128a0:	2a03      	cmp	r2, #3
   128a2:	f000 80ea 	beq.w	12a7a <pdn_interface_connect+0x262>
   128a6:	079b      	lsls	r3, r3, #30
   128a8:	eb06 0004 	add.w	r0, r6, r4
   128ac:	f5c4 7180 	rsb	r1, r4, #256	; 0x100
   128b0:	bf4c      	ite	mi
   128b2:	4b8d      	ldrmi	r3, [pc, #564]	; (12ae8 <pdn_interface_connect+0x2d0>)
   128b4:	4b8d      	ldrpl	r3, [pc, #564]	; (12aec <pdn_interface_connect+0x2d4>)
   128b6:	4a8e      	ldr	r2, [pc, #568]	; (12af0 <pdn_interface_connect+0x2d8>)
   128b8:	f7fb fcaa 	bl	e210 <snprintf>
   128bc:	4404      	add	r4, r0
   128be:	4643      	mov	r3, r8
   128c0:	4a8c      	ldr	r2, [pc, #560]	; (12af4 <pdn_interface_connect+0x2dc>)
   128c2:	f5c4 7180 	rsb	r1, r4, #256	; 0x100
   128c6:	1930      	adds	r0, r6, r4
   128c8:	f7fb fca2 	bl	e210 <snprintf>
   128cc:	4420      	add	r0, r4
   128ce:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
   128d2:	f300 80f7 	bgt.w	12ac4 <pdn_interface_connect+0x2ac>
   128d6:	f8df a23c 	ldr.w	sl, [pc, #572]	; 12b14 <pdn_interface_connect+0x2fc>
   128da:	4880      	ldr	r0, [pc, #512]	; (12adc <pdn_interface_connect+0x2c4>)
   128dc:	f8da b000 	ldr.w	fp, [sl]
   128e0:	2400      	movs	r4, #0
   128e2:	f006 ffb3 	bl	1984c <strlen>
   128e6:	4623      	mov	r3, r4
   128e8:	4602      	mov	r2, r0
   128ea:	497c      	ldr	r1, [pc, #496]	; (12adc <pdn_interface_connect+0x2c4>)
   128ec:	4658      	mov	r0, fp
   128ee:	9401      	str	r4, [sp, #4]
   128f0:	9400      	str	r4, [sp, #0]
   128f2:	f7fc fe81 	bl	f5f8 <at_interface_write>
   128f6:	4683      	mov	fp, r0
   128f8:	4878      	ldr	r0, [pc, #480]	; (12adc <pdn_interface_connect+0x2c4>)
   128fa:	f006 ffa7 	bl	1984c <strlen>
   128fe:	4558      	cmp	r0, fp
   12900:	d008      	beq.n	12914 <pdn_interface_connect+0xfc>
   12902:	2005      	movs	r0, #5
   12904:	f7fc f8f4 	bl	eaf0 <bsd_os_errno_set>
   12908:	f04f 34ff 	mov.w	r4, #4294967295
   1290c:	4620      	mov	r0, r4
   1290e:	b003      	add	sp, #12
   12910:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12914:	4623      	mov	r3, r4
   12916:	e9cd 4400 	strd	r4, r4, [sp]
   1291a:	f44f 7280 	mov.w	r2, #256	; 0x100
   1291e:	496f      	ldr	r1, [pc, #444]	; (12adc <pdn_interface_connect+0x2c4>)
   12920:	f8da 0000 	ldr.w	r0, [sl]
   12924:	f7fc ff6c 	bl	f800 <at_interface_read>
   12928:	4604      	mov	r4, r0
   1292a:	4873      	ldr	r0, [pc, #460]	; (12af8 <pdn_interface_connect+0x2e0>)
   1292c:	f006 ff8e 	bl	1984c <strlen>
   12930:	4284      	cmp	r4, r0
   12932:	f2c0 8091 	blt.w	12a58 <pdn_interface_connect+0x240>
   12936:	4602      	mov	r2, r0
   12938:	4968      	ldr	r1, [pc, #416]	; (12adc <pdn_interface_connect+0x2c4>)
   1293a:	486f      	ldr	r0, [pc, #444]	; (12af8 <pdn_interface_connect+0x2e0>)
   1293c:	f006 ff99 	bl	19872 <strncmp>
   12940:	2800      	cmp	r0, #0
   12942:	f040 8089 	bne.w	12a58 <pdn_interface_connect+0x240>
   12946:	4965      	ldr	r1, [pc, #404]	; (12adc <pdn_interface_connect+0x2c4>)
   12948:	4628      	mov	r0, r5
   1294a:	f7ff fde9 	bl	12520 <ok_rsp_parser>
   1294e:	4604      	mov	r4, r0
   12950:	2800      	cmp	r0, #0
   12952:	d1db      	bne.n	1290c <pdn_interface_connect+0xf4>
   12954:	4a69      	ldr	r2, [pc, #420]	; (12afc <pdn_interface_connect+0x2e4>)
   12956:	f44f 7180 	mov.w	r1, #256	; 0x100
   1295a:	4860      	ldr	r0, [pc, #384]	; (12adc <pdn_interface_connect+0x2c4>)
   1295c:	f7fb fc58 	bl	e210 <snprintf>
   12960:	f857 3025 	ldr.w	r3, [r7, r5, lsl #2]
   12964:	f5c0 7180 	rsb	r1, r0, #256	; 0x100
   12968:	681b      	ldr	r3, [r3, #0]
   1296a:	4a65      	ldr	r2, [pc, #404]	; (12b00 <pdn_interface_connect+0x2e8>)
   1296c:	4430      	add	r0, r6
   1296e:	f7fb fc4f 	bl	e210 <snprintf>
   12972:	485a      	ldr	r0, [pc, #360]	; (12adc <pdn_interface_connect+0x2c4>)
   12974:	f8da b000 	ldr.w	fp, [sl]
   12978:	f006 ff68 	bl	1984c <strlen>
   1297c:	4623      	mov	r3, r4
   1297e:	4602      	mov	r2, r0
   12980:	4956      	ldr	r1, [pc, #344]	; (12adc <pdn_interface_connect+0x2c4>)
   12982:	4658      	mov	r0, fp
   12984:	9401      	str	r4, [sp, #4]
   12986:	9400      	str	r4, [sp, #0]
   12988:	f7fc fe36 	bl	f5f8 <at_interface_write>
   1298c:	4683      	mov	fp, r0
   1298e:	4853      	ldr	r0, [pc, #332]	; (12adc <pdn_interface_connect+0x2c4>)
   12990:	f006 ff5c 	bl	1984c <strlen>
   12994:	4558      	cmp	r0, fp
   12996:	d1b4      	bne.n	12902 <pdn_interface_connect+0xea>
   12998:	4623      	mov	r3, r4
   1299a:	f44f 7280 	mov.w	r2, #256	; 0x100
   1299e:	494f      	ldr	r1, [pc, #316]	; (12adc <pdn_interface_connect+0x2c4>)
   129a0:	f8da 0000 	ldr.w	r0, [sl]
   129a4:	e9cd 4400 	strd	r4, r4, [sp]
   129a8:	f7fc ff2a 	bl	f800 <at_interface_read>
   129ac:	4683      	mov	fp, r0
   129ae:	4852      	ldr	r0, [pc, #328]	; (12af8 <pdn_interface_connect+0x2e0>)
   129b0:	f006 ff4c 	bl	1984c <strlen>
   129b4:	4583      	cmp	fp, r0
   129b6:	db4f      	blt.n	12a58 <pdn_interface_connect+0x240>
   129b8:	4602      	mov	r2, r0
   129ba:	4948      	ldr	r1, [pc, #288]	; (12adc <pdn_interface_connect+0x2c4>)
   129bc:	484e      	ldr	r0, [pc, #312]	; (12af8 <pdn_interface_connect+0x2e0>)
   129be:	f006 ff58 	bl	19872 <strncmp>
   129c2:	2800      	cmp	r0, #0
   129c4:	d148      	bne.n	12a58 <pdn_interface_connect+0x240>
   129c6:	2103      	movs	r1, #3
   129c8:	f857 3025 	ldr.w	r3, [r7, r5, lsl #2]
   129cc:	464a      	mov	r2, r9
   129ce:	6099      	str	r1, [r3, #8]
   129d0:	f857 0025 	ldr.w	r0, [r7, r5, lsl #2]
   129d4:	4641      	mov	r1, r8
   129d6:	300c      	adds	r0, #12
   129d8:	f006 ff6a 	bl	198b0 <memcpy>
   129dc:	4a49      	ldr	r2, [pc, #292]	; (12b04 <pdn_interface_connect+0x2ec>)
   129de:	f44f 7180 	mov.w	r1, #256	; 0x100
   129e2:	483e      	ldr	r0, [pc, #248]	; (12adc <pdn_interface_connect+0x2c4>)
   129e4:	f7fb fc14 	bl	e210 <snprintf>
   129e8:	4601      	mov	r1, r0
   129ea:	f857 3025 	ldr.w	r3, [r7, r5, lsl #2]
   129ee:	f5c1 7180 	rsb	r1, r1, #256	; 0x100
   129f2:	681b      	ldr	r3, [r3, #0]
   129f4:	4a42      	ldr	r2, [pc, #264]	; (12b00 <pdn_interface_connect+0x2e8>)
   129f6:	1830      	adds	r0, r6, r0
   129f8:	f7fb fc0a 	bl	e210 <snprintf>
   129fc:	4837      	ldr	r0, [pc, #220]	; (12adc <pdn_interface_connect+0x2c4>)
   129fe:	f8da 6000 	ldr.w	r6, [sl]
   12a02:	f006 ff23 	bl	1984c <strlen>
   12a06:	4623      	mov	r3, r4
   12a08:	4602      	mov	r2, r0
   12a0a:	4934      	ldr	r1, [pc, #208]	; (12adc <pdn_interface_connect+0x2c4>)
   12a0c:	4630      	mov	r0, r6
   12a0e:	9401      	str	r4, [sp, #4]
   12a10:	9400      	str	r4, [sp, #0]
   12a12:	f7fc fdf1 	bl	f5f8 <at_interface_write>
   12a16:	4606      	mov	r6, r0
   12a18:	4830      	ldr	r0, [pc, #192]	; (12adc <pdn_interface_connect+0x2c4>)
   12a1a:	f006 ff17 	bl	1984c <strlen>
   12a1e:	42b0      	cmp	r0, r6
   12a20:	d153      	bne.n	12aca <pdn_interface_connect+0x2b2>
   12a22:	4623      	mov	r3, r4
   12a24:	f44f 7280 	mov.w	r2, #256	; 0x100
   12a28:	492c      	ldr	r1, [pc, #176]	; (12adc <pdn_interface_connect+0x2c4>)
   12a2a:	f8da 0000 	ldr.w	r0, [sl]
   12a2e:	e9cd 4400 	strd	r4, r4, [sp]
   12a32:	f7fc fee5 	bl	f800 <at_interface_read>
   12a36:	4606      	mov	r6, r0
   12a38:	4833      	ldr	r0, [pc, #204]	; (12b08 <pdn_interface_connect+0x2f0>)
   12a3a:	f006 ff07 	bl	1984c <strlen>
   12a3e:	4286      	cmp	r6, r0
   12a40:	db33      	blt.n	12aaa <pdn_interface_connect+0x292>
   12a42:	4602      	mov	r2, r0
   12a44:	4925      	ldr	r1, [pc, #148]	; (12adc <pdn_interface_connect+0x2c4>)
   12a46:	4830      	ldr	r0, [pc, #192]	; (12b08 <pdn_interface_connect+0x2f0>)
   12a48:	f006 ff13 	bl	19872 <strncmp>
   12a4c:	bb68      	cbnz	r0, 12aaa <pdn_interface_connect+0x292>
   12a4e:	4628      	mov	r0, r5
   12a50:	4922      	ldr	r1, [pc, #136]	; (12adc <pdn_interface_connect+0x2c4>)
   12a52:	f7ff fd9d 	bl	12590 <pdn_id_get_parser>
   12a56:	e759      	b.n	1290c <pdn_interface_connect+0xf4>
   12a58:	482c      	ldr	r0, [pc, #176]	; (12b0c <pdn_interface_connect+0x2f4>)
   12a5a:	f006 fef7 	bl	1984c <strlen>
   12a5e:	491f      	ldr	r1, [pc, #124]	; (12adc <pdn_interface_connect+0x2c4>)
   12a60:	4602      	mov	r2, r0
   12a62:	482a      	ldr	r0, [pc, #168]	; (12b0c <pdn_interface_connect+0x2f4>)
   12a64:	f006 ff05 	bl	19872 <strncmp>
   12a68:	2800      	cmp	r0, #0
   12a6a:	f47f af4a 	bne.w	12902 <pdn_interface_connect+0xea>
   12a6e:	2008      	movs	r0, #8
   12a70:	f7fc f83e 	bl	eaf0 <bsd_os_errno_set>
   12a74:	f04f 34ff 	mov.w	r4, #4294967295
   12a78:	e748      	b.n	1290c <pdn_interface_connect+0xf4>
   12a7a:	f5c4 7180 	rsb	r1, r4, #256	; 0x100
   12a7e:	1930      	adds	r0, r6, r4
   12a80:	4b23      	ldr	r3, [pc, #140]	; (12b10 <pdn_interface_connect+0x2f8>)
   12a82:	4a1b      	ldr	r2, [pc, #108]	; (12af0 <pdn_interface_connect+0x2d8>)
   12a84:	f7fb fbc4 	bl	e210 <snprintf>
   12a88:	4404      	add	r4, r0
   12a8a:	e718      	b.n	128be <pdn_interface_connect+0xa6>
   12a8c:	f04f 34ff 	mov.w	r4, #4294967295
   12a90:	2009      	movs	r0, #9
   12a92:	f7fc f82d 	bl	eaf0 <bsd_os_errno_set>
   12a96:	4620      	mov	r0, r4
   12a98:	b003      	add	sp, #12
   12a9a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12a9e:	2016      	movs	r0, #22
   12aa0:	f7fc f826 	bl	eaf0 <bsd_os_errno_set>
   12aa4:	f04f 34ff 	mov.w	r4, #4294967295
   12aa8:	e730      	b.n	1290c <pdn_interface_connect+0xf4>
   12aaa:	4818      	ldr	r0, [pc, #96]	; (12b0c <pdn_interface_connect+0x2f4>)
   12aac:	f006 fece 	bl	1984c <strlen>
   12ab0:	490a      	ldr	r1, [pc, #40]	; (12adc <pdn_interface_connect+0x2c4>)
   12ab2:	4602      	mov	r2, r0
   12ab4:	4815      	ldr	r0, [pc, #84]	; (12b0c <pdn_interface_connect+0x2f4>)
   12ab6:	f006 fedc 	bl	19872 <strncmp>
   12aba:	b930      	cbnz	r0, 12aca <pdn_interface_connect+0x2b2>
   12abc:	2008      	movs	r0, #8
   12abe:	f7fc f817 	bl	eaf0 <bsd_os_errno_set>
   12ac2:	e723      	b.n	1290c <pdn_interface_connect+0xf4>
   12ac4:	f04f 34ff 	mov.w	r4, #4294967295
   12ac8:	e720      	b.n	1290c <pdn_interface_connect+0xf4>
   12aca:	2005      	movs	r0, #5
   12acc:	f7fc f810 	bl	eaf0 <bsd_os_errno_set>
   12ad0:	e71c      	b.n	1290c <pdn_interface_connect+0xf4>
   12ad2:	bf00      	nop
   12ad4:	789a0000 	.word	0x789a0000
   12ad8:	20020578 	.word	0x20020578
   12adc:	20020478 	.word	0x20020478
   12ae0:	0001aa5c 	.word	0x0001aa5c
   12ae4:	0001aa68 	.word	0x0001aa68
   12ae8:	0001aa7c 	.word	0x0001aa7c
   12aec:	0001aa84 	.word	0x0001aa84
   12af0:	0001aa74 	.word	0x0001aa74
   12af4:	0001aab8 	.word	0x0001aab8
   12af8:	0001aa88 	.word	0x0001aa88
   12afc:	0001aa8c 	.word	0x0001aa8c
   12b00:	0001aa98 	.word	0x0001aa98
   12b04:	0001aa9c 	.word	0x0001aa9c
   12b08:	0001aaac 	.word	0x0001aaac
   12b0c:	0001aaf0 	.word	0x0001aaf0
   12b10:	0001aa6c 	.word	0x0001aa6c
   12b14:	20020474 	.word	0x20020474

00012b18 <pdn_interface_close>:
   12b18:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   12b1c:	4a64      	ldr	r2, [pc, #400]	; (12cb0 <pdn_interface_close+0x198>)
   12b1e:	0c03      	lsrs	r3, r0, #16
   12b20:	041b      	lsls	r3, r3, #16
   12b22:	4293      	cmp	r3, r2
   12b24:	b083      	sub	sp, #12
   12b26:	f040 809d 	bne.w	12c64 <pdn_interface_close+0x14c>
   12b2a:	f020 44f1 	bic.w	r4, r0, #2021654528	; 0x78800000
   12b2e:	f424 14d0 	bic.w	r4, r4, #1703936	; 0x1a0000
   12b32:	2c09      	cmp	r4, #9
   12b34:	f300 8096 	bgt.w	12c64 <pdn_interface_close+0x14c>
   12b38:	4d5e      	ldr	r5, [pc, #376]	; (12cb4 <pdn_interface_close+0x19c>)
   12b3a:	f855 0024 	ldr.w	r0, [r5, r4, lsl #2]
   12b3e:	2800      	cmp	r0, #0
   12b40:	f000 8090 	beq.w	12c64 <pdn_interface_close+0x14c>
   12b44:	6883      	ldr	r3, [r0, #8]
   12b46:	2b00      	cmp	r3, #0
   12b48:	f000 808c 	beq.w	12c64 <pdn_interface_close+0x14c>
   12b4c:	6883      	ldr	r3, [r0, #8]
   12b4e:	2b03      	cmp	r3, #3
   12b50:	d008      	beq.n	12b64 <pdn_interface_close+0x4c>
   12b52:	f7fd fb0b 	bl	1016c <nrf_free>
   12b56:	2300      	movs	r3, #0
   12b58:	4618      	mov	r0, r3
   12b5a:	f845 3024 	str.w	r3, [r5, r4, lsl #2]
   12b5e:	b003      	add	sp, #12
   12b60:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   12b64:	4e54      	ldr	r6, [pc, #336]	; (12cb8 <pdn_interface_close+0x1a0>)
   12b66:	4a55      	ldr	r2, [pc, #340]	; (12cbc <pdn_interface_close+0x1a4>)
   12b68:	f44f 7180 	mov.w	r1, #256	; 0x100
   12b6c:	4630      	mov	r0, r6
   12b6e:	f7fb fb4f 	bl	e210 <snprintf>
   12b72:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
   12b76:	f5c0 7180 	rsb	r1, r0, #256	; 0x100
   12b7a:	681b      	ldr	r3, [r3, #0]
   12b7c:	4a50      	ldr	r2, [pc, #320]	; (12cc0 <pdn_interface_close+0x1a8>)
   12b7e:	4430      	add	r0, r6
   12b80:	f8df 814c 	ldr.w	r8, [pc, #332]	; 12cd0 <pdn_interface_close+0x1b8>
   12b84:	f7fb fb44 	bl	e210 <snprintf>
   12b88:	4630      	mov	r0, r6
   12b8a:	f8d8 9000 	ldr.w	r9, [r8]
   12b8e:	2700      	movs	r7, #0
   12b90:	f006 fe5c 	bl	1984c <strlen>
   12b94:	4631      	mov	r1, r6
   12b96:	4602      	mov	r2, r0
   12b98:	463b      	mov	r3, r7
   12b9a:	4648      	mov	r0, r9
   12b9c:	9701      	str	r7, [sp, #4]
   12b9e:	9700      	str	r7, [sp, #0]
   12ba0:	f7fc fd2a 	bl	f5f8 <at_interface_write>
   12ba4:	4681      	mov	r9, r0
   12ba6:	4630      	mov	r0, r6
   12ba8:	f006 fe50 	bl	1984c <strlen>
   12bac:	4548      	cmp	r0, r9
   12bae:	d176      	bne.n	12c9e <pdn_interface_close+0x186>
   12bb0:	463b      	mov	r3, r7
   12bb2:	e9cd 7700 	strd	r7, r7, [sp]
   12bb6:	f44f 7280 	mov.w	r2, #256	; 0x100
   12bba:	4631      	mov	r1, r6
   12bbc:	f8d8 0000 	ldr.w	r0, [r8]
   12bc0:	f7fc fe1e 	bl	f800 <at_interface_read>
   12bc4:	4607      	mov	r7, r0
   12bc6:	483f      	ldr	r0, [pc, #252]	; (12cc4 <pdn_interface_close+0x1ac>)
   12bc8:	f006 fe40 	bl	1984c <strlen>
   12bcc:	4287      	cmp	r7, r0
   12bce:	da4f      	bge.n	12c70 <pdn_interface_close+0x158>
   12bd0:	483d      	ldr	r0, [pc, #244]	; (12cc8 <pdn_interface_close+0x1b0>)
   12bd2:	f006 fe3b 	bl	1984c <strlen>
   12bd6:	4938      	ldr	r1, [pc, #224]	; (12cb8 <pdn_interface_close+0x1a0>)
   12bd8:	4602      	mov	r2, r0
   12bda:	483b      	ldr	r0, [pc, #236]	; (12cc8 <pdn_interface_close+0x1b0>)
   12bdc:	f006 fe49 	bl	19872 <strncmp>
   12be0:	2800      	cmp	r0, #0
   12be2:	d15c      	bne.n	12c9e <pdn_interface_close+0x186>
   12be4:	2008      	movs	r0, #8
   12be6:	f7fb ff83 	bl	eaf0 <bsd_os_errno_set>
   12bea:	4a38      	ldr	r2, [pc, #224]	; (12ccc <pdn_interface_close+0x1b4>)
   12bec:	f44f 7180 	mov.w	r1, #256	; 0x100
   12bf0:	4831      	ldr	r0, [pc, #196]	; (12cb8 <pdn_interface_close+0x1a0>)
   12bf2:	f7fb fb0d 	bl	e210 <snprintf>
   12bf6:	4601      	mov	r1, r0
   12bf8:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
   12bfc:	f5c1 7180 	rsb	r1, r1, #256	; 0x100
   12c00:	681b      	ldr	r3, [r3, #0]
   12c02:	4a2f      	ldr	r2, [pc, #188]	; (12cc0 <pdn_interface_close+0x1a8>)
   12c04:	1830      	adds	r0, r6, r0
   12c06:	f7fb fb03 	bl	e210 <snprintf>
   12c0a:	482b      	ldr	r0, [pc, #172]	; (12cb8 <pdn_interface_close+0x1a0>)
   12c0c:	f8d8 7000 	ldr.w	r7, [r8]
   12c10:	2600      	movs	r6, #0
   12c12:	f006 fe1b 	bl	1984c <strlen>
   12c16:	4633      	mov	r3, r6
   12c18:	4602      	mov	r2, r0
   12c1a:	4927      	ldr	r1, [pc, #156]	; (12cb8 <pdn_interface_close+0x1a0>)
   12c1c:	4638      	mov	r0, r7
   12c1e:	9601      	str	r6, [sp, #4]
   12c20:	9600      	str	r6, [sp, #0]
   12c22:	f7fc fce9 	bl	f5f8 <at_interface_write>
   12c26:	4607      	mov	r7, r0
   12c28:	4823      	ldr	r0, [pc, #140]	; (12cb8 <pdn_interface_close+0x1a0>)
   12c2a:	f006 fe0f 	bl	1984c <strlen>
   12c2e:	42b8      	cmp	r0, r7
   12c30:	d139      	bne.n	12ca6 <pdn_interface_close+0x18e>
   12c32:	4633      	mov	r3, r6
   12c34:	e9cd 6600 	strd	r6, r6, [sp]
   12c38:	f44f 7280 	mov.w	r2, #256	; 0x100
   12c3c:	491e      	ldr	r1, [pc, #120]	; (12cb8 <pdn_interface_close+0x1a0>)
   12c3e:	f8d8 0000 	ldr.w	r0, [r8]
   12c42:	f7fc fddd 	bl	f800 <at_interface_read>
   12c46:	4606      	mov	r6, r0
   12c48:	481e      	ldr	r0, [pc, #120]	; (12cc4 <pdn_interface_close+0x1ac>)
   12c4a:	f006 fdff 	bl	1984c <strlen>
   12c4e:	4286      	cmp	r6, r0
   12c50:	db16      	blt.n	12c80 <pdn_interface_close+0x168>
   12c52:	4602      	mov	r2, r0
   12c54:	4918      	ldr	r1, [pc, #96]	; (12cb8 <pdn_interface_close+0x1a0>)
   12c56:	481b      	ldr	r0, [pc, #108]	; (12cc4 <pdn_interface_close+0x1ac>)
   12c58:	f006 fe0b 	bl	19872 <strncmp>
   12c5c:	b980      	cbnz	r0, 12c80 <pdn_interface_close+0x168>
   12c5e:	f855 0024 	ldr.w	r0, [r5, r4, lsl #2]
   12c62:	e776      	b.n	12b52 <pdn_interface_close+0x3a>
   12c64:	2009      	movs	r0, #9
   12c66:	f7fb ff43 	bl	eaf0 <bsd_os_errno_set>
   12c6a:	f04f 30ff 	mov.w	r0, #4294967295
   12c6e:	e776      	b.n	12b5e <pdn_interface_close+0x46>
   12c70:	4602      	mov	r2, r0
   12c72:	4631      	mov	r1, r6
   12c74:	4813      	ldr	r0, [pc, #76]	; (12cc4 <pdn_interface_close+0x1ac>)
   12c76:	f006 fdfc 	bl	19872 <strncmp>
   12c7a:	2800      	cmp	r0, #0
   12c7c:	d0b5      	beq.n	12bea <pdn_interface_close+0xd2>
   12c7e:	e7a7      	b.n	12bd0 <pdn_interface_close+0xb8>
   12c80:	4811      	ldr	r0, [pc, #68]	; (12cc8 <pdn_interface_close+0x1b0>)
   12c82:	f006 fde3 	bl	1984c <strlen>
   12c86:	490c      	ldr	r1, [pc, #48]	; (12cb8 <pdn_interface_close+0x1a0>)
   12c88:	4602      	mov	r2, r0
   12c8a:	480f      	ldr	r0, [pc, #60]	; (12cc8 <pdn_interface_close+0x1b0>)
   12c8c:	f006 fdf1 	bl	19872 <strncmp>
   12c90:	b948      	cbnz	r0, 12ca6 <pdn_interface_close+0x18e>
   12c92:	2008      	movs	r0, #8
   12c94:	f7fb ff2c 	bl	eaf0 <bsd_os_errno_set>
   12c98:	f855 0024 	ldr.w	r0, [r5, r4, lsl #2]
   12c9c:	e759      	b.n	12b52 <pdn_interface_close+0x3a>
   12c9e:	2005      	movs	r0, #5
   12ca0:	f7fb ff26 	bl	eaf0 <bsd_os_errno_set>
   12ca4:	e7a1      	b.n	12bea <pdn_interface_close+0xd2>
   12ca6:	2005      	movs	r0, #5
   12ca8:	f7fb ff22 	bl	eaf0 <bsd_os_errno_set>
   12cac:	e7d7      	b.n	12c5e <pdn_interface_close+0x146>
   12cae:	bf00      	nop
   12cb0:	789a0000 	.word	0x789a0000
   12cb4:	20020578 	.word	0x20020578
   12cb8:	20020478 	.word	0x20020478
   12cbc:	0001aa50 	.word	0x0001aa50
   12cc0:	0001aa98 	.word	0x0001aa98
   12cc4:	0001aa88 	.word	0x0001aa88
   12cc8:	0001aaf0 	.word	0x0001aaf0
   12ccc:	0001aa5c 	.word	0x0001aa5c
   12cd0:	20020474 	.word	0x20020474

00012cd4 <pdn_interface_setopt>:
   12cd4:	b510      	push	{r4, lr}
   12cd6:	f240 2402 	movw	r4, #514	; 0x202
   12cda:	42a1      	cmp	r1, r4
   12cdc:	d10d      	bne.n	12cfa <pdn_interface_setopt+0x26>
   12cde:	b163      	cbz	r3, 12cfa <pdn_interface_setopt+0x26>
   12ce0:	9902      	ldr	r1, [sp, #8]
   12ce2:	b151      	cbz	r1, 12cfa <pdn_interface_setopt+0x26>
   12ce4:	0c01      	lsrs	r1, r0, #16
   12ce6:	4c25      	ldr	r4, [pc, #148]	; (12d7c <pdn_interface_setopt+0xa8>)
   12ce8:	0409      	lsls	r1, r1, #16
   12cea:	42a1      	cmp	r1, r4
   12cec:	d00b      	beq.n	12d06 <pdn_interface_setopt+0x32>
   12cee:	2009      	movs	r0, #9
   12cf0:	f7fb fefe 	bl	eaf0 <bsd_os_errno_set>
   12cf4:	f04f 30ff 	mov.w	r0, #4294967295
   12cf8:	bd10      	pop	{r4, pc}
   12cfa:	2016      	movs	r0, #22
   12cfc:	f7fb fef8 	bl	eaf0 <bsd_os_errno_set>
   12d00:	f04f 30ff 	mov.w	r0, #4294967295
   12d04:	bd10      	pop	{r4, pc}
   12d06:	f020 40f1 	bic.w	r0, r0, #2021654528	; 0x78800000
   12d0a:	f420 10d0 	bic.w	r0, r0, #1703936	; 0x1a0000
   12d0e:	2809      	cmp	r0, #9
   12d10:	dced      	bgt.n	12cee <pdn_interface_setopt+0x1a>
   12d12:	491b      	ldr	r1, [pc, #108]	; (12d80 <pdn_interface_setopt+0xac>)
   12d14:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
   12d18:	2900      	cmp	r1, #0
   12d1a:	d0e8      	beq.n	12cee <pdn_interface_setopt+0x1a>
   12d1c:	6888      	ldr	r0, [r1, #8]
   12d1e:	2800      	cmp	r0, #0
   12d20:	d0e5      	beq.n	12cee <pdn_interface_setopt+0x1a>
   12d22:	2a01      	cmp	r2, #1
   12d24:	d001      	beq.n	12d2a <pdn_interface_setopt+0x56>
   12d26:	202d      	movs	r0, #45	; 0x2d
   12d28:	e7e8      	b.n	12cfc <pdn_interface_setopt+0x28>
   12d2a:	688a      	ldr	r2, [r1, #8]
   12d2c:	b1fa      	cbz	r2, 12d6e <pdn_interface_setopt+0x9a>
   12d2e:	688a      	ldr	r2, [r1, #8]
   12d30:	2a03      	cmp	r2, #3
   12d32:	d01c      	beq.n	12d6e <pdn_interface_setopt+0x9a>
   12d34:	688a      	ldr	r2, [r1, #8]
   12d36:	2a04      	cmp	r2, #4
   12d38:	d019      	beq.n	12d6e <pdn_interface_setopt+0x9a>
   12d3a:	9a02      	ldr	r2, [sp, #8]
   12d3c:	0890      	lsrs	r0, r2, #2
   12d3e:	1e42      	subs	r2, r0, #1
   12d40:	2a01      	cmp	r2, #1
   12d42:	d8da      	bhi.n	12cfa <pdn_interface_setopt+0x26>
   12d44:	9a02      	ldr	r2, [sp, #8]
   12d46:	0792      	lsls	r2, r2, #30
   12d48:	d1d7      	bne.n	12cfa <pdn_interface_setopt+0x26>
   12d4a:	681a      	ldr	r2, [r3, #0]
   12d4c:	2a02      	cmp	r2, #2
   12d4e:	d010      	beq.n	12d72 <pdn_interface_setopt+0x9e>
   12d50:	2a0a      	cmp	r2, #10
   12d52:	d1d2      	bne.n	12cfa <pdn_interface_setopt+0x26>
   12d54:	2202      	movs	r2, #2
   12d56:	2802      	cmp	r0, #2
   12d58:	d106      	bne.n	12d68 <pdn_interface_setopt+0x94>
   12d5a:	685b      	ldr	r3, [r3, #4]
   12d5c:	2b02      	cmp	r3, #2
   12d5e:	d00a      	beq.n	12d76 <pdn_interface_setopt+0xa2>
   12d60:	2b0a      	cmp	r3, #10
   12d62:	d1ca      	bne.n	12cfa <pdn_interface_setopt+0x26>
   12d64:	f042 0202 	orr.w	r2, r2, #2
   12d68:	670a      	str	r2, [r1, #112]	; 0x70
   12d6a:	2000      	movs	r0, #0
   12d6c:	e7c6      	b.n	12cfc <pdn_interface_setopt+0x28>
   12d6e:	200e      	movs	r0, #14
   12d70:	e7c4      	b.n	12cfc <pdn_interface_setopt+0x28>
   12d72:	2201      	movs	r2, #1
   12d74:	e7ef      	b.n	12d56 <pdn_interface_setopt+0x82>
   12d76:	f042 0201 	orr.w	r2, r2, #1
   12d7a:	e7f5      	b.n	12d68 <pdn_interface_setopt+0x94>
   12d7c:	789a0000 	.word	0x789a0000
   12d80:	20020578 	.word	0x20020578

00012d84 <pdn_interface_getopt>:
   12d84:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   12d88:	f240 2402 	movw	r4, #514	; 0x202
   12d8c:	b083      	sub	sp, #12
   12d8e:	42a1      	cmp	r1, r4
   12d90:	9d0a      	ldr	r5, [sp, #40]	; 0x28
   12d92:	f040 80a9 	bne.w	12ee8 <pdn_interface_getopt+0x164>
   12d96:	461e      	mov	r6, r3
   12d98:	2b00      	cmp	r3, #0
   12d9a:	f000 80a5 	beq.w	12ee8 <pdn_interface_getopt+0x164>
   12d9e:	2d00      	cmp	r5, #0
   12da0:	f000 80a2 	beq.w	12ee8 <pdn_interface_getopt+0x164>
   12da4:	0c03      	lsrs	r3, r0, #16
   12da6:	4956      	ldr	r1, [pc, #344]	; (12f00 <pdn_interface_getopt+0x17c>)
   12da8:	041b      	lsls	r3, r3, #16
   12daa:	428b      	cmp	r3, r1
   12dac:	f040 8082 	bne.w	12eb4 <pdn_interface_getopt+0x130>
   12db0:	f020 44f1 	bic.w	r4, r0, #2021654528	; 0x78800000
   12db4:	f424 14d0 	bic.w	r4, r4, #1703936	; 0x1a0000
   12db8:	2c09      	cmp	r4, #9
   12dba:	dc7b      	bgt.n	12eb4 <pdn_interface_getopt+0x130>
   12dbc:	4b51      	ldr	r3, [pc, #324]	; (12f04 <pdn_interface_getopt+0x180>)
   12dbe:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
   12dc2:	2b00      	cmp	r3, #0
   12dc4:	d076      	beq.n	12eb4 <pdn_interface_getopt+0x130>
   12dc6:	6899      	ldr	r1, [r3, #8]
   12dc8:	2900      	cmp	r1, #0
   12dca:	d073      	beq.n	12eb4 <pdn_interface_getopt+0x130>
   12dcc:	2a02      	cmp	r2, #2
   12dce:	d00e      	beq.n	12dee <pdn_interface_getopt+0x6a>
   12dd0:	2a03      	cmp	r2, #3
   12dd2:	d008      	beq.n	12de6 <pdn_interface_getopt+0x62>
   12dd4:	2a01      	cmp	r2, #1
   12dd6:	d015      	beq.n	12e04 <pdn_interface_getopt+0x80>
   12dd8:	202d      	movs	r0, #45	; 0x2d
   12dda:	f7fb fe89 	bl	eaf0 <bsd_os_errno_set>
   12dde:	2000      	movs	r0, #0
   12de0:	b003      	add	sp, #12
   12de2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   12de6:	682b      	ldr	r3, [r5, #0]
   12de8:	bb23      	cbnz	r3, 12e34 <pdn_interface_getopt+0xb0>
   12dea:	2016      	movs	r0, #22
   12dec:	e7f5      	b.n	12dda <pdn_interface_getopt+0x56>
   12dee:	682a      	ldr	r2, [r5, #0]
   12df0:	2a00      	cmp	r2, #0
   12df2:	d0fa      	beq.n	12dea <pdn_interface_getopt+0x66>
   12df4:	2201      	movs	r2, #1
   12df6:	2000      	movs	r0, #0
   12df8:	681b      	ldr	r3, [r3, #0]
   12dfa:	7033      	strb	r3, [r6, #0]
   12dfc:	602a      	str	r2, [r5, #0]
   12dfe:	b003      	add	sp, #12
   12e00:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   12e04:	689a      	ldr	r2, [r3, #8]
   12e06:	2a00      	cmp	r2, #0
   12e08:	d052      	beq.n	12eb0 <pdn_interface_getopt+0x12c>
   12e0a:	689a      	ldr	r2, [r3, #8]
   12e0c:	2a04      	cmp	r2, #4
   12e0e:	d04f      	beq.n	12eb0 <pdn_interface_getopt+0x12c>
   12e10:	682a      	ldr	r2, [r5, #0]
   12e12:	2a07      	cmp	r2, #7
   12e14:	d9e9      	bls.n	12dea <pdn_interface_getopt+0x66>
   12e16:	f012 0203 	ands.w	r2, r2, #3
   12e1a:	d1e6      	bne.n	12dea <pdn_interface_getopt+0x66>
   12e1c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
   12e1e:	0799      	lsls	r1, r3, #30
   12e20:	d45d      	bmi.n	12ede <pdn_interface_getopt+0x15a>
   12e22:	2104      	movs	r1, #4
   12e24:	07db      	lsls	r3, r3, #31
   12e26:	d502      	bpl.n	12e2e <pdn_interface_getopt+0xaa>
   12e28:	2302      	movs	r3, #2
   12e2a:	50b3      	str	r3, [r6, r2]
   12e2c:	460a      	mov	r2, r1
   12e2e:	602a      	str	r2, [r5, #0]
   12e30:	2000      	movs	r0, #0
   12e32:	e7d5      	b.n	12de0 <pdn_interface_getopt+0x5c>
   12e34:	4a34      	ldr	r2, [pc, #208]	; (12f08 <pdn_interface_getopt+0x184>)
   12e36:	f44f 7180 	mov.w	r1, #256	; 0x100
   12e3a:	4834      	ldr	r0, [pc, #208]	; (12f0c <pdn_interface_getopt+0x188>)
   12e3c:	f8df 80d8 	ldr.w	r8, [pc, #216]	; 12f18 <pdn_interface_getopt+0x194>
   12e40:	f7fb f9e6 	bl	e210 <snprintf>
   12e44:	4831      	ldr	r0, [pc, #196]	; (12f0c <pdn_interface_getopt+0x188>)
   12e46:	f8d8 9000 	ldr.w	r9, [r8]
   12e4a:	2700      	movs	r7, #0
   12e4c:	f006 fcfe 	bl	1984c <strlen>
   12e50:	463b      	mov	r3, r7
   12e52:	4602      	mov	r2, r0
   12e54:	492d      	ldr	r1, [pc, #180]	; (12f0c <pdn_interface_getopt+0x188>)
   12e56:	4648      	mov	r0, r9
   12e58:	9701      	str	r7, [sp, #4]
   12e5a:	9700      	str	r7, [sp, #0]
   12e5c:	f7fc fbcc 	bl	f5f8 <at_interface_write>
   12e60:	4681      	mov	r9, r0
   12e62:	482a      	ldr	r0, [pc, #168]	; (12f0c <pdn_interface_getopt+0x188>)
   12e64:	f006 fcf2 	bl	1984c <strlen>
   12e68:	4548      	cmp	r0, r9
   12e6a:	d143      	bne.n	12ef4 <pdn_interface_getopt+0x170>
   12e6c:	463b      	mov	r3, r7
   12e6e:	e9cd 7700 	strd	r7, r7, [sp]
   12e72:	f44f 7280 	mov.w	r2, #256	; 0x100
   12e76:	4925      	ldr	r1, [pc, #148]	; (12f0c <pdn_interface_getopt+0x188>)
   12e78:	f8d8 0000 	ldr.w	r0, [r8]
   12e7c:	f7fc fcc0 	bl	f800 <at_interface_read>
   12e80:	4607      	mov	r7, r0
   12e82:	4823      	ldr	r0, [pc, #140]	; (12f10 <pdn_interface_getopt+0x18c>)
   12e84:	f006 fce2 	bl	1984c <strlen>
   12e88:	4287      	cmp	r7, r0
   12e8a:	db19      	blt.n	12ec0 <pdn_interface_getopt+0x13c>
   12e8c:	4602      	mov	r2, r0
   12e8e:	491f      	ldr	r1, [pc, #124]	; (12f0c <pdn_interface_getopt+0x188>)
   12e90:	481f      	ldr	r0, [pc, #124]	; (12f10 <pdn_interface_getopt+0x18c>)
   12e92:	f006 fcee 	bl	19872 <strncmp>
   12e96:	4607      	mov	r7, r0
   12e98:	b990      	cbnz	r0, 12ec0 <pdn_interface_getopt+0x13c>
   12e9a:	4620      	mov	r0, r4
   12e9c:	491b      	ldr	r1, [pc, #108]	; (12f0c <pdn_interface_getopt+0x188>)
   12e9e:	f7ff fb41 	bl	12524 <pdn_state_get_parser>
   12ea2:	2800      	cmp	r0, #0
   12ea4:	db99      	blt.n	12dda <pdn_interface_getopt+0x56>
   12ea6:	2301      	movs	r3, #1
   12ea8:	7030      	strb	r0, [r6, #0]
   12eaa:	4638      	mov	r0, r7
   12eac:	602b      	str	r3, [r5, #0]
   12eae:	e797      	b.n	12de0 <pdn_interface_getopt+0x5c>
   12eb0:	200e      	movs	r0, #14
   12eb2:	e792      	b.n	12dda <pdn_interface_getopt+0x56>
   12eb4:	2009      	movs	r0, #9
   12eb6:	f7fb fe1b 	bl	eaf0 <bsd_os_errno_set>
   12eba:	f04f 30ff 	mov.w	r0, #4294967295
   12ebe:	e78f      	b.n	12de0 <pdn_interface_getopt+0x5c>
   12ec0:	4814      	ldr	r0, [pc, #80]	; (12f14 <pdn_interface_getopt+0x190>)
   12ec2:	f006 fcc3 	bl	1984c <strlen>
   12ec6:	4911      	ldr	r1, [pc, #68]	; (12f0c <pdn_interface_getopt+0x188>)
   12ec8:	4602      	mov	r2, r0
   12eca:	4812      	ldr	r0, [pc, #72]	; (12f14 <pdn_interface_getopt+0x190>)
   12ecc:	f006 fcd1 	bl	19872 <strncmp>
   12ed0:	b980      	cbnz	r0, 12ef4 <pdn_interface_getopt+0x170>
   12ed2:	2008      	movs	r0, #8
   12ed4:	f7fb fe0c 	bl	eaf0 <bsd_os_errno_set>
   12ed8:	f04f 30ff 	mov.w	r0, #4294967295
   12edc:	e77d      	b.n	12dda <pdn_interface_getopt+0x56>
   12ede:	220a      	movs	r2, #10
   12ee0:	2108      	movs	r1, #8
   12ee2:	6032      	str	r2, [r6, #0]
   12ee4:	2204      	movs	r2, #4
   12ee6:	e79d      	b.n	12e24 <pdn_interface_getopt+0xa0>
   12ee8:	2016      	movs	r0, #22
   12eea:	f7fb fe01 	bl	eaf0 <bsd_os_errno_set>
   12eee:	f04f 30ff 	mov.w	r0, #4294967295
   12ef2:	e775      	b.n	12de0 <pdn_interface_getopt+0x5c>
   12ef4:	2005      	movs	r0, #5
   12ef6:	f7fb fdfb 	bl	eaf0 <bsd_os_errno_set>
   12efa:	f04f 30ff 	mov.w	r0, #4294967295
   12efe:	e76c      	b.n	12dda <pdn_interface_getopt+0x56>
   12f00:	789a0000 	.word	0x789a0000
   12f04:	20020578 	.word	0x20020578
   12f08:	0001aac0 	.word	0x0001aac0
   12f0c:	20020478 	.word	0x20020478
   12f10:	0001aacc 	.word	0x0001aacc
   12f14:	0001aaf0 	.word	0x0001aaf0
   12f18:	20020474 	.word	0x20020474

00012f1c <pdn_interface_pdn_id_get>:
   12f1c:	2900      	cmp	r1, #0
   12f1e:	f000 83b9 	beq.w	13694 <pdn_interface_pdn_id_get+0x778>
   12f22:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   12f26:	4ca3      	ldr	r4, [pc, #652]	; (131b4 <pdn_interface_pdn_id_get+0x298>)
   12f28:	2802      	cmp	r0, #2
   12f2a:	b083      	sub	sp, #12
   12f2c:	460d      	mov	r5, r1
   12f2e:	6823      	ldr	r3, [r4, #0]
   12f30:	f000 8094 	beq.w	1305c <pdn_interface_pdn_id_get+0x140>
   12f34:	280a      	cmp	r0, #10
   12f36:	d03f      	beq.n	12fb8 <pdn_interface_pdn_id_get+0x9c>
   12f38:	b11b      	cbz	r3, 12f42 <pdn_interface_pdn_id_get+0x26>
   12f3a:	689b      	ldr	r3, [r3, #8]
   12f3c:	2b03      	cmp	r3, #3
   12f3e:	f000 8127 	beq.w	13190 <pdn_interface_pdn_id_get+0x274>
   12f42:	6863      	ldr	r3, [r4, #4]
   12f44:	b11b      	cbz	r3, 12f4e <pdn_interface_pdn_id_get+0x32>
   12f46:	689b      	ldr	r3, [r3, #8]
   12f48:	2b03      	cmp	r3, #3
   12f4a:	f000 8110 	beq.w	1316e <pdn_interface_pdn_id_get+0x252>
   12f4e:	68a3      	ldr	r3, [r4, #8]
   12f50:	b11b      	cbz	r3, 12f5a <pdn_interface_pdn_id_get+0x3e>
   12f52:	689b      	ldr	r3, [r3, #8]
   12f54:	2b03      	cmp	r3, #3
   12f56:	f000 80f9 	beq.w	1314c <pdn_interface_pdn_id_get+0x230>
   12f5a:	68e3      	ldr	r3, [r4, #12]
   12f5c:	b11b      	cbz	r3, 12f66 <pdn_interface_pdn_id_get+0x4a>
   12f5e:	689b      	ldr	r3, [r3, #8]
   12f60:	2b03      	cmp	r3, #3
   12f62:	f000 80e2 	beq.w	1312a <pdn_interface_pdn_id_get+0x20e>
   12f66:	6923      	ldr	r3, [r4, #16]
   12f68:	b11b      	cbz	r3, 12f72 <pdn_interface_pdn_id_get+0x56>
   12f6a:	689b      	ldr	r3, [r3, #8]
   12f6c:	2b03      	cmp	r3, #3
   12f6e:	f000 8123 	beq.w	131b8 <pdn_interface_pdn_id_get+0x29c>
   12f72:	6963      	ldr	r3, [r4, #20]
   12f74:	b11b      	cbz	r3, 12f7e <pdn_interface_pdn_id_get+0x62>
   12f76:	689b      	ldr	r3, [r3, #8]
   12f78:	2b03      	cmp	r3, #3
   12f7a:	f000 8161 	beq.w	13240 <pdn_interface_pdn_id_get+0x324>
   12f7e:	69a3      	ldr	r3, [r4, #24]
   12f80:	b11b      	cbz	r3, 12f8a <pdn_interface_pdn_id_get+0x6e>
   12f82:	689b      	ldr	r3, [r3, #8]
   12f84:	2b03      	cmp	r3, #3
   12f86:	f000 814a 	beq.w	1321e <pdn_interface_pdn_id_get+0x302>
   12f8a:	69e3      	ldr	r3, [r4, #28]
   12f8c:	b11b      	cbz	r3, 12f96 <pdn_interface_pdn_id_get+0x7a>
   12f8e:	689b      	ldr	r3, [r3, #8]
   12f90:	2b03      	cmp	r3, #3
   12f92:	f000 8133 	beq.w	131fc <pdn_interface_pdn_id_get+0x2e0>
   12f96:	6a23      	ldr	r3, [r4, #32]
   12f98:	b11b      	cbz	r3, 12fa2 <pdn_interface_pdn_id_get+0x86>
   12f9a:	689b      	ldr	r3, [r3, #8]
   12f9c:	2b03      	cmp	r3, #3
   12f9e:	f000 811c 	beq.w	131da <pdn_interface_pdn_id_get+0x2be>
   12fa2:	6a63      	ldr	r3, [r4, #36]	; 0x24
   12fa4:	b11b      	cbz	r3, 12fae <pdn_interface_pdn_id_get+0x92>
   12fa6:	689b      	ldr	r3, [r3, #8]
   12fa8:	2b03      	cmp	r3, #3
   12faa:	f000 80ad 	beq.w	13108 <pdn_interface_pdn_id_get+0x1ec>
   12fae:	f04f 30ff 	mov.w	r0, #4294967295
   12fb2:	b003      	add	sp, #12
   12fb4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   12fb8:	b11b      	cbz	r3, 12fc2 <pdn_interface_pdn_id_get+0xa6>
   12fba:	689b      	ldr	r3, [r3, #8]
   12fbc:	2b03      	cmp	r3, #3
   12fbe:	f000 8335 	beq.w	1362c <pdn_interface_pdn_id_get+0x710>
   12fc2:	6863      	ldr	r3, [r4, #4]
   12fc4:	b11b      	cbz	r3, 12fce <pdn_interface_pdn_id_get+0xb2>
   12fc6:	689b      	ldr	r3, [r3, #8]
   12fc8:	2b03      	cmp	r3, #3
   12fca:	f000 82fd 	beq.w	135c8 <pdn_interface_pdn_id_get+0x6ac>
   12fce:	68a3      	ldr	r3, [r4, #8]
   12fd0:	b11b      	cbz	r3, 12fda <pdn_interface_pdn_id_get+0xbe>
   12fd2:	689b      	ldr	r3, [r3, #8]
   12fd4:	2b03      	cmp	r3, #3
   12fd6:	f000 82d5 	beq.w	13584 <pdn_interface_pdn_id_get+0x668>
   12fda:	68e3      	ldr	r3, [r4, #12]
   12fdc:	b11b      	cbz	r3, 12fe6 <pdn_interface_pdn_id_get+0xca>
   12fde:	689e      	ldr	r6, [r3, #8]
   12fe0:	2e03      	cmp	r6, #3
   12fe2:	f000 81f0 	beq.w	133c6 <pdn_interface_pdn_id_get+0x4aa>
   12fe6:	6923      	ldr	r3, [r4, #16]
   12fe8:	b11b      	cbz	r3, 12ff2 <pdn_interface_pdn_id_get+0xd6>
   12fea:	689b      	ldr	r3, [r3, #8]
   12fec:	2b03      	cmp	r3, #3
   12fee:	f000 8203 	beq.w	133f8 <pdn_interface_pdn_id_get+0x4dc>
   12ff2:	6963      	ldr	r3, [r4, #20]
   12ff4:	b11b      	cbz	r3, 12ffe <pdn_interface_pdn_id_get+0xe2>
   12ff6:	689b      	ldr	r3, [r3, #8]
   12ff8:	2b03      	cmp	r3, #3
   12ffa:	f000 8215 	beq.w	13428 <pdn_interface_pdn_id_get+0x50c>
   12ffe:	69a3      	ldr	r3, [r4, #24]
   13000:	b11b      	cbz	r3, 1300a <pdn_interface_pdn_id_get+0xee>
   13002:	689b      	ldr	r3, [r3, #8]
   13004:	2b03      	cmp	r3, #3
   13006:	f000 8227 	beq.w	13458 <pdn_interface_pdn_id_get+0x53c>
   1300a:	69e3      	ldr	r3, [r4, #28]
   1300c:	b11b      	cbz	r3, 13016 <pdn_interface_pdn_id_get+0xfa>
   1300e:	689b      	ldr	r3, [r3, #8]
   13010:	2b03      	cmp	r3, #3
   13012:	f000 8239 	beq.w	13488 <pdn_interface_pdn_id_get+0x56c>
   13016:	6a23      	ldr	r3, [r4, #32]
   13018:	b11b      	cbz	r3, 13022 <pdn_interface_pdn_id_get+0x106>
   1301a:	689b      	ldr	r3, [r3, #8]
   1301c:	2b03      	cmp	r3, #3
   1301e:	f000 824d 	beq.w	134bc <pdn_interface_pdn_id_get+0x5a0>
   13022:	6a63      	ldr	r3, [r4, #36]	; 0x24
   13024:	2b00      	cmp	r3, #0
   13026:	d0c2      	beq.n	12fae <pdn_interface_pdn_id_get+0x92>
   13028:	689b      	ldr	r3, [r3, #8]
   1302a:	2b03      	cmp	r3, #3
   1302c:	d1bf      	bne.n	12fae <pdn_interface_pdn_id_get+0x92>
   1302e:	4628      	mov	r0, r5
   13030:	f006 fc0c 	bl	1984c <strlen>
   13034:	4606      	mov	r6, r0
   13036:	6a60      	ldr	r0, [r4, #36]	; 0x24
   13038:	300c      	adds	r0, #12
   1303a:	f006 fc07 	bl	1984c <strlen>
   1303e:	42b0      	cmp	r0, r6
   13040:	d1b5      	bne.n	12fae <pdn_interface_pdn_id_get+0x92>
   13042:	6a61      	ldr	r1, [r4, #36]	; 0x24
   13044:	4628      	mov	r0, r5
   13046:	310c      	adds	r1, #12
   13048:	f006 fc07 	bl	1985a <strcmp>
   1304c:	2800      	cmp	r0, #0
   1304e:	d1ae      	bne.n	12fae <pdn_interface_pdn_id_get+0x92>
   13050:	6a63      	ldr	r3, [r4, #36]	; 0x24
   13052:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   13054:	0792      	lsls	r2, r2, #30
   13056:	d5aa      	bpl.n	12fae <pdn_interface_pdn_id_get+0x92>
   13058:	2609      	movs	r6, #9
   1305a:	e11a      	b.n	13292 <pdn_interface_pdn_id_get+0x376>
   1305c:	b11b      	cbz	r3, 13066 <pdn_interface_pdn_id_get+0x14a>
   1305e:	689b      	ldr	r3, [r3, #8]
   13060:	2b03      	cmp	r3, #3
   13062:	f000 82fd 	beq.w	13660 <pdn_interface_pdn_id_get+0x744>
   13066:	6863      	ldr	r3, [r4, #4]
   13068:	b11b      	cbz	r3, 13072 <pdn_interface_pdn_id_get+0x156>
   1306a:	689b      	ldr	r3, [r3, #8]
   1306c:	2b03      	cmp	r3, #3
   1306e:	f000 82c5 	beq.w	135fc <pdn_interface_pdn_id_get+0x6e0>
   13072:	68a3      	ldr	r3, [r4, #8]
   13074:	b11b      	cbz	r3, 1307e <pdn_interface_pdn_id_get+0x162>
   13076:	689b      	ldr	r3, [r3, #8]
   13078:	2b03      	cmp	r3, #3
   1307a:	f000 8269 	beq.w	13550 <pdn_interface_pdn_id_get+0x634>
   1307e:	68e3      	ldr	r3, [r4, #12]
   13080:	b11b      	cbz	r3, 1308a <pdn_interface_pdn_id_get+0x16e>
   13082:	689e      	ldr	r6, [r3, #8]
   13084:	2e03      	cmp	r6, #3
   13086:	f000 80ec 	beq.w	13262 <pdn_interface_pdn_id_get+0x346>
   1308a:	6923      	ldr	r3, [r4, #16]
   1308c:	b11b      	cbz	r3, 13096 <pdn_interface_pdn_id_get+0x17a>
   1308e:	689b      	ldr	r3, [r3, #8]
   13090:	2b03      	cmp	r3, #3
   13092:	f000 814a 	beq.w	1332a <pdn_interface_pdn_id_get+0x40e>
   13096:	6963      	ldr	r3, [r4, #20]
   13098:	b11b      	cbz	r3, 130a2 <pdn_interface_pdn_id_get+0x186>
   1309a:	689b      	ldr	r3, [r3, #8]
   1309c:	2b03      	cmp	r3, #3
   1309e:	f000 815e 	beq.w	1335e <pdn_interface_pdn_id_get+0x442>
   130a2:	69a3      	ldr	r3, [r4, #24]
   130a4:	b11b      	cbz	r3, 130ae <pdn_interface_pdn_id_get+0x192>
   130a6:	689b      	ldr	r3, [r3, #8]
   130a8:	2b03      	cmp	r3, #3
   130aa:	f000 8172 	beq.w	13392 <pdn_interface_pdn_id_get+0x476>
   130ae:	69e3      	ldr	r3, [r4, #28]
   130b0:	b11b      	cbz	r3, 130ba <pdn_interface_pdn_id_get+0x19e>
   130b2:	689b      	ldr	r3, [r3, #8]
   130b4:	2b03      	cmp	r3, #3
   130b6:	f000 821b 	beq.w	134f0 <pdn_interface_pdn_id_get+0x5d4>
   130ba:	6a23      	ldr	r3, [r4, #32]
   130bc:	b11b      	cbz	r3, 130c6 <pdn_interface_pdn_id_get+0x1aa>
   130be:	689b      	ldr	r3, [r3, #8]
   130c0:	2b03      	cmp	r3, #3
   130c2:	f000 822d 	beq.w	13520 <pdn_interface_pdn_id_get+0x604>
   130c6:	6a63      	ldr	r3, [r4, #36]	; 0x24
   130c8:	2b00      	cmp	r3, #0
   130ca:	f43f af70 	beq.w	12fae <pdn_interface_pdn_id_get+0x92>
   130ce:	689b      	ldr	r3, [r3, #8]
   130d0:	2b03      	cmp	r3, #3
   130d2:	f47f af6c 	bne.w	12fae <pdn_interface_pdn_id_get+0x92>
   130d6:	4628      	mov	r0, r5
   130d8:	f006 fbb8 	bl	1984c <strlen>
   130dc:	4606      	mov	r6, r0
   130de:	6a60      	ldr	r0, [r4, #36]	; 0x24
   130e0:	300c      	adds	r0, #12
   130e2:	f006 fbb3 	bl	1984c <strlen>
   130e6:	4286      	cmp	r6, r0
   130e8:	f47f af61 	bne.w	12fae <pdn_interface_pdn_id_get+0x92>
   130ec:	6a61      	ldr	r1, [r4, #36]	; 0x24
   130ee:	4628      	mov	r0, r5
   130f0:	310c      	adds	r1, #12
   130f2:	f006 fbb2 	bl	1985a <strcmp>
   130f6:	2800      	cmp	r0, #0
   130f8:	f47f af59 	bne.w	12fae <pdn_interface_pdn_id_get+0x92>
   130fc:	6a63      	ldr	r3, [r4, #36]	; 0x24
   130fe:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   13100:	07d2      	lsls	r2, r2, #31
   13102:	f57f af54 	bpl.w	12fae <pdn_interface_pdn_id_get+0x92>
   13106:	e7a7      	b.n	13058 <pdn_interface_pdn_id_get+0x13c>
   13108:	4628      	mov	r0, r5
   1310a:	f006 fb9f 	bl	1984c <strlen>
   1310e:	4606      	mov	r6, r0
   13110:	6a60      	ldr	r0, [r4, #36]	; 0x24
   13112:	300c      	adds	r0, #12
   13114:	f006 fb9a 	bl	1984c <strlen>
   13118:	42b0      	cmp	r0, r6
   1311a:	f47f af48 	bne.w	12fae <pdn_interface_pdn_id_get+0x92>
   1311e:	6a61      	ldr	r1, [r4, #36]	; 0x24
   13120:	4628      	mov	r0, r5
   13122:	310c      	adds	r1, #12
   13124:	f006 fb99 	bl	1985a <strcmp>
   13128:	e741      	b.n	12fae <pdn_interface_pdn_id_get+0x92>
   1312a:	4628      	mov	r0, r5
   1312c:	f006 fb8e 	bl	1984c <strlen>
   13130:	4606      	mov	r6, r0
   13132:	68e0      	ldr	r0, [r4, #12]
   13134:	300c      	adds	r0, #12
   13136:	f006 fb89 	bl	1984c <strlen>
   1313a:	4286      	cmp	r6, r0
   1313c:	f47f af13 	bne.w	12f66 <pdn_interface_pdn_id_get+0x4a>
   13140:	68e1      	ldr	r1, [r4, #12]
   13142:	4628      	mov	r0, r5
   13144:	310c      	adds	r1, #12
   13146:	f006 fb88 	bl	1985a <strcmp>
   1314a:	e70c      	b.n	12f66 <pdn_interface_pdn_id_get+0x4a>
   1314c:	4628      	mov	r0, r5
   1314e:	f006 fb7d 	bl	1984c <strlen>
   13152:	4606      	mov	r6, r0
   13154:	68a0      	ldr	r0, [r4, #8]
   13156:	300c      	adds	r0, #12
   13158:	f006 fb78 	bl	1984c <strlen>
   1315c:	4286      	cmp	r6, r0
   1315e:	f47f aefc 	bne.w	12f5a <pdn_interface_pdn_id_get+0x3e>
   13162:	68a1      	ldr	r1, [r4, #8]
   13164:	4628      	mov	r0, r5
   13166:	310c      	adds	r1, #12
   13168:	f006 fb77 	bl	1985a <strcmp>
   1316c:	e6f5      	b.n	12f5a <pdn_interface_pdn_id_get+0x3e>
   1316e:	4628      	mov	r0, r5
   13170:	f006 fb6c 	bl	1984c <strlen>
   13174:	4606      	mov	r6, r0
   13176:	6860      	ldr	r0, [r4, #4]
   13178:	300c      	adds	r0, #12
   1317a:	f006 fb67 	bl	1984c <strlen>
   1317e:	4286      	cmp	r6, r0
   13180:	f47f aee5 	bne.w	12f4e <pdn_interface_pdn_id_get+0x32>
   13184:	6861      	ldr	r1, [r4, #4]
   13186:	4628      	mov	r0, r5
   13188:	310c      	adds	r1, #12
   1318a:	f006 fb66 	bl	1985a <strcmp>
   1318e:	e6de      	b.n	12f4e <pdn_interface_pdn_id_get+0x32>
   13190:	4608      	mov	r0, r1
   13192:	f006 fb5b 	bl	1984c <strlen>
   13196:	4606      	mov	r6, r0
   13198:	6820      	ldr	r0, [r4, #0]
   1319a:	300c      	adds	r0, #12
   1319c:	f006 fb56 	bl	1984c <strlen>
   131a0:	4286      	cmp	r6, r0
   131a2:	f47f aece 	bne.w	12f42 <pdn_interface_pdn_id_get+0x26>
   131a6:	6821      	ldr	r1, [r4, #0]
   131a8:	4628      	mov	r0, r5
   131aa:	310c      	adds	r1, #12
   131ac:	f006 fb55 	bl	1985a <strcmp>
   131b0:	e6c7      	b.n	12f42 <pdn_interface_pdn_id_get+0x26>
   131b2:	bf00      	nop
   131b4:	20020578 	.word	0x20020578
   131b8:	4628      	mov	r0, r5
   131ba:	f006 fb47 	bl	1984c <strlen>
   131be:	4606      	mov	r6, r0
   131c0:	6920      	ldr	r0, [r4, #16]
   131c2:	300c      	adds	r0, #12
   131c4:	f006 fb42 	bl	1984c <strlen>
   131c8:	4286      	cmp	r6, r0
   131ca:	f47f aed2 	bne.w	12f72 <pdn_interface_pdn_id_get+0x56>
   131ce:	6921      	ldr	r1, [r4, #16]
   131d0:	4628      	mov	r0, r5
   131d2:	310c      	adds	r1, #12
   131d4:	f006 fb41 	bl	1985a <strcmp>
   131d8:	e6cb      	b.n	12f72 <pdn_interface_pdn_id_get+0x56>
   131da:	4628      	mov	r0, r5
   131dc:	f006 fb36 	bl	1984c <strlen>
   131e0:	4606      	mov	r6, r0
   131e2:	6a20      	ldr	r0, [r4, #32]
   131e4:	300c      	adds	r0, #12
   131e6:	f006 fb31 	bl	1984c <strlen>
   131ea:	4286      	cmp	r6, r0
   131ec:	f47f aed9 	bne.w	12fa2 <pdn_interface_pdn_id_get+0x86>
   131f0:	6a21      	ldr	r1, [r4, #32]
   131f2:	4628      	mov	r0, r5
   131f4:	310c      	adds	r1, #12
   131f6:	f006 fb30 	bl	1985a <strcmp>
   131fa:	e6d2      	b.n	12fa2 <pdn_interface_pdn_id_get+0x86>
   131fc:	4628      	mov	r0, r5
   131fe:	f006 fb25 	bl	1984c <strlen>
   13202:	4606      	mov	r6, r0
   13204:	69e0      	ldr	r0, [r4, #28]
   13206:	300c      	adds	r0, #12
   13208:	f006 fb20 	bl	1984c <strlen>
   1320c:	4286      	cmp	r6, r0
   1320e:	f47f aec2 	bne.w	12f96 <pdn_interface_pdn_id_get+0x7a>
   13212:	69e1      	ldr	r1, [r4, #28]
   13214:	4628      	mov	r0, r5
   13216:	310c      	adds	r1, #12
   13218:	f006 fb1f 	bl	1985a <strcmp>
   1321c:	e6bb      	b.n	12f96 <pdn_interface_pdn_id_get+0x7a>
   1321e:	4628      	mov	r0, r5
   13220:	f006 fb14 	bl	1984c <strlen>
   13224:	4606      	mov	r6, r0
   13226:	69a0      	ldr	r0, [r4, #24]
   13228:	300c      	adds	r0, #12
   1322a:	f006 fb0f 	bl	1984c <strlen>
   1322e:	4286      	cmp	r6, r0
   13230:	f47f aeab 	bne.w	12f8a <pdn_interface_pdn_id_get+0x6e>
   13234:	69a1      	ldr	r1, [r4, #24]
   13236:	4628      	mov	r0, r5
   13238:	310c      	adds	r1, #12
   1323a:	f006 fb0e 	bl	1985a <strcmp>
   1323e:	e6a4      	b.n	12f8a <pdn_interface_pdn_id_get+0x6e>
   13240:	4628      	mov	r0, r5
   13242:	f006 fb03 	bl	1984c <strlen>
   13246:	4606      	mov	r6, r0
   13248:	6960      	ldr	r0, [r4, #20]
   1324a:	300c      	adds	r0, #12
   1324c:	f006 fafe 	bl	1984c <strlen>
   13250:	4286      	cmp	r6, r0
   13252:	f47f ae94 	bne.w	12f7e <pdn_interface_pdn_id_get+0x62>
   13256:	6961      	ldr	r1, [r4, #20]
   13258:	4628      	mov	r0, r5
   1325a:	310c      	adds	r1, #12
   1325c:	f006 fafd 	bl	1985a <strcmp>
   13260:	e68d      	b.n	12f7e <pdn_interface_pdn_id_get+0x62>
   13262:	4628      	mov	r0, r5
   13264:	f006 faf2 	bl	1984c <strlen>
   13268:	4607      	mov	r7, r0
   1326a:	68e0      	ldr	r0, [r4, #12]
   1326c:	300c      	adds	r0, #12
   1326e:	f006 faed 	bl	1984c <strlen>
   13272:	4287      	cmp	r7, r0
   13274:	f47f af09 	bne.w	1308a <pdn_interface_pdn_id_get+0x16e>
   13278:	68e1      	ldr	r1, [r4, #12]
   1327a:	4628      	mov	r0, r5
   1327c:	310c      	adds	r1, #12
   1327e:	f006 faec 	bl	1985a <strcmp>
   13282:	2800      	cmp	r0, #0
   13284:	f47f af01 	bne.w	1308a <pdn_interface_pdn_id_get+0x16e>
   13288:	68e3      	ldr	r3, [r4, #12]
   1328a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   1328c:	07d1      	lsls	r1, r2, #31
   1328e:	f57f aefc 	bpl.w	1308a <pdn_interface_pdn_id_get+0x16e>
   13292:	6858      	ldr	r0, [r3, #4]
   13294:	1c43      	adds	r3, r0, #1
   13296:	f47f ae8c 	bne.w	12fb2 <pdn_interface_pdn_id_get+0x96>
   1329a:	4dc6      	ldr	r5, [pc, #792]	; (135b4 <pdn_interface_pdn_id_get+0x698>)
   1329c:	4ac6      	ldr	r2, [pc, #792]	; (135b8 <pdn_interface_pdn_id_get+0x69c>)
   1329e:	f44f 7180 	mov.w	r1, #256	; 0x100
   132a2:	4628      	mov	r0, r5
   132a4:	f7fa ffb4 	bl	e210 <snprintf>
   132a8:	f854 3026 	ldr.w	r3, [r4, r6, lsl #2]
   132ac:	f5c0 7180 	rsb	r1, r0, #256	; 0x100
   132b0:	681b      	ldr	r3, [r3, #0]
   132b2:	4ac2      	ldr	r2, [pc, #776]	; (135bc <pdn_interface_pdn_id_get+0x6a0>)
   132b4:	4428      	add	r0, r5
   132b6:	f8df 830c 	ldr.w	r8, [pc, #780]	; 135c4 <pdn_interface_pdn_id_get+0x6a8>
   132ba:	f7fa ffa9 	bl	e210 <snprintf>
   132be:	4628      	mov	r0, r5
   132c0:	f8d8 9000 	ldr.w	r9, [r8]
   132c4:	2700      	movs	r7, #0
   132c6:	f006 fac1 	bl	1984c <strlen>
   132ca:	4629      	mov	r1, r5
   132cc:	4602      	mov	r2, r0
   132ce:	463b      	mov	r3, r7
   132d0:	4648      	mov	r0, r9
   132d2:	9701      	str	r7, [sp, #4]
   132d4:	9700      	str	r7, [sp, #0]
   132d6:	f7fc f98f 	bl	f5f8 <at_interface_write>
   132da:	4681      	mov	r9, r0
   132dc:	4628      	mov	r0, r5
   132de:	f006 fab5 	bl	1984c <strlen>
   132e2:	4548      	cmp	r0, r9
   132e4:	f040 81e9 	bne.w	136ba <pdn_interface_pdn_id_get+0x79e>
   132e8:	463b      	mov	r3, r7
   132ea:	f44f 7280 	mov.w	r2, #256	; 0x100
   132ee:	e9cd 7700 	strd	r7, r7, [sp]
   132f2:	4629      	mov	r1, r5
   132f4:	f8d8 0000 	ldr.w	r0, [r8]
   132f8:	f7fc fa82 	bl	f800 <at_interface_read>
   132fc:	4607      	mov	r7, r0
   132fe:	48b0      	ldr	r0, [pc, #704]	; (135c0 <pdn_interface_pdn_id_get+0x6a4>)
   13300:	f006 faa4 	bl	1984c <strlen>
   13304:	4287      	cmp	r7, r0
   13306:	4602      	mov	r2, r0
   13308:	f2c0 81c7 	blt.w	1369a <pdn_interface_pdn_id_get+0x77e>
   1330c:	4629      	mov	r1, r5
   1330e:	48ac      	ldr	r0, [pc, #688]	; (135c0 <pdn_interface_pdn_id_get+0x6a4>)
   13310:	f006 faaf 	bl	19872 <strncmp>
   13314:	2800      	cmp	r0, #0
   13316:	f040 81c0 	bne.w	1369a <pdn_interface_pdn_id_get+0x77e>
   1331a:	4629      	mov	r1, r5
   1331c:	4630      	mov	r0, r6
   1331e:	f7ff f937 	bl	12590 <pdn_id_get_parser>
   13322:	f854 3026 	ldr.w	r3, [r4, r6, lsl #2]
   13326:	6858      	ldr	r0, [r3, #4]
   13328:	e643      	b.n	12fb2 <pdn_interface_pdn_id_get+0x96>
   1332a:	4628      	mov	r0, r5
   1332c:	f006 fa8e 	bl	1984c <strlen>
   13330:	4606      	mov	r6, r0
   13332:	6920      	ldr	r0, [r4, #16]
   13334:	300c      	adds	r0, #12
   13336:	f006 fa89 	bl	1984c <strlen>
   1333a:	4286      	cmp	r6, r0
   1333c:	f47f aeab 	bne.w	13096 <pdn_interface_pdn_id_get+0x17a>
   13340:	6921      	ldr	r1, [r4, #16]
   13342:	4628      	mov	r0, r5
   13344:	310c      	adds	r1, #12
   13346:	f006 fa88 	bl	1985a <strcmp>
   1334a:	2800      	cmp	r0, #0
   1334c:	f47f aea3 	bne.w	13096 <pdn_interface_pdn_id_get+0x17a>
   13350:	6923      	ldr	r3, [r4, #16]
   13352:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   13354:	07d2      	lsls	r2, r2, #31
   13356:	f57f ae9e 	bpl.w	13096 <pdn_interface_pdn_id_get+0x17a>
   1335a:	2604      	movs	r6, #4
   1335c:	e799      	b.n	13292 <pdn_interface_pdn_id_get+0x376>
   1335e:	4628      	mov	r0, r5
   13360:	f006 fa74 	bl	1984c <strlen>
   13364:	4606      	mov	r6, r0
   13366:	6960      	ldr	r0, [r4, #20]
   13368:	300c      	adds	r0, #12
   1336a:	f006 fa6f 	bl	1984c <strlen>
   1336e:	4286      	cmp	r6, r0
   13370:	f47f ae97 	bne.w	130a2 <pdn_interface_pdn_id_get+0x186>
   13374:	6961      	ldr	r1, [r4, #20]
   13376:	4628      	mov	r0, r5
   13378:	310c      	adds	r1, #12
   1337a:	f006 fa6e 	bl	1985a <strcmp>
   1337e:	2800      	cmp	r0, #0
   13380:	f47f ae8f 	bne.w	130a2 <pdn_interface_pdn_id_get+0x186>
   13384:	6963      	ldr	r3, [r4, #20]
   13386:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   13388:	07d7      	lsls	r7, r2, #31
   1338a:	f57f ae8a 	bpl.w	130a2 <pdn_interface_pdn_id_get+0x186>
   1338e:	2605      	movs	r6, #5
   13390:	e77f      	b.n	13292 <pdn_interface_pdn_id_get+0x376>
   13392:	4628      	mov	r0, r5
   13394:	f006 fa5a 	bl	1984c <strlen>
   13398:	4606      	mov	r6, r0
   1339a:	69a0      	ldr	r0, [r4, #24]
   1339c:	300c      	adds	r0, #12
   1339e:	f006 fa55 	bl	1984c <strlen>
   133a2:	4286      	cmp	r6, r0
   133a4:	f47f ae83 	bne.w	130ae <pdn_interface_pdn_id_get+0x192>
   133a8:	69a1      	ldr	r1, [r4, #24]
   133aa:	4628      	mov	r0, r5
   133ac:	310c      	adds	r1, #12
   133ae:	f006 fa54 	bl	1985a <strcmp>
   133b2:	2800      	cmp	r0, #0
   133b4:	f47f ae7b 	bne.w	130ae <pdn_interface_pdn_id_get+0x192>
   133b8:	69a3      	ldr	r3, [r4, #24]
   133ba:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   133bc:	07d6      	lsls	r6, r2, #31
   133be:	f57f ae76 	bpl.w	130ae <pdn_interface_pdn_id_get+0x192>
   133c2:	2606      	movs	r6, #6
   133c4:	e765      	b.n	13292 <pdn_interface_pdn_id_get+0x376>
   133c6:	4628      	mov	r0, r5
   133c8:	f006 fa40 	bl	1984c <strlen>
   133cc:	4607      	mov	r7, r0
   133ce:	68e0      	ldr	r0, [r4, #12]
   133d0:	300c      	adds	r0, #12
   133d2:	f006 fa3b 	bl	1984c <strlen>
   133d6:	4287      	cmp	r7, r0
   133d8:	f47f ae05 	bne.w	12fe6 <pdn_interface_pdn_id_get+0xca>
   133dc:	68e1      	ldr	r1, [r4, #12]
   133de:	4628      	mov	r0, r5
   133e0:	310c      	adds	r1, #12
   133e2:	f006 fa3a 	bl	1985a <strcmp>
   133e6:	2800      	cmp	r0, #0
   133e8:	f47f adfd 	bne.w	12fe6 <pdn_interface_pdn_id_get+0xca>
   133ec:	68e3      	ldr	r3, [r4, #12]
   133ee:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   133f0:	0791      	lsls	r1, r2, #30
   133f2:	f53f af4e 	bmi.w	13292 <pdn_interface_pdn_id_get+0x376>
   133f6:	e5f6      	b.n	12fe6 <pdn_interface_pdn_id_get+0xca>
   133f8:	4628      	mov	r0, r5
   133fa:	f006 fa27 	bl	1984c <strlen>
   133fe:	4606      	mov	r6, r0
   13400:	6920      	ldr	r0, [r4, #16]
   13402:	300c      	adds	r0, #12
   13404:	f006 fa22 	bl	1984c <strlen>
   13408:	4286      	cmp	r6, r0
   1340a:	f47f adf2 	bne.w	12ff2 <pdn_interface_pdn_id_get+0xd6>
   1340e:	6921      	ldr	r1, [r4, #16]
   13410:	4628      	mov	r0, r5
   13412:	310c      	adds	r1, #12
   13414:	f006 fa21 	bl	1985a <strcmp>
   13418:	2800      	cmp	r0, #0
   1341a:	f47f adea 	bne.w	12ff2 <pdn_interface_pdn_id_get+0xd6>
   1341e:	6923      	ldr	r3, [r4, #16]
   13420:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   13422:	0792      	lsls	r2, r2, #30
   13424:	d499      	bmi.n	1335a <pdn_interface_pdn_id_get+0x43e>
   13426:	e5e4      	b.n	12ff2 <pdn_interface_pdn_id_get+0xd6>
   13428:	4628      	mov	r0, r5
   1342a:	f006 fa0f 	bl	1984c <strlen>
   1342e:	4606      	mov	r6, r0
   13430:	6960      	ldr	r0, [r4, #20]
   13432:	300c      	adds	r0, #12
   13434:	f006 fa0a 	bl	1984c <strlen>
   13438:	4286      	cmp	r6, r0
   1343a:	f47f ade0 	bne.w	12ffe <pdn_interface_pdn_id_get+0xe2>
   1343e:	6961      	ldr	r1, [r4, #20]
   13440:	4628      	mov	r0, r5
   13442:	310c      	adds	r1, #12
   13444:	f006 fa09 	bl	1985a <strcmp>
   13448:	2800      	cmp	r0, #0
   1344a:	f47f add8 	bne.w	12ffe <pdn_interface_pdn_id_get+0xe2>
   1344e:	6963      	ldr	r3, [r4, #20]
   13450:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   13452:	0797      	lsls	r7, r2, #30
   13454:	d49b      	bmi.n	1338e <pdn_interface_pdn_id_get+0x472>
   13456:	e5d2      	b.n	12ffe <pdn_interface_pdn_id_get+0xe2>
   13458:	4628      	mov	r0, r5
   1345a:	f006 f9f7 	bl	1984c <strlen>
   1345e:	4606      	mov	r6, r0
   13460:	69a0      	ldr	r0, [r4, #24]
   13462:	300c      	adds	r0, #12
   13464:	f006 f9f2 	bl	1984c <strlen>
   13468:	4286      	cmp	r6, r0
   1346a:	f47f adce 	bne.w	1300a <pdn_interface_pdn_id_get+0xee>
   1346e:	69a1      	ldr	r1, [r4, #24]
   13470:	4628      	mov	r0, r5
   13472:	310c      	adds	r1, #12
   13474:	f006 f9f1 	bl	1985a <strcmp>
   13478:	2800      	cmp	r0, #0
   1347a:	f47f adc6 	bne.w	1300a <pdn_interface_pdn_id_get+0xee>
   1347e:	69a3      	ldr	r3, [r4, #24]
   13480:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   13482:	0796      	lsls	r6, r2, #30
   13484:	d49d      	bmi.n	133c2 <pdn_interface_pdn_id_get+0x4a6>
   13486:	e5c0      	b.n	1300a <pdn_interface_pdn_id_get+0xee>
   13488:	4628      	mov	r0, r5
   1348a:	f006 f9df 	bl	1984c <strlen>
   1348e:	4606      	mov	r6, r0
   13490:	69e0      	ldr	r0, [r4, #28]
   13492:	300c      	adds	r0, #12
   13494:	f006 f9da 	bl	1984c <strlen>
   13498:	4286      	cmp	r6, r0
   1349a:	f47f adbc 	bne.w	13016 <pdn_interface_pdn_id_get+0xfa>
   1349e:	69e1      	ldr	r1, [r4, #28]
   134a0:	4628      	mov	r0, r5
   134a2:	310c      	adds	r1, #12
   134a4:	f006 f9d9 	bl	1985a <strcmp>
   134a8:	2800      	cmp	r0, #0
   134aa:	f47f adb4 	bne.w	13016 <pdn_interface_pdn_id_get+0xfa>
   134ae:	69e3      	ldr	r3, [r4, #28]
   134b0:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   134b2:	0790      	lsls	r0, r2, #30
   134b4:	f57f adaf 	bpl.w	13016 <pdn_interface_pdn_id_get+0xfa>
   134b8:	2607      	movs	r6, #7
   134ba:	e6ea      	b.n	13292 <pdn_interface_pdn_id_get+0x376>
   134bc:	4628      	mov	r0, r5
   134be:	f006 f9c5 	bl	1984c <strlen>
   134c2:	4606      	mov	r6, r0
   134c4:	6a20      	ldr	r0, [r4, #32]
   134c6:	300c      	adds	r0, #12
   134c8:	f006 f9c0 	bl	1984c <strlen>
   134cc:	4286      	cmp	r6, r0
   134ce:	f47f ada8 	bne.w	13022 <pdn_interface_pdn_id_get+0x106>
   134d2:	6a21      	ldr	r1, [r4, #32]
   134d4:	4628      	mov	r0, r5
   134d6:	310c      	adds	r1, #12
   134d8:	f006 f9bf 	bl	1985a <strcmp>
   134dc:	2800      	cmp	r0, #0
   134de:	f47f ada0 	bne.w	13022 <pdn_interface_pdn_id_get+0x106>
   134e2:	6a23      	ldr	r3, [r4, #32]
   134e4:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   134e6:	0791      	lsls	r1, r2, #30
   134e8:	f57f ad9b 	bpl.w	13022 <pdn_interface_pdn_id_get+0x106>
   134ec:	2608      	movs	r6, #8
   134ee:	e6d0      	b.n	13292 <pdn_interface_pdn_id_get+0x376>
   134f0:	4628      	mov	r0, r5
   134f2:	f006 f9ab 	bl	1984c <strlen>
   134f6:	4606      	mov	r6, r0
   134f8:	69e0      	ldr	r0, [r4, #28]
   134fa:	300c      	adds	r0, #12
   134fc:	f006 f9a6 	bl	1984c <strlen>
   13500:	4286      	cmp	r6, r0
   13502:	f47f adda 	bne.w	130ba <pdn_interface_pdn_id_get+0x19e>
   13506:	69e1      	ldr	r1, [r4, #28]
   13508:	4628      	mov	r0, r5
   1350a:	310c      	adds	r1, #12
   1350c:	f006 f9a5 	bl	1985a <strcmp>
   13510:	2800      	cmp	r0, #0
   13512:	f47f add2 	bne.w	130ba <pdn_interface_pdn_id_get+0x19e>
   13516:	69e3      	ldr	r3, [r4, #28]
   13518:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   1351a:	07d0      	lsls	r0, r2, #31
   1351c:	d4cc      	bmi.n	134b8 <pdn_interface_pdn_id_get+0x59c>
   1351e:	e5cc      	b.n	130ba <pdn_interface_pdn_id_get+0x19e>
   13520:	4628      	mov	r0, r5
   13522:	f006 f993 	bl	1984c <strlen>
   13526:	4606      	mov	r6, r0
   13528:	6a20      	ldr	r0, [r4, #32]
   1352a:	300c      	adds	r0, #12
   1352c:	f006 f98e 	bl	1984c <strlen>
   13530:	4286      	cmp	r6, r0
   13532:	f47f adc8 	bne.w	130c6 <pdn_interface_pdn_id_get+0x1aa>
   13536:	6a21      	ldr	r1, [r4, #32]
   13538:	4628      	mov	r0, r5
   1353a:	310c      	adds	r1, #12
   1353c:	f006 f98d 	bl	1985a <strcmp>
   13540:	2800      	cmp	r0, #0
   13542:	f47f adc0 	bne.w	130c6 <pdn_interface_pdn_id_get+0x1aa>
   13546:	6a23      	ldr	r3, [r4, #32]
   13548:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   1354a:	07d1      	lsls	r1, r2, #31
   1354c:	d4ce      	bmi.n	134ec <pdn_interface_pdn_id_get+0x5d0>
   1354e:	e5ba      	b.n	130c6 <pdn_interface_pdn_id_get+0x1aa>
   13550:	4628      	mov	r0, r5
   13552:	f006 f97b 	bl	1984c <strlen>
   13556:	4606      	mov	r6, r0
   13558:	68a0      	ldr	r0, [r4, #8]
   1355a:	300c      	adds	r0, #12
   1355c:	f006 f976 	bl	1984c <strlen>
   13560:	4286      	cmp	r6, r0
   13562:	f47f ad8c 	bne.w	1307e <pdn_interface_pdn_id_get+0x162>
   13566:	68a1      	ldr	r1, [r4, #8]
   13568:	4628      	mov	r0, r5
   1356a:	310c      	adds	r1, #12
   1356c:	f006 f975 	bl	1985a <strcmp>
   13570:	2800      	cmp	r0, #0
   13572:	f47f ad84 	bne.w	1307e <pdn_interface_pdn_id_get+0x162>
   13576:	68a3      	ldr	r3, [r4, #8]
   13578:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   1357a:	07d0      	lsls	r0, r2, #31
   1357c:	f57f ad7f 	bpl.w	1307e <pdn_interface_pdn_id_get+0x162>
   13580:	2602      	movs	r6, #2
   13582:	e686      	b.n	13292 <pdn_interface_pdn_id_get+0x376>
   13584:	4628      	mov	r0, r5
   13586:	f006 f961 	bl	1984c <strlen>
   1358a:	4606      	mov	r6, r0
   1358c:	68a0      	ldr	r0, [r4, #8]
   1358e:	300c      	adds	r0, #12
   13590:	f006 f95c 	bl	1984c <strlen>
   13594:	4286      	cmp	r6, r0
   13596:	f47f ad20 	bne.w	12fda <pdn_interface_pdn_id_get+0xbe>
   1359a:	68a1      	ldr	r1, [r4, #8]
   1359c:	4628      	mov	r0, r5
   1359e:	310c      	adds	r1, #12
   135a0:	f006 f95b 	bl	1985a <strcmp>
   135a4:	2800      	cmp	r0, #0
   135a6:	f47f ad18 	bne.w	12fda <pdn_interface_pdn_id_get+0xbe>
   135aa:	68a3      	ldr	r3, [r4, #8]
   135ac:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   135ae:	0790      	lsls	r0, r2, #30
   135b0:	d4e6      	bmi.n	13580 <pdn_interface_pdn_id_get+0x664>
   135b2:	e512      	b.n	12fda <pdn_interface_pdn_id_get+0xbe>
   135b4:	20020478 	.word	0x20020478
   135b8:	0001aa9c 	.word	0x0001aa9c
   135bc:	0001aa98 	.word	0x0001aa98
   135c0:	0001aaac 	.word	0x0001aaac
   135c4:	20020474 	.word	0x20020474
   135c8:	4628      	mov	r0, r5
   135ca:	f006 f93f 	bl	1984c <strlen>
   135ce:	4606      	mov	r6, r0
   135d0:	6860      	ldr	r0, [r4, #4]
   135d2:	300c      	adds	r0, #12
   135d4:	f006 f93a 	bl	1984c <strlen>
   135d8:	4286      	cmp	r6, r0
   135da:	f47f acf8 	bne.w	12fce <pdn_interface_pdn_id_get+0xb2>
   135de:	6861      	ldr	r1, [r4, #4]
   135e0:	4628      	mov	r0, r5
   135e2:	310c      	adds	r1, #12
   135e4:	f006 f939 	bl	1985a <strcmp>
   135e8:	2800      	cmp	r0, #0
   135ea:	f47f acf0 	bne.w	12fce <pdn_interface_pdn_id_get+0xb2>
   135ee:	6863      	ldr	r3, [r4, #4]
   135f0:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   135f2:	0796      	lsls	r6, r2, #30
   135f4:	f57f aceb 	bpl.w	12fce <pdn_interface_pdn_id_get+0xb2>
   135f8:	2601      	movs	r6, #1
   135fa:	e64a      	b.n	13292 <pdn_interface_pdn_id_get+0x376>
   135fc:	4628      	mov	r0, r5
   135fe:	f006 f925 	bl	1984c <strlen>
   13602:	4606      	mov	r6, r0
   13604:	6860      	ldr	r0, [r4, #4]
   13606:	300c      	adds	r0, #12
   13608:	f006 f920 	bl	1984c <strlen>
   1360c:	4286      	cmp	r6, r0
   1360e:	f47f ad30 	bne.w	13072 <pdn_interface_pdn_id_get+0x156>
   13612:	6861      	ldr	r1, [r4, #4]
   13614:	4628      	mov	r0, r5
   13616:	310c      	adds	r1, #12
   13618:	f006 f91f 	bl	1985a <strcmp>
   1361c:	2800      	cmp	r0, #0
   1361e:	f47f ad28 	bne.w	13072 <pdn_interface_pdn_id_get+0x156>
   13622:	6863      	ldr	r3, [r4, #4]
   13624:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   13626:	07d6      	lsls	r6, r2, #31
   13628:	d4e6      	bmi.n	135f8 <pdn_interface_pdn_id_get+0x6dc>
   1362a:	e522      	b.n	13072 <pdn_interface_pdn_id_get+0x156>
   1362c:	4608      	mov	r0, r1
   1362e:	f006 f90d 	bl	1984c <strlen>
   13632:	4606      	mov	r6, r0
   13634:	6820      	ldr	r0, [r4, #0]
   13636:	300c      	adds	r0, #12
   13638:	f006 f908 	bl	1984c <strlen>
   1363c:	4286      	cmp	r6, r0
   1363e:	f47f acc0 	bne.w	12fc2 <pdn_interface_pdn_id_get+0xa6>
   13642:	6821      	ldr	r1, [r4, #0]
   13644:	4628      	mov	r0, r5
   13646:	310c      	adds	r1, #12
   13648:	f006 f907 	bl	1985a <strcmp>
   1364c:	4606      	mov	r6, r0
   1364e:	2800      	cmp	r0, #0
   13650:	f47f acb7 	bne.w	12fc2 <pdn_interface_pdn_id_get+0xa6>
   13654:	6823      	ldr	r3, [r4, #0]
   13656:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   13658:	0797      	lsls	r7, r2, #30
   1365a:	f53f ae1a 	bmi.w	13292 <pdn_interface_pdn_id_get+0x376>
   1365e:	e4b0      	b.n	12fc2 <pdn_interface_pdn_id_get+0xa6>
   13660:	4608      	mov	r0, r1
   13662:	f006 f8f3 	bl	1984c <strlen>
   13666:	4606      	mov	r6, r0
   13668:	6820      	ldr	r0, [r4, #0]
   1366a:	300c      	adds	r0, #12
   1366c:	f006 f8ee 	bl	1984c <strlen>
   13670:	4286      	cmp	r6, r0
   13672:	f47f acf8 	bne.w	13066 <pdn_interface_pdn_id_get+0x14a>
   13676:	6821      	ldr	r1, [r4, #0]
   13678:	4628      	mov	r0, r5
   1367a:	310c      	adds	r1, #12
   1367c:	f006 f8ed 	bl	1985a <strcmp>
   13680:	4606      	mov	r6, r0
   13682:	2800      	cmp	r0, #0
   13684:	f47f acef 	bne.w	13066 <pdn_interface_pdn_id_get+0x14a>
   13688:	6823      	ldr	r3, [r4, #0]
   1368a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   1368c:	07d7      	lsls	r7, r2, #31
   1368e:	f53f ae00 	bmi.w	13292 <pdn_interface_pdn_id_get+0x376>
   13692:	e4e8      	b.n	13066 <pdn_interface_pdn_id_get+0x14a>
   13694:	f04f 30ff 	mov.w	r0, #4294967295
   13698:	4770      	bx	lr
   1369a:	480b      	ldr	r0, [pc, #44]	; (136c8 <pdn_interface_pdn_id_get+0x7ac>)
   1369c:	f006 f8d6 	bl	1984c <strlen>
   136a0:	490a      	ldr	r1, [pc, #40]	; (136cc <pdn_interface_pdn_id_get+0x7b0>)
   136a2:	4602      	mov	r2, r0
   136a4:	4808      	ldr	r0, [pc, #32]	; (136c8 <pdn_interface_pdn_id_get+0x7ac>)
   136a6:	f006 f8e4 	bl	19872 <strncmp>
   136aa:	b930      	cbnz	r0, 136ba <pdn_interface_pdn_id_get+0x79e>
   136ac:	2008      	movs	r0, #8
   136ae:	f7fb fa1f 	bl	eaf0 <bsd_os_errno_set>
   136b2:	f854 3026 	ldr.w	r3, [r4, r6, lsl #2]
   136b6:	6858      	ldr	r0, [r3, #4]
   136b8:	e47b      	b.n	12fb2 <pdn_interface_pdn_id_get+0x96>
   136ba:	2005      	movs	r0, #5
   136bc:	f7fb fa18 	bl	eaf0 <bsd_os_errno_set>
   136c0:	f854 3026 	ldr.w	r3, [r4, r6, lsl #2]
   136c4:	6858      	ldr	r0, [r3, #4]
   136c6:	e474      	b.n	12fb2 <pdn_interface_pdn_id_get+0x96>
   136c8:	0001aaf0 	.word	0x0001aaf0
   136cc:	20020478 	.word	0x20020478

000136d0 <linked_list_init>:
   136d0:	b128      	cbz	r0, 136de <linked_list_init+0xe>
   136d2:	2300      	movs	r3, #0
   136d4:	6003      	str	r3, [r0, #0]
   136d6:	e9c0 3301 	strd	r3, r3, [r0, #4]
   136da:	4618      	mov	r0, r3
   136dc:	4770      	bx	lr
   136de:	2007      	movs	r0, #7
   136e0:	4770      	bx	lr
   136e2:	bf00      	nop

000136e4 <linked_list_push>:
   136e4:	6802      	ldr	r2, [r0, #0]
   136e6:	4603      	mov	r3, r0
   136e8:	3201      	adds	r2, #1
   136ea:	d00e      	beq.n	1370a <linked_list_push+0x26>
   136ec:	2200      	movs	r2, #0
   136ee:	600a      	str	r2, [r1, #0]
   136f0:	6802      	ldr	r2, [r0, #0]
   136f2:	b13a      	cbz	r2, 13704 <linked_list_push+0x20>
   136f4:	6882      	ldr	r2, [r0, #8]
   136f6:	6011      	str	r1, [r2, #0]
   136f8:	6081      	str	r1, [r0, #8]
   136fa:	681a      	ldr	r2, [r3, #0]
   136fc:	2000      	movs	r0, #0
   136fe:	3201      	adds	r2, #1
   13700:	601a      	str	r2, [r3, #0]
   13702:	4770      	bx	lr
   13704:	e9c0 1101 	strd	r1, r1, [r0, #4]
   13708:	e7f7      	b.n	136fa <linked_list_push+0x16>
   1370a:	2004      	movs	r0, #4
   1370c:	4770      	bx	lr
   1370e:	bf00      	nop

00013710 <linked_list_pop>:
   13710:	4603      	mov	r3, r0
   13712:	6800      	ldr	r0, [r0, #0]
   13714:	b128      	cbz	r0, 13722 <linked_list_pop+0x12>
   13716:	6858      	ldr	r0, [r3, #4]
   13718:	681a      	ldr	r2, [r3, #0]
   1371a:	6801      	ldr	r1, [r0, #0]
   1371c:	3a01      	subs	r2, #1
   1371e:	6059      	str	r1, [r3, #4]
   13720:	601a      	str	r2, [r3, #0]
   13722:	4770      	bx	lr

00013724 <linked_list_peek>:
   13724:	6803      	ldr	r3, [r0, #0]
   13726:	b10b      	cbz	r3, 1372c <linked_list_peek+0x8>
   13728:	6840      	ldr	r0, [r0, #4]
   1372a:	4770      	bx	lr
   1372c:	4618      	mov	r0, r3
   1372e:	4770      	bx	lr

00013730 <linked_list_size_get>:
   13730:	6800      	ldr	r0, [r0, #0]
   13732:	4770      	bx	lr

00013734 <linked_list_get_next>:
   13734:	6800      	ldr	r0, [r0, #0]
   13736:	4770      	bx	lr

00013738 <nrf_socket>:
   13738:	b570      	push	{r4, r5, r6, lr}
   1373a:	4604      	mov	r4, r0
   1373c:	460d      	mov	r5, r1
   1373e:	4616      	mov	r6, r2
   13740:	f7fd fdb4 	bl	112ac <bsd_platform_af_method_table_get>
   13744:	b130      	cbz	r0, 13754 <nrf_socket+0x1c>
   13746:	6803      	ldr	r3, [r0, #0]
   13748:	4632      	mov	r2, r6
   1374a:	4629      	mov	r1, r5
   1374c:	4620      	mov	r0, r4
   1374e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   13752:	4718      	bx	r3
   13754:	f04f 30ff 	mov.w	r0, #4294967295
   13758:	bd70      	pop	{r4, r5, r6, pc}
   1375a:	bf00      	nop

0001375c <nrf_close>:
   1375c:	b510      	push	{r4, lr}
   1375e:	4604      	mov	r4, r0
   13760:	f7fd fdfc 	bl	1135c <bsd_platform_fd_method_table_get>
   13764:	b120      	cbz	r0, 13770 <nrf_close+0x14>
   13766:	6843      	ldr	r3, [r0, #4]
   13768:	4620      	mov	r0, r4
   1376a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1376e:	4718      	bx	r3
   13770:	f04f 30ff 	mov.w	r0, #4294967295
   13774:	bd10      	pop	{r4, pc}
   13776:	bf00      	nop

00013778 <nrf_sendto>:
   13778:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1377c:	460d      	mov	r5, r1
   1377e:	e9dd 8908 	ldrd	r8, r9, [sp, #32]
   13782:	4616      	mov	r6, r2
   13784:	461f      	mov	r7, r3
   13786:	4604      	mov	r4, r0
   13788:	f7fd fde8 	bl	1135c <bsd_platform_fd_method_table_get>
   1378c:	b158      	cbz	r0, 137a6 <nrf_sendto+0x2e>
   1378e:	e9cd 8908 	strd	r8, r9, [sp, #32]
   13792:	f8d0 e008 	ldr.w	lr, [r0, #8]
   13796:	463b      	mov	r3, r7
   13798:	4632      	mov	r2, r6
   1379a:	4629      	mov	r1, r5
   1379c:	4620      	mov	r0, r4
   1379e:	46f4      	mov	ip, lr
   137a0:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   137a4:	4760      	bx	ip
   137a6:	f04f 30ff 	mov.w	r0, #4294967295
   137aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   137ae:	bf00      	nop

000137b0 <nrf_send>:
   137b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   137b4:	b082      	sub	sp, #8
   137b6:	460e      	mov	r6, r1
   137b8:	4617      	mov	r7, r2
   137ba:	4698      	mov	r8, r3
   137bc:	4605      	mov	r5, r0
   137be:	f7fd fdcd 	bl	1135c <bsd_platform_fd_method_table_get>
   137c2:	b160      	cbz	r0, 137de <nrf_send+0x2e>
   137c4:	4604      	mov	r4, r0
   137c6:	2000      	movs	r0, #0
   137c8:	e9cd 0000 	strd	r0, r0, [sp]
   137cc:	4643      	mov	r3, r8
   137ce:	463a      	mov	r2, r7
   137d0:	4631      	mov	r1, r6
   137d2:	4628      	mov	r0, r5
   137d4:	68a4      	ldr	r4, [r4, #8]
   137d6:	47a0      	blx	r4
   137d8:	b002      	add	sp, #8
   137da:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   137de:	f04f 30ff 	mov.w	r0, #4294967295
   137e2:	e7f9      	b.n	137d8 <nrf_send+0x28>

000137e4 <nrf_recvfrom>:
   137e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   137e8:	460d      	mov	r5, r1
   137ea:	e9dd 8908 	ldrd	r8, r9, [sp, #32]
   137ee:	4616      	mov	r6, r2
   137f0:	461f      	mov	r7, r3
   137f2:	4604      	mov	r4, r0
   137f4:	f7fd fdb2 	bl	1135c <bsd_platform_fd_method_table_get>
   137f8:	b158      	cbz	r0, 13812 <nrf_recvfrom+0x2e>
   137fa:	e9cd 8908 	strd	r8, r9, [sp, #32]
   137fe:	f8d0 e00c 	ldr.w	lr, [r0, #12]
   13802:	463b      	mov	r3, r7
   13804:	4632      	mov	r2, r6
   13806:	4629      	mov	r1, r5
   13808:	4620      	mov	r0, r4
   1380a:	46f4      	mov	ip, lr
   1380c:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   13810:	4760      	bx	ip
   13812:	f04f 30ff 	mov.w	r0, #4294967295
   13816:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1381a:	bf00      	nop

0001381c <nrf_recv>:
   1381c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   13820:	b082      	sub	sp, #8
   13822:	460e      	mov	r6, r1
   13824:	4617      	mov	r7, r2
   13826:	4698      	mov	r8, r3
   13828:	4605      	mov	r5, r0
   1382a:	f7fd fd97 	bl	1135c <bsd_platform_fd_method_table_get>
   1382e:	b160      	cbz	r0, 1384a <nrf_recv+0x2e>
   13830:	4604      	mov	r4, r0
   13832:	2000      	movs	r0, #0
   13834:	e9cd 0000 	strd	r0, r0, [sp]
   13838:	4643      	mov	r3, r8
   1383a:	463a      	mov	r2, r7
   1383c:	4631      	mov	r1, r6
   1383e:	4628      	mov	r0, r5
   13840:	68e4      	ldr	r4, [r4, #12]
   13842:	47a0      	blx	r4
   13844:	b002      	add	sp, #8
   13846:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1384a:	f04f 30ff 	mov.w	r0, #4294967295
   1384e:	e7f9      	b.n	13844 <nrf_recv+0x28>

00013850 <nrf_connect>:
   13850:	b570      	push	{r4, r5, r6, lr}
   13852:	460d      	mov	r5, r1
   13854:	4616      	mov	r6, r2
   13856:	4604      	mov	r4, r0
   13858:	f7fd fd80 	bl	1135c <bsd_platform_fd_method_table_get>
   1385c:	b130      	cbz	r0, 1386c <nrf_connect+0x1c>
   1385e:	6943      	ldr	r3, [r0, #20]
   13860:	4632      	mov	r2, r6
   13862:	4629      	mov	r1, r5
   13864:	4620      	mov	r0, r4
   13866:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   1386a:	4718      	bx	r3
   1386c:	f04f 30ff 	mov.w	r0, #4294967295
   13870:	bd70      	pop	{r4, r5, r6, pc}
   13872:	bf00      	nop

00013874 <nrf_listen>:
   13874:	b570      	push	{r4, r5, r6, lr}
   13876:	460d      	mov	r5, r1
   13878:	4604      	mov	r4, r0
   1387a:	f7fd fd6f 	bl	1135c <bsd_platform_fd_method_table_get>
   1387e:	b128      	cbz	r0, 1388c <nrf_listen+0x18>
   13880:	6983      	ldr	r3, [r0, #24]
   13882:	4629      	mov	r1, r5
   13884:	4620      	mov	r0, r4
   13886:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   1388a:	4718      	bx	r3
   1388c:	f04f 30ff 	mov.w	r0, #4294967295
   13890:	bd70      	pop	{r4, r5, r6, pc}
   13892:	bf00      	nop

00013894 <nrf_accept>:
   13894:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   13898:	460d      	mov	r5, r1
   1389a:	4616      	mov	r6, r2
   1389c:	4604      	mov	r4, r0
   1389e:	f7fd fd5d 	bl	1135c <bsd_platform_fd_method_table_get>
   138a2:	b140      	cbz	r0, 138b6 <nrf_accept+0x22>
   138a4:	69c7      	ldr	r7, [r0, #28]
   138a6:	4632      	mov	r2, r6
   138a8:	4629      	mov	r1, r5
   138aa:	4620      	mov	r0, r4
   138ac:	46bc      	mov	ip, r7
   138ae:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   138b2:	2300      	movs	r3, #0
   138b4:	4760      	bx	ip
   138b6:	f04f 30ff 	mov.w	r0, #4294967295
   138ba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   138be:	bf00      	nop

000138c0 <nrf_bind>:
   138c0:	b570      	push	{r4, r5, r6, lr}
   138c2:	460d      	mov	r5, r1
   138c4:	4616      	mov	r6, r2
   138c6:	4604      	mov	r4, r0
   138c8:	f7fd fd48 	bl	1135c <bsd_platform_fd_method_table_get>
   138cc:	b130      	cbz	r0, 138dc <nrf_bind+0x1c>
   138ce:	6903      	ldr	r3, [r0, #16]
   138d0:	4632      	mov	r2, r6
   138d2:	4629      	mov	r1, r5
   138d4:	4620      	mov	r0, r4
   138d6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   138da:	4718      	bx	r3
   138dc:	f04f 30ff 	mov.w	r0, #4294967295
   138e0:	bd70      	pop	{r4, r5, r6, pc}
   138e2:	bf00      	nop

000138e4 <nrf_setsockopt>:
   138e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   138e8:	f8dd 8018 	ldr.w	r8, [sp, #24]
   138ec:	460d      	mov	r5, r1
   138ee:	4616      	mov	r6, r2
   138f0:	461f      	mov	r7, r3
   138f2:	4604      	mov	r4, r0
   138f4:	f7fd fd32 	bl	1135c <bsd_platform_fd_method_table_get>
   138f8:	b158      	cbz	r0, 13912 <nrf_setsockopt+0x2e>
   138fa:	f8cd 8018 	str.w	r8, [sp, #24]
   138fe:	f8d0 e020 	ldr.w	lr, [r0, #32]
   13902:	463b      	mov	r3, r7
   13904:	4632      	mov	r2, r6
   13906:	4629      	mov	r1, r5
   13908:	4620      	mov	r0, r4
   1390a:	46f4      	mov	ip, lr
   1390c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   13910:	4760      	bx	ip
   13912:	f04f 30ff 	mov.w	r0, #4294967295
   13916:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1391a:	bf00      	nop

0001391c <nrf_getsockopt>:
   1391c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   13920:	f8dd 8018 	ldr.w	r8, [sp, #24]
   13924:	460d      	mov	r5, r1
   13926:	4616      	mov	r6, r2
   13928:	461f      	mov	r7, r3
   1392a:	4604      	mov	r4, r0
   1392c:	f7fd fd16 	bl	1135c <bsd_platform_fd_method_table_get>
   13930:	b158      	cbz	r0, 1394a <nrf_getsockopt+0x2e>
   13932:	f8cd 8018 	str.w	r8, [sp, #24]
   13936:	f8d0 e024 	ldr.w	lr, [r0, #36]	; 0x24
   1393a:	463b      	mov	r3, r7
   1393c:	4632      	mov	r2, r6
   1393e:	4629      	mov	r1, r5
   13940:	4620      	mov	r0, r4
   13942:	46f4      	mov	ip, lr
   13944:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   13948:	4760      	bx	ip
   1394a:	f04f 30ff 	mov.w	r0, #4294967295
   1394e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   13952:	bf00      	nop

00013954 <nrf_getaddrinfo>:
   13954:	f7fd bd78 	b.w	11448 <bsd_platform_getaddrinfo>

00013958 <nrf_freeaddrinfo>:
   13958:	f7fd bd78 	b.w	1144c <bsd_platform_freeaddrinfo>

0001395c <nrf_poll>:
   1395c:	f7fd bd78 	b.w	11450 <bsd_platform_poll>

00013960 <nrf_fcntl>:
   13960:	f7fd bdd0 	b.w	11504 <bsd_platform_fcntl>

00013964 <at_client_evt_handler>:
   13964:	b120      	cbz	r0, 13970 <at_client_evt_handler+0xc>
   13966:	f850 1b08 	ldr.w	r1, [r0], #8
   1396a:	0c09      	lsrs	r1, r1, #16
   1396c:	f7fb bfa0 	b.w	f8b0 <rpc_at_event_handler>
   13970:	4770      	bx	lr
   13972:	bf00      	nop

00013974 <rpc_at_client_init>:
   13974:	4801      	ldr	r0, [pc, #4]	; (1397c <rpc_at_client_init+0x8>)
   13976:	f001 be47 	b.w	15608 <rpc_client_register>
   1397a:	bf00      	nop
   1397c:	0001ab04 	.word	0x0001ab04

00013980 <rpc_at_client_request_alloc>:
   13980:	b180      	cbz	r0, 139a4 <rpc_at_client_request_alloc+0x24>
   13982:	2300      	movs	r3, #0
   13984:	b510      	push	{r4, lr}
   13986:	b082      	sub	sp, #8
   13988:	aa02      	add	r2, sp, #8
   1398a:	4604      	mov	r4, r0
   1398c:	f842 3d04 	str.w	r3, [r2, #-4]!
   13990:	2003      	movs	r0, #3
   13992:	f002 f871 	bl	15a78 <rpc_message_alloc>
   13996:	b918      	cbnz	r0, 139a0 <rpc_at_client_request_alloc+0x20>
   13998:	9b01      	ldr	r3, [sp, #4]
   1399a:	b10b      	cbz	r3, 139a0 <rpc_at_client_request_alloc+0x20>
   1399c:	3308      	adds	r3, #8
   1399e:	6023      	str	r3, [r4, #0]
   139a0:	b002      	add	sp, #8
   139a2:	bd10      	pop	{r4, pc}
   139a4:	200e      	movs	r0, #14
   139a6:	4770      	bx	lr

000139a8 <rpc_at_client_request_send>:
   139a8:	b150      	cbz	r0, 139c0 <rpc_at_client_request_send+0x18>
   139aa:	4603      	mov	r3, r0
   139ac:	f830 2c08 	ldrh.w	r2, [r0, #-8]
   139b0:	2003      	movs	r0, #3
   139b2:	ea42 4101 	orr.w	r1, r2, r1, lsl #16
   139b6:	f843 1d08 	str.w	r1, [r3, #-8]!
   139ba:	4619      	mov	r1, r3
   139bc:	f002 b844 	b.w	15a48 <rpc_message_send>
   139c0:	200e      	movs	r0, #14
   139c2:	4770      	bx	lr

000139c4 <rpc_at_client_message_free>:
   139c4:	b120      	cbz	r0, 139d0 <rpc_at_client_message_free+0xc>
   139c6:	f1a0 0108 	sub.w	r1, r0, #8
   139ca:	2003      	movs	r0, #3
   139cc:	f002 b886 	b.w	15adc <rpc_message_free>
   139d0:	200e      	movs	r0, #14
   139d2:	4770      	bx	lr

000139d4 <rpc_at_client_data_free>:
   139d4:	b118      	cbz	r0, 139de <rpc_at_client_data_free+0xa>
   139d6:	4601      	mov	r1, r0
   139d8:	2003      	movs	r0, #3
   139da:	f002 b991 	b.w	15d00 <rpc_message_data_free>
   139de:	200e      	movs	r0, #14
   139e0:	4770      	bx	lr
   139e2:	bf00      	nop

000139e4 <ip_recvd_packet_free_cb>:
   139e4:	b510      	push	{r4, lr}
   139e6:	4604      	mov	r4, r0
   139e8:	6800      	ldr	r0, [r0, #0]
   139ea:	f7fc fc1f 	bl	1022c <rpc_ip_client_data_free>
   139ee:	68a0      	ldr	r0, [r4, #8]
   139f0:	b118      	cbz	r0, 139fa <ip_recvd_packet_free_cb+0x16>
   139f2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   139f6:	f7fc bbb9 	b.w	1016c <nrf_free>
   139fa:	bd10      	pop	{r4, pc}

000139fc <rpc_error_to_nrf_bsd_error>:
   139fc:	2810      	cmp	r0, #16
   139fe:	bf9a      	itte	ls
   13a00:	4b02      	ldrls	r3, [pc, #8]	; (13a0c <rpc_error_to_nrf_bsd_error+0x10>)
   13a02:	f853 0020 	ldrls.w	r0, [r3, r0, lsl #2]
   13a06:	202d      	movhi	r0, #45	; 0x2d
   13a08:	4770      	bx	lr
   13a0a:	bf00      	nop
   13a0c:	0001ab14 	.word	0x0001ab14

00013a10 <ip_interface_request_create>:
   13a10:	b570      	push	{r4, r5, r6, lr}
   13a12:	2500      	movs	r5, #0
   13a14:	b082      	sub	sp, #8
   13a16:	ac02      	add	r4, sp, #8
   13a18:	f844 5d04 	str.w	r5, [r4, #-4]!
   13a1c:	4606      	mov	r6, r0
   13a1e:	460d      	mov	r5, r1
   13a20:	4620      	mov	r0, r4
   13a22:	4619      	mov	r1, r3
   13a24:	4614      	mov	r4, r2
   13a26:	f7fc fbcf 	bl	101c8 <rpc_ip_client_request_alloc>
   13a2a:	b960      	cbnz	r0, 13a46 <ip_interface_request_create+0x36>
   13a2c:	9b01      	ldr	r3, [sp, #4]
   13a2e:	2208      	movs	r2, #8
   13a30:	7258      	strb	r0, [r3, #9]
   13a32:	7298      	strb	r0, [r3, #10]
   13a34:	72d8      	strb	r0, [r3, #11]
   13a36:	4618      	mov	r0, r3
   13a38:	ea44 4406 	orr.w	r4, r4, r6, lsl #16
   13a3c:	60dc      	str	r4, [r3, #12]
   13a3e:	611d      	str	r5, [r3, #16]
   13a40:	721a      	strb	r2, [r3, #8]
   13a42:	b002      	add	sp, #8
   13a44:	bd70      	pop	{r4, r5, r6, pc}
   13a46:	9b01      	ldr	r3, [sp, #4]
   13a48:	4618      	mov	r0, r3
   13a4a:	b002      	add	sp, #8
   13a4c:	bd70      	pop	{r4, r5, r6, pc}
   13a4e:	bf00      	nop

00013a50 <ip_interface_request_send>:
   13a50:	b570      	push	{r4, r5, r6, lr}
   13a52:	460c      	mov	r4, r1
   13a54:	4605      	mov	r5, r0
   13a56:	4611      	mov	r1, r2
   13a58:	4620      	mov	r0, r4
   13a5a:	461e      	mov	r6, r3
   13a5c:	f7fc fbc8 	bl	101f0 <rpc_ip_client_request_send>
   13a60:	b900      	cbnz	r0, 13a64 <ip_interface_request_send+0x14>
   13a62:	bd70      	pop	{r4, r5, r6, pc}
   13a64:	6820      	ldr	r0, [r4, #0]
   13a66:	b108      	cbz	r0, 13a6c <ip_interface_request_send+0x1c>
   13a68:	f7fc fbe0 	bl	1022c <rpc_ip_client_data_free>
   13a6c:	4620      	mov	r0, r4
   13a6e:	f7fc fbd5 	bl	1021c <rpc_ip_client_message_free>
   13a72:	602e      	str	r6, [r5, #0]
   13a74:	2023      	movs	r0, #35	; 0x23
   13a76:	bd70      	pop	{r4, r5, r6, pc}

00013a78 <ip_interface_wait>:
   13a78:	b538      	push	{r3, r4, r5, lr}
   13a7a:	4605      	mov	r5, r0
   13a7c:	f001 fc14 	bl	152a8 <interface_socket_wait>
   13a80:	4604      	mov	r4, r0
   13a82:	b108      	cbz	r0, 13a88 <ip_interface_wait+0x10>
   13a84:	4620      	mov	r0, r4
   13a86:	bd38      	pop	{r3, r4, r5, pc}
   13a88:	4628      	mov	r0, r5
   13a8a:	f001 fc81 	bl	15390 <interface_socket_from_handle_get>
   13a8e:	2800      	cmp	r0, #0
   13a90:	d0f8      	beq.n	13a84 <ip_interface_wait+0xc>
   13a92:	6844      	ldr	r4, [r0, #4]
   13a94:	2c00      	cmp	r4, #0
   13a96:	d0f5      	beq.n	13a84 <ip_interface_wait+0xc>
   13a98:	2300      	movs	r3, #0
   13a9a:	6043      	str	r3, [r0, #4]
   13a9c:	4620      	mov	r0, r4
   13a9e:	bd38      	pop	{r3, r4, r5, pc}

00013aa0 <ip_interface_init>:
   13aa0:	b538      	push	{r3, r4, r5, lr}
   13aa2:	2300      	movs	r3, #0
   13aa4:	4d07      	ldr	r5, [pc, #28]	; (13ac4 <ip_interface_init+0x24>)
   13aa6:	4c08      	ldr	r4, [pc, #32]	; (13ac8 <ip_interface_init+0x28>)
   13aa8:	4619      	mov	r1, r3
   13aaa:	2224      	movs	r2, #36	; 0x24
   13aac:	4807      	ldr	r0, [pc, #28]	; (13acc <ip_interface_init+0x2c>)
   13aae:	602b      	str	r3, [r5, #0]
   13ab0:	6023      	str	r3, [r4, #0]
   13ab2:	f005 ff27 	bl	19904 <memset>
   13ab6:	f7fc fb81 	bl	101bc <rpc_ip_client_init>
   13aba:	3000      	adds	r0, #0
   13abc:	bf18      	it	ne
   13abe:	2001      	movne	r0, #1
   13ac0:	4240      	negs	r0, r0
   13ac2:	bd38      	pop	{r3, r4, r5, pc}
   13ac4:	200205b0 	.word	0x200205b0
   13ac8:	200205ac 	.word	0x200205ac
   13acc:	200205b8 	.word	0x200205b8

00013ad0 <ip_interface_open>:
   13ad0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   13ad4:	4606      	mov	r6, r0
   13ad6:	2000      	movs	r0, #0
   13ad8:	f026 0308 	bic.w	r3, r6, #8
   13adc:	b082      	sub	sp, #8
   13ade:	2b02      	cmp	r3, #2
   13ae0:	460c      	mov	r4, r1
   13ae2:	4617      	mov	r7, r2
   13ae4:	9000      	str	r0, [sp, #0]
   13ae6:	d002      	beq.n	13aee <ip_interface_open+0x1e>
   13ae8:	2e05      	cmp	r6, #5
   13aea:	f040 8085 	bne.w	13bf8 <ip_interface_open+0x128>
   13aee:	1e63      	subs	r3, r4, #1
   13af0:	2b02      	cmp	r3, #2
   13af2:	f200 8097 	bhi.w	13c24 <ip_interface_open+0x154>
   13af6:	2f00      	cmp	r7, #0
   13af8:	d154      	bne.n	13ba4 <ip_interface_open+0xd4>
   13afa:	2c01      	cmp	r4, #1
   13afc:	d067      	beq.n	13bce <ip_interface_open+0xfe>
   13afe:	2c03      	cmp	r4, #3
   13b00:	bf18      	it	ne
   13b02:	2702      	movne	r7, #2
   13b04:	4a4a      	ldr	r2, [pc, #296]	; (13c30 <ip_interface_open+0x160>)
   13b06:	4621      	mov	r1, r4
   13b08:	4668      	mov	r0, sp
   13b0a:	f001 fb1b 	bl	15144 <interface_socket_allocate>
   13b0e:	9b00      	ldr	r3, [sp, #0]
   13b10:	4680      	mov	r8, r0
   13b12:	2b00      	cmp	r3, #0
   13b14:	d059      	beq.n	13bca <ip_interface_open+0xfa>
   13b16:	2100      	movs	r1, #0
   13b18:	a802      	add	r0, sp, #8
   13b1a:	f840 1d04 	str.w	r1, [r0, #-4]!
   13b1e:	e9c3 6403 	strd	r6, r4, [r3, #12]
   13b22:	615f      	str	r7, [r3, #20]
   13b24:	f7fc fb50 	bl	101c8 <rpc_ip_client_request_alloc>
   13b28:	2800      	cmp	r0, #0
   13b2a:	d14b      	bne.n	13bc4 <ip_interface_open+0xf4>
   13b2c:	f247 0201 	movw	r2, #28673	; 0x7001
   13b30:	f04f 33ff 	mov.w	r3, #4294967295
   13b34:	2108      	movs	r1, #8
   13b36:	9d01      	ldr	r5, [sp, #4]
   13b38:	ea42 4208 	orr.w	r2, r2, r8, lsl #16
   13b3c:	60ea      	str	r2, [r5, #12]
   13b3e:	7268      	strb	r0, [r5, #9]
   13b40:	72a8      	strb	r0, [r5, #10]
   13b42:	72e8      	strb	r0, [r5, #11]
   13b44:	7229      	strb	r1, [r5, #8]
   13b46:	742b      	strb	r3, [r5, #16]
   13b48:	746b      	strb	r3, [r5, #17]
   13b4a:	74ab      	strb	r3, [r5, #18]
   13b4c:	74eb      	strb	r3, [r5, #19]
   13b4e:	68ab      	ldr	r3, [r5, #8]
   13b50:	2e05      	cmp	r6, #5
   13b52:	f103 030c 	add.w	r3, r3, #12
   13b56:	60ab      	str	r3, [r5, #8]
   13b58:	d003      	beq.n	13b62 <ip_interface_open+0x92>
   13b5a:	2e0a      	cmp	r6, #10
   13b5c:	bf14      	ite	ne
   13b5e:	2601      	movne	r6, #1
   13b60:	2602      	moveq	r6, #2
   13b62:	616e      	str	r6, [r5, #20]
   13b64:	61ef      	str	r7, [r5, #28]
   13b66:	61ac      	str	r4, [r5, #24]
   13b68:	f247 0101 	movw	r1, #28673	; 0x7001
   13b6c:	4628      	mov	r0, r5
   13b6e:	9f00      	ldr	r7, [sp, #0]
   13b70:	f7fc fb3e 	bl	101f0 <rpc_ip_client_request_send>
   13b74:	4606      	mov	r6, r0
   13b76:	b360      	cbz	r0, 13bd2 <ip_interface_open+0x102>
   13b78:	6828      	ldr	r0, [r5, #0]
   13b7a:	b108      	cbz	r0, 13b80 <ip_interface_open+0xb0>
   13b7c:	f7fc fb56 	bl	1022c <rpc_ip_client_data_free>
   13b80:	4628      	mov	r0, r5
   13b82:	f7fc fb4b 	bl	1021c <rpc_ip_client_message_free>
   13b86:	2301      	movs	r3, #1
   13b88:	2523      	movs	r5, #35	; 0x23
   13b8a:	603b      	str	r3, [r7, #0]
   13b8c:	4640      	mov	r0, r8
   13b8e:	f001 fb3d 	bl	1520c <interface_socket_free>
   13b92:	4628      	mov	r0, r5
   13b94:	f7fa ffac 	bl	eaf0 <bsd_os_errno_set>
   13b98:	f04f 38ff 	mov.w	r8, #4294967295
   13b9c:	4640      	mov	r0, r8
   13b9e:	b002      	add	sp, #8
   13ba0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   13ba4:	2c01      	cmp	r4, #1
   13ba6:	d009      	beq.n	13bbc <ip_interface_open+0xec>
   13ba8:	2c02      	cmp	r4, #2
   13baa:	d109      	bne.n	13bc0 <ip_interface_open+0xf0>
   13bac:	2f02      	cmp	r7, #2
   13bae:	d0a9      	beq.n	13b04 <ip_interface_open+0x34>
   13bb0:	2029      	movs	r0, #41	; 0x29
   13bb2:	f7fa ff9d 	bl	eaf0 <bsd_os_errno_set>
   13bb6:	f04f 38ff 	mov.w	r8, #4294967295
   13bba:	e7ef      	b.n	13b9c <ip_interface_open+0xcc>
   13bbc:	2f01      	cmp	r7, #1
   13bbe:	d1f7      	bne.n	13bb0 <ip_interface_open+0xe0>
   13bc0:	2702      	movs	r7, #2
   13bc2:	e79f      	b.n	13b04 <ip_interface_open+0x34>
   13bc4:	9d01      	ldr	r5, [sp, #4]
   13bc6:	2d00      	cmp	r5, #0
   13bc8:	d1c1      	bne.n	13b4e <ip_interface_open+0x7e>
   13bca:	250c      	movs	r5, #12
   13bcc:	e7de      	b.n	13b8c <ip_interface_open+0xbc>
   13bce:	4627      	mov	r7, r4
   13bd0:	e798      	b.n	13b04 <ip_interface_open+0x34>
   13bd2:	f04f 33ff 	mov.w	r3, #4294967295
   13bd6:	f64f 72ff 	movw	r2, #65535	; 0xffff
   13bda:	2102      	movs	r1, #2
   13bdc:	4640      	mov	r0, r8
   13bde:	f001 fb63 	bl	152a8 <interface_socket_wait>
   13be2:	4605      	mov	r5, r0
   13be4:	2800      	cmp	r0, #0
   13be6:	d1d1      	bne.n	13b8c <ip_interface_open+0xbc>
   13be8:	4640      	mov	r0, r8
   13bea:	f001 fbd1 	bl	15390 <interface_socket_from_handle_get>
   13bee:	b148      	cbz	r0, 13c04 <ip_interface_open+0x134>
   13bf0:	6845      	ldr	r5, [r0, #4]
   13bf2:	b13d      	cbz	r5, 13c04 <ip_interface_open+0x134>
   13bf4:	6046      	str	r6, [r0, #4]
   13bf6:	e7c9      	b.n	13b8c <ip_interface_open+0xbc>
   13bf8:	202f      	movs	r0, #47	; 0x2f
   13bfa:	f7fa ff79 	bl	eaf0 <bsd_os_errno_set>
   13bfe:	f04f 38ff 	mov.w	r8, #4294967295
   13c02:	e7cb      	b.n	13b9c <ip_interface_open+0xcc>
   13c04:	3c02      	subs	r4, #2
   13c06:	2c01      	cmp	r4, #1
   13c08:	d8c8      	bhi.n	13b9c <ip_interface_open+0xcc>
   13c0a:	4640      	mov	r0, r8
   13c0c:	9b00      	ldr	r3, [sp, #0]
   13c0e:	681a      	ldr	r2, [r3, #0]
   13c10:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
   13c14:	601a      	str	r2, [r3, #0]
   13c16:	681a      	ldr	r2, [r3, #0]
   13c18:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
   13c1c:	601a      	str	r2, [r3, #0]
   13c1e:	b002      	add	sp, #8
   13c20:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   13c24:	2016      	movs	r0, #22
   13c26:	f7fa ff63 	bl	eaf0 <bsd_os_errno_set>
   13c2a:	f04f 38ff 	mov.w	r8, #4294967295
   13c2e:	e7b5      	b.n	13b9c <ip_interface_open+0xcc>
   13c30:	000139e5 	.word	0x000139e5

00013c34 <ip_interface_close>:
   13c34:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   13c38:	b082      	sub	sp, #8
   13c3a:	4606      	mov	r6, r0
   13c3c:	f001 fba8 	bl	15390 <interface_socket_from_handle_get>
   13c40:	2800      	cmp	r0, #0
   13c42:	d063      	beq.n	13d0c <ip_interface_close+0xd8>
   13c44:	4604      	mov	r4, r0
   13c46:	2100      	movs	r1, #0
   13c48:	a802      	add	r0, sp, #8
   13c4a:	6827      	ldr	r7, [r4, #0]
   13c4c:	f840 1d04 	str.w	r1, [r0, #-4]!
   13c50:	f8d4 8018 	ldr.w	r8, [r4, #24]
   13c54:	f7fc fab8 	bl	101c8 <rpc_ip_client_request_alloc>
   13c58:	2800      	cmp	r0, #0
   13c5a:	d13a      	bne.n	13cd2 <ip_interface_close+0x9e>
   13c5c:	f247 0309 	movw	r3, #28681	; 0x7009
   13c60:	2208      	movs	r2, #8
   13c62:	9d01      	ldr	r5, [sp, #4]
   13c64:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
   13c68:	60eb      	str	r3, [r5, #12]
   13c6a:	f8c5 8010 	str.w	r8, [r5, #16]
   13c6e:	7268      	strb	r0, [r5, #9]
   13c70:	72a8      	strb	r0, [r5, #10]
   13c72:	72e8      	strb	r0, [r5, #11]
   13c74:	722a      	strb	r2, [r5, #8]
   13c76:	6823      	ldr	r3, [r4, #0]
   13c78:	f247 0109 	movw	r1, #28681	; 0x7009
   13c7c:	0c1b      	lsrs	r3, r3, #16
   13c7e:	041b      	lsls	r3, r3, #16
   13c80:	f043 030d 	orr.w	r3, r3, #13
   13c84:	6023      	str	r3, [r4, #0]
   13c86:	6823      	ldr	r3, [r4, #0]
   13c88:	4628      	mov	r0, r5
   13c8a:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
   13c8e:	6023      	str	r3, [r4, #0]
   13c90:	6823      	ldr	r3, [r4, #0]
   13c92:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
   13c96:	6023      	str	r3, [r4, #0]
   13c98:	f7fc faaa 	bl	101f0 <rpc_ip_client_request_send>
   13c9c:	bb40      	cbnz	r0, 13cf0 <ip_interface_close+0xbc>
   13c9e:	f04f 33ff 	mov.w	r3, #4294967295
   13ca2:	f64f 72ff 	movw	r2, #65535	; 0xffff
   13ca6:	210e      	movs	r1, #14
   13ca8:	4630      	mov	r0, r6
   13caa:	f001 fafd 	bl	152a8 <interface_socket_wait>
   13cae:	4604      	mov	r4, r0
   13cb0:	b1a0      	cbz	r0, 13cdc <ip_interface_close+0xa8>
   13cb2:	4c17      	ldr	r4, [pc, #92]	; (13d10 <ip_interface_close+0xdc>)
   13cb4:	f854 0026 	ldr.w	r0, [r4, r6, lsl #2]
   13cb8:	b120      	cbz	r0, 13cc4 <ip_interface_close+0x90>
   13cba:	f7fc faaf 	bl	1021c <rpc_ip_client_message_free>
   13cbe:	2300      	movs	r3, #0
   13cc0:	f844 3026 	str.w	r3, [r4, r6, lsl #2]
   13cc4:	4630      	mov	r0, r6
   13cc6:	f001 faa1 	bl	1520c <interface_socket_free>
   13cca:	2000      	movs	r0, #0
   13ccc:	b002      	add	sp, #8
   13cce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   13cd2:	9d01      	ldr	r5, [sp, #4]
   13cd4:	200c      	movs	r0, #12
   13cd6:	2d00      	cmp	r5, #0
   13cd8:	d1cd      	bne.n	13c76 <ip_interface_close+0x42>
   13cda:	e012      	b.n	13d02 <ip_interface_close+0xce>
   13cdc:	4630      	mov	r0, r6
   13cde:	f001 fb57 	bl	15390 <interface_socket_from_handle_get>
   13ce2:	2800      	cmp	r0, #0
   13ce4:	d0e5      	beq.n	13cb2 <ip_interface_close+0x7e>
   13ce6:	6843      	ldr	r3, [r0, #4]
   13ce8:	2b00      	cmp	r3, #0
   13cea:	d0e2      	beq.n	13cb2 <ip_interface_close+0x7e>
   13cec:	6044      	str	r4, [r0, #4]
   13cee:	e7e0      	b.n	13cb2 <ip_interface_close+0x7e>
   13cf0:	6828      	ldr	r0, [r5, #0]
   13cf2:	b108      	cbz	r0, 13cf8 <ip_interface_close+0xc4>
   13cf4:	f7fc fa9a 	bl	1022c <rpc_ip_client_data_free>
   13cf8:	4628      	mov	r0, r5
   13cfa:	f7fc fa8f 	bl	1021c <rpc_ip_client_message_free>
   13cfe:	2023      	movs	r0, #35	; 0x23
   13d00:	6027      	str	r7, [r4, #0]
   13d02:	f7fa fef5 	bl	eaf0 <bsd_os_errno_set>
   13d06:	f04f 30ff 	mov.w	r0, #4294967295
   13d0a:	e7df      	b.n	13ccc <ip_interface_close+0x98>
   13d0c:	2009      	movs	r0, #9
   13d0e:	e7f8      	b.n	13d02 <ip_interface_close+0xce>
   13d10:	200205b8 	.word	0x200205b8

00013d14 <ip_interface_sendto>:
   13d14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13d18:	2400      	movs	r4, #0
   13d1a:	b089      	sub	sp, #36	; 0x24
   13d1c:	9102      	str	r1, [sp, #8]
   13d1e:	4615      	mov	r5, r2
   13d20:	4699      	mov	r9, r3
   13d22:	9407      	str	r4, [sp, #28]
   13d24:	4607      	mov	r7, r0
   13d26:	9e12      	ldr	r6, [sp, #72]	; 0x48
   13d28:	f001 fb32 	bl	15390 <interface_socket_from_handle_get>
   13d2c:	2800      	cmp	r0, #0
   13d2e:	f000 815f 	beq.w	13ff0 <ip_interface_sendto+0x2dc>
   13d32:	f5b5 5f80 	cmp.w	r5, #4096	; 0x1000
   13d36:	f300 814c 	bgt.w	13fd2 <ip_interface_sendto+0x2be>
   13d3a:	6903      	ldr	r3, [r0, #16]
   13d3c:	4604      	mov	r4, r0
   13d3e:	2b01      	cmp	r3, #1
   13d40:	f000 80fb 	beq.w	13f3a <ip_interface_sendto+0x226>
   13d44:	6822      	ldr	r2, [r4, #0]
   13d46:	0390      	lsls	r0, r2, #14
   13d48:	d562      	bpl.n	13e10 <ip_interface_sendto+0xfc>
   13d4a:	f1b9 0f00 	cmp.w	r9, #0
   13d4e:	f000 80fc 	beq.w	13f4a <ip_interface_sendto+0x236>
   13d52:	f019 0f02 	tst.w	r9, #2
   13d56:	f000 8146 	beq.w	13fe6 <ip_interface_sendto+0x2d2>
   13d5a:	2300      	movs	r3, #0
   13d5c:	9303      	str	r3, [sp, #12]
   13d5e:	f247 0806 	movw	r8, #28678	; 0x7006
   13d62:	f04f 0b0c 	mov.w	fp, #12
   13d66:	4ba6      	ldr	r3, [pc, #664]	; (14000 <ip_interface_sendto+0x2ec>)
   13d68:	9300      	str	r3, [sp, #0]
   13d6a:	043b      	lsls	r3, r7, #16
   13d6c:	9304      	str	r3, [sp, #16]
   13d6e:	4629      	mov	r1, r5
   13d70:	a807      	add	r0, sp, #28
   13d72:	f7fc fa29 	bl	101c8 <rpc_ip_client_request_alloc>
   13d76:	2804      	cmp	r0, #4
   13d78:	d063      	beq.n	13e42 <ip_interface_sendto+0x12e>
   13d7a:	2800      	cmp	r0, #0
   13d7c:	f040 813d 	bne.w	13ffa <ip_interface_sendto+0x2e6>
   13d80:	9b07      	ldr	r3, [sp, #28]
   13d82:	f883 b008 	strb.w	fp, [r3, #8]
   13d86:	7258      	strb	r0, [r3, #9]
   13d88:	7298      	strb	r0, [r3, #10]
   13d8a:	72d8      	strb	r0, [r3, #11]
   13d8c:	2e00      	cmp	r6, #0
   13d8e:	d074      	beq.n	13e7a <ip_interface_sendto+0x166>
   13d90:	68e2      	ldr	r2, [r4, #12]
   13d92:	6871      	ldr	r1, [r6, #4]
   13d94:	428a      	cmp	r2, r1
   13d96:	f040 80a2 	bne.w	13ede <ip_interface_sendto+0x1ca>
   13d9a:	7831      	ldrb	r1, [r6, #0]
   13d9c:	9813      	ldr	r0, [sp, #76]	; 0x4c
   13d9e:	4288      	cmp	r0, r1
   13da0:	d10a      	bne.n	13db8 <ip_interface_sendto+0xa4>
   13da2:	2a02      	cmp	r2, #2
   13da4:	f103 001c 	add.w	r0, r3, #28
   13da8:	f000 8101 	beq.w	13fae <ip_interface_sendto+0x29a>
   13dac:	2a0a      	cmp	r2, #10
   13dae:	d103      	bne.n	13db8 <ip_interface_sendto+0xa4>
   13db0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   13db2:	2a24      	cmp	r2, #36	; 0x24
   13db4:	f000 80e8 	beq.w	13f88 <ip_interface_sendto+0x274>
   13db8:	f04f 0a16 	mov.w	sl, #22
   13dbc:	6818      	ldr	r0, [r3, #0]
   13dbe:	b110      	cbz	r0, 13dc6 <ip_interface_sendto+0xb2>
   13dc0:	f7fc fa34 	bl	1022c <rpc_ip_client_data_free>
   13dc4:	9b07      	ldr	r3, [sp, #28]
   13dc6:	4618      	mov	r0, r3
   13dc8:	f7fc fa28 	bl	1021c <rpc_ip_client_message_free>
   13dcc:	6823      	ldr	r3, [r4, #0]
   13dce:	031a      	lsls	r2, r3, #12
   13dd0:	d43f      	bmi.n	13e52 <ip_interface_sendto+0x13e>
   13dd2:	6823      	ldr	r3, [r4, #0]
   13dd4:	b29b      	uxth	r3, r3
   13dd6:	2b0d      	cmp	r3, #13
   13dd8:	d007      	beq.n	13dea <ip_interface_sendto+0xd6>
   13dda:	6823      	ldr	r3, [r4, #0]
   13ddc:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
   13de0:	6023      	str	r3, [r4, #0]
   13de2:	6823      	ldr	r3, [r4, #0]
   13de4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   13de8:	6023      	str	r3, [r4, #0]
   13dea:	f1ba 0f00 	cmp.w	sl, #0
   13dee:	d130      	bne.n	13e52 <ip_interface_sendto+0x13e>
   13df0:	6823      	ldr	r3, [r4, #0]
   13df2:	0118      	lsls	r0, r3, #4
   13df4:	d576      	bpl.n	13ee4 <ip_interface_sendto+0x1d0>
   13df6:	6823      	ldr	r3, [r4, #0]
   13df8:	f023 6300 	bic.w	r3, r3, #134217728	; 0x8000000
   13dfc:	6023      	str	r3, [r4, #0]
   13dfe:	9b00      	ldr	r3, [sp, #0]
   13e00:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
   13e04:	2800      	cmp	r0, #0
   13e06:	d12e      	bne.n	13e66 <ip_interface_sendto+0x152>
   13e08:	4628      	mov	r0, r5
   13e0a:	b009      	add	sp, #36	; 0x24
   13e0c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13e10:	6822      	ldr	r2, [r4, #0]
   13e12:	0091      	lsls	r1, r2, #2
   13e14:	d406      	bmi.n	13e24 <ip_interface_sendto+0x110>
   13e16:	2b01      	cmp	r3, #1
   13e18:	f000 80b0 	beq.w	13f7c <ip_interface_sendto+0x268>
   13e1c:	6823      	ldr	r3, [r4, #0]
   13e1e:	031a      	lsls	r2, r3, #12
   13e20:	f140 80d2 	bpl.w	13fc8 <ip_interface_sendto+0x2b4>
   13e24:	6823      	ldr	r3, [r4, #0]
   13e26:	031b      	lsls	r3, r3, #12
   13e28:	f140 80d8 	bpl.w	13fdc <ip_interface_sendto+0x2c8>
   13e2c:	4b74      	ldr	r3, [pc, #464]	; (14000 <ip_interface_sendto+0x2ec>)
   13e2e:	f8d4 a008 	ldr.w	sl, [r4, #8]
   13e32:	9300      	str	r3, [sp, #0]
   13e34:	e7d9      	b.n	13dea <ip_interface_sendto+0xd6>
   13e36:	9b00      	ldr	r3, [sp, #0]
   13e38:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
   13e3c:	b108      	cbz	r0, 13e42 <ip_interface_sendto+0x12e>
   13e3e:	f7fc f9ed 	bl	1021c <rpc_ip_client_message_free>
   13e42:	9b03      	ldr	r3, [sp, #12]
   13e44:	2b00      	cmp	r3, #0
   13e46:	d192      	bne.n	13d6e <ip_interface_sendto+0x5a>
   13e48:	6823      	ldr	r3, [r4, #0]
   13e4a:	f04f 0a23 	mov.w	sl, #35	; 0x23
   13e4e:	031a      	lsls	r2, r3, #12
   13e50:	d5bf      	bpl.n	13dd2 <ip_interface_sendto+0xbe>
   13e52:	4650      	mov	r0, sl
   13e54:	f7fa fe4c 	bl	eaf0 <bsd_os_errno_set>
   13e58:	9b00      	ldr	r3, [sp, #0]
   13e5a:	f04f 35ff 	mov.w	r5, #4294967295
   13e5e:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
   13e62:	2800      	cmp	r0, #0
   13e64:	d0d0      	beq.n	13e08 <ip_interface_sendto+0xf4>
   13e66:	f7fc f9d9 	bl	1021c <rpc_ip_client_message_free>
   13e6a:	2300      	movs	r3, #0
   13e6c:	9a00      	ldr	r2, [sp, #0]
   13e6e:	f842 3027 	str.w	r3, [r2, r7, lsl #2]
   13e72:	4628      	mov	r0, r5
   13e74:	b009      	add	sp, #36	; 0x24
   13e76:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13e7a:	4642      	mov	r2, r8
   13e7c:	f8c3 9014 	str.w	r9, [r3, #20]
   13e80:	69a1      	ldr	r1, [r4, #24]
   13e82:	9804      	ldr	r0, [sp, #16]
   13e84:	6119      	str	r1, [r3, #16]
   13e86:	9902      	ldr	r1, [sp, #8]
   13e88:	4302      	orrs	r2, r0
   13e8a:	60da      	str	r2, [r3, #12]
   13e8c:	605d      	str	r5, [r3, #4]
   13e8e:	b119      	cbz	r1, 13e98 <ip_interface_sendto+0x184>
   13e90:	6818      	ldr	r0, [r3, #0]
   13e92:	462a      	mov	r2, r5
   13e94:	f005 fd0c 	bl	198b0 <memcpy>
   13e98:	6823      	ldr	r3, [r4, #0]
   13e9a:	4641      	mov	r1, r8
   13e9c:	9305      	str	r3, [sp, #20]
   13e9e:	6823      	ldr	r3, [r4, #0]
   13ea0:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
   13ea4:	6023      	str	r3, [r4, #0]
   13ea6:	6823      	ldr	r3, [r4, #0]
   13ea8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
   13eac:	6023      	str	r3, [r4, #0]
   13eae:	9b07      	ldr	r3, [sp, #28]
   13eb0:	4618      	mov	r0, r3
   13eb2:	9301      	str	r3, [sp, #4]
   13eb4:	f7fc f99c 	bl	101f0 <rpc_ip_client_request_send>
   13eb8:	9b01      	ldr	r3, [sp, #4]
   13eba:	4682      	mov	sl, r0
   13ebc:	b9e8      	cbnz	r0, 13efa <ip_interface_sendto+0x1e6>
   13ebe:	f44f 3200 	mov.w	r2, #131072	; 0x20000
   13ec2:	f04f 33ff 	mov.w	r3, #4294967295
   13ec6:	4611      	mov	r1, r2
   13ec8:	4638      	mov	r0, r7
   13eca:	f001 f9ed 	bl	152a8 <interface_socket_wait>
   13ece:	b308      	cbz	r0, 13f14 <ip_interface_sendto+0x200>
   13ed0:	6823      	ldr	r3, [r4, #0]
   13ed2:	0319      	lsls	r1, r3, #12
   13ed4:	d42a      	bmi.n	13f2c <ip_interface_sendto+0x218>
   13ed6:	280c      	cmp	r0, #12
   13ed8:	d0ad      	beq.n	13e36 <ip_interface_sendto+0x122>
   13eda:	4682      	mov	sl, r0
   13edc:	e776      	b.n	13dcc <ip_interface_sendto+0xb8>
   13ede:	f04f 0a2f 	mov.w	sl, #47	; 0x2f
   13ee2:	e76b      	b.n	13dbc <ip_interface_sendto+0xa8>
   13ee4:	9b00      	ldr	r3, [sp, #0]
   13ee6:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
   13eea:	6985      	ldr	r5, [r0, #24]
   13eec:	f7fc f996 	bl	1021c <rpc_ip_client_message_free>
   13ef0:	2300      	movs	r3, #0
   13ef2:	9a00      	ldr	r2, [sp, #0]
   13ef4:	f842 3027 	str.w	r3, [r2, r7, lsl #2]
   13ef8:	e7bb      	b.n	13e72 <ip_interface_sendto+0x15e>
   13efa:	6818      	ldr	r0, [r3, #0]
   13efc:	469a      	mov	sl, r3
   13efe:	b108      	cbz	r0, 13f04 <ip_interface_sendto+0x1f0>
   13f00:	f7fc f994 	bl	1022c <rpc_ip_client_data_free>
   13f04:	4650      	mov	r0, sl
   13f06:	f7fc f989 	bl	1021c <rpc_ip_client_message_free>
   13f0a:	9b05      	ldr	r3, [sp, #20]
   13f0c:	f04f 0a23 	mov.w	sl, #35	; 0x23
   13f10:	6023      	str	r3, [r4, #0]
   13f12:	e75b      	b.n	13dcc <ip_interface_sendto+0xb8>
   13f14:	4638      	mov	r0, r7
   13f16:	f001 fa3b 	bl	15390 <interface_socket_from_handle_get>
   13f1a:	4603      	mov	r3, r0
   13f1c:	b1e0      	cbz	r0, 13f58 <ip_interface_sendto+0x244>
   13f1e:	6840      	ldr	r0, [r0, #4]
   13f20:	b1d0      	cbz	r0, 13f58 <ip_interface_sendto+0x244>
   13f22:	f8c3 a004 	str.w	sl, [r3, #4]
   13f26:	6823      	ldr	r3, [r4, #0]
   13f28:	0319      	lsls	r1, r3, #12
   13f2a:	d5d4      	bpl.n	13ed6 <ip_interface_sendto+0x1c2>
   13f2c:	f8d4 a008 	ldr.w	sl, [r4, #8]
   13f30:	6823      	ldr	r3, [r4, #0]
   13f32:	031e      	lsls	r6, r3, #12
   13f34:	f57f af4d 	bpl.w	13dd2 <ip_interface_sendto+0xbe>
   13f38:	e757      	b.n	13dea <ip_interface_sendto+0xd6>
   13f3a:	2e00      	cmp	r6, #0
   13f3c:	f43f af02 	beq.w	13d44 <ip_interface_sendto+0x30>
   13f40:	4b2f      	ldr	r3, [pc, #188]	; (14000 <ip_interface_sendto+0x2ec>)
   13f42:	f04f 0a38 	mov.w	sl, #56	; 0x38
   13f46:	9300      	str	r3, [sp, #0]
   13f48:	e783      	b.n	13e52 <ip_interface_sendto+0x13e>
   13f4a:	6823      	ldr	r3, [r4, #0]
   13f4c:	f083 5380 	eor.w	r3, r3, #268435456	; 0x10000000
   13f50:	f3c3 7300 	ubfx	r3, r3, #28, #1
   13f54:	9303      	str	r3, [sp, #12]
   13f56:	e702      	b.n	13d5e <ip_interface_sendto+0x4a>
   13f58:	6823      	ldr	r3, [r4, #0]
   13f5a:	031b      	lsls	r3, r3, #12
   13f5c:	f53f af48 	bmi.w	13df0 <ip_interface_sendto+0xdc>
   13f60:	6823      	ldr	r3, [r4, #0]
   13f62:	b29b      	uxth	r3, r3
   13f64:	2b0d      	cmp	r3, #13
   13f66:	f43f af43 	beq.w	13df0 <ip_interface_sendto+0xdc>
   13f6a:	6823      	ldr	r3, [r4, #0]
   13f6c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
   13f70:	6023      	str	r3, [r4, #0]
   13f72:	6823      	ldr	r3, [r4, #0]
   13f74:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   13f78:	6023      	str	r3, [r4, #0]
   13f7a:	e739      	b.n	13df0 <ip_interface_sendto+0xdc>
   13f7c:	6823      	ldr	r3, [r4, #0]
   13f7e:	b29b      	uxth	r3, r3
   13f80:	2b05      	cmp	r3, #5
   13f82:	f47f af4f 	bne.w	13e24 <ip_interface_sendto+0x110>
   13f86:	e749      	b.n	13e1c <ip_interface_sendto+0x108>
   13f88:	2210      	movs	r2, #16
   13f8a:	8931      	ldrh	r1, [r6, #8]
   13f8c:	835a      	strh	r2, [r3, #26]
   13f8e:	8319      	strh	r1, [r3, #24]
   13f90:	18b1      	adds	r1, r6, r2
   13f92:	f005 fc8d 	bl	198b0 <memcpy>
   13f96:	f247 0207 	movw	r2, #28679	; 0x7007
   13f9a:	9b07      	ldr	r3, [sp, #28]
   13f9c:	4690      	mov	r8, r2
   13f9e:	6899      	ldr	r1, [r3, #8]
   13fa0:	8b58      	ldrh	r0, [r3, #26]
   13fa2:	3104      	adds	r1, #4
   13fa4:	4401      	add	r1, r0
   13fa6:	f8c3 9014 	str.w	r9, [r3, #20]
   13faa:	6099      	str	r1, [r3, #8]
   13fac:	e768      	b.n	13e80 <ip_interface_sendto+0x16c>
   13fae:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   13fb0:	2a10      	cmp	r2, #16
   13fb2:	f47f af01 	bne.w	13db8 <ip_interface_sendto+0xa4>
   13fb6:	2204      	movs	r2, #4
   13fb8:	8931      	ldrh	r1, [r6, #8]
   13fba:	835a      	strh	r2, [r3, #26]
   13fbc:	8319      	strh	r1, [r3, #24]
   13fbe:	f106 010c 	add.w	r1, r6, #12
   13fc2:	f005 fc75 	bl	198b0 <memcpy>
   13fc6:	e7e6      	b.n	13f96 <ip_interface_sendto+0x282>
   13fc8:	4b0d      	ldr	r3, [pc, #52]	; (14000 <ip_interface_sendto+0x2ec>)
   13fca:	f04f 0a23 	mov.w	sl, #35	; 0x23
   13fce:	9300      	str	r3, [sp, #0]
   13fd0:	e73f      	b.n	13e52 <ip_interface_sendto+0x13e>
   13fd2:	4b0b      	ldr	r3, [pc, #44]	; (14000 <ip_interface_sendto+0x2ec>)
   13fd4:	f04f 0a28 	mov.w	sl, #40	; 0x28
   13fd8:	9300      	str	r3, [sp, #0]
   13fda:	e73a      	b.n	13e52 <ip_interface_sendto+0x13e>
   13fdc:	4b08      	ldr	r3, [pc, #32]	; (14000 <ip_interface_sendto+0x2ec>)
   13fde:	f04f 0a39 	mov.w	sl, #57	; 0x39
   13fe2:	9300      	str	r3, [sp, #0]
   13fe4:	e735      	b.n	13e52 <ip_interface_sendto+0x13e>
   13fe6:	4b06      	ldr	r3, [pc, #24]	; (14000 <ip_interface_sendto+0x2ec>)
   13fe8:	f04f 0a2d 	mov.w	sl, #45	; 0x2d
   13fec:	9300      	str	r3, [sp, #0]
   13fee:	e730      	b.n	13e52 <ip_interface_sendto+0x13e>
   13ff0:	4b03      	ldr	r3, [pc, #12]	; (14000 <ip_interface_sendto+0x2ec>)
   13ff2:	f04f 0a09 	mov.w	sl, #9
   13ff6:	9300      	str	r3, [sp, #0]
   13ff8:	e72b      	b.n	13e52 <ip_interface_sendto+0x13e>
   13ffa:	f04f 0a0c 	mov.w	sl, #12
   13ffe:	e6e5      	b.n	13dcc <ip_interface_sendto+0xb8>
   14000:	200205b8 	.word	0x200205b8

00014004 <ip_interface_recvfrom>:
   14004:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14008:	b085      	sub	sp, #20
   1400a:	2a00      	cmp	r2, #0
   1400c:	f000 811b 	beq.w	14246 <ip_interface_recvfrom+0x242>
   14010:	4605      	mov	r5, r0
   14012:	468a      	mov	sl, r1
   14014:	4698      	mov	r8, r3
   14016:	4617      	mov	r7, r2
   14018:	b11b      	cbz	r3, 14022 <ip_interface_recvfrom+0x1e>
   1401a:	f013 0f1a 	tst.w	r3, #26
   1401e:	f000 810f 	beq.w	14240 <ip_interface_recvfrom+0x23c>
   14022:	4628      	mov	r0, r5
   14024:	f001 f9b4 	bl	15390 <interface_socket_from_handle_get>
   14028:	4604      	mov	r4, r0
   1402a:	2800      	cmp	r0, #0
   1402c:	f000 810e 	beq.w	1424c <ip_interface_recvfrom+0x248>
   14030:	6803      	ldr	r3, [r0, #0]
   14032:	02d9      	lsls	r1, r3, #11
   14034:	d564      	bpl.n	14100 <ip_interface_recvfrom+0xfc>
   14036:	f018 0f02 	tst.w	r8, #2
   1403a:	bf18      	it	ne
   1403c:	f04f 0900 	movne.w	r9, #0
   14040:	f04f 3bff 	mov.w	fp, #4294967295
   14044:	bf08      	it	eq
   14046:	6803      	ldreq	r3, [r0, #0]
   14048:	f008 0610 	and.w	r6, r8, #16
   1404c:	bf04      	itt	eq
   1404e:	f083 5980 	eoreq.w	r9, r3, #268435456	; 0x10000000
   14052:	f3c9 7900 	ubfxeq	r9, r9, #28, #1
   14056:	6823      	ldr	r3, [r4, #0]
   14058:	03da      	lsls	r2, r3, #15
   1405a:	d56c      	bpl.n	14136 <ip_interface_recvfrom+0x132>
   1405c:	6823      	ldr	r3, [r4, #0]
   1405e:	69e0      	ldr	r0, [r4, #28]
   14060:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
   14064:	6023      	str	r3, [r4, #0]
   14066:	6803      	ldr	r3, [r0, #0]
   14068:	68db      	ldr	r3, [r3, #12]
   1406a:	4798      	blx	r3
   1406c:	f1b0 3fff 	cmp.w	r0, #4294967295
   14070:	4683      	mov	fp, r0
   14072:	d07f      	beq.n	14174 <ip_interface_recvfrom+0x170>
   14074:	4287      	cmp	r7, r0
   14076:	dd03      	ble.n	14080 <ip_interface_recvfrom+0x7c>
   14078:	6923      	ldr	r3, [r4, #16]
   1407a:	2b01      	cmp	r3, #1
   1407c:	f000 80a6 	beq.w	141cc <ip_interface_recvfrom+0x1c8>
   14080:	2600      	movs	r6, #0
   14082:	69e0      	ldr	r0, [r4, #28]
   14084:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   14086:	b103      	cbz	r3, 1408a <ip_interface_recvfrom+0x86>
   14088:	681b      	ldr	r3, [r3, #0]
   1408a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   1408c:	e9cd a700 	strd	sl, r7, [sp]
   14090:	e9cd 2302 	strd	r2, r3, [sp, #8]
   14094:	6803      	ldr	r3, [r0, #0]
   14096:	4642      	mov	r2, r8
   14098:	689b      	ldr	r3, [r3, #8]
   1409a:	4669      	mov	r1, sp
   1409c:	4798      	blx	r3
   1409e:	4683      	mov	fp, r0
   140a0:	69e0      	ldr	r0, [r4, #28]
   140a2:	f1bb 3fff 	cmp.w	fp, #4294967295
   140a6:	6803      	ldr	r3, [r0, #0]
   140a8:	bf18      	it	ne
   140aa:	2501      	movne	r5, #1
   140ac:	68db      	ldr	r3, [r3, #12]
   140ae:	bf0a      	itet	eq
   140b0:	2500      	moveq	r5, #0
   140b2:	f04f 0900 	movne.w	r9, #0
   140b6:	f04f 0923 	moveq.w	r9, #35	; 0x23
   140ba:	4798      	blx	r3
   140bc:	3001      	adds	r0, #1
   140be:	d135      	bne.n	1412c <ip_interface_recvfrom+0x128>
   140c0:	2e00      	cmp	r6, #0
   140c2:	f000 80b5 	beq.w	14230 <ip_interface_recvfrom+0x22c>
   140c6:	2d00      	cmp	r5, #0
   140c8:	f000 80a5 	beq.w	14216 <ip_interface_recvfrom+0x212>
   140cc:	6823      	ldr	r3, [r4, #0]
   140ce:	0319      	lsls	r1, r3, #12
   140d0:	d506      	bpl.n	140e0 <ip_interface_recvfrom+0xdc>
   140d2:	6823      	ldr	r3, [r4, #0]
   140d4:	b29b      	uxth	r3, r3
   140d6:	2b0d      	cmp	r3, #13
   140d8:	d002      	beq.n	140e0 <ip_interface_recvfrom+0xdc>
   140da:	6923      	ldr	r3, [r4, #16]
   140dc:	2b01      	cmp	r3, #1
   140de:	d025      	beq.n	1412c <ip_interface_recvfrom+0x128>
   140e0:	6823      	ldr	r3, [r4, #0]
   140e2:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
   140e6:	6823      	ldr	r3, [r4, #0]
   140e8:	f040 80b3 	bne.w	14252 <ip_interface_recvfrom+0x24e>
   140ec:	031a      	lsls	r2, r3, #12
   140ee:	d474      	bmi.n	141da <ip_interface_recvfrom+0x1d6>
   140f0:	f1b9 0f00 	cmp.w	r9, #0
   140f4:	f040 8089 	bne.w	1420a <ip_interface_recvfrom+0x206>
   140f8:	4658      	mov	r0, fp
   140fa:	b005      	add	sp, #20
   140fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14100:	6803      	ldr	r3, [r0, #0]
   14102:	b29b      	uxth	r3, r3
   14104:	2b06      	cmp	r3, #6
   14106:	d072      	beq.n	141ee <ip_interface_recvfrom+0x1ea>
   14108:	6803      	ldr	r3, [r0, #0]
   1410a:	b29b      	uxth	r3, r3
   1410c:	2b07      	cmp	r3, #7
   1410e:	bf0c      	ite	eq
   14110:	f04f 0909 	moveq.w	r9, #9
   14114:	f04f 0939 	movne.w	r9, #57	; 0x39
   14118:	69e0      	ldr	r0, [r4, #28]
   1411a:	6803      	ldr	r3, [r0, #0]
   1411c:	68db      	ldr	r3, [r3, #12]
   1411e:	4798      	blx	r3
   14120:	f1b0 3fff 	cmp.w	r0, #4294967295
   14124:	4683      	mov	fp, r0
   14126:	d0db      	beq.n	140e0 <ip_interface_recvfrom+0xdc>
   14128:	f04f 3bff 	mov.w	fp, #4294967295
   1412c:	6823      	ldr	r3, [r4, #0]
   1412e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   14132:	6023      	str	r3, [r4, #0]
   14134:	e7dc      	b.n	140f0 <ip_interface_recvfrom+0xec>
   14136:	f1b9 0f00 	cmp.w	r9, #0
   1413a:	d07d      	beq.n	14238 <ip_interface_recvfrom+0x234>
   1413c:	f44f 3280 	mov.w	r2, #65536	; 0x10000
   14140:	6a23      	ldr	r3, [r4, #32]
   14142:	4611      	mov	r1, r2
   14144:	2b00      	cmp	r3, #0
   14146:	bf08      	it	eq
   14148:	f04f 33ff 	moveq.w	r3, #4294967295
   1414c:	4628      	mov	r0, r5
   1414e:	f001 f8ab 	bl	152a8 <interface_socket_wait>
   14152:	4681      	mov	r9, r0
   14154:	b358      	cbz	r0, 141ae <ip_interface_recvfrom+0x1aa>
   14156:	6823      	ldr	r3, [r4, #0]
   14158:	69e0      	ldr	r0, [r4, #28]
   1415a:	031b      	lsls	r3, r3, #12
   1415c:	d521      	bpl.n	141a2 <ip_interface_recvfrom+0x19e>
   1415e:	6823      	ldr	r3, [r4, #0]
   14160:	b29b      	uxth	r3, r3
   14162:	2b0d      	cmp	r3, #13
   14164:	d01d      	beq.n	141a2 <ip_interface_recvfrom+0x19e>
   14166:	6926      	ldr	r6, [r4, #16]
   14168:	f1a6 0601 	sub.w	r6, r6, #1
   1416c:	fab6 f686 	clz	r6, r6
   14170:	0976      	lsrs	r6, r6, #5
   14172:	e787      	b.n	14084 <ip_interface_recvfrom+0x80>
   14174:	6823      	ldr	r3, [r4, #0]
   14176:	0318      	lsls	r0, r3, #12
   14178:	d5dd      	bpl.n	14136 <ip_interface_recvfrom+0x132>
   1417a:	6823      	ldr	r3, [r4, #0]
   1417c:	b29b      	uxth	r3, r3
   1417e:	2b0d      	cmp	r3, #13
   14180:	d0d9      	beq.n	14136 <ip_interface_recvfrom+0x132>
   14182:	6923      	ldr	r3, [r4, #16]
   14184:	69e0      	ldr	r0, [r4, #28]
   14186:	2b01      	cmp	r3, #1
   14188:	d034      	beq.n	141f4 <ip_interface_recvfrom+0x1f0>
   1418a:	f04f 0939 	mov.w	r9, #57	; 0x39
   1418e:	6823      	ldr	r3, [r4, #0]
   14190:	0c1b      	lsrs	r3, r3, #16
   14192:	041b      	lsls	r3, r3, #16
   14194:	f043 030d 	orr.w	r3, r3, #13
   14198:	6023      	str	r3, [r4, #0]
   1419a:	6823      	ldr	r3, [r4, #0]
   1419c:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
   141a0:	6023      	str	r3, [r4, #0]
   141a2:	6803      	ldr	r3, [r0, #0]
   141a4:	68db      	ldr	r3, [r3, #12]
   141a6:	4798      	blx	r3
   141a8:	3001      	adds	r0, #1
   141aa:	d1bf      	bne.n	1412c <ip_interface_recvfrom+0x128>
   141ac:	e798      	b.n	140e0 <ip_interface_recvfrom+0xdc>
   141ae:	4628      	mov	r0, r5
   141b0:	f001 f8ee 	bl	15390 <interface_socket_from_handle_get>
   141b4:	b138      	cbz	r0, 141c6 <ip_interface_recvfrom+0x1c2>
   141b6:	f8d0 9004 	ldr.w	r9, [r0, #4]
   141ba:	f1b9 0f00 	cmp.w	r9, #0
   141be:	d002      	beq.n	141c6 <ip_interface_recvfrom+0x1c2>
   141c0:	2300      	movs	r3, #0
   141c2:	6043      	str	r3, [r0, #4]
   141c4:	e7c7      	b.n	14156 <ip_interface_recvfrom+0x152>
   141c6:	f04f 0901 	mov.w	r9, #1
   141ca:	e744      	b.n	14056 <ip_interface_recvfrom+0x52>
   141cc:	b11e      	cbz	r6, 141d6 <ip_interface_recvfrom+0x1d2>
   141ce:	6823      	ldr	r3, [r4, #0]
   141d0:	00db      	lsls	r3, r3, #3
   141d2:	d5b3      	bpl.n	1413c <ip_interface_recvfrom+0x138>
   141d4:	e754      	b.n	14080 <ip_interface_recvfrom+0x7c>
   141d6:	69e0      	ldr	r0, [r4, #28]
   141d8:	e754      	b.n	14084 <ip_interface_recvfrom+0x80>
   141da:	6823      	ldr	r3, [r4, #0]
   141dc:	b29b      	uxth	r3, r3
   141de:	2b0d      	cmp	r3, #13
   141e0:	d186      	bne.n	140f0 <ip_interface_recvfrom+0xec>
   141e2:	68a3      	ldr	r3, [r4, #8]
   141e4:	2b00      	cmp	r3, #0
   141e6:	d083      	beq.n	140f0 <ip_interface_recvfrom+0xec>
   141e8:	f8d4 9008 	ldr.w	r9, [r4, #8]
   141ec:	e780      	b.n	140f0 <ip_interface_recvfrom+0xec>
   141ee:	f04f 0909 	mov.w	r9, #9
   141f2:	e791      	b.n	14118 <ip_interface_recvfrom+0x114>
   141f4:	6803      	ldr	r3, [r0, #0]
   141f6:	68db      	ldr	r3, [r3, #12]
   141f8:	4798      	blx	r3
   141fa:	3001      	adds	r0, #1
   141fc:	d00b      	beq.n	14216 <ip_interface_recvfrom+0x212>
   141fe:	f04f 0923 	mov.w	r9, #35	; 0x23
   14202:	6823      	ldr	r3, [r4, #0]
   14204:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   14208:	6023      	str	r3, [r4, #0]
   1420a:	4648      	mov	r0, r9
   1420c:	f7fa fc70 	bl	eaf0 <bsd_os_errno_set>
   14210:	f04f 3bff 	mov.w	fp, #4294967295
   14214:	e770      	b.n	140f8 <ip_interface_recvfrom+0xf4>
   14216:	6823      	ldr	r3, [r4, #0]
   14218:	f04f 0b00 	mov.w	fp, #0
   1421c:	0c1b      	lsrs	r3, r3, #16
   1421e:	041b      	lsls	r3, r3, #16
   14220:	f043 030d 	orr.w	r3, r3, #13
   14224:	6023      	str	r3, [r4, #0]
   14226:	6823      	ldr	r3, [r4, #0]
   14228:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
   1422c:	6023      	str	r3, [r4, #0]
   1422e:	e763      	b.n	140f8 <ip_interface_recvfrom+0xf4>
   14230:	2d00      	cmp	r5, #0
   14232:	f47f af4b 	bne.w	140cc <ip_interface_recvfrom+0xc8>
   14236:	e753      	b.n	140e0 <ip_interface_recvfrom+0xdc>
   14238:	f04f 0923 	mov.w	r9, #35	; 0x23
   1423c:	69e0      	ldr	r0, [r4, #28]
   1423e:	e7b0      	b.n	141a2 <ip_interface_recvfrom+0x19e>
   14240:	f04f 092d 	mov.w	r9, #45	; 0x2d
   14244:	e7e1      	b.n	1420a <ip_interface_recvfrom+0x206>
   14246:	f04f 0916 	mov.w	r9, #22
   1424a:	e7de      	b.n	1420a <ip_interface_recvfrom+0x206>
   1424c:	f04f 0909 	mov.w	r9, #9
   14250:	e7db      	b.n	1420a <ip_interface_recvfrom+0x206>
   14252:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
   14256:	6023      	str	r3, [r4, #0]
   14258:	6823      	ldr	r3, [r4, #0]
   1425a:	f04f 0969 	mov.w	r9, #105	; 0x69
   1425e:	0c1b      	lsrs	r3, r3, #16
   14260:	041b      	lsls	r3, r3, #16
   14262:	f043 030d 	orr.w	r3, r3, #13
   14266:	6023      	str	r3, [r4, #0]
   14268:	e7cf      	b.n	1420a <ip_interface_recvfrom+0x206>
   1426a:	bf00      	nop

0001426c <ip_interface_connect>:
   1426c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   14270:	b083      	sub	sp, #12
   14272:	2900      	cmp	r1, #0
   14274:	d049      	beq.n	1430a <ip_interface_connect+0x9e>
   14276:	4616      	mov	r6, r2
   14278:	2a00      	cmp	r2, #0
   1427a:	d046      	beq.n	1430a <ip_interface_connect+0x9e>
   1427c:	4607      	mov	r7, r0
   1427e:	4688      	mov	r8, r1
   14280:	f001 f886 	bl	15390 <interface_socket_from_handle_get>
   14284:	4605      	mov	r5, r0
   14286:	2800      	cmp	r0, #0
   14288:	f000 80a8 	beq.w	143dc <ip_interface_connect+0x170>
   1428c:	6803      	ldr	r3, [r0, #0]
   1428e:	b29b      	uxth	r3, r3
   14290:	2b02      	cmp	r3, #2
   14292:	d004      	beq.n	1429e <ip_interface_connect+0x32>
   14294:	6803      	ldr	r3, [r0, #0]
   14296:	b29b      	uxth	r3, r3
   14298:	2b04      	cmp	r3, #4
   1429a:	f040 808b 	bne.w	143b4 <ip_interface_connect+0x148>
   1429e:	6829      	ldr	r1, [r5, #0]
   142a0:	f011 5100 	ands.w	r1, r1, #536870912	; 0x20000000
   142a4:	f040 8082 	bne.w	143ac <ip_interface_connect+0x140>
   142a8:	a802      	add	r0, sp, #8
   142aa:	f840 1d04 	str.w	r1, [r0, #-4]!
   142ae:	f8d5 9018 	ldr.w	r9, [r5, #24]
   142b2:	f7fb ff89 	bl	101c8 <rpc_ip_client_request_alloc>
   142b6:	bb90      	cbnz	r0, 1431e <ip_interface_connect+0xb2>
   142b8:	2108      	movs	r1, #8
   142ba:	043b      	lsls	r3, r7, #16
   142bc:	9c01      	ldr	r4, [sp, #4]
   142be:	f443 42e0 	orr.w	r2, r3, #28672	; 0x7000
   142c2:	f042 0202 	orr.w	r2, r2, #2
   142c6:	60e2      	str	r2, [r4, #12]
   142c8:	f8c4 9010 	str.w	r9, [r4, #16]
   142cc:	7260      	strb	r0, [r4, #9]
   142ce:	72a0      	strb	r0, [r4, #10]
   142d0:	72e0      	strb	r0, [r4, #11]
   142d2:	7221      	strb	r1, [r4, #8]
   142d4:	f443 43e0 	orr.w	r3, r3, #28672	; 0x7000
   142d8:	f043 0302 	orr.w	r3, r3, #2
   142dc:	60e3      	str	r3, [r4, #12]
   142de:	68a3      	ldr	r3, [r4, #8]
   142e0:	69aa      	ldr	r2, [r5, #24]
   142e2:	3304      	adds	r3, #4
   142e4:	6122      	str	r2, [r4, #16]
   142e6:	60a3      	str	r3, [r4, #8]
   142e8:	68eb      	ldr	r3, [r5, #12]
   142ea:	f8d8 2004 	ldr.w	r2, [r8, #4]
   142ee:	4293      	cmp	r3, r2
   142f0:	d11a      	bne.n	14328 <ip_interface_connect+0xbc>
   142f2:	f898 2000 	ldrb.w	r2, [r8]
   142f6:	4296      	cmp	r6, r2
   142f8:	d107      	bne.n	1430a <ip_interface_connect+0x9e>
   142fa:	2b02      	cmp	r3, #2
   142fc:	f104 0018 	add.w	r0, r4, #24
   14300:	d014      	beq.n	1432c <ip_interface_connect+0xc0>
   14302:	2b0a      	cmp	r3, #10
   14304:	d101      	bne.n	1430a <ip_interface_connect+0x9e>
   14306:	2e24      	cmp	r6, #36	; 0x24
   14308:	d01c      	beq.n	14344 <ip_interface_connect+0xd8>
   1430a:	2416      	movs	r4, #22
   1430c:	4620      	mov	r0, r4
   1430e:	f7fa fbef 	bl	eaf0 <bsd_os_errno_set>
   14312:	f04f 34ff 	mov.w	r4, #4294967295
   14316:	4620      	mov	r0, r4
   14318:	b003      	add	sp, #12
   1431a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   1431e:	9c01      	ldr	r4, [sp, #4]
   14320:	2c00      	cmp	r4, #0
   14322:	d059      	beq.n	143d8 <ip_interface_connect+0x16c>
   14324:	043b      	lsls	r3, r7, #16
   14326:	e7d5      	b.n	142d4 <ip_interface_connect+0x68>
   14328:	242f      	movs	r4, #47	; 0x2f
   1432a:	e7ef      	b.n	1430c <ip_interface_connect+0xa0>
   1432c:	2e10      	cmp	r6, #16
   1432e:	d1ec      	bne.n	1430a <ip_interface_connect+0x9e>
   14330:	2204      	movs	r2, #4
   14332:	f8b8 3008 	ldrh.w	r3, [r8, #8]
   14336:	f108 010c 	add.w	r1, r8, #12
   1433a:	82e2      	strh	r2, [r4, #22]
   1433c:	82a3      	strh	r3, [r4, #20]
   1433e:	f005 fab7 	bl	198b0 <memcpy>
   14342:	e008      	b.n	14356 <ip_interface_connect+0xea>
   14344:	2210      	movs	r2, #16
   14346:	f8b8 3008 	ldrh.w	r3, [r8, #8]
   1434a:	eb08 0102 	add.w	r1, r8, r2
   1434e:	82e2      	strh	r2, [r4, #22]
   14350:	82a3      	strh	r3, [r4, #20]
   14352:	f005 faad 	bl	198b0 <memcpy>
   14356:	68a3      	ldr	r3, [r4, #8]
   14358:	8ae2      	ldrh	r2, [r4, #22]
   1435a:	f247 0102 	movw	r1, #28674	; 0x7002
   1435e:	4413      	add	r3, r2
   14360:	60a3      	str	r3, [r4, #8]
   14362:	682e      	ldr	r6, [r5, #0]
   14364:	682b      	ldr	r3, [r5, #0]
   14366:	4620      	mov	r0, r4
   14368:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
   1436c:	602b      	str	r3, [r5, #0]
   1436e:	f7fb ff3f 	bl	101f0 <rpc_ip_client_request_send>
   14372:	b988      	cbnz	r0, 14398 <ip_interface_connect+0x12c>
   14374:	682b      	ldr	r3, [r5, #0]
   14376:	f013 5880 	ands.w	r8, r3, #268435456	; 0x10000000
   1437a:	d119      	bne.n	143b0 <ip_interface_connect+0x144>
   1437c:	f04f 33ff 	mov.w	r3, #4294967295
   14380:	f64f 72ff 	movw	r2, #65535	; 0xffff
   14384:	2105      	movs	r1, #5
   14386:	4638      	mov	r0, r7
   14388:	f000 ff8e 	bl	152a8 <interface_socket_wait>
   1438c:	4604      	mov	r4, r0
   1438e:	b1c0      	cbz	r0, 143c2 <ip_interface_connect+0x156>
   14390:	2c73      	cmp	r4, #115	; 0x73
   14392:	d0bb      	beq.n	1430c <ip_interface_connect+0xa0>
   14394:	602e      	str	r6, [r5, #0]
   14396:	e7b9      	b.n	1430c <ip_interface_connect+0xa0>
   14398:	6820      	ldr	r0, [r4, #0]
   1439a:	b108      	cbz	r0, 143a0 <ip_interface_connect+0x134>
   1439c:	f7fb ff46 	bl	1022c <rpc_ip_client_data_free>
   143a0:	4620      	mov	r0, r4
   143a2:	f7fb ff3b 	bl	1021c <rpc_ip_client_message_free>
   143a6:	2423      	movs	r4, #35	; 0x23
   143a8:	602e      	str	r6, [r5, #0]
   143aa:	e7af      	b.n	1430c <ip_interface_connect+0xa0>
   143ac:	2472      	movs	r4, #114	; 0x72
   143ae:	e7ad      	b.n	1430c <ip_interface_connect+0xa0>
   143b0:	2473      	movs	r4, #115	; 0x73
   143b2:	e7ab      	b.n	1430c <ip_interface_connect+0xa0>
   143b4:	6803      	ldr	r3, [r0, #0]
   143b6:	b29b      	uxth	r3, r3
   143b8:	2b05      	cmp	r3, #5
   143ba:	bf14      	ite	ne
   143bc:	2409      	movne	r4, #9
   143be:	2438      	moveq	r4, #56	; 0x38
   143c0:	e7a4      	b.n	1430c <ip_interface_connect+0xa0>
   143c2:	4638      	mov	r0, r7
   143c4:	f000 ffe4 	bl	15390 <interface_socket_from_handle_get>
   143c8:	2800      	cmp	r0, #0
   143ca:	d0a4      	beq.n	14316 <ip_interface_connect+0xaa>
   143cc:	6844      	ldr	r4, [r0, #4]
   143ce:	2c00      	cmp	r4, #0
   143d0:	d0a1      	beq.n	14316 <ip_interface_connect+0xaa>
   143d2:	f8c0 8004 	str.w	r8, [r0, #4]
   143d6:	e7db      	b.n	14390 <ip_interface_connect+0x124>
   143d8:	240c      	movs	r4, #12
   143da:	e797      	b.n	1430c <ip_interface_connect+0xa0>
   143dc:	2409      	movs	r4, #9
   143de:	e795      	b.n	1430c <ip_interface_connect+0xa0>

000143e0 <ip_interface_bind>:
   143e0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   143e4:	b083      	sub	sp, #12
   143e6:	b3b1      	cbz	r1, 14456 <ip_interface_bind+0x76>
   143e8:	4616      	mov	r6, r2
   143ea:	b3a2      	cbz	r2, 14456 <ip_interface_bind+0x76>
   143ec:	4607      	mov	r7, r0
   143ee:	4688      	mov	r8, r1
   143f0:	f000 ffce 	bl	15390 <interface_socket_from_handle_get>
   143f4:	4605      	mov	r5, r0
   143f6:	2800      	cmp	r0, #0
   143f8:	d04a      	beq.n	14490 <ip_interface_bind+0xb0>
   143fa:	6803      	ldr	r3, [r0, #0]
   143fc:	b29b      	uxth	r3, r3
   143fe:	2b02      	cmp	r3, #2
   14400:	d146      	bne.n	14490 <ip_interface_bind+0xb0>
   14402:	2100      	movs	r1, #0
   14404:	a802      	add	r0, sp, #8
   14406:	f840 1d04 	str.w	r1, [r0, #-4]!
   1440a:	f8d5 9018 	ldr.w	r9, [r5, #24]
   1440e:	f7fb fedb 	bl	101c8 <rpc_ip_client_request_alloc>
   14412:	bb50      	cbnz	r0, 1446a <ip_interface_bind+0x8a>
   14414:	f247 0305 	movw	r3, #28677	; 0x7005
   14418:	2208      	movs	r2, #8
   1441a:	9c01      	ldr	r4, [sp, #4]
   1441c:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
   14420:	60e3      	str	r3, [r4, #12]
   14422:	f8c4 9010 	str.w	r9, [r4, #16]
   14426:	7260      	strb	r0, [r4, #9]
   14428:	72a0      	strb	r0, [r4, #10]
   1442a:	72e0      	strb	r0, [r4, #11]
   1442c:	7222      	strb	r2, [r4, #8]
   1442e:	68a3      	ldr	r3, [r4, #8]
   14430:	3304      	adds	r3, #4
   14432:	60a3      	str	r3, [r4, #8]
   14434:	68eb      	ldr	r3, [r5, #12]
   14436:	f8d8 2004 	ldr.w	r2, [r8, #4]
   1443a:	4293      	cmp	r3, r2
   1443c:	d11a      	bne.n	14474 <ip_interface_bind+0x94>
   1443e:	f898 2000 	ldrb.w	r2, [r8]
   14442:	4296      	cmp	r6, r2
   14444:	d107      	bne.n	14456 <ip_interface_bind+0x76>
   14446:	2b02      	cmp	r3, #2
   14448:	f104 0018 	add.w	r0, r4, #24
   1444c:	d014      	beq.n	14478 <ip_interface_bind+0x98>
   1444e:	2b0a      	cmp	r3, #10
   14450:	d101      	bne.n	14456 <ip_interface_bind+0x76>
   14452:	2e24      	cmp	r6, #36	; 0x24
   14454:	d01e      	beq.n	14494 <ip_interface_bind+0xb4>
   14456:	2416      	movs	r4, #22
   14458:	4620      	mov	r0, r4
   1445a:	f7fa fb49 	bl	eaf0 <bsd_os_errno_set>
   1445e:	f04f 34ff 	mov.w	r4, #4294967295
   14462:	4620      	mov	r0, r4
   14464:	b003      	add	sp, #12
   14466:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   1446a:	9c01      	ldr	r4, [sp, #4]
   1446c:	2c00      	cmp	r4, #0
   1446e:	d1de      	bne.n	1442e <ip_interface_bind+0x4e>
   14470:	240c      	movs	r4, #12
   14472:	e7f1      	b.n	14458 <ip_interface_bind+0x78>
   14474:	242f      	movs	r4, #47	; 0x2f
   14476:	e7ef      	b.n	14458 <ip_interface_bind+0x78>
   14478:	2e10      	cmp	r6, #16
   1447a:	d1ec      	bne.n	14456 <ip_interface_bind+0x76>
   1447c:	2204      	movs	r2, #4
   1447e:	f8b8 3008 	ldrh.w	r3, [r8, #8]
   14482:	f108 010c 	add.w	r1, r8, #12
   14486:	82e2      	strh	r2, [r4, #22]
   14488:	82a3      	strh	r3, [r4, #20]
   1448a:	f005 fa11 	bl	198b0 <memcpy>
   1448e:	e00a      	b.n	144a6 <ip_interface_bind+0xc6>
   14490:	2409      	movs	r4, #9
   14492:	e7e1      	b.n	14458 <ip_interface_bind+0x78>
   14494:	2210      	movs	r2, #16
   14496:	f8b8 3008 	ldrh.w	r3, [r8, #8]
   1449a:	eb08 0102 	add.w	r1, r8, r2
   1449e:	82e2      	strh	r2, [r4, #22]
   144a0:	82a3      	strh	r3, [r4, #20]
   144a2:	f005 fa05 	bl	198b0 <memcpy>
   144a6:	68a3      	ldr	r3, [r4, #8]
   144a8:	8ae2      	ldrh	r2, [r4, #22]
   144aa:	f247 0105 	movw	r1, #28677	; 0x7005
   144ae:	4413      	add	r3, r2
   144b0:	60a3      	str	r3, [r4, #8]
   144b2:	682b      	ldr	r3, [r5, #0]
   144b4:	4620      	mov	r0, r4
   144b6:	0c1b      	lsrs	r3, r3, #16
   144b8:	041b      	lsls	r3, r3, #16
   144ba:	f043 0303 	orr.w	r3, r3, #3
   144be:	602b      	str	r3, [r5, #0]
   144c0:	682e      	ldr	r6, [r5, #0]
   144c2:	f7fb fe95 	bl	101f0 <rpc_ip_client_request_send>
   144c6:	4680      	mov	r8, r0
   144c8:	b980      	cbnz	r0, 144ec <ip_interface_bind+0x10c>
   144ca:	f04f 33ff 	mov.w	r3, #4294967295
   144ce:	f64f 72ff 	movw	r2, #65535	; 0xffff
   144d2:	2104      	movs	r1, #4
   144d4:	4638      	mov	r0, r7
   144d6:	f000 fee7 	bl	152a8 <interface_socket_wait>
   144da:	4604      	mov	r4, r0
   144dc:	b1a0      	cbz	r0, 14508 <ip_interface_bind+0x128>
   144de:	682b      	ldr	r3, [r5, #0]
   144e0:	0c1b      	lsrs	r3, r3, #16
   144e2:	041b      	lsls	r3, r3, #16
   144e4:	f043 0302 	orr.w	r3, r3, #2
   144e8:	602b      	str	r3, [r5, #0]
   144ea:	e7b5      	b.n	14458 <ip_interface_bind+0x78>
   144ec:	6820      	ldr	r0, [r4, #0]
   144ee:	b108      	cbz	r0, 144f4 <ip_interface_bind+0x114>
   144f0:	f7fb fe9c 	bl	1022c <rpc_ip_client_data_free>
   144f4:	0c36      	lsrs	r6, r6, #16
   144f6:	0436      	lsls	r6, r6, #16
   144f8:	4620      	mov	r0, r4
   144fa:	f046 0602 	orr.w	r6, r6, #2
   144fe:	f7fb fe8d 	bl	1021c <rpc_ip_client_message_free>
   14502:	2423      	movs	r4, #35	; 0x23
   14504:	602e      	str	r6, [r5, #0]
   14506:	e7a7      	b.n	14458 <ip_interface_bind+0x78>
   14508:	4638      	mov	r0, r7
   1450a:	f000 ff41 	bl	15390 <interface_socket_from_handle_get>
   1450e:	2800      	cmp	r0, #0
   14510:	d0a7      	beq.n	14462 <ip_interface_bind+0x82>
   14512:	6844      	ldr	r4, [r0, #4]
   14514:	2c00      	cmp	r4, #0
   14516:	d0a4      	beq.n	14462 <ip_interface_bind+0x82>
   14518:	f8c0 8004 	str.w	r8, [r0, #4]
   1451c:	e7df      	b.n	144de <ip_interface_bind+0xfe>
   1451e:	bf00      	nop

00014520 <ip_interface_listen>:
   14520:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   14524:	b082      	sub	sp, #8
   14526:	4606      	mov	r6, r0
   14528:	f000 ff32 	bl	15390 <interface_socket_from_handle_get>
   1452c:	2800      	cmp	r0, #0
   1452e:	d067      	beq.n	14600 <ip_interface_listen+0xe0>
   14530:	6803      	ldr	r3, [r0, #0]
   14532:	4605      	mov	r5, r0
   14534:	b29b      	uxth	r3, r3
   14536:	2b04      	cmp	r3, #4
   14538:	d162      	bne.n	14600 <ip_interface_listen+0xe0>
   1453a:	2100      	movs	r1, #0
   1453c:	4a32      	ldr	r2, [pc, #200]	; (14608 <ip_interface_listen+0xe8>)
   1453e:	4630      	mov	r0, r6
   14540:	f000 fe7a 	bl	15238 <interface_socket_packet_handler_update>
   14544:	4601      	mov	r1, r0
   14546:	2800      	cmp	r0, #0
   14548:	d15c      	bne.n	14604 <ip_interface_listen+0xe4>
   1454a:	a802      	add	r0, sp, #8
   1454c:	f840 1d04 	str.w	r1, [r0, #-4]!
   14550:	69af      	ldr	r7, [r5, #24]
   14552:	f7fb fe39 	bl	101c8 <rpc_ip_client_request_alloc>
   14556:	bba8      	cbnz	r0, 145c4 <ip_interface_listen+0xa4>
   14558:	f247 0308 	movw	r3, #28680	; 0x7008
   1455c:	2208      	movs	r2, #8
   1455e:	9c01      	ldr	r4, [sp, #4]
   14560:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
   14564:	60e3      	str	r3, [r4, #12]
   14566:	6127      	str	r7, [r4, #16]
   14568:	7260      	strb	r0, [r4, #9]
   1456a:	72a0      	strb	r0, [r4, #10]
   1456c:	72e0      	strb	r0, [r4, #11]
   1456e:	7222      	strb	r2, [r4, #8]
   14570:	68a3      	ldr	r3, [r4, #8]
   14572:	f247 0108 	movw	r1, #28680	; 0x7008
   14576:	3304      	adds	r3, #4
   14578:	60a3      	str	r3, [r4, #8]
   1457a:	682b      	ldr	r3, [r5, #0]
   1457c:	4620      	mov	r0, r4
   1457e:	0c1b      	lsrs	r3, r3, #16
   14580:	041b      	lsls	r3, r3, #16
   14582:	f043 0306 	orr.w	r3, r3, #6
   14586:	602b      	str	r3, [r5, #0]
   14588:	682f      	ldr	r7, [r5, #0]
   1458a:	f7fb fe31 	bl	101f0 <rpc_ip_client_request_send>
   1458e:	4680      	mov	r8, r0
   14590:	b9e8      	cbnz	r0, 145ce <ip_interface_listen+0xae>
   14592:	f04f 33ff 	mov.w	r3, #4294967295
   14596:	f64f 72ff 	movw	r2, #65535	; 0xffff
   1459a:	2107      	movs	r1, #7
   1459c:	4630      	mov	r0, r6
   1459e:	f000 fe83 	bl	152a8 <interface_socket_wait>
   145a2:	4604      	mov	r4, r0
   145a4:	b308      	cbz	r0, 145ea <ip_interface_listen+0xca>
   145a6:	682b      	ldr	r3, [r5, #0]
   145a8:	0c1b      	lsrs	r3, r3, #16
   145aa:	041b      	lsls	r3, r3, #16
   145ac:	f043 0304 	orr.w	r3, r3, #4
   145b0:	602b      	str	r3, [r5, #0]
   145b2:	4620      	mov	r0, r4
   145b4:	f7fa fa9c 	bl	eaf0 <bsd_os_errno_set>
   145b8:	f04f 34ff 	mov.w	r4, #4294967295
   145bc:	4620      	mov	r0, r4
   145be:	b002      	add	sp, #8
   145c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   145c4:	9c01      	ldr	r4, [sp, #4]
   145c6:	2c00      	cmp	r4, #0
   145c8:	d1d2      	bne.n	14570 <ip_interface_listen+0x50>
   145ca:	240c      	movs	r4, #12
   145cc:	e7f1      	b.n	145b2 <ip_interface_listen+0x92>
   145ce:	6820      	ldr	r0, [r4, #0]
   145d0:	b108      	cbz	r0, 145d6 <ip_interface_listen+0xb6>
   145d2:	f7fb fe2b 	bl	1022c <rpc_ip_client_data_free>
   145d6:	0c3f      	lsrs	r7, r7, #16
   145d8:	043f      	lsls	r7, r7, #16
   145da:	4620      	mov	r0, r4
   145dc:	f047 0704 	orr.w	r7, r7, #4
   145e0:	f7fb fe1c 	bl	1021c <rpc_ip_client_message_free>
   145e4:	2423      	movs	r4, #35	; 0x23
   145e6:	602f      	str	r7, [r5, #0]
   145e8:	e7e3      	b.n	145b2 <ip_interface_listen+0x92>
   145ea:	4630      	mov	r0, r6
   145ec:	f000 fed0 	bl	15390 <interface_socket_from_handle_get>
   145f0:	2800      	cmp	r0, #0
   145f2:	d0e3      	beq.n	145bc <ip_interface_listen+0x9c>
   145f4:	6844      	ldr	r4, [r0, #4]
   145f6:	2c00      	cmp	r4, #0
   145f8:	d0e0      	beq.n	145bc <ip_interface_listen+0x9c>
   145fa:	f8c0 8004 	str.w	r8, [r0, #4]
   145fe:	e7d2      	b.n	145a6 <ip_interface_listen+0x86>
   14600:	2409      	movs	r4, #9
   14602:	e7d6      	b.n	145b2 <ip_interface_listen+0x92>
   14604:	2423      	movs	r4, #35	; 0x23
   14606:	e7d4      	b.n	145b2 <ip_interface_listen+0x92>
   14608:	000139e5 	.word	0x000139e5

0001460c <ip_interface_accept>:
   1460c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14610:	2500      	movs	r5, #0
   14612:	b085      	sub	sp, #20
   14614:	460f      	mov	r7, r1
   14616:	4690      	mov	r8, r2
   14618:	9502      	str	r5, [sp, #8]
   1461a:	4606      	mov	r6, r0
   1461c:	f000 feb8 	bl	15390 <interface_socket_from_handle_get>
   14620:	4604      	mov	r4, r0
   14622:	2800      	cmp	r0, #0
   14624:	f000 811c 	beq.w	14860 <ip_interface_accept+0x254>
   14628:	6803      	ldr	r3, [r0, #0]
   1462a:	b29b      	uxth	r3, r3
   1462c:	2b07      	cmp	r3, #7
   1462e:	d10a      	bne.n	14646 <ip_interface_accept+0x3a>
   14630:	6803      	ldr	r3, [r0, #0]
   14632:	6805      	ldr	r5, [r0, #0]
   14634:	00db      	lsls	r3, r3, #3
   14636:	d416      	bmi.n	14666 <ip_interface_accept+0x5a>
   14638:	f415 3580 	ands.w	r5, r5, #65536	; 0x10000
   1463c:	d019      	beq.n	14672 <ip_interface_accept+0x66>
   1463e:	6805      	ldr	r5, [r0, #0]
   14640:	f415 3580 	ands.w	r5, r5, #65536	; 0x10000
   14644:	d124      	bne.n	14690 <ip_interface_accept+0x84>
   14646:	f04f 0909 	mov.w	r9, #9
   1464a:	9b02      	ldr	r3, [sp, #8]
   1464c:	b113      	cbz	r3, 14654 <ip_interface_accept+0x48>
   1464e:	4628      	mov	r0, r5
   14650:	f000 fddc 	bl	1520c <interface_socket_free>
   14654:	4648      	mov	r0, r9
   14656:	f04f 39ff 	mov.w	r9, #4294967295
   1465a:	f7fa fa49 	bl	eaf0 <bsd_os_errno_set>
   1465e:	4648      	mov	r0, r9
   14660:	b005      	add	sp, #20
   14662:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14666:	f415 3580 	ands.w	r5, r5, #65536	; 0x10000
   1466a:	d16d      	bne.n	14748 <ip_interface_accept+0x13c>
   1466c:	f04f 0923 	mov.w	r9, #35	; 0x23
   14670:	e7eb      	b.n	1464a <ip_interface_accept+0x3e>
   14672:	f44f 3280 	mov.w	r2, #65536	; 0x10000
   14676:	f04f 33ff 	mov.w	r3, #4294967295
   1467a:	4611      	mov	r1, r2
   1467c:	4630      	mov	r0, r6
   1467e:	f000 fe13 	bl	152a8 <interface_socket_wait>
   14682:	4681      	mov	r9, r0
   14684:	2800      	cmp	r0, #0
   14686:	d07e      	beq.n	14786 <ip_interface_accept+0x17a>
   14688:	6825      	ldr	r5, [r4, #0]
   1468a:	f415 3580 	ands.w	r5, r5, #65536	; 0x10000
   1468e:	d0dc      	beq.n	1464a <ip_interface_accept+0x3e>
   14690:	f04f 30ff 	mov.w	r0, #4294967295
   14694:	2300      	movs	r3, #0
   14696:	e9cd 0300 	strd	r0, r3, [sp]
   1469a:	4a75      	ldr	r2, [pc, #468]	; (14870 <ip_interface_accept+0x264>)
   1469c:	6921      	ldr	r1, [r4, #16]
   1469e:	a802      	add	r0, sp, #8
   146a0:	f000 fd50 	bl	15144 <interface_socket_allocate>
   146a4:	9b02      	ldr	r3, [sp, #8]
   146a6:	4605      	mov	r5, r0
   146a8:	2b00      	cmp	r3, #0
   146aa:	f000 80dd 	beq.w	14868 <ip_interface_accept+0x25c>
   146ae:	2100      	movs	r1, #0
   146b0:	6962      	ldr	r2, [r4, #20]
   146b2:	a804      	add	r0, sp, #16
   146b4:	615a      	str	r2, [r3, #20]
   146b6:	68e2      	ldr	r2, [r4, #12]
   146b8:	f840 1d04 	str.w	r1, [r0, #-4]!
   146bc:	60da      	str	r2, [r3, #12]
   146be:	6922      	ldr	r2, [r4, #16]
   146c0:	611a      	str	r2, [r3, #16]
   146c2:	f8d4 9018 	ldr.w	r9, [r4, #24]
   146c6:	f7fb fd7f 	bl	101c8 <rpc_ip_client_request_alloc>
   146ca:	2800      	cmp	r0, #0
   146cc:	d143      	bne.n	14756 <ip_interface_accept+0x14a>
   146ce:	f247 030c 	movw	r3, #28684	; 0x700c
   146d2:	2108      	movs	r1, #8
   146d4:	f8dd b00c 	ldr.w	fp, [sp, #12]
   146d8:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
   146dc:	f8cb 300c 	str.w	r3, [fp, #12]
   146e0:	f8cb 9010 	str.w	r9, [fp, #16]
   146e4:	f88b 0009 	strb.w	r0, [fp, #9]
   146e8:	f88b 000a 	strb.w	r0, [fp, #10]
   146ec:	f88b 000b 	strb.w	r0, [fp, #11]
   146f0:	f88b 1008 	strb.w	r1, [fp, #8]
   146f4:	6823      	ldr	r3, [r4, #0]
   146f6:	f247 010c 	movw	r1, #28684	; 0x700c
   146fa:	0c1b      	lsrs	r3, r3, #16
   146fc:	041b      	lsls	r3, r3, #16
   146fe:	f043 0308 	orr.w	r3, r3, #8
   14702:	6023      	str	r3, [r4, #0]
   14704:	4658      	mov	r0, fp
   14706:	f8d4 9000 	ldr.w	r9, [r4]
   1470a:	f7fb fd71 	bl	101f0 <rpc_ip_client_request_send>
   1470e:	4682      	mov	sl, r0
   14710:	bb48      	cbnz	r0, 14766 <ip_interface_accept+0x15a>
   14712:	6822      	ldr	r2, [r4, #0]
   14714:	9900      	ldr	r1, [sp, #0]
   14716:	f04f 33ff 	mov.w	r3, #4294967295
   1471a:	400a      	ands	r2, r1
   1471c:	6022      	str	r2, [r4, #0]
   1471e:	2109      	movs	r1, #9
   14720:	f64f 72ff 	movw	r2, #65535	; 0xffff
   14724:	4630      	mov	r0, r6
   14726:	f000 fdbf 	bl	152a8 <interface_socket_wait>
   1472a:	4681      	mov	r9, r0
   1472c:	2800      	cmp	r0, #0
   1472e:	f000 8085 	beq.w	1483c <ip_interface_accept+0x230>
   14732:	6823      	ldr	r3, [r4, #0]
   14734:	9a01      	ldr	r2, [sp, #4]
   14736:	431a      	orrs	r2, r3
   14738:	6022      	str	r2, [r4, #0]
   1473a:	6823      	ldr	r3, [r4, #0]
   1473c:	0c1b      	lsrs	r3, r3, #16
   1473e:	041b      	lsls	r3, r3, #16
   14740:	f043 0307 	orr.w	r3, r3, #7
   14744:	6023      	str	r3, [r4, #0]
   14746:	e780      	b.n	1464a <ip_interface_accept+0x3e>
   14748:	f06f 5280 	mvn.w	r2, #268435456	; 0x10000000
   1474c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   14750:	e9cd 2300 	strd	r2, r3, [sp]
   14754:	e7a1      	b.n	1469a <ip_interface_accept+0x8e>
   14756:	f8dd b00c 	ldr.w	fp, [sp, #12]
   1475a:	f04f 090c 	mov.w	r9, #12
   1475e:	f1bb 0f00 	cmp.w	fp, #0
   14762:	d1c7      	bne.n	146f4 <ip_interface_accept+0xe8>
   14764:	e771      	b.n	1464a <ip_interface_accept+0x3e>
   14766:	f8db 0000 	ldr.w	r0, [fp]
   1476a:	b108      	cbz	r0, 14770 <ip_interface_accept+0x164>
   1476c:	f7fb fd5e 	bl	1022c <rpc_ip_client_data_free>
   14770:	ea4f 4919 	mov.w	r9, r9, lsr #16
   14774:	4658      	mov	r0, fp
   14776:	ea4f 4909 	mov.w	r9, r9, lsl #16
   1477a:	f7fb fd4f 	bl	1021c <rpc_ip_client_message_free>
   1477e:	f049 0307 	orr.w	r3, r9, #7
   14782:	6023      	str	r3, [r4, #0]
   14784:	e772      	b.n	1466c <ip_interface_accept+0x60>
   14786:	4630      	mov	r0, r6
   14788:	f000 fe02 	bl	15390 <interface_socket_from_handle_get>
   1478c:	b130      	cbz	r0, 1479c <ip_interface_accept+0x190>
   1478e:	f8d0 9004 	ldr.w	r9, [r0, #4]
   14792:	f1b9 0f00 	cmp.w	r9, #0
   14796:	d001      	beq.n	1479c <ip_interface_accept+0x190>
   14798:	6045      	str	r5, [r0, #4]
   1479a:	e775      	b.n	14688 <ip_interface_accept+0x7c>
   1479c:	6823      	ldr	r3, [r4, #0]
   1479e:	03d9      	lsls	r1, r3, #15
   147a0:	f53f af76 	bmi.w	14690 <ip_interface_accept+0x84>
   147a4:	4d33      	ldr	r5, [pc, #204]	; (14874 <ip_interface_accept+0x268>)
   147a6:	9902      	ldr	r1, [sp, #8]
   147a8:	f855 3026 	ldr.w	r3, [r5, r6, lsl #2]
   147ac:	699b      	ldr	r3, [r3, #24]
   147ae:	618b      	str	r3, [r1, #24]
   147b0:	b147      	cbz	r7, 147c4 <ip_interface_accept+0x1b8>
   147b2:	68cb      	ldr	r3, [r1, #12]
   147b4:	2b0a      	cmp	r3, #10
   147b6:	d024      	beq.n	14802 <ip_interface_accept+0x1f6>
   147b8:	2b02      	cmp	r3, #2
   147ba:	d103      	bne.n	147c4 <ip_interface_accept+0x1b8>
   147bc:	f8d8 2000 	ldr.w	r2, [r8]
   147c0:	2a10      	cmp	r2, #16
   147c2:	d032      	beq.n	1482a <ip_interface_accept+0x21e>
   147c4:	680a      	ldr	r2, [r1, #0]
   147c6:	482c      	ldr	r0, [pc, #176]	; (14878 <ip_interface_accept+0x26c>)
   147c8:	4002      	ands	r2, r0
   147ca:	f042 0205 	orr.w	r2, r2, #5
   147ce:	600a      	str	r2, [r1, #0]
   147d0:	9a02      	ldr	r2, [sp, #8]
   147d2:	6811      	ldr	r1, [r2, #0]
   147d4:	f441 3100 	orr.w	r1, r1, #131072	; 0x20000
   147d8:	6011      	str	r1, [r2, #0]
   147da:	6811      	ldr	r1, [r2, #0]
   147dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   147e0:	6011      	str	r1, [r2, #0]
   147e2:	6823      	ldr	r3, [r4, #0]
   147e4:	4003      	ands	r3, r0
   147e6:	f043 0307 	orr.w	r3, r3, #7
   147ea:	6023      	str	r3, [r4, #0]
   147ec:	f855 0026 	ldr.w	r0, [r5, r6, lsl #2]
   147f0:	f7fb fd14 	bl	1021c <rpc_ip_client_message_free>
   147f4:	2300      	movs	r3, #0
   147f6:	4648      	mov	r0, r9
   147f8:	f845 3026 	str.w	r3, [r5, r6, lsl #2]
   147fc:	b005      	add	sp, #20
   147fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14802:	f8d8 2000 	ldr.w	r2, [r8]
   14806:	2a24      	cmp	r2, #36	; 0x24
   14808:	d1dc      	bne.n	147c4 <ip_interface_accept+0x1b8>
   1480a:	703a      	strb	r2, [r7, #0]
   1480c:	2210      	movs	r2, #16
   1480e:	607b      	str	r3, [r7, #4]
   14810:	f855 3026 	ldr.w	r3, [r5, r6, lsl #2]
   14814:	f107 0010 	add.w	r0, r7, #16
   14818:	8b9b      	ldrh	r3, [r3, #28]
   1481a:	813b      	strh	r3, [r7, #8]
   1481c:	f855 1026 	ldr.w	r1, [r5, r6, lsl #2]
   14820:	3120      	adds	r1, #32
   14822:	f005 f845 	bl	198b0 <memcpy>
   14826:	9902      	ldr	r1, [sp, #8]
   14828:	e7cc      	b.n	147c4 <ip_interface_accept+0x1b8>
   1482a:	703a      	strb	r2, [r7, #0]
   1482c:	607b      	str	r3, [r7, #4]
   1482e:	f855 3026 	ldr.w	r3, [r5, r6, lsl #2]
   14832:	f107 000c 	add.w	r0, r7, #12
   14836:	8b9b      	ldrh	r3, [r3, #28]
   14838:	2204      	movs	r2, #4
   1483a:	e7ee      	b.n	1481a <ip_interface_accept+0x20e>
   1483c:	4630      	mov	r0, r6
   1483e:	f000 fda7 	bl	15390 <interface_socket_from_handle_get>
   14842:	b138      	cbz	r0, 14854 <ip_interface_accept+0x248>
   14844:	f8d0 9004 	ldr.w	r9, [r0, #4]
   14848:	f1b9 0f00 	cmp.w	r9, #0
   1484c:	d002      	beq.n	14854 <ip_interface_accept+0x248>
   1484e:	f8c0 a004 	str.w	sl, [r0, #4]
   14852:	e76e      	b.n	14732 <ip_interface_accept+0x126>
   14854:	6823      	ldr	r3, [r4, #0]
   14856:	9a01      	ldr	r2, [sp, #4]
   14858:	46a9      	mov	r9, r5
   1485a:	4313      	orrs	r3, r2
   1485c:	6023      	str	r3, [r4, #0]
   1485e:	e7a1      	b.n	147a4 <ip_interface_accept+0x198>
   14860:	4605      	mov	r5, r0
   14862:	f04f 0909 	mov.w	r9, #9
   14866:	e6f0      	b.n	1464a <ip_interface_accept+0x3e>
   14868:	f04f 090c 	mov.w	r9, #12
   1486c:	e6f2      	b.n	14654 <ip_interface_accept+0x48>
   1486e:	bf00      	nop
   14870:	000139e5 	.word	0x000139e5
   14874:	200205b8 	.word	0x200205b8
   14878:	ffff0000 	.word	0xffff0000

0001487c <ip_interface_setopt>:
   1487c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   14880:	2901      	cmp	r1, #1
   14882:	b084      	sub	sp, #16
   14884:	f040 809c 	bne.w	149c0 <ip_interface_setopt+0x144>
   14888:	460e      	mov	r6, r1
   1488a:	4690      	mov	r8, r2
   1488c:	461d      	mov	r5, r3
   1488e:	4607      	mov	r7, r0
   14890:	f000 fd7e 	bl	15390 <interface_socket_from_handle_get>
   14894:	4604      	mov	r4, r0
   14896:	2800      	cmp	r0, #0
   14898:	f000 80a5 	beq.w	149e6 <ip_interface_setopt+0x16a>
   1489c:	f1b8 0f19 	cmp.w	r8, #25
   148a0:	d16e      	bne.n	14980 <ip_interface_setopt+0x104>
   148a2:	2d00      	cmp	r5, #0
   148a4:	f000 8092 	beq.w	149cc <ip_interface_setopt+0x150>
   148a8:	4628      	mov	r0, r5
   148aa:	f004 ffcf 	bl	1984c <strlen>
   148ae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   148b0:	4298      	cmp	r0, r3
   148b2:	f040 808b 	bne.w	149cc <ip_interface_setopt+0x150>
   148b6:	6823      	ldr	r3, [r4, #0]
   148b8:	b29b      	uxth	r3, r3
   148ba:	2b02      	cmp	r3, #2
   148bc:	d173      	bne.n	149a6 <ip_interface_setopt+0x12a>
   148be:	4629      	mov	r1, r5
   148c0:	68e0      	ldr	r0, [r4, #12]
   148c2:	f7fe fb2b 	bl	12f1c <pdn_interface_pdn_id_get>
   148c6:	9002      	str	r0, [sp, #8]
   148c8:	3001      	adds	r0, #1
   148ca:	bf08      	it	eq
   148cc:	2516      	moveq	r5, #22
   148ce:	d04e      	beq.n	1496e <ip_interface_setopt+0xf2>
   148d0:	6823      	ldr	r3, [r4, #0]
   148d2:	025b      	lsls	r3, r3, #9
   148d4:	d44a      	bmi.n	1496c <ip_interface_setopt+0xf0>
   148d6:	6823      	ldr	r3, [r4, #0]
   148d8:	f413 0300 	ands.w	r3, r3, #8388608	; 0x800000
   148dc:	d146      	bne.n	1496c <ip_interface_setopt+0xf0>
   148de:	6826      	ldr	r6, [r4, #0]
   148e0:	6822      	ldr	r2, [r4, #0]
   148e2:	a804      	add	r0, sp, #16
   148e4:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
   148e8:	6022      	str	r2, [r4, #0]
   148ea:	2104      	movs	r1, #4
   148ec:	f840 3d04 	str.w	r3, [r0, #-4]!
   148f0:	f8d4 8018 	ldr.w	r8, [r4, #24]
   148f4:	f7fb fc68 	bl	101c8 <rpc_ip_client_request_alloc>
   148f8:	2800      	cmp	r0, #0
   148fa:	d14e      	bne.n	1499a <ip_interface_setopt+0x11e>
   148fc:	f247 0203 	movw	r2, #28675	; 0x7003
   14900:	2300      	movs	r3, #0
   14902:	2108      	movs	r1, #8
   14904:	9d03      	ldr	r5, [sp, #12]
   14906:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
   1490a:	60ea      	str	r2, [r5, #12]
   1490c:	f8c5 8010 	str.w	r8, [r5, #16]
   14910:	7229      	strb	r1, [r5, #8]
   14912:	726b      	strb	r3, [r5, #9]
   14914:	72ab      	strb	r3, [r5, #10]
   14916:	72eb      	strb	r3, [r5, #11]
   14918:	f04f 0c08 	mov.w	ip, #8
   1491c:	2300      	movs	r3, #0
   1491e:	2010      	movs	r0, #16
   14920:	2130      	movs	r1, #48	; 0x30
   14922:	68aa      	ldr	r2, [r5, #8]
   14924:	756b      	strb	r3, [r5, #21]
   14926:	4462      	add	r2, ip
   14928:	60aa      	str	r2, [r5, #8]
   1492a:	75ab      	strb	r3, [r5, #22]
   1492c:	75eb      	strb	r3, [r5, #23]
   1492e:	76ab      	strb	r3, [r5, #26]
   14930:	76eb      	strb	r3, [r5, #27]
   14932:	f885 c014 	strb.w	ip, [r5, #20]
   14936:	7628      	strb	r0, [r5, #24]
   14938:	7669      	strb	r1, [r5, #25]
   1493a:	2204      	movs	r2, #4
   1493c:	eb0d 010c 	add.w	r1, sp, ip
   14940:	6828      	ldr	r0, [r5, #0]
   14942:	f004 ffb5 	bl	198b0 <memcpy>
   14946:	f247 0103 	movw	r1, #28675	; 0x7003
   1494a:	4628      	mov	r0, r5
   1494c:	f7fb fc50 	bl	101f0 <rpc_ip_client_request_send>
   14950:	4680      	mov	r8, r0
   14952:	bb50      	cbnz	r0, 149aa <ip_interface_setopt+0x12e>
   14954:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
   14958:	f04f 33ff 	mov.w	r3, #4294967295
   1495c:	4611      	mov	r1, r2
   1495e:	4638      	mov	r0, r7
   14960:	f000 fca2 	bl	152a8 <interface_socket_wait>
   14964:	4605      	mov	r5, r0
   14966:	b398      	cbz	r0, 149d0 <ip_interface_setopt+0x154>
   14968:	6026      	str	r6, [r4, #0]
   1496a:	e000      	b.n	1496e <ip_interface_setopt+0xf2>
   1496c:	2523      	movs	r5, #35	; 0x23
   1496e:	4628      	mov	r0, r5
   14970:	f7fa f8be 	bl	eaf0 <bsd_os_errno_set>
   14974:	f04f 35ff 	mov.w	r5, #4294967295
   14978:	4628      	mov	r0, r5
   1497a:	b004      	add	sp, #16
   1497c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   14980:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   14982:	4642      	mov	r2, r8
   14984:	9300      	str	r3, [sp, #0]
   14986:	4631      	mov	r1, r6
   14988:	462b      	mov	r3, r5
   1498a:	4638      	mov	r0, r7
   1498c:	f000 fd28 	bl	153e0 <interface_socket_setopt>
   14990:	4605      	mov	r5, r0
   14992:	4628      	mov	r0, r5
   14994:	b004      	add	sp, #16
   14996:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1499a:	9d03      	ldr	r5, [sp, #12]
   1499c:	2d00      	cmp	r5, #0
   1499e:	d1bb      	bne.n	14918 <ip_interface_setopt+0x9c>
   149a0:	6026      	str	r6, [r4, #0]
   149a2:	250c      	movs	r5, #12
   149a4:	e7e3      	b.n	1496e <ip_interface_setopt+0xf2>
   149a6:	2509      	movs	r5, #9
   149a8:	e7e1      	b.n	1496e <ip_interface_setopt+0xf2>
   149aa:	6828      	ldr	r0, [r5, #0]
   149ac:	b108      	cbz	r0, 149b2 <ip_interface_setopt+0x136>
   149ae:	f7fb fc3d 	bl	1022c <rpc_ip_client_data_free>
   149b2:	4628      	mov	r0, r5
   149b4:	f7fb fc32 	bl	1021c <rpc_ip_client_message_free>
   149b8:	2523      	movs	r5, #35	; 0x23
   149ba:	6026      	str	r6, [r4, #0]
   149bc:	6026      	str	r6, [r4, #0]
   149be:	e7d6      	b.n	1496e <ip_interface_setopt+0xf2>
   149c0:	202a      	movs	r0, #42	; 0x2a
   149c2:	f7fa f895 	bl	eaf0 <bsd_os_errno_set>
   149c6:	f04f 35ff 	mov.w	r5, #4294967295
   149ca:	e7d5      	b.n	14978 <ip_interface_setopt+0xfc>
   149cc:	250e      	movs	r5, #14
   149ce:	e7ce      	b.n	1496e <ip_interface_setopt+0xf2>
   149d0:	4638      	mov	r0, r7
   149d2:	f000 fcdd 	bl	15390 <interface_socket_from_handle_get>
   149d6:	b120      	cbz	r0, 149e2 <ip_interface_setopt+0x166>
   149d8:	6845      	ldr	r5, [r0, #4]
   149da:	b115      	cbz	r5, 149e2 <ip_interface_setopt+0x166>
   149dc:	f8c0 8004 	str.w	r8, [r0, #4]
   149e0:	e7c2      	b.n	14968 <ip_interface_setopt+0xec>
   149e2:	6026      	str	r6, [r4, #0]
   149e4:	e7c8      	b.n	14978 <ip_interface_setopt+0xfc>
   149e6:	2009      	movs	r0, #9
   149e8:	f7fa f882 	bl	eaf0 <bsd_os_errno_set>
   149ec:	f04f 35ff 	mov.w	r5, #4294967295
   149f0:	e7c2      	b.n	14978 <ip_interface_setopt+0xfc>
   149f2:	bf00      	nop

000149f4 <ip_interface_getopt>:
   149f4:	f000 bd36 	b.w	15464 <interface_socket_getopt>

000149f8 <ip_interface_getaddrinfo>:
   149f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   149fc:	f04f 0c00 	mov.w	ip, #0
   14a00:	2401      	movs	r4, #1
   14a02:	4e72      	ldr	r6, [pc, #456]	; (14bcc <ip_interface_getaddrinfo+0x1d4>)
   14a04:	f8df a1d0 	ldr.w	sl, [pc, #464]	; 14bd8 <ip_interface_getaddrinfo+0x1e0>
   14a08:	f8df 91d0 	ldr.w	r9, [pc, #464]	; 14bdc <ip_interface_getaddrinfo+0x1e4>
   14a0c:	b085      	sub	sp, #20
   14a0e:	4607      	mov	r7, r0
   14a10:	4615      	mov	r5, r2
   14a12:	9301      	str	r3, [sp, #4]
   14a14:	f8a6 c000 	strh.w	ip, [r6]
   14a18:	f8ca 4000 	str.w	r4, [sl]
   14a1c:	f8c9 4000 	str.w	r4, [r9]
   14a20:	b171      	cbz	r1, 14a40 <ip_interface_getaddrinfo+0x48>
   14a22:	4608      	mov	r0, r1
   14a24:	220a      	movs	r2, #10
   14a26:	4661      	mov	r1, ip
   14a28:	f004 fe6f 	bl	1970a <strtol>
   14a2c:	f64f 73fe 	movw	r3, #65534	; 0xfffe
   14a30:	1e42      	subs	r2, r0, #1
   14a32:	429a      	cmp	r2, r3
   14a34:	f200 8083 	bhi.w	14b3e <ip_interface_getaddrinfo+0x146>
   14a38:	0203      	lsls	r3, r0, #8
   14a3a:	ea43 2020 	orr.w	r0, r3, r0, asr #8
   14a3e:	8030      	strh	r0, [r6, #0]
   14a40:	f8df 819c 	ldr.w	r8, [pc, #412]	; 14be0 <ip_interface_getaddrinfo+0x1e8>
   14a44:	f8d8 3000 	ldr.w	r3, [r8]
   14a48:	2b00      	cmp	r3, #0
   14a4a:	d174      	bne.n	14b36 <ip_interface_getaddrinfo+0x13e>
   14a4c:	4a60      	ldr	r2, [pc, #384]	; (14bd0 <ip_interface_getaddrinfo+0x1d8>)
   14a4e:	6013      	str	r3, [r2, #0]
   14a50:	4a60      	ldr	r2, [pc, #384]	; (14bd4 <ip_interface_getaddrinfo+0x1dc>)
   14a52:	6013      	str	r3, [r2, #0]
   14a54:	2f00      	cmp	r7, #0
   14a56:	d062      	beq.n	14b1e <ip_interface_getaddrinfo+0x126>
   14a58:	4638      	mov	r0, r7
   14a5a:	f004 fef7 	bl	1984c <strlen>
   14a5e:	4683      	mov	fp, r0
   14a60:	b125      	cbz	r5, 14a6c <ip_interface_getaddrinfo+0x74>
   14a62:	69ea      	ldr	r2, [r5, #28]
   14a64:	b112      	cbz	r2, 14a6c <ip_interface_getaddrinfo+0x74>
   14a66:	6851      	ldr	r1, [r2, #4]
   14a68:	2966      	cmp	r1, #102	; 0x66
   14a6a:	d06c      	beq.n	14b46 <ip_interface_getaddrinfo+0x14e>
   14a6c:	f04f 32ff 	mov.w	r2, #4294967295
   14a70:	2100      	movs	r1, #0
   14a72:	ae04      	add	r6, sp, #16
   14a74:	f846 1d04 	str.w	r1, [r6, #-4]!
   14a78:	4630      	mov	r0, r6
   14a7a:	4659      	mov	r1, fp
   14a7c:	9200      	str	r2, [sp, #0]
   14a7e:	f7fb fba3 	bl	101c8 <rpc_ip_client_request_alloc>
   14a82:	9a00      	ldr	r2, [sp, #0]
   14a84:	2800      	cmp	r0, #0
   14a86:	d14c      	bne.n	14b22 <ip_interface_getaddrinfo+0x12a>
   14a88:	f247 010d 	movw	r1, #28685	; 0x700d
   14a8c:	f04f 0c08 	mov.w	ip, #8
   14a90:	9c03      	ldr	r4, [sp, #12]
   14a92:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
   14a96:	60e1      	str	r1, [r4, #12]
   14a98:	6122      	str	r2, [r4, #16]
   14a9a:	7260      	strb	r0, [r4, #9]
   14a9c:	72a0      	strb	r0, [r4, #10]
   14a9e:	72e0      	strb	r0, [r4, #11]
   14aa0:	f884 c008 	strb.w	ip, [r4, #8]
   14aa4:	2d00      	cmp	r5, #0
   14aa6:	d076      	beq.n	14b96 <ip_interface_getaddrinfo+0x19e>
   14aa8:	686a      	ldr	r2, [r5, #4]
   14aaa:	f022 0108 	bic.w	r1, r2, #8
   14aae:	2902      	cmp	r1, #2
   14ab0:	d05c      	beq.n	14b6c <ip_interface_getaddrinfo+0x174>
   14ab2:	2a05      	cmp	r2, #5
   14ab4:	d178      	bne.n	14ba8 <ip_interface_getaddrinfo+0x1b0>
   14ab6:	68a9      	ldr	r1, [r5, #8]
   14ab8:	2902      	cmp	r1, #2
   14aba:	f8c9 1000 	str.w	r1, [r9]
   14abe:	d061      	beq.n	14b84 <ip_interface_getaddrinfo+0x18c>
   14ac0:	61a2      	str	r2, [r4, #24]
   14ac2:	68ea      	ldr	r2, [r5, #12]
   14ac4:	6222      	str	r2, [r4, #32]
   14ac6:	68aa      	ldr	r2, [r5, #8]
   14ac8:	61e2      	str	r2, [r4, #28]
   14aca:	682a      	ldr	r2, [r5, #0]
   14acc:	6162      	str	r2, [r4, #20]
   14ace:	68a2      	ldr	r2, [r4, #8]
   14ad0:	3210      	adds	r2, #16
   14ad2:	60a2      	str	r2, [r4, #8]
   14ad4:	b12f      	cbz	r7, 14ae2 <ip_interface_getaddrinfo+0xea>
   14ad6:	6820      	ldr	r0, [r4, #0]
   14ad8:	b118      	cbz	r0, 14ae2 <ip_interface_getaddrinfo+0xea>
   14ada:	465a      	mov	r2, fp
   14adc:	4639      	mov	r1, r7
   14ade:	f004 fee7 	bl	198b0 <memcpy>
   14ae2:	2301      	movs	r3, #1
   14ae4:	f247 010d 	movw	r1, #28685	; 0x700d
   14ae8:	4620      	mov	r0, r4
   14aea:	f8c8 3000 	str.w	r3, [r8]
   14aee:	f7fb fb7f 	bl	101f0 <rpc_ip_client_request_send>
   14af2:	2800      	cmp	r0, #0
   14af4:	d156      	bne.n	14ba4 <ip_interface_getaddrinfo+0x1ac>
   14af6:	f04f 33ff 	mov.w	r3, #4294967295
   14afa:	9303      	str	r3, [sp, #12]
   14afc:	4631      	mov	r1, r6
   14afe:	4620      	mov	r0, r4
   14b00:	f7f9 ff62 	bl	e9c8 <bsd_os_timedwait>
   14b04:	f8d8 3000 	ldr.w	r3, [r8]
   14b08:	2b01      	cmp	r3, #1
   14b0a:	d0f7      	beq.n	14afc <ip_interface_getaddrinfo+0x104>
   14b0c:	4b31      	ldr	r3, [pc, #196]	; (14bd4 <ip_interface_getaddrinfo+0x1dc>)
   14b0e:	6818      	ldr	r0, [r3, #0]
   14b10:	2800      	cmp	r0, #0
   14b12:	d13b      	bne.n	14b8c <ip_interface_getaddrinfo+0x194>
   14b14:	4b2e      	ldr	r3, [pc, #184]	; (14bd0 <ip_interface_getaddrinfo+0x1d8>)
   14b16:	9a01      	ldr	r2, [sp, #4]
   14b18:	681b      	ldr	r3, [r3, #0]
   14b1a:	6013      	str	r3, [r2, #0]
   14b1c:	e00c      	b.n	14b38 <ip_interface_getaddrinfo+0x140>
   14b1e:	46bb      	mov	fp, r7
   14b20:	e79e      	b.n	14a60 <ip_interface_getaddrinfo+0x68>
   14b22:	9c03      	ldr	r4, [sp, #12]
   14b24:	2c00      	cmp	r4, #0
   14b26:	d1bd      	bne.n	14aa4 <ip_interface_getaddrinfo+0xac>
   14b28:	200c      	movs	r0, #12
   14b2a:	2300      	movs	r3, #0
   14b2c:	f8c8 3000 	str.w	r3, [r8]
   14b30:	b005      	add	sp, #20
   14b32:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14b36:	2073      	movs	r0, #115	; 0x73
   14b38:	b005      	add	sp, #20
   14b3a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14b3e:	2016      	movs	r0, #22
   14b40:	b005      	add	sp, #20
   14b42:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14b46:	6891      	ldr	r1, [r2, #8]
   14b48:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
   14b4c:	d18e      	bne.n	14a6c <ip_interface_getaddrinfo+0x74>
   14b4e:	f240 2102 	movw	r1, #514	; 0x202
   14b52:	68d0      	ldr	r0, [r2, #12]
   14b54:	4288      	cmp	r0, r1
   14b56:	d189      	bne.n	14a6c <ip_interface_getaddrinfo+0x74>
   14b58:	6991      	ldr	r1, [r2, #24]
   14b5a:	2900      	cmp	r1, #0
   14b5c:	d086      	beq.n	14a6c <ip_interface_getaddrinfo+0x74>
   14b5e:	6868      	ldr	r0, [r5, #4]
   14b60:	f7fe f9dc 	bl	12f1c <pdn_interface_pdn_id_get>
   14b64:	1c43      	adds	r3, r0, #1
   14b66:	d081      	beq.n	14a6c <ip_interface_getaddrinfo+0x74>
   14b68:	4602      	mov	r2, r0
   14b6a:	e781      	b.n	14a70 <ip_interface_getaddrinfo+0x78>
   14b6c:	68a9      	ldr	r1, [r5, #8]
   14b6e:	2902      	cmp	r1, #2
   14b70:	f8c9 1000 	str.w	r1, [r9]
   14b74:	d006      	beq.n	14b84 <ip_interface_getaddrinfo+0x18c>
   14b76:	2a05      	cmp	r2, #5
   14b78:	d0a2      	beq.n	14ac0 <ip_interface_getaddrinfo+0xc8>
   14b7a:	2a0a      	cmp	r2, #10
   14b7c:	bf14      	ite	ne
   14b7e:	2201      	movne	r2, #1
   14b80:	2202      	moveq	r2, #2
   14b82:	e79d      	b.n	14ac0 <ip_interface_getaddrinfo+0xc8>
   14b84:	2102      	movs	r1, #2
   14b86:	f8ca 1000 	str.w	r1, [sl]
   14b8a:	e7f4      	b.n	14b76 <ip_interface_getaddrinfo+0x17e>
   14b8c:	4b11      	ldr	r3, [pc, #68]	; (14bd4 <ip_interface_getaddrinfo+0x1dc>)
   14b8e:	6818      	ldr	r0, [r3, #0]
   14b90:	2800      	cmp	r0, #0
   14b92:	d0d1      	beq.n	14b38 <ip_interface_getaddrinfo+0x140>
   14b94:	e7c9      	b.n	14b2a <ip_interface_getaddrinfo+0x132>
   14b96:	4629      	mov	r1, r5
   14b98:	2210      	movs	r2, #16
   14b9a:	f104 0014 	add.w	r0, r4, #20
   14b9e:	f004 feb1 	bl	19904 <memset>
   14ba2:	e794      	b.n	14ace <ip_interface_getaddrinfo+0xd6>
   14ba4:	2023      	movs	r0, #35	; 0x23
   14ba6:	e7c0      	b.n	14b2a <ip_interface_getaddrinfo+0x132>
   14ba8:	202f      	movs	r0, #47	; 0x2f
   14baa:	f7f9 ffa1 	bl	eaf0 <bsd_os_errno_set>
   14bae:	68a2      	ldr	r2, [r4, #8]
   14bb0:	3210      	adds	r2, #16
   14bb2:	60a2      	str	r2, [r4, #8]
   14bb4:	b917      	cbnz	r7, 14bbc <ip_interface_getaddrinfo+0x1c4>
   14bb6:	f04f 30ff 	mov.w	r0, #4294967295
   14bba:	e7b6      	b.n	14b2a <ip_interface_getaddrinfo+0x132>
   14bbc:	6820      	ldr	r0, [r4, #0]
   14bbe:	2800      	cmp	r0, #0
   14bc0:	d0f9      	beq.n	14bb6 <ip_interface_getaddrinfo+0x1be>
   14bc2:	465a      	mov	r2, fp
   14bc4:	4639      	mov	r1, r7
   14bc6:	f004 fe73 	bl	198b0 <memcpy>
   14bca:	e7f4      	b.n	14bb6 <ip_interface_getaddrinfo+0x1be>
   14bcc:	200249c6 	.word	0x200249c6
   14bd0:	200205b0 	.word	0x200205b0
   14bd4:	200205a8 	.word	0x200205a8
   14bd8:	200205a0 	.word	0x200205a0
   14bdc:	200205a4 	.word	0x200205a4
   14be0:	200205ac 	.word	0x200205ac

00014be4 <ip_interface_freeaddrinfo>:
   14be4:	b538      	push	{r3, r4, r5, lr}
   14be6:	4c0b      	ldr	r4, [pc, #44]	; (14c14 <ip_interface_freeaddrinfo+0x30>)
   14be8:	6823      	ldr	r3, [r4, #0]
   14bea:	2b02      	cmp	r3, #2
   14bec:	d000      	beq.n	14bf0 <ip_interface_freeaddrinfo+0xc>
   14bee:	bd38      	pop	{r3, r4, r5, pc}
   14bf0:	b130      	cbz	r0, 14c00 <ip_interface_freeaddrinfo+0x1c>
   14bf2:	4605      	mov	r5, r0
   14bf4:	6940      	ldr	r0, [r0, #20]
   14bf6:	f7fb fab9 	bl	1016c <nrf_free>
   14bfa:	4628      	mov	r0, r5
   14bfc:	f7fb fab6 	bl	1016c <nrf_free>
   14c00:	2300      	movs	r3, #0
   14c02:	4a05      	ldr	r2, [pc, #20]	; (14c18 <ip_interface_freeaddrinfo+0x34>)
   14c04:	4905      	ldr	r1, [pc, #20]	; (14c1c <ip_interface_freeaddrinfo+0x38>)
   14c06:	6023      	str	r3, [r4, #0]
   14c08:	6013      	str	r3, [r2, #0]
   14c0a:	6808      	ldr	r0, [r1, #0]
   14c0c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   14c10:	f7fb bb0c 	b.w	1022c <rpc_ip_client_data_free>
   14c14:	200205ac 	.word	0x200205ac
   14c18:	200205a8 	.word	0x200205a8
   14c1c:	200205b4 	.word	0x200205b4

00014c20 <rpc_ip_event_handler>:
   14c20:	f248 030d 	movw	r3, #32781	; 0x800d
   14c24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14c28:	4299      	cmp	r1, r3
   14c2a:	b089      	sub	sp, #36	; 0x24
   14c2c:	4605      	mov	r5, r0
   14c2e:	d062      	beq.n	14cf6 <rpc_ip_event_handler+0xd6>
   14c30:	f248 030f 	movw	r3, #32783	; 0x800f
   14c34:	4299      	cmp	r1, r3
   14c36:	460c      	mov	r4, r1
   14c38:	d04b      	beq.n	14cd2 <rpc_ip_event_handler+0xb2>
   14c3a:	f401 4310 	and.w	r3, r1, #36864	; 0x9000
   14c3e:	f5b3 4f10 	cmp.w	r3, #36864	; 0x9000
   14c42:	68c0      	ldr	r0, [r0, #12]
   14c44:	d07b      	beq.n	14d3e <rpc_ip_event_handler+0x11e>
   14c46:	0c07      	lsrs	r7, r0, #16
   14c48:	4638      	mov	r0, r7
   14c4a:	f000 fba1 	bl	15390 <interface_socket_from_handle_get>
   14c4e:	4606      	mov	r6, r0
   14c50:	2800      	cmp	r0, #0
   14c52:	d05f      	beq.n	14d14 <rpc_ip_event_handler+0xf4>
   14c54:	4601      	mov	r1, r0
   14c56:	4623      	mov	r3, r4
   14c58:	462a      	mov	r2, r5
   14c5a:	4638      	mov	r0, r7
   14c5c:	f7fb ff1e 	bl	10a9c <tls_rpc_ip_event_handler>
   14c60:	2800      	cmp	r0, #0
   14c62:	d053      	beq.n	14d0c <rpc_ip_event_handler+0xec>
   14c64:	f248 0307 	movw	r3, #32775	; 0x8007
   14c68:	429c      	cmp	r4, r3
   14c6a:	d97d      	bls.n	14d68 <rpc_ip_event_handler+0x148>
   14c6c:	f248 030c 	movw	r3, #32780	; 0x800c
   14c70:	429c      	cmp	r4, r3
   14c72:	d068      	beq.n	14d46 <rpc_ip_event_handler+0x126>
   14c74:	f240 8119 	bls.w	14eaa <rpc_ip_event_handler+0x28a>
   14c78:	f249 0302 	movw	r3, #36866	; 0x9002
   14c7c:	429c      	cmp	r4, r3
   14c7e:	f000 8195 	beq.w	14fac <rpc_ip_event_handler+0x38c>
   14c82:	f249 0303 	movw	r3, #36867	; 0x9003
   14c86:	429c      	cmp	r4, r3
   14c88:	f000 81aa 	beq.w	14fe0 <rpc_ip_event_handler+0x3c0>
   14c8c:	f249 0301 	movw	r3, #36865	; 0x9001
   14c90:	429c      	cmp	r4, r3
   14c92:	d13f      	bne.n	14d14 <rpc_ip_event_handler+0xf4>
   14c94:	6834      	ldr	r4, [r6, #0]
   14c96:	f414 1480 	ands.w	r4, r4, #1048576	; 0x100000
   14c9a:	f000 81c2 	beq.w	15022 <rpc_ip_event_handler+0x402>
   14c9e:	68ab      	ldr	r3, [r5, #8]
   14ca0:	2b04      	cmp	r3, #4
   14ca2:	f200 81ff 	bhi.w	150a4 <rpc_ip_event_handler+0x484>
   14ca6:	2400      	movs	r4, #0
   14ca8:	4627      	mov	r7, r4
   14caa:	6829      	ldr	r1, [r5, #0]
   14cac:	686a      	ldr	r2, [r5, #4]
   14cae:	e9cd 7406 	strd	r7, r4, [sp, #24]
   14cb2:	e9cd 1204 	strd	r1, r2, [sp, #16]
   14cb6:	69f0      	ldr	r0, [r6, #28]
   14cb8:	a904      	add	r1, sp, #16
   14cba:	6803      	ldr	r3, [r0, #0]
   14cbc:	685b      	ldr	r3, [r3, #4]
   14cbe:	4798      	blx	r3
   14cc0:	3001      	adds	r0, #1
   14cc2:	f000 81db 	beq.w	1507c <rpc_ip_event_handler+0x45c>
   14cc6:	6833      	ldr	r3, [r6, #0]
   14cc8:	2000      	movs	r0, #0
   14cca:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   14cce:	6033      	str	r3, [r6, #0]
   14cd0:	e00e      	b.n	14cf0 <rpc_ip_event_handler+0xd0>
   14cd2:	6943      	ldr	r3, [r0, #20]
   14cd4:	2001      	movs	r0, #1
   14cd6:	2b10      	cmp	r3, #16
   14cd8:	49b7      	ldr	r1, [pc, #732]	; (14fb8 <rpc_ip_event_handler+0x398>)
   14cda:	bf88      	it	hi
   14cdc:	222d      	movhi	r2, #45	; 0x2d
   14cde:	7008      	strb	r0, [r1, #0]
   14ce0:	f04f 0000 	mov.w	r0, #0
   14ce4:	bf9c      	itt	ls
   14ce6:	4ab5      	ldrls	r2, [pc, #724]	; (14fbc <rpc_ip_event_handler+0x39c>)
   14ce8:	f852 2023 	ldrls.w	r2, [r2, r3, lsl #2]
   14cec:	4bb4      	ldr	r3, [pc, #720]	; (14fc0 <rpc_ip_event_handler+0x3a0>)
   14cee:	601a      	str	r2, [r3, #0]
   14cf0:	b009      	add	sp, #36	; 0x24
   14cf2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14cf6:	f8df 92dc 	ldr.w	r9, [pc, #732]	; 14fd4 <rpc_ip_event_handler+0x3b4>
   14cfa:	6807      	ldr	r7, [r0, #0]
   14cfc:	f8d9 3000 	ldr.w	r3, [r9]
   14d00:	2b01      	cmp	r3, #1
   14d02:	d00b      	beq.n	14d1c <rpc_ip_event_handler+0xfc>
   14d04:	b117      	cbz	r7, 14d0c <rpc_ip_event_handler+0xec>
   14d06:	4638      	mov	r0, r7
   14d08:	f7fb fa90 	bl	1022c <rpc_ip_client_data_free>
   14d0c:	2000      	movs	r0, #0
   14d0e:	b009      	add	sp, #36	; 0x24
   14d10:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14d14:	6828      	ldr	r0, [r5, #0]
   14d16:	2800      	cmp	r0, #0
   14d18:	d1f6      	bne.n	14d08 <rpc_ip_event_handler+0xe8>
   14d1a:	e7f7      	b.n	14d0c <rpc_ip_event_handler+0xec>
   14d1c:	6943      	ldr	r3, [r0, #20]
   14d1e:	2b00      	cmp	r3, #0
   14d20:	d046      	beq.n	14db0 <rpc_ip_event_handler+0x190>
   14d22:	2b10      	cmp	r3, #16
   14d24:	bf96      	itet	ls
   14d26:	4aa5      	ldrls	r2, [pc, #660]	; (14fbc <rpc_ip_event_handler+0x39c>)
   14d28:	232d      	movhi	r3, #45	; 0x2d
   14d2a:	f852 3023 	ldrls.w	r3, [r2, r3, lsl #2]
   14d2e:	2202      	movs	r2, #2
   14d30:	49a4      	ldr	r1, [pc, #656]	; (14fc4 <rpc_ip_event_handler+0x3a4>)
   14d32:	600b      	str	r3, [r1, #0]
   14d34:	f8c9 2000 	str.w	r2, [r9]
   14d38:	2f00      	cmp	r7, #0
   14d3a:	d1e4      	bne.n	14d06 <rpc_ip_event_handler+0xe6>
   14d3c:	e7e6      	b.n	14d0c <rpc_ip_event_handler+0xec>
   14d3e:	f000 fad5 	bl	152ec <interface_from_internal_id_search>
   14d42:	4607      	mov	r7, r0
   14d44:	e780      	b.n	14c48 <rpc_ip_event_handler+0x28>
   14d46:	6833      	ldr	r3, [r6, #0]
   14d48:	b29b      	uxth	r3, r3
   14d4a:	2b08      	cmp	r3, #8
   14d4c:	d1de      	bne.n	14d0c <rpc_ip_event_handler+0xec>
   14d4e:	696b      	ldr	r3, [r5, #20]
   14d50:	2b00      	cmp	r3, #0
   14d52:	f000 819c 	beq.w	1508e <rpc_ip_event_handler+0x46e>
   14d56:	2b10      	cmp	r3, #16
   14d58:	f200 8161 	bhi.w	1501e <rpc_ip_event_handler+0x3fe>
   14d5c:	4a97      	ldr	r2, [pc, #604]	; (14fbc <rpc_ip_event_handler+0x39c>)
   14d5e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14d62:	6073      	str	r3, [r6, #4]
   14d64:	2000      	movs	r0, #0
   14d66:	e7c3      	b.n	14cf0 <rpc_ip_event_handler+0xd0>
   14d68:	f248 0306 	movw	r3, #32774	; 0x8006
   14d6c:	429c      	cmp	r4, r3
   14d6e:	f080 810d 	bcs.w	14f8c <rpc_ip_event_handler+0x36c>
   14d72:	f248 0302 	movw	r3, #32770	; 0x8002
   14d76:	429c      	cmp	r4, r3
   14d78:	f000 80f0 	beq.w	14f5c <rpc_ip_event_handler+0x33c>
   14d7c:	f240 80be 	bls.w	14efc <rpc_ip_event_handler+0x2dc>
   14d80:	f248 0303 	movw	r3, #32771	; 0x8003
   14d84:	429c      	cmp	r4, r3
   14d86:	f000 80ca 	beq.w	14f1e <rpc_ip_event_handler+0x2fe>
   14d8a:	f248 0305 	movw	r3, #32773	; 0x8005
   14d8e:	429c      	cmp	r4, r3
   14d90:	d1c0      	bne.n	14d14 <rpc_ip_event_handler+0xf4>
   14d92:	6833      	ldr	r3, [r6, #0]
   14d94:	b29b      	uxth	r3, r3
   14d96:	2b03      	cmp	r3, #3
   14d98:	d1b8      	bne.n	14d0c <rpc_ip_event_handler+0xec>
   14d9a:	696b      	ldr	r3, [r5, #20]
   14d9c:	2b00      	cmp	r3, #0
   14d9e:	d1da      	bne.n	14d56 <rpc_ip_event_handler+0x136>
   14da0:	6833      	ldr	r3, [r6, #0]
   14da2:	2000      	movs	r0, #0
   14da4:	0c1b      	lsrs	r3, r3, #16
   14da6:	041b      	lsls	r3, r3, #16
   14da8:	f043 0304 	orr.w	r3, r3, #4
   14dac:	6033      	str	r3, [r6, #0]
   14dae:	e79f      	b.n	14cf0 <rpc_ip_event_handler+0xd0>
   14db0:	4b85      	ldr	r3, [pc, #532]	; (14fc8 <rpc_ip_event_handler+0x3a8>)
   14db2:	601f      	str	r7, [r3, #0]
   14db4:	6984      	ldr	r4, [r0, #24]
   14db6:	0163      	lsls	r3, r4, #5
   14db8:	4618      	mov	r0, r3
   14dba:	9303      	str	r3, [sp, #12]
   14dbc:	f7fb f9cc 	bl	10158 <nrf_malloc>
   14dc0:	9002      	str	r0, [sp, #8]
   14dc2:	2800      	cmp	r0, #0
   14dc4:	f000 808a 	beq.w	14edc <rpc_ip_event_handler+0x2bc>
   14dc8:	00e5      	lsls	r5, r4, #3
   14dca:	1928      	adds	r0, r5, r4
   14dcc:	0080      	lsls	r0, r0, #2
   14dce:	f7fb f9c3 	bl	10158 <nrf_malloc>
   14dd2:	2800      	cmp	r0, #0
   14dd4:	f000 811f 	beq.w	15016 <rpc_ip_event_handler+0x3f6>
   14dd8:	2c00      	cmp	r4, #0
   14dda:	d05e      	beq.n	14e9a <rpc_ip_event_handler+0x27a>
   14ddc:	3510      	adds	r5, #16
   14dde:	1943      	adds	r3, r0, r5
   14de0:	9301      	str	r3, [sp, #4]
   14de2:	9b02      	ldr	r3, [sp, #8]
   14de4:	2404      	movs	r4, #4
   14de6:	f8df a1f0 	ldr.w	sl, [pc, #496]	; 14fd8 <rpc_ip_event_handler+0x3b8>
   14dea:	f8df b1f0 	ldr.w	fp, [pc, #496]	; 14fdc <rpc_ip_event_handler+0x3bc>
   14dee:	f100 0810 	add.w	r8, r0, #16
   14df2:	f103 0620 	add.w	r6, r3, #32
   14df6:	e01d      	b.n	14e34 <rpc_ip_event_handler+0x214>
   14df8:	220a      	movs	r2, #10
   14dfa:	f848 2c0c 	str.w	r2, [r8, #-12]
   14dfe:	f04f 0224 	mov.w	r2, #36	; 0x24
   14e02:	4640      	mov	r0, r8
   14e04:	f808 2c10 	strb.w	r2, [r8, #-16]
   14e08:	f828 3c08 	strh.w	r3, [r8, #-8]
   14e0c:	f856 2c10 	ldr.w	r2, [r6, #-16]
   14e10:	f004 fd4e 	bl	198b0 <memcpy>
   14e14:	f856 3c10 	ldr.w	r3, [r6, #-16]
   14e18:	f108 0808 	add.w	r8, r8, #8
   14e1c:	441c      	add	r4, r3
   14e1e:	193b      	adds	r3, r7, r4
   14e20:	f846 3c08 	str.w	r3, [r6, #-8]
   14e24:	9b01      	ldr	r3, [sp, #4]
   14e26:	f846 6c04 	str.w	r6, [r6, #-4]
   14e2a:	4598      	cmp	r8, r3
   14e2c:	442c      	add	r4, r5
   14e2e:	f106 0620 	add.w	r6, r6, #32
   14e32:	d02c      	beq.n	14e8e <rpc_ip_event_handler+0x26e>
   14e34:	593b      	ldr	r3, [r7, r4]
   14e36:	193a      	adds	r2, r7, r4
   14e38:	f846 3c20 	str.w	r3, [r6, #-32]
   14e3c:	6853      	ldr	r3, [r2, #4]
   14e3e:	f8da 1000 	ldr.w	r1, [sl]
   14e42:	2b02      	cmp	r3, #2
   14e44:	bf14      	ite	ne
   14e46:	2002      	movne	r0, #2
   14e48:	200a      	moveq	r0, #10
   14e4a:	f8db 3000 	ldr.w	r3, [fp]
   14e4e:	e946 0107 	strd	r0, r1, [r6, #-28]
   14e52:	f846 3c14 	str.w	r3, [r6, #-20]
   14e56:	8a10      	ldrh	r0, [r2, #16]
   14e58:	f1a8 0310 	sub.w	r3, r8, #16
   14e5c:	f846 0c10 	str.w	r0, [r6, #-16]
   14e60:	8a55      	ldrh	r5, [r2, #18]
   14e62:	f846 3c0c 	str.w	r3, [r6, #-12]
   14e66:	4b59      	ldr	r3, [pc, #356]	; (14fcc <rpc_ip_event_handler+0x3ac>)
   14e68:	3414      	adds	r4, #20
   14e6a:	2804      	cmp	r0, #4
   14e6c:	eb07 0104 	add.w	r1, r7, r4
   14e70:	881b      	ldrh	r3, [r3, #0]
   14e72:	d1c1      	bne.n	14df8 <rpc_ip_event_handler+0x1d8>
   14e74:	2210      	movs	r2, #16
   14e76:	2002      	movs	r0, #2
   14e78:	f828 3c08 	strh.w	r3, [r8, #-8]
   14e7c:	f848 0c0c 	str.w	r0, [r8, #-12]
   14e80:	f808 2c10 	strb.w	r2, [r8, #-16]
   14e84:	f856 2c10 	ldr.w	r2, [r6, #-16]
   14e88:	f1a8 0004 	sub.w	r0, r8, #4
   14e8c:	e7c0      	b.n	14e10 <rpc_ip_event_handler+0x1f0>
   14e8e:	2200      	movs	r2, #0
   14e90:	e9dd 1302 	ldrd	r1, r3, [sp, #8]
   14e94:	440b      	add	r3, r1
   14e96:	f843 2c04 	str.w	r2, [r3, #-4]
   14e9a:	2202      	movs	r2, #2
   14e9c:	4b4c      	ldr	r3, [pc, #304]	; (14fd0 <rpc_ip_event_handler+0x3b0>)
   14e9e:	f8c9 2000 	str.w	r2, [r9]
   14ea2:	9a02      	ldr	r2, [sp, #8]
   14ea4:	2000      	movs	r0, #0
   14ea6:	601a      	str	r2, [r3, #0]
   14ea8:	e722      	b.n	14cf0 <rpc_ip_event_handler+0xd0>
   14eaa:	f248 0308 	movw	r3, #32776	; 0x8008
   14eae:	429c      	cmp	r4, r3
   14eb0:	d045      	beq.n	14f3e <rpc_ip_event_handler+0x31e>
   14eb2:	f248 0309 	movw	r3, #32777	; 0x8009
   14eb6:	429c      	cmp	r4, r3
   14eb8:	f47f af2c 	bne.w	14d14 <rpc_ip_event_handler+0xf4>
   14ebc:	6833      	ldr	r3, [r6, #0]
   14ebe:	b29b      	uxth	r3, r3
   14ec0:	2b0d      	cmp	r3, #13
   14ec2:	f47f af23 	bne.w	14d0c <rpc_ip_event_handler+0xec>
   14ec6:	6968      	ldr	r0, [r5, #20]
   14ec8:	2800      	cmp	r0, #0
   14eca:	f000 80d9 	beq.w	15080 <rpc_ip_event_handler+0x460>
   14ece:	2810      	cmp	r0, #16
   14ed0:	f200 80a5 	bhi.w	1501e <rpc_ip_event_handler+0x3fe>
   14ed4:	4b39      	ldr	r3, [pc, #228]	; (14fbc <rpc_ip_event_handler+0x39c>)
   14ed6:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
   14eda:	e742      	b.n	14d62 <rpc_ip_event_handler+0x142>
   14edc:	f7fb f946 	bl	1016c <nrf_free>
   14ee0:	200c      	movs	r0, #12
   14ee2:	2302      	movs	r3, #2
   14ee4:	4937      	ldr	r1, [pc, #220]	; (14fc4 <rpc_ip_event_handler+0x3a4>)
   14ee6:	4a3a      	ldr	r2, [pc, #232]	; (14fd0 <rpc_ip_event_handler+0x3b0>)
   14ee8:	6008      	str	r0, [r1, #0]
   14eea:	682f      	ldr	r7, [r5, #0]
   14eec:	9902      	ldr	r1, [sp, #8]
   14eee:	f8c9 3000 	str.w	r3, [r9]
   14ef2:	6011      	str	r1, [r2, #0]
   14ef4:	2f00      	cmp	r7, #0
   14ef6:	f47f af06 	bne.w	14d06 <rpc_ip_event_handler+0xe6>
   14efa:	e707      	b.n	14d0c <rpc_ip_event_handler+0xec>
   14efc:	f248 0301 	movw	r3, #32769	; 0x8001
   14f00:	429c      	cmp	r4, r3
   14f02:	f47f af07 	bne.w	14d14 <rpc_ip_event_handler+0xf4>
   14f06:	6833      	ldr	r3, [r6, #0]
   14f08:	2b01      	cmp	r3, #1
   14f0a:	f47f aeff 	bne.w	14d0c <rpc_ip_event_handler+0xec>
   14f0e:	6968      	ldr	r0, [r5, #20]
   14f10:	2800      	cmp	r0, #0
   14f12:	d1dc      	bne.n	14ece <rpc_ip_event_handler+0x2ae>
   14f14:	2302      	movs	r3, #2
   14f16:	6033      	str	r3, [r6, #0]
   14f18:	69ab      	ldr	r3, [r5, #24]
   14f1a:	61b3      	str	r3, [r6, #24]
   14f1c:	e6e8      	b.n	14cf0 <rpc_ip_event_handler+0xd0>
   14f1e:	6833      	ldr	r3, [r6, #0]
   14f20:	025b      	lsls	r3, r3, #9
   14f22:	f57f aef3 	bpl.w	14d0c <rpc_ip_event_handler+0xec>
   14f26:	6968      	ldr	r0, [r5, #20]
   14f28:	2800      	cmp	r0, #0
   14f2a:	f000 80a0 	beq.w	1506e <rpc_ip_event_handler+0x44e>
   14f2e:	2810      	cmp	r0, #16
   14f30:	bf8e      	itee	hi
   14f32:	232d      	movhi	r3, #45	; 0x2d
   14f34:	4b21      	ldrls	r3, [pc, #132]	; (14fbc <rpc_ip_event_handler+0x39c>)
   14f36:	f853 3020 	ldrls.w	r3, [r3, r0, lsl #2]
   14f3a:	6073      	str	r3, [r6, #4]
   14f3c:	e6e6      	b.n	14d0c <rpc_ip_event_handler+0xec>
   14f3e:	6833      	ldr	r3, [r6, #0]
   14f40:	b29b      	uxth	r3, r3
   14f42:	2b06      	cmp	r3, #6
   14f44:	f47f aee2 	bne.w	14d0c <rpc_ip_event_handler+0xec>
   14f48:	6968      	ldr	r0, [r5, #20]
   14f4a:	2800      	cmp	r0, #0
   14f4c:	d1bf      	bne.n	14ece <rpc_ip_event_handler+0x2ae>
   14f4e:	6833      	ldr	r3, [r6, #0]
   14f50:	0c1b      	lsrs	r3, r3, #16
   14f52:	041b      	lsls	r3, r3, #16
   14f54:	f043 0307 	orr.w	r3, r3, #7
   14f58:	6033      	str	r3, [r6, #0]
   14f5a:	e6c9      	b.n	14cf0 <rpc_ip_event_handler+0xd0>
   14f5c:	6833      	ldr	r3, [r6, #0]
   14f5e:	0099      	lsls	r1, r3, #2
   14f60:	f57f aed4 	bpl.w	14d0c <rpc_ip_event_handler+0xec>
   14f64:	6833      	ldr	r3, [r6, #0]
   14f66:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
   14f6a:	6033      	str	r3, [r6, #0]
   14f6c:	6968      	ldr	r0, [r5, #20]
   14f6e:	2800      	cmp	r0, #0
   14f70:	d06e      	beq.n	15050 <rpc_ip_event_handler+0x430>
   14f72:	2810      	cmp	r0, #16
   14f74:	f200 8080 	bhi.w	15078 <rpc_ip_event_handler+0x458>
   14f78:	4b10      	ldr	r3, [pc, #64]	; (14fbc <rpc_ip_event_handler+0x39c>)
   14f7a:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
   14f7e:	6073      	str	r3, [r6, #4]
   14f80:	6833      	ldr	r3, [r6, #0]
   14f82:	2000      	movs	r0, #0
   14f84:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
   14f88:	6033      	str	r3, [r6, #0]
   14f8a:	e6b1      	b.n	14cf0 <rpc_ip_event_handler+0xd0>
   14f8c:	6833      	ldr	r3, [r6, #0]
   14f8e:	029a      	lsls	r2, r3, #10
   14f90:	f57f aebc 	bpl.w	14d0c <rpc_ip_event_handler+0xec>
   14f94:	696b      	ldr	r3, [r5, #20]
   14f96:	2b00      	cmp	r3, #0
   14f98:	d051      	beq.n	1503e <rpc_ip_event_handler+0x41e>
   14f9a:	2b6b      	cmp	r3, #107	; 0x6b
   14f9c:	f000 8086 	beq.w	150ac <rpc_ip_event_handler+0x48c>
   14fa0:	2b10      	cmp	r3, #16
   14fa2:	d869      	bhi.n	15078 <rpc_ip_event_handler+0x458>
   14fa4:	4a05      	ldr	r2, [pc, #20]	; (14fbc <rpc_ip_event_handler+0x39c>)
   14fa6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14faa:	e7e8      	b.n	14f7e <rpc_ip_event_handler+0x35e>
   14fac:	6833      	ldr	r3, [r6, #0]
   14fae:	b29b      	uxth	r3, r3
   14fb0:	2b07      	cmp	r3, #7
   14fb2:	f47f aeab 	bne.w	14d0c <rpc_ip_event_handler+0xec>
   14fb6:	e686      	b.n	14cc6 <rpc_ip_event_handler+0xa6>
   14fb8:	200249d2 	.word	0x200249d2
   14fbc:	0001ab14 	.word	0x0001ab14
   14fc0:	200205dc 	.word	0x200205dc
   14fc4:	200205a8 	.word	0x200205a8
   14fc8:	200205b4 	.word	0x200205b4
   14fcc:	200249c6 	.word	0x200249c6
   14fd0:	200205b0 	.word	0x200205b0
   14fd4:	200205ac 	.word	0x200205ac
   14fd8:	200205a4 	.word	0x200205a4
   14fdc:	200205a0 	.word	0x200205a0
   14fe0:	6833      	ldr	r3, [r6, #0]
   14fe2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
   14fe6:	6033      	str	r3, [r6, #0]
   14fe8:	6833      	ldr	r3, [r6, #0]
   14fea:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
   14fee:	6033      	str	r3, [r6, #0]
   14ff0:	6833      	ldr	r3, [r6, #0]
   14ff2:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
   14ff6:	6033      	str	r3, [r6, #0]
   14ff8:	692b      	ldr	r3, [r5, #16]
   14ffa:	2b6c      	cmp	r3, #108	; 0x6c
   14ffc:	d016      	beq.n	1502c <rpc_ip_event_handler+0x40c>
   14ffe:	2b10      	cmp	r3, #16
   15000:	bf8c      	ite	hi
   15002:	232d      	movhi	r3, #45	; 0x2d
   15004:	4a46      	ldrls	r2, [pc, #280]	; (15120 <rpc_ip_event_handler+0x500>)
   15006:	f04f 0000 	mov.w	r0, #0
   1500a:	bf98      	it	ls
   1500c:	f852 3023 	ldrls.w	r3, [r2, r3, lsl #2]
   15010:	6073      	str	r3, [r6, #4]
   15012:	60b3      	str	r3, [r6, #8]
   15014:	e66c      	b.n	14cf0 <rpc_ip_event_handler+0xd0>
   15016:	220c      	movs	r2, #12
   15018:	4b42      	ldr	r3, [pc, #264]	; (15124 <rpc_ip_event_handler+0x504>)
   1501a:	601a      	str	r2, [r3, #0]
   1501c:	e73d      	b.n	14e9a <rpc_ip_event_handler+0x27a>
   1501e:	232d      	movs	r3, #45	; 0x2d
   15020:	e69f      	b.n	14d62 <rpc_ip_event_handler+0x142>
   15022:	6828      	ldr	r0, [r5, #0]
   15024:	f7fb f902 	bl	1022c <rpc_ip_client_data_free>
   15028:	4620      	mov	r0, r4
   1502a:	e661      	b.n	14cf0 <rpc_ip_event_handler+0xd0>
   1502c:	2239      	movs	r2, #57	; 0x39
   1502e:	6833      	ldr	r3, [r6, #0]
   15030:	2000      	movs	r0, #0
   15032:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
   15036:	6033      	str	r3, [r6, #0]
   15038:	6072      	str	r2, [r6, #4]
   1503a:	60b2      	str	r2, [r6, #8]
   1503c:	e658      	b.n	14cf0 <rpc_ip_event_handler+0xd0>
   1503e:	6833      	ldr	r3, [r6, #0]
   15040:	4a39      	ldr	r2, [pc, #228]	; (15128 <rpc_ip_event_handler+0x508>)
   15042:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   15046:	6033      	str	r3, [r6, #0]
   15048:	2001      	movs	r0, #1
   1504a:	f842 5027 	str.w	r5, [r2, r7, lsl #2]
   1504e:	e64f      	b.n	14cf0 <rpc_ip_event_handler+0xd0>
   15050:	6833      	ldr	r3, [r6, #0]
   15052:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   15056:	6033      	str	r3, [r6, #0]
   15058:	6833      	ldr	r3, [r6, #0]
   1505a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   1505e:	6033      	str	r3, [r6, #0]
   15060:	6833      	ldr	r3, [r6, #0]
   15062:	0c1b      	lsrs	r3, r3, #16
   15064:	041b      	lsls	r3, r3, #16
   15066:	f043 0305 	orr.w	r3, r3, #5
   1506a:	6033      	str	r3, [r6, #0]
   1506c:	e640      	b.n	14cf0 <rpc_ip_event_handler+0xd0>
   1506e:	6833      	ldr	r3, [r6, #0]
   15070:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
   15074:	6033      	str	r3, [r6, #0]
   15076:	e63b      	b.n	14cf0 <rpc_ip_event_handler+0xd0>
   15078:	232d      	movs	r3, #45	; 0x2d
   1507a:	e780      	b.n	14f7e <rpc_ip_event_handler+0x35e>
   1507c:	2002      	movs	r0, #2
   1507e:	e637      	b.n	14cf0 <rpc_ip_event_handler+0xd0>
   15080:	6833      	ldr	r3, [r6, #0]
   15082:	0c1b      	lsrs	r3, r3, #16
   15084:	041b      	lsls	r3, r3, #16
   15086:	f043 030e 	orr.w	r3, r3, #14
   1508a:	6033      	str	r3, [r6, #0]
   1508c:	e630      	b.n	14cf0 <rpc_ip_event_handler+0xd0>
   1508e:	4b26      	ldr	r3, [pc, #152]	; (15128 <rpc_ip_event_handler+0x508>)
   15090:	2001      	movs	r0, #1
   15092:	f843 5027 	str.w	r5, [r3, r7, lsl #2]
   15096:	6833      	ldr	r3, [r6, #0]
   15098:	0c1b      	lsrs	r3, r3, #16
   1509a:	041b      	lsls	r3, r3, #16
   1509c:	f043 0309 	orr.w	r3, r3, #9
   150a0:	6033      	str	r3, [r6, #0]
   150a2:	e625      	b.n	14cf0 <rpc_ip_event_handler+0xd0>
   150a4:	8a6c      	ldrh	r4, [r5, #18]
   150a6:	b934      	cbnz	r4, 150b6 <rpc_ip_event_handler+0x496>
   150a8:	4627      	mov	r7, r4
   150aa:	e5fe      	b.n	14caa <rpc_ip_event_handler+0x8a>
   150ac:	6933      	ldr	r3, [r6, #16]
   150ae:	2b01      	cmp	r3, #1
   150b0:	d012      	beq.n	150d8 <rpc_ip_event_handler+0x4b8>
   150b2:	230c      	movs	r3, #12
   150b4:	e763      	b.n	14f7e <rpc_ip_event_handler+0x35e>
   150b6:	2024      	movs	r0, #36	; 0x24
   150b8:	f7fb f84e 	bl	10158 <nrf_malloc>
   150bc:	4607      	mov	r7, r0
   150be:	b358      	cbz	r0, 15118 <rpc_ip_event_handler+0x4f8>
   150c0:	8a6a      	ldrh	r2, [r5, #18]
   150c2:	2a10      	cmp	r2, #16
   150c4:	d01c      	beq.n	15100 <rpc_ip_event_handler+0x4e0>
   150c6:	2a04      	cmp	r2, #4
   150c8:	d00e      	beq.n	150e8 <rpc_ip_event_handler+0x4c8>
   150ca:	6828      	ldr	r0, [r5, #0]
   150cc:	f7fb f8ae 	bl	1022c <rpc_ip_client_data_free>
   150d0:	4638      	mov	r0, r7
   150d2:	f7fb f84b 	bl	1016c <nrf_free>
   150d6:	e619      	b.n	14d0c <rpc_ip_event_handler+0xec>
   150d8:	220c      	movs	r2, #12
   150da:	6833      	ldr	r3, [r6, #0]
   150dc:	2000      	movs	r0, #0
   150de:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
   150e2:	6033      	str	r3, [r6, #0]
   150e4:	6072      	str	r2, [r6, #4]
   150e6:	e603      	b.n	14cf0 <rpc_ip_event_handler+0xd0>
   150e8:	2302      	movs	r3, #2
   150ea:	2410      	movs	r4, #16
   150ec:	6043      	str	r3, [r0, #4]
   150ee:	7004      	strb	r4, [r0, #0]
   150f0:	8a2b      	ldrh	r3, [r5, #16]
   150f2:	f105 0114 	add.w	r1, r5, #20
   150f6:	8103      	strh	r3, [r0, #8]
   150f8:	300c      	adds	r0, #12
   150fa:	f004 fbd9 	bl	198b0 <memcpy>
   150fe:	e5d4      	b.n	14caa <rpc_ip_event_handler+0x8a>
   15100:	230a      	movs	r3, #10
   15102:	2424      	movs	r4, #36	; 0x24
   15104:	6043      	str	r3, [r0, #4]
   15106:	7004      	strb	r4, [r0, #0]
   15108:	8a2b      	ldrh	r3, [r5, #16]
   1510a:	f105 0114 	add.w	r1, r5, #20
   1510e:	8103      	strh	r3, [r0, #8]
   15110:	3010      	adds	r0, #16
   15112:	f004 fbcd 	bl	198b0 <memcpy>
   15116:	e5c8      	b.n	14caa <rpc_ip_event_handler+0x8a>
   15118:	6828      	ldr	r0, [r5, #0]
   1511a:	f7fb f887 	bl	1022c <rpc_ip_client_data_free>
   1511e:	e5f5      	b.n	14d0c <rpc_ip_event_handler+0xec>
   15120:	0001ab14 	.word	0x0001ab14
   15124:	200205a8 	.word	0x200205a8
   15128:	200205b8 	.word	0x200205b8

0001512c <interface_init>:
   1512c:	b508      	push	{r3, lr}
   1512e:	f44f 72a2 	mov.w	r2, #324	; 0x144
   15132:	2100      	movs	r1, #0
   15134:	4802      	ldr	r0, [pc, #8]	; (15140 <interface_init+0x14>)
   15136:	f004 fbe5 	bl	19904 <memset>
   1513a:	2000      	movs	r0, #0
   1513c:	bd08      	pop	{r3, pc}
   1513e:	bf00      	nop
   15140:	200249d4 	.word	0x200249d4

00015144 <interface_socket_allocate>:
   15144:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   15146:	4b30      	ldr	r3, [pc, #192]	; (15208 <interface_socket_allocate+0xc4>)
   15148:	4606      	mov	r6, r0
   1514a:	681d      	ldr	r5, [r3, #0]
   1514c:	4608      	mov	r0, r1
   1514e:	b31d      	cbz	r5, 15198 <interface_socket_allocate+0x54>
   15150:	6a5c      	ldr	r4, [r3, #36]	; 0x24
   15152:	2c00      	cmp	r4, #0
   15154:	d04a      	beq.n	151ec <interface_socket_allocate+0xa8>
   15156:	6c9c      	ldr	r4, [r3, #72]	; 0x48
   15158:	2c00      	cmp	r4, #0
   1515a:	d049      	beq.n	151f0 <interface_socket_allocate+0xac>
   1515c:	6edc      	ldr	r4, [r3, #108]	; 0x6c
   1515e:	2c00      	cmp	r4, #0
   15160:	d048      	beq.n	151f4 <interface_socket_allocate+0xb0>
   15162:	f8d3 1090 	ldr.w	r1, [r3, #144]	; 0x90
   15166:	2900      	cmp	r1, #0
   15168:	d046      	beq.n	151f8 <interface_socket_allocate+0xb4>
   1516a:	f8d3 10b4 	ldr.w	r1, [r3, #180]	; 0xb4
   1516e:	b191      	cbz	r1, 15196 <interface_socket_allocate+0x52>
   15170:	f8d3 10d8 	ldr.w	r1, [r3, #216]	; 0xd8
   15174:	2900      	cmp	r1, #0
   15176:	d043      	beq.n	15200 <interface_socket_allocate+0xbc>
   15178:	f8d3 10fc 	ldr.w	r1, [r3, #252]	; 0xfc
   1517c:	2900      	cmp	r1, #0
   1517e:	d041      	beq.n	15204 <interface_socket_allocate+0xc0>
   15180:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
   15184:	2900      	cmp	r1, #0
   15186:	d039      	beq.n	151fc <interface_socket_allocate+0xb8>
   15188:	f04f 35ff 	mov.w	r5, #4294967295
   1518c:	2069      	movs	r0, #105	; 0x69
   1518e:	f7f9 fcaf 	bl	eaf0 <bsd_os_errno_set>
   15192:	4628      	mov	r0, r5
   15194:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   15196:	2505      	movs	r5, #5
   15198:	f04f 0c01 	mov.w	ip, #1
   1519c:	f04f 37ff 	mov.w	r7, #4294967295
   151a0:	eb05 04c5 	add.w	r4, r5, r5, lsl #3
   151a4:	00a4      	lsls	r4, r4, #2
   151a6:	f843 c004 	str.w	ip, [r3, r4]
   151aa:	441c      	add	r4, r3
   151ac:	4611      	mov	r1, r2
   151ae:	61a7      	str	r7, [r4, #24]
   151b0:	4622      	mov	r2, r4
   151b2:	f001 ffd1 	bl	17158 <packet_handler_create>
   151b6:	4603      	mov	r3, r0
   151b8:	61e0      	str	r0, [r4, #28]
   151ba:	b158      	cbz	r0, 151d4 <interface_socket_allocate+0x90>
   151bc:	681b      	ldr	r3, [r3, #0]
   151be:	681b      	ldr	r3, [r3, #0]
   151c0:	4798      	blx	r3
   151c2:	b910      	cbnz	r0, 151ca <interface_socket_allocate+0x86>
   151c4:	6034      	str	r4, [r6, #0]
   151c6:	4628      	mov	r0, r5
   151c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   151ca:	69e0      	ldr	r0, [r4, #28]
   151cc:	f001 ffe4 	bl	17198 <packet_handler_delete>
   151d0:	2300      	movs	r3, #0
   151d2:	61e3      	str	r3, [r4, #28]
   151d4:	f04f 35ff 	mov.w	r5, #4294967295
   151d8:	2224      	movs	r2, #36	; 0x24
   151da:	2100      	movs	r1, #0
   151dc:	4620      	mov	r0, r4
   151de:	f004 fb91 	bl	19904 <memset>
   151e2:	200c      	movs	r0, #12
   151e4:	f7f9 fc84 	bl	eaf0 <bsd_os_errno_set>
   151e8:	4628      	mov	r0, r5
   151ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   151ec:	2501      	movs	r5, #1
   151ee:	e7d3      	b.n	15198 <interface_socket_allocate+0x54>
   151f0:	2502      	movs	r5, #2
   151f2:	e7d1      	b.n	15198 <interface_socket_allocate+0x54>
   151f4:	2503      	movs	r5, #3
   151f6:	e7cf      	b.n	15198 <interface_socket_allocate+0x54>
   151f8:	2504      	movs	r5, #4
   151fa:	e7cd      	b.n	15198 <interface_socket_allocate+0x54>
   151fc:	2508      	movs	r5, #8
   151fe:	e7cb      	b.n	15198 <interface_socket_allocate+0x54>
   15200:	2506      	movs	r5, #6
   15202:	e7c9      	b.n	15198 <interface_socket_allocate+0x54>
   15204:	2507      	movs	r5, #7
   15206:	e7c7      	b.n	15198 <interface_socket_allocate+0x54>
   15208:	200249d4 	.word	0x200249d4

0001520c <interface_socket_free>:
   1520c:	2808      	cmp	r0, #8
   1520e:	d900      	bls.n	15212 <interface_socket_free+0x6>
   15210:	4770      	bx	lr
   15212:	b510      	push	{r4, lr}
   15214:	4c07      	ldr	r4, [pc, #28]	; (15234 <interface_socket_free+0x28>)
   15216:	eb00 00c0 	add.w	r0, r0, r0, lsl #3
   1521a:	eb04 0480 	add.w	r4, r4, r0, lsl #2
   1521e:	69e0      	ldr	r0, [r4, #28]
   15220:	b108      	cbz	r0, 15226 <interface_socket_free+0x1a>
   15222:	f001 ffb9 	bl	17198 <packet_handler_delete>
   15226:	4620      	mov	r0, r4
   15228:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1522c:	2224      	movs	r2, #36	; 0x24
   1522e:	2100      	movs	r1, #0
   15230:	f004 bb68 	b.w	19904 <memset>
   15234:	200249d4 	.word	0x200249d4

00015238 <interface_socket_packet_handler_update>:
   15238:	2808      	cmp	r0, #8
   1523a:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1523e:	d81e      	bhi.n	1527e <interface_socket_packet_handler_update+0x46>
   15240:	ea4f 08c0 	mov.w	r8, r0, lsl #3
   15244:	4e17      	ldr	r6, [pc, #92]	; (152a4 <interface_socket_packet_handler_update+0x6c>)
   15246:	eb08 0300 	add.w	r3, r8, r0
   1524a:	009b      	lsls	r3, r3, #2
   1524c:	58f4      	ldr	r4, [r6, r3]
   1524e:	18f5      	adds	r5, r6, r3
   15250:	b1ac      	cbz	r4, 1527e <interface_socket_packet_handler_update+0x46>
   15252:	460b      	mov	r3, r1
   15254:	4604      	mov	r4, r0
   15256:	4611      	mov	r1, r2
   15258:	4618      	mov	r0, r3
   1525a:	462a      	mov	r2, r5
   1525c:	f8d5 901c 	ldr.w	r9, [r5, #28]
   15260:	f001 ff7a 	bl	17158 <packet_handler_create>
   15264:	61e8      	str	r0, [r5, #28]
   15266:	b1d0      	cbz	r0, 1529e <interface_socket_packet_handler_update+0x66>
   15268:	6803      	ldr	r3, [r0, #0]
   1526a:	681b      	ldr	r3, [r3, #0]
   1526c:	4798      	blx	r3
   1526e:	4607      	mov	r7, r0
   15270:	b948      	cbnz	r0, 15286 <interface_socket_packet_handler_update+0x4e>
   15272:	4648      	mov	r0, r9
   15274:	f001 ff90 	bl	17198 <packet_handler_delete>
   15278:	4638      	mov	r0, r7
   1527a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   1527e:	2705      	movs	r7, #5
   15280:	4638      	mov	r0, r7
   15282:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   15286:	69e8      	ldr	r0, [r5, #28]
   15288:	f001 ff86 	bl	17198 <packet_handler_delete>
   1528c:	eb08 0004 	add.w	r0, r8, r4
   15290:	eb06 0680 	add.w	r6, r6, r0, lsl #2
   15294:	f8c6 901c 	str.w	r9, [r6, #28]
   15298:	4638      	mov	r0, r7
   1529a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   1529e:	2704      	movs	r7, #4
   152a0:	e7f4      	b.n	1528c <interface_socket_packet_handler_update+0x54>
   152a2:	bf00      	nop
   152a4:	200249d4 	.word	0x200249d4

000152a8 <interface_socket_wait>:
   152a8:	b5f0      	push	{r4, r5, r6, r7, lr}
   152aa:	eb00 00c0 	add.w	r0, r0, r0, lsl #3
   152ae:	4c0e      	ldr	r4, [pc, #56]	; (152e8 <interface_socket_wait+0x40>)
   152b0:	0080      	lsls	r0, r0, #2
   152b2:	5825      	ldr	r5, [r4, r0]
   152b4:	b083      	sub	sp, #12
   152b6:	4015      	ands	r5, r2
   152b8:	428d      	cmp	r5, r1
   152ba:	9301      	str	r3, [sp, #4]
   152bc:	4404      	add	r4, r0
   152be:	d010      	beq.n	152e2 <interface_socket_wait+0x3a>
   152c0:	6863      	ldr	r3, [r4, #4]
   152c2:	b973      	cbnz	r3, 152e2 <interface_socket_wait+0x3a>
   152c4:	460f      	mov	r7, r1
   152c6:	4616      	mov	r6, r2
   152c8:	4625      	mov	r5, r4
   152ca:	e006      	b.n	152da <interface_socket_wait+0x32>
   152cc:	686b      	ldr	r3, [r5, #4]
   152ce:	b943      	cbnz	r3, 152e2 <interface_socket_wait+0x3a>
   152d0:	a901      	add	r1, sp, #4
   152d2:	4620      	mov	r0, r4
   152d4:	f7f9 fb78 	bl	e9c8 <bsd_os_timedwait>
   152d8:	b920      	cbnz	r0, 152e4 <interface_socket_wait+0x3c>
   152da:	682b      	ldr	r3, [r5, #0]
   152dc:	4033      	ands	r3, r6
   152de:	42bb      	cmp	r3, r7
   152e0:	d1f4      	bne.n	152cc <interface_socket_wait+0x24>
   152e2:	2000      	movs	r0, #0
   152e4:	b003      	add	sp, #12
   152e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
   152e8:	200249d4 	.word	0x200249d4

000152ec <interface_from_internal_id_search>:
   152ec:	4b27      	ldr	r3, [pc, #156]	; (1538c <interface_from_internal_id_search+0xa0>)
   152ee:	681a      	ldr	r2, [r3, #0]
   152f0:	b112      	cbz	r2, 152f8 <interface_from_internal_id_search+0xc>
   152f2:	699a      	ldr	r2, [r3, #24]
   152f4:	4282      	cmp	r2, r0
   152f6:	d039      	beq.n	1536c <interface_from_internal_id_search+0x80>
   152f8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
   152fa:	b112      	cbz	r2, 15302 <interface_from_internal_id_search+0x16>
   152fc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
   152fe:	4282      	cmp	r2, r0
   15300:	d036      	beq.n	15370 <interface_from_internal_id_search+0x84>
   15302:	6c9a      	ldr	r2, [r3, #72]	; 0x48
   15304:	b112      	cbz	r2, 1530c <interface_from_internal_id_search+0x20>
   15306:	6e1a      	ldr	r2, [r3, #96]	; 0x60
   15308:	4282      	cmp	r2, r0
   1530a:	d033      	beq.n	15374 <interface_from_internal_id_search+0x88>
   1530c:	6eda      	ldr	r2, [r3, #108]	; 0x6c
   1530e:	b11a      	cbz	r2, 15318 <interface_from_internal_id_search+0x2c>
   15310:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
   15314:	4282      	cmp	r2, r0
   15316:	d02f      	beq.n	15378 <interface_from_internal_id_search+0x8c>
   15318:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
   1531c:	b11a      	cbz	r2, 15326 <interface_from_internal_id_search+0x3a>
   1531e:	f8d3 20a8 	ldr.w	r2, [r3, #168]	; 0xa8
   15322:	4282      	cmp	r2, r0
   15324:	d02a      	beq.n	1537c <interface_from_internal_id_search+0x90>
   15326:	f8d3 20b4 	ldr.w	r2, [r3, #180]	; 0xb4
   1532a:	b11a      	cbz	r2, 15334 <interface_from_internal_id_search+0x48>
   1532c:	f8d3 20cc 	ldr.w	r2, [r3, #204]	; 0xcc
   15330:	4282      	cmp	r2, r0
   15332:	d025      	beq.n	15380 <interface_from_internal_id_search+0x94>
   15334:	f8d3 20d8 	ldr.w	r2, [r3, #216]	; 0xd8
   15338:	b11a      	cbz	r2, 15342 <interface_from_internal_id_search+0x56>
   1533a:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
   1533e:	4282      	cmp	r2, r0
   15340:	d020      	beq.n	15384 <interface_from_internal_id_search+0x98>
   15342:	f8d3 20fc 	ldr.w	r2, [r3, #252]	; 0xfc
   15346:	b11a      	cbz	r2, 15350 <interface_from_internal_id_search+0x64>
   15348:	f8d3 2114 	ldr.w	r2, [r3, #276]	; 0x114
   1534c:	4282      	cmp	r2, r0
   1534e:	d01b      	beq.n	15388 <interface_from_internal_id_search+0x9c>
   15350:	f8d3 2120 	ldr.w	r2, [r3, #288]	; 0x120
   15354:	b13a      	cbz	r2, 15366 <interface_from_internal_id_search+0x7a>
   15356:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
   1535a:	4283      	cmp	r3, r0
   1535c:	bf14      	ite	ne
   1535e:	f04f 30ff 	movne.w	r0, #4294967295
   15362:	2008      	moveq	r0, #8
   15364:	4770      	bx	lr
   15366:	f04f 30ff 	mov.w	r0, #4294967295
   1536a:	4770      	bx	lr
   1536c:	2000      	movs	r0, #0
   1536e:	4770      	bx	lr
   15370:	2001      	movs	r0, #1
   15372:	4770      	bx	lr
   15374:	2002      	movs	r0, #2
   15376:	4770      	bx	lr
   15378:	2003      	movs	r0, #3
   1537a:	4770      	bx	lr
   1537c:	2004      	movs	r0, #4
   1537e:	4770      	bx	lr
   15380:	2005      	movs	r0, #5
   15382:	4770      	bx	lr
   15384:	2006      	movs	r0, #6
   15386:	4770      	bx	lr
   15388:	2007      	movs	r0, #7
   1538a:	4770      	bx	lr
   1538c:	200249d4 	.word	0x200249d4

00015390 <interface_socket_from_handle_get>:
   15390:	2808      	cmp	r0, #8
   15392:	d807      	bhi.n	153a4 <interface_socket_from_handle_get+0x14>
   15394:	eb00 00c0 	add.w	r0, r0, r0, lsl #3
   15398:	4b03      	ldr	r3, [pc, #12]	; (153a8 <interface_socket_from_handle_get+0x18>)
   1539a:	0080      	lsls	r0, r0, #2
   1539c:	581a      	ldr	r2, [r3, r0]
   1539e:	b10a      	cbz	r2, 153a4 <interface_socket_from_handle_get+0x14>
   153a0:	4418      	add	r0, r3
   153a2:	4770      	bx	lr
   153a4:	2000      	movs	r0, #0
   153a6:	4770      	bx	lr
   153a8:	200249d4 	.word	0x200249d4

000153ac <interface_socket_event_get>:
   153ac:	b119      	cbz	r1, 153b6 <interface_socket_event_get+0xa>
   153ae:	2808      	cmp	r0, #8
   153b0:	d902      	bls.n	153b8 <interface_socket_event_get+0xc>
   153b2:	2310      	movs	r3, #16
   153b4:	600b      	str	r3, [r1, #0]
   153b6:	4770      	bx	lr
   153b8:	eb00 00c0 	add.w	r0, r0, r0, lsl #3
   153bc:	4b07      	ldr	r3, [pc, #28]	; (153dc <interface_socket_event_get+0x30>)
   153be:	0080      	lsls	r0, r0, #2
   153c0:	581a      	ldr	r2, [r3, r0]
   153c2:	2a00      	cmp	r2, #0
   153c4:	d0f5      	beq.n	153b2 <interface_socket_event_get+0x6>
   153c6:	581b      	ldr	r3, [r3, r0]
   153c8:	0c1b      	lsrs	r3, r3, #16
   153ca:	f003 020a 	and.w	r2, r3, #10
   153ce:	2a0a      	cmp	r2, #10
   153d0:	bf14      	ite	ne
   153d2:	f003 030f 	andne.w	r3, r3, #15
   153d6:	f003 030d 	andeq.w	r3, r3, #13
   153da:	e7eb      	b.n	153b4 <interface_socket_event_get+0x8>
   153dc:	200249d4 	.word	0x200249d4

000153e0 <interface_socket_setopt>:
   153e0:	2808      	cmp	r0, #8
   153e2:	b538      	push	{r3, r4, r5, lr}
   153e4:	d82d      	bhi.n	15442 <interface_socket_setopt+0x62>
   153e6:	eb00 00c0 	add.w	r0, r0, r0, lsl #3
   153ea:	4c1c      	ldr	r4, [pc, #112]	; (1545c <interface_socket_setopt+0x7c>)
   153ec:	0080      	lsls	r0, r0, #2
   153ee:	461d      	mov	r5, r3
   153f0:	5823      	ldr	r3, [r4, r0]
   153f2:	b333      	cbz	r3, 15442 <interface_socket_setopt+0x62>
   153f4:	2901      	cmp	r1, #1
   153f6:	d11e      	bne.n	15436 <interface_socket_setopt+0x56>
   153f8:	2a14      	cmp	r2, #20
   153fa:	d11c      	bne.n	15436 <interface_socket_setopt+0x56>
   153fc:	b1ad      	cbz	r5, 1542a <interface_socket_setopt+0x4a>
   153fe:	9b04      	ldr	r3, [sp, #16]
   15400:	2b08      	cmp	r3, #8
   15402:	d112      	bne.n	1542a <interface_socket_setopt+0x4a>
   15404:	686a      	ldr	r2, [r5, #4]
   15406:	4b16      	ldr	r3, [pc, #88]	; (15460 <interface_socket_setopt+0x80>)
   15408:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   1540c:	fba3 3202 	umull	r3, r2, r3, r2
   15410:	2300      	movs	r3, #0
   15412:	682d      	ldr	r5, [r5, #0]
   15414:	0992      	lsrs	r2, r2, #6
   15416:	fbe1 2305 	umlal	r2, r3, r1, r5
   1541a:	2b01      	cmp	r3, #1
   1541c:	bf08      	it	eq
   1541e:	2a00      	cmpeq	r2, #0
   15420:	d215      	bcs.n	1544e <interface_socket_setopt+0x6e>
   15422:	4420      	add	r0, r4
   15424:	6202      	str	r2, [r0, #32]
   15426:	2000      	movs	r0, #0
   15428:	bd38      	pop	{r3, r4, r5, pc}
   1542a:	2016      	movs	r0, #22
   1542c:	f7f9 fb60 	bl	eaf0 <bsd_os_errno_set>
   15430:	f04f 30ff 	mov.w	r0, #4294967295
   15434:	bd38      	pop	{r3, r4, r5, pc}
   15436:	202a      	movs	r0, #42	; 0x2a
   15438:	f7f9 fb5a 	bl	eaf0 <bsd_os_errno_set>
   1543c:	f04f 30ff 	mov.w	r0, #4294967295
   15440:	bd38      	pop	{r3, r4, r5, pc}
   15442:	2009      	movs	r0, #9
   15444:	f7f9 fb54 	bl	eaf0 <bsd_os_errno_set>
   15448:	f04f 30ff 	mov.w	r0, #4294967295
   1544c:	bd38      	pop	{r3, r4, r5, pc}
   1544e:	2025      	movs	r0, #37	; 0x25
   15450:	f7f9 fb4e 	bl	eaf0 <bsd_os_errno_set>
   15454:	f04f 30ff 	mov.w	r0, #4294967295
   15458:	bd38      	pop	{r3, r4, r5, pc}
   1545a:	bf00      	nop
   1545c:	200249d4 	.word	0x200249d4
   15460:	10624dd3 	.word	0x10624dd3

00015464 <interface_socket_getopt>:
   15464:	b570      	push	{r4, r5, r6, lr}
   15466:	2808      	cmp	r0, #8
   15468:	9d04      	ldr	r5, [sp, #16]
   1546a:	d821      	bhi.n	154b0 <interface_socket_getopt+0x4c>
   1546c:	4c13      	ldr	r4, [pc, #76]	; (154bc <interface_socket_getopt+0x58>)
   1546e:	eb00 00c0 	add.w	r0, r0, r0, lsl #3
   15472:	0080      	lsls	r0, r0, #2
   15474:	5826      	ldr	r6, [r4, r0]
   15476:	4404      	add	r4, r0
   15478:	b1d6      	cbz	r6, 154b0 <interface_socket_getopt+0x4c>
   1547a:	2901      	cmp	r1, #1
   1547c:	d112      	bne.n	154a4 <interface_socket_getopt+0x40>
   1547e:	2a04      	cmp	r2, #4
   15480:	d110      	bne.n	154a4 <interface_socket_getopt+0x40>
   15482:	b14b      	cbz	r3, 15498 <interface_socket_getopt+0x34>
   15484:	b145      	cbz	r5, 15498 <interface_socket_getopt+0x34>
   15486:	682a      	ldr	r2, [r5, #0]
   15488:	2a04      	cmp	r2, #4
   1548a:	d105      	bne.n	15498 <interface_socket_getopt+0x34>
   1548c:	2200      	movs	r2, #0
   1548e:	6861      	ldr	r1, [r4, #4]
   15490:	4610      	mov	r0, r2
   15492:	6019      	str	r1, [r3, #0]
   15494:	6062      	str	r2, [r4, #4]
   15496:	bd70      	pop	{r4, r5, r6, pc}
   15498:	2016      	movs	r0, #22
   1549a:	f7f9 fb29 	bl	eaf0 <bsd_os_errno_set>
   1549e:	f04f 30ff 	mov.w	r0, #4294967295
   154a2:	bd70      	pop	{r4, r5, r6, pc}
   154a4:	202a      	movs	r0, #42	; 0x2a
   154a6:	f7f9 fb23 	bl	eaf0 <bsd_os_errno_set>
   154aa:	f04f 30ff 	mov.w	r0, #4294967295
   154ae:	bd70      	pop	{r4, r5, r6, pc}
   154b0:	2009      	movs	r0, #9
   154b2:	f7f9 fb1d 	bl	eaf0 <bsd_os_errno_set>
   154b6:	f04f 30ff 	mov.w	r0, #4294967295
   154ba:	bd70      	pop	{r4, r5, r6, pc}
   154bc:	200249d4 	.word	0x200249d4

000154c0 <interface_socket_fcntl>:
   154c0:	2808      	cmp	r0, #8
   154c2:	b510      	push	{r4, lr}
   154c4:	d818      	bhi.n	154f8 <interface_socket_fcntl+0x38>
   154c6:	eb00 00c0 	add.w	r0, r0, r0, lsl #3
   154ca:	4c11      	ldr	r4, [pc, #68]	; (15510 <interface_socket_fcntl+0x50>)
   154cc:	0083      	lsls	r3, r0, #2
   154ce:	58e0      	ldr	r0, [r4, r3]
   154d0:	b190      	cbz	r0, 154f8 <interface_socket_fcntl+0x38>
   154d2:	2901      	cmp	r1, #1
   154d4:	d005      	beq.n	154e2 <interface_socket_fcntl+0x22>
   154d6:	2902      	cmp	r1, #2
   154d8:	d114      	bne.n	15504 <interface_socket_fcntl+0x44>
   154da:	58e0      	ldr	r0, [r4, r3]
   154dc:	f3c0 7000 	ubfx	r0, r0, #28, #1
   154e0:	bd10      	pop	{r4, pc}
   154e2:	f012 0001 	ands.w	r0, r2, #1
   154e6:	58e2      	ldr	r2, [r4, r3]
   154e8:	bf1a      	itte	ne
   154ea:	2000      	movne	r0, #0
   154ec:	f042 5280 	orrne.w	r2, r2, #268435456	; 0x10000000
   154f0:	f022 5280 	biceq.w	r2, r2, #268435456	; 0x10000000
   154f4:	50e2      	str	r2, [r4, r3]
   154f6:	bd10      	pop	{r4, pc}
   154f8:	2009      	movs	r0, #9
   154fa:	f7f9 faf9 	bl	eaf0 <bsd_os_errno_set>
   154fe:	f04f 30ff 	mov.w	r0, #4294967295
   15502:	bd10      	pop	{r4, pc}
   15504:	2016      	movs	r0, #22
   15506:	f7f9 faf3 	bl	eaf0 <bsd_os_errno_set>
   1550a:	f04f 30ff 	mov.w	r0, #4294967295
   1550e:	bd10      	pop	{r4, pc}
   15510:	200249d4 	.word	0x200249d4

00015514 <bsd_os_application_irq_handler>:
   15514:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   15518:	4c33      	ldr	r4, [pc, #204]	; (155e8 <bsd_os_application_irq_handler+0xd4>)
   1551a:	f7f9 fbab 	bl	ec74 <bsd_os_application_irq_clear>
   1551e:	f04f 0803 	mov.w	r8, #3
   15522:	4d32      	ldr	r5, [pc, #200]	; (155ec <bsd_os_application_irq_handler+0xd8>)
   15524:	4f32      	ldr	r7, [pc, #200]	; (155f0 <bsd_os_application_irq_handler+0xdc>)
   15526:	f104 0680 	add.w	r6, r4, #128	; 0x80
   1552a:	e004      	b.n	15536 <bsd_os_application_irq_handler+0x22>
   1552c:	2b04      	cmp	r3, #4
   1552e:	d006      	beq.n	1553e <bsd_os_application_irq_handler+0x2a>
   15530:	3408      	adds	r4, #8
   15532:	42b4      	cmp	r4, r6
   15534:	d03b      	beq.n	155ae <bsd_os_application_irq_handler+0x9a>
   15536:	f814 3c04 	ldrb.w	r3, [r4, #-4]
   1553a:	2b02      	cmp	r3, #2
   1553c:	d1f6      	bne.n	1552c <bsd_os_application_irq_handler+0x18>
   1553e:	6820      	ldr	r0, [r4, #0]
   15540:	882a      	ldrh	r2, [r5, #0]
   15542:	6803      	ldr	r3, [r0, #0]
   15544:	b29b      	uxth	r3, r3
   15546:	429a      	cmp	r2, r3
   15548:	d033      	beq.n	155b2 <bsd_os_application_irq_handler+0x9e>
   1554a:	8a2a      	ldrh	r2, [r5, #16]
   1554c:	429a      	cmp	r2, r3
   1554e:	d032      	beq.n	155b6 <bsd_os_application_irq_handler+0xa2>
   15550:	8c2a      	ldrh	r2, [r5, #32]
   15552:	429a      	cmp	r2, r3
   15554:	d031      	beq.n	155ba <bsd_os_application_irq_handler+0xa6>
   15556:	8e2a      	ldrh	r2, [r5, #48]	; 0x30
   15558:	429a      	cmp	r2, r3
   1555a:	d030      	beq.n	155be <bsd_os_application_irq_handler+0xaa>
   1555c:	f8b5 2040 	ldrh.w	r2, [r5, #64]	; 0x40
   15560:	429a      	cmp	r2, r3
   15562:	d036      	beq.n	155d2 <bsd_os_application_irq_handler+0xbe>
   15564:	f8b5 2050 	ldrh.w	r2, [r5, #80]	; 0x50
   15568:	429a      	cmp	r2, r3
   1556a:	d034      	beq.n	155d6 <bsd_os_application_irq_handler+0xc2>
   1556c:	f8b5 2060 	ldrh.w	r2, [r5, #96]	; 0x60
   15570:	429a      	cmp	r2, r3
   15572:	d032      	beq.n	155da <bsd_os_application_irq_handler+0xc6>
   15574:	f8b5 2070 	ldrh.w	r2, [r5, #112]	; 0x70
   15578:	429a      	cmp	r2, r3
   1557a:	d030      	beq.n	155de <bsd_os_application_irq_handler+0xca>
   1557c:	f8b5 2080 	ldrh.w	r2, [r5, #128]	; 0x80
   15580:	429a      	cmp	r2, r3
   15582:	d02e      	beq.n	155e2 <bsd_os_application_irq_handler+0xce>
   15584:	f8b5 2090 	ldrh.w	r2, [r5, #144]	; 0x90
   15588:	429a      	cmp	r2, r3
   1558a:	bf08      	it	eq
   1558c:	2309      	moveq	r3, #9
   1558e:	d1cf      	bne.n	15530 <bsd_os_application_irq_handler+0x1c>
   15590:	eb05 1303 	add.w	r3, r5, r3, lsl #4
   15594:	685a      	ldr	r2, [r3, #4]
   15596:	68d9      	ldr	r1, [r3, #12]
   15598:	4790      	blx	r2
   1559a:	b990      	cbnz	r0, 155c2 <bsd_os_application_irq_handler+0xae>
   1559c:	2201      	movs	r2, #1
   1559e:	6820      	ldr	r0, [r4, #0]
   155a0:	f804 2c04 	strb.w	r2, [r4, #-4]
   155a4:	68fb      	ldr	r3, [r7, #12]
   155a6:	3408      	adds	r4, #8
   155a8:	4798      	blx	r3
   155aa:	42b4      	cmp	r4, r6
   155ac:	d1c3      	bne.n	15536 <bsd_os_application_irq_handler+0x22>
   155ae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   155b2:	2300      	movs	r3, #0
   155b4:	e7ec      	b.n	15590 <bsd_os_application_irq_handler+0x7c>
   155b6:	2301      	movs	r3, #1
   155b8:	e7ea      	b.n	15590 <bsd_os_application_irq_handler+0x7c>
   155ba:	2302      	movs	r3, #2
   155bc:	e7e8      	b.n	15590 <bsd_os_application_irq_handler+0x7c>
   155be:	2303      	movs	r3, #3
   155c0:	e7e6      	b.n	15590 <bsd_os_application_irq_handler+0x7c>
   155c2:	2802      	cmp	r0, #2
   155c4:	bf0a      	itet	eq
   155c6:	2304      	moveq	r3, #4
   155c8:	f804 8c04 	strbne.w	r8, [r4, #-4]
   155cc:	f804 3c04 	strbeq.w	r3, [r4, #-4]
   155d0:	e7ae      	b.n	15530 <bsd_os_application_irq_handler+0x1c>
   155d2:	2304      	movs	r3, #4
   155d4:	e7dc      	b.n	15590 <bsd_os_application_irq_handler+0x7c>
   155d6:	2305      	movs	r3, #5
   155d8:	e7da      	b.n	15590 <bsd_os_application_irq_handler+0x7c>
   155da:	2306      	movs	r3, #6
   155dc:	e7d8      	b.n	15590 <bsd_os_application_irq_handler+0x7c>
   155de:	2307      	movs	r3, #7
   155e0:	e7d6      	b.n	15590 <bsd_os_application_irq_handler+0x7c>
   155e2:	2308      	movs	r3, #8
   155e4:	e7d4      	b.n	15590 <bsd_os_application_irq_handler+0x7c>
   155e6:	bf00      	nop
   155e8:	2002071c 	.word	0x2002071c
   155ec:	200205e0 	.word	0x200205e0
   155f0:	20020680 	.word	0x20020680

000155f4 <rpc_framework_init>:
   155f4:	b508      	push	{r3, lr}
   155f6:	22a0      	movs	r2, #160	; 0xa0
   155f8:	2100      	movs	r1, #0
   155fa:	4802      	ldr	r0, [pc, #8]	; (15604 <rpc_framework_init+0x10>)
   155fc:	f004 f982 	bl	19904 <memset>
   15600:	2000      	movs	r0, #0
   15602:	bd08      	pop	{r3, pc}
   15604:	200205e0 	.word	0x200205e0

00015608 <rpc_client_register>:
   15608:	8803      	ldrh	r3, [r0, #0]
   1560a:	2b00      	cmp	r3, #0
   1560c:	d045      	beq.n	1569a <rpc_client_register+0x92>
   1560e:	6842      	ldr	r2, [r0, #4]
   15610:	4601      	mov	r1, r0
   15612:	2a00      	cmp	r2, #0
   15614:	d050      	beq.n	156b8 <rpc_client_register+0xb0>
   15616:	4a30      	ldr	r2, [pc, #192]	; (156d8 <rpc_client_register+0xd0>)
   15618:	8810      	ldrh	r0, [r2, #0]
   1561a:	4283      	cmp	r3, r0
   1561c:	d03d      	beq.n	1569a <rpc_client_register+0x92>
   1561e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   15622:	8a14      	ldrh	r4, [r2, #16]
   15624:	42a3      	cmp	r3, r4
   15626:	d035      	beq.n	15694 <rpc_client_register+0x8c>
   15628:	8c15      	ldrh	r5, [r2, #32]
   1562a:	42ab      	cmp	r3, r5
   1562c:	d032      	beq.n	15694 <rpc_client_register+0x8c>
   1562e:	8e16      	ldrh	r6, [r2, #48]	; 0x30
   15630:	42b3      	cmp	r3, r6
   15632:	d02f      	beq.n	15694 <rpc_client_register+0x8c>
   15634:	f8b2 7040 	ldrh.w	r7, [r2, #64]	; 0x40
   15638:	42bb      	cmp	r3, r7
   1563a:	d02b      	beq.n	15694 <rpc_client_register+0x8c>
   1563c:	f8b2 c050 	ldrh.w	ip, [r2, #80]	; 0x50
   15640:	4563      	cmp	r3, ip
   15642:	d027      	beq.n	15694 <rpc_client_register+0x8c>
   15644:	f8b2 e060 	ldrh.w	lr, [r2, #96]	; 0x60
   15648:	4573      	cmp	r3, lr
   1564a:	d023      	beq.n	15694 <rpc_client_register+0x8c>
   1564c:	f8b2 8070 	ldrh.w	r8, [r2, #112]	; 0x70
   15650:	4543      	cmp	r3, r8
   15652:	d01f      	beq.n	15694 <rpc_client_register+0x8c>
   15654:	f8b2 9080 	ldrh.w	r9, [r2, #128]	; 0x80
   15658:	454b      	cmp	r3, r9
   1565a:	d01b      	beq.n	15694 <rpc_client_register+0x8c>
   1565c:	f8b2 a090 	ldrh.w	sl, [r2, #144]	; 0x90
   15660:	4553      	cmp	r3, sl
   15662:	d017      	beq.n	15694 <rpc_client_register+0x8c>
   15664:	b1e0      	cbz	r0, 156a0 <rpc_client_register+0x98>
   15666:	b35c      	cbz	r4, 156c0 <rpc_client_register+0xb8>
   15668:	b365      	cbz	r5, 156c4 <rpc_client_register+0xbc>
   1566a:	b36e      	cbz	r6, 156c8 <rpc_client_register+0xc0>
   1566c:	b377      	cbz	r7, 156cc <rpc_client_register+0xc4>
   1566e:	f1bc 0f00 	cmp.w	ip, #0
   15672:	d02d      	beq.n	156d0 <rpc_client_register+0xc8>
   15674:	f1be 0f00 	cmp.w	lr, #0
   15678:	d020      	beq.n	156bc <rpc_client_register+0xb4>
   1567a:	f1b8 0f00 	cmp.w	r8, #0
   1567e:	d029      	beq.n	156d4 <rpc_client_register+0xcc>
   15680:	f1b9 0f00 	cmp.w	r9, #0
   15684:	d00b      	beq.n	1569e <rpc_client_register+0x96>
   15686:	2009      	movs	r0, #9
   15688:	f1ba 0f00 	cmp.w	sl, #0
   1568c:	d008      	beq.n	156a0 <rpc_client_register+0x98>
   1568e:	2004      	movs	r0, #4
   15690:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   15694:	2007      	movs	r0, #7
   15696:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1569a:	2007      	movs	r0, #7
   1569c:	4770      	bx	lr
   1569e:	2008      	movs	r0, #8
   156a0:	0100      	lsls	r0, r0, #4
   156a2:	5213      	strh	r3, [r2, r0]
   156a4:	684b      	ldr	r3, [r1, #4]
   156a6:	4402      	add	r2, r0
   156a8:	6053      	str	r3, [r2, #4]
   156aa:	688b      	ldr	r3, [r1, #8]
   156ac:	2000      	movs	r0, #0
   156ae:	6093      	str	r3, [r2, #8]
   156b0:	68cb      	ldr	r3, [r1, #12]
   156b2:	60d3      	str	r3, [r2, #12]
   156b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   156b8:	200e      	movs	r0, #14
   156ba:	4770      	bx	lr
   156bc:	2006      	movs	r0, #6
   156be:	e7ef      	b.n	156a0 <rpc_client_register+0x98>
   156c0:	2001      	movs	r0, #1
   156c2:	e7ed      	b.n	156a0 <rpc_client_register+0x98>
   156c4:	2002      	movs	r0, #2
   156c6:	e7eb      	b.n	156a0 <rpc_client_register+0x98>
   156c8:	2003      	movs	r0, #3
   156ca:	e7e9      	b.n	156a0 <rpc_client_register+0x98>
   156cc:	2004      	movs	r0, #4
   156ce:	e7e7      	b.n	156a0 <rpc_client_register+0x98>
   156d0:	2005      	movs	r0, #5
   156d2:	e7e5      	b.n	156a0 <rpc_client_register+0x98>
   156d4:	2007      	movs	r0, #7
   156d6:	e7e3      	b.n	156a0 <rpc_client_register+0x98>
   156d8:	200205e0 	.word	0x200205e0

000156dc <rpc_transport_input>:
   156dc:	b538      	push	{r3, r4, r5, lr}
   156de:	4a82      	ldr	r2, [pc, #520]	; (158e8 <rpc_transport_input+0x20c>)
   156e0:	680b      	ldr	r3, [r1, #0]
   156e2:	8810      	ldrh	r0, [r2, #0]
   156e4:	b29b      	uxth	r3, r3
   156e6:	4298      	cmp	r0, r3
   156e8:	d027      	beq.n	1573a <rpc_transport_input+0x5e>
   156ea:	8a10      	ldrh	r0, [r2, #16]
   156ec:	4298      	cmp	r0, r3
   156ee:	d024      	beq.n	1573a <rpc_transport_input+0x5e>
   156f0:	8c10      	ldrh	r0, [r2, #32]
   156f2:	4298      	cmp	r0, r3
   156f4:	d021      	beq.n	1573a <rpc_transport_input+0x5e>
   156f6:	8e10      	ldrh	r0, [r2, #48]	; 0x30
   156f8:	4298      	cmp	r0, r3
   156fa:	d01e      	beq.n	1573a <rpc_transport_input+0x5e>
   156fc:	f8b2 0040 	ldrh.w	r0, [r2, #64]	; 0x40
   15700:	4298      	cmp	r0, r3
   15702:	d01a      	beq.n	1573a <rpc_transport_input+0x5e>
   15704:	f8b2 0050 	ldrh.w	r0, [r2, #80]	; 0x50
   15708:	4298      	cmp	r0, r3
   1570a:	d016      	beq.n	1573a <rpc_transport_input+0x5e>
   1570c:	f8b2 0060 	ldrh.w	r0, [r2, #96]	; 0x60
   15710:	4298      	cmp	r0, r3
   15712:	d012      	beq.n	1573a <rpc_transport_input+0x5e>
   15714:	f8b2 0070 	ldrh.w	r0, [r2, #112]	; 0x70
   15718:	4298      	cmp	r0, r3
   1571a:	d00e      	beq.n	1573a <rpc_transport_input+0x5e>
   1571c:	f8b2 0080 	ldrh.w	r0, [r2, #128]	; 0x80
   15720:	4298      	cmp	r0, r3
   15722:	d00a      	beq.n	1573a <rpc_transport_input+0x5e>
   15724:	f8b2 2090 	ldrh.w	r2, [r2, #144]	; 0x90
   15728:	429a      	cmp	r2, r3
   1572a:	d006      	beq.n	1573a <rpc_transport_input+0x5e>
   1572c:	6888      	ldr	r0, [r1, #8]
   1572e:	b118      	cbz	r0, 15738 <rpc_transport_input+0x5c>
   15730:	4b6e      	ldr	r3, [pc, #440]	; (158ec <rpc_transport_input+0x210>)
   15732:	691b      	ldr	r3, [r3, #16]
   15734:	4798      	blx	r3
   15736:	2000      	movs	r0, #0
   15738:	bd38      	pop	{r3, r4, r5, pc}
   1573a:	6888      	ldr	r0, [r1, #8]
   1573c:	2800      	cmp	r0, #0
   1573e:	f000 8098 	beq.w	15872 <rpc_transport_input+0x196>
   15742:	4a6b      	ldr	r2, [pc, #428]	; (158f0 <rpc_transport_input+0x214>)
   15744:	6814      	ldr	r4, [r2, #0]
   15746:	2c00      	cmp	r4, #0
   15748:	d03c      	beq.n	157c4 <rpc_transport_input+0xe8>
   1574a:	6894      	ldr	r4, [r2, #8]
   1574c:	2c00      	cmp	r4, #0
   1574e:	f000 809a 	beq.w	15886 <rpc_transport_input+0x1aa>
   15752:	6914      	ldr	r4, [r2, #16]
   15754:	2c00      	cmp	r4, #0
   15756:	f000 809a 	beq.w	1588e <rpc_transport_input+0x1b2>
   1575a:	6994      	ldr	r4, [r2, #24]
   1575c:	2c00      	cmp	r4, #0
   1575e:	f000 809a 	beq.w	15896 <rpc_transport_input+0x1ba>
   15762:	6a14      	ldr	r4, [r2, #32]
   15764:	2c00      	cmp	r4, #0
   15766:	f000 809a 	beq.w	1589e <rpc_transport_input+0x1c2>
   1576a:	6a94      	ldr	r4, [r2, #40]	; 0x28
   1576c:	2c00      	cmp	r4, #0
   1576e:	f000 8084 	beq.w	1587a <rpc_transport_input+0x19e>
   15772:	6b14      	ldr	r4, [r2, #48]	; 0x30
   15774:	2c00      	cmp	r4, #0
   15776:	f000 8098 	beq.w	158aa <rpc_transport_input+0x1ce>
   1577a:	6b94      	ldr	r4, [r2, #56]	; 0x38
   1577c:	2c00      	cmp	r4, #0
   1577e:	f000 8096 	beq.w	158ae <rpc_transport_input+0x1d2>
   15782:	6c14      	ldr	r4, [r2, #64]	; 0x40
   15784:	2c00      	cmp	r4, #0
   15786:	f000 8096 	beq.w	158b6 <rpc_transport_input+0x1da>
   1578a:	6c94      	ldr	r4, [r2, #72]	; 0x48
   1578c:	2c00      	cmp	r4, #0
   1578e:	f000 8096 	beq.w	158be <rpc_transport_input+0x1e2>
   15792:	6d14      	ldr	r4, [r2, #80]	; 0x50
   15794:	2c00      	cmp	r4, #0
   15796:	f000 8096 	beq.w	158c6 <rpc_transport_input+0x1ea>
   1579a:	6d94      	ldr	r4, [r2, #88]	; 0x58
   1579c:	2c00      	cmp	r4, #0
   1579e:	f000 8098 	beq.w	158d2 <rpc_transport_input+0x1f6>
   157a2:	6e14      	ldr	r4, [r2, #96]	; 0x60
   157a4:	2c00      	cmp	r4, #0
   157a6:	f000 8098 	beq.w	158da <rpc_transport_input+0x1fe>
   157aa:	6e94      	ldr	r4, [r2, #104]	; 0x68
   157ac:	2c00      	cmp	r4, #0
   157ae:	f000 8096 	beq.w	158de <rpc_transport_input+0x202>
   157b2:	6f14      	ldr	r4, [r2, #112]	; 0x70
   157b4:	2c00      	cmp	r4, #0
   157b6:	f000 8094 	beq.w	158e2 <rpc_transport_input+0x206>
   157ba:	6f94      	ldr	r4, [r2, #120]	; 0x78
   157bc:	b10c      	cbz	r4, 157c2 <rpc_transport_input+0xe6>
   157be:	2001      	movs	r0, #1
   157c0:	bd38      	pop	{r3, r4, r5, pc}
   157c2:	240f      	movs	r4, #15
   157c4:	eb02 05c4 	add.w	r5, r2, r4, lsl #3
   157c8:	f842 0034 	str.w	r0, [r2, r4, lsl #3]
   157cc:	80ab      	strh	r3, [r5, #4]
   157ce:	4b49      	ldr	r3, [pc, #292]	; (158f4 <rpc_transport_input+0x218>)
   157d0:	781a      	ldrb	r2, [r3, #0]
   157d2:	2a01      	cmp	r2, #1
   157d4:	d053      	beq.n	1587e <rpc_transport_input+0x1a2>
   157d6:	7a1a      	ldrb	r2, [r3, #8]
   157d8:	2a01      	cmp	r2, #1
   157da:	d041      	beq.n	15860 <rpc_transport_input+0x184>
   157dc:	7c1a      	ldrb	r2, [r3, #16]
   157de:	2a01      	cmp	r2, #1
   157e0:	d04f      	beq.n	15882 <rpc_transport_input+0x1a6>
   157e2:	7e1a      	ldrb	r2, [r3, #24]
   157e4:	2a01      	cmp	r2, #1
   157e6:	d050      	beq.n	1588a <rpc_transport_input+0x1ae>
   157e8:	f893 2020 	ldrb.w	r2, [r3, #32]
   157ec:	2a01      	cmp	r2, #1
   157ee:	d050      	beq.n	15892 <rpc_transport_input+0x1b6>
   157f0:	f893 2028 	ldrb.w	r2, [r3, #40]	; 0x28
   157f4:	2a01      	cmp	r2, #1
   157f6:	d050      	beq.n	1589a <rpc_transport_input+0x1be>
   157f8:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
   157fc:	2a01      	cmp	r2, #1
   157fe:	d03a      	beq.n	15876 <rpc_transport_input+0x19a>
   15800:	f893 2038 	ldrb.w	r2, [r3, #56]	; 0x38
   15804:	2a01      	cmp	r2, #1
   15806:	d04c      	beq.n	158a2 <rpc_transport_input+0x1c6>
   15808:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
   1580c:	2a01      	cmp	r2, #1
   1580e:	d04a      	beq.n	158a6 <rpc_transport_input+0x1ca>
   15810:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
   15814:	2a01      	cmp	r2, #1
   15816:	d04c      	beq.n	158b2 <rpc_transport_input+0x1d6>
   15818:	f893 2050 	ldrb.w	r2, [r3, #80]	; 0x50
   1581c:	2a01      	cmp	r2, #1
   1581e:	d04c      	beq.n	158ba <rpc_transport_input+0x1de>
   15820:	f893 2058 	ldrb.w	r2, [r3, #88]	; 0x58
   15824:	2a01      	cmp	r2, #1
   15826:	d04c      	beq.n	158c2 <rpc_transport_input+0x1e6>
   15828:	f893 2060 	ldrb.w	r2, [r3, #96]	; 0x60
   1582c:	2a01      	cmp	r2, #1
   1582e:	d04c      	beq.n	158ca <rpc_transport_input+0x1ee>
   15830:	f893 2068 	ldrb.w	r2, [r3, #104]	; 0x68
   15834:	2a01      	cmp	r2, #1
   15836:	d04a      	beq.n	158ce <rpc_transport_input+0x1f2>
   15838:	f893 2070 	ldrb.w	r2, [r3, #112]	; 0x70
   1583c:	2a01      	cmp	r2, #1
   1583e:	d04a      	beq.n	158d6 <rpc_transport_input+0x1fa>
   15840:	f893 2078 	ldrb.w	r2, [r3, #120]	; 0x78
   15844:	2a01      	cmp	r2, #1
   15846:	d00a      	beq.n	1585e <rpc_transport_input+0x182>
   15848:	2c10      	cmp	r4, #16
   1584a:	d0b8      	beq.n	157be <rpc_transport_input+0xe2>
   1584c:	2200      	movs	r2, #0
   1584e:	4b28      	ldr	r3, [pc, #160]	; (158f0 <rpc_transport_input+0x214>)
   15850:	2001      	movs	r0, #1
   15852:	eb03 01c4 	add.w	r1, r3, r4, lsl #3
   15856:	808a      	strh	r2, [r1, #4]
   15858:	f843 2034 	str.w	r2, [r3, r4, lsl #3]
   1585c:	bd38      	pop	{r3, r4, r5, pc}
   1585e:	220f      	movs	r2, #15
   15860:	2402      	movs	r4, #2
   15862:	eb03 00c2 	add.w	r0, r3, r2, lsl #3
   15866:	f803 4032 	strb.w	r4, [r3, r2, lsl #3]
   1586a:	6041      	str	r1, [r0, #4]
   1586c:	f7f9 f9fa 	bl	ec64 <bsd_os_application_irq_set>
   15870:	e7a5      	b.n	157be <rpc_transport_input+0xe2>
   15872:	2410      	movs	r4, #16
   15874:	e7ab      	b.n	157ce <rpc_transport_input+0xf2>
   15876:	2206      	movs	r2, #6
   15878:	e7f2      	b.n	15860 <rpc_transport_input+0x184>
   1587a:	2405      	movs	r4, #5
   1587c:	e7a2      	b.n	157c4 <rpc_transport_input+0xe8>
   1587e:	2200      	movs	r2, #0
   15880:	e7ee      	b.n	15860 <rpc_transport_input+0x184>
   15882:	2202      	movs	r2, #2
   15884:	e7ec      	b.n	15860 <rpc_transport_input+0x184>
   15886:	2401      	movs	r4, #1
   15888:	e79c      	b.n	157c4 <rpc_transport_input+0xe8>
   1588a:	2203      	movs	r2, #3
   1588c:	e7e8      	b.n	15860 <rpc_transport_input+0x184>
   1588e:	2402      	movs	r4, #2
   15890:	e798      	b.n	157c4 <rpc_transport_input+0xe8>
   15892:	2204      	movs	r2, #4
   15894:	e7e4      	b.n	15860 <rpc_transport_input+0x184>
   15896:	2403      	movs	r4, #3
   15898:	e794      	b.n	157c4 <rpc_transport_input+0xe8>
   1589a:	2205      	movs	r2, #5
   1589c:	e7e0      	b.n	15860 <rpc_transport_input+0x184>
   1589e:	2404      	movs	r4, #4
   158a0:	e790      	b.n	157c4 <rpc_transport_input+0xe8>
   158a2:	2207      	movs	r2, #7
   158a4:	e7dc      	b.n	15860 <rpc_transport_input+0x184>
   158a6:	2208      	movs	r2, #8
   158a8:	e7da      	b.n	15860 <rpc_transport_input+0x184>
   158aa:	2406      	movs	r4, #6
   158ac:	e78a      	b.n	157c4 <rpc_transport_input+0xe8>
   158ae:	2407      	movs	r4, #7
   158b0:	e788      	b.n	157c4 <rpc_transport_input+0xe8>
   158b2:	2209      	movs	r2, #9
   158b4:	e7d4      	b.n	15860 <rpc_transport_input+0x184>
   158b6:	2408      	movs	r4, #8
   158b8:	e784      	b.n	157c4 <rpc_transport_input+0xe8>
   158ba:	220a      	movs	r2, #10
   158bc:	e7d0      	b.n	15860 <rpc_transport_input+0x184>
   158be:	2409      	movs	r4, #9
   158c0:	e780      	b.n	157c4 <rpc_transport_input+0xe8>
   158c2:	220b      	movs	r2, #11
   158c4:	e7cc      	b.n	15860 <rpc_transport_input+0x184>
   158c6:	240a      	movs	r4, #10
   158c8:	e77c      	b.n	157c4 <rpc_transport_input+0xe8>
   158ca:	220c      	movs	r2, #12
   158cc:	e7c8      	b.n	15860 <rpc_transport_input+0x184>
   158ce:	220d      	movs	r2, #13
   158d0:	e7c6      	b.n	15860 <rpc_transport_input+0x184>
   158d2:	240b      	movs	r4, #11
   158d4:	e776      	b.n	157c4 <rpc_transport_input+0xe8>
   158d6:	220e      	movs	r2, #14
   158d8:	e7c2      	b.n	15860 <rpc_transport_input+0x184>
   158da:	240c      	movs	r4, #12
   158dc:	e772      	b.n	157c4 <rpc_transport_input+0xe8>
   158de:	240d      	movs	r4, #13
   158e0:	e770      	b.n	157c4 <rpc_transport_input+0xe8>
   158e2:	240e      	movs	r4, #14
   158e4:	e76e      	b.n	157c4 <rpc_transport_input+0xe8>
   158e6:	bf00      	nop
   158e8:	200205e0 	.word	0x200205e0
   158ec:	20020680 	.word	0x20020680
   158f0:	20020698 	.word	0x20020698
   158f4:	20020718 	.word	0x20020718

000158f8 <rpc_transport_register>:
   158f8:	b4f0      	push	{r4, r5, r6, r7}
   158fa:	2900      	cmp	r1, #0
   158fc:	d052      	beq.n	159a4 <rpc_transport_register+0xac>
   158fe:	2800      	cmp	r0, #0
   15900:	d050      	beq.n	159a4 <rpc_transport_register+0xac>
   15902:	6883      	ldr	r3, [r0, #8]
   15904:	2b00      	cmp	r3, #0
   15906:	d04d      	beq.n	159a4 <rpc_transport_register+0xac>
   15908:	6903      	ldr	r3, [r0, #16]
   1590a:	2b00      	cmp	r3, #0
   1590c:	d04a      	beq.n	159a4 <rpc_transport_register+0xac>
   1590e:	6843      	ldr	r3, [r0, #4]
   15910:	2b00      	cmp	r3, #0
   15912:	d047      	beq.n	159a4 <rpc_transport_register+0xac>
   15914:	68c3      	ldr	r3, [r0, #12]
   15916:	2b00      	cmp	r3, #0
   15918:	d044      	beq.n	159a4 <rpc_transport_register+0xac>
   1591a:	6803      	ldr	r3, [r0, #0]
   1591c:	2b00      	cmp	r3, #0
   1591e:	d041      	beq.n	159a4 <rpc_transport_register+0xac>
   15920:	6943      	ldr	r3, [r0, #20]
   15922:	2b00      	cmp	r3, #0
   15924:	d03e      	beq.n	159a4 <rpc_transport_register+0xac>
   15926:	2601      	movs	r6, #1
   15928:	2500      	movs	r5, #0
   1592a:	4604      	mov	r4, r0
   1592c:	460f      	mov	r7, r1
   1592e:	4a1f      	ldr	r2, [pc, #124]	; (159ac <rpc_transport_register+0xb4>)
   15930:	4b1f      	ldr	r3, [pc, #124]	; (159b0 <rpc_transport_register+0xb8>)
   15932:	f8df c080 	ldr.w	ip, [pc, #128]	; 159b4 <rpc_transport_register+0xbc>
   15936:	7416      	strb	r6, [r2, #16]
   15938:	7616      	strb	r6, [r2, #24]
   1593a:	f882 6020 	strb.w	r6, [r2, #32]
   1593e:	f882 6028 	strb.w	r6, [r2, #40]	; 0x28
   15942:	f882 6030 	strb.w	r6, [r2, #48]	; 0x30
   15946:	f882 6038 	strb.w	r6, [r2, #56]	; 0x38
   1594a:	f882 6040 	strb.w	r6, [r2, #64]	; 0x40
   1594e:	f882 6048 	strb.w	r6, [r2, #72]	; 0x48
   15952:	f882 6050 	strb.w	r6, [r2, #80]	; 0x50
   15956:	f882 6058 	strb.w	r6, [r2, #88]	; 0x58
   1595a:	f882 6060 	strb.w	r6, [r2, #96]	; 0x60
   1595e:	f882 6068 	strb.w	r6, [r2, #104]	; 0x68
   15962:	f882 6070 	strb.w	r6, [r2, #112]	; 0x70
   15966:	f882 6078 	strb.w	r6, [r2, #120]	; 0x78
   1596a:	611d      	str	r5, [r3, #16]
   1596c:	619d      	str	r5, [r3, #24]
   1596e:	621d      	str	r5, [r3, #32]
   15970:	629d      	str	r5, [r3, #40]	; 0x28
   15972:	631d      	str	r5, [r3, #48]	; 0x30
   15974:	639d      	str	r5, [r3, #56]	; 0x38
   15976:	641d      	str	r5, [r3, #64]	; 0x40
   15978:	649d      	str	r5, [r3, #72]	; 0x48
   1597a:	651d      	str	r5, [r3, #80]	; 0x50
   1597c:	659d      	str	r5, [r3, #88]	; 0x58
   1597e:	661d      	str	r5, [r3, #96]	; 0x60
   15980:	669d      	str	r5, [r3, #104]	; 0x68
   15982:	671d      	str	r5, [r3, #112]	; 0x70
   15984:	679d      	str	r5, [r3, #120]	; 0x78
   15986:	7016      	strb	r6, [r2, #0]
   15988:	7216      	strb	r6, [r2, #8]
   1598a:	601d      	str	r5, [r3, #0]
   1598c:	609d      	str	r5, [r3, #8]
   1598e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   15990:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   15994:	e894 0003 	ldmia.w	r4, {r0, r1}
   15998:	e88c 0003 	stmia.w	ip, {r0, r1}
   1599c:	603e      	str	r6, [r7, #0]
   1599e:	4628      	mov	r0, r5
   159a0:	bcf0      	pop	{r4, r5, r6, r7}
   159a2:	4770      	bx	lr
   159a4:	250e      	movs	r5, #14
   159a6:	4628      	mov	r0, r5
   159a8:	bcf0      	pop	{r4, r5, r6, r7}
   159aa:	4770      	bx	lr
   159ac:	20020718 	.word	0x20020718
   159b0:	20020698 	.word	0x20020698
   159b4:	20020680 	.word	0x20020680

000159b8 <rpc_transport_unregister>:
   159b8:	2800      	cmp	r0, #0
   159ba:	d03a      	beq.n	15a32 <rpc_transport_unregister+0x7a>
   159bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   159c0:	4680      	mov	r8, r0
   159c2:	4c1d      	ldr	r4, [pc, #116]	; (15a38 <rpc_transport_unregister+0x80>)
   159c4:	f104 05a0 	add.w	r5, r4, #160	; 0xa0
   159c8:	68a3      	ldr	r3, [r4, #8]
   159ca:	3410      	adds	r4, #16
   159cc:	b103      	cbz	r3, 159d0 <rpc_transport_unregister+0x18>
   159ce:	4798      	blx	r3
   159d0:	42ac      	cmp	r4, r5
   159d2:	d1f9      	bne.n	159c8 <rpc_transport_unregister+0x10>
   159d4:	f04f 0901 	mov.w	r9, #1
   159d8:	2600      	movs	r6, #0
   159da:	4c18      	ldr	r4, [pc, #96]	; (15a3c <rpc_transport_unregister+0x84>)
   159dc:	4d18      	ldr	r5, [pc, #96]	; (15a40 <rpc_transport_unregister+0x88>)
   159de:	f8df a064 	ldr.w	sl, [pc, #100]	; 15a44 <rpc_transport_unregister+0x8c>
   159e2:	f104 0780 	add.w	r7, r4, #128	; 0x80
   159e6:	f814 3c04 	ldrb.w	r3, [r4, #-4]
   159ea:	2b01      	cmp	r3, #1
   159ec:	d005      	beq.n	159fa <rpc_transport_unregister+0x42>
   159ee:	f8da 300c 	ldr.w	r3, [sl, #12]
   159f2:	6820      	ldr	r0, [r4, #0]
   159f4:	4798      	blx	r3
   159f6:	f804 9c04 	strb.w	r9, [r4, #-4]
   159fa:	f855 0c04 	ldr.w	r0, [r5, #-4]
   159fe:	3408      	adds	r4, #8
   15a00:	b128      	cbz	r0, 15a0e <rpc_transport_unregister+0x56>
   15a02:	f8da 3010 	ldr.w	r3, [sl, #16]
   15a06:	4798      	blx	r3
   15a08:	802e      	strh	r6, [r5, #0]
   15a0a:	f845 6c04 	str.w	r6, [r5, #-4]
   15a0e:	42bc      	cmp	r4, r7
   15a10:	f105 0508 	add.w	r5, r5, #8
   15a14:	d1e7      	bne.n	159e6 <rpc_transport_unregister+0x2e>
   15a16:	f8d8 0000 	ldr.w	r0, [r8]
   15a1a:	2218      	movs	r2, #24
   15a1c:	3801      	subs	r0, #1
   15a1e:	eb00 0040 	add.w	r0, r0, r0, lsl #1
   15a22:	eb0a 00c0 	add.w	r0, sl, r0, lsl #3
   15a26:	2100      	movs	r1, #0
   15a28:	f003 ff6c 	bl	19904 <memset>
   15a2c:	2000      	movs	r0, #0
   15a2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   15a32:	200e      	movs	r0, #14
   15a34:	4770      	bx	lr
   15a36:	bf00      	nop
   15a38:	200205e0 	.word	0x200205e0
   15a3c:	2002071c 	.word	0x2002071c
   15a40:	2002069c 	.word	0x2002069c
   15a44:	20020680 	.word	0x20020680

00015a48 <rpc_message_send>:
   15a48:	b168      	cbz	r0, 15a66 <rpc_message_send+0x1e>
   15a4a:	b171      	cbz	r1, 15a6a <rpc_message_send+0x22>
   15a4c:	4a09      	ldr	r2, [pc, #36]	; (15a74 <rpc_message_send+0x2c>)
   15a4e:	6853      	ldr	r3, [r2, #4]
   15a50:	b16b      	cbz	r3, 15a6e <rpc_message_send+0x26>
   15a52:	684b      	ldr	r3, [r1, #4]
   15a54:	8008      	strh	r0, [r1, #0]
   15a56:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
   15a5a:	f043 0302 	orr.w	r3, r3, #2
   15a5e:	6812      	ldr	r2, [r2, #0]
   15a60:	604b      	str	r3, [r1, #4]
   15a62:	4608      	mov	r0, r1
   15a64:	4710      	bx	r2
   15a66:	2007      	movs	r0, #7
   15a68:	4770      	bx	lr
   15a6a:	200e      	movs	r0, #14
   15a6c:	4770      	bx	lr
   15a6e:	2008      	movs	r0, #8
   15a70:	4770      	bx	lr
   15a72:	bf00      	nop
   15a74:	20020680 	.word	0x20020680

00015a78 <rpc_message_alloc>:
   15a78:	b35a      	cbz	r2, 15ad2 <rpc_message_alloc+0x5a>
   15a7a:	b330      	cbz	r0, 15aca <rpc_message_alloc+0x52>
   15a7c:	2300      	movs	r3, #0
   15a7e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   15a82:	4f15      	ldr	r7, [pc, #84]	; (15ad8 <rpc_message_alloc+0x60>)
   15a84:	6013      	str	r3, [r2, #0]
   15a86:	687b      	ldr	r3, [r7, #4]
   15a88:	b30b      	cbz	r3, 15ace <rpc_message_alloc+0x56>
   15a8a:	4615      	mov	r5, r2
   15a8c:	460c      	mov	r4, r1
   15a8e:	4606      	mov	r6, r0
   15a90:	b959      	cbnz	r1, 15aaa <rpc_message_alloc+0x32>
   15a92:	4798      	blx	r3
   15a94:	4603      	mov	r3, r0
   15a96:	b1a8      	cbz	r0, 15ac4 <rpc_message_alloc+0x4c>
   15a98:	46a0      	mov	r8, r4
   15a9a:	60dc      	str	r4, [r3, #12]
   15a9c:	f8c3 8008 	str.w	r8, [r3, #8]
   15aa0:	801e      	strh	r6, [r3, #0]
   15aa2:	602b      	str	r3, [r5, #0]
   15aa4:	2000      	movs	r0, #0
   15aa6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   15aaa:	68bb      	ldr	r3, [r7, #8]
   15aac:	4608      	mov	r0, r1
   15aae:	4798      	blx	r3
   15ab0:	4680      	mov	r8, r0
   15ab2:	b138      	cbz	r0, 15ac4 <rpc_message_alloc+0x4c>
   15ab4:	687b      	ldr	r3, [r7, #4]
   15ab6:	4798      	blx	r3
   15ab8:	4603      	mov	r3, r0
   15aba:	2800      	cmp	r0, #0
   15abc:	d1ed      	bne.n	15a9a <rpc_message_alloc+0x22>
   15abe:	693b      	ldr	r3, [r7, #16]
   15ac0:	4640      	mov	r0, r8
   15ac2:	4798      	blx	r3
   15ac4:	2004      	movs	r0, #4
   15ac6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   15aca:	2007      	movs	r0, #7
   15acc:	4770      	bx	lr
   15ace:	2008      	movs	r0, #8
   15ad0:	e7f9      	b.n	15ac6 <rpc_message_alloc+0x4e>
   15ad2:	200e      	movs	r0, #14
   15ad4:	4770      	bx	lr
   15ad6:	bf00      	nop
   15ad8:	20020680 	.word	0x20020680

00015adc <rpc_message_free>:
   15adc:	2800      	cmp	r0, #0
   15ade:	f000 808c 	beq.w	15bfa <rpc_message_free+0x11e>
   15ae2:	2900      	cmp	r1, #0
   15ae4:	f000 80e9 	beq.w	15cba <rpc_message_free+0x1de>
   15ae8:	b538      	push	{r3, r4, r5, lr}
   15aea:	4a83      	ldr	r2, [pc, #524]	; (15cf8 <rpc_message_free+0x21c>)
   15aec:	6853      	ldr	r3, [r2, #4]
   15aee:	2b00      	cmp	r3, #0
   15af0:	f000 8085 	beq.w	15bfe <rpc_message_free+0x122>
   15af4:	4c81      	ldr	r4, [pc, #516]	; (15cfc <rpc_message_free+0x220>)
   15af6:	4608      	mov	r0, r1
   15af8:	6863      	ldr	r3, [r4, #4]
   15afa:	4299      	cmp	r1, r3
   15afc:	f000 8085 	beq.w	15c0a <rpc_message_free+0x12e>
   15b00:	68e3      	ldr	r3, [r4, #12]
   15b02:	4298      	cmp	r0, r3
   15b04:	f000 808e 	beq.w	15c24 <rpc_message_free+0x148>
   15b08:	6963      	ldr	r3, [r4, #20]
   15b0a:	4298      	cmp	r0, r3
   15b0c:	f000 8090 	beq.w	15c30 <rpc_message_free+0x154>
   15b10:	69e3      	ldr	r3, [r4, #28]
   15b12:	4298      	cmp	r0, r3
   15b14:	f000 8092 	beq.w	15c3c <rpc_message_free+0x160>
   15b18:	6a63      	ldr	r3, [r4, #36]	; 0x24
   15b1a:	4298      	cmp	r0, r3
   15b1c:	f000 8095 	beq.w	15c4a <rpc_message_free+0x16e>
   15b20:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   15b22:	4298      	cmp	r0, r3
   15b24:	f000 8098 	beq.w	15c58 <rpc_message_free+0x17c>
   15b28:	6b63      	ldr	r3, [r4, #52]	; 0x34
   15b2a:	4298      	cmp	r0, r3
   15b2c:	f000 809b 	beq.w	15c66 <rpc_message_free+0x18a>
   15b30:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   15b32:	4298      	cmp	r0, r3
   15b34:	f000 809e 	beq.w	15c74 <rpc_message_free+0x198>
   15b38:	6c63      	ldr	r3, [r4, #68]	; 0x44
   15b3a:	4298      	cmp	r0, r3
   15b3c:	f000 80a1 	beq.w	15c82 <rpc_message_free+0x1a6>
   15b40:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
   15b42:	4298      	cmp	r0, r3
   15b44:	f000 80a4 	beq.w	15c90 <rpc_message_free+0x1b4>
   15b48:	6d63      	ldr	r3, [r4, #84]	; 0x54
   15b4a:	4298      	cmp	r0, r3
   15b4c:	f000 80a7 	beq.w	15c9e <rpc_message_free+0x1c2>
   15b50:	6de3      	ldr	r3, [r4, #92]	; 0x5c
   15b52:	4298      	cmp	r0, r3
   15b54:	f000 80aa 	beq.w	15cac <rpc_message_free+0x1d0>
   15b58:	6e63      	ldr	r3, [r4, #100]	; 0x64
   15b5a:	4298      	cmp	r0, r3
   15b5c:	f000 80af 	beq.w	15cbe <rpc_message_free+0x1e2>
   15b60:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
   15b62:	4298      	cmp	r0, r3
   15b64:	f000 80b2 	beq.w	15ccc <rpc_message_free+0x1f0>
   15b68:	6f63      	ldr	r3, [r4, #116]	; 0x74
   15b6a:	4298      	cmp	r0, r3
   15b6c:	f000 80b5 	beq.w	15cda <rpc_message_free+0x1fe>
   15b70:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
   15b72:	4283      	cmp	r3, r0
   15b74:	f000 80b8 	beq.w	15ce8 <rpc_message_free+0x20c>
   15b78:	68d3      	ldr	r3, [r2, #12]
   15b7a:	4798      	blx	r3
   15b7c:	7823      	ldrb	r3, [r4, #0]
   15b7e:	2b04      	cmp	r3, #4
   15b80:	d03f      	beq.n	15c02 <rpc_message_free+0x126>
   15b82:	7a23      	ldrb	r3, [r4, #8]
   15b84:	2b04      	cmp	r3, #4
   15b86:	d03c      	beq.n	15c02 <rpc_message_free+0x126>
   15b88:	7c23      	ldrb	r3, [r4, #16]
   15b8a:	2b04      	cmp	r3, #4
   15b8c:	d039      	beq.n	15c02 <rpc_message_free+0x126>
   15b8e:	7e23      	ldrb	r3, [r4, #24]
   15b90:	2b04      	cmp	r3, #4
   15b92:	d036      	beq.n	15c02 <rpc_message_free+0x126>
   15b94:	f894 3020 	ldrb.w	r3, [r4, #32]
   15b98:	2b04      	cmp	r3, #4
   15b9a:	d032      	beq.n	15c02 <rpc_message_free+0x126>
   15b9c:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
   15ba0:	2b04      	cmp	r3, #4
   15ba2:	d02e      	beq.n	15c02 <rpc_message_free+0x126>
   15ba4:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
   15ba8:	2b04      	cmp	r3, #4
   15baa:	d02a      	beq.n	15c02 <rpc_message_free+0x126>
   15bac:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
   15bb0:	2b04      	cmp	r3, #4
   15bb2:	d026      	beq.n	15c02 <rpc_message_free+0x126>
   15bb4:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
   15bb8:	2b04      	cmp	r3, #4
   15bba:	d022      	beq.n	15c02 <rpc_message_free+0x126>
   15bbc:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
   15bc0:	2b04      	cmp	r3, #4
   15bc2:	d01e      	beq.n	15c02 <rpc_message_free+0x126>
   15bc4:	f894 3050 	ldrb.w	r3, [r4, #80]	; 0x50
   15bc8:	2b04      	cmp	r3, #4
   15bca:	d01a      	beq.n	15c02 <rpc_message_free+0x126>
   15bcc:	f894 3058 	ldrb.w	r3, [r4, #88]	; 0x58
   15bd0:	2b04      	cmp	r3, #4
   15bd2:	d016      	beq.n	15c02 <rpc_message_free+0x126>
   15bd4:	f894 3060 	ldrb.w	r3, [r4, #96]	; 0x60
   15bd8:	2b04      	cmp	r3, #4
   15bda:	d012      	beq.n	15c02 <rpc_message_free+0x126>
   15bdc:	f894 3068 	ldrb.w	r3, [r4, #104]	; 0x68
   15be0:	2b04      	cmp	r3, #4
   15be2:	d00e      	beq.n	15c02 <rpc_message_free+0x126>
   15be4:	f894 3070 	ldrb.w	r3, [r4, #112]	; 0x70
   15be8:	2b04      	cmp	r3, #4
   15bea:	d00a      	beq.n	15c02 <rpc_message_free+0x126>
   15bec:	f894 3078 	ldrb.w	r3, [r4, #120]	; 0x78
   15bf0:	2b04      	cmp	r3, #4
   15bf2:	bf18      	it	ne
   15bf4:	2000      	movne	r0, #0
   15bf6:	d004      	beq.n	15c02 <rpc_message_free+0x126>
   15bf8:	bd38      	pop	{r3, r4, r5, pc}
   15bfa:	2007      	movs	r0, #7
   15bfc:	4770      	bx	lr
   15bfe:	2008      	movs	r0, #8
   15c00:	bd38      	pop	{r3, r4, r5, pc}
   15c02:	f7f9 f82f 	bl	ec64 <bsd_os_application_irq_set>
   15c06:	2000      	movs	r0, #0
   15c08:	bd38      	pop	{r3, r4, r5, pc}
   15c0a:	7821      	ldrb	r1, [r4, #0]
   15c0c:	2903      	cmp	r1, #3
   15c0e:	f47f af77 	bne.w	15b00 <rpc_message_free+0x24>
   15c12:	2100      	movs	r1, #0
   15c14:	2501      	movs	r5, #1
   15c16:	4618      	mov	r0, r3
   15c18:	68d2      	ldr	r2, [r2, #12]
   15c1a:	f804 5031 	strb.w	r5, [r4, r1, lsl #3]
   15c1e:	4790      	blx	r2
   15c20:	2000      	movs	r0, #0
   15c22:	bd38      	pop	{r3, r4, r5, pc}
   15c24:	7a21      	ldrb	r1, [r4, #8]
   15c26:	2903      	cmp	r1, #3
   15c28:	f47f af6e 	bne.w	15b08 <rpc_message_free+0x2c>
   15c2c:	2101      	movs	r1, #1
   15c2e:	e7f1      	b.n	15c14 <rpc_message_free+0x138>
   15c30:	7c21      	ldrb	r1, [r4, #16]
   15c32:	2903      	cmp	r1, #3
   15c34:	f47f af6c 	bne.w	15b10 <rpc_message_free+0x34>
   15c38:	2102      	movs	r1, #2
   15c3a:	e7eb      	b.n	15c14 <rpc_message_free+0x138>
   15c3c:	7e21      	ldrb	r1, [r4, #24]
   15c3e:	2903      	cmp	r1, #3
   15c40:	d0e8      	beq.n	15c14 <rpc_message_free+0x138>
   15c42:	6a63      	ldr	r3, [r4, #36]	; 0x24
   15c44:	4298      	cmp	r0, r3
   15c46:	f47f af6b 	bne.w	15b20 <rpc_message_free+0x44>
   15c4a:	f894 1020 	ldrb.w	r1, [r4, #32]
   15c4e:	2903      	cmp	r1, #3
   15c50:	f47f af66 	bne.w	15b20 <rpc_message_free+0x44>
   15c54:	2104      	movs	r1, #4
   15c56:	e7dd      	b.n	15c14 <rpc_message_free+0x138>
   15c58:	f894 1028 	ldrb.w	r1, [r4, #40]	; 0x28
   15c5c:	2903      	cmp	r1, #3
   15c5e:	f47f af63 	bne.w	15b28 <rpc_message_free+0x4c>
   15c62:	2105      	movs	r1, #5
   15c64:	e7d6      	b.n	15c14 <rpc_message_free+0x138>
   15c66:	f894 1030 	ldrb.w	r1, [r4, #48]	; 0x30
   15c6a:	2903      	cmp	r1, #3
   15c6c:	f47f af60 	bne.w	15b30 <rpc_message_free+0x54>
   15c70:	2106      	movs	r1, #6
   15c72:	e7cf      	b.n	15c14 <rpc_message_free+0x138>
   15c74:	f894 1038 	ldrb.w	r1, [r4, #56]	; 0x38
   15c78:	2903      	cmp	r1, #3
   15c7a:	f47f af5d 	bne.w	15b38 <rpc_message_free+0x5c>
   15c7e:	2107      	movs	r1, #7
   15c80:	e7c8      	b.n	15c14 <rpc_message_free+0x138>
   15c82:	f894 1040 	ldrb.w	r1, [r4, #64]	; 0x40
   15c86:	2903      	cmp	r1, #3
   15c88:	f47f af5a 	bne.w	15b40 <rpc_message_free+0x64>
   15c8c:	2108      	movs	r1, #8
   15c8e:	e7c1      	b.n	15c14 <rpc_message_free+0x138>
   15c90:	f894 1048 	ldrb.w	r1, [r4, #72]	; 0x48
   15c94:	2903      	cmp	r1, #3
   15c96:	f47f af57 	bne.w	15b48 <rpc_message_free+0x6c>
   15c9a:	2109      	movs	r1, #9
   15c9c:	e7ba      	b.n	15c14 <rpc_message_free+0x138>
   15c9e:	f894 1050 	ldrb.w	r1, [r4, #80]	; 0x50
   15ca2:	2903      	cmp	r1, #3
   15ca4:	f47f af54 	bne.w	15b50 <rpc_message_free+0x74>
   15ca8:	210a      	movs	r1, #10
   15caa:	e7b3      	b.n	15c14 <rpc_message_free+0x138>
   15cac:	f894 1058 	ldrb.w	r1, [r4, #88]	; 0x58
   15cb0:	2903      	cmp	r1, #3
   15cb2:	f47f af51 	bne.w	15b58 <rpc_message_free+0x7c>
   15cb6:	210b      	movs	r1, #11
   15cb8:	e7ac      	b.n	15c14 <rpc_message_free+0x138>
   15cba:	200e      	movs	r0, #14
   15cbc:	4770      	bx	lr
   15cbe:	f894 1060 	ldrb.w	r1, [r4, #96]	; 0x60
   15cc2:	2903      	cmp	r1, #3
   15cc4:	f47f af4c 	bne.w	15b60 <rpc_message_free+0x84>
   15cc8:	210c      	movs	r1, #12
   15cca:	e7a3      	b.n	15c14 <rpc_message_free+0x138>
   15ccc:	f894 1068 	ldrb.w	r1, [r4, #104]	; 0x68
   15cd0:	2903      	cmp	r1, #3
   15cd2:	f47f af49 	bne.w	15b68 <rpc_message_free+0x8c>
   15cd6:	210d      	movs	r1, #13
   15cd8:	e79c      	b.n	15c14 <rpc_message_free+0x138>
   15cda:	f894 1070 	ldrb.w	r1, [r4, #112]	; 0x70
   15cde:	2903      	cmp	r1, #3
   15ce0:	f47f af46 	bne.w	15b70 <rpc_message_free+0x94>
   15ce4:	210e      	movs	r1, #14
   15ce6:	e795      	b.n	15c14 <rpc_message_free+0x138>
   15ce8:	f894 3078 	ldrb.w	r3, [r4, #120]	; 0x78
   15cec:	2b03      	cmp	r3, #3
   15cee:	f47f af43 	bne.w	15b78 <rpc_message_free+0x9c>
   15cf2:	4603      	mov	r3, r0
   15cf4:	210f      	movs	r1, #15
   15cf6:	e78d      	b.n	15c14 <rpc_message_free+0x138>
   15cf8:	20020680 	.word	0x20020680
   15cfc:	20020718 	.word	0x20020718

00015d00 <rpc_message_data_free>:
   15d00:	2800      	cmp	r0, #0
   15d02:	f000 8091 	beq.w	15e28 <rpc_message_data_free+0x128>
   15d06:	2900      	cmp	r1, #0
   15d08:	f000 80e4 	beq.w	15ed4 <rpc_message_data_free+0x1d4>
   15d0c:	b538      	push	{r3, r4, r5, lr}
   15d0e:	4a81      	ldr	r2, [pc, #516]	; (15f14 <rpc_message_data_free+0x214>)
   15d10:	6853      	ldr	r3, [r2, #4]
   15d12:	2b00      	cmp	r3, #0
   15d14:	f000 808a 	beq.w	15e2c <rpc_message_data_free+0x12c>
   15d18:	4b7f      	ldr	r3, [pc, #508]	; (15f18 <rpc_message_data_free+0x218>)
   15d1a:	681c      	ldr	r4, [r3, #0]
   15d1c:	42a1      	cmp	r1, r4
   15d1e:	f000 8087 	beq.w	15e30 <rpc_message_data_free+0x130>
   15d22:	689c      	ldr	r4, [r3, #8]
   15d24:	42a1      	cmp	r1, r4
   15d26:	f000 808f 	beq.w	15e48 <rpc_message_data_free+0x148>
   15d2a:	691c      	ldr	r4, [r3, #16]
   15d2c:	42a1      	cmp	r1, r4
   15d2e:	f000 8091 	beq.w	15e54 <rpc_message_data_free+0x154>
   15d32:	699c      	ldr	r4, [r3, #24]
   15d34:	42a1      	cmp	r1, r4
   15d36:	f000 8093 	beq.w	15e60 <rpc_message_data_free+0x160>
   15d3a:	6a1c      	ldr	r4, [r3, #32]
   15d3c:	42a1      	cmp	r1, r4
   15d3e:	f000 8095 	beq.w	15e6c <rpc_message_data_free+0x16c>
   15d42:	6a9c      	ldr	r4, [r3, #40]	; 0x28
   15d44:	42a1      	cmp	r1, r4
   15d46:	f000 8097 	beq.w	15e78 <rpc_message_data_free+0x178>
   15d4a:	6b1c      	ldr	r4, [r3, #48]	; 0x30
   15d4c:	42a1      	cmp	r1, r4
   15d4e:	f000 8099 	beq.w	15e84 <rpc_message_data_free+0x184>
   15d52:	6b9c      	ldr	r4, [r3, #56]	; 0x38
   15d54:	42a1      	cmp	r1, r4
   15d56:	f000 809b 	beq.w	15e90 <rpc_message_data_free+0x190>
   15d5a:	6c1c      	ldr	r4, [r3, #64]	; 0x40
   15d5c:	42a1      	cmp	r1, r4
   15d5e:	f000 809d 	beq.w	15e9c <rpc_message_data_free+0x19c>
   15d62:	6c9c      	ldr	r4, [r3, #72]	; 0x48
   15d64:	42a1      	cmp	r1, r4
   15d66:	f000 80a0 	beq.w	15eaa <rpc_message_data_free+0x1aa>
   15d6a:	6d1c      	ldr	r4, [r3, #80]	; 0x50
   15d6c:	42a1      	cmp	r1, r4
   15d6e:	f000 80a3 	beq.w	15eb8 <rpc_message_data_free+0x1b8>
   15d72:	6d9c      	ldr	r4, [r3, #88]	; 0x58
   15d74:	42a1      	cmp	r1, r4
   15d76:	f000 80a6 	beq.w	15ec6 <rpc_message_data_free+0x1c6>
   15d7a:	6e1c      	ldr	r4, [r3, #96]	; 0x60
   15d7c:	42a1      	cmp	r1, r4
   15d7e:	f000 80ab 	beq.w	15ed8 <rpc_message_data_free+0x1d8>
   15d82:	6e9c      	ldr	r4, [r3, #104]	; 0x68
   15d84:	42a1      	cmp	r1, r4
   15d86:	f000 80ae 	beq.w	15ee6 <rpc_message_data_free+0x1e6>
   15d8a:	6f1c      	ldr	r4, [r3, #112]	; 0x70
   15d8c:	42a1      	cmp	r1, r4
   15d8e:	f000 80b1 	beq.w	15ef4 <rpc_message_data_free+0x1f4>
   15d92:	6f9c      	ldr	r4, [r3, #120]	; 0x78
   15d94:	428c      	cmp	r4, r1
   15d96:	f000 80b4 	beq.w	15f02 <rpc_message_data_free+0x202>
   15d9a:	6913      	ldr	r3, [r2, #16]
   15d9c:	4608      	mov	r0, r1
   15d9e:	4798      	blx	r3
   15da0:	4b5e      	ldr	r3, [pc, #376]	; (15f1c <rpc_message_data_free+0x21c>)
   15da2:	781a      	ldrb	r2, [r3, #0]
   15da4:	2a04      	cmp	r2, #4
   15da6:	d03b      	beq.n	15e20 <rpc_message_data_free+0x120>
   15da8:	7a1a      	ldrb	r2, [r3, #8]
   15daa:	2a04      	cmp	r2, #4
   15dac:	d038      	beq.n	15e20 <rpc_message_data_free+0x120>
   15dae:	7c1a      	ldrb	r2, [r3, #16]
   15db0:	2a04      	cmp	r2, #4
   15db2:	d035      	beq.n	15e20 <rpc_message_data_free+0x120>
   15db4:	7e1a      	ldrb	r2, [r3, #24]
   15db6:	2a04      	cmp	r2, #4
   15db8:	d032      	beq.n	15e20 <rpc_message_data_free+0x120>
   15dba:	f893 2020 	ldrb.w	r2, [r3, #32]
   15dbe:	2a04      	cmp	r2, #4
   15dc0:	d02e      	beq.n	15e20 <rpc_message_data_free+0x120>
   15dc2:	f893 2028 	ldrb.w	r2, [r3, #40]	; 0x28
   15dc6:	2a04      	cmp	r2, #4
   15dc8:	d02a      	beq.n	15e20 <rpc_message_data_free+0x120>
   15dca:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
   15dce:	2a04      	cmp	r2, #4
   15dd0:	d026      	beq.n	15e20 <rpc_message_data_free+0x120>
   15dd2:	f893 2038 	ldrb.w	r2, [r3, #56]	; 0x38
   15dd6:	2a04      	cmp	r2, #4
   15dd8:	d022      	beq.n	15e20 <rpc_message_data_free+0x120>
   15dda:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
   15dde:	2a04      	cmp	r2, #4
   15de0:	d01e      	beq.n	15e20 <rpc_message_data_free+0x120>
   15de2:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
   15de6:	2a04      	cmp	r2, #4
   15de8:	d01a      	beq.n	15e20 <rpc_message_data_free+0x120>
   15dea:	f893 2050 	ldrb.w	r2, [r3, #80]	; 0x50
   15dee:	2a04      	cmp	r2, #4
   15df0:	d016      	beq.n	15e20 <rpc_message_data_free+0x120>
   15df2:	f893 2058 	ldrb.w	r2, [r3, #88]	; 0x58
   15df6:	2a04      	cmp	r2, #4
   15df8:	d012      	beq.n	15e20 <rpc_message_data_free+0x120>
   15dfa:	f893 2060 	ldrb.w	r2, [r3, #96]	; 0x60
   15dfe:	2a04      	cmp	r2, #4
   15e00:	d00e      	beq.n	15e20 <rpc_message_data_free+0x120>
   15e02:	f893 2068 	ldrb.w	r2, [r3, #104]	; 0x68
   15e06:	2a04      	cmp	r2, #4
   15e08:	d00a      	beq.n	15e20 <rpc_message_data_free+0x120>
   15e0a:	f893 2070 	ldrb.w	r2, [r3, #112]	; 0x70
   15e0e:	2a04      	cmp	r2, #4
   15e10:	d006      	beq.n	15e20 <rpc_message_data_free+0x120>
   15e12:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
   15e16:	2b04      	cmp	r3, #4
   15e18:	bf18      	it	ne
   15e1a:	2000      	movne	r0, #0
   15e1c:	d000      	beq.n	15e20 <rpc_message_data_free+0x120>
   15e1e:	bd38      	pop	{r3, r4, r5, pc}
   15e20:	f7f8 ff20 	bl	ec64 <bsd_os_application_irq_set>
   15e24:	2000      	movs	r0, #0
   15e26:	bd38      	pop	{r3, r4, r5, pc}
   15e28:	2007      	movs	r0, #7
   15e2a:	4770      	bx	lr
   15e2c:	2008      	movs	r0, #8
   15e2e:	bd38      	pop	{r3, r4, r5, pc}
   15e30:	889c      	ldrh	r4, [r3, #4]
   15e32:	4284      	cmp	r4, r0
   15e34:	f47f af75 	bne.w	15d22 <rpc_message_data_free+0x22>
   15e38:	2400      	movs	r4, #0
   15e3a:	2000      	movs	r0, #0
   15e3c:	eb03 05c4 	add.w	r5, r3, r4, lsl #3
   15e40:	f843 0034 	str.w	r0, [r3, r4, lsl #3]
   15e44:	80a8      	strh	r0, [r5, #4]
   15e46:	e7a8      	b.n	15d9a <rpc_message_data_free+0x9a>
   15e48:	899c      	ldrh	r4, [r3, #12]
   15e4a:	4284      	cmp	r4, r0
   15e4c:	f47f af6d 	bne.w	15d2a <rpc_message_data_free+0x2a>
   15e50:	2401      	movs	r4, #1
   15e52:	e7f2      	b.n	15e3a <rpc_message_data_free+0x13a>
   15e54:	8a9c      	ldrh	r4, [r3, #20]
   15e56:	4284      	cmp	r4, r0
   15e58:	f47f af6b 	bne.w	15d32 <rpc_message_data_free+0x32>
   15e5c:	2402      	movs	r4, #2
   15e5e:	e7ec      	b.n	15e3a <rpc_message_data_free+0x13a>
   15e60:	8b9c      	ldrh	r4, [r3, #28]
   15e62:	4284      	cmp	r4, r0
   15e64:	f47f af69 	bne.w	15d3a <rpc_message_data_free+0x3a>
   15e68:	2403      	movs	r4, #3
   15e6a:	e7e6      	b.n	15e3a <rpc_message_data_free+0x13a>
   15e6c:	8c9c      	ldrh	r4, [r3, #36]	; 0x24
   15e6e:	4284      	cmp	r4, r0
   15e70:	f47f af67 	bne.w	15d42 <rpc_message_data_free+0x42>
   15e74:	2404      	movs	r4, #4
   15e76:	e7e0      	b.n	15e3a <rpc_message_data_free+0x13a>
   15e78:	8d9c      	ldrh	r4, [r3, #44]	; 0x2c
   15e7a:	4284      	cmp	r4, r0
   15e7c:	f47f af65 	bne.w	15d4a <rpc_message_data_free+0x4a>
   15e80:	2405      	movs	r4, #5
   15e82:	e7da      	b.n	15e3a <rpc_message_data_free+0x13a>
   15e84:	8e9c      	ldrh	r4, [r3, #52]	; 0x34
   15e86:	4284      	cmp	r4, r0
   15e88:	f47f af63 	bne.w	15d52 <rpc_message_data_free+0x52>
   15e8c:	2406      	movs	r4, #6
   15e8e:	e7d4      	b.n	15e3a <rpc_message_data_free+0x13a>
   15e90:	8f9c      	ldrh	r4, [r3, #60]	; 0x3c
   15e92:	4284      	cmp	r4, r0
   15e94:	f47f af61 	bne.w	15d5a <rpc_message_data_free+0x5a>
   15e98:	2407      	movs	r4, #7
   15e9a:	e7ce      	b.n	15e3a <rpc_message_data_free+0x13a>
   15e9c:	f8b3 4044 	ldrh.w	r4, [r3, #68]	; 0x44
   15ea0:	4284      	cmp	r4, r0
   15ea2:	f47f af5e 	bne.w	15d62 <rpc_message_data_free+0x62>
   15ea6:	2408      	movs	r4, #8
   15ea8:	e7c7      	b.n	15e3a <rpc_message_data_free+0x13a>
   15eaa:	f8b3 404c 	ldrh.w	r4, [r3, #76]	; 0x4c
   15eae:	4284      	cmp	r4, r0
   15eb0:	f47f af5b 	bne.w	15d6a <rpc_message_data_free+0x6a>
   15eb4:	2409      	movs	r4, #9
   15eb6:	e7c0      	b.n	15e3a <rpc_message_data_free+0x13a>
   15eb8:	f8b3 4054 	ldrh.w	r4, [r3, #84]	; 0x54
   15ebc:	4284      	cmp	r4, r0
   15ebe:	f47f af58 	bne.w	15d72 <rpc_message_data_free+0x72>
   15ec2:	240a      	movs	r4, #10
   15ec4:	e7b9      	b.n	15e3a <rpc_message_data_free+0x13a>
   15ec6:	f8b3 405c 	ldrh.w	r4, [r3, #92]	; 0x5c
   15eca:	4284      	cmp	r4, r0
   15ecc:	f47f af55 	bne.w	15d7a <rpc_message_data_free+0x7a>
   15ed0:	240b      	movs	r4, #11
   15ed2:	e7b2      	b.n	15e3a <rpc_message_data_free+0x13a>
   15ed4:	200e      	movs	r0, #14
   15ed6:	4770      	bx	lr
   15ed8:	f8b3 4064 	ldrh.w	r4, [r3, #100]	; 0x64
   15edc:	4284      	cmp	r4, r0
   15ede:	f47f af50 	bne.w	15d82 <rpc_message_data_free+0x82>
   15ee2:	240c      	movs	r4, #12
   15ee4:	e7a9      	b.n	15e3a <rpc_message_data_free+0x13a>
   15ee6:	f8b3 406c 	ldrh.w	r4, [r3, #108]	; 0x6c
   15eea:	4284      	cmp	r4, r0
   15eec:	f47f af4d 	bne.w	15d8a <rpc_message_data_free+0x8a>
   15ef0:	240d      	movs	r4, #13
   15ef2:	e7a2      	b.n	15e3a <rpc_message_data_free+0x13a>
   15ef4:	f8b3 4074 	ldrh.w	r4, [r3, #116]	; 0x74
   15ef8:	4284      	cmp	r4, r0
   15efa:	f47f af4a 	bne.w	15d92 <rpc_message_data_free+0x92>
   15efe:	240e      	movs	r4, #14
   15f00:	e79b      	b.n	15e3a <rpc_message_data_free+0x13a>
   15f02:	f8b3 407c 	ldrh.w	r4, [r3, #124]	; 0x7c
   15f06:	4284      	cmp	r4, r0
   15f08:	bf08      	it	eq
   15f0a:	240f      	moveq	r4, #15
   15f0c:	f47f af45 	bne.w	15d9a <rpc_message_data_free+0x9a>
   15f10:	e793      	b.n	15e3a <rpc_message_data_free+0x13a>
   15f12:	bf00      	nop
   15f14:	20020680 	.word	0x20020680
   15f18:	20020698 	.word	0x20020698
   15f1c:	20020718 	.word	0x20020718

00015f20 <packet_free_cb>:
   15f20:	b510      	push	{r4, lr}
   15f22:	4604      	mov	r4, r0
   15f24:	b118      	cbz	r0, 15f2e <packet_free_cb+0xe>
   15f26:	6800      	ldr	r0, [r0, #0]
   15f28:	b108      	cbz	r0, 15f2e <packet_free_cb+0xe>
   15f2a:	f001 f82f 	bl	16f8c <rpc_gnss_client_data_free>
   15f2e:	68a0      	ldr	r0, [r4, #8]
   15f30:	b118      	cbz	r0, 15f3a <packet_free_cb+0x1a>
   15f32:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   15f36:	f7fa b919 	b.w	1016c <nrf_free>
   15f3a:	bd10      	pop	{r4, pc}

00015f3c <rpc_gnss_event_handler>:
   15f3c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   15f40:	4b64      	ldr	r3, [pc, #400]	; (160d4 <rpc_gnss_event_handler+0x198>)
   15f42:	4606      	mov	r6, r0
   15f44:	6800      	ldr	r0, [r0, #0]
   15f46:	881b      	ldrh	r3, [r3, #0]
   15f48:	6802      	ldr	r2, [r0, #0]
   15f4a:	4f63      	ldr	r7, [pc, #396]	; (160d8 <rpc_gnss_event_handler+0x19c>)
   15f4c:	ebb3 4f12 	cmp.w	r3, r2, lsr #16
   15f50:	b084      	sub	sp, #16
   15f52:	460d      	mov	r5, r1
   15f54:	6038      	str	r0, [r7, #0]
   15f56:	d038      	beq.n	15fca <rpc_gnss_event_handler+0x8e>
   15f58:	f505 433f 	add.w	r3, r5, #48896	; 0xbf00
   15f5c:	33ff      	adds	r3, #255	; 0xff
   15f5e:	b29b      	uxth	r3, r3
   15f60:	2b02      	cmp	r3, #2
   15f62:	d810      	bhi.n	15f86 <rpc_gnss_event_handler+0x4a>
   15f64:	4c5d      	ldr	r4, [pc, #372]	; (160dc <rpc_gnss_event_handler+0x1a0>)
   15f66:	6823      	ldr	r3, [r4, #0]
   15f68:	075a      	lsls	r2, r3, #29
   15f6a:	d410      	bmi.n	15f8e <rpc_gnss_event_handler+0x52>
   15f6c:	6823      	ldr	r3, [r4, #0]
   15f6e:	079b      	lsls	r3, r3, #30
   15f70:	d503      	bpl.n	15f7a <rpc_gnss_event_handler+0x3e>
   15f72:	f244 0303 	movw	r3, #16387	; 0x4003
   15f76:	429d      	cmp	r5, r3
   15f78:	d009      	beq.n	15f8e <rpc_gnss_event_handler+0x52>
   15f7a:	6830      	ldr	r0, [r6, #0]
   15f7c:	b118      	cbz	r0, 15f86 <rpc_gnss_event_handler+0x4a>
   15f7e:	f001 f805 	bl	16f8c <rpc_gnss_client_data_free>
   15f82:	2300      	movs	r3, #0
   15f84:	603b      	str	r3, [r7, #0]
   15f86:	2000      	movs	r0, #0
   15f88:	b004      	add	sp, #16
   15f8a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   15f8e:	2002      	movs	r0, #2
   15f90:	f7fa f8e2 	bl	10158 <nrf_malloc>
   15f94:	4680      	mov	r8, r0
   15f96:	2800      	cmp	r0, #0
   15f98:	f000 8093 	beq.w	160c2 <rpc_gnss_event_handler+0x186>
   15f9c:	2302      	movs	r3, #2
   15f9e:	8005      	strh	r5, [r0, #0]
   15fa0:	6831      	ldr	r1, [r6, #0]
   15fa2:	6872      	ldr	r2, [r6, #4]
   15fa4:	484e      	ldr	r0, [pc, #312]	; (160e0 <rpc_gnss_event_handler+0x1a4>)
   15fa6:	e88d 0106 	stmia.w	sp, {r1, r2, r8}
   15faa:	6800      	ldr	r0, [r0, #0]
   15fac:	9303      	str	r3, [sp, #12]
   15fae:	6803      	ldr	r3, [r0, #0]
   15fb0:	4669      	mov	r1, sp
   15fb2:	685b      	ldr	r3, [r3, #4]
   15fb4:	4798      	blx	r3
   15fb6:	3001      	adds	r0, #1
   15fb8:	d070      	beq.n	1609c <rpc_gnss_event_handler+0x160>
   15fba:	2000      	movs	r0, #0
   15fbc:	6823      	ldr	r3, [r4, #0]
   15fbe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   15fc2:	6023      	str	r3, [r4, #0]
   15fc4:	b004      	add	sp, #16
   15fc6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   15fca:	4c44      	ldr	r4, [pc, #272]	; (160dc <rpc_gnss_event_handler+0x1a0>)
   15fcc:	6823      	ldr	r3, [r4, #0]
   15fce:	01d9      	lsls	r1, r3, #7
   15fd0:	d523      	bpl.n	1601a <rpc_gnss_event_handler+0xde>
   15fd2:	f242 1302 	movw	r3, #8450	; 0x2102
   15fd6:	429d      	cmp	r5, r3
   15fd8:	d11f      	bne.n	1601a <rpc_gnss_event_handler+0xde>
   15fda:	6843      	ldr	r3, [r0, #4]
   15fdc:	b91b      	cbnz	r3, 15fe6 <rpc_gnss_event_handler+0xaa>
   15fde:	6823      	ldr	r3, [r4, #0]
   15fe0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
   15fe4:	6023      	str	r3, [r4, #0]
   15fe6:	6823      	ldr	r3, [r4, #0]
   15fe8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
   15fec:	6023      	str	r3, [r4, #0]
   15fee:	6823      	ldr	r3, [r4, #0]
   15ff0:	025a      	lsls	r2, r3, #9
   15ff2:	d430      	bmi.n	16056 <rpc_gnss_event_handler+0x11a>
   15ff4:	f242 0305 	movw	r3, #8197	; 0x2005
   15ff8:	429d      	cmp	r5, r3
   15ffa:	d12c      	bne.n	16056 <rpc_gnss_event_handler+0x11a>
   15ffc:	6823      	ldr	r3, [r4, #0]
   15ffe:	0299      	lsls	r1, r3, #10
   16000:	d529      	bpl.n	16056 <rpc_gnss_event_handler+0x11a>
   16002:	6843      	ldr	r3, [r0, #4]
   16004:	2b00      	cmp	r3, #0
   16006:	d157      	bne.n	160b8 <rpc_gnss_event_handler+0x17c>
   16008:	6823      	ldr	r3, [r4, #0]
   1600a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
   1600e:	6023      	str	r3, [r4, #0]
   16010:	6823      	ldr	r3, [r4, #0]
   16012:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   16016:	6023      	str	r3, [r4, #0]
   16018:	e01d      	b.n	16056 <rpc_gnss_event_handler+0x11a>
   1601a:	6823      	ldr	r3, [r4, #0]
   1601c:	025b      	lsls	r3, r3, #9
   1601e:	d50e      	bpl.n	1603e <rpc_gnss_event_handler+0x102>
   16020:	f242 1303 	movw	r3, #8451	; 0x2103
   16024:	429d      	cmp	r5, r3
   16026:	d10a      	bne.n	1603e <rpc_gnss_event_handler+0x102>
   16028:	6843      	ldr	r3, [r0, #4]
   1602a:	b91b      	cbnz	r3, 16034 <rpc_gnss_event_handler+0xf8>
   1602c:	6823      	ldr	r3, [r4, #0]
   1602e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
   16032:	6023      	str	r3, [r4, #0]
   16034:	6823      	ldr	r3, [r4, #0]
   16036:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
   1603a:	6023      	str	r3, [r4, #0]
   1603c:	e00b      	b.n	16056 <rpc_gnss_event_handler+0x11a>
   1603e:	f242 0301 	movw	r3, #8193	; 0x2001
   16042:	429d      	cmp	r5, r3
   16044:	d10c      	bne.n	16060 <rpc_gnss_event_handler+0x124>
   16046:	6843      	ldr	r3, [r0, #4]
   16048:	b92b      	cbnz	r3, 16056 <rpc_gnss_event_handler+0x11a>
   1604a:	6823      	ldr	r3, [r4, #0]
   1604c:	0c1b      	lsrs	r3, r3, #16
   1604e:	041b      	lsls	r3, r3, #16
   16050:	f043 0302 	orr.w	r3, r3, #2
   16054:	6023      	str	r3, [r4, #0]
   16056:	f000 ff99 	bl	16f8c <rpc_gnss_client_data_free>
   1605a:	2300      	movs	r3, #0
   1605c:	603b      	str	r3, [r7, #0]
   1605e:	e77b      	b.n	15f58 <rpc_gnss_event_handler+0x1c>
   16060:	f242 0304 	movw	r3, #8196	; 0x2004
   16064:	429d      	cmp	r5, r3
   16066:	d1c5      	bne.n	15ff4 <rpc_gnss_event_handler+0xb8>
   16068:	6843      	ldr	r3, [r0, #4]
   1606a:	b993      	cbnz	r3, 16092 <rpc_gnss_event_handler+0x156>
   1606c:	6823      	ldr	r3, [r4, #0]
   1606e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
   16072:	6023      	str	r3, [r4, #0]
   16074:	6823      	ldr	r3, [r4, #0]
   16076:	b29b      	uxth	r3, r3
   16078:	2b03      	cmp	r3, #3
   1607a:	6823      	ldr	r3, [r4, #0]
   1607c:	d016      	beq.n	160ac <rpc_gnss_event_handler+0x170>
   1607e:	b29b      	uxth	r3, r3
   16080:	2b04      	cmp	r3, #4
   16082:	d1d7      	bne.n	16034 <rpc_gnss_event_handler+0xf8>
   16084:	6823      	ldr	r3, [r4, #0]
   16086:	0c1b      	lsrs	r3, r3, #16
   16088:	041b      	lsls	r3, r3, #16
   1608a:	f043 0302 	orr.w	r3, r3, #2
   1608e:	6023      	str	r3, [r4, #0]
   16090:	e7d0      	b.n	16034 <rpc_gnss_event_handler+0xf8>
   16092:	6823      	ldr	r3, [r4, #0]
   16094:	b29b      	uxth	r3, r3
   16096:	2b03      	cmp	r3, #3
   16098:	d1cc      	bne.n	16034 <rpc_gnss_event_handler+0xf8>
   1609a:	e7f3      	b.n	16084 <rpc_gnss_event_handler+0x148>
   1609c:	4640      	mov	r0, r8
   1609e:	f7fa f865 	bl	1016c <nrf_free>
   160a2:	6830      	ldr	r0, [r6, #0]
   160a4:	2800      	cmp	r0, #0
   160a6:	f47f af6a 	bne.w	15f7e <rpc_gnss_event_handler+0x42>
   160aa:	e76c      	b.n	15f86 <rpc_gnss_event_handler+0x4a>
   160ac:	0c1b      	lsrs	r3, r3, #16
   160ae:	041b      	lsls	r3, r3, #16
   160b0:	f043 0304 	orr.w	r3, r3, #4
   160b4:	6023      	str	r3, [r4, #0]
   160b6:	e7bd      	b.n	16034 <rpc_gnss_event_handler+0xf8>
   160b8:	6823      	ldr	r3, [r4, #0]
   160ba:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
   160be:	6023      	str	r3, [r4, #0]
   160c0:	e7c9      	b.n	16056 <rpc_gnss_event_handler+0x11a>
   160c2:	6830      	ldr	r0, [r6, #0]
   160c4:	2800      	cmp	r0, #0
   160c6:	f43f af5e 	beq.w	15f86 <rpc_gnss_event_handler+0x4a>
   160ca:	f000 ff5f 	bl	16f8c <rpc_gnss_client_data_free>
   160ce:	f8c7 8000 	str.w	r8, [r7]
   160d2:	e758      	b.n	15f86 <rpc_gnss_event_handler+0x4a>
   160d4:	200249c8 	.word	0x200249c8
   160d8:	2002079c 	.word	0x2002079c
   160dc:	20020798 	.word	0x20020798
   160e0:	200207a0 	.word	0x200207a0

000160e4 <gnss_interface_write>:
   160e4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   160e8:	4a74      	ldr	r2, [pc, #464]	; (162bc <gnss_interface_write+0x1d8>)
   160ea:	b09f      	sub	sp, #124	; 0x7c
   160ec:	4290      	cmp	r0, r2
   160ee:	9d26      	ldr	r5, [sp, #152]	; 0x98
   160f0:	f040 80d7 	bne.w	162a2 <gnss_interface_write+0x1be>
   160f4:	2900      	cmp	r1, #0
   160f6:	f000 80c6 	beq.w	16286 <gnss_interface_write+0x1a2>
   160fa:	2d00      	cmp	r5, #0
   160fc:	f000 80c3 	beq.w	16286 <gnss_interface_write+0x1a2>
   16100:	9a27      	ldr	r2, [sp, #156]	; 0x9c
   16102:	2a02      	cmp	r2, #2
   16104:	f040 80bf 	bne.w	16286 <gnss_interface_write+0x1a2>
   16108:	4c6d      	ldr	r4, [pc, #436]	; (162c0 <gnss_interface_write+0x1dc>)
   1610a:	6822      	ldr	r2, [r4, #0]
   1610c:	b292      	uxth	r2, r2
   1610e:	2a02      	cmp	r2, #2
   16110:	d004      	beq.n	1611c <gnss_interface_write+0x38>
   16112:	6822      	ldr	r2, [r4, #0]
   16114:	b292      	uxth	r2, r2
   16116:	2a04      	cmp	r2, #4
   16118:	f040 80bd 	bne.w	16296 <gnss_interface_write+0x1b2>
   1611c:	2b00      	cmp	r3, #0
   1611e:	f040 80c6 	bne.w	162ae <gnss_interface_write+0x1ca>
   16122:	6822      	ldr	r2, [r4, #0]
   16124:	0390      	lsls	r0, r2, #14
   16126:	d512      	bpl.n	1614e <gnss_interface_write+0x6a>
   16128:	6822      	ldr	r2, [r4, #0]
   1612a:	882b      	ldrh	r3, [r5, #0]
   1612c:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
   16130:	6022      	str	r2, [r4, #0]
   16132:	6822      	ldr	r2, [r4, #0]
   16134:	3b01      	subs	r3, #1
   16136:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
   1613a:	6022      	str	r2, [r4, #0]
   1613c:	2b07      	cmp	r3, #7
   1613e:	f200 80a2 	bhi.w	16286 <gnss_interface_write+0x1a2>
   16142:	e8df f003 	tbb	[pc, r3]
   16146:	7d82      	.short	0x7d82
   16148:	646e7378 	.word	0x646e7378
   1614c:	0869      	.short	0x0869
   1614e:	2000      	movs	r0, #0
   16150:	b01f      	add	sp, #124	; 0x7c
   16152:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   16156:	4608      	mov	r0, r1
   16158:	a902      	add	r1, sp, #8
   1615a:	f000 fecb 	bl	16ef4 <rpc_gnss_serialize_integrity>
   1615e:	2172      	movs	r1, #114	; 0x72
   16160:	4668      	mov	r0, sp
   16162:	f000 fee1 	bl	16f28 <rpc_gnss_client_request_alloc>
   16166:	4605      	mov	r5, r0
   16168:	9800      	ldr	r0, [sp, #0]
   1616a:	2d00      	cmp	r5, #0
   1616c:	d172      	bne.n	16254 <gnss_interface_write+0x170>
   1616e:	2800      	cmp	r0, #0
   16170:	d077      	beq.n	16262 <gnss_interface_write+0x17e>
   16172:	f241 0605 	movw	r6, #4101	; 0x1005
   16176:	f04f 0c49 	mov.w	ip, #73	; 0x49
   1617a:	2272      	movs	r2, #114	; 0x72
   1617c:	f04f 0e76 	mov.w	lr, #118	; 0x76
   16180:	f04f 0943 	mov.w	r9, #67	; 0x43
   16184:	f04f 0854 	mov.w	r8, #84	; 0x54
   16188:	4f4e      	ldr	r7, [pc, #312]	; (162c4 <gnss_interface_write+0x1e0>)
   1618a:	a91e      	add	r1, sp, #120	; 0x78
   1618c:	883b      	ldrh	r3, [r7, #0]
   1618e:	f880 c00f 	strb.w	ip, [r0, #15]
   16192:	3301      	adds	r3, #1
   16194:	b29b      	uxth	r3, r3
   16196:	ea46 4c03 	orr.w	ip, r6, r3, lsl #16
   1619a:	f841 cd74 	str.w	ip, [r1, #-116]!
   1619e:	7145      	strb	r5, [r0, #5]
   161a0:	7185      	strb	r5, [r0, #6]
   161a2:	71c5      	strb	r5, [r0, #7]
   161a4:	7205      	strb	r5, [r0, #8]
   161a6:	7245      	strb	r5, [r0, #9]
   161a8:	7285      	strb	r5, [r0, #10]
   161aa:	72c5      	strb	r5, [r0, #11]
   161ac:	7102      	strb	r2, [r0, #4]
   161ae:	f880 900c 	strb.w	r9, [r0, #12]
   161b2:	f880 800d 	strb.w	r8, [r0, #13]
   161b6:	f880 e00e 	strb.w	lr, [r0, #14]
   161ba:	6800      	ldr	r0, [r0, #0]
   161bc:	803b      	strh	r3, [r7, #0]
   161be:	f003 fb77 	bl	198b0 <memcpy>
   161c2:	4b41      	ldr	r3, [pc, #260]	; (162c8 <gnss_interface_write+0x1e4>)
   161c4:	4631      	mov	r1, r6
   161c6:	9800      	ldr	r0, [sp, #0]
   161c8:	601d      	str	r5, [r3, #0]
   161ca:	f000 fec1 	bl	16f50 <rpc_gnss_client_request_send>
   161ce:	2800      	cmp	r0, #0
   161d0:	d14e      	bne.n	16270 <gnss_interface_write+0x18c>
   161d2:	6823      	ldr	r3, [r4, #0]
   161d4:	0299      	lsls	r1, r3, #10
   161d6:	d50b      	bpl.n	161f0 <gnss_interface_write+0x10c>
   161d8:	4e3c      	ldr	r6, [pc, #240]	; (162cc <gnss_interface_write+0x1e8>)
   161da:	4d38      	ldr	r5, [pc, #224]	; (162bc <gnss_interface_write+0x1d8>)
   161dc:	e000      	b.n	161e0 <gnss_interface_write+0xfc>
   161de:	b978      	cbnz	r0, 16200 <gnss_interface_write+0x11c>
   161e0:	4631      	mov	r1, r6
   161e2:	4628      	mov	r0, r5
   161e4:	f7f8 fbf0 	bl	e9c8 <bsd_os_timedwait>
   161e8:	6823      	ldr	r3, [r4, #0]
   161ea:	029a      	lsls	r2, r3, #10
   161ec:	d4f7      	bmi.n	161de <gnss_interface_write+0xfa>
   161ee:	b938      	cbnz	r0, 16200 <gnss_interface_write+0x11c>
   161f0:	6823      	ldr	r3, [r4, #0]
   161f2:	039b      	lsls	r3, r3, #14
   161f4:	d4ab      	bmi.n	1614e <gnss_interface_write+0x6a>
   161f6:	2005      	movs	r0, #5
   161f8:	6823      	ldr	r3, [r4, #0]
   161fa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   161fe:	6023      	str	r3, [r4, #0]
   16200:	f7f8 fc76 	bl	eaf0 <bsd_os_errno_set>
   16204:	f04f 30ff 	mov.w	r0, #4294967295
   16208:	b01f      	add	sp, #124	; 0x7c
   1620a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   1620e:	4608      	mov	r0, r1
   16210:	a902      	add	r1, sp, #8
   16212:	f000 fe27 	bl	16e64 <rpc_gnss_serialize_time_and_sv_tow>
   16216:	e7a2      	b.n	1615e <gnss_interface_write+0x7a>
   16218:	4608      	mov	r0, r1
   1621a:	a902      	add	r1, sp, #8
   1621c:	f000 fe4a 	bl	16eb4 <rpc_gnss_serialize_location>
   16220:	e79d      	b.n	1615e <gnss_interface_write+0x7a>
   16222:	4608      	mov	r0, r1
   16224:	a902      	add	r1, sp, #8
   16226:	f000 fe03 	bl	16e30 <rpc_gnss_serialize_nequick>
   1622a:	e798      	b.n	1615e <gnss_interface_write+0x7a>
   1622c:	4608      	mov	r0, r1
   1622e:	a902      	add	r1, sp, #8
   16230:	f000 fdda 	bl	16de8 <rpc_gnss_serialize_klob>
   16234:	e793      	b.n	1615e <gnss_interface_write+0x7a>
   16236:	4608      	mov	r0, r1
   16238:	a902      	add	r1, sp, #8
   1623a:	f000 fda3 	bl	16d84 <rpc_gnss_serialize_alm>
   1623e:	e78e      	b.n	1615e <gnss_interface_write+0x7a>
   16240:	4608      	mov	r0, r1
   16242:	a902      	add	r1, sp, #8
   16244:	f000 fd4c 	bl	16ce0 <rpc_gnss_serialize_ephe>
   16248:	e789      	b.n	1615e <gnss_interface_write+0x7a>
   1624a:	4608      	mov	r0, r1
   1624c:	a902      	add	r1, sp, #8
   1624e:	f000 fd25 	bl	16c9c <rpc_gnss_serialize_utc>
   16252:	e784      	b.n	1615e <gnss_interface_write+0x7a>
   16254:	b128      	cbz	r0, 16262 <gnss_interface_write+0x17e>
   16256:	6803      	ldr	r3, [r0, #0]
   16258:	b11b      	cbz	r3, 16262 <gnss_interface_write+0x17e>
   1625a:	4618      	mov	r0, r3
   1625c:	f000 fe96 	bl	16f8c <rpc_gnss_client_data_free>
   16260:	9800      	ldr	r0, [sp, #0]
   16262:	f000 fe8b 	bl	16f7c <rpc_gnss_client_message_free>
   16266:	2023      	movs	r0, #35	; 0x23
   16268:	f7f8 fc42 	bl	eaf0 <bsd_os_errno_set>
   1626c:	f04f 30ff 	mov.w	r0, #4294967295
   16270:	6823      	ldr	r3, [r4, #0]
   16272:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
   16276:	6023      	str	r3, [r4, #0]
   16278:	6823      	ldr	r3, [r4, #0]
   1627a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   1627e:	6023      	str	r3, [r4, #0]
   16280:	b01f      	add	sp, #124	; 0x7c
   16282:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   16286:	2016      	movs	r0, #22
   16288:	f7f8 fc32 	bl	eaf0 <bsd_os_errno_set>
   1628c:	f04f 30ff 	mov.w	r0, #4294967295
   16290:	b01f      	add	sp, #124	; 0x7c
   16292:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   16296:	2039      	movs	r0, #57	; 0x39
   16298:	f7f8 fc2a 	bl	eaf0 <bsd_os_errno_set>
   1629c:	f04f 30ff 	mov.w	r0, #4294967295
   162a0:	e756      	b.n	16150 <gnss_interface_write+0x6c>
   162a2:	2009      	movs	r0, #9
   162a4:	f7f8 fc24 	bl	eaf0 <bsd_os_errno_set>
   162a8:	f04f 30ff 	mov.w	r0, #4294967295
   162ac:	e750      	b.n	16150 <gnss_interface_write+0x6c>
   162ae:	202d      	movs	r0, #45	; 0x2d
   162b0:	f7f8 fc1e 	bl	eaf0 <bsd_os_errno_set>
   162b4:	f04f 30ff 	mov.w	r0, #4294967295
   162b8:	e74a      	b.n	16150 <gnss_interface_write+0x6c>
   162ba:	bf00      	nop
   162bc:	49765443 	.word	0x49765443
   162c0:	20020798 	.word	0x20020798
   162c4:	200249c8 	.word	0x200249c8
   162c8:	2002079c 	.word	0x2002079c
   162cc:	20026060 	.word	0x20026060

000162d0 <gnss_interface_read>:
   162d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   162d4:	4c50      	ldr	r4, [pc, #320]	; (16418 <gnss_interface_read+0x148>)
   162d6:	b0b7      	sub	sp, #220	; 0xdc
   162d8:	42a0      	cmp	r0, r4
   162da:	f040 81fe 	bne.w	166da <gnss_interface_read+0x40a>
   162de:	4688      	mov	r8, r1
   162e0:	2900      	cmp	r1, #0
   162e2:	f000 81f4 	beq.w	166ce <gnss_interface_read+0x3fe>
   162e6:	2ad7      	cmp	r2, #215	; 0xd7
   162e8:	f240 81f1 	bls.w	166ce <gnss_interface_read+0x3fe>
   162ec:	4d4b      	ldr	r5, [pc, #300]	; (1641c <gnss_interface_read+0x14c>)
   162ee:	4699      	mov	r9, r3
   162f0:	682b      	ldr	r3, [r5, #0]
   162f2:	b29b      	uxth	r3, r3
   162f4:	2b04      	cmp	r3, #4
   162f6:	d004      	beq.n	16302 <gnss_interface_read+0x32>
   162f8:	682b      	ldr	r3, [r5, #0]
   162fa:	b29b      	uxth	r3, r3
   162fc:	2b02      	cmp	r3, #2
   162fe:	f040 81e0 	bne.w	166c2 <gnss_interface_read+0x3f2>
   16302:	f1b9 0f00 	cmp.w	r9, #0
   16306:	d158      	bne.n	163ba <gnss_interface_read+0xea>
   16308:	2102      	movs	r1, #2
   1630a:	20b6      	movs	r0, #182	; 0xb6
   1630c:	2400      	movs	r4, #0
   1630e:	682b      	ldr	r3, [r5, #0]
   16310:	f10d 020e 	add.w	r2, sp, #14
   16314:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
   16318:	602b      	str	r3, [r5, #0]
   1631a:	f8df a108 	ldr.w	sl, [pc, #264]	; 16424 <gnss_interface_read+0x154>
   1631e:	ab08      	add	r3, sp, #32
   16320:	4f3f      	ldr	r7, [pc, #252]	; (16420 <gnss_interface_read+0x150>)
   16322:	4e3d      	ldr	r6, [pc, #244]	; (16418 <gnss_interface_read+0x148>)
   16324:	9005      	str	r0, [sp, #20]
   16326:	9107      	str	r1, [sp, #28]
   16328:	9304      	str	r3, [sp, #16]
   1632a:	9206      	str	r2, [sp, #24]
   1632c:	ea09 0b01 	and.w	fp, r9, r1
   16330:	f8da 0000 	ldr.w	r0, [sl]
   16334:	464a      	mov	r2, r9
   16336:	6803      	ldr	r3, [r0, #0]
   16338:	a904      	add	r1, sp, #16
   1633a:	689b      	ldr	r3, [r3, #8]
   1633c:	4798      	blx	r3
   1633e:	2800      	cmp	r0, #0
   16340:	da11      	bge.n	16366 <gnss_interface_read+0x96>
   16342:	f1bb 0f00 	cmp.w	fp, #0
   16346:	d141      	bne.n	163cc <gnss_interface_read+0xfc>
   16348:	682b      	ldr	r3, [r5, #0]
   1634a:	03d8      	lsls	r0, r3, #15
   1634c:	d4f0      	bmi.n	16330 <gnss_interface_read+0x60>
   1634e:	b10c      	cbz	r4, 16354 <gnss_interface_read+0x84>
   16350:	e7ee      	b.n	16330 <gnss_interface_read+0x60>
   16352:	b930      	cbnz	r0, 16362 <gnss_interface_read+0x92>
   16354:	4639      	mov	r1, r7
   16356:	4630      	mov	r0, r6
   16358:	f7f8 fb36 	bl	e9c8 <bsd_os_timedwait>
   1635c:	682b      	ldr	r3, [r5, #0]
   1635e:	03d9      	lsls	r1, r3, #15
   16360:	d5f7      	bpl.n	16352 <gnss_interface_read+0x82>
   16362:	4604      	mov	r4, r0
   16364:	e7e4      	b.n	16330 <gnss_interface_read+0x60>
   16366:	f244 0202 	movw	r2, #16386	; 0x4002
   1636a:	f8bd 300e 	ldrh.w	r3, [sp, #14]
   1636e:	4293      	cmp	r3, r2
   16370:	d042      	beq.n	163f8 <gnss_interface_read+0x128>
   16372:	f244 0201 	movw	r2, #16385	; 0x4001
   16376:	4293      	cmp	r3, r2
   16378:	d056      	beq.n	16428 <gnss_interface_read+0x158>
   1637a:	f244 0203 	movw	r2, #16387	; 0x4003
   1637e:	4293      	cmp	r3, r2
   16380:	f040 81a5 	bne.w	166ce <gnss_interface_read+0x3fe>
   16384:	2203      	movs	r2, #3
   16386:	2414      	movs	r4, #20
   16388:	9b08      	ldr	r3, [sp, #32]
   1638a:	f888 2000 	strb.w	r2, [r8]
   1638e:	9a09      	ldr	r2, [sp, #36]	; 0x24
   16390:	f8c8 3008 	str.w	r3, [r8, #8]
   16394:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
   16398:	e9c8 2303 	strd	r2, r3, [r8, #12]
   1639c:	f8da 0000 	ldr.w	r0, [sl]
   163a0:	6803      	ldr	r3, [r0, #0]
   163a2:	68db      	ldr	r3, [r3, #12]
   163a4:	4798      	blx	r3
   163a6:	2800      	cmp	r0, #0
   163a8:	dd03      	ble.n	163b2 <gnss_interface_read+0xe2>
   163aa:	682b      	ldr	r3, [r5, #0]
   163ac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   163b0:	602b      	str	r3, [r5, #0]
   163b2:	4620      	mov	r0, r4
   163b4:	b037      	add	sp, #220	; 0xdc
   163b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   163ba:	f019 0f0a 	tst.w	r9, #10
   163be:	d1a3      	bne.n	16308 <gnss_interface_read+0x38>
   163c0:	202d      	movs	r0, #45	; 0x2d
   163c2:	f7f8 fb95 	bl	eaf0 <bsd_os_errno_set>
   163c6:	f04f 34ff 	mov.w	r4, #4294967295
   163ca:	e7f2      	b.n	163b2 <gnss_interface_read+0xe2>
   163cc:	1c42      	adds	r2, r0, #1
   163ce:	4603      	mov	r3, r0
   163d0:	d1c9      	bne.n	16366 <gnss_interface_read+0x96>
   163d2:	b93c      	cbnz	r4, 163e4 <gnss_interface_read+0x114>
   163d4:	461c      	mov	r4, r3
   163d6:	2023      	movs	r0, #35	; 0x23
   163d8:	f7f8 fb8a 	bl	eaf0 <bsd_os_errno_set>
   163dc:	4620      	mov	r0, r4
   163de:	b037      	add	sp, #220	; 0xdc
   163e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   163e4:	9001      	str	r0, [sp, #4]
   163e6:	4620      	mov	r0, r4
   163e8:	f7f8 fb82 	bl	eaf0 <bsd_os_errno_set>
   163ec:	9b01      	ldr	r3, [sp, #4]
   163ee:	461c      	mov	r4, r3
   163f0:	4620      	mov	r0, r4
   163f2:	b037      	add	sp, #220	; 0xdc
   163f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   163f8:	a808      	add	r0, sp, #32
   163fa:	f003 fa27 	bl	1984c <strlen>
   163fe:	2302      	movs	r3, #2
   16400:	1c44      	adds	r4, r0, #1
   16402:	b2a4      	uxth	r4, r4
   16404:	f808 3b08 	strb.w	r3, [r8], #8
   16408:	4622      	mov	r2, r4
   1640a:	a908      	add	r1, sp, #32
   1640c:	4640      	mov	r0, r8
   1640e:	f003 fa4f 	bl	198b0 <memcpy>
   16412:	3408      	adds	r4, #8
   16414:	e7c2      	b.n	1639c <gnss_interface_read+0xcc>
   16416:	bf00      	nop
   16418:	49765443 	.word	0x49765443
   1641c:	20020798 	.word	0x20020798
   16420:	20026060 	.word	0x20026060
   16424:	200207a0 	.word	0x200207a0
   16428:	2401      	movs	r4, #1
   1642a:	a809      	add	r0, sp, #36	; 0x24
   1642c:	c80f      	ldmia	r0, {r0, r1, r2, r3}
   1642e:	e9c8 0102 	strd	r0, r1, [r8, #8]
   16432:	e9c8 2304 	strd	r2, r3, [r8, #16]
   16436:	990d      	ldr	r1, [sp, #52]	; 0x34
   16438:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   1643a:	f888 4000 	strb.w	r4, [r8]
   1643e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   16440:	f8c8 1018 	str.w	r1, [r8, #24]
   16444:	9910      	ldr	r1, [sp, #64]	; 0x40
   16446:	f8c8 201c 	str.w	r2, [r8, #28]
   1644a:	f8c8 3020 	str.w	r3, [r8, #32]
   1644e:	f89d 205d 	ldrb.w	r2, [sp, #93]	; 0x5d
   16452:	f8dd 304d 	ldr.w	r3, [sp, #77]	; 0x4d
   16456:	f8c8 1024 	str.w	r1, [r8, #36]	; 0x24
   1645a:	f8dd 1051 	ldr.w	r1, [sp, #81]	; 0x51
   1645e:	f888 2044 	strb.w	r2, [r8, #68]	; 0x44
   16462:	f8dd 2055 	ldr.w	r2, [sp, #85]	; 0x55
   16466:	f8c8 3034 	str.w	r3, [r8, #52]	; 0x34
   1646a:	f8dd 3059 	ldr.w	r3, [sp, #89]	; 0x59
   1646e:	f8c8 1038 	str.w	r1, [r8, #56]	; 0x38
   16472:	f8bd 1044 	ldrh.w	r1, [sp, #68]	; 0x44
   16476:	f8c8 203c 	str.w	r2, [r8, #60]	; 0x3c
   1647a:	f8c8 3040 	str.w	r3, [r8, #64]	; 0x40
   1647e:	f8dd 2046 	ldr.w	r2, [sp, #70]	; 0x46
   16482:	f89d 304a 	ldrb.w	r3, [sp, #74]	; 0x4a
   16486:	f8a8 1028 	strh.w	r1, [r8, #40]	; 0x28
   1648a:	f888 302e 	strb.w	r3, [r8, #46]	; 0x2e
   1648e:	f8c8 202a 	str.w	r2, [r8, #42]	; 0x2a
   16492:	f89d 004b 	ldrb.w	r0, [sp, #75]	; 0x4b
   16496:	f89d 204c 	ldrb.w	r2, [sp, #76]	; 0x4c
   1649a:	9b18      	ldr	r3, [sp, #96]	; 0x60
   1649c:	f89d 406c 	ldrb.w	r4, [sp, #108]	; 0x6c
   164a0:	ea40 2002 	orr.w	r0, r0, r2, lsl #8
   164a4:	f89d 206b 	ldrb.w	r2, [sp, #107]	; 0x6b
   164a8:	f3c3 210f 	ubfx	r1, r3, #8, #16
   164ac:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   164ae:	ea42 2204 	orr.w	r2, r2, r4, lsl #8
   164b2:	f8a8 0030 	strh.w	r0, [r8, #48]	; 0x30
   164b6:	f8a8 104a 	strh.w	r1, [r8, #74]	; 0x4a
   164ba:	f8bd 105e 	ldrh.w	r1, [sp, #94]	; 0x5e
   164be:	f3c3 230f 	ubfx	r3, r3, #8, #16
   164c2:	f8a8 2056 	strh.w	r2, [r8, #86]	; 0x56
   164c6:	f89d 2060 	ldrb.w	r2, [sp, #96]	; 0x60
   164ca:	f8a8 3062 	strh.w	r3, [r8, #98]	; 0x62
   164ce:	f8dd 3063 	ldr.w	r3, [sp, #99]	; 0x63
   164d2:	f8a8 1046 	strh.w	r1, [r8, #70]	; 0x46
   164d6:	f888 2048 	strb.w	r2, [r8, #72]	; 0x48
   164da:	f8bd 2068 	ldrh.w	r2, [sp, #104]	; 0x68
   164de:	f89d 1067 	ldrb.w	r1, [sp, #103]	; 0x67
   164e2:	f8c8 304c 	str.w	r3, [r8, #76]	; 0x4c
   164e6:	f89d 306a 	ldrb.w	r3, [sp, #106]	; 0x6a
   164ea:	f888 1050 	strb.w	r1, [r8, #80]	; 0x50
   164ee:	f8a8 2052 	strh.w	r2, [r8, #82]	; 0x52
   164f2:	f888 3054 	strb.w	r3, [r8, #84]	; 0x54
   164f6:	f8bd 3072 	ldrh.w	r3, [sp, #114]	; 0x72
   164fa:	f8dd 106d 	ldr.w	r1, [sp, #109]	; 0x6d
   164fe:	f89d 2071 	ldrb.w	r2, [sp, #113]	; 0x71
   16502:	f8c8 1058 	str.w	r1, [r8, #88]	; 0x58
   16506:	f888 205c 	strb.w	r2, [r8, #92]	; 0x5c
   1650a:	f89d 1074 	ldrb.w	r1, [sp, #116]	; 0x74
   1650e:	f8dd 2077 	ldr.w	r2, [sp, #119]	; 0x77
   16512:	f8a8 305e 	strh.w	r3, [r8, #94]	; 0x5e
   16516:	f89d 307b 	ldrb.w	r3, [sp, #123]	; 0x7b
   1651a:	f888 1060 	strb.w	r1, [r8, #96]	; 0x60
   1651e:	f8c8 2064 	str.w	r2, [r8, #100]	; 0x64
   16522:	f888 3068 	strb.w	r3, [r8, #104]	; 0x68
   16526:	f89d 3080 	ldrb.w	r3, [sp, #128]	; 0x80
   1652a:	f89d 107f 	ldrb.w	r1, [sp, #127]	; 0x7f
   1652e:	9a22      	ldr	r2, [sp, #136]	; 0x88
   16530:	f89d 0094 	ldrb.w	r0, [sp, #148]	; 0x94
   16534:	ea41 2103 	orr.w	r1, r1, r3, lsl #8
   16538:	f89d 3093 	ldrb.w	r3, [sp, #147]	; 0x93
   1653c:	f3c2 220f 	ubfx	r2, r2, #8, #16
   16540:	f8a8 106e 	strh.w	r1, [r8, #110]	; 0x6e
   16544:	f8bd 107c 	ldrh.w	r1, [sp, #124]	; 0x7c
   16548:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
   1654c:	f8a8 207a 	strh.w	r2, [r8, #122]	; 0x7a
   16550:	f89d 207e 	ldrb.w	r2, [sp, #126]	; 0x7e
   16554:	f8a8 3086 	strh.w	r3, [r8, #134]	; 0x86
   16558:	f8dd 3081 	ldr.w	r3, [sp, #129]	; 0x81
   1655c:	f8a8 106a 	strh.w	r1, [r8, #106]	; 0x6a
   16560:	f888 206c 	strb.w	r2, [r8, #108]	; 0x6c
   16564:	f8bd 2086 	ldrh.w	r2, [sp, #134]	; 0x86
   16568:	f89d 1085 	ldrb.w	r1, [sp, #133]	; 0x85
   1656c:	f8c8 3070 	str.w	r3, [r8, #112]	; 0x70
   16570:	f89d 3088 	ldrb.w	r3, [sp, #136]	; 0x88
   16574:	f888 1074 	strb.w	r1, [r8, #116]	; 0x74
   16578:	f8a8 2076 	strh.w	r2, [r8, #118]	; 0x76
   1657c:	f888 3078 	strb.w	r3, [r8, #120]	; 0x78
   16580:	f8bd 3090 	ldrh.w	r3, [sp, #144]	; 0x90
   16584:	f8dd 108b 	ldr.w	r1, [sp, #139]	; 0x8b
   16588:	f89d 208f 	ldrb.w	r2, [sp, #143]	; 0x8f
   1658c:	f8c8 107c 	str.w	r1, [r8, #124]	; 0x7c
   16590:	f888 2080 	strb.w	r2, [r8, #128]	; 0x80
   16594:	f89d 1092 	ldrb.w	r1, [sp, #146]	; 0x92
   16598:	f8dd 2095 	ldr.w	r2, [sp, #149]	; 0x95
   1659c:	f8a8 3082 	strh.w	r3, [r8, #130]	; 0x82
   165a0:	f89d 3099 	ldrb.w	r3, [sp, #153]	; 0x99
   165a4:	f888 1084 	strb.w	r1, [r8, #132]	; 0x84
   165a8:	f8c8 2088 	str.w	r2, [r8, #136]	; 0x88
   165ac:	f888 308c 	strb.w	r3, [r8, #140]	; 0x8c
   165b0:	f8bd 009a 	ldrh.w	r0, [sp, #154]	; 0x9a
   165b4:	9b27      	ldr	r3, [sp, #156]	; 0x9c
   165b6:	f89d 40a8 	ldrb.w	r4, [sp, #168]	; 0xa8
   165ba:	f89d 20a7 	ldrb.w	r2, [sp, #167]	; 0xa7
   165be:	f3c3 210f 	ubfx	r1, r3, #8, #16
   165c2:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
   165c4:	ea42 2204 	orr.w	r2, r2, r4, lsl #8
   165c8:	f8a8 1092 	strh.w	r1, [r8, #146]	; 0x92
   165cc:	f89d 109c 	ldrb.w	r1, [sp, #156]	; 0x9c
   165d0:	f8a8 209e 	strh.w	r2, [r8, #158]	; 0x9e
   165d4:	f3c3 230f 	ubfx	r3, r3, #8, #16
   165d8:	f8dd 209f 	ldr.w	r2, [sp, #159]	; 0x9f
   165dc:	f8a8 008e 	strh.w	r0, [r8, #142]	; 0x8e
   165e0:	f8a8 30aa 	strh.w	r3, [r8, #170]	; 0xaa
   165e4:	f888 1090 	strb.w	r1, [r8, #144]	; 0x90
   165e8:	f89d 30a3 	ldrb.w	r3, [sp, #163]	; 0xa3
   165ec:	f8bd 10a4 	ldrh.w	r1, [sp, #164]	; 0xa4
   165f0:	f8c8 2094 	str.w	r2, [r8, #148]	; 0x94
   165f4:	f89d 20a6 	ldrb.w	r2, [sp, #166]	; 0xa6
   165f8:	f888 3098 	strb.w	r3, [r8, #152]	; 0x98
   165fc:	f8dd 30a9 	ldr.w	r3, [sp, #169]	; 0xa9
   16600:	f8a8 109a 	strh.w	r1, [r8, #154]	; 0x9a
   16604:	f888 209c 	strb.w	r2, [r8, #156]	; 0x9c
   16608:	f8bd 20ae 	ldrh.w	r2, [sp, #174]	; 0xae
   1660c:	f89d 10ad 	ldrb.w	r1, [sp, #173]	; 0xad
   16610:	f8c8 30a0 	str.w	r3, [r8, #160]	; 0xa0
   16614:	f89d 30b0 	ldrb.w	r3, [sp, #176]	; 0xb0
   16618:	f888 10a4 	strb.w	r1, [r8, #164]	; 0xa4
   1661c:	f8a8 20a6 	strh.w	r2, [r8, #166]	; 0xa6
   16620:	f888 30a8 	strb.w	r3, [r8, #168]	; 0xa8
   16624:	f8bd 30b8 	ldrh.w	r3, [sp, #184]	; 0xb8
   16628:	f8dd 10b3 	ldr.w	r1, [sp, #179]	; 0xb3
   1662c:	f89d 20b7 	ldrb.w	r2, [sp, #183]	; 0xb7
   16630:	f8c8 10ac 	str.w	r1, [r8, #172]	; 0xac
   16634:	f888 20b0 	strb.w	r2, [r8, #176]	; 0xb0
   16638:	f8a8 30b2 	strh.w	r3, [r8, #178]	; 0xb2
   1663c:	f89d 30bc 	ldrb.w	r3, [sp, #188]	; 0xbc
   16640:	f89d 10bb 	ldrb.w	r1, [sp, #187]	; 0xbb
   16644:	f89d 00d0 	ldrb.w	r0, [sp, #208]	; 0xd0
   16648:	9a31      	ldr	r2, [sp, #196]	; 0xc4
   1664a:	ea41 2103 	orr.w	r1, r1, r3, lsl #8
   1664e:	f89d 30cf 	ldrb.w	r3, [sp, #207]	; 0xcf
   16652:	f89d 40ba 	ldrb.w	r4, [sp, #186]	; 0xba
   16656:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
   1665a:	f3c2 220f 	ubfx	r2, r2, #8, #16
   1665e:	f8a8 10b6 	strh.w	r1, [r8, #182]	; 0xb6
   16662:	f8a8 30ce 	strh.w	r3, [r8, #206]	; 0xce
   16666:	f888 40b4 	strb.w	r4, [r8, #180]	; 0xb4
   1666a:	f8a8 20c2 	strh.w	r2, [r8, #194]	; 0xc2
   1666e:	f8bd 20c2 	ldrh.w	r2, [sp, #194]	; 0xc2
   16672:	f89d 10c1 	ldrb.w	r1, [sp, #193]	; 0xc1
   16676:	f89d 30c4 	ldrb.w	r3, [sp, #196]	; 0xc4
   1667a:	f8dd 00bd 	ldr.w	r0, [sp, #189]	; 0xbd
   1667e:	f888 10bc 	strb.w	r1, [r8, #188]	; 0xbc
   16682:	f8a8 20be 	strh.w	r2, [r8, #190]	; 0xbe
   16686:	f8c8 00b8 	str.w	r0, [r8, #184]	; 0xb8
   1668a:	f888 30c0 	strb.w	r3, [r8, #192]	; 0xc0
   1668e:	f8bd 30cc 	ldrh.w	r3, [sp, #204]	; 0xcc
   16692:	f8dd 10c7 	ldr.w	r1, [sp, #199]	; 0xc7
   16696:	f89d 20cb 	ldrb.w	r2, [sp, #203]	; 0xcb
   1669a:	f8c8 10c4 	str.w	r1, [r8, #196]	; 0xc4
   1669e:	f888 20c8 	strb.w	r2, [r8, #200]	; 0xc8
   166a2:	f89d 10ce 	ldrb.w	r1, [sp, #206]	; 0xce
   166a6:	f8dd 20d1 	ldr.w	r2, [sp, #209]	; 0xd1
   166aa:	f8a8 30ca 	strh.w	r3, [r8, #202]	; 0xca
   166ae:	f89d 30d5 	ldrb.w	r3, [sp, #213]	; 0xd5
   166b2:	f888 10cc 	strb.w	r1, [r8, #204]	; 0xcc
   166b6:	f8c8 20d0 	str.w	r2, [r8, #208]	; 0xd0
   166ba:	f888 30d4 	strb.w	r3, [r8, #212]	; 0xd4
   166be:	24d8      	movs	r4, #216	; 0xd8
   166c0:	e66c      	b.n	1639c <gnss_interface_read+0xcc>
   166c2:	2039      	movs	r0, #57	; 0x39
   166c4:	f7f8 fa14 	bl	eaf0 <bsd_os_errno_set>
   166c8:	f04f 34ff 	mov.w	r4, #4294967295
   166cc:	e671      	b.n	163b2 <gnss_interface_read+0xe2>
   166ce:	2016      	movs	r0, #22
   166d0:	f7f8 fa0e 	bl	eaf0 <bsd_os_errno_set>
   166d4:	f04f 34ff 	mov.w	r4, #4294967295
   166d8:	e66b      	b.n	163b2 <gnss_interface_read+0xe2>
   166da:	2009      	movs	r0, #9
   166dc:	f7f8 fa08 	bl	eaf0 <bsd_os_errno_set>
   166e0:	f04f 34ff 	mov.w	r4, #4294967295
   166e4:	e665      	b.n	163b2 <gnss_interface_read+0xe2>
   166e6:	bf00      	nop

000166e8 <gnss_interface_setopt>:
   166e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   166ec:	f241 1402 	movw	r4, #4354	; 0x1102
   166f0:	4222      	tst	r2, r4
   166f2:	b086      	sub	sp, #24
   166f4:	4d9c      	ldr	r5, [pc, #624]	; (16968 <gnss_interface_setopt+0x280>)
   166f6:	d004      	beq.n	16702 <gnss_interface_setopt+0x1a>
   166f8:	682c      	ldr	r4, [r5, #0]
   166fa:	b2a4      	uxth	r4, r4
   166fc:	2c02      	cmp	r4, #2
   166fe:	f040 8104 	bne.w	1690a <gnss_interface_setopt+0x222>
   16702:	682c      	ldr	r4, [r5, #0]
   16704:	0264      	lsls	r4, r4, #9
   16706:	f100 8128 	bmi.w	1695a <gnss_interface_setopt+0x272>
   1670a:	f5b1 7f01 	cmp.w	r1, #516	; 0x204
   1670e:	f040 811e 	bne.w	1694e <gnss_interface_setopt+0x266>
   16712:	4996      	ldr	r1, [pc, #600]	; (1696c <gnss_interface_setopt+0x284>)
   16714:	4288      	cmp	r0, r1
   16716:	f040 8114 	bne.w	16942 <gnss_interface_setopt+0x25a>
   1671a:	3a01      	subs	r2, #1
   1671c:	2a08      	cmp	r2, #8
   1671e:	f200 80ec 	bhi.w	168fa <gnss_interface_setopt+0x212>
   16722:	e8df f012 	tbh	[pc, r2, lsl #1]
   16726:	0075      	.short	0x0075
   16728:	00c200d8 	.word	0x00c200d8
   1672c:	008100cc 	.word	0x008100cc
   16730:	0098008c 	.word	0x0098008c
   16734:	000900af 	.word	0x000900af
   16738:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   1673a:	2a01      	cmp	r2, #1
   1673c:	f040 80dd 	bne.w	168fa <gnss_interface_setopt+0x212>
   16740:	f241 1603 	movw	r6, #4355	; 0x1103
   16744:	2240      	movs	r2, #64	; 0x40
   16746:	4637      	mov	r7, r6
   16748:	781b      	ldrb	r3, [r3, #0]
   1674a:	9202      	str	r2, [sp, #8]
   1674c:	f88d 3015 	strb.w	r3, [sp, #21]
   16750:	682b      	ldr	r3, [r5, #0]
   16752:	2112      	movs	r1, #18
   16754:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
   16758:	4668      	mov	r0, sp
   1675a:	602b      	str	r3, [r5, #0]
   1675c:	f000 fbe4 	bl	16f28 <rpc_gnss_client_request_alloc>
   16760:	4604      	mov	r4, r0
   16762:	9800      	ldr	r0, [sp, #0]
   16764:	2c00      	cmp	r4, #0
   16766:	f040 80d6 	bne.w	16916 <gnss_interface_setopt+0x22e>
   1676a:	2800      	cmp	r0, #0
   1676c:	f000 80da 	beq.w	16924 <gnss_interface_setopt+0x23c>
   16770:	2212      	movs	r2, #18
   16772:	f04f 0876 	mov.w	r8, #118	; 0x76
   16776:	f04f 0e49 	mov.w	lr, #73	; 0x49
   1677a:	f04f 0a43 	mov.w	sl, #67	; 0x43
   1677e:	f04f 0954 	mov.w	r9, #84	; 0x54
   16782:	f8df c1f0 	ldr.w	ip, [pc, #496]	; 16974 <gnss_interface_setopt+0x28c>
   16786:	a906      	add	r1, sp, #24
   16788:	f8bc 3000 	ldrh.w	r3, [ip]
   1678c:	f880 800e 	strb.w	r8, [r0, #14]
   16790:	3301      	adds	r3, #1
   16792:	b29b      	uxth	r3, r3
   16794:	ea46 4603 	orr.w	r6, r6, r3, lsl #16
   16798:	f841 6d14 	str.w	r6, [r1, #-20]!
   1679c:	7144      	strb	r4, [r0, #5]
   1679e:	7184      	strb	r4, [r0, #6]
   167a0:	71c4      	strb	r4, [r0, #7]
   167a2:	7204      	strb	r4, [r0, #8]
   167a4:	7244      	strb	r4, [r0, #9]
   167a6:	7284      	strb	r4, [r0, #10]
   167a8:	72c4      	strb	r4, [r0, #11]
   167aa:	7102      	strb	r2, [r0, #4]
   167ac:	f880 a00c 	strb.w	sl, [r0, #12]
   167b0:	f880 900d 	strb.w	r9, [r0, #13]
   167b4:	f880 e00f 	strb.w	lr, [r0, #15]
   167b8:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 16978 <gnss_interface_setopt+0x290>
   167bc:	6800      	ldr	r0, [r0, #0]
   167be:	f8ac 3000 	strh.w	r3, [ip]
   167c2:	f003 f875 	bl	198b0 <memcpy>
   167c6:	4639      	mov	r1, r7
   167c8:	9800      	ldr	r0, [sp, #0]
   167ca:	f8c8 4000 	str.w	r4, [r8]
   167ce:	f000 fbbf 	bl	16f50 <rpc_gnss_client_request_send>
   167d2:	2800      	cmp	r0, #0
   167d4:	f040 80ab 	bne.w	1692e <gnss_interface_setopt+0x246>
   167d8:	4f65      	ldr	r7, [pc, #404]	; (16970 <gnss_interface_setopt+0x288>)
   167da:	4e64      	ldr	r6, [pc, #400]	; (1696c <gnss_interface_setopt+0x284>)
   167dc:	4639      	mov	r1, r7
   167de:	4630      	mov	r0, r6
   167e0:	f7f8 f8f2 	bl	e9c8 <bsd_os_timedwait>
   167e4:	682c      	ldr	r4, [r5, #0]
   167e6:	f414 0480 	ands.w	r4, r4, #4194304	; 0x400000
   167ea:	d1f7      	bne.n	167dc <gnss_interface_setopt+0xf4>
   167ec:	f8d8 0000 	ldr.w	r0, [r8]
   167f0:	b118      	cbz	r0, 167fa <gnss_interface_setopt+0x112>
   167f2:	f000 fbcb 	bl	16f8c <rpc_gnss_client_data_free>
   167f6:	f8c8 4000 	str.w	r4, [r8]
   167fa:	682b      	ldr	r3, [r5, #0]
   167fc:	021b      	lsls	r3, r3, #8
   167fe:	d576      	bpl.n	168ee <gnss_interface_setopt+0x206>
   16800:	2000      	movs	r0, #0
   16802:	682b      	ldr	r3, [r5, #0]
   16804:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
   16808:	602b      	str	r3, [r5, #0]
   1680a:	b006      	add	sp, #24
   1680c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   16810:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   16812:	2a02      	cmp	r2, #2
   16814:	d171      	bne.n	168fa <gnss_interface_setopt+0x212>
   16816:	2208      	movs	r2, #8
   16818:	f241 1603 	movw	r6, #4355	; 0x1103
   1681c:	881b      	ldrh	r3, [r3, #0]
   1681e:	9202      	str	r2, [sp, #8]
   16820:	f8ad 300f 	strh.w	r3, [sp, #15]
   16824:	4637      	mov	r7, r6
   16826:	e793      	b.n	16750 <gnss_interface_setopt+0x68>
   16828:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   1682a:	2a01      	cmp	r2, #1
   1682c:	d165      	bne.n	168fa <gnss_interface_setopt+0x212>
   1682e:	f241 1603 	movw	r6, #4355	; 0x1103
   16832:	781b      	ldrb	r3, [r3, #0]
   16834:	9202      	str	r2, [sp, #8]
   16836:	f88d 300c 	strb.w	r3, [sp, #12]
   1683a:	4637      	mov	r7, r6
   1683c:	e788      	b.n	16750 <gnss_interface_setopt+0x68>
   1683e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   16840:	2a01      	cmp	r2, #1
   16842:	d15a      	bne.n	168fa <gnss_interface_setopt+0x212>
   16844:	2202      	movs	r2, #2
   16846:	f241 1603 	movw	r6, #4355	; 0x1103
   1684a:	781b      	ldrb	r3, [r3, #0]
   1684c:	9202      	str	r2, [sp, #8]
   1684e:	f88d 300d 	strb.w	r3, [sp, #13]
   16852:	4637      	mov	r7, r6
   16854:	e77c      	b.n	16750 <gnss_interface_setopt+0x68>
   16856:	682a      	ldr	r2, [r5, #0]
   16858:	b292      	uxth	r2, r2
   1685a:	2a02      	cmp	r2, #2
   1685c:	d155      	bne.n	1690a <gnss_interface_setopt+0x222>
   1685e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   16860:	2a04      	cmp	r2, #4
   16862:	d14a      	bne.n	168fa <gnss_interface_setopt+0x212>
   16864:	2101      	movs	r1, #1
   16866:	f241 0604 	movw	r6, #4100	; 0x1004
   1686a:	682a      	ldr	r2, [r5, #0]
   1686c:	6818      	ldr	r0, [r3, #0]
   1686e:	0c13      	lsrs	r3, r2, #16
   16870:	041b      	lsls	r3, r3, #16
   16872:	f043 0303 	orr.w	r3, r3, #3
   16876:	f8cd 0009 	str.w	r0, [sp, #9]
   1687a:	602b      	str	r3, [r5, #0]
   1687c:	f88d 1008 	strb.w	r1, [sp, #8]
   16880:	4637      	mov	r7, r6
   16882:	e765      	b.n	16750 <gnss_interface_setopt+0x68>
   16884:	682b      	ldr	r3, [r5, #0]
   16886:	b29b      	uxth	r3, r3
   16888:	2b04      	cmp	r3, #4
   1688a:	d13e      	bne.n	1690a <gnss_interface_setopt+0x222>
   1688c:	2300      	movs	r3, #0
   1688e:	f241 0604 	movw	r6, #4100	; 0x1004
   16892:	f88d 3008 	strb.w	r3, [sp, #8]
   16896:	f88d 3009 	strb.w	r3, [sp, #9]
   1689a:	f88d 300a 	strb.w	r3, [sp, #10]
   1689e:	f88d 300b 	strb.w	r3, [sp, #11]
   168a2:	f88d 300c 	strb.w	r3, [sp, #12]
   168a6:	4637      	mov	r7, r6
   168a8:	e752      	b.n	16750 <gnss_interface_setopt+0x68>
   168aa:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   168ac:	2a01      	cmp	r2, #1
   168ae:	d124      	bne.n	168fa <gnss_interface_setopt+0x212>
   168b0:	781b      	ldrb	r3, [r3, #0]
   168b2:	2b01      	cmp	r3, #1
   168b4:	d121      	bne.n	168fa <gnss_interface_setopt+0x212>
   168b6:	f241 1603 	movw	r6, #4355	; 0x1103
   168ba:	4637      	mov	r7, r6
   168bc:	e748      	b.n	16750 <gnss_interface_setopt+0x68>
   168be:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   168c0:	2a02      	cmp	r2, #2
   168c2:	d11a      	bne.n	168fa <gnss_interface_setopt+0x212>
   168c4:	2220      	movs	r2, #32
   168c6:	f241 1603 	movw	r6, #4355	; 0x1103
   168ca:	881b      	ldrh	r3, [r3, #0]
   168cc:	9202      	str	r2, [sp, #8]
   168ce:	f8ad 3013 	strh.w	r3, [sp, #19]
   168d2:	4637      	mov	r7, r6
   168d4:	e73c      	b.n	16750 <gnss_interface_setopt+0x68>
   168d6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   168d8:	2a02      	cmp	r2, #2
   168da:	d10e      	bne.n	168fa <gnss_interface_setopt+0x212>
   168dc:	2210      	movs	r2, #16
   168de:	f241 1603 	movw	r6, #4355	; 0x1103
   168e2:	881b      	ldrh	r3, [r3, #0]
   168e4:	9202      	str	r2, [sp, #8]
   168e6:	f8ad 3011 	strh.w	r3, [sp, #17]
   168ea:	4637      	mov	r7, r6
   168ec:	e730      	b.n	16750 <gnss_interface_setopt+0x68>
   168ee:	200e      	movs	r0, #14
   168f0:	f7f8 f8fe 	bl	eaf0 <bsd_os_errno_set>
   168f4:	f04f 30ff 	mov.w	r0, #4294967295
   168f8:	e783      	b.n	16802 <gnss_interface_setopt+0x11a>
   168fa:	2016      	movs	r0, #22
   168fc:	f7f8 f8f8 	bl	eaf0 <bsd_os_errno_set>
   16900:	f04f 30ff 	mov.w	r0, #4294967295
   16904:	b006      	add	sp, #24
   16906:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1690a:	200e      	movs	r0, #14
   1690c:	f7f8 f8f0 	bl	eaf0 <bsd_os_errno_set>
   16910:	f04f 30ff 	mov.w	r0, #4294967295
   16914:	e779      	b.n	1680a <gnss_interface_setopt+0x122>
   16916:	b128      	cbz	r0, 16924 <gnss_interface_setopt+0x23c>
   16918:	6803      	ldr	r3, [r0, #0]
   1691a:	b11b      	cbz	r3, 16924 <gnss_interface_setopt+0x23c>
   1691c:	4618      	mov	r0, r3
   1691e:	f000 fb35 	bl	16f8c <rpc_gnss_client_data_free>
   16922:	9800      	ldr	r0, [sp, #0]
   16924:	f000 fb2a 	bl	16f7c <rpc_gnss_client_message_free>
   16928:	2023      	movs	r0, #35	; 0x23
   1692a:	f7f8 f8e1 	bl	eaf0 <bsd_os_errno_set>
   1692e:	682b      	ldr	r3, [r5, #0]
   16930:	200e      	movs	r0, #14
   16932:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
   16936:	602b      	str	r3, [r5, #0]
   16938:	f7f8 f8da 	bl	eaf0 <bsd_os_errno_set>
   1693c:	f04f 30ff 	mov.w	r0, #4294967295
   16940:	e763      	b.n	1680a <gnss_interface_setopt+0x122>
   16942:	2009      	movs	r0, #9
   16944:	f7f8 f8d4 	bl	eaf0 <bsd_os_errno_set>
   16948:	f04f 30ff 	mov.w	r0, #4294967295
   1694c:	e75d      	b.n	1680a <gnss_interface_setopt+0x122>
   1694e:	202a      	movs	r0, #42	; 0x2a
   16950:	f7f8 f8ce 	bl	eaf0 <bsd_os_errno_set>
   16954:	f04f 30ff 	mov.w	r0, #4294967295
   16958:	e757      	b.n	1680a <gnss_interface_setopt+0x122>
   1695a:	2073      	movs	r0, #115	; 0x73
   1695c:	f7f8 f8c8 	bl	eaf0 <bsd_os_errno_set>
   16960:	f04f 30ff 	mov.w	r0, #4294967295
   16964:	e751      	b.n	1680a <gnss_interface_setopt+0x122>
   16966:	bf00      	nop
   16968:	20020798 	.word	0x20020798
   1696c:	49765443 	.word	0x49765443
   16970:	20026060 	.word	0x20026060
   16974:	200249c8 	.word	0x200249c8
   16978:	2002079c 	.word	0x2002079c

0001697c <gnss_interface_getopt>:
   1697c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16980:	4c81      	ldr	r4, [pc, #516]	; (16b88 <gnss_interface_getopt+0x20c>)
   16982:	b087      	sub	sp, #28
   16984:	6825      	ldr	r5, [r4, #0]
   16986:	4698      	mov	r8, r3
   16988:	b2ad      	uxth	r5, r5
   1698a:	2d02      	cmp	r5, #2
   1698c:	9b10      	ldr	r3, [sp, #64]	; 0x40
   1698e:	f040 80dd 	bne.w	16b4c <gnss_interface_getopt+0x1d0>
   16992:	6825      	ldr	r5, [r4, #0]
   16994:	03ee      	lsls	r6, r5, #15
   16996:	f100 80eb 	bmi.w	16b70 <gnss_interface_getopt+0x1f4>
   1699a:	6825      	ldr	r5, [r4, #0]
   1699c:	01ed      	lsls	r5, r5, #7
   1699e:	f100 80ed 	bmi.w	16b7c <gnss_interface_getopt+0x200>
   169a2:	f5b1 7f01 	cmp.w	r1, #516	; 0x204
   169a6:	f040 80d7 	bne.w	16b58 <gnss_interface_getopt+0x1dc>
   169aa:	4978      	ldr	r1, [pc, #480]	; (16b8c <gnss_interface_getopt+0x210>)
   169ac:	4288      	cmp	r0, r1
   169ae:	f040 80d9 	bne.w	16b64 <gnss_interface_getopt+0x1e8>
   169b2:	f1b8 0f00 	cmp.w	r8, #0
   169b6:	d00b      	beq.n	169d0 <gnss_interface_getopt+0x54>
   169b8:	b153      	cbz	r3, 169d0 <gnss_interface_getopt+0x54>
   169ba:	1e57      	subs	r7, r2, #1
   169bc:	2f05      	cmp	r7, #5
   169be:	d807      	bhi.n	169d0 <gnss_interface_getopt+0x54>
   169c0:	e8df f007 	tbb	[pc, r7]
   169c4:	0f030f0f 	.word	0x0f030f0f
   169c8:	0303      	.short	0x0303
   169ca:	681b      	ldr	r3, [r3, #0]
   169cc:	2b01      	cmp	r3, #1
   169ce:	d00b      	beq.n	169e8 <gnss_interface_getopt+0x6c>
   169d0:	2016      	movs	r0, #22
   169d2:	f7f8 f88d 	bl	eaf0 <bsd_os_errno_set>
   169d6:	f04f 35ff 	mov.w	r5, #4294967295
   169da:	4628      	mov	r0, r5
   169dc:	b007      	add	sp, #28
   169de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   169e2:	681b      	ldr	r3, [r3, #0]
   169e4:	2b02      	cmp	r3, #2
   169e6:	d1f3      	bne.n	169d0 <gnss_interface_getopt+0x54>
   169e8:	6823      	ldr	r3, [r4, #0]
   169ea:	2212      	movs	r2, #18
   169ec:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
   169f0:	2100      	movs	r1, #0
   169f2:	a801      	add	r0, sp, #4
   169f4:	6023      	str	r3, [r4, #0]
   169f6:	f002 ff85 	bl	19904 <memset>
   169fa:	2112      	movs	r1, #18
   169fc:	4668      	mov	r0, sp
   169fe:	f000 fa93 	bl	16f28 <rpc_gnss_client_request_alloc>
   16a02:	4605      	mov	r5, r0
   16a04:	9800      	ldr	r0, [sp, #0]
   16a06:	2d00      	cmp	r5, #0
   16a08:	f040 808a 	bne.w	16b20 <gnss_interface_getopt+0x1a4>
   16a0c:	2800      	cmp	r0, #0
   16a0e:	f000 808e 	beq.w	16b2e <gnss_interface_getopt+0x1b2>
   16a12:	f241 1602 	movw	r6, #4354	; 0x1102
   16a16:	f04f 0e49 	mov.w	lr, #73	; 0x49
   16a1a:	2212      	movs	r2, #18
   16a1c:	f04f 0976 	mov.w	r9, #118	; 0x76
   16a20:	f04f 0b43 	mov.w	fp, #67	; 0x43
   16a24:	f04f 0a54 	mov.w	sl, #84	; 0x54
   16a28:	f8df c168 	ldr.w	ip, [pc, #360]	; 16b94 <gnss_interface_getopt+0x218>
   16a2c:	f880 e00f 	strb.w	lr, [r0, #15]
   16a30:	f8bc 3000 	ldrh.w	r3, [ip]
   16a34:	f880 900e 	strb.w	r9, [r0, #14]
   16a38:	3301      	adds	r3, #1
   16a3a:	b29b      	uxth	r3, r3
   16a3c:	ea46 4e03 	orr.w	lr, r6, r3, lsl #16
   16a40:	f8cd e004 	str.w	lr, [sp, #4]
   16a44:	7145      	strb	r5, [r0, #5]
   16a46:	7185      	strb	r5, [r0, #6]
   16a48:	71c5      	strb	r5, [r0, #7]
   16a4a:	7205      	strb	r5, [r0, #8]
   16a4c:	7245      	strb	r5, [r0, #9]
   16a4e:	7285      	strb	r5, [r0, #10]
   16a50:	72c5      	strb	r5, [r0, #11]
   16a52:	a901      	add	r1, sp, #4
   16a54:	7102      	strb	r2, [r0, #4]
   16a56:	f880 b00c 	strb.w	fp, [r0, #12]
   16a5a:	f880 a00d 	strb.w	sl, [r0, #13]
   16a5e:	f8df 9138 	ldr.w	r9, [pc, #312]	; 16b98 <gnss_interface_getopt+0x21c>
   16a62:	6800      	ldr	r0, [r0, #0]
   16a64:	f8ac 3000 	strh.w	r3, [ip]
   16a68:	f002 ff22 	bl	198b0 <memcpy>
   16a6c:	4631      	mov	r1, r6
   16a6e:	9800      	ldr	r0, [sp, #0]
   16a70:	f8c9 5000 	str.w	r5, [r9]
   16a74:	f000 fa6c 	bl	16f50 <rpc_gnss_client_request_send>
   16a78:	2800      	cmp	r0, #0
   16a7a:	d15d      	bne.n	16b38 <gnss_interface_getopt+0x1bc>
   16a7c:	4e44      	ldr	r6, [pc, #272]	; (16b90 <gnss_interface_getopt+0x214>)
   16a7e:	4d43      	ldr	r5, [pc, #268]	; (16b8c <gnss_interface_getopt+0x210>)
   16a80:	4631      	mov	r1, r6
   16a82:	4628      	mov	r0, r5
   16a84:	f7f7 ffa0 	bl	e9c8 <bsd_os_timedwait>
   16a88:	6823      	ldr	r3, [r4, #0]
   16a8a:	01db      	lsls	r3, r3, #7
   16a8c:	d4f8      	bmi.n	16a80 <gnss_interface_getopt+0x104>
   16a8e:	f8d9 0000 	ldr.w	r0, [r9]
   16a92:	b1d8      	cbz	r0, 16acc <gnss_interface_getopt+0x150>
   16a94:	6825      	ldr	r5, [r4, #0]
   16a96:	f015 7500 	ands.w	r5, r5, #33554432	; 0x2000000
   16a9a:	d00f      	beq.n	16abc <gnss_interface_getopt+0x140>
   16a9c:	2f05      	cmp	r7, #5
   16a9e:	d837      	bhi.n	16b10 <gnss_interface_getopt+0x194>
   16aa0:	e8df f007 	tbb	[pc, r7]
   16aa4:	2b26201a 	.word	0x2b26201a
   16aa8:	0331      	.short	0x0331
   16aaa:	2500      	movs	r5, #0
   16aac:	7b43      	ldrb	r3, [r0, #13]
   16aae:	f888 3000 	strb.w	r3, [r8]
   16ab2:	f000 fa6b 	bl	16f8c <rpc_gnss_client_data_free>
   16ab6:	2300      	movs	r3, #0
   16ab8:	f8c9 3000 	str.w	r3, [r9]
   16abc:	6823      	ldr	r3, [r4, #0]
   16abe:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
   16ac2:	6023      	str	r3, [r4, #0]
   16ac4:	4628      	mov	r0, r5
   16ac6:	b007      	add	sp, #28
   16ac8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16acc:	6823      	ldr	r3, [r4, #0]
   16ace:	4605      	mov	r5, r0
   16ad0:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
   16ad4:	6023      	str	r3, [r4, #0]
   16ad6:	e7f5      	b.n	16ac4 <gnss_interface_getopt+0x148>
   16ad8:	f8b0 300f 	ldrh.w	r3, [r0, #15]
   16adc:	2500      	movs	r5, #0
   16ade:	f8a8 3000 	strh.w	r3, [r8]
   16ae2:	e7e6      	b.n	16ab2 <gnss_interface_getopt+0x136>
   16ae4:	f8b0 3011 	ldrh.w	r3, [r0, #17]
   16ae8:	2500      	movs	r5, #0
   16aea:	f8a8 3000 	strh.w	r3, [r8]
   16aee:	e7e0      	b.n	16ab2 <gnss_interface_getopt+0x136>
   16af0:	7b83      	ldrb	r3, [r0, #14]
   16af2:	2500      	movs	r5, #0
   16af4:	f888 3000 	strb.w	r3, [r8]
   16af8:	e7db      	b.n	16ab2 <gnss_interface_getopt+0x136>
   16afa:	f8b0 3013 	ldrh.w	r3, [r0, #19]
   16afe:	2500      	movs	r5, #0
   16b00:	f8a8 3000 	strh.w	r3, [r8]
   16b04:	e7d5      	b.n	16ab2 <gnss_interface_getopt+0x136>
   16b06:	7b03      	ldrb	r3, [r0, #12]
   16b08:	2500      	movs	r5, #0
   16b0a:	f888 3000 	strb.w	r3, [r8]
   16b0e:	e7d0      	b.n	16ab2 <gnss_interface_getopt+0x136>
   16b10:	2016      	movs	r0, #22
   16b12:	f7f7 ffed 	bl	eaf0 <bsd_os_errno_set>
   16b16:	f04f 35ff 	mov.w	r5, #4294967295
   16b1a:	f8d9 0000 	ldr.w	r0, [r9]
   16b1e:	e7c8      	b.n	16ab2 <gnss_interface_getopt+0x136>
   16b20:	b128      	cbz	r0, 16b2e <gnss_interface_getopt+0x1b2>
   16b22:	6803      	ldr	r3, [r0, #0]
   16b24:	b11b      	cbz	r3, 16b2e <gnss_interface_getopt+0x1b2>
   16b26:	4618      	mov	r0, r3
   16b28:	f000 fa30 	bl	16f8c <rpc_gnss_client_data_free>
   16b2c:	9800      	ldr	r0, [sp, #0]
   16b2e:	f000 fa25 	bl	16f7c <rpc_gnss_client_message_free>
   16b32:	2023      	movs	r0, #35	; 0x23
   16b34:	f7f7 ffdc 	bl	eaf0 <bsd_os_errno_set>
   16b38:	6823      	ldr	r3, [r4, #0]
   16b3a:	200e      	movs	r0, #14
   16b3c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
   16b40:	6023      	str	r3, [r4, #0]
   16b42:	f04f 35ff 	mov.w	r5, #4294967295
   16b46:	f7f7 ffd3 	bl	eaf0 <bsd_os_errno_set>
   16b4a:	e746      	b.n	169da <gnss_interface_getopt+0x5e>
   16b4c:	200e      	movs	r0, #14
   16b4e:	f7f7 ffcf 	bl	eaf0 <bsd_os_errno_set>
   16b52:	f04f 35ff 	mov.w	r5, #4294967295
   16b56:	e740      	b.n	169da <gnss_interface_getopt+0x5e>
   16b58:	202a      	movs	r0, #42	; 0x2a
   16b5a:	f7f7 ffc9 	bl	eaf0 <bsd_os_errno_set>
   16b5e:	f04f 35ff 	mov.w	r5, #4294967295
   16b62:	e73a      	b.n	169da <gnss_interface_getopt+0x5e>
   16b64:	2009      	movs	r0, #9
   16b66:	f7f7 ffc3 	bl	eaf0 <bsd_os_errno_set>
   16b6a:	f04f 35ff 	mov.w	r5, #4294967295
   16b6e:	e734      	b.n	169da <gnss_interface_getopt+0x5e>
   16b70:	2005      	movs	r0, #5
   16b72:	f7f7 ffbd 	bl	eaf0 <bsd_os_errno_set>
   16b76:	f04f 35ff 	mov.w	r5, #4294967295
   16b7a:	e72e      	b.n	169da <gnss_interface_getopt+0x5e>
   16b7c:	2073      	movs	r0, #115	; 0x73
   16b7e:	f7f7 ffb7 	bl	eaf0 <bsd_os_errno_set>
   16b82:	f04f 35ff 	mov.w	r5, #4294967295
   16b86:	e728      	b.n	169da <gnss_interface_getopt+0x5e>
   16b88:	20020798 	.word	0x20020798
   16b8c:	49765443 	.word	0x49765443
   16b90:	20026060 	.word	0x20026060
   16b94:	200249c8 	.word	0x200249c8
   16b98:	2002079c 	.word	0x2002079c

00016b9c <gnss_interface_init>:
   16b9c:	2100      	movs	r1, #0
   16b9e:	b538      	push	{r3, r4, r5, lr}
   16ba0:	4c09      	ldr	r4, [pc, #36]	; (16bc8 <gnss_interface_init+0x2c>)
   16ba2:	4d0a      	ldr	r5, [pc, #40]	; (16bcc <gnss_interface_init+0x30>)
   16ba4:	6822      	ldr	r2, [r4, #0]
   16ba6:	480a      	ldr	r0, [pc, #40]	; (16bd0 <gnss_interface_init+0x34>)
   16ba8:	4b0a      	ldr	r3, [pc, #40]	; (16bd4 <gnss_interface_init+0x38>)
   16baa:	402a      	ands	r2, r5
   16bac:	6022      	str	r2, [r4, #0]
   16bae:	8001      	strh	r1, [r0, #0]
   16bb0:	6019      	str	r1, [r3, #0]
   16bb2:	f000 f9b3 	bl	16f1c <rpc_gnss_client_init>
   16bb6:	b928      	cbnz	r0, 16bc4 <gnss_interface_init+0x28>
   16bb8:	6823      	ldr	r3, [r4, #0]
   16bba:	402b      	ands	r3, r5
   16bbc:	f043 0301 	orr.w	r3, r3, #1
   16bc0:	6023      	str	r3, [r4, #0]
   16bc2:	bd38      	pop	{r3, r4, r5, pc}
   16bc4:	2003      	movs	r0, #3
   16bc6:	bd38      	pop	{r3, r4, r5, pc}
   16bc8:	20020798 	.word	0x20020798
   16bcc:	ffff0000 	.word	0xffff0000
   16bd0:	200249c8 	.word	0x200249c8
   16bd4:	2002079c 	.word	0x2002079c

00016bd8 <gnss_interface_open>:
   16bd8:	2902      	cmp	r1, #2
   16bda:	b510      	push	{r4, lr}
   16bdc:	d121      	bne.n	16c22 <gnss_interface_open+0x4a>
   16bde:	4c14      	ldr	r4, [pc, #80]	; (16c30 <gnss_interface_open+0x58>)
   16be0:	6823      	ldr	r3, [r4, #0]
   16be2:	b29b      	uxth	r3, r3
   16be4:	2b01      	cmp	r3, #1
   16be6:	d116      	bne.n	16c16 <gnss_interface_open+0x3e>
   16be8:	6823      	ldr	r3, [r4, #0]
   16bea:	4608      	mov	r0, r1
   16bec:	0c1b      	lsrs	r3, r3, #16
   16bee:	041b      	lsls	r3, r3, #16
   16bf0:	f043 0302 	orr.w	r3, r3, #2
   16bf4:	2200      	movs	r2, #0
   16bf6:	490f      	ldr	r1, [pc, #60]	; (16c34 <gnss_interface_open+0x5c>)
   16bf8:	6023      	str	r3, [r4, #0]
   16bfa:	f000 faad 	bl	17158 <packet_handler_create>
   16bfe:	4a0e      	ldr	r2, [pc, #56]	; (16c38 <gnss_interface_open+0x60>)
   16c00:	6010      	str	r0, [r2, #0]
   16c02:	b140      	cbz	r0, 16c16 <gnss_interface_open+0x3e>
   16c04:	6823      	ldr	r3, [r4, #0]
   16c06:	6802      	ldr	r2, [r0, #0]
   16c08:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   16c0c:	6812      	ldr	r2, [r2, #0]
   16c0e:	6023      	str	r3, [r4, #0]
   16c10:	4790      	blx	r2
   16c12:	480a      	ldr	r0, [pc, #40]	; (16c3c <gnss_interface_open+0x64>)
   16c14:	bd10      	pop	{r4, pc}
   16c16:	200e      	movs	r0, #14
   16c18:	f7f7 ff6a 	bl	eaf0 <bsd_os_errno_set>
   16c1c:	f04f 30ff 	mov.w	r0, #4294967295
   16c20:	bd10      	pop	{r4, pc}
   16c22:	2029      	movs	r0, #41	; 0x29
   16c24:	f7f7 ff64 	bl	eaf0 <bsd_os_errno_set>
   16c28:	f04f 30ff 	mov.w	r0, #4294967295
   16c2c:	bd10      	pop	{r4, pc}
   16c2e:	bf00      	nop
   16c30:	20020798 	.word	0x20020798
   16c34:	00015f21 	.word	0x00015f21
   16c38:	200207a0 	.word	0x200207a0
   16c3c:	49765443 	.word	0x49765443

00016c40 <gnss_interface_close>:
   16c40:	b530      	push	{r4, r5, lr}
   16c42:	4b13      	ldr	r3, [pc, #76]	; (16c90 <gnss_interface_close+0x50>)
   16c44:	b083      	sub	sp, #12
   16c46:	4298      	cmp	r0, r3
   16c48:	d11c      	bne.n	16c84 <gnss_interface_close+0x44>
   16c4a:	4c12      	ldr	r4, [pc, #72]	; (16c94 <gnss_interface_close+0x54>)
   16c4c:	6823      	ldr	r3, [r4, #0]
   16c4e:	b29b      	uxth	r3, r3
   16c50:	2b04      	cmp	r3, #4
   16c52:	d00f      	beq.n	16c74 <gnss_interface_close+0x34>
   16c54:	4d10      	ldr	r5, [pc, #64]	; (16c98 <gnss_interface_close+0x58>)
   16c56:	6828      	ldr	r0, [r5, #0]
   16c58:	b118      	cbz	r0, 16c62 <gnss_interface_close+0x22>
   16c5a:	f000 fa9d 	bl	17198 <packet_handler_delete>
   16c5e:	2300      	movs	r3, #0
   16c60:	602b      	str	r3, [r5, #0]
   16c62:	2000      	movs	r0, #0
   16c64:	6823      	ldr	r3, [r4, #0]
   16c66:	0c1b      	lsrs	r3, r3, #16
   16c68:	041b      	lsls	r3, r3, #16
   16c6a:	f043 0301 	orr.w	r3, r3, #1
   16c6e:	6023      	str	r3, [r4, #0]
   16c70:	b003      	add	sp, #12
   16c72:	bd30      	pop	{r4, r5, pc}
   16c74:	2300      	movs	r3, #0
   16c76:	2208      	movs	r2, #8
   16c78:	9300      	str	r3, [sp, #0]
   16c7a:	f44f 7101 	mov.w	r1, #516	; 0x204
   16c7e:	f7fc fe31 	bl	138e4 <nrf_setsockopt>
   16c82:	e7e7      	b.n	16c54 <gnss_interface_close+0x14>
   16c84:	2009      	movs	r0, #9
   16c86:	f7f7 ff33 	bl	eaf0 <bsd_os_errno_set>
   16c8a:	f04f 30ff 	mov.w	r0, #4294967295
   16c8e:	e7ef      	b.n	16c70 <gnss_interface_close+0x30>
   16c90:	49765443 	.word	0x49765443
   16c94:	20020798 	.word	0x20020798
   16c98:	200207a0 	.word	0x200207a0

00016c9c <rpc_gnss_serialize_utc>:
   16c9c:	4603      	mov	r3, r0
   16c9e:	b1d8      	cbz	r0, 16cd8 <rpc_gnss_serialize_utc+0x3c>
   16ca0:	b1d1      	cbz	r1, 16cd8 <rpc_gnss_serialize_utc+0x3c>
   16ca2:	2000      	movs	r0, #0
   16ca4:	2201      	movs	r2, #1
   16ca6:	7048      	strb	r0, [r1, #1]
   16ca8:	700a      	strb	r2, [r1, #0]
   16caa:	685a      	ldr	r2, [r3, #4]
   16cac:	2010      	movs	r0, #16
   16cae:	f8c1 2006 	str.w	r2, [r1, #6]
   16cb2:	681a      	ldr	r2, [r3, #0]
   16cb4:	f8c1 2002 	str.w	r2, [r1, #2]
   16cb8:	f993 200a 	ldrsb.w	r2, [r3, #10]
   16cbc:	730a      	strb	r2, [r1, #12]
   16cbe:	f993 200d 	ldrsb.w	r2, [r3, #13]
   16cc2:	73ca      	strb	r2, [r1, #15]
   16cc4:	f993 200c 	ldrsb.w	r2, [r3, #12]
   16cc8:	738a      	strb	r2, [r1, #14]
   16cca:	7a1a      	ldrb	r2, [r3, #8]
   16ccc:	728a      	strb	r2, [r1, #10]
   16cce:	7ada      	ldrb	r2, [r3, #11]
   16cd0:	734a      	strb	r2, [r1, #13]
   16cd2:	7a5b      	ldrb	r3, [r3, #9]
   16cd4:	72cb      	strb	r3, [r1, #11]
   16cd6:	4770      	bx	lr
   16cd8:	f04f 30ff 	mov.w	r0, #4294967295
   16cdc:	4770      	bx	lr
   16cde:	bf00      	nop

00016ce0 <rpc_gnss_serialize_ephe>:
   16ce0:	4603      	mov	r3, r0
   16ce2:	2800      	cmp	r0, #0
   16ce4:	d04b      	beq.n	16d7e <rpc_gnss_serialize_ephe+0x9e>
   16ce6:	2900      	cmp	r1, #0
   16ce8:	d049      	beq.n	16d7e <rpc_gnss_serialize_ephe+0x9e>
   16cea:	2000      	movs	r0, #0
   16cec:	2202      	movs	r2, #2
   16cee:	7048      	strb	r0, [r1, #1]
   16cf0:	700a      	strb	r2, [r1, #0]
   16cf2:	68da      	ldr	r2, [r3, #12]
   16cf4:	2040      	movs	r0, #64	; 0x40
   16cf6:	f8c1 200b 	str.w	r2, [r1, #11]
   16cfa:	f9b3 2008 	ldrsh.w	r2, [r3, #8]
   16cfe:	f8a1 2009 	strh.w	r2, [r1, #9]
   16d02:	f993 2006 	ldrsb.w	r2, [r3, #6]
   16d06:	720a      	strb	r2, [r1, #8]
   16d08:	f9b3 2044 	ldrsh.w	r2, [r3, #68]	; 0x44
   16d0c:	878a      	strh	r2, [r1, #60]	; 0x3c
   16d0e:	f9b3 203e 	ldrsh.w	r2, [r3, #62]	; 0x3e
   16d12:	86ca      	strh	r2, [r1, #54]	; 0x36
   16d14:	f9b3 2042 	ldrsh.w	r2, [r3, #66]	; 0x42
   16d18:	874a      	strh	r2, [r1, #58]	; 0x3a
   16d1a:	f9b3 203c 	ldrsh.w	r2, [r3, #60]	; 0x3c
   16d1e:	868a      	strh	r2, [r1, #52]	; 0x34
   16d20:	f9b3 2046 	ldrsh.w	r2, [r3, #70]	; 0x46
   16d24:	87ca      	strh	r2, [r1, #62]	; 0x3e
   16d26:	f9b3 2040 	ldrsh.w	r2, [r3, #64]	; 0x40
   16d2a:	870a      	strh	r2, [r1, #56]	; 0x38
   16d2c:	f9b3 201c 	ldrsh.w	r2, [r3, #28]
   16d30:	830a      	strh	r2, [r1, #24]
   16d32:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   16d34:	f8c1 2022 	str.w	r2, [r1, #34]	; 0x22
   16d38:	7c9a      	ldrb	r2, [r3, #18]
   16d3a:	744a      	strb	r2, [r1, #17]
   16d3c:	785a      	ldrb	r2, [r3, #1]
   16d3e:	70ca      	strb	r2, [r1, #3]
   16d40:	6b5a      	ldr	r2, [r3, #52]	; 0x34
   16d42:	62ca      	str	r2, [r1, #44]	; 0x2c
   16d44:	f9b3 202c 	ldrsh.w	r2, [r3, #44]	; 0x2c
   16d48:	84ca      	strh	r2, [r1, #38]	; 0x26
   16d4a:	885a      	ldrh	r2, [r3, #2]
   16d4c:	808a      	strh	r2, [r1, #4]
   16d4e:	6a1a      	ldr	r2, [r3, #32]
   16d50:	f8c1 201a 	str.w	r2, [r1, #26]
   16d54:	6b9a      	ldr	r2, [r3, #56]	; 0x38
   16d56:	630a      	str	r2, [r1, #48]	; 0x30
   16d58:	6a5a      	ldr	r2, [r3, #36]	; 0x24
   16d5a:	f8c1 201e 	str.w	r2, [r1, #30]
   16d5e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
   16d60:	628a      	str	r2, [r1, #40]	; 0x28
   16d62:	781a      	ldrb	r2, [r3, #0]
   16d64:	708a      	strb	r2, [r1, #2]
   16d66:	f993 2010 	ldrsb.w	r2, [r3, #16]
   16d6a:	73ca      	strb	r2, [r1, #15]
   16d6c:	889a      	ldrh	r2, [r3, #4]
   16d6e:	80ca      	strh	r2, [r1, #6]
   16d70:	8a9a      	ldrh	r2, [r3, #20]
   16d72:	824a      	strh	r2, [r1, #18]
   16d74:	7c5a      	ldrb	r2, [r3, #17]
   16d76:	740a      	strb	r2, [r1, #16]
   16d78:	699b      	ldr	r3, [r3, #24]
   16d7a:	614b      	str	r3, [r1, #20]
   16d7c:	4770      	bx	lr
   16d7e:	f04f 30ff 	mov.w	r0, #4294967295
   16d82:	4770      	bx	lr

00016d84 <rpc_gnss_serialize_alm>:
   16d84:	4603      	mov	r3, r0
   16d86:	b360      	cbz	r0, 16de2 <rpc_gnss_serialize_alm+0x5e>
   16d88:	b359      	cbz	r1, 16de2 <rpc_gnss_serialize_alm+0x5e>
   16d8a:	2000      	movs	r0, #0
   16d8c:	2203      	movs	r2, #3
   16d8e:	7048      	strb	r0, [r1, #1]
   16d90:	700a      	strb	r2, [r1, #0]
   16d92:	f9b3 201c 	ldrsh.w	r2, [r3, #28]
   16d96:	2021      	movs	r0, #33	; 0x21
   16d98:	f8a1 201d 	strh.w	r2, [r1, #29]
   16d9c:	f9b3 201e 	ldrsh.w	r2, [r3, #30]
   16da0:	f8a1 201f 	strh.w	r2, [r1, #31]
   16da4:	f9b3 2006 	ldrsh.w	r2, [r3, #6]
   16da8:	810a      	strh	r2, [r1, #8]
   16daa:	889a      	ldrh	r2, [r3, #4]
   16dac:	80ca      	strh	r2, [r1, #6]
   16dae:	78da      	ldrb	r2, [r3, #3]
   16db0:	714a      	strb	r2, [r1, #5]
   16db2:	699a      	ldr	r2, [r3, #24]
   16db4:	f8c1 2019 	str.w	r2, [r1, #25]
   16db8:	691a      	ldr	r2, [r3, #16]
   16dba:	f8c1 2011 	str.w	r2, [r1, #17]
   16dbe:	f9b3 2008 	ldrsh.w	r2, [r3, #8]
   16dc2:	814a      	strh	r2, [r1, #10]
   16dc4:	68da      	ldr	r2, [r3, #12]
   16dc6:	f8c1 200d 	str.w	r2, [r1, #13]
   16dca:	7a9a      	ldrb	r2, [r3, #10]
   16dcc:	730a      	strb	r2, [r1, #12]
   16dce:	781a      	ldrb	r2, [r3, #0]
   16dd0:	708a      	strb	r2, [r1, #2]
   16dd2:	789a      	ldrb	r2, [r3, #2]
   16dd4:	710a      	strb	r2, [r1, #4]
   16dd6:	695a      	ldr	r2, [r3, #20]
   16dd8:	f8c1 2015 	str.w	r2, [r1, #21]
   16ddc:	785b      	ldrb	r3, [r3, #1]
   16dde:	70cb      	strb	r3, [r1, #3]
   16de0:	4770      	bx	lr
   16de2:	f04f 30ff 	mov.w	r0, #4294967295
   16de6:	4770      	bx	lr

00016de8 <rpc_gnss_serialize_klob>:
   16de8:	4603      	mov	r3, r0
   16dea:	b1f0      	cbz	r0, 16e2a <rpc_gnss_serialize_klob+0x42>
   16dec:	b1e9      	cbz	r1, 16e2a <rpc_gnss_serialize_klob+0x42>
   16dee:	2000      	movs	r0, #0
   16df0:	2204      	movs	r2, #4
   16df2:	7048      	strb	r0, [r1, #1]
   16df4:	700a      	strb	r2, [r1, #0]
   16df6:	f993 2000 	ldrsb.w	r2, [r3]
   16dfa:	200a      	movs	r0, #10
   16dfc:	708a      	strb	r2, [r1, #2]
   16dfe:	f993 2001 	ldrsb.w	r2, [r3, #1]
   16e02:	70ca      	strb	r2, [r1, #3]
   16e04:	f993 2002 	ldrsb.w	r2, [r3, #2]
   16e08:	710a      	strb	r2, [r1, #4]
   16e0a:	f993 2003 	ldrsb.w	r2, [r3, #3]
   16e0e:	714a      	strb	r2, [r1, #5]
   16e10:	f993 2004 	ldrsb.w	r2, [r3, #4]
   16e14:	718a      	strb	r2, [r1, #6]
   16e16:	f993 2005 	ldrsb.w	r2, [r3, #5]
   16e1a:	71ca      	strb	r2, [r1, #7]
   16e1c:	f993 2006 	ldrsb.w	r2, [r3, #6]
   16e20:	720a      	strb	r2, [r1, #8]
   16e22:	f993 3007 	ldrsb.w	r3, [r3, #7]
   16e26:	724b      	strb	r3, [r1, #9]
   16e28:	4770      	bx	lr
   16e2a:	f04f 30ff 	mov.w	r0, #4294967295
   16e2e:	4770      	bx	lr

00016e30 <rpc_gnss_serialize_nequick>:
   16e30:	4603      	mov	r3, r0
   16e32:	b198      	cbz	r0, 16e5c <rpc_gnss_serialize_nequick+0x2c>
   16e34:	b191      	cbz	r1, 16e5c <rpc_gnss_serialize_nequick+0x2c>
   16e36:	2000      	movs	r0, #0
   16e38:	2205      	movs	r2, #5
   16e3a:	7048      	strb	r0, [r1, #1]
   16e3c:	700a      	strb	r2, [r1, #0]
   16e3e:	f9b3 2000 	ldrsh.w	r2, [r3]
   16e42:	200a      	movs	r0, #10
   16e44:	804a      	strh	r2, [r1, #2]
   16e46:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
   16e4a:	808a      	strh	r2, [r1, #4]
   16e4c:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
   16e50:	80ca      	strh	r2, [r1, #6]
   16e52:	799a      	ldrb	r2, [r3, #6]
   16e54:	720a      	strb	r2, [r1, #8]
   16e56:	79db      	ldrb	r3, [r3, #7]
   16e58:	724b      	strb	r3, [r1, #9]
   16e5a:	4770      	bx	lr
   16e5c:	f04f 30ff 	mov.w	r0, #4294967295
   16e60:	4770      	bx	lr
   16e62:	bf00      	nop

00016e64 <rpc_gnss_serialize_time_and_sv_tow>:
   16e64:	b310      	cbz	r0, 16eac <rpc_gnss_serialize_time_and_sv_tow+0x48>
   16e66:	b309      	cbz	r1, 16eac <rpc_gnss_serialize_time_and_sv_tow+0x48>
   16e68:	b470      	push	{r4, r5, r6}
   16e6a:	2500      	movs	r5, #0
   16e6c:	2606      	movs	r6, #6
   16e6e:	460c      	mov	r4, r1
   16e70:	704d      	strb	r5, [r1, #1]
   16e72:	700e      	strb	r6, [r1, #0]
   16e74:	462b      	mov	r3, r5
   16e76:	8805      	ldrh	r5, [r0, #0]
   16e78:	4602      	mov	r2, r0
   16e7a:	804d      	strh	r5, [r1, #2]
   16e7c:	68c5      	ldr	r5, [r0, #12]
   16e7e:	f8c1 500a 	str.w	r5, [r1, #10]
   16e82:	8905      	ldrh	r5, [r0, #8]
   16e84:	810d      	strh	r5, [r1, #8]
   16e86:	6840      	ldr	r0, [r0, #4]
   16e88:	6048      	str	r0, [r1, #4]
   16e8a:	8a15      	ldrh	r5, [r2, #16]
   16e8c:	eb03 0043 	add.w	r0, r3, r3, lsl #1
   16e90:	4408      	add	r0, r1
   16e92:	81c5      	strh	r5, [r0, #14]
   16e94:	7c90      	ldrb	r0, [r2, #18]
   16e96:	3301      	adds	r3, #1
   16e98:	2b20      	cmp	r3, #32
   16e9a:	7420      	strb	r0, [r4, #16]
   16e9c:	f102 0204 	add.w	r2, r2, #4
   16ea0:	f104 0403 	add.w	r4, r4, #3
   16ea4:	d1f1      	bne.n	16e8a <rpc_gnss_serialize_time_and_sv_tow+0x26>
   16ea6:	206e      	movs	r0, #110	; 0x6e
   16ea8:	bc70      	pop	{r4, r5, r6}
   16eaa:	4770      	bx	lr
   16eac:	f04f 30ff 	mov.w	r0, #4294967295
   16eb0:	4770      	bx	lr
   16eb2:	bf00      	nop

00016eb4 <rpc_gnss_serialize_location>:
   16eb4:	4603      	mov	r3, r0
   16eb6:	b1c8      	cbz	r0, 16eec <rpc_gnss_serialize_location+0x38>
   16eb8:	b1c1      	cbz	r1, 16eec <rpc_gnss_serialize_location+0x38>
   16eba:	2000      	movs	r0, #0
   16ebc:	2207      	movs	r2, #7
   16ebe:	7048      	strb	r0, [r1, #1]
   16ec0:	700a      	strb	r2, [r1, #0]
   16ec2:	f9b3 2008 	ldrsh.w	r2, [r3, #8]
   16ec6:	2011      	movs	r0, #17
   16ec8:	814a      	strh	r2, [r1, #10]
   16eca:	7b9a      	ldrb	r2, [r3, #14]
   16ecc:	740a      	strb	r2, [r1, #16]
   16ece:	681a      	ldr	r2, [r3, #0]
   16ed0:	f8c1 2002 	str.w	r2, [r1, #2]
   16ed4:	685a      	ldr	r2, [r3, #4]
   16ed6:	f8c1 2006 	str.w	r2, [r1, #6]
   16eda:	7b1a      	ldrb	r2, [r3, #12]
   16edc:	738a      	strb	r2, [r1, #14]
   16ede:	7b5a      	ldrb	r2, [r3, #13]
   16ee0:	73ca      	strb	r2, [r1, #15]
   16ee2:	7a9a      	ldrb	r2, [r3, #10]
   16ee4:	730a      	strb	r2, [r1, #12]
   16ee6:	7adb      	ldrb	r3, [r3, #11]
   16ee8:	734b      	strb	r3, [r1, #13]
   16eea:	4770      	bx	lr
   16eec:	f04f 30ff 	mov.w	r0, #4294967295
   16ef0:	4770      	bx	lr
   16ef2:	bf00      	nop

00016ef4 <rpc_gnss_serialize_integrity>:
   16ef4:	b148      	cbz	r0, 16f0a <rpc_gnss_serialize_integrity+0x16>
   16ef6:	b141      	cbz	r1, 16f0a <rpc_gnss_serialize_integrity+0x16>
   16ef8:	2200      	movs	r2, #0
   16efa:	2308      	movs	r3, #8
   16efc:	704a      	strb	r2, [r1, #1]
   16efe:	700b      	strb	r3, [r1, #0]
   16f00:	6803      	ldr	r3, [r0, #0]
   16f02:	2006      	movs	r0, #6
   16f04:	f8c1 3002 	str.w	r3, [r1, #2]
   16f08:	4770      	bx	lr
   16f0a:	f04f 30ff 	mov.w	r0, #4294967295
   16f0e:	4770      	bx	lr

00016f10 <gnss_client_event_handler>:
   16f10:	f850 1b08 	ldr.w	r1, [r0], #8
   16f14:	0c09      	lsrs	r1, r1, #16
   16f16:	f7ff b811 	b.w	15f3c <rpc_gnss_event_handler>
   16f1a:	bf00      	nop

00016f1c <rpc_gnss_client_init>:
   16f1c:	4801      	ldr	r0, [pc, #4]	; (16f24 <rpc_gnss_client_init+0x8>)
   16f1e:	f7fe bb73 	b.w	15608 <rpc_client_register>
   16f22:	bf00      	nop
   16f24:	0001ab58 	.word	0x0001ab58

00016f28 <rpc_gnss_client_request_alloc>:
   16f28:	2300      	movs	r3, #0
   16f2a:	b510      	push	{r4, lr}
   16f2c:	b082      	sub	sp, #8
   16f2e:	9301      	str	r3, [sp, #4]
   16f30:	b158      	cbz	r0, 16f4a <rpc_gnss_client_request_alloc+0x22>
   16f32:	4604      	mov	r4, r0
   16f34:	aa01      	add	r2, sp, #4
   16f36:	2007      	movs	r0, #7
   16f38:	f7fe fd9e 	bl	15a78 <rpc_message_alloc>
   16f3c:	b918      	cbnz	r0, 16f46 <rpc_gnss_client_request_alloc+0x1e>
   16f3e:	9b01      	ldr	r3, [sp, #4]
   16f40:	b10b      	cbz	r3, 16f46 <rpc_gnss_client_request_alloc+0x1e>
   16f42:	3308      	adds	r3, #8
   16f44:	6023      	str	r3, [r4, #0]
   16f46:	b002      	add	sp, #8
   16f48:	bd10      	pop	{r4, pc}
   16f4a:	2007      	movs	r0, #7
   16f4c:	b002      	add	sp, #8
   16f4e:	bd10      	pop	{r4, pc}

00016f50 <rpc_gnss_client_request_send>:
   16f50:	f401 4370 	and.w	r3, r1, #61440	; 0xf000
   16f54:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
   16f58:	d10b      	bne.n	16f72 <rpc_gnss_client_request_send+0x22>
   16f5a:	b160      	cbz	r0, 16f76 <rpc_gnss_client_request_send+0x26>
   16f5c:	4603      	mov	r3, r0
   16f5e:	f830 2c08 	ldrh.w	r2, [r0, #-8]
   16f62:	2007      	movs	r0, #7
   16f64:	ea42 4101 	orr.w	r1, r2, r1, lsl #16
   16f68:	f843 1d08 	str.w	r1, [r3, #-8]!
   16f6c:	4619      	mov	r1, r3
   16f6e:	f7fe bd6b 	b.w	15a48 <rpc_message_send>
   16f72:	200f      	movs	r0, #15
   16f74:	4770      	bx	lr
   16f76:	2007      	movs	r0, #7
   16f78:	4770      	bx	lr
   16f7a:	bf00      	nop

00016f7c <rpc_gnss_client_message_free>:
   16f7c:	b120      	cbz	r0, 16f88 <rpc_gnss_client_message_free+0xc>
   16f7e:	f1a0 0108 	sub.w	r1, r0, #8
   16f82:	2007      	movs	r0, #7
   16f84:	f7fe bdaa 	b.w	15adc <rpc_message_free>
   16f88:	2007      	movs	r0, #7
   16f8a:	4770      	bx	lr

00016f8c <rpc_gnss_client_data_free>:
   16f8c:	b118      	cbz	r0, 16f96 <rpc_gnss_client_data_free+0xa>
   16f8e:	4601      	mov	r1, r0
   16f90:	2007      	movs	r0, #7
   16f92:	f7fe beb5 	b.w	15d00 <rpc_message_data_free>
   16f96:	2007      	movs	r0, #7
   16f98:	4770      	bx	lr
   16f9a:	bf00      	nop

00016f9c <datagram_handler_init>:
   16f9c:	b510      	push	{r4, lr}
   16f9e:	4604      	mov	r4, r0
   16fa0:	200c      	movs	r0, #12
   16fa2:	f7f9 f8d9 	bl	10158 <nrf_malloc>
   16fa6:	60e0      	str	r0, [r4, #12]
   16fa8:	b118      	cbz	r0, 16fb2 <datagram_handler_init+0x16>
   16faa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   16fae:	f7fc bb8f 	b.w	136d0 <linked_list_init>
   16fb2:	2004      	movs	r0, #4
   16fb4:	bd10      	pop	{r4, pc}
   16fb6:	bf00      	nop

00016fb8 <datagram_handler_put>:
   16fb8:	b570      	push	{r4, r5, r6, lr}
   16fba:	4606      	mov	r6, r0
   16fbc:	2014      	movs	r0, #20
   16fbe:	460d      	mov	r5, r1
   16fc0:	f7f9 f8ca 	bl	10158 <nrf_malloc>
   16fc4:	b178      	cbz	r0, 16fe6 <datagram_handler_put+0x2e>
   16fc6:	682b      	ldr	r3, [r5, #0]
   16fc8:	4604      	mov	r4, r0
   16fca:	6043      	str	r3, [r0, #4]
   16fcc:	686b      	ldr	r3, [r5, #4]
   16fce:	4601      	mov	r1, r0
   16fd0:	6083      	str	r3, [r0, #8]
   16fd2:	68eb      	ldr	r3, [r5, #12]
   16fd4:	60c3      	str	r3, [r0, #12]
   16fd6:	68ab      	ldr	r3, [r5, #8]
   16fd8:	6103      	str	r3, [r0, #16]
   16fda:	68f0      	ldr	r0, [r6, #12]
   16fdc:	f7fc fb82 	bl	136e4 <linked_list_push>
   16fe0:	b920      	cbnz	r0, 16fec <datagram_handler_put+0x34>
   16fe2:	6868      	ldr	r0, [r5, #4]
   16fe4:	bd70      	pop	{r4, r5, r6, pc}
   16fe6:	f04f 30ff 	mov.w	r0, #4294967295
   16fea:	bd70      	pop	{r4, r5, r6, pc}
   16fec:	4620      	mov	r0, r4
   16fee:	f7f9 f8bd 	bl	1016c <nrf_free>
   16ff2:	f04f 30ff 	mov.w	r0, #4294967295
   16ff6:	bd70      	pop	{r4, r5, r6, pc}

00016ff8 <datagram_handler_get>:
   16ff8:	b5f0      	push	{r4, r5, r6, r7, lr}
   16ffa:	4606      	mov	r6, r0
   16ffc:	b085      	sub	sp, #20
   16ffe:	68c0      	ldr	r0, [r0, #12]
   17000:	460c      	mov	r4, r1
   17002:	4617      	mov	r7, r2
   17004:	f7fc fb8e 	bl	13724 <linked_list_peek>
   17008:	2800      	cmp	r0, #0
   1700a:	d037      	beq.n	1707c <datagram_handler_get+0x84>
   1700c:	6882      	ldr	r2, [r0, #8]
   1700e:	4605      	mov	r5, r0
   17010:	e9d4 0300 	ldrd	r0, r3, [r4]
   17014:	429a      	cmp	r2, r3
   17016:	bf28      	it	cs
   17018:	461a      	movcs	r2, r3
   1701a:	6062      	str	r2, [r4, #4]
   1701c:	b110      	cbz	r0, 17024 <datagram_handler_get+0x2c>
   1701e:	6869      	ldr	r1, [r5, #4]
   17020:	f002 fc46 	bl	198b0 <memcpy>
   17024:	68a0      	ldr	r0, [r4, #8]
   17026:	b118      	cbz	r0, 17030 <datagram_handler_get+0x38>
   17028:	692b      	ldr	r3, [r5, #16]
   1702a:	b10b      	cbz	r3, 17030 <datagram_handler_get+0x38>
   1702c:	68ea      	ldr	r2, [r5, #12]
   1702e:	b9e2      	cbnz	r2, 1706a <datagram_handler_get+0x72>
   17030:	2300      	movs	r3, #0
   17032:	60e3      	str	r3, [r4, #12]
   17034:	073b      	lsls	r3, r7, #28
   17036:	d502      	bpl.n	1703e <datagram_handler_get+0x46>
   17038:	6860      	ldr	r0, [r4, #4]
   1703a:	b005      	add	sp, #20
   1703c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1703e:	68f0      	ldr	r0, [r6, #12]
   17040:	f7fc fb66 	bl	13710 <linked_list_pop>
   17044:	4605      	mov	r5, r0
   17046:	2800      	cmp	r0, #0
   17048:	d0f6      	beq.n	17038 <datagram_handler_get+0x40>
   1704a:	e9d0 3101 	ldrd	r3, r1, [r0, #4]
   1704e:	6902      	ldr	r2, [r0, #16]
   17050:	9300      	str	r3, [sp, #0]
   17052:	68c3      	ldr	r3, [r0, #12]
   17054:	e9cd 1201 	strd	r1, r2, [sp, #4]
   17058:	9303      	str	r3, [sp, #12]
   1705a:	4668      	mov	r0, sp
   1705c:	e9d6 3101 	ldrd	r3, r1, [r6, #4]
   17060:	4798      	blx	r3
   17062:	4628      	mov	r0, r5
   17064:	f7f9 f882 	bl	1016c <nrf_free>
   17068:	e7e6      	b.n	17038 <datagram_handler_get+0x40>
   1706a:	68e3      	ldr	r3, [r4, #12]
   1706c:	429a      	cmp	r2, r3
   1706e:	bf28      	it	cs
   17070:	461a      	movcs	r2, r3
   17072:	60e2      	str	r2, [r4, #12]
   17074:	6929      	ldr	r1, [r5, #16]
   17076:	f002 fc1b 	bl	198b0 <memcpy>
   1707a:	e7db      	b.n	17034 <datagram_handler_get+0x3c>
   1707c:	f04f 30ff 	mov.w	r0, #4294967295
   17080:	e7db      	b.n	1703a <datagram_handler_get+0x42>
   17082:	bf00      	nop

00017084 <datagram_handler_available>:
   17084:	b508      	push	{r3, lr}
   17086:	68c0      	ldr	r0, [r0, #12]
   17088:	f7fc fb4c 	bl	13724 <linked_list_peek>
   1708c:	b108      	cbz	r0, 17092 <datagram_handler_available+0xe>
   1708e:	6880      	ldr	r0, [r0, #8]
   17090:	bd08      	pop	{r3, pc}
   17092:	f04f 30ff 	mov.w	r0, #4294967295
   17096:	bd08      	pop	{r3, pc}

00017098 <datagram_handler_flush>:
   17098:	b530      	push	{r4, r5, lr}
   1709a:	4605      	mov	r5, r0
   1709c:	68c0      	ldr	r0, [r0, #12]
   1709e:	b085      	sub	sp, #20
   170a0:	b9a8      	cbnz	r0, 170ce <datagram_handler_flush+0x36>
   170a2:	e01a      	b.n	170da <datagram_handler_flush+0x42>
   170a4:	68e8      	ldr	r0, [r5, #12]
   170a6:	f7fc fb33 	bl	13710 <linked_list_pop>
   170aa:	4604      	mov	r4, r0
   170ac:	b170      	cbz	r0, 170cc <datagram_handler_flush+0x34>
   170ae:	e9d0 0101 	ldrd	r0, r1, [r0, #4]
   170b2:	e9d4 3203 	ldrd	r3, r2, [r4, #12]
   170b6:	e9cd 0100 	strd	r0, r1, [sp]
   170ba:	e9cd 2302 	strd	r2, r3, [sp, #8]
   170be:	e9d5 3101 	ldrd	r3, r1, [r5, #4]
   170c2:	4668      	mov	r0, sp
   170c4:	4798      	blx	r3
   170c6:	4620      	mov	r0, r4
   170c8:	f7f9 f850 	bl	1016c <nrf_free>
   170cc:	68e8      	ldr	r0, [r5, #12]
   170ce:	f7fc fb2f 	bl	13730 <linked_list_size_get>
   170d2:	2800      	cmp	r0, #0
   170d4:	d1e6      	bne.n	170a4 <datagram_handler_flush+0xc>
   170d6:	b005      	add	sp, #20
   170d8:	bd30      	pop	{r4, r5, pc}
   170da:	2008      	movs	r0, #8
   170dc:	b005      	add	sp, #20
   170de:	bd30      	pop	{r4, r5, pc}

000170e0 <datagram_handler_free>:
   170e0:	b530      	push	{r4, r5, lr}
   170e2:	4605      	mov	r5, r0
   170e4:	68c0      	ldr	r0, [r0, #12]
   170e6:	b085      	sub	sp, #20
   170e8:	b9a0      	cbnz	r0, 17114 <datagram_handler_free+0x34>
   170ea:	e01c      	b.n	17126 <datagram_handler_free+0x46>
   170ec:	f7fc fb10 	bl	13710 <linked_list_pop>
   170f0:	4604      	mov	r4, r0
   170f2:	b170      	cbz	r0, 17112 <datagram_handler_free+0x32>
   170f4:	e9d0 0101 	ldrd	r0, r1, [r0, #4]
   170f8:	e9d4 3203 	ldrd	r3, r2, [r4, #12]
   170fc:	e9cd 0100 	strd	r0, r1, [sp]
   17100:	e9cd 2302 	strd	r2, r3, [sp, #8]
   17104:	e9d5 3101 	ldrd	r3, r1, [r5, #4]
   17108:	4668      	mov	r0, sp
   1710a:	4798      	blx	r3
   1710c:	4620      	mov	r0, r4
   1710e:	f7f9 f82d 	bl	1016c <nrf_free>
   17112:	68e8      	ldr	r0, [r5, #12]
   17114:	f7fc fb0c 	bl	13730 <linked_list_size_get>
   17118:	4604      	mov	r4, r0
   1711a:	68e8      	ldr	r0, [r5, #12]
   1711c:	2c00      	cmp	r4, #0
   1711e:	d1e5      	bne.n	170ec <datagram_handler_free+0xc>
   17120:	f7f9 f824 	bl	1016c <nrf_free>
   17124:	60ec      	str	r4, [r5, #12]
   17126:	b005      	add	sp, #20
   17128:	bd30      	pop	{r4, r5, pc}
   1712a:	bf00      	nop

0001712c <null_handler_init>:
   1712c:	2000      	movs	r0, #0
   1712e:	4770      	bx	lr

00017130 <null_handler_put>:
   17130:	b510      	push	{r4, lr}
   17132:	460c      	mov	r4, r1
   17134:	e9d0 3101 	ldrd	r3, r1, [r0, #4]
   17138:	4620      	mov	r0, r4
   1713a:	4798      	blx	r3
   1713c:	6860      	ldr	r0, [r4, #4]
   1713e:	bd10      	pop	{r4, pc}

00017140 <null_handler_get>:
   17140:	f04f 30ff 	mov.w	r0, #4294967295
   17144:	4770      	bx	lr
   17146:	bf00      	nop

00017148 <null_handler_available>:
   17148:	f04f 30ff 	mov.w	r0, #4294967295
   1714c:	4770      	bx	lr
   1714e:	bf00      	nop

00017150 <null_handler_flush>:
   17150:	2000      	movs	r0, #0
   17152:	4770      	bx	lr

00017154 <null_handler_free>:
   17154:	4770      	bx	lr
   17156:	bf00      	nop

00017158 <packet_handler_create>:
   17158:	2801      	cmp	r0, #1
   1715a:	b538      	push	{r3, r4, r5, lr}
   1715c:	460d      	mov	r5, r1
   1715e:	4614      	mov	r4, r2
   17160:	d00d      	beq.n	1717e <packet_handler_create+0x26>
   17162:	db11      	blt.n	17188 <packet_handler_create+0x30>
   17164:	2803      	cmp	r0, #3
   17166:	dc0f      	bgt.n	17188 <packet_handler_create+0x30>
   17168:	2010      	movs	r0, #16
   1716a:	f7f8 fff5 	bl	10158 <nrf_malloc>
   1716e:	2218      	movs	r2, #24
   17170:	b120      	cbz	r0, 1717c <packet_handler_create+0x24>
   17172:	4b08      	ldr	r3, [pc, #32]	; (17194 <packet_handler_create+0x3c>)
   17174:	6045      	str	r5, [r0, #4]
   17176:	4413      	add	r3, r2
   17178:	6084      	str	r4, [r0, #8]
   1717a:	6003      	str	r3, [r0, #0]
   1717c:	bd38      	pop	{r3, r4, r5, pc}
   1717e:	2014      	movs	r0, #20
   17180:	f7f8 ffea 	bl	10158 <nrf_malloc>
   17184:	2230      	movs	r2, #48	; 0x30
   17186:	e7f3      	b.n	17170 <packet_handler_create+0x18>
   17188:	200c      	movs	r0, #12
   1718a:	f7f8 ffe5 	bl	10158 <nrf_malloc>
   1718e:	2200      	movs	r2, #0
   17190:	e7ee      	b.n	17170 <packet_handler_create+0x18>
   17192:	bf00      	nop
   17194:	0001ab68 	.word	0x0001ab68

00017198 <packet_handler_delete>:
   17198:	b510      	push	{r4, lr}
   1719a:	4604      	mov	r4, r0
   1719c:	6803      	ldr	r3, [r0, #0]
   1719e:	691b      	ldr	r3, [r3, #16]
   171a0:	4798      	blx	r3
   171a2:	6823      	ldr	r3, [r4, #0]
   171a4:	4620      	mov	r0, r4
   171a6:	695b      	ldr	r3, [r3, #20]
   171a8:	4798      	blx	r3
   171aa:	4620      	mov	r0, r4
   171ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   171b0:	f7f8 bfdc 	b.w	1016c <nrf_free>

000171b4 <stream_handler_init>:
   171b4:	b510      	push	{r4, lr}
   171b6:	4604      	mov	r4, r0
   171b8:	200c      	movs	r0, #12
   171ba:	f7f8 ffcd 	bl	10158 <nrf_malloc>
   171be:	60e0      	str	r0, [r4, #12]
   171c0:	b128      	cbz	r0, 171ce <stream_handler_init+0x1a>
   171c2:	2300      	movs	r3, #0
   171c4:	6123      	str	r3, [r4, #16]
   171c6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   171ca:	f7fc ba81 	b.w	136d0 <linked_list_init>
   171ce:	2004      	movs	r0, #4
   171d0:	bd10      	pop	{r4, pc}
   171d2:	bf00      	nop

000171d4 <stream_handler_put>:
   171d4:	b570      	push	{r4, r5, r6, lr}
   171d6:	4606      	mov	r6, r0
   171d8:	2014      	movs	r0, #20
   171da:	460d      	mov	r5, r1
   171dc:	f7f8 ffbc 	bl	10158 <nrf_malloc>
   171e0:	b178      	cbz	r0, 17202 <stream_handler_put+0x2e>
   171e2:	682b      	ldr	r3, [r5, #0]
   171e4:	4604      	mov	r4, r0
   171e6:	6043      	str	r3, [r0, #4]
   171e8:	686b      	ldr	r3, [r5, #4]
   171ea:	4601      	mov	r1, r0
   171ec:	6083      	str	r3, [r0, #8]
   171ee:	68eb      	ldr	r3, [r5, #12]
   171f0:	60c3      	str	r3, [r0, #12]
   171f2:	68ab      	ldr	r3, [r5, #8]
   171f4:	6103      	str	r3, [r0, #16]
   171f6:	68f0      	ldr	r0, [r6, #12]
   171f8:	f7fc fa74 	bl	136e4 <linked_list_push>
   171fc:	b920      	cbnz	r0, 17208 <stream_handler_put+0x34>
   171fe:	6868      	ldr	r0, [r5, #4]
   17200:	bd70      	pop	{r4, r5, r6, pc}
   17202:	f04f 30ff 	mov.w	r0, #4294967295
   17206:	bd70      	pop	{r4, r5, r6, pc}
   17208:	4620      	mov	r0, r4
   1720a:	f7f8 ffaf 	bl	1016c <nrf_free>
   1720e:	f04f 30ff 	mov.w	r0, #4294967295
   17212:	bd70      	pop	{r4, r5, r6, pc}

00017214 <stream_handler_get>:
   17214:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17218:	4682      	mov	sl, r0
   1721a:	b087      	sub	sp, #28
   1721c:	68c0      	ldr	r0, [r0, #12]
   1721e:	4689      	mov	r9, r1
   17220:	4693      	mov	fp, r2
   17222:	f7fc fa7f 	bl	13724 <linked_list_peek>
   17226:	2800      	cmp	r0, #0
   17228:	d072      	beq.n	17310 <stream_handler_get+0xfc>
   1722a:	4605      	mov	r5, r0
   1722c:	f8d9 0008 	ldr.w	r0, [r9, #8]
   17230:	b120      	cbz	r0, 1723c <stream_handler_get+0x28>
   17232:	692b      	ldr	r3, [r5, #16]
   17234:	b113      	cbz	r3, 1723c <stream_handler_get+0x28>
   17236:	68ea      	ldr	r2, [r5, #12]
   17238:	2a00      	cmp	r2, #0
   1723a:	d15c      	bne.n	172f6 <stream_handler_get+0xe2>
   1723c:	2300      	movs	r3, #0
   1723e:	f8c9 300c 	str.w	r3, [r9, #12]
   17242:	f8d9 2000 	ldr.w	r2, [r9]
   17246:	f8d9 8004 	ldr.w	r8, [r9, #4]
   1724a:	f8da 1010 	ldr.w	r1, [sl, #16]
   1724e:	9201      	str	r2, [sp, #4]
   17250:	f1b8 0f00 	cmp.w	r8, #0
   17254:	d05a      	beq.n	1730c <stream_handler_get+0xf8>
   17256:	f00b 0308 	and.w	r3, fp, #8
   1725a:	2400      	movs	r4, #0
   1725c:	9300      	str	r3, [sp, #0]
   1725e:	e010      	b.n	17282 <stream_handler_get+0x6e>
   17260:	f8da 3010 	ldr.w	r3, [sl, #16]
   17264:	443b      	add	r3, r7
   17266:	f8ca 3010 	str.w	r3, [sl, #16]
   1726a:	4628      	mov	r0, r5
   1726c:	f7fc fa62 	bl	13734 <linked_list_get_next>
   17270:	443c      	add	r4, r7
   17272:	4605      	mov	r5, r0
   17274:	2800      	cmp	r0, #0
   17276:	d038      	beq.n	172ea <stream_handler_get+0xd6>
   17278:	45a0      	cmp	r8, r4
   1727a:	d936      	bls.n	172ea <stream_handler_get+0xd6>
   1727c:	2100      	movs	r1, #0
   1727e:	f8d9 2000 	ldr.w	r2, [r9]
   17282:	68ae      	ldr	r6, [r5, #8]
   17284:	eba8 0b04 	sub.w	fp, r8, r4
   17288:	1a76      	subs	r6, r6, r1
   1728a:	455e      	cmp	r6, fp
   1728c:	4637      	mov	r7, r6
   1728e:	bf28      	it	cs
   17290:	465f      	movcs	r7, fp
   17292:	b132      	cbz	r2, 172a2 <stream_handler_get+0x8e>
   17294:	6868      	ldr	r0, [r5, #4]
   17296:	9b01      	ldr	r3, [sp, #4]
   17298:	4401      	add	r1, r0
   1729a:	463a      	mov	r2, r7
   1729c:	1918      	adds	r0, r3, r4
   1729e:	f002 fb07 	bl	198b0 <memcpy>
   172a2:	9b00      	ldr	r3, [sp, #0]
   172a4:	2b00      	cmp	r3, #0
   172a6:	d1e0      	bne.n	1726a <stream_handler_get+0x56>
   172a8:	455e      	cmp	r6, fp
   172aa:	d8d9      	bhi.n	17260 <stream_handler_get+0x4c>
   172ac:	f8da 000c 	ldr.w	r0, [sl, #12]
   172b0:	f7fc fa2e 	bl	13710 <linked_list_pop>
   172b4:	4606      	mov	r6, r0
   172b6:	b170      	cbz	r0, 172d6 <stream_handler_get+0xc2>
   172b8:	e9d0 2301 	ldrd	r2, r3, [r0, #4]
   172bc:	e9d0 0103 	ldrd	r0, r1, [r0, #12]
   172c0:	e9cd 2302 	strd	r2, r3, [sp, #8]
   172c4:	e9cd 1004 	strd	r1, r0, [sp, #16]
   172c8:	e9da 3101 	ldrd	r3, r1, [sl, #4]
   172cc:	a802      	add	r0, sp, #8
   172ce:	4798      	blx	r3
   172d0:	4630      	mov	r0, r6
   172d2:	f7f8 ff4b 	bl	1016c <nrf_free>
   172d6:	2300      	movs	r3, #0
   172d8:	4628      	mov	r0, r5
   172da:	f8ca 3010 	str.w	r3, [sl, #16]
   172de:	f7fc fa29 	bl	13734 <linked_list_get_next>
   172e2:	443c      	add	r4, r7
   172e4:	4605      	mov	r5, r0
   172e6:	2800      	cmp	r0, #0
   172e8:	d1c6      	bne.n	17278 <stream_handler_get+0x64>
   172ea:	4620      	mov	r0, r4
   172ec:	f8c9 4004 	str.w	r4, [r9, #4]
   172f0:	b007      	add	sp, #28
   172f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   172f6:	f8d9 300c 	ldr.w	r3, [r9, #12]
   172fa:	429a      	cmp	r2, r3
   172fc:	bf28      	it	cs
   172fe:	461a      	movcs	r2, r3
   17300:	f8c9 200c 	str.w	r2, [r9, #12]
   17304:	6929      	ldr	r1, [r5, #16]
   17306:	f002 fad3 	bl	198b0 <memcpy>
   1730a:	e79a      	b.n	17242 <stream_handler_get+0x2e>
   1730c:	4644      	mov	r4, r8
   1730e:	e7ec      	b.n	172ea <stream_handler_get+0xd6>
   17310:	f04f 30ff 	mov.w	r0, #4294967295
   17314:	e7ec      	b.n	172f0 <stream_handler_get+0xdc>
   17316:	bf00      	nop

00017318 <stream_handler_available>:
   17318:	b510      	push	{r4, lr}
   1731a:	4604      	mov	r4, r0
   1731c:	68c0      	ldr	r0, [r0, #12]
   1731e:	f7fc fa01 	bl	13724 <linked_list_peek>
   17322:	b150      	cbz	r0, 1733a <stream_handler_available+0x22>
   17324:	6924      	ldr	r4, [r4, #16]
   17326:	4264      	negs	r4, r4
   17328:	6883      	ldr	r3, [r0, #8]
   1732a:	441c      	add	r4, r3
   1732c:	f7fc fa02 	bl	13734 <linked_list_get_next>
   17330:	2800      	cmp	r0, #0
   17332:	d1f9      	bne.n	17328 <stream_handler_available+0x10>
   17334:	ea24 70e4 	bic.w	r0, r4, r4, asr #31
   17338:	bd10      	pop	{r4, pc}
   1733a:	f04f 30ff 	mov.w	r0, #4294967295
   1733e:	bd10      	pop	{r4, pc}

00017340 <stream_handler_flush>:
   17340:	b530      	push	{r4, r5, lr}
   17342:	4605      	mov	r5, r0
   17344:	68c0      	ldr	r0, [r0, #12]
   17346:	b085      	sub	sp, #20
   17348:	b9a8      	cbnz	r0, 17376 <stream_handler_flush+0x36>
   1734a:	e01a      	b.n	17382 <stream_handler_flush+0x42>
   1734c:	68e8      	ldr	r0, [r5, #12]
   1734e:	f7fc f9df 	bl	13710 <linked_list_pop>
   17352:	4604      	mov	r4, r0
   17354:	b170      	cbz	r0, 17374 <stream_handler_flush+0x34>
   17356:	e9d0 0101 	ldrd	r0, r1, [r0, #4]
   1735a:	e9d4 3203 	ldrd	r3, r2, [r4, #12]
   1735e:	e9cd 0100 	strd	r0, r1, [sp]
   17362:	e9cd 2302 	strd	r2, r3, [sp, #8]
   17366:	e9d5 3101 	ldrd	r3, r1, [r5, #4]
   1736a:	4668      	mov	r0, sp
   1736c:	4798      	blx	r3
   1736e:	4620      	mov	r0, r4
   17370:	f7f8 fefc 	bl	1016c <nrf_free>
   17374:	68e8      	ldr	r0, [r5, #12]
   17376:	f7fc f9db 	bl	13730 <linked_list_size_get>
   1737a:	2800      	cmp	r0, #0
   1737c:	d1e6      	bne.n	1734c <stream_handler_flush+0xc>
   1737e:	b005      	add	sp, #20
   17380:	bd30      	pop	{r4, r5, pc}
   17382:	2008      	movs	r0, #8
   17384:	b005      	add	sp, #20
   17386:	bd30      	pop	{r4, r5, pc}

00017388 <stream_handler_free>:
   17388:	b530      	push	{r4, r5, lr}
   1738a:	4605      	mov	r5, r0
   1738c:	68c0      	ldr	r0, [r0, #12]
   1738e:	b085      	sub	sp, #20
   17390:	b9a0      	cbnz	r0, 173bc <stream_handler_free+0x34>
   17392:	e01c      	b.n	173ce <stream_handler_free+0x46>
   17394:	f7fc f9bc 	bl	13710 <linked_list_pop>
   17398:	4604      	mov	r4, r0
   1739a:	b170      	cbz	r0, 173ba <stream_handler_free+0x32>
   1739c:	e9d0 0101 	ldrd	r0, r1, [r0, #4]
   173a0:	e9d4 3203 	ldrd	r3, r2, [r4, #12]
   173a4:	e9cd 0100 	strd	r0, r1, [sp]
   173a8:	e9cd 2302 	strd	r2, r3, [sp, #8]
   173ac:	e9d5 3101 	ldrd	r3, r1, [r5, #4]
   173b0:	4668      	mov	r0, sp
   173b2:	4798      	blx	r3
   173b4:	4620      	mov	r0, r4
   173b6:	f7f8 fed9 	bl	1016c <nrf_free>
   173ba:	68e8      	ldr	r0, [r5, #12]
   173bc:	f7fc f9b8 	bl	13730 <linked_list_size_get>
   173c0:	4604      	mov	r4, r0
   173c2:	68e8      	ldr	r0, [r5, #12]
   173c4:	2c00      	cmp	r4, #0
   173c6:	d1e5      	bne.n	17394 <stream_handler_free+0xc>
   173c8:	f7f8 fed0 	bl	1016c <nrf_free>
   173cc:	60ec      	str	r4, [r5, #12]
   173ce:	b005      	add	sp, #20
   173d0:	bd30      	pop	{r4, r5, pc}
   173d2:	bf00      	nop

000173d4 <SystemInit>:
    
    /* Enable the FPU if the compiler used floating point unit instructions. __FPU_USED is a MACRO defined by the
    * compiler. Since the FPU consumes energy, remember to disable FPU use in the compiler if floating point unit
    * operations are not used in your code. */
    #if (__FPU_USED == 1)
      SCB->CPACR |= (3UL << 20) | (3UL << 22);
   173d4:	4a07      	ldr	r2, [pc, #28]	; (173f4 <SystemInit+0x20>)
   173d6:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
   173da:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
   173de:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  __ASM volatile ("dsb 0xF":::"memory");
   173e2:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   173e6:	f3bf 8f6f 	isb	sy
    SystemCoreClock = __SYSTEM_CLOCK;
   173ea:	4b03      	ldr	r3, [pc, #12]	; (173f8 <SystemInit+0x24>)
   173ec:	4a03      	ldr	r2, [pc, #12]	; (173fc <SystemInit+0x28>)
   173ee:	601a      	str	r2, [r3, #0]
      __DSB();
      __ISB();
    #endif
    
    SystemCoreClockUpdate();
}
   173f0:	4770      	bx	lr
   173f2:	bf00      	nop
   173f4:	e000ed00 	.word	0xe000ed00
   173f8:	20026064 	.word	0x20026064
   173fc:	03d09000 	.word	0x03d09000

00017400 <z_sys_device_do_config_level>:
 * off and the next one begins.
 *
 * @param level init level to run.
 */
void z_sys_device_do_config_level(s32_t level)
{
   17400:	b570      	push	{r4, r5, r6, lr}
		retval = device_conf->init(info);
		if (retval != 0) {
			/* Initialization failed. Clear the API struct so that
			 * device_get_binding() will not succeed for it.
			 */
			info->driver_api = NULL;
   17402:	2600      	movs	r6, #0
	for (info = config_levels[level]; info < config_levels[level+1];
   17404:	4b08      	ldr	r3, [pc, #32]	; (17428 <z_sys_device_do_config_level+0x28>)
   17406:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
   1740a:	3001      	adds	r0, #1
   1740c:	f853 5020 	ldr.w	r5, [r3, r0, lsl #2]
   17410:	42a5      	cmp	r5, r4
   17412:	d800      	bhi.n	17416 <z_sys_device_do_config_level+0x16>
		} else {
			z_object_init(info);
		}
	}
}
   17414:	bd70      	pop	{r4, r5, r6, pc}
		retval = device_conf->init(info);
   17416:	6823      	ldr	r3, [r4, #0]
   17418:	4620      	mov	r0, r4
   1741a:	685b      	ldr	r3, [r3, #4]
   1741c:	4798      	blx	r3
		if (retval != 0) {
   1741e:	b100      	cbz	r0, 17422 <z_sys_device_do_config_level+0x22>
			info->driver_api = NULL;
   17420:	6066      	str	r6, [r4, #4]
								info++) {
   17422:	340c      	adds	r4, #12
   17424:	e7f4      	b.n	17410 <z_sys_device_do_config_level+0x10>
   17426:	bf00      	nop
   17428:	0001abb0 	.word	0x0001abb0

0001742c <z_impl_device_get_binding>:
	/* Split the search into two loops: in the common scenario, where
	 * device names are stored in ROM (and are referenced by the user
	 * with CONFIG_* macros), only cheap pointer comparisons will be
	 * performed.  Reserve string comparisons for a fallback.
	 */
	for (info = __device_init_start; info != __device_init_end; info++) {
   1742c:	4b10      	ldr	r3, [pc, #64]	; (17470 <z_impl_device_get_binding+0x44>)
{
   1742e:	b570      	push	{r4, r5, r6, lr}
   17430:	4605      	mov	r5, r0
   17432:	461e      	mov	r6, r3
	for (info = __device_init_start; info != __device_init_end; info++) {
   17434:	4c0f      	ldr	r4, [pc, #60]	; (17474 <z_impl_device_get_binding+0x48>)
   17436:	429c      	cmp	r4, r3
   17438:	d104      	bne.n	17444 <z_impl_device_get_binding+0x18>
		    (info->config->name == name)) {
			return info;
		}
	}

	for (info = __device_init_start; info != __device_init_end; info++) {
   1743a:	4c0e      	ldr	r4, [pc, #56]	; (17474 <z_impl_device_get_binding+0x48>)
   1743c:	42b4      	cmp	r4, r6
   1743e:	d109      	bne.n	17454 <z_impl_device_get_binding+0x28>
		if (strcmp(name, info->config->name) == 0) {
			return info;
		}
	}

	return NULL;
   17440:	2400      	movs	r4, #0
   17442:	e012      	b.n	1746a <z_impl_device_get_binding+0x3e>
		if ((info->driver_api != NULL) &&
   17444:	6862      	ldr	r2, [r4, #4]
   17446:	b11a      	cbz	r2, 17450 <z_impl_device_get_binding+0x24>
		    (info->config->name == name)) {
   17448:	6822      	ldr	r2, [r4, #0]
		if ((info->driver_api != NULL) &&
   1744a:	6812      	ldr	r2, [r2, #0]
   1744c:	42aa      	cmp	r2, r5
   1744e:	d00c      	beq.n	1746a <z_impl_device_get_binding+0x3e>
	for (info = __device_init_start; info != __device_init_end; info++) {
   17450:	340c      	adds	r4, #12
   17452:	e7f0      	b.n	17436 <z_impl_device_get_binding+0xa>
		if (info->driver_api == NULL) {
   17454:	6863      	ldr	r3, [r4, #4]
   17456:	b90b      	cbnz	r3, 1745c <z_impl_device_get_binding+0x30>
	for (info = __device_init_start; info != __device_init_end; info++) {
   17458:	340c      	adds	r4, #12
   1745a:	e7ef      	b.n	1743c <z_impl_device_get_binding+0x10>
		if (strcmp(name, info->config->name) == 0) {
   1745c:	6823      	ldr	r3, [r4, #0]
   1745e:	4628      	mov	r0, r5
   17460:	6819      	ldr	r1, [r3, #0]
   17462:	f002 f9fa 	bl	1985a <strcmp>
   17466:	2800      	cmp	r0, #0
   17468:	d1f6      	bne.n	17458 <z_impl_device_get_binding+0x2c>
}
   1746a:	4620      	mov	r0, r4
   1746c:	bd70      	pop	{r4, r5, r6, pc}
   1746e:	bf00      	nop
   17470:	200260f4 	.word	0x200260f4
   17474:	20026070 	.word	0x20026070

00017478 <z_impl_z_errno>:
#include <syscalls/z_errno_mrsh.c>

#else
int *z_impl_z_errno(void)
{
	return &_current->errno_var;
   17478:	4b01      	ldr	r3, [pc, #4]	; (17480 <z_impl_z_errno+0x8>)
   1747a:	6898      	ldr	r0, [r3, #8]
}
   1747c:	3054      	adds	r0, #84	; 0x54
   1747e:	4770      	bx	lr
   17480:	2002496c 	.word	0x2002496c

00017484 <z_fatal_error>:
	return 0;
#endif
}

void z_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
   17484:	b570      	push	{r4, r5, r6, lr}
   17486:	4604      	mov	r4, r0
   17488:	460e      	mov	r6, r1
	return z_impl_k_current_get();
   1748a:	f001 f931 	bl	186f0 <z_impl_k_current_get>
#endif

	LOG_ERR("Current thread: %p (%s)", thread,
		log_strdup(thread_name_get(thread)));

	k_sys_fatal_error_handler(reason, esf);
   1748e:	4631      	mov	r1, r6
   17490:	4605      	mov	r5, r0
   17492:	4620      	mov	r0, r4
   17494:	f002 ff95 	bl	1a3c2 <k_sys_fatal_error_handler>
	 *
	 * Note that k_thread_abort() returns on some architectures but
	 * not others; e.g. on ARC, x86_64, Xtensa with ASM2, ARM
	 */
	if (!IS_ENABLED(CONFIG_TEST)) {
		__ASSERT(reason != K_ERR_KERNEL_PANIC,
   17498:	2c04      	cmp	r4, #4
   1749a:	d10c      	bne.n	174b6 <z_fatal_error+0x32>
   1749c:	4908      	ldr	r1, [pc, #32]	; (174c0 <z_fatal_error+0x3c>)
   1749e:	2387      	movs	r3, #135	; 0x87
   174a0:	4a08      	ldr	r2, [pc, #32]	; (174c4 <z_fatal_error+0x40>)
   174a2:	4809      	ldr	r0, [pc, #36]	; (174c8 <z_fatal_error+0x44>)
   174a4:	f002 f881 	bl	195aa <printk>
   174a8:	4808      	ldr	r0, [pc, #32]	; (174cc <z_fatal_error+0x48>)
   174aa:	f002 f87e 	bl	195aa <printk>
   174ae:	2187      	movs	r1, #135	; 0x87
   174b0:	4804      	ldr	r0, [pc, #16]	; (174c4 <z_fatal_error+0x40>)
   174b2:	f002 f891 	bl	195d8 <assert_post_action>
	z_impl_k_thread_abort(thread);
   174b6:	4628      	mov	r0, r5
			}
#endif /*CONFIG_ARCH_HAS_NESTED_EXCEPTION_DETECTION */
	}

	k_thread_abort(thread);
}
   174b8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   174bc:	f7f5 bf94 	b.w	d3e8 <z_impl_k_thread_abort>
   174c0:	0001b56f 	.word	0x0001b56f
   174c4:	0001b54d 	.word	0x0001b54d
   174c8:	0001ac45 	.word	0x0001ac45
   174cc:	0001b58c 	.word	0x0001b58c

000174d0 <idle>:
#else
#define IDLE_YIELD_IF_COOP() do { } while (false)
#endif

void idle(void *unused1, void *unused2, void *unused3)
{
   174d0:	b508      	push	{r3, lr}
	_kernel.idle = ticks;
   174d2:	4d0b      	ldr	r5, [pc, #44]	; (17500 <idle+0x30>)
	__asm__ volatile(
   174d4:	f04f 0220 	mov.w	r2, #32
   174d8:	f3ef 8311 	mrs	r3, BASEPRI
   174dc:	f382 8811 	msr	BASEPRI, r2
   174e0:	f3bf 8f6f 	isb	sy
	s32_t ticks = z_get_next_timeout_expiry();
   174e4:	f001 fc26 	bl	18d34 <z_get_next_timeout_expiry>
	z_set_timeout_expiry((ticks < IDLE_THRESH) ? 1 : ticks, true);
   174e8:	2101      	movs	r1, #1
	s32_t ticks = z_get_next_timeout_expiry();
   174ea:	4604      	mov	r4, r0
	z_set_timeout_expiry((ticks < IDLE_THRESH) ? 1 : ticks, true);
   174ec:	2802      	cmp	r0, #2
   174ee:	bfd8      	it	le
   174f0:	4608      	movle	r0, r1
   174f2:	f001 fc67 	bl	18dc4 <z_set_timeout_expiry>
	_kernel.idle = ticks;
   174f6:	622c      	str	r4, [r5, #32]
   174f8:	f7f5 fcfc 	bl	cef4 <arch_cpu_idle>
   174fc:	e7ea      	b.n	174d4 <idle+0x4>
   174fe:	bf00      	nop
   17500:	2002496c 	.word	0x2002496c

00017504 <z_bss_zero>:
 *
 * @return N/A
 */
void z_bss_zero(void)
{
	(void)memset(__bss_start, 0, __bss_end - __bss_start);
   17504:	4802      	ldr	r0, [pc, #8]	; (17510 <z_bss_zero+0xc>)
   17506:	4a03      	ldr	r2, [pc, #12]	; (17514 <z_bss_zero+0x10>)
   17508:	2100      	movs	r1, #0
   1750a:	1a12      	subs	r2, r2, r0
   1750c:	f002 b9fa 	b.w	19904 <memset>
   17510:	20020000 	.word	0x20020000
   17514:	20024b18 	.word	0x20024b18

00017518 <z_data_copy>:
 * This routine copies the data section from ROM to RAM.
 *
 * @return N/A
 */
void z_data_copy(void)
{
   17518:	b508      	push	{r3, lr}
	(void)memcpy(&__data_ram_start, &__data_rom_start,
		 __data_ram_end - __data_ram_start);
   1751a:	4806      	ldr	r0, [pc, #24]	; (17534 <z_data_copy+0x1c>)
	(void)memcpy(&__data_ram_start, &__data_rom_start,
   1751c:	4a06      	ldr	r2, [pc, #24]	; (17538 <z_data_copy+0x20>)
   1751e:	4907      	ldr	r1, [pc, #28]	; (1753c <z_data_copy+0x24>)
   17520:	1a12      	subs	r2, r2, r0
   17522:	f002 f9c5 	bl	198b0 <memcpy>
#else
	(void)memcpy(&_app_smem_start, &_app_smem_rom_start,
		 _app_smem_end - _app_smem_start);
#endif /* CONFIG_STACK_CANARIES */
#endif /* CONFIG_USERSPACE */
}
   17526:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	(void)memcpy(&_ramfunc_ram_start, &_ramfunc_rom_start,
   1752a:	4a05      	ldr	r2, [pc, #20]	; (17540 <z_data_copy+0x28>)
   1752c:	4905      	ldr	r1, [pc, #20]	; (17544 <z_data_copy+0x2c>)
   1752e:	4806      	ldr	r0, [pc, #24]	; (17548 <z_data_copy+0x30>)
   17530:	f002 b9be 	b.w	198b0 <memcpy>
   17534:	20026058 	.word	0x20026058
   17538:	2002617c 	.word	0x2002617c
   1753c:	0001b8a0 	.word	0x0001b8a0
   17540:	00000000 	.word	0x00000000
   17544:	0001b8a0 	.word	0x0001b8a0
   17548:	20020000 	.word	0x20020000

0001754c <bg_thread_main>:
	static const unsigned int boot_delay = CONFIG_BOOT_DELAY;
#else
	static const unsigned int boot_delay;
#endif

	z_sys_post_kernel = true;
   1754c:	2201      	movs	r2, #1
{
   1754e:	b508      	push	{r3, lr}
	z_sys_post_kernel = true;
   17550:	4b08      	ldr	r3, [pc, #32]	; (17574 <bg_thread_main+0x28>)

	z_sys_device_do_config_level(_SYS_INIT_LEVEL_POST_KERNEL);
   17552:	2002      	movs	r0, #2
	z_sys_post_kernel = true;
   17554:	701a      	strb	r2, [r3, #0]
	z_sys_device_do_config_level(_SYS_INIT_LEVEL_POST_KERNEL);
   17556:	f7ff ff53 	bl	17400 <z_sys_device_do_config_level>
			KERNEL_VERSION_STRING, BOOT_DELAY_BANNER);
#endif
#endif

	/* Final init level before app starts */
	z_sys_device_do_config_level(_SYS_INIT_LEVEL_APPLICATION);
   1755a:	2003      	movs	r0, #3
   1755c:	f7ff ff50 	bl	17400 <z_sys_device_do_config_level>
	extern void __do_init_array_aux(void);
	__do_global_ctors_aux();
	__do_init_array_aux();
#endif

	z_init_static_threads();
   17560:	f001 fa30 	bl	189c4 <z_init_static_threads>
	z_timestamp_main = k_cycle_get_32();
#endif

	extern void main(void);

	main();
   17564:	f7f4 ffee 	bl	c544 <main>

	/* Mark nonessenrial since main() has no more work to do */
	z_main_thread.base.user_options &= ~K_ESSENTIAL;
   17568:	4a03      	ldr	r2, [pc, #12]	; (17578 <bg_thread_main+0x2c>)
   1756a:	7b13      	ldrb	r3, [r2, #12]
   1756c:	f023 0301 	bic.w	r3, r3, #1
   17570:	7313      	strb	r3, [r2, #12]

	/* Dump coverage data once the main() has exited. */
	gcov_coverage_dump();
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */
   17572:	bd08      	pop	{r3, pc}
   17574:	200249d3 	.word	0x200249d3
   17578:	20020854 	.word	0x20020854

0001757c <z_cstart>:
 * cleared/zeroed.
 *
 * @return Does not return
 */
FUNC_NORETURN void z_cstart(void)
{
   1757c:	b580      	push	{r7, lr}
 *
 * @return N/A
 */
static ALWAYS_INLINE void z_arm_interrupt_stack_setup(void)
{
	u32_t msp = (u32_t)(Z_THREAD_STACK_BUFFER(_interrupt_stack)) +
   1757e:	4b34      	ldr	r3, [pc, #208]	; (17650 <z_cstart+0xd4>)
   17580:	b0b2      	sub	sp, #200	; 0xc8
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
   17582:	f383 8808 	msr	MSP, r3
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   17586:	2400      	movs	r4, #0
   17588:	23e0      	movs	r3, #224	; 0xe0
   1758a:	4d32      	ldr	r5, [pc, #200]	; (17654 <z_cstart+0xd8>)

	/* perform any architecture-specific initialization */
	arch_kernel_init();

#ifdef CONFIG_MULTITHREADING
	struct k_thread dummy_thread = {
   1758c:	2701      	movs	r7, #1
   1758e:	f885 3022 	strb.w	r3, [r5, #34]	; 0x22
   17592:	77ec      	strb	r4, [r5, #31]
   17594:	762c      	strb	r4, [r5, #24]
   17596:	766c      	strb	r4, [r5, #25]
   17598:	76ac      	strb	r4, [r5, #26]
#if defined(CONFIG_ARM_SECURE_FIRMWARE)
	NVIC_SetPriority(SecureFault_IRQn, _EXC_FAULT_PRIO);
#endif /* CONFIG_ARM_SECURE_FIRMWARE */

	/* Enable Usage, Mem, & Bus Faults */
	SCB->SHCSR |= SCB_SHCSR_USGFAULTENA_Msk | SCB_SHCSR_MEMFAULTENA_Msk |
   1759a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
# ifdef CONFIG_SCHED_CPU_MASK
		 .base.cpu_mask = -1,
# endif
	};

	_current = &dummy_thread;
   1759c:	4e2e      	ldr	r6, [pc, #184]	; (17658 <z_cstart+0xdc>)
   1759e:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
   175a2:	626b      	str	r3, [r5, #36]	; 0x24

static ALWAYS_INLINE void arch_kernel_init(void)
{
	z_arm_interrupt_stack_setup();
	z_arm_exc_setup();
	z_arm_fault_init();
   175a4:	f7f5 fefa 	bl	d39c <z_arm_fault_init>
	z_arm_cpu_idle_init();
   175a8:	f7f5 fc9e 	bl	cee8 <z_arm_cpu_idle_init>
static ALWAYS_INLINE void z_arm_clear_faults(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Reset all faults */
	SCB->CFSR = SCB_CFSR_USGFAULTSR_Msk |
   175ac:	f04f 33ff 	mov.w	r3, #4294967295
   175b0:	62ab      	str	r3, [r5, #40]	; 0x28
		    SCB_CFSR_MEMFAULTSR_Msk |
		    SCB_CFSR_BUSFAULTSR_Msk;

	/* Clear all Hard Faults - HFSR is write-one-to-clear */
	SCB->HFSR = 0xffffffff;
   175b2:	62eb      	str	r3, [r5, #44]	; 0x2c
	struct k_thread dummy_thread = {
   175b4:	ab06      	add	r3, sp, #24
   175b6:	22b0      	movs	r2, #176	; 0xb0
   175b8:	4621      	mov	r1, r4
   175ba:	4618      	mov	r0, r3
   175bc:	f002 f9a2 	bl	19904 <memset>
	_current = &dummy_thread;
   175c0:	60b0      	str	r0, [r6, #8]
#ifdef CONFIG_USERSPACE
	z_app_shmem_bss_zero();
#endif

	/* perform basic hardware initialization */
	z_sys_device_do_config_level(_SYS_INIT_LEVEL_PRE_KERNEL_1);
   175c2:	4620      	mov	r0, r4
	struct k_thread dummy_thread = {
   175c4:	f88d 7025 	strb.w	r7, [sp, #37]	; 0x25
	z_sys_device_do_config_level(_SYS_INIT_LEVEL_PRE_KERNEL_1);
   175c8:	f7ff ff1a 	bl	17400 <z_sys_device_do_config_level>
	z_sys_device_do_config_level(_SYS_INIT_LEVEL_PRE_KERNEL_2);
   175cc:	4638      	mov	r0, r7
   175ce:	f7ff ff17 	bl	17400 <z_sys_device_do_config_level>
	_kernel.ready_q.cache = &z_main_thread;
   175d2:	4d22      	ldr	r5, [pc, #136]	; (1765c <z_cstart+0xe0>)
	z_sched_init();
   175d4:	f000 ffd4 	bl	18580 <z_sched_init>
	z_setup_new_thread(&z_main_thread, z_main_stack,
   175d8:	4b21      	ldr	r3, [pc, #132]	; (17660 <z_cstart+0xe4>)
   175da:	f44f 6240 	mov.w	r2, #3072	; 0xc00
   175de:	e9cd 7304 	strd	r7, r3, [sp, #16]
   175e2:	e9cd 4402 	strd	r4, r4, [sp, #8]
   175e6:	4b1f      	ldr	r3, [pc, #124]	; (17664 <z_cstart+0xe8>)
   175e8:	e9cd 4400 	strd	r4, r4, [sp]
   175ec:	491e      	ldr	r1, [pc, #120]	; (17668 <z_cstart+0xec>)
   175ee:	4628      	mov	r0, r5
	_kernel.ready_q.cache = &z_main_thread;
   175f0:	6275      	str	r5, [r6, #36]	; 0x24
	z_setup_new_thread(&z_main_thread, z_main_stack,
   175f2:	f001 f951 	bl	18898 <z_setup_new_thread>
	sys_trace_thread_resume(thread);
}

static inline void z_mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
   175f6:	7b6b      	ldrb	r3, [r5, #13]
   175f8:	f023 0204 	bic.w	r2, r3, #4
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
   175fc:	f013 0f1b 	tst.w	r3, #27
	thread->base.thread_state &= ~_THREAD_PRESTART;
   17600:	736a      	strb	r2, [r5, #13]
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
   17602:	d104      	bne.n	1760e <z_cstart+0x92>
	return true;
}

static ALWAYS_INLINE void z_ready_thread(struct k_thread *thread)
{
	if (z_is_thread_ready(thread)) {
   17604:	69ab      	ldr	r3, [r5, #24]
   17606:	b913      	cbnz	r3, 1760e <z_cstart+0x92>
		z_add_thread_to_ready_q(thread);
   17608:	4628      	mov	r0, r5
   1760a:	f000 fbab 	bl	17d64 <z_add_thread_to_ready_q>
	z_setup_new_thread(thread, stack,
   1760e:	4b17      	ldr	r3, [pc, #92]	; (1766c <z_cstart+0xf0>)
   17610:	2201      	movs	r2, #1
   17612:	9305      	str	r3, [sp, #20]
   17614:	230f      	movs	r3, #15
   17616:	e9cd 3203 	strd	r3, r2, [sp, #12]
   1761a:	2300      	movs	r3, #0
   1761c:	4d14      	ldr	r5, [pc, #80]	; (17670 <z_cstart+0xf4>)
   1761e:	e9cd 3301 	strd	r3, r3, [sp, #4]
   17622:	9300      	str	r3, [sp, #0]
   17624:	f44f 72a0 	mov.w	r2, #320	; 0x140
   17628:	4b12      	ldr	r3, [pc, #72]	; (17674 <z_cstart+0xf8>)
   1762a:	4913      	ldr	r1, [pc, #76]	; (17678 <z_cstart+0xfc>)
   1762c:	4628      	mov	r0, r5
   1762e:	f001 f933 	bl	18898 <z_setup_new_thread>
	thread->base.thread_state &= ~_THREAD_PRESTART;
   17632:	7b6b      	ldrb	r3, [r5, #13]
	arch_switch_to_main_thread(&z_main_thread, z_main_stack,
   17634:	f44f 6240 	mov.w	r2, #3072	; 0xc00
   17638:	f023 0304 	bic.w	r3, r3, #4
   1763c:	736b      	strb	r3, [r5, #13]
	list->head = (sys_dnode_t *)list;
   1763e:	4b0f      	ldr	r3, [pc, #60]	; (1767c <z_cstart+0x100>)
   17640:	4909      	ldr	r1, [pc, #36]	; (17668 <z_cstart+0xec>)
	list->tail = (sys_dnode_t *)list;
   17642:	e9c6 3306 	strd	r3, r3, [r6, #24]
   17646:	4805      	ldr	r0, [pc, #20]	; (1765c <z_cstart+0xe0>)
   17648:	4b06      	ldr	r3, [pc, #24]	; (17664 <z_cstart+0xe8>)
	_kernel.cpus[0].idle_thread = &z_idle_thread;
   1764a:	60f5      	str	r5, [r6, #12]
	arch_switch_to_main_thread(&z_main_thread, z_main_stack,
   1764c:	f7f5 fd42 	bl	d0d4 <arch_switch_to_main_thread>
	CODE_UNREACHABLE; /* LCOV_EXCL_LINE */
   17650:	20026058 	.word	0x20026058
   17654:	e000ed00 	.word	0xe000ed00
   17658:	2002496c 	.word	0x2002496c
   1765c:	20020854 	.word	0x20020854
   17660:	0001b5c1 	.word	0x0001b5c1
   17664:	0001754d 	.word	0x0001754d
   17668:	20024b18 	.word	0x20024b18
   1766c:	0001b5c6 	.word	0x0001b5c6
   17670:	200207a4 	.word	0x200207a4
   17674:	000174d1 	.word	0x000174d1
   17678:	20025718 	.word	0x20025718
   1767c:	20024984 	.word	0x20024984

00017680 <init_static_pools>:
	z_waitq_init(&p->wait_q);
	z_sys_mem_pool_base_init(&p->base);
}

int init_static_pools(struct device *unused)
{
   17680:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	ARG_UNUSED(unused);

	Z_STRUCT_SECTION_FOREACH(k_mem_pool, p) {
   17682:	4d10      	ldr	r5, [pc, #64]	; (176c4 <init_static_pools+0x44>)
   17684:	4c10      	ldr	r4, [pc, #64]	; (176c8 <init_static_pools+0x48>)
   17686:	462f      	mov	r7, r5
   17688:	4e10      	ldr	r6, [pc, #64]	; (176cc <init_static_pools+0x4c>)
   1768a:	42ac      	cmp	r4, r5
   1768c:	d90c      	bls.n	176a8 <init_static_pools+0x28>
   1768e:	4910      	ldr	r1, [pc, #64]	; (176d0 <init_static_pools+0x50>)
   17690:	2328      	movs	r3, #40	; 0x28
   17692:	4632      	mov	r2, r6
   17694:	480f      	ldr	r0, [pc, #60]	; (176d4 <init_static_pools+0x54>)
   17696:	f001 ff88 	bl	195aa <printk>
   1769a:	480f      	ldr	r0, [pc, #60]	; (176d8 <init_static_pools+0x58>)
   1769c:	f001 ff85 	bl	195aa <printk>
   176a0:	2128      	movs	r1, #40	; 0x28
   176a2:	4630      	mov	r0, r6
   176a4:	f001 ff98 	bl	195d8 <assert_post_action>
   176a8:	42bc      	cmp	r4, r7
   176aa:	d301      	bcc.n	176b0 <init_static_pools+0x30>
		k_mem_pool_init(p);
	}

	return 0;
}
   176ac:	2000      	movs	r0, #0
   176ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	SYS_DLIST_FOR_EACH_CONTAINER(&((wq)->waitq), thread_ptr, \
				     base.qnode_dlist)

static inline void z_waitq_init(_wait_q_t *w)
{
	sys_dlist_init(&w->waitq);
   176b0:	f104 0314 	add.w	r3, r4, #20
	z_sys_mem_pool_base_init(&p->base);
   176b4:	4620      	mov	r0, r4
   176b6:	e9c4 3305 	strd	r3, r3, [r4, #20]
   176ba:	f001 fcfe 	bl	190ba <z_sys_mem_pool_base_init>
	Z_STRUCT_SECTION_FOREACH(k_mem_pool, p) {
   176be:	341c      	adds	r4, #28
   176c0:	e7e3      	b.n	1768a <init_static_pools+0xa>
   176c2:	bf00      	nop
   176c4:	20026110 	.word	0x20026110
   176c8:	200260f4 	.word	0x200260f4
   176cc:	0001b5cb 	.word	0x0001b5cb
   176d0:	0001b5ef 	.word	0x0001b5ef
   176d4:	0001ac45 	.word	0x0001ac45
   176d8:	0001b609 	.word	0x0001b609

000176dc <k_mem_pool_alloc>:

SYS_INIT(init_static_pools, PRE_KERNEL_1, CONFIG_KERNEL_INIT_PRIORITY_OBJECTS);

int k_mem_pool_alloc(struct k_mem_pool *p, struct k_mem_block *block,
		     size_t size, s32_t timeout)
{
   176dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   176e0:	4607      	mov	r7, r0
   176e2:	b085      	sub	sp, #20
   176e4:	460d      	mov	r5, r1
   176e6:	4692      	mov	sl, r2
   176e8:	461c      	mov	r4, r3
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   176ea:	f3ef 8305 	mrs	r3, IPSR
	int ret;
	s64_t end = 0;

	__ASSERT(!(arch_is_in_isr() && timeout != K_NO_WAIT), "");
   176ee:	2b00      	cmp	r3, #0
   176f0:	d048      	beq.n	17784 <k_mem_pool_alloc+0xa8>
   176f2:	2c00      	cmp	r4, #0
   176f4:	d139      	bne.n	1776a <k_mem_pool_alloc+0x8e>
	s64_t end = 0;
   176f6:	f04f 0800 	mov.w	r8, #0
	return pool - &_k_mem_pool_list_start[0];
   176fa:	4b26      	ldr	r3, [pc, #152]	; (17794 <k_mem_pool_alloc+0xb8>)
   176fc:	4e26      	ldr	r6, [pc, #152]	; (17798 <k_mem_pool_alloc+0xbc>)
   176fe:	1afb      	subs	r3, r7, r3
   17700:	109b      	asrs	r3, r3, #2
   17702:	435e      	muls	r6, r3
		if (ret == 0 || timeout == K_NO_WAIT ||
		    ret != -ENOMEM) {
			return ret;
		}

		z_pend_curr_unlocked(&p->wait_q, timeout);
   17704:	f107 0b14 	add.w	fp, r7, #20
		block->id.pool = pool_id(p);
   17708:	b2f6      	uxtb	r6, r6
		ret = z_sys_mem_pool_block_alloc(&p->base, size,
   1770a:	ab03      	add	r3, sp, #12
   1770c:	aa02      	add	r2, sp, #8
   1770e:	9500      	str	r5, [sp, #0]
   17710:	4651      	mov	r1, sl
   17712:	4638      	mov	r0, r7
   17714:	f001 fd17 	bl	19146 <z_sys_mem_pool_block_alloc>
		block->id.level = level_num;
   17718:	796b      	ldrb	r3, [r5, #5]
   1771a:	9a02      	ldr	r2, [sp, #8]
		block->id.pool = pool_id(p);
   1771c:	712e      	strb	r6, [r5, #4]
		block->id.level = level_num;
   1771e:	f362 0303 	bfi	r3, r2, #0, #4
   17722:	716b      	strb	r3, [r5, #5]
		block->id.block = block_num;
   17724:	686b      	ldr	r3, [r5, #4]
   17726:	9a03      	ldr	r2, [sp, #12]
   17728:	f362 331f 	bfi	r3, r2, #12, #20
   1772c:	606b      	str	r3, [r5, #4]
		if (ret == 0 || timeout == K_NO_WAIT ||
   1772e:	b1c8      	cbz	r0, 17764 <k_mem_pool_alloc+0x88>
   17730:	b1c4      	cbz	r4, 17764 <k_mem_pool_alloc+0x88>
   17732:	f110 0f0c 	cmn.w	r0, #12
   17736:	d115      	bne.n	17764 <k_mem_pool_alloc+0x88>
   17738:	f04f 0320 	mov.w	r3, #32
   1773c:	f3ef 8011 	mrs	r0, BASEPRI
   17740:	f383 8811 	msr	BASEPRI, r3
   17744:	f3bf 8f6f 	isb	sy
	(void) z_pend_curr_irqlock(arch_irq_lock(), wait_q, timeout);
   17748:	4622      	mov	r2, r4
   1774a:	4659      	mov	r1, fp
   1774c:	f000 fe00 	bl	18350 <z_pend_curr_irqlock>

		if (timeout != K_FOREVER) {
   17750:	1c63      	adds	r3, r4, #1
   17752:	d0da      	beq.n	1770a <k_mem_pool_alloc+0x2e>
	return z_impl_k_uptime_get();
   17754:	f002 feae 	bl	1a4b4 <z_impl_k_uptime_get>
			timeout = end - k_uptime_get();
   17758:	eba8 0400 	sub.w	r4, r8, r0
			if (timeout <= 0) {
   1775c:	2c00      	cmp	r4, #0
   1775e:	dcd4      	bgt.n	1770a <k_mem_pool_alloc+0x2e>
				break;
			}
		}
	}

	return -EAGAIN;
   17760:	f06f 000a 	mvn.w	r0, #10
}
   17764:	b005      	add	sp, #20
   17766:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	__ASSERT(!(arch_is_in_isr() && timeout != K_NO_WAIT), "");
   1776a:	490c      	ldr	r1, [pc, #48]	; (1779c <k_mem_pool_alloc+0xc0>)
   1776c:	2337      	movs	r3, #55	; 0x37
   1776e:	4a0c      	ldr	r2, [pc, #48]	; (177a0 <k_mem_pool_alloc+0xc4>)
   17770:	480c      	ldr	r0, [pc, #48]	; (177a4 <k_mem_pool_alloc+0xc8>)
   17772:	f001 ff1a 	bl	195aa <printk>
   17776:	480c      	ldr	r0, [pc, #48]	; (177a8 <k_mem_pool_alloc+0xcc>)
   17778:	f001 ff17 	bl	195aa <printk>
   1777c:	2137      	movs	r1, #55	; 0x37
   1777e:	4808      	ldr	r0, [pc, #32]	; (177a0 <k_mem_pool_alloc+0xc4>)
   17780:	f001 ff2a 	bl	195d8 <assert_post_action>
	if (timeout > 0) {
   17784:	2c00      	cmp	r4, #0
   17786:	ddb6      	ble.n	176f6 <k_mem_pool_alloc+0x1a>
   17788:	f002 fe94 	bl	1a4b4 <z_impl_k_uptime_get>
		end = k_uptime_get() + timeout;
   1778c:	eb10 0804 	adds.w	r8, r0, r4
   17790:	e7b3      	b.n	176fa <k_mem_pool_alloc+0x1e>
   17792:	bf00      	nop
   17794:	200260f4 	.word	0x200260f4
   17798:	b6db6db7 	.word	0xb6db6db7
   1779c:	0001b628 	.word	0x0001b628
   177a0:	0001b5cb 	.word	0x0001b5cb
   177a4:	0001ac45 	.word	0x0001ac45
   177a8:	0001b2ea 	.word	0x0001b2ea

000177ac <k_mem_pool_free_id>:

void k_mem_pool_free_id(struct k_mem_block_id *id)
{
   177ac:	b570      	push	{r4, r5, r6, lr}
   177ae:	7804      	ldrb	r4, [r0, #0]
	int need_sched = 0;
	struct k_mem_pool *p = get_pool(id->pool);

	z_sys_mem_pool_block_free(&p->base, id->level, id->block);
   177b0:	6802      	ldr	r2, [r0, #0]
   177b2:	7841      	ldrb	r1, [r0, #1]
   177b4:	4d24      	ldr	r5, [pc, #144]	; (17848 <k_mem_pool_free_id+0x9c>)
   177b6:	ebc4 04c4 	rsb	r4, r4, r4, lsl #3
   177ba:	00a4      	lsls	r4, r4, #2
   177bc:	0b12      	lsrs	r2, r2, #12
   177be:	f001 010f 	and.w	r1, r1, #15
   177c2:	1928      	adds	r0, r5, r4
   177c4:	f7f4 fec8 	bl	c558 <z_sys_mem_pool_block_free>
   177c8:	f04f 0320 	mov.w	r3, #32
   177cc:	f3ef 8611 	mrs	r6, BASEPRI
   177d0:	f383 8811 	msr	BASEPRI, r3
   177d4:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   177d8:	481c      	ldr	r0, [pc, #112]	; (1784c <k_mem_pool_free_id+0xa0>)
   177da:	f001 f875 	bl	188c8 <z_spin_lock_valid>
   177de:	b968      	cbnz	r0, 177fc <k_mem_pool_free_id+0x50>
   177e0:	234a      	movs	r3, #74	; 0x4a
   177e2:	4a1b      	ldr	r2, [pc, #108]	; (17850 <k_mem_pool_free_id+0xa4>)
   177e4:	491b      	ldr	r1, [pc, #108]	; (17854 <k_mem_pool_free_id+0xa8>)
   177e6:	481c      	ldr	r0, [pc, #112]	; (17858 <k_mem_pool_free_id+0xac>)
   177e8:	f001 fedf 	bl	195aa <printk>
   177ec:	4917      	ldr	r1, [pc, #92]	; (1784c <k_mem_pool_free_id+0xa0>)
   177ee:	481b      	ldr	r0, [pc, #108]	; (1785c <k_mem_pool_free_id+0xb0>)
   177f0:	f001 fedb 	bl	195aa <printk>
   177f4:	214a      	movs	r1, #74	; 0x4a
   177f6:	4816      	ldr	r0, [pc, #88]	; (17850 <k_mem_pool_free_id+0xa4>)
   177f8:	f001 feee 	bl	195d8 <assert_post_action>
	z_spin_lock_set_owner(l);
   177fc:	4813      	ldr	r0, [pc, #76]	; (1784c <k_mem_pool_free_id+0xa0>)
   177fe:	f001 f881 	bl	18904 <z_spin_lock_set_owner>
	 * is unsynchronized.  Maybe we want to put the lock into the
	 * wait_q instead and make the API safe?)
	 */
	k_spinlock_key_t key = k_spin_lock(&lock);

	need_sched = z_unpend_all(&p->wait_q);
   17802:	f104 0014 	add.w	r0, r4, #20
   17806:	4428      	add	r0, r5
   17808:	f002 fe1f 	bl	1a44a <z_unpend_all>

	if (need_sched != 0) {
   1780c:	b128      	cbz	r0, 1781a <k_mem_pool_free_id+0x6e>
		z_reschedule(&lock, key);
   1780e:	4631      	mov	r1, r6
	} else {
		k_spin_unlock(&lock, key);
	}
}
   17810:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		z_reschedule(&lock, key);
   17814:	480d      	ldr	r0, [pc, #52]	; (1784c <k_mem_pool_free_id+0xa0>)
   17816:	f000 b8bb 	b.w	17990 <z_reschedule>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1781a:	480c      	ldr	r0, [pc, #48]	; (1784c <k_mem_pool_free_id+0xa0>)
   1781c:	f001 f862 	bl	188e4 <z_spin_unlock_valid>
   17820:	b968      	cbnz	r0, 1783e <k_mem_pool_free_id+0x92>
   17822:	235d      	movs	r3, #93	; 0x5d
   17824:	4a0a      	ldr	r2, [pc, #40]	; (17850 <k_mem_pool_free_id+0xa4>)
   17826:	490e      	ldr	r1, [pc, #56]	; (17860 <k_mem_pool_free_id+0xb4>)
   17828:	480b      	ldr	r0, [pc, #44]	; (17858 <k_mem_pool_free_id+0xac>)
   1782a:	f001 febe 	bl	195aa <printk>
   1782e:	4907      	ldr	r1, [pc, #28]	; (1784c <k_mem_pool_free_id+0xa0>)
   17830:	480c      	ldr	r0, [pc, #48]	; (17864 <k_mem_pool_free_id+0xb8>)
   17832:	f001 feba 	bl	195aa <printk>
   17836:	215d      	movs	r1, #93	; 0x5d
   17838:	4805      	ldr	r0, [pc, #20]	; (17850 <k_mem_pool_free_id+0xa4>)
   1783a:	f001 fecd 	bl	195d8 <assert_post_action>
	__asm__ volatile(
   1783e:	f386 8811 	msr	BASEPRI, r6
   17842:	f3bf 8f6f 	isb	sy
}
   17846:	bd70      	pop	{r4, r5, r6, pc}
   17848:	200260f4 	.word	0x200260f4
   1784c:	20024968 	.word	0x20024968
   17850:	0001adf1 	.word	0x0001adf1
   17854:	0001ae17 	.word	0x0001ae17
   17858:	0001ac45 	.word	0x0001ac45
   1785c:	0001ae2c 	.word	0x0001ae2c
   17860:	0001ae44 	.word	0x0001ae44
   17864:	0001ae5b 	.word	0x0001ae5b

00017868 <k_malloc>:
		  CONFIG_HEAP_MEM_POOL_SIZE, 1, 4);
#define _HEAP_MEM_POOL (&_heap_mem_pool)

void *k_malloc(size_t size)
{
	return k_mem_pool_malloc(_HEAP_MEM_POOL, size);
   17868:	4601      	mov	r1, r0
   1786a:	4801      	ldr	r0, [pc, #4]	; (17870 <k_malloc+0x8>)
   1786c:	f002 bdaf 	b.w	1a3ce <k_mem_pool_malloc>
   17870:	200260f4 	.word	0x200260f4

00017874 <pended_on.isra.17>:
	}
}

static _wait_q_t *pended_on(struct k_thread *thread)
{
	__ASSERT_NO_MSG(thread->base.pended_on);
   17874:	6803      	ldr	r3, [r0, #0]
static _wait_q_t *pended_on(struct k_thread *thread)
   17876:	b510      	push	{r4, lr}
   17878:	4604      	mov	r4, r0
	__ASSERT_NO_MSG(thread->base.pended_on);
   1787a:	b95b      	cbnz	r3, 17894 <pended_on.isra.17+0x20>
   1787c:	4906      	ldr	r1, [pc, #24]	; (17898 <pended_on.isra.17+0x24>)
   1787e:	4807      	ldr	r0, [pc, #28]	; (1789c <pended_on.isra.17+0x28>)
   17880:	f240 139d 	movw	r3, #413	; 0x19d
   17884:	4a06      	ldr	r2, [pc, #24]	; (178a0 <pended_on.isra.17+0x2c>)
   17886:	f001 fe90 	bl	195aa <printk>
   1788a:	f240 119d 	movw	r1, #413	; 0x19d
   1788e:	4804      	ldr	r0, [pc, #16]	; (178a0 <pended_on.isra.17+0x2c>)
   17890:	f001 fea2 	bl	195d8 <assert_post_action>

	return thread->base.pended_on;
}
   17894:	6820      	ldr	r0, [r4, #0]
   17896:	bd10      	pop	{r4, pc}
   17898:	0001b731 	.word	0x0001b731
   1789c:	0001ac45 	.word	0x0001ac45
   178a0:	0001b70f 	.word	0x0001b70f

000178a4 <z_reset_time_slice>:
{
   178a4:	b510      	push	{r4, lr}
	if (slice_time != 0) {
   178a6:	4c08      	ldr	r4, [pc, #32]	; (178c8 <z_reset_time_slice+0x24>)
   178a8:	6823      	ldr	r3, [r4, #0]
   178aa:	b15b      	cbz	r3, 178c4 <z_reset_time_slice+0x20>
		_current_cpu->slice_ticks = slice_time + z_clock_elapsed();
   178ac:	f7f5 fa56 	bl	cd5c <z_clock_elapsed>
   178b0:	6823      	ldr	r3, [r4, #0]
   178b2:	4a06      	ldr	r2, [pc, #24]	; (178cc <z_reset_time_slice+0x28>)
   178b4:	4418      	add	r0, r3
   178b6:	6110      	str	r0, [r2, #16]
		z_set_timeout_expiry(slice_time, false);
   178b8:	2100      	movs	r1, #0
}
   178ba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		z_set_timeout_expiry(slice_time, false);
   178be:	4618      	mov	r0, r3
   178c0:	f001 ba80 	b.w	18dc4 <z_set_timeout_expiry>
}
   178c4:	bd10      	pop	{r4, pc}
   178c6:	bf00      	nop
   178c8:	200249ac 	.word	0x200249ac
   178cc:	2002496c 	.word	0x2002496c

000178d0 <k_sched_time_slice_set>:
{
   178d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   178d2:	4607      	mov	r7, r0
   178d4:	460d      	mov	r5, r1
	__asm__ volatile(
   178d6:	f04f 0320 	mov.w	r3, #32
   178da:	f3ef 8411 	mrs	r4, BASEPRI
   178de:	f383 8811 	msr	BASEPRI, r3
   178e2:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   178e6:	4820      	ldr	r0, [pc, #128]	; (17968 <k_sched_time_slice_set+0x98>)
   178e8:	f000 ffee 	bl	188c8 <z_spin_lock_valid>
   178ec:	b968      	cbnz	r0, 1790a <k_sched_time_slice_set+0x3a>
   178ee:	234a      	movs	r3, #74	; 0x4a
   178f0:	4a1e      	ldr	r2, [pc, #120]	; (1796c <k_sched_time_slice_set+0x9c>)
   178f2:	491f      	ldr	r1, [pc, #124]	; (17970 <k_sched_time_slice_set+0xa0>)
   178f4:	481f      	ldr	r0, [pc, #124]	; (17974 <k_sched_time_slice_set+0xa4>)
   178f6:	f001 fe58 	bl	195aa <printk>
   178fa:	491b      	ldr	r1, [pc, #108]	; (17968 <k_sched_time_slice_set+0x98>)
   178fc:	481e      	ldr	r0, [pc, #120]	; (17978 <k_sched_time_slice_set+0xa8>)
   178fe:	f001 fe54 	bl	195aa <printk>
   17902:	214a      	movs	r1, #74	; 0x4a
   17904:	4819      	ldr	r0, [pc, #100]	; (1796c <k_sched_time_slice_set+0x9c>)
   17906:	f001 fe67 	bl	195d8 <assert_post_action>
	z_spin_lock_set_owner(l);
   1790a:	4817      	ldr	r0, [pc, #92]	; (17968 <k_sched_time_slice_set+0x98>)
   1790c:	f000 fffa 	bl	18904 <z_spin_lock_set_owner>
		} else {
			return t * (to_hz / from_hz);
		}
	} else {
		if (result32) {
			return (u32_t)((t * to_hz + off) / from_hz);
   17910:	f44f 4600 	mov.w	r6, #32768	; 0x8000
		_current_cpu->slice_ticks = 0;
   17914:	2200      	movs	r2, #0
   17916:	f240 30e7 	movw	r0, #999	; 0x3e7
   1791a:	2100      	movs	r1, #0
   1791c:	4b17      	ldr	r3, [pc, #92]	; (1797c <k_sched_time_slice_set+0xac>)
   1791e:	fbe6 0107 	umlal	r0, r1, r6, r7
   17922:	611a      	str	r2, [r3, #16]
   17924:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   17928:	2300      	movs	r3, #0
   1792a:	f7f4 fc87 	bl	c23c <__aeabi_uldivmod>
		slice_time = k_ms_to_ticks_ceil32(slice);
   1792e:	4b14      	ldr	r3, [pc, #80]	; (17980 <k_sched_time_slice_set+0xb0>)
   17930:	6018      	str	r0, [r3, #0]
		slice_max_prio = prio;
   17932:	4b14      	ldr	r3, [pc, #80]	; (17984 <k_sched_time_slice_set+0xb4>)
   17934:	601d      	str	r5, [r3, #0]
		z_reset_time_slice();
   17936:	f7ff ffb5 	bl	178a4 <z_reset_time_slice>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1793a:	480b      	ldr	r0, [pc, #44]	; (17968 <k_sched_time_slice_set+0x98>)
   1793c:	f000 ffd2 	bl	188e4 <z_spin_unlock_valid>
   17940:	b968      	cbnz	r0, 1795e <k_sched_time_slice_set+0x8e>
   17942:	235d      	movs	r3, #93	; 0x5d
   17944:	4a09      	ldr	r2, [pc, #36]	; (1796c <k_sched_time_slice_set+0x9c>)
   17946:	4910      	ldr	r1, [pc, #64]	; (17988 <k_sched_time_slice_set+0xb8>)
   17948:	480a      	ldr	r0, [pc, #40]	; (17974 <k_sched_time_slice_set+0xa4>)
   1794a:	f001 fe2e 	bl	195aa <printk>
   1794e:	4906      	ldr	r1, [pc, #24]	; (17968 <k_sched_time_slice_set+0x98>)
   17950:	480e      	ldr	r0, [pc, #56]	; (1798c <k_sched_time_slice_set+0xbc>)
   17952:	f001 fe2a 	bl	195aa <printk>
   17956:	215d      	movs	r1, #93	; 0x5d
   17958:	4804      	ldr	r0, [pc, #16]	; (1796c <k_sched_time_slice_set+0x9c>)
   1795a:	f001 fe3d 	bl	195d8 <assert_post_action>
	__asm__ volatile(
   1795e:	f384 8811 	msr	BASEPRI, r4
   17962:	f3bf 8f6f 	isb	sy
}
   17966:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   17968:	200249a4 	.word	0x200249a4
   1796c:	0001adf1 	.word	0x0001adf1
   17970:	0001ae17 	.word	0x0001ae17
   17974:	0001ac45 	.word	0x0001ac45
   17978:	0001ae2c 	.word	0x0001ae2c
   1797c:	2002496c 	.word	0x2002496c
   17980:	200249ac 	.word	0x200249ac
   17984:	200249a8 	.word	0x200249a8
   17988:	0001ae44 	.word	0x0001ae44
   1798c:	0001ae5b 	.word	0x0001ae5b

00017990 <z_reschedule>:

	return arch_irq_unlocked(key) && !arch_is_in_isr();
}

void z_reschedule(struct k_spinlock *lock, k_spinlock_key_t key)
{
   17990:	b538      	push	{r3, r4, r5, lr}
   17992:	4604      	mov	r4, r0
	return arch_irq_unlocked(key) && !arch_is_in_isr();
   17994:	460d      	mov	r5, r1
   17996:	b9c1      	cbnz	r1, 179ca <z_reschedule+0x3a>
   17998:	f3ef 8305 	mrs	r3, IPSR
   1799c:	b9ab      	cbnz	r3, 179ca <z_reschedule+0x3a>
 */
static ALWAYS_INLINE void k_spin_release(struct k_spinlock *l)
{
	ARG_UNUSED(l);
#ifdef CONFIG_SPIN_VALIDATE
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1799e:	f000 ffa1 	bl	188e4 <z_spin_unlock_valid>
   179a2:	b968      	cbnz	r0, 179c0 <z_reschedule+0x30>
   179a4:	2374      	movs	r3, #116	; 0x74
   179a6:	4a14      	ldr	r2, [pc, #80]	; (179f8 <z_reschedule+0x68>)
   179a8:	4914      	ldr	r1, [pc, #80]	; (179fc <z_reschedule+0x6c>)
   179aa:	4815      	ldr	r0, [pc, #84]	; (17a00 <z_reschedule+0x70>)
   179ac:	f001 fdfd 	bl	195aa <printk>
   179b0:	4621      	mov	r1, r4
   179b2:	4814      	ldr	r0, [pc, #80]	; (17a04 <z_reschedule+0x74>)
   179b4:	f001 fdf9 	bl	195aa <printk>
   179b8:	2174      	movs	r1, #116	; 0x74
   179ba:	480f      	ldr	r0, [pc, #60]	; (179f8 <z_reschedule+0x68>)
   179bc:	f001 fe0c 	bl	195d8 <assert_post_action>
	if (resched(key.key)) {
		z_swap(lock, key);
	} else {
		k_spin_unlock(lock, key);
	}
}
   179c0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   179c4:	2000      	movs	r0, #0
   179c6:	f7f5 bac9 	b.w	cf5c <arch_swap>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   179ca:	4620      	mov	r0, r4
   179cc:	f000 ff8a 	bl	188e4 <z_spin_unlock_valid>
   179d0:	b968      	cbnz	r0, 179ee <z_reschedule+0x5e>
   179d2:	235d      	movs	r3, #93	; 0x5d
   179d4:	4a08      	ldr	r2, [pc, #32]	; (179f8 <z_reschedule+0x68>)
   179d6:	4909      	ldr	r1, [pc, #36]	; (179fc <z_reschedule+0x6c>)
   179d8:	4809      	ldr	r0, [pc, #36]	; (17a00 <z_reschedule+0x70>)
   179da:	f001 fde6 	bl	195aa <printk>
   179de:	4621      	mov	r1, r4
   179e0:	4808      	ldr	r0, [pc, #32]	; (17a04 <z_reschedule+0x74>)
   179e2:	f001 fde2 	bl	195aa <printk>
   179e6:	215d      	movs	r1, #93	; 0x5d
   179e8:	4803      	ldr	r0, [pc, #12]	; (179f8 <z_reschedule+0x68>)
   179ea:	f001 fdf5 	bl	195d8 <assert_post_action>
   179ee:	f385 8811 	msr	BASEPRI, r5
   179f2:	f3bf 8f6f 	isb	sy
   179f6:	bd38      	pop	{r3, r4, r5, pc}
   179f8:	0001adf1 	.word	0x0001adf1
   179fc:	0001ae44 	.word	0x0001ae44
   17a00:	0001ac45 	.word	0x0001ac45
   17a04:	0001ae5b 	.word	0x0001ae5b

00017a08 <k_sched_lock>:
		irq_unlock(key);
	}
}

void k_sched_lock(void)
{
   17a08:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
   17a0a:	f04f 0320 	mov.w	r3, #32
   17a0e:	f3ef 8511 	mrs	r5, BASEPRI
   17a12:	f383 8811 	msr	BASEPRI, r3
   17a16:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   17a1a:	482b      	ldr	r0, [pc, #172]	; (17ac8 <k_sched_lock+0xc0>)
   17a1c:	f000 ff54 	bl	188c8 <z_spin_lock_valid>
   17a20:	b968      	cbnz	r0, 17a3e <k_sched_lock+0x36>
   17a22:	234a      	movs	r3, #74	; 0x4a
   17a24:	4a29      	ldr	r2, [pc, #164]	; (17acc <k_sched_lock+0xc4>)
   17a26:	492a      	ldr	r1, [pc, #168]	; (17ad0 <k_sched_lock+0xc8>)
   17a28:	482a      	ldr	r0, [pc, #168]	; (17ad4 <k_sched_lock+0xcc>)
   17a2a:	f001 fdbe 	bl	195aa <printk>
   17a2e:	4926      	ldr	r1, [pc, #152]	; (17ac8 <k_sched_lock+0xc0>)
   17a30:	4829      	ldr	r0, [pc, #164]	; (17ad8 <k_sched_lock+0xd0>)
   17a32:	f001 fdba 	bl	195aa <printk>
   17a36:	214a      	movs	r1, #74	; 0x4a
   17a38:	4824      	ldr	r0, [pc, #144]	; (17acc <k_sched_lock+0xc4>)
   17a3a:	f001 fdcd 	bl	195d8 <assert_post_action>
	z_spin_lock_set_owner(l);
   17a3e:	4822      	ldr	r0, [pc, #136]	; (17ac8 <k_sched_lock+0xc0>)
   17a40:	f000 ff60 	bl	18904 <z_spin_lock_set_owner>
   17a44:	f3ef 8305 	mrs	r3, IPSR
}

static inline void z_sched_lock(void)
{
#ifdef CONFIG_PREEMPT_ENABLED
	__ASSERT(!arch_is_in_isr(), "");
   17a48:	b173      	cbz	r3, 17a68 <k_sched_lock+0x60>
   17a4a:	4924      	ldr	r1, [pc, #144]	; (17adc <k_sched_lock+0xd4>)
   17a4c:	f240 130d 	movw	r3, #269	; 0x10d
   17a50:	4a23      	ldr	r2, [pc, #140]	; (17ae0 <k_sched_lock+0xd8>)
   17a52:	4820      	ldr	r0, [pc, #128]	; (17ad4 <k_sched_lock+0xcc>)
   17a54:	f001 fda9 	bl	195aa <printk>
   17a58:	4822      	ldr	r0, [pc, #136]	; (17ae4 <k_sched_lock+0xdc>)
   17a5a:	f001 fda6 	bl	195aa <printk>
   17a5e:	f240 110d 	movw	r1, #269	; 0x10d
   17a62:	481f      	ldr	r0, [pc, #124]	; (17ae0 <k_sched_lock+0xd8>)
   17a64:	f001 fdb8 	bl	195d8 <assert_post_action>
	__ASSERT(_current->base.sched_locked != 1, "");
   17a68:	4c1f      	ldr	r4, [pc, #124]	; (17ae8 <k_sched_lock+0xe0>)
   17a6a:	68a2      	ldr	r2, [r4, #8]
   17a6c:	7bd2      	ldrb	r2, [r2, #15]
   17a6e:	2a01      	cmp	r2, #1
   17a70:	d10e      	bne.n	17a90 <k_sched_lock+0x88>
   17a72:	491e      	ldr	r1, [pc, #120]	; (17aec <k_sched_lock+0xe4>)
   17a74:	f44f 7387 	mov.w	r3, #270	; 0x10e
   17a78:	4a19      	ldr	r2, [pc, #100]	; (17ae0 <k_sched_lock+0xd8>)
   17a7a:	4816      	ldr	r0, [pc, #88]	; (17ad4 <k_sched_lock+0xcc>)
   17a7c:	f001 fd95 	bl	195aa <printk>
   17a80:	4818      	ldr	r0, [pc, #96]	; (17ae4 <k_sched_lock+0xdc>)
   17a82:	f001 fd92 	bl	195aa <printk>
   17a86:	f44f 7187 	mov.w	r1, #270	; 0x10e
   17a8a:	4815      	ldr	r0, [pc, #84]	; (17ae0 <k_sched_lock+0xd8>)
   17a8c:	f001 fda4 	bl	195d8 <assert_post_action>

	--_current->base.sched_locked;
   17a90:	68a2      	ldr	r2, [r4, #8]
   17a92:	7bd3      	ldrb	r3, [r2, #15]
   17a94:	3b01      	subs	r3, #1
   17a96:	73d3      	strb	r3, [r2, #15]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   17a98:	480b      	ldr	r0, [pc, #44]	; (17ac8 <k_sched_lock+0xc0>)
   17a9a:	f000 ff23 	bl	188e4 <z_spin_unlock_valid>
   17a9e:	b968      	cbnz	r0, 17abc <k_sched_lock+0xb4>
   17aa0:	235d      	movs	r3, #93	; 0x5d
   17aa2:	4a0a      	ldr	r2, [pc, #40]	; (17acc <k_sched_lock+0xc4>)
   17aa4:	4912      	ldr	r1, [pc, #72]	; (17af0 <k_sched_lock+0xe8>)
   17aa6:	480b      	ldr	r0, [pc, #44]	; (17ad4 <k_sched_lock+0xcc>)
   17aa8:	f001 fd7f 	bl	195aa <printk>
   17aac:	4906      	ldr	r1, [pc, #24]	; (17ac8 <k_sched_lock+0xc0>)
   17aae:	4811      	ldr	r0, [pc, #68]	; (17af4 <k_sched_lock+0xec>)
   17ab0:	f001 fd7b 	bl	195aa <printk>
   17ab4:	215d      	movs	r1, #93	; 0x5d
   17ab6:	4805      	ldr	r0, [pc, #20]	; (17acc <k_sched_lock+0xc4>)
   17ab8:	f001 fd8e 	bl	195d8 <assert_post_action>
	__asm__ volatile(
   17abc:	f385 8811 	msr	BASEPRI, r5
   17ac0:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
		z_sched_lock();
	}
}
   17ac4:	bd38      	pop	{r3, r4, r5, pc}
   17ac6:	bf00      	nop
   17ac8:	200249a4 	.word	0x200249a4
   17acc:	0001adf1 	.word	0x0001adf1
   17ad0:	0001ae17 	.word	0x0001ae17
   17ad4:	0001ac45 	.word	0x0001ac45
   17ad8:	0001ae2c 	.word	0x0001ae2c
   17adc:	0001b677 	.word	0x0001b677
   17ae0:	0001b64c 	.word	0x0001b64c
   17ae4:	0001b2ea 	.word	0x0001b2ea
   17ae8:	2002496c 	.word	0x2002496c
   17aec:	0001b689 	.word	0x0001b689
   17af0:	0001ae44 	.word	0x0001ae44
   17af4:	0001ae5b 	.word	0x0001ae5b

00017af8 <z_priq_dumb_remove>:
}

void z_priq_dumb_remove(sys_dlist_t *pq, struct k_thread *thread)
{
#if defined(CONFIG_SWAP_NONATOMIC) && defined(CONFIG_SCHED_DUMB)
	if (pq == &_kernel.ready_q.runq && thread == _current &&
   17af8:	4b11      	ldr	r3, [pc, #68]	; (17b40 <z_priq_dumb_remove+0x48>)
{
   17afa:	b510      	push	{r4, lr}
	if (pq == &_kernel.ready_q.runq && thread == _current &&
   17afc:	f103 0228 	add.w	r2, r3, #40	; 0x28
   17b00:	4282      	cmp	r2, r0
{
   17b02:	460c      	mov	r4, r1
	if (pq == &_kernel.ready_q.runq && thread == _current &&
   17b04:	d105      	bne.n	17b12 <z_priq_dumb_remove+0x1a>
   17b06:	689b      	ldr	r3, [r3, #8]
   17b08:	428b      	cmp	r3, r1
   17b0a:	d102      	bne.n	17b12 <z_priq_dumb_remove+0x1a>
   17b0c:	7b4b      	ldrb	r3, [r1, #13]
   17b0e:	06db      	lsls	r3, r3, #27
   17b10:	d115      	bne.n	17b3e <z_priq_dumb_remove+0x46>
	    z_is_thread_prevented_from_running(thread)) {
		return;
	}
#endif

	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   17b12:	4b0c      	ldr	r3, [pc, #48]	; (17b44 <z_priq_dumb_remove+0x4c>)
   17b14:	429c      	cmp	r4, r3
   17b16:	d10b      	bne.n	17b30 <z_priq_dumb_remove+0x38>
   17b18:	490b      	ldr	r1, [pc, #44]	; (17b48 <z_priq_dumb_remove+0x50>)
   17b1a:	480c      	ldr	r0, [pc, #48]	; (17b4c <z_priq_dumb_remove+0x54>)
   17b1c:	f44f 7346 	mov.w	r3, #792	; 0x318
   17b20:	4a0b      	ldr	r2, [pc, #44]	; (17b50 <z_priq_dumb_remove+0x58>)
   17b22:	f001 fd42 	bl	195aa <printk>
   17b26:	f44f 7146 	mov.w	r1, #792	; 0x318
   17b2a:	4809      	ldr	r0, [pc, #36]	; (17b50 <z_priq_dumb_remove+0x58>)
   17b2c:	f001 fd54 	bl	195d8 <assert_post_action>
	node->prev->next = node->next;
   17b30:	e9d4 3200 	ldrd	r3, r2, [r4]
   17b34:	6013      	str	r3, [r2, #0]
	node->next->prev = node->prev;
   17b36:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   17b38:	2300      	movs	r3, #0
	node->prev = NULL;
   17b3a:	e9c4 3300 	strd	r3, r3, [r4]

	sys_dlist_remove(&thread->base.qnode_dlist);
}
   17b3e:	bd10      	pop	{r4, pc}
   17b40:	2002496c 	.word	0x2002496c
   17b44:	200207a4 	.word	0x200207a4
   17b48:	0001b767 	.word	0x0001b767
   17b4c:	0001ac45 	.word	0x0001ac45
   17b50:	0001b70f 	.word	0x0001b70f

00017b54 <z_unpend_thread>:
{
   17b54:	b538      	push	{r3, r4, r5, lr}
   17b56:	4604      	mov	r4, r0
	__asm__ volatile(
   17b58:	f04f 0320 	mov.w	r3, #32
   17b5c:	f3ef 8511 	mrs	r5, BASEPRI
   17b60:	f383 8811 	msr	BASEPRI, r3
   17b64:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   17b68:	481e      	ldr	r0, [pc, #120]	; (17be4 <z_unpend_thread+0x90>)
   17b6a:	f000 fead 	bl	188c8 <z_spin_lock_valid>
   17b6e:	b968      	cbnz	r0, 17b8c <z_unpend_thread+0x38>
   17b70:	234a      	movs	r3, #74	; 0x4a
   17b72:	4a1d      	ldr	r2, [pc, #116]	; (17be8 <z_unpend_thread+0x94>)
   17b74:	491d      	ldr	r1, [pc, #116]	; (17bec <z_unpend_thread+0x98>)
   17b76:	481e      	ldr	r0, [pc, #120]	; (17bf0 <z_unpend_thread+0x9c>)
   17b78:	f001 fd17 	bl	195aa <printk>
   17b7c:	4919      	ldr	r1, [pc, #100]	; (17be4 <z_unpend_thread+0x90>)
   17b7e:	481d      	ldr	r0, [pc, #116]	; (17bf4 <z_unpend_thread+0xa0>)
   17b80:	f001 fd13 	bl	195aa <printk>
   17b84:	214a      	movs	r1, #74	; 0x4a
   17b86:	4818      	ldr	r0, [pc, #96]	; (17be8 <z_unpend_thread+0x94>)
   17b88:	f001 fd26 	bl	195d8 <assert_post_action>
	z_spin_lock_set_owner(l);
   17b8c:	4815      	ldr	r0, [pc, #84]	; (17be4 <z_unpend_thread+0x90>)
   17b8e:	f000 feb9 	bl	18904 <z_spin_lock_set_owner>
		_priq_wait_remove(&pended_on(thread)->waitq, thread);
   17b92:	f104 0008 	add.w	r0, r4, #8
   17b96:	f7ff fe6d 	bl	17874 <pended_on.isra.17>
   17b9a:	4621      	mov	r1, r4
   17b9c:	f7ff ffac 	bl	17af8 <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
   17ba0:	7b63      	ldrb	r3, [r4, #13]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   17ba2:	4810      	ldr	r0, [pc, #64]	; (17be4 <z_unpend_thread+0x90>)
   17ba4:	f023 0302 	bic.w	r3, r3, #2
   17ba8:	7363      	strb	r3, [r4, #13]
   17baa:	f000 fe9b 	bl	188e4 <z_spin_unlock_valid>
   17bae:	b968      	cbnz	r0, 17bcc <z_unpend_thread+0x78>
   17bb0:	235d      	movs	r3, #93	; 0x5d
   17bb2:	4a0d      	ldr	r2, [pc, #52]	; (17be8 <z_unpend_thread+0x94>)
   17bb4:	4910      	ldr	r1, [pc, #64]	; (17bf8 <z_unpend_thread+0xa4>)
   17bb6:	480e      	ldr	r0, [pc, #56]	; (17bf0 <z_unpend_thread+0x9c>)
   17bb8:	f001 fcf7 	bl	195aa <printk>
   17bbc:	4909      	ldr	r1, [pc, #36]	; (17be4 <z_unpend_thread+0x90>)
   17bbe:	480f      	ldr	r0, [pc, #60]	; (17bfc <z_unpend_thread+0xa8>)
   17bc0:	f001 fcf3 	bl	195aa <printk>
   17bc4:	215d      	movs	r1, #93	; 0x5d
   17bc6:	4808      	ldr	r0, [pc, #32]	; (17be8 <z_unpend_thread+0x94>)
   17bc8:	f001 fd06 	bl	195d8 <assert_post_action>
	__asm__ volatile(
   17bcc:	f385 8811 	msr	BASEPRI, r5
   17bd0:	f3bf 8f6f 	isb	sy
	thread->base.pended_on = NULL;
   17bd4:	2300      	movs	r3, #0
	z_add_timeout(&th->base.timeout, z_thread_timeout, ticks);
}

static inline int z_abort_thread_timeout(struct k_thread *thread)
{
	return z_abort_timeout(&thread->base.timeout);
   17bd6:	f104 0018 	add.w	r0, r4, #24
   17bda:	60a3      	str	r3, [r4, #8]
}
   17bdc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   17be0:	f001 b85a 	b.w	18c98 <z_abort_timeout>
   17be4:	200249a4 	.word	0x200249a4
   17be8:	0001adf1 	.word	0x0001adf1
   17bec:	0001ae17 	.word	0x0001ae17
   17bf0:	0001ac45 	.word	0x0001ac45
   17bf4:	0001ae2c 	.word	0x0001ae2c
   17bf8:	0001ae44 	.word	0x0001ae44
   17bfc:	0001ae5b 	.word	0x0001ae5b

00017c00 <update_cache>:
{
   17c00:	b538      	push	{r3, r4, r5, lr}
	struct k_thread *thread = _priq_run_best(&_kernel.ready_q.runq);
   17c02:	4c15      	ldr	r4, [pc, #84]	; (17c58 <update_cache+0x58>)
{
   17c04:	4602      	mov	r2, r0
	struct k_thread *thread = _priq_run_best(&_kernel.ready_q.runq);
   17c06:	f104 0028 	add.w	r0, r4, #40	; 0x28
   17c0a:	f002 fc18 	bl	1a43e <z_priq_dumb_best>
	return thread ? thread : _current_cpu->idle_thread;
   17c0e:	4605      	mov	r5, r0
   17c10:	b900      	cbnz	r0, 17c14 <update_cache+0x14>
   17c12:	68e5      	ldr	r5, [r4, #12]
	if (preempt_ok != 0) {
   17c14:	b9ca      	cbnz	r2, 17c4a <update_cache+0x4a>
	__ASSERT(_current != NULL, "");
   17c16:	68a3      	ldr	r3, [r4, #8]
   17c18:	b963      	cbnz	r3, 17c34 <update_cache+0x34>
   17c1a:	4910      	ldr	r1, [pc, #64]	; (17c5c <update_cache+0x5c>)
   17c1c:	237e      	movs	r3, #126	; 0x7e
   17c1e:	4a10      	ldr	r2, [pc, #64]	; (17c60 <update_cache+0x60>)
   17c20:	4810      	ldr	r0, [pc, #64]	; (17c64 <update_cache+0x64>)
   17c22:	f001 fcc2 	bl	195aa <printk>
   17c26:	4810      	ldr	r0, [pc, #64]	; (17c68 <update_cache+0x68>)
   17c28:	f001 fcbf 	bl	195aa <printk>
   17c2c:	217e      	movs	r1, #126	; 0x7e
   17c2e:	480c      	ldr	r0, [pc, #48]	; (17c60 <update_cache+0x60>)
   17c30:	f001 fcd2 	bl	195d8 <assert_post_action>
	if (z_is_thread_prevented_from_running(_current)) {
   17c34:	68a3      	ldr	r3, [r4, #8]
   17c36:	7b5a      	ldrb	r2, [r3, #13]
   17c38:	06d2      	lsls	r2, r2, #27
   17c3a:	d106      	bne.n	17c4a <update_cache+0x4a>
	if (IS_ENABLED(CONFIG_SWAP_NONATOMIC)
   17c3c:	69aa      	ldr	r2, [r5, #24]
   17c3e:	b922      	cbnz	r2, 17c4a <update_cache+0x4a>
	if (is_preempt(_current) || is_metairq(thread)) {
   17c40:	89da      	ldrh	r2, [r3, #14]
   17c42:	2a7f      	cmp	r2, #127	; 0x7f
   17c44:	d901      	bls.n	17c4a <update_cache+0x4a>
		_kernel.ready_q.cache = _current;
   17c46:	6263      	str	r3, [r4, #36]	; 0x24
}
   17c48:	bd38      	pop	{r3, r4, r5, pc}
		if (thread != _current) {
   17c4a:	68a3      	ldr	r3, [r4, #8]
   17c4c:	42ab      	cmp	r3, r5
   17c4e:	d001      	beq.n	17c54 <update_cache+0x54>
			z_reset_time_slice();
   17c50:	f7ff fe28 	bl	178a4 <z_reset_time_slice>
		_kernel.ready_q.cache = thread;
   17c54:	6265      	str	r5, [r4, #36]	; 0x24
}
   17c56:	e7f7      	b.n	17c48 <update_cache+0x48>
   17c58:	2002496c 	.word	0x2002496c
   17c5c:	0001b748 	.word	0x0001b748
   17c60:	0001b70f 	.word	0x0001b70f
   17c64:	0001ac45 	.word	0x0001ac45
   17c68:	0001b2ea 	.word	0x0001b2ea

00017c6c <k_sched_unlock>:
{
   17c6c:	b538      	push	{r3, r4, r5, lr}
	__ASSERT(_current->base.sched_locked != 0, "");
   17c6e:	4c31      	ldr	r4, [pc, #196]	; (17d34 <k_sched_unlock+0xc8>)
   17c70:	68a2      	ldr	r2, [r4, #8]
   17c72:	7bd2      	ldrb	r2, [r2, #15]
   17c74:	b972      	cbnz	r2, 17c94 <k_sched_unlock+0x28>
   17c76:	4930      	ldr	r1, [pc, #192]	; (17d38 <k_sched_unlock+0xcc>)
   17c78:	f240 23ad 	movw	r3, #685	; 0x2ad
   17c7c:	4a2f      	ldr	r2, [pc, #188]	; (17d3c <k_sched_unlock+0xd0>)
   17c7e:	4830      	ldr	r0, [pc, #192]	; (17d40 <k_sched_unlock+0xd4>)
   17c80:	f001 fc93 	bl	195aa <printk>
   17c84:	482f      	ldr	r0, [pc, #188]	; (17d44 <k_sched_unlock+0xd8>)
   17c86:	f001 fc90 	bl	195aa <printk>
   17c8a:	f240 21ad 	movw	r1, #685	; 0x2ad
   17c8e:	482b      	ldr	r0, [pc, #172]	; (17d3c <k_sched_unlock+0xd0>)
   17c90:	f001 fca2 	bl	195d8 <assert_post_action>
   17c94:	f3ef 8305 	mrs	r3, IPSR
	__ASSERT(!arch_is_in_isr(), "");
   17c98:	b173      	cbz	r3, 17cb8 <k_sched_unlock+0x4c>
   17c9a:	492b      	ldr	r1, [pc, #172]	; (17d48 <k_sched_unlock+0xdc>)
   17c9c:	f240 23ae 	movw	r3, #686	; 0x2ae
   17ca0:	4a26      	ldr	r2, [pc, #152]	; (17d3c <k_sched_unlock+0xd0>)
   17ca2:	4827      	ldr	r0, [pc, #156]	; (17d40 <k_sched_unlock+0xd4>)
   17ca4:	f001 fc81 	bl	195aa <printk>
   17ca8:	4826      	ldr	r0, [pc, #152]	; (17d44 <k_sched_unlock+0xd8>)
   17caa:	f001 fc7e 	bl	195aa <printk>
   17cae:	f240 21ae 	movw	r1, #686	; 0x2ae
   17cb2:	4822      	ldr	r0, [pc, #136]	; (17d3c <k_sched_unlock+0xd0>)
   17cb4:	f001 fc90 	bl	195d8 <assert_post_action>
	__asm__ volatile(
   17cb8:	f04f 0320 	mov.w	r3, #32
   17cbc:	f3ef 8511 	mrs	r5, BASEPRI
   17cc0:	f383 8811 	msr	BASEPRI, r3
   17cc4:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   17cc8:	4820      	ldr	r0, [pc, #128]	; (17d4c <k_sched_unlock+0xe0>)
   17cca:	f000 fdfd 	bl	188c8 <z_spin_lock_valid>
   17cce:	b968      	cbnz	r0, 17cec <k_sched_unlock+0x80>
   17cd0:	234a      	movs	r3, #74	; 0x4a
   17cd2:	4a1f      	ldr	r2, [pc, #124]	; (17d50 <k_sched_unlock+0xe4>)
   17cd4:	491f      	ldr	r1, [pc, #124]	; (17d54 <k_sched_unlock+0xe8>)
   17cd6:	481a      	ldr	r0, [pc, #104]	; (17d40 <k_sched_unlock+0xd4>)
   17cd8:	f001 fc67 	bl	195aa <printk>
   17cdc:	491b      	ldr	r1, [pc, #108]	; (17d4c <k_sched_unlock+0xe0>)
   17cde:	481e      	ldr	r0, [pc, #120]	; (17d58 <k_sched_unlock+0xec>)
   17ce0:	f001 fc63 	bl	195aa <printk>
   17ce4:	214a      	movs	r1, #74	; 0x4a
   17ce6:	481a      	ldr	r0, [pc, #104]	; (17d50 <k_sched_unlock+0xe4>)
   17ce8:	f001 fc76 	bl	195d8 <assert_post_action>
	z_spin_lock_set_owner(l);
   17cec:	4817      	ldr	r0, [pc, #92]	; (17d4c <k_sched_unlock+0xe0>)
   17cee:	f000 fe09 	bl	18904 <z_spin_lock_set_owner>
		++_current->base.sched_locked;
   17cf2:	68a2      	ldr	r2, [r4, #8]
		update_cache(0);
   17cf4:	2000      	movs	r0, #0
		++_current->base.sched_locked;
   17cf6:	7bd3      	ldrb	r3, [r2, #15]
   17cf8:	3301      	adds	r3, #1
   17cfa:	73d3      	strb	r3, [r2, #15]
		update_cache(0);
   17cfc:	f7ff ff80 	bl	17c00 <update_cache>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   17d00:	4812      	ldr	r0, [pc, #72]	; (17d4c <k_sched_unlock+0xe0>)
   17d02:	f000 fdef 	bl	188e4 <z_spin_unlock_valid>
   17d06:	b968      	cbnz	r0, 17d24 <k_sched_unlock+0xb8>
   17d08:	235d      	movs	r3, #93	; 0x5d
   17d0a:	4a11      	ldr	r2, [pc, #68]	; (17d50 <k_sched_unlock+0xe4>)
   17d0c:	4913      	ldr	r1, [pc, #76]	; (17d5c <k_sched_unlock+0xf0>)
   17d0e:	480c      	ldr	r0, [pc, #48]	; (17d40 <k_sched_unlock+0xd4>)
   17d10:	f001 fc4b 	bl	195aa <printk>
   17d14:	490d      	ldr	r1, [pc, #52]	; (17d4c <k_sched_unlock+0xe0>)
   17d16:	4812      	ldr	r0, [pc, #72]	; (17d60 <k_sched_unlock+0xf4>)
   17d18:	f001 fc47 	bl	195aa <printk>
   17d1c:	215d      	movs	r1, #93	; 0x5d
   17d1e:	480c      	ldr	r0, [pc, #48]	; (17d50 <k_sched_unlock+0xe4>)
   17d20:	f001 fc5a 	bl	195d8 <assert_post_action>
	__asm__ volatile(
   17d24:	f385 8811 	msr	BASEPRI, r5
   17d28:	f3bf 8f6f 	isb	sy
}
   17d2c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule_unlocked();
   17d30:	f002 bb7b 	b.w	1a42a <z_reschedule_unlocked>
   17d34:	2002496c 	.word	0x2002496c
   17d38:	0001b6b1 	.word	0x0001b6b1
   17d3c:	0001b70f 	.word	0x0001b70f
   17d40:	0001ac45 	.word	0x0001ac45
   17d44:	0001b2ea 	.word	0x0001b2ea
   17d48:	0001b677 	.word	0x0001b677
   17d4c:	200249a4 	.word	0x200249a4
   17d50:	0001adf1 	.word	0x0001adf1
   17d54:	0001ae17 	.word	0x0001ae17
   17d58:	0001ae2c 	.word	0x0001ae2c
   17d5c:	0001ae44 	.word	0x0001ae44
   17d60:	0001ae5b 	.word	0x0001ae5b

00017d64 <z_add_thread_to_ready_q>:
{
   17d64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   17d66:	4604      	mov	r4, r0
	__asm__ volatile(
   17d68:	f04f 0320 	mov.w	r3, #32
   17d6c:	f3ef 8511 	mrs	r5, BASEPRI
   17d70:	f383 8811 	msr	BASEPRI, r3
   17d74:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   17d78:	482f      	ldr	r0, [pc, #188]	; (17e38 <z_add_thread_to_ready_q+0xd4>)
   17d7a:	f000 fda5 	bl	188c8 <z_spin_lock_valid>
   17d7e:	b968      	cbnz	r0, 17d9c <z_add_thread_to_ready_q+0x38>
   17d80:	234a      	movs	r3, #74	; 0x4a
   17d82:	4a2e      	ldr	r2, [pc, #184]	; (17e3c <z_add_thread_to_ready_q+0xd8>)
   17d84:	492e      	ldr	r1, [pc, #184]	; (17e40 <z_add_thread_to_ready_q+0xdc>)
   17d86:	482f      	ldr	r0, [pc, #188]	; (17e44 <z_add_thread_to_ready_q+0xe0>)
   17d88:	f001 fc0f 	bl	195aa <printk>
   17d8c:	492a      	ldr	r1, [pc, #168]	; (17e38 <z_add_thread_to_ready_q+0xd4>)
   17d8e:	482e      	ldr	r0, [pc, #184]	; (17e48 <z_add_thread_to_ready_q+0xe4>)
   17d90:	f001 fc0b 	bl	195aa <printk>
   17d94:	214a      	movs	r1, #74	; 0x4a
   17d96:	4829      	ldr	r0, [pc, #164]	; (17e3c <z_add_thread_to_ready_q+0xd8>)
   17d98:	f001 fc1e 	bl	195d8 <assert_post_action>
	z_spin_lock_set_owner(l);
   17d9c:	4826      	ldr	r0, [pc, #152]	; (17e38 <z_add_thread_to_ready_q+0xd4>)
   17d9e:	f000 fdb1 	bl	18904 <z_spin_lock_set_owner>
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   17da2:	4b2a      	ldr	r3, [pc, #168]	; (17e4c <z_add_thread_to_ready_q+0xe8>)
   17da4:	429c      	cmp	r4, r3
   17da6:	d10b      	bne.n	17dc0 <z_add_thread_to_ready_q+0x5c>
   17da8:	4929      	ldr	r1, [pc, #164]	; (17e50 <z_add_thread_to_ready_q+0xec>)
   17daa:	4826      	ldr	r0, [pc, #152]	; (17e44 <z_add_thread_to_ready_q+0xe0>)
   17dac:	f240 3302 	movw	r3, #770	; 0x302
   17db0:	4a28      	ldr	r2, [pc, #160]	; (17e54 <z_add_thread_to_ready_q+0xf0>)
   17db2:	f001 fbfa 	bl	195aa <printk>
   17db6:	f240 3102 	movw	r1, #770	; 0x302
   17dba:	4826      	ldr	r0, [pc, #152]	; (17e54 <z_add_thread_to_ready_q+0xf0>)
   17dbc:	f001 fc0c 	bl	195d8 <assert_post_action>
	return list->head == list;
   17dc0:	4a25      	ldr	r2, [pc, #148]	; (17e58 <z_add_thread_to_ready_q+0xf4>)
	return sys_dlist_is_empty(list) ? NULL : list->head;
   17dc2:	f102 0128 	add.w	r1, r2, #40	; 0x28
   17dc6:	e9d2 300a 	ldrd	r3, r0, [r2, #40]	; 0x28
   17dca:	428b      	cmp	r3, r1
   17dcc:	d02e      	beq.n	17e2c <z_add_thread_to_ready_q+0xc8>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   17dce:	b36b      	cbz	r3, 17e2c <z_add_thread_to_ready_q+0xc8>
	if (thread_1->base.prio < thread_2->base.prio) {
   17dd0:	f994 600e 	ldrsb.w	r6, [r4, #14]
   17dd4:	f993 700e 	ldrsb.w	r7, [r3, #14]
   17dd8:	42b7      	cmp	r7, r6
   17dda:	dd22      	ble.n	17e22 <z_add_thread_to_ready_q+0xbe>
	node->prev = successor->prev;
   17ddc:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   17dde:	e9c4 3200 	strd	r3, r2, [r4]
	successor->prev->next = node;
   17de2:	6014      	str	r4, [r2, #0]
	successor->prev = node;
   17de4:	605c      	str	r4, [r3, #4]
	thread->base.thread_state |= states;
   17de6:	7b63      	ldrb	r3, [r4, #13]
		update_cache(0);
   17de8:	2000      	movs	r0, #0
   17dea:	f063 037f 	orn	r3, r3, #127	; 0x7f
   17dee:	7363      	strb	r3, [r4, #13]
   17df0:	f7ff ff06 	bl	17c00 <update_cache>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   17df4:	4810      	ldr	r0, [pc, #64]	; (17e38 <z_add_thread_to_ready_q+0xd4>)
   17df6:	f000 fd75 	bl	188e4 <z_spin_unlock_valid>
   17dfa:	b968      	cbnz	r0, 17e18 <z_add_thread_to_ready_q+0xb4>
   17dfc:	235d      	movs	r3, #93	; 0x5d
   17dfe:	4a0f      	ldr	r2, [pc, #60]	; (17e3c <z_add_thread_to_ready_q+0xd8>)
   17e00:	4916      	ldr	r1, [pc, #88]	; (17e5c <z_add_thread_to_ready_q+0xf8>)
   17e02:	4810      	ldr	r0, [pc, #64]	; (17e44 <z_add_thread_to_ready_q+0xe0>)
   17e04:	f001 fbd1 	bl	195aa <printk>
   17e08:	490b      	ldr	r1, [pc, #44]	; (17e38 <z_add_thread_to_ready_q+0xd4>)
   17e0a:	4815      	ldr	r0, [pc, #84]	; (17e60 <z_add_thread_to_ready_q+0xfc>)
   17e0c:	f001 fbcd 	bl	195aa <printk>
   17e10:	215d      	movs	r1, #93	; 0x5d
   17e12:	480a      	ldr	r0, [pc, #40]	; (17e3c <z_add_thread_to_ready_q+0xd8>)
   17e14:	f001 fbe0 	bl	195d8 <assert_post_action>
	__asm__ volatile(
   17e18:	f385 8811 	msr	BASEPRI, r5
   17e1c:	f3bf 8f6f 	isb	sy
}
   17e20:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return (node == list->tail) ? NULL : node->next;
   17e22:	4298      	cmp	r0, r3
   17e24:	d002      	beq.n	17e2c <z_add_thread_to_ready_q+0xc8>
   17e26:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   17e28:	2b00      	cmp	r3, #0
   17e2a:	d1d3      	bne.n	17dd4 <z_add_thread_to_ready_q+0x70>
	node->prev = list->tail;
   17e2c:	e9c4 1000 	strd	r1, r0, [r4]
	list->tail->next = node;
   17e30:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
   17e32:	601c      	str	r4, [r3, #0]
	list->tail = node;
   17e34:	62d4      	str	r4, [r2, #44]	; 0x2c
   17e36:	e7d6      	b.n	17de6 <z_add_thread_to_ready_q+0x82>
   17e38:	200249a4 	.word	0x200249a4
   17e3c:	0001adf1 	.word	0x0001adf1
   17e40:	0001ae17 	.word	0x0001ae17
   17e44:	0001ac45 	.word	0x0001ac45
   17e48:	0001ae2c 	.word	0x0001ae2c
   17e4c:	200207a4 	.word	0x200207a4
   17e50:	0001b767 	.word	0x0001b767
   17e54:	0001b70f 	.word	0x0001b70f
   17e58:	2002496c 	.word	0x2002496c
   17e5c:	0001ae44 	.word	0x0001ae44
   17e60:	0001ae5b 	.word	0x0001ae5b

00017e64 <z_thread_timeout>:
	if (thread->base.pended_on != NULL) {
   17e64:	f850 3c10 	ldr.w	r3, [r0, #-16]
{
   17e68:	b570      	push	{r4, r5, r6, lr}
   17e6a:	4604      	mov	r4, r0
	struct k_thread *thread = CONTAINER_OF(timeout,
   17e6c:	f1a0 0518 	sub.w	r5, r0, #24
	if (thread->base.pended_on != NULL) {
   17e70:	2b00      	cmp	r3, #0
   17e72:	d042      	beq.n	17efa <z_thread_timeout+0x96>
	__asm__ volatile(
   17e74:	f04f 0320 	mov.w	r3, #32
   17e78:	f3ef 8611 	mrs	r6, BASEPRI
   17e7c:	f383 8811 	msr	BASEPRI, r3
   17e80:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   17e84:	4825      	ldr	r0, [pc, #148]	; (17f1c <z_thread_timeout+0xb8>)
   17e86:	f000 fd1f 	bl	188c8 <z_spin_lock_valid>
   17e8a:	b968      	cbnz	r0, 17ea8 <z_thread_timeout+0x44>
   17e8c:	234a      	movs	r3, #74	; 0x4a
   17e8e:	4a24      	ldr	r2, [pc, #144]	; (17f20 <z_thread_timeout+0xbc>)
   17e90:	4924      	ldr	r1, [pc, #144]	; (17f24 <z_thread_timeout+0xc0>)
   17e92:	4825      	ldr	r0, [pc, #148]	; (17f28 <z_thread_timeout+0xc4>)
   17e94:	f001 fb89 	bl	195aa <printk>
   17e98:	4920      	ldr	r1, [pc, #128]	; (17f1c <z_thread_timeout+0xb8>)
   17e9a:	4824      	ldr	r0, [pc, #144]	; (17f2c <z_thread_timeout+0xc8>)
   17e9c:	f001 fb85 	bl	195aa <printk>
   17ea0:	214a      	movs	r1, #74	; 0x4a
   17ea2:	481f      	ldr	r0, [pc, #124]	; (17f20 <z_thread_timeout+0xbc>)
   17ea4:	f001 fb98 	bl	195d8 <assert_post_action>
	z_spin_lock_set_owner(l);
   17ea8:	481c      	ldr	r0, [pc, #112]	; (17f1c <z_thread_timeout+0xb8>)
   17eaa:	f000 fd2b 	bl	18904 <z_spin_lock_set_owner>
		_priq_wait_remove(&pended_on(thread)->waitq, thread);
   17eae:	f1a4 0010 	sub.w	r0, r4, #16
   17eb2:	f7ff fcdf 	bl	17874 <pended_on.isra.17>
   17eb6:	4629      	mov	r1, r5
   17eb8:	f7ff fe1e 	bl	17af8 <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
   17ebc:	f814 3c0b 	ldrb.w	r3, [r4, #-11]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   17ec0:	4816      	ldr	r0, [pc, #88]	; (17f1c <z_thread_timeout+0xb8>)
   17ec2:	f023 0302 	bic.w	r3, r3, #2
   17ec6:	f804 3c0b 	strb.w	r3, [r4, #-11]
   17eca:	f000 fd0b 	bl	188e4 <z_spin_unlock_valid>
   17ece:	b968      	cbnz	r0, 17eec <z_thread_timeout+0x88>
   17ed0:	235d      	movs	r3, #93	; 0x5d
   17ed2:	4a13      	ldr	r2, [pc, #76]	; (17f20 <z_thread_timeout+0xbc>)
   17ed4:	4916      	ldr	r1, [pc, #88]	; (17f30 <z_thread_timeout+0xcc>)
   17ed6:	4814      	ldr	r0, [pc, #80]	; (17f28 <z_thread_timeout+0xc4>)
   17ed8:	f001 fb67 	bl	195aa <printk>
   17edc:	490f      	ldr	r1, [pc, #60]	; (17f1c <z_thread_timeout+0xb8>)
   17ede:	4815      	ldr	r0, [pc, #84]	; (17f34 <z_thread_timeout+0xd0>)
   17ee0:	f001 fb63 	bl	195aa <printk>
   17ee4:	215d      	movs	r1, #93	; 0x5d
   17ee6:	480e      	ldr	r0, [pc, #56]	; (17f20 <z_thread_timeout+0xbc>)
   17ee8:	f001 fb76 	bl	195d8 <assert_post_action>
	__asm__ volatile(
   17eec:	f386 8811 	msr	BASEPRI, r6
   17ef0:	f3bf 8f6f 	isb	sy
	thread->base.pended_on = NULL;
   17ef4:	2300      	movs	r3, #0
   17ef6:	f844 3c10 	str.w	r3, [r4, #-16]
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
   17efa:	f814 3c0b 	ldrb.w	r3, [r4, #-11]
	if (z_is_thread_ready(thread)) {
   17efe:	4628      	mov	r0, r5
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
   17f00:	f023 0314 	bic.w	r3, r3, #20
   17f04:	f804 3c0b 	strb.w	r3, [r4, #-11]
	if (z_is_thread_ready(thread)) {
   17f08:	f002 fa7a 	bl	1a400 <z_is_thread_ready>
   17f0c:	b120      	cbz	r0, 17f18 <z_thread_timeout+0xb4>
		z_add_thread_to_ready_q(thread);
   17f0e:	4628      	mov	r0, r5
}
   17f10:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   17f14:	f7ff bf26 	b.w	17d64 <z_add_thread_to_ready_q>
   17f18:	bd70      	pop	{r4, r5, r6, pc}
   17f1a:	bf00      	nop
   17f1c:	200249a4 	.word	0x200249a4
   17f20:	0001adf1 	.word	0x0001adf1
   17f24:	0001ae17 	.word	0x0001ae17
   17f28:	0001ac45 	.word	0x0001ac45
   17f2c:	0001ae2c 	.word	0x0001ae2c
   17f30:	0001ae44 	.word	0x0001ae44
   17f34:	0001ae5b 	.word	0x0001ae5b

00017f38 <z_move_thread_to_end_of_prio_q>:
{
   17f38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   17f3a:	4604      	mov	r4, r0
	__asm__ volatile(
   17f3c:	f04f 0320 	mov.w	r3, #32
   17f40:	f3ef 8511 	mrs	r5, BASEPRI
   17f44:	f383 8811 	msr	BASEPRI, r3
   17f48:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   17f4c:	4835      	ldr	r0, [pc, #212]	; (18024 <z_move_thread_to_end_of_prio_q+0xec>)
   17f4e:	f000 fcbb 	bl	188c8 <z_spin_lock_valid>
   17f52:	b968      	cbnz	r0, 17f70 <z_move_thread_to_end_of_prio_q+0x38>
   17f54:	234a      	movs	r3, #74	; 0x4a
   17f56:	4a34      	ldr	r2, [pc, #208]	; (18028 <z_move_thread_to_end_of_prio_q+0xf0>)
   17f58:	4934      	ldr	r1, [pc, #208]	; (1802c <z_move_thread_to_end_of_prio_q+0xf4>)
   17f5a:	4835      	ldr	r0, [pc, #212]	; (18030 <z_move_thread_to_end_of_prio_q+0xf8>)
   17f5c:	f001 fb25 	bl	195aa <printk>
   17f60:	4930      	ldr	r1, [pc, #192]	; (18024 <z_move_thread_to_end_of_prio_q+0xec>)
   17f62:	4834      	ldr	r0, [pc, #208]	; (18034 <z_move_thread_to_end_of_prio_q+0xfc>)
   17f64:	f001 fb21 	bl	195aa <printk>
   17f68:	214a      	movs	r1, #74	; 0x4a
   17f6a:	482f      	ldr	r0, [pc, #188]	; (18028 <z_move_thread_to_end_of_prio_q+0xf0>)
   17f6c:	f001 fb34 	bl	195d8 <assert_post_action>
	z_spin_lock_set_owner(l);
   17f70:	482c      	ldr	r0, [pc, #176]	; (18024 <z_move_thread_to_end_of_prio_q+0xec>)
   17f72:	f000 fcc7 	bl	18904 <z_spin_lock_set_owner>
		if (z_is_thread_queued(thread)) {
   17f76:	f994 300d 	ldrsb.w	r3, [r4, #13]
   17f7a:	2b00      	cmp	r3, #0
   17f7c:	da03      	bge.n	17f86 <z_move_thread_to_end_of_prio_q+0x4e>
			_priq_run_remove(&_kernel.ready_q.runq, thread);
   17f7e:	4621      	mov	r1, r4
   17f80:	482d      	ldr	r0, [pc, #180]	; (18038 <z_move_thread_to_end_of_prio_q+0x100>)
   17f82:	f7ff fdb9 	bl	17af8 <z_priq_dumb_remove>
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   17f86:	4b2d      	ldr	r3, [pc, #180]	; (1803c <z_move_thread_to_end_of_prio_q+0x104>)
   17f88:	429c      	cmp	r4, r3
   17f8a:	d10b      	bne.n	17fa4 <z_move_thread_to_end_of_prio_q+0x6c>
   17f8c:	492c      	ldr	r1, [pc, #176]	; (18040 <z_move_thread_to_end_of_prio_q+0x108>)
   17f8e:	4828      	ldr	r0, [pc, #160]	; (18030 <z_move_thread_to_end_of_prio_q+0xf8>)
   17f90:	f240 3302 	movw	r3, #770	; 0x302
   17f94:	4a2b      	ldr	r2, [pc, #172]	; (18044 <z_move_thread_to_end_of_prio_q+0x10c>)
   17f96:	f001 fb08 	bl	195aa <printk>
   17f9a:	f240 3102 	movw	r1, #770	; 0x302
   17f9e:	4829      	ldr	r0, [pc, #164]	; (18044 <z_move_thread_to_end_of_prio_q+0x10c>)
   17fa0:	f001 fb1a 	bl	195d8 <assert_post_action>
	return list->head == list;
   17fa4:	4a28      	ldr	r2, [pc, #160]	; (18048 <z_move_thread_to_end_of_prio_q+0x110>)
	return sys_dlist_is_empty(list) ? NULL : list->head;
   17fa6:	f102 0128 	add.w	r1, r2, #40	; 0x28
   17faa:	e9d2 300a 	ldrd	r3, r0, [r2, #40]	; 0x28
   17fae:	428b      	cmp	r3, r1
   17fb0:	d032      	beq.n	18018 <z_move_thread_to_end_of_prio_q+0xe0>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   17fb2:	2b00      	cmp	r3, #0
   17fb4:	d030      	beq.n	18018 <z_move_thread_to_end_of_prio_q+0xe0>
	if (thread_1->base.prio < thread_2->base.prio) {
   17fb6:	f994 600e 	ldrsb.w	r6, [r4, #14]
   17fba:	f993 700e 	ldrsb.w	r7, [r3, #14]
   17fbe:	42b7      	cmp	r7, r6
   17fc0:	dd25      	ble.n	1800e <z_move_thread_to_end_of_prio_q+0xd6>
	node->prev = successor->prev;
   17fc2:	6859      	ldr	r1, [r3, #4]
	node->next = successor;
   17fc4:	e9c4 3100 	strd	r3, r1, [r4]
	successor->prev->next = node;
   17fc8:	600c      	str	r4, [r1, #0]
	successor->prev = node;
   17fca:	605c      	str	r4, [r3, #4]
	thread->base.thread_state |= states;
   17fcc:	7b63      	ldrb	r3, [r4, #13]
		update_cache(thread == _current);
   17fce:	6890      	ldr	r0, [r2, #8]
   17fd0:	f063 037f 	orn	r3, r3, #127	; 0x7f
   17fd4:	7363      	strb	r3, [r4, #13]
   17fd6:	1b03      	subs	r3, r0, r4
   17fd8:	4258      	negs	r0, r3
   17fda:	4158      	adcs	r0, r3
   17fdc:	f7ff fe10 	bl	17c00 <update_cache>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   17fe0:	4810      	ldr	r0, [pc, #64]	; (18024 <z_move_thread_to_end_of_prio_q+0xec>)
   17fe2:	f000 fc7f 	bl	188e4 <z_spin_unlock_valid>
   17fe6:	b968      	cbnz	r0, 18004 <z_move_thread_to_end_of_prio_q+0xcc>
   17fe8:	235d      	movs	r3, #93	; 0x5d
   17fea:	4a0f      	ldr	r2, [pc, #60]	; (18028 <z_move_thread_to_end_of_prio_q+0xf0>)
   17fec:	4917      	ldr	r1, [pc, #92]	; (1804c <z_move_thread_to_end_of_prio_q+0x114>)
   17fee:	4810      	ldr	r0, [pc, #64]	; (18030 <z_move_thread_to_end_of_prio_q+0xf8>)
   17ff0:	f001 fadb 	bl	195aa <printk>
   17ff4:	490b      	ldr	r1, [pc, #44]	; (18024 <z_move_thread_to_end_of_prio_q+0xec>)
   17ff6:	4816      	ldr	r0, [pc, #88]	; (18050 <z_move_thread_to_end_of_prio_q+0x118>)
   17ff8:	f001 fad7 	bl	195aa <printk>
   17ffc:	215d      	movs	r1, #93	; 0x5d
   17ffe:	480a      	ldr	r0, [pc, #40]	; (18028 <z_move_thread_to_end_of_prio_q+0xf0>)
   18000:	f001 faea 	bl	195d8 <assert_post_action>
	__asm__ volatile(
   18004:	f385 8811 	msr	BASEPRI, r5
   18008:	f3bf 8f6f 	isb	sy
}
   1800c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return (node == list->tail) ? NULL : node->next;
   1800e:	4298      	cmp	r0, r3
   18010:	d002      	beq.n	18018 <z_move_thread_to_end_of_prio_q+0xe0>
   18012:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   18014:	2b00      	cmp	r3, #0
   18016:	d1d0      	bne.n	17fba <z_move_thread_to_end_of_prio_q+0x82>
	node->prev = list->tail;
   18018:	e9c4 1000 	strd	r1, r0, [r4]
	list->tail->next = node;
   1801c:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
   1801e:	601c      	str	r4, [r3, #0]
	list->tail = node;
   18020:	62d4      	str	r4, [r2, #44]	; 0x2c
   18022:	e7d3      	b.n	17fcc <z_move_thread_to_end_of_prio_q+0x94>
   18024:	200249a4 	.word	0x200249a4
   18028:	0001adf1 	.word	0x0001adf1
   1802c:	0001ae17 	.word	0x0001ae17
   18030:	0001ac45 	.word	0x0001ac45
   18034:	0001ae2c 	.word	0x0001ae2c
   18038:	20024994 	.word	0x20024994
   1803c:	200207a4 	.word	0x200207a4
   18040:	0001b767 	.word	0x0001b767
   18044:	0001b70f 	.word	0x0001b70f
   18048:	2002496c 	.word	0x2002496c
   1804c:	0001ae44 	.word	0x0001ae44
   18050:	0001ae5b 	.word	0x0001ae5b

00018054 <z_time_slice>:
	if (pending_current == _current) {
   18054:	4a15      	ldr	r2, [pc, #84]	; (180ac <z_time_slice+0x58>)
   18056:	4916      	ldr	r1, [pc, #88]	; (180b0 <z_time_slice+0x5c>)
{
   18058:	b538      	push	{r3, r4, r5, lr}
	if (pending_current == _current) {
   1805a:	680c      	ldr	r4, [r1, #0]
   1805c:	6893      	ldr	r3, [r2, #8]
   1805e:	42a3      	cmp	r3, r4
   18060:	4614      	mov	r4, r2
   18062:	d103      	bne.n	1806c <z_time_slice+0x18>
}
   18064:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
			z_reset_time_slice();
   18068:	f7ff bc1c 	b.w	178a4 <z_reset_time_slice>
	pending_current = NULL;
   1806c:	2500      	movs	r5, #0
   1806e:	600d      	str	r5, [r1, #0]
	if (slice_time && sliceable(_current)) {
   18070:	4910      	ldr	r1, [pc, #64]	; (180b4 <z_time_slice+0x60>)
   18072:	6809      	ldr	r1, [r1, #0]
   18074:	b1b9      	cbz	r1, 180a6 <z_time_slice+0x52>
		&& !z_is_thread_timeout_active(thread);
   18076:	89d9      	ldrh	r1, [r3, #14]
   18078:	297f      	cmp	r1, #127	; 0x7f
   1807a:	d814      	bhi.n	180a6 <z_time_slice+0x52>
		&& !z_is_prio_higher(thread->base.prio, slice_max_prio)
   1807c:	490e      	ldr	r1, [pc, #56]	; (180b8 <z_time_slice+0x64>)
   1807e:	f993 500e 	ldrsb.w	r5, [r3, #14]
   18082:	6809      	ldr	r1, [r1, #0]
   18084:	428d      	cmp	r5, r1
   18086:	db0e      	blt.n	180a6 <z_time_slice+0x52>
		&& !z_is_idle_thread_object(thread)
   18088:	490c      	ldr	r1, [pc, #48]	; (180bc <z_time_slice+0x68>)
   1808a:	428b      	cmp	r3, r1
   1808c:	d00b      	beq.n	180a6 <z_time_slice+0x52>
		&& !z_is_thread_timeout_active(thread);
   1808e:	6999      	ldr	r1, [r3, #24]
   18090:	b949      	cbnz	r1, 180a6 <z_time_slice+0x52>
		if (ticks >= _current_cpu->slice_ticks) {
   18092:	6911      	ldr	r1, [r2, #16]
   18094:	4281      	cmp	r1, r0
   18096:	dc03      	bgt.n	180a0 <z_time_slice+0x4c>
			z_move_thread_to_end_of_prio_q(_current);
   18098:	4618      	mov	r0, r3
   1809a:	f7ff ff4d 	bl	17f38 <z_move_thread_to_end_of_prio_q>
   1809e:	e7e1      	b.n	18064 <z_time_slice+0x10>
			_current_cpu->slice_ticks -= ticks;
   180a0:	1a09      	subs	r1, r1, r0
   180a2:	6111      	str	r1, [r2, #16]
}
   180a4:	bd38      	pop	{r3, r4, r5, pc}
		_current_cpu->slice_ticks = 0;
   180a6:	2300      	movs	r3, #0
   180a8:	6123      	str	r3, [r4, #16]
   180aa:	e7fb      	b.n	180a4 <z_time_slice+0x50>
   180ac:	2002496c 	.word	0x2002496c
   180b0:	200249a0 	.word	0x200249a0
   180b4:	200249ac 	.word	0x200249ac
   180b8:	200249a8 	.word	0x200249a8
   180bc:	200207a4 	.word	0x200207a4

000180c0 <z_thread_single_abort>:
	if (thread->fn_abort != NULL) {
   180c0:	6d03      	ldr	r3, [r0, #80]	; 0x50
{
   180c2:	b570      	push	{r4, r5, r6, lr}
   180c4:	4604      	mov	r4, r0
	if (thread->fn_abort != NULL) {
   180c6:	b103      	cbz	r3, 180ca <z_thread_single_abort+0xa>
		thread->fn_abort();
   180c8:	4798      	blx	r3
   180ca:	f104 0018 	add.w	r0, r4, #24
   180ce:	f000 fde3 	bl	18c98 <z_abort_timeout>
	__asm__ volatile(
   180d2:	f04f 0320 	mov.w	r3, #32
   180d6:	f3ef 8511 	mrs	r5, BASEPRI
   180da:	f383 8811 	msr	BASEPRI, r3
   180de:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   180e2:	482c      	ldr	r0, [pc, #176]	; (18194 <z_thread_single_abort+0xd4>)
   180e4:	f000 fbf0 	bl	188c8 <z_spin_lock_valid>
   180e8:	b968      	cbnz	r0, 18106 <z_thread_single_abort+0x46>
   180ea:	234a      	movs	r3, #74	; 0x4a
   180ec:	4a2a      	ldr	r2, [pc, #168]	; (18198 <z_thread_single_abort+0xd8>)
   180ee:	492b      	ldr	r1, [pc, #172]	; (1819c <z_thread_single_abort+0xdc>)
   180f0:	482b      	ldr	r0, [pc, #172]	; (181a0 <z_thread_single_abort+0xe0>)
   180f2:	f001 fa5a 	bl	195aa <printk>
   180f6:	4927      	ldr	r1, [pc, #156]	; (18194 <z_thread_single_abort+0xd4>)
   180f8:	482a      	ldr	r0, [pc, #168]	; (181a4 <z_thread_single_abort+0xe4>)
   180fa:	f001 fa56 	bl	195aa <printk>
   180fe:	214a      	movs	r1, #74	; 0x4a
   18100:	4825      	ldr	r0, [pc, #148]	; (18198 <z_thread_single_abort+0xd8>)
   18102:	f001 fa69 	bl	195d8 <assert_post_action>
	z_spin_lock_set_owner(l);
   18106:	4823      	ldr	r0, [pc, #140]	; (18194 <z_thread_single_abort+0xd4>)
   18108:	f000 fbfc 	bl	18904 <z_spin_lock_set_owner>
		if (z_is_thread_ready(thread)) {
   1810c:	4620      	mov	r0, r4
   1810e:	f002 f977 	bl	1a400 <z_is_thread_ready>
   18112:	4606      	mov	r6, r0
   18114:	b368      	cbz	r0, 18172 <z_thread_single_abort+0xb2>
			if (z_is_thread_queued(thread)) {
   18116:	f994 300d 	ldrsb.w	r3, [r4, #13]
   1811a:	2b00      	cmp	r3, #0
   1811c:	da07      	bge.n	1812e <z_thread_single_abort+0x6e>
				_priq_run_remove(&_kernel.ready_q.runq,
   1811e:	4621      	mov	r1, r4
   18120:	4821      	ldr	r0, [pc, #132]	; (181a8 <z_thread_single_abort+0xe8>)
   18122:	f7ff fce9 	bl	17af8 <z_priq_dumb_remove>
	thread->base.thread_state &= ~states;
   18126:	7b63      	ldrb	r3, [r4, #13]
   18128:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   1812c:	7363      	strb	r3, [r4, #13]
			update_cache(thread == _current);
   1812e:	4b1f      	ldr	r3, [pc, #124]	; (181ac <z_thread_single_abort+0xec>)
   18130:	6898      	ldr	r0, [r3, #8]
   18132:	1b02      	subs	r2, r0, r4
   18134:	4250      	negs	r0, r2
   18136:	4150      	adcs	r0, r2
   18138:	f7ff fd62 	bl	17c00 <update_cache>
		thread->base.thread_state |= mask;
   1813c:	7b63      	ldrb	r3, [r4, #13]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1813e:	4815      	ldr	r0, [pc, #84]	; (18194 <z_thread_single_abort+0xd4>)
   18140:	f043 0308 	orr.w	r3, r3, #8
   18144:	7363      	strb	r3, [r4, #13]
   18146:	f000 fbcd 	bl	188e4 <z_spin_unlock_valid>
   1814a:	b968      	cbnz	r0, 18168 <z_thread_single_abort+0xa8>
   1814c:	235d      	movs	r3, #93	; 0x5d
   1814e:	4a12      	ldr	r2, [pc, #72]	; (18198 <z_thread_single_abort+0xd8>)
   18150:	4917      	ldr	r1, [pc, #92]	; (181b0 <z_thread_single_abort+0xf0>)
   18152:	4813      	ldr	r0, [pc, #76]	; (181a0 <z_thread_single_abort+0xe0>)
   18154:	f001 fa29 	bl	195aa <printk>
   18158:	490e      	ldr	r1, [pc, #56]	; (18194 <z_thread_single_abort+0xd4>)
   1815a:	4816      	ldr	r0, [pc, #88]	; (181b4 <z_thread_single_abort+0xf4>)
   1815c:	f001 fa25 	bl	195aa <printk>
   18160:	215d      	movs	r1, #93	; 0x5d
   18162:	480d      	ldr	r0, [pc, #52]	; (18198 <z_thread_single_abort+0xd8>)
   18164:	f001 fa38 	bl	195d8 <assert_post_action>
	__asm__ volatile(
   18168:	f385 8811 	msr	BASEPRI, r5
   1816c:	f3bf 8f6f 	isb	sy
}
   18170:	bd70      	pop	{r4, r5, r6, pc}
			if (z_is_thread_pending(thread)) {
   18172:	7b63      	ldrb	r3, [r4, #13]
   18174:	079b      	lsls	r3, r3, #30
   18176:	d5e1      	bpl.n	1813c <z_thread_single_abort+0x7c>
				_priq_wait_remove(&pended_on(thread)->waitq,
   18178:	f104 0008 	add.w	r0, r4, #8
   1817c:	f7ff fb7a 	bl	17874 <pended_on.isra.17>
   18180:	4621      	mov	r1, r4
   18182:	f7ff fcb9 	bl	17af8 <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
   18186:	7b63      	ldrb	r3, [r4, #13]
				thread->base.pended_on = NULL;
   18188:	60a6      	str	r6, [r4, #8]
   1818a:	f023 0302 	bic.w	r3, r3, #2
   1818e:	7363      	strb	r3, [r4, #13]
   18190:	e7d4      	b.n	1813c <z_thread_single_abort+0x7c>
   18192:	bf00      	nop
   18194:	200249a4 	.word	0x200249a4
   18198:	0001adf1 	.word	0x0001adf1
   1819c:	0001ae17 	.word	0x0001ae17
   181a0:	0001ac45 	.word	0x0001ac45
   181a4:	0001ae2c 	.word	0x0001ae2c
   181a8:	20024994 	.word	0x20024994
   181ac:	2002496c 	.word	0x2002496c
   181b0:	0001ae44 	.word	0x0001ae44
   181b4:	0001ae5b 	.word	0x0001ae5b

000181b8 <z_remove_thread_from_ready_q>:
{
   181b8:	b538      	push	{r3, r4, r5, lr}
   181ba:	4604      	mov	r4, r0
	__asm__ volatile(
   181bc:	f04f 0320 	mov.w	r3, #32
   181c0:	f3ef 8511 	mrs	r5, BASEPRI
   181c4:	f383 8811 	msr	BASEPRI, r3
   181c8:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   181cc:	481f      	ldr	r0, [pc, #124]	; (1824c <z_remove_thread_from_ready_q+0x94>)
   181ce:	f000 fb7b 	bl	188c8 <z_spin_lock_valid>
   181d2:	b968      	cbnz	r0, 181f0 <z_remove_thread_from_ready_q+0x38>
   181d4:	234a      	movs	r3, #74	; 0x4a
   181d6:	4a1e      	ldr	r2, [pc, #120]	; (18250 <z_remove_thread_from_ready_q+0x98>)
   181d8:	491e      	ldr	r1, [pc, #120]	; (18254 <z_remove_thread_from_ready_q+0x9c>)
   181da:	481f      	ldr	r0, [pc, #124]	; (18258 <z_remove_thread_from_ready_q+0xa0>)
   181dc:	f001 f9e5 	bl	195aa <printk>
   181e0:	491a      	ldr	r1, [pc, #104]	; (1824c <z_remove_thread_from_ready_q+0x94>)
   181e2:	481e      	ldr	r0, [pc, #120]	; (1825c <z_remove_thread_from_ready_q+0xa4>)
   181e4:	f001 f9e1 	bl	195aa <printk>
   181e8:	214a      	movs	r1, #74	; 0x4a
   181ea:	4819      	ldr	r0, [pc, #100]	; (18250 <z_remove_thread_from_ready_q+0x98>)
   181ec:	f001 f9f4 	bl	195d8 <assert_post_action>
	z_spin_lock_set_owner(l);
   181f0:	4816      	ldr	r0, [pc, #88]	; (1824c <z_remove_thread_from_ready_q+0x94>)
   181f2:	f000 fb87 	bl	18904 <z_spin_lock_set_owner>
		if (z_is_thread_queued(thread)) {
   181f6:	f994 300d 	ldrsb.w	r3, [r4, #13]
   181fa:	2b00      	cmp	r3, #0
   181fc:	da07      	bge.n	1820e <z_remove_thread_from_ready_q+0x56>
			_priq_run_remove(&_kernel.ready_q.runq, thread);
   181fe:	4621      	mov	r1, r4
   18200:	4817      	ldr	r0, [pc, #92]	; (18260 <z_remove_thread_from_ready_q+0xa8>)
   18202:	f7ff fc79 	bl	17af8 <z_priq_dumb_remove>
	thread->base.thread_state &= ~states;
   18206:	7b63      	ldrb	r3, [r4, #13]
   18208:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   1820c:	7363      	strb	r3, [r4, #13]
		update_cache(thread == _current);
   1820e:	4b15      	ldr	r3, [pc, #84]	; (18264 <z_remove_thread_from_ready_q+0xac>)
   18210:	6898      	ldr	r0, [r3, #8]
   18212:	1b03      	subs	r3, r0, r4
   18214:	4258      	negs	r0, r3
   18216:	4158      	adcs	r0, r3
   18218:	f7ff fcf2 	bl	17c00 <update_cache>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1821c:	480b      	ldr	r0, [pc, #44]	; (1824c <z_remove_thread_from_ready_q+0x94>)
   1821e:	f000 fb61 	bl	188e4 <z_spin_unlock_valid>
   18222:	b968      	cbnz	r0, 18240 <z_remove_thread_from_ready_q+0x88>
   18224:	235d      	movs	r3, #93	; 0x5d
   18226:	4a0a      	ldr	r2, [pc, #40]	; (18250 <z_remove_thread_from_ready_q+0x98>)
   18228:	490f      	ldr	r1, [pc, #60]	; (18268 <z_remove_thread_from_ready_q+0xb0>)
   1822a:	480b      	ldr	r0, [pc, #44]	; (18258 <z_remove_thread_from_ready_q+0xa0>)
   1822c:	f001 f9bd 	bl	195aa <printk>
   18230:	4906      	ldr	r1, [pc, #24]	; (1824c <z_remove_thread_from_ready_q+0x94>)
   18232:	480e      	ldr	r0, [pc, #56]	; (1826c <z_remove_thread_from_ready_q+0xb4>)
   18234:	f001 f9b9 	bl	195aa <printk>
   18238:	215d      	movs	r1, #93	; 0x5d
   1823a:	4805      	ldr	r0, [pc, #20]	; (18250 <z_remove_thread_from_ready_q+0x98>)
   1823c:	f001 f9cc 	bl	195d8 <assert_post_action>
	__asm__ volatile(
   18240:	f385 8811 	msr	BASEPRI, r5
   18244:	f3bf 8f6f 	isb	sy
}
   18248:	bd38      	pop	{r3, r4, r5, pc}
   1824a:	bf00      	nop
   1824c:	200249a4 	.word	0x200249a4
   18250:	0001adf1 	.word	0x0001adf1
   18254:	0001ae17 	.word	0x0001ae17
   18258:	0001ac45 	.word	0x0001ac45
   1825c:	0001ae2c 	.word	0x0001ae2c
   18260:	20024994 	.word	0x20024994
   18264:	2002496c 	.word	0x2002496c
   18268:	0001ae44 	.word	0x0001ae44
   1826c:	0001ae5b 	.word	0x0001ae5b

00018270 <pend>:
{
   18270:	b570      	push	{r4, r5, r6, lr}
   18272:	4604      	mov	r4, r0
   18274:	460d      	mov	r5, r1
   18276:	4616      	mov	r6, r2
	z_remove_thread_from_ready_q(thread);
   18278:	f7ff ff9e 	bl	181b8 <z_remove_thread_from_ready_q>
	thread->base.thread_state |= _THREAD_PENDING;
   1827c:	7b63      	ldrb	r3, [r4, #13]
   1827e:	f043 0302 	orr.w	r3, r3, #2
   18282:	7363      	strb	r3, [r4, #13]
	if (wait_q != NULL) {
   18284:	b1fd      	cbz	r5, 182c6 <pend+0x56>
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   18286:	4b2b      	ldr	r3, [pc, #172]	; (18334 <pend+0xc4>)
		thread->base.pended_on = wait_q;
   18288:	60a5      	str	r5, [r4, #8]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   1828a:	429c      	cmp	r4, r3
   1828c:	d10b      	bne.n	182a6 <pend+0x36>
   1828e:	492a      	ldr	r1, [pc, #168]	; (18338 <pend+0xc8>)
   18290:	482a      	ldr	r0, [pc, #168]	; (1833c <pend+0xcc>)
   18292:	f240 3302 	movw	r3, #770	; 0x302
   18296:	4a2a      	ldr	r2, [pc, #168]	; (18340 <pend+0xd0>)
   18298:	f001 f987 	bl	195aa <printk>
   1829c:	f240 3102 	movw	r1, #770	; 0x302
   182a0:	4827      	ldr	r0, [pc, #156]	; (18340 <pend+0xd0>)
   182a2:	f001 f999 	bl	195d8 <assert_post_action>
	return list->head == list;
   182a6:	682b      	ldr	r3, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   182a8:	429d      	cmp	r5, r3
   182aa:	d03b      	beq.n	18324 <pend+0xb4>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   182ac:	2b00      	cmp	r3, #0
   182ae:	d039      	beq.n	18324 <pend+0xb4>
	if (thread_1->base.prio < thread_2->base.prio) {
   182b0:	f994 200e 	ldrsb.w	r2, [r4, #14]
   182b4:	f993 100e 	ldrsb.w	r1, [r3, #14]
   182b8:	4291      	cmp	r1, r2
   182ba:	dd2d      	ble.n	18318 <pend+0xa8>
	node->prev = successor->prev;
   182bc:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   182be:	e9c4 3200 	strd	r3, r2, [r4]
	successor->prev->next = node;
   182c2:	6014      	str	r4, [r2, #0]
	successor->prev = node;
   182c4:	605c      	str	r4, [r3, #4]
	if (timeout != K_FOREVER) {
   182c6:	1c73      	adds	r3, r6, #1
   182c8:	d033      	beq.n	18332 <pend+0xc2>
		__ASSERT(timeout >= 0,
   182ca:	2e00      	cmp	r6, #0
   182cc:	da0e      	bge.n	182ec <pend+0x7c>
   182ce:	491d      	ldr	r1, [pc, #116]	; (18344 <pend+0xd4>)
   182d0:	f44f 73fb 	mov.w	r3, #502	; 0x1f6
   182d4:	4a1a      	ldr	r2, [pc, #104]	; (18340 <pend+0xd0>)
   182d6:	4819      	ldr	r0, [pc, #100]	; (1833c <pend+0xcc>)
   182d8:	f001 f967 	bl	195aa <printk>
   182dc:	481a      	ldr	r0, [pc, #104]	; (18348 <pend+0xd8>)
   182de:	f001 f964 	bl	195aa <printk>
   182e2:	f44f 71fb 	mov.w	r1, #502	; 0x1f6
   182e6:	4816      	ldr	r0, [pc, #88]	; (18340 <pend+0xd0>)
   182e8:	f001 f976 	bl	195d8 <assert_post_action>
   182ec:	f44f 4500 	mov.w	r5, #32768	; 0x8000
   182f0:	f240 30e7 	movw	r0, #999	; 0x3e7
   182f4:	2100      	movs	r1, #0
   182f6:	ea26 76e6 	bic.w	r6, r6, r6, asr #31
   182fa:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   182fe:	fbc5 0106 	smlal	r0, r1, r5, r6
   18302:	2300      	movs	r3, #0
   18304:	f7f3 ff9a 	bl	c23c <__aeabi_uldivmod>
	z_add_timeout(&th->base.timeout, z_thread_timeout, ticks);
   18308:	4910      	ldr	r1, [pc, #64]	; (1834c <pend+0xdc>)
   1830a:	1c42      	adds	r2, r0, #1
   1830c:	f104 0018 	add.w	r0, r4, #24
}
   18310:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   18314:	f000 bc1a 	b.w	18b4c <z_add_timeout>
	return (node == list->tail) ? NULL : node->next;
   18318:	6869      	ldr	r1, [r5, #4]
   1831a:	428b      	cmp	r3, r1
   1831c:	d002      	beq.n	18324 <pend+0xb4>
   1831e:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   18320:	2b00      	cmp	r3, #0
   18322:	d1c7      	bne.n	182b4 <pend+0x44>
	node->prev = list->tail;
   18324:	686b      	ldr	r3, [r5, #4]
	node->next = list;
   18326:	6025      	str	r5, [r4, #0]
	node->prev = list->tail;
   18328:	6063      	str	r3, [r4, #4]
	list->tail->next = node;
   1832a:	686b      	ldr	r3, [r5, #4]
   1832c:	601c      	str	r4, [r3, #0]
	list->tail = node;
   1832e:	606c      	str	r4, [r5, #4]
   18330:	e7c9      	b.n	182c6 <pend+0x56>
}
   18332:	bd70      	pop	{r4, r5, r6, pc}
   18334:	200207a4 	.word	0x200207a4
   18338:	0001b767 	.word	0x0001b767
   1833c:	0001ac45 	.word	0x0001ac45
   18340:	0001b70f 	.word	0x0001b70f
   18344:	0001b6d9 	.word	0x0001b6d9
   18348:	0001b6e6 	.word	0x0001b6e6
   1834c:	00017e65 	.word	0x00017e65

00018350 <z_pend_curr_irqlock>:
{
   18350:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   18352:	4606      	mov	r6, r0
	pend(_current, wait_q, timeout);
   18354:	4d22      	ldr	r5, [pc, #136]	; (183e0 <z_pend_curr_irqlock+0x90>)
	pending_current = _current;
   18356:	4c23      	ldr	r4, [pc, #140]	; (183e4 <z_pend_curr_irqlock+0x94>)
	pend(_current, wait_q, timeout);
   18358:	68a8      	ldr	r0, [r5, #8]
   1835a:	f7ff ff89 	bl	18270 <pend>
	pending_current = _current;
   1835e:	68ab      	ldr	r3, [r5, #8]
   18360:	4630      	mov	r0, r6
   18362:	6023      	str	r3, [r4, #0]
   18364:	f7f4 fdfa 	bl	cf5c <arch_swap>
   18368:	4606      	mov	r6, r0
	__asm__ volatile(
   1836a:	f04f 0320 	mov.w	r3, #32
   1836e:	f3ef 8711 	mrs	r7, BASEPRI
   18372:	f383 8811 	msr	BASEPRI, r3
   18376:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1837a:	481b      	ldr	r0, [pc, #108]	; (183e8 <z_pend_curr_irqlock+0x98>)
   1837c:	f000 faa4 	bl	188c8 <z_spin_lock_valid>
   18380:	b968      	cbnz	r0, 1839e <z_pend_curr_irqlock+0x4e>
   18382:	234a      	movs	r3, #74	; 0x4a
   18384:	4a19      	ldr	r2, [pc, #100]	; (183ec <z_pend_curr_irqlock+0x9c>)
   18386:	491a      	ldr	r1, [pc, #104]	; (183f0 <z_pend_curr_irqlock+0xa0>)
   18388:	481a      	ldr	r0, [pc, #104]	; (183f4 <z_pend_curr_irqlock+0xa4>)
   1838a:	f001 f90e 	bl	195aa <printk>
   1838e:	4916      	ldr	r1, [pc, #88]	; (183e8 <z_pend_curr_irqlock+0x98>)
   18390:	4819      	ldr	r0, [pc, #100]	; (183f8 <z_pend_curr_irqlock+0xa8>)
   18392:	f001 f90a 	bl	195aa <printk>
   18396:	214a      	movs	r1, #74	; 0x4a
   18398:	4814      	ldr	r0, [pc, #80]	; (183ec <z_pend_curr_irqlock+0x9c>)
   1839a:	f001 f91d 	bl	195d8 <assert_post_action>
	z_spin_lock_set_owner(l);
   1839e:	4812      	ldr	r0, [pc, #72]	; (183e8 <z_pend_curr_irqlock+0x98>)
   183a0:	f000 fab0 	bl	18904 <z_spin_lock_set_owner>
		if (pending_current == _current) {
   183a4:	6823      	ldr	r3, [r4, #0]
   183a6:	68aa      	ldr	r2, [r5, #8]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   183a8:	480f      	ldr	r0, [pc, #60]	; (183e8 <z_pend_curr_irqlock+0x98>)
   183aa:	429a      	cmp	r2, r3
			pending_current = NULL;
   183ac:	bf04      	itt	eq
   183ae:	2300      	moveq	r3, #0
   183b0:	6023      	streq	r3, [r4, #0]
   183b2:	f000 fa97 	bl	188e4 <z_spin_unlock_valid>
   183b6:	b968      	cbnz	r0, 183d4 <z_pend_curr_irqlock+0x84>
   183b8:	235d      	movs	r3, #93	; 0x5d
   183ba:	4a0c      	ldr	r2, [pc, #48]	; (183ec <z_pend_curr_irqlock+0x9c>)
   183bc:	490f      	ldr	r1, [pc, #60]	; (183fc <z_pend_curr_irqlock+0xac>)
   183be:	480d      	ldr	r0, [pc, #52]	; (183f4 <z_pend_curr_irqlock+0xa4>)
   183c0:	f001 f8f3 	bl	195aa <printk>
   183c4:	4908      	ldr	r1, [pc, #32]	; (183e8 <z_pend_curr_irqlock+0x98>)
   183c6:	480e      	ldr	r0, [pc, #56]	; (18400 <z_pend_curr_irqlock+0xb0>)
   183c8:	f001 f8ef 	bl	195aa <printk>
   183cc:	215d      	movs	r1, #93	; 0x5d
   183ce:	4807      	ldr	r0, [pc, #28]	; (183ec <z_pend_curr_irqlock+0x9c>)
   183d0:	f001 f902 	bl	195d8 <assert_post_action>
	__asm__ volatile(
   183d4:	f387 8811 	msr	BASEPRI, r7
   183d8:	f3bf 8f6f 	isb	sy
}
   183dc:	4630      	mov	r0, r6
   183de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   183e0:	2002496c 	.word	0x2002496c
   183e4:	200249a0 	.word	0x200249a0
   183e8:	200249a4 	.word	0x200249a4
   183ec:	0001adf1 	.word	0x0001adf1
   183f0:	0001ae17 	.word	0x0001ae17
   183f4:	0001ac45 	.word	0x0001ac45
   183f8:	0001ae2c 	.word	0x0001ae2c
   183fc:	0001ae44 	.word	0x0001ae44
   18400:	0001ae5b 	.word	0x0001ae5b

00018404 <z_pend_curr>:
{
   18404:	b538      	push	{r3, r4, r5, lr}
   18406:	4604      	mov	r4, r0
   18408:	460d      	mov	r5, r1
   1840a:	4611      	mov	r1, r2
	pending_current = _current;
   1840c:	4a0e      	ldr	r2, [pc, #56]	; (18448 <z_pend_curr+0x44>)
   1840e:	6890      	ldr	r0, [r2, #8]
   18410:	4a0e      	ldr	r2, [pc, #56]	; (1844c <z_pend_curr+0x48>)
   18412:	6010      	str	r0, [r2, #0]
	pend(_current, wait_q, timeout);
   18414:	461a      	mov	r2, r3
   18416:	f7ff ff2b 	bl	18270 <pend>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1841a:	4620      	mov	r0, r4
   1841c:	f000 fa62 	bl	188e4 <z_spin_unlock_valid>
   18420:	b968      	cbnz	r0, 1843e <z_pend_curr+0x3a>
   18422:	2374      	movs	r3, #116	; 0x74
   18424:	4a0a      	ldr	r2, [pc, #40]	; (18450 <z_pend_curr+0x4c>)
   18426:	490b      	ldr	r1, [pc, #44]	; (18454 <z_pend_curr+0x50>)
   18428:	480b      	ldr	r0, [pc, #44]	; (18458 <z_pend_curr+0x54>)
   1842a:	f001 f8be 	bl	195aa <printk>
   1842e:	4621      	mov	r1, r4
   18430:	480a      	ldr	r0, [pc, #40]	; (1845c <z_pend_curr+0x58>)
   18432:	f001 f8ba 	bl	195aa <printk>
   18436:	2174      	movs	r1, #116	; 0x74
   18438:	4805      	ldr	r0, [pc, #20]	; (18450 <z_pend_curr+0x4c>)
   1843a:	f001 f8cd 	bl	195d8 <assert_post_action>
   1843e:	4628      	mov	r0, r5
}
   18440:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   18444:	f7f4 bd8a 	b.w	cf5c <arch_swap>
   18448:	2002496c 	.word	0x2002496c
   1844c:	200249a0 	.word	0x200249a0
   18450:	0001adf1 	.word	0x0001adf1
   18454:	0001ae44 	.word	0x0001ae44
   18458:	0001ac45 	.word	0x0001ac45
   1845c:	0001ae5b 	.word	0x0001ae5b

00018460 <z_unpend_first_thread>:
{
   18460:	b538      	push	{r3, r4, r5, lr}
   18462:	4604      	mov	r4, r0
	__asm__ volatile(
   18464:	f04f 0320 	mov.w	r3, #32
   18468:	f3ef 8511 	mrs	r5, BASEPRI
   1846c:	f383 8811 	msr	BASEPRI, r3
   18470:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   18474:	483b      	ldr	r0, [pc, #236]	; (18564 <z_unpend_first_thread+0x104>)
   18476:	f000 fa27 	bl	188c8 <z_spin_lock_valid>
   1847a:	b968      	cbnz	r0, 18498 <z_unpend_first_thread+0x38>
   1847c:	234a      	movs	r3, #74	; 0x4a
   1847e:	4a3a      	ldr	r2, [pc, #232]	; (18568 <z_unpend_first_thread+0x108>)
   18480:	493a      	ldr	r1, [pc, #232]	; (1856c <z_unpend_first_thread+0x10c>)
   18482:	483b      	ldr	r0, [pc, #236]	; (18570 <z_unpend_first_thread+0x110>)
   18484:	f001 f891 	bl	195aa <printk>
   18488:	4936      	ldr	r1, [pc, #216]	; (18564 <z_unpend_first_thread+0x104>)
   1848a:	483a      	ldr	r0, [pc, #232]	; (18574 <z_unpend_first_thread+0x114>)
   1848c:	f001 f88d 	bl	195aa <printk>
   18490:	214a      	movs	r1, #74	; 0x4a
   18492:	4835      	ldr	r0, [pc, #212]	; (18568 <z_unpend_first_thread+0x108>)
   18494:	f001 f8a0 	bl	195d8 <assert_post_action>
	z_spin_lock_set_owner(l);
   18498:	4832      	ldr	r0, [pc, #200]	; (18564 <z_unpend_first_thread+0x104>)
   1849a:	f000 fa33 	bl	18904 <z_spin_lock_set_owner>
		ret = _priq_wait_best(&wait_q->waitq);
   1849e:	4620      	mov	r0, r4
   184a0:	f001 ffcd 	bl	1a43e <z_priq_dumb_best>
   184a4:	4604      	mov	r4, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   184a6:	482f      	ldr	r0, [pc, #188]	; (18564 <z_unpend_first_thread+0x104>)
   184a8:	f000 fa1c 	bl	188e4 <z_spin_unlock_valid>
   184ac:	b968      	cbnz	r0, 184ca <z_unpend_first_thread+0x6a>
   184ae:	235d      	movs	r3, #93	; 0x5d
   184b0:	4a2d      	ldr	r2, [pc, #180]	; (18568 <z_unpend_first_thread+0x108>)
   184b2:	4931      	ldr	r1, [pc, #196]	; (18578 <z_unpend_first_thread+0x118>)
   184b4:	482e      	ldr	r0, [pc, #184]	; (18570 <z_unpend_first_thread+0x110>)
   184b6:	f001 f878 	bl	195aa <printk>
   184ba:	492a      	ldr	r1, [pc, #168]	; (18564 <z_unpend_first_thread+0x104>)
   184bc:	482f      	ldr	r0, [pc, #188]	; (1857c <z_unpend_first_thread+0x11c>)
   184be:	f001 f874 	bl	195aa <printk>
   184c2:	215d      	movs	r1, #93	; 0x5d
   184c4:	4828      	ldr	r0, [pc, #160]	; (18568 <z_unpend_first_thread+0x108>)
   184c6:	f001 f887 	bl	195d8 <assert_post_action>
	__asm__ volatile(
   184ca:	f385 8811 	msr	BASEPRI, r5
   184ce:	f3bf 8f6f 	isb	sy

static inline struct k_thread *z_unpend1_no_timeout(_wait_q_t *wait_q)
{
	struct k_thread *thread = z_find_first_thread_to_unpend(wait_q, NULL);

	if (thread != NULL) {
   184d2:	2c00      	cmp	r4, #0
   184d4:	d043      	beq.n	1855e <z_unpend_first_thread+0xfe>
	__asm__ volatile(
   184d6:	f04f 0320 	mov.w	r3, #32
   184da:	f3ef 8511 	mrs	r5, BASEPRI
   184de:	f383 8811 	msr	BASEPRI, r3
   184e2:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   184e6:	481f      	ldr	r0, [pc, #124]	; (18564 <z_unpend_first_thread+0x104>)
   184e8:	f000 f9ee 	bl	188c8 <z_spin_lock_valid>
   184ec:	b968      	cbnz	r0, 1850a <z_unpend_first_thread+0xaa>
   184ee:	234a      	movs	r3, #74	; 0x4a
   184f0:	4a1d      	ldr	r2, [pc, #116]	; (18568 <z_unpend_first_thread+0x108>)
   184f2:	491e      	ldr	r1, [pc, #120]	; (1856c <z_unpend_first_thread+0x10c>)
   184f4:	481e      	ldr	r0, [pc, #120]	; (18570 <z_unpend_first_thread+0x110>)
   184f6:	f001 f858 	bl	195aa <printk>
   184fa:	491a      	ldr	r1, [pc, #104]	; (18564 <z_unpend_first_thread+0x104>)
   184fc:	481d      	ldr	r0, [pc, #116]	; (18574 <z_unpend_first_thread+0x114>)
   184fe:	f001 f854 	bl	195aa <printk>
   18502:	214a      	movs	r1, #74	; 0x4a
   18504:	4818      	ldr	r0, [pc, #96]	; (18568 <z_unpend_first_thread+0x108>)
   18506:	f001 f867 	bl	195d8 <assert_post_action>
	z_spin_lock_set_owner(l);
   1850a:	4816      	ldr	r0, [pc, #88]	; (18564 <z_unpend_first_thread+0x104>)
   1850c:	f000 f9fa 	bl	18904 <z_spin_lock_set_owner>
		_priq_wait_remove(&pended_on(thread)->waitq, thread);
   18510:	f104 0008 	add.w	r0, r4, #8
   18514:	f7ff f9ae 	bl	17874 <pended_on.isra.17>
   18518:	4621      	mov	r1, r4
   1851a:	f7ff faed 	bl	17af8 <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
   1851e:	7b63      	ldrb	r3, [r4, #13]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   18520:	4810      	ldr	r0, [pc, #64]	; (18564 <z_unpend_first_thread+0x104>)
   18522:	f023 0302 	bic.w	r3, r3, #2
   18526:	7363      	strb	r3, [r4, #13]
   18528:	f000 f9dc 	bl	188e4 <z_spin_unlock_valid>
   1852c:	b968      	cbnz	r0, 1854a <z_unpend_first_thread+0xea>
   1852e:	235d      	movs	r3, #93	; 0x5d
   18530:	4a0d      	ldr	r2, [pc, #52]	; (18568 <z_unpend_first_thread+0x108>)
   18532:	4911      	ldr	r1, [pc, #68]	; (18578 <z_unpend_first_thread+0x118>)
   18534:	480e      	ldr	r0, [pc, #56]	; (18570 <z_unpend_first_thread+0x110>)
   18536:	f001 f838 	bl	195aa <printk>
   1853a:	490a      	ldr	r1, [pc, #40]	; (18564 <z_unpend_first_thread+0x104>)
   1853c:	480f      	ldr	r0, [pc, #60]	; (1857c <z_unpend_first_thread+0x11c>)
   1853e:	f001 f834 	bl	195aa <printk>
   18542:	215d      	movs	r1, #93	; 0x5d
   18544:	4808      	ldr	r0, [pc, #32]	; (18568 <z_unpend_first_thread+0x108>)
   18546:	f001 f847 	bl	195d8 <assert_post_action>
	__asm__ volatile(
   1854a:	f385 8811 	msr	BASEPRI, r5
   1854e:	f3bf 8f6f 	isb	sy
	thread->base.pended_on = NULL;
   18552:	2300      	movs	r3, #0
	return z_abort_timeout(&thread->base.timeout);
   18554:	f104 0018 	add.w	r0, r4, #24
   18558:	60a3      	str	r3, [r4, #8]
   1855a:	f000 fb9d 	bl	18c98 <z_abort_timeout>
}
   1855e:	4620      	mov	r0, r4
   18560:	bd38      	pop	{r3, r4, r5, pc}
   18562:	bf00      	nop
   18564:	200249a4 	.word	0x200249a4
   18568:	0001adf1 	.word	0x0001adf1
   1856c:	0001ae17 	.word	0x0001ae17
   18570:	0001ac45 	.word	0x0001ac45
   18574:	0001ae2c 	.word	0x0001ae2c
   18578:	0001ae44 	.word	0x0001ae44
   1857c:	0001ae5b 	.word	0x0001ae5b

00018580 <z_sched_init>:
		sys_dlist_init(&_kernel.ready_q.runq.queues[i]);
	}
#endif

#ifdef CONFIG_TIMESLICING
	k_sched_time_slice_set(CONFIG_TIMESLICE_SIZE,
   18580:	2100      	movs	r1, #0
	list->head = (sys_dnode_t *)list;
   18582:	4b04      	ldr	r3, [pc, #16]	; (18594 <z_sched_init+0x14>)
   18584:	4608      	mov	r0, r1
   18586:	f103 0228 	add.w	r2, r3, #40	; 0x28
	list->tail = (sys_dnode_t *)list;
   1858a:	e9c3 220a 	strd	r2, r2, [r3, #40]	; 0x28
   1858e:	f7ff b99f 	b.w	178d0 <k_sched_time_slice_set>
   18592:	bf00      	nop
   18594:	2002496c 	.word	0x2002496c

00018598 <z_impl_k_yield>:
#include <syscalls/k_thread_deadline_set_mrsh.c>
#endif
#endif

void z_impl_k_yield(void)
{
   18598:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1859a:	f3ef 8305 	mrs	r3, IPSR
	__ASSERT(!arch_is_in_isr(), "");
   1859e:	b173      	cbz	r3, 185be <z_impl_k_yield+0x26>
   185a0:	4945      	ldr	r1, [pc, #276]	; (186b8 <z_impl_k_yield+0x120>)
   185a2:	f240 430d 	movw	r3, #1037	; 0x40d
   185a6:	4a45      	ldr	r2, [pc, #276]	; (186bc <z_impl_k_yield+0x124>)
   185a8:	4845      	ldr	r0, [pc, #276]	; (186c0 <z_impl_k_yield+0x128>)
   185aa:	f000 fffe 	bl	195aa <printk>
   185ae:	4845      	ldr	r0, [pc, #276]	; (186c4 <z_impl_k_yield+0x12c>)
   185b0:	f000 fffb 	bl	195aa <printk>
   185b4:	f240 410d 	movw	r1, #1037	; 0x40d
   185b8:	4840      	ldr	r0, [pc, #256]	; (186bc <z_impl_k_yield+0x124>)
   185ba:	f001 f80d 	bl	195d8 <assert_post_action>

	if (!z_is_idle_thread_object(_current)) {
   185be:	4c42      	ldr	r4, [pc, #264]	; (186c8 <z_impl_k_yield+0x130>)
   185c0:	4e42      	ldr	r6, [pc, #264]	; (186cc <z_impl_k_yield+0x134>)
   185c2:	68a2      	ldr	r2, [r4, #8]
   185c4:	42b2      	cmp	r2, r6
   185c6:	d05f      	beq.n	18688 <z_impl_k_yield+0xf0>
	__asm__ volatile(
   185c8:	f04f 0320 	mov.w	r3, #32
   185cc:	f3ef 8711 	mrs	r7, BASEPRI
   185d0:	f383 8811 	msr	BASEPRI, r3
   185d4:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   185d8:	483d      	ldr	r0, [pc, #244]	; (186d0 <z_impl_k_yield+0x138>)
   185da:	f000 f975 	bl	188c8 <z_spin_lock_valid>
   185de:	b968      	cbnz	r0, 185fc <z_impl_k_yield+0x64>
   185e0:	234a      	movs	r3, #74	; 0x4a
   185e2:	4a3c      	ldr	r2, [pc, #240]	; (186d4 <z_impl_k_yield+0x13c>)
   185e4:	493c      	ldr	r1, [pc, #240]	; (186d8 <z_impl_k_yield+0x140>)
   185e6:	4836      	ldr	r0, [pc, #216]	; (186c0 <z_impl_k_yield+0x128>)
   185e8:	f000 ffdf 	bl	195aa <printk>
   185ec:	4938      	ldr	r1, [pc, #224]	; (186d0 <z_impl_k_yield+0x138>)
   185ee:	483b      	ldr	r0, [pc, #236]	; (186dc <z_impl_k_yield+0x144>)
   185f0:	f000 ffdb 	bl	195aa <printk>
   185f4:	214a      	movs	r1, #74	; 0x4a
   185f6:	4837      	ldr	r0, [pc, #220]	; (186d4 <z_impl_k_yield+0x13c>)
   185f8:	f000 ffee 	bl	195d8 <assert_post_action>
	z_spin_lock_set_owner(l);
   185fc:	4834      	ldr	r0, [pc, #208]	; (186d0 <z_impl_k_yield+0x138>)
   185fe:	f000 f981 	bl	18904 <z_spin_lock_set_owner>
		LOCKED(&sched_spinlock) {
			if (!IS_ENABLED(CONFIG_SMP) ||
			    z_is_thread_queued(_current)) {
				_priq_run_remove(&_kernel.ready_q.runq,
   18602:	68a1      	ldr	r1, [r4, #8]
   18604:	4836      	ldr	r0, [pc, #216]	; (186e0 <z_impl_k_yield+0x148>)
   18606:	f7ff fa77 	bl	17af8 <z_priq_dumb_remove>
						 _current);
			}
			_priq_run_add(&_kernel.ready_q.runq, _current);
   1860a:	68a5      	ldr	r5, [r4, #8]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   1860c:	42b5      	cmp	r5, r6
   1860e:	d10b      	bne.n	18628 <z_impl_k_yield+0x90>
   18610:	4934      	ldr	r1, [pc, #208]	; (186e4 <z_impl_k_yield+0x14c>)
   18612:	482b      	ldr	r0, [pc, #172]	; (186c0 <z_impl_k_yield+0x128>)
   18614:	f240 3302 	movw	r3, #770	; 0x302
   18618:	4a28      	ldr	r2, [pc, #160]	; (186bc <z_impl_k_yield+0x124>)
   1861a:	f000 ffc6 	bl	195aa <printk>
   1861e:	f240 3102 	movw	r1, #770	; 0x302
   18622:	4826      	ldr	r0, [pc, #152]	; (186bc <z_impl_k_yield+0x124>)
   18624:	f000 ffd8 	bl	195d8 <assert_post_action>
	return list->head == list;
   18628:	e9d4 310a 	ldrd	r3, r1, [r4, #40]	; 0x28
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1862c:	4a2c      	ldr	r2, [pc, #176]	; (186e0 <z_impl_k_yield+0x148>)
   1862e:	4293      	cmp	r3, r2
   18630:	d03b      	beq.n	186aa <z_impl_k_yield+0x112>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   18632:	2b00      	cmp	r3, #0
   18634:	d039      	beq.n	186aa <z_impl_k_yield+0x112>
	if (thread_1->base.prio < thread_2->base.prio) {
   18636:	f995 000e 	ldrsb.w	r0, [r5, #14]
   1863a:	f993 600e 	ldrsb.w	r6, [r3, #14]
   1863e:	4286      	cmp	r6, r0
   18640:	dd2e      	ble.n	186a0 <z_impl_k_yield+0x108>
	node->prev = successor->prev;
   18642:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   18644:	e9c5 3200 	strd	r3, r2, [r5]
	successor->prev->next = node;
   18648:	6015      	str	r5, [r2, #0]
	successor->prev = node;
   1864a:	605d      	str	r5, [r3, #4]
			z_mark_thread_as_queued(_current);
   1864c:	68a2      	ldr	r2, [r4, #8]
			update_cache(1);
   1864e:	2001      	movs	r0, #1
	thread->base.thread_state |= states;
   18650:	7b53      	ldrb	r3, [r2, #13]
   18652:	f063 037f 	orn	r3, r3, #127	; 0x7f
   18656:	7353      	strb	r3, [r2, #13]
   18658:	f7ff fad2 	bl	17c00 <update_cache>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1865c:	481c      	ldr	r0, [pc, #112]	; (186d0 <z_impl_k_yield+0x138>)
   1865e:	f000 f941 	bl	188e4 <z_spin_unlock_valid>
   18662:	b968      	cbnz	r0, 18680 <z_impl_k_yield+0xe8>
   18664:	235d      	movs	r3, #93	; 0x5d
   18666:	4a1b      	ldr	r2, [pc, #108]	; (186d4 <z_impl_k_yield+0x13c>)
   18668:	491f      	ldr	r1, [pc, #124]	; (186e8 <z_impl_k_yield+0x150>)
   1866a:	4815      	ldr	r0, [pc, #84]	; (186c0 <z_impl_k_yield+0x128>)
   1866c:	f000 ff9d 	bl	195aa <printk>
   18670:	4917      	ldr	r1, [pc, #92]	; (186d0 <z_impl_k_yield+0x138>)
   18672:	481e      	ldr	r0, [pc, #120]	; (186ec <z_impl_k_yield+0x154>)
   18674:	f000 ff99 	bl	195aa <printk>
   18678:	215d      	movs	r1, #93	; 0x5d
   1867a:	4816      	ldr	r0, [pc, #88]	; (186d4 <z_impl_k_yield+0x13c>)
   1867c:	f000 ffac 	bl	195d8 <assert_post_action>
	__asm__ volatile(
   18680:	f387 8811 	msr	BASEPRI, r7
   18684:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
   18688:	f04f 0320 	mov.w	r3, #32
   1868c:	f3ef 8011 	mrs	r0, BASEPRI
   18690:	f383 8811 	msr	BASEPRI, r3
   18694:	f3bf 8f6f 	isb	sy
		}
	}
	z_swap_unlocked();
}
   18698:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   1869c:	f7f4 bc5e 	b.w	cf5c <arch_swap>
	return (node == list->tail) ? NULL : node->next;
   186a0:	4299      	cmp	r1, r3
   186a2:	d002      	beq.n	186aa <z_impl_k_yield+0x112>
   186a4:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   186a6:	2b00      	cmp	r3, #0
   186a8:	d1c7      	bne.n	1863a <z_impl_k_yield+0xa2>
	node->prev = list->tail;
   186aa:	e9c5 2100 	strd	r2, r1, [r5]
	list->tail->next = node;
   186ae:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   186b0:	601d      	str	r5, [r3, #0]
	list->tail = node;
   186b2:	62e5      	str	r5, [r4, #44]	; 0x2c
   186b4:	e7ca      	b.n	1864c <z_impl_k_yield+0xb4>
   186b6:	bf00      	nop
   186b8:	0001b677 	.word	0x0001b677
   186bc:	0001b70f 	.word	0x0001b70f
   186c0:	0001ac45 	.word	0x0001ac45
   186c4:	0001b2ea 	.word	0x0001b2ea
   186c8:	2002496c 	.word	0x2002496c
   186cc:	200207a4 	.word	0x200207a4
   186d0:	200249a4 	.word	0x200249a4
   186d4:	0001adf1 	.word	0x0001adf1
   186d8:	0001ae17 	.word	0x0001ae17
   186dc:	0001ae2c 	.word	0x0001ae2c
   186e0:	20024994 	.word	0x20024994
   186e4:	0001b767 	.word	0x0001b767
   186e8:	0001ae44 	.word	0x0001ae44
   186ec:	0001ae5b 	.word	0x0001ae5b

000186f0 <z_impl_k_current_get>:
#endif

k_tid_t z_impl_k_current_get(void)
{
	return _current;
}
   186f0:	4b01      	ldr	r3, [pc, #4]	; (186f8 <z_impl_k_current_get+0x8>)
   186f2:	6898      	ldr	r0, [r3, #8]
   186f4:	4770      	bx	lr
   186f6:	bf00      	nop
   186f8:	2002496c 	.word	0x2002496c

000186fc <z_impl_k_sem_give>:
	ARG_UNUSED(sem);
#endif
}

void z_impl_k_sem_give(struct k_sem *sem)
{
   186fc:	b570      	push	{r4, r5, r6, lr}
   186fe:	4604      	mov	r4, r0
   18700:	f04f 0320 	mov.w	r3, #32
   18704:	f3ef 8611 	mrs	r6, BASEPRI
   18708:	f383 8811 	msr	BASEPRI, r3
   1870c:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   18710:	481a      	ldr	r0, [pc, #104]	; (1877c <z_impl_k_sem_give+0x80>)
   18712:	f000 f8d9 	bl	188c8 <z_spin_lock_valid>
   18716:	b968      	cbnz	r0, 18734 <z_impl_k_sem_give+0x38>
   18718:	234a      	movs	r3, #74	; 0x4a
   1871a:	4a19      	ldr	r2, [pc, #100]	; (18780 <z_impl_k_sem_give+0x84>)
   1871c:	4919      	ldr	r1, [pc, #100]	; (18784 <z_impl_k_sem_give+0x88>)
   1871e:	481a      	ldr	r0, [pc, #104]	; (18788 <z_impl_k_sem_give+0x8c>)
   18720:	f000 ff43 	bl	195aa <printk>
   18724:	4915      	ldr	r1, [pc, #84]	; (1877c <z_impl_k_sem_give+0x80>)
   18726:	4819      	ldr	r0, [pc, #100]	; (1878c <z_impl_k_sem_give+0x90>)
   18728:	f000 ff3f 	bl	195aa <printk>
   1872c:	214a      	movs	r1, #74	; 0x4a
   1872e:	4814      	ldr	r0, [pc, #80]	; (18780 <z_impl_k_sem_give+0x84>)
   18730:	f000 ff52 	bl	195d8 <assert_post_action>
	z_spin_lock_set_owner(l);
   18734:	4811      	ldr	r0, [pc, #68]	; (1877c <z_impl_k_sem_give+0x80>)
   18736:	f000 f8e5 	bl	18904 <z_spin_lock_set_owner>
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_thread *thread = z_unpend_first_thread(&sem->wait_q);
   1873a:	4620      	mov	r0, r4
   1873c:	f7ff fe90 	bl	18460 <z_unpend_first_thread>

	sys_trace_void(SYS_TRACE_ID_SEMA_GIVE);

	if (thread != NULL) {
   18740:	4605      	mov	r5, r0
   18742:	b170      	cbz	r0, 18762 <z_impl_k_sem_give+0x66>
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
   18744:	7b43      	ldrb	r3, [r0, #13]
   18746:	06db      	lsls	r3, r3, #27
   18748:	d103      	bne.n	18752 <z_impl_k_sem_give+0x56>
	if (z_is_thread_ready(thread)) {
   1874a:	6983      	ldr	r3, [r0, #24]
   1874c:	b90b      	cbnz	r3, 18752 <z_impl_k_sem_give+0x56>
		z_add_thread_to_ready_q(thread);
   1874e:	f7ff fb09 	bl	17d64 <z_add_thread_to_ready_q>
}

static ALWAYS_INLINE void
arch_thread_return_value_set(struct k_thread *thread, unsigned int value)
{
	thread->arch.swap_return_value = value;
   18752:	2300      	movs	r3, #0
   18754:	66ab      	str	r3, [r5, #104]	; 0x68
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
		handle_poll_events(sem);
	}

	sys_trace_end_call(SYS_TRACE_ID_SEMA_GIVE);
	z_reschedule(&lock, key);
   18756:	4631      	mov	r1, r6
}
   18758:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	z_reschedule(&lock, key);
   1875c:	4807      	ldr	r0, [pc, #28]	; (1877c <z_impl_k_sem_give+0x80>)
   1875e:	f7ff b917 	b.w	17990 <z_reschedule>
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
   18762:	e9d4 3202 	ldrd	r3, r2, [r4, #8]
   18766:	429a      	cmp	r2, r3
   18768:	bf18      	it	ne
   1876a:	3301      	addne	r3, #1
	z_handle_obj_poll_events(&sem->poll_events, K_POLL_STATE_SEM_AVAILABLE);
   1876c:	2102      	movs	r1, #2
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
   1876e:	60a3      	str	r3, [r4, #8]
	z_handle_obj_poll_events(&sem->poll_events, K_POLL_STATE_SEM_AVAILABLE);
   18770:	f104 0010 	add.w	r0, r4, #16
   18774:	f001 fec7 	bl	1a506 <z_handle_obj_poll_events>
   18778:	e7ed      	b.n	18756 <z_impl_k_sem_give+0x5a>
   1877a:	bf00      	nop
   1877c:	200249b0 	.word	0x200249b0
   18780:	0001adf1 	.word	0x0001adf1
   18784:	0001ae17 	.word	0x0001ae17
   18788:	0001ac45 	.word	0x0001ac45
   1878c:	0001ae2c 	.word	0x0001ae2c

00018790 <z_impl_k_sem_take>:
}
#include <syscalls/k_sem_give_mrsh.c>
#endif

int z_impl_k_sem_take(struct k_sem *sem, s32_t timeout)
{
   18790:	b570      	push	{r4, r5, r6, lr}
   18792:	4605      	mov	r5, r0
   18794:	460e      	mov	r6, r1
   18796:	f3ef 8305 	mrs	r3, IPSR
	int ret = 0;

	__ASSERT(((arch_is_in_isr() == false) || (timeout == K_NO_WAIT)), "");
   1879a:	b16b      	cbz	r3, 187b8 <z_impl_k_sem_take+0x28>
   1879c:	b161      	cbz	r1, 187b8 <z_impl_k_sem_take+0x28>
   1879e:	4934      	ldr	r1, [pc, #208]	; (18870 <z_impl_k_sem_take+0xe0>)
   187a0:	238c      	movs	r3, #140	; 0x8c
   187a2:	4a34      	ldr	r2, [pc, #208]	; (18874 <z_impl_k_sem_take+0xe4>)
   187a4:	4834      	ldr	r0, [pc, #208]	; (18878 <z_impl_k_sem_take+0xe8>)
   187a6:	f000 ff00 	bl	195aa <printk>
   187aa:	4834      	ldr	r0, [pc, #208]	; (1887c <z_impl_k_sem_take+0xec>)
   187ac:	f000 fefd 	bl	195aa <printk>
   187b0:	218c      	movs	r1, #140	; 0x8c
   187b2:	4830      	ldr	r0, [pc, #192]	; (18874 <z_impl_k_sem_take+0xe4>)
   187b4:	f000 ff10 	bl	195d8 <assert_post_action>
   187b8:	f04f 0320 	mov.w	r3, #32
   187bc:	f3ef 8411 	mrs	r4, BASEPRI
   187c0:	f383 8811 	msr	BASEPRI, r3
   187c4:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   187c8:	482d      	ldr	r0, [pc, #180]	; (18880 <z_impl_k_sem_take+0xf0>)
   187ca:	f000 f87d 	bl	188c8 <z_spin_lock_valid>
   187ce:	b968      	cbnz	r0, 187ec <z_impl_k_sem_take+0x5c>
   187d0:	234a      	movs	r3, #74	; 0x4a
   187d2:	4a2c      	ldr	r2, [pc, #176]	; (18884 <z_impl_k_sem_take+0xf4>)
   187d4:	492c      	ldr	r1, [pc, #176]	; (18888 <z_impl_k_sem_take+0xf8>)
   187d6:	4828      	ldr	r0, [pc, #160]	; (18878 <z_impl_k_sem_take+0xe8>)
   187d8:	f000 fee7 	bl	195aa <printk>
   187dc:	4928      	ldr	r1, [pc, #160]	; (18880 <z_impl_k_sem_take+0xf0>)
   187de:	482b      	ldr	r0, [pc, #172]	; (1888c <z_impl_k_sem_take+0xfc>)
   187e0:	f000 fee3 	bl	195aa <printk>
   187e4:	214a      	movs	r1, #74	; 0x4a
   187e6:	4827      	ldr	r0, [pc, #156]	; (18884 <z_impl_k_sem_take+0xf4>)
   187e8:	f000 fef6 	bl	195d8 <assert_post_action>
	z_spin_lock_set_owner(l);
   187ec:	4824      	ldr	r0, [pc, #144]	; (18880 <z_impl_k_sem_take+0xf0>)
   187ee:	f000 f889 	bl	18904 <z_spin_lock_set_owner>

	sys_trace_void(SYS_TRACE_ID_SEMA_TAKE);
	k_spinlock_key_t key = k_spin_lock(&lock);

	if (likely(sem->count > 0U)) {
   187f2:	68ab      	ldr	r3, [r5, #8]
   187f4:	b1cb      	cbz	r3, 1882a <z_impl_k_sem_take+0x9a>
		sem->count--;
   187f6:	3b01      	subs	r3, #1
   187f8:	60ab      	str	r3, [r5, #8]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   187fa:	4821      	ldr	r0, [pc, #132]	; (18880 <z_impl_k_sem_take+0xf0>)
   187fc:	f000 f872 	bl	188e4 <z_spin_unlock_valid>
   18800:	b968      	cbnz	r0, 1881e <z_impl_k_sem_take+0x8e>
   18802:	235d      	movs	r3, #93	; 0x5d
   18804:	4a1f      	ldr	r2, [pc, #124]	; (18884 <z_impl_k_sem_take+0xf4>)
   18806:	4922      	ldr	r1, [pc, #136]	; (18890 <z_impl_k_sem_take+0x100>)
   18808:	481b      	ldr	r0, [pc, #108]	; (18878 <z_impl_k_sem_take+0xe8>)
   1880a:	f000 fece 	bl	195aa <printk>
   1880e:	491c      	ldr	r1, [pc, #112]	; (18880 <z_impl_k_sem_take+0xf0>)
   18810:	4820      	ldr	r0, [pc, #128]	; (18894 <z_impl_k_sem_take+0x104>)
   18812:	f000 feca 	bl	195aa <printk>
   18816:	215d      	movs	r1, #93	; 0x5d
   18818:	481a      	ldr	r0, [pc, #104]	; (18884 <z_impl_k_sem_take+0xf4>)
   1881a:	f000 fedd 	bl	195d8 <assert_post_action>
	__asm__ volatile(
   1881e:	f384 8811 	msr	BASEPRI, r4
   18822:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		ret = 0;
   18826:	2000      	movs	r0, #0
	ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);

out:
	sys_trace_end_call(SYS_TRACE_ID_SEMA_TAKE);
	return ret;
}
   18828:	bd70      	pop	{r4, r5, r6, pc}
	if (timeout == K_NO_WAIT) {
   1882a:	b9c6      	cbnz	r6, 1885e <z_impl_k_sem_take+0xce>
   1882c:	4814      	ldr	r0, [pc, #80]	; (18880 <z_impl_k_sem_take+0xf0>)
   1882e:	f000 f859 	bl	188e4 <z_spin_unlock_valid>
   18832:	b968      	cbnz	r0, 18850 <z_impl_k_sem_take+0xc0>
   18834:	235d      	movs	r3, #93	; 0x5d
   18836:	4a13      	ldr	r2, [pc, #76]	; (18884 <z_impl_k_sem_take+0xf4>)
   18838:	4915      	ldr	r1, [pc, #84]	; (18890 <z_impl_k_sem_take+0x100>)
   1883a:	480f      	ldr	r0, [pc, #60]	; (18878 <z_impl_k_sem_take+0xe8>)
   1883c:	f000 feb5 	bl	195aa <printk>
   18840:	490f      	ldr	r1, [pc, #60]	; (18880 <z_impl_k_sem_take+0xf0>)
   18842:	4814      	ldr	r0, [pc, #80]	; (18894 <z_impl_k_sem_take+0x104>)
   18844:	f000 feb1 	bl	195aa <printk>
   18848:	215d      	movs	r1, #93	; 0x5d
   1884a:	480e      	ldr	r0, [pc, #56]	; (18884 <z_impl_k_sem_take+0xf4>)
   1884c:	f000 fec4 	bl	195d8 <assert_post_action>
   18850:	f384 8811 	msr	BASEPRI, r4
   18854:	f3bf 8f6f 	isb	sy
		ret = -EBUSY;
   18858:	f06f 000f 	mvn.w	r0, #15
		goto out;
   1885c:	e7e4      	b.n	18828 <z_impl_k_sem_take+0x98>
	ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);
   1885e:	4633      	mov	r3, r6
   18860:	462a      	mov	r2, r5
   18862:	4621      	mov	r1, r4
}
   18864:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);
   18868:	4805      	ldr	r0, [pc, #20]	; (18880 <z_impl_k_sem_take+0xf0>)
   1886a:	f7ff bdcb 	b.w	18404 <z_pend_curr>
   1886e:	bf00      	nop
   18870:	0001b7a8 	.word	0x0001b7a8
   18874:	0001b788 	.word	0x0001b788
   18878:	0001ac45 	.word	0x0001ac45
   1887c:	0001b2ea 	.word	0x0001b2ea
   18880:	200249b0 	.word	0x200249b0
   18884:	0001adf1 	.word	0x0001adf1
   18888:	0001ae17 	.word	0x0001ae17
   1888c:	0001ae2c 	.word	0x0001ae2c
   18890:	0001ae44 	.word	0x0001ae44
   18894:	0001ae5b 	.word	0x0001ae5b

00018898 <z_setup_new_thread>:
void z_setup_new_thread(struct k_thread *new_thread,
		       k_thread_stack_t *stack, size_t stack_size,
		       k_thread_entry_t entry,
		       void *p1, void *p2, void *p3,
		       int prio, u32_t options, const char *name)
{
   18898:	b530      	push	{r4, r5, lr}
   1889a:	b087      	sub	sp, #28
	stack_size = STACK_ROUND_DOWN(stack_size
			- sizeof(*new_thread->userspace_local_data));
#endif
#endif

	arch_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   1889c:	9d0e      	ldr	r5, [sp, #56]	; 0x38
{
   1889e:	4604      	mov	r4, r0
	arch_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   188a0:	9504      	str	r5, [sp, #16]
   188a2:	9d0d      	ldr	r5, [sp, #52]	; 0x34
   188a4:	9503      	str	r5, [sp, #12]
   188a6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
   188a8:	9502      	str	r5, [sp, #8]
   188aa:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
   188ac:	9501      	str	r5, [sp, #4]
   188ae:	9d0a      	ldr	r5, [sp, #40]	; 0x28
   188b0:	9500      	str	r5, [sp, #0]
   188b2:	f7f4 fbbd 	bl	d030 <arch_new_thread>
#ifdef CONFIG_SCHED_CPU_MASK
	new_thread->base.cpu_mask = -1;
#endif
#ifdef CONFIG_ARCH_HAS_CUSTOM_SWAP_TO_MAIN
	/* _current may be null if the dummy thread is not used */
	if (!_current) {
   188b6:	4b03      	ldr	r3, [pc, #12]	; (188c4 <z_setup_new_thread+0x2c>)
   188b8:	689b      	ldr	r3, [r3, #8]
   188ba:	b103      	cbz	r3, 188be <z_setup_new_thread+0x26>
	}
#endif
#ifdef CONFIG_SCHED_DEADLINE
	new_thread->base.prio_deadline = 0;
#endif
	new_thread->resource_pool = _current->resource_pool;
   188bc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
   188be:	6623      	str	r3, [r4, #96]	; 0x60
	sys_trace_thread_create(new_thread);
}
   188c0:	b007      	add	sp, #28
   188c2:	bd30      	pop	{r4, r5, pc}
   188c4:	2002496c 	.word	0x2002496c

000188c8 <z_spin_lock_valid>:
 * them in spinlock.h is a giant header ordering headache.
 */
#ifdef CONFIG_SPIN_VALIDATE
bool z_spin_lock_valid(struct k_spinlock *l)
{
	uintptr_t thread_cpu = l->thread_cpu;
   188c8:	6800      	ldr	r0, [r0, #0]

	if (thread_cpu) {
   188ca:	b138      	cbz	r0, 188dc <z_spin_lock_valid+0x14>
		if ((thread_cpu & 3) == _current_cpu->id) {
   188cc:	4b04      	ldr	r3, [pc, #16]	; (188e0 <z_spin_lock_valid+0x18>)
   188ce:	f000 0003 	and.w	r0, r0, #3
   188d2:	7d1b      	ldrb	r3, [r3, #20]
   188d4:	1ac0      	subs	r0, r0, r3
   188d6:	bf18      	it	ne
   188d8:	2001      	movne	r0, #1
   188da:	4770      	bx	lr
			return false;
		}
	}
	return true;
   188dc:	2001      	movs	r0, #1
}
   188de:	4770      	bx	lr
   188e0:	2002496c 	.word	0x2002496c

000188e4 <z_spin_unlock_valid>:

bool z_spin_unlock_valid(struct k_spinlock *l)
{
	if (l->thread_cpu != (_current_cpu->id | (uintptr_t)_current)) {
   188e4:	4a06      	ldr	r2, [pc, #24]	; (18900 <z_spin_unlock_valid+0x1c>)
   188e6:	7d11      	ldrb	r1, [r2, #20]
   188e8:	6893      	ldr	r3, [r2, #8]
   188ea:	6802      	ldr	r2, [r0, #0]
   188ec:	430b      	orrs	r3, r1
   188ee:	429a      	cmp	r2, r3
   188f0:	f04f 0300 	mov.w	r3, #0
		return false;
	}
	l->thread_cpu = 0;
   188f4:	bf06      	itte	eq
   188f6:	6003      	streq	r3, [r0, #0]
	return true;
   188f8:	2001      	moveq	r0, #1
		return false;
   188fa:	4618      	movne	r0, r3
}
   188fc:	4770      	bx	lr
   188fe:	bf00      	nop
   18900:	2002496c 	.word	0x2002496c

00018904 <z_spin_lock_set_owner>:

void z_spin_lock_set_owner(struct k_spinlock *l)
{
	l->thread_cpu = _current_cpu->id | (uintptr_t)_current;
   18904:	4a02      	ldr	r2, [pc, #8]	; (18910 <z_spin_lock_set_owner+0xc>)
   18906:	7d11      	ldrb	r1, [r2, #20]
   18908:	6893      	ldr	r3, [r2, #8]
   1890a:	430b      	orrs	r3, r1
   1890c:	6003      	str	r3, [r0, #0]
}
   1890e:	4770      	bx	lr
   18910:	2002496c 	.word	0x2002496c

00018914 <z_impl_k_thread_start>:
{
   18914:	b538      	push	{r3, r4, r5, lr}
   18916:	4604      	mov	r4, r0
	__asm__ volatile(
   18918:	f04f 0320 	mov.w	r3, #32
   1891c:	f3ef 8511 	mrs	r5, BASEPRI
   18920:	f383 8811 	msr	BASEPRI, r3
   18924:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   18928:	481f      	ldr	r0, [pc, #124]	; (189a8 <z_impl_k_thread_start+0x94>)
   1892a:	f7ff ffcd 	bl	188c8 <z_spin_lock_valid>
   1892e:	b968      	cbnz	r0, 1894c <z_impl_k_thread_start+0x38>
   18930:	234a      	movs	r3, #74	; 0x4a
   18932:	4a1e      	ldr	r2, [pc, #120]	; (189ac <z_impl_k_thread_start+0x98>)
   18934:	491e      	ldr	r1, [pc, #120]	; (189b0 <z_impl_k_thread_start+0x9c>)
   18936:	481f      	ldr	r0, [pc, #124]	; (189b4 <z_impl_k_thread_start+0xa0>)
   18938:	f000 fe37 	bl	195aa <printk>
   1893c:	491a      	ldr	r1, [pc, #104]	; (189a8 <z_impl_k_thread_start+0x94>)
   1893e:	481e      	ldr	r0, [pc, #120]	; (189b8 <z_impl_k_thread_start+0xa4>)
   18940:	f000 fe33 	bl	195aa <printk>
   18944:	214a      	movs	r1, #74	; 0x4a
   18946:	4819      	ldr	r0, [pc, #100]	; (189ac <z_impl_k_thread_start+0x98>)
   18948:	f000 fe46 	bl	195d8 <assert_post_action>
	z_spin_lock_set_owner(l);
   1894c:	4816      	ldr	r0, [pc, #88]	; (189a8 <z_impl_k_thread_start+0x94>)
   1894e:	f7ff ffd9 	bl	18904 <z_spin_lock_set_owner>
	if (z_has_thread_started(thread)) {
   18952:	7b63      	ldrb	r3, [r4, #13]
   18954:	075a      	lsls	r2, r3, #29
   18956:	d416      	bmi.n	18986 <z_impl_k_thread_start+0x72>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   18958:	4813      	ldr	r0, [pc, #76]	; (189a8 <z_impl_k_thread_start+0x94>)
   1895a:	f7ff ffc3 	bl	188e4 <z_spin_unlock_valid>
   1895e:	b968      	cbnz	r0, 1897c <z_impl_k_thread_start+0x68>
   18960:	235d      	movs	r3, #93	; 0x5d
   18962:	4a12      	ldr	r2, [pc, #72]	; (189ac <z_impl_k_thread_start+0x98>)
   18964:	4915      	ldr	r1, [pc, #84]	; (189bc <z_impl_k_thread_start+0xa8>)
   18966:	4813      	ldr	r0, [pc, #76]	; (189b4 <z_impl_k_thread_start+0xa0>)
   18968:	f000 fe1f 	bl	195aa <printk>
   1896c:	490e      	ldr	r1, [pc, #56]	; (189a8 <z_impl_k_thread_start+0x94>)
   1896e:	4814      	ldr	r0, [pc, #80]	; (189c0 <z_impl_k_thread_start+0xac>)
   18970:	f000 fe1b 	bl	195aa <printk>
   18974:	215d      	movs	r1, #93	; 0x5d
   18976:	480d      	ldr	r0, [pc, #52]	; (189ac <z_impl_k_thread_start+0x98>)
   18978:	f000 fe2e 	bl	195d8 <assert_post_action>
	__asm__ volatile(
   1897c:	f385 8811 	msr	BASEPRI, r5
   18980:	f3bf 8f6f 	isb	sy
}
   18984:	bd38      	pop	{r3, r4, r5, pc}
	thread->base.thread_state &= ~_THREAD_PRESTART;
   18986:	f023 0204 	bic.w	r2, r3, #4
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
   1898a:	f013 0f1b 	tst.w	r3, #27
	thread->base.thread_state &= ~_THREAD_PRESTART;
   1898e:	7362      	strb	r2, [r4, #13]
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
   18990:	d104      	bne.n	1899c <z_impl_k_thread_start+0x88>
	if (z_is_thread_ready(thread)) {
   18992:	69a3      	ldr	r3, [r4, #24]
   18994:	b913      	cbnz	r3, 1899c <z_impl_k_thread_start+0x88>
		z_add_thread_to_ready_q(thread);
   18996:	4620      	mov	r0, r4
   18998:	f7ff f9e4 	bl	17d64 <z_add_thread_to_ready_q>
	z_reschedule(&lock, key);
   1899c:	4629      	mov	r1, r5
}
   1899e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule(&lock, key);
   189a2:	4801      	ldr	r0, [pc, #4]	; (189a8 <z_impl_k_thread_start+0x94>)
   189a4:	f7fe bff4 	b.w	17990 <z_reschedule>
   189a8:	200249b4 	.word	0x200249b4
   189ac:	0001adf1 	.word	0x0001adf1
   189b0:	0001ae17 	.word	0x0001ae17
   189b4:	0001ac45 	.word	0x0001ac45
   189b8:	0001ae2c 	.word	0x0001ae2c
   189bc:	0001ae44 	.word	0x0001ae44
   189c0:	0001ae5b 	.word	0x0001ae5b

000189c4 <z_init_static_threads>:
{
   189c4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	_FOREACH_STATIC_THREAD(thread_data) {
   189c8:	4f3c      	ldr	r7, [pc, #240]	; (18abc <z_init_static_threads+0xf8>)
   189ca:	4d3d      	ldr	r5, [pc, #244]	; (18ac0 <z_init_static_threads+0xfc>)
   189cc:	463e      	mov	r6, r7
   189ce:	f8df 8100 	ldr.w	r8, [pc, #256]	; 18ad0 <z_init_static_threads+0x10c>
{
   189d2:	b087      	sub	sp, #28
	_FOREACH_STATIC_THREAD(thread_data) {
   189d4:	42bd      	cmp	r5, r7
   189d6:	d90e      	bls.n	189f6 <z_init_static_threads+0x32>
   189d8:	493a      	ldr	r1, [pc, #232]	; (18ac4 <z_init_static_threads+0x100>)
   189da:	f240 23e7 	movw	r3, #743	; 0x2e7
   189de:	4642      	mov	r2, r8
   189e0:	4839      	ldr	r0, [pc, #228]	; (18ac8 <z_init_static_threads+0x104>)
   189e2:	f000 fde2 	bl	195aa <printk>
   189e6:	4839      	ldr	r0, [pc, #228]	; (18acc <z_init_static_threads+0x108>)
   189e8:	f000 fddf 	bl	195aa <printk>
   189ec:	f240 21e7 	movw	r1, #743	; 0x2e7
   189f0:	4640      	mov	r0, r8
   189f2:	f000 fdf1 	bl	195d8 <assert_post_action>
   189f6:	42b5      	cmp	r5, r6
   189f8:	f105 0430 	add.w	r4, r5, #48	; 0x30
   189fc:	d31f      	bcc.n	18a3e <z_init_static_threads+0x7a>
	k_sched_lock();
   189fe:	f7ff f803 	bl	17a08 <k_sched_lock>
	_FOREACH_STATIC_THREAD(thread_data) {
   18a02:	4c2f      	ldr	r4, [pc, #188]	; (18ac0 <z_init_static_threads+0xfc>)
   18a04:	4d32      	ldr	r5, [pc, #200]	; (18ad0 <z_init_static_threads+0x10c>)
   18a06:	f8df 80bc 	ldr.w	r8, [pc, #188]	; 18ac4 <z_init_static_threads+0x100>
   18a0a:	f8df 90bc 	ldr.w	r9, [pc, #188]	; 18ac8 <z_init_static_threads+0x104>
   18a0e:	42b4      	cmp	r4, r6
   18a10:	d90e      	bls.n	18a30 <z_init_static_threads+0x6c>
   18a12:	4641      	mov	r1, r8
   18a14:	f240 3306 	movw	r3, #774	; 0x306
   18a18:	462a      	mov	r2, r5
   18a1a:	4648      	mov	r0, r9
   18a1c:	f000 fdc5 	bl	195aa <printk>
   18a20:	482a      	ldr	r0, [pc, #168]	; (18acc <z_init_static_threads+0x108>)
   18a22:	f000 fdc2 	bl	195aa <printk>
   18a26:	f240 3106 	movw	r1, #774	; 0x306
   18a2a:	4628      	mov	r0, r5
   18a2c:	f000 fdd4 	bl	195d8 <assert_post_action>
   18a30:	42b4      	cmp	r4, r6
   18a32:	d321      	bcc.n	18a78 <z_init_static_threads+0xb4>
}
   18a34:	b007      	add	sp, #28
   18a36:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
	k_sched_unlock();
   18a3a:	f7ff b917 	b.w	17c6c <k_sched_unlock>
		z_setup_new_thread(
   18a3e:	f854 3c04 	ldr.w	r3, [r4, #-4]
   18a42:	9305      	str	r3, [sp, #20]
   18a44:	f854 3c10 	ldr.w	r3, [r4, #-16]
   18a48:	9304      	str	r3, [sp, #16]
   18a4a:	f854 3c14 	ldr.w	r3, [r4, #-20]
   18a4e:	9303      	str	r3, [sp, #12]
   18a50:	f854 3c18 	ldr.w	r3, [r4, #-24]
   18a54:	9302      	str	r3, [sp, #8]
   18a56:	f854 3c1c 	ldr.w	r3, [r4, #-28]
   18a5a:	9301      	str	r3, [sp, #4]
   18a5c:	f854 3c20 	ldr.w	r3, [r4, #-32]
   18a60:	9300      	str	r3, [sp, #0]
   18a62:	e954 230a 	ldrd	r2, r3, [r4, #-40]	; 0x28
   18a66:	e954 010c 	ldrd	r0, r1, [r4, #-48]	; 0x30
   18a6a:	f7ff ff15 	bl	18898 <z_setup_new_thread>
		thread_data->init_thread->init_data = thread_data;
   18a6e:	f854 3c30 	ldr.w	r3, [r4, #-48]
   18a72:	64dd      	str	r5, [r3, #76]	; 0x4c
   18a74:	4625      	mov	r5, r4
   18a76:	e7ad      	b.n	189d4 <z_init_static_threads+0x10>
		if (thread_data->init_delay != K_FOREVER) {
   18a78:	f8d4 c024 	ldr.w	ip, [r4, #36]	; 0x24
   18a7c:	f1bc 3fff 	cmp.w	ip, #4294967295
   18a80:	d006      	beq.n	18a90 <z_init_static_threads+0xcc>
			schedule_new_thread(thread_data->init_thread,
   18a82:	6827      	ldr	r7, [r4, #0]
	if (delay == 0) {
   18a84:	f1bc 0f00 	cmp.w	ip, #0
   18a88:	d104      	bne.n	18a94 <z_init_static_threads+0xd0>
	z_impl_k_thread_start(thread);
   18a8a:	4638      	mov	r0, r7
   18a8c:	f7ff ff42 	bl	18914 <z_impl_k_thread_start>
	_FOREACH_STATIC_THREAD(thread_data) {
   18a90:	3430      	adds	r4, #48	; 0x30
   18a92:	e7bc      	b.n	18a0e <z_init_static_threads+0x4a>
   18a94:	f44f 4e00 	mov.w	lr, #32768	; 0x8000
   18a98:	f240 30e7 	movw	r0, #999	; 0x3e7
   18a9c:	2100      	movs	r1, #0
   18a9e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   18aa2:	2300      	movs	r3, #0
   18aa4:	fbee 010c 	umlal	r0, r1, lr, ip
   18aa8:	f7f3 fbc8 	bl	c23c <__aeabi_uldivmod>
	z_add_timeout(&th->base.timeout, z_thread_timeout, ticks);
   18aac:	4909      	ldr	r1, [pc, #36]	; (18ad4 <z_init_static_threads+0x110>)
   18aae:	1c42      	adds	r2, r0, #1
   18ab0:	f107 0018 	add.w	r0, r7, #24
   18ab4:	f000 f84a 	bl	18b4c <z_add_timeout>
   18ab8:	e7ea      	b.n	18a90 <z_init_static_threads+0xcc>
   18aba:	bf00      	nop
   18abc:	200260f4 	.word	0x200260f4
   18ac0:	200260f4 	.word	0x200260f4
   18ac4:	0001b81c 	.word	0x0001b81c
   18ac8:	0001ac45 	.word	0x0001ac45
   18acc:	0001b609 	.word	0x0001b609
   18ad0:	0001b7d4 	.word	0x0001b7d4
   18ad4:	00017e65 	.word	0x00017e65

00018ad8 <elapsed>:
	sys_dlist_remove(&t->node);
}

static s32_t elapsed(void)
{
	return announce_remaining == 0 ? z_clock_elapsed() : 0;
   18ad8:	4b03      	ldr	r3, [pc, #12]	; (18ae8 <elapsed+0x10>)
   18ada:	681b      	ldr	r3, [r3, #0]
   18adc:	b90b      	cbnz	r3, 18ae2 <elapsed+0xa>
   18ade:	f7f4 b93d 	b.w	cd5c <z_clock_elapsed>
}
   18ae2:	2000      	movs	r0, #0
   18ae4:	4770      	bx	lr
   18ae6:	bf00      	nop
   18ae8:	200249b8 	.word	0x200249b8

00018aec <remove_timeout>:
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   18aec:	6803      	ldr	r3, [r0, #0]
   18aee:	b140      	cbz	r0, 18b02 <remove_timeout+0x16>
   18af0:	4a07      	ldr	r2, [pc, #28]	; (18b10 <remove_timeout+0x24>)
	return (node == list->tail) ? NULL : node->next;
   18af2:	6852      	ldr	r2, [r2, #4]
   18af4:	4290      	cmp	r0, r2
   18af6:	d004      	beq.n	18b02 <remove_timeout+0x16>
	if (next(t) != NULL) {
   18af8:	b11b      	cbz	r3, 18b02 <remove_timeout+0x16>
		next(t)->dticks += t->dticks;
   18afa:	689a      	ldr	r2, [r3, #8]
   18afc:	6881      	ldr	r1, [r0, #8]
   18afe:	440a      	add	r2, r1
   18b00:	609a      	str	r2, [r3, #8]
	node->prev->next = node->next;
   18b02:	6842      	ldr	r2, [r0, #4]
   18b04:	6013      	str	r3, [r2, #0]
	node->next->prev = node->prev;
   18b06:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   18b08:	2300      	movs	r3, #0
	node->prev = NULL;
   18b0a:	e9c0 3300 	strd	r3, r3, [r0]
}
   18b0e:	4770      	bx	lr
   18b10:	20026068 	.word	0x20026068

00018b14 <next_timeout>:
	return list->head == list;
   18b14:	4b0b      	ldr	r3, [pc, #44]	; (18b44 <next_timeout+0x30>)

static s32_t next_timeout(void)
{
   18b16:	b510      	push	{r4, lr}
   18b18:	681c      	ldr	r4, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   18b1a:	429c      	cmp	r4, r3
   18b1c:	bf08      	it	eq
   18b1e:	2400      	moveq	r4, #0
	struct _timeout *to = first();
	s32_t ticks_elapsed = elapsed();
   18b20:	f7ff ffda 	bl	18ad8 <elapsed>
	s32_t ret = to == NULL ? MAX_WAIT : MAX(0, to->dticks - ticks_elapsed);
   18b24:	b154      	cbz	r4, 18b3c <next_timeout+0x28>
   18b26:	68a3      	ldr	r3, [r4, #8]
   18b28:	1a18      	subs	r0, r3, r0
   18b2a:	ea20 70e0 	bic.w	r0, r0, r0, asr #31

#ifdef CONFIG_TIMESLICING
	if (_current_cpu->slice_ticks && _current_cpu->slice_ticks < ret) {
   18b2e:	4b06      	ldr	r3, [pc, #24]	; (18b48 <next_timeout+0x34>)
   18b30:	691b      	ldr	r3, [r3, #16]
   18b32:	b113      	cbz	r3, 18b3a <next_timeout+0x26>
   18b34:	4298      	cmp	r0, r3
   18b36:	bfa8      	it	ge
   18b38:	4618      	movge	r0, r3
		ret = _current_cpu->slice_ticks;
	}
#endif
	return ret;
}
   18b3a:	bd10      	pop	{r4, pc}
	s32_t ret = to == NULL ? MAX_WAIT : MAX(0, to->dticks - ticks_elapsed);
   18b3c:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
   18b40:	e7f5      	b.n	18b2e <next_timeout+0x1a>
   18b42:	bf00      	nop
   18b44:	20026068 	.word	0x20026068
   18b48:	2002496c 	.word	0x2002496c

00018b4c <z_add_timeout>:

void z_add_timeout(struct _timeout *to, _timeout_func_t fn, s32_t ticks)
{
	__ASSERT(!sys_dnode_is_linked(&to->node), "");
   18b4c:	6803      	ldr	r3, [r0, #0]
{
   18b4e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   18b52:	4604      	mov	r4, r0
   18b54:	460e      	mov	r6, r1
   18b56:	4615      	mov	r5, r2
	__ASSERT(!sys_dnode_is_linked(&to->node), "");
   18b58:	b163      	cbz	r3, 18b74 <z_add_timeout+0x28>
   18b5a:	4943      	ldr	r1, [pc, #268]	; (18c68 <z_add_timeout+0x11c>)
   18b5c:	2358      	movs	r3, #88	; 0x58
   18b5e:	4a43      	ldr	r2, [pc, #268]	; (18c6c <z_add_timeout+0x120>)
   18b60:	4843      	ldr	r0, [pc, #268]	; (18c70 <z_add_timeout+0x124>)
   18b62:	f000 fd22 	bl	195aa <printk>
   18b66:	4843      	ldr	r0, [pc, #268]	; (18c74 <z_add_timeout+0x128>)
   18b68:	f000 fd1f 	bl	195aa <printk>
   18b6c:	2158      	movs	r1, #88	; 0x58
   18b6e:	483f      	ldr	r0, [pc, #252]	; (18c6c <z_add_timeout+0x120>)
   18b70:	f000 fd32 	bl	195d8 <assert_post_action>
	to->fn = fn;
	ticks = MAX(1, ticks);
   18b74:	2d01      	cmp	r5, #1
   18b76:	bfb8      	it	lt
   18b78:	2501      	movlt	r5, #1
	to->fn = fn;
   18b7a:	60e6      	str	r6, [r4, #12]
	__asm__ volatile(
   18b7c:	f04f 0320 	mov.w	r3, #32
   18b80:	f3ef 8811 	mrs	r8, BASEPRI
   18b84:	f383 8811 	msr	BASEPRI, r3
   18b88:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   18b8c:	483a      	ldr	r0, [pc, #232]	; (18c78 <z_add_timeout+0x12c>)
   18b8e:	f7ff fe9b 	bl	188c8 <z_spin_lock_valid>
   18b92:	b968      	cbnz	r0, 18bb0 <z_add_timeout+0x64>
   18b94:	234a      	movs	r3, #74	; 0x4a
   18b96:	4a39      	ldr	r2, [pc, #228]	; (18c7c <z_add_timeout+0x130>)
   18b98:	4939      	ldr	r1, [pc, #228]	; (18c80 <z_add_timeout+0x134>)
   18b9a:	4835      	ldr	r0, [pc, #212]	; (18c70 <z_add_timeout+0x124>)
   18b9c:	f000 fd05 	bl	195aa <printk>
   18ba0:	4935      	ldr	r1, [pc, #212]	; (18c78 <z_add_timeout+0x12c>)
   18ba2:	4838      	ldr	r0, [pc, #224]	; (18c84 <z_add_timeout+0x138>)
   18ba4:	f000 fd01 	bl	195aa <printk>
   18ba8:	214a      	movs	r1, #74	; 0x4a
   18baa:	4834      	ldr	r0, [pc, #208]	; (18c7c <z_add_timeout+0x130>)
   18bac:	f000 fd14 	bl	195d8 <assert_post_action>
	z_spin_lock_set_owner(l);
   18bb0:	4831      	ldr	r0, [pc, #196]	; (18c78 <z_add_timeout+0x12c>)
   18bb2:	f7ff fea7 	bl	18904 <z_spin_lock_set_owner>

	LOCKED(&timeout_lock) {
		struct _timeout *t;

		to->dticks = ticks + elapsed();
   18bb6:	f7ff ff8f 	bl	18ad8 <elapsed>
   18bba:	4428      	add	r0, r5
	return list->head == list;
   18bbc:	4d32      	ldr	r5, [pc, #200]	; (18c88 <z_add_timeout+0x13c>)
   18bbe:	60a0      	str	r0, [r4, #8]
   18bc0:	682e      	ldr	r6, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   18bc2:	42ae      	cmp	r6, r5
   18bc4:	d005      	beq.n	18bd2 <z_add_timeout+0x86>
		for (t = first(); t != NULL; t = next(t)) {
			__ASSERT(t->dticks >= 0, "");
   18bc6:	4f29      	ldr	r7, [pc, #164]	; (18c6c <z_add_timeout+0x120>)
   18bc8:	f8df 90c8 	ldr.w	r9, [pc, #200]	; 18c94 <z_add_timeout+0x148>
   18bcc:	f8df a0a0 	ldr.w	sl, [pc, #160]	; 18c70 <z_add_timeout+0x124>
		for (t = first(); t != NULL; t = next(t)) {
   18bd0:	b936      	cbnz	r6, 18be0 <z_add_timeout+0x94>
	node->prev = list->tail;
   18bd2:	686b      	ldr	r3, [r5, #4]
	node->next = list;
   18bd4:	6025      	str	r5, [r4, #0]
	node->prev = list->tail;
   18bd6:	6063      	str	r3, [r4, #4]
	list->tail->next = node;
   18bd8:	686b      	ldr	r3, [r5, #4]
   18bda:	601c      	str	r4, [r3, #0]
	list->tail = node;
   18bdc:	606c      	str	r4, [r5, #4]
   18bde:	e01a      	b.n	18c16 <z_add_timeout+0xca>
			__ASSERT(t->dticks >= 0, "");
   18be0:	68b3      	ldr	r3, [r6, #8]
   18be2:	2b00      	cmp	r3, #0
   18be4:	da0c      	bge.n	18c00 <z_add_timeout+0xb4>
   18be6:	4649      	mov	r1, r9
   18be8:	2361      	movs	r3, #97	; 0x61
   18bea:	463a      	mov	r2, r7
   18bec:	4650      	mov	r0, sl
   18bee:	f000 fcdc 	bl	195aa <printk>
   18bf2:	4820      	ldr	r0, [pc, #128]	; (18c74 <z_add_timeout+0x128>)
   18bf4:	f000 fcd9 	bl	195aa <printk>
   18bf8:	2161      	movs	r1, #97	; 0x61
   18bfa:	4638      	mov	r0, r7
   18bfc:	f000 fcec 	bl	195d8 <assert_post_action>

			if (t->dticks > to->dticks) {
   18c00:	68b2      	ldr	r2, [r6, #8]
   18c02:	68a3      	ldr	r3, [r4, #8]
   18c04:	429a      	cmp	r2, r3
   18c06:	dd28      	ble.n	18c5a <z_add_timeout+0x10e>
				t->dticks -= to->dticks;
   18c08:	1ad3      	subs	r3, r2, r3
   18c0a:	60b3      	str	r3, [r6, #8]
	node->prev = successor->prev;
   18c0c:	6873      	ldr	r3, [r6, #4]
	node->next = successor;
   18c0e:	e9c4 6300 	strd	r6, r3, [r4]
	successor->prev->next = node;
   18c12:	601c      	str	r4, [r3, #0]
	successor->prev = node;
   18c14:	6074      	str	r4, [r6, #4]
	return list->head == list;
   18c16:	682b      	ldr	r3, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   18c18:	42ab      	cmp	r3, r5
   18c1a:	d006      	beq.n	18c2a <z_add_timeout+0xde>

		if (t == NULL) {
			sys_dlist_append(&timeout_list, &to->node);
		}

		if (to == first()) {
   18c1c:	429c      	cmp	r4, r3
   18c1e:	d104      	bne.n	18c2a <z_add_timeout+0xde>
			z_clock_set_timeout(next_timeout(), false);
   18c20:	f7ff ff78 	bl	18b14 <next_timeout>
   18c24:	2100      	movs	r1, #0
   18c26:	f7f4 f80b 	bl	cc40 <z_clock_set_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   18c2a:	4813      	ldr	r0, [pc, #76]	; (18c78 <z_add_timeout+0x12c>)
   18c2c:	f7ff fe5a 	bl	188e4 <z_spin_unlock_valid>
   18c30:	b968      	cbnz	r0, 18c4e <z_add_timeout+0x102>
   18c32:	235d      	movs	r3, #93	; 0x5d
   18c34:	4a11      	ldr	r2, [pc, #68]	; (18c7c <z_add_timeout+0x130>)
   18c36:	4915      	ldr	r1, [pc, #84]	; (18c8c <z_add_timeout+0x140>)
   18c38:	480d      	ldr	r0, [pc, #52]	; (18c70 <z_add_timeout+0x124>)
   18c3a:	f000 fcb6 	bl	195aa <printk>
   18c3e:	490e      	ldr	r1, [pc, #56]	; (18c78 <z_add_timeout+0x12c>)
   18c40:	4813      	ldr	r0, [pc, #76]	; (18c90 <z_add_timeout+0x144>)
   18c42:	f000 fcb2 	bl	195aa <printk>
   18c46:	215d      	movs	r1, #93	; 0x5d
   18c48:	480c      	ldr	r0, [pc, #48]	; (18c7c <z_add_timeout+0x130>)
   18c4a:	f000 fcc5 	bl	195d8 <assert_post_action>
	__asm__ volatile(
   18c4e:	f388 8811 	msr	BASEPRI, r8
   18c52:	f3bf 8f6f 	isb	sy
		}
	}
}
   18c56:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			to->dticks -= t->dticks;
   18c5a:	1a9b      	subs	r3, r3, r2
   18c5c:	60a3      	str	r3, [r4, #8]
	return (node == list->tail) ? NULL : node->next;
   18c5e:	686b      	ldr	r3, [r5, #4]
   18c60:	429e      	cmp	r6, r3
   18c62:	d0b6      	beq.n	18bd2 <z_add_timeout+0x86>
   18c64:	6836      	ldr	r6, [r6, #0]
   18c66:	e7b3      	b.n	18bd0 <z_add_timeout+0x84>
   18c68:	0001b86d 	.word	0x0001b86d
   18c6c:	0001b849 	.word	0x0001b849
   18c70:	0001ac45 	.word	0x0001ac45
   18c74:	0001b2ea 	.word	0x0001b2ea
   18c78:	200249bc 	.word	0x200249bc
   18c7c:	0001adf1 	.word	0x0001adf1
   18c80:	0001ae17 	.word	0x0001ae17
   18c84:	0001ae2c 	.word	0x0001ae2c
   18c88:	20026068 	.word	0x20026068
   18c8c:	0001ae44 	.word	0x0001ae44
   18c90:	0001ae5b 	.word	0x0001ae5b
   18c94:	0001b88d 	.word	0x0001b88d

00018c98 <z_abort_timeout>:

int z_abort_timeout(struct _timeout *to)
{
   18c98:	b538      	push	{r3, r4, r5, lr}
   18c9a:	4604      	mov	r4, r0
	__asm__ volatile(
   18c9c:	f04f 0320 	mov.w	r3, #32
   18ca0:	f3ef 8511 	mrs	r5, BASEPRI
   18ca4:	f383 8811 	msr	BASEPRI, r3
   18ca8:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   18cac:	481a      	ldr	r0, [pc, #104]	; (18d18 <z_abort_timeout+0x80>)
   18cae:	f7ff fe0b 	bl	188c8 <z_spin_lock_valid>
   18cb2:	b968      	cbnz	r0, 18cd0 <z_abort_timeout+0x38>
   18cb4:	234a      	movs	r3, #74	; 0x4a
   18cb6:	4a19      	ldr	r2, [pc, #100]	; (18d1c <z_abort_timeout+0x84>)
   18cb8:	4919      	ldr	r1, [pc, #100]	; (18d20 <z_abort_timeout+0x88>)
   18cba:	481a      	ldr	r0, [pc, #104]	; (18d24 <z_abort_timeout+0x8c>)
   18cbc:	f000 fc75 	bl	195aa <printk>
   18cc0:	4915      	ldr	r1, [pc, #84]	; (18d18 <z_abort_timeout+0x80>)
   18cc2:	4819      	ldr	r0, [pc, #100]	; (18d28 <z_abort_timeout+0x90>)
   18cc4:	f000 fc71 	bl	195aa <printk>
   18cc8:	214a      	movs	r1, #74	; 0x4a
   18cca:	4814      	ldr	r0, [pc, #80]	; (18d1c <z_abort_timeout+0x84>)
   18ccc:	f000 fc84 	bl	195d8 <assert_post_action>
	z_spin_lock_set_owner(l);
   18cd0:	4811      	ldr	r0, [pc, #68]	; (18d18 <z_abort_timeout+0x80>)
   18cd2:	f7ff fe17 	bl	18904 <z_spin_lock_set_owner>
	int ret = -EINVAL;

	LOCKED(&timeout_lock) {
		if (sys_dnode_is_linked(&to->node)) {
   18cd6:	6823      	ldr	r3, [r4, #0]
   18cd8:	b1db      	cbz	r3, 18d12 <z_abort_timeout+0x7a>
			remove_timeout(to);
   18cda:	4620      	mov	r0, r4
   18cdc:	f7ff ff06 	bl	18aec <remove_timeout>
			ret = 0;
   18ce0:	2400      	movs	r4, #0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   18ce2:	480d      	ldr	r0, [pc, #52]	; (18d18 <z_abort_timeout+0x80>)
   18ce4:	f7ff fdfe 	bl	188e4 <z_spin_unlock_valid>
   18ce8:	b968      	cbnz	r0, 18d06 <z_abort_timeout+0x6e>
   18cea:	235d      	movs	r3, #93	; 0x5d
   18cec:	4a0b      	ldr	r2, [pc, #44]	; (18d1c <z_abort_timeout+0x84>)
   18cee:	490f      	ldr	r1, [pc, #60]	; (18d2c <z_abort_timeout+0x94>)
   18cf0:	480c      	ldr	r0, [pc, #48]	; (18d24 <z_abort_timeout+0x8c>)
   18cf2:	f000 fc5a 	bl	195aa <printk>
   18cf6:	4908      	ldr	r1, [pc, #32]	; (18d18 <z_abort_timeout+0x80>)
   18cf8:	480d      	ldr	r0, [pc, #52]	; (18d30 <z_abort_timeout+0x98>)
   18cfa:	f000 fc56 	bl	195aa <printk>
   18cfe:	215d      	movs	r1, #93	; 0x5d
   18d00:	4806      	ldr	r0, [pc, #24]	; (18d1c <z_abort_timeout+0x84>)
   18d02:	f000 fc69 	bl	195d8 <assert_post_action>
	__asm__ volatile(
   18d06:	f385 8811 	msr	BASEPRI, r5
   18d0a:	f3bf 8f6f 	isb	sy
		}
	}

	return ret;
}
   18d0e:	4620      	mov	r0, r4
   18d10:	bd38      	pop	{r3, r4, r5, pc}
	int ret = -EINVAL;
   18d12:	f06f 0415 	mvn.w	r4, #21
   18d16:	e7e4      	b.n	18ce2 <z_abort_timeout+0x4a>
   18d18:	200249bc 	.word	0x200249bc
   18d1c:	0001adf1 	.word	0x0001adf1
   18d20:	0001ae17 	.word	0x0001ae17
   18d24:	0001ac45 	.word	0x0001ac45
   18d28:	0001ae2c 	.word	0x0001ae2c
   18d2c:	0001ae44 	.word	0x0001ae44
   18d30:	0001ae5b 	.word	0x0001ae5b

00018d34 <z_get_next_timeout_expiry>:

	return ticks - elapsed();
}

s32_t z_get_next_timeout_expiry(void)
{
   18d34:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
   18d36:	f04f 0320 	mov.w	r3, #32
   18d3a:	f3ef 8511 	mrs	r5, BASEPRI
   18d3e:	f383 8811 	msr	BASEPRI, r3
   18d42:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   18d46:	4818      	ldr	r0, [pc, #96]	; (18da8 <z_get_next_timeout_expiry+0x74>)
   18d48:	f7ff fdbe 	bl	188c8 <z_spin_lock_valid>
   18d4c:	b968      	cbnz	r0, 18d6a <z_get_next_timeout_expiry+0x36>
   18d4e:	234a      	movs	r3, #74	; 0x4a
   18d50:	4a16      	ldr	r2, [pc, #88]	; (18dac <z_get_next_timeout_expiry+0x78>)
   18d52:	4917      	ldr	r1, [pc, #92]	; (18db0 <z_get_next_timeout_expiry+0x7c>)
   18d54:	4817      	ldr	r0, [pc, #92]	; (18db4 <z_get_next_timeout_expiry+0x80>)
   18d56:	f000 fc28 	bl	195aa <printk>
   18d5a:	4913      	ldr	r1, [pc, #76]	; (18da8 <z_get_next_timeout_expiry+0x74>)
   18d5c:	4816      	ldr	r0, [pc, #88]	; (18db8 <z_get_next_timeout_expiry+0x84>)
   18d5e:	f000 fc24 	bl	195aa <printk>
   18d62:	214a      	movs	r1, #74	; 0x4a
   18d64:	4811      	ldr	r0, [pc, #68]	; (18dac <z_get_next_timeout_expiry+0x78>)
   18d66:	f000 fc37 	bl	195d8 <assert_post_action>
	z_spin_lock_set_owner(l);
   18d6a:	480f      	ldr	r0, [pc, #60]	; (18da8 <z_get_next_timeout_expiry+0x74>)
   18d6c:	f7ff fdca 	bl	18904 <z_spin_lock_set_owner>
	s32_t ret = K_FOREVER;

	LOCKED(&timeout_lock) {
		ret = next_timeout();
   18d70:	f7ff fed0 	bl	18b14 <next_timeout>
   18d74:	4604      	mov	r4, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   18d76:	480c      	ldr	r0, [pc, #48]	; (18da8 <z_get_next_timeout_expiry+0x74>)
   18d78:	f7ff fdb4 	bl	188e4 <z_spin_unlock_valid>
   18d7c:	b968      	cbnz	r0, 18d9a <z_get_next_timeout_expiry+0x66>
   18d7e:	235d      	movs	r3, #93	; 0x5d
   18d80:	4a0a      	ldr	r2, [pc, #40]	; (18dac <z_get_next_timeout_expiry+0x78>)
   18d82:	490e      	ldr	r1, [pc, #56]	; (18dbc <z_get_next_timeout_expiry+0x88>)
   18d84:	480b      	ldr	r0, [pc, #44]	; (18db4 <z_get_next_timeout_expiry+0x80>)
   18d86:	f000 fc10 	bl	195aa <printk>
   18d8a:	4907      	ldr	r1, [pc, #28]	; (18da8 <z_get_next_timeout_expiry+0x74>)
   18d8c:	480c      	ldr	r0, [pc, #48]	; (18dc0 <z_get_next_timeout_expiry+0x8c>)
   18d8e:	f000 fc0c 	bl	195aa <printk>
   18d92:	215d      	movs	r1, #93	; 0x5d
   18d94:	4805      	ldr	r0, [pc, #20]	; (18dac <z_get_next_timeout_expiry+0x78>)
   18d96:	f000 fc1f 	bl	195d8 <assert_post_action>
	__asm__ volatile(
   18d9a:	f385 8811 	msr	BASEPRI, r5
   18d9e:	f3bf 8f6f 	isb	sy
	}
	return ret;
}
   18da2:	4620      	mov	r0, r4
   18da4:	bd38      	pop	{r3, r4, r5, pc}
   18da6:	bf00      	nop
   18da8:	200249bc 	.word	0x200249bc
   18dac:	0001adf1 	.word	0x0001adf1
   18db0:	0001ae17 	.word	0x0001ae17
   18db4:	0001ac45 	.word	0x0001ac45
   18db8:	0001ae2c 	.word	0x0001ae2c
   18dbc:	0001ae44 	.word	0x0001ae44
   18dc0:	0001ae5b 	.word	0x0001ae5b

00018dc4 <z_set_timeout_expiry>:

void z_set_timeout_expiry(s32_t ticks, bool idle)
{
   18dc4:	b570      	push	{r4, r5, r6, lr}
   18dc6:	4604      	mov	r4, r0
   18dc8:	460e      	mov	r6, r1
	__asm__ volatile(
   18dca:	f04f 0320 	mov.w	r3, #32
   18dce:	f3ef 8511 	mrs	r5, BASEPRI
   18dd2:	f383 8811 	msr	BASEPRI, r3
   18dd6:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   18dda:	481b      	ldr	r0, [pc, #108]	; (18e48 <z_set_timeout_expiry+0x84>)
   18ddc:	f7ff fd74 	bl	188c8 <z_spin_lock_valid>
   18de0:	b968      	cbnz	r0, 18dfe <z_set_timeout_expiry+0x3a>
   18de2:	234a      	movs	r3, #74	; 0x4a
   18de4:	4a19      	ldr	r2, [pc, #100]	; (18e4c <z_set_timeout_expiry+0x88>)
   18de6:	491a      	ldr	r1, [pc, #104]	; (18e50 <z_set_timeout_expiry+0x8c>)
   18de8:	481a      	ldr	r0, [pc, #104]	; (18e54 <z_set_timeout_expiry+0x90>)
   18dea:	f000 fbde 	bl	195aa <printk>
   18dee:	4916      	ldr	r1, [pc, #88]	; (18e48 <z_set_timeout_expiry+0x84>)
   18df0:	4819      	ldr	r0, [pc, #100]	; (18e58 <z_set_timeout_expiry+0x94>)
   18df2:	f000 fbda 	bl	195aa <printk>
   18df6:	214a      	movs	r1, #74	; 0x4a
   18df8:	4814      	ldr	r0, [pc, #80]	; (18e4c <z_set_timeout_expiry+0x88>)
   18dfa:	f000 fbed 	bl	195d8 <assert_post_action>
	z_spin_lock_set_owner(l);
   18dfe:	4812      	ldr	r0, [pc, #72]	; (18e48 <z_set_timeout_expiry+0x84>)
   18e00:	f7ff fd80 	bl	18904 <z_spin_lock_set_owner>
	LOCKED(&timeout_lock) {
		int next = next_timeout();
   18e04:	f7ff fe86 	bl	18b14 <next_timeout>
		 * SMP can't use this optimization though: we don't
		 * know when context switches happen until interrupt
		 * exit and so can't get the timeslicing clamp folded
		 * in.
		 */
		if (!imminent && (sooner || IS_ENABLED(CONFIG_SMP))) {
   18e08:	2801      	cmp	r0, #1
   18e0a:	dd05      	ble.n	18e18 <z_set_timeout_expiry+0x54>
   18e0c:	42a0      	cmp	r0, r4
   18e0e:	dd03      	ble.n	18e18 <z_set_timeout_expiry+0x54>
			z_clock_set_timeout(ticks, idle);
   18e10:	4631      	mov	r1, r6
   18e12:	4620      	mov	r0, r4
   18e14:	f7f3 ff14 	bl	cc40 <z_clock_set_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   18e18:	480b      	ldr	r0, [pc, #44]	; (18e48 <z_set_timeout_expiry+0x84>)
   18e1a:	f7ff fd63 	bl	188e4 <z_spin_unlock_valid>
   18e1e:	b968      	cbnz	r0, 18e3c <z_set_timeout_expiry+0x78>
   18e20:	235d      	movs	r3, #93	; 0x5d
   18e22:	4a0a      	ldr	r2, [pc, #40]	; (18e4c <z_set_timeout_expiry+0x88>)
   18e24:	490d      	ldr	r1, [pc, #52]	; (18e5c <z_set_timeout_expiry+0x98>)
   18e26:	480b      	ldr	r0, [pc, #44]	; (18e54 <z_set_timeout_expiry+0x90>)
   18e28:	f000 fbbf 	bl	195aa <printk>
   18e2c:	4906      	ldr	r1, [pc, #24]	; (18e48 <z_set_timeout_expiry+0x84>)
   18e2e:	480c      	ldr	r0, [pc, #48]	; (18e60 <z_set_timeout_expiry+0x9c>)
   18e30:	f000 fbbb 	bl	195aa <printk>
   18e34:	215d      	movs	r1, #93	; 0x5d
   18e36:	4805      	ldr	r0, [pc, #20]	; (18e4c <z_set_timeout_expiry+0x88>)
   18e38:	f000 fbce 	bl	195d8 <assert_post_action>
	__asm__ volatile(
   18e3c:	f385 8811 	msr	BASEPRI, r5
   18e40:	f3bf 8f6f 	isb	sy
		}
	}
}
   18e44:	bd70      	pop	{r4, r5, r6, pc}
   18e46:	bf00      	nop
   18e48:	200249bc 	.word	0x200249bc
   18e4c:	0001adf1 	.word	0x0001adf1
   18e50:	0001ae17 	.word	0x0001ae17
   18e54:	0001ac45 	.word	0x0001ac45
   18e58:	0001ae2c 	.word	0x0001ae2c
   18e5c:	0001ae44 	.word	0x0001ae44
   18e60:	0001ae5b 	.word	0x0001ae5b

00018e64 <z_clock_announce>:

void z_clock_announce(s32_t ticks)
{
   18e64:	e92d 4bf0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, fp, lr}
   18e68:	4604      	mov	r4, r0
#ifdef CONFIG_TIMESLICING
	z_time_slice(ticks);
   18e6a:	f7ff f8f3 	bl	18054 <z_time_slice>
	__asm__ volatile(
   18e6e:	f04f 0320 	mov.w	r3, #32
   18e72:	f3ef 8511 	mrs	r5, BASEPRI
   18e76:	f383 8811 	msr	BASEPRI, r3
   18e7a:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   18e7e:	4848      	ldr	r0, [pc, #288]	; (18fa0 <z_clock_announce+0x13c>)
   18e80:	f7ff fd22 	bl	188c8 <z_spin_lock_valid>
   18e84:	b968      	cbnz	r0, 18ea2 <z_clock_announce+0x3e>
   18e86:	234a      	movs	r3, #74	; 0x4a
   18e88:	4a46      	ldr	r2, [pc, #280]	; (18fa4 <z_clock_announce+0x140>)
   18e8a:	4947      	ldr	r1, [pc, #284]	; (18fa8 <z_clock_announce+0x144>)
   18e8c:	4847      	ldr	r0, [pc, #284]	; (18fac <z_clock_announce+0x148>)
   18e8e:	f000 fb8c 	bl	195aa <printk>
   18e92:	4943      	ldr	r1, [pc, #268]	; (18fa0 <z_clock_announce+0x13c>)
   18e94:	4846      	ldr	r0, [pc, #280]	; (18fb0 <z_clock_announce+0x14c>)
   18e96:	f000 fb88 	bl	195aa <printk>
   18e9a:	214a      	movs	r1, #74	; 0x4a
   18e9c:	4841      	ldr	r0, [pc, #260]	; (18fa4 <z_clock_announce+0x140>)
   18e9e:	f000 fb9b 	bl	195d8 <assert_post_action>
	z_spin_lock_set_owner(l);
   18ea2:	4f44      	ldr	r7, [pc, #272]	; (18fb4 <z_clock_announce+0x150>)
#endif

	k_spinlock_key_t key = k_spin_lock(&timeout_lock);

	announce_remaining = ticks;
   18ea4:	4e44      	ldr	r6, [pc, #272]	; (18fb8 <z_clock_announce+0x154>)
   18ea6:	46b9      	mov	r9, r7
   18ea8:	483d      	ldr	r0, [pc, #244]	; (18fa0 <z_clock_announce+0x13c>)
	return list->head == list;
   18eaa:	f8df 8118 	ldr.w	r8, [pc, #280]	; 18fc4 <z_clock_announce+0x160>
   18eae:	f7ff fd29 	bl	18904 <z_spin_lock_set_owner>
   18eb2:	6034      	str	r4, [r6, #0]
   18eb4:	f8d8 4000 	ldr.w	r4, [r8]
   18eb8:	6832      	ldr	r2, [r6, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   18eba:	4544      	cmp	r4, r8
   18ebc:	e9d7 bc00 	ldrd	fp, ip, [r7]
   18ec0:	d005      	beq.n	18ece <z_clock_announce+0x6a>

	while (first() != NULL && first()->dticks <= announce_remaining) {
   18ec2:	b124      	cbz	r4, 18ece <z_clock_announce+0x6a>
   18ec4:	68a3      	ldr	r3, [r4, #8]
   18ec6:	4293      	cmp	r3, r2
   18ec8:	dd26      	ble.n	18f18 <z_clock_announce+0xb4>
		t->fn(t);
		key = k_spin_lock(&timeout_lock);
	}

	if (first() != NULL) {
		first()->dticks -= announce_remaining;
   18eca:	1a9b      	subs	r3, r3, r2
   18ecc:	60a3      	str	r3, [r4, #8]
	}

	curr_tick += announce_remaining;
	announce_remaining = 0;
   18ece:	2400      	movs	r4, #0
	curr_tick += announce_remaining;
   18ed0:	eb1b 0002 	adds.w	r0, fp, r2
   18ed4:	eb4c 71e2 	adc.w	r1, ip, r2, asr #31
   18ed8:	e9c9 0100 	strd	r0, r1, [r9]
	announce_remaining = 0;
   18edc:	6034      	str	r4, [r6, #0]

	z_clock_set_timeout(next_timeout(), false);
   18ede:	f7ff fe19 	bl	18b14 <next_timeout>
   18ee2:	4621      	mov	r1, r4
   18ee4:	f7f3 feac 	bl	cc40 <z_clock_set_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   18ee8:	482d      	ldr	r0, [pc, #180]	; (18fa0 <z_clock_announce+0x13c>)
   18eea:	f7ff fcfb 	bl	188e4 <z_spin_unlock_valid>
   18eee:	b968      	cbnz	r0, 18f0c <z_clock_announce+0xa8>
   18ef0:	235d      	movs	r3, #93	; 0x5d
   18ef2:	4a2c      	ldr	r2, [pc, #176]	; (18fa4 <z_clock_announce+0x140>)
   18ef4:	4931      	ldr	r1, [pc, #196]	; (18fbc <z_clock_announce+0x158>)
   18ef6:	482d      	ldr	r0, [pc, #180]	; (18fac <z_clock_announce+0x148>)
   18ef8:	f000 fb57 	bl	195aa <printk>
   18efc:	4928      	ldr	r1, [pc, #160]	; (18fa0 <z_clock_announce+0x13c>)
   18efe:	4830      	ldr	r0, [pc, #192]	; (18fc0 <z_clock_announce+0x15c>)
   18f00:	f000 fb53 	bl	195aa <printk>
   18f04:	215d      	movs	r1, #93	; 0x5d
   18f06:	4827      	ldr	r0, [pc, #156]	; (18fa4 <z_clock_announce+0x140>)
   18f08:	f000 fb66 	bl	195d8 <assert_post_action>
	__asm__ volatile(
   18f0c:	f385 8811 	msr	BASEPRI, r5
   18f10:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&timeout_lock, key);
}
   18f14:	e8bd 8bf0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, fp, pc}
		curr_tick += dt;
   18f18:	eb1b 0003 	adds.w	r0, fp, r3
   18f1c:	eb4c 71e3 	adc.w	r1, ip, r3, asr #31
		announce_remaining -= dt;
   18f20:	1ad3      	subs	r3, r2, r3
   18f22:	6033      	str	r3, [r6, #0]
		t->dticks = 0;
   18f24:	2300      	movs	r3, #0
		curr_tick += dt;
   18f26:	e9c7 0100 	strd	r0, r1, [r7]
		t->dticks = 0;
   18f2a:	60a3      	str	r3, [r4, #8]
		remove_timeout(t);
   18f2c:	4620      	mov	r0, r4
   18f2e:	f7ff fddd 	bl	18aec <remove_timeout>
   18f32:	481b      	ldr	r0, [pc, #108]	; (18fa0 <z_clock_announce+0x13c>)
   18f34:	f7ff fcd6 	bl	188e4 <z_spin_unlock_valid>
   18f38:	b968      	cbnz	r0, 18f56 <z_clock_announce+0xf2>
   18f3a:	235d      	movs	r3, #93	; 0x5d
   18f3c:	4a19      	ldr	r2, [pc, #100]	; (18fa4 <z_clock_announce+0x140>)
   18f3e:	491f      	ldr	r1, [pc, #124]	; (18fbc <z_clock_announce+0x158>)
   18f40:	481a      	ldr	r0, [pc, #104]	; (18fac <z_clock_announce+0x148>)
   18f42:	f000 fb32 	bl	195aa <printk>
   18f46:	4916      	ldr	r1, [pc, #88]	; (18fa0 <z_clock_announce+0x13c>)
   18f48:	481d      	ldr	r0, [pc, #116]	; (18fc0 <z_clock_announce+0x15c>)
   18f4a:	f000 fb2e 	bl	195aa <printk>
   18f4e:	215d      	movs	r1, #93	; 0x5d
   18f50:	4814      	ldr	r0, [pc, #80]	; (18fa4 <z_clock_announce+0x140>)
   18f52:	f000 fb41 	bl	195d8 <assert_post_action>
   18f56:	f385 8811 	msr	BASEPRI, r5
   18f5a:	f3bf 8f6f 	isb	sy
		t->fn(t);
   18f5e:	68e3      	ldr	r3, [r4, #12]
   18f60:	4620      	mov	r0, r4
   18f62:	4798      	blx	r3
	__asm__ volatile(
   18f64:	f04f 0320 	mov.w	r3, #32
   18f68:	f3ef 8511 	mrs	r5, BASEPRI
   18f6c:	f383 8811 	msr	BASEPRI, r3
   18f70:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   18f74:	480a      	ldr	r0, [pc, #40]	; (18fa0 <z_clock_announce+0x13c>)
   18f76:	f7ff fca7 	bl	188c8 <z_spin_lock_valid>
   18f7a:	b968      	cbnz	r0, 18f98 <z_clock_announce+0x134>
   18f7c:	234a      	movs	r3, #74	; 0x4a
   18f7e:	4a09      	ldr	r2, [pc, #36]	; (18fa4 <z_clock_announce+0x140>)
   18f80:	4909      	ldr	r1, [pc, #36]	; (18fa8 <z_clock_announce+0x144>)
   18f82:	480a      	ldr	r0, [pc, #40]	; (18fac <z_clock_announce+0x148>)
   18f84:	f000 fb11 	bl	195aa <printk>
   18f88:	4905      	ldr	r1, [pc, #20]	; (18fa0 <z_clock_announce+0x13c>)
   18f8a:	4809      	ldr	r0, [pc, #36]	; (18fb0 <z_clock_announce+0x14c>)
   18f8c:	f000 fb0d 	bl	195aa <printk>
   18f90:	214a      	movs	r1, #74	; 0x4a
   18f92:	4804      	ldr	r0, [pc, #16]	; (18fa4 <z_clock_announce+0x140>)
   18f94:	f000 fb20 	bl	195d8 <assert_post_action>
	z_spin_lock_set_owner(l);
   18f98:	4801      	ldr	r0, [pc, #4]	; (18fa0 <z_clock_announce+0x13c>)
   18f9a:	f7ff fcb3 	bl	18904 <z_spin_lock_set_owner>
	return k;
   18f9e:	e789      	b.n	18eb4 <z_clock_announce+0x50>
   18fa0:	200249bc 	.word	0x200249bc
   18fa4:	0001adf1 	.word	0x0001adf1
   18fa8:	0001ae17 	.word	0x0001ae17
   18fac:	0001ac45 	.word	0x0001ac45
   18fb0:	0001ae2c 	.word	0x0001ae2c
   18fb4:	20020000 	.word	0x20020000
   18fb8:	200249b8 	.word	0x200249b8
   18fbc:	0001ae44 	.word	0x0001ae44
   18fc0:	0001ae5b 	.word	0x0001ae5b
   18fc4:	20026068 	.word	0x20026068

00018fc8 <z_tick_get>:

s64_t z_tick_get(void)
{
   18fc8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   18fcc:	f04f 0320 	mov.w	r3, #32
   18fd0:	f3ef 8611 	mrs	r6, BASEPRI
   18fd4:	f383 8811 	msr	BASEPRI, r3
   18fd8:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   18fdc:	481b      	ldr	r0, [pc, #108]	; (1904c <z_tick_get+0x84>)
   18fde:	f7ff fc73 	bl	188c8 <z_spin_lock_valid>
   18fe2:	b968      	cbnz	r0, 19000 <z_tick_get+0x38>
   18fe4:	234a      	movs	r3, #74	; 0x4a
   18fe6:	4a1a      	ldr	r2, [pc, #104]	; (19050 <z_tick_get+0x88>)
   18fe8:	491a      	ldr	r1, [pc, #104]	; (19054 <z_tick_get+0x8c>)
   18fea:	481b      	ldr	r0, [pc, #108]	; (19058 <z_tick_get+0x90>)
   18fec:	f000 fadd 	bl	195aa <printk>
   18ff0:	4916      	ldr	r1, [pc, #88]	; (1904c <z_tick_get+0x84>)
   18ff2:	481a      	ldr	r0, [pc, #104]	; (1905c <z_tick_get+0x94>)
   18ff4:	f000 fad9 	bl	195aa <printk>
   18ff8:	214a      	movs	r1, #74	; 0x4a
   18ffa:	4815      	ldr	r0, [pc, #84]	; (19050 <z_tick_get+0x88>)
   18ffc:	f000 faec 	bl	195d8 <assert_post_action>
	z_spin_lock_set_owner(l);
   19000:	4812      	ldr	r0, [pc, #72]	; (1904c <z_tick_get+0x84>)
   19002:	f7ff fc7f 	bl	18904 <z_spin_lock_set_owner>
	u64_t t = 0U;

	LOCKED(&timeout_lock) {
		t = curr_tick + z_clock_elapsed();
   19006:	f7f3 fea9 	bl	cd5c <z_clock_elapsed>
   1900a:	4b15      	ldr	r3, [pc, #84]	; (19060 <z_tick_get+0x98>)
   1900c:	e9d3 4500 	ldrd	r4, r5, [r3]
   19010:	1827      	adds	r7, r4, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   19012:	480e      	ldr	r0, [pc, #56]	; (1904c <z_tick_get+0x84>)
   19014:	f145 0800 	adc.w	r8, r5, #0
   19018:	f7ff fc64 	bl	188e4 <z_spin_unlock_valid>
   1901c:	b968      	cbnz	r0, 1903a <z_tick_get+0x72>
   1901e:	235d      	movs	r3, #93	; 0x5d
   19020:	4a0b      	ldr	r2, [pc, #44]	; (19050 <z_tick_get+0x88>)
   19022:	4910      	ldr	r1, [pc, #64]	; (19064 <z_tick_get+0x9c>)
   19024:	480c      	ldr	r0, [pc, #48]	; (19058 <z_tick_get+0x90>)
   19026:	f000 fac0 	bl	195aa <printk>
   1902a:	4908      	ldr	r1, [pc, #32]	; (1904c <z_tick_get+0x84>)
   1902c:	480e      	ldr	r0, [pc, #56]	; (19068 <z_tick_get+0xa0>)
   1902e:	f000 fabc 	bl	195aa <printk>
   19032:	215d      	movs	r1, #93	; 0x5d
   19034:	4806      	ldr	r0, [pc, #24]	; (19050 <z_tick_get+0x88>)
   19036:	f000 facf 	bl	195d8 <assert_post_action>
	__asm__ volatile(
   1903a:	f386 8811 	msr	BASEPRI, r6
   1903e:	f3bf 8f6f 	isb	sy
	}
	return t;
}
   19042:	4638      	mov	r0, r7
   19044:	4641      	mov	r1, r8
   19046:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1904a:	bf00      	nop
   1904c:	200249bc 	.word	0x200249bc
   19050:	0001adf1 	.word	0x0001adf1
   19054:	0001ae17 	.word	0x0001ae17
   19058:	0001ac45 	.word	0x0001ac45
   1905c:	0001ae2c 	.word	0x0001ae2c
   19060:	20020000 	.word	0x20020000
   19064:	0001ae44 	.word	0x0001ae44
   19068:	0001ae5b 	.word	0x0001ae5b

0001906c <get_bit_ptr>:
{
   1906c:	b570      	push	{r4, r5, r6, lr}
   1906e:	250c      	movs	r5, #12
   19070:	68c6      	ldr	r6, [r0, #12]
	u32_t *bitarray = level <= p->max_inline_level ?
   19072:	f990 000b 	ldrsb.w	r0, [r0, #11]
   19076:	434d      	muls	r5, r1
		p->levels[level].bits : p->levels[level].bits_p;
   19078:	4288      	cmp	r0, r1
	*word = &bitarray[bn / 32];
   1907a:	4610      	mov	r0, r2
   1907c:	eb06 0405 	add.w	r4, r6, r5
		p->levels[level].bits : p->levels[level].bits_p;
   19080:	bfb8      	it	lt
   19082:	5974      	ldrlt	r4, [r6, r5]
	*word = &bitarray[bn / 32];
   19084:	2a00      	cmp	r2, #0
   19086:	bfb8      	it	lt
   19088:	f102 001f 	addlt.w	r0, r2, #31
   1908c:	1140      	asrs	r0, r0, #5
   1908e:	eb04 0180 	add.w	r1, r4, r0, lsl #2
   19092:	6019      	str	r1, [r3, #0]
}
   19094:	f002 001f 	and.w	r0, r2, #31
   19098:	bd70      	pop	{r4, r5, r6, pc}

0001909a <pool_irq_lock.isra.2.part.3>:
	__asm__ volatile(
   1909a:	f04f 0320 	mov.w	r3, #32
   1909e:	f3ef 8011 	mrs	r0, BASEPRI
   190a2:	f383 8811 	msr	BASEPRI, r3
   190a6:	f3bf 8f6f 	isb	sy
}
   190aa:	4770      	bx	lr

000190ac <pool_irq_unlock.isra.4>:
	if (p->flags & SYS_MEM_POOL_KERNEL) {
   190ac:	07c3      	lsls	r3, r0, #31
   190ae:	d503      	bpl.n	190b8 <pool_irq_unlock.isra.4+0xc>
	__asm__ volatile(
   190b0:	f381 8811 	msr	BASEPRI, r1
   190b4:	f3bf 8f6f 	isb	sy
}
   190b8:	4770      	bx	lr

000190ba <z_sys_mem_pool_base_init>:
	p->max_inline_level = -1;
   190ba:	23ff      	movs	r3, #255	; 0xff
{
   190bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	size_t buflen = p->n_max * p->max_sz, sz = p->max_sz;
   190c0:	6846      	ldr	r6, [r0, #4]
	p->max_inline_level = -1;
   190c2:	72c3      	strb	r3, [r0, #11]
	size_t buflen = p->n_max * p->max_sz, sz = p->max_sz;
   190c4:	4632      	mov	r2, r6
	for (i = 0; i < p->n_levels; i++) {
   190c6:	2300      	movs	r3, #0
		sys_dlist_init(&p->levels[i].free_list);
   190c8:	f04f 090c 	mov.w	r9, #12
	size_t buflen = p->n_max * p->max_sz, sz = p->max_sz;
   190cc:	8907      	ldrh	r7, [r0, #8]
	u32_t *bits = (u32_t *)((u8_t *)p->buf + buflen);
   190ce:	6801      	ldr	r1, [r0, #0]
	size_t buflen = p->n_max * p->max_sz, sz = p->max_sz;
   190d0:	fb06 fc07 	mul.w	ip, r6, r7
	for (i = 0; i < p->n_levels; i++) {
   190d4:	f890 800a 	ldrb.w	r8, [r0, #10]
	u32_t *bits = (u32_t *)((u8_t *)p->buf + buflen);
   190d8:	4461      	add	r1, ip
	for (i = 0; i < p->n_levels; i++) {
   190da:	4598      	cmp	r8, r3
   190dc:	dc05      	bgt.n	190ea <z_sys_mem_pool_base_init+0x30>
   190de:	2300      	movs	r3, #0
	for (i = 0; i < p->n_max; i++) {
   190e0:	4619      	mov	r1, r3
   190e2:	428f      	cmp	r7, r1
   190e4:	dc20      	bgt.n	19128 <z_sys_mem_pool_base_init+0x6e>
}
   190e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		int nblocks = buflen / sz;
   190ea:	fbbc f5f2 	udiv	r5, ip, r2
		sys_dlist_init(&p->levels[i].free_list);
   190ee:	fb09 fe03 	mul.w	lr, r9, r3
   190f2:	f8d0 a00c 	ldr.w	sl, [r0, #12]
		if (nblocks <= sizeof(p->levels[i].bits)*8) {
   190f6:	2d20      	cmp	r5, #32
		sys_dlist_init(&p->levels[i].free_list);
   190f8:	eb0a 040e 	add.w	r4, sl, lr
   190fc:	f104 0b04 	add.w	fp, r4, #4
	list->tail = (sys_dnode_t *)list;
   19100:	e9c4 bb01 	strd	fp, fp, [r4, #4]
		if (nblocks <= sizeof(p->levels[i].bits)*8) {
   19104:	d805      	bhi.n	19112 <z_sys_mem_pool_base_init+0x58>
			p->max_inline_level = i;
   19106:	72c3      	strb	r3, [r0, #11]
		sz = WB_DN(sz / 4);
   19108:	0892      	lsrs	r2, r2, #2
   1910a:	f022 0203 	bic.w	r2, r2, #3
	for (i = 0; i < p->n_levels; i++) {
   1910e:	3301      	adds	r3, #1
   19110:	e7e3      	b.n	190da <z_sys_mem_pool_base_init+0x20>
			bits += (nblocks + 31)/32;
   19112:	f115 041f 	adds.w	r4, r5, #31
   19116:	bf48      	it	mi
   19118:	f105 043e 	addmi.w	r4, r5, #62	; 0x3e
   1911c:	1164      	asrs	r4, r4, #5
			p->levels[i].bits_p = bits;
   1911e:	f84a 100e 	str.w	r1, [sl, lr]
			bits += (nblocks + 31)/32;
   19122:	eb01 0184 	add.w	r1, r1, r4, lsl #2
   19126:	e7ef      	b.n	19108 <z_sys_mem_pool_base_init+0x4e>
		sys_dlist_append(&p->levels[0].free_list, block);
   19128:	68c2      	ldr	r2, [r0, #12]
	return (u8_t *)p->buf + lsz * block;
   1912a:	6805      	ldr	r5, [r0, #0]
		sys_dlist_append(&p->levels[0].free_list, block);
   1912c:	f102 0c04 	add.w	ip, r2, #4
	return (u8_t *)p->buf + lsz * block;
   19130:	18ec      	adds	r4, r5, r3
	node->next = list;
   19132:	f845 c003 	str.w	ip, [r5, r3]
	node->prev = list->tail;
   19136:	6895      	ldr	r5, [r2, #8]
	for (i = 0; i < p->n_max; i++) {
   19138:	3101      	adds	r1, #1
   1913a:	6065      	str	r5, [r4, #4]
	list->tail->next = node;
   1913c:	6895      	ldr	r5, [r2, #8]
   1913e:	4433      	add	r3, r6
   19140:	602c      	str	r4, [r5, #0]
	list->tail = node;
   19142:	6094      	str	r4, [r2, #8]
   19144:	e7cd      	b.n	190e2 <z_sys_mem_pool_base_init+0x28>

00019146 <z_sys_mem_pool_block_alloc>:
{
   19146:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1914a:	b087      	sub	sp, #28
	size_t lsizes[LVL_ARRAY_SZ(p->n_levels)];
   1914c:	7a84      	ldrb	r4, [r0, #10]
{
   1914e:	af00      	add	r7, sp, #0
   19150:	e9c7 3201 	strd	r3, r2, [r7, #4]
	size_t lsizes[LVL_ARRAY_SZ(p->n_levels)];
   19154:	00a3      	lsls	r3, r4, #2
   19156:	3307      	adds	r3, #7
   19158:	f403 63ff 	and.w	r3, r3, #2040	; 0x7f8
   1915c:	ebad 0d03 	sub.w	sp, sp, r3
   19160:	46ea      	mov	sl, sp
	lsizes[0] = p->max_sz;
   19162:	4653      	mov	r3, sl
   19164:	6842      	ldr	r2, [r0, #4]
{
   19166:	4605      	mov	r5, r0
	lsizes[0] = p->max_sz;
   19168:	f843 2904 	str.w	r2, [r3], #-4
	for (i = 0; i < p->n_levels; i++) {
   1916c:	2200      	movs	r2, #0
   1916e:	4294      	cmp	r4, r2
   19170:	f102 39ff 	add.w	r9, r2, #4294967295
   19174:	dd09      	ble.n	1918a <z_sys_mem_pool_block_alloc+0x44>
		if (i > 0) {
   19176:	b122      	cbz	r2, 19182 <z_sys_mem_pool_block_alloc+0x3c>
			lsizes[i] = WB_DN(lsizes[i-1] / 4);
   19178:	6818      	ldr	r0, [r3, #0]
   1917a:	0880      	lsrs	r0, r0, #2
   1917c:	f020 0003 	bic.w	r0, r0, #3
   19180:	6058      	str	r0, [r3, #4]
		if (lsizes[i] < size) {
   19182:	f853 0f04 	ldr.w	r0, [r3, #4]!
   19186:	4288      	cmp	r0, r1
   19188:	d208      	bcs.n	1919c <z_sys_mem_pool_block_alloc+0x56>
	if (alloc_l < 0) {
   1918a:	f1b9 3fff 	cmp.w	r9, #4294967295
   1918e:	d107      	bne.n	191a0 <z_sys_mem_pool_block_alloc+0x5a>
		*data_p = NULL;
   19190:	2300      	movs	r3, #0
   19192:	6c3a      	ldr	r2, [r7, #64]	; 0x40
   19194:	6013      	str	r3, [r2, #0]
		return -ENOMEM;
   19196:	f06f 000b 	mvn.w	r0, #11
   1919a:	e02c      	b.n	191f6 <z_sys_mem_pool_block_alloc+0xb0>
	for (i = 0; i < p->n_levels; i++) {
   1919c:	3201      	adds	r2, #1
   1919e:	e7e6      	b.n	1916e <z_sys_mem_pool_block_alloc+0x28>
	if (p->flags & SYS_MEM_POOL_KERNEL) {
   191a0:	7c28      	ldrb	r0, [r5, #16]
   191a2:	f010 0001 	ands.w	r0, r0, #1
   191a6:	d001      	beq.n	191ac <z_sys_mem_pool_block_alloc+0x66>
   191a8:	f7ff ff77 	bl	1909a <pool_irq_lock.isra.2.part.3>
   191ac:	230c      	movs	r3, #12
	key = pool_irq_lock(p);
   191ae:	4680      	mov	r8, r0
	block = sys_dlist_get(&p->levels[l].free_list);
   191b0:	464e      	mov	r6, r9
   191b2:	68ea      	ldr	r2, [r5, #12]
   191b4:	fb03 2309 	mla	r3, r3, r9, r2
	return list->head == list;
   191b8:	461a      	mov	r2, r3
   191ba:	f852 4f04 	ldr.w	r4, [r2, #4]!

static inline sys_dnode_t *sys_dlist_get(sys_dlist_t *list)
{
	sys_dnode_t *node = NULL;

	if (!sys_dlist_is_empty(list)) {
   191be:	4294      	cmp	r4, r2
   191c0:	d11d      	bne.n	191fe <z_sys_mem_pool_block_alloc+0xb8>
	for (i = alloc_l; i >= 0; i--) {
   191c2:	3e01      	subs	r6, #1
   191c4:	1c72      	adds	r2, r6, #1
   191c6:	f1a3 030c 	sub.w	r3, r3, #12
   191ca:	d1f5      	bne.n	191b8 <z_sys_mem_pool_block_alloc+0x72>
   191cc:	2400      	movs	r4, #0
	pool_irq_unlock(p, key);
   191ce:	4641      	mov	r1, r8
   191d0:	7c28      	ldrb	r0, [r5, #16]
   191d2:	f7ff ff6b 	bl	190ac <pool_irq_unlock.isra.4>
	*data_p = data;
   191d6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   191d8:	601c      	str	r4, [r3, #0]
	if (data == NULL) {
   191da:	2c00      	cmp	r4, #0
   191dc:	d0db      	beq.n	19196 <z_sys_mem_pool_block_alloc+0x50>
	*level_p = alloc_l;
   191de:	68bb      	ldr	r3, [r7, #8]
	return 0;
   191e0:	2000      	movs	r0, #0
	*level_p = alloc_l;
   191e2:	f8c3 9000 	str.w	r9, [r3]
	return ((u8_t *)block - (u8_t *)p->buf) / sz;
   191e6:	682b      	ldr	r3, [r5, #0]
   191e8:	1ae4      	subs	r4, r4, r3
   191ea:	f85a 3029 	ldr.w	r3, [sl, r9, lsl #2]
   191ee:	fb94 f4f3 	sdiv	r4, r4, r3
	*block_p = block_num(p, data, lsizes[alloc_l]);
   191f2:	687b      	ldr	r3, [r7, #4]
   191f4:	601c      	str	r4, [r3, #0]
}
   191f6:	371c      	adds	r7, #28
   191f8:	46bd      	mov	sp, r7
   191fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	node->prev->next = node->next;
   191fe:	e9d4 3200 	ldrd	r3, r2, [r4]
   19202:	6013      	str	r3, [r2, #0]
	node->next->prev = node->prev;
   19204:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   19206:	2300      	movs	r3, #0
	node->prev = NULL;
   19208:	e9c4 3300 	strd	r3, r3, [r4]
	return ((u8_t *)block - (u8_t *)p->buf) / sz;
   1920c:	682b      	ldr	r3, [r5, #0]
		data = block_alloc(p, i, lsizes[i]);
   1920e:	f85a 1026 	ldr.w	r1, [sl, r6, lsl #2]
	return ((u8_t *)block - (u8_t *)p->buf) / sz;
   19212:	1ae2      	subs	r2, r4, r3
	int bit = get_bit_ptr(p, level, bn, &word);
   19214:	f107 0b14 	add.w	fp, r7, #20
   19218:	fb92 f2f1 	sdiv	r2, r2, r1
   1921c:	465b      	mov	r3, fp
   1921e:	4631      	mov	r1, r6
   19220:	4628      	mov	r0, r5
   19222:	f7ff ff23 	bl	1906c <get_bit_ptr>
	*word |= (1<<bit);
   19226:	2201      	movs	r2, #1
   19228:	6979      	ldr	r1, [r7, #20]
   1922a:	fa02 f000 	lsl.w	r0, r2, r0
   1922e:	680b      	ldr	r3, [r1, #0]
   19230:	603a      	str	r2, [r7, #0]
   19232:	4303      	orrs	r3, r0
   19234:	600b      	str	r3, [r1, #0]
			for (from_l = i; from_l < alloc_l; from_l++) {
   19236:	454e      	cmp	r6, r9
   19238:	dac9      	bge.n	191ce <z_sys_mem_pool_block_alloc+0x88>
	return ((u8_t *)block - (u8_t *)p->buf) / sz;
   1923a:	682a      	ldr	r2, [r5, #0]
   1923c:	f85a 3026 	ldr.w	r3, [sl, r6, lsl #2]
   19240:	1aa2      	subs	r2, r4, r2
   19242:	fb92 f2f3 	sdiv	r2, r2, r3
	set_alloc_bit(p, l + 1, 4*bn);
   19246:	3601      	adds	r6, #1
	int bit = get_bit_ptr(p, level, bn, &word);
   19248:	465b      	mov	r3, fp
   1924a:	0092      	lsls	r2, r2, #2
   1924c:	4631      	mov	r1, r6
   1924e:	4628      	mov	r0, r5
   19250:	f7ff ff0c 	bl	1906c <get_bit_ptr>
	*word |= (1<<bit);
   19254:	697a      	ldr	r2, [r7, #20]
   19256:	683b      	ldr	r3, [r7, #0]
		sys_dlist_append(&p->levels[l + 1].free_list, block2);
   19258:	68e9      	ldr	r1, [r5, #12]
	*word |= (1<<bit);
   1925a:	fa03 f000 	lsl.w	r0, r3, r0
   1925e:	6813      	ldr	r3, [r2, #0]
   19260:	4303      	orrs	r3, r0
   19262:	6013      	str	r3, [r2, #0]
		sys_dlist_append(&p->levels[l + 1].free_list, block2);
   19264:	230c      	movs	r3, #12
   19266:	2203      	movs	r2, #3
   19268:	fb03 1106 	mla	r1, r3, r6, r1
		int lsz = lsizes[l + 1];
   1926c:	f85a 0026 	ldr.w	r0, [sl, r6, lsl #2]
		sys_dlist_append(&p->levels[l + 1].free_list, block2);
   19270:	f101 0e04 	add.w	lr, r1, #4
   19274:	1823      	adds	r3, r4, r0
   19276:	60fa      	str	r2, [r7, #12]
	node->prev = list->tail;
   19278:	688a      	ldr	r2, [r1, #8]
	node->next = list;
   1927a:	f8c3 e000 	str.w	lr, [r3]
	node->prev = list->tail;
   1927e:	605a      	str	r2, [r3, #4]
	list->tail->next = node;
   19280:	688a      	ldr	r2, [r1, #8]
   19282:	6013      	str	r3, [r2, #0]
	for (i = 1; i < 4; i++) {
   19284:	68fa      	ldr	r2, [r7, #12]
	list->tail = node;
   19286:	608b      	str	r3, [r1, #8]
   19288:	3a01      	subs	r2, #1
   1928a:	4403      	add	r3, r0
   1928c:	60fa      	str	r2, [r7, #12]
   1928e:	d1f3      	bne.n	19278 <z_sys_mem_pool_block_alloc+0x132>
				pool_irq_unlock(p, key);
   19290:	4641      	mov	r1, r8
   19292:	7c28      	ldrb	r0, [r5, #16]
   19294:	f7ff ff0a 	bl	190ac <pool_irq_unlock.isra.4>
	if (p->flags & SYS_MEM_POOL_KERNEL) {
   19298:	7c2b      	ldrb	r3, [r5, #16]
   1929a:	07db      	lsls	r3, r3, #31
   1929c:	d503      	bpl.n	192a6 <z_sys_mem_pool_block_alloc+0x160>
   1929e:	f7ff fefc 	bl	1909a <pool_irq_lock.isra.2.part.3>
				key = pool_irq_lock(p);
   192a2:	4680      	mov	r8, r0
   192a4:	e7c7      	b.n	19236 <z_sys_mem_pool_block_alloc+0xf0>
		return 0;
   192a6:	68f8      	ldr	r0, [r7, #12]
   192a8:	e7fb      	b.n	192a2 <z_sys_mem_pool_block_alloc+0x15c>

000192aa <arch_printk_char_out>:
}
   192aa:	2000      	movs	r0, #0
   192ac:	4770      	bx	lr

000192ae <print_err>:
{
   192ae:	b570      	push	{r4, r5, r6, lr}
   192b0:	460d      	mov	r5, r1
   192b2:	4604      	mov	r4, r0
	out('E', ctx);
   192b4:	2045      	movs	r0, #69	; 0x45
   192b6:	47a0      	blx	r4
	out('R', ctx);
   192b8:	4629      	mov	r1, r5
   192ba:	2052      	movs	r0, #82	; 0x52
   192bc:	47a0      	blx	r4
	out('R', ctx);
   192be:	4629      	mov	r1, r5
   192c0:	4623      	mov	r3, r4
}
   192c2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	out('R', ctx);
   192c6:	2052      	movs	r0, #82	; 0x52
   192c8:	4718      	bx	r3

000192ca <z_vprintk>:
{
   192ca:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	char length_mod = 0;
   192ce:	f04f 0800 	mov.w	r8, #0
{
   192d2:	4606      	mov	r6, r0
   192d4:	460f      	mov	r7, r1
   192d6:	461c      	mov	r4, r3
	int min_width = -1;
   192d8:	f04f 3aff 	mov.w	sl, #4294967295
	enum pad_type padding = PAD_NONE;
   192dc:	46c1      	mov	r9, r8
	int might_format = 0; /* 1 if encountered a '%' */
   192de:	4645      	mov	r5, r8
{
   192e0:	b08b      	sub	sp, #44	; 0x2c
   192e2:	9202      	str	r2, [sp, #8]
	while (*fmt) {
   192e4:	9b02      	ldr	r3, [sp, #8]
   192e6:	7818      	ldrb	r0, [r3, #0]
   192e8:	b910      	cbnz	r0, 192f0 <z_vprintk+0x26>
}
   192ea:	b00b      	add	sp, #44	; 0x2c
   192ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (!might_format) {
   192f0:	b945      	cbnz	r5, 19304 <z_vprintk+0x3a>
			if (*fmt != '%') {
   192f2:	2825      	cmp	r0, #37	; 0x25
   192f4:	f000 814b 	beq.w	1958e <z_vprintk+0x2c4>
				out((int)*fmt, ctx);
   192f8:	4639      	mov	r1, r7
   192fa:	47b0      	blx	r6
		++fmt;
   192fc:	9b02      	ldr	r3, [sp, #8]
   192fe:	3301      	adds	r3, #1
   19300:	9302      	str	r3, [sp, #8]
   19302:	e7ef      	b.n	192e4 <z_vprintk+0x1a>
			switch (*fmt) {
   19304:	2864      	cmp	r0, #100	; 0x64
   19306:	d06d      	beq.n	193e4 <z_vprintk+0x11a>
   19308:	d819      	bhi.n	1933e <z_vprintk+0x74>
   1930a:	2839      	cmp	r0, #57	; 0x39
   1930c:	d80a      	bhi.n	19324 <z_vprintk+0x5a>
   1930e:	2831      	cmp	r0, #49	; 0x31
   19310:	d25f      	bcs.n	193d2 <z_vprintk+0x108>
   19312:	282d      	cmp	r0, #45	; 0x2d
   19314:	f000 8141 	beq.w	1959a <z_vprintk+0x2d0>
   19318:	2830      	cmp	r0, #48	; 0x30
   1931a:	d04b      	beq.n	193b4 <z_vprintk+0xea>
   1931c:	2825      	cmp	r0, #37	; 0x25
   1931e:	d107      	bne.n	19330 <z_vprintk+0x66>
				out((int)'%', ctx);
   19320:	4639      	mov	r1, r7
   19322:	e132      	b.n	1958a <z_vprintk+0x2c0>
			switch (*fmt) {
   19324:	2858      	cmp	r0, #88	; 0x58
   19326:	f000 80bb 	beq.w	194a0 <z_vprintk+0x1d6>
   1932a:	2863      	cmp	r0, #99	; 0x63
   1932c:	f000 812a 	beq.w	19584 <z_vprintk+0x2ba>
				out((int)'%', ctx);
   19330:	4639      	mov	r1, r7
   19332:	2025      	movs	r0, #37	; 0x25
   19334:	47b0      	blx	r6
				out((int)*fmt, ctx);
   19336:	9b02      	ldr	r3, [sp, #8]
   19338:	4639      	mov	r1, r7
   1933a:	7818      	ldrb	r0, [r3, #0]
   1933c:	e125      	b.n	1958a <z_vprintk+0x2c0>
			switch (*fmt) {
   1933e:	2870      	cmp	r0, #112	; 0x70
   19340:	f000 80a4 	beq.w	1948c <z_vprintk+0x1c2>
   19344:	d811      	bhi.n	1936a <z_vprintk+0xa0>
   19346:	2869      	cmp	r0, #105	; 0x69
   19348:	d04c      	beq.n	193e4 <z_vprintk+0x11a>
   1934a:	286c      	cmp	r0, #108	; 0x6c
   1934c:	d105      	bne.n	1935a <z_vprintk+0x90>
				} else if (*fmt == 'l' && length_mod == 'l') {
   1934e:	f1b8 0f6c 	cmp.w	r8, #108	; 0x6c
   19352:	d12a      	bne.n	193aa <z_vprintk+0xe0>
					length_mod = 'L';
   19354:	f04f 084c 	mov.w	r8, #76	; 0x4c
   19358:	e7d0      	b.n	192fc <z_vprintk+0x32>
			switch (*fmt) {
   1935a:	2868      	cmp	r0, #104	; 0x68
   1935c:	d1e8      	bne.n	19330 <z_vprintk+0x66>
				if (*fmt == 'h' && length_mod == 'h') {
   1935e:	f1b8 0f68 	cmp.w	r8, #104	; 0x68
   19362:	d122      	bne.n	193aa <z_vprintk+0xe0>
					length_mod = 'H';
   19364:	f04f 0848 	mov.w	r8, #72	; 0x48
   19368:	e7c8      	b.n	192fc <z_vprintk+0x32>
			switch (*fmt) {
   1936a:	2875      	cmp	r0, #117	; 0x75
   1936c:	d072      	beq.n	19454 <z_vprintk+0x18a>
   1936e:	d818      	bhi.n	193a2 <z_vprintk+0xd8>
   19370:	2873      	cmp	r0, #115	; 0x73
   19372:	d1dd      	bne.n	19330 <z_vprintk+0x66>
				char *s = va_arg(ap, char *);
   19374:	f854 5b04 	ldr.w	r5, [r4], #4
				while (*s) {
   19378:	46ab      	mov	fp, r5
   1937a:	465b      	mov	r3, fp
   1937c:	f81b 0b01 	ldrb.w	r0, [fp], #1
   19380:	2800      	cmp	r0, #0
   19382:	f040 80fc 	bne.w	1957e <z_vprintk+0x2b4>
				if (padding == PAD_SPACE_AFTER) {
   19386:	f1b9 0f03 	cmp.w	r9, #3
   1938a:	f040 810c 	bne.w	195a6 <z_vprintk+0x2dc>
					int remaining = min_width - (s - start);
   1938e:	1b5d      	subs	r5, r3, r5
   19390:	ebaa 0505 	sub.w	r5, sl, r5
					while (remaining-- > 0) {
   19394:	2d00      	cmp	r5, #0
   19396:	dd49      	ble.n	1942c <z_vprintk+0x162>
						out(' ', ctx);
   19398:	4639      	mov	r1, r7
   1939a:	2020      	movs	r0, #32
   1939c:	47b0      	blx	r6
   1939e:	3d01      	subs	r5, #1
   193a0:	e7f8      	b.n	19394 <z_vprintk+0xca>
			switch (*fmt) {
   193a2:	2878      	cmp	r0, #120	; 0x78
   193a4:	d07c      	beq.n	194a0 <z_vprintk+0x1d6>
   193a6:	287a      	cmp	r0, #122	; 0x7a
   193a8:	d1c2      	bne.n	19330 <z_vprintk+0x66>
				} else if (length_mod == 0) {
   193aa:	f1b8 0f00 	cmp.w	r8, #0
   193ae:	d1bf      	bne.n	19330 <z_vprintk+0x66>
   193b0:	4680      	mov	r8, r0
   193b2:	e7a3      	b.n	192fc <z_vprintk+0x32>
				if (min_width < 0 && padding == PAD_NONE) {
   193b4:	f1ba 0f00 	cmp.w	sl, #0
   193b8:	da0e      	bge.n	193d8 <z_vprintk+0x10e>
   193ba:	f1b9 0f00 	cmp.w	r9, #0
   193be:	f000 80ef 	beq.w	195a0 <z_vprintk+0x2d6>
					min_width = *fmt - '0';
   193c2:	f1a0 0a30 	sub.w	sl, r0, #48	; 0x30
					padding = PAD_SPACE_BEFORE;
   193c6:	f1b9 0f00 	cmp.w	r9, #0
   193ca:	bf08      	it	eq
   193cc:	f04f 0902 	moveq.w	r9, #2
   193d0:	e794      	b.n	192fc <z_vprintk+0x32>
				if (min_width < 0) {
   193d2:	f1ba 0f00 	cmp.w	sl, #0
   193d6:	dbf4      	blt.n	193c2 <z_vprintk+0xf8>
					min_width = 10 * min_width + *fmt - '0';
   193d8:	230a      	movs	r3, #10
   193da:	fb03 0a0a 	mla	sl, r3, sl, r0
   193de:	f1aa 0a30 	sub.w	sl, sl, #48	; 0x30
   193e2:	e7f0      	b.n	193c6 <z_vprintk+0xfc>
				if (length_mod == 'z') {
   193e4:	f1b8 0f7a 	cmp.w	r8, #122	; 0x7a
   193e8:	d102      	bne.n	193f0 <z_vprintk+0x126>
					d = va_arg(ap, int);
   193ea:	f854 5b04 	ldr.w	r5, [r4], #4
   193ee:	e020      	b.n	19432 <z_vprintk+0x168>
				} else if (length_mod == 'l') {
   193f0:	f1b8 0f6c 	cmp.w	r8, #108	; 0x6c
   193f4:	d0f9      	beq.n	193ea <z_vprintk+0x120>
				} else if (length_mod == 'L') {
   193f6:	f1b8 0f4c 	cmp.w	r8, #76	; 0x4c
   193fa:	d1f6      	bne.n	193ea <z_vprintk+0x120>
					long long lld = va_arg(ap, long long);
   193fc:	3407      	adds	r4, #7
   193fe:	f024 0407 	bic.w	r4, r4, #7
   19402:	e8f4 2302 	ldrd	r2, r3, [r4], #8
					if (lld > __LONG_MAX__ ||
   19406:	f112 4100 	adds.w	r1, r2, #2147483648	; 0x80000000
   1940a:	9106      	str	r1, [sp, #24]
   1940c:	f143 0100 	adc.w	r1, r3, #0
   19410:	9107      	str	r1, [sp, #28]
   19412:	2100      	movs	r1, #0
   19414:	e9dd bc06 	ldrd	fp, ip, [sp, #24]
   19418:	f04f 30ff 	mov.w	r0, #4294967295
   1941c:	4561      	cmp	r1, ip
   1941e:	bf08      	it	eq
   19420:	4558      	cmpeq	r0, fp
   19422:	d205      	bcs.n	19430 <z_vprintk+0x166>
						print_err(out, ctx);
   19424:	4639      	mov	r1, r7
   19426:	4630      	mov	r0, r6
   19428:	f7ff ff41 	bl	192ae <print_err>
			might_format = 0;
   1942c:	2500      	movs	r5, #0
				break;
   1942e:	e765      	b.n	192fc <z_vprintk+0x32>
					d = lld;
   19430:	4615      	mov	r5, r2
				if (d < 0) {
   19432:	2d00      	cmp	r5, #0
   19434:	da05      	bge.n	19442 <z_vprintk+0x178>
					out((int)'-', ctx);
   19436:	4639      	mov	r1, r7
   19438:	202d      	movs	r0, #45	; 0x2d
   1943a:	47b0      	blx	r6
					d = -d;
   1943c:	426d      	negs	r5, r5
					min_width--;
   1943e:	f10a 3aff 	add.w	sl, sl, #4294967295
				_printk_dec_ulong(out, ctx, d, padding,
   19442:	464b      	mov	r3, r9
   19444:	462a      	mov	r2, r5
   19446:	f8cd a000 	str.w	sl, [sp]
				_printk_dec_ulong(out, ctx, u, padding,
   1944a:	4639      	mov	r1, r7
   1944c:	4630      	mov	r0, r6
   1944e:	f7f3 f959 	bl	c704 <_printk_dec_ulong>
				break;
   19452:	e7eb      	b.n	1942c <z_vprintk+0x162>
				if (length_mod == 'z') {
   19454:	f1b8 0f7a 	cmp.w	r8, #122	; 0x7a
   19458:	d102      	bne.n	19460 <z_vprintk+0x196>
					u = va_arg(ap, unsigned int);
   1945a:	f854 2b04 	ldr.w	r2, [r4], #4
   1945e:	e011      	b.n	19484 <z_vprintk+0x1ba>
				} else if (length_mod == 'l') {
   19460:	f1b8 0f6c 	cmp.w	r8, #108	; 0x6c
   19464:	d0f9      	beq.n	1945a <z_vprintk+0x190>
				} else if (length_mod == 'L') {
   19466:	f1b8 0f4c 	cmp.w	r8, #76	; 0x4c
   1946a:	d1f6      	bne.n	1945a <z_vprintk+0x190>
					if (llu > ~0UL) {
   1946c:	2100      	movs	r1, #0
   1946e:	f04f 30ff 	mov.w	r0, #4294967295
					unsigned long long llu =
   19472:	3407      	adds	r4, #7
   19474:	f024 0407 	bic.w	r4, r4, #7
   19478:	e8f4 2302 	ldrd	r2, r3, [r4], #8
					if (llu > ~0UL) {
   1947c:	4299      	cmp	r1, r3
   1947e:	bf08      	it	eq
   19480:	4290      	cmpeq	r0, r2
   19482:	d3cf      	bcc.n	19424 <z_vprintk+0x15a>
				_printk_dec_ulong(out, ctx, u, padding,
   19484:	f8cd a000 	str.w	sl, [sp]
   19488:	464b      	mov	r3, r9
   1948a:	e7de      	b.n	1944a <z_vprintk+0x180>
				out('0', ctx);
   1948c:	4639      	mov	r1, r7
   1948e:	2030      	movs	r0, #48	; 0x30
   19490:	47b0      	blx	r6
				out('x', ctx);
   19492:	4639      	mov	r1, r7
   19494:	2078      	movs	r0, #120	; 0x78
   19496:	47b0      	blx	r6
					min_width = 8;
   19498:	f04f 0a08 	mov.w	sl, #8
				padding = PAD_ZERO_BEFORE;
   1949c:	f04f 0901 	mov.w	r9, #1
				if (*fmt == 'p') {
   194a0:	9b02      	ldr	r3, [sp, #8]
   194a2:	781b      	ldrb	r3, [r3, #0]
   194a4:	2b70      	cmp	r3, #112	; 0x70
   194a6:	d104      	bne.n	194b2 <z_vprintk+0x1e8>
					x = va_arg(ap, unsigned int);
   194a8:	f854 3b04 	ldr.w	r3, [r4], #4
   194ac:	9304      	str	r3, [sp, #16]
   194ae:	2300      	movs	r3, #0
   194b0:	e00d      	b.n	194ce <z_vprintk+0x204>
				} else if (length_mod == 'l') {
   194b2:	f1b8 0f6c 	cmp.w	r8, #108	; 0x6c
   194b6:	d0f7      	beq.n	194a8 <z_vprintk+0x1de>
				} else if (length_mod == 'L') {
   194b8:	f1b8 0f4c 	cmp.w	r8, #76	; 0x4c
   194bc:	d1f4      	bne.n	194a8 <z_vprintk+0x1de>
					x = va_arg(ap, unsigned long long);
   194be:	3407      	adds	r4, #7
   194c0:	f024 0307 	bic.w	r3, r4, #7
   194c4:	461c      	mov	r4, r3
   194c6:	f854 2b08 	ldr.w	r2, [r4], #8
   194ca:	685b      	ldr	r3, [r3, #4]
   194cc:	9204      	str	r2, [sp, #16]
	int digits = 0;
   194ce:	2100      	movs	r1, #0
	int remaining = 16; /* 16 digits max */
   194d0:	2210      	movs	r2, #16
	int shift = sizeof(num) * 8;
   194d2:	f04f 0b40 	mov.w	fp, #64	; 0x40
	int digits = 0;
   194d6:	9103      	str	r1, [sp, #12]
	int found_largest_digit = 0;
   194d8:	9105      	str	r1, [sp, #20]
		shift -= 4;
   194da:	f1ab 0b04 	sub.w	fp, fp, #4
		nibble = (num >> shift) & 0xf;
   194de:	9804      	ldr	r0, [sp, #16]
   194e0:	f1cb 0c20 	rsb	ip, fp, #32
   194e4:	f1ab 0120 	sub.w	r1, fp, #32
   194e8:	fa20 f00b 	lsr.w	r0, r0, fp
   194ec:	fa03 fc0c 	lsl.w	ip, r3, ip
   194f0:	ea40 000c 	orr.w	r0, r0, ip
   194f4:	fa23 f101 	lsr.w	r1, r3, r1
   194f8:	4308      	orrs	r0, r1
		if (nibble != 0 || found_largest_digit != 0 || shift == 0) {
   194fa:	f010 000f 	ands.w	r0, r0, #15
   194fe:	d106      	bne.n	1950e <z_vprintk+0x244>
   19500:	9905      	ldr	r1, [sp, #20]
   19502:	b911      	cbnz	r1, 1950a <z_vprintk+0x240>
   19504:	f1bb 0f00 	cmp.w	fp, #0
   19508:	d122      	bne.n	19550 <z_vprintk+0x286>
			nibble += nibble > 9 ? 87 : 48;
   1950a:	2130      	movs	r1, #48	; 0x30
   1950c:	e003      	b.n	19516 <z_vprintk+0x24c>
   1950e:	2809      	cmp	r0, #9
   19510:	bf8c      	ite	hi
   19512:	2157      	movhi	r1, #87	; 0x57
   19514:	2130      	movls	r1, #48	; 0x30
   19516:	4408      	add	r0, r1
			out((int)nibble, ctx);
   19518:	b240      	sxtb	r0, r0
   1951a:	4639      	mov	r1, r7
   1951c:	9308      	str	r3, [sp, #32]
   1951e:	9205      	str	r2, [sp, #20]
   19520:	47b0      	blx	r6
			digits++;
   19522:	9b03      	ldr	r3, [sp, #12]
	while (shift >= 4) {
   19524:	9a05      	ldr	r2, [sp, #20]
			digits++;
   19526:	3301      	adds	r3, #1
   19528:	9303      	str	r3, [sp, #12]
	while (shift >= 4) {
   1952a:	9b08      	ldr	r3, [sp, #32]
   1952c:	f1bb 0f00 	cmp.w	fp, #0
   19530:	d123      	bne.n	1957a <z_vprintk+0x2b0>
	if (padding == PAD_SPACE_AFTER) {
   19532:	f1b9 0f03 	cmp.w	r9, #3
   19536:	f47f af79 	bne.w	1942c <z_vprintk+0x162>
		remaining = min_width * 2 - digits;
   1953a:	9b03      	ldr	r3, [sp, #12]
   1953c:	ebc3 054a 	rsb	r5, r3, sl, lsl #1
		while (remaining-- > 0) {
   19540:	2d00      	cmp	r5, #0
   19542:	f77f af73 	ble.w	1942c <z_vprintk+0x162>
			out(' ', ctx);
   19546:	4639      	mov	r1, r7
   19548:	2020      	movs	r0, #32
   1954a:	47b0      	blx	r6
   1954c:	3d01      	subs	r5, #1
   1954e:	e7f7      	b.n	19540 <z_vprintk+0x276>
		if (remaining-- <= min_width) {
   19550:	1e51      	subs	r1, r2, #1
   19552:	4592      	cmp	sl, r2
   19554:	9108      	str	r1, [sp, #32]
   19556:	db07      	blt.n	19568 <z_vprintk+0x29e>
			if (padding == PAD_ZERO_BEFORE) {
   19558:	f1b9 0f01 	cmp.w	r9, #1
   1955c:	d106      	bne.n	1956c <z_vprintk+0x2a2>
				out('0', ctx);
   1955e:	4639      	mov	r1, r7
   19560:	2030      	movs	r0, #48	; 0x30
   19562:	9309      	str	r3, [sp, #36]	; 0x24
				out(' ', ctx);
   19564:	47b0      	blx	r6
   19566:	9b09      	ldr	r3, [sp, #36]	; 0x24
			nibble += nibble > 9 ? 87 : 48;
   19568:	9a08      	ldr	r2, [sp, #32]
   1956a:	e7b6      	b.n	194da <z_vprintk+0x210>
			} else if (padding == PAD_SPACE_BEFORE) {
   1956c:	f1b9 0f02 	cmp.w	r9, #2
   19570:	d1fa      	bne.n	19568 <z_vprintk+0x29e>
   19572:	9309      	str	r3, [sp, #36]	; 0x24
				out(' ', ctx);
   19574:	4639      	mov	r1, r7
   19576:	2020      	movs	r0, #32
   19578:	e7f4      	b.n	19564 <z_vprintk+0x29a>
			found_largest_digit = 1;
   1957a:	9505      	str	r5, [sp, #20]
   1957c:	e7ad      	b.n	194da <z_vprintk+0x210>
					out((int)(*s++), ctx);
   1957e:	4639      	mov	r1, r7
   19580:	47b0      	blx	r6
   19582:	e6fa      	b.n	1937a <z_vprintk+0xb0>
				out(c, ctx);
   19584:	4639      	mov	r1, r7
   19586:	f854 0b04 	ldr.w	r0, [r4], #4
				out((int)'%', ctx);
   1958a:	47b0      	blx	r6
   1958c:	e74e      	b.n	1942c <z_vprintk+0x162>
				length_mod = 0;
   1958e:	46a8      	mov	r8, r5
				padding = PAD_NONE;
   19590:	46a9      	mov	r9, r5
				min_width = -1;
   19592:	f04f 3aff 	mov.w	sl, #4294967295
				might_format = 1;
   19596:	2501      	movs	r5, #1
   19598:	e6b0      	b.n	192fc <z_vprintk+0x32>
				padding = PAD_SPACE_AFTER;
   1959a:	f04f 0903 	mov.w	r9, #3
   1959e:	e6ad      	b.n	192fc <z_vprintk+0x32>
					padding = PAD_ZERO_BEFORE;
   195a0:	f04f 0901 	mov.w	r9, #1
   195a4:	e6aa      	b.n	192fc <z_vprintk+0x32>
			might_format = 0;
   195a6:	4605      	mov	r5, r0
   195a8:	e6a8      	b.n	192fc <z_vprintk+0x32>

000195aa <printk>:
{
   195aa:	b40f      	push	{r0, r1, r2, r3}
   195ac:	b507      	push	{r0, r1, r2, lr}
   195ae:	a904      	add	r1, sp, #16
   195b0:	f851 0b04 	ldr.w	r0, [r1], #4
	va_start(ap, fmt);
   195b4:	9101      	str	r1, [sp, #4]
		vprintk(fmt, ap);
   195b6:	f7f3 f8f1 	bl	c79c <vprintk>
}
   195ba:	b003      	add	sp, #12
   195bc:	f85d eb04 	ldr.w	lr, [sp], #4
   195c0:	b004      	add	sp, #16
   195c2:	4770      	bx	lr

000195c4 <z_thread_entry>:
 * This routine does not return, and is marked as such so the compiler won't
 * generate preamble code that is only used by functions that actually return.
 */
FUNC_NORETURN void z_thread_entry(k_thread_entry_t entry,
				 void *p1, void *p2, void *p3)
{
   195c4:	4604      	mov	r4, r0
   195c6:	b508      	push	{r3, lr}
   195c8:	4608      	mov	r0, r1
   195ca:	4611      	mov	r1, r2
	entry(p1, p2, p3);
   195cc:	461a      	mov	r2, r3
   195ce:	47a0      	blx	r4
	return z_impl_k_current_get();
   195d0:	f7ff f88e 	bl	186f0 <z_impl_k_current_get>
	z_impl_k_thread_abort(thread);
   195d4:	f7f3 ff08 	bl	d3e8 <z_impl_k_thread_abort>

000195d8 <assert_post_action>:
	if (_is_user_context()) {
		k_oops();
	}
#endif

	k_panic();
   195d8:	4040      	eors	r0, r0
   195da:	f380 8811 	msr	BASEPRI, r0
   195de:	f04f 0004 	mov.w	r0, #4
   195e2:	df02      	svc	2
}
   195e4:	4770      	bx	lr

000195e6 <_ConfigAbsSyms>:
GEN_ABSOLUTE_SYM(CONFIG_OUTPUT_DISASSEMBLY, 1);
GEN_ABSOLUTE_SYM(CONFIG_OUTPUT_PRINT_MEMORY_USAGE, 1);
GEN_ABSOLUTE_SYM(CONFIG_BUILD_OUTPUT_BIN, 1);
GEN_ABSOLUTE_SYM(CONFIG_COMPAT_INCLUDES, 1);

GEN_ABS_SYM_END
   195e6:	4770      	bx	lr

000195e8 <z_platform_init>:
	nrfx_coredep_delay_us(time_us);
}

void z_platform_init(void)
{
	SystemInit();
   195e8:	f7fd bef4 	b.w	173d4 <SystemInit>

000195ec <clkstarted_handle>:
{
   195ec:	b538      	push	{r3, r4, r5, lr}
	sub_data->started = true;
   195ee:	240c      	movs	r4, #12
	struct nrf_clock_control_sub_data *sub_data = get_sub_data(dev, type);
   195f0:	6883      	ldr	r3, [r0, #8]
{
   195f2:	4605      	mov	r5, r0
	sub_data->started = true;
   195f4:	fb04 3401 	mla	r4, r4, r1, r3
   195f8:	2301      	movs	r3, #1
   195fa:	7263      	strb	r3, [r4, #9]
	__asm__ volatile(
   195fc:	f04f 0320 	mov.w	r3, #32
   19600:	f3ef 8111 	mrs	r1, BASEPRI
   19604:	f383 8811 	msr	BASEPRI, r3
   19608:	f3bf 8f6f 	isb	sy
Z_GENLIST_IS_EMPTY(slist)
   1960c:	6823      	ldr	r3, [r4, #0]
Z_GENLIST_GET(slist, snode)
   1960e:	b12b      	cbz	r3, 1961c <clkstarted_handle+0x30>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   19610:	6860      	ldr	r0, [r4, #4]
   19612:	681a      	ldr	r2, [r3, #0]
   19614:	4283      	cmp	r3, r0
	list->head = node;
   19616:	6022      	str	r2, [r4, #0]
	list->tail = node;
   19618:	bf08      	it	eq
   1961a:	6062      	streq	r2, [r4, #4]
	__asm__ volatile(
   1961c:	f381 8811 	msr	BASEPRI, r1
   19620:	f3bf 8f6f 	isb	sy
	while ((async_data = list_get(&sub_data->list)) != NULL) {
   19624:	b903      	cbnz	r3, 19628 <clkstarted_handle+0x3c>
}
   19626:	bd38      	pop	{r3, r4, r5, pc}
		async_data->cb(dev, async_data->user_data);
   19628:	e9d3 2101 	ldrd	r2, r1, [r3, #4]
   1962c:	4628      	mov	r0, r5
   1962e:	4790      	blx	r2
   19630:	e7e4      	b.n	195fc <clkstarted_handle+0x10>

00019632 <clock_start>:
	return clock_async_start(dev, sub_system, NULL);
   19632:	2200      	movs	r2, #0
   19634:	f7f3 b938 	b.w	c8a8 <clock_async_start>

00019638 <z_clock_idle_exit>:
{
}

void __weak z_clock_idle_exit(void)
{
}
   19638:	4770      	bx	lr

0001963a <z_irq_spurious>:
	z_arm_reserved();
   1963a:	f7f3 bc61 	b.w	cf00 <z_arm_bus_fault>

0001963e <z_arm_fatal_error>:
{

	if (esf != NULL) {
		esf_dump(esf);
	}
	z_fatal_error(reason, esf);
   1963e:	f7fd bf21 	b.w	17484 <z_fatal_error>

00019642 <z_do_kernel_oops>:
 *   fault handler will executed insted of the SVC.
 *
 * @param esf exception frame
 */
void z_do_kernel_oops(const z_arch_esf_t *esf)
{
   19642:	4601      	mov	r1, r0
	z_fatal_error(reason, esf);
   19644:	6800      	ldr	r0, [r0, #0]
   19646:	f7fd bf1d 	b.w	17484 <z_fatal_error>

0001964a <z_arm_nmi>:
 *
 * @return N/A
 */

void z_arm_nmi(void)
{
   1964a:	b508      	push	{r3, lr}
	handler();
   1964c:	f7f3 fc62 	bl	cf14 <z_SysNmiOnReset>
	z_arm_exc_exit();
}
   19650:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_arm_exc_exit();
   19654:	f7f3 bbd2 	b.w	cdfc <z_arm_exc_exit>

00019658 <z_arm_configure_dynamic_mpu_regions>:
 *
 * For some MPU architectures, such as the unmodified ARMv8-M MPU,
 * the function must execute with MPU enabled.
 */
void z_arm_configure_dynamic_mpu_regions(struct k_thread *thread)
{
   19658:	b507      	push	{r0, r1, r2, lr}

	region_num++;
#endif /* CONFIG_MPU_STACK_GUARD */

	/* Configure the dynamic MPU regions */
	arm_core_mpu_configure_dynamic_mpu_regions(
   1965a:	2100      	movs	r1, #0
   1965c:	a801      	add	r0, sp, #4
   1965e:	f7f4 f8d9 	bl	d814 <arm_core_mpu_configure_dynamic_mpu_regions>
		(const struct k_mem_partition **)dynamic_regions,
		region_num);
}
   19662:	b003      	add	sp, #12
   19664:	f85d fb04 	ldr.w	pc, [sp], #4

00019668 <mpu_configure_region>:
{
   19668:	b530      	push	{r4, r5, lr}
	region_conf.base = new_region->start;
   1966a:	680b      	ldr	r3, [r1, #0]
{
   1966c:	b085      	sub	sp, #20
	get_region_attr_from_k_mem_partition_info(&region_conf.attr,
   1966e:	684c      	ldr	r4, [r1, #4]
	p_attr->rbar = attr->rbar &
   19670:	f89d 2008 	ldrb.w	r2, [sp, #8]
   19674:	890d      	ldrh	r5, [r1, #8]
	p_attr->r_limit = REGION_LIMIT_ADDR(base, size);
   19676:	3c01      	subs	r4, #1
	region_conf.base = new_region->start;
   19678:	9300      	str	r3, [sp, #0]
	p_attr->mair_idx = attr->mair_idx;
   1967a:	8949      	ldrh	r1, [r1, #10]
	p_attr->r_limit = REGION_LIMIT_ADDR(base, size);
   1967c:	f023 031f 	bic.w	r3, r3, #31
   19680:	4423      	add	r3, r4
	p_attr->rbar = attr->rbar &
   19682:	f365 0204 	bfi	r2, r5, #0, #5
	p_attr->mair_idx = attr->mair_idx;
   19686:	f361 1247 	bfi	r2, r1, #5, #3
	p_attr->r_limit = REGION_LIMIT_ADDR(base, size);
   1968a:	f023 031f 	bic.w	r3, r3, #31
	if (index > (get_num_regions() - 1)) {
   1968e:	280f      	cmp	r0, #15
	p_attr->mair_idx = attr->mair_idx;
   19690:	f88d 2008 	strb.w	r2, [sp, #8]
	p_attr->r_limit = REGION_LIMIT_ADDR(base, size);
   19694:	9303      	str	r3, [sp, #12]
   19696:	4604      	mov	r4, r0
   19698:	d805      	bhi.n	196a6 <mpu_configure_region+0x3e>
	region_init(index, region_conf);
   1969a:	4669      	mov	r1, sp
   1969c:	f7f3 ff0c 	bl	d4b8 <region_init>
}
   196a0:	4620      	mov	r0, r4
   196a2:	b005      	add	sp, #20
   196a4:	bd30      	pop	{r4, r5, pc}
		return -EINVAL;
   196a6:	f06f 0415 	mvn.w	r4, #21
	return region_allocate_and_init(index,
   196aa:	e7f9      	b.n	196a0 <mpu_configure_region+0x38>

000196ac <arm_cmse_mpu_region_get>:
__CMSE_TT_ASM ()

__extension__ static __inline __attribute__ ((__always_inline__))
cmse_address_info_t
cmse_TT (void *__p)
__CMSE_TT_ASM ()
   196ac:	e840 f300 	tt	r3, r0

int arm_cmse_mpu_region_get(u32_t addr)
{
	cmse_address_info_t addr_info =	cmse_TT((void *)addr);

	if (addr_info.flags.mpu_region_valid) {
   196b0:	f413 3f80 	tst.w	r3, #65536	; 0x10000
   196b4:	b2d8      	uxtb	r0, r3
		return addr_info.flags.mpu_region;
	}

	return -EINVAL;
}
   196b6:	bf08      	it	eq
   196b8:	f06f 0015 	mvneq.w	r0, #21
   196bc:	4770      	bx	lr

000196be <atoi>:

#include <stdlib.h>
#include <ctype.h>

int atoi(const char *s)
{
   196be:	b530      	push	{r4, r5, lr}
	int n = 0;
	int neg = 0;

	while (isspace(*s)) {
   196c0:	7802      	ldrb	r2, [r0, #0]
   196c2:	4603      	mov	r3, r0
	return (int)(c == (int)' ' || ((unsigned)c-(unsigned)'\t') < 5U);
   196c4:	2a20      	cmp	r2, #32
   196c6:	f100 0001 	add.w	r0, r0, #1
   196ca:	d0f9      	beq.n	196c0 <atoi+0x2>
   196cc:	f1a2 0109 	sub.w	r1, r2, #9
   196d0:	2904      	cmp	r1, #4
   196d2:	d9f5      	bls.n	196c0 <atoi+0x2>
		s++;
	}
	switch (*s) {
   196d4:	2a2b      	cmp	r2, #43	; 0x2b
   196d6:	d008      	beq.n	196ea <atoi+0x2c>
	case '-':
		neg = 1;
		s++;
   196d8:	2a2d      	cmp	r2, #45	; 0x2d
   196da:	bf0a      	itet	eq
   196dc:	4603      	moveq	r3, r0
   196de:	2100      	movne	r1, #0
   196e0:	2101      	moveq	r1, #1
   196e2:	3b01      	subs	r3, #1
	int neg = 0;
   196e4:	2000      	movs	r0, #0
	case '+':
		s++;
	}
	/* Compute n as a negative number to avoid overflow on INT_MIN */
	while (isdigit(*s)) {
		n = 10*n - (*s++ - '0');
   196e6:	250a      	movs	r5, #10
   196e8:	e006      	b.n	196f8 <atoi+0x3a>
		s++;
   196ea:	4603      	mov	r3, r0
	int neg = 0;
   196ec:	2100      	movs	r1, #0
   196ee:	e7f8      	b.n	196e2 <atoi+0x24>
		n = 10*n - (*s++ - '0');
   196f0:	f1c2 0230 	rsb	r2, r2, #48	; 0x30
   196f4:	fb05 2000 	mla	r0, r5, r0, r2
	while (isdigit(*s)) {
   196f8:	f813 2f01 	ldrb.w	r2, [r3, #1]!
	return (int)(((unsigned)(a)-(unsigned)'0') < 10U);
   196fc:	f1a2 0430 	sub.w	r4, r2, #48	; 0x30
   19700:	2c09      	cmp	r4, #9
   19702:	d9f5      	bls.n	196f0 <atoi+0x32>
	}
	return neg ? n : -n;
   19704:	b901      	cbnz	r1, 19708 <atoi+0x4a>
   19706:	4240      	negs	r0, r0
}
   19708:	bd30      	pop	{r4, r5, pc}

0001970a <strtol>:
 *
 * Ignores `locale' stuff.  Assumes that the upper and lower case
 * alphabets and digits are each contiguous.
 */
long strtol(const char *nptr, char **endptr, register int base)
{
   1970a:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1970e:	4684      	mov	ip, r0
   19710:	460f      	mov	r7, r1
	register const char *s = nptr;
   19712:	4605      	mov	r5, r0
	 * Skip white space and pick up leading +/- sign if any.
	 * If base is 0, allow 0x for hex and 0 for octal, else
	 * assume decimal; if base is already 16, allow 0x.
	 */
	do {
		c = *s++;
   19714:	462c      	mov	r4, r5
   19716:	f814 3b01 	ldrb.w	r3, [r4], #1
	return (int)(c == (int)' ' || ((unsigned)c-(unsigned)'\t') < 5U);
   1971a:	2b20      	cmp	r3, #32
   1971c:	d036      	beq.n	1978c <strtol+0x82>
   1971e:	f1a3 0109 	sub.w	r1, r3, #9
   19722:	2904      	cmp	r1, #4
   19724:	d932      	bls.n	1978c <strtol+0x82>
	} while (isspace(c));
	if (c == '-') {
   19726:	2b2d      	cmp	r3, #45	; 0x2d
   19728:	d132      	bne.n	19790 <strtol+0x86>
		neg = 1;
   1972a:	2101      	movs	r1, #1
		c = *s++;
   1972c:	786b      	ldrb	r3, [r5, #1]
   1972e:	1cac      	adds	r4, r5, #2
	} else if (c == '+') {
		c = *s++;
	}

	if ((base == 0 || base == 16) &&
   19730:	2a00      	cmp	r2, #0
   19732:	d05c      	beq.n	197ee <strtol+0xe4>
   19734:	2a10      	cmp	r2, #16
   19736:	d109      	bne.n	1974c <strtol+0x42>
   19738:	2b30      	cmp	r3, #48	; 0x30
   1973a:	d107      	bne.n	1974c <strtol+0x42>
	    c == '0' && (*s == 'x' || *s == 'X')) {
   1973c:	7823      	ldrb	r3, [r4, #0]
   1973e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   19742:	2b58      	cmp	r3, #88	; 0x58
   19744:	d14e      	bne.n	197e4 <strtol+0xda>
		c = s[1];
		s += 2;
		base = 16;
   19746:	2210      	movs	r2, #16
		c = s[1];
   19748:	7863      	ldrb	r3, [r4, #1]
		s += 2;
   1974a:	3402      	adds	r4, #2
	 * the number is too big, and we will return a range error.
	 *
	 * Set any if any `digits' consumed; make it negative to indicate
	 * overflow.
	 */
	cutoff = neg ? -(unsigned long)LONG_MIN : LONG_MAX;
   1974c:	2900      	cmp	r1, #0
   1974e:	bf14      	ite	ne
   19750:	f04f 4800 	movne.w	r8, #2147483648	; 0x80000000
   19754:	f06f 4800 	mvneq.w	r8, #2147483648	; 0x80000000
	cutlim = cutoff % (unsigned long)base;
	cutoff /= (unsigned long)base;
	for (acc = 0, any = 0;; c = *s++) {
   19758:	2600      	movs	r6, #0
	cutlim = cutoff % (unsigned long)base;
   1975a:	fbb8 fef2 	udiv	lr, r8, r2
	for (acc = 0, any = 0;; c = *s++) {
   1975e:	4630      	mov	r0, r6
	cutlim = cutoff % (unsigned long)base;
   19760:	fb02 891e 	mls	r9, r2, lr, r8
	return (int)(((unsigned)(a)-(unsigned)'0') < 10U);
   19764:	f1a3 0530 	sub.w	r5, r3, #48	; 0x30
		if (isdigit(c)) {
   19768:	2d09      	cmp	r5, #9
   1976a:	d817      	bhi.n	1979c <strtol+0x92>
			c -= '0';
   1976c:	462b      	mov	r3, r5
		} else if (isalpha(c)) {
			c -= isupper(c) ? 'A' - 10 : 'a' - 10;
		} else {
			break;
		}
		if (c >= base) {
   1976e:	429a      	cmp	r2, r3
   19770:	dd24      	ble.n	197bc <strtol+0xb2>
			break;
		}
		if (any < 0 || acc > cutoff || (acc == cutoff && c > cutlim)) {
   19772:	1c75      	adds	r5, r6, #1
   19774:	d007      	beq.n	19786 <strtol+0x7c>
   19776:	4570      	cmp	r0, lr
   19778:	d81d      	bhi.n	197b6 <strtol+0xac>
   1977a:	d101      	bne.n	19780 <strtol+0x76>
   1977c:	454b      	cmp	r3, r9
   1977e:	dc1a      	bgt.n	197b6 <strtol+0xac>
			any = -1;
		} else {
			any = 1;
   19780:	2601      	movs	r6, #1
			acc *= base;
			acc += c;
   19782:	fb00 3002 	mla	r0, r0, r2, r3
	for (acc = 0, any = 0;; c = *s++) {
   19786:	f814 3b01 	ldrb.w	r3, [r4], #1
		if (isdigit(c)) {
   1978a:	e7eb      	b.n	19764 <strtol+0x5a>
{
   1978c:	4625      	mov	r5, r4
   1978e:	e7c1      	b.n	19714 <strtol+0xa>
	} else if (c == '+') {
   19790:	2b2b      	cmp	r3, #43	; 0x2b
		c = *s++;
   19792:	bf04      	itt	eq
   19794:	1cac      	addeq	r4, r5, #2
   19796:	786b      	ldrbeq	r3, [r5, #1]
	register int neg = 0, any, cutlim;
   19798:	2100      	movs	r1, #0
   1979a:	e7c9      	b.n	19730 <strtol+0x26>
	return (int)((((unsigned)c|32u)-(unsigned)'a') < 26U);
   1979c:	f043 0520 	orr.w	r5, r3, #32
   197a0:	3d61      	subs	r5, #97	; 0x61
		} else if (isalpha(c)) {
   197a2:	2d19      	cmp	r5, #25
   197a4:	d80a      	bhi.n	197bc <strtol+0xb2>
	return (int)(((unsigned)(a)-(unsigned)'A') < 26U);
   197a6:	f1a3 0541 	sub.w	r5, r3, #65	; 0x41
			c -= isupper(c) ? 'A' - 10 : 'a' - 10;
   197aa:	2d1a      	cmp	r5, #26
   197ac:	bf34      	ite	cc
   197ae:	2537      	movcc	r5, #55	; 0x37
   197b0:	2557      	movcs	r5, #87	; 0x57
   197b2:	1b5b      	subs	r3, r3, r5
   197b4:	e7db      	b.n	1976e <strtol+0x64>
			any = -1;
   197b6:	f04f 36ff 	mov.w	r6, #4294967295
   197ba:	e7e4      	b.n	19786 <strtol+0x7c>
		}
	}

	if (any < 0) {
   197bc:	1c73      	adds	r3, r6, #1
   197be:	d107      	bne.n	197d0 <strtol+0xc6>
	if (z_syscall_trap()) {
		return (int *) arch_syscall_invoke0(K_SYSCALL_Z_ERRNO);
	}
#endif
	compiler_barrier();
	return z_impl_z_errno();
   197c0:	f7fd fe5a 	bl	17478 <z_impl_z_errno>
		acc = neg ? LONG_MIN : LONG_MAX;
		errno = ERANGE;
   197c4:	2326      	movs	r3, #38	; 0x26
   197c6:	6003      	str	r3, [r0, #0]
		acc = neg ? LONG_MIN : LONG_MAX;
   197c8:	4640      	mov	r0, r8
	} else if (neg) {
		acc = -acc;
	}

	if (endptr != NULL) {
   197ca:	b937      	cbnz	r7, 197da <strtol+0xd0>
		*endptr = (char *)(any ? s - 1 : nptr);
	}
	return acc;
}
   197cc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	} else if (neg) {
   197d0:	b101      	cbz	r1, 197d4 <strtol+0xca>
		acc = -acc;
   197d2:	4240      	negs	r0, r0
	if (endptr != NULL) {
   197d4:	2f00      	cmp	r7, #0
   197d6:	d0f9      	beq.n	197cc <strtol+0xc2>
		*endptr = (char *)(any ? s - 1 : nptr);
   197d8:	b10e      	cbz	r6, 197de <strtol+0xd4>
   197da:	f104 3cff 	add.w	ip, r4, #4294967295
   197de:	f8c7 c000 	str.w	ip, [r7]
	return acc;
   197e2:	e7f3      	b.n	197cc <strtol+0xc2>
	if (base == 0) {
   197e4:	2330      	movs	r3, #48	; 0x30
   197e6:	2a00      	cmp	r2, #0
   197e8:	d1b0      	bne.n	1974c <strtol+0x42>
		base = c == '0' ? 8 : 10;
   197ea:	2208      	movs	r2, #8
   197ec:	e7ae      	b.n	1974c <strtol+0x42>
	if ((base == 0 || base == 16) &&
   197ee:	2b30      	cmp	r3, #48	; 0x30
   197f0:	d0a4      	beq.n	1973c <strtol+0x32>
		base = c == '0' ? 8 : 10;
   197f2:	220a      	movs	r2, #10
   197f4:	e7aa      	b.n	1974c <strtol+0x42>

000197f6 <strstr>:
/*
 * Find the first occurrence of find in s.
 */
char *
strstr(const char *s, const char *find)
{
   197f6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	char c, sc;
	size_t len;

	c = *find++;
   197fa:	780f      	ldrb	r7, [r1, #0]
{
   197fc:	4605      	mov	r5, r0
	if (c != 0) {
   197fe:	b187      	cbz	r7, 19822 <strstr+0x2c>
	c = *find++;
   19800:	1c4c      	adds	r4, r1, #1
		len = strlen(find);
   19802:	4620      	mov	r0, r4
   19804:	f000 f822 	bl	1984c <strlen>
   19808:	4680      	mov	r8, r0
		do {
			do {
				sc = *s++;
   1980a:	462e      	mov	r6, r5
   1980c:	f816 3b01 	ldrb.w	r3, [r6], #1
				if (sc == 0) {
   19810:	b163      	cbz	r3, 1982c <strstr+0x36>
					return NULL;
				}
			} while (sc != c);
   19812:	429f      	cmp	r7, r3
   19814:	d108      	bne.n	19828 <strstr+0x32>
		} while (strncmp(s, find, len) != 0);
   19816:	4642      	mov	r2, r8
   19818:	4621      	mov	r1, r4
   1981a:	4630      	mov	r0, r6
   1981c:	f000 f829 	bl	19872 <strncmp>
   19820:	b910      	cbnz	r0, 19828 <strstr+0x32>
	s--;
	}
	return (char *)s;
}
   19822:	4628      	mov	r0, r5
   19824:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
{
   19828:	4635      	mov	r5, r6
   1982a:	e7ee      	b.n	1980a <strstr+0x14>
					return NULL;
   1982c:	461d      	mov	r5, r3
   1982e:	e7f8      	b.n	19822 <strstr+0x2c>

00019830 <strchr>:
 * @return pointer to 1st instance of found byte, or NULL if not found
 */

char *strchr(const char *s, int c)
{
	char tmp = (char) c;
   19830:	b2c9      	uxtb	r1, r1

	while ((*s != tmp) && (*s != '\0')) {
   19832:	7802      	ldrb	r2, [r0, #0]
   19834:	4603      	mov	r3, r0
   19836:	428a      	cmp	r2, r1
   19838:	f100 0001 	add.w	r0, r0, #1
   1983c:	d004      	beq.n	19848 <strchr+0x18>
   1983e:	2a00      	cmp	r2, #0
   19840:	d1f7      	bne.n	19832 <strchr+0x2>
		s++;
	}

	return (*s == tmp) ? (char *) s : NULL;
   19842:	2900      	cmp	r1, #0
   19844:	bf18      	it	ne
   19846:	2300      	movne	r3, #0
}
   19848:	4618      	mov	r0, r3
   1984a:	4770      	bx	lr

0001984c <strlen>:
 * @return number of bytes in string <s>
 */

size_t strlen(const char *s)
{
	size_t n = 0;
   1984c:	2300      	movs	r3, #0

	while (*s != '\0') {
   1984e:	5cc2      	ldrb	r2, [r0, r3]
   19850:	b90a      	cbnz	r2, 19856 <strlen+0xa>
		s++;
		n++;
	}

	return n;
}
   19852:	4618      	mov	r0, r3
   19854:	4770      	bx	lr
		n++;
   19856:	3301      	adds	r3, #1
   19858:	e7f9      	b.n	1984e <strlen+0x2>

0001985a <strcmp>:
 * @return negative # if <s1> < <s2>, 0 if <s1> == <s2>, else positive #
 */

int strcmp(const char *s1, const char *s2)
{
	while ((*s1 == *s2) && (*s1 != '\0')) {
   1985a:	3801      	subs	r0, #1
   1985c:	3901      	subs	r1, #1
   1985e:	f810 3f01 	ldrb.w	r3, [r0, #1]!
   19862:	f811 2f01 	ldrb.w	r2, [r1, #1]!
   19866:	4293      	cmp	r3, r2
   19868:	d101      	bne.n	1986e <strcmp+0x14>
   1986a:	2b00      	cmp	r3, #0
   1986c:	d1f7      	bne.n	1985e <strcmp+0x4>
		s1++;
		s2++;
	}

	return *s1 - *s2;
}
   1986e:	1a98      	subs	r0, r3, r2
   19870:	4770      	bx	lr

00019872 <strncmp>:
 *
 * @return negative # if <s1> < <s2>, 0 if <s1> == <s2>, else positive #
 */

int strncmp(const char *s1, const char *s2, size_t n)
{
   19872:	b530      	push	{r4, r5, lr}
	while ((n > 0) && (*s1 == *s2) && (*s1 != '\0')) {
   19874:	2400      	movs	r4, #0
   19876:	42a2      	cmp	r2, r4
   19878:	d008      	beq.n	1988c <strncmp+0x1a>
   1987a:	5d03      	ldrb	r3, [r0, r4]
   1987c:	5d0d      	ldrb	r5, [r1, r4]
   1987e:	42ab      	cmp	r3, r5
   19880:	d102      	bne.n	19888 <strncmp+0x16>
   19882:	3401      	adds	r4, #1
   19884:	2b00      	cmp	r3, #0
   19886:	d1f6      	bne.n	19876 <strncmp+0x4>
		s1++;
		s2++;
		n--;
	}

	return (n == 0) ? 0 : (*s1 - *s2);
   19888:	1b58      	subs	r0, r3, r5
   1988a:	e000      	b.n	1988e <strncmp+0x1c>
   1988c:	2000      	movs	r0, #0
}
   1988e:	bd30      	pop	{r4, r5, pc}

00019890 <memcmp>:
 * @brief Compare two memory areas
 *
 * @return negative # if <m1> < <m2>, 0 if <m1> == <m2>, else positive #
 */
int memcmp(const void *m1, const void *m2, size_t n)
{
   19890:	b510      	push	{r4, lr}
	const char *c1 = m1;
	const char *c2 = m2;

	if (!n) {
   19892:	b15a      	cbz	r2, 198ac <memcmp+0x1c>
   19894:	3901      	subs	r1, #1
   19896:	1884      	adds	r4, r0, r2
   19898:	f810 2b01 	ldrb.w	r2, [r0], #1
   1989c:	f811 3f01 	ldrb.w	r3, [r1, #1]!
		return 0;
	}

	while ((--n > 0) && (*c1 == *c2)) {
   198a0:	42a0      	cmp	r0, r4
   198a2:	d001      	beq.n	198a8 <memcmp+0x18>
   198a4:	429a      	cmp	r2, r3
   198a6:	d0f7      	beq.n	19898 <memcmp+0x8>
		c1++;
		c2++;
	}

	return *c1 - *c2;
   198a8:	1ad0      	subs	r0, r2, r3
}
   198aa:	bd10      	pop	{r4, pc}
		return 0;
   198ac:	4610      	mov	r0, r2
   198ae:	e7fc      	b.n	198aa <memcmp+0x1a>

000198b0 <memcpy>:
 *
 * @return pointer to start of destination buffer
 */

void *memcpy(void *_MLIBC_RESTRICT d, const void *_MLIBC_RESTRICT s, size_t n)
{
   198b0:	b5f0      	push	{r4, r5, r6, r7, lr}

	unsigned char *d_byte = (unsigned char *)d;
	const unsigned char *s_byte = (const unsigned char *)s;
	const uintptr_t mask = sizeof(mem_word_t) - 1;

	if ((((uintptr_t)d ^ (uintptr_t)s_byte) & mask) == 0) {
   198b2:	ea81 0400 	eor.w	r4, r1, r0
   198b6:	07a5      	lsls	r5, r4, #30
   198b8:	4603      	mov	r3, r0
   198ba:	d00b      	beq.n	198d4 <memcpy+0x24>
   198bc:	3b01      	subs	r3, #1
   198be:	440a      	add	r2, r1
		s_byte = (unsigned char *)s_word;
	}

	/* do byte-sized copying until finished */

	while (n > 0) {
   198c0:	4291      	cmp	r1, r2
   198c2:	d11a      	bne.n	198fa <memcpy+0x4a>
		*(d_byte++) = *(s_byte++);
		n--;
	}

	return d;
}
   198c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
			if (n == 0) {
   198c6:	2a00      	cmp	r2, #0
   198c8:	d0fc      	beq.n	198c4 <memcpy+0x14>
			*(d_byte++) = *(s_byte++);
   198ca:	f811 4b01 	ldrb.w	r4, [r1], #1
			n--;
   198ce:	3a01      	subs	r2, #1
			*(d_byte++) = *(s_byte++);
   198d0:	f803 4b01 	strb.w	r4, [r3], #1
		while (((uintptr_t)d_byte) & mask) {
   198d4:	079c      	lsls	r4, r3, #30
   198d6:	d1f6      	bne.n	198c6 <memcpy+0x16>
   198d8:	0895      	lsrs	r5, r2, #2
   198da:	00ac      	lsls	r4, r5, #2
   198dc:	1f1e      	subs	r6, r3, #4
   198de:	190f      	adds	r7, r1, r4
		while (n >= sizeof(mem_word_t)) {
   198e0:	42b9      	cmp	r1, r7
   198e2:	d105      	bne.n	198f0 <memcpy+0x40>
   198e4:	f06f 0603 	mvn.w	r6, #3
   198e8:	4423      	add	r3, r4
   198ea:	fb06 2205 	mla	r2, r6, r5, r2
   198ee:	e7e5      	b.n	198bc <memcpy+0xc>
			*(d_word++) = *(s_word++);
   198f0:	f851 cb04 	ldr.w	ip, [r1], #4
   198f4:	f846 cf04 	str.w	ip, [r6, #4]!
			n -= sizeof(mem_word_t);
   198f8:	e7f2      	b.n	198e0 <memcpy+0x30>
		*(d_byte++) = *(s_byte++);
   198fa:	f811 4b01 	ldrb.w	r4, [r1], #1
   198fe:	f803 4f01 	strb.w	r4, [r3, #1]!
		n--;
   19902:	e7dd      	b.n	198c0 <memcpy+0x10>

00019904 <memset>:

void *memset(void *buf, int c, size_t n)
{
	/* do byte-sized initialization until word-aligned or finished */

	unsigned char *d_byte = (unsigned char *)buf;
   19904:	4603      	mov	r3, r0
{
   19906:	b570      	push	{r4, r5, r6, lr}
	unsigned char c_byte = (unsigned char)c;
   19908:	b2c9      	uxtb	r1, r1

	while (((uintptr_t)d_byte) & (sizeof(mem_word_t) - 1)) {
   1990a:	079c      	lsls	r4, r3, #30
   1990c:	d110      	bne.n	19930 <memset+0x2c>
	/* do word-sized initialization as long as possible */

	mem_word_t *d_word = (mem_word_t *)d_byte;
	mem_word_t c_word = (mem_word_t)c_byte;

	c_word |= c_word << 8;
   1990e:	ea41 2401 	orr.w	r4, r1, r1, lsl #8
	c_word |= c_word << 16;
   19912:	ea44 4504 	orr.w	r5, r4, r4, lsl #16
#if Z_MEM_WORD_T_WIDTH > 32
	c_word |= c_word << 32;
#endif

	while (n >= sizeof(mem_word_t)) {
   19916:	0894      	lsrs	r4, r2, #2
   19918:	eb03 0684 	add.w	r6, r3, r4, lsl #2
   1991c:	42b3      	cmp	r3, r6
   1991e:	d10d      	bne.n	1993c <memset+0x38>
   19920:	f06f 0503 	mvn.w	r5, #3
   19924:	fb05 2404 	mla	r4, r5, r4, r2
   19928:	441c      	add	r4, r3

	/* do byte-sized initialization until finished */

	d_byte = (unsigned char *)d_word;

	while (n > 0) {
   1992a:	42a3      	cmp	r3, r4
   1992c:	d109      	bne.n	19942 <memset+0x3e>
		*(d_byte++) = c_byte;
		n--;
	}

	return buf;
}
   1992e:	bd70      	pop	{r4, r5, r6, pc}
		if (n == 0) {
   19930:	2a00      	cmp	r2, #0
   19932:	d0fc      	beq.n	1992e <memset+0x2a>
		*(d_byte++) = c_byte;
   19934:	f803 1b01 	strb.w	r1, [r3], #1
		n--;
   19938:	3a01      	subs	r2, #1
   1993a:	e7e6      	b.n	1990a <memset+0x6>
		*(d_word++) = c_word;
   1993c:	f843 5b04 	str.w	r5, [r3], #4
		n -= sizeof(mem_word_t);
   19940:	e7ec      	b.n	1991c <memset+0x18>
		*(d_byte++) = c_byte;
   19942:	f803 1b01 	strb.w	r1, [r3], #1
		n--;
   19946:	e7f0      	b.n	1992a <memset+0x26>

00019948 <_to_x>:
{
   19948:	4603      	mov	r3, r0
   1994a:	b5f0      	push	{r4, r5, r6, r7, lr}
		unsigned int d = n % base;
   1994c:	fbb1 f7f2 	udiv	r7, r1, r2
   19950:	fb02 1517 	mls	r5, r2, r7, r1
		*buf++ = '0' + d + (d > 9 ? ('a' - '0' - 10) : 0);
   19954:	2d09      	cmp	r5, #9
   19956:	bf8c      	ite	hi
   19958:	2627      	movhi	r6, #39	; 0x27
   1995a:	2600      	movls	r6, #0
   1995c:	461c      	mov	r4, r3
   1995e:	3530      	adds	r5, #48	; 0x30
   19960:	4435      	add	r5, r6
	} while (n);
   19962:	4291      	cmp	r1, r2
		*buf++ = '0' + d + (d > 9 ? ('a' - '0' - 10) : 0);
   19964:	f804 5b01 	strb.w	r5, [r4], #1
	} while (n);
   19968:	d206      	bcs.n	19978 <_to_x+0x30>
	*buf = 0;
   1996a:	2200      	movs	r2, #0
   1996c:	7022      	strb	r2, [r4, #0]
	len = buf - start;
   1996e:	1a24      	subs	r4, r4, r0
	for (buf--; buf > start; buf--, start++) {
   19970:	4283      	cmp	r3, r0
   19972:	d804      	bhi.n	1997e <_to_x+0x36>
}
   19974:	4620      	mov	r0, r4
   19976:	bdf0      	pop	{r4, r5, r6, r7, pc}
		n /= base;
   19978:	4639      	mov	r1, r7
   1997a:	4623      	mov	r3, r4
   1997c:	e7e6      	b.n	1994c <_to_x+0x4>
		char tmp = *buf;
   1997e:	781a      	ldrb	r2, [r3, #0]
		*buf = *start;
   19980:	7801      	ldrb	r1, [r0, #0]
   19982:	f803 1901 	strb.w	r1, [r3], #-1
		*start = tmp;
   19986:	f800 2b01 	strb.w	r2, [r0], #1
   1998a:	e7f1      	b.n	19970 <_to_x+0x28>

0001998c <_rlrshift>:
	*v = (*v & 1) + (*v >> 1);
   1998c:	2100      	movs	r1, #0
{
   1998e:	b570      	push	{r4, r5, r6, lr}
	*v = (*v & 1) + (*v >> 1);
   19990:	e9d0 6500 	ldrd	r6, r5, [r0]
   19994:	0872      	lsrs	r2, r6, #1
   19996:	f006 0301 	and.w	r3, r6, #1
   1999a:	ea42 72c5 	orr.w	r2, r2, r5, lsl #31
   1999e:	189b      	adds	r3, r3, r2
   199a0:	ea4f 0455 	mov.w	r4, r5, lsr #1
   199a4:	eb44 0101 	adc.w	r1, r4, r1
   199a8:	e9c0 3100 	strd	r3, r1, [r0]
}
   199ac:	bd70      	pop	{r4, r5, r6, pc}

000199ae <_ldiv5>:
{
   199ae:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	uint64_t rem = *v, quot = 0U, q;
   199b2:	e9d0 3200 	ldrd	r3, r2, [r0]
		q = (uint64_t)(hi / 5U) << shifts[i];
   199b6:	2705      	movs	r7, #5
	rem += 2U;
   199b8:	3302      	adds	r3, #2
   199ba:	f142 0200 	adc.w	r2, r2, #0
		q = (uint64_t)(hi / 5U) << shifts[i];
   199be:	fbb2 fef7 	udiv	lr, r2, r7
   199c2:	f04f 0c00 	mov.w	ip, #0
		rem -= q * 5U;
   199c6:	fb07 f10e 	mul.w	r1, r7, lr
   199ca:	ebb3 060c 	subs.w	r6, r3, ip
   199ce:	eb62 0101 	sbc.w	r1, r2, r1
		hi = rem >> shifts[i];
   199d2:	08f2      	lsrs	r2, r6, #3
   199d4:	ea42 7241 	orr.w	r2, r2, r1, lsl #29
		q = (uint64_t)(hi / 5U) << shifts[i];
   199d8:	fbb2 f1f7 	udiv	r1, r2, r7
   199dc:	00ca      	lsls	r2, r1, #3
		quot += q;
   199de:	eb1c 0802 	adds.w	r8, ip, r2
		q = (uint64_t)(hi / 5U) << shifts[i];
   199e2:	ea4f 7351 	mov.w	r3, r1, lsr #29
		quot += q;
   199e6:	eb4e 0903 	adc.w	r9, lr, r3
		rem -= q * 5U;
   199ea:	fba2 2307 	umull	r2, r3, r2, r7
   199ee:	1ab3      	subs	r3, r6, r2
		q = (uint64_t)(hi / 5U) << shifts[i];
   199f0:	fbb3 f3f7 	udiv	r3, r3, r7
		quot += q;
   199f4:	eb18 0403 	adds.w	r4, r8, r3
   199f8:	f149 0500 	adc.w	r5, r9, #0
	*v = quot;
   199fc:	e9c0 4500 	strd	r4, r5, [r0]
}
   19a00:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

00019a04 <_get_digit>:
	if (*digit_count > 0) {
   19a04:	680b      	ldr	r3, [r1, #0]
{
   19a06:	b570      	push	{r4, r5, r6, lr}
	if (*digit_count > 0) {
   19a08:	2b00      	cmp	r3, #0
   19a0a:	dd10      	ble.n	19a2e <_get_digit+0x2a>
		*digit_count -= 1;
   19a0c:	3b01      	subs	r3, #1
   19a0e:	600b      	str	r3, [r1, #0]
		*fr = *fr * 10U;
   19a10:	210a      	movs	r1, #10
   19a12:	6802      	ldr	r2, [r0, #0]
   19a14:	6844      	ldr	r4, [r0, #4]
   19a16:	fba2 5601 	umull	r5, r6, r2, r1
   19a1a:	fb01 6604 	mla	r6, r1, r4, r6
		*fr &= 0x0FFFFFFFFFFFFFFFull;
   19a1e:	f026 4370 	bic.w	r3, r6, #4026531840	; 0xf0000000
   19a22:	e9c0 5300 	strd	r5, r3, [r0]
		rval = ((*fr >> 60) & 0xF) + '0';
   19a26:	0f31      	lsrs	r1, r6, #28
   19a28:	3130      	adds	r1, #48	; 0x30
}
   19a2a:	4608      	mov	r0, r1
   19a2c:	bd70      	pop	{r4, r5, r6, pc}
		rval = '0';
   19a2e:	2130      	movs	r1, #48	; 0x30
   19a30:	e7fb      	b.n	19a2a <_get_digit+0x26>

00019a32 <sprintf_out>:
	if (p->len > 1) { /* need to reserve a byte for EOS */
   19a32:	684b      	ldr	r3, [r1, #4]
   19a34:	2b01      	cmp	r3, #1
   19a36:	dd07      	ble.n	19a48 <sprintf_out+0x16>
		*(p->ptr) = c;
   19a38:	680b      	ldr	r3, [r1, #0]
   19a3a:	7018      	strb	r0, [r3, #0]
		p->ptr += 1;
   19a3c:	680b      	ldr	r3, [r1, #0]
   19a3e:	3301      	adds	r3, #1
   19a40:	600b      	str	r3, [r1, #0]
		p->len -= 1;
   19a42:	684b      	ldr	r3, [r1, #4]
   19a44:	3b01      	subs	r3, #1
   19a46:	604b      	str	r3, [r1, #4]
}
   19a48:	2000      	movs	r0, #0
   19a4a:	4770      	bx	lr

00019a4c <net_init>:

	return status;
}

static int net_init(struct device *unused)
{
   19a4c:	b508      	push	{r3, lr}
	net_if_init();
   19a4e:	f7f4 fc7d 	bl	e34c <net_if_init>
	net_if_post_init();
   19a52:	f7f4 fc8f 	bl	e374 <net_if_post_init>
	net_mgmt_event_init();

	init_rx_queues();

	return services_init();
}
   19a56:	2000      	movs	r0, #0
   19a58:	bd08      	pop	{r3, pc}

00019a5a <net_if_l2>:
	if (!iface || !iface->if_dev) {
   19a5a:	b110      	cbz	r0, 19a62 <net_if_l2+0x8>
   19a5c:	6800      	ldr	r0, [r0, #0]
   19a5e:	b100      	cbz	r0, 19a62 <net_if_l2+0x8>
	return iface->if_dev->l2;
   19a60:	6840      	ldr	r0, [r0, #4]
}
   19a62:	4770      	bx	lr

00019a64 <l2_flags_get>:
{
   19a64:	b510      	push	{r4, lr}
   19a66:	4602      	mov	r2, r0
	if (net_if_l2(iface) && net_if_l2(iface)->get_flags) {
   19a68:	f7ff fff7 	bl	19a5a <net_if_l2>
   19a6c:	b128      	cbz	r0, 19a7a <l2_flags_get+0x16>
   19a6e:	68c3      	ldr	r3, [r0, #12]
   19a70:	b11b      	cbz	r3, 19a7a <l2_flags_get+0x16>
}
   19a72:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		flags = net_if_l2(iface)->get_flags(iface);
   19a76:	4610      	mov	r0, r2
   19a78:	4718      	bx	r3
}
   19a7a:	2000      	movs	r0, #0
   19a7c:	bd10      	pop	{r4, pc}

00019a7e <gpio_nrfx_write>:
{
   19a7e:	b510      	push	{r4, lr}
	return port->config->config_info;
   19a80:	6804      	ldr	r4, [r0, #0]
   19a82:	6880      	ldr	r0, [r0, #8]
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   19a84:	68a4      	ldr	r4, [r4, #8]
	if (access_op == GPIO_ACCESS_BY_PORT) {
   19a86:	2901      	cmp	r1, #1
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   19a88:	6824      	ldr	r4, [r4, #0]
	if (access_op == GPIO_ACCESS_BY_PORT) {
   19a8a:	69c0      	ldr	r0, [r0, #28]
   19a8c:	d103      	bne.n	19a96 <gpio_nrfx_write+0x18>
		nrf_gpio_port_out_write(reg, value ^ data->inverted);
   19a8e:	4058      	eors	r0, r3
}


NRF_STATIC_INLINE void nrf_gpio_port_out_write(NRF_GPIO_Type * p_reg, uint32_t value)
{
    p_reg->OUT = value;
   19a90:	6060      	str	r0, [r4, #4]
}
   19a92:	2000      	movs	r0, #0
   19a94:	bd10      	pop	{r4, pc}
		if ((value > 0) ^ ((BIT(pin) & data->inverted) != 0)) {
   19a96:	3300      	adds	r3, #0
   19a98:	f04f 0101 	mov.w	r1, #1
   19a9c:	bf18      	it	ne
   19a9e:	2301      	movne	r3, #1
   19aa0:	40d0      	lsrs	r0, r2
   19aa2:	f000 0001 	and.w	r0, r0, #1
   19aa6:	4091      	lsls	r1, r2
   19aa8:	4283      	cmp	r3, r0
}


NRF_STATIC_INLINE void nrf_gpio_port_out_set(NRF_GPIO_Type * p_reg, uint32_t set_mask)
{
    p_reg->OUTSET = set_mask;
   19aaa:	bf14      	ite	ne
   19aac:	60a1      	strne	r1, [r4, #8]
}


NRF_STATIC_INLINE void nrf_gpio_port_out_clear(NRF_GPIO_Type * p_reg, uint32_t clr_mask)
{
    p_reg->OUTCLR = clr_mask;
   19aae:	60e1      	streq	r1, [r4, #12]
   19ab0:	e7ef      	b.n	19a92 <gpio_nrfx_write+0x14>

00019ab2 <gpio_nrfx_read>:
{
   19ab2:	b570      	push	{r4, r5, r6, lr}
	return port->config->config_info;
   19ab4:	6804      	ldr	r4, [r0, #0]
	u32_t port_val = (port_in | port_out) ^ data->inverted;
   19ab6:	6880      	ldr	r0, [r0, #8]
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   19ab8:	68a4      	ldr	r4, [r4, #8]
	u32_t port_val = (port_in | port_out) ^ data->inverted;
   19aba:	69c0      	ldr	r0, [r0, #28]
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   19abc:	6825      	ldr	r5, [r4, #0]
	if (access_op == GPIO_ACCESS_BY_PORT) {
   19abe:	2901      	cmp	r1, #1
    return p_reg->DIR;
   19ac0:	696e      	ldr	r6, [r5, #20]
    return p_reg->IN;
   19ac2:	692c      	ldr	r4, [r5, #16]
    return p_reg->OUT;
   19ac4:	686d      	ldr	r5, [r5, #4]
	u32_t port_val = (port_in | port_out) ^ data->inverted;
   19ac6:	ea80 0004 	eor.w	r0, r0, r4
   19aca:	ea84 0405 	eor.w	r4, r4, r5
   19ace:	ea04 0406 	and.w	r4, r4, r6
   19ad2:	ea80 0004 	eor.w	r0, r0, r4
		*value = (port_val & BIT(pin)) ? 1 : 0;
   19ad6:	bf1c      	itt	ne
   19ad8:	40d0      	lsrne	r0, r2
   19ada:	f000 0001 	andne.w	r0, r0, #1
   19ade:	6018      	str	r0, [r3, #0]
}
   19ae0:	2000      	movs	r0, #0
   19ae2:	bd70      	pop	{r4, r5, r6, pc}

00019ae4 <gpio_nrfx_pin_disable_callback>:
	if (access_op == GPIO_ACCESS_BY_PORT) {
   19ae4:	2901      	cmp	r1, #1
{
   19ae6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
		from_pin = pin;
   19aea:	bf18      	it	ne
   19aec:	b2d4      	uxtbne	r4, r2
{
   19aee:	4606      	mov	r6, r0
		to_pin   = pin;
   19af0:	bf12      	itee	ne
   19af2:	4625      	movne	r5, r4
		to_pin   = 31U;
   19af4:	251f      	moveq	r5, #31
		from_pin = 0U;
   19af6:	2400      	moveq	r4, #0
		WRITE_BIT(data->int_en, curr_pin, enable);
   19af8:	f04f 0801 	mov.w	r8, #1
	struct gpio_nrfx_data *data = get_port_data(port);
   19afc:	6887      	ldr	r7, [r0, #8]
	for (u8_t curr_pin = from_pin; curr_pin <= to_pin; ++curr_pin) {
   19afe:	42ac      	cmp	r4, r5
   19b00:	d902      	bls.n	19b08 <gpio_nrfx_pin_disable_callback+0x24>
	return res;
   19b02:	2000      	movs	r0, #0
}
   19b04:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		WRITE_BIT(data->int_en, curr_pin, enable);
   19b08:	68fb      	ldr	r3, [r7, #12]
   19b0a:	fa08 f204 	lsl.w	r2, r8, r4
   19b0e:	ea23 0302 	bic.w	r3, r3, r2
   19b12:	60fb      	str	r3, [r7, #12]
		res = gpiote_pin_int_cfg(port, curr_pin);
   19b14:	4621      	mov	r1, r4
   19b16:	4630      	mov	r0, r6
   19b18:	f7f4 fcda 	bl	e4d0 <gpiote_pin_int_cfg>
		if (res != 0) {
   19b1c:	2800      	cmp	r0, #0
   19b1e:	d1f1      	bne.n	19b04 <gpio_nrfx_pin_disable_callback+0x20>
	for (u8_t curr_pin = from_pin; curr_pin <= to_pin; ++curr_pin) {
   19b20:	3401      	adds	r4, #1
   19b22:	b2e4      	uxtb	r4, r4
   19b24:	e7eb      	b.n	19afe <gpio_nrfx_pin_disable_callback+0x1a>

00019b26 <gpio_nrfx_pin_enable_callback>:
	if (access_op == GPIO_ACCESS_BY_PORT) {
   19b26:	2901      	cmp	r1, #1
{
   19b28:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
		from_pin = pin;
   19b2c:	bf18      	it	ne
   19b2e:	b2d4      	uxtbne	r4, r2
{
   19b30:	4606      	mov	r6, r0
		to_pin   = pin;
   19b32:	bf12      	itee	ne
   19b34:	4625      	movne	r5, r4
		to_pin   = 31U;
   19b36:	251f      	moveq	r5, #31
		from_pin = 0U;
   19b38:	2400      	moveq	r4, #0
		WRITE_BIT(data->int_en, curr_pin, enable);
   19b3a:	f04f 0801 	mov.w	r8, #1
	struct gpio_nrfx_data *data = get_port_data(port);
   19b3e:	6887      	ldr	r7, [r0, #8]
	for (u8_t curr_pin = from_pin; curr_pin <= to_pin; ++curr_pin) {
   19b40:	42ac      	cmp	r4, r5
   19b42:	d902      	bls.n	19b4a <gpio_nrfx_pin_enable_callback+0x24>
	return res;
   19b44:	2000      	movs	r0, #0
}
   19b46:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		WRITE_BIT(data->int_en, curr_pin, enable);
   19b4a:	68fb      	ldr	r3, [r7, #12]
   19b4c:	fa08 f204 	lsl.w	r2, r8, r4
   19b50:	4313      	orrs	r3, r2
   19b52:	60fb      	str	r3, [r7, #12]
		res = gpiote_pin_int_cfg(port, curr_pin);
   19b54:	4621      	mov	r1, r4
   19b56:	4630      	mov	r0, r6
   19b58:	f7f4 fcba 	bl	e4d0 <gpiote_pin_int_cfg>
		if (res != 0) {
   19b5c:	2800      	cmp	r0, #0
   19b5e:	d1f2      	bne.n	19b46 <gpio_nrfx_pin_enable_callback+0x20>
	for (u8_t curr_pin = from_pin; curr_pin <= to_pin; ++curr_pin) {
   19b60:	3401      	adds	r4, #1
   19b62:	b2e4      	uxtb	r4, r4
   19b64:	e7ec      	b.n	19b40 <gpio_nrfx_pin_enable_callback+0x1a>

00019b66 <entropy_cc310_rng_init>:
{
	/* No initialization is required */
	(void)dev;

	return 0;
}
   19b66:	2000      	movs	r0, #0
   19b68:	4770      	bx	lr

00019b6a <z_errno>:
   19b6a:	f7fd bc85 	b.w	17478 <z_impl_z_errno>

00019b6e <trace_proxy_irq_handler>:
ISR_DIRECT_DECLARE(trace_proxy_irq_handler)
   19b6e:	4668      	mov	r0, sp
   19b70:	f020 0107 	bic.w	r1, r0, #7
   19b74:	468d      	mov	sp, r1
   19b76:	b501      	push	{r0, lr}
	bsd_os_trace_irq_handler();
   19b78:	f7f7 fcda 	bl	11530 <bsd_os_trace_irq_handler>
	ISR_DIRECT_PM(); /* PM done after servicing interrupt for best latency
   19b7c:	f7f3 fa4a 	bl	d014 <_arch_isr_direct_pm>
   19b80:	f7f3 f93c 	bl	cdfc <z_arm_exc_exit>
ISR_DIRECT_DECLARE(trace_proxy_irq_handler)
   19b84:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
   19b88:	4685      	mov	sp, r0
   19b8a:	4770      	bx	lr

00019b8c <ipc_proxy_irq_handler>:
ISR_DIRECT_DECLARE(ipc_proxy_irq_handler)
   19b8c:	4668      	mov	r0, sp
   19b8e:	f020 0107 	bic.w	r1, r0, #7
   19b92:	468d      	mov	sp, r1
   19b94:	b501      	push	{r0, lr}
	IPC_IRQHandler();
   19b96:	f7f8 f8c3 	bl	11d20 <IPC_IRQHandler>
	ISR_DIRECT_PM(); /* PM done after servicing interrupt for best latency
   19b9a:	f7f3 fa3b 	bl	d014 <_arch_isr_direct_pm>
   19b9e:	f7f3 f92d 	bl	cdfc <z_arm_exc_exit>
ISR_DIRECT_DECLARE(ipc_proxy_irq_handler)
   19ba2:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
   19ba6:	4685      	mov	sp, r0
   19ba8:	4770      	bx	lr

00019baa <trace_task_create>:
{
   19baa:	b508      	push	{r3, lr}
	IRQ_DIRECT_CONNECT(TRACE_IRQ, TRACE_IRQ_PRIORITY,
   19bac:	201d      	movs	r0, #29
   19bae:	2200      	movs	r2, #0
   19bb0:	2106      	movs	r1, #6
   19bb2:	f7f3 f9fd 	bl	cfb0 <z_arm_irq_priority_set>
}
   19bb6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	irq_enable(TRACE_IRQ);
   19bba:	201d      	movs	r0, #29
   19bbc:	f7f3 b9e8 	b.w	cf90 <arch_irq_enable>

00019bc0 <read_task_create>:
{
   19bc0:	b508      	push	{r3, lr}
	IRQ_DIRECT_CONNECT(BSD_APPLICATION_IRQ, BSD_APPLICATION_IRQ_PRIORITY,
   19bc2:	201c      	movs	r0, #28
   19bc4:	2200      	movs	r2, #0
   19bc6:	2106      	movs	r1, #6
   19bc8:	f7f3 f9f2 	bl	cfb0 <z_arm_irq_priority_set>
}
   19bcc:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	irq_enable(BSD_APPLICATION_IRQ);
   19bd0:	201c      	movs	r0, #28
   19bd2:	f7f3 b9dd 	b.w	cf90 <arch_irq_enable>

00019bd6 <bsd_os_trace_put>:
		remaining_bytes -= transfer_len;
	}
#endif

	return 0;
}
   19bd6:	2000      	movs	r0, #0
   19bd8:	4770      	bx	lr

00019bda <z_to_nrf_flags>:
		nrf_flags |= NRF_MSG_DONTWAIT;
   19bda:	f010 0340 	ands.w	r3, r0, #64	; 0x40
   19bde:	bf18      	it	ne
   19be0:	2302      	movne	r3, #2
	if (z_flags & MSG_PEEK) {
   19be2:	0782      	lsls	r2, r0, #30
		nrf_flags |= NRF_MSG_PEEK;
   19be4:	bf48      	it	mi
   19be6:	f043 0308 	orrmi.w	r3, r3, #8
}
   19bea:	4618      	mov	r0, r3
   19bec:	4770      	bx	lr

00019bee <z_to_nrf_family>:
	switch (z_family) {
   19bee:	2803      	cmp	r0, #3
   19bf0:	d00f      	beq.n	19c12 <z_to_nrf_family+0x24>
   19bf2:	d808      	bhi.n	19c06 <z_to_nrf_family+0x18>
   19bf4:	2801      	cmp	r0, #1
   19bf6:	d00e      	beq.n	19c16 <z_to_nrf_family+0x28>
   19bf8:	2802      	cmp	r0, #2
		return -EAFNOSUPPORT;
   19bfa:	bf08      	it	eq
   19bfc:	200a      	moveq	r0, #10
   19bfe:	bf18      	it	ne
   19c00:	f06f 002e 	mvnne.w	r0, #46	; 0x2e
   19c04:	4770      	bx	lr
	switch (z_family) {
   19c06:	2866      	cmp	r0, #102	; 0x66
   19c08:	d006      	beq.n	19c18 <z_to_nrf_family+0x2a>
   19c0a:	2867      	cmp	r0, #103	; 0x67
		return -EAFNOSUPPORT;
   19c0c:	bf08      	it	eq
   19c0e:	2001      	moveq	r0, #1
   19c10:	e7f5      	b.n	19bfe <z_to_nrf_family+0x10>
		return NRF_AF_PACKET;
   19c12:	2005      	movs	r0, #5
   19c14:	4770      	bx	lr
		return NRF_AF_INET;
   19c16:	2002      	movs	r0, #2
}
   19c18:	4770      	bx	lr

00019c1a <z_to_nrf_protocol>:
	switch (proto) {
   19c1a:	f5b0 7f81 	cmp.w	r0, #258	; 0x102
   19c1e:	d01d      	beq.n	19c5c <z_to_nrf_protocol+0x42>
   19c20:	dc08      	bgt.n	19c34 <z_to_nrf_protocol+0x1a>
   19c22:	2806      	cmp	r0, #6
   19c24:	d01d      	beq.n	19c62 <z_to_nrf_protocol+0x48>
   19c26:	2811      	cmp	r0, #17
   19c28:	d01d      	beq.n	19c66 <z_to_nrf_protocol+0x4c>
   19c2a:	2800      	cmp	r0, #0
		return -EPROTONOSUPPORT;
   19c2c:	bf18      	it	ne
   19c2e:	f06f 002a 	mvnne.w	r0, #42	; 0x2a
   19c32:	4770      	bx	lr
	switch (proto) {
   19c34:	f240 2301 	movw	r3, #513	; 0x201
   19c38:	4298      	cmp	r0, r3
   19c3a:	d015      	beq.n	19c68 <z_to_nrf_protocol+0x4e>
   19c3c:	dc06      	bgt.n	19c4c <z_to_nrf_protocol+0x32>
   19c3e:	f240 1311 	movw	r3, #273	; 0x111
   19c42:	4298      	cmp	r0, r3
		return -EPROTONOSUPPORT;
   19c44:	bf08      	it	eq
   19c46:	f44f 7087 	moveq.w	r0, #270	; 0x10e
   19c4a:	e7ef      	b.n	19c2c <z_to_nrf_protocol+0x12>
	switch (proto) {
   19c4c:	f240 2302 	movw	r3, #514	; 0x202
   19c50:	4298      	cmp	r0, r3
   19c52:	d009      	beq.n	19c68 <z_to_nrf_protocol+0x4e>
   19c54:	f240 2303 	movw	r3, #515	; 0x203
   19c58:	4298      	cmp	r0, r3
   19c5a:	e7e7      	b.n	19c2c <z_to_nrf_protocol+0x12>
		return NRF_SPROTO_TLS1v2;
   19c5c:	f44f 7082 	mov.w	r0, #260	; 0x104
   19c60:	4770      	bx	lr
		return NRF_IPPROTO_TCP;
   19c62:	2001      	movs	r0, #1
   19c64:	4770      	bx	lr
		return NRF_IPPROTO_UDP;
   19c66:	2002      	movs	r0, #2
}
   19c68:	4770      	bx	lr

00019c6a <nrf91_bsdlib_socket_offload_init>:
}
   19c6a:	2000      	movs	r0, #0
   19c6c:	4770      	bx	lr

00019c6e <z_errno>:
   19c6e:	f7fd bc03 	b.w	17478 <z_impl_z_errno>

00019c72 <nrf91_socket_offload_freeaddrinfo>:
{
   19c72:	b538      	push	{r3, r4, r5, lr}
   19c74:	4604      	mov	r4, r0
	while (next != NULL) {
   19c76:	b904      	cbnz	r4, 19c7a <nrf91_socket_offload_freeaddrinfo+0x8>
}
   19c78:	bd38      	pop	{r3, r4, r5, pc}
		k_free(this->ai_addr);
   19c7a:	6960      	ldr	r0, [r4, #20]
		next = next->ai_next;
   19c7c:	69e5      	ldr	r5, [r4, #28]
		k_free(this->ai_addr);
   19c7e:	f000 fbba 	bl	1a3f6 <k_free>
		k_free(this);
   19c82:	4620      	mov	r0, r4
   19c84:	f000 fbb7 	bl	1a3f6 <k_free>
		next = next->ai_next;
   19c88:	462c      	mov	r4, r5
   19c8a:	e7f4      	b.n	19c76 <nrf91_socket_offload_freeaddrinfo+0x4>

00019c8c <z_to_nrf_addrinfo_hints>:
{
   19c8c:	b538      	push	{r3, r4, r5, lr}
   19c8e:	460c      	mov	r4, r1
   19c90:	4605      	mov	r5, r0
	memset(nrf_out, 0, sizeof(struct nrf_addrinfo));
   19c92:	2220      	movs	r2, #32
   19c94:	2100      	movs	r1, #0
   19c96:	4620      	mov	r0, r4
   19c98:	f7ff fe34 	bl	19904 <memset>
	nrf_out->ai_flags = z_to_nrf_addrinfo_flags(z_in->ai_flags);
   19c9c:	2300      	movs	r3, #0
   19c9e:	6023      	str	r3, [r4, #0]
	nrf_out->ai_socktype = z_to_nrf_socktype(z_in->ai_socktype);
   19ca0:	68ab      	ldr	r3, [r5, #8]
	switch (socktype) {
   19ca2:	2b03      	cmp	r3, #3
   19ca4:	d003      	beq.n	19cae <z_to_nrf_addrinfo_hints+0x22>
		return NRF_SOCK_MGMT;
   19ca6:	2b04      	cmp	r3, #4
   19ca8:	bf08      	it	eq
   19caa:	f44f 7300 	moveq.w	r3, #512	; 0x200
	nrf_out->ai_socktype = z_to_nrf_socktype(z_in->ai_socktype);
   19cae:	60a3      	str	r3, [r4, #8]
	family = z_to_nrf_family(z_in->ai_family);
   19cb0:	88a8      	ldrh	r0, [r5, #4]
   19cb2:	f7ff ff9c 	bl	19bee <z_to_nrf_family>
	if (family == -EAFNOSUPPORT) {
   19cb6:	f110 0f2f 	cmn.w	r0, #47	; 0x2f
   19cba:	d00b      	beq.n	19cd4 <z_to_nrf_addrinfo_hints+0x48>
	nrf_out->ai_family = family;
   19cbc:	6060      	str	r0, [r4, #4]
	nrf_out->ai_protocol = z_to_nrf_protocol(z_in->ai_protocol);
   19cbe:	68e8      	ldr	r0, [r5, #12]
   19cc0:	f7ff ffab 	bl	19c1a <z_to_nrf_protocol>
	if (nrf_out->ai_protocol == -EPROTONOSUPPORT) {
   19cc4:	f110 0f2b 	cmn.w	r0, #43	; 0x2b
	nrf_out->ai_protocol = z_to_nrf_protocol(z_in->ai_protocol);
   19cc8:	60e0      	str	r0, [r4, #12]
	if (nrf_out->ai_protocol == -EPROTONOSUPPORT) {
   19cca:	d003      	beq.n	19cd4 <z_to_nrf_addrinfo_hints+0x48>
	if (z_in->ai_canonname != NULL) {
   19ccc:	69a8      	ldr	r0, [r5, #24]
   19cce:	b108      	cbz	r0, 19cd4 <z_to_nrf_addrinfo_hints+0x48>
		nrf_out->ai_canonname = z_in->ai_canonname;
   19cd0:	61a0      	str	r0, [r4, #24]
	return 0;
   19cd2:	2000      	movs	r0, #0
}
   19cd4:	bd38      	pop	{r3, r4, r5, pc}

00019cd6 <nrf91_socket_offload_send>:
{
   19cd6:	b570      	push	{r4, r5, r6, lr}
   19cd8:	4604      	mov	r4, r0
	return nrf_send(sd, buf, len, z_to_nrf_flags(flags));
   19cda:	4618      	mov	r0, r3
{
   19cdc:	4615      	mov	r5, r2
	return nrf_send(sd, buf, len, z_to_nrf_flags(flags));
   19cde:	f7ff ff7c 	bl	19bda <z_to_nrf_flags>
   19ce2:	462a      	mov	r2, r5
   19ce4:	4603      	mov	r3, r0
   19ce6:	4620      	mov	r0, r4
}
   19ce8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return nrf_send(sd, buf, len, z_to_nrf_flags(flags));
   19cec:	f7f9 bd60 	b.w	137b0 <nrf_send>

00019cf0 <nrf91_socket_offload_recv>:
{
   19cf0:	b570      	push	{r4, r5, r6, lr}
   19cf2:	4604      	mov	r4, r0
	return nrf_recv(sd, buf, max_len, z_to_nrf_flags(flags));
   19cf4:	4618      	mov	r0, r3
{
   19cf6:	4615      	mov	r5, r2
	return nrf_recv(sd, buf, max_len, z_to_nrf_flags(flags));
   19cf8:	f7ff ff6f 	bl	19bda <z_to_nrf_flags>
   19cfc:	462a      	mov	r2, r5
   19cfe:	4603      	mov	r3, r0
   19d00:	4620      	mov	r0, r4
}
   19d02:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return nrf_recv(sd, buf, max_len, z_to_nrf_flags(flags));
   19d06:	f7f9 bd89 	b.w	1381c <nrf_recv>

00019d0a <nrf91_socket_offload_getsockopt>:
{
   19d0a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   19d0e:	461d      	mov	r5, r3
	struct nrf_timeval nrf_rcvtimeo = {0, 0};
   19d10:	2300      	movs	r3, #0
{
   19d12:	b086      	sub	sp, #24
   19d14:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
	struct nrf_timeval nrf_rcvtimeo = {0, 0};
   19d18:	e9cd 3304 	strd	r3, r3, [sp, #16]
	nrf_socklen_t nrf_optlen = (nrf_socklen_t)*optlen;
   19d1c:	f8d8 3000 	ldr.w	r3, [r8]
	switch (z_in_level) {
   19d20:	f5b1 7f8d 	cmp.w	r1, #282	; 0x11a
{
   19d24:	4607      	mov	r7, r0
   19d26:	460c      	mov	r4, r1
   19d28:	4616      	mov	r6, r2
	nrf_socklen_t nrf_optlen = (nrf_socklen_t)*optlen;
   19d2a:	9303      	str	r3, [sp, #12]
	switch (z_in_level) {
   19d2c:	d002      	beq.n	19d34 <nrf91_socket_offload_getsockopt+0x2a>
   19d2e:	dc2b      	bgt.n	19d88 <nrf91_socket_offload_getsockopt+0x7e>
   19d30:	2901      	cmp	r1, #1
   19d32:	d13d      	bne.n	19db0 <nrf91_socket_offload_getsockopt+0xa6>
	if (z_to_nrf_optname(level, optname, &nrf_optname) < 0)
   19d34:	aa02      	add	r2, sp, #8
   19d36:	4631      	mov	r1, r6
   19d38:	4620      	mov	r0, r4
   19d3a:	f7f4 ffc9 	bl	ecd0 <z_to_nrf_optname>
   19d3e:	2800      	cmp	r0, #0
   19d40:	db36      	blt.n	19db0 <nrf91_socket_offload_getsockopt+0xa6>
	if ((level == SOL_SOCKET) && (optname == SO_RCVTIMEO)) {
   19d42:	2c01      	cmp	r4, #1
   19d44:	d128      	bne.n	19d98 <nrf91_socket_offload_getsockopt+0x8e>
   19d46:	2e14      	cmp	r6, #20
   19d48:	d126      	bne.n	19d98 <nrf91_socket_offload_getsockopt+0x8e>
		nrf_optlen = sizeof(struct nrf_timeval);
   19d4a:	2308      	movs	r3, #8
   19d4c:	9303      	str	r3, [sp, #12]
		nrf_optval = &nrf_rcvtimeo;
   19d4e:	ab04      	add	r3, sp, #16
	retval = nrf_getsockopt(sd, nrf_level, nrf_optname, nrf_optval,
   19d50:	aa03      	add	r2, sp, #12
   19d52:	9200      	str	r2, [sp, #0]
   19d54:	4638      	mov	r0, r7
   19d56:	9a02      	ldr	r2, [sp, #8]
   19d58:	4621      	mov	r1, r4
   19d5a:	f7f9 fddf 	bl	1391c <nrf_getsockopt>
	if ((retval == 0) && (optval != NULL)) {
   19d5e:	4607      	mov	r7, r0
   19d60:	b970      	cbnz	r0, 19d80 <nrf91_socket_offload_getsockopt+0x76>
   19d62:	b16d      	cbz	r5, 19d80 <nrf91_socket_offload_getsockopt+0x76>
		*optlen = nrf_optlen;
   19d64:	9b03      	ldr	r3, [sp, #12]
		if (level == SOL_SOCKET) {
   19d66:	2c01      	cmp	r4, #1
		*optlen = nrf_optlen;
   19d68:	f8c8 3000 	str.w	r3, [r8]
		if (level == SOL_SOCKET) {
   19d6c:	d108      	bne.n	19d80 <nrf91_socket_offload_getsockopt+0x76>
			if (optname == SO_ERROR) {
   19d6e:	2e04      	cmp	r6, #4
   19d70:	d114      	bne.n	19d9c <nrf91_socket_offload_getsockopt+0x92>
				bsd_os_errno_set(*(int *)optval);
   19d72:	6828      	ldr	r0, [r5, #0]
   19d74:	f7f4 febc 	bl	eaf0 <bsd_os_errno_set>
				*(int *)optval = errno;
   19d78:	f7ff ff79 	bl	19c6e <z_errno>
   19d7c:	6803      	ldr	r3, [r0, #0]
   19d7e:	602b      	str	r3, [r5, #0]
}
   19d80:	4638      	mov	r0, r7
   19d82:	b006      	add	sp, #24
   19d84:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	switch (z_in_level) {
   19d88:	f240 2302 	movw	r3, #514	; 0x202
   19d8c:	4299      	cmp	r1, r3
   19d8e:	d0d1      	beq.n	19d34 <nrf91_socket_offload_getsockopt+0x2a>
   19d90:	f240 2303 	movw	r3, #515	; 0x203
   19d94:	4299      	cmp	r1, r3
   19d96:	e7cc      	b.n	19d32 <nrf91_socket_offload_getsockopt+0x28>
   19d98:	462b      	mov	r3, r5
   19d9a:	e7d9      	b.n	19d50 <nrf91_socket_offload_getsockopt+0x46>
			} else if (optname == SO_RCVTIMEO) {
   19d9c:	2e14      	cmp	r6, #20
   19d9e:	d1ef      	bne.n	19d80 <nrf91_socket_offload_getsockopt+0x76>
				((struct timeval *)optval)->tv_sec =
   19da0:	9b04      	ldr	r3, [sp, #16]
   19da2:	602b      	str	r3, [r5, #0]
				((struct timeval *)optval)->tv_usec =
   19da4:	9b05      	ldr	r3, [sp, #20]
   19da6:	606b      	str	r3, [r5, #4]
				*optlen = sizeof(struct timeval);
   19da8:	2308      	movs	r3, #8
   19daa:	f8c8 3000 	str.w	r3, [r8]
   19dae:	e7e7      	b.n	19d80 <nrf91_socket_offload_getsockopt+0x76>
	errno = ENOPROTOOPT;
   19db0:	f7ff ff5d 	bl	19c6e <z_errno>
   19db4:	232a      	movs	r3, #42	; 0x2a
	return retval;
   19db6:	f04f 37ff 	mov.w	r7, #4294967295
	errno = ENOPROTOOPT;
   19dba:	6003      	str	r3, [r0, #0]
	return retval;
   19dbc:	e7e0      	b.n	19d80 <nrf91_socket_offload_getsockopt+0x76>

00019dbe <nrf91_socket_offload_poll>:
{
   19dbe:	b5f0      	push	{r4, r5, r6, r7, lr}
   19dc0:	b091      	sub	sp, #68	; 0x44
   19dc2:	4605      	mov	r5, r0
   19dc4:	460c      	mov	r4, r1
   19dc6:	4616      	mov	r6, r2
	struct nrf_pollfd tmp[BSD_MAX_SOCKET_COUNT] = {0};
   19dc8:	2100      	movs	r1, #0
   19dca:	2240      	movs	r2, #64	; 0x40
   19dcc:	4668      	mov	r0, sp
   19dce:	f7ff fd99 	bl	19904 <memset>
	for (int i = 0; i < nfds; i++) {
   19dd2:	466a      	mov	r2, sp
   19dd4:	2100      	movs	r1, #0
		if (fds[i].events & POLLIN) {
   19dd6:	1d2f      	adds	r7, r5, #4
	for (int i = 0; i < nfds; i++) {
   19dd8:	42a1      	cmp	r1, r4
   19dda:	db0c      	blt.n	19df6 <nrf91_socket_offload_poll+0x38>
	retval = nrf_poll((struct nrf_pollfd *)&tmp, nfds, timeout);
   19ddc:	4632      	mov	r2, r6
   19dde:	4621      	mov	r1, r4
   19de0:	4668      	mov	r0, sp
   19de2:	f7f9 fdbb 	bl	1395c <nrf_poll>
	for (int i = 0; i < nfds; i++) {
   19de6:	2200      	movs	r2, #0
   19de8:	462b      	mov	r3, r5
		fds[i].revents = 0;
   19dea:	4616      	mov	r6, r2
			fds[i].revents |= POLLIN;
   19dec:	2701      	movs	r7, #1
	for (int i = 0; i < nfds; i++) {
   19dee:	42a2      	cmp	r2, r4
   19df0:	db1a      	blt.n	19e28 <nrf91_socket_offload_poll+0x6a>
}
   19df2:	b011      	add	sp, #68	; 0x44
   19df4:	bdf0      	pop	{r4, r5, r6, r7, pc}
		tmp[i].handle = fds[i].fd;
   19df6:	f855 3031 	ldr.w	r3, [r5, r1, lsl #3]
		if (fds[i].events & POLLIN) {
   19dfa:	f837 0031 	ldrh.w	r0, [r7, r1, lsl #3]
		tmp[i].handle = fds[i].fd;
   19dfe:	6013      	str	r3, [r2, #0]
		if (fds[i].events & POLLIN) {
   19e00:	07c3      	lsls	r3, r0, #31
			tmp[i].requested |= NRF_POLLIN;
   19e02:	bf48      	it	mi
   19e04:	8893      	ldrhmi	r3, [r2, #4]
	for (int i = 0; i < nfds; i++) {
   19e06:	f101 0101 	add.w	r1, r1, #1
			tmp[i].requested |= NRF_POLLIN;
   19e0a:	bf44      	itt	mi
   19e0c:	f043 0301 	orrmi.w	r3, r3, #1
   19e10:	8093      	strhmi	r3, [r2, #4]
		if (fds[i].events & POLLOUT) {
   19e12:	0743      	lsls	r3, r0, #29
			tmp[i].requested |= NRF_POLLOUT;
   19e14:	bf48      	it	mi
   19e16:	8893      	ldrhmi	r3, [r2, #4]
   19e18:	f102 0208 	add.w	r2, r2, #8
   19e1c:	bf44      	itt	mi
   19e1e:	f043 0302 	orrmi.w	r3, r3, #2
   19e22:	f822 3c04 	strhmi.w	r3, [r2, #-4]
   19e26:	e7d7      	b.n	19dd8 <nrf91_socket_offload_poll+0x1a>
		if (tmp[i].returned & NRF_POLLIN) {
   19e28:	eb0d 01c2 	add.w	r1, sp, r2, lsl #3
   19e2c:	88c9      	ldrh	r1, [r1, #6]
		fds[i].revents = 0;
   19e2e:	80de      	strh	r6, [r3, #6]
		if (tmp[i].returned & NRF_POLLIN) {
   19e30:	07cd      	lsls	r5, r1, #31
			fds[i].revents |= POLLIN;
   19e32:	bf48      	it	mi
   19e34:	80df      	strhmi	r7, [r3, #6]
		if (tmp[i].returned & NRF_POLLOUT) {
   19e36:	078d      	lsls	r5, r1, #30
			fds[i].revents |= POLLOUT;
   19e38:	bf48      	it	mi
   19e3a:	88dd      	ldrhmi	r5, [r3, #6]
	for (int i = 0; i < nfds; i++) {
   19e3c:	f102 0201 	add.w	r2, r2, #1
			fds[i].revents |= POLLOUT;
   19e40:	bf44      	itt	mi
   19e42:	f045 0504 	orrmi.w	r5, r5, #4
   19e46:	80dd      	strhmi	r5, [r3, #6]
		if (tmp[i].returned & NRF_POLLERR) {
   19e48:	074d      	lsls	r5, r1, #29
			fds[i].revents |= POLLERR;
   19e4a:	bf48      	it	mi
   19e4c:	88dd      	ldrhmi	r5, [r3, #6]
   19e4e:	f103 0308 	add.w	r3, r3, #8
   19e52:	bf44      	itt	mi
   19e54:	f045 0508 	orrmi.w	r5, r5, #8
   19e58:	f823 5c02 	strhmi.w	r5, [r3, #-2]
		if (tmp[i].returned & NRF_POLLNVAL) {
   19e5c:	06cd      	lsls	r5, r1, #27
			fds[i].revents |= POLLNVAL;
   19e5e:	bf42      	ittt	mi
   19e60:	f833 5c02 	ldrhmi.w	r5, [r3, #-2]
   19e64:	f045 0520 	orrmi.w	r5, r5, #32
   19e68:	f823 5c02 	strhmi.w	r5, [r3, #-2]
		if (tmp[i].returned & NRF_POLLHUP) {
   19e6c:	0709      	lsls	r1, r1, #28
			fds[i].revents |= POLLHUP;
   19e6e:	bf42      	ittt	mi
   19e70:	f833 1c02 	ldrhmi.w	r1, [r3, #-2]
   19e74:	f041 0110 	orrmi.w	r1, r1, #16
   19e78:	f823 1c02 	strhmi.w	r1, [r3, #-2]
   19e7c:	e7b7      	b.n	19dee <nrf91_socket_offload_poll+0x30>

00019e7e <nrf91_socket_offload_listen>:
	return nrf_listen(sd, backlog);
   19e7e:	f7f9 bcf9 	b.w	13874 <nrf_listen>

00019e82 <nrf91_socket_offload_close>:
	return nrf_close(sd);
   19e82:	f7f9 bc6b 	b.w	1375c <nrf_close>

00019e86 <nrf91_socket_offload_fcntl>:
	switch (cmd) {
   19e86:	2903      	cmp	r1, #3
{
   19e88:	b508      	push	{r3, lr}
	switch (cmd) {
   19e8a:	d00b      	beq.n	19ea4 <nrf91_socket_offload_fcntl+0x1e>
   19e8c:	2904      	cmp	r1, #4
   19e8e:	d111      	bne.n	19eb4 <nrf91_socket_offload_fcntl+0x2e>
		flags = va_arg(args, int);
   19e90:	6812      	ldr	r2, [r2, #0]
		if (flags != 0 && flags != O_NONBLOCK)
   19e92:	f432 4380 	bics.w	r3, r2, #16384	; 0x4000
   19e96:	d10d      	bne.n	19eb4 <nrf91_socket_offload_fcntl+0x2e>
}
   19e98:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		retval = nrf_fcntl(fd, NRF_F_SETFL, flags);
   19e9c:	1392      	asrs	r2, r2, #14
   19e9e:	2101      	movs	r1, #1
   19ea0:	f7f9 bd5e 	b.w	13960 <nrf_fcntl>
		flags = nrf_fcntl(fd, NRF_F_GETFL, 0);
   19ea4:	2200      	movs	r2, #0
   19ea6:	2102      	movs	r1, #2
   19ea8:	f7f9 fd5a 	bl	13960 <nrf_fcntl>
		retval = (flags & NRF_O_NONBLOCK) ? O_NONBLOCK : 0;
   19eac:	0380      	lsls	r0, r0, #14
   19eae:	f400 4080 	and.w	r0, r0, #16384	; 0x4000
}
   19eb2:	bd08      	pop	{r3, pc}
	errno = EINVAL;
   19eb4:	f7ff fedb 	bl	19c6e <z_errno>
   19eb8:	2316      	movs	r3, #22
   19eba:	6003      	str	r3, [r0, #0]
	return retval;
   19ebc:	f04f 30ff 	mov.w	r0, #4294967295
   19ec0:	e7f7      	b.n	19eb2 <nrf91_socket_offload_fcntl+0x2c>

00019ec2 <nrf91_socket_offload_recvfrom>:
{
   19ec2:	b5f0      	push	{r4, r5, r6, r7, lr}
   19ec4:	4605      	mov	r5, r0
   19ec6:	b08d      	sub	sp, #52	; 0x34
   19ec8:	4618      	mov	r0, r3
   19eca:	e9dd 4612 	ldrd	r4, r6, [sp, #72]	; 0x48
   19ece:	4617      	mov	r7, r2
	if (from == NULL) {
   19ed0:	f7ff fe83 	bl	19bda <z_to_nrf_flags>
   19ed4:	4603      	mov	r3, r0
   19ed6:	b94c      	cbnz	r4, 19eec <nrf91_socket_offload_recvfrom+0x2a>
		retval = nrf_recvfrom(sd, buf, len, z_to_nrf_flags(flags), NULL,
   19ed8:	4628      	mov	r0, r5
   19eda:	e9cd 4400 	strd	r4, r4, [sp]
   19ede:	463a      	mov	r2, r7
   19ee0:	f7f9 fc80 	bl	137e4 <nrf_recvfrom>
   19ee4:	4605      	mov	r5, r0
}
   19ee6:	4628      	mov	r0, r5
   19ee8:	b00d      	add	sp, #52	; 0x34
   19eea:	bdf0      	pop	{r4, r5, r6, r7, pc}
		nrf_socklen_t sock_len = sizeof(struct nrf_sockaddr_in6);
   19eec:	2224      	movs	r2, #36	; 0x24
   19eee:	9202      	str	r2, [sp, #8]
		retval = nrf_recvfrom(sd, buf, len, z_to_nrf_flags(flags),
   19ef0:	aa02      	add	r2, sp, #8
   19ef2:	9201      	str	r2, [sp, #4]
   19ef4:	aa03      	add	r2, sp, #12
   19ef6:	9200      	str	r2, [sp, #0]
   19ef8:	4628      	mov	r0, r5
   19efa:	463a      	mov	r2, r7
   19efc:	f7f9 fc72 	bl	137e4 <nrf_recvfrom>
		if (cliaddr->sa_family == NRF_AF_INET) {
   19f00:	9b04      	ldr	r3, [sp, #16]
		retval = nrf_recvfrom(sd, buf, len, z_to_nrf_flags(flags),
   19f02:	4605      	mov	r5, r0
		if (cliaddr->sa_family == NRF_AF_INET) {
   19f04:	2b02      	cmp	r3, #2
   19f06:	d109      	bne.n	19f1c <nrf91_socket_offload_recvfrom+0x5a>
	ptr->sin_port = nrf_in->sin_port;
   19f08:	f8bd 3014 	ldrh.w	r3, [sp, #20]
   19f0c:	8063      	strh	r3, [r4, #2]
	ptr->sin_family = AF_INET;
   19f0e:	2301      	movs	r3, #1
   19f10:	8023      	strh	r3, [r4, #0]
	ptr->sin_addr.s_addr = nrf_in->sin_addr.s_addr;
   19f12:	9b06      	ldr	r3, [sp, #24]
   19f14:	6063      	str	r3, [r4, #4]
			*fromlen = sizeof(struct sockaddr_in);
   19f16:	2308      	movs	r3, #8
			*fromlen = sizeof(struct sockaddr_in6);
   19f18:	6033      	str	r3, [r6, #0]
	return retval;
   19f1a:	e7e4      	b.n	19ee6 <nrf91_socket_offload_recvfrom+0x24>
		} else if (cliaddr->sa_family == NRF_AF_INET6) {
   19f1c:	2b0a      	cmp	r3, #10
   19f1e:	d1e2      	bne.n	19ee6 <nrf91_socket_offload_recvfrom+0x24>
	ptr->sin6_port = nrf_in->sin6_port;
   19f20:	f8bd 3014 	ldrh.w	r3, [sp, #20]
	ptr->sin6_family = AF_INET6;
   19f24:	4620      	mov	r0, r4
	ptr->sin6_port = nrf_in->sin6_port;
   19f26:	8063      	strh	r3, [r4, #2]
	ptr->sin6_family = AF_INET6;
   19f28:	2302      	movs	r3, #2
	memcpy(ptr->sin6_addr.s6_addr, nrf_in->sin6_addr.s6_addr,
   19f2a:	2210      	movs	r2, #16
	ptr->sin6_family = AF_INET6;
   19f2c:	f820 3b04 	strh.w	r3, [r0], #4
	memcpy(ptr->sin6_addr.s6_addr, nrf_in->sin6_addr.s6_addr,
   19f30:	a907      	add	r1, sp, #28
   19f32:	f7ff fcbd 	bl	198b0 <memcpy>
	ptr->sin6_scope_id = (u8_t)nrf_in->sin6_scope_id;
   19f36:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   19f38:	7523      	strb	r3, [r4, #20]
			*fromlen = sizeof(struct sockaddr_in6);
   19f3a:	2318      	movs	r3, #24
   19f3c:	e7ec      	b.n	19f18 <nrf91_socket_offload_recvfrom+0x56>

00019f3e <nrf91_socket_offload_connect>:
{
   19f3e:	b570      	push	{r4, r5, r6, lr}
	if (addr->sa_family == AF_INET) {
   19f40:	880b      	ldrh	r3, [r1, #0]
{
   19f42:	b08a      	sub	sp, #40	; 0x28
	if (addr->sa_family == AF_INET) {
   19f44:	2b01      	cmp	r3, #1
{
   19f46:	4606      	mov	r6, r0
   19f48:	460c      	mov	r4, r1
	if (addr->sa_family == AF_INET) {
   19f4a:	d10e      	bne.n	19f6a <nrf91_socket_offload_connect+0x2c>
	nrf_out->sin_port = ptr->sin_port;
   19f4c:	884b      	ldrh	r3, [r1, #2]
	nrf_out->sin_len = sizeof(struct nrf_sockaddr_in);
   19f4e:	2210      	movs	r2, #16
	nrf_out->sin_port = ptr->sin_port;
   19f50:	f8ad 300c 	strh.w	r3, [sp, #12]
	nrf_out->sin_family = NRF_AF_INET;
   19f54:	2302      	movs	r3, #2
   19f56:	9302      	str	r3, [sp, #8]
	nrf_out->sin_addr.s_addr = ptr->sin_addr.s_addr;
   19f58:	684b      	ldr	r3, [r1, #4]
	nrf_out->sin_len = sizeof(struct nrf_sockaddr_in);
   19f5a:	f88d 2004 	strb.w	r2, [sp, #4]
	nrf_out->sin_addr.s_addr = ptr->sin_addr.s_addr;
   19f5e:	9304      	str	r3, [sp, #16]
		retval = nrf_connect(sd, (const struct nrf_sockaddr_in *)&ipv4,
   19f60:	a901      	add	r1, sp, #4
		retval = nrf_connect(sd, (const struct nrf_sockaddr *)&ipv6,
   19f62:	f7f9 fc75 	bl	13850 <nrf_connect>
}
   19f66:	b00a      	add	sp, #40	; 0x28
   19f68:	bd70      	pop	{r4, r5, r6, pc}
	} else if (addr->sa_family == AF_INET6) {
   19f6a:	2b02      	cmp	r3, #2
   19f6c:	d112      	bne.n	19f94 <nrf91_socket_offload_connect+0x56>
	nrf_out->sin6_port = ptr->sin6_port;
   19f6e:	884b      	ldrh	r3, [r1, #2]
	nrf_out->sin6_len = sizeof(struct nrf_sockaddr_in6);
   19f70:	2524      	movs	r5, #36	; 0x24
	nrf_out->sin6_port = ptr->sin6_port;
   19f72:	f8ad 300c 	strh.w	r3, [sp, #12]
	nrf_out->sin6_family = NRF_AF_INET6;
   19f76:	230a      	movs	r3, #10
	memcpy(nrf_out->sin6_addr.s6_addr, ptr->sin6_addr.s6_addr,
   19f78:	2210      	movs	r2, #16
   19f7a:	3104      	adds	r1, #4
   19f7c:	a805      	add	r0, sp, #20
	nrf_out->sin6_family = NRF_AF_INET6;
   19f7e:	9302      	str	r3, [sp, #8]
	nrf_out->sin6_len = sizeof(struct nrf_sockaddr_in6);
   19f80:	f88d 5004 	strb.w	r5, [sp, #4]
	memcpy(nrf_out->sin6_addr.s6_addr, ptr->sin6_addr.s6_addr,
   19f84:	f7ff fc94 	bl	198b0 <memcpy>
	nrf_out->sin6_scope_id = (u32_t)ptr->sin6_scope_id;
   19f88:	7d23      	ldrb	r3, [r4, #20]
		retval = nrf_connect(sd, (const struct nrf_sockaddr *)&ipv6,
   19f8a:	462a      	mov	r2, r5
	nrf_out->sin6_scope_id = (u32_t)ptr->sin6_scope_id;
   19f8c:	9309      	str	r3, [sp, #36]	; 0x24
		retval = nrf_connect(sd, (const struct nrf_sockaddr *)&ipv6,
   19f8e:	a901      	add	r1, sp, #4
   19f90:	4630      	mov	r0, r6
   19f92:	e7e6      	b.n	19f62 <nrf91_socket_offload_connect+0x24>
		retval = nrf_connect(sd, (void *)addr, addrlen);
   19f94:	f7f9 fc5c 	bl	13850 <nrf_connect>
		if (retval < 0) {
   19f98:	2800      	cmp	r0, #0
   19f9a:	dae4      	bge.n	19f66 <nrf91_socket_offload_connect+0x28>
	errno = ENOTSUP;
   19f9c:	f7ff fe67 	bl	19c6e <z_errno>
   19fa0:	2323      	movs	r3, #35	; 0x23
   19fa2:	6003      	str	r3, [r0, #0]
   19fa4:	f04f 30ff 	mov.w	r0, #4294967295
   19fa8:	e7dd      	b.n	19f66 <nrf91_socket_offload_connect+0x28>

00019faa <nrf91_socket_offload_socket>:
{
   19faa:	b510      	push	{r4, lr}
	family = z_to_nrf_family(family);
   19fac:	b280      	uxth	r0, r0
   19fae:	f7ff fe1e 	bl	19bee <z_to_nrf_family>
	if (family == -EAFNOSUPPORT) {
   19fb2:	f110 0f2f 	cmn.w	r0, #47	; 0x2f
	family = z_to_nrf_family(family);
   19fb6:	4604      	mov	r4, r0
	if (family == -EAFNOSUPPORT) {
   19fb8:	d106      	bne.n	19fc8 <nrf91_socket_offload_socket+0x1e>
		errno = EAFNOSUPPORT;
   19fba:	f7ff fe58 	bl	19c6e <z_errno>
   19fbe:	232f      	movs	r3, #47	; 0x2f
		errno = EPROTONOSUPPORT;
   19fc0:	6003      	str	r3, [r0, #0]
}
   19fc2:	f04f 30ff 	mov.w	r0, #4294967295
   19fc6:	bd10      	pop	{r4, pc}
	switch (socktype) {
   19fc8:	2903      	cmp	r1, #3
   19fca:	d003      	beq.n	19fd4 <nrf91_socket_offload_socket+0x2a>
		return NRF_SOCK_MGMT;
   19fcc:	2904      	cmp	r1, #4
   19fce:	bf08      	it	eq
   19fd0:	f44f 7100 	moveq.w	r1, #512	; 0x200
	proto = z_to_nrf_protocol(proto);
   19fd4:	4610      	mov	r0, r2
   19fd6:	f7ff fe20 	bl	19c1a <z_to_nrf_protocol>
	if (proto == -EPROTONOSUPPORT) {
   19fda:	f110 0f2b 	cmn.w	r0, #43	; 0x2b
	proto = z_to_nrf_protocol(proto);
   19fde:	4602      	mov	r2, r0
	if (proto == -EPROTONOSUPPORT) {
   19fe0:	d103      	bne.n	19fea <nrf91_socket_offload_socket+0x40>
		errno = EPROTONOSUPPORT;
   19fe2:	f7ff fe44 	bl	19c6e <z_errno>
   19fe6:	232b      	movs	r3, #43	; 0x2b
   19fe8:	e7ea      	b.n	19fc0 <nrf91_socket_offload_socket+0x16>
	retval = nrf_socket(family, type, proto);
   19fea:	4620      	mov	r0, r4
}
   19fec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	retval = nrf_socket(family, type, proto);
   19ff0:	f7f9 bba2 	b.w	13738 <nrf_socket>

00019ff4 <nrf91_socket_offload_getaddrinfo>:
{
   19ff4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19ff8:	4614      	mov	r4, r2
   19ffa:	460e      	mov	r6, r1
	struct nrf_addrinfo *nrf_res = NULL;
   19ffc:	2100      	movs	r1, #0
{
   19ffe:	b093      	sub	sp, #76	; 0x4c
   1a000:	4605      	mov	r5, r0
	memset(&nrf_hints, 0, sizeof(struct nrf_addrinfo));
   1a002:	2220      	movs	r2, #32
   1a004:	a802      	add	r0, sp, #8
{
   1a006:	461f      	mov	r7, r3
	struct nrf_addrinfo *nrf_res = NULL;
   1a008:	9101      	str	r1, [sp, #4]
	memset(&nrf_hints, 0, sizeof(struct nrf_addrinfo));
   1a00a:	f7ff fc7b 	bl	19904 <memset>
	if (hints != NULL) {
   1a00e:	b194      	cbz	r4, 1a036 <nrf91_socket_offload_getaddrinfo+0x42>
		error = z_to_nrf_addrinfo_hints(hints, &nrf_hints);
   1a010:	a902      	add	r1, sp, #8
   1a012:	4620      	mov	r0, r4
   1a014:	f7ff fe3a 	bl	19c8c <z_to_nrf_addrinfo_hints>
		if (error == -EPROTONOSUPPORT) {
   1a018:	f110 0f2b 	cmn.w	r0, #43	; 0x2b
   1a01c:	f000 80cf 	beq.w	1a1be <nrf91_socket_offload_getaddrinfo+0x1ca>
		} else if (error == -EAFNOSUPPORT) {
   1a020:	302f      	adds	r0, #47	; 0x2f
   1a022:	f000 80cf 	beq.w	1a1c4 <nrf91_socket_offload_getaddrinfo+0x1d0>
		if (hints->ai_next != NULL) {
   1a026:	69e0      	ldr	r0, [r4, #28]
   1a028:	b120      	cbz	r0, 1a034 <nrf91_socket_offload_getaddrinfo+0x40>
			z_to_nrf_addrinfo_hints(hints->ai_next, &nrf_hints_pdn);
   1a02a:	ac0a      	add	r4, sp, #40	; 0x28
   1a02c:	4621      	mov	r1, r4
   1a02e:	f7ff fe2d 	bl	19c8c <z_to_nrf_addrinfo_hints>
			nrf_hints.ai_next = &nrf_hints_pdn;
   1a032:	9409      	str	r4, [sp, #36]	; 0x24
		nrf_hints_ptr = &nrf_hints;
   1a034:	ac02      	add	r4, sp, #8
	int retval = nrf_getaddrinfo(node, service, nrf_hints_ptr, &nrf_res);
   1a036:	4628      	mov	r0, r5
   1a038:	ab01      	add	r3, sp, #4
   1a03a:	4622      	mov	r2, r4
   1a03c:	4631      	mov	r1, r6
   1a03e:	f7f9 fc89 	bl	13954 <nrf_getaddrinfo>
	if (retval != 0) {
   1a042:	4605      	mov	r5, r0
   1a044:	b1b0      	cbz	r0, 1a074 <nrf91_socket_offload_getaddrinfo+0x80>
	switch (nrf_error) {
   1a046:	2823      	cmp	r0, #35	; 0x23
   1a048:	f000 80bf 	beq.w	1a1ca <nrf91_socket_offload_getaddrinfo+0x1d6>
   1a04c:	dc0a      	bgt.n	1a064 <nrf91_socket_offload_getaddrinfo+0x70>
		return DNS_EAI_SYSTEM;
   1a04e:	280c      	cmp	r0, #12
   1a050:	bf08      	it	eq
   1a052:	f06f 0509 	mvneq.w	r5, #9
   1a056:	bf18      	it	ne
   1a058:	f06f 050a 	mvnne.w	r5, #10
}
   1a05c:	4628      	mov	r0, r5
   1a05e:	b013      	add	sp, #76	; 0x4c
   1a060:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	switch (nrf_error) {
   1a064:	282f      	cmp	r0, #47	; 0x2f
   1a066:	f000 80b3 	beq.w	1a1d0 <nrf91_socket_offload_getaddrinfo+0x1dc>
		return DNS_EAI_SYSTEM;
   1a06a:	2873      	cmp	r0, #115	; 0x73
   1a06c:	bf08      	it	eq
   1a06e:	f06f 0563 	mvneq.w	r5, #99	; 0x63
   1a072:	e7f0      	b.n	1a056 <nrf91_socket_offload_getaddrinfo+0x62>
	struct addrinfo *latest_z_res = NULL;
   1a074:	4680      	mov	r8, r0
	z_out->ai_next = NULL;
   1a076:	4681      	mov	r9, r0
	struct nrf_addrinfo *next_nrf_res = nrf_res;
   1a078:	9e01      	ldr	r6, [sp, #4]
	*res = NULL;
   1a07a:	6038      	str	r0, [r7, #0]
	while ((retval == 0) && (next_nrf_res != NULL)) {
   1a07c:	b91e      	cbnz	r6, 1a086 <nrf91_socket_offload_getaddrinfo+0x92>
	nrf_freeaddrinfo(nrf_res);
   1a07e:	9801      	ldr	r0, [sp, #4]
   1a080:	f7f9 fc6a 	bl	13958 <nrf_freeaddrinfo>
	return retval;
   1a084:	e7ea      	b.n	1a05c <nrf91_socket_offload_getaddrinfo+0x68>
		struct addrinfo *next_z_res = k_malloc(sizeof(struct addrinfo));
   1a086:	2020      	movs	r0, #32
   1a088:	f7fd fbee 	bl	17868 <k_malloc>
		if (next_z_res == NULL) {
   1a08c:	4604      	mov	r4, r0
   1a08e:	2800      	cmp	r0, #0
   1a090:	f000 808a 	beq.w	1a1a8 <nrf91_socket_offload_getaddrinfo+0x1b4>
	family = nrf_to_z_family(nrf_in->ai_family);
   1a094:	6872      	ldr	r2, [r6, #4]
	z_out->ai_socktype = nrf_in->ai_socktype;
   1a096:	68b3      	ldr	r3, [r6, #8]
	switch (nrf_family) {
   1a098:	2a05      	cmp	r2, #5
	z_out->ai_canonname = NULL; /* TODO Do proper content copy. */
   1a09a:	e9c0 9906 	strd	r9, r9, [r0, #24]
	z_out->ai_flags = nrf_to_z_addrinfo_flags(nrf_in->ai_flags);
   1a09e:	f8c0 9000 	str.w	r9, [r0]
	z_out->ai_socktype = nrf_in->ai_socktype;
   1a0a2:	6083      	str	r3, [r0, #8]
	switch (nrf_family) {
   1a0a4:	d033      	beq.n	1a10e <nrf91_socket_offload_getaddrinfo+0x11a>
   1a0a6:	dc09      	bgt.n	1a0bc <nrf91_socket_offload_getaddrinfo+0xc8>
   1a0a8:	2a01      	cmp	r2, #1
   1a0aa:	d032      	beq.n	1a112 <nrf91_socket_offload_getaddrinfo+0x11e>
   1a0ac:	2a02      	cmp	r2, #2
   1a0ae:	d032      	beq.n	1a116 <nrf91_socket_offload_getaddrinfo+0x122>
			k_free(next_z_res);
   1a0b0:	4620      	mov	r0, r4
   1a0b2:	f000 f9a0 	bl	1a3f6 <k_free>
			retval = DNS_EAI_ADDRFAMILY;
   1a0b6:	f06f 0508 	mvn.w	r5, #8
   1a0ba:	e077      	b.n	1a1ac <nrf91_socket_offload_getaddrinfo+0x1b8>
	switch (nrf_family) {
   1a0bc:	2a0a      	cmp	r2, #10
   1a0be:	d02c      	beq.n	1a11a <nrf91_socket_offload_getaddrinfo+0x126>
   1a0c0:	2a66      	cmp	r2, #102	; 0x66
   1a0c2:	d1f5      	bne.n	1a0b0 <nrf91_socket_offload_getaddrinfo+0xbc>
		return AF_LTE;
   1a0c4:	4613      	mov	r3, r2
	z_out->ai_family = family;
   1a0c6:	6063      	str	r3, [r4, #4]
	z_out->ai_protocol = nrf_to_z_protocol(nrf_in->ai_protocol);
   1a0c8:	68f3      	ldr	r3, [r6, #12]
	switch (proto) {
   1a0ca:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
   1a0ce:	d045      	beq.n	1a15c <nrf91_socket_offload_getaddrinfo+0x168>
   1a0d0:	dc25      	bgt.n	1a11e <nrf91_socket_offload_getaddrinfo+0x12a>
   1a0d2:	2b01      	cmp	r3, #1
   1a0d4:	d047      	beq.n	1a166 <nrf91_socket_offload_getaddrinfo+0x172>
   1a0d6:	2b02      	cmp	r3, #2
   1a0d8:	d043      	beq.n	1a162 <nrf91_socket_offload_getaddrinfo+0x16e>
   1a0da:	bb43      	cbnz	r3, 1a12e <nrf91_socket_offload_getaddrinfo+0x13a>
	if (nrf_in->ai_family == NRF_AF_INET) {
   1a0dc:	2a02      	cmp	r2, #2
	z_out->ai_protocol = nrf_to_z_protocol(nrf_in->ai_protocol);
   1a0de:	60e3      	str	r3, [r4, #12]
	if (nrf_in->ai_family == NRF_AF_INET) {
   1a0e0:	d143      	bne.n	1a16a <nrf91_socket_offload_getaddrinfo+0x176>
		z_out->ai_addr = k_malloc(sizeof(struct sockaddr_in));
   1a0e2:	2008      	movs	r0, #8
   1a0e4:	f7fd fbc0 	bl	17868 <k_malloc>
   1a0e8:	6160      	str	r0, [r4, #20]
		if (z_out->ai_addr == NULL) {
   1a0ea:	2800      	cmp	r0, #0
   1a0ec:	d059      	beq.n	1a1a2 <nrf91_socket_offload_getaddrinfo+0x1ae>
		z_out->ai_addrlen  = sizeof(struct sockaddr_in);
   1a0ee:	2308      	movs	r3, #8
   1a0f0:	6123      	str	r3, [r4, #16]
			(const struct nrf_sockaddr_in *)nrf_in->ai_addr);
   1a0f2:	6973      	ldr	r3, [r6, #20]
	ptr->sin_port = nrf_in->sin_port;
   1a0f4:	891a      	ldrh	r2, [r3, #8]
	ptr->sin_addr.s_addr = nrf_in->sin_addr.s_addr;
   1a0f6:	68db      	ldr	r3, [r3, #12]
	ptr->sin_port = nrf_in->sin_port;
   1a0f8:	8042      	strh	r2, [r0, #2]
	ptr->sin_family = AF_INET;
   1a0fa:	2201      	movs	r2, #1
	ptr->sin_addr.s_addr = nrf_in->sin_addr.s_addr;
   1a0fc:	6043      	str	r3, [r0, #4]
	ptr->sin_family = AF_INET;
   1a0fe:	8002      	strh	r2, [r0, #0]
		if (latest_z_res == NULL) {
   1a100:	f1b8 0f00 	cmp.w	r8, #0
   1a104:	d158      	bne.n	1a1b8 <nrf91_socket_offload_getaddrinfo+0x1c4>
			*res = next_z_res;
   1a106:	603c      	str	r4, [r7, #0]
		next_nrf_res = next_nrf_res->ai_next;
   1a108:	69f6      	ldr	r6, [r6, #28]
   1a10a:	46a0      	mov	r8, r4
   1a10c:	e7b6      	b.n	1a07c <nrf91_socket_offload_getaddrinfo+0x88>
		return AF_PACKET;
   1a10e:	2303      	movs	r3, #3
   1a110:	e7d9      	b.n	1a0c6 <nrf91_socket_offload_getaddrinfo+0xd2>
		return AF_LOCAL;
   1a112:	2367      	movs	r3, #103	; 0x67
   1a114:	e7d7      	b.n	1a0c6 <nrf91_socket_offload_getaddrinfo+0xd2>
		return AF_INET;
   1a116:	2301      	movs	r3, #1
   1a118:	e7d5      	b.n	1a0c6 <nrf91_socket_offload_getaddrinfo+0xd2>
		return AF_INET6;
   1a11a:	2302      	movs	r3, #2
   1a11c:	e7d3      	b.n	1a0c6 <nrf91_socket_offload_getaddrinfo+0xd2>
	switch (proto) {
   1a11e:	f240 2101 	movw	r1, #513	; 0x201
   1a122:	428b      	cmp	r3, r1
   1a124:	d0da      	beq.n	1a0dc <nrf91_socket_offload_getaddrinfo+0xe8>
   1a126:	dc0d      	bgt.n	1a144 <nrf91_socket_offload_getaddrinfo+0x150>
   1a128:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
   1a12c:	d013      	beq.n	1a156 <nrf91_socket_offload_getaddrinfo+0x162>
	z_out->ai_protocol = nrf_to_z_protocol(nrf_in->ai_protocol);
   1a12e:	f06f 032a 	mvn.w	r3, #42	; 0x2a
   1a132:	60e3      	str	r3, [r4, #12]
		z_out->ai_addr = NULL;
   1a134:	2300      	movs	r3, #0
   1a136:	6163      	str	r3, [r4, #20]
			k_free(next_z_res);
   1a138:	4620      	mov	r0, r4
   1a13a:	f000 f95c 	bl	1a3f6 <k_free>
			retval = DNS_EAI_SOCKTYPE;
   1a13e:	f06f 0506 	mvn.w	r5, #6
   1a142:	e033      	b.n	1a1ac <nrf91_socket_offload_getaddrinfo+0x1b8>
	switch (proto) {
   1a144:	f240 2102 	movw	r1, #514	; 0x202
   1a148:	428b      	cmp	r3, r1
   1a14a:	d0c7      	beq.n	1a0dc <nrf91_socket_offload_getaddrinfo+0xe8>
   1a14c:	f240 2103 	movw	r1, #515	; 0x203
   1a150:	428b      	cmp	r3, r1
   1a152:	d0c3      	beq.n	1a0dc <nrf91_socket_offload_getaddrinfo+0xe8>
   1a154:	e7eb      	b.n	1a12e <nrf91_socket_offload_getaddrinfo+0x13a>
	z_out->ai_protocol = nrf_to_z_protocol(nrf_in->ai_protocol);
   1a156:	f240 1311 	movw	r3, #273	; 0x111
   1a15a:	e7bf      	b.n	1a0dc <nrf91_socket_offload_getaddrinfo+0xe8>
   1a15c:	f44f 7381 	mov.w	r3, #258	; 0x102
   1a160:	e7bc      	b.n	1a0dc <nrf91_socket_offload_getaddrinfo+0xe8>
   1a162:	2311      	movs	r3, #17
   1a164:	e7ba      	b.n	1a0dc <nrf91_socket_offload_getaddrinfo+0xe8>
   1a166:	2306      	movs	r3, #6
   1a168:	e7b8      	b.n	1a0dc <nrf91_socket_offload_getaddrinfo+0xe8>
	} else if (nrf_in->ai_family == NRF_AF_INET6) {
   1a16a:	2a0a      	cmp	r2, #10
   1a16c:	d1e4      	bne.n	1a138 <nrf91_socket_offload_getaddrinfo+0x144>
		z_out->ai_addr = k_malloc(sizeof(struct sockaddr_in6));
   1a16e:	2018      	movs	r0, #24
   1a170:	f7fd fb7a 	bl	17868 <k_malloc>
   1a174:	4682      	mov	sl, r0
   1a176:	6160      	str	r0, [r4, #20]
		if (z_out->ai_addr == NULL) {
   1a178:	b198      	cbz	r0, 1a1a2 <nrf91_socket_offload_getaddrinfo+0x1ae>
		z_out->ai_addrlen  = sizeof(struct sockaddr_in6);
   1a17a:	2318      	movs	r3, #24
			(const struct nrf_sockaddr_in6 *)nrf_in->ai_addr);
   1a17c:	f8d6 b014 	ldr.w	fp, [r6, #20]
		z_out->ai_addrlen  = sizeof(struct sockaddr_in6);
   1a180:	6123      	str	r3, [r4, #16]
	ptr->sin6_port = nrf_in->sin6_port;
   1a182:	f8bb 3008 	ldrh.w	r3, [fp, #8]
	memcpy(ptr->sin6_addr.s6_addr, nrf_in->sin6_addr.s6_addr,
   1a186:	2210      	movs	r2, #16
	ptr->sin6_port = nrf_in->sin6_port;
   1a188:	8043      	strh	r3, [r0, #2]
	ptr->sin6_family = AF_INET6;
   1a18a:	2302      	movs	r3, #2
	memcpy(ptr->sin6_addr.s6_addr, nrf_in->sin6_addr.s6_addr,
   1a18c:	eb0b 0102 	add.w	r1, fp, r2
	ptr->sin6_family = AF_INET6;
   1a190:	f820 3b04 	strh.w	r3, [r0], #4
	memcpy(ptr->sin6_addr.s6_addr, nrf_in->sin6_addr.s6_addr,
   1a194:	f7ff fb8c 	bl	198b0 <memcpy>
	ptr->sin6_scope_id = (u8_t)nrf_in->sin6_scope_id;
   1a198:	f8db 3020 	ldr.w	r3, [fp, #32]
   1a19c:	f88a 3014 	strb.w	r3, [sl, #20]
		} else if (error == -EAFNOSUPPORT) {
   1a1a0:	e7ae      	b.n	1a100 <nrf91_socket_offload_getaddrinfo+0x10c>
			k_free(next_z_res);
   1a1a2:	4620      	mov	r0, r4
   1a1a4:	f000 f927 	bl	1a3f6 <k_free>
			retval = DNS_EAI_MEMORY;
   1a1a8:	f06f 0509 	mvn.w	r5, #9
		nrf91_socket_offload_freeaddrinfo(*res);
   1a1ac:	6838      	ldr	r0, [r7, #0]
   1a1ae:	f7ff fd60 	bl	19c72 <nrf91_socket_offload_freeaddrinfo>
		*res = NULL;
   1a1b2:	2300      	movs	r3, #0
   1a1b4:	603b      	str	r3, [r7, #0]
   1a1b6:	e762      	b.n	1a07e <nrf91_socket_offload_getaddrinfo+0x8a>
			latest_z_res->ai_next = next_z_res;
   1a1b8:	f8c8 401c 	str.w	r4, [r8, #28]
   1a1bc:	e7a4      	b.n	1a108 <nrf91_socket_offload_getaddrinfo+0x114>
			return DNS_EAI_SOCKTYPE;
   1a1be:	f06f 0506 	mvn.w	r5, #6
   1a1c2:	e74b      	b.n	1a05c <nrf91_socket_offload_getaddrinfo+0x68>
			return DNS_EAI_ADDRFAMILY;
   1a1c4:	f06f 0508 	mvn.w	r5, #8
   1a1c8:	e748      	b.n	1a05c <nrf91_socket_offload_getaddrinfo+0x68>
		return DNS_EAI_AGAIN;
   1a1ca:	f06f 0502 	mvn.w	r5, #2
   1a1ce:	e745      	b.n	1a05c <nrf91_socket_offload_getaddrinfo+0x68>
		return DNS_EAI_NONAME;
   1a1d0:	f06f 0501 	mvn.w	r5, #1
   1a1d4:	e742      	b.n	1a05c <nrf91_socket_offload_getaddrinfo+0x68>

0001a1d6 <nrf91_socket_offload_setsockopt>:
{
   1a1d6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	switch (z_in_level) {
   1a1da:	f5b1 7f8d 	cmp.w	r1, #282	; 0x11a
{
   1a1de:	b086      	sub	sp, #24
   1a1e0:	4680      	mov	r8, r0
   1a1e2:	460c      	mov	r4, r1
   1a1e4:	4617      	mov	r7, r2
   1a1e6:	461d      	mov	r5, r3
   1a1e8:	9e0c      	ldr	r6, [sp, #48]	; 0x30
	switch (z_in_level) {
   1a1ea:	d002      	beq.n	1a1f2 <nrf91_socket_offload_setsockopt+0x1c>
   1a1ec:	dc1c      	bgt.n	1a228 <nrf91_socket_offload_setsockopt+0x52>
   1a1ee:	2901      	cmp	r1, #1
   1a1f0:	d122      	bne.n	1a238 <nrf91_socket_offload_setsockopt+0x62>
	if (z_to_nrf_optname(level, optname, &nrf_optname) < 0)
   1a1f2:	aa03      	add	r2, sp, #12
   1a1f4:	4639      	mov	r1, r7
   1a1f6:	4620      	mov	r0, r4
   1a1f8:	f7f4 fd6a 	bl	ecd0 <z_to_nrf_optname>
   1a1fc:	2800      	cmp	r0, #0
   1a1fe:	db1b      	blt.n	1a238 <nrf91_socket_offload_setsockopt+0x62>
	if ((level == SOL_SOCKET) && (optname == SO_RCVTIMEO)) {
   1a200:	2c01      	cmp	r4, #1
   1a202:	d107      	bne.n	1a214 <nrf91_socket_offload_setsockopt+0x3e>
   1a204:	2f14      	cmp	r7, #20
   1a206:	d105      	bne.n	1a214 <nrf91_socket_offload_setsockopt+0x3e>
		nrf_optlen = sizeof(struct nrf_timeval);
   1a208:	2608      	movs	r6, #8
		nrf_rcvtimeo.tv_sec = ((struct timeval *)optval)->tv_sec;
   1a20a:	682b      	ldr	r3, [r5, #0]
   1a20c:	9304      	str	r3, [sp, #16]
		nrf_rcvtimeo.tv_usec = ((struct timeval *)optval)->tv_usec;
   1a20e:	686b      	ldr	r3, [r5, #4]
		nrf_optval = &nrf_rcvtimeo;
   1a210:	ad04      	add	r5, sp, #16
		nrf_rcvtimeo.tv_usec = ((struct timeval *)optval)->tv_usec;
   1a212:	9305      	str	r3, [sp, #20]
	retval = nrf_setsockopt(sd, nrf_level, nrf_optname, nrf_optval,
   1a214:	9600      	str	r6, [sp, #0]
   1a216:	462b      	mov	r3, r5
   1a218:	9a03      	ldr	r2, [sp, #12]
   1a21a:	4621      	mov	r1, r4
   1a21c:	4640      	mov	r0, r8
   1a21e:	f7f9 fb61 	bl	138e4 <nrf_setsockopt>
}
   1a222:	b006      	add	sp, #24
   1a224:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	switch (z_in_level) {
   1a228:	f240 2302 	movw	r3, #514	; 0x202
   1a22c:	4299      	cmp	r1, r3
   1a22e:	d0e0      	beq.n	1a1f2 <nrf91_socket_offload_setsockopt+0x1c>
   1a230:	f240 2303 	movw	r3, #515	; 0x203
   1a234:	4299      	cmp	r1, r3
   1a236:	e7db      	b.n	1a1f0 <nrf91_socket_offload_setsockopt+0x1a>
	errno = ENOPROTOOPT;
   1a238:	f7ff fd19 	bl	19c6e <z_errno>
   1a23c:	232a      	movs	r3, #42	; 0x2a
   1a23e:	6003      	str	r3, [r0, #0]
   1a240:	f04f 30ff 	mov.w	r0, #4294967295
   1a244:	e7ed      	b.n	1a222 <nrf91_socket_offload_setsockopt+0x4c>

0001a246 <nrf91_socket_offload_sendto>:
{
   1a246:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1a24a:	b08d      	sub	sp, #52	; 0x34
   1a24c:	9c14      	ldr	r4, [sp, #80]	; 0x50
   1a24e:	4605      	mov	r5, r0
   1a250:	460e      	mov	r6, r1
   1a252:	4617      	mov	r7, r2
   1a254:	4698      	mov	r8, r3
	if (to == NULL) {
   1a256:	b96c      	cbnz	r4, 1a274 <nrf91_socket_offload_sendto+0x2e>
		retval = nrf_sendto(sd, buf, len, z_to_nrf_flags(flags), NULL,
   1a258:	4618      	mov	r0, r3
   1a25a:	f7ff fcbe 	bl	19bda <z_to_nrf_flags>
   1a25e:	e9cd 4400 	strd	r4, r4, [sp]
		retval = nrf_sendto(sd, buf, len, z_to_nrf_flags(flags), &ipv6,
   1a262:	4603      	mov	r3, r0
   1a264:	463a      	mov	r2, r7
   1a266:	4631      	mov	r1, r6
   1a268:	4628      	mov	r0, r5
   1a26a:	f7f9 fa85 	bl	13778 <nrf_sendto>
}
   1a26e:	b00d      	add	sp, #52	; 0x34
   1a270:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	} else if (to->sa_family == AF_INET) {
   1a274:	8823      	ldrh	r3, [r4, #0]
   1a276:	2b01      	cmp	r3, #1
   1a278:	d110      	bne.n	1a29c <nrf91_socket_offload_sendto+0x56>
	nrf_out->sin_port = ptr->sin_port;
   1a27a:	8863      	ldrh	r3, [r4, #2]
	nrf_out->sin_len = sizeof(struct nrf_sockaddr_in);
   1a27c:	2110      	movs	r1, #16
	nrf_out->sin_port = ptr->sin_port;
   1a27e:	f8ad 3014 	strh.w	r3, [sp, #20]
	nrf_out->sin_family = NRF_AF_INET;
   1a282:	2302      	movs	r3, #2
   1a284:	9304      	str	r3, [sp, #16]
	nrf_out->sin_addr.s_addr = ptr->sin_addr.s_addr;
   1a286:	6863      	ldr	r3, [r4, #4]
		retval = nrf_sendto(sd, buf, len, z_to_nrf_flags(flags), &ipv4,
   1a288:	4640      	mov	r0, r8
	nrf_out->sin_len = sizeof(struct nrf_sockaddr_in);
   1a28a:	f88d 100c 	strb.w	r1, [sp, #12]
	nrf_out->sin_addr.s_addr = ptr->sin_addr.s_addr;
   1a28e:	9306      	str	r3, [sp, #24]
		retval = nrf_sendto(sd, buf, len, z_to_nrf_flags(flags), &ipv4,
   1a290:	f7ff fca3 	bl	19bda <z_to_nrf_flags>
   1a294:	9101      	str	r1, [sp, #4]
		retval = nrf_sendto(sd, buf, len, z_to_nrf_flags(flags), &ipv6,
   1a296:	ab03      	add	r3, sp, #12
   1a298:	9300      	str	r3, [sp, #0]
   1a29a:	e7e2      	b.n	1a262 <nrf91_socket_offload_sendto+0x1c>
	} else if (to->sa_family == AF_INET6) {
   1a29c:	2b02      	cmp	r3, #2
   1a29e:	d115      	bne.n	1a2cc <nrf91_socket_offload_sendto+0x86>
	nrf_out->sin6_port = ptr->sin6_port;
   1a2a0:	8863      	ldrh	r3, [r4, #2]
	nrf_out->sin6_len = sizeof(struct nrf_sockaddr_in6);
   1a2a2:	f04f 0924 	mov.w	r9, #36	; 0x24
	nrf_out->sin6_port = ptr->sin6_port;
   1a2a6:	f8ad 3014 	strh.w	r3, [sp, #20]
	nrf_out->sin6_family = NRF_AF_INET6;
   1a2aa:	230a      	movs	r3, #10
	memcpy(nrf_out->sin6_addr.s6_addr, ptr->sin6_addr.s6_addr,
   1a2ac:	2210      	movs	r2, #16
   1a2ae:	1d21      	adds	r1, r4, #4
   1a2b0:	a807      	add	r0, sp, #28
	nrf_out->sin6_family = NRF_AF_INET6;
   1a2b2:	9304      	str	r3, [sp, #16]
	nrf_out->sin6_len = sizeof(struct nrf_sockaddr_in6);
   1a2b4:	f88d 900c 	strb.w	r9, [sp, #12]
	memcpy(nrf_out->sin6_addr.s6_addr, ptr->sin6_addr.s6_addr,
   1a2b8:	f7ff fafa 	bl	198b0 <memcpy>
	nrf_out->sin6_scope_id = (u32_t)ptr->sin6_scope_id;
   1a2bc:	7d23      	ldrb	r3, [r4, #20]
		retval = nrf_sendto(sd, buf, len, z_to_nrf_flags(flags), &ipv6,
   1a2be:	4640      	mov	r0, r8
	nrf_out->sin6_scope_id = (u32_t)ptr->sin6_scope_id;
   1a2c0:	930b      	str	r3, [sp, #44]	; 0x2c
		retval = nrf_sendto(sd, buf, len, z_to_nrf_flags(flags), &ipv6,
   1a2c2:	f7ff fc8a 	bl	19bda <z_to_nrf_flags>
   1a2c6:	f8cd 9004 	str.w	r9, [sp, #4]
   1a2ca:	e7e4      	b.n	1a296 <nrf91_socket_offload_sendto+0x50>
	errno = ENOTSUP;
   1a2cc:	f7ff fccf 	bl	19c6e <z_errno>
   1a2d0:	2323      	movs	r3, #35	; 0x23
   1a2d2:	6003      	str	r3, [r0, #0]
	return retval;
   1a2d4:	f04f 30ff 	mov.w	r0, #4294967295
   1a2d8:	e7c9      	b.n	1a26e <nrf91_socket_offload_sendto+0x28>

0001a2da <nrf91_socket_offload_accept>:
{
   1a2da:	b5f0      	push	{r4, r5, r6, r7, lr}
   1a2dc:	4616      	mov	r6, r2
   1a2de:	b08b      	sub	sp, #44	; 0x2c
	if ((addr != NULL) && (addrlen != NULL)) {
   1a2e0:	460c      	mov	r4, r1
   1a2e2:	b1f1      	cbz	r1, 1a322 <nrf91_socket_offload_accept+0x48>
   1a2e4:	b302      	cbz	r2, 1a328 <nrf91_socket_offload_accept+0x4e>
		if (*addrlen == sizeof(struct sockaddr_in)) {
   1a2e6:	6813      	ldr	r3, [r2, #0]
		nrf_addrlen_ptr = &nrf_addrlen;
   1a2e8:	466a      	mov	r2, sp
		if (*addrlen == sizeof(struct sockaddr_in)) {
   1a2ea:	2b08      	cmp	r3, #8
			nrf_addrlen = sizeof(struct nrf_sockaddr_in);
   1a2ec:	bf0c      	ite	eq
   1a2ee:	2310      	moveq	r3, #16
			nrf_addrlen = sizeof(struct nrf_sockaddr_in6);
   1a2f0:	2324      	movne	r3, #36	; 0x24
		nrf_addr_ptr = (struct nrf_sockaddr *)&nrf_addr;
   1a2f2:	ad01      	add	r5, sp, #4
			nrf_addrlen = sizeof(struct nrf_sockaddr_in6);
   1a2f4:	9300      	str	r3, [sp, #0]
	retval = nrf_accept(sd, nrf_addr_ptr, nrf_addrlen_ptr);
   1a2f6:	4629      	mov	r1, r5
   1a2f8:	f7f9 facc 	bl	13894 <nrf_accept>
	if (retval < 0) {
   1a2fc:	1e07      	subs	r7, r0, #0
   1a2fe:	db2b      	blt.n	1a358 <nrf91_socket_offload_accept+0x7e>
	if ((addr != NULL) && (addrlen != NULL)) {
   1a300:	b164      	cbz	r4, 1a31c <nrf91_socket_offload_accept+0x42>
   1a302:	b15e      	cbz	r6, 1a31c <nrf91_socket_offload_accept+0x42>
		if (nrf_addr_ptr->sa_family == NRF_AF_INET) {
   1a304:	686b      	ldr	r3, [r5, #4]
   1a306:	2b02      	cmp	r3, #2
   1a308:	d110      	bne.n	1a32c <nrf91_socket_offload_accept+0x52>
			*addrlen = sizeof(struct sockaddr_in);
   1a30a:	2308      	movs	r3, #8
   1a30c:	6033      	str	r3, [r6, #0]
	ptr->sin_port = nrf_in->sin_port;
   1a30e:	f8bd 300c 	ldrh.w	r3, [sp, #12]
   1a312:	8063      	strh	r3, [r4, #2]
	ptr->sin_family = AF_INET;
   1a314:	2301      	movs	r3, #1
   1a316:	8023      	strh	r3, [r4, #0]
	ptr->sin_addr.s_addr = nrf_in->sin_addr.s_addr;
   1a318:	9b04      	ldr	r3, [sp, #16]
   1a31a:	6063      	str	r3, [r4, #4]
}
   1a31c:	4638      	mov	r0, r7
   1a31e:	b00b      	add	sp, #44	; 0x2c
   1a320:	bdf0      	pop	{r4, r5, r6, r7, pc}
	nrf_socklen_t *nrf_addrlen_ptr = NULL;
   1a322:	460a      	mov	r2, r1
	struct nrf_sockaddr *nrf_addr_ptr = NULL;
   1a324:	460d      	mov	r5, r1
   1a326:	e7e6      	b.n	1a2f6 <nrf91_socket_offload_accept+0x1c>
   1a328:	4615      	mov	r5, r2
   1a32a:	e7e4      	b.n	1a2f6 <nrf91_socket_offload_accept+0x1c>
		} else if (nrf_addr_ptr->sa_family == NRF_AF_INET6) {
   1a32c:	2b0a      	cmp	r3, #10
   1a32e:	d10f      	bne.n	1a350 <nrf91_socket_offload_accept+0x76>
			*addrlen = sizeof(struct sockaddr_in6);
   1a330:	2318      	movs	r3, #24
   1a332:	6033      	str	r3, [r6, #0]
	ptr->sin6_port = nrf_in->sin6_port;
   1a334:	f8bd 300c 	ldrh.w	r3, [sp, #12]
	ptr->sin6_family = AF_INET6;
   1a338:	4620      	mov	r0, r4
	ptr->sin6_port = nrf_in->sin6_port;
   1a33a:	8063      	strh	r3, [r4, #2]
	ptr->sin6_family = AF_INET6;
   1a33c:	2302      	movs	r3, #2
	memcpy(ptr->sin6_addr.s6_addr, nrf_in->sin6_addr.s6_addr,
   1a33e:	2210      	movs	r2, #16
	ptr->sin6_family = AF_INET6;
   1a340:	f820 3b04 	strh.w	r3, [r0], #4
	memcpy(ptr->sin6_addr.s6_addr, nrf_in->sin6_addr.s6_addr,
   1a344:	a905      	add	r1, sp, #20
   1a346:	f7ff fab3 	bl	198b0 <memcpy>
	ptr->sin6_scope_id = (u8_t)nrf_in->sin6_scope_id;
   1a34a:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1a34c:	7523      	strb	r3, [r4, #20]
   1a34e:	e7e5      	b.n	1a31c <nrf91_socket_offload_accept+0x42>
	errno = ENOTSUP;
   1a350:	f7ff fc8d 	bl	19c6e <z_errno>
   1a354:	2323      	movs	r3, #35	; 0x23
   1a356:	6003      	str	r3, [r0, #0]
		return -1;
   1a358:	f04f 37ff 	mov.w	r7, #4294967295
   1a35c:	e7de      	b.n	1a31c <nrf91_socket_offload_accept+0x42>

0001a35e <nrf91_socket_offload_bind>:
{
   1a35e:	b570      	push	{r4, r5, r6, lr}
	if (addr->sa_family == AF_INET) {
   1a360:	880b      	ldrh	r3, [r1, #0]
{
   1a362:	b08a      	sub	sp, #40	; 0x28
	if (addr->sa_family == AF_INET) {
   1a364:	2b01      	cmp	r3, #1
{
   1a366:	4606      	mov	r6, r0
   1a368:	460c      	mov	r4, r1
	if (addr->sa_family == AF_INET) {
   1a36a:	d10e      	bne.n	1a38a <nrf91_socket_offload_bind+0x2c>
	nrf_out->sin_port = ptr->sin_port;
   1a36c:	884b      	ldrh	r3, [r1, #2]
	nrf_out->sin_len = sizeof(struct nrf_sockaddr_in);
   1a36e:	2210      	movs	r2, #16
	nrf_out->sin_port = ptr->sin_port;
   1a370:	f8ad 300c 	strh.w	r3, [sp, #12]
	nrf_out->sin_family = NRF_AF_INET;
   1a374:	2302      	movs	r3, #2
   1a376:	9302      	str	r3, [sp, #8]
	nrf_out->sin_addr.s_addr = ptr->sin_addr.s_addr;
   1a378:	684b      	ldr	r3, [r1, #4]
	nrf_out->sin_len = sizeof(struct nrf_sockaddr_in);
   1a37a:	f88d 2004 	strb.w	r2, [sp, #4]
	nrf_out->sin_addr.s_addr = ptr->sin_addr.s_addr;
   1a37e:	9304      	str	r3, [sp, #16]
		retval = nrf_bind(sd, (const struct nrf_sockaddr *)&ipv4,
   1a380:	a901      	add	r1, sp, #4
		retval = nrf_bind(sd, (const struct nrf_sockaddr *)&ipv6,
   1a382:	f7f9 fa9d 	bl	138c0 <nrf_bind>
}
   1a386:	b00a      	add	sp, #40	; 0x28
   1a388:	bd70      	pop	{r4, r5, r6, pc}
	} else if (addr->sa_family == AF_INET6) {
   1a38a:	2b02      	cmp	r3, #2
   1a38c:	d112      	bne.n	1a3b4 <nrf91_socket_offload_bind+0x56>
	nrf_out->sin6_port = ptr->sin6_port;
   1a38e:	884b      	ldrh	r3, [r1, #2]
	nrf_out->sin6_len = sizeof(struct nrf_sockaddr_in6);
   1a390:	2524      	movs	r5, #36	; 0x24
	nrf_out->sin6_port = ptr->sin6_port;
   1a392:	f8ad 300c 	strh.w	r3, [sp, #12]
	nrf_out->sin6_family = NRF_AF_INET6;
   1a396:	230a      	movs	r3, #10
	memcpy(nrf_out->sin6_addr.s6_addr, ptr->sin6_addr.s6_addr,
   1a398:	2210      	movs	r2, #16
   1a39a:	3104      	adds	r1, #4
   1a39c:	a805      	add	r0, sp, #20
	nrf_out->sin6_family = NRF_AF_INET6;
   1a39e:	9302      	str	r3, [sp, #8]
	nrf_out->sin6_len = sizeof(struct nrf_sockaddr_in6);
   1a3a0:	f88d 5004 	strb.w	r5, [sp, #4]
	memcpy(nrf_out->sin6_addr.s6_addr, ptr->sin6_addr.s6_addr,
   1a3a4:	f7ff fa84 	bl	198b0 <memcpy>
	nrf_out->sin6_scope_id = (u32_t)ptr->sin6_scope_id;
   1a3a8:	7d23      	ldrb	r3, [r4, #20]
		retval = nrf_bind(sd, (const struct nrf_sockaddr *)&ipv6,
   1a3aa:	462a      	mov	r2, r5
	nrf_out->sin6_scope_id = (u32_t)ptr->sin6_scope_id;
   1a3ac:	9309      	str	r3, [sp, #36]	; 0x24
		retval = nrf_bind(sd, (const struct nrf_sockaddr *)&ipv6,
   1a3ae:	a901      	add	r1, sp, #4
   1a3b0:	4630      	mov	r0, r6
   1a3b2:	e7e6      	b.n	1a382 <nrf91_socket_offload_bind+0x24>
	errno = ENOTSUP;
   1a3b4:	f7ff fc5b 	bl	19c6e <z_errno>
   1a3b8:	2323      	movs	r3, #35	; 0x23
   1a3ba:	6003      	str	r3, [r0, #0]
   1a3bc:	f04f 30ff 	mov.w	r0, #4294967295
   1a3c0:	e7e1      	b.n	1a386 <nrf91_socket_offload_bind+0x28>

0001a3c2 <k_sys_fatal_error_handler>:

extern void sys_arch_reboot(int type);

void k_sys_fatal_error_handler(unsigned int reason,
			       const z_arch_esf_t *esf)
{
   1a3c2:	b508      	push	{r3, lr}
	ARG_UNUSED(reason);

	LOG_PANIC();

	LOG_ERR("Resetting system");
	sys_arch_reboot(0);
   1a3c4:	2000      	movs	r0, #0
   1a3c6:	f7f2 fff1 	bl	d3ac <sys_arch_reboot>

0001a3ca <z_sys_power_save_idle_exit>:
	z_clock_idle_exit();
   1a3ca:	f7ff b935 	b.w	19638 <z_clock_idle_exit>

0001a3ce <k_mem_pool_malloc>:
{
   1a3ce:	b513      	push	{r0, r1, r4, lr}
	return __builtin_add_overflow(a, b, result);
}

static inline bool size_add_overflow(size_t a, size_t b, size_t *result)
{
	return __builtin_add_overflow(a, b, result);
   1a3d0:	2404      	movs	r4, #4
   1a3d2:	190a      	adds	r2, r1, r4
   1a3d4:	d204      	bcs.n	1a3e0 <k_mem_pool_malloc+0x12>
	if (k_mem_pool_alloc(pool, &block, size, K_NO_WAIT) != 0) {
   1a3d6:	2300      	movs	r3, #0
   1a3d8:	4669      	mov	r1, sp
   1a3da:	f7fd f97f 	bl	176dc <k_mem_pool_alloc>
   1a3de:	b110      	cbz	r0, 1a3e6 <k_mem_pool_malloc+0x18>
		return NULL;
   1a3e0:	2000      	movs	r0, #0
}
   1a3e2:	b002      	add	sp, #8
   1a3e4:	bd10      	pop	{r4, pc}
	(void)memcpy(block.data, &block.id, sizeof(struct k_mem_block_id));
   1a3e6:	4622      	mov	r2, r4
   1a3e8:	a901      	add	r1, sp, #4
   1a3ea:	9800      	ldr	r0, [sp, #0]
   1a3ec:	f7ff fa60 	bl	198b0 <memcpy>
	return (char *)block.data + WB_UP(sizeof(struct k_mem_block_id));
   1a3f0:	9800      	ldr	r0, [sp, #0]
   1a3f2:	3004      	adds	r0, #4
   1a3f4:	e7f5      	b.n	1a3e2 <k_mem_pool_malloc+0x14>

0001a3f6 <k_free>:
	if (ptr != NULL) {
   1a3f6:	b110      	cbz	r0, 1a3fe <k_free+0x8>
		k_mem_pool_free_id(ptr);
   1a3f8:	3804      	subs	r0, #4
   1a3fa:	f7fd b9d7 	b.w	177ac <k_mem_pool_free_id>
}
   1a3fe:	4770      	bx	lr

0001a400 <z_is_thread_ready>:
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
   1a400:	7b43      	ldrb	r3, [r0, #13]
   1a402:	06db      	lsls	r3, r3, #27
   1a404:	bf03      	ittte	eq
   1a406:	6980      	ldreq	r0, [r0, #24]
   1a408:	fab0 f080 	clzeq	r0, r0
   1a40c:	0940      	lsreq	r0, r0, #5
   1a40e:	2000      	movne	r0, #0
}
   1a410:	4770      	bx	lr

0001a412 <z_reschedule_irqlock>:
	return arch_irq_unlocked(key) && !arch_is_in_isr();
   1a412:	4603      	mov	r3, r0
   1a414:	b920      	cbnz	r0, 1a420 <z_reschedule_irqlock+0xe>
   1a416:	f3ef 8205 	mrs	r2, IPSR
   1a41a:	b90a      	cbnz	r2, 1a420 <z_reschedule_irqlock+0xe>
   1a41c:	f7f2 bd9e 	b.w	cf5c <arch_swap>
   1a420:	f383 8811 	msr	BASEPRI, r3
   1a424:	f3bf 8f6f 	isb	sy
}
   1a428:	4770      	bx	lr

0001a42a <z_reschedule_unlocked>:
	__asm__ volatile(
   1a42a:	f04f 0320 	mov.w	r3, #32
   1a42e:	f3ef 8011 	mrs	r0, BASEPRI
   1a432:	f383 8811 	msr	BASEPRI, r3
   1a436:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
   1a43a:	f7ff bfea 	b.w	1a412 <z_reschedule_irqlock>

0001a43e <z_priq_dumb_best>:
	return list->head == list;
   1a43e:	6803      	ldr	r3, [r0, #0]
}
   1a440:	4298      	cmp	r0, r3
   1a442:	bf14      	ite	ne
   1a444:	4618      	movne	r0, r3
   1a446:	2000      	moveq	r0, #0
   1a448:	4770      	bx	lr

0001a44a <z_unpend_all>:
{
   1a44a:	b570      	push	{r4, r5, r6, lr}
   1a44c:	4606      	mov	r6, r0
	int need_sched = 0;
   1a44e:	2500      	movs	r5, #0
   1a450:	6834      	ldr	r4, [r6, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1a452:	42a6      	cmp	r6, r4
   1a454:	d000      	beq.n	1a458 <z_unpend_all+0xe>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
   1a456:	b90c      	cbnz	r4, 1a45c <z_unpend_all+0x12>
}
   1a458:	4628      	mov	r0, r5
   1a45a:	bd70      	pop	{r4, r5, r6, pc}
		z_unpend_thread(thread);
   1a45c:	4620      	mov	r0, r4
   1a45e:	f7fd fb79 	bl	17b54 <z_unpend_thread>
	if (z_is_thread_ready(thread)) {
   1a462:	4620      	mov	r0, r4
   1a464:	f7ff ffcc 	bl	1a400 <z_is_thread_ready>
		need_sched = 1;
   1a468:	2501      	movs	r5, #1
   1a46a:	2800      	cmp	r0, #0
   1a46c:	d0f0      	beq.n	1a450 <z_unpend_all+0x6>
		z_add_thread_to_ready_q(thread);
   1a46e:	4620      	mov	r0, r4
   1a470:	f7fd fc78 	bl	17d64 <z_add_thread_to_ready_q>
   1a474:	e7ec      	b.n	1a450 <z_unpend_all+0x6>

0001a476 <z_impl_k_sem_init>:
	CHECKIF(limit == 0U || initial_count > limit) {
   1a476:	b15a      	cbz	r2, 1a490 <z_impl_k_sem_init+0x1a>
   1a478:	428a      	cmp	r2, r1
   1a47a:	d309      	bcc.n	1a490 <z_impl_k_sem_init+0x1a>
	sys_dlist_init(&sem->poll_events);
   1a47c:	f100 0310 	add.w	r3, r0, #16
	sem->limit = limit;
   1a480:	e9c0 1202 	strd	r1, r2, [r0, #8]
	list->tail = (sys_dnode_t *)list;
   1a484:	e9c0 0000 	strd	r0, r0, [r0]
   1a488:	e9c0 3304 	strd	r3, r3, [r0, #16]
	return 0;
   1a48c:	2000      	movs	r0, #0
   1a48e:	4770      	bx	lr
		return -EINVAL;
   1a490:	f06f 0015 	mvn.w	r0, #21
}
   1a494:	4770      	bx	lr

0001a496 <z_new_thread_init>:
{
   1a496:	b510      	push	{r4, lr}
	thread_base->user_options = (u8_t)options;
   1a498:	9c02      	ldr	r4, [sp, #8]
	thread_base->prio = priority;
   1a49a:	7383      	strb	r3, [r0, #14]
	thread_base->user_options = (u8_t)options;
   1a49c:	7304      	strb	r4, [r0, #12]
	thread_base->sched_locked = 0U;
   1a49e:	2300      	movs	r3, #0
	thread_base->thread_state = (u8_t)initial_state;
   1a4a0:	2404      	movs	r4, #4
	thread_base->sched_locked = 0U;
   1a4a2:	73c3      	strb	r3, [r0, #15]
	thread_base->thread_state = (u8_t)initial_state;
   1a4a4:	7344      	strb	r4, [r0, #13]
	node->prev = NULL;
   1a4a6:	e9c0 3306 	strd	r3, r3, [r0, #24]
	thread->fn_abort = NULL;
   1a4aa:	e9c0 3313 	strd	r3, r3, [r0, #76]	; 0x4c
	thread->stack_info.size = (u32_t)stackSize;
   1a4ae:	e9c0 1216 	strd	r1, r2, [r0, #88]	; 0x58
}
   1a4b2:	bd10      	pop	{r4, pc}

0001a4b4 <z_impl_k_uptime_get>:
	return (u32_t)curr_tick;
#endif
}

s64_t z_impl_k_uptime_get(void)
{
   1a4b4:	b510      	push	{r4, lr}
	return k_ticks_to_ms_floor64(z_tick_get());
   1a4b6:	f7fe fd87 	bl	18fc8 <z_tick_get>
		} else {
			return (t * to_hz + off) / from_hz;
   1a4ba:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
   1a4be:	fba0 2304 	umull	r2, r3, r0, r4
   1a4c2:	fb04 3301 	mla	r3, r4, r1, r3
   1a4c6:	0bd0      	lsrs	r0, r2, #15
}
   1a4c8:	ea40 4043 	orr.w	r0, r0, r3, lsl #17
   1a4cc:	0bd9      	lsrs	r1, r3, #15
   1a4ce:	bd10      	pop	{r4, pc}

0001a4d0 <signal_poll_event>:
#include <syscalls/k_poll_mrsh.c>
#endif

/* must be called with interrupts locked */
static int signal_poll_event(struct k_poll_event *event, u32_t state)
{
   1a4d0:	b570      	push	{r4, r5, r6, lr}
	struct _poller *poller = event->poller;
   1a4d2:	6884      	ldr	r4, [r0, #8]
{
   1a4d4:	4605      	mov	r5, r0
   1a4d6:	460e      	mov	r6, r1
	int retcode = 0;

	if (poller) {
   1a4d8:	b19c      	cbz	r4, 1a502 <signal_poll_event+0x32>
		if (poller->cb != NULL) {
   1a4da:	68a3      	ldr	r3, [r4, #8]
   1a4dc:	b95b      	cbnz	r3, 1a4f6 <signal_poll_event+0x26>
	int retcode = 0;
   1a4de:	4618      	mov	r0, r3
			retcode = poller->cb(event, state);
		}

		poller->is_polling = false;
   1a4e0:	7023      	strb	r3, [r4, #0]
	event->poller = NULL;
   1a4e2:	2300      	movs	r3, #0
   1a4e4:	60ab      	str	r3, [r5, #8]
	event->state |= state;
   1a4e6:	68eb      	ldr	r3, [r5, #12]
   1a4e8:	f3c3 3204 	ubfx	r2, r3, #12, #5
   1a4ec:	4316      	orrs	r6, r2
   1a4ee:	f366 3310 	bfi	r3, r6, #12, #5
   1a4f2:	60eb      	str	r3, [r5, #12]
			return retcode;
		}
	}

	set_event_ready(event, state);
	return retcode;
   1a4f4:	e004      	b.n	1a500 <signal_poll_event+0x30>
			retcode = poller->cb(event, state);
   1a4f6:	4798      	blx	r3
		poller->is_polling = false;
   1a4f8:	2300      	movs	r3, #0
		if (retcode < 0) {
   1a4fa:	2800      	cmp	r0, #0
		poller->is_polling = false;
   1a4fc:	7023      	strb	r3, [r4, #0]
		if (retcode < 0) {
   1a4fe:	daf0      	bge.n	1a4e2 <signal_poll_event+0x12>
}
   1a500:	bd70      	pop	{r4, r5, r6, pc}
	int retcode = 0;
   1a502:	4620      	mov	r0, r4
   1a504:	e7ed      	b.n	1a4e2 <signal_poll_event+0x12>

0001a506 <z_handle_obj_poll_events>:
	return list->head == list;
   1a506:	6803      	ldr	r3, [r0, #0]
	if (!sys_dlist_is_empty(list)) {
   1a508:	4298      	cmp	r0, r3
   1a50a:	d009      	beq.n	1a520 <z_handle_obj_poll_events+0x1a>
	node->prev->next = node->next;
   1a50c:	e9d3 2000 	ldrd	r2, r0, [r3]
   1a510:	6002      	str	r2, [r0, #0]
	node->next->prev = node->prev;
   1a512:	6050      	str	r0, [r2, #4]
	node->next = NULL;
   1a514:	2200      	movs	r2, #0
{
	struct k_poll_event *poll_event;

	poll_event = (struct k_poll_event *)sys_dlist_get(events);
	if (poll_event != NULL) {
		(void) signal_poll_event(poll_event, state);
   1a516:	4618      	mov	r0, r3
	node->prev = NULL;
   1a518:	e9c3 2200 	strd	r2, r2, [r3]
   1a51c:	f7ff bfd8 	b.w	1a4d0 <signal_poll_event>
	}
}
   1a520:	4770      	bx	lr

0001a522 <_OffsetAbsSyms>:
					    sizeof(struct _preempt_float));
#else
GEN_ABSOLUTE_SYM(_K_THREAD_NO_FLOAT_SIZEOF, sizeof(struct k_thread));
#endif

GEN_ABS_SYM_END
   1a522:	4770      	bx	lr
