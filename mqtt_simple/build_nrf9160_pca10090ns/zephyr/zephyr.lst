
zephyr.elf:     file format elf32-littlearm


Disassembly of section rom_start:

0000c000 <_vector_table>:
    c000:	20023de8 	.word	0x20023de8
    c004:	0000f301 	.word	0x0000f301
    c008:	0001ff7f 	.word	0x0001ff7f
    c00c:	0000ef61 	.word	0x0000ef61
    c010:	0000ef61 	.word	0x0000ef61
    c014:	0000ef61 	.word	0x0000ef61
    c018:	0000ef61 	.word	0x0000ef61
    c01c:	0000ef61 	.word	0x0000ef61
    c020:	0000ef61 	.word	0x0000ef61
    c024:	0000ef61 	.word	0x0000ef61
    c028:	0000ef61 	.word	0x0000ef61
    c02c:	0000ef29 	.word	0x0000ef29
    c030:	0000ef61 	.word	0x0000ef61
    c034:	0000ef61 	.word	0x0000ef61
    c038:	0000ee79 	.word	0x0000ee79
    c03c:	0000eab5 	.word	0x0000eab5

0000c040 <_irq_vector_table>:
    c040:	0000ef7d 0000ef7d 0000ef7d 0000ef7d     }...}...}...}...
    c050:	0000ef7d 0000ef7d 0000ef7d 0000ef7d     }...}...}...}...
    c060:	0000ef7d 0000ef7d 0000ef7d 0000ef7d     }...}...}...}...
    c070:	0000ef7d 0000ef7d 0000ef7d 0000ef7d     }...}...}...}...
    c080:	0000ef7d 0000ef7d 0000ef7d 0000ef7d     }...}...}...}...
    c090:	0000ef7d 0000ef7d 0000ef7d 0000ef7d     }...}...}...}...
    c0a0:	0000ef7d 0000ef7d 0000ef7d 0000ef7d     }...}...}...}...
    c0b0:	00010eed 00020c35 0000ef7d 0000ef7d     ....5...}...}...
    c0c0:	0000ef7d 0000ef7d 0000ef7d 0000ef7d     }...}...}...}...
    c0d0:	0000ef7d 0000ef7d 0000ef7d 0000ef7d     }...}...}...}...
    c0e0:	0000ef7d 0000ef7d 00020c53 0000ef7d     }...}...S...}...
    c0f0:	0000ef7d 0000ef7d 0000ef7d 0000ef7d     }...}...}...}...
    c100:	0000ef7d 0000ef7d 0000ef7d 0000ef7d     }...}...}...}...
    c110:	0000ef7d 0000ef7d 0000ef7d 0000ef7d     }...}...}...}...
    c120:	0000ef7d 0000ef7d 0000ef7d 0000ef7d     }...}...}...}...
    c130:	0000ef7d 0000ef7d 0000ef7d 0000ef7d     }...}...}...}...
    c140:	0000ef7d                                }...

0000c144 <_vector_end>:
	...

0000c200 <m_firmware_info>:
    c200:	281ee6de 8fcebb4c 00005b02 0000003c     ...(L....[..<...
    c210:	00019bb8 00000001 0000c000 0000c000     ................
    c220:	9102ffff 00000000 00000000 00000000     ................
	...

Disassembly of section text:

0000c240 <__aeabi_drsub>:
    c240:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
    c244:	e002      	b.n	c24c <__adddf3>
    c246:	bf00      	nop

0000c248 <__aeabi_dsub>:
    c248:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0000c24c <__adddf3>:
    c24c:	b530      	push	{r4, r5, lr}
    c24e:	ea4f 0441 	mov.w	r4, r1, lsl #1
    c252:	ea4f 0543 	mov.w	r5, r3, lsl #1
    c256:	ea94 0f05 	teq	r4, r5
    c25a:	bf08      	it	eq
    c25c:	ea90 0f02 	teqeq	r0, r2
    c260:	bf1f      	itttt	ne
    c262:	ea54 0c00 	orrsne.w	ip, r4, r0
    c266:	ea55 0c02 	orrsne.w	ip, r5, r2
    c26a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
    c26e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
    c272:	f000 80e2 	beq.w	c43a <__adddf3+0x1ee>
    c276:	ea4f 5454 	mov.w	r4, r4, lsr #21
    c27a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
    c27e:	bfb8      	it	lt
    c280:	426d      	neglt	r5, r5
    c282:	dd0c      	ble.n	c29e <__adddf3+0x52>
    c284:	442c      	add	r4, r5
    c286:	ea80 0202 	eor.w	r2, r0, r2
    c28a:	ea81 0303 	eor.w	r3, r1, r3
    c28e:	ea82 0000 	eor.w	r0, r2, r0
    c292:	ea83 0101 	eor.w	r1, r3, r1
    c296:	ea80 0202 	eor.w	r2, r0, r2
    c29a:	ea81 0303 	eor.w	r3, r1, r3
    c29e:	2d36      	cmp	r5, #54	; 0x36
    c2a0:	bf88      	it	hi
    c2a2:	bd30      	pophi	{r4, r5, pc}
    c2a4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
    c2a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
    c2ac:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
    c2b0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
    c2b4:	d002      	beq.n	c2bc <__adddf3+0x70>
    c2b6:	4240      	negs	r0, r0
    c2b8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
    c2bc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
    c2c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
    c2c4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
    c2c8:	d002      	beq.n	c2d0 <__adddf3+0x84>
    c2ca:	4252      	negs	r2, r2
    c2cc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
    c2d0:	ea94 0f05 	teq	r4, r5
    c2d4:	f000 80a7 	beq.w	c426 <__adddf3+0x1da>
    c2d8:	f1a4 0401 	sub.w	r4, r4, #1
    c2dc:	f1d5 0e20 	rsbs	lr, r5, #32
    c2e0:	db0d      	blt.n	c2fe <__adddf3+0xb2>
    c2e2:	fa02 fc0e 	lsl.w	ip, r2, lr
    c2e6:	fa22 f205 	lsr.w	r2, r2, r5
    c2ea:	1880      	adds	r0, r0, r2
    c2ec:	f141 0100 	adc.w	r1, r1, #0
    c2f0:	fa03 f20e 	lsl.w	r2, r3, lr
    c2f4:	1880      	adds	r0, r0, r2
    c2f6:	fa43 f305 	asr.w	r3, r3, r5
    c2fa:	4159      	adcs	r1, r3
    c2fc:	e00e      	b.n	c31c <__adddf3+0xd0>
    c2fe:	f1a5 0520 	sub.w	r5, r5, #32
    c302:	f10e 0e20 	add.w	lr, lr, #32
    c306:	2a01      	cmp	r2, #1
    c308:	fa03 fc0e 	lsl.w	ip, r3, lr
    c30c:	bf28      	it	cs
    c30e:	f04c 0c02 	orrcs.w	ip, ip, #2
    c312:	fa43 f305 	asr.w	r3, r3, r5
    c316:	18c0      	adds	r0, r0, r3
    c318:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
    c31c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
    c320:	d507      	bpl.n	c332 <__adddf3+0xe6>
    c322:	f04f 0e00 	mov.w	lr, #0
    c326:	f1dc 0c00 	rsbs	ip, ip, #0
    c32a:	eb7e 0000 	sbcs.w	r0, lr, r0
    c32e:	eb6e 0101 	sbc.w	r1, lr, r1
    c332:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
    c336:	d31b      	bcc.n	c370 <__adddf3+0x124>
    c338:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
    c33c:	d30c      	bcc.n	c358 <__adddf3+0x10c>
    c33e:	0849      	lsrs	r1, r1, #1
    c340:	ea5f 0030 	movs.w	r0, r0, rrx
    c344:	ea4f 0c3c 	mov.w	ip, ip, rrx
    c348:	f104 0401 	add.w	r4, r4, #1
    c34c:	ea4f 5244 	mov.w	r2, r4, lsl #21
    c350:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
    c354:	f080 809a 	bcs.w	c48c <__adddf3+0x240>
    c358:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
    c35c:	bf08      	it	eq
    c35e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
    c362:	f150 0000 	adcs.w	r0, r0, #0
    c366:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
    c36a:	ea41 0105 	orr.w	r1, r1, r5
    c36e:	bd30      	pop	{r4, r5, pc}
    c370:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
    c374:	4140      	adcs	r0, r0
    c376:	eb41 0101 	adc.w	r1, r1, r1
    c37a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
    c37e:	f1a4 0401 	sub.w	r4, r4, #1
    c382:	d1e9      	bne.n	c358 <__adddf3+0x10c>
    c384:	f091 0f00 	teq	r1, #0
    c388:	bf04      	itt	eq
    c38a:	4601      	moveq	r1, r0
    c38c:	2000      	moveq	r0, #0
    c38e:	fab1 f381 	clz	r3, r1
    c392:	bf08      	it	eq
    c394:	3320      	addeq	r3, #32
    c396:	f1a3 030b 	sub.w	r3, r3, #11
    c39a:	f1b3 0220 	subs.w	r2, r3, #32
    c39e:	da0c      	bge.n	c3ba <__adddf3+0x16e>
    c3a0:	320c      	adds	r2, #12
    c3a2:	dd08      	ble.n	c3b6 <__adddf3+0x16a>
    c3a4:	f102 0c14 	add.w	ip, r2, #20
    c3a8:	f1c2 020c 	rsb	r2, r2, #12
    c3ac:	fa01 f00c 	lsl.w	r0, r1, ip
    c3b0:	fa21 f102 	lsr.w	r1, r1, r2
    c3b4:	e00c      	b.n	c3d0 <__adddf3+0x184>
    c3b6:	f102 0214 	add.w	r2, r2, #20
    c3ba:	bfd8      	it	le
    c3bc:	f1c2 0c20 	rsble	ip, r2, #32
    c3c0:	fa01 f102 	lsl.w	r1, r1, r2
    c3c4:	fa20 fc0c 	lsr.w	ip, r0, ip
    c3c8:	bfdc      	itt	le
    c3ca:	ea41 010c 	orrle.w	r1, r1, ip
    c3ce:	4090      	lslle	r0, r2
    c3d0:	1ae4      	subs	r4, r4, r3
    c3d2:	bfa2      	ittt	ge
    c3d4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
    c3d8:	4329      	orrge	r1, r5
    c3da:	bd30      	popge	{r4, r5, pc}
    c3dc:	ea6f 0404 	mvn.w	r4, r4
    c3e0:	3c1f      	subs	r4, #31
    c3e2:	da1c      	bge.n	c41e <__adddf3+0x1d2>
    c3e4:	340c      	adds	r4, #12
    c3e6:	dc0e      	bgt.n	c406 <__adddf3+0x1ba>
    c3e8:	f104 0414 	add.w	r4, r4, #20
    c3ec:	f1c4 0220 	rsb	r2, r4, #32
    c3f0:	fa20 f004 	lsr.w	r0, r0, r4
    c3f4:	fa01 f302 	lsl.w	r3, r1, r2
    c3f8:	ea40 0003 	orr.w	r0, r0, r3
    c3fc:	fa21 f304 	lsr.w	r3, r1, r4
    c400:	ea45 0103 	orr.w	r1, r5, r3
    c404:	bd30      	pop	{r4, r5, pc}
    c406:	f1c4 040c 	rsb	r4, r4, #12
    c40a:	f1c4 0220 	rsb	r2, r4, #32
    c40e:	fa20 f002 	lsr.w	r0, r0, r2
    c412:	fa01 f304 	lsl.w	r3, r1, r4
    c416:	ea40 0003 	orr.w	r0, r0, r3
    c41a:	4629      	mov	r1, r5
    c41c:	bd30      	pop	{r4, r5, pc}
    c41e:	fa21 f004 	lsr.w	r0, r1, r4
    c422:	4629      	mov	r1, r5
    c424:	bd30      	pop	{r4, r5, pc}
    c426:	f094 0f00 	teq	r4, #0
    c42a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
    c42e:	bf06      	itte	eq
    c430:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
    c434:	3401      	addeq	r4, #1
    c436:	3d01      	subne	r5, #1
    c438:	e74e      	b.n	c2d8 <__adddf3+0x8c>
    c43a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
    c43e:	bf18      	it	ne
    c440:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
    c444:	d029      	beq.n	c49a <__adddf3+0x24e>
    c446:	ea94 0f05 	teq	r4, r5
    c44a:	bf08      	it	eq
    c44c:	ea90 0f02 	teqeq	r0, r2
    c450:	d005      	beq.n	c45e <__adddf3+0x212>
    c452:	ea54 0c00 	orrs.w	ip, r4, r0
    c456:	bf04      	itt	eq
    c458:	4619      	moveq	r1, r3
    c45a:	4610      	moveq	r0, r2
    c45c:	bd30      	pop	{r4, r5, pc}
    c45e:	ea91 0f03 	teq	r1, r3
    c462:	bf1e      	ittt	ne
    c464:	2100      	movne	r1, #0
    c466:	2000      	movne	r0, #0
    c468:	bd30      	popne	{r4, r5, pc}
    c46a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
    c46e:	d105      	bne.n	c47c <__adddf3+0x230>
    c470:	0040      	lsls	r0, r0, #1
    c472:	4149      	adcs	r1, r1
    c474:	bf28      	it	cs
    c476:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
    c47a:	bd30      	pop	{r4, r5, pc}
    c47c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
    c480:	bf3c      	itt	cc
    c482:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
    c486:	bd30      	popcc	{r4, r5, pc}
    c488:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
    c48c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
    c490:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
    c494:	f04f 0000 	mov.w	r0, #0
    c498:	bd30      	pop	{r4, r5, pc}
    c49a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
    c49e:	bf1a      	itte	ne
    c4a0:	4619      	movne	r1, r3
    c4a2:	4610      	movne	r0, r2
    c4a4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
    c4a8:	bf1c      	itt	ne
    c4aa:	460b      	movne	r3, r1
    c4ac:	4602      	movne	r2, r0
    c4ae:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
    c4b2:	bf06      	itte	eq
    c4b4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
    c4b8:	ea91 0f03 	teqeq	r1, r3
    c4bc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
    c4c0:	bd30      	pop	{r4, r5, pc}
    c4c2:	bf00      	nop

0000c4c4 <__aeabi_ui2d>:
    c4c4:	f090 0f00 	teq	r0, #0
    c4c8:	bf04      	itt	eq
    c4ca:	2100      	moveq	r1, #0
    c4cc:	4770      	bxeq	lr
    c4ce:	b530      	push	{r4, r5, lr}
    c4d0:	f44f 6480 	mov.w	r4, #1024	; 0x400
    c4d4:	f104 0432 	add.w	r4, r4, #50	; 0x32
    c4d8:	f04f 0500 	mov.w	r5, #0
    c4dc:	f04f 0100 	mov.w	r1, #0
    c4e0:	e750      	b.n	c384 <__adddf3+0x138>
    c4e2:	bf00      	nop

0000c4e4 <__aeabi_i2d>:
    c4e4:	f090 0f00 	teq	r0, #0
    c4e8:	bf04      	itt	eq
    c4ea:	2100      	moveq	r1, #0
    c4ec:	4770      	bxeq	lr
    c4ee:	b530      	push	{r4, r5, lr}
    c4f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
    c4f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
    c4f8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
    c4fc:	bf48      	it	mi
    c4fe:	4240      	negmi	r0, r0
    c500:	f04f 0100 	mov.w	r1, #0
    c504:	e73e      	b.n	c384 <__adddf3+0x138>
    c506:	bf00      	nop

0000c508 <__aeabi_f2d>:
    c508:	0042      	lsls	r2, r0, #1
    c50a:	ea4f 01e2 	mov.w	r1, r2, asr #3
    c50e:	ea4f 0131 	mov.w	r1, r1, rrx
    c512:	ea4f 7002 	mov.w	r0, r2, lsl #28
    c516:	bf1f      	itttt	ne
    c518:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
    c51c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
    c520:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
    c524:	4770      	bxne	lr
    c526:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
    c52a:	bf08      	it	eq
    c52c:	4770      	bxeq	lr
    c52e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
    c532:	bf04      	itt	eq
    c534:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
    c538:	4770      	bxeq	lr
    c53a:	b530      	push	{r4, r5, lr}
    c53c:	f44f 7460 	mov.w	r4, #896	; 0x380
    c540:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
    c544:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
    c548:	e71c      	b.n	c384 <__adddf3+0x138>
    c54a:	bf00      	nop

0000c54c <__aeabi_ul2d>:
    c54c:	ea50 0201 	orrs.w	r2, r0, r1
    c550:	bf08      	it	eq
    c552:	4770      	bxeq	lr
    c554:	b530      	push	{r4, r5, lr}
    c556:	f04f 0500 	mov.w	r5, #0
    c55a:	e00a      	b.n	c572 <__aeabi_l2d+0x16>

0000c55c <__aeabi_l2d>:
    c55c:	ea50 0201 	orrs.w	r2, r0, r1
    c560:	bf08      	it	eq
    c562:	4770      	bxeq	lr
    c564:	b530      	push	{r4, r5, lr}
    c566:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
    c56a:	d502      	bpl.n	c572 <__aeabi_l2d+0x16>
    c56c:	4240      	negs	r0, r0
    c56e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
    c572:	f44f 6480 	mov.w	r4, #1024	; 0x400
    c576:	f104 0432 	add.w	r4, r4, #50	; 0x32
    c57a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
    c57e:	f43f aed8 	beq.w	c332 <__adddf3+0xe6>
    c582:	f04f 0203 	mov.w	r2, #3
    c586:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
    c58a:	bf18      	it	ne
    c58c:	3203      	addne	r2, #3
    c58e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
    c592:	bf18      	it	ne
    c594:	3203      	addne	r2, #3
    c596:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
    c59a:	f1c2 0320 	rsb	r3, r2, #32
    c59e:	fa00 fc03 	lsl.w	ip, r0, r3
    c5a2:	fa20 f002 	lsr.w	r0, r0, r2
    c5a6:	fa01 fe03 	lsl.w	lr, r1, r3
    c5aa:	ea40 000e 	orr.w	r0, r0, lr
    c5ae:	fa21 f102 	lsr.w	r1, r1, r2
    c5b2:	4414      	add	r4, r2
    c5b4:	e6bd      	b.n	c332 <__adddf3+0xe6>
    c5b6:	bf00      	nop

0000c5b8 <__aeabi_uldivmod>:
    c5b8:	b953      	cbnz	r3, c5d0 <__aeabi_uldivmod+0x18>
    c5ba:	b94a      	cbnz	r2, c5d0 <__aeabi_uldivmod+0x18>
    c5bc:	2900      	cmp	r1, #0
    c5be:	bf08      	it	eq
    c5c0:	2800      	cmpeq	r0, #0
    c5c2:	bf1c      	itt	ne
    c5c4:	f04f 31ff 	movne.w	r1, #4294967295
    c5c8:	f04f 30ff 	movne.w	r0, #4294967295
    c5cc:	f000 b970 	b.w	c8b0 <__aeabi_idiv0>
    c5d0:	f1ad 0c08 	sub.w	ip, sp, #8
    c5d4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
    c5d8:	f000 f806 	bl	c5e8 <__udivmoddi4>
    c5dc:	f8dd e004 	ldr.w	lr, [sp, #4]
    c5e0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    c5e4:	b004      	add	sp, #16
    c5e6:	4770      	bx	lr

0000c5e8 <__udivmoddi4>:
    c5e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    c5ec:	9e09      	ldr	r6, [sp, #36]	; 0x24
    c5ee:	4604      	mov	r4, r0
    c5f0:	4689      	mov	r9, r1
    c5f2:	2b00      	cmp	r3, #0
    c5f4:	f040 8083 	bne.w	c6fe <__udivmoddi4+0x116>
    c5f8:	428a      	cmp	r2, r1
    c5fa:	4615      	mov	r5, r2
    c5fc:	d945      	bls.n	c68a <__udivmoddi4+0xa2>
    c5fe:	fab2 f282 	clz	r2, r2
    c602:	b14a      	cbz	r2, c618 <__udivmoddi4+0x30>
    c604:	f1c2 0720 	rsb	r7, r2, #32
    c608:	fa01 f302 	lsl.w	r3, r1, r2
    c60c:	4095      	lsls	r5, r2
    c60e:	4094      	lsls	r4, r2
    c610:	fa20 f707 	lsr.w	r7, r0, r7
    c614:	ea47 0903 	orr.w	r9, r7, r3
    c618:	ea4f 4e15 	mov.w	lr, r5, lsr #16
    c61c:	0c23      	lsrs	r3, r4, #16
    c61e:	fa1f f885 	uxth.w	r8, r5
    c622:	fbb9 fcfe 	udiv	ip, r9, lr
    c626:	fb0e 991c 	mls	r9, lr, ip, r9
    c62a:	fb0c f108 	mul.w	r1, ip, r8
    c62e:	ea43 4309 	orr.w	r3, r3, r9, lsl #16
    c632:	4299      	cmp	r1, r3
    c634:	d90a      	bls.n	c64c <__udivmoddi4+0x64>
    c636:	18eb      	adds	r3, r5, r3
    c638:	bf2c      	ite	cs
    c63a:	2001      	movcs	r0, #1
    c63c:	2000      	movcc	r0, #0
    c63e:	4299      	cmp	r1, r3
    c640:	d902      	bls.n	c648 <__udivmoddi4+0x60>
    c642:	2800      	cmp	r0, #0
    c644:	f000 811d 	beq.w	c882 <__udivmoddi4+0x29a>
    c648:	f10c 3cff 	add.w	ip, ip, #4294967295
    c64c:	1a59      	subs	r1, r3, r1
    c64e:	b2a3      	uxth	r3, r4
    c650:	fbb1 f0fe 	udiv	r0, r1, lr
    c654:	fb0e 1110 	mls	r1, lr, r0, r1
    c658:	fb00 f808 	mul.w	r8, r0, r8
    c65c:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
    c660:	45a0      	cmp	r8, r4
    c662:	d905      	bls.n	c670 <__udivmoddi4+0x88>
    c664:	192c      	adds	r4, r5, r4
    c666:	d202      	bcs.n	c66e <__udivmoddi4+0x86>
    c668:	45a0      	cmp	r8, r4
    c66a:	f200 810e 	bhi.w	c88a <__udivmoddi4+0x2a2>
    c66e:	3801      	subs	r0, #1
    c670:	eba4 0408 	sub.w	r4, r4, r8
    c674:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
    c678:	2700      	movs	r7, #0
    c67a:	b11e      	cbz	r6, c684 <__udivmoddi4+0x9c>
    c67c:	40d4      	lsrs	r4, r2
    c67e:	2300      	movs	r3, #0
    c680:	e9c6 4300 	strd	r4, r3, [r6]
    c684:	4639      	mov	r1, r7
    c686:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    c68a:	2a00      	cmp	r2, #0
    c68c:	d051      	beq.n	c732 <__udivmoddi4+0x14a>
    c68e:	fab2 f282 	clz	r2, r2
    c692:	2a00      	cmp	r2, #0
    c694:	f040 80af 	bne.w	c7f6 <__udivmoddi4+0x20e>
    c698:	1b49      	subs	r1, r1, r5
    c69a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
    c69e:	fa1f f885 	uxth.w	r8, r5
    c6a2:	2701      	movs	r7, #1
    c6a4:	0c23      	lsrs	r3, r4, #16
    c6a6:	fbb1 fcfe 	udiv	ip, r1, lr
    c6aa:	fb0e 111c 	mls	r1, lr, ip, r1
    c6ae:	fb08 f00c 	mul.w	r0, r8, ip
    c6b2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
    c6b6:	4298      	cmp	r0, r3
    c6b8:	d90a      	bls.n	c6d0 <__udivmoddi4+0xe8>
    c6ba:	18eb      	adds	r3, r5, r3
    c6bc:	bf2c      	ite	cs
    c6be:	2101      	movcs	r1, #1
    c6c0:	2100      	movcc	r1, #0
    c6c2:	4298      	cmp	r0, r3
    c6c4:	d902      	bls.n	c6cc <__udivmoddi4+0xe4>
    c6c6:	2900      	cmp	r1, #0
    c6c8:	f000 80d7 	beq.w	c87a <__udivmoddi4+0x292>
    c6cc:	f10c 3cff 	add.w	ip, ip, #4294967295
    c6d0:	1a19      	subs	r1, r3, r0
    c6d2:	b2a3      	uxth	r3, r4
    c6d4:	fbb1 f0fe 	udiv	r0, r1, lr
    c6d8:	fb0e 1110 	mls	r1, lr, r0, r1
    c6dc:	fb08 f800 	mul.w	r8, r8, r0
    c6e0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
    c6e4:	45a0      	cmp	r8, r4
    c6e6:	d905      	bls.n	c6f4 <__udivmoddi4+0x10c>
    c6e8:	192c      	adds	r4, r5, r4
    c6ea:	d202      	bcs.n	c6f2 <__udivmoddi4+0x10a>
    c6ec:	45a0      	cmp	r8, r4
    c6ee:	f200 80c1 	bhi.w	c874 <__udivmoddi4+0x28c>
    c6f2:	3801      	subs	r0, #1
    c6f4:	eba4 0408 	sub.w	r4, r4, r8
    c6f8:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
    c6fc:	e7bd      	b.n	c67a <__udivmoddi4+0x92>
    c6fe:	428b      	cmp	r3, r1
    c700:	d908      	bls.n	c714 <__udivmoddi4+0x12c>
    c702:	2e00      	cmp	r6, #0
    c704:	d074      	beq.n	c7f0 <__udivmoddi4+0x208>
    c706:	2700      	movs	r7, #0
    c708:	e9c6 0100 	strd	r0, r1, [r6]
    c70c:	4638      	mov	r0, r7
    c70e:	4639      	mov	r1, r7
    c710:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    c714:	fab3 f783 	clz	r7, r3
    c718:	b967      	cbnz	r7, c734 <__udivmoddi4+0x14c>
    c71a:	428b      	cmp	r3, r1
    c71c:	f0c0 80a4 	bcc.w	c868 <__udivmoddi4+0x280>
    c720:	4282      	cmp	r2, r0
    c722:	f240 80a1 	bls.w	c868 <__udivmoddi4+0x280>
    c726:	4638      	mov	r0, r7
    c728:	2e00      	cmp	r6, #0
    c72a:	d0ab      	beq.n	c684 <__udivmoddi4+0x9c>
    c72c:	e9c6 4900 	strd	r4, r9, [r6]
    c730:	e7a8      	b.n	c684 <__udivmoddi4+0x9c>
    c732:	deff      	udf	#255	; 0xff
    c734:	f1c7 0520 	rsb	r5, r7, #32
    c738:	40bb      	lsls	r3, r7
    c73a:	fa02 fc07 	lsl.w	ip, r2, r7
    c73e:	fa01 f407 	lsl.w	r4, r1, r7
    c742:	40ea      	lsrs	r2, r5
    c744:	fa20 f805 	lsr.w	r8, r0, r5
    c748:	40e9      	lsrs	r1, r5
    c74a:	fa00 fe07 	lsl.w	lr, r0, r7
    c74e:	431a      	orrs	r2, r3
    c750:	ea48 0404 	orr.w	r4, r8, r4
    c754:	ea4f 4812 	mov.w	r8, r2, lsr #16
    c758:	0c20      	lsrs	r0, r4, #16
    c75a:	fa1f f982 	uxth.w	r9, r2
    c75e:	fbb1 faf8 	udiv	sl, r1, r8
    c762:	fb08 111a 	mls	r1, r8, sl, r1
    c766:	fb0a fb09 	mul.w	fp, sl, r9
    c76a:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
    c76e:	458b      	cmp	fp, r1
    c770:	d90a      	bls.n	c788 <__udivmoddi4+0x1a0>
    c772:	1851      	adds	r1, r2, r1
    c774:	bf2c      	ite	cs
    c776:	2301      	movcs	r3, #1
    c778:	2300      	movcc	r3, #0
    c77a:	458b      	cmp	fp, r1
    c77c:	d902      	bls.n	c784 <__udivmoddi4+0x19c>
    c77e:	2b00      	cmp	r3, #0
    c780:	f000 8088 	beq.w	c894 <__udivmoddi4+0x2ac>
    c784:	f10a 3aff 	add.w	sl, sl, #4294967295
    c788:	eba1 010b 	sub.w	r1, r1, fp
    c78c:	b2a4      	uxth	r4, r4
    c78e:	fbb1 f0f8 	udiv	r0, r1, r8
    c792:	fb08 1110 	mls	r1, r8, r0, r1
    c796:	fb00 f909 	mul.w	r9, r0, r9
    c79a:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
    c79e:	4589      	cmp	r9, r1
    c7a0:	d904      	bls.n	c7ac <__udivmoddi4+0x1c4>
    c7a2:	1851      	adds	r1, r2, r1
    c7a4:	d201      	bcs.n	c7aa <__udivmoddi4+0x1c2>
    c7a6:	4589      	cmp	r9, r1
    c7a8:	d87b      	bhi.n	c8a2 <__udivmoddi4+0x2ba>
    c7aa:	3801      	subs	r0, #1
    c7ac:	ea40 400a 	orr.w	r0, r0, sl, lsl #16
    c7b0:	eba1 0109 	sub.w	r1, r1, r9
    c7b4:	fba0 890c 	umull	r8, r9, r0, ip
    c7b8:	4549      	cmp	r1, r9
    c7ba:	4644      	mov	r4, r8
    c7bc:	464b      	mov	r3, r9
    c7be:	d302      	bcc.n	c7c6 <__udivmoddi4+0x1de>
    c7c0:	d106      	bne.n	c7d0 <__udivmoddi4+0x1e8>
    c7c2:	45c6      	cmp	lr, r8
    c7c4:	d204      	bcs.n	c7d0 <__udivmoddi4+0x1e8>
    c7c6:	3801      	subs	r0, #1
    c7c8:	ebb8 040c 	subs.w	r4, r8, ip
    c7cc:	eb69 0302 	sbc.w	r3, r9, r2
    c7d0:	2e00      	cmp	r6, #0
    c7d2:	d05d      	beq.n	c890 <__udivmoddi4+0x2a8>
    c7d4:	ebbe 0204 	subs.w	r2, lr, r4
    c7d8:	eb61 0103 	sbc.w	r1, r1, r3
    c7dc:	fa01 f505 	lsl.w	r5, r1, r5
    c7e0:	fa22 f307 	lsr.w	r3, r2, r7
    c7e4:	40f9      	lsrs	r1, r7
    c7e6:	2700      	movs	r7, #0
    c7e8:	431d      	orrs	r5, r3
    c7ea:	e9c6 5100 	strd	r5, r1, [r6]
    c7ee:	e749      	b.n	c684 <__udivmoddi4+0x9c>
    c7f0:	4637      	mov	r7, r6
    c7f2:	4630      	mov	r0, r6
    c7f4:	e746      	b.n	c684 <__udivmoddi4+0x9c>
    c7f6:	f1c2 0020 	rsb	r0, r2, #32
    c7fa:	4095      	lsls	r5, r2
    c7fc:	fa01 f702 	lsl.w	r7, r1, r2
    c800:	fa21 f300 	lsr.w	r3, r1, r0
    c804:	ea4f 4e15 	mov.w	lr, r5, lsr #16
    c808:	fa24 f100 	lsr.w	r1, r4, r0
    c80c:	fa1f f885 	uxth.w	r8, r5
    c810:	4094      	lsls	r4, r2
    c812:	4339      	orrs	r1, r7
    c814:	fbb3 f0fe 	udiv	r0, r3, lr
    c818:	0c0f      	lsrs	r7, r1, #16
    c81a:	fb0e 3310 	mls	r3, lr, r0, r3
    c81e:	fb00 fc08 	mul.w	ip, r0, r8
    c822:	ea47 4303 	orr.w	r3, r7, r3, lsl #16
    c826:	459c      	cmp	ip, r3
    c828:	d907      	bls.n	c83a <__udivmoddi4+0x252>
    c82a:	18eb      	adds	r3, r5, r3
    c82c:	bf2c      	ite	cs
    c82e:	2701      	movcs	r7, #1
    c830:	2700      	movcc	r7, #0
    c832:	459c      	cmp	ip, r3
    c834:	d900      	bls.n	c838 <__udivmoddi4+0x250>
    c836:	b38f      	cbz	r7, c89c <__udivmoddi4+0x2b4>
    c838:	3801      	subs	r0, #1
    c83a:	eba3 030c 	sub.w	r3, r3, ip
    c83e:	b289      	uxth	r1, r1
    c840:	fbb3 f7fe 	udiv	r7, r3, lr
    c844:	fb0e 3317 	mls	r3, lr, r7, r3
    c848:	fb07 fc08 	mul.w	ip, r7, r8
    c84c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
    c850:	458c      	cmp	ip, r1
    c852:	d904      	bls.n	c85e <__udivmoddi4+0x276>
    c854:	1869      	adds	r1, r5, r1
    c856:	d201      	bcs.n	c85c <__udivmoddi4+0x274>
    c858:	458c      	cmp	ip, r1
    c85a:	d825      	bhi.n	c8a8 <__udivmoddi4+0x2c0>
    c85c:	3f01      	subs	r7, #1
    c85e:	eba1 010c 	sub.w	r1, r1, ip
    c862:	ea47 4700 	orr.w	r7, r7, r0, lsl #16
    c866:	e71d      	b.n	c6a4 <__udivmoddi4+0xbc>
    c868:	1a84      	subs	r4, r0, r2
    c86a:	eb61 0303 	sbc.w	r3, r1, r3
    c86e:	2001      	movs	r0, #1
    c870:	4699      	mov	r9, r3
    c872:	e759      	b.n	c728 <__udivmoddi4+0x140>
    c874:	3802      	subs	r0, #2
    c876:	442c      	add	r4, r5
    c878:	e73c      	b.n	c6f4 <__udivmoddi4+0x10c>
    c87a:	f1ac 0c02 	sub.w	ip, ip, #2
    c87e:	442b      	add	r3, r5
    c880:	e726      	b.n	c6d0 <__udivmoddi4+0xe8>
    c882:	f1ac 0c02 	sub.w	ip, ip, #2
    c886:	442b      	add	r3, r5
    c888:	e6e0      	b.n	c64c <__udivmoddi4+0x64>
    c88a:	3802      	subs	r0, #2
    c88c:	442c      	add	r4, r5
    c88e:	e6ef      	b.n	c670 <__udivmoddi4+0x88>
    c890:	4637      	mov	r7, r6
    c892:	e6f7      	b.n	c684 <__udivmoddi4+0x9c>
    c894:	f1aa 0a02 	sub.w	sl, sl, #2
    c898:	4411      	add	r1, r2
    c89a:	e775      	b.n	c788 <__udivmoddi4+0x1a0>
    c89c:	3802      	subs	r0, #2
    c89e:	442b      	add	r3, r5
    c8a0:	e7cb      	b.n	c83a <__udivmoddi4+0x252>
    c8a2:	3802      	subs	r0, #2
    c8a4:	4411      	add	r1, r2
    c8a6:	e781      	b.n	c7ac <__udivmoddi4+0x1c4>
    c8a8:	3f02      	subs	r7, #2
    c8aa:	4429      	add	r1, r5
    c8ac:	e7d7      	b.n	c85e <__udivmoddi4+0x276>
    c8ae:	bf00      	nop

0000c8b0 <__aeabi_idiv0>:
    c8b0:	4770      	bx	lr
    c8b2:	bf00      	nop

0000c8b4 <__aeabi_dmul>:
    c8b4:	b570      	push	{r4, r5, r6, lr}
    c8b6:	f04f 0cff 	mov.w	ip, #255	; 0xff
    c8ba:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
    c8be:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
    c8c2:	bf1d      	ittte	ne
    c8c4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
    c8c8:	ea94 0f0c 	teqne	r4, ip
    c8cc:	ea95 0f0c 	teqne	r5, ip
    c8d0:	f000 f8de 	bleq	ca90 <__aeabi_dmul+0x1dc>
    c8d4:	442c      	add	r4, r5
    c8d6:	ea81 0603 	eor.w	r6, r1, r3
    c8da:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
    c8de:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
    c8e2:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
    c8e6:	bf18      	it	ne
    c8e8:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
    c8ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
    c8f0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
    c8f4:	d038      	beq.n	c968 <__aeabi_dmul+0xb4>
    c8f6:	fba0 ce02 	umull	ip, lr, r0, r2
    c8fa:	f04f 0500 	mov.w	r5, #0
    c8fe:	fbe1 e502 	umlal	lr, r5, r1, r2
    c902:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
    c906:	fbe0 e503 	umlal	lr, r5, r0, r3
    c90a:	f04f 0600 	mov.w	r6, #0
    c90e:	fbe1 5603 	umlal	r5, r6, r1, r3
    c912:	f09c 0f00 	teq	ip, #0
    c916:	bf18      	it	ne
    c918:	f04e 0e01 	orrne.w	lr, lr, #1
    c91c:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
    c920:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
    c924:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
    c928:	d204      	bcs.n	c934 <__aeabi_dmul+0x80>
    c92a:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
    c92e:	416d      	adcs	r5, r5
    c930:	eb46 0606 	adc.w	r6, r6, r6
    c934:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
    c938:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
    c93c:	ea4f 20c5 	mov.w	r0, r5, lsl #11
    c940:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
    c944:	ea4f 2ece 	mov.w	lr, lr, lsl #11
    c948:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
    c94c:	bf88      	it	hi
    c94e:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
    c952:	d81e      	bhi.n	c992 <__aeabi_dmul+0xde>
    c954:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
    c958:	bf08      	it	eq
    c95a:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
    c95e:	f150 0000 	adcs.w	r0, r0, #0
    c962:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
    c966:	bd70      	pop	{r4, r5, r6, pc}
    c968:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
    c96c:	ea46 0101 	orr.w	r1, r6, r1
    c970:	ea40 0002 	orr.w	r0, r0, r2
    c974:	ea81 0103 	eor.w	r1, r1, r3
    c978:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
    c97c:	bfc2      	ittt	gt
    c97e:	ebd4 050c 	rsbsgt	r5, r4, ip
    c982:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
    c986:	bd70      	popgt	{r4, r5, r6, pc}
    c988:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
    c98c:	f04f 0e00 	mov.w	lr, #0
    c990:	3c01      	subs	r4, #1
    c992:	f300 80ab 	bgt.w	caec <__aeabi_dmul+0x238>
    c996:	f114 0f36 	cmn.w	r4, #54	; 0x36
    c99a:	bfde      	ittt	le
    c99c:	2000      	movle	r0, #0
    c99e:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
    c9a2:	bd70      	pople	{r4, r5, r6, pc}
    c9a4:	f1c4 0400 	rsb	r4, r4, #0
    c9a8:	3c20      	subs	r4, #32
    c9aa:	da35      	bge.n	ca18 <__aeabi_dmul+0x164>
    c9ac:	340c      	adds	r4, #12
    c9ae:	dc1b      	bgt.n	c9e8 <__aeabi_dmul+0x134>
    c9b0:	f104 0414 	add.w	r4, r4, #20
    c9b4:	f1c4 0520 	rsb	r5, r4, #32
    c9b8:	fa00 f305 	lsl.w	r3, r0, r5
    c9bc:	fa20 f004 	lsr.w	r0, r0, r4
    c9c0:	fa01 f205 	lsl.w	r2, r1, r5
    c9c4:	ea40 0002 	orr.w	r0, r0, r2
    c9c8:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
    c9cc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
    c9d0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
    c9d4:	fa21 f604 	lsr.w	r6, r1, r4
    c9d8:	eb42 0106 	adc.w	r1, r2, r6
    c9dc:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
    c9e0:	bf08      	it	eq
    c9e2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
    c9e6:	bd70      	pop	{r4, r5, r6, pc}
    c9e8:	f1c4 040c 	rsb	r4, r4, #12
    c9ec:	f1c4 0520 	rsb	r5, r4, #32
    c9f0:	fa00 f304 	lsl.w	r3, r0, r4
    c9f4:	fa20 f005 	lsr.w	r0, r0, r5
    c9f8:	fa01 f204 	lsl.w	r2, r1, r4
    c9fc:	ea40 0002 	orr.w	r0, r0, r2
    ca00:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
    ca04:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
    ca08:	f141 0100 	adc.w	r1, r1, #0
    ca0c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
    ca10:	bf08      	it	eq
    ca12:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
    ca16:	bd70      	pop	{r4, r5, r6, pc}
    ca18:	f1c4 0520 	rsb	r5, r4, #32
    ca1c:	fa00 f205 	lsl.w	r2, r0, r5
    ca20:	ea4e 0e02 	orr.w	lr, lr, r2
    ca24:	fa20 f304 	lsr.w	r3, r0, r4
    ca28:	fa01 f205 	lsl.w	r2, r1, r5
    ca2c:	ea43 0302 	orr.w	r3, r3, r2
    ca30:	fa21 f004 	lsr.w	r0, r1, r4
    ca34:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
    ca38:	fa21 f204 	lsr.w	r2, r1, r4
    ca3c:	ea20 0002 	bic.w	r0, r0, r2
    ca40:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
    ca44:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
    ca48:	bf08      	it	eq
    ca4a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
    ca4e:	bd70      	pop	{r4, r5, r6, pc}
    ca50:	f094 0f00 	teq	r4, #0
    ca54:	d10f      	bne.n	ca76 <__aeabi_dmul+0x1c2>
    ca56:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
    ca5a:	0040      	lsls	r0, r0, #1
    ca5c:	eb41 0101 	adc.w	r1, r1, r1
    ca60:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
    ca64:	bf08      	it	eq
    ca66:	3c01      	subeq	r4, #1
    ca68:	d0f7      	beq.n	ca5a <__aeabi_dmul+0x1a6>
    ca6a:	ea41 0106 	orr.w	r1, r1, r6
    ca6e:	f095 0f00 	teq	r5, #0
    ca72:	bf18      	it	ne
    ca74:	4770      	bxne	lr
    ca76:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
    ca7a:	0052      	lsls	r2, r2, #1
    ca7c:	eb43 0303 	adc.w	r3, r3, r3
    ca80:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
    ca84:	bf08      	it	eq
    ca86:	3d01      	subeq	r5, #1
    ca88:	d0f7      	beq.n	ca7a <__aeabi_dmul+0x1c6>
    ca8a:	ea43 0306 	orr.w	r3, r3, r6
    ca8e:	4770      	bx	lr
    ca90:	ea94 0f0c 	teq	r4, ip
    ca94:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
    ca98:	bf18      	it	ne
    ca9a:	ea95 0f0c 	teqne	r5, ip
    ca9e:	d00c      	beq.n	caba <__aeabi_dmul+0x206>
    caa0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
    caa4:	bf18      	it	ne
    caa6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
    caaa:	d1d1      	bne.n	ca50 <__aeabi_dmul+0x19c>
    caac:	ea81 0103 	eor.w	r1, r1, r3
    cab0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
    cab4:	f04f 0000 	mov.w	r0, #0
    cab8:	bd70      	pop	{r4, r5, r6, pc}
    caba:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
    cabe:	bf06      	itte	eq
    cac0:	4610      	moveq	r0, r2
    cac2:	4619      	moveq	r1, r3
    cac4:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
    cac8:	d019      	beq.n	cafe <__aeabi_dmul+0x24a>
    caca:	ea94 0f0c 	teq	r4, ip
    cace:	d102      	bne.n	cad6 <__aeabi_dmul+0x222>
    cad0:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
    cad4:	d113      	bne.n	cafe <__aeabi_dmul+0x24a>
    cad6:	ea95 0f0c 	teq	r5, ip
    cada:	d105      	bne.n	cae8 <__aeabi_dmul+0x234>
    cadc:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
    cae0:	bf1c      	itt	ne
    cae2:	4610      	movne	r0, r2
    cae4:	4619      	movne	r1, r3
    cae6:	d10a      	bne.n	cafe <__aeabi_dmul+0x24a>
    cae8:	ea81 0103 	eor.w	r1, r1, r3
    caec:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
    caf0:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
    caf4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
    caf8:	f04f 0000 	mov.w	r0, #0
    cafc:	bd70      	pop	{r4, r5, r6, pc}
    cafe:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
    cb02:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
    cb06:	bd70      	pop	{r4, r5, r6, pc}

0000cb08 <__aeabi_ddiv>:
    cb08:	b570      	push	{r4, r5, r6, lr}
    cb0a:	f04f 0cff 	mov.w	ip, #255	; 0xff
    cb0e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
    cb12:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
    cb16:	bf1d      	ittte	ne
    cb18:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
    cb1c:	ea94 0f0c 	teqne	r4, ip
    cb20:	ea95 0f0c 	teqne	r5, ip
    cb24:	f000 f8a7 	bleq	cc76 <__aeabi_ddiv+0x16e>
    cb28:	eba4 0405 	sub.w	r4, r4, r5
    cb2c:	ea81 0e03 	eor.w	lr, r1, r3
    cb30:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
    cb34:	ea4f 3101 	mov.w	r1, r1, lsl #12
    cb38:	f000 8088 	beq.w	cc4c <__aeabi_ddiv+0x144>
    cb3c:	ea4f 3303 	mov.w	r3, r3, lsl #12
    cb40:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
    cb44:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
    cb48:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
    cb4c:	ea4f 2202 	mov.w	r2, r2, lsl #8
    cb50:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
    cb54:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
    cb58:	ea4f 2600 	mov.w	r6, r0, lsl #8
    cb5c:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
    cb60:	429d      	cmp	r5, r3
    cb62:	bf08      	it	eq
    cb64:	4296      	cmpeq	r6, r2
    cb66:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
    cb6a:	f504 7440 	add.w	r4, r4, #768	; 0x300
    cb6e:	d202      	bcs.n	cb76 <__aeabi_ddiv+0x6e>
    cb70:	085b      	lsrs	r3, r3, #1
    cb72:	ea4f 0232 	mov.w	r2, r2, rrx
    cb76:	1ab6      	subs	r6, r6, r2
    cb78:	eb65 0503 	sbc.w	r5, r5, r3
    cb7c:	085b      	lsrs	r3, r3, #1
    cb7e:	ea4f 0232 	mov.w	r2, r2, rrx
    cb82:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
    cb86:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
    cb8a:	ebb6 0e02 	subs.w	lr, r6, r2
    cb8e:	eb75 0e03 	sbcs.w	lr, r5, r3
    cb92:	bf22      	ittt	cs
    cb94:	1ab6      	subcs	r6, r6, r2
    cb96:	4675      	movcs	r5, lr
    cb98:	ea40 000c 	orrcs.w	r0, r0, ip
    cb9c:	085b      	lsrs	r3, r3, #1
    cb9e:	ea4f 0232 	mov.w	r2, r2, rrx
    cba2:	ebb6 0e02 	subs.w	lr, r6, r2
    cba6:	eb75 0e03 	sbcs.w	lr, r5, r3
    cbaa:	bf22      	ittt	cs
    cbac:	1ab6      	subcs	r6, r6, r2
    cbae:	4675      	movcs	r5, lr
    cbb0:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
    cbb4:	085b      	lsrs	r3, r3, #1
    cbb6:	ea4f 0232 	mov.w	r2, r2, rrx
    cbba:	ebb6 0e02 	subs.w	lr, r6, r2
    cbbe:	eb75 0e03 	sbcs.w	lr, r5, r3
    cbc2:	bf22      	ittt	cs
    cbc4:	1ab6      	subcs	r6, r6, r2
    cbc6:	4675      	movcs	r5, lr
    cbc8:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
    cbcc:	085b      	lsrs	r3, r3, #1
    cbce:	ea4f 0232 	mov.w	r2, r2, rrx
    cbd2:	ebb6 0e02 	subs.w	lr, r6, r2
    cbd6:	eb75 0e03 	sbcs.w	lr, r5, r3
    cbda:	bf22      	ittt	cs
    cbdc:	1ab6      	subcs	r6, r6, r2
    cbde:	4675      	movcs	r5, lr
    cbe0:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
    cbe4:	ea55 0e06 	orrs.w	lr, r5, r6
    cbe8:	d018      	beq.n	cc1c <__aeabi_ddiv+0x114>
    cbea:	ea4f 1505 	mov.w	r5, r5, lsl #4
    cbee:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
    cbf2:	ea4f 1606 	mov.w	r6, r6, lsl #4
    cbf6:	ea4f 03c3 	mov.w	r3, r3, lsl #3
    cbfa:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
    cbfe:	ea4f 02c2 	mov.w	r2, r2, lsl #3
    cc02:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
    cc06:	d1c0      	bne.n	cb8a <__aeabi_ddiv+0x82>
    cc08:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
    cc0c:	d10b      	bne.n	cc26 <__aeabi_ddiv+0x11e>
    cc0e:	ea41 0100 	orr.w	r1, r1, r0
    cc12:	f04f 0000 	mov.w	r0, #0
    cc16:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
    cc1a:	e7b6      	b.n	cb8a <__aeabi_ddiv+0x82>
    cc1c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
    cc20:	bf04      	itt	eq
    cc22:	4301      	orreq	r1, r0
    cc24:	2000      	moveq	r0, #0
    cc26:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
    cc2a:	bf88      	it	hi
    cc2c:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
    cc30:	f63f aeaf 	bhi.w	c992 <__aeabi_dmul+0xde>
    cc34:	ebb5 0c03 	subs.w	ip, r5, r3
    cc38:	bf04      	itt	eq
    cc3a:	ebb6 0c02 	subseq.w	ip, r6, r2
    cc3e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
    cc42:	f150 0000 	adcs.w	r0, r0, #0
    cc46:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
    cc4a:	bd70      	pop	{r4, r5, r6, pc}
    cc4c:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
    cc50:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
    cc54:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
    cc58:	bfc2      	ittt	gt
    cc5a:	ebd4 050c 	rsbsgt	r5, r4, ip
    cc5e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
    cc62:	bd70      	popgt	{r4, r5, r6, pc}
    cc64:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
    cc68:	f04f 0e00 	mov.w	lr, #0
    cc6c:	3c01      	subs	r4, #1
    cc6e:	e690      	b.n	c992 <__aeabi_dmul+0xde>
    cc70:	ea45 0e06 	orr.w	lr, r5, r6
    cc74:	e68d      	b.n	c992 <__aeabi_dmul+0xde>
    cc76:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
    cc7a:	ea94 0f0c 	teq	r4, ip
    cc7e:	bf08      	it	eq
    cc80:	ea95 0f0c 	teqeq	r5, ip
    cc84:	f43f af3b 	beq.w	cafe <__aeabi_dmul+0x24a>
    cc88:	ea94 0f0c 	teq	r4, ip
    cc8c:	d10a      	bne.n	cca4 <__aeabi_ddiv+0x19c>
    cc8e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
    cc92:	f47f af34 	bne.w	cafe <__aeabi_dmul+0x24a>
    cc96:	ea95 0f0c 	teq	r5, ip
    cc9a:	f47f af25 	bne.w	cae8 <__aeabi_dmul+0x234>
    cc9e:	4610      	mov	r0, r2
    cca0:	4619      	mov	r1, r3
    cca2:	e72c      	b.n	cafe <__aeabi_dmul+0x24a>
    cca4:	ea95 0f0c 	teq	r5, ip
    cca8:	d106      	bne.n	ccb8 <__aeabi_ddiv+0x1b0>
    ccaa:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
    ccae:	f43f aefd 	beq.w	caac <__aeabi_dmul+0x1f8>
    ccb2:	4610      	mov	r0, r2
    ccb4:	4619      	mov	r1, r3
    ccb6:	e722      	b.n	cafe <__aeabi_dmul+0x24a>
    ccb8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
    ccbc:	bf18      	it	ne
    ccbe:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
    ccc2:	f47f aec5 	bne.w	ca50 <__aeabi_dmul+0x19c>
    ccc6:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
    ccca:	f47f af0d 	bne.w	cae8 <__aeabi_dmul+0x234>
    ccce:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
    ccd2:	f47f aeeb 	bne.w	caac <__aeabi_dmul+0x1f8>
    ccd6:	e712      	b.n	cafe <__aeabi_dmul+0x24a>

0000ccd8 <__gedf2>:
    ccd8:	f04f 3cff 	mov.w	ip, #4294967295
    ccdc:	e006      	b.n	ccec <__cmpdf2+0x4>
    ccde:	bf00      	nop

0000cce0 <__ledf2>:
    cce0:	f04f 0c01 	mov.w	ip, #1
    cce4:	e002      	b.n	ccec <__cmpdf2+0x4>
    cce6:	bf00      	nop

0000cce8 <__cmpdf2>:
    cce8:	f04f 0c01 	mov.w	ip, #1
    ccec:	f84d cd04 	str.w	ip, [sp, #-4]!
    ccf0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
    ccf4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
    ccf8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
    ccfc:	bf18      	it	ne
    ccfe:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
    cd02:	d01b      	beq.n	cd3c <__cmpdf2+0x54>
    cd04:	b001      	add	sp, #4
    cd06:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
    cd0a:	bf0c      	ite	eq
    cd0c:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
    cd10:	ea91 0f03 	teqne	r1, r3
    cd14:	bf02      	ittt	eq
    cd16:	ea90 0f02 	teqeq	r0, r2
    cd1a:	2000      	moveq	r0, #0
    cd1c:	4770      	bxeq	lr
    cd1e:	f110 0f00 	cmn.w	r0, #0
    cd22:	ea91 0f03 	teq	r1, r3
    cd26:	bf58      	it	pl
    cd28:	4299      	cmppl	r1, r3
    cd2a:	bf08      	it	eq
    cd2c:	4290      	cmpeq	r0, r2
    cd2e:	bf2c      	ite	cs
    cd30:	17d8      	asrcs	r0, r3, #31
    cd32:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
    cd36:	f040 0001 	orr.w	r0, r0, #1
    cd3a:	4770      	bx	lr
    cd3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
    cd40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
    cd44:	d102      	bne.n	cd4c <__cmpdf2+0x64>
    cd46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
    cd4a:	d107      	bne.n	cd5c <__cmpdf2+0x74>
    cd4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
    cd50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
    cd54:	d1d6      	bne.n	cd04 <__cmpdf2+0x1c>
    cd56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
    cd5a:	d0d3      	beq.n	cd04 <__cmpdf2+0x1c>
    cd5c:	f85d 0b04 	ldr.w	r0, [sp], #4
    cd60:	4770      	bx	lr
    cd62:	bf00      	nop

0000cd64 <__aeabi_cdrcmple>:
    cd64:	4684      	mov	ip, r0
    cd66:	4610      	mov	r0, r2
    cd68:	4662      	mov	r2, ip
    cd6a:	468c      	mov	ip, r1
    cd6c:	4619      	mov	r1, r3
    cd6e:	4663      	mov	r3, ip
    cd70:	e000      	b.n	cd74 <__aeabi_cdcmpeq>
    cd72:	bf00      	nop

0000cd74 <__aeabi_cdcmpeq>:
    cd74:	b501      	push	{r0, lr}
    cd76:	f7ff ffb7 	bl	cce8 <__cmpdf2>
    cd7a:	2800      	cmp	r0, #0
    cd7c:	bf48      	it	mi
    cd7e:	f110 0f00 	cmnmi.w	r0, #0
    cd82:	bd01      	pop	{r0, pc}

0000cd84 <__aeabi_dcmpeq>:
    cd84:	f84d ed08 	str.w	lr, [sp, #-8]!
    cd88:	f7ff fff4 	bl	cd74 <__aeabi_cdcmpeq>
    cd8c:	bf0c      	ite	eq
    cd8e:	2001      	moveq	r0, #1
    cd90:	2000      	movne	r0, #0
    cd92:	f85d fb08 	ldr.w	pc, [sp], #8
    cd96:	bf00      	nop

0000cd98 <__aeabi_dcmplt>:
    cd98:	f84d ed08 	str.w	lr, [sp, #-8]!
    cd9c:	f7ff ffea 	bl	cd74 <__aeabi_cdcmpeq>
    cda0:	bf34      	ite	cc
    cda2:	2001      	movcc	r0, #1
    cda4:	2000      	movcs	r0, #0
    cda6:	f85d fb08 	ldr.w	pc, [sp], #8
    cdaa:	bf00      	nop

0000cdac <__aeabi_dcmple>:
    cdac:	f84d ed08 	str.w	lr, [sp, #-8]!
    cdb0:	f7ff ffe0 	bl	cd74 <__aeabi_cdcmpeq>
    cdb4:	bf94      	ite	ls
    cdb6:	2001      	movls	r0, #1
    cdb8:	2000      	movhi	r0, #0
    cdba:	f85d fb08 	ldr.w	pc, [sp], #8
    cdbe:	bf00      	nop

0000cdc0 <__aeabi_dcmpge>:
    cdc0:	f84d ed08 	str.w	lr, [sp, #-8]!
    cdc4:	f7ff ffce 	bl	cd64 <__aeabi_cdrcmple>
    cdc8:	bf94      	ite	ls
    cdca:	2001      	movls	r0, #1
    cdcc:	2000      	movhi	r0, #0
    cdce:	f85d fb08 	ldr.w	pc, [sp], #8
    cdd2:	bf00      	nop

0000cdd4 <__aeabi_dcmpgt>:
    cdd4:	f84d ed08 	str.w	lr, [sp, #-8]!
    cdd8:	f7ff ffc4 	bl	cd64 <__aeabi_cdrcmple>
    cddc:	bf34      	ite	cc
    cdde:	2001      	movcc	r0, #1
    cde0:	2000      	movcs	r0, #0
    cde2:	f85d fb08 	ldr.w	pc, [sp], #8
    cde6:	bf00      	nop

0000cde8 <__aeabi_dcmpun>:
    cde8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
    cdec:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
    cdf0:	d102      	bne.n	cdf8 <__aeabi_dcmpun+0x10>
    cdf2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
    cdf6:	d10a      	bne.n	ce0e <__aeabi_dcmpun+0x26>
    cdf8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
    cdfc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
    ce00:	d102      	bne.n	ce08 <__aeabi_dcmpun+0x20>
    ce02:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
    ce06:	d102      	bne.n	ce0e <__aeabi_dcmpun+0x26>
    ce08:	f04f 0000 	mov.w	r0, #0
    ce0c:	4770      	bx	lr
    ce0e:	f04f 0001 	mov.w	r0, #1
    ce12:	4770      	bx	lr

0000ce14 <__aeabi_d2iz>:
    ce14:	ea4f 0241 	mov.w	r2, r1, lsl #1
    ce18:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
    ce1c:	d215      	bcs.n	ce4a <__aeabi_d2iz+0x36>
    ce1e:	d511      	bpl.n	ce44 <__aeabi_d2iz+0x30>
    ce20:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
    ce24:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
    ce28:	d912      	bls.n	ce50 <__aeabi_d2iz+0x3c>
    ce2a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
    ce2e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
    ce32:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
    ce36:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
    ce3a:	fa23 f002 	lsr.w	r0, r3, r2
    ce3e:	bf18      	it	ne
    ce40:	4240      	negne	r0, r0
    ce42:	4770      	bx	lr
    ce44:	f04f 0000 	mov.w	r0, #0
    ce48:	4770      	bx	lr
    ce4a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
    ce4e:	d105      	bne.n	ce5c <__aeabi_d2iz+0x48>
    ce50:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
    ce54:	bf08      	it	eq
    ce56:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
    ce5a:	4770      	bx	lr
    ce5c:	f04f 0000 	mov.w	r0, #0
    ce60:	4770      	bx	lr
    ce62:	bf00      	nop

0000ce64 <strcmp>:
    ce64:	f810 2b01 	ldrb.w	r2, [r0], #1
    ce68:	f811 3b01 	ldrb.w	r3, [r1], #1
    ce6c:	2a01      	cmp	r2, #1
    ce6e:	bf28      	it	cs
    ce70:	429a      	cmpcs	r2, r3
    ce72:	d0f7      	beq.n	ce64 <strcmp>
    ce74:	1ad0      	subs	r0, r2, r3
    ce76:	4770      	bx	lr

0000ce78 <strlen>:
    ce78:	4603      	mov	r3, r0
    ce7a:	f813 2b01 	ldrb.w	r2, [r3], #1
    ce7e:	2a00      	cmp	r2, #0
    ce80:	d1fb      	bne.n	ce7a <strlen+0x2>
    ce82:	1a18      	subs	r0, r3, r0
    ce84:	3801      	subs	r0, #1
    ce86:	4770      	bx	lr

0000ce88 <_dtoa_r>:
    ce88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    ce8c:	6a47      	ldr	r7, [r0, #36]	; 0x24
    ce8e:	b099      	sub	sp, #100	; 0x64
    ce90:	4683      	mov	fp, r0
    ce92:	9108      	str	r1, [sp, #32]
    ce94:	920d      	str	r2, [sp, #52]	; 0x34
    ce96:	9314      	str	r3, [sp, #80]	; 0x50
    ce98:	9e22      	ldr	r6, [sp, #136]	; 0x88
    ce9a:	ec55 4b10 	vmov	r4, r5, d0
    ce9e:	e9cd 4500 	strd	r4, r5, [sp]
    cea2:	b947      	cbnz	r7, ceb6 <_dtoa_r+0x2e>
    cea4:	2010      	movs	r0, #16
    cea6:	f012 fa65 	bl	1f374 <malloc>
    ceaa:	f8cb 0024 	str.w	r0, [fp, #36]	; 0x24
    ceae:	6007      	str	r7, [r0, #0]
    ceb0:	60c7      	str	r7, [r0, #12]
    ceb2:	e9c0 7701 	strd	r7, r7, [r0, #4]
    ceb6:	f8db 3024 	ldr.w	r3, [fp, #36]	; 0x24
    ceba:	6819      	ldr	r1, [r3, #0]
    cebc:	b159      	cbz	r1, ced6 <_dtoa_r+0x4e>
    cebe:	685a      	ldr	r2, [r3, #4]
    cec0:	2301      	movs	r3, #1
    cec2:	4658      	mov	r0, fp
    cec4:	4093      	lsls	r3, r2
    cec6:	604a      	str	r2, [r1, #4]
    cec8:	608b      	str	r3, [r1, #8]
    ceca:	f015 f836 	bl	21f3a <_Bfree>
    cece:	f8db 3024 	ldr.w	r3, [fp, #36]	; 0x24
    ced2:	2200      	movs	r2, #0
    ced4:	601a      	str	r2, [r3, #0]
    ced6:	1e2b      	subs	r3, r5, #0
    ced8:	bfb7      	itett	lt
    ceda:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
    cede:	2300      	movge	r3, #0
    cee0:	2201      	movlt	r2, #1
    cee2:	9301      	strlt	r3, [sp, #4]
    cee4:	bfa8      	it	ge
    cee6:	6033      	strge	r3, [r6, #0]
    cee8:	9c01      	ldr	r4, [sp, #4]
    ceea:	4bb1      	ldr	r3, [pc, #708]	; (d1b0 <_dtoa_r+0x328>)
    ceec:	bfb8      	it	lt
    ceee:	6032      	strlt	r2, [r6, #0]
    cef0:	43a3      	bics	r3, r4
    cef2:	d11a      	bne.n	cf2a <_dtoa_r+0xa2>
    cef4:	f242 730f 	movw	r3, #9999	; 0x270f
    cef8:	9a14      	ldr	r2, [sp, #80]	; 0x50
    cefa:	6013      	str	r3, [r2, #0]
    cefc:	f3c4 0313 	ubfx	r3, r4, #0, #20
    cf00:	9a00      	ldr	r2, [sp, #0]
    cf02:	4313      	orrs	r3, r2
    cf04:	f000 8547 	beq.w	d996 <_dtoa_r+0xb0e>
    cf08:	9b23      	ldr	r3, [sp, #140]	; 0x8c
    cf0a:	b953      	cbnz	r3, cf22 <_dtoa_r+0x9a>
    cf0c:	4ba9      	ldr	r3, [pc, #676]	; (d1b4 <_dtoa_r+0x32c>)
    cf0e:	e023      	b.n	cf58 <_dtoa_r+0xd0>
    cf10:	4ba9      	ldr	r3, [pc, #676]	; (d1b8 <_dtoa_r+0x330>)
    cf12:	9303      	str	r3, [sp, #12]
    cf14:	3308      	adds	r3, #8
    cf16:	9a23      	ldr	r2, [sp, #140]	; 0x8c
    cf18:	6013      	str	r3, [r2, #0]
    cf1a:	9803      	ldr	r0, [sp, #12]
    cf1c:	b019      	add	sp, #100	; 0x64
    cf1e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    cf22:	4ba4      	ldr	r3, [pc, #656]	; (d1b4 <_dtoa_r+0x32c>)
    cf24:	9303      	str	r3, [sp, #12]
    cf26:	3303      	adds	r3, #3
    cf28:	e7f5      	b.n	cf16 <_dtoa_r+0x8e>
    cf2a:	ed9d 7b00 	vldr	d7, [sp]
    cf2e:	2200      	movs	r2, #0
    cf30:	2300      	movs	r3, #0
    cf32:	ec51 0b17 	vmov	r0, r1, d7
    cf36:	ed8d 7b0e 	vstr	d7, [sp, #56]	; 0x38
    cf3a:	f7ff ff23 	bl	cd84 <__aeabi_dcmpeq>
    cf3e:	4607      	mov	r7, r0
    cf40:	b160      	cbz	r0, cf5c <_dtoa_r+0xd4>
    cf42:	2301      	movs	r3, #1
    cf44:	9a14      	ldr	r2, [sp, #80]	; 0x50
    cf46:	6013      	str	r3, [r2, #0]
    cf48:	9b23      	ldr	r3, [sp, #140]	; 0x8c
    cf4a:	2b00      	cmp	r3, #0
    cf4c:	f000 8520 	beq.w	d990 <_dtoa_r+0xb08>
    cf50:	4b9a      	ldr	r3, [pc, #616]	; (d1bc <_dtoa_r+0x334>)
    cf52:	9a23      	ldr	r2, [sp, #140]	; 0x8c
    cf54:	6013      	str	r3, [r2, #0]
    cf56:	3b01      	subs	r3, #1
    cf58:	9303      	str	r3, [sp, #12]
    cf5a:	e7de      	b.n	cf1a <_dtoa_r+0x92>
    cf5c:	f3c4 560a 	ubfx	r6, r4, #20, #11
    cf60:	aa16      	add	r2, sp, #88	; 0x58
    cf62:	a917      	add	r1, sp, #92	; 0x5c
    cf64:	4658      	mov	r0, fp
    cf66:	ed9d 0b0e 	vldr	d0, [sp, #56]	; 0x38
    cf6a:	f015 f9ef 	bl	2234c <__d2b>
    cf6e:	4680      	mov	r8, r0
    cf70:	2e00      	cmp	r6, #0
    cf72:	d07d      	beq.n	d070 <_dtoa_r+0x1e8>
    cf74:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    cf76:	f2a6 36ff 	subw	r6, r6, #1023	; 0x3ff
    cf7a:	9715      	str	r7, [sp, #84]	; 0x54
    cf7c:	f3c3 0313 	ubfx	r3, r3, #0, #20
    cf80:	e9dd 450e 	ldrd	r4, r5, [sp, #56]	; 0x38
    cf84:	f043 557f 	orr.w	r5, r3, #1069547520	; 0x3fc00000
    cf88:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
    cf8c:	2200      	movs	r2, #0
    cf8e:	4b8c      	ldr	r3, [pc, #560]	; (d1c0 <_dtoa_r+0x338>)
    cf90:	4620      	mov	r0, r4
    cf92:	4629      	mov	r1, r5
    cf94:	f7ff f958 	bl	c248 <__aeabi_dsub>
    cf98:	a37f      	add	r3, pc, #508	; (adr r3, d198 <_dtoa_r+0x310>)
    cf9a:	e9d3 2300 	ldrd	r2, r3, [r3]
    cf9e:	f7ff fc89 	bl	c8b4 <__aeabi_dmul>
    cfa2:	a37f      	add	r3, pc, #508	; (adr r3, d1a0 <_dtoa_r+0x318>)
    cfa4:	e9d3 2300 	ldrd	r2, r3, [r3]
    cfa8:	f7ff f950 	bl	c24c <__adddf3>
    cfac:	4604      	mov	r4, r0
    cfae:	460d      	mov	r5, r1
    cfb0:	4630      	mov	r0, r6
    cfb2:	f7ff fa97 	bl	c4e4 <__aeabi_i2d>
    cfb6:	a37c      	add	r3, pc, #496	; (adr r3, d1a8 <_dtoa_r+0x320>)
    cfb8:	e9d3 2300 	ldrd	r2, r3, [r3]
    cfbc:	f7ff fc7a 	bl	c8b4 <__aeabi_dmul>
    cfc0:	4602      	mov	r2, r0
    cfc2:	460b      	mov	r3, r1
    cfc4:	4620      	mov	r0, r4
    cfc6:	4629      	mov	r1, r5
    cfc8:	f7ff f940 	bl	c24c <__adddf3>
    cfcc:	4604      	mov	r4, r0
    cfce:	460d      	mov	r5, r1
    cfd0:	f7ff ff20 	bl	ce14 <__aeabi_d2iz>
    cfd4:	2200      	movs	r2, #0
    cfd6:	4682      	mov	sl, r0
    cfd8:	2300      	movs	r3, #0
    cfda:	4620      	mov	r0, r4
    cfdc:	4629      	mov	r1, r5
    cfde:	f7ff fedb 	bl	cd98 <__aeabi_dcmplt>
    cfe2:	b148      	cbz	r0, cff8 <_dtoa_r+0x170>
    cfe4:	4650      	mov	r0, sl
    cfe6:	f7ff fa7d 	bl	c4e4 <__aeabi_i2d>
    cfea:	4622      	mov	r2, r4
    cfec:	462b      	mov	r3, r5
    cfee:	f7ff fec9 	bl	cd84 <__aeabi_dcmpeq>
    cff2:	b908      	cbnz	r0, cff8 <_dtoa_r+0x170>
    cff4:	f10a 3aff 	add.w	sl, sl, #4294967295
    cff8:	f1ba 0f16 	cmp.w	sl, #22
    cffc:	d857      	bhi.n	d0ae <_dtoa_r+0x226>
    cffe:	4b71      	ldr	r3, [pc, #452]	; (d1c4 <_dtoa_r+0x33c>)
    d000:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
    d004:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
    d008:	e9d3 2300 	ldrd	r2, r3, [r3]
    d00c:	f7ff fec4 	bl	cd98 <__aeabi_dcmplt>
    d010:	2800      	cmp	r0, #0
    d012:	d04e      	beq.n	d0b2 <_dtoa_r+0x22a>
    d014:	f10a 3aff 	add.w	sl, sl, #4294967295
    d018:	2300      	movs	r3, #0
    d01a:	9311      	str	r3, [sp, #68]	; 0x44
    d01c:	9b16      	ldr	r3, [sp, #88]	; 0x58
    d01e:	1b9e      	subs	r6, r3, r6
    d020:	1e73      	subs	r3, r6, #1
    d022:	9307      	str	r3, [sp, #28]
    d024:	bf49      	itett	mi
    d026:	f1c6 0301 	rsbmi	r3, r6, #1
    d02a:	2300      	movpl	r3, #0
    d02c:	9306      	strmi	r3, [sp, #24]
    d02e:	2300      	movmi	r3, #0
    d030:	bf54      	ite	pl
    d032:	9306      	strpl	r3, [sp, #24]
    d034:	9307      	strmi	r3, [sp, #28]
    d036:	f1ba 0f00 	cmp.w	sl, #0
    d03a:	db3c      	blt.n	d0b6 <_dtoa_r+0x22e>
    d03c:	9b07      	ldr	r3, [sp, #28]
    d03e:	f8cd a040 	str.w	sl, [sp, #64]	; 0x40
    d042:	4453      	add	r3, sl
    d044:	9307      	str	r3, [sp, #28]
    d046:	2300      	movs	r3, #0
    d048:	9309      	str	r3, [sp, #36]	; 0x24
    d04a:	9b08      	ldr	r3, [sp, #32]
    d04c:	2b09      	cmp	r3, #9
    d04e:	f200 808d 	bhi.w	d16c <_dtoa_r+0x2e4>
    d052:	2b05      	cmp	r3, #5
    d054:	bfc5      	ittet	gt
    d056:	3b04      	subgt	r3, #4
    d058:	2400      	movgt	r4, #0
    d05a:	2401      	movle	r4, #1
    d05c:	9308      	strgt	r3, [sp, #32]
    d05e:	9b08      	ldr	r3, [sp, #32]
    d060:	3b02      	subs	r3, #2
    d062:	2b03      	cmp	r3, #3
    d064:	f200 808d 	bhi.w	d182 <_dtoa_r+0x2fa>
    d068:	e8df f003 	tbb	[pc, r3]
    d06c:	7e3a3c2f 	.word	0x7e3a3c2f
    d070:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	; 0x58
    d074:	441e      	add	r6, r3
    d076:	f206 4032 	addw	r0, r6, #1074	; 0x432
    d07a:	2820      	cmp	r0, #32
    d07c:	dd11      	ble.n	d0a2 <_dtoa_r+0x21a>
    d07e:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
    d082:	9b00      	ldr	r3, [sp, #0]
    d084:	4084      	lsls	r4, r0
    d086:	f206 4012 	addw	r0, r6, #1042	; 0x412
    d08a:	fa23 f000 	lsr.w	r0, r3, r0
    d08e:	4320      	orrs	r0, r4
    d090:	f7ff fa18 	bl	c4c4 <__aeabi_ui2d>
    d094:	2301      	movs	r3, #1
    d096:	4604      	mov	r4, r0
    d098:	f1a1 75f8 	sub.w	r5, r1, #32505856	; 0x1f00000
    d09c:	3e01      	subs	r6, #1
    d09e:	9315      	str	r3, [sp, #84]	; 0x54
    d0a0:	e774      	b.n	cf8c <_dtoa_r+0x104>
    d0a2:	f1c0 0020 	rsb	r0, r0, #32
    d0a6:	9b00      	ldr	r3, [sp, #0]
    d0a8:	fa03 f000 	lsl.w	r0, r3, r0
    d0ac:	e7f0      	b.n	d090 <_dtoa_r+0x208>
    d0ae:	2301      	movs	r3, #1
    d0b0:	e7b3      	b.n	d01a <_dtoa_r+0x192>
    d0b2:	9011      	str	r0, [sp, #68]	; 0x44
    d0b4:	e7b2      	b.n	d01c <_dtoa_r+0x194>
    d0b6:	9b06      	ldr	r3, [sp, #24]
    d0b8:	eba3 030a 	sub.w	r3, r3, sl
    d0bc:	9306      	str	r3, [sp, #24]
    d0be:	f1ca 0300 	rsb	r3, sl, #0
    d0c2:	9309      	str	r3, [sp, #36]	; 0x24
    d0c4:	2300      	movs	r3, #0
    d0c6:	9310      	str	r3, [sp, #64]	; 0x40
    d0c8:	e7bf      	b.n	d04a <_dtoa_r+0x1c2>
    d0ca:	2300      	movs	r3, #0
    d0cc:	930c      	str	r3, [sp, #48]	; 0x30
    d0ce:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    d0d0:	2b00      	cmp	r3, #0
    d0d2:	dc59      	bgt.n	d188 <_dtoa_r+0x300>
    d0d4:	2301      	movs	r3, #1
    d0d6:	4699      	mov	r9, r3
    d0d8:	461a      	mov	r2, r3
    d0da:	9304      	str	r3, [sp, #16]
    d0dc:	920d      	str	r2, [sp, #52]	; 0x34
    d0de:	e00c      	b.n	d0fa <_dtoa_r+0x272>
    d0e0:	2301      	movs	r3, #1
    d0e2:	e7f3      	b.n	d0cc <_dtoa_r+0x244>
    d0e4:	2300      	movs	r3, #0
    d0e6:	930c      	str	r3, [sp, #48]	; 0x30
    d0e8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    d0ea:	4453      	add	r3, sl
    d0ec:	f103 0901 	add.w	r9, r3, #1
    d0f0:	9304      	str	r3, [sp, #16]
    d0f2:	464b      	mov	r3, r9
    d0f4:	2b01      	cmp	r3, #1
    d0f6:	bfb8      	it	lt
    d0f8:	2301      	movlt	r3, #1
    d0fa:	2200      	movs	r2, #0
    d0fc:	f8db 5024 	ldr.w	r5, [fp, #36]	; 0x24
    d100:	606a      	str	r2, [r5, #4]
    d102:	2204      	movs	r2, #4
    d104:	f102 0014 	add.w	r0, r2, #20
    d108:	6869      	ldr	r1, [r5, #4]
    d10a:	4298      	cmp	r0, r3
    d10c:	d940      	bls.n	d190 <_dtoa_r+0x308>
    d10e:	4658      	mov	r0, fp
    d110:	f014 fedf 	bl	21ed2 <_Balloc>
    d114:	f8db 3024 	ldr.w	r3, [fp, #36]	; 0x24
    d118:	6028      	str	r0, [r5, #0]
    d11a:	f1b9 0f0e 	cmp.w	r9, #14
    d11e:	681b      	ldr	r3, [r3, #0]
    d120:	9303      	str	r3, [sp, #12]
    d122:	f200 80d4 	bhi.w	d2ce <_dtoa_r+0x446>
    d126:	2c00      	cmp	r4, #0
    d128:	f000 80d1 	beq.w	d2ce <_dtoa_r+0x446>
    d12c:	f1ba 0f00 	cmp.w	sl, #0
    d130:	dd66      	ble.n	d200 <_dtoa_r+0x378>
    d132:	4a24      	ldr	r2, [pc, #144]	; (d1c4 <_dtoa_r+0x33c>)
    d134:	f00a 030f 	and.w	r3, sl, #15
    d138:	ea4f 142a 	mov.w	r4, sl, asr #4
    d13c:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
    d140:	06e2      	lsls	r2, r4, #27
    d142:	ed93 7b00 	vldr	d7, [r3]
    d146:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
    d14a:	d557      	bpl.n	d1fc <_dtoa_r+0x374>
    d14c:	4b1e      	ldr	r3, [pc, #120]	; (d1c8 <_dtoa_r+0x340>)
    d14e:	f004 040f 	and.w	r4, r4, #15
    d152:	2603      	movs	r6, #3
    d154:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
    d158:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
    d15c:	f7ff fcd4 	bl	cb08 <__aeabi_ddiv>
    d160:	e9cd 0100 	strd	r0, r1, [sp]
    d164:	4d18      	ldr	r5, [pc, #96]	; (d1c8 <_dtoa_r+0x340>)
    d166:	e03e      	b.n	d1e6 <_dtoa_r+0x35e>
    d168:	2301      	movs	r3, #1
    d16a:	e7bc      	b.n	d0e6 <_dtoa_r+0x25e>
    d16c:	2401      	movs	r4, #1
    d16e:	2300      	movs	r3, #0
    d170:	940c      	str	r4, [sp, #48]	; 0x30
    d172:	9308      	str	r3, [sp, #32]
    d174:	f04f 33ff 	mov.w	r3, #4294967295
    d178:	2200      	movs	r2, #0
    d17a:	9304      	str	r3, [sp, #16]
    d17c:	4699      	mov	r9, r3
    d17e:	2312      	movs	r3, #18
    d180:	e7ac      	b.n	d0dc <_dtoa_r+0x254>
    d182:	2301      	movs	r3, #1
    d184:	930c      	str	r3, [sp, #48]	; 0x30
    d186:	e7f5      	b.n	d174 <_dtoa_r+0x2ec>
    d188:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    d18a:	9304      	str	r3, [sp, #16]
    d18c:	4699      	mov	r9, r3
    d18e:	e7b4      	b.n	d0fa <_dtoa_r+0x272>
    d190:	3101      	adds	r1, #1
    d192:	0052      	lsls	r2, r2, #1
    d194:	6069      	str	r1, [r5, #4]
    d196:	e7b5      	b.n	d104 <_dtoa_r+0x27c>
    d198:	636f4361 	.word	0x636f4361
    d19c:	3fd287a7 	.word	0x3fd287a7
    d1a0:	8b60c8b3 	.word	0x8b60c8b3
    d1a4:	3fc68a28 	.word	0x3fc68a28
    d1a8:	509f79fb 	.word	0x509f79fb
    d1ac:	3fd34413 	.word	0x3fd34413
    d1b0:	7ff00000 	.word	0x7ff00000
    d1b4:	00025794 	.word	0x00025794
    d1b8:	0002578b 	.word	0x0002578b
    d1bc:	000251d0 	.word	0x000251d0
    d1c0:	3ff80000 	.word	0x3ff80000
    d1c4:	000229f8 	.word	0x000229f8
    d1c8:	000229d0 	.word	0x000229d0
    d1cc:	07e3      	lsls	r3, r4, #31
    d1ce:	d508      	bpl.n	d1e2 <_dtoa_r+0x35a>
    d1d0:	3601      	adds	r6, #1
    d1d2:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
    d1d6:	e9d5 2300 	ldrd	r2, r3, [r5]
    d1da:	f7ff fb6b 	bl	c8b4 <__aeabi_dmul>
    d1de:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
    d1e2:	1064      	asrs	r4, r4, #1
    d1e4:	3508      	adds	r5, #8
    d1e6:	2c00      	cmp	r4, #0
    d1e8:	d1f0      	bne.n	d1cc <_dtoa_r+0x344>
    d1ea:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
    d1ee:	e9dd 0100 	ldrd	r0, r1, [sp]
    d1f2:	f7ff fc89 	bl	cb08 <__aeabi_ddiv>
    d1f6:	e9cd 0100 	strd	r0, r1, [sp]
    d1fa:	e01a      	b.n	d232 <_dtoa_r+0x3aa>
    d1fc:	2602      	movs	r6, #2
    d1fe:	e7b1      	b.n	d164 <_dtoa_r+0x2dc>
    d200:	f000 809f 	beq.w	d342 <_dtoa_r+0x4ba>
    d204:	f1ca 0400 	rsb	r4, sl, #0
    d208:	4b9e      	ldr	r3, [pc, #632]	; (d484 <_dtoa_r+0x5fc>)
    d20a:	4d9f      	ldr	r5, [pc, #636]	; (d488 <_dtoa_r+0x600>)
    d20c:	2602      	movs	r6, #2
    d20e:	f004 020f 	and.w	r2, r4, #15
    d212:	1124      	asrs	r4, r4, #4
    d214:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
    d218:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
    d21c:	e9d3 2300 	ldrd	r2, r3, [r3]
    d220:	f7ff fb48 	bl	c8b4 <__aeabi_dmul>
    d224:	2300      	movs	r3, #0
    d226:	e9cd 0100 	strd	r0, r1, [sp]
    d22a:	2c00      	cmp	r4, #0
    d22c:	d17e      	bne.n	d32c <_dtoa_r+0x4a4>
    d22e:	2b00      	cmp	r3, #0
    d230:	d1e1      	bne.n	d1f6 <_dtoa_r+0x36e>
    d232:	9b11      	ldr	r3, [sp, #68]	; 0x44
    d234:	2b00      	cmp	r3, #0
    d236:	f000 8086 	beq.w	d346 <_dtoa_r+0x4be>
    d23a:	2200      	movs	r2, #0
    d23c:	4b93      	ldr	r3, [pc, #588]	; (d48c <_dtoa_r+0x604>)
    d23e:	e9dd 4500 	ldrd	r4, r5, [sp]
    d242:	4620      	mov	r0, r4
    d244:	4629      	mov	r1, r5
    d246:	f7ff fda7 	bl	cd98 <__aeabi_dcmplt>
    d24a:	2800      	cmp	r0, #0
    d24c:	d07b      	beq.n	d346 <_dtoa_r+0x4be>
    d24e:	f1b9 0f00 	cmp.w	r9, #0
    d252:	d078      	beq.n	d346 <_dtoa_r+0x4be>
    d254:	9b04      	ldr	r3, [sp, #16]
    d256:	2b00      	cmp	r3, #0
    d258:	dd35      	ble.n	d2c6 <_dtoa_r+0x43e>
    d25a:	f10a 33ff 	add.w	r3, sl, #4294967295
    d25e:	4620      	mov	r0, r4
    d260:	2200      	movs	r2, #0
    d262:	4629      	mov	r1, r5
    d264:	930a      	str	r3, [sp, #40]	; 0x28
    d266:	3601      	adds	r6, #1
    d268:	4b89      	ldr	r3, [pc, #548]	; (d490 <_dtoa_r+0x608>)
    d26a:	f7ff fb23 	bl	c8b4 <__aeabi_dmul>
    d26e:	9c04      	ldr	r4, [sp, #16]
    d270:	e9cd 0100 	strd	r0, r1, [sp]
    d274:	4630      	mov	r0, r6
    d276:	f7ff f935 	bl	c4e4 <__aeabi_i2d>
    d27a:	e9dd 2300 	ldrd	r2, r3, [sp]
    d27e:	f7ff fb19 	bl	c8b4 <__aeabi_dmul>
    d282:	2200      	movs	r2, #0
    d284:	4b83      	ldr	r3, [pc, #524]	; (d494 <_dtoa_r+0x60c>)
    d286:	f7fe ffe1 	bl	c24c <__adddf3>
    d28a:	4606      	mov	r6, r0
    d28c:	f1a1 7750 	sub.w	r7, r1, #54525952	; 0x3400000
    d290:	2c00      	cmp	r4, #0
    d292:	d15c      	bne.n	d34e <_dtoa_r+0x4c6>
    d294:	2200      	movs	r2, #0
    d296:	4b80      	ldr	r3, [pc, #512]	; (d498 <_dtoa_r+0x610>)
    d298:	e9dd 0100 	ldrd	r0, r1, [sp]
    d29c:	f7fe ffd4 	bl	c248 <__aeabi_dsub>
    d2a0:	4632      	mov	r2, r6
    d2a2:	463b      	mov	r3, r7
    d2a4:	e9cd 0100 	strd	r0, r1, [sp]
    d2a8:	f7ff fd94 	bl	cdd4 <__aeabi_dcmpgt>
    d2ac:	2800      	cmp	r0, #0
    d2ae:	f040 8289 	bne.w	d7c4 <_dtoa_r+0x93c>
    d2b2:	4632      	mov	r2, r6
    d2b4:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
    d2b8:	e9dd 0100 	ldrd	r0, r1, [sp]
    d2bc:	f7ff fd6c 	bl	cd98 <__aeabi_dcmplt>
    d2c0:	2800      	cmp	r0, #0
    d2c2:	f040 827d 	bne.w	d7c0 <_dtoa_r+0x938>
    d2c6:	e9dd 340e 	ldrd	r3, r4, [sp, #56]	; 0x38
    d2ca:	e9cd 3400 	strd	r3, r4, [sp]
    d2ce:	9b17      	ldr	r3, [sp, #92]	; 0x5c
    d2d0:	2b00      	cmp	r3, #0
    d2d2:	f2c0 814c 	blt.w	d56e <_dtoa_r+0x6e6>
    d2d6:	f1ba 0f0e 	cmp.w	sl, #14
    d2da:	f300 8148 	bgt.w	d56e <_dtoa_r+0x6e6>
    d2de:	4b69      	ldr	r3, [pc, #420]	; (d484 <_dtoa_r+0x5fc>)
    d2e0:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
    d2e4:	ed93 7b00 	vldr	d7, [r3]
    d2e8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    d2ea:	2b00      	cmp	r3, #0
    d2ec:	ed8d 7b04 	vstr	d7, [sp, #16]
    d2f0:	f280 80d6 	bge.w	d4a0 <_dtoa_r+0x618>
    d2f4:	f1b9 0f00 	cmp.w	r9, #0
    d2f8:	f300 80d2 	bgt.w	d4a0 <_dtoa_r+0x618>
    d2fc:	f040 825f 	bne.w	d7be <_dtoa_r+0x936>
    d300:	2200      	movs	r2, #0
    d302:	4b65      	ldr	r3, [pc, #404]	; (d498 <_dtoa_r+0x610>)
    d304:	464c      	mov	r4, r9
    d306:	464e      	mov	r6, r9
    d308:	ec51 0b17 	vmov	r0, r1, d7
    d30c:	f7ff fad2 	bl	c8b4 <__aeabi_dmul>
    d310:	e9dd 2300 	ldrd	r2, r3, [sp]
    d314:	f7ff fd54 	bl	cdc0 <__aeabi_dcmpge>
    d318:	2800      	cmp	r0, #0
    d31a:	f040 8238 	bne.w	d78e <_dtoa_r+0x906>
    d31e:	9d03      	ldr	r5, [sp, #12]
    d320:	2331      	movs	r3, #49	; 0x31
    d322:	f10a 0a01 	add.w	sl, sl, #1
    d326:	f805 3b01 	strb.w	r3, [r5], #1
    d32a:	e234      	b.n	d796 <_dtoa_r+0x90e>
    d32c:	07e7      	lsls	r7, r4, #31
    d32e:	d505      	bpl.n	d33c <_dtoa_r+0x4b4>
    d330:	3601      	adds	r6, #1
    d332:	e9d5 2300 	ldrd	r2, r3, [r5]
    d336:	f7ff fabd 	bl	c8b4 <__aeabi_dmul>
    d33a:	2301      	movs	r3, #1
    d33c:	1064      	asrs	r4, r4, #1
    d33e:	3508      	adds	r5, #8
    d340:	e773      	b.n	d22a <_dtoa_r+0x3a2>
    d342:	2602      	movs	r6, #2
    d344:	e775      	b.n	d232 <_dtoa_r+0x3aa>
    d346:	f8cd a028 	str.w	sl, [sp, #40]	; 0x28
    d34a:	464c      	mov	r4, r9
    d34c:	e792      	b.n	d274 <_dtoa_r+0x3ec>
    d34e:	4b4d      	ldr	r3, [pc, #308]	; (d484 <_dtoa_r+0x5fc>)
    d350:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
    d354:	e953 0102 	ldrd	r0, r1, [r3, #-8]
    d358:	9b03      	ldr	r3, [sp, #12]
    d35a:	441c      	add	r4, r3
    d35c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    d35e:	2b00      	cmp	r3, #0
    d360:	d046      	beq.n	d3f0 <_dtoa_r+0x568>
    d362:	4602      	mov	r2, r0
    d364:	460b      	mov	r3, r1
    d366:	2000      	movs	r0, #0
    d368:	494c      	ldr	r1, [pc, #304]	; (d49c <_dtoa_r+0x614>)
    d36a:	f7ff fbcd 	bl	cb08 <__aeabi_ddiv>
    d36e:	4632      	mov	r2, r6
    d370:	463b      	mov	r3, r7
    d372:	f7fe ff69 	bl	c248 <__aeabi_dsub>
    d376:	9d03      	ldr	r5, [sp, #12]
    d378:	4606      	mov	r6, r0
    d37a:	460f      	mov	r7, r1
    d37c:	e9dd 0100 	ldrd	r0, r1, [sp]
    d380:	f7ff fd48 	bl	ce14 <__aeabi_d2iz>
    d384:	9012      	str	r0, [sp, #72]	; 0x48
    d386:	f7ff f8ad 	bl	c4e4 <__aeabi_i2d>
    d38a:	4602      	mov	r2, r0
    d38c:	460b      	mov	r3, r1
    d38e:	e9dd 0100 	ldrd	r0, r1, [sp]
    d392:	f7fe ff59 	bl	c248 <__aeabi_dsub>
    d396:	9b12      	ldr	r3, [sp, #72]	; 0x48
    d398:	4632      	mov	r2, r6
    d39a:	3330      	adds	r3, #48	; 0x30
    d39c:	f805 3b01 	strb.w	r3, [r5], #1
    d3a0:	463b      	mov	r3, r7
    d3a2:	e9cd 0100 	strd	r0, r1, [sp]
    d3a6:	f7ff fcf7 	bl	cd98 <__aeabi_dcmplt>
    d3aa:	2800      	cmp	r0, #0
    d3ac:	d15f      	bne.n	d46e <_dtoa_r+0x5e6>
    d3ae:	2000      	movs	r0, #0
    d3b0:	4936      	ldr	r1, [pc, #216]	; (d48c <_dtoa_r+0x604>)
    d3b2:	e9dd 2300 	ldrd	r2, r3, [sp]
    d3b6:	f7fe ff47 	bl	c248 <__aeabi_dsub>
    d3ba:	4632      	mov	r2, r6
    d3bc:	463b      	mov	r3, r7
    d3be:	f7ff fceb 	bl	cd98 <__aeabi_dcmplt>
    d3c2:	2800      	cmp	r0, #0
    d3c4:	f040 80b2 	bne.w	d52c <_dtoa_r+0x6a4>
    d3c8:	42a5      	cmp	r5, r4
    d3ca:	f43f af7c 	beq.w	d2c6 <_dtoa_r+0x43e>
    d3ce:	2200      	movs	r2, #0
    d3d0:	4b2f      	ldr	r3, [pc, #188]	; (d490 <_dtoa_r+0x608>)
    d3d2:	4630      	mov	r0, r6
    d3d4:	4639      	mov	r1, r7
    d3d6:	f7ff fa6d 	bl	c8b4 <__aeabi_dmul>
    d3da:	2200      	movs	r2, #0
    d3dc:	4606      	mov	r6, r0
    d3de:	460f      	mov	r7, r1
    d3e0:	4b2b      	ldr	r3, [pc, #172]	; (d490 <_dtoa_r+0x608>)
    d3e2:	e9dd 0100 	ldrd	r0, r1, [sp]
    d3e6:	f7ff fa65 	bl	c8b4 <__aeabi_dmul>
    d3ea:	e9cd 0100 	strd	r0, r1, [sp]
    d3ee:	e7c5      	b.n	d37c <_dtoa_r+0x4f4>
    d3f0:	4632      	mov	r2, r6
    d3f2:	463b      	mov	r3, r7
    d3f4:	f7ff fa5e 	bl	c8b4 <__aeabi_dmul>
    d3f8:	4625      	mov	r5, r4
    d3fa:	9e03      	ldr	r6, [sp, #12]
    d3fc:	e9cd 0112 	strd	r0, r1, [sp, #72]	; 0x48
    d400:	e9dd 0100 	ldrd	r0, r1, [sp]
    d404:	f7ff fd06 	bl	ce14 <__aeabi_d2iz>
    d408:	4607      	mov	r7, r0
    d40a:	f7ff f86b 	bl	c4e4 <__aeabi_i2d>
    d40e:	4602      	mov	r2, r0
    d410:	3730      	adds	r7, #48	; 0x30
    d412:	460b      	mov	r3, r1
    d414:	e9dd 0100 	ldrd	r0, r1, [sp]
    d418:	f7fe ff16 	bl	c248 <__aeabi_dsub>
    d41c:	f806 7b01 	strb.w	r7, [r6], #1
    d420:	42a6      	cmp	r6, r4
    d422:	f04f 0200 	mov.w	r2, #0
    d426:	e9cd 0100 	strd	r0, r1, [sp]
    d42a:	d125      	bne.n	d478 <_dtoa_r+0x5f0>
    d42c:	4b1b      	ldr	r3, [pc, #108]	; (d49c <_dtoa_r+0x614>)
    d42e:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
    d432:	f7fe ff0b 	bl	c24c <__adddf3>
    d436:	4602      	mov	r2, r0
    d438:	460b      	mov	r3, r1
    d43a:	e9dd 0100 	ldrd	r0, r1, [sp]
    d43e:	f7ff fcc9 	bl	cdd4 <__aeabi_dcmpgt>
    d442:	2800      	cmp	r0, #0
    d444:	d172      	bne.n	d52c <_dtoa_r+0x6a4>
    d446:	2000      	movs	r0, #0
    d448:	4914      	ldr	r1, [pc, #80]	; (d49c <_dtoa_r+0x614>)
    d44a:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
    d44e:	f7fe fefb 	bl	c248 <__aeabi_dsub>
    d452:	4602      	mov	r2, r0
    d454:	460b      	mov	r3, r1
    d456:	e9dd 0100 	ldrd	r0, r1, [sp]
    d45a:	f7ff fc9d 	bl	cd98 <__aeabi_dcmplt>
    d45e:	2800      	cmp	r0, #0
    d460:	f43f af31 	beq.w	d2c6 <_dtoa_r+0x43e>
    d464:	f815 3c01 	ldrb.w	r3, [r5, #-1]
    d468:	1e6a      	subs	r2, r5, #1
    d46a:	2b30      	cmp	r3, #48	; 0x30
    d46c:	d002      	beq.n	d474 <_dtoa_r+0x5ec>
    d46e:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
    d472:	e049      	b.n	d508 <_dtoa_r+0x680>
    d474:	4615      	mov	r5, r2
    d476:	e7f5      	b.n	d464 <_dtoa_r+0x5dc>
    d478:	4b05      	ldr	r3, [pc, #20]	; (d490 <_dtoa_r+0x608>)
    d47a:	f7ff fa1b 	bl	c8b4 <__aeabi_dmul>
    d47e:	e9cd 0100 	strd	r0, r1, [sp]
    d482:	e7bd      	b.n	d400 <_dtoa_r+0x578>
    d484:	000229f8 	.word	0x000229f8
    d488:	000229d0 	.word	0x000229d0
    d48c:	3ff00000 	.word	0x3ff00000
    d490:	40240000 	.word	0x40240000
    d494:	401c0000 	.word	0x401c0000
    d498:	40140000 	.word	0x40140000
    d49c:	3fe00000 	.word	0x3fe00000
    d4a0:	e9dd 6700 	ldrd	r6, r7, [sp]
    d4a4:	9d03      	ldr	r5, [sp, #12]
    d4a6:	4630      	mov	r0, r6
    d4a8:	4639      	mov	r1, r7
    d4aa:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
    d4ae:	f7ff fb2b 	bl	cb08 <__aeabi_ddiv>
    d4b2:	f7ff fcaf 	bl	ce14 <__aeabi_d2iz>
    d4b6:	4604      	mov	r4, r0
    d4b8:	f7ff f814 	bl	c4e4 <__aeabi_i2d>
    d4bc:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
    d4c0:	f7ff f9f8 	bl	c8b4 <__aeabi_dmul>
    d4c4:	4602      	mov	r2, r0
    d4c6:	4630      	mov	r0, r6
    d4c8:	f104 0630 	add.w	r6, r4, #48	; 0x30
    d4cc:	460b      	mov	r3, r1
    d4ce:	4639      	mov	r1, r7
    d4d0:	f7fe feba 	bl	c248 <__aeabi_dsub>
    d4d4:	f805 6b01 	strb.w	r6, [r5], #1
    d4d8:	9e03      	ldr	r6, [sp, #12]
    d4da:	4602      	mov	r2, r0
    d4dc:	460b      	mov	r3, r1
    d4de:	1bae      	subs	r6, r5, r6
    d4e0:	45b1      	cmp	r9, r6
    d4e2:	d137      	bne.n	d554 <_dtoa_r+0x6cc>
    d4e4:	f7fe feb2 	bl	c24c <__adddf3>
    d4e8:	4606      	mov	r6, r0
    d4ea:	460f      	mov	r7, r1
    d4ec:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
    d4f0:	f7ff fc70 	bl	cdd4 <__aeabi_dcmpgt>
    d4f4:	b9c0      	cbnz	r0, d528 <_dtoa_r+0x6a0>
    d4f6:	4630      	mov	r0, r6
    d4f8:	4639      	mov	r1, r7
    d4fa:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
    d4fe:	f7ff fc41 	bl	cd84 <__aeabi_dcmpeq>
    d502:	b108      	cbz	r0, d508 <_dtoa_r+0x680>
    d504:	07e1      	lsls	r1, r4, #31
    d506:	d40f      	bmi.n	d528 <_dtoa_r+0x6a0>
    d508:	4641      	mov	r1, r8
    d50a:	4658      	mov	r0, fp
    d50c:	f014 fd15 	bl	21f3a <_Bfree>
    d510:	2300      	movs	r3, #0
    d512:	9a14      	ldr	r2, [sp, #80]	; 0x50
    d514:	702b      	strb	r3, [r5, #0]
    d516:	f10a 0301 	add.w	r3, sl, #1
    d51a:	6013      	str	r3, [r2, #0]
    d51c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
    d51e:	2b00      	cmp	r3, #0
    d520:	f43f acfb 	beq.w	cf1a <_dtoa_r+0x92>
    d524:	601d      	str	r5, [r3, #0]
    d526:	e4f8      	b.n	cf1a <_dtoa_r+0x92>
    d528:	f8cd a028 	str.w	sl, [sp, #40]	; 0x28
    d52c:	f815 2c01 	ldrb.w	r2, [r5, #-1]
    d530:	1e6b      	subs	r3, r5, #1
    d532:	2a39      	cmp	r2, #57	; 0x39
    d534:	d108      	bne.n	d548 <_dtoa_r+0x6c0>
    d536:	9a03      	ldr	r2, [sp, #12]
    d538:	429a      	cmp	r2, r3
    d53a:	d109      	bne.n	d550 <_dtoa_r+0x6c8>
    d53c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    d53e:	9903      	ldr	r1, [sp, #12]
    d540:	3201      	adds	r2, #1
    d542:	920a      	str	r2, [sp, #40]	; 0x28
    d544:	2230      	movs	r2, #48	; 0x30
    d546:	700a      	strb	r2, [r1, #0]
    d548:	781a      	ldrb	r2, [r3, #0]
    d54a:	3201      	adds	r2, #1
    d54c:	701a      	strb	r2, [r3, #0]
    d54e:	e78e      	b.n	d46e <_dtoa_r+0x5e6>
    d550:	461d      	mov	r5, r3
    d552:	e7eb      	b.n	d52c <_dtoa_r+0x6a4>
    d554:	2200      	movs	r2, #0
    d556:	4b9d      	ldr	r3, [pc, #628]	; (d7cc <_dtoa_r+0x944>)
    d558:	f7ff f9ac 	bl	c8b4 <__aeabi_dmul>
    d55c:	2200      	movs	r2, #0
    d55e:	2300      	movs	r3, #0
    d560:	4606      	mov	r6, r0
    d562:	460f      	mov	r7, r1
    d564:	f7ff fc0e 	bl	cd84 <__aeabi_dcmpeq>
    d568:	2800      	cmp	r0, #0
    d56a:	d09c      	beq.n	d4a6 <_dtoa_r+0x61e>
    d56c:	e7cc      	b.n	d508 <_dtoa_r+0x680>
    d56e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    d570:	2a00      	cmp	r2, #0
    d572:	f000 80cb 	beq.w	d70c <_dtoa_r+0x884>
    d576:	9a08      	ldr	r2, [sp, #32]
    d578:	2a01      	cmp	r2, #1
    d57a:	f300 80ae 	bgt.w	d6da <_dtoa_r+0x852>
    d57e:	9a15      	ldr	r2, [sp, #84]	; 0x54
    d580:	2a00      	cmp	r2, #0
    d582:	f000 80a6 	beq.w	d6d2 <_dtoa_r+0x84a>
    d586:	f203 4333 	addw	r3, r3, #1075	; 0x433
    d58a:	9c09      	ldr	r4, [sp, #36]	; 0x24
    d58c:	9d06      	ldr	r5, [sp, #24]
    d58e:	9a06      	ldr	r2, [sp, #24]
    d590:	2101      	movs	r1, #1
    d592:	4658      	mov	r0, fp
    d594:	441a      	add	r2, r3
    d596:	9206      	str	r2, [sp, #24]
    d598:	9a07      	ldr	r2, [sp, #28]
    d59a:	441a      	add	r2, r3
    d59c:	9207      	str	r2, [sp, #28]
    d59e:	f014 fd70 	bl	22082 <__i2b>
    d5a2:	4606      	mov	r6, r0
    d5a4:	2d00      	cmp	r5, #0
    d5a6:	dd0c      	ble.n	d5c2 <_dtoa_r+0x73a>
    d5a8:	9b07      	ldr	r3, [sp, #28]
    d5aa:	2b00      	cmp	r3, #0
    d5ac:	dd09      	ble.n	d5c2 <_dtoa_r+0x73a>
    d5ae:	42ab      	cmp	r3, r5
    d5b0:	9a06      	ldr	r2, [sp, #24]
    d5b2:	bfa8      	it	ge
    d5b4:	462b      	movge	r3, r5
    d5b6:	1ad2      	subs	r2, r2, r3
    d5b8:	1aed      	subs	r5, r5, r3
    d5ba:	9206      	str	r2, [sp, #24]
    d5bc:	9a07      	ldr	r2, [sp, #28]
    d5be:	1ad3      	subs	r3, r2, r3
    d5c0:	9307      	str	r3, [sp, #28]
    d5c2:	9b09      	ldr	r3, [sp, #36]	; 0x24
    d5c4:	b1f3      	cbz	r3, d604 <_dtoa_r+0x77c>
    d5c6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    d5c8:	2b00      	cmp	r3, #0
    d5ca:	f000 80a3 	beq.w	d714 <_dtoa_r+0x88c>
    d5ce:	2c00      	cmp	r4, #0
    d5d0:	dd10      	ble.n	d5f4 <_dtoa_r+0x76c>
    d5d2:	4631      	mov	r1, r6
    d5d4:	4622      	mov	r2, r4
    d5d6:	4658      	mov	r0, fp
    d5d8:	f011 fed4 	bl	1f384 <__pow5mult>
    d5dc:	4642      	mov	r2, r8
    d5de:	4601      	mov	r1, r0
    d5e0:	4606      	mov	r6, r0
    d5e2:	4658      	mov	r0, fp
    d5e4:	f014 fd56 	bl	22094 <__multiply>
    d5e8:	4607      	mov	r7, r0
    d5ea:	4641      	mov	r1, r8
    d5ec:	4658      	mov	r0, fp
    d5ee:	46b8      	mov	r8, r7
    d5f0:	f014 fca3 	bl	21f3a <_Bfree>
    d5f4:	9b09      	ldr	r3, [sp, #36]	; 0x24
    d5f6:	1b1a      	subs	r2, r3, r4
    d5f8:	d004      	beq.n	d604 <_dtoa_r+0x77c>
    d5fa:	4641      	mov	r1, r8
    d5fc:	4658      	mov	r0, fp
    d5fe:	f011 fec1 	bl	1f384 <__pow5mult>
    d602:	4680      	mov	r8, r0
    d604:	2101      	movs	r1, #1
    d606:	4658      	mov	r0, fp
    d608:	f014 fd3b 	bl	22082 <__i2b>
    d60c:	9b10      	ldr	r3, [sp, #64]	; 0x40
    d60e:	4604      	mov	r4, r0
    d610:	2b00      	cmp	r3, #0
    d612:	f340 8081 	ble.w	d718 <_dtoa_r+0x890>
    d616:	461a      	mov	r2, r3
    d618:	4601      	mov	r1, r0
    d61a:	4658      	mov	r0, fp
    d61c:	f011 feb2 	bl	1f384 <__pow5mult>
    d620:	9b08      	ldr	r3, [sp, #32]
    d622:	4604      	mov	r4, r0
    d624:	2b01      	cmp	r3, #1
    d626:	dd7a      	ble.n	d71e <_dtoa_r+0x896>
    d628:	2700      	movs	r7, #0
    d62a:	6923      	ldr	r3, [r4, #16]
    d62c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
    d630:	6918      	ldr	r0, [r3, #16]
    d632:	f014 fcd6 	bl	21fe2 <__hi0bits>
    d636:	f1c0 0020 	rsb	r0, r0, #32
    d63a:	9b07      	ldr	r3, [sp, #28]
    d63c:	4418      	add	r0, r3
    d63e:	f010 001f 	ands.w	r0, r0, #31
    d642:	f000 808b 	beq.w	d75c <_dtoa_r+0x8d4>
    d646:	f1c0 0320 	rsb	r3, r0, #32
    d64a:	2b04      	cmp	r3, #4
    d64c:	f340 8084 	ble.w	d758 <_dtoa_r+0x8d0>
    d650:	f1c0 001c 	rsb	r0, r0, #28
    d654:	9b06      	ldr	r3, [sp, #24]
    d656:	4405      	add	r5, r0
    d658:	4403      	add	r3, r0
    d65a:	9306      	str	r3, [sp, #24]
    d65c:	9b07      	ldr	r3, [sp, #28]
    d65e:	4403      	add	r3, r0
    d660:	9307      	str	r3, [sp, #28]
    d662:	9b06      	ldr	r3, [sp, #24]
    d664:	2b00      	cmp	r3, #0
    d666:	dd05      	ble.n	d674 <_dtoa_r+0x7ec>
    d668:	4641      	mov	r1, r8
    d66a:	461a      	mov	r2, r3
    d66c:	4658      	mov	r0, fp
    d66e:	f014 fda0 	bl	221b2 <__lshift>
    d672:	4680      	mov	r8, r0
    d674:	9b07      	ldr	r3, [sp, #28]
    d676:	2b00      	cmp	r3, #0
    d678:	dd05      	ble.n	d686 <_dtoa_r+0x7fe>
    d67a:	4621      	mov	r1, r4
    d67c:	461a      	mov	r2, r3
    d67e:	4658      	mov	r0, fp
    d680:	f014 fd97 	bl	221b2 <__lshift>
    d684:	4604      	mov	r4, r0
    d686:	9b11      	ldr	r3, [sp, #68]	; 0x44
    d688:	2b00      	cmp	r3, #0
    d68a:	d069      	beq.n	d760 <_dtoa_r+0x8d8>
    d68c:	4621      	mov	r1, r4
    d68e:	4640      	mov	r0, r8
    d690:	f014 fde2 	bl	22258 <__mcmp>
    d694:	2800      	cmp	r0, #0
    d696:	da63      	bge.n	d760 <_dtoa_r+0x8d8>
    d698:	2300      	movs	r3, #0
    d69a:	4641      	mov	r1, r8
    d69c:	220a      	movs	r2, #10
    d69e:	4658      	mov	r0, fp
    d6a0:	f014 fc62 	bl	21f68 <__multadd>
    d6a4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    d6a6:	f10a 3aff 	add.w	sl, sl, #4294967295
    d6aa:	4680      	mov	r8, r0
    d6ac:	2b00      	cmp	r3, #0
    d6ae:	f000 8179 	beq.w	d9a4 <_dtoa_r+0xb1c>
    d6b2:	2300      	movs	r3, #0
    d6b4:	4631      	mov	r1, r6
    d6b6:	220a      	movs	r2, #10
    d6b8:	4658      	mov	r0, fp
    d6ba:	f014 fc55 	bl	21f68 <__multadd>
    d6be:	9b04      	ldr	r3, [sp, #16]
    d6c0:	4606      	mov	r6, r0
    d6c2:	2b00      	cmp	r3, #0
    d6c4:	f300 808a 	bgt.w	d7dc <_dtoa_r+0x954>
    d6c8:	9b08      	ldr	r3, [sp, #32]
    d6ca:	2b02      	cmp	r3, #2
    d6cc:	f340 8086 	ble.w	d7dc <_dtoa_r+0x954>
    d6d0:	e04e      	b.n	d770 <_dtoa_r+0x8e8>
    d6d2:	9b16      	ldr	r3, [sp, #88]	; 0x58
    d6d4:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
    d6d8:	e757      	b.n	d58a <_dtoa_r+0x702>
    d6da:	9b09      	ldr	r3, [sp, #36]	; 0x24
    d6dc:	f109 34ff 	add.w	r4, r9, #4294967295
    d6e0:	42a3      	cmp	r3, r4
    d6e2:	bfb7      	itett	lt
    d6e4:	9b09      	ldrlt	r3, [sp, #36]	; 0x24
    d6e6:	1b1c      	subge	r4, r3, r4
    d6e8:	9409      	strlt	r4, [sp, #36]	; 0x24
    d6ea:	1ae2      	sublt	r2, r4, r3
    d6ec:	bfbf      	itttt	lt
    d6ee:	9b10      	ldrlt	r3, [sp, #64]	; 0x40
    d6f0:	2400      	movlt	r4, #0
    d6f2:	189b      	addlt	r3, r3, r2
    d6f4:	9310      	strlt	r3, [sp, #64]	; 0x40
    d6f6:	f1b9 0f00 	cmp.w	r9, #0
    d6fa:	bfb3      	iteet	lt
    d6fc:	9b06      	ldrlt	r3, [sp, #24]
    d6fe:	464b      	movge	r3, r9
    d700:	9d06      	ldrge	r5, [sp, #24]
    d702:	eba3 0509 	sublt.w	r5, r3, r9
    d706:	bfb8      	it	lt
    d708:	2300      	movlt	r3, #0
    d70a:	e740      	b.n	d58e <_dtoa_r+0x706>
    d70c:	9c09      	ldr	r4, [sp, #36]	; 0x24
    d70e:	9d06      	ldr	r5, [sp, #24]
    d710:	9e0c      	ldr	r6, [sp, #48]	; 0x30
    d712:	e747      	b.n	d5a4 <_dtoa_r+0x71c>
    d714:	9a09      	ldr	r2, [sp, #36]	; 0x24
    d716:	e770      	b.n	d5fa <_dtoa_r+0x772>
    d718:	9b08      	ldr	r3, [sp, #32]
    d71a:	2b01      	cmp	r3, #1
    d71c:	dc18      	bgt.n	d750 <_dtoa_r+0x8c8>
    d71e:	9b00      	ldr	r3, [sp, #0]
    d720:	b9b3      	cbnz	r3, d750 <_dtoa_r+0x8c8>
    d722:	9b01      	ldr	r3, [sp, #4]
    d724:	f3c3 0313 	ubfx	r3, r3, #0, #20
    d728:	b9a3      	cbnz	r3, d754 <_dtoa_r+0x8cc>
    d72a:	9b01      	ldr	r3, [sp, #4]
    d72c:	f023 4700 	bic.w	r7, r3, #2147483648	; 0x80000000
    d730:	0d3f      	lsrs	r7, r7, #20
    d732:	053f      	lsls	r7, r7, #20
    d734:	b137      	cbz	r7, d744 <_dtoa_r+0x8bc>
    d736:	9b06      	ldr	r3, [sp, #24]
    d738:	2701      	movs	r7, #1
    d73a:	3301      	adds	r3, #1
    d73c:	9306      	str	r3, [sp, #24]
    d73e:	9b07      	ldr	r3, [sp, #28]
    d740:	3301      	adds	r3, #1
    d742:	9307      	str	r3, [sp, #28]
    d744:	9b10      	ldr	r3, [sp, #64]	; 0x40
    d746:	2b00      	cmp	r3, #0
    d748:	f47f af6f 	bne.w	d62a <_dtoa_r+0x7a2>
    d74c:	2001      	movs	r0, #1
    d74e:	e774      	b.n	d63a <_dtoa_r+0x7b2>
    d750:	2700      	movs	r7, #0
    d752:	e7f7      	b.n	d744 <_dtoa_r+0x8bc>
    d754:	9f00      	ldr	r7, [sp, #0]
    d756:	e7f5      	b.n	d744 <_dtoa_r+0x8bc>
    d758:	d083      	beq.n	d662 <_dtoa_r+0x7da>
    d75a:	4618      	mov	r0, r3
    d75c:	301c      	adds	r0, #28
    d75e:	e779      	b.n	d654 <_dtoa_r+0x7cc>
    d760:	f1b9 0f00 	cmp.w	r9, #0
    d764:	dc34      	bgt.n	d7d0 <_dtoa_r+0x948>
    d766:	9b08      	ldr	r3, [sp, #32]
    d768:	2b02      	cmp	r3, #2
    d76a:	dd31      	ble.n	d7d0 <_dtoa_r+0x948>
    d76c:	f8cd 9010 	str.w	r9, [sp, #16]
    d770:	9b04      	ldr	r3, [sp, #16]
    d772:	b963      	cbnz	r3, d78e <_dtoa_r+0x906>
    d774:	4621      	mov	r1, r4
    d776:	2205      	movs	r2, #5
    d778:	4658      	mov	r0, fp
    d77a:	f014 fbf5 	bl	21f68 <__multadd>
    d77e:	4601      	mov	r1, r0
    d780:	4604      	mov	r4, r0
    d782:	4640      	mov	r0, r8
    d784:	f014 fd68 	bl	22258 <__mcmp>
    d788:	2800      	cmp	r0, #0
    d78a:	f73f adc8 	bgt.w	d31e <_dtoa_r+0x496>
    d78e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    d790:	9d03      	ldr	r5, [sp, #12]
    d792:	ea6f 0a03 	mvn.w	sl, r3
    d796:	2700      	movs	r7, #0
    d798:	4621      	mov	r1, r4
    d79a:	4658      	mov	r0, fp
    d79c:	f014 fbcd 	bl	21f3a <_Bfree>
    d7a0:	2e00      	cmp	r6, #0
    d7a2:	f43f aeb1 	beq.w	d508 <_dtoa_r+0x680>
    d7a6:	b12f      	cbz	r7, d7b4 <_dtoa_r+0x92c>
    d7a8:	42b7      	cmp	r7, r6
    d7aa:	d003      	beq.n	d7b4 <_dtoa_r+0x92c>
    d7ac:	4639      	mov	r1, r7
    d7ae:	4658      	mov	r0, fp
    d7b0:	f014 fbc3 	bl	21f3a <_Bfree>
    d7b4:	4631      	mov	r1, r6
    d7b6:	4658      	mov	r0, fp
    d7b8:	f014 fbbf 	bl	21f3a <_Bfree>
    d7bc:	e6a4      	b.n	d508 <_dtoa_r+0x680>
    d7be:	2400      	movs	r4, #0
    d7c0:	4626      	mov	r6, r4
    d7c2:	e7e4      	b.n	d78e <_dtoa_r+0x906>
    d7c4:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
    d7c8:	4626      	mov	r6, r4
    d7ca:	e5a8      	b.n	d31e <_dtoa_r+0x496>
    d7cc:	40240000 	.word	0x40240000
    d7d0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    d7d2:	f8cd 9010 	str.w	r9, [sp, #16]
    d7d6:	2b00      	cmp	r3, #0
    d7d8:	f000 80eb 	beq.w	d9b2 <_dtoa_r+0xb2a>
    d7dc:	2d00      	cmp	r5, #0
    d7de:	dd05      	ble.n	d7ec <_dtoa_r+0x964>
    d7e0:	4631      	mov	r1, r6
    d7e2:	462a      	mov	r2, r5
    d7e4:	4658      	mov	r0, fp
    d7e6:	f014 fce4 	bl	221b2 <__lshift>
    d7ea:	4606      	mov	r6, r0
    d7ec:	2f00      	cmp	r7, #0
    d7ee:	d056      	beq.n	d89e <_dtoa_r+0xa16>
    d7f0:	6871      	ldr	r1, [r6, #4]
    d7f2:	4658      	mov	r0, fp
    d7f4:	f014 fb6d 	bl	21ed2 <_Balloc>
    d7f8:	6932      	ldr	r2, [r6, #16]
    d7fa:	4605      	mov	r5, r0
    d7fc:	f106 010c 	add.w	r1, r6, #12
    d800:	3202      	adds	r2, #2
    d802:	300c      	adds	r0, #12
    d804:	0092      	lsls	r2, r2, #2
    d806:	f014 f898 	bl	2193a <memcpy>
    d80a:	2201      	movs	r2, #1
    d80c:	4629      	mov	r1, r5
    d80e:	4658      	mov	r0, fp
    d810:	f014 fccf 	bl	221b2 <__lshift>
    d814:	9b03      	ldr	r3, [sp, #12]
    d816:	4637      	mov	r7, r6
    d818:	4606      	mov	r6, r0
    d81a:	f103 0901 	add.w	r9, r3, #1
    d81e:	e9dd 2303 	ldrd	r2, r3, [sp, #12]
    d822:	4413      	add	r3, r2
    d824:	9309      	str	r3, [sp, #36]	; 0x24
    d826:	9b00      	ldr	r3, [sp, #0]
    d828:	f003 0301 	and.w	r3, r3, #1
    d82c:	9307      	str	r3, [sp, #28]
    d82e:	f109 33ff 	add.w	r3, r9, #4294967295
    d832:	4621      	mov	r1, r4
    d834:	4640      	mov	r0, r8
    d836:	9300      	str	r3, [sp, #0]
    d838:	f014 fa48 	bl	21ccc <quorem>
    d83c:	4603      	mov	r3, r0
    d83e:	9004      	str	r0, [sp, #16]
    d840:	4639      	mov	r1, r7
    d842:	4640      	mov	r0, r8
    d844:	3330      	adds	r3, #48	; 0x30
    d846:	930a      	str	r3, [sp, #40]	; 0x28
    d848:	f014 fd06 	bl	22258 <__mcmp>
    d84c:	4632      	mov	r2, r6
    d84e:	9006      	str	r0, [sp, #24]
    d850:	4621      	mov	r1, r4
    d852:	4658      	mov	r0, fp
    d854:	f014 fd1a 	bl	2228c <__mdiff>
    d858:	68c2      	ldr	r2, [r0, #12]
    d85a:	4605      	mov	r5, r0
    d85c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    d85e:	bb02      	cbnz	r2, d8a2 <_dtoa_r+0xa1a>
    d860:	4601      	mov	r1, r0
    d862:	4640      	mov	r0, r8
    d864:	f014 fcf8 	bl	22258 <__mcmp>
    d868:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    d86a:	4602      	mov	r2, r0
    d86c:	4629      	mov	r1, r5
    d86e:	4658      	mov	r0, fp
    d870:	920c      	str	r2, [sp, #48]	; 0x30
    d872:	464d      	mov	r5, r9
    d874:	930a      	str	r3, [sp, #40]	; 0x28
    d876:	f014 fb60 	bl	21f3a <_Bfree>
    d87a:	9b08      	ldr	r3, [sp, #32]
    d87c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    d87e:	ea43 0102 	orr.w	r1, r3, r2
    d882:	9b07      	ldr	r3, [sp, #28]
    d884:	430b      	orrs	r3, r1
    d886:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    d888:	d10d      	bne.n	d8a6 <_dtoa_r+0xa1e>
    d88a:	2b39      	cmp	r3, #57	; 0x39
    d88c:	d027      	beq.n	d8de <_dtoa_r+0xa56>
    d88e:	9a06      	ldr	r2, [sp, #24]
    d890:	2a00      	cmp	r2, #0
    d892:	dd01      	ble.n	d898 <_dtoa_r+0xa10>
    d894:	9b04      	ldr	r3, [sp, #16]
    d896:	3331      	adds	r3, #49	; 0x31
    d898:	9a00      	ldr	r2, [sp, #0]
    d89a:	7013      	strb	r3, [r2, #0]
    d89c:	e77c      	b.n	d798 <_dtoa_r+0x910>
    d89e:	4630      	mov	r0, r6
    d8a0:	e7b8      	b.n	d814 <_dtoa_r+0x98c>
    d8a2:	2201      	movs	r2, #1
    d8a4:	e7e2      	b.n	d86c <_dtoa_r+0x9e4>
    d8a6:	9906      	ldr	r1, [sp, #24]
    d8a8:	2900      	cmp	r1, #0
    d8aa:	db04      	blt.n	d8b6 <_dtoa_r+0xa2e>
    d8ac:	9808      	ldr	r0, [sp, #32]
    d8ae:	4301      	orrs	r1, r0
    d8b0:	9807      	ldr	r0, [sp, #28]
    d8b2:	4301      	orrs	r1, r0
    d8b4:	d11d      	bne.n	d8f2 <_dtoa_r+0xa6a>
    d8b6:	2a00      	cmp	r2, #0
    d8b8:	ddee      	ble.n	d898 <_dtoa_r+0xa10>
    d8ba:	4641      	mov	r1, r8
    d8bc:	2201      	movs	r2, #1
    d8be:	4658      	mov	r0, fp
    d8c0:	9306      	str	r3, [sp, #24]
    d8c2:	f014 fc76 	bl	221b2 <__lshift>
    d8c6:	4621      	mov	r1, r4
    d8c8:	4680      	mov	r8, r0
    d8ca:	f014 fcc5 	bl	22258 <__mcmp>
    d8ce:	2800      	cmp	r0, #0
    d8d0:	9b06      	ldr	r3, [sp, #24]
    d8d2:	dc02      	bgt.n	d8da <_dtoa_r+0xa52>
    d8d4:	d1e0      	bne.n	d898 <_dtoa_r+0xa10>
    d8d6:	07da      	lsls	r2, r3, #31
    d8d8:	d5de      	bpl.n	d898 <_dtoa_r+0xa10>
    d8da:	2b39      	cmp	r3, #57	; 0x39
    d8dc:	d1da      	bne.n	d894 <_dtoa_r+0xa0c>
    d8de:	2339      	movs	r3, #57	; 0x39
    d8e0:	9a00      	ldr	r2, [sp, #0]
    d8e2:	7013      	strb	r3, [r2, #0]
    d8e4:	f815 3c01 	ldrb.w	r3, [r5, #-1]
    d8e8:	1e6a      	subs	r2, r5, #1
    d8ea:	2b39      	cmp	r3, #57	; 0x39
    d8ec:	d046      	beq.n	d97c <_dtoa_r+0xaf4>
    d8ee:	3301      	adds	r3, #1
    d8f0:	e7d3      	b.n	d89a <_dtoa_r+0xa12>
    d8f2:	2a00      	cmp	r2, #0
    d8f4:	dd03      	ble.n	d8fe <_dtoa_r+0xa76>
    d8f6:	2b39      	cmp	r3, #57	; 0x39
    d8f8:	d0f1      	beq.n	d8de <_dtoa_r+0xa56>
    d8fa:	3301      	adds	r3, #1
    d8fc:	e7cc      	b.n	d898 <_dtoa_r+0xa10>
    d8fe:	9a09      	ldr	r2, [sp, #36]	; 0x24
    d900:	f809 3c01 	strb.w	r3, [r9, #-1]
    d904:	4591      	cmp	r9, r2
    d906:	d021      	beq.n	d94c <_dtoa_r+0xac4>
    d908:	4641      	mov	r1, r8
    d90a:	2300      	movs	r3, #0
    d90c:	220a      	movs	r2, #10
    d90e:	4658      	mov	r0, fp
    d910:	f014 fb2a 	bl	21f68 <__multadd>
    d914:	42b7      	cmp	r7, r6
    d916:	4680      	mov	r8, r0
    d918:	f04f 0300 	mov.w	r3, #0
    d91c:	f04f 020a 	mov.w	r2, #10
    d920:	4639      	mov	r1, r7
    d922:	4658      	mov	r0, fp
    d924:	d106      	bne.n	d934 <_dtoa_r+0xaac>
    d926:	f014 fb1f 	bl	21f68 <__multadd>
    d92a:	4607      	mov	r7, r0
    d92c:	4606      	mov	r6, r0
    d92e:	f109 0901 	add.w	r9, r9, #1
    d932:	e77c      	b.n	d82e <_dtoa_r+0x9a6>
    d934:	f014 fb18 	bl	21f68 <__multadd>
    d938:	4631      	mov	r1, r6
    d93a:	4607      	mov	r7, r0
    d93c:	2300      	movs	r3, #0
    d93e:	220a      	movs	r2, #10
    d940:	4658      	mov	r0, fp
    d942:	f014 fb11 	bl	21f68 <__multadd>
    d946:	4606      	mov	r6, r0
    d948:	e7f1      	b.n	d92e <_dtoa_r+0xaa6>
    d94a:	2700      	movs	r7, #0
    d94c:	4641      	mov	r1, r8
    d94e:	2201      	movs	r2, #1
    d950:	4658      	mov	r0, fp
    d952:	9300      	str	r3, [sp, #0]
    d954:	f014 fc2d 	bl	221b2 <__lshift>
    d958:	4621      	mov	r1, r4
    d95a:	4680      	mov	r8, r0
    d95c:	f014 fc7c 	bl	22258 <__mcmp>
    d960:	2800      	cmp	r0, #0
    d962:	dcbf      	bgt.n	d8e4 <_dtoa_r+0xa5c>
    d964:	d102      	bne.n	d96c <_dtoa_r+0xae4>
    d966:	9b00      	ldr	r3, [sp, #0]
    d968:	07db      	lsls	r3, r3, #31
    d96a:	d4bb      	bmi.n	d8e4 <_dtoa_r+0xa5c>
    d96c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
    d970:	1e6a      	subs	r2, r5, #1
    d972:	2b30      	cmp	r3, #48	; 0x30
    d974:	f47f af10 	bne.w	d798 <_dtoa_r+0x910>
    d978:	4615      	mov	r5, r2
    d97a:	e7f7      	b.n	d96c <_dtoa_r+0xae4>
    d97c:	9b03      	ldr	r3, [sp, #12]
    d97e:	4293      	cmp	r3, r2
    d980:	d104      	bne.n	d98c <_dtoa_r+0xb04>
    d982:	f10a 0a01 	add.w	sl, sl, #1
    d986:	2331      	movs	r3, #49	; 0x31
    d988:	9a03      	ldr	r2, [sp, #12]
    d98a:	e786      	b.n	d89a <_dtoa_r+0xa12>
    d98c:	4615      	mov	r5, r2
    d98e:	e7a9      	b.n	d8e4 <_dtoa_r+0xa5c>
    d990:	4b13      	ldr	r3, [pc, #76]	; (d9e0 <_dtoa_r+0xb58>)
    d992:	f7ff bae1 	b.w	cf58 <_dtoa_r+0xd0>
    d996:	9b23      	ldr	r3, [sp, #140]	; 0x8c
    d998:	2b00      	cmp	r3, #0
    d99a:	f47f aab9 	bne.w	cf10 <_dtoa_r+0x88>
    d99e:	4b11      	ldr	r3, [pc, #68]	; (d9e4 <_dtoa_r+0xb5c>)
    d9a0:	f7ff bada 	b.w	cf58 <_dtoa_r+0xd0>
    d9a4:	9b04      	ldr	r3, [sp, #16]
    d9a6:	2b00      	cmp	r3, #0
    d9a8:	dc03      	bgt.n	d9b2 <_dtoa_r+0xb2a>
    d9aa:	9b08      	ldr	r3, [sp, #32]
    d9ac:	2b02      	cmp	r3, #2
    d9ae:	f73f aedf 	bgt.w	d770 <_dtoa_r+0x8e8>
    d9b2:	9d03      	ldr	r5, [sp, #12]
    d9b4:	4621      	mov	r1, r4
    d9b6:	4640      	mov	r0, r8
    d9b8:	f014 f988 	bl	21ccc <quorem>
    d9bc:	9a03      	ldr	r2, [sp, #12]
    d9be:	f100 0330 	add.w	r3, r0, #48	; 0x30
    d9c2:	9904      	ldr	r1, [sp, #16]
    d9c4:	f805 3b01 	strb.w	r3, [r5], #1
    d9c8:	1aaa      	subs	r2, r5, r2
    d9ca:	4291      	cmp	r1, r2
    d9cc:	ddbd      	ble.n	d94a <_dtoa_r+0xac2>
    d9ce:	4641      	mov	r1, r8
    d9d0:	2300      	movs	r3, #0
    d9d2:	220a      	movs	r2, #10
    d9d4:	4658      	mov	r0, fp
    d9d6:	f014 fac7 	bl	21f68 <__multadd>
    d9da:	4680      	mov	r8, r0
    d9dc:	e7ea      	b.n	d9b4 <_dtoa_r+0xb2c>
    d9de:	bf00      	nop
    d9e0:	000251cf 	.word	0x000251cf
    d9e4:	0002578b 	.word	0x0002578b

0000d9e8 <data_print>:
#endif /* defined(CONFIG_LWM2M_CARRIER) */

/**@brief Function to print strings without null-termination
 */
static void data_print(u8_t *prefix, u8_t *data, size_t len)
{
    d9e8:	b5b0      	push	{r4, r5, r7, lr}
	char buf[len + 1];
    d9ea:	f102 0308 	add.w	r3, r2, #8
    d9ee:	f023 0307 	bic.w	r3, r3, #7
{
    d9f2:	af00      	add	r7, sp, #0
	char buf[len + 1];
    d9f4:	ebad 0d03 	sub.w	sp, sp, r3
{
    d9f8:	4605      	mov	r5, r0
__ ## fun ## _ichk(type1 __restrict dst, type2 __restrict src) { \
	return __builtin___ ## fun ## _chk(dst, src, __ssp_bos0(dst)); \
}

__BEGIN_DECLS
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
    d9fa:	4668      	mov	r0, sp
    d9fc:	4614      	mov	r4, r2
    d9fe:	f013 ff9c 	bl	2193a <memcpy>

	memcpy(buf, data, len);
	buf[len] = 0;
    da02:	2300      	movs	r3, #0
	printk("%s%s\n", prefix, buf);
    da04:	466a      	mov	r2, sp
    da06:	4629      	mov	r1, r5
    da08:	4803      	ldr	r0, [pc, #12]	; (da18 <data_print+0x30>)
	buf[len] = 0;
    da0a:	f80d 3004 	strb.w	r3, [sp, r4]
	printk("%s%s\n", prefix, buf);
    da0e:	f012 f9e4 	bl	1fdda <printk>
}
    da12:	46bd      	mov	sp, r7
    da14:	bdb0      	pop	{r4, r5, r7, pc}
    da16:	bf00      	nop
    da18:	00025617 	.word	0x00025617

0000da1c <data_publish.constprop.2>:
static int data_publish(struct mqtt_client *c, enum mqtt_qos qos,
	u8_t *data, size_t len)
{
	struct mqtt_publish_param param;

	param.message.topic.qos = qos;
    da1c:	2301      	movs	r3, #1
static int data_publish(struct mqtt_client *c, enum mqtt_qos qos,
    da1e:	b570      	push	{r4, r5, r6, lr}
	param.message.topic.topic.utf8 = CONFIG_MQTT_PUB_TOPIC;
    da20:	4c14      	ldr	r4, [pc, #80]	; (da74 <data_publish.constprop.2+0x58>)
static int data_publish(struct mqtt_client *c, enum mqtt_qos qos,
    da22:	b086      	sub	sp, #24
    da24:	4605      	mov	r5, r0
	param.message.topic.topic.size = strlen(CONFIG_MQTT_PUB_TOPIC);
    da26:	4620      	mov	r0, r4
static int data_publish(struct mqtt_client *c, enum mqtt_qos qos,
    da28:	460e      	mov	r6, r1
	param.message.topic.qos = qos;
    da2a:	f88d 3008 	strb.w	r3, [sp, #8]
	param.message.topic.topic.utf8 = CONFIG_MQTT_PUB_TOPIC;
    da2e:	9400      	str	r4, [sp, #0]
	param.message.topic.topic.size = strlen(CONFIG_MQTT_PUB_TOPIC);
    da30:	f7ff fa22 	bl	ce78 <strlen>
	param.message.payload.data = data;
	param.message.payload.len = len;
    da34:	e9cd 5603 	strd	r5, r6, [sp, #12]
	param.message.topic.topic.size = strlen(CONFIG_MQTT_PUB_TOPIC);
    da38:	9001      	str	r0, [sp, #4]
	param.message_id = sys_rand32_get();
    da3a:	f002 fe43 	bl	106c4 <sys_rand32_get>
	param.dup_flag = 0;
    da3e:	f89d 3016 	ldrb.w	r3, [sp, #22]
	param.retain_flag = 0;

	data_print("Publishing: ", data, len);
    da42:	4632      	mov	r2, r6
	param.dup_flag = 0;
    da44:	f023 0303 	bic.w	r3, r3, #3
	data_print("Publishing: ", data, len);
    da48:	4629      	mov	r1, r5
	param.message_id = sys_rand32_get();
    da4a:	f8ad 0014 	strh.w	r0, [sp, #20]
	data_print("Publishing: ", data, len);
    da4e:	480a      	ldr	r0, [pc, #40]	; (da78 <data_publish.constprop.2+0x5c>)
	param.dup_flag = 0;
    da50:	f88d 3016 	strb.w	r3, [sp, #22]
	data_print("Publishing: ", data, len);
    da54:	f7ff ffc8 	bl	d9e8 <data_print>
	printk("to topic: %s len: %u\n",
		CONFIG_MQTT_PUB_TOPIC,
		(unsigned int)strlen(CONFIG_MQTT_PUB_TOPIC));
    da58:	4620      	mov	r0, r4
    da5a:	f7ff fa0d 	bl	ce78 <strlen>
	printk("to topic: %s len: %u\n",
    da5e:	4621      	mov	r1, r4
    da60:	4602      	mov	r2, r0
    da62:	4806      	ldr	r0, [pc, #24]	; (da7c <data_publish.constprop.2+0x60>)
    da64:	f012 f9b9 	bl	1fdda <printk>

	return mqtt_publish(c, &param);
    da68:	4669      	mov	r1, sp
    da6a:	4805      	ldr	r0, [pc, #20]	; (da80 <data_publish.constprop.2+0x64>)
    da6c:	f012 fe71 	bl	20752 <mqtt_publish>
}
    da70:	b006      	add	sp, #24
    da72:	bd70      	pop	{r4, r5, r6, pc}
    da74:	00023037 	.word	0x00023037
    da78:	0002304c 	.word	0x0002304c
    da7c:	00023059 	.word	0x00023059
    da80:	20020008 	.word	0x20020008

0000da84 <poll.constprop.5>:
	__ASSERT_NO_MSG(socket_ops->connect);

	return socket_ops->connect(sock, addr, addrlen);
}

static inline int poll(struct pollfd *fds, int nfds, int timeout)
    da84:	b570      	push	{r4, r5, r6, lr}
{
	__ASSERT_NO_MSG(socket_ops);
    da86:	4c11      	ldr	r4, [pc, #68]	; (dacc <poll.constprop.5+0x48>)
static inline int poll(struct pollfd *fds, int nfds, int timeout)
    da88:	4605      	mov	r5, r0
	__ASSERT_NO_MSG(socket_ops);
    da8a:	6823      	ldr	r3, [r4, #0]
    da8c:	b94b      	cbnz	r3, daa2 <poll.constprop.5+0x1e>
    da8e:	4910      	ldr	r1, [pc, #64]	; (dad0 <poll.constprop.5+0x4c>)
    da90:	4810      	ldr	r0, [pc, #64]	; (dad4 <poll.constprop.5+0x50>)
    da92:	234d      	movs	r3, #77	; 0x4d
    da94:	4a10      	ldr	r2, [pc, #64]	; (dad8 <poll.constprop.5+0x54>)
    da96:	f012 f9a0 	bl	1fdda <printk>
    da9a:	214d      	movs	r1, #77	; 0x4d
    da9c:	480e      	ldr	r0, [pc, #56]	; (dad8 <poll.constprop.5+0x54>)
    da9e:	f012 f9e2 	bl	1fe66 <assert_post_action>
	__ASSERT_NO_MSG(socket_ops->poll);
    daa2:	6823      	ldr	r3, [r4, #0]
    daa4:	699b      	ldr	r3, [r3, #24]
    daa6:	b94b      	cbnz	r3, dabc <poll.constprop.5+0x38>
    daa8:	490c      	ldr	r1, [pc, #48]	; (dadc <poll.constprop.5+0x58>)
    daaa:	480a      	ldr	r0, [pc, #40]	; (dad4 <poll.constprop.5+0x50>)
    daac:	234e      	movs	r3, #78	; 0x4e
    daae:	4a0a      	ldr	r2, [pc, #40]	; (dad8 <poll.constprop.5+0x54>)
    dab0:	f012 f993 	bl	1fdda <printk>
    dab4:	214e      	movs	r1, #78	; 0x4e
    dab6:	4808      	ldr	r0, [pc, #32]	; (dad8 <poll.constprop.5+0x54>)
    dab8:	f012 f9d5 	bl	1fe66 <assert_post_action>

	return socket_ops->poll(fds, nfds, timeout);
    dabc:	6823      	ldr	r3, [r4, #0]
    dabe:	462a      	mov	r2, r5
}
    dac0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return socket_ops->poll(fds, nfds, timeout);
    dac4:	699b      	ldr	r3, [r3, #24]
    dac6:	2101      	movs	r1, #1
    dac8:	4805      	ldr	r0, [pc, #20]	; (dae0 <poll.constprop.5+0x5c>)
    daca:	4718      	bx	r3
    dacc:	200200a4 	.word	0x200200a4
    dad0:	00023446 	.word	0x00023446
    dad4:	00023451 	.word	0x00023451
    dad8:	00023416 	.word	0x00023416
    dadc:	0002346e 	.word	0x0002346e
    dae0:	2002006c 	.word	0x2002006c

0000dae4 <mqtt_evt_handler>:

/**@brief MQTT client event handler
 */
void mqtt_evt_handler(struct mqtt_client *const c,
		      const struct mqtt_evt *evt)
{
    dae4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	int err;

	switch (evt->type) {
    dae8:	780b      	ldrb	r3, [r1, #0]
{
    daea:	b089      	sub	sp, #36	; 0x24
    daec:	4606      	mov	r6, r0
    daee:	460c      	mov	r4, r1
	switch (evt->type) {
    daf0:	2b07      	cmp	r3, #7
    daf2:	f200 808e 	bhi.w	dc12 <mqtt_evt_handler+0x12e>
    daf6:	e8df f003 	tbb	[pc, r3]
    dafa:	2704      	.short	0x2704
    dafc:	8c8c7a2e 	.word	0x8c8c7a2e
    db00:	838c      	.short	0x838c
	case MQTT_EVT_CONNACK:
		if (evt->result != 0) {
    db02:	69c9      	ldr	r1, [r1, #28]
    db04:	b119      	cbz	r1, db0e <mqtt_evt_handler+0x2a>
			printk("MQTT connect failed %d\n", evt->result);
    db06:	4845      	ldr	r0, [pc, #276]	; (dc1c <mqtt_evt_handler+0x138>)
			printk("mqtt_read_publish_payload: Failed! %d\n", err);
			printk("Disconnecting MQTT client...\n");

			err = mqtt_disconnect(c);
			if (err) {
				printk("Could not disconnect: %d\n", err);
    db08:	f012 f967 	bl	1fdda <printk>
    db0c:	e019      	b.n	db42 <mqtt_evt_handler+0x5e>
		printk("[%s:%d] MQTT client connected!\n", __func__, __LINE__);
    db0e:	22c9      	movs	r2, #201	; 0xc9
    db10:	4943      	ldr	r1, [pc, #268]	; (dc20 <mqtt_evt_handler+0x13c>)
    db12:	4844      	ldr	r0, [pc, #272]	; (dc24 <mqtt_evt_handler+0x140>)
    db14:	f012 f961 	bl	1fdda <printk>
	struct mqtt_topic subscribe_topic = {
    db18:	4843      	ldr	r0, [pc, #268]	; (dc28 <mqtt_evt_handler+0x144>)
    db1a:	9005      	str	r0, [sp, #20]
			.size = strlen(subscribe_topic.topic.utf8)
    db1c:	f7ff f9ac 	bl	ce78 <strlen>
	struct mqtt_topic subscribe_topic = {
    db20:	2301      	movs	r3, #1
    db22:	f88d 301c 	strb.w	r3, [sp, #28]
	const struct mqtt_subscription_list subscription_list = {
    db26:	ab05      	add	r3, sp, #20
    db28:	9303      	str	r3, [sp, #12]
    db2a:	4b40      	ldr	r3, [pc, #256]	; (dc2c <mqtt_evt_handler+0x148>)
			.size = strlen(subscribe_topic.topic.utf8)
    db2c:	4602      	mov	r2, r0
	struct mqtt_topic subscribe_topic = {
    db2e:	9006      	str	r0, [sp, #24]
	printk("Subscribing to: %s len %u\n", subscribe_topic.topic.utf8,
    db30:	9905      	ldr	r1, [sp, #20]
    db32:	483f      	ldr	r0, [pc, #252]	; (dc30 <mqtt_evt_handler+0x14c>)
	const struct mqtt_subscription_list subscription_list = {
    db34:	9304      	str	r3, [sp, #16]
	printk("Subscribing to: %s len %u\n", subscribe_topic.topic.utf8,
    db36:	f012 f950 	bl	1fdda <printk>
	return mqtt_subscribe(&client, &subscription_list);
    db3a:	a903      	add	r1, sp, #12
    db3c:	483d      	ldr	r0, [pc, #244]	; (dc34 <mqtt_evt_handler+0x150>)
    db3e:	f012 fe5f 	bl	20800 <mqtt_subscribe>
	default:
		printk("[%s:%d] default: %d\n", __func__, __LINE__,
				evt->type);
		break;
	}
}
    db42:	b009      	add	sp, #36	; 0x24
    db44:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		printk("[%s:%d] MQTT client disconnected %d\n", __func__,
    db48:	22cf      	movs	r2, #207	; 0xcf
    db4a:	69cb      	ldr	r3, [r1, #28]
    db4c:	483a      	ldr	r0, [pc, #232]	; (dc38 <mqtt_evt_handler+0x154>)
    db4e:	4934      	ldr	r1, [pc, #208]	; (dc20 <mqtt_evt_handler+0x13c>)
		printk("[%s:%d] default: %d\n", __func__, __LINE__,
    db50:	f012 f943 	bl	1fdda <printk>
}
    db54:	e7f5      	b.n	db42 <mqtt_evt_handler+0x5e>
		printk("[%s:%d] MQTT PUBLISH result=%d len=%d\n", __func__,
    db56:	694b      	ldr	r3, [r1, #20]
    db58:	22d8      	movs	r2, #216	; 0xd8
    db5a:	9300      	str	r3, [sp, #0]
    db5c:	69cb      	ldr	r3, [r1, #28]
    db5e:	4837      	ldr	r0, [pc, #220]	; (dc3c <mqtt_evt_handler+0x158>)
    db60:	492f      	ldr	r1, [pc, #188]	; (dc20 <mqtt_evt_handler+0x13c>)
    db62:	f012 f93a 	bl	1fdda <printk>
		err = publish_get_payload(c, p->message.payload.len);
    db66:	6963      	ldr	r3, [r4, #20]
	u8_t *end = buf + length;
    db68:	4d35      	ldr	r5, [pc, #212]	; (dc40 <mqtt_evt_handler+0x15c>)
	if (length > sizeof(payload_buf)) {
    db6a:	2b80      	cmp	r3, #128	; 0x80
	u8_t *end = buf + length;
    db6c:	eb05 0703 	add.w	r7, r5, r3
	if (length > sizeof(payload_buf)) {
    db70:	d83a      	bhi.n	dbe8 <mqtt_evt_handler+0x104>
			printk("mqtt_read_publish_payload: EAGAIN\n");
    db72:	f8df 80f4 	ldr.w	r8, [pc, #244]	; dc68 <mqtt_evt_handler+0x184>
			if (err > 0 && (fds.revents & POLLIN) == POLLIN) {
    db76:	f8df 90f4 	ldr.w	r9, [pc, #244]	; dc6c <mqtt_evt_handler+0x188>
	while (buf < end) {
    db7a:	42af      	cmp	r7, r5
    db7c:	d809      	bhi.n	db92 <mqtt_evt_handler+0xae>
			data_print("Received: ", payload_buf,
    db7e:	6962      	ldr	r2, [r4, #20]
    db80:	492f      	ldr	r1, [pc, #188]	; (dc40 <mqtt_evt_handler+0x15c>)
    db82:	4830      	ldr	r0, [pc, #192]	; (dc44 <mqtt_evt_handler+0x160>)
    db84:	f7ff ff30 	bl	d9e8 <data_print>
			data_publish(&client, MQTT_QOS_1_AT_LEAST_ONCE,
    db88:	6961      	ldr	r1, [r4, #20]
    db8a:	482d      	ldr	r0, [pc, #180]	; (dc40 <mqtt_evt_handler+0x15c>)
    db8c:	f7ff ff46 	bl	da1c <data_publish.constprop.2>
    db90:	e7d7      	b.n	db42 <mqtt_evt_handler+0x5e>
		int ret = mqtt_read_publish_payload(c, buf, end - buf);
    db92:	4629      	mov	r1, r5
    db94:	1b7a      	subs	r2, r7, r5
    db96:	4630      	mov	r0, r6
    db98:	f012 fee3 	bl	20962 <mqtt_read_publish_payload>
		if (ret < 0) {
    db9c:	1e01      	subs	r1, r0, #0
    db9e:	da20      	bge.n	dbe2 <mqtt_evt_handler+0xfe>
			if (ret != -EAGAIN) {
    dba0:	f111 0f0b 	cmn.w	r1, #11
    dba4:	d10a      	bne.n	dbbc <mqtt_evt_handler+0xd8>
			printk("mqtt_read_publish_payload: EAGAIN\n");
    dba6:	4640      	mov	r0, r8
    dba8:	f012 f917 	bl	1fdda <printk>
			err = poll(&fds, 1,
    dbac:	f64e 2060 	movw	r0, #60000	; 0xea60
    dbb0:	f7ff ff68 	bl	da84 <poll.constprop.5>
			if (err > 0 && (fds.revents & POLLIN) == POLLIN) {
    dbb4:	2800      	cmp	r0, #0
    dbb6:	dc0f      	bgt.n	dbd8 <mqtt_evt_handler+0xf4>
				return -EIO;
    dbb8:	f06f 0104 	mvn.w	r1, #4
			printk("mqtt_read_publish_payload: Failed! %d\n", err);
    dbbc:	4822      	ldr	r0, [pc, #136]	; (dc48 <mqtt_evt_handler+0x164>)
    dbbe:	f012 f90c 	bl	1fdda <printk>
			printk("Disconnecting MQTT client...\n");
    dbc2:	4822      	ldr	r0, [pc, #136]	; (dc4c <mqtt_evt_handler+0x168>)
    dbc4:	f012 f909 	bl	1fdda <printk>
			err = mqtt_disconnect(c);
    dbc8:	4630      	mov	r0, r6
    dbca:	f012 fdf0 	bl	207ae <mqtt_disconnect>
			if (err) {
    dbce:	4601      	mov	r1, r0
    dbd0:	2800      	cmp	r0, #0
    dbd2:	d0b6      	beq.n	db42 <mqtt_evt_handler+0x5e>
				printk("Could not disconnect: %d\n", err);
    dbd4:	481e      	ldr	r0, [pc, #120]	; (dc50 <mqtt_evt_handler+0x16c>)
    dbd6:	e797      	b.n	db08 <mqtt_evt_handler+0x24>
			if (err > 0 && (fds.revents & POLLIN) == POLLIN) {
    dbd8:	f8b9 3006 	ldrh.w	r3, [r9, #6]
    dbdc:	07db      	lsls	r3, r3, #31
    dbde:	d4cc      	bmi.n	db7a <mqtt_evt_handler+0x96>
    dbe0:	e7ea      	b.n	dbb8 <mqtt_evt_handler+0xd4>
		if (ret == 0) {
    dbe2:	d0e9      	beq.n	dbb8 <mqtt_evt_handler+0xd4>
		buf += ret;
    dbe4:	440d      	add	r5, r1
    dbe6:	e7c8      	b.n	db7a <mqtt_evt_handler+0x96>
		return -EMSGSIZE;
    dbe8:	f06f 0179 	mvn.w	r1, #121	; 0x79
    dbec:	e7e6      	b.n	dbbc <mqtt_evt_handler+0xd8>
		if (evt->result != 0) {
    dbee:	69c9      	ldr	r1, [r1, #28]
    dbf0:	b109      	cbz	r1, dbf6 <mqtt_evt_handler+0x112>
			printk("MQTT PUBACK error %d\n", evt->result);
    dbf2:	4818      	ldr	r0, [pc, #96]	; (dc54 <mqtt_evt_handler+0x170>)
    dbf4:	e788      	b.n	db08 <mqtt_evt_handler+0x24>
		printk("[%s:%d] PUBACK packet id: %u\n", __func__, __LINE__,
    dbf6:	88a3      	ldrh	r3, [r4, #4]
    dbf8:	22f1      	movs	r2, #241	; 0xf1
    dbfa:	4909      	ldr	r1, [pc, #36]	; (dc20 <mqtt_evt_handler+0x13c>)
    dbfc:	4816      	ldr	r0, [pc, #88]	; (dc58 <mqtt_evt_handler+0x174>)
    dbfe:	e7a7      	b.n	db50 <mqtt_evt_handler+0x6c>
		if (evt->result != 0) {
    dc00:	69c9      	ldr	r1, [r1, #28]
    dc02:	b109      	cbz	r1, dc08 <mqtt_evt_handler+0x124>
			printk("MQTT SUBACK error %d\n", evt->result);
    dc04:	4815      	ldr	r0, [pc, #84]	; (dc5c <mqtt_evt_handler+0x178>)
    dc06:	e77f      	b.n	db08 <mqtt_evt_handler+0x24>
		printk("[%s:%d] SUBACK packet id: %u\n", __func__, __LINE__,
    dc08:	88a3      	ldrh	r3, [r4, #4]
    dc0a:	22fb      	movs	r2, #251	; 0xfb
    dc0c:	4904      	ldr	r1, [pc, #16]	; (dc20 <mqtt_evt_handler+0x13c>)
    dc0e:	4814      	ldr	r0, [pc, #80]	; (dc60 <mqtt_evt_handler+0x17c>)
    dc10:	e79e      	b.n	db50 <mqtt_evt_handler+0x6c>
		printk("[%s:%d] default: %d\n", __func__, __LINE__,
    dc12:	f44f 7280 	mov.w	r2, #256	; 0x100
    dc16:	4902      	ldr	r1, [pc, #8]	; (dc20 <mqtt_evt_handler+0x13c>)
    dc18:	4812      	ldr	r0, [pc, #72]	; (dc64 <mqtt_evt_handler+0x180>)
    dc1a:	e799      	b.n	db50 <mqtt_evt_handler+0x6c>
    dc1c:	00023251 	.word	0x00023251
    dc20:	00023008 	.word	0x00023008
    dc24:	00023269 	.word	0x00023269
    dc28:	00023289 	.word	0x00023289
    dc2c:	04d20001 	.word	0x04d20001
    dc30:	000232a5 	.word	0x000232a5
    dc34:	20020008 	.word	0x20020008
    dc38:	000232c0 	.word	0x000232c0
    dc3c:	000232e5 	.word	0x000232e5
    dc40:	200214de 	.word	0x200214de
    dc44:	0002340b 	.word	0x0002340b
    dc48:	0002332f 	.word	0x0002332f
    dc4c:	00023356 	.word	0x00023356
    dc50:	00023374 	.word	0x00023374
    dc54:	0002338e 	.word	0x0002338e
    dc58:	000233a4 	.word	0x000233a4
    dc5c:	000233c2 	.word	0x000233c2
    dc60:	000233d8 	.word	0x000233d8
    dc64:	000233f6 	.word	0x000233f6
    dc68:	0002330c 	.word	0x0002330c
    dc6c:	2002006c 	.word	0x2002006c

0000dc70 <bsd_recoverable_error_handler>:
	printk("bsdlib recoverable error: %u\n", (unsigned int)err);
    dc70:	4601      	mov	r1, r0
    dc72:	4801      	ldr	r0, [pc, #4]	; (dc78 <bsd_recoverable_error_handler+0x8>)
    dc74:	f012 b8b1 	b.w	1fdda <printk>
    dc78:	00023019 	.word	0x00023019

0000dc7c <main>:
	}
#endif /* defined(CONFIG_LTE_LINK_CONTROL) */
}

void main(void)
{
    dc7c:	b570      	push	{r4, r5, r6, lr}
	int err;

	printk("The MQTT simple sample started\n");
    dc7e:	4885      	ldr	r0, [pc, #532]	; (de94 <main+0x218>)
{
    dc80:	b08e      	sub	sp, #56	; 0x38
	printk("The MQTT simple sample started\n");
    dc82:	f012 f8aa 	bl	1fdda <printk>
		printk("LTE Link Connecting ...\n");
    dc86:	4884      	ldr	r0, [pc, #528]	; (de98 <main+0x21c>)
    dc88:	f012 f8a7 	bl	1fdda <printk>
		err = lte_lc_init_and_connect();
    dc8c:	f013 fd04 	bl	21698 <lte_lc_init_and_connect>
		__ASSERT(err == 0, "LTE link could not be established.");
    dc90:	b170      	cbz	r0, dcb0 <main+0x34>
    dc92:	4982      	ldr	r1, [pc, #520]	; (de9c <main+0x220>)
    dc94:	f240 139d 	movw	r3, #413	; 0x19d
    dc98:	4a81      	ldr	r2, [pc, #516]	; (dea0 <main+0x224>)
    dc9a:	4882      	ldr	r0, [pc, #520]	; (dea4 <main+0x228>)
    dc9c:	f012 f89d 	bl	1fdda <printk>
    dca0:	4881      	ldr	r0, [pc, #516]	; (dea8 <main+0x22c>)
    dca2:	f012 f89a 	bl	1fdda <printk>
    dca6:	f240 119d 	movw	r1, #413	; 0x19d
    dcaa:	487d      	ldr	r0, [pc, #500]	; (dea0 <main+0x224>)
    dcac:	f012 f8db 	bl	1fe66 <assert_post_action>
		printk("LTE Link Connected!\n");
    dcb0:	487e      	ldr	r0, [pc, #504]	; (deac <main+0x230>)
    dcb2:	f012 f892 	bl	1fdda <printk>
	mqtt_client_init(client);
    dcb6:	487e      	ldr	r0, [pc, #504]	; (deb0 <main+0x234>)
    dcb8:	f012 fcee 	bl	20698 <mqtt_client_init>
	struct addrinfo hints = {
    dcbc:	2220      	movs	r2, #32
    dcbe:	2100      	movs	r1, #0
    dcc0:	a806      	add	r0, sp, #24
    dcc2:	f013 fe47 	bl	21954 <memset>
    dcc6:	2301      	movs	r3, #1

static inline int getaddrinfo(const char *node, const char *service,
			      const struct addrinfo *hints,
			      struct addrinfo **res)
{
	__ASSERT_NO_MSG(socket_ops);
    dcc8:	4c7a      	ldr	r4, [pc, #488]	; (deb4 <main+0x238>)
    dcca:	e9cd 3307 	strd	r3, r3, [sp, #28]
    dcce:	6823      	ldr	r3, [r4, #0]
    dcd0:	b94b      	cbnz	r3, dce6 <main+0x6a>
    dcd2:	4979      	ldr	r1, [pc, #484]	; (deb8 <main+0x23c>)
    dcd4:	4873      	ldr	r0, [pc, #460]	; (dea4 <main+0x228>)
    dcd6:	2393      	movs	r3, #147	; 0x93
    dcd8:	4a78      	ldr	r2, [pc, #480]	; (debc <main+0x240>)
    dcda:	f012 f87e 	bl	1fdda <printk>
    dcde:	2193      	movs	r1, #147	; 0x93
    dce0:	4876      	ldr	r0, [pc, #472]	; (debc <main+0x240>)
    dce2:	f012 f8c0 	bl	1fe66 <assert_post_action>
	__ASSERT_NO_MSG(socket_ops->getaddrinfo);
    dce6:	6823      	ldr	r3, [r4, #0]
    dce8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    dcea:	b94b      	cbnz	r3, dd00 <main+0x84>
    dcec:	4974      	ldr	r1, [pc, #464]	; (dec0 <main+0x244>)
    dcee:	486d      	ldr	r0, [pc, #436]	; (dea4 <main+0x228>)
    dcf0:	2394      	movs	r3, #148	; 0x94
    dcf2:	4a72      	ldr	r2, [pc, #456]	; (debc <main+0x240>)
    dcf4:	f012 f871 	bl	1fdda <printk>
    dcf8:	2194      	movs	r1, #148	; 0x94
    dcfa:	4870      	ldr	r0, [pc, #448]	; (debc <main+0x240>)
    dcfc:	f012 f8b3 	bl	1fe66 <assert_post_action>

	return socket_ops->getaddrinfo(node, service, hints, res);
    dd00:	6823      	ldr	r3, [r4, #0]
    dd02:	2100      	movs	r1, #0
    dd04:	6b5d      	ldr	r5, [r3, #52]	; 0x34
    dd06:	aa06      	add	r2, sp, #24
    dd08:	ab01      	add	r3, sp, #4
    dd0a:	486e      	ldr	r0, [pc, #440]	; (dec4 <main+0x248>)
    dd0c:	47a8      	blx	r5
	if (err) {
    dd0e:	4d6e      	ldr	r5, [pc, #440]	; (dec8 <main+0x24c>)
    dd10:	4601      	mov	r1, r0
    dd12:	2800      	cmp	r0, #0
    dd14:	d032      	beq.n	dd7c <main+0x100>
		printk("ERROR: getaddrinfo failed %d\n", err);
    dd16:	486d      	ldr	r0, [pc, #436]	; (decc <main+0x250>)
    dd18:	f012 f85f 	bl	1fdda <printk>
	client->broker = &broker;
    dd1c:	4c64      	ldr	r4, [pc, #400]	; (deb0 <main+0x234>)
	client->evt_cb = mqtt_evt_handler;
    dd1e:	4b6c      	ldr	r3, [pc, #432]	; (ded0 <main+0x254>)
	client->client_id.utf8 = (u8_t *)CONFIG_MQTT_CLIENT_ID;
    dd20:	486c      	ldr	r0, [pc, #432]	; (ded4 <main+0x258>)
	client->evt_cb = mqtt_evt_handler;
    dd22:	64a3      	str	r3, [r4, #72]	; 0x48
	client->broker = &broker;
    dd24:	6365      	str	r5, [r4, #52]	; 0x34
	client->client_id.utf8 = (u8_t *)CONFIG_MQTT_CLIENT_ID;
    dd26:	62e0      	str	r0, [r4, #44]	; 0x2c
	client->client_id.size = strlen(CONFIG_MQTT_CLIENT_ID);
    dd28:	f7ff f8a6 	bl	ce78 <strlen>
	password.utf8 = (u8_t *)CONFIG_MQTT_PASSWORD;
    dd2c:	4d6a      	ldr	r5, [pc, #424]	; (ded8 <main+0x25c>)
    dd2e:	4e6b      	ldr	r6, [pc, #428]	; (dedc <main+0x260>)
	client->client_id.size = strlen(CONFIG_MQTT_CLIENT_ID);
    dd30:	6320      	str	r0, [r4, #48]	; 0x30
	password.size = strlen(CONFIG_MQTT_PASSWORD);
    dd32:	4628      	mov	r0, r5
	password.utf8 = (u8_t *)CONFIG_MQTT_PASSWORD;
    dd34:	6035      	str	r5, [r6, #0]
	password.size = strlen(CONFIG_MQTT_PASSWORD);
    dd36:	f7ff f89f 	bl	ce78 <strlen>
	client->password = &password;
    dd3a:	63e6      	str	r6, [r4, #60]	; 0x3c
	password.size = strlen(CONFIG_MQTT_PASSWORD);
    dd3c:	6070      	str	r0, [r6, #4]
	username.utf8 = (u8_t *)CONFIG_MQTT_USER_NAME;
    dd3e:	4e68      	ldr	r6, [pc, #416]	; (dee0 <main+0x264>)
	username.size = strlen(CONFIG_MQTT_USER_NAME);
    dd40:	4628      	mov	r0, r5
	username.utf8 = (u8_t *)CONFIG_MQTT_USER_NAME;
    dd42:	6035      	str	r5, [r6, #0]
	username.size = strlen(CONFIG_MQTT_USER_NAME);
    dd44:	f7ff f898 	bl	ce78 <strlen>
	client->protocol_version = MQTT_VERSION_3_1_1;
    dd48:	2304      	movs	r3, #4
    dd4a:	f884 305e 	strb.w	r3, [r4, #94]	; 0x5e
	client->rx_buf = rx_buffer;
    dd4e:	4b65      	ldr	r3, [pc, #404]	; (dee4 <main+0x268>)
	client->tx_buf = tx_buffer;
    dd50:	4a65      	ldr	r2, [pc, #404]	; (dee8 <main+0x26c>)
	client->rx_buf = rx_buffer;
    dd52:	64e3      	str	r3, [r4, #76]	; 0x4c
	client->rx_buf_size = sizeof(rx_buffer);
    dd54:	2380      	movs	r3, #128	; 0x80
    dd56:	6523      	str	r3, [r4, #80]	; 0x50
	client->tx_buf_size = sizeof(tx_buffer);
    dd58:	e9c4 2315 	strd	r2, r3, [r4, #84]	; 0x54
    client->transport.type = MQTT_TRANSPORT_NON_SECURE;
    dd5c:	2300      	movs	r3, #0
	username.size = strlen(CONFIG_MQTT_USER_NAME);
    dd5e:	6070      	str	r0, [r6, #4]

	modem_configure();

	client_init(&client);

	err = mqtt_connect(&client);
    dd60:	4620      	mov	r0, r4
	client->user_name = &username;
    dd62:	63a6      	str	r6, [r4, #56]	; 0x38
    client->transport.type = MQTT_TRANSPORT_NON_SECURE;
    dd64:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
	err = mqtt_connect(&client);
    dd68:	f012 fcaf 	bl	206ca <mqtt_connect>
	if (err != 0) {
    dd6c:	4601      	mov	r1, r0
    dd6e:	2800      	cmp	r0, #0
    dd70:	d03f      	beq.n	ddf2 <main+0x176>
		printk("ERROR: mqtt_connect %d\n", err);
    dd72:	485e      	ldr	r0, [pc, #376]	; (deec <main+0x270>)

	printk("Disconnecting MQTT client...\n");

	err = mqtt_disconnect(&client);
	if (err) {
		printk("Could not disconnect MQTT client. Error: %d\n", err);
    dd74:	f012 f831 	bl	1fdda <printk>
	}
}
    dd78:	b00e      	add	sp, #56	; 0x38
    dd7a:	bd70      	pop	{r4, r5, r6, pc}
	addr = result;
    dd7c:	9b01      	ldr	r3, [sp, #4]
	while (addr != NULL) {
    dd7e:	b19b      	cbz	r3, dda8 <main+0x12c>
		if (addr->ai_addrlen == sizeof(struct sockaddr_in)) {
    dd80:	6919      	ldr	r1, [r3, #16]
    dd82:	2908      	cmp	r1, #8
    dd84:	d12f      	bne.n	dde6 <main+0x16a>
				->sin_addr.s_addr;
    dd86:	695b      	ldr	r3, [r3, #20]
			broker4->sin_family = AF_INET;
    dd88:	2001      	movs	r0, #1
				->sin_addr.s_addr;
    dd8a:	685b      	ldr	r3, [r3, #4]
			broker4->sin_family = AF_INET;
    dd8c:	8028      	strh	r0, [r5, #0]
			broker4->sin_addr.s_addr =
    dd8e:	606b      	str	r3, [r5, #4]
			broker4->sin_port = htons(CONFIG_MQTT_BROKER_PORT);
    dd90:	f645 3307 	movw	r3, #23303	; 0x5b07
    dd94:	806b      	strh	r3, [r5, #2]
	if (z_syscall_trap()) {
		return (char *) arch_syscall_invoke4(*(uintptr_t *)&family, *(uintptr_t *)&src, *(uintptr_t *)&dst, *(uintptr_t *)&size, K_SYSCALL_NET_ADDR_NTOP);
	}
#endif
	compiler_barrier();
	return z_impl_net_addr_ntop(family, src, dst, size);
    dd96:	2310      	movs	r3, #16
    dd98:	1d29      	adds	r1, r5, #4
    dd9a:	aa02      	add	r2, sp, #8
    dd9c:	f002 f964 	bl	10068 <z_impl_net_addr_ntop>
			printk("IPv4 Address found %s\n", ipv4_addr);
    dda0:	a902      	add	r1, sp, #8
    dda2:	4853      	ldr	r0, [pc, #332]	; (def0 <main+0x274>)
    dda4:	f012 f819 	bl	1fdda <printk>
}

static inline void freeaddrinfo(struct addrinfo *res)
{
	__ASSERT_NO_MSG(socket_ops);
    dda8:	6823      	ldr	r3, [r4, #0]
	freeaddrinfo(result);
    ddaa:	9e01      	ldr	r6, [sp, #4]
    ddac:	b94b      	cbnz	r3, ddc2 <main+0x146>
    ddae:	4942      	ldr	r1, [pc, #264]	; (deb8 <main+0x23c>)
    ddb0:	483c      	ldr	r0, [pc, #240]	; (dea4 <main+0x228>)
    ddb2:	239b      	movs	r3, #155	; 0x9b
    ddb4:	4a41      	ldr	r2, [pc, #260]	; (debc <main+0x240>)
    ddb6:	f012 f810 	bl	1fdda <printk>
    ddba:	219b      	movs	r1, #155	; 0x9b
    ddbc:	483f      	ldr	r0, [pc, #252]	; (debc <main+0x240>)
    ddbe:	f012 f852 	bl	1fe66 <assert_post_action>
	__ASSERT_NO_MSG(socket_ops->freeaddrinfo);
    ddc2:	6823      	ldr	r3, [r4, #0]
    ddc4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    ddc6:	b94b      	cbnz	r3, dddc <main+0x160>
    ddc8:	494a      	ldr	r1, [pc, #296]	; (def4 <main+0x278>)
    ddca:	4836      	ldr	r0, [pc, #216]	; (dea4 <main+0x228>)
    ddcc:	239c      	movs	r3, #156	; 0x9c
    ddce:	4a3b      	ldr	r2, [pc, #236]	; (debc <main+0x240>)
    ddd0:	f012 f803 	bl	1fdda <printk>
    ddd4:	219c      	movs	r1, #156	; 0x9c
    ddd6:	4839      	ldr	r0, [pc, #228]	; (debc <main+0x240>)
    ddd8:	f012 f845 	bl	1fe66 <assert_post_action>

	return socket_ops->freeaddrinfo(res);
    dddc:	6823      	ldr	r3, [r4, #0]
    ddde:	4630      	mov	r0, r6
    dde0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    dde2:	4798      	blx	r3
    dde4:	e79a      	b.n	dd1c <main+0xa0>
			printk("ai_addrlen = %u should be %u or %u\n",
    dde6:	2318      	movs	r3, #24
    dde8:	2208      	movs	r2, #8
    ddea:	4843      	ldr	r0, [pc, #268]	; (def8 <main+0x27c>)
    ddec:	f011 fff5 	bl	1fdda <printk>
		break;
    ddf0:	e7da      	b.n	dda8 <main+0x12c>
	if (c->transport.type == MQTT_TRANSPORT_NON_SECURE) {
    ddf2:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
    ddf6:	b11b      	cbz	r3, de00 <main+0x184>
		printk("ERROR: fds_init %d\n", err);
    ddf8:	f06f 0185 	mvn.w	r1, #133	; 0x85
    ddfc:	483f      	ldr	r0, [pc, #252]	; (defc <main+0x280>)
    ddfe:	e7b9      	b.n	dd74 <main+0xf8>
		fds.fd = c->transport.tcp.sock;
    de00:	4d3f      	ldr	r5, [pc, #252]	; (df00 <main+0x284>)
    de02:	6aa2      	ldr	r2, [r4, #40]	; 0x28
		data_publish(&client, MQTT_QOS_1_AT_LEAST_ONCE, "222", strlen("222"));
    de04:	4e3f      	ldr	r6, [pc, #252]	; (df04 <main+0x288>)
		fds.fd = c->transport.tcp.sock;
    de06:	602a      	str	r2, [r5, #0]
	fds.events = POLLIN;
    de08:	2201      	movs	r2, #1
    de0a:	80aa      	strh	r2, [r5, #4]
		err = poll(&fds, 1, mqtt_keepalive_time_left(&client));
    de0c:	4620      	mov	r0, r4
    de0e:	f012 fd70 	bl	208f2 <mqtt_keepalive_time_left>
    de12:	f7ff fe37 	bl	da84 <poll.constprop.5>
		if (err < 0) {
    de16:	2800      	cmp	r0, #0
    de18:	da10      	bge.n	de3c <main+0x1c0>
			printk("ERROR: poll %d\n", errno);
    de1a:	f012 f900 	bl	2001e <__errno>
    de1e:	6801      	ldr	r1, [r0, #0]
    de20:	4839      	ldr	r0, [pc, #228]	; (df08 <main+0x28c>)
			printk("ERROR: mqtt_live %d\n", err);
    de22:	f011 ffda 	bl	1fdda <printk>
	printk("Disconnecting MQTT client...\n");
    de26:	4839      	ldr	r0, [pc, #228]	; (df0c <main+0x290>)
    de28:	f011 ffd7 	bl	1fdda <printk>
	err = mqtt_disconnect(&client);
    de2c:	4820      	ldr	r0, [pc, #128]	; (deb0 <main+0x234>)
    de2e:	f012 fcbe 	bl	207ae <mqtt_disconnect>
	if (err) {
    de32:	4601      	mov	r1, r0
    de34:	2800      	cmp	r0, #0
    de36:	d09f      	beq.n	dd78 <main+0xfc>
		printk("Could not disconnect MQTT client. Error: %d\n", err);
    de38:	4835      	ldr	r0, [pc, #212]	; (df10 <main+0x294>)
    de3a:	e79b      	b.n	dd74 <main+0xf8>
		err = mqtt_live(&client);
    de3c:	4620      	mov	r0, r4
    de3e:	f012 fd31 	bl	208a4 <mqtt_live>
		if ((err != 0) && (err != -EAGAIN)) {
    de42:	4601      	mov	r1, r0
    de44:	b120      	cbz	r0, de50 <main+0x1d4>
    de46:	f110 0f0b 	cmn.w	r0, #11
    de4a:	d001      	beq.n	de50 <main+0x1d4>
			printk("ERROR: mqtt_live %d\n", err);
    de4c:	4831      	ldr	r0, [pc, #196]	; (df14 <main+0x298>)
    de4e:	e7e8      	b.n	de22 <main+0x1a6>
		if ((fds.revents & POLLIN) == POLLIN) {
    de50:	88eb      	ldrh	r3, [r5, #6]
    de52:	07d9      	lsls	r1, r3, #31
    de54:	d506      	bpl.n	de64 <main+0x1e8>
			err = mqtt_input(&client);
    de56:	4620      	mov	r0, r4
    de58:	f012 fd62 	bl	20920 <mqtt_input>
			if (err != 0) {
    de5c:	4601      	mov	r1, r0
    de5e:	b108      	cbz	r0, de64 <main+0x1e8>
				printk("ERROR: mqtt_input %d\n", err);
    de60:	482d      	ldr	r0, [pc, #180]	; (df18 <main+0x29c>)
    de62:	e7de      	b.n	de22 <main+0x1a6>
		if ((fds.revents & POLLERR) == POLLERR) {
    de64:	88eb      	ldrh	r3, [r5, #6]
    de66:	071a      	lsls	r2, r3, #28
    de68:	d503      	bpl.n	de72 <main+0x1f6>
			printk("POLLERR\n");
    de6a:	482c      	ldr	r0, [pc, #176]	; (df1c <main+0x2a0>)
			printk("POLLNVAL\n");
    de6c:	f011 ffb5 	bl	1fdda <printk>
			break;
    de70:	e7d9      	b.n	de26 <main+0x1aa>
		if ((fds.revents & POLLNVAL) == POLLNVAL) {
    de72:	069b      	lsls	r3, r3, #26
    de74:	d501      	bpl.n	de7a <main+0x1fe>
			printk("POLLNVAL\n");
    de76:	482a      	ldr	r0, [pc, #168]	; (df20 <main+0x2a4>)
    de78:	e7f8      	b.n	de6c <main+0x1f0>
		data_publish(&client, MQTT_QOS_1_AT_LEAST_ONCE, "222", strlen("222"));
    de7a:	4630      	mov	r0, r6
    de7c:	f7fe fffc 	bl	ce78 <strlen>
    de80:	4601      	mov	r1, r0
    de82:	4630      	mov	r0, r6
    de84:	f7ff fdca 	bl	da1c <data_publish.constprop.2>
	if (z_syscall_trap()) {
		return (s32_t) arch_syscall_invoke1(*(uintptr_t *)&ms, K_SYSCALL_K_SLEEP);
	}
#endif
	compiler_barrier();
	return z_impl_k_sleep(ms);
    de88:	f241 3088 	movw	r0, #5000	; 0x1388
    de8c:	f00f f8b0 	bl	1cff0 <z_impl_k_sleep>
    de90:	e7bc      	b.n	de0c <main+0x190>
    de92:	bf00      	nop
    de94:	0002306f 	.word	0x0002306f
    de98:	0002308f 	.word	0x0002308f
    de9c:	000230b6 	.word	0x000230b6
    dea0:	000230a8 	.word	0x000230a8
    dea4:	00023451 	.word	0x00023451
    dea8:	000230bf 	.word	0x000230bf
    deac:	000230e4 	.word	0x000230e4
    deb0:	20020008 	.word	0x20020008
    deb4:	200200a4 	.word	0x200200a4
    deb8:	00023446 	.word	0x00023446
    debc:	00023416 	.word	0x00023416
    dec0:	000230f9 	.word	0x000230f9
    dec4:	00023111 	.word	0x00023111
    dec8:	200214bc 	.word	0x200214bc
    decc:	0002311e 	.word	0x0002311e
    ded0:	0000dae5 	.word	0x0000dae5
    ded4:	00023190 	.word	0x00023190
    ded8:	0002319d 	.word	0x0002319d
    dedc:	20020074 	.word	0x20020074
    dee0:	2002007c 	.word	0x2002007c
    dee4:	2002155e 	.word	0x2002155e
    dee8:	200215de 	.word	0x200215de
    deec:	000231a6 	.word	0x000231a6
    def0:	0002313c 	.word	0x0002313c
    def4:	00023177 	.word	0x00023177
    def8:	00023153 	.word	0x00023153
    defc:	000231be 	.word	0x000231be
    df00:	2002006c 	.word	0x2002006c
    df04:	00023220 	.word	0x00023220
    df08:	000231d2 	.word	0x000231d2
    df0c:	00023356 	.word	0x00023356
    df10:	00023224 	.word	0x00023224
    df14:	000231e2 	.word	0x000231e2
    df18:	000231f7 	.word	0x000231f7
    df1c:	0002320d 	.word	0x0002320d
    df20:	00023216 	.word	0x00023216

0000df24 <z_sys_mem_pool_block_free>:
	return 0;
}

void z_sys_mem_pool_block_free(struct sys_mem_pool_base *p, u32_t level,
			      u32_t block)
{
    df24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    df28:	b085      	sub	sp, #20
	size_t lsizes[LVL_ARRAY_SZ(p->n_levels)];
    df2a:	7a83      	ldrb	r3, [r0, #10]
{
    df2c:	af00      	add	r7, sp, #0
	size_t lsizes[LVL_ARRAY_SZ(p->n_levels)];
    df2e:	009b      	lsls	r3, r3, #2
    df30:	3307      	adds	r3, #7
    df32:	f403 63ff 	and.w	r3, r3, #2040	; 0x7f8
    df36:	ebad 0d03 	sub.w	sp, sp, r3
    df3a:	46eb      	mov	fp, sp
	 * to avoid having to store it in precious RAM bytes.
	 * Overhead here is somewhat higher because block_free()
	 * doesn't inherently need to traverse all the larger
	 * sublevels.
	 */
	lsizes[0] = p->max_sz;
    df3c:	6843      	ldr	r3, [r0, #4]
{
    df3e:	4606      	mov	r6, r0
	lsizes[0] = p->max_sz;
    df40:	465c      	mov	r4, fp
	for (i = 1; i <= level; i++) {
    df42:	2001      	movs	r0, #1
	lsizes[0] = p->max_sz;
    df44:	f8cb 3000 	str.w	r3, [fp]
	for (i = 1; i <= level; i++) {
    df48:	4281      	cmp	r1, r0
    df4a:	d222      	bcs.n	df92 <z_sys_mem_pool_block_free+0x6e>
	if (p->flags & SYS_MEM_POOL_KERNEL) {
    df4c:	7c30      	ldrb	r0, [r6, #16]
		lsizes[i] = WB_DN(lsizes[i-1] / 4);
	}

	block_free(p, level, lsizes, block);
    df4e:	4688      	mov	r8, r1
	if (p->flags & SYS_MEM_POOL_KERNEL) {
    df50:	f010 0001 	ands.w	r0, r0, #1
	block_free(p, level, lsizes, block);
    df54:	4615      	mov	r5, r2
	if (p->flags & SYS_MEM_POOL_KERNEL) {
    df56:	d001      	beq.n	df5c <z_sys_mem_pool_block_free+0x38>
    df58:	f011 fcb7 	bl	1f8ca <pool_irq_lock.isra.2.part.3>
	unsigned int key = pool_irq_lock(p);
    df5c:	4604      	mov	r4, r0
	while (level >= 0) {
    df5e:	f1b8 0f00 	cmp.w	r8, #0
    df62:	da1e      	bge.n	dfa2 <z_sys_mem_pool_block_free+0x7e>
	__ASSERT(0, "out of levels");
    df64:	23bc      	movs	r3, #188	; 0xbc
    df66:	4a50      	ldr	r2, [pc, #320]	; (e0a8 <z_sys_mem_pool_block_free+0x184>)
    df68:	4950      	ldr	r1, [pc, #320]	; (e0ac <z_sys_mem_pool_block_free+0x188>)
    df6a:	4851      	ldr	r0, [pc, #324]	; (e0b0 <z_sys_mem_pool_block_free+0x18c>)
    df6c:	f011 ff35 	bl	1fdda <printk>
    df70:	4850      	ldr	r0, [pc, #320]	; (e0b4 <z_sys_mem_pool_block_free+0x190>)
    df72:	f011 ff32 	bl	1fdda <printk>
    df76:	21bc      	movs	r1, #188	; 0xbc
    df78:	484b      	ldr	r0, [pc, #300]	; (e0a8 <z_sys_mem_pool_block_free+0x184>)
    df7a:	f011 ff74 	bl	1fe66 <assert_post_action>
	return -1;
    df7e:	f04f 34ff 	mov.w	r4, #4294967295
	pool_irq_unlock(p, key);
    df82:	4621      	mov	r1, r4
    df84:	7c30      	ldrb	r0, [r6, #16]
    df86:	f011 fca9 	bl	1f8dc <pool_irq_unlock.isra.4>
}
    df8a:	3714      	adds	r7, #20
    df8c:	46bd      	mov	sp, r7
    df8e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		lsizes[i] = WB_DN(lsizes[i-1] / 4);
    df92:	6823      	ldr	r3, [r4, #0]
	for (i = 1; i <= level; i++) {
    df94:	3001      	adds	r0, #1
		lsizes[i] = WB_DN(lsizes[i-1] / 4);
    df96:	089b      	lsrs	r3, r3, #2
    df98:	f023 0303 	bic.w	r3, r3, #3
    df9c:	f844 3f04 	str.w	r3, [r4, #4]!
    dfa0:	e7d2      	b.n	df48 <z_sys_mem_pool_block_free+0x24>
		int i, lsz = lsizes[level];
    dfa2:	f85b 3028 	ldr.w	r3, [fp, r8, lsl #2]
	int bit = get_bit_ptr(p, level, bn, &word);
    dfa6:	462a      	mov	r2, r5
	return (u8_t *)p->buf + lsz * block;
    dfa8:	fb03 fa05 	mul.w	sl, r3, r5
		int i, lsz = lsizes[level];
    dfac:	607b      	str	r3, [r7, #4]
	return (u8_t *)p->buf + lsz * block;
    dfae:	6833      	ldr	r3, [r6, #0]
	int bit = get_bit_ptr(p, level, bn, &word);
    dfb0:	4641      	mov	r1, r8
	return (u8_t *)p->buf + lsz * block;
    dfb2:	603b      	str	r3, [r7, #0]
    dfb4:	eb03 090a 	add.w	r9, r3, sl
	int bit = get_bit_ptr(p, level, bn, &word);
    dfb8:	4630      	mov	r0, r6
    dfba:	f107 030c 	add.w	r3, r7, #12
    dfbe:	f011 fc6d 	bl	1f89c <get_bit_ptr>
	return (*word >> bit) & 1;
    dfc2:	68fb      	ldr	r3, [r7, #12]
    dfc4:	681b      	ldr	r3, [r3, #0]
    dfc6:	fa23 f000 	lsr.w	r0, r3, r0
		__ASSERT(alloc_bit_is_set(p, level, bn),
    dfca:	07c3      	lsls	r3, r0, #31
    dfcc:	d40d      	bmi.n	dfea <z_sys_mem_pool_block_free+0xc6>
    dfce:	23a3      	movs	r3, #163	; 0xa3
    dfd0:	4a35      	ldr	r2, [pc, #212]	; (e0a8 <z_sys_mem_pool_block_free+0x184>)
    dfd2:	4939      	ldr	r1, [pc, #228]	; (e0b8 <z_sys_mem_pool_block_free+0x194>)
    dfd4:	4836      	ldr	r0, [pc, #216]	; (e0b0 <z_sys_mem_pool_block_free+0x18c>)
    dfd6:	f011 ff00 	bl	1fdda <printk>
    dfda:	4649      	mov	r1, r9
    dfdc:	4837      	ldr	r0, [pc, #220]	; (e0bc <z_sys_mem_pool_block_free+0x198>)
    dfde:	f011 fefc 	bl	1fdda <printk>
    dfe2:	21a3      	movs	r1, #163	; 0xa3
    dfe4:	4830      	ldr	r0, [pc, #192]	; (e0a8 <z_sys_mem_pool_block_free+0x184>)
    dfe6:	f011 ff3e 	bl	1fe66 <assert_post_action>
	int bit = get_bit_ptr(p, level, bn, &word);
    dfea:	f107 030c 	add.w	r3, r7, #12
    dfee:	462a      	mov	r2, r5
    dff0:	4641      	mov	r1, r8
    dff2:	4630      	mov	r0, r6
    dff4:	f011 fc52 	bl	1f89c <get_bit_ptr>
	*word &= ~(1<<bit);
    dff8:	2301      	movs	r3, #1
    dffa:	68fa      	ldr	r2, [r7, #12]
    dffc:	fa03 f000 	lsl.w	r0, r3, r0
    e000:	6813      	ldr	r3, [r2, #0]
 * @return N/A
 */

static inline void sys_dlist_append(sys_dlist_t *list, sys_dnode_t *node)
{
	node->next = list;
    e002:	6839      	ldr	r1, [r7, #0]
    e004:	ea23 0300 	bic.w	r3, r3, r0
    e008:	6013      	str	r3, [r2, #0]
		sys_dlist_append(&p->levels[level].free_list, block);
    e00a:	230c      	movs	r3, #12
    e00c:	68f2      	ldr	r2, [r6, #12]
    e00e:	fb03 2308 	mla	r3, r3, r8, r2
    e012:	1d1a      	adds	r2, r3, #4
    e014:	f841 200a 	str.w	r2, [r1, sl]
	node->prev = list->tail;
    e018:	689a      	ldr	r2, [r3, #8]
		pool_irq_unlock(p, key);
    e01a:	4621      	mov	r1, r4
    e01c:	f8c9 2004 	str.w	r2, [r9, #4]

	list->tail->next = node;
    e020:	689a      	ldr	r2, [r3, #8]
    e022:	f8c2 9000 	str.w	r9, [r2]
	list->tail = node;
    e026:	f8c3 9008 	str.w	r9, [r3, #8]
    e02a:	7c30      	ldrb	r0, [r6, #16]
    e02c:	f011 fc56 	bl	1f8dc <pool_irq_unlock.isra.4>
	if (p->flags & SYS_MEM_POOL_KERNEL) {
    e030:	7c30      	ldrb	r0, [r6, #16]
    e032:	f010 0001 	ands.w	r0, r0, #1
    e036:	d001      	beq.n	e03c <z_sys_mem_pool_block_free+0x118>
    e038:	f011 fc47 	bl	1f8ca <pool_irq_lock.isra.2.part.3>
		key = pool_irq_lock(p);
    e03c:	4604      	mov	r4, r0
		if (level == 0 || partner_alloc_bits(p, level, bn) != 0) {
    e03e:	f1b8 0f00 	cmp.w	r8, #0
    e042:	d09e      	beq.n	df82 <z_sys_mem_pool_block_free+0x5e>
	int bit = get_bit_ptr(p, level, bn, &word);
    e044:	f107 030c 	add.w	r3, r7, #12
    e048:	462a      	mov	r2, r5
    e04a:	4641      	mov	r1, r8
    e04c:	4630      	mov	r0, r6
    e04e:	f011 fc25 	bl	1f89c <get_bit_ptr>
	return (*word >> (4*(bit / 4))) & 0xf;
    e052:	68fb      	ldr	r3, [r7, #12]
    e054:	2800      	cmp	r0, #0
    e056:	bfb8      	it	lt
    e058:	3003      	addlt	r0, #3
    e05a:	681b      	ldr	r3, [r3, #0]
    e05c:	f020 0003 	bic.w	r0, r0, #3
    e060:	fa23 f000 	lsr.w	r0, r3, r0
		if (level == 0 || partner_alloc_bits(p, level, bn) != 0) {
    e064:	f010 000f 	ands.w	r0, r0, #15
    e068:	d18b      	bne.n	df82 <z_sys_mem_pool_block_free+0x5e>
	node->next = NULL;
    e06a:	4684      	mov	ip, r0
			int b = (bn & ~3) + i;
    e06c:	f025 0a03 	bic.w	sl, r5, #3
	return (u8_t *)p->buf + lsz * block;
    e070:	687a      	ldr	r2, [r7, #4]
			int b = (bn & ~3) + i;
    e072:	eb0a 0300 	add.w	r3, sl, r0
	return (u8_t *)p->buf + lsz * block;
    e076:	4353      	muls	r3, r2
    e078:	6832      	ldr	r2, [r6, #0]
		for (i = 0; i < 4; i++) {
    e07a:	3001      	adds	r0, #1
	return (u8_t *)p->buf + lsz * block;
    e07c:	18d1      	adds	r1, r2, r3
 * @return N/A
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	node->prev->next = node->next;
    e07e:	f8d1 9004 	ldr.w	r9, [r1, #4]
    e082:	f852 e003 	ldr.w	lr, [r2, r3]
		for (i = 0; i < 4; i++) {
    e086:	2804      	cmp	r0, #4
    e088:	f8c9 e000 	str.w	lr, [r9]
	node->next->prev = node->prev;
    e08c:	f8ce 9004 	str.w	r9, [lr, #4]
	node->next = NULL;
    e090:	f842 c003 	str.w	ip, [r2, r3]
	node->prev = NULL;
    e094:	f8c1 c004 	str.w	ip, [r1, #4]
    e098:	d1ea      	bne.n	e070 <z_sys_mem_pool_block_free+0x14c>
		bn = bn / 4;
    e09a:	2d00      	cmp	r5, #0
    e09c:	bfb8      	it	lt
    e09e:	3503      	addlt	r5, #3
		level = level - 1;
    e0a0:	f108 38ff 	add.w	r8, r8, #4294967295
		bn = bn / 4;
    e0a4:	10ad      	asrs	r5, r5, #2
    e0a6:	e75a      	b.n	df5e <z_sys_mem_pool_block_free+0x3a>
    e0a8:	0002347f 	.word	0x0002347f
    e0ac:	000251cf 	.word	0x000251cf
    e0b0:	00023451 	.word	0x00023451
    e0b4:	000234e7 	.word	0x000234e7
    e0b8:	000234a3 	.word	0x000234a3
    e0bc:	000234c2 	.word	0x000234c2

0000e0c0 <char_out>:

static int char_out(int c, void *ctx_p)
{
	struct out_context *ctx = ctx_p;

	ctx->count++;
    e0c0:	680b      	ldr	r3, [r1, #0]
    e0c2:	3301      	adds	r3, #1
    e0c4:	600b      	str	r3, [r1, #0]
	return _char_out(c);
    e0c6:	4b01      	ldr	r3, [pc, #4]	; (e0cc <char_out+0xc>)
    e0c8:	681b      	ldr	r3, [r3, #0]
    e0ca:	4718      	bx	r3
    e0cc:	20026068 	.word	0x20026068

0000e0d0 <_printk_dec_ulong>:
 * @return N/A
 */
static void _printk_dec_ulong(out_func_t out, void *ctx,
			      const unsigned long num, enum pad_type padding,
			      int min_width)
{
    e0d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    e0d4:	b085      	sub	sp, #20
    e0d6:	9c0e      	ldr	r4, [sp, #56]	; 0x38
    e0d8:	469b      	mov	fp, r3
    e0da:	2c01      	cmp	r4, #1
    e0dc:	bfb8      	it	lt
    e0de:	2401      	movlt	r4, #1
    e0e0:	2b01      	cmp	r3, #1
    e0e2:	bf0c      	ite	eq
    e0e4:	2330      	moveq	r3, #48	; 0x30
    e0e6:	2320      	movne	r3, #32
    e0e8:	4616      	mov	r6, r2
    e0ea:	4682      	mov	sl, r0
    e0ec:	4688      	mov	r8, r1
    e0ee:	2501      	movs	r5, #1
    e0f0:	270a      	movs	r7, #10
    e0f2:	2200      	movs	r2, #0
    e0f4:	f8df 906c 	ldr.w	r9, [pc, #108]	; e164 <_printk_dec_ulong+0x94>
    e0f8:	9302      	str	r3, [sp, #8]
	if (min_width <= 0) {
		min_width = 1;
	}

	while (pos >= 10) {
		if (found_largest_digit != 0 || remainder >= pos) {
    e0fa:	fbb6 f3f9 	udiv	r3, r6, r9
    e0fe:	9301      	str	r3, [sp, #4]
    e100:	b90a      	cbnz	r2, e106 <_printk_dec_ulong+0x36>
    e102:	45b1      	cmp	r9, r6
    e104:	d81c      	bhi.n	e140 <_printk_dec_ulong+0x70>
			found_largest_digit = 1;
			out((int)(remainder / pos + 48), ctx);
    e106:	9b01      	ldr	r3, [sp, #4]
    e108:	4641      	mov	r1, r8
    e10a:	f103 0030 	add.w	r0, r3, #48	; 0x30
    e10e:	47d0      	blx	sl
			found_largest_digit = 1;
    e110:	2201      	movs	r2, #1
			digits++;
    e112:	3501      	adds	r5, #1
				&& padding < PAD_SPACE_AFTER) {
			out((int)(padding == PAD_ZERO_BEFORE ? '0' : ' '), ctx);
			digits++;
		}
		remaining--;
		remainder %= pos;
    e114:	9b01      	ldr	r3, [sp, #4]
		remaining--;
    e116:	3f01      	subs	r7, #1
		remainder %= pos;
    e118:	fb09 6613 	mls	r6, r9, r3, r6
		pos /= 10;
    e11c:	230a      	movs	r3, #10
	while (pos >= 10) {
    e11e:	2f01      	cmp	r7, #1
		pos /= 10;
    e120:	fbb9 f9f3 	udiv	r9, r9, r3
	while (pos >= 10) {
    e124:	d1e9      	bne.n	e0fa <_printk_dec_ulong+0x2a>
	}
	out((int)(remainder + 48), ctx);
    e126:	4641      	mov	r1, r8
    e128:	f106 0030 	add.w	r0, r6, #48	; 0x30
    e12c:	47d0      	blx	sl

	if (padding == PAD_SPACE_AFTER) {
    e12e:	f1bb 0f03 	cmp.w	fp, #3
    e132:	d102      	bne.n	e13a <_printk_dec_ulong+0x6a>
		remaining = min_width - digits;
    e134:	1b64      	subs	r4, r4, r5
		while (remaining-- > 0) {
    e136:	2c00      	cmp	r4, #0
    e138:	dc0e      	bgt.n	e158 <_printk_dec_ulong+0x88>
			out(' ', ctx);
		}
	}
}
    e13a:	b005      	add	sp, #20
    e13c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		} else if (remaining <= min_width
    e140:	42bc      	cmp	r4, r7
    e142:	dbe7      	blt.n	e114 <_printk_dec_ulong+0x44>
				&& padding < PAD_SPACE_AFTER) {
    e144:	f1bb 0f02 	cmp.w	fp, #2
    e148:	d8e4      	bhi.n	e114 <_printk_dec_ulong+0x44>
			out((int)(padding == PAD_ZERO_BEFORE ? '0' : ' '), ctx);
    e14a:	4641      	mov	r1, r8
    e14c:	9802      	ldr	r0, [sp, #8]
    e14e:	9203      	str	r2, [sp, #12]
			digits++;
    e150:	3501      	adds	r5, #1
			out((int)(padding == PAD_ZERO_BEFORE ? '0' : ' '), ctx);
    e152:	47d0      	blx	sl
			digits++;
    e154:	9a03      	ldr	r2, [sp, #12]
    e156:	e7dd      	b.n	e114 <_printk_dec_ulong+0x44>
			out(' ', ctx);
    e158:	4641      	mov	r1, r8
    e15a:	2020      	movs	r0, #32
    e15c:	47d0      	blx	sl
    e15e:	3c01      	subs	r4, #1
    e160:	e7e9      	b.n	e136 <_printk_dec_ulong+0x66>
    e162:	bf00      	nop
    e164:	3b9aca00 	.word	0x3b9aca00

0000e168 <__printk_hook_install>:
	_char_out = fn;
    e168:	4b01      	ldr	r3, [pc, #4]	; (e170 <__printk_hook_install+0x8>)
    e16a:	6018      	str	r0, [r3, #0]
}
    e16c:	4770      	bx	lr
    e16e:	bf00      	nop
    e170:	20026068 	.word	0x20026068

0000e174 <vprintk>:
	struct out_context ctx = { 0 };
    e174:	2300      	movs	r3, #0
{
    e176:	b507      	push	{r0, r1, r2, lr}
	z_vprintk(char_out, &ctx, fmt, ap);
    e178:	4602      	mov	r2, r0
	struct out_context ctx = { 0 };
    e17a:	9301      	str	r3, [sp, #4]
	z_vprintk(char_out, &ctx, fmt, ap);
    e17c:	4803      	ldr	r0, [pc, #12]	; (e18c <vprintk+0x18>)
    e17e:	460b      	mov	r3, r1
    e180:	a901      	add	r1, sp, #4
    e182:	f011 fcba 	bl	1fafa <z_vprintk>
}
    e186:	b003      	add	sp, #12
    e188:	f85d fb04 	ldr.w	pc, [sp], #4
    e18c:	0000e0c1 	.word	0x0000e0c1

0000e190 <nordicsemi_nrf91_init>:
		:
		: "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	unsigned int tmp;

	__asm__ volatile(
    e190:	f04f 0220 	mov.w	r2, #32
    e194:	f3ef 8311 	mrs	r3, BASEPRI
    e198:	f382 8811 	msr	BASEPRI, r2
    e19c:	f3bf 8f6f 	isb	sy

	key = irq_lock();

#ifdef CONFIG_NRF_ENABLE_ICACHE
	/* Enable the instruction cache */
	NRF_NVMC->ICACHECNF = NVMC_ICACHECNF_CACHEEN_Msk;
    e1a0:	2101      	movs	r1, #1
    e1a2:	4a04      	ldr	r2, [pc, #16]	; (e1b4 <nordicsemi_nrf91_init+0x24>)
    e1a4:	f8c2 1540 	str.w	r1, [r2, #1344]	; 0x540
	__asm__ volatile(
		"cpsie i;"
		"isb"
		: : : "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile(
    e1a8:	f383 8811 	msr	BASEPRI, r3
    e1ac:	f3bf 8f6f 	isb	sy
	NMI_INIT();

	irq_unlock(key);

	return 0;
}
    e1b0:	2000      	movs	r0, #0
    e1b2:	4770      	bx	lr
    e1b4:	40039000 	.word	0x40039000

0000e1b8 <log_generic>:
	if (_is_user_context()) {
		log_generic_from_user(src_level, fmt, ap);
	} else  if (IS_ENABLED(CONFIG_LOG_IMMEDIATE) &&
	    (!IS_ENABLED(CONFIG_LOG_FRONTEND))) {
		struct log_backend const *backend;
		u32_t timestamp = timestamp_func();
    e1b8:	4b13      	ldr	r3, [pc, #76]	; (e208 <log_generic+0x50>)
{
    e1ba:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
		u32_t timestamp = timestamp_func();
    e1be:	681b      	ldr	r3, [r3, #0]
{
    e1c0:	4680      	mov	r8, r0
    e1c2:	4689      	mov	r9, r1
    e1c4:	4692      	mov	sl, r2
		u32_t timestamp = timestamp_func();
    e1c6:	4798      	blx	r3

		for (int i = 0; i < log_backend_count_get(); i++) {
    e1c8:	2600      	movs	r6, #0
		u32_t timestamp = timestamp_func();
    e1ca:	4607      	mov	r7, r0
 *
 * @return Number of backends.
 */
static inline int log_backend_count_get(void)
{
	return __log_backends_end - __log_backends_start;
    e1cc:	4c0f      	ldr	r4, [pc, #60]	; (e20c <log_generic+0x54>)
    e1ce:	4d10      	ldr	r5, [pc, #64]	; (e210 <log_generic+0x58>)
    e1d0:	1b2d      	subs	r5, r5, r4
    e1d2:	112d      	asrs	r5, r5, #4
		for (int i = 0; i < log_backend_count_get(); i++) {
    e1d4:	42ae      	cmp	r6, r5
    e1d6:	db02      	blt.n	e1de <log_generic+0x26>
			args[i] = va_arg(ap, log_arg_t);
		}

		log_n(fmt, args, nargs, src_level);
	}
}
    e1d8:	b003      	add	sp, #12
    e1da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			if (log_backend_is_active(backend)) {
    e1de:	4620      	mov	r0, r4
    e1e0:	f011 fe4b 	bl	1fe7a <log_backend_is_active>
    e1e4:	b160      	cbz	r0, e200 <log_generic+0x48>
	if (backend->api->put_sync_string) {
    e1e6:	6823      	ldr	r3, [r4, #0]
    e1e8:	f8d3 b004 	ldr.w	fp, [r3, #4]
    e1ec:	f1bb 0f00 	cmp.w	fp, #0
    e1f0:	d006      	beq.n	e200 <log_generic+0x48>
		backend->api->put_sync_string(backend, src_level,
    e1f2:	f8cd a000 	str.w	sl, [sp]
    e1f6:	464b      	mov	r3, r9
    e1f8:	463a      	mov	r2, r7
    e1fa:	4641      	mov	r1, r8
    e1fc:	4620      	mov	r0, r4
    e1fe:	47d8      	blx	fp
		for (int i = 0; i < log_backend_count_get(); i++) {
    e200:	3601      	adds	r6, #1
    e202:	3410      	adds	r4, #16
    e204:	e7e6      	b.n	e1d4 <log_generic+0x1c>
    e206:	bf00      	nop
    e208:	2002606c 	.word	0x2002606c
    e20c:	000229a4 	.word	0x000229a4
    e210:	000229b4 	.word	0x000229b4

0000e214 <log_core_init>:
	/* Set default timestamp. */
	if (sys_clock_hw_cycles_per_sec() > 1000000) {
		timestamp_func = k_uptime_get_32;
		freq = 1000;
	} else {
		timestamp_func = k_cycle_get_32_wrapper;
    e214:	4b03      	ldr	r3, [pc, #12]	; (e224 <log_core_init+0x10>)
    e216:	4a04      	ldr	r2, [pc, #16]	; (e228 <log_core_init+0x14>)
		freq = sys_clock_hw_cycles_per_sec();
	}

	log_output_timestamp_freq_set(freq);
    e218:	f44f 4000 	mov.w	r0, #32768	; 0x8000
		timestamp_func = k_cycle_get_32_wrapper;
    e21c:	601a      	str	r2, [r3, #0]
	log_output_timestamp_freq_set(freq);
    e21e:	f000 ba35 	b.w	e68c <log_output_timestamp_freq_set>
    e222:	bf00      	nop
    e224:	2002606c 	.word	0x2002606c
    e228:	0001fe81 	.word	0x0001fe81

0000e22c <log_source_name_get>:
 * @return Source ID.
 */
static inline u32_t log_const_source_id(
				const struct log_source_const_data *data)
{
	return ((u8_t *)data - (u8_t *)__log_const_start)/
    e22c:	4a04      	ldr	r2, [pc, #16]	; (e240 <log_source_name_get+0x14>)
    e22e:	4b05      	ldr	r3, [pc, #20]	; (e244 <log_source_name_get+0x18>)
    e230:	1a9b      	subs	r3, r3, r2
	return log_sources_count();
}

const char *log_source_name_get(u32_t domain_id, u32_t src_id)
{
	return src_id < log_sources_count() ? log_name_get(src_id) : NULL;
    e232:	ebb1 0fd3 	cmp.w	r1, r3, lsr #3
	return __log_const_start[source_id].name;
    e236:	bf34      	ite	cc
    e238:	f852 0031 	ldrcc.w	r0, [r2, r1, lsl #3]
    e23c:	2000      	movcs	r0, #0
}
    e23e:	4770      	bx	lr
    e240:	00022924 	.word	0x00022924
    e244:	000229a4 	.word	0x000229a4

0000e248 <log_backend_enable>:
}

void log_backend_enable(struct log_backend const *const backend,
			void *ctx,
			u32_t level)
{
    e248:	b570      	push	{r4, r5, r6, lr}
	/* As first slot in filtering mask is reserved, backend ID has offset.*/
	u32_t id = LOG_FILTER_FIRST_BACKEND_SLOT_IDX;

	id += backend - log_backend_get(0);
    e24a:	4c10      	ldr	r4, [pc, #64]	; (e28c <log_backend_enable+0x44>)
{
    e24c:	4605      	mov	r5, r0
	id += backend - log_backend_get(0);
    e24e:	1b04      	subs	r4, r0, r4
    e250:	1124      	asrs	r4, r4, #4
    e252:	3401      	adds	r4, #1
{
    e254:	460e      	mov	r6, r1

	log_backend_id_set(backend, id);
    e256:	b2e4      	uxtb	r4, r4
	__ASSERT_NO_MSG(backend != NULL);
    e258:	b948      	cbnz	r0, e26e <log_backend_enable+0x26>
    e25a:	490d      	ldr	r1, [pc, #52]	; (e290 <log_backend_enable+0x48>)
    e25c:	480d      	ldr	r0, [pc, #52]	; (e294 <log_backend_enable+0x4c>)
    e25e:	23c0      	movs	r3, #192	; 0xc0
    e260:	4a0d      	ldr	r2, [pc, #52]	; (e298 <log_backend_enable+0x50>)
    e262:	f011 fdba 	bl	1fdda <printk>
    e266:	21c0      	movs	r1, #192	; 0xc0
    e268:	480b      	ldr	r0, [pc, #44]	; (e298 <log_backend_enable+0x50>)
    e26a:	f011 fdfc 	bl	1fe66 <assert_post_action>
static inline void log_backend_activate(const struct log_backend *const backend,
					void *ctx)
{
	__ASSERT_NO_MSG(backend != NULL);
	backend->cb->ctx = ctx;
	backend->cb->active = true;
    e26e:	2201      	movs	r2, #1
	backend->cb->id = id;
    e270:	686b      	ldr	r3, [r5, #4]
    e272:	711c      	strb	r4, [r3, #4]
	log_backend_activate(backend, ctx);

	/* Wakeup logger thread after attaching first backend. It might be
	 * blocked with log messages pending.
	 */
	if (!backend_attached) {
    e274:	4c09      	ldr	r4, [pc, #36]	; (e29c <log_backend_enable+0x54>)
	backend->cb->active = true;
    e276:	715a      	strb	r2, [r3, #5]
    e278:	7822      	ldrb	r2, [r4, #0]
	backend->cb->ctx = ctx;
    e27a:	601e      	str	r6, [r3, #0]
    e27c:	b912      	cbnz	r2, e284 <log_backend_enable+0x3c>
		arch_syscall_invoke1(*(uintptr_t *)&sem, K_SYSCALL_K_SEM_GIVE);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_sem_give(sem);
    e27e:	4808      	ldr	r0, [pc, #32]	; (e2a0 <log_backend_enable+0x58>)
    e280:	f00e fef8 	bl	1d074 <z_impl_k_sem_give>
		k_sem_give(&log_process_thread_sem);
	}

	backend_attached = true;
    e284:	2301      	movs	r3, #1
    e286:	7023      	strb	r3, [r4, #0]
}
    e288:	bd70      	pop	{r4, r5, r6, pc}
    e28a:	bf00      	nop
    e28c:	000229a4 	.word	0x000229a4
    e290:	00023535 	.word	0x00023535
    e294:	00023451 	.word	0x00023451
    e298:	00023504 	.word	0x00023504
    e29c:	2002165e 	.word	0x2002165e
    e2a0:	2002639c 	.word	0x2002639c

0000e2a4 <log_init>:
{
    e2a4:	b570      	push	{r4, r5, r6, lr}
	return __log_backends_end - __log_backends_start;
    e2a6:	4b13      	ldr	r3, [pc, #76]	; (e2f4 <log_init+0x50>)
    e2a8:	4c13      	ldr	r4, [pc, #76]	; (e2f8 <log_init+0x54>)
    e2aa:	1b1b      	subs	r3, r3, r4
	assert(log_backend_count_get() < LOG_FILTERS_NUM_OF_SLOTS);
    e2ac:	2b90      	cmp	r3, #144	; 0x90
    e2ae:	dd06      	ble.n	e2be <log_init+0x1a>
    e2b0:	4b12      	ldr	r3, [pc, #72]	; (e2fc <log_init+0x58>)
    e2b2:	4a13      	ldr	r2, [pc, #76]	; (e300 <log_init+0x5c>)
    e2b4:	f240 11ed 	movw	r1, #493	; 0x1ed
    e2b8:	4812      	ldr	r0, [pc, #72]	; (e304 <log_init+0x60>)
    e2ba:	f00f ffbb 	bl	1e234 <__assert_func>
 * @return Previous value of @a target.
 */
#ifdef CONFIG_ATOMIC_OPERATIONS_BUILTIN
static inline atomic_val_t atomic_add(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
    e2be:	4a12      	ldr	r2, [pc, #72]	; (e308 <log_init+0x64>)
    e2c0:	e8d2 6fef 	ldaex	r6, [r2]
    e2c4:	1c71      	adds	r1, r6, #1
    e2c6:	e8c2 1fe0 	stlex	r0, r1, [r2]
    e2ca:	2800      	cmp	r0, #0
    e2cc:	d1f8      	bne.n	e2c0 <log_init+0x1c>
	if (atomic_inc(&initialized) != 0) {
    e2ce:	b916      	cbnz	r6, e2d6 <log_init+0x32>
    e2d0:	111d      	asrs	r5, r3, #4
	for (i = 0; i < log_backend_count_get(); i++) {
    e2d2:	42ae      	cmp	r6, r5
    e2d4:	db00      	blt.n	e2d8 <log_init+0x34>
}
    e2d6:	bd70      	pop	{r4, r5, r6, pc}
		if (backend->autostart) {
    e2d8:	7b23      	ldrb	r3, [r4, #12]
    e2da:	b143      	cbz	r3, e2ee <log_init+0x4a>
			if (backend->api->init != NULL) {
    e2dc:	6823      	ldr	r3, [r4, #0]
    e2de:	695b      	ldr	r3, [r3, #20]
    e2e0:	b103      	cbz	r3, e2e4 <log_init+0x40>
				backend->api->init();
    e2e2:	4798      	blx	r3
			log_backend_enable(backend, NULL, CONFIG_LOG_MAX_LEVEL);
    e2e4:	2204      	movs	r2, #4
    e2e6:	2100      	movs	r1, #0
    e2e8:	4620      	mov	r0, r4
    e2ea:	f7ff ffad 	bl	e248 <log_backend_enable>
	for (i = 0; i < log_backend_count_get(); i++) {
    e2ee:	3601      	adds	r6, #1
    e2f0:	3410      	adds	r4, #16
    e2f2:	e7ee      	b.n	e2d2 <log_init+0x2e>
    e2f4:	000229b4 	.word	0x000229b4
    e2f8:	000229a4 	.word	0x000229a4
    e2fc:	0002354c 	.word	0x0002354c
    e300:	000234fb 	.word	0x000234fb
    e304:	00023583 	.word	0x00023583
    e308:	20020084 	.word	0x20020084

0000e30c <z_impl_log_panic>:
{
    e30c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (panic_mode) {
    e30e:	4f0c      	ldr	r7, [pc, #48]	; (e340 <z_impl_log_panic+0x34>)
    e310:	783d      	ldrb	r5, [r7, #0]
    e312:	b94d      	cbnz	r5, e328 <z_impl_log_panic+0x1c>
	log_init();
    e314:	f7ff ffc6 	bl	e2a4 <log_init>
    e318:	4c0a      	ldr	r4, [pc, #40]	; (e344 <z_impl_log_panic+0x38>)
    e31a:	4e0b      	ldr	r6, [pc, #44]	; (e348 <z_impl_log_panic+0x3c>)
    e31c:	1b36      	subs	r6, r6, r4
    e31e:	1136      	asrs	r6, r6, #4
	for (int i = 0; i < log_backend_count_get(); i++) {
    e320:	42b5      	cmp	r5, r6
    e322:	db02      	blt.n	e32a <z_impl_log_panic+0x1e>
	panic_mode = true;
    e324:	2301      	movs	r3, #1
    e326:	703b      	strb	r3, [r7, #0]
}
    e328:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (log_backend_is_active(backend)) {
    e32a:	4620      	mov	r0, r4
    e32c:	f011 fda5 	bl	1fe7a <log_backend_is_active>
    e330:	b118      	cbz	r0, e33a <z_impl_log_panic+0x2e>
	backend->api->panic(backend);
    e332:	6823      	ldr	r3, [r4, #0]
    e334:	4620      	mov	r0, r4
    e336:	691b      	ldr	r3, [r3, #16]
    e338:	4798      	blx	r3
	for (int i = 0; i < log_backend_count_get(); i++) {
    e33a:	3501      	adds	r5, #1
    e33c:	3410      	adds	r4, #16
    e33e:	e7ef      	b.n	e320 <z_impl_log_panic+0x14>
    e340:	2002165f 	.word	0x2002165f
    e344:	000229a4 	.word	0x000229a4
    e348:	000229b4 	.word	0x000229b4

0000e34c <print_formatted>:
	return 0;
}

static int print_formatted(const struct log_output *log_output,
			   const char *fmt, ...)
{
    e34c:	b40e      	push	{r1, r2, r3}
    e34e:	b503      	push	{r0, r1, lr}
    e350:	ab03      	add	r3, sp, #12
    e352:	f853 2b04 	ldr.w	r2, [r3], #4
	va_start(args, fmt);
#if !defined(CONFIG_NEWLIB_LIBC) && !defined(CONFIG_ARCH_POSIX) && \
    defined(CONFIG_LOG_ENABLE_FANCY_OUTPUT_FORMATTING)
	length = z_prf(out_func, (void *)log_output, (char *)fmt, args);
#else
	z_vprintk(out_func, (void *)log_output, fmt, args);
    e356:	4601      	mov	r1, r0
    e358:	4804      	ldr	r0, [pc, #16]	; (e36c <print_formatted+0x20>)
	va_start(args, fmt);
    e35a:	9301      	str	r3, [sp, #4]
	z_vprintk(out_func, (void *)log_output, fmt, args);
    e35c:	f011 fbcd 	bl	1fafa <z_vprintk>
#endif
	va_end(args);

	return length;
}
    e360:	2000      	movs	r0, #0
    e362:	b002      	add	sp, #8
    e364:	f85d eb04 	ldr.w	lr, [sp], #4
    e368:	b003      	add	sp, #12
    e36a:	4770      	bx	lr
    e36c:	0001feaf 	.word	0x0001feaf

0000e370 <prefix_print>:
}

static u32_t prefix_print(const struct log_output *log_output,
			 u32_t flags, bool func_on, u32_t timestamp, u8_t level,
			 u8_t domain_id, u16_t source_id)
{
    e370:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
			"<%d>1 ",
			facility * 8 +
			level_to_rfc5424_severity(level));
	}

	if (stamp) {
    e374:	f011 0402 	ands.w	r4, r1, #2
{
    e378:	b085      	sub	sp, #20
    e37a:	4606      	mov	r6, r0
    e37c:	4690      	mov	r8, r2
    e37e:	f89d 7038 	ldrb.w	r7, [sp, #56]	; 0x38
	bool colors_on = flags & LOG_OUTPUT_FLAG_COLORS;
    e382:	f001 0901 	and.w	r9, r1, #1
	bool level_on = flags & LOG_OUTPUT_FLAG_LEVEL;
    e386:	f001 0508 	and.w	r5, r1, #8
	if (stamp) {
    e38a:	d007      	beq.n	e39c <prefix_print+0x2c>
	if (!format) {
    e38c:	f011 0f44 	tst.w	r1, #68	; 0x44
    e390:	d137      	bne.n	e402 <prefix_print+0x92>
		length = print_formatted(log_output, "[%08lu] ", timestamp);
    e392:	461a      	mov	r2, r3
    e394:	4932      	ldr	r1, [pc, #200]	; (e460 <prefix_print+0xf0>)
    e396:	f7ff ffd9 	bl	e34c <print_formatted>
		length += timestamp_print(log_output, flags, timestamp);
    e39a:	4604      	mov	r4, r0
	if (color) {
    e39c:	f1b9 0f00 	cmp.w	r9, #0
    e3a0:	d00a      	beq.n	e3b8 <prefix_print+0x48>
		const char *color = start && (colors[level] != NULL) ?
    e3a2:	4b30      	ldr	r3, [pc, #192]	; (e464 <prefix_print+0xf4>)
		print_formatted(log_output, "%s", color);
    e3a4:	4930      	ldr	r1, [pc, #192]	; (e468 <prefix_print+0xf8>)
		const char *color = start && (colors[level] != NULL) ?
    e3a6:	f853 2027 	ldr.w	r2, [r3, r7, lsl #2]
		print_formatted(log_output, "%s", color);
    e3aa:	4b30      	ldr	r3, [pc, #192]	; (e46c <prefix_print+0xfc>)
    e3ac:	4630      	mov	r0, r6
    e3ae:	2a00      	cmp	r2, #0
    e3b0:	bf08      	it	eq
    e3b2:	461a      	moveq	r2, r3
    e3b4:	f7ff ffca 	bl	e34c <print_formatted>
	if (level_on) {
    e3b8:	b13d      	cbz	r5, e3ca <prefix_print+0x5a>
		total += print_formatted(log_output, "<%s> ", severity[level]);
    e3ba:	4b2d      	ldr	r3, [pc, #180]	; (e470 <prefix_print+0x100>)
    e3bc:	492d      	ldr	r1, [pc, #180]	; (e474 <prefix_print+0x104>)
    e3be:	f853 2027 	ldr.w	r2, [r3, r7, lsl #2]
    e3c2:	4630      	mov	r0, r6
    e3c4:	f7ff ffc2 	bl	e34c <print_formatted>
    e3c8:	4605      	mov	r5, r0
	total += print_formatted(log_output,
    e3ca:	f1b8 0f00 	cmp.w	r8, #0
    e3ce:	d044      	beq.n	e45a <prefix_print+0xea>
				((1 << level) & LOG_FUNCTION_PREFIX_MASK)) ?
    e3d0:	2301      	movs	r3, #1
    e3d2:	fa03 f707 	lsl.w	r7, r3, r7
	total += print_formatted(log_output,
    e3d6:	4b28      	ldr	r3, [pc, #160]	; (e478 <prefix_print+0x108>)
    e3d8:	f017 0f10 	tst.w	r7, #16
    e3dc:	4f27      	ldr	r7, [pc, #156]	; (e47c <prefix_print+0x10c>)
    e3de:	bf18      	it	ne
    e3e0:	461f      	movne	r7, r3
    e3e2:	f8bd 1040 	ldrh.w	r1, [sp, #64]	; 0x40
    e3e6:	f89d 003c 	ldrb.w	r0, [sp, #60]	; 0x3c
    e3ea:	f7ff ff1f 	bl	e22c <log_source_name_get>
    e3ee:	4639      	mov	r1, r7
    e3f0:	4602      	mov	r2, r0
    e3f2:	4630      	mov	r0, r6
    e3f4:	f7ff ffaa 	bl	e34c <print_formatted>
    e3f8:	4428      	add	r0, r5
		length += ids_print(log_output, level_on, func_on,
				    domain_id, source_id, level);
	}

	return length;
}
    e3fa:	4420      	add	r0, r4
    e3fc:	b005      	add	sp, #20
    e3fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	} else if (freq != 0U) {
    e402:	4a1f      	ldr	r2, [pc, #124]	; (e480 <prefix_print+0x110>)
    e404:	6811      	ldr	r1, [r2, #0]
    e406:	b331      	cbz	r1, e456 <prefix_print+0xe6>
		timestamp /= timestamp_div;
    e408:	4a1e      	ldr	r2, [pc, #120]	; (e484 <prefix_print+0x114>)
    e40a:	f44f 6e61 	mov.w	lr, #3600	; 0xe10
    e40e:	6814      	ldr	r4, [r2, #0]
		ms = (remainder * 1000U) / freq;
    e410:	f44f 7c7a 	mov.w	ip, #1000	; 0x3e8
		timestamp /= timestamp_div;
    e414:	fbb3 f3f4 	udiv	r3, r3, r4
		seconds = timestamp / freq;
    e418:	fbb3 f4f1 	udiv	r4, r3, r1
		seconds -= hours * 3600U;
    e41c:	fbb4 f2fe 	udiv	r2, r4, lr
    e420:	fb0e 4e12 	mls	lr, lr, r2, r4
		remainder = timestamp % freq;
    e424:	fb01 3414 	mls	r4, r1, r4, r3
		ms = (remainder * 1000U) / freq;
    e428:	fb0c f404 	mul.w	r4, ip, r4
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
    e42c:	fbb4 fbf1 	udiv	fp, r4, r1
		mins = seconds / 60U;
    e430:	f04f 0a3c 	mov.w	sl, #60	; 0x3c
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
    e434:	fb01 441b 	mls	r4, r1, fp, r4
    e438:	fb0c f404 	mul.w	r4, ip, r4
		mins = seconds / 60U;
    e43c:	fbbe f3fa 	udiv	r3, lr, sl
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
    e440:	fbb4 f1f1 	udiv	r1, r4, r1
			length = print_formatted(log_output,
    e444:	e9cd b101 	strd	fp, r1, [sp, #4]
    e448:	fb0a e113 	mls	r1, sl, r3, lr
    e44c:	9100      	str	r1, [sp, #0]
    e44e:	490e      	ldr	r1, [pc, #56]	; (e488 <prefix_print+0x118>)
    e450:	f7ff ff7c 	bl	e34c <print_formatted>
    e454:	e7a1      	b.n	e39a <prefix_print+0x2a>
		length = 0;
    e456:	4608      	mov	r0, r1
    e458:	e79f      	b.n	e39a <prefix_print+0x2a>
	total += print_formatted(log_output,
    e45a:	4f08      	ldr	r7, [pc, #32]	; (e47c <prefix_print+0x10c>)
    e45c:	e7c1      	b.n	e3e2 <prefix_print+0x72>
    e45e:	bf00      	nop
    e460:	00023627 	.word	0x00023627
    e464:	00022ac0 	.word	0x00022ac0
    e468:	0002364c 	.word	0x0002364c
    e46c:	00023619 	.word	0x00023619
    e470:	00022ad4 	.word	0x00022ad4
    e474:	0002364f 	.word	0x0002364f
    e478:	00023623 	.word	0x00023623
    e47c:	0002361e 	.word	0x0002361e
    e480:	20020088 	.word	0x20020088
    e484:	2002008c 	.word	0x2002008c
    e488:	00023630 	.word	0x00023630

0000e48c <postfix_print>:

static void postfix_print(const struct log_output *log_output,
			  u32_t flags, u8_t level)
{
    e48c:	b538      	push	{r3, r4, r5, lr}
    e48e:	460c      	mov	r4, r1
	if (color) {
    e490:	07e1      	lsls	r1, r4, #31
{
    e492:	4605      	mov	r5, r0
	if (color) {
    e494:	d503      	bpl.n	e49e <postfix_print+0x12>
		print_formatted(log_output, "%s", color);
    e496:	4a08      	ldr	r2, [pc, #32]	; (e4b8 <postfix_print+0x2c>)
    e498:	4908      	ldr	r1, [pc, #32]	; (e4bc <postfix_print+0x30>)
    e49a:	f7ff ff57 	bl	e34c <print_formatted>
	if ((flags & LOG_OUTPUT_FLAG_CRLF_NONE) != 0U) {
    e49e:	06e2      	lsls	r2, r4, #27
    e4a0:	d408      	bmi.n	e4b4 <postfix_print+0x28>
	if ((flags & LOG_OUTPUT_FLAG_CRLF_LFONLY) != 0U) {
    e4a2:	06a3      	lsls	r3, r4, #26
		print_formatted(ctx, "\r\n");
    e4a4:	4628      	mov	r0, r5
	color_postfix(log_output, (flags & LOG_OUTPUT_FLAG_COLORS),
			      level);
	newline_print(log_output, flags);
}
    e4a6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		print_formatted(ctx, "\n");
    e4aa:	bf4c      	ite	mi
    e4ac:	4904      	ldrmi	r1, [pc, #16]	; (e4c0 <postfix_print+0x34>)
		print_formatted(ctx, "\r\n");
    e4ae:	4905      	ldrpl	r1, [pc, #20]	; (e4c4 <postfix_print+0x38>)
    e4b0:	f7ff bf4c 	b.w	e34c <print_formatted>
}
    e4b4:	bd38      	pop	{r3, r4, r5, pc}
    e4b6:	bf00      	nop
    e4b8:	00023619 	.word	0x00023619
    e4bc:	0002364c 	.word	0x0002364c
    e4c0:	000241f5 	.word	0x000241f5
    e4c4:	00024e7a 	.word	0x00024e7a

0000e4c8 <hexdump_line_print>:
{
    e4c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    e4cc:	4698      	mov	r8, r3
    e4ce:	9b08      	ldr	r3, [sp, #32]
    e4d0:	4604      	mov	r4, r0
	if ((flags & LOG_OUTPUT_FLAG_CRLF_NONE) != 0U) {
    e4d2:	06dd      	lsls	r5, r3, #27
{
    e4d4:	460e      	mov	r6, r1
    e4d6:	4617      	mov	r7, r2
	if ((flags & LOG_OUTPUT_FLAG_CRLF_NONE) != 0U) {
    e4d8:	d405      	bmi.n	e4e6 <hexdump_line_print+0x1e>
	if ((flags & LOG_OUTPUT_FLAG_CRLF_LFONLY) != 0U) {
    e4da:	0699      	lsls	r1, r3, #26
		print_formatted(ctx, "\n");
    e4dc:	bf4c      	ite	mi
    e4de:	492a      	ldrmi	r1, [pc, #168]	; (e588 <hexdump_line_print+0xc0>)
		print_formatted(ctx, "\r\n");
    e4e0:	492a      	ldrpl	r1, [pc, #168]	; (e58c <hexdump_line_print+0xc4>)
    e4e2:	f7ff ff33 	bl	e34c <print_formatted>
{
    e4e6:	2500      	movs	r5, #0
		print_formatted(log_output, " ");
    e4e8:	f8df 90a8 	ldr.w	r9, [pc, #168]	; e594 <hexdump_line_print+0xcc>
	for (int i = 0; i < prefix_offset; i++) {
    e4ec:	4545      	cmp	r5, r8
    e4ee:	db2d      	blt.n	e54c <hexdump_line_print+0x84>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    e4f0:	2500      	movs	r5, #0
			print_formatted(log_output, "   ");
    e4f2:	f8df 80a4 	ldr.w	r8, [pc, #164]	; e598 <hexdump_line_print+0xd0>
			print_formatted(log_output, "%02x ", data[i]);
    e4f6:	f8df 90a4 	ldr.w	r9, [pc, #164]	; e59c <hexdump_line_print+0xd4>
			print_formatted(log_output, " ");
    e4fa:	f8df a098 	ldr.w	sl, [pc, #152]	; e594 <hexdump_line_print+0xcc>
		if (i < length) {
    e4fe:	42bd      	cmp	r5, r7
    e500:	d231      	bcs.n	e566 <hexdump_line_print+0x9e>
			print_formatted(log_output, "%02x ", data[i]);
    e502:	5d72      	ldrb	r2, [r6, r5]
    e504:	4649      	mov	r1, r9
    e506:	4620      	mov	r0, r4
    e508:	f7ff ff20 	bl	e34c <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    e50c:	3501      	adds	r5, #1
    e50e:	2d10      	cmp	r5, #16
    e510:	d122      	bne.n	e558 <hexdump_line_print+0x90>
	print_formatted(log_output, "|");
    e512:	491f      	ldr	r1, [pc, #124]	; (e590 <hexdump_line_print+0xc8>)
    e514:	4620      	mov	r0, r4
    e516:	f7ff ff19 	bl	e34c <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    e51a:	2500      	movs	r5, #0
			print_formatted(log_output, " ");
    e51c:	f8df 8074 	ldr.w	r8, [pc, #116]	; e594 <hexdump_line_print+0xcc>
			      isprint((int)c) ? c : '.');
    e520:	f8df 907c 	ldr.w	r9, [pc, #124]	; e5a0 <hexdump_line_print+0xd8>
			print_formatted(log_output, "%c",
    e524:	f8df a07c 	ldr.w	sl, [pc, #124]	; e5a4 <hexdump_line_print+0xdc>
		if (i < length) {
    e528:	42af      	cmp	r7, r5
    e52a:	d928      	bls.n	e57e <hexdump_line_print+0xb6>
			char c = (char)data[i];
    e52c:	5d72      	ldrb	r2, [r6, r5]
			print_formatted(log_output, "%c",
    e52e:	4651      	mov	r1, sl
    e530:	f812 3009 	ldrb.w	r3, [r2, r9]
    e534:	4620      	mov	r0, r4
    e536:	f013 0f97 	tst.w	r3, #151	; 0x97
    e53a:	bf08      	it	eq
    e53c:	222e      	moveq	r2, #46	; 0x2e
    e53e:	f7ff ff05 	bl	e34c <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    e542:	3501      	adds	r5, #1
    e544:	2d10      	cmp	r5, #16
    e546:	d113      	bne.n	e570 <hexdump_line_print+0xa8>
}
    e548:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		print_formatted(log_output, " ");
    e54c:	4649      	mov	r1, r9
    e54e:	4620      	mov	r0, r4
    e550:	f7ff fefc 	bl	e34c <print_formatted>
	for (int i = 0; i < prefix_offset; i++) {
    e554:	3501      	adds	r5, #1
    e556:	e7c9      	b.n	e4ec <hexdump_line_print+0x24>
		if (i > 0 && !(i % 8)) {
    e558:	076a      	lsls	r2, r5, #29
    e55a:	d1d0      	bne.n	e4fe <hexdump_line_print+0x36>
			print_formatted(log_output, " ");
    e55c:	4651      	mov	r1, sl
    e55e:	4620      	mov	r0, r4
    e560:	f7ff fef4 	bl	e34c <print_formatted>
    e564:	e7cb      	b.n	e4fe <hexdump_line_print+0x36>
			print_formatted(log_output, "   ");
    e566:	4641      	mov	r1, r8
    e568:	4620      	mov	r0, r4
    e56a:	f7ff feef 	bl	e34c <print_formatted>
    e56e:	e7cd      	b.n	e50c <hexdump_line_print+0x44>
		if (i > 0 && !(i % 8)) {
    e570:	076b      	lsls	r3, r5, #29
    e572:	d1d9      	bne.n	e528 <hexdump_line_print+0x60>
			print_formatted(log_output, " ");
    e574:	4641      	mov	r1, r8
    e576:	4620      	mov	r0, r4
    e578:	f7ff fee8 	bl	e34c <print_formatted>
    e57c:	e7d4      	b.n	e528 <hexdump_line_print+0x60>
			print_formatted(log_output, " ");
    e57e:	4641      	mov	r1, r8
    e580:	4620      	mov	r0, r4
    e582:	f7ff fee3 	bl	e34c <print_formatted>
    e586:	e7dc      	b.n	e542 <hexdump_line_print+0x7a>
    e588:	000241f5 	.word	0x000241f5
    e58c:	00024e7a 	.word	0x00024e7a
    e590:	000235d2 	.word	0x000235d2
    e594:	000235d0 	.word	0x000235d0
    e598:	000235ce 	.word	0x000235ce
    e59c:	000235c8 	.word	0x000235c8
    e5a0:	0002561e 	.word	0x0002561e
    e5a4:	000235d4 	.word	0x000235d4

0000e5a8 <log_output_string>:
}

void log_output_string(const struct log_output *log_output,
		       struct log_msg_ids src_level, u32_t timestamp,
		       const char *fmt, va_list ap, u32_t flags)
{
    e5a8:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
		log_output_string_syst_process(log_output,
				src_level, fmt, ap, flags);
		return;
	}

	if (!raw_string) {
    e5ac:	f011 0407 	ands.w	r4, r1, #7
{
    e5b0:	4606      	mov	r6, r0
    e5b2:	e9dd 870a 	ldrd	r8, r7, [sp, #40]	; 0x28
    e5b6:	461d      	mov	r5, r3
	if (!raw_string) {
    e5b8:	d00b      	beq.n	e5d2 <log_output_string+0x2a>
		prefix_print(log_output, flags, true, timestamp,
    e5ba:	f3c1 1389 	ubfx	r3, r1, #6, #10
    e5be:	f3c1 01c2 	ubfx	r1, r1, #3, #3
    e5c2:	9302      	str	r3, [sp, #8]
    e5c4:	e9cd 4100 	strd	r4, r1, [sp]
    e5c8:	4613      	mov	r3, r2
    e5ca:	4639      	mov	r1, r7
    e5cc:	2201      	movs	r2, #1
    e5ce:	f7ff fecf 	bl	e370 <prefix_print>

#if !defined(CONFIG_NEWLIB_LIBC) && !defined(CONFIG_ARCH_POSIX) && \
    defined(CONFIG_LOG_ENABLE_FANCY_OUTPUT_FORMATTING)
	length = z_prf(out_func, (void *)log_output, (char *)fmt, ap);
#else
	z_vprintk(out_func, (void *)log_output, fmt, ap);
    e5d2:	4643      	mov	r3, r8
    e5d4:	462a      	mov	r2, r5
    e5d6:	4631      	mov	r1, r6
    e5d8:	480d      	ldr	r0, [pc, #52]	; (e610 <log_output_string+0x68>)
    e5da:	f011 fa8e 	bl	1fafa <z_vprintk>
#endif

	(void)length;

	if (raw_string) {
    e5de:	b98c      	cbnz	r4, e604 <log_output_string+0x5c>
    e5e0:	3d01      	subs	r5, #1
	while (*fmt != '\0') {
    e5e2:	f815 3f01 	ldrb.w	r3, [r5, #1]!
    e5e6:	b95b      	cbnz	r3, e600 <log_output_string+0x58>
		/* add \r if string ends with newline. */
		if (ends_with_newline(fmt)) {
    e5e8:	2c0a      	cmp	r4, #10
    e5ea:	d103      	bne.n	e5f4 <log_output_string+0x4c>
			print_formatted(log_output, "\r");
    e5ec:	4909      	ldr	r1, [pc, #36]	; (e614 <log_output_string+0x6c>)
    e5ee:	4630      	mov	r0, r6
    e5f0:	f7ff feac 	bl	e34c <print_formatted>
		}
	} else {
		postfix_print(log_output, flags, level);
	}

	log_output_flush(log_output);
    e5f4:	4630      	mov	r0, r6
}
    e5f6:	b004      	add	sp, #16
    e5f8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	log_output_flush(log_output);
    e5fc:	f011 bc70 	b.w	1fee0 <log_output_flush>
	while (*fmt != '\0') {
    e600:	461c      	mov	r4, r3
    e602:	e7ee      	b.n	e5e2 <log_output_string+0x3a>
		postfix_print(log_output, flags, level);
    e604:	4622      	mov	r2, r4
    e606:	4639      	mov	r1, r7
    e608:	4630      	mov	r0, r6
    e60a:	f7ff ff3f 	bl	e48c <postfix_print>
    e60e:	e7f1      	b.n	e5f4 <log_output_string+0x4c>
    e610:	0001feaf 	.word	0x0001feaf
    e614:	00023617 	.word	0x00023617

0000e618 <log_output_hexdump>:

void log_output_hexdump(const struct log_output *log_output,
			     struct log_msg_ids src_level, u32_t timestamp,
			     const char *metadata, const u8_t *data,
			     u32_t length, u32_t flags)
{
    e618:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
    e61c:	9e0e      	ldr	r6, [sp, #56]	; 0x38
    e61e:	4698      	mov	r8, r3
    e620:	e9dd 750c 	ldrd	r7, r5, [sp, #48]	; 0x30
		log_output_hexdump_syst_process(log_output,
				src_level, data, length, flags);
		return;
	}

	prefix_offset = prefix_print(log_output, flags, true, timestamp,
    e624:	f3c1 1389 	ubfx	r3, r1, #6, #10
	u8_t level = (u8_t)src_level.level;
    e628:	f001 0907 	and.w	r9, r1, #7
	prefix_offset = prefix_print(log_output, flags, true, timestamp,
    e62c:	f3c1 01c2 	ubfx	r1, r1, #3, #3
    e630:	9302      	str	r3, [sp, #8]
    e632:	e9cd 9100 	strd	r9, r1, [sp]
    e636:	4613      	mov	r3, r2
    e638:	4631      	mov	r1, r6
    e63a:	2201      	movs	r2, #1
{
    e63c:	4604      	mov	r4, r0
	prefix_offset = prefix_print(log_output, flags, true, timestamp,
    e63e:	f7ff fe97 	bl	e370 <prefix_print>
				     level, domain_id, source_id);

	/* Print metadata */
	print_formatted(log_output, "%s", metadata);
    e642:	4642      	mov	r2, r8
	prefix_offset = prefix_print(log_output, flags, true, timestamp,
    e644:	4682      	mov	sl, r0
	print_formatted(log_output, "%s", metadata);
    e646:	4910      	ldr	r1, [pc, #64]	; (e688 <log_output_hexdump+0x70>)
    e648:	4620      	mov	r0, r4
    e64a:	f7ff fe7f 	bl	e34c <print_formatted>

	while (length) {
    e64e:	b955      	cbnz	r5, e666 <log_output_hexdump+0x4e>

		data += part_len;
		length -= part_len;
	};

	postfix_print(log_output, flags, level);
    e650:	4620      	mov	r0, r4
    e652:	464a      	mov	r2, r9
    e654:	4631      	mov	r1, r6
    e656:	f7ff ff19 	bl	e48c <postfix_print>
	log_output_flush(log_output);
    e65a:	4620      	mov	r0, r4
}
    e65c:	b004      	add	sp, #16
    e65e:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	log_output_flush(log_output);
    e662:	f011 bc3d 	b.w	1fee0 <log_output_flush>
		u32_t part_len = length > HEXDUMP_BYTES_IN_LINE ?
    e666:	2d10      	cmp	r5, #16
    e668:	46a8      	mov	r8, r5
    e66a:	bf28      	it	cs
    e66c:	f04f 0810 	movcs.w	r8, #16
		hexdump_line_print(log_output, data, part_len,
    e670:	4639      	mov	r1, r7
    e672:	9600      	str	r6, [sp, #0]
    e674:	4653      	mov	r3, sl
    e676:	4642      	mov	r2, r8
    e678:	4620      	mov	r0, r4
    e67a:	f7ff ff25 	bl	e4c8 <hexdump_line_print>
		data += part_len;
    e67e:	4447      	add	r7, r8
		length -= part_len;
    e680:	eba5 0508 	sub.w	r5, r5, r8
    e684:	e7e3      	b.n	e64e <log_output_hexdump+0x36>
    e686:	bf00      	nop
    e688:	0002364c 	.word	0x0002364c

0000e68c <log_output_timestamp_freq_set>:
	buffer_write(outf, (u8_t *)postfix, sizeof(postfix) - 1, dev);
}

void log_output_timestamp_freq_set(u32_t frequency)
{
	timestamp_div = 1U;
    e68c:	2301      	movs	r3, #1
	/* There is no point to have frequency higher than 1MHz (ns are not
	 * printed) and too high frequency leads to overflows in calculations.
	 */
	while (frequency > 1000000) {
    e68e:	2100      	movs	r1, #0
	timestamp_div = 1U;
    e690:	4a07      	ldr	r2, [pc, #28]	; (e6b0 <log_output_timestamp_freq_set+0x24>)
{
    e692:	b510      	push	{r4, lr}
	while (frequency > 1000000) {
    e694:	4c07      	ldr	r4, [pc, #28]	; (e6b4 <log_output_timestamp_freq_set+0x28>)
	timestamp_div = 1U;
    e696:	6013      	str	r3, [r2, #0]
	while (frequency > 1000000) {
    e698:	42a0      	cmp	r0, r4
    e69a:	d804      	bhi.n	e6a6 <log_output_timestamp_freq_set+0x1a>
    e69c:	b101      	cbz	r1, e6a0 <log_output_timestamp_freq_set+0x14>
    e69e:	6013      	str	r3, [r2, #0]
		frequency /= 2U;
		timestamp_div *= 2U;
	}

	freq = frequency;
    e6a0:	4b05      	ldr	r3, [pc, #20]	; (e6b8 <log_output_timestamp_freq_set+0x2c>)
    e6a2:	6018      	str	r0, [r3, #0]
}
    e6a4:	bd10      	pop	{r4, pc}
		frequency /= 2U;
    e6a6:	0840      	lsrs	r0, r0, #1
		timestamp_div *= 2U;
    e6a8:	005b      	lsls	r3, r3, #1
    e6aa:	2101      	movs	r1, #1
    e6ac:	e7f4      	b.n	e698 <log_output_timestamp_freq_set+0xc>
    e6ae:	bf00      	nop
    e6b0:	2002008c 	.word	0x2002008c
    e6b4:	000f4240 	.word	0x000f4240
    e6b8:	20020088 	.word	0x20020088

0000e6bc <panic>:
 * @param log_output	Log output instance.
 */
static inline void
log_backend_std_panic(const struct log_output *const log_output)
{
	log_output_flush(log_output);
    e6bc:	4801      	ldr	r0, [pc, #4]	; (e6c4 <panic+0x8>)
    e6be:	f011 bc0f 	b.w	1fee0 <log_output_flush>
    e6c2:	bf00      	nop
    e6c4:	00022b00 	.word	0x00022b00

0000e6c8 <log_backend_uart_init>:

	log_backend_std_put(&log_output, flag, msg);
}

static void log_backend_uart_init(void)
{
    e6c8:	b508      	push	{r3, lr}
	if (z_syscall_trap()) {
		return (struct device *) arch_syscall_invoke1(*(uintptr_t *)&name, K_SYSCALL_DEVICE_GET_BINDING);
	}
#endif
	compiler_barrier();
	return z_impl_device_get_binding(name);
    e6ca:	4806      	ldr	r0, [pc, #24]	; (e6e4 <log_backend_uart_init+0x1c>)
    e6cc:	f00c fbd4 	bl	1ae78 <z_impl_device_get_binding>
	struct device *dev;

	dev = device_get_binding(CONFIG_UART_CONSOLE_ON_DEV_NAME);
	assert(dev);
    e6d0:	b928      	cbnz	r0, e6de <log_backend_uart_init+0x16>
    e6d2:	4b05      	ldr	r3, [pc, #20]	; (e6e8 <log_backend_uart_init+0x20>)
    e6d4:	4a05      	ldr	r2, [pc, #20]	; (e6ec <log_backend_uart_init+0x24>)
    e6d6:	212d      	movs	r1, #45	; 0x2d
    e6d8:	4805      	ldr	r0, [pc, #20]	; (e6f0 <log_backend_uart_init+0x28>)
    e6da:	f00f fdab 	bl	1e234 <__assert_func>
 * @param ctx		User context.
 */
static inline void log_output_ctx_set(const struct log_output *log_output,
				      void *ctx)
{
	log_output->control_block->ctx = ctx;
    e6de:	4b05      	ldr	r3, [pc, #20]	; (e6f4 <log_backend_uart_init+0x2c>)
    e6e0:	6058      	str	r0, [r3, #4]

	log_output_ctx_set(&log_output, dev);
}
    e6e2:	bd08      	pop	{r3, pc}
    e6e4:	0002368b 	.word	0x0002368b
    e6e8:	00023692 	.word	0x00023692
    e6ec:	00023675 	.word	0x00023675
    e6f0:	00023696 	.word	0x00023696
    e6f4:	20020098 	.word	0x20020098

0000e6f8 <sync_hexdump>:
}

static void sync_hexdump(const struct log_backend *const backend,
			 struct log_msg_ids src_level, u32_t timestamp,
			 const char *metadata, const u8_t *data, u32_t length)
{
    e6f8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
		 * by another one, lock context for whole log processing.
		 */
		key = irq_lock();
	}

	log_output_hexdump(log_output, src_level, timestamp,
    e6fa:	200f      	movs	r0, #15
    e6fc:	9002      	str	r0, [sp, #8]
    e6fe:	9807      	ldr	r0, [sp, #28]
    e700:	9001      	str	r0, [sp, #4]
    e702:	9806      	ldr	r0, [sp, #24]
    e704:	9000      	str	r0, [sp, #0]
    e706:	4803      	ldr	r0, [pc, #12]	; (e714 <sync_hexdump+0x1c>)
    e708:	f7ff ff86 	bl	e618 <log_output_hexdump>
	u32_t flag = IS_ENABLED(CONFIG_LOG_BACKEND_UART_SYST_ENABLE) ?
		LOG_OUTPUT_FLAG_FORMAT_SYST : 0;

	log_backend_std_sync_hexdump(&log_output, flag, src_level,
				     timestamp, metadata, data, length);
}
    e70c:	b005      	add	sp, #20
    e70e:	f85d fb04 	ldr.w	pc, [sp], #4
    e712:	bf00      	nop
    e714:	00022b00 	.word	0x00022b00

0000e718 <sync_string>:
{
    e718:	b507      	push	{r0, r1, r2, lr}
	log_output_string(log_output, src_level, timestamp, fmt, ap, flags);
    e71a:	200f      	movs	r0, #15
    e71c:	9001      	str	r0, [sp, #4]
    e71e:	9804      	ldr	r0, [sp, #16]
    e720:	9000      	str	r0, [sp, #0]
    e722:	4803      	ldr	r0, [pc, #12]	; (e730 <sync_string+0x18>)
    e724:	f7ff ff40 	bl	e5a8 <log_output_string>
}
    e728:	b003      	add	sp, #12
    e72a:	f85d fb04 	ldr.w	pc, [sp], #4
    e72e:	bf00      	nop
    e730:	00022b00 	.word	0x00022b00

0000e734 <socket_offload_register>:

/* Only one provider may register socket operations upon boot. */
const struct socket_offload *socket_ops;

void socket_offload_register(const struct socket_offload *ops)
{
    e734:	b538      	push	{r3, r4, r5, lr}
	__ASSERT_NO_MSG(ops);
    e736:	4605      	mov	r5, r0
    e738:	b948      	cbnz	r0, e74e <socket_offload_register+0x1a>
    e73a:	490c      	ldr	r1, [pc, #48]	; (e76c <socket_offload_register+0x38>)
    e73c:	480c      	ldr	r0, [pc, #48]	; (e770 <socket_offload_register+0x3c>)
    e73e:	2311      	movs	r3, #17
    e740:	4a0c      	ldr	r2, [pc, #48]	; (e774 <socket_offload_register+0x40>)
    e742:	f011 fb4a 	bl	1fdda <printk>
    e746:	2111      	movs	r1, #17
    e748:	480a      	ldr	r0, [pc, #40]	; (e774 <socket_offload_register+0x40>)
    e74a:	f011 fb8c 	bl	1fe66 <assert_post_action>
	__ASSERT_NO_MSG(socket_ops == NULL);
    e74e:	4c0a      	ldr	r4, [pc, #40]	; (e778 <socket_offload_register+0x44>)
    e750:	6822      	ldr	r2, [r4, #0]
    e752:	b14a      	cbz	r2, e768 <socket_offload_register+0x34>
    e754:	4909      	ldr	r1, [pc, #36]	; (e77c <socket_offload_register+0x48>)
    e756:	4806      	ldr	r0, [pc, #24]	; (e770 <socket_offload_register+0x3c>)
    e758:	2312      	movs	r3, #18
    e75a:	4a06      	ldr	r2, [pc, #24]	; (e774 <socket_offload_register+0x40>)
    e75c:	f011 fb3d 	bl	1fdda <printk>
    e760:	2112      	movs	r1, #18
    e762:	4804      	ldr	r0, [pc, #16]	; (e774 <socket_offload_register+0x40>)
    e764:	f011 fb7f 	bl	1fe66 <assert_post_action>

	socket_ops = ops;
    e768:	6025      	str	r5, [r4, #0]
}
    e76a:	bd38      	pop	{r3, r4, r5, pc}
    e76c:	0002344d 	.word	0x0002344d
    e770:	00023451 	.word	0x00023451
    e774:	000236dc 	.word	0x000236dc
    e778:	200200a4 	.word	0x200200a4
    e77c:	00023717 	.word	0x00023717

0000e780 <console_out>:

static int console_out(int c)
{
#ifdef CONFIG_UART_CONSOLE_DEBUG_SERVER_HOOKS

	int handled_by_debug_server = HANDLE_DEBUG_HOOK_OUT(c);
    e780:	4b0a      	ldr	r3, [pc, #40]	; (e7ac <console_out+0x2c>)
{
    e782:	b570      	push	{r4, r5, r6, lr}
	int handled_by_debug_server = HANDLE_DEBUG_HOOK_OUT(c);
    e784:	b2c6      	uxtb	r6, r0
{
    e786:	4604      	mov	r4, r0
	int handled_by_debug_server = HANDLE_DEBUG_HOOK_OUT(c);
    e788:	681b      	ldr	r3, [r3, #0]
    e78a:	4630      	mov	r0, r6
    e78c:	4798      	blx	r3

	if (handled_by_debug_server) {
    e78e:	2801      	cmp	r0, #1
    e790:	d00a      	beq.n	e7a8 <console_out+0x28>
		return c;
	}

#endif  /* CONFIG_UART_CONSOLE_DEBUG_SERVER_HOOKS */

	if ('\n' == c) {
    e792:	2c0a      	cmp	r4, #10
    e794:	4d06      	ldr	r5, [pc, #24]	; (e7b0 <console_out+0x30>)
    e796:	d103      	bne.n	e7a0 <console_out+0x20>
		uart_poll_out(uart_console_dev, '\r');
    e798:	210d      	movs	r1, #13
    e79a:	6828      	ldr	r0, [r5, #0]
    e79c:	f011 fbbd 	bl	1ff1a <uart_poll_out>
	}
	uart_poll_out(uart_console_dev, c);
    e7a0:	4631      	mov	r1, r6
    e7a2:	6828      	ldr	r0, [r5, #0]
    e7a4:	f011 fbb9 	bl	1ff1a <uart_poll_out>

	return c;
}
    e7a8:	4620      	mov	r0, r4
    e7aa:	bd70      	pop	{r4, r5, r6, pc}
    e7ac:	20026070 	.word	0x20026070
    e7b0:	200200a8 	.word	0x200200a8

0000e7b4 <uart_console_hook_install>:
 *
 * @return N/A
 */

void uart_console_hook_install(void)
{
    e7b4:	b510      	push	{r4, lr}
	__stdout_hook_install(console_out);
    e7b6:	4c04      	ldr	r4, [pc, #16]	; (e7c8 <uart_console_hook_install+0x14>)
    e7b8:	4620      	mov	r0, r4
    e7ba:	f001 fb4b 	bl	fe54 <__stdout_hook_install>
	__printk_hook_install(console_out);
    e7be:	4620      	mov	r0, r4
}
    e7c0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	__printk_hook_install(console_out);
    e7c4:	f7ff bcd0 	b.w	e168 <__printk_hook_install>
    e7c8:	0000e781 	.word	0x0000e781

0000e7cc <uart_console_init>:
 * @brief Initialize one UART as the console/debug port
 *
 * @return 0 if successful, otherwise failed.
 */
static int uart_console_init(struct device *arg)
{
    e7cc:	b508      	push	{r3, lr}
    e7ce:	4804      	ldr	r0, [pc, #16]	; (e7e0 <uart_console_init+0x14>)
    e7d0:	f00c fb52 	bl	1ae78 <z_impl_device_get_binding>

	ARG_UNUSED(arg);

	uart_console_dev = device_get_binding(CONFIG_UART_CONSOLE_ON_DEV_NAME);
    e7d4:	4b03      	ldr	r3, [pc, #12]	; (e7e4 <uart_console_init+0x18>)
    e7d6:	6018      	str	r0, [r3, #0]
		}
	}
	k_busy_wait(1000000);
#endif

	uart_console_hook_install();
    e7d8:	f7ff ffec 	bl	e7b4 <uart_console_hook_install>

	return 0;
}
    e7dc:	2000      	movs	r0, #0
    e7de:	bd08      	pop	{r3, pc}
    e7e0:	0002368b 	.word	0x0002368b
    e7e4:	200200a8 	.word	0x200200a8

0000e7e8 <clk_init>:
 * symbol.
 */
void nrf_power_clock_isr(void *arg);

static int clk_init(struct device *dev)
{
    e7e8:	b510      	push	{r4, lr}
	IRQ_CONNECT(DT_INST_0_NORDIC_NRF_CLOCK_IRQ_0,
    e7ea:	2200      	movs	r2, #0
{
    e7ec:	4604      	mov	r4, r0
	IRQ_CONNECT(DT_INST_0_NORDIC_NRF_CLOCK_IRQ_0,
    e7ee:	2101      	movs	r1, #1
    e7f0:	2005      	movs	r0, #5
    e7f2:	f000 fc0d 	bl	f010 <z_arm_irq_priority_set>
		    DT_INST_0_NORDIC_NRF_CLOCK_IRQ_0_PRIORITY,
		    nrf_power_clock_isr, 0, 0);

	irq_enable(DT_INST_0_NORDIC_NRF_CLOCK_IRQ_0);
    e7f6:	2005      	movs	r0, #5
    e7f8:	f000 fbfa 	bl	eff0 <arch_irq_enable>
    return false;
}

NRF_STATIC_INLINE void nrf_clock_lf_src_set(NRF_CLOCK_Type * p_reg, nrf_clock_lfclk_t source)
{
    p_reg->LFCLKSRC = (uint32_t)(source);
    e7fc:	2202      	movs	r2, #2
    e7fe:	4b07      	ldr	r3, [pc, #28]	; (e81c <clk_init+0x34>)
 *
 * @param list A pointer on the list to initialize
 */
static inline void sys_slist_init(sys_slist_t *list)
{
	list->head = NULL;
    e800:	2000      	movs	r0, #0
    e802:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    p_reg->INTENSET = mask;
    e806:	2203      	movs	r2, #3
    e808:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304

	clock_irqs_enable();

	for (enum clock_control_nrf_type i = 0;
		i < CLOCK_CONTROL_NRF_TYPE_COUNT; i++) {
		sys_slist_init(&(get_sub_data(dev, i)->list));
    e80c:	68a3      	ldr	r3, [r4, #8]
	list->tail = NULL;
    e80e:	e9c3 0000 	strd	r0, r0, [r3]
    e812:	68a3      	ldr	r3, [r4, #8]
    e814:	e9c3 0003 	strd	r0, r0, [r3, #12]
	}

	return 0;
}
    e818:	bd10      	pop	{r4, pc}
    e81a:	bf00      	nop
    e81c:	40005000 	.word	0x40005000

0000e820 <get_status>:
{
    e820:	b538      	push	{r3, r4, r5, lr}
	__ASSERT_NO_MSG(type < CLOCK_CONTROL_NRF_TYPE_COUNT);
    e822:	b2cc      	uxtb	r4, r1
    e824:	2c01      	cmp	r4, #1
{
    e826:	4605      	mov	r5, r0
	__ASSERT_NO_MSG(type < CLOCK_CONTROL_NRF_TYPE_COUNT);
    e828:	d909      	bls.n	e83e <get_status+0x1e>
    e82a:	490b      	ldr	r1, [pc, #44]	; (e858 <get_status+0x38>)
    e82c:	480b      	ldr	r0, [pc, #44]	; (e85c <get_status+0x3c>)
    e82e:	2384      	movs	r3, #132	; 0x84
    e830:	4a0b      	ldr	r2, [pc, #44]	; (e860 <get_status+0x40>)
    e832:	f011 fad2 	bl	1fdda <printk>
    e836:	2184      	movs	r1, #132	; 0x84
    e838:	4809      	ldr	r0, [pc, #36]	; (e860 <get_status+0x40>)
    e83a:	f011 fb14 	bl	1fe66 <assert_post_action>
	if (data->started) {
    e83e:	210c      	movs	r1, #12
	data = get_sub_data(dev, type);
    e840:	68ab      	ldr	r3, [r5, #8]
	if (data->started) {
    e842:	fb04 3101 	mla	r1, r4, r1, r3
    e846:	7a4b      	ldrb	r3, [r1, #9]
    e848:	b923      	cbnz	r3, e854 <get_status+0x34>
	if (data->ref > 0) {
    e84a:	7a08      	ldrb	r0, [r1, #8]
		return CLOCK_CONTROL_STATUS_ON;
    e84c:	fab0 f080 	clz	r0, r0
    e850:	0940      	lsrs	r0, r0, #5
}
    e852:	bd38      	pop	{r3, r4, r5, pc}
		return CLOCK_CONTROL_STATUS_ON;
    e854:	2002      	movs	r0, #2
    e856:	e7fc      	b.n	e852 <get_status+0x32>
    e858:	000237d2 	.word	0x000237d2
    e85c:	00023451 	.word	0x00023451
    e860:	00023797 	.word	0x00023797

0000e864 <clock_async_start>:
{
    e864:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	enum clock_control_nrf_type type = (enum clock_control_nrf_type)subsys;
    e868:	b2ce      	uxtb	r6, r1
	__ASSERT_NO_MSG(type < CLOCK_CONTROL_NRF_TYPE_COUNT);
    e86a:	2e01      	cmp	r6, #1
{
    e86c:	4607      	mov	r7, r0
    e86e:	4614      	mov	r4, r2
	__ASSERT_NO_MSG(type < CLOCK_CONTROL_NRF_TYPE_COUNT);
    e870:	d909      	bls.n	e886 <clock_async_start+0x22>
    e872:	4949      	ldr	r1, [pc, #292]	; (e998 <clock_async_start+0x134>)
    e874:	4849      	ldr	r0, [pc, #292]	; (e99c <clock_async_start+0x138>)
    e876:	23fd      	movs	r3, #253	; 0xfd
    e878:	4a49      	ldr	r2, [pc, #292]	; (e9a0 <clock_async_start+0x13c>)
    e87a:	f011 faae 	bl	1fdda <printk>
    e87e:	21fd      	movs	r1, #253	; 0xfd
    e880:	4847      	ldr	r0, [pc, #284]	; (e9a0 <clock_async_start+0x13c>)
    e882:	f011 faf0 	bl	1fe66 <assert_post_action>
	const struct nrf_clock_control_config *config =
    e886:	683b      	ldr	r3, [r7, #0]
	clk_data = get_sub_data(dev, type);
    e888:	f8d7 8008 	ldr.w	r8, [r7, #8]
	const struct nrf_clock_control_config *config =
    e88c:	f8d3 9008 	ldr.w	r9, [r3, #8]
	__ASSERT_NO_MSG((data == NULL) ||
    e890:	2c00      	cmp	r4, #0
    e892:	d157      	bne.n	e944 <clock_async_start+0xe0>
	__asm__ volatile(
    e894:	f04f 0320 	mov.w	r3, #32
    e898:	f3ef 8a11 	mrs	sl, BASEPRI
    e89c:	f383 8811 	msr	BASEPRI, r3
    e8a0:	f3bf 8f6f 	isb	sy
	ref = ++clk_data->ref;
    e8a4:	230c      	movs	r3, #12
    e8a6:	fb03 8306 	mla	r3, r3, r6, r8
    e8aa:	7a1d      	ldrb	r5, [r3, #8]
    e8ac:	3501      	adds	r5, #1
    e8ae:	b2ed      	uxtb	r5, r5
    e8b0:	721d      	strb	r5, [r3, #8]
	__ASSERT_NO_MSG(clk_data->ref > 0);
    e8b2:	b95d      	cbnz	r5, e8cc <clock_async_start+0x68>
    e8b4:	493b      	ldr	r1, [pc, #236]	; (e9a4 <clock_async_start+0x140>)
    e8b6:	4839      	ldr	r0, [pc, #228]	; (e99c <clock_async_start+0x138>)
    e8b8:	f44f 7387 	mov.w	r3, #270	; 0x10e
    e8bc:	4a38      	ldr	r2, [pc, #224]	; (e9a0 <clock_async_start+0x13c>)
    e8be:	f011 fa8c 	bl	1fdda <printk>
    e8c2:	f44f 7187 	mov.w	r1, #270	; 0x10e
    e8c6:	4836      	ldr	r0, [pc, #216]	; (e9a0 <clock_async_start+0x13c>)
    e8c8:	f011 facd 	bl	1fe66 <assert_post_action>
	__asm__ volatile(
    e8cc:	f38a 8811 	msr	BASEPRI, sl
    e8d0:	f3bf 8f6f 	isb	sy
	if (data) {
    e8d4:	b32c      	cbz	r4, e922 <clock_async_start+0xbe>
    p_reg->INTENCLR = mask;
    e8d6:	2203      	movs	r2, #3
    e8d8:	4b33      	ldr	r3, [pc, #204]	; (e9a8 <clock_async_start+0x144>)
    e8da:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
		already_started = clk_data->started;
    e8de:	220c      	movs	r2, #12
    e8e0:	4372      	muls	r2, r6
    e8e2:	eb08 0302 	add.w	r3, r8, r2
    e8e6:	7a59      	ldrb	r1, [r3, #9]
		if (!already_started) {
    e8e8:	b991      	cbnz	r1, e910 <clock_async_start+0xac>
	__asm__ volatile(
    e8ea:	f04f 0020 	mov.w	r0, #32
    e8ee:	f3ef 8c11 	mrs	ip, BASEPRI
    e8f2:	f380 8811 	msr	BASEPRI, r0
    e8f6:	f3bf 8f6f 	isb	sy
	return node->next;
}

static inline void z_snode_next_set(sys_snode_t *parent, sys_snode_t *child)
{
	parent->next = child;
    e8fa:	6021      	str	r1, [r4, #0]
 * @param node A pointer on the node to append
 */
static inline void sys_slist_append(sys_slist_t *list,
				    sys_snode_t *node);

Z_GENLIST_APPEND(slist, snode)
    e8fc:	6858      	ldr	r0, [r3, #4]
    e8fe:	2800      	cmp	r0, #0
    e900:	d13a      	bne.n	e978 <clock_async_start+0x114>
	list->tail = node;
    e902:	605c      	str	r4, [r3, #4]
	list->head = node;
    e904:	f848 4002 	str.w	r4, [r8, r2]
	__asm__ volatile(
    e908:	f38c 8811 	msr	BASEPRI, ip
    e90c:	f3bf 8f6f 	isb	sy
    p_reg->INTENSET = mask;
    e910:	2203      	movs	r2, #3
    e912:	4b25      	ldr	r3, [pc, #148]	; (e9a8 <clock_async_start+0x144>)
    e914:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
		if (already_started) {
    e918:	b119      	cbz	r1, e922 <clock_async_start+0xbe>
			data->cb(dev, data->user_data);
    e91a:	e9d4 3101 	ldrd	r3, r1, [r4, #4]
    e91e:	4638      	mov	r0, r7
    e920:	4798      	blx	r3
	if (ref == 1) {
    e922:	2d01      	cmp	r5, #1
    e924:	d10c      	bne.n	e940 <clock_async_start+0xdc>
		do_start =  (config->start_handler) ?
    e926:	0135      	lsls	r5, r6, #4
    e928:	f859 3005 	ldr.w	r3, [r9, r5]
				config->start_handler(dev) : true;
    e92c:	bb3b      	cbnz	r3, e97e <clock_async_start+0x11a>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    e92e:	2201      	movs	r2, #1
			nrf_clock_task_trigger(NRF_CLOCK,
    e930:	44a9      	add	r9, r5
    e932:	f899 300a 	ldrb.w	r3, [r9, #10]
    e936:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    e93a:	f503 43a0 	add.w	r3, r3, #20480	; 0x5000
    e93e:	601a      	str	r2, [r3, #0]
	return 0;
    e940:	2000      	movs	r0, #0
    e942:	e027      	b.n	e994 <clock_async_start+0x130>
	__ASSERT_NO_MSG((data == NULL) ||
    e944:	6863      	ldr	r3, [r4, #4]
    e946:	b95b      	cbnz	r3, e960 <clock_async_start+0xfc>
    e948:	4918      	ldr	r1, [pc, #96]	; (e9ac <clock_async_start+0x148>)
    e94a:	4814      	ldr	r0, [pc, #80]	; (e99c <clock_async_start+0x138>)
    e94c:	f44f 7381 	mov.w	r3, #258	; 0x102
    e950:	4a13      	ldr	r2, [pc, #76]	; (e9a0 <clock_async_start+0x13c>)
    e952:	f011 fa42 	bl	1fdda <printk>
    e956:	f44f 7181 	mov.w	r1, #258	; 0x102
    e95a:	4811      	ldr	r0, [pc, #68]	; (e9a0 <clock_async_start+0x13c>)
    e95c:	f011 fa83 	bl	1fe66 <assert_post_action>
	sys_snode_t *item = sys_slist_peek_head(list);
    e960:	230c      	movs	r3, #12
    e962:	4373      	muls	r3, r6
    e964:	f858 3003 	ldr.w	r3, [r8, r3]
		if (item == node) {
    e968:	429c      	cmp	r4, r3
    e96a:	d011      	beq.n	e990 <clock_async_start+0x12c>
Z_GENLIST_PEEK_NEXT(slist, snode)
    e96c:	2b00      	cmp	r3, #0
    e96e:	d091      	beq.n	e894 <clock_async_start+0x30>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
    e970:	681b      	ldr	r3, [r3, #0]
	} while (item);
    e972:	2b00      	cmp	r3, #0
    e974:	d1f8      	bne.n	e968 <clock_async_start+0x104>
    e976:	e78d      	b.n	e894 <clock_async_start+0x30>
	parent->next = child;
    e978:	6004      	str	r4, [r0, #0]
	list->tail = node;
    e97a:	605c      	str	r4, [r3, #4]
    e97c:	e7c4      	b.n	e908 <clock_async_start+0xa4>
				config->start_handler(dev) : true;
    e97e:	4638      	mov	r0, r7
    e980:	4798      	blx	r3
    e982:	2800      	cmp	r0, #0
    e984:	d1d3      	bne.n	e92e <clock_async_start+0xca>
			clkstarted_handle(dev, type);
    e986:	4631      	mov	r1, r6
    e988:	4638      	mov	r0, r7
    e98a:	f011 facb 	bl	1ff24 <clkstarted_handle>
    e98e:	e7d7      	b.n	e940 <clock_async_start+0xdc>
		return -EBUSY;
    e990:	f06f 000f 	mvn.w	r0, #15
}
    e994:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    e998:	000237d2 	.word	0x000237d2
    e99c:	00023451 	.word	0x00023451
    e9a0:	00023797 	.word	0x00023797
    e9a4:	00023785 	.word	0x00023785
    e9a8:	40005000 	.word	0x40005000
    e9ac:	00023737 	.word	0x00023737

0000e9b0 <clock_stop>:
{
    e9b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	__ASSERT_NO_MSG(type < CLOCK_CONTROL_NRF_TYPE_COUNT);
    e9b4:	b2cd      	uxtb	r5, r1
    e9b6:	2d01      	cmp	r5, #1
{
    e9b8:	4680      	mov	r8, r0
	__ASSERT_NO_MSG(type < CLOCK_CONTROL_NRF_TYPE_COUNT);
    e9ba:	d909      	bls.n	e9d0 <clock_stop+0x20>
    e9bc:	4925      	ldr	r1, [pc, #148]	; (ea54 <clock_stop+0xa4>)
    e9be:	4826      	ldr	r0, [pc, #152]	; (ea58 <clock_stop+0xa8>)
    e9c0:	2399      	movs	r3, #153	; 0x99
    e9c2:	4a26      	ldr	r2, [pc, #152]	; (ea5c <clock_stop+0xac>)
    e9c4:	f011 fa09 	bl	1fdda <printk>
    e9c8:	2199      	movs	r1, #153	; 0x99
    e9ca:	4824      	ldr	r0, [pc, #144]	; (ea5c <clock_stop+0xac>)
    e9cc:	f011 fa4b 	bl	1fe66 <assert_post_action>
	const struct nrf_clock_control_config *config =
    e9d0:	f8d8 3000 	ldr.w	r3, [r8]
	data = get_sub_data(dev, type);
    e9d4:	f8d8 7008 	ldr.w	r7, [r8, #8]
	const struct nrf_clock_control_config *config =
    e9d8:	f8d3 9008 	ldr.w	r9, [r3, #8]
	__asm__ volatile(
    e9dc:	f04f 0320 	mov.w	r3, #32
    e9e0:	f3ef 8611 	mrs	r6, BASEPRI
    e9e4:	f383 8811 	msr	BASEPRI, r3
    e9e8:	f3bf 8f6f 	isb	sy
	if (data->ref == 0) {
    e9ec:	220c      	movs	r2, #12
    e9ee:	436a      	muls	r2, r5
    e9f0:	18b9      	adds	r1, r7, r2
    e9f2:	7a0b      	ldrb	r3, [r1, #8]
    e9f4:	b34b      	cbz	r3, ea4a <clock_stop+0x9a>
	data->ref--;
    e9f6:	3b01      	subs	r3, #1
    e9f8:	b2db      	uxtb	r3, r3
    e9fa:	720b      	strb	r3, [r1, #8]
	if (data->ref == 0) {
    e9fc:	bb43      	cbnz	r3, ea50 <clock_stop+0xa0>
		do_stop =  (config->stop_handler) ?
    e9fe:	012c      	lsls	r4, r5, #4
	list->head = NULL;
    ea00:	50bb      	str	r3, [r7, r2]
	list->tail = NULL;
    ea02:	604b      	str	r3, [r1, #4]
    ea04:	eb09 0304 	add.w	r3, r9, r4
    ea08:	685b      	ldr	r3, [r3, #4]
				config->stop_handler(dev) : true;
    ea0a:	b9cb      	cbnz	r3, ea40 <clock_stop+0x90>
    ea0c:	2201      	movs	r2, #1
			nrf_clock_task_trigger(NRF_CLOCK, config->stop_tsk);
    ea0e:	444c      	add	r4, r9
    ea10:	7ae3      	ldrb	r3, [r4, #11]
    ea12:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    ea16:	f503 43a0 	add.w	r3, r3, #20480	; 0x5000
    ea1a:	601a      	str	r2, [r3, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    ea1c:	2200      	movs	r2, #0
    ea1e:	8923      	ldrh	r3, [r4, #8]
    ea20:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    ea24:	f503 43a0 	add.w	r3, r3, #20480	; 0x5000
    ea28:	601a      	str	r2, [r3, #0]
		data->started = false;
    ea2a:	230c      	movs	r3, #12
    ea2c:	2000      	movs	r0, #0
    ea2e:	fb05 7503 	mla	r5, r5, r3, r7
    ea32:	7268      	strb	r0, [r5, #9]
	__asm__ volatile(
    ea34:	f386 8811 	msr	BASEPRI, r6
    ea38:	f3bf 8f6f 	isb	sy
}
    ea3c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				config->stop_handler(dev) : true;
    ea40:	4640      	mov	r0, r8
    ea42:	4798      	blx	r3
    ea44:	2800      	cmp	r0, #0
    ea46:	d1e1      	bne.n	ea0c <clock_stop+0x5c>
    ea48:	e7ef      	b.n	ea2a <clock_stop+0x7a>
		err = -EALREADY;
    ea4a:	f06f 0077 	mvn.w	r0, #119	; 0x77
    ea4e:	e7f1      	b.n	ea34 <clock_stop+0x84>
	int err = 0;
    ea50:	2000      	movs	r0, #0
    ea52:	e7ef      	b.n	ea34 <clock_stop+0x84>
    ea54:	000237d2 	.word	0x000237d2
    ea58:	00023451 	.word	0x00023451
    ea5c:	00023797 	.word	0x00023797

0000ea60 <nrf_power_clock_isr>:
	}
#endif
}

void nrf_power_clock_isr(void *arg)
{
    ea60:	b508      	push	{r3, lr}
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    ea62:	4b10      	ldr	r3, [pc, #64]	; (eaa4 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x44>)
    ea64:	681a      	ldr	r2, [r3, #0]
	bool ret = nrf_clock_event_check(NRF_CLOCK, evt) &&
    ea66:	b162      	cbz	r2, ea82 <nrf_power_clock_isr+0x22>
    return p_reg->INTENSET & mask;
    ea68:	4a0f      	ldr	r2, [pc, #60]	; (eaa8 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x48>)
    ea6a:	f8d2 2304 	ldr.w	r2, [r2, #772]	; 0x304
	if (ret) {
    ea6e:	07d1      	lsls	r1, r2, #31
    ea70:	d507      	bpl.n	ea82 <nrf_power_clock_isr+0x22>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    ea72:	2200      	movs	r2, #0
	struct device *dev = DEVICE_GET(clock_nrf);

	if (clock_event_check_and_clean(NRF_CLOCK_EVENT_HFCLKSTARTED,
					NRF_CLOCK_INT_HF_STARTED_MASK)) {
		struct nrf_clock_control_sub_data *data =
				get_sub_data(dev, CLOCK_CONTROL_NRF_TYPE_HFCLK);
    ea74:	480d      	ldr	r0, [pc, #52]	; (eaac <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x4c>)
    ea76:	601a      	str	r2, [r3, #0]

		/* Check needed due to anomaly 201:
		 * HFCLKSTARTED may be generated twice.
		 */
		if (!data->started) {
    ea78:	6883      	ldr	r3, [r0, #8]
    ea7a:	7a59      	ldrb	r1, [r3, #9]
    ea7c:	b909      	cbnz	r1, ea82 <nrf_power_clock_isr+0x22>
			clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_HFCLK);
    ea7e:	f011 fa51 	bl	1ff24 <clkstarted_handle>
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    ea82:	4b0b      	ldr	r3, [pc, #44]	; (eab0 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x50>)
    ea84:	681a      	ldr	r2, [r3, #0]
	bool ret = nrf_clock_event_check(NRF_CLOCK, evt) &&
    ea86:	b162      	cbz	r2, eaa2 <nrf_power_clock_isr+0x42>
    return p_reg->INTENSET & mask;
    ea88:	4a07      	ldr	r2, [pc, #28]	; (eaa8 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x48>)
    ea8a:	f8d2 2304 	ldr.w	r2, [r2, #772]	; 0x304
	if (ret) {
    ea8e:	0792      	lsls	r2, r2, #30
    ea90:	d507      	bpl.n	eaa2 <nrf_power_clock_isr+0x42>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    ea92:	2200      	movs	r2, #0
					NRF_CLOCK_INT_LF_STARTED_MASK)) {
		if (IS_ENABLED(
			CONFIG_CLOCK_CONTROL_NRF_K32SRC_RC_CALIBRATION)) {
			z_nrf_clock_calibration_lfclk_started(dev);
		}
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_LFCLK);
    ea94:	2101      	movs	r1, #1
    ea96:	601a      	str	r2, [r3, #0]
    ea98:	4804      	ldr	r0, [pc, #16]	; (eaac <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x4c>)
	usb_power_isr();

	if (IS_ENABLED(CONFIG_CLOCK_CONTROL_NRF_K32SRC_RC_CALIBRATION)) {
		z_nrf_clock_calibration_isr();
	}
}
    ea9a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_LFCLK);
    ea9e:	f011 ba41 	b.w	1ff24 <clkstarted_handle>
}
    eaa2:	bd08      	pop	{r3, pc}
    eaa4:	40005100 	.word	0x40005100
    eaa8:	40005000 	.word	0x40005000
    eaac:	200262b0 	.word	0x200262b0
    eab0:	40005104 	.word	0x40005104

0000eab4 <z_clock_isr>:
#include <drivers/timer/system_timer.h>

/* Weak-linked noop defaults for optional driver interfaces: */

void __weak z_clock_isr(void *arg)
{
    eab4:	b510      	push	{r4, lr}
	__ASSERT_NO_MSG(false);
    eab6:	4c06      	ldr	r4, [pc, #24]	; (ead0 <z_clock_isr+0x1c>)
    eab8:	4906      	ldr	r1, [pc, #24]	; (ead4 <z_clock_isr+0x20>)
    eaba:	4622      	mov	r2, r4
    eabc:	4806      	ldr	r0, [pc, #24]	; (ead8 <z_clock_isr+0x24>)
    eabe:	2317      	movs	r3, #23
    eac0:	f011 f98b 	bl	1fdda <printk>
    eac4:	4620      	mov	r0, r4
}
    eac6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	__ASSERT_NO_MSG(false);
    eaca:	2117      	movs	r1, #23
    eacc:	f011 b9cb 	b.w	1fe66 <assert_post_action>
    ead0:	00023820 	.word	0x00023820
    ead4:	000251cf 	.word	0x000251cf
    ead8:	00023451 	.word	0x00023451

0000eadc <rtc1_nrf_isr>:
 * symbol.
 */
void rtc1_nrf_isr(void *arg)
{
	ARG_UNUSED(arg);
	RTC->EVENTS_COMPARE[0] = 0;
    eadc:	2200      	movs	r2, #0
{
    eade:	b538      	push	{r3, r4, r5, lr}
	RTC->EVENTS_COMPARE[0] = 0;
    eae0:	4b22      	ldr	r3, [pc, #136]	; (eb6c <rtc1_nrf_isr+0x90>)
    eae2:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
	__asm__ volatile(
    eae6:	f04f 0320 	mov.w	r3, #32
    eaea:	f3ef 8511 	mrs	r5, BASEPRI
    eaee:	f383 8811 	msr	BASEPRI, r3
    eaf2:	f3bf 8f6f 	isb	sy
	 * actually a wrapper for a global spinlock!
	 */
	k.key = arch_irq_lock();

#ifdef CONFIG_SPIN_VALIDATE
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    eaf6:	481e      	ldr	r0, [pc, #120]	; (eb70 <rtc1_nrf_isr+0x94>)
    eaf8:	f00e fbba 	bl	1d270 <z_spin_lock_valid>
    eafc:	b968      	cbnz	r0, eb1a <rtc1_nrf_isr+0x3e>
    eafe:	234a      	movs	r3, #74	; 0x4a
    eb00:	4a1c      	ldr	r2, [pc, #112]	; (eb74 <rtc1_nrf_isr+0x98>)
    eb02:	491d      	ldr	r1, [pc, #116]	; (eb78 <rtc1_nrf_isr+0x9c>)
    eb04:	481d      	ldr	r0, [pc, #116]	; (eb7c <rtc1_nrf_isr+0xa0>)
    eb06:	f011 f968 	bl	1fdda <printk>
    eb0a:	4919      	ldr	r1, [pc, #100]	; (eb70 <rtc1_nrf_isr+0x94>)
    eb0c:	481c      	ldr	r0, [pc, #112]	; (eb80 <rtc1_nrf_isr+0xa4>)
    eb0e:	f011 f964 	bl	1fdda <printk>
    eb12:	214a      	movs	r1, #74	; 0x4a
    eb14:	4817      	ldr	r0, [pc, #92]	; (eb74 <rtc1_nrf_isr+0x98>)
    eb16:	f011 f9a6 	bl	1fe66 <assert_post_action>
	while (!atomic_cas(&l->locked, 0, 1)) {
	}
#endif

#ifdef CONFIG_SPIN_VALIDATE
	z_spin_lock_set_owner(l);
    eb1a:	4815      	ldr	r0, [pc, #84]	; (eb70 <rtc1_nrf_isr+0x94>)
    eb1c:	f00e fbc6 	bl	1d2ac <z_spin_lock_set_owner>
#endif
}

NRF_STATIC_INLINE uint32_t nrf_rtc_counter_get(NRF_RTC_Type const * p_reg)
{
     return p_reg->COUNTER;
    eb20:	4b12      	ldr	r3, [pc, #72]	; (eb6c <rtc1_nrf_isr+0x90>)

	k_spinlock_key_t key = k_spin_lock(&lock);
	u32_t t = counter();
	u32_t dticks = counter_sub(t, last_count) / CYC_PER_TICK;
    eb22:	4a18      	ldr	r2, [pc, #96]	; (eb84 <rtc1_nrf_isr+0xa8>)
    eb24:	f8d3 4504 	ldr.w	r4, [r3, #1284]	; 0x504
    eb28:	6813      	ldr	r3, [r2, #0]
static ALWAYS_INLINE void k_spin_unlock(struct k_spinlock *l,
					k_spinlock_key_t key)
{
	ARG_UNUSED(l);
#ifdef CONFIG_SPIN_VALIDATE
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    eb2a:	4811      	ldr	r0, [pc, #68]	; (eb70 <rtc1_nrf_isr+0x94>)
	return (a - b) & COUNTER_MAX;
    eb2c:	1ae4      	subs	r4, r4, r3
    eb2e:	f024 447f 	bic.w	r4, r4, #4278190080	; 0xff000000

	last_count += dticks * CYC_PER_TICK;
    eb32:	4423      	add	r3, r4
    eb34:	6013      	str	r3, [r2, #0]
    eb36:	f00e fba9 	bl	1d28c <z_spin_unlock_valid>
    eb3a:	b968      	cbnz	r0, eb58 <rtc1_nrf_isr+0x7c>
    eb3c:	235d      	movs	r3, #93	; 0x5d
    eb3e:	4a0d      	ldr	r2, [pc, #52]	; (eb74 <rtc1_nrf_isr+0x98>)
    eb40:	4911      	ldr	r1, [pc, #68]	; (eb88 <rtc1_nrf_isr+0xac>)
    eb42:	480e      	ldr	r0, [pc, #56]	; (eb7c <rtc1_nrf_isr+0xa0>)
    eb44:	f011 f949 	bl	1fdda <printk>
    eb48:	4909      	ldr	r1, [pc, #36]	; (eb70 <rtc1_nrf_isr+0x94>)
    eb4a:	4810      	ldr	r0, [pc, #64]	; (eb8c <rtc1_nrf_isr+0xb0>)
    eb4c:	f011 f945 	bl	1fdda <printk>
    eb50:	215d      	movs	r1, #93	; 0x5d
    eb52:	4808      	ldr	r0, [pc, #32]	; (eb74 <rtc1_nrf_isr+0x98>)
    eb54:	f011 f987 	bl	1fe66 <assert_post_action>
	__asm__ volatile(
    eb58:	f385 8811 	msr	BASEPRI, r5
    eb5c:	f3bf 8f6f 	isb	sy
		}
		set_comparator(next);
	}

	k_spin_unlock(&lock, key);
	z_clock_announce(IS_ENABLED(CONFIG_TICKLESS_KERNEL) ? dticks : 1);
    eb60:	4620      	mov	r0, r4
}
    eb62:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_clock_announce(IS_ENABLED(CONFIG_TICKLESS_KERNEL) ? dticks : 1);
    eb66:	f00e bf1d 	b.w	1d9a4 <z_clock_announce>
    eb6a:	bf00      	nop
    eb6c:	40015000 	.word	0x40015000
    eb70:	200200c8 	.word	0x200200c8
    eb74:	00023852 	.word	0x00023852
    eb78:	00023878 	.word	0x00023878
    eb7c:	00023451 	.word	0x00023451
    eb80:	0002388d 	.word	0x0002388d
    eb84:	200200c4 	.word	0x200200c4
    eb88:	000238a5 	.word	0x000238a5
    eb8c:	000238bc 	.word	0x000238bc

0000eb90 <z_clock_driver_init>:

int z_clock_driver_init(struct device *device)
{
    eb90:	b570      	push	{r4, r5, r6, lr}
    eb92:	4815      	ldr	r0, [pc, #84]	; (ebe8 <z_clock_driver_init+0x58>)
    eb94:	f00c f970 	bl	1ae78 <z_impl_device_get_binding>
	struct device *clock;

	ARG_UNUSED(device);

	clock = device_get_binding(DT_INST_0_NORDIC_NRF_CLOCK_LABEL);
	if (!clock) {
    eb98:	b310      	cbz	r0, ebe0 <z_clock_driver_init+0x50>
				   clock_control_subsys_t sys)
{
	const struct clock_control_driver_api *api =
		(const struct clock_control_driver_api *)dev->driver_api;

	return api->on(dev, sys);
    eb9a:	6843      	ldr	r3, [r0, #4]
    eb9c:	2101      	movs	r1, #1
    eb9e:	681b      	ldr	r3, [r3, #0]
    eba0:	4798      	blx	r3
}

NRF_STATIC_INLINE void nrf_rtc_prescaler_set(NRF_RTC_Type * p_reg, uint32_t val)
{
    NRFX_ASSERT(val <= (RTC_PRESCALER_PRESCALER_Msk >> RTC_PRESCALER_PRESCALER_Pos));
    p_reg->PRESCALER = val;
    eba2:	2400      	movs	r4, #0
    p_reg->CC[ch] = cc_val;
    eba4:	2601      	movs	r6, #1
    p_reg->INTENSET = mask;
    eba6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    ebaa:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
    p_reg->PRESCALER = val;
    ebae:	4d0f      	ldr	r5, [pc, #60]	; (ebec <z_clock_driver_init+0x5c>)

	/* Clear the event flag and possible pending interrupt */
	nrf_rtc_event_clear(RTC, NRF_RTC_EVENT_COMPARE_0);
	NVIC_ClearPendingIRQ(RTC1_IRQn);

	IRQ_CONNECT(RTC1_IRQn, 1, rtc1_nrf_isr, 0, 0);
    ebb0:	4631      	mov	r1, r6
    ebb2:	f8c5 4508 	str.w	r4, [r5, #1288]	; 0x508
    p_reg->CC[ch] = cc_val;
    ebb6:	f8c5 6540 	str.w	r6, [r5, #1344]	; 0x540
    p_reg->INTENSET = mask;
    ebba:	f8c5 3304 	str.w	r3, [r5, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    ebbe:	4b0c      	ldr	r3, [pc, #48]	; (ebf0 <z_clock_driver_init+0x60>)
    ebc0:	2015      	movs	r0, #21
    ebc2:	601c      	str	r4, [r3, #0]
    ebc4:	4b0b      	ldr	r3, [pc, #44]	; (ebf4 <z_clock_driver_init+0x64>)
    ebc6:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    ebca:	4622      	mov	r2, r4
    ebcc:	f000 fa20 	bl	f010 <z_arm_irq_priority_set>
	irq_enable(RTC1_IRQn);
    ebd0:	2015      	movs	r0, #21
    ebd2:	f000 fa0d 	bl	eff0 <arch_irq_enable>

	if (!IS_ENABLED(CONFIG_TICKLESS_KERNEL)) {
		set_comparator(counter() + CYC_PER_TICK);
	}

	return 0;
    ebd6:	4620      	mov	r0, r4
    return (uint32_t)p_reg + task;
}

NRF_STATIC_INLINE void nrf_rtc_task_trigger(NRF_RTC_Type * p_reg, nrf_rtc_task_t task)
{
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
    ebd8:	4b07      	ldr	r3, [pc, #28]	; (ebf8 <z_clock_driver_init+0x68>)
    ebda:	601e      	str	r6, [r3, #0]
    ebdc:	602e      	str	r6, [r5, #0]
}
    ebde:	bd70      	pop	{r4, r5, r6, pc}
		return -1;
    ebe0:	f04f 30ff 	mov.w	r0, #4294967295
    ebe4:	e7fb      	b.n	ebde <z_clock_driver_init+0x4e>
    ebe6:	bf00      	nop
    ebe8:	000237f6 	.word	0x000237f6
    ebec:	40015000 	.word	0x40015000
    ebf0:	40015140 	.word	0x40015140
    ebf4:	e000e100 	.word	0xe000e100
    ebf8:	40015008 	.word	0x40015008

0000ebfc <z_clock_set_timeout>:

void z_clock_set_timeout(s32_t ticks, bool idle)
{
    ebfc:	b570      	push	{r4, r5, r6, lr}
	ARG_UNUSED(idle);

#ifdef CONFIG_TICKLESS_KERNEL
	ticks = (ticks == K_FOREVER) ? MAX_TICKS : ticks;
    ebfe:	4c3a      	ldr	r4, [pc, #232]	; (ece8 <z_clock_set_timeout+0xec>)
    ec00:	f1b0 3fff 	cmp.w	r0, #4294967295
    ec04:	bf18      	it	ne
    ec06:	4604      	movne	r4, r0
	__asm__ volatile(
    ec08:	f04f 0320 	mov.w	r3, #32
    ec0c:	f3ef 8511 	mrs	r5, BASEPRI
    ec10:	f383 8811 	msr	BASEPRI, r3
    ec14:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    ec18:	4834      	ldr	r0, [pc, #208]	; (ecec <z_clock_set_timeout+0xf0>)
    ec1a:	f00e fb29 	bl	1d270 <z_spin_lock_valid>
    ec1e:	b968      	cbnz	r0, ec3c <z_clock_set_timeout+0x40>
    ec20:	234a      	movs	r3, #74	; 0x4a
    ec22:	4a33      	ldr	r2, [pc, #204]	; (ecf0 <z_clock_set_timeout+0xf4>)
    ec24:	4933      	ldr	r1, [pc, #204]	; (ecf4 <z_clock_set_timeout+0xf8>)
    ec26:	4834      	ldr	r0, [pc, #208]	; (ecf8 <z_clock_set_timeout+0xfc>)
    ec28:	f011 f8d7 	bl	1fdda <printk>
    ec2c:	492f      	ldr	r1, [pc, #188]	; (ecec <z_clock_set_timeout+0xf0>)
    ec2e:	4833      	ldr	r0, [pc, #204]	; (ecfc <z_clock_set_timeout+0x100>)
    ec30:	f011 f8d3 	bl	1fdda <printk>
    ec34:	214a      	movs	r1, #74	; 0x4a
    ec36:	482e      	ldr	r0, [pc, #184]	; (ecf0 <z_clock_set_timeout+0xf4>)
    ec38:	f011 f915 	bl	1fe66 <assert_post_action>
	z_spin_lock_set_owner(l);
    ec3c:	482b      	ldr	r0, [pc, #172]	; (ecec <z_clock_set_timeout+0xf0>)
    ec3e:	f00e fb35 	bl	1d2ac <z_spin_lock_set_owner>
     return p_reg->COUNTER;
    ec42:	4b2f      	ldr	r3, [pc, #188]	; (ed00 <z_clock_set_timeout+0x104>)
    ec44:	4e28      	ldr	r6, [pc, #160]	; (ece8 <z_clock_set_timeout+0xec>)
    ec46:	f8d3 2504 	ldr.w	r2, [r3, #1284]	; 0x504
	ticks = MAX(MIN(ticks - 1, (s32_t)MAX_TICKS), 0);

	k_spinlock_key_t key = k_spin_lock(&lock);
	u32_t cyc, dt, t = counter();
	u32_t unannounced = counter_sub(t, last_count);
    ec4a:	4b2e      	ldr	r3, [pc, #184]	; (ed04 <z_clock_set_timeout+0x108>)
    ec4c:	681b      	ldr	r3, [r3, #0]
	return (a - b) & COUNTER_MAX;
    ec4e:	1ad0      	subs	r0, r2, r3
	/* If we haven't announced for more than half the 24-bit wrap
	 * duration, then force an announce to avoid loss of a wrap
	 * event.  This can happen if new timeouts keep being set
	 * before the existing one triggers the interrupt.
	 */
	if (unannounced >= COUNTER_HALF_SPAN) {
    ec50:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
	return (a - b) & COUNTER_MAX;
    ec54:	f020 417f 	bic.w	r1, r0, #4278190080	; 0xff000000
	if (unannounced >= COUNTER_HALF_SPAN) {
    ec58:	d12c      	bne.n	ecb4 <z_clock_set_timeout+0xb8>
	ticks = MAX(MIN(ticks - 1, (s32_t)MAX_TICKS), 0);
    ec5a:	1e60      	subs	r0, r4, #1
    ec5c:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
    ec60:	42b0      	cmp	r0, r6
    ec62:	bfa8      	it	ge
    ec64:	4630      	movge	r0, r6
	}

	/* Get the cycles from last_count to the tick boundary after
	 * the requested ticks have passed starting now.
	 */
	cyc = ticks * CYC_PER_TICK + 1 + unannounced;
    ec66:	3101      	adds	r1, #1
    ec68:	4408      	add	r0, r1
	 */
	if (cyc > MAX_CYCLES) {
		cyc = MAX_CYCLES;
	}

	cyc += last_count;
    ec6a:	42b0      	cmp	r0, r6
    ec6c:	bf94      	ite	ls
    ec6e:	181b      	addls	r3, r3, r0
    ec70:	199b      	addhi	r3, r3, r6
	return (a - b) & COUNTER_MAX;
    ec72:	1a9a      	subs	r2, r3, r2
    ec74:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
    ec78:	4921      	ldr	r1, [pc, #132]	; (ed00 <z_clock_set_timeout+0x104>)
    ec7a:	f023 407f 	bic.w	r0, r3, #4278190080	; 0xff000000
	 * least on nRF52.  Some experimentation on nrf52840 shows
	 * that you need to be early by about 400 processor cycles
	 * (about 1/5th of a RTC cycle) in order to reliably get the
	 * interrupt.  The docs say two cycles, they mean two cycles.
	 */
	if (counter_sub(cyc, t) > 2) {
    ec7e:	2a02      	cmp	r2, #2
    p_reg->CC[ch] = cc_val;
    ec80:	f8c1 0540 	str.w	r0, [r1, #1344]	; 0x540
    ec84:	d918      	bls.n	ecb8 <z_clock_set_timeout+0xbc>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    ec86:	4819      	ldr	r0, [pc, #100]	; (ecec <z_clock_set_timeout+0xf0>)
    ec88:	f00e fb00 	bl	1d28c <z_spin_unlock_valid>
    ec8c:	b968      	cbnz	r0, ecaa <z_clock_set_timeout+0xae>
    ec8e:	235d      	movs	r3, #93	; 0x5d
    ec90:	4a17      	ldr	r2, [pc, #92]	; (ecf0 <z_clock_set_timeout+0xf4>)
    ec92:	491d      	ldr	r1, [pc, #116]	; (ed08 <z_clock_set_timeout+0x10c>)
    ec94:	4818      	ldr	r0, [pc, #96]	; (ecf8 <z_clock_set_timeout+0xfc>)
    ec96:	f011 f8a0 	bl	1fdda <printk>
    ec9a:	4914      	ldr	r1, [pc, #80]	; (ecec <z_clock_set_timeout+0xf0>)
    ec9c:	481b      	ldr	r0, [pc, #108]	; (ed0c <z_clock_set_timeout+0x110>)
    ec9e:	f011 f89c 	bl	1fdda <printk>
    eca2:	215d      	movs	r1, #93	; 0x5d
    eca4:	4812      	ldr	r0, [pc, #72]	; (ecf0 <z_clock_set_timeout+0xf4>)
    eca6:	f011 f8de 	bl	1fe66 <assert_post_action>
	__asm__ volatile(
    ecaa:	f385 8811 	msr	BASEPRI, r5
    ecae:	f3bf 8f6f 	isb	sy
	}
#endif

	k_spin_unlock(&lock, key);
#endif /* CONFIG_TICKLESS_KERNEL */
}
    ecb2:	bd70      	pop	{r4, r5, r6, pc}
		ticks = 0;
    ecb4:	2000      	movs	r0, #0
    ecb6:	e7d6      	b.n	ec66 <z_clock_set_timeout+0x6a>
     return p_reg->COUNTER;
    ecb8:	f8d1 2504 	ldr.w	r2, [r1, #1284]	; 0x504
		if (dt == 0 || dt > 0x7fffff) {
    ecbc:	4814      	ldr	r0, [pc, #80]	; (ed10 <z_clock_set_timeout+0x114>)
	return (a - b) & COUNTER_MAX;
    ecbe:	1a9a      	subs	r2, r3, r2
    ecc0:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
		if (dt == 0 || dt > 0x7fffff) {
    ecc4:	1e54      	subs	r4, r2, #1
    ecc6:	4284      	cmp	r4, r0
    ecc8:	d905      	bls.n	ecd6 <z_clock_set_timeout+0xda>
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    ecca:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
    ecce:	4b11      	ldr	r3, [pc, #68]	; (ed14 <z_clock_set_timeout+0x118>)
    ecd0:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
    ecd4:	e7d7      	b.n	ec86 <z_clock_set_timeout+0x8a>
		} else if (dt == 1) {
    ecd6:	2a01      	cmp	r2, #1
			set_comparator(cyc + 2);
    ecd8:	bf02      	ittt	eq
    ecda:	3302      	addeq	r3, #2
	nrf_rtc_cc_set(RTC, 0, cyc & COUNTER_MAX);
    ecdc:	f023 437f 	biceq.w	r3, r3, #4278190080	; 0xff000000
    p_reg->CC[ch] = cc_val;
    ece0:	f8c1 3540 	streq.w	r3, [r1, #1344]	; 0x540
    ece4:	e7cf      	b.n	ec86 <z_clock_set_timeout+0x8a>
    ece6:	bf00      	nop
    ece8:	00fffffe 	.word	0x00fffffe
    ecec:	200200c8 	.word	0x200200c8
    ecf0:	00023852 	.word	0x00023852
    ecf4:	00023878 	.word	0x00023878
    ecf8:	00023451 	.word	0x00023451
    ecfc:	0002388d 	.word	0x0002388d
    ed00:	40015000 	.word	0x40015000
    ed04:	200200c4 	.word	0x200200c4
    ed08:	000238a5 	.word	0x000238a5
    ed0c:	000238bc 	.word	0x000238bc
    ed10:	007ffffe 	.word	0x007ffffe
    ed14:	e000e100 	.word	0xe000e100

0000ed18 <z_clock_elapsed>:

u32_t z_clock_elapsed(void)
{
    ed18:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
    ed1a:	f04f 0320 	mov.w	r3, #32
    ed1e:	f3ef 8511 	mrs	r5, BASEPRI
    ed22:	f383 8811 	msr	BASEPRI, r3
    ed26:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    ed2a:	481a      	ldr	r0, [pc, #104]	; (ed94 <z_clock_elapsed+0x7c>)
    ed2c:	f00e faa0 	bl	1d270 <z_spin_lock_valid>
    ed30:	b968      	cbnz	r0, ed4e <z_clock_elapsed+0x36>
    ed32:	234a      	movs	r3, #74	; 0x4a
    ed34:	4a18      	ldr	r2, [pc, #96]	; (ed98 <z_clock_elapsed+0x80>)
    ed36:	4919      	ldr	r1, [pc, #100]	; (ed9c <z_clock_elapsed+0x84>)
    ed38:	4819      	ldr	r0, [pc, #100]	; (eda0 <z_clock_elapsed+0x88>)
    ed3a:	f011 f84e 	bl	1fdda <printk>
    ed3e:	4915      	ldr	r1, [pc, #84]	; (ed94 <z_clock_elapsed+0x7c>)
    ed40:	4818      	ldr	r0, [pc, #96]	; (eda4 <z_clock_elapsed+0x8c>)
    ed42:	f011 f84a 	bl	1fdda <printk>
    ed46:	214a      	movs	r1, #74	; 0x4a
    ed48:	4813      	ldr	r0, [pc, #76]	; (ed98 <z_clock_elapsed+0x80>)
    ed4a:	f011 f88c 	bl	1fe66 <assert_post_action>
	z_spin_lock_set_owner(l);
    ed4e:	4811      	ldr	r0, [pc, #68]	; (ed94 <z_clock_elapsed+0x7c>)
    ed50:	f00e faac 	bl	1d2ac <z_spin_lock_set_owner>
     return p_reg->COUNTER;
    ed54:	4b14      	ldr	r3, [pc, #80]	; (eda8 <z_clock_elapsed+0x90>)
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    ed56:	480f      	ldr	r0, [pc, #60]	; (ed94 <z_clock_elapsed+0x7c>)
    ed58:	f8d3 4504 	ldr.w	r4, [r3, #1284]	; 0x504
	if (!IS_ENABLED(CONFIG_TICKLESS_KERNEL)) {
		return 0;
	}

	k_spinlock_key_t key = k_spin_lock(&lock);
	u32_t ret = counter_sub(counter(), last_count) / CYC_PER_TICK;
    ed5c:	4b13      	ldr	r3, [pc, #76]	; (edac <z_clock_elapsed+0x94>)
	return (a - b) & COUNTER_MAX;
    ed5e:	681b      	ldr	r3, [r3, #0]
    ed60:	1ae4      	subs	r4, r4, r3
    ed62:	f024 447f 	bic.w	r4, r4, #4278190080	; 0xff000000
    ed66:	f00e fa91 	bl	1d28c <z_spin_unlock_valid>
    ed6a:	b968      	cbnz	r0, ed88 <z_clock_elapsed+0x70>
    ed6c:	235d      	movs	r3, #93	; 0x5d
    ed6e:	4a0a      	ldr	r2, [pc, #40]	; (ed98 <z_clock_elapsed+0x80>)
    ed70:	490f      	ldr	r1, [pc, #60]	; (edb0 <z_clock_elapsed+0x98>)
    ed72:	480b      	ldr	r0, [pc, #44]	; (eda0 <z_clock_elapsed+0x88>)
    ed74:	f011 f831 	bl	1fdda <printk>
    ed78:	4906      	ldr	r1, [pc, #24]	; (ed94 <z_clock_elapsed+0x7c>)
    ed7a:	480e      	ldr	r0, [pc, #56]	; (edb4 <z_clock_elapsed+0x9c>)
    ed7c:	f011 f82d 	bl	1fdda <printk>
    ed80:	215d      	movs	r1, #93	; 0x5d
    ed82:	4805      	ldr	r0, [pc, #20]	; (ed98 <z_clock_elapsed+0x80>)
    ed84:	f011 f86f 	bl	1fe66 <assert_post_action>
	__asm__ volatile(
    ed88:	f385 8811 	msr	BASEPRI, r5
    ed8c:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&lock, key);
	return ret;
}
    ed90:	4620      	mov	r0, r4
    ed92:	bd38      	pop	{r3, r4, r5, pc}
    ed94:	200200c8 	.word	0x200200c8
    ed98:	00023852 	.word	0x00023852
    ed9c:	00023878 	.word	0x00023878
    eda0:	00023451 	.word	0x00023451
    eda4:	0002388d 	.word	0x0002388d
    eda8:	40015000 	.word	0x40015000
    edac:	200200c4 	.word	0x200200c4
    edb0:	000238a5 	.word	0x000238a5
    edb4:	000238bc 	.word	0x000238bc

0000edb8 <z_timer_cycle_get_32>:

u32_t z_timer_cycle_get_32(void)
{
    edb8:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
    edba:	f04f 0320 	mov.w	r3, #32
    edbe:	f3ef 8511 	mrs	r5, BASEPRI
    edc2:	f383 8811 	msr	BASEPRI, r3
    edc6:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    edca:	481b      	ldr	r0, [pc, #108]	; (ee38 <z_timer_cycle_get_32+0x80>)
    edcc:	f00e fa50 	bl	1d270 <z_spin_lock_valid>
    edd0:	b968      	cbnz	r0, edee <z_timer_cycle_get_32+0x36>
    edd2:	234a      	movs	r3, #74	; 0x4a
    edd4:	4a19      	ldr	r2, [pc, #100]	; (ee3c <z_timer_cycle_get_32+0x84>)
    edd6:	491a      	ldr	r1, [pc, #104]	; (ee40 <z_timer_cycle_get_32+0x88>)
    edd8:	481a      	ldr	r0, [pc, #104]	; (ee44 <z_timer_cycle_get_32+0x8c>)
    edda:	f010 fffe 	bl	1fdda <printk>
    edde:	4916      	ldr	r1, [pc, #88]	; (ee38 <z_timer_cycle_get_32+0x80>)
    ede0:	4819      	ldr	r0, [pc, #100]	; (ee48 <z_timer_cycle_get_32+0x90>)
    ede2:	f010 fffa 	bl	1fdda <printk>
    ede6:	214a      	movs	r1, #74	; 0x4a
    ede8:	4814      	ldr	r0, [pc, #80]	; (ee3c <z_timer_cycle_get_32+0x84>)
    edea:	f011 f83c 	bl	1fe66 <assert_post_action>
	z_spin_lock_set_owner(l);
    edee:	4812      	ldr	r0, [pc, #72]	; (ee38 <z_timer_cycle_get_32+0x80>)
    edf0:	f00e fa5c 	bl	1d2ac <z_spin_lock_set_owner>
    edf4:	4b15      	ldr	r3, [pc, #84]	; (ee4c <z_timer_cycle_get_32+0x94>)
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    edf6:	4810      	ldr	r0, [pc, #64]	; (ee38 <z_timer_cycle_get_32+0x80>)
    edf8:	f8d3 4504 	ldr.w	r4, [r3, #1284]	; 0x504
	k_spinlock_key_t key = k_spin_lock(&lock);
	u32_t ret = counter_sub(counter(), last_count) + last_count;
    edfc:	4b14      	ldr	r3, [pc, #80]	; (ee50 <z_timer_cycle_get_32+0x98>)
    edfe:	681b      	ldr	r3, [r3, #0]
	return (a - b) & COUNTER_MAX;
    ee00:	1ae4      	subs	r4, r4, r3
    ee02:	f024 447f 	bic.w	r4, r4, #4278190080	; 0xff000000
	u32_t ret = counter_sub(counter(), last_count) + last_count;
    ee06:	441c      	add	r4, r3
    ee08:	f00e fa40 	bl	1d28c <z_spin_unlock_valid>
    ee0c:	b968      	cbnz	r0, ee2a <z_timer_cycle_get_32+0x72>
    ee0e:	235d      	movs	r3, #93	; 0x5d
    ee10:	4a0a      	ldr	r2, [pc, #40]	; (ee3c <z_timer_cycle_get_32+0x84>)
    ee12:	4910      	ldr	r1, [pc, #64]	; (ee54 <z_timer_cycle_get_32+0x9c>)
    ee14:	480b      	ldr	r0, [pc, #44]	; (ee44 <z_timer_cycle_get_32+0x8c>)
    ee16:	f010 ffe0 	bl	1fdda <printk>
    ee1a:	4907      	ldr	r1, [pc, #28]	; (ee38 <z_timer_cycle_get_32+0x80>)
    ee1c:	480e      	ldr	r0, [pc, #56]	; (ee58 <z_timer_cycle_get_32+0xa0>)
    ee1e:	f010 ffdc 	bl	1fdda <printk>
    ee22:	215d      	movs	r1, #93	; 0x5d
    ee24:	4805      	ldr	r0, [pc, #20]	; (ee3c <z_timer_cycle_get_32+0x84>)
    ee26:	f011 f81e 	bl	1fe66 <assert_post_action>
	__asm__ volatile(
    ee2a:	f385 8811 	msr	BASEPRI, r5
    ee2e:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&lock, key);
	return ret;
}
    ee32:	4620      	mov	r0, r4
    ee34:	bd38      	pop	{r3, r4, r5, pc}
    ee36:	bf00      	nop
    ee38:	200200c8 	.word	0x200200c8
    ee3c:	00023852 	.word	0x00023852
    ee40:	00023878 	.word	0x00023878
    ee44:	00023451 	.word	0x00023451
    ee48:	0002388d 	.word	0x0002388d
    ee4c:	40015000 	.word	0x40015000
    ee50:	200200c4 	.word	0x200200c4
    ee54:	000238a5 	.word	0x000238a5
    ee58:	000238bc 	.word	0x000238bc

0000ee5c <z_arm_exc_exit>:
    /* r0 contains the caller mode */
    push {r0, lr}
#endif

#ifdef CONFIG_PREEMPT_ENABLED
    ldr r0, =_kernel
    ee5c:	4804      	ldr	r0, [pc, #16]	; (ee70 <_EXIT_EXC+0x2>)

    ldr r1, [r0, #_kernel_offset_to_current]
    ee5e:	6881      	ldr	r1, [r0, #8]

    ldr r0, [r0, #_kernel_offset_to_ready_q_cache]
    ee60:	6a40      	ldr	r0, [r0, #36]	; 0x24
    cmp r0, r1
    ee62:	4288      	cmp	r0, r1
    beq _EXIT_EXC
    ee64:	d003      	beq.n	ee6e <_EXIT_EXC>

#if defined(CONFIG_CPU_CORTEX_M)
    /* context switch required, pend the PendSV exception */
    ldr r1, =_SCS_ICSR
    ee66:	4903      	ldr	r1, [pc, #12]	; (ee74 <_EXIT_EXC+0x6>)
    ldr r2, =_SCS_ICSR_PENDSV
    ee68:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    str r2, [r1]
    ee6c:	600a      	str	r2, [r1, #0]

0000ee6e <_EXIT_EXC>:
    bl z_check_stack_sentinel
#endif /* CONFIG_CPU_CORTEX_M */
#endif /* CONFIG_STACK_SENTINEL */

#if defined(CONFIG_CPU_CORTEX_M)
    bx lr
    ee6e:	4770      	bx	lr
    ldr r0, =_kernel
    ee70:	20021398 	.word	0x20021398
    ldr r1, =_SCS_ICSR
    ee74:	e000ed04 	.word	0xe000ed04

0000ee78 <z_arm_pendsv>:
    pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_TRACING */

    /* load _kernel into r1 and current k_thread into r2 */
    ldr r1, =_kernel
    ee78:	4929      	ldr	r1, [pc, #164]	; (ef20 <in_fp_endif+0x2c>)
    ldr r2, [r1, #_kernel_offset_to_current]
    ee7a:	688a      	ldr	r2, [r1, #8]

    /* addr of callee-saved regs in thread in r0 */
    ldr r0, =_thread_offset_to_callee_saved
    ee7c:	f04f 0028 	mov.w	r0, #40	; 0x28
    add r0, r2
    ee80:	4410      	add	r0, r2

    /* save callee-saved + psp in thread */
#if defined(CONFIG_CPU_CORTEX_M)
    mrs ip, PSP
    ee82:	f3ef 8c09 	mrs	ip, PSP
    mov r6, r11
    mov r7, ip
    /* store r8-12 */
    stmea r0!, {r3-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    stmia r0, {v1-v8, ip}
    ee86:	e880 1ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
#ifdef CONFIG_FP_SHARING
    /* Assess whether switched-out thread had been using the FP registers. */
    ldr r0, =0x10 /* EXC_RETURN.F_Type Mask */
    ee8a:	f04f 0010 	mov.w	r0, #16
    tst lr, r0    /* EXC_RETURN & EXC_RETURN.F_Type_Msk */
    ee8e:	ea1e 0f00 	tst.w	lr, r0
    beq out_fp_active
    ee92:	d004      	beq.n	ee9e <out_fp_active>
    /* FP context inactive: clear FP state */
    ldr r0, [r2, #_thread_offset_to_mode]
    ee94:	f8d2 00ac 	ldr.w	r0, [r2, #172]	; 0xac
    bic r0, #0x4 /* _current->arch.mode &= ~(CONTROL_FPCA_Msk) */
    ee98:	f020 0004 	bic.w	r0, r0, #4
    b out_fp_endif
    ee9c:	e007      	b.n	eeae <out_fp_endif>

0000ee9e <out_fp_active>:

out_fp_active:
    /* FP context active: set FP state and store callee-saved registers */
    add r0, r2, #_thread_offset_to_preempt_float
    ee9e:	f102 006c 	add.w	r0, r2, #108	; 0x6c
    vstmia r0, {s16-s31}
    eea2:	ec80 8a10 	vstmia	r0, {s16-s31}
    ldr r0, [r2, #_thread_offset_to_mode]
    eea6:	f8d2 00ac 	ldr.w	r0, [r2, #172]	; 0xac
    orrs r0, r0, #0x4 /* _current->arch.mode |= CONTROL_FPCA_Msk */
    eeaa:	f050 0004 	orrs.w	r0, r0, #4

0000eeae <out_fp_endif>:

out_fp_endif:
    str r0, [r2, #_thread_offset_to_mode]
    eeae:	f8c2 00ac 	str.w	r0, [r2, #172]	; 0xac

    /* Protect the kernel state while we play with the thread lists */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    eeb2:	2020      	movs	r0, #32
    msr BASEPRI, r0
    eeb4:	f380 8811 	msr	BASEPRI, r0
    isb /* Make the effect of disabling interrupts be realized immediately */
    eeb8:	f3bf 8f6f 	isb	sy
     * the new thread is context-switched in since all decisions
     * to pend PendSV have been taken with the current kernel
     * state and this is what we're handling currently.
     */
#if defined(CONFIG_CPU_CORTEX_M)
    ldr v4, =_SCS_ICSR
    eebc:	4f19      	ldr	r7, [pc, #100]	; (ef24 <in_fp_endif+0x30>)
    ldr v3, =_SCS_ICSR_UNPENDSV
    eebe:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000
#endif

    /* _kernel is still in r1 */

    /* fetch the thread to run from the ready queue cache */
    ldr r2, [r1, #_kernel_offset_to_ready_q_cache]
    eec2:	6a4a      	ldr	r2, [r1, #36]	; 0x24

    str r2, [r1, #_kernel_offset_to_current]
    eec4:	608a      	str	r2, [r1, #8]
     * has been handled.
     */

    /* _SCS_ICSR is still in v4 and _SCS_ICSR_UNPENDSV in v3 */
#if defined(CONFIG_CPU_CORTEX_M)
    str v3, [v4, #0]
    eec6:	603e      	str	r6, [r7, #0]

    ldr r0, [r4]
    movs.n r3, #0
    str r3, [r4]
#else
    ldr r0, [r2, #_thread_offset_to_basepri]
    eec8:	6e50      	ldr	r0, [r2, #100]	; 0x64
    movs r3, #0
    eeca:	2300      	movs	r3, #0
    str r3, [r2, #_thread_offset_to_basepri]
    eecc:	6653      	str	r3, [r2, #100]	; 0x64
    /* restore r4-r7, go back 9*4 bytes to the start of the stored block */
    subs r0, #36
    ldmia r0!, {r4-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    /* restore BASEPRI for the incoming thread */
    msr BASEPRI, r0
    eece:	f380 8811 	msr	BASEPRI, r0

#ifdef CONFIG_FP_SHARING
    /* Assess whether switched-in thread had been using the FP registers. */
    ldr r0, [r2, #_thread_offset_to_mode]
    eed2:	f8d2 00ac 	ldr.w	r0, [r2, #172]	; 0xac
    tst r0, #0x04 /* thread.arch.mode & CONTROL.FPCA Msk */
    eed6:	f010 0f04 	tst.w	r0, #4
    bne in_fp_active
    eeda:	d105      	bne.n	eee8 <in_fp_active>
    /* FP context inactive for swapped-in thread:
     * - reset FPSCR to 0
     * - set EXC_RETURN.F_Type (prevents FP frame un-stacking when returning
     *   from pendSV)
     */
    movs.n r3, #0
    eedc:	2300      	movs	r3, #0
    vmsr fpscr, r3
    eede:	eee1 3a10 	vmsr	fpscr, r3
    orrs lr, lr, #0x10 /* EXC_RETURN & EXC_RETURN.F_Type_Msk */
    eee2:	f05e 0e10 	orrs.w	lr, lr, #16
    b in_fp_endif
    eee6:	e005      	b.n	eef4 <in_fp_endif>

0000eee8 <in_fp_active>:
    /* FP context active:
     * - clear EXC_RETURN.F_Type
     * - FPSCR and caller-saved registers will be restored automatically
     * - restore callee-saved FP registers
     */
    bic lr, #0x10 /* EXC_RETURN | (~EXC_RETURN.F_Type_Msk) */
    eee8:	f02e 0e10 	bic.w	lr, lr, #16
    add r0, r2, #_thread_offset_to_preempt_float
    eeec:	f102 006c 	add.w	r0, r2, #108	; 0x6c
    vldmia r0, {s16-s31}
    eef0:	ec90 8a10 	vldmia	r0, {s16-s31}

0000eef4 <in_fp_endif>:
in_fp_endif:
    /* Clear CONTROL.FPCA that may have been set by FP instructions */
    mrs r3, CONTROL
    eef4:	f3ef 8314 	mrs	r3, CONTROL
    bic r3, #0x4 /* CONTROL.FPCA Msk */
    eef8:	f023 0304 	bic.w	r3, r3, #4
    msr CONTROL, r3
    eefc:	f383 8814 	msr	CONTROL, r3
    isb
    ef00:	f3bf 8f6f 	isb	sy
#endif

#if defined (CONFIG_ARM_MPU)
    /* Re-program dynamic memory map */
    push {r2,lr}
    ef04:	b504      	push	{r2, lr}
    mov r0, r2 /* _current thread */
    ef06:	4610      	mov	r0, r2
    bl z_arm_configure_dynamic_mpu_regions
    ef08:	f011 f840 	bl	1ff8c <z_arm_configure_dynamic_mpu_regions>
    pop {r2,lr}
    ef0c:	e8bd 4004 	ldmia.w	sp!, {r2, lr}
    isb

#endif

    /* load callee-saved + psp from thread */
    add r0, r2, #_thread_offset_to_callee_saved
    ef10:	f102 0028 	add.w	r0, r2, #40	; 0x28
    ldmia r0, {v1-v8, ip}
    ef14:	e890 1ff0 	ldmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
    mov r0, #0
    msr PSPLIM, r0
#endif /* CONFIG_BUILTIN_STACK_GUARD */

#if defined(CONFIG_CPU_CORTEX_M)
    msr PSP, ip
    ef18:	f38c 8809 	msr	PSP, ip

    /*
     * Cortex-M: return from PendSV exception
     * Cortex-R: return to the caller (_IntExit or z_arm_svc)
     */
    bx lr
    ef1c:	4770      	bx	lr
    ef1e:	0000      	.short	0x0000
    ldr r1, =_kernel
    ef20:	20021398 	.word	0x20021398
    ldr v4, =_SCS_ICSR
    ef24:	e000ed04 	.word	0xe000ed04

0000ef28 <z_arm_svc>:
  bne _stack_frame_endif
_stack_frame_msp:
  mrs r0, MSP
_stack_frame_endif:
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    tst lr, #0x4    /* did we come from thread mode ? */
    ef28:	f01e 0f04 	tst.w	lr, #4
    ite eq  /* if zero (equal), came from handler mode */
    ef2c:	bf0c      	ite	eq
        mrseq r0, MSP   /* handler mode, stack frame is on MSP */
    ef2e:	f3ef 8008 	mrseq	r0, MSP
        mrsne r0, PSP   /* thread mode, stack frame is on PSP */
    ef32:	f3ef 8009 	mrsne	r0, PSP
#endif


    /* Figure out what SVC call number was invoked */

    ldr r1, [r0, #24]   /* grab address of PC from stack frame */
    ef36:	6981      	ldr	r1, [r0, #24]
     */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    subs r1, r1, #2
    ldrb r1, [r1]
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    ldrb r1, [r1, #-2]
    ef38:	f811 1c02 	ldrb.w	r1, [r1, #-2]
#endif
    bne _oops

#endif /* CONFIG_USERSPACE */

    cmp r1, #2
    ef3c:	2902      	cmp	r1, #2
    beq _oops
    ef3e:	d0ff      	beq.n	ef40 <_oops>

0000ef40 <_oops>:
    /* exception return is done in z_arm_int_exit() */
    b z_arm_int_exit
#endif

_oops:
    push {r0, lr}
    ef40:	b501      	push	{r0, lr}
    bl z_do_kernel_oops
    ef42:	f011 f818 	bl	1ff76 <z_do_kernel_oops>
    /* return from SVC exception is done here */
    pop {r0, pc}
    ef46:	bd01      	pop	{r0, pc}

0000ef48 <z_arm_cpu_idle_init>:
 * void z_arm_cpu_idle_init(void);
 */

SECTION_FUNC(TEXT, z_arm_cpu_idle_init)
#if defined(CONFIG_CPU_CORTEX_M)
	ldr r1, =_SCB_SCR
    ef48:	4901      	ldr	r1, [pc, #4]	; (ef50 <z_arm_cpu_idle_init+0x8>)
	movs.n r2, #_SCR_INIT_BITS
    ef4a:	2210      	movs	r2, #16
	str r2, [r1]
    ef4c:	600a      	str	r2, [r1, #0]
#endif
	bx lr
    ef4e:	4770      	bx	lr
	ldr r1, =_SCB_SCR
    ef50:	e000ed10 	.word	0xe000ed10

0000ef54 <arch_cpu_idle>:
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE) \
	|| defined(CONFIG_ARMV7_R)
	cpsie i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* clear BASEPRI so wfi is awakened by incoming interrupts */
	eors.n r0, r0
    ef54:	4040      	eors	r0, r0
	msr BASEPRI, r0
    ef56:	f380 8811 	msr	BASEPRI, r0
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	wfi
    ef5a:	bf30      	wfi

	bx lr
    ef5c:	4770      	bx	lr
    ef5e:	bf00      	nop

0000ef60 <z_arm_bus_fault>:
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
SECTION_SUBSEC_FUNC(TEXT,__fault,z_arm_reserved)

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE) || \
	defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	mrs r0, MSP
    ef60:	f3ef 8008 	mrs	r0, MSP
	mrs r1, PSP
    ef64:	f3ef 8109 	mrs	r1, PSP
	mov r2, lr /* EXC_RETURN */
    ef68:	4672      	mov	r2, lr

	push {r0, lr}
    ef6a:	b501      	push	{r0, lr}
	mov r0, #0
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE || CONFIG_ARMv7_M_ARMV8_M_MAINLINE */

	bl z_arm_fault
    ef6c:	f000 fbaa 	bl	f6c4 <z_arm_fault>

#if defined(CONFIG_CPU_CORTEX_M)
	pop {r0, pc}
    ef70:	bd01      	pop	{r0, pc}
    ef72:	bf00      	nop

0000ef74 <z_SysNmiOnReset>:
_ASM_FILE_PROLOGUE

GTEXT(z_SysNmiOnReset)

SECTION_FUNC(TEXT, z_SysNmiOnReset)
    wfi
    ef74:	bf30      	wfi
    b z_SysNmiOnReset
    ef76:	f7ff bffd 	b.w	ef74 <z_SysNmiOnReset>
    ef7a:	bf00      	nop

0000ef7c <_isr_wrapper>:
 * @return N/A
 */
SECTION_FUNC(TEXT, _isr_wrapper)

#if defined(CONFIG_CPU_CORTEX_M)
	push {r0,lr}		/* r0, lr are now the first items on the stack */
    ef7c:	b501      	push	{r0, lr}
      * FIXME: Remove the Cortex-M conditional compilation checks for `cpsid i`
      *        and `cpsie i` after the Cortex-R port is updated to support
      *        interrupt nesting.  For more details, refer to the issue #21758.
      */
#if defined(CONFIG_CPU_CORTEX_M)
	cpsid i  /* PRIMASK = 1 */
    ef7e:	b672      	cpsid	i
#endif

	/* is this a wakeup from idle ? */
	ldr r2, =_kernel
    ef80:	4a0b      	ldr	r2, [pc, #44]	; (efb0 <_isr_wrapper+0x34>)
	/* requested idle duration, in ticks */
	ldr r0, [r2, #_kernel_offset_to_idle]
    ef82:	6a10      	ldr	r0, [r2, #32]
	cmp r0, #0
    ef84:	2800      	cmp	r0, #0
	str r1, [r2, #_kernel_offset_to_idle]
	bl z_sys_power_save_idle_exit
_idle_state_cleared:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	ittt ne
    ef86:	bf1e      	ittt	ne
	movne	r1, #0
    ef88:	2100      	movne	r1, #0
		/* clear kernel idle state */
		strne	r1, [r2, #_kernel_offset_to_idle]
    ef8a:	6211      	strne	r1, [r2, #32]
		blne	z_sys_power_save_idle_exit
    ef8c:	f012 fb8d 	blne	216aa <z_sys_power_save_idle_exit>
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
	cpsie i		/* re-enable interrupts (PRIMASK = 0) */
    ef90:	b662      	cpsie	i
#endif

#endif /* CONFIG_SYS_POWER_MANAGEMENT */

#if defined(CONFIG_CPU_CORTEX_M)
	mrs r0, IPSR	/* get exception number */
    ef92:	f3ef 8005 	mrs	r0, IPSR
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r1, =16
	subs r0, r1	/* get IRQ number */
	lsls r0, #3	/* table is 8-byte wide */
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	sub r0, r0, #16	/* get IRQ number */
    ef96:	f1a0 0010 	sub.w	r0, r0, #16
	lsl r0, r0, #3	/* table is 8-byte wide */
    ef9a:	ea4f 00c0 	mov.w	r0, r0, lsl #3
	 */
	mov r0, #0
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
	ldr r1, =_sw_isr_table
    ef9e:	4905      	ldr	r1, [pc, #20]	; (efb4 <_isr_wrapper+0x38>)
	add r1, r1, r0	/* table entry: ISRs must have their MSB set to stay
    efa0:	4401      	add	r1, r0
			 * in thumb mode */

	ldm r1!,{r0,r3}	/* arg in r0, ISR in r3 */
    efa2:	c909      	ldmia	r1!, {r0, r3}
#else
	pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
	ldm sp!,{r0-r3} /* Restore r0 to r3 regs */
#endif /* CONFIG_EXECUTION_BENCHMARKING */
	blx r3		/* call ISR */
    efa4:	4798      	blx	r3

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	pop {r0, r3}
	mov lr, r3
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	pop {r0, lr}
    efa6:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
#endif

	/* Use 'bx' instead of 'b' because 'bx' can jump further, and use
	 * 'bx' instead of 'blx' because exception return is done in
	 * z_arm_int_exit() */
	ldr r1, =z_arm_int_exit
    efaa:	4903      	ldr	r1, [pc, #12]	; (efb8 <_isr_wrapper+0x3c>)
	bx r1
    efac:	4708      	bx	r1
    efae:	0000      	.short	0x0000
	ldr r2, =_kernel
    efb0:	20021398 	.word	0x20021398
	ldr r1, =_sw_isr_table
    efb4:	00022638 	.word	0x00022638
	ldr r1, =z_arm_int_exit
    efb8:	0000ee5d 	.word	0x0000ee5d

0000efbc <arch_swap>:
#ifdef CONFIG_EXECUTION_BENCHMARKING
	read_timer_start_of_swap();
#endif

	/* store off key and return value */
	_current->arch.basepri = key;
    efbc:	4a09      	ldr	r2, [pc, #36]	; (efe4 <arch_swap+0x28>)
	_current->arch.swap_return_value = _k_neg_eagain;
    efbe:	490a      	ldr	r1, [pc, #40]	; (efe8 <arch_swap+0x2c>)
	_current->arch.basepri = key;
    efc0:	6893      	ldr	r3, [r2, #8]
	_current->arch.swap_return_value = _k_neg_eagain;
    efc2:	6809      	ldr	r1, [r1, #0]
	_current->arch.basepri = key;
    efc4:	6658      	str	r0, [r3, #100]	; 0x64
	_current->arch.swap_return_value = _k_neg_eagain;
    efc6:	6699      	str	r1, [r3, #104]	; 0x68

#if defined(CONFIG_CPU_CORTEX_M)
	/* set pending bit to make sure we will take a PendSV exception */
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    efc8:	4908      	ldr	r1, [pc, #32]	; (efec <arch_swap+0x30>)
    efca:	684b      	ldr	r3, [r1, #4]
    efcc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
    efd0:	604b      	str	r3, [r1, #4]
    efd2:	2300      	movs	r3, #0
    efd4:	f383 8811 	msr	BASEPRI, r3
    efd8:	f3bf 8f6f 	isb	sy
#endif

	/* Context switch is performed here. Returning implies the
	 * thread has been context-switched-in again.
	 */
	return _current->arch.swap_return_value;
    efdc:	6893      	ldr	r3, [r2, #8]
}
    efde:	6e98      	ldr	r0, [r3, #104]	; 0x68
    efe0:	4770      	bx	lr
    efe2:	bf00      	nop
    efe4:	20021398 	.word	0x20021398
    efe8:	00022f80 	.word	0x00022f80
    efec:	e000ed00 	.word	0xe000ed00

0000eff0 <arch_irq_enable>:
#define REG_FROM_IRQ(irq) (irq / NUM_IRQS_PER_REG)
#define BIT_FROM_IRQ(irq) (irq % NUM_IRQS_PER_REG)

void arch_irq_enable(unsigned int irq)
{
	NVIC_EnableIRQ((IRQn_Type)irq);
    eff0:	b243      	sxtb	r3, r0
  if ((int32_t)(IRQn) >= 0)
    eff2:	2b00      	cmp	r3, #0
    eff4:	db08      	blt.n	f008 <arch_irq_enable+0x18>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    eff6:	2201      	movs	r2, #1
    eff8:	f000 001f 	and.w	r0, r0, #31
    effc:	fa02 f000 	lsl.w	r0, r2, r0
    f000:	4a02      	ldr	r2, [pc, #8]	; (f00c <arch_irq_enable+0x1c>)
    f002:	095b      	lsrs	r3, r3, #5
    f004:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
}
    f008:	4770      	bx	lr
    f00a:	bf00      	nop
    f00c:	e000e100 	.word	0xe000e100

0000f010 <z_arm_irq_priority_set>:
 * priority levels which are reserved.
 *
 * @return N/A
 */
void z_arm_irq_priority_set(unsigned int irq, unsigned int prio, u32_t flags)
{
    f010:	b570      	push	{r4, r5, r6, lr}
	} else {
		prio += _IRQ_PRIO_OFFSET;
	}
#else
	ARG_UNUSED(flags);
	prio += _IRQ_PRIO_OFFSET;
    f012:	1c4c      	adds	r4, r1, #1
	/* The last priority level is also used by PendSV exception, but
	 * allow other interrupts to use the same level, even if it ends up
	 * affecting performance (can still be useful on systems with a
	 * reduced set of priorities, like Cortex-M0/M0+).
	 */
	__ASSERT(prio <= (BIT(DT_NUM_IRQ_PRIO_BITS) - 1),
    f014:	2c07      	cmp	r4, #7
{
    f016:	4605      	mov	r5, r0
    f018:	460e      	mov	r6, r1
	__ASSERT(prio <= (BIT(DT_NUM_IRQ_PRIO_BITS) - 1),
    f01a:	d90e      	bls.n	f03a <z_arm_irq_priority_set+0x2a>
    f01c:	235f      	movs	r3, #95	; 0x5f
    f01e:	4a10      	ldr	r2, [pc, #64]	; (f060 <z_arm_irq_priority_set+0x50>)
    f020:	4910      	ldr	r1, [pc, #64]	; (f064 <z_arm_irq_priority_set+0x54>)
    f022:	4811      	ldr	r0, [pc, #68]	; (f068 <z_arm_irq_priority_set+0x58>)
    f024:	f010 fed9 	bl	1fdda <printk>
    f028:	4631      	mov	r1, r6
    f02a:	4810      	ldr	r0, [pc, #64]	; (f06c <z_arm_irq_priority_set+0x5c>)
    f02c:	2207      	movs	r2, #7
    f02e:	f010 fed4 	bl	1fdda <printk>
    f032:	215f      	movs	r1, #95	; 0x5f
    f034:	480a      	ldr	r0, [pc, #40]	; (f060 <z_arm_irq_priority_set+0x50>)
    f036:	f010 ff16 	bl	1fe66 <assert_post_action>
		 "invalid priority %d! values must be less than %lu\n",
		 prio - _IRQ_PRIO_OFFSET,
		 BIT(DT_NUM_IRQ_PRIO_BITS) - (_IRQ_PRIO_OFFSET));
	NVIC_SetPriority((IRQn_Type)irq, prio);
    f03a:	b26b      	sxtb	r3, r5
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
    f03c:	2b00      	cmp	r3, #0
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    f03e:	bfa8      	it	ge
    f040:	f103 4360 	addge.w	r3, r3, #3758096384	; 0xe0000000
    f044:	ea4f 1444 	mov.w	r4, r4, lsl #5
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    f048:	bfb8      	it	lt
    f04a:	4b09      	ldrlt	r3, [pc, #36]	; (f070 <z_arm_irq_priority_set+0x60>)
    f04c:	b2e4      	uxtb	r4, r4
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    f04e:	bfab      	itete	ge
    f050:	f503 4361 	addge.w	r3, r3, #57600	; 0xe100
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    f054:	f005 050f 	andlt.w	r5, r5, #15
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    f058:	f883 4300 	strbge.w	r4, [r3, #768]	; 0x300
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    f05c:	555c      	strblt	r4, [r3, r5]
}
    f05e:	bd70      	pop	{r4, r5, r6, pc}
    f060:	000238d1 	.word	0x000238d1
    f064:	00023907 	.word	0x00023907
    f068:	00023451 	.word	0x00023451
    f06c:	00023922 	.word	0x00023922
    f070:	e000ed14 	.word	0xe000ed14

0000f074 <_arch_isr_direct_pm>:
	z_arm_reserved();
}

#ifdef CONFIG_SYS_POWER_MANAGEMENT
void _arch_isr_direct_pm(void)
{
    f074:	b508      	push	{r3, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Lock all interrupts. irq_lock() will on this CPU only disable those
	 * lower than BASEPRI, which is not what we want. See comments in
	 * arch/arm/core/aarch32/isr_wrapper.S
	 */
	__asm__ volatile("cpsid i" : : : "memory");
    f076:	b672      	cpsid	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	if (_kernel.idle) {
    f078:	4b04      	ldr	r3, [pc, #16]	; (f08c <_arch_isr_direct_pm+0x18>)
    f07a:	6a18      	ldr	r0, [r3, #32]
    f07c:	b118      	cbz	r0, f086 <_arch_isr_direct_pm+0x12>
		s32_t idle_val = _kernel.idle;

		_kernel.idle = 0;
    f07e:	2200      	movs	r2, #0
    f080:	621a      	str	r2, [r3, #32]
		z_sys_power_save_idle_exit(idle_val);
    f082:	f012 fb12 	bl	216aa <z_sys_power_save_idle_exit>

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE) \
	|| defined(CONFIG_ARMV7_R)
	irq_unlock(key);
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile("cpsie i" : : : "memory");
    f086:	b662      	cpsie	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

}
    f088:	bd08      	pop	{r3, pc}
    f08a:	bf00      	nop
    f08c:	20021398 	.word	0x20021398

0000f090 <arch_new_thread>:
 */
void arch_new_thread(struct k_thread *thread, k_thread_stack_t *stack,
		     size_t stackSize, k_thread_entry_t pEntry,
		     void *parameter1, void *parameter2, void *parameter3,
		     int priority, unsigned int options)
{
    f090:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    f094:	9e0d      	ldr	r6, [sp, #52]	; 0x34
    f096:	4605      	mov	r5, r0
	char *pStackMem = Z_THREAD_STACK_BUFFER(stack);
	char *stackEnd;
	/* Offset between the top of stack and the high end of stack area. */
	u32_t top_of_stack_offset = 0U;

	Z_ASSERT_VALID_PRIO(priority, pEntry);
    f098:	2e0f      	cmp	r6, #15
{
    f09a:	4688      	mov	r8, r1
    f09c:	4691      	mov	r9, r2
    f09e:	461f      	mov	r7, r3
	Z_ASSERT_VALID_PRIO(priority, pEntry);
    f0a0:	d126      	bne.n	f0f0 <arch_new_thread+0x60>
    f0a2:	4b1e      	ldr	r3, [pc, #120]	; (f11c <arch_new_thread+0x8c>)
    f0a4:	429f      	cmp	r7, r3
    f0a6:	d127      	bne.n	f0f8 <arch_new_thread+0x68>
#endif
	stackEnd = pStackMem + stackSize;

	struct __esf *pInitCtx;

	z_new_thread_init(thread, pStackMem, stackSize, priority,
    f0a8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    f0aa:	464a      	mov	r2, r9
    f0ac:	9300      	str	r3, [sp, #0]
    f0ae:	4641      	mov	r1, r8
    f0b0:	4633      	mov	r3, r6
    f0b2:	4628      	mov	r0, r5
    f0b4:	f012 fba8 	bl	21808 <z_new_thread_init>
	stackEnd = pStackMem + stackSize;
    f0b8:	eb08 0409 	add.w	r4, r8, r9
	pInitCtx->basic.pc = (u32_t)z_thread_entry;
#endif

#if defined(CONFIG_CPU_CORTEX_M)
	/* force ARM mode by clearing LSB of address */
	pInitCtx->basic.pc &= 0xfffffffe;
    f0bc:	4a18      	ldr	r2, [pc, #96]	; (f120 <arch_new_thread+0x90>)
	pInitCtx = (struct __esf *)(STACK_ROUND_DOWN(stackEnd -
    f0be:	f1a4 0320 	sub.w	r3, r4, #32
    f0c2:	f023 0307 	bic.w	r3, r3, #7
	pInitCtx->basic.pc &= 0xfffffffe;
    f0c6:	f022 0201 	bic.w	r2, r2, #1
    f0ca:	619a      	str	r2, [r3, #24]
#endif

	pInitCtx->basic.a1 = (u32_t)pEntry;
	pInitCtx->basic.a2 = (u32_t)parameter1;
    f0cc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
	pInitCtx->basic.a1 = (u32_t)pEntry;
    f0ce:	601f      	str	r7, [r3, #0]
	pInitCtx->basic.a2 = (u32_t)parameter1;
    f0d0:	605a      	str	r2, [r3, #4]
	pInitCtx->basic.a3 = (u32_t)parameter2;
    f0d2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    f0d4:	609a      	str	r2, [r3, #8]
	pInitCtx->basic.a4 = (u32_t)parameter3;
    f0d6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    f0d8:	60da      	str	r2, [r3, #12]
	pInitCtx->basic.xpsr =
    f0da:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
    f0de:	61da      	str	r2, [r3, #28]
		0x01000000UL; /* clear all, thumb bit is 1, even if RO */

	thread->callee_saved.psp = (u32_t)pInitCtx;
    f0e0:	64ab      	str	r3, [r5, #72]	; 0x48
#if defined(CONFIG_CPU_CORTEX_R)
	pInitCtx->basic.lr = (u32_t)pInitCtx->basic.pc;
	thread->callee_saved.spsr = A_BIT | T_BIT | MODE_SYS;
	thread->callee_saved.lr = (u32_t)pInitCtx->basic.pc;
#endif
	thread->arch.basepri = 0;
    f0e2:	2300      	movs	r3, #0
    f0e4:	666b      	str	r3, [r5, #100]	; 0x64

#if defined(CONFIG_USERSPACE) || defined(CONFIG_FP_SHARING)
	thread->arch.mode = 0;
    f0e6:	f8c5 30ac 	str.w	r3, [r5, #172]	; 0xac

	/*
	 * initial values in all other registers/thread entries are
	 * irrelevant.
	 */
}
    f0ea:	b003      	add	sp, #12
    f0ec:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	Z_ASSERT_VALID_PRIO(priority, pEntry);
    f0f0:	f106 0310 	add.w	r3, r6, #16
    f0f4:	2b1e      	cmp	r3, #30
    f0f6:	d9d7      	bls.n	f0a8 <arch_new_thread+0x18>
    f0f8:	232d      	movs	r3, #45	; 0x2d
    f0fa:	4a0a      	ldr	r2, [pc, #40]	; (f124 <arch_new_thread+0x94>)
    f0fc:	490a      	ldr	r1, [pc, #40]	; (f128 <arch_new_thread+0x98>)
    f0fe:	480b      	ldr	r0, [pc, #44]	; (f12c <arch_new_thread+0x9c>)
    f100:	f010 fe6b 	bl	1fdda <printk>
    f104:	4631      	mov	r1, r6
    f106:	f06f 030f 	mvn.w	r3, #15
    f10a:	220e      	movs	r2, #14
    f10c:	4808      	ldr	r0, [pc, #32]	; (f130 <arch_new_thread+0xa0>)
    f10e:	f010 fe64 	bl	1fdda <printk>
    f112:	212d      	movs	r1, #45	; 0x2d
    f114:	4803      	ldr	r0, [pc, #12]	; (f124 <arch_new_thread+0x94>)
    f116:	f010 fea6 	bl	1fe66 <assert_post_action>
    f11a:	e7c5      	b.n	f0a8 <arch_new_thread+0x18>
    f11c:	0001afc9 	.word	0x0001afc9
    f120:	0001fe1d 	.word	0x0001fe1d
    f124:	00023957 	.word	0x00023957
    f128:	00023989 	.word	0x00023989
    f12c:	00023451 	.word	0x00023451
    f130:	00023a16 	.word	0x00023a16

0000f134 <arch_switch_to_main_thread>:

void arch_switch_to_main_thread(struct k_thread *main_thread,
				k_thread_stack_t *main_stack,
				size_t main_stack_size,
				k_thread_entry_t _main)
{
    f134:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    f138:	461f      	mov	r7, r3
    f13a:	4606      	mov	r6, r0
    f13c:	460c      	mov	r4, r1
    f13e:	4690      	mov	r8, r2
// Re-enable using built-in when GCC has been fixed
// || (__GNUC__ > 7) || (__GNUC__ == 7 && __GNUC_MINOR__ >= 2)
  /* see https://gcc.gnu.org/ml/gcc-patches/2017-04/msg00443.html */
  __builtin_arm_set_fpscr(fpscr);
#else
  __ASM volatile ("VMSR fpscr, %0" : : "r" (fpscr) : "vfpcc", "memory");
    f140:	2300      	movs	r3, #0
    f142:	eee1 3a10 	vmsr	fpscr, r3
  __ASM volatile ("MRS %0, control" : "=r" (result) );
    f146:	f3ef 8514 	mrs	r5, CONTROL
	 * initialized at thread creation for threads that make use of the FP).
	 */
	__set_FPSCR(0);
#if defined(CONFIG_FP_SHARING)
	/* In Sharing mode clearing FPSCR may set the CONTROL.FPCA flag. */
	__set_CONTROL(__get_CONTROL() & (~(CONTROL_FPCA_Msk)));
    f14a:	f025 0504 	bic.w	r5, r5, #4
  __ASM volatile ("MSR control, %0" : : "r" (control) : "memory");
    f14e:	f385 8814 	msr	CONTROL, r5
           so that all instructions following the ISB are fetched from cache or memory,
           after the instruction has been completed.
 */
__STATIC_FORCEINLINE void __ISB(void)
{
  __ASM volatile ("isb 0xF":::"memory");
    f152:	f3bf 8f6f 	isb	sy
	 * to set up access permissions for fixed memory sections, such
	 * as Application Memory or No-Cacheable SRAM area.
	 *
	 * This function is invoked once, upon system initialization.
	 */
	z_arm_configure_static_mpu_regions();
    f156:	f000 fc21 	bl	f99c <z_arm_configure_static_mpu_regions>
	start_of_main_stack =
		Z_THREAD_STACK_BUFFER(main_stack) + main_stack_size;

	start_of_main_stack = (char *)STACK_ROUND_DOWN(start_of_main_stack);

	_current = main_thread;
    f15a:	4b0a      	ldr	r3, [pc, #40]	; (f184 <arch_switch_to_main_thread+0x50>)
	start_of_main_stack =
    f15c:	4444      	add	r4, r8
#ifdef CONFIG_ARM_MPU
	/*
	 * If stack protection is enabled, make sure to set it
	 * before jumping to thread entry function
	 */
	z_arm_configure_dynamic_mpu_regions(main_thread);
    f15e:	4630      	mov	r0, r6
	_current = main_thread;
    f160:	609e      	str	r6, [r3, #8]
	start_of_main_stack = (char *)STACK_ROUND_DOWN(start_of_main_stack);
    f162:	f024 0407 	bic.w	r4, r4, #7
	z_arm_configure_dynamic_mpu_regions(main_thread);
    f166:	f010 ff11 	bl	1ff8c <z_arm_configure_dynamic_mpu_regions>

	/*
	 * Set PSP to the highest address of the main stack
	 * before enabling interrupts and jumping to main.
	 */
	__asm__ volatile (
    f16a:	4638      	mov	r0, r7
    f16c:	f384 8809 	msr	PSP, r4
    f170:	2100      	movs	r1, #0
    f172:	b663      	cpsie	if
    f174:	f381 8811 	msr	BASEPRI, r1
    f178:	f3bf 8f6f 	isb	sy
    f17c:	2200      	movs	r2, #0
    f17e:	2300      	movs	r3, #0
    f180:	f010 fe4c 	bl	1fe1c <z_thread_entry>
	:
	: "r" (_main), "r" (start_of_main_stack)
	: "r0" /* not to be overwritten by msr PSP, %1 */
	);

	CODE_UNREACHABLE;
    f184:	20021398 	.word	0x20021398

0000f188 <z_arm_fatal_error>:
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
		esf->basic.pc);
}

void z_arm_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
    f188:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    f18c:	4681      	mov	r9, r0
    f18e:	b086      	sub	sp, #24

	if (esf != NULL) {
    f190:	460c      	mov	r4, r1
    f192:	2900      	cmp	r1, #0
    f194:	d075      	beq.n	f282 <z_arm_fatal_error+0xfa>
	LOG_ERR("r0/a1:  0x%08x  r1/a2:  0x%08x  r2/a3:  0x%08x",
    f196:	2301      	movs	r3, #1
    f198:	f04f 0000 	mov.w	r0, #0
    f19c:	4d3c      	ldr	r5, [pc, #240]	; (f290 <z_arm_fatal_error+0x108>)
    f19e:	f363 0007 	bfi	r0, r3, #0, #8
    f1a2:	4b3c      	ldr	r3, [pc, #240]	; (f294 <z_arm_fatal_error+0x10c>)
    f1a4:	4627      	mov	r7, r4
    f1a6:	1aed      	subs	r5, r5, r3
    f1a8:	688b      	ldr	r3, [r1, #8]
    f1aa:	f3c5 05c9 	ubfx	r5, r5, #3, #10
    f1ae:	9300      	str	r3, [sp, #0]
    f1b0:	e9d1 2300 	ldrd	r2, r3, [r1]
    f1b4:	f365 108f 	bfi	r0, r5, #6, #10
    f1b8:	4937      	ldr	r1, [pc, #220]	; (f298 <z_arm_fatal_error+0x110>)
    f1ba:	f010 fe65 	bl	1fe88 <log_string_sync>
	LOG_ERR("r3/a4:  0x%08x r12/ip:  0x%08x r14/lr:  0x%08x",
    f1be:	2301      	movs	r3, #1
    f1c0:	f04f 0000 	mov.w	r0, #0
    f1c4:	f363 0007 	bfi	r0, r3, #0, #8
    f1c8:	6963      	ldr	r3, [r4, #20]
    f1ca:	f365 108f 	bfi	r0, r5, #6, #10
    f1ce:	9300      	str	r3, [sp, #0]
    f1d0:	e9d4 2303 	ldrd	r2, r3, [r4, #12]
    f1d4:	4931      	ldr	r1, [pc, #196]	; (f29c <z_arm_fatal_error+0x114>)
    f1d6:	f010 fe57 	bl	1fe88 <log_string_sync>
	LOG_ERR(" xpsr:  0x%08x", esf->basic.xpsr);
    f1da:	2301      	movs	r3, #1
    f1dc:	f04f 0000 	mov.w	r0, #0
    f1e0:	f363 0007 	bfi	r0, r3, #0, #8
    f1e4:	f365 108f 	bfi	r0, r5, #6, #10
    f1e8:	69e2      	ldr	r2, [r4, #28]
    f1ea:	492d      	ldr	r1, [pc, #180]	; (f2a0 <z_arm_fatal_error+0x118>)
    f1ec:	f010 fe4c 	bl	1fe88 <log_string_sync>
	for (int i = 0; i < 16; i += 4) {
    f1f0:	2600      	movs	r6, #0
		LOG_ERR("s[%2d]:  0x%08x  s[%2d]:  0x%08x"
    f1f2:	f8df a0b8 	ldr.w	sl, [pc, #184]	; f2ac <z_arm_fatal_error+0x124>
    f1f6:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
    f1fa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
    f1fe:	f028 033f 	bic.w	r3, r8, #63	; 0x3f
    f202:	f043 0301 	orr.w	r3, r3, #1
    f206:	f363 0807 	bfi	r8, r3, #0, #8
    f20a:	1cf3      	adds	r3, r6, #3
    f20c:	ed97 7a08 	vldr	s14, [r7, #32]
    f210:	9304      	str	r3, [sp, #16]
    f212:	edcd 7a05 	vstr	s15, [sp, #20]
    f216:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
    f21a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
    f21e:	1cb3      	adds	r3, r6, #2
    f220:	9302      	str	r3, [sp, #8]
    f222:	edcd 7a03 	vstr	s15, [sp, #12]
    f226:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
    f22a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
    f22e:	edcd 7a01 	vstr	s15, [sp, #4]
    f232:	eefc 7ac7 	vcvt.u32.f32	s15, s14
    f236:	1c73      	adds	r3, r6, #1
    f238:	f365 188f 	bfi	r8, r5, #6, #10
    f23c:	9300      	str	r3, [sp, #0]
    f23e:	4632      	mov	r2, r6
    f240:	ee17 3a90 	vmov	r3, s15
    f244:	4651      	mov	r1, sl
    f246:	4640      	mov	r0, r8
	for (int i = 0; i < 16; i += 4) {
    f248:	3604      	adds	r6, #4
		LOG_ERR("s[%2d]:  0x%08x  s[%2d]:  0x%08x"
    f24a:	f010 fe1d 	bl	1fe88 <log_string_sync>
	for (int i = 0; i < 16; i += 4) {
    f24e:	2e10      	cmp	r6, #16
    f250:	f107 0710 	add.w	r7, r7, #16
    f254:	d1cf      	bne.n	f1f6 <z_arm_fatal_error+0x6e>
	LOG_ERR("fpscr:  0x%08x", esf->fpscr);
    f256:	2301      	movs	r3, #1
    f258:	f04f 0000 	mov.w	r0, #0
    f25c:	f363 0007 	bfi	r0, r3, #0, #8
    f260:	f365 108f 	bfi	r0, r5, #6, #10
    f264:	6e22      	ldr	r2, [r4, #96]	; 0x60
    f266:	490f      	ldr	r1, [pc, #60]	; (f2a4 <z_arm_fatal_error+0x11c>)
    f268:	f010 fe0e 	bl	1fe88 <log_string_sync>
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
    f26c:	f04f 0000 	mov.w	r0, #0
    f270:	2301      	movs	r3, #1
    f272:	f363 0007 	bfi	r0, r3, #0, #8
    f276:	f365 108f 	bfi	r0, r5, #6, #10
    f27a:	69a2      	ldr	r2, [r4, #24]
    f27c:	490a      	ldr	r1, [pc, #40]	; (f2a8 <z_arm_fatal_error+0x120>)
    f27e:	f010 fe03 	bl	1fe88 <log_string_sync>
		esf_dump(esf);
	}
	z_fatal_error(reason, esf);
    f282:	4621      	mov	r1, r4
    f284:	4648      	mov	r0, r9
}
    f286:	b006      	add	sp, #24
    f288:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	z_fatal_error(reason, esf);
    f28c:	f00b be20 	b.w	1aed0 <z_fatal_error>
    f290:	00022984 	.word	0x00022984
    f294:	00022924 	.word	0x00022924
    f298:	00023a47 	.word	0x00023a47
    f29c:	00023a76 	.word	0x00023a76
    f2a0:	00023aa5 	.word	0x00023aa5
    f2a4:	00023af7 	.word	0x00023af7
    f2a8:	00023b06 	.word	0x00023b06
    f2ac:	00023ab4 	.word	0x00023ab4

0000f2b0 <z_arm_prep_c>:
#else
#define VECTOR_ADDRESS CONFIG_SRAM_BASE_ADDRESS
#endif
static inline void relocate_vector_table(void)
{
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
    f2b0:	4a11      	ldr	r2, [pc, #68]	; (f2f8 <z_arm_prep_c+0x48>)
 * This routine prepares for the execution of and runs C code.
 *
 * @return N/A
 */
void z_arm_prep_c(void)
{
    f2b2:	b508      	push	{r3, lr}
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
    f2b4:	4b11      	ldr	r3, [pc, #68]	; (f2fc <z_arm_prep_c+0x4c>)
    f2b6:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
    f2ba:	609a      	str	r2, [r3, #8]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
    f2bc:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    f2c0:	f3bf 8f6f 	isb	sy
	SCB->CPACR |= CPACR_CP10_PRIV_ACCESS | CPACR_CP11_PRIV_ACCESS;
    f2c4:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
    f2c8:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
    f2cc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	FPU->FPCCR = FPU_FPCCR_ASPEN_Msk | FPU_FPCCR_LSPEN_Msk;
    f2d0:	f04f 4240 	mov.w	r2, #3221225472	; 0xc0000000
    f2d4:	f8c3 2234 	str.w	r2, [r3, #564]	; 0x234
  __ASM volatile ("dsb 0xF":::"memory");
    f2d8:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    f2dc:	f3bf 8f6f 	isb	sy
  __ASM volatile ("VMSR fpscr, %0" : : "r" (fpscr) : "vfpcc", "memory");
    f2e0:	2300      	movs	r3, #0
    f2e2:	eee1 3a10 	vmsr	fpscr, r3
	relocate_vector_table();
	enable_floating_point();
	z_bss_zero();
    f2e6:	f00b fe89 	bl	1affc <z_bss_zero>
	z_data_copy();
    f2ea:	f00b fe91 	bl	1b010 <z_data_copy>
#if defined(CONFIG_ARMV7_R) && defined(CONFIG_INIT_STACKS)
	z_arm_init_stacks();
#endif
	z_arm_int_lib_init();
    f2ee:	f000 fb0b 	bl	f908 <z_arm_int_lib_init>
	z_cstart();
    f2f2:	f00b fecb 	bl	1b08c <z_cstart>
    f2f6:	bf00      	nop
    f2f8:	0000c000 	.word	0x0000c000
    f2fc:	e000ed00 	.word	0xe000ed00

0000f300 <__start>:
 * search for a __start symbol instead, so create that alias here.
 */
SECTION_SUBSEC_FUNC(TEXT,_reset_section,__start)

#if defined(CONFIG_PLATFORM_SPECIFIC_INIT)
    bl z_platform_init
    f300:	f010 fdb9 	bl	1fe76 <z_platform_init>

    /* lock interrupts: will get unlocked when switch to main task */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    f304:	2020      	movs	r0, #32
    msr BASEPRI, r0
    f306:	f380 8811 	msr	BASEPRI, r0

    /*
     * Set PSP and use it to boot without using MSP, so that it
     * gets set to _interrupt_stack during initialization.
     */
    ldr r0, =_interrupt_stack
    f30a:	4808      	ldr	r0, [pc, #32]	; (f32c <__start+0x2c>)
    ldr r1, =CONFIG_ISR_STACK_SIZE
    f30c:	f44f 6100 	mov.w	r1, #2048	; 0x800
    adds r0, r0, r1
    f310:	1840      	adds	r0, r0, r1
    msr PSP, r0
    f312:	f380 8809 	msr	PSP, r0
    mrs r0, CONTROL
    f316:	f3ef 8014 	mrs	r0, CONTROL
    movs r1, #2
    f31a:	2102      	movs	r1, #2
    orrs r0, r1 /* CONTROL_SPSEL_Msk */
    f31c:	4308      	orrs	r0, r1
    msr CONTROL, r0
    f31e:	f380 8814 	msr	CONTROL, r0
    /*
     * When changing the stack pointer, software must use an ISB instruction
     * immediately after the MSR instruction. This ensures that instructions
     * after the ISB instruction execute using the new stack pointer.
     */
    isb
    f322:	f3bf 8f6f 	isb	sy
    /*
     * 'bl' jumps the furthest of the branch instructions that are
     * supported on all platforms. So it is used when jumping to z_arm_prep_c
     * (even though we do not intend to return).
     */
    bl z_arm_prep_c
    f326:	f7ff ffc3 	bl	f2b0 <z_arm_prep_c>
    f32a:	0000      	.short	0x0000
    ldr r0, =_interrupt_stack
    f32c:	20023f28 	.word	0x20023f28

0000f330 <mem_manage_fault.isra.2>:
 *
 * See z_arm_fault_dump() for example.
 *
 * @return error code to identify the fatal error reason
 */
static u32_t mem_manage_fault(z_arch_esf_t *esf, int from_hard_fault,
    f330:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
			      bool *recoverable)
{
	u32_t reason = K_ERR_CPU_EXCEPTION;
	u32_t mmfar = -EINVAL;

	PR_FAULT_INFO("***** MPU FAULT *****");
    f332:	2301      	movs	r3, #1
static u32_t mem_manage_fault(z_arch_esf_t *esf, int from_hard_fault,
    f334:	4607      	mov	r7, r0
	PR_FAULT_INFO("***** MPU FAULT *****");
    f336:	f04f 0000 	mov.w	r0, #0
    f33a:	4c40      	ldr	r4, [pc, #256]	; (f43c <mem_manage_fault.isra.2+0x10c>)
    f33c:	f363 0007 	bfi	r0, r3, #0, #8
    f340:	4b3f      	ldr	r3, [pc, #252]	; (f440 <mem_manage_fault.isra.2+0x110>)
static u32_t mem_manage_fault(z_arch_esf_t *esf, int from_hard_fault,
    f342:	460e      	mov	r6, r1
	PR_FAULT_INFO("***** MPU FAULT *****");
    f344:	1ae4      	subs	r4, r4, r3
    f346:	f3c4 04c9 	ubfx	r4, r4, #3, #10
    f34a:	493e      	ldr	r1, [pc, #248]	; (f444 <mem_manage_fault.isra.2+0x114>)
    f34c:	f364 108f 	bfi	r0, r4, #6, #10
    f350:	f010 fd9a 	bl	1fe88 <log_string_sync>

	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
    f354:	4b3c      	ldr	r3, [pc, #240]	; (f448 <mem_manage_fault.isra.2+0x118>)
    f356:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    f358:	06d9      	lsls	r1, r3, #27
    f35a:	d509      	bpl.n	f370 <mem_manage_fault.isra.2+0x40>
		PR_FAULT_INFO("  Stacking error (context area might be"
    f35c:	f04f 0000 	mov.w	r0, #0
    f360:	2301      	movs	r3, #1
    f362:	f363 0007 	bfi	r0, r3, #0, #8
    f366:	f364 108f 	bfi	r0, r4, #6, #10
    f36a:	4938      	ldr	r1, [pc, #224]	; (f44c <mem_manage_fault.isra.2+0x11c>)
    f36c:	f010 fd8c 	bl	1fe88 <log_string_sync>
			" not valid)");
	}
	if ((SCB->CFSR & SCB_CFSR_MUNSTKERR_Msk) != 0) {
    f370:	4b35      	ldr	r3, [pc, #212]	; (f448 <mem_manage_fault.isra.2+0x118>)
    f372:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    f374:	071a      	lsls	r2, r3, #28
    f376:	d509      	bpl.n	f38c <mem_manage_fault.isra.2+0x5c>
		PR_FAULT_INFO("  Unstacking error");
    f378:	f04f 0000 	mov.w	r0, #0
    f37c:	2301      	movs	r3, #1
    f37e:	f363 0007 	bfi	r0, r3, #0, #8
    f382:	f364 108f 	bfi	r0, r4, #6, #10
    f386:	4932      	ldr	r1, [pc, #200]	; (f450 <mem_manage_fault.isra.2+0x120>)
    f388:	f010 fd7e 	bl	1fe88 <log_string_sync>
	}
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
    f38c:	4d2e      	ldr	r5, [pc, #184]	; (f448 <mem_manage_fault.isra.2+0x118>)
    f38e:	6aab      	ldr	r3, [r5, #40]	; 0x28
    f390:	079b      	lsls	r3, r3, #30
    f392:	d51c      	bpl.n	f3ce <mem_manage_fault.isra.2+0x9e>
		PR_FAULT_INFO("  Data Access Violation");
    f394:	2301      	movs	r3, #1
    f396:	f04f 0000 	mov.w	r0, #0
    f39a:	f363 0007 	bfi	r0, r3, #0, #8
    f39e:	f364 108f 	bfi	r0, r4, #6, #10
    f3a2:	492c      	ldr	r1, [pc, #176]	; (f454 <mem_manage_fault.isra.2+0x124>)
    f3a4:	f010 fd70 	bl	1fe88 <log_string_sync>
		 * The MMFAR address is valid only if this bit is 1.
		 *
		 * Software must follow this sequence because another higher
		 * priority exception might change the MMFAR value.
		 */
		mmfar = SCB->MMFAR;
    f3a8:	6b6a      	ldr	r2, [r5, #52]	; 0x34

		if ((SCB->CFSR & SCB_CFSR_MMARVALID_Msk) != 0) {
    f3aa:	6aab      	ldr	r3, [r5, #40]	; 0x28
    f3ac:	0618      	lsls	r0, r3, #24
    f3ae:	d50e      	bpl.n	f3ce <mem_manage_fault.isra.2+0x9e>
			PR_EXC("  MMFAR Address: 0x%x", mmfar);
    f3b0:	f04f 0000 	mov.w	r0, #0
    f3b4:	2301      	movs	r3, #1
    f3b6:	f363 0007 	bfi	r0, r3, #0, #8
    f3ba:	f364 108f 	bfi	r0, r4, #6, #10
    f3be:	4926      	ldr	r1, [pc, #152]	; (f458 <mem_manage_fault.isra.2+0x128>)
    f3c0:	f010 fd62 	bl	1fe88 <log_string_sync>
			if (from_hard_fault) {
    f3c4:	b11f      	cbz	r7, f3ce <mem_manage_fault.isra.2+0x9e>
				/* clear SCB_MMAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
    f3c6:	6aab      	ldr	r3, [r5, #40]	; 0x28
    f3c8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    f3cc:	62ab      	str	r3, [r5, #40]	; 0x28
			}
		}
	}
	if ((SCB->CFSR & SCB_CFSR_IACCVIOL_Msk) != 0) {
    f3ce:	4b1e      	ldr	r3, [pc, #120]	; (f448 <mem_manage_fault.isra.2+0x118>)
    f3d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    f3d2:	07d9      	lsls	r1, r3, #31
    f3d4:	d509      	bpl.n	f3ea <mem_manage_fault.isra.2+0xba>
		PR_FAULT_INFO("  Instruction Access Violation");
    f3d6:	f04f 0000 	mov.w	r0, #0
    f3da:	2301      	movs	r3, #1
    f3dc:	f363 0007 	bfi	r0, r3, #0, #8
    f3e0:	f364 108f 	bfi	r0, r4, #6, #10
    f3e4:	491d      	ldr	r1, [pc, #116]	; (f45c <mem_manage_fault.isra.2+0x12c>)
    f3e6:	f010 fd4f 	bl	1fe88 <log_string_sync>
	}
#if defined(CONFIG_ARMV7_M_ARMV8_M_FP)
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
    f3ea:	4b17      	ldr	r3, [pc, #92]	; (f448 <mem_manage_fault.isra.2+0x118>)
    f3ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    f3ee:	069a      	lsls	r2, r3, #26
    f3f0:	d509      	bpl.n	f406 <mem_manage_fault.isra.2+0xd6>
		PR_FAULT_INFO(
    f3f2:	f04f 0000 	mov.w	r0, #0
    f3f6:	2301      	movs	r3, #1
    f3f8:	f363 0007 	bfi	r0, r3, #0, #8
    f3fc:	f364 108f 	bfi	r0, r4, #6, #10
    f400:	4917      	ldr	r1, [pc, #92]	; (f460 <mem_manage_fault.isra.2+0x130>)
    f402:	f010 fd41 	bl	1fe88 <log_string_sync>
	 * if the memory violation error is a stack corruption.
	 *
	 * By design, being a Stacking MemManage fault is a necessary
	 * and sufficient condition for a thread stack corruption.
	 */
	if (SCB->CFSR & SCB_CFSR_MSTKERR_Msk) {
    f406:	4b10      	ldr	r3, [pc, #64]	; (f448 <mem_manage_fault.isra.2+0x118>)
    f408:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    f40a:	06db      	lsls	r3, r3, #27
    f40c:	d50e      	bpl.n	f42c <mem_manage_fault.isra.2+0xfc>
					"Stacking error not a stack fail\n");
			}
		}
#else
	(void)mmfar;
	__ASSERT(0,
    f40e:	4915      	ldr	r1, [pc, #84]	; (f464 <mem_manage_fault.isra.2+0x134>)
    f410:	f44f 739b 	mov.w	r3, #310	; 0x136
    f414:	4a14      	ldr	r2, [pc, #80]	; (f468 <mem_manage_fault.isra.2+0x138>)
    f416:	4815      	ldr	r0, [pc, #84]	; (f46c <mem_manage_fault.isra.2+0x13c>)
    f418:	f010 fcdf 	bl	1fdda <printk>
    f41c:	4814      	ldr	r0, [pc, #80]	; (f470 <mem_manage_fault.isra.2+0x140>)
    f41e:	f010 fcdc 	bl	1fdda <printk>
    f422:	f44f 719b 	mov.w	r1, #310	; 0x136
    f426:	4810      	ldr	r0, [pc, #64]	; (f468 <mem_manage_fault.isra.2+0x138>)
    f428:	f010 fd1d 	bl	1fe66 <assert_post_action>

	/* clear MMFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;

	/* Assess whether system shall ignore/recover from this MPU fault. */
	*recoverable = memory_fault_recoverable(esf);
    f42c:	2000      	movs	r0, #0
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
    f42e:	4a06      	ldr	r2, [pc, #24]	; (f448 <mem_manage_fault.isra.2+0x118>)
    f430:	6a93      	ldr	r3, [r2, #40]	; 0x28
    f432:	f043 03ff 	orr.w	r3, r3, #255	; 0xff
    f436:	6293      	str	r3, [r2, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf);
    f438:	7030      	strb	r0, [r6, #0]

	return reason;
}
    f43a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    f43c:	00022984 	.word	0x00022984
    f440:	00022924 	.word	0x00022924
    f444:	00023bbc 	.word	0x00023bbc
    f448:	e000ed00 	.word	0xe000ed00
    f44c:	00023bd2 	.word	0x00023bd2
    f450:	00023c05 	.word	0x00023c05
    f454:	00023c18 	.word	0x00023c18
    f458:	00023c30 	.word	0x00023c30
    f45c:	00023c46 	.word	0x00023c46
    f460:	00023c65 	.word	0x00023c65
    f464:	000251cf 	.word	0x000251cf
    f468:	00023c94 	.word	0x00023c94
    f46c:	00023451 	.word	0x00023451
    f470:	00023cce 	.word	0x00023cce

0000f474 <bus_fault.isra.3>:
 *
 * See z_arm_fault_dump() for example.
 *
 * @return N/A
 */
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
    f474:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
{
	u32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** BUS FAULT *****");
    f476:	2301      	movs	r3, #1
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
    f478:	4607      	mov	r7, r0
	PR_FAULT_INFO("***** BUS FAULT *****");
    f47a:	f04f 0000 	mov.w	r0, #0
    f47e:	4c3d      	ldr	r4, [pc, #244]	; (f574 <bus_fault.isra.3+0x100>)
    f480:	f363 0007 	bfi	r0, r3, #0, #8
    f484:	4b3c      	ldr	r3, [pc, #240]	; (f578 <bus_fault.isra.3+0x104>)
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
    f486:	460e      	mov	r6, r1
	PR_FAULT_INFO("***** BUS FAULT *****");
    f488:	1ae4      	subs	r4, r4, r3
    f48a:	f3c4 04c9 	ubfx	r4, r4, #3, #10
    f48e:	493b      	ldr	r1, [pc, #236]	; (f57c <bus_fault.isra.3+0x108>)
    f490:	f364 108f 	bfi	r0, r4, #6, #10
    f494:	f010 fcf8 	bl	1fe88 <log_string_sync>

	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
    f498:	4b39      	ldr	r3, [pc, #228]	; (f580 <bus_fault.isra.3+0x10c>)
    f49a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    f49c:	04d9      	lsls	r1, r3, #19
    f49e:	d509      	bpl.n	f4b4 <bus_fault.isra.3+0x40>
		PR_FAULT_INFO("  Stacking error");
    f4a0:	f04f 0000 	mov.w	r0, #0
    f4a4:	2301      	movs	r3, #1
    f4a6:	f363 0007 	bfi	r0, r3, #0, #8
    f4aa:	f364 108f 	bfi	r0, r4, #6, #10
    f4ae:	4935      	ldr	r1, [pc, #212]	; (f584 <bus_fault.isra.3+0x110>)
    f4b0:	f010 fcea 	bl	1fe88 <log_string_sync>
	}
	if (SCB->CFSR & SCB_CFSR_UNSTKERR_Msk) {
    f4b4:	4b32      	ldr	r3, [pc, #200]	; (f580 <bus_fault.isra.3+0x10c>)
    f4b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    f4b8:	051a      	lsls	r2, r3, #20
    f4ba:	d509      	bpl.n	f4d0 <bus_fault.isra.3+0x5c>
		PR_FAULT_INFO("  Unstacking error");
    f4bc:	f04f 0000 	mov.w	r0, #0
    f4c0:	2301      	movs	r3, #1
    f4c2:	f363 0007 	bfi	r0, r3, #0, #8
    f4c6:	f364 108f 	bfi	r0, r4, #6, #10
    f4ca:	492f      	ldr	r1, [pc, #188]	; (f588 <bus_fault.isra.3+0x114>)
    f4cc:	f010 fcdc 	bl	1fe88 <log_string_sync>
	}
	if (SCB->CFSR & SCB_CFSR_PRECISERR_Msk) {
    f4d0:	4d2b      	ldr	r5, [pc, #172]	; (f580 <bus_fault.isra.3+0x10c>)
    f4d2:	6aab      	ldr	r3, [r5, #40]	; 0x28
    f4d4:	059b      	lsls	r3, r3, #22
    f4d6:	d51c      	bpl.n	f512 <bus_fault.isra.3+0x9e>
		PR_FAULT_INFO("  Precise data bus error");
    f4d8:	2301      	movs	r3, #1
    f4da:	f04f 0000 	mov.w	r0, #0
    f4de:	f363 0007 	bfi	r0, r3, #0, #8
    f4e2:	f364 108f 	bfi	r0, r4, #6, #10
    f4e6:	4929      	ldr	r1, [pc, #164]	; (f58c <bus_fault.isra.3+0x118>)
    f4e8:	f010 fcce 	bl	1fe88 <log_string_sync>
		 * The BFAR address is valid only if this bit is 1.
		 *
		 * Software must follow this sequence because another
		 * higher priority exception might change the BFAR value.
		 */
		STORE_xFAR(bfar, SCB->BFAR);
    f4ec:	6baa      	ldr	r2, [r5, #56]	; 0x38

		if ((SCB->CFSR & SCB_CFSR_BFARVALID_Msk) != 0) {
    f4ee:	6aab      	ldr	r3, [r5, #40]	; 0x28
    f4f0:	0418      	lsls	r0, r3, #16
    f4f2:	d50e      	bpl.n	f512 <bus_fault.isra.3+0x9e>
			PR_EXC("  BFAR Address: 0x%x", bfar);
    f4f4:	f04f 0000 	mov.w	r0, #0
    f4f8:	2301      	movs	r3, #1
    f4fa:	f363 0007 	bfi	r0, r3, #0, #8
    f4fe:	f364 108f 	bfi	r0, r4, #6, #10
    f502:	4923      	ldr	r1, [pc, #140]	; (f590 <bus_fault.isra.3+0x11c>)
    f504:	f010 fcc0 	bl	1fe88 <log_string_sync>
			if (from_hard_fault) {
    f508:	b11f      	cbz	r7, f512 <bus_fault.isra.3+0x9e>
				/* clear SCB_CFSR_BFAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_BFARVALID_Msk;
    f50a:	6aab      	ldr	r3, [r5, #40]	; 0x28
    f50c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
    f510:	62ab      	str	r3, [r5, #40]	; 0x28
			}
		}
	}
	if (SCB->CFSR & SCB_CFSR_IMPRECISERR_Msk) {
    f512:	4b1b      	ldr	r3, [pc, #108]	; (f580 <bus_fault.isra.3+0x10c>)
    f514:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    f516:	0559      	lsls	r1, r3, #21
    f518:	d509      	bpl.n	f52e <bus_fault.isra.3+0xba>
		PR_FAULT_INFO("  Imprecise data bus error");
    f51a:	f04f 0000 	mov.w	r0, #0
    f51e:	2301      	movs	r3, #1
    f520:	f363 0007 	bfi	r0, r3, #0, #8
    f524:	f364 108f 	bfi	r0, r4, #6, #10
    f528:	491a      	ldr	r1, [pc, #104]	; (f594 <bus_fault.isra.3+0x120>)
    f52a:	f010 fcad 	bl	1fe88 <log_string_sync>
	}
	if ((SCB->CFSR & SCB_CFSR_IBUSERR_Msk) != 0) {
    f52e:	4b14      	ldr	r3, [pc, #80]	; (f580 <bus_fault.isra.3+0x10c>)
    f530:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    f532:	05d2      	lsls	r2, r2, #23
    f534:	d511      	bpl.n	f55a <bus_fault.isra.3+0xe6>
		PR_FAULT_INFO("  Instruction bus error");
    f536:	f04f 0000 	mov.w	r0, #0
    f53a:	2301      	movs	r3, #1
    f53c:	4916      	ldr	r1, [pc, #88]	; (f598 <bus_fault.isra.3+0x124>)
    f53e:	f363 0007 	bfi	r0, r3, #0, #8
    f542:	f364 108f 	bfi	r0, r4, #6, #10
#if !defined(CONFIG_ARMV7_M_ARMV8_M_FP)
	}
#else
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
		PR_FAULT_INFO("  Floating-point lazy state preservation error");
    f546:	f010 fc9f 	bl	1fe88 <log_string_sync>
#endif /* defined(CONFIG_ARM_MPU) && defined(CONFIG_CPU_HAS_NXP_MPU) */

	/* clear BFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;

	*recoverable = memory_fault_recoverable(esf);
    f54a:	2000      	movs	r0, #0
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
    f54c:	4a0c      	ldr	r2, [pc, #48]	; (f580 <bus_fault.isra.3+0x10c>)
    f54e:	6a93      	ldr	r3, [r2, #40]	; 0x28
    f550:	f443 437f 	orr.w	r3, r3, #65280	; 0xff00
    f554:	6293      	str	r3, [r2, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf);
    f556:	7030      	strb	r0, [r6, #0]

	return reason;
}
    f558:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
    f55a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    f55c:	049b      	lsls	r3, r3, #18
    f55e:	d5f4      	bpl.n	f54a <bus_fault.isra.3+0xd6>
		PR_FAULT_INFO("  Floating-point lazy state preservation error");
    f560:	f04f 0000 	mov.w	r0, #0
    f564:	2301      	movs	r3, #1
    f566:	f363 0007 	bfi	r0, r3, #0, #8
    f56a:	f364 108f 	bfi	r0, r4, #6, #10
    f56e:	490b      	ldr	r1, [pc, #44]	; (f59c <bus_fault.isra.3+0x128>)
    f570:	e7e9      	b.n	f546 <bus_fault.isra.3+0xd2>
    f572:	bf00      	nop
    f574:	00022984 	.word	0x00022984
    f578:	00022924 	.word	0x00022924
    f57c:	00023b34 	.word	0x00023b34
    f580:	e000ed00 	.word	0xe000ed00
    f584:	00023b4a 	.word	0x00023b4a
    f588:	00023c05 	.word	0x00023c05
    f58c:	00023b5b 	.word	0x00023b5b
    f590:	00023b74 	.word	0x00023b74
    f594:	00023b89 	.word	0x00023b89
    f598:	00023ba4 	.word	0x00023ba4
    f59c:	00023c65 	.word	0x00023c65

0000f5a0 <usage_fault.isra.4>:
 */
static u32_t usage_fault(const z_arch_esf_t *esf)
{
	u32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** USAGE FAULT *****");
    f5a0:	2301      	movs	r3, #1
    f5a2:	f04f 0000 	mov.w	r0, #0
static u32_t usage_fault(const z_arch_esf_t *esf)
    f5a6:	b510      	push	{r4, lr}
	PR_FAULT_INFO("***** USAGE FAULT *****");
    f5a8:	f363 0007 	bfi	r0, r3, #0, #8
    f5ac:	4c3a      	ldr	r4, [pc, #232]	; (f698 <usage_fault.isra.4+0xf8>)
    f5ae:	4b3b      	ldr	r3, [pc, #236]	; (f69c <usage_fault.isra.4+0xfc>)
    f5b0:	493b      	ldr	r1, [pc, #236]	; (f6a0 <usage_fault.isra.4+0x100>)
    f5b2:	1ae4      	subs	r4, r4, r3
    f5b4:	f3c4 04c9 	ubfx	r4, r4, #3, #10
    f5b8:	f364 108f 	bfi	r0, r4, #6, #10
    f5bc:	f010 fc64 	bl	1fe88 <log_string_sync>

	/* bits are sticky: they stack and must be reset */
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
    f5c0:	4b38      	ldr	r3, [pc, #224]	; (f6a4 <usage_fault.isra.4+0x104>)
    f5c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    f5c4:	0199      	lsls	r1, r3, #6
    f5c6:	d509      	bpl.n	f5dc <usage_fault.isra.4+0x3c>
		PR_FAULT_INFO("  Division by zero");
    f5c8:	f04f 0000 	mov.w	r0, #0
    f5cc:	2301      	movs	r3, #1
    f5ce:	f363 0007 	bfi	r0, r3, #0, #8
    f5d2:	f364 108f 	bfi	r0, r4, #6, #10
    f5d6:	4934      	ldr	r1, [pc, #208]	; (f6a8 <usage_fault.isra.4+0x108>)
    f5d8:	f010 fc56 	bl	1fe88 <log_string_sync>
	}
	if ((SCB->CFSR & SCB_CFSR_UNALIGNED_Msk) != 0) {
    f5dc:	4b31      	ldr	r3, [pc, #196]	; (f6a4 <usage_fault.isra.4+0x104>)
    f5de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    f5e0:	01da      	lsls	r2, r3, #7
    f5e2:	d509      	bpl.n	f5f8 <usage_fault.isra.4+0x58>
		PR_FAULT_INFO("  Unaligned memory access");
    f5e4:	f04f 0000 	mov.w	r0, #0
    f5e8:	2301      	movs	r3, #1
    f5ea:	f363 0007 	bfi	r0, r3, #0, #8
    f5ee:	f364 108f 	bfi	r0, r4, #6, #10
    f5f2:	492e      	ldr	r1, [pc, #184]	; (f6ac <usage_fault.isra.4+0x10c>)
    f5f4:	f010 fc48 	bl	1fe88 <log_string_sync>
	}
#if defined(CONFIG_ARMV8_M_MAINLINE)
	if ((SCB->CFSR & SCB_CFSR_STKOF_Msk) != 0) {
    f5f8:	4b2a      	ldr	r3, [pc, #168]	; (f6a4 <usage_fault.isra.4+0x104>)
    f5fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    f5fc:	02db      	lsls	r3, r3, #11
    f5fe:	d509      	bpl.n	f614 <usage_fault.isra.4+0x74>
		PR_FAULT_INFO("  Stack overflow (context area not valid)");
    f600:	f04f 0000 	mov.w	r0, #0
    f604:	2301      	movs	r3, #1
    f606:	f363 0007 	bfi	r0, r3, #0, #8
    f60a:	f364 108f 	bfi	r0, r4, #6, #10
    f60e:	4928      	ldr	r1, [pc, #160]	; (f6b0 <usage_fault.isra.4+0x110>)
    f610:	f010 fc3a 	bl	1fe88 <log_string_sync>
		 */
		reason = K_ERR_STACK_CHK_FAIL;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
	}
#endif /* CONFIG_ARMV8_M_MAINLINE */
	if ((SCB->CFSR & SCB_CFSR_NOCP_Msk) != 0) {
    f614:	4b23      	ldr	r3, [pc, #140]	; (f6a4 <usage_fault.isra.4+0x104>)
    f616:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    f618:	0318      	lsls	r0, r3, #12
    f61a:	d509      	bpl.n	f630 <usage_fault.isra.4+0x90>
		PR_FAULT_INFO("  No coprocessor instructions");
    f61c:	f04f 0000 	mov.w	r0, #0
    f620:	2301      	movs	r3, #1
    f622:	f363 0007 	bfi	r0, r3, #0, #8
    f626:	f364 108f 	bfi	r0, r4, #6, #10
    f62a:	4922      	ldr	r1, [pc, #136]	; (f6b4 <usage_fault.isra.4+0x114>)
    f62c:	f010 fc2c 	bl	1fe88 <log_string_sync>
	}
	if ((SCB->CFSR & SCB_CFSR_INVPC_Msk) != 0) {
    f630:	4b1c      	ldr	r3, [pc, #112]	; (f6a4 <usage_fault.isra.4+0x104>)
    f632:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    f634:	0359      	lsls	r1, r3, #13
    f636:	d509      	bpl.n	f64c <usage_fault.isra.4+0xac>
		PR_FAULT_INFO("  Illegal load of EXC_RETURN into PC");
    f638:	f04f 0000 	mov.w	r0, #0
    f63c:	2301      	movs	r3, #1
    f63e:	f363 0007 	bfi	r0, r3, #0, #8
    f642:	f364 108f 	bfi	r0, r4, #6, #10
    f646:	491c      	ldr	r1, [pc, #112]	; (f6b8 <usage_fault.isra.4+0x118>)
    f648:	f010 fc1e 	bl	1fe88 <log_string_sync>
	}
	if ((SCB->CFSR & SCB_CFSR_INVSTATE_Msk) != 0) {
    f64c:	4b15      	ldr	r3, [pc, #84]	; (f6a4 <usage_fault.isra.4+0x104>)
    f64e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    f650:	039a      	lsls	r2, r3, #14
    f652:	d509      	bpl.n	f668 <usage_fault.isra.4+0xc8>
		PR_FAULT_INFO("  Illegal use of the EPSR");
    f654:	f04f 0000 	mov.w	r0, #0
    f658:	2301      	movs	r3, #1
    f65a:	f363 0007 	bfi	r0, r3, #0, #8
    f65e:	f364 108f 	bfi	r0, r4, #6, #10
    f662:	4916      	ldr	r1, [pc, #88]	; (f6bc <usage_fault.isra.4+0x11c>)
    f664:	f010 fc10 	bl	1fe88 <log_string_sync>
	}
	if ((SCB->CFSR & SCB_CFSR_UNDEFINSTR_Msk) != 0) {
    f668:	4b0e      	ldr	r3, [pc, #56]	; (f6a4 <usage_fault.isra.4+0x104>)
    f66a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    f66c:	03db      	lsls	r3, r3, #15
    f66e:	d509      	bpl.n	f684 <usage_fault.isra.4+0xe4>
		PR_FAULT_INFO("  Attempt to execute undefined instruction");
    f670:	f04f 0000 	mov.w	r0, #0
    f674:	2301      	movs	r3, #1
    f676:	f363 0007 	bfi	r0, r3, #0, #8
    f67a:	f364 108f 	bfi	r0, r4, #6, #10
    f67e:	4910      	ldr	r1, [pc, #64]	; (f6c0 <usage_fault.isra.4+0x120>)
    f680:	f010 fc02 	bl	1fe88 <log_string_sync>
	}

	/* clear UFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
    f684:	4a07      	ldr	r2, [pc, #28]	; (f6a4 <usage_fault.isra.4+0x104>)

	return reason;
}
    f686:	2000      	movs	r0, #0
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
    f688:	6a93      	ldr	r3, [r2, #40]	; 0x28
    f68a:	ea6f 4303 	mvn.w	r3, r3, lsl #16
    f68e:	ea6f 4313 	mvn.w	r3, r3, lsr #16
    f692:	6293      	str	r3, [r2, #40]	; 0x28
}
    f694:	bd10      	pop	{r4, pc}
    f696:	bf00      	nop
    f698:	00022984 	.word	0x00022984
    f69c:	00022924 	.word	0x00022924
    f6a0:	00023d08 	.word	0x00023d08
    f6a4:	e000ed00 	.word	0xe000ed00
    f6a8:	00023d20 	.word	0x00023d20
    f6ac:	00023d33 	.word	0x00023d33
    f6b0:	00023d4d 	.word	0x00023d4d
    f6b4:	00023d77 	.word	0x00023d77
    f6b8:	00023d95 	.word	0x00023d95
    f6bc:	00023dba 	.word	0x00023dba
    f6c0:	00023dd4 	.word	0x00023dd4

0000f6c4 <z_arm_fault>:
 * @param psp PSP value immediately after the exception occurred
 * @param exc_return EXC_RETURN value present in LR after exception entry.
 *
 */
void z_arm_fault(u32_t msp, u32_t psp, u32_t exc_return)
{
    f6c4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	u32_t reason = K_ERR_CPU_EXCEPTION;
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    f6c8:	4b70      	ldr	r3, [pc, #448]	; (f88c <z_arm_fault+0x1c8>)
{
    f6ca:	b09d      	sub	sp, #116	; 0x74
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    f6cc:	f8d3 8004 	ldr.w	r8, [r3, #4]
{
    f6d0:	4606      	mov	r6, r0
    f6d2:	4689      	mov	r9, r1
    f6d4:	4614      	mov	r4, r2
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    f6d6:	f3c8 0708 	ubfx	r7, r8, #0, #9
    f6da:	2500      	movs	r5, #0
    f6dc:	f385 8811 	msr	BASEPRI, r5
    f6e0:	f3bf 8f6f 	isb	sy
	if ((exc_return & EXC_RETURN_INDICATOR_PREFIX) !=
    f6e4:	f002 437f 	and.w	r3, r2, #4278190080	; 0xff000000
    f6e8:	f1b3 4f7f 	cmp.w	r3, #4278190080	; 0xff000000
    f6ec:	d11b      	bne.n	f726 <z_arm_fault+0x62>
	if (exc_return & EXC_RETURN_EXCEPTION_SECURE_Secure) {
    f6ee:	07d0      	lsls	r0, r2, #31
    f6f0:	d419      	bmi.n	f726 <z_arm_fault+0x62>
	if (exc_return & EXC_RETURN_RETURN_STACK_Secure) {
    f6f2:	0651      	lsls	r1, r2, #25
    f6f4:	d403      	bmi.n	f6fe <z_arm_fault+0x3a>
		if (exc_return & EXC_RETURN_MODE_THREAD) {
    f6f6:	0722      	lsls	r2, r4, #28
    f6f8:	d412      	bmi.n	f720 <z_arm_fault+0x5c>
			*nested_exc = true;
    f6fa:	2501      	movs	r5, #1
    f6fc:	e012      	b.n	f724 <z_arm_fault+0x60>
		PR_FAULT_INFO("Exception occurred in Secure State");
    f6fe:	2301      	movs	r3, #1
    f700:	f04f 0000 	mov.w	r0, #0
	return ((u8_t *)data - (u8_t *)__log_const_start)/
    f704:	4a62      	ldr	r2, [pc, #392]	; (f890 <z_arm_fault+0x1cc>)
    f706:	f363 0007 	bfi	r0, r3, #0, #8
    f70a:	4b62      	ldr	r3, [pc, #392]	; (f894 <z_arm_fault+0x1d0>)
    f70c:	4962      	ldr	r1, [pc, #392]	; (f898 <z_arm_fault+0x1d4>)
    f70e:	1a9b      	subs	r3, r3, r2
    f710:	08db      	lsrs	r3, r3, #3
    f712:	f363 108f 	bfi	r0, r3, #6, #10
    f716:	f010 fbb7 	bl	1fe88 <log_string_sync>
		if (exc_return & EXC_RETURN_SPSEL_PROCESS) {
    f71a:	f014 0504 	ands.w	r5, r4, #4
    f71e:	d001      	beq.n	f724 <z_arm_fault+0x60>
			ptr_esf = (z_arch_esf_t *)psp;
    f720:	464e      	mov	r6, r9
	*nested_exc = false;
    f722:	2500      	movs	r5, #0

	/* Retrieve the Exception Stack Frame (ESF) to be supplied
	 * as argument to the remainder of the fault handling process.
	 */
	 esf = get_esf(msp, psp, exc_return, &nested_exc);
	__ASSERT(esf != NULL,
    f724:	b97e      	cbnz	r6, f746 <z_arm_fault+0x82>
    f726:	f240 33b1 	movw	r3, #945	; 0x3b1
    f72a:	4a5c      	ldr	r2, [pc, #368]	; (f89c <z_arm_fault+0x1d8>)
    f72c:	495c      	ldr	r1, [pc, #368]	; (f8a0 <z_arm_fault+0x1dc>)
    f72e:	485d      	ldr	r0, [pc, #372]	; (f8a4 <z_arm_fault+0x1e0>)
    f730:	f010 fb53 	bl	1fdda <printk>
    f734:	485c      	ldr	r0, [pc, #368]	; (f8a8 <z_arm_fault+0x1e4>)
    f736:	f010 fb50 	bl	1fdda <printk>
    f73a:	f240 31b1 	movw	r1, #945	; 0x3b1
    f73e:	4857      	ldr	r0, [pc, #348]	; (f89c <z_arm_fault+0x1d8>)
    f740:	f010 fb91 	bl	1fe66 <assert_post_action>
    f744:	2600      	movs	r6, #0
	*recoverable = false;
    f746:	2300      	movs	r3, #0
    f748:	f88d 3007 	strb.w	r3, [sp, #7]
	switch (fault) {
    f74c:	1efb      	subs	r3, r7, #3
    f74e:	2b09      	cmp	r3, #9
    f750:	d87f      	bhi.n	f852 <z_arm_fault+0x18e>
    f752:	e8df f003 	tbb	[pc, r3]
    f756:	6905      	.short	0x6905
    f758:	7e7e4c6d 	.word	0x7e7e4c6d
    f75c:	717e7e7e 	.word	0x717e7e7e
	PR_FAULT_INFO("***** HARD FAULT *****");
    f760:	2301      	movs	r3, #1
    f762:	f04f 0000 	mov.w	r0, #0
	*recoverable = false;
    f766:	f04f 0800 	mov.w	r8, #0
	PR_FAULT_INFO("***** HARD FAULT *****");
    f76a:	f363 0007 	bfi	r0, r3, #0, #8
    f76e:	4f49      	ldr	r7, [pc, #292]	; (f894 <z_arm_fault+0x1d0>)
    f770:	4b47      	ldr	r3, [pc, #284]	; (f890 <z_arm_fault+0x1cc>)
    f772:	494e      	ldr	r1, [pc, #312]	; (f8ac <z_arm_fault+0x1e8>)
    f774:	1aff      	subs	r7, r7, r3
    f776:	f3c7 07c9 	ubfx	r7, r7, #3, #10
    f77a:	f367 108f 	bfi	r0, r7, #6, #10
    f77e:	f010 fb83 	bl	1fe88 <log_string_sync>
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
    f782:	4b42      	ldr	r3, [pc, #264]	; (f88c <z_arm_fault+0x1c8>)
	*recoverable = false;
    f784:	f88d 8007 	strb.w	r8, [sp, #7]
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
    f788:	6adc      	ldr	r4, [r3, #44]	; 0x2c
    f78a:	f014 0402 	ands.w	r4, r4, #2
    f78e:	d00b      	beq.n	f7a8 <z_arm_fault+0xe4>
		PR_EXC("  Bus fault on vector table read");
    f790:	f04f 0000 	mov.w	r0, #0
    f794:	2301      	movs	r3, #1
    f796:	4946      	ldr	r1, [pc, #280]	; (f8b0 <z_arm_fault+0x1ec>)
    f798:	f363 0007 	bfi	r0, r3, #0, #8
    f79c:	f367 108f 	bfi	r0, r7, #6, #10
	PR_FAULT_INFO(
    f7a0:	f010 fb72 	bl	1fe88 <log_string_sync>
	u32_t reason = K_ERR_CPU_EXCEPTION;
    f7a4:	2400      	movs	r4, #0
    f7a6:	e025      	b.n	f7f4 <z_arm_fault+0x130>
	} else if ((SCB->HFSR & SCB_HFSR_FORCED_Msk) != 0) {
    f7a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    f7aa:	005b      	lsls	r3, r3, #1
    f7ac:	d522      	bpl.n	f7f4 <z_arm_fault+0x130>
		PR_EXC("  Fault escalation (see below)");
    f7ae:	2301      	movs	r3, #1
    f7b0:	f04f 0000 	mov.w	r0, #0
    f7b4:	f363 0007 	bfi	r0, r3, #0, #8
    f7b8:	f367 108f 	bfi	r0, r7, #6, #10
    f7bc:	493d      	ldr	r1, [pc, #244]	; (f8b4 <z_arm_fault+0x1f0>)
    f7be:	f010 fb63 	bl	1fe88 <log_string_sync>
		if (SCB_MMFSR != 0) {
    f7c2:	4b3d      	ldr	r3, [pc, #244]	; (f8b8 <z_arm_fault+0x1f4>)
    f7c4:	781b      	ldrb	r3, [r3, #0]
    f7c6:	b12b      	cbz	r3, f7d4 <z_arm_fault+0x110>
			reason = mem_manage_fault(esf, 1, recoverable);
    f7c8:	2001      	movs	r0, #1
    f7ca:	f10d 0107 	add.w	r1, sp, #7
		reason = mem_manage_fault(esf, 0, recoverable);
    f7ce:	f7ff fdaf 	bl	f330 <mem_manage_fault.isra.2>
    f7d2:	e00e      	b.n	f7f2 <z_arm_fault+0x12e>
		} else if (SCB_BFSR != 0) {
    f7d4:	4b39      	ldr	r3, [pc, #228]	; (f8bc <z_arm_fault+0x1f8>)
    f7d6:	781b      	ldrb	r3, [r3, #0]
    f7d8:	b12b      	cbz	r3, f7e6 <z_arm_fault+0x122>
			reason = bus_fault(esf, 1, recoverable);
    f7da:	2001      	movs	r0, #1
    f7dc:	f10d 0107 	add.w	r1, sp, #7
		reason = bus_fault(esf, 0, recoverable);
    f7e0:	f7ff fe48 	bl	f474 <bus_fault.isra.3>
    f7e4:	e005      	b.n	f7f2 <z_arm_fault+0x12e>
		} else if (SCB_UFSR != 0) {
    f7e6:	4b36      	ldr	r3, [pc, #216]	; (f8c0 <z_arm_fault+0x1fc>)
    f7e8:	881b      	ldrh	r3, [r3, #0]
    f7ea:	b29b      	uxth	r3, r3
    f7ec:	b113      	cbz	r3, f7f4 <z_arm_fault+0x130>
			reason = usage_fault(esf);
    f7ee:	f7ff fed7 	bl	f5a0 <usage_fault.isra.4>
    f7f2:	4604      	mov	r4, r0
		"ESF could not be retrieved successfully. Shall never occur.");

	reason = fault_handle(esf, fault, &recoverable);
	if (recoverable) {
    f7f4:	f89d 3007 	ldrb.w	r3, [sp, #7]
    f7f8:	b99b      	cbnz	r3, f822 <z_arm_fault+0x15e>
		return;
	}

	/* Copy ESF */
	memcpy(&esf_copy, esf, sizeof(z_arch_esf_t));
    f7fa:	2268      	movs	r2, #104	; 0x68
    f7fc:	4631      	mov	r1, r6
    f7fe:	a802      	add	r0, sp, #8
    f800:	f012 f89b 	bl	2193a <memcpy>
	/* Overwrite stacked IPSR to mark a nested exception,
	 * or a return to Thread mode. Note that this may be
	 * required, if the retrieved ESF contents are invalid
	 * due to, for instance, a stacking error.
	 */
	if (nested_exc) {
    f804:	9b09      	ldr	r3, [sp, #36]	; 0x24
    f806:	2d00      	cmp	r5, #0
    f808:	d03a      	beq.n	f880 <z_arm_fault+0x1bc>
		if ((esf_copy.basic.xpsr & IPSR_ISR_Msk) == 0) {
    f80a:	f3c3 0208 	ubfx	r2, r3, #0, #9
    f80e:	b922      	cbnz	r2, f81a <z_arm_fault+0x156>
			esf_copy.basic.xpsr |= IPSR_ISR_Msk;
    f810:	ea6f 2353 	mvn.w	r3, r3, lsr #9
    f814:	ea6f 2343 	mvn.w	r3, r3, lsl #9
		}
	} else {
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
    f818:	9309      	str	r3, [sp, #36]	; 0x24
	}

	z_arm_fatal_error(reason, &esf_copy);
    f81a:	a902      	add	r1, sp, #8
    f81c:	4620      	mov	r0, r4
    f81e:	f7ff fcb3 	bl	f188 <z_arm_fatal_error>
}
    f822:	b01d      	add	sp, #116	; 0x74
    f824:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		reason = mem_manage_fault(esf, 0, recoverable);
    f828:	f10d 0107 	add.w	r1, sp, #7
    f82c:	2000      	movs	r0, #0
    f82e:	e7ce      	b.n	f7ce <z_arm_fault+0x10a>
		reason = bus_fault(esf, 0, recoverable);
    f830:	f10d 0107 	add.w	r1, sp, #7
    f834:	2000      	movs	r0, #0
    f836:	e7d3      	b.n	f7e0 <z_arm_fault+0x11c>
	PR_FAULT_INFO(
    f838:	2301      	movs	r3, #1
    f83a:	f04f 0000 	mov.w	r0, #0
    f83e:	4a14      	ldr	r2, [pc, #80]	; (f890 <z_arm_fault+0x1cc>)
    f840:	f363 0007 	bfi	r0, r3, #0, #8
    f844:	4b13      	ldr	r3, [pc, #76]	; (f894 <z_arm_fault+0x1d0>)
    f846:	491f      	ldr	r1, [pc, #124]	; (f8c4 <z_arm_fault+0x200>)
    f848:	1a9b      	subs	r3, r3, r2
    f84a:	08db      	lsrs	r3, r3, #3
    f84c:	f363 108f 	bfi	r0, r3, #6, #10
    f850:	e7a6      	b.n	f7a0 <z_arm_fault+0xdc>
	PR_FAULT_INFO("***** %s %d) *****",
    f852:	2301      	movs	r3, #1
    f854:	f04f 0000 	mov.w	r0, #0
    f858:	4a0d      	ldr	r2, [pc, #52]	; (f890 <z_arm_fault+0x1cc>)
    f85a:	f363 0007 	bfi	r0, r3, #0, #8
    f85e:	4b0d      	ldr	r3, [pc, #52]	; (f894 <z_arm_fault+0x1d0>)
    f860:	4919      	ldr	r1, [pc, #100]	; (f8c8 <z_arm_fault+0x204>)
    f862:	1a9b      	subs	r3, r3, r2
    f864:	08db      	lsrs	r3, r3, #3
    f866:	f418 7ff8 	tst.w	r8, #496	; 0x1f0
    f86a:	f363 108f 	bfi	r0, r3, #6, #10
    f86e:	4a17      	ldr	r2, [pc, #92]	; (f8cc <z_arm_fault+0x208>)
    f870:	f1a7 0310 	sub.w	r3, r7, #16
    f874:	bf08      	it	eq
    f876:	460a      	moveq	r2, r1
    f878:	4915      	ldr	r1, [pc, #84]	; (f8d0 <z_arm_fault+0x20c>)
    f87a:	f010 fb05 	bl	1fe88 <log_string_sync>
    f87e:	e791      	b.n	f7a4 <z_arm_fault+0xe0>
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
    f880:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
    f884:	f023 0301 	bic.w	r3, r3, #1
    f888:	e7c6      	b.n	f818 <z_arm_fault+0x154>
    f88a:	bf00      	nop
    f88c:	e000ed00 	.word	0xe000ed00
    f890:	00022924 	.word	0x00022924
    f894:	00022984 	.word	0x00022984
    f898:	00023e2d 	.word	0x00023e2d
    f89c:	00023c94 	.word	0x00023c94
    f8a0:	00023e50 	.word	0x00023e50
    f8a4:	00023451 	.word	0x00023451
    f8a8:	00023e63 	.word	0x00023e63
    f8ac:	00023ea1 	.word	0x00023ea1
    f8b0:	00023eb8 	.word	0x00023eb8
    f8b4:	00023ed9 	.word	0x00023ed9
    f8b8:	e000ed28 	.word	0xe000ed28
    f8bc:	e000ed29 	.word	0xe000ed29
    f8c0:	e000ed2a 	.word	0xe000ed2a
    f8c4:	00023ef8 	.word	0x00023ef8
    f8c8:	00023dff 	.word	0x00023dff
    f8cc:	00023e14 	.word	0x00023e14
    f8d0:	00023f2e 	.word	0x00023f2e

0000f8d4 <z_arm_fault_init>:
 */
void z_arm_fault_init(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
    f8d4:	4a02      	ldr	r2, [pc, #8]	; (f8e0 <z_arm_fault_init+0xc>)
    f8d6:	6953      	ldr	r3, [r2, #20]
    f8d8:	f043 0310 	orr.w	r3, r3, #16
    f8dc:	6153      	str	r3, [r2, #20]
	 * Stack to attempt to descend into secure region, in which case a
	 * Secure Hard Fault will occur and we can track the fault from there.
	 */
	SCB->CCR |= SCB_CCR_STKOFHFNMIGN_Msk;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
}
    f8de:	4770      	bx	lr
    f8e0:	e000ed00 	.word	0xe000ed00

0000f8e4 <sys_arch_reboot>:
  __ASM volatile ("dsb 0xF":::"memory");
    f8e4:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
    f8e8:	4905      	ldr	r1, [pc, #20]	; (f900 <sys_arch_reboot+0x1c>)
    f8ea:	4b06      	ldr	r3, [pc, #24]	; (f904 <sys_arch_reboot+0x20>)
    f8ec:	68ca      	ldr	r2, [r1, #12]
    f8ee:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
    f8f2:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
    f8f4:	60cb      	str	r3, [r1, #12]
    f8f6:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
    f8fa:	bf00      	nop
    f8fc:	e7fd      	b.n	f8fa <sys_arch_reboot+0x16>
    f8fe:	bf00      	nop
    f900:	e000ed00 	.word	0xe000ed00
    f904:	05fa0004 	.word	0x05fa0004

0000f908 <z_arm_int_lib_init>:
 * @return N/A
 */

void z_arm_int_lib_init(void)
{
	int irq = 0;
    f908:	2300      	movs	r3, #0
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    f90a:	2120      	movs	r1, #32
    f90c:	4803      	ldr	r0, [pc, #12]	; (f91c <z_arm_int_lib_init+0x14>)
    f90e:	18c2      	adds	r2, r0, r3

	for (; irq < CONFIG_NUM_IRQS; irq++) {
    f910:	3301      	adds	r3, #1
    f912:	2b41      	cmp	r3, #65	; 0x41
    f914:	f882 1300 	strb.w	r1, [r2, #768]	; 0x300
    f918:	d1f9      	bne.n	f90e <z_arm_int_lib_init+0x6>
		NVIC_SetPriority((IRQn_Type)irq, _IRQ_PRIO_OFFSET);
	}
}
    f91a:	4770      	bx	lr
    f91c:	e000e100 	.word	0xe000e100

0000f920 <z_impl_k_thread_abort>:
#include <sys/__assert.h>

extern void z_thread_single_abort(struct k_thread *thread);

void z_impl_k_thread_abort(k_tid_t thread)
{
    f920:	b538      	push	{r3, r4, r5, lr}
    f922:	4604      	mov	r4, r0
	__asm__ volatile(
    f924:	f04f 0320 	mov.w	r3, #32
    f928:	f3ef 8511 	mrs	r5, BASEPRI
    f92c:	f383 8811 	msr	BASEPRI, r3
    f930:	f3bf 8f6f 	isb	sy
	unsigned int key;

	key = irq_lock();

	__ASSERT(!(thread->base.user_options & K_ESSENTIAL),
    f934:	7b03      	ldrb	r3, [r0, #12]
    f936:	07db      	lsls	r3, r3, #31
    f938:	d50c      	bpl.n	f954 <z_impl_k_thread_abort+0x34>
    f93a:	4912      	ldr	r1, [pc, #72]	; (f984 <z_impl_k_thread_abort+0x64>)
    f93c:	2324      	movs	r3, #36	; 0x24
    f93e:	4a12      	ldr	r2, [pc, #72]	; (f988 <z_impl_k_thread_abort+0x68>)
    f940:	4812      	ldr	r0, [pc, #72]	; (f98c <z_impl_k_thread_abort+0x6c>)
    f942:	f010 fa4a 	bl	1fdda <printk>
    f946:	4812      	ldr	r0, [pc, #72]	; (f990 <z_impl_k_thread_abort+0x70>)
    f948:	f010 fa47 	bl	1fdda <printk>
    f94c:	2124      	movs	r1, #36	; 0x24
    f94e:	480e      	ldr	r0, [pc, #56]	; (f988 <z_impl_k_thread_abort+0x68>)
    f950:	f010 fa89 	bl	1fe66 <assert_post_action>
		 "essential thread aborted");

	z_thread_single_abort(thread);
    f954:	4620      	mov	r0, r4
    f956:	f00c ff0f 	bl	1c778 <z_thread_single_abort>
	z_thread_monitor_exit(thread);

	if (_current == thread) {
    f95a:	4b0e      	ldr	r3, [pc, #56]	; (f994 <z_impl_k_thread_abort+0x74>)
    f95c:	689b      	ldr	r3, [r3, #8]
    f95e:	42a3      	cmp	r3, r4
    f960:	d10b      	bne.n	f97a <z_impl_k_thread_abort+0x5a>
		if ((SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk) == 0) {
    f962:	4b0d      	ldr	r3, [pc, #52]	; (f998 <z_impl_k_thread_abort+0x78>)
    f964:	685a      	ldr	r2, [r3, #4]
    f966:	f3c2 0208 	ubfx	r2, r2, #0, #9
    f96a:	b912      	cbnz	r2, f972 <z_impl_k_thread_abort+0x52>
	int ret;
	z_check_stack_sentinel();
#ifndef CONFIG_ARM
	sys_trace_thread_switched_out();
#endif
	ret = arch_swap(key);
    f96c:	4628      	mov	r0, r5
    f96e:	f7ff fb25 	bl	efbc <arch_swap>
			(void)z_swap_irqlock(key);
			CODE_UNREACHABLE;
		} else {
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    f972:	685a      	ldr	r2, [r3, #4]
    f974:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
    f978:	605a      	str	r2, [r3, #4]
		}
	}

	/* The abort handler might have altered the ready queue. */
	z_reschedule_irqlock(key);
    f97a:	4628      	mov	r0, r5
}
    f97c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule_irqlock(key);
    f980:	f011 bef5 	b.w	2176e <z_reschedule_irqlock>
    f984:	00023f82 	.word	0x00023f82
    f988:	00023f41 	.word	0x00023f41
    f98c:	00023451 	.word	0x00023451
    f990:	00023fb0 	.word	0x00023fb0
    f994:	20021398 	.word	0x20021398
    f998:	e000ed00 	.word	0xe000ed00

0000f99c <z_arm_configure_static_mpu_regions>:
 *
 * For some MPU architectures, such as the unmodified ARMv8-M MPU,
 * the function must execute with MPU enabled.
 */
void z_arm_configure_static_mpu_regions(void)
{
    f99c:	b510      	push	{r4, lr}
		.size = (u32_t)&_nocache_ram_size,
		.attr = K_MEM_PARTITION_P_RW_U_NA_NOCACHE,
		};
#endif /* CONFIG_NOCACHE_MEMORY */
#if defined(CONFIG_ARCH_HAS_RAMFUNC_SUPPORT)
		const struct k_mem_partition ramfunc_region =
    f99e:	4b0e      	ldr	r3, [pc, #56]	; (f9d8 <z_arm_configure_static_mpu_regions+0x3c>)
{
    f9a0:	b088      	sub	sp, #32
		const struct k_mem_partition ramfunc_region =
    f9a2:	9302      	str	r3, [sp, #8]
    f9a4:	4b0d      	ldr	r3, [pc, #52]	; (f9dc <z_arm_configure_static_mpu_regions+0x40>)
	/* Configure the static MPU regions within firmware SRAM boundaries.
	 * Start address of the image is given by _image_ram_start. The end
	 * of the firmware SRAM area is marked by __kernel_ram_end, taking
	 * into account the unused SRAM area, as well.
	 */
	arm_core_mpu_configure_static_mpu_regions(static_regions,
    f9a6:	4c0e      	ldr	r4, [pc, #56]	; (f9e0 <z_arm_configure_static_mpu_regions+0x44>)
		const struct k_mem_partition ramfunc_region =
    f9a8:	9303      	str	r3, [sp, #12]
    f9aa:	4b0e      	ldr	r3, [pc, #56]	; (f9e4 <z_arm_configure_static_mpu_regions+0x48>)
	arm_core_mpu_configure_static_mpu_regions(static_regions,
    f9ac:	4a0e      	ldr	r2, [pc, #56]	; (f9e8 <z_arm_configure_static_mpu_regions+0x4c>)
		const struct k_mem_partition ramfunc_region =
    f9ae:	9304      	str	r3, [sp, #16]
	const struct k_mem_partition *static_regions[] = {
    f9b0:	ab02      	add	r3, sp, #8
    f9b2:	9301      	str	r3, [sp, #4]
	arm_core_mpu_configure_static_mpu_regions(static_regions,
    f9b4:	a801      	add	r0, sp, #4
    f9b6:	4623      	mov	r3, r4
    f9b8:	2101      	movs	r1, #1
    f9ba:	f000 f97d 	bl	fcb8 <arm_core_mpu_configure_static_mpu_regions>
	/* Define a constant array of k_mem_partition objects that holds the
	 * boundaries of the areas, inside which dynamic region programming
	 * is allowed. The information is passed to the underlying driver at
	 * initialization.
	 */
	const struct k_mem_partition dyn_region_areas[] = {
    f9be:	2300      	movs	r3, #0
    f9c0:	9307      	str	r3, [sp, #28]
		{
		.start = _MPU_DYNAMIC_REGIONS_AREA_START,
    f9c2:	4b0a      	ldr	r3, [pc, #40]	; (f9ec <z_arm_configure_static_mpu_regions+0x50>)
		.size =  _MPU_DYNAMIC_REGIONS_AREA_SIZE,
		}
	};

	arm_core_mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
    f9c4:	2101      	movs	r1, #1
		.size =  _MPU_DYNAMIC_REGIONS_AREA_SIZE,
    f9c6:	1ae4      	subs	r4, r4, r3
	arm_core_mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
    f9c8:	a805      	add	r0, sp, #20
	const struct k_mem_partition dyn_region_areas[] = {
    f9ca:	9305      	str	r3, [sp, #20]
    f9cc:	9406      	str	r4, [sp, #24]
	arm_core_mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
    f9ce:	f000 f997 	bl	fd00 <arm_core_mpu_mark_areas_for_dynamic_regions>
		ARRAY_SIZE(dyn_region_areas));
#endif /* CONFIG_MPU_REQUIRES_NON_OVERLAPPING_REGIONS */
}
    f9d2:	b008      	add	sp, #32
    f9d4:	bd10      	pop	{r4, pc}
    f9d6:	bf00      	nop
    f9d8:	20020000 	.word	0x20020000
    f9dc:	00000000 	.word	0x00000000
    f9e0:	20040000 	.word	0x20040000
    f9e4:	00010006 	.word	0x00010006
    f9e8:	20020000 	.word	0x20020000
    f9ec:	20020000 	.word	0x20020000

0000f9f0 <region_init>:
 * Note:
 *   The caller must provide a valid region index.
 */
static void region_init(const u32_t index,
	const struct arm_mpu_region *region_conf)
{
    f9f0:	b510      	push	{r4, lr}
	ARM_MPU_SetRegion(
		/* RNR */
		index,
		/* RBAR */
		(region_conf->base & MPU_RBAR_BASE_Msk)
    f9f2:	680b      	ldr	r3, [r1, #0]
		| (region_conf->attr.rbar &
    f9f4:	7a0c      	ldrb	r4, [r1, #8]
		(region_conf->base & MPU_RBAR_BASE_Msk)
    f9f6:	f023 021f 	bic.w	r2, r3, #31
		| (region_conf->attr.rbar &
    f9fa:	f004 031f 	and.w	r3, r4, #31
    f9fe:	431a      	orrs	r2, r3
			(MPU_RBAR_XN_Msk | MPU_RBAR_AP_Msk | MPU_RBAR_SH_Msk)),
		/* RLAR */
		(region_conf->attr.r_limit & MPU_RLAR_LIMIT_Msk)
    fa00:	68cb      	ldr	r3, [r1, #12]
		| ((region_conf->attr.mair_idx << MPU_RLAR_AttrIndx_Pos)
    fa02:	0964      	lsrs	r4, r4, #5
		(region_conf->attr.r_limit & MPU_RLAR_LIMIT_Msk)
    fa04:	f023 031f 	bic.w	r3, r3, #31
* \param rbar Value for RBAR register.
* \param rlar Value for RLAR register.
*/   
__STATIC_INLINE void ARM_MPU_SetRegionEx(MPU_Type* mpu, uint32_t rnr, uint32_t rbar, uint32_t rlar)
{
  mpu->RNR = rnr;
    fa08:	4904      	ldr	r1, [pc, #16]	; (fa1c <region_init+0x2c>)
		| ((region_conf->attr.mair_idx << MPU_RLAR_AttrIndx_Pos)
    fa0a:	ea43 0344 	orr.w	r3, r3, r4, lsl #1
			& MPU_RLAR_AttrIndx_Msk)
		| MPU_RLAR_EN_Msk
    fa0e:	f043 0301 	orr.w	r3, r3, #1
    fa12:	6088      	str	r0, [r1, #8]
  mpu->RBAR = rbar;
    fa14:	60ca      	str	r2, [r1, #12]
  mpu->RLAR = rlar;
    fa16:	610b      	str	r3, [r1, #16]
	);

	LOG_DBG("[%d] 0x%08x 0x%08x 0x%08x 0x%08x",
			index, region_conf->base, region_conf->attr.rbar,
			region_conf->attr.mair_idx, region_conf->attr.r_limit);
}
    fa18:	bd10      	pop	{r4, pc}
    fa1a:	bf00      	nop
    fa1c:	e000ed90 	.word	0xe000ed90

0000fa20 <region_allocate_and_init>:

static int region_allocate_and_init(const u8_t index,
	const struct arm_mpu_region *region_conf)
{
	/* Attempt to allocate new region index. */
	if (index > (get_num_regions() - 1)) {
    fa20:	280f      	cmp	r0, #15
{
    fa22:	b510      	push	{r4, lr}
    fa24:	4604      	mov	r4, r0
	if (index > (get_num_regions() - 1)) {
    fa26:	d912      	bls.n	fa4e <region_allocate_and_init+0x2e>

		/* No available MPU region index. */
		LOG_ERR("Failed to allocate new MPU region %u\n", index);
    fa28:	2301      	movs	r3, #1
    fa2a:	f04f 0000 	mov.w	r0, #0
    fa2e:	4a09      	ldr	r2, [pc, #36]	; (fa54 <region_allocate_and_init+0x34>)
    fa30:	f363 0007 	bfi	r0, r3, #0, #8
    fa34:	4b08      	ldr	r3, [pc, #32]	; (fa58 <region_allocate_and_init+0x38>)
    fa36:	4909      	ldr	r1, [pc, #36]	; (fa5c <region_allocate_and_init+0x3c>)
    fa38:	1a9b      	subs	r3, r3, r2
    fa3a:	08db      	lsrs	r3, r3, #3
    fa3c:	4622      	mov	r2, r4
    fa3e:	f363 108f 	bfi	r0, r3, #6, #10
    fa42:	f010 fa21 	bl	1fe88 <log_string_sync>
		return -EINVAL;
    fa46:	f06f 0415 	mvn.w	r4, #21

	/* Program region */
	region_init(index, region_conf);

	return index;
}
    fa4a:	4620      	mov	r0, r4
    fa4c:	bd10      	pop	{r4, pc}
	region_init(index, region_conf);
    fa4e:	f7ff ffcf 	bl	f9f0 <region_init>
	return index;
    fa52:	e7fa      	b.n	fa4a <region_allocate_and_init+0x2a>
    fa54:	00022924 	.word	0x00022924
    fa58:	00022974 	.word	0x00022974
    fa5c:	00024183 	.word	0x00024183

0000fa60 <mpu_configure_regions_and_partition.constprop.2>:
 * sanity check of the memory regions to be programmed.
 *
 * The function performs a full partition of the background memory
 * area, effectively, leaving no space in this area uncovered by MPU.
 */
static int mpu_configure_regions_and_partition(const struct k_mem_partition
    fa60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    fa64:	4607      	mov	r7, r0
    fa66:	4688      	mov	r8, r1
    fa68:	4614      	mov	r4, r2
	bool do_sanity_check)
{
	int i;
	int reg_index = start_reg_index;

	for (i = 0; i < regions_num; i++) {
    fa6a:	2600      	movs	r6, #0
	MPU->RNR = index;
    fa6c:	4d58      	ldr	r5, [pc, #352]	; (fbd0 <mpu_configure_regions_and_partition.constprop.2+0x170>)
static int mpu_configure_regions_and_partition(const struct k_mem_partition
    fa6e:	b085      	sub	sp, #20
	for (i = 0; i < regions_num; i++) {
    fa70:	4546      	cmp	r6, r8
    fa72:	da3d      	bge.n	faf0 <mpu_configure_regions_and_partition.constprop.2+0x90>
		if (regions[i]->size == 0U) {
    fa74:	f857 3026 	ldr.w	r3, [r7, r6, lsl #2]
    fa78:	f8d3 9004 	ldr.w	r9, [r3, #4]
    fa7c:	f1b9 0f00 	cmp.w	r9, #0
    fa80:	d059      	beq.n	fb36 <mpu_configure_regions_and_partition.constprop.2+0xd6>
		&&
    fa82:	f1b9 0f1f 	cmp.w	r9, #31
    fa86:	d922      	bls.n	face <mpu_configure_regions_and_partition.constprop.2+0x6e>
		&&
    fa88:	f019 0f1f 	tst.w	r9, #31
    fa8c:	d11f      	bne.n	face <mpu_configure_regions_and_partition.constprop.2+0x6e>
		((part->start &
    fa8e:	f8d3 a000 	ldr.w	sl, [r3]
		&&
    fa92:	f01a 0f1f 	tst.w	sl, #31
    fa96:	d11a      	bne.n	face <mpu_configure_regions_and_partition.constprop.2+0x6e>
	u32_t region_start_addr = arm_cmse_mpu_region_get(start);
    fa98:	4650      	mov	r0, sl
    fa9a:	f010 fa9a 	bl	1ffd2 <arm_cmse_mpu_region_get>
    fa9e:	4683      	mov	fp, r0
	u32_t region_end_addr = arm_cmse_mpu_region_get(start + size - 1);
    faa0:	eb09 000a 	add.w	r0, r9, sl
    faa4:	3801      	subs	r0, #1
    faa6:	f010 fa94 	bl	1ffd2 <arm_cmse_mpu_region_get>
	if (region_start_addr == region_end_addr) {
    faaa:	4583      	cmp	fp, r0
    faac:	d024      	beq.n	faf8 <mpu_configure_regions_and_partition.constprop.2+0x98>
	return -EINVAL;
    faae:	f06f 0b15 	mvn.w	fp, #21
		int u_reg_index =
			get_region_index(regions[i]->start, regions[i]->size);

		if ((u_reg_index == -EINVAL) ||
			(u_reg_index > (reg_index - 1))) {
			LOG_ERR("Invalid underlying region index %u",
    fab2:	2301      	movs	r3, #1
    fab4:	f04f 0000 	mov.w	r0, #0
    fab8:	4a46      	ldr	r2, [pc, #280]	; (fbd4 <mpu_configure_regions_and_partition.constprop.2+0x174>)
    faba:	f363 0007 	bfi	r0, r3, #0, #8
    fabe:	4b46      	ldr	r3, [pc, #280]	; (fbd8 <mpu_configure_regions_and_partition.constprop.2+0x178>)
    fac0:	4946      	ldr	r1, [pc, #280]	; (fbdc <mpu_configure_regions_and_partition.constprop.2+0x17c>)
    fac2:	1a9b      	subs	r3, r3, r2
    fac4:	08db      	lsrs	r3, r3, #3
    fac6:	f363 108f 	bfi	r0, r3, #6, #10
    faca:	465a      	mov	r2, fp
    facc:	e00c      	b.n	fae8 <mpu_configure_regions_and_partition.constprop.2+0x88>
			LOG_ERR("Partition %u: sanity check failed.", i);
    face:	2301      	movs	r3, #1
    fad0:	f04f 0000 	mov.w	r0, #0
    fad4:	4a3f      	ldr	r2, [pc, #252]	; (fbd4 <mpu_configure_regions_and_partition.constprop.2+0x174>)
    fad6:	f363 0007 	bfi	r0, r3, #0, #8
    fada:	4b3f      	ldr	r3, [pc, #252]	; (fbd8 <mpu_configure_regions_and_partition.constprop.2+0x178>)
    fadc:	4940      	ldr	r1, [pc, #256]	; (fbe0 <mpu_configure_regions_and_partition.constprop.2+0x180>)
    fade:	1a9b      	subs	r3, r3, r2
    fae0:	4632      	mov	r2, r6
    fae2:	08db      	lsrs	r3, r3, #3
    fae4:	f363 108f 	bfi	r0, r3, #6, #10
			LOG_ERR("Invalid underlying region index %u",
    fae8:	f010 f9ce 	bl	1fe88 <log_string_sync>

			reg_index =
				mpu_configure_region(reg_index, regions[i]);

			if (reg_index == -EINVAL) {
				return reg_index;
    faec:	f06f 0415 	mvn.w	r4, #21
			reg_index++;
		}
	}

	return reg_index;
}
    faf0:	4620      	mov	r0, r4
    faf2:	b005      	add	sp, #20
    faf4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if ((u_reg_index == -EINVAL) ||
    faf8:	f11b 0f16 	cmn.w	fp, #22
    fafc:	d0d9      	beq.n	fab2 <mpu_configure_regions_and_partition.constprop.2+0x52>
			(u_reg_index > (reg_index - 1))) {
    fafe:	1e63      	subs	r3, r4, #1
		if ((u_reg_index == -EINVAL) ||
    fb00:	455b      	cmp	r3, fp
    fb02:	dbd6      	blt.n	fab2 <mpu_configure_regions_and_partition.constprop.2+0x52>
	MPU->RNR = index;
    fb04:	f8c5 b008 	str.w	fp, [r5, #8]
	return MPU->RBAR & MPU_RBAR_BASE_Msk;
    fb08:	68e8      	ldr	r0, [r5, #12]
	MPU->RNR = index;
    fb0a:	f8c5 b008 	str.w	fp, [r5, #8]
	return (MPU->RLAR & MPU_RLAR_LIMIT_Msk) | (~MPU_RLAR_LIMIT_Msk);
    fb0e:	692b      	ldr	r3, [r5, #16]
		u32_t reg_last = regions[i]->start + regions[i]->size - 1;
    fb10:	f857 1026 	ldr.w	r1, [r7, r6, lsl #2]
	return MPU->RBAR & MPU_RBAR_BASE_Msk;
    fb14:	f020 001f 	bic.w	r0, r0, #31
	return (MPU->RLAR & MPU_RLAR_LIMIT_Msk) | (~MPU_RLAR_LIMIT_Msk);
    fb18:	f043 0a1f 	orr.w	sl, r3, #31
		u32_t reg_last = regions[i]->start + regions[i]->size - 1;
    fb1c:	e9d1 3200 	ldrd	r3, r2, [r1]
    fb20:	441a      	add	r2, r3
		if ((regions[i]->start == u_reg_base) &&
    fb22:	4298      	cmp	r0, r3
		u32_t reg_last = regions[i]->start + regions[i]->size - 1;
    fb24:	f102 39ff 	add.w	r9, r2, #4294967295
		if ((regions[i]->start == u_reg_base) &&
    fb28:	d118      	bne.n	fb5c <mpu_configure_regions_and_partition.constprop.2+0xfc>
    fb2a:	45ca      	cmp	sl, r9
    fb2c:	d105      	bne.n	fb3a <mpu_configure_regions_and_partition.constprop.2+0xda>
			mpu_configure_region(u_reg_index, regions[i]);
    fb2e:	fa5f f08b 	uxtb.w	r0, fp
    fb32:	f010 fa33 	bl	1ff9c <mpu_configure_region>
	for (i = 0; i < regions_num; i++) {
    fb36:	3601      	adds	r6, #1
    fb38:	e79a      	b.n	fa70 <mpu_configure_regions_and_partition.constprop.2+0x10>
	MPU->RNR = index;
    fb3a:	f8c5 b008 	str.w	fp, [r5, #8]
	MPU->RBAR = (MPU->RBAR & (~MPU_RBAR_BASE_Msk))
    fb3e:	68eb      	ldr	r3, [r5, #12]
		| (base & MPU_RBAR_BASE_Msk);
    fb40:	f022 021f 	bic.w	r2, r2, #31
	MPU->RBAR = (MPU->RBAR & (~MPU_RBAR_BASE_Msk))
    fb44:	f003 031f 	and.w	r3, r3, #31
		| (base & MPU_RBAR_BASE_Msk);
    fb48:	431a      	orrs	r2, r3
	MPU->RBAR = (MPU->RBAR & (~MPU_RBAR_BASE_Msk))
    fb4a:	60ea      	str	r2, [r5, #12]
				mpu_configure_region(reg_index, regions[i]);
    fb4c:	b2e0      	uxtb	r0, r4
				mpu_configure_region(reg_index, regions[i]);
    fb4e:	f010 fa25 	bl	1ff9c <mpu_configure_region>
			if (reg_index == -EINVAL) {
    fb52:	f110 0f16 	cmn.w	r0, #22
    fb56:	d0c9      	beq.n	faec <mpu_configure_regions_and_partition.constprop.2+0x8c>
			reg_index++;
    fb58:	1c44      	adds	r4, r0, #1
    fb5a:	e7ec      	b.n	fb36 <mpu_configure_regions_and_partition.constprop.2+0xd6>
	MPU->RNR = index;
    fb5c:	f8c5 b008 	str.w	fp, [r5, #8]
	MPU->RLAR = (MPU->RLAR & (~MPU_RLAR_LIMIT_Msk))
    fb60:	692a      	ldr	r2, [r5, #16]
    fb62:	3b01      	subs	r3, #1
    fb64:	f023 031f 	bic.w	r3, r3, #31
    fb68:	f002 021f 	and.w	r2, r2, #31
		| (limit & MPU_RLAR_LIMIT_Msk);
    fb6c:	4313      	orrs	r3, r2
		} else if (reg_last == u_reg_last) {
    fb6e:	45ca      	cmp	sl, r9
    fb70:	b2e0      	uxtb	r0, r4
	MPU->RLAR = (MPU->RLAR & (~MPU_RLAR_LIMIT_Msk))
    fb72:	612b      	str	r3, [r5, #16]
		} else if (reg_last == u_reg_last) {
    fb74:	d0eb      	beq.n	fb4e <mpu_configure_regions_and_partition.constprop.2+0xee>
				mpu_configure_region(reg_index, regions[i]);
    fb76:	f010 fa11 	bl	1ff9c <mpu_configure_region>
			if (reg_index == -EINVAL) {
    fb7a:	f110 0f16 	cmn.w	r0, #22
    fb7e:	d0b5      	beq.n	faec <mpu_configure_regions_and_partition.constprop.2+0x8c>
	MPU->RNR = index;
    fb80:	f8c5 b008 	str.w	fp, [r5, #8]
	attr->rbar = MPU->RBAR &
    fb84:	68ea      	ldr	r2, [r5, #12]
    fb86:	f89d 3008 	ldrb.w	r3, [sp, #8]
			REGION_LIMIT_ADDR((regions[i]->start +
    fb8a:	f10a 3aff 	add.w	sl, sl, #4294967295
	attr->rbar = MPU->RBAR &
    fb8e:	f362 0304 	bfi	r3, r2, #0, #5
    fb92:	f88d 3008 	strb.w	r3, [sp, #8]
	attr->mair_idx = (MPU->RLAR & MPU_RLAR_AttrIndx_Msk) >>
    fb96:	692b      	ldr	r3, [r5, #16]
    fb98:	f89d 2008 	ldrb.w	r2, [sp, #8]
    fb9c:	085b      	lsrs	r3, r3, #1
    fb9e:	f363 1247 	bfi	r2, r3, #5, #3
			fill_region.base = regions[i]->start +
    fba2:	f857 3026 	ldr.w	r3, [r7, r6, lsl #2]
	attr->mair_idx = (MPU->RLAR & MPU_RLAR_AttrIndx_Msk) >>
    fba6:	f88d 2008 	strb.w	r2, [sp, #8]
			fill_region.base = regions[i]->start +
    fbaa:	e9d3 2300 	ldrd	r2, r3, [r3]
    fbae:	4413      	add	r3, r2
    fbb0:	9300      	str	r3, [sp, #0]
			REGION_LIMIT_ADDR((regions[i]->start +
    fbb2:	f023 031f 	bic.w	r3, r3, #31
    fbb6:	4453      	add	r3, sl
    fbb8:	eba3 0309 	sub.w	r3, r3, r9
			reg_index++;
    fbbc:	3001      	adds	r0, #1
			REGION_LIMIT_ADDR((regions[i]->start +
    fbbe:	f023 031f 	bic.w	r3, r3, #31
				region_allocate_and_init(reg_index,
    fbc2:	4669      	mov	r1, sp
    fbc4:	b2c0      	uxtb	r0, r0
			fill_region.attr.r_limit =
    fbc6:	9303      	str	r3, [sp, #12]
				region_allocate_and_init(reg_index,
    fbc8:	f7ff ff2a 	bl	fa20 <region_allocate_and_init>
    fbcc:	e7c1      	b.n	fb52 <mpu_configure_regions_and_partition.constprop.2+0xf2>
    fbce:	bf00      	nop
    fbd0:	e000ed90 	.word	0xe000ed90
    fbd4:	00022924 	.word	0x00022924
    fbd8:	00022974 	.word	0x00022974
    fbdc:	00024160 	.word	0x00024160
    fbe0:	0002413d 	.word	0x0002413d

0000fbe4 <arm_core_mpu_enable>:
void arm_core_mpu_enable(void)
{
	/* Enable MPU and use the default memory map as a
	 * background region for privileged software access.
	 */
	MPU->CTRL = MPU_CTRL_ENABLE_Msk | MPU_CTRL_PRIVDEFENA_Msk;
    fbe4:	2205      	movs	r2, #5
    fbe6:	4b03      	ldr	r3, [pc, #12]	; (fbf4 <arm_core_mpu_enable+0x10>)
    fbe8:	605a      	str	r2, [r3, #4]
    fbea:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    fbee:	f3bf 8f6f 	isb	sy

	/* Make sure that all the registers are set before proceeding */
	__DSB();
	__ISB();
}
    fbf2:	4770      	bx	lr
    fbf4:	e000ed90 	.word	0xe000ed90

0000fbf8 <arm_core_mpu_disable>:
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
    fbf8:	f3bf 8f5f 	dmb	sy
{
	/* Force any outstanding transfers to complete before disabling MPU */
	__DMB();

	/* Disable MPU */
	MPU->CTRL = 0;
    fbfc:	2200      	movs	r2, #0
    fbfe:	4b01      	ldr	r3, [pc, #4]	; (fc04 <arm_core_mpu_disable+0xc>)
    fc00:	605a      	str	r2, [r3, #4]
}
    fc02:	4770      	bx	lr
    fc04:	e000ed90 	.word	0xe000ed90

0000fc08 <arm_mpu_init>:
 *
 * This function provides the default configuration mechanism for the Memory
 * Protection Unit (MPU).
 */
static int arm_mpu_init(struct device *arg)
{
    fc08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	u32_t r_index;

	if (mpu_config.num_regions > get_num_regions()) {
    fc0a:	4f21      	ldr	r7, [pc, #132]	; (fc90 <arm_mpu_init+0x88>)
    fc0c:	683e      	ldr	r6, [r7, #0]
    fc0e:	2e10      	cmp	r6, #16
    fc10:	d913      	bls.n	fc3a <arm_mpu_init+0x32>
		 * what is supported by hardware. As this operation
		 * is executed during system (pre-kernel) initialization,
		 * we want to ensure we can detect an attempt to
		 * perform invalid configuration.
		 */
		__ASSERT(0,
    fc12:	f240 132d 	movw	r3, #301	; 0x12d
    fc16:	4a1f      	ldr	r2, [pc, #124]	; (fc94 <arm_mpu_init+0x8c>)
    fc18:	491f      	ldr	r1, [pc, #124]	; (fc98 <arm_mpu_init+0x90>)
    fc1a:	4820      	ldr	r0, [pc, #128]	; (fc9c <arm_mpu_init+0x94>)
    fc1c:	f010 f8dd 	bl	1fdda <printk>
    fc20:	2210      	movs	r2, #16
    fc22:	4631      	mov	r1, r6
    fc24:	481e      	ldr	r0, [pc, #120]	; (fca0 <arm_mpu_init+0x98>)
    fc26:	f010 f8d8 	bl	1fdda <printk>
    fc2a:	481a      	ldr	r0, [pc, #104]	; (fc94 <arm_mpu_init+0x8c>)
    fc2c:	f240 112d 	movw	r1, #301	; 0x12d
    fc30:	f010 f919 	bl	1fe66 <assert_post_action>
			"Request to configure: %u regions (supported: %u)\n",
			mpu_config.num_regions,
			get_num_regions()
		);
		return -1;
    fc34:	f04f 30ff 	mov.w	r0, #4294967295
		(MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos ==
		DT_NUM_MPU_REGIONS,
		"Invalid number of MPU regions\n");
#endif /* CORTEX_M0PLUS || CPU_CORTEX_M3 || CPU_CORTEX_M4 */
	return 0;
}
    fc38:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    fc3a:	2400      	movs	r4, #0
	arm_core_mpu_disable();
    fc3c:	f7ff ffdc 	bl	fbf8 <arm_core_mpu_disable>
	MPU->MAIR0 =
    fc40:	4d18      	ldr	r5, [pc, #96]	; (fca4 <arm_mpu_init+0x9c>)
    fc42:	4a19      	ldr	r2, [pc, #100]	; (fca8 <arm_mpu_init+0xa0>)
    fc44:	632a      	str	r2, [r5, #48]	; 0x30
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    fc46:	42a6      	cmp	r6, r4
    fc48:	d119      	bne.n	fc7e <arm_mpu_init+0x76>
	static_regions_num = mpu_config.num_regions;
    fc4a:	4b18      	ldr	r3, [pc, #96]	; (fcac <arm_mpu_init+0xa4>)
    fc4c:	701e      	strb	r6, [r3, #0]
	arm_core_mpu_enable();
    fc4e:	f7ff ffc9 	bl	fbe4 <arm_core_mpu_enable>
	__ASSERT(
    fc52:	682b      	ldr	r3, [r5, #0]
    fc54:	f3c3 2307 	ubfx	r3, r3, #8, #8
    fc58:	2b10      	cmp	r3, #16
    fc5a:	d00e      	beq.n	fc7a <arm_mpu_init+0x72>
    fc5c:	4914      	ldr	r1, [pc, #80]	; (fcb0 <arm_mpu_init+0xa8>)
    fc5e:	f44f 73a7 	mov.w	r3, #334	; 0x14e
    fc62:	4a0c      	ldr	r2, [pc, #48]	; (fc94 <arm_mpu_init+0x8c>)
    fc64:	480d      	ldr	r0, [pc, #52]	; (fc9c <arm_mpu_init+0x94>)
    fc66:	f010 f8b8 	bl	1fdda <printk>
    fc6a:	4812      	ldr	r0, [pc, #72]	; (fcb4 <arm_mpu_init+0xac>)
    fc6c:	f010 f8b5 	bl	1fdda <printk>
    fc70:	f44f 71a7 	mov.w	r1, #334	; 0x14e
    fc74:	4807      	ldr	r0, [pc, #28]	; (fc94 <arm_mpu_init+0x8c>)
    fc76:	f010 f8f6 	bl	1fe66 <assert_post_action>
	return 0;
    fc7a:	2000      	movs	r0, #0
    fc7c:	e7dc      	b.n	fc38 <arm_mpu_init+0x30>
		region_init(r_index, &mpu_config.mpu_regions[r_index]);
    fc7e:	6879      	ldr	r1, [r7, #4]
    fc80:	4620      	mov	r0, r4
    fc82:	eb01 1104 	add.w	r1, r1, r4, lsl #4
    fc86:	f7ff feb3 	bl	f9f0 <region_init>
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    fc8a:	3401      	adds	r4, #1
    fc8c:	e7db      	b.n	fc46 <arm_mpu_init+0x3e>
    fc8e:	bf00      	nop
    fc90:	00022b44 	.word	0x00022b44
    fc94:	00024057 	.word	0x00024057
    fc98:	000251cf 	.word	0x000251cf
    fc9c:	00023451 	.word	0x00023451
    fca0:	00024097 	.word	0x00024097
    fca4:	e000ed90 	.word	0xe000ed90
    fca8:	0044ffaa 	.word	0x0044ffaa
    fcac:	20021661 	.word	0x20021661
    fcb0:	000240cb 	.word	0x000240cb
    fcb4:	0002411c 	.word	0x0002411c

0000fcb8 <arm_core_mpu_configure_static_mpu_regions>:
{
    fcb8:	b538      	push	{r3, r4, r5, lr}
static int mpu_configure_static_mpu_regions(const struct k_mem_partition
	*static_regions[], const u8_t regions_num,
	const u32_t background_area_base,
	const u32_t background_area_end)
{
	int mpu_reg_index = static_regions_num;
    fcba:	4c0c      	ldr	r4, [pc, #48]	; (fcec <arm_core_mpu_configure_static_mpu_regions+0x34>)
    fcbc:	460d      	mov	r5, r1
	 * given boundaries.
	 */
	ARG_UNUSED(background_area_base);
	ARG_UNUSED(background_area_end);

	mpu_reg_index = mpu_configure_regions_and_partition(static_regions,
    fcbe:	7822      	ldrb	r2, [r4, #0]
    fcc0:	f7ff fece 	bl	fa60 <mpu_configure_regions_and_partition.constprop.2>
		regions_num, mpu_reg_index, true);

	static_regions_num = mpu_reg_index;
    fcc4:	7020      	strb	r0, [r4, #0]
	if (mpu_configure_static_mpu_regions(static_regions, regions_num,
    fcc6:	3016      	adds	r0, #22
    fcc8:	d10f      	bne.n	fcea <arm_core_mpu_configure_static_mpu_regions+0x32>
		__ASSERT(0, "Configuring %u static MPU regions failed\n",
    fcca:	23f3      	movs	r3, #243	; 0xf3
    fccc:	4a08      	ldr	r2, [pc, #32]	; (fcf0 <arm_core_mpu_configure_static_mpu_regions+0x38>)
    fcce:	4909      	ldr	r1, [pc, #36]	; (fcf4 <arm_core_mpu_configure_static_mpu_regions+0x3c>)
    fcd0:	4809      	ldr	r0, [pc, #36]	; (fcf8 <arm_core_mpu_configure_static_mpu_regions+0x40>)
    fcd2:	f010 f882 	bl	1fdda <printk>
    fcd6:	4629      	mov	r1, r5
    fcd8:	4808      	ldr	r0, [pc, #32]	; (fcfc <arm_core_mpu_configure_static_mpu_regions+0x44>)
    fcda:	f010 f87e 	bl	1fdda <printk>
}
    fcde:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		__ASSERT(0, "Configuring %u static MPU regions failed\n",
    fce2:	21f3      	movs	r1, #243	; 0xf3
    fce4:	4802      	ldr	r0, [pc, #8]	; (fcf0 <arm_core_mpu_configure_static_mpu_regions+0x38>)
    fce6:	f010 b8be 	b.w	1fe66 <assert_post_action>
}
    fcea:	bd38      	pop	{r3, r4, r5, pc}
    fcec:	20021661 	.word	0x20021661
    fcf0:	00024057 	.word	0x00024057
    fcf4:	000251cf 	.word	0x000251cf
    fcf8:	00023451 	.word	0x00023451
    fcfc:	00023ffc 	.word	0x00023ffc

0000fd00 <arm_core_mpu_mark_areas_for_dynamic_regions>:
{
    fd00:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    fd04:	4c2e      	ldr	r4, [pc, #184]	; (fdc0 <arm_core_mpu_mark_areas_for_dynamic_regions+0xc0>)
    fd06:	4689      	mov	r9, r1
{
	/* In ARMv8-M architecture we need to store the index values
	 * and the default configuration of the MPU regions, inside
	 * which dynamic memory regions may be programmed at run-time.
	 */
	for (int i = 0; i < dyn_region_areas_num; i++) {
    fd08:	4680      	mov	r8, r0
    fd0a:	2700      	movs	r7, #0
    fd0c:	46a2      	mov	sl, r4
	attr->rbar = MPU->RBAR &
    fd0e:	f04f 0b14 	mov.w	fp, #20
	MPU->RNR = index;
    fd12:	4d2c      	ldr	r5, [pc, #176]	; (fdc4 <arm_core_mpu_mark_areas_for_dynamic_regions+0xc4>)
	for (int i = 0; i < dyn_region_areas_num; i++) {
    fd14:	454f      	cmp	r7, r9
    fd16:	db02      	blt.n	fd1e <arm_core_mpu_mark_areas_for_dynamic_regions+0x1e>
}
    fd18:	b003      	add	sp, #12
    fd1a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (dyn_region_areas[i].size == 0U) {
    fd1e:	f8d8 3004 	ldr.w	r3, [r8, #4]
    fd22:	9301      	str	r3, [sp, #4]
    fd24:	2b00      	cmp	r3, #0
    fd26:	d046      	beq.n	fdb6 <arm_core_mpu_mark_areas_for_dynamic_regions+0xb6>
		}
		/* Non-empty area */

		/* Retrieve HW MPU region index */
		dyn_reg_info[i].index =
			get_region_index(dyn_region_areas[i].start,
    fd28:	f8d8 1000 	ldr.w	r1, [r8]
	u32_t region_start_addr = arm_cmse_mpu_region_get(start);
    fd2c:	4608      	mov	r0, r1
    fd2e:	9100      	str	r1, [sp, #0]
    fd30:	f010 f94f 	bl	1ffd2 <arm_cmse_mpu_region_get>
	u32_t region_end_addr = arm_cmse_mpu_region_get(start + size - 1);
    fd34:	e9dd 1300 	ldrd	r1, r3, [sp]
	u32_t region_start_addr = arm_cmse_mpu_region_get(start);
    fd38:	4606      	mov	r6, r0
	u32_t region_end_addr = arm_cmse_mpu_region_get(start + size - 1);
    fd3a:	1858      	adds	r0, r3, r1
    fd3c:	3801      	subs	r0, #1
    fd3e:	f010 f948 	bl	1ffd2 <arm_cmse_mpu_region_get>
	if (region_start_addr == region_end_addr) {
    fd42:	4286      	cmp	r6, r0
    fd44:	4a20      	ldr	r2, [pc, #128]	; (fdc8 <arm_core_mpu_mark_areas_for_dynamic_regions+0xc8>)
    fd46:	d018      	beq.n	fd7a <arm_core_mpu_mark_areas_for_dynamic_regions+0x7a>
		dyn_reg_info[i].index =
    fd48:	2314      	movs	r3, #20
    fd4a:	435f      	muls	r7, r3
    fd4c:	f06f 0315 	mvn.w	r3, #21
    fd50:	f84a 3007 	str.w	r3, [sl, r7]
		__ASSERT(0, "Marking %u areas for dynamic regions failed\n",
    fd54:	f240 1303 	movw	r3, #259	; 0x103
    fd58:	4a1c      	ldr	r2, [pc, #112]	; (fdcc <arm_core_mpu_mark_areas_for_dynamic_regions+0xcc>)
    fd5a:	491d      	ldr	r1, [pc, #116]	; (fdd0 <arm_core_mpu_mark_areas_for_dynamic_regions+0xd0>)
    fd5c:	481d      	ldr	r0, [pc, #116]	; (fdd4 <arm_core_mpu_mark_areas_for_dynamic_regions+0xd4>)
    fd5e:	f010 f83c 	bl	1fdda <printk>
    fd62:	4649      	mov	r1, r9
    fd64:	481c      	ldr	r0, [pc, #112]	; (fdd8 <arm_core_mpu_mark_areas_for_dynamic_regions+0xd8>)
    fd66:	f010 f838 	bl	1fdda <printk>
    fd6a:	f240 1103 	movw	r1, #259	; 0x103
    fd6e:	4817      	ldr	r0, [pc, #92]	; (fdcc <arm_core_mpu_mark_areas_for_dynamic_regions+0xcc>)
}
    fd70:	b003      	add	sp, #12
    fd72:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		__ASSERT(0, "Marking %u areas for dynamic regions failed\n",
    fd76:	f010 b876 	b.w	1fe66 <assert_post_action>
					dyn_region_areas[i].size);

		if (dyn_reg_info[i].index == -EINVAL) {
    fd7a:	f116 0f16 	cmn.w	r6, #22
		dyn_reg_info[i].index =
    fd7e:	6026      	str	r6, [r4, #0]
		if (dyn_reg_info[i].index == -EINVAL) {
    fd80:	d0e8      	beq.n	fd54 <arm_core_mpu_mark_areas_for_dynamic_regions+0x54>

			return -EINVAL;
		}

		if (dyn_reg_info[i].index >= static_regions_num) {
    fd82:	7813      	ldrb	r3, [r2, #0]
    fd84:	42b3      	cmp	r3, r6
    fd86:	dde5      	ble.n	fd54 <arm_core_mpu_mark_areas_for_dynamic_regions+0x54>
	attr->rbar = MPU->RBAR &
    fd88:	fb0b a307 	mla	r3, fp, r7, sl
	MPU->RNR = index;
    fd8c:	60ae      	str	r6, [r5, #8]
	MPU->RNR = index;
    fd8e:	60ae      	str	r6, [r5, #8]
	attr->rbar = MPU->RBAR &
    fd90:	68e8      	ldr	r0, [r5, #12]
    fd92:	7b19      	ldrb	r1, [r3, #12]
    fd94:	f360 0104 	bfi	r1, r0, #0, #5
    fd98:	7319      	strb	r1, [r3, #12]
	attr->mair_idx = (MPU->RLAR & MPU_RLAR_AttrIndx_Msk) >>
    fd9a:	6929      	ldr	r1, [r5, #16]
    fd9c:	7b18      	ldrb	r0, [r3, #12]
    fd9e:	0849      	lsrs	r1, r1, #1
    fda0:	f361 1047 	bfi	r0, r1, #5, #3
    fda4:	7318      	strb	r0, [r3, #12]
	region_conf->base = (MPU->RBAR & MPU_RBAR_BASE_Msk);
    fda6:	68eb      	ldr	r3, [r5, #12]
    fda8:	f023 031f 	bic.w	r3, r3, #31
    fdac:	6063      	str	r3, [r4, #4]
	region_conf->attr.r_limit = MPU->RLAR & MPU_RLAR_LIMIT_Msk;
    fdae:	692b      	ldr	r3, [r5, #16]
    fdb0:	f023 031f 	bic.w	r3, r3, #31
    fdb4:	6123      	str	r3, [r4, #16]
	for (int i = 0; i < dyn_region_areas_num; i++) {
    fdb6:	3701      	adds	r7, #1
    fdb8:	3414      	adds	r4, #20
    fdba:	f108 080c 	add.w	r8, r8, #12
    fdbe:	e7a9      	b.n	fd14 <arm_core_mpu_mark_areas_for_dynamic_regions+0x14>
    fdc0:	200200cc 	.word	0x200200cc
    fdc4:	e000ed90 	.word	0xe000ed90
    fdc8:	20021661 	.word	0x20021661
    fdcc:	00024057 	.word	0x00024057
    fdd0:	000251cf 	.word	0x000251cf
    fdd4:	00023451 	.word	0x00023451
    fdd8:	00024028 	.word	0x00024028

0000fddc <arm_core_mpu_configure_dynamic_mpu_regions>:
{
    fddc:	b570      	push	{r4, r5, r6, lr}
 * performed, the error signal is propagated to the caller of the function.
 */
static int mpu_configure_dynamic_mpu_regions(const struct k_mem_partition
	*dynamic_regions[], u8_t regions_num)
{
	int mpu_reg_index = static_regions_num;
    fdde:	4b16      	ldr	r3, [pc, #88]	; (fe38 <arm_core_mpu_configure_dynamic_mpu_regions+0x5c>)
    fde0:	460c      	mov	r4, r1
    fde2:	781d      	ldrb	r5, [r3, #0]
    fde4:	4606      	mov	r6, r0
    fde6:	462b      	mov	r3, r5
  mpu->RLAR = 0U;
    fde8:	2100      	movs	r1, #0
  mpu->RNR = rnr;
    fdea:	4a14      	ldr	r2, [pc, #80]	; (fe3c <arm_core_mpu_configure_dynamic_mpu_regions+0x60>)

	/* Disable all MPU regions except for the static ones. */
	for (int i = mpu_reg_index; i < get_num_regions(); i++) {
    fdec:	2b0f      	cmp	r3, #15
    fdee:	dd1d      	ble.n	fe2c <arm_core_mpu_configure_dynamic_mpu_regions+0x50>
#if defined(CONFIG_MPU_GAP_FILLING)
	/* Reset MPU regions inside which dynamic memory regions may
	 * be programmed.
	 */
	for (int i = 0; i < MPU_DYNAMIC_REGION_AREAS_NUM; i++) {
		region_init(dyn_reg_info[i].index,
    fdf0:	4913      	ldr	r1, [pc, #76]	; (fe40 <arm_core_mpu_configure_dynamic_mpu_regions+0x64>)
    fdf2:	f851 0b04 	ldr.w	r0, [r1], #4
    fdf6:	f7ff fdfb 	bl	f9f0 <region_init>

	/* In ARMv8-M architecture the dynamic regions are programmed on SRAM,
	 * forming a full partition of the background area, specified by the
	 * given boundaries.
	 */
	mpu_reg_index = mpu_configure_regions_and_partition(dynamic_regions,
    fdfa:	462a      	mov	r2, r5
    fdfc:	4621      	mov	r1, r4
    fdfe:	4630      	mov	r0, r6
    fe00:	f7ff fe2e 	bl	fa60 <mpu_configure_regions_and_partition.constprop.2>
	if (mpu_configure_dynamic_mpu_regions(dynamic_regions, regions_num)
    fe04:	3016      	adds	r0, #22
    fe06:	d115      	bne.n	fe34 <arm_core_mpu_configure_dynamic_mpu_regions+0x58>
		__ASSERT(0, "Configuring %u dynamic MPU regions failed\n",
    fe08:	f44f 7389 	mov.w	r3, #274	; 0x112
    fe0c:	4a0d      	ldr	r2, [pc, #52]	; (fe44 <arm_core_mpu_configure_dynamic_mpu_regions+0x68>)
    fe0e:	490e      	ldr	r1, [pc, #56]	; (fe48 <arm_core_mpu_configure_dynamic_mpu_regions+0x6c>)
    fe10:	480e      	ldr	r0, [pc, #56]	; (fe4c <arm_core_mpu_configure_dynamic_mpu_regions+0x70>)
    fe12:	f00f ffe2 	bl	1fdda <printk>
    fe16:	4621      	mov	r1, r4
    fe18:	480d      	ldr	r0, [pc, #52]	; (fe50 <arm_core_mpu_configure_dynamic_mpu_regions+0x74>)
    fe1a:	f00f ffde 	bl	1fdda <printk>
}
    fe1e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		__ASSERT(0, "Configuring %u dynamic MPU regions failed\n",
    fe22:	f44f 7189 	mov.w	r1, #274	; 0x112
    fe26:	4807      	ldr	r0, [pc, #28]	; (fe44 <arm_core_mpu_configure_dynamic_mpu_regions+0x68>)
    fe28:	f010 b81d 	b.w	1fe66 <assert_post_action>
    fe2c:	6093      	str	r3, [r2, #8]
  mpu->RLAR = 0U;
    fe2e:	6111      	str	r1, [r2, #16]
	for (int i = mpu_reg_index; i < get_num_regions(); i++) {
    fe30:	3301      	adds	r3, #1
    fe32:	e7db      	b.n	fdec <arm_core_mpu_configure_dynamic_mpu_regions+0x10>
}
    fe34:	bd70      	pop	{r4, r5, r6, pc}
    fe36:	bf00      	nop
    fe38:	20021661 	.word	0x20021661
    fe3c:	e000ed90 	.word	0xe000ed90
    fe40:	200200cc 	.word	0x200200cc
    fe44:	00024057 	.word	0x00024057
    fe48:	000251cf 	.word	0x000251cf
    fe4c:	00023451 	.word	0x00023451
    fe50:	00023fcf 	.word	0x00023fcf

0000fe54 <__stdout_hook_install>:

static int (*_stdout_hook)(int) = _stdout_hook_default;

void __stdout_hook_install(int (*hook)(int))
{
	_stdout_hook = hook;
    fe54:	4b01      	ldr	r3, [pc, #4]	; (fe5c <__stdout_hook_install+0x8>)
    fe56:	6018      	str	r0, [r3, #0]
}
    fe58:	4770      	bx	lr
    fe5a:	bf00      	nop
    fe5c:	20026078 	.word	0x20026078

0000fe60 <z_impl_zephyr_read_stdin>:
{
	_stdin_hook = hook;
}

int z_impl_zephyr_read_stdin(char *buf, int nbytes)
{
    fe60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    fe62:	4606      	mov	r6, r0
    fe64:	460d      	mov	r5, r1
	int i = 0;

	for (i = 0; i < nbytes; i++) {
    fe66:	2400      	movs	r4, #0
		*(buf + i) = _stdin_hook();
    fe68:	4f06      	ldr	r7, [pc, #24]	; (fe84 <z_impl_zephyr_read_stdin+0x24>)
	for (i = 0; i < nbytes; i++) {
    fe6a:	42ac      	cmp	r4, r5
    fe6c:	da08      	bge.n	fe80 <z_impl_zephyr_read_stdin+0x20>
		*(buf + i) = _stdin_hook();
    fe6e:	683b      	ldr	r3, [r7, #0]
    fe70:	4798      	blx	r3
		if ((*(buf + i) == '\n') || (*(buf + i) == '\r')) {
    fe72:	280a      	cmp	r0, #10
		*(buf + i) = _stdin_hook();
    fe74:	5530      	strb	r0, [r6, r4]
		if ((*(buf + i) == '\n') || (*(buf + i) == '\r')) {
    fe76:	f104 0401 	add.w	r4, r4, #1
    fe7a:	d001      	beq.n	fe80 <z_impl_zephyr_read_stdin+0x20>
    fe7c:	280d      	cmp	r0, #13
    fe7e:	d1f4      	bne.n	fe6a <z_impl_zephyr_read_stdin+0xa>
			i++;
			break;
		}
	}
	return i;
}
    fe80:	4620      	mov	r0, r4
    fe82:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    fe84:	20026074 	.word	0x20026074

0000fe88 <z_impl_zephyr_write_stdout>:
}
#include <syscalls/z_zephyr_read_stdin_mrsh.c>
#endif

int z_impl_zephyr_write_stdout(const void *buffer, int nbytes)
{
    fe88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    fe8a:	460e      	mov	r6, r1
    fe8c:	4f09      	ldr	r7, [pc, #36]	; (feb4 <z_impl_zephyr_write_stdout+0x2c>)
    fe8e:	1e44      	subs	r4, r0, #1
	const char *buf = buffer;
	int i;

	for (i = 0; i < nbytes; i++) {
    fe90:	f1c0 0501 	rsb	r5, r0, #1
    fe94:	192b      	adds	r3, r5, r4
    fe96:	429e      	cmp	r6, r3
    fe98:	dc01      	bgt.n	fe9e <z_impl_zephyr_write_stdout+0x16>
			_stdout_hook('\r');
		}
		_stdout_hook(*(buf + i));
	}
	return nbytes;
}
    fe9a:	4630      	mov	r0, r6
    fe9c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (*(buf + i) == '\n') {
    fe9e:	7863      	ldrb	r3, [r4, #1]
    fea0:	2b0a      	cmp	r3, #10
    fea2:	d102      	bne.n	feaa <z_impl_zephyr_write_stdout+0x22>
			_stdout_hook('\r');
    fea4:	683b      	ldr	r3, [r7, #0]
    fea6:	200d      	movs	r0, #13
    fea8:	4798      	blx	r3
		_stdout_hook(*(buf + i));
    feaa:	683b      	ldr	r3, [r7, #0]
    feac:	f814 0f01 	ldrb.w	r0, [r4, #1]!
    feb0:	4798      	blx	r3
    feb2:	e7ef      	b.n	fe94 <z_impl_zephyr_write_stdout+0xc>
    feb4:	20026078 	.word	0x20026078

0000feb8 <_exit>:
	return 0;
}
__weak FUNC_ALIAS(_fstat, fstat, int);

__weak void _exit(int status)
{
    feb8:	b508      	push	{r3, lr}
	return z_impl_zephyr_write_stdout(buf, nbytes);
    feba:	2105      	movs	r1, #5
    febc:	4801      	ldr	r0, [pc, #4]	; (fec4 <_exit+0xc>)
    febe:	f7ff ffe3 	bl	fe88 <z_impl_zephyr_write_stdout>
	_write(1, "exit\n", 5);
	while (1) {
		;
    fec2:	e7fe      	b.n	fec2 <_exit+0xa>
    fec4:	000241a9 	.word	0x000241a9

0000fec8 <_sbrk>:
}

static LIBC_DATA SYS_SEM_DEFINE(heap_sem, 1, 1);

void *_sbrk(int count)
{
    fec8:	b538      	push	{r3, r4, r5, lr}
    feca:	4605      	mov	r5, r0
	void *ret, *ptr;

	sys_sem_take(&heap_sem, K_FOREVER);
    fecc:	f04f 31ff 	mov.w	r1, #4294967295
    fed0:	480b      	ldr	r0, [pc, #44]	; (ff00 <_sbrk+0x38>)
    fed2:	f00f ff94 	bl	1fdfe <sys_sem_take>

#if CONFIG_NEWLIB_LIBC_ALIGNED_HEAP_SIZE
	ptr = heap_base + heap_sz;
#else
	ptr = ((char *)HEAP_BASE) + heap_sz;
    fed6:	4a0b      	ldr	r2, [pc, #44]	; (ff04 <_sbrk+0x3c>)
#endif

	if ((heap_sz + count) < MAX_HEAP_SIZE) {
    fed8:	490b      	ldr	r1, [pc, #44]	; (ff08 <_sbrk+0x40>)
	ptr = ((char *)HEAP_BASE) + heap_sz;
    feda:	6814      	ldr	r4, [r2, #0]
	if ((heap_sz + count) < MAX_HEAP_SIZE) {
    fedc:	f1c1 5300 	rsb	r3, r1, #536870912	; 0x20000000
    fee0:	4425      	add	r5, r4
    fee2:	f503 2380 	add.w	r3, r3, #262144	; 0x40000
    fee6:	429d      	cmp	r5, r3
		heap_sz += count;
		ret = ptr;
	} else {
		ret = (void *)-1;
    fee8:	bf2c      	ite	cs
    feea:	f04f 34ff 	movcs.w	r4, #4294967295
	ptr = ((char *)HEAP_BASE) + heap_sz;
    feee:	1864      	addcc	r4, r4, r1
	}

	sys_sem_give(&heap_sem);
    fef0:	4803      	ldr	r0, [pc, #12]	; (ff00 <_sbrk+0x38>)
		heap_sz += count;
    fef2:	bf38      	it	cc
    fef4:	6015      	strcc	r5, [r2, #0]
	sys_sem_give(&heap_sem);
    fef6:	f00f ff7d 	bl	1fdf4 <sys_sem_give>

	return ret;
}
    fefa:	4620      	mov	r0, r4
    fefc:	bd38      	pop	{r3, r4, r5, pc}
    fefe:	bf00      	nop
    ff00:	200263cc 	.word	0x200263cc
    ff04:	200200e0 	.word	0x200200e0
    ff08:	2002647c 	.word	0x2002647c

0000ff0c <net_if_flag_is_set>:
 *
 * @return True if the value is set, false otherwise
 */
static inline bool net_if_flag_is_set(struct net_if *iface,
				      enum net_if_flag value)
{
    ff0c:	b538      	push	{r3, r4, r5, lr}
    ff0e:	460d      	mov	r5, r1
	NET_ASSERT(iface);
    ff10:	4604      	mov	r4, r0
    ff12:	b970      	cbnz	r0, ff32 <net_if_flag_is_set+0x26>
    ff14:	490b      	ldr	r1, [pc, #44]	; (ff44 <net_if_flag_is_set+0x38>)
    ff16:	f240 2311 	movw	r3, #529	; 0x211
    ff1a:	4a0b      	ldr	r2, [pc, #44]	; (ff48 <net_if_flag_is_set+0x3c>)
    ff1c:	480b      	ldr	r0, [pc, #44]	; (ff4c <net_if_flag_is_set+0x40>)
    ff1e:	f00f ff5c 	bl	1fdda <printk>
    ff22:	480b      	ldr	r0, [pc, #44]	; (ff50 <net_if_flag_is_set+0x44>)
    ff24:	f00f ff59 	bl	1fdda <printk>
    ff28:	f240 2111 	movw	r1, #529	; 0x211
    ff2c:	4806      	ldr	r0, [pc, #24]	; (ff48 <net_if_flag_is_set+0x3c>)
    ff2e:	f00f ff9a 	bl	1fe66 <assert_post_action>
 * @return Value of @a target.
 */
#ifdef CONFIG_ATOMIC_OPERATIONS_BUILTIN
static inline atomic_val_t atomic_get(const atomic_t *target)
{
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    ff32:	6823      	ldr	r3, [r4, #0]
    ff34:	330c      	adds	r3, #12
    ff36:	e8d3 0faf 	lda	r0, [r3]
 */
static inline bool atomic_test_bit(const atomic_t *target, int bit)
{
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));

	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
    ff3a:	4128      	asrs	r0, r5

	return atomic_test_bit(iface->if_dev->flags, value);
}
    ff3c:	f000 0001 	and.w	r0, r0, #1
    ff40:	bd38      	pop	{r3, r4, r5, pc}
    ff42:	bf00      	nop
    ff44:	000241ee 	.word	0x000241ee
    ff48:	000241c6 	.word	0x000241c6
    ff4c:	00023451 	.word	0x00023451
    ff50:	000241f4 	.word	0x000241f4

0000ff54 <net_if_flag_set.constprop.24>:
static inline void net_if_flag_set(struct net_if *iface,
    ff54:	b510      	push	{r4, lr}
	NET_ASSERT(iface);
    ff56:	4604      	mov	r4, r0
    ff58:	b970      	cbnz	r0, ff78 <net_if_flag_set.constprop.24+0x24>
    ff5a:	490d      	ldr	r1, [pc, #52]	; (ff90 <net_if_flag_set.constprop.24+0x3c>)
    ff5c:	f240 13e3 	movw	r3, #483	; 0x1e3
    ff60:	4a0c      	ldr	r2, [pc, #48]	; (ff94 <net_if_flag_set.constprop.24+0x40>)
    ff62:	480d      	ldr	r0, [pc, #52]	; (ff98 <net_if_flag_set.constprop.24+0x44>)
    ff64:	f00f ff39 	bl	1fdda <printk>
    ff68:	480c      	ldr	r0, [pc, #48]	; (ff9c <net_if_flag_set.constprop.24+0x48>)
    ff6a:	f00f ff36 	bl	1fdda <printk>
    ff6e:	f240 11e3 	movw	r1, #483	; 0x1e3
    ff72:	4808      	ldr	r0, [pc, #32]	; (ff94 <net_if_flag_set.constprop.24+0x40>)
    ff74:	f00f ff77 	bl	1fe66 <assert_post_action>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    ff78:	6823      	ldr	r3, [r4, #0]
    ff7a:	330c      	adds	r3, #12
    ff7c:	e8d3 2fef 	ldaex	r2, [r3]
    ff80:	f042 0201 	orr.w	r2, r2, #1
    ff84:	e8c3 2fe1 	stlex	r1, r2, [r3]
    ff88:	2900      	cmp	r1, #0
    ff8a:	d1f7      	bne.n	ff7c <net_if_flag_set.constprop.24+0x28>
}
    ff8c:	bd10      	pop	{r4, pc}
    ff8e:	bf00      	nop
    ff90:	000241ee 	.word	0x000241ee
    ff94:	000241c6 	.word	0x000241c6
    ff98:	00023451 	.word	0x00023451
    ff9c:	000241f4 	.word	0x000241f4

0000ffa0 <net_if_up>:
		cb(iface, user_data);
	}
}

int net_if_up(struct net_if *iface)
{
    ffa0:	b538      	push	{r3, r4, r5, lr}
	int status;

	NET_DBG("iface %p", iface);

	if (net_if_flag_is_set(iface, NET_IF_UP)) {
    ffa2:	2100      	movs	r1, #0
{
    ffa4:	4605      	mov	r5, r0
	if (net_if_flag_is_set(iface, NET_IF_UP)) {
    ffa6:	f7ff ffb1 	bl	ff0c <net_if_flag_is_set>
    ffaa:	b928      	cbnz	r0, ffb8 <net_if_up+0x18>
 * @return True if socket offloading is active, false otherwise.
 */
static inline bool net_if_is_socket_offloaded(struct net_if *iface)
{
#if defined(CONFIG_NET_SOCKETS_OFFLOAD)
	return iface->if_dev->offloaded;
    ffac:	682b      	ldr	r3, [r5, #0]

	if ((IS_ENABLED(CONFIG_NET_OFFLOAD) &&
	     net_if_is_ip_offloaded(iface)) ||
	    (IS_ENABLED(CONFIG_NET_SOCKETS_OFFLOAD) &&
	     net_if_is_socket_offloaded(iface))) {
		net_if_flag_set(iface, NET_IF_UP);
    ffae:	4628      	mov	r0, r5
	if ((IS_ENABLED(CONFIG_NET_OFFLOAD) &&
    ffb0:	7e9b      	ldrb	r3, [r3, #26]
    ffb2:	b11b      	cbz	r3, ffbc <net_if_up+0x1c>
		net_if_flag_set(iface, NET_IF_UP);
    ffb4:	f7ff ffce 	bl	ff54 <net_if_flag_set.constprop.24>
		return 0;
    ffb8:	2000      	movs	r0, #0
    ffba:	e023      	b.n	10004 <net_if_up+0x64>
		goto exit;
	}

	/* If the L2 does not support enable just set the flag */
	if (!net_if_l2(iface) || !net_if_l2(iface)->enable) {
    ffbc:	f010 f838 	bl	20030 <net_if_l2>
    ffc0:	b9c0      	cbnz	r0, fff4 <net_if_up+0x54>

done:
	/* In many places it's assumed that link address was set with
	 * net_if_set_link_addr(). Better check that now.
	 */
	NET_ASSERT(net_if_get_link_addr(iface)->addr != NULL);
    ffc2:	682b      	ldr	r3, [r5, #0]
    ffc4:	691b      	ldr	r3, [r3, #16]
    ffc6:	b973      	cbnz	r3, ffe6 <net_if_up+0x46>
    ffc8:	490f      	ldr	r1, [pc, #60]	; (10008 <net_if_up+0x68>)
    ffca:	f640 538f 	movw	r3, #3471	; 0xd8f
    ffce:	4a0f      	ldr	r2, [pc, #60]	; (1000c <net_if_up+0x6c>)
    ffd0:	480f      	ldr	r0, [pc, #60]	; (10010 <net_if_up+0x70>)
    ffd2:	f00f ff02 	bl	1fdda <printk>
    ffd6:	480f      	ldr	r0, [pc, #60]	; (10014 <net_if_up+0x74>)
    ffd8:	f00f feff 	bl	1fdda <printk>
    ffdc:	f640 518f 	movw	r1, #3471	; 0xd8f
    ffe0:	480a      	ldr	r0, [pc, #40]	; (1000c <net_if_up+0x6c>)
    ffe2:	f00f ff40 	bl	1fe66 <assert_post_action>

	net_if_flag_set(iface, NET_IF_UP);
    ffe6:	4628      	mov	r0, r5
    ffe8:	f7ff ffb4 	bl	ff54 <net_if_flag_set.constprop.24>

	/* If the interface is only having point-to-point traffic then we do
	 * not need to run DAD etc for it.
	 */
	if (!(l2_flags_get(iface) & NET_L2_POINT_TO_POINT)) {
    ffec:	4628      	mov	r0, r5
    ffee:	f010 f824 	bl	2003a <l2_flags_get>
    fff2:	e7e1      	b.n	ffb8 <net_if_up+0x18>
	if (!net_if_l2(iface) || !net_if_l2(iface)->enable) {
    fff4:	6883      	ldr	r3, [r0, #8]
    fff6:	2b00      	cmp	r3, #0
    fff8:	d0e3      	beq.n	ffc2 <net_if_up+0x22>
	status = net_if_l2(iface)->enable(iface, true);
    fffa:	2101      	movs	r1, #1
    fffc:	4628      	mov	r0, r5
    fffe:	4798      	blx	r3
	if (status < 0) {
   10000:	2800      	cmp	r0, #0
   10002:	dade      	bge.n	ffc2 <net_if_up+0x22>

exit:
	net_mgmt_event_notify(NET_EVENT_IF_UP, iface);

	return 0;
}
   10004:	bd38      	pop	{r3, r4, r5, pc}
   10006:	bf00      	nop
   10008:	000241f7 	.word	0x000241f7
   1000c:	00024228 	.word	0x00024228
   10010:	00023451 	.word	0x00023451
   10014:	000241f4 	.word	0x000241f4

00010018 <net_if_init>:
	k_fifo_put(&tx_ts_queue, pkt);
}
#endif /* CONFIG_NET_PKT_TIMESTAMP_THREAD */

void net_if_init(void)
{
   10018:	b538      	push	{r3, r4, r5, lr}

	NET_DBG("");

	net_tc_tx_init();

	for (iface = __net_if_start, if_count = 0; iface != __net_if_end;
   1001a:	4c07      	ldr	r4, [pc, #28]	; (10038 <net_if_init+0x20>)
   1001c:	4d07      	ldr	r5, [pc, #28]	; (1003c <net_if_init+0x24>)
   1001e:	42ac      	cmp	r4, r5
   10020:	d100      	bne.n	10024 <net_if_init+0xc>
		NET_WARN("You have configured only %d VLAN interfaces"
			 " but you have %d network interfaces.",
			 CONFIG_NET_VLAN_COUNT, if_count);
	}
#endif
}
   10022:	bd38      	pop	{r3, r4, r5, pc}
	return iface->if_dev->dev;
   10024:	6823      	ldr	r3, [r4, #0]
	const struct net_if_api *api = net_if_get_device(iface)->driver_api;
   10026:	681b      	ldr	r3, [r3, #0]
   10028:	685b      	ldr	r3, [r3, #4]
	if (!api || !api->init) {
   1002a:	b11b      	cbz	r3, 10034 <net_if_init+0x1c>
   1002c:	681b      	ldr	r3, [r3, #0]
   1002e:	b10b      	cbz	r3, 10034 <net_if_init+0x1c>
	api->init(iface);
   10030:	4620      	mov	r0, r4
   10032:	4798      	blx	r3
	     iface++, if_count++) {
   10034:	3420      	adds	r4, #32
   10036:	e7f2      	b.n	1001e <net_if_init+0x6>
   10038:	20026440 	.word	0x20026440
   1003c:	20026460 	.word	0x20026460

00010040 <net_if_post_init>:

void net_if_post_init(void)
{
   10040:	b538      	push	{r3, r4, r5, lr}
	struct net_if *iface;

	NET_DBG("");

	/* After TX is running, attempt to bring the interface up */
	for (iface = __net_if_start; iface != __net_if_end; iface++) {
   10042:	4c07      	ldr	r4, [pc, #28]	; (10060 <net_if_post_init+0x20>)
   10044:	4d07      	ldr	r5, [pc, #28]	; (10064 <net_if_post_init+0x24>)
   10046:	42ac      	cmp	r4, r5
   10048:	d100      	bne.n	1004c <net_if_post_init+0xc>
		if (!net_if_flag_is_set(iface, NET_IF_NO_AUTO_START)) {
			net_if_up(iface);
		}
	}
}
   1004a:	bd38      	pop	{r3, r4, r5, pc}
		if (!net_if_flag_is_set(iface, NET_IF_NO_AUTO_START)) {
   1004c:	2103      	movs	r1, #3
   1004e:	4620      	mov	r0, r4
   10050:	f7ff ff5c 	bl	ff0c <net_if_flag_is_set>
   10054:	b910      	cbnz	r0, 1005c <net_if_post_init+0x1c>
			net_if_up(iface);
   10056:	4620      	mov	r0, r4
   10058:	f7ff ffa2 	bl	ffa0 <net_if_up>
	for (iface = __net_if_start; iface != __net_if_end; iface++) {
   1005c:	3420      	adds	r4, #32
   1005e:	e7f2      	b.n	10046 <net_if_post_init+0x6>
   10060:	20026440 	.word	0x20026440
   10064:	20026460 	.word	0x20026460

00010068 <z_impl_net_addr_ntop>:
	struct in6_addr *addr6;
	u16_t *w;
	u8_t i, bl, bh, longest = 1U;
	s8_t pos = -1;
	char delim = ':';
	unsigned char zeros[8] = { 0 };
   10068:	2300      	movs	r3, #0
{
   1006a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	char *ptr = dst;
	int len = -1;
	u16_t value;
	bool needcolon = false;

	if (family == AF_INET6) {
   1006e:	2802      	cmp	r0, #2
{
   10070:	b089      	sub	sp, #36	; 0x24
   10072:	4681      	mov	r9, r0
   10074:	468a      	mov	sl, r1
   10076:	4690      	mov	r8, r2
	unsigned char zeros[8] = { 0 };
   10078:	e9cd 3306 	strd	r3, r3, [sp, #24]
	if (family == AF_INET6) {
   1007c:	d13c      	bne.n	100f8 <z_impl_net_addr_ntop+0x90>
		addr6 = (struct in6_addr *)src;
		w = (u16_t *)addr6->s6_addr16;
   1007e:	aa06      	add	r2, sp, #24
   10080:	4610      	mov	r0, r2
   10082:	9104      	str	r1, [sp, #16]
{
   10084:	4619      	mov	r1, r3
   10086:	e006      	b.n	10096 <z_impl_net_addr_ntop+0x2e>
			for (j = i; j < 8; j++) {
				if (UNALIGNED_GET(&w[j]) != 0) {
					break;
				}

				zeros[i]++;
   10088:	7804      	ldrb	r4, [r0, #0]
   1008a:	3101      	adds	r1, #1
   1008c:	3401      	adds	r4, #1
   1008e:	7004      	strb	r4, [r0, #0]
			for (j = i; j < 8; j++) {
   10090:	b2cc      	uxtb	r4, r1
   10092:	2c07      	cmp	r4, #7
   10094:	d803      	bhi.n	1009e <z_impl_net_addr_ntop+0x36>
				if (UNALIGNED_GET(&w[j]) != 0) {
   10096:	f83a 4011 	ldrh.w	r4, [sl, r1, lsl #1]
   1009a:	2c00      	cmp	r4, #0
   1009c:	d0f4      	beq.n	10088 <z_impl_net_addr_ntop+0x20>
   1009e:	3301      	adds	r3, #1
		for (i = 0U; i < 8; i++) {
   100a0:	2b08      	cmp	r3, #8
   100a2:	f100 0001 	add.w	r0, r0, #1
   100a6:	d1ed      	bne.n	10084 <z_impl_net_addr_ntop+0x1c>
	s8_t pos = -1;
   100a8:	f04f 36ff 	mov.w	r6, #4294967295
	u8_t i, bl, bh, longest = 1U;
   100ac:	2701      	movs	r7, #1
			}
		}

		for (i = 0U; i < 8; i++) {
   100ae:	2300      	movs	r3, #0
			if (zeros[i] > longest) {
   100b0:	f812 1b01 	ldrb.w	r1, [r2], #1
   100b4:	42b9      	cmp	r1, r7
				longest = zeros[i];
				pos = i;
   100b6:	bf88      	it	hi
   100b8:	b25e      	sxtbhi	r6, r3
		for (i = 0U; i < 8; i++) {
   100ba:	f103 0301 	add.w	r3, r3, #1
   100be:	b2db      	uxtb	r3, r3
				pos = i;
   100c0:	bf88      	it	hi
   100c2:	460f      	movhi	r7, r1
		for (i = 0U; i < 8; i++) {
   100c4:	2b08      	cmp	r3, #8
   100c6:	d1f3      	bne.n	100b0 <z_impl_net_addr_ntop+0x48>
		len = 8;
   100c8:	9303      	str	r3, [sp, #12]
   100ca:	2f01      	cmp	r7, #1
   100cc:	f04f 033a 	mov.w	r3, #58	; 0x3a
   100d0:	bf08      	it	eq
   100d2:	f04f 36ff 	moveq.w	r6, #4294967295
   100d6:	9302      	str	r3, [sp, #8]
	bool needcolon = false;
   100d8:	2200      	movs	r2, #0
		delim = '.';
	} else {
		return NULL;
	}

	for (i = 0U; i < len; i++) {
   100da:	4644      	mov	r4, r8
   100dc:	4615      	mov	r5, r2
   100de:	9b03      	ldr	r3, [sp, #12]
   100e0:	429d      	cmp	r5, r3
   100e2:	db19      	blt.n	10118 <z_impl_net_addr_ntop+0xb0>
		}

		needcolon = true;
	}

	if (!(ptr - dst)) {
   100e4:	4544      	cmp	r4, r8
   100e6:	d009      	beq.n	100fc <z_impl_net_addr_ntop+0x94>
		return NULL;
	}

	if (family == AF_INET) {
   100e8:	2300      	movs	r3, #0
   100ea:	f1b9 0f01 	cmp.w	r9, #1
		*(ptr - 1) = '\0';
   100ee:	bf0c      	ite	eq
   100f0:	f804 3c01 	strbeq.w	r3, [r4, #-1]
	} else {
		*ptr = '\0';
   100f4:	7023      	strbne	r3, [r4, #0]
   100f6:	e003      	b.n	10100 <z_impl_net_addr_ntop+0x98>
	} else if (family == AF_INET) {
   100f8:	2801      	cmp	r0, #1
   100fa:	d005      	beq.n	10108 <z_impl_net_addr_ntop+0xa0>
		return NULL;
   100fc:	f04f 0800 	mov.w	r8, #0
	}

	return dst;
}
   10100:	4640      	mov	r0, r8
   10102:	b009      	add	sp, #36	; 0x24
   10104:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		delim = '.';
   10108:	232e      	movs	r3, #46	; 0x2e
   1010a:	2204      	movs	r2, #4
	s8_t pos = -1;
   1010c:	f04f 36ff 	mov.w	r6, #4294967295
		delim = '.';
   10110:	e9cd 3202 	strd	r3, r2, [sp, #8]
	u8_t i, bl, bh, longest = 1U;
   10114:	4607      	mov	r7, r0
   10116:	e7df      	b.n	100d8 <z_impl_net_addr_ntop+0x70>
		if (len == 4) {
   10118:	9b03      	ldr	r3, [sp, #12]
   1011a:	2b04      	cmp	r3, #4
   1011c:	d134      	bne.n	10188 <z_impl_net_addr_ntop+0x120>
			value = (u32_t)addr->s4_addr[i];
   1011e:	f81a 1005 	ldrb.w	r1, [sl, r5]
			if (value == 0U) {
   10122:	b949      	cbnz	r1, 10138 <z_impl_net_addr_ntop+0xd0>
				*ptr++ = '0';
   10124:	2330      	movs	r3, #48	; 0x30
   10126:	4620      	mov	r0, r4
   10128:	f800 3b02 	strb.w	r3, [r0], #2
				*ptr++ = delim;
   1012c:	9b02      	ldr	r3, [sp, #8]
   1012e:	7063      	strb	r3, [r4, #1]
	for (i = 0U; i < len; i++) {
   10130:	3501      	adds	r5, #1
   10132:	b2ed      	uxtb	r5, r5
   10134:	4604      	mov	r4, r0
   10136:	e7d2      	b.n	100de <z_impl_net_addr_ntop+0x76>
			l = net_value_to_udec(ptr, value, 0);
   10138:	2009      	movs	r0, #9
   1013a:	f04f 0b00 	mov.w	fp, #0
   1013e:	f8df c0d8 	ldr.w	ip, [pc, #216]	; 10218 <z_impl_net_addr_ntop+0x1b0>
   10142:	9401      	str	r4, [sp, #4]
		temp = value / divisor;
   10144:	fbb1 fefc 	udiv	lr, r1, ip
		value = value % divisor;
   10148:	fb0c 131e 	mls	r3, ip, lr, r1
		if ((precision > i) || (temp != 0)) {
   1014c:	4583      	cmp	fp, r0
		value = value % divisor;
   1014e:	9305      	str	r3, [sp, #20]
		if ((precision > i) || (temp != 0)) {
   10150:	dc01      	bgt.n	10156 <z_impl_net_addr_ntop+0xee>
   10152:	4561      	cmp	r1, ip
   10154:	d306      	bcc.n	10164 <z_impl_net_addr_ntop+0xfc>
			*buf++ = (char) (temp + '0');
   10156:	4683      	mov	fp, r0
   10158:	9b01      	ldr	r3, [sp, #4]
   1015a:	f10e 0e30 	add.w	lr, lr, #48	; 0x30
   1015e:	f803 eb01 	strb.w	lr, [r3], #1
   10162:	9301      	str	r3, [sp, #4]
	for (i = 9; i >= 0; i--, divisor /= 10U) {
   10164:	230a      	movs	r3, #10
   10166:	3801      	subs	r0, #1
   10168:	fbbc fcf3 	udiv	ip, ip, r3
   1016c:	1c43      	adds	r3, r0, #1
		value = value % divisor;
   1016e:	9905      	ldr	r1, [sp, #20]
	for (i = 9; i >= 0; i--, divisor /= 10U) {
   10170:	d1e8      	bne.n	10144 <z_impl_net_addr_ntop+0xdc>
	*buf = 0;
   10172:	f04f 0300 	mov.w	r3, #0
   10176:	9901      	ldr	r1, [sp, #4]
   10178:	700b      	strb	r3, [r1, #0]
	return buf - start;
   1017a:	1b0b      	subs	r3, r1, r4
			ptr += l;
   1017c:	b2db      	uxtb	r3, r3
			*ptr++ = delim;
   1017e:	9902      	ldr	r1, [sp, #8]
			ptr += l;
   10180:	18e0      	adds	r0, r4, r3
			*ptr++ = delim;
   10182:	3001      	adds	r0, #1
   10184:	54e1      	strb	r1, [r4, r3]
			continue;
   10186:	e7d3      	b.n	10130 <z_impl_net_addr_ntop+0xc8>
		if (i == pos) {
   10188:	42ae      	cmp	r6, r5
   1018a:	d10d      	bne.n	101a8 <z_impl_net_addr_ntop+0x140>
			if (needcolon || i == 0U) {
   1018c:	b902      	cbnz	r2, 10190 <z_impl_net_addr_ntop+0x128>
   1018e:	b916      	cbnz	r6, 10196 <z_impl_net_addr_ntop+0x12e>
				*ptr++ = ':';
   10190:	233a      	movs	r3, #58	; 0x3a
   10192:	f804 3b01 	strb.w	r3, [r4], #1
			*ptr++ = ':';
   10196:	233a      	movs	r3, #58	; 0x3a
   10198:	4620      	mov	r0, r4
   1019a:	f800 3b01 	strb.w	r3, [r0], #1
			i += longest - 1U;
   1019e:	1e7b      	subs	r3, r7, #1
   101a0:	441d      	add	r5, r3
   101a2:	b2ed      	uxtb	r5, r5
			needcolon = false;
   101a4:	2200      	movs	r2, #0
			continue;
   101a6:	e7c3      	b.n	10130 <z_impl_net_addr_ntop+0xc8>
		if (needcolon) {
   101a8:	b112      	cbz	r2, 101b0 <z_impl_net_addr_ntop+0x148>
			*ptr++ = ':';
   101aa:	233a      	movs	r3, #58	; 0x3a
   101ac:	f804 3b01 	strb.w	r3, [r4], #1
		value = (u32_t)sys_be16_to_cpu(UNALIGNED_GET(&w[i]));
   101b0:	9b04      	ldr	r3, [sp, #16]
   101b2:	f833 3015 	ldrh.w	r3, [r3, r5, lsl #1]
   101b6:	021a      	lsls	r2, r3, #8
   101b8:	ea42 2213 	orr.w	r2, r2, r3, lsr #8
   101bc:	b212      	sxth	r2, r2
		bh = value >> 8;
   101be:	f3c2 2307 	ubfx	r3, r2, #8, #8
		bl = value & 0xff;
   101c2:	fa5f fb82 	uxtb.w	fp, r2
		if (bh) {
   101c6:	b1b3      	cbz	r3, 101f6 <z_impl_net_addr_ntop+0x18e>
			if (bh > 0x0f) {
   101c8:	2b0f      	cmp	r3, #15
		bh = value >> 8;
   101ca:	b2d9      	uxtb	r1, r3
			if (bh > 0x0f) {
   101cc:	d90b      	bls.n	101e6 <z_impl_net_addr_ntop+0x17e>
				ptr = net_byte_to_hex(ptr, bh, 'a', false);
   101ce:	2300      	movs	r3, #0
   101d0:	2261      	movs	r2, #97	; 0x61
   101d2:	4620      	mov	r0, r4
   101d4:	f00f ff3e 	bl	20054 <net_byte_to_hex>
			ptr = net_byte_to_hex(ptr, bl, 'a', true);
   101d8:	2301      	movs	r3, #1
   101da:	2261      	movs	r2, #97	; 0x61
   101dc:	4659      	mov	r1, fp
			ptr = net_byte_to_hex(ptr, bl, 'a', false);
   101de:	f00f ff39 	bl	20054 <net_byte_to_hex>
		needcolon = true;
   101e2:	2201      	movs	r2, #1
   101e4:	e7a4      	b.n	10130 <z_impl_net_addr_ntop+0xc8>
				if (bh < 10) {
   101e6:	b25b      	sxtb	r3, r3
   101e8:	2909      	cmp	r1, #9
					*ptr++ = (char)(bh + '0');
   101ea:	bf94      	ite	ls
   101ec:	3330      	addls	r3, #48	; 0x30
					*ptr++ = (char) (bh - 10 + 'a');
   101ee:	3357      	addhi	r3, #87	; 0x57
   101f0:	1c60      	adds	r0, r4, #1
   101f2:	7023      	strb	r3, [r4, #0]
   101f4:	e7f0      	b.n	101d8 <z_impl_net_addr_ntop+0x170>
		} else if (bl > 0x0f) {
   101f6:	f1bb 0f0f 	cmp.w	fp, #15
   101fa:	d903      	bls.n	10204 <z_impl_net_addr_ntop+0x19c>
			ptr = net_byte_to_hex(ptr, bl, 'a', false);
   101fc:	2261      	movs	r2, #97	; 0x61
   101fe:	4659      	mov	r1, fp
   10200:	4620      	mov	r0, r4
   10202:	e7ec      	b.n	101de <z_impl_net_addr_ntop+0x176>
			if (bl < 10) {
   10204:	b252      	sxtb	r2, r2
   10206:	f1bb 0f09 	cmp.w	fp, #9
				*ptr++ = (char)(bl + '0');
   1020a:	bf94      	ite	ls
   1020c:	3230      	addls	r2, #48	; 0x30
				*ptr++ = (char) (bl - 10 + 'a');
   1020e:	3257      	addhi	r2, #87	; 0x57
   10210:	1c60      	adds	r0, r4, #1
   10212:	7022      	strb	r2, [r4, #0]
   10214:	e7e5      	b.n	101e2 <z_impl_net_addr_ntop+0x17a>
   10216:	bf00      	nop
   10218:	3b9aca00 	.word	0x3b9aca00

0001021c <connect_request_encode>:
	return mqtt_encode_fixed_header(message_type, start, buf);
}

int connect_request_encode(const struct mqtt_client *client,
			   struct buf_ctx *buf)
{
   1021c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	} else {
		mqtt_proto_desc = &mqtt_3_1_0_proto_desc;
	}

	/* Reserve space for fixed header. */
	buf->cur += MQTT_FIXED_HEADER_MAX_SIZE;
   10220:	680f      	ldr	r7, [r1, #0]
	u8_t connect_flags = client->clean_session << 1;
   10222:	f890 5060 	ldrb.w	r5, [r0, #96]	; 0x60
	start = buf->cur;

	MQTT_TRC("Encoding Protocol Description. Str:%s Size:%08x.",
		 mqtt_proto_desc->utf8, mqtt_proto_desc->size);

	err_code = pack_utf8_str(mqtt_proto_desc, buf);
   10226:	4b3b      	ldr	r3, [pc, #236]	; (10314 <connect_request_encode+0xf8>)
   10228:	4a3b      	ldr	r2, [pc, #236]	; (10318 <connect_request_encode+0xfc>)
{
   1022a:	4606      	mov	r6, r0
	if (client->protocol_version == MQTT_VERSION_3_1_1) {
   1022c:	f890 005e 	ldrb.w	r0, [r0, #94]	; 0x5e
	buf->cur += MQTT_FIXED_HEADER_MAX_SIZE;
   10230:	3705      	adds	r7, #5
	err_code = pack_utf8_str(mqtt_proto_desc, buf);
   10232:	2804      	cmp	r0, #4
   10234:	bf0c      	ite	eq
   10236:	4610      	moveq	r0, r2
   10238:	4618      	movne	r0, r3
	buf->cur += MQTT_FIXED_HEADER_MAX_SIZE;
   1023a:	600f      	str	r7, [r1, #0]
{
   1023c:	460c      	mov	r4, r1
	err_code = pack_utf8_str(mqtt_proto_desc, buf);
   1023e:	f00f fff1 	bl	20224 <pack_utf8_str>
	u8_t connect_flags = client->clean_session << 1;
   10242:	f3c5 0540 	ubfx	r5, r5, #1, #1
	if (err_code != 0) {
   10246:	4603      	mov	r3, r0
   10248:	b938      	cbnz	r0, 1025a <connect_request_encode+0x3e>
	if ((buf->end - buf->cur) < sizeof(u8_t)) {
   1024a:	e9d4 2000 	ldrd	r2, r0, [r4]
   1024e:	4290      	cmp	r0, r2
		return err_code;
	}

	MQTT_TRC("Encoding Protocol Version %02x.", client->protocol_version);
	err_code = pack_uint8(client->protocol_version, buf);
   10250:	f896 105e 	ldrb.w	r1, [r6, #94]	; 0x5e
	if ((buf->end - buf->cur) < sizeof(u8_t)) {
   10254:	d104      	bne.n	10260 <connect_request_encode+0x44>
		return -ENOMEM;
   10256:	f06f 030b 	mvn.w	r3, #11

	/* Write the flags the connect flags. */
	*connect_flags_pos = connect_flags;

	return mqtt_encode_fixed_header(message_type, start, buf);
}
   1025a:	4618      	mov	r0, r3
   1025c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	*(buf->cur++) = val;
   10260:	1c50      	adds	r0, r2, #1
   10262:	6020      	str	r0, [r4, #0]
   10264:	7011      	strb	r1, [r2, #0]
	if ((buf->end - buf->cur) < sizeof(u8_t)) {
   10266:	e9d4 8200 	ldrd	r8, r2, [r4]
   1026a:	4590      	cmp	r8, r2
   1026c:	d0f3      	beq.n	10256 <connect_request_encode+0x3a>
	*(buf->cur++) = val;
   1026e:	f108 0201 	add.w	r2, r8, #1
   10272:	6022      	str	r2, [r4, #0]
   10274:	f888 3000 	strb.w	r3, [r8]
	err_code = pack_uint16(client->keepalive, buf);
   10278:	4621      	mov	r1, r4
   1027a:	f8b6 005c 	ldrh.w	r0, [r6, #92]	; 0x5c
   1027e:	f00f ffbf 	bl	20200 <pack_uint16>
	if (err_code != 0) {
   10282:	4603      	mov	r3, r0
   10284:	2800      	cmp	r0, #0
   10286:	d1e8      	bne.n	1025a <connect_request_encode+0x3e>
	err_code = pack_utf8_str(&client->client_id, buf);
   10288:	f106 002c 	add.w	r0, r6, #44	; 0x2c
   1028c:	f00f ffca 	bl	20224 <pack_utf8_str>
	if (err_code != 0) {
   10290:	4603      	mov	r3, r0
   10292:	2800      	cmp	r0, #0
   10294:	d1e1      	bne.n	1025a <connect_request_encode+0x3e>
	if (client->will_topic != NULL) {
   10296:	6c30      	ldr	r0, [r6, #64]	; 0x40
	u8_t connect_flags = client->clean_session << 1;
   10298:	006d      	lsls	r5, r5, #1
	if (client->will_topic != NULL) {
   1029a:	b1d8      	cbz	r0, 102d4 <connect_request_encode+0xb8>
		connect_flags |= client->will_retain << 5;
   1029c:	f896 3060 	ldrb.w	r3, [r6, #96]	; 0x60
		connect_flags |= MQTT_CONNECT_FLAG_WILL_TOPIC;
   102a0:	f045 0504 	orr.w	r5, r5, #4
		connect_flags |= client->will_retain << 5;
   102a4:	f003 0301 	and.w	r3, r3, #1
   102a8:	ea45 1543 	orr.w	r5, r5, r3, lsl #5
		connect_flags |= ((client->will_topic->qos & 0x03) << 3);
   102ac:	7a03      	ldrb	r3, [r0, #8]
		err_code = pack_utf8_str(&client->will_topic->topic, buf);
   102ae:	4621      	mov	r1, r4
		connect_flags |= ((client->will_topic->qos & 0x03) << 3);
   102b0:	00db      	lsls	r3, r3, #3
   102b2:	f003 0318 	and.w	r3, r3, #24
		connect_flags |= client->will_retain << 5;
   102b6:	431d      	orrs	r5, r3
		err_code = pack_utf8_str(&client->will_topic->topic, buf);
   102b8:	f00f ffb4 	bl	20224 <pack_utf8_str>
		if (err_code != 0) {
   102bc:	4603      	mov	r3, r0
   102be:	2800      	cmp	r0, #0
   102c0:	d1cb      	bne.n	1025a <connect_request_encode+0x3e>
		if (client->will_message != NULL) {
   102c2:	6c73      	ldr	r3, [r6, #68]	; 0x44
			err_code = pack_utf8_str(client->will_message, buf);
   102c4:	4621      	mov	r1, r4
		if (client->will_message != NULL) {
   102c6:	b313      	cbz	r3, 1030e <connect_request_encode+0xf2>
			err_code = pack_utf8_str(client->will_message, buf);
   102c8:	4618      	mov	r0, r3
   102ca:	f00f ffab 	bl	20224 <pack_utf8_str>
			if (err_code != 0) {
   102ce:	4603      	mov	r3, r0
   102d0:	2800      	cmp	r0, #0
   102d2:	d1c2      	bne.n	1025a <connect_request_encode+0x3e>
	if (client->user_name != NULL) {
   102d4:	6bb0      	ldr	r0, [r6, #56]	; 0x38
   102d6:	b138      	cbz	r0, 102e8 <connect_request_encode+0xcc>
		err_code = pack_utf8_str(client->user_name, buf);
   102d8:	4621      	mov	r1, r4
   102da:	f00f ffa3 	bl	20224 <pack_utf8_str>
		if (err_code != 0) {
   102de:	4603      	mov	r3, r0
   102e0:	2800      	cmp	r0, #0
   102e2:	d1ba      	bne.n	1025a <connect_request_encode+0x3e>
		connect_flags |= MQTT_CONNECT_FLAG_USERNAME;
   102e4:	f045 0580 	orr.w	r5, r5, #128	; 0x80
	if (client->password != NULL) {
   102e8:	6bf0      	ldr	r0, [r6, #60]	; 0x3c
   102ea:	b138      	cbz	r0, 102fc <connect_request_encode+0xe0>
		err_code = pack_utf8_str(client->password, buf);
   102ec:	4621      	mov	r1, r4
   102ee:	f00f ff99 	bl	20224 <pack_utf8_str>
		if (err_code != 0) {
   102f2:	4603      	mov	r3, r0
   102f4:	2800      	cmp	r0, #0
   102f6:	d1b0      	bne.n	1025a <connect_request_encode+0x3e>
		connect_flags |= MQTT_CONNECT_FLAG_PASSWORD;
   102f8:	f045 0540 	orr.w	r5, r5, #64	; 0x40
	*connect_flags_pos = connect_flags;
   102fc:	f888 5000 	strb.w	r5, [r8]
	return mqtt_encode_fixed_header(message_type, start, buf);
   10300:	4622      	mov	r2, r4
   10302:	4639      	mov	r1, r7
}
   10304:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	return mqtt_encode_fixed_header(message_type, start, buf);
   10308:	2010      	movs	r0, #16
   1030a:	f00f bfa6 	b.w	2025a <mqtt_encode_fixed_header>
	return pack_uint16(0x0000, buf);
   1030e:	f00f ff77 	bl	20200 <pack_uint16>
   10312:	e7dc      	b.n	102ce <connect_request_encode+0xb2>
   10314:	00022b6c 	.word	0x00022b6c
   10318:	00022b74 	.word	0x00022b74

0001031c <disconnect_encode>:
	return mqtt_message_id_only_enc(message_type, param->message_id, buf);
}

int disconnect_encode(struct buf_ctx *buf)
{
	if (buf->end - buf->cur < sizeof(disc_packet)) {
   1031c:	e9d0 2300 	ldrd	r2, r3, [r0]
   10320:	1a9b      	subs	r3, r3, r2
   10322:	2b01      	cmp	r3, #1
   10324:	bf81      	itttt	hi
   10326:	4b05      	ldrhi	r3, [pc, #20]	; (1033c <disconnect_encode+0x20>)
   10328:	881b      	ldrhhi	r3, [r3, #0]
   1032a:	8013      	strhhi	r3, [r2, #0]
		return -ENOMEM;
	}

	memcpy(buf->cur, disc_packet, sizeof(disc_packet));
	buf->end = buf->cur + sizeof(disc_packet);
   1032c:	6803      	ldrhi	r3, [r0, #0]
   1032e:	bf83      	ittte	hi
   10330:	3302      	addhi	r3, #2
   10332:	6043      	strhi	r3, [r0, #4]

	return 0;
   10334:	2000      	movhi	r0, #0
		return -ENOMEM;
   10336:	f06f 000b 	mvnls.w	r0, #11
}
   1033a:	4770      	bx	lr
   1033c:	00024252 	.word	0x00024252

00010340 <ping_request_encode>:
	return mqtt_encode_fixed_header(message_type, start, buf);
}

int ping_request_encode(struct buf_ctx *buf)
{
	if (buf->end - buf->cur < sizeof(ping_packet)) {
   10340:	e9d0 2300 	ldrd	r2, r3, [r0]
   10344:	1a9b      	subs	r3, r3, r2
   10346:	2b01      	cmp	r3, #1
   10348:	bf81      	itttt	hi
   1034a:	4b05      	ldrhi	r3, [pc, #20]	; (10360 <ping_request_encode+0x20>)
   1034c:	881b      	ldrhhi	r3, [r3, #0]
   1034e:	8013      	strhhi	r3, [r2, #0]
		return -ENOMEM;
	}

	memcpy(buf->cur, ping_packet, sizeof(ping_packet));
	buf->end = buf->cur + sizeof(ping_packet);
   10350:	6803      	ldrhi	r3, [r0, #0]
   10352:	bf83      	ittte	hi
   10354:	3302      	addhi	r3, #2
   10356:	6043      	strhi	r3, [r0, #4]

	return 0;
   10358:	2000      	movhi	r0, #0
		return -ENOMEM;
   1035a:	f06f 000b 	mvnls.w	r0, #11
}
   1035e:	4770      	bx	lr
   10360:	0002425e 	.word	0x0002425e

00010364 <close>:
{
   10364:	b570      	push	{r4, r5, r6, lr}
	__ASSERT_NO_MSG(socket_ops);
   10366:	4c10      	ldr	r4, [pc, #64]	; (103a8 <close+0x44>)
{
   10368:	4605      	mov	r5, r0
	__ASSERT_NO_MSG(socket_ops);
   1036a:	6823      	ldr	r3, [r4, #0]
   1036c:	b94b      	cbnz	r3, 10382 <close+0x1e>
   1036e:	490f      	ldr	r1, [pc, #60]	; (103ac <close+0x48>)
   10370:	480f      	ldr	r0, [pc, #60]	; (103b0 <close+0x4c>)
   10372:	2321      	movs	r3, #33	; 0x21
   10374:	4a0f      	ldr	r2, [pc, #60]	; (103b4 <close+0x50>)
   10376:	f00f fd30 	bl	1fdda <printk>
   1037a:	2121      	movs	r1, #33	; 0x21
   1037c:	480d      	ldr	r0, [pc, #52]	; (103b4 <close+0x50>)
   1037e:	f00f fd72 	bl	1fe66 <assert_post_action>
	__ASSERT_NO_MSG(socket_ops->close);
   10382:	6823      	ldr	r3, [r4, #0]
   10384:	685b      	ldr	r3, [r3, #4]
   10386:	b94b      	cbnz	r3, 1039c <close+0x38>
   10388:	490b      	ldr	r1, [pc, #44]	; (103b8 <close+0x54>)
   1038a:	4809      	ldr	r0, [pc, #36]	; (103b0 <close+0x4c>)
   1038c:	2322      	movs	r3, #34	; 0x22
   1038e:	4a09      	ldr	r2, [pc, #36]	; (103b4 <close+0x50>)
   10390:	f00f fd23 	bl	1fdda <printk>
   10394:	2122      	movs	r1, #34	; 0x22
   10396:	4807      	ldr	r0, [pc, #28]	; (103b4 <close+0x50>)
   10398:	f00f fd65 	bl	1fe66 <assert_post_action>
	return socket_ops->close(sock);
   1039c:	6823      	ldr	r3, [r4, #0]
   1039e:	4628      	mov	r0, r5
}
   103a0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return socket_ops->close(sock);
   103a4:	685b      	ldr	r3, [r3, #4]
   103a6:	4718      	bx	r3
   103a8:	200200a4 	.word	0x200200a4
   103ac:	00023446 	.word	0x00023446
   103b0:	00023451 	.word	0x00023451
   103b4:	00023416 	.word	0x00023416
   103b8:	00024260 	.word	0x00024260

000103bc <mqtt_client_tcp_connect>:
#include <net/mqtt.h>

#include "mqtt_os.h"

int mqtt_client_tcp_connect(struct mqtt_client *client)
{
   103bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	__ASSERT_NO_MSG(socket_ops);
   103c0:	4c2d      	ldr	r4, [pc, #180]	; (10478 <mqtt_client_tcp_connect+0xbc>)
	const struct sockaddr *broker = client->broker;
   103c2:	6b45      	ldr	r5, [r0, #52]	; 0x34
   103c4:	6823      	ldr	r3, [r4, #0]
{
   103c6:	4606      	mov	r6, r0
	int ret;

	client->transport.tcp.sock = socket(broker->sa_family, SOCK_STREAM,
   103c8:	882f      	ldrh	r7, [r5, #0]
   103ca:	b94b      	cbnz	r3, 103e0 <mqtt_client_tcp_connect+0x24>
   103cc:	492b      	ldr	r1, [pc, #172]	; (1047c <mqtt_client_tcp_connect+0xc0>)
   103ce:	482c      	ldr	r0, [pc, #176]	; (10480 <mqtt_client_tcp_connect+0xc4>)
   103d0:	2319      	movs	r3, #25
   103d2:	4a2c      	ldr	r2, [pc, #176]	; (10484 <mqtt_client_tcp_connect+0xc8>)
   103d4:	f00f fd01 	bl	1fdda <printk>
   103d8:	2119      	movs	r1, #25
   103da:	482a      	ldr	r0, [pc, #168]	; (10484 <mqtt_client_tcp_connect+0xc8>)
   103dc:	f00f fd43 	bl	1fe66 <assert_post_action>
	__ASSERT_NO_MSG(socket_ops->socket);
   103e0:	6823      	ldr	r3, [r4, #0]
   103e2:	681b      	ldr	r3, [r3, #0]
   103e4:	b94b      	cbnz	r3, 103fa <mqtt_client_tcp_connect+0x3e>
   103e6:	4928      	ldr	r1, [pc, #160]	; (10488 <mqtt_client_tcp_connect+0xcc>)
   103e8:	4825      	ldr	r0, [pc, #148]	; (10480 <mqtt_client_tcp_connect+0xc4>)
   103ea:	231a      	movs	r3, #26
   103ec:	4a25      	ldr	r2, [pc, #148]	; (10484 <mqtt_client_tcp_connect+0xc8>)
   103ee:	f00f fcf4 	bl	1fdda <printk>
   103f2:	211a      	movs	r1, #26
   103f4:	4823      	ldr	r0, [pc, #140]	; (10484 <mqtt_client_tcp_connect+0xc8>)
   103f6:	f00f fd36 	bl	1fe66 <assert_post_action>
	return socket_ops->socket(family, type, proto);
   103fa:	6823      	ldr	r3, [r4, #0]
   103fc:	4638      	mov	r0, r7
   103fe:	681b      	ldr	r3, [r3, #0]
   10400:	2206      	movs	r2, #6
   10402:	2101      	movs	r1, #1
   10404:	4798      	blx	r3
					    IPPROTO_TCP);
	if (client->transport.tcp.sock < 0) {
   10406:	2800      	cmp	r0, #0
   10408:	4607      	mov	r7, r0
	client->transport.tcp.sock = socket(broker->sa_family, SOCK_STREAM,
   1040a:	62b0      	str	r0, [r6, #40]	; 0x28
	if (client->transport.tcp.sock < 0) {
   1040c:	da05      	bge.n	1041a <mqtt_client_tcp_connect+0x5e>

	ret = connect(client->transport.tcp.sock, client->broker,
		      peer_addr_size);
	if (ret < 0) {
		(void)close(client->transport.tcp.sock);
		return -errno;
   1040e:	f00f fe06 	bl	2001e <__errno>
   10412:	6800      	ldr	r0, [r0, #0]
   10414:	4240      	negs	r0, r0
	}

	MQTT_TRC("Connect completed");
	return 0;
}
   10416:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (broker->sa_family == AF_INET) {
   1041a:	882b      	ldrh	r3, [r5, #0]
	ret = connect(client->transport.tcp.sock, client->broker,
   1041c:	6b75      	ldr	r5, [r6, #52]	; 0x34
		peer_addr_size = sizeof(struct sockaddr_in);
   1041e:	2b01      	cmp	r3, #1
	__ASSERT_NO_MSG(socket_ops);
   10420:	6823      	ldr	r3, [r4, #0]
   10422:	bf14      	ite	ne
   10424:	f04f 0818 	movne.w	r8, #24
   10428:	f04f 0808 	moveq.w	r8, #8
   1042c:	b94b      	cbnz	r3, 10442 <mqtt_client_tcp_connect+0x86>
   1042e:	4913      	ldr	r1, [pc, #76]	; (1047c <mqtt_client_tcp_connect+0xc0>)
   10430:	4813      	ldr	r0, [pc, #76]	; (10480 <mqtt_client_tcp_connect+0xc4>)
   10432:	2345      	movs	r3, #69	; 0x45
   10434:	4a13      	ldr	r2, [pc, #76]	; (10484 <mqtt_client_tcp_connect+0xc8>)
   10436:	f00f fcd0 	bl	1fdda <printk>
   1043a:	2145      	movs	r1, #69	; 0x45
   1043c:	4811      	ldr	r0, [pc, #68]	; (10484 <mqtt_client_tcp_connect+0xc8>)
   1043e:	f00f fd12 	bl	1fe66 <assert_post_action>
	__ASSERT_NO_MSG(socket_ops->connect);
   10442:	6823      	ldr	r3, [r4, #0]
   10444:	695b      	ldr	r3, [r3, #20]
   10446:	b94b      	cbnz	r3, 1045c <mqtt_client_tcp_connect+0xa0>
   10448:	4910      	ldr	r1, [pc, #64]	; (1048c <mqtt_client_tcp_connect+0xd0>)
   1044a:	480d      	ldr	r0, [pc, #52]	; (10480 <mqtt_client_tcp_connect+0xc4>)
   1044c:	2346      	movs	r3, #70	; 0x46
   1044e:	4a0d      	ldr	r2, [pc, #52]	; (10484 <mqtt_client_tcp_connect+0xc8>)
   10450:	f00f fcc3 	bl	1fdda <printk>
   10454:	2146      	movs	r1, #70	; 0x46
   10456:	480b      	ldr	r0, [pc, #44]	; (10484 <mqtt_client_tcp_connect+0xc8>)
   10458:	f00f fd05 	bl	1fe66 <assert_post_action>
	return socket_ops->connect(sock, addr, addrlen);
   1045c:	6823      	ldr	r3, [r4, #0]
   1045e:	4642      	mov	r2, r8
   10460:	695b      	ldr	r3, [r3, #20]
   10462:	4629      	mov	r1, r5
   10464:	4638      	mov	r0, r7
   10466:	4798      	blx	r3
	if (ret < 0) {
   10468:	2800      	cmp	r0, #0
   1046a:	da03      	bge.n	10474 <mqtt_client_tcp_connect+0xb8>
		(void)close(client->transport.tcp.sock);
   1046c:	6ab0      	ldr	r0, [r6, #40]	; 0x28
   1046e:	f7ff ff79 	bl	10364 <close>
   10472:	e7cc      	b.n	1040e <mqtt_client_tcp_connect+0x52>
	return 0;
   10474:	2000      	movs	r0, #0
   10476:	e7ce      	b.n	10416 <mqtt_client_tcp_connect+0x5a>
   10478:	200200a4 	.word	0x200200a4
   1047c:	00023446 	.word	0x00023446
   10480:	00023451 	.word	0x00023451
   10484:	00023416 	.word	0x00023416
   10488:	00024272 	.word	0x00024272
   1048c:	00024285 	.word	0x00024285

00010490 <mqtt_client_tcp_write>:

int mqtt_client_tcp_write(struct mqtt_client *client, const u8_t *data,
			  u32_t datalen)
{
   10490:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   10494:	4680      	mov	r8, r0
   10496:	4689      	mov	r9, r1
   10498:	4617      	mov	r7, r2
	u32_t offset = 0U;
   1049a:	2400      	movs	r4, #0
	__ASSERT_NO_MSG(socket_ops);
   1049c:	4d1d      	ldr	r5, [pc, #116]	; (10514 <mqtt_client_tcp_write+0x84>)
	int ret;

	while (offset < datalen) {
   1049e:	42bc      	cmp	r4, r7
   104a0:	d301      	bcc.n	104a6 <mqtt_client_tcp_write+0x16>
		}

		offset += ret;
	}

	return 0;
   104a2:	2000      	movs	r0, #0
   104a4:	e031      	b.n	1050a <mqtt_client_tcp_write+0x7a>
		ret = send(client->transport.tcp.sock, data + offset,
   104a6:	f8d8 3028 	ldr.w	r3, [r8, #40]	; 0x28
   104aa:	eb09 0a04 	add.w	sl, r9, r4
   104ae:	461e      	mov	r6, r3
   104b0:	4b19      	ldr	r3, [pc, #100]	; (10518 <mqtt_client_tcp_write+0x88>)
   104b2:	eba7 0b04 	sub.w	fp, r7, r4
   104b6:	681b      	ldr	r3, [r3, #0]
   104b8:	b94b      	cbnz	r3, 104ce <mqtt_client_tcp_write+0x3e>
   104ba:	4918      	ldr	r1, [pc, #96]	; (1051c <mqtt_client_tcp_write+0x8c>)
   104bc:	4818      	ldr	r0, [pc, #96]	; (10520 <mqtt_client_tcp_write+0x90>)
   104be:	237e      	movs	r3, #126	; 0x7e
   104c0:	462a      	mov	r2, r5
   104c2:	f00f fc8a 	bl	1fdda <printk>
   104c6:	217e      	movs	r1, #126	; 0x7e
   104c8:	4628      	mov	r0, r5
   104ca:	f00f fccc 	bl	1fe66 <assert_post_action>
	__ASSERT_NO_MSG(socket_ops->send);
   104ce:	4b12      	ldr	r3, [pc, #72]	; (10518 <mqtt_client_tcp_write+0x88>)
   104d0:	681b      	ldr	r3, [r3, #0]
   104d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   104d4:	b94b      	cbnz	r3, 104ea <mqtt_client_tcp_write+0x5a>
   104d6:	4913      	ldr	r1, [pc, #76]	; (10524 <mqtt_client_tcp_write+0x94>)
   104d8:	4811      	ldr	r0, [pc, #68]	; (10520 <mqtt_client_tcp_write+0x90>)
   104da:	237f      	movs	r3, #127	; 0x7f
   104dc:	462a      	mov	r2, r5
   104de:	f00f fc7c 	bl	1fdda <printk>
   104e2:	217f      	movs	r1, #127	; 0x7f
   104e4:	4628      	mov	r0, r5
   104e6:	f00f fcbe 	bl	1fe66 <assert_post_action>
	return socket_ops->send(sock, buf, len, flags);
   104ea:	4b0b      	ldr	r3, [pc, #44]	; (10518 <mqtt_client_tcp_write+0x88>)
   104ec:	4630      	mov	r0, r6
   104ee:	681b      	ldr	r3, [r3, #0]
   104f0:	465a      	mov	r2, fp
   104f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   104f4:	4651      	mov	r1, sl
   104f6:	469c      	mov	ip, r3
   104f8:	2300      	movs	r3, #0
   104fa:	4666      	mov	r6, ip
   104fc:	47b0      	blx	r6
		if (ret < 0) {
   104fe:	2800      	cmp	r0, #0
   10500:	da05      	bge.n	1050e <mqtt_client_tcp_write+0x7e>
			return -errno;
   10502:	f00f fd8c 	bl	2001e <__errno>
   10506:	6800      	ldr	r0, [r0, #0]
   10508:	4240      	negs	r0, r0
}
   1050a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		offset += ret;
   1050e:	4404      	add	r4, r0
   10510:	e7c5      	b.n	1049e <mqtt_client_tcp_write+0xe>
   10512:	bf00      	nop
   10514:	00023416 	.word	0x00023416
   10518:	200200a4 	.word	0x200200a4
   1051c:	00023446 	.word	0x00023446
   10520:	00023451 	.word	0x00023451
   10524:	000242aa 	.word	0x000242aa

00010528 <mqtt_client_tcp_read>:

int mqtt_client_tcp_read(struct mqtt_client *client, u8_t *data, u32_t buflen,
			 bool shall_block)
{
   10528:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	__ASSERT_NO_MSG(socket_ops);
   1052c:	4c18      	ldr	r4, [pc, #96]	; (10590 <mqtt_client_tcp_read+0x68>)
	int flags = 0;
	int ret;

	if (!shall_block) {
		flags |= MSG_DONTWAIT;
   1052e:	2b00      	cmp	r3, #0
   10530:	6823      	ldr	r3, [r4, #0]
{
   10532:	460e      	mov	r6, r1
   10534:	4617      	mov	r7, r2
		flags |= MSG_DONTWAIT;
   10536:	bf14      	ite	ne
   10538:	f04f 0800 	movne.w	r8, #0
   1053c:	f04f 0840 	moveq.w	r8, #64	; 0x40
	}

	ret = recv(client->transport.tcp.sock, data, buflen, flags);
   10540:	6a85      	ldr	r5, [r0, #40]	; 0x28
   10542:	b94b      	cbnz	r3, 10558 <mqtt_client_tcp_read+0x30>
   10544:	4913      	ldr	r1, [pc, #76]	; (10594 <mqtt_client_tcp_read+0x6c>)
   10546:	4814      	ldr	r0, [pc, #80]	; (10598 <mqtt_client_tcp_read+0x70>)
   10548:	2369      	movs	r3, #105	; 0x69
   1054a:	4a14      	ldr	r2, [pc, #80]	; (1059c <mqtt_client_tcp_read+0x74>)
   1054c:	f00f fc45 	bl	1fdda <printk>
   10550:	2169      	movs	r1, #105	; 0x69
   10552:	4812      	ldr	r0, [pc, #72]	; (1059c <mqtt_client_tcp_read+0x74>)
   10554:	f00f fc87 	bl	1fe66 <assert_post_action>
	__ASSERT_NO_MSG(socket_ops->recv);
   10558:	6823      	ldr	r3, [r4, #0]
   1055a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   1055c:	b94b      	cbnz	r3, 10572 <mqtt_client_tcp_read+0x4a>
   1055e:	4910      	ldr	r1, [pc, #64]	; (105a0 <mqtt_client_tcp_read+0x78>)
   10560:	480d      	ldr	r0, [pc, #52]	; (10598 <mqtt_client_tcp_read+0x70>)
   10562:	236a      	movs	r3, #106	; 0x6a
   10564:	4a0d      	ldr	r2, [pc, #52]	; (1059c <mqtt_client_tcp_read+0x74>)
   10566:	f00f fc38 	bl	1fdda <printk>
   1056a:	216a      	movs	r1, #106	; 0x6a
   1056c:	480b      	ldr	r0, [pc, #44]	; (1059c <mqtt_client_tcp_read+0x74>)
   1056e:	f00f fc7a 	bl	1fe66 <assert_post_action>
	return socket_ops->recv(sock, buf, max_len, flags);
   10572:	6823      	ldr	r3, [r4, #0]
   10574:	463a      	mov	r2, r7
   10576:	6a5c      	ldr	r4, [r3, #36]	; 0x24
   10578:	4631      	mov	r1, r6
   1057a:	4643      	mov	r3, r8
   1057c:	4628      	mov	r0, r5
   1057e:	47a0      	blx	r4
	if (ret < 0) {
   10580:	2800      	cmp	r0, #0
   10582:	da03      	bge.n	1058c <mqtt_client_tcp_read+0x64>
		return -errno;
   10584:	f00f fd4b 	bl	2001e <__errno>
   10588:	6800      	ldr	r0, [r0, #0]
   1058a:	4240      	negs	r0, r0
	}

	return ret;
}
   1058c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   10590:	200200a4 	.word	0x200200a4
   10594:	00023446 	.word	0x00023446
   10598:	00023451 	.word	0x00023451
   1059c:	00023416 	.word	0x00023416
   105a0:	00024299 	.word	0x00024299

000105a4 <mqtt_transport_connect>:
#endif /* CONFIG_MQTT_LIB_WEBSOCKET */
};

int mqtt_transport_connect(struct mqtt_client *client)
{
	return transport_fn[client->transport.type].connect(client);
   105a4:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
   105a8:	4a01      	ldr	r2, [pc, #4]	; (105b0 <mqtt_transport_connect+0xc>)
   105aa:	011b      	lsls	r3, r3, #4
   105ac:	58d3      	ldr	r3, [r2, r3]
   105ae:	4718      	bx	r3
   105b0:	00022b7c 	.word	0x00022b7c

000105b4 <mqtt_transport_write>:
}

int mqtt_transport_write(struct mqtt_client *client, const u8_t *data,
			 u32_t datalen)
{
   105b4:	b410      	push	{r4}
	return transport_fn[client->transport.type].write(client, data,
   105b6:	4b04      	ldr	r3, [pc, #16]	; (105c8 <mqtt_transport_write+0x14>)
   105b8:	f890 4024 	ldrb.w	r4, [r0, #36]	; 0x24
   105bc:	eb03 1304 	add.w	r3, r3, r4, lsl #4
   105c0:	685b      	ldr	r3, [r3, #4]
							  datalen);
}
   105c2:	f85d 4b04 	ldr.w	r4, [sp], #4
	return transport_fn[client->transport.type].write(client, data,
   105c6:	4718      	bx	r3
   105c8:	00022b7c 	.word	0x00022b7c

000105cc <mqtt_transport_read>:

int mqtt_transport_read(struct mqtt_client *client, u8_t *data, u32_t buflen,
			bool shall_block)
{
   105cc:	b430      	push	{r4, r5}
	return transport_fn[client->transport.type].read(client, data, buflen,
   105ce:	f890 5024 	ldrb.w	r5, [r0, #36]	; 0x24
   105d2:	4c03      	ldr	r4, [pc, #12]	; (105e0 <mqtt_transport_read+0x14>)
   105d4:	eb04 1405 	add.w	r4, r4, r5, lsl #4
   105d8:	68a4      	ldr	r4, [r4, #8]
   105da:	46a4      	mov	ip, r4
							 shall_block);
}
   105dc:	bc30      	pop	{r4, r5}
	return transport_fn[client->transport.type].read(client, data, buflen,
   105de:	4760      	bx	ip
   105e0:	00022b7c 	.word	0x00022b7c

000105e4 <mqtt_mutex_unlock>:
	return k_mutex_lock(&mutex->kernel_mutex, timeout);
}

static inline int sys_mutex_unlock(struct sys_mutex *mutex)
{
	if (mutex->kernel_mutex.lock_count == 0) {
   105e4:	68c2      	ldr	r2, [r0, #12]
}

/**@brief Release the lock on the module specific mutex, if any.
 */
static inline void mqtt_mutex_unlock(struct mqtt_client *client)
{
   105e6:	b510      	push	{r4, lr}
   105e8:	b142      	cbz	r2, 105fc <mqtt_mutex_unlock+0x18>
		return -EINVAL;
	}

	if (mutex->kernel_mutex.owner != _current) {
   105ea:	4b0f      	ldr	r3, [pc, #60]	; (10628 <mqtt_mutex_unlock+0x44>)
   105ec:	6882      	ldr	r2, [r0, #8]
   105ee:	689b      	ldr	r3, [r3, #8]
   105f0:	429a      	cmp	r2, r3
   105f2:	d115      	bne.n	10620 <mqtt_mutex_unlock+0x3c>
	int ret = sys_mutex_unlock(&client->internal.mutex);

	__ASSERT(ret == 0, "sys_mutex_unlock failed with %d", ret);
	(void)ret;
}
   105f4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	return z_impl_k_mutex_unlock(mutex);
   105f8:	f00b ba08 	b.w	1ba0c <z_impl_k_mutex_unlock>
		return -EINVAL;
   105fc:	f06f 0415 	mvn.w	r4, #21
	__ASSERT(ret == 0, "sys_mutex_unlock failed with %d", ret);
   10600:	2343      	movs	r3, #67	; 0x43
   10602:	4a0a      	ldr	r2, [pc, #40]	; (1062c <mqtt_mutex_unlock+0x48>)
   10604:	490a      	ldr	r1, [pc, #40]	; (10630 <mqtt_mutex_unlock+0x4c>)
   10606:	480b      	ldr	r0, [pc, #44]	; (10634 <mqtt_mutex_unlock+0x50>)
   10608:	f00f fbe7 	bl	1fdda <printk>
   1060c:	4621      	mov	r1, r4
   1060e:	480a      	ldr	r0, [pc, #40]	; (10638 <mqtt_mutex_unlock+0x54>)
   10610:	f00f fbe3 	bl	1fdda <printk>
}
   10614:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	__ASSERT(ret == 0, "sys_mutex_unlock failed with %d", ret);
   10618:	2143      	movs	r1, #67	; 0x43
   1061a:	4804      	ldr	r0, [pc, #16]	; (1062c <mqtt_mutex_unlock+0x48>)
   1061c:	f00f bc23 	b.w	1fe66 <assert_post_action>
		return -EPERM;
   10620:	f04f 34ff 	mov.w	r4, #4294967295
   10624:	e7ec      	b.n	10600 <mqtt_mutex_unlock+0x1c>
   10626:	bf00      	nop
   10628:	20021398 	.word	0x20021398
   1062c:	000242db 	.word	0x000242db
   10630:	0002430c 	.word	0x0002430c
   10634:	00023451 	.word	0x00023451
   10638:	00024315 	.word	0x00024315

0001063c <mqtt_mutex_lock>:
{
   1063c:	b510      	push	{r4, lr}
	return z_impl_k_mutex_lock(mutex, timeout);
   1063e:	f04f 31ff 	mov.w	r1, #4294967295
   10642:	f00b f905 	bl	1b850 <z_impl_k_mutex_lock>
	__ASSERT(ret == 0, "sys_mutex_lock failed with %d", ret);
   10646:	4604      	mov	r4, r0
   10648:	b178      	cbz	r0, 1066a <mqtt_mutex_lock+0x2e>
   1064a:	2339      	movs	r3, #57	; 0x39
   1064c:	4a07      	ldr	r2, [pc, #28]	; (1066c <mqtt_mutex_lock+0x30>)
   1064e:	4908      	ldr	r1, [pc, #32]	; (10670 <mqtt_mutex_lock+0x34>)
   10650:	4808      	ldr	r0, [pc, #32]	; (10674 <mqtt_mutex_lock+0x38>)
   10652:	f00f fbc2 	bl	1fdda <printk>
   10656:	4621      	mov	r1, r4
   10658:	4807      	ldr	r0, [pc, #28]	; (10678 <mqtt_mutex_lock+0x3c>)
   1065a:	f00f fbbe 	bl	1fdda <printk>
}
   1065e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	__ASSERT(ret == 0, "sys_mutex_lock failed with %d", ret);
   10662:	2139      	movs	r1, #57	; 0x39
   10664:	4801      	ldr	r0, [pc, #4]	; (1066c <mqtt_mutex_lock+0x30>)
   10666:	f00f bbfe 	b.w	1fe66 <assert_post_action>
}
   1066a:	bd10      	pop	{r4, pc}
   1066c:	000242db 	.word	0x000242db
   10670:	0002430c 	.word	0x0002430c
   10674:	00023451 	.word	0x00023451
   10678:	000242bb 	.word	0x000242bb

0001067c <z_impl_entropy_get_entropy>:
				  u16_t length);

static inline int z_impl_entropy_get_entropy(struct device *dev,
					    u8_t *buffer,
					    u16_t length)
{
   1067c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	const struct entropy_driver_api *api =
   10680:	6845      	ldr	r5, [r0, #4]
{
   10682:	4604      	mov	r4, r0
		(const struct entropy_driver_api *)dev->driver_api;

	__ASSERT(api->get_entropy != NULL,
   10684:	682b      	ldr	r3, [r5, #0]
{
   10686:	460e      	mov	r6, r1
   10688:	4617      	mov	r7, r2
	__ASSERT(api->get_entropy != NULL,
   1068a:	b963      	cbnz	r3, 106a6 <z_impl_entropy_get_entropy+0x2a>
   1068c:	4909      	ldr	r1, [pc, #36]	; (106b4 <z_impl_entropy_get_entropy+0x38>)
   1068e:	234c      	movs	r3, #76	; 0x4c
   10690:	4a09      	ldr	r2, [pc, #36]	; (106b8 <z_impl_entropy_get_entropy+0x3c>)
   10692:	480a      	ldr	r0, [pc, #40]	; (106bc <z_impl_entropy_get_entropy+0x40>)
   10694:	f00f fba1 	bl	1fdda <printk>
   10698:	4809      	ldr	r0, [pc, #36]	; (106c0 <z_impl_entropy_get_entropy+0x44>)
   1069a:	f00f fb9e 	bl	1fdda <printk>
   1069e:	214c      	movs	r1, #76	; 0x4c
   106a0:	4805      	ldr	r0, [pc, #20]	; (106b8 <z_impl_entropy_get_entropy+0x3c>)
   106a2:	f00f fbe0 	bl	1fe66 <assert_post_action>
		"Callback pointer should not be NULL");
	return api->get_entropy(dev, buffer, length);
   106a6:	682b      	ldr	r3, [r5, #0]
   106a8:	463a      	mov	r2, r7
   106aa:	4631      	mov	r1, r6
   106ac:	4620      	mov	r0, r4
}
   106ae:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	return api->get_entropy(dev, buffer, length);
   106b2:	4718      	bx	r3
   106b4:	00024414 	.word	0x00024414
   106b8:	000243e7 	.word	0x000243e7
   106bc:	00023451 	.word	0x00023451
   106c0:	00024434 	.word	0x00024434

000106c4 <sys_rand32_get>:

static struct device *entropy_driver;

#if defined(CONFIG_ENTROPY_DEVICE_RANDOM_GENERATOR)
u32_t sys_rand32_get(void)
{
   106c4:	b537      	push	{r0, r1, r2, r4, r5, lr}
	struct device *dev = entropy_driver;
   106c6:	4d12      	ldr	r5, [pc, #72]	; (10710 <sys_rand32_get+0x4c>)
   106c8:	682c      	ldr	r4, [r5, #0]
	u32_t random_num;
	int ret;

	if (unlikely(!dev)) {
   106ca:	b99c      	cbnz	r4, 106f4 <sys_rand32_get+0x30>
   106cc:	4811      	ldr	r0, [pc, #68]	; (10714 <sys_rand32_get+0x50>)
   106ce:	f00a fbd3 	bl	1ae78 <z_impl_device_get_binding>
		/* Only one entropy device exists, so this is safe even
		 * if the whole operation isn't atomic.
		 */
		dev = device_get_binding(CONFIG_ENTROPY_NAME);
		__ASSERT((dev != NULL),
   106d2:	4604      	mov	r4, r0
   106d4:	b968      	cbnz	r0, 106f2 <sys_rand32_get+0x2e>
   106d6:	231d      	movs	r3, #29
   106d8:	4a0f      	ldr	r2, [pc, #60]	; (10718 <sys_rand32_get+0x54>)
   106da:	4910      	ldr	r1, [pc, #64]	; (1071c <sys_rand32_get+0x58>)
   106dc:	4810      	ldr	r0, [pc, #64]	; (10720 <sys_rand32_get+0x5c>)
   106de:	f00f fb7c 	bl	1fdda <printk>
   106e2:	490c      	ldr	r1, [pc, #48]	; (10714 <sys_rand32_get+0x50>)
   106e4:	480f      	ldr	r0, [pc, #60]	; (10724 <sys_rand32_get+0x60>)
   106e6:	f00f fb78 	bl	1fdda <printk>
   106ea:	211d      	movs	r1, #29
   106ec:	480a      	ldr	r0, [pc, #40]	; (10718 <sys_rand32_get+0x54>)
   106ee:	f00f fbba 	bl	1fe66 <assert_post_action>
			"Device driver for %s (CONFIG_ENTROPY_NAME) not found. "
			"Check your build configuration!",
			CONFIG_ENTROPY_NAME);
		entropy_driver = dev;
   106f2:	602c      	str	r4, [r5, #0]
	if (z_syscall_trap()) {
		return (int) arch_syscall_invoke3(*(uintptr_t *)&dev, *(uintptr_t *)&buffer, *(uintptr_t *)&length, K_SYSCALL_ENTROPY_GET_ENTROPY);
	}
#endif
	compiler_barrier();
	return z_impl_entropy_get_entropy(dev, buffer, length);
   106f4:	2204      	movs	r2, #4
   106f6:	4620      	mov	r0, r4
   106f8:	eb0d 0102 	add.w	r1, sp, r2
   106fc:	f7ff ffbe 	bl	1067c <z_impl_entropy_get_entropy>
	}

	ret = entropy_get_entropy(dev, (u8_t *)&random_num,
				  sizeof(random_num));
	if (unlikely(ret < 0)) {
   10700:	2800      	cmp	r0, #0
   10702:	da02      	bge.n	1070a <sys_rand32_get+0x46>
#ifndef _ASMLANGUAGE
extern u32_t z_timer_cycle_get_32(void);

static inline u32_t arch_k_cycle_get_32(void)
{
	return z_timer_cycle_get_32();
   10704:	f7fe fb58 	bl	edb8 <z_timer_cycle_get_32>
		 * 32-bit of data.  There's not much that can be done in this
		 * situation.  An __ASSERT() isn't used here as the HWRNG might
		 * still be gathering entropy during early boot situations.
		 */

		random_num = k_cycle_get_32();
   10708:	9001      	str	r0, [sp, #4]
	}

	return random_num;
}
   1070a:	9801      	ldr	r0, [sp, #4]
   1070c:	b003      	add	sp, #12
   1070e:	bd30      	pop	{r4, r5, pc}
   10710:	200200e4 	.word	0x200200e4
   10714:	00024337 	.word	0x00024337
   10718:	00024341 	.word	0x00024341
   1071c:	0002437a 	.word	0x0002437a
   10720:	00023451 	.word	0x00023451
   10724:	0002438f 	.word	0x0002438f

00010728 <gpio_nrfx_manage_callback>:
}

static int gpio_nrfx_manage_callback(struct device *port,
				     struct gpio_callback *callback,
				     bool set)
{
   10728:	b570      	push	{r4, r5, r6, lr}
   1072a:	4616      	mov	r6, r2
	return gpio_manage_callback(&get_port_data(port)->callbacks,
   1072c:	6884      	ldr	r4, [r0, #8]
 */
static inline int gpio_manage_callback(sys_slist_t *callbacks,
					struct gpio_callback *callback,
					bool set)
{
	__ASSERT(callback, "No callback!");
   1072e:	460d      	mov	r5, r1
   10730:	b961      	cbnz	r1, 1074c <gpio_nrfx_manage_callback+0x24>
   10732:	4922      	ldr	r1, [pc, #136]	; (107bc <gpio_nrfx_manage_callback+0x94>)
   10734:	231c      	movs	r3, #28
   10736:	4a22      	ldr	r2, [pc, #136]	; (107c0 <gpio_nrfx_manage_callback+0x98>)
   10738:	4822      	ldr	r0, [pc, #136]	; (107c4 <gpio_nrfx_manage_callback+0x9c>)
   1073a:	f00f fb4e 	bl	1fdda <printk>
   1073e:	4822      	ldr	r0, [pc, #136]	; (107c8 <gpio_nrfx_manage_callback+0xa0>)
   10740:	f00f fb4b 	bl	1fdda <printk>
   10744:	211c      	movs	r1, #28
   10746:	481e      	ldr	r0, [pc, #120]	; (107c0 <gpio_nrfx_manage_callback+0x98>)
   10748:	f00f fb8d 	bl	1fe66 <assert_post_action>
	__ASSERT(callback->handler, "No callback handler!");
   1074c:	686b      	ldr	r3, [r5, #4]
   1074e:	b963      	cbnz	r3, 1076a <gpio_nrfx_manage_callback+0x42>
   10750:	491e      	ldr	r1, [pc, #120]	; (107cc <gpio_nrfx_manage_callback+0xa4>)
   10752:	231d      	movs	r3, #29
   10754:	4a1a      	ldr	r2, [pc, #104]	; (107c0 <gpio_nrfx_manage_callback+0x98>)
   10756:	481b      	ldr	r0, [pc, #108]	; (107c4 <gpio_nrfx_manage_callback+0x9c>)
   10758:	f00f fb3f 	bl	1fdda <printk>
   1075c:	481c      	ldr	r0, [pc, #112]	; (107d0 <gpio_nrfx_manage_callback+0xa8>)
   1075e:	f00f fb3c 	bl	1fdda <printk>
   10762:	211d      	movs	r1, #29
   10764:	4816      	ldr	r0, [pc, #88]	; (107c0 <gpio_nrfx_manage_callback+0x98>)
   10766:	f00f fb7e 	bl	1fe66 <assert_post_action>
Z_GENLIST_IS_EMPTY(slist)
   1076a:	6823      	ldr	r3, [r4, #0]

	if (!sys_slist_is_empty(callbacks)) {
   1076c:	b15b      	cbz	r3, 10786 <gpio_nrfx_manage_callback+0x5e>
 * @return true if node was removed
 */
static inline bool sys_slist_find_and_remove(sys_slist_t *list,
					     sys_snode_t *node);

Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   1076e:	2200      	movs	r2, #0
   10770:	429d      	cmp	r5, r3
   10772:	d113      	bne.n	1079c <gpio_nrfx_manage_callback+0x74>
Z_GENLIST_REMOVE(slist, snode)
   10774:	682b      	ldr	r3, [r5, #0]
   10776:	b95a      	cbnz	r2, 10790 <gpio_nrfx_manage_callback+0x68>
   10778:	6862      	ldr	r2, [r4, #4]
	list->head = node;
   1077a:	6023      	str	r3, [r4, #0]
Z_GENLIST_REMOVE(slist, snode)
   1077c:	4295      	cmp	r5, r2
   1077e:	d100      	bne.n	10782 <gpio_nrfx_manage_callback+0x5a>
	list->tail = node;
   10780:	6063      	str	r3, [r4, #4]
	parent->next = child;
   10782:	2300      	movs	r3, #0
   10784:	602b      	str	r3, [r5, #0]
				return -EINVAL;
			}
		}
	}

	if (set) {
   10786:	b976      	cbnz	r6, 107a6 <gpio_nrfx_manage_callback+0x7e>
		sys_slist_prepend(callbacks, &callback->node);
	}

	return 0;
   10788:	2000      	movs	r0, #0
				     callback, set);
}
   1078a:	bd70      	pop	{r4, r5, r6, pc}
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   1078c:	460b      	mov	r3, r1
   1078e:	e7ef      	b.n	10770 <gpio_nrfx_manage_callback+0x48>
	parent->next = child;
   10790:	6013      	str	r3, [r2, #0]
Z_GENLIST_REMOVE(slist, snode)
   10792:	6863      	ldr	r3, [r4, #4]
   10794:	429d      	cmp	r5, r3
	list->tail = node;
   10796:	bf08      	it	eq
   10798:	6062      	streq	r2, [r4, #4]
   1079a:	e7f2      	b.n	10782 <gpio_nrfx_manage_callback+0x5a>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   1079c:	6819      	ldr	r1, [r3, #0]
	return node->next;
   1079e:	461a      	mov	r2, r3
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   107a0:	2900      	cmp	r1, #0
   107a2:	d1f3      	bne.n	1078c <gpio_nrfx_manage_callback+0x64>
			if (!set) {
   107a4:	b13e      	cbz	r6, 107b6 <gpio_nrfx_manage_callback+0x8e>
Z_GENLIST_PREPEND(slist, snode)
   107a6:	6823      	ldr	r3, [r4, #0]
	parent->next = child;
   107a8:	602b      	str	r3, [r5, #0]
Z_GENLIST_PREPEND(slist, snode)
   107aa:	6860      	ldr	r0, [r4, #4]
	list->head = node;
   107ac:	6025      	str	r5, [r4, #0]
Z_GENLIST_PREPEND(slist, snode)
   107ae:	2800      	cmp	r0, #0
   107b0:	d1ea      	bne.n	10788 <gpio_nrfx_manage_callback+0x60>
	list->tail = node;
   107b2:	6065      	str	r5, [r4, #4]
   107b4:	e7e9      	b.n	1078a <gpio_nrfx_manage_callback+0x62>
				return -EINVAL;
   107b6:	f06f 0015 	mvn.w	r0, #21
	return gpio_manage_callback(&get_port_data(port)->callbacks,
   107ba:	e7e6      	b.n	1078a <gpio_nrfx_manage_callback+0x62>
   107bc:	000244a0 	.word	0x000244a0
   107c0:	00024473 	.word	0x00024473
   107c4:	00023451 	.word	0x00023451
   107c8:	000244a9 	.word	0x000244a9
   107cc:	000244b8 	.word	0x000244b8
   107d0:	000244ca 	.word	0x000244ca

000107d4 <nrf_gpio_pin_port_decode.isra.8.part.9>:
 *
 * @param[in,out] p_pin Pointer to the absolute pin number overriden by the pin number that is relative to the port.
 *
 * @return Pointer to port register set.
 */
NRF_STATIC_INLINE NRF_GPIO_Type * nrf_gpio_pin_port_decode(uint32_t * p_pin)
   107d4:	b508      	push	{r3, lr}
{
    NRFX_ASSERT(*p_pin < NUMBER_OF_PINS);
   107d6:	4a03      	ldr	r2, [pc, #12]	; (107e4 <nrf_gpio_pin_port_decode.isra.8.part.9+0x10>)
   107d8:	4b03      	ldr	r3, [pc, #12]	; (107e8 <nrf_gpio_pin_port_decode.isra.8.part.9+0x14>)
   107da:	f240 11ff 	movw	r1, #511	; 0x1ff
   107de:	4803      	ldr	r0, [pc, #12]	; (107ec <nrf_gpio_pin_port_decode.isra.8.part.9+0x18>)
   107e0:	f00d fd28 	bl	1e234 <__assert_func>
   107e4:	0002445a 	.word	0x0002445a
   107e8:	00024519 	.word	0x00024519
   107ec:	00024527 	.word	0x00024527

000107f0 <nrf_gpio_cfg_sense_set>:
   107f0:	281f      	cmp	r0, #31
}


NRF_STATIC_INLINE void nrf_gpio_cfg_sense_set(uint32_t             pin_number,
                                              nrf_gpio_pin_sense_t sense_config)
{
   107f2:	b508      	push	{r3, lr}
    NRFX_ASSERT(*p_pin < NUMBER_OF_PINS);
   107f4:	d901      	bls.n	107fa <nrf_gpio_cfg_sense_set+0xa>
   107f6:	f7ff ffed 	bl	107d4 <nrf_gpio_pin_port_decode.isra.8.part.9>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    /*lint -e{845} // A zero has been given as right argument to operator '|'" */
    uint32_t cnf = reg->PIN_CNF[pin_number] & ~GPIO_PIN_CNF_SENSE_Msk;
   107fa:	4a06      	ldr	r2, [pc, #24]	; (10814 <nrf_gpio_cfg_sense_set+0x24>)
   107fc:	eb02 0080 	add.w	r0, r2, r0, lsl #2
   10800:	f8d0 3200 	ldr.w	r3, [r0, #512]	; 0x200
   10804:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000

    reg->PIN_CNF[pin_number] = cnf | (sense_config << GPIO_PIN_CNF_SENSE_Pos);
   10808:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
   1080c:	f8c0 3200 	str.w	r3, [r0, #512]	; 0x200
}
   10810:	bd08      	pop	{r3, pc}
   10812:	bf00      	nop
   10814:	40842500 	.word	0x40842500

00010818 <gpio_nrfx_init>:
#endif
	}
}

static int gpio_nrfx_init(struct device *port)
{
   10818:	b508      	push	{r3, lr}
	static bool gpio_initialized;

	if (!gpio_initialized) {
   1081a:	4b09      	ldr	r3, [pc, #36]	; (10840 <gpio_nrfx_init+0x28>)
   1081c:	781a      	ldrb	r2, [r3, #0]
   1081e:	b96a      	cbnz	r2, 1083c <gpio_nrfx_init+0x24>
		gpio_initialized = true;
   10820:	2101      	movs	r1, #1
		IRQ_CONNECT(DT_NORDIC_NRF_GPIOTE_GPIOTE_0_IRQ_0,
   10822:	2031      	movs	r0, #49	; 0x31
		gpio_initialized = true;
   10824:	7019      	strb	r1, [r3, #0]
		IRQ_CONNECT(DT_NORDIC_NRF_GPIOTE_GPIOTE_0_IRQ_0,
   10826:	2105      	movs	r1, #5
   10828:	f7fe fbf2 	bl	f010 <z_arm_irq_priority_set>
			    DT_NORDIC_NRF_GPIOTE_GPIOTE_0_IRQ_0_PRIORITY,
			    gpiote_event_handler, NULL, 0);

		irq_enable(DT_NORDIC_NRF_GPIOTE_GPIOTE_0_IRQ_0);
   1082c:	2031      	movs	r0, #49	; 0x31
   1082e:	f7fe fbdf 	bl	eff0 <arch_irq_enable>
    return ((uint32_t)p_reg + event);
}

NRF_STATIC_INLINE void nrf_gpiote_int_enable(NRF_GPIOTE_Type * p_reg, uint32_t mask)
{
    p_reg->INTENSET = mask;
   10832:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
   10836:	4b03      	ldr	r3, [pc, #12]	; (10844 <gpio_nrfx_init+0x2c>)
   10838:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
		nrf_gpiote_int_enable(NRF_GPIOTE, NRF_GPIOTE_INT_PORT_MASK);
	}

	return 0;
}
   1083c:	2000      	movs	r0, #0
   1083e:	bd08      	pop	{r3, pc}
   10840:	20021662 	.word	0x20021662
   10844:	40031000 	.word	0x40031000

00010848 <gpiote_pin_int_cfg>:
{
   10848:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	return port->config->config_info;
   1084c:	6803      	ldr	r3, [r0, #0]
	u32_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
   1084e:	f001 041f 	and.w	r4, r1, #31
   10852:	689b      	ldr	r3, [r3, #8]
{
   10854:	460d      	mov	r5, r1
	u32_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
   10856:	791b      	ldrb	r3, [r3, #4]
    p_reg->INTENCLR = mask;
}

NRF_STATIC_INLINE uint32_t nrf_gpiote_int_enable_check(NRF_GPIOTE_Type const * p_reg, uint32_t mask)
{
    return p_reg->INTENSET & mask;
   10858:	4e4b      	ldr	r6, [pc, #300]	; (10988 <gpiote_pin_int_cfg+0x140>)
   1085a:	ea44 1443 	orr.w	r4, r4, r3, lsl #5
	for (size_t i = 0; i < GPIOTE_CH_NUM; i++) {
   1085e:	2300      	movs	r3, #0
   10860:	f8d6 2304 	ldr.w	r2, [r6, #772]	; 0x304
	struct gpio_nrfx_data *data = get_port_data(port);
   10864:	6887      	ldr	r7, [r0, #8]
   10866:	b2d2      	uxtb	r2, r2
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk);
}

NRF_STATIC_INLINE uint32_t nrf_gpiote_event_pin_get(NRF_GPIOTE_Type const * p_reg, uint32_t idx)
{
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
   10868:	f503 71a2 	add.w	r1, r3, #324	; 0x144
   1086c:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
   10870:	f3c1 2104 	ubfx	r1, r1, #8, #5
		if ((nrf_gpiote_event_pin_get(NRF_GPIOTE, i) == abs_pin)
   10874:	428c      	cmp	r4, r1
   10876:	d16c      	bne.n	10952 <gpiote_pin_int_cfg+0x10a>
		    && (intenset & BIT(i))) {
   10878:	fa22 f103 	lsr.w	r1, r2, r3
   1087c:	07c9      	lsls	r1, r1, #31
   1087e:	d568      	bpl.n	10952 <gpiote_pin_int_cfg+0x10a>
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Event;
   10880:	009a      	lsls	r2, r3, #2
   10882:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
   10886:	f502 3244 	add.w	r2, r2, #200704	; 0x31000
   1088a:	f8d2 1510 	ldr.w	r1, [r2, #1296]	; 0x510
   1088e:	f021 0101 	bic.w	r1, r1, #1
   10892:	f8c2 1510 	str.w	r1, [r2, #1296]	; 0x510
			nrf_gpiote_int_disable(NRF_GPIOTE, BIT(i));
   10896:	2201      	movs	r2, #1
   10898:	fa02 f303 	lsl.w	r3, r2, r3
    p_reg->INTENCLR = mask;
   1089c:	f8c6 3308 	str.w	r3, [r6, #776]	; 0x308
	nrf_gpio_cfg_sense_set(abs_pin, NRF_GPIO_PIN_NOSENSE);
   108a0:	4620      	mov	r0, r4
   108a2:	2100      	movs	r1, #0
   108a4:	f7ff ffa4 	bl	107f0 <nrf_gpio_cfg_sense_set>
	if ((data->pin_int_en & BIT(pin)) && (data->int_en & BIT(pin))) {
   108a8:	68b8      	ldr	r0, [r7, #8]
   108aa:	40e8      	lsrs	r0, r5
   108ac:	f010 0001 	ands.w	r0, r0, #1
   108b0:	d04d      	beq.n	1094e <gpiote_pin_int_cfg+0x106>
   108b2:	68f8      	ldr	r0, [r7, #12]
   108b4:	40e8      	lsrs	r0, r5
   108b6:	f010 0001 	ands.w	r0, r0, #1
   108ba:	d048      	beq.n	1094e <gpiote_pin_int_cfg+0x106>
		if (data->trig_edge & BIT(pin)) {
   108bc:	6978      	ldr	r0, [r7, #20]
   108be:	40e8      	lsrs	r0, r5
   108c0:	f010 0801 	ands.w	r8, r0, #1
   108c4:	d051      	beq.n	1096a <gpiote_pin_int_cfg+0x122>
			if (data->double_edge & BIT(pin)) {
   108c6:	69bb      	ldr	r3, [r7, #24]
   108c8:	40eb      	lsrs	r3, r5
   108ca:	07db      	lsls	r3, r3, #31
   108cc:	d445      	bmi.n	1095a <gpiote_pin_int_cfg+0x112>
			} else if (((data->active_level & BIT(pin)) != 0U)
   108ce:	693b      	ldr	r3, [r7, #16]
				   ^ ((BIT(pin) & data->inverted) != 0)) {
   108d0:	69fa      	ldr	r2, [r7, #28]
			} else if (((data->active_level & BIT(pin)) != 0U)
   108d2:	40eb      	lsrs	r3, r5
				   ^ ((BIT(pin) & data->inverted) != 0)) {
   108d4:	fa22 f505 	lsr.w	r5, r2, r5
			} else if (((data->active_level & BIT(pin)) != 0U)
   108d8:	f003 0301 	and.w	r3, r3, #1
   108dc:	f005 0501 	and.w	r5, r5, #1
				pol = NRF_GPIOTE_POLARITY_HITOLO;
   108e0:	42ab      	cmp	r3, r5
   108e2:	bf14      	ite	ne
   108e4:	2501      	movne	r5, #1
   108e6:	2502      	moveq	r5, #2
   108e8:	2100      	movs	r1, #0
    p_reg->CONFIG[idx] = 0;
}

NRF_STATIC_INLINE bool nrf_gpiote_te_is_enabled(NRF_GPIOTE_Type const * p_reg, uint32_t idx)
{
    return (p_reg->CONFIG[idx] & GPIOTE_CONFIG_MODE_Msk) != GPIOTE_CONFIG_MODE_Disabled;
   108ea:	f501 73a2 	add.w	r3, r1, #324	; 0x144
   108ee:	f856 0023 	ldr.w	r0, [r6, r3, lsl #2]
		if (!nrf_gpiote_te_is_enabled(NRF_GPIOTE, channel)) {
   108f2:	f010 0003 	ands.w	r0, r0, #3
   108f6:	d132      	bne.n	1095e <gpiote_pin_int_cfg+0x116>
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk | GPIOTE_CONFIG_POLARITY_Msk);
   108f8:	008b      	lsls	r3, r1, #2
   108fa:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   108fe:	f503 3344 	add.w	r3, r3, #200704	; 0x31000
   10902:	f8d3 2510 	ldr.w	r2, [r3, #1296]	; 0x510
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   10906:	0224      	lsls	r4, r4, #8
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk | GPIOTE_CONFIG_POLARITY_Msk);
   10908:	f422 3247 	bic.w	r2, r2, #203776	; 0x31c00
   1090c:	f422 7240 	bic.w	r2, r2, #768	; 0x300
   10910:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   10914:	f8d3 2510 	ldr.w	r2, [r3, #1296]	; 0x510
   10918:	f404 54f8 	and.w	r4, r4, #7936	; 0x1f00
   1091c:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
   10920:	4315      	orrs	r5, r2
			nrf_gpiote_event_t evt =
   10922:	f101 0240 	add.w	r2, r1, #64	; 0x40
   10926:	0092      	lsls	r2, r2, #2
    return ((uint32_t)p_reg + event);
   10928:	b292      	uxth	r2, r2
   1092a:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
   1092e:	f502 3244 	add.w	r2, r2, #200704	; 0x31000
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   10932:	f8c3 5510 	str.w	r5, [r3, #1296]	; 0x510
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   10936:	6010      	str	r0, [r2, #0]
   p_reg->CONFIG[idx] |= GPIOTE_CONFIG_MODE_Event;
   10938:	f8d3 2510 	ldr.w	r2, [r3, #1296]	; 0x510
   1093c:	f042 0201 	orr.w	r2, r2, #1
   10940:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
			nrf_gpiote_int_enable(NRF_GPIOTE, BIT(channel));
   10944:	2301      	movs	r3, #1
   10946:	fa03 f101 	lsl.w	r1, r3, r1
    p_reg->INTENSET = mask;
   1094a:	f8c6 1304 	str.w	r1, [r6, #772]	; 0x304
}
   1094e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	for (size_t i = 0; i < GPIOTE_CH_NUM; i++) {
   10952:	3301      	adds	r3, #1
   10954:	2b08      	cmp	r3, #8
   10956:	d187      	bne.n	10868 <gpiote_pin_int_cfg+0x20>
   10958:	e7a2      	b.n	108a0 <gpiote_pin_int_cfg+0x58>
				pol = NRF_GPIOTE_POLARITY_TOGGLE;
   1095a:	2503      	movs	r5, #3
   1095c:	e7c4      	b.n	108e8 <gpiote_pin_int_cfg+0xa0>
   1095e:	3101      	adds	r1, #1
	for (u8_t channel = 0; channel < GPIOTE_CH_NUM; ++channel) {
   10960:	2908      	cmp	r1, #8
   10962:	d1c2      	bne.n	108ea <gpiote_pin_int_cfg+0xa2>
	return -ENODEV;
   10964:	f06f 0012 	mvn.w	r0, #18
   10968:	e7f1      	b.n	1094e <gpiote_pin_int_cfg+0x106>
	if ((BIT(pin) & (data->active_level ^ data->inverted)) != 0) {
   1096a:	693b      	ldr	r3, [r7, #16]
   1096c:	69fa      	ldr	r2, [r7, #28]
			nrf_gpio_cfg_sense_set(abs_pin, sense);
   1096e:	4620      	mov	r0, r4
	if ((BIT(pin) & (data->active_level ^ data->inverted)) != 0) {
   10970:	4053      	eors	r3, r2
   10972:	fa23 f505 	lsr.w	r5, r3, r5
		return NRF_GPIO_PIN_SENSE_HIGH;
   10976:	f015 0f01 	tst.w	r5, #1
			nrf_gpio_cfg_sense_set(abs_pin, sense);
   1097a:	bf0c      	ite	eq
   1097c:	2103      	moveq	r1, #3
   1097e:	2102      	movne	r1, #2
   10980:	f7ff ff36 	bl	107f0 <nrf_gpio_cfg_sense_set>
	int res = 0;
   10984:	4640      	mov	r0, r8
   10986:	e7e2      	b.n	1094e <gpiote_pin_int_cfg+0x106>
   10988:	40031000 	.word	0x40031000

0001098c <gpio_nrfx_config>:
{
   1098c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   10990:	4680      	mov	r8, r0
	struct gpio_nrfx_data *data = get_port_data(port);
   10992:	6885      	ldr	r5, [r0, #8]
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK)) {
   10994:	f403 4070 	and.w	r0, r3, #61440	; 0xf000
   10998:	f5b0 4f80 	cmp.w	r0, #16384	; 0x4000
{
   1099c:	461e      	mov	r6, r3
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK)) {
   1099e:	d040      	beq.n	10a22 <gpio_nrfx_config+0x96>
   109a0:	dc09      	bgt.n	109b6 <gpio_nrfx_config+0x2a>
   109a2:	f5b0 5f80 	cmp.w	r0, #4096	; 0x1000
   109a6:	d03e      	beq.n	10a26 <gpio_nrfx_config+0x9a>
   109a8:	f5b0 5f40 	cmp.w	r0, #12288	; 0x3000
   109ac:	d03d      	beq.n	10a2a <gpio_nrfx_config+0x9e>
   109ae:	b190      	cbz	r0, 109d6 <gpio_nrfx_config+0x4a>
		return -EINVAL;
   109b0:	f06f 0015 	mvn.w	r0, #21
   109b4:	e032      	b.n	10a1c <gpio_nrfx_config+0x90>
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK)) {
   109b6:	f5b0 4fe0 	cmp.w	r0, #28672	; 0x7000
   109ba:	d038      	beq.n	10a2e <gpio_nrfx_config+0xa2>
   109bc:	dc04      	bgt.n	109c8 <gpio_nrfx_config+0x3c>
   109be:	f5b0 4fa0 	cmp.w	r0, #20480	; 0x5000
   109c2:	d1f5      	bne.n	109b0 <gpio_nrfx_config+0x24>
		drive = NRF_GPIO_PIN_H0H1;
   109c4:	2003      	movs	r0, #3
   109c6:	e006      	b.n	109d6 <gpio_nrfx_config+0x4a>
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK)) {
   109c8:	f5b0 4f40 	cmp.w	r0, #49152	; 0xc000
   109cc:	d031      	beq.n	10a32 <gpio_nrfx_config+0xa6>
   109ce:	f5b0 4f50 	cmp.w	r0, #53248	; 0xd000
   109d2:	d1ed      	bne.n	109b0 <gpio_nrfx_config+0x24>
		drive = NRF_GPIO_PIN_H0D1;
   109d4:	2007      	movs	r0, #7
	if ((flags & GPIO_PUD_MASK) == GPIO_PUD_PULL_UP) {
   109d6:	f406 7740 	and.w	r7, r6, #768	; 0x300
   109da:	f5b7 7f80 	cmp.w	r7, #256	; 0x100
   109de:	d02a      	beq.n	10a36 <gpio_nrfx_config+0xaa>
		pull = NRF_GPIO_PIN_NOPULL;
   109e0:	f5a7 7400 	sub.w	r4, r7, #512	; 0x200
   109e4:	4263      	negs	r3, r4
   109e6:	4163      	adcs	r3, r4
	if (access_op == GPIO_ACCESS_BY_PORT) {
   109e8:	2901      	cmp	r1, #1
		from_pin = pin;
   109ea:	bf19      	ittee	ne
   109ec:	b2d4      	uxtbne	r4, r2
		to_pin   = pin;
   109ee:	46a1      	movne	r9, r4
		to_pin   = 31U;
   109f0:	f04f 091f 	moveq.w	r9, #31
		from_pin = 0U;
   109f4:	2400      	moveq	r4, #0
   109f6:	f04f 0b01 	mov.w	fp, #1
	dir = ((flags & GPIO_DIR_MASK) == GPIO_DIR_OUT)
   109fa:	f006 0c01 	and.w	ip, r6, #1
                               | ((uint32_t)input << GPIO_PIN_CNF_INPUT_Pos)
   109fe:	ea4f 074c 	mov.w	r7, ip, lsl #1
                               | ((uint32_t)drive << GPIO_PIN_CNF_DRIVE_Pos)
   10a02:	ea47 070c 	orr.w	r7, r7, ip
   10a06:	ea47 2000 	orr.w	r0, r7, r0, lsl #8
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
   10a0a:	f8df a0a8 	ldr.w	sl, [pc, #168]	; 10ab4 <gpio_nrfx_config+0x128>
                               | ((uint32_t)drive << GPIO_PIN_CNF_DRIVE_Pos)
   10a0e:	ea40 0783 	orr.w	r7, r0, r3, lsl #2
		WRITE_BIT(data->pin_int_en, curr_pin, flags & GPIO_INT);
   10a12:	f006 0302 	and.w	r3, r6, #2
	for (u8_t curr_pin = from_pin; curr_pin <= to_pin; ++curr_pin) {
   10a16:	45a1      	cmp	r9, r4
   10a18:	d20f      	bcs.n	10a3a <gpio_nrfx_config+0xae>
	return 0;
   10a1a:	2000      	movs	r0, #0
}
   10a1c:	b003      	add	sp, #12
   10a1e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		drive = NRF_GPIO_PIN_S0H1;
   10a22:	2002      	movs	r0, #2
   10a24:	e7d7      	b.n	109d6 <gpio_nrfx_config+0x4a>
		drive = NRF_GPIO_PIN_H0S1;
   10a26:	2001      	movs	r0, #1
   10a28:	e7d5      	b.n	109d6 <gpio_nrfx_config+0x4a>
		drive = NRF_GPIO_PIN_D0S1;
   10a2a:	2004      	movs	r0, #4
   10a2c:	e7d3      	b.n	109d6 <gpio_nrfx_config+0x4a>
		drive = NRF_GPIO_PIN_D0H1;
   10a2e:	2005      	movs	r0, #5
   10a30:	e7d1      	b.n	109d6 <gpio_nrfx_config+0x4a>
		drive = NRF_GPIO_PIN_S0D1;
   10a32:	2006      	movs	r0, #6
   10a34:	e7cf      	b.n	109d6 <gpio_nrfx_config+0x4a>
		pull = NRF_GPIO_PIN_PULLUP;
   10a36:	2303      	movs	r3, #3
   10a38:	e7d6      	b.n	109e8 <gpio_nrfx_config+0x5c>
	return port->config->config_info;
   10a3a:	f8d8 2000 	ldr.w	r2, [r8]
		nrf_gpio_cfg(NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num,
   10a3e:	6892      	ldr	r2, [r2, #8]
   10a40:	7911      	ldrb	r1, [r2, #4]
   10a42:	f004 021f 	and.w	r2, r4, #31
   10a46:	ea42 1241 	orr.w	r2, r2, r1, lsl #5
    NRFX_ASSERT(*p_pin < NUMBER_OF_PINS);
   10a4a:	2a1f      	cmp	r2, #31
   10a4c:	dd01      	ble.n	10a52 <gpio_nrfx_config+0xc6>
   10a4e:	f7ff fec1 	bl	107d4 <nrf_gpio_pin_port_decode.isra.8.part.9>
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
   10a52:	3280      	adds	r2, #128	; 0x80
   10a54:	f84a 7022 	str.w	r7, [sl, r2, lsl #2]
		WRITE_BIT(data->pin_int_en, curr_pin, flags & GPIO_INT);
   10a58:	68a9      	ldr	r1, [r5, #8]
   10a5a:	fa0b f204 	lsl.w	r2, fp, r4
   10a5e:	2b00      	cmp	r3, #0
   10a60:	d025      	beq.n	10aae <gpio_nrfx_config+0x122>
   10a62:	4311      	orrs	r1, r2
   10a64:	60a9      	str	r1, [r5, #8]
		WRITE_BIT(data->trig_edge, curr_pin, flags & GPIO_INT_EDGE);
   10a66:	6969      	ldr	r1, [r5, #20]
   10a68:	06b0      	lsls	r0, r6, #26
   10a6a:	bf4c      	ite	mi
   10a6c:	4311      	orrmi	r1, r2
   10a6e:	4391      	bicpl	r1, r2
   10a70:	6169      	str	r1, [r5, #20]
		WRITE_BIT(data->double_edge, curr_pin,
   10a72:	69a9      	ldr	r1, [r5, #24]
   10a74:	0670      	lsls	r0, r6, #25
   10a76:	bf4c      	ite	mi
   10a78:	4311      	orrmi	r1, r2
   10a7a:	4391      	bicpl	r1, r2
   10a7c:	61a9      	str	r1, [r5, #24]
		WRITE_BIT(data->active_level, curr_pin,
   10a7e:	6929      	ldr	r1, [r5, #16]
   10a80:	0770      	lsls	r0, r6, #29
   10a82:	bf4c      	ite	mi
   10a84:	4311      	orrmi	r1, r2
   10a86:	4391      	bicpl	r1, r2
   10a88:	6129      	str	r1, [r5, #16]
		WRITE_BIT(data->inverted, curr_pin, flags & GPIO_POL_INV);
   10a8a:	69e9      	ldr	r1, [r5, #28]
   10a8c:	0630      	lsls	r0, r6, #24
   10a8e:	bf4c      	ite	mi
   10a90:	430a      	orrmi	r2, r1
   10a92:	ea21 0202 	bicpl.w	r2, r1, r2
   10a96:	61ea      	str	r2, [r5, #28]
		res = gpiote_pin_int_cfg(port, curr_pin);
   10a98:	4621      	mov	r1, r4
   10a9a:	4640      	mov	r0, r8
   10a9c:	9301      	str	r3, [sp, #4]
   10a9e:	f7ff fed3 	bl	10848 <gpiote_pin_int_cfg>
		if (res != 0) {
   10aa2:	2800      	cmp	r0, #0
   10aa4:	d1ba      	bne.n	10a1c <gpio_nrfx_config+0x90>
	for (u8_t curr_pin = from_pin; curr_pin <= to_pin; ++curr_pin) {
   10aa6:	3401      	adds	r4, #1
   10aa8:	b2e4      	uxtb	r4, r4
   10aaa:	9b01      	ldr	r3, [sp, #4]
   10aac:	e7b3      	b.n	10a16 <gpio_nrfx_config+0x8a>
		WRITE_BIT(data->pin_int_en, curr_pin, flags & GPIO_INT);
   10aae:	ea21 0102 	bic.w	r1, r1, r2
   10ab2:	e7d7      	b.n	10a64 <gpio_nrfx_config+0xd8>
   10ab4:	40842500 	.word	0x40842500

00010ab8 <gpiote_event_handler>:
{
   10ab8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   10abc:	4b56      	ldr	r3, [pc, #344]	; (10c18 <gpiote_event_handler+0x160>)
   10abe:	681e      	ldr	r6, [r3, #0]
	if (port_event) {
   10ac0:	4698      	mov	r8, r3
   10ac2:	2e00      	cmp	r6, #0
   10ac4:	d05e      	beq.n	10b84 <gpiote_event_handler+0xcc>
	u32_t bit = 1U << pin;
   10ac6:	2701      	movs	r7, #1
	u32_t pin = 0U;
   10ac8:	f04f 0a00 	mov.w	sl, #0
	struct gpio_nrfx_data *data = get_port_data(port);
   10acc:	4a53      	ldr	r2, [pc, #332]	; (10c1c <gpiote_event_handler+0x164>)
   10ace:	6893      	ldr	r3, [r2, #8]
	return port->config->config_info;
   10ad0:	6812      	ldr	r2, [r2, #0]
	u32_t pin_states = ~(port_in ^ data->inverted ^ data->active_level);
   10ad2:	69dc      	ldr	r4, [r3, #28]
	return port->config->config_info;
   10ad4:	f8d2 9008 	ldr.w	r9, [r2, #8]
	u32_t out = data->int_en & data->pin_int_en;
   10ad8:	e9d3 2502 	ldrd	r2, r5, [r3, #8]
   10adc:	4015      	ands	r5, r2
	out &= ~data->trig_edge & ~data->double_edge;
   10ade:	e9d3 2105 	ldrd	r2, r1, [r3, #20]
   10ae2:	430a      	orrs	r2, r1
   10ae4:	ea25 0502 	bic.w	r5, r5, r2
	u32_t port_in = nrf_gpio_port_in_read(cfg->port);
   10ae8:	f8d9 2000 	ldr.w	r2, [r9]
	u32_t pin_states = ~(port_in ^ data->inverted ^ data->active_level);
   10aec:	691b      	ldr	r3, [r3, #16]
}


NRF_STATIC_INLINE uint32_t nrf_gpio_port_in_read(NRF_GPIO_Type const * p_reg)
{
    return p_reg->IN;
   10aee:	6912      	ldr	r2, [r2, #16]
   10af0:	405c      	eors	r4, r3
   10af2:	4054      	eors	r4, r2
	u32_t out = pin_states & level_pins;
   10af4:	ea25 0404 	bic.w	r4, r5, r4
	while (level_pins) {
   10af8:	bb9d      	cbnz	r5, 10b62 <gpiote_event_handler+0xaa>
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   10afa:	f8c8 5000 	str.w	r5, [r8]
	u32_t fired_triggers[GPIO_COUNT] = {0};
   10afe:	2300      	movs	r3, #0
		if (nrf_gpiote_int_enable_check(NRF_GPIOTE, BIT(i)) &&
   10b00:	2001      	movs	r0, #1
   10b02:	461f      	mov	r7, r3
    return p_reg->INTENSET & mask;
   10b04:	4946      	ldr	r1, [pc, #280]	; (10c20 <gpiote_event_handler+0x168>)
   10b06:	4d47      	ldr	r5, [pc, #284]	; (10c24 <gpiote_event_handler+0x16c>)
   10b08:	f8d1 2304 	ldr.w	r2, [r1, #772]	; 0x304
   10b0c:	fa00 fc03 	lsl.w	ip, r0, r3
   10b10:	ea1c 0f02 	tst.w	ip, r2
   10b14:	d00d      	beq.n	10b32 <gpiote_event_handler+0x7a>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   10b16:	f855 2023 	ldr.w	r2, [r5, r3, lsl #2]
   10b1a:	b152      	cbz	r2, 10b32 <gpiote_event_handler+0x7a>
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
   10b1c:	f503 72a2 	add.w	r2, r3, #324	; 0x144
   10b20:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   10b24:	f845 7023 	str.w	r7, [r5, r3, lsl #2]
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
   10b28:	f3c2 2204 	ubfx	r2, r2, #8, #5
			fired_triggers[abs_pin / 32U] |= BIT(abs_pin % 32);
   10b2c:	fa00 f202 	lsl.w	r2, r0, r2
   10b30:	4314      	orrs	r4, r2
	for (size_t i = 0; i < GPIOTE_CH_NUM; i++) {
   10b32:	3301      	adds	r3, #1
   10b34:	2b08      	cmp	r3, #8
   10b36:	d1e7      	bne.n	10b08 <gpiote_event_handler+0x50>
	if (fired_triggers[0]) {
   10b38:	bb34      	cbnz	r4, 10b88 <gpiote_event_handler+0xd0>
	if (port_event) {
   10b3a:	b186      	cbz	r6, 10b5e <gpiote_event_handler+0xa6>
	u32_t bit = 1U << pin;
   10b3c:	2701      	movs	r7, #1
	u32_t pin = 0U;
   10b3e:	f04f 0800 	mov.w	r8, #0
	const struct gpio_nrfx_data *data = get_port_data(port);
   10b42:	4b36      	ldr	r3, [pc, #216]	; (10c1c <gpiote_event_handler+0x164>)
   10b44:	689d      	ldr	r5, [r3, #8]
	return port->config->config_info;
   10b46:	681b      	ldr	r3, [r3, #0]
   10b48:	689e      	ldr	r6, [r3, #8]
	u32_t out = data->int_en & data->pin_int_en;
   10b4a:	e9d5 3402 	ldrd	r3, r4, [r5, #8]
   10b4e:	401c      	ands	r4, r3
	out &= ~data->trig_edge & ~data->double_edge;
   10b50:	e9d5 3205 	ldrd	r3, r2, [r5, #20]
   10b54:	4313      	orrs	r3, r2
   10b56:	ea24 0403 	bic.w	r4, r4, r3
	while (level_pins) {
   10b5a:	2c00      	cmp	r4, #0
   10b5c:	d142      	bne.n	10be4 <gpiote_event_handler+0x12c>
}
   10b5e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (level_pins & bit) {
   10b62:	423d      	tst	r5, r7
   10b64:	d00a      	beq.n	10b7c <gpiote_event_handler+0xc4>
			u32_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
   10b66:	f899 3004 	ldrb.w	r3, [r9, #4]
   10b6a:	f00a 001f 	and.w	r0, sl, #31
			nrf_gpio_cfg_sense_set(abs_pin, NRF_GPIO_PIN_NOSENSE);
   10b6e:	2100      	movs	r1, #0
   10b70:	ea40 1043 	orr.w	r0, r0, r3, lsl #5
   10b74:	f7ff fe3c 	bl	107f0 <nrf_gpio_cfg_sense_set>
			level_pins &= ~bit;
   10b78:	ea25 0507 	bic.w	r5, r5, r7
		++pin;
   10b7c:	f10a 0a01 	add.w	sl, sl, #1
		bit <<= 1;
   10b80:	007f      	lsls	r7, r7, #1
   10b82:	e7b9      	b.n	10af8 <gpiote_event_handler+0x40>
	u32_t fired_triggers[GPIO_COUNT] = {0};
   10b84:	4634      	mov	r4, r6
   10b86:	e7ba      	b.n	10afe <gpiote_event_handler+0x46>
	struct gpio_nrfx_data *data = get_port_data(port);
   10b88:	4b24      	ldr	r3, [pc, #144]	; (10c1c <gpiote_event_handler+0x164>)
   10b8a:	f8d3 9008 	ldr.w	r9, [r3, #8]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
   10b8e:	f8d9 5000 	ldr.w	r5, [r9]
   10b92:	2d00      	cmp	r5, #0
   10b94:	d0d1      	beq.n	10b3a <gpiote_event_handler+0x82>
			cb->handler(port, cb, pins);
   10b96:	4698      	mov	r8, r3
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   10b98:	682f      	ldr	r7, [r5, #0]
			__ASSERT(cb->handler, "No callback handler!");
   10b9a:	f8df a094 	ldr.w	sl, [pc, #148]	; 10c30 <gpiote_event_handler+0x178>
   10b9e:	f8df b094 	ldr.w	fp, [pc, #148]	; 10c34 <gpiote_event_handler+0x17c>
		if ((cb->pin_mask & pins) & data->int_en) {
   10ba2:	f8d9 300c 	ldr.w	r3, [r9, #12]
   10ba6:	68aa      	ldr	r2, [r5, #8]
   10ba8:	4023      	ands	r3, r4
   10baa:	4213      	tst	r3, r2
   10bac:	d015      	beq.n	10bda <gpiote_event_handler+0x122>
			__ASSERT(cb->handler, "No callback handler!");
   10bae:	686b      	ldr	r3, [r5, #4]
   10bb0:	b973      	cbnz	r3, 10bd0 <gpiote_event_handler+0x118>
   10bb2:	4659      	mov	r1, fp
   10bb4:	f44f 73d2 	mov.w	r3, #420	; 0x1a4
   10bb8:	4652      	mov	r2, sl
   10bba:	481b      	ldr	r0, [pc, #108]	; (10c28 <gpiote_event_handler+0x170>)
   10bbc:	f00f f90d 	bl	1fdda <printk>
   10bc0:	481a      	ldr	r0, [pc, #104]	; (10c2c <gpiote_event_handler+0x174>)
   10bc2:	f00f f90a 	bl	1fdda <printk>
   10bc6:	f44f 71d2 	mov.w	r1, #420	; 0x1a4
   10bca:	4650      	mov	r0, sl
   10bcc:	f00f f94b 	bl	1fe66 <assert_post_action>
			cb->handler(port, cb, pins);
   10bd0:	686b      	ldr	r3, [r5, #4]
   10bd2:	4622      	mov	r2, r4
   10bd4:	4629      	mov	r1, r5
   10bd6:	4640      	mov	r0, r8
   10bd8:	4798      	blx	r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
   10bda:	2f00      	cmp	r7, #0
   10bdc:	d0ad      	beq.n	10b3a <gpiote_event_handler+0x82>
   10bde:	463d      	mov	r5, r7
   10be0:	683f      	ldr	r7, [r7, #0]
   10be2:	e7de      	b.n	10ba2 <gpiote_event_handler+0xea>
		if (level_pins & bit) {
   10be4:	4227      	tst	r7, r4
   10be6:	d013      	beq.n	10c10 <gpiote_event_handler+0x158>
	if ((BIT(pin) & (data->active_level ^ data->inverted)) != 0) {
   10be8:	692b      	ldr	r3, [r5, #16]
   10bea:	69ea      	ldr	r2, [r5, #28]
			u32_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
   10bec:	f896 c004 	ldrb.w	ip, [r6, #4]
	if ((BIT(pin) & (data->active_level ^ data->inverted)) != 0) {
   10bf0:	4053      	eors	r3, r2
   10bf2:	fa23 f308 	lsr.w	r3, r3, r8
		return NRF_GPIO_PIN_SENSE_HIGH;
   10bf6:	f013 0f01 	tst.w	r3, #1
			u32_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
   10bfa:	f008 001f 	and.w	r0, r8, #31
			nrf_gpio_cfg_sense_set(abs_pin, sense);
   10bfe:	bf0c      	ite	eq
   10c00:	2103      	moveq	r1, #3
   10c02:	2102      	movne	r1, #2
   10c04:	ea40 104c 	orr.w	r0, r0, ip, lsl #5
   10c08:	f7ff fdf2 	bl	107f0 <nrf_gpio_cfg_sense_set>
			level_pins &= ~bit;
   10c0c:	ea24 0407 	bic.w	r4, r4, r7
		++pin;
   10c10:	f108 0801 	add.w	r8, r8, #1
		bit <<= 1;
   10c14:	007f      	lsls	r7, r7, #1
   10c16:	e7a0      	b.n	10b5a <gpiote_event_handler+0xa2>
   10c18:	4003117c 	.word	0x4003117c
   10c1c:	20026304 	.word	0x20026304
   10c20:	40031000 	.word	0x40031000
   10c24:	40031100 	.word	0x40031100
   10c28:	00023451 	.word	0x00023451
   10c2c:	000244ca 	.word	0x000244ca
   10c30:	000244e1 	.word	0x000244e1
   10c34:	0002450d 	.word	0x0002450d

00010c38 <uarte_nrfx_configure>:
	return 0;
}

static int uarte_nrfx_configure(struct device *dev,
				const struct uart_config *cfg)
{
   10c38:	b5f0      	push	{r4, r5, r6, r7, lr}
	nrf_uarte_config_t uarte_cfg;

#if defined(UARTE_CONFIG_STOP_Msk)
	switch (cfg->stop_bits) {
   10c3a:	794b      	ldrb	r3, [r1, #5]
   10c3c:	2b01      	cmp	r3, #1
   10c3e:	d029      	beq.n	10c94 <uarte_nrfx_configure+0x5c>
   10c40:	2b03      	cmp	r3, #3
   10c42:	d124      	bne.n	10c8e <uarte_nrfx_configure+0x56>
	case UART_CFG_STOP_BITS_1:
		uarte_cfg.stop = NRF_UARTE_STOP_ONE;
		break;
	case UART_CFG_STOP_BITS_2:
		uarte_cfg.stop = NRF_UARTE_STOP_TWO;
   10c44:	2610      	movs	r6, #16
	if (cfg->stop_bits != UART_CFG_STOP_BITS_1) {
		return -ENOTSUP;
	}
#endif

	if (cfg->data_bits != UART_CFG_DATA_BITS_8) {
   10c46:	798b      	ldrb	r3, [r1, #6]
   10c48:	2b03      	cmp	r3, #3
   10c4a:	d120      	bne.n	10c8e <uarte_nrfx_configure+0x56>
		return -ENOTSUP;
	}

	switch (cfg->flow_ctrl) {
   10c4c:	79cc      	ldrb	r4, [r1, #7]
   10c4e:	b12c      	cbz	r4, 10c5c <uarte_nrfx_configure+0x24>
   10c50:	2c01      	cmp	r4, #1
   10c52:	d11c      	bne.n	10c8e <uarte_nrfx_configure+0x56>
	return dev->config->config_info;
   10c54:	6803      	ldr	r3, [r0, #0]
	case UART_CFG_FLOW_CTRL_NONE:
		uarte_cfg.hwfc = NRF_UARTE_HWFC_DISABLED;
		break;
	case UART_CFG_FLOW_CTRL_RTS_CTS:
		if (get_dev_config(dev)->rts_cts_pins_set) {
   10c56:	689b      	ldr	r3, [r3, #8]
   10c58:	791b      	ldrb	r3, [r3, #4]
   10c5a:	b1c3      	cbz	r3, 10c8e <uarte_nrfx_configure+0x56>
	}

#if defined(UARTE_CONFIG_PARITYTYPE_Msk)
	uarte_cfg.paritytype = NRF_UARTE_PARITYTYPE_EVEN;
#endif
	switch (cfg->parity) {
   10c5c:	790a      	ldrb	r2, [r1, #4]
   10c5e:	b112      	cbz	r2, 10c66 <uarte_nrfx_configure+0x2e>
   10c60:	2a02      	cmp	r2, #2
   10c62:	d114      	bne.n	10c8e <uarte_nrfx_configure+0x56>
	case UART_CFG_PARITY_NONE:
		uarte_cfg.parity = NRF_UARTE_PARITY_EXCLUDED;
		break;
	case UART_CFG_PARITY_EVEN:
		uarte_cfg.parity = NRF_UARTE_PARITY_INCLUDED;
   10c64:	220e      	movs	r2, #14
	switch (baudrate) {
   10c66:	f647 2712 	movw	r7, #31250	; 0x7a12
	return dev->config->config_info;
   10c6a:	6805      	ldr	r5, [r0, #0]
#endif
	default:
		return -ENOTSUP;
	}

	if (baudrate_set(dev, cfg->baudrate) != 0) {
   10c6c:	680b      	ldr	r3, [r1, #0]
	return config->uarte_regs;
   10c6e:	68ad      	ldr	r5, [r5, #8]
	switch (baudrate) {
   10c70:	42bb      	cmp	r3, r7
	return config->uarte_regs;
   10c72:	682d      	ldr	r5, [r5, #0]
	switch (baudrate) {
   10c74:	d062      	beq.n	10d3c <uarte_nrfx_configure+0x104>
   10c76:	d829      	bhi.n	10ccc <uarte_nrfx_configure+0x94>
   10c78:	f5b3 5f96 	cmp.w	r3, #4800	; 0x12c0
   10c7c:	d061      	beq.n	10d42 <uarte_nrfx_configure+0x10a>
   10c7e:	d814      	bhi.n	10caa <uarte_nrfx_configure+0x72>
   10c80:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
   10c84:	d05f      	beq.n	10d46 <uarte_nrfx_configure+0x10e>
   10c86:	d807      	bhi.n	10c98 <uarte_nrfx_configure+0x60>
   10c88:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
   10c8c:	d05e      	beq.n	10d4c <uarte_nrfx_configure+0x114>
		return -ENOTSUP;
   10c8e:	f06f 0085 	mvn.w	r0, #133	; 0x85
   10c92:	e052      	b.n	10d3a <uarte_nrfx_configure+0x102>
		uarte_cfg.stop = NRF_UARTE_STOP_ONE;
   10c94:	2600      	movs	r6, #0
   10c96:	e7d6      	b.n	10c46 <uarte_nrfx_configure+0xe>
	switch (baudrate) {
   10c98:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
   10c9c:	d059      	beq.n	10d52 <uarte_nrfx_configure+0x11a>
   10c9e:	f5b3 6f16 	cmp.w	r3, #2400	; 0x960
   10ca2:	d1f4      	bne.n	10c8e <uarte_nrfx_configure+0x56>
		nrf_baudrate = NRF_UARTE_BAUDRATE_2400;
   10ca4:	f44f 231d 	mov.w	r3, #643072	; 0x9d000
   10ca8:	e03c      	b.n	10d24 <uarte_nrfx_configure+0xec>
	switch (baudrate) {
   10caa:	f5b3 5f61 	cmp.w	r3, #14400	; 0x3840
   10cae:	d053      	beq.n	10d58 <uarte_nrfx_configure+0x120>
   10cb0:	d804      	bhi.n	10cbc <uarte_nrfx_configure+0x84>
   10cb2:	f5b3 5f16 	cmp.w	r3, #9600	; 0x2580
   10cb6:	d1ea      	bne.n	10c8e <uarte_nrfx_configure+0x56>
		nrf_baudrate = NRF_UARTE_BAUDRATE_9600;
   10cb8:	4b32      	ldr	r3, [pc, #200]	; (10d84 <uarte_nrfx_configure+0x14c>)
   10cba:	e033      	b.n	10d24 <uarte_nrfx_configure+0xec>
	switch (baudrate) {
   10cbc:	f5b3 4f96 	cmp.w	r3, #19200	; 0x4b00
   10cc0:	d04c      	beq.n	10d5c <uarte_nrfx_configure+0x124>
   10cc2:	f5b3 4fe1 	cmp.w	r3, #28800	; 0x7080
   10cc6:	d1e2      	bne.n	10c8e <uarte_nrfx_configure+0x56>
		nrf_baudrate = NRF_UARTE_BAUDRATE_28800;
   10cc8:	4b2f      	ldr	r3, [pc, #188]	; (10d88 <uarte_nrfx_configure+0x150>)
   10cca:	e02b      	b.n	10d24 <uarte_nrfx_configure+0xec>
	switch (baudrate) {
   10ccc:	f5b3 3fe1 	cmp.w	r3, #115200	; 0x1c200
   10cd0:	d046      	beq.n	10d60 <uarte_nrfx_configure+0x128>
   10cd2:	d812      	bhi.n	10cfa <uarte_nrfx_configure+0xc2>
   10cd4:	f64d 27c0 	movw	r7, #56000	; 0xdac0
   10cd8:	42bb      	cmp	r3, r7
   10cda:	d044      	beq.n	10d66 <uarte_nrfx_configure+0x12e>
   10cdc:	d805      	bhi.n	10cea <uarte_nrfx_configure+0xb2>
   10cde:	f5b3 4f16 	cmp.w	r3, #38400	; 0x9600
   10ce2:	d1d4      	bne.n	10c8e <uarte_nrfx_configure+0x56>
		nrf_baudrate = NRF_UARTE_BAUDRATE_38400;
   10ce4:	f44f 031d 	mov.w	r3, #10289152	; 0x9d0000
   10ce8:	e01c      	b.n	10d24 <uarte_nrfx_configure+0xec>
	switch (baudrate) {
   10cea:	f5b3 4f61 	cmp.w	r3, #57600	; 0xe100
   10cee:	d03d      	beq.n	10d6c <uarte_nrfx_configure+0x134>
   10cf0:	f5b3 3f96 	cmp.w	r3, #76800	; 0x12c00
   10cf4:	d1cb      	bne.n	10c8e <uarte_nrfx_configure+0x56>
		nrf_baudrate = NRF_UARTE_BAUDRATE_76800;
   10cf6:	4b25      	ldr	r3, [pc, #148]	; (10d8c <uarte_nrfx_configure+0x154>)
   10cf8:	e014      	b.n	10d24 <uarte_nrfx_configure+0xec>
	switch (baudrate) {
   10cfa:	f5b3 2fe1 	cmp.w	r3, #460800	; 0x70800
   10cfe:	d038      	beq.n	10d72 <uarte_nrfx_configure+0x13a>
   10d00:	d808      	bhi.n	10d14 <uarte_nrfx_configure+0xdc>
   10d02:	f5b3 3f61 	cmp.w	r3, #230400	; 0x38400
   10d06:	d037      	beq.n	10d78 <uarte_nrfx_configure+0x140>
   10d08:	4f21      	ldr	r7, [pc, #132]	; (10d90 <uarte_nrfx_configure+0x158>)
   10d0a:	42bb      	cmp	r3, r7
   10d0c:	d1bf      	bne.n	10c8e <uarte_nrfx_configure+0x56>
		nrf_baudrate = NRF_UARTE_BAUDRATE_250000;
   10d0e:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
   10d12:	e007      	b.n	10d24 <uarte_nrfx_configure+0xec>
	switch (baudrate) {
   10d14:	f5b3 2f61 	cmp.w	r3, #921600	; 0xe1000
   10d18:	d031      	beq.n	10d7e <uarte_nrfx_configure+0x146>
   10d1a:	4f1e      	ldr	r7, [pc, #120]	; (10d94 <uarte_nrfx_configure+0x15c>)
   10d1c:	42bb      	cmp	r3, r7
   10d1e:	d1b6      	bne.n	10c8e <uarte_nrfx_configure+0x56>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1000000;
   10d20:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
                    | (uint32_t)p_cfg->hwfc;
}

NRF_STATIC_INLINE void nrf_uarte_baudrate_set(NRF_UARTE_Type * p_reg, nrf_uarte_baudrate_t baudrate)
{
    p_reg->BAUDRATE = baudrate;
   10d24:	f8c5 3524 	str.w	r3, [r5, #1316]	; 0x524
                    | (uint32_t)p_cfg->hwfc;
   10d28:	4334      	orrs	r4, r6
		return -ENOTSUP;
	}

	nrf_uarte_configure(get_uarte_instance(dev), &uarte_cfg);

	get_dev_data(dev)->uart_config = *cfg;
   10d2a:	6883      	ldr	r3, [r0, #8]
   10d2c:	4322      	orrs	r2, r4
   10d2e:	c903      	ldmia	r1, {r0, r1}
    p_reg->CONFIG = (uint32_t)p_cfg->parity
   10d30:	f8c5 256c 	str.w	r2, [r5, #1388]	; 0x56c
   10d34:	e883 0003 	stmia.w	r3, {r0, r1}

	return 0;
   10d38:	2000      	movs	r0, #0
}
   10d3a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		nrf_baudrate = NRF_UARTE_BAUDRATE_31250;
   10d3c:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
   10d40:	e7f0      	b.n	10d24 <uarte_nrfx_configure+0xec>
		nrf_baudrate = NRF_UARTE_BAUDRATE_4800;
   10d42:	4b15      	ldr	r3, [pc, #84]	; (10d98 <uarte_nrfx_configure+0x160>)
   10d44:	e7ee      	b.n	10d24 <uarte_nrfx_configure+0xec>
		nrf_baudrate = 0x00027000;
   10d46:	f44f 331c 	mov.w	r3, #159744	; 0x27000
   10d4a:	e7eb      	b.n	10d24 <uarte_nrfx_configure+0xec>
		nrf_baudrate = 0x00014000;
   10d4c:	f44f 33a0 	mov.w	r3, #81920	; 0x14000
   10d50:	e7e8      	b.n	10d24 <uarte_nrfx_configure+0xec>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1200;
   10d52:	f44f 239e 	mov.w	r3, #323584	; 0x4f000
   10d56:	e7e5      	b.n	10d24 <uarte_nrfx_configure+0xec>
		nrf_baudrate = NRF_UARTE_BAUDRATE_14400;
   10d58:	4b10      	ldr	r3, [pc, #64]	; (10d9c <uarte_nrfx_configure+0x164>)
   10d5a:	e7e3      	b.n	10d24 <uarte_nrfx_configure+0xec>
		nrf_baudrate = NRF_UARTE_BAUDRATE_19200;
   10d5c:	4b10      	ldr	r3, [pc, #64]	; (10da0 <uarte_nrfx_configure+0x168>)
   10d5e:	e7e1      	b.n	10d24 <uarte_nrfx_configure+0xec>
		nrf_baudrate = NRF_UARTE_BAUDRATE_115200;
   10d60:	f04f 73eb 	mov.w	r3, #30801920	; 0x1d60000
   10d64:	e7de      	b.n	10d24 <uarte_nrfx_configure+0xec>
		nrf_baudrate = NRF_UARTE_BAUDRATE_56000;
   10d66:	f44f 0365 	mov.w	r3, #15007744	; 0xe50000
   10d6a:	e7db      	b.n	10d24 <uarte_nrfx_configure+0xec>
		nrf_baudrate = NRF_UARTE_BAUDRATE_57600;
   10d6c:	f44f 036b 	mov.w	r3, #15400960	; 0xeb0000
   10d70:	e7d8      	b.n	10d24 <uarte_nrfx_configure+0xec>
		nrf_baudrate = NRF_UARTE_BAUDRATE_460800;
   10d72:	f04f 63e8 	mov.w	r3, #121634816	; 0x7400000
   10d76:	e7d5      	b.n	10d24 <uarte_nrfx_configure+0xec>
		nrf_baudrate = NRF_UARTE_BAUDRATE_230400;
   10d78:	f04f 736c 	mov.w	r3, #61865984	; 0x3b00000
   10d7c:	e7d2      	b.n	10d24 <uarte_nrfx_configure+0xec>
		nrf_baudrate = NRF_UARTE_BAUDRATE_921600;
   10d7e:	f04f 6370 	mov.w	r3, #251658240	; 0xf000000
   10d82:	e7cf      	b.n	10d24 <uarte_nrfx_configure+0xec>
   10d84:	00275000 	.word	0x00275000
   10d88:	0075c000 	.word	0x0075c000
   10d8c:	013a9000 	.word	0x013a9000
   10d90:	0003d090 	.word	0x0003d090
   10d94:	000f4240 	.word	0x000f4240
   10d98:	0013b000 	.word	0x0013b000
   10d9c:	003af000 	.word	0x003af000
   10da0:	004ea000 	.word	0x004ea000

00010da4 <uarte_0_init>:
	#endif
	#if !defined(DT_NORDIC_NRF_UARTE_UART_0_RX_PIN)
	#define DT_NORDIC_NRF_UARTE_UART_0_RX_PIN NRF_UARTE_PSEL_DISCONNECTED
	#endif

	UART_NRF_UARTE_DEVICE(0);
   10da4:	b570      	push	{r4, r5, r6, lr}
   10da6:	4606      	mov	r6, r0
   10da8:	2200      	movs	r2, #0
   10daa:	2101      	movs	r1, #1
   10dac:	2008      	movs	r0, #8
   10dae:	f7fe f92f 	bl	f010 <z_arm_irq_priority_set>
   10db2:	2008      	movs	r0, #8
   10db4:	f7fe f91c 	bl	eff0 <arch_irq_enable>
}


NRF_STATIC_INLINE void nrf_gpio_port_out_set(NRF_GPIO_Type * p_reg, uint32_t set_mask)
{
    p_reg->OUTSET = set_mask;
   10db8:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
	return dev->config->config_info;
   10dbc:	6833      	ldr	r3, [r6, #0]
	struct uarte_nrfx_data *data = get_dev_data(dev);
   10dbe:	68b5      	ldr	r5, [r6, #8]
	return config->uarte_regs;
   10dc0:	689b      	ldr	r3, [r3, #8]
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
   10dc2:	2103      	movs	r1, #3
   10dc4:	681c      	ldr	r4, [r3, #0]
    p_reg->OUTSET = set_mask;
   10dc6:	4b1a      	ldr	r3, [pc, #104]	; (10e30 <uarte_0_init+0x8c>)
    p_reg->PSEL.TXD = pseltxd;
   10dc8:	201d      	movs	r0, #29
   10dca:	609a      	str	r2, [r3, #8]
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
   10dcc:	2200      	movs	r2, #0
   10dce:	f8c3 1274 	str.w	r1, [r3, #628]	; 0x274
   10dd2:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270
   10dd6:	f8c4 050c 	str.w	r0, [r4, #1292]	; 0x50c
    p_reg->PSEL.RXD = pselrxd;
   10dda:	201c      	movs	r0, #28
   10ddc:	f8c4 0514 	str.w	r0, [r4, #1300]	; 0x514
    p_reg->OUTSET = set_mask;
   10de0:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
   10de4:	6098      	str	r0, [r3, #8]
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
   10de6:	f8c3 126c 	str.w	r1, [r3, #620]	; 0x26c
   10dea:	f8c3 2268 	str.w	r2, [r3, #616]	; 0x268
    p_reg->PSEL.RTS = pselrts;
   10dee:	231b      	movs	r3, #27
   10df0:	f8c4 3508 	str.w	r3, [r4, #1288]	; 0x508
    p_reg->PSEL.CTS = pselcts;
   10df4:	231a      	movs	r3, #26
	err = uarte_nrfx_configure(dev, &get_dev_data(dev)->uart_config);
   10df6:	4629      	mov	r1, r5
   10df8:	f8c4 3510 	str.w	r3, [r4, #1296]	; 0x510
   10dfc:	4630      	mov	r0, r6
   10dfe:	f7ff ff1b 	bl	10c38 <uarte_nrfx_configure>
	if (err) {
   10e02:	b9a0      	cbnz	r0, 10e2e <uarte_0_init+0x8a>
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
   10e04:	2308      	movs	r3, #8
   10e06:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
		nrf_uarte_rx_buffer_set(uarte, &data->rx_data, 1);
   10e0a:	f105 030c 	add.w	r3, r5, #12
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   10e0e:	f8c4 0110 	str.w	r0, [r4, #272]	; 0x110

NRF_STATIC_INLINE void nrf_uarte_rx_buffer_set(NRF_UARTE_Type * p_reg,
                                               uint8_t *        p_buffer,
                                               size_t           length)
{
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
   10e12:	f8c4 3534 	str.w	r3, [r4, #1332]	; 0x534
    p_reg->RXD.MAXCNT = length;
   10e16:	2301      	movs	r3, #1
		nrf_uarte_tx_buffer_set(uarte, data->int_driven->tx_buffer, 0);
   10e18:	68aa      	ldr	r2, [r5, #8]
   10e1a:	f8c4 3538 	str.w	r3, [r4, #1336]	; 0x538
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   10e1e:	6892      	ldr	r2, [r2, #8]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   10e20:	6023      	str	r3, [r4, #0]
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   10e22:	f8c4 2544 	str.w	r2, [r4, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
   10e26:	f8c4 0548 	str.w	r0, [r4, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   10e2a:	60a3      	str	r3, [r4, #8]
   10e2c:	60e3      	str	r3, [r4, #12]
	UART_NRF_UARTE_DEVICE(0);
   10e2e:	bd70      	pop	{r4, r5, r6, pc}
   10e30:	40842500 	.word	0x40842500

00010e34 <entropy_cc310_rng_get_entropy>:
#include "nrf_cc310_platform_entropy.h"
#endif

static int entropy_cc310_rng_get_entropy(struct device *dev, u8_t *buffer,
					 u16_t length)
{
   10e34:	b537      	push	{r0, r1, r2, r4, r5, lr}
   10e36:	460d      	mov	r5, r1
   10e38:	4614      	mov	r4, r2
	int res = -EINVAL;
	size_t olen;

	__ASSERT_NO_MSG(dev != NULL);
   10e3a:	b948      	cbnz	r0, 10e50 <entropy_cc310_rng_get_entropy+0x1c>
   10e3c:	4910      	ldr	r1, [pc, #64]	; (10e80 <entropy_cc310_rng_get_entropy+0x4c>)
   10e3e:	4811      	ldr	r0, [pc, #68]	; (10e84 <entropy_cc310_rng_get_entropy+0x50>)
   10e40:	231e      	movs	r3, #30
   10e42:	4a11      	ldr	r2, [pc, #68]	; (10e88 <entropy_cc310_rng_get_entropy+0x54>)
   10e44:	f00e ffc9 	bl	1fdda <printk>
   10e48:	211e      	movs	r1, #30
   10e4a:	480f      	ldr	r0, [pc, #60]	; (10e88 <entropy_cc310_rng_get_entropy+0x54>)
   10e4c:	f00f f80b 	bl	1fe66 <assert_post_action>
	__ASSERT_NO_MSG(buffer != NULL);
   10e50:	b94d      	cbnz	r5, 10e66 <entropy_cc310_rng_get_entropy+0x32>
   10e52:	490e      	ldr	r1, [pc, #56]	; (10e8c <entropy_cc310_rng_get_entropy+0x58>)
   10e54:	480b      	ldr	r0, [pc, #44]	; (10e84 <entropy_cc310_rng_get_entropy+0x50>)
   10e56:	231f      	movs	r3, #31
   10e58:	4a0b      	ldr	r2, [pc, #44]	; (10e88 <entropy_cc310_rng_get_entropy+0x54>)
   10e5a:	f00e ffbe 	bl	1fdda <printk>
   10e5e:	211f      	movs	r1, #31
   10e60:	4809      	ldr	r0, [pc, #36]	; (10e88 <entropy_cc310_rng_get_entropy+0x54>)
   10e62:	f00f f800 	bl	1fe66 <assert_post_action>

#if defined(CONFIG_SPM)
	/** This is a call from a non-secure app that enables secure services,
	 *  in which case entropy is gathered by calling through SPM
	 */
	res = spm_request_random_number(buffer, length, &olen);
   10e66:	aa01      	add	r2, sp, #4
   10e68:	4621      	mov	r1, r4
   10e6a:	4628      	mov	r0, r5
   10e6c:	f7f7 f8c0 	bl	7ff0 <spm_request_random_number>
	if (olen != length) {
   10e70:	9b01      	ldr	r3, [sp, #4]
		return -EINVAL;
   10e72:	429c      	cmp	r4, r3
		return -EINVAL;
	}
#endif

	return res;
}
   10e74:	bf18      	it	ne
   10e76:	f06f 0015 	mvnne.w	r0, #21
   10e7a:	b003      	add	sp, #12
   10e7c:	bd30      	pop	{r4, r5, pc}
   10e7e:	bf00      	nop
   10e80:	000245a1 	.word	0x000245a1
   10e84:	00023451 	.word	0x00023451
   10e88:	00024571 	.word	0x00024571
   10e8c:	000245b4 	.word	0x000245b4

00010e90 <_bsdlib_init>:
static int _bsdlib_init(struct device *unused)
{
	/* Setup the network IRQ used by the BSD library.
	 * Note: No call to irq_enable() here, that is done through bsd_init().
	 */
	IRQ_DIRECT_CONNECT(BSD_NETWORK_IRQ, BSD_NETWORK_IRQ_PRIORITY,
   10e90:	2200      	movs	r2, #0
{
   10e92:	b508      	push	{r3, lr}
	IRQ_DIRECT_CONNECT(BSD_NETWORK_IRQ, BSD_NETWORK_IRQ_PRIORITY,
   10e94:	4611      	mov	r1, r2
   10e96:	202a      	movs	r0, #42	; 0x2a
   10e98:	f7fe f8ba 	bl	f010 <z_arm_irq_priority_set>
			   ipc_proxy_irq_handler, 0);

	init_ret = bsd_init();
   10e9c:	f003 fea8 	bl	14bf0 <bsd_init>
   10ea0:	4b01      	ldr	r3, [pc, #4]	; (10ea8 <_bsdlib_init+0x18>)
   10ea2:	6018      	str	r0, [r3, #0]
		 */
		return 0;
	}

	return init_ret;
}
   10ea4:	2000      	movs	r0, #0
   10ea6:	bd08      	pop	{r3, pc}
   10ea8:	20020108 	.word	0x20020108

00010eac <thread_monitor_entry_get>:

/* Get thread monitor structure assigned to a specific thread id, with a RPC
 * counter value at which bsdlib last checked the 'readiness' of a thread
 */
static struct thread_monitor_entry *thread_monitor_entry_get(k_tid_t id)
{
   10eac:	b570      	push	{r4, r5, r6, lr}
			new_entry = entry;
			break;
		}

		/* Identify oldest entry. */
		entry_age = rpc_event_cnt - entry->cnt;
   10eae:	4b0d      	ldr	r3, [pc, #52]	; (10ee4 <thread_monitor_entry_get+0x38>)
	struct thread_monitor_entry *new_entry = thread_event_monitor;
   10eb0:	4c0d      	ldr	r4, [pc, #52]	; (10ee8 <thread_monitor_entry_get+0x3c>)
		entry_age = rpc_event_cnt - entry->cnt;
   10eb2:	681a      	ldr	r2, [r3, #0]
   10eb4:	250a      	movs	r5, #10
	int entry_age, oldest_entry_age = 0;
   10eb6:	2600      	movs	r6, #0
	struct thread_monitor_entry *entry = thread_event_monitor;
   10eb8:	4623      	mov	r3, r4
		if (entry->id == id) {
   10eba:	6819      	ldr	r1, [r3, #0]
   10ebc:	4281      	cmp	r1, r0
   10ebe:	d00e      	beq.n	10ede <thread_monitor_entry_get+0x32>
		} else if (entry->id == 0) {
   10ec0:	b151      	cbz	r1, 10ed8 <thread_monitor_entry_get+0x2c>
		entry_age = rpc_event_cnt - entry->cnt;
   10ec2:	6859      	ldr	r1, [r3, #4]
   10ec4:	1a51      	subs	r1, r2, r1
		if (entry_age > oldest_entry_age) {
   10ec6:	42b1      	cmp	r1, r6
   10ec8:	bfc4      	itt	gt
   10eca:	461c      	movgt	r4, r3
   10ecc:	460e      	movgt	r6, r1
	for ( ; PART_OF_ARRAY(thread_event_monitor, entry); entry++) {
   10ece:	3d01      	subs	r5, #1
   10ed0:	f103 0308 	add.w	r3, r3, #8
   10ed4:	d1f1      	bne.n	10eba <thread_monitor_entry_get+0xe>
   10ed6:	4623      	mov	r3, r4
			new_entry = entry;
		}
	}

	new_entry->id = id;
	new_entry->cnt = rpc_event_cnt - 1;
   10ed8:	3a01      	subs	r2, #1
	new_entry->id = id;
   10eda:	6018      	str	r0, [r3, #0]
	new_entry->cnt = rpc_event_cnt - 1;
   10edc:	605a      	str	r2, [r3, #4]

	return new_entry;
}
   10ede:	4618      	mov	r0, r3
   10ee0:	bd70      	pop	{r4, r5, r6, pc}
   10ee2:	bf00      	nop
   10ee4:	2002010c 	.word	0x2002010c
   10ee8:	20020118 	.word	0x20020118

00010eec <rpc_proxy_irq_handler>:
			  */

	return 1; /* We should check if scheduling decision should be made */
}

ISR_DIRECT_DECLARE(rpc_proxy_irq_handler)
   10eec:	4668      	mov	r0, sp
   10eee:	f020 0107 	bic.w	r1, r0, #7
   10ef2:	468d      	mov	sp, r1
   10ef4:	b519      	push	{r0, r3, r4, lr}
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
   10ef6:	4b0d      	ldr	r3, [pc, #52]	; (10f2c <rpc_proxy_irq_handler+0x40>)
   10ef8:	e8d3 2fef 	ldaex	r2, [r3]
   10efc:	3201      	adds	r2, #1
   10efe:	e8c3 2fe1 	stlex	r1, r2, [r3]
   10f02:	2900      	cmp	r1, #0
   10f04:	d1f8      	bne.n	10ef8 <rpc_proxy_irq_handler+0xc>
{
	atomic_inc(&rpc_event_cnt);

	bsd_os_application_irq_handler();
   10f06:	f008 f82b 	bl	18f60 <bsd_os_application_irq_handler>

	struct sleeping_thread *thread;

	/* Wake up all sleeping threads. */
	SYS_SLIST_FOR_EACH_CONTAINER(&sleeping_threads, thread, node) {
   10f0a:	4b09      	ldr	r3, [pc, #36]	; (10f30 <rpc_proxy_irq_handler+0x44>)
   10f0c:	681c      	ldr	r4, [r3, #0]
   10f0e:	b93c      	cbnz	r4, 10f20 <rpc_proxy_irq_handler+0x34>
		k_sem_give(&thread->sem);
	}

	ISR_DIRECT_PM(); /* PM done after servicing interrupt for best latency
   10f10:	f7fe f8b0 	bl	f074 <_arch_isr_direct_pm>
{
#ifdef CONFIG_TRACING
	sys_trace_isr_exit();
#endif
	if (maybe_swap) {
		z_arm_int_exit();
   10f14:	f7fd ffa2 	bl	ee5c <z_arm_exc_exit>
ISR_DIRECT_DECLARE(rpc_proxy_irq_handler)
   10f18:	e8bd 4019 	ldmia.w	sp!, {r0, r3, r4, lr}
   10f1c:	4685      	mov	sp, r0
   10f1e:	4770      	bx	lr
	z_impl_k_sem_give(sem);
   10f20:	1d20      	adds	r0, r4, #4
   10f22:	f00c f8a7 	bl	1d074 <z_impl_k_sem_give>
   10f26:	6824      	ldr	r4, [r4, #0]
	return node->next;
   10f28:	e7f1      	b.n	10f0e <rpc_proxy_irq_handler+0x22>
   10f2a:	bf00      	nop
   10f2c:	2002010c 	.word	0x2002010c
   10f30:	20020110 	.word	0x20020110

00010f34 <bsd_os_timedwait>:
{
   10f34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   10f38:	4688      	mov	r8, r1
   10f3a:	b089      	sub	sp, #36	; 0x24
	return z_impl_k_uptime_get();
   10f3c:	f010 fc77 	bl	2182e <z_impl_k_uptime_get>
	if (*timeout == 0) {
   10f40:	f8d8 3000 	ldr.w	r3, [r8]
   10f44:	4606      	mov	r6, r0
   10f46:	2b00      	cmp	r3, #0
   10f48:	460f      	mov	r7, r1
   10f4a:	d103      	bne.n	10f54 <bsd_os_timedwait+0x20>
	z_impl_k_yield();
   10f4c:	f00b ff0e 	bl	1cd6c <z_impl_k_yield>
		return NRF_ETIMEDOUT;
   10f50:	203c      	movs	r0, #60	; 0x3c
   10f52:	e06e      	b.n	11032 <bsd_os_timedwait+0xfe>
		*timeout = K_FOREVER;
   10f54:	bfbc      	itt	lt
   10f56:	f04f 33ff 	movlt.w	r3, #4294967295
   10f5a:	f8c8 3000 	strlt.w	r3, [r8]
	return z_impl_k_sem_init(sem, initial_count, limit);
   10f5e:	2201      	movs	r2, #1
   10f60:	2100      	movs	r1, #0
   10f62:	a802      	add	r0, sp, #8
   10f64:	f010 fc35 	bl	217d2 <z_impl_k_sem_init>
   10f68:	f10d 0a04 	add.w	sl, sp, #4
   10f6c:	f04f 0320 	mov.w	r3, #32
   10f70:	f3ef 8b11 	mrs	fp, BASEPRI
   10f74:	f383 8811 	msr	BASEPRI, r3
   10f78:	f3bf 8f6f 	isb	sy
	return z_impl_k_current_get();
   10f7c:	f00c f874 	bl	1d068 <z_impl_k_current_get>
	entry = thread_monitor_entry_get(k_current_get());
   10f80:	f7ff ff94 	bl	10eac <thread_monitor_entry_get>
	if (rpc_event_cnt != entry->cnt) {
   10f84:	4933      	ldr	r1, [pc, #204]	; (11054 <bsd_os_timedwait+0x120>)
   10f86:	6843      	ldr	r3, [r0, #4]
   10f88:	680a      	ldr	r2, [r1, #0]
   10f8a:	4689      	mov	r9, r1
   10f8c:	4293      	cmp	r3, r2
   10f8e:	f04f 0300 	mov.w	r3, #0
   10f92:	d108      	bne.n	10fa6 <bsd_os_timedwait+0x72>
	parent->next = child;
   10f94:	9301      	str	r3, [sp, #4]
Z_GENLIST_APPEND(slist, snode)
   10f96:	4b30      	ldr	r3, [pc, #192]	; (11058 <bsd_os_timedwait+0x124>)
   10f98:	685a      	ldr	r2, [r3, #4]
   10f9a:	2a00      	cmp	r2, #0
   10f9c:	d14c      	bne.n	11038 <bsd_os_timedwait+0x104>
	list->head = node;
   10f9e:	e9c3 aa00 	strd	sl, sl, [r3]
		allow_to_sleep = true;
   10fa2:	2301      	movs	r3, #1
   10fa4:	e000      	b.n	10fa8 <bsd_os_timedwait+0x74>
	entry->cnt = rpc_event_cnt;
   10fa6:	6042      	str	r2, [r0, #4]
	__asm__ volatile(
   10fa8:	f38b 8811 	msr	BASEPRI, fp
   10fac:	f3bf 8f6f 	isb	sy
	if (!sleeping_thread_add(&thread)) {
   10fb0:	2b00      	cmp	r3, #0
   10fb2:	d03d      	beq.n	11030 <bsd_os_timedwait+0xfc>
	(void)k_sem_take(&thread.sem, *timeout);
   10fb4:	f8d8 1000 	ldr.w	r1, [r8]
	return z_impl_k_sem_take(sem, timeout);
   10fb8:	a802      	add	r0, sp, #8
   10fba:	f00c f8a5 	bl	1d108 <z_impl_k_sem_take>
	__asm__ volatile(
   10fbe:	f04f 0320 	mov.w	r3, #32
   10fc2:	f3ef 8b11 	mrs	fp, BASEPRI
   10fc6:	f383 8811 	msr	BASEPRI, r3
   10fca:	f3bf 8f6f 	isb	sy
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   10fce:	2000      	movs	r0, #0
   10fd0:	4b21      	ldr	r3, [pc, #132]	; (11058 <bsd_os_timedwait+0x124>)
   10fd2:	681a      	ldr	r2, [r3, #0]
   10fd4:	b152      	cbz	r2, 10fec <bsd_os_timedwait+0xb8>
   10fd6:	4552      	cmp	r2, sl
   10fd8:	d139      	bne.n	1104e <bsd_os_timedwait+0x11a>
Z_GENLIST_REMOVE(slist, snode)
   10fda:	9901      	ldr	r1, [sp, #4]
   10fdc:	bb88      	cbnz	r0, 11042 <bsd_os_timedwait+0x10e>
   10fde:	6858      	ldr	r0, [r3, #4]
	list->head = node;
   10fe0:	6019      	str	r1, [r3, #0]
Z_GENLIST_REMOVE(slist, snode)
   10fe2:	4290      	cmp	r0, r2
   10fe4:	d100      	bne.n	10fe8 <bsd_os_timedwait+0xb4>
	list->tail = node;
   10fe6:	6059      	str	r1, [r3, #4]
	parent->next = child;
   10fe8:	2300      	movs	r3, #0
   10fea:	9301      	str	r3, [sp, #4]
	return z_impl_k_current_get();
   10fec:	f00c f83c 	bl	1d068 <z_impl_k_current_get>
	entry = thread_monitor_entry_get(k_current_get());
   10ff0:	f7ff ff5c 	bl	10eac <thread_monitor_entry_get>
	entry->cnt = rpc_event_cnt;
   10ff4:	f8d9 3000 	ldr.w	r3, [r9]
   10ff8:	6043      	str	r3, [r0, #4]
	__asm__ volatile(
   10ffa:	f38b 8811 	msr	BASEPRI, fp
   10ffe:	f3bf 8f6f 	isb	sy
	if (*timeout == K_FOREVER) {
   11002:	f8d8 9000 	ldr.w	r9, [r8]
   11006:	f1b9 3fff 	cmp.w	r9, #4294967295
   1100a:	d011      	beq.n	11030 <bsd_os_timedwait+0xfc>
	return z_impl_k_uptime_get();
   1100c:	f010 fc0f 	bl	2182e <z_impl_k_uptime_get>
	remaining = *timeout - (k_uptime_get() - start);
   11010:	eb16 0209 	adds.w	r2, r6, r9
   11014:	eb47 73e9 	adc.w	r3, r7, r9, asr #31
   11018:	1a14      	subs	r4, r2, r0
   1101a:	eb63 0501 	sbc.w	r5, r3, r1
	*timeout = remaining > 0 ? remaining : 0;
   1101e:	2c00      	cmp	r4, #0
   11020:	f175 0300 	sbcs.w	r3, r5, #0
   11024:	bfb8      	it	lt
   11026:	2400      	movlt	r4, #0
   11028:	f8c8 4000 	str.w	r4, [r8]
	if (*timeout == 0) {
   1102c:	2c00      	cmp	r4, #0
   1102e:	d08f      	beq.n	10f50 <bsd_os_timedwait+0x1c>
	return 0;
   11030:	2000      	movs	r0, #0
}
   11032:	b009      	add	sp, #36	; 0x24
   11034:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11038:	f8c2 a000 	str.w	sl, [r2]
	list->tail = node;
   1103c:	f8c3 a004 	str.w	sl, [r3, #4]
   11040:	e7af      	b.n	10fa2 <bsd_os_timedwait+0x6e>
	parent->next = child;
   11042:	6001      	str	r1, [r0, #0]
Z_GENLIST_REMOVE(slist, snode)
   11044:	6859      	ldr	r1, [r3, #4]
   11046:	4291      	cmp	r1, r2
	list->tail = node;
   11048:	bf08      	it	eq
   1104a:	6058      	streq	r0, [r3, #4]
   1104c:	e7cc      	b.n	10fe8 <bsd_os_timedwait+0xb4>
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   1104e:	4610      	mov	r0, r2
   11050:	6812      	ldr	r2, [r2, #0]
   11052:	e7bf      	b.n	10fd4 <bsd_os_timedwait+0xa0>
   11054:	2002010c 	.word	0x2002010c
   11058:	20020110 	.word	0x20020110

0001105c <bsd_os_errno_set>:
	switch (err_code) {
   1105c:	282d      	cmp	r0, #45	; 0x2d
{
   1105e:	b510      	push	{r4, lr}
   11060:	4604      	mov	r4, r0
	switch (err_code) {
   11062:	f000 80a8 	beq.w	111b6 <bsd_os_errno_set+0x15a>
   11066:	dc50      	bgt.n	1110a <bsd_os_errno_set+0xae>
   11068:	2816      	cmp	r0, #22
   1106a:	d009      	beq.n	11080 <bsd_os_errno_set+0x24>
   1106c:	dc38      	bgt.n	110e0 <bsd_os_errno_set+0x84>
   1106e:	2808      	cmp	r0, #8
   11070:	d006      	beq.n	11080 <bsd_os_errno_set+0x24>
   11072:	dc09      	bgt.n	11088 <bsd_os_errno_set+0x2c>
   11074:	2802      	cmp	r0, #2
   11076:	d003      	beq.n	11080 <bsd_os_errno_set+0x24>
   11078:	2805      	cmp	r0, #5
   1107a:	d001      	beq.n	11080 <bsd_os_errno_set+0x24>
   1107c:	2801      	cmp	r0, #1
   1107e:	d10c      	bne.n	1109a <bsd_os_errno_set+0x3e>
		errno = ENOBUFS;
   11080:	f00e ffcd 	bl	2001e <__errno>
   11084:	6004      	str	r4, [r0, #0]
}
   11086:	bd10      	pop	{r4, pc}
	switch (err_code) {
   11088:	280c      	cmp	r0, #12
   1108a:	d0f9      	beq.n	11080 <bsd_os_errno_set+0x24>
   1108c:	dc01      	bgt.n	11092 <bsd_os_errno_set+0x36>
   1108e:	2809      	cmp	r0, #9
   11090:	e7f5      	b.n	1107e <bsd_os_errno_set+0x22>
   11092:	280d      	cmp	r0, #13
   11094:	d0f4      	beq.n	11080 <bsd_os_errno_set+0x24>
   11096:	280e      	cmp	r0, #14
   11098:	d074      	beq.n	11184 <bsd_os_errno_set+0x128>
		__ASSERT(false, "Untranslated errno %d set by bsdlib!", err_code);
   1109a:	f44f 73a5 	mov.w	r3, #330	; 0x14a
   1109e:	4a63      	ldr	r2, [pc, #396]	; (1122c <bsd_os_errno_set+0x1d0>)
   110a0:	4963      	ldr	r1, [pc, #396]	; (11230 <bsd_os_errno_set+0x1d4>)
   110a2:	4864      	ldr	r0, [pc, #400]	; (11234 <bsd_os_errno_set+0x1d8>)
   110a4:	f00e fe99 	bl	1fdda <printk>
   110a8:	4621      	mov	r1, r4
   110aa:	4863      	ldr	r0, [pc, #396]	; (11238 <bsd_os_errno_set+0x1dc>)
   110ac:	f00e fe95 	bl	1fdda <printk>
   110b0:	f44f 71a5 	mov.w	r1, #330	; 0x14a
   110b4:	485d      	ldr	r0, [pc, #372]	; (1122c <bsd_os_errno_set+0x1d0>)
   110b6:	f00e fed6 	bl	1fe66 <assert_post_action>
		LOG_ERR("Untranslated errno %d set by bsdlib!", err_code);
   110ba:	2301      	movs	r3, #1
   110bc:	f04f 0000 	mov.w	r0, #0
   110c0:	4a5e      	ldr	r2, [pc, #376]	; (1123c <bsd_os_errno_set+0x1e0>)
   110c2:	f363 0007 	bfi	r0, r3, #0, #8
   110c6:	4b5e      	ldr	r3, [pc, #376]	; (11240 <bsd_os_errno_set+0x1e4>)
   110c8:	495e      	ldr	r1, [pc, #376]	; (11244 <bsd_os_errno_set+0x1e8>)
   110ca:	1a9b      	subs	r3, r3, r2
   110cc:	08db      	lsrs	r3, r3, #3
   110ce:	f363 108f 	bfi	r0, r3, #6, #10
   110d2:	4622      	mov	r2, r4
   110d4:	f00e fed8 	bl	1fe88 <log_string_sync>
		errno = 0xBAADBAAD;
   110d8:	f00e ffa1 	bl	2001e <__errno>
   110dc:	4b5a      	ldr	r3, [pc, #360]	; (11248 <bsd_os_errno_set+0x1ec>)
   110de:	e054      	b.n	1118a <bsd_os_errno_set+0x12e>
	switch (err_code) {
   110e0:	2828      	cmp	r0, #40	; 0x28
   110e2:	f000 809f 	beq.w	11224 <bsd_os_errno_set+0x1c8>
   110e6:	dc05      	bgt.n	110f4 <bsd_os_errno_set+0x98>
   110e8:	2823      	cmp	r0, #35	; 0x23
   110ea:	d050      	beq.n	1118e <bsd_os_errno_set+0x132>
   110ec:	2825      	cmp	r0, #37	; 0x25
   110ee:	d052      	beq.n	11196 <bsd_os_errno_set+0x13a>
   110f0:	2818      	cmp	r0, #24
   110f2:	e7c4      	b.n	1107e <bsd_os_errno_set+0x22>
   110f4:	282a      	cmp	r0, #42	; 0x2a
   110f6:	d056      	beq.n	111a6 <bsd_os_errno_set+0x14a>
   110f8:	db51      	blt.n	1119e <bsd_os_errno_set+0x142>
   110fa:	282b      	cmp	r0, #43	; 0x2b
   110fc:	d057      	beq.n	111ae <bsd_os_errno_set+0x152>
   110fe:	282c      	cmp	r0, #44	; 0x2c
   11100:	d1cb      	bne.n	1109a <bsd_os_errno_set+0x3e>
		errno = ESOCKTNOSUPPORT;
   11102:	f00e ff8c 	bl	2001e <__errno>
   11106:	237c      	movs	r3, #124	; 0x7c
   11108:	e03f      	b.n	1118a <bsd_os_errno_set+0x12e>
	switch (err_code) {
   1110a:	283c      	cmp	r0, #60	; 0x3c
   1110c:	d06b      	beq.n	111e6 <bsd_os_errno_set+0x18a>
   1110e:	dc1d      	bgt.n	1114c <bsd_os_errno_set+0xf0>
   11110:	2833      	cmp	r0, #51	; 0x33
   11112:	d05c      	beq.n	111ce <bsd_os_errno_set+0x172>
   11114:	dc09      	bgt.n	1112a <bsd_os_errno_set+0xce>
   11116:	2830      	cmp	r0, #48	; 0x30
   11118:	d051      	beq.n	111be <bsd_os_errno_set+0x162>
   1111a:	2832      	cmp	r0, #50	; 0x32
   1111c:	d053      	beq.n	111c6 <bsd_os_errno_set+0x16a>
   1111e:	282f      	cmp	r0, #47	; 0x2f
   11120:	d1bb      	bne.n	1109a <bsd_os_errno_set+0x3e>
		errno = EAFNOSUPPORT;
   11122:	f00e ff7c 	bl	2001e <__errno>
   11126:	236a      	movs	r3, #106	; 0x6a
   11128:	e02f      	b.n	1118a <bsd_os_errno_set+0x12e>
	switch (err_code) {
   1112a:	2836      	cmp	r0, #54	; 0x36
   1112c:	d053      	beq.n	111d6 <bsd_os_errno_set+0x17a>
   1112e:	dc05      	bgt.n	1113c <bsd_os_errno_set+0xe0>
   11130:	2834      	cmp	r0, #52	; 0x34
   11132:	d1b2      	bne.n	1109a <bsd_os_errno_set+0x3e>
		errno = ENETRESET;
   11134:	f00e ff73 	bl	2001e <__errno>
   11138:	237e      	movs	r3, #126	; 0x7e
   1113a:	e026      	b.n	1118a <bsd_os_errno_set+0x12e>
	switch (err_code) {
   1113c:	2838      	cmp	r0, #56	; 0x38
   1113e:	d04e      	beq.n	111de <bsd_os_errno_set+0x182>
   11140:	2839      	cmp	r0, #57	; 0x39
   11142:	d1aa      	bne.n	1109a <bsd_os_errno_set+0x3e>
		errno = ENOTCONN;
   11144:	f00e ff6b 	bl	2001e <__errno>
   11148:	2380      	movs	r3, #128	; 0x80
   1114a:	e01e      	b.n	1118a <bsd_os_errno_set+0x12e>
	switch (err_code) {
   1114c:	287d      	cmp	r0, #125	; 0x7d
   1114e:	d056      	beq.n	111fe <bsd_os_errno_set+0x1a2>
   11150:	dc0c      	bgt.n	1116c <bsd_os_errno_set+0x110>
   11152:	2870      	cmp	r0, #112	; 0x70
   11154:	d04b      	beq.n	111ee <bsd_os_errno_set+0x192>
   11156:	dc01      	bgt.n	1115c <bsd_os_errno_set+0x100>
   11158:	2869      	cmp	r0, #105	; 0x69
   1115a:	e790      	b.n	1107e <bsd_os_errno_set+0x22>
   1115c:	2872      	cmp	r0, #114	; 0x72
   1115e:	d04a      	beq.n	111f6 <bsd_os_errno_set+0x19a>
   11160:	2873      	cmp	r0, #115	; 0x73
   11162:	d19a      	bne.n	1109a <bsd_os_errno_set+0x3e>
		errno = EINPROGRESS;
   11164:	f00e ff5b 	bl	2001e <__errno>
   11168:	2377      	movs	r3, #119	; 0x77
   1116a:	e00e      	b.n	1118a <bsd_os_errno_set+0x12e>
	switch (err_code) {
   1116c:	287f      	cmp	r0, #127	; 0x7f
   1116e:	d04f      	beq.n	11210 <bsd_os_errno_set+0x1b4>
   11170:	db49      	blt.n	11206 <bsd_os_errno_set+0x1aa>
   11172:	2880      	cmp	r0, #128	; 0x80
   11174:	d051      	beq.n	1121a <bsd_os_errno_set+0x1be>
   11176:	2881      	cmp	r0, #129	; 0x81
   11178:	d18f      	bne.n	1109a <bsd_os_errno_set+0x3e>
		errno = EKEYREJECTED;
   1117a:	f00e ff50 	bl	2001e <__errno>
   1117e:	f240 73d4 	movw	r3, #2004	; 0x7d4
   11182:	e002      	b.n	1118a <bsd_os_errno_set+0x12e>
		errno = EFAULT;
   11184:	f00e ff4b 	bl	2001e <__errno>
   11188:	230e      	movs	r3, #14
		errno = 0xBAADBAAD;
   1118a:	6003      	str	r3, [r0, #0]
}
   1118c:	e77b      	b.n	11086 <bsd_os_errno_set+0x2a>
		errno = EAGAIN;
   1118e:	f00e ff46 	bl	2001e <__errno>
   11192:	230b      	movs	r3, #11
   11194:	e7f9      	b.n	1118a <bsd_os_errno_set+0x12e>
		errno = EDOM;
   11196:	f00e ff42 	bl	2001e <__errno>
   1119a:	2321      	movs	r3, #33	; 0x21
   1119c:	e7f5      	b.n	1118a <bsd_os_errno_set+0x12e>
		errno = EPROTOTYPE;
   1119e:	f00e ff3e 	bl	2001e <__errno>
   111a2:	236b      	movs	r3, #107	; 0x6b
   111a4:	e7f1      	b.n	1118a <bsd_os_errno_set+0x12e>
		errno = ENOPROTOOPT;
   111a6:	f00e ff3a 	bl	2001e <__errno>
   111aa:	236d      	movs	r3, #109	; 0x6d
   111ac:	e7ed      	b.n	1118a <bsd_os_errno_set+0x12e>
		errno = EPROTONOSUPPORT;
   111ae:	f00e ff36 	bl	2001e <__errno>
   111b2:	237b      	movs	r3, #123	; 0x7b
   111b4:	e7e9      	b.n	1118a <bsd_os_errno_set+0x12e>
		errno = EOPNOTSUPP;
   111b6:	f00e ff32 	bl	2001e <__errno>
   111ba:	235f      	movs	r3, #95	; 0x5f
   111bc:	e7e5      	b.n	1118a <bsd_os_errno_set+0x12e>
		errno = EADDRINUSE;
   111be:	f00e ff2e 	bl	2001e <__errno>
   111c2:	2370      	movs	r3, #112	; 0x70
   111c4:	e7e1      	b.n	1118a <bsd_os_errno_set+0x12e>
		errno = ENETDOWN;
   111c6:	f00e ff2a 	bl	2001e <__errno>
   111ca:	2373      	movs	r3, #115	; 0x73
   111cc:	e7dd      	b.n	1118a <bsd_os_errno_set+0x12e>
		errno = ENETUNREACH;
   111ce:	f00e ff26 	bl	2001e <__errno>
   111d2:	2372      	movs	r3, #114	; 0x72
   111d4:	e7d9      	b.n	1118a <bsd_os_errno_set+0x12e>
		errno = ECONNRESET;
   111d6:	f00e ff22 	bl	2001e <__errno>
   111da:	2368      	movs	r3, #104	; 0x68
   111dc:	e7d5      	b.n	1118a <bsd_os_errno_set+0x12e>
		errno = EISCONN;
   111de:	f00e ff1e 	bl	2001e <__errno>
   111e2:	237f      	movs	r3, #127	; 0x7f
   111e4:	e7d1      	b.n	1118a <bsd_os_errno_set+0x12e>
		errno = ETIMEDOUT;
   111e6:	f00e ff1a 	bl	2001e <__errno>
   111ea:	2374      	movs	r3, #116	; 0x74
   111ec:	e7cd      	b.n	1118a <bsd_os_errno_set+0x12e>
		errno = EHOSTDOWN;
   111ee:	f00e ff16 	bl	2001e <__errno>
   111f2:	2375      	movs	r3, #117	; 0x75
   111f4:	e7c9      	b.n	1118a <bsd_os_errno_set+0x12e>
		errno = EALREADY;
   111f6:	f00e ff12 	bl	2001e <__errno>
   111fa:	2378      	movs	r3, #120	; 0x78
   111fc:	e7c5      	b.n	1118a <bsd_os_errno_set+0x12e>
		errno = ECANCELED;
   111fe:	f00e ff0e 	bl	2001e <__errno>
   11202:	238c      	movs	r3, #140	; 0x8c
   11204:	e7c1      	b.n	1118a <bsd_os_errno_set+0x12e>
		errno = ENOKEY;
   11206:	f00e ff0a 	bl	2001e <__errno>
   1120a:	f240 73d1 	movw	r3, #2001	; 0x7d1
   1120e:	e7bc      	b.n	1118a <bsd_os_errno_set+0x12e>
		errno = EKEYEXPIRED;
   11210:	f00e ff05 	bl	2001e <__errno>
   11214:	f240 73d2 	movw	r3, #2002	; 0x7d2
   11218:	e7b7      	b.n	1118a <bsd_os_errno_set+0x12e>
		errno = EKEYREVOKED;
   1121a:	f00e ff00 	bl	2001e <__errno>
   1121e:	f240 73d3 	movw	r3, #2003	; 0x7d3
   11222:	e7b2      	b.n	1118a <bsd_os_errno_set+0x12e>
		errno = EMSGSIZE;
   11224:	f00e fefb 	bl	2001e <__errno>
   11228:	237a      	movs	r3, #122	; 0x7a
   1122a:	e7ae      	b.n	1118a <bsd_os_errno_set+0x12e>
   1122c:	000245ca 	.word	0x000245ca
   11230:	000251cf 	.word	0x000251cf
   11234:	00023451 	.word	0x00023451
   11238:	000245ee 	.word	0x000245ee
   1123c:	00022924 	.word	0x00022924
   11240:	0002293c 	.word	0x0002293c
   11244:	00024615 	.word	0x00024615
   11248:	baadbaad 	.word	0xbaadbaad

0001124c <bsd_os_application_irq_set>:
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   1124c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   11250:	4b01      	ldr	r3, [pc, #4]	; (11258 <bsd_os_application_irq_set+0xc>)
   11252:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
}
   11256:	4770      	bx	lr
   11258:	e000e100 	.word	0xe000e100

0001125c <bsd_os_application_irq_clear>:
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   1125c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   11260:	4b01      	ldr	r3, [pc, #4]	; (11268 <bsd_os_application_irq_clear+0xc>)
   11262:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
}
   11266:	4770      	bx	lr
   11268:	e000e100 	.word	0xe000e100

0001126c <bsd_os_trace_irq_set>:
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   1126c:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
   11270:	4b01      	ldr	r3, [pc, #4]	; (11278 <bsd_os_trace_irq_set+0xc>)
   11272:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
}
   11276:	4770      	bx	lr
   11278:	e000e100 	.word	0xe000e100

0001127c <bsd_os_trace_irq_clear>:
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   1127c:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
   11280:	4b01      	ldr	r3, [pc, #4]	; (11288 <bsd_os_trace_irq_clear+0xc>)
   11282:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
}
   11286:	4770      	bx	lr
   11288:	e000e100 	.word	0xe000e100

0001128c <bsd_os_init>:
#endif
}

/* This function is called by bsd_init and must not be called explicitly. */
void bsd_os_init(void)
{
   1128c:	b508      	push	{r3, lr}
	list->head = NULL;
   1128e:	2300      	movs	r3, #0
   11290:	4a07      	ldr	r2, [pc, #28]	; (112b0 <bsd_os_init+0x24>)
	list->tail = NULL;
   11292:	e9c2 3300 	strd	r3, r3, [r2]
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   11296:	4a07      	ldr	r2, [pc, #28]	; (112b4 <bsd_os_init+0x28>)
   11298:	e8d2 1fef 	ldaex	r1, [r2]
   1129c:	e8c2 3fe0 	stlex	r0, r3, [r2]
   112a0:	2800      	cmp	r0, #0
   112a2:	d1f9      	bne.n	11298 <bsd_os_init+0xc>
	sys_slist_init(&sleeping_threads);
	atomic_clear(&rpc_event_cnt);

	read_task_create();
   112a4:	f00f fcef 	bl	20c86 <read_task_create>

	/* Configure and enable modem tracing over UART. */
	trace_uart_init();
	trace_task_create();
}
   112a8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	trace_task_create();
   112ac:	f00f bce0 	b.w	20c70 <trace_task_create>
   112b0:	20020110 	.word	0x20020110
   112b4:	2002010c 	.word	0x2002010c

000112b8 <z_to_nrf_optname>:
static int z_to_nrf_optname(int z_in_level, int z_in_optname,
			    int *nrf_out_optname)
{
	int retval = 0;

	switch (z_in_level) {
   112b8:	f5b0 7f8d 	cmp.w	r0, #282	; 0x11a
   112bc:	d03c      	beq.n	11338 <z_to_nrf_optname+0x80>
   112be:	dc04      	bgt.n	112ca <z_to_nrf_optname+0x12>
   112c0:	2801      	cmp	r0, #1
   112c2:	d044      	beq.n	1134e <z_to_nrf_optname+0x96>
			break;
		}
		break;

	default:
		retval = -1;
   112c4:	f04f 30ff 	mov.w	r0, #4294967295
		break;
	}

	return retval;
}
   112c8:	4770      	bx	lr
	switch (z_in_level) {
   112ca:	f240 2302 	movw	r3, #514	; 0x202
   112ce:	4298      	cmp	r0, r3
   112d0:	d052      	beq.n	11378 <z_to_nrf_optname+0xc0>
   112d2:	f240 2303 	movw	r3, #515	; 0x203
   112d6:	4298      	cmp	r0, r3
   112d8:	d1f4      	bne.n	112c4 <z_to_nrf_optname+0xc>
		switch (z_in_optname) {
   112da:	3901      	subs	r1, #1
   112dc:	2913      	cmp	r1, #19
   112de:	d8f1      	bhi.n	112c4 <z_to_nrf_optname+0xc>
   112e0:	a301      	add	r3, pc, #4	; (adr r3, 112e8 <z_to_nrf_optname+0x30>)
   112e2:	f853 f021 	ldr.w	pc, [r3, r1, lsl #2]
   112e6:	bf00      	nop
   112e8:	00011385 	.word	0x00011385
   112ec:	00011349 	.word	0x00011349
   112f0:	00011369 	.word	0x00011369
   112f4:	0001135b 	.word	0x0001135b
   112f8:	0001136d 	.word	0x0001136d
   112fc:	00011371 	.word	0x00011371
   11300:	00011375 	.word	0x00011375
   11304:	000112c5 	.word	0x000112c5
   11308:	000112c5 	.word	0x000112c5
   1130c:	000112c5 	.word	0x000112c5
   11310:	000112c5 	.word	0x000112c5
   11314:	000112c5 	.word	0x000112c5
   11318:	000112c5 	.word	0x000112c5
   1131c:	000112c5 	.word	0x000112c5
   11320:	000112c5 	.word	0x000112c5
   11324:	000112c5 	.word	0x000112c5
   11328:	000112c5 	.word	0x000112c5
   1132c:	000112c5 	.word	0x000112c5
   11330:	000112c5 	.word	0x000112c5
   11334:	0001135f 	.word	0x0001135f
		switch (z_in_optname) {
   11338:	3901      	subs	r1, #1
   1133a:	2905      	cmp	r1, #5
   1133c:	d8c2      	bhi.n	112c4 <z_to_nrf_optname+0xc>
   1133e:	e8df f001 	tbb	[pc, r1]
   11342:	1503      	.short	0x1503
   11344:	210c1917 	.word	0x210c1917
			*nrf_out_optname = NRF_SO_SEC_TAG_LIST;
   11348:	2302      	movs	r3, #2
			*nrf_out_optname = NRF_SO_DFU_OFFSET;
   1134a:	6013      	str	r3, [r2, #0]
   1134c:	e00a      	b.n	11364 <z_to_nrf_optname+0xac>
		switch (z_in_optname) {
   1134e:	2914      	cmp	r1, #20
   11350:	d005      	beq.n	1135e <z_to_nrf_optname+0xa6>
   11352:	2919      	cmp	r1, #25
   11354:	d005      	beq.n	11362 <z_to_nrf_optname+0xaa>
   11356:	2904      	cmp	r1, #4
   11358:	d1b4      	bne.n	112c4 <z_to_nrf_optname+0xc>
			*nrf_out_optname = NRF_SO_SEC_PEER_VERIFY;
   1135a:	2304      	movs	r3, #4
   1135c:	e7f5      	b.n	1134a <z_to_nrf_optname+0x92>
			*nrf_out_optname = NRF_SO_RCVTIMEO;
   1135e:	2314      	movs	r3, #20
   11360:	e7f3      	b.n	1134a <z_to_nrf_optname+0x92>
			*nrf_out_optname = NRF_SO_BINDTODEVICE;
   11362:	6011      	str	r1, [r2, #0]
	int retval = 0;
   11364:	2000      	movs	r0, #0
			break;
   11366:	4770      	bx	lr
			*nrf_out_optname = NRF_SO_DFU_TIMEO;
   11368:	2303      	movs	r3, #3
   1136a:	e7ee      	b.n	1134a <z_to_nrf_optname+0x92>
			*nrf_out_optname = NRF_SO_DFU_REVERT;
   1136c:	2305      	movs	r3, #5
   1136e:	e7ec      	b.n	1134a <z_to_nrf_optname+0x92>
			*nrf_out_optname = NRF_SO_DFU_BACKUP_DELETE;
   11370:	2306      	movs	r3, #6
   11372:	e7ea      	b.n	1134a <z_to_nrf_optname+0x92>
			*nrf_out_optname = NRF_SO_DFU_OFFSET;
   11374:	2307      	movs	r3, #7
   11376:	e7e8      	b.n	1134a <z_to_nrf_optname+0x92>
		switch (z_in_optname) {
   11378:	2902      	cmp	r1, #2
   1137a:	d0e5      	beq.n	11348 <z_to_nrf_optname+0x90>
   1137c:	2903      	cmp	r1, #3
   1137e:	d0f3      	beq.n	11368 <z_to_nrf_optname+0xb0>
   11380:	2901      	cmp	r1, #1
   11382:	d19f      	bne.n	112c4 <z_to_nrf_optname+0xc>
			*nrf_out_optname = NRF_SO_SEC_ROLE;
   11384:	2301      	movs	r3, #1
   11386:	e7e0      	b.n	1134a <z_to_nrf_optname+0x92>

00011388 <nrf91_socket_iface_init>:

static void nrf91_socket_iface_init(struct net_if *iface)
{
	nrf91_socket_iface_data.iface = iface;

	iface->if_dev->offloaded = true;
   11388:	2201      	movs	r2, #1
	nrf91_socket_iface_data.iface = iface;
   1138a:	4b03      	ldr	r3, [pc, #12]	; (11398 <nrf91_socket_iface_init+0x10>)
   1138c:	6018      	str	r0, [r3, #0]
	iface->if_dev->offloaded = true;
   1138e:	6803      	ldr	r3, [r0, #0]

	socket_offload_register(&nrf91_socket_offload_ops);
   11390:	4802      	ldr	r0, [pc, #8]	; (1139c <nrf91_socket_iface_init+0x14>)
	iface->if_dev->offloaded = true;
   11392:	769a      	strb	r2, [r3, #26]
	socket_offload_register(&nrf91_socket_offload_ops);
   11394:	f7fd b9ce 	b.w	e734 <socket_offload_register>
   11398:	20020168 	.word	0x20020168
   1139c:	00022c0c 	.word	0x00022c0c

000113a0 <close>:
{
   113a0:	b570      	push	{r4, r5, r6, lr}
	__ASSERT_NO_MSG(socket_ops);
   113a2:	4c10      	ldr	r4, [pc, #64]	; (113e4 <close+0x44>)
{
   113a4:	4605      	mov	r5, r0
	__ASSERT_NO_MSG(socket_ops);
   113a6:	6823      	ldr	r3, [r4, #0]
   113a8:	b94b      	cbnz	r3, 113be <close+0x1e>
   113aa:	490f      	ldr	r1, [pc, #60]	; (113e8 <close+0x48>)
   113ac:	480f      	ldr	r0, [pc, #60]	; (113ec <close+0x4c>)
   113ae:	2321      	movs	r3, #33	; 0x21
   113b0:	4a0f      	ldr	r2, [pc, #60]	; (113f0 <close+0x50>)
   113b2:	f00e fd12 	bl	1fdda <printk>
   113b6:	2121      	movs	r1, #33	; 0x21
   113b8:	480d      	ldr	r0, [pc, #52]	; (113f0 <close+0x50>)
   113ba:	f00e fd54 	bl	1fe66 <assert_post_action>
	__ASSERT_NO_MSG(socket_ops->close);
   113be:	6823      	ldr	r3, [r4, #0]
   113c0:	685b      	ldr	r3, [r3, #4]
   113c2:	b94b      	cbnz	r3, 113d8 <close+0x38>
   113c4:	490b      	ldr	r1, [pc, #44]	; (113f4 <close+0x54>)
   113c6:	4809      	ldr	r0, [pc, #36]	; (113ec <close+0x4c>)
   113c8:	2322      	movs	r3, #34	; 0x22
   113ca:	4a09      	ldr	r2, [pc, #36]	; (113f0 <close+0x50>)
   113cc:	f00e fd05 	bl	1fdda <printk>
   113d0:	2122      	movs	r1, #34	; 0x22
   113d2:	4807      	ldr	r0, [pc, #28]	; (113f0 <close+0x50>)
   113d4:	f00e fd47 	bl	1fe66 <assert_post_action>
	return socket_ops->close(sock);
   113d8:	6823      	ldr	r3, [r4, #0]
   113da:	4628      	mov	r0, r5
}
   113dc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return socket_ops->close(sock);
   113e0:	685b      	ldr	r3, [r3, #4]
   113e2:	4718      	bx	r3
   113e4:	200200a4 	.word	0x200200a4
   113e8:	00023446 	.word	0x00023446
   113ec:	00023451 	.word	0x00023451
   113f0:	00023416 	.word	0x00023416
   113f4:	00024260 	.word	0x00024260

000113f8 <callback_worker>:

	return new_len;
}

static void callback_worker(struct k_work *item)
{
   113f8:	b507      	push	{r0, r1, r2, lr}
	struct callback_work_item *data =
   113fa:	9001      	str	r0, [sp, #4]
		CONTAINER_OF(item, struct callback_work_item, work);

	if (data != NULL) {
   113fc:	b118      	cbz	r0, 11406 <callback_worker+0xe>
		data->callback(data->data);
   113fe:	f8d0 3a98 	ldr.w	r3, [r0, #2712]	; 0xa98
   11402:	300c      	adds	r0, #12
   11404:	4798      	blx	r3
	}

	k_mem_slab_free(&rsp_work_items, (void **)&data);
   11406:	a901      	add	r1, sp, #4
   11408:	4802      	ldr	r0, [pc, #8]	; (11414 <callback_worker+0x1c>)
   1140a:	f009 ff63 	bl	1b2d4 <k_mem_slab_free>
}
   1140e:	b003      	add	sp, #12
   11410:	f85d fb04 	ldr.w	pc, [sp], #4
   11414:	20026364 	.word	0x20026364

00011418 <open_socket>:
{
   11418:	b510      	push	{r4, lr}
	__ASSERT_NO_MSG(socket_ops);
   1141a:	4c16      	ldr	r4, [pc, #88]	; (11474 <open_socket+0x5c>)
   1141c:	6823      	ldr	r3, [r4, #0]
   1141e:	b94b      	cbnz	r3, 11434 <open_socket+0x1c>
   11420:	4915      	ldr	r1, [pc, #84]	; (11478 <open_socket+0x60>)
   11422:	4816      	ldr	r0, [pc, #88]	; (1147c <open_socket+0x64>)
   11424:	2319      	movs	r3, #25
   11426:	4a16      	ldr	r2, [pc, #88]	; (11480 <open_socket+0x68>)
   11428:	f00e fcd7 	bl	1fdda <printk>
   1142c:	2119      	movs	r1, #25
   1142e:	4814      	ldr	r0, [pc, #80]	; (11480 <open_socket+0x68>)
   11430:	f00e fd19 	bl	1fe66 <assert_post_action>
	__ASSERT_NO_MSG(socket_ops->socket);
   11434:	6823      	ldr	r3, [r4, #0]
   11436:	681b      	ldr	r3, [r3, #0]
   11438:	b94b      	cbnz	r3, 1144e <open_socket+0x36>
   1143a:	4912      	ldr	r1, [pc, #72]	; (11484 <open_socket+0x6c>)
   1143c:	480f      	ldr	r0, [pc, #60]	; (1147c <open_socket+0x64>)
   1143e:	231a      	movs	r3, #26
   11440:	4a0f      	ldr	r2, [pc, #60]	; (11480 <open_socket+0x68>)
   11442:	f00e fcca 	bl	1fdda <printk>
   11446:	211a      	movs	r1, #26
   11448:	480d      	ldr	r0, [pc, #52]	; (11480 <open_socket+0x68>)
   1144a:	f00e fd0c 	bl	1fe66 <assert_post_action>
	return socket_ops->socket(family, type, proto);
   1144e:	6823      	ldr	r3, [r4, #0]
   11450:	f240 2201 	movw	r2, #513	; 0x201
   11454:	681b      	ldr	r3, [r3, #0]
   11456:	2102      	movs	r1, #2
   11458:	2066      	movs	r0, #102	; 0x66
   1145a:	4798      	blx	r3
	common_socket_fd = socket(AF_LTE, SOCK_DGRAM, NPROTO_AT);
   1145c:	4b0a      	ldr	r3, [pc, #40]	; (11488 <open_socket+0x70>)
   1145e:	6018      	str	r0, [r3, #0]
	if (common_socket_fd == -1) {
   11460:	3001      	adds	r0, #1
   11462:	d104      	bne.n	1146e <open_socket+0x56>
		return -errno;
   11464:	f00e fddb 	bl	2001e <__errno>
   11468:	6800      	ldr	r0, [r0, #0]
   1146a:	4240      	negs	r0, r0
}
   1146c:	bd10      	pop	{r4, pc}
	return 0;
   1146e:	2000      	movs	r0, #0
   11470:	e7fc      	b.n	1146c <open_socket+0x54>
   11472:	bf00      	nop
   11474:	200200a4 	.word	0x200200a4
   11478:	00023446 	.word	0x00023446
   1147c:	00023451 	.word	0x00023451
   11480:	00023416 	.word	0x00023416
   11484:	00024272 	.word	0x00024272
   11488:	2002016c 	.word	0x2002016c

0001148c <at_write>:
		}
	}
}

static inline int at_write(const char *const cmd, enum at_cmd_state *state)
{
   1148c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   11490:	4680      	mov	r8, r0
   11492:	460d      	mov	r5, r1
	int bytes_sent;
	int bytes_to_send = strlen(cmd);
   11494:	f7fb fcf0 	bl	ce78 <strlen>
	__ASSERT_NO_MSG(socket_ops);
   11498:	4c30      	ldr	r4, [pc, #192]	; (1155c <at_write+0xd0>)
	struct return_state_object ret;

	LOG_DBG("Sending command %s", log_strdup(cmd));

	bytes_sent = send(common_socket_fd, cmd, bytes_to_send, 0);
   1149a:	4b31      	ldr	r3, [pc, #196]	; (11560 <at_write+0xd4>)
	int bytes_to_send = strlen(cmd);
   1149c:	4606      	mov	r6, r0
	bytes_sent = send(common_socket_fd, cmd, bytes_to_send, 0);
   1149e:	681f      	ldr	r7, [r3, #0]
   114a0:	6823      	ldr	r3, [r4, #0]
   114a2:	b94b      	cbnz	r3, 114b8 <at_write+0x2c>
   114a4:	492f      	ldr	r1, [pc, #188]	; (11564 <at_write+0xd8>)
   114a6:	4830      	ldr	r0, [pc, #192]	; (11568 <at_write+0xdc>)
   114a8:	237e      	movs	r3, #126	; 0x7e
   114aa:	4a30      	ldr	r2, [pc, #192]	; (1156c <at_write+0xe0>)
   114ac:	f00e fc95 	bl	1fdda <printk>
   114b0:	217e      	movs	r1, #126	; 0x7e
   114b2:	482e      	ldr	r0, [pc, #184]	; (1156c <at_write+0xe0>)
   114b4:	f00e fcd7 	bl	1fe66 <assert_post_action>
	__ASSERT_NO_MSG(socket_ops->send);
   114b8:	6823      	ldr	r3, [r4, #0]
   114ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   114bc:	b94b      	cbnz	r3, 114d2 <at_write+0x46>
   114be:	492c      	ldr	r1, [pc, #176]	; (11570 <at_write+0xe4>)
   114c0:	4829      	ldr	r0, [pc, #164]	; (11568 <at_write+0xdc>)
   114c2:	237f      	movs	r3, #127	; 0x7f
   114c4:	4a29      	ldr	r2, [pc, #164]	; (1156c <at_write+0xe0>)
   114c6:	f00e fc88 	bl	1fdda <printk>
   114ca:	217f      	movs	r1, #127	; 0x7f
   114cc:	4827      	ldr	r0, [pc, #156]	; (1156c <at_write+0xe0>)
   114ce:	f00e fcca 	bl	1fe66 <assert_post_action>
	return socket_ops->send(sock, buf, len, flags);
   114d2:	6823      	ldr	r3, [r4, #0]
   114d4:	4632      	mov	r2, r6
   114d6:	6adc      	ldr	r4, [r3, #44]	; 0x2c
   114d8:	4641      	mov	r1, r8
   114da:	2300      	movs	r3, #0
   114dc:	4638      	mov	r0, r7
   114de:	47a0      	blx	r4

	if (bytes_sent == -1) {
   114e0:	1c43      	adds	r3, r0, #1
   114e2:	4604      	mov	r4, r0
   114e4:	d121      	bne.n	1152a <at_write+0x9e>
		LOG_ERR("Failed to send AT command (err:%d)", errno);
   114e6:	2301      	movs	r3, #1
   114e8:	f04f 0400 	mov.w	r4, #0
   114ec:	4a21      	ldr	r2, [pc, #132]	; (11574 <at_write+0xe8>)
   114ee:	f363 0407 	bfi	r4, r3, #0, #8
   114f2:	4b21      	ldr	r3, [pc, #132]	; (11578 <at_write+0xec>)
   114f4:	1a9b      	subs	r3, r3, r2
   114f6:	08db      	lsrs	r3, r3, #3
   114f8:	f363 148f 	bfi	r4, r3, #6, #10
   114fc:	f00e fd8f 	bl	2001e <__errno>
   11500:	491e      	ldr	r1, [pc, #120]	; (1157c <at_write+0xf0>)
   11502:	6802      	ldr	r2, [r0, #0]
   11504:	4620      	mov	r0, r4
   11506:	f00e fcbf 	bl	1fe88 <log_string_sync>
		ret.code  = -errno;
   1150a:	f00e fd88 	bl	2001e <__errno>
   1150e:	6803      	ldr	r3, [r0, #0]
   11510:	425b      	negs	r3, r3
   11512:	9300      	str	r3, [sp, #0]
		ret.state = AT_CMD_ERROR;
   11514:	2301      	movs	r3, #1
   11516:	f88d 3004 	strb.w	r3, [sp, #4]
				"same as expected (%d)",
				bytes_sent, bytes_to_send);
		}
	}

	if (state) {
   1151a:	b115      	cbz	r5, 11522 <at_write+0x96>
		*state = ret.state;
   1151c:	f89d 3004 	ldrb.w	r3, [sp, #4]
   11520:	702b      	strb	r3, [r5, #0]
	}

	return ret.code;
}
   11522:	9800      	ldr	r0, [sp, #0]
   11524:	b002      	add	sp, #8
   11526:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (z_syscall_trap()) {
		return (int) arch_syscall_invoke3(*(uintptr_t *)&msgq, *(uintptr_t *)&data, *(uintptr_t *)&timeout, K_SYSCALL_K_MSGQ_GET);
	}
#endif
	compiler_barrier();
	return z_impl_k_msgq_get(msgq, data, timeout);
   1152a:	f04f 32ff 	mov.w	r2, #4294967295
   1152e:	4669      	mov	r1, sp
   11530:	4813      	ldr	r0, [pc, #76]	; (11580 <at_write+0xf4>)
   11532:	f00a f8e1 	bl	1b6f8 <z_impl_k_msgq_get>
		if (bytes_sent != bytes_to_send) {
   11536:	42a6      	cmp	r6, r4
   11538:	d0ef      	beq.n	1151a <at_write+0x8e>
			LOG_ERR("Bytes sent (%d) was not the "
   1153a:	2301      	movs	r3, #1
   1153c:	f04f 0000 	mov.w	r0, #0
   11540:	4a0c      	ldr	r2, [pc, #48]	; (11574 <at_write+0xe8>)
   11542:	f363 0007 	bfi	r0, r3, #0, #8
   11546:	4b0c      	ldr	r3, [pc, #48]	; (11578 <at_write+0xec>)
   11548:	490e      	ldr	r1, [pc, #56]	; (11584 <at_write+0xf8>)
   1154a:	1a9b      	subs	r3, r3, r2
   1154c:	08db      	lsrs	r3, r3, #3
   1154e:	f363 108f 	bfi	r0, r3, #6, #10
   11552:	4622      	mov	r2, r4
   11554:	4633      	mov	r3, r6
   11556:	f00e fc97 	bl	1fe88 <log_string_sync>
   1155a:	e7de      	b.n	1151a <at_write+0x8e>
   1155c:	200200a4 	.word	0x200200a4
   11560:	2002016c 	.word	0x2002016c
   11564:	00023446 	.word	0x00023446
   11568:	00023451 	.word	0x00023451
   1156c:	00023416 	.word	0x00023416
   11570:	000242aa 	.word	0x000242aa
   11574:	00022924 	.word	0x00022924
   11578:	00022924 	.word	0x00022924
   1157c:	00024699 	.word	0x00024699
   11580:	2002640c 	.word	0x2002640c
   11584:	000246bc 	.word	0x000246bc

00011588 <socket_thread_fn>:
{
   11588:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
					LOG_ERR("Response buffer not large "
   1158c:	4b9e      	ldr	r3, [pc, #632]	; (11808 <socket_thread_fn+0x280>)
   1158e:	4c9f      	ldr	r4, [pc, #636]	; (1180c <socket_thread_fn+0x284>)
{
   11590:	b087      	sub	sp, #28
					LOG_ERR("Response buffer not large "
   11592:	1ae4      	subs	r4, r4, r3
   11594:	f3c4 04c9 	ubfx	r4, r4, #3, #10
		k_mem_slab_alloc(&rsp_work_items, (void **)&item, K_FOREVER);
   11598:	f04f 32ff 	mov.w	r2, #4294967295
   1159c:	a903      	add	r1, sp, #12
   1159e:	489c      	ldr	r0, [pc, #624]	; (11810 <socket_thread_fn+0x288>)
   115a0:	f009 fe34 	bl	1b20c <k_mem_slab_alloc>
		ret.code  = 0;
   115a4:	2300      	movs	r3, #0
		item->callback = NULL;
   115a6:	9d03      	ldr	r5, [sp, #12]
		ret.code  = 0;
   115a8:	9304      	str	r3, [sp, #16]
		item->callback = NULL;
   115aa:	f8c5 3a98 	str.w	r3, [r5, #2712]	; 0xa98
		ret.state = AT_CMD_OK;
   115ae:	f88d 3014 	strb.w	r3, [sp, #20]
	__ASSERT_NO_MSG(socket_ops);
   115b2:	f8df a2b4 	ldr.w	sl, [pc, #692]	; 11868 <socket_thread_fn+0x2e0>
		bytes_read = recv(common_socket_fd, item->data,
   115b6:	4b97      	ldr	r3, [pc, #604]	; (11814 <socket_thread_fn+0x28c>)
   115b8:	350c      	adds	r5, #12
   115ba:	f8d3 b000 	ldr.w	fp, [r3]
   115be:	f8da 3000 	ldr.w	r3, [sl]
   115c2:	b94b      	cbnz	r3, 115d8 <socket_thread_fn+0x50>
   115c4:	4994      	ldr	r1, [pc, #592]	; (11818 <socket_thread_fn+0x290>)
   115c6:	4895      	ldr	r0, [pc, #596]	; (1181c <socket_thread_fn+0x294>)
   115c8:	2369      	movs	r3, #105	; 0x69
   115ca:	4a95      	ldr	r2, [pc, #596]	; (11820 <socket_thread_fn+0x298>)
   115cc:	f00e fc05 	bl	1fdda <printk>
   115d0:	2169      	movs	r1, #105	; 0x69
   115d2:	4893      	ldr	r0, [pc, #588]	; (11820 <socket_thread_fn+0x298>)
   115d4:	f00e fc47 	bl	1fe66 <assert_post_action>
	__ASSERT_NO_MSG(socket_ops->recv);
   115d8:	f8da 3000 	ldr.w	r3, [sl]
   115dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   115de:	b94b      	cbnz	r3, 115f4 <socket_thread_fn+0x6c>
   115e0:	4990      	ldr	r1, [pc, #576]	; (11824 <socket_thread_fn+0x29c>)
   115e2:	488e      	ldr	r0, [pc, #568]	; (1181c <socket_thread_fn+0x294>)
   115e4:	236a      	movs	r3, #106	; 0x6a
   115e6:	4a8e      	ldr	r2, [pc, #568]	; (11820 <socket_thread_fn+0x298>)
   115e8:	f00e fbf7 	bl	1fdda <printk>
   115ec:	216a      	movs	r1, #106	; 0x6a
   115ee:	488c      	ldr	r0, [pc, #560]	; (11820 <socket_thread_fn+0x298>)
   115f0:	f00e fc39 	bl	1fe66 <assert_post_action>
	return socket_ops->recv(sock, buf, max_len, flags);
   115f4:	f8da 3000 	ldr.w	r3, [sl]
   115f8:	f640 228c 	movw	r2, #2700	; 0xa8c
   115fc:	f8d3 a024 	ldr.w	sl, [r3, #36]	; 0x24
   11600:	4629      	mov	r1, r5
   11602:	2300      	movs	r3, #0
   11604:	4658      	mov	r0, fp
   11606:	47d0      	blx	sl
		if (bytes_read < 0) {
   11608:	1e02      	subs	r2, r0, #0
   1160a:	da58      	bge.n	116be <socket_thread_fn+0x136>
			LOG_ERR("AT socket recv failed with err %d",
   1160c:	f026 033f 	bic.w	r3, r6, #63	; 0x3f
   11610:	f043 0301 	orr.w	r3, r3, #1
   11614:	f363 0607 	bfi	r6, r3, #0, #8
   11618:	f364 168f 	bfi	r6, r4, #6, #10
   1161c:	4630      	mov	r0, r6
   1161e:	4982      	ldr	r1, [pc, #520]	; (11828 <socket_thread_fn+0x2a0>)
   11620:	f00e fc32 	bl	1fe88 <log_string_sync>
			if ((close(common_socket_fd) == 0) &&
   11624:	4b7b      	ldr	r3, [pc, #492]	; (11814 <socket_thread_fn+0x28c>)
   11626:	6818      	ldr	r0, [r3, #0]
   11628:	f7ff feba 	bl	113a0 <close>
   1162c:	2800      	cmp	r0, #0
   1162e:	d131      	bne.n	11694 <socket_thread_fn+0x10c>
			    (open_socket() == 0)) {
   11630:	f7ff fef2 	bl	11418 <open_socket>
			if ((close(common_socket_fd) == 0) &&
   11634:	bb70      	cbnz	r0, 11694 <socket_thread_fn+0x10c>
				LOG_INF("AT socket recovered");
   11636:	f027 033f 	bic.w	r3, r7, #63	; 0x3f
   1163a:	f043 0303 	orr.w	r3, r3, #3
   1163e:	f363 0707 	bfi	r7, r3, #0, #8
   11642:	f364 178f 	bfi	r7, r4, #6, #10
   11646:	4979      	ldr	r1, [pc, #484]	; (1182c <socket_thread_fn+0x2a4>)
   11648:	4638      	mov	r0, r7
   1164a:	f00e fc1d 	bl	1fe88 <log_string_sync>
				ret.state = AT_CMD_ERROR;
   1164e:	2301      	movs	r3, #1
   11650:	f88d 3014 	strb.w	r3, [sp, #20]
				ret.code  = -errno;
   11654:	f00e fce3 	bl	2001e <__errno>
   11658:	6803      	ldr	r3, [r0, #0]
   1165a:	425b      	negs	r3, r3
			ret.code  = -ENOBUFS;
   1165c:	9304      	str	r3, [sp, #16]
		if (item->callback == NULL) {
   1165e:	9903      	ldr	r1, [sp, #12]
   11660:	f8d1 3a98 	ldr.w	r3, [r1, #2712]	; 0xa98
   11664:	2b00      	cmp	r3, #0
   11666:	f040 80a5 	bne.w	117b4 <socket_thread_fn+0x22c>
			k_mem_slab_free(&rsp_work_items, (void **)&item);
   1166a:	a903      	add	r1, sp, #12
   1166c:	4868      	ldr	r0, [pc, #416]	; (11810 <socket_thread_fn+0x288>)
   1166e:	f009 fe31 	bl	1b2d4 <k_mem_slab_free>
	return z_impl_k_sem_count_get(sem);
   11672:	4b6f      	ldr	r3, [pc, #444]	; (11830 <socket_thread_fn+0x2a8>)
		if ((k_sem_count_get(&cmd_pending) == 0) &&
   11674:	689b      	ldr	r3, [r3, #8]
   11676:	2b00      	cmp	r3, #0
   11678:	d18e      	bne.n	11598 <socket_thread_fn+0x10>
   1167a:	f89d 2014 	ldrb.w	r2, [sp, #20]
   1167e:	2a04      	cmp	r2, #4
   11680:	d08a      	beq.n	11598 <socket_thread_fn+0x10>
			current_cmd_handler = NULL;
   11682:	4a6c      	ldr	r2, [pc, #432]	; (11834 <socket_thread_fn+0x2ac>)
   11684:	6013      	str	r3, [r2, #0]
	return z_impl_k_msgq_put(msgq, data, timeout);
   11686:	f04f 32ff 	mov.w	r2, #4294967295
   1168a:	a904      	add	r1, sp, #16
   1168c:	486a      	ldr	r0, [pc, #424]	; (11838 <socket_thread_fn+0x2b0>)
   1168e:	f009 ff93 	bl	1b5b8 <z_impl_k_msgq_put>
   11692:	e781      	b.n	11598 <socket_thread_fn+0x10>
			LOG_ERR("Unrecoverable reception error (err: %d), "
   11694:	2301      	movs	r3, #1
   11696:	f04f 0500 	mov.w	r5, #0
   1169a:	f363 0507 	bfi	r5, r3, #0, #8
   1169e:	f00e fcbe 	bl	2001e <__errno>
   116a2:	f364 158f 	bfi	r5, r4, #6, #10
   116a6:	6802      	ldr	r2, [r0, #0]
   116a8:	4964      	ldr	r1, [pc, #400]	; (1183c <socket_thread_fn+0x2b4>)
   116aa:	4628      	mov	r0, r5
   116ac:	f00e fbec 	bl	1fe88 <log_string_sync>
			close(common_socket_fd);
   116b0:	4b58      	ldr	r3, [pc, #352]	; (11814 <socket_thread_fn+0x28c>)
   116b2:	6818      	ldr	r0, [r3, #0]
   116b4:	f7ff fe74 	bl	113a0 <close>
}
   116b8:	b007      	add	sp, #28
   116ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		} else if (bytes_read == sizeof(item->data) ||
   116be:	f640 238c 	movw	r3, #2700	; 0xa8c
   116c2:	429a      	cmp	r2, r3
   116c4:	d004      	beq.n	116d0 <socket_thread_fn+0x148>
			   item->data[bytes_read - 1] != '\0') {
   116c6:	f8dd a00c 	ldr.w	sl, [sp, #12]
   116ca:	4452      	add	r2, sl
		} else if (bytes_read == sizeof(item->data) ||
   116cc:	7ad3      	ldrb	r3, [r2, #11]
   116ce:	b173      	cbz	r3, 116ee <socket_thread_fn+0x166>
			LOG_ERR("AT message to large for reception buffer or "
   116d0:	f028 033f 	bic.w	r3, r8, #63	; 0x3f
   116d4:	f043 0301 	orr.w	r3, r3, #1
   116d8:	f363 0807 	bfi	r8, r3, #0, #8
   116dc:	f364 188f 	bfi	r8, r4, #6, #10
   116e0:	4957      	ldr	r1, [pc, #348]	; (11840 <socket_thread_fn+0x2b8>)
   116e2:	4640      	mov	r0, r8
   116e4:	f00e fbd0 	bl	1fe88 <log_string_sync>
			ret.code  = -ENOBUFS;
   116e8:	f06f 0368 	mvn.w	r3, #104	; 0x68
   116ec:	e7b6      	b.n	1165c <socket_thread_fn+0xd4>
	ret->state = AT_CMD_NOTIFICATION;
   116ee:	2204      	movs	r2, #4
		payload_len = get_return_code(item->data, &ret);
   116f0:	f10a 050c 	add.w	r5, sl, #12
		tmpstr = strstr(buf, AT_CMD_OK_STR);
   116f4:	4953      	ldr	r1, [pc, #332]	; (11844 <socket_thread_fn+0x2bc>)
   116f6:	4628      	mov	r0, r5
   116f8:	9301      	str	r3, [sp, #4]
	ret->state = AT_CMD_NOTIFICATION;
   116fa:	f88d 2014 	strb.w	r2, [sp, #20]
		tmpstr = strstr(buf, AT_CMD_OK_STR);
   116fe:	f010 fa9b 	bl	21c38 <strstr>
		if (tmpstr) {
   11702:	4683      	mov	fp, r0
   11704:	b120      	cbz	r0, 11710 <socket_thread_fn+0x188>
			ret->state = AT_CMD_OK;
   11706:	9b01      	ldr	r3, [sp, #4]
   11708:	f88d 3014 	strb.w	r3, [sp, #20]
			ret->code  = -ENOEXEC;
   1170c:	9304      	str	r3, [sp, #16]
			break;
   1170e:	e00d      	b.n	1172c <socket_thread_fn+0x1a4>
		tmpstr = strstr(buf, AT_CMD_CMS_STR);
   11710:	494d      	ldr	r1, [pc, #308]	; (11848 <socket_thread_fn+0x2c0>)
   11712:	4628      	mov	r0, r5
   11714:	f010 fa90 	bl	21c38 <strstr>
		if (tmpstr) {
   11718:	4683      	mov	fp, r0
   1171a:	b330      	cbz	r0, 1176a <socket_thread_fn+0x1e2>
			ret->state = AT_CMD_ERROR_CMS;
   1171c:	2302      	movs	r3, #2
			ret->code = atoi(&buf[ARRAY_SIZE(AT_CMD_CMS_STR) - 1]);
   1171e:	f10a 0017 	add.w	r0, sl, #23
			ret->state = AT_CMD_ERROR_CME;
   11722:	f88d 3014 	strb.w	r3, [sp, #20]
			ret->code = atoi(&buf[ARRAY_SIZE(AT_CMD_CMS_STR) - 1]);
   11726:	f010 f8e8 	bl	218fa <atoi>
   1172a:	9004      	str	r0, [sp, #16]
		buf[new_len++] = '\0';
   1172c:	2300      	movs	r3, #0
		new_len = tmpstr - buf;
   1172e:	ebab 0205 	sub.w	r2, fp, r5
		buf[new_len++] = '\0';
   11732:	3201      	adds	r2, #1
   11734:	f88b 3000 	strb.w	r3, [fp]
		if (ret.state != AT_CMD_NOTIFICATION) {
   11738:	f89d 3014 	ldrb.w	r3, [sp, #20]
   1173c:	2b04      	cmp	r3, #4
   1173e:	d04f      	beq.n	117e0 <socket_thread_fn+0x258>
			if ((response_buf_len > 0) &&
   11740:	f8df a128 	ldr.w	sl, [pc, #296]	; 1186c <socket_thread_fn+0x2e4>
   11744:	f8da 3000 	ldr.w	r3, [sl]
   11748:	2b00      	cmp	r3, #0
   1174a:	d052      	beq.n	117f2 <socket_thread_fn+0x26a>
			    (response_buf != NULL)) {
   1174c:	4d3f      	ldr	r5, [pc, #252]	; (1184c <socket_thread_fn+0x2c4>)
   1174e:	6828      	ldr	r0, [r5, #0]
			if ((response_buf_len > 0) &&
   11750:	2800      	cmp	r0, #0
   11752:	d04e      	beq.n	117f2 <socket_thread_fn+0x26a>
				if (response_buf_len > payload_len) {
   11754:	4293      	cmp	r3, r2
   11756:	d91d      	bls.n	11794 <socket_thread_fn+0x20c>
   11758:	9903      	ldr	r1, [sp, #12]
   1175a:	310c      	adds	r1, #12
   1175c:	f010 f8ed 	bl	2193a <memcpy>
				response_buf_len = 0;
   11760:	2300      	movs	r3, #0
   11762:	f8ca 3000 	str.w	r3, [sl]
				response_buf     = NULL;
   11766:	602b      	str	r3, [r5, #0]
				goto next;
   11768:	e779      	b.n	1165e <socket_thread_fn+0xd6>
		tmpstr = strstr(buf, AT_CMD_CME_STR);
   1176a:	4939      	ldr	r1, [pc, #228]	; (11850 <socket_thread_fn+0x2c8>)
   1176c:	4628      	mov	r0, r5
   1176e:	f010 fa63 	bl	21c38 <strstr>
		if (tmpstr) {
   11772:	4683      	mov	fp, r0
   11774:	b108      	cbz	r0, 1177a <socket_thread_fn+0x1f2>
			ret->state = AT_CMD_ERROR_CME;
   11776:	2303      	movs	r3, #3
   11778:	e7d1      	b.n	1171e <socket_thread_fn+0x196>
		tmpstr = strstr(buf, AT_CMD_ERROR_STR);
   1177a:	4936      	ldr	r1, [pc, #216]	; (11854 <socket_thread_fn+0x2cc>)
   1177c:	4628      	mov	r0, r5
   1177e:	f010 fa5b 	bl	21c38 <strstr>
		if (tmpstr) {
   11782:	4683      	mov	fp, r0
   11784:	2800      	cmp	r0, #0
   11786:	d039      	beq.n	117fc <socket_thread_fn+0x274>
			ret->state = AT_CMD_ERROR;
   11788:	2301      	movs	r3, #1
   1178a:	f88d 3014 	strb.w	r3, [sp, #20]
			ret->code  = -ENOEXEC;
   1178e:	f06f 0307 	mvn.w	r3, #7
   11792:	e7bb      	b.n	1170c <socket_thread_fn+0x184>
					LOG_ERR("Response buffer not large "
   11794:	f029 033f 	bic.w	r3, r9, #63	; 0x3f
   11798:	f043 0301 	orr.w	r3, r3, #1
   1179c:	f363 0907 	bfi	r9, r3, #0, #8
   117a0:	f364 198f 	bfi	r9, r4, #6, #10
   117a4:	492c      	ldr	r1, [pc, #176]	; (11858 <socket_thread_fn+0x2d0>)
   117a6:	4648      	mov	r0, r9
   117a8:	f00e fb6e 	bl	1fe88 <log_string_sync>
					ret.code  = -EMSGSIZE;
   117ac:	f06f 0379 	mvn.w	r3, #121	; 0x79
   117b0:	9304      	str	r3, [sp, #16]
   117b2:	e7d5      	b.n	11760 <socket_thread_fn+0x1d8>
 * @return N/A
 * @req K-WORK-001
 */
static inline void k_work_init(struct k_work *work, k_work_handler_t handler)
{
	*work = (struct k_work)Z_WORK_INITIALIZER(handler);
   117b4:	4b29      	ldr	r3, [pc, #164]	; (1185c <socket_thread_fn+0x2d4>)
   117b6:	2200      	movs	r2, #0
   117b8:	604b      	str	r3, [r1, #4]
   117ba:	460b      	mov	r3, r1
   117bc:	600a      	str	r2, [r1, #0]
   117be:	f843 2f08 	str.w	r2, [r3, #8]!
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   117c2:	e8d3 2fef 	ldaex	r2, [r3]
   117c6:	f042 0001 	orr.w	r0, r2, #1
   117ca:	e8c3 0fe5 	stlex	r5, r0, [r3]
   117ce:	2d00      	cmp	r5, #0
   117d0:	d1f7      	bne.n	117c2 <socket_thread_fn+0x23a>
 * @req K-WORK-001
 */
static inline void k_work_submit_to_queue(struct k_work_q *work_q,
					  struct k_work *work)
{
	if (!atomic_test_and_set_bit(work->flags, K_WORK_STATE_PENDING)) {
   117d2:	07d3      	lsls	r3, r2, #31
   117d4:	f53f af4d 	bmi.w	11672 <socket_thread_fn+0xea>
		k_queue_append(&work_q->queue, work);
   117d8:	4821      	ldr	r0, [pc, #132]	; (11860 <socket_thread_fn+0x2d8>)
   117da:	f00f ffb1 	bl	21740 <k_queue_append>
   117de:	e748      	b.n	11672 <socket_thread_fn+0xea>
		if (payload_len == 0) {
   117e0:	2a00      	cmp	r2, #0
   117e2:	f43f af3c 	beq.w	1165e <socket_thread_fn+0xd6>
			item->callback = notification_handler;
   117e6:	4b1f      	ldr	r3, [pc, #124]	; (11864 <socket_thread_fn+0x2dc>)
			item->callback = current_cmd_handler;
   117e8:	681a      	ldr	r2, [r3, #0]
   117ea:	9b03      	ldr	r3, [sp, #12]
   117ec:	f8c3 2a98 	str.w	r2, [r3, #2712]	; 0xa98
   117f0:	e735      	b.n	1165e <socket_thread_fn+0xd6>
		if (payload_len == 0) {
   117f2:	2a00      	cmp	r2, #0
   117f4:	f43f af33 	beq.w	1165e <socket_thread_fn+0xd6>
			item->callback = current_cmd_handler;
   117f8:	4b0e      	ldr	r3, [pc, #56]	; (11834 <socket_thread_fn+0x2ac>)
   117fa:	e7f5      	b.n	117e8 <socket_thread_fn+0x260>
		new_len = strlen(buf) + 1;
   117fc:	4628      	mov	r0, r5
   117fe:	f7fb fb3b 	bl	ce78 <strlen>
   11802:	1c42      	adds	r2, r0, #1
   11804:	e798      	b.n	11738 <socket_thread_fn+0x1b0>
   11806:	bf00      	nop
   11808:	00022924 	.word	0x00022924
   1180c:	00022924 	.word	0x00022924
   11810:	20026364 	.word	0x20026364
   11814:	2002016c 	.word	0x2002016c
   11818:	00023446 	.word	0x00023446
   1181c:	00023451 	.word	0x00023451
   11820:	00023416 	.word	0x00023416
   11824:	00024299 	.word	0x00024299
   11828:	000246ee 	.word	0x000246ee
   1182c:	00024710 	.word	0x00024710
   11830:	200263b4 	.word	0x200263b4
   11834:	20020170 	.word	0x20020170
   11838:	2002640c 	.word	0x2002640c
   1183c:	00024724 	.word	0x00024724
   11840:	0002475b 	.word	0x0002475b
   11844:	000247a5 	.word	0x000247a5
   11848:	000247a8 	.word	0x000247a8
   1184c:	20020178 	.word	0x20020178
   11850:	000247b4 	.word	0x000247b4
   11854:	000247c0 	.word	0x000247c0
   11858:	000247c6 	.word	0x000247c6
   1185c:	000113f9 	.word	0x000113f9
   11860:	200213e0 	.word	0x200213e0
   11864:	20020174 	.word	0x20020174
   11868:	200200a4 	.word	0x200200a4
   1186c:	2002017c 	.word	0x2002017c

00011870 <at_cmd_driver_init>:

	k_sem_give(&cmd_pending);
}

static int at_cmd_driver_init(struct device *dev)
{
   11870:	b510      	push	{r4, lr}
	static bool initialized;

	if (initialized) {
   11872:	4b16      	ldr	r3, [pc, #88]	; (118cc <at_cmd_driver_init+0x5c>)
{
   11874:	b086      	sub	sp, #24
	if (initialized) {
   11876:	781a      	ldrb	r2, [r3, #0]
   11878:	bb32      	cbnz	r2, 118c8 <at_cmd_driver_init+0x58>
		return 0;
	}

	initialized = true;
   1187a:	2201      	movs	r2, #1
   1187c:	701a      	strb	r2, [r3, #0]

	int err;

	ARG_UNUSED(dev);

	err = open_socket();
   1187e:	f7ff fdcb 	bl	11418 <open_socket>
	if (err) {
   11882:	4604      	mov	r4, r0
   11884:	b188      	cbz	r0, 118aa <at_cmd_driver_init+0x3a>
		LOG_ERR("Failed to open AT socket (err:%d)", err);
   11886:	2301      	movs	r3, #1
   11888:	f04f 0000 	mov.w	r0, #0
   1188c:	4a10      	ldr	r2, [pc, #64]	; (118d0 <at_cmd_driver_init+0x60>)
   1188e:	f363 0007 	bfi	r0, r3, #0, #8
   11892:	4b10      	ldr	r3, [pc, #64]	; (118d4 <at_cmd_driver_init+0x64>)
   11894:	4910      	ldr	r1, [pc, #64]	; (118d8 <at_cmd_driver_init+0x68>)
   11896:	1a9b      	subs	r3, r3, r2
   11898:	08db      	lsrs	r3, r3, #3
   1189a:	f363 108f 	bfi	r0, r3, #6, #10
   1189e:	4622      	mov	r2, r4
   118a0:	f00e faf2 	bl	1fe88 <log_string_sync>
			THREAD_PRIORITY, 0, K_NO_WAIT);

	LOG_DBG("Common AT socket processing thread created");

	return 0;
}
   118a4:	4620      	mov	r0, r4
   118a6:	b006      	add	sp, #24
   118a8:	bd10      	pop	{r4, pc}
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   118aa:	230a      	movs	r3, #10
   118ac:	e9cd 0004 	strd	r0, r0, [sp, #16]
   118b0:	e9cd 0302 	strd	r0, r3, [sp, #8]
   118b4:	e9cd 0000 	strd	r0, r0, [sp]
   118b8:	4b08      	ldr	r3, [pc, #32]	; (118dc <at_cmd_driver_init+0x6c>)
   118ba:	f44f 6280 	mov.w	r2, #1024	; 0x400
   118be:	4908      	ldr	r1, [pc, #32]	; (118e0 <at_cmd_driver_init+0x70>)
   118c0:	4808      	ldr	r0, [pc, #32]	; (118e4 <at_cmd_driver_init+0x74>)
   118c2:	f00b fd53 	bl	1d36c <z_impl_k_thread_create>
	return 0;
   118c6:	e7ed      	b.n	118a4 <at_cmd_driver_init+0x34>
		return 0;
   118c8:	2400      	movs	r4, #0
   118ca:	e7eb      	b.n	118a4 <at_cmd_driver_init+0x34>
   118cc:	20021683 	.word	0x20021683
   118d0:	00022924 	.word	0x00022924
   118d4:	00022924 	.word	0x00022924
   118d8:	0002464e 	.word	0x0002464e
   118dc:	00011589 	.word	0x00011589
   118e0:	200227e8 	.word	0x200227e8
   118e4:	20020180 	.word	0x20020180

000118e8 <at_cmd_write>:
{
   118e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   118ec:	4605      	mov	r5, r0
   118ee:	4688      	mov	r8, r1
   118f0:	4617      	mov	r7, r2
   118f2:	461e      	mov	r6, r3
	return z_impl_k_sem_take(sem, timeout);
   118f4:	4c0a      	ldr	r4, [pc, #40]	; (11920 <at_cmd_write+0x38>)
   118f6:	f04f 31ff 	mov.w	r1, #4294967295
   118fa:	4620      	mov	r0, r4
   118fc:	f00b fc04 	bl	1d108 <z_impl_k_sem_take>
	response_buf     = buf;
   11900:	4b08      	ldr	r3, [pc, #32]	; (11924 <at_cmd_write+0x3c>)
	int return_code = at_write(cmd, state);
   11902:	4631      	mov	r1, r6
	response_buf     = buf;
   11904:	f8c3 8000 	str.w	r8, [r3]
	response_buf_len = buf_len;
   11908:	4b07      	ldr	r3, [pc, #28]	; (11928 <at_cmd_write+0x40>)
	int return_code = at_write(cmd, state);
   1190a:	4628      	mov	r0, r5
	response_buf_len = buf_len;
   1190c:	601f      	str	r7, [r3, #0]
	int return_code = at_write(cmd, state);
   1190e:	f7ff fdbd 	bl	1148c <at_write>
   11912:	4605      	mov	r5, r0
	z_impl_k_sem_give(sem);
   11914:	4620      	mov	r0, r4
   11916:	f00b fbad 	bl	1d074 <z_impl_k_sem_give>
}
   1191a:	4628      	mov	r0, r5
   1191c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   11920:	200263b4 	.word	0x200263b4
   11924:	20020178 	.word	0x20020178
   11928:	2002017c 	.word	0x2002017c

0001192c <at_cmd_set_notification_handler>:
{
   1192c:	b538      	push	{r3, r4, r5, lr}
	if (notification_handler != NULL && handler != notification_handler) {
   1192e:	4c0f      	ldr	r4, [pc, #60]	; (1196c <at_cmd_set_notification_handler+0x40>)
{
   11930:	4605      	mov	r5, r0
	if (notification_handler != NULL && handler != notification_handler) {
   11932:	6822      	ldr	r2, [r4, #0]
   11934:	b17a      	cbz	r2, 11956 <at_cmd_set_notification_handler+0x2a>
   11936:	4282      	cmp	r2, r0
   11938:	d00d      	beq.n	11956 <at_cmd_set_notification_handler+0x2a>
		LOG_WRN("Forgetting prior notification handler %p",
   1193a:	2302      	movs	r3, #2
   1193c:	f04f 0000 	mov.w	r0, #0
   11940:	490b      	ldr	r1, [pc, #44]	; (11970 <at_cmd_set_notification_handler+0x44>)
   11942:	f363 0007 	bfi	r0, r3, #0, #8
   11946:	4b0b      	ldr	r3, [pc, #44]	; (11974 <at_cmd_set_notification_handler+0x48>)
   11948:	1a5b      	subs	r3, r3, r1
   1194a:	08db      	lsrs	r3, r3, #3
   1194c:	f363 108f 	bfi	r0, r3, #6, #10
   11950:	4909      	ldr	r1, [pc, #36]	; (11978 <at_cmd_set_notification_handler+0x4c>)
   11952:	f00e fa99 	bl	1fe88 <log_string_sync>
	return z_impl_k_sem_take(sem, timeout);
   11956:	f04f 31ff 	mov.w	r1, #4294967295
   1195a:	4808      	ldr	r0, [pc, #32]	; (1197c <at_cmd_set_notification_handler+0x50>)
   1195c:	f00b fbd4 	bl	1d108 <z_impl_k_sem_take>
	notification_handler = handler;
   11960:	6025      	str	r5, [r4, #0]
	z_impl_k_sem_give(sem);
   11962:	4806      	ldr	r0, [pc, #24]	; (1197c <at_cmd_set_notification_handler+0x50>)
}
   11964:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   11968:	f00b bb84 	b.w	1d074 <z_impl_k_sem_give>
   1196c:	20020174 	.word	0x20020174
   11970:	00022924 	.word	0x00022924
   11974:	00022924 	.word	0x00022924
   11978:	00024670 	.word	0x00024670
   1197c:	200263b4 	.word	0x200263b4

00011980 <find_node>:
static struct notif_handler *find_node(struct notif_handler **prev_out,
	void *ctx, at_notif_handler_t handler)
{
	struct notif_handler *prev = NULL, *curr, *tmp;

	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&handler_list, curr, tmp, node) {
   11980:	4b0b      	ldr	r3, [pc, #44]	; (119b0 <find_node+0x30>)
{
   11982:	b570      	push	{r4, r5, r6, lr}
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&handler_list, curr, tmp, node) {
   11984:	681b      	ldr	r3, [r3, #0]
   11986:	b153      	cbz	r3, 1199e <find_node+0x1e>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   11988:	2500      	movs	r5, #0
   1198a:	461c      	mov	r4, r3
   1198c:	681b      	ldr	r3, [r3, #0]
		if (curr->ctx == ctx && curr->handler == handler) {
   1198e:	6866      	ldr	r6, [r4, #4]
   11990:	428e      	cmp	r6, r1
   11992:	d106      	bne.n	119a2 <find_node+0x22>
   11994:	68a6      	ldr	r6, [r4, #8]
   11996:	4296      	cmp	r6, r2
   11998:	d103      	bne.n	119a2 <find_node+0x22>
			*prev_out = prev;
			return curr;
   1199a:	4623      	mov	r3, r4
			*prev_out = prev;
   1199c:	6005      	str	r5, [r0, #0]
		}
		prev = curr;
	}
	return NULL;
}
   1199e:	4618      	mov	r0, r3
   119a0:	bd70      	pop	{r4, r5, r6, pc}
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&handler_list, curr, tmp, node) {
   119a2:	2b00      	cmp	r3, #0
   119a4:	d0fb      	beq.n	1199e <find_node+0x1e>
   119a6:	4625      	mov	r5, r4
   119a8:	461c      	mov	r4, r3
   119aa:	681b      	ldr	r3, [r3, #0]
   119ac:	e7ef      	b.n	1198e <find_node+0xe>
   119ae:	bf00      	nop
   119b0:	20020230 	.word	0x20020230

000119b4 <module_init>:
{
	ARG_UNUSED(dev);

	static bool initialized;

	if (initialized) {
   119b4:	4a0e      	ldr	r2, [pc, #56]	; (119f0 <module_init+0x3c>)
{
   119b6:	b508      	push	{r3, lr}
	if (initialized) {
   119b8:	7813      	ldrb	r3, [r2, #0]
   119ba:	b17b      	cbz	r3, 119dc <module_init+0x28>
		LOG_WRN("Already initialized. Nothing to do");
   119bc:	2302      	movs	r3, #2
   119be:	f04f 0000 	mov.w	r0, #0
   119c2:	4a0c      	ldr	r2, [pc, #48]	; (119f4 <module_init+0x40>)
   119c4:	f363 0007 	bfi	r0, r3, #0, #8
   119c8:	4b0b      	ldr	r3, [pc, #44]	; (119f8 <module_init+0x44>)
   119ca:	490c      	ldr	r1, [pc, #48]	; (119fc <module_init+0x48>)
   119cc:	1a9b      	subs	r3, r3, r2
   119ce:	08db      	lsrs	r3, r3, #3
   119d0:	f363 108f 	bfi	r0, r3, #6, #10
   119d4:	f00e fa58 	bl	1fe88 <log_string_sync>

	LOG_DBG("Initialization");
	sys_slist_init(&handler_list);
	at_cmd_set_notification_handler(notif_dispatch);
	return 0;
}
   119d8:	2000      	movs	r0, #0
   119da:	bd08      	pop	{r3, pc}
	initialized = true;
   119dc:	2101      	movs	r1, #1
   119de:	7011      	strb	r1, [r2, #0]
	list->head = NULL;
   119e0:	4a07      	ldr	r2, [pc, #28]	; (11a00 <module_init+0x4c>)
	at_cmd_set_notification_handler(notif_dispatch);
   119e2:	4808      	ldr	r0, [pc, #32]	; (11a04 <module_init+0x50>)
	list->tail = NULL;
   119e4:	e9c2 3300 	strd	r3, r3, [r2]
   119e8:	f7ff ffa0 	bl	1192c <at_cmd_set_notification_handler>
	return 0;
   119ec:	e7f4      	b.n	119d8 <module_init+0x24>
   119ee:	bf00      	nop
   119f0:	20021684 	.word	0x20021684
   119f4:	00022924 	.word	0x00022924
   119f8:	00022934 	.word	0x00022934
   119fc:	00024845 	.word	0x00024845
   11a00:	20020230 	.word	0x20020230
   11a04:	00011a15 	.word	0x00011a15

00011a08 <k_mutex_unlock.constprop.7>:
	return z_impl_k_mutex_unlock(mutex);
   11a08:	4801      	ldr	r0, [pc, #4]	; (11a10 <k_mutex_unlock.constprop.7+0x8>)
   11a0a:	f009 bfff 	b.w	1ba0c <z_impl_k_mutex_unlock>
   11a0e:	bf00      	nop
   11a10:	200263f8 	.word	0x200263f8

00011a14 <notif_dispatch>:
{
   11a14:	b538      	push	{r3, r4, r5, lr}
   11a16:	4605      	mov	r5, r0
	return z_impl_k_mutex_lock(mutex, timeout);
   11a18:	f04f 31ff 	mov.w	r1, #4294967295
   11a1c:	4809      	ldr	r0, [pc, #36]	; (11a44 <notif_dispatch+0x30>)
   11a1e:	f009 ff17 	bl	1b850 <z_impl_k_mutex_lock>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&handler_list, curr, tmp, node) {
   11a22:	4b09      	ldr	r3, [pc, #36]	; (11a48 <notif_dispatch+0x34>)
   11a24:	681b      	ldr	r3, [r3, #0]
   11a26:	b91b      	cbnz	r3, 11a30 <notif_dispatch+0x1c>
}
   11a28:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	k_mutex_unlock(&list_mtx);
   11a2c:	f7ff bfec 	b.w	11a08 <k_mutex_unlock.constprop.7>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   11a30:	681c      	ldr	r4, [r3, #0]
		curr->handler(curr->ctx, response);
   11a32:	689a      	ldr	r2, [r3, #8]
   11a34:	4629      	mov	r1, r5
   11a36:	6858      	ldr	r0, [r3, #4]
   11a38:	4790      	blx	r2
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&handler_list, curr, tmp, node) {
   11a3a:	2c00      	cmp	r4, #0
   11a3c:	d0f4      	beq.n	11a28 <notif_dispatch+0x14>
   11a3e:	4623      	mov	r3, r4
   11a40:	6824      	ldr	r4, [r4, #0]
   11a42:	e7f6      	b.n	11a32 <notif_dispatch+0x1e>
   11a44:	200263f8 	.word	0x200263f8
   11a48:	20020230 	.word	0x20020230

00011a4c <at_notif_register_handler>:
{
	return module_init(NULL);
}

int at_notif_register_handler(void *context, at_notif_handler_t handler)
{
   11a4c:	b573      	push	{r0, r1, r4, r5, r6, lr}
   11a4e:	4606      	mov	r6, r0
	if (handler == NULL) {
   11a50:	460d      	mov	r5, r1
   11a52:	b999      	cbnz	r1, 11a7c <at_notif_register_handler+0x30>
		LOG_ERR("Invalid handler (context=0x%08X, handler=0x%08X)",
   11a54:	2301      	movs	r3, #1
   11a56:	f04f 0000 	mov.w	r0, #0
   11a5a:	4a1d      	ldr	r2, [pc, #116]	; (11ad0 <at_notif_register_handler+0x84>)
   11a5c:	f363 0007 	bfi	r0, r3, #0, #8
   11a60:	4b1c      	ldr	r3, [pc, #112]	; (11ad4 <at_notif_register_handler+0x88>)
   11a62:	1a9b      	subs	r3, r3, r2
   11a64:	08db      	lsrs	r3, r3, #3
   11a66:	f363 108f 	bfi	r0, r3, #6, #10
   11a6a:	4632      	mov	r2, r6
   11a6c:	460b      	mov	r3, r1
   11a6e:	491a      	ldr	r1, [pc, #104]	; (11ad8 <at_notif_register_handler+0x8c>)
   11a70:	f00e fa0a 	bl	1fe88 <log_string_sync>
			(u32_t)context, (u32_t)handler);
		return -EINVAL;
   11a74:	f06f 0015 	mvn.w	r0, #21
	}
	return append_notif_handler(context, handler);
}
   11a78:	b002      	add	sp, #8
   11a7a:	bd70      	pop	{r4, r5, r6, pc}
   11a7c:	f04f 31ff 	mov.w	r1, #4294967295
   11a80:	4816      	ldr	r0, [pc, #88]	; (11adc <at_notif_register_handler+0x90>)
   11a82:	f009 fee5 	bl	1b850 <z_impl_k_mutex_lock>
	if (find_node(&to_ins, ctx, handler) != NULL) {
   11a86:	462a      	mov	r2, r5
   11a88:	4631      	mov	r1, r6
   11a8a:	a801      	add	r0, sp, #4
   11a8c:	f7ff ff78 	bl	11980 <find_node>
   11a90:	4604      	mov	r4, r0
   11a92:	b118      	cbz	r0, 11a9c <at_notif_register_handler+0x50>
		k_mutex_unlock(&list_mtx);
   11a94:	f7ff ffb8 	bl	11a08 <k_mutex_unlock.constprop.7>
		return 0;
   11a98:	2000      	movs	r0, #0
   11a9a:	e7ed      	b.n	11a78 <at_notif_register_handler+0x2c>
	to_ins = (struct notif_handler *)k_malloc(sizeof(struct notif_handler));
   11a9c:	200c      	movs	r0, #12
   11a9e:	f009 fd6f 	bl	1b580 <k_malloc>
   11aa2:	9001      	str	r0, [sp, #4]
	if (to_ins == NULL) {
   11aa4:	b920      	cbnz	r0, 11ab0 <at_notif_register_handler+0x64>
		k_mutex_unlock(&list_mtx);
   11aa6:	f7ff ffaf 	bl	11a08 <k_mutex_unlock.constprop.7>
		return -ENOBUFS;
   11aaa:	f06f 0068 	mvn.w	r0, #104	; 0x68
   11aae:	e7e3      	b.n	11a78 <at_notif_register_handler+0x2c>
__ssp_bos_icheck3(memmove, void *, const void *)
__ssp_bos_icheck3_restrict(mempcpy, void *, const void *)
__ssp_bos_icheck3(memset, void *, int)
   11ab0:	6004      	str	r4, [r0, #0]
	to_ins->ctx     = ctx;
   11ab2:	9b01      	ldr	r3, [sp, #4]
Z_GENLIST_APPEND(slist, snode)
   11ab4:	4a0a      	ldr	r2, [pc, #40]	; (11ae0 <at_notif_register_handler+0x94>)
   11ab6:	6044      	str	r4, [r0, #4]
   11ab8:	6084      	str	r4, [r0, #8]
	parent->next = child;
   11aba:	601c      	str	r4, [r3, #0]
Z_GENLIST_APPEND(slist, snode)
   11abc:	6851      	ldr	r1, [r2, #4]
	to_ins->handler = handler;
   11abe:	e9c3 6501 	strd	r6, r5, [r3, #4]
   11ac2:	b911      	cbnz	r1, 11aca <at_notif_register_handler+0x7e>
	list->head = node;
   11ac4:	e9c2 3300 	strd	r3, r3, [r2]
   11ac8:	e7e4      	b.n	11a94 <at_notif_register_handler+0x48>
	parent->next = child;
   11aca:	600b      	str	r3, [r1, #0]
	list->tail = node;
   11acc:	6053      	str	r3, [r2, #4]
   11ace:	e7e1      	b.n	11a94 <at_notif_register_handler+0x48>
   11ad0:	00022924 	.word	0x00022924
   11ad4:	00022934 	.word	0x00022934
   11ad8:	00024814 	.word	0x00024814
   11adc:	200263f8 	.word	0x200263f8
   11ae0:	20020230 	.word	0x20020230

00011ae4 <at_notif_deregister_handler>:

int at_notif_deregister_handler(void *context, at_notif_handler_t handler)
{
   11ae4:	b537      	push	{r0, r1, r2, r4, r5, lr}
   11ae6:	4605      	mov	r5, r0
	if (handler == NULL) {
   11ae8:	460c      	mov	r4, r1
   11aea:	b999      	cbnz	r1, 11b14 <at_notif_deregister_handler+0x30>
		LOG_ERR("Invalid handler (context=0x%08X, handler=0x%08X)",
   11aec:	2301      	movs	r3, #1
   11aee:	f04f 0000 	mov.w	r0, #0
   11af2:	4921      	ldr	r1, [pc, #132]	; (11b78 <at_notif_deregister_handler+0x94>)
   11af4:	f363 0007 	bfi	r0, r3, #0, #8
   11af8:	4b20      	ldr	r3, [pc, #128]	; (11b7c <at_notif_deregister_handler+0x98>)
   11afa:	462a      	mov	r2, r5
   11afc:	1ac9      	subs	r1, r1, r3
   11afe:	08c9      	lsrs	r1, r1, #3
   11b00:	f361 108f 	bfi	r0, r1, #6, #10
   11b04:	4623      	mov	r3, r4
   11b06:	491e      	ldr	r1, [pc, #120]	; (11b80 <at_notif_deregister_handler+0x9c>)
   11b08:	f00e f9be 	bl	1fe88 <log_string_sync>
			(u32_t)context, (u32_t)handler);
		return -EINVAL;
   11b0c:	f06f 0015 	mvn.w	r0, #21
	}
	return remove_notif_handler(context, handler);
}
   11b10:	b003      	add	sp, #12
   11b12:	bd30      	pop	{r4, r5, pc}
	struct notif_handler *curr, *prev = NULL;
   11b14:	2300      	movs	r3, #0
   11b16:	9301      	str	r3, [sp, #4]
   11b18:	f04f 31ff 	mov.w	r1, #4294967295
   11b1c:	4819      	ldr	r0, [pc, #100]	; (11b84 <at_notif_deregister_handler+0xa0>)
   11b1e:	f009 fe97 	bl	1b850 <z_impl_k_mutex_lock>
	curr = find_node(&prev, ctx, handler);
   11b22:	4622      	mov	r2, r4
   11b24:	4629      	mov	r1, r5
   11b26:	a801      	add	r0, sp, #4
   11b28:	f7ff ff2a 	bl	11980 <find_node>
	if (curr == NULL) {
   11b2c:	b978      	cbnz	r0, 11b4e <at_notif_deregister_handler+0x6a>
		LOG_WRN("Handler not registered. Nothing to do");
   11b2e:	2302      	movs	r3, #2
   11b30:	4a12      	ldr	r2, [pc, #72]	; (11b7c <at_notif_deregister_handler+0x98>)
   11b32:	f363 0007 	bfi	r0, r3, #0, #8
   11b36:	4b10      	ldr	r3, [pc, #64]	; (11b78 <at_notif_deregister_handler+0x94>)
   11b38:	4913      	ldr	r1, [pc, #76]	; (11b88 <at_notif_deregister_handler+0xa4>)
   11b3a:	1a9b      	subs	r3, r3, r2
   11b3c:	08db      	lsrs	r3, r3, #3
   11b3e:	f363 108f 	bfi	r0, r3, #6, #10
   11b42:	f00e f9a1 	bl	1fe88 <log_string_sync>
	k_mutex_unlock(&list_mtx);
   11b46:	f7ff ff5f 	bl	11a08 <k_mutex_unlock.constprop.7>
	return remove_notif_handler(context, handler);
   11b4a:	2000      	movs	r0, #0
   11b4c:	e7e0      	b.n	11b10 <at_notif_deregister_handler+0x2c>
	sys_slist_remove(&handler_list, &prev->node, &curr->node);
   11b4e:	9a01      	ldr	r2, [sp, #4]
Z_GENLIST_REMOVE(slist, snode)
   11b50:	6801      	ldr	r1, [r0, #0]
   11b52:	4b0e      	ldr	r3, [pc, #56]	; (11b8c <at_notif_deregister_handler+0xa8>)
   11b54:	b94a      	cbnz	r2, 11b6a <at_notif_deregister_handler+0x86>
   11b56:	685a      	ldr	r2, [r3, #4]
	list->head = node;
   11b58:	6019      	str	r1, [r3, #0]
Z_GENLIST_REMOVE(slist, snode)
   11b5a:	4290      	cmp	r0, r2
   11b5c:	d100      	bne.n	11b60 <at_notif_deregister_handler+0x7c>
	list->tail = node;
   11b5e:	6059      	str	r1, [r3, #4]
	parent->next = child;
   11b60:	2300      	movs	r3, #0
   11b62:	6003      	str	r3, [r0, #0]
	k_free(curr);
   11b64:	f00f fdb6 	bl	216d4 <k_free>
   11b68:	e7ed      	b.n	11b46 <at_notif_deregister_handler+0x62>
   11b6a:	6011      	str	r1, [r2, #0]
Z_GENLIST_REMOVE(slist, snode)
   11b6c:	6859      	ldr	r1, [r3, #4]
   11b6e:	4288      	cmp	r0, r1
	list->tail = node;
   11b70:	bf08      	it	eq
   11b72:	605a      	streq	r2, [r3, #4]
   11b74:	e7f4      	b.n	11b60 <at_notif_deregister_handler+0x7c>
   11b76:	bf00      	nop
   11b78:	00022934 	.word	0x00022934
   11b7c:	00022924 	.word	0x00022924
   11b80:	00024814 	.word	0x00024814
   11b84:	200263f8 	.word	0x200263f8
   11b88:	000247ee 	.word	0x000247ee
   11b8c:	20020230 	.word	0x20020230

00011b90 <write_uart_string>:
static struct k_work cmd_send_work;



static inline void write_uart_string(const char *str)
{
   11b90:	b538      	push	{r3, r4, r5, lr}
	/* Send characters until, but not including, null */
	for (size_t i = 0; str[i]; i++) {
		uart_poll_out(uart_dev, str[i]);
   11b92:	4d05      	ldr	r5, [pc, #20]	; (11ba8 <write_uart_string+0x18>)
   11b94:	1e44      	subs	r4, r0, #1
	for (size_t i = 0; str[i]; i++) {
   11b96:	f814 1f01 	ldrb.w	r1, [r4, #1]!
   11b9a:	b901      	cbnz	r1, 11b9e <write_uart_string+0xe>
	}
}
   11b9c:	bd38      	pop	{r3, r4, r5, pc}
		uart_poll_out(uart_dev, str[i]);
   11b9e:	6828      	ldr	r0, [r5, #0]
						unsigned char out_char)
{
	const struct uart_driver_api *api =
		(const struct uart_driver_api *)dev->driver_api;

	api->poll_out(dev, out_char);
   11ba0:	6843      	ldr	r3, [r0, #4]
   11ba2:	685b      	ldr	r3, [r3, #4]
   11ba4:	4798      	blx	r3
   11ba6:	e7f6      	b.n	11b96 <write_uart_string+0x6>
   11ba8:	2002030c 	.word	0x2002030c

00011bac <cmd_send>:
	/* Forward the data over UART */
	write_uart_string(response);
}

static void cmd_send(struct k_work *work)
{
   11bac:	b500      	push	{lr}
	enum at_cmd_state state;
	int               err;

	ARG_UNUSED(work);

	err = at_cmd_write(at_buf, at_buf,
   11bae:	4923      	ldr	r1, [pc, #140]	; (11c3c <cmd_send+0x90>)
{
   11bb0:	b08b      	sub	sp, #44	; 0x2c
	err = at_cmd_write(at_buf, at_buf,
   11bb2:	f44f 5280 	mov.w	r2, #4096	; 0x1000
   11bb6:	f10d 030b 	add.w	r3, sp, #11
   11bba:	4608      	mov	r0, r1
   11bbc:	f7ff fe94 	bl	118e8 <at_cmd_write>
			   sizeof(at_buf), &state);
	if (err < 0) {
   11bc0:	1e02      	subs	r2, r0, #0
   11bc2:	da12      	bge.n	11bea <cmd_send+0x3e>
		LOG_ERR("Error while processing AT command: %d", err);
   11bc4:	2301      	movs	r3, #1
   11bc6:	f04f 0000 	mov.w	r0, #0
   11bca:	491d      	ldr	r1, [pc, #116]	; (11c40 <cmd_send+0x94>)
   11bcc:	f363 0007 	bfi	r0, r3, #0, #8
   11bd0:	4b1c      	ldr	r3, [pc, #112]	; (11c44 <cmd_send+0x98>)
   11bd2:	1a5b      	subs	r3, r3, r1
   11bd4:	08db      	lsrs	r3, r3, #3
   11bd6:	f363 108f 	bfi	r0, r3, #6, #10
   11bda:	491b      	ldr	r1, [pc, #108]	; (11c48 <cmd_send+0x9c>)
   11bdc:	f00e f954 	bl	1fe88 <log_string_sync>
		state = AT_CMD_ERROR;
   11be0:	2301      	movs	r3, #1
   11be2:	f88d 300b 	strb.w	r3, [sp, #11]
	case AT_CMD_OK:
		write_uart_string(at_buf);
		write_uart_string(OK_STR);
		break;
	case AT_CMD_ERROR:
		write_uart_string(ERROR_STR);
   11be6:	4819      	ldr	r0, [pc, #100]	; (11c4c <cmd_send+0xa0>)
   11be8:	e012      	b.n	11c10 <cmd_send+0x64>
	switch (state) {
   11bea:	f89d 300b 	ldrb.w	r3, [sp, #11]
   11bee:	2b03      	cmp	r3, #3
   11bf0:	d810      	bhi.n	11c14 <cmd_send+0x68>
   11bf2:	a101      	add	r1, pc, #4	; (adr r1, 11bf8 <cmd_send+0x4c>)
   11bf4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
   11bf8:	00011c09 	.word	0x00011c09
   11bfc:	00011be7 	.word	0x00011be7
   11c00:	00011c23 	.word	0x00011c23
   11c04:	00011c35 	.word	0x00011c35
		write_uart_string(at_buf);
   11c08:	480c      	ldr	r0, [pc, #48]	; (11c3c <cmd_send+0x90>)
   11c0a:	f7ff ffc1 	bl	11b90 <write_uart_string>
		write_uart_string(OK_STR);
   11c0e:	4810      	ldr	r0, [pc, #64]	; (11c50 <cmd_send+0xa4>)
		sprintf(str, "+CMS ERROR: %d\r\n", err);
		write_uart_string(str);
		break;
	case AT_CMD_ERROR_CME:
		sprintf(str, "+CME ERROR: %d\r\n", err);
		write_uart_string(str);
   11c10:	f7ff ffbe 	bl	11b90 <write_uart_string>
		break;
	default:
		break;
	}

	uart_irq_rx_enable(uart_dev);
   11c14:	4b0f      	ldr	r3, [pc, #60]	; (11c54 <cmd_send+0xa8>)
   11c16:	6818      	ldr	r0, [r3, #0]
		arch_syscall_invoke1(*(uintptr_t *)&dev, K_SYSCALL_UART_IRQ_RX_ENABLE);
		return;
	}
#endif
	compiler_barrier();
	z_impl_uart_irq_rx_enable(dev);
   11c18:	f00f fc22 	bl	21460 <z_impl_uart_irq_rx_enable>
}
   11c1c:	b00b      	add	sp, #44	; 0x2c
   11c1e:	f85d fb04 	ldr.w	pc, [sp], #4
		sprintf(str, "+CMS ERROR: %d\r\n", err);
   11c22:	4b0d      	ldr	r3, [pc, #52]	; (11c58 <cmd_send+0xac>)
   11c24:	9200      	str	r2, [sp, #0]
		sprintf(str, "+CME ERROR: %d\r\n", err);
   11c26:	2219      	movs	r2, #25
   11c28:	2100      	movs	r1, #0
   11c2a:	a803      	add	r0, sp, #12
   11c2c:	f00f ffcb 	bl	21bc6 <__sprintf_chk>
		write_uart_string(str);
   11c30:	a803      	add	r0, sp, #12
   11c32:	e7ed      	b.n	11c10 <cmd_send+0x64>
		sprintf(str, "+CME ERROR: %d\r\n", err);
   11c34:	9200      	str	r2, [sp, #0]
   11c36:	4b09      	ldr	r3, [pc, #36]	; (11c5c <cmd_send+0xb0>)
   11c38:	e7f5      	b.n	11c26 <cmd_send+0x7a>
   11c3a:	bf00      	nop
   11c3c:	20021685 	.word	0x20021685
   11c40:	00022924 	.word	0x00022924
   11c44:	0002292c 	.word	0x0002292c
   11c48:	0002492c 	.word	0x0002492c
   11c4c:	00024957 	.word	0x00024957
   11c50:	00024952 	.word	0x00024952
   11c54:	2002030c 	.word	0x2002030c
   11c58:	0002495f 	.word	0x0002495f
   11c5c:	00024970 	.word	0x00024970

00011c60 <isr>:
		k_work_submit_to_queue(&at_host_work_q, &cmd_send_work);
	}
}

static void isr(struct device *dev)
{
   11c60:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   11c64:	4606      	mov	r6, r0
static inline int z_impl_uart_irq_update(struct device *dev)
{
	const struct uart_driver_api *api =
		(const struct uart_driver_api *)dev->driver_api;

	if (api->irq_update) {
   11c66:	6843      	ldr	r3, [r0, #4]
   11c68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   11c6a:	b103      	cbz	r3, 11c6e <isr+0xe>
		return api->irq_update(dev);
   11c6c:	4798      	blx	r3
	if (api->irq_rx_ready) {
   11c6e:	6873      	ldr	r3, [r6, #4]
   11c70:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   11c72:	b1c3      	cbz	r3, 11ca6 <isr+0x46>
		return api->irq_rx_ready(dev);
   11c74:	4630      	mov	r0, r6
   11c76:	4798      	blx	r3
	u8_t character;

	uart_irq_update(dev);

	if (!uart_irq_rx_ready(dev)) {
   11c78:	b1a8      	cbz	r0, 11ca6 <isr+0x46>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   11c7a:	f8df a14c 	ldr.w	sl, [pc, #332]	; 11dc8 <isr+0x168>
   11c7e:	4d47      	ldr	r5, [pc, #284]	; (11d9c <isr+0x13c>)
   11c80:	46d1      	mov	r9, sl
			LOG_WRN("Ignored null; would terminate string early.");
   11c82:	4b47      	ldr	r3, [pc, #284]	; (11da0 <isr+0x140>)
		if (at_cmd_len > 0) {
   11c84:	4c47      	ldr	r4, [pc, #284]	; (11da4 <isr+0x144>)
			LOG_WRN("Ignored null; would terminate string early.");
   11c86:	1aed      	subs	r5, r5, r3
   11c88:	f3c5 05c9 	ubfx	r5, r5, #3, #10
   11c8c:	e8da 3faf 	lda	r3, [sl]

	/*
	 * Check that we are not sending data (buffer must be preserved then),
	 * and that a new character is available before handling each character
	 */
	while ((!k_work_pending(&cmd_send_work)) &&
   11c90:	07db      	lsls	r3, r3, #31
   11c92:	d408      	bmi.n	11ca6 <isr+0x46>
	if (api->fifo_read) {
   11c94:	6873      	ldr	r3, [r6, #4]
   11c96:	699b      	ldr	r3, [r3, #24]
   11c98:	b12b      	cbz	r3, 11ca6 <isr+0x46>
		return api->fifo_read(dev, rx_data, size);
   11c9a:	2201      	movs	r2, #1
   11c9c:	f10d 0107 	add.w	r1, sp, #7
   11ca0:	4630      	mov	r0, r6
   11ca2:	4798      	blx	r3
   11ca4:	b910      	cbnz	r0, 11cac <isr+0x4c>
	       (uart_fifo_read(dev, &character, 1))) {
		uart_rx_handler(character);
	}
}
   11ca6:	b002      	add	sp, #8
   11ca8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		uart_rx_handler(character);
   11cac:	f89d 2007 	ldrb.w	r2, [sp, #7]
	switch (character) {
   11cb0:	2a08      	cmp	r2, #8
   11cb2:	d001      	beq.n	11cb8 <isr+0x58>
   11cb4:	2a7f      	cmp	r2, #127	; 0x7f
   11cb6:	d105      	bne.n	11cc4 <isr+0x64>
		if (at_cmd_len > 0) {
   11cb8:	6823      	ldr	r3, [r4, #0]
   11cba:	2b00      	cmp	r3, #0
   11cbc:	d0e6      	beq.n	11c8c <isr+0x2c>
			at_cmd_len--;
   11cbe:	3b01      	subs	r3, #1
   11cc0:	6023      	str	r3, [r4, #0]
   11cc2:	e7e3      	b.n	11c8c <isr+0x2c>
	if (!inside_quotes) {
   11cc4:	4938      	ldr	r1, [pc, #224]	; (11da8 <isr+0x148>)
   11cc6:	780b      	ldrb	r3, [r1, #0]
   11cc8:	b9cb      	cbnz	r3, 11cfe <isr+0x9e>
		switch (character) {
   11cca:	2a0a      	cmp	r2, #10
   11ccc:	d02b      	beq.n	11d26 <isr+0xc6>
   11cce:	2a0d      	cmp	r2, #13
   11cd0:	d011      	beq.n	11cf6 <isr+0x96>
   11cd2:	b9a2      	cbnz	r2, 11cfe <isr+0x9e>
			if (term_mode == MODE_NULL_TERM) {
   11cd4:	4b35      	ldr	r3, [pc, #212]	; (11dac <isr+0x14c>)
   11cd6:	781b      	ldrb	r3, [r3, #0]
   11cd8:	2b00      	cmp	r3, #0
   11cda:	d040      	beq.n	11d5e <isr+0xfe>
			LOG_WRN("Ignored null; would terminate string early.");
   11cdc:	f027 033f 	bic.w	r3, r7, #63	; 0x3f
   11ce0:	f043 0302 	orr.w	r3, r3, #2
   11ce4:	f363 0707 	bfi	r7, r3, #0, #8
   11ce8:	f365 178f 	bfi	r7, r5, #6, #10
   11cec:	4930      	ldr	r1, [pc, #192]	; (11db0 <isr+0x150>)
   11cee:	4638      	mov	r0, r7
   11cf0:	f00e f8ca 	bl	1fe88 <log_string_sync>
			return;
   11cf4:	e7ca      	b.n	11c8c <isr+0x2c>
			if (term_mode == MODE_CR) {
   11cf6:	482d      	ldr	r0, [pc, #180]	; (11dac <isr+0x14c>)
   11cf8:	7800      	ldrb	r0, [r0, #0]
   11cfa:	2801      	cmp	r0, #1
			    at_cmd_len > 0 &&
   11cfc:	d02f      	beq.n	11d5e <isr+0xfe>
	if (at_cmd_len + 1 > sizeof(at_buf) - 1) {
   11cfe:	f8d4 c000 	ldr.w	ip, [r4]
   11d02:	f10c 0001 	add.w	r0, ip, #1
   11d06:	f5b0 5f80 	cmp.w	r0, #4096	; 0x1000
   11d0a:	d31d      	bcc.n	11d48 <isr+0xe8>
		LOG_ERR("Buffer overflow, dropping '%c'\n", character);
   11d0c:	f028 033f 	bic.w	r3, r8, #63	; 0x3f
   11d10:	f043 0301 	orr.w	r3, r3, #1
   11d14:	f363 0807 	bfi	r8, r3, #0, #8
   11d18:	f365 188f 	bfi	r8, r5, #6, #10
   11d1c:	4925      	ldr	r1, [pc, #148]	; (11db4 <isr+0x154>)
   11d1e:	4640      	mov	r0, r8
   11d20:	f00e f8b2 	bl	1fe88 <log_string_sync>
		return;
   11d24:	e7b2      	b.n	11c8c <isr+0x2c>
			if (term_mode == MODE_LF) {
   11d26:	4821      	ldr	r0, [pc, #132]	; (11dac <isr+0x14c>)
   11d28:	7800      	ldrb	r0, [r0, #0]
   11d2a:	2802      	cmp	r0, #2
   11d2c:	d017      	beq.n	11d5e <isr+0xfe>
			if (term_mode == MODE_CR_LF &&
   11d2e:	2803      	cmp	r0, #3
   11d30:	d1e5      	bne.n	11cfe <isr+0x9e>
   11d32:	f8d4 c000 	ldr.w	ip, [r4]
   11d36:	f1bc 0f00 	cmp.w	ip, #0
   11d3a:	d0e0      	beq.n	11cfe <isr+0x9e>
			    at_buf[at_cmd_len - 1] == '\r') {
   11d3c:	481e      	ldr	r0, [pc, #120]	; (11db8 <isr+0x158>)
   11d3e:	4460      	add	r0, ip
			    at_cmd_len > 0 &&
   11d40:	f810 0c01 	ldrb.w	r0, [r0, #-1]
   11d44:	280d      	cmp	r0, #13
   11d46:	e7d9      	b.n	11cfc <isr+0x9c>
	at_buf[at_cmd_len] = character;
   11d48:	f8df e06c 	ldr.w	lr, [pc, #108]	; 11db8 <isr+0x158>
	if (character == '"') {
   11d4c:	2a22      	cmp	r2, #34	; 0x22
	at_buf[at_cmd_len] = character;
   11d4e:	f80e 200c 	strb.w	r2, [lr, ip]
	at_cmd_len++;
   11d52:	6020      	str	r0, [r4, #0]
	if (character == '"') {
   11d54:	d19a      	bne.n	11c8c <isr+0x2c>
	if (!inside_quotes) {
   11d56:	f083 0301 	eor.w	r3, r3, #1
		inside_quotes = !inside_quotes;
   11d5a:	700b      	strb	r3, [r1, #0]
   11d5c:	e796      	b.n	11c8c <isr+0x2c>
	at_buf[at_cmd_len] = '\0'; /* Terminate the command string */
   11d5e:	2300      	movs	r3, #0
   11d60:	4a15      	ldr	r2, [pc, #84]	; (11db8 <isr+0x158>)
   11d62:	6820      	ldr	r0, [r4, #0]
	inside_quotes = false;
   11d64:	700b      	strb	r3, [r1, #0]
	at_buf[at_cmd_len] = '\0'; /* Terminate the command string */
   11d66:	5413      	strb	r3, [r2, r0]
	at_cmd_len = 0;
   11d68:	6023      	str	r3, [r4, #0]
	if (at_buf[0]) {
   11d6a:	7813      	ldrb	r3, [r2, #0]
   11d6c:	2b00      	cmp	r3, #0
   11d6e:	d08d      	beq.n	11c8c <isr+0x2c>
		uart_irq_rx_disable(uart_dev); /* Stop UART to protect at_buf */
   11d70:	4b12      	ldr	r3, [pc, #72]	; (11dbc <isr+0x15c>)
   11d72:	6818      	ldr	r0, [r3, #0]
	if (api->irq_rx_disable) {
   11d74:	6843      	ldr	r3, [r0, #4]
   11d76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   11d78:	b103      	cbz	r3, 11d7c <isr+0x11c>
		api->irq_rx_disable(dev);
   11d7a:	4798      	blx	r3
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   11d7c:	e8d9 3fef 	ldaex	r3, [r9]
   11d80:	f043 0201 	orr.w	r2, r3, #1
   11d84:	e8c9 2fe1 	stlex	r1, r2, [r9]
   11d88:	2900      	cmp	r1, #0
   11d8a:	d1f7      	bne.n	11d7c <isr+0x11c>
	if (!atomic_test_and_set_bit(work->flags, K_WORK_STATE_PENDING)) {
   11d8c:	07da      	lsls	r2, r3, #31
   11d8e:	f53f af7d 	bmi.w	11c8c <isr+0x2c>
		k_queue_append(&work_q->queue, work);
   11d92:	490b      	ldr	r1, [pc, #44]	; (11dc0 <isr+0x160>)
   11d94:	480b      	ldr	r0, [pc, #44]	; (11dc4 <isr+0x164>)
   11d96:	f00f fcd3 	bl	21740 <k_queue_append>
   11d9a:	e777      	b.n	11c8c <isr+0x2c>
   11d9c:	0002292c 	.word	0x0002292c
   11da0:	00022924 	.word	0x00022924
   11da4:	20020238 	.word	0x20020238
   11da8:	20022685 	.word	0x20022685
   11dac:	20022686 	.word	0x20022686
   11db0:	00024981 	.word	0x00024981
   11db4:	000249ad 	.word	0x000249ad
   11db8:	20021685 	.word	0x20021685
   11dbc:	2002030c 	.word	0x2002030c
   11dc0:	20020300 	.word	0x20020300
   11dc4:	2002023c 	.word	0x2002023c
   11dc8:	20020308 	.word	0x20020308

00011dcc <at_host_init>:

	ARG_UNUSED(arg);

	/* Choosing the termination mode */
	if (mode < MODE_COUNT) {
		term_mode = mode;
   11dcc:	2202      	movs	r2, #2
   11dce:	4b49      	ldr	r3, [pc, #292]	; (11ef4 <at_host_init+0x128>)
{
   11dd0:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
	default:
		LOG_ERR("Unknown UART instance %d", uart_id);
		return -EINVAL;
	}

	err = at_notif_register_handler(NULL, response_handler);
   11dd4:	4948      	ldr	r1, [pc, #288]	; (11ef8 <at_host_init+0x12c>)
   11dd6:	2000      	movs	r0, #0
		term_mode = mode;
   11dd8:	701a      	strb	r2, [r3, #0]
	err = at_notif_register_handler(NULL, response_handler);
   11dda:	f7ff fe37 	bl	11a4c <at_notif_register_handler>
	if (err != 0) {
   11dde:	4c47      	ldr	r4, [pc, #284]	; (11efc <at_host_init+0x130>)
   11de0:	4b47      	ldr	r3, [pc, #284]	; (11f00 <at_host_init+0x134>)
   11de2:	4606      	mov	r6, r0
   11de4:	1ae4      	subs	r4, r4, r3
   11de6:	f3c4 04c9 	ubfx	r4, r4, #3, #10
   11dea:	b170      	cbz	r0, 11e0a <at_host_init+0x3e>
		LOG_ERR("Can't register handler err=%d", err);
   11dec:	f04f 0000 	mov.w	r0, #0
   11df0:	2301      	movs	r3, #1
   11df2:	f363 0007 	bfi	r0, r3, #0, #8
   11df6:	f364 108f 	bfi	r0, r4, #6, #10
   11dfa:	4632      	mov	r2, r6
   11dfc:	4941      	ldr	r1, [pc, #260]	; (11f04 <at_host_init+0x138>)
   11dfe:	f00e f843 	bl	1fe88 <log_string_sync>
		       K_THREAD_STACK_SIZEOF(at_host_stack_area),
		       CONFIG_AT_HOST_THREAD_PRIO);
	uart_irq_rx_enable(uart_dev);

	return err;
}
   11e02:	4630      	mov	r0, r6
   11e04:	b002      	add	sp, #8
   11e06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   11e0a:	483f      	ldr	r0, [pc, #252]	; (11f08 <at_host_init+0x13c>)
   11e0c:	f009 f834 	bl	1ae78 <z_impl_device_get_binding>
	uart_dev = device_get_binding(uart_dev_name);
   11e10:	4d3e      	ldr	r5, [pc, #248]	; (11f0c <at_host_init+0x140>)
   11e12:	6028      	str	r0, [r5, #0]
	if (uart_dev == NULL) {
   11e14:	b9b8      	cbnz	r0, 11e46 <at_host_init+0x7a>
		LOG_ERR("Cannot bind %s\n", uart_dev_name);
   11e16:	2301      	movs	r3, #1
   11e18:	f363 0007 	bfi	r0, r3, #0, #8
   11e1c:	4a3a      	ldr	r2, [pc, #232]	; (11f08 <at_host_init+0x13c>)
   11e1e:	f364 108f 	bfi	r0, r4, #6, #10
   11e22:	493b      	ldr	r1, [pc, #236]	; (11f10 <at_host_init+0x144>)
   11e24:	f00e f830 	bl	1fe88 <log_string_sync>
		return -EINVAL;
   11e28:	f06f 0215 	mvn.w	r2, #21
		LOG_ERR("UART could not be initialized: %d", err);
   11e2c:	2301      	movs	r3, #1
   11e2e:	f04f 0000 	mov.w	r0, #0
   11e32:	f363 0007 	bfi	r0, r3, #0, #8
   11e36:	f364 108f 	bfi	r0, r4, #6, #10
   11e3a:	4936      	ldr	r1, [pc, #216]	; (11f14 <at_host_init+0x148>)
   11e3c:	f00e f824 	bl	1fe88 <log_string_sync>
		return -EFAULT;
   11e40:	f06f 060d 	mvn.w	r6, #13
   11e44:	e7dd      	b.n	11e02 <at_host_init+0x36>
	return z_impl_k_uptime_get();
   11e46:	f00f fcf2 	bl	2182e <z_impl_k_uptime_get>
   11e4a:	4681      	mov	r9, r0
			LOG_INF("UART check failed: %d. "
   11e4c:	f8df a0e0 	ldr.w	sl, [pc, #224]	; 11f30 <at_host_init+0x164>
		err = uart_err_check(uart_dev);
   11e50:	6828      	ldr	r0, [r5, #0]
	if (api->err_check != NULL) {
   11e52:	6843      	ldr	r3, [r0, #4]
   11e54:	689b      	ldr	r3, [r3, #8]
   11e56:	b39b      	cbz	r3, 11ec0 <at_host_init+0xf4>
		return api->err_check(dev);
   11e58:	4798      	blx	r3
		if (err) {
   11e5a:	4680      	mov	r8, r0
   11e5c:	b380      	cbz	r0, 11ec0 <at_host_init+0xf4>
   11e5e:	f00f fce6 	bl	2182e <z_impl_k_uptime_get>
			if (k_uptime_get_32() - start_time >
   11e62:	eba0 0009 	sub.w	r0, r0, r9
   11e66:	f5b0 7ffa 	cmp.w	r0, #500	; 0x1f4
   11e6a:	d90d      	bls.n	11e88 <at_host_init+0xbc>
				LOG_ERR("UART check failed: %d. "
   11e6c:	2301      	movs	r3, #1
   11e6e:	f04f 0000 	mov.w	r0, #0
   11e72:	f363 0007 	bfi	r0, r3, #0, #8
   11e76:	4642      	mov	r2, r8
   11e78:	f364 108f 	bfi	r0, r4, #6, #10
   11e7c:	4926      	ldr	r1, [pc, #152]	; (11f18 <at_host_init+0x14c>)
   11e7e:	f00e f803 	bl	1fe88 <log_string_sync>
				return -EIO;
   11e82:	f06f 0204 	mvn.w	r2, #4
   11e86:	e7d1      	b.n	11e2c <at_host_init+0x60>
			LOG_INF("UART check failed: %d. "
   11e88:	f027 033f 	bic.w	r3, r7, #63	; 0x3f
   11e8c:	f043 0303 	orr.w	r3, r3, #3
   11e90:	f363 0707 	bfi	r7, r3, #0, #8
   11e94:	f364 178f 	bfi	r7, r4, #6, #10
   11e98:	4642      	mov	r2, r8
   11e9a:	4651      	mov	r1, sl
   11e9c:	4638      	mov	r0, r7
   11e9e:	f00d fff3 	bl	1fe88 <log_string_sync>
			while (uart_fifo_read(uart_dev, &dummy, 1)) {
   11ea2:	6828      	ldr	r0, [r5, #0]
	if (api->fifo_read) {
   11ea4:	6843      	ldr	r3, [r0, #4]
   11ea6:	699b      	ldr	r3, [r3, #24]
   11ea8:	b91b      	cbnz	r3, 11eb2 <at_host_init+0xe6>
	return z_impl_k_sleep(ms);
   11eaa:	200a      	movs	r0, #10
   11eac:	f00b f8a0 	bl	1cff0 <z_impl_k_sleep>
   11eb0:	e7ce      	b.n	11e50 <at_host_init+0x84>
		return api->fifo_read(dev, rx_data, size);
   11eb2:	2201      	movs	r2, #1
   11eb4:	f10d 0107 	add.w	r1, sp, #7
   11eb8:	4798      	blx	r3
   11eba:	2800      	cmp	r0, #0
   11ebc:	d1f1      	bne.n	11ea2 <at_host_init+0xd6>
   11ebe:	e7f4      	b.n	11eaa <at_host_init+0xde>
	uart_irq_callback_set(uart_dev, isr);
   11ec0:	682a      	ldr	r2, [r5, #0]
static inline void uart_irq_callback_user_data_set(
					struct device *dev,
					uart_irq_callback_user_data_t cb,
					void *user_data)
{
	const struct uart_driver_api *api =
   11ec2:	6853      	ldr	r3, [r2, #4]
		(const struct uart_driver_api *)dev->driver_api;

	if ((api != NULL) && (api->irq_callback_set != NULL)) {
   11ec4:	b123      	cbz	r3, 11ed0 <at_host_init+0x104>
   11ec6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   11ec8:	b113      	cbz	r3, 11ed0 <at_host_init+0x104>
		api->irq_callback_set(dev, cb, user_data);
   11eca:	4914      	ldr	r1, [pc, #80]	; (11f1c <at_host_init+0x150>)
   11ecc:	4610      	mov	r0, r2
   11ece:	4798      	blx	r3
	*work = (struct k_work)Z_WORK_INITIALIZER(handler);
   11ed0:	2200      	movs	r2, #0
   11ed2:	4b13      	ldr	r3, [pc, #76]	; (11f20 <at_host_init+0x154>)
   11ed4:	4913      	ldr	r1, [pc, #76]	; (11f24 <at_host_init+0x158>)
   11ed6:	601a      	str	r2, [r3, #0]
   11ed8:	e9c3 1201 	strd	r1, r2, [r3, #4]
	k_work_q_start(&at_host_work_q, at_host_stack_area,
   11edc:	4812      	ldr	r0, [pc, #72]	; (11f28 <at_host_init+0x15c>)
   11ede:	230a      	movs	r3, #10
   11ee0:	f44f 7200 	mov.w	r2, #512	; 0x200
   11ee4:	4911      	ldr	r1, [pc, #68]	; (11f2c <at_host_init+0x160>)
   11ee6:	f00b fb73 	bl	1d5d0 <k_work_q_start>
	uart_irq_rx_enable(uart_dev);
   11eea:	6828      	ldr	r0, [r5, #0]
   11eec:	f00f fab8 	bl	21460 <z_impl_uart_irq_rx_enable>
	return err;
   11ef0:	e787      	b.n	11e02 <at_host_init+0x36>
   11ef2:	bf00      	nop
   11ef4:	20022686 	.word	0x20022686
   11ef8:	0002146b 	.word	0x0002146b
   11efc:	0002292c 	.word	0x0002292c
   11f00:	00022924 	.word	0x00022924
   11f04:	00024871 	.word	0x00024871
   11f08:	0002368b 	.word	0x0002368b
   11f0c:	2002030c 	.word	0x2002030c
   11f10:	0002488f 	.word	0x0002488f
   11f14:	0002490a 	.word	0x0002490a
   11f18:	0002489f 	.word	0x0002489f
   11f1c:	00011c61 	.word	0x00011c61
   11f20:	20020300 	.word	0x20020300
   11f24:	00011bad 	.word	0x00011bad
   11f28:	2002023c 	.word	0x2002023c
   11f2c:	20022be8 	.word	0x20022be8
   11f30:	000248d5 	.word	0x000248d5

00011f34 <is_valid_notification_char>:
 * @retval true  If character is valid
 * @retval false If character is not valid
 */
static inline bool is_valid_notification_char(char chr)
{
	chr = toupper(chr);
   11f34:	4b06      	ldr	r3, [pc, #24]	; (11f50 <is_valid_notification_char+0x1c>)
   11f36:	5cc3      	ldrb	r3, [r0, r3]
   11f38:	f003 0303 	and.w	r3, r3, #3
   11f3c:	2b02      	cmp	r3, #2
   11f3e:	bf08      	it	eq
   11f40:	3820      	subeq	r0, #32

	if ((chr >= 'A') && (chr <= 'Z')) {
   11f42:	3841      	subs	r0, #65	; 0x41
   11f44:	b2c0      	uxtb	r0, r0
		return true;
	}

	return false;
}
   11f46:	2819      	cmp	r0, #25
   11f48:	bf8c      	ite	hi
   11f4a:	2000      	movhi	r0, #0
   11f4c:	2001      	movls	r0, #1
   11f4e:	4770      	bx	lr
   11f50:	0002561e 	.word	0x0002561e

00011f54 <at_parse_process_element>:
	return 0;
}

static int at_parse_process_element(const char **str, int index,
				    struct at_param_list *const list)
{
   11f54:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	const char *tmpstr = *str;
   11f58:	6805      	ldr	r5, [r0, #0]
{
   11f5a:	b0a3      	sub	sp, #140	; 0x8c
	const char *tmpstr = *str;
   11f5c:	9500      	str	r5, [sp, #0]
 * @retval true  If character is 0
 * @retval false If character is not 0
 */
static inline bool is_terminated(char chr)
{
	if (chr == AT_CMD_BUFFER_TERMINATOR) {
   11f5e:	782b      	ldrb	r3, [r5, #0]
{
   11f60:	4680      	mov	r8, r0
   11f62:	460f      	mov	r7, r1
   11f64:	4616      	mov	r6, r2
   11f66:	2b00      	cmp	r3, #0
   11f68:	f000 80bd 	beq.w	120e6 <at_parse_process_element+0x192>

	if (is_terminated(*tmpstr)) {
		return -1;
	}

	if (state == NOTIFICATION) {
   11f6c:	4b5f      	ldr	r3, [pc, #380]	; (120ec <at_parse_process_element+0x198>)
   11f6e:	781c      	ldrb	r4, [r3, #0]
   11f70:	2c05      	cmp	r4, #5
   11f72:	d110      	bne.n	11f96 <at_parse_process_element+0x42>
		const char *start_ptr = tmpstr++;
   11f74:	1c6b      	adds	r3, r5, #1
   11f76:	9300      	str	r3, [sp, #0]

		while (is_valid_notification_char(*tmpstr)) {
   11f78:	9a00      	ldr	r2, [sp, #0]
   11f7a:	7810      	ldrb	r0, [r2, #0]
   11f7c:	f7ff ffda 	bl	11f34 <is_valid_notification_char>
   11f80:	b930      	cbnz	r0, 11f90 <at_parse_process_element+0x3c>
			tmpstr++;
		}

		at_params_string_put(list, index, start_ptr,
   11f82:	1b53      	subs	r3, r2, r5

		while (isxdigit((int)*tmpstr)) {
			tmpstr++;
		}

		at_params_string_put(list, index, start_ptr,
   11f84:	462a      	mov	r2, r5
   11f86:	4639      	mov	r1, r7
   11f88:	4630      	mov	r0, r6
   11f8a:	f00f fae7 	bl	2155c <at_params_string_put>
   11f8e:	e01b      	b.n	11fc8 <at_parse_process_element+0x74>
			tmpstr++;
   11f90:	3201      	adds	r2, #1
   11f92:	9200      	str	r2, [sp, #0]
   11f94:	e7f0      	b.n	11f78 <at_parse_process_element+0x24>
	} else if (state == COMMAND) {
   11f96:	2c06      	cmp	r4, #6
   11f98:	d124      	bne.n	11fe4 <at_parse_process_element+0x90>
		skip_command_prefix(&tmpstr);
   11f9a:	4668      	mov	r0, sp
   11f9c:	f00f fa71 	bl	21482 <skip_command_prefix>
		while (is_valid_notification_char(*tmpstr)) {
   11fa0:	9a00      	ldr	r2, [sp, #0]
   11fa2:	7810      	ldrb	r0, [r2, #0]
   11fa4:	f7ff ffc6 	bl	11f34 <is_valid_notification_char>
   11fa8:	b9a8      	cbnz	r0, 11fd6 <at_parse_process_element+0x82>
		at_params_string_put(list, index, start_ptr,
   11faa:	1b53      	subs	r3, r2, r5
   11fac:	4639      	mov	r1, r7
   11fae:	462a      	mov	r2, r5
   11fb0:	4630      	mov	r0, r6
   11fb2:	f00f fad3 	bl	2155c <at_params_string_put>
		if ((*tmpstr == AT_CMD_SEPARATOR) &&
   11fb6:	9b00      	ldr	r3, [sp, #0]
   11fb8:	781a      	ldrb	r2, [r3, #0]
   11fba:	2a3d      	cmp	r2, #61	; 0x3d
   11fbc:	d10e      	bne.n	11fdc <at_parse_process_element+0x88>
   11fbe:	785a      	ldrb	r2, [r3, #1]
   11fc0:	2a3f      	cmp	r2, #63	; 0x3f
   11fc2:	d101      	bne.n	11fc8 <at_parse_process_element+0x74>
			tmpstr += 2;
   11fc4:	3302      	adds	r3, #2
			tmpstr++;
   11fc6:	9300      	str	r3, [sp, #0]
				     tmpstr - start_ptr);
	}

	*str = tmpstr;
	return 0;
   11fc8:	2000      	movs	r0, #0
	*str = tmpstr;
   11fca:	9b00      	ldr	r3, [sp, #0]
   11fcc:	f8c8 3000 	str.w	r3, [r8]
}
   11fd0:	b023      	add	sp, #140	; 0x8c
   11fd2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			tmpstr++;
   11fd6:	3201      	adds	r2, #1
   11fd8:	9200      	str	r2, [sp, #0]
   11fda:	e7e1      	b.n	11fa0 <at_parse_process_element+0x4c>
		} else if (*tmpstr == AT_CMD_READ_TEST_IDENTIFIER) {
   11fdc:	2a3f      	cmp	r2, #63	; 0x3f
   11fde:	d1f3      	bne.n	11fc8 <at_parse_process_element+0x74>
			tmpstr++;
   11fe0:	3301      	adds	r3, #1
   11fe2:	e7f0      	b.n	11fc6 <at_parse_process_element+0x72>
	} else if (state == OPTIONAL) {
   11fe4:	2c07      	cmp	r4, #7
   11fe6:	d103      	bne.n	11ff0 <at_parse_process_element+0x9c>
		at_params_empty_put(list, index);
   11fe8:	4610      	mov	r0, r2
   11fea:	f00f fa8e 	bl	2150a <at_params_empty_put>
   11fee:	e7eb      	b.n	11fc8 <at_parse_process_element+0x74>
	} else if (state == STRING) {
   11ff0:	2c02      	cmp	r4, #2
   11ff2:	d112      	bne.n	1201a <at_parse_process_element+0xc6>
		while (!is_dblquote(*tmpstr) && !is_terminated(*tmpstr) &&
   11ff4:	9a00      	ldr	r2, [sp, #0]
   11ff6:	7810      	ldrb	r0, [r2, #0]
 * @retval true  If character is "
 * @retval false If character is something else
 */
static inline bool is_dblquote(char chr)
{
	if (chr == '"') {
   11ff8:	2822      	cmp	r0, #34	; 0x22
   11ffa:	d003      	beq.n	12004 <at_parse_process_element+0xb0>
	if (chr == AT_CMD_BUFFER_TERMINATOR) {
   11ffc:	b110      	cbz	r0, 12004 <at_parse_process_element+0xb0>
		       !is_lfcr(*tmpstr)) {
   11ffe:	f00f fa37 	bl	21470 <is_lfcr>
		while (!is_dblquote(*tmpstr) && !is_terminated(*tmpstr) &&
   12002:	b138      	cbz	r0, 12014 <at_parse_process_element+0xc0>
		at_params_string_put(list, index, start_ptr,
   12004:	1b53      	subs	r3, r2, r5
   12006:	4639      	mov	r1, r7
   12008:	462a      	mov	r2, r5
   1200a:	4630      	mov	r0, r6
   1200c:	f00f faa6 	bl	2155c <at_params_string_put>
		tmpstr++;
   12010:	9b00      	ldr	r3, [sp, #0]
   12012:	e7e5      	b.n	11fe0 <at_parse_process_element+0x8c>
			tmpstr++;
   12014:	3201      	adds	r2, #1
   12016:	9200      	str	r2, [sp, #0]
   12018:	e7ec      	b.n	11ff4 <at_parse_process_element+0xa0>
	} else if (state == ARRAY) {
   1201a:	2c01      	cmp	r4, #1
   1201c:	d13c      	bne.n	12098 <at_parse_process_element+0x144>
		tmparray[i++] = (u32_t)strtoul(tmpstr, &next, 10);
   1201e:	4628      	mov	r0, r5
   12020:	220a      	movs	r2, #10
   12022:	a901      	add	r1, sp, #4
   12024:	f00c fec6 	bl	1edb4 <strtoul>
		tmpstr = next;
   12028:	9b01      	ldr	r3, [sp, #4]
	if ((chr == AT_PARAM_SEPARATOR) || (chr == AT_RSP_SEPARATOR) ||
   1202a:	4d31      	ldr	r5, [pc, #196]	; (120f0 <at_parse_process_element+0x19c>)
		tmparray[i++] = (u32_t)strtoul(tmpstr, &next, 10);
   1202c:	9002      	str	r0, [sp, #8]
		tmpstr = next;
   1202e:	9300      	str	r3, [sp, #0]
		while (!is_array_stop(*tmpstr) && !is_terminated(*tmpstr)) {
   12030:	9800      	ldr	r0, [sp, #0]
   12032:	7803      	ldrb	r3, [r0, #0]
 * @retval true  If character is )
 * @retval false If character is something else
 */
static inline bool is_array_stop(char chr)
{
	if (chr == ')') {
   12034:	2b29      	cmp	r3, #41	; 0x29
   12036:	d028      	beq.n	1208a <at_parse_process_element+0x136>
	if (chr == AT_CMD_BUFFER_TERMINATOR) {
   12038:	b33b      	cbz	r3, 1208a <at_parse_process_element+0x136>
	if ((chr == AT_PARAM_SEPARATOR) || (chr == AT_RSP_SEPARATOR) ||
   1203a:	3b2c      	subs	r3, #44	; 0x2c
   1203c:	b2db      	uxtb	r3, r3
   1203e:	3001      	adds	r0, #1
   12040:	2b11      	cmp	r3, #17
				tmparray[i++] =
   12042:	9000      	str	r0, [sp, #0]
   12044:	d803      	bhi.n	1204e <at_parse_process_element+0xfa>
   12046:	fa25 f303 	lsr.w	r3, r5, r3
   1204a:	07db      	lsls	r3, r3, #31
   1204c:	d408      	bmi.n	12060 <at_parse_process_element+0x10c>
				tmpstr++;
   1204e:	46a1      	mov	r9, r4
   12050:	e004      	b.n	1205c <at_parse_process_element+0x108>
					tmpstr = next;
   12052:	9b01      	ldr	r3, [sp, #4]
			if (i == AT_CMD_MAX_ARRAY_SIZE) {
   12054:	f1b9 0f20 	cmp.w	r9, #32
					tmpstr = next;
   12058:	9300      	str	r3, [sp, #0]
			if (i == AT_CMD_MAX_ARRAY_SIZE) {
   1205a:	d015      	beq.n	12088 <at_parse_process_element+0x134>
				tmpstr++;
   1205c:	464c      	mov	r4, r9
   1205e:	e7e7      	b.n	12030 <at_parse_process_element+0xdc>
					(u32_t)strtoul(++tmpstr, &next, 10);
   12060:	220a      	movs	r2, #10
   12062:	a901      	add	r1, sp, #4
   12064:	f00c fea6 	bl	1edb4 <strtoul>
				tmparray[i++] =
   12068:	ab22      	add	r3, sp, #136	; 0x88
   1206a:	f104 0901 	add.w	r9, r4, #1
   1206e:	eb03 0484 	add.w	r4, r3, r4, lsl #2
   12072:	f844 0c80 	str.w	r0, [r4, #-128]
				if (strlen(tmpstr) == strlen(next)) {
   12076:	9800      	ldr	r0, [sp, #0]
   12078:	f7fa fefe 	bl	ce78 <strlen>
   1207c:	4604      	mov	r4, r0
   1207e:	9801      	ldr	r0, [sp, #4]
   12080:	f7fa fefa 	bl	ce78 <strlen>
   12084:	4284      	cmp	r4, r0
   12086:	d1e4      	bne.n	12052 <at_parse_process_element+0xfe>
   12088:	464c      	mov	r4, r9
		at_params_array_put(list, index, tmparray, i * sizeof(u32_t));
   1208a:	00a3      	lsls	r3, r4, #2
   1208c:	aa02      	add	r2, sp, #8
   1208e:	4639      	mov	r1, r7
   12090:	4630      	mov	r0, r6
   12092:	f00f fa89 	bl	215a8 <at_params_array_put>
   12096:	e7bb      	b.n	12010 <at_parse_process_element+0xbc>
	} else if (state == NUMBER) {
   12098:	2c03      	cmp	r4, #3
   1209a:	d115      	bne.n	120c8 <at_parse_process_element+0x174>
		int value = (u32_t)strtoul(tmpstr, &next, 10);
   1209c:	220a      	movs	r2, #10
   1209e:	a902      	add	r1, sp, #8
   120a0:	4628      	mov	r0, r5
   120a2:	f00c fe87 	bl	1edb4 <strtoul>
		tmpstr = next;
   120a6:	9b02      	ldr	r3, [sp, #8]
		if (value <= USHRT_MAX) {
   120a8:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
		int value = (u32_t)strtoul(tmpstr, &next, 10);
   120ac:	4602      	mov	r2, r0
		tmpstr = next;
   120ae:	9300      	str	r3, [sp, #0]
		if (value <= USHRT_MAX) {
   120b0:	da05      	bge.n	120be <at_parse_process_element+0x16a>
			at_params_short_put(list, index, (u16_t)value);
   120b2:	b282      	uxth	r2, r0
   120b4:	4639      	mov	r1, r7
   120b6:	4630      	mov	r0, r6
   120b8:	f00f fa12 	bl	214e0 <at_params_short_put>
   120bc:	e784      	b.n	11fc8 <at_parse_process_element+0x74>
			at_params_int_put(list, index, value);
   120be:	4639      	mov	r1, r7
   120c0:	4630      	mov	r0, r6
   120c2:	f00f fa36 	bl	21532 <at_params_int_put>
   120c6:	e77f      	b.n	11fc8 <at_parse_process_element+0x74>
	} else if (state == SMS_PDU) {
   120c8:	2c04      	cmp	r4, #4
   120ca:	f47f af7d 	bne.w	11fc8 <at_parse_process_element+0x74>
		while (isxdigit((int)*tmpstr)) {
   120ce:	4909      	ldr	r1, [pc, #36]	; (120f4 <at_parse_process_element+0x1a0>)
   120d0:	9b00      	ldr	r3, [sp, #0]
   120d2:	781a      	ldrb	r2, [r3, #0]
   120d4:	5c52      	ldrb	r2, [r2, r1]
   120d6:	f012 0f44 	tst.w	r2, #68	; 0x44
   120da:	d101      	bne.n	120e0 <at_parse_process_element+0x18c>
		at_params_string_put(list, index, start_ptr,
   120dc:	1b5b      	subs	r3, r3, r5
   120de:	e751      	b.n	11f84 <at_parse_process_element+0x30>
			tmpstr++;
   120e0:	3301      	adds	r3, #1
   120e2:	9300      	str	r3, [sp, #0]
   120e4:	e7f4      	b.n	120d0 <at_parse_process_element+0x17c>
		return -1;
   120e6:	f04f 30ff 	mov.w	r0, #4294967295
   120ea:	e771      	b.n	11fd0 <at_parse_process_element+0x7c>
   120ec:	20022687 	.word	0x20022687
   120f0:	00024001 	.word	0x00024001
   120f4:	0002561e 	.word	0x0002561e

000120f8 <is_command>:
 *
 * @retval true  If the string is an AT command
 * @retval false Otherwise
 */
static inline bool is_command(const char *str)
{
   120f8:	b510      	push	{r4, lr}
   120fa:	4604      	mov	r4, r0
	if (strlen(str) < 2) {
   120fc:	f7fa febc 	bl	ce78 <strlen>
   12100:	2801      	cmp	r0, #1
   12102:	d922      	bls.n	1214a <is_command+0x52>
		return false;
	}

	if ((toupper(str[0]) != 'A') || (toupper(str[1]) != 'T')) {
   12104:	7821      	ldrb	r1, [r4, #0]
   12106:	4b13      	ldr	r3, [pc, #76]	; (12154 <is_command+0x5c>)
   12108:	5cca      	ldrb	r2, [r1, r3]
   1210a:	f002 0203 	and.w	r2, r2, #3
   1210e:	2a02      	cmp	r2, #2
   12110:	bf08      	it	eq
   12112:	3920      	subeq	r1, #32
   12114:	2941      	cmp	r1, #65	; 0x41
   12116:	461a      	mov	r2, r3
   12118:	d117      	bne.n	1214a <is_command+0x52>
   1211a:	7863      	ldrb	r3, [r4, #1]
   1211c:	5cd2      	ldrb	r2, [r2, r3]
   1211e:	f002 0203 	and.w	r2, r2, #3
   12122:	2a02      	cmp	r2, #2
   12124:	bf08      	it	eq
   12126:	3b20      	subeq	r3, #32
   12128:	2b54      	cmp	r3, #84	; 0x54
   1212a:	d10e      	bne.n	1214a <is_command+0x52>
	}

	/* Third character has be one of the command special characters.
	 * The special case is a lone "AT" command.
	 */
	if ((str[2] == AT_STANDARD_NOTIFICATION_PREFIX) ||
   1212c:	78a2      	ldrb	r2, [r4, #2]
   1212e:	2a25      	cmp	r2, #37	; 0x25
   12130:	d00d      	beq.n	1214e <is_command+0x56>
	    (str[2] == AT_PROP_NOTIFICATION_PREFX) ||
   12132:	f002 03f7 	and.w	r3, r2, #247	; 0xf7
   12136:	2b23      	cmp	r3, #35	; 0x23
   12138:	d009      	beq.n	1214e <is_command+0x56>
	    (str[2] == AT_CUSTOM_COMMAND_PREFX) ||
	    is_lfcr(str[2]) || is_terminated(str[2])) {
   1213a:	4610      	mov	r0, r2
   1213c:	f00f f998 	bl	21470 <is_lfcr>
	    (str[2] == AT_CUSTOM_COMMAND_PREFX) ||
   12140:	b910      	cbnz	r0, 12148 <is_command+0x50>
	if (chr == AT_CMD_BUFFER_TERMINATOR) {
   12142:	fab2 f082 	clz	r0, r2
   12146:	0940      	lsrs	r0, r0, #5
		return true;
	}

	return false;
}
   12148:	bd10      	pop	{r4, pc}
	return false;
   1214a:	2000      	movs	r0, #0
   1214c:	e7fc      	b.n	12148 <is_command+0x50>
		return true;
   1214e:	2001      	movs	r0, #1
   12150:	e7fa      	b.n	12148 <is_command+0x50>
   12152:	bf00      	nop
   12154:	0002561e 	.word	0x0002561e

00012158 <at_parse_detect_type>:
{
   12158:	b570      	push	{r4, r5, r6, lr}
	const char *tmpstr = *str;
   1215a:	6804      	ldr	r4, [r0, #0]
	if ((index == 0) && is_notification(*tmpstr)) {
   1215c:	2900      	cmp	r1, #0
{
   1215e:	4606      	mov	r6, r0
   12160:	7822      	ldrb	r2, [r4, #0]
	if ((index == 0) && is_notification(*tmpstr)) {
   12162:	d141      	bne.n	121e8 <at_parse_detect_type+0x90>
	if ((chr == AT_STANDARD_NOTIFICATION_PREFIX) ||
   12164:	2a2b      	cmp	r2, #43	; 0x2b
   12166:	4d29      	ldr	r5, [pc, #164]	; (1220c <at_parse_detect_type+0xb4>)
   12168:	d001      	beq.n	1216e <at_parse_detect_type+0x16>
   1216a:	2a25      	cmp	r2, #37	; 0x25
   1216c:	d104      	bne.n	12178 <at_parse_detect_type+0x20>
	state = new_state;
   1216e:	2305      	movs	r3, #5
   12170:	702b      	strb	r3, [r5, #0]
	return 0;
   12172:	2000      	movs	r0, #0
	*str = tmpstr;
   12174:	6034      	str	r4, [r6, #0]
}
   12176:	bd70      	pop	{r4, r5, r6, pc}
	} else if ((index == 0) && is_command(tmpstr)) {
   12178:	4620      	mov	r0, r4
   1217a:	f7ff ffbd 	bl	120f8 <is_command>
   1217e:	b388      	cbz	r0, 121e4 <at_parse_detect_type+0x8c>
	state = new_state;
   12180:	2306      	movs	r3, #6
   12182:	e7f5      	b.n	12170 <at_parse_detect_type+0x18>
	if (chr == '"') {
   12184:	2a22      	cmp	r2, #34	; 0x22
   12186:	d006      	beq.n	12196 <at_parse_detect_type+0x3e>
	if (chr == '(') {
   12188:	2a28      	cmp	r2, #40	; 0x28
   1218a:	d109      	bne.n	121a0 <at_parse_detect_type+0x48>
   1218c:	2201      	movs	r2, #1
   1218e:	4b1f      	ldr	r3, [pc, #124]	; (1220c <at_parse_detect_type+0xb4>)
		tmpstr++;
   12190:	4414      	add	r4, r2
	state = new_state;
   12192:	701a      	strb	r2, [r3, #0]
		tmpstr++;
   12194:	e7ed      	b.n	12172 <at_parse_detect_type+0x1a>
	state = new_state;
   12196:	2202      	movs	r2, #2
   12198:	4b1c      	ldr	r3, [pc, #112]	; (1220c <at_parse_detect_type+0xb4>)
		tmpstr++;
   1219a:	3401      	adds	r4, #1
	state = new_state;
   1219c:	701a      	strb	r2, [r3, #0]
		tmpstr++;
   1219e:	e7e8      	b.n	12172 <at_parse_detect_type+0x1a>
	} else if (is_lfcr(*tmpstr) && (state == NUMBER)) {
   121a0:	4610      	mov	r0, r2
   121a2:	f00f f965 	bl	21470 <is_lfcr>
   121a6:	b170      	cbz	r0, 121c6 <at_parse_detect_type+0x6e>
   121a8:	4918      	ldr	r1, [pc, #96]	; (1220c <at_parse_detect_type+0xb4>)
   121aa:	7808      	ldrb	r0, [r1, #0]
   121ac:	2803      	cmp	r0, #3
   121ae:	d108      	bne.n	121c2 <at_parse_detect_type+0x6a>
		while (is_lfcr(*tmpstr)) {
   121b0:	f814 0f01 	ldrb.w	r0, [r4, #1]!
   121b4:	f00f f95c 	bl	21470 <is_lfcr>
   121b8:	2800      	cmp	r0, #0
   121ba:	d1f9      	bne.n	121b0 <at_parse_detect_type+0x58>
	state = new_state;
   121bc:	2304      	movs	r3, #4
   121be:	700b      	strb	r3, [r1, #0]
   121c0:	e7d7      	b.n	12172 <at_parse_detect_type+0x1a>
	} else if (is_lfcr(*tmpstr) && (state == OPTIONAL)) {
   121c2:	2807      	cmp	r0, #7
   121c4:	d0d5      	beq.n	12172 <at_parse_detect_type+0x1a>
	if ((chr == AT_PARAM_SEPARATOR) || (chr == AT_RSP_SEPARATOR) ||
   121c6:	3a2c      	subs	r2, #44	; 0x2c
   121c8:	b2d2      	uxtb	r2, r2
   121ca:	2a11      	cmp	r2, #17
   121cc:	d807      	bhi.n	121de <at_parse_detect_type+0x86>
   121ce:	4b10      	ldr	r3, [pc, #64]	; (12210 <at_parse_detect_type+0xb8>)
   121d0:	fa23 f202 	lsr.w	r2, r3, r2
   121d4:	07d3      	lsls	r3, r2, #31
   121d6:	d502      	bpl.n	121de <at_parse_detect_type+0x86>
	state = new_state;
   121d8:	4b0c      	ldr	r3, [pc, #48]	; (1220c <at_parse_detect_type+0xb4>)
   121da:	2207      	movs	r2, #7
   121dc:	e013      	b.n	12206 <at_parse_detect_type+0xae>
		return -1;
   121de:	f04f 30ff 	mov.w	r0, #4294967295
   121e2:	e7c8      	b.n	12176 <at_parse_detect_type+0x1e>
	state = new_state;
   121e4:	2302      	movs	r3, #2
   121e6:	e7c3      	b.n	12170 <at_parse_detect_type+0x18>
	} else if ((index > 0) && is_notification(*tmpstr)) {
   121e8:	dd03      	ble.n	121f2 <at_parse_detect_type+0x9a>
	if ((chr == AT_STANDARD_NOTIFICATION_PREFIX) ||
   121ea:	2a2b      	cmp	r2, #43	; 0x2b
   121ec:	d0f7      	beq.n	121de <at_parse_detect_type+0x86>
   121ee:	2a25      	cmp	r2, #37	; 0x25
   121f0:	d0f5      	beq.n	121de <at_parse_detect_type+0x86>
	if (isdigit(chr) || (chr == '-') || (chr == '+')) {
   121f2:	4b08      	ldr	r3, [pc, #32]	; (12214 <at_parse_detect_type+0xbc>)
   121f4:	5cd3      	ldrb	r3, [r2, r3]
   121f6:	0759      	lsls	r1, r3, #29
   121f8:	d403      	bmi.n	12202 <at_parse_detect_type+0xaa>
   121fa:	2a2d      	cmp	r2, #45	; 0x2d
   121fc:	d001      	beq.n	12202 <at_parse_detect_type+0xaa>
   121fe:	2a2b      	cmp	r2, #43	; 0x2b
   12200:	d1c0      	bne.n	12184 <at_parse_detect_type+0x2c>
	state = new_state;
   12202:	2203      	movs	r2, #3
   12204:	4b01      	ldr	r3, [pc, #4]	; (1220c <at_parse_detect_type+0xb4>)
   12206:	701a      	strb	r2, [r3, #0]
   12208:	e7b3      	b.n	12172 <at_parse_detect_type+0x1a>
   1220a:	bf00      	nop
   1220c:	20022687 	.word	0x20022687
   12210:	00024001 	.word	0x00024001
   12214:	0002561e 	.word	0x0002561e

00012218 <at_parser_max_params_from_str>:

int at_parser_max_params_from_str(const char *at_params_str,
				  char **next_param_str,
				  struct at_param_list *const list,
				  size_t max_params_count)
{
   12218:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1221c:	4688      	mov	r8, r1
   1221e:	4616      	mov	r6, r2
   12220:	461f      	mov	r7, r3
	int err = 0;

	if (at_params_str == NULL || list == NULL || list->params == NULL) {
   12222:	4604      	mov	r4, r0
   12224:	2800      	cmp	r0, #0
   12226:	d07e      	beq.n	12326 <at_parser_max_params_from_str+0x10e>
   12228:	2a00      	cmp	r2, #0
   1222a:	d07c      	beq.n	12326 <at_parser_max_params_from_str+0x10e>
   1222c:	6853      	ldr	r3, [r2, #4]
   1222e:	2b00      	cmp	r3, #0
   12230:	d079      	beq.n	12326 <at_parser_max_params_from_str+0x10e>
	state = IDLE;
   12232:	2500      	movs	r5, #0
		return -EINVAL;
	}

	at_params_list_clear(list);
   12234:	4610      	mov	r0, r2
   12236:	f000 f8eb 	bl	12410 <at_params_list_clear>

	max_params_count = MIN(max_params_count, list->param_count);
   1223a:	6832      	ldr	r2, [r6, #0]
	const char *str = *at_params_str;
   1223c:	9401      	str	r4, [sp, #4]
	max_params_count = MIN(max_params_count, list->param_count);
   1223e:	4297      	cmp	r7, r2
   12240:	bf28      	it	cs
   12242:	4617      	movcs	r7, r2
	int index = 0;
   12244:	462c      	mov	r4, r5
	state = IDLE;
   12246:	4b39      	ldr	r3, [pc, #228]	; (1232c <at_parser_max_params_from_str+0x114>)
		if (isspace((int)*str)) {
   12248:	f8df 90e4 	ldr.w	r9, [pc, #228]	; 12330 <at_parser_max_params_from_str+0x118>
	if ((chr == AT_PARAM_SEPARATOR) || (chr == AT_RSP_SEPARATOR) ||
   1224c:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 12334 <at_parser_max_params_from_str+0x11c>
	state = IDLE;
   12250:	701d      	strb	r5, [r3, #0]
	while ((!is_terminated(*str)) && (index < max_params)) {
   12252:	9b01      	ldr	r3, [sp, #4]
   12254:	781a      	ldrb	r2, [r3, #0]
	if (chr == AT_CMD_BUFFER_TERMINATOR) {
   12256:	2a00      	cmp	r2, #0
   12258:	d04b      	beq.n	122f2 <at_parser_max_params_from_str+0xda>
   1225a:	42a7      	cmp	r7, r4
   1225c:	d949      	bls.n	122f2 <at_parser_max_params_from_str+0xda>
		if (isspace((int)*str)) {
   1225e:	f812 2009 	ldrb.w	r2, [r2, r9]
		if (at_parse_detect_type(&str, index) == -1) {
   12262:	a801      	add	r0, sp, #4
		if (isspace((int)*str)) {
   12264:	0711      	lsls	r1, r2, #28
			str++;
   12266:	bf48      	it	mi
   12268:	3301      	addmi	r3, #1
		if (at_parse_detect_type(&str, index) == -1) {
   1226a:	4621      	mov	r1, r4
			str++;
   1226c:	bf48      	it	mi
   1226e:	9301      	strmi	r3, [sp, #4]
		if (at_parse_detect_type(&str, index) == -1) {
   12270:	f7ff ff72 	bl	12158 <at_parse_detect_type>
   12274:	1c42      	adds	r2, r0, #1
   12276:	d03c      	beq.n	122f2 <at_parser_max_params_from_str+0xda>
		if (at_parse_process_element(&str, index, list) == -1) {
   12278:	4632      	mov	r2, r6
   1227a:	4621      	mov	r1, r4
   1227c:	a801      	add	r0, sp, #4
   1227e:	f7ff fe69 	bl	11f54 <at_parse_process_element>
   12282:	1c43      	adds	r3, r0, #1
   12284:	d035      	beq.n	122f2 <at_parser_max_params_from_str+0xda>
		if (is_separator(*str)) {
   12286:	9b01      	ldr	r3, [sp, #4]
	if ((chr == AT_PARAM_SEPARATOR) || (chr == AT_RSP_SEPARATOR) ||
   12288:	781a      	ldrb	r2, [r3, #0]
   1228a:	3a2c      	subs	r2, #44	; 0x2c
   1228c:	b2d2      	uxtb	r2, r2
   1228e:	2a11      	cmp	r2, #17
   12290:	d81a      	bhi.n	122c8 <at_parser_max_params_from_str+0xb0>
   12292:	fa2a f202 	lsr.w	r2, sl, r2
   12296:	07d1      	lsls	r1, r2, #31
   12298:	d516      	bpl.n	122c8 <at_parser_max_params_from_str+0xb0>
			if (is_lfcr(*(str + 1))) {
   1229a:	7858      	ldrb	r0, [r3, #1]
   1229c:	f00f f8e8 	bl	21470 <is_lfcr>
   122a0:	b178      	cbz	r0, 122c2 <at_parser_max_params_from_str+0xaa>
				index++;
   122a2:	3401      	adds	r4, #1
				if (index == max_params) {
   122a4:	42bc      	cmp	r4, r7
   122a6:	d039      	beq.n	1231c <at_parser_max_params_from_str+0x104>
				if (at_parse_detect_type(&str, index) == -1) {
   122a8:	4621      	mov	r1, r4
   122aa:	a801      	add	r0, sp, #4
   122ac:	f7ff ff54 	bl	12158 <at_parse_detect_type>
   122b0:	1c42      	adds	r2, r0, #1
   122b2:	d01e      	beq.n	122f2 <at_parser_max_params_from_str+0xda>
				if (at_parse_process_element(&str, index,
   122b4:	4632      	mov	r2, r6
   122b6:	4621      	mov	r1, r4
   122b8:	a801      	add	r0, sp, #4
   122ba:	f7ff fe4b 	bl	11f54 <at_parse_process_element>
   122be:	1c43      	adds	r3, r0, #1
   122c0:	d017      	beq.n	122f2 <at_parser_max_params_from_str+0xda>
			str++;
   122c2:	9b01      	ldr	r3, [sp, #4]
   122c4:	3301      	adds	r3, #1
   122c6:	9301      	str	r3, [sp, #4]
		if (is_lfcr(*str)) {
   122c8:	9a01      	ldr	r2, [sp, #4]
   122ca:	7810      	ldrb	r0, [r2, #0]
   122cc:	f00f f8d0 	bl	21470 <is_lfcr>
   122d0:	b1f8      	cbz	r0, 12312 <at_parser_max_params_from_str+0xfa>
   122d2:	3201      	adds	r2, #1
			while (is_lfcr(str[++i])) {
   122d4:	7811      	ldrb	r1, [r2, #0]
   122d6:	4693      	mov	fp, r2
   122d8:	4608      	mov	r0, r1
   122da:	3201      	adds	r2, #1
   122dc:	f00f f8c8 	bl	21470 <is_lfcr>
   122e0:	2800      	cmp	r0, #0
   122e2:	d1f7      	bne.n	122d4 <at_parser_max_params_from_str+0xbc>
	if (chr == AT_CMD_BUFFER_TERMINATOR) {
   122e4:	b119      	cbz	r1, 122ee <at_parser_max_params_from_str+0xd6>
	if ((chr == AT_STANDARD_NOTIFICATION_PREFIX) ||
   122e6:	292b      	cmp	r1, #43	; 0x2b
   122e8:	d001      	beq.n	122ee <at_parser_max_params_from_str+0xd6>
   122ea:	2925      	cmp	r1, #37	; 0x25
   122ec:	d111      	bne.n	12312 <at_parser_max_params_from_str+0xfa>
				str += i;
   122ee:	f8cd b004 	str.w	fp, [sp, #4]
	*at_params_str = str;
   122f2:	9b01      	ldr	r3, [sp, #4]
	if (oversized) {
   122f4:	b9a5      	cbnz	r5, 12320 <at_parser_max_params_from_str+0x108>
	if (chr == AT_CMD_BUFFER_TERMINATOR) {
   122f6:	781a      	ldrb	r2, [r3, #0]
		return -EAGAIN;
   122f8:	2a00      	cmp	r2, #0
   122fa:	bf0c      	ite	eq
   122fc:	2000      	moveq	r0, #0
   122fe:	f06f 000a 	mvnne.w	r0, #10

	err = at_parse_param(&at_params_str, list, max_params_count);

	if (next_param_str) {
   12302:	f1b8 0f00 	cmp.w	r8, #0
   12306:	d001      	beq.n	1230c <at_parser_max_params_from_str+0xf4>
		*next_param_str = (char *)at_params_str;
   12308:	f8c8 3000 	str.w	r3, [r8]
	}

	return err;
}
   1230c:	b003      	add	sp, #12
   1230e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		index++;
   12312:	3401      	adds	r4, #1
			oversized = true;
   12314:	42bc      	cmp	r4, r7
   12316:	bf08      	it	eq
   12318:	2501      	moveq	r5, #1
   1231a:	e79a      	b.n	12252 <at_parser_max_params_from_str+0x3a>
					oversized = true;
   1231c:	4605      	mov	r5, r0
   1231e:	e7e8      	b.n	122f2 <at_parser_max_params_from_str+0xda>
		return -E2BIG;
   12320:	f06f 0006 	mvn.w	r0, #6
   12324:	e7ed      	b.n	12302 <at_parser_max_params_from_str+0xea>
		return -EINVAL;
   12326:	f06f 0015 	mvn.w	r0, #21
   1232a:	e7ef      	b.n	1230c <at_parser_max_params_from_str+0xf4>
   1232c:	20022687 	.word	0x20022687
   12330:	0002561e 	.word	0x0002561e
   12334:	00024001 	.word	0x00024001

00012338 <at_params_get>:
}

/* Internal function. Parameter cannot be null. */
static struct at_param *at_params_get(const struct at_param_list *list,
				      size_t index)
{
   12338:	b538      	push	{r3, r4, r5, lr}
   1233a:	460c      	mov	r4, r1
	__ASSERT(list != NULL, "Parameter list cannot be NULL.");
   1233c:	4605      	mov	r5, r0
   1233e:	b960      	cbnz	r0, 1235a <at_params_get+0x22>
   12340:	490a      	ldr	r1, [pc, #40]	; (1236c <at_params_get+0x34>)
   12342:	232b      	movs	r3, #43	; 0x2b
   12344:	4a0a      	ldr	r2, [pc, #40]	; (12370 <at_params_get+0x38>)
   12346:	480b      	ldr	r0, [pc, #44]	; (12374 <at_params_get+0x3c>)
   12348:	f00d fd47 	bl	1fdda <printk>
   1234c:	480a      	ldr	r0, [pc, #40]	; (12378 <at_params_get+0x40>)
   1234e:	f00d fd44 	bl	1fdda <printk>
   12352:	212b      	movs	r1, #43	; 0x2b
   12354:	4806      	ldr	r0, [pc, #24]	; (12370 <at_params_get+0x38>)
   12356:	f00d fd86 	bl	1fe66 <assert_post_action>

	if (index >= list->param_count) {
   1235a:	682b      	ldr	r3, [r5, #0]
   1235c:	42a3      	cmp	r3, r4
		return NULL;
	}

	struct at_param *param = list->params;

	return &param[index];
   1235e:	bf85      	ittet	hi
   12360:	230c      	movhi	r3, #12
   12362:	6868      	ldrhi	r0, [r5, #4]
		return NULL;
   12364:	2000      	movls	r0, #0
	return &param[index];
   12366:	fb03 0004 	mlahi	r0, r3, r4, r0
}
   1236a:	bd38      	pop	{r3, r4, r5, pc}
   1236c:	00024a34 	.word	0x00024a34
   12370:	00024a06 	.word	0x00024a06
   12374:	00023451 	.word	0x00023451
   12378:	00024a48 	.word	0x00024a48

0001237c <at_param_size>:

/* Internal function. Parameter cannot be null. */
static size_t at_param_size(const struct at_param *param)
{
   1237c:	b510      	push	{r4, lr}
	__ASSERT(param != NULL, "Parameter cannot be NULL.");
   1237e:	4604      	mov	r4, r0
   12380:	b960      	cbnz	r0, 1239c <at_param_size+0x20>
   12382:	490e      	ldr	r1, [pc, #56]	; (123bc <at_param_size+0x40>)
   12384:	2339      	movs	r3, #57	; 0x39
   12386:	4a0e      	ldr	r2, [pc, #56]	; (123c0 <at_param_size+0x44>)
   12388:	480e      	ldr	r0, [pc, #56]	; (123c4 <at_param_size+0x48>)
   1238a:	f00d fd26 	bl	1fdda <printk>
   1238e:	480e      	ldr	r0, [pc, #56]	; (123c8 <at_param_size+0x4c>)
   12390:	f00d fd23 	bl	1fdda <printk>
   12394:	2139      	movs	r1, #57	; 0x39
   12396:	480a      	ldr	r0, [pc, #40]	; (123c0 <at_param_size+0x44>)
   12398:	f00d fd65 	bl	1fe66 <assert_post_action>

	if (param->type == AT_PARAM_TYPE_NUM_SHORT) {
   1239c:	7823      	ldrb	r3, [r4, #0]
   1239e:	2b01      	cmp	r3, #1
   123a0:	d006      	beq.n	123b0 <at_param_size+0x34>
		return sizeof(u16_t);
	} else if (param->type == AT_PARAM_TYPE_NUM_INT) {
   123a2:	2b02      	cmp	r3, #2
   123a4:	d006      	beq.n	123b4 <at_param_size+0x38>
		return sizeof(u32_t);
	} else if ((param->type == AT_PARAM_TYPE_STRING) ||
   123a6:	3b03      	subs	r3, #3
   123a8:	2b01      	cmp	r3, #1
   123aa:	d805      	bhi.n	123b8 <at_param_size+0x3c>
		   (param->type == AT_PARAM_TYPE_ARRAY)) {
		return param->size;
   123ac:	6860      	ldr	r0, [r4, #4]
	}

	return 0;
}
   123ae:	bd10      	pop	{r4, pc}
		return sizeof(u16_t);
   123b0:	2002      	movs	r0, #2
   123b2:	e7fc      	b.n	123ae <at_param_size+0x32>
		return sizeof(u32_t);
   123b4:	2004      	movs	r0, #4
   123b6:	e7fa      	b.n	123ae <at_param_size+0x32>
	return 0;
   123b8:	2000      	movs	r0, #0
   123ba:	e7f8      	b.n	123ae <at_param_size+0x32>
   123bc:	000249d5 	.word	0x000249d5
   123c0:	00024a06 	.word	0x00024a06
   123c4:	00023451 	.word	0x00023451
   123c8:	000249ea 	.word	0x000249ea

000123cc <at_param_clear>:
{
   123cc:	b510      	push	{r4, lr}
	__ASSERT(param != NULL, "Parameter cannot be NULL.");
   123ce:	4604      	mov	r4, r0
   123d0:	b960      	cbnz	r0, 123ec <at_param_clear+0x20>
   123d2:	490b      	ldr	r1, [pc, #44]	; (12400 <at_param_clear+0x34>)
   123d4:	231d      	movs	r3, #29
   123d6:	4a0b      	ldr	r2, [pc, #44]	; (12404 <at_param_clear+0x38>)
   123d8:	480b      	ldr	r0, [pc, #44]	; (12408 <at_param_clear+0x3c>)
   123da:	f00d fcfe 	bl	1fdda <printk>
   123de:	480b      	ldr	r0, [pc, #44]	; (1240c <at_param_clear+0x40>)
   123e0:	f00d fcfb 	bl	1fdda <printk>
   123e4:	211d      	movs	r1, #29
   123e6:	4807      	ldr	r0, [pc, #28]	; (12404 <at_param_clear+0x38>)
   123e8:	f00d fd3d 	bl	1fe66 <assert_post_action>
	if ((param->type == AT_PARAM_TYPE_STRING) ||
   123ec:	7823      	ldrb	r3, [r4, #0]
   123ee:	3b03      	subs	r3, #3
   123f0:	2b01      	cmp	r3, #1
   123f2:	d802      	bhi.n	123fa <at_param_clear+0x2e>
		k_free(param->value.str_val);
   123f4:	68a0      	ldr	r0, [r4, #8]
   123f6:	f00f f96d 	bl	216d4 <k_free>
	param->value.int_val = 0;
   123fa:	2300      	movs	r3, #0
   123fc:	60a3      	str	r3, [r4, #8]
}
   123fe:	bd10      	pop	{r4, pc}
   12400:	000249d5 	.word	0x000249d5
   12404:	00024a06 	.word	0x00024a06
   12408:	00023451 	.word	0x00023451
   1240c:	000249ea 	.word	0x000249ea

00012410 <at_params_list_clear>:
	list->param_count = max_params_count;
	return 0;
}

void at_params_list_clear(struct at_param_list *list)
{
   12410:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (list == NULL || list->params == NULL) {
   12414:	4605      	mov	r5, r0
   12416:	b158      	cbz	r0, 12430 <at_params_list_clear+0x20>
   12418:	6843      	ldr	r3, [r0, #4]
   1241a:	b14b      	cbz	r3, 12430 <at_params_list_clear+0x20>
		return;
	}

	for (size_t i = 0; i < list->param_count; ++i) {
   1241c:	2400      	movs	r4, #0
	__ASSERT(param != NULL, "Parameter cannot be NULL.");
   1241e:	f8df 8054 	ldr.w	r8, [pc, #84]	; 12474 <at_params_list_clear+0x64>
   12422:	f8df a054 	ldr.w	sl, [pc, #84]	; 12478 <at_params_list_clear+0x68>
   12426:	f8df b054 	ldr.w	fp, [pc, #84]	; 1247c <at_params_list_clear+0x6c>
	for (size_t i = 0; i < list->param_count; ++i) {
   1242a:	682b      	ldr	r3, [r5, #0]
   1242c:	429c      	cmp	r4, r3
   1242e:	d301      	bcc.n	12434 <at_params_list_clear+0x24>
		struct at_param *params = list->params;

		at_param_clear(&params[i]);
		at_param_init(&params[i]);
	}
}
   12430:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		at_param_clear(&params[i]);
   12434:	270c      	movs	r7, #12
   12436:	4367      	muls	r7, r4
   12438:	f8d5 9004 	ldr.w	r9, [r5, #4]
   1243c:	eb09 0607 	add.w	r6, r9, r7
   12440:	4630      	mov	r0, r6
   12442:	f7ff ffc3 	bl	123cc <at_param_clear>
	__ASSERT(param != NULL, "Parameter cannot be NULL.");
   12446:	b966      	cbnz	r6, 12462 <at_params_list_clear+0x52>
   12448:	4651      	mov	r1, sl
   1244a:	2314      	movs	r3, #20
   1244c:	4642      	mov	r2, r8
   1244e:	4658      	mov	r0, fp
   12450:	f00d fcc3 	bl	1fdda <printk>
   12454:	4806      	ldr	r0, [pc, #24]	; (12470 <at_params_list_clear+0x60>)
   12456:	f00d fcc0 	bl	1fdda <printk>
   1245a:	2114      	movs	r1, #20
   1245c:	4640      	mov	r0, r8
   1245e:	f00d fd02 	bl	1fe66 <assert_post_action>
   12462:	2300      	movs	r3, #0
	for (size_t i = 0; i < list->param_count; ++i) {
   12464:	3401      	adds	r4, #1
   12466:	f849 3007 	str.w	r3, [r9, r7]
   1246a:	6073      	str	r3, [r6, #4]
   1246c:	60b3      	str	r3, [r6, #8]
   1246e:	e7dc      	b.n	1242a <at_params_list_clear+0x1a>
   12470:	000249ea 	.word	0x000249ea
   12474:	00024a06 	.word	0x00024a06
   12478:	000249d5 	.word	0x000249d5
   1247c:	00023451 	.word	0x00023451

00012480 <w_lte_lc_init>:
	}
}

static int w_lte_lc_init(void)
{
	if (at_cmd_write(nw_mode_preferred, NULL, 0, NULL) != 0) {
   12480:	2300      	movs	r3, #0
{
   12482:	b510      	push	{r4, lr}
	if (at_cmd_write(nw_mode_preferred, NULL, 0, NULL) != 0) {
   12484:	461a      	mov	r2, r3
   12486:	4619      	mov	r1, r3
   12488:	4813      	ldr	r0, [pc, #76]	; (124d8 <w_lte_lc_init+0x58>)
   1248a:	f7ff fa2d 	bl	118e8 <at_cmd_write>
   1248e:	4603      	mov	r3, r0
   12490:	b118      	cbz	r0, 1249a <w_lte_lc_init+0x1a>
		return -EIO;
   12492:	f06f 0404 	mvn.w	r4, #4
	}
	LOG_INF("PDN Auth: %s", log_strdup(cgauth));
#endif

	return 0;
}
   12496:	4620      	mov	r0, r4
   12498:	bd10      	pop	{r4, pc}
	if (at_cmd_write(cereg_5_subscribe, NULL, 0, NULL) != 0) {
   1249a:	4602      	mov	r2, r0
   1249c:	4601      	mov	r1, r0
   1249e:	480f      	ldr	r0, [pc, #60]	; (124dc <w_lte_lc_init+0x5c>)
   124a0:	f7ff fa22 	bl	118e8 <at_cmd_write>
   124a4:	4603      	mov	r3, r0
   124a6:	2800      	cmp	r0, #0
   124a8:	d1f3      	bne.n	12492 <w_lte_lc_init+0x12>
	if (at_cmd_write(legacy_pco, NULL, 0, NULL) != 0) {
   124aa:	4602      	mov	r2, r0
   124ac:	4601      	mov	r1, r0
   124ae:	480c      	ldr	r0, [pc, #48]	; (124e0 <w_lte_lc_init+0x60>)
   124b0:	f7ff fa1a 	bl	118e8 <at_cmd_write>
   124b4:	4604      	mov	r4, r0
   124b6:	2800      	cmp	r0, #0
   124b8:	d1eb      	bne.n	12492 <w_lte_lc_init+0x12>
	LOG_INF("Using legacy LTE PCO mode...");
   124ba:	2303      	movs	r3, #3
   124bc:	f04f 0000 	mov.w	r0, #0
   124c0:	4a08      	ldr	r2, [pc, #32]	; (124e4 <w_lte_lc_init+0x64>)
   124c2:	f363 0007 	bfi	r0, r3, #0, #8
   124c6:	4b08      	ldr	r3, [pc, #32]	; (124e8 <w_lte_lc_init+0x68>)
   124c8:	4908      	ldr	r1, [pc, #32]	; (124ec <w_lte_lc_init+0x6c>)
   124ca:	1a9b      	subs	r3, r3, r2
   124cc:	08db      	lsrs	r3, r3, #3
   124ce:	f363 108f 	bfi	r0, r3, #6, #10
   124d2:	f00d fcd9 	bl	1fe88 <log_string_sync>
	return 0;
   124d6:	e7de      	b.n	12496 <w_lte_lc_init+0x16>
   124d8:	00024aea 	.word	0x00024aea
   124dc:	00024ab3 	.word	0x00024ab3
   124e0:	00024abe 	.word	0x00024abe
   124e4:	00022924 	.word	0x00022924
   124e8:	0002295c 	.word	0x0002295c
   124ec:	00024c6b 	.word	0x00024c6b

000124f0 <parse_nw_reg_status>:
static int parse_nw_reg_status(const char *at_response,
			       enum lte_lc_nw_reg_status *status,
			       size_t reg_status_index)
{
	int err, reg_status;
	struct at_param_list resp_list = {0};
   124f0:	2300      	movs	r3, #0
{
   124f2:	b5f0      	push	{r4, r5, r6, r7, lr}
   124f4:	b087      	sub	sp, #28
	char  response_prefix[sizeof(AT_CEREG_RESPONSE_PREFIX)] = {0};
   124f6:	9302      	str	r3, [sp, #8]
	struct at_param_list resp_list = {0};
   124f8:	e9cd 3304 	strd	r3, r3, [sp, #16]
	char  response_prefix[sizeof(AT_CEREG_RESPONSE_PREFIX)] = {0};
   124fc:	f8cd 300b 	str.w	r3, [sp, #11]
	size_t response_prefix_len = sizeof(response_prefix);
   12500:	2307      	movs	r3, #7
{
   12502:	460d      	mov	r5, r1
   12504:	4617      	mov	r7, r2
	size_t response_prefix_len = sizeof(response_prefix);
   12506:	9301      	str	r3, [sp, #4]

	if ((at_response == NULL) || (status == NULL)) {
   12508:	4606      	mov	r6, r0
   1250a:	2800      	cmp	r0, #0
   1250c:	f000 8082 	beq.w	12614 <parse_nw_reg_status+0x124>
   12510:	2900      	cmp	r1, #0
   12512:	d07f      	beq.n	12614 <parse_nw_reg_status+0x124>
		return -EINVAL;
	}

	err = at_params_list_init(&resp_list, AT_CEREG_PARAMS_COUNT_MAX);
   12514:	210a      	movs	r1, #10
   12516:	a804      	add	r0, sp, #16
   12518:	f00e ffc1 	bl	2149e <at_params_list_init>
	if (err) {
   1251c:	4604      	mov	r4, r0
   1251e:	b188      	cbz	r0, 12544 <parse_nw_reg_status+0x54>
		LOG_ERR("Could not init AT params list, error: %d", err);
   12520:	2301      	movs	r3, #1
   12522:	f04f 0000 	mov.w	r0, #0
   12526:	4a3d      	ldr	r2, [pc, #244]	; (1261c <parse_nw_reg_status+0x12c>)
   12528:	f363 0007 	bfi	r0, r3, #0, #8
   1252c:	4b3c      	ldr	r3, [pc, #240]	; (12620 <parse_nw_reg_status+0x130>)
   1252e:	493d      	ldr	r1, [pc, #244]	; (12624 <parse_nw_reg_status+0x134>)
   12530:	1a9b      	subs	r3, r3, r2
   12532:	08db      	lsrs	r3, r3, #3
   12534:	f363 108f 	bfi	r0, r3, #6, #10
   12538:	4622      	mov	r2, r4
   1253a:	f00d fca5 	bl	1fe88 <log_string_sync>

clean_exit:
	at_params_list_free(&resp_list);

	return err;
}
   1253e:	4620      	mov	r0, r4
   12540:	b007      	add	sp, #28
   12542:	bdf0      	pop	{r4, r5, r6, r7, pc}
	err = at_parser_max_params_from_str(at_response,
   12544:	4601      	mov	r1, r0
   12546:	230a      	movs	r3, #10
   12548:	aa04      	add	r2, sp, #16
   1254a:	4630      	mov	r0, r6
   1254c:	f7ff fe64 	bl	12218 <at_parser_max_params_from_str>
	if (err) {
   12550:	4604      	mov	r4, r0
   12552:	b190      	cbz	r0, 1257a <parse_nw_reg_status+0x8a>
		LOG_ERR("Could not parse AT+CEREG response, error: %d", err);
   12554:	2301      	movs	r3, #1
   12556:	f04f 0000 	mov.w	r0, #0
   1255a:	4a30      	ldr	r2, [pc, #192]	; (1261c <parse_nw_reg_status+0x12c>)
   1255c:	f363 0007 	bfi	r0, r3, #0, #8
   12560:	4b2f      	ldr	r3, [pc, #188]	; (12620 <parse_nw_reg_status+0x130>)
   12562:	4931      	ldr	r1, [pc, #196]	; (12628 <parse_nw_reg_status+0x138>)
   12564:	1a9b      	subs	r3, r3, r2
   12566:	4622      	mov	r2, r4
   12568:	08db      	lsrs	r3, r3, #3
   1256a:	f363 108f 	bfi	r0, r3, #6, #10
		LOG_ERR("Could not get response prefix, error: %d", err);
   1256e:	f00d fc8b 	bl	1fe88 <log_string_sync>
	at_params_list_free(&resp_list);
   12572:	a804      	add	r0, sp, #16
   12574:	f00e ffa6 	bl	214c4 <at_params_list_free>
	return err;
   12578:	e7e1      	b.n	1253e <parse_nw_reg_status+0x4e>
	err = at_params_string_get(&resp_list,
   1257a:	4601      	mov	r1, r0
   1257c:	ab01      	add	r3, sp, #4
   1257e:	aa02      	add	r2, sp, #8
   12580:	a804      	add	r0, sp, #16
   12582:	f00f f84e 	bl	21622 <at_params_string_get>
	if (err) {
   12586:	4604      	mov	r4, r0
   12588:	b168      	cbz	r0, 125a6 <parse_nw_reg_status+0xb6>
		LOG_ERR("Could not get response prefix, error: %d", err);
   1258a:	2301      	movs	r3, #1
   1258c:	f04f 0000 	mov.w	r0, #0
   12590:	4a22      	ldr	r2, [pc, #136]	; (1261c <parse_nw_reg_status+0x12c>)
   12592:	f363 0007 	bfi	r0, r3, #0, #8
   12596:	4b22      	ldr	r3, [pc, #136]	; (12620 <parse_nw_reg_status+0x130>)
   12598:	4924      	ldr	r1, [pc, #144]	; (1262c <parse_nw_reg_status+0x13c>)
   1259a:	1a9b      	subs	r3, r3, r2
   1259c:	08db      	lsrs	r3, r3, #3
   1259e:	f363 108f 	bfi	r0, r3, #6, #10
   125a2:	4622      	mov	r2, r4
   125a4:	e7e3      	b.n	1256e <parse_nw_reg_status+0x7e>
	if (!response_is_valid(response_prefix, response_prefix_len,
   125a6:	4a22      	ldr	r2, [pc, #136]	; (12630 <parse_nw_reg_status+0x140>)
   125a8:	9901      	ldr	r1, [sp, #4]
   125aa:	a802      	add	r0, sp, #8
   125ac:	f00f f860 	bl	21670 <response_is_valid>
   125b0:	2800      	cmp	r0, #0
   125b2:	d0de      	beq.n	12572 <parse_nw_reg_status+0x82>
	err = at_params_int_get(&resp_list, reg_status_index,
   125b4:	466a      	mov	r2, sp
   125b6:	4639      	mov	r1, r7
   125b8:	a804      	add	r0, sp, #16
   125ba:	f00f f81b 	bl	215f4 <at_params_int_get>
	if (err) {
   125be:	4604      	mov	r4, r0
   125c0:	b168      	cbz	r0, 125de <parse_nw_reg_status+0xee>
		LOG_ERR("Could not get registration status, error: %d", err);
   125c2:	2301      	movs	r3, #1
   125c4:	f04f 0000 	mov.w	r0, #0
   125c8:	4a14      	ldr	r2, [pc, #80]	; (1261c <parse_nw_reg_status+0x12c>)
   125ca:	f363 0007 	bfi	r0, r3, #0, #8
   125ce:	4b14      	ldr	r3, [pc, #80]	; (12620 <parse_nw_reg_status+0x130>)
   125d0:	4918      	ldr	r1, [pc, #96]	; (12634 <parse_nw_reg_status+0x144>)
   125d2:	1a9b      	subs	r3, r3, r2
   125d4:	08db      	lsrs	r3, r3, #3
   125d6:	f363 108f 	bfi	r0, r3, #6, #10
   125da:	4622      	mov	r2, r4
   125dc:	e7c7      	b.n	1256e <parse_nw_reg_status+0x7e>
	switch (reg_status) {
   125de:	9a00      	ldr	r2, [sp, #0]
   125e0:	2a08      	cmp	r2, #8
   125e2:	d015      	beq.n	12610 <parse_nw_reg_status+0x120>
   125e4:	dc12      	bgt.n	1260c <parse_nw_reg_status+0x11c>
   125e6:	2a05      	cmp	r2, #5
   125e8:	d912      	bls.n	12610 <parse_nw_reg_status+0x120>
		LOG_ERR("Invalid network registration status: %d", reg_status);
   125ea:	2301      	movs	r3, #1
   125ec:	f04f 0000 	mov.w	r0, #0
   125f0:	490a      	ldr	r1, [pc, #40]	; (1261c <parse_nw_reg_status+0x12c>)
   125f2:	f363 0007 	bfi	r0, r3, #0, #8
   125f6:	4b0a      	ldr	r3, [pc, #40]	; (12620 <parse_nw_reg_status+0x130>)
		err = -EIO;
   125f8:	f06f 0404 	mvn.w	r4, #4
   125fc:	1a5b      	subs	r3, r3, r1
   125fe:	08db      	lsrs	r3, r3, #3
		LOG_ERR("Invalid network registration status: %d", reg_status);
   12600:	f363 108f 	bfi	r0, r3, #6, #10
   12604:	490c      	ldr	r1, [pc, #48]	; (12638 <parse_nw_reg_status+0x148>)
   12606:	f00d fc3f 	bl	1fe88 <log_string_sync>
		err = -EIO;
   1260a:	e7b2      	b.n	12572 <parse_nw_reg_status+0x82>
	switch (reg_status) {
   1260c:	2a5a      	cmp	r2, #90	; 0x5a
   1260e:	d1ec      	bne.n	125ea <parse_nw_reg_status+0xfa>
		*status = reg_status;
   12610:	702a      	strb	r2, [r5, #0]
		LOG_DBG("Network registration status: %d", reg_status);
   12612:	e7ae      	b.n	12572 <parse_nw_reg_status+0x82>
		return -EINVAL;
   12614:	f06f 0415 	mvn.w	r4, #21
   12618:	e791      	b.n	1253e <parse_nw_reg_status+0x4e>
   1261a:	bf00      	nop
   1261c:	00022924 	.word	0x00022924
   12620:	0002295c 	.word	0x0002295c
   12624:	00024b0b 	.word	0x00024b0b
   12628:	00024b34 	.word	0x00024b34
   1262c:	00024b61 	.word	0x00024b61
   12630:	00024b8a 	.word	0x00024b8a
   12634:	00024b91 	.word	0x00024b91
   12638:	00024bbe 	.word	0x00024bbe

0001263c <at_handler>:
{
   1263c:	b507      	push	{r0, r1, r2, lr}
	if (response == NULL) {
   1263e:	4608      	mov	r0, r1
   12640:	b971      	cbnz	r1, 12660 <at_handler+0x24>
		LOG_ERR("Response buffer is NULL-pointer");
   12642:	2301      	movs	r3, #1
   12644:	4a15      	ldr	r2, [pc, #84]	; (1269c <at_handler+0x60>)
   12646:	f363 0007 	bfi	r0, r3, #0, #8
   1264a:	4b15      	ldr	r3, [pc, #84]	; (126a0 <at_handler+0x64>)
   1264c:	4915      	ldr	r1, [pc, #84]	; (126a4 <at_handler+0x68>)
   1264e:	1a9b      	subs	r3, r3, r2
   12650:	08db      	lsrs	r3, r3, #3
   12652:	f363 108f 	bfi	r0, r3, #6, #10
		LOG_ERR("Could not get network registration status");
   12656:	f00d fc17 	bl	1fe88 <log_string_sync>
}
   1265a:	b003      	add	sp, #12
   1265c:	f85d fb04 	ldr.w	pc, [sp], #4
	err = parse_nw_reg_status(response, &status, AT_CEREG_REG_STATUS_INDEX);
   12660:	2201      	movs	r2, #1
   12662:	f10d 0107 	add.w	r1, sp, #7
   12666:	f7ff ff43 	bl	124f0 <parse_nw_reg_status>
	if (err) {
   1266a:	b160      	cbz	r0, 12686 <at_handler+0x4a>
		LOG_ERR("Could not get network registration status");
   1266c:	2301      	movs	r3, #1
   1266e:	f04f 0000 	mov.w	r0, #0
   12672:	4a0a      	ldr	r2, [pc, #40]	; (1269c <at_handler+0x60>)
   12674:	f363 0007 	bfi	r0, r3, #0, #8
   12678:	4b09      	ldr	r3, [pc, #36]	; (126a0 <at_handler+0x64>)
   1267a:	490b      	ldr	r1, [pc, #44]	; (126a8 <at_handler+0x6c>)
   1267c:	1a9b      	subs	r3, r3, r2
   1267e:	08db      	lsrs	r3, r3, #3
   12680:	f363 108f 	bfi	r0, r3, #6, #10
   12684:	e7e7      	b.n	12656 <at_handler+0x1a>
	if ((status == LTE_LC_NW_REG_REGISTERED_HOME) ||
   12686:	f89d 3007 	ldrb.w	r3, [sp, #7]
   1268a:	f003 03fb 	and.w	r3, r3, #251	; 0xfb
   1268e:	2b01      	cmp	r3, #1
   12690:	d1e3      	bne.n	1265a <at_handler+0x1e>
	z_impl_k_sem_give(sem);
   12692:	4806      	ldr	r0, [pc, #24]	; (126ac <at_handler+0x70>)
   12694:	f00a fcee 	bl	1d074 <z_impl_k_sem_give>
   12698:	e7df      	b.n	1265a <at_handler+0x1e>
   1269a:	bf00      	nop
   1269c:	00022924 	.word	0x00022924
   126a0:	0002295c 	.word	0x0002295c
   126a4:	00024a69 	.word	0x00024a69
   126a8:	00024a89 	.word	0x00024a89
   126ac:	20020310 	.word	0x20020310

000126b0 <w_lte_lc_connect>:
{
   126b0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	return z_impl_k_sem_init(sem, initial_count, limit);
   126b4:	2201      	movs	r2, #1
   126b6:	2100      	movs	r1, #0
   126b8:	4838      	ldr	r0, [pc, #224]	; (1279c <w_lte_lc_connect+0xec>)
   126ba:	f00f f88a 	bl	217d2 <z_impl_k_sem_init>
	rc = at_notif_register_handler(NULL, at_handler);
   126be:	4938      	ldr	r1, [pc, #224]	; (127a0 <w_lte_lc_connect+0xf0>)
   126c0:	2000      	movs	r0, #0
   126c2:	f7ff f9c3 	bl	11a4c <at_notif_register_handler>
	if (rc != 0) {
   126c6:	4c37      	ldr	r4, [pc, #220]	; (127a4 <w_lte_lc_connect+0xf4>)
   126c8:	4b37      	ldr	r3, [pc, #220]	; (127a8 <w_lte_lc_connect+0xf8>)
   126ca:	4681      	mov	r9, r0
   126cc:	1ae4      	subs	r4, r4, r3
   126ce:	f3c4 04c9 	ubfx	r4, r4, #3, #10
   126d2:	b168      	cbz	r0, 126f0 <w_lte_lc_connect+0x40>
		LOG_ERR("Can't register handler rc=%d", rc);
   126d4:	2201      	movs	r2, #1
   126d6:	f04f 0000 	mov.w	r0, #0
   126da:	f362 0007 	bfi	r0, r2, #0, #8
   126de:	464a      	mov	r2, r9
   126e0:	4932      	ldr	r1, [pc, #200]	; (127ac <w_lte_lc_connect+0xfc>)
   126e2:	f364 108f 	bfi	r0, r4, #6, #10
		LOG_ERR("Can't de-register handler rc=%d", rc);
   126e6:	f00d fbcf 	bl	1fe88 <log_string_sync>
}
   126ea:	4648      	mov	r0, r9
   126ec:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   126f0:	2702      	movs	r7, #2
	const char *current_network_mode = nw_mode_preferred;
   126f2:	482f      	ldr	r0, [pc, #188]	; (127b0 <w_lte_lc_connect+0x100>)
	return z_impl_k_sem_take(sem, timeout);
   126f4:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 127cc <w_lte_lc_connect+0x11c>
   126f8:	f8df b0a0 	ldr.w	fp, [pc, #160]	; 1279c <w_lte_lc_connect+0xec>
		if (at_cmd_write(current_network_mode, NULL, 0, NULL) != 0) {
   126fc:	2300      	movs	r3, #0
   126fe:	461a      	mov	r2, r3
   12700:	4619      	mov	r1, r3
   12702:	f7ff f8f1 	bl	118e8 <at_cmd_write>
   12706:	4603      	mov	r3, r0
   12708:	bb90      	cbnz	r0, 12770 <w_lte_lc_connect+0xc0>
		if (at_cmd_write(normal, NULL, 0, NULL) != 0) {
   1270a:	4602      	mov	r2, r0
   1270c:	4601      	mov	r1, r0
   1270e:	4829      	ldr	r0, [pc, #164]	; (127b4 <w_lte_lc_connect+0x104>)
   12710:	f7ff f8ea 	bl	118e8 <at_cmd_write>
   12714:	4680      	mov	r8, r0
   12716:	bb58      	cbnz	r0, 12770 <w_lte_lc_connect+0xc0>
   12718:	4651      	mov	r1, sl
   1271a:	4658      	mov	r0, fp
   1271c:	f00a fcf4 	bl	1d108 <z_impl_k_sem_take>
		if (err == -EAGAIN) {
   12720:	f110 0f0b 	cmn.w	r0, #11
   12724:	4681      	mov	r9, r0
   12726:	d125      	bne.n	12774 <w_lte_lc_connect+0xc4>
			LOG_INF("Network connection attempt timed out");
   12728:	f026 033f 	bic.w	r3, r6, #63	; 0x3f
   1272c:	f043 0303 	orr.w	r3, r3, #3
   12730:	f363 0607 	bfi	r6, r3, #0, #8
   12734:	f364 168f 	bfi	r6, r4, #6, #10
   12738:	491f      	ldr	r1, [pc, #124]	; (127b8 <w_lte_lc_connect+0x108>)
   1273a:	4630      	mov	r0, r6
   1273c:	f00d fba4 	bl	1fe88 <log_string_sync>
			if (IS_ENABLED(CONFIG_LTE_NETWORK_USE_FALLBACK) &&
   12740:	2f01      	cmp	r7, #1
   12742:	d027      	beq.n	12794 <w_lte_lc_connect+0xe4>
				if (at_cmd_write(offline, NULL, 0, NULL) != 0) {
   12744:	4643      	mov	r3, r8
   12746:	4642      	mov	r2, r8
   12748:	4641      	mov	r1, r8
   1274a:	481c      	ldr	r0, [pc, #112]	; (127bc <w_lte_lc_connect+0x10c>)
   1274c:	f7ff f8cc 	bl	118e8 <at_cmd_write>
   12750:	b970      	cbnz	r0, 12770 <w_lte_lc_connect+0xc0>
				LOG_INF("Using fallback network mode");
   12752:	f025 033f 	bic.w	r3, r5, #63	; 0x3f
   12756:	f043 0303 	orr.w	r3, r3, #3
   1275a:	f363 0507 	bfi	r5, r3, #0, #8
   1275e:	f364 158f 	bfi	r5, r4, #6, #10
   12762:	4628      	mov	r0, r5
   12764:	4916      	ldr	r1, [pc, #88]	; (127c0 <w_lte_lc_connect+0x110>)
   12766:	f00d fb8f 	bl	1fe88 <log_string_sync>
   1276a:	2701      	movs	r7, #1
				current_network_mode = nw_mode_fallback;
   1276c:	4815      	ldr	r0, [pc, #84]	; (127c4 <w_lte_lc_connect+0x114>)
   1276e:	e7c5      	b.n	126fc <w_lte_lc_connect+0x4c>
			err = -EIO;
   12770:	f06f 0904 	mvn.w	r9, #4
	rc = at_notif_deregister_handler(NULL, at_handler);
   12774:	490a      	ldr	r1, [pc, #40]	; (127a0 <w_lte_lc_connect+0xf0>)
   12776:	2000      	movs	r0, #0
   12778:	f7ff f9b4 	bl	11ae4 <at_notif_deregister_handler>
	if (rc != 0) {
   1277c:	4602      	mov	r2, r0
   1277e:	2800      	cmp	r0, #0
   12780:	d0b3      	beq.n	126ea <w_lte_lc_connect+0x3a>
		LOG_ERR("Can't de-register handler rc=%d", rc);
   12782:	2101      	movs	r1, #1
   12784:	f04f 0000 	mov.w	r0, #0
   12788:	f361 0007 	bfi	r0, r1, #0, #8
   1278c:	f364 108f 	bfi	r0, r4, #6, #10
   12790:	490d      	ldr	r1, [pc, #52]	; (127c8 <w_lte_lc_connect+0x118>)
   12792:	e7a8      	b.n	126e6 <w_lte_lc_connect+0x36>
				err = -ETIMEDOUT;
   12794:	f06f 0973 	mvn.w	r9, #115	; 0x73
   12798:	e7ec      	b.n	12774 <w_lte_lc_connect+0xc4>
   1279a:	bf00      	nop
   1279c:	20020310 	.word	0x20020310
   127a0:	0001263d 	.word	0x0001263d
   127a4:	0002295c 	.word	0x0002295c
   127a8:	00022924 	.word	0x00022924
   127ac:	00024bed 	.word	0x00024bed
   127b0:	00024aea 	.word	0x00024aea
   127b4:	00024ac9 	.word	0x00024ac9
   127b8:	00024c0a 	.word	0x00024c0a
   127bc:	00024b01 	.word	0x00024b01
   127c0:	00024c2f 	.word	0x00024c2f
   127c4:	00024ad3 	.word	0x00024ad3
   127c8:	00024c4b 	.word	0x00024c4b
   127cc:	000927c0 	.word	0x000927c0

000127d0 <k_sys_fatal_error_handler>:

extern void sys_arch_reboot(int type);

void k_sys_fatal_error_handler(unsigned int reason,
			       const z_arch_esf_t *esf)
{
   127d0:	b508      	push	{r3, lr}
		arch_syscall_invoke0(K_SYSCALL_LOG_PANIC);
		return;
	}
#endif
	compiler_barrier();
	z_impl_log_panic();
   127d2:	f7fb fd9b 	bl	e30c <z_impl_log_panic>
	ARG_UNUSED(esf);
	ARG_UNUSED(reason);

	LOG_PANIC();

	LOG_ERR("Resetting system");
   127d6:	2301      	movs	r3, #1
   127d8:	f04f 0000 	mov.w	r0, #0
   127dc:	4a06      	ldr	r2, [pc, #24]	; (127f8 <k_sys_fatal_error_handler+0x28>)
   127de:	f363 0007 	bfi	r0, r3, #0, #8
   127e2:	4b06      	ldr	r3, [pc, #24]	; (127fc <k_sys_fatal_error_handler+0x2c>)
   127e4:	4906      	ldr	r1, [pc, #24]	; (12800 <k_sys_fatal_error_handler+0x30>)
   127e6:	1a9b      	subs	r3, r3, r2
   127e8:	08db      	lsrs	r3, r3, #3
   127ea:	f363 108f 	bfi	r0, r3, #6, #10
   127ee:	f00d fb4b 	bl	1fe88 <log_string_sync>
	sys_arch_reboot(0);
   127f2:	2000      	movs	r0, #0
   127f4:	f7fd f876 	bl	f8e4 <sys_arch_reboot>

	CODE_UNREACHABLE;
   127f8:	00022924 	.word	0x00022924
   127fc:	0002294c 	.word	0x0002294c
   12800:	00024e04 	.word	0x00024e04

00012804 <check_ext_api_requests>:
	}
};
#endif

static int check_ext_api_requests(struct device *dev)
{
   12804:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	(void)dev;

	const struct fw_info_ext_api_request *ext_api_req =
			skip_ext_apis(&m_firmware_info);

	for (u32_t i = 0; i < m_firmware_info.ext_api_request_num; i++) {
   12808:	2500      	movs	r5, #0
			skip_ext_apis(&m_firmware_info);
   1280a:	4c21      	ldr	r4, [pc, #132]	; (12890 <check_ext_api_requests+0x8c>)
 */
static inline const struct fw_info_ext_api *fw_info_ext_api_check(
							u32_t ext_api_addr)
{
	const struct fw_info_ext_api *ext_api;
	const u32_t ext_api_magic[] = {EXT_API_MAGIC};
   1280c:	4e21      	ldr	r6, [pc, #132]	; (12894 <check_ext_api_requests+0x90>)
	for (u32_t i = 0; i < m_firmware_info.ext_api_request_num; i++) {
   1280e:	f854 8c04 	ldr.w	r8, [r4, #-4]
			/* EXT_API hard requirement not met. */
			printk("ERROR: Cannot fulfill EXT_API request.\r\n");
			k_panic();
		} else {
			/* EXT_API soft requirement not met. */
			printk("WARNING: Optional EXT_API request not "
   12812:	f8df 9088 	ldr.w	r9, [pc, #136]	; 1289c <check_ext_api_requests+0x98>
{
   12816:	b085      	sub	sp, #20
	for (u32_t i = 0; i < m_firmware_info.ext_api_request_num; i++) {
   12818:	45a8      	cmp	r8, r5
   1281a:	d803      	bhi.n	12824 <check_ext_api_requests+0x20>
		}
		ADVANCE_EXT_API_REQ(ext_api_req);
	}

	return 0;
}
   1281c:	2000      	movs	r0, #0
   1281e:	b005      	add	sp, #20
   12820:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		if (fw_info_ext_api_check((u32_t)*(ext_api_req->ext_api))
   12824:	6a63      	ldr	r3, [r4, #36]	; 0x24
   12826:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
   1282a:	681f      	ldr	r7, [r3, #0]
   1282c:	ab01      	add	r3, sp, #4
   1282e:	e883 0007 	stmia.w	r3, {r0, r1, r2}

	ext_api = (const struct fw_info_ext_api *)(ext_api_addr);
	if (memcmp(ext_api->magic, ext_api_magic, CONFIG_FW_INFO_MAGIC_LEN)
   12832:	220c      	movs	r2, #12
   12834:	4619      	mov	r1, r3
   12836:	4638      	mov	r0, r7
   12838:	f00f f871 	bl	2191e <memcmp>
   1283c:	b990      	cbnz	r0, 12864 <check_ext_api_requests+0x60>
   1283e:	b18f      	cbz	r7, 12864 <check_ext_api_requests+0x60>
			&& ext_api_satisfies_req(*(ext_api_req->ext_api),
   12840:	6a63      	ldr	r3, [r4, #36]	; 0x24
	const u32_t req_id = ext_api_req->request.ext_api_id;
   12842:	6921      	ldr	r1, [r4, #16]
			&& ext_api_satisfies_req(*(ext_api_req->ext_api),
   12844:	681b      	ldr	r3, [r3, #0]
	return ((ext_api->ext_api_id == req_id)
   12846:	691a      	ldr	r2, [r3, #16]
		&& ((ext_api->ext_api_flags & req_flags) == req_flags));
   12848:	4291      	cmp	r1, r2
   1284a:	d10b      	bne.n	12864 <check_ext_api_requests+0x60>
		&&  (ext_api->ext_api_version >= req_min_version)
   1284c:	699a      	ldr	r2, [r3, #24]
	const u32_t req_min_version = ext_api_req->request.ext_api_version;
   1284e:	69a1      	ldr	r1, [r4, #24]
		&&  (ext_api->ext_api_version >= req_min_version)
   12850:	4291      	cmp	r1, r2
   12852:	d807      	bhi.n	12864 <check_ext_api_requests+0x60>
	const u32_t req_max_version = ext_api_req->ext_api_max_version;
   12854:	69e1      	ldr	r1, [r4, #28]
		&&  (ext_api->ext_api_version <  req_max_version)
   12856:	4291      	cmp	r1, r2
   12858:	d904      	bls.n	12864 <check_ext_api_requests+0x60>
	const u32_t req_flags = ext_api_req->request.ext_api_flags;
   1285a:	6962      	ldr	r2, [r4, #20]
		&& ((ext_api->ext_api_flags & req_flags) == req_flags));
   1285c:	695b      	ldr	r3, [r3, #20]
   1285e:	ea32 0303 	bics.w	r3, r2, r3
   12862:	d00a      	beq.n	1287a <check_ext_api_requests+0x76>
		} else if (ext_api_req->required) {
   12864:	6a27      	ldr	r7, [r4, #32]
   12866:	b167      	cbz	r7, 12882 <check_ext_api_requests+0x7e>
			printk("ERROR: Cannot fulfill EXT_API request.\r\n");
   12868:	480b      	ldr	r0, [pc, #44]	; (12898 <check_ext_api_requests+0x94>)
   1286a:	f00d fab6 	bl	1fdda <printk>
			k_panic();
   1286e:	4040      	eors	r0, r0
   12870:	f380 8811 	msr	BASEPRI, r0
   12874:	f04f 0004 	mov.w	r0, #4
   12878:	df02      	svc	2
		ADVANCE_EXT_API_REQ(ext_api_req);
   1287a:	68e3      	ldr	r3, [r4, #12]
	for (u32_t i = 0; i < m_firmware_info.ext_api_request_num; i++) {
   1287c:	3501      	adds	r5, #1
		ADVANCE_EXT_API_REQ(ext_api_req);
   1287e:	441c      	add	r4, r3
   12880:	e7ca      	b.n	12818 <check_ext_api_requests+0x14>
			printk("WARNING: Optional EXT_API request not "
   12882:	4648      	mov	r0, r9
   12884:	f00d faa9 	bl	1fdda <printk>
			*ext_api_req->ext_api = NULL;
   12888:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1288a:	601f      	str	r7, [r3, #0]
   1288c:	e7f5      	b.n	1287a <check_ext_api_requests+0x76>
   1288e:	bf00      	nop
   12890:	0000c23c 	.word	0x0000c23c
   12894:	000229b8 	.word	0x000229b8
   12898:	00024e21 	.word	0x00024e21
   1289c:	00024e4a 	.word	0x00024e4a

000128a0 <rpc_logobj_client_evt_handler>:
   128a0:	b120      	cbz	r0, 128ac <rpc_logobj_client_evt_handler+0xc>
   128a2:	f850 1b08 	ldr.w	r1, [r0], #8
   128a6:	0c09      	lsrs	r1, r1, #16
   128a8:	f000 b852 	b.w	12950 <logobj_event_handler>
   128ac:	4770      	bx	lr
   128ae:	bf00      	nop

000128b0 <rpc_logobj_client_init>:
   128b0:	4801      	ldr	r0, [pc, #4]	; (128b8 <rpc_logobj_client_init+0x8>)
   128b2:	f006 bbcf 	b.w	19054 <rpc_client_register>
   128b6:	bf00      	nop
   128b8:	00022c4c 	.word	0x00022c4c

000128bc <rpc_logobj_client_request_alloc>:
   128bc:	2300      	movs	r3, #0
   128be:	b510      	push	{r4, lr}
   128c0:	b082      	sub	sp, #8
   128c2:	9301      	str	r3, [sp, #4]
   128c4:	b961      	cbnz	r1, 128e0 <rpc_logobj_client_request_alloc+0x24>
   128c6:	b170      	cbz	r0, 128e6 <rpc_logobj_client_request_alloc+0x2a>
   128c8:	4604      	mov	r4, r0
   128ca:	aa01      	add	r2, sp, #4
   128cc:	2009      	movs	r0, #9
   128ce:	f006 fdf9 	bl	194c4 <rpc_message_alloc>
   128d2:	b918      	cbnz	r0, 128dc <rpc_logobj_client_request_alloc+0x20>
   128d4:	9b01      	ldr	r3, [sp, #4]
   128d6:	b10b      	cbz	r3, 128dc <rpc_logobj_client_request_alloc+0x20>
   128d8:	3308      	adds	r3, #8
   128da:	6023      	str	r3, [r4, #0]
   128dc:	b002      	add	sp, #8
   128de:	bd10      	pop	{r4, pc}
   128e0:	200f      	movs	r0, #15
   128e2:	b002      	add	sp, #8
   128e4:	bd10      	pop	{r4, pc}
   128e6:	200e      	movs	r0, #14
   128e8:	b002      	add	sp, #8
   128ea:	bd10      	pop	{r4, pc}

000128ec <rpc_logobj_client_request_send>:
   128ec:	f401 4370 	and.w	r3, r1, #61440	; 0xf000
   128f0:	f5b3 4fe0 	cmp.w	r3, #28672	; 0x7000
   128f4:	d10b      	bne.n	1290e <rpc_logobj_client_request_send+0x22>
   128f6:	b160      	cbz	r0, 12912 <rpc_logobj_client_request_send+0x26>
   128f8:	4603      	mov	r3, r0
   128fa:	f830 2c08 	ldrh.w	r2, [r0, #-8]
   128fe:	2009      	movs	r0, #9
   12900:	ea42 4101 	orr.w	r1, r2, r1, lsl #16
   12904:	f843 1d08 	str.w	r1, [r3, #-8]!
   12908:	4619      	mov	r1, r3
   1290a:	f006 bdc3 	b.w	19494 <rpc_message_send>
   1290e:	200f      	movs	r0, #15
   12910:	4770      	bx	lr
   12912:	200e      	movs	r0, #14
   12914:	4770      	bx	lr
   12916:	bf00      	nop

00012918 <rpc_logobj_client_message_free>:
   12918:	b120      	cbz	r0, 12924 <rpc_logobj_client_message_free+0xc>
   1291a:	f1a0 0108 	sub.w	r1, r0, #8
   1291e:	2009      	movs	r0, #9
   12920:	f006 be02 	b.w	19528 <rpc_message_free>
   12924:	200e      	movs	r0, #14
   12926:	4770      	bx	lr

00012928 <rpc_logobj_client_data_free>:
   12928:	b118      	cbz	r0, 12932 <rpc_logobj_client_data_free+0xa>
   1292a:	4601      	mov	r1, r0
   1292c:	2009      	movs	r0, #9
   1292e:	f006 bf0d 	b.w	1974c <rpc_message_data_free>
   12932:	200e      	movs	r0, #14
   12934:	4770      	bx	lr
   12936:	bf00      	nop

00012938 <packet_free_cb>:
   12938:	b510      	push	{r4, lr}
   1293a:	4604      	mov	r4, r0
   1293c:	6800      	ldr	r0, [r0, #0]
   1293e:	f7ff fff3 	bl	12928 <rpc_logobj_client_data_free>
   12942:	68a0      	ldr	r0, [r4, #8]
   12944:	b118      	cbz	r0, 1294e <packet_free_cb+0x16>
   12946:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1294a:	f001 b935 	b.w	13bb8 <nrf_free>
   1294e:	bd10      	pop	{r4, pc}

00012950 <logobj_event_handler>:
   12950:	b530      	push	{r4, r5, lr}
   12952:	4b3b      	ldr	r3, [pc, #236]	; (12a40 <logobj_event_handler+0xf0>)
   12954:	b085      	sub	sp, #20
   12956:	681d      	ldr	r5, [r3, #0]
   12958:	2d00      	cmp	r5, #0
   1295a:	d04c      	beq.n	129f6 <logobj_event_handler+0xa6>
   1295c:	f248 0302 	movw	r3, #32770	; 0x8002
   12960:	4299      	cmp	r1, r3
   12962:	d053      	beq.n	12a0c <logobj_event_handler+0xbc>
   12964:	d91c      	bls.n	129a0 <logobj_event_handler+0x50>
   12966:	f248 0303 	movw	r3, #32771	; 0x8003
   1296a:	4299      	cmp	r1, r3
   1296c:	d05a      	beq.n	12a24 <logobj_event_handler+0xd4>
   1296e:	f249 0301 	movw	r3, #36865	; 0x9001
   12972:	4299      	cmp	r1, r3
   12974:	d147      	bne.n	12a06 <logobj_event_handler+0xb6>
   12976:	2400      	movs	r4, #0
   12978:	6843      	ldr	r3, [r0, #4]
   1297a:	6802      	ldr	r2, [r0, #0]
   1297c:	e9cd 4402 	strd	r4, r4, [sp, #8]
   12980:	e9cd 2300 	strd	r2, r3, [sp]
   12984:	69e8      	ldr	r0, [r5, #28]
   12986:	4669      	mov	r1, sp
   12988:	6803      	ldr	r3, [r0, #0]
   1298a:	685b      	ldr	r3, [r3, #4]
   1298c:	4798      	blx	r3
   1298e:	3001      	adds	r0, #1
   12990:	d04e      	beq.n	12a30 <logobj_event_handler+0xe0>
   12992:	4620      	mov	r0, r4
   12994:	682b      	ldr	r3, [r5, #0]
   12996:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   1299a:	602b      	str	r3, [r5, #0]
   1299c:	b005      	add	sp, #20
   1299e:	bd30      	pop	{r4, r5, pc}
   129a0:	f248 0301 	movw	r3, #32769	; 0x8001
   129a4:	4299      	cmp	r1, r3
   129a6:	d12e      	bne.n	12a06 <logobj_event_handler+0xb6>
   129a8:	68c3      	ldr	r3, [r0, #12]
   129aa:	2b00      	cmp	r3, #0
   129ac:	d135      	bne.n	12a1a <logobj_event_handler+0xca>
   129ae:	6828      	ldr	r0, [r5, #0]
   129b0:	f410 0080 	ands.w	r0, r0, #4194304	; 0x400000
   129b4:	d03e      	beq.n	12a34 <logobj_event_handler+0xe4>
   129b6:	682b      	ldr	r3, [r5, #0]
   129b8:	b29b      	uxth	r3, r3
   129ba:	2b01      	cmp	r3, #1
   129bc:	d105      	bne.n	129ca <logobj_event_handler+0x7a>
   129be:	682b      	ldr	r3, [r5, #0]
   129c0:	0c1b      	lsrs	r3, r3, #16
   129c2:	041b      	lsls	r3, r3, #16
   129c4:	f043 0302 	orr.w	r3, r3, #2
   129c8:	602b      	str	r3, [r5, #0]
   129ca:	4b1e      	ldr	r3, [pc, #120]	; (12a44 <logobj_event_handler+0xf4>)
   129cc:	781a      	ldrb	r2, [r3, #0]
   129ce:	f002 01ff 	and.w	r1, r2, #255	; 0xff
   129d2:	2a00      	cmp	r2, #0
   129d4:	d031      	beq.n	12a3a <logobj_event_handler+0xea>
   129d6:	4a1c      	ldr	r2, [pc, #112]	; (12a48 <logobj_event_handler+0xf8>)
   129d8:	7811      	ldrb	r1, [r2, #0]
   129da:	b909      	cbnz	r1, 129e0 <logobj_event_handler+0x90>
   129dc:	2101      	movs	r1, #1
   129de:	7011      	strb	r1, [r2, #0]
   129e0:	2000      	movs	r0, #0
   129e2:	7018      	strb	r0, [r3, #0]
   129e4:	682b      	ldr	r3, [r5, #0]
   129e6:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
   129ea:	602b      	str	r3, [r5, #0]
   129ec:	682b      	ldr	r3, [r5, #0]
   129ee:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
   129f2:	602b      	str	r3, [r5, #0]
   129f4:	e7d2      	b.n	1299c <logobj_event_handler+0x4c>
   129f6:	6800      	ldr	r0, [r0, #0]
   129f8:	2800      	cmp	r0, #0
   129fa:	d0cf      	beq.n	1299c <logobj_event_handler+0x4c>
   129fc:	f7ff ff94 	bl	12928 <rpc_logobj_client_data_free>
   12a00:	4628      	mov	r0, r5
   12a02:	b005      	add	sp, #20
   12a04:	bd30      	pop	{r4, r5, pc}
   12a06:	2000      	movs	r0, #0
   12a08:	b005      	add	sp, #20
   12a0a:	bd30      	pop	{r4, r5, pc}
   12a0c:	682b      	ldr	r3, [r5, #0]
   12a0e:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
   12a12:	d00b      	beq.n	12a2c <logobj_event_handler+0xdc>
   12a14:	68c0      	ldr	r0, [r0, #12]
   12a16:	2800      	cmp	r0, #0
   12a18:	d0e4      	beq.n	129e4 <logobj_event_handler+0x94>
   12a1a:	230e      	movs	r3, #14
   12a1c:	2000      	movs	r0, #0
   12a1e:	606b      	str	r3, [r5, #4]
   12a20:	b005      	add	sp, #20
   12a22:	bd30      	pop	{r4, r5, pc}
   12a24:	68c3      	ldr	r3, [r0, #12]
   12a26:	2b01      	cmp	r3, #1
   12a28:	d1a5      	bne.n	12976 <logobj_event_handler+0x26>
   12a2a:	e7f6      	b.n	12a1a <logobj_event_handler+0xca>
   12a2c:	4618      	mov	r0, r3
   12a2e:	e7b5      	b.n	1299c <logobj_event_handler+0x4c>
   12a30:	2002      	movs	r0, #2
   12a32:	e7b3      	b.n	1299c <logobj_event_handler+0x4c>
   12a34:	230e      	movs	r3, #14
   12a36:	606b      	str	r3, [r5, #4]
   12a38:	e7b0      	b.n	1299c <logobj_event_handler+0x4c>
   12a3a:	4a03      	ldr	r2, [pc, #12]	; (12a48 <logobj_event_handler+0xf8>)
   12a3c:	7011      	strb	r1, [r2, #0]
   12a3e:	e7cf      	b.n	129e0 <logobj_event_handler+0x90>
   12a40:	2002032c 	.word	0x2002032c
   12a44:	20022688 	.word	0x20022688
   12a48:	20022689 	.word	0x20022689

00012a4c <logobj_interface_init>:
   12a4c:	2300      	movs	r3, #0
   12a4e:	b510      	push	{r4, lr}
   12a50:	4907      	ldr	r1, [pc, #28]	; (12a70 <logobj_interface_init+0x24>)
   12a52:	4a08      	ldr	r2, [pc, #32]	; (12a74 <logobj_interface_init+0x28>)
   12a54:	4c08      	ldr	r4, [pc, #32]	; (12a78 <logobj_interface_init+0x2c>)
   12a56:	4809      	ldr	r0, [pc, #36]	; (12a7c <logobj_interface_init+0x30>)
   12a58:	7023      	strb	r3, [r4, #0]
   12a5a:	6003      	str	r3, [r0, #0]
   12a5c:	700b      	strb	r3, [r1, #0]
   12a5e:	6013      	str	r3, [r2, #0]
   12a60:	f7ff ff26 	bl	128b0 <rpc_logobj_client_init>
   12a64:	3000      	adds	r0, #0
   12a66:	bf18      	it	ne
   12a68:	2001      	movne	r0, #1
   12a6a:	4240      	negs	r0, r0
   12a6c:	bd10      	pop	{r4, pc}
   12a6e:	bf00      	nop
   12a70:	20022688 	.word	0x20022688
   12a74:	20020328 	.word	0x20020328
   12a78:	20022689 	.word	0x20022689
   12a7c:	2002032c 	.word	0x2002032c

00012a80 <logobj_interface_open>:
   12a80:	2300      	movs	r3, #0
   12a82:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   12a86:	2866      	cmp	r0, #102	; 0x66
   12a88:	b082      	sub	sp, #8
   12a8a:	9300      	str	r3, [sp, #0]
   12a8c:	d172      	bne.n	12b74 <logobj_interface_open+0xf4>
   12a8e:	2902      	cmp	r1, #2
   12a90:	4689      	mov	r9, r1
   12a92:	d16f      	bne.n	12b74 <logobj_interface_open+0xf4>
   12a94:	f240 2305 	movw	r3, #517	; 0x205
   12a98:	429a      	cmp	r2, r3
   12a9a:	4692      	mov	sl, r2
   12a9c:	d16a      	bne.n	12b74 <logobj_interface_open+0xf4>
   12a9e:	4f48      	ldr	r7, [pc, #288]	; (12bc0 <logobj_interface_open+0x140>)
   12aa0:	683d      	ldr	r5, [r7, #0]
   12aa2:	2d00      	cmp	r5, #0
   12aa4:	d17c      	bne.n	12ba0 <logobj_interface_open+0x120>
   12aa6:	4680      	mov	r8, r0
   12aa8:	4a46      	ldr	r2, [pc, #280]	; (12bc4 <logobj_interface_open+0x144>)
   12aaa:	4668      	mov	r0, sp
   12aac:	f006 f870 	bl	18b90 <interface_socket_allocate>
   12ab0:	9b00      	ldr	r3, [sp, #0]
   12ab2:	4606      	mov	r6, r0
   12ab4:	2b00      	cmp	r3, #0
   12ab6:	d07d      	beq.n	12bb4 <logobj_interface_open+0x134>
   12ab8:	4629      	mov	r1, r5
   12aba:	2204      	movs	r2, #4
   12abc:	4842      	ldr	r0, [pc, #264]	; (12bc8 <logobj_interface_open+0x148>)
   12abe:	603b      	str	r3, [r7, #0]
   12ac0:	f00e ff48 	bl	21954 <memset>
   12ac4:	9c00      	ldr	r4, [sp, #0]
   12ac6:	4629      	mov	r1, r5
   12ac8:	e9c4 8903 	strd	r8, r9, [r4, #12]
   12acc:	f8c4 a014 	str.w	sl, [r4, #20]
   12ad0:	a801      	add	r0, sp, #4
   12ad2:	f7ff fef3 	bl	128bc <rpc_logobj_client_request_alloc>
   12ad6:	2800      	cmp	r0, #0
   12ad8:	d13c      	bne.n	12b54 <logobj_interface_open+0xd4>
   12ada:	2201      	movs	r2, #1
   12adc:	2104      	movs	r1, #4
   12ade:	9b01      	ldr	r3, [sp, #4]
   12ae0:	4d3a      	ldr	r5, [pc, #232]	; (12bcc <logobj_interface_open+0x14c>)
   12ae2:	7358      	strb	r0, [r3, #13]
   12ae4:	7398      	strb	r0, [r3, #14]
   12ae6:	73d8      	strb	r0, [r3, #15]
   12ae8:	7258      	strb	r0, [r3, #9]
   12aea:	7298      	strb	r0, [r3, #10]
   12aec:	72d8      	strb	r0, [r3, #11]
   12aee:	7219      	strb	r1, [r3, #8]
   12af0:	702a      	strb	r2, [r5, #0]
   12af2:	731a      	strb	r2, [r3, #12]
   12af4:	6822      	ldr	r2, [r4, #0]
   12af6:	4618      	mov	r0, r3
   12af8:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
   12afc:	6022      	str	r2, [r4, #0]
   12afe:	f247 0101 	movw	r1, #28673	; 0x7001
   12b02:	f7ff fef3 	bl	128ec <rpc_logobj_client_request_send>
   12b06:	bb38      	cbnz	r0, 12b58 <logobj_interface_open+0xd8>
   12b08:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
   12b0c:	f04f 33ff 	mov.w	r3, #4294967295
   12b10:	4611      	mov	r1, r2
   12b12:	4630      	mov	r0, r6
   12b14:	f006 f8ee 	bl	18cf4 <interface_socket_wait>
   12b18:	4604      	mov	r4, r0
   12b1a:	b310      	cbz	r0, 12b62 <logobj_interface_open+0xe2>
   12b1c:	9a00      	ldr	r2, [sp, #0]
   12b1e:	2e00      	cmp	r6, #0
   12b20:	6813      	ldr	r3, [r2, #0]
   12b22:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   12b26:	6013      	str	r3, [r2, #0]
   12b28:	9a00      	ldr	r2, [sp, #0]
   12b2a:	6813      	ldr	r3, [r2, #0]
   12b2c:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
   12b30:	6013      	str	r3, [r2, #0]
   12b32:	9a00      	ldr	r2, [sp, #0]
   12b34:	6813      	ldr	r3, [r2, #0]
   12b36:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
   12b3a:	6013      	str	r3, [r2, #0]
   12b3c:	da36      	bge.n	12bac <logobj_interface_open+0x12c>
   12b3e:	2300      	movs	r3, #0
   12b40:	4620      	mov	r0, r4
   12b42:	603b      	str	r3, [r7, #0]
   12b44:	f04f 36ff 	mov.w	r6, #4294967295
   12b48:	f7fe fa88 	bl	1105c <bsd_os_errno_set>
   12b4c:	4630      	mov	r0, r6
   12b4e:	b002      	add	sp, #8
   12b50:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   12b54:	240c      	movs	r4, #12
   12b56:	e7e1      	b.n	12b1c <logobj_interface_open+0x9c>
   12b58:	9801      	ldr	r0, [sp, #4]
   12b5a:	f7ff fedd 	bl	12918 <rpc_logobj_client_message_free>
   12b5e:	2405      	movs	r4, #5
   12b60:	e7dc      	b.n	12b1c <logobj_interface_open+0x9c>
   12b62:	4630      	mov	r0, r6
   12b64:	f006 f93a 	bl	18ddc <interface_socket_from_handle_get>
   12b68:	b150      	cbz	r0, 12b80 <logobj_interface_open+0x100>
   12b6a:	6844      	ldr	r4, [r0, #4]
   12b6c:	b144      	cbz	r4, 12b80 <logobj_interface_open+0x100>
   12b6e:	2300      	movs	r3, #0
   12b70:	6043      	str	r3, [r0, #4]
   12b72:	e7d3      	b.n	12b1c <logobj_interface_open+0x9c>
   12b74:	2016      	movs	r0, #22
   12b76:	f7fe fa71 	bl	1105c <bsd_os_errno_set>
   12b7a:	f04f 36ff 	mov.w	r6, #4294967295
   12b7e:	e7e5      	b.n	12b4c <logobj_interface_open+0xcc>
   12b80:	9a00      	ldr	r2, [sp, #0]
   12b82:	6813      	ldr	r3, [r2, #0]
   12b84:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   12b88:	6013      	str	r3, [r2, #0]
   12b8a:	9a00      	ldr	r2, [sp, #0]
   12b8c:	6813      	ldr	r3, [r2, #0]
   12b8e:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
   12b92:	6013      	str	r3, [r2, #0]
   12b94:	9a00      	ldr	r2, [sp, #0]
   12b96:	6813      	ldr	r3, [r2, #0]
   12b98:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
   12b9c:	6013      	str	r3, [r2, #0]
   12b9e:	e7d5      	b.n	12b4c <logobj_interface_open+0xcc>
   12ba0:	2001      	movs	r0, #1
   12ba2:	f7fe fa5b 	bl	1105c <bsd_os_errno_set>
   12ba6:	f04f 36ff 	mov.w	r6, #4294967295
   12baa:	e7cf      	b.n	12b4c <logobj_interface_open+0xcc>
   12bac:	4630      	mov	r0, r6
   12bae:	f006 f853 	bl	18c58 <interface_socket_free>
   12bb2:	e7c4      	b.n	12b3e <logobj_interface_open+0xbe>
   12bb4:	2018      	movs	r0, #24
   12bb6:	f7fe fa51 	bl	1105c <bsd_os_errno_set>
   12bba:	f04f 36ff 	mov.w	r6, #4294967295
   12bbe:	e7c5      	b.n	12b4c <logobj_interface_open+0xcc>
   12bc0:	2002032c 	.word	0x2002032c
   12bc4:	00012939 	.word	0x00012939
   12bc8:	20020328 	.word	0x20020328
   12bcc:	20022688 	.word	0x20022688

00012bd0 <logobj_interface_read>:
   12bd0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   12bd4:	b085      	sub	sp, #20
   12bd6:	2900      	cmp	r1, #0
   12bd8:	d068      	beq.n	12cac <logobj_interface_read+0xdc>
   12bda:	2a00      	cmp	r2, #0
   12bdc:	4617      	mov	r7, r2
   12bde:	dd65      	ble.n	12cac <logobj_interface_read+0xdc>
   12be0:	461d      	mov	r5, r3
   12be2:	4680      	mov	r8, r0
   12be4:	460e      	mov	r6, r1
   12be6:	f006 f8f9 	bl	18ddc <interface_socket_from_handle_get>
   12bea:	4604      	mov	r4, r0
   12bec:	2800      	cmp	r0, #0
   12bee:	d063      	beq.n	12cb8 <logobj_interface_read+0xe8>
   12bf0:	bb4d      	cbnz	r5, 12c46 <logobj_interface_read+0x76>
   12bf2:	69e0      	ldr	r0, [r4, #28]
   12bf4:	07aa      	lsls	r2, r5, #30
   12bf6:	6803      	ldr	r3, [r0, #0]
   12bf8:	68db      	ldr	r3, [r3, #12]
   12bfa:	d52d      	bpl.n	12c58 <logobj_interface_read+0x88>
   12bfc:	4798      	blx	r3
   12bfe:	3001      	adds	r0, #1
   12c00:	d044      	beq.n	12c8c <logobj_interface_read+0xbc>
   12c02:	6823      	ldr	r3, [r4, #0]
   12c04:	69e0      	ldr	r0, [r4, #28]
   12c06:	f413 3380 	ands.w	r3, r3, #65536	; 0x10000
   12c0a:	d041      	beq.n	12c90 <logobj_interface_read+0xc0>
   12c0c:	2100      	movs	r1, #0
   12c0e:	6823      	ldr	r3, [r4, #0]
   12c10:	462a      	mov	r2, r5
   12c12:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
   12c16:	6023      	str	r3, [r4, #0]
   12c18:	e9cd 1102 	strd	r1, r1, [sp, #8]
   12c1c:	e9cd 6700 	strd	r6, r7, [sp]
   12c20:	6803      	ldr	r3, [r0, #0]
   12c22:	4669      	mov	r1, sp
   12c24:	689b      	ldr	r3, [r3, #8]
   12c26:	4798      	blx	r3
   12c28:	4605      	mov	r5, r0
   12c2a:	69e0      	ldr	r0, [r4, #28]
   12c2c:	6803      	ldr	r3, [r0, #0]
   12c2e:	68db      	ldr	r3, [r3, #12]
   12c30:	4798      	blx	r3
   12c32:	3001      	adds	r0, #1
   12c34:	d003      	beq.n	12c3e <logobj_interface_read+0x6e>
   12c36:	6823      	ldr	r3, [r4, #0]
   12c38:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   12c3c:	6023      	str	r3, [r4, #0]
   12c3e:	4628      	mov	r0, r5
   12c40:	b005      	add	sp, #20
   12c42:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   12c46:	f015 0f0a 	tst.w	r5, #10
   12c4a:	d1d2      	bne.n	12bf2 <logobj_interface_read+0x22>
   12c4c:	202d      	movs	r0, #45	; 0x2d
   12c4e:	f7fe fa05 	bl	1105c <bsd_os_errno_set>
   12c52:	f04f 35ff 	mov.w	r5, #4294967295
   12c56:	e7f2      	b.n	12c3e <logobj_interface_read+0x6e>
   12c58:	6822      	ldr	r2, [r4, #0]
   12c5a:	f012 5980 	ands.w	r9, r2, #268435456	; 0x10000000
   12c5e:	d1cd      	bne.n	12bfc <logobj_interface_read+0x2c>
   12c60:	4798      	blx	r3
   12c62:	1c43      	adds	r3, r0, #1
   12c64:	d1cd      	bne.n	12c02 <logobj_interface_read+0x32>
   12c66:	f44f 3280 	mov.w	r2, #65536	; 0x10000
   12c6a:	6a23      	ldr	r3, [r4, #32]
   12c6c:	4611      	mov	r1, r2
   12c6e:	2b00      	cmp	r3, #0
   12c70:	bf08      	it	eq
   12c72:	4603      	moveq	r3, r0
   12c74:	4640      	mov	r0, r8
   12c76:	f006 f83d 	bl	18cf4 <interface_socket_wait>
   12c7a:	b158      	cbz	r0, 12c94 <logobj_interface_read+0xc4>
   12c7c:	f04f 35ff 	mov.w	r5, #4294967295
   12c80:	f7fe f9ec 	bl	1105c <bsd_os_errno_set>
   12c84:	4628      	mov	r0, r5
   12c86:	b005      	add	sp, #20
   12c88:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   12c8c:	2023      	movs	r0, #35	; 0x23
   12c8e:	e7f5      	b.n	12c7c <logobj_interface_read+0xac>
   12c90:	461d      	mov	r5, r3
   12c92:	e7cb      	b.n	12c2c <logobj_interface_read+0x5c>
   12c94:	4640      	mov	r0, r8
   12c96:	f006 f8a1 	bl	18ddc <interface_socket_from_handle_get>
   12c9a:	4603      	mov	r3, r0
   12c9c:	2800      	cmp	r0, #0
   12c9e:	d0b0      	beq.n	12c02 <logobj_interface_read+0x32>
   12ca0:	6840      	ldr	r0, [r0, #4]
   12ca2:	2800      	cmp	r0, #0
   12ca4:	d0ad      	beq.n	12c02 <logobj_interface_read+0x32>
   12ca6:	f8c3 9004 	str.w	r9, [r3, #4]
   12caa:	e7e7      	b.n	12c7c <logobj_interface_read+0xac>
   12cac:	2016      	movs	r0, #22
   12cae:	f7fe f9d5 	bl	1105c <bsd_os_errno_set>
   12cb2:	f04f 35ff 	mov.w	r5, #4294967295
   12cb6:	e7c2      	b.n	12c3e <logobj_interface_read+0x6e>
   12cb8:	2009      	movs	r0, #9
   12cba:	f7fe f9cf 	bl	1105c <bsd_os_errno_set>
   12cbe:	f04f 35ff 	mov.w	r5, #4294967295
   12cc2:	e7bc      	b.n	12c3e <logobj_interface_read+0x6e>

00012cc4 <logobj_interface_write>:
   12cc4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   12cc8:	b082      	sub	sp, #8
   12cca:	2900      	cmp	r1, #0
   12ccc:	d05e      	beq.n	12d8c <logobj_interface_write+0xc8>
   12cce:	2a04      	cmp	r2, #4
   12cd0:	d15c      	bne.n	12d8c <logobj_interface_write+0xc8>
   12cd2:	461e      	mov	r6, r3
   12cd4:	4607      	mov	r7, r0
   12cd6:	460d      	mov	r5, r1
   12cd8:	f006 f880 	bl	18ddc <interface_socket_from_handle_get>
   12cdc:	4604      	mov	r4, r0
   12cde:	2800      	cmp	r0, #0
   12ce0:	d070      	beq.n	12dc4 <logobj_interface_write+0x100>
   12ce2:	b1e6      	cbz	r6, 12d1e <logobj_interface_write+0x5a>
   12ce4:	07b0      	lsls	r0, r6, #30
   12ce6:	d567      	bpl.n	12db8 <logobj_interface_write+0xf4>
   12ce8:	6823      	ldr	r3, [r4, #0]
   12cea:	039b      	lsls	r3, r3, #14
   12cec:	d560      	bpl.n	12db0 <logobj_interface_write+0xec>
   12cee:	2600      	movs	r6, #0
   12cf0:	6823      	ldr	r3, [r4, #0]
   12cf2:	2100      	movs	r1, #0
   12cf4:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
   12cf8:	6023      	str	r3, [r4, #0]
   12cfa:	a801      	add	r0, sp, #4
   12cfc:	f8d5 8000 	ldr.w	r8, [r5]
   12d00:	f7ff fddc 	bl	128bc <rpc_logobj_client_request_alloc>
   12d04:	b198      	cbz	r0, 12d2e <logobj_interface_write+0x6a>
   12d06:	200c      	movs	r0, #12
   12d08:	6823      	ldr	r3, [r4, #0]
   12d0a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   12d0e:	6023      	str	r3, [r4, #0]
   12d10:	f7fe f9a4 	bl	1105c <bsd_os_errno_set>
   12d14:	f04f 30ff 	mov.w	r0, #4294967295
   12d18:	b002      	add	sp, #8
   12d1a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   12d1e:	6803      	ldr	r3, [r0, #0]
   12d20:	00d9      	lsls	r1, r3, #3
   12d22:	d4e1      	bmi.n	12ce8 <logobj_interface_write+0x24>
   12d24:	6803      	ldr	r3, [r0, #0]
   12d26:	039a      	lsls	r2, r3, #14
   12d28:	d544      	bpl.n	12db4 <logobj_interface_write+0xf0>
   12d2a:	2601      	movs	r6, #1
   12d2c:	e7e0      	b.n	12cf0 <logobj_interface_write+0x2c>
   12d2e:	2504      	movs	r5, #4
   12d30:	9b01      	ldr	r3, [sp, #4]
   12d32:	f247 0103 	movw	r1, #28675	; 0x7003
   12d36:	f8c3 800c 	str.w	r8, [r3, #12]
   12d3a:	7258      	strb	r0, [r3, #9]
   12d3c:	7298      	strb	r0, [r3, #10]
   12d3e:	72d8      	strb	r0, [r3, #11]
   12d40:	721d      	strb	r5, [r3, #8]
   12d42:	4618      	mov	r0, r3
   12d44:	f7ff fdd2 	bl	128ec <rpc_logobj_client_request_send>
   12d48:	4680      	mov	r8, r0
   12d4a:	b9b0      	cbnz	r0, 12d7a <logobj_interface_write+0xb6>
   12d4c:	b93e      	cbnz	r6, 12d5e <logobj_interface_write+0x9a>
   12d4e:	4628      	mov	r0, r5
   12d50:	6823      	ldr	r3, [r4, #0]
   12d52:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   12d56:	6023      	str	r3, [r4, #0]
   12d58:	b002      	add	sp, #8
   12d5a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   12d5e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
   12d62:	f04f 33ff 	mov.w	r3, #4294967295
   12d66:	4611      	mov	r1, r2
   12d68:	4638      	mov	r0, r7
   12d6a:	f005 ffc3 	bl	18cf4 <interface_socket_wait>
   12d6e:	b198      	cbz	r0, 12d98 <logobj_interface_write+0xd4>
   12d70:	6823      	ldr	r3, [r4, #0]
   12d72:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   12d76:	6023      	str	r3, [r4, #0]
   12d78:	e7ca      	b.n	12d10 <logobj_interface_write+0x4c>
   12d7a:	9801      	ldr	r0, [sp, #4]
   12d7c:	f7ff fdcc 	bl	12918 <rpc_logobj_client_message_free>
   12d80:	6823      	ldr	r3, [r4, #0]
   12d82:	2005      	movs	r0, #5
   12d84:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   12d88:	6023      	str	r3, [r4, #0]
   12d8a:	e7c1      	b.n	12d10 <logobj_interface_write+0x4c>
   12d8c:	2016      	movs	r0, #22
   12d8e:	f7fe f965 	bl	1105c <bsd_os_errno_set>
   12d92:	f04f 30ff 	mov.w	r0, #4294967295
   12d96:	e7bf      	b.n	12d18 <logobj_interface_write+0x54>
   12d98:	4638      	mov	r0, r7
   12d9a:	f006 f81f 	bl	18ddc <interface_socket_from_handle_get>
   12d9e:	4603      	mov	r3, r0
   12da0:	2800      	cmp	r0, #0
   12da2:	d0d4      	beq.n	12d4e <logobj_interface_write+0x8a>
   12da4:	6840      	ldr	r0, [r0, #4]
   12da6:	2800      	cmp	r0, #0
   12da8:	d0d1      	beq.n	12d4e <logobj_interface_write+0x8a>
   12daa:	f8c3 8004 	str.w	r8, [r3, #4]
   12dae:	e7df      	b.n	12d70 <logobj_interface_write+0xac>
   12db0:	2073      	movs	r0, #115	; 0x73
   12db2:	e7ad      	b.n	12d10 <logobj_interface_write+0x4c>
   12db4:	2009      	movs	r0, #9
   12db6:	e7ab      	b.n	12d10 <logobj_interface_write+0x4c>
   12db8:	202d      	movs	r0, #45	; 0x2d
   12dba:	f7fe f94f 	bl	1105c <bsd_os_errno_set>
   12dbe:	f04f 30ff 	mov.w	r0, #4294967295
   12dc2:	e7a9      	b.n	12d18 <logobj_interface_write+0x54>
   12dc4:	2009      	movs	r0, #9
   12dc6:	f7fe f949 	bl	1105c <bsd_os_errno_set>
   12dca:	f04f 30ff 	mov.w	r0, #4294967295
   12dce:	e7a3      	b.n	12d18 <logobj_interface_write+0x54>

00012dd0 <logobj_interface_setopt>:
   12dd0:	b5f0      	push	{r4, r5, r6, r7, lr}
   12dd2:	2901      	cmp	r1, #1
   12dd4:	b085      	sub	sp, #20
   12dd6:	d068      	beq.n	12eaa <logobj_interface_setopt+0xda>
   12dd8:	461e      	mov	r6, r3
   12dda:	f240 2305 	movw	r3, #517	; 0x205
   12dde:	4299      	cmp	r1, r3
   12de0:	f040 8095 	bne.w	12f0e <logobj_interface_setopt+0x13e>
   12de4:	4607      	mov	r7, r0
   12de6:	4615      	mov	r5, r2
   12de8:	f005 fff8 	bl	18ddc <interface_socket_from_handle_get>
   12dec:	4604      	mov	r4, r0
   12dee:	2800      	cmp	r0, #0
   12df0:	f000 80b2 	beq.w	12f58 <logobj_interface_setopt+0x188>
   12df4:	2d01      	cmp	r5, #1
   12df6:	d019      	beq.n	12e2c <logobj_interface_setopt+0x5c>
   12df8:	2d02      	cmp	r5, #2
   12dfa:	d010      	beq.n	12e1e <logobj_interface_setopt+0x4e>
   12dfc:	252a      	movs	r5, #42	; 0x2a
   12dfe:	6803      	ldr	r3, [r0, #0]
   12e00:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
   12e04:	6023      	str	r3, [r4, #0]
   12e06:	6823      	ldr	r3, [r4, #0]
   12e08:	4628      	mov	r0, r5
   12e0a:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
   12e0e:	6023      	str	r3, [r4, #0]
   12e10:	f7fe f924 	bl	1105c <bsd_os_errno_set>
   12e14:	f04f 35ff 	mov.w	r5, #4294967295
   12e18:	4628      	mov	r0, r5
   12e1a:	b005      	add	sp, #20
   12e1c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   12e1e:	b116      	cbz	r6, 12e26 <logobj_interface_setopt+0x56>
   12e20:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   12e22:	2b01      	cmp	r3, #1
   12e24:	d049      	beq.n	12eba <logobj_interface_setopt+0xea>
   12e26:	6823      	ldr	r3, [r4, #0]
   12e28:	2516      	movs	r5, #22
   12e2a:	e7e9      	b.n	12e00 <logobj_interface_setopt+0x30>
   12e2c:	2e00      	cmp	r6, #0
   12e2e:	d0fa      	beq.n	12e26 <logobj_interface_setopt+0x56>
   12e30:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   12e32:	2b04      	cmp	r3, #4
   12e34:	d1f7      	bne.n	12e26 <logobj_interface_setopt+0x56>
   12e36:	2100      	movs	r1, #0
   12e38:	a803      	add	r0, sp, #12
   12e3a:	f7ff fd3f 	bl	128bc <rpc_logobj_client_request_alloc>
   12e3e:	4605      	mov	r5, r0
   12e40:	2800      	cmp	r0, #0
   12e42:	d16a      	bne.n	12f1a <logobj_interface_setopt+0x14a>
   12e44:	9803      	ldr	r0, [sp, #12]
   12e46:	2208      	movs	r2, #8
   12e48:	4629      	mov	r1, r5
   12e4a:	300c      	adds	r0, #12
   12e4c:	f00e fd82 	bl	21954 <memset>
   12e50:	9803      	ldr	r0, [sp, #12]
   12e52:	4631      	mov	r1, r6
   12e54:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   12e56:	300c      	adds	r0, #12
   12e58:	f00e fd6f 	bl	2193a <memcpy>
   12e5c:	2308      	movs	r3, #8
   12e5e:	9803      	ldr	r0, [sp, #12]
   12e60:	f247 0102 	movw	r1, #28674	; 0x7002
   12e64:	7203      	strb	r3, [r0, #8]
   12e66:	7245      	strb	r5, [r0, #9]
   12e68:	7285      	strb	r5, [r0, #10]
   12e6a:	72c5      	strb	r5, [r0, #11]
   12e6c:	6823      	ldr	r3, [r4, #0]
   12e6e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
   12e72:	6023      	str	r3, [r4, #0]
   12e74:	f7ff fd3a 	bl	128ec <rpc_logobj_client_request_send>
   12e78:	2800      	cmp	r0, #0
   12e7a:	d151      	bne.n	12f20 <logobj_interface_setopt+0x150>
   12e7c:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
   12e80:	f04f 33ff 	mov.w	r3, #4294967295
   12e84:	4611      	mov	r1, r2
   12e86:	4638      	mov	r0, r7
   12e88:	f005 ff34 	bl	18cf4 <interface_socket_wait>
   12e8c:	4605      	mov	r5, r0
   12e8e:	2800      	cmp	r0, #0
   12e90:	d13b      	bne.n	12f0a <logobj_interface_setopt+0x13a>
   12e92:	4638      	mov	r0, r7
   12e94:	f005 ffa2 	bl	18ddc <interface_socket_from_handle_get>
   12e98:	2800      	cmp	r0, #0
   12e9a:	d04f      	beq.n	12f3c <logobj_interface_setopt+0x16c>
   12e9c:	6843      	ldr	r3, [r0, #4]
   12e9e:	2b00      	cmp	r3, #0
   12ea0:	d04c      	beq.n	12f3c <logobj_interface_setopt+0x16c>
   12ea2:	2200      	movs	r2, #0
   12ea4:	461d      	mov	r5, r3
   12ea6:	6042      	str	r2, [r0, #4]
   12ea8:	e02f      	b.n	12f0a <logobj_interface_setopt+0x13a>
   12eaa:	9c0a      	ldr	r4, [sp, #40]	; 0x28
   12eac:	9400      	str	r4, [sp, #0]
   12eae:	f005 ffbd 	bl	18e2c <interface_socket_setopt>
   12eb2:	4605      	mov	r5, r0
   12eb4:	4628      	mov	r0, r5
   12eb6:	b005      	add	sp, #20
   12eb8:	bdf0      	pop	{r4, r5, r6, r7, pc}
   12eba:	2100      	movs	r1, #0
   12ebc:	a803      	add	r0, sp, #12
   12ebe:	7835      	ldrb	r5, [r6, #0]
   12ec0:	f7ff fcfc 	bl	128bc <rpc_logobj_client_request_alloc>
   12ec4:	bb48      	cbnz	r0, 12f1a <logobj_interface_setopt+0x14a>
   12ec6:	2d01      	cmp	r5, #1
   12ec8:	bf08      	it	eq
   12eca:	4b26      	ldreq	r3, [pc, #152]	; (12f64 <logobj_interface_setopt+0x194>)
   12ecc:	f04f 0204 	mov.w	r2, #4
   12ed0:	bf08      	it	eq
   12ed2:	701d      	strbeq	r5, [r3, #0]
   12ed4:	2300      	movs	r3, #0
   12ed6:	9803      	ldr	r0, [sp, #12]
   12ed8:	f247 0101 	movw	r1, #28673	; 0x7001
   12edc:	7243      	strb	r3, [r0, #9]
   12ede:	60c5      	str	r5, [r0, #12]
   12ee0:	7283      	strb	r3, [r0, #10]
   12ee2:	72c3      	strb	r3, [r0, #11]
   12ee4:	7202      	strb	r2, [r0, #8]
   12ee6:	6823      	ldr	r3, [r4, #0]
   12ee8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
   12eec:	6023      	str	r3, [r4, #0]
   12eee:	f7ff fcfd 	bl	128ec <rpc_logobj_client_request_send>
   12ef2:	4606      	mov	r6, r0
   12ef4:	b9a0      	cbnz	r0, 12f20 <logobj_interface_setopt+0x150>
   12ef6:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
   12efa:	f04f 33ff 	mov.w	r3, #4294967295
   12efe:	4611      	mov	r1, r2
   12f00:	4638      	mov	r0, r7
   12f02:	f005 fef7 	bl	18cf4 <interface_socket_wait>
   12f06:	4605      	mov	r5, r0
   12f08:	b180      	cbz	r0, 12f2c <logobj_interface_setopt+0x15c>
   12f0a:	6823      	ldr	r3, [r4, #0]
   12f0c:	e778      	b.n	12e00 <logobj_interface_setopt+0x30>
   12f0e:	202a      	movs	r0, #42	; 0x2a
   12f10:	f7fe f8a4 	bl	1105c <bsd_os_errno_set>
   12f14:	f04f 35ff 	mov.w	r5, #4294967295
   12f18:	e77e      	b.n	12e18 <logobj_interface_setopt+0x48>
   12f1a:	6823      	ldr	r3, [r4, #0]
   12f1c:	250c      	movs	r5, #12
   12f1e:	e76f      	b.n	12e00 <logobj_interface_setopt+0x30>
   12f20:	9803      	ldr	r0, [sp, #12]
   12f22:	f7ff fcf9 	bl	12918 <rpc_logobj_client_message_free>
   12f26:	2505      	movs	r5, #5
   12f28:	6823      	ldr	r3, [r4, #0]
   12f2a:	e769      	b.n	12e00 <logobj_interface_setopt+0x30>
   12f2c:	4638      	mov	r0, r7
   12f2e:	f005 ff55 	bl	18ddc <interface_socket_from_handle_get>
   12f32:	b140      	cbz	r0, 12f46 <logobj_interface_setopt+0x176>
   12f34:	6845      	ldr	r5, [r0, #4]
   12f36:	b135      	cbz	r5, 12f46 <logobj_interface_setopt+0x176>
   12f38:	6046      	str	r6, [r0, #4]
   12f3a:	e7e6      	b.n	12f0a <logobj_interface_setopt+0x13a>
   12f3c:	4631      	mov	r1, r6
   12f3e:	2204      	movs	r2, #4
   12f40:	4809      	ldr	r0, [pc, #36]	; (12f68 <logobj_interface_setopt+0x198>)
   12f42:	f00e fcfa 	bl	2193a <memcpy>
   12f46:	6823      	ldr	r3, [r4, #0]
   12f48:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
   12f4c:	6023      	str	r3, [r4, #0]
   12f4e:	6823      	ldr	r3, [r4, #0]
   12f50:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
   12f54:	6023      	str	r3, [r4, #0]
   12f56:	e75f      	b.n	12e18 <logobj_interface_setopt+0x48>
   12f58:	2009      	movs	r0, #9
   12f5a:	f7fe f87f 	bl	1105c <bsd_os_errno_set>
   12f5e:	f04f 35ff 	mov.w	r5, #4294967295
   12f62:	e759      	b.n	12e18 <logobj_interface_setopt+0x48>
   12f64:	20022688 	.word	0x20022688
   12f68:	20020328 	.word	0x20020328

00012f6c <logobj_interface_getopt>:
   12f6c:	b5f0      	push	{r4, r5, r6, r7, lr}
   12f6e:	2901      	cmp	r1, #1
   12f70:	b083      	sub	sp, #12
   12f72:	9e08      	ldr	r6, [sp, #32]
   12f74:	d030      	beq.n	12fd8 <logobj_interface_getopt+0x6c>
   12f76:	461f      	mov	r7, r3
   12f78:	f240 2305 	movw	r3, #517	; 0x205
   12f7c:	4299      	cmp	r1, r3
   12f7e:	d134      	bne.n	12fea <logobj_interface_getopt+0x7e>
   12f80:	4615      	mov	r5, r2
   12f82:	f005 ff2b 	bl	18ddc <interface_socket_from_handle_get>
   12f86:	2800      	cmp	r0, #0
   12f88:	d037      	beq.n	12ffa <logobj_interface_getopt+0x8e>
   12f8a:	2d01      	cmp	r5, #1
   12f8c:	d015      	beq.n	12fba <logobj_interface_getopt+0x4e>
   12f8e:	2d02      	cmp	r5, #2
   12f90:	d10b      	bne.n	12faa <logobj_interface_getopt+0x3e>
   12f92:	b387      	cbz	r7, 12ff6 <logobj_interface_getopt+0x8a>
   12f94:	6833      	ldr	r3, [r6, #0]
   12f96:	b373      	cbz	r3, 12ff6 <logobj_interface_getopt+0x8a>
   12f98:	2300      	movs	r3, #0
   12f9a:	2201      	movs	r2, #1
   12f9c:	4618      	mov	r0, r3
   12f9e:	491a      	ldr	r1, [pc, #104]	; (13008 <logobj_interface_getopt+0x9c>)
   12fa0:	7809      	ldrb	r1, [r1, #0]
   12fa2:	7039      	strb	r1, [r7, #0]
   12fa4:	6032      	str	r2, [r6, #0]
   12fa6:	b003      	add	sp, #12
   12fa8:	bdf0      	pop	{r4, r5, r6, r7, pc}
   12faa:	2009      	movs	r0, #9
   12fac:	f7fe f856 	bl	1105c <bsd_os_errno_set>
   12fb0:	f04f 33ff 	mov.w	r3, #4294967295
   12fb4:	4618      	mov	r0, r3
   12fb6:	b003      	add	sp, #12
   12fb8:	bdf0      	pop	{r4, r5, r6, r7, pc}
   12fba:	b1e7      	cbz	r7, 12ff6 <logobj_interface_getopt+0x8a>
   12fbc:	6833      	ldr	r3, [r6, #0]
   12fbe:	2b03      	cmp	r3, #3
   12fc0:	d919      	bls.n	12ff6 <logobj_interface_getopt+0x8a>
   12fc2:	4638      	mov	r0, r7
   12fc4:	2204      	movs	r2, #4
   12fc6:	4911      	ldr	r1, [pc, #68]	; (1300c <logobj_interface_getopt+0xa0>)
   12fc8:	f00e fcb7 	bl	2193a <memcpy>
   12fcc:	2300      	movs	r3, #0
   12fce:	2204      	movs	r2, #4
   12fd0:	4618      	mov	r0, r3
   12fd2:	6032      	str	r2, [r6, #0]
   12fd4:	b003      	add	sp, #12
   12fd6:	bdf0      	pop	{r4, r5, r6, r7, pc}
   12fd8:	9600      	str	r6, [sp, #0]
   12fda:	f005 ff69 	bl	18eb0 <interface_socket_getopt>
   12fde:	4603      	mov	r3, r0
   12fe0:	2800      	cmp	r0, #0
   12fe2:	d1e3      	bne.n	12fac <logobj_interface_getopt+0x40>
   12fe4:	4618      	mov	r0, r3
   12fe6:	b003      	add	sp, #12
   12fe8:	bdf0      	pop	{r4, r5, r6, r7, pc}
   12fea:	202a      	movs	r0, #42	; 0x2a
   12fec:	f7fe f836 	bl	1105c <bsd_os_errno_set>
   12ff0:	f04f 33ff 	mov.w	r3, #4294967295
   12ff4:	e7de      	b.n	12fb4 <logobj_interface_getopt+0x48>
   12ff6:	2016      	movs	r0, #22
   12ff8:	e7d8      	b.n	12fac <logobj_interface_getopt+0x40>
   12ffa:	2009      	movs	r0, #9
   12ffc:	f7fe f82e 	bl	1105c <bsd_os_errno_set>
   13000:	f04f 33ff 	mov.w	r3, #4294967295
   13004:	e7d6      	b.n	12fb4 <logobj_interface_getopt+0x48>
   13006:	bf00      	nop
   13008:	20022689 	.word	0x20022689
   1300c:	20020328 	.word	0x20020328

00013010 <logobj_interface_close>:
   13010:	b510      	push	{r4, lr}
   13012:	4604      	mov	r4, r0
   13014:	f005 fee2 	bl	18ddc <interface_socket_from_handle_get>
   13018:	b138      	cbz	r0, 1302a <logobj_interface_close+0x1a>
   1301a:	4620      	mov	r0, r4
   1301c:	f005 fe1c 	bl	18c58 <interface_socket_free>
   13020:	2300      	movs	r3, #0
   13022:	4a05      	ldr	r2, [pc, #20]	; (13038 <logobj_interface_close+0x28>)
   13024:	4618      	mov	r0, r3
   13026:	6013      	str	r3, [r2, #0]
   13028:	bd10      	pop	{r4, pc}
   1302a:	2009      	movs	r0, #9
   1302c:	f7fe f816 	bl	1105c <bsd_os_errno_set>
   13030:	f04f 30ff 	mov.w	r0, #4294967295
   13034:	bd10      	pop	{r4, pc}
   13036:	bf00      	nop
   13038:	2002032c 	.word	0x2002032c

0001303c <packet_free_cb>:
   1303c:	6800      	ldr	r0, [r0, #0]
   1303e:	f004 b9ef 	b.w	17420 <rpc_at_client_data_free>
   13042:	bf00      	nop

00013044 <at_interface_write>:
   13044:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   13048:	b082      	sub	sp, #8
   1304a:	9c08      	ldr	r4, [sp, #32]
   1304c:	2c00      	cmp	r4, #0
   1304e:	d15b      	bne.n	13108 <at_interface_write+0xc4>
   13050:	460f      	mov	r7, r1
   13052:	4615      	mov	r5, r2
   13054:	4698      	mov	r8, r3
   13056:	4606      	mov	r6, r0
   13058:	f005 fec0 	bl	18ddc <interface_socket_from_handle_get>
   1305c:	4604      	mov	r4, r0
   1305e:	f1b8 0f00 	cmp.w	r8, #0
   13062:	d12b      	bne.n	130bc <at_interface_write+0x78>
   13064:	2800      	cmp	r0, #0
   13066:	d055      	beq.n	13114 <at_interface_write+0xd0>
   13068:	6803      	ldr	r3, [r0, #0]
   1306a:	039b      	lsls	r3, r3, #14
   1306c:	d552      	bpl.n	13114 <at_interface_write+0xd0>
   1306e:	6803      	ldr	r3, [r0, #0]
   13070:	4629      	mov	r1, r5
   13072:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
   13076:	6003      	str	r3, [r0, #0]
   13078:	6803      	ldr	r3, [r0, #0]
   1307a:	a801      	add	r0, sp, #4
   1307c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
   13080:	6023      	str	r3, [r4, #0]
   13082:	f004 f9a3 	bl	173cc <rpc_at_client_request_alloc>
   13086:	bb08      	cbnz	r0, 130cc <at_interface_write+0x88>
   13088:	2204      	movs	r2, #4
   1308a:	9b01      	ldr	r3, [sp, #4]
   1308c:	721a      	strb	r2, [r3, #8]
   1308e:	7258      	strb	r0, [r3, #9]
   13090:	7298      	strb	r0, [r3, #10]
   13092:	72d8      	strb	r0, [r3, #11]
   13094:	60de      	str	r6, [r3, #12]
   13096:	b9fd      	cbnz	r5, 130d8 <at_interface_write+0x94>
   13098:	4618      	mov	r0, r3
   1309a:	2101      	movs	r1, #1
   1309c:	f004 f9aa 	bl	173f4 <rpc_at_client_request_send>
   130a0:	bb48      	cbnz	r0, 130f6 <at_interface_write+0xb2>
   130a2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
   130a6:	4630      	mov	r0, r6
   130a8:	4611      	mov	r1, r2
   130aa:	f04f 33ff 	mov.w	r3, #4294967295
   130ae:	f005 fe21 	bl	18cf4 <interface_socket_wait>
   130b2:	b960      	cbnz	r0, 130ce <at_interface_write+0x8a>
   130b4:	4628      	mov	r0, r5
   130b6:	b002      	add	sp, #8
   130b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   130bc:	b360      	cbz	r0, 13118 <at_interface_write+0xd4>
   130be:	6803      	ldr	r3, [r0, #0]
   130c0:	202d      	movs	r0, #45	; 0x2d
   130c2:	f7fd ffcb 	bl	1105c <bsd_os_errno_set>
   130c6:	f04f 30ff 	mov.w	r0, #4294967295
   130ca:	e7f4      	b.n	130b6 <at_interface_write+0x72>
   130cc:	200c      	movs	r0, #12
   130ce:	6823      	ldr	r3, [r4, #0]
   130d0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   130d4:	6023      	str	r3, [r4, #0]
   130d6:	e7f4      	b.n	130c2 <at_interface_write+0x7e>
   130d8:	4639      	mov	r1, r7
   130da:	6818      	ldr	r0, [r3, #0]
   130dc:	462a      	mov	r2, r5
   130de:	f00e fc2c 	bl	2193a <memcpy>
   130e2:	2101      	movs	r1, #1
   130e4:	9801      	ldr	r0, [sp, #4]
   130e6:	f004 f985 	bl	173f4 <rpc_at_client_request_send>
   130ea:	2800      	cmp	r0, #0
   130ec:	d0d9      	beq.n	130a2 <at_interface_write+0x5e>
   130ee:	9b01      	ldr	r3, [sp, #4]
   130f0:	6818      	ldr	r0, [r3, #0]
   130f2:	f004 f995 	bl	17420 <rpc_at_client_data_free>
   130f6:	9801      	ldr	r0, [sp, #4]
   130f8:	f004 f98a 	bl	17410 <rpc_at_client_message_free>
   130fc:	6823      	ldr	r3, [r4, #0]
   130fe:	2023      	movs	r0, #35	; 0x23
   13100:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   13104:	6023      	str	r3, [r4, #0]
   13106:	e7dc      	b.n	130c2 <at_interface_write+0x7e>
   13108:	2038      	movs	r0, #56	; 0x38
   1310a:	f7fd ffa7 	bl	1105c <bsd_os_errno_set>
   1310e:	f04f 30ff 	mov.w	r0, #4294967295
   13112:	e7d0      	b.n	130b6 <at_interface_write+0x72>
   13114:	2016      	movs	r0, #22
   13116:	e7d4      	b.n	130c2 <at_interface_write+0x7e>
   13118:	202d      	movs	r0, #45	; 0x2d
   1311a:	e7d2      	b.n	130c2 <at_interface_write+0x7e>

0001311c <at_interface_init>:
   1311c:	f004 b950 	b.w	173c0 <rpc_at_client_init>

00013120 <at_interface_open>:
   13120:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   13124:	2600      	movs	r6, #0
   13126:	b082      	sub	sp, #8
   13128:	2902      	cmp	r1, #2
   1312a:	9600      	str	r6, [sp, #0]
   1312c:	d13e      	bne.n	131ac <at_interface_open+0x8c>
   1312e:	4680      	mov	r8, r0
   13130:	4617      	mov	r7, r2
   13132:	4668      	mov	r0, sp
   13134:	4a20      	ldr	r2, [pc, #128]	; (131b8 <at_interface_open+0x98>)
   13136:	460c      	mov	r4, r1
   13138:	f005 fd2a 	bl	18b90 <interface_socket_allocate>
   1313c:	9b00      	ldr	r3, [sp, #0]
   1313e:	4605      	mov	r5, r0
   13140:	b30b      	cbz	r3, 13186 <at_interface_open+0x66>
   13142:	e9c3 8403 	strd	r8, r4, [r3, #12]
   13146:	615f      	str	r7, [r3, #20]
   13148:	4631      	mov	r1, r6
   1314a:	a801      	add	r0, sp, #4
   1314c:	f004 f93e 	bl	173cc <rpc_at_client_request_alloc>
   13150:	bb50      	cbnz	r0, 131a8 <at_interface_open+0x88>
   13152:	2204      	movs	r2, #4
   13154:	9b01      	ldr	r3, [sp, #4]
   13156:	2105      	movs	r1, #5
   13158:	7258      	strb	r0, [r3, #9]
   1315a:	7298      	strb	r0, [r3, #10]
   1315c:	72d8      	strb	r0, [r3, #11]
   1315e:	721a      	strb	r2, [r3, #8]
   13160:	60dd      	str	r5, [r3, #12]
   13162:	4618      	mov	r0, r3
   13164:	f004 f946 	bl	173f4 <rpc_at_client_request_send>
   13168:	b988      	cbnz	r0, 1318e <at_interface_open+0x6e>
   1316a:	4622      	mov	r2, r4
   1316c:	4621      	mov	r1, r4
   1316e:	f04f 33ff 	mov.w	r3, #4294967295
   13172:	4628      	mov	r0, r5
   13174:	f005 fdbe 	bl	18cf4 <interface_socket_wait>
   13178:	4604      	mov	r4, r0
   1317a:	b960      	cbnz	r0, 13196 <at_interface_open+0x76>
   1317c:	9a00      	ldr	r2, [sp, #0]
   1317e:	6813      	ldr	r3, [r2, #0]
   13180:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   13184:	6013      	str	r3, [r2, #0]
   13186:	4628      	mov	r0, r5
   13188:	b002      	add	sp, #8
   1318a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1318e:	9801      	ldr	r0, [sp, #4]
   13190:	f004 f93e 	bl	17410 <rpc_at_client_message_free>
   13194:	2423      	movs	r4, #35	; 0x23
   13196:	4628      	mov	r0, r5
   13198:	f005 fd5e 	bl	18c58 <interface_socket_free>
   1319c:	4620      	mov	r0, r4
   1319e:	f7fd ff5d 	bl	1105c <bsd_os_errno_set>
   131a2:	f04f 35ff 	mov.w	r5, #4294967295
   131a6:	e7ee      	b.n	13186 <at_interface_open+0x66>
   131a8:	240c      	movs	r4, #12
   131aa:	e7f4      	b.n	13196 <at_interface_open+0x76>
   131ac:	2029      	movs	r0, #41	; 0x29
   131ae:	f7fd ff55 	bl	1105c <bsd_os_errno_set>
   131b2:	f04f 35ff 	mov.w	r5, #4294967295
   131b6:	e7e6      	b.n	13186 <at_interface_open+0x66>
   131b8:	0001303d 	.word	0x0001303d

000131bc <at_interface_close>:
   131bc:	b5f0      	push	{r4, r5, r6, r7, lr}
   131be:	b083      	sub	sp, #12
   131c0:	4606      	mov	r6, r0
   131c2:	f005 fe0b 	bl	18ddc <interface_socket_from_handle_get>
   131c6:	2800      	cmp	r0, #0
   131c8:	d03d      	beq.n	13246 <at_interface_close+0x8a>
   131ca:	230d      	movs	r3, #13
   131cc:	6807      	ldr	r7, [r0, #0]
   131ce:	6003      	str	r3, [r0, #0]
   131d0:	6803      	ldr	r3, [r0, #0]
   131d2:	4604      	mov	r4, r0
   131d4:	039b      	lsls	r3, r3, #14
   131d6:	d41f      	bmi.n	13218 <at_interface_close+0x5c>
   131d8:	2100      	movs	r1, #0
   131da:	a801      	add	r0, sp, #4
   131dc:	f004 f8f6 	bl	173cc <rpc_at_client_request_alloc>
   131e0:	bb20      	cbnz	r0, 1322c <at_interface_close+0x70>
   131e2:	2204      	movs	r2, #4
   131e4:	9b01      	ldr	r3, [sp, #4]
   131e6:	2106      	movs	r1, #6
   131e8:	7258      	strb	r0, [r3, #9]
   131ea:	7298      	strb	r0, [r3, #10]
   131ec:	72d8      	strb	r0, [r3, #11]
   131ee:	721a      	strb	r2, [r3, #8]
   131f0:	60de      	str	r6, [r3, #12]
   131f2:	4618      	mov	r0, r3
   131f4:	f004 f8fe 	bl	173f4 <rpc_at_client_request_send>
   131f8:	b9d0      	cbnz	r0, 13230 <at_interface_close+0x74>
   131fa:	220e      	movs	r2, #14
   131fc:	f04f 33ff 	mov.w	r3, #4294967295
   13200:	4611      	mov	r1, r2
   13202:	4630      	mov	r0, r6
   13204:	f005 fd76 	bl	18cf4 <interface_socket_wait>
   13208:	4605      	mov	r5, r0
   1320a:	b9a8      	cbnz	r0, 13238 <at_interface_close+0x7c>
   1320c:	4630      	mov	r0, r6
   1320e:	f005 fd23 	bl	18c58 <interface_socket_free>
   13212:	4628      	mov	r0, r5
   13214:	b003      	add	sp, #12
   13216:	bdf0      	pop	{r4, r5, r6, r7, pc}
   13218:	6803      	ldr	r3, [r0, #0]
   1321a:	2100      	movs	r1, #0
   1321c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
   13220:	6003      	str	r3, [r0, #0]
   13222:	a801      	add	r0, sp, #4
   13224:	f004 f8d2 	bl	173cc <rpc_at_client_request_alloc>
   13228:	2800      	cmp	r0, #0
   1322a:	d0da      	beq.n	131e2 <at_interface_close+0x26>
   1322c:	250c      	movs	r5, #12
   1322e:	e003      	b.n	13238 <at_interface_close+0x7c>
   13230:	9801      	ldr	r0, [sp, #4]
   13232:	f004 f8ed 	bl	17410 <rpc_at_client_message_free>
   13236:	2523      	movs	r5, #35	; 0x23
   13238:	6027      	str	r7, [r4, #0]
   1323a:	4628      	mov	r0, r5
   1323c:	f7fd ff0e 	bl	1105c <bsd_os_errno_set>
   13240:	f04f 35ff 	mov.w	r5, #4294967295
   13244:	e7e5      	b.n	13212 <at_interface_close+0x56>
   13246:	2516      	movs	r5, #22
   13248:	e7f7      	b.n	1323a <at_interface_close+0x7e>
   1324a:	bf00      	nop

0001324c <at_interface_read>:
   1324c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   13250:	b084      	sub	sp, #16
   13252:	4688      	mov	r8, r1
   13254:	4615      	mov	r5, r2
   13256:	461e      	mov	r6, r3
   13258:	4607      	mov	r7, r0
   1325a:	f005 fdbf 	bl	18ddc <interface_socket_from_handle_get>
   1325e:	2800      	cmp	r0, #0
   13260:	d043      	beq.n	132ea <at_interface_read+0x9e>
   13262:	2300      	movs	r3, #0
   13264:	4604      	mov	r4, r0
   13266:	e9cd 8500 	strd	r8, r5, [sp]
   1326a:	e9cd 3302 	strd	r3, r3, [sp, #8]
   1326e:	bb2e      	cbnz	r6, 132bc <at_interface_read+0x70>
   13270:	f016 0502 	ands.w	r5, r6, #2
   13274:	d00d      	beq.n	13292 <at_interface_read+0x46>
   13276:	e028      	b.n	132ca <at_interface_read+0x7e>
   13278:	b9cd      	cbnz	r5, 132ae <at_interface_read+0x62>
   1327a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
   1327e:	6a23      	ldr	r3, [r4, #32]
   13280:	4611      	mov	r1, r2
   13282:	2b00      	cmp	r3, #0
   13284:	bf08      	it	eq
   13286:	f04f 33ff 	moveq.w	r3, #4294967295
   1328a:	4638      	mov	r0, r7
   1328c:	f005 fd32 	bl	18cf4 <interface_socket_wait>
   13290:	4605      	mov	r5, r0
   13292:	6823      	ldr	r3, [r4, #0]
   13294:	69e0      	ldr	r0, [r4, #28]
   13296:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
   1329a:	6023      	str	r3, [r4, #0]
   1329c:	6803      	ldr	r3, [r0, #0]
   1329e:	4632      	mov	r2, r6
   132a0:	689b      	ldr	r3, [r3, #8]
   132a2:	4669      	mov	r1, sp
   132a4:	4798      	blx	r3
   132a6:	f1b0 0800 	subs.w	r8, r0, #0
   132aa:	dbe5      	blt.n	13278 <at_interface_read+0x2c>
   132ac:	b115      	cbz	r5, 132b4 <at_interface_read+0x68>
   132ae:	4628      	mov	r0, r5
   132b0:	f7fd fed4 	bl	1105c <bsd_os_errno_set>
   132b4:	4640      	mov	r0, r8
   132b6:	b004      	add	sp, #16
   132b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   132bc:	f016 0f0a 	tst.w	r6, #10
   132c0:	d1d6      	bne.n	13270 <at_interface_read+0x24>
   132c2:	252d      	movs	r5, #45	; 0x2d
   132c4:	f04f 38ff 	mov.w	r8, #4294967295
   132c8:	e7f1      	b.n	132ae <at_interface_read+0x62>
   132ca:	6823      	ldr	r3, [r4, #0]
   132cc:	69e0      	ldr	r0, [r4, #28]
   132ce:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
   132d2:	6023      	str	r3, [r4, #0]
   132d4:	6803      	ldr	r3, [r0, #0]
   132d6:	4632      	mov	r2, r6
   132d8:	689b      	ldr	r3, [r3, #8]
   132da:	4669      	mov	r1, sp
   132dc:	4798      	blx	r3
   132de:	f1b0 3fff 	cmp.w	r0, #4294967295
   132e2:	4680      	mov	r8, r0
   132e4:	d1e6      	bne.n	132b4 <at_interface_read+0x68>
   132e6:	2523      	movs	r5, #35	; 0x23
   132e8:	e7e1      	b.n	132ae <at_interface_read+0x62>
   132ea:	2516      	movs	r5, #22
   132ec:	f04f 38ff 	mov.w	r8, #4294967295
   132f0:	e7dd      	b.n	132ae <at_interface_read+0x62>
   132f2:	bf00      	nop

000132f4 <at_interface_getopt>:
   132f4:	f005 bddc 	b.w	18eb0 <interface_socket_getopt>

000132f8 <at_interface_setopt>:
   132f8:	f005 bd98 	b.w	18e2c <interface_socket_setopt>

000132fc <rpc_at_event_handler>:
   132fc:	b570      	push	{r4, r5, r6, lr}
   132fe:	4606      	mov	r6, r0
   13300:	b084      	sub	sp, #16
   13302:	68c0      	ldr	r0, [r0, #12]
   13304:	460d      	mov	r5, r1
   13306:	f005 fd69 	bl	18ddc <interface_socket_from_handle_get>
   1330a:	4604      	mov	r4, r0
   1330c:	b348      	cbz	r0, 13362 <rpc_at_event_handler+0x66>
   1330e:	6803      	ldr	r3, [r0, #0]
   13310:	b29b      	uxth	r3, r3
   13312:	2b01      	cmp	r3, #1
   13314:	d01f      	beq.n	13356 <rpc_at_event_handler+0x5a>
   13316:	6803      	ldr	r3, [r0, #0]
   13318:	b29b      	uxth	r3, r3
   1331a:	2b0d      	cmp	r3, #13
   1331c:	d029      	beq.n	13372 <rpc_at_event_handler+0x76>
   1331e:	6803      	ldr	r3, [r0, #0]
   13320:	b29b      	uxth	r3, r3
   13322:	2b02      	cmp	r3, #2
   13324:	d02d      	beq.n	13382 <rpc_at_event_handler+0x86>
   13326:	3d03      	subs	r5, #3
   13328:	2d01      	cmp	r5, #1
   1332a:	d817      	bhi.n	1335c <rpc_at_event_handler+0x60>
   1332c:	2500      	movs	r5, #0
   1332e:	6873      	ldr	r3, [r6, #4]
   13330:	6832      	ldr	r2, [r6, #0]
   13332:	e9cd 5502 	strd	r5, r5, [sp, #8]
   13336:	e9cd 2300 	strd	r2, r3, [sp]
   1333a:	69e0      	ldr	r0, [r4, #28]
   1333c:	4669      	mov	r1, sp
   1333e:	6803      	ldr	r3, [r0, #0]
   13340:	685b      	ldr	r3, [r3, #4]
   13342:	4798      	blx	r3
   13344:	3001      	adds	r0, #1
   13346:	d019      	beq.n	1337c <rpc_at_event_handler+0x80>
   13348:	4628      	mov	r0, r5
   1334a:	6823      	ldr	r3, [r4, #0]
   1334c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   13350:	6023      	str	r3, [r4, #0]
   13352:	b004      	add	sp, #16
   13354:	bd70      	pop	{r4, r5, r6, pc}
   13356:	2d02      	cmp	r5, #2
   13358:	d1e5      	bne.n	13326 <rpc_at_event_handler+0x2a>
   1335a:	6005      	str	r5, [r0, #0]
   1335c:	2000      	movs	r0, #0
   1335e:	b004      	add	sp, #16
   13360:	bd70      	pop	{r4, r5, r6, pc}
   13362:	6830      	ldr	r0, [r6, #0]
   13364:	2800      	cmp	r0, #0
   13366:	d0f9      	beq.n	1335c <rpc_at_event_handler+0x60>
   13368:	f004 f85a 	bl	17420 <rpc_at_client_data_free>
   1336c:	4620      	mov	r0, r4
   1336e:	b004      	add	sp, #16
   13370:	bd70      	pop	{r4, r5, r6, pc}
   13372:	2d02      	cmp	r5, #2
   13374:	d1d7      	bne.n	13326 <rpc_at_event_handler+0x2a>
   13376:	230e      	movs	r3, #14
   13378:	6003      	str	r3, [r0, #0]
   1337a:	e7ef      	b.n	1335c <rpc_at_event_handler+0x60>
   1337c:	2002      	movs	r0, #2
   1337e:	b004      	add	sp, #16
   13380:	bd70      	pop	{r4, r5, r6, pc}
   13382:	6803      	ldr	r3, [r0, #0]
   13384:	029b      	lsls	r3, r3, #10
   13386:	d5ce      	bpl.n	13326 <rpc_at_event_handler+0x2a>
   13388:	2d02      	cmp	r5, #2
   1338a:	d1cc      	bne.n	13326 <rpc_at_event_handler+0x2a>
   1338c:	6803      	ldr	r3, [r0, #0]
   1338e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
   13392:	6003      	str	r3, [r0, #0]
   13394:	6803      	ldr	r3, [r0, #0]
   13396:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   1339a:	6003      	str	r3, [r0, #0]
   1339c:	e7de      	b.n	1335c <rpc_at_event_handler+0x60>
   1339e:	bf00      	nop

000133a0 <dfu_client_event_handler>:
   133a0:	f850 1b08 	ldr.w	r1, [r0], #8
   133a4:	0c09      	lsrs	r1, r1, #16
   133a6:	f001 b925 	b.w	145f4 <rpc_dfu_event_handler>
   133aa:	bf00      	nop

000133ac <rpc_dfu_client_init>:
   133ac:	4801      	ldr	r0, [pc, #4]	; (133b4 <rpc_dfu_client_init+0x8>)
   133ae:	f005 be51 	b.w	19054 <rpc_client_register>
   133b2:	bf00      	nop
   133b4:	00022c5c 	.word	0x00022c5c

000133b8 <rpc_dfu_client_request_alloc>:
   133b8:	2300      	movs	r3, #0
   133ba:	b510      	push	{r4, lr}
   133bc:	b082      	sub	sp, #8
   133be:	9301      	str	r3, [sp, #4]
   133c0:	b158      	cbz	r0, 133da <rpc_dfu_client_request_alloc+0x22>
   133c2:	4604      	mov	r4, r0
   133c4:	aa01      	add	r2, sp, #4
   133c6:	2006      	movs	r0, #6
   133c8:	f006 f87c 	bl	194c4 <rpc_message_alloc>
   133cc:	b918      	cbnz	r0, 133d6 <rpc_dfu_client_request_alloc+0x1e>
   133ce:	9b01      	ldr	r3, [sp, #4]
   133d0:	b10b      	cbz	r3, 133d6 <rpc_dfu_client_request_alloc+0x1e>
   133d2:	3308      	adds	r3, #8
   133d4:	6023      	str	r3, [r4, #0]
   133d6:	b002      	add	sp, #8
   133d8:	bd10      	pop	{r4, pc}
   133da:	2007      	movs	r0, #7
   133dc:	b002      	add	sp, #8
   133de:	bd10      	pop	{r4, pc}

000133e0 <rpc_dfu_client_request_send>:
   133e0:	f411 4f70 	tst.w	r1, #61440	; 0xf000
   133e4:	d10b      	bne.n	133fe <rpc_dfu_client_request_send+0x1e>
   133e6:	b160      	cbz	r0, 13402 <rpc_dfu_client_request_send+0x22>
   133e8:	4603      	mov	r3, r0
   133ea:	f830 2c08 	ldrh.w	r2, [r0, #-8]
   133ee:	2006      	movs	r0, #6
   133f0:	ea42 4101 	orr.w	r1, r2, r1, lsl #16
   133f4:	f843 1d08 	str.w	r1, [r3, #-8]!
   133f8:	4619      	mov	r1, r3
   133fa:	f006 b84b 	b.w	19494 <rpc_message_send>
   133fe:	200f      	movs	r0, #15
   13400:	4770      	bx	lr
   13402:	2007      	movs	r0, #7
   13404:	4770      	bx	lr
   13406:	bf00      	nop

00013408 <rpc_dfu_client_message_free>:
   13408:	b120      	cbz	r0, 13414 <rpc_dfu_client_message_free+0xc>
   1340a:	f1a0 0108 	sub.w	r1, r0, #8
   1340e:	2006      	movs	r0, #6
   13410:	f006 b88a 	b.w	19528 <rpc_message_free>
   13414:	2007      	movs	r0, #7
   13416:	4770      	bx	lr

00013418 <rpc_dfu_client_data_free>:
   13418:	b118      	cbz	r0, 13422 <rpc_dfu_client_data_free+0xa>
   1341a:	4601      	mov	r1, r0
   1341c:	2006      	movs	r0, #6
   1341e:	f006 b995 	b.w	1974c <rpc_message_data_free>
   13422:	2007      	movs	r0, #7
   13424:	4770      	bx	lr
   13426:	bf00      	nop

00013428 <mem_free>:
   13428:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1342c:	f8df c0cc 	ldr.w	ip, [pc, #204]	; 134fc <mem_free+0xd4>
   13430:	b083      	sub	sp, #12
   13432:	9000      	str	r0, [sp, #0]
   13434:	f10c 0b3c 	add.w	fp, ip, #60	; 0x3c
   13438:	f8dc 3008 	ldr.w	r3, [ip, #8]
   1343c:	b12b      	cbz	r3, 1344a <mem_free+0x22>
   1343e:	f8dc 2000 	ldr.w	r2, [ip]
   13442:	9c00      	ldr	r4, [sp, #0]
   13444:	7810      	ldrb	r0, [r2, #0]
   13446:	42a0      	cmp	r0, r4
   13448:	d006      	beq.n	13458 <mem_free+0x30>
   1344a:	f10c 0c0c 	add.w	ip, ip, #12
   1344e:	45e3      	cmp	fp, ip
   13450:	d1f2      	bne.n	13438 <mem_free+0x10>
   13452:	b003      	add	sp, #12
   13454:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13458:	f8dc a004 	ldr.w	sl, [ip, #4]
   1345c:	eb03 080a 	add.w	r8, r3, sl
   13460:	45c2      	cmp	sl, r8
   13462:	d2f2      	bcs.n	1344a <mem_free+0x22>
   13464:	6853      	ldr	r3, [r2, #4]
   13466:	f8cd c004 	str.w	ip, [sp, #4]
   1346a:	46d6      	mov	lr, sl
   1346c:	469c      	mov	ip, r3
   1346e:	f8d2 9010 	ldr.w	r9, [r2, #16]
   13472:	8997      	ldrh	r7, [r2, #12]
   13474:	ebae 000a 	sub.w	r0, lr, sl
   13478:	b3df      	cbz	r7, 134f2 <mem_free+0xca>
   1347a:	f8b9 2002 	ldrh.w	r2, [r9, #2]
   1347e:	4290      	cmp	r0, r2
   13480:	d31c      	bcc.n	134bc <mem_free+0x94>
   13482:	4665      	mov	r5, ip
   13484:	2400      	movs	r4, #0
   13486:	f109 0304 	add.w	r3, r9, #4
   1348a:	e003      	b.n	13494 <mem_free+0x6c>
   1348c:	885a      	ldrh	r2, [r3, #2]
   1348e:	3304      	adds	r3, #4
   13490:	4282      	cmp	r2, r0
   13492:	d815      	bhi.n	134c0 <mem_free+0x98>
   13494:	f833 6c04 	ldrh.w	r6, [r3, #-4]
   13498:	3401      	adds	r4, #1
   1349a:	42a7      	cmp	r7, r4
   1349c:	fb02 5506 	mla	r5, r2, r6, r5
   134a0:	eba0 0002 	sub.w	r0, r0, r2
   134a4:	461e      	mov	r6, r3
   134a6:	d1f1      	bne.n	1348c <mem_free+0x64>
   134a8:	2000      	movs	r0, #0
   134aa:	4281      	cmp	r1, r0
   134ac:	d00d      	beq.n	134ca <mem_free+0xa2>
   134ae:	f10e 0e01 	add.w	lr, lr, #1
   134b2:	45f0      	cmp	r8, lr
   134b4:	d1de      	bne.n	13474 <mem_free+0x4c>
   134b6:	f8dd c004 	ldr.w	ip, [sp, #4]
   134ba:	e7c6      	b.n	1344a <mem_free+0x22>
   134bc:	4665      	mov	r5, ip
   134be:	464e      	mov	r6, r9
   134c0:	8833      	ldrh	r3, [r6, #0]
   134c2:	fb00 5003 	mla	r0, r0, r3, r5
   134c6:	4281      	cmp	r1, r0
   134c8:	d1f1      	bne.n	134ae <mem_free+0x86>
   134ca:	f5be 7f00 	cmp.w	lr, #512	; 0x200
   134ce:	f8dd c004 	ldr.w	ip, [sp, #4]
   134d2:	d0ba      	beq.n	1344a <mem_free+0x22>
   134d4:	2301      	movs	r3, #1
   134d6:	4a08      	ldr	r2, [pc, #32]	; (134f8 <mem_free+0xd0>)
   134d8:	ea4f 115e 	mov.w	r1, lr, lsr #5
   134dc:	f852 0021 	ldr.w	r0, [r2, r1, lsl #2]
   134e0:	f00e 0e1f 	and.w	lr, lr, #31
   134e4:	fa03 fe0e 	lsl.w	lr, r3, lr
   134e8:	ea4e 0000 	orr.w	r0, lr, r0
   134ec:	f842 0021 	str.w	r0, [r2, r1, lsl #2]
   134f0:	e7af      	b.n	13452 <mem_free+0x2a>
   134f2:	4638      	mov	r0, r7
   134f4:	e7d9      	b.n	134aa <mem_free+0x82>
   134f6:	bf00      	nop
   134f8:	20020330 	.word	0x20020330
   134fc:	20020374 	.word	0x20020374

00013500 <mem_alloc.constprop.5>:
   13500:	2800      	cmp	r0, #0
   13502:	d050      	beq.n	135a6 <mem_alloc.constprop.5+0xa6>
   13504:	4b6d      	ldr	r3, [pc, #436]	; (136bc <mem_alloc.constprop.5+0x1bc>)
   13506:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
   1350a:	4290      	cmp	r0, r2
   1350c:	d84b      	bhi.n	135a6 <mem_alloc.constprop.5+0xa6>
   1350e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13512:	f8d3 b08c 	ldr.w	fp, [r3, #140]	; 0x8c
   13516:	b083      	sub	sp, #12
   13518:	f1bb 0f00 	cmp.w	fp, #0
   1351c:	d054      	beq.n	135c8 <mem_alloc.constprop.5+0xc8>
   1351e:	f10b 32ff 	add.w	r2, fp, #4294967295
   13522:	4691      	mov	r9, r2
   13524:	2600      	movs	r6, #0
   13526:	f04f 0812 	mov.w	r8, #18
   1352a:	4f65      	ldr	r7, [pc, #404]	; (136c0 <mem_alloc.constprop.5+0x1c0>)
   1352c:	9201      	str	r2, [sp, #4]
   1352e:	f10b 0e11 	add.w	lr, fp, #17
   13532:	eb06 0209 	add.w	r2, r6, r9
   13536:	f853 4038 	ldr.w	r4, [r3, r8, lsl #3]
   1353a:	3201      	adds	r2, #1
   1353c:	0852      	lsrs	r2, r2, #1
   1353e:	eb04 0c44 	add.w	ip, r4, r4, lsl #1
   13542:	f102 0112 	add.w	r1, r2, #18
   13546:	f853 5031 	ldr.w	r5, [r3, r1, lsl #3]
   1354a:	f857 a02c 	ldr.w	sl, [r7, ip, lsl #2]
   1354e:	f853 403e 	ldr.w	r4, [r3, lr, lsl #3]
   13552:	eb03 0cc8 	add.w	ip, r3, r8, lsl #3
   13556:	f8dc c004 	ldr.w	ip, [ip, #4]
   1355a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
   1355e:	eb04 0444 	add.w	r4, r4, r4, lsl #1
   13562:	f8da a010 	ldr.w	sl, [sl, #16]
   13566:	f857 5025 	ldr.w	r5, [r7, r5, lsl #2]
   1356a:	f857 4024 	ldr.w	r4, [r7, r4, lsl #2]
   1356e:	f83a a02c 	ldrh.w	sl, [sl, ip, lsl #2]
   13572:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
   13576:	eb03 0cce 	add.w	ip, r3, lr, lsl #3
   1357a:	6849      	ldr	r1, [r1, #4]
   1357c:	692d      	ldr	r5, [r5, #16]
   1357e:	6924      	ldr	r4, [r4, #16]
   13580:	f8dc c004 	ldr.w	ip, [ip, #4]
   13584:	4550      	cmp	r0, sl
   13586:	f835 5021 	ldrh.w	r5, [r5, r1, lsl #2]
   1358a:	f834 102c 	ldrh.w	r1, [r4, ip, lsl #2]
   1358e:	d915      	bls.n	135bc <mem_alloc.constprop.5+0xbc>
   13590:	4288      	cmp	r0, r1
   13592:	d211      	bcs.n	135b8 <mem_alloc.constprop.5+0xb8>
   13594:	42a8      	cmp	r0, r5
   13596:	d908      	bls.n	135aa <mem_alloc.constprop.5+0xaa>
   13598:	1c56      	adds	r6, r2, #1
   1359a:	45b1      	cmp	r9, r6
   1359c:	f0c0 8087 	bcc.w	136ae <mem_alloc.constprop.5+0x1ae>
   135a0:	f102 0813 	add.w	r8, r2, #19
   135a4:	e7c5      	b.n	13532 <mem_alloc.constprop.5+0x32>
   135a6:	2000      	movs	r0, #0
   135a8:	4770      	bx	lr
   135aa:	f102 39ff 	add.w	r9, r2, #4294967295
   135ae:	454e      	cmp	r6, r9
   135b0:	d87d      	bhi.n	136ae <mem_alloc.constprop.5+0x1ae>
   135b2:	f102 0e11 	add.w	lr, r2, #17
   135b6:	e7bc      	b.n	13532 <mem_alloc.constprop.5+0x32>
   135b8:	f109 0601 	add.w	r6, r9, #1
   135bc:	45b3      	cmp	fp, r6
   135be:	d007      	beq.n	135d0 <mem_alloc.constprop.5+0xd0>
   135c0:	2e10      	cmp	r6, #16
   135c2:	d001      	beq.n	135c8 <mem_alloc.constprop.5+0xc8>
   135c4:	45b3      	cmp	fp, r6
   135c6:	d808      	bhi.n	135da <mem_alloc.constprop.5+0xda>
   135c8:	2000      	movs	r0, #0
   135ca:	b003      	add	sp, #12
   135cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   135d0:	9a01      	ldr	r2, [sp, #4]
   135d2:	2a10      	cmp	r2, #16
   135d4:	bf18      	it	ne
   135d6:	4616      	movne	r6, r2
   135d8:	d0f6      	beq.n	135c8 <mem_alloc.constprop.5+0xc8>
   135da:	f8df c0e8 	ldr.w	ip, [pc, #232]	; 136c4 <mem_alloc.constprop.5+0x1c4>
   135de:	eb03 08c6 	add.w	r8, r3, r6, lsl #3
   135e2:	e9d8 2424 	ldrd	r2, r4, [r8, #144]	; 0x90
   135e6:	eb02 0242 	add.w	r2, r2, r2, lsl #1
   135ea:	f857 3022 	ldr.w	r3, [r7, r2, lsl #2]
   135ee:	eb07 0282 	add.w	r2, r7, r2, lsl #2
   135f2:	f8d2 e004 	ldr.w	lr, [r2, #4]
   135f6:	691d      	ldr	r5, [r3, #16]
   135f8:	2c00      	cmp	r4, #0
   135fa:	d056      	beq.n	136aa <mem_alloc.constprop.5+0x1aa>
   135fc:	462a      	mov	r2, r5
   135fe:	4670      	mov	r0, lr
   13600:	00a4      	lsls	r4, r4, #2
   13602:	eb05 0904 	add.w	r9, r5, r4
   13606:	8851      	ldrh	r1, [r2, #2]
   13608:	3204      	adds	r2, #4
   1360a:	4591      	cmp	r9, r2
   1360c:	4408      	add	r0, r1
   1360e:	d1fa      	bne.n	13606 <mem_alloc.constprop.5+0x106>
   13610:	1929      	adds	r1, r5, r4
   13612:	f8b1 a002 	ldrh.w	sl, [r1, #2]
   13616:	4482      	add	sl, r0
   13618:	4582      	cmp	sl, r0
   1361a:	d918      	bls.n	1364e <mem_alloc.constprop.5+0x14e>
   1361c:	0941      	lsrs	r1, r0, #5
   1361e:	f85c 2021 	ldr.w	r2, [ip, r1, lsl #2]
   13622:	f000 041f 	and.w	r4, r0, #31
   13626:	fa22 f904 	lsr.w	r9, r2, r4
   1362a:	f019 0f01 	tst.w	r9, #1
   1362e:	d007      	beq.n	13640 <mem_alloc.constprop.5+0x140>
   13630:	e013      	b.n	1365a <mem_alloc.constprop.5+0x15a>
   13632:	f85c 2021 	ldr.w	r2, [ip, r1, lsl #2]
   13636:	fa22 f904 	lsr.w	r9, r2, r4
   1363a:	f019 0f01 	tst.w	r9, #1
   1363e:	d10c      	bne.n	1365a <mem_alloc.constprop.5+0x15a>
   13640:	3001      	adds	r0, #1
   13642:	4582      	cmp	sl, r0
   13644:	ea4f 1150 	mov.w	r1, r0, lsr #5
   13648:	f000 041f 	and.w	r4, r0, #31
   1364c:	d1f1      	bne.n	13632 <mem_alloc.constprop.5+0x132>
   1364e:	3601      	adds	r6, #1
   13650:	455e      	cmp	r6, fp
   13652:	f108 0808 	add.w	r8, r8, #8
   13656:	d3c4      	bcc.n	135e2 <mem_alloc.constprop.5+0xe2>
   13658:	e7b6      	b.n	135c8 <mem_alloc.constprop.5+0xc8>
   1365a:	2601      	movs	r6, #1
   1365c:	fa06 f404 	lsl.w	r4, r6, r4
   13660:	899e      	ldrh	r6, [r3, #12]
   13662:	ea22 0204 	bic.w	r2, r2, r4
   13666:	eba0 000e 	sub.w	r0, r0, lr
   1366a:	f84c 2021 	str.w	r2, [ip, r1, lsl #2]
   1366e:	685c      	ldr	r4, [r3, #4]
   13670:	2e00      	cmp	r6, #0
   13672:	d0a9      	beq.n	135c8 <mem_alloc.constprop.5+0xc8>
   13674:	886a      	ldrh	r2, [r5, #2]
   13676:	4282      	cmp	r2, r0
   13678:	d811      	bhi.n	1369e <mem_alloc.constprop.5+0x19e>
   1367a:	2100      	movs	r1, #0
   1367c:	1d2b      	adds	r3, r5, #4
   1367e:	e003      	b.n	13688 <mem_alloc.constprop.5+0x188>
   13680:	885a      	ldrh	r2, [r3, #2]
   13682:	3304      	adds	r3, #4
   13684:	4282      	cmp	r2, r0
   13686:	d80a      	bhi.n	1369e <mem_alloc.constprop.5+0x19e>
   13688:	f833 5c04 	ldrh.w	r5, [r3, #-4]
   1368c:	3101      	adds	r1, #1
   1368e:	428e      	cmp	r6, r1
   13690:	fb02 4405 	mla	r4, r2, r5, r4
   13694:	eba0 0002 	sub.w	r0, r0, r2
   13698:	461d      	mov	r5, r3
   1369a:	d1f1      	bne.n	13680 <mem_alloc.constprop.5+0x180>
   1369c:	e794      	b.n	135c8 <mem_alloc.constprop.5+0xc8>
   1369e:	882b      	ldrh	r3, [r5, #0]
   136a0:	fb00 4003 	mla	r0, r0, r3, r4
   136a4:	b003      	add	sp, #12
   136a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   136aa:	4670      	mov	r0, lr
   136ac:	e7b0      	b.n	13610 <mem_alloc.constprop.5+0x110>
   136ae:	f1bb 0f10 	cmp.w	fp, #16
   136b2:	bf08      	it	eq
   136b4:	260f      	moveq	r6, #15
   136b6:	d090      	beq.n	135da <mem_alloc.constprop.5+0xda>
   136b8:	e786      	b.n	135c8 <mem_alloc.constprop.5+0xc8>
   136ba:	bf00      	nop
   136bc:	200203b0 	.word	0x200203b0
   136c0:	20020374 	.word	0x20020374
   136c4:	20020330 	.word	0x20020330

000136c8 <mem_alloc.constprop.4>:
   136c8:	2800      	cmp	r0, #0
   136ca:	d04c      	beq.n	13766 <mem_alloc.constprop.4+0x9e>
   136cc:	4b6b      	ldr	r3, [pc, #428]	; (1387c <mem_alloc.constprop.4+0x1b4>)
   136ce:	681a      	ldr	r2, [r3, #0]
   136d0:	4290      	cmp	r0, r2
   136d2:	d848      	bhi.n	13766 <mem_alloc.constprop.4+0x9e>
   136d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   136d8:	685f      	ldr	r7, [r3, #4]
   136da:	b083      	sub	sp, #12
   136dc:	9700      	str	r7, [sp, #0]
   136de:	2f00      	cmp	r7, #0
   136e0:	d051      	beq.n	13786 <mem_alloc.constprop.4+0xbe>
   136e2:	1e7a      	subs	r2, r7, #1
   136e4:	4696      	mov	lr, r2
   136e6:	2100      	movs	r1, #0
   136e8:	f04f 0c01 	mov.w	ip, #1
   136ec:	4c64      	ldr	r4, [pc, #400]	; (13880 <mem_alloc.constprop.4+0x1b8>)
   136ee:	9201      	str	r2, [sp, #4]
   136f0:	eb01 020e 	add.w	r2, r1, lr
   136f4:	3201      	adds	r2, #1
   136f6:	f853 503c 	ldr.w	r5, [r3, ip, lsl #3]
   136fa:	0852      	lsrs	r2, r2, #1
   136fc:	f102 0801 	add.w	r8, r2, #1
   13700:	eb05 0545 	add.w	r5, r5, r5, lsl #1
   13704:	f853 9037 	ldr.w	r9, [r3, r7, lsl #3]
   13708:	f854 a025 	ldr.w	sl, [r4, r5, lsl #2]
   1370c:	f853 6038 	ldr.w	r6, [r3, r8, lsl #3]
   13710:	eb09 0549 	add.w	r5, r9, r9, lsl #1
   13714:	eb03 09cc 	add.w	r9, r3, ip, lsl #3
   13718:	f8d9 9004 	ldr.w	r9, [r9, #4]
   1371c:	eb06 0646 	add.w	r6, r6, r6, lsl #1
   13720:	f8da a010 	ldr.w	sl, [sl, #16]
   13724:	f854 6026 	ldr.w	r6, [r4, r6, lsl #2]
   13728:	f854 5025 	ldr.w	r5, [r4, r5, lsl #2]
   1372c:	f83a a029 	ldrh.w	sl, [sl, r9, lsl #2]
   13730:	eb03 0bc8 	add.w	fp, r3, r8, lsl #3
   13734:	eb03 09c7 	add.w	r9, r3, r7, lsl #3
   13738:	6936      	ldr	r6, [r6, #16]
   1373a:	f8db b004 	ldr.w	fp, [fp, #4]
   1373e:	692d      	ldr	r5, [r5, #16]
   13740:	f8d9 9004 	ldr.w	r9, [r9, #4]
   13744:	4550      	cmp	r0, sl
   13746:	f836 602b 	ldrh.w	r6, [r6, fp, lsl #2]
   1374a:	f835 5029 	ldrh.w	r5, [r5, r9, lsl #2]
   1374e:	d913      	bls.n	13778 <mem_alloc.constprop.4+0xb0>
   13750:	42a8      	cmp	r0, r5
   13752:	d210      	bcs.n	13776 <mem_alloc.constprop.4+0xae>
   13754:	42b0      	cmp	r0, r6
   13756:	d908      	bls.n	1376a <mem_alloc.constprop.4+0xa2>
   13758:	45c6      	cmp	lr, r8
   1375a:	4641      	mov	r1, r8
   1375c:	f0c0 8087 	bcc.w	1386e <mem_alloc.constprop.4+0x1a6>
   13760:	f108 0c01 	add.w	ip, r8, #1
   13764:	e7c4      	b.n	136f0 <mem_alloc.constprop.4+0x28>
   13766:	2000      	movs	r0, #0
   13768:	4770      	bx	lr
   1376a:	f102 3eff 	add.w	lr, r2, #4294967295
   1376e:	4571      	cmp	r1, lr
   13770:	d87d      	bhi.n	1386e <mem_alloc.constprop.4+0x1a6>
   13772:	4617      	mov	r7, r2
   13774:	e7bc      	b.n	136f0 <mem_alloc.constprop.4+0x28>
   13776:	4639      	mov	r1, r7
   13778:	9a00      	ldr	r2, [sp, #0]
   1377a:	428a      	cmp	r2, r1
   1377c:	d007      	beq.n	1378e <mem_alloc.constprop.4+0xc6>
   1377e:	2910      	cmp	r1, #16
   13780:	d001      	beq.n	13786 <mem_alloc.constprop.4+0xbe>
   13782:	428a      	cmp	r2, r1
   13784:	d808      	bhi.n	13798 <mem_alloc.constprop.4+0xd0>
   13786:	2000      	movs	r0, #0
   13788:	b003      	add	sp, #12
   1378a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1378e:	9a01      	ldr	r2, [sp, #4]
   13790:	2a10      	cmp	r2, #16
   13792:	bf18      	it	ne
   13794:	4611      	movne	r1, r2
   13796:	d0f6      	beq.n	13786 <mem_alloc.constprop.4+0xbe>
   13798:	f8df c0e8 	ldr.w	ip, [pc, #232]	; 13884 <mem_alloc.constprop.4+0x1bc>
   1379c:	f8dd 9000 	ldr.w	r9, [sp]
   137a0:	eb03 08c1 	add.w	r8, r3, r1, lsl #3
   137a4:	e9d8 2602 	ldrd	r2, r6, [r8, #8]
   137a8:	eb02 0242 	add.w	r2, r2, r2, lsl #1
   137ac:	f854 3022 	ldr.w	r3, [r4, r2, lsl #2]
   137b0:	eb04 0282 	add.w	r2, r4, r2, lsl #2
   137b4:	f8d2 e004 	ldr.w	lr, [r2, #4]
   137b8:	691f      	ldr	r7, [r3, #16]
   137ba:	2e00      	cmp	r6, #0
   137bc:	d055      	beq.n	1386a <mem_alloc.constprop.4+0x1a2>
   137be:	463a      	mov	r2, r7
   137c0:	4670      	mov	r0, lr
   137c2:	00b6      	lsls	r6, r6, #2
   137c4:	eb07 0a06 	add.w	sl, r7, r6
   137c8:	8855      	ldrh	r5, [r2, #2]
   137ca:	3204      	adds	r2, #4
   137cc:	4592      	cmp	sl, r2
   137ce:	4428      	add	r0, r5
   137d0:	d1fa      	bne.n	137c8 <mem_alloc.constprop.4+0x100>
   137d2:	19bd      	adds	r5, r7, r6
   137d4:	f8b5 b002 	ldrh.w	fp, [r5, #2]
   137d8:	4483      	add	fp, r0
   137da:	4583      	cmp	fp, r0
   137dc:	d918      	bls.n	13810 <mem_alloc.constprop.4+0x148>
   137de:	0945      	lsrs	r5, r0, #5
   137e0:	f85c 2025 	ldr.w	r2, [ip, r5, lsl #2]
   137e4:	f000 061f 	and.w	r6, r0, #31
   137e8:	fa22 fa06 	lsr.w	sl, r2, r6
   137ec:	f01a 0f01 	tst.w	sl, #1
   137f0:	d007      	beq.n	13802 <mem_alloc.constprop.4+0x13a>
   137f2:	e013      	b.n	1381c <mem_alloc.constprop.4+0x154>
   137f4:	f85c 2025 	ldr.w	r2, [ip, r5, lsl #2]
   137f8:	fa22 fa06 	lsr.w	sl, r2, r6
   137fc:	f01a 0f01 	tst.w	sl, #1
   13800:	d10c      	bne.n	1381c <mem_alloc.constprop.4+0x154>
   13802:	3001      	adds	r0, #1
   13804:	4583      	cmp	fp, r0
   13806:	ea4f 1550 	mov.w	r5, r0, lsr #5
   1380a:	f000 061f 	and.w	r6, r0, #31
   1380e:	d1f1      	bne.n	137f4 <mem_alloc.constprop.4+0x12c>
   13810:	3101      	adds	r1, #1
   13812:	4549      	cmp	r1, r9
   13814:	f108 0808 	add.w	r8, r8, #8
   13818:	d3c4      	bcc.n	137a4 <mem_alloc.constprop.4+0xdc>
   1381a:	e7b4      	b.n	13786 <mem_alloc.constprop.4+0xbe>
   1381c:	2101      	movs	r1, #1
   1381e:	40b1      	lsls	r1, r6
   13820:	899e      	ldrh	r6, [r3, #12]
   13822:	ea22 0201 	bic.w	r2, r2, r1
   13826:	eba0 000e 	sub.w	r0, r0, lr
   1382a:	f84c 2025 	str.w	r2, [ip, r5, lsl #2]
   1382e:	685c      	ldr	r4, [r3, #4]
   13830:	2e00      	cmp	r6, #0
   13832:	d0a8      	beq.n	13786 <mem_alloc.constprop.4+0xbe>
   13834:	887a      	ldrh	r2, [r7, #2]
   13836:	4282      	cmp	r2, r0
   13838:	d811      	bhi.n	1385e <mem_alloc.constprop.4+0x196>
   1383a:	2100      	movs	r1, #0
   1383c:	1d3b      	adds	r3, r7, #4
   1383e:	e003      	b.n	13848 <mem_alloc.constprop.4+0x180>
   13840:	885a      	ldrh	r2, [r3, #2]
   13842:	3304      	adds	r3, #4
   13844:	4282      	cmp	r2, r0
   13846:	d80a      	bhi.n	1385e <mem_alloc.constprop.4+0x196>
   13848:	f833 5c04 	ldrh.w	r5, [r3, #-4]
   1384c:	3101      	adds	r1, #1
   1384e:	428e      	cmp	r6, r1
   13850:	eba0 0002 	sub.w	r0, r0, r2
   13854:	fb02 4405 	mla	r4, r2, r5, r4
   13858:	461f      	mov	r7, r3
   1385a:	d1f1      	bne.n	13840 <mem_alloc.constprop.4+0x178>
   1385c:	e793      	b.n	13786 <mem_alloc.constprop.4+0xbe>
   1385e:	883b      	ldrh	r3, [r7, #0]
   13860:	fb00 4003 	mla	r0, r0, r3, r4
   13864:	b003      	add	sp, #12
   13866:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1386a:	4670      	mov	r0, lr
   1386c:	e7b1      	b.n	137d2 <mem_alloc.constprop.4+0x10a>
   1386e:	9a00      	ldr	r2, [sp, #0]
   13870:	2a10      	cmp	r2, #16
   13872:	bf08      	it	eq
   13874:	210f      	moveq	r1, #15
   13876:	d08f      	beq.n	13798 <mem_alloc.constprop.4+0xd0>
   13878:	e785      	b.n	13786 <mem_alloc.constprop.4+0xbe>
   1387a:	bf00      	nop
   1387c:	200203b0 	.word	0x200203b0
   13880:	20020374 	.word	0x20020374
   13884:	20020330 	.word	0x20020330

00013888 <nrf_mem_init>:
   13888:	b570      	push	{r4, r5, r6, lr}
   1388a:	2200      	movs	r2, #0
   1388c:	2501      	movs	r5, #1
   1388e:	4833      	ldr	r0, [pc, #204]	; (1395c <nrf_mem_init+0xd4>)
   13890:	0951      	lsrs	r1, r2, #5
   13892:	f850 4021 	ldr.w	r4, [r0, r1, lsl #2]
   13896:	f002 031f 	and.w	r3, r2, #31
   1389a:	fa05 f303 	lsl.w	r3, r5, r3
   1389e:	3201      	adds	r2, #1
   138a0:	4323      	orrs	r3, r4
   138a2:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
   138a6:	f840 3021 	str.w	r3, [r0, r1, lsl #2]
   138aa:	d1f1      	bne.n	13890 <nrf_mem_init+0x8>
   138ac:	2400      	movs	r4, #0
   138ae:	4b2c      	ldr	r3, [pc, #176]	; (13960 <nrf_mem_init+0xd8>)
   138b0:	4621      	mov	r1, r4
   138b2:	223c      	movs	r2, #60	; 0x3c
   138b4:	482b      	ldr	r0, [pc, #172]	; (13964 <nrf_mem_init+0xdc>)
   138b6:	601c      	str	r4, [r3, #0]
   138b8:	f00e f84c 	bl	21954 <memset>
   138bc:	2110      	movs	r1, #16
   138be:	2205      	movs	r2, #5
   138c0:	4b29      	ldr	r3, [pc, #164]	; (13968 <nrf_mem_init+0xe0>)
   138c2:	4e2a      	ldr	r6, [pc, #168]	; (1396c <nrf_mem_init+0xe4>)
   138c4:	e9c3 4400 	strd	r4, r4, [r3]
   138c8:	60d9      	str	r1, [r3, #12]
   138ca:	6159      	str	r1, [r3, #20]
   138cc:	61d9      	str	r1, [r3, #28]
   138ce:	6259      	str	r1, [r3, #36]	; 0x24
   138d0:	62d9      	str	r1, [r3, #44]	; 0x2c
   138d2:	6359      	str	r1, [r3, #52]	; 0x34
   138d4:	63d9      	str	r1, [r3, #60]	; 0x3c
   138d6:	6459      	str	r1, [r3, #68]	; 0x44
   138d8:	64d9      	str	r1, [r3, #76]	; 0x4c
   138da:	6559      	str	r1, [r3, #84]	; 0x54
   138dc:	65d9      	str	r1, [r3, #92]	; 0x5c
   138de:	6659      	str	r1, [r3, #100]	; 0x64
   138e0:	66d9      	str	r1, [r3, #108]	; 0x6c
   138e2:	6759      	str	r1, [r3, #116]	; 0x74
   138e4:	67d9      	str	r1, [r3, #124]	; 0x7c
   138e6:	609a      	str	r2, [r3, #8]
   138e8:	611a      	str	r2, [r3, #16]
   138ea:	619a      	str	r2, [r3, #24]
   138ec:	621a      	str	r2, [r3, #32]
   138ee:	629a      	str	r2, [r3, #40]	; 0x28
   138f0:	631a      	str	r2, [r3, #48]	; 0x30
   138f2:	639a      	str	r2, [r3, #56]	; 0x38
   138f4:	641a      	str	r2, [r3, #64]	; 0x40
   138f6:	649a      	str	r2, [r3, #72]	; 0x48
   138f8:	651a      	str	r2, [r3, #80]	; 0x50
   138fa:	659a      	str	r2, [r3, #88]	; 0x58
   138fc:	661a      	str	r2, [r3, #96]	; 0x60
   138fe:	669a      	str	r2, [r3, #104]	; 0x68
   13900:	671a      	str	r2, [r3, #112]	; 0x70
   13902:	679a      	str	r2, [r3, #120]	; 0x78
   13904:	e9c3 2120 	strd	r2, r1, [r3, #128]	; 0x80
   13908:	e9c3 4422 	strd	r4, r4, [r3, #136]	; 0x88
   1390c:	e9c3 2124 	strd	r2, r1, [r3, #144]	; 0x90
   13910:	e9c3 2126 	strd	r2, r1, [r3, #152]	; 0x98
   13914:	e9c3 2128 	strd	r2, r1, [r3, #160]	; 0xa0
   13918:	e9c3 212a 	strd	r2, r1, [r3, #168]	; 0xa8
   1391c:	e9c3 212c 	strd	r2, r1, [r3, #176]	; 0xb0
   13920:	e9c3 212e 	strd	r2, r1, [r3, #184]	; 0xb8
   13924:	e9c3 2130 	strd	r2, r1, [r3, #192]	; 0xc0
   13928:	e9c3 2132 	strd	r2, r1, [r3, #200]	; 0xc8
   1392c:	e9c3 2134 	strd	r2, r1, [r3, #208]	; 0xd0
   13930:	e9c3 2136 	strd	r2, r1, [r3, #216]	; 0xd8
   13934:	e9c3 2138 	strd	r2, r1, [r3, #224]	; 0xe0
   13938:	e9c3 213a 	strd	r2, r1, [r3, #232]	; 0xe8
   1393c:	e9c3 213c 	strd	r2, r1, [r3, #240]	; 0xf0
   13940:	e9c3 213e 	strd	r2, r1, [r3, #248]	; 0xf8
   13944:	f8c3 1104 	str.w	r1, [r3, #260]	; 0x104
   13948:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
   1394c:	f8c3 110c 	str.w	r1, [r3, #268]	; 0x10c
   13950:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
   13954:	4620      	mov	r0, r4
   13956:	7035      	strb	r5, [r6, #0]
   13958:	bd70      	pop	{r4, r5, r6, pc}
   1395a:	bf00      	nop
   1395c:	20020330 	.word	0x20020330
   13960:	20020370 	.word	0x20020370
   13964:	20020374 	.word	0x20020374
   13968:	200203b0 	.word	0x200203b0
   1396c:	2002268a 	.word	0x2002268a

00013970 <nrf_mem_register>:
   13970:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13974:	4b87      	ldr	r3, [pc, #540]	; (13b94 <nrf_mem_register+0x224>)
   13976:	b087      	sub	sp, #28
   13978:	781b      	ldrb	r3, [r3, #0]
   1397a:	2b00      	cmp	r3, #0
   1397c:	f000 808c 	beq.w	13a98 <nrf_mem_register+0x128>
   13980:	b328      	cbz	r0, 139ce <nrf_mem_register+0x5e>
   13982:	b321      	cbz	r1, 139ce <nrf_mem_register+0x5e>
   13984:	780b      	ldrb	r3, [r1, #0]
   13986:	f8df 8218 	ldr.w	r8, [pc, #536]	; 13ba0 <nrf_mem_register+0x230>
   1398a:	eb03 1303 	add.w	r3, r3, r3, lsl #4
   1398e:	eb08 03c3 	add.w	r3, r8, r3, lsl #3
   13992:	685b      	ldr	r3, [r3, #4]
   13994:	f8b1 c00c 	ldrh.w	ip, [r1, #12]
   13998:	4463      	add	r3, ip
   1399a:	2b10      	cmp	r3, #16
   1399c:	d811      	bhi.n	139c2 <nrf_mem_register+0x52>
   1399e:	f04f 0a00 	mov.w	sl, #0
   139a2:	4689      	mov	r9, r1
   139a4:	4b7c      	ldr	r3, [pc, #496]	; (13b98 <nrf_mem_register+0x228>)
   139a6:	4f7d      	ldr	r7, [pc, #500]	; (13b9c <nrf_mem_register+0x22c>)
   139a8:	681b      	ldr	r3, [r3, #0]
   139aa:	ea4f 0e8c 	mov.w	lr, ip, lsl #2
   139ae:	9300      	str	r3, [sp, #0]
   139b0:	68b9      	ldr	r1, [r7, #8]
   139b2:	b191      	cbz	r1, 139da <nrf_mem_register+0x6a>
   139b4:	f10a 0a01 	add.w	sl, sl, #1
   139b8:	f1ba 0f05 	cmp.w	sl, #5
   139bc:	f107 070c 	add.w	r7, r7, #12
   139c0:	d1f6      	bne.n	139b0 <nrf_mem_register+0x40>
   139c2:	f248 1b07 	movw	fp, #33031	; 0x8107
   139c6:	4658      	mov	r0, fp
   139c8:	b007      	add	sp, #28
   139ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   139ce:	f248 1b0e 	movw	fp, #33038	; 0x810e
   139d2:	4658      	mov	r0, fp
   139d4:	b007      	add	sp, #28
   139d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   139da:	f1bc 0f00 	cmp.w	ip, #0
   139de:	d061      	beq.n	13aa4 <nrf_mem_register+0x134>
   139e0:	460d      	mov	r5, r1
   139e2:	460c      	mov	r4, r1
   139e4:	f8d9 3010 	ldr.w	r3, [r9, #16]
   139e8:	eb0e 0b03 	add.w	fp, lr, r3
   139ec:	885a      	ldrh	r2, [r3, #2]
   139ee:	f833 6b04 	ldrh.w	r6, [r3], #4
   139f2:	4415      	add	r5, r2
   139f4:	459b      	cmp	fp, r3
   139f6:	fb02 4406 	mla	r4, r2, r6, r4
   139fa:	d1f7      	bne.n	139ec <nrf_mem_register+0x7c>
   139fc:	f8d9 3008 	ldr.w	r3, [r9, #8]
   13a00:	42a3      	cmp	r3, r4
   13a02:	d3d7      	bcc.n	139b4 <nrf_mem_register+0x44>
   13a04:	9b00      	ldr	r3, [sp, #0]
   13a06:	442b      	add	r3, r5
   13a08:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   13a0c:	d2d2      	bcs.n	139b4 <nrf_mem_register+0x44>
   13a0e:	4c63      	ldr	r4, [pc, #396]	; (13b9c <nrf_mem_register+0x22c>)
   13a10:	eb0a 024a 	add.w	r2, sl, sl, lsl #1
   13a14:	0092      	lsls	r2, r2, #2
   13a16:	f8c0 a000 	str.w	sl, [r0]
   13a1a:	18a0      	adds	r0, r4, r2
   13a1c:	f844 9002 	str.w	r9, [r4, r2]
   13a20:	9a00      	ldr	r2, [sp, #0]
   13a22:	468b      	mov	fp, r1
   13a24:	e9c0 2501 	strd	r2, r5, [r0, #4]
   13a28:	f899 2001 	ldrb.w	r2, [r9, #1]
   13a2c:	485a      	ldr	r0, [pc, #360]	; (13b98 <nrf_mem_register+0x228>)
   13a2e:	2a01      	cmp	r2, #1
   13a30:	6003      	str	r3, [r0, #0]
   13a32:	d0c8      	beq.n	139c6 <nrf_mem_register+0x56>
   13a34:	f8b9 300c 	ldrh.w	r3, [r9, #12]
   13a38:	2b00      	cmp	r3, #0
   13a3a:	d0c4      	beq.n	139c6 <nrf_mem_register+0x56>
   13a3c:	2500      	movs	r5, #0
   13a3e:	f8cd 9004 	str.w	r9, [sp, #4]
   13a42:	f8cd a00c 	str.w	sl, [sp, #12]
   13a46:	f8cd b014 	str.w	fp, [sp, #20]
   13a4a:	9b01      	ldr	r3, [sp, #4]
   13a4c:	781f      	ldrb	r7, [r3, #0]
   13a4e:	691a      	ldr	r2, [r3, #16]
   13a50:	013b      	lsls	r3, r7, #4
   13a52:	eb03 0907 	add.w	r9, r3, r7
   13a56:	9300      	str	r3, [sp, #0]
   13a58:	eb08 03c9 	add.w	r3, r8, r9, lsl #3
   13a5c:	6859      	ldr	r1, [r3, #4]
   13a5e:	f832 4025 	ldrh.w	r4, [r2, r5, lsl #2]
   13a62:	9102      	str	r1, [sp, #8]
   13a64:	bb39      	cbnz	r1, 13ab6 <nrf_mem_register+0x146>
   13a66:	9a03      	ldr	r2, [sp, #12]
   13a68:	60dd      	str	r5, [r3, #12]
   13a6a:	609a      	str	r2, [r3, #8]
   13a6c:	9b00      	ldr	r3, [sp, #0]
   13a6e:	443b      	add	r3, r7
   13a70:	461f      	mov	r7, r3
   13a72:	eb08 01c3 	add.w	r1, r8, r3, lsl #3
   13a76:	684b      	ldr	r3, [r1, #4]
   13a78:	f858 2037 	ldr.w	r2, [r8, r7, lsl #3]
   13a7c:	3301      	adds	r3, #1
   13a7e:	4294      	cmp	r4, r2
   13a80:	604b      	str	r3, [r1, #4]
   13a82:	d912      	bls.n	13aaa <nrf_mem_register+0x13a>
   13a84:	9b01      	ldr	r3, [sp, #4]
   13a86:	f848 4037 	str.w	r4, [r8, r7, lsl #3]
   13a8a:	899b      	ldrh	r3, [r3, #12]
   13a8c:	3501      	adds	r5, #1
   13a8e:	429d      	cmp	r5, r3
   13a90:	d3db      	bcc.n	13a4a <nrf_mem_register+0xda>
   13a92:	f8dd b014 	ldr.w	fp, [sp, #20]
   13a96:	e796      	b.n	139c6 <nrf_mem_register+0x56>
   13a98:	f248 1b08 	movw	fp, #33032	; 0x8108
   13a9c:	4658      	mov	r0, fp
   13a9e:	b007      	add	sp, #28
   13aa0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13aa4:	9b00      	ldr	r3, [sp, #0]
   13aa6:	4665      	mov	r5, ip
   13aa8:	e7ae      	b.n	13a08 <nrf_mem_register+0x98>
   13aaa:	9b01      	ldr	r3, [sp, #4]
   13aac:	3501      	adds	r5, #1
   13aae:	899b      	ldrh	r3, [r3, #12]
   13ab0:	42ab      	cmp	r3, r5
   13ab2:	d8ca      	bhi.n	13a4a <nrf_mem_register+0xda>
   13ab4:	e7ed      	b.n	13a92 <nrf_mem_register+0x122>
   13ab6:	2600      	movs	r6, #0
   13ab8:	f101 3aff 	add.w	sl, r1, #4294967295
   13abc:	9504      	str	r5, [sp, #16]
   13abe:	eb06 000a 	add.w	r0, r6, sl
   13ac2:	eb09 0206 	add.w	r2, r9, r6
   13ac6:	3201      	adds	r2, #1
   13ac8:	3001      	adds	r0, #1
   13aca:	f858 c032 	ldr.w	ip, [r8, r2, lsl #3]
   13ace:	0840      	lsrs	r0, r0, #1
   13ad0:	4d32      	ldr	r5, [pc, #200]	; (13b9c <nrf_mem_register+0x22c>)
   13ad2:	eb09 0100 	add.w	r1, r9, r0
   13ad6:	eb09 030a 	add.w	r3, r9, sl
   13ada:	3101      	adds	r1, #1
   13adc:	3301      	adds	r3, #1
   13ade:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
   13ae2:	f858 e031 	ldr.w	lr, [r8, r1, lsl #3]
   13ae6:	f855 b02c 	ldr.w	fp, [r5, ip, lsl #2]
   13aea:	f858 c033 	ldr.w	ip, [r8, r3, lsl #3]
   13aee:	eb08 02c2 	add.w	r2, r8, r2, lsl #3
   13af2:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
   13af6:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
   13afa:	f8db b010 	ldr.w	fp, [fp, #16]
   13afe:	6852      	ldr	r2, [r2, #4]
   13b00:	f855 e02e 	ldr.w	lr, [r5, lr, lsl #2]
   13b04:	f855 c02c 	ldr.w	ip, [r5, ip, lsl #2]
   13b08:	eb08 01c1 	add.w	r1, r8, r1, lsl #3
   13b0c:	eb08 03c3 	add.w	r3, r8, r3, lsl #3
   13b10:	f83b 2022 	ldrh.w	r2, [fp, r2, lsl #2]
   13b14:	f8de e010 	ldr.w	lr, [lr, #16]
   13b18:	6849      	ldr	r1, [r1, #4]
   13b1a:	f8dc c010 	ldr.w	ip, [ip, #16]
   13b1e:	685b      	ldr	r3, [r3, #4]
   13b20:	4294      	cmp	r4, r2
   13b22:	f83e 1021 	ldrh.w	r1, [lr, r1, lsl #2]
   13b26:	f83c 3023 	ldrh.w	r3, [ip, r3, lsl #2]
   13b2a:	d92d      	bls.n	13b88 <nrf_mem_register+0x218>
   13b2c:	429c      	cmp	r4, r3
   13b2e:	d22d      	bcs.n	13b8c <nrf_mem_register+0x21c>
   13b30:	428c      	cmp	r4, r1
   13b32:	d924      	bls.n	13b7e <nrf_mem_register+0x20e>
   13b34:	1c46      	adds	r6, r0, #1
   13b36:	45b2      	cmp	sl, r6
   13b38:	d2c1      	bcs.n	13abe <nrf_mem_register+0x14e>
   13b3a:	2610      	movs	r6, #16
   13b3c:	9d04      	ldr	r5, [sp, #16]
   13b3e:	9a02      	ldr	r2, [sp, #8]
   13b40:	42b2      	cmp	r2, r6
   13b42:	d911      	bls.n	13b68 <nrf_mem_register+0x1f8>
   13b44:	9b00      	ldr	r3, [sp, #0]
   13b46:	443b      	add	r3, r7
   13b48:	441a      	add	r2, r3
   13b4a:	4433      	add	r3, r6
   13b4c:	eb08 0ac2 	add.w	sl, r8, r2, lsl #3
   13b50:	eb08 09c3 	add.w	r9, r8, r3, lsl #3
   13b54:	2208      	movs	r2, #8
   13b56:	4651      	mov	r1, sl
   13b58:	eb0a 0002 	add.w	r0, sl, r2
   13b5c:	f1aa 0a08 	sub.w	sl, sl, #8
   13b60:	f00d feeb 	bl	2193a <memcpy>
   13b64:	45d1      	cmp	r9, sl
   13b66:	d1f5      	bne.n	13b54 <nrf_mem_register+0x1e4>
   13b68:	9b00      	ldr	r3, [sp, #0]
   13b6a:	9903      	ldr	r1, [sp, #12]
   13b6c:	443b      	add	r3, r7
   13b6e:	4433      	add	r3, r6
   13b70:	3301      	adds	r3, #1
   13b72:	eb08 02c3 	add.w	r2, r8, r3, lsl #3
   13b76:	f848 1033 	str.w	r1, [r8, r3, lsl #3]
   13b7a:	6055      	str	r5, [r2, #4]
   13b7c:	e776      	b.n	13a6c <nrf_mem_register+0xfc>
   13b7e:	f100 3aff 	add.w	sl, r0, #4294967295
   13b82:	4556      	cmp	r6, sl
   13b84:	d99b      	bls.n	13abe <nrf_mem_register+0x14e>
   13b86:	e7d8      	b.n	13b3a <nrf_mem_register+0x1ca>
   13b88:	9d04      	ldr	r5, [sp, #16]
   13b8a:	e7d8      	b.n	13b3e <nrf_mem_register+0x1ce>
   13b8c:	9d04      	ldr	r5, [sp, #16]
   13b8e:	f10a 0601 	add.w	r6, sl, #1
   13b92:	e7d4      	b.n	13b3e <nrf_mem_register+0x1ce>
   13b94:	2002268a 	.word	0x2002268a
   13b98:	20020370 	.word	0x20020370
   13b9c:	20020374 	.word	0x20020374
   13ba0:	200203b0 	.word	0x200203b0

00013ba4 <nrf_malloc>:
   13ba4:	4b03      	ldr	r3, [pc, #12]	; (13bb4 <nrf_malloc+0x10>)
   13ba6:	781b      	ldrb	r3, [r3, #0]
   13ba8:	b10b      	cbz	r3, 13bae <nrf_malloc+0xa>
   13baa:	f7ff bd8d 	b.w	136c8 <mem_alloc.constprop.4>
   13bae:	4618      	mov	r0, r3
   13bb0:	4770      	bx	lr
   13bb2:	bf00      	nop
   13bb4:	2002268a 	.word	0x2002268a

00013bb8 <nrf_free>:
   13bb8:	4b04      	ldr	r3, [pc, #16]	; (13bcc <nrf_free+0x14>)
   13bba:	781b      	ldrb	r3, [r3, #0]
   13bbc:	b123      	cbz	r3, 13bc8 <nrf_free+0x10>
   13bbe:	b118      	cbz	r0, 13bc8 <nrf_free+0x10>
   13bc0:	4601      	mov	r1, r0
   13bc2:	2000      	movs	r0, #0
   13bc4:	f7ff bc30 	b.w	13428 <mem_free>
   13bc8:	4770      	bx	lr
   13bca:	bf00      	nop
   13bcc:	2002268a 	.word	0x2002268a

00013bd0 <nrf_shared_malloc>:
   13bd0:	4b03      	ldr	r3, [pc, #12]	; (13be0 <nrf_shared_malloc+0x10>)
   13bd2:	781b      	ldrb	r3, [r3, #0]
   13bd4:	b10b      	cbz	r3, 13bda <nrf_shared_malloc+0xa>
   13bd6:	f7ff bc93 	b.w	13500 <mem_alloc.constprop.5>
   13bda:	4618      	mov	r0, r3
   13bdc:	4770      	bx	lr
   13bde:	bf00      	nop
   13be0:	2002268a 	.word	0x2002268a

00013be4 <nrf_shared_free>:
   13be4:	4b04      	ldr	r3, [pc, #16]	; (13bf8 <nrf_shared_free+0x14>)
   13be6:	781b      	ldrb	r3, [r3, #0]
   13be8:	b123      	cbz	r3, 13bf4 <nrf_shared_free+0x10>
   13bea:	b118      	cbz	r0, 13bf4 <nrf_shared_free+0x10>
   13bec:	4601      	mov	r1, r0
   13bee:	2001      	movs	r0, #1
   13bf0:	f7ff bc1a 	b.w	13428 <mem_free>
   13bf4:	4770      	bx	lr
   13bf6:	bf00      	nop
   13bf8:	2002268a 	.word	0x2002268a

00013bfc <ip_client_event_handler>:
   13bfc:	f850 1b08 	ldr.w	r1, [r0], #8
   13c00:	0c09      	lsrs	r1, r1, #16
   13c02:	f004 bd33 	b.w	1866c <rpc_ip_event_handler>
   13c06:	bf00      	nop

00013c08 <rpc_ip_client_init>:
   13c08:	4801      	ldr	r0, [pc, #4]	; (13c10 <rpc_ip_client_init+0x8>)
   13c0a:	f005 ba23 	b.w	19054 <rpc_client_register>
   13c0e:	bf00      	nop
   13c10:	00022c6c 	.word	0x00022c6c

00013c14 <rpc_ip_client_request_alloc>:
   13c14:	2300      	movs	r3, #0
   13c16:	b510      	push	{r4, lr}
   13c18:	b082      	sub	sp, #8
   13c1a:	9301      	str	r3, [sp, #4]
   13c1c:	b158      	cbz	r0, 13c36 <rpc_ip_client_request_alloc+0x22>
   13c1e:	4604      	mov	r4, r0
   13c20:	aa01      	add	r2, sp, #4
   13c22:	2004      	movs	r0, #4
   13c24:	f005 fc4e 	bl	194c4 <rpc_message_alloc>
   13c28:	b918      	cbnz	r0, 13c32 <rpc_ip_client_request_alloc+0x1e>
   13c2a:	9b01      	ldr	r3, [sp, #4]
   13c2c:	b10b      	cbz	r3, 13c32 <rpc_ip_client_request_alloc+0x1e>
   13c2e:	3308      	adds	r3, #8
   13c30:	6023      	str	r3, [r4, #0]
   13c32:	b002      	add	sp, #8
   13c34:	bd10      	pop	{r4, pc}
   13c36:	2007      	movs	r0, #7
   13c38:	b002      	add	sp, #8
   13c3a:	bd10      	pop	{r4, pc}

00013c3c <rpc_ip_client_request_send>:
   13c3c:	f401 4370 	and.w	r3, r1, #61440	; 0xf000
   13c40:	f5b3 4fe0 	cmp.w	r3, #28672	; 0x7000
   13c44:	d10b      	bne.n	13c5e <rpc_ip_client_request_send+0x22>
   13c46:	b160      	cbz	r0, 13c62 <rpc_ip_client_request_send+0x26>
   13c48:	4603      	mov	r3, r0
   13c4a:	f830 2c08 	ldrh.w	r2, [r0, #-8]
   13c4e:	2004      	movs	r0, #4
   13c50:	ea42 4101 	orr.w	r1, r2, r1, lsl #16
   13c54:	f843 1d08 	str.w	r1, [r3, #-8]!
   13c58:	4619      	mov	r1, r3
   13c5a:	f005 bc1b 	b.w	19494 <rpc_message_send>
   13c5e:	200f      	movs	r0, #15
   13c60:	4770      	bx	lr
   13c62:	2007      	movs	r0, #7
   13c64:	4770      	bx	lr
   13c66:	bf00      	nop

00013c68 <rpc_ip_client_message_free>:
   13c68:	b120      	cbz	r0, 13c74 <rpc_ip_client_message_free+0xc>
   13c6a:	f1a0 0108 	sub.w	r1, r0, #8
   13c6e:	2004      	movs	r0, #4
   13c70:	f005 bc5a 	b.w	19528 <rpc_message_free>
   13c74:	2007      	movs	r0, #7
   13c76:	4770      	bx	lr

00013c78 <rpc_ip_client_data_free>:
   13c78:	b118      	cbz	r0, 13c82 <rpc_ip_client_data_free+0xa>
   13c7a:	4601      	mov	r1, r0
   13c7c:	2004      	movs	r0, #4
   13c7e:	f005 bd65 	b.w	1974c <rpc_message_data_free>
   13c82:	2007      	movs	r0, #7
   13c84:	4770      	bx	lr
   13c86:	bf00      	nop

00013c88 <secure_client_socket>:
   13c88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   13c8c:	460c      	mov	r4, r1
   13c8e:	680b      	ldr	r3, [r1, #0]
   13c90:	4f46      	ldr	r7, [pc, #280]	; (13dac <secure_client_socket+0x124>)
   13c92:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
   13c96:	600b      	str	r3, [r1, #0]
   13c98:	680b      	ldr	r3, [r1, #0]
   13c9a:	00c6      	lsls	r6, r0, #3
   13c9c:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
   13ca0:	600b      	str	r3, [r1, #0]
   13ca2:	eb07 0a06 	add.w	sl, r7, r6
   13ca6:	b082      	sub	sp, #8
   13ca8:	f8da 3004 	ldr.w	r3, [sl, #4]
   13cac:	6989      	ldr	r1, [r1, #24]
   13cae:	f247 0281 	movw	r2, #28801	; 0x7081
   13cb2:	4605      	mov	r5, r0
   13cb4:	f8d4 8000 	ldr.w	r8, [r4]
   13cb8:	f003 fbd0 	bl	1745c <ip_interface_request_create>
   13cbc:	2800      	cmp	r0, #0
   13cbe:	d06f      	beq.n	13da0 <secure_client_socket+0x118>
   13cc0:	f8da 2004 	ldr.w	r2, [sl, #4]
   13cc4:	4681      	mov	r9, r0
   13cc6:	2a00      	cmp	r2, #0
   13cc8:	d15f      	bne.n	13d8a <secure_client_socket+0x102>
   13cca:	4b39      	ldr	r3, [pc, #228]	; (13db0 <secure_client_socket+0x128>)
   13ccc:	1971      	adds	r1, r6, r5
   13cce:	eb03 0181 	add.w	r1, r3, r1, lsl #2
   13cd2:	2224      	movs	r2, #36	; 0x24
   13cd4:	f109 0014 	add.w	r0, r9, #20
   13cd8:	f00d fe2f 	bl	2193a <memcpy>
   13cdc:	f8d9 3008 	ldr.w	r3, [r9, #8]
   13ce0:	4649      	mov	r1, r9
   13ce2:	3324      	adds	r3, #36	; 0x24
   13ce4:	f8c9 3008 	str.w	r3, [r9, #8]
   13ce8:	6822      	ldr	r2, [r4, #0]
   13cea:	4643      	mov	r3, r8
   13cec:	0c12      	lsrs	r2, r2, #16
   13cee:	0412      	lsls	r2, r2, #16
   13cf0:	f042 020a 	orr.w	r2, r2, #10
   13cf4:	6022      	str	r2, [r4, #0]
   13cf6:	4620      	mov	r0, r4
   13cf8:	f247 0281 	movw	r2, #28801	; 0x7081
   13cfc:	f003 fbce 	bl	1749c <ip_interface_request_send>
   13d00:	4603      	mov	r3, r0
   13d02:	b970      	cbnz	r0, 13d22 <secure_client_socket+0x9a>
   13d04:	6823      	ldr	r3, [r4, #0]
   13d06:	00db      	lsls	r3, r3, #3
   13d08:	d40f      	bmi.n	13d2a <secure_client_socket+0xa2>
   13d0a:	f04f 33ff 	mov.w	r3, #4294967295
   13d0e:	f64f 72ff 	movw	r2, #65535	; 0xffff
   13d12:	210b      	movs	r1, #11
   13d14:	4628      	mov	r0, r5
   13d16:	f003 fbd5 	bl	174c4 <ip_interface_wait>
   13d1a:	4603      	mov	r3, r0
   13d1c:	b150      	cbz	r0, 13d34 <secure_client_socket+0xac>
   13d1e:	f8c4 8000 	str.w	r8, [r4]
   13d22:	4618      	mov	r0, r3
   13d24:	b002      	add	sp, #8
   13d26:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   13d2a:	2373      	movs	r3, #115	; 0x73
   13d2c:	4618      	mov	r0, r3
   13d2e:	b002      	add	sp, #8
   13d30:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   13d34:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
   13d38:	f04f 33ff 	mov.w	r3, #4294967295
   13d3c:	4611      	mov	r1, r2
   13d3e:	4628      	mov	r0, r5
   13d40:	f003 fbc0 	bl	174c4 <ip_interface_wait>
   13d44:	4603      	mov	r3, r0
   13d46:	bb30      	cbnz	r0, 13d96 <secure_client_socket+0x10e>
   13d48:	f857 0035 	ldr.w	r0, [r7, r5, lsl #3]
   13d4c:	b138      	cbz	r0, 13d5e <secure_client_socket+0xd6>
   13d4e:	9301      	str	r3, [sp, #4]
   13d50:	f7ff ff32 	bl	13bb8 <nrf_free>
   13d54:	9b01      	ldr	r3, [sp, #4]
   13d56:	443e      	add	r6, r7
   13d58:	6073      	str	r3, [r6, #4]
   13d5a:	f847 3035 	str.w	r3, [r7, r5, lsl #3]
   13d5e:	4618      	mov	r0, r3
   13d60:	6822      	ldr	r2, [r4, #0]
   13d62:	f022 6280 	bic.w	r2, r2, #67108864	; 0x4000000
   13d66:	6022      	str	r2, [r4, #0]
   13d68:	6822      	ldr	r2, [r4, #0]
   13d6a:	0c12      	lsrs	r2, r2, #16
   13d6c:	0412      	lsls	r2, r2, #16
   13d6e:	f042 020c 	orr.w	r2, r2, #12
   13d72:	6022      	str	r2, [r4, #0]
   13d74:	6822      	ldr	r2, [r4, #0]
   13d76:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
   13d7a:	6022      	str	r2, [r4, #0]
   13d7c:	6822      	ldr	r2, [r4, #0]
   13d7e:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
   13d82:	6022      	str	r2, [r4, #0]
   13d84:	b002      	add	sp, #8
   13d86:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   13d8a:	f857 1035 	ldr.w	r1, [r7, r5, lsl #3]
   13d8e:	6800      	ldr	r0, [r0, #0]
   13d90:	f00d fdd3 	bl	2193a <memcpy>
   13d94:	e799      	b.n	13cca <secure_client_socket+0x42>
   13d96:	2b73      	cmp	r3, #115	; 0x73
   13d98:	d0c3      	beq.n	13d22 <secure_client_socket+0x9a>
   13d9a:	f8c4 8000 	str.w	r8, [r4]
   13d9e:	e7c0      	b.n	13d22 <secure_client_socket+0x9a>
   13da0:	230c      	movs	r3, #12
   13da2:	4618      	mov	r0, r3
   13da4:	b002      	add	sp, #8
   13da6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   13daa:	bf00      	nop
   13dac:	20020604 	.word	0x20020604
   13db0:	200204c0 	.word	0x200204c0

00013db4 <tls_interface_init>:
   13db4:	2000      	movs	r0, #0
   13db6:	4770      	bx	lr

00013db8 <tls_interface_open>:
   13db8:	b538      	push	{r3, r4, r5, lr}
   13dba:	1e4b      	subs	r3, r1, #1
   13dbc:	2b01      	cmp	r3, #1
   13dbe:	d808      	bhi.n	13dd2 <tls_interface_open+0x1a>
   13dc0:	4614      	mov	r4, r2
   13dc2:	b162      	cbz	r2, 13dde <tls_interface_open+0x26>
   13dc4:	2901      	cmp	r1, #1
   13dc6:	d02d      	beq.n	13e24 <tls_interface_open+0x6c>
   13dc8:	f5b2 7f87 	cmp.w	r2, #270	; 0x10e
   13dcc:	bf08      	it	eq
   13dce:	2202      	moveq	r2, #2
   13dd0:	d00d      	beq.n	13dee <tls_interface_open+0x36>
   13dd2:	2029      	movs	r0, #41	; 0x29
   13dd4:	f7fd f942 	bl	1105c <bsd_os_errno_set>
   13dd8:	f04f 35ff 	mov.w	r5, #4294967295
   13ddc:	e020      	b.n	13e20 <tls_interface_open+0x68>
   13dde:	2901      	cmp	r1, #1
   13de0:	bf0b      	itete	eq
   13de2:	2201      	moveq	r2, #1
   13de4:	2202      	movne	r2, #2
   13de6:	f44f 7482 	moveq.w	r4, #260	; 0x104
   13dea:	f44f 7487 	movne.w	r4, #270	; 0x10e
   13dee:	f003 fb95 	bl	1751c <ip_interface_open>
   13df2:	1e05      	subs	r5, r0, #0
   13df4:	db1b      	blt.n	13e2e <tls_interface_open+0x76>
   13df6:	4b0f      	ldr	r3, [pc, #60]	; (13e34 <tls_interface_open+0x7c>)
   13df8:	eb05 00c5 	add.w	r0, r5, r5, lsl #3
   13dfc:	eb03 0080 	add.w	r0, r3, r0, lsl #2
   13e00:	2224      	movs	r2, #36	; 0x24
   13e02:	490d      	ldr	r1, [pc, #52]	; (13e38 <tls_interface_open+0x80>)
   13e04:	f00d fd99 	bl	2193a <memcpy>
   13e08:	4628      	mov	r0, r5
   13e0a:	f004 ffe7 	bl	18ddc <interface_socket_from_handle_get>
   13e0e:	6803      	ldr	r3, [r0, #0]
   13e10:	6144      	str	r4, [r0, #20]
   13e12:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
   13e16:	6003      	str	r3, [r0, #0]
   13e18:	6803      	ldr	r3, [r0, #0]
   13e1a:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
   13e1e:	6003      	str	r3, [r0, #0]
   13e20:	4628      	mov	r0, r5
   13e22:	bd38      	pop	{r3, r4, r5, pc}
   13e24:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
   13e28:	d1d3      	bne.n	13dd2 <tls_interface_open+0x1a>
   13e2a:	460a      	mov	r2, r1
   13e2c:	e7df      	b.n	13dee <tls_interface_open+0x36>
   13e2e:	f04f 35ff 	mov.w	r5, #4294967295
   13e32:	e7f5      	b.n	13e20 <tls_interface_open+0x68>
   13e34:	200204c0 	.word	0x200204c0
   13e38:	00022c7c 	.word	0x00022c7c

00013e3c <tls_interface_close>:
   13e3c:	b538      	push	{r3, r4, r5, lr}
   13e3e:	4604      	mov	r4, r0
   13e40:	f004 ffcc 	bl	18ddc <interface_socket_from_handle_get>
   13e44:	b180      	cbz	r0, 13e68 <tls_interface_close+0x2c>
   13e46:	4d0b      	ldr	r5, [pc, #44]	; (13e74 <tls_interface_close+0x38>)
   13e48:	f855 0034 	ldr.w	r0, [r5, r4, lsl #3]
   13e4c:	b138      	cbz	r0, 13e5e <tls_interface_close+0x22>
   13e4e:	f7ff feb3 	bl	13bb8 <nrf_free>
   13e52:	2300      	movs	r3, #0
   13e54:	eb05 02c4 	add.w	r2, r5, r4, lsl #3
   13e58:	f845 3034 	str.w	r3, [r5, r4, lsl #3]
   13e5c:	6053      	str	r3, [r2, #4]
   13e5e:	4620      	mov	r0, r4
   13e60:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   13e64:	f003 bc0c 	b.w	17680 <ip_interface_close>
   13e68:	2009      	movs	r0, #9
   13e6a:	f7fd f8f7 	bl	1105c <bsd_os_errno_set>
   13e6e:	f04f 30ff 	mov.w	r0, #4294967295
   13e72:	bd38      	pop	{r3, r4, r5, pc}
   13e74:	20020604 	.word	0x20020604

00013e78 <tls_interface_sendto>:
   13e78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   13e7c:	460d      	mov	r5, r1
   13e7e:	e9dd 8908 	ldrd	r8, r9, [sp, #32]
   13e82:	4616      	mov	r6, r2
   13e84:	461f      	mov	r7, r3
   13e86:	4604      	mov	r4, r0
   13e88:	f004 ffa8 	bl	18ddc <interface_socket_from_handle_get>
   13e8c:	2800      	cmp	r0, #0
   13e8e:	d03b      	beq.n	13f08 <tls_interface_sendto+0x90>
   13e90:	6803      	ldr	r3, [r0, #0]
   13e92:	b29b      	uxth	r3, r3
   13e94:	2b0c      	cmp	r3, #12
   13e96:	d039      	beq.n	13f0c <tls_interface_sendto+0x94>
   13e98:	6803      	ldr	r3, [r0, #0]
   13e9a:	b29b      	uxth	r3, r3
   13e9c:	2b0b      	cmp	r3, #11
   13e9e:	d111      	bne.n	13ec4 <tls_interface_sendto+0x4c>
   13ea0:	4b20      	ldr	r3, [pc, #128]	; (13f24 <tls_interface_sendto+0xac>)
   13ea2:	eb04 04c4 	add.w	r4, r4, r4, lsl #3
   13ea6:	f813 3024 	ldrb.w	r3, [r3, r4, lsl #2]
   13eaa:	2b02      	cmp	r3, #2
   13eac:	d038      	beq.n	13f20 <tls_interface_sendto+0xa8>
   13eae:	6903      	ldr	r3, [r0, #16]
   13eb0:	2b01      	cmp	r3, #1
   13eb2:	bf14      	ite	ne
   13eb4:	2039      	movne	r0, #57	; 0x39
   13eb6:	202a      	moveq	r0, #42	; 0x2a
   13eb8:	f7fd f8d0 	bl	1105c <bsd_os_errno_set>
   13ebc:	f04f 30ff 	mov.w	r0, #4294967295
   13ec0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   13ec4:	6903      	ldr	r3, [r0, #16]
   13ec6:	2b01      	cmp	r3, #1
   13ec8:	d00b      	beq.n	13ee2 <tls_interface_sendto+0x6a>
   13eca:	2b02      	cmp	r3, #2
   13ecc:	d001      	beq.n	13ed2 <tls_interface_sendto+0x5a>
   13ece:	2039      	movs	r0, #57	; 0x39
   13ed0:	e7f2      	b.n	13eb8 <tls_interface_sendto+0x40>
   13ed2:	6803      	ldr	r3, [r0, #0]
   13ed4:	b29b      	uxth	r3, r3
   13ed6:	2b02      	cmp	r3, #2
   13ed8:	d007      	beq.n	13eea <tls_interface_sendto+0x72>
   13eda:	6803      	ldr	r3, [r0, #0]
   13edc:	b29b      	uxth	r3, r3
   13ede:	2b04      	cmp	r3, #4
   13ee0:	d003      	beq.n	13eea <tls_interface_sendto+0x72>
   13ee2:	6803      	ldr	r3, [r0, #0]
   13ee4:	b29b      	uxth	r3, r3
   13ee6:	2b05      	cmp	r3, #5
   13ee8:	d1f1      	bne.n	13ece <tls_interface_sendto+0x56>
   13eea:	4b0e      	ldr	r3, [pc, #56]	; (13f24 <tls_interface_sendto+0xac>)
   13eec:	eb04 02c4 	add.w	r2, r4, r4, lsl #3
   13ef0:	f813 3022 	ldrb.w	r3, [r3, r2, lsl #2]
   13ef4:	2b02      	cmp	r3, #2
   13ef6:	d1ea      	bne.n	13ece <tls_interface_sendto+0x56>
   13ef8:	4601      	mov	r1, r0
   13efa:	4620      	mov	r0, r4
   13efc:	f7ff fec4 	bl	13c88 <secure_client_socket>
   13f00:	2800      	cmp	r0, #0
   13f02:	d003      	beq.n	13f0c <tls_interface_sendto+0x94>
   13f04:	dcd8      	bgt.n	13eb8 <tls_interface_sendto+0x40>
   13f06:	e7d9      	b.n	13ebc <tls_interface_sendto+0x44>
   13f08:	2009      	movs	r0, #9
   13f0a:	e7d5      	b.n	13eb8 <tls_interface_sendto+0x40>
   13f0c:	e9cd 8908 	strd	r8, r9, [sp, #32]
   13f10:	463b      	mov	r3, r7
   13f12:	4632      	mov	r2, r6
   13f14:	4629      	mov	r1, r5
   13f16:	4620      	mov	r0, r4
   13f18:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   13f1c:	f003 bc20 	b.w	17760 <ip_interface_sendto>
   13f20:	2023      	movs	r0, #35	; 0x23
   13f22:	e7c9      	b.n	13eb8 <tls_interface_sendto+0x40>
   13f24:	200204c0 	.word	0x200204c0

00013f28 <tls_interface_recvfrom>:
   13f28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   13f2c:	460d      	mov	r5, r1
   13f2e:	e9dd 8908 	ldrd	r8, r9, [sp, #32]
   13f32:	4616      	mov	r6, r2
   13f34:	461f      	mov	r7, r3
   13f36:	4604      	mov	r4, r0
   13f38:	f004 ff50 	bl	18ddc <interface_socket_from_handle_get>
   13f3c:	2800      	cmp	r0, #0
   13f3e:	d038      	beq.n	13fb2 <tls_interface_recvfrom+0x8a>
   13f40:	6803      	ldr	r3, [r0, #0]
   13f42:	b29b      	uxth	r3, r3
   13f44:	2b0c      	cmp	r3, #12
   13f46:	d00f      	beq.n	13f68 <tls_interface_recvfrom+0x40>
   13f48:	6803      	ldr	r3, [r0, #0]
   13f4a:	b29b      	uxth	r3, r3
   13f4c:	2b0d      	cmp	r3, #13
   13f4e:	d00b      	beq.n	13f68 <tls_interface_recvfrom+0x40>
   13f50:	6903      	ldr	r3, [r0, #16]
   13f52:	2b01      	cmp	r3, #1
   13f54:	d01a      	beq.n	13f8c <tls_interface_recvfrom+0x64>
   13f56:	2b02      	cmp	r3, #2
   13f58:	d010      	beq.n	13f7c <tls_interface_recvfrom+0x54>
   13f5a:	2023      	movs	r0, #35	; 0x23
   13f5c:	f7fd f87e 	bl	1105c <bsd_os_errno_set>
   13f60:	f04f 30ff 	mov.w	r0, #4294967295
   13f64:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   13f68:	e9cd 8908 	strd	r8, r9, [sp, #32]
   13f6c:	463b      	mov	r3, r7
   13f6e:	4632      	mov	r2, r6
   13f70:	4629      	mov	r1, r5
   13f72:	4620      	mov	r0, r4
   13f74:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   13f78:	f003 bd6a 	b.w	17a50 <ip_interface_recvfrom>
   13f7c:	6803      	ldr	r3, [r0, #0]
   13f7e:	b29b      	uxth	r3, r3
   13f80:	2b02      	cmp	r3, #2
   13f82:	d007      	beq.n	13f94 <tls_interface_recvfrom+0x6c>
   13f84:	6803      	ldr	r3, [r0, #0]
   13f86:	b29b      	uxth	r3, r3
   13f88:	2b04      	cmp	r3, #4
   13f8a:	d003      	beq.n	13f94 <tls_interface_recvfrom+0x6c>
   13f8c:	6803      	ldr	r3, [r0, #0]
   13f8e:	b29b      	uxth	r3, r3
   13f90:	2b05      	cmp	r3, #5
   13f92:	d1e2      	bne.n	13f5a <tls_interface_recvfrom+0x32>
   13f94:	4b08      	ldr	r3, [pc, #32]	; (13fb8 <tls_interface_recvfrom+0x90>)
   13f96:	eb04 02c4 	add.w	r2, r4, r4, lsl #3
   13f9a:	f813 3022 	ldrb.w	r3, [r3, r2, lsl #2]
   13f9e:	2b02      	cmp	r3, #2
   13fa0:	d1db      	bne.n	13f5a <tls_interface_recvfrom+0x32>
   13fa2:	4601      	mov	r1, r0
   13fa4:	4620      	mov	r0, r4
   13fa6:	f7ff fe6f 	bl	13c88 <secure_client_socket>
   13faa:	2800      	cmp	r0, #0
   13fac:	d0dc      	beq.n	13f68 <tls_interface_recvfrom+0x40>
   13fae:	dcd5      	bgt.n	13f5c <tls_interface_recvfrom+0x34>
   13fb0:	e7d6      	b.n	13f60 <tls_interface_recvfrom+0x38>
   13fb2:	2009      	movs	r0, #9
   13fb4:	e7d2      	b.n	13f5c <tls_interface_recvfrom+0x34>
   13fb6:	bf00      	nop
   13fb8:	200204c0 	.word	0x200204c0

00013fbc <tls_interface_bind>:
   13fbc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13fc0:	460c      	mov	r4, r1
   13fc2:	4617      	mov	r7, r2
   13fc4:	4606      	mov	r6, r0
   13fc6:	f004 ff09 	bl	18ddc <interface_socket_from_handle_get>
   13fca:	2800      	cmp	r0, #0
   13fcc:	d06d      	beq.n	140aa <tls_interface_bind+0xee>
   13fce:	6803      	ldr	r3, [r0, #0]
   13fd0:	4605      	mov	r5, r0
   13fd2:	b29b      	uxth	r3, r3
   13fd4:	2b02      	cmp	r3, #2
   13fd6:	d15a      	bne.n	1408e <tls_interface_bind+0xd2>
   13fd8:	4621      	mov	r1, r4
   13fda:	463a      	mov	r2, r7
   13fdc:	4630      	mov	r0, r6
   13fde:	f003 ff25 	bl	17e2c <ip_interface_bind>
   13fe2:	4604      	mov	r4, r0
   13fe4:	2800      	cmp	r0, #0
   13fe6:	d148      	bne.n	1407a <tls_interface_bind+0xbe>
   13fe8:	00f7      	lsls	r7, r6, #3
   13fea:	f8df 80c4 	ldr.w	r8, [pc, #196]	; 140b0 <tls_interface_bind+0xf4>
   13fee:	19bb      	adds	r3, r7, r6
   13ff0:	f818 3023 	ldrb.w	r3, [r8, r3, lsl #2]
   13ff4:	2b01      	cmp	r3, #1
   13ff6:	d002      	beq.n	13ffe <tls_interface_bind+0x42>
   13ff8:	4620      	mov	r0, r4
   13ffa:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13ffe:	f8df b0b4 	ldr.w	fp, [pc, #180]	; 140b4 <tls_interface_bind+0xf8>
   14002:	f247 0281 	movw	r2, #28801	; 0x7081
   14006:	eb0b 0a07 	add.w	sl, fp, r7
   1400a:	f8da 3004 	ldr.w	r3, [sl, #4]
   1400e:	69a9      	ldr	r1, [r5, #24]
   14010:	4630      	mov	r0, r6
   14012:	f003 fa23 	bl	1745c <ip_interface_request_create>
   14016:	4681      	mov	r9, r0
   14018:	2800      	cmp	r0, #0
   1401a:	d044      	beq.n	140a6 <tls_interface_bind+0xea>
   1401c:	f8da 2004 	ldr.w	r2, [sl, #4]
   14020:	2a00      	cmp	r2, #0
   14022:	d13a      	bne.n	1409a <tls_interface_bind+0xde>
   14024:	19b9      	adds	r1, r7, r6
   14026:	eb08 0181 	add.w	r1, r8, r1, lsl #2
   1402a:	2224      	movs	r2, #36	; 0x24
   1402c:	f109 0014 	add.w	r0, r9, #20
   14030:	f00d fc83 	bl	2193a <memcpy>
   14034:	f8d9 3008 	ldr.w	r3, [r9, #8]
   14038:	4649      	mov	r1, r9
   1403a:	3324      	adds	r3, #36	; 0x24
   1403c:	f8c9 3008 	str.w	r3, [r9, #8]
   14040:	682a      	ldr	r2, [r5, #0]
   14042:	2304      	movs	r3, #4
   14044:	0c12      	lsrs	r2, r2, #16
   14046:	0412      	lsls	r2, r2, #16
   14048:	f042 020a 	orr.w	r2, r2, #10
   1404c:	602a      	str	r2, [r5, #0]
   1404e:	4628      	mov	r0, r5
   14050:	f247 0281 	movw	r2, #28801	; 0x7081
   14054:	f003 fa22 	bl	1749c <ip_interface_request_send>
   14058:	b9e8      	cbnz	r0, 14096 <tls_interface_bind+0xda>
   1405a:	682b      	ldr	r3, [r5, #0]
   1405c:	00db      	lsls	r3, r3, #3
   1405e:	d418      	bmi.n	14092 <tls_interface_bind+0xd6>
   14060:	4630      	mov	r0, r6
   14062:	f04f 33ff 	mov.w	r3, #4294967295
   14066:	f64f 72ff 	movw	r2, #65535	; 0xffff
   1406a:	210b      	movs	r1, #11
   1406c:	f003 fa2a 	bl	174c4 <ip_interface_wait>
   14070:	2800      	cmp	r0, #0
   14072:	d0c1      	beq.n	13ff8 <tls_interface_bind+0x3c>
   14074:	2304      	movs	r3, #4
   14076:	4604      	mov	r4, r0
   14078:	602b      	str	r3, [r5, #0]
   1407a:	2c00      	cmp	r4, #0
   1407c:	ddbc      	ble.n	13ff8 <tls_interface_bind+0x3c>
   1407e:	4620      	mov	r0, r4
   14080:	f04f 34ff 	mov.w	r4, #4294967295
   14084:	f7fc ffea 	bl	1105c <bsd_os_errno_set>
   14088:	4620      	mov	r0, r4
   1408a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1408e:	242d      	movs	r4, #45	; 0x2d
   14090:	e7f5      	b.n	1407e <tls_interface_bind+0xc2>
   14092:	2473      	movs	r4, #115	; 0x73
   14094:	e7f3      	b.n	1407e <tls_interface_bind+0xc2>
   14096:	4604      	mov	r4, r0
   14098:	e7ef      	b.n	1407a <tls_interface_bind+0xbe>
   1409a:	f85b 1036 	ldr.w	r1, [fp, r6, lsl #3]
   1409e:	6800      	ldr	r0, [r0, #0]
   140a0:	f00d fc4b 	bl	2193a <memcpy>
   140a4:	e7be      	b.n	14024 <tls_interface_bind+0x68>
   140a6:	240c      	movs	r4, #12
   140a8:	e7e9      	b.n	1407e <tls_interface_bind+0xc2>
   140aa:	2409      	movs	r4, #9
   140ac:	e7e7      	b.n	1407e <tls_interface_bind+0xc2>
   140ae:	bf00      	nop
   140b0:	200204c0 	.word	0x200204c0
   140b4:	20020604 	.word	0x20020604

000140b8 <tls_interface_connect>:
   140b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   140ba:	460e      	mov	r6, r1
   140bc:	4617      	mov	r7, r2
   140be:	4604      	mov	r4, r0
   140c0:	f004 fe8c 	bl	18ddc <interface_socket_from_handle_get>
   140c4:	b1e8      	cbz	r0, 14102 <tls_interface_connect+0x4a>
   140c6:	4b13      	ldr	r3, [pc, #76]	; (14114 <tls_interface_connect+0x5c>)
   140c8:	eb04 02c4 	add.w	r2, r4, r4, lsl #3
   140cc:	f813 3022 	ldrb.w	r3, [r3, r2, lsl #2]
   140d0:	2b02      	cmp	r3, #2
   140d2:	d11c      	bne.n	1410e <tls_interface_connect+0x56>
   140d4:	6803      	ldr	r3, [r0, #0]
   140d6:	4605      	mov	r5, r0
   140d8:	b29b      	uxth	r3, r3
   140da:	2b02      	cmp	r3, #2
   140dc:	d003      	beq.n	140e6 <tls_interface_connect+0x2e>
   140de:	6803      	ldr	r3, [r0, #0]
   140e0:	b29b      	uxth	r3, r3
   140e2:	2b04      	cmp	r3, #4
   140e4:	d113      	bne.n	1410e <tls_interface_connect+0x56>
   140e6:	463a      	mov	r2, r7
   140e8:	4631      	mov	r1, r6
   140ea:	4620      	mov	r0, r4
   140ec:	f003 fde4 	bl	17cb8 <ip_interface_connect>
   140f0:	b110      	cbz	r0, 140f8 <tls_interface_connect+0x40>
   140f2:	2800      	cmp	r0, #0
   140f4:	dc06      	bgt.n	14104 <tls_interface_connect+0x4c>
   140f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   140f8:	4629      	mov	r1, r5
   140fa:	4620      	mov	r0, r4
   140fc:	f7ff fdc4 	bl	13c88 <secure_client_socket>
   14100:	e7f7      	b.n	140f2 <tls_interface_connect+0x3a>
   14102:	2009      	movs	r0, #9
   14104:	f7fc ffaa 	bl	1105c <bsd_os_errno_set>
   14108:	f04f 30ff 	mov.w	r0, #4294967295
   1410c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1410e:	202d      	movs	r0, #45	; 0x2d
   14110:	e7f8      	b.n	14104 <tls_interface_connect+0x4c>
   14112:	bf00      	nop
   14114:	200204c0 	.word	0x200204c0

00014118 <tls_interface_listen>:
   14118:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1411c:	b083      	sub	sp, #12
   1411e:	9101      	str	r1, [sp, #4]
   14120:	4605      	mov	r5, r0
   14122:	f004 fe5b 	bl	18ddc <interface_socket_from_handle_get>
   14126:	2800      	cmp	r0, #0
   14128:	d079      	beq.n	1421e <tls_interface_listen+0x106>
   1412a:	6903      	ldr	r3, [r0, #16]
   1412c:	4604      	mov	r4, r0
   1412e:	2b01      	cmp	r3, #1
   14130:	d173      	bne.n	1421a <tls_interface_listen+0x102>
   14132:	6803      	ldr	r3, [r0, #0]
   14134:	b29b      	uxth	r3, r3
   14136:	2b04      	cmp	r3, #4
   14138:	d05f      	beq.n	141fa <tls_interface_listen+0xe2>
   1413a:	6823      	ldr	r3, [r4, #0]
   1413c:	b29b      	uxth	r3, r3
   1413e:	2b0b      	cmp	r3, #11
   14140:	d16b      	bne.n	1421a <tls_interface_listen+0x102>
   14142:	00ee      	lsls	r6, r5, #3
   14144:	4f37      	ldr	r7, [pc, #220]	; (14224 <tls_interface_listen+0x10c>)
   14146:	1973      	adds	r3, r6, r5
   14148:	f817 3023 	ldrb.w	r3, [r7, r3, lsl #2]
   1414c:	2b01      	cmp	r3, #1
   1414e:	d164      	bne.n	1421a <tls_interface_listen+0x102>
   14150:	2201      	movs	r2, #1
   14152:	f8df 90d4 	ldr.w	r9, [pc, #212]	; 14228 <tls_interface_listen+0x110>
   14156:	1973      	adds	r3, r6, r5
   14158:	00ee      	lsls	r6, r5, #3
   1415a:	f807 2023 	strb.w	r2, [r7, r3, lsl #2]
   1415e:	eb09 0806 	add.w	r8, r9, r6
   14162:	69a1      	ldr	r1, [r4, #24]
   14164:	f8d8 3004 	ldr.w	r3, [r8, #4]
   14168:	f247 0281 	movw	r2, #28801	; 0x7081
   1416c:	4628      	mov	r0, r5
   1416e:	f8d4 a000 	ldr.w	sl, [r4]
   14172:	f003 f973 	bl	1745c <ip_interface_request_create>
   14176:	4683      	mov	fp, r0
   14178:	2800      	cmp	r0, #0
   1417a:	d04c      	beq.n	14216 <tls_interface_listen+0xfe>
   1417c:	f8d8 2004 	ldr.w	r2, [r8, #4]
   14180:	2a00      	cmp	r2, #0
   14182:	d142      	bne.n	1420a <tls_interface_listen+0xf2>
   14184:	1971      	adds	r1, r6, r5
   14186:	eb07 0181 	add.w	r1, r7, r1, lsl #2
   1418a:	2224      	movs	r2, #36	; 0x24
   1418c:	f10b 0014 	add.w	r0, fp, #20
   14190:	f00d fbd3 	bl	2193a <memcpy>
   14194:	f8db 2008 	ldr.w	r2, [fp, #8]
   14198:	4659      	mov	r1, fp
   1419a:	3224      	adds	r2, #36	; 0x24
   1419c:	f8cb 2008 	str.w	r2, [fp, #8]
   141a0:	6822      	ldr	r2, [r4, #0]
   141a2:	4653      	mov	r3, sl
   141a4:	0c12      	lsrs	r2, r2, #16
   141a6:	0412      	lsls	r2, r2, #16
   141a8:	f042 020a 	orr.w	r2, r2, #10
   141ac:	6022      	str	r2, [r4, #0]
   141ae:	4620      	mov	r0, r4
   141b0:	f247 0281 	movw	r2, #28801	; 0x7081
   141b4:	f003 f972 	bl	1749c <ip_interface_request_send>
   141b8:	b968      	cbnz	r0, 141d6 <tls_interface_listen+0xbe>
   141ba:	6823      	ldr	r3, [r4, #0]
   141bc:	00db      	lsls	r3, r3, #3
   141be:	d40f      	bmi.n	141e0 <tls_interface_listen+0xc8>
   141c0:	f04f 33ff 	mov.w	r3, #4294967295
   141c4:	f64f 72ff 	movw	r2, #65535	; 0xffff
   141c8:	210b      	movs	r1, #11
   141ca:	4628      	mov	r0, r5
   141cc:	f003 f97a 	bl	174c4 <ip_interface_wait>
   141d0:	b170      	cbz	r0, 141f0 <tls_interface_listen+0xd8>
   141d2:	f8c4 a000 	str.w	sl, [r4]
   141d6:	2800      	cmp	r0, #0
   141d8:	dc03      	bgt.n	141e2 <tls_interface_listen+0xca>
   141da:	b003      	add	sp, #12
   141dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   141e0:	2073      	movs	r0, #115	; 0x73
   141e2:	f7fc ff3b 	bl	1105c <bsd_os_errno_set>
   141e6:	f04f 30ff 	mov.w	r0, #4294967295
   141ea:	b003      	add	sp, #12
   141ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   141f0:	9901      	ldr	r1, [sp, #4]
   141f2:	4628      	mov	r0, r5
   141f4:	f003 feba 	bl	17f6c <ip_interface_listen>
   141f8:	e7ed      	b.n	141d6 <tls_interface_listen+0xbe>
   141fa:	00ee      	lsls	r6, r5, #3
   141fc:	4f09      	ldr	r7, [pc, #36]	; (14224 <tls_interface_listen+0x10c>)
   141fe:	1973      	adds	r3, r6, r5
   14200:	f817 3023 	ldrb.w	r3, [r7, r3, lsl #2]
   14204:	2b02      	cmp	r3, #2
   14206:	d198      	bne.n	1413a <tls_interface_listen+0x22>
   14208:	e7a2      	b.n	14150 <tls_interface_listen+0x38>
   1420a:	f859 1035 	ldr.w	r1, [r9, r5, lsl #3]
   1420e:	6800      	ldr	r0, [r0, #0]
   14210:	f00d fb93 	bl	2193a <memcpy>
   14214:	e7b6      	b.n	14184 <tls_interface_listen+0x6c>
   14216:	200c      	movs	r0, #12
   14218:	e7e3      	b.n	141e2 <tls_interface_listen+0xca>
   1421a:	202d      	movs	r0, #45	; 0x2d
   1421c:	e7e1      	b.n	141e2 <tls_interface_listen+0xca>
   1421e:	2009      	movs	r0, #9
   14220:	e7df      	b.n	141e2 <tls_interface_listen+0xca>
   14222:	bf00      	nop
   14224:	200204c0 	.word	0x200204c0
   14228:	20020604 	.word	0x20020604

0001422c <tls_interface_accept>:
   1422c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1422e:	460c      	mov	r4, r1
   14230:	4616      	mov	r6, r2
   14232:	461f      	mov	r7, r3
   14234:	4605      	mov	r5, r0
   14236:	f004 fdd1 	bl	18ddc <interface_socket_from_handle_get>
   1423a:	2800      	cmp	r0, #0
   1423c:	d03b      	beq.n	142b6 <tls_interface_accept+0x8a>
   1423e:	6800      	ldr	r0, [r0, #0]
   14240:	b280      	uxth	r0, r0
   14242:	2806      	cmp	r0, #6
   14244:	d137      	bne.n	142b6 <tls_interface_accept+0x8a>
   14246:	4621      	mov	r1, r4
   14248:	463b      	mov	r3, r7
   1424a:	4632      	mov	r2, r6
   1424c:	4628      	mov	r0, r5
   1424e:	f003 ff03 	bl	18058 <ip_interface_accept>
   14252:	4604      	mov	r4, r0
   14254:	b118      	cbz	r0, 1425e <tls_interface_accept+0x32>
   14256:	2c00      	cmp	r4, #0
   14258:	dc2e      	bgt.n	142b8 <tls_interface_accept+0x8c>
   1425a:	4620      	mov	r0, r4
   1425c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1425e:	4628      	mov	r0, r5
   14260:	f004 fdbc 	bl	18ddc <interface_socket_from_handle_get>
   14264:	6803      	ldr	r3, [r0, #0]
   14266:	4f18      	ldr	r7, [pc, #96]	; (142c8 <tls_interface_accept+0x9c>)
   14268:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
   1426c:	6003      	str	r3, [r0, #0]
   1426e:	6803      	ldr	r3, [r0, #0]
   14270:	eb05 05c5 	add.w	r5, r5, r5, lsl #3
   14274:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
   14278:	4606      	mov	r6, r0
   1427a:	6003      	str	r3, [r0, #0]
   1427c:	eb07 0185 	add.w	r1, r7, r5, lsl #2
   14280:	2224      	movs	r2, #36	; 0x24
   14282:	4638      	mov	r0, r7
   14284:	f00d fb59 	bl	2193a <memcpy>
   14288:	2302      	movs	r3, #2
   1428a:	703b      	strb	r3, [r7, #0]
   1428c:	6833      	ldr	r3, [r6, #0]
   1428e:	4620      	mov	r0, r4
   14290:	0c1b      	lsrs	r3, r3, #16
   14292:	041b      	lsls	r3, r3, #16
   14294:	f043 030b 	orr.w	r3, r3, #11
   14298:	6033      	str	r3, [r6, #0]
   1429a:	f64f 72ff 	movw	r2, #65535	; 0xffff
   1429e:	f04f 33ff 	mov.w	r3, #4294967295
   142a2:	210c      	movs	r1, #12
   142a4:	f003 f90e 	bl	174c4 <ip_interface_wait>
   142a8:	4604      	mov	r4, r0
   142aa:	2800      	cmp	r0, #0
   142ac:	d0d5      	beq.n	1425a <tls_interface_accept+0x2e>
   142ae:	2000      	movs	r0, #0
   142b0:	f003 f9e6 	bl	17680 <ip_interface_close>
   142b4:	e7cf      	b.n	14256 <tls_interface_accept+0x2a>
   142b6:	2409      	movs	r4, #9
   142b8:	4620      	mov	r0, r4
   142ba:	f04f 34ff 	mov.w	r4, #4294967295
   142be:	f7fc fecd 	bl	1105c <bsd_os_errno_set>
   142c2:	4620      	mov	r0, r4
   142c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   142c6:	bf00      	nop
   142c8:	200204c0 	.word	0x200204c0

000142cc <tls_interface_setopt>:
   142cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   142d0:	f5b1 7f8d 	cmp.w	r1, #282	; 0x11a
   142d4:	9e06      	ldr	r6, [sp, #24]
   142d6:	d11e      	bne.n	14316 <tls_interface_setopt+0x4a>
   142d8:	461f      	mov	r7, r3
   142da:	4605      	mov	r5, r0
   142dc:	2b00      	cmp	r3, #0
   142de:	f000 808c 	beq.w	143fa <tls_interface_setopt+0x12e>
   142e2:	4690      	mov	r8, r2
   142e4:	f004 fd7a 	bl	18ddc <interface_socket_from_handle_get>
   142e8:	2800      	cmp	r0, #0
   142ea:	d07b      	beq.n	143e4 <tls_interface_setopt+0x118>
   142ec:	6804      	ldr	r4, [r0, #0]
   142ee:	b2a4      	uxth	r4, r4
   142f0:	2c02      	cmp	r4, #2
   142f2:	d007      	beq.n	14304 <tls_interface_setopt+0x38>
   142f4:	6803      	ldr	r3, [r0, #0]
   142f6:	b29b      	uxth	r3, r3
   142f8:	2b04      	cmp	r3, #4
   142fa:	d003      	beq.n	14304 <tls_interface_setopt+0x38>
   142fc:	6803      	ldr	r3, [r0, #0]
   142fe:	b29b      	uxth	r3, r3
   14300:	2b05      	cmp	r3, #5
   14302:	d16f      	bne.n	143e4 <tls_interface_setopt+0x118>
   14304:	f108 32ff 	add.w	r2, r8, #4294967295
   14308:	2a04      	cmp	r2, #4
   1430a:	d87c      	bhi.n	14406 <tls_interface_setopt+0x13a>
   1430c:	e8df f002 	tbb	[pc, r2]
   14310:	41324e24 	.word	0x41324e24
   14314:	07          	.byte	0x07
   14315:	00          	.byte	0x00
   14316:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   1431a:	f003 bfd5 	b.w	182c8 <ip_interface_setopt>
   1431e:	4c3b      	ldr	r4, [pc, #236]	; (1440c <tls_interface_setopt+0x140>)
   14320:	f854 0035 	ldr.w	r0, [r4, r5, lsl #3]
   14324:	b138      	cbz	r0, 14336 <tls_interface_setopt+0x6a>
   14326:	f7ff fc47 	bl	13bb8 <nrf_free>
   1432a:	2200      	movs	r2, #0
   1432c:	eb04 03c5 	add.w	r3, r4, r5, lsl #3
   14330:	f844 2035 	str.w	r2, [r4, r5, lsl #3]
   14334:	605a      	str	r2, [r3, #4]
   14336:	4630      	mov	r0, r6
   14338:	b34e      	cbz	r6, 1438e <tls_interface_setopt+0xc2>
   1433a:	f7ff fc33 	bl	13ba4 <nrf_malloc>
   1433e:	f844 0035 	str.w	r0, [r4, r5, lsl #3]
   14342:	2800      	cmp	r0, #0
   14344:	d057      	beq.n	143f6 <tls_interface_setopt+0x12a>
   14346:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
   1434a:	4632      	mov	r2, r6
   1434c:	4639      	mov	r1, r7
   1434e:	6066      	str	r6, [r4, #4]
   14350:	f00d faf3 	bl	2193a <memcpy>
   14354:	2000      	movs	r0, #0
   14356:	e01a      	b.n	1438e <tls_interface_setopt+0xc2>
   14358:	2e04      	cmp	r6, #4
   1435a:	d14a      	bne.n	143f2 <tls_interface_setopt+0x126>
   1435c:	6838      	ldr	r0, [r7, #0]
   1435e:	2800      	cmp	r0, #0
   14360:	d039      	beq.n	143d6 <tls_interface_setopt+0x10a>
   14362:	2801      	cmp	r0, #1
   14364:	d145      	bne.n	143f2 <tls_interface_setopt+0x126>
   14366:	4a2a      	ldr	r2, [pc, #168]	; (14410 <tls_interface_setopt+0x144>)
   14368:	eb05 04c5 	add.w	r4, r5, r5, lsl #3
   1436c:	f802 0024 	strb.w	r0, [r2, r4, lsl #2]
   14370:	2000      	movs	r0, #0
   14372:	e00c      	b.n	1438e <tls_interface_setopt+0xc2>
   14374:	2e01      	cmp	r6, #1
   14376:	d13c      	bne.n	143f2 <tls_interface_setopt+0x126>
   14378:	783a      	ldrb	r2, [r7, #0]
   1437a:	2000      	movs	r0, #0
   1437c:	3200      	adds	r2, #0
   1437e:	bf18      	it	ne
   14380:	2201      	movne	r2, #1
   14382:	4b23      	ldr	r3, [pc, #140]	; (14410 <tls_interface_setopt+0x144>)
   14384:	eb05 04c5 	add.w	r4, r5, r5, lsl #3
   14388:	eb03 0484 	add.w	r4, r3, r4, lsl #2
   1438c:	7062      	strb	r2, [r4, #1]
   1438e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   14392:	2e04      	cmp	r6, #4
   14394:	d12d      	bne.n	143f2 <tls_interface_setopt+0x126>
   14396:	683a      	ldr	r2, [r7, #0]
   14398:	2a02      	cmp	r2, #2
   1439a:	d82a      	bhi.n	143f2 <tls_interface_setopt+0x126>
   1439c:	4b1c      	ldr	r3, [pc, #112]	; (14410 <tls_interface_setopt+0x144>)
   1439e:	eb05 04c5 	add.w	r4, r5, r5, lsl #3
   143a2:	eb03 0484 	add.w	r4, r3, r4, lsl #2
   143a6:	70a2      	strb	r2, [r4, #2]
   143a8:	2000      	movs	r0, #0
   143aa:	e7f0      	b.n	1438e <tls_interface_setopt+0xc2>
   143ac:	ea5f 0c96 	movs.w	ip, r6, lsr #2
   143b0:	d01f      	beq.n	143f2 <tls_interface_setopt+0x126>
   143b2:	f016 0403 	ands.w	r4, r6, #3
   143b6:	d11c      	bne.n	143f2 <tls_interface_setopt+0x126>
   143b8:	eb05 05c5 	add.w	r5, r5, r5, lsl #3
   143bc:	00ad      	lsls	r5, r5, #2
   143be:	4b14      	ldr	r3, [pc, #80]	; (14410 <tls_interface_setopt+0x144>)
   143c0:	1d28      	adds	r0, r5, #4
   143c2:	4418      	add	r0, r3
   143c4:	442b      	add	r3, r5
   143c6:	4632      	mov	r2, r6
   143c8:	4639      	mov	r1, r7
   143ca:	f883 c003 	strb.w	ip, [r3, #3]
   143ce:	f00d fab4 	bl	2193a <memcpy>
   143d2:	4620      	mov	r0, r4
   143d4:	e7db      	b.n	1438e <tls_interface_setopt+0xc2>
   143d6:	2102      	movs	r1, #2
   143d8:	4a0d      	ldr	r2, [pc, #52]	; (14410 <tls_interface_setopt+0x144>)
   143da:	eb05 04c5 	add.w	r4, r5, r5, lsl #3
   143de:	f802 1024 	strb.w	r1, [r2, r4, lsl #2]
   143e2:	e7d4      	b.n	1438e <tls_interface_setopt+0xc2>
   143e4:	2009      	movs	r0, #9
   143e6:	f7fc fe39 	bl	1105c <bsd_os_errno_set>
   143ea:	f04f 30ff 	mov.w	r0, #4294967295
   143ee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   143f2:	2016      	movs	r0, #22
   143f4:	e7f7      	b.n	143e6 <tls_interface_setopt+0x11a>
   143f6:	200c      	movs	r0, #12
   143f8:	e7f5      	b.n	143e6 <tls_interface_setopt+0x11a>
   143fa:	200e      	movs	r0, #14
   143fc:	f7fc fe2e 	bl	1105c <bsd_os_errno_set>
   14400:	f04f 30ff 	mov.w	r0, #4294967295
   14404:	e7c3      	b.n	1438e <tls_interface_setopt+0xc2>
   14406:	202a      	movs	r0, #42	; 0x2a
   14408:	e7ed      	b.n	143e6 <tls_interface_setopt+0x11a>
   1440a:	bf00      	nop
   1440c:	20020604 	.word	0x20020604
   14410:	200204c0 	.word	0x200204c0

00014414 <tls_interface_getopt>:
   14414:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   14418:	f5b1 7f8d 	cmp.w	r1, #282	; 0x11a
   1441c:	9f06      	ldr	r7, [sp, #24]
   1441e:	d112      	bne.n	14446 <tls_interface_getopt+0x32>
   14420:	461d      	mov	r5, r3
   14422:	b16b      	cbz	r3, 14440 <tls_interface_getopt+0x2c>
   14424:	b167      	cbz	r7, 14440 <tls_interface_getopt+0x2c>
   14426:	4606      	mov	r6, r0
   14428:	4614      	mov	r4, r2
   1442a:	f004 fcd7 	bl	18ddc <interface_socket_from_handle_get>
   1442e:	2800      	cmp	r0, #0
   14430:	d04f      	beq.n	144d2 <tls_interface_getopt+0xbe>
   14432:	3c01      	subs	r4, #1
   14434:	2c03      	cmp	r4, #3
   14436:	d852      	bhi.n	144de <tls_interface_getopt+0xca>
   14438:	e8df f004 	tbb	[pc, r4]
   1443c:	09152139 	.word	0x09152139
   14440:	200e      	movs	r0, #14
   14442:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   14446:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   1444a:	f003 bff9 	b.w	18440 <ip_interface_getopt>
   1444e:	683b      	ldr	r3, [r7, #0]
   14450:	2b04      	cmp	r3, #4
   14452:	d13c      	bne.n	144ce <tls_interface_getopt+0xba>
   14454:	4b23      	ldr	r3, [pc, #140]	; (144e4 <tls_interface_getopt+0xd0>)
   14456:	eb06 06c6 	add.w	r6, r6, r6, lsl #3
   1445a:	eb03 0686 	add.w	r6, r3, r6, lsl #2
   1445e:	78b3      	ldrb	r3, [r6, #2]
   14460:	2000      	movs	r0, #0
   14462:	602b      	str	r3, [r5, #0]
   14464:	e7ed      	b.n	14442 <tls_interface_getopt+0x2e>
   14466:	683b      	ldr	r3, [r7, #0]
   14468:	2b01      	cmp	r3, #1
   1446a:	d130      	bne.n	144ce <tls_interface_getopt+0xba>
   1446c:	4b1d      	ldr	r3, [pc, #116]	; (144e4 <tls_interface_getopt+0xd0>)
   1446e:	eb06 06c6 	add.w	r6, r6, r6, lsl #3
   14472:	eb03 0686 	add.w	r6, r3, r6, lsl #2
   14476:	7873      	ldrb	r3, [r6, #1]
   14478:	2000      	movs	r0, #0
   1447a:	702b      	strb	r3, [r5, #0]
   1447c:	e7e1      	b.n	14442 <tls_interface_getopt+0x2e>
   1447e:	eb06 06c6 	add.w	r6, r6, r6, lsl #3
   14482:	4918      	ldr	r1, [pc, #96]	; (144e4 <tls_interface_getopt+0xd0>)
   14484:	683b      	ldr	r3, [r7, #0]
   14486:	00b6      	lsls	r6, r6, #2
   14488:	198a      	adds	r2, r1, r6
   1448a:	f013 0403 	ands.w	r4, r3, #3
   1448e:	78d0      	ldrb	r0, [r2, #3]
   14490:	d121      	bne.n	144d6 <tls_interface_getopt+0xc2>
   14492:	089b      	lsrs	r3, r3, #2
   14494:	4283      	cmp	r3, r0
   14496:	bf28      	it	cs
   14498:	4603      	movcs	r3, r0
   1449a:	009a      	lsls	r2, r3, #2
   1449c:	b1db      	cbz	r3, 144d6 <tls_interface_getopt+0xc2>
   1449e:	3604      	adds	r6, #4
   144a0:	4431      	add	r1, r6
   144a2:	603a      	str	r2, [r7, #0]
   144a4:	4628      	mov	r0, r5
   144a6:	f00d fa48 	bl	2193a <memcpy>
   144aa:	4620      	mov	r0, r4
   144ac:	e7c9      	b.n	14442 <tls_interface_getopt+0x2e>
   144ae:	683b      	ldr	r3, [r7, #0]
   144b0:	2b04      	cmp	r3, #4
   144b2:	d10c      	bne.n	144ce <tls_interface_getopt+0xba>
   144b4:	4b0b      	ldr	r3, [pc, #44]	; (144e4 <tls_interface_getopt+0xd0>)
   144b6:	eb06 06c6 	add.w	r6, r6, r6, lsl #3
   144ba:	f813 3026 	ldrb.w	r3, [r3, r6, lsl #2]
   144be:	2000      	movs	r0, #0
   144c0:	f1a3 0301 	sub.w	r3, r3, #1
   144c4:	fab3 f383 	clz	r3, r3
   144c8:	095b      	lsrs	r3, r3, #5
   144ca:	602b      	str	r3, [r5, #0]
   144cc:	e7b9      	b.n	14442 <tls_interface_getopt+0x2e>
   144ce:	2016      	movs	r0, #22
   144d0:	e7b7      	b.n	14442 <tls_interface_getopt+0x2e>
   144d2:	2009      	movs	r0, #9
   144d4:	e7b5      	b.n	14442 <tls_interface_getopt+0x2e>
   144d6:	2800      	cmp	r0, #0
   144d8:	d1f9      	bne.n	144ce <tls_interface_getopt+0xba>
   144da:	6038      	str	r0, [r7, #0]
   144dc:	e7b1      	b.n	14442 <tls_interface_getopt+0x2e>
   144de:	202a      	movs	r0, #42	; 0x2a
   144e0:	e7af      	b.n	14442 <tls_interface_getopt+0x2e>
   144e2:	bf00      	nop
   144e4:	200204c0 	.word	0x200204c0

000144e8 <tls_rpc_ip_event_handler>:
   144e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   144ea:	f248 0581 	movw	r5, #32897	; 0x8081
   144ee:	42ab      	cmp	r3, r5
   144f0:	460c      	mov	r4, r1
   144f2:	d062      	beq.n	145ba <tls_rpc_ip_event_handler+0xd2>
   144f4:	f249 0182 	movw	r1, #36994	; 0x9082
   144f8:	428b      	cmp	r3, r1
   144fa:	4606      	mov	r6, r0
   144fc:	d02e      	beq.n	1455c <tls_rpc_ip_event_handler+0x74>
   144fe:	f248 0102 	movw	r1, #32770	; 0x8002
   14502:	428b      	cmp	r3, r1
   14504:	d001      	beq.n	1450a <tls_rpc_ip_event_handler+0x22>
   14506:	2001      	movs	r0, #1
   14508:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1450a:	2c00      	cmp	r4, #0
   1450c:	d0fb      	beq.n	14506 <tls_rpc_ip_event_handler+0x1e>
   1450e:	6963      	ldr	r3, [r4, #20]
   14510:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
   14514:	d002      	beq.n	1451c <tls_rpc_ip_event_handler+0x34>
   14516:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
   1451a:	d1f4      	bne.n	14506 <tls_rpc_ip_event_handler+0x1e>
   1451c:	6823      	ldr	r3, [r4, #0]
   1451e:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
   14522:	6023      	str	r3, [r4, #0]
   14524:	6955      	ldr	r5, [r2, #20]
   14526:	2d00      	cmp	r5, #0
   14528:	d156      	bne.n	145d8 <tls_rpc_ip_event_handler+0xf0>
   1452a:	6823      	ldr	r3, [r4, #0]
   1452c:	0c1b      	lsrs	r3, r3, #16
   1452e:	041b      	lsls	r3, r3, #16
   14530:	f043 0305 	orr.w	r3, r3, #5
   14534:	6023      	str	r3, [r4, #0]
   14536:	6823      	ldr	r3, [r4, #0]
   14538:	00da      	lsls	r2, r3, #3
   1453a:	d50d      	bpl.n	14558 <tls_rpc_ip_event_handler+0x70>
   1453c:	4b2b      	ldr	r3, [pc, #172]	; (145ec <tls_rpc_ip_event_handler+0x104>)
   1453e:	eb06 02c6 	add.w	r2, r6, r6, lsl #3
   14542:	f813 3022 	ldrb.w	r3, [r3, r2, lsl #2]
   14546:	2b02      	cmp	r3, #2
   14548:	d106      	bne.n	14558 <tls_rpc_ip_event_handler+0x70>
   1454a:	4630      	mov	r0, r6
   1454c:	4621      	mov	r1, r4
   1454e:	f7ff fb9b 	bl	13c88 <secure_client_socket>
   14552:	b108      	cbz	r0, 14558 <tls_rpc_ip_event_handler+0x70>
   14554:	2873      	cmp	r0, #115	; 0x73
   14556:	d142      	bne.n	145de <tls_rpc_ip_event_handler+0xf6>
   14558:	2000      	movs	r0, #0
   1455a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1455c:	2c00      	cmp	r4, #0
   1455e:	d0fb      	beq.n	14558 <tls_rpc_ip_event_handler+0x70>
   14560:	6823      	ldr	r3, [r4, #0]
   14562:	b29b      	uxth	r3, r3
   14564:	2b0b      	cmp	r3, #11
   14566:	d1f7      	bne.n	14558 <tls_rpc_ip_event_handler+0x70>
   14568:	6915      	ldr	r5, [r2, #16]
   1456a:	2d00      	cmp	r5, #0
   1456c:	d134      	bne.n	145d8 <tls_rpc_ip_event_handler+0xf0>
   1456e:	6823      	ldr	r3, [r4, #0]
   14570:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
   14574:	6023      	str	r3, [r4, #0]
   14576:	6823      	ldr	r3, [r4, #0]
   14578:	00db      	lsls	r3, r3, #3
   1457a:	d5ed      	bpl.n	14558 <tls_rpc_ip_event_handler+0x70>
   1457c:	4f1c      	ldr	r7, [pc, #112]	; (145f0 <tls_rpc_ip_event_handler+0x108>)
   1457e:	f857 0030 	ldr.w	r0, [r7, r0, lsl #3]
   14582:	b130      	cbz	r0, 14592 <tls_rpc_ip_event_handler+0xaa>
   14584:	f7ff fb18 	bl	13bb8 <nrf_free>
   14588:	eb07 03c6 	add.w	r3, r7, r6, lsl #3
   1458c:	f847 5036 	str.w	r5, [r7, r6, lsl #3]
   14590:	605d      	str	r5, [r3, #4]
   14592:	6823      	ldr	r3, [r4, #0]
   14594:	2000      	movs	r0, #0
   14596:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
   1459a:	6023      	str	r3, [r4, #0]
   1459c:	6823      	ldr	r3, [r4, #0]
   1459e:	0c1b      	lsrs	r3, r3, #16
   145a0:	041b      	lsls	r3, r3, #16
   145a2:	f043 030c 	orr.w	r3, r3, #12
   145a6:	6023      	str	r3, [r4, #0]
   145a8:	6823      	ldr	r3, [r4, #0]
   145aa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   145ae:	6023      	str	r3, [r4, #0]
   145b0:	6823      	ldr	r3, [r4, #0]
   145b2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   145b6:	6023      	str	r3, [r4, #0]
   145b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   145ba:	2900      	cmp	r1, #0
   145bc:	d0cc      	beq.n	14558 <tls_rpc_ip_event_handler+0x70>
   145be:	680b      	ldr	r3, [r1, #0]
   145c0:	b29b      	uxth	r3, r3
   145c2:	2b0a      	cmp	r3, #10
   145c4:	d1c8      	bne.n	14558 <tls_rpc_ip_event_handler+0x70>
   145c6:	6950      	ldr	r0, [r2, #20]
   145c8:	b938      	cbnz	r0, 145da <tls_rpc_ip_event_handler+0xf2>
   145ca:	680b      	ldr	r3, [r1, #0]
   145cc:	0c1b      	lsrs	r3, r3, #16
   145ce:	041b      	lsls	r3, r3, #16
   145d0:	f043 030b 	orr.w	r3, r3, #11
   145d4:	600b      	str	r3, [r1, #0]
   145d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   145d8:	4628      	mov	r0, r5
   145da:	f002 ff35 	bl	17448 <rpc_error_to_nrf_bsd_error>
   145de:	6060      	str	r0, [r4, #4]
   145e0:	6823      	ldr	r3, [r4, #0]
   145e2:	2000      	movs	r0, #0
   145e4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
   145e8:	6023      	str	r3, [r4, #0]
   145ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   145ec:	200204c0 	.word	0x200204c0
   145f0:	20020604 	.word	0x20020604

000145f4 <rpc_dfu_event_handler>:
   145f4:	b508      	push	{r3, lr}
   145f6:	4a08      	ldr	r2, [pc, #32]	; (14618 <rpc_dfu_event_handler+0x24>)
   145f8:	68c1      	ldr	r1, [r0, #12]
   145fa:	8812      	ldrh	r2, [r2, #0]
   145fc:	4603      	mov	r3, r0
   145fe:	ebb2 4f11 	cmp.w	r2, r1, lsr #16
   14602:	d005      	beq.n	14610 <rpc_dfu_event_handler+0x1c>
   14604:	6800      	ldr	r0, [r0, #0]
   14606:	b110      	cbz	r0, 1460e <rpc_dfu_event_handler+0x1a>
   14608:	f7fe ff06 	bl	13418 <rpc_dfu_client_data_free>
   1460c:	2000      	movs	r0, #0
   1460e:	bd08      	pop	{r3, pc}
   14610:	4a02      	ldr	r2, [pc, #8]	; (1461c <rpc_dfu_event_handler+0x28>)
   14612:	2001      	movs	r0, #1
   14614:	6013      	str	r3, [r2, #0]
   14616:	bd08      	pop	{r3, pc}
   14618:	200214d4 	.word	0x200214d4
   1461c:	20020650 	.word	0x20020650

00014620 <mfu_interface_init>:
   14620:	2300      	movs	r3, #0
   14622:	b510      	push	{r4, lr}
   14624:	4808      	ldr	r0, [pc, #32]	; (14648 <mfu_interface_init+0x28>)
   14626:	4909      	ldr	r1, [pc, #36]	; (1464c <mfu_interface_init+0x2c>)
   14628:	4a09      	ldr	r2, [pc, #36]	; (14650 <mfu_interface_init+0x30>)
   1462a:	4c0a      	ldr	r4, [pc, #40]	; (14654 <mfu_interface_init+0x34>)
   1462c:	8003      	strh	r3, [r0, #0]
   1462e:	600b      	str	r3, [r1, #0]
   14630:	6013      	str	r3, [r2, #0]
   14632:	6023      	str	r3, [r4, #0]
   14634:	f7fe feba 	bl	133ac <rpc_dfu_client_init>
   14638:	b910      	cbnz	r0, 14640 <mfu_interface_init+0x20>
   1463a:	2301      	movs	r3, #1
   1463c:	6023      	str	r3, [r4, #0]
   1463e:	bd10      	pop	{r4, pc}
   14640:	f04f 30ff 	mov.w	r0, #4294967295
   14644:	bd10      	pop	{r4, pc}
   14646:	bf00      	nop
   14648:	200214d4 	.word	0x200214d4
   1464c:	20020650 	.word	0x20020650
   14650:	2002064c 	.word	0x2002064c
   14654:	20020644 	.word	0x20020644

00014658 <mfu_interface_open>:
   14658:	b508      	push	{r3, lr}
   1465a:	4b07      	ldr	r3, [pc, #28]	; (14678 <mfu_interface_open+0x20>)
   1465c:	681a      	ldr	r2, [r3, #0]
   1465e:	2a01      	cmp	r2, #1
   14660:	d103      	bne.n	1466a <mfu_interface_open+0x12>
   14662:	2202      	movs	r2, #2
   14664:	601a      	str	r2, [r3, #0]
   14666:	4805      	ldr	r0, [pc, #20]	; (1467c <mfu_interface_open+0x24>)
   14668:	bd08      	pop	{r3, pc}
   1466a:	2001      	movs	r0, #1
   1466c:	f7fc fcf6 	bl	1105c <bsd_os_errno_set>
   14670:	f04f 30ff 	mov.w	r0, #4294967295
   14674:	bd08      	pop	{r3, pc}
   14676:	bf00      	nop
   14678:	20020644 	.word	0x20020644
   1467c:	49765432 	.word	0x49765432

00014680 <mfu_interface_close>:
   14680:	b5f0      	push	{r4, r5, r6, r7, lr}
   14682:	4c32      	ldr	r4, [pc, #200]	; (1474c <mfu_interface_close+0xcc>)
   14684:	b083      	sub	sp, #12
   14686:	6823      	ldr	r3, [r4, #0]
   14688:	1e9a      	subs	r2, r3, #2
   1468a:	2a01      	cmp	r2, #1
   1468c:	d857      	bhi.n	1473e <mfu_interface_close+0xbe>
   1468e:	2b03      	cmp	r3, #3
   14690:	d004      	beq.n	1469c <mfu_interface_close+0x1c>
   14692:	2301      	movs	r3, #1
   14694:	2000      	movs	r0, #0
   14696:	6023      	str	r3, [r4, #0]
   14698:	b003      	add	sp, #12
   1469a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1469c:	2100      	movs	r1, #0
   1469e:	4668      	mov	r0, sp
   146a0:	f7fe fe8a 	bl	133b8 <rpc_dfu_client_request_alloc>
   146a4:	4603      	mov	r3, r0
   146a6:	2800      	cmp	r0, #0
   146a8:	d13d      	bne.n	14726 <mfu_interface_close+0xa6>
   146aa:	2104      	movs	r1, #4
   146ac:	4e28      	ldr	r6, [pc, #160]	; (14750 <mfu_interface_close+0xd0>)
   146ae:	9800      	ldr	r0, [sp, #0]
   146b0:	8832      	ldrh	r2, [r6, #0]
   146b2:	7201      	strb	r1, [r0, #8]
   146b4:	3201      	adds	r2, #1
   146b6:	b292      	uxth	r2, r2
   146b8:	0411      	lsls	r1, r2, #16
   146ba:	f041 0106 	orr.w	r1, r1, #6
   146be:	4d25      	ldr	r5, [pc, #148]	; (14754 <mfu_interface_close+0xd4>)
   146c0:	60c1      	str	r1, [r0, #12]
   146c2:	7103      	strb	r3, [r0, #4]
   146c4:	7143      	strb	r3, [r0, #5]
   146c6:	7183      	strb	r3, [r0, #6]
   146c8:	71c3      	strb	r3, [r0, #7]
   146ca:	7243      	strb	r3, [r0, #9]
   146cc:	7283      	strb	r3, [r0, #10]
   146ce:	72c3      	strb	r3, [r0, #11]
   146d0:	2106      	movs	r1, #6
   146d2:	8032      	strh	r2, [r6, #0]
   146d4:	602b      	str	r3, [r5, #0]
   146d6:	f7fe fe83 	bl	133e0 <rpc_dfu_client_request_send>
   146da:	b9d8      	cbnz	r0, 14714 <mfu_interface_close+0x94>
   146dc:	f04f 33ff 	mov.w	r3, #4294967295
   146e0:	ae02      	add	r6, sp, #8
   146e2:	4627      	mov	r7, r4
   146e4:	f846 3d04 	str.w	r3, [r6, #-4]!
   146e8:	e004      	b.n	146f4 <mfu_interface_close+0x74>
   146ea:	4631      	mov	r1, r6
   146ec:	4638      	mov	r0, r7
   146ee:	f7fc fc21 	bl	10f34 <bsd_os_timedwait>
   146f2:	b9f0      	cbnz	r0, 14732 <mfu_interface_close+0xb2>
   146f4:	6828      	ldr	r0, [r5, #0]
   146f6:	2800      	cmp	r0, #0
   146f8:	d0f7      	beq.n	146ea <mfu_interface_close+0x6a>
   146fa:	6905      	ldr	r5, [r0, #16]
   146fc:	f7fe fe84 	bl	13408 <rpc_dfu_client_message_free>
   14700:	2d00      	cmp	r5, #0
   14702:	d0c6      	beq.n	14692 <mfu_interface_close+0x12>
   14704:	4b14      	ldr	r3, [pc, #80]	; (14758 <mfu_interface_close+0xd8>)
   14706:	2008      	movs	r0, #8
   14708:	601d      	str	r5, [r3, #0]
   1470a:	f7fc fca7 	bl	1105c <bsd_os_errno_set>
   1470e:	f04f 30ff 	mov.w	r0, #4294967295
   14712:	e7c1      	b.n	14698 <mfu_interface_close+0x18>
   14714:	9800      	ldr	r0, [sp, #0]
   14716:	6803      	ldr	r3, [r0, #0]
   14718:	b11b      	cbz	r3, 14722 <mfu_interface_close+0xa2>
   1471a:	4618      	mov	r0, r3
   1471c:	f7fe fe7c 	bl	13418 <rpc_dfu_client_data_free>
   14720:	9800      	ldr	r0, [sp, #0]
   14722:	f7fe fe71 	bl	13408 <rpc_dfu_client_message_free>
   14726:	200c      	movs	r0, #12
   14728:	f7fc fc98 	bl	1105c <bsd_os_errno_set>
   1472c:	f04f 30ff 	mov.w	r0, #4294967295
   14730:	e7b2      	b.n	14698 <mfu_interface_close+0x18>
   14732:	203c      	movs	r0, #60	; 0x3c
   14734:	f7fc fc92 	bl	1105c <bsd_os_errno_set>
   14738:	f04f 30ff 	mov.w	r0, #4294967295
   1473c:	e7ac      	b.n	14698 <mfu_interface_close+0x18>
   1473e:	2001      	movs	r0, #1
   14740:	f7fc fc8c 	bl	1105c <bsd_os_errno_set>
   14744:	f04f 30ff 	mov.w	r0, #4294967295
   14748:	e7a6      	b.n	14698 <mfu_interface_close+0x18>
   1474a:	bf00      	nop
   1474c:	20020644 	.word	0x20020644
   14750:	200214d4 	.word	0x200214d4
   14754:	20020650 	.word	0x20020650
   14758:	20020648 	.word	0x20020648

0001475c <mfu_interface_sendto>:
   1475c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   14760:	4e64      	ldr	r6, [pc, #400]	; (148f4 <mfu_interface_sendto+0x198>)
   14762:	460f      	mov	r7, r1
   14764:	6831      	ldr	r1, [r6, #0]
   14766:	4615      	mov	r5, r2
   14768:	1e8a      	subs	r2, r1, #2
   1476a:	2a01      	cmp	r2, #1
   1476c:	b082      	sub	sp, #8
   1476e:	f200 80b4 	bhi.w	148da <mfu_interface_sendto+0x17e>
   14772:	2f00      	cmp	r7, #0
   14774:	f000 80a5 	beq.w	148c2 <mfu_interface_sendto+0x166>
   14778:	2d00      	cmp	r5, #0
   1477a:	f000 80a2 	beq.w	148c2 <mfu_interface_sendto+0x166>
   1477e:	2b00      	cmp	r3, #0
   14780:	f040 80b1 	bne.w	148e6 <mfu_interface_sendto+0x18a>
   14784:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   14786:	2b00      	cmp	r3, #0
   14788:	f040 80a1 	bne.w	148ce <mfu_interface_sendto+0x172>
   1478c:	2902      	cmp	r1, #2
   1478e:	d04f      	beq.n	14830 <mfu_interface_sendto+0xd4>
   14790:	46e8      	mov	r8, sp
   14792:	4640      	mov	r0, r8
   14794:	4629      	mov	r1, r5
   14796:	f7fe fe0f 	bl	133b8 <rpc_dfu_client_request_alloc>
   1479a:	4606      	mov	r6, r0
   1479c:	b140      	cbz	r0, 147b0 <mfu_interface_sendto+0x54>
   1479e:	200c      	movs	r0, #12
   147a0:	f7fc fc5c 	bl	1105c <bsd_os_errno_set>
   147a4:	f04f 35ff 	mov.w	r5, #4294967295
   147a8:	4628      	mov	r0, r5
   147aa:	b002      	add	sp, #8
   147ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   147b0:	9b00      	ldr	r3, [sp, #0]
   147b2:	4639      	mov	r1, r7
   147b4:	6818      	ldr	r0, [r3, #0]
   147b6:	462a      	mov	r2, r5
   147b8:	f00d f8bf 	bl	2193a <memcpy>
   147bc:	2104      	movs	r1, #4
   147be:	4c4e      	ldr	r4, [pc, #312]	; (148f8 <mfu_interface_sendto+0x19c>)
   147c0:	9800      	ldr	r0, [sp, #0]
   147c2:	8823      	ldrh	r3, [r4, #0]
   147c4:	6045      	str	r5, [r0, #4]
   147c6:	3301      	adds	r3, #1
   147c8:	b29b      	uxth	r3, r3
   147ca:	041a      	lsls	r2, r3, #16
   147cc:	8023      	strh	r3, [r4, #0]
   147ce:	430a      	orrs	r2, r1
   147d0:	4c4a      	ldr	r4, [pc, #296]	; (148fc <mfu_interface_sendto+0x1a0>)
   147d2:	60c2      	str	r2, [r0, #12]
   147d4:	7246      	strb	r6, [r0, #9]
   147d6:	7286      	strb	r6, [r0, #10]
   147d8:	72c6      	strb	r6, [r0, #11]
   147da:	7201      	strb	r1, [r0, #8]
   147dc:	6026      	str	r6, [r4, #0]
   147de:	f7fe fdff 	bl	133e0 <rpc_dfu_client_request_send>
   147e2:	2800      	cmp	r0, #0
   147e4:	d163      	bne.n	148ae <mfu_interface_sendto+0x152>
   147e6:	f04f 33ff 	mov.w	r3, #4294967295
   147ea:	ae02      	add	r6, sp, #8
   147ec:	4f41      	ldr	r7, [pc, #260]	; (148f4 <mfu_interface_sendto+0x198>)
   147ee:	f846 3d04 	str.w	r3, [r6, #-4]!
   147f2:	e004      	b.n	147fe <mfu_interface_sendto+0xa2>
   147f4:	4631      	mov	r1, r6
   147f6:	4638      	mov	r0, r7
   147f8:	f7fc fb9c 	bl	10f34 <bsd_os_timedwait>
   147fc:	b978      	cbnz	r0, 1481e <mfu_interface_sendto+0xc2>
   147fe:	6820      	ldr	r0, [r4, #0]
   14800:	2800      	cmp	r0, #0
   14802:	d0f7      	beq.n	147f4 <mfu_interface_sendto+0x98>
   14804:	6904      	ldr	r4, [r0, #16]
   14806:	f7fe fdff 	bl	13408 <rpc_dfu_client_message_free>
   1480a:	2c00      	cmp	r4, #0
   1480c:	d0cc      	beq.n	147a8 <mfu_interface_sendto+0x4c>
   1480e:	4b3c      	ldr	r3, [pc, #240]	; (14900 <mfu_interface_sendto+0x1a4>)
   14810:	2008      	movs	r0, #8
   14812:	601c      	str	r4, [r3, #0]
   14814:	f04f 35ff 	mov.w	r5, #4294967295
   14818:	f7fc fc20 	bl	1105c <bsd_os_errno_set>
   1481c:	e7c4      	b.n	147a8 <mfu_interface_sendto+0x4c>
   1481e:	f04f 35ff 	mov.w	r5, #4294967295
   14822:	203c      	movs	r0, #60	; 0x3c
   14824:	f7fc fc1a 	bl	1105c <bsd_os_errno_set>
   14828:	4628      	mov	r0, r5
   1482a:	b002      	add	sp, #8
   1482c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   14830:	46e8      	mov	r8, sp
   14832:	4619      	mov	r1, r3
   14834:	4640      	mov	r0, r8
   14836:	f7fe fdbf 	bl	133b8 <rpc_dfu_client_request_alloc>
   1483a:	4602      	mov	r2, r0
   1483c:	2800      	cmp	r0, #0
   1483e:	d1ae      	bne.n	1479e <mfu_interface_sendto+0x42>
   14840:	f04f 0c08 	mov.w	ip, #8
   14844:	492c      	ldr	r1, [pc, #176]	; (148f8 <mfu_interface_sendto+0x19c>)
   14846:	482f      	ldr	r0, [pc, #188]	; (14904 <mfu_interface_sendto+0x1a8>)
   14848:	880b      	ldrh	r3, [r1, #0]
   1484a:	6804      	ldr	r4, [r0, #0]
   1484c:	3301      	adds	r3, #1
   1484e:	9800      	ldr	r0, [sp, #0]
   14850:	b29b      	uxth	r3, r3
   14852:	800b      	strh	r3, [r1, #0]
   14854:	041b      	lsls	r3, r3, #16
   14856:	f043 0303 	orr.w	r3, r3, #3
   1485a:	6104      	str	r4, [r0, #16]
   1485c:	4c27      	ldr	r4, [pc, #156]	; (148fc <mfu_interface_sendto+0x1a0>)
   1485e:	60c3      	str	r3, [r0, #12]
   14860:	7102      	strb	r2, [r0, #4]
   14862:	7142      	strb	r2, [r0, #5]
   14864:	7182      	strb	r2, [r0, #6]
   14866:	71c2      	strb	r2, [r0, #7]
   14868:	7242      	strb	r2, [r0, #9]
   1486a:	7282      	strb	r2, [r0, #10]
   1486c:	72c2      	strb	r2, [r0, #11]
   1486e:	f880 c008 	strb.w	ip, [r0, #8]
   14872:	2103      	movs	r1, #3
   14874:	6022      	str	r2, [r4, #0]
   14876:	f7fe fdb3 	bl	133e0 <rpc_dfu_client_request_send>
   1487a:	b9c0      	cbnz	r0, 148ae <mfu_interface_sendto+0x152>
   1487c:	f04f 33ff 	mov.w	r3, #4294967295
   14880:	f10d 0908 	add.w	r9, sp, #8
   14884:	f849 3d04 	str.w	r3, [r9, #-4]!
   14888:	46b2      	mov	sl, r6
   1488a:	e005      	b.n	14898 <mfu_interface_sendto+0x13c>
   1488c:	4649      	mov	r1, r9
   1488e:	4650      	mov	r0, sl
   14890:	f7fc fb50 	bl	10f34 <bsd_os_timedwait>
   14894:	2800      	cmp	r0, #0
   14896:	d1c2      	bne.n	1481e <mfu_interface_sendto+0xc2>
   14898:	6820      	ldr	r0, [r4, #0]
   1489a:	2800      	cmp	r0, #0
   1489c:	d0f6      	beq.n	1488c <mfu_interface_sendto+0x130>
   1489e:	6904      	ldr	r4, [r0, #16]
   148a0:	f7fe fdb2 	bl	13408 <rpc_dfu_client_message_free>
   148a4:	2c00      	cmp	r4, #0
   148a6:	d1b2      	bne.n	1480e <mfu_interface_sendto+0xb2>
   148a8:	2303      	movs	r3, #3
   148aa:	6033      	str	r3, [r6, #0]
   148ac:	e771      	b.n	14792 <mfu_interface_sendto+0x36>
   148ae:	9800      	ldr	r0, [sp, #0]
   148b0:	6803      	ldr	r3, [r0, #0]
   148b2:	b11b      	cbz	r3, 148bc <mfu_interface_sendto+0x160>
   148b4:	4618      	mov	r0, r3
   148b6:	f7fe fdaf 	bl	13418 <rpc_dfu_client_data_free>
   148ba:	9800      	ldr	r0, [sp, #0]
   148bc:	f7fe fda4 	bl	13408 <rpc_dfu_client_message_free>
   148c0:	e76d      	b.n	1479e <mfu_interface_sendto+0x42>
   148c2:	2016      	movs	r0, #22
   148c4:	f7fc fbca 	bl	1105c <bsd_os_errno_set>
   148c8:	f04f 35ff 	mov.w	r5, #4294967295
   148cc:	e76c      	b.n	147a8 <mfu_interface_sendto+0x4c>
   148ce:	2038      	movs	r0, #56	; 0x38
   148d0:	f7fc fbc4 	bl	1105c <bsd_os_errno_set>
   148d4:	f04f 35ff 	mov.w	r5, #4294967295
   148d8:	e766      	b.n	147a8 <mfu_interface_sendto+0x4c>
   148da:	2001      	movs	r0, #1
   148dc:	f7fc fbbe 	bl	1105c <bsd_os_errno_set>
   148e0:	f04f 35ff 	mov.w	r5, #4294967295
   148e4:	e760      	b.n	147a8 <mfu_interface_sendto+0x4c>
   148e6:	202d      	movs	r0, #45	; 0x2d
   148e8:	f7fc fbb8 	bl	1105c <bsd_os_errno_set>
   148ec:	f04f 35ff 	mov.w	r5, #4294967295
   148f0:	e75a      	b.n	147a8 <mfu_interface_sendto+0x4c>
   148f2:	bf00      	nop
   148f4:	20020644 	.word	0x20020644
   148f8:	200214d4 	.word	0x200214d4
   148fc:	20020650 	.word	0x20020650
   14900:	20020648 	.word	0x20020648
   14904:	2002064c 	.word	0x2002064c

00014908 <mfu_interface_setopt>:
   14908:	b5f0      	push	{r4, r5, r6, r7, lr}
   1490a:	4846      	ldr	r0, [pc, #280]	; (14a24 <mfu_interface_setopt+0x11c>)
   1490c:	b083      	sub	sp, #12
   1490e:	6800      	ldr	r0, [r0, #0]
   14910:	3802      	subs	r0, #2
   14912:	2801      	cmp	r0, #1
   14914:	d877      	bhi.n	14a06 <mfu_interface_setopt+0xfe>
   14916:	f240 2003 	movw	r0, #515	; 0x203
   1491a:	4281      	cmp	r1, r0
   1491c:	d16d      	bne.n	149fa <mfu_interface_setopt+0xf2>
   1491e:	3a04      	subs	r2, #4
   14920:	2a03      	cmp	r2, #3
   14922:	d85c      	bhi.n	149de <mfu_interface_setopt+0xd6>
   14924:	e8df f002 	tbb	[pc, r2]
   14928:	514e024b 	.word	0x514e024b
   1492c:	2407      	movs	r4, #7
   1492e:	4625      	mov	r5, r4
   14930:	2100      	movs	r1, #0
   14932:	4668      	mov	r0, sp
   14934:	f7fe fd40 	bl	133b8 <rpc_dfu_client_request_alloc>
   14938:	4603      	mov	r3, r0
   1493a:	2800      	cmp	r0, #0
   1493c:	d138      	bne.n	149b0 <mfu_interface_setopt+0xa8>
   1493e:	2704      	movs	r7, #4
   14940:	4e39      	ldr	r6, [pc, #228]	; (14a28 <mfu_interface_setopt+0x120>)
   14942:	9800      	ldr	r0, [sp, #0]
   14944:	8832      	ldrh	r2, [r6, #0]
   14946:	4629      	mov	r1, r5
   14948:	3201      	adds	r2, #1
   1494a:	b292      	uxth	r2, r2
   1494c:	ea44 4502 	orr.w	r5, r4, r2, lsl #16
   14950:	4c36      	ldr	r4, [pc, #216]	; (14a2c <mfu_interface_setopt+0x124>)
   14952:	60c5      	str	r5, [r0, #12]
   14954:	7103      	strb	r3, [r0, #4]
   14956:	7143      	strb	r3, [r0, #5]
   14958:	7183      	strb	r3, [r0, #6]
   1495a:	71c3      	strb	r3, [r0, #7]
   1495c:	7243      	strb	r3, [r0, #9]
   1495e:	7283      	strb	r3, [r0, #10]
   14960:	72c3      	strb	r3, [r0, #11]
   14962:	7207      	strb	r7, [r0, #8]
   14964:	8032      	strh	r2, [r6, #0]
   14966:	6023      	str	r3, [r4, #0]
   14968:	f7fe fd3a 	bl	133e0 <rpc_dfu_client_request_send>
   1496c:	b9b8      	cbnz	r0, 1499e <mfu_interface_setopt+0x96>
   1496e:	f04f 33ff 	mov.w	r3, #4294967295
   14972:	ad02      	add	r5, sp, #8
   14974:	4e2b      	ldr	r6, [pc, #172]	; (14a24 <mfu_interface_setopt+0x11c>)
   14976:	f845 3d04 	str.w	r3, [r5, #-4]!
   1497a:	e005      	b.n	14988 <mfu_interface_setopt+0x80>
   1497c:	4629      	mov	r1, r5
   1497e:	4630      	mov	r0, r6
   14980:	f7fc fad8 	bl	10f34 <bsd_os_timedwait>
   14984:	2800      	cmp	r0, #0
   14986:	d131      	bne.n	149ec <mfu_interface_setopt+0xe4>
   14988:	6820      	ldr	r0, [r4, #0]
   1498a:	2800      	cmp	r0, #0
   1498c:	d0f6      	beq.n	1497c <mfu_interface_setopt+0x74>
   1498e:	6904      	ldr	r4, [r0, #16]
   14990:	f7fe fd3a 	bl	13408 <rpc_dfu_client_message_free>
   14994:	2c00      	cmp	r4, #0
   14996:	d13c      	bne.n	14a12 <mfu_interface_setopt+0x10a>
   14998:	4620      	mov	r0, r4
   1499a:	b003      	add	sp, #12
   1499c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1499e:	9800      	ldr	r0, [sp, #0]
   149a0:	6803      	ldr	r3, [r0, #0]
   149a2:	b11b      	cbz	r3, 149ac <mfu_interface_setopt+0xa4>
   149a4:	4618      	mov	r0, r3
   149a6:	f7fe fd37 	bl	13418 <rpc_dfu_client_data_free>
   149aa:	9800      	ldr	r0, [sp, #0]
   149ac:	f7fe fd2c 	bl	13408 <rpc_dfu_client_message_free>
   149b0:	200c      	movs	r0, #12
   149b2:	f7fc fb53 	bl	1105c <bsd_os_errno_set>
   149b6:	f04f 30ff 	mov.w	r0, #4294967295
   149ba:	b003      	add	sp, #12
   149bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
   149be:	2405      	movs	r4, #5
   149c0:	4625      	mov	r5, r4
   149c2:	e7b5      	b.n	14930 <mfu_interface_setopt+0x28>
   149c4:	2408      	movs	r4, #8
   149c6:	4625      	mov	r5, r4
   149c8:	e7b2      	b.n	14930 <mfu_interface_setopt+0x28>
   149ca:	b1b3      	cbz	r3, 149fa <mfu_interface_setopt+0xf2>
   149cc:	9a08      	ldr	r2, [sp, #32]
   149ce:	2a04      	cmp	r2, #4
   149d0:	d113      	bne.n	149fa <mfu_interface_setopt+0xf2>
   149d2:	2000      	movs	r0, #0
   149d4:	681a      	ldr	r2, [r3, #0]
   149d6:	4b16      	ldr	r3, [pc, #88]	; (14a30 <mfu_interface_setopt+0x128>)
   149d8:	601a      	str	r2, [r3, #0]
   149da:	b003      	add	sp, #12
   149dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
   149de:	202a      	movs	r0, #42	; 0x2a
   149e0:	f7fc fb3c 	bl	1105c <bsd_os_errno_set>
   149e4:	f04f 30ff 	mov.w	r0, #4294967295
   149e8:	b003      	add	sp, #12
   149ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
   149ec:	203c      	movs	r0, #60	; 0x3c
   149ee:	f7fc fb35 	bl	1105c <bsd_os_errno_set>
   149f2:	f04f 30ff 	mov.w	r0, #4294967295
   149f6:	b003      	add	sp, #12
   149f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
   149fa:	2016      	movs	r0, #22
   149fc:	f7fc fb2e 	bl	1105c <bsd_os_errno_set>
   14a00:	f04f 30ff 	mov.w	r0, #4294967295
   14a04:	e7c9      	b.n	1499a <mfu_interface_setopt+0x92>
   14a06:	2001      	movs	r0, #1
   14a08:	f7fc fb28 	bl	1105c <bsd_os_errno_set>
   14a0c:	f04f 30ff 	mov.w	r0, #4294967295
   14a10:	e7c3      	b.n	1499a <mfu_interface_setopt+0x92>
   14a12:	4b08      	ldr	r3, [pc, #32]	; (14a34 <mfu_interface_setopt+0x12c>)
   14a14:	2008      	movs	r0, #8
   14a16:	601c      	str	r4, [r3, #0]
   14a18:	f7fc fb20 	bl	1105c <bsd_os_errno_set>
   14a1c:	f04f 30ff 	mov.w	r0, #4294967295
   14a20:	e7bb      	b.n	1499a <mfu_interface_setopt+0x92>
   14a22:	bf00      	nop
   14a24:	20020644 	.word	0x20020644
   14a28:	200214d4 	.word	0x200214d4
   14a2c:	20020650 	.word	0x20020650
   14a30:	2002064c 	.word	0x2002064c
   14a34:	20020648 	.word	0x20020648

00014a38 <mfu_interface_getopt>:
   14a38:	f240 2003 	movw	r0, #515	; 0x203
   14a3c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   14a40:	4281      	cmp	r1, r0
   14a42:	b082      	sub	sp, #8
   14a44:	9e08      	ldr	r6, [sp, #32]
   14a46:	f040 80ae 	bne.w	14ba6 <mfu_interface_getopt+0x16e>
   14a4a:	461d      	mov	r5, r3
   14a4c:	2b00      	cmp	r3, #0
   14a4e:	f000 80aa 	beq.w	14ba6 <mfu_interface_getopt+0x16e>
   14a52:	2e00      	cmp	r6, #0
   14a54:	f000 80a7 	beq.w	14ba6 <mfu_interface_getopt+0x16e>
   14a58:	4b5e      	ldr	r3, [pc, #376]	; (14bd4 <mfu_interface_getopt+0x19c>)
   14a5a:	681b      	ldr	r3, [r3, #0]
   14a5c:	3b02      	subs	r3, #2
   14a5e:	2b01      	cmp	r3, #1
   14a60:	f200 80a7 	bhi.w	14bb2 <mfu_interface_getopt+0x17a>
   14a64:	3a01      	subs	r2, #1
   14a66:	2a13      	cmp	r2, #19
   14a68:	d879      	bhi.n	14b5e <mfu_interface_getopt+0x126>
   14a6a:	e8df f002 	tbb	[pc, r2]
   14a6e:	5f17      	.short	0x5f17
   14a70:	78787878 	.word	0x78787878
   14a74:	78787872 	.word	0x78787872
   14a78:	78787878 	.word	0x78787878
   14a7c:	78787878 	.word	0x78787878
   14a80:	0a78      	.short	0x0a78
   14a82:	6833      	ldr	r3, [r6, #0]
   14a84:	2b04      	cmp	r3, #4
   14a86:	f040 808e 	bne.w	14ba6 <mfu_interface_getopt+0x16e>
   14a8a:	2200      	movs	r2, #0
   14a8c:	4610      	mov	r0, r2
   14a8e:	4b52      	ldr	r3, [pc, #328]	; (14bd8 <mfu_interface_getopt+0x1a0>)
   14a90:	6819      	ldr	r1, [r3, #0]
   14a92:	601a      	str	r2, [r3, #0]
   14a94:	6029      	str	r1, [r5, #0]
   14a96:	b002      	add	sp, #8
   14a98:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   14a9c:	6833      	ldr	r3, [r6, #0]
   14a9e:	2b24      	cmp	r3, #36	; 0x24
   14aa0:	f040 8081 	bne.w	14ba6 <mfu_interface_getopt+0x16e>
   14aa4:	2401      	movs	r4, #1
   14aa6:	46a0      	mov	r8, r4
   14aa8:	2100      	movs	r1, #0
   14aaa:	4668      	mov	r0, sp
   14aac:	f7fe fc84 	bl	133b8 <rpc_dfu_client_request_alloc>
   14ab0:	2800      	cmp	r0, #0
   14ab2:	d146      	bne.n	14b42 <mfu_interface_getopt+0x10a>
   14ab4:	4949      	ldr	r1, [pc, #292]	; (14bdc <mfu_interface_getopt+0x1a4>)
   14ab6:	9b00      	ldr	r3, [sp, #0]
   14ab8:	880a      	ldrh	r2, [r1, #0]
   14aba:	f1b8 0f03 	cmp.w	r8, #3
   14abe:	f102 0201 	add.w	r2, r2, #1
   14ac2:	b292      	uxth	r2, r2
   14ac4:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
   14ac8:	7118      	strb	r0, [r3, #4]
   14aca:	800a      	strh	r2, [r1, #0]
   14acc:	60dc      	str	r4, [r3, #12]
   14ace:	7158      	strb	r0, [r3, #5]
   14ad0:	7198      	strb	r0, [r3, #6]
   14ad2:	71d8      	strb	r0, [r3, #7]
   14ad4:	d04b      	beq.n	14b6e <mfu_interface_getopt+0x136>
   14ad6:	2104      	movs	r1, #4
   14ad8:	2200      	movs	r2, #0
   14ada:	4f41      	ldr	r7, [pc, #260]	; (14be0 <mfu_interface_getopt+0x1a8>)
   14adc:	6099      	str	r1, [r3, #8]
   14ade:	4618      	mov	r0, r3
   14ae0:	4641      	mov	r1, r8
   14ae2:	603a      	str	r2, [r7, #0]
   14ae4:	f7fe fc7c 	bl	133e0 <rpc_dfu_client_request_send>
   14ae8:	2800      	cmp	r0, #0
   14aea:	d14d      	bne.n	14b88 <mfu_interface_getopt+0x150>
   14aec:	f04f 33ff 	mov.w	r3, #4294967295
   14af0:	ac02      	add	r4, sp, #8
   14af2:	f844 3d04 	str.w	r3, [r4, #-4]!
   14af6:	f8df 80dc 	ldr.w	r8, [pc, #220]	; 14bd4 <mfu_interface_getopt+0x19c>
   14afa:	e005      	b.n	14b08 <mfu_interface_getopt+0xd0>
   14afc:	4621      	mov	r1, r4
   14afe:	4640      	mov	r0, r8
   14b00:	f7fc fa18 	bl	10f34 <bsd_os_timedwait>
   14b04:	2800      	cmp	r0, #0
   14b06:	d137      	bne.n	14b78 <mfu_interface_getopt+0x140>
   14b08:	6839      	ldr	r1, [r7, #0]
   14b0a:	2900      	cmp	r1, #0
   14b0c:	d0f6      	beq.n	14afc <mfu_interface_getopt+0xc4>
   14b0e:	690c      	ldr	r4, [r1, #16]
   14b10:	2c00      	cmp	r4, #0
   14b12:	d154      	bne.n	14bbe <mfu_interface_getopt+0x186>
   14b14:	6832      	ldr	r2, [r6, #0]
   14b16:	3114      	adds	r1, #20
   14b18:	4628      	mov	r0, r5
   14b1a:	f00c ff0e 	bl	2193a <memcpy>
   14b1e:	6838      	ldr	r0, [r7, #0]
   14b20:	f7fe fc72 	bl	13408 <rpc_dfu_client_message_free>
   14b24:	4620      	mov	r0, r4
   14b26:	b002      	add	sp, #8
   14b28:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   14b2c:	6833      	ldr	r3, [r6, #0]
   14b2e:	2b04      	cmp	r3, #4
   14b30:	d139      	bne.n	14ba6 <mfu_interface_getopt+0x16e>
   14b32:	2402      	movs	r4, #2
   14b34:	2100      	movs	r1, #0
   14b36:	4668      	mov	r0, sp
   14b38:	46a0      	mov	r8, r4
   14b3a:	f7fe fc3d 	bl	133b8 <rpc_dfu_client_request_alloc>
   14b3e:	2800      	cmp	r0, #0
   14b40:	d0b8      	beq.n	14ab4 <mfu_interface_getopt+0x7c>
   14b42:	200c      	movs	r0, #12
   14b44:	f7fc fa8a 	bl	1105c <bsd_os_errno_set>
   14b48:	f04f 30ff 	mov.w	r0, #4294967295
   14b4c:	b002      	add	sp, #8
   14b4e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   14b52:	6833      	ldr	r3, [r6, #0]
   14b54:	2b04      	cmp	r3, #4
   14b56:	d126      	bne.n	14ba6 <mfu_interface_getopt+0x16e>
   14b58:	2409      	movs	r4, #9
   14b5a:	46a0      	mov	r8, r4
   14b5c:	e7a4      	b.n	14aa8 <mfu_interface_getopt+0x70>
   14b5e:	202a      	movs	r0, #42	; 0x2a
   14b60:	f7fc fa7c 	bl	1105c <bsd_os_errno_set>
   14b64:	f04f 30ff 	mov.w	r0, #4294967295
   14b68:	b002      	add	sp, #8
   14b6a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   14b6e:	4a1d      	ldr	r2, [pc, #116]	; (14be4 <mfu_interface_getopt+0x1ac>)
   14b70:	2108      	movs	r1, #8
   14b72:	6812      	ldr	r2, [r2, #0]
   14b74:	611a      	str	r2, [r3, #16]
   14b76:	e7af      	b.n	14ad8 <mfu_interface_getopt+0xa0>
   14b78:	203c      	movs	r0, #60	; 0x3c
   14b7a:	f7fc fa6f 	bl	1105c <bsd_os_errno_set>
   14b7e:	f04f 30ff 	mov.w	r0, #4294967295
   14b82:	b002      	add	sp, #8
   14b84:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   14b88:	9800      	ldr	r0, [sp, #0]
   14b8a:	6803      	ldr	r3, [r0, #0]
   14b8c:	b11b      	cbz	r3, 14b96 <mfu_interface_getopt+0x15e>
   14b8e:	4618      	mov	r0, r3
   14b90:	f7fe fc42 	bl	13418 <rpc_dfu_client_data_free>
   14b94:	9800      	ldr	r0, [sp, #0]
   14b96:	f7fe fc37 	bl	13408 <rpc_dfu_client_message_free>
   14b9a:	200c      	movs	r0, #12
   14b9c:	f7fc fa5e 	bl	1105c <bsd_os_errno_set>
   14ba0:	f04f 30ff 	mov.w	r0, #4294967295
   14ba4:	e7d2      	b.n	14b4c <mfu_interface_getopt+0x114>
   14ba6:	2016      	movs	r0, #22
   14ba8:	f7fc fa58 	bl	1105c <bsd_os_errno_set>
   14bac:	f04f 30ff 	mov.w	r0, #4294967295
   14bb0:	e771      	b.n	14a96 <mfu_interface_getopt+0x5e>
   14bb2:	2001      	movs	r0, #1
   14bb4:	f7fc fa52 	bl	1105c <bsd_os_errno_set>
   14bb8:	f04f 30ff 	mov.w	r0, #4294967295
   14bbc:	e76b      	b.n	14a96 <mfu_interface_getopt+0x5e>
   14bbe:	4b06      	ldr	r3, [pc, #24]	; (14bd8 <mfu_interface_getopt+0x1a0>)
   14bc0:	2008      	movs	r0, #8
   14bc2:	601c      	str	r4, [r3, #0]
   14bc4:	f7fc fa4a 	bl	1105c <bsd_os_errno_set>
   14bc8:	6838      	ldr	r0, [r7, #0]
   14bca:	f7fe fc1d 	bl	13408 <rpc_dfu_client_message_free>
   14bce:	f04f 30ff 	mov.w	r0, #4294967295
   14bd2:	e760      	b.n	14a96 <mfu_interface_getopt+0x5e>
   14bd4:	20020644 	.word	0x20020644
   14bd8:	20020648 	.word	0x20020648
   14bdc:	200214d4 	.word	0x200214d4
   14be0:	20020650 	.word	0x20020650
   14be4:	2002064c 	.word	0x2002064c

00014be8 <bsd_platform_error_handler>:
   14be8:	b508      	push	{r3, lr}
   14bea:	f7f9 f841 	bl	dc70 <bsd_recoverable_error_handler>
   14bee:	bd08      	pop	{r3, pc}

00014bf0 <bsd_init>:
   14bf0:	b510      	push	{r4, lr}
   14bf2:	4c06      	ldr	r4, [pc, #24]	; (14c0c <bsd_init+0x1c>)
   14bf4:	7823      	ldrb	r3, [r4, #0]
   14bf6:	b92b      	cbnz	r3, 14c04 <bsd_init+0x14>
   14bf8:	f000 f818 	bl	14c2c <bsd_platform_init>
   14bfc:	b908      	cbnz	r0, 14c02 <bsd_init+0x12>
   14bfe:	2301      	movs	r3, #1
   14c00:	7023      	strb	r3, [r4, #0]
   14c02:	bd10      	pop	{r4, pc}
   14c04:	f04f 30ff 	mov.w	r0, #4294967295
   14c08:	bd10      	pop	{r4, pc}
   14c0a:	bf00      	nop
   14c0c:	2002268b 	.word	0x2002268b

00014c10 <unimplemented_method>:
   14c10:	b40f      	push	{r0, r1, r2, r3}
   14c12:	b508      	push	{r3, lr}
   14c14:	202d      	movs	r0, #45	; 0x2d
   14c16:	f7fc fa21 	bl	1105c <bsd_os_errno_set>
   14c1a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   14c1e:	f04f 30ff 	mov.w	r0, #4294967295
   14c22:	b004      	add	sp, #16
   14c24:	4770      	bx	lr
   14c26:	bf00      	nop

00014c28 <rpc_transport_ipc_fault_handler>:
   14c28:	f7ff bfde 	b.w	14be8 <bsd_platform_error_handler>

00014c2c <bsd_platform_init>:
   14c2c:	b5f0      	push	{r4, r5, r6, r7, lr}
   14c2e:	b093      	sub	sp, #76	; 0x4c
   14c30:	f7fe fe2a 	bl	13888 <nrf_mem_init>
   14c34:	2800      	cmp	r0, #0
   14c36:	d14c      	bne.n	14cd2 <bsd_platform_init+0xa6>
   14c38:	4928      	ldr	r1, [pc, #160]	; (14cdc <bsd_platform_init+0xb0>)
   14c3a:	a801      	add	r0, sp, #4
   14c3c:	f7fe fe98 	bl	13970 <nrf_mem_register>
   14c40:	2800      	cmp	r0, #0
   14c42:	d146      	bne.n	14cd2 <bsd_platform_init+0xa6>
   14c44:	f7fc fb22 	bl	1128c <bsd_os_init>
   14c48:	f004 f9fa 	bl	19040 <rpc_framework_init>
   14c4c:	2800      	cmp	r0, #0
   14c4e:	d140      	bne.n	14cd2 <bsd_platform_init+0xa6>
   14c50:	2320      	movs	r3, #32
   14c52:	f44f 4180 	mov.w	r1, #16384	; 0x4000
   14c56:	2208      	movs	r2, #8
   14c58:	f44f 5c40 	mov.w	ip, #12288	; 0x3000
   14c5c:	4f20      	ldr	r7, [pc, #128]	; (14ce0 <bsd_platform_init+0xb4>)
   14c5e:	4e21      	ldr	r6, [pc, #132]	; (14ce4 <bsd_platform_init+0xb8>)
   14c60:	9303      	str	r3, [sp, #12]
   14c62:	9305      	str	r3, [sp, #20]
   14c64:	9307      	str	r3, [sp, #28]
   14c66:	4d20      	ldr	r5, [pc, #128]	; (14ce8 <bsd_platform_init+0xbc>)
   14c68:	9109      	str	r1, [sp, #36]	; 0x24
   14c6a:	910d      	str	r1, [sp, #52]	; 0x34
   14c6c:	4c1f      	ldr	r4, [pc, #124]	; (14cec <bsd_platform_init+0xc0>)
   14c6e:	4920      	ldr	r1, [pc, #128]	; (14cf0 <bsd_platform_init+0xc4>)
   14c70:	4b20      	ldr	r3, [pc, #128]	; (14cf4 <bsd_platform_init+0xc8>)
   14c72:	e9cd 0010 	strd	r0, r0, [sp, #64]	; 0x40
   14c76:	eb0d 0002 	add.w	r0, sp, r2
   14c7a:	f8cd c02c 	str.w	ip, [sp, #44]	; 0x2c
   14c7e:	e9cd 220e 	strd	r2, r2, [sp, #56]	; 0x38
   14c82:	9702      	str	r7, [sp, #8]
   14c84:	9604      	str	r6, [sp, #16]
   14c86:	9506      	str	r5, [sp, #24]
   14c88:	9408      	str	r4, [sp, #32]
   14c8a:	910a      	str	r1, [sp, #40]	; 0x28
   14c8c:	930c      	str	r3, [sp, #48]	; 0x30
   14c8e:	f000 fbe9 	bl	15464 <rpc_transport_ipc_init>
   14c92:	b108      	cbz	r0, 14c98 <bsd_platform_init+0x6c>
   14c94:	b013      	add	sp, #76	; 0x4c
   14c96:	bdf0      	pop	{r4, r5, r6, r7, pc}
   14c98:	f003 ff6e 	bl	18b78 <interface_init>
   14c9c:	b9c8      	cbnz	r0, 14cd2 <bsd_platform_init+0xa6>
   14c9e:	f7fe fa3d 	bl	1311c <at_interface_init>
   14ca2:	b9b0      	cbnz	r0, 14cd2 <bsd_platform_init+0xa6>
   14ca4:	f002 fc22 	bl	174ec <ip_interface_init>
   14ca8:	b998      	cbnz	r0, 14cd2 <bsd_platform_init+0xa6>
   14caa:	f7ff f883 	bl	13db4 <tls_interface_init>
   14cae:	b980      	cbnz	r0, 14cd2 <bsd_platform_init+0xa6>
   14cb0:	f7ff fcb6 	bl	14620 <mfu_interface_init>
   14cb4:	b968      	cbnz	r0, 14cd2 <bsd_platform_init+0xa6>
   14cb6:	f001 f9e9 	bl	1608c <pdn_interface_init>
   14cba:	b950      	cbnz	r0, 14cd2 <bsd_platform_init+0xa6>
   14cbc:	f005 fc94 	bl	1a5e8 <gnss_interface_init>
   14cc0:	b938      	cbnz	r0, 14cd2 <bsd_platform_init+0xa6>
   14cc2:	f7fd fec3 	bl	12a4c <logobj_interface_init>
   14cc6:	3000      	adds	r0, #0
   14cc8:	bf18      	it	ne
   14cca:	2001      	movne	r0, #1
   14ccc:	4240      	negs	r0, r0
   14cce:	b013      	add	sp, #76	; 0x4c
   14cd0:	bdf0      	pop	{r4, r5, r6, r7, pc}
   14cd2:	f04f 30ff 	mov.w	r0, #4294967295
   14cd6:	b013      	add	sp, #76	; 0x4c
   14cd8:	bdf0      	pop	{r4, r5, r6, r7, pc}
   14cda:	bf00      	nop
   14cdc:	00022df8 	.word	0x00022df8
   14ce0:	20010000 	.word	0x20010000
   14ce4:	20010040 	.word	0x20010040
   14ce8:	20010020 	.word	0x20010020
   14cec:	20017060 	.word	0x20017060
   14cf0:	20010060 	.word	0x20010060
   14cf4:	20013060 	.word	0x20013060

00014cf8 <bsd_platform_af_method_table_get>:
   14cf8:	2805      	cmp	r0, #5
   14cfa:	d02a      	beq.n	14d52 <bsd_platform_af_method_table_get+0x5a>
   14cfc:	b508      	push	{r3, lr}
   14cfe:	d914      	bls.n	14d2a <bsd_platform_af_method_table_get+0x32>
   14d00:	280a      	cmp	r0, #10
   14d02:	d016      	beq.n	14d32 <bsd_platform_af_method_table_get+0x3a>
   14d04:	2866      	cmp	r0, #102	; 0x66
   14d06:	d11f      	bne.n	14d48 <bsd_platform_af_method_table_get+0x50>
   14d08:	f240 2302 	movw	r3, #514	; 0x202
   14d0c:	429a      	cmp	r2, r3
   14d0e:	d035      	beq.n	14d7c <bsd_platform_af_method_table_get+0x84>
   14d10:	f240 2305 	movw	r3, #517	; 0x205
   14d14:	429a      	cmp	r2, r3
   14d16:	d035      	beq.n	14d84 <bsd_platform_af_method_table_get+0x8c>
   14d18:	f240 2301 	movw	r3, #513	; 0x201
   14d1c:	429a      	cmp	r2, r3
   14d1e:	d02f      	beq.n	14d80 <bsd_platform_af_method_table_get+0x88>
   14d20:	202b      	movs	r0, #43	; 0x2b
   14d22:	f7fc f99b 	bl	1105c <bsd_os_errno_set>
   14d26:	2000      	movs	r0, #0
   14d28:	bd08      	pop	{r3, pc}
   14d2a:	2801      	cmp	r0, #1
   14d2c:	d016      	beq.n	14d5c <bsd_platform_af_method_table_get+0x64>
   14d2e:	2802      	cmp	r0, #2
   14d30:	d10a      	bne.n	14d48 <bsd_platform_af_method_table_get+0x50>
   14d32:	f5b2 7f83 	cmp.w	r2, #262	; 0x106
   14d36:	d21a      	bcs.n	14d6e <bsd_platform_af_method_table_get+0x76>
   14d38:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
   14d3c:	d21a      	bcs.n	14d74 <bsd_platform_af_method_table_get+0x7c>
   14d3e:	3a01      	subs	r2, #1
   14d40:	2a01      	cmp	r2, #1
   14d42:	d8ed      	bhi.n	14d20 <bsd_platform_af_method_table_get+0x28>
   14d44:	4810      	ldr	r0, [pc, #64]	; (14d88 <bsd_platform_af_method_table_get+0x90>)
   14d46:	bd08      	pop	{r3, pc}
   14d48:	2016      	movs	r0, #22
   14d4a:	f7fc f987 	bl	1105c <bsd_os_errno_set>
   14d4e:	2000      	movs	r0, #0
   14d50:	bd08      	pop	{r3, pc}
   14d52:	2903      	cmp	r1, #3
   14d54:	480d      	ldr	r0, [pc, #52]	; (14d8c <bsd_platform_af_method_table_get+0x94>)
   14d56:	bf18      	it	ne
   14d58:	2000      	movne	r0, #0
   14d5a:	4770      	bx	lr
   14d5c:	f240 2303 	movw	r3, #515	; 0x203
   14d60:	429a      	cmp	r2, r3
   14d62:	d009      	beq.n	14d78 <bsd_platform_af_method_table_get+0x80>
   14d64:	f5b2 7f01 	cmp.w	r2, #516	; 0x204
   14d68:	d1da      	bne.n	14d20 <bsd_platform_af_method_table_get+0x28>
   14d6a:	4809      	ldr	r0, [pc, #36]	; (14d90 <bsd_platform_af_method_table_get+0x98>)
   14d6c:	bd08      	pop	{r3, pc}
   14d6e:	f5b2 7f87 	cmp.w	r2, #270	; 0x10e
   14d72:	d1d5      	bne.n	14d20 <bsd_platform_af_method_table_get+0x28>
   14d74:	4807      	ldr	r0, [pc, #28]	; (14d94 <bsd_platform_af_method_table_get+0x9c>)
   14d76:	bd08      	pop	{r3, pc}
   14d78:	4807      	ldr	r0, [pc, #28]	; (14d98 <bsd_platform_af_method_table_get+0xa0>)
   14d7a:	bd08      	pop	{r3, pc}
   14d7c:	4807      	ldr	r0, [pc, #28]	; (14d9c <bsd_platform_af_method_table_get+0xa4>)
   14d7e:	bd08      	pop	{r3, pc}
   14d80:	4807      	ldr	r0, [pc, #28]	; (14da0 <bsd_platform_af_method_table_get+0xa8>)
   14d82:	bd08      	pop	{r3, pc}
   14d84:	4807      	ldr	r0, [pc, #28]	; (14da4 <bsd_platform_af_method_table_get+0xac>)
   14d86:	bd08      	pop	{r3, pc}
   14d88:	00022cc8 	.word	0x00022cc8
   14d8c:	00022db8 	.word	0x00022db8
   14d90:	00022d68 	.word	0x00022d68
   14d94:	00022cf0 	.word	0x00022cf0
   14d98:	00022d18 	.word	0x00022d18
   14d9c:	00022d40 	.word	0x00022d40
   14da0:	00022ca0 	.word	0x00022ca0
   14da4:	00022d90 	.word	0x00022d90

00014da8 <bsd_platform_fd_method_table_get>:
   14da8:	b538      	push	{r3, r4, r5, lr}
   14daa:	4605      	mov	r5, r0
   14dac:	f004 f816 	bl	18ddc <interface_socket_from_handle_get>
   14db0:	4604      	mov	r4, r0
   14db2:	b960      	cbnz	r0, 14dce <bsd_platform_fd_method_table_get+0x26>
   14db4:	4b2c      	ldr	r3, [pc, #176]	; (14e68 <bsd_platform_fd_method_table_get+0xc0>)
   14db6:	429d      	cmp	r5, r3
   14db8:	d02f      	beq.n	14e1a <bsd_platform_fd_method_table_get+0x72>
   14dba:	0c2b      	lsrs	r3, r5, #16
   14dbc:	4a2b      	ldr	r2, [pc, #172]	; (14e6c <bsd_platform_fd_method_table_get+0xc4>)
   14dbe:	041b      	lsls	r3, r3, #16
   14dc0:	4293      	cmp	r3, r2
   14dc2:	d03d      	beq.n	14e40 <bsd_platform_fd_method_table_get+0x98>
   14dc4:	4b2a      	ldr	r3, [pc, #168]	; (14e70 <bsd_platform_fd_method_table_get+0xc8>)
   14dc6:	429d      	cmp	r5, r3
   14dc8:	d149      	bne.n	14e5e <bsd_platform_fd_method_table_get+0xb6>
   14dca:	482a      	ldr	r0, [pc, #168]	; (14e74 <bsd_platform_fd_method_table_get+0xcc>)
   14dcc:	bd38      	pop	{r3, r4, r5, pc}
   14dce:	68c3      	ldr	r3, [r0, #12]
   14dd0:	6942      	ldr	r2, [r0, #20]
   14dd2:	2b05      	cmp	r3, #5
   14dd4:	d036      	beq.n	14e44 <bsd_platform_fd_method_table_get+0x9c>
   14dd6:	d911      	bls.n	14dfc <bsd_platform_fd_method_table_get+0x54>
   14dd8:	2b0a      	cmp	r3, #10
   14dda:	d013      	beq.n	14e04 <bsd_platform_fd_method_table_get+0x5c>
   14ddc:	2b66      	cmp	r3, #102	; 0x66
   14dde:	d11e      	bne.n	14e1e <bsd_platform_fd_method_table_get+0x76>
   14de0:	f240 2302 	movw	r3, #514	; 0x202
   14de4:	429a      	cmp	r2, r3
   14de6:	d02b      	beq.n	14e40 <bsd_platform_fd_method_table_get+0x98>
   14de8:	f240 2305 	movw	r3, #517	; 0x205
   14dec:	429a      	cmp	r2, r3
   14dee:	d02f      	beq.n	14e50 <bsd_platform_fd_method_table_get+0xa8>
   14df0:	f240 2301 	movw	r3, #513	; 0x201
   14df4:	429a      	cmp	r2, r3
   14df6:	d11e      	bne.n	14e36 <bsd_platform_fd_method_table_get+0x8e>
   14df8:	481f      	ldr	r0, [pc, #124]	; (14e78 <bsd_platform_fd_method_table_get+0xd0>)
   14dfa:	bd38      	pop	{r3, r4, r5, pc}
   14dfc:	2b01      	cmp	r3, #1
   14dfe:	d013      	beq.n	14e28 <bsd_platform_fd_method_table_get+0x80>
   14e00:	2b02      	cmp	r3, #2
   14e02:	d10c      	bne.n	14e1e <bsd_platform_fd_method_table_get+0x76>
   14e04:	f5b2 7f83 	cmp.w	r2, #262	; 0x106
   14e08:	d224      	bcs.n	14e54 <bsd_platform_fd_method_table_get+0xac>
   14e0a:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
   14e0e:	d224      	bcs.n	14e5a <bsd_platform_fd_method_table_get+0xb2>
   14e10:	3a01      	subs	r2, #1
   14e12:	2a01      	cmp	r2, #1
   14e14:	d80f      	bhi.n	14e36 <bsd_platform_fd_method_table_get+0x8e>
   14e16:	4819      	ldr	r0, [pc, #100]	; (14e7c <bsd_platform_fd_method_table_get+0xd4>)
   14e18:	bd38      	pop	{r3, r4, r5, pc}
   14e1a:	4819      	ldr	r0, [pc, #100]	; (14e80 <bsd_platform_fd_method_table_get+0xd8>)
   14e1c:	bd38      	pop	{r3, r4, r5, pc}
   14e1e:	2016      	movs	r0, #22
   14e20:	f7fc f91c 	bl	1105c <bsd_os_errno_set>
   14e24:	2000      	movs	r0, #0
   14e26:	bd38      	pop	{r3, r4, r5, pc}
   14e28:	f240 2303 	movw	r3, #515	; 0x203
   14e2c:	429a      	cmp	r2, r3
   14e2e:	d0f4      	beq.n	14e1a <bsd_platform_fd_method_table_get+0x72>
   14e30:	f5b2 7f01 	cmp.w	r2, #516	; 0x204
   14e34:	d0c9      	beq.n	14dca <bsd_platform_fd_method_table_get+0x22>
   14e36:	202b      	movs	r0, #43	; 0x2b
   14e38:	f7fc f910 	bl	1105c <bsd_os_errno_set>
   14e3c:	2000      	movs	r0, #0
   14e3e:	bd38      	pop	{r3, r4, r5, pc}
   14e40:	4810      	ldr	r0, [pc, #64]	; (14e84 <bsd_platform_fd_method_table_get+0xdc>)
   14e42:	bd38      	pop	{r3, r4, r5, pc}
   14e44:	6903      	ldr	r3, [r0, #16]
   14e46:	4810      	ldr	r0, [pc, #64]	; (14e88 <bsd_platform_fd_method_table_get+0xe0>)
   14e48:	2b03      	cmp	r3, #3
   14e4a:	bf18      	it	ne
   14e4c:	2000      	movne	r0, #0
   14e4e:	bd38      	pop	{r3, r4, r5, pc}
   14e50:	480e      	ldr	r0, [pc, #56]	; (14e8c <bsd_platform_fd_method_table_get+0xe4>)
   14e52:	bd38      	pop	{r3, r4, r5, pc}
   14e54:	f5b2 7f87 	cmp.w	r2, #270	; 0x10e
   14e58:	d1ed      	bne.n	14e36 <bsd_platform_fd_method_table_get+0x8e>
   14e5a:	480d      	ldr	r0, [pc, #52]	; (14e90 <bsd_platform_fd_method_table_get+0xe8>)
   14e5c:	bd38      	pop	{r3, r4, r5, pc}
   14e5e:	2009      	movs	r0, #9
   14e60:	f7fc f8fc 	bl	1105c <bsd_os_errno_set>
   14e64:	4620      	mov	r0, r4
   14e66:	bd38      	pop	{r3, r4, r5, pc}
   14e68:	49765432 	.word	0x49765432
   14e6c:	789a0000 	.word	0x789a0000
   14e70:	49765443 	.word	0x49765443
   14e74:	00022d68 	.word	0x00022d68
   14e78:	00022ca0 	.word	0x00022ca0
   14e7c:	00022cc8 	.word	0x00022cc8
   14e80:	00022d18 	.word	0x00022d18
   14e84:	00022d40 	.word	0x00022d40
   14e88:	00022db8 	.word	0x00022db8
   14e8c:	00022d90 	.word	0x00022d90
   14e90:	00022cf0 	.word	0x00022cf0

00014e94 <bsd_platform_getaddrinfo>:
   14e94:	f003 bad6 	b.w	18444 <ip_interface_getaddrinfo>

00014e98 <bsd_platform_freeaddrinfo>:
   14e98:	f003 bbca 	b.w	18630 <ip_interface_freeaddrinfo>

00014e9c <bsd_platform_poll>:
   14e9c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   14ea0:	ea42 72e2 	orr.w	r2, r2, r2, asr #31
   14ea4:	b083      	sub	sp, #12
   14ea6:	9200      	str	r2, [sp, #0]
   14ea8:	2800      	cmp	r0, #0
   14eaa:	d048      	beq.n	14f3e <bsd_platform_poll+0xa2>
   14eac:	1e4b      	subs	r3, r1, #1
   14eae:	2b08      	cmp	r3, #8
   14eb0:	d845      	bhi.n	14f3e <bsd_platform_poll+0xa2>
   14eb2:	4680      	mov	r8, r0
   14eb4:	4605      	mov	r5, r0
   14eb6:	2400      	movs	r4, #0
   14eb8:	eb00 07c1 	add.w	r7, r0, r1, lsl #3
   14ebc:	88ab      	ldrh	r3, [r5, #4]
   14ebe:	6828      	ldr	r0, [r5, #0]
   14ec0:	f003 0303 	and.w	r3, r3, #3
   14ec4:	a901      	add	r1, sp, #4
   14ec6:	f043 061c 	orr.w	r6, r3, #28
   14eca:	f003 ff95 	bl	18df8 <interface_socket_event_get>
   14ece:	9b01      	ldr	r3, [sp, #4]
   14ed0:	3508      	adds	r5, #8
   14ed2:	4033      	ands	r3, r6
   14ed4:	f825 3c02 	strh.w	r3, [r5, #-2]
   14ed8:	b103      	cbz	r3, 14edc <bsd_platform_poll+0x40>
   14eda:	3401      	adds	r4, #1
   14edc:	42af      	cmp	r7, r5
   14ede:	d1ed      	bne.n	14ebc <bsd_platform_poll+0x20>
   14ee0:	bb9c      	cbnz	r4, 14f4a <bsd_platform_poll+0xae>
   14ee2:	4669      	mov	r1, sp
   14ee4:	4640      	mov	r0, r8
   14ee6:	f7fc f825 	bl	10f34 <bsd_os_timedwait>
   14eea:	4607      	mov	r7, r0
   14eec:	b108      	cbz	r0, 14ef2 <bsd_platform_poll+0x56>
   14eee:	283c      	cmp	r0, #60	; 0x3c
   14ef0:	d11d      	bne.n	14f2e <bsd_platform_poll+0x92>
   14ef2:	46c1      	mov	r9, r8
   14ef4:	2600      	movs	r6, #0
   14ef6:	f8b9 3004 	ldrh.w	r3, [r9, #4]
   14efa:	f8d9 0000 	ldr.w	r0, [r9]
   14efe:	f003 0303 	and.w	r3, r3, #3
   14f02:	a901      	add	r1, sp, #4
   14f04:	f043 041c 	orr.w	r4, r3, #28
   14f08:	f003 ff76 	bl	18df8 <interface_socket_event_get>
   14f0c:	9b01      	ldr	r3, [sp, #4]
   14f0e:	f109 0908 	add.w	r9, r9, #8
   14f12:	4023      	ands	r3, r4
   14f14:	f829 3c02 	strh.w	r3, [r9, #-2]
   14f18:	b103      	cbz	r3, 14f1c <bsd_platform_poll+0x80>
   14f1a:	3601      	adds	r6, #1
   14f1c:	454d      	cmp	r5, r9
   14f1e:	d1ea      	bne.n	14ef6 <bsd_platform_poll+0x5a>
   14f20:	b90e      	cbnz	r6, 14f26 <bsd_platform_poll+0x8a>
   14f22:	2f00      	cmp	r7, #0
   14f24:	d0dd      	beq.n	14ee2 <bsd_platform_poll+0x46>
   14f26:	4630      	mov	r0, r6
   14f28:	b003      	add	sp, #12
   14f2a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   14f2e:	2023      	movs	r0, #35	; 0x23
   14f30:	f7fc f894 	bl	1105c <bsd_os_errno_set>
   14f34:	f04f 30ff 	mov.w	r0, #4294967295
   14f38:	b003      	add	sp, #12
   14f3a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   14f3e:	2016      	movs	r0, #22
   14f40:	f7fc f88c 	bl	1105c <bsd_os_errno_set>
   14f44:	f04f 30ff 	mov.w	r0, #4294967295
   14f48:	e7ee      	b.n	14f28 <bsd_platform_poll+0x8c>
   14f4a:	4620      	mov	r0, r4
   14f4c:	e7ec      	b.n	14f28 <bsd_platform_poll+0x8c>
   14f4e:	bf00      	nop

00014f50 <bsd_platform_fcntl>:
   14f50:	b508      	push	{r3, lr}
   14f52:	4b06      	ldr	r3, [pc, #24]	; (14f6c <bsd_platform_fcntl+0x1c>)
   14f54:	4298      	cmp	r0, r3
   14f56:	d003      	beq.n	14f60 <bsd_platform_fcntl+0x10>
   14f58:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   14f5c:	f003 bfd6 	b.w	18f0c <interface_socket_fcntl>
   14f60:	202d      	movs	r0, #45	; 0x2d
   14f62:	f7fc f87b 	bl	1105c <bsd_os_errno_set>
   14f66:	f04f 30ff 	mov.w	r0, #4294967295
   14f6a:	bd08      	pop	{r3, pc}
   14f6c:	49765432 	.word	0x49765432

00014f70 <ipc_trace_init>:
   14f70:	4b01      	ldr	r3, [pc, #4]	; (14f78 <ipc_trace_init+0x8>)
   14f72:	6018      	str	r0, [r3, #0]
   14f74:	4770      	bx	lr
   14f76:	bf00      	nop
   14f78:	20020660 	.word	0x20020660

00014f7c <bsd_os_trace_irq_handler>:
   14f7c:	b5f0      	push	{r4, r5, r6, r7, lr}
   14f7e:	4b6c      	ldr	r3, [pc, #432]	; (15130 <bsd_os_trace_irq_handler+0x1b4>)
   14f80:	b083      	sub	sp, #12
   14f82:	781b      	ldrb	r3, [r3, #0]
   14f84:	2b00      	cmp	r3, #0
   14f86:	f000 80ad 	beq.w	150e4 <bsd_os_trace_irq_handler+0x168>
   14f8a:	4b6a      	ldr	r3, [pc, #424]	; (15134 <bsd_os_trace_irq_handler+0x1b8>)
   14f8c:	681c      	ldr	r4, [r3, #0]
   14f8e:	68a2      	ldr	r2, [r4, #8]
   14f90:	6863      	ldr	r3, [r4, #4]
   14f92:	429a      	cmp	r2, r3
   14f94:	d02d      	beq.n	14ff2 <bsd_os_trace_irq_handler+0x76>
   14f96:	f64b 63ef 	movw	r3, #48879	; 0xbeef
   14f9a:	f8ad 3000 	strh.w	r3, [sp]
   14f9e:	7823      	ldrb	r3, [r4, #0]
   14fa0:	466e      	mov	r6, sp
   14fa2:	f88d 3004 	strb.w	r3, [sp, #4]
   14fa6:	6863      	ldr	r3, [r4, #4]
   14fa8:	2105      	movs	r1, #5
   14faa:	429a      	cmp	r2, r3
   14fac:	bf2a      	itet	cs
   14fae:	6927      	ldrcs	r7, [r4, #16]
   14fb0:	1a9f      	subcc	r7, r3, r2
   14fb2:	1abf      	subcs	r7, r7, r2
   14fb4:	429a      	cmp	r2, r3
   14fb6:	bf94      	ite	ls
   14fb8:	2500      	movls	r5, #0
   14fba:	68e5      	ldrhi	r5, [r4, #12]
   14fbc:	b2bf      	uxth	r7, r7
   14fbe:	bf88      	it	hi
   14fc0:	1b5b      	subhi	r3, r3, r5
   14fc2:	4630      	mov	r0, r6
   14fc4:	bf88      	it	hi
   14fc6:	b29d      	uxthhi	r5, r3
   14fc8:	f8ad 7002 	strh.w	r7, [sp, #2]
   14fcc:	f00b fe66 	bl	20c9c <bsd_os_trace_put>
   14fd0:	f8bd 1002 	ldrh.w	r1, [sp, #2]
   14fd4:	68a0      	ldr	r0, [r4, #8]
   14fd6:	f00b fe61 	bl	20c9c <bsd_os_trace_put>
   14fda:	68a3      	ldr	r3, [r4, #8]
   14fdc:	6922      	ldr	r2, [r4, #16]
   14fde:	441f      	add	r7, r3
   14fe0:	4297      	cmp	r7, r2
   14fe2:	bf08      	it	eq
   14fe4:	68e3      	ldreq	r3, [r4, #12]
   14fe6:	60a7      	str	r7, [r4, #8]
   14fe8:	bf08      	it	eq
   14fea:	60a3      	streq	r3, [r4, #8]
   14fec:	2d00      	cmp	r5, #0
   14fee:	f040 808d 	bne.w	1510c <bsd_os_trace_irq_handler+0x190>
   14ff2:	4b51      	ldr	r3, [pc, #324]	; (15138 <bsd_os_trace_irq_handler+0x1bc>)
   14ff4:	681c      	ldr	r4, [r3, #0]
   14ff6:	68a2      	ldr	r2, [r4, #8]
   14ff8:	6863      	ldr	r3, [r4, #4]
   14ffa:	429a      	cmp	r2, r3
   14ffc:	d02c      	beq.n	15058 <bsd_os_trace_irq_handler+0xdc>
   14ffe:	f64b 63ef 	movw	r3, #48879	; 0xbeef
   15002:	f8ad 3000 	strh.w	r3, [sp]
   15006:	7823      	ldrb	r3, [r4, #0]
   15008:	466e      	mov	r6, sp
   1500a:	f88d 3004 	strb.w	r3, [sp, #4]
   1500e:	6863      	ldr	r3, [r4, #4]
   15010:	2105      	movs	r1, #5
   15012:	429a      	cmp	r2, r3
   15014:	bf2a      	itet	cs
   15016:	6927      	ldrcs	r7, [r4, #16]
   15018:	1a9f      	subcc	r7, r3, r2
   1501a:	1abf      	subcs	r7, r7, r2
   1501c:	429a      	cmp	r2, r3
   1501e:	bf94      	ite	ls
   15020:	2500      	movls	r5, #0
   15022:	68e5      	ldrhi	r5, [r4, #12]
   15024:	b2bf      	uxth	r7, r7
   15026:	bf88      	it	hi
   15028:	1b5b      	subhi	r3, r3, r5
   1502a:	4630      	mov	r0, r6
   1502c:	bf88      	it	hi
   1502e:	b29d      	uxthhi	r5, r3
   15030:	f8ad 7002 	strh.w	r7, [sp, #2]
   15034:	f00b fe32 	bl	20c9c <bsd_os_trace_put>
   15038:	f8bd 1002 	ldrh.w	r1, [sp, #2]
   1503c:	68a0      	ldr	r0, [r4, #8]
   1503e:	f00b fe2d 	bl	20c9c <bsd_os_trace_put>
   15042:	68a3      	ldr	r3, [r4, #8]
   15044:	6922      	ldr	r2, [r4, #16]
   15046:	441f      	add	r7, r3
   15048:	4297      	cmp	r7, r2
   1504a:	bf08      	it	eq
   1504c:	68e3      	ldreq	r3, [r4, #12]
   1504e:	60a7      	str	r7, [r4, #8]
   15050:	bf08      	it	eq
   15052:	60a3      	streq	r3, [r4, #8]
   15054:	2d00      	cmp	r5, #0
   15056:	d148      	bne.n	150ea <bsd_os_trace_irq_handler+0x16e>
   15058:	4b38      	ldr	r3, [pc, #224]	; (1513c <bsd_os_trace_irq_handler+0x1c0>)
   1505a:	681c      	ldr	r4, [r3, #0]
   1505c:	68a2      	ldr	r2, [r4, #8]
   1505e:	6863      	ldr	r3, [r4, #4]
   15060:	429a      	cmp	r2, r3
   15062:	d02b      	beq.n	150bc <bsd_os_trace_irq_handler+0x140>
   15064:	f64b 63ef 	movw	r3, #48879	; 0xbeef
   15068:	f8ad 3000 	strh.w	r3, [sp]
   1506c:	7823      	ldrb	r3, [r4, #0]
   1506e:	466e      	mov	r6, sp
   15070:	f88d 3004 	strb.w	r3, [sp, #4]
   15074:	6863      	ldr	r3, [r4, #4]
   15076:	2105      	movs	r1, #5
   15078:	429a      	cmp	r2, r3
   1507a:	bf2a      	itet	cs
   1507c:	6927      	ldrcs	r7, [r4, #16]
   1507e:	1a9f      	subcc	r7, r3, r2
   15080:	1abf      	subcs	r7, r7, r2
   15082:	429a      	cmp	r2, r3
   15084:	bf94      	ite	ls
   15086:	2500      	movls	r5, #0
   15088:	68e5      	ldrhi	r5, [r4, #12]
   1508a:	b2bf      	uxth	r7, r7
   1508c:	bf88      	it	hi
   1508e:	1b5b      	subhi	r3, r3, r5
   15090:	4630      	mov	r0, r6
   15092:	bf88      	it	hi
   15094:	b29d      	uxthhi	r5, r3
   15096:	f8ad 7002 	strh.w	r7, [sp, #2]
   1509a:	f00b fdff 	bl	20c9c <bsd_os_trace_put>
   1509e:	f8bd 1002 	ldrh.w	r1, [sp, #2]
   150a2:	68a0      	ldr	r0, [r4, #8]
   150a4:	f00b fdfa 	bl	20c9c <bsd_os_trace_put>
   150a8:	68a3      	ldr	r3, [r4, #8]
   150aa:	6922      	ldr	r2, [r4, #16]
   150ac:	441f      	add	r7, r3
   150ae:	4297      	cmp	r7, r2
   150b0:	bf08      	it	eq
   150b2:	68e3      	ldreq	r3, [r4, #12]
   150b4:	60a7      	str	r7, [r4, #8]
   150b6:	bf08      	it	eq
   150b8:	60a3      	streq	r3, [r4, #8]
   150ba:	b90d      	cbnz	r5, 150c0 <bsd_os_trace_irq_handler+0x144>
   150bc:	b003      	add	sp, #12
   150be:	bdf0      	pop	{r4, r5, r6, r7, pc}
   150c0:	4630      	mov	r0, r6
   150c2:	2105      	movs	r1, #5
   150c4:	f8ad 5002 	strh.w	r5, [sp, #2]
   150c8:	f00b fde8 	bl	20c9c <bsd_os_trace_put>
   150cc:	f8bd 1002 	ldrh.w	r1, [sp, #2]
   150d0:	68e0      	ldr	r0, [r4, #12]
   150d2:	f00b fde3 	bl	20c9c <bsd_os_trace_put>
   150d6:	f8bd 2002 	ldrh.w	r2, [sp, #2]
   150da:	68e3      	ldr	r3, [r4, #12]
   150dc:	4413      	add	r3, r2
   150de:	60a3      	str	r3, [r4, #8]
   150e0:	b003      	add	sp, #12
   150e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
   150e4:	f7fc f8ca 	bl	1127c <bsd_os_trace_irq_clear>
   150e8:	e74f      	b.n	14f8a <bsd_os_trace_irq_handler+0xe>
   150ea:	2105      	movs	r1, #5
   150ec:	4630      	mov	r0, r6
   150ee:	f8ad 5002 	strh.w	r5, [sp, #2]
   150f2:	f00b fdd3 	bl	20c9c <bsd_os_trace_put>
   150f6:	f8bd 1002 	ldrh.w	r1, [sp, #2]
   150fa:	68e0      	ldr	r0, [r4, #12]
   150fc:	f00b fdce 	bl	20c9c <bsd_os_trace_put>
   15100:	f8bd 2002 	ldrh.w	r2, [sp, #2]
   15104:	68e3      	ldr	r3, [r4, #12]
   15106:	4413      	add	r3, r2
   15108:	60a3      	str	r3, [r4, #8]
   1510a:	e7a5      	b.n	15058 <bsd_os_trace_irq_handler+0xdc>
   1510c:	2105      	movs	r1, #5
   1510e:	4630      	mov	r0, r6
   15110:	f8ad 5002 	strh.w	r5, [sp, #2]
   15114:	f00b fdc2 	bl	20c9c <bsd_os_trace_put>
   15118:	f8bd 1002 	ldrh.w	r1, [sp, #2]
   1511c:	68e0      	ldr	r0, [r4, #12]
   1511e:	f00b fdbd 	bl	20c9c <bsd_os_trace_put>
   15122:	f8bd 2002 	ldrh.w	r2, [sp, #2]
   15126:	68e3      	ldr	r3, [r4, #12]
   15128:	4413      	add	r3, r2
   1512a:	60a3      	str	r3, [r4, #8]
   1512c:	e761      	b.n	14ff2 <bsd_os_trace_irq_handler+0x76>
   1512e:	bf00      	nop
   15130:	2002268c 	.word	0x2002268c
   15134:	2002065c 	.word	0x2002065c
   15138:	20020654 	.word	0x20020654
   1513c:	20020658 	.word	0x20020658

00015140 <ipc_trace_handle>:
   15140:	2200      	movs	r2, #0
   15142:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15146:	4bb0      	ldr	r3, [pc, #704]	; (15408 <ipc_trace_handle+0x2c8>)
   15148:	b083      	sub	sp, #12
   1514a:	681b      	ldr	r3, [r3, #0]
   1514c:	6919      	ldr	r1, [r3, #16]
   1514e:	695c      	ldr	r4, [r3, #20]
   15150:	7c18      	ldrb	r0, [r3, #16]
   15152:	741a      	strb	r2, [r3, #16]
   15154:	7c58      	ldrb	r0, [r3, #17]
   15156:	745a      	strb	r2, [r3, #17]
   15158:	7c98      	ldrb	r0, [r3, #18]
   1515a:	749a      	strb	r2, [r3, #18]
   1515c:	7cd8      	ldrb	r0, [r3, #19]
   1515e:	74da      	strb	r2, [r3, #19]
   15160:	7d18      	ldrb	r0, [r3, #20]
   15162:	751a      	strb	r2, [r3, #20]
   15164:	7d58      	ldrb	r0, [r3, #21]
   15166:	755a      	strb	r2, [r3, #21]
   15168:	7d98      	ldrb	r0, [r3, #22]
   1516a:	759a      	strb	r2, [r3, #22]
   1516c:	7dd8      	ldrb	r0, [r3, #23]
   1516e:	75da      	strb	r2, [r3, #23]
   15170:	b1b9      	cbz	r1, 151a2 <ipc_trace_handle+0x62>
   15172:	3901      	subs	r1, #1
   15174:	2903      	cmp	r1, #3
   15176:	d814      	bhi.n	151a2 <ipc_trace_handle+0x62>
   15178:	e8df f011 	tbh	[pc, r1, lsl #1]
   1517c:	010300d6 	.word	0x010300d6
   15180:	00160004 	.word	0x00160004
   15184:	2501      	movs	r5, #1
   15186:	2003      	movs	r0, #3
   15188:	2200      	movs	r2, #0
   1518a:	f06f 015f 	mvn.w	r1, #95	; 0x5f
   1518e:	4c9f      	ldr	r4, [pc, #636]	; (1540c <ipc_trace_handle+0x2cc>)
   15190:	7025      	strb	r5, [r4, #0]
   15192:	7a1c      	ldrb	r4, [r3, #8]
   15194:	7218      	strb	r0, [r3, #8]
   15196:	7a58      	ldrb	r0, [r3, #9]
   15198:	725a      	strb	r2, [r3, #9]
   1519a:	7a98      	ldrb	r0, [r3, #10]
   1519c:	729a      	strb	r2, [r3, #10]
   1519e:	7ada      	ldrb	r2, [r3, #11]
   151a0:	72d9      	strb	r1, [r3, #11]
   151a2:	b003      	add	sp, #12
   151a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   151a8:	2104      	movs	r1, #4
   151aa:	2200      	movs	r2, #0
   151ac:	f06f 005f 	mvn.w	r0, #95	; 0x5f
   151b0:	7a1c      	ldrb	r4, [r3, #8]
   151b2:	7219      	strb	r1, [r3, #8]
   151b4:	7a59      	ldrb	r1, [r3, #9]
   151b6:	725a      	strb	r2, [r3, #9]
   151b8:	4994      	ldr	r1, [pc, #592]	; (1540c <ipc_trace_handle+0x2cc>)
   151ba:	7a9c      	ldrb	r4, [r3, #10]
   151bc:	729a      	strb	r2, [r3, #10]
   151be:	7adc      	ldrb	r4, [r3, #11]
   151c0:	72d8      	strb	r0, [r3, #11]
   151c2:	700a      	strb	r2, [r1, #0]
   151c4:	780b      	ldrb	r3, [r1, #0]
   151c6:	2b00      	cmp	r3, #0
   151c8:	f000 8117 	beq.w	153fa <ipc_trace_handle+0x2ba>
   151cc:	4b90      	ldr	r3, [pc, #576]	; (15410 <ipc_trace_handle+0x2d0>)
   151ce:	681c      	ldr	r4, [r3, #0]
   151d0:	68a2      	ldr	r2, [r4, #8]
   151d2:	6863      	ldr	r3, [r4, #4]
   151d4:	429a      	cmp	r2, r3
   151d6:	d02d      	beq.n	15234 <ipc_trace_handle+0xf4>
   151d8:	f64b 63ef 	movw	r3, #48879	; 0xbeef
   151dc:	f8ad 3000 	strh.w	r3, [sp]
   151e0:	7823      	ldrb	r3, [r4, #0]
   151e2:	466e      	mov	r6, sp
   151e4:	f88d 3004 	strb.w	r3, [sp, #4]
   151e8:	6863      	ldr	r3, [r4, #4]
   151ea:	2105      	movs	r1, #5
   151ec:	429a      	cmp	r2, r3
   151ee:	bf2a      	itet	cs
   151f0:	6927      	ldrcs	r7, [r4, #16]
   151f2:	1a9f      	subcc	r7, r3, r2
   151f4:	1abf      	subcs	r7, r7, r2
   151f6:	429a      	cmp	r2, r3
   151f8:	bf94      	ite	ls
   151fa:	2500      	movls	r5, #0
   151fc:	68e5      	ldrhi	r5, [r4, #12]
   151fe:	b2bf      	uxth	r7, r7
   15200:	bf88      	it	hi
   15202:	1b5b      	subhi	r3, r3, r5
   15204:	4630      	mov	r0, r6
   15206:	bf88      	it	hi
   15208:	b29d      	uxthhi	r5, r3
   1520a:	f8ad 7002 	strh.w	r7, [sp, #2]
   1520e:	f00b fd45 	bl	20c9c <bsd_os_trace_put>
   15212:	f8bd 1002 	ldrh.w	r1, [sp, #2]
   15216:	68a0      	ldr	r0, [r4, #8]
   15218:	f00b fd40 	bl	20c9c <bsd_os_trace_put>
   1521c:	68a3      	ldr	r3, [r4, #8]
   1521e:	6922      	ldr	r2, [r4, #16]
   15220:	441f      	add	r7, r3
   15222:	4297      	cmp	r7, r2
   15224:	bf08      	it	eq
   15226:	68e3      	ldreq	r3, [r4, #12]
   15228:	60a7      	str	r7, [r4, #8]
   1522a:	bf08      	it	eq
   1522c:	60a3      	streq	r3, [r4, #8]
   1522e:	2d00      	cmp	r5, #0
   15230:	f040 80d2 	bne.w	153d8 <ipc_trace_handle+0x298>
   15234:	4b77      	ldr	r3, [pc, #476]	; (15414 <ipc_trace_handle+0x2d4>)
   15236:	681c      	ldr	r4, [r3, #0]
   15238:	68a2      	ldr	r2, [r4, #8]
   1523a:	6863      	ldr	r3, [r4, #4]
   1523c:	429a      	cmp	r2, r3
   1523e:	d02d      	beq.n	1529c <ipc_trace_handle+0x15c>
   15240:	f64b 63ef 	movw	r3, #48879	; 0xbeef
   15244:	f8ad 3000 	strh.w	r3, [sp]
   15248:	7823      	ldrb	r3, [r4, #0]
   1524a:	466e      	mov	r6, sp
   1524c:	f88d 3004 	strb.w	r3, [sp, #4]
   15250:	6863      	ldr	r3, [r4, #4]
   15252:	2105      	movs	r1, #5
   15254:	429a      	cmp	r2, r3
   15256:	bf2a      	itet	cs
   15258:	6927      	ldrcs	r7, [r4, #16]
   1525a:	1a9f      	subcc	r7, r3, r2
   1525c:	1abf      	subcs	r7, r7, r2
   1525e:	429a      	cmp	r2, r3
   15260:	bf94      	ite	ls
   15262:	2500      	movls	r5, #0
   15264:	68e5      	ldrhi	r5, [r4, #12]
   15266:	b2bf      	uxth	r7, r7
   15268:	bf88      	it	hi
   1526a:	1b5b      	subhi	r3, r3, r5
   1526c:	4630      	mov	r0, r6
   1526e:	bf88      	it	hi
   15270:	b29d      	uxthhi	r5, r3
   15272:	f8ad 7002 	strh.w	r7, [sp, #2]
   15276:	f00b fd11 	bl	20c9c <bsd_os_trace_put>
   1527a:	f8bd 1002 	ldrh.w	r1, [sp, #2]
   1527e:	68a0      	ldr	r0, [r4, #8]
   15280:	f00b fd0c 	bl	20c9c <bsd_os_trace_put>
   15284:	68a3      	ldr	r3, [r4, #8]
   15286:	6922      	ldr	r2, [r4, #16]
   15288:	441f      	add	r7, r3
   1528a:	4297      	cmp	r7, r2
   1528c:	bf08      	it	eq
   1528e:	68e3      	ldreq	r3, [r4, #12]
   15290:	60a7      	str	r7, [r4, #8]
   15292:	bf08      	it	eq
   15294:	60a3      	streq	r3, [r4, #8]
   15296:	2d00      	cmp	r5, #0
   15298:	f040 808d 	bne.w	153b6 <ipc_trace_handle+0x276>
   1529c:	4b5e      	ldr	r3, [pc, #376]	; (15418 <ipc_trace_handle+0x2d8>)
   1529e:	681c      	ldr	r4, [r3, #0]
   152a0:	68a2      	ldr	r2, [r4, #8]
   152a2:	6863      	ldr	r3, [r4, #4]
   152a4:	429a      	cmp	r2, r3
   152a6:	f43f af7c 	beq.w	151a2 <ipc_trace_handle+0x62>
   152aa:	f64b 63ef 	movw	r3, #48879	; 0xbeef
   152ae:	f8ad 3000 	strh.w	r3, [sp]
   152b2:	7823      	ldrb	r3, [r4, #0]
   152b4:	466e      	mov	r6, sp
   152b6:	f88d 3004 	strb.w	r3, [sp, #4]
   152ba:	6863      	ldr	r3, [r4, #4]
   152bc:	2105      	movs	r1, #5
   152be:	429a      	cmp	r2, r3
   152c0:	bf2a      	itet	cs
   152c2:	6927      	ldrcs	r7, [r4, #16]
   152c4:	1a9f      	subcc	r7, r3, r2
   152c6:	1abf      	subcs	r7, r7, r2
   152c8:	429a      	cmp	r2, r3
   152ca:	bf94      	ite	ls
   152cc:	2500      	movls	r5, #0
   152ce:	68e5      	ldrhi	r5, [r4, #12]
   152d0:	b2bf      	uxth	r7, r7
   152d2:	bf88      	it	hi
   152d4:	1b5b      	subhi	r3, r3, r5
   152d6:	4630      	mov	r0, r6
   152d8:	bf88      	it	hi
   152da:	b29d      	uxthhi	r5, r3
   152dc:	f8ad 7002 	strh.w	r7, [sp, #2]
   152e0:	f00b fcdc 	bl	20c9c <bsd_os_trace_put>
   152e4:	f8bd 1002 	ldrh.w	r1, [sp, #2]
   152e8:	68a0      	ldr	r0, [r4, #8]
   152ea:	f00b fcd7 	bl	20c9c <bsd_os_trace_put>
   152ee:	68a3      	ldr	r3, [r4, #8]
   152f0:	6922      	ldr	r2, [r4, #16]
   152f2:	441f      	add	r7, r3
   152f4:	4297      	cmp	r7, r2
   152f6:	bf08      	it	eq
   152f8:	68e3      	ldreq	r3, [r4, #12]
   152fa:	60a7      	str	r7, [r4, #8]
   152fc:	bf08      	it	eq
   152fe:	60a3      	streq	r3, [r4, #8]
   15300:	2d00      	cmp	r5, #0
   15302:	f43f af4e 	beq.w	151a2 <ipc_trace_handle+0x62>
   15306:	2105      	movs	r1, #5
   15308:	4630      	mov	r0, r6
   1530a:	f8ad 5002 	strh.w	r5, [sp, #2]
   1530e:	f00b fcc5 	bl	20c9c <bsd_os_trace_put>
   15312:	f8bd 1002 	ldrh.w	r1, [sp, #2]
   15316:	68e0      	ldr	r0, [r4, #12]
   15318:	f00b fcc0 	bl	20c9c <bsd_os_trace_put>
   1531c:	f8bd 2002 	ldrh.w	r2, [sp, #2]
   15320:	68e3      	ldr	r3, [r4, #12]
   15322:	4413      	add	r3, r2
   15324:	60a3      	str	r3, [r4, #8]
   15326:	e73c      	b.n	151a2 <ipc_trace_handle+0x62>
   15328:	4a38      	ldr	r2, [pc, #224]	; (1540c <ipc_trace_handle+0x2cc>)
   1532a:	7811      	ldrb	r1, [r2, #0]
   1532c:	b109      	cbz	r1, 15332 <ipc_trace_handle+0x1f2>
   1532e:	2100      	movs	r1, #0
   15330:	7011      	strb	r1, [r2, #0]
   15332:	68a5      	ldr	r5, [r4, #8]
   15334:	2d00      	cmp	r5, #0
   15336:	d039      	beq.n	153ac <ipc_trace_handle+0x26c>
   15338:	f04f 0c00 	mov.w	ip, #0
   1533c:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 15414 <ipc_trace_handle+0x2d4>
   15340:	f8df b0cc 	ldr.w	fp, [pc, #204]	; 15410 <ipc_trace_handle+0x2d0>
   15344:	4934      	ldr	r1, [pc, #208]	; (15418 <ipc_trace_handle+0x2d8>)
   15346:	46e1      	mov	r9, ip
   15348:	4666      	mov	r6, ip
   1534a:	4662      	mov	r2, ip
   1534c:	f8d1 e000 	ldr.w	lr, [r1]
   15350:	f8da 8000 	ldr.w	r8, [sl]
   15354:	f8db 7000 	ldr.w	r7, [fp]
   15358:	e008      	b.n	1536c <ipc_trace_handle+0x22c>
   1535a:	2963      	cmp	r1, #99	; 0x63
   1535c:	d016      	beq.n	1538c <ipc_trace_handle+0x24c>
   1535e:	2961      	cmp	r1, #97	; 0x61
   15360:	bf04      	itt	eq
   15362:	4607      	moveq	r7, r0
   15364:	2601      	moveq	r6, #1
   15366:	3201      	adds	r2, #1
   15368:	42aa      	cmp	r2, r5
   1536a:	d013      	beq.n	15394 <ipc_trace_handle+0x254>
   1536c:	1c91      	adds	r1, r2, #2
   1536e:	eb04 0181 	add.w	r1, r4, r1, lsl #2
   15372:	6848      	ldr	r0, [r1, #4]
   15374:	7801      	ldrb	r1, [r0, #0]
   15376:	2962      	cmp	r1, #98	; 0x62
   15378:	d1ef      	bne.n	1535a <ipc_trace_handle+0x21a>
   1537a:	4680      	mov	r8, r0
   1537c:	f04f 0901 	mov.w	r9, #1
   15380:	e7f1      	b.n	15366 <ipc_trace_handle+0x226>
   15382:	f7fb ff73 	bl	1126c <bsd_os_trace_irq_set>
   15386:	b003      	add	sp, #12
   15388:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1538c:	4686      	mov	lr, r0
   1538e:	f04f 0c01 	mov.w	ip, #1
   15392:	e7e8      	b.n	15366 <ipc_trace_handle+0x226>
   15394:	bba6      	cbnz	r6, 15400 <ipc_trace_handle+0x2c0>
   15396:	f1b9 0f00 	cmp.w	r9, #0
   1539a:	d001      	beq.n	153a0 <ipc_trace_handle+0x260>
   1539c:	f8ca 8000 	str.w	r8, [sl]
   153a0:	f1bc 0f00 	cmp.w	ip, #0
   153a4:	d002      	beq.n	153ac <ipc_trace_handle+0x26c>
   153a6:	4a1c      	ldr	r2, [pc, #112]	; (15418 <ipc_trace_handle+0x2d8>)
   153a8:	f8c2 e000 	str.w	lr, [r2]
   153ac:	2001      	movs	r0, #1
   153ae:	2200      	movs	r2, #0
   153b0:	f06f 015f 	mvn.w	r1, #95	; 0x5f
   153b4:	e6ed      	b.n	15192 <ipc_trace_handle+0x52>
   153b6:	2105      	movs	r1, #5
   153b8:	4630      	mov	r0, r6
   153ba:	f8ad 5002 	strh.w	r5, [sp, #2]
   153be:	f00b fc6d 	bl	20c9c <bsd_os_trace_put>
   153c2:	f8bd 1002 	ldrh.w	r1, [sp, #2]
   153c6:	68e0      	ldr	r0, [r4, #12]
   153c8:	f00b fc68 	bl	20c9c <bsd_os_trace_put>
   153cc:	f8bd 2002 	ldrh.w	r2, [sp, #2]
   153d0:	68e3      	ldr	r3, [r4, #12]
   153d2:	4413      	add	r3, r2
   153d4:	60a3      	str	r3, [r4, #8]
   153d6:	e761      	b.n	1529c <ipc_trace_handle+0x15c>
   153d8:	2105      	movs	r1, #5
   153da:	4630      	mov	r0, r6
   153dc:	f8ad 5002 	strh.w	r5, [sp, #2]
   153e0:	f00b fc5c 	bl	20c9c <bsd_os_trace_put>
   153e4:	f8bd 1002 	ldrh.w	r1, [sp, #2]
   153e8:	68e0      	ldr	r0, [r4, #12]
   153ea:	f00b fc57 	bl	20c9c <bsd_os_trace_put>
   153ee:	f8bd 2002 	ldrh.w	r2, [sp, #2]
   153f2:	68e3      	ldr	r3, [r4, #12]
   153f4:	4413      	add	r3, r2
   153f6:	60a3      	str	r3, [r4, #8]
   153f8:	e71c      	b.n	15234 <ipc_trace_handle+0xf4>
   153fa:	f7fb ff3f 	bl	1127c <bsd_os_trace_irq_clear>
   153fe:	e6e5      	b.n	151cc <ipc_trace_handle+0x8c>
   15400:	f8cb 7000 	str.w	r7, [fp]
   15404:	e7c7      	b.n	15396 <ipc_trace_handle+0x256>
   15406:	bf00      	nop
   15408:	20020660 	.word	0x20020660
   1540c:	2002268c 	.word	0x2002268c
   15410:	2002065c 	.word	0x2002065c
   15414:	20020654 	.word	0x20020654
   15418:	20020658 	.word	0x20020658

0001541c <rpc_trace_coredump_in_progress>:
   1541c:	4b01      	ldr	r3, [pc, #4]	; (15424 <rpc_trace_coredump_in_progress+0x8>)
   1541e:	7818      	ldrb	r0, [r3, #0]
   15420:	4770      	bx	lr
   15422:	bf00      	nop
   15424:	2002268c 	.word	0x2002268c

00015428 <transport_reset>:
   15428:	2000      	movs	r0, #0
   1542a:	4770      	bx	lr

0001542c <transport_data_free>:
   1542c:	4b0b      	ldr	r3, [pc, #44]	; (1545c <transport_data_free+0x30>)
   1542e:	e9d3 2300 	ldrd	r2, r3, [r3]
   15432:	4413      	add	r3, r2
   15434:	4298      	cmp	r0, r3
   15436:	d20d      	bcs.n	15454 <transport_data_free+0x28>
   15438:	4282      	cmp	r2, r0
   1543a:	d80b      	bhi.n	15454 <transport_data_free+0x28>
   1543c:	b510      	push	{r4, lr}
   1543e:	4604      	mov	r4, r0
   15440:	f000 fd5a 	bl	15ef8 <rpc_transport_ipc_tx_rpc_ctrl_alloc>
   15444:	b140      	cbz	r0, 15458 <transport_data_free+0x2c>
   15446:	4a06      	ldr	r2, [pc, #24]	; (15460 <transport_data_free+0x34>)
   15448:	6084      	str	r4, [r0, #8]
   1544a:	6002      	str	r2, [r0, #0]
   1544c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   15450:	f000 bc9a 	b.w	15d88 <rpc_transport_ipc_tx_send>
   15454:	f7fe bbc6 	b.w	13be4 <nrf_shared_free>
   15458:	bd10      	pop	{r4, pc}
   1545a:	bf00      	nop
   1545c:	20020664 	.word	0x20020664
   15460:	00020001 	.word	0x00020001

00015464 <rpc_transport_ipc_init>:
   15464:	2800      	cmp	r0, #0
   15466:	d02b      	beq.n	154c0 <rpc_transport_ipc_init+0x5c>
   15468:	b530      	push	{r4, r5, lr}
   1546a:	b089      	sub	sp, #36	; 0x24
   1546c:	aa01      	add	r2, sp, #4
   1546e:	4669      	mov	r1, sp
   15470:	4604      	mov	r4, r0
   15472:	f000 fb9f 	bl	15bb4 <rpc_transport_ipc_tx_init>
   15476:	4603      	mov	r3, r0
   15478:	b140      	cbz	r0, 1548c <rpc_transport_ipc_init+0x28>
   1547a:	4a13      	ldr	r2, [pc, #76]	; (154c8 <rpc_transport_ipc_init+0x64>)
   1547c:	f104 0028 	add.w	r0, r4, #40	; 0x28
   15480:	c803      	ldmia	r0, {r0, r1}
   15482:	e882 0003 	stmia.w	r2, {r0, r1}
   15486:	4618      	mov	r0, r3
   15488:	b009      	add	sp, #36	; 0x24
   1548a:	bd30      	pop	{r4, r5, pc}
   1548c:	e9dd 1200 	ldrd	r1, r2, [sp]
   15490:	4620      	mov	r0, r4
   15492:	f000 f84b 	bl	1552c <rpc_transport_ipc_rx_init>
   15496:	4603      	mov	r3, r0
   15498:	2800      	cmp	r0, #0
   1549a:	d1ee      	bne.n	1547a <rpc_transport_ipc_init+0x16>
   1549c:	4b0b      	ldr	r3, [pc, #44]	; (154cc <rpc_transport_ipc_init+0x68>)
   1549e:	490c      	ldr	r1, [pc, #48]	; (154d0 <rpc_transport_ipc_init+0x6c>)
   154a0:	480c      	ldr	r0, [pc, #48]	; (154d4 <rpc_transport_ipc_init+0x70>)
   154a2:	4a0d      	ldr	r2, [pc, #52]	; (154d8 <rpc_transport_ipc_init+0x74>)
   154a4:	9303      	str	r3, [sp, #12]
   154a6:	4d0d      	ldr	r5, [pc, #52]	; (154dc <rpc_transport_ipc_init+0x78>)
   154a8:	4b0d      	ldr	r3, [pc, #52]	; (154e0 <rpc_transport_ipc_init+0x7c>)
   154aa:	9104      	str	r1, [sp, #16]
   154ac:	9005      	str	r0, [sp, #20]
   154ae:	490d      	ldr	r1, [pc, #52]	; (154e4 <rpc_transport_ipc_init+0x80>)
   154b0:	a802      	add	r0, sp, #8
   154b2:	9307      	str	r3, [sp, #28]
   154b4:	9506      	str	r5, [sp, #24]
   154b6:	9202      	str	r2, [sp, #8]
   154b8:	f003 ff44 	bl	19344 <rpc_transport_register>
   154bc:	4603      	mov	r3, r0
   154be:	e7dc      	b.n	1547a <rpc_transport_ipc_init+0x16>
   154c0:	230e      	movs	r3, #14
   154c2:	4618      	mov	r0, r3
   154c4:	4770      	bx	lr
   154c6:	bf00      	nop
   154c8:	20020664 	.word	0x20020664
   154cc:	00015e89 	.word	0x00015e89
   154d0:	00015f59 	.word	0x00015f59
   154d4:	00015b49 	.word	0x00015b49
   154d8:	00015d89 	.word	0x00015d89
   154dc:	0001542d 	.word	0x0001542d
   154e0:	00015429 	.word	0x00015429
   154e4:	2002066c 	.word	0x2002066c

000154e8 <rpc_transport_rx_handle>:
   154e8:	b160      	cbz	r0, 15504 <rpc_transport_rx_handle+0x1c>
   154ea:	b508      	push	{r3, lr}
   154ec:	6843      	ldr	r3, [r0, #4]
   154ee:	b2db      	uxtb	r3, r3
   154f0:	2b02      	cmp	r3, #2
   154f2:	d00e      	beq.n	15512 <rpc_transport_rx_handle+0x2a>
   154f4:	6803      	ldr	r3, [r0, #0]
   154f6:	0c1b      	lsrs	r3, r3, #16
   154f8:	2b02      	cmp	r3, #2
   154fa:	d005      	beq.n	15508 <rpc_transport_rx_handle+0x20>
   154fc:	2b04      	cmp	r3, #4
   154fe:	d00e      	beq.n	1551e <rpc_transport_rx_handle+0x36>
   15500:	2000      	movs	r0, #0
   15502:	bd08      	pop	{r3, pc}
   15504:	2000      	movs	r0, #0
   15506:	4770      	bx	lr
   15508:	6880      	ldr	r0, [r0, #8]
   1550a:	f7fe fb6b 	bl	13be4 <nrf_shared_free>
   1550e:	2000      	movs	r0, #0
   15510:	bd08      	pop	{r3, pc}
   15512:	4601      	mov	r1, r0
   15514:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   15518:	4803      	ldr	r0, [pc, #12]	; (15528 <rpc_transport_rx_handle+0x40>)
   1551a:	f003 be05 	b.w	19128 <rpc_transport_input>
   1551e:	4802      	ldr	r0, [pc, #8]	; (15528 <rpc_transport_rx_handle+0x40>)
   15520:	f003 ff70 	bl	19404 <rpc_transport_unregister>
   15524:	2000      	movs	r0, #0
   15526:	bd08      	pop	{r3, pc}
   15528:	2002066c 	.word	0x2002066c

0001552c <rpc_transport_ipc_rx_init>:
   1552c:	2800      	cmp	r0, #0
   1552e:	f000 80ff 	beq.w	15730 <rpc_transport_ipc_rx_init+0x204>
   15532:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15536:	6805      	ldr	r5, [r0, #0]
   15538:	b095      	sub	sp, #84	; 0x54
   1553a:	2d00      	cmp	r5, #0
   1553c:	f000 80ee 	beq.w	1571c <rpc_transport_ipc_rx_init+0x1f0>
   15540:	6883      	ldr	r3, [r0, #8]
   15542:	2b00      	cmp	r3, #0
   15544:	f000 80ea 	beq.w	1571c <rpc_transport_ipc_rx_init+0x1f0>
   15548:	6907      	ldr	r7, [r0, #16]
   1554a:	2f00      	cmp	r7, #0
   1554c:	f000 80e6 	beq.w	1571c <rpc_transport_ipc_rx_init+0x1f0>
   15550:	6a84      	ldr	r4, [r0, #40]	; 0x28
   15552:	2c00      	cmp	r4, #0
   15554:	f000 80e2 	beq.w	1571c <rpc_transport_ipc_rx_init+0x1f0>
   15558:	6844      	ldr	r4, [r0, #4]
   1555a:	2c1b      	cmp	r4, #27
   1555c:	f240 80e3 	bls.w	15726 <rpc_transport_ipc_rx_init+0x1fa>
   15560:	68c4      	ldr	r4, [r0, #12]
   15562:	2c0b      	cmp	r4, #11
   15564:	f240 80df 	bls.w	15726 <rpc_transport_ipc_rx_init+0x1fa>
   15568:	f8d0 e014 	ldr.w	lr, [r0, #20]
   1556c:	f1be 0f17 	cmp.w	lr, #23
   15570:	f240 80d9 	bls.w	15726 <rpc_transport_ipc_rx_init+0x1fa>
   15574:	2600      	movs	r6, #0
   15576:	4604      	mov	r4, r0
   15578:	486f      	ldr	r0, [pc, #444]	; (15738 <rpc_transport_ipc_rx_init+0x20c>)
   1557a:	e9cd 1200 	strd	r1, r2, [sp]
   1557e:	f8df a1d8 	ldr.w	sl, [pc, #472]	; 15758 <rpc_transport_ipc_rx_init+0x22c>
   15582:	496e      	ldr	r1, [pc, #440]	; (1573c <rpc_transport_ipc_rx_init+0x210>)
   15584:	8006      	strh	r6, [r0, #0]
   15586:	6ba0      	ldr	r0, [r4, #56]	; 0x38
   15588:	f8df c1d0 	ldr.w	ip, [pc, #464]	; 1575c <rpc_transport_ipc_rx_init+0x230>
   1558c:	f8df 81d0 	ldr.w	r8, [pc, #464]	; 15760 <rpc_transport_ipc_rx_init+0x234>
   15590:	f8df b1d0 	ldr.w	fp, [pc, #464]	; 15764 <rpc_transport_ipc_rx_init+0x238>
   15594:	f8df 91d0 	ldr.w	r9, [pc, #464]	; 15768 <rpc_transport_ipc_rx_init+0x23c>
   15598:	4672      	mov	r2, lr
   1559a:	600e      	str	r6, [r1, #0]
   1559c:	f8ca 0000 	str.w	r0, [sl]
   155a0:	4631      	mov	r1, r6
   155a2:	4638      	mov	r0, r7
   155a4:	f8cc 6000 	str.w	r6, [ip]
   155a8:	f8cb 3000 	str.w	r3, [fp]
   155ac:	f8c8 6000 	str.w	r6, [r8]
   155b0:	f8c9 6000 	str.w	r6, [r9]
   155b4:	f00c f9ce 	bl	21954 <memset>
   155b8:	69e3      	ldr	r3, [r4, #28]
   155ba:	4638      	mov	r0, r7
   155bc:	603b      	str	r3, [r7, #0]
   155be:	69a3      	ldr	r3, [r4, #24]
   155c0:	607b      	str	r3, [r7, #4]
   155c2:	f7ff fcd5 	bl	14f70 <ipc_trace_init>
   155c6:	2201      	movs	r2, #1
   155c8:	f04f 0c04 	mov.w	ip, #4
   155cc:	4b5c      	ldr	r3, [pc, #368]	; (15740 <rpc_transport_ipc_rx_init+0x214>)
   155ce:	495d      	ldr	r1, [pc, #372]	; (15744 <rpc_transport_ipc_rx_init+0x218>)
   155d0:	f8c3 5610 	str.w	r5, [r3, #1552]	; 0x610
   155d4:	6809      	ldr	r1, [r1, #0]
   155d6:	2080      	movs	r0, #128	; 0x80
   155d8:	9104      	str	r1, [sp, #16]
   155da:	495b      	ldr	r1, [pc, #364]	; (15748 <rpc_transport_ipc_rx_init+0x21c>)
   155dc:	f8dd e010 	ldr.w	lr, [sp, #16]
   155e0:	f8c3 6614 	str.w	r6, [r3, #1556]	; 0x614
   155e4:	6809      	ldr	r1, [r1, #0]
   155e6:	702e      	strb	r6, [r5, #0]
   155e8:	9103      	str	r1, [sp, #12]
   155ea:	706e      	strb	r6, [r5, #1]
   155ec:	70ee      	strb	r6, [r5, #3]
   155ee:	70aa      	strb	r2, [r5, #2]
   155f0:	9903      	ldr	r1, [sp, #12]
   155f2:	6aa1      	ldr	r1, [r4, #40]	; 0x28
   155f4:	f8db e000 	ldr.w	lr, [fp]
   155f8:	6069      	str	r1, [r5, #4]
   155fa:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
   155fc:	9c01      	ldr	r4, [sp, #4]
   155fe:	60a9      	str	r1, [r5, #8]
   15600:	60ec      	str	r4, [r5, #12]
   15602:	9c00      	ldr	r4, [sp, #0]
   15604:	4951      	ldr	r1, [pc, #324]	; (1574c <rpc_transport_ipc_rx_init+0x220>)
   15606:	61af      	str	r7, [r5, #24]
   15608:	f8c5 e014 	str.w	lr, [r5, #20]
   1560c:	612c      	str	r4, [r5, #16]
   1560e:	f8c3 2590 	str.w	r2, [r3, #1424]	; 0x590
   15612:	680c      	ldr	r4, [r1, #0]
   15614:	f5a1 6192 	sub.w	r1, r1, #1168	; 0x490
   15618:	9405      	str	r4, [sp, #20]
   1561a:	9c05      	ldr	r4, [sp, #20]
   1561c:	f8c3 c598 	str.w	ip, [r3, #1432]	; 0x598
   15620:	f8d1 4498 	ldr.w	r4, [r1, #1176]	; 0x498
   15624:	f44f 6780 	mov.w	r7, #1024	; 0x400
   15628:	9406      	str	r4, [sp, #24]
   1562a:	9c06      	ldr	r4, [sp, #24]
   1562c:	2410      	movs	r4, #16
   1562e:	f8c3 45a0 	str.w	r4, [r3, #1440]	; 0x5a0
   15632:	f8d1 44a0 	ldr.w	r4, [r1, #1184]	; 0x4a0
   15636:	4d46      	ldr	r5, [pc, #280]	; (15750 <rpc_transport_ipc_rx_init+0x224>)
   15638:	9407      	str	r4, [sp, #28]
   1563a:	9c07      	ldr	r4, [sp, #28]
   1563c:	2440      	movs	r4, #64	; 0x40
   1563e:	f8c3 45a8 	str.w	r4, [r3, #1448]	; 0x5a8
   15642:	f8d1 44a8 	ldr.w	r4, [r1, #1192]	; 0x4a8
   15646:	9408      	str	r4, [sp, #32]
   15648:	9c08      	ldr	r4, [sp, #32]
   1564a:	f8c3 05ac 	str.w	r0, [r3, #1452]	; 0x5ac
   1564e:	f8d1 04ac 	ldr.w	r0, [r1, #1196]	; 0x4ac
   15652:	9009      	str	r0, [sp, #36]	; 0x24
   15654:	9809      	ldr	r0, [sp, #36]	; 0x24
   15656:	f8c3 6100 	str.w	r6, [r3, #256]	; 0x100
   1565a:	6808      	ldr	r0, [r1, #0]
   1565c:	900a      	str	r0, [sp, #40]	; 0x28
   1565e:	980a      	ldr	r0, [sp, #40]	; 0x28
   15660:	f8c3 6108 	str.w	r6, [r3, #264]	; 0x108
   15664:	6888      	ldr	r0, [r1, #8]
   15666:	900b      	str	r0, [sp, #44]	; 0x2c
   15668:	980b      	ldr	r0, [sp, #44]	; 0x2c
   1566a:	f8c3 6110 	str.w	r6, [r3, #272]	; 0x110
   1566e:	6908      	ldr	r0, [r1, #16]
   15670:	900c      	str	r0, [sp, #48]	; 0x30
   15672:	980c      	ldr	r0, [sp, #48]	; 0x30
   15674:	f8c3 6118 	str.w	r6, [r3, #280]	; 0x118
   15678:	6988      	ldr	r0, [r1, #24]
   1567a:	900d      	str	r0, [sp, #52]	; 0x34
   1567c:	980d      	ldr	r0, [sp, #52]	; 0x34
   1567e:	f8c3 611c 	str.w	r6, [r3, #284]	; 0x11c
   15682:	69c8      	ldr	r0, [r1, #28]
   15684:	f501 7101 	add.w	r1, r1, #516	; 0x204
   15688:	900e      	str	r0, [sp, #56]	; 0x38
   1568a:	980e      	ldr	r0, [sp, #56]	; 0x38
   1568c:	f8d3 0304 	ldr.w	r0, [r3, #772]	; 0x304
   15690:	4310      	orrs	r0, r2
   15692:	f8c3 0304 	str.w	r0, [r3, #772]	; 0x304
   15696:	680c      	ldr	r4, [r1, #0]
   15698:	482e      	ldr	r0, [pc, #184]	; (15754 <rpc_transport_ipc_rx_init+0x228>)
   1569a:	940f      	str	r4, [sp, #60]	; 0x3c
   1569c:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
   1569e:	f8d3 4304 	ldr.w	r4, [r3, #772]	; 0x304
   156a2:	ea44 040c 	orr.w	r4, r4, ip
   156a6:	f8c3 4304 	str.w	r4, [r3, #772]	; 0x304
   156aa:	680c      	ldr	r4, [r1, #0]
   156ac:	9410      	str	r4, [sp, #64]	; 0x40
   156ae:	9c10      	ldr	r4, [sp, #64]	; 0x40
   156b0:	f8d3 4304 	ldr.w	r4, [r3, #772]	; 0x304
   156b4:	f044 0410 	orr.w	r4, r4, #16
   156b8:	f8c3 4304 	str.w	r4, [r3, #772]	; 0x304
   156bc:	680c      	ldr	r4, [r1, #0]
   156be:	9411      	str	r4, [sp, #68]	; 0x44
   156c0:	9c11      	ldr	r4, [sp, #68]	; 0x44
   156c2:	f8d3 4304 	ldr.w	r4, [r3, #772]	; 0x304
   156c6:	f044 0440 	orr.w	r4, r4, #64	; 0x40
   156ca:	f8c3 4304 	str.w	r4, [r3, #772]	; 0x304
   156ce:	680c      	ldr	r4, [r1, #0]
   156d0:	9412      	str	r4, [sp, #72]	; 0x48
   156d2:	9c12      	ldr	r4, [sp, #72]	; 0x48
   156d4:	f8d3 4304 	ldr.w	r4, [r3, #772]	; 0x304
   156d8:	f044 0480 	orr.w	r4, r4, #128	; 0x80
   156dc:	f8c3 4304 	str.w	r4, [r3, #772]	; 0x304
   156e0:	f8da 3000 	ldr.w	r3, [sl]
   156e4:	6809      	ldr	r1, [r1, #0]
   156e6:	015b      	lsls	r3, r3, #5
   156e8:	9113      	str	r1, [sp, #76]	; 0x4c
   156ea:	b2db      	uxtb	r3, r3
   156ec:	9913      	ldr	r1, [sp, #76]	; 0x4c
   156ee:	f8c8 2000 	str.w	r2, [r8]
   156f2:	f880 332a 	strb.w	r3, [r0, #810]	; 0x32a
   156f6:	f8c0 7184 	str.w	r7, [r0, #388]	; 0x184
   156fa:	6047      	str	r7, [r0, #4]
   156fc:	9602      	str	r6, [sp, #8]
   156fe:	f8c5 6610 	str.w	r6, [r5, #1552]	; 0x610
   15702:	f8d5 3610 	ldr.w	r3, [r5, #1552]	; 0x610
   15706:	9302      	str	r3, [sp, #8]
   15708:	9b02      	ldr	r3, [sp, #8]
   1570a:	f8d8 3000 	ldr.w	r3, [r8]
   1570e:	2b01      	cmp	r3, #1
   15710:	d0fb      	beq.n	1570a <rpc_transport_ipc_rx_init+0x1de>
   15712:	f8d9 0000 	ldr.w	r0, [r9]
   15716:	b015      	add	sp, #84	; 0x54
   15718:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1571c:	f24c 000e 	movw	r0, #49166	; 0xc00e
   15720:	b015      	add	sp, #84	; 0x54
   15722:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15726:	f24c 0009 	movw	r0, #49161	; 0xc009
   1572a:	b015      	add	sp, #84	; 0x54
   1572c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15730:	f24c 000e 	movw	r0, #49166	; 0xc00e
   15734:	4770      	bx	lr
   15736:	bf00      	nop
   15738:	200214d6 	.word	0x200214d6
   1573c:	2002067c 	.word	0x2002067c
   15740:	4002a000 	.word	0x4002a000
   15744:	4002a610 	.word	0x4002a610
   15748:	4002a614 	.word	0x4002a614
   1574c:	4002a590 	.word	0x4002a590
   15750:	40005000 	.word	0x40005000
   15754:	e000e100 	.word	0xe000e100
   15758:	20020674 	.word	0x20020674
   1575c:	20020680 	.word	0x20020680
   15760:	20020678 	.word	0x20020678
   15764:	20020684 	.word	0x20020684
   15768:	20020670 	.word	0x20020670

0001576c <IPC_IRQHandler>:
   1576c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15770:	f44f 6580 	mov.w	r5, #1024	; 0x400
   15774:	4ca7      	ldr	r4, [pc, #668]	; (15a14 <IPC_IRQHandler+0x2a8>)
   15776:	b087      	sub	sp, #28
   15778:	f8c4 5084 	str.w	r5, [r4, #132]	; 0x84
   1577c:	f3bf 8f4f 	dsb	sy
   15780:	f3bf 8f6f 	isb	sy
   15784:	4ea4      	ldr	r6, [pc, #656]	; (15a18 <IPC_IRQHandler+0x2ac>)
   15786:	f8c4 5184 	str.w	r5, [r4, #388]	; 0x184
   1578a:	f8d6 330c 	ldr.w	r3, [r6, #780]	; 0x30c
   1578e:	061f      	lsls	r7, r3, #24
   15790:	f100 80c8 	bmi.w	15924 <IPC_IRQHandler+0x1b8>
   15794:	4ba0      	ldr	r3, [pc, #640]	; (15a18 <IPC_IRQHandler+0x2ac>)
   15796:	f8d3 230c 	ldr.w	r2, [r3, #780]	; 0x30c
   1579a:	07d0      	lsls	r0, r2, #31
   1579c:	f100 80d4 	bmi.w	15948 <IPC_IRQHandler+0x1dc>
   157a0:	f8d3 230c 	ldr.w	r2, [r3, #780]	; 0x30c
   157a4:	f012 0240 	ands.w	r2, r2, #64	; 0x40
   157a8:	f040 80b6 	bne.w	15918 <IPC_IRQHandler+0x1ac>
   157ac:	f8d3 130c 	ldr.w	r1, [r3, #780]	; 0x30c
   157b0:	0749      	lsls	r1, r1, #29
   157b2:	f100 80e6 	bmi.w	15982 <IPC_IRQHandler+0x216>
   157b6:	f8d3 330c 	ldr.w	r3, [r3, #780]	; 0x30c
   157ba:	06da      	lsls	r2, r3, #27
   157bc:	f140 809d 	bpl.w	158fa <IPC_IRQHandler+0x18e>
   157c0:	2100      	movs	r1, #0
   157c2:	4a95      	ldr	r2, [pc, #596]	; (15a18 <IPC_IRQHandler+0x2ac>)
   157c4:	4b95      	ldr	r3, [pc, #596]	; (15a1c <IPC_IRQHandler+0x2b0>)
   157c6:	f8c2 1110 	str.w	r1, [r2, #272]	; 0x110
   157ca:	681b      	ldr	r3, [r3, #0]
   157cc:	9304      	str	r3, [sp, #16]
   157ce:	9b04      	ldr	r3, [sp, #16]
   157d0:	f8df 8270 	ldr.w	r8, [pc, #624]	; 15a44 <IPC_IRQHandler+0x2d8>
   157d4:	4f92      	ldr	r7, [pc, #584]	; (15a20 <IPC_IRQHandler+0x2b4>)
   157d6:	f8df 9270 	ldr.w	r9, [pc, #624]	; 15a48 <IPC_IRQHandler+0x2dc>
   157da:	f8d8 a000 	ldr.w	sl, [r8]
   157de:	f8da 1000 	ldr.w	r1, [sl]
   157e2:	2900      	cmp	r1, #0
   157e4:	d03f      	beq.n	15866 <IPC_IRQHandler+0xfa>
   157e6:	2200      	movs	r2, #0
   157e8:	4614      	mov	r4, r2
   157ea:	e002      	b.n	157f2 <IPC_IRQHandler+0x86>
   157ec:	3401      	adds	r4, #1
   157ee:	428c      	cmp	r4, r1
   157f0:	d227      	bcs.n	15842 <IPC_IRQHandler+0xd6>
   157f2:	eb0a 05c4 	add.w	r5, sl, r4, lsl #3
   157f6:	68ab      	ldr	r3, [r5, #8]
   157f8:	2b00      	cmp	r3, #0
   157fa:	d0f7      	beq.n	157ec <IPC_IRQHandler+0x80>
   157fc:	686e      	ldr	r6, [r5, #4]
   157fe:	b2f6      	uxtb	r6, r6
   15800:	2e01      	cmp	r6, #1
   15802:	d1f3      	bne.n	157ec <IPC_IRQHandler+0x80>
   15804:	6868      	ldr	r0, [r5, #4]
   15806:	f8b9 3000 	ldrh.w	r3, [r9]
   1580a:	ebb3 4f10 	cmp.w	r3, r0, lsr #16
   1580e:	d1ed      	bne.n	157ec <IPC_IRQHandler+0x80>
   15810:	686a      	ldr	r2, [r5, #4]
   15812:	3301      	adds	r3, #1
   15814:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
   15818:	f042 0202 	orr.w	r2, r2, #2
   1581c:	606a      	str	r2, [r5, #4]
   1581e:	68a8      	ldr	r0, [r5, #8]
   15820:	f8a9 3000 	strh.w	r3, [r9]
   15824:	f7ff fe60 	bl	154e8 <rpc_transport_rx_handle>
   15828:	4632      	mov	r2, r6
   1582a:	b928      	cbnz	r0, 15838 <IPC_IRQHandler+0xcc>
   1582c:	686b      	ldr	r3, [r5, #4]
   1582e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
   15832:	f043 0303 	orr.w	r3, r3, #3
   15836:	606b      	str	r3, [r5, #4]
   15838:	f8da 1000 	ldr.w	r1, [sl]
   1583c:	3401      	adds	r4, #1
   1583e:	428c      	cmp	r4, r1
   15840:	d3d7      	bcc.n	157f2 <IPC_IRQHandler+0x86>
   15842:	2a00      	cmp	r2, #0
   15844:	d1cd      	bne.n	157e2 <IPC_IRQHandler+0x76>
   15846:	b171      	cbz	r1, 15866 <IPC_IRQHandler+0xfa>
   15848:	4613      	mov	r3, r2
   1584a:	eb0a 02c3 	add.w	r2, sl, r3, lsl #3
   1584e:	6890      	ldr	r0, [r2, #8]
   15850:	3301      	adds	r3, #1
   15852:	b130      	cbz	r0, 15862 <IPC_IRQHandler+0xf6>
   15854:	f8d2 b004 	ldr.w	fp, [r2, #4]
   15858:	fa5f fb8b 	uxtb.w	fp, fp
   1585c:	f1bb 0f01 	cmp.w	fp, #1
   15860:	d003      	beq.n	1586a <IPC_IRQHandler+0xfe>
   15862:	428b      	cmp	r3, r1
   15864:	d1f1      	bne.n	1584a <IPC_IRQHandler+0xde>
   15866:	f04f 0b00 	mov.w	fp, #0
   1586a:	f8d7 a000 	ldr.w	sl, [r7]
   1586e:	f8da 2000 	ldr.w	r2, [sl]
   15872:	2a00      	cmp	r2, #0
   15874:	d03d      	beq.n	158f2 <IPC_IRQHandler+0x186>
   15876:	2100      	movs	r1, #0
   15878:	460c      	mov	r4, r1
   1587a:	e002      	b.n	15882 <IPC_IRQHandler+0x116>
   1587c:	3401      	adds	r4, #1
   1587e:	4294      	cmp	r4, r2
   15880:	d227      	bcs.n	158d2 <IPC_IRQHandler+0x166>
   15882:	eb0a 05c4 	add.w	r5, sl, r4, lsl #3
   15886:	68ab      	ldr	r3, [r5, #8]
   15888:	2b00      	cmp	r3, #0
   1588a:	d0f7      	beq.n	1587c <IPC_IRQHandler+0x110>
   1588c:	686e      	ldr	r6, [r5, #4]
   1588e:	b2f6      	uxtb	r6, r6
   15890:	2e01      	cmp	r6, #1
   15892:	d1f3      	bne.n	1587c <IPC_IRQHandler+0x110>
   15894:	6868      	ldr	r0, [r5, #4]
   15896:	f8b9 3000 	ldrh.w	r3, [r9]
   1589a:	ebb3 4f10 	cmp.w	r3, r0, lsr #16
   1589e:	d1ed      	bne.n	1587c <IPC_IRQHandler+0x110>
   158a0:	686a      	ldr	r2, [r5, #4]
   158a2:	3301      	adds	r3, #1
   158a4:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
   158a8:	f042 0202 	orr.w	r2, r2, #2
   158ac:	606a      	str	r2, [r5, #4]
   158ae:	68a8      	ldr	r0, [r5, #8]
   158b0:	f8a9 3000 	strh.w	r3, [r9]
   158b4:	f7ff fe18 	bl	154e8 <rpc_transport_rx_handle>
   158b8:	4631      	mov	r1, r6
   158ba:	b928      	cbnz	r0, 158c8 <IPC_IRQHandler+0x15c>
   158bc:	686a      	ldr	r2, [r5, #4]
   158be:	f022 03ff 	bic.w	r3, r2, #255	; 0xff
   158c2:	f043 0303 	orr.w	r3, r3, #3
   158c6:	606b      	str	r3, [r5, #4]
   158c8:	f8da 2000 	ldr.w	r2, [sl]
   158cc:	3401      	adds	r4, #1
   158ce:	4294      	cmp	r4, r2
   158d0:	d3d7      	bcc.n	15882 <IPC_IRQHandler+0x116>
   158d2:	2900      	cmp	r1, #0
   158d4:	d1cd      	bne.n	15872 <IPC_IRQHandler+0x106>
   158d6:	b162      	cbz	r2, 158f2 <IPC_IRQHandler+0x186>
   158d8:	460b      	mov	r3, r1
   158da:	eb0a 01c3 	add.w	r1, sl, r3, lsl #3
   158de:	6888      	ldr	r0, [r1, #8]
   158e0:	3301      	adds	r3, #1
   158e2:	b120      	cbz	r0, 158ee <IPC_IRQHandler+0x182>
   158e4:	6849      	ldr	r1, [r1, #4]
   158e6:	b2c9      	uxtb	r1, r1
   158e8:	2901      	cmp	r1, #1
   158ea:	f43f af76 	beq.w	157da <IPC_IRQHandler+0x6e>
   158ee:	4293      	cmp	r3, r2
   158f0:	d1f3      	bne.n	158da <IPC_IRQHandler+0x16e>
   158f2:	f1bb 0f00 	cmp.w	fp, #0
   158f6:	f47f af70 	bne.w	157da <IPC_IRQHandler+0x6e>
   158fa:	f44f 6180 	mov.w	r1, #1024	; 0x400
   158fe:	4b49      	ldr	r3, [pc, #292]	; (15a24 <IPC_IRQHandler+0x2b8>)
   15900:	4a44      	ldr	r2, [pc, #272]	; (15a14 <IPC_IRQHandler+0x2a8>)
   15902:	681b      	ldr	r3, [r3, #0]
   15904:	015b      	lsls	r3, r3, #5
   15906:	b2db      	uxtb	r3, r3
   15908:	f882 332a 	strb.w	r3, [r2, #810]	; 0x32a
   1590c:	f8c2 1184 	str.w	r1, [r2, #388]	; 0x184
   15910:	6051      	str	r1, [r2, #4]
   15912:	b007      	add	sp, #28
   15914:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15918:	2206      	movs	r2, #6
   1591a:	4b43      	ldr	r3, [pc, #268]	; (15a28 <IPC_IRQHandler+0x2bc>)
   1591c:	601a      	str	r2, [r3, #0]
   1591e:	b007      	add	sp, #28
   15920:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15924:	f7ff fc0c 	bl	15140 <ipc_trace_handle>
   15928:	f7ff fd78 	bl	1541c <rpc_trace_coredump_in_progress>
   1592c:	2800      	cmp	r0, #0
   1592e:	d149      	bne.n	159c4 <IPC_IRQHandler+0x258>
   15930:	4b3e      	ldr	r3, [pc, #248]	; (15a2c <IPC_IRQHandler+0x2c0>)
   15932:	f8c6 011c 	str.w	r0, [r6, #284]	; 0x11c
   15936:	681b      	ldr	r3, [r3, #0]
   15938:	9301      	str	r3, [sp, #4]
   1593a:	9b01      	ldr	r3, [sp, #4]
   1593c:	4b36      	ldr	r3, [pc, #216]	; (15a18 <IPC_IRQHandler+0x2ac>)
   1593e:	f8d3 230c 	ldr.w	r2, [r3, #780]	; 0x30c
   15942:	07d0      	lsls	r0, r2, #31
   15944:	f57f af2c 	bpl.w	157a0 <IPC_IRQHandler+0x34>
   15948:	2000      	movs	r0, #0
   1594a:	f248 0202 	movw	r2, #32770	; 0x8002
   1594e:	4938      	ldr	r1, [pc, #224]	; (15a30 <IPC_IRQHandler+0x2c4>)
   15950:	f8c3 0100 	str.w	r0, [r3, #256]	; 0x100
   15954:	6809      	ldr	r1, [r1, #0]
   15956:	9102      	str	r1, [sp, #8]
   15958:	9902      	ldr	r1, [sp, #8]
   1595a:	f8d3 3614 	ldr.w	r3, [r3, #1556]	; 0x614
   1595e:	4293      	cmp	r3, r2
   15960:	d040      	beq.n	159e4 <IPC_IRQHandler+0x278>
   15962:	d81e      	bhi.n	159a2 <IPC_IRQHandler+0x236>
   15964:	2b00      	cmp	r3, #0
   15966:	d04f      	beq.n	15a08 <IPC_IRQHandler+0x29c>
   15968:	2b02      	cmp	r3, #2
   1596a:	d942      	bls.n	159f2 <IPC_IRQHandler+0x286>
   1596c:	f248 0201 	movw	r2, #32769	; 0x8001
   15970:	4293      	cmp	r3, r2
   15972:	d149      	bne.n	15a08 <IPC_IRQHandler+0x29c>
   15974:	2003      	movs	r0, #3
   15976:	2207      	movs	r2, #7
   15978:	492b      	ldr	r1, [pc, #172]	; (15a28 <IPC_IRQHandler+0x2bc>)
   1597a:	4b2e      	ldr	r3, [pc, #184]	; (15a34 <IPC_IRQHandler+0x2c8>)
   1597c:	6008      	str	r0, [r1, #0]
   1597e:	601a      	str	r2, [r3, #0]
   15980:	e7cd      	b.n	1591e <IPC_IRQHandler+0x1b2>
   15982:	4d29      	ldr	r5, [pc, #164]	; (15a28 <IPC_IRQHandler+0x2bc>)
   15984:	6829      	ldr	r1, [r5, #0]
   15986:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
   1598a:	2901      	cmp	r1, #1
   1598c:	492a      	ldr	r1, [pc, #168]	; (15a38 <IPC_IRQHandler+0x2cc>)
   1598e:	d05d      	beq.n	15a4c <IPC_IRQHandler+0x2e0>
   15990:	680a      	ldr	r2, [r1, #0]
   15992:	9203      	str	r2, [sp, #12]
   15994:	9a03      	ldr	r2, [sp, #12]
   15996:	f8d3 330c 	ldr.w	r3, [r3, #780]	; 0x30c
   1599a:	06db      	lsls	r3, r3, #27
   1599c:	f53f af10 	bmi.w	157c0 <IPC_IRQHandler+0x54>
   159a0:	e716      	b.n	157d0 <IPC_IRQHandler+0x64>
   159a2:	4a26      	ldr	r2, [pc, #152]	; (15a3c <IPC_IRQHandler+0x2d0>)
   159a4:	4293      	cmp	r3, r2
   159a6:	d814      	bhi.n	159d2 <IPC_IRQHandler+0x266>
   159a8:	f1b3 6f88 	cmp.w	r3, #71303168	; 0x4400000
   159ac:	d814      	bhi.n	159d8 <IPC_IRQHandler+0x26c>
   159ae:	f248 0203 	movw	r2, #32771	; 0x8003
   159b2:	4293      	cmp	r3, r2
   159b4:	d128      	bne.n	15a08 <IPC_IRQHandler+0x29c>
   159b6:	2003      	movs	r0, #3
   159b8:	2204      	movs	r2, #4
   159ba:	491b      	ldr	r1, [pc, #108]	; (15a28 <IPC_IRQHandler+0x2bc>)
   159bc:	4b1d      	ldr	r3, [pc, #116]	; (15a34 <IPC_IRQHandler+0x2c8>)
   159be:	6008      	str	r0, [r1, #0]
   159c0:	601a      	str	r2, [r3, #0]
   159c2:	e7ac      	b.n	1591e <IPC_IRQHandler+0x1b2>
   159c4:	23e0      	movs	r3, #224	; 0xe0
   159c6:	f884 332a 	strb.w	r3, [r4, #810]	; 0x32a
   159ca:	6065      	str	r5, [r4, #4]
   159cc:	b007      	add	sp, #28
   159ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   159d2:	4a1b      	ldr	r2, [pc, #108]	; (15a40 <IPC_IRQHandler+0x2d4>)
   159d4:	4293      	cmp	r3, r2
   159d6:	d117      	bne.n	15a08 <IPC_IRQHandler+0x29c>
   159d8:	2003      	movs	r0, #3
   159da:	4913      	ldr	r1, [pc, #76]	; (15a28 <IPC_IRQHandler+0x2bc>)
   159dc:	4a15      	ldr	r2, [pc, #84]	; (15a34 <IPC_IRQHandler+0x2c8>)
   159de:	6008      	str	r0, [r1, #0]
   159e0:	6013      	str	r3, [r2, #0]
   159e2:	e79c      	b.n	1591e <IPC_IRQHandler+0x1b2>
   159e4:	2003      	movs	r0, #3
   159e6:	2206      	movs	r2, #6
   159e8:	490f      	ldr	r1, [pc, #60]	; (15a28 <IPC_IRQHandler+0x2bc>)
   159ea:	4b12      	ldr	r3, [pc, #72]	; (15a34 <IPC_IRQHandler+0x2c8>)
   159ec:	6008      	str	r0, [r1, #0]
   159ee:	601a      	str	r2, [r3, #0]
   159f0:	e795      	b.n	1591e <IPC_IRQHandler+0x1b2>
   159f2:	2303      	movs	r3, #3
   159f4:	4618      	mov	r0, r3
   159f6:	490c      	ldr	r1, [pc, #48]	; (15a28 <IPC_IRQHandler+0x2bc>)
   159f8:	4a0e      	ldr	r2, [pc, #56]	; (15a34 <IPC_IRQHandler+0x2c8>)
   159fa:	600b      	str	r3, [r1, #0]
   159fc:	6013      	str	r3, [r2, #0]
   159fe:	b007      	add	sp, #28
   15a00:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15a04:	f7ff b910 	b.w	14c28 <rpc_transport_ipc_fault_handler>
   15a08:	2303      	movs	r3, #3
   15a0a:	4907      	ldr	r1, [pc, #28]	; (15a28 <IPC_IRQHandler+0x2bc>)
   15a0c:	4a09      	ldr	r2, [pc, #36]	; (15a34 <IPC_IRQHandler+0x2c8>)
   15a0e:	600b      	str	r3, [r1, #0]
   15a10:	6013      	str	r3, [r2, #0]
   15a12:	e784      	b.n	1591e <IPC_IRQHandler+0x1b2>
   15a14:	e000e100 	.word	0xe000e100
   15a18:	4002a000 	.word	0x4002a000
   15a1c:	4002a110 	.word	0x4002a110
   15a20:	2002067c 	.word	0x2002067c
   15a24:	20020674 	.word	0x20020674
   15a28:	20020678 	.word	0x20020678
   15a2c:	4002a11c 	.word	0x4002a11c
   15a30:	4002a100 	.word	0x4002a100
   15a34:	20020670 	.word	0x20020670
   15a38:	4002a108 	.word	0x4002a108
   15a3c:	04400004 	.word	0x04400004
   15a40:	05500001 	.word	0x05500001
   15a44:	20020680 	.word	0x20020680
   15a48:	200214d6 	.word	0x200214d6
   15a4c:	4a37      	ldr	r2, [pc, #220]	; (15b2c <IPC_IRQHandler+0x3c0>)
   15a4e:	680b      	ldr	r3, [r1, #0]
   15a50:	6812      	ldr	r2, [r2, #0]
   15a52:	9305      	str	r3, [sp, #20]
   15a54:	6893      	ldr	r3, [r2, #8]
   15a56:	4836      	ldr	r0, [pc, #216]	; (15b30 <IPC_IRQHandler+0x3c4>)
   15a58:	4936      	ldr	r1, [pc, #216]	; (15b34 <IPC_IRQHandler+0x3c8>)
   15a5a:	6003      	str	r3, [r0, #0]
   15a5c:	6854      	ldr	r4, [r2, #4]
   15a5e:	9a05      	ldr	r2, [sp, #20]
   15a60:	600c      	str	r4, [r1, #0]
   15a62:	b16b      	cbz	r3, 15a80 <IPC_IRQHandler+0x314>
   15a64:	b164      	cbz	r4, 15a80 <IPC_IRQHandler+0x314>
   15a66:	681b      	ldr	r3, [r3, #0]
   15a68:	2b10      	cmp	r3, #16
   15a6a:	d802      	bhi.n	15a72 <IPC_IRQHandler+0x306>
   15a6c:	6822      	ldr	r2, [r4, #0]
   15a6e:	2a10      	cmp	r2, #16
   15a70:	d90c      	bls.n	15a8c <IPC_IRQHandler+0x320>
   15a72:	2103      	movs	r1, #3
   15a74:	f24c 0206 	movw	r2, #49158	; 0xc006
   15a78:	4b2f      	ldr	r3, [pc, #188]	; (15b38 <IPC_IRQHandler+0x3cc>)
   15a7a:	6029      	str	r1, [r5, #0]
   15a7c:	601a      	str	r2, [r3, #0]
   15a7e:	e74e      	b.n	1591e <IPC_IRQHandler+0x1b2>
   15a80:	2103      	movs	r1, #3
   15a82:	2210      	movs	r2, #16
   15a84:	4b2c      	ldr	r3, [pc, #176]	; (15b38 <IPC_IRQHandler+0x3cc>)
   15a86:	6029      	str	r1, [r5, #0]
   15a88:	601a      	str	r2, [r3, #0]
   15a8a:	e748      	b.n	1591e <IPC_IRQHandler+0x1b2>
   15a8c:	f8df 80b4 	ldr.w	r8, [pc, #180]	; 15b44 <IPC_IRQHandler+0x3d8>
   15a90:	2a00      	cmp	r2, #0
   15a92:	d042      	beq.n	15b1a <IPC_IRQHandler+0x3ae>
   15a94:	2300      	movs	r3, #0
   15a96:	f104 0904 	add.w	r9, r4, #4
   15a9a:	461e      	mov	r6, r3
   15a9c:	e002      	b.n	15aa4 <IPC_IRQHandler+0x338>
   15a9e:	3601      	adds	r6, #1
   15aa0:	4296      	cmp	r6, r2
   15aa2:	d22a      	bcs.n	15afa <IPC_IRQHandler+0x38e>
   15aa4:	00f7      	lsls	r7, r6, #3
   15aa6:	19e1      	adds	r1, r4, r7
   15aa8:	6888      	ldr	r0, [r1, #8]
   15aaa:	2800      	cmp	r0, #0
   15aac:	d0f7      	beq.n	15a9e <IPC_IRQHandler+0x332>
   15aae:	f8d1 a004 	ldr.w	sl, [r1, #4]
   15ab2:	fa5f fa8a 	uxtb.w	sl, sl
   15ab6:	f1ba 0f01 	cmp.w	sl, #1
   15aba:	d1f0      	bne.n	15a9e <IPC_IRQHandler+0x332>
   15abc:	f8d1 c004 	ldr.w	ip, [r1, #4]
   15ac0:	f8b8 0000 	ldrh.w	r0, [r8]
   15ac4:	ebb0 4f1c 	cmp.w	r0, ip, lsr #16
   15ac8:	d1e9      	bne.n	15a9e <IPC_IRQHandler+0x332>
   15aca:	684b      	ldr	r3, [r1, #4]
   15acc:	1c42      	adds	r2, r0, #1
   15ace:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
   15ad2:	f043 0302 	orr.w	r3, r3, #2
   15ad6:	604b      	str	r3, [r1, #4]
   15ad8:	6888      	ldr	r0, [r1, #8]
   15ada:	f8a8 2000 	strh.w	r2, [r8]
   15ade:	f7ff fd03 	bl	154e8 <rpc_transport_rx_handle>
   15ae2:	4653      	mov	r3, sl
   15ae4:	b938      	cbnz	r0, 15af6 <IPC_IRQHandler+0x38a>
   15ae6:	f859 2007 	ldr.w	r2, [r9, r7]
   15aea:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
   15aee:	f042 0203 	orr.w	r2, r2, #3
   15af2:	f849 2007 	str.w	r2, [r9, r7]
   15af6:	6822      	ldr	r2, [r4, #0]
   15af8:	e7d1      	b.n	15a9e <IPC_IRQHandler+0x332>
   15afa:	2b00      	cmp	r3, #0
   15afc:	d1c8      	bne.n	15a90 <IPC_IRQHandler+0x324>
   15afe:	b912      	cbnz	r2, 15b06 <IPC_IRQHandler+0x39a>
   15b00:	e00b      	b.n	15b1a <IPC_IRQHandler+0x3ae>
   15b02:	4293      	cmp	r3, r2
   15b04:	d009      	beq.n	15b1a <IPC_IRQHandler+0x3ae>
   15b06:	eb04 01c3 	add.w	r1, r4, r3, lsl #3
   15b0a:	6888      	ldr	r0, [r1, #8]
   15b0c:	3301      	adds	r3, #1
   15b0e:	2800      	cmp	r0, #0
   15b10:	d0f7      	beq.n	15b02 <IPC_IRQHandler+0x396>
   15b12:	6849      	ldr	r1, [r1, #4]
   15b14:	b2c9      	uxtb	r1, r1
   15b16:	2901      	cmp	r1, #1
   15b18:	d1f3      	bne.n	15b02 <IPC_IRQHandler+0x396>
   15b1a:	2002      	movs	r0, #2
   15b1c:	4b07      	ldr	r3, [pc, #28]	; (15b3c <IPC_IRQHandler+0x3d0>)
   15b1e:	f44f 6180 	mov.w	r1, #1024	; 0x400
   15b22:	4a07      	ldr	r2, [pc, #28]	; (15b40 <IPC_IRQHandler+0x3d4>)
   15b24:	681b      	ldr	r3, [r3, #0]
   15b26:	6028      	str	r0, [r5, #0]
   15b28:	e6ec      	b.n	15904 <IPC_IRQHandler+0x198>
   15b2a:	bf00      	nop
   15b2c:	20020684 	.word	0x20020684
   15b30:	20020680 	.word	0x20020680
   15b34:	2002067c 	.word	0x2002067c
   15b38:	20020670 	.word	0x20020670
   15b3c:	20020674 	.word	0x20020674
   15b40:	e000e100 	.word	0xe000e100
   15b44:	200214d6 	.word	0x200214d6

00015b48 <rpc_transport_msg_free>:
   15b48:	b430      	push	{r4, r5}
   15b4a:	4b18      	ldr	r3, [pc, #96]	; (15bac <rpc_transport_msg_free+0x64>)
   15b4c:	681c      	ldr	r4, [r3, #0]
   15b4e:	6825      	ldr	r5, [r4, #0]
   15b50:	b16d      	cbz	r5, 15b6e <rpc_transport_msg_free+0x26>
   15b52:	68a3      	ldr	r3, [r4, #8]
   15b54:	4283      	cmp	r3, r0
   15b56:	d027      	beq.n	15ba8 <rpc_transport_msg_free+0x60>
   15b58:	2300      	movs	r3, #0
   15b5a:	e002      	b.n	15b62 <rpc_transport_msg_free+0x1a>
   15b5c:	6889      	ldr	r1, [r1, #8]
   15b5e:	4281      	cmp	r1, r0
   15b60:	d019      	beq.n	15b96 <rpc_transport_msg_free+0x4e>
   15b62:	3301      	adds	r3, #1
   15b64:	00da      	lsls	r2, r3, #3
   15b66:	42ab      	cmp	r3, r5
   15b68:	eb04 0102 	add.w	r1, r4, r2
   15b6c:	d1f6      	bne.n	15b5c <rpc_transport_msg_free+0x14>
   15b6e:	4b10      	ldr	r3, [pc, #64]	; (15bb0 <rpc_transport_msg_free+0x68>)
   15b70:	681c      	ldr	r4, [r3, #0]
   15b72:	6825      	ldr	r5, [r4, #0]
   15b74:	b16d      	cbz	r5, 15b92 <rpc_transport_msg_free+0x4a>
   15b76:	68a3      	ldr	r3, [r4, #8]
   15b78:	4283      	cmp	r3, r0
   15b7a:	d015      	beq.n	15ba8 <rpc_transport_msg_free+0x60>
   15b7c:	2300      	movs	r3, #0
   15b7e:	e002      	b.n	15b86 <rpc_transport_msg_free+0x3e>
   15b80:	6889      	ldr	r1, [r1, #8]
   15b82:	4281      	cmp	r1, r0
   15b84:	d007      	beq.n	15b96 <rpc_transport_msg_free+0x4e>
   15b86:	3301      	adds	r3, #1
   15b88:	00da      	lsls	r2, r3, #3
   15b8a:	429d      	cmp	r5, r3
   15b8c:	eb04 0102 	add.w	r1, r4, r2
   15b90:	d1f6      	bne.n	15b80 <rpc_transport_msg_free+0x38>
   15b92:	bc30      	pop	{r4, r5}
   15b94:	4770      	bx	lr
   15b96:	3204      	adds	r2, #4
   15b98:	58a3      	ldr	r3, [r4, r2]
   15b9a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
   15b9e:	f043 0303 	orr.w	r3, r3, #3
   15ba2:	50a3      	str	r3, [r4, r2]
   15ba4:	bc30      	pop	{r4, r5}
   15ba6:	4770      	bx	lr
   15ba8:	2204      	movs	r2, #4
   15baa:	e7f5      	b.n	15b98 <rpc_transport_msg_free+0x50>
   15bac:	20020680 	.word	0x20020680
   15bb0:	2002067c 	.word	0x2002067c

00015bb4 <rpc_transport_ipc_tx_init>:
   15bb4:	2800      	cmp	r0, #0
   15bb6:	f000 80b8 	beq.w	15d2a <rpc_transport_ipc_tx_init+0x176>
   15bba:	2900      	cmp	r1, #0
   15bbc:	f000 80b5 	beq.w	15d2a <rpc_transport_ipc_tx_init+0x176>
   15bc0:	2a00      	cmp	r2, #0
   15bc2:	f000 80b2 	beq.w	15d2a <rpc_transport_ipc_tx_init+0x176>
   15bc6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15bca:	6a04      	ldr	r4, [r0, #32]
   15bcc:	b085      	sub	sp, #20
   15bce:	2c00      	cmp	r4, #0
   15bd0:	f000 80a6 	beq.w	15d20 <rpc_transport_ipc_tx_init+0x16c>
   15bd4:	6a40      	ldr	r0, [r0, #36]	; 0x24
   15bd6:	2800      	cmp	r0, #0
   15bd8:	f000 80a2 	beq.w	15d20 <rpc_transport_ipc_tx_init+0x16c>
   15bdc:	f642 4587 	movw	r5, #11399	; 0x2c87
   15be0:	f04f 0a00 	mov.w	sl, #0
   15be4:	4e55      	ldr	r6, [pc, #340]	; (15d3c <rpc_transport_ipc_tx_init+0x188>)
   15be6:	42a8      	cmp	r0, r5
   15be8:	f886 a000 	strb.w	sl, [r6]
   15bec:	f240 80a0 	bls.w	15d30 <rpc_transport_ipc_tx_init+0x17c>
   15bf0:	2708      	movs	r7, #8
   15bf2:	f8df 9180 	ldr.w	r9, [pc, #384]	; 15d74 <rpc_transport_ipc_tx_init+0x1c0>
   15bf6:	4620      	mov	r0, r4
   15bf8:	4616      	mov	r6, r2
   15bfa:	460d      	mov	r5, r1
   15bfc:	2244      	movs	r2, #68	; 0x44
   15bfe:	4651      	mov	r1, sl
   15c00:	f8c9 4000 	str.w	r4, [r9]
   15c04:	f00b fea6 	bl	21954 <memset>
   15c08:	f8d9 2000 	ldr.w	r2, [r9]
   15c0c:	f104 0344 	add.w	r3, r4, #68	; 0x44
   15c10:	f8df 8164 	ldr.w	r8, [pc, #356]	; 15d78 <rpc_transport_ipc_tx_init+0x1c4>
   15c14:	f882 a001 	strb.w	sl, [r2, #1]
   15c18:	f882 a002 	strb.w	sl, [r2, #2]
   15c1c:	f882 a003 	strb.w	sl, [r2, #3]
   15c20:	7017      	strb	r7, [r2, #0]
   15c22:	4618      	mov	r0, r3
   15c24:	2244      	movs	r2, #68	; 0x44
   15c26:	4651      	mov	r1, sl
   15c28:	f8c8 3000 	str.w	r3, [r8]
   15c2c:	f00b fe92 	bl	21954 <memset>
   15c30:	f8d8 2000 	ldr.w	r2, [r8]
   15c34:	f104 0388 	add.w	r3, r4, #136	; 0x88
   15c38:	f8df b140 	ldr.w	fp, [pc, #320]	; 15d7c <rpc_transport_ipc_tx_init+0x1c8>
   15c3c:	7017      	strb	r7, [r2, #0]
   15c3e:	f882 a001 	strb.w	sl, [r2, #1]
   15c42:	f882 a002 	strb.w	sl, [r2, #2]
   15c46:	f882 a003 	strb.w	sl, [r2, #3]
   15c4a:	4618      	mov	r0, r3
   15c4c:	f44f 7200 	mov.w	r2, #512	; 0x200
   15c50:	4651      	mov	r1, sl
   15c52:	f8cb 3000 	str.w	r3, [fp]
   15c56:	f00b fe7d 	bl	21954 <memset>
   15c5a:	4b39      	ldr	r3, [pc, #228]	; (15d40 <rpc_transport_ipc_tx_init+0x18c>)
   15c5c:	f504 7c22 	add.w	ip, r4, #648	; 0x288
   15c60:	f8c3 c000 	str.w	ip, [r3]
   15c64:	4651      	mov	r1, sl
   15c66:	4660      	mov	r0, ip
   15c68:	f44f 7200 	mov.w	r2, #512	; 0x200
   15c6c:	f00b fe72 	bl	21954 <memset>
   15c70:	f44f 5c20 	mov.w	ip, #10240	; 0x2800
   15c74:	2106      	movs	r1, #6
   15c76:	f04f 0e01 	mov.w	lr, #1
   15c7a:	f44f 3001 	mov.w	r0, #132096	; 0x20400
   15c7e:	f44f 3288 	mov.w	r2, #69632	; 0x11000
   15c82:	4b30      	ldr	r3, [pc, #192]	; (15d44 <rpc_transport_ipc_tx_init+0x190>)
   15c84:	f504 6491 	add.w	r4, r4, #1160	; 0x488
   15c88:	605c      	str	r4, [r3, #4]
   15c8a:	4c2f      	ldr	r4, [pc, #188]	; (15d48 <rpc_transport_ipc_tx_init+0x194>)
   15c8c:	f8c3 c008 	str.w	ip, [r3, #8]
   15c90:	8199      	strh	r1, [r3, #12]
   15c92:	f8a3 e000 	strh.w	lr, [r3]
   15c96:	4619      	mov	r1, r3
   15c98:	611c      	str	r4, [r3, #16]
   15c9a:	4b2c      	ldr	r3, [pc, #176]	; (15d4c <rpc_transport_ipc_tx_init+0x198>)
   15c9c:	f8df c0e0 	ldr.w	ip, [pc, #224]	; 15d80 <rpc_transport_ipc_tx_init+0x1cc>
   15ca0:	6120      	str	r0, [r4, #16]
   15ca2:	482b      	ldr	r0, [pc, #172]	; (15d50 <rpc_transport_ipc_tx_init+0x19c>)
   15ca4:	6063      	str	r3, [r4, #4]
   15ca6:	f503 73c0 	add.w	r3, r3, #384	; 0x180
   15caa:	60a0      	str	r0, [r4, #8]
   15cac:	f8c4 c000 	str.w	ip, [r4]
   15cb0:	4828      	ldr	r0, [pc, #160]	; (15d54 <rpc_transport_ipc_tx_init+0x1a0>)
   15cb2:	60e3      	str	r3, [r4, #12]
   15cb4:	6162      	str	r2, [r4, #20]
   15cb6:	f7fd fe5b 	bl	13970 <nrf_mem_register>
   15cba:	2800      	cmp	r0, #0
   15cbc:	d132      	bne.n	15d24 <rpc_transport_ipc_tx_init+0x170>
   15cbe:	f04f 0c02 	mov.w	ip, #2
   15cc2:	2420      	movs	r4, #32
   15cc4:	f8d9 1000 	ldr.w	r1, [r9]
   15cc8:	f8db 2000 	ldr.w	r2, [fp]
   15ccc:	6029      	str	r1, [r5, #0]
   15cce:	4b1c      	ldr	r3, [pc, #112]	; (15d40 <rpc_transport_ipc_tx_init+0x18c>)
   15cd0:	f8d8 1000 	ldr.w	r1, [r8]
   15cd4:	f8df e0ac 	ldr.w	lr, [pc, #172]	; 15d84 <rpc_transport_ipc_tx_init+0x1d0>
   15cd8:	4d1f      	ldr	r5, [pc, #124]	; (15d58 <rpc_transport_ipc_tx_init+0x1a4>)
   15cda:	6031      	str	r1, [r6, #0]
   15cdc:	f8ce 2000 	str.w	r2, [lr]
   15ce0:	681b      	ldr	r3, [r3, #0]
   15ce2:	491e      	ldr	r1, [pc, #120]	; (15d5c <rpc_transport_ipc_tx_init+0x1a8>)
   15ce4:	f502 7200 	add.w	r2, r2, #512	; 0x200
   15ce8:	602a      	str	r2, [r5, #0]
   15cea:	4e1d      	ldr	r6, [pc, #116]	; (15d60 <rpc_transport_ipc_tx_init+0x1ac>)
   15cec:	4a1d      	ldr	r2, [pc, #116]	; (15d64 <rpc_transport_ipc_tx_init+0x1b0>)
   15cee:	4d1e      	ldr	r5, [pc, #120]	; (15d68 <rpc_transport_ipc_tx_init+0x1b4>)
   15cf0:	600b      	str	r3, [r1, #0]
   15cf2:	f503 7300 	add.w	r3, r3, #512	; 0x200
   15cf6:	491d      	ldr	r1, [pc, #116]	; (15d6c <rpc_transport_ipc_tx_init+0x1b8>)
   15cf8:	6033      	str	r3, [r6, #0]
   15cfa:	8028      	strh	r0, [r5, #0]
   15cfc:	f8c2 c514 	str.w	ip, [r2, #1300]	; 0x514
   15d00:	6809      	ldr	r1, [r1, #0]
   15d02:	4b1b      	ldr	r3, [pc, #108]	; (15d70 <rpc_transport_ipc_tx_init+0x1bc>)
   15d04:	9103      	str	r1, [sp, #12]
   15d06:	9903      	ldr	r1, [sp, #12]
   15d08:	f8c2 751c 	str.w	r7, [r2, #1308]	; 0x51c
   15d0c:	6819      	ldr	r1, [r3, #0]
   15d0e:	443b      	add	r3, r7
   15d10:	9102      	str	r1, [sp, #8]
   15d12:	9902      	ldr	r1, [sp, #8]
   15d14:	f8c2 4524 	str.w	r4, [r2, #1316]	; 0x524
   15d18:	681b      	ldr	r3, [r3, #0]
   15d1a:	9301      	str	r3, [sp, #4]
   15d1c:	9b01      	ldr	r3, [sp, #4]
   15d1e:	e001      	b.n	15d24 <rpc_transport_ipc_tx_init+0x170>
   15d20:	f24c 0007 	movw	r0, #49159	; 0xc007
   15d24:	b005      	add	sp, #20
   15d26:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15d2a:	f24c 000e 	movw	r0, #49166	; 0xc00e
   15d2e:	4770      	bx	lr
   15d30:	f24c 0004 	movw	r0, #49156	; 0xc004
   15d34:	b005      	add	sp, #20
   15d36:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15d3a:	bf00      	nop
   15d3c:	2002268d 	.word	0x2002268d
   15d40:	200206b0 	.word	0x200206b0
   15d44:	2002069c 	.word	0x2002069c
   15d48:	200206c0 	.word	0x200206c0
   15d4c:	00040080 	.word	0x00040080
   15d50:	00040100 	.word	0x00040100
   15d54:	20020688 	.word	0x20020688
   15d58:	20020694 	.word	0x20020694
   15d5c:	20020690 	.word	0x20020690
   15d60:	2002068c 	.word	0x2002068c
   15d64:	4002a000 	.word	0x4002a000
   15d68:	200214d8 	.word	0x200214d8
   15d6c:	4002a514 	.word	0x4002a514
   15d70:	4002a51c 	.word	0x4002a51c
   15d74:	200206bc 	.word	0x200206bc
   15d78:	200206b4 	.word	0x200206b4
   15d7c:	200206b8 	.word	0x200206b8
   15d80:	00080040 	.word	0x00080040
   15d84:	20020698 	.word	0x20020698

00015d88 <rpc_transport_ipc_tx_send>:
   15d88:	2800      	cmp	r0, #0
   15d8a:	d05f      	beq.n	15e4c <rpc_transport_ipc_tx_send+0xc4>
   15d8c:	b470      	push	{r4, r5, r6}
   15d8e:	4b33      	ldr	r3, [pc, #204]	; (15e5c <rpc_transport_ipc_tx_send+0xd4>)
   15d90:	b083      	sub	sp, #12
   15d92:	681a      	ldr	r2, [r3, #0]
   15d94:	4b32      	ldr	r3, [pc, #200]	; (15e60 <rpc_transport_ipc_tx_send+0xd8>)
   15d96:	4282      	cmp	r2, r0
   15d98:	d81e      	bhi.n	15dd8 <rpc_transport_ipc_tx_send+0x50>
   15d9a:	681b      	ldr	r3, [r3, #0]
   15d9c:	4931      	ldr	r1, [pc, #196]	; (15e64 <rpc_transport_ipc_tx_send+0xdc>)
   15d9e:	4283      	cmp	r3, r0
   15da0:	6809      	ldr	r1, [r1, #0]
   15da2:	d803      	bhi.n	15dac <rpc_transport_ipc_tx_send+0x24>
   15da4:	4c30      	ldr	r4, [pc, #192]	; (15e68 <rpc_transport_ipc_tx_send+0xe0>)
   15da6:	6824      	ldr	r4, [r4, #0]
   15da8:	4284      	cmp	r4, r0
   15daa:	d847      	bhi.n	15e3c <rpc_transport_ipc_tx_send+0xb4>
   15dac:	4281      	cmp	r1, r0
   15dae:	d90e      	bls.n	15dce <rpc_transport_ipc_tx_send+0x46>
   15db0:	4b2e      	ldr	r3, [pc, #184]	; (15e6c <rpc_transport_ipc_tx_send+0xe4>)
   15db2:	781b      	ldrb	r3, [r3, #0]
   15db4:	2b00      	cmp	r3, #0
   15db6:	d14c      	bne.n	15e52 <rpc_transport_ipc_tx_send+0xca>
   15db8:	1a83      	subs	r3, r0, r2
   15dba:	492d      	ldr	r1, [pc, #180]	; (15e70 <rpc_transport_ipc_tx_send+0xe8>)
   15dbc:	099e      	lsrs	r6, r3, #6
   15dbe:	069b      	lsls	r3, r3, #26
   15dc0:	680a      	ldr	r2, [r1, #0]
   15dc2:	4c2c      	ldr	r4, [pc, #176]	; (15e74 <rpc_transport_ipc_tx_send+0xec>)
   15dc4:	f04f 0103 	mov.w	r1, #3
   15dc8:	f04f 0502 	mov.w	r5, #2
   15dcc:	d014      	beq.n	15df8 <rpc_transport_ipc_tx_send+0x70>
   15dce:	f24c 0010 	movw	r0, #49168	; 0xc010
   15dd2:	b003      	add	sp, #12
   15dd4:	bc70      	pop	{r4, r5, r6}
   15dd6:	4770      	bx	lr
   15dd8:	681b      	ldr	r3, [r3, #0]
   15dda:	4298      	cmp	r0, r3
   15ddc:	d3f7      	bcc.n	15dce <rpc_transport_ipc_tx_send+0x46>
   15dde:	4a22      	ldr	r2, [pc, #136]	; (15e68 <rpc_transport_ipc_tx_send+0xe0>)
   15de0:	6812      	ldr	r2, [r2, #0]
   15de2:	4290      	cmp	r0, r2
   15de4:	d2f3      	bcs.n	15dce <rpc_transport_ipc_tx_send+0x46>
   15de6:	2101      	movs	r1, #1
   15de8:	1ac3      	subs	r3, r0, r3
   15dea:	4a23      	ldr	r2, [pc, #140]	; (15e78 <rpc_transport_ipc_tx_send+0xf0>)
   15dec:	099e      	lsrs	r6, r3, #6
   15dee:	069b      	lsls	r3, r3, #26
   15df0:	460d      	mov	r5, r1
   15df2:	6812      	ldr	r2, [r2, #0]
   15df4:	4c21      	ldr	r4, [pc, #132]	; (15e7c <rpc_transport_ipc_tx_send+0xf4>)
   15df6:	d1ea      	bne.n	15dce <rpc_transport_ipc_tx_send+0x46>
   15df8:	6843      	ldr	r3, [r0, #4]
   15dfa:	b2db      	uxtb	r3, r3
   15dfc:	429d      	cmp	r5, r3
   15dfe:	d120      	bne.n	15e42 <rpc_transport_ipc_tx_send+0xba>
   15e00:	2020      	movs	r0, #32
   15e02:	eb02 02c6 	add.w	r2, r2, r6, lsl #3
   15e06:	4d1e      	ldr	r5, [pc, #120]	; (15e80 <rpc_transport_ipc_tx_send+0xf8>)
   15e08:	6853      	ldr	r3, [r2, #4]
   15e0a:	882e      	ldrh	r6, [r5, #0]
   15e0c:	b29b      	uxth	r3, r3
   15e0e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
   15e12:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
   15e16:	f043 0301 	orr.w	r3, r3, #1
   15e1a:	6053      	str	r3, [r2, #4]
   15e1c:	bf00      	nop
   15e1e:	3801      	subs	r0, #1
   15e20:	d1fc      	bne.n	15e1c <rpc_transport_ipc_tx_send+0x94>
   15e22:	2201      	movs	r2, #1
   15e24:	4b17      	ldr	r3, [pc, #92]	; (15e84 <rpc_transport_ipc_tx_send+0xfc>)
   15e26:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
   15e2a:	6822      	ldr	r2, [r4, #0]
   15e2c:	882b      	ldrh	r3, [r5, #0]
   15e2e:	9201      	str	r2, [sp, #4]
   15e30:	9a01      	ldr	r2, [sp, #4]
   15e32:	3301      	adds	r3, #1
   15e34:	802b      	strh	r3, [r5, #0]
   15e36:	b003      	add	sp, #12
   15e38:	bc70      	pop	{r4, r5, r6}
   15e3a:	4770      	bx	lr
   15e3c:	4281      	cmp	r1, r0
   15e3e:	d9d2      	bls.n	15de6 <rpc_transport_ipc_tx_send+0x5e>
   15e40:	e7b6      	b.n	15db0 <rpc_transport_ipc_tx_send+0x28>
   15e42:	f24c 0007 	movw	r0, #49159	; 0xc007
   15e46:	b003      	add	sp, #12
   15e48:	bc70      	pop	{r4, r5, r6}
   15e4a:	4770      	bx	lr
   15e4c:	f24c 000e 	movw	r0, #49166	; 0xc00e
   15e50:	4770      	bx	lr
   15e52:	f24c 000f 	movw	r0, #49167	; 0xc00f
   15e56:	b003      	add	sp, #12
   15e58:	bc70      	pop	{r4, r5, r6}
   15e5a:	4770      	bx	lr
   15e5c:	20020698 	.word	0x20020698
   15e60:	20020690 	.word	0x20020690
   15e64:	20020694 	.word	0x20020694
   15e68:	2002068c 	.word	0x2002068c
   15e6c:	2002268d 	.word	0x2002268d
   15e70:	200206bc 	.word	0x200206bc
   15e74:	4002a00c 	.word	0x4002a00c
   15e78:	200206b4 	.word	0x200206b4
   15e7c:	4002a004 	.word	0x4002a004
   15e80:	200214d8 	.word	0x200214d8
   15e84:	4002a000 	.word	0x4002a000

00015e88 <rpc_transport_ipc_tx_rpc_data_alloc>:
   15e88:	4b18      	ldr	r3, [pc, #96]	; (15eec <rpc_transport_ipc_tx_rpc_data_alloc+0x64>)
   15e8a:	781b      	ldrb	r3, [r3, #0]
   15e8c:	bb63      	cbnz	r3, 15ee8 <rpc_transport_ipc_tx_rpc_data_alloc+0x60>
   15e8e:	b4f0      	push	{r4, r5, r6, r7}
   15e90:	4a17      	ldr	r2, [pc, #92]	; (15ef0 <rpc_transport_ipc_tx_rpc_data_alloc+0x68>)
   15e92:	f003 00ff 	and.w	r0, r3, #255	; 0xff
   15e96:	6814      	ldr	r4, [r2, #0]
   15e98:	4b16      	ldr	r3, [pc, #88]	; (15ef4 <rpc_transport_ipc_tx_rpc_data_alloc+0x6c>)
   15e9a:	6825      	ldr	r5, [r4, #0]
   15e9c:	681e      	ldr	r6, [r3, #0]
   15e9e:	b1a5      	cbz	r5, 15eca <rpc_transport_ipc_tx_rpc_data_alloc+0x42>
   15ea0:	4607      	mov	r7, r0
   15ea2:	00c1      	lsls	r1, r0, #3
   15ea4:	1863      	adds	r3, r4, r1
   15ea6:	685a      	ldr	r2, [r3, #4]
   15ea8:	b2d2      	uxtb	r2, r2
   15eaa:	2a03      	cmp	r2, #3
   15eac:	d104      	bne.n	15eb8 <rpc_transport_ipc_tx_rpc_data_alloc+0x30>
   15eae:	609f      	str	r7, [r3, #8]
   15eb0:	685a      	ldr	r2, [r3, #4]
   15eb2:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
   15eb6:	605a      	str	r2, [r3, #4]
   15eb8:	685a      	ldr	r2, [r3, #4]
   15eba:	f012 0fff 	tst.w	r2, #255	; 0xff
   15ebe:	d101      	bne.n	15ec4 <rpc_transport_ipc_tx_rpc_data_alloc+0x3c>
   15ec0:	689b      	ldr	r3, [r3, #8]
   15ec2:	b12b      	cbz	r3, 15ed0 <rpc_transport_ipc_tx_rpc_data_alloc+0x48>
   15ec4:	3001      	adds	r0, #1
   15ec6:	42a8      	cmp	r0, r5
   15ec8:	d1eb      	bne.n	15ea2 <rpc_transport_ipc_tx_rpc_data_alloc+0x1a>
   15eca:	2000      	movs	r0, #0
   15ecc:	bcf0      	pop	{r4, r5, r6, r7}
   15ece:	4770      	bx	lr
   15ed0:	eb06 1080 	add.w	r0, r6, r0, lsl #6
   15ed4:	4421      	add	r1, r4
   15ed6:	6088      	str	r0, [r1, #8]
   15ed8:	6843      	ldr	r3, [r0, #4]
   15eda:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
   15ede:	f043 0302 	orr.w	r3, r3, #2
   15ee2:	6043      	str	r3, [r0, #4]
   15ee4:	bcf0      	pop	{r4, r5, r6, r7}
   15ee6:	4770      	bx	lr
   15ee8:	2000      	movs	r0, #0
   15eea:	4770      	bx	lr
   15eec:	2002268d 	.word	0x2002268d
   15ef0:	200206bc 	.word	0x200206bc
   15ef4:	200206b8 	.word	0x200206b8

00015ef8 <rpc_transport_ipc_tx_rpc_ctrl_alloc>:
   15ef8:	b4f0      	push	{r4, r5, r6, r7}
   15efa:	4a15      	ldr	r2, [pc, #84]	; (15f50 <rpc_transport_ipc_tx_rpc_ctrl_alloc+0x58>)
   15efc:	4b15      	ldr	r3, [pc, #84]	; (15f54 <rpc_transport_ipc_tx_rpc_ctrl_alloc+0x5c>)
   15efe:	6814      	ldr	r4, [r2, #0]
   15f00:	681e      	ldr	r6, [r3, #0]
   15f02:	6825      	ldr	r5, [r4, #0]
   15f04:	b1ad      	cbz	r5, 15f32 <rpc_transport_ipc_tx_rpc_ctrl_alloc+0x3a>
   15f06:	2000      	movs	r0, #0
   15f08:	4607      	mov	r7, r0
   15f0a:	00c1      	lsls	r1, r0, #3
   15f0c:	1863      	adds	r3, r4, r1
   15f0e:	685a      	ldr	r2, [r3, #4]
   15f10:	b2d2      	uxtb	r2, r2
   15f12:	2a03      	cmp	r2, #3
   15f14:	d104      	bne.n	15f20 <rpc_transport_ipc_tx_rpc_ctrl_alloc+0x28>
   15f16:	609f      	str	r7, [r3, #8]
   15f18:	685a      	ldr	r2, [r3, #4]
   15f1a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
   15f1e:	605a      	str	r2, [r3, #4]
   15f20:	685a      	ldr	r2, [r3, #4]
   15f22:	f012 0fff 	tst.w	r2, #255	; 0xff
   15f26:	d101      	bne.n	15f2c <rpc_transport_ipc_tx_rpc_ctrl_alloc+0x34>
   15f28:	689b      	ldr	r3, [r3, #8]
   15f2a:	b12b      	cbz	r3, 15f38 <rpc_transport_ipc_tx_rpc_ctrl_alloc+0x40>
   15f2c:	3001      	adds	r0, #1
   15f2e:	4285      	cmp	r5, r0
   15f30:	d1eb      	bne.n	15f0a <rpc_transport_ipc_tx_rpc_ctrl_alloc+0x12>
   15f32:	2000      	movs	r0, #0
   15f34:	bcf0      	pop	{r4, r5, r6, r7}
   15f36:	4770      	bx	lr
   15f38:	eb06 1080 	add.w	r0, r6, r0, lsl #6
   15f3c:	4421      	add	r1, r4
   15f3e:	6088      	str	r0, [r1, #8]
   15f40:	6843      	ldr	r3, [r0, #4]
   15f42:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
   15f46:	f043 0301 	orr.w	r3, r3, #1
   15f4a:	6043      	str	r3, [r0, #4]
   15f4c:	bcf0      	pop	{r4, r5, r6, r7}
   15f4e:	4770      	bx	lr
   15f50:	200206b4 	.word	0x200206b4
   15f54:	200206b0 	.word	0x200206b0

00015f58 <rpc_transport_ipc_tx_data_alloc>:
   15f58:	4b03      	ldr	r3, [pc, #12]	; (15f68 <rpc_transport_ipc_tx_data_alloc+0x10>)
   15f5a:	781b      	ldrb	r3, [r3, #0]
   15f5c:	b90b      	cbnz	r3, 15f62 <rpc_transport_ipc_tx_data_alloc+0xa>
   15f5e:	f7fd be37 	b.w	13bd0 <nrf_shared_malloc>
   15f62:	2000      	movs	r0, #0
   15f64:	4770      	bx	lr
   15f66:	bf00      	nop
   15f68:	2002268d 	.word	0x2002268d

00015f6c <ok_rsp_parser>:
   15f6c:	2000      	movs	r0, #0
   15f6e:	4770      	bx	lr

00015f70 <pdn_state_get_parser>:
   15f70:	2200      	movs	r2, #0
   15f72:	b570      	push	{r4, r5, r6, lr}
   15f74:	780b      	ldrb	r3, [r1, #0]
   15f76:	b084      	sub	sp, #16
   15f78:	460e      	mov	r6, r1
   15f7a:	e9cd 2200 	strd	r2, r2, [sp]
   15f7e:	e9cd 2202 	strd	r2, r2, [sp, #8]
   15f82:	b323      	cbz	r3, 15fce <pdn_state_get_parser+0x5e>
   15f84:	460c      	mov	r4, r1
   15f86:	2b20      	cmp	r3, #32
   15f88:	460d      	mov	r5, r1
   15f8a:	d01b      	beq.n	15fc4 <pdn_state_get_parser+0x54>
   15f8c:	700b      	strb	r3, [r1, #0]
   15f8e:	3201      	adds	r2, #1
   15f90:	f814 3f01 	ldrb.w	r3, [r4, #1]!
   15f94:	18b1      	adds	r1, r6, r2
   15f96:	460d      	mov	r5, r1
   15f98:	2b00      	cmp	r3, #0
   15f9a:	d1f4      	bne.n	15f86 <pdn_state_get_parser+0x16>
   15f9c:	2200      	movs	r2, #0
   15f9e:	4b0d      	ldr	r3, [pc, #52]	; (15fd4 <pdn_state_get_parser+0x64>)
   15fa0:	702a      	strb	r2, [r5, #0]
   15fa2:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
   15fa6:	4a0c      	ldr	r2, [pc, #48]	; (15fd8 <pdn_state_get_parser+0x68>)
   15fa8:	681b      	ldr	r3, [r3, #0]
   15faa:	2110      	movs	r1, #16
   15fac:	4668      	mov	r0, sp
   15fae:	f008 fdd7 	bl	1eb60 <sniprintf>
   15fb2:	4669      	mov	r1, sp
   15fb4:	4630      	mov	r0, r6
   15fb6:	f00b fe3f 	bl	21c38 <strstr>
   15fba:	3000      	adds	r0, #0
   15fbc:	bf18      	it	ne
   15fbe:	2001      	movne	r0, #1
   15fc0:	b004      	add	sp, #16
   15fc2:	bd70      	pop	{r4, r5, r6, pc}
   15fc4:	f814 3f01 	ldrb.w	r3, [r4, #1]!
   15fc8:	2b00      	cmp	r3, #0
   15fca:	d1dc      	bne.n	15f86 <pdn_state_get_parser+0x16>
   15fcc:	e7e6      	b.n	15f9c <pdn_state_get_parser+0x2c>
   15fce:	460d      	mov	r5, r1
   15fd0:	e7e4      	b.n	15f9c <pdn_state_get_parser+0x2c>
   15fd2:	bf00      	nop
   15fd4:	200207dc 	.word	0x200207dc
   15fd8:	00022eb4 	.word	0x00022eb4

00015fdc <pdn_id_get_parser>:
   15fdc:	b570      	push	{r4, r5, r6, lr}
   15fde:	780b      	ldrb	r3, [r1, #0]
   15fe0:	4606      	mov	r6, r0
   15fe2:	b313      	cbz	r3, 1602a <pdn_id_get_parser+0x4e>
   15fe4:	4608      	mov	r0, r1
   15fe6:	2400      	movs	r4, #0
   15fe8:	460a      	mov	r2, r1
   15fea:	2b20      	cmp	r3, #32
   15fec:	4615      	mov	r5, r2
   15fee:	d017      	beq.n	16020 <pdn_id_get_parser+0x44>
   15ff0:	7013      	strb	r3, [r2, #0]
   15ff2:	3401      	adds	r4, #1
   15ff4:	f810 3f01 	ldrb.w	r3, [r0, #1]!
   15ff8:	190a      	adds	r2, r1, r4
   15ffa:	4615      	mov	r5, r2
   15ffc:	2b00      	cmp	r3, #0
   15ffe:	d1f4      	bne.n	15fea <pdn_id_get_parser+0xe>
   16000:	2300      	movs	r3, #0
   16002:	4608      	mov	r0, r1
   16004:	702b      	strb	r3, [r5, #0]
   16006:	213a      	movs	r1, #58	; 0x3a
   16008:	f00b fdf7 	bl	21bfa <strchr>
   1600c:	b130      	cbz	r0, 1601c <pdn_id_get_parser+0x40>
   1600e:	3001      	adds	r0, #1
   16010:	f00b fc73 	bl	218fa <atoi>
   16014:	4b06      	ldr	r3, [pc, #24]	; (16030 <pdn_id_get_parser+0x54>)
   16016:	f853 3026 	ldr.w	r3, [r3, r6, lsl #2]
   1601a:	6058      	str	r0, [r3, #4]
   1601c:	2000      	movs	r0, #0
   1601e:	bd70      	pop	{r4, r5, r6, pc}
   16020:	f810 3f01 	ldrb.w	r3, [r0, #1]!
   16024:	2b00      	cmp	r3, #0
   16026:	d1e0      	bne.n	15fea <pdn_id_get_parser+0xe>
   16028:	e7ea      	b.n	16000 <pdn_id_get_parser+0x24>
   1602a:	460d      	mov	r5, r1
   1602c:	e7e8      	b.n	16000 <pdn_id_get_parser+0x24>
   1602e:	bf00      	nop
   16030:	200207dc 	.word	0x200207dc

00016034 <context_create_parser>:
   16034:	b570      	push	{r4, r5, r6, lr}
   16036:	780b      	ldrb	r3, [r1, #0]
   16038:	4606      	mov	r6, r0
   1603a:	b313      	cbz	r3, 16082 <context_create_parser+0x4e>
   1603c:	4608      	mov	r0, r1
   1603e:	2400      	movs	r4, #0
   16040:	460a      	mov	r2, r1
   16042:	2b20      	cmp	r3, #32
   16044:	4615      	mov	r5, r2
   16046:	d017      	beq.n	16078 <context_create_parser+0x44>
   16048:	7013      	strb	r3, [r2, #0]
   1604a:	3401      	adds	r4, #1
   1604c:	f810 3f01 	ldrb.w	r3, [r0, #1]!
   16050:	190a      	adds	r2, r1, r4
   16052:	4615      	mov	r5, r2
   16054:	2b00      	cmp	r3, #0
   16056:	d1f4      	bne.n	16042 <context_create_parser+0xe>
   16058:	2300      	movs	r3, #0
   1605a:	4608      	mov	r0, r1
   1605c:	702b      	strb	r3, [r5, #0]
   1605e:	213a      	movs	r1, #58	; 0x3a
   16060:	f00b fdcb 	bl	21bfa <strchr>
   16064:	b130      	cbz	r0, 16074 <context_create_parser+0x40>
   16066:	4b08      	ldr	r3, [pc, #32]	; (16088 <context_create_parser+0x54>)
   16068:	3001      	adds	r0, #1
   1606a:	f853 4026 	ldr.w	r4, [r3, r6, lsl #2]
   1606e:	f00b fc44 	bl	218fa <atoi>
   16072:	6020      	str	r0, [r4, #0]
   16074:	2000      	movs	r0, #0
   16076:	bd70      	pop	{r4, r5, r6, pc}
   16078:	f810 3f01 	ldrb.w	r3, [r0, #1]!
   1607c:	2b00      	cmp	r3, #0
   1607e:	d1e0      	bne.n	16042 <context_create_parser+0xe>
   16080:	e7ea      	b.n	16058 <context_create_parser+0x24>
   16082:	460d      	mov	r5, r1
   16084:	e7e8      	b.n	16058 <context_create_parser+0x24>
   16086:	bf00      	nop
   16088:	200207dc 	.word	0x200207dc

0001608c <pdn_interface_init>:
   1608c:	f04f 33ff 	mov.w	r3, #4294967295
   16090:	b510      	push	{r4, lr}
   16092:	4c09      	ldr	r4, [pc, #36]	; (160b8 <pdn_interface_init+0x2c>)
   16094:	2228      	movs	r2, #40	; 0x28
   16096:	2100      	movs	r1, #0
   16098:	4808      	ldr	r0, [pc, #32]	; (160bc <pdn_interface_init+0x30>)
   1609a:	6023      	str	r3, [r4, #0]
   1609c:	f00b fc5a 	bl	21954 <memset>
   160a0:	f240 2201 	movw	r2, #513	; 0x201
   160a4:	2102      	movs	r1, #2
   160a6:	2066      	movs	r0, #102	; 0x66
   160a8:	f7fd f83a 	bl	13120 <at_interface_open>
   160ac:	2800      	cmp	r0, #0
   160ae:	6020      	str	r0, [r4, #0]
   160b0:	bfb4      	ite	lt
   160b2:	2003      	movlt	r0, #3
   160b4:	2000      	movge	r0, #0
   160b6:	bd10      	pop	{r4, pc}
   160b8:	200206d8 	.word	0x200206d8
   160bc:	200207dc 	.word	0x200207dc

000160c0 <pdn_interface_open>:
   160c0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   160c4:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
   160c8:	b083      	sub	sp, #12
   160ca:	f040 80ad 	bne.w	16228 <pdn_interface_open+0x168>
   160ce:	4c5f      	ldr	r4, [pc, #380]	; (1624c <pdn_interface_open+0x18c>)
   160d0:	6825      	ldr	r5, [r4, #0]
   160d2:	b34d      	cbz	r5, 16128 <pdn_interface_open+0x68>
   160d4:	6863      	ldr	r3, [r4, #4]
   160d6:	2b00      	cmp	r3, #0
   160d8:	f000 8098 	beq.w	1620c <pdn_interface_open+0x14c>
   160dc:	68a3      	ldr	r3, [r4, #8]
   160de:	2b00      	cmp	r3, #0
   160e0:	f000 8096 	beq.w	16210 <pdn_interface_open+0x150>
   160e4:	68e3      	ldr	r3, [r4, #12]
   160e6:	2b00      	cmp	r3, #0
   160e8:	f000 8094 	beq.w	16214 <pdn_interface_open+0x154>
   160ec:	6923      	ldr	r3, [r4, #16]
   160ee:	2b00      	cmp	r3, #0
   160f0:	f000 8092 	beq.w	16218 <pdn_interface_open+0x158>
   160f4:	6963      	ldr	r3, [r4, #20]
   160f6:	2b00      	cmp	r3, #0
   160f8:	f000 8090 	beq.w	1621c <pdn_interface_open+0x15c>
   160fc:	69a3      	ldr	r3, [r4, #24]
   160fe:	2b00      	cmp	r3, #0
   16100:	f000 808e 	beq.w	16220 <pdn_interface_open+0x160>
   16104:	69e3      	ldr	r3, [r4, #28]
   16106:	2b00      	cmp	r3, #0
   16108:	f000 808c 	beq.w	16224 <pdn_interface_open+0x164>
   1610c:	6a23      	ldr	r3, [r4, #32]
   1610e:	b153      	cbz	r3, 16126 <pdn_interface_open+0x66>
   16110:	6a63      	ldr	r3, [r4, #36]	; 0x24
   16112:	2509      	movs	r5, #9
   16114:	b143      	cbz	r3, 16128 <pdn_interface_open+0x68>
   16116:	200c      	movs	r0, #12
   16118:	f7fa ffa0 	bl	1105c <bsd_os_errno_set>
   1611c:	f04f 30ff 	mov.w	r0, #4294967295
   16120:	b003      	add	sp, #12
   16122:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   16126:	2508      	movs	r5, #8
   16128:	2074      	movs	r0, #116	; 0x74
   1612a:	f7fd fd3b 	bl	13ba4 <nrf_malloc>
   1612e:	f844 0025 	str.w	r0, [r4, r5, lsl #2]
   16132:	2800      	cmp	r0, #0
   16134:	d0ef      	beq.n	16116 <pdn_interface_open+0x56>
   16136:	2274      	movs	r2, #116	; 0x74
   16138:	2100      	movs	r1, #0
   1613a:	f00b fc0b 	bl	21954 <memset>
   1613e:	2101      	movs	r1, #1
   16140:	2003      	movs	r0, #3
   16142:	f04f 37ff 	mov.w	r7, #4294967295
   16146:	f854 3025 	ldr.w	r3, [r4, r5, lsl #2]
   1614a:	4a41      	ldr	r2, [pc, #260]	; (16250 <pdn_interface_open+0x190>)
   1614c:	6099      	str	r1, [r3, #8]
   1614e:	f854 3025 	ldr.w	r3, [r4, r5, lsl #2]
   16152:	f44f 7180 	mov.w	r1, #256	; 0x100
   16156:	6718      	str	r0, [r3, #112]	; 0x70
   16158:	605f      	str	r7, [r3, #4]
   1615a:	483e      	ldr	r0, [pc, #248]	; (16254 <pdn_interface_open+0x194>)
   1615c:	f8df 8100 	ldr.w	r8, [pc, #256]	; 16260 <pdn_interface_open+0x1a0>
   16160:	f008 fcfe 	bl	1eb60 <sniprintf>
   16164:	483b      	ldr	r0, [pc, #236]	; (16254 <pdn_interface_open+0x194>)
   16166:	f8d8 9000 	ldr.w	r9, [r8]
   1616a:	2600      	movs	r6, #0
   1616c:	f7f6 fe84 	bl	ce78 <strlen>
   16170:	4633      	mov	r3, r6
   16172:	4602      	mov	r2, r0
   16174:	4937      	ldr	r1, [pc, #220]	; (16254 <pdn_interface_open+0x194>)
   16176:	4648      	mov	r0, r9
   16178:	9601      	str	r6, [sp, #4]
   1617a:	9600      	str	r6, [sp, #0]
   1617c:	f7fc ff62 	bl	13044 <at_interface_write>
   16180:	4681      	mov	r9, r0
   16182:	4834      	ldr	r0, [pc, #208]	; (16254 <pdn_interface_open+0x194>)
   16184:	f7f6 fe78 	bl	ce78 <strlen>
   16188:	4548      	cmp	r0, r9
   1618a:	d153      	bne.n	16234 <pdn_interface_open+0x174>
   1618c:	4633      	mov	r3, r6
   1618e:	e9cd 6600 	strd	r6, r6, [sp]
   16192:	f44f 7280 	mov.w	r2, #256	; 0x100
   16196:	492f      	ldr	r1, [pc, #188]	; (16254 <pdn_interface_open+0x194>)
   16198:	f8d8 0000 	ldr.w	r0, [r8]
   1619c:	f7fd f856 	bl	1324c <at_interface_read>
   161a0:	4606      	mov	r6, r0
   161a2:	482d      	ldr	r0, [pc, #180]	; (16258 <pdn_interface_open+0x198>)
   161a4:	f7f6 fe68 	bl	ce78 <strlen>
   161a8:	4286      	cmp	r6, r0
   161aa:	db15      	blt.n	161d8 <pdn_interface_open+0x118>
   161ac:	4602      	mov	r2, r0
   161ae:	4929      	ldr	r1, [pc, #164]	; (16254 <pdn_interface_open+0x194>)
   161b0:	4829      	ldr	r0, [pc, #164]	; (16258 <pdn_interface_open+0x198>)
   161b2:	f00b fd2f 	bl	21c14 <strncmp>
   161b6:	b978      	cbnz	r0, 161d8 <pdn_interface_open+0x118>
   161b8:	4926      	ldr	r1, [pc, #152]	; (16254 <pdn_interface_open+0x194>)
   161ba:	4628      	mov	r0, r5
   161bc:	f7ff ff3a 	bl	16034 <context_create_parser>
   161c0:	b9b0      	cbnz	r0, 161f0 <pdn_interface_open+0x130>
   161c2:	2202      	movs	r2, #2
   161c4:	f854 3025 	ldr.w	r3, [r4, r5, lsl #2]
   161c8:	f045 40f1 	orr.w	r0, r5, #2021654528	; 0x78800000
   161cc:	f440 10d0 	orr.w	r0, r0, #1703936	; 0x1a0000
   161d0:	609a      	str	r2, [r3, #8]
   161d2:	b003      	add	sp, #12
   161d4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   161d8:	4820      	ldr	r0, [pc, #128]	; (1625c <pdn_interface_open+0x19c>)
   161da:	f7f6 fe4d 	bl	ce78 <strlen>
   161de:	491d      	ldr	r1, [pc, #116]	; (16254 <pdn_interface_open+0x194>)
   161e0:	4602      	mov	r2, r0
   161e2:	481e      	ldr	r0, [pc, #120]	; (1625c <pdn_interface_open+0x19c>)
   161e4:	f00b fd16 	bl	21c14 <strncmp>
   161e8:	b960      	cbnz	r0, 16204 <pdn_interface_open+0x144>
   161ea:	2008      	movs	r0, #8
   161ec:	f7fa ff36 	bl	1105c <bsd_os_errno_set>
   161f0:	f854 0025 	ldr.w	r0, [r4, r5, lsl #2]
   161f4:	f7fd fce0 	bl	13bb8 <nrf_free>
   161f8:	2300      	movs	r3, #0
   161fa:	f04f 30ff 	mov.w	r0, #4294967295
   161fe:	f844 3025 	str.w	r3, [r4, r5, lsl #2]
   16202:	e78d      	b.n	16120 <pdn_interface_open+0x60>
   16204:	2005      	movs	r0, #5
   16206:	f7fa ff29 	bl	1105c <bsd_os_errno_set>
   1620a:	e7f1      	b.n	161f0 <pdn_interface_open+0x130>
   1620c:	2501      	movs	r5, #1
   1620e:	e78b      	b.n	16128 <pdn_interface_open+0x68>
   16210:	2502      	movs	r5, #2
   16212:	e789      	b.n	16128 <pdn_interface_open+0x68>
   16214:	2503      	movs	r5, #3
   16216:	e787      	b.n	16128 <pdn_interface_open+0x68>
   16218:	2504      	movs	r5, #4
   1621a:	e785      	b.n	16128 <pdn_interface_open+0x68>
   1621c:	2505      	movs	r5, #5
   1621e:	e783      	b.n	16128 <pdn_interface_open+0x68>
   16220:	2506      	movs	r5, #6
   16222:	e781      	b.n	16128 <pdn_interface_open+0x68>
   16224:	2507      	movs	r5, #7
   16226:	e77f      	b.n	16128 <pdn_interface_open+0x68>
   16228:	2029      	movs	r0, #41	; 0x29
   1622a:	f7fa ff17 	bl	1105c <bsd_os_errno_set>
   1622e:	f04f 30ff 	mov.w	r0, #4294967295
   16232:	e775      	b.n	16120 <pdn_interface_open+0x60>
   16234:	2005      	movs	r0, #5
   16236:	f7fa ff11 	bl	1105c <bsd_os_errno_set>
   1623a:	f854 0025 	ldr.w	r0, [r4, r5, lsl #2]
   1623e:	f7fd fcbb 	bl	13bb8 <nrf_free>
   16242:	f844 6025 	str.w	r6, [r4, r5, lsl #2]
   16246:	4638      	mov	r0, r7
   16248:	e76a      	b.n	16120 <pdn_interface_open+0x60>
   1624a:	bf00      	nop
   1624c:	200207dc 	.word	0x200207dc
   16250:	00022e90 	.word	0x00022e90
   16254:	200206dc 	.word	0x200206dc
   16258:	00022ea0 	.word	0x00022ea0
   1625c:	00022eac 	.word	0x00022eac
   16260:	200206d8 	.word	0x200206d8

00016264 <pdn_interface_connect>:
   16264:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16268:	b083      	sub	sp, #12
   1626a:	2900      	cmp	r1, #0
   1626c:	f000 813d 	beq.w	164ea <pdn_interface_connect+0x286>
   16270:	2a64      	cmp	r2, #100	; 0x64
   16272:	4691      	mov	r9, r2
   16274:	f200 8139 	bhi.w	164ea <pdn_interface_connect+0x286>
   16278:	4605      	mov	r5, r0
   1627a:	4608      	mov	r0, r1
   1627c:	4688      	mov	r8, r1
   1627e:	f7f6 fdfb 	bl	ce78 <strlen>
   16282:	2864      	cmp	r0, #100	; 0x64
   16284:	f200 8131 	bhi.w	164ea <pdn_interface_connect+0x286>
   16288:	0c2b      	lsrs	r3, r5, #16
   1628a:	4aa5      	ldr	r2, [pc, #660]	; (16520 <pdn_interface_connect+0x2bc>)
   1628c:	041b      	lsls	r3, r3, #16
   1628e:	4293      	cmp	r3, r2
   16290:	f040 8122 	bne.w	164d8 <pdn_interface_connect+0x274>
   16294:	f025 45f1 	bic.w	r5, r5, #2021654528	; 0x78800000
   16298:	f425 15d0 	bic.w	r5, r5, #1703936	; 0x1a0000
   1629c:	2d09      	cmp	r5, #9
   1629e:	f300 811b 	bgt.w	164d8 <pdn_interface_connect+0x274>
   162a2:	4fa0      	ldr	r7, [pc, #640]	; (16524 <pdn_interface_connect+0x2c0>)
   162a4:	f857 3025 	ldr.w	r3, [r7, r5, lsl #2]
   162a8:	2b00      	cmp	r3, #0
   162aa:	f000 8115 	beq.w	164d8 <pdn_interface_connect+0x274>
   162ae:	689a      	ldr	r2, [r3, #8]
   162b0:	2a00      	cmp	r2, #0
   162b2:	f000 8111 	beq.w	164d8 <pdn_interface_connect+0x274>
   162b6:	689b      	ldr	r3, [r3, #8]
   162b8:	2b02      	cmp	r3, #2
   162ba:	f040 810d 	bne.w	164d8 <pdn_interface_connect+0x274>
   162be:	4e9a      	ldr	r6, [pc, #616]	; (16528 <pdn_interface_connect+0x2c4>)
   162c0:	4a9a      	ldr	r2, [pc, #616]	; (1652c <pdn_interface_connect+0x2c8>)
   162c2:	f44f 7180 	mov.w	r1, #256	; 0x100
   162c6:	4630      	mov	r0, r6
   162c8:	f008 fc4a 	bl	1eb60 <sniprintf>
   162cc:	f857 3025 	ldr.w	r3, [r7, r5, lsl #2]
   162d0:	4604      	mov	r4, r0
   162d2:	f5c0 7180 	rsb	r1, r0, #256	; 0x100
   162d6:	681b      	ldr	r3, [r3, #0]
   162d8:	4a95      	ldr	r2, [pc, #596]	; (16530 <pdn_interface_connect+0x2cc>)
   162da:	1830      	adds	r0, r6, r0
   162dc:	f008 fc40 	bl	1eb60 <sniprintf>
   162e0:	f857 3025 	ldr.w	r3, [r7, r5, lsl #2]
   162e4:	4404      	add	r4, r0
   162e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
   162e8:	f003 0203 	and.w	r2, r3, #3
   162ec:	2a03      	cmp	r2, #3
   162ee:	f000 80ea 	beq.w	164c6 <pdn_interface_connect+0x262>
   162f2:	079b      	lsls	r3, r3, #30
   162f4:	eb06 0004 	add.w	r0, r6, r4
   162f8:	f5c4 7180 	rsb	r1, r4, #256	; 0x100
   162fc:	bf4c      	ite	mi
   162fe:	4b8d      	ldrmi	r3, [pc, #564]	; (16534 <pdn_interface_connect+0x2d0>)
   16300:	4b8d      	ldrpl	r3, [pc, #564]	; (16538 <pdn_interface_connect+0x2d4>)
   16302:	4a8e      	ldr	r2, [pc, #568]	; (1653c <pdn_interface_connect+0x2d8>)
   16304:	f008 fc2c 	bl	1eb60 <sniprintf>
   16308:	4404      	add	r4, r0
   1630a:	4643      	mov	r3, r8
   1630c:	4a8c      	ldr	r2, [pc, #560]	; (16540 <pdn_interface_connect+0x2dc>)
   1630e:	f5c4 7180 	rsb	r1, r4, #256	; 0x100
   16312:	1930      	adds	r0, r6, r4
   16314:	f008 fc24 	bl	1eb60 <sniprintf>
   16318:	4420      	add	r0, r4
   1631a:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
   1631e:	f300 80f7 	bgt.w	16510 <pdn_interface_connect+0x2ac>
   16322:	f8df a23c 	ldr.w	sl, [pc, #572]	; 16560 <pdn_interface_connect+0x2fc>
   16326:	4880      	ldr	r0, [pc, #512]	; (16528 <pdn_interface_connect+0x2c4>)
   16328:	f8da b000 	ldr.w	fp, [sl]
   1632c:	2400      	movs	r4, #0
   1632e:	f7f6 fda3 	bl	ce78 <strlen>
   16332:	4623      	mov	r3, r4
   16334:	4602      	mov	r2, r0
   16336:	497c      	ldr	r1, [pc, #496]	; (16528 <pdn_interface_connect+0x2c4>)
   16338:	4658      	mov	r0, fp
   1633a:	9401      	str	r4, [sp, #4]
   1633c:	9400      	str	r4, [sp, #0]
   1633e:	f7fc fe81 	bl	13044 <at_interface_write>
   16342:	4683      	mov	fp, r0
   16344:	4878      	ldr	r0, [pc, #480]	; (16528 <pdn_interface_connect+0x2c4>)
   16346:	f7f6 fd97 	bl	ce78 <strlen>
   1634a:	4558      	cmp	r0, fp
   1634c:	d008      	beq.n	16360 <pdn_interface_connect+0xfc>
   1634e:	2005      	movs	r0, #5
   16350:	f7fa fe84 	bl	1105c <bsd_os_errno_set>
   16354:	f04f 34ff 	mov.w	r4, #4294967295
   16358:	4620      	mov	r0, r4
   1635a:	b003      	add	sp, #12
   1635c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16360:	4623      	mov	r3, r4
   16362:	e9cd 4400 	strd	r4, r4, [sp]
   16366:	f44f 7280 	mov.w	r2, #256	; 0x100
   1636a:	496f      	ldr	r1, [pc, #444]	; (16528 <pdn_interface_connect+0x2c4>)
   1636c:	f8da 0000 	ldr.w	r0, [sl]
   16370:	f7fc ff6c 	bl	1324c <at_interface_read>
   16374:	4604      	mov	r4, r0
   16376:	4873      	ldr	r0, [pc, #460]	; (16544 <pdn_interface_connect+0x2e0>)
   16378:	f7f6 fd7e 	bl	ce78 <strlen>
   1637c:	4284      	cmp	r4, r0
   1637e:	f2c0 8091 	blt.w	164a4 <pdn_interface_connect+0x240>
   16382:	4602      	mov	r2, r0
   16384:	4968      	ldr	r1, [pc, #416]	; (16528 <pdn_interface_connect+0x2c4>)
   16386:	486f      	ldr	r0, [pc, #444]	; (16544 <pdn_interface_connect+0x2e0>)
   16388:	f00b fc44 	bl	21c14 <strncmp>
   1638c:	2800      	cmp	r0, #0
   1638e:	f040 8089 	bne.w	164a4 <pdn_interface_connect+0x240>
   16392:	4965      	ldr	r1, [pc, #404]	; (16528 <pdn_interface_connect+0x2c4>)
   16394:	4628      	mov	r0, r5
   16396:	f7ff fde9 	bl	15f6c <ok_rsp_parser>
   1639a:	4604      	mov	r4, r0
   1639c:	2800      	cmp	r0, #0
   1639e:	d1db      	bne.n	16358 <pdn_interface_connect+0xf4>
   163a0:	4a69      	ldr	r2, [pc, #420]	; (16548 <pdn_interface_connect+0x2e4>)
   163a2:	f44f 7180 	mov.w	r1, #256	; 0x100
   163a6:	4860      	ldr	r0, [pc, #384]	; (16528 <pdn_interface_connect+0x2c4>)
   163a8:	f008 fbda 	bl	1eb60 <sniprintf>
   163ac:	f857 3025 	ldr.w	r3, [r7, r5, lsl #2]
   163b0:	f5c0 7180 	rsb	r1, r0, #256	; 0x100
   163b4:	681b      	ldr	r3, [r3, #0]
   163b6:	4a65      	ldr	r2, [pc, #404]	; (1654c <pdn_interface_connect+0x2e8>)
   163b8:	4430      	add	r0, r6
   163ba:	f008 fbd1 	bl	1eb60 <sniprintf>
   163be:	485a      	ldr	r0, [pc, #360]	; (16528 <pdn_interface_connect+0x2c4>)
   163c0:	f8da b000 	ldr.w	fp, [sl]
   163c4:	f7f6 fd58 	bl	ce78 <strlen>
   163c8:	4623      	mov	r3, r4
   163ca:	4602      	mov	r2, r0
   163cc:	4956      	ldr	r1, [pc, #344]	; (16528 <pdn_interface_connect+0x2c4>)
   163ce:	4658      	mov	r0, fp
   163d0:	9401      	str	r4, [sp, #4]
   163d2:	9400      	str	r4, [sp, #0]
   163d4:	f7fc fe36 	bl	13044 <at_interface_write>
   163d8:	4683      	mov	fp, r0
   163da:	4853      	ldr	r0, [pc, #332]	; (16528 <pdn_interface_connect+0x2c4>)
   163dc:	f7f6 fd4c 	bl	ce78 <strlen>
   163e0:	4558      	cmp	r0, fp
   163e2:	d1b4      	bne.n	1634e <pdn_interface_connect+0xea>
   163e4:	4623      	mov	r3, r4
   163e6:	f44f 7280 	mov.w	r2, #256	; 0x100
   163ea:	494f      	ldr	r1, [pc, #316]	; (16528 <pdn_interface_connect+0x2c4>)
   163ec:	f8da 0000 	ldr.w	r0, [sl]
   163f0:	e9cd 4400 	strd	r4, r4, [sp]
   163f4:	f7fc ff2a 	bl	1324c <at_interface_read>
   163f8:	4683      	mov	fp, r0
   163fa:	4852      	ldr	r0, [pc, #328]	; (16544 <pdn_interface_connect+0x2e0>)
   163fc:	f7f6 fd3c 	bl	ce78 <strlen>
   16400:	4583      	cmp	fp, r0
   16402:	db4f      	blt.n	164a4 <pdn_interface_connect+0x240>
   16404:	4602      	mov	r2, r0
   16406:	4948      	ldr	r1, [pc, #288]	; (16528 <pdn_interface_connect+0x2c4>)
   16408:	484e      	ldr	r0, [pc, #312]	; (16544 <pdn_interface_connect+0x2e0>)
   1640a:	f00b fc03 	bl	21c14 <strncmp>
   1640e:	2800      	cmp	r0, #0
   16410:	d148      	bne.n	164a4 <pdn_interface_connect+0x240>
   16412:	2103      	movs	r1, #3
   16414:	f857 3025 	ldr.w	r3, [r7, r5, lsl #2]
   16418:	464a      	mov	r2, r9
   1641a:	6099      	str	r1, [r3, #8]
   1641c:	f857 0025 	ldr.w	r0, [r7, r5, lsl #2]
   16420:	4641      	mov	r1, r8
   16422:	300c      	adds	r0, #12
   16424:	f00b fa89 	bl	2193a <memcpy>
   16428:	4a49      	ldr	r2, [pc, #292]	; (16550 <pdn_interface_connect+0x2ec>)
   1642a:	f44f 7180 	mov.w	r1, #256	; 0x100
   1642e:	483e      	ldr	r0, [pc, #248]	; (16528 <pdn_interface_connect+0x2c4>)
   16430:	f008 fb96 	bl	1eb60 <sniprintf>
   16434:	4601      	mov	r1, r0
   16436:	f857 3025 	ldr.w	r3, [r7, r5, lsl #2]
   1643a:	f5c1 7180 	rsb	r1, r1, #256	; 0x100
   1643e:	681b      	ldr	r3, [r3, #0]
   16440:	4a42      	ldr	r2, [pc, #264]	; (1654c <pdn_interface_connect+0x2e8>)
   16442:	1830      	adds	r0, r6, r0
   16444:	f008 fb8c 	bl	1eb60 <sniprintf>
   16448:	4837      	ldr	r0, [pc, #220]	; (16528 <pdn_interface_connect+0x2c4>)
   1644a:	f8da 6000 	ldr.w	r6, [sl]
   1644e:	f7f6 fd13 	bl	ce78 <strlen>
   16452:	4623      	mov	r3, r4
   16454:	4602      	mov	r2, r0
   16456:	4934      	ldr	r1, [pc, #208]	; (16528 <pdn_interface_connect+0x2c4>)
   16458:	4630      	mov	r0, r6
   1645a:	9401      	str	r4, [sp, #4]
   1645c:	9400      	str	r4, [sp, #0]
   1645e:	f7fc fdf1 	bl	13044 <at_interface_write>
   16462:	4606      	mov	r6, r0
   16464:	4830      	ldr	r0, [pc, #192]	; (16528 <pdn_interface_connect+0x2c4>)
   16466:	f7f6 fd07 	bl	ce78 <strlen>
   1646a:	42b0      	cmp	r0, r6
   1646c:	d153      	bne.n	16516 <pdn_interface_connect+0x2b2>
   1646e:	4623      	mov	r3, r4
   16470:	f44f 7280 	mov.w	r2, #256	; 0x100
   16474:	492c      	ldr	r1, [pc, #176]	; (16528 <pdn_interface_connect+0x2c4>)
   16476:	f8da 0000 	ldr.w	r0, [sl]
   1647a:	e9cd 4400 	strd	r4, r4, [sp]
   1647e:	f7fc fee5 	bl	1324c <at_interface_read>
   16482:	4606      	mov	r6, r0
   16484:	4833      	ldr	r0, [pc, #204]	; (16554 <pdn_interface_connect+0x2f0>)
   16486:	f7f6 fcf7 	bl	ce78 <strlen>
   1648a:	4286      	cmp	r6, r0
   1648c:	db33      	blt.n	164f6 <pdn_interface_connect+0x292>
   1648e:	4602      	mov	r2, r0
   16490:	4925      	ldr	r1, [pc, #148]	; (16528 <pdn_interface_connect+0x2c4>)
   16492:	4830      	ldr	r0, [pc, #192]	; (16554 <pdn_interface_connect+0x2f0>)
   16494:	f00b fbbe 	bl	21c14 <strncmp>
   16498:	bb68      	cbnz	r0, 164f6 <pdn_interface_connect+0x292>
   1649a:	4628      	mov	r0, r5
   1649c:	4922      	ldr	r1, [pc, #136]	; (16528 <pdn_interface_connect+0x2c4>)
   1649e:	f7ff fd9d 	bl	15fdc <pdn_id_get_parser>
   164a2:	e759      	b.n	16358 <pdn_interface_connect+0xf4>
   164a4:	482c      	ldr	r0, [pc, #176]	; (16558 <pdn_interface_connect+0x2f4>)
   164a6:	f7f6 fce7 	bl	ce78 <strlen>
   164aa:	491f      	ldr	r1, [pc, #124]	; (16528 <pdn_interface_connect+0x2c4>)
   164ac:	4602      	mov	r2, r0
   164ae:	482a      	ldr	r0, [pc, #168]	; (16558 <pdn_interface_connect+0x2f4>)
   164b0:	f00b fbb0 	bl	21c14 <strncmp>
   164b4:	2800      	cmp	r0, #0
   164b6:	f47f af4a 	bne.w	1634e <pdn_interface_connect+0xea>
   164ba:	2008      	movs	r0, #8
   164bc:	f7fa fdce 	bl	1105c <bsd_os_errno_set>
   164c0:	f04f 34ff 	mov.w	r4, #4294967295
   164c4:	e748      	b.n	16358 <pdn_interface_connect+0xf4>
   164c6:	f5c4 7180 	rsb	r1, r4, #256	; 0x100
   164ca:	1930      	adds	r0, r6, r4
   164cc:	4b23      	ldr	r3, [pc, #140]	; (1655c <pdn_interface_connect+0x2f8>)
   164ce:	4a1b      	ldr	r2, [pc, #108]	; (1653c <pdn_interface_connect+0x2d8>)
   164d0:	f008 fb46 	bl	1eb60 <sniprintf>
   164d4:	4404      	add	r4, r0
   164d6:	e718      	b.n	1630a <pdn_interface_connect+0xa6>
   164d8:	f04f 34ff 	mov.w	r4, #4294967295
   164dc:	2009      	movs	r0, #9
   164de:	f7fa fdbd 	bl	1105c <bsd_os_errno_set>
   164e2:	4620      	mov	r0, r4
   164e4:	b003      	add	sp, #12
   164e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   164ea:	2016      	movs	r0, #22
   164ec:	f7fa fdb6 	bl	1105c <bsd_os_errno_set>
   164f0:	f04f 34ff 	mov.w	r4, #4294967295
   164f4:	e730      	b.n	16358 <pdn_interface_connect+0xf4>
   164f6:	4818      	ldr	r0, [pc, #96]	; (16558 <pdn_interface_connect+0x2f4>)
   164f8:	f7f6 fcbe 	bl	ce78 <strlen>
   164fc:	490a      	ldr	r1, [pc, #40]	; (16528 <pdn_interface_connect+0x2c4>)
   164fe:	4602      	mov	r2, r0
   16500:	4815      	ldr	r0, [pc, #84]	; (16558 <pdn_interface_connect+0x2f4>)
   16502:	f00b fb87 	bl	21c14 <strncmp>
   16506:	b930      	cbnz	r0, 16516 <pdn_interface_connect+0x2b2>
   16508:	2008      	movs	r0, #8
   1650a:	f7fa fda7 	bl	1105c <bsd_os_errno_set>
   1650e:	e723      	b.n	16358 <pdn_interface_connect+0xf4>
   16510:	f04f 34ff 	mov.w	r4, #4294967295
   16514:	e720      	b.n	16358 <pdn_interface_connect+0xf4>
   16516:	2005      	movs	r0, #5
   16518:	f7fa fda0 	bl	1105c <bsd_os_errno_set>
   1651c:	e71c      	b.n	16358 <pdn_interface_connect+0xf4>
   1651e:	bf00      	nop
   16520:	789a0000 	.word	0x789a0000
   16524:	200207dc 	.word	0x200207dc
   16528:	200206dc 	.word	0x200206dc
   1652c:	00022e18 	.word	0x00022e18
   16530:	00022e24 	.word	0x00022e24
   16534:	00022e38 	.word	0x00022e38
   16538:	00022e40 	.word	0x00022e40
   1653c:	00022e30 	.word	0x00022e30
   16540:	00022e74 	.word	0x00022e74
   16544:	00022e44 	.word	0x00022e44
   16548:	00022e48 	.word	0x00022e48
   1654c:	00022e54 	.word	0x00022e54
   16550:	00022e58 	.word	0x00022e58
   16554:	00022e68 	.word	0x00022e68
   16558:	00022eac 	.word	0x00022eac
   1655c:	00022e28 	.word	0x00022e28
   16560:	200206d8 	.word	0x200206d8

00016564 <pdn_interface_close>:
   16564:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   16568:	4a64      	ldr	r2, [pc, #400]	; (166fc <pdn_interface_close+0x198>)
   1656a:	0c03      	lsrs	r3, r0, #16
   1656c:	041b      	lsls	r3, r3, #16
   1656e:	4293      	cmp	r3, r2
   16570:	b083      	sub	sp, #12
   16572:	f040 809d 	bne.w	166b0 <pdn_interface_close+0x14c>
   16576:	f020 44f1 	bic.w	r4, r0, #2021654528	; 0x78800000
   1657a:	f424 14d0 	bic.w	r4, r4, #1703936	; 0x1a0000
   1657e:	2c09      	cmp	r4, #9
   16580:	f300 8096 	bgt.w	166b0 <pdn_interface_close+0x14c>
   16584:	4d5e      	ldr	r5, [pc, #376]	; (16700 <pdn_interface_close+0x19c>)
   16586:	f855 0024 	ldr.w	r0, [r5, r4, lsl #2]
   1658a:	2800      	cmp	r0, #0
   1658c:	f000 8090 	beq.w	166b0 <pdn_interface_close+0x14c>
   16590:	6883      	ldr	r3, [r0, #8]
   16592:	2b00      	cmp	r3, #0
   16594:	f000 808c 	beq.w	166b0 <pdn_interface_close+0x14c>
   16598:	6883      	ldr	r3, [r0, #8]
   1659a:	2b03      	cmp	r3, #3
   1659c:	d008      	beq.n	165b0 <pdn_interface_close+0x4c>
   1659e:	f7fd fb0b 	bl	13bb8 <nrf_free>
   165a2:	2300      	movs	r3, #0
   165a4:	4618      	mov	r0, r3
   165a6:	f845 3024 	str.w	r3, [r5, r4, lsl #2]
   165aa:	b003      	add	sp, #12
   165ac:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   165b0:	4e54      	ldr	r6, [pc, #336]	; (16704 <pdn_interface_close+0x1a0>)
   165b2:	4a55      	ldr	r2, [pc, #340]	; (16708 <pdn_interface_close+0x1a4>)
   165b4:	f44f 7180 	mov.w	r1, #256	; 0x100
   165b8:	4630      	mov	r0, r6
   165ba:	f008 fad1 	bl	1eb60 <sniprintf>
   165be:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
   165c2:	f5c0 7180 	rsb	r1, r0, #256	; 0x100
   165c6:	681b      	ldr	r3, [r3, #0]
   165c8:	4a50      	ldr	r2, [pc, #320]	; (1670c <pdn_interface_close+0x1a8>)
   165ca:	4430      	add	r0, r6
   165cc:	f8df 814c 	ldr.w	r8, [pc, #332]	; 1671c <pdn_interface_close+0x1b8>
   165d0:	f008 fac6 	bl	1eb60 <sniprintf>
   165d4:	4630      	mov	r0, r6
   165d6:	f8d8 9000 	ldr.w	r9, [r8]
   165da:	2700      	movs	r7, #0
   165dc:	f7f6 fc4c 	bl	ce78 <strlen>
   165e0:	4631      	mov	r1, r6
   165e2:	4602      	mov	r2, r0
   165e4:	463b      	mov	r3, r7
   165e6:	4648      	mov	r0, r9
   165e8:	9701      	str	r7, [sp, #4]
   165ea:	9700      	str	r7, [sp, #0]
   165ec:	f7fc fd2a 	bl	13044 <at_interface_write>
   165f0:	4681      	mov	r9, r0
   165f2:	4630      	mov	r0, r6
   165f4:	f7f6 fc40 	bl	ce78 <strlen>
   165f8:	4548      	cmp	r0, r9
   165fa:	d176      	bne.n	166ea <pdn_interface_close+0x186>
   165fc:	463b      	mov	r3, r7
   165fe:	e9cd 7700 	strd	r7, r7, [sp]
   16602:	f44f 7280 	mov.w	r2, #256	; 0x100
   16606:	4631      	mov	r1, r6
   16608:	f8d8 0000 	ldr.w	r0, [r8]
   1660c:	f7fc fe1e 	bl	1324c <at_interface_read>
   16610:	4607      	mov	r7, r0
   16612:	483f      	ldr	r0, [pc, #252]	; (16710 <pdn_interface_close+0x1ac>)
   16614:	f7f6 fc30 	bl	ce78 <strlen>
   16618:	4287      	cmp	r7, r0
   1661a:	da4f      	bge.n	166bc <pdn_interface_close+0x158>
   1661c:	483d      	ldr	r0, [pc, #244]	; (16714 <pdn_interface_close+0x1b0>)
   1661e:	f7f6 fc2b 	bl	ce78 <strlen>
   16622:	4938      	ldr	r1, [pc, #224]	; (16704 <pdn_interface_close+0x1a0>)
   16624:	4602      	mov	r2, r0
   16626:	483b      	ldr	r0, [pc, #236]	; (16714 <pdn_interface_close+0x1b0>)
   16628:	f00b faf4 	bl	21c14 <strncmp>
   1662c:	2800      	cmp	r0, #0
   1662e:	d15c      	bne.n	166ea <pdn_interface_close+0x186>
   16630:	2008      	movs	r0, #8
   16632:	f7fa fd13 	bl	1105c <bsd_os_errno_set>
   16636:	4a38      	ldr	r2, [pc, #224]	; (16718 <pdn_interface_close+0x1b4>)
   16638:	f44f 7180 	mov.w	r1, #256	; 0x100
   1663c:	4831      	ldr	r0, [pc, #196]	; (16704 <pdn_interface_close+0x1a0>)
   1663e:	f008 fa8f 	bl	1eb60 <sniprintf>
   16642:	4601      	mov	r1, r0
   16644:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
   16648:	f5c1 7180 	rsb	r1, r1, #256	; 0x100
   1664c:	681b      	ldr	r3, [r3, #0]
   1664e:	4a2f      	ldr	r2, [pc, #188]	; (1670c <pdn_interface_close+0x1a8>)
   16650:	1830      	adds	r0, r6, r0
   16652:	f008 fa85 	bl	1eb60 <sniprintf>
   16656:	482b      	ldr	r0, [pc, #172]	; (16704 <pdn_interface_close+0x1a0>)
   16658:	f8d8 7000 	ldr.w	r7, [r8]
   1665c:	2600      	movs	r6, #0
   1665e:	f7f6 fc0b 	bl	ce78 <strlen>
   16662:	4633      	mov	r3, r6
   16664:	4602      	mov	r2, r0
   16666:	4927      	ldr	r1, [pc, #156]	; (16704 <pdn_interface_close+0x1a0>)
   16668:	4638      	mov	r0, r7
   1666a:	9601      	str	r6, [sp, #4]
   1666c:	9600      	str	r6, [sp, #0]
   1666e:	f7fc fce9 	bl	13044 <at_interface_write>
   16672:	4607      	mov	r7, r0
   16674:	4823      	ldr	r0, [pc, #140]	; (16704 <pdn_interface_close+0x1a0>)
   16676:	f7f6 fbff 	bl	ce78 <strlen>
   1667a:	42b8      	cmp	r0, r7
   1667c:	d139      	bne.n	166f2 <pdn_interface_close+0x18e>
   1667e:	4633      	mov	r3, r6
   16680:	e9cd 6600 	strd	r6, r6, [sp]
   16684:	f44f 7280 	mov.w	r2, #256	; 0x100
   16688:	491e      	ldr	r1, [pc, #120]	; (16704 <pdn_interface_close+0x1a0>)
   1668a:	f8d8 0000 	ldr.w	r0, [r8]
   1668e:	f7fc fddd 	bl	1324c <at_interface_read>
   16692:	4606      	mov	r6, r0
   16694:	481e      	ldr	r0, [pc, #120]	; (16710 <pdn_interface_close+0x1ac>)
   16696:	f7f6 fbef 	bl	ce78 <strlen>
   1669a:	4286      	cmp	r6, r0
   1669c:	db16      	blt.n	166cc <pdn_interface_close+0x168>
   1669e:	4602      	mov	r2, r0
   166a0:	4918      	ldr	r1, [pc, #96]	; (16704 <pdn_interface_close+0x1a0>)
   166a2:	481b      	ldr	r0, [pc, #108]	; (16710 <pdn_interface_close+0x1ac>)
   166a4:	f00b fab6 	bl	21c14 <strncmp>
   166a8:	b980      	cbnz	r0, 166cc <pdn_interface_close+0x168>
   166aa:	f855 0024 	ldr.w	r0, [r5, r4, lsl #2]
   166ae:	e776      	b.n	1659e <pdn_interface_close+0x3a>
   166b0:	2009      	movs	r0, #9
   166b2:	f7fa fcd3 	bl	1105c <bsd_os_errno_set>
   166b6:	f04f 30ff 	mov.w	r0, #4294967295
   166ba:	e776      	b.n	165aa <pdn_interface_close+0x46>
   166bc:	4602      	mov	r2, r0
   166be:	4631      	mov	r1, r6
   166c0:	4813      	ldr	r0, [pc, #76]	; (16710 <pdn_interface_close+0x1ac>)
   166c2:	f00b faa7 	bl	21c14 <strncmp>
   166c6:	2800      	cmp	r0, #0
   166c8:	d0b5      	beq.n	16636 <pdn_interface_close+0xd2>
   166ca:	e7a7      	b.n	1661c <pdn_interface_close+0xb8>
   166cc:	4811      	ldr	r0, [pc, #68]	; (16714 <pdn_interface_close+0x1b0>)
   166ce:	f7f6 fbd3 	bl	ce78 <strlen>
   166d2:	490c      	ldr	r1, [pc, #48]	; (16704 <pdn_interface_close+0x1a0>)
   166d4:	4602      	mov	r2, r0
   166d6:	480f      	ldr	r0, [pc, #60]	; (16714 <pdn_interface_close+0x1b0>)
   166d8:	f00b fa9c 	bl	21c14 <strncmp>
   166dc:	b948      	cbnz	r0, 166f2 <pdn_interface_close+0x18e>
   166de:	2008      	movs	r0, #8
   166e0:	f7fa fcbc 	bl	1105c <bsd_os_errno_set>
   166e4:	f855 0024 	ldr.w	r0, [r5, r4, lsl #2]
   166e8:	e759      	b.n	1659e <pdn_interface_close+0x3a>
   166ea:	2005      	movs	r0, #5
   166ec:	f7fa fcb6 	bl	1105c <bsd_os_errno_set>
   166f0:	e7a1      	b.n	16636 <pdn_interface_close+0xd2>
   166f2:	2005      	movs	r0, #5
   166f4:	f7fa fcb2 	bl	1105c <bsd_os_errno_set>
   166f8:	e7d7      	b.n	166aa <pdn_interface_close+0x146>
   166fa:	bf00      	nop
   166fc:	789a0000 	.word	0x789a0000
   16700:	200207dc 	.word	0x200207dc
   16704:	200206dc 	.word	0x200206dc
   16708:	00022e0c 	.word	0x00022e0c
   1670c:	00022e54 	.word	0x00022e54
   16710:	00022e44 	.word	0x00022e44
   16714:	00022eac 	.word	0x00022eac
   16718:	00022e18 	.word	0x00022e18
   1671c:	200206d8 	.word	0x200206d8

00016720 <pdn_interface_setopt>:
   16720:	b510      	push	{r4, lr}
   16722:	f240 2402 	movw	r4, #514	; 0x202
   16726:	42a1      	cmp	r1, r4
   16728:	d10d      	bne.n	16746 <pdn_interface_setopt+0x26>
   1672a:	b163      	cbz	r3, 16746 <pdn_interface_setopt+0x26>
   1672c:	9902      	ldr	r1, [sp, #8]
   1672e:	b151      	cbz	r1, 16746 <pdn_interface_setopt+0x26>
   16730:	0c01      	lsrs	r1, r0, #16
   16732:	4c25      	ldr	r4, [pc, #148]	; (167c8 <pdn_interface_setopt+0xa8>)
   16734:	0409      	lsls	r1, r1, #16
   16736:	42a1      	cmp	r1, r4
   16738:	d00b      	beq.n	16752 <pdn_interface_setopt+0x32>
   1673a:	2009      	movs	r0, #9
   1673c:	f7fa fc8e 	bl	1105c <bsd_os_errno_set>
   16740:	f04f 30ff 	mov.w	r0, #4294967295
   16744:	bd10      	pop	{r4, pc}
   16746:	2016      	movs	r0, #22
   16748:	f7fa fc88 	bl	1105c <bsd_os_errno_set>
   1674c:	f04f 30ff 	mov.w	r0, #4294967295
   16750:	bd10      	pop	{r4, pc}
   16752:	f020 40f1 	bic.w	r0, r0, #2021654528	; 0x78800000
   16756:	f420 10d0 	bic.w	r0, r0, #1703936	; 0x1a0000
   1675a:	2809      	cmp	r0, #9
   1675c:	dced      	bgt.n	1673a <pdn_interface_setopt+0x1a>
   1675e:	491b      	ldr	r1, [pc, #108]	; (167cc <pdn_interface_setopt+0xac>)
   16760:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
   16764:	2900      	cmp	r1, #0
   16766:	d0e8      	beq.n	1673a <pdn_interface_setopt+0x1a>
   16768:	6888      	ldr	r0, [r1, #8]
   1676a:	2800      	cmp	r0, #0
   1676c:	d0e5      	beq.n	1673a <pdn_interface_setopt+0x1a>
   1676e:	2a01      	cmp	r2, #1
   16770:	d001      	beq.n	16776 <pdn_interface_setopt+0x56>
   16772:	202d      	movs	r0, #45	; 0x2d
   16774:	e7e8      	b.n	16748 <pdn_interface_setopt+0x28>
   16776:	688a      	ldr	r2, [r1, #8]
   16778:	b1fa      	cbz	r2, 167ba <pdn_interface_setopt+0x9a>
   1677a:	688a      	ldr	r2, [r1, #8]
   1677c:	2a03      	cmp	r2, #3
   1677e:	d01c      	beq.n	167ba <pdn_interface_setopt+0x9a>
   16780:	688a      	ldr	r2, [r1, #8]
   16782:	2a04      	cmp	r2, #4
   16784:	d019      	beq.n	167ba <pdn_interface_setopt+0x9a>
   16786:	9a02      	ldr	r2, [sp, #8]
   16788:	0890      	lsrs	r0, r2, #2
   1678a:	1e42      	subs	r2, r0, #1
   1678c:	2a01      	cmp	r2, #1
   1678e:	d8da      	bhi.n	16746 <pdn_interface_setopt+0x26>
   16790:	9a02      	ldr	r2, [sp, #8]
   16792:	0792      	lsls	r2, r2, #30
   16794:	d1d7      	bne.n	16746 <pdn_interface_setopt+0x26>
   16796:	681a      	ldr	r2, [r3, #0]
   16798:	2a02      	cmp	r2, #2
   1679a:	d010      	beq.n	167be <pdn_interface_setopt+0x9e>
   1679c:	2a0a      	cmp	r2, #10
   1679e:	d1d2      	bne.n	16746 <pdn_interface_setopt+0x26>
   167a0:	2202      	movs	r2, #2
   167a2:	2802      	cmp	r0, #2
   167a4:	d106      	bne.n	167b4 <pdn_interface_setopt+0x94>
   167a6:	685b      	ldr	r3, [r3, #4]
   167a8:	2b02      	cmp	r3, #2
   167aa:	d00a      	beq.n	167c2 <pdn_interface_setopt+0xa2>
   167ac:	2b0a      	cmp	r3, #10
   167ae:	d1ca      	bne.n	16746 <pdn_interface_setopt+0x26>
   167b0:	f042 0202 	orr.w	r2, r2, #2
   167b4:	670a      	str	r2, [r1, #112]	; 0x70
   167b6:	2000      	movs	r0, #0
   167b8:	e7c6      	b.n	16748 <pdn_interface_setopt+0x28>
   167ba:	200e      	movs	r0, #14
   167bc:	e7c4      	b.n	16748 <pdn_interface_setopt+0x28>
   167be:	2201      	movs	r2, #1
   167c0:	e7ef      	b.n	167a2 <pdn_interface_setopt+0x82>
   167c2:	f042 0201 	orr.w	r2, r2, #1
   167c6:	e7f5      	b.n	167b4 <pdn_interface_setopt+0x94>
   167c8:	789a0000 	.word	0x789a0000
   167cc:	200207dc 	.word	0x200207dc

000167d0 <pdn_interface_getopt>:
   167d0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   167d4:	f240 2402 	movw	r4, #514	; 0x202
   167d8:	b083      	sub	sp, #12
   167da:	42a1      	cmp	r1, r4
   167dc:	9d0a      	ldr	r5, [sp, #40]	; 0x28
   167de:	f040 80a9 	bne.w	16934 <pdn_interface_getopt+0x164>
   167e2:	461e      	mov	r6, r3
   167e4:	2b00      	cmp	r3, #0
   167e6:	f000 80a5 	beq.w	16934 <pdn_interface_getopt+0x164>
   167ea:	2d00      	cmp	r5, #0
   167ec:	f000 80a2 	beq.w	16934 <pdn_interface_getopt+0x164>
   167f0:	0c03      	lsrs	r3, r0, #16
   167f2:	4956      	ldr	r1, [pc, #344]	; (1694c <pdn_interface_getopt+0x17c>)
   167f4:	041b      	lsls	r3, r3, #16
   167f6:	428b      	cmp	r3, r1
   167f8:	f040 8082 	bne.w	16900 <pdn_interface_getopt+0x130>
   167fc:	f020 44f1 	bic.w	r4, r0, #2021654528	; 0x78800000
   16800:	f424 14d0 	bic.w	r4, r4, #1703936	; 0x1a0000
   16804:	2c09      	cmp	r4, #9
   16806:	dc7b      	bgt.n	16900 <pdn_interface_getopt+0x130>
   16808:	4b51      	ldr	r3, [pc, #324]	; (16950 <pdn_interface_getopt+0x180>)
   1680a:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
   1680e:	2b00      	cmp	r3, #0
   16810:	d076      	beq.n	16900 <pdn_interface_getopt+0x130>
   16812:	6899      	ldr	r1, [r3, #8]
   16814:	2900      	cmp	r1, #0
   16816:	d073      	beq.n	16900 <pdn_interface_getopt+0x130>
   16818:	2a02      	cmp	r2, #2
   1681a:	d00e      	beq.n	1683a <pdn_interface_getopt+0x6a>
   1681c:	2a03      	cmp	r2, #3
   1681e:	d008      	beq.n	16832 <pdn_interface_getopt+0x62>
   16820:	2a01      	cmp	r2, #1
   16822:	d015      	beq.n	16850 <pdn_interface_getopt+0x80>
   16824:	202d      	movs	r0, #45	; 0x2d
   16826:	f7fa fc19 	bl	1105c <bsd_os_errno_set>
   1682a:	2000      	movs	r0, #0
   1682c:	b003      	add	sp, #12
   1682e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   16832:	682b      	ldr	r3, [r5, #0]
   16834:	bb23      	cbnz	r3, 16880 <pdn_interface_getopt+0xb0>
   16836:	2016      	movs	r0, #22
   16838:	e7f5      	b.n	16826 <pdn_interface_getopt+0x56>
   1683a:	682a      	ldr	r2, [r5, #0]
   1683c:	2a00      	cmp	r2, #0
   1683e:	d0fa      	beq.n	16836 <pdn_interface_getopt+0x66>
   16840:	2201      	movs	r2, #1
   16842:	2000      	movs	r0, #0
   16844:	681b      	ldr	r3, [r3, #0]
   16846:	7033      	strb	r3, [r6, #0]
   16848:	602a      	str	r2, [r5, #0]
   1684a:	b003      	add	sp, #12
   1684c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   16850:	689a      	ldr	r2, [r3, #8]
   16852:	2a00      	cmp	r2, #0
   16854:	d052      	beq.n	168fc <pdn_interface_getopt+0x12c>
   16856:	689a      	ldr	r2, [r3, #8]
   16858:	2a04      	cmp	r2, #4
   1685a:	d04f      	beq.n	168fc <pdn_interface_getopt+0x12c>
   1685c:	682a      	ldr	r2, [r5, #0]
   1685e:	2a07      	cmp	r2, #7
   16860:	d9e9      	bls.n	16836 <pdn_interface_getopt+0x66>
   16862:	f012 0203 	ands.w	r2, r2, #3
   16866:	d1e6      	bne.n	16836 <pdn_interface_getopt+0x66>
   16868:	6f1b      	ldr	r3, [r3, #112]	; 0x70
   1686a:	0799      	lsls	r1, r3, #30
   1686c:	d45d      	bmi.n	1692a <pdn_interface_getopt+0x15a>
   1686e:	2104      	movs	r1, #4
   16870:	07db      	lsls	r3, r3, #31
   16872:	d502      	bpl.n	1687a <pdn_interface_getopt+0xaa>
   16874:	2302      	movs	r3, #2
   16876:	50b3      	str	r3, [r6, r2]
   16878:	460a      	mov	r2, r1
   1687a:	602a      	str	r2, [r5, #0]
   1687c:	2000      	movs	r0, #0
   1687e:	e7d5      	b.n	1682c <pdn_interface_getopt+0x5c>
   16880:	4a34      	ldr	r2, [pc, #208]	; (16954 <pdn_interface_getopt+0x184>)
   16882:	f44f 7180 	mov.w	r1, #256	; 0x100
   16886:	4834      	ldr	r0, [pc, #208]	; (16958 <pdn_interface_getopt+0x188>)
   16888:	f8df 80d8 	ldr.w	r8, [pc, #216]	; 16964 <pdn_interface_getopt+0x194>
   1688c:	f008 f968 	bl	1eb60 <sniprintf>
   16890:	4831      	ldr	r0, [pc, #196]	; (16958 <pdn_interface_getopt+0x188>)
   16892:	f8d8 9000 	ldr.w	r9, [r8]
   16896:	2700      	movs	r7, #0
   16898:	f7f6 faee 	bl	ce78 <strlen>
   1689c:	463b      	mov	r3, r7
   1689e:	4602      	mov	r2, r0
   168a0:	492d      	ldr	r1, [pc, #180]	; (16958 <pdn_interface_getopt+0x188>)
   168a2:	4648      	mov	r0, r9
   168a4:	9701      	str	r7, [sp, #4]
   168a6:	9700      	str	r7, [sp, #0]
   168a8:	f7fc fbcc 	bl	13044 <at_interface_write>
   168ac:	4681      	mov	r9, r0
   168ae:	482a      	ldr	r0, [pc, #168]	; (16958 <pdn_interface_getopt+0x188>)
   168b0:	f7f6 fae2 	bl	ce78 <strlen>
   168b4:	4548      	cmp	r0, r9
   168b6:	d143      	bne.n	16940 <pdn_interface_getopt+0x170>
   168b8:	463b      	mov	r3, r7
   168ba:	e9cd 7700 	strd	r7, r7, [sp]
   168be:	f44f 7280 	mov.w	r2, #256	; 0x100
   168c2:	4925      	ldr	r1, [pc, #148]	; (16958 <pdn_interface_getopt+0x188>)
   168c4:	f8d8 0000 	ldr.w	r0, [r8]
   168c8:	f7fc fcc0 	bl	1324c <at_interface_read>
   168cc:	4607      	mov	r7, r0
   168ce:	4823      	ldr	r0, [pc, #140]	; (1695c <pdn_interface_getopt+0x18c>)
   168d0:	f7f6 fad2 	bl	ce78 <strlen>
   168d4:	4287      	cmp	r7, r0
   168d6:	db19      	blt.n	1690c <pdn_interface_getopt+0x13c>
   168d8:	4602      	mov	r2, r0
   168da:	491f      	ldr	r1, [pc, #124]	; (16958 <pdn_interface_getopt+0x188>)
   168dc:	481f      	ldr	r0, [pc, #124]	; (1695c <pdn_interface_getopt+0x18c>)
   168de:	f00b f999 	bl	21c14 <strncmp>
   168e2:	4607      	mov	r7, r0
   168e4:	b990      	cbnz	r0, 1690c <pdn_interface_getopt+0x13c>
   168e6:	4620      	mov	r0, r4
   168e8:	491b      	ldr	r1, [pc, #108]	; (16958 <pdn_interface_getopt+0x188>)
   168ea:	f7ff fb41 	bl	15f70 <pdn_state_get_parser>
   168ee:	2800      	cmp	r0, #0
   168f0:	db99      	blt.n	16826 <pdn_interface_getopt+0x56>
   168f2:	2301      	movs	r3, #1
   168f4:	7030      	strb	r0, [r6, #0]
   168f6:	4638      	mov	r0, r7
   168f8:	602b      	str	r3, [r5, #0]
   168fa:	e797      	b.n	1682c <pdn_interface_getopt+0x5c>
   168fc:	200e      	movs	r0, #14
   168fe:	e792      	b.n	16826 <pdn_interface_getopt+0x56>
   16900:	2009      	movs	r0, #9
   16902:	f7fa fbab 	bl	1105c <bsd_os_errno_set>
   16906:	f04f 30ff 	mov.w	r0, #4294967295
   1690a:	e78f      	b.n	1682c <pdn_interface_getopt+0x5c>
   1690c:	4814      	ldr	r0, [pc, #80]	; (16960 <pdn_interface_getopt+0x190>)
   1690e:	f7f6 fab3 	bl	ce78 <strlen>
   16912:	4911      	ldr	r1, [pc, #68]	; (16958 <pdn_interface_getopt+0x188>)
   16914:	4602      	mov	r2, r0
   16916:	4812      	ldr	r0, [pc, #72]	; (16960 <pdn_interface_getopt+0x190>)
   16918:	f00b f97c 	bl	21c14 <strncmp>
   1691c:	b980      	cbnz	r0, 16940 <pdn_interface_getopt+0x170>
   1691e:	2008      	movs	r0, #8
   16920:	f7fa fb9c 	bl	1105c <bsd_os_errno_set>
   16924:	f04f 30ff 	mov.w	r0, #4294967295
   16928:	e77d      	b.n	16826 <pdn_interface_getopt+0x56>
   1692a:	220a      	movs	r2, #10
   1692c:	2108      	movs	r1, #8
   1692e:	6032      	str	r2, [r6, #0]
   16930:	2204      	movs	r2, #4
   16932:	e79d      	b.n	16870 <pdn_interface_getopt+0xa0>
   16934:	2016      	movs	r0, #22
   16936:	f7fa fb91 	bl	1105c <bsd_os_errno_set>
   1693a:	f04f 30ff 	mov.w	r0, #4294967295
   1693e:	e775      	b.n	1682c <pdn_interface_getopt+0x5c>
   16940:	2005      	movs	r0, #5
   16942:	f7fa fb8b 	bl	1105c <bsd_os_errno_set>
   16946:	f04f 30ff 	mov.w	r0, #4294967295
   1694a:	e76c      	b.n	16826 <pdn_interface_getopt+0x56>
   1694c:	789a0000 	.word	0x789a0000
   16950:	200207dc 	.word	0x200207dc
   16954:	00022e7c 	.word	0x00022e7c
   16958:	200206dc 	.word	0x200206dc
   1695c:	00022e88 	.word	0x00022e88
   16960:	00022eac 	.word	0x00022eac
   16964:	200206d8 	.word	0x200206d8

00016968 <pdn_interface_pdn_id_get>:
   16968:	2900      	cmp	r1, #0
   1696a:	f000 83b9 	beq.w	170e0 <pdn_interface_pdn_id_get+0x778>
   1696e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   16972:	4ca3      	ldr	r4, [pc, #652]	; (16c00 <pdn_interface_pdn_id_get+0x298>)
   16974:	2802      	cmp	r0, #2
   16976:	b083      	sub	sp, #12
   16978:	460d      	mov	r5, r1
   1697a:	6823      	ldr	r3, [r4, #0]
   1697c:	f000 8094 	beq.w	16aa8 <pdn_interface_pdn_id_get+0x140>
   16980:	280a      	cmp	r0, #10
   16982:	d03f      	beq.n	16a04 <pdn_interface_pdn_id_get+0x9c>
   16984:	b11b      	cbz	r3, 1698e <pdn_interface_pdn_id_get+0x26>
   16986:	689b      	ldr	r3, [r3, #8]
   16988:	2b03      	cmp	r3, #3
   1698a:	f000 8127 	beq.w	16bdc <pdn_interface_pdn_id_get+0x274>
   1698e:	6863      	ldr	r3, [r4, #4]
   16990:	b11b      	cbz	r3, 1699a <pdn_interface_pdn_id_get+0x32>
   16992:	689b      	ldr	r3, [r3, #8]
   16994:	2b03      	cmp	r3, #3
   16996:	f000 8110 	beq.w	16bba <pdn_interface_pdn_id_get+0x252>
   1699a:	68a3      	ldr	r3, [r4, #8]
   1699c:	b11b      	cbz	r3, 169a6 <pdn_interface_pdn_id_get+0x3e>
   1699e:	689b      	ldr	r3, [r3, #8]
   169a0:	2b03      	cmp	r3, #3
   169a2:	f000 80f9 	beq.w	16b98 <pdn_interface_pdn_id_get+0x230>
   169a6:	68e3      	ldr	r3, [r4, #12]
   169a8:	b11b      	cbz	r3, 169b2 <pdn_interface_pdn_id_get+0x4a>
   169aa:	689b      	ldr	r3, [r3, #8]
   169ac:	2b03      	cmp	r3, #3
   169ae:	f000 80e2 	beq.w	16b76 <pdn_interface_pdn_id_get+0x20e>
   169b2:	6923      	ldr	r3, [r4, #16]
   169b4:	b11b      	cbz	r3, 169be <pdn_interface_pdn_id_get+0x56>
   169b6:	689b      	ldr	r3, [r3, #8]
   169b8:	2b03      	cmp	r3, #3
   169ba:	f000 8123 	beq.w	16c04 <pdn_interface_pdn_id_get+0x29c>
   169be:	6963      	ldr	r3, [r4, #20]
   169c0:	b11b      	cbz	r3, 169ca <pdn_interface_pdn_id_get+0x62>
   169c2:	689b      	ldr	r3, [r3, #8]
   169c4:	2b03      	cmp	r3, #3
   169c6:	f000 8161 	beq.w	16c8c <pdn_interface_pdn_id_get+0x324>
   169ca:	69a3      	ldr	r3, [r4, #24]
   169cc:	b11b      	cbz	r3, 169d6 <pdn_interface_pdn_id_get+0x6e>
   169ce:	689b      	ldr	r3, [r3, #8]
   169d0:	2b03      	cmp	r3, #3
   169d2:	f000 814a 	beq.w	16c6a <pdn_interface_pdn_id_get+0x302>
   169d6:	69e3      	ldr	r3, [r4, #28]
   169d8:	b11b      	cbz	r3, 169e2 <pdn_interface_pdn_id_get+0x7a>
   169da:	689b      	ldr	r3, [r3, #8]
   169dc:	2b03      	cmp	r3, #3
   169de:	f000 8133 	beq.w	16c48 <pdn_interface_pdn_id_get+0x2e0>
   169e2:	6a23      	ldr	r3, [r4, #32]
   169e4:	b11b      	cbz	r3, 169ee <pdn_interface_pdn_id_get+0x86>
   169e6:	689b      	ldr	r3, [r3, #8]
   169e8:	2b03      	cmp	r3, #3
   169ea:	f000 811c 	beq.w	16c26 <pdn_interface_pdn_id_get+0x2be>
   169ee:	6a63      	ldr	r3, [r4, #36]	; 0x24
   169f0:	b11b      	cbz	r3, 169fa <pdn_interface_pdn_id_get+0x92>
   169f2:	689b      	ldr	r3, [r3, #8]
   169f4:	2b03      	cmp	r3, #3
   169f6:	f000 80ad 	beq.w	16b54 <pdn_interface_pdn_id_get+0x1ec>
   169fa:	f04f 30ff 	mov.w	r0, #4294967295
   169fe:	b003      	add	sp, #12
   16a00:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   16a04:	b11b      	cbz	r3, 16a0e <pdn_interface_pdn_id_get+0xa6>
   16a06:	689b      	ldr	r3, [r3, #8]
   16a08:	2b03      	cmp	r3, #3
   16a0a:	f000 8335 	beq.w	17078 <pdn_interface_pdn_id_get+0x710>
   16a0e:	6863      	ldr	r3, [r4, #4]
   16a10:	b11b      	cbz	r3, 16a1a <pdn_interface_pdn_id_get+0xb2>
   16a12:	689b      	ldr	r3, [r3, #8]
   16a14:	2b03      	cmp	r3, #3
   16a16:	f000 82fd 	beq.w	17014 <pdn_interface_pdn_id_get+0x6ac>
   16a1a:	68a3      	ldr	r3, [r4, #8]
   16a1c:	b11b      	cbz	r3, 16a26 <pdn_interface_pdn_id_get+0xbe>
   16a1e:	689b      	ldr	r3, [r3, #8]
   16a20:	2b03      	cmp	r3, #3
   16a22:	f000 82d5 	beq.w	16fd0 <pdn_interface_pdn_id_get+0x668>
   16a26:	68e3      	ldr	r3, [r4, #12]
   16a28:	b11b      	cbz	r3, 16a32 <pdn_interface_pdn_id_get+0xca>
   16a2a:	689e      	ldr	r6, [r3, #8]
   16a2c:	2e03      	cmp	r6, #3
   16a2e:	f000 81f0 	beq.w	16e12 <pdn_interface_pdn_id_get+0x4aa>
   16a32:	6923      	ldr	r3, [r4, #16]
   16a34:	b11b      	cbz	r3, 16a3e <pdn_interface_pdn_id_get+0xd6>
   16a36:	689b      	ldr	r3, [r3, #8]
   16a38:	2b03      	cmp	r3, #3
   16a3a:	f000 8203 	beq.w	16e44 <pdn_interface_pdn_id_get+0x4dc>
   16a3e:	6963      	ldr	r3, [r4, #20]
   16a40:	b11b      	cbz	r3, 16a4a <pdn_interface_pdn_id_get+0xe2>
   16a42:	689b      	ldr	r3, [r3, #8]
   16a44:	2b03      	cmp	r3, #3
   16a46:	f000 8215 	beq.w	16e74 <pdn_interface_pdn_id_get+0x50c>
   16a4a:	69a3      	ldr	r3, [r4, #24]
   16a4c:	b11b      	cbz	r3, 16a56 <pdn_interface_pdn_id_get+0xee>
   16a4e:	689b      	ldr	r3, [r3, #8]
   16a50:	2b03      	cmp	r3, #3
   16a52:	f000 8227 	beq.w	16ea4 <pdn_interface_pdn_id_get+0x53c>
   16a56:	69e3      	ldr	r3, [r4, #28]
   16a58:	b11b      	cbz	r3, 16a62 <pdn_interface_pdn_id_get+0xfa>
   16a5a:	689b      	ldr	r3, [r3, #8]
   16a5c:	2b03      	cmp	r3, #3
   16a5e:	f000 8239 	beq.w	16ed4 <pdn_interface_pdn_id_get+0x56c>
   16a62:	6a23      	ldr	r3, [r4, #32]
   16a64:	b11b      	cbz	r3, 16a6e <pdn_interface_pdn_id_get+0x106>
   16a66:	689b      	ldr	r3, [r3, #8]
   16a68:	2b03      	cmp	r3, #3
   16a6a:	f000 824d 	beq.w	16f08 <pdn_interface_pdn_id_get+0x5a0>
   16a6e:	6a63      	ldr	r3, [r4, #36]	; 0x24
   16a70:	2b00      	cmp	r3, #0
   16a72:	d0c2      	beq.n	169fa <pdn_interface_pdn_id_get+0x92>
   16a74:	689b      	ldr	r3, [r3, #8]
   16a76:	2b03      	cmp	r3, #3
   16a78:	d1bf      	bne.n	169fa <pdn_interface_pdn_id_get+0x92>
   16a7a:	4628      	mov	r0, r5
   16a7c:	f7f6 f9fc 	bl	ce78 <strlen>
   16a80:	4606      	mov	r6, r0
   16a82:	6a60      	ldr	r0, [r4, #36]	; 0x24
   16a84:	300c      	adds	r0, #12
   16a86:	f7f6 f9f7 	bl	ce78 <strlen>
   16a8a:	42b0      	cmp	r0, r6
   16a8c:	d1b5      	bne.n	169fa <pdn_interface_pdn_id_get+0x92>
   16a8e:	6a61      	ldr	r1, [r4, #36]	; 0x24
   16a90:	4628      	mov	r0, r5
   16a92:	310c      	adds	r1, #12
   16a94:	f7f6 f9e6 	bl	ce64 <strcmp>
   16a98:	2800      	cmp	r0, #0
   16a9a:	d1ae      	bne.n	169fa <pdn_interface_pdn_id_get+0x92>
   16a9c:	6a63      	ldr	r3, [r4, #36]	; 0x24
   16a9e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   16aa0:	0792      	lsls	r2, r2, #30
   16aa2:	d5aa      	bpl.n	169fa <pdn_interface_pdn_id_get+0x92>
   16aa4:	2609      	movs	r6, #9
   16aa6:	e11a      	b.n	16cde <pdn_interface_pdn_id_get+0x376>
   16aa8:	b11b      	cbz	r3, 16ab2 <pdn_interface_pdn_id_get+0x14a>
   16aaa:	689b      	ldr	r3, [r3, #8]
   16aac:	2b03      	cmp	r3, #3
   16aae:	f000 82fd 	beq.w	170ac <pdn_interface_pdn_id_get+0x744>
   16ab2:	6863      	ldr	r3, [r4, #4]
   16ab4:	b11b      	cbz	r3, 16abe <pdn_interface_pdn_id_get+0x156>
   16ab6:	689b      	ldr	r3, [r3, #8]
   16ab8:	2b03      	cmp	r3, #3
   16aba:	f000 82c5 	beq.w	17048 <pdn_interface_pdn_id_get+0x6e0>
   16abe:	68a3      	ldr	r3, [r4, #8]
   16ac0:	b11b      	cbz	r3, 16aca <pdn_interface_pdn_id_get+0x162>
   16ac2:	689b      	ldr	r3, [r3, #8]
   16ac4:	2b03      	cmp	r3, #3
   16ac6:	f000 8269 	beq.w	16f9c <pdn_interface_pdn_id_get+0x634>
   16aca:	68e3      	ldr	r3, [r4, #12]
   16acc:	b11b      	cbz	r3, 16ad6 <pdn_interface_pdn_id_get+0x16e>
   16ace:	689e      	ldr	r6, [r3, #8]
   16ad0:	2e03      	cmp	r6, #3
   16ad2:	f000 80ec 	beq.w	16cae <pdn_interface_pdn_id_get+0x346>
   16ad6:	6923      	ldr	r3, [r4, #16]
   16ad8:	b11b      	cbz	r3, 16ae2 <pdn_interface_pdn_id_get+0x17a>
   16ada:	689b      	ldr	r3, [r3, #8]
   16adc:	2b03      	cmp	r3, #3
   16ade:	f000 814a 	beq.w	16d76 <pdn_interface_pdn_id_get+0x40e>
   16ae2:	6963      	ldr	r3, [r4, #20]
   16ae4:	b11b      	cbz	r3, 16aee <pdn_interface_pdn_id_get+0x186>
   16ae6:	689b      	ldr	r3, [r3, #8]
   16ae8:	2b03      	cmp	r3, #3
   16aea:	f000 815e 	beq.w	16daa <pdn_interface_pdn_id_get+0x442>
   16aee:	69a3      	ldr	r3, [r4, #24]
   16af0:	b11b      	cbz	r3, 16afa <pdn_interface_pdn_id_get+0x192>
   16af2:	689b      	ldr	r3, [r3, #8]
   16af4:	2b03      	cmp	r3, #3
   16af6:	f000 8172 	beq.w	16dde <pdn_interface_pdn_id_get+0x476>
   16afa:	69e3      	ldr	r3, [r4, #28]
   16afc:	b11b      	cbz	r3, 16b06 <pdn_interface_pdn_id_get+0x19e>
   16afe:	689b      	ldr	r3, [r3, #8]
   16b00:	2b03      	cmp	r3, #3
   16b02:	f000 821b 	beq.w	16f3c <pdn_interface_pdn_id_get+0x5d4>
   16b06:	6a23      	ldr	r3, [r4, #32]
   16b08:	b11b      	cbz	r3, 16b12 <pdn_interface_pdn_id_get+0x1aa>
   16b0a:	689b      	ldr	r3, [r3, #8]
   16b0c:	2b03      	cmp	r3, #3
   16b0e:	f000 822d 	beq.w	16f6c <pdn_interface_pdn_id_get+0x604>
   16b12:	6a63      	ldr	r3, [r4, #36]	; 0x24
   16b14:	2b00      	cmp	r3, #0
   16b16:	f43f af70 	beq.w	169fa <pdn_interface_pdn_id_get+0x92>
   16b1a:	689b      	ldr	r3, [r3, #8]
   16b1c:	2b03      	cmp	r3, #3
   16b1e:	f47f af6c 	bne.w	169fa <pdn_interface_pdn_id_get+0x92>
   16b22:	4628      	mov	r0, r5
   16b24:	f7f6 f9a8 	bl	ce78 <strlen>
   16b28:	4606      	mov	r6, r0
   16b2a:	6a60      	ldr	r0, [r4, #36]	; 0x24
   16b2c:	300c      	adds	r0, #12
   16b2e:	f7f6 f9a3 	bl	ce78 <strlen>
   16b32:	4286      	cmp	r6, r0
   16b34:	f47f af61 	bne.w	169fa <pdn_interface_pdn_id_get+0x92>
   16b38:	6a61      	ldr	r1, [r4, #36]	; 0x24
   16b3a:	4628      	mov	r0, r5
   16b3c:	310c      	adds	r1, #12
   16b3e:	f7f6 f991 	bl	ce64 <strcmp>
   16b42:	2800      	cmp	r0, #0
   16b44:	f47f af59 	bne.w	169fa <pdn_interface_pdn_id_get+0x92>
   16b48:	6a63      	ldr	r3, [r4, #36]	; 0x24
   16b4a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   16b4c:	07d2      	lsls	r2, r2, #31
   16b4e:	f57f af54 	bpl.w	169fa <pdn_interface_pdn_id_get+0x92>
   16b52:	e7a7      	b.n	16aa4 <pdn_interface_pdn_id_get+0x13c>
   16b54:	4628      	mov	r0, r5
   16b56:	f7f6 f98f 	bl	ce78 <strlen>
   16b5a:	4606      	mov	r6, r0
   16b5c:	6a60      	ldr	r0, [r4, #36]	; 0x24
   16b5e:	300c      	adds	r0, #12
   16b60:	f7f6 f98a 	bl	ce78 <strlen>
   16b64:	42b0      	cmp	r0, r6
   16b66:	f47f af48 	bne.w	169fa <pdn_interface_pdn_id_get+0x92>
   16b6a:	6a61      	ldr	r1, [r4, #36]	; 0x24
   16b6c:	4628      	mov	r0, r5
   16b6e:	310c      	adds	r1, #12
   16b70:	f7f6 f978 	bl	ce64 <strcmp>
   16b74:	e741      	b.n	169fa <pdn_interface_pdn_id_get+0x92>
   16b76:	4628      	mov	r0, r5
   16b78:	f7f6 f97e 	bl	ce78 <strlen>
   16b7c:	4606      	mov	r6, r0
   16b7e:	68e0      	ldr	r0, [r4, #12]
   16b80:	300c      	adds	r0, #12
   16b82:	f7f6 f979 	bl	ce78 <strlen>
   16b86:	4286      	cmp	r6, r0
   16b88:	f47f af13 	bne.w	169b2 <pdn_interface_pdn_id_get+0x4a>
   16b8c:	68e1      	ldr	r1, [r4, #12]
   16b8e:	4628      	mov	r0, r5
   16b90:	310c      	adds	r1, #12
   16b92:	f7f6 f967 	bl	ce64 <strcmp>
   16b96:	e70c      	b.n	169b2 <pdn_interface_pdn_id_get+0x4a>
   16b98:	4628      	mov	r0, r5
   16b9a:	f7f6 f96d 	bl	ce78 <strlen>
   16b9e:	4606      	mov	r6, r0
   16ba0:	68a0      	ldr	r0, [r4, #8]
   16ba2:	300c      	adds	r0, #12
   16ba4:	f7f6 f968 	bl	ce78 <strlen>
   16ba8:	4286      	cmp	r6, r0
   16baa:	f47f aefc 	bne.w	169a6 <pdn_interface_pdn_id_get+0x3e>
   16bae:	68a1      	ldr	r1, [r4, #8]
   16bb0:	4628      	mov	r0, r5
   16bb2:	310c      	adds	r1, #12
   16bb4:	f7f6 f956 	bl	ce64 <strcmp>
   16bb8:	e6f5      	b.n	169a6 <pdn_interface_pdn_id_get+0x3e>
   16bba:	4628      	mov	r0, r5
   16bbc:	f7f6 f95c 	bl	ce78 <strlen>
   16bc0:	4606      	mov	r6, r0
   16bc2:	6860      	ldr	r0, [r4, #4]
   16bc4:	300c      	adds	r0, #12
   16bc6:	f7f6 f957 	bl	ce78 <strlen>
   16bca:	4286      	cmp	r6, r0
   16bcc:	f47f aee5 	bne.w	1699a <pdn_interface_pdn_id_get+0x32>
   16bd0:	6861      	ldr	r1, [r4, #4]
   16bd2:	4628      	mov	r0, r5
   16bd4:	310c      	adds	r1, #12
   16bd6:	f7f6 f945 	bl	ce64 <strcmp>
   16bda:	e6de      	b.n	1699a <pdn_interface_pdn_id_get+0x32>
   16bdc:	4608      	mov	r0, r1
   16bde:	f7f6 f94b 	bl	ce78 <strlen>
   16be2:	4606      	mov	r6, r0
   16be4:	6820      	ldr	r0, [r4, #0]
   16be6:	300c      	adds	r0, #12
   16be8:	f7f6 f946 	bl	ce78 <strlen>
   16bec:	4286      	cmp	r6, r0
   16bee:	f47f aece 	bne.w	1698e <pdn_interface_pdn_id_get+0x26>
   16bf2:	6821      	ldr	r1, [r4, #0]
   16bf4:	4628      	mov	r0, r5
   16bf6:	310c      	adds	r1, #12
   16bf8:	f7f6 f934 	bl	ce64 <strcmp>
   16bfc:	e6c7      	b.n	1698e <pdn_interface_pdn_id_get+0x26>
   16bfe:	bf00      	nop
   16c00:	200207dc 	.word	0x200207dc
   16c04:	4628      	mov	r0, r5
   16c06:	f7f6 f937 	bl	ce78 <strlen>
   16c0a:	4606      	mov	r6, r0
   16c0c:	6920      	ldr	r0, [r4, #16]
   16c0e:	300c      	adds	r0, #12
   16c10:	f7f6 f932 	bl	ce78 <strlen>
   16c14:	4286      	cmp	r6, r0
   16c16:	f47f aed2 	bne.w	169be <pdn_interface_pdn_id_get+0x56>
   16c1a:	6921      	ldr	r1, [r4, #16]
   16c1c:	4628      	mov	r0, r5
   16c1e:	310c      	adds	r1, #12
   16c20:	f7f6 f920 	bl	ce64 <strcmp>
   16c24:	e6cb      	b.n	169be <pdn_interface_pdn_id_get+0x56>
   16c26:	4628      	mov	r0, r5
   16c28:	f7f6 f926 	bl	ce78 <strlen>
   16c2c:	4606      	mov	r6, r0
   16c2e:	6a20      	ldr	r0, [r4, #32]
   16c30:	300c      	adds	r0, #12
   16c32:	f7f6 f921 	bl	ce78 <strlen>
   16c36:	4286      	cmp	r6, r0
   16c38:	f47f aed9 	bne.w	169ee <pdn_interface_pdn_id_get+0x86>
   16c3c:	6a21      	ldr	r1, [r4, #32]
   16c3e:	4628      	mov	r0, r5
   16c40:	310c      	adds	r1, #12
   16c42:	f7f6 f90f 	bl	ce64 <strcmp>
   16c46:	e6d2      	b.n	169ee <pdn_interface_pdn_id_get+0x86>
   16c48:	4628      	mov	r0, r5
   16c4a:	f7f6 f915 	bl	ce78 <strlen>
   16c4e:	4606      	mov	r6, r0
   16c50:	69e0      	ldr	r0, [r4, #28]
   16c52:	300c      	adds	r0, #12
   16c54:	f7f6 f910 	bl	ce78 <strlen>
   16c58:	4286      	cmp	r6, r0
   16c5a:	f47f aec2 	bne.w	169e2 <pdn_interface_pdn_id_get+0x7a>
   16c5e:	69e1      	ldr	r1, [r4, #28]
   16c60:	4628      	mov	r0, r5
   16c62:	310c      	adds	r1, #12
   16c64:	f7f6 f8fe 	bl	ce64 <strcmp>
   16c68:	e6bb      	b.n	169e2 <pdn_interface_pdn_id_get+0x7a>
   16c6a:	4628      	mov	r0, r5
   16c6c:	f7f6 f904 	bl	ce78 <strlen>
   16c70:	4606      	mov	r6, r0
   16c72:	69a0      	ldr	r0, [r4, #24]
   16c74:	300c      	adds	r0, #12
   16c76:	f7f6 f8ff 	bl	ce78 <strlen>
   16c7a:	4286      	cmp	r6, r0
   16c7c:	f47f aeab 	bne.w	169d6 <pdn_interface_pdn_id_get+0x6e>
   16c80:	69a1      	ldr	r1, [r4, #24]
   16c82:	4628      	mov	r0, r5
   16c84:	310c      	adds	r1, #12
   16c86:	f7f6 f8ed 	bl	ce64 <strcmp>
   16c8a:	e6a4      	b.n	169d6 <pdn_interface_pdn_id_get+0x6e>
   16c8c:	4628      	mov	r0, r5
   16c8e:	f7f6 f8f3 	bl	ce78 <strlen>
   16c92:	4606      	mov	r6, r0
   16c94:	6960      	ldr	r0, [r4, #20]
   16c96:	300c      	adds	r0, #12
   16c98:	f7f6 f8ee 	bl	ce78 <strlen>
   16c9c:	4286      	cmp	r6, r0
   16c9e:	f47f ae94 	bne.w	169ca <pdn_interface_pdn_id_get+0x62>
   16ca2:	6961      	ldr	r1, [r4, #20]
   16ca4:	4628      	mov	r0, r5
   16ca6:	310c      	adds	r1, #12
   16ca8:	f7f6 f8dc 	bl	ce64 <strcmp>
   16cac:	e68d      	b.n	169ca <pdn_interface_pdn_id_get+0x62>
   16cae:	4628      	mov	r0, r5
   16cb0:	f7f6 f8e2 	bl	ce78 <strlen>
   16cb4:	4607      	mov	r7, r0
   16cb6:	68e0      	ldr	r0, [r4, #12]
   16cb8:	300c      	adds	r0, #12
   16cba:	f7f6 f8dd 	bl	ce78 <strlen>
   16cbe:	4287      	cmp	r7, r0
   16cc0:	f47f af09 	bne.w	16ad6 <pdn_interface_pdn_id_get+0x16e>
   16cc4:	68e1      	ldr	r1, [r4, #12]
   16cc6:	4628      	mov	r0, r5
   16cc8:	310c      	adds	r1, #12
   16cca:	f7f6 f8cb 	bl	ce64 <strcmp>
   16cce:	2800      	cmp	r0, #0
   16cd0:	f47f af01 	bne.w	16ad6 <pdn_interface_pdn_id_get+0x16e>
   16cd4:	68e3      	ldr	r3, [r4, #12]
   16cd6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   16cd8:	07d1      	lsls	r1, r2, #31
   16cda:	f57f aefc 	bpl.w	16ad6 <pdn_interface_pdn_id_get+0x16e>
   16cde:	6858      	ldr	r0, [r3, #4]
   16ce0:	1c43      	adds	r3, r0, #1
   16ce2:	f47f ae8c 	bne.w	169fe <pdn_interface_pdn_id_get+0x96>
   16ce6:	4dc6      	ldr	r5, [pc, #792]	; (17000 <pdn_interface_pdn_id_get+0x698>)
   16ce8:	4ac6      	ldr	r2, [pc, #792]	; (17004 <pdn_interface_pdn_id_get+0x69c>)
   16cea:	f44f 7180 	mov.w	r1, #256	; 0x100
   16cee:	4628      	mov	r0, r5
   16cf0:	f007 ff36 	bl	1eb60 <sniprintf>
   16cf4:	f854 3026 	ldr.w	r3, [r4, r6, lsl #2]
   16cf8:	f5c0 7180 	rsb	r1, r0, #256	; 0x100
   16cfc:	681b      	ldr	r3, [r3, #0]
   16cfe:	4ac2      	ldr	r2, [pc, #776]	; (17008 <pdn_interface_pdn_id_get+0x6a0>)
   16d00:	4428      	add	r0, r5
   16d02:	f8df 830c 	ldr.w	r8, [pc, #780]	; 17010 <pdn_interface_pdn_id_get+0x6a8>
   16d06:	f007 ff2b 	bl	1eb60 <sniprintf>
   16d0a:	4628      	mov	r0, r5
   16d0c:	f8d8 9000 	ldr.w	r9, [r8]
   16d10:	2700      	movs	r7, #0
   16d12:	f7f6 f8b1 	bl	ce78 <strlen>
   16d16:	4629      	mov	r1, r5
   16d18:	4602      	mov	r2, r0
   16d1a:	463b      	mov	r3, r7
   16d1c:	4648      	mov	r0, r9
   16d1e:	9701      	str	r7, [sp, #4]
   16d20:	9700      	str	r7, [sp, #0]
   16d22:	f7fc f98f 	bl	13044 <at_interface_write>
   16d26:	4681      	mov	r9, r0
   16d28:	4628      	mov	r0, r5
   16d2a:	f7f6 f8a5 	bl	ce78 <strlen>
   16d2e:	4548      	cmp	r0, r9
   16d30:	f040 81e9 	bne.w	17106 <pdn_interface_pdn_id_get+0x79e>
   16d34:	463b      	mov	r3, r7
   16d36:	f44f 7280 	mov.w	r2, #256	; 0x100
   16d3a:	e9cd 7700 	strd	r7, r7, [sp]
   16d3e:	4629      	mov	r1, r5
   16d40:	f8d8 0000 	ldr.w	r0, [r8]
   16d44:	f7fc fa82 	bl	1324c <at_interface_read>
   16d48:	4607      	mov	r7, r0
   16d4a:	48b0      	ldr	r0, [pc, #704]	; (1700c <pdn_interface_pdn_id_get+0x6a4>)
   16d4c:	f7f6 f894 	bl	ce78 <strlen>
   16d50:	4287      	cmp	r7, r0
   16d52:	4602      	mov	r2, r0
   16d54:	f2c0 81c7 	blt.w	170e6 <pdn_interface_pdn_id_get+0x77e>
   16d58:	4629      	mov	r1, r5
   16d5a:	48ac      	ldr	r0, [pc, #688]	; (1700c <pdn_interface_pdn_id_get+0x6a4>)
   16d5c:	f00a ff5a 	bl	21c14 <strncmp>
   16d60:	2800      	cmp	r0, #0
   16d62:	f040 81c0 	bne.w	170e6 <pdn_interface_pdn_id_get+0x77e>
   16d66:	4629      	mov	r1, r5
   16d68:	4630      	mov	r0, r6
   16d6a:	f7ff f937 	bl	15fdc <pdn_id_get_parser>
   16d6e:	f854 3026 	ldr.w	r3, [r4, r6, lsl #2]
   16d72:	6858      	ldr	r0, [r3, #4]
   16d74:	e643      	b.n	169fe <pdn_interface_pdn_id_get+0x96>
   16d76:	4628      	mov	r0, r5
   16d78:	f7f6 f87e 	bl	ce78 <strlen>
   16d7c:	4606      	mov	r6, r0
   16d7e:	6920      	ldr	r0, [r4, #16]
   16d80:	300c      	adds	r0, #12
   16d82:	f7f6 f879 	bl	ce78 <strlen>
   16d86:	4286      	cmp	r6, r0
   16d88:	f47f aeab 	bne.w	16ae2 <pdn_interface_pdn_id_get+0x17a>
   16d8c:	6921      	ldr	r1, [r4, #16]
   16d8e:	4628      	mov	r0, r5
   16d90:	310c      	adds	r1, #12
   16d92:	f7f6 f867 	bl	ce64 <strcmp>
   16d96:	2800      	cmp	r0, #0
   16d98:	f47f aea3 	bne.w	16ae2 <pdn_interface_pdn_id_get+0x17a>
   16d9c:	6923      	ldr	r3, [r4, #16]
   16d9e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   16da0:	07d2      	lsls	r2, r2, #31
   16da2:	f57f ae9e 	bpl.w	16ae2 <pdn_interface_pdn_id_get+0x17a>
   16da6:	2604      	movs	r6, #4
   16da8:	e799      	b.n	16cde <pdn_interface_pdn_id_get+0x376>
   16daa:	4628      	mov	r0, r5
   16dac:	f7f6 f864 	bl	ce78 <strlen>
   16db0:	4606      	mov	r6, r0
   16db2:	6960      	ldr	r0, [r4, #20]
   16db4:	300c      	adds	r0, #12
   16db6:	f7f6 f85f 	bl	ce78 <strlen>
   16dba:	4286      	cmp	r6, r0
   16dbc:	f47f ae97 	bne.w	16aee <pdn_interface_pdn_id_get+0x186>
   16dc0:	6961      	ldr	r1, [r4, #20]
   16dc2:	4628      	mov	r0, r5
   16dc4:	310c      	adds	r1, #12
   16dc6:	f7f6 f84d 	bl	ce64 <strcmp>
   16dca:	2800      	cmp	r0, #0
   16dcc:	f47f ae8f 	bne.w	16aee <pdn_interface_pdn_id_get+0x186>
   16dd0:	6963      	ldr	r3, [r4, #20]
   16dd2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   16dd4:	07d7      	lsls	r7, r2, #31
   16dd6:	f57f ae8a 	bpl.w	16aee <pdn_interface_pdn_id_get+0x186>
   16dda:	2605      	movs	r6, #5
   16ddc:	e77f      	b.n	16cde <pdn_interface_pdn_id_get+0x376>
   16dde:	4628      	mov	r0, r5
   16de0:	f7f6 f84a 	bl	ce78 <strlen>
   16de4:	4606      	mov	r6, r0
   16de6:	69a0      	ldr	r0, [r4, #24]
   16de8:	300c      	adds	r0, #12
   16dea:	f7f6 f845 	bl	ce78 <strlen>
   16dee:	4286      	cmp	r6, r0
   16df0:	f47f ae83 	bne.w	16afa <pdn_interface_pdn_id_get+0x192>
   16df4:	69a1      	ldr	r1, [r4, #24]
   16df6:	4628      	mov	r0, r5
   16df8:	310c      	adds	r1, #12
   16dfa:	f7f6 f833 	bl	ce64 <strcmp>
   16dfe:	2800      	cmp	r0, #0
   16e00:	f47f ae7b 	bne.w	16afa <pdn_interface_pdn_id_get+0x192>
   16e04:	69a3      	ldr	r3, [r4, #24]
   16e06:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   16e08:	07d6      	lsls	r6, r2, #31
   16e0a:	f57f ae76 	bpl.w	16afa <pdn_interface_pdn_id_get+0x192>
   16e0e:	2606      	movs	r6, #6
   16e10:	e765      	b.n	16cde <pdn_interface_pdn_id_get+0x376>
   16e12:	4628      	mov	r0, r5
   16e14:	f7f6 f830 	bl	ce78 <strlen>
   16e18:	4607      	mov	r7, r0
   16e1a:	68e0      	ldr	r0, [r4, #12]
   16e1c:	300c      	adds	r0, #12
   16e1e:	f7f6 f82b 	bl	ce78 <strlen>
   16e22:	4287      	cmp	r7, r0
   16e24:	f47f ae05 	bne.w	16a32 <pdn_interface_pdn_id_get+0xca>
   16e28:	68e1      	ldr	r1, [r4, #12]
   16e2a:	4628      	mov	r0, r5
   16e2c:	310c      	adds	r1, #12
   16e2e:	f7f6 f819 	bl	ce64 <strcmp>
   16e32:	2800      	cmp	r0, #0
   16e34:	f47f adfd 	bne.w	16a32 <pdn_interface_pdn_id_get+0xca>
   16e38:	68e3      	ldr	r3, [r4, #12]
   16e3a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   16e3c:	0791      	lsls	r1, r2, #30
   16e3e:	f53f af4e 	bmi.w	16cde <pdn_interface_pdn_id_get+0x376>
   16e42:	e5f6      	b.n	16a32 <pdn_interface_pdn_id_get+0xca>
   16e44:	4628      	mov	r0, r5
   16e46:	f7f6 f817 	bl	ce78 <strlen>
   16e4a:	4606      	mov	r6, r0
   16e4c:	6920      	ldr	r0, [r4, #16]
   16e4e:	300c      	adds	r0, #12
   16e50:	f7f6 f812 	bl	ce78 <strlen>
   16e54:	4286      	cmp	r6, r0
   16e56:	f47f adf2 	bne.w	16a3e <pdn_interface_pdn_id_get+0xd6>
   16e5a:	6921      	ldr	r1, [r4, #16]
   16e5c:	4628      	mov	r0, r5
   16e5e:	310c      	adds	r1, #12
   16e60:	f7f6 f800 	bl	ce64 <strcmp>
   16e64:	2800      	cmp	r0, #0
   16e66:	f47f adea 	bne.w	16a3e <pdn_interface_pdn_id_get+0xd6>
   16e6a:	6923      	ldr	r3, [r4, #16]
   16e6c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   16e6e:	0792      	lsls	r2, r2, #30
   16e70:	d499      	bmi.n	16da6 <pdn_interface_pdn_id_get+0x43e>
   16e72:	e5e4      	b.n	16a3e <pdn_interface_pdn_id_get+0xd6>
   16e74:	4628      	mov	r0, r5
   16e76:	f7f5 ffff 	bl	ce78 <strlen>
   16e7a:	4606      	mov	r6, r0
   16e7c:	6960      	ldr	r0, [r4, #20]
   16e7e:	300c      	adds	r0, #12
   16e80:	f7f5 fffa 	bl	ce78 <strlen>
   16e84:	4286      	cmp	r6, r0
   16e86:	f47f ade0 	bne.w	16a4a <pdn_interface_pdn_id_get+0xe2>
   16e8a:	6961      	ldr	r1, [r4, #20]
   16e8c:	4628      	mov	r0, r5
   16e8e:	310c      	adds	r1, #12
   16e90:	f7f5 ffe8 	bl	ce64 <strcmp>
   16e94:	2800      	cmp	r0, #0
   16e96:	f47f add8 	bne.w	16a4a <pdn_interface_pdn_id_get+0xe2>
   16e9a:	6963      	ldr	r3, [r4, #20]
   16e9c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   16e9e:	0797      	lsls	r7, r2, #30
   16ea0:	d49b      	bmi.n	16dda <pdn_interface_pdn_id_get+0x472>
   16ea2:	e5d2      	b.n	16a4a <pdn_interface_pdn_id_get+0xe2>
   16ea4:	4628      	mov	r0, r5
   16ea6:	f7f5 ffe7 	bl	ce78 <strlen>
   16eaa:	4606      	mov	r6, r0
   16eac:	69a0      	ldr	r0, [r4, #24]
   16eae:	300c      	adds	r0, #12
   16eb0:	f7f5 ffe2 	bl	ce78 <strlen>
   16eb4:	4286      	cmp	r6, r0
   16eb6:	f47f adce 	bne.w	16a56 <pdn_interface_pdn_id_get+0xee>
   16eba:	69a1      	ldr	r1, [r4, #24]
   16ebc:	4628      	mov	r0, r5
   16ebe:	310c      	adds	r1, #12
   16ec0:	f7f5 ffd0 	bl	ce64 <strcmp>
   16ec4:	2800      	cmp	r0, #0
   16ec6:	f47f adc6 	bne.w	16a56 <pdn_interface_pdn_id_get+0xee>
   16eca:	69a3      	ldr	r3, [r4, #24]
   16ecc:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   16ece:	0796      	lsls	r6, r2, #30
   16ed0:	d49d      	bmi.n	16e0e <pdn_interface_pdn_id_get+0x4a6>
   16ed2:	e5c0      	b.n	16a56 <pdn_interface_pdn_id_get+0xee>
   16ed4:	4628      	mov	r0, r5
   16ed6:	f7f5 ffcf 	bl	ce78 <strlen>
   16eda:	4606      	mov	r6, r0
   16edc:	69e0      	ldr	r0, [r4, #28]
   16ede:	300c      	adds	r0, #12
   16ee0:	f7f5 ffca 	bl	ce78 <strlen>
   16ee4:	4286      	cmp	r6, r0
   16ee6:	f47f adbc 	bne.w	16a62 <pdn_interface_pdn_id_get+0xfa>
   16eea:	69e1      	ldr	r1, [r4, #28]
   16eec:	4628      	mov	r0, r5
   16eee:	310c      	adds	r1, #12
   16ef0:	f7f5 ffb8 	bl	ce64 <strcmp>
   16ef4:	2800      	cmp	r0, #0
   16ef6:	f47f adb4 	bne.w	16a62 <pdn_interface_pdn_id_get+0xfa>
   16efa:	69e3      	ldr	r3, [r4, #28]
   16efc:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   16efe:	0790      	lsls	r0, r2, #30
   16f00:	f57f adaf 	bpl.w	16a62 <pdn_interface_pdn_id_get+0xfa>
   16f04:	2607      	movs	r6, #7
   16f06:	e6ea      	b.n	16cde <pdn_interface_pdn_id_get+0x376>
   16f08:	4628      	mov	r0, r5
   16f0a:	f7f5 ffb5 	bl	ce78 <strlen>
   16f0e:	4606      	mov	r6, r0
   16f10:	6a20      	ldr	r0, [r4, #32]
   16f12:	300c      	adds	r0, #12
   16f14:	f7f5 ffb0 	bl	ce78 <strlen>
   16f18:	4286      	cmp	r6, r0
   16f1a:	f47f ada8 	bne.w	16a6e <pdn_interface_pdn_id_get+0x106>
   16f1e:	6a21      	ldr	r1, [r4, #32]
   16f20:	4628      	mov	r0, r5
   16f22:	310c      	adds	r1, #12
   16f24:	f7f5 ff9e 	bl	ce64 <strcmp>
   16f28:	2800      	cmp	r0, #0
   16f2a:	f47f ada0 	bne.w	16a6e <pdn_interface_pdn_id_get+0x106>
   16f2e:	6a23      	ldr	r3, [r4, #32]
   16f30:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   16f32:	0791      	lsls	r1, r2, #30
   16f34:	f57f ad9b 	bpl.w	16a6e <pdn_interface_pdn_id_get+0x106>
   16f38:	2608      	movs	r6, #8
   16f3a:	e6d0      	b.n	16cde <pdn_interface_pdn_id_get+0x376>
   16f3c:	4628      	mov	r0, r5
   16f3e:	f7f5 ff9b 	bl	ce78 <strlen>
   16f42:	4606      	mov	r6, r0
   16f44:	69e0      	ldr	r0, [r4, #28]
   16f46:	300c      	adds	r0, #12
   16f48:	f7f5 ff96 	bl	ce78 <strlen>
   16f4c:	4286      	cmp	r6, r0
   16f4e:	f47f adda 	bne.w	16b06 <pdn_interface_pdn_id_get+0x19e>
   16f52:	69e1      	ldr	r1, [r4, #28]
   16f54:	4628      	mov	r0, r5
   16f56:	310c      	adds	r1, #12
   16f58:	f7f5 ff84 	bl	ce64 <strcmp>
   16f5c:	2800      	cmp	r0, #0
   16f5e:	f47f add2 	bne.w	16b06 <pdn_interface_pdn_id_get+0x19e>
   16f62:	69e3      	ldr	r3, [r4, #28]
   16f64:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   16f66:	07d0      	lsls	r0, r2, #31
   16f68:	d4cc      	bmi.n	16f04 <pdn_interface_pdn_id_get+0x59c>
   16f6a:	e5cc      	b.n	16b06 <pdn_interface_pdn_id_get+0x19e>
   16f6c:	4628      	mov	r0, r5
   16f6e:	f7f5 ff83 	bl	ce78 <strlen>
   16f72:	4606      	mov	r6, r0
   16f74:	6a20      	ldr	r0, [r4, #32]
   16f76:	300c      	adds	r0, #12
   16f78:	f7f5 ff7e 	bl	ce78 <strlen>
   16f7c:	4286      	cmp	r6, r0
   16f7e:	f47f adc8 	bne.w	16b12 <pdn_interface_pdn_id_get+0x1aa>
   16f82:	6a21      	ldr	r1, [r4, #32]
   16f84:	4628      	mov	r0, r5
   16f86:	310c      	adds	r1, #12
   16f88:	f7f5 ff6c 	bl	ce64 <strcmp>
   16f8c:	2800      	cmp	r0, #0
   16f8e:	f47f adc0 	bne.w	16b12 <pdn_interface_pdn_id_get+0x1aa>
   16f92:	6a23      	ldr	r3, [r4, #32]
   16f94:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   16f96:	07d1      	lsls	r1, r2, #31
   16f98:	d4ce      	bmi.n	16f38 <pdn_interface_pdn_id_get+0x5d0>
   16f9a:	e5ba      	b.n	16b12 <pdn_interface_pdn_id_get+0x1aa>
   16f9c:	4628      	mov	r0, r5
   16f9e:	f7f5 ff6b 	bl	ce78 <strlen>
   16fa2:	4606      	mov	r6, r0
   16fa4:	68a0      	ldr	r0, [r4, #8]
   16fa6:	300c      	adds	r0, #12
   16fa8:	f7f5 ff66 	bl	ce78 <strlen>
   16fac:	4286      	cmp	r6, r0
   16fae:	f47f ad8c 	bne.w	16aca <pdn_interface_pdn_id_get+0x162>
   16fb2:	68a1      	ldr	r1, [r4, #8]
   16fb4:	4628      	mov	r0, r5
   16fb6:	310c      	adds	r1, #12
   16fb8:	f7f5 ff54 	bl	ce64 <strcmp>
   16fbc:	2800      	cmp	r0, #0
   16fbe:	f47f ad84 	bne.w	16aca <pdn_interface_pdn_id_get+0x162>
   16fc2:	68a3      	ldr	r3, [r4, #8]
   16fc4:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   16fc6:	07d0      	lsls	r0, r2, #31
   16fc8:	f57f ad7f 	bpl.w	16aca <pdn_interface_pdn_id_get+0x162>
   16fcc:	2602      	movs	r6, #2
   16fce:	e686      	b.n	16cde <pdn_interface_pdn_id_get+0x376>
   16fd0:	4628      	mov	r0, r5
   16fd2:	f7f5 ff51 	bl	ce78 <strlen>
   16fd6:	4606      	mov	r6, r0
   16fd8:	68a0      	ldr	r0, [r4, #8]
   16fda:	300c      	adds	r0, #12
   16fdc:	f7f5 ff4c 	bl	ce78 <strlen>
   16fe0:	4286      	cmp	r6, r0
   16fe2:	f47f ad20 	bne.w	16a26 <pdn_interface_pdn_id_get+0xbe>
   16fe6:	68a1      	ldr	r1, [r4, #8]
   16fe8:	4628      	mov	r0, r5
   16fea:	310c      	adds	r1, #12
   16fec:	f7f5 ff3a 	bl	ce64 <strcmp>
   16ff0:	2800      	cmp	r0, #0
   16ff2:	f47f ad18 	bne.w	16a26 <pdn_interface_pdn_id_get+0xbe>
   16ff6:	68a3      	ldr	r3, [r4, #8]
   16ff8:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   16ffa:	0790      	lsls	r0, r2, #30
   16ffc:	d4e6      	bmi.n	16fcc <pdn_interface_pdn_id_get+0x664>
   16ffe:	e512      	b.n	16a26 <pdn_interface_pdn_id_get+0xbe>
   17000:	200206dc 	.word	0x200206dc
   17004:	00022e58 	.word	0x00022e58
   17008:	00022e54 	.word	0x00022e54
   1700c:	00022e68 	.word	0x00022e68
   17010:	200206d8 	.word	0x200206d8
   17014:	4628      	mov	r0, r5
   17016:	f7f5 ff2f 	bl	ce78 <strlen>
   1701a:	4606      	mov	r6, r0
   1701c:	6860      	ldr	r0, [r4, #4]
   1701e:	300c      	adds	r0, #12
   17020:	f7f5 ff2a 	bl	ce78 <strlen>
   17024:	4286      	cmp	r6, r0
   17026:	f47f acf8 	bne.w	16a1a <pdn_interface_pdn_id_get+0xb2>
   1702a:	6861      	ldr	r1, [r4, #4]
   1702c:	4628      	mov	r0, r5
   1702e:	310c      	adds	r1, #12
   17030:	f7f5 ff18 	bl	ce64 <strcmp>
   17034:	2800      	cmp	r0, #0
   17036:	f47f acf0 	bne.w	16a1a <pdn_interface_pdn_id_get+0xb2>
   1703a:	6863      	ldr	r3, [r4, #4]
   1703c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   1703e:	0796      	lsls	r6, r2, #30
   17040:	f57f aceb 	bpl.w	16a1a <pdn_interface_pdn_id_get+0xb2>
   17044:	2601      	movs	r6, #1
   17046:	e64a      	b.n	16cde <pdn_interface_pdn_id_get+0x376>
   17048:	4628      	mov	r0, r5
   1704a:	f7f5 ff15 	bl	ce78 <strlen>
   1704e:	4606      	mov	r6, r0
   17050:	6860      	ldr	r0, [r4, #4]
   17052:	300c      	adds	r0, #12
   17054:	f7f5 ff10 	bl	ce78 <strlen>
   17058:	4286      	cmp	r6, r0
   1705a:	f47f ad30 	bne.w	16abe <pdn_interface_pdn_id_get+0x156>
   1705e:	6861      	ldr	r1, [r4, #4]
   17060:	4628      	mov	r0, r5
   17062:	310c      	adds	r1, #12
   17064:	f7f5 fefe 	bl	ce64 <strcmp>
   17068:	2800      	cmp	r0, #0
   1706a:	f47f ad28 	bne.w	16abe <pdn_interface_pdn_id_get+0x156>
   1706e:	6863      	ldr	r3, [r4, #4]
   17070:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   17072:	07d6      	lsls	r6, r2, #31
   17074:	d4e6      	bmi.n	17044 <pdn_interface_pdn_id_get+0x6dc>
   17076:	e522      	b.n	16abe <pdn_interface_pdn_id_get+0x156>
   17078:	4608      	mov	r0, r1
   1707a:	f7f5 fefd 	bl	ce78 <strlen>
   1707e:	4606      	mov	r6, r0
   17080:	6820      	ldr	r0, [r4, #0]
   17082:	300c      	adds	r0, #12
   17084:	f7f5 fef8 	bl	ce78 <strlen>
   17088:	4286      	cmp	r6, r0
   1708a:	f47f acc0 	bne.w	16a0e <pdn_interface_pdn_id_get+0xa6>
   1708e:	6821      	ldr	r1, [r4, #0]
   17090:	4628      	mov	r0, r5
   17092:	310c      	adds	r1, #12
   17094:	f7f5 fee6 	bl	ce64 <strcmp>
   17098:	4606      	mov	r6, r0
   1709a:	2800      	cmp	r0, #0
   1709c:	f47f acb7 	bne.w	16a0e <pdn_interface_pdn_id_get+0xa6>
   170a0:	6823      	ldr	r3, [r4, #0]
   170a2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   170a4:	0797      	lsls	r7, r2, #30
   170a6:	f53f ae1a 	bmi.w	16cde <pdn_interface_pdn_id_get+0x376>
   170aa:	e4b0      	b.n	16a0e <pdn_interface_pdn_id_get+0xa6>
   170ac:	4608      	mov	r0, r1
   170ae:	f7f5 fee3 	bl	ce78 <strlen>
   170b2:	4606      	mov	r6, r0
   170b4:	6820      	ldr	r0, [r4, #0]
   170b6:	300c      	adds	r0, #12
   170b8:	f7f5 fede 	bl	ce78 <strlen>
   170bc:	4286      	cmp	r6, r0
   170be:	f47f acf8 	bne.w	16ab2 <pdn_interface_pdn_id_get+0x14a>
   170c2:	6821      	ldr	r1, [r4, #0]
   170c4:	4628      	mov	r0, r5
   170c6:	310c      	adds	r1, #12
   170c8:	f7f5 fecc 	bl	ce64 <strcmp>
   170cc:	4606      	mov	r6, r0
   170ce:	2800      	cmp	r0, #0
   170d0:	f47f acef 	bne.w	16ab2 <pdn_interface_pdn_id_get+0x14a>
   170d4:	6823      	ldr	r3, [r4, #0]
   170d6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   170d8:	07d7      	lsls	r7, r2, #31
   170da:	f53f ae00 	bmi.w	16cde <pdn_interface_pdn_id_get+0x376>
   170de:	e4e8      	b.n	16ab2 <pdn_interface_pdn_id_get+0x14a>
   170e0:	f04f 30ff 	mov.w	r0, #4294967295
   170e4:	4770      	bx	lr
   170e6:	480b      	ldr	r0, [pc, #44]	; (17114 <pdn_interface_pdn_id_get+0x7ac>)
   170e8:	f7f5 fec6 	bl	ce78 <strlen>
   170ec:	490a      	ldr	r1, [pc, #40]	; (17118 <pdn_interface_pdn_id_get+0x7b0>)
   170ee:	4602      	mov	r2, r0
   170f0:	4808      	ldr	r0, [pc, #32]	; (17114 <pdn_interface_pdn_id_get+0x7ac>)
   170f2:	f00a fd8f 	bl	21c14 <strncmp>
   170f6:	b930      	cbnz	r0, 17106 <pdn_interface_pdn_id_get+0x79e>
   170f8:	2008      	movs	r0, #8
   170fa:	f7f9 ffaf 	bl	1105c <bsd_os_errno_set>
   170fe:	f854 3026 	ldr.w	r3, [r4, r6, lsl #2]
   17102:	6858      	ldr	r0, [r3, #4]
   17104:	e47b      	b.n	169fe <pdn_interface_pdn_id_get+0x96>
   17106:	2005      	movs	r0, #5
   17108:	f7f9 ffa8 	bl	1105c <bsd_os_errno_set>
   1710c:	f854 3026 	ldr.w	r3, [r4, r6, lsl #2]
   17110:	6858      	ldr	r0, [r3, #4]
   17112:	e474      	b.n	169fe <pdn_interface_pdn_id_get+0x96>
   17114:	00022eac 	.word	0x00022eac
   17118:	200206dc 	.word	0x200206dc

0001711c <linked_list_init>:
   1711c:	b128      	cbz	r0, 1712a <linked_list_init+0xe>
   1711e:	2300      	movs	r3, #0
   17120:	6003      	str	r3, [r0, #0]
   17122:	e9c0 3301 	strd	r3, r3, [r0, #4]
   17126:	4618      	mov	r0, r3
   17128:	4770      	bx	lr
   1712a:	2007      	movs	r0, #7
   1712c:	4770      	bx	lr
   1712e:	bf00      	nop

00017130 <linked_list_push>:
   17130:	6802      	ldr	r2, [r0, #0]
   17132:	4603      	mov	r3, r0
   17134:	3201      	adds	r2, #1
   17136:	d00e      	beq.n	17156 <linked_list_push+0x26>
   17138:	2200      	movs	r2, #0
   1713a:	600a      	str	r2, [r1, #0]
   1713c:	6802      	ldr	r2, [r0, #0]
   1713e:	b13a      	cbz	r2, 17150 <linked_list_push+0x20>
   17140:	6882      	ldr	r2, [r0, #8]
   17142:	6011      	str	r1, [r2, #0]
   17144:	6081      	str	r1, [r0, #8]
   17146:	681a      	ldr	r2, [r3, #0]
   17148:	2000      	movs	r0, #0
   1714a:	3201      	adds	r2, #1
   1714c:	601a      	str	r2, [r3, #0]
   1714e:	4770      	bx	lr
   17150:	e9c0 1101 	strd	r1, r1, [r0, #4]
   17154:	e7f7      	b.n	17146 <linked_list_push+0x16>
   17156:	2004      	movs	r0, #4
   17158:	4770      	bx	lr
   1715a:	bf00      	nop

0001715c <linked_list_pop>:
   1715c:	4603      	mov	r3, r0
   1715e:	6800      	ldr	r0, [r0, #0]
   17160:	b128      	cbz	r0, 1716e <linked_list_pop+0x12>
   17162:	6858      	ldr	r0, [r3, #4]
   17164:	681a      	ldr	r2, [r3, #0]
   17166:	6801      	ldr	r1, [r0, #0]
   17168:	3a01      	subs	r2, #1
   1716a:	6059      	str	r1, [r3, #4]
   1716c:	601a      	str	r2, [r3, #0]
   1716e:	4770      	bx	lr

00017170 <linked_list_peek>:
   17170:	6803      	ldr	r3, [r0, #0]
   17172:	b10b      	cbz	r3, 17178 <linked_list_peek+0x8>
   17174:	6840      	ldr	r0, [r0, #4]
   17176:	4770      	bx	lr
   17178:	4618      	mov	r0, r3
   1717a:	4770      	bx	lr

0001717c <linked_list_size_get>:
   1717c:	6800      	ldr	r0, [r0, #0]
   1717e:	4770      	bx	lr

00017180 <linked_list_get_next>:
   17180:	6800      	ldr	r0, [r0, #0]
   17182:	4770      	bx	lr

00017184 <nrf_socket>:
   17184:	b570      	push	{r4, r5, r6, lr}
   17186:	4604      	mov	r4, r0
   17188:	460d      	mov	r5, r1
   1718a:	4616      	mov	r6, r2
   1718c:	f7fd fdb4 	bl	14cf8 <bsd_platform_af_method_table_get>
   17190:	b130      	cbz	r0, 171a0 <nrf_socket+0x1c>
   17192:	6803      	ldr	r3, [r0, #0]
   17194:	4632      	mov	r2, r6
   17196:	4629      	mov	r1, r5
   17198:	4620      	mov	r0, r4
   1719a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   1719e:	4718      	bx	r3
   171a0:	f04f 30ff 	mov.w	r0, #4294967295
   171a4:	bd70      	pop	{r4, r5, r6, pc}
   171a6:	bf00      	nop

000171a8 <nrf_close>:
   171a8:	b510      	push	{r4, lr}
   171aa:	4604      	mov	r4, r0
   171ac:	f7fd fdfc 	bl	14da8 <bsd_platform_fd_method_table_get>
   171b0:	b120      	cbz	r0, 171bc <nrf_close+0x14>
   171b2:	6843      	ldr	r3, [r0, #4]
   171b4:	4620      	mov	r0, r4
   171b6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   171ba:	4718      	bx	r3
   171bc:	f04f 30ff 	mov.w	r0, #4294967295
   171c0:	bd10      	pop	{r4, pc}
   171c2:	bf00      	nop

000171c4 <nrf_sendto>:
   171c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   171c8:	460d      	mov	r5, r1
   171ca:	e9dd 8908 	ldrd	r8, r9, [sp, #32]
   171ce:	4616      	mov	r6, r2
   171d0:	461f      	mov	r7, r3
   171d2:	4604      	mov	r4, r0
   171d4:	f7fd fde8 	bl	14da8 <bsd_platform_fd_method_table_get>
   171d8:	b158      	cbz	r0, 171f2 <nrf_sendto+0x2e>
   171da:	e9cd 8908 	strd	r8, r9, [sp, #32]
   171de:	f8d0 e008 	ldr.w	lr, [r0, #8]
   171e2:	463b      	mov	r3, r7
   171e4:	4632      	mov	r2, r6
   171e6:	4629      	mov	r1, r5
   171e8:	4620      	mov	r0, r4
   171ea:	46f4      	mov	ip, lr
   171ec:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   171f0:	4760      	bx	ip
   171f2:	f04f 30ff 	mov.w	r0, #4294967295
   171f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   171fa:	bf00      	nop

000171fc <nrf_send>:
   171fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   17200:	b082      	sub	sp, #8
   17202:	460e      	mov	r6, r1
   17204:	4617      	mov	r7, r2
   17206:	4698      	mov	r8, r3
   17208:	4605      	mov	r5, r0
   1720a:	f7fd fdcd 	bl	14da8 <bsd_platform_fd_method_table_get>
   1720e:	b160      	cbz	r0, 1722a <nrf_send+0x2e>
   17210:	4604      	mov	r4, r0
   17212:	2000      	movs	r0, #0
   17214:	e9cd 0000 	strd	r0, r0, [sp]
   17218:	4643      	mov	r3, r8
   1721a:	463a      	mov	r2, r7
   1721c:	4631      	mov	r1, r6
   1721e:	4628      	mov	r0, r5
   17220:	68a4      	ldr	r4, [r4, #8]
   17222:	47a0      	blx	r4
   17224:	b002      	add	sp, #8
   17226:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1722a:	f04f 30ff 	mov.w	r0, #4294967295
   1722e:	e7f9      	b.n	17224 <nrf_send+0x28>

00017230 <nrf_recvfrom>:
   17230:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   17234:	460d      	mov	r5, r1
   17236:	e9dd 8908 	ldrd	r8, r9, [sp, #32]
   1723a:	4616      	mov	r6, r2
   1723c:	461f      	mov	r7, r3
   1723e:	4604      	mov	r4, r0
   17240:	f7fd fdb2 	bl	14da8 <bsd_platform_fd_method_table_get>
   17244:	b158      	cbz	r0, 1725e <nrf_recvfrom+0x2e>
   17246:	e9cd 8908 	strd	r8, r9, [sp, #32]
   1724a:	f8d0 e00c 	ldr.w	lr, [r0, #12]
   1724e:	463b      	mov	r3, r7
   17250:	4632      	mov	r2, r6
   17252:	4629      	mov	r1, r5
   17254:	4620      	mov	r0, r4
   17256:	46f4      	mov	ip, lr
   17258:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1725c:	4760      	bx	ip
   1725e:	f04f 30ff 	mov.w	r0, #4294967295
   17262:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   17266:	bf00      	nop

00017268 <nrf_recv>:
   17268:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1726c:	b082      	sub	sp, #8
   1726e:	460e      	mov	r6, r1
   17270:	4617      	mov	r7, r2
   17272:	4698      	mov	r8, r3
   17274:	4605      	mov	r5, r0
   17276:	f7fd fd97 	bl	14da8 <bsd_platform_fd_method_table_get>
   1727a:	b160      	cbz	r0, 17296 <nrf_recv+0x2e>
   1727c:	4604      	mov	r4, r0
   1727e:	2000      	movs	r0, #0
   17280:	e9cd 0000 	strd	r0, r0, [sp]
   17284:	4643      	mov	r3, r8
   17286:	463a      	mov	r2, r7
   17288:	4631      	mov	r1, r6
   1728a:	4628      	mov	r0, r5
   1728c:	68e4      	ldr	r4, [r4, #12]
   1728e:	47a0      	blx	r4
   17290:	b002      	add	sp, #8
   17292:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   17296:	f04f 30ff 	mov.w	r0, #4294967295
   1729a:	e7f9      	b.n	17290 <nrf_recv+0x28>

0001729c <nrf_connect>:
   1729c:	b570      	push	{r4, r5, r6, lr}
   1729e:	460d      	mov	r5, r1
   172a0:	4616      	mov	r6, r2
   172a2:	4604      	mov	r4, r0
   172a4:	f7fd fd80 	bl	14da8 <bsd_platform_fd_method_table_get>
   172a8:	b130      	cbz	r0, 172b8 <nrf_connect+0x1c>
   172aa:	6943      	ldr	r3, [r0, #20]
   172ac:	4632      	mov	r2, r6
   172ae:	4629      	mov	r1, r5
   172b0:	4620      	mov	r0, r4
   172b2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   172b6:	4718      	bx	r3
   172b8:	f04f 30ff 	mov.w	r0, #4294967295
   172bc:	bd70      	pop	{r4, r5, r6, pc}
   172be:	bf00      	nop

000172c0 <nrf_listen>:
   172c0:	b570      	push	{r4, r5, r6, lr}
   172c2:	460d      	mov	r5, r1
   172c4:	4604      	mov	r4, r0
   172c6:	f7fd fd6f 	bl	14da8 <bsd_platform_fd_method_table_get>
   172ca:	b128      	cbz	r0, 172d8 <nrf_listen+0x18>
   172cc:	6983      	ldr	r3, [r0, #24]
   172ce:	4629      	mov	r1, r5
   172d0:	4620      	mov	r0, r4
   172d2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   172d6:	4718      	bx	r3
   172d8:	f04f 30ff 	mov.w	r0, #4294967295
   172dc:	bd70      	pop	{r4, r5, r6, pc}
   172de:	bf00      	nop

000172e0 <nrf_accept>:
   172e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   172e4:	460d      	mov	r5, r1
   172e6:	4616      	mov	r6, r2
   172e8:	4604      	mov	r4, r0
   172ea:	f7fd fd5d 	bl	14da8 <bsd_platform_fd_method_table_get>
   172ee:	b140      	cbz	r0, 17302 <nrf_accept+0x22>
   172f0:	69c7      	ldr	r7, [r0, #28]
   172f2:	4632      	mov	r2, r6
   172f4:	4629      	mov	r1, r5
   172f6:	4620      	mov	r0, r4
   172f8:	46bc      	mov	ip, r7
   172fa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   172fe:	2300      	movs	r3, #0
   17300:	4760      	bx	ip
   17302:	f04f 30ff 	mov.w	r0, #4294967295
   17306:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1730a:	bf00      	nop

0001730c <nrf_bind>:
   1730c:	b570      	push	{r4, r5, r6, lr}
   1730e:	460d      	mov	r5, r1
   17310:	4616      	mov	r6, r2
   17312:	4604      	mov	r4, r0
   17314:	f7fd fd48 	bl	14da8 <bsd_platform_fd_method_table_get>
   17318:	b130      	cbz	r0, 17328 <nrf_bind+0x1c>
   1731a:	6903      	ldr	r3, [r0, #16]
   1731c:	4632      	mov	r2, r6
   1731e:	4629      	mov	r1, r5
   17320:	4620      	mov	r0, r4
   17322:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   17326:	4718      	bx	r3
   17328:	f04f 30ff 	mov.w	r0, #4294967295
   1732c:	bd70      	pop	{r4, r5, r6, pc}
   1732e:	bf00      	nop

00017330 <nrf_setsockopt>:
   17330:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   17334:	f8dd 8018 	ldr.w	r8, [sp, #24]
   17338:	460d      	mov	r5, r1
   1733a:	4616      	mov	r6, r2
   1733c:	461f      	mov	r7, r3
   1733e:	4604      	mov	r4, r0
   17340:	f7fd fd32 	bl	14da8 <bsd_platform_fd_method_table_get>
   17344:	b158      	cbz	r0, 1735e <nrf_setsockopt+0x2e>
   17346:	f8cd 8018 	str.w	r8, [sp, #24]
   1734a:	f8d0 e020 	ldr.w	lr, [r0, #32]
   1734e:	463b      	mov	r3, r7
   17350:	4632      	mov	r2, r6
   17352:	4629      	mov	r1, r5
   17354:	4620      	mov	r0, r4
   17356:	46f4      	mov	ip, lr
   17358:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   1735c:	4760      	bx	ip
   1735e:	f04f 30ff 	mov.w	r0, #4294967295
   17362:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   17366:	bf00      	nop

00017368 <nrf_getsockopt>:
   17368:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1736c:	f8dd 8018 	ldr.w	r8, [sp, #24]
   17370:	460d      	mov	r5, r1
   17372:	4616      	mov	r6, r2
   17374:	461f      	mov	r7, r3
   17376:	4604      	mov	r4, r0
   17378:	f7fd fd16 	bl	14da8 <bsd_platform_fd_method_table_get>
   1737c:	b158      	cbz	r0, 17396 <nrf_getsockopt+0x2e>
   1737e:	f8cd 8018 	str.w	r8, [sp, #24]
   17382:	f8d0 e024 	ldr.w	lr, [r0, #36]	; 0x24
   17386:	463b      	mov	r3, r7
   17388:	4632      	mov	r2, r6
   1738a:	4629      	mov	r1, r5
   1738c:	4620      	mov	r0, r4
   1738e:	46f4      	mov	ip, lr
   17390:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   17394:	4760      	bx	ip
   17396:	f04f 30ff 	mov.w	r0, #4294967295
   1739a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1739e:	bf00      	nop

000173a0 <nrf_getaddrinfo>:
   173a0:	f7fd bd78 	b.w	14e94 <bsd_platform_getaddrinfo>

000173a4 <nrf_freeaddrinfo>:
   173a4:	f7fd bd78 	b.w	14e98 <bsd_platform_freeaddrinfo>

000173a8 <nrf_poll>:
   173a8:	f7fd bd78 	b.w	14e9c <bsd_platform_poll>

000173ac <nrf_fcntl>:
   173ac:	f7fd bdd0 	b.w	14f50 <bsd_platform_fcntl>

000173b0 <at_client_evt_handler>:
   173b0:	b120      	cbz	r0, 173bc <at_client_evt_handler+0xc>
   173b2:	f850 1b08 	ldr.w	r1, [r0], #8
   173b6:	0c09      	lsrs	r1, r1, #16
   173b8:	f7fb bfa0 	b.w	132fc <rpc_at_event_handler>
   173bc:	4770      	bx	lr
   173be:	bf00      	nop

000173c0 <rpc_at_client_init>:
   173c0:	4801      	ldr	r0, [pc, #4]	; (173c8 <rpc_at_client_init+0x8>)
   173c2:	f001 be47 	b.w	19054 <rpc_client_register>
   173c6:	bf00      	nop
   173c8:	00022ec0 	.word	0x00022ec0

000173cc <rpc_at_client_request_alloc>:
   173cc:	b180      	cbz	r0, 173f0 <rpc_at_client_request_alloc+0x24>
   173ce:	2300      	movs	r3, #0
   173d0:	b510      	push	{r4, lr}
   173d2:	b082      	sub	sp, #8
   173d4:	aa02      	add	r2, sp, #8
   173d6:	4604      	mov	r4, r0
   173d8:	f842 3d04 	str.w	r3, [r2, #-4]!
   173dc:	2003      	movs	r0, #3
   173de:	f002 f871 	bl	194c4 <rpc_message_alloc>
   173e2:	b918      	cbnz	r0, 173ec <rpc_at_client_request_alloc+0x20>
   173e4:	9b01      	ldr	r3, [sp, #4]
   173e6:	b10b      	cbz	r3, 173ec <rpc_at_client_request_alloc+0x20>
   173e8:	3308      	adds	r3, #8
   173ea:	6023      	str	r3, [r4, #0]
   173ec:	b002      	add	sp, #8
   173ee:	bd10      	pop	{r4, pc}
   173f0:	200e      	movs	r0, #14
   173f2:	4770      	bx	lr

000173f4 <rpc_at_client_request_send>:
   173f4:	b150      	cbz	r0, 1740c <rpc_at_client_request_send+0x18>
   173f6:	4603      	mov	r3, r0
   173f8:	f830 2c08 	ldrh.w	r2, [r0, #-8]
   173fc:	2003      	movs	r0, #3
   173fe:	ea42 4101 	orr.w	r1, r2, r1, lsl #16
   17402:	f843 1d08 	str.w	r1, [r3, #-8]!
   17406:	4619      	mov	r1, r3
   17408:	f002 b844 	b.w	19494 <rpc_message_send>
   1740c:	200e      	movs	r0, #14
   1740e:	4770      	bx	lr

00017410 <rpc_at_client_message_free>:
   17410:	b120      	cbz	r0, 1741c <rpc_at_client_message_free+0xc>
   17412:	f1a0 0108 	sub.w	r1, r0, #8
   17416:	2003      	movs	r0, #3
   17418:	f002 b886 	b.w	19528 <rpc_message_free>
   1741c:	200e      	movs	r0, #14
   1741e:	4770      	bx	lr

00017420 <rpc_at_client_data_free>:
   17420:	b118      	cbz	r0, 1742a <rpc_at_client_data_free+0xa>
   17422:	4601      	mov	r1, r0
   17424:	2003      	movs	r0, #3
   17426:	f002 b991 	b.w	1974c <rpc_message_data_free>
   1742a:	200e      	movs	r0, #14
   1742c:	4770      	bx	lr
   1742e:	bf00      	nop

00017430 <ip_recvd_packet_free_cb>:
   17430:	b510      	push	{r4, lr}
   17432:	4604      	mov	r4, r0
   17434:	6800      	ldr	r0, [r0, #0]
   17436:	f7fc fc1f 	bl	13c78 <rpc_ip_client_data_free>
   1743a:	68a0      	ldr	r0, [r4, #8]
   1743c:	b118      	cbz	r0, 17446 <ip_recvd_packet_free_cb+0x16>
   1743e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   17442:	f7fc bbb9 	b.w	13bb8 <nrf_free>
   17446:	bd10      	pop	{r4, pc}

00017448 <rpc_error_to_nrf_bsd_error>:
   17448:	2810      	cmp	r0, #16
   1744a:	bf9a      	itte	ls
   1744c:	4b02      	ldrls	r3, [pc, #8]	; (17458 <rpc_error_to_nrf_bsd_error+0x10>)
   1744e:	f853 0020 	ldrls.w	r0, [r3, r0, lsl #2]
   17452:	202d      	movhi	r0, #45	; 0x2d
   17454:	4770      	bx	lr
   17456:	bf00      	nop
   17458:	00022ed0 	.word	0x00022ed0

0001745c <ip_interface_request_create>:
   1745c:	b570      	push	{r4, r5, r6, lr}
   1745e:	2500      	movs	r5, #0
   17460:	b082      	sub	sp, #8
   17462:	ac02      	add	r4, sp, #8
   17464:	f844 5d04 	str.w	r5, [r4, #-4]!
   17468:	4606      	mov	r6, r0
   1746a:	460d      	mov	r5, r1
   1746c:	4620      	mov	r0, r4
   1746e:	4619      	mov	r1, r3
   17470:	4614      	mov	r4, r2
   17472:	f7fc fbcf 	bl	13c14 <rpc_ip_client_request_alloc>
   17476:	b960      	cbnz	r0, 17492 <ip_interface_request_create+0x36>
   17478:	9b01      	ldr	r3, [sp, #4]
   1747a:	2208      	movs	r2, #8
   1747c:	7258      	strb	r0, [r3, #9]
   1747e:	7298      	strb	r0, [r3, #10]
   17480:	72d8      	strb	r0, [r3, #11]
   17482:	4618      	mov	r0, r3
   17484:	ea44 4406 	orr.w	r4, r4, r6, lsl #16
   17488:	60dc      	str	r4, [r3, #12]
   1748a:	611d      	str	r5, [r3, #16]
   1748c:	721a      	strb	r2, [r3, #8]
   1748e:	b002      	add	sp, #8
   17490:	bd70      	pop	{r4, r5, r6, pc}
   17492:	9b01      	ldr	r3, [sp, #4]
   17494:	4618      	mov	r0, r3
   17496:	b002      	add	sp, #8
   17498:	bd70      	pop	{r4, r5, r6, pc}
   1749a:	bf00      	nop

0001749c <ip_interface_request_send>:
   1749c:	b570      	push	{r4, r5, r6, lr}
   1749e:	460c      	mov	r4, r1
   174a0:	4605      	mov	r5, r0
   174a2:	4611      	mov	r1, r2
   174a4:	4620      	mov	r0, r4
   174a6:	461e      	mov	r6, r3
   174a8:	f7fc fbc8 	bl	13c3c <rpc_ip_client_request_send>
   174ac:	b900      	cbnz	r0, 174b0 <ip_interface_request_send+0x14>
   174ae:	bd70      	pop	{r4, r5, r6, pc}
   174b0:	6820      	ldr	r0, [r4, #0]
   174b2:	b108      	cbz	r0, 174b8 <ip_interface_request_send+0x1c>
   174b4:	f7fc fbe0 	bl	13c78 <rpc_ip_client_data_free>
   174b8:	4620      	mov	r0, r4
   174ba:	f7fc fbd5 	bl	13c68 <rpc_ip_client_message_free>
   174be:	602e      	str	r6, [r5, #0]
   174c0:	2023      	movs	r0, #35	; 0x23
   174c2:	bd70      	pop	{r4, r5, r6, pc}

000174c4 <ip_interface_wait>:
   174c4:	b538      	push	{r3, r4, r5, lr}
   174c6:	4605      	mov	r5, r0
   174c8:	f001 fc14 	bl	18cf4 <interface_socket_wait>
   174cc:	4604      	mov	r4, r0
   174ce:	b108      	cbz	r0, 174d4 <ip_interface_wait+0x10>
   174d0:	4620      	mov	r0, r4
   174d2:	bd38      	pop	{r3, r4, r5, pc}
   174d4:	4628      	mov	r0, r5
   174d6:	f001 fc81 	bl	18ddc <interface_socket_from_handle_get>
   174da:	2800      	cmp	r0, #0
   174dc:	d0f8      	beq.n	174d0 <ip_interface_wait+0xc>
   174de:	6844      	ldr	r4, [r0, #4]
   174e0:	2c00      	cmp	r4, #0
   174e2:	d0f5      	beq.n	174d0 <ip_interface_wait+0xc>
   174e4:	2300      	movs	r3, #0
   174e6:	6043      	str	r3, [r0, #4]
   174e8:	4620      	mov	r0, r4
   174ea:	bd38      	pop	{r3, r4, r5, pc}

000174ec <ip_interface_init>:
   174ec:	b538      	push	{r3, r4, r5, lr}
   174ee:	2300      	movs	r3, #0
   174f0:	4d07      	ldr	r5, [pc, #28]	; (17510 <ip_interface_init+0x24>)
   174f2:	4c08      	ldr	r4, [pc, #32]	; (17514 <ip_interface_init+0x28>)
   174f4:	4619      	mov	r1, r3
   174f6:	2224      	movs	r2, #36	; 0x24
   174f8:	4807      	ldr	r0, [pc, #28]	; (17518 <ip_interface_init+0x2c>)
   174fa:	602b      	str	r3, [r5, #0]
   174fc:	6023      	str	r3, [r4, #0]
   174fe:	f00a fa29 	bl	21954 <memset>
   17502:	f7fc fb81 	bl	13c08 <rpc_ip_client_init>
   17506:	3000      	adds	r0, #0
   17508:	bf18      	it	ne
   1750a:	2001      	movne	r0, #1
   1750c:	4240      	negs	r0, r0
   1750e:	bd38      	pop	{r3, r4, r5, pc}
   17510:	20020814 	.word	0x20020814
   17514:	20020810 	.word	0x20020810
   17518:	2002081c 	.word	0x2002081c

0001751c <ip_interface_open>:
   1751c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   17520:	4606      	mov	r6, r0
   17522:	2000      	movs	r0, #0
   17524:	f026 0308 	bic.w	r3, r6, #8
   17528:	b082      	sub	sp, #8
   1752a:	2b02      	cmp	r3, #2
   1752c:	460c      	mov	r4, r1
   1752e:	4617      	mov	r7, r2
   17530:	9000      	str	r0, [sp, #0]
   17532:	d002      	beq.n	1753a <ip_interface_open+0x1e>
   17534:	2e05      	cmp	r6, #5
   17536:	f040 8085 	bne.w	17644 <ip_interface_open+0x128>
   1753a:	1e63      	subs	r3, r4, #1
   1753c:	2b02      	cmp	r3, #2
   1753e:	f200 8097 	bhi.w	17670 <ip_interface_open+0x154>
   17542:	2f00      	cmp	r7, #0
   17544:	d154      	bne.n	175f0 <ip_interface_open+0xd4>
   17546:	2c01      	cmp	r4, #1
   17548:	d067      	beq.n	1761a <ip_interface_open+0xfe>
   1754a:	2c03      	cmp	r4, #3
   1754c:	bf18      	it	ne
   1754e:	2702      	movne	r7, #2
   17550:	4a4a      	ldr	r2, [pc, #296]	; (1767c <ip_interface_open+0x160>)
   17552:	4621      	mov	r1, r4
   17554:	4668      	mov	r0, sp
   17556:	f001 fb1b 	bl	18b90 <interface_socket_allocate>
   1755a:	9b00      	ldr	r3, [sp, #0]
   1755c:	4680      	mov	r8, r0
   1755e:	2b00      	cmp	r3, #0
   17560:	d059      	beq.n	17616 <ip_interface_open+0xfa>
   17562:	2100      	movs	r1, #0
   17564:	a802      	add	r0, sp, #8
   17566:	f840 1d04 	str.w	r1, [r0, #-4]!
   1756a:	e9c3 6403 	strd	r6, r4, [r3, #12]
   1756e:	615f      	str	r7, [r3, #20]
   17570:	f7fc fb50 	bl	13c14 <rpc_ip_client_request_alloc>
   17574:	2800      	cmp	r0, #0
   17576:	d14b      	bne.n	17610 <ip_interface_open+0xf4>
   17578:	f247 0201 	movw	r2, #28673	; 0x7001
   1757c:	f04f 33ff 	mov.w	r3, #4294967295
   17580:	2108      	movs	r1, #8
   17582:	9d01      	ldr	r5, [sp, #4]
   17584:	ea42 4208 	orr.w	r2, r2, r8, lsl #16
   17588:	60ea      	str	r2, [r5, #12]
   1758a:	7268      	strb	r0, [r5, #9]
   1758c:	72a8      	strb	r0, [r5, #10]
   1758e:	72e8      	strb	r0, [r5, #11]
   17590:	7229      	strb	r1, [r5, #8]
   17592:	742b      	strb	r3, [r5, #16]
   17594:	746b      	strb	r3, [r5, #17]
   17596:	74ab      	strb	r3, [r5, #18]
   17598:	74eb      	strb	r3, [r5, #19]
   1759a:	68ab      	ldr	r3, [r5, #8]
   1759c:	2e05      	cmp	r6, #5
   1759e:	f103 030c 	add.w	r3, r3, #12
   175a2:	60ab      	str	r3, [r5, #8]
   175a4:	d003      	beq.n	175ae <ip_interface_open+0x92>
   175a6:	2e0a      	cmp	r6, #10
   175a8:	bf14      	ite	ne
   175aa:	2601      	movne	r6, #1
   175ac:	2602      	moveq	r6, #2
   175ae:	616e      	str	r6, [r5, #20]
   175b0:	61ef      	str	r7, [r5, #28]
   175b2:	61ac      	str	r4, [r5, #24]
   175b4:	f247 0101 	movw	r1, #28673	; 0x7001
   175b8:	4628      	mov	r0, r5
   175ba:	9f00      	ldr	r7, [sp, #0]
   175bc:	f7fc fb3e 	bl	13c3c <rpc_ip_client_request_send>
   175c0:	4606      	mov	r6, r0
   175c2:	b360      	cbz	r0, 1761e <ip_interface_open+0x102>
   175c4:	6828      	ldr	r0, [r5, #0]
   175c6:	b108      	cbz	r0, 175cc <ip_interface_open+0xb0>
   175c8:	f7fc fb56 	bl	13c78 <rpc_ip_client_data_free>
   175cc:	4628      	mov	r0, r5
   175ce:	f7fc fb4b 	bl	13c68 <rpc_ip_client_message_free>
   175d2:	2301      	movs	r3, #1
   175d4:	2523      	movs	r5, #35	; 0x23
   175d6:	603b      	str	r3, [r7, #0]
   175d8:	4640      	mov	r0, r8
   175da:	f001 fb3d 	bl	18c58 <interface_socket_free>
   175de:	4628      	mov	r0, r5
   175e0:	f7f9 fd3c 	bl	1105c <bsd_os_errno_set>
   175e4:	f04f 38ff 	mov.w	r8, #4294967295
   175e8:	4640      	mov	r0, r8
   175ea:	b002      	add	sp, #8
   175ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   175f0:	2c01      	cmp	r4, #1
   175f2:	d009      	beq.n	17608 <ip_interface_open+0xec>
   175f4:	2c02      	cmp	r4, #2
   175f6:	d109      	bne.n	1760c <ip_interface_open+0xf0>
   175f8:	2f02      	cmp	r7, #2
   175fa:	d0a9      	beq.n	17550 <ip_interface_open+0x34>
   175fc:	2029      	movs	r0, #41	; 0x29
   175fe:	f7f9 fd2d 	bl	1105c <bsd_os_errno_set>
   17602:	f04f 38ff 	mov.w	r8, #4294967295
   17606:	e7ef      	b.n	175e8 <ip_interface_open+0xcc>
   17608:	2f01      	cmp	r7, #1
   1760a:	d1f7      	bne.n	175fc <ip_interface_open+0xe0>
   1760c:	2702      	movs	r7, #2
   1760e:	e79f      	b.n	17550 <ip_interface_open+0x34>
   17610:	9d01      	ldr	r5, [sp, #4]
   17612:	2d00      	cmp	r5, #0
   17614:	d1c1      	bne.n	1759a <ip_interface_open+0x7e>
   17616:	250c      	movs	r5, #12
   17618:	e7de      	b.n	175d8 <ip_interface_open+0xbc>
   1761a:	4627      	mov	r7, r4
   1761c:	e798      	b.n	17550 <ip_interface_open+0x34>
   1761e:	f04f 33ff 	mov.w	r3, #4294967295
   17622:	f64f 72ff 	movw	r2, #65535	; 0xffff
   17626:	2102      	movs	r1, #2
   17628:	4640      	mov	r0, r8
   1762a:	f001 fb63 	bl	18cf4 <interface_socket_wait>
   1762e:	4605      	mov	r5, r0
   17630:	2800      	cmp	r0, #0
   17632:	d1d1      	bne.n	175d8 <ip_interface_open+0xbc>
   17634:	4640      	mov	r0, r8
   17636:	f001 fbd1 	bl	18ddc <interface_socket_from_handle_get>
   1763a:	b148      	cbz	r0, 17650 <ip_interface_open+0x134>
   1763c:	6845      	ldr	r5, [r0, #4]
   1763e:	b13d      	cbz	r5, 17650 <ip_interface_open+0x134>
   17640:	6046      	str	r6, [r0, #4]
   17642:	e7c9      	b.n	175d8 <ip_interface_open+0xbc>
   17644:	202f      	movs	r0, #47	; 0x2f
   17646:	f7f9 fd09 	bl	1105c <bsd_os_errno_set>
   1764a:	f04f 38ff 	mov.w	r8, #4294967295
   1764e:	e7cb      	b.n	175e8 <ip_interface_open+0xcc>
   17650:	3c02      	subs	r4, #2
   17652:	2c01      	cmp	r4, #1
   17654:	d8c8      	bhi.n	175e8 <ip_interface_open+0xcc>
   17656:	4640      	mov	r0, r8
   17658:	9b00      	ldr	r3, [sp, #0]
   1765a:	681a      	ldr	r2, [r3, #0]
   1765c:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
   17660:	601a      	str	r2, [r3, #0]
   17662:	681a      	ldr	r2, [r3, #0]
   17664:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
   17668:	601a      	str	r2, [r3, #0]
   1766a:	b002      	add	sp, #8
   1766c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   17670:	2016      	movs	r0, #22
   17672:	f7f9 fcf3 	bl	1105c <bsd_os_errno_set>
   17676:	f04f 38ff 	mov.w	r8, #4294967295
   1767a:	e7b5      	b.n	175e8 <ip_interface_open+0xcc>
   1767c:	00017431 	.word	0x00017431

00017680 <ip_interface_close>:
   17680:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   17684:	b082      	sub	sp, #8
   17686:	4606      	mov	r6, r0
   17688:	f001 fba8 	bl	18ddc <interface_socket_from_handle_get>
   1768c:	2800      	cmp	r0, #0
   1768e:	d063      	beq.n	17758 <ip_interface_close+0xd8>
   17690:	4604      	mov	r4, r0
   17692:	2100      	movs	r1, #0
   17694:	a802      	add	r0, sp, #8
   17696:	6827      	ldr	r7, [r4, #0]
   17698:	f840 1d04 	str.w	r1, [r0, #-4]!
   1769c:	f8d4 8018 	ldr.w	r8, [r4, #24]
   176a0:	f7fc fab8 	bl	13c14 <rpc_ip_client_request_alloc>
   176a4:	2800      	cmp	r0, #0
   176a6:	d13a      	bne.n	1771e <ip_interface_close+0x9e>
   176a8:	f247 0309 	movw	r3, #28681	; 0x7009
   176ac:	2208      	movs	r2, #8
   176ae:	9d01      	ldr	r5, [sp, #4]
   176b0:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
   176b4:	60eb      	str	r3, [r5, #12]
   176b6:	f8c5 8010 	str.w	r8, [r5, #16]
   176ba:	7268      	strb	r0, [r5, #9]
   176bc:	72a8      	strb	r0, [r5, #10]
   176be:	72e8      	strb	r0, [r5, #11]
   176c0:	722a      	strb	r2, [r5, #8]
   176c2:	6823      	ldr	r3, [r4, #0]
   176c4:	f247 0109 	movw	r1, #28681	; 0x7009
   176c8:	0c1b      	lsrs	r3, r3, #16
   176ca:	041b      	lsls	r3, r3, #16
   176cc:	f043 030d 	orr.w	r3, r3, #13
   176d0:	6023      	str	r3, [r4, #0]
   176d2:	6823      	ldr	r3, [r4, #0]
   176d4:	4628      	mov	r0, r5
   176d6:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
   176da:	6023      	str	r3, [r4, #0]
   176dc:	6823      	ldr	r3, [r4, #0]
   176de:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
   176e2:	6023      	str	r3, [r4, #0]
   176e4:	f7fc faaa 	bl	13c3c <rpc_ip_client_request_send>
   176e8:	bb40      	cbnz	r0, 1773c <ip_interface_close+0xbc>
   176ea:	f04f 33ff 	mov.w	r3, #4294967295
   176ee:	f64f 72ff 	movw	r2, #65535	; 0xffff
   176f2:	210e      	movs	r1, #14
   176f4:	4630      	mov	r0, r6
   176f6:	f001 fafd 	bl	18cf4 <interface_socket_wait>
   176fa:	4604      	mov	r4, r0
   176fc:	b1a0      	cbz	r0, 17728 <ip_interface_close+0xa8>
   176fe:	4c17      	ldr	r4, [pc, #92]	; (1775c <ip_interface_close+0xdc>)
   17700:	f854 0026 	ldr.w	r0, [r4, r6, lsl #2]
   17704:	b120      	cbz	r0, 17710 <ip_interface_close+0x90>
   17706:	f7fc faaf 	bl	13c68 <rpc_ip_client_message_free>
   1770a:	2300      	movs	r3, #0
   1770c:	f844 3026 	str.w	r3, [r4, r6, lsl #2]
   17710:	4630      	mov	r0, r6
   17712:	f001 faa1 	bl	18c58 <interface_socket_free>
   17716:	2000      	movs	r0, #0
   17718:	b002      	add	sp, #8
   1771a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1771e:	9d01      	ldr	r5, [sp, #4]
   17720:	200c      	movs	r0, #12
   17722:	2d00      	cmp	r5, #0
   17724:	d1cd      	bne.n	176c2 <ip_interface_close+0x42>
   17726:	e012      	b.n	1774e <ip_interface_close+0xce>
   17728:	4630      	mov	r0, r6
   1772a:	f001 fb57 	bl	18ddc <interface_socket_from_handle_get>
   1772e:	2800      	cmp	r0, #0
   17730:	d0e5      	beq.n	176fe <ip_interface_close+0x7e>
   17732:	6843      	ldr	r3, [r0, #4]
   17734:	2b00      	cmp	r3, #0
   17736:	d0e2      	beq.n	176fe <ip_interface_close+0x7e>
   17738:	6044      	str	r4, [r0, #4]
   1773a:	e7e0      	b.n	176fe <ip_interface_close+0x7e>
   1773c:	6828      	ldr	r0, [r5, #0]
   1773e:	b108      	cbz	r0, 17744 <ip_interface_close+0xc4>
   17740:	f7fc fa9a 	bl	13c78 <rpc_ip_client_data_free>
   17744:	4628      	mov	r0, r5
   17746:	f7fc fa8f 	bl	13c68 <rpc_ip_client_message_free>
   1774a:	2023      	movs	r0, #35	; 0x23
   1774c:	6027      	str	r7, [r4, #0]
   1774e:	f7f9 fc85 	bl	1105c <bsd_os_errno_set>
   17752:	f04f 30ff 	mov.w	r0, #4294967295
   17756:	e7df      	b.n	17718 <ip_interface_close+0x98>
   17758:	2009      	movs	r0, #9
   1775a:	e7f8      	b.n	1774e <ip_interface_close+0xce>
   1775c:	2002081c 	.word	0x2002081c

00017760 <ip_interface_sendto>:
   17760:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17764:	2400      	movs	r4, #0
   17766:	b089      	sub	sp, #36	; 0x24
   17768:	9102      	str	r1, [sp, #8]
   1776a:	4615      	mov	r5, r2
   1776c:	4699      	mov	r9, r3
   1776e:	9407      	str	r4, [sp, #28]
   17770:	4607      	mov	r7, r0
   17772:	9e12      	ldr	r6, [sp, #72]	; 0x48
   17774:	f001 fb32 	bl	18ddc <interface_socket_from_handle_get>
   17778:	2800      	cmp	r0, #0
   1777a:	f000 815f 	beq.w	17a3c <ip_interface_sendto+0x2dc>
   1777e:	f5b5 5f80 	cmp.w	r5, #4096	; 0x1000
   17782:	f300 814c 	bgt.w	17a1e <ip_interface_sendto+0x2be>
   17786:	6903      	ldr	r3, [r0, #16]
   17788:	4604      	mov	r4, r0
   1778a:	2b01      	cmp	r3, #1
   1778c:	f000 80fb 	beq.w	17986 <ip_interface_sendto+0x226>
   17790:	6822      	ldr	r2, [r4, #0]
   17792:	0390      	lsls	r0, r2, #14
   17794:	d562      	bpl.n	1785c <ip_interface_sendto+0xfc>
   17796:	f1b9 0f00 	cmp.w	r9, #0
   1779a:	f000 80fc 	beq.w	17996 <ip_interface_sendto+0x236>
   1779e:	f019 0f02 	tst.w	r9, #2
   177a2:	f000 8146 	beq.w	17a32 <ip_interface_sendto+0x2d2>
   177a6:	2300      	movs	r3, #0
   177a8:	9303      	str	r3, [sp, #12]
   177aa:	f247 0806 	movw	r8, #28678	; 0x7006
   177ae:	f04f 0b0c 	mov.w	fp, #12
   177b2:	4ba6      	ldr	r3, [pc, #664]	; (17a4c <ip_interface_sendto+0x2ec>)
   177b4:	9300      	str	r3, [sp, #0]
   177b6:	043b      	lsls	r3, r7, #16
   177b8:	9304      	str	r3, [sp, #16]
   177ba:	4629      	mov	r1, r5
   177bc:	a807      	add	r0, sp, #28
   177be:	f7fc fa29 	bl	13c14 <rpc_ip_client_request_alloc>
   177c2:	2804      	cmp	r0, #4
   177c4:	d063      	beq.n	1788e <ip_interface_sendto+0x12e>
   177c6:	2800      	cmp	r0, #0
   177c8:	f040 813d 	bne.w	17a46 <ip_interface_sendto+0x2e6>
   177cc:	9b07      	ldr	r3, [sp, #28]
   177ce:	f883 b008 	strb.w	fp, [r3, #8]
   177d2:	7258      	strb	r0, [r3, #9]
   177d4:	7298      	strb	r0, [r3, #10]
   177d6:	72d8      	strb	r0, [r3, #11]
   177d8:	2e00      	cmp	r6, #0
   177da:	d074      	beq.n	178c6 <ip_interface_sendto+0x166>
   177dc:	68e2      	ldr	r2, [r4, #12]
   177de:	6871      	ldr	r1, [r6, #4]
   177e0:	428a      	cmp	r2, r1
   177e2:	f040 80a2 	bne.w	1792a <ip_interface_sendto+0x1ca>
   177e6:	7831      	ldrb	r1, [r6, #0]
   177e8:	9813      	ldr	r0, [sp, #76]	; 0x4c
   177ea:	4288      	cmp	r0, r1
   177ec:	d10a      	bne.n	17804 <ip_interface_sendto+0xa4>
   177ee:	2a02      	cmp	r2, #2
   177f0:	f103 001c 	add.w	r0, r3, #28
   177f4:	f000 8101 	beq.w	179fa <ip_interface_sendto+0x29a>
   177f8:	2a0a      	cmp	r2, #10
   177fa:	d103      	bne.n	17804 <ip_interface_sendto+0xa4>
   177fc:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   177fe:	2a24      	cmp	r2, #36	; 0x24
   17800:	f000 80e8 	beq.w	179d4 <ip_interface_sendto+0x274>
   17804:	f04f 0a16 	mov.w	sl, #22
   17808:	6818      	ldr	r0, [r3, #0]
   1780a:	b110      	cbz	r0, 17812 <ip_interface_sendto+0xb2>
   1780c:	f7fc fa34 	bl	13c78 <rpc_ip_client_data_free>
   17810:	9b07      	ldr	r3, [sp, #28]
   17812:	4618      	mov	r0, r3
   17814:	f7fc fa28 	bl	13c68 <rpc_ip_client_message_free>
   17818:	6823      	ldr	r3, [r4, #0]
   1781a:	031a      	lsls	r2, r3, #12
   1781c:	d43f      	bmi.n	1789e <ip_interface_sendto+0x13e>
   1781e:	6823      	ldr	r3, [r4, #0]
   17820:	b29b      	uxth	r3, r3
   17822:	2b0d      	cmp	r3, #13
   17824:	d007      	beq.n	17836 <ip_interface_sendto+0xd6>
   17826:	6823      	ldr	r3, [r4, #0]
   17828:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
   1782c:	6023      	str	r3, [r4, #0]
   1782e:	6823      	ldr	r3, [r4, #0]
   17830:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   17834:	6023      	str	r3, [r4, #0]
   17836:	f1ba 0f00 	cmp.w	sl, #0
   1783a:	d130      	bne.n	1789e <ip_interface_sendto+0x13e>
   1783c:	6823      	ldr	r3, [r4, #0]
   1783e:	0118      	lsls	r0, r3, #4
   17840:	d576      	bpl.n	17930 <ip_interface_sendto+0x1d0>
   17842:	6823      	ldr	r3, [r4, #0]
   17844:	f023 6300 	bic.w	r3, r3, #134217728	; 0x8000000
   17848:	6023      	str	r3, [r4, #0]
   1784a:	9b00      	ldr	r3, [sp, #0]
   1784c:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
   17850:	2800      	cmp	r0, #0
   17852:	d12e      	bne.n	178b2 <ip_interface_sendto+0x152>
   17854:	4628      	mov	r0, r5
   17856:	b009      	add	sp, #36	; 0x24
   17858:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1785c:	6822      	ldr	r2, [r4, #0]
   1785e:	0091      	lsls	r1, r2, #2
   17860:	d406      	bmi.n	17870 <ip_interface_sendto+0x110>
   17862:	2b01      	cmp	r3, #1
   17864:	f000 80b0 	beq.w	179c8 <ip_interface_sendto+0x268>
   17868:	6823      	ldr	r3, [r4, #0]
   1786a:	031a      	lsls	r2, r3, #12
   1786c:	f140 80d2 	bpl.w	17a14 <ip_interface_sendto+0x2b4>
   17870:	6823      	ldr	r3, [r4, #0]
   17872:	031b      	lsls	r3, r3, #12
   17874:	f140 80d8 	bpl.w	17a28 <ip_interface_sendto+0x2c8>
   17878:	4b74      	ldr	r3, [pc, #464]	; (17a4c <ip_interface_sendto+0x2ec>)
   1787a:	f8d4 a008 	ldr.w	sl, [r4, #8]
   1787e:	9300      	str	r3, [sp, #0]
   17880:	e7d9      	b.n	17836 <ip_interface_sendto+0xd6>
   17882:	9b00      	ldr	r3, [sp, #0]
   17884:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
   17888:	b108      	cbz	r0, 1788e <ip_interface_sendto+0x12e>
   1788a:	f7fc f9ed 	bl	13c68 <rpc_ip_client_message_free>
   1788e:	9b03      	ldr	r3, [sp, #12]
   17890:	2b00      	cmp	r3, #0
   17892:	d192      	bne.n	177ba <ip_interface_sendto+0x5a>
   17894:	6823      	ldr	r3, [r4, #0]
   17896:	f04f 0a23 	mov.w	sl, #35	; 0x23
   1789a:	031a      	lsls	r2, r3, #12
   1789c:	d5bf      	bpl.n	1781e <ip_interface_sendto+0xbe>
   1789e:	4650      	mov	r0, sl
   178a0:	f7f9 fbdc 	bl	1105c <bsd_os_errno_set>
   178a4:	9b00      	ldr	r3, [sp, #0]
   178a6:	f04f 35ff 	mov.w	r5, #4294967295
   178aa:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
   178ae:	2800      	cmp	r0, #0
   178b0:	d0d0      	beq.n	17854 <ip_interface_sendto+0xf4>
   178b2:	f7fc f9d9 	bl	13c68 <rpc_ip_client_message_free>
   178b6:	2300      	movs	r3, #0
   178b8:	9a00      	ldr	r2, [sp, #0]
   178ba:	f842 3027 	str.w	r3, [r2, r7, lsl #2]
   178be:	4628      	mov	r0, r5
   178c0:	b009      	add	sp, #36	; 0x24
   178c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   178c6:	4642      	mov	r2, r8
   178c8:	f8c3 9014 	str.w	r9, [r3, #20]
   178cc:	69a1      	ldr	r1, [r4, #24]
   178ce:	9804      	ldr	r0, [sp, #16]
   178d0:	6119      	str	r1, [r3, #16]
   178d2:	9902      	ldr	r1, [sp, #8]
   178d4:	4302      	orrs	r2, r0
   178d6:	60da      	str	r2, [r3, #12]
   178d8:	605d      	str	r5, [r3, #4]
   178da:	b119      	cbz	r1, 178e4 <ip_interface_sendto+0x184>
   178dc:	6818      	ldr	r0, [r3, #0]
   178de:	462a      	mov	r2, r5
   178e0:	f00a f82b 	bl	2193a <memcpy>
   178e4:	6823      	ldr	r3, [r4, #0]
   178e6:	4641      	mov	r1, r8
   178e8:	9305      	str	r3, [sp, #20]
   178ea:	6823      	ldr	r3, [r4, #0]
   178ec:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
   178f0:	6023      	str	r3, [r4, #0]
   178f2:	6823      	ldr	r3, [r4, #0]
   178f4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
   178f8:	6023      	str	r3, [r4, #0]
   178fa:	9b07      	ldr	r3, [sp, #28]
   178fc:	4618      	mov	r0, r3
   178fe:	9301      	str	r3, [sp, #4]
   17900:	f7fc f99c 	bl	13c3c <rpc_ip_client_request_send>
   17904:	9b01      	ldr	r3, [sp, #4]
   17906:	4682      	mov	sl, r0
   17908:	b9e8      	cbnz	r0, 17946 <ip_interface_sendto+0x1e6>
   1790a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
   1790e:	f04f 33ff 	mov.w	r3, #4294967295
   17912:	4611      	mov	r1, r2
   17914:	4638      	mov	r0, r7
   17916:	f001 f9ed 	bl	18cf4 <interface_socket_wait>
   1791a:	b308      	cbz	r0, 17960 <ip_interface_sendto+0x200>
   1791c:	6823      	ldr	r3, [r4, #0]
   1791e:	0319      	lsls	r1, r3, #12
   17920:	d42a      	bmi.n	17978 <ip_interface_sendto+0x218>
   17922:	280c      	cmp	r0, #12
   17924:	d0ad      	beq.n	17882 <ip_interface_sendto+0x122>
   17926:	4682      	mov	sl, r0
   17928:	e776      	b.n	17818 <ip_interface_sendto+0xb8>
   1792a:	f04f 0a2f 	mov.w	sl, #47	; 0x2f
   1792e:	e76b      	b.n	17808 <ip_interface_sendto+0xa8>
   17930:	9b00      	ldr	r3, [sp, #0]
   17932:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
   17936:	6985      	ldr	r5, [r0, #24]
   17938:	f7fc f996 	bl	13c68 <rpc_ip_client_message_free>
   1793c:	2300      	movs	r3, #0
   1793e:	9a00      	ldr	r2, [sp, #0]
   17940:	f842 3027 	str.w	r3, [r2, r7, lsl #2]
   17944:	e7bb      	b.n	178be <ip_interface_sendto+0x15e>
   17946:	6818      	ldr	r0, [r3, #0]
   17948:	469a      	mov	sl, r3
   1794a:	b108      	cbz	r0, 17950 <ip_interface_sendto+0x1f0>
   1794c:	f7fc f994 	bl	13c78 <rpc_ip_client_data_free>
   17950:	4650      	mov	r0, sl
   17952:	f7fc f989 	bl	13c68 <rpc_ip_client_message_free>
   17956:	9b05      	ldr	r3, [sp, #20]
   17958:	f04f 0a23 	mov.w	sl, #35	; 0x23
   1795c:	6023      	str	r3, [r4, #0]
   1795e:	e75b      	b.n	17818 <ip_interface_sendto+0xb8>
   17960:	4638      	mov	r0, r7
   17962:	f001 fa3b 	bl	18ddc <interface_socket_from_handle_get>
   17966:	4603      	mov	r3, r0
   17968:	b1e0      	cbz	r0, 179a4 <ip_interface_sendto+0x244>
   1796a:	6840      	ldr	r0, [r0, #4]
   1796c:	b1d0      	cbz	r0, 179a4 <ip_interface_sendto+0x244>
   1796e:	f8c3 a004 	str.w	sl, [r3, #4]
   17972:	6823      	ldr	r3, [r4, #0]
   17974:	0319      	lsls	r1, r3, #12
   17976:	d5d4      	bpl.n	17922 <ip_interface_sendto+0x1c2>
   17978:	f8d4 a008 	ldr.w	sl, [r4, #8]
   1797c:	6823      	ldr	r3, [r4, #0]
   1797e:	031e      	lsls	r6, r3, #12
   17980:	f57f af4d 	bpl.w	1781e <ip_interface_sendto+0xbe>
   17984:	e757      	b.n	17836 <ip_interface_sendto+0xd6>
   17986:	2e00      	cmp	r6, #0
   17988:	f43f af02 	beq.w	17790 <ip_interface_sendto+0x30>
   1798c:	4b2f      	ldr	r3, [pc, #188]	; (17a4c <ip_interface_sendto+0x2ec>)
   1798e:	f04f 0a38 	mov.w	sl, #56	; 0x38
   17992:	9300      	str	r3, [sp, #0]
   17994:	e783      	b.n	1789e <ip_interface_sendto+0x13e>
   17996:	6823      	ldr	r3, [r4, #0]
   17998:	f083 5380 	eor.w	r3, r3, #268435456	; 0x10000000
   1799c:	f3c3 7300 	ubfx	r3, r3, #28, #1
   179a0:	9303      	str	r3, [sp, #12]
   179a2:	e702      	b.n	177aa <ip_interface_sendto+0x4a>
   179a4:	6823      	ldr	r3, [r4, #0]
   179a6:	031b      	lsls	r3, r3, #12
   179a8:	f53f af48 	bmi.w	1783c <ip_interface_sendto+0xdc>
   179ac:	6823      	ldr	r3, [r4, #0]
   179ae:	b29b      	uxth	r3, r3
   179b0:	2b0d      	cmp	r3, #13
   179b2:	f43f af43 	beq.w	1783c <ip_interface_sendto+0xdc>
   179b6:	6823      	ldr	r3, [r4, #0]
   179b8:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
   179bc:	6023      	str	r3, [r4, #0]
   179be:	6823      	ldr	r3, [r4, #0]
   179c0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   179c4:	6023      	str	r3, [r4, #0]
   179c6:	e739      	b.n	1783c <ip_interface_sendto+0xdc>
   179c8:	6823      	ldr	r3, [r4, #0]
   179ca:	b29b      	uxth	r3, r3
   179cc:	2b05      	cmp	r3, #5
   179ce:	f47f af4f 	bne.w	17870 <ip_interface_sendto+0x110>
   179d2:	e749      	b.n	17868 <ip_interface_sendto+0x108>
   179d4:	2210      	movs	r2, #16
   179d6:	8931      	ldrh	r1, [r6, #8]
   179d8:	835a      	strh	r2, [r3, #26]
   179da:	8319      	strh	r1, [r3, #24]
   179dc:	18b1      	adds	r1, r6, r2
   179de:	f009 ffac 	bl	2193a <memcpy>
   179e2:	f247 0207 	movw	r2, #28679	; 0x7007
   179e6:	9b07      	ldr	r3, [sp, #28]
   179e8:	4690      	mov	r8, r2
   179ea:	6899      	ldr	r1, [r3, #8]
   179ec:	8b58      	ldrh	r0, [r3, #26]
   179ee:	3104      	adds	r1, #4
   179f0:	4401      	add	r1, r0
   179f2:	f8c3 9014 	str.w	r9, [r3, #20]
   179f6:	6099      	str	r1, [r3, #8]
   179f8:	e768      	b.n	178cc <ip_interface_sendto+0x16c>
   179fa:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   179fc:	2a10      	cmp	r2, #16
   179fe:	f47f af01 	bne.w	17804 <ip_interface_sendto+0xa4>
   17a02:	2204      	movs	r2, #4
   17a04:	8931      	ldrh	r1, [r6, #8]
   17a06:	835a      	strh	r2, [r3, #26]
   17a08:	8319      	strh	r1, [r3, #24]
   17a0a:	f106 010c 	add.w	r1, r6, #12
   17a0e:	f009 ff94 	bl	2193a <memcpy>
   17a12:	e7e6      	b.n	179e2 <ip_interface_sendto+0x282>
   17a14:	4b0d      	ldr	r3, [pc, #52]	; (17a4c <ip_interface_sendto+0x2ec>)
   17a16:	f04f 0a23 	mov.w	sl, #35	; 0x23
   17a1a:	9300      	str	r3, [sp, #0]
   17a1c:	e73f      	b.n	1789e <ip_interface_sendto+0x13e>
   17a1e:	4b0b      	ldr	r3, [pc, #44]	; (17a4c <ip_interface_sendto+0x2ec>)
   17a20:	f04f 0a28 	mov.w	sl, #40	; 0x28
   17a24:	9300      	str	r3, [sp, #0]
   17a26:	e73a      	b.n	1789e <ip_interface_sendto+0x13e>
   17a28:	4b08      	ldr	r3, [pc, #32]	; (17a4c <ip_interface_sendto+0x2ec>)
   17a2a:	f04f 0a39 	mov.w	sl, #57	; 0x39
   17a2e:	9300      	str	r3, [sp, #0]
   17a30:	e735      	b.n	1789e <ip_interface_sendto+0x13e>
   17a32:	4b06      	ldr	r3, [pc, #24]	; (17a4c <ip_interface_sendto+0x2ec>)
   17a34:	f04f 0a2d 	mov.w	sl, #45	; 0x2d
   17a38:	9300      	str	r3, [sp, #0]
   17a3a:	e730      	b.n	1789e <ip_interface_sendto+0x13e>
   17a3c:	4b03      	ldr	r3, [pc, #12]	; (17a4c <ip_interface_sendto+0x2ec>)
   17a3e:	f04f 0a09 	mov.w	sl, #9
   17a42:	9300      	str	r3, [sp, #0]
   17a44:	e72b      	b.n	1789e <ip_interface_sendto+0x13e>
   17a46:	f04f 0a0c 	mov.w	sl, #12
   17a4a:	e6e5      	b.n	17818 <ip_interface_sendto+0xb8>
   17a4c:	2002081c 	.word	0x2002081c

00017a50 <ip_interface_recvfrom>:
   17a50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17a54:	b085      	sub	sp, #20
   17a56:	2a00      	cmp	r2, #0
   17a58:	f000 811b 	beq.w	17c92 <ip_interface_recvfrom+0x242>
   17a5c:	4605      	mov	r5, r0
   17a5e:	468a      	mov	sl, r1
   17a60:	4698      	mov	r8, r3
   17a62:	4617      	mov	r7, r2
   17a64:	b11b      	cbz	r3, 17a6e <ip_interface_recvfrom+0x1e>
   17a66:	f013 0f1a 	tst.w	r3, #26
   17a6a:	f000 810f 	beq.w	17c8c <ip_interface_recvfrom+0x23c>
   17a6e:	4628      	mov	r0, r5
   17a70:	f001 f9b4 	bl	18ddc <interface_socket_from_handle_get>
   17a74:	4604      	mov	r4, r0
   17a76:	2800      	cmp	r0, #0
   17a78:	f000 810e 	beq.w	17c98 <ip_interface_recvfrom+0x248>
   17a7c:	6803      	ldr	r3, [r0, #0]
   17a7e:	02d9      	lsls	r1, r3, #11
   17a80:	d564      	bpl.n	17b4c <ip_interface_recvfrom+0xfc>
   17a82:	f018 0f02 	tst.w	r8, #2
   17a86:	bf18      	it	ne
   17a88:	f04f 0900 	movne.w	r9, #0
   17a8c:	f04f 3bff 	mov.w	fp, #4294967295
   17a90:	bf08      	it	eq
   17a92:	6803      	ldreq	r3, [r0, #0]
   17a94:	f008 0610 	and.w	r6, r8, #16
   17a98:	bf04      	itt	eq
   17a9a:	f083 5980 	eoreq.w	r9, r3, #268435456	; 0x10000000
   17a9e:	f3c9 7900 	ubfxeq	r9, r9, #28, #1
   17aa2:	6823      	ldr	r3, [r4, #0]
   17aa4:	03da      	lsls	r2, r3, #15
   17aa6:	d56c      	bpl.n	17b82 <ip_interface_recvfrom+0x132>
   17aa8:	6823      	ldr	r3, [r4, #0]
   17aaa:	69e0      	ldr	r0, [r4, #28]
   17aac:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
   17ab0:	6023      	str	r3, [r4, #0]
   17ab2:	6803      	ldr	r3, [r0, #0]
   17ab4:	68db      	ldr	r3, [r3, #12]
   17ab6:	4798      	blx	r3
   17ab8:	f1b0 3fff 	cmp.w	r0, #4294967295
   17abc:	4683      	mov	fp, r0
   17abe:	d07f      	beq.n	17bc0 <ip_interface_recvfrom+0x170>
   17ac0:	4287      	cmp	r7, r0
   17ac2:	dd03      	ble.n	17acc <ip_interface_recvfrom+0x7c>
   17ac4:	6923      	ldr	r3, [r4, #16]
   17ac6:	2b01      	cmp	r3, #1
   17ac8:	f000 80a6 	beq.w	17c18 <ip_interface_recvfrom+0x1c8>
   17acc:	2600      	movs	r6, #0
   17ace:	69e0      	ldr	r0, [r4, #28]
   17ad0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   17ad2:	b103      	cbz	r3, 17ad6 <ip_interface_recvfrom+0x86>
   17ad4:	681b      	ldr	r3, [r3, #0]
   17ad6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   17ad8:	e9cd a700 	strd	sl, r7, [sp]
   17adc:	e9cd 2302 	strd	r2, r3, [sp, #8]
   17ae0:	6803      	ldr	r3, [r0, #0]
   17ae2:	4642      	mov	r2, r8
   17ae4:	689b      	ldr	r3, [r3, #8]
   17ae6:	4669      	mov	r1, sp
   17ae8:	4798      	blx	r3
   17aea:	4683      	mov	fp, r0
   17aec:	69e0      	ldr	r0, [r4, #28]
   17aee:	f1bb 3fff 	cmp.w	fp, #4294967295
   17af2:	6803      	ldr	r3, [r0, #0]
   17af4:	bf18      	it	ne
   17af6:	2501      	movne	r5, #1
   17af8:	68db      	ldr	r3, [r3, #12]
   17afa:	bf0a      	itet	eq
   17afc:	2500      	moveq	r5, #0
   17afe:	f04f 0900 	movne.w	r9, #0
   17b02:	f04f 0923 	moveq.w	r9, #35	; 0x23
   17b06:	4798      	blx	r3
   17b08:	3001      	adds	r0, #1
   17b0a:	d135      	bne.n	17b78 <ip_interface_recvfrom+0x128>
   17b0c:	2e00      	cmp	r6, #0
   17b0e:	f000 80b5 	beq.w	17c7c <ip_interface_recvfrom+0x22c>
   17b12:	2d00      	cmp	r5, #0
   17b14:	f000 80a5 	beq.w	17c62 <ip_interface_recvfrom+0x212>
   17b18:	6823      	ldr	r3, [r4, #0]
   17b1a:	0319      	lsls	r1, r3, #12
   17b1c:	d506      	bpl.n	17b2c <ip_interface_recvfrom+0xdc>
   17b1e:	6823      	ldr	r3, [r4, #0]
   17b20:	b29b      	uxth	r3, r3
   17b22:	2b0d      	cmp	r3, #13
   17b24:	d002      	beq.n	17b2c <ip_interface_recvfrom+0xdc>
   17b26:	6923      	ldr	r3, [r4, #16]
   17b28:	2b01      	cmp	r3, #1
   17b2a:	d025      	beq.n	17b78 <ip_interface_recvfrom+0x128>
   17b2c:	6823      	ldr	r3, [r4, #0]
   17b2e:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
   17b32:	6823      	ldr	r3, [r4, #0]
   17b34:	f040 80b3 	bne.w	17c9e <ip_interface_recvfrom+0x24e>
   17b38:	031a      	lsls	r2, r3, #12
   17b3a:	d474      	bmi.n	17c26 <ip_interface_recvfrom+0x1d6>
   17b3c:	f1b9 0f00 	cmp.w	r9, #0
   17b40:	f040 8089 	bne.w	17c56 <ip_interface_recvfrom+0x206>
   17b44:	4658      	mov	r0, fp
   17b46:	b005      	add	sp, #20
   17b48:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17b4c:	6803      	ldr	r3, [r0, #0]
   17b4e:	b29b      	uxth	r3, r3
   17b50:	2b06      	cmp	r3, #6
   17b52:	d072      	beq.n	17c3a <ip_interface_recvfrom+0x1ea>
   17b54:	6803      	ldr	r3, [r0, #0]
   17b56:	b29b      	uxth	r3, r3
   17b58:	2b07      	cmp	r3, #7
   17b5a:	bf0c      	ite	eq
   17b5c:	f04f 0909 	moveq.w	r9, #9
   17b60:	f04f 0939 	movne.w	r9, #57	; 0x39
   17b64:	69e0      	ldr	r0, [r4, #28]
   17b66:	6803      	ldr	r3, [r0, #0]
   17b68:	68db      	ldr	r3, [r3, #12]
   17b6a:	4798      	blx	r3
   17b6c:	f1b0 3fff 	cmp.w	r0, #4294967295
   17b70:	4683      	mov	fp, r0
   17b72:	d0db      	beq.n	17b2c <ip_interface_recvfrom+0xdc>
   17b74:	f04f 3bff 	mov.w	fp, #4294967295
   17b78:	6823      	ldr	r3, [r4, #0]
   17b7a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   17b7e:	6023      	str	r3, [r4, #0]
   17b80:	e7dc      	b.n	17b3c <ip_interface_recvfrom+0xec>
   17b82:	f1b9 0f00 	cmp.w	r9, #0
   17b86:	d07d      	beq.n	17c84 <ip_interface_recvfrom+0x234>
   17b88:	f44f 3280 	mov.w	r2, #65536	; 0x10000
   17b8c:	6a23      	ldr	r3, [r4, #32]
   17b8e:	4611      	mov	r1, r2
   17b90:	2b00      	cmp	r3, #0
   17b92:	bf08      	it	eq
   17b94:	f04f 33ff 	moveq.w	r3, #4294967295
   17b98:	4628      	mov	r0, r5
   17b9a:	f001 f8ab 	bl	18cf4 <interface_socket_wait>
   17b9e:	4681      	mov	r9, r0
   17ba0:	b358      	cbz	r0, 17bfa <ip_interface_recvfrom+0x1aa>
   17ba2:	6823      	ldr	r3, [r4, #0]
   17ba4:	69e0      	ldr	r0, [r4, #28]
   17ba6:	031b      	lsls	r3, r3, #12
   17ba8:	d521      	bpl.n	17bee <ip_interface_recvfrom+0x19e>
   17baa:	6823      	ldr	r3, [r4, #0]
   17bac:	b29b      	uxth	r3, r3
   17bae:	2b0d      	cmp	r3, #13
   17bb0:	d01d      	beq.n	17bee <ip_interface_recvfrom+0x19e>
   17bb2:	6926      	ldr	r6, [r4, #16]
   17bb4:	f1a6 0601 	sub.w	r6, r6, #1
   17bb8:	fab6 f686 	clz	r6, r6
   17bbc:	0976      	lsrs	r6, r6, #5
   17bbe:	e787      	b.n	17ad0 <ip_interface_recvfrom+0x80>
   17bc0:	6823      	ldr	r3, [r4, #0]
   17bc2:	0318      	lsls	r0, r3, #12
   17bc4:	d5dd      	bpl.n	17b82 <ip_interface_recvfrom+0x132>
   17bc6:	6823      	ldr	r3, [r4, #0]
   17bc8:	b29b      	uxth	r3, r3
   17bca:	2b0d      	cmp	r3, #13
   17bcc:	d0d9      	beq.n	17b82 <ip_interface_recvfrom+0x132>
   17bce:	6923      	ldr	r3, [r4, #16]
   17bd0:	69e0      	ldr	r0, [r4, #28]
   17bd2:	2b01      	cmp	r3, #1
   17bd4:	d034      	beq.n	17c40 <ip_interface_recvfrom+0x1f0>
   17bd6:	f04f 0939 	mov.w	r9, #57	; 0x39
   17bda:	6823      	ldr	r3, [r4, #0]
   17bdc:	0c1b      	lsrs	r3, r3, #16
   17bde:	041b      	lsls	r3, r3, #16
   17be0:	f043 030d 	orr.w	r3, r3, #13
   17be4:	6023      	str	r3, [r4, #0]
   17be6:	6823      	ldr	r3, [r4, #0]
   17be8:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
   17bec:	6023      	str	r3, [r4, #0]
   17bee:	6803      	ldr	r3, [r0, #0]
   17bf0:	68db      	ldr	r3, [r3, #12]
   17bf2:	4798      	blx	r3
   17bf4:	3001      	adds	r0, #1
   17bf6:	d1bf      	bne.n	17b78 <ip_interface_recvfrom+0x128>
   17bf8:	e798      	b.n	17b2c <ip_interface_recvfrom+0xdc>
   17bfa:	4628      	mov	r0, r5
   17bfc:	f001 f8ee 	bl	18ddc <interface_socket_from_handle_get>
   17c00:	b138      	cbz	r0, 17c12 <ip_interface_recvfrom+0x1c2>
   17c02:	f8d0 9004 	ldr.w	r9, [r0, #4]
   17c06:	f1b9 0f00 	cmp.w	r9, #0
   17c0a:	d002      	beq.n	17c12 <ip_interface_recvfrom+0x1c2>
   17c0c:	2300      	movs	r3, #0
   17c0e:	6043      	str	r3, [r0, #4]
   17c10:	e7c7      	b.n	17ba2 <ip_interface_recvfrom+0x152>
   17c12:	f04f 0901 	mov.w	r9, #1
   17c16:	e744      	b.n	17aa2 <ip_interface_recvfrom+0x52>
   17c18:	b11e      	cbz	r6, 17c22 <ip_interface_recvfrom+0x1d2>
   17c1a:	6823      	ldr	r3, [r4, #0]
   17c1c:	00db      	lsls	r3, r3, #3
   17c1e:	d5b3      	bpl.n	17b88 <ip_interface_recvfrom+0x138>
   17c20:	e754      	b.n	17acc <ip_interface_recvfrom+0x7c>
   17c22:	69e0      	ldr	r0, [r4, #28]
   17c24:	e754      	b.n	17ad0 <ip_interface_recvfrom+0x80>
   17c26:	6823      	ldr	r3, [r4, #0]
   17c28:	b29b      	uxth	r3, r3
   17c2a:	2b0d      	cmp	r3, #13
   17c2c:	d186      	bne.n	17b3c <ip_interface_recvfrom+0xec>
   17c2e:	68a3      	ldr	r3, [r4, #8]
   17c30:	2b00      	cmp	r3, #0
   17c32:	d083      	beq.n	17b3c <ip_interface_recvfrom+0xec>
   17c34:	f8d4 9008 	ldr.w	r9, [r4, #8]
   17c38:	e780      	b.n	17b3c <ip_interface_recvfrom+0xec>
   17c3a:	f04f 0909 	mov.w	r9, #9
   17c3e:	e791      	b.n	17b64 <ip_interface_recvfrom+0x114>
   17c40:	6803      	ldr	r3, [r0, #0]
   17c42:	68db      	ldr	r3, [r3, #12]
   17c44:	4798      	blx	r3
   17c46:	3001      	adds	r0, #1
   17c48:	d00b      	beq.n	17c62 <ip_interface_recvfrom+0x212>
   17c4a:	f04f 0923 	mov.w	r9, #35	; 0x23
   17c4e:	6823      	ldr	r3, [r4, #0]
   17c50:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   17c54:	6023      	str	r3, [r4, #0]
   17c56:	4648      	mov	r0, r9
   17c58:	f7f9 fa00 	bl	1105c <bsd_os_errno_set>
   17c5c:	f04f 3bff 	mov.w	fp, #4294967295
   17c60:	e770      	b.n	17b44 <ip_interface_recvfrom+0xf4>
   17c62:	6823      	ldr	r3, [r4, #0]
   17c64:	f04f 0b00 	mov.w	fp, #0
   17c68:	0c1b      	lsrs	r3, r3, #16
   17c6a:	041b      	lsls	r3, r3, #16
   17c6c:	f043 030d 	orr.w	r3, r3, #13
   17c70:	6023      	str	r3, [r4, #0]
   17c72:	6823      	ldr	r3, [r4, #0]
   17c74:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
   17c78:	6023      	str	r3, [r4, #0]
   17c7a:	e763      	b.n	17b44 <ip_interface_recvfrom+0xf4>
   17c7c:	2d00      	cmp	r5, #0
   17c7e:	f47f af4b 	bne.w	17b18 <ip_interface_recvfrom+0xc8>
   17c82:	e753      	b.n	17b2c <ip_interface_recvfrom+0xdc>
   17c84:	f04f 0923 	mov.w	r9, #35	; 0x23
   17c88:	69e0      	ldr	r0, [r4, #28]
   17c8a:	e7b0      	b.n	17bee <ip_interface_recvfrom+0x19e>
   17c8c:	f04f 092d 	mov.w	r9, #45	; 0x2d
   17c90:	e7e1      	b.n	17c56 <ip_interface_recvfrom+0x206>
   17c92:	f04f 0916 	mov.w	r9, #22
   17c96:	e7de      	b.n	17c56 <ip_interface_recvfrom+0x206>
   17c98:	f04f 0909 	mov.w	r9, #9
   17c9c:	e7db      	b.n	17c56 <ip_interface_recvfrom+0x206>
   17c9e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
   17ca2:	6023      	str	r3, [r4, #0]
   17ca4:	6823      	ldr	r3, [r4, #0]
   17ca6:	f04f 0969 	mov.w	r9, #105	; 0x69
   17caa:	0c1b      	lsrs	r3, r3, #16
   17cac:	041b      	lsls	r3, r3, #16
   17cae:	f043 030d 	orr.w	r3, r3, #13
   17cb2:	6023      	str	r3, [r4, #0]
   17cb4:	e7cf      	b.n	17c56 <ip_interface_recvfrom+0x206>
   17cb6:	bf00      	nop

00017cb8 <ip_interface_connect>:
   17cb8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   17cbc:	b083      	sub	sp, #12
   17cbe:	2900      	cmp	r1, #0
   17cc0:	d049      	beq.n	17d56 <ip_interface_connect+0x9e>
   17cc2:	4616      	mov	r6, r2
   17cc4:	2a00      	cmp	r2, #0
   17cc6:	d046      	beq.n	17d56 <ip_interface_connect+0x9e>
   17cc8:	4607      	mov	r7, r0
   17cca:	4688      	mov	r8, r1
   17ccc:	f001 f886 	bl	18ddc <interface_socket_from_handle_get>
   17cd0:	4605      	mov	r5, r0
   17cd2:	2800      	cmp	r0, #0
   17cd4:	f000 80a8 	beq.w	17e28 <ip_interface_connect+0x170>
   17cd8:	6803      	ldr	r3, [r0, #0]
   17cda:	b29b      	uxth	r3, r3
   17cdc:	2b02      	cmp	r3, #2
   17cde:	d004      	beq.n	17cea <ip_interface_connect+0x32>
   17ce0:	6803      	ldr	r3, [r0, #0]
   17ce2:	b29b      	uxth	r3, r3
   17ce4:	2b04      	cmp	r3, #4
   17ce6:	f040 808b 	bne.w	17e00 <ip_interface_connect+0x148>
   17cea:	6829      	ldr	r1, [r5, #0]
   17cec:	f011 5100 	ands.w	r1, r1, #536870912	; 0x20000000
   17cf0:	f040 8082 	bne.w	17df8 <ip_interface_connect+0x140>
   17cf4:	a802      	add	r0, sp, #8
   17cf6:	f840 1d04 	str.w	r1, [r0, #-4]!
   17cfa:	f8d5 9018 	ldr.w	r9, [r5, #24]
   17cfe:	f7fb ff89 	bl	13c14 <rpc_ip_client_request_alloc>
   17d02:	bb90      	cbnz	r0, 17d6a <ip_interface_connect+0xb2>
   17d04:	2108      	movs	r1, #8
   17d06:	043b      	lsls	r3, r7, #16
   17d08:	9c01      	ldr	r4, [sp, #4]
   17d0a:	f443 42e0 	orr.w	r2, r3, #28672	; 0x7000
   17d0e:	f042 0202 	orr.w	r2, r2, #2
   17d12:	60e2      	str	r2, [r4, #12]
   17d14:	f8c4 9010 	str.w	r9, [r4, #16]
   17d18:	7260      	strb	r0, [r4, #9]
   17d1a:	72a0      	strb	r0, [r4, #10]
   17d1c:	72e0      	strb	r0, [r4, #11]
   17d1e:	7221      	strb	r1, [r4, #8]
   17d20:	f443 43e0 	orr.w	r3, r3, #28672	; 0x7000
   17d24:	f043 0302 	orr.w	r3, r3, #2
   17d28:	60e3      	str	r3, [r4, #12]
   17d2a:	68a3      	ldr	r3, [r4, #8]
   17d2c:	69aa      	ldr	r2, [r5, #24]
   17d2e:	3304      	adds	r3, #4
   17d30:	6122      	str	r2, [r4, #16]
   17d32:	60a3      	str	r3, [r4, #8]
   17d34:	68eb      	ldr	r3, [r5, #12]
   17d36:	f8d8 2004 	ldr.w	r2, [r8, #4]
   17d3a:	4293      	cmp	r3, r2
   17d3c:	d11a      	bne.n	17d74 <ip_interface_connect+0xbc>
   17d3e:	f898 2000 	ldrb.w	r2, [r8]
   17d42:	4296      	cmp	r6, r2
   17d44:	d107      	bne.n	17d56 <ip_interface_connect+0x9e>
   17d46:	2b02      	cmp	r3, #2
   17d48:	f104 0018 	add.w	r0, r4, #24
   17d4c:	d014      	beq.n	17d78 <ip_interface_connect+0xc0>
   17d4e:	2b0a      	cmp	r3, #10
   17d50:	d101      	bne.n	17d56 <ip_interface_connect+0x9e>
   17d52:	2e24      	cmp	r6, #36	; 0x24
   17d54:	d01c      	beq.n	17d90 <ip_interface_connect+0xd8>
   17d56:	2416      	movs	r4, #22
   17d58:	4620      	mov	r0, r4
   17d5a:	f7f9 f97f 	bl	1105c <bsd_os_errno_set>
   17d5e:	f04f 34ff 	mov.w	r4, #4294967295
   17d62:	4620      	mov	r0, r4
   17d64:	b003      	add	sp, #12
   17d66:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   17d6a:	9c01      	ldr	r4, [sp, #4]
   17d6c:	2c00      	cmp	r4, #0
   17d6e:	d059      	beq.n	17e24 <ip_interface_connect+0x16c>
   17d70:	043b      	lsls	r3, r7, #16
   17d72:	e7d5      	b.n	17d20 <ip_interface_connect+0x68>
   17d74:	242f      	movs	r4, #47	; 0x2f
   17d76:	e7ef      	b.n	17d58 <ip_interface_connect+0xa0>
   17d78:	2e10      	cmp	r6, #16
   17d7a:	d1ec      	bne.n	17d56 <ip_interface_connect+0x9e>
   17d7c:	2204      	movs	r2, #4
   17d7e:	f8b8 3008 	ldrh.w	r3, [r8, #8]
   17d82:	f108 010c 	add.w	r1, r8, #12
   17d86:	82e2      	strh	r2, [r4, #22]
   17d88:	82a3      	strh	r3, [r4, #20]
   17d8a:	f009 fdd6 	bl	2193a <memcpy>
   17d8e:	e008      	b.n	17da2 <ip_interface_connect+0xea>
   17d90:	2210      	movs	r2, #16
   17d92:	f8b8 3008 	ldrh.w	r3, [r8, #8]
   17d96:	eb08 0102 	add.w	r1, r8, r2
   17d9a:	82e2      	strh	r2, [r4, #22]
   17d9c:	82a3      	strh	r3, [r4, #20]
   17d9e:	f009 fdcc 	bl	2193a <memcpy>
   17da2:	68a3      	ldr	r3, [r4, #8]
   17da4:	8ae2      	ldrh	r2, [r4, #22]
   17da6:	f247 0102 	movw	r1, #28674	; 0x7002
   17daa:	4413      	add	r3, r2
   17dac:	60a3      	str	r3, [r4, #8]
   17dae:	682e      	ldr	r6, [r5, #0]
   17db0:	682b      	ldr	r3, [r5, #0]
   17db2:	4620      	mov	r0, r4
   17db4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
   17db8:	602b      	str	r3, [r5, #0]
   17dba:	f7fb ff3f 	bl	13c3c <rpc_ip_client_request_send>
   17dbe:	b988      	cbnz	r0, 17de4 <ip_interface_connect+0x12c>
   17dc0:	682b      	ldr	r3, [r5, #0]
   17dc2:	f013 5880 	ands.w	r8, r3, #268435456	; 0x10000000
   17dc6:	d119      	bne.n	17dfc <ip_interface_connect+0x144>
   17dc8:	f04f 33ff 	mov.w	r3, #4294967295
   17dcc:	f64f 72ff 	movw	r2, #65535	; 0xffff
   17dd0:	2105      	movs	r1, #5
   17dd2:	4638      	mov	r0, r7
   17dd4:	f000 ff8e 	bl	18cf4 <interface_socket_wait>
   17dd8:	4604      	mov	r4, r0
   17dda:	b1c0      	cbz	r0, 17e0e <ip_interface_connect+0x156>
   17ddc:	2c73      	cmp	r4, #115	; 0x73
   17dde:	d0bb      	beq.n	17d58 <ip_interface_connect+0xa0>
   17de0:	602e      	str	r6, [r5, #0]
   17de2:	e7b9      	b.n	17d58 <ip_interface_connect+0xa0>
   17de4:	6820      	ldr	r0, [r4, #0]
   17de6:	b108      	cbz	r0, 17dec <ip_interface_connect+0x134>
   17de8:	f7fb ff46 	bl	13c78 <rpc_ip_client_data_free>
   17dec:	4620      	mov	r0, r4
   17dee:	f7fb ff3b 	bl	13c68 <rpc_ip_client_message_free>
   17df2:	2423      	movs	r4, #35	; 0x23
   17df4:	602e      	str	r6, [r5, #0]
   17df6:	e7af      	b.n	17d58 <ip_interface_connect+0xa0>
   17df8:	2472      	movs	r4, #114	; 0x72
   17dfa:	e7ad      	b.n	17d58 <ip_interface_connect+0xa0>
   17dfc:	2473      	movs	r4, #115	; 0x73
   17dfe:	e7ab      	b.n	17d58 <ip_interface_connect+0xa0>
   17e00:	6803      	ldr	r3, [r0, #0]
   17e02:	b29b      	uxth	r3, r3
   17e04:	2b05      	cmp	r3, #5
   17e06:	bf14      	ite	ne
   17e08:	2409      	movne	r4, #9
   17e0a:	2438      	moveq	r4, #56	; 0x38
   17e0c:	e7a4      	b.n	17d58 <ip_interface_connect+0xa0>
   17e0e:	4638      	mov	r0, r7
   17e10:	f000 ffe4 	bl	18ddc <interface_socket_from_handle_get>
   17e14:	2800      	cmp	r0, #0
   17e16:	d0a4      	beq.n	17d62 <ip_interface_connect+0xaa>
   17e18:	6844      	ldr	r4, [r0, #4]
   17e1a:	2c00      	cmp	r4, #0
   17e1c:	d0a1      	beq.n	17d62 <ip_interface_connect+0xaa>
   17e1e:	f8c0 8004 	str.w	r8, [r0, #4]
   17e22:	e7db      	b.n	17ddc <ip_interface_connect+0x124>
   17e24:	240c      	movs	r4, #12
   17e26:	e797      	b.n	17d58 <ip_interface_connect+0xa0>
   17e28:	2409      	movs	r4, #9
   17e2a:	e795      	b.n	17d58 <ip_interface_connect+0xa0>

00017e2c <ip_interface_bind>:
   17e2c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   17e30:	b083      	sub	sp, #12
   17e32:	b3b1      	cbz	r1, 17ea2 <ip_interface_bind+0x76>
   17e34:	4616      	mov	r6, r2
   17e36:	b3a2      	cbz	r2, 17ea2 <ip_interface_bind+0x76>
   17e38:	4607      	mov	r7, r0
   17e3a:	4688      	mov	r8, r1
   17e3c:	f000 ffce 	bl	18ddc <interface_socket_from_handle_get>
   17e40:	4605      	mov	r5, r0
   17e42:	2800      	cmp	r0, #0
   17e44:	d04a      	beq.n	17edc <ip_interface_bind+0xb0>
   17e46:	6803      	ldr	r3, [r0, #0]
   17e48:	b29b      	uxth	r3, r3
   17e4a:	2b02      	cmp	r3, #2
   17e4c:	d146      	bne.n	17edc <ip_interface_bind+0xb0>
   17e4e:	2100      	movs	r1, #0
   17e50:	a802      	add	r0, sp, #8
   17e52:	f840 1d04 	str.w	r1, [r0, #-4]!
   17e56:	f8d5 9018 	ldr.w	r9, [r5, #24]
   17e5a:	f7fb fedb 	bl	13c14 <rpc_ip_client_request_alloc>
   17e5e:	bb50      	cbnz	r0, 17eb6 <ip_interface_bind+0x8a>
   17e60:	f247 0305 	movw	r3, #28677	; 0x7005
   17e64:	2208      	movs	r2, #8
   17e66:	9c01      	ldr	r4, [sp, #4]
   17e68:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
   17e6c:	60e3      	str	r3, [r4, #12]
   17e6e:	f8c4 9010 	str.w	r9, [r4, #16]
   17e72:	7260      	strb	r0, [r4, #9]
   17e74:	72a0      	strb	r0, [r4, #10]
   17e76:	72e0      	strb	r0, [r4, #11]
   17e78:	7222      	strb	r2, [r4, #8]
   17e7a:	68a3      	ldr	r3, [r4, #8]
   17e7c:	3304      	adds	r3, #4
   17e7e:	60a3      	str	r3, [r4, #8]
   17e80:	68eb      	ldr	r3, [r5, #12]
   17e82:	f8d8 2004 	ldr.w	r2, [r8, #4]
   17e86:	4293      	cmp	r3, r2
   17e88:	d11a      	bne.n	17ec0 <ip_interface_bind+0x94>
   17e8a:	f898 2000 	ldrb.w	r2, [r8]
   17e8e:	4296      	cmp	r6, r2
   17e90:	d107      	bne.n	17ea2 <ip_interface_bind+0x76>
   17e92:	2b02      	cmp	r3, #2
   17e94:	f104 0018 	add.w	r0, r4, #24
   17e98:	d014      	beq.n	17ec4 <ip_interface_bind+0x98>
   17e9a:	2b0a      	cmp	r3, #10
   17e9c:	d101      	bne.n	17ea2 <ip_interface_bind+0x76>
   17e9e:	2e24      	cmp	r6, #36	; 0x24
   17ea0:	d01e      	beq.n	17ee0 <ip_interface_bind+0xb4>
   17ea2:	2416      	movs	r4, #22
   17ea4:	4620      	mov	r0, r4
   17ea6:	f7f9 f8d9 	bl	1105c <bsd_os_errno_set>
   17eaa:	f04f 34ff 	mov.w	r4, #4294967295
   17eae:	4620      	mov	r0, r4
   17eb0:	b003      	add	sp, #12
   17eb2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   17eb6:	9c01      	ldr	r4, [sp, #4]
   17eb8:	2c00      	cmp	r4, #0
   17eba:	d1de      	bne.n	17e7a <ip_interface_bind+0x4e>
   17ebc:	240c      	movs	r4, #12
   17ebe:	e7f1      	b.n	17ea4 <ip_interface_bind+0x78>
   17ec0:	242f      	movs	r4, #47	; 0x2f
   17ec2:	e7ef      	b.n	17ea4 <ip_interface_bind+0x78>
   17ec4:	2e10      	cmp	r6, #16
   17ec6:	d1ec      	bne.n	17ea2 <ip_interface_bind+0x76>
   17ec8:	2204      	movs	r2, #4
   17eca:	f8b8 3008 	ldrh.w	r3, [r8, #8]
   17ece:	f108 010c 	add.w	r1, r8, #12
   17ed2:	82e2      	strh	r2, [r4, #22]
   17ed4:	82a3      	strh	r3, [r4, #20]
   17ed6:	f009 fd30 	bl	2193a <memcpy>
   17eda:	e00a      	b.n	17ef2 <ip_interface_bind+0xc6>
   17edc:	2409      	movs	r4, #9
   17ede:	e7e1      	b.n	17ea4 <ip_interface_bind+0x78>
   17ee0:	2210      	movs	r2, #16
   17ee2:	f8b8 3008 	ldrh.w	r3, [r8, #8]
   17ee6:	eb08 0102 	add.w	r1, r8, r2
   17eea:	82e2      	strh	r2, [r4, #22]
   17eec:	82a3      	strh	r3, [r4, #20]
   17eee:	f009 fd24 	bl	2193a <memcpy>
   17ef2:	68a3      	ldr	r3, [r4, #8]
   17ef4:	8ae2      	ldrh	r2, [r4, #22]
   17ef6:	f247 0105 	movw	r1, #28677	; 0x7005
   17efa:	4413      	add	r3, r2
   17efc:	60a3      	str	r3, [r4, #8]
   17efe:	682b      	ldr	r3, [r5, #0]
   17f00:	4620      	mov	r0, r4
   17f02:	0c1b      	lsrs	r3, r3, #16
   17f04:	041b      	lsls	r3, r3, #16
   17f06:	f043 0303 	orr.w	r3, r3, #3
   17f0a:	602b      	str	r3, [r5, #0]
   17f0c:	682e      	ldr	r6, [r5, #0]
   17f0e:	f7fb fe95 	bl	13c3c <rpc_ip_client_request_send>
   17f12:	4680      	mov	r8, r0
   17f14:	b980      	cbnz	r0, 17f38 <ip_interface_bind+0x10c>
   17f16:	f04f 33ff 	mov.w	r3, #4294967295
   17f1a:	f64f 72ff 	movw	r2, #65535	; 0xffff
   17f1e:	2104      	movs	r1, #4
   17f20:	4638      	mov	r0, r7
   17f22:	f000 fee7 	bl	18cf4 <interface_socket_wait>
   17f26:	4604      	mov	r4, r0
   17f28:	b1a0      	cbz	r0, 17f54 <ip_interface_bind+0x128>
   17f2a:	682b      	ldr	r3, [r5, #0]
   17f2c:	0c1b      	lsrs	r3, r3, #16
   17f2e:	041b      	lsls	r3, r3, #16
   17f30:	f043 0302 	orr.w	r3, r3, #2
   17f34:	602b      	str	r3, [r5, #0]
   17f36:	e7b5      	b.n	17ea4 <ip_interface_bind+0x78>
   17f38:	6820      	ldr	r0, [r4, #0]
   17f3a:	b108      	cbz	r0, 17f40 <ip_interface_bind+0x114>
   17f3c:	f7fb fe9c 	bl	13c78 <rpc_ip_client_data_free>
   17f40:	0c36      	lsrs	r6, r6, #16
   17f42:	0436      	lsls	r6, r6, #16
   17f44:	4620      	mov	r0, r4
   17f46:	f046 0602 	orr.w	r6, r6, #2
   17f4a:	f7fb fe8d 	bl	13c68 <rpc_ip_client_message_free>
   17f4e:	2423      	movs	r4, #35	; 0x23
   17f50:	602e      	str	r6, [r5, #0]
   17f52:	e7a7      	b.n	17ea4 <ip_interface_bind+0x78>
   17f54:	4638      	mov	r0, r7
   17f56:	f000 ff41 	bl	18ddc <interface_socket_from_handle_get>
   17f5a:	2800      	cmp	r0, #0
   17f5c:	d0a7      	beq.n	17eae <ip_interface_bind+0x82>
   17f5e:	6844      	ldr	r4, [r0, #4]
   17f60:	2c00      	cmp	r4, #0
   17f62:	d0a4      	beq.n	17eae <ip_interface_bind+0x82>
   17f64:	f8c0 8004 	str.w	r8, [r0, #4]
   17f68:	e7df      	b.n	17f2a <ip_interface_bind+0xfe>
   17f6a:	bf00      	nop

00017f6c <ip_interface_listen>:
   17f6c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   17f70:	b082      	sub	sp, #8
   17f72:	4606      	mov	r6, r0
   17f74:	f000 ff32 	bl	18ddc <interface_socket_from_handle_get>
   17f78:	2800      	cmp	r0, #0
   17f7a:	d067      	beq.n	1804c <ip_interface_listen+0xe0>
   17f7c:	6803      	ldr	r3, [r0, #0]
   17f7e:	4605      	mov	r5, r0
   17f80:	b29b      	uxth	r3, r3
   17f82:	2b04      	cmp	r3, #4
   17f84:	d162      	bne.n	1804c <ip_interface_listen+0xe0>
   17f86:	2100      	movs	r1, #0
   17f88:	4a32      	ldr	r2, [pc, #200]	; (18054 <ip_interface_listen+0xe8>)
   17f8a:	4630      	mov	r0, r6
   17f8c:	f000 fe7a 	bl	18c84 <interface_socket_packet_handler_update>
   17f90:	4601      	mov	r1, r0
   17f92:	2800      	cmp	r0, #0
   17f94:	d15c      	bne.n	18050 <ip_interface_listen+0xe4>
   17f96:	a802      	add	r0, sp, #8
   17f98:	f840 1d04 	str.w	r1, [r0, #-4]!
   17f9c:	69af      	ldr	r7, [r5, #24]
   17f9e:	f7fb fe39 	bl	13c14 <rpc_ip_client_request_alloc>
   17fa2:	bba8      	cbnz	r0, 18010 <ip_interface_listen+0xa4>
   17fa4:	f247 0308 	movw	r3, #28680	; 0x7008
   17fa8:	2208      	movs	r2, #8
   17faa:	9c01      	ldr	r4, [sp, #4]
   17fac:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
   17fb0:	60e3      	str	r3, [r4, #12]
   17fb2:	6127      	str	r7, [r4, #16]
   17fb4:	7260      	strb	r0, [r4, #9]
   17fb6:	72a0      	strb	r0, [r4, #10]
   17fb8:	72e0      	strb	r0, [r4, #11]
   17fba:	7222      	strb	r2, [r4, #8]
   17fbc:	68a3      	ldr	r3, [r4, #8]
   17fbe:	f247 0108 	movw	r1, #28680	; 0x7008
   17fc2:	3304      	adds	r3, #4
   17fc4:	60a3      	str	r3, [r4, #8]
   17fc6:	682b      	ldr	r3, [r5, #0]
   17fc8:	4620      	mov	r0, r4
   17fca:	0c1b      	lsrs	r3, r3, #16
   17fcc:	041b      	lsls	r3, r3, #16
   17fce:	f043 0306 	orr.w	r3, r3, #6
   17fd2:	602b      	str	r3, [r5, #0]
   17fd4:	682f      	ldr	r7, [r5, #0]
   17fd6:	f7fb fe31 	bl	13c3c <rpc_ip_client_request_send>
   17fda:	4680      	mov	r8, r0
   17fdc:	b9e8      	cbnz	r0, 1801a <ip_interface_listen+0xae>
   17fde:	f04f 33ff 	mov.w	r3, #4294967295
   17fe2:	f64f 72ff 	movw	r2, #65535	; 0xffff
   17fe6:	2107      	movs	r1, #7
   17fe8:	4630      	mov	r0, r6
   17fea:	f000 fe83 	bl	18cf4 <interface_socket_wait>
   17fee:	4604      	mov	r4, r0
   17ff0:	b308      	cbz	r0, 18036 <ip_interface_listen+0xca>
   17ff2:	682b      	ldr	r3, [r5, #0]
   17ff4:	0c1b      	lsrs	r3, r3, #16
   17ff6:	041b      	lsls	r3, r3, #16
   17ff8:	f043 0304 	orr.w	r3, r3, #4
   17ffc:	602b      	str	r3, [r5, #0]
   17ffe:	4620      	mov	r0, r4
   18000:	f7f9 f82c 	bl	1105c <bsd_os_errno_set>
   18004:	f04f 34ff 	mov.w	r4, #4294967295
   18008:	4620      	mov	r0, r4
   1800a:	b002      	add	sp, #8
   1800c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   18010:	9c01      	ldr	r4, [sp, #4]
   18012:	2c00      	cmp	r4, #0
   18014:	d1d2      	bne.n	17fbc <ip_interface_listen+0x50>
   18016:	240c      	movs	r4, #12
   18018:	e7f1      	b.n	17ffe <ip_interface_listen+0x92>
   1801a:	6820      	ldr	r0, [r4, #0]
   1801c:	b108      	cbz	r0, 18022 <ip_interface_listen+0xb6>
   1801e:	f7fb fe2b 	bl	13c78 <rpc_ip_client_data_free>
   18022:	0c3f      	lsrs	r7, r7, #16
   18024:	043f      	lsls	r7, r7, #16
   18026:	4620      	mov	r0, r4
   18028:	f047 0704 	orr.w	r7, r7, #4
   1802c:	f7fb fe1c 	bl	13c68 <rpc_ip_client_message_free>
   18030:	2423      	movs	r4, #35	; 0x23
   18032:	602f      	str	r7, [r5, #0]
   18034:	e7e3      	b.n	17ffe <ip_interface_listen+0x92>
   18036:	4630      	mov	r0, r6
   18038:	f000 fed0 	bl	18ddc <interface_socket_from_handle_get>
   1803c:	2800      	cmp	r0, #0
   1803e:	d0e3      	beq.n	18008 <ip_interface_listen+0x9c>
   18040:	6844      	ldr	r4, [r0, #4]
   18042:	2c00      	cmp	r4, #0
   18044:	d0e0      	beq.n	18008 <ip_interface_listen+0x9c>
   18046:	f8c0 8004 	str.w	r8, [r0, #4]
   1804a:	e7d2      	b.n	17ff2 <ip_interface_listen+0x86>
   1804c:	2409      	movs	r4, #9
   1804e:	e7d6      	b.n	17ffe <ip_interface_listen+0x92>
   18050:	2423      	movs	r4, #35	; 0x23
   18052:	e7d4      	b.n	17ffe <ip_interface_listen+0x92>
   18054:	00017431 	.word	0x00017431

00018058 <ip_interface_accept>:
   18058:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1805c:	2500      	movs	r5, #0
   1805e:	b085      	sub	sp, #20
   18060:	460f      	mov	r7, r1
   18062:	4690      	mov	r8, r2
   18064:	9502      	str	r5, [sp, #8]
   18066:	4606      	mov	r6, r0
   18068:	f000 feb8 	bl	18ddc <interface_socket_from_handle_get>
   1806c:	4604      	mov	r4, r0
   1806e:	2800      	cmp	r0, #0
   18070:	f000 811c 	beq.w	182ac <ip_interface_accept+0x254>
   18074:	6803      	ldr	r3, [r0, #0]
   18076:	b29b      	uxth	r3, r3
   18078:	2b07      	cmp	r3, #7
   1807a:	d10a      	bne.n	18092 <ip_interface_accept+0x3a>
   1807c:	6803      	ldr	r3, [r0, #0]
   1807e:	6805      	ldr	r5, [r0, #0]
   18080:	00db      	lsls	r3, r3, #3
   18082:	d416      	bmi.n	180b2 <ip_interface_accept+0x5a>
   18084:	f415 3580 	ands.w	r5, r5, #65536	; 0x10000
   18088:	d019      	beq.n	180be <ip_interface_accept+0x66>
   1808a:	6805      	ldr	r5, [r0, #0]
   1808c:	f415 3580 	ands.w	r5, r5, #65536	; 0x10000
   18090:	d124      	bne.n	180dc <ip_interface_accept+0x84>
   18092:	f04f 0909 	mov.w	r9, #9
   18096:	9b02      	ldr	r3, [sp, #8]
   18098:	b113      	cbz	r3, 180a0 <ip_interface_accept+0x48>
   1809a:	4628      	mov	r0, r5
   1809c:	f000 fddc 	bl	18c58 <interface_socket_free>
   180a0:	4648      	mov	r0, r9
   180a2:	f04f 39ff 	mov.w	r9, #4294967295
   180a6:	f7f8 ffd9 	bl	1105c <bsd_os_errno_set>
   180aa:	4648      	mov	r0, r9
   180ac:	b005      	add	sp, #20
   180ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   180b2:	f415 3580 	ands.w	r5, r5, #65536	; 0x10000
   180b6:	d16d      	bne.n	18194 <ip_interface_accept+0x13c>
   180b8:	f04f 0923 	mov.w	r9, #35	; 0x23
   180bc:	e7eb      	b.n	18096 <ip_interface_accept+0x3e>
   180be:	f44f 3280 	mov.w	r2, #65536	; 0x10000
   180c2:	f04f 33ff 	mov.w	r3, #4294967295
   180c6:	4611      	mov	r1, r2
   180c8:	4630      	mov	r0, r6
   180ca:	f000 fe13 	bl	18cf4 <interface_socket_wait>
   180ce:	4681      	mov	r9, r0
   180d0:	2800      	cmp	r0, #0
   180d2:	d07e      	beq.n	181d2 <ip_interface_accept+0x17a>
   180d4:	6825      	ldr	r5, [r4, #0]
   180d6:	f415 3580 	ands.w	r5, r5, #65536	; 0x10000
   180da:	d0dc      	beq.n	18096 <ip_interface_accept+0x3e>
   180dc:	f04f 30ff 	mov.w	r0, #4294967295
   180e0:	2300      	movs	r3, #0
   180e2:	e9cd 0300 	strd	r0, r3, [sp]
   180e6:	4a75      	ldr	r2, [pc, #468]	; (182bc <ip_interface_accept+0x264>)
   180e8:	6921      	ldr	r1, [r4, #16]
   180ea:	a802      	add	r0, sp, #8
   180ec:	f000 fd50 	bl	18b90 <interface_socket_allocate>
   180f0:	9b02      	ldr	r3, [sp, #8]
   180f2:	4605      	mov	r5, r0
   180f4:	2b00      	cmp	r3, #0
   180f6:	f000 80dd 	beq.w	182b4 <ip_interface_accept+0x25c>
   180fa:	2100      	movs	r1, #0
   180fc:	6962      	ldr	r2, [r4, #20]
   180fe:	a804      	add	r0, sp, #16
   18100:	615a      	str	r2, [r3, #20]
   18102:	68e2      	ldr	r2, [r4, #12]
   18104:	f840 1d04 	str.w	r1, [r0, #-4]!
   18108:	60da      	str	r2, [r3, #12]
   1810a:	6922      	ldr	r2, [r4, #16]
   1810c:	611a      	str	r2, [r3, #16]
   1810e:	f8d4 9018 	ldr.w	r9, [r4, #24]
   18112:	f7fb fd7f 	bl	13c14 <rpc_ip_client_request_alloc>
   18116:	2800      	cmp	r0, #0
   18118:	d143      	bne.n	181a2 <ip_interface_accept+0x14a>
   1811a:	f247 030c 	movw	r3, #28684	; 0x700c
   1811e:	2108      	movs	r1, #8
   18120:	f8dd b00c 	ldr.w	fp, [sp, #12]
   18124:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
   18128:	f8cb 300c 	str.w	r3, [fp, #12]
   1812c:	f8cb 9010 	str.w	r9, [fp, #16]
   18130:	f88b 0009 	strb.w	r0, [fp, #9]
   18134:	f88b 000a 	strb.w	r0, [fp, #10]
   18138:	f88b 000b 	strb.w	r0, [fp, #11]
   1813c:	f88b 1008 	strb.w	r1, [fp, #8]
   18140:	6823      	ldr	r3, [r4, #0]
   18142:	f247 010c 	movw	r1, #28684	; 0x700c
   18146:	0c1b      	lsrs	r3, r3, #16
   18148:	041b      	lsls	r3, r3, #16
   1814a:	f043 0308 	orr.w	r3, r3, #8
   1814e:	6023      	str	r3, [r4, #0]
   18150:	4658      	mov	r0, fp
   18152:	f8d4 9000 	ldr.w	r9, [r4]
   18156:	f7fb fd71 	bl	13c3c <rpc_ip_client_request_send>
   1815a:	4682      	mov	sl, r0
   1815c:	bb48      	cbnz	r0, 181b2 <ip_interface_accept+0x15a>
   1815e:	6822      	ldr	r2, [r4, #0]
   18160:	9900      	ldr	r1, [sp, #0]
   18162:	f04f 33ff 	mov.w	r3, #4294967295
   18166:	400a      	ands	r2, r1
   18168:	6022      	str	r2, [r4, #0]
   1816a:	2109      	movs	r1, #9
   1816c:	f64f 72ff 	movw	r2, #65535	; 0xffff
   18170:	4630      	mov	r0, r6
   18172:	f000 fdbf 	bl	18cf4 <interface_socket_wait>
   18176:	4681      	mov	r9, r0
   18178:	2800      	cmp	r0, #0
   1817a:	f000 8085 	beq.w	18288 <ip_interface_accept+0x230>
   1817e:	6823      	ldr	r3, [r4, #0]
   18180:	9a01      	ldr	r2, [sp, #4]
   18182:	431a      	orrs	r2, r3
   18184:	6022      	str	r2, [r4, #0]
   18186:	6823      	ldr	r3, [r4, #0]
   18188:	0c1b      	lsrs	r3, r3, #16
   1818a:	041b      	lsls	r3, r3, #16
   1818c:	f043 0307 	orr.w	r3, r3, #7
   18190:	6023      	str	r3, [r4, #0]
   18192:	e780      	b.n	18096 <ip_interface_accept+0x3e>
   18194:	f06f 5280 	mvn.w	r2, #268435456	; 0x10000000
   18198:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   1819c:	e9cd 2300 	strd	r2, r3, [sp]
   181a0:	e7a1      	b.n	180e6 <ip_interface_accept+0x8e>
   181a2:	f8dd b00c 	ldr.w	fp, [sp, #12]
   181a6:	f04f 090c 	mov.w	r9, #12
   181aa:	f1bb 0f00 	cmp.w	fp, #0
   181ae:	d1c7      	bne.n	18140 <ip_interface_accept+0xe8>
   181b0:	e771      	b.n	18096 <ip_interface_accept+0x3e>
   181b2:	f8db 0000 	ldr.w	r0, [fp]
   181b6:	b108      	cbz	r0, 181bc <ip_interface_accept+0x164>
   181b8:	f7fb fd5e 	bl	13c78 <rpc_ip_client_data_free>
   181bc:	ea4f 4919 	mov.w	r9, r9, lsr #16
   181c0:	4658      	mov	r0, fp
   181c2:	ea4f 4909 	mov.w	r9, r9, lsl #16
   181c6:	f7fb fd4f 	bl	13c68 <rpc_ip_client_message_free>
   181ca:	f049 0307 	orr.w	r3, r9, #7
   181ce:	6023      	str	r3, [r4, #0]
   181d0:	e772      	b.n	180b8 <ip_interface_accept+0x60>
   181d2:	4630      	mov	r0, r6
   181d4:	f000 fe02 	bl	18ddc <interface_socket_from_handle_get>
   181d8:	b130      	cbz	r0, 181e8 <ip_interface_accept+0x190>
   181da:	f8d0 9004 	ldr.w	r9, [r0, #4]
   181de:	f1b9 0f00 	cmp.w	r9, #0
   181e2:	d001      	beq.n	181e8 <ip_interface_accept+0x190>
   181e4:	6045      	str	r5, [r0, #4]
   181e6:	e775      	b.n	180d4 <ip_interface_accept+0x7c>
   181e8:	6823      	ldr	r3, [r4, #0]
   181ea:	03d9      	lsls	r1, r3, #15
   181ec:	f53f af76 	bmi.w	180dc <ip_interface_accept+0x84>
   181f0:	4d33      	ldr	r5, [pc, #204]	; (182c0 <ip_interface_accept+0x268>)
   181f2:	9902      	ldr	r1, [sp, #8]
   181f4:	f855 3026 	ldr.w	r3, [r5, r6, lsl #2]
   181f8:	699b      	ldr	r3, [r3, #24]
   181fa:	618b      	str	r3, [r1, #24]
   181fc:	b147      	cbz	r7, 18210 <ip_interface_accept+0x1b8>
   181fe:	68cb      	ldr	r3, [r1, #12]
   18200:	2b0a      	cmp	r3, #10
   18202:	d024      	beq.n	1824e <ip_interface_accept+0x1f6>
   18204:	2b02      	cmp	r3, #2
   18206:	d103      	bne.n	18210 <ip_interface_accept+0x1b8>
   18208:	f8d8 2000 	ldr.w	r2, [r8]
   1820c:	2a10      	cmp	r2, #16
   1820e:	d032      	beq.n	18276 <ip_interface_accept+0x21e>
   18210:	680a      	ldr	r2, [r1, #0]
   18212:	482c      	ldr	r0, [pc, #176]	; (182c4 <ip_interface_accept+0x26c>)
   18214:	4002      	ands	r2, r0
   18216:	f042 0205 	orr.w	r2, r2, #5
   1821a:	600a      	str	r2, [r1, #0]
   1821c:	9a02      	ldr	r2, [sp, #8]
   1821e:	6811      	ldr	r1, [r2, #0]
   18220:	f441 3100 	orr.w	r1, r1, #131072	; 0x20000
   18224:	6011      	str	r1, [r2, #0]
   18226:	6811      	ldr	r1, [r2, #0]
   18228:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   1822c:	6011      	str	r1, [r2, #0]
   1822e:	6823      	ldr	r3, [r4, #0]
   18230:	4003      	ands	r3, r0
   18232:	f043 0307 	orr.w	r3, r3, #7
   18236:	6023      	str	r3, [r4, #0]
   18238:	f855 0026 	ldr.w	r0, [r5, r6, lsl #2]
   1823c:	f7fb fd14 	bl	13c68 <rpc_ip_client_message_free>
   18240:	2300      	movs	r3, #0
   18242:	4648      	mov	r0, r9
   18244:	f845 3026 	str.w	r3, [r5, r6, lsl #2]
   18248:	b005      	add	sp, #20
   1824a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1824e:	f8d8 2000 	ldr.w	r2, [r8]
   18252:	2a24      	cmp	r2, #36	; 0x24
   18254:	d1dc      	bne.n	18210 <ip_interface_accept+0x1b8>
   18256:	703a      	strb	r2, [r7, #0]
   18258:	2210      	movs	r2, #16
   1825a:	607b      	str	r3, [r7, #4]
   1825c:	f855 3026 	ldr.w	r3, [r5, r6, lsl #2]
   18260:	f107 0010 	add.w	r0, r7, #16
   18264:	8b9b      	ldrh	r3, [r3, #28]
   18266:	813b      	strh	r3, [r7, #8]
   18268:	f855 1026 	ldr.w	r1, [r5, r6, lsl #2]
   1826c:	3120      	adds	r1, #32
   1826e:	f009 fb64 	bl	2193a <memcpy>
   18272:	9902      	ldr	r1, [sp, #8]
   18274:	e7cc      	b.n	18210 <ip_interface_accept+0x1b8>
   18276:	703a      	strb	r2, [r7, #0]
   18278:	607b      	str	r3, [r7, #4]
   1827a:	f855 3026 	ldr.w	r3, [r5, r6, lsl #2]
   1827e:	f107 000c 	add.w	r0, r7, #12
   18282:	8b9b      	ldrh	r3, [r3, #28]
   18284:	2204      	movs	r2, #4
   18286:	e7ee      	b.n	18266 <ip_interface_accept+0x20e>
   18288:	4630      	mov	r0, r6
   1828a:	f000 fda7 	bl	18ddc <interface_socket_from_handle_get>
   1828e:	b138      	cbz	r0, 182a0 <ip_interface_accept+0x248>
   18290:	f8d0 9004 	ldr.w	r9, [r0, #4]
   18294:	f1b9 0f00 	cmp.w	r9, #0
   18298:	d002      	beq.n	182a0 <ip_interface_accept+0x248>
   1829a:	f8c0 a004 	str.w	sl, [r0, #4]
   1829e:	e76e      	b.n	1817e <ip_interface_accept+0x126>
   182a0:	6823      	ldr	r3, [r4, #0]
   182a2:	9a01      	ldr	r2, [sp, #4]
   182a4:	46a9      	mov	r9, r5
   182a6:	4313      	orrs	r3, r2
   182a8:	6023      	str	r3, [r4, #0]
   182aa:	e7a1      	b.n	181f0 <ip_interface_accept+0x198>
   182ac:	4605      	mov	r5, r0
   182ae:	f04f 0909 	mov.w	r9, #9
   182b2:	e6f0      	b.n	18096 <ip_interface_accept+0x3e>
   182b4:	f04f 090c 	mov.w	r9, #12
   182b8:	e6f2      	b.n	180a0 <ip_interface_accept+0x48>
   182ba:	bf00      	nop
   182bc:	00017431 	.word	0x00017431
   182c0:	2002081c 	.word	0x2002081c
   182c4:	ffff0000 	.word	0xffff0000

000182c8 <ip_interface_setopt>:
   182c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   182cc:	2901      	cmp	r1, #1
   182ce:	b084      	sub	sp, #16
   182d0:	f040 809c 	bne.w	1840c <ip_interface_setopt+0x144>
   182d4:	460e      	mov	r6, r1
   182d6:	4690      	mov	r8, r2
   182d8:	461d      	mov	r5, r3
   182da:	4607      	mov	r7, r0
   182dc:	f000 fd7e 	bl	18ddc <interface_socket_from_handle_get>
   182e0:	4604      	mov	r4, r0
   182e2:	2800      	cmp	r0, #0
   182e4:	f000 80a5 	beq.w	18432 <ip_interface_setopt+0x16a>
   182e8:	f1b8 0f19 	cmp.w	r8, #25
   182ec:	d16e      	bne.n	183cc <ip_interface_setopt+0x104>
   182ee:	2d00      	cmp	r5, #0
   182f0:	f000 8092 	beq.w	18418 <ip_interface_setopt+0x150>
   182f4:	4628      	mov	r0, r5
   182f6:	f7f4 fdbf 	bl	ce78 <strlen>
   182fa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   182fc:	4298      	cmp	r0, r3
   182fe:	f040 808b 	bne.w	18418 <ip_interface_setopt+0x150>
   18302:	6823      	ldr	r3, [r4, #0]
   18304:	b29b      	uxth	r3, r3
   18306:	2b02      	cmp	r3, #2
   18308:	d173      	bne.n	183f2 <ip_interface_setopt+0x12a>
   1830a:	4629      	mov	r1, r5
   1830c:	68e0      	ldr	r0, [r4, #12]
   1830e:	f7fe fb2b 	bl	16968 <pdn_interface_pdn_id_get>
   18312:	9002      	str	r0, [sp, #8]
   18314:	3001      	adds	r0, #1
   18316:	bf08      	it	eq
   18318:	2516      	moveq	r5, #22
   1831a:	d04e      	beq.n	183ba <ip_interface_setopt+0xf2>
   1831c:	6823      	ldr	r3, [r4, #0]
   1831e:	025b      	lsls	r3, r3, #9
   18320:	d44a      	bmi.n	183b8 <ip_interface_setopt+0xf0>
   18322:	6823      	ldr	r3, [r4, #0]
   18324:	f413 0300 	ands.w	r3, r3, #8388608	; 0x800000
   18328:	d146      	bne.n	183b8 <ip_interface_setopt+0xf0>
   1832a:	6826      	ldr	r6, [r4, #0]
   1832c:	6822      	ldr	r2, [r4, #0]
   1832e:	a804      	add	r0, sp, #16
   18330:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
   18334:	6022      	str	r2, [r4, #0]
   18336:	2104      	movs	r1, #4
   18338:	f840 3d04 	str.w	r3, [r0, #-4]!
   1833c:	f8d4 8018 	ldr.w	r8, [r4, #24]
   18340:	f7fb fc68 	bl	13c14 <rpc_ip_client_request_alloc>
   18344:	2800      	cmp	r0, #0
   18346:	d14e      	bne.n	183e6 <ip_interface_setopt+0x11e>
   18348:	f247 0203 	movw	r2, #28675	; 0x7003
   1834c:	2300      	movs	r3, #0
   1834e:	2108      	movs	r1, #8
   18350:	9d03      	ldr	r5, [sp, #12]
   18352:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
   18356:	60ea      	str	r2, [r5, #12]
   18358:	f8c5 8010 	str.w	r8, [r5, #16]
   1835c:	7229      	strb	r1, [r5, #8]
   1835e:	726b      	strb	r3, [r5, #9]
   18360:	72ab      	strb	r3, [r5, #10]
   18362:	72eb      	strb	r3, [r5, #11]
   18364:	f04f 0c08 	mov.w	ip, #8
   18368:	2300      	movs	r3, #0
   1836a:	2010      	movs	r0, #16
   1836c:	2130      	movs	r1, #48	; 0x30
   1836e:	68aa      	ldr	r2, [r5, #8]
   18370:	756b      	strb	r3, [r5, #21]
   18372:	4462      	add	r2, ip
   18374:	60aa      	str	r2, [r5, #8]
   18376:	75ab      	strb	r3, [r5, #22]
   18378:	75eb      	strb	r3, [r5, #23]
   1837a:	76ab      	strb	r3, [r5, #26]
   1837c:	76eb      	strb	r3, [r5, #27]
   1837e:	f885 c014 	strb.w	ip, [r5, #20]
   18382:	7628      	strb	r0, [r5, #24]
   18384:	7669      	strb	r1, [r5, #25]
   18386:	2204      	movs	r2, #4
   18388:	eb0d 010c 	add.w	r1, sp, ip
   1838c:	6828      	ldr	r0, [r5, #0]
   1838e:	f009 fad4 	bl	2193a <memcpy>
   18392:	f247 0103 	movw	r1, #28675	; 0x7003
   18396:	4628      	mov	r0, r5
   18398:	f7fb fc50 	bl	13c3c <rpc_ip_client_request_send>
   1839c:	4680      	mov	r8, r0
   1839e:	bb50      	cbnz	r0, 183f6 <ip_interface_setopt+0x12e>
   183a0:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
   183a4:	f04f 33ff 	mov.w	r3, #4294967295
   183a8:	4611      	mov	r1, r2
   183aa:	4638      	mov	r0, r7
   183ac:	f000 fca2 	bl	18cf4 <interface_socket_wait>
   183b0:	4605      	mov	r5, r0
   183b2:	b398      	cbz	r0, 1841c <ip_interface_setopt+0x154>
   183b4:	6026      	str	r6, [r4, #0]
   183b6:	e000      	b.n	183ba <ip_interface_setopt+0xf2>
   183b8:	2523      	movs	r5, #35	; 0x23
   183ba:	4628      	mov	r0, r5
   183bc:	f7f8 fe4e 	bl	1105c <bsd_os_errno_set>
   183c0:	f04f 35ff 	mov.w	r5, #4294967295
   183c4:	4628      	mov	r0, r5
   183c6:	b004      	add	sp, #16
   183c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   183cc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   183ce:	4642      	mov	r2, r8
   183d0:	9300      	str	r3, [sp, #0]
   183d2:	4631      	mov	r1, r6
   183d4:	462b      	mov	r3, r5
   183d6:	4638      	mov	r0, r7
   183d8:	f000 fd28 	bl	18e2c <interface_socket_setopt>
   183dc:	4605      	mov	r5, r0
   183de:	4628      	mov	r0, r5
   183e0:	b004      	add	sp, #16
   183e2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   183e6:	9d03      	ldr	r5, [sp, #12]
   183e8:	2d00      	cmp	r5, #0
   183ea:	d1bb      	bne.n	18364 <ip_interface_setopt+0x9c>
   183ec:	6026      	str	r6, [r4, #0]
   183ee:	250c      	movs	r5, #12
   183f0:	e7e3      	b.n	183ba <ip_interface_setopt+0xf2>
   183f2:	2509      	movs	r5, #9
   183f4:	e7e1      	b.n	183ba <ip_interface_setopt+0xf2>
   183f6:	6828      	ldr	r0, [r5, #0]
   183f8:	b108      	cbz	r0, 183fe <ip_interface_setopt+0x136>
   183fa:	f7fb fc3d 	bl	13c78 <rpc_ip_client_data_free>
   183fe:	4628      	mov	r0, r5
   18400:	f7fb fc32 	bl	13c68 <rpc_ip_client_message_free>
   18404:	2523      	movs	r5, #35	; 0x23
   18406:	6026      	str	r6, [r4, #0]
   18408:	6026      	str	r6, [r4, #0]
   1840a:	e7d6      	b.n	183ba <ip_interface_setopt+0xf2>
   1840c:	202a      	movs	r0, #42	; 0x2a
   1840e:	f7f8 fe25 	bl	1105c <bsd_os_errno_set>
   18412:	f04f 35ff 	mov.w	r5, #4294967295
   18416:	e7d5      	b.n	183c4 <ip_interface_setopt+0xfc>
   18418:	250e      	movs	r5, #14
   1841a:	e7ce      	b.n	183ba <ip_interface_setopt+0xf2>
   1841c:	4638      	mov	r0, r7
   1841e:	f000 fcdd 	bl	18ddc <interface_socket_from_handle_get>
   18422:	b120      	cbz	r0, 1842e <ip_interface_setopt+0x166>
   18424:	6845      	ldr	r5, [r0, #4]
   18426:	b115      	cbz	r5, 1842e <ip_interface_setopt+0x166>
   18428:	f8c0 8004 	str.w	r8, [r0, #4]
   1842c:	e7c2      	b.n	183b4 <ip_interface_setopt+0xec>
   1842e:	6026      	str	r6, [r4, #0]
   18430:	e7c8      	b.n	183c4 <ip_interface_setopt+0xfc>
   18432:	2009      	movs	r0, #9
   18434:	f7f8 fe12 	bl	1105c <bsd_os_errno_set>
   18438:	f04f 35ff 	mov.w	r5, #4294967295
   1843c:	e7c2      	b.n	183c4 <ip_interface_setopt+0xfc>
   1843e:	bf00      	nop

00018440 <ip_interface_getopt>:
   18440:	f000 bd36 	b.w	18eb0 <interface_socket_getopt>

00018444 <ip_interface_getaddrinfo>:
   18444:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18448:	f04f 0c00 	mov.w	ip, #0
   1844c:	2401      	movs	r4, #1
   1844e:	4e72      	ldr	r6, [pc, #456]	; (18618 <ip_interface_getaddrinfo+0x1d4>)
   18450:	f8df a1d0 	ldr.w	sl, [pc, #464]	; 18624 <ip_interface_getaddrinfo+0x1e0>
   18454:	f8df 91d0 	ldr.w	r9, [pc, #464]	; 18628 <ip_interface_getaddrinfo+0x1e4>
   18458:	b085      	sub	sp, #20
   1845a:	4607      	mov	r7, r0
   1845c:	4615      	mov	r5, r2
   1845e:	9301      	str	r3, [sp, #4]
   18460:	f8a6 c000 	strh.w	ip, [r6]
   18464:	f8ca 4000 	str.w	r4, [sl]
   18468:	f8c9 4000 	str.w	r4, [r9]
   1846c:	b171      	cbz	r1, 1848c <ip_interface_getaddrinfo+0x48>
   1846e:	4608      	mov	r0, r1
   18470:	220a      	movs	r2, #10
   18472:	4661      	mov	r1, ip
   18474:	f006 fc20 	bl	1ecb8 <strtol>
   18478:	f64f 73fe 	movw	r3, #65534	; 0xfffe
   1847c:	1e42      	subs	r2, r0, #1
   1847e:	429a      	cmp	r2, r3
   18480:	f200 8083 	bhi.w	1858a <ip_interface_getaddrinfo+0x146>
   18484:	0203      	lsls	r3, r0, #8
   18486:	ea43 2020 	orr.w	r0, r3, r0, asr #8
   1848a:	8030      	strh	r0, [r6, #0]
   1848c:	f8df 819c 	ldr.w	r8, [pc, #412]	; 1862c <ip_interface_getaddrinfo+0x1e8>
   18490:	f8d8 3000 	ldr.w	r3, [r8]
   18494:	2b00      	cmp	r3, #0
   18496:	d174      	bne.n	18582 <ip_interface_getaddrinfo+0x13e>
   18498:	4a60      	ldr	r2, [pc, #384]	; (1861c <ip_interface_getaddrinfo+0x1d8>)
   1849a:	6013      	str	r3, [r2, #0]
   1849c:	4a60      	ldr	r2, [pc, #384]	; (18620 <ip_interface_getaddrinfo+0x1dc>)
   1849e:	6013      	str	r3, [r2, #0]
   184a0:	2f00      	cmp	r7, #0
   184a2:	d062      	beq.n	1856a <ip_interface_getaddrinfo+0x126>
   184a4:	4638      	mov	r0, r7
   184a6:	f7f4 fce7 	bl	ce78 <strlen>
   184aa:	4683      	mov	fp, r0
   184ac:	b125      	cbz	r5, 184b8 <ip_interface_getaddrinfo+0x74>
   184ae:	69ea      	ldr	r2, [r5, #28]
   184b0:	b112      	cbz	r2, 184b8 <ip_interface_getaddrinfo+0x74>
   184b2:	6851      	ldr	r1, [r2, #4]
   184b4:	2966      	cmp	r1, #102	; 0x66
   184b6:	d06c      	beq.n	18592 <ip_interface_getaddrinfo+0x14e>
   184b8:	f04f 32ff 	mov.w	r2, #4294967295
   184bc:	2100      	movs	r1, #0
   184be:	ae04      	add	r6, sp, #16
   184c0:	f846 1d04 	str.w	r1, [r6, #-4]!
   184c4:	4630      	mov	r0, r6
   184c6:	4659      	mov	r1, fp
   184c8:	9200      	str	r2, [sp, #0]
   184ca:	f7fb fba3 	bl	13c14 <rpc_ip_client_request_alloc>
   184ce:	9a00      	ldr	r2, [sp, #0]
   184d0:	2800      	cmp	r0, #0
   184d2:	d14c      	bne.n	1856e <ip_interface_getaddrinfo+0x12a>
   184d4:	f247 010d 	movw	r1, #28685	; 0x700d
   184d8:	f04f 0c08 	mov.w	ip, #8
   184dc:	9c03      	ldr	r4, [sp, #12]
   184de:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
   184e2:	60e1      	str	r1, [r4, #12]
   184e4:	6122      	str	r2, [r4, #16]
   184e6:	7260      	strb	r0, [r4, #9]
   184e8:	72a0      	strb	r0, [r4, #10]
   184ea:	72e0      	strb	r0, [r4, #11]
   184ec:	f884 c008 	strb.w	ip, [r4, #8]
   184f0:	2d00      	cmp	r5, #0
   184f2:	d076      	beq.n	185e2 <ip_interface_getaddrinfo+0x19e>
   184f4:	686a      	ldr	r2, [r5, #4]
   184f6:	f022 0108 	bic.w	r1, r2, #8
   184fa:	2902      	cmp	r1, #2
   184fc:	d05c      	beq.n	185b8 <ip_interface_getaddrinfo+0x174>
   184fe:	2a05      	cmp	r2, #5
   18500:	d178      	bne.n	185f4 <ip_interface_getaddrinfo+0x1b0>
   18502:	68a9      	ldr	r1, [r5, #8]
   18504:	2902      	cmp	r1, #2
   18506:	f8c9 1000 	str.w	r1, [r9]
   1850a:	d061      	beq.n	185d0 <ip_interface_getaddrinfo+0x18c>
   1850c:	61a2      	str	r2, [r4, #24]
   1850e:	68ea      	ldr	r2, [r5, #12]
   18510:	6222      	str	r2, [r4, #32]
   18512:	68aa      	ldr	r2, [r5, #8]
   18514:	61e2      	str	r2, [r4, #28]
   18516:	682a      	ldr	r2, [r5, #0]
   18518:	6162      	str	r2, [r4, #20]
   1851a:	68a2      	ldr	r2, [r4, #8]
   1851c:	3210      	adds	r2, #16
   1851e:	60a2      	str	r2, [r4, #8]
   18520:	b12f      	cbz	r7, 1852e <ip_interface_getaddrinfo+0xea>
   18522:	6820      	ldr	r0, [r4, #0]
   18524:	b118      	cbz	r0, 1852e <ip_interface_getaddrinfo+0xea>
   18526:	465a      	mov	r2, fp
   18528:	4639      	mov	r1, r7
   1852a:	f009 fa06 	bl	2193a <memcpy>
   1852e:	2301      	movs	r3, #1
   18530:	f247 010d 	movw	r1, #28685	; 0x700d
   18534:	4620      	mov	r0, r4
   18536:	f8c8 3000 	str.w	r3, [r8]
   1853a:	f7fb fb7f 	bl	13c3c <rpc_ip_client_request_send>
   1853e:	2800      	cmp	r0, #0
   18540:	d156      	bne.n	185f0 <ip_interface_getaddrinfo+0x1ac>
   18542:	f04f 33ff 	mov.w	r3, #4294967295
   18546:	9303      	str	r3, [sp, #12]
   18548:	4631      	mov	r1, r6
   1854a:	4620      	mov	r0, r4
   1854c:	f7f8 fcf2 	bl	10f34 <bsd_os_timedwait>
   18550:	f8d8 3000 	ldr.w	r3, [r8]
   18554:	2b01      	cmp	r3, #1
   18556:	d0f7      	beq.n	18548 <ip_interface_getaddrinfo+0x104>
   18558:	4b31      	ldr	r3, [pc, #196]	; (18620 <ip_interface_getaddrinfo+0x1dc>)
   1855a:	6818      	ldr	r0, [r3, #0]
   1855c:	2800      	cmp	r0, #0
   1855e:	d13b      	bne.n	185d8 <ip_interface_getaddrinfo+0x194>
   18560:	4b2e      	ldr	r3, [pc, #184]	; (1861c <ip_interface_getaddrinfo+0x1d8>)
   18562:	9a01      	ldr	r2, [sp, #4]
   18564:	681b      	ldr	r3, [r3, #0]
   18566:	6013      	str	r3, [r2, #0]
   18568:	e00c      	b.n	18584 <ip_interface_getaddrinfo+0x140>
   1856a:	46bb      	mov	fp, r7
   1856c:	e79e      	b.n	184ac <ip_interface_getaddrinfo+0x68>
   1856e:	9c03      	ldr	r4, [sp, #12]
   18570:	2c00      	cmp	r4, #0
   18572:	d1bd      	bne.n	184f0 <ip_interface_getaddrinfo+0xac>
   18574:	200c      	movs	r0, #12
   18576:	2300      	movs	r3, #0
   18578:	f8c8 3000 	str.w	r3, [r8]
   1857c:	b005      	add	sp, #20
   1857e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18582:	2073      	movs	r0, #115	; 0x73
   18584:	b005      	add	sp, #20
   18586:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1858a:	2016      	movs	r0, #22
   1858c:	b005      	add	sp, #20
   1858e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18592:	6891      	ldr	r1, [r2, #8]
   18594:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
   18598:	d18e      	bne.n	184b8 <ip_interface_getaddrinfo+0x74>
   1859a:	f240 2102 	movw	r1, #514	; 0x202
   1859e:	68d0      	ldr	r0, [r2, #12]
   185a0:	4288      	cmp	r0, r1
   185a2:	d189      	bne.n	184b8 <ip_interface_getaddrinfo+0x74>
   185a4:	6991      	ldr	r1, [r2, #24]
   185a6:	2900      	cmp	r1, #0
   185a8:	d086      	beq.n	184b8 <ip_interface_getaddrinfo+0x74>
   185aa:	6868      	ldr	r0, [r5, #4]
   185ac:	f7fe f9dc 	bl	16968 <pdn_interface_pdn_id_get>
   185b0:	1c43      	adds	r3, r0, #1
   185b2:	d081      	beq.n	184b8 <ip_interface_getaddrinfo+0x74>
   185b4:	4602      	mov	r2, r0
   185b6:	e781      	b.n	184bc <ip_interface_getaddrinfo+0x78>
   185b8:	68a9      	ldr	r1, [r5, #8]
   185ba:	2902      	cmp	r1, #2
   185bc:	f8c9 1000 	str.w	r1, [r9]
   185c0:	d006      	beq.n	185d0 <ip_interface_getaddrinfo+0x18c>
   185c2:	2a05      	cmp	r2, #5
   185c4:	d0a2      	beq.n	1850c <ip_interface_getaddrinfo+0xc8>
   185c6:	2a0a      	cmp	r2, #10
   185c8:	bf14      	ite	ne
   185ca:	2201      	movne	r2, #1
   185cc:	2202      	moveq	r2, #2
   185ce:	e79d      	b.n	1850c <ip_interface_getaddrinfo+0xc8>
   185d0:	2102      	movs	r1, #2
   185d2:	f8ca 1000 	str.w	r1, [sl]
   185d6:	e7f4      	b.n	185c2 <ip_interface_getaddrinfo+0x17e>
   185d8:	4b11      	ldr	r3, [pc, #68]	; (18620 <ip_interface_getaddrinfo+0x1dc>)
   185da:	6818      	ldr	r0, [r3, #0]
   185dc:	2800      	cmp	r0, #0
   185de:	d0d1      	beq.n	18584 <ip_interface_getaddrinfo+0x140>
   185e0:	e7c9      	b.n	18576 <ip_interface_getaddrinfo+0x132>
   185e2:	4629      	mov	r1, r5
   185e4:	2210      	movs	r2, #16
   185e6:	f104 0014 	add.w	r0, r4, #20
   185ea:	f009 f9b3 	bl	21954 <memset>
   185ee:	e794      	b.n	1851a <ip_interface_getaddrinfo+0xd6>
   185f0:	2023      	movs	r0, #35	; 0x23
   185f2:	e7c0      	b.n	18576 <ip_interface_getaddrinfo+0x132>
   185f4:	202f      	movs	r0, #47	; 0x2f
   185f6:	f7f8 fd31 	bl	1105c <bsd_os_errno_set>
   185fa:	68a2      	ldr	r2, [r4, #8]
   185fc:	3210      	adds	r2, #16
   185fe:	60a2      	str	r2, [r4, #8]
   18600:	b917      	cbnz	r7, 18608 <ip_interface_getaddrinfo+0x1c4>
   18602:	f04f 30ff 	mov.w	r0, #4294967295
   18606:	e7b6      	b.n	18576 <ip_interface_getaddrinfo+0x132>
   18608:	6820      	ldr	r0, [r4, #0]
   1860a:	2800      	cmp	r0, #0
   1860c:	d0f9      	beq.n	18602 <ip_interface_getaddrinfo+0x1be>
   1860e:	465a      	mov	r2, fp
   18610:	4639      	mov	r1, r7
   18612:	f009 f992 	bl	2193a <memcpy>
   18616:	e7f4      	b.n	18602 <ip_interface_getaddrinfo+0x1be>
   18618:	200214da 	.word	0x200214da
   1861c:	20020814 	.word	0x20020814
   18620:	2002080c 	.word	0x2002080c
   18624:	20020804 	.word	0x20020804
   18628:	20020808 	.word	0x20020808
   1862c:	20020810 	.word	0x20020810

00018630 <ip_interface_freeaddrinfo>:
   18630:	b538      	push	{r3, r4, r5, lr}
   18632:	4c0b      	ldr	r4, [pc, #44]	; (18660 <ip_interface_freeaddrinfo+0x30>)
   18634:	6823      	ldr	r3, [r4, #0]
   18636:	2b02      	cmp	r3, #2
   18638:	d000      	beq.n	1863c <ip_interface_freeaddrinfo+0xc>
   1863a:	bd38      	pop	{r3, r4, r5, pc}
   1863c:	b130      	cbz	r0, 1864c <ip_interface_freeaddrinfo+0x1c>
   1863e:	4605      	mov	r5, r0
   18640:	6940      	ldr	r0, [r0, #20]
   18642:	f7fb fab9 	bl	13bb8 <nrf_free>
   18646:	4628      	mov	r0, r5
   18648:	f7fb fab6 	bl	13bb8 <nrf_free>
   1864c:	2300      	movs	r3, #0
   1864e:	4a05      	ldr	r2, [pc, #20]	; (18664 <ip_interface_freeaddrinfo+0x34>)
   18650:	4905      	ldr	r1, [pc, #20]	; (18668 <ip_interface_freeaddrinfo+0x38>)
   18652:	6023      	str	r3, [r4, #0]
   18654:	6013      	str	r3, [r2, #0]
   18656:	6808      	ldr	r0, [r1, #0]
   18658:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   1865c:	f7fb bb0c 	b.w	13c78 <rpc_ip_client_data_free>
   18660:	20020810 	.word	0x20020810
   18664:	2002080c 	.word	0x2002080c
   18668:	20020818 	.word	0x20020818

0001866c <rpc_ip_event_handler>:
   1866c:	f248 030d 	movw	r3, #32781	; 0x800d
   18670:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18674:	4299      	cmp	r1, r3
   18676:	b089      	sub	sp, #36	; 0x24
   18678:	4605      	mov	r5, r0
   1867a:	d062      	beq.n	18742 <rpc_ip_event_handler+0xd6>
   1867c:	f248 030f 	movw	r3, #32783	; 0x800f
   18680:	4299      	cmp	r1, r3
   18682:	460c      	mov	r4, r1
   18684:	d04b      	beq.n	1871e <rpc_ip_event_handler+0xb2>
   18686:	f401 4310 	and.w	r3, r1, #36864	; 0x9000
   1868a:	f5b3 4f10 	cmp.w	r3, #36864	; 0x9000
   1868e:	68c0      	ldr	r0, [r0, #12]
   18690:	d07b      	beq.n	1878a <rpc_ip_event_handler+0x11e>
   18692:	0c07      	lsrs	r7, r0, #16
   18694:	4638      	mov	r0, r7
   18696:	f000 fba1 	bl	18ddc <interface_socket_from_handle_get>
   1869a:	4606      	mov	r6, r0
   1869c:	2800      	cmp	r0, #0
   1869e:	d05f      	beq.n	18760 <rpc_ip_event_handler+0xf4>
   186a0:	4601      	mov	r1, r0
   186a2:	4623      	mov	r3, r4
   186a4:	462a      	mov	r2, r5
   186a6:	4638      	mov	r0, r7
   186a8:	f7fb ff1e 	bl	144e8 <tls_rpc_ip_event_handler>
   186ac:	2800      	cmp	r0, #0
   186ae:	d053      	beq.n	18758 <rpc_ip_event_handler+0xec>
   186b0:	f248 0307 	movw	r3, #32775	; 0x8007
   186b4:	429c      	cmp	r4, r3
   186b6:	d97d      	bls.n	187b4 <rpc_ip_event_handler+0x148>
   186b8:	f248 030c 	movw	r3, #32780	; 0x800c
   186bc:	429c      	cmp	r4, r3
   186be:	d068      	beq.n	18792 <rpc_ip_event_handler+0x126>
   186c0:	f240 8119 	bls.w	188f6 <rpc_ip_event_handler+0x28a>
   186c4:	f249 0302 	movw	r3, #36866	; 0x9002
   186c8:	429c      	cmp	r4, r3
   186ca:	f000 8195 	beq.w	189f8 <rpc_ip_event_handler+0x38c>
   186ce:	f249 0303 	movw	r3, #36867	; 0x9003
   186d2:	429c      	cmp	r4, r3
   186d4:	f000 81aa 	beq.w	18a2c <rpc_ip_event_handler+0x3c0>
   186d8:	f249 0301 	movw	r3, #36865	; 0x9001
   186dc:	429c      	cmp	r4, r3
   186de:	d13f      	bne.n	18760 <rpc_ip_event_handler+0xf4>
   186e0:	6834      	ldr	r4, [r6, #0]
   186e2:	f414 1480 	ands.w	r4, r4, #1048576	; 0x100000
   186e6:	f000 81c2 	beq.w	18a6e <rpc_ip_event_handler+0x402>
   186ea:	68ab      	ldr	r3, [r5, #8]
   186ec:	2b04      	cmp	r3, #4
   186ee:	f200 81ff 	bhi.w	18af0 <rpc_ip_event_handler+0x484>
   186f2:	2400      	movs	r4, #0
   186f4:	4627      	mov	r7, r4
   186f6:	6829      	ldr	r1, [r5, #0]
   186f8:	686a      	ldr	r2, [r5, #4]
   186fa:	e9cd 7406 	strd	r7, r4, [sp, #24]
   186fe:	e9cd 1204 	strd	r1, r2, [sp, #16]
   18702:	69f0      	ldr	r0, [r6, #28]
   18704:	a904      	add	r1, sp, #16
   18706:	6803      	ldr	r3, [r0, #0]
   18708:	685b      	ldr	r3, [r3, #4]
   1870a:	4798      	blx	r3
   1870c:	3001      	adds	r0, #1
   1870e:	f000 81db 	beq.w	18ac8 <rpc_ip_event_handler+0x45c>
   18712:	6833      	ldr	r3, [r6, #0]
   18714:	2000      	movs	r0, #0
   18716:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   1871a:	6033      	str	r3, [r6, #0]
   1871c:	e00e      	b.n	1873c <rpc_ip_event_handler+0xd0>
   1871e:	6943      	ldr	r3, [r0, #20]
   18720:	2001      	movs	r0, #1
   18722:	2b10      	cmp	r3, #16
   18724:	49b7      	ldr	r1, [pc, #732]	; (18a04 <rpc_ip_event_handler+0x398>)
   18726:	bf88      	it	hi
   18728:	222d      	movhi	r2, #45	; 0x2d
   1872a:	7008      	strb	r0, [r1, #0]
   1872c:	f04f 0000 	mov.w	r0, #0
   18730:	bf9c      	itt	ls
   18732:	4ab5      	ldrls	r2, [pc, #724]	; (18a08 <rpc_ip_event_handler+0x39c>)
   18734:	f852 2023 	ldrls.w	r2, [r2, r3, lsl #2]
   18738:	4bb4      	ldr	r3, [pc, #720]	; (18a0c <rpc_ip_event_handler+0x3a0>)
   1873a:	601a      	str	r2, [r3, #0]
   1873c:	b009      	add	sp, #36	; 0x24
   1873e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18742:	f8df 92dc 	ldr.w	r9, [pc, #732]	; 18a20 <rpc_ip_event_handler+0x3b4>
   18746:	6807      	ldr	r7, [r0, #0]
   18748:	f8d9 3000 	ldr.w	r3, [r9]
   1874c:	2b01      	cmp	r3, #1
   1874e:	d00b      	beq.n	18768 <rpc_ip_event_handler+0xfc>
   18750:	b117      	cbz	r7, 18758 <rpc_ip_event_handler+0xec>
   18752:	4638      	mov	r0, r7
   18754:	f7fb fa90 	bl	13c78 <rpc_ip_client_data_free>
   18758:	2000      	movs	r0, #0
   1875a:	b009      	add	sp, #36	; 0x24
   1875c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18760:	6828      	ldr	r0, [r5, #0]
   18762:	2800      	cmp	r0, #0
   18764:	d1f6      	bne.n	18754 <rpc_ip_event_handler+0xe8>
   18766:	e7f7      	b.n	18758 <rpc_ip_event_handler+0xec>
   18768:	6943      	ldr	r3, [r0, #20]
   1876a:	2b00      	cmp	r3, #0
   1876c:	d046      	beq.n	187fc <rpc_ip_event_handler+0x190>
   1876e:	2b10      	cmp	r3, #16
   18770:	bf96      	itet	ls
   18772:	4aa5      	ldrls	r2, [pc, #660]	; (18a08 <rpc_ip_event_handler+0x39c>)
   18774:	232d      	movhi	r3, #45	; 0x2d
   18776:	f852 3023 	ldrls.w	r3, [r2, r3, lsl #2]
   1877a:	2202      	movs	r2, #2
   1877c:	49a4      	ldr	r1, [pc, #656]	; (18a10 <rpc_ip_event_handler+0x3a4>)
   1877e:	600b      	str	r3, [r1, #0]
   18780:	f8c9 2000 	str.w	r2, [r9]
   18784:	2f00      	cmp	r7, #0
   18786:	d1e4      	bne.n	18752 <rpc_ip_event_handler+0xe6>
   18788:	e7e6      	b.n	18758 <rpc_ip_event_handler+0xec>
   1878a:	f000 fad5 	bl	18d38 <interface_from_internal_id_search>
   1878e:	4607      	mov	r7, r0
   18790:	e780      	b.n	18694 <rpc_ip_event_handler+0x28>
   18792:	6833      	ldr	r3, [r6, #0]
   18794:	b29b      	uxth	r3, r3
   18796:	2b08      	cmp	r3, #8
   18798:	d1de      	bne.n	18758 <rpc_ip_event_handler+0xec>
   1879a:	696b      	ldr	r3, [r5, #20]
   1879c:	2b00      	cmp	r3, #0
   1879e:	f000 819c 	beq.w	18ada <rpc_ip_event_handler+0x46e>
   187a2:	2b10      	cmp	r3, #16
   187a4:	f200 8161 	bhi.w	18a6a <rpc_ip_event_handler+0x3fe>
   187a8:	4a97      	ldr	r2, [pc, #604]	; (18a08 <rpc_ip_event_handler+0x39c>)
   187aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   187ae:	6073      	str	r3, [r6, #4]
   187b0:	2000      	movs	r0, #0
   187b2:	e7c3      	b.n	1873c <rpc_ip_event_handler+0xd0>
   187b4:	f248 0306 	movw	r3, #32774	; 0x8006
   187b8:	429c      	cmp	r4, r3
   187ba:	f080 810d 	bcs.w	189d8 <rpc_ip_event_handler+0x36c>
   187be:	f248 0302 	movw	r3, #32770	; 0x8002
   187c2:	429c      	cmp	r4, r3
   187c4:	f000 80f0 	beq.w	189a8 <rpc_ip_event_handler+0x33c>
   187c8:	f240 80be 	bls.w	18948 <rpc_ip_event_handler+0x2dc>
   187cc:	f248 0303 	movw	r3, #32771	; 0x8003
   187d0:	429c      	cmp	r4, r3
   187d2:	f000 80ca 	beq.w	1896a <rpc_ip_event_handler+0x2fe>
   187d6:	f248 0305 	movw	r3, #32773	; 0x8005
   187da:	429c      	cmp	r4, r3
   187dc:	d1c0      	bne.n	18760 <rpc_ip_event_handler+0xf4>
   187de:	6833      	ldr	r3, [r6, #0]
   187e0:	b29b      	uxth	r3, r3
   187e2:	2b03      	cmp	r3, #3
   187e4:	d1b8      	bne.n	18758 <rpc_ip_event_handler+0xec>
   187e6:	696b      	ldr	r3, [r5, #20]
   187e8:	2b00      	cmp	r3, #0
   187ea:	d1da      	bne.n	187a2 <rpc_ip_event_handler+0x136>
   187ec:	6833      	ldr	r3, [r6, #0]
   187ee:	2000      	movs	r0, #0
   187f0:	0c1b      	lsrs	r3, r3, #16
   187f2:	041b      	lsls	r3, r3, #16
   187f4:	f043 0304 	orr.w	r3, r3, #4
   187f8:	6033      	str	r3, [r6, #0]
   187fa:	e79f      	b.n	1873c <rpc_ip_event_handler+0xd0>
   187fc:	4b85      	ldr	r3, [pc, #532]	; (18a14 <rpc_ip_event_handler+0x3a8>)
   187fe:	601f      	str	r7, [r3, #0]
   18800:	6984      	ldr	r4, [r0, #24]
   18802:	0163      	lsls	r3, r4, #5
   18804:	4618      	mov	r0, r3
   18806:	9303      	str	r3, [sp, #12]
   18808:	f7fb f9cc 	bl	13ba4 <nrf_malloc>
   1880c:	9002      	str	r0, [sp, #8]
   1880e:	2800      	cmp	r0, #0
   18810:	f000 808a 	beq.w	18928 <rpc_ip_event_handler+0x2bc>
   18814:	00e5      	lsls	r5, r4, #3
   18816:	1928      	adds	r0, r5, r4
   18818:	0080      	lsls	r0, r0, #2
   1881a:	f7fb f9c3 	bl	13ba4 <nrf_malloc>
   1881e:	2800      	cmp	r0, #0
   18820:	f000 811f 	beq.w	18a62 <rpc_ip_event_handler+0x3f6>
   18824:	2c00      	cmp	r4, #0
   18826:	d05e      	beq.n	188e6 <rpc_ip_event_handler+0x27a>
   18828:	3510      	adds	r5, #16
   1882a:	1943      	adds	r3, r0, r5
   1882c:	9301      	str	r3, [sp, #4]
   1882e:	9b02      	ldr	r3, [sp, #8]
   18830:	2404      	movs	r4, #4
   18832:	f8df a1f0 	ldr.w	sl, [pc, #496]	; 18a24 <rpc_ip_event_handler+0x3b8>
   18836:	f8df b1f0 	ldr.w	fp, [pc, #496]	; 18a28 <rpc_ip_event_handler+0x3bc>
   1883a:	f100 0810 	add.w	r8, r0, #16
   1883e:	f103 0620 	add.w	r6, r3, #32
   18842:	e01d      	b.n	18880 <rpc_ip_event_handler+0x214>
   18844:	220a      	movs	r2, #10
   18846:	f848 2c0c 	str.w	r2, [r8, #-12]
   1884a:	f04f 0224 	mov.w	r2, #36	; 0x24
   1884e:	4640      	mov	r0, r8
   18850:	f808 2c10 	strb.w	r2, [r8, #-16]
   18854:	f828 3c08 	strh.w	r3, [r8, #-8]
   18858:	f856 2c10 	ldr.w	r2, [r6, #-16]
   1885c:	f009 f86d 	bl	2193a <memcpy>
   18860:	f856 3c10 	ldr.w	r3, [r6, #-16]
   18864:	f108 0808 	add.w	r8, r8, #8
   18868:	441c      	add	r4, r3
   1886a:	193b      	adds	r3, r7, r4
   1886c:	f846 3c08 	str.w	r3, [r6, #-8]
   18870:	9b01      	ldr	r3, [sp, #4]
   18872:	f846 6c04 	str.w	r6, [r6, #-4]
   18876:	4598      	cmp	r8, r3
   18878:	442c      	add	r4, r5
   1887a:	f106 0620 	add.w	r6, r6, #32
   1887e:	d02c      	beq.n	188da <rpc_ip_event_handler+0x26e>
   18880:	593b      	ldr	r3, [r7, r4]
   18882:	193a      	adds	r2, r7, r4
   18884:	f846 3c20 	str.w	r3, [r6, #-32]
   18888:	6853      	ldr	r3, [r2, #4]
   1888a:	f8da 1000 	ldr.w	r1, [sl]
   1888e:	2b02      	cmp	r3, #2
   18890:	bf14      	ite	ne
   18892:	2002      	movne	r0, #2
   18894:	200a      	moveq	r0, #10
   18896:	f8db 3000 	ldr.w	r3, [fp]
   1889a:	e946 0107 	strd	r0, r1, [r6, #-28]
   1889e:	f846 3c14 	str.w	r3, [r6, #-20]
   188a2:	8a10      	ldrh	r0, [r2, #16]
   188a4:	f1a8 0310 	sub.w	r3, r8, #16
   188a8:	f846 0c10 	str.w	r0, [r6, #-16]
   188ac:	8a55      	ldrh	r5, [r2, #18]
   188ae:	f846 3c0c 	str.w	r3, [r6, #-12]
   188b2:	4b59      	ldr	r3, [pc, #356]	; (18a18 <rpc_ip_event_handler+0x3ac>)
   188b4:	3414      	adds	r4, #20
   188b6:	2804      	cmp	r0, #4
   188b8:	eb07 0104 	add.w	r1, r7, r4
   188bc:	881b      	ldrh	r3, [r3, #0]
   188be:	d1c1      	bne.n	18844 <rpc_ip_event_handler+0x1d8>
   188c0:	2210      	movs	r2, #16
   188c2:	2002      	movs	r0, #2
   188c4:	f828 3c08 	strh.w	r3, [r8, #-8]
   188c8:	f848 0c0c 	str.w	r0, [r8, #-12]
   188cc:	f808 2c10 	strb.w	r2, [r8, #-16]
   188d0:	f856 2c10 	ldr.w	r2, [r6, #-16]
   188d4:	f1a8 0004 	sub.w	r0, r8, #4
   188d8:	e7c0      	b.n	1885c <rpc_ip_event_handler+0x1f0>
   188da:	2200      	movs	r2, #0
   188dc:	e9dd 1302 	ldrd	r1, r3, [sp, #8]
   188e0:	440b      	add	r3, r1
   188e2:	f843 2c04 	str.w	r2, [r3, #-4]
   188e6:	2202      	movs	r2, #2
   188e8:	4b4c      	ldr	r3, [pc, #304]	; (18a1c <rpc_ip_event_handler+0x3b0>)
   188ea:	f8c9 2000 	str.w	r2, [r9]
   188ee:	9a02      	ldr	r2, [sp, #8]
   188f0:	2000      	movs	r0, #0
   188f2:	601a      	str	r2, [r3, #0]
   188f4:	e722      	b.n	1873c <rpc_ip_event_handler+0xd0>
   188f6:	f248 0308 	movw	r3, #32776	; 0x8008
   188fa:	429c      	cmp	r4, r3
   188fc:	d045      	beq.n	1898a <rpc_ip_event_handler+0x31e>
   188fe:	f248 0309 	movw	r3, #32777	; 0x8009
   18902:	429c      	cmp	r4, r3
   18904:	f47f af2c 	bne.w	18760 <rpc_ip_event_handler+0xf4>
   18908:	6833      	ldr	r3, [r6, #0]
   1890a:	b29b      	uxth	r3, r3
   1890c:	2b0d      	cmp	r3, #13
   1890e:	f47f af23 	bne.w	18758 <rpc_ip_event_handler+0xec>
   18912:	6968      	ldr	r0, [r5, #20]
   18914:	2800      	cmp	r0, #0
   18916:	f000 80d9 	beq.w	18acc <rpc_ip_event_handler+0x460>
   1891a:	2810      	cmp	r0, #16
   1891c:	f200 80a5 	bhi.w	18a6a <rpc_ip_event_handler+0x3fe>
   18920:	4b39      	ldr	r3, [pc, #228]	; (18a08 <rpc_ip_event_handler+0x39c>)
   18922:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
   18926:	e742      	b.n	187ae <rpc_ip_event_handler+0x142>
   18928:	f7fb f946 	bl	13bb8 <nrf_free>
   1892c:	200c      	movs	r0, #12
   1892e:	2302      	movs	r3, #2
   18930:	4937      	ldr	r1, [pc, #220]	; (18a10 <rpc_ip_event_handler+0x3a4>)
   18932:	4a3a      	ldr	r2, [pc, #232]	; (18a1c <rpc_ip_event_handler+0x3b0>)
   18934:	6008      	str	r0, [r1, #0]
   18936:	682f      	ldr	r7, [r5, #0]
   18938:	9902      	ldr	r1, [sp, #8]
   1893a:	f8c9 3000 	str.w	r3, [r9]
   1893e:	6011      	str	r1, [r2, #0]
   18940:	2f00      	cmp	r7, #0
   18942:	f47f af06 	bne.w	18752 <rpc_ip_event_handler+0xe6>
   18946:	e707      	b.n	18758 <rpc_ip_event_handler+0xec>
   18948:	f248 0301 	movw	r3, #32769	; 0x8001
   1894c:	429c      	cmp	r4, r3
   1894e:	f47f af07 	bne.w	18760 <rpc_ip_event_handler+0xf4>
   18952:	6833      	ldr	r3, [r6, #0]
   18954:	2b01      	cmp	r3, #1
   18956:	f47f aeff 	bne.w	18758 <rpc_ip_event_handler+0xec>
   1895a:	6968      	ldr	r0, [r5, #20]
   1895c:	2800      	cmp	r0, #0
   1895e:	d1dc      	bne.n	1891a <rpc_ip_event_handler+0x2ae>
   18960:	2302      	movs	r3, #2
   18962:	6033      	str	r3, [r6, #0]
   18964:	69ab      	ldr	r3, [r5, #24]
   18966:	61b3      	str	r3, [r6, #24]
   18968:	e6e8      	b.n	1873c <rpc_ip_event_handler+0xd0>
   1896a:	6833      	ldr	r3, [r6, #0]
   1896c:	025b      	lsls	r3, r3, #9
   1896e:	f57f aef3 	bpl.w	18758 <rpc_ip_event_handler+0xec>
   18972:	6968      	ldr	r0, [r5, #20]
   18974:	2800      	cmp	r0, #0
   18976:	f000 80a0 	beq.w	18aba <rpc_ip_event_handler+0x44e>
   1897a:	2810      	cmp	r0, #16
   1897c:	bf8e      	itee	hi
   1897e:	232d      	movhi	r3, #45	; 0x2d
   18980:	4b21      	ldrls	r3, [pc, #132]	; (18a08 <rpc_ip_event_handler+0x39c>)
   18982:	f853 3020 	ldrls.w	r3, [r3, r0, lsl #2]
   18986:	6073      	str	r3, [r6, #4]
   18988:	e6e6      	b.n	18758 <rpc_ip_event_handler+0xec>
   1898a:	6833      	ldr	r3, [r6, #0]
   1898c:	b29b      	uxth	r3, r3
   1898e:	2b06      	cmp	r3, #6
   18990:	f47f aee2 	bne.w	18758 <rpc_ip_event_handler+0xec>
   18994:	6968      	ldr	r0, [r5, #20]
   18996:	2800      	cmp	r0, #0
   18998:	d1bf      	bne.n	1891a <rpc_ip_event_handler+0x2ae>
   1899a:	6833      	ldr	r3, [r6, #0]
   1899c:	0c1b      	lsrs	r3, r3, #16
   1899e:	041b      	lsls	r3, r3, #16
   189a0:	f043 0307 	orr.w	r3, r3, #7
   189a4:	6033      	str	r3, [r6, #0]
   189a6:	e6c9      	b.n	1873c <rpc_ip_event_handler+0xd0>
   189a8:	6833      	ldr	r3, [r6, #0]
   189aa:	0099      	lsls	r1, r3, #2
   189ac:	f57f aed4 	bpl.w	18758 <rpc_ip_event_handler+0xec>
   189b0:	6833      	ldr	r3, [r6, #0]
   189b2:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
   189b6:	6033      	str	r3, [r6, #0]
   189b8:	6968      	ldr	r0, [r5, #20]
   189ba:	2800      	cmp	r0, #0
   189bc:	d06e      	beq.n	18a9c <rpc_ip_event_handler+0x430>
   189be:	2810      	cmp	r0, #16
   189c0:	f200 8080 	bhi.w	18ac4 <rpc_ip_event_handler+0x458>
   189c4:	4b10      	ldr	r3, [pc, #64]	; (18a08 <rpc_ip_event_handler+0x39c>)
   189c6:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
   189ca:	6073      	str	r3, [r6, #4]
   189cc:	6833      	ldr	r3, [r6, #0]
   189ce:	2000      	movs	r0, #0
   189d0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
   189d4:	6033      	str	r3, [r6, #0]
   189d6:	e6b1      	b.n	1873c <rpc_ip_event_handler+0xd0>
   189d8:	6833      	ldr	r3, [r6, #0]
   189da:	029a      	lsls	r2, r3, #10
   189dc:	f57f aebc 	bpl.w	18758 <rpc_ip_event_handler+0xec>
   189e0:	696b      	ldr	r3, [r5, #20]
   189e2:	2b00      	cmp	r3, #0
   189e4:	d051      	beq.n	18a8a <rpc_ip_event_handler+0x41e>
   189e6:	2b6b      	cmp	r3, #107	; 0x6b
   189e8:	f000 8086 	beq.w	18af8 <rpc_ip_event_handler+0x48c>
   189ec:	2b10      	cmp	r3, #16
   189ee:	d869      	bhi.n	18ac4 <rpc_ip_event_handler+0x458>
   189f0:	4a05      	ldr	r2, [pc, #20]	; (18a08 <rpc_ip_event_handler+0x39c>)
   189f2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   189f6:	e7e8      	b.n	189ca <rpc_ip_event_handler+0x35e>
   189f8:	6833      	ldr	r3, [r6, #0]
   189fa:	b29b      	uxth	r3, r3
   189fc:	2b07      	cmp	r3, #7
   189fe:	f47f aeab 	bne.w	18758 <rpc_ip_event_handler+0xec>
   18a02:	e686      	b.n	18712 <rpc_ip_event_handler+0xa6>
   18a04:	2002268e 	.word	0x2002268e
   18a08:	00022ed0 	.word	0x00022ed0
   18a0c:	20020840 	.word	0x20020840
   18a10:	2002080c 	.word	0x2002080c
   18a14:	20020818 	.word	0x20020818
   18a18:	200214da 	.word	0x200214da
   18a1c:	20020814 	.word	0x20020814
   18a20:	20020810 	.word	0x20020810
   18a24:	20020808 	.word	0x20020808
   18a28:	20020804 	.word	0x20020804
   18a2c:	6833      	ldr	r3, [r6, #0]
   18a2e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
   18a32:	6033      	str	r3, [r6, #0]
   18a34:	6833      	ldr	r3, [r6, #0]
   18a36:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
   18a3a:	6033      	str	r3, [r6, #0]
   18a3c:	6833      	ldr	r3, [r6, #0]
   18a3e:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
   18a42:	6033      	str	r3, [r6, #0]
   18a44:	692b      	ldr	r3, [r5, #16]
   18a46:	2b6c      	cmp	r3, #108	; 0x6c
   18a48:	d016      	beq.n	18a78 <rpc_ip_event_handler+0x40c>
   18a4a:	2b10      	cmp	r3, #16
   18a4c:	bf8c      	ite	hi
   18a4e:	232d      	movhi	r3, #45	; 0x2d
   18a50:	4a46      	ldrls	r2, [pc, #280]	; (18b6c <rpc_ip_event_handler+0x500>)
   18a52:	f04f 0000 	mov.w	r0, #0
   18a56:	bf98      	it	ls
   18a58:	f852 3023 	ldrls.w	r3, [r2, r3, lsl #2]
   18a5c:	6073      	str	r3, [r6, #4]
   18a5e:	60b3      	str	r3, [r6, #8]
   18a60:	e66c      	b.n	1873c <rpc_ip_event_handler+0xd0>
   18a62:	220c      	movs	r2, #12
   18a64:	4b42      	ldr	r3, [pc, #264]	; (18b70 <rpc_ip_event_handler+0x504>)
   18a66:	601a      	str	r2, [r3, #0]
   18a68:	e73d      	b.n	188e6 <rpc_ip_event_handler+0x27a>
   18a6a:	232d      	movs	r3, #45	; 0x2d
   18a6c:	e69f      	b.n	187ae <rpc_ip_event_handler+0x142>
   18a6e:	6828      	ldr	r0, [r5, #0]
   18a70:	f7fb f902 	bl	13c78 <rpc_ip_client_data_free>
   18a74:	4620      	mov	r0, r4
   18a76:	e661      	b.n	1873c <rpc_ip_event_handler+0xd0>
   18a78:	2239      	movs	r2, #57	; 0x39
   18a7a:	6833      	ldr	r3, [r6, #0]
   18a7c:	2000      	movs	r0, #0
   18a7e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
   18a82:	6033      	str	r3, [r6, #0]
   18a84:	6072      	str	r2, [r6, #4]
   18a86:	60b2      	str	r2, [r6, #8]
   18a88:	e658      	b.n	1873c <rpc_ip_event_handler+0xd0>
   18a8a:	6833      	ldr	r3, [r6, #0]
   18a8c:	4a39      	ldr	r2, [pc, #228]	; (18b74 <rpc_ip_event_handler+0x508>)
   18a8e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   18a92:	6033      	str	r3, [r6, #0]
   18a94:	2001      	movs	r0, #1
   18a96:	f842 5027 	str.w	r5, [r2, r7, lsl #2]
   18a9a:	e64f      	b.n	1873c <rpc_ip_event_handler+0xd0>
   18a9c:	6833      	ldr	r3, [r6, #0]
   18a9e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   18aa2:	6033      	str	r3, [r6, #0]
   18aa4:	6833      	ldr	r3, [r6, #0]
   18aa6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   18aaa:	6033      	str	r3, [r6, #0]
   18aac:	6833      	ldr	r3, [r6, #0]
   18aae:	0c1b      	lsrs	r3, r3, #16
   18ab0:	041b      	lsls	r3, r3, #16
   18ab2:	f043 0305 	orr.w	r3, r3, #5
   18ab6:	6033      	str	r3, [r6, #0]
   18ab8:	e640      	b.n	1873c <rpc_ip_event_handler+0xd0>
   18aba:	6833      	ldr	r3, [r6, #0]
   18abc:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
   18ac0:	6033      	str	r3, [r6, #0]
   18ac2:	e63b      	b.n	1873c <rpc_ip_event_handler+0xd0>
   18ac4:	232d      	movs	r3, #45	; 0x2d
   18ac6:	e780      	b.n	189ca <rpc_ip_event_handler+0x35e>
   18ac8:	2002      	movs	r0, #2
   18aca:	e637      	b.n	1873c <rpc_ip_event_handler+0xd0>
   18acc:	6833      	ldr	r3, [r6, #0]
   18ace:	0c1b      	lsrs	r3, r3, #16
   18ad0:	041b      	lsls	r3, r3, #16
   18ad2:	f043 030e 	orr.w	r3, r3, #14
   18ad6:	6033      	str	r3, [r6, #0]
   18ad8:	e630      	b.n	1873c <rpc_ip_event_handler+0xd0>
   18ada:	4b26      	ldr	r3, [pc, #152]	; (18b74 <rpc_ip_event_handler+0x508>)
   18adc:	2001      	movs	r0, #1
   18ade:	f843 5027 	str.w	r5, [r3, r7, lsl #2]
   18ae2:	6833      	ldr	r3, [r6, #0]
   18ae4:	0c1b      	lsrs	r3, r3, #16
   18ae6:	041b      	lsls	r3, r3, #16
   18ae8:	f043 0309 	orr.w	r3, r3, #9
   18aec:	6033      	str	r3, [r6, #0]
   18aee:	e625      	b.n	1873c <rpc_ip_event_handler+0xd0>
   18af0:	8a6c      	ldrh	r4, [r5, #18]
   18af2:	b934      	cbnz	r4, 18b02 <rpc_ip_event_handler+0x496>
   18af4:	4627      	mov	r7, r4
   18af6:	e5fe      	b.n	186f6 <rpc_ip_event_handler+0x8a>
   18af8:	6933      	ldr	r3, [r6, #16]
   18afa:	2b01      	cmp	r3, #1
   18afc:	d012      	beq.n	18b24 <rpc_ip_event_handler+0x4b8>
   18afe:	230c      	movs	r3, #12
   18b00:	e763      	b.n	189ca <rpc_ip_event_handler+0x35e>
   18b02:	2024      	movs	r0, #36	; 0x24
   18b04:	f7fb f84e 	bl	13ba4 <nrf_malloc>
   18b08:	4607      	mov	r7, r0
   18b0a:	b358      	cbz	r0, 18b64 <rpc_ip_event_handler+0x4f8>
   18b0c:	8a6a      	ldrh	r2, [r5, #18]
   18b0e:	2a10      	cmp	r2, #16
   18b10:	d01c      	beq.n	18b4c <rpc_ip_event_handler+0x4e0>
   18b12:	2a04      	cmp	r2, #4
   18b14:	d00e      	beq.n	18b34 <rpc_ip_event_handler+0x4c8>
   18b16:	6828      	ldr	r0, [r5, #0]
   18b18:	f7fb f8ae 	bl	13c78 <rpc_ip_client_data_free>
   18b1c:	4638      	mov	r0, r7
   18b1e:	f7fb f84b 	bl	13bb8 <nrf_free>
   18b22:	e619      	b.n	18758 <rpc_ip_event_handler+0xec>
   18b24:	220c      	movs	r2, #12
   18b26:	6833      	ldr	r3, [r6, #0]
   18b28:	2000      	movs	r0, #0
   18b2a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
   18b2e:	6033      	str	r3, [r6, #0]
   18b30:	6072      	str	r2, [r6, #4]
   18b32:	e603      	b.n	1873c <rpc_ip_event_handler+0xd0>
   18b34:	2302      	movs	r3, #2
   18b36:	2410      	movs	r4, #16
   18b38:	6043      	str	r3, [r0, #4]
   18b3a:	7004      	strb	r4, [r0, #0]
   18b3c:	8a2b      	ldrh	r3, [r5, #16]
   18b3e:	f105 0114 	add.w	r1, r5, #20
   18b42:	8103      	strh	r3, [r0, #8]
   18b44:	300c      	adds	r0, #12
   18b46:	f008 fef8 	bl	2193a <memcpy>
   18b4a:	e5d4      	b.n	186f6 <rpc_ip_event_handler+0x8a>
   18b4c:	230a      	movs	r3, #10
   18b4e:	2424      	movs	r4, #36	; 0x24
   18b50:	6043      	str	r3, [r0, #4]
   18b52:	7004      	strb	r4, [r0, #0]
   18b54:	8a2b      	ldrh	r3, [r5, #16]
   18b56:	f105 0114 	add.w	r1, r5, #20
   18b5a:	8103      	strh	r3, [r0, #8]
   18b5c:	3010      	adds	r0, #16
   18b5e:	f008 feec 	bl	2193a <memcpy>
   18b62:	e5c8      	b.n	186f6 <rpc_ip_event_handler+0x8a>
   18b64:	6828      	ldr	r0, [r5, #0]
   18b66:	f7fb f887 	bl	13c78 <rpc_ip_client_data_free>
   18b6a:	e5f5      	b.n	18758 <rpc_ip_event_handler+0xec>
   18b6c:	00022ed0 	.word	0x00022ed0
   18b70:	2002080c 	.word	0x2002080c
   18b74:	2002081c 	.word	0x2002081c

00018b78 <interface_init>:
   18b78:	b508      	push	{r3, lr}
   18b7a:	f44f 72a2 	mov.w	r2, #324	; 0x144
   18b7e:	2100      	movs	r1, #0
   18b80:	4802      	ldr	r0, [pc, #8]	; (18b8c <interface_init+0x14>)
   18b82:	f008 fee7 	bl	21954 <memset>
   18b86:	2000      	movs	r0, #0
   18b88:	bd08      	pop	{r3, pc}
   18b8a:	bf00      	nop
   18b8c:	20022690 	.word	0x20022690

00018b90 <interface_socket_allocate>:
   18b90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   18b92:	4b30      	ldr	r3, [pc, #192]	; (18c54 <interface_socket_allocate+0xc4>)
   18b94:	4606      	mov	r6, r0
   18b96:	681d      	ldr	r5, [r3, #0]
   18b98:	4608      	mov	r0, r1
   18b9a:	b31d      	cbz	r5, 18be4 <interface_socket_allocate+0x54>
   18b9c:	6a5c      	ldr	r4, [r3, #36]	; 0x24
   18b9e:	2c00      	cmp	r4, #0
   18ba0:	d04a      	beq.n	18c38 <interface_socket_allocate+0xa8>
   18ba2:	6c9c      	ldr	r4, [r3, #72]	; 0x48
   18ba4:	2c00      	cmp	r4, #0
   18ba6:	d049      	beq.n	18c3c <interface_socket_allocate+0xac>
   18ba8:	6edc      	ldr	r4, [r3, #108]	; 0x6c
   18baa:	2c00      	cmp	r4, #0
   18bac:	d048      	beq.n	18c40 <interface_socket_allocate+0xb0>
   18bae:	f8d3 1090 	ldr.w	r1, [r3, #144]	; 0x90
   18bb2:	2900      	cmp	r1, #0
   18bb4:	d046      	beq.n	18c44 <interface_socket_allocate+0xb4>
   18bb6:	f8d3 10b4 	ldr.w	r1, [r3, #180]	; 0xb4
   18bba:	b191      	cbz	r1, 18be2 <interface_socket_allocate+0x52>
   18bbc:	f8d3 10d8 	ldr.w	r1, [r3, #216]	; 0xd8
   18bc0:	2900      	cmp	r1, #0
   18bc2:	d043      	beq.n	18c4c <interface_socket_allocate+0xbc>
   18bc4:	f8d3 10fc 	ldr.w	r1, [r3, #252]	; 0xfc
   18bc8:	2900      	cmp	r1, #0
   18bca:	d041      	beq.n	18c50 <interface_socket_allocate+0xc0>
   18bcc:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
   18bd0:	2900      	cmp	r1, #0
   18bd2:	d039      	beq.n	18c48 <interface_socket_allocate+0xb8>
   18bd4:	f04f 35ff 	mov.w	r5, #4294967295
   18bd8:	2069      	movs	r0, #105	; 0x69
   18bda:	f7f8 fa3f 	bl	1105c <bsd_os_errno_set>
   18bde:	4628      	mov	r0, r5
   18be0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   18be2:	2505      	movs	r5, #5
   18be4:	f04f 0c01 	mov.w	ip, #1
   18be8:	f04f 37ff 	mov.w	r7, #4294967295
   18bec:	eb05 04c5 	add.w	r4, r5, r5, lsl #3
   18bf0:	00a4      	lsls	r4, r4, #2
   18bf2:	f843 c004 	str.w	ip, [r3, r4]
   18bf6:	441c      	add	r4, r3
   18bf8:	4611      	mov	r1, r2
   18bfa:	61a7      	str	r7, [r4, #24]
   18bfc:	4622      	mov	r2, r4
   18bfe:	f001 ffd1 	bl	1aba4 <packet_handler_create>
   18c02:	4603      	mov	r3, r0
   18c04:	61e0      	str	r0, [r4, #28]
   18c06:	b158      	cbz	r0, 18c20 <interface_socket_allocate+0x90>
   18c08:	681b      	ldr	r3, [r3, #0]
   18c0a:	681b      	ldr	r3, [r3, #0]
   18c0c:	4798      	blx	r3
   18c0e:	b910      	cbnz	r0, 18c16 <interface_socket_allocate+0x86>
   18c10:	6034      	str	r4, [r6, #0]
   18c12:	4628      	mov	r0, r5
   18c14:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   18c16:	69e0      	ldr	r0, [r4, #28]
   18c18:	f001 ffe4 	bl	1abe4 <packet_handler_delete>
   18c1c:	2300      	movs	r3, #0
   18c1e:	61e3      	str	r3, [r4, #28]
   18c20:	f04f 35ff 	mov.w	r5, #4294967295
   18c24:	2224      	movs	r2, #36	; 0x24
   18c26:	2100      	movs	r1, #0
   18c28:	4620      	mov	r0, r4
   18c2a:	f008 fe93 	bl	21954 <memset>
   18c2e:	200c      	movs	r0, #12
   18c30:	f7f8 fa14 	bl	1105c <bsd_os_errno_set>
   18c34:	4628      	mov	r0, r5
   18c36:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   18c38:	2501      	movs	r5, #1
   18c3a:	e7d3      	b.n	18be4 <interface_socket_allocate+0x54>
   18c3c:	2502      	movs	r5, #2
   18c3e:	e7d1      	b.n	18be4 <interface_socket_allocate+0x54>
   18c40:	2503      	movs	r5, #3
   18c42:	e7cf      	b.n	18be4 <interface_socket_allocate+0x54>
   18c44:	2504      	movs	r5, #4
   18c46:	e7cd      	b.n	18be4 <interface_socket_allocate+0x54>
   18c48:	2508      	movs	r5, #8
   18c4a:	e7cb      	b.n	18be4 <interface_socket_allocate+0x54>
   18c4c:	2506      	movs	r5, #6
   18c4e:	e7c9      	b.n	18be4 <interface_socket_allocate+0x54>
   18c50:	2507      	movs	r5, #7
   18c52:	e7c7      	b.n	18be4 <interface_socket_allocate+0x54>
   18c54:	20022690 	.word	0x20022690

00018c58 <interface_socket_free>:
   18c58:	2808      	cmp	r0, #8
   18c5a:	d900      	bls.n	18c5e <interface_socket_free+0x6>
   18c5c:	4770      	bx	lr
   18c5e:	b510      	push	{r4, lr}
   18c60:	4c07      	ldr	r4, [pc, #28]	; (18c80 <interface_socket_free+0x28>)
   18c62:	eb00 00c0 	add.w	r0, r0, r0, lsl #3
   18c66:	eb04 0480 	add.w	r4, r4, r0, lsl #2
   18c6a:	69e0      	ldr	r0, [r4, #28]
   18c6c:	b108      	cbz	r0, 18c72 <interface_socket_free+0x1a>
   18c6e:	f001 ffb9 	bl	1abe4 <packet_handler_delete>
   18c72:	4620      	mov	r0, r4
   18c74:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   18c78:	2224      	movs	r2, #36	; 0x24
   18c7a:	2100      	movs	r1, #0
   18c7c:	f008 be6a 	b.w	21954 <memset>
   18c80:	20022690 	.word	0x20022690

00018c84 <interface_socket_packet_handler_update>:
   18c84:	2808      	cmp	r0, #8
   18c86:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   18c8a:	d81e      	bhi.n	18cca <interface_socket_packet_handler_update+0x46>
   18c8c:	ea4f 08c0 	mov.w	r8, r0, lsl #3
   18c90:	4e17      	ldr	r6, [pc, #92]	; (18cf0 <interface_socket_packet_handler_update+0x6c>)
   18c92:	eb08 0300 	add.w	r3, r8, r0
   18c96:	009b      	lsls	r3, r3, #2
   18c98:	58f4      	ldr	r4, [r6, r3]
   18c9a:	18f5      	adds	r5, r6, r3
   18c9c:	b1ac      	cbz	r4, 18cca <interface_socket_packet_handler_update+0x46>
   18c9e:	460b      	mov	r3, r1
   18ca0:	4604      	mov	r4, r0
   18ca2:	4611      	mov	r1, r2
   18ca4:	4618      	mov	r0, r3
   18ca6:	462a      	mov	r2, r5
   18ca8:	f8d5 901c 	ldr.w	r9, [r5, #28]
   18cac:	f001 ff7a 	bl	1aba4 <packet_handler_create>
   18cb0:	61e8      	str	r0, [r5, #28]
   18cb2:	b1d0      	cbz	r0, 18cea <interface_socket_packet_handler_update+0x66>
   18cb4:	6803      	ldr	r3, [r0, #0]
   18cb6:	681b      	ldr	r3, [r3, #0]
   18cb8:	4798      	blx	r3
   18cba:	4607      	mov	r7, r0
   18cbc:	b948      	cbnz	r0, 18cd2 <interface_socket_packet_handler_update+0x4e>
   18cbe:	4648      	mov	r0, r9
   18cc0:	f001 ff90 	bl	1abe4 <packet_handler_delete>
   18cc4:	4638      	mov	r0, r7
   18cc6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   18cca:	2705      	movs	r7, #5
   18ccc:	4638      	mov	r0, r7
   18cce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   18cd2:	69e8      	ldr	r0, [r5, #28]
   18cd4:	f001 ff86 	bl	1abe4 <packet_handler_delete>
   18cd8:	eb08 0004 	add.w	r0, r8, r4
   18cdc:	eb06 0680 	add.w	r6, r6, r0, lsl #2
   18ce0:	f8c6 901c 	str.w	r9, [r6, #28]
   18ce4:	4638      	mov	r0, r7
   18ce6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   18cea:	2704      	movs	r7, #4
   18cec:	e7f4      	b.n	18cd8 <interface_socket_packet_handler_update+0x54>
   18cee:	bf00      	nop
   18cf0:	20022690 	.word	0x20022690

00018cf4 <interface_socket_wait>:
   18cf4:	b5f0      	push	{r4, r5, r6, r7, lr}
   18cf6:	eb00 00c0 	add.w	r0, r0, r0, lsl #3
   18cfa:	4c0e      	ldr	r4, [pc, #56]	; (18d34 <interface_socket_wait+0x40>)
   18cfc:	0080      	lsls	r0, r0, #2
   18cfe:	5825      	ldr	r5, [r4, r0]
   18d00:	b083      	sub	sp, #12
   18d02:	4015      	ands	r5, r2
   18d04:	428d      	cmp	r5, r1
   18d06:	9301      	str	r3, [sp, #4]
   18d08:	4404      	add	r4, r0
   18d0a:	d010      	beq.n	18d2e <interface_socket_wait+0x3a>
   18d0c:	6863      	ldr	r3, [r4, #4]
   18d0e:	b973      	cbnz	r3, 18d2e <interface_socket_wait+0x3a>
   18d10:	460f      	mov	r7, r1
   18d12:	4616      	mov	r6, r2
   18d14:	4625      	mov	r5, r4
   18d16:	e006      	b.n	18d26 <interface_socket_wait+0x32>
   18d18:	686b      	ldr	r3, [r5, #4]
   18d1a:	b943      	cbnz	r3, 18d2e <interface_socket_wait+0x3a>
   18d1c:	a901      	add	r1, sp, #4
   18d1e:	4620      	mov	r0, r4
   18d20:	f7f8 f908 	bl	10f34 <bsd_os_timedwait>
   18d24:	b920      	cbnz	r0, 18d30 <interface_socket_wait+0x3c>
   18d26:	682b      	ldr	r3, [r5, #0]
   18d28:	4033      	ands	r3, r6
   18d2a:	42bb      	cmp	r3, r7
   18d2c:	d1f4      	bne.n	18d18 <interface_socket_wait+0x24>
   18d2e:	2000      	movs	r0, #0
   18d30:	b003      	add	sp, #12
   18d32:	bdf0      	pop	{r4, r5, r6, r7, pc}
   18d34:	20022690 	.word	0x20022690

00018d38 <interface_from_internal_id_search>:
   18d38:	4b27      	ldr	r3, [pc, #156]	; (18dd8 <interface_from_internal_id_search+0xa0>)
   18d3a:	681a      	ldr	r2, [r3, #0]
   18d3c:	b112      	cbz	r2, 18d44 <interface_from_internal_id_search+0xc>
   18d3e:	699a      	ldr	r2, [r3, #24]
   18d40:	4282      	cmp	r2, r0
   18d42:	d039      	beq.n	18db8 <interface_from_internal_id_search+0x80>
   18d44:	6a5a      	ldr	r2, [r3, #36]	; 0x24
   18d46:	b112      	cbz	r2, 18d4e <interface_from_internal_id_search+0x16>
   18d48:	6bda      	ldr	r2, [r3, #60]	; 0x3c
   18d4a:	4282      	cmp	r2, r0
   18d4c:	d036      	beq.n	18dbc <interface_from_internal_id_search+0x84>
   18d4e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
   18d50:	b112      	cbz	r2, 18d58 <interface_from_internal_id_search+0x20>
   18d52:	6e1a      	ldr	r2, [r3, #96]	; 0x60
   18d54:	4282      	cmp	r2, r0
   18d56:	d033      	beq.n	18dc0 <interface_from_internal_id_search+0x88>
   18d58:	6eda      	ldr	r2, [r3, #108]	; 0x6c
   18d5a:	b11a      	cbz	r2, 18d64 <interface_from_internal_id_search+0x2c>
   18d5c:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
   18d60:	4282      	cmp	r2, r0
   18d62:	d02f      	beq.n	18dc4 <interface_from_internal_id_search+0x8c>
   18d64:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
   18d68:	b11a      	cbz	r2, 18d72 <interface_from_internal_id_search+0x3a>
   18d6a:	f8d3 20a8 	ldr.w	r2, [r3, #168]	; 0xa8
   18d6e:	4282      	cmp	r2, r0
   18d70:	d02a      	beq.n	18dc8 <interface_from_internal_id_search+0x90>
   18d72:	f8d3 20b4 	ldr.w	r2, [r3, #180]	; 0xb4
   18d76:	b11a      	cbz	r2, 18d80 <interface_from_internal_id_search+0x48>
   18d78:	f8d3 20cc 	ldr.w	r2, [r3, #204]	; 0xcc
   18d7c:	4282      	cmp	r2, r0
   18d7e:	d025      	beq.n	18dcc <interface_from_internal_id_search+0x94>
   18d80:	f8d3 20d8 	ldr.w	r2, [r3, #216]	; 0xd8
   18d84:	b11a      	cbz	r2, 18d8e <interface_from_internal_id_search+0x56>
   18d86:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
   18d8a:	4282      	cmp	r2, r0
   18d8c:	d020      	beq.n	18dd0 <interface_from_internal_id_search+0x98>
   18d8e:	f8d3 20fc 	ldr.w	r2, [r3, #252]	; 0xfc
   18d92:	b11a      	cbz	r2, 18d9c <interface_from_internal_id_search+0x64>
   18d94:	f8d3 2114 	ldr.w	r2, [r3, #276]	; 0x114
   18d98:	4282      	cmp	r2, r0
   18d9a:	d01b      	beq.n	18dd4 <interface_from_internal_id_search+0x9c>
   18d9c:	f8d3 2120 	ldr.w	r2, [r3, #288]	; 0x120
   18da0:	b13a      	cbz	r2, 18db2 <interface_from_internal_id_search+0x7a>
   18da2:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
   18da6:	4283      	cmp	r3, r0
   18da8:	bf14      	ite	ne
   18daa:	f04f 30ff 	movne.w	r0, #4294967295
   18dae:	2008      	moveq	r0, #8
   18db0:	4770      	bx	lr
   18db2:	f04f 30ff 	mov.w	r0, #4294967295
   18db6:	4770      	bx	lr
   18db8:	2000      	movs	r0, #0
   18dba:	4770      	bx	lr
   18dbc:	2001      	movs	r0, #1
   18dbe:	4770      	bx	lr
   18dc0:	2002      	movs	r0, #2
   18dc2:	4770      	bx	lr
   18dc4:	2003      	movs	r0, #3
   18dc6:	4770      	bx	lr
   18dc8:	2004      	movs	r0, #4
   18dca:	4770      	bx	lr
   18dcc:	2005      	movs	r0, #5
   18dce:	4770      	bx	lr
   18dd0:	2006      	movs	r0, #6
   18dd2:	4770      	bx	lr
   18dd4:	2007      	movs	r0, #7
   18dd6:	4770      	bx	lr
   18dd8:	20022690 	.word	0x20022690

00018ddc <interface_socket_from_handle_get>:
   18ddc:	2808      	cmp	r0, #8
   18dde:	d807      	bhi.n	18df0 <interface_socket_from_handle_get+0x14>
   18de0:	eb00 00c0 	add.w	r0, r0, r0, lsl #3
   18de4:	4b03      	ldr	r3, [pc, #12]	; (18df4 <interface_socket_from_handle_get+0x18>)
   18de6:	0080      	lsls	r0, r0, #2
   18de8:	581a      	ldr	r2, [r3, r0]
   18dea:	b10a      	cbz	r2, 18df0 <interface_socket_from_handle_get+0x14>
   18dec:	4418      	add	r0, r3
   18dee:	4770      	bx	lr
   18df0:	2000      	movs	r0, #0
   18df2:	4770      	bx	lr
   18df4:	20022690 	.word	0x20022690

00018df8 <interface_socket_event_get>:
   18df8:	b119      	cbz	r1, 18e02 <interface_socket_event_get+0xa>
   18dfa:	2808      	cmp	r0, #8
   18dfc:	d902      	bls.n	18e04 <interface_socket_event_get+0xc>
   18dfe:	2310      	movs	r3, #16
   18e00:	600b      	str	r3, [r1, #0]
   18e02:	4770      	bx	lr
   18e04:	eb00 00c0 	add.w	r0, r0, r0, lsl #3
   18e08:	4b07      	ldr	r3, [pc, #28]	; (18e28 <interface_socket_event_get+0x30>)
   18e0a:	0080      	lsls	r0, r0, #2
   18e0c:	581a      	ldr	r2, [r3, r0]
   18e0e:	2a00      	cmp	r2, #0
   18e10:	d0f5      	beq.n	18dfe <interface_socket_event_get+0x6>
   18e12:	581b      	ldr	r3, [r3, r0]
   18e14:	0c1b      	lsrs	r3, r3, #16
   18e16:	f003 020a 	and.w	r2, r3, #10
   18e1a:	2a0a      	cmp	r2, #10
   18e1c:	bf14      	ite	ne
   18e1e:	f003 030f 	andne.w	r3, r3, #15
   18e22:	f003 030d 	andeq.w	r3, r3, #13
   18e26:	e7eb      	b.n	18e00 <interface_socket_event_get+0x8>
   18e28:	20022690 	.word	0x20022690

00018e2c <interface_socket_setopt>:
   18e2c:	2808      	cmp	r0, #8
   18e2e:	b538      	push	{r3, r4, r5, lr}
   18e30:	d82d      	bhi.n	18e8e <interface_socket_setopt+0x62>
   18e32:	eb00 00c0 	add.w	r0, r0, r0, lsl #3
   18e36:	4c1c      	ldr	r4, [pc, #112]	; (18ea8 <interface_socket_setopt+0x7c>)
   18e38:	0080      	lsls	r0, r0, #2
   18e3a:	461d      	mov	r5, r3
   18e3c:	5823      	ldr	r3, [r4, r0]
   18e3e:	b333      	cbz	r3, 18e8e <interface_socket_setopt+0x62>
   18e40:	2901      	cmp	r1, #1
   18e42:	d11e      	bne.n	18e82 <interface_socket_setopt+0x56>
   18e44:	2a14      	cmp	r2, #20
   18e46:	d11c      	bne.n	18e82 <interface_socket_setopt+0x56>
   18e48:	b1ad      	cbz	r5, 18e76 <interface_socket_setopt+0x4a>
   18e4a:	9b04      	ldr	r3, [sp, #16]
   18e4c:	2b08      	cmp	r3, #8
   18e4e:	d112      	bne.n	18e76 <interface_socket_setopt+0x4a>
   18e50:	686a      	ldr	r2, [r5, #4]
   18e52:	4b16      	ldr	r3, [pc, #88]	; (18eac <interface_socket_setopt+0x80>)
   18e54:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   18e58:	fba3 3202 	umull	r3, r2, r3, r2
   18e5c:	2300      	movs	r3, #0
   18e5e:	682d      	ldr	r5, [r5, #0]
   18e60:	0992      	lsrs	r2, r2, #6
   18e62:	fbe1 2305 	umlal	r2, r3, r1, r5
   18e66:	2b01      	cmp	r3, #1
   18e68:	bf08      	it	eq
   18e6a:	2a00      	cmpeq	r2, #0
   18e6c:	d215      	bcs.n	18e9a <interface_socket_setopt+0x6e>
   18e6e:	4420      	add	r0, r4
   18e70:	6202      	str	r2, [r0, #32]
   18e72:	2000      	movs	r0, #0
   18e74:	bd38      	pop	{r3, r4, r5, pc}
   18e76:	2016      	movs	r0, #22
   18e78:	f7f8 f8f0 	bl	1105c <bsd_os_errno_set>
   18e7c:	f04f 30ff 	mov.w	r0, #4294967295
   18e80:	bd38      	pop	{r3, r4, r5, pc}
   18e82:	202a      	movs	r0, #42	; 0x2a
   18e84:	f7f8 f8ea 	bl	1105c <bsd_os_errno_set>
   18e88:	f04f 30ff 	mov.w	r0, #4294967295
   18e8c:	bd38      	pop	{r3, r4, r5, pc}
   18e8e:	2009      	movs	r0, #9
   18e90:	f7f8 f8e4 	bl	1105c <bsd_os_errno_set>
   18e94:	f04f 30ff 	mov.w	r0, #4294967295
   18e98:	bd38      	pop	{r3, r4, r5, pc}
   18e9a:	2025      	movs	r0, #37	; 0x25
   18e9c:	f7f8 f8de 	bl	1105c <bsd_os_errno_set>
   18ea0:	f04f 30ff 	mov.w	r0, #4294967295
   18ea4:	bd38      	pop	{r3, r4, r5, pc}
   18ea6:	bf00      	nop
   18ea8:	20022690 	.word	0x20022690
   18eac:	10624dd3 	.word	0x10624dd3

00018eb0 <interface_socket_getopt>:
   18eb0:	b570      	push	{r4, r5, r6, lr}
   18eb2:	2808      	cmp	r0, #8
   18eb4:	9d04      	ldr	r5, [sp, #16]
   18eb6:	d821      	bhi.n	18efc <interface_socket_getopt+0x4c>
   18eb8:	4c13      	ldr	r4, [pc, #76]	; (18f08 <interface_socket_getopt+0x58>)
   18eba:	eb00 00c0 	add.w	r0, r0, r0, lsl #3
   18ebe:	0080      	lsls	r0, r0, #2
   18ec0:	5826      	ldr	r6, [r4, r0]
   18ec2:	4404      	add	r4, r0
   18ec4:	b1d6      	cbz	r6, 18efc <interface_socket_getopt+0x4c>
   18ec6:	2901      	cmp	r1, #1
   18ec8:	d112      	bne.n	18ef0 <interface_socket_getopt+0x40>
   18eca:	2a04      	cmp	r2, #4
   18ecc:	d110      	bne.n	18ef0 <interface_socket_getopt+0x40>
   18ece:	b14b      	cbz	r3, 18ee4 <interface_socket_getopt+0x34>
   18ed0:	b145      	cbz	r5, 18ee4 <interface_socket_getopt+0x34>
   18ed2:	682a      	ldr	r2, [r5, #0]
   18ed4:	2a04      	cmp	r2, #4
   18ed6:	d105      	bne.n	18ee4 <interface_socket_getopt+0x34>
   18ed8:	2200      	movs	r2, #0
   18eda:	6861      	ldr	r1, [r4, #4]
   18edc:	4610      	mov	r0, r2
   18ede:	6019      	str	r1, [r3, #0]
   18ee0:	6062      	str	r2, [r4, #4]
   18ee2:	bd70      	pop	{r4, r5, r6, pc}
   18ee4:	2016      	movs	r0, #22
   18ee6:	f7f8 f8b9 	bl	1105c <bsd_os_errno_set>
   18eea:	f04f 30ff 	mov.w	r0, #4294967295
   18eee:	bd70      	pop	{r4, r5, r6, pc}
   18ef0:	202a      	movs	r0, #42	; 0x2a
   18ef2:	f7f8 f8b3 	bl	1105c <bsd_os_errno_set>
   18ef6:	f04f 30ff 	mov.w	r0, #4294967295
   18efa:	bd70      	pop	{r4, r5, r6, pc}
   18efc:	2009      	movs	r0, #9
   18efe:	f7f8 f8ad 	bl	1105c <bsd_os_errno_set>
   18f02:	f04f 30ff 	mov.w	r0, #4294967295
   18f06:	bd70      	pop	{r4, r5, r6, pc}
   18f08:	20022690 	.word	0x20022690

00018f0c <interface_socket_fcntl>:
   18f0c:	2808      	cmp	r0, #8
   18f0e:	b510      	push	{r4, lr}
   18f10:	d818      	bhi.n	18f44 <interface_socket_fcntl+0x38>
   18f12:	eb00 00c0 	add.w	r0, r0, r0, lsl #3
   18f16:	4c11      	ldr	r4, [pc, #68]	; (18f5c <interface_socket_fcntl+0x50>)
   18f18:	0083      	lsls	r3, r0, #2
   18f1a:	58e0      	ldr	r0, [r4, r3]
   18f1c:	b190      	cbz	r0, 18f44 <interface_socket_fcntl+0x38>
   18f1e:	2901      	cmp	r1, #1
   18f20:	d005      	beq.n	18f2e <interface_socket_fcntl+0x22>
   18f22:	2902      	cmp	r1, #2
   18f24:	d114      	bne.n	18f50 <interface_socket_fcntl+0x44>
   18f26:	58e0      	ldr	r0, [r4, r3]
   18f28:	f3c0 7000 	ubfx	r0, r0, #28, #1
   18f2c:	bd10      	pop	{r4, pc}
   18f2e:	f012 0001 	ands.w	r0, r2, #1
   18f32:	58e2      	ldr	r2, [r4, r3]
   18f34:	bf1a      	itte	ne
   18f36:	2000      	movne	r0, #0
   18f38:	f042 5280 	orrne.w	r2, r2, #268435456	; 0x10000000
   18f3c:	f022 5280 	biceq.w	r2, r2, #268435456	; 0x10000000
   18f40:	50e2      	str	r2, [r4, r3]
   18f42:	bd10      	pop	{r4, pc}
   18f44:	2009      	movs	r0, #9
   18f46:	f7f8 f889 	bl	1105c <bsd_os_errno_set>
   18f4a:	f04f 30ff 	mov.w	r0, #4294967295
   18f4e:	bd10      	pop	{r4, pc}
   18f50:	2016      	movs	r0, #22
   18f52:	f7f8 f883 	bl	1105c <bsd_os_errno_set>
   18f56:	f04f 30ff 	mov.w	r0, #4294967295
   18f5a:	bd10      	pop	{r4, pc}
   18f5c:	20022690 	.word	0x20022690

00018f60 <bsd_os_application_irq_handler>:
   18f60:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   18f64:	4c33      	ldr	r4, [pc, #204]	; (19034 <bsd_os_application_irq_handler+0xd4>)
   18f66:	f7f8 f979 	bl	1125c <bsd_os_application_irq_clear>
   18f6a:	f04f 0803 	mov.w	r8, #3
   18f6e:	4d32      	ldr	r5, [pc, #200]	; (19038 <bsd_os_application_irq_handler+0xd8>)
   18f70:	4f32      	ldr	r7, [pc, #200]	; (1903c <bsd_os_application_irq_handler+0xdc>)
   18f72:	f104 0680 	add.w	r6, r4, #128	; 0x80
   18f76:	e004      	b.n	18f82 <bsd_os_application_irq_handler+0x22>
   18f78:	2b04      	cmp	r3, #4
   18f7a:	d006      	beq.n	18f8a <bsd_os_application_irq_handler+0x2a>
   18f7c:	3408      	adds	r4, #8
   18f7e:	42b4      	cmp	r4, r6
   18f80:	d03b      	beq.n	18ffa <bsd_os_application_irq_handler+0x9a>
   18f82:	f814 3c04 	ldrb.w	r3, [r4, #-4]
   18f86:	2b02      	cmp	r3, #2
   18f88:	d1f6      	bne.n	18f78 <bsd_os_application_irq_handler+0x18>
   18f8a:	6820      	ldr	r0, [r4, #0]
   18f8c:	882a      	ldrh	r2, [r5, #0]
   18f8e:	6803      	ldr	r3, [r0, #0]
   18f90:	b29b      	uxth	r3, r3
   18f92:	429a      	cmp	r2, r3
   18f94:	d033      	beq.n	18ffe <bsd_os_application_irq_handler+0x9e>
   18f96:	8a2a      	ldrh	r2, [r5, #16]
   18f98:	429a      	cmp	r2, r3
   18f9a:	d032      	beq.n	19002 <bsd_os_application_irq_handler+0xa2>
   18f9c:	8c2a      	ldrh	r2, [r5, #32]
   18f9e:	429a      	cmp	r2, r3
   18fa0:	d031      	beq.n	19006 <bsd_os_application_irq_handler+0xa6>
   18fa2:	8e2a      	ldrh	r2, [r5, #48]	; 0x30
   18fa4:	429a      	cmp	r2, r3
   18fa6:	d030      	beq.n	1900a <bsd_os_application_irq_handler+0xaa>
   18fa8:	f8b5 2040 	ldrh.w	r2, [r5, #64]	; 0x40
   18fac:	429a      	cmp	r2, r3
   18fae:	d036      	beq.n	1901e <bsd_os_application_irq_handler+0xbe>
   18fb0:	f8b5 2050 	ldrh.w	r2, [r5, #80]	; 0x50
   18fb4:	429a      	cmp	r2, r3
   18fb6:	d034      	beq.n	19022 <bsd_os_application_irq_handler+0xc2>
   18fb8:	f8b5 2060 	ldrh.w	r2, [r5, #96]	; 0x60
   18fbc:	429a      	cmp	r2, r3
   18fbe:	d032      	beq.n	19026 <bsd_os_application_irq_handler+0xc6>
   18fc0:	f8b5 2070 	ldrh.w	r2, [r5, #112]	; 0x70
   18fc4:	429a      	cmp	r2, r3
   18fc6:	d030      	beq.n	1902a <bsd_os_application_irq_handler+0xca>
   18fc8:	f8b5 2080 	ldrh.w	r2, [r5, #128]	; 0x80
   18fcc:	429a      	cmp	r2, r3
   18fce:	d02e      	beq.n	1902e <bsd_os_application_irq_handler+0xce>
   18fd0:	f8b5 2090 	ldrh.w	r2, [r5, #144]	; 0x90
   18fd4:	429a      	cmp	r2, r3
   18fd6:	bf08      	it	eq
   18fd8:	2309      	moveq	r3, #9
   18fda:	d1cf      	bne.n	18f7c <bsd_os_application_irq_handler+0x1c>
   18fdc:	eb05 1303 	add.w	r3, r5, r3, lsl #4
   18fe0:	685a      	ldr	r2, [r3, #4]
   18fe2:	68d9      	ldr	r1, [r3, #12]
   18fe4:	4790      	blx	r2
   18fe6:	b990      	cbnz	r0, 1900e <bsd_os_application_irq_handler+0xae>
   18fe8:	2201      	movs	r2, #1
   18fea:	6820      	ldr	r0, [r4, #0]
   18fec:	f804 2c04 	strb.w	r2, [r4, #-4]
   18ff0:	68fb      	ldr	r3, [r7, #12]
   18ff2:	3408      	adds	r4, #8
   18ff4:	4798      	blx	r3
   18ff6:	42b4      	cmp	r4, r6
   18ff8:	d1c3      	bne.n	18f82 <bsd_os_application_irq_handler+0x22>
   18ffa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   18ffe:	2300      	movs	r3, #0
   19000:	e7ec      	b.n	18fdc <bsd_os_application_irq_handler+0x7c>
   19002:	2301      	movs	r3, #1
   19004:	e7ea      	b.n	18fdc <bsd_os_application_irq_handler+0x7c>
   19006:	2302      	movs	r3, #2
   19008:	e7e8      	b.n	18fdc <bsd_os_application_irq_handler+0x7c>
   1900a:	2303      	movs	r3, #3
   1900c:	e7e6      	b.n	18fdc <bsd_os_application_irq_handler+0x7c>
   1900e:	2802      	cmp	r0, #2
   19010:	bf0a      	itet	eq
   19012:	2304      	moveq	r3, #4
   19014:	f804 8c04 	strbne.w	r8, [r4, #-4]
   19018:	f804 3c04 	strbeq.w	r3, [r4, #-4]
   1901c:	e7ae      	b.n	18f7c <bsd_os_application_irq_handler+0x1c>
   1901e:	2304      	movs	r3, #4
   19020:	e7dc      	b.n	18fdc <bsd_os_application_irq_handler+0x7c>
   19022:	2305      	movs	r3, #5
   19024:	e7da      	b.n	18fdc <bsd_os_application_irq_handler+0x7c>
   19026:	2306      	movs	r3, #6
   19028:	e7d8      	b.n	18fdc <bsd_os_application_irq_handler+0x7c>
   1902a:	2307      	movs	r3, #7
   1902c:	e7d6      	b.n	18fdc <bsd_os_application_irq_handler+0x7c>
   1902e:	2308      	movs	r3, #8
   19030:	e7d4      	b.n	18fdc <bsd_os_application_irq_handler+0x7c>
   19032:	bf00      	nop
   19034:	20020980 	.word	0x20020980
   19038:	20020844 	.word	0x20020844
   1903c:	200208e4 	.word	0x200208e4

00019040 <rpc_framework_init>:
   19040:	b508      	push	{r3, lr}
   19042:	22a0      	movs	r2, #160	; 0xa0
   19044:	2100      	movs	r1, #0
   19046:	4802      	ldr	r0, [pc, #8]	; (19050 <rpc_framework_init+0x10>)
   19048:	f008 fc84 	bl	21954 <memset>
   1904c:	2000      	movs	r0, #0
   1904e:	bd08      	pop	{r3, pc}
   19050:	20020844 	.word	0x20020844

00019054 <rpc_client_register>:
   19054:	8803      	ldrh	r3, [r0, #0]
   19056:	2b00      	cmp	r3, #0
   19058:	d045      	beq.n	190e6 <rpc_client_register+0x92>
   1905a:	6842      	ldr	r2, [r0, #4]
   1905c:	4601      	mov	r1, r0
   1905e:	2a00      	cmp	r2, #0
   19060:	d050      	beq.n	19104 <rpc_client_register+0xb0>
   19062:	4a30      	ldr	r2, [pc, #192]	; (19124 <rpc_client_register+0xd0>)
   19064:	8810      	ldrh	r0, [r2, #0]
   19066:	4283      	cmp	r3, r0
   19068:	d03d      	beq.n	190e6 <rpc_client_register+0x92>
   1906a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1906e:	8a14      	ldrh	r4, [r2, #16]
   19070:	42a3      	cmp	r3, r4
   19072:	d035      	beq.n	190e0 <rpc_client_register+0x8c>
   19074:	8c15      	ldrh	r5, [r2, #32]
   19076:	42ab      	cmp	r3, r5
   19078:	d032      	beq.n	190e0 <rpc_client_register+0x8c>
   1907a:	8e16      	ldrh	r6, [r2, #48]	; 0x30
   1907c:	42b3      	cmp	r3, r6
   1907e:	d02f      	beq.n	190e0 <rpc_client_register+0x8c>
   19080:	f8b2 7040 	ldrh.w	r7, [r2, #64]	; 0x40
   19084:	42bb      	cmp	r3, r7
   19086:	d02b      	beq.n	190e0 <rpc_client_register+0x8c>
   19088:	f8b2 c050 	ldrh.w	ip, [r2, #80]	; 0x50
   1908c:	4563      	cmp	r3, ip
   1908e:	d027      	beq.n	190e0 <rpc_client_register+0x8c>
   19090:	f8b2 e060 	ldrh.w	lr, [r2, #96]	; 0x60
   19094:	4573      	cmp	r3, lr
   19096:	d023      	beq.n	190e0 <rpc_client_register+0x8c>
   19098:	f8b2 8070 	ldrh.w	r8, [r2, #112]	; 0x70
   1909c:	4543      	cmp	r3, r8
   1909e:	d01f      	beq.n	190e0 <rpc_client_register+0x8c>
   190a0:	f8b2 9080 	ldrh.w	r9, [r2, #128]	; 0x80
   190a4:	454b      	cmp	r3, r9
   190a6:	d01b      	beq.n	190e0 <rpc_client_register+0x8c>
   190a8:	f8b2 a090 	ldrh.w	sl, [r2, #144]	; 0x90
   190ac:	4553      	cmp	r3, sl
   190ae:	d017      	beq.n	190e0 <rpc_client_register+0x8c>
   190b0:	b1e0      	cbz	r0, 190ec <rpc_client_register+0x98>
   190b2:	b35c      	cbz	r4, 1910c <rpc_client_register+0xb8>
   190b4:	b365      	cbz	r5, 19110 <rpc_client_register+0xbc>
   190b6:	b36e      	cbz	r6, 19114 <rpc_client_register+0xc0>
   190b8:	b377      	cbz	r7, 19118 <rpc_client_register+0xc4>
   190ba:	f1bc 0f00 	cmp.w	ip, #0
   190be:	d02d      	beq.n	1911c <rpc_client_register+0xc8>
   190c0:	f1be 0f00 	cmp.w	lr, #0
   190c4:	d020      	beq.n	19108 <rpc_client_register+0xb4>
   190c6:	f1b8 0f00 	cmp.w	r8, #0
   190ca:	d029      	beq.n	19120 <rpc_client_register+0xcc>
   190cc:	f1b9 0f00 	cmp.w	r9, #0
   190d0:	d00b      	beq.n	190ea <rpc_client_register+0x96>
   190d2:	2009      	movs	r0, #9
   190d4:	f1ba 0f00 	cmp.w	sl, #0
   190d8:	d008      	beq.n	190ec <rpc_client_register+0x98>
   190da:	2004      	movs	r0, #4
   190dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   190e0:	2007      	movs	r0, #7
   190e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   190e6:	2007      	movs	r0, #7
   190e8:	4770      	bx	lr
   190ea:	2008      	movs	r0, #8
   190ec:	0100      	lsls	r0, r0, #4
   190ee:	5213      	strh	r3, [r2, r0]
   190f0:	684b      	ldr	r3, [r1, #4]
   190f2:	4402      	add	r2, r0
   190f4:	6053      	str	r3, [r2, #4]
   190f6:	688b      	ldr	r3, [r1, #8]
   190f8:	2000      	movs	r0, #0
   190fa:	6093      	str	r3, [r2, #8]
   190fc:	68cb      	ldr	r3, [r1, #12]
   190fe:	60d3      	str	r3, [r2, #12]
   19100:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   19104:	200e      	movs	r0, #14
   19106:	4770      	bx	lr
   19108:	2006      	movs	r0, #6
   1910a:	e7ef      	b.n	190ec <rpc_client_register+0x98>
   1910c:	2001      	movs	r0, #1
   1910e:	e7ed      	b.n	190ec <rpc_client_register+0x98>
   19110:	2002      	movs	r0, #2
   19112:	e7eb      	b.n	190ec <rpc_client_register+0x98>
   19114:	2003      	movs	r0, #3
   19116:	e7e9      	b.n	190ec <rpc_client_register+0x98>
   19118:	2004      	movs	r0, #4
   1911a:	e7e7      	b.n	190ec <rpc_client_register+0x98>
   1911c:	2005      	movs	r0, #5
   1911e:	e7e5      	b.n	190ec <rpc_client_register+0x98>
   19120:	2007      	movs	r0, #7
   19122:	e7e3      	b.n	190ec <rpc_client_register+0x98>
   19124:	20020844 	.word	0x20020844

00019128 <rpc_transport_input>:
   19128:	b538      	push	{r3, r4, r5, lr}
   1912a:	4a82      	ldr	r2, [pc, #520]	; (19334 <rpc_transport_input+0x20c>)
   1912c:	680b      	ldr	r3, [r1, #0]
   1912e:	8810      	ldrh	r0, [r2, #0]
   19130:	b29b      	uxth	r3, r3
   19132:	4298      	cmp	r0, r3
   19134:	d027      	beq.n	19186 <rpc_transport_input+0x5e>
   19136:	8a10      	ldrh	r0, [r2, #16]
   19138:	4298      	cmp	r0, r3
   1913a:	d024      	beq.n	19186 <rpc_transport_input+0x5e>
   1913c:	8c10      	ldrh	r0, [r2, #32]
   1913e:	4298      	cmp	r0, r3
   19140:	d021      	beq.n	19186 <rpc_transport_input+0x5e>
   19142:	8e10      	ldrh	r0, [r2, #48]	; 0x30
   19144:	4298      	cmp	r0, r3
   19146:	d01e      	beq.n	19186 <rpc_transport_input+0x5e>
   19148:	f8b2 0040 	ldrh.w	r0, [r2, #64]	; 0x40
   1914c:	4298      	cmp	r0, r3
   1914e:	d01a      	beq.n	19186 <rpc_transport_input+0x5e>
   19150:	f8b2 0050 	ldrh.w	r0, [r2, #80]	; 0x50
   19154:	4298      	cmp	r0, r3
   19156:	d016      	beq.n	19186 <rpc_transport_input+0x5e>
   19158:	f8b2 0060 	ldrh.w	r0, [r2, #96]	; 0x60
   1915c:	4298      	cmp	r0, r3
   1915e:	d012      	beq.n	19186 <rpc_transport_input+0x5e>
   19160:	f8b2 0070 	ldrh.w	r0, [r2, #112]	; 0x70
   19164:	4298      	cmp	r0, r3
   19166:	d00e      	beq.n	19186 <rpc_transport_input+0x5e>
   19168:	f8b2 0080 	ldrh.w	r0, [r2, #128]	; 0x80
   1916c:	4298      	cmp	r0, r3
   1916e:	d00a      	beq.n	19186 <rpc_transport_input+0x5e>
   19170:	f8b2 2090 	ldrh.w	r2, [r2, #144]	; 0x90
   19174:	429a      	cmp	r2, r3
   19176:	d006      	beq.n	19186 <rpc_transport_input+0x5e>
   19178:	6888      	ldr	r0, [r1, #8]
   1917a:	b118      	cbz	r0, 19184 <rpc_transport_input+0x5c>
   1917c:	4b6e      	ldr	r3, [pc, #440]	; (19338 <rpc_transport_input+0x210>)
   1917e:	691b      	ldr	r3, [r3, #16]
   19180:	4798      	blx	r3
   19182:	2000      	movs	r0, #0
   19184:	bd38      	pop	{r3, r4, r5, pc}
   19186:	6888      	ldr	r0, [r1, #8]
   19188:	2800      	cmp	r0, #0
   1918a:	f000 8098 	beq.w	192be <rpc_transport_input+0x196>
   1918e:	4a6b      	ldr	r2, [pc, #428]	; (1933c <rpc_transport_input+0x214>)
   19190:	6814      	ldr	r4, [r2, #0]
   19192:	2c00      	cmp	r4, #0
   19194:	d03c      	beq.n	19210 <rpc_transport_input+0xe8>
   19196:	6894      	ldr	r4, [r2, #8]
   19198:	2c00      	cmp	r4, #0
   1919a:	f000 809a 	beq.w	192d2 <rpc_transport_input+0x1aa>
   1919e:	6914      	ldr	r4, [r2, #16]
   191a0:	2c00      	cmp	r4, #0
   191a2:	f000 809a 	beq.w	192da <rpc_transport_input+0x1b2>
   191a6:	6994      	ldr	r4, [r2, #24]
   191a8:	2c00      	cmp	r4, #0
   191aa:	f000 809a 	beq.w	192e2 <rpc_transport_input+0x1ba>
   191ae:	6a14      	ldr	r4, [r2, #32]
   191b0:	2c00      	cmp	r4, #0
   191b2:	f000 809a 	beq.w	192ea <rpc_transport_input+0x1c2>
   191b6:	6a94      	ldr	r4, [r2, #40]	; 0x28
   191b8:	2c00      	cmp	r4, #0
   191ba:	f000 8084 	beq.w	192c6 <rpc_transport_input+0x19e>
   191be:	6b14      	ldr	r4, [r2, #48]	; 0x30
   191c0:	2c00      	cmp	r4, #0
   191c2:	f000 8098 	beq.w	192f6 <rpc_transport_input+0x1ce>
   191c6:	6b94      	ldr	r4, [r2, #56]	; 0x38
   191c8:	2c00      	cmp	r4, #0
   191ca:	f000 8096 	beq.w	192fa <rpc_transport_input+0x1d2>
   191ce:	6c14      	ldr	r4, [r2, #64]	; 0x40
   191d0:	2c00      	cmp	r4, #0
   191d2:	f000 8096 	beq.w	19302 <rpc_transport_input+0x1da>
   191d6:	6c94      	ldr	r4, [r2, #72]	; 0x48
   191d8:	2c00      	cmp	r4, #0
   191da:	f000 8096 	beq.w	1930a <rpc_transport_input+0x1e2>
   191de:	6d14      	ldr	r4, [r2, #80]	; 0x50
   191e0:	2c00      	cmp	r4, #0
   191e2:	f000 8096 	beq.w	19312 <rpc_transport_input+0x1ea>
   191e6:	6d94      	ldr	r4, [r2, #88]	; 0x58
   191e8:	2c00      	cmp	r4, #0
   191ea:	f000 8098 	beq.w	1931e <rpc_transport_input+0x1f6>
   191ee:	6e14      	ldr	r4, [r2, #96]	; 0x60
   191f0:	2c00      	cmp	r4, #0
   191f2:	f000 8098 	beq.w	19326 <rpc_transport_input+0x1fe>
   191f6:	6e94      	ldr	r4, [r2, #104]	; 0x68
   191f8:	2c00      	cmp	r4, #0
   191fa:	f000 8096 	beq.w	1932a <rpc_transport_input+0x202>
   191fe:	6f14      	ldr	r4, [r2, #112]	; 0x70
   19200:	2c00      	cmp	r4, #0
   19202:	f000 8094 	beq.w	1932e <rpc_transport_input+0x206>
   19206:	6f94      	ldr	r4, [r2, #120]	; 0x78
   19208:	b10c      	cbz	r4, 1920e <rpc_transport_input+0xe6>
   1920a:	2001      	movs	r0, #1
   1920c:	bd38      	pop	{r3, r4, r5, pc}
   1920e:	240f      	movs	r4, #15
   19210:	eb02 05c4 	add.w	r5, r2, r4, lsl #3
   19214:	f842 0034 	str.w	r0, [r2, r4, lsl #3]
   19218:	80ab      	strh	r3, [r5, #4]
   1921a:	4b49      	ldr	r3, [pc, #292]	; (19340 <rpc_transport_input+0x218>)
   1921c:	781a      	ldrb	r2, [r3, #0]
   1921e:	2a01      	cmp	r2, #1
   19220:	d053      	beq.n	192ca <rpc_transport_input+0x1a2>
   19222:	7a1a      	ldrb	r2, [r3, #8]
   19224:	2a01      	cmp	r2, #1
   19226:	d041      	beq.n	192ac <rpc_transport_input+0x184>
   19228:	7c1a      	ldrb	r2, [r3, #16]
   1922a:	2a01      	cmp	r2, #1
   1922c:	d04f      	beq.n	192ce <rpc_transport_input+0x1a6>
   1922e:	7e1a      	ldrb	r2, [r3, #24]
   19230:	2a01      	cmp	r2, #1
   19232:	d050      	beq.n	192d6 <rpc_transport_input+0x1ae>
   19234:	f893 2020 	ldrb.w	r2, [r3, #32]
   19238:	2a01      	cmp	r2, #1
   1923a:	d050      	beq.n	192de <rpc_transport_input+0x1b6>
   1923c:	f893 2028 	ldrb.w	r2, [r3, #40]	; 0x28
   19240:	2a01      	cmp	r2, #1
   19242:	d050      	beq.n	192e6 <rpc_transport_input+0x1be>
   19244:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
   19248:	2a01      	cmp	r2, #1
   1924a:	d03a      	beq.n	192c2 <rpc_transport_input+0x19a>
   1924c:	f893 2038 	ldrb.w	r2, [r3, #56]	; 0x38
   19250:	2a01      	cmp	r2, #1
   19252:	d04c      	beq.n	192ee <rpc_transport_input+0x1c6>
   19254:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
   19258:	2a01      	cmp	r2, #1
   1925a:	d04a      	beq.n	192f2 <rpc_transport_input+0x1ca>
   1925c:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
   19260:	2a01      	cmp	r2, #1
   19262:	d04c      	beq.n	192fe <rpc_transport_input+0x1d6>
   19264:	f893 2050 	ldrb.w	r2, [r3, #80]	; 0x50
   19268:	2a01      	cmp	r2, #1
   1926a:	d04c      	beq.n	19306 <rpc_transport_input+0x1de>
   1926c:	f893 2058 	ldrb.w	r2, [r3, #88]	; 0x58
   19270:	2a01      	cmp	r2, #1
   19272:	d04c      	beq.n	1930e <rpc_transport_input+0x1e6>
   19274:	f893 2060 	ldrb.w	r2, [r3, #96]	; 0x60
   19278:	2a01      	cmp	r2, #1
   1927a:	d04c      	beq.n	19316 <rpc_transport_input+0x1ee>
   1927c:	f893 2068 	ldrb.w	r2, [r3, #104]	; 0x68
   19280:	2a01      	cmp	r2, #1
   19282:	d04a      	beq.n	1931a <rpc_transport_input+0x1f2>
   19284:	f893 2070 	ldrb.w	r2, [r3, #112]	; 0x70
   19288:	2a01      	cmp	r2, #1
   1928a:	d04a      	beq.n	19322 <rpc_transport_input+0x1fa>
   1928c:	f893 2078 	ldrb.w	r2, [r3, #120]	; 0x78
   19290:	2a01      	cmp	r2, #1
   19292:	d00a      	beq.n	192aa <rpc_transport_input+0x182>
   19294:	2c10      	cmp	r4, #16
   19296:	d0b8      	beq.n	1920a <rpc_transport_input+0xe2>
   19298:	2200      	movs	r2, #0
   1929a:	4b28      	ldr	r3, [pc, #160]	; (1933c <rpc_transport_input+0x214>)
   1929c:	2001      	movs	r0, #1
   1929e:	eb03 01c4 	add.w	r1, r3, r4, lsl #3
   192a2:	808a      	strh	r2, [r1, #4]
   192a4:	f843 2034 	str.w	r2, [r3, r4, lsl #3]
   192a8:	bd38      	pop	{r3, r4, r5, pc}
   192aa:	220f      	movs	r2, #15
   192ac:	2402      	movs	r4, #2
   192ae:	eb03 00c2 	add.w	r0, r3, r2, lsl #3
   192b2:	f803 4032 	strb.w	r4, [r3, r2, lsl #3]
   192b6:	6041      	str	r1, [r0, #4]
   192b8:	f7f7 ffc8 	bl	1124c <bsd_os_application_irq_set>
   192bc:	e7a5      	b.n	1920a <rpc_transport_input+0xe2>
   192be:	2410      	movs	r4, #16
   192c0:	e7ab      	b.n	1921a <rpc_transport_input+0xf2>
   192c2:	2206      	movs	r2, #6
   192c4:	e7f2      	b.n	192ac <rpc_transport_input+0x184>
   192c6:	2405      	movs	r4, #5
   192c8:	e7a2      	b.n	19210 <rpc_transport_input+0xe8>
   192ca:	2200      	movs	r2, #0
   192cc:	e7ee      	b.n	192ac <rpc_transport_input+0x184>
   192ce:	2202      	movs	r2, #2
   192d0:	e7ec      	b.n	192ac <rpc_transport_input+0x184>
   192d2:	2401      	movs	r4, #1
   192d4:	e79c      	b.n	19210 <rpc_transport_input+0xe8>
   192d6:	2203      	movs	r2, #3
   192d8:	e7e8      	b.n	192ac <rpc_transport_input+0x184>
   192da:	2402      	movs	r4, #2
   192dc:	e798      	b.n	19210 <rpc_transport_input+0xe8>
   192de:	2204      	movs	r2, #4
   192e0:	e7e4      	b.n	192ac <rpc_transport_input+0x184>
   192e2:	2403      	movs	r4, #3
   192e4:	e794      	b.n	19210 <rpc_transport_input+0xe8>
   192e6:	2205      	movs	r2, #5
   192e8:	e7e0      	b.n	192ac <rpc_transport_input+0x184>
   192ea:	2404      	movs	r4, #4
   192ec:	e790      	b.n	19210 <rpc_transport_input+0xe8>
   192ee:	2207      	movs	r2, #7
   192f0:	e7dc      	b.n	192ac <rpc_transport_input+0x184>
   192f2:	2208      	movs	r2, #8
   192f4:	e7da      	b.n	192ac <rpc_transport_input+0x184>
   192f6:	2406      	movs	r4, #6
   192f8:	e78a      	b.n	19210 <rpc_transport_input+0xe8>
   192fa:	2407      	movs	r4, #7
   192fc:	e788      	b.n	19210 <rpc_transport_input+0xe8>
   192fe:	2209      	movs	r2, #9
   19300:	e7d4      	b.n	192ac <rpc_transport_input+0x184>
   19302:	2408      	movs	r4, #8
   19304:	e784      	b.n	19210 <rpc_transport_input+0xe8>
   19306:	220a      	movs	r2, #10
   19308:	e7d0      	b.n	192ac <rpc_transport_input+0x184>
   1930a:	2409      	movs	r4, #9
   1930c:	e780      	b.n	19210 <rpc_transport_input+0xe8>
   1930e:	220b      	movs	r2, #11
   19310:	e7cc      	b.n	192ac <rpc_transport_input+0x184>
   19312:	240a      	movs	r4, #10
   19314:	e77c      	b.n	19210 <rpc_transport_input+0xe8>
   19316:	220c      	movs	r2, #12
   19318:	e7c8      	b.n	192ac <rpc_transport_input+0x184>
   1931a:	220d      	movs	r2, #13
   1931c:	e7c6      	b.n	192ac <rpc_transport_input+0x184>
   1931e:	240b      	movs	r4, #11
   19320:	e776      	b.n	19210 <rpc_transport_input+0xe8>
   19322:	220e      	movs	r2, #14
   19324:	e7c2      	b.n	192ac <rpc_transport_input+0x184>
   19326:	240c      	movs	r4, #12
   19328:	e772      	b.n	19210 <rpc_transport_input+0xe8>
   1932a:	240d      	movs	r4, #13
   1932c:	e770      	b.n	19210 <rpc_transport_input+0xe8>
   1932e:	240e      	movs	r4, #14
   19330:	e76e      	b.n	19210 <rpc_transport_input+0xe8>
   19332:	bf00      	nop
   19334:	20020844 	.word	0x20020844
   19338:	200208e4 	.word	0x200208e4
   1933c:	200208fc 	.word	0x200208fc
   19340:	2002097c 	.word	0x2002097c

00019344 <rpc_transport_register>:
   19344:	b4f0      	push	{r4, r5, r6, r7}
   19346:	2900      	cmp	r1, #0
   19348:	d052      	beq.n	193f0 <rpc_transport_register+0xac>
   1934a:	2800      	cmp	r0, #0
   1934c:	d050      	beq.n	193f0 <rpc_transport_register+0xac>
   1934e:	6883      	ldr	r3, [r0, #8]
   19350:	2b00      	cmp	r3, #0
   19352:	d04d      	beq.n	193f0 <rpc_transport_register+0xac>
   19354:	6903      	ldr	r3, [r0, #16]
   19356:	2b00      	cmp	r3, #0
   19358:	d04a      	beq.n	193f0 <rpc_transport_register+0xac>
   1935a:	6843      	ldr	r3, [r0, #4]
   1935c:	2b00      	cmp	r3, #0
   1935e:	d047      	beq.n	193f0 <rpc_transport_register+0xac>
   19360:	68c3      	ldr	r3, [r0, #12]
   19362:	2b00      	cmp	r3, #0
   19364:	d044      	beq.n	193f0 <rpc_transport_register+0xac>
   19366:	6803      	ldr	r3, [r0, #0]
   19368:	2b00      	cmp	r3, #0
   1936a:	d041      	beq.n	193f0 <rpc_transport_register+0xac>
   1936c:	6943      	ldr	r3, [r0, #20]
   1936e:	2b00      	cmp	r3, #0
   19370:	d03e      	beq.n	193f0 <rpc_transport_register+0xac>
   19372:	2601      	movs	r6, #1
   19374:	2500      	movs	r5, #0
   19376:	4604      	mov	r4, r0
   19378:	460f      	mov	r7, r1
   1937a:	4a1f      	ldr	r2, [pc, #124]	; (193f8 <rpc_transport_register+0xb4>)
   1937c:	4b1f      	ldr	r3, [pc, #124]	; (193fc <rpc_transport_register+0xb8>)
   1937e:	f8df c080 	ldr.w	ip, [pc, #128]	; 19400 <rpc_transport_register+0xbc>
   19382:	7416      	strb	r6, [r2, #16]
   19384:	7616      	strb	r6, [r2, #24]
   19386:	f882 6020 	strb.w	r6, [r2, #32]
   1938a:	f882 6028 	strb.w	r6, [r2, #40]	; 0x28
   1938e:	f882 6030 	strb.w	r6, [r2, #48]	; 0x30
   19392:	f882 6038 	strb.w	r6, [r2, #56]	; 0x38
   19396:	f882 6040 	strb.w	r6, [r2, #64]	; 0x40
   1939a:	f882 6048 	strb.w	r6, [r2, #72]	; 0x48
   1939e:	f882 6050 	strb.w	r6, [r2, #80]	; 0x50
   193a2:	f882 6058 	strb.w	r6, [r2, #88]	; 0x58
   193a6:	f882 6060 	strb.w	r6, [r2, #96]	; 0x60
   193aa:	f882 6068 	strb.w	r6, [r2, #104]	; 0x68
   193ae:	f882 6070 	strb.w	r6, [r2, #112]	; 0x70
   193b2:	f882 6078 	strb.w	r6, [r2, #120]	; 0x78
   193b6:	611d      	str	r5, [r3, #16]
   193b8:	619d      	str	r5, [r3, #24]
   193ba:	621d      	str	r5, [r3, #32]
   193bc:	629d      	str	r5, [r3, #40]	; 0x28
   193be:	631d      	str	r5, [r3, #48]	; 0x30
   193c0:	639d      	str	r5, [r3, #56]	; 0x38
   193c2:	641d      	str	r5, [r3, #64]	; 0x40
   193c4:	649d      	str	r5, [r3, #72]	; 0x48
   193c6:	651d      	str	r5, [r3, #80]	; 0x50
   193c8:	659d      	str	r5, [r3, #88]	; 0x58
   193ca:	661d      	str	r5, [r3, #96]	; 0x60
   193cc:	669d      	str	r5, [r3, #104]	; 0x68
   193ce:	671d      	str	r5, [r3, #112]	; 0x70
   193d0:	679d      	str	r5, [r3, #120]	; 0x78
   193d2:	7016      	strb	r6, [r2, #0]
   193d4:	7216      	strb	r6, [r2, #8]
   193d6:	601d      	str	r5, [r3, #0]
   193d8:	609d      	str	r5, [r3, #8]
   193da:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   193dc:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   193e0:	e894 0003 	ldmia.w	r4, {r0, r1}
   193e4:	e88c 0003 	stmia.w	ip, {r0, r1}
   193e8:	603e      	str	r6, [r7, #0]
   193ea:	4628      	mov	r0, r5
   193ec:	bcf0      	pop	{r4, r5, r6, r7}
   193ee:	4770      	bx	lr
   193f0:	250e      	movs	r5, #14
   193f2:	4628      	mov	r0, r5
   193f4:	bcf0      	pop	{r4, r5, r6, r7}
   193f6:	4770      	bx	lr
   193f8:	2002097c 	.word	0x2002097c
   193fc:	200208fc 	.word	0x200208fc
   19400:	200208e4 	.word	0x200208e4

00019404 <rpc_transport_unregister>:
   19404:	2800      	cmp	r0, #0
   19406:	d03a      	beq.n	1947e <rpc_transport_unregister+0x7a>
   19408:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1940c:	4680      	mov	r8, r0
   1940e:	4c1d      	ldr	r4, [pc, #116]	; (19484 <rpc_transport_unregister+0x80>)
   19410:	f104 05a0 	add.w	r5, r4, #160	; 0xa0
   19414:	68a3      	ldr	r3, [r4, #8]
   19416:	3410      	adds	r4, #16
   19418:	b103      	cbz	r3, 1941c <rpc_transport_unregister+0x18>
   1941a:	4798      	blx	r3
   1941c:	42ac      	cmp	r4, r5
   1941e:	d1f9      	bne.n	19414 <rpc_transport_unregister+0x10>
   19420:	f04f 0901 	mov.w	r9, #1
   19424:	2600      	movs	r6, #0
   19426:	4c18      	ldr	r4, [pc, #96]	; (19488 <rpc_transport_unregister+0x84>)
   19428:	4d18      	ldr	r5, [pc, #96]	; (1948c <rpc_transport_unregister+0x88>)
   1942a:	f8df a064 	ldr.w	sl, [pc, #100]	; 19490 <rpc_transport_unregister+0x8c>
   1942e:	f104 0780 	add.w	r7, r4, #128	; 0x80
   19432:	f814 3c04 	ldrb.w	r3, [r4, #-4]
   19436:	2b01      	cmp	r3, #1
   19438:	d005      	beq.n	19446 <rpc_transport_unregister+0x42>
   1943a:	f8da 300c 	ldr.w	r3, [sl, #12]
   1943e:	6820      	ldr	r0, [r4, #0]
   19440:	4798      	blx	r3
   19442:	f804 9c04 	strb.w	r9, [r4, #-4]
   19446:	f855 0c04 	ldr.w	r0, [r5, #-4]
   1944a:	3408      	adds	r4, #8
   1944c:	b128      	cbz	r0, 1945a <rpc_transport_unregister+0x56>
   1944e:	f8da 3010 	ldr.w	r3, [sl, #16]
   19452:	4798      	blx	r3
   19454:	802e      	strh	r6, [r5, #0]
   19456:	f845 6c04 	str.w	r6, [r5, #-4]
   1945a:	42bc      	cmp	r4, r7
   1945c:	f105 0508 	add.w	r5, r5, #8
   19460:	d1e7      	bne.n	19432 <rpc_transport_unregister+0x2e>
   19462:	f8d8 0000 	ldr.w	r0, [r8]
   19466:	2218      	movs	r2, #24
   19468:	3801      	subs	r0, #1
   1946a:	eb00 0040 	add.w	r0, r0, r0, lsl #1
   1946e:	eb0a 00c0 	add.w	r0, sl, r0, lsl #3
   19472:	2100      	movs	r1, #0
   19474:	f008 fa6e 	bl	21954 <memset>
   19478:	2000      	movs	r0, #0
   1947a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1947e:	200e      	movs	r0, #14
   19480:	4770      	bx	lr
   19482:	bf00      	nop
   19484:	20020844 	.word	0x20020844
   19488:	20020980 	.word	0x20020980
   1948c:	20020900 	.word	0x20020900
   19490:	200208e4 	.word	0x200208e4

00019494 <rpc_message_send>:
   19494:	b168      	cbz	r0, 194b2 <rpc_message_send+0x1e>
   19496:	b171      	cbz	r1, 194b6 <rpc_message_send+0x22>
   19498:	4a09      	ldr	r2, [pc, #36]	; (194c0 <rpc_message_send+0x2c>)
   1949a:	6853      	ldr	r3, [r2, #4]
   1949c:	b16b      	cbz	r3, 194ba <rpc_message_send+0x26>
   1949e:	684b      	ldr	r3, [r1, #4]
   194a0:	8008      	strh	r0, [r1, #0]
   194a2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
   194a6:	f043 0302 	orr.w	r3, r3, #2
   194aa:	6812      	ldr	r2, [r2, #0]
   194ac:	604b      	str	r3, [r1, #4]
   194ae:	4608      	mov	r0, r1
   194b0:	4710      	bx	r2
   194b2:	2007      	movs	r0, #7
   194b4:	4770      	bx	lr
   194b6:	200e      	movs	r0, #14
   194b8:	4770      	bx	lr
   194ba:	2008      	movs	r0, #8
   194bc:	4770      	bx	lr
   194be:	bf00      	nop
   194c0:	200208e4 	.word	0x200208e4

000194c4 <rpc_message_alloc>:
   194c4:	b35a      	cbz	r2, 1951e <rpc_message_alloc+0x5a>
   194c6:	b330      	cbz	r0, 19516 <rpc_message_alloc+0x52>
   194c8:	2300      	movs	r3, #0
   194ca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   194ce:	4f15      	ldr	r7, [pc, #84]	; (19524 <rpc_message_alloc+0x60>)
   194d0:	6013      	str	r3, [r2, #0]
   194d2:	687b      	ldr	r3, [r7, #4]
   194d4:	b30b      	cbz	r3, 1951a <rpc_message_alloc+0x56>
   194d6:	4615      	mov	r5, r2
   194d8:	460c      	mov	r4, r1
   194da:	4606      	mov	r6, r0
   194dc:	b959      	cbnz	r1, 194f6 <rpc_message_alloc+0x32>
   194de:	4798      	blx	r3
   194e0:	4603      	mov	r3, r0
   194e2:	b1a8      	cbz	r0, 19510 <rpc_message_alloc+0x4c>
   194e4:	46a0      	mov	r8, r4
   194e6:	60dc      	str	r4, [r3, #12]
   194e8:	f8c3 8008 	str.w	r8, [r3, #8]
   194ec:	801e      	strh	r6, [r3, #0]
   194ee:	602b      	str	r3, [r5, #0]
   194f0:	2000      	movs	r0, #0
   194f2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   194f6:	68bb      	ldr	r3, [r7, #8]
   194f8:	4608      	mov	r0, r1
   194fa:	4798      	blx	r3
   194fc:	4680      	mov	r8, r0
   194fe:	b138      	cbz	r0, 19510 <rpc_message_alloc+0x4c>
   19500:	687b      	ldr	r3, [r7, #4]
   19502:	4798      	blx	r3
   19504:	4603      	mov	r3, r0
   19506:	2800      	cmp	r0, #0
   19508:	d1ed      	bne.n	194e6 <rpc_message_alloc+0x22>
   1950a:	693b      	ldr	r3, [r7, #16]
   1950c:	4640      	mov	r0, r8
   1950e:	4798      	blx	r3
   19510:	2004      	movs	r0, #4
   19512:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   19516:	2007      	movs	r0, #7
   19518:	4770      	bx	lr
   1951a:	2008      	movs	r0, #8
   1951c:	e7f9      	b.n	19512 <rpc_message_alloc+0x4e>
   1951e:	200e      	movs	r0, #14
   19520:	4770      	bx	lr
   19522:	bf00      	nop
   19524:	200208e4 	.word	0x200208e4

00019528 <rpc_message_free>:
   19528:	2800      	cmp	r0, #0
   1952a:	f000 808c 	beq.w	19646 <rpc_message_free+0x11e>
   1952e:	2900      	cmp	r1, #0
   19530:	f000 80e9 	beq.w	19706 <rpc_message_free+0x1de>
   19534:	b538      	push	{r3, r4, r5, lr}
   19536:	4a83      	ldr	r2, [pc, #524]	; (19744 <rpc_message_free+0x21c>)
   19538:	6853      	ldr	r3, [r2, #4]
   1953a:	2b00      	cmp	r3, #0
   1953c:	f000 8085 	beq.w	1964a <rpc_message_free+0x122>
   19540:	4c81      	ldr	r4, [pc, #516]	; (19748 <rpc_message_free+0x220>)
   19542:	4608      	mov	r0, r1
   19544:	6863      	ldr	r3, [r4, #4]
   19546:	4299      	cmp	r1, r3
   19548:	f000 8085 	beq.w	19656 <rpc_message_free+0x12e>
   1954c:	68e3      	ldr	r3, [r4, #12]
   1954e:	4298      	cmp	r0, r3
   19550:	f000 808e 	beq.w	19670 <rpc_message_free+0x148>
   19554:	6963      	ldr	r3, [r4, #20]
   19556:	4298      	cmp	r0, r3
   19558:	f000 8090 	beq.w	1967c <rpc_message_free+0x154>
   1955c:	69e3      	ldr	r3, [r4, #28]
   1955e:	4298      	cmp	r0, r3
   19560:	f000 8092 	beq.w	19688 <rpc_message_free+0x160>
   19564:	6a63      	ldr	r3, [r4, #36]	; 0x24
   19566:	4298      	cmp	r0, r3
   19568:	f000 8095 	beq.w	19696 <rpc_message_free+0x16e>
   1956c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   1956e:	4298      	cmp	r0, r3
   19570:	f000 8098 	beq.w	196a4 <rpc_message_free+0x17c>
   19574:	6b63      	ldr	r3, [r4, #52]	; 0x34
   19576:	4298      	cmp	r0, r3
   19578:	f000 809b 	beq.w	196b2 <rpc_message_free+0x18a>
   1957c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   1957e:	4298      	cmp	r0, r3
   19580:	f000 809e 	beq.w	196c0 <rpc_message_free+0x198>
   19584:	6c63      	ldr	r3, [r4, #68]	; 0x44
   19586:	4298      	cmp	r0, r3
   19588:	f000 80a1 	beq.w	196ce <rpc_message_free+0x1a6>
   1958c:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
   1958e:	4298      	cmp	r0, r3
   19590:	f000 80a4 	beq.w	196dc <rpc_message_free+0x1b4>
   19594:	6d63      	ldr	r3, [r4, #84]	; 0x54
   19596:	4298      	cmp	r0, r3
   19598:	f000 80a7 	beq.w	196ea <rpc_message_free+0x1c2>
   1959c:	6de3      	ldr	r3, [r4, #92]	; 0x5c
   1959e:	4298      	cmp	r0, r3
   195a0:	f000 80aa 	beq.w	196f8 <rpc_message_free+0x1d0>
   195a4:	6e63      	ldr	r3, [r4, #100]	; 0x64
   195a6:	4298      	cmp	r0, r3
   195a8:	f000 80af 	beq.w	1970a <rpc_message_free+0x1e2>
   195ac:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
   195ae:	4298      	cmp	r0, r3
   195b0:	f000 80b2 	beq.w	19718 <rpc_message_free+0x1f0>
   195b4:	6f63      	ldr	r3, [r4, #116]	; 0x74
   195b6:	4298      	cmp	r0, r3
   195b8:	f000 80b5 	beq.w	19726 <rpc_message_free+0x1fe>
   195bc:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
   195be:	4283      	cmp	r3, r0
   195c0:	f000 80b8 	beq.w	19734 <rpc_message_free+0x20c>
   195c4:	68d3      	ldr	r3, [r2, #12]
   195c6:	4798      	blx	r3
   195c8:	7823      	ldrb	r3, [r4, #0]
   195ca:	2b04      	cmp	r3, #4
   195cc:	d03f      	beq.n	1964e <rpc_message_free+0x126>
   195ce:	7a23      	ldrb	r3, [r4, #8]
   195d0:	2b04      	cmp	r3, #4
   195d2:	d03c      	beq.n	1964e <rpc_message_free+0x126>
   195d4:	7c23      	ldrb	r3, [r4, #16]
   195d6:	2b04      	cmp	r3, #4
   195d8:	d039      	beq.n	1964e <rpc_message_free+0x126>
   195da:	7e23      	ldrb	r3, [r4, #24]
   195dc:	2b04      	cmp	r3, #4
   195de:	d036      	beq.n	1964e <rpc_message_free+0x126>
   195e0:	f894 3020 	ldrb.w	r3, [r4, #32]
   195e4:	2b04      	cmp	r3, #4
   195e6:	d032      	beq.n	1964e <rpc_message_free+0x126>
   195e8:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
   195ec:	2b04      	cmp	r3, #4
   195ee:	d02e      	beq.n	1964e <rpc_message_free+0x126>
   195f0:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
   195f4:	2b04      	cmp	r3, #4
   195f6:	d02a      	beq.n	1964e <rpc_message_free+0x126>
   195f8:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
   195fc:	2b04      	cmp	r3, #4
   195fe:	d026      	beq.n	1964e <rpc_message_free+0x126>
   19600:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
   19604:	2b04      	cmp	r3, #4
   19606:	d022      	beq.n	1964e <rpc_message_free+0x126>
   19608:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
   1960c:	2b04      	cmp	r3, #4
   1960e:	d01e      	beq.n	1964e <rpc_message_free+0x126>
   19610:	f894 3050 	ldrb.w	r3, [r4, #80]	; 0x50
   19614:	2b04      	cmp	r3, #4
   19616:	d01a      	beq.n	1964e <rpc_message_free+0x126>
   19618:	f894 3058 	ldrb.w	r3, [r4, #88]	; 0x58
   1961c:	2b04      	cmp	r3, #4
   1961e:	d016      	beq.n	1964e <rpc_message_free+0x126>
   19620:	f894 3060 	ldrb.w	r3, [r4, #96]	; 0x60
   19624:	2b04      	cmp	r3, #4
   19626:	d012      	beq.n	1964e <rpc_message_free+0x126>
   19628:	f894 3068 	ldrb.w	r3, [r4, #104]	; 0x68
   1962c:	2b04      	cmp	r3, #4
   1962e:	d00e      	beq.n	1964e <rpc_message_free+0x126>
   19630:	f894 3070 	ldrb.w	r3, [r4, #112]	; 0x70
   19634:	2b04      	cmp	r3, #4
   19636:	d00a      	beq.n	1964e <rpc_message_free+0x126>
   19638:	f894 3078 	ldrb.w	r3, [r4, #120]	; 0x78
   1963c:	2b04      	cmp	r3, #4
   1963e:	bf18      	it	ne
   19640:	2000      	movne	r0, #0
   19642:	d004      	beq.n	1964e <rpc_message_free+0x126>
   19644:	bd38      	pop	{r3, r4, r5, pc}
   19646:	2007      	movs	r0, #7
   19648:	4770      	bx	lr
   1964a:	2008      	movs	r0, #8
   1964c:	bd38      	pop	{r3, r4, r5, pc}
   1964e:	f7f7 fdfd 	bl	1124c <bsd_os_application_irq_set>
   19652:	2000      	movs	r0, #0
   19654:	bd38      	pop	{r3, r4, r5, pc}
   19656:	7821      	ldrb	r1, [r4, #0]
   19658:	2903      	cmp	r1, #3
   1965a:	f47f af77 	bne.w	1954c <rpc_message_free+0x24>
   1965e:	2100      	movs	r1, #0
   19660:	2501      	movs	r5, #1
   19662:	4618      	mov	r0, r3
   19664:	68d2      	ldr	r2, [r2, #12]
   19666:	f804 5031 	strb.w	r5, [r4, r1, lsl #3]
   1966a:	4790      	blx	r2
   1966c:	2000      	movs	r0, #0
   1966e:	bd38      	pop	{r3, r4, r5, pc}
   19670:	7a21      	ldrb	r1, [r4, #8]
   19672:	2903      	cmp	r1, #3
   19674:	f47f af6e 	bne.w	19554 <rpc_message_free+0x2c>
   19678:	2101      	movs	r1, #1
   1967a:	e7f1      	b.n	19660 <rpc_message_free+0x138>
   1967c:	7c21      	ldrb	r1, [r4, #16]
   1967e:	2903      	cmp	r1, #3
   19680:	f47f af6c 	bne.w	1955c <rpc_message_free+0x34>
   19684:	2102      	movs	r1, #2
   19686:	e7eb      	b.n	19660 <rpc_message_free+0x138>
   19688:	7e21      	ldrb	r1, [r4, #24]
   1968a:	2903      	cmp	r1, #3
   1968c:	d0e8      	beq.n	19660 <rpc_message_free+0x138>
   1968e:	6a63      	ldr	r3, [r4, #36]	; 0x24
   19690:	4298      	cmp	r0, r3
   19692:	f47f af6b 	bne.w	1956c <rpc_message_free+0x44>
   19696:	f894 1020 	ldrb.w	r1, [r4, #32]
   1969a:	2903      	cmp	r1, #3
   1969c:	f47f af66 	bne.w	1956c <rpc_message_free+0x44>
   196a0:	2104      	movs	r1, #4
   196a2:	e7dd      	b.n	19660 <rpc_message_free+0x138>
   196a4:	f894 1028 	ldrb.w	r1, [r4, #40]	; 0x28
   196a8:	2903      	cmp	r1, #3
   196aa:	f47f af63 	bne.w	19574 <rpc_message_free+0x4c>
   196ae:	2105      	movs	r1, #5
   196b0:	e7d6      	b.n	19660 <rpc_message_free+0x138>
   196b2:	f894 1030 	ldrb.w	r1, [r4, #48]	; 0x30
   196b6:	2903      	cmp	r1, #3
   196b8:	f47f af60 	bne.w	1957c <rpc_message_free+0x54>
   196bc:	2106      	movs	r1, #6
   196be:	e7cf      	b.n	19660 <rpc_message_free+0x138>
   196c0:	f894 1038 	ldrb.w	r1, [r4, #56]	; 0x38
   196c4:	2903      	cmp	r1, #3
   196c6:	f47f af5d 	bne.w	19584 <rpc_message_free+0x5c>
   196ca:	2107      	movs	r1, #7
   196cc:	e7c8      	b.n	19660 <rpc_message_free+0x138>
   196ce:	f894 1040 	ldrb.w	r1, [r4, #64]	; 0x40
   196d2:	2903      	cmp	r1, #3
   196d4:	f47f af5a 	bne.w	1958c <rpc_message_free+0x64>
   196d8:	2108      	movs	r1, #8
   196da:	e7c1      	b.n	19660 <rpc_message_free+0x138>
   196dc:	f894 1048 	ldrb.w	r1, [r4, #72]	; 0x48
   196e0:	2903      	cmp	r1, #3
   196e2:	f47f af57 	bne.w	19594 <rpc_message_free+0x6c>
   196e6:	2109      	movs	r1, #9
   196e8:	e7ba      	b.n	19660 <rpc_message_free+0x138>
   196ea:	f894 1050 	ldrb.w	r1, [r4, #80]	; 0x50
   196ee:	2903      	cmp	r1, #3
   196f0:	f47f af54 	bne.w	1959c <rpc_message_free+0x74>
   196f4:	210a      	movs	r1, #10
   196f6:	e7b3      	b.n	19660 <rpc_message_free+0x138>
   196f8:	f894 1058 	ldrb.w	r1, [r4, #88]	; 0x58
   196fc:	2903      	cmp	r1, #3
   196fe:	f47f af51 	bne.w	195a4 <rpc_message_free+0x7c>
   19702:	210b      	movs	r1, #11
   19704:	e7ac      	b.n	19660 <rpc_message_free+0x138>
   19706:	200e      	movs	r0, #14
   19708:	4770      	bx	lr
   1970a:	f894 1060 	ldrb.w	r1, [r4, #96]	; 0x60
   1970e:	2903      	cmp	r1, #3
   19710:	f47f af4c 	bne.w	195ac <rpc_message_free+0x84>
   19714:	210c      	movs	r1, #12
   19716:	e7a3      	b.n	19660 <rpc_message_free+0x138>
   19718:	f894 1068 	ldrb.w	r1, [r4, #104]	; 0x68
   1971c:	2903      	cmp	r1, #3
   1971e:	f47f af49 	bne.w	195b4 <rpc_message_free+0x8c>
   19722:	210d      	movs	r1, #13
   19724:	e79c      	b.n	19660 <rpc_message_free+0x138>
   19726:	f894 1070 	ldrb.w	r1, [r4, #112]	; 0x70
   1972a:	2903      	cmp	r1, #3
   1972c:	f47f af46 	bne.w	195bc <rpc_message_free+0x94>
   19730:	210e      	movs	r1, #14
   19732:	e795      	b.n	19660 <rpc_message_free+0x138>
   19734:	f894 3078 	ldrb.w	r3, [r4, #120]	; 0x78
   19738:	2b03      	cmp	r3, #3
   1973a:	f47f af43 	bne.w	195c4 <rpc_message_free+0x9c>
   1973e:	4603      	mov	r3, r0
   19740:	210f      	movs	r1, #15
   19742:	e78d      	b.n	19660 <rpc_message_free+0x138>
   19744:	200208e4 	.word	0x200208e4
   19748:	2002097c 	.word	0x2002097c

0001974c <rpc_message_data_free>:
   1974c:	2800      	cmp	r0, #0
   1974e:	f000 8091 	beq.w	19874 <rpc_message_data_free+0x128>
   19752:	2900      	cmp	r1, #0
   19754:	f000 80e4 	beq.w	19920 <rpc_message_data_free+0x1d4>
   19758:	b538      	push	{r3, r4, r5, lr}
   1975a:	4a81      	ldr	r2, [pc, #516]	; (19960 <rpc_message_data_free+0x214>)
   1975c:	6853      	ldr	r3, [r2, #4]
   1975e:	2b00      	cmp	r3, #0
   19760:	f000 808a 	beq.w	19878 <rpc_message_data_free+0x12c>
   19764:	4b7f      	ldr	r3, [pc, #508]	; (19964 <rpc_message_data_free+0x218>)
   19766:	681c      	ldr	r4, [r3, #0]
   19768:	42a1      	cmp	r1, r4
   1976a:	f000 8087 	beq.w	1987c <rpc_message_data_free+0x130>
   1976e:	689c      	ldr	r4, [r3, #8]
   19770:	42a1      	cmp	r1, r4
   19772:	f000 808f 	beq.w	19894 <rpc_message_data_free+0x148>
   19776:	691c      	ldr	r4, [r3, #16]
   19778:	42a1      	cmp	r1, r4
   1977a:	f000 8091 	beq.w	198a0 <rpc_message_data_free+0x154>
   1977e:	699c      	ldr	r4, [r3, #24]
   19780:	42a1      	cmp	r1, r4
   19782:	f000 8093 	beq.w	198ac <rpc_message_data_free+0x160>
   19786:	6a1c      	ldr	r4, [r3, #32]
   19788:	42a1      	cmp	r1, r4
   1978a:	f000 8095 	beq.w	198b8 <rpc_message_data_free+0x16c>
   1978e:	6a9c      	ldr	r4, [r3, #40]	; 0x28
   19790:	42a1      	cmp	r1, r4
   19792:	f000 8097 	beq.w	198c4 <rpc_message_data_free+0x178>
   19796:	6b1c      	ldr	r4, [r3, #48]	; 0x30
   19798:	42a1      	cmp	r1, r4
   1979a:	f000 8099 	beq.w	198d0 <rpc_message_data_free+0x184>
   1979e:	6b9c      	ldr	r4, [r3, #56]	; 0x38
   197a0:	42a1      	cmp	r1, r4
   197a2:	f000 809b 	beq.w	198dc <rpc_message_data_free+0x190>
   197a6:	6c1c      	ldr	r4, [r3, #64]	; 0x40
   197a8:	42a1      	cmp	r1, r4
   197aa:	f000 809d 	beq.w	198e8 <rpc_message_data_free+0x19c>
   197ae:	6c9c      	ldr	r4, [r3, #72]	; 0x48
   197b0:	42a1      	cmp	r1, r4
   197b2:	f000 80a0 	beq.w	198f6 <rpc_message_data_free+0x1aa>
   197b6:	6d1c      	ldr	r4, [r3, #80]	; 0x50
   197b8:	42a1      	cmp	r1, r4
   197ba:	f000 80a3 	beq.w	19904 <rpc_message_data_free+0x1b8>
   197be:	6d9c      	ldr	r4, [r3, #88]	; 0x58
   197c0:	42a1      	cmp	r1, r4
   197c2:	f000 80a6 	beq.w	19912 <rpc_message_data_free+0x1c6>
   197c6:	6e1c      	ldr	r4, [r3, #96]	; 0x60
   197c8:	42a1      	cmp	r1, r4
   197ca:	f000 80ab 	beq.w	19924 <rpc_message_data_free+0x1d8>
   197ce:	6e9c      	ldr	r4, [r3, #104]	; 0x68
   197d0:	42a1      	cmp	r1, r4
   197d2:	f000 80ae 	beq.w	19932 <rpc_message_data_free+0x1e6>
   197d6:	6f1c      	ldr	r4, [r3, #112]	; 0x70
   197d8:	42a1      	cmp	r1, r4
   197da:	f000 80b1 	beq.w	19940 <rpc_message_data_free+0x1f4>
   197de:	6f9c      	ldr	r4, [r3, #120]	; 0x78
   197e0:	428c      	cmp	r4, r1
   197e2:	f000 80b4 	beq.w	1994e <rpc_message_data_free+0x202>
   197e6:	6913      	ldr	r3, [r2, #16]
   197e8:	4608      	mov	r0, r1
   197ea:	4798      	blx	r3
   197ec:	4b5e      	ldr	r3, [pc, #376]	; (19968 <rpc_message_data_free+0x21c>)
   197ee:	781a      	ldrb	r2, [r3, #0]
   197f0:	2a04      	cmp	r2, #4
   197f2:	d03b      	beq.n	1986c <rpc_message_data_free+0x120>
   197f4:	7a1a      	ldrb	r2, [r3, #8]
   197f6:	2a04      	cmp	r2, #4
   197f8:	d038      	beq.n	1986c <rpc_message_data_free+0x120>
   197fa:	7c1a      	ldrb	r2, [r3, #16]
   197fc:	2a04      	cmp	r2, #4
   197fe:	d035      	beq.n	1986c <rpc_message_data_free+0x120>
   19800:	7e1a      	ldrb	r2, [r3, #24]
   19802:	2a04      	cmp	r2, #4
   19804:	d032      	beq.n	1986c <rpc_message_data_free+0x120>
   19806:	f893 2020 	ldrb.w	r2, [r3, #32]
   1980a:	2a04      	cmp	r2, #4
   1980c:	d02e      	beq.n	1986c <rpc_message_data_free+0x120>
   1980e:	f893 2028 	ldrb.w	r2, [r3, #40]	; 0x28
   19812:	2a04      	cmp	r2, #4
   19814:	d02a      	beq.n	1986c <rpc_message_data_free+0x120>
   19816:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
   1981a:	2a04      	cmp	r2, #4
   1981c:	d026      	beq.n	1986c <rpc_message_data_free+0x120>
   1981e:	f893 2038 	ldrb.w	r2, [r3, #56]	; 0x38
   19822:	2a04      	cmp	r2, #4
   19824:	d022      	beq.n	1986c <rpc_message_data_free+0x120>
   19826:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
   1982a:	2a04      	cmp	r2, #4
   1982c:	d01e      	beq.n	1986c <rpc_message_data_free+0x120>
   1982e:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
   19832:	2a04      	cmp	r2, #4
   19834:	d01a      	beq.n	1986c <rpc_message_data_free+0x120>
   19836:	f893 2050 	ldrb.w	r2, [r3, #80]	; 0x50
   1983a:	2a04      	cmp	r2, #4
   1983c:	d016      	beq.n	1986c <rpc_message_data_free+0x120>
   1983e:	f893 2058 	ldrb.w	r2, [r3, #88]	; 0x58
   19842:	2a04      	cmp	r2, #4
   19844:	d012      	beq.n	1986c <rpc_message_data_free+0x120>
   19846:	f893 2060 	ldrb.w	r2, [r3, #96]	; 0x60
   1984a:	2a04      	cmp	r2, #4
   1984c:	d00e      	beq.n	1986c <rpc_message_data_free+0x120>
   1984e:	f893 2068 	ldrb.w	r2, [r3, #104]	; 0x68
   19852:	2a04      	cmp	r2, #4
   19854:	d00a      	beq.n	1986c <rpc_message_data_free+0x120>
   19856:	f893 2070 	ldrb.w	r2, [r3, #112]	; 0x70
   1985a:	2a04      	cmp	r2, #4
   1985c:	d006      	beq.n	1986c <rpc_message_data_free+0x120>
   1985e:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
   19862:	2b04      	cmp	r3, #4
   19864:	bf18      	it	ne
   19866:	2000      	movne	r0, #0
   19868:	d000      	beq.n	1986c <rpc_message_data_free+0x120>
   1986a:	bd38      	pop	{r3, r4, r5, pc}
   1986c:	f7f7 fcee 	bl	1124c <bsd_os_application_irq_set>
   19870:	2000      	movs	r0, #0
   19872:	bd38      	pop	{r3, r4, r5, pc}
   19874:	2007      	movs	r0, #7
   19876:	4770      	bx	lr
   19878:	2008      	movs	r0, #8
   1987a:	bd38      	pop	{r3, r4, r5, pc}
   1987c:	889c      	ldrh	r4, [r3, #4]
   1987e:	4284      	cmp	r4, r0
   19880:	f47f af75 	bne.w	1976e <rpc_message_data_free+0x22>
   19884:	2400      	movs	r4, #0
   19886:	2000      	movs	r0, #0
   19888:	eb03 05c4 	add.w	r5, r3, r4, lsl #3
   1988c:	f843 0034 	str.w	r0, [r3, r4, lsl #3]
   19890:	80a8      	strh	r0, [r5, #4]
   19892:	e7a8      	b.n	197e6 <rpc_message_data_free+0x9a>
   19894:	899c      	ldrh	r4, [r3, #12]
   19896:	4284      	cmp	r4, r0
   19898:	f47f af6d 	bne.w	19776 <rpc_message_data_free+0x2a>
   1989c:	2401      	movs	r4, #1
   1989e:	e7f2      	b.n	19886 <rpc_message_data_free+0x13a>
   198a0:	8a9c      	ldrh	r4, [r3, #20]
   198a2:	4284      	cmp	r4, r0
   198a4:	f47f af6b 	bne.w	1977e <rpc_message_data_free+0x32>
   198a8:	2402      	movs	r4, #2
   198aa:	e7ec      	b.n	19886 <rpc_message_data_free+0x13a>
   198ac:	8b9c      	ldrh	r4, [r3, #28]
   198ae:	4284      	cmp	r4, r0
   198b0:	f47f af69 	bne.w	19786 <rpc_message_data_free+0x3a>
   198b4:	2403      	movs	r4, #3
   198b6:	e7e6      	b.n	19886 <rpc_message_data_free+0x13a>
   198b8:	8c9c      	ldrh	r4, [r3, #36]	; 0x24
   198ba:	4284      	cmp	r4, r0
   198bc:	f47f af67 	bne.w	1978e <rpc_message_data_free+0x42>
   198c0:	2404      	movs	r4, #4
   198c2:	e7e0      	b.n	19886 <rpc_message_data_free+0x13a>
   198c4:	8d9c      	ldrh	r4, [r3, #44]	; 0x2c
   198c6:	4284      	cmp	r4, r0
   198c8:	f47f af65 	bne.w	19796 <rpc_message_data_free+0x4a>
   198cc:	2405      	movs	r4, #5
   198ce:	e7da      	b.n	19886 <rpc_message_data_free+0x13a>
   198d0:	8e9c      	ldrh	r4, [r3, #52]	; 0x34
   198d2:	4284      	cmp	r4, r0
   198d4:	f47f af63 	bne.w	1979e <rpc_message_data_free+0x52>
   198d8:	2406      	movs	r4, #6
   198da:	e7d4      	b.n	19886 <rpc_message_data_free+0x13a>
   198dc:	8f9c      	ldrh	r4, [r3, #60]	; 0x3c
   198de:	4284      	cmp	r4, r0
   198e0:	f47f af61 	bne.w	197a6 <rpc_message_data_free+0x5a>
   198e4:	2407      	movs	r4, #7
   198e6:	e7ce      	b.n	19886 <rpc_message_data_free+0x13a>
   198e8:	f8b3 4044 	ldrh.w	r4, [r3, #68]	; 0x44
   198ec:	4284      	cmp	r4, r0
   198ee:	f47f af5e 	bne.w	197ae <rpc_message_data_free+0x62>
   198f2:	2408      	movs	r4, #8
   198f4:	e7c7      	b.n	19886 <rpc_message_data_free+0x13a>
   198f6:	f8b3 404c 	ldrh.w	r4, [r3, #76]	; 0x4c
   198fa:	4284      	cmp	r4, r0
   198fc:	f47f af5b 	bne.w	197b6 <rpc_message_data_free+0x6a>
   19900:	2409      	movs	r4, #9
   19902:	e7c0      	b.n	19886 <rpc_message_data_free+0x13a>
   19904:	f8b3 4054 	ldrh.w	r4, [r3, #84]	; 0x54
   19908:	4284      	cmp	r4, r0
   1990a:	f47f af58 	bne.w	197be <rpc_message_data_free+0x72>
   1990e:	240a      	movs	r4, #10
   19910:	e7b9      	b.n	19886 <rpc_message_data_free+0x13a>
   19912:	f8b3 405c 	ldrh.w	r4, [r3, #92]	; 0x5c
   19916:	4284      	cmp	r4, r0
   19918:	f47f af55 	bne.w	197c6 <rpc_message_data_free+0x7a>
   1991c:	240b      	movs	r4, #11
   1991e:	e7b2      	b.n	19886 <rpc_message_data_free+0x13a>
   19920:	200e      	movs	r0, #14
   19922:	4770      	bx	lr
   19924:	f8b3 4064 	ldrh.w	r4, [r3, #100]	; 0x64
   19928:	4284      	cmp	r4, r0
   1992a:	f47f af50 	bne.w	197ce <rpc_message_data_free+0x82>
   1992e:	240c      	movs	r4, #12
   19930:	e7a9      	b.n	19886 <rpc_message_data_free+0x13a>
   19932:	f8b3 406c 	ldrh.w	r4, [r3, #108]	; 0x6c
   19936:	4284      	cmp	r4, r0
   19938:	f47f af4d 	bne.w	197d6 <rpc_message_data_free+0x8a>
   1993c:	240d      	movs	r4, #13
   1993e:	e7a2      	b.n	19886 <rpc_message_data_free+0x13a>
   19940:	f8b3 4074 	ldrh.w	r4, [r3, #116]	; 0x74
   19944:	4284      	cmp	r4, r0
   19946:	f47f af4a 	bne.w	197de <rpc_message_data_free+0x92>
   1994a:	240e      	movs	r4, #14
   1994c:	e79b      	b.n	19886 <rpc_message_data_free+0x13a>
   1994e:	f8b3 407c 	ldrh.w	r4, [r3, #124]	; 0x7c
   19952:	4284      	cmp	r4, r0
   19954:	bf08      	it	eq
   19956:	240f      	moveq	r4, #15
   19958:	f47f af45 	bne.w	197e6 <rpc_message_data_free+0x9a>
   1995c:	e793      	b.n	19886 <rpc_message_data_free+0x13a>
   1995e:	bf00      	nop
   19960:	200208e4 	.word	0x200208e4
   19964:	200208fc 	.word	0x200208fc
   19968:	2002097c 	.word	0x2002097c

0001996c <packet_free_cb>:
   1996c:	b510      	push	{r4, lr}
   1996e:	4604      	mov	r4, r0
   19970:	b118      	cbz	r0, 1997a <packet_free_cb+0xe>
   19972:	6800      	ldr	r0, [r0, #0]
   19974:	b108      	cbz	r0, 1997a <packet_free_cb+0xe>
   19976:	f001 f82f 	bl	1a9d8 <rpc_gnss_client_data_free>
   1997a:	68a0      	ldr	r0, [r4, #8]
   1997c:	b118      	cbz	r0, 19986 <packet_free_cb+0x1a>
   1997e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   19982:	f7fa b919 	b.w	13bb8 <nrf_free>
   19986:	bd10      	pop	{r4, pc}

00019988 <rpc_gnss_event_handler>:
   19988:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1998c:	4b64      	ldr	r3, [pc, #400]	; (19b20 <rpc_gnss_event_handler+0x198>)
   1998e:	4606      	mov	r6, r0
   19990:	6800      	ldr	r0, [r0, #0]
   19992:	881b      	ldrh	r3, [r3, #0]
   19994:	6802      	ldr	r2, [r0, #0]
   19996:	4f63      	ldr	r7, [pc, #396]	; (19b24 <rpc_gnss_event_handler+0x19c>)
   19998:	ebb3 4f12 	cmp.w	r3, r2, lsr #16
   1999c:	b084      	sub	sp, #16
   1999e:	460d      	mov	r5, r1
   199a0:	6038      	str	r0, [r7, #0]
   199a2:	d038      	beq.n	19a16 <rpc_gnss_event_handler+0x8e>
   199a4:	f505 433f 	add.w	r3, r5, #48896	; 0xbf00
   199a8:	33ff      	adds	r3, #255	; 0xff
   199aa:	b29b      	uxth	r3, r3
   199ac:	2b02      	cmp	r3, #2
   199ae:	d810      	bhi.n	199d2 <rpc_gnss_event_handler+0x4a>
   199b0:	4c5d      	ldr	r4, [pc, #372]	; (19b28 <rpc_gnss_event_handler+0x1a0>)
   199b2:	6823      	ldr	r3, [r4, #0]
   199b4:	075a      	lsls	r2, r3, #29
   199b6:	d410      	bmi.n	199da <rpc_gnss_event_handler+0x52>
   199b8:	6823      	ldr	r3, [r4, #0]
   199ba:	079b      	lsls	r3, r3, #30
   199bc:	d503      	bpl.n	199c6 <rpc_gnss_event_handler+0x3e>
   199be:	f244 0303 	movw	r3, #16387	; 0x4003
   199c2:	429d      	cmp	r5, r3
   199c4:	d009      	beq.n	199da <rpc_gnss_event_handler+0x52>
   199c6:	6830      	ldr	r0, [r6, #0]
   199c8:	b118      	cbz	r0, 199d2 <rpc_gnss_event_handler+0x4a>
   199ca:	f001 f805 	bl	1a9d8 <rpc_gnss_client_data_free>
   199ce:	2300      	movs	r3, #0
   199d0:	603b      	str	r3, [r7, #0]
   199d2:	2000      	movs	r0, #0
   199d4:	b004      	add	sp, #16
   199d6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   199da:	2002      	movs	r0, #2
   199dc:	f7fa f8e2 	bl	13ba4 <nrf_malloc>
   199e0:	4680      	mov	r8, r0
   199e2:	2800      	cmp	r0, #0
   199e4:	f000 8093 	beq.w	19b0e <rpc_gnss_event_handler+0x186>
   199e8:	2302      	movs	r3, #2
   199ea:	8005      	strh	r5, [r0, #0]
   199ec:	6831      	ldr	r1, [r6, #0]
   199ee:	6872      	ldr	r2, [r6, #4]
   199f0:	484e      	ldr	r0, [pc, #312]	; (19b2c <rpc_gnss_event_handler+0x1a4>)
   199f2:	e88d 0106 	stmia.w	sp, {r1, r2, r8}
   199f6:	6800      	ldr	r0, [r0, #0]
   199f8:	9303      	str	r3, [sp, #12]
   199fa:	6803      	ldr	r3, [r0, #0]
   199fc:	4669      	mov	r1, sp
   199fe:	685b      	ldr	r3, [r3, #4]
   19a00:	4798      	blx	r3
   19a02:	3001      	adds	r0, #1
   19a04:	d070      	beq.n	19ae8 <rpc_gnss_event_handler+0x160>
   19a06:	2000      	movs	r0, #0
   19a08:	6823      	ldr	r3, [r4, #0]
   19a0a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   19a0e:	6023      	str	r3, [r4, #0]
   19a10:	b004      	add	sp, #16
   19a12:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   19a16:	4c44      	ldr	r4, [pc, #272]	; (19b28 <rpc_gnss_event_handler+0x1a0>)
   19a18:	6823      	ldr	r3, [r4, #0]
   19a1a:	01d9      	lsls	r1, r3, #7
   19a1c:	d523      	bpl.n	19a66 <rpc_gnss_event_handler+0xde>
   19a1e:	f242 1302 	movw	r3, #8450	; 0x2102
   19a22:	429d      	cmp	r5, r3
   19a24:	d11f      	bne.n	19a66 <rpc_gnss_event_handler+0xde>
   19a26:	6843      	ldr	r3, [r0, #4]
   19a28:	b91b      	cbnz	r3, 19a32 <rpc_gnss_event_handler+0xaa>
   19a2a:	6823      	ldr	r3, [r4, #0]
   19a2c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
   19a30:	6023      	str	r3, [r4, #0]
   19a32:	6823      	ldr	r3, [r4, #0]
   19a34:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
   19a38:	6023      	str	r3, [r4, #0]
   19a3a:	6823      	ldr	r3, [r4, #0]
   19a3c:	025a      	lsls	r2, r3, #9
   19a3e:	d430      	bmi.n	19aa2 <rpc_gnss_event_handler+0x11a>
   19a40:	f242 0305 	movw	r3, #8197	; 0x2005
   19a44:	429d      	cmp	r5, r3
   19a46:	d12c      	bne.n	19aa2 <rpc_gnss_event_handler+0x11a>
   19a48:	6823      	ldr	r3, [r4, #0]
   19a4a:	0299      	lsls	r1, r3, #10
   19a4c:	d529      	bpl.n	19aa2 <rpc_gnss_event_handler+0x11a>
   19a4e:	6843      	ldr	r3, [r0, #4]
   19a50:	2b00      	cmp	r3, #0
   19a52:	d157      	bne.n	19b04 <rpc_gnss_event_handler+0x17c>
   19a54:	6823      	ldr	r3, [r4, #0]
   19a56:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
   19a5a:	6023      	str	r3, [r4, #0]
   19a5c:	6823      	ldr	r3, [r4, #0]
   19a5e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   19a62:	6023      	str	r3, [r4, #0]
   19a64:	e01d      	b.n	19aa2 <rpc_gnss_event_handler+0x11a>
   19a66:	6823      	ldr	r3, [r4, #0]
   19a68:	025b      	lsls	r3, r3, #9
   19a6a:	d50e      	bpl.n	19a8a <rpc_gnss_event_handler+0x102>
   19a6c:	f242 1303 	movw	r3, #8451	; 0x2103
   19a70:	429d      	cmp	r5, r3
   19a72:	d10a      	bne.n	19a8a <rpc_gnss_event_handler+0x102>
   19a74:	6843      	ldr	r3, [r0, #4]
   19a76:	b91b      	cbnz	r3, 19a80 <rpc_gnss_event_handler+0xf8>
   19a78:	6823      	ldr	r3, [r4, #0]
   19a7a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
   19a7e:	6023      	str	r3, [r4, #0]
   19a80:	6823      	ldr	r3, [r4, #0]
   19a82:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
   19a86:	6023      	str	r3, [r4, #0]
   19a88:	e00b      	b.n	19aa2 <rpc_gnss_event_handler+0x11a>
   19a8a:	f242 0301 	movw	r3, #8193	; 0x2001
   19a8e:	429d      	cmp	r5, r3
   19a90:	d10c      	bne.n	19aac <rpc_gnss_event_handler+0x124>
   19a92:	6843      	ldr	r3, [r0, #4]
   19a94:	b92b      	cbnz	r3, 19aa2 <rpc_gnss_event_handler+0x11a>
   19a96:	6823      	ldr	r3, [r4, #0]
   19a98:	0c1b      	lsrs	r3, r3, #16
   19a9a:	041b      	lsls	r3, r3, #16
   19a9c:	f043 0302 	orr.w	r3, r3, #2
   19aa0:	6023      	str	r3, [r4, #0]
   19aa2:	f000 ff99 	bl	1a9d8 <rpc_gnss_client_data_free>
   19aa6:	2300      	movs	r3, #0
   19aa8:	603b      	str	r3, [r7, #0]
   19aaa:	e77b      	b.n	199a4 <rpc_gnss_event_handler+0x1c>
   19aac:	f242 0304 	movw	r3, #8196	; 0x2004
   19ab0:	429d      	cmp	r5, r3
   19ab2:	d1c5      	bne.n	19a40 <rpc_gnss_event_handler+0xb8>
   19ab4:	6843      	ldr	r3, [r0, #4]
   19ab6:	b993      	cbnz	r3, 19ade <rpc_gnss_event_handler+0x156>
   19ab8:	6823      	ldr	r3, [r4, #0]
   19aba:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
   19abe:	6023      	str	r3, [r4, #0]
   19ac0:	6823      	ldr	r3, [r4, #0]
   19ac2:	b29b      	uxth	r3, r3
   19ac4:	2b03      	cmp	r3, #3
   19ac6:	6823      	ldr	r3, [r4, #0]
   19ac8:	d016      	beq.n	19af8 <rpc_gnss_event_handler+0x170>
   19aca:	b29b      	uxth	r3, r3
   19acc:	2b04      	cmp	r3, #4
   19ace:	d1d7      	bne.n	19a80 <rpc_gnss_event_handler+0xf8>
   19ad0:	6823      	ldr	r3, [r4, #0]
   19ad2:	0c1b      	lsrs	r3, r3, #16
   19ad4:	041b      	lsls	r3, r3, #16
   19ad6:	f043 0302 	orr.w	r3, r3, #2
   19ada:	6023      	str	r3, [r4, #0]
   19adc:	e7d0      	b.n	19a80 <rpc_gnss_event_handler+0xf8>
   19ade:	6823      	ldr	r3, [r4, #0]
   19ae0:	b29b      	uxth	r3, r3
   19ae2:	2b03      	cmp	r3, #3
   19ae4:	d1cc      	bne.n	19a80 <rpc_gnss_event_handler+0xf8>
   19ae6:	e7f3      	b.n	19ad0 <rpc_gnss_event_handler+0x148>
   19ae8:	4640      	mov	r0, r8
   19aea:	f7fa f865 	bl	13bb8 <nrf_free>
   19aee:	6830      	ldr	r0, [r6, #0]
   19af0:	2800      	cmp	r0, #0
   19af2:	f47f af6a 	bne.w	199ca <rpc_gnss_event_handler+0x42>
   19af6:	e76c      	b.n	199d2 <rpc_gnss_event_handler+0x4a>
   19af8:	0c1b      	lsrs	r3, r3, #16
   19afa:	041b      	lsls	r3, r3, #16
   19afc:	f043 0304 	orr.w	r3, r3, #4
   19b00:	6023      	str	r3, [r4, #0]
   19b02:	e7bd      	b.n	19a80 <rpc_gnss_event_handler+0xf8>
   19b04:	6823      	ldr	r3, [r4, #0]
   19b06:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
   19b0a:	6023      	str	r3, [r4, #0]
   19b0c:	e7c9      	b.n	19aa2 <rpc_gnss_event_handler+0x11a>
   19b0e:	6830      	ldr	r0, [r6, #0]
   19b10:	2800      	cmp	r0, #0
   19b12:	f43f af5e 	beq.w	199d2 <rpc_gnss_event_handler+0x4a>
   19b16:	f000 ff5f 	bl	1a9d8 <rpc_gnss_client_data_free>
   19b1a:	f8c7 8000 	str.w	r8, [r7]
   19b1e:	e758      	b.n	199d2 <rpc_gnss_event_handler+0x4a>
   19b20:	200214dc 	.word	0x200214dc
   19b24:	20020a00 	.word	0x20020a00
   19b28:	200209fc 	.word	0x200209fc
   19b2c:	20020a04 	.word	0x20020a04

00019b30 <gnss_interface_write>:
   19b30:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   19b34:	4a74      	ldr	r2, [pc, #464]	; (19d08 <_flash_used+0x150>)
   19b36:	b09f      	sub	sp, #124	; 0x7c
   19b38:	4290      	cmp	r0, r2
   19b3a:	9d26      	ldr	r5, [sp, #152]	; 0x98
   19b3c:	f040 80d7 	bne.w	19cee <_flash_used+0x136>
   19b40:	2900      	cmp	r1, #0
   19b42:	f000 80c6 	beq.w	19cd2 <_flash_used+0x11a>
   19b46:	2d00      	cmp	r5, #0
   19b48:	f000 80c3 	beq.w	19cd2 <_flash_used+0x11a>
   19b4c:	9a27      	ldr	r2, [sp, #156]	; 0x9c
   19b4e:	2a02      	cmp	r2, #2
   19b50:	f040 80bf 	bne.w	19cd2 <_flash_used+0x11a>
   19b54:	4c6d      	ldr	r4, [pc, #436]	; (19d0c <_flash_used+0x154>)
   19b56:	6822      	ldr	r2, [r4, #0]
   19b58:	b292      	uxth	r2, r2
   19b5a:	2a02      	cmp	r2, #2
   19b5c:	d004      	beq.n	19b68 <gnss_interface_write+0x38>
   19b5e:	6822      	ldr	r2, [r4, #0]
   19b60:	b292      	uxth	r2, r2
   19b62:	2a04      	cmp	r2, #4
   19b64:	f040 80bd 	bne.w	19ce2 <_flash_used+0x12a>
   19b68:	2b00      	cmp	r3, #0
   19b6a:	f040 80c6 	bne.w	19cfa <_flash_used+0x142>
   19b6e:	6822      	ldr	r2, [r4, #0]
   19b70:	0390      	lsls	r0, r2, #14
   19b72:	d512      	bpl.n	19b9a <gnss_interface_write+0x6a>
   19b74:	6822      	ldr	r2, [r4, #0]
   19b76:	882b      	ldrh	r3, [r5, #0]
   19b78:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
   19b7c:	6022      	str	r2, [r4, #0]
   19b7e:	6822      	ldr	r2, [r4, #0]
   19b80:	3b01      	subs	r3, #1
   19b82:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
   19b86:	6022      	str	r2, [r4, #0]
   19b88:	2b07      	cmp	r3, #7
   19b8a:	f200 80a2 	bhi.w	19cd2 <_flash_used+0x11a>
   19b8e:	e8df f003 	tbb	[pc, r3]
   19b92:	7d82      	.short	0x7d82
   19b94:	646e7378 	.word	0x646e7378
   19b98:	0869      	.short	0x0869
   19b9a:	2000      	movs	r0, #0
   19b9c:	b01f      	add	sp, #124	; 0x7c
   19b9e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   19ba2:	4608      	mov	r0, r1
   19ba4:	a902      	add	r1, sp, #8
   19ba6:	f000 fecb 	bl	1a940 <rpc_gnss_serialize_integrity>
   19baa:	2172      	movs	r1, #114	; 0x72
   19bac:	4668      	mov	r0, sp
   19bae:	f000 fee1 	bl	1a974 <rpc_gnss_client_request_alloc>
   19bb2:	4605      	mov	r5, r0
   19bb4:	9800      	ldr	r0, [sp, #0]
   19bb6:	2d00      	cmp	r5, #0
   19bb8:	d172      	bne.n	19ca0 <_flash_used+0xe8>
   19bba:	2800      	cmp	r0, #0
   19bbc:	d077      	beq.n	19cae <_flash_used+0xf6>
   19bbe:	f241 0605 	movw	r6, #4101	; 0x1005
   19bc2:	f04f 0c49 	mov.w	ip, #73	; 0x49
   19bc6:	2272      	movs	r2, #114	; 0x72
   19bc8:	f04f 0e76 	mov.w	lr, #118	; 0x76
   19bcc:	f04f 0943 	mov.w	r9, #67	; 0x43
   19bd0:	f04f 0854 	mov.w	r8, #84	; 0x54
   19bd4:	4f4e      	ldr	r7, [pc, #312]	; (19d10 <_flash_used+0x158>)
   19bd6:	a91e      	add	r1, sp, #120	; 0x78
   19bd8:	883b      	ldrh	r3, [r7, #0]
   19bda:	f880 c00f 	strb.w	ip, [r0, #15]
   19bde:	3301      	adds	r3, #1
   19be0:	b29b      	uxth	r3, r3
   19be2:	ea46 4c03 	orr.w	ip, r6, r3, lsl #16
   19be6:	f841 cd74 	str.w	ip, [r1, #-116]!
   19bea:	7145      	strb	r5, [r0, #5]
   19bec:	7185      	strb	r5, [r0, #6]
   19bee:	71c5      	strb	r5, [r0, #7]
   19bf0:	7205      	strb	r5, [r0, #8]
   19bf2:	7245      	strb	r5, [r0, #9]
   19bf4:	7285      	strb	r5, [r0, #10]
   19bf6:	72c5      	strb	r5, [r0, #11]
   19bf8:	7102      	strb	r2, [r0, #4]
   19bfa:	f880 900c 	strb.w	r9, [r0, #12]
   19bfe:	f880 800d 	strb.w	r8, [r0, #13]
   19c02:	f880 e00e 	strb.w	lr, [r0, #14]
   19c06:	6800      	ldr	r0, [r0, #0]
   19c08:	803b      	strh	r3, [r7, #0]
   19c0a:	f007 fe96 	bl	2193a <memcpy>
   19c0e:	4b41      	ldr	r3, [pc, #260]	; (19d14 <_flash_used+0x15c>)
   19c10:	4631      	mov	r1, r6
   19c12:	9800      	ldr	r0, [sp, #0]
   19c14:	601d      	str	r5, [r3, #0]
   19c16:	f000 fec1 	bl	1a99c <rpc_gnss_client_request_send>
   19c1a:	2800      	cmp	r0, #0
   19c1c:	d14e      	bne.n	19cbc <_flash_used+0x104>
   19c1e:	6823      	ldr	r3, [r4, #0]
   19c20:	0299      	lsls	r1, r3, #10
   19c22:	d50b      	bpl.n	19c3c <_flash_used+0x84>
   19c24:	4e3c      	ldr	r6, [pc, #240]	; (19d18 <_flash_used+0x160>)
   19c26:	4d38      	ldr	r5, [pc, #224]	; (19d08 <_flash_used+0x150>)
   19c28:	e000      	b.n	19c2c <_flash_used+0x74>
   19c2a:	b978      	cbnz	r0, 19c4c <_flash_used+0x94>
   19c2c:	4631      	mov	r1, r6
   19c2e:	4628      	mov	r0, r5
   19c30:	f7f7 f980 	bl	10f34 <bsd_os_timedwait>
   19c34:	6823      	ldr	r3, [r4, #0]
   19c36:	029a      	lsls	r2, r3, #10
   19c38:	d4f7      	bmi.n	19c2a <_flash_used+0x72>
   19c3a:	b938      	cbnz	r0, 19c4c <_flash_used+0x94>
   19c3c:	6823      	ldr	r3, [r4, #0]
   19c3e:	039b      	lsls	r3, r3, #14
   19c40:	d4ab      	bmi.n	19b9a <gnss_interface_write+0x6a>
   19c42:	2005      	movs	r0, #5
   19c44:	6823      	ldr	r3, [r4, #0]
   19c46:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   19c4a:	6023      	str	r3, [r4, #0]
   19c4c:	f7f7 fa06 	bl	1105c <bsd_os_errno_set>
   19c50:	f04f 30ff 	mov.w	r0, #4294967295
   19c54:	b01f      	add	sp, #124	; 0x7c
   19c56:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   19c5a:	4608      	mov	r0, r1
   19c5c:	a902      	add	r1, sp, #8
   19c5e:	f000 fe27 	bl	1a8b0 <rpc_gnss_serialize_time_and_sv_tow>
   19c62:	e7a2      	b.n	19baa <gnss_interface_write+0x7a>
   19c64:	4608      	mov	r0, r1
   19c66:	a902      	add	r1, sp, #8
   19c68:	f000 fe4a 	bl	1a900 <rpc_gnss_serialize_location>
   19c6c:	e79d      	b.n	19baa <gnss_interface_write+0x7a>
   19c6e:	4608      	mov	r0, r1
   19c70:	a902      	add	r1, sp, #8
   19c72:	f000 fe03 	bl	1a87c <rpc_gnss_serialize_nequick>
   19c76:	e798      	b.n	19baa <gnss_interface_write+0x7a>
   19c78:	4608      	mov	r0, r1
   19c7a:	a902      	add	r1, sp, #8
   19c7c:	f000 fdda 	bl	1a834 <rpc_gnss_serialize_klob>
   19c80:	e793      	b.n	19baa <gnss_interface_write+0x7a>
   19c82:	4608      	mov	r0, r1
   19c84:	a902      	add	r1, sp, #8
   19c86:	f000 fda3 	bl	1a7d0 <rpc_gnss_serialize_alm>
   19c8a:	e78e      	b.n	19baa <gnss_interface_write+0x7a>
   19c8c:	4608      	mov	r0, r1
   19c8e:	a902      	add	r1, sp, #8
   19c90:	f000 fd4c 	bl	1a72c <rpc_gnss_serialize_ephe>
   19c94:	e789      	b.n	19baa <gnss_interface_write+0x7a>
   19c96:	4608      	mov	r0, r1
   19c98:	a902      	add	r1, sp, #8
   19c9a:	f000 fd25 	bl	1a6e8 <rpc_gnss_serialize_utc>
   19c9e:	e784      	b.n	19baa <gnss_interface_write+0x7a>
   19ca0:	b128      	cbz	r0, 19cae <_flash_used+0xf6>
   19ca2:	6803      	ldr	r3, [r0, #0]
   19ca4:	b11b      	cbz	r3, 19cae <_flash_used+0xf6>
   19ca6:	4618      	mov	r0, r3
   19ca8:	f000 fe96 	bl	1a9d8 <rpc_gnss_client_data_free>
   19cac:	9800      	ldr	r0, [sp, #0]
   19cae:	f000 fe8b 	bl	1a9c8 <rpc_gnss_client_message_free>
   19cb2:	2023      	movs	r0, #35	; 0x23
   19cb4:	f7f7 f9d2 	bl	1105c <bsd_os_errno_set>
   19cb8:	f04f 30ff 	mov.w	r0, #4294967295
   19cbc:	6823      	ldr	r3, [r4, #0]
   19cbe:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
   19cc2:	6023      	str	r3, [r4, #0]
   19cc4:	6823      	ldr	r3, [r4, #0]
   19cc6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   19cca:	6023      	str	r3, [r4, #0]
   19ccc:	b01f      	add	sp, #124	; 0x7c
   19cce:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   19cd2:	2016      	movs	r0, #22
   19cd4:	f7f7 f9c2 	bl	1105c <bsd_os_errno_set>
   19cd8:	f04f 30ff 	mov.w	r0, #4294967295
   19cdc:	b01f      	add	sp, #124	; 0x7c
   19cde:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   19ce2:	2039      	movs	r0, #57	; 0x39
   19ce4:	f7f7 f9ba 	bl	1105c <bsd_os_errno_set>
   19ce8:	f04f 30ff 	mov.w	r0, #4294967295
   19cec:	e756      	b.n	19b9c <gnss_interface_write+0x6c>
   19cee:	2009      	movs	r0, #9
   19cf0:	f7f7 f9b4 	bl	1105c <bsd_os_errno_set>
   19cf4:	f04f 30ff 	mov.w	r0, #4294967295
   19cf8:	e750      	b.n	19b9c <gnss_interface_write+0x6c>
   19cfa:	202d      	movs	r0, #45	; 0x2d
   19cfc:	f7f7 f9ae 	bl	1105c <bsd_os_errno_set>
   19d00:	f04f 30ff 	mov.w	r0, #4294967295
   19d04:	e74a      	b.n	19b9c <gnss_interface_write+0x6c>
   19d06:	bf00      	nop
   19d08:	49765443 	.word	0x49765443
   19d0c:	200209fc 	.word	0x200209fc
   19d10:	200214dc 	.word	0x200214dc
   19d14:	20020a00 	.word	0x20020a00
   19d18:	200260a0 	.word	0x200260a0

00019d1c <gnss_interface_read>:
   19d1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19d20:	4c50      	ldr	r4, [pc, #320]	; (19e64 <gnss_interface_read+0x148>)
   19d22:	b0b7      	sub	sp, #220	; 0xdc
   19d24:	42a0      	cmp	r0, r4
   19d26:	f040 81fe 	bne.w	1a126 <gnss_interface_read+0x40a>
   19d2a:	4688      	mov	r8, r1
   19d2c:	2900      	cmp	r1, #0
   19d2e:	f000 81f4 	beq.w	1a11a <gnss_interface_read+0x3fe>
   19d32:	2ad7      	cmp	r2, #215	; 0xd7
   19d34:	f240 81f1 	bls.w	1a11a <gnss_interface_read+0x3fe>
   19d38:	4d4b      	ldr	r5, [pc, #300]	; (19e68 <gnss_interface_read+0x14c>)
   19d3a:	4699      	mov	r9, r3
   19d3c:	682b      	ldr	r3, [r5, #0]
   19d3e:	b29b      	uxth	r3, r3
   19d40:	2b04      	cmp	r3, #4
   19d42:	d004      	beq.n	19d4e <gnss_interface_read+0x32>
   19d44:	682b      	ldr	r3, [r5, #0]
   19d46:	b29b      	uxth	r3, r3
   19d48:	2b02      	cmp	r3, #2
   19d4a:	f040 81e0 	bne.w	1a10e <gnss_interface_read+0x3f2>
   19d4e:	f1b9 0f00 	cmp.w	r9, #0
   19d52:	d158      	bne.n	19e06 <gnss_interface_read+0xea>
   19d54:	2102      	movs	r1, #2
   19d56:	20b6      	movs	r0, #182	; 0xb6
   19d58:	2400      	movs	r4, #0
   19d5a:	682b      	ldr	r3, [r5, #0]
   19d5c:	f10d 020e 	add.w	r2, sp, #14
   19d60:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
   19d64:	602b      	str	r3, [r5, #0]
   19d66:	f8df a108 	ldr.w	sl, [pc, #264]	; 19e70 <gnss_interface_read+0x154>
   19d6a:	ab08      	add	r3, sp, #32
   19d6c:	4f3f      	ldr	r7, [pc, #252]	; (19e6c <gnss_interface_read+0x150>)
   19d6e:	4e3d      	ldr	r6, [pc, #244]	; (19e64 <gnss_interface_read+0x148>)
   19d70:	9005      	str	r0, [sp, #20]
   19d72:	9107      	str	r1, [sp, #28]
   19d74:	9304      	str	r3, [sp, #16]
   19d76:	9206      	str	r2, [sp, #24]
   19d78:	ea09 0b01 	and.w	fp, r9, r1
   19d7c:	f8da 0000 	ldr.w	r0, [sl]
   19d80:	464a      	mov	r2, r9
   19d82:	6803      	ldr	r3, [r0, #0]
   19d84:	a904      	add	r1, sp, #16
   19d86:	689b      	ldr	r3, [r3, #8]
   19d88:	4798      	blx	r3
   19d8a:	2800      	cmp	r0, #0
   19d8c:	da11      	bge.n	19db2 <gnss_interface_read+0x96>
   19d8e:	f1bb 0f00 	cmp.w	fp, #0
   19d92:	d141      	bne.n	19e18 <gnss_interface_read+0xfc>
   19d94:	682b      	ldr	r3, [r5, #0]
   19d96:	03d8      	lsls	r0, r3, #15
   19d98:	d4f0      	bmi.n	19d7c <gnss_interface_read+0x60>
   19d9a:	b10c      	cbz	r4, 19da0 <gnss_interface_read+0x84>
   19d9c:	e7ee      	b.n	19d7c <gnss_interface_read+0x60>
   19d9e:	b930      	cbnz	r0, 19dae <gnss_interface_read+0x92>
   19da0:	4639      	mov	r1, r7
   19da2:	4630      	mov	r0, r6
   19da4:	f7f7 f8c6 	bl	10f34 <bsd_os_timedwait>
   19da8:	682b      	ldr	r3, [r5, #0]
   19daa:	03d9      	lsls	r1, r3, #15
   19dac:	d5f7      	bpl.n	19d9e <gnss_interface_read+0x82>
   19dae:	4604      	mov	r4, r0
   19db0:	e7e4      	b.n	19d7c <gnss_interface_read+0x60>
   19db2:	f244 0202 	movw	r2, #16386	; 0x4002
   19db6:	f8bd 300e 	ldrh.w	r3, [sp, #14]
   19dba:	4293      	cmp	r3, r2
   19dbc:	d042      	beq.n	19e44 <gnss_interface_read+0x128>
   19dbe:	f244 0201 	movw	r2, #16385	; 0x4001
   19dc2:	4293      	cmp	r3, r2
   19dc4:	d056      	beq.n	19e74 <gnss_interface_read+0x158>
   19dc6:	f244 0203 	movw	r2, #16387	; 0x4003
   19dca:	4293      	cmp	r3, r2
   19dcc:	f040 81a5 	bne.w	1a11a <gnss_interface_read+0x3fe>
   19dd0:	2203      	movs	r2, #3
   19dd2:	2414      	movs	r4, #20
   19dd4:	9b08      	ldr	r3, [sp, #32]
   19dd6:	f888 2000 	strb.w	r2, [r8]
   19dda:	9a09      	ldr	r2, [sp, #36]	; 0x24
   19ddc:	f8c8 3008 	str.w	r3, [r8, #8]
   19de0:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
   19de4:	e9c8 2303 	strd	r2, r3, [r8, #12]
   19de8:	f8da 0000 	ldr.w	r0, [sl]
   19dec:	6803      	ldr	r3, [r0, #0]
   19dee:	68db      	ldr	r3, [r3, #12]
   19df0:	4798      	blx	r3
   19df2:	2800      	cmp	r0, #0
   19df4:	dd03      	ble.n	19dfe <gnss_interface_read+0xe2>
   19df6:	682b      	ldr	r3, [r5, #0]
   19df8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   19dfc:	602b      	str	r3, [r5, #0]
   19dfe:	4620      	mov	r0, r4
   19e00:	b037      	add	sp, #220	; 0xdc
   19e02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19e06:	f019 0f0a 	tst.w	r9, #10
   19e0a:	d1a3      	bne.n	19d54 <gnss_interface_read+0x38>
   19e0c:	202d      	movs	r0, #45	; 0x2d
   19e0e:	f7f7 f925 	bl	1105c <bsd_os_errno_set>
   19e12:	f04f 34ff 	mov.w	r4, #4294967295
   19e16:	e7f2      	b.n	19dfe <gnss_interface_read+0xe2>
   19e18:	1c42      	adds	r2, r0, #1
   19e1a:	4603      	mov	r3, r0
   19e1c:	d1c9      	bne.n	19db2 <gnss_interface_read+0x96>
   19e1e:	b93c      	cbnz	r4, 19e30 <gnss_interface_read+0x114>
   19e20:	461c      	mov	r4, r3
   19e22:	2023      	movs	r0, #35	; 0x23
   19e24:	f7f7 f91a 	bl	1105c <bsd_os_errno_set>
   19e28:	4620      	mov	r0, r4
   19e2a:	b037      	add	sp, #220	; 0xdc
   19e2c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19e30:	9001      	str	r0, [sp, #4]
   19e32:	4620      	mov	r0, r4
   19e34:	f7f7 f912 	bl	1105c <bsd_os_errno_set>
   19e38:	9b01      	ldr	r3, [sp, #4]
   19e3a:	461c      	mov	r4, r3
   19e3c:	4620      	mov	r0, r4
   19e3e:	b037      	add	sp, #220	; 0xdc
   19e40:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19e44:	a808      	add	r0, sp, #32
   19e46:	f7f3 f817 	bl	ce78 <strlen>
   19e4a:	2302      	movs	r3, #2
   19e4c:	1c44      	adds	r4, r0, #1
   19e4e:	b2a4      	uxth	r4, r4
   19e50:	f808 3b08 	strb.w	r3, [r8], #8
   19e54:	4622      	mov	r2, r4
   19e56:	a908      	add	r1, sp, #32
   19e58:	4640      	mov	r0, r8
   19e5a:	f007 fd6e 	bl	2193a <memcpy>
   19e5e:	3408      	adds	r4, #8
   19e60:	e7c2      	b.n	19de8 <gnss_interface_read+0xcc>
   19e62:	bf00      	nop
   19e64:	49765443 	.word	0x49765443
   19e68:	200209fc 	.word	0x200209fc
   19e6c:	200260a0 	.word	0x200260a0
   19e70:	20020a04 	.word	0x20020a04
   19e74:	2401      	movs	r4, #1
   19e76:	a809      	add	r0, sp, #36	; 0x24
   19e78:	c80f      	ldmia	r0, {r0, r1, r2, r3}
   19e7a:	e9c8 0102 	strd	r0, r1, [r8, #8]
   19e7e:	e9c8 2304 	strd	r2, r3, [r8, #16]
   19e82:	990d      	ldr	r1, [sp, #52]	; 0x34
   19e84:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   19e86:	f888 4000 	strb.w	r4, [r8]
   19e8a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   19e8c:	f8c8 1018 	str.w	r1, [r8, #24]
   19e90:	9910      	ldr	r1, [sp, #64]	; 0x40
   19e92:	f8c8 201c 	str.w	r2, [r8, #28]
   19e96:	f8c8 3020 	str.w	r3, [r8, #32]
   19e9a:	f89d 205d 	ldrb.w	r2, [sp, #93]	; 0x5d
   19e9e:	f8dd 304d 	ldr.w	r3, [sp, #77]	; 0x4d
   19ea2:	f8c8 1024 	str.w	r1, [r8, #36]	; 0x24
   19ea6:	f8dd 1051 	ldr.w	r1, [sp, #81]	; 0x51
   19eaa:	f888 2044 	strb.w	r2, [r8, #68]	; 0x44
   19eae:	f8dd 2055 	ldr.w	r2, [sp, #85]	; 0x55
   19eb2:	f8c8 3034 	str.w	r3, [r8, #52]	; 0x34
   19eb6:	f8dd 3059 	ldr.w	r3, [sp, #89]	; 0x59
   19eba:	f8c8 1038 	str.w	r1, [r8, #56]	; 0x38
   19ebe:	f8bd 1044 	ldrh.w	r1, [sp, #68]	; 0x44
   19ec2:	f8c8 203c 	str.w	r2, [r8, #60]	; 0x3c
   19ec6:	f8c8 3040 	str.w	r3, [r8, #64]	; 0x40
   19eca:	f8dd 2046 	ldr.w	r2, [sp, #70]	; 0x46
   19ece:	f89d 304a 	ldrb.w	r3, [sp, #74]	; 0x4a
   19ed2:	f8a8 1028 	strh.w	r1, [r8, #40]	; 0x28
   19ed6:	f888 302e 	strb.w	r3, [r8, #46]	; 0x2e
   19eda:	f8c8 202a 	str.w	r2, [r8, #42]	; 0x2a
   19ede:	f89d 004b 	ldrb.w	r0, [sp, #75]	; 0x4b
   19ee2:	f89d 204c 	ldrb.w	r2, [sp, #76]	; 0x4c
   19ee6:	9b18      	ldr	r3, [sp, #96]	; 0x60
   19ee8:	f89d 406c 	ldrb.w	r4, [sp, #108]	; 0x6c
   19eec:	ea40 2002 	orr.w	r0, r0, r2, lsl #8
   19ef0:	f89d 206b 	ldrb.w	r2, [sp, #107]	; 0x6b
   19ef4:	f3c3 210f 	ubfx	r1, r3, #8, #16
   19ef8:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   19efa:	ea42 2204 	orr.w	r2, r2, r4, lsl #8
   19efe:	f8a8 0030 	strh.w	r0, [r8, #48]	; 0x30
   19f02:	f8a8 104a 	strh.w	r1, [r8, #74]	; 0x4a
   19f06:	f8bd 105e 	ldrh.w	r1, [sp, #94]	; 0x5e
   19f0a:	f3c3 230f 	ubfx	r3, r3, #8, #16
   19f0e:	f8a8 2056 	strh.w	r2, [r8, #86]	; 0x56
   19f12:	f89d 2060 	ldrb.w	r2, [sp, #96]	; 0x60
   19f16:	f8a8 3062 	strh.w	r3, [r8, #98]	; 0x62
   19f1a:	f8dd 3063 	ldr.w	r3, [sp, #99]	; 0x63
   19f1e:	f8a8 1046 	strh.w	r1, [r8, #70]	; 0x46
   19f22:	f888 2048 	strb.w	r2, [r8, #72]	; 0x48
   19f26:	f8bd 2068 	ldrh.w	r2, [sp, #104]	; 0x68
   19f2a:	f89d 1067 	ldrb.w	r1, [sp, #103]	; 0x67
   19f2e:	f8c8 304c 	str.w	r3, [r8, #76]	; 0x4c
   19f32:	f89d 306a 	ldrb.w	r3, [sp, #106]	; 0x6a
   19f36:	f888 1050 	strb.w	r1, [r8, #80]	; 0x50
   19f3a:	f8a8 2052 	strh.w	r2, [r8, #82]	; 0x52
   19f3e:	f888 3054 	strb.w	r3, [r8, #84]	; 0x54
   19f42:	f8bd 3072 	ldrh.w	r3, [sp, #114]	; 0x72
   19f46:	f8dd 106d 	ldr.w	r1, [sp, #109]	; 0x6d
   19f4a:	f89d 2071 	ldrb.w	r2, [sp, #113]	; 0x71
   19f4e:	f8c8 1058 	str.w	r1, [r8, #88]	; 0x58
   19f52:	f888 205c 	strb.w	r2, [r8, #92]	; 0x5c
   19f56:	f89d 1074 	ldrb.w	r1, [sp, #116]	; 0x74
   19f5a:	f8dd 2077 	ldr.w	r2, [sp, #119]	; 0x77
   19f5e:	f8a8 305e 	strh.w	r3, [r8, #94]	; 0x5e
   19f62:	f89d 307b 	ldrb.w	r3, [sp, #123]	; 0x7b
   19f66:	f888 1060 	strb.w	r1, [r8, #96]	; 0x60
   19f6a:	f8c8 2064 	str.w	r2, [r8, #100]	; 0x64
   19f6e:	f888 3068 	strb.w	r3, [r8, #104]	; 0x68
   19f72:	f89d 3080 	ldrb.w	r3, [sp, #128]	; 0x80
   19f76:	f89d 107f 	ldrb.w	r1, [sp, #127]	; 0x7f
   19f7a:	9a22      	ldr	r2, [sp, #136]	; 0x88
   19f7c:	f89d 0094 	ldrb.w	r0, [sp, #148]	; 0x94
   19f80:	ea41 2103 	orr.w	r1, r1, r3, lsl #8
   19f84:	f89d 3093 	ldrb.w	r3, [sp, #147]	; 0x93
   19f88:	f3c2 220f 	ubfx	r2, r2, #8, #16
   19f8c:	f8a8 106e 	strh.w	r1, [r8, #110]	; 0x6e
   19f90:	f8bd 107c 	ldrh.w	r1, [sp, #124]	; 0x7c
   19f94:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
   19f98:	f8a8 207a 	strh.w	r2, [r8, #122]	; 0x7a
   19f9c:	f89d 207e 	ldrb.w	r2, [sp, #126]	; 0x7e
   19fa0:	f8a8 3086 	strh.w	r3, [r8, #134]	; 0x86
   19fa4:	f8dd 3081 	ldr.w	r3, [sp, #129]	; 0x81
   19fa8:	f8a8 106a 	strh.w	r1, [r8, #106]	; 0x6a
   19fac:	f888 206c 	strb.w	r2, [r8, #108]	; 0x6c
   19fb0:	f8bd 2086 	ldrh.w	r2, [sp, #134]	; 0x86
   19fb4:	f89d 1085 	ldrb.w	r1, [sp, #133]	; 0x85
   19fb8:	f8c8 3070 	str.w	r3, [r8, #112]	; 0x70
   19fbc:	f89d 3088 	ldrb.w	r3, [sp, #136]	; 0x88
   19fc0:	f888 1074 	strb.w	r1, [r8, #116]	; 0x74
   19fc4:	f8a8 2076 	strh.w	r2, [r8, #118]	; 0x76
   19fc8:	f888 3078 	strb.w	r3, [r8, #120]	; 0x78
   19fcc:	f8bd 3090 	ldrh.w	r3, [sp, #144]	; 0x90
   19fd0:	f8dd 108b 	ldr.w	r1, [sp, #139]	; 0x8b
   19fd4:	f89d 208f 	ldrb.w	r2, [sp, #143]	; 0x8f
   19fd8:	f8c8 107c 	str.w	r1, [r8, #124]	; 0x7c
   19fdc:	f888 2080 	strb.w	r2, [r8, #128]	; 0x80
   19fe0:	f89d 1092 	ldrb.w	r1, [sp, #146]	; 0x92
   19fe4:	f8dd 2095 	ldr.w	r2, [sp, #149]	; 0x95
   19fe8:	f8a8 3082 	strh.w	r3, [r8, #130]	; 0x82
   19fec:	f89d 3099 	ldrb.w	r3, [sp, #153]	; 0x99
   19ff0:	f888 1084 	strb.w	r1, [r8, #132]	; 0x84
   19ff4:	f8c8 2088 	str.w	r2, [r8, #136]	; 0x88
   19ff8:	f888 308c 	strb.w	r3, [r8, #140]	; 0x8c
   19ffc:	f8bd 009a 	ldrh.w	r0, [sp, #154]	; 0x9a
   1a000:	9b27      	ldr	r3, [sp, #156]	; 0x9c
   1a002:	f89d 40a8 	ldrb.w	r4, [sp, #168]	; 0xa8
   1a006:	f89d 20a7 	ldrb.w	r2, [sp, #167]	; 0xa7
   1a00a:	f3c3 210f 	ubfx	r1, r3, #8, #16
   1a00e:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
   1a010:	ea42 2204 	orr.w	r2, r2, r4, lsl #8
   1a014:	f8a8 1092 	strh.w	r1, [r8, #146]	; 0x92
   1a018:	f89d 109c 	ldrb.w	r1, [sp, #156]	; 0x9c
   1a01c:	f8a8 209e 	strh.w	r2, [r8, #158]	; 0x9e
   1a020:	f3c3 230f 	ubfx	r3, r3, #8, #16
   1a024:	f8dd 209f 	ldr.w	r2, [sp, #159]	; 0x9f
   1a028:	f8a8 008e 	strh.w	r0, [r8, #142]	; 0x8e
   1a02c:	f8a8 30aa 	strh.w	r3, [r8, #170]	; 0xaa
   1a030:	f888 1090 	strb.w	r1, [r8, #144]	; 0x90
   1a034:	f89d 30a3 	ldrb.w	r3, [sp, #163]	; 0xa3
   1a038:	f8bd 10a4 	ldrh.w	r1, [sp, #164]	; 0xa4
   1a03c:	f8c8 2094 	str.w	r2, [r8, #148]	; 0x94
   1a040:	f89d 20a6 	ldrb.w	r2, [sp, #166]	; 0xa6
   1a044:	f888 3098 	strb.w	r3, [r8, #152]	; 0x98
   1a048:	f8dd 30a9 	ldr.w	r3, [sp, #169]	; 0xa9
   1a04c:	f8a8 109a 	strh.w	r1, [r8, #154]	; 0x9a
   1a050:	f888 209c 	strb.w	r2, [r8, #156]	; 0x9c
   1a054:	f8bd 20ae 	ldrh.w	r2, [sp, #174]	; 0xae
   1a058:	f89d 10ad 	ldrb.w	r1, [sp, #173]	; 0xad
   1a05c:	f8c8 30a0 	str.w	r3, [r8, #160]	; 0xa0
   1a060:	f89d 30b0 	ldrb.w	r3, [sp, #176]	; 0xb0
   1a064:	f888 10a4 	strb.w	r1, [r8, #164]	; 0xa4
   1a068:	f8a8 20a6 	strh.w	r2, [r8, #166]	; 0xa6
   1a06c:	f888 30a8 	strb.w	r3, [r8, #168]	; 0xa8
   1a070:	f8bd 30b8 	ldrh.w	r3, [sp, #184]	; 0xb8
   1a074:	f8dd 10b3 	ldr.w	r1, [sp, #179]	; 0xb3
   1a078:	f89d 20b7 	ldrb.w	r2, [sp, #183]	; 0xb7
   1a07c:	f8c8 10ac 	str.w	r1, [r8, #172]	; 0xac
   1a080:	f888 20b0 	strb.w	r2, [r8, #176]	; 0xb0
   1a084:	f8a8 30b2 	strh.w	r3, [r8, #178]	; 0xb2
   1a088:	f89d 30bc 	ldrb.w	r3, [sp, #188]	; 0xbc
   1a08c:	f89d 10bb 	ldrb.w	r1, [sp, #187]	; 0xbb
   1a090:	f89d 00d0 	ldrb.w	r0, [sp, #208]	; 0xd0
   1a094:	9a31      	ldr	r2, [sp, #196]	; 0xc4
   1a096:	ea41 2103 	orr.w	r1, r1, r3, lsl #8
   1a09a:	f89d 30cf 	ldrb.w	r3, [sp, #207]	; 0xcf
   1a09e:	f89d 40ba 	ldrb.w	r4, [sp, #186]	; 0xba
   1a0a2:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
   1a0a6:	f3c2 220f 	ubfx	r2, r2, #8, #16
   1a0aa:	f8a8 10b6 	strh.w	r1, [r8, #182]	; 0xb6
   1a0ae:	f8a8 30ce 	strh.w	r3, [r8, #206]	; 0xce
   1a0b2:	f888 40b4 	strb.w	r4, [r8, #180]	; 0xb4
   1a0b6:	f8a8 20c2 	strh.w	r2, [r8, #194]	; 0xc2
   1a0ba:	f8bd 20c2 	ldrh.w	r2, [sp, #194]	; 0xc2
   1a0be:	f89d 10c1 	ldrb.w	r1, [sp, #193]	; 0xc1
   1a0c2:	f89d 30c4 	ldrb.w	r3, [sp, #196]	; 0xc4
   1a0c6:	f8dd 00bd 	ldr.w	r0, [sp, #189]	; 0xbd
   1a0ca:	f888 10bc 	strb.w	r1, [r8, #188]	; 0xbc
   1a0ce:	f8a8 20be 	strh.w	r2, [r8, #190]	; 0xbe
   1a0d2:	f8c8 00b8 	str.w	r0, [r8, #184]	; 0xb8
   1a0d6:	f888 30c0 	strb.w	r3, [r8, #192]	; 0xc0
   1a0da:	f8bd 30cc 	ldrh.w	r3, [sp, #204]	; 0xcc
   1a0de:	f8dd 10c7 	ldr.w	r1, [sp, #199]	; 0xc7
   1a0e2:	f89d 20cb 	ldrb.w	r2, [sp, #203]	; 0xcb
   1a0e6:	f8c8 10c4 	str.w	r1, [r8, #196]	; 0xc4
   1a0ea:	f888 20c8 	strb.w	r2, [r8, #200]	; 0xc8
   1a0ee:	f89d 10ce 	ldrb.w	r1, [sp, #206]	; 0xce
   1a0f2:	f8dd 20d1 	ldr.w	r2, [sp, #209]	; 0xd1
   1a0f6:	f8a8 30ca 	strh.w	r3, [r8, #202]	; 0xca
   1a0fa:	f89d 30d5 	ldrb.w	r3, [sp, #213]	; 0xd5
   1a0fe:	f888 10cc 	strb.w	r1, [r8, #204]	; 0xcc
   1a102:	f8c8 20d0 	str.w	r2, [r8, #208]	; 0xd0
   1a106:	f888 30d4 	strb.w	r3, [r8, #212]	; 0xd4
   1a10a:	24d8      	movs	r4, #216	; 0xd8
   1a10c:	e66c      	b.n	19de8 <gnss_interface_read+0xcc>
   1a10e:	2039      	movs	r0, #57	; 0x39
   1a110:	f7f6 ffa4 	bl	1105c <bsd_os_errno_set>
   1a114:	f04f 34ff 	mov.w	r4, #4294967295
   1a118:	e671      	b.n	19dfe <gnss_interface_read+0xe2>
   1a11a:	2016      	movs	r0, #22
   1a11c:	f7f6 ff9e 	bl	1105c <bsd_os_errno_set>
   1a120:	f04f 34ff 	mov.w	r4, #4294967295
   1a124:	e66b      	b.n	19dfe <gnss_interface_read+0xe2>
   1a126:	2009      	movs	r0, #9
   1a128:	f7f6 ff98 	bl	1105c <bsd_os_errno_set>
   1a12c:	f04f 34ff 	mov.w	r4, #4294967295
   1a130:	e665      	b.n	19dfe <gnss_interface_read+0xe2>
   1a132:	bf00      	nop

0001a134 <gnss_interface_setopt>:
   1a134:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1a138:	f241 1402 	movw	r4, #4354	; 0x1102
   1a13c:	4222      	tst	r2, r4
   1a13e:	b086      	sub	sp, #24
   1a140:	4d9c      	ldr	r5, [pc, #624]	; (1a3b4 <gnss_interface_setopt+0x280>)
   1a142:	d004      	beq.n	1a14e <gnss_interface_setopt+0x1a>
   1a144:	682c      	ldr	r4, [r5, #0]
   1a146:	b2a4      	uxth	r4, r4
   1a148:	2c02      	cmp	r4, #2
   1a14a:	f040 8104 	bne.w	1a356 <gnss_interface_setopt+0x222>
   1a14e:	682c      	ldr	r4, [r5, #0]
   1a150:	0264      	lsls	r4, r4, #9
   1a152:	f100 8128 	bmi.w	1a3a6 <gnss_interface_setopt+0x272>
   1a156:	f5b1 7f01 	cmp.w	r1, #516	; 0x204
   1a15a:	f040 811e 	bne.w	1a39a <gnss_interface_setopt+0x266>
   1a15e:	4996      	ldr	r1, [pc, #600]	; (1a3b8 <gnss_interface_setopt+0x284>)
   1a160:	4288      	cmp	r0, r1
   1a162:	f040 8114 	bne.w	1a38e <gnss_interface_setopt+0x25a>
   1a166:	3a01      	subs	r2, #1
   1a168:	2a08      	cmp	r2, #8
   1a16a:	f200 80ec 	bhi.w	1a346 <gnss_interface_setopt+0x212>
   1a16e:	e8df f012 	tbh	[pc, r2, lsl #1]
   1a172:	0075      	.short	0x0075
   1a174:	00c200d8 	.word	0x00c200d8
   1a178:	008100cc 	.word	0x008100cc
   1a17c:	0098008c 	.word	0x0098008c
   1a180:	000900af 	.word	0x000900af
   1a184:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   1a186:	2a01      	cmp	r2, #1
   1a188:	f040 80dd 	bne.w	1a346 <gnss_interface_setopt+0x212>
   1a18c:	f241 1603 	movw	r6, #4355	; 0x1103
   1a190:	2240      	movs	r2, #64	; 0x40
   1a192:	4637      	mov	r7, r6
   1a194:	781b      	ldrb	r3, [r3, #0]
   1a196:	9202      	str	r2, [sp, #8]
   1a198:	f88d 3015 	strb.w	r3, [sp, #21]
   1a19c:	682b      	ldr	r3, [r5, #0]
   1a19e:	2112      	movs	r1, #18
   1a1a0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
   1a1a4:	4668      	mov	r0, sp
   1a1a6:	602b      	str	r3, [r5, #0]
   1a1a8:	f000 fbe4 	bl	1a974 <rpc_gnss_client_request_alloc>
   1a1ac:	4604      	mov	r4, r0
   1a1ae:	9800      	ldr	r0, [sp, #0]
   1a1b0:	2c00      	cmp	r4, #0
   1a1b2:	f040 80d6 	bne.w	1a362 <gnss_interface_setopt+0x22e>
   1a1b6:	2800      	cmp	r0, #0
   1a1b8:	f000 80da 	beq.w	1a370 <gnss_interface_setopt+0x23c>
   1a1bc:	2212      	movs	r2, #18
   1a1be:	f04f 0876 	mov.w	r8, #118	; 0x76
   1a1c2:	f04f 0e49 	mov.w	lr, #73	; 0x49
   1a1c6:	f04f 0a43 	mov.w	sl, #67	; 0x43
   1a1ca:	f04f 0954 	mov.w	r9, #84	; 0x54
   1a1ce:	f8df c1f0 	ldr.w	ip, [pc, #496]	; 1a3c0 <gnss_interface_setopt+0x28c>
   1a1d2:	a906      	add	r1, sp, #24
   1a1d4:	f8bc 3000 	ldrh.w	r3, [ip]
   1a1d8:	f880 800e 	strb.w	r8, [r0, #14]
   1a1dc:	3301      	adds	r3, #1
   1a1de:	b29b      	uxth	r3, r3
   1a1e0:	ea46 4603 	orr.w	r6, r6, r3, lsl #16
   1a1e4:	f841 6d14 	str.w	r6, [r1, #-20]!
   1a1e8:	7144      	strb	r4, [r0, #5]
   1a1ea:	7184      	strb	r4, [r0, #6]
   1a1ec:	71c4      	strb	r4, [r0, #7]
   1a1ee:	7204      	strb	r4, [r0, #8]
   1a1f0:	7244      	strb	r4, [r0, #9]
   1a1f2:	7284      	strb	r4, [r0, #10]
   1a1f4:	72c4      	strb	r4, [r0, #11]
   1a1f6:	7102      	strb	r2, [r0, #4]
   1a1f8:	f880 a00c 	strb.w	sl, [r0, #12]
   1a1fc:	f880 900d 	strb.w	r9, [r0, #13]
   1a200:	f880 e00f 	strb.w	lr, [r0, #15]
   1a204:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 1a3c4 <gnss_interface_setopt+0x290>
   1a208:	6800      	ldr	r0, [r0, #0]
   1a20a:	f8ac 3000 	strh.w	r3, [ip]
   1a20e:	f007 fb94 	bl	2193a <memcpy>
   1a212:	4639      	mov	r1, r7
   1a214:	9800      	ldr	r0, [sp, #0]
   1a216:	f8c8 4000 	str.w	r4, [r8]
   1a21a:	f000 fbbf 	bl	1a99c <rpc_gnss_client_request_send>
   1a21e:	2800      	cmp	r0, #0
   1a220:	f040 80ab 	bne.w	1a37a <gnss_interface_setopt+0x246>
   1a224:	4f65      	ldr	r7, [pc, #404]	; (1a3bc <gnss_interface_setopt+0x288>)
   1a226:	4e64      	ldr	r6, [pc, #400]	; (1a3b8 <gnss_interface_setopt+0x284>)
   1a228:	4639      	mov	r1, r7
   1a22a:	4630      	mov	r0, r6
   1a22c:	f7f6 fe82 	bl	10f34 <bsd_os_timedwait>
   1a230:	682c      	ldr	r4, [r5, #0]
   1a232:	f414 0480 	ands.w	r4, r4, #4194304	; 0x400000
   1a236:	d1f7      	bne.n	1a228 <gnss_interface_setopt+0xf4>
   1a238:	f8d8 0000 	ldr.w	r0, [r8]
   1a23c:	b118      	cbz	r0, 1a246 <gnss_interface_setopt+0x112>
   1a23e:	f000 fbcb 	bl	1a9d8 <rpc_gnss_client_data_free>
   1a242:	f8c8 4000 	str.w	r4, [r8]
   1a246:	682b      	ldr	r3, [r5, #0]
   1a248:	021b      	lsls	r3, r3, #8
   1a24a:	d576      	bpl.n	1a33a <gnss_interface_setopt+0x206>
   1a24c:	2000      	movs	r0, #0
   1a24e:	682b      	ldr	r3, [r5, #0]
   1a250:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
   1a254:	602b      	str	r3, [r5, #0]
   1a256:	b006      	add	sp, #24
   1a258:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1a25c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   1a25e:	2a02      	cmp	r2, #2
   1a260:	d171      	bne.n	1a346 <gnss_interface_setopt+0x212>
   1a262:	2208      	movs	r2, #8
   1a264:	f241 1603 	movw	r6, #4355	; 0x1103
   1a268:	881b      	ldrh	r3, [r3, #0]
   1a26a:	9202      	str	r2, [sp, #8]
   1a26c:	f8ad 300f 	strh.w	r3, [sp, #15]
   1a270:	4637      	mov	r7, r6
   1a272:	e793      	b.n	1a19c <gnss_interface_setopt+0x68>
   1a274:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   1a276:	2a01      	cmp	r2, #1
   1a278:	d165      	bne.n	1a346 <gnss_interface_setopt+0x212>
   1a27a:	f241 1603 	movw	r6, #4355	; 0x1103
   1a27e:	781b      	ldrb	r3, [r3, #0]
   1a280:	9202      	str	r2, [sp, #8]
   1a282:	f88d 300c 	strb.w	r3, [sp, #12]
   1a286:	4637      	mov	r7, r6
   1a288:	e788      	b.n	1a19c <gnss_interface_setopt+0x68>
   1a28a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   1a28c:	2a01      	cmp	r2, #1
   1a28e:	d15a      	bne.n	1a346 <gnss_interface_setopt+0x212>
   1a290:	2202      	movs	r2, #2
   1a292:	f241 1603 	movw	r6, #4355	; 0x1103
   1a296:	781b      	ldrb	r3, [r3, #0]
   1a298:	9202      	str	r2, [sp, #8]
   1a29a:	f88d 300d 	strb.w	r3, [sp, #13]
   1a29e:	4637      	mov	r7, r6
   1a2a0:	e77c      	b.n	1a19c <gnss_interface_setopt+0x68>
   1a2a2:	682a      	ldr	r2, [r5, #0]
   1a2a4:	b292      	uxth	r2, r2
   1a2a6:	2a02      	cmp	r2, #2
   1a2a8:	d155      	bne.n	1a356 <gnss_interface_setopt+0x222>
   1a2aa:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   1a2ac:	2a04      	cmp	r2, #4
   1a2ae:	d14a      	bne.n	1a346 <gnss_interface_setopt+0x212>
   1a2b0:	2101      	movs	r1, #1
   1a2b2:	f241 0604 	movw	r6, #4100	; 0x1004
   1a2b6:	682a      	ldr	r2, [r5, #0]
   1a2b8:	6818      	ldr	r0, [r3, #0]
   1a2ba:	0c13      	lsrs	r3, r2, #16
   1a2bc:	041b      	lsls	r3, r3, #16
   1a2be:	f043 0303 	orr.w	r3, r3, #3
   1a2c2:	f8cd 0009 	str.w	r0, [sp, #9]
   1a2c6:	602b      	str	r3, [r5, #0]
   1a2c8:	f88d 1008 	strb.w	r1, [sp, #8]
   1a2cc:	4637      	mov	r7, r6
   1a2ce:	e765      	b.n	1a19c <gnss_interface_setopt+0x68>
   1a2d0:	682b      	ldr	r3, [r5, #0]
   1a2d2:	b29b      	uxth	r3, r3
   1a2d4:	2b04      	cmp	r3, #4
   1a2d6:	d13e      	bne.n	1a356 <gnss_interface_setopt+0x222>
   1a2d8:	2300      	movs	r3, #0
   1a2da:	f241 0604 	movw	r6, #4100	; 0x1004
   1a2de:	f88d 3008 	strb.w	r3, [sp, #8]
   1a2e2:	f88d 3009 	strb.w	r3, [sp, #9]
   1a2e6:	f88d 300a 	strb.w	r3, [sp, #10]
   1a2ea:	f88d 300b 	strb.w	r3, [sp, #11]
   1a2ee:	f88d 300c 	strb.w	r3, [sp, #12]
   1a2f2:	4637      	mov	r7, r6
   1a2f4:	e752      	b.n	1a19c <gnss_interface_setopt+0x68>
   1a2f6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   1a2f8:	2a01      	cmp	r2, #1
   1a2fa:	d124      	bne.n	1a346 <gnss_interface_setopt+0x212>
   1a2fc:	781b      	ldrb	r3, [r3, #0]
   1a2fe:	2b01      	cmp	r3, #1
   1a300:	d121      	bne.n	1a346 <gnss_interface_setopt+0x212>
   1a302:	f241 1603 	movw	r6, #4355	; 0x1103
   1a306:	4637      	mov	r7, r6
   1a308:	e748      	b.n	1a19c <gnss_interface_setopt+0x68>
   1a30a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   1a30c:	2a02      	cmp	r2, #2
   1a30e:	d11a      	bne.n	1a346 <gnss_interface_setopt+0x212>
   1a310:	2220      	movs	r2, #32
   1a312:	f241 1603 	movw	r6, #4355	; 0x1103
   1a316:	881b      	ldrh	r3, [r3, #0]
   1a318:	9202      	str	r2, [sp, #8]
   1a31a:	f8ad 3013 	strh.w	r3, [sp, #19]
   1a31e:	4637      	mov	r7, r6
   1a320:	e73c      	b.n	1a19c <gnss_interface_setopt+0x68>
   1a322:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   1a324:	2a02      	cmp	r2, #2
   1a326:	d10e      	bne.n	1a346 <gnss_interface_setopt+0x212>
   1a328:	2210      	movs	r2, #16
   1a32a:	f241 1603 	movw	r6, #4355	; 0x1103
   1a32e:	881b      	ldrh	r3, [r3, #0]
   1a330:	9202      	str	r2, [sp, #8]
   1a332:	f8ad 3011 	strh.w	r3, [sp, #17]
   1a336:	4637      	mov	r7, r6
   1a338:	e730      	b.n	1a19c <gnss_interface_setopt+0x68>
   1a33a:	200e      	movs	r0, #14
   1a33c:	f7f6 fe8e 	bl	1105c <bsd_os_errno_set>
   1a340:	f04f 30ff 	mov.w	r0, #4294967295
   1a344:	e783      	b.n	1a24e <gnss_interface_setopt+0x11a>
   1a346:	2016      	movs	r0, #22
   1a348:	f7f6 fe88 	bl	1105c <bsd_os_errno_set>
   1a34c:	f04f 30ff 	mov.w	r0, #4294967295
   1a350:	b006      	add	sp, #24
   1a352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1a356:	200e      	movs	r0, #14
   1a358:	f7f6 fe80 	bl	1105c <bsd_os_errno_set>
   1a35c:	f04f 30ff 	mov.w	r0, #4294967295
   1a360:	e779      	b.n	1a256 <gnss_interface_setopt+0x122>
   1a362:	b128      	cbz	r0, 1a370 <gnss_interface_setopt+0x23c>
   1a364:	6803      	ldr	r3, [r0, #0]
   1a366:	b11b      	cbz	r3, 1a370 <gnss_interface_setopt+0x23c>
   1a368:	4618      	mov	r0, r3
   1a36a:	f000 fb35 	bl	1a9d8 <rpc_gnss_client_data_free>
   1a36e:	9800      	ldr	r0, [sp, #0]
   1a370:	f000 fb2a 	bl	1a9c8 <rpc_gnss_client_message_free>
   1a374:	2023      	movs	r0, #35	; 0x23
   1a376:	f7f6 fe71 	bl	1105c <bsd_os_errno_set>
   1a37a:	682b      	ldr	r3, [r5, #0]
   1a37c:	200e      	movs	r0, #14
   1a37e:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
   1a382:	602b      	str	r3, [r5, #0]
   1a384:	f7f6 fe6a 	bl	1105c <bsd_os_errno_set>
   1a388:	f04f 30ff 	mov.w	r0, #4294967295
   1a38c:	e763      	b.n	1a256 <gnss_interface_setopt+0x122>
   1a38e:	2009      	movs	r0, #9
   1a390:	f7f6 fe64 	bl	1105c <bsd_os_errno_set>
   1a394:	f04f 30ff 	mov.w	r0, #4294967295
   1a398:	e75d      	b.n	1a256 <gnss_interface_setopt+0x122>
   1a39a:	202a      	movs	r0, #42	; 0x2a
   1a39c:	f7f6 fe5e 	bl	1105c <bsd_os_errno_set>
   1a3a0:	f04f 30ff 	mov.w	r0, #4294967295
   1a3a4:	e757      	b.n	1a256 <gnss_interface_setopt+0x122>
   1a3a6:	2073      	movs	r0, #115	; 0x73
   1a3a8:	f7f6 fe58 	bl	1105c <bsd_os_errno_set>
   1a3ac:	f04f 30ff 	mov.w	r0, #4294967295
   1a3b0:	e751      	b.n	1a256 <gnss_interface_setopt+0x122>
   1a3b2:	bf00      	nop
   1a3b4:	200209fc 	.word	0x200209fc
   1a3b8:	49765443 	.word	0x49765443
   1a3bc:	200260a0 	.word	0x200260a0
   1a3c0:	200214dc 	.word	0x200214dc
   1a3c4:	20020a00 	.word	0x20020a00

0001a3c8 <gnss_interface_getopt>:
   1a3c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1a3cc:	4c81      	ldr	r4, [pc, #516]	; (1a5d4 <gnss_interface_getopt+0x20c>)
   1a3ce:	b087      	sub	sp, #28
   1a3d0:	6825      	ldr	r5, [r4, #0]
   1a3d2:	4698      	mov	r8, r3
   1a3d4:	b2ad      	uxth	r5, r5
   1a3d6:	2d02      	cmp	r5, #2
   1a3d8:	9b10      	ldr	r3, [sp, #64]	; 0x40
   1a3da:	f040 80dd 	bne.w	1a598 <gnss_interface_getopt+0x1d0>
   1a3de:	6825      	ldr	r5, [r4, #0]
   1a3e0:	03ee      	lsls	r6, r5, #15
   1a3e2:	f100 80eb 	bmi.w	1a5bc <gnss_interface_getopt+0x1f4>
   1a3e6:	6825      	ldr	r5, [r4, #0]
   1a3e8:	01ed      	lsls	r5, r5, #7
   1a3ea:	f100 80ed 	bmi.w	1a5c8 <gnss_interface_getopt+0x200>
   1a3ee:	f5b1 7f01 	cmp.w	r1, #516	; 0x204
   1a3f2:	f040 80d7 	bne.w	1a5a4 <gnss_interface_getopt+0x1dc>
   1a3f6:	4978      	ldr	r1, [pc, #480]	; (1a5d8 <gnss_interface_getopt+0x210>)
   1a3f8:	4288      	cmp	r0, r1
   1a3fa:	f040 80d9 	bne.w	1a5b0 <gnss_interface_getopt+0x1e8>
   1a3fe:	f1b8 0f00 	cmp.w	r8, #0
   1a402:	d00b      	beq.n	1a41c <gnss_interface_getopt+0x54>
   1a404:	b153      	cbz	r3, 1a41c <gnss_interface_getopt+0x54>
   1a406:	1e57      	subs	r7, r2, #1
   1a408:	2f05      	cmp	r7, #5
   1a40a:	d807      	bhi.n	1a41c <gnss_interface_getopt+0x54>
   1a40c:	e8df f007 	tbb	[pc, r7]
   1a410:	0f030f0f 	.word	0x0f030f0f
   1a414:	0303      	.short	0x0303
   1a416:	681b      	ldr	r3, [r3, #0]
   1a418:	2b01      	cmp	r3, #1
   1a41a:	d00b      	beq.n	1a434 <gnss_interface_getopt+0x6c>
   1a41c:	2016      	movs	r0, #22
   1a41e:	f7f6 fe1d 	bl	1105c <bsd_os_errno_set>
   1a422:	f04f 35ff 	mov.w	r5, #4294967295
   1a426:	4628      	mov	r0, r5
   1a428:	b007      	add	sp, #28
   1a42a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1a42e:	681b      	ldr	r3, [r3, #0]
   1a430:	2b02      	cmp	r3, #2
   1a432:	d1f3      	bne.n	1a41c <gnss_interface_getopt+0x54>
   1a434:	6823      	ldr	r3, [r4, #0]
   1a436:	2212      	movs	r2, #18
   1a438:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
   1a43c:	2100      	movs	r1, #0
   1a43e:	a801      	add	r0, sp, #4
   1a440:	6023      	str	r3, [r4, #0]
   1a442:	f007 fa87 	bl	21954 <memset>
   1a446:	2112      	movs	r1, #18
   1a448:	4668      	mov	r0, sp
   1a44a:	f000 fa93 	bl	1a974 <rpc_gnss_client_request_alloc>
   1a44e:	4605      	mov	r5, r0
   1a450:	9800      	ldr	r0, [sp, #0]
   1a452:	2d00      	cmp	r5, #0
   1a454:	f040 808a 	bne.w	1a56c <gnss_interface_getopt+0x1a4>
   1a458:	2800      	cmp	r0, #0
   1a45a:	f000 808e 	beq.w	1a57a <gnss_interface_getopt+0x1b2>
   1a45e:	f241 1602 	movw	r6, #4354	; 0x1102
   1a462:	f04f 0e49 	mov.w	lr, #73	; 0x49
   1a466:	2212      	movs	r2, #18
   1a468:	f04f 0976 	mov.w	r9, #118	; 0x76
   1a46c:	f04f 0b43 	mov.w	fp, #67	; 0x43
   1a470:	f04f 0a54 	mov.w	sl, #84	; 0x54
   1a474:	f8df c168 	ldr.w	ip, [pc, #360]	; 1a5e0 <gnss_interface_getopt+0x218>
   1a478:	f880 e00f 	strb.w	lr, [r0, #15]
   1a47c:	f8bc 3000 	ldrh.w	r3, [ip]
   1a480:	f880 900e 	strb.w	r9, [r0, #14]
   1a484:	3301      	adds	r3, #1
   1a486:	b29b      	uxth	r3, r3
   1a488:	ea46 4e03 	orr.w	lr, r6, r3, lsl #16
   1a48c:	f8cd e004 	str.w	lr, [sp, #4]
   1a490:	7145      	strb	r5, [r0, #5]
   1a492:	7185      	strb	r5, [r0, #6]
   1a494:	71c5      	strb	r5, [r0, #7]
   1a496:	7205      	strb	r5, [r0, #8]
   1a498:	7245      	strb	r5, [r0, #9]
   1a49a:	7285      	strb	r5, [r0, #10]
   1a49c:	72c5      	strb	r5, [r0, #11]
   1a49e:	a901      	add	r1, sp, #4
   1a4a0:	7102      	strb	r2, [r0, #4]
   1a4a2:	f880 b00c 	strb.w	fp, [r0, #12]
   1a4a6:	f880 a00d 	strb.w	sl, [r0, #13]
   1a4aa:	f8df 9138 	ldr.w	r9, [pc, #312]	; 1a5e4 <gnss_interface_getopt+0x21c>
   1a4ae:	6800      	ldr	r0, [r0, #0]
   1a4b0:	f8ac 3000 	strh.w	r3, [ip]
   1a4b4:	f007 fa41 	bl	2193a <memcpy>
   1a4b8:	4631      	mov	r1, r6
   1a4ba:	9800      	ldr	r0, [sp, #0]
   1a4bc:	f8c9 5000 	str.w	r5, [r9]
   1a4c0:	f000 fa6c 	bl	1a99c <rpc_gnss_client_request_send>
   1a4c4:	2800      	cmp	r0, #0
   1a4c6:	d15d      	bne.n	1a584 <gnss_interface_getopt+0x1bc>
   1a4c8:	4e44      	ldr	r6, [pc, #272]	; (1a5dc <gnss_interface_getopt+0x214>)
   1a4ca:	4d43      	ldr	r5, [pc, #268]	; (1a5d8 <gnss_interface_getopt+0x210>)
   1a4cc:	4631      	mov	r1, r6
   1a4ce:	4628      	mov	r0, r5
   1a4d0:	f7f6 fd30 	bl	10f34 <bsd_os_timedwait>
   1a4d4:	6823      	ldr	r3, [r4, #0]
   1a4d6:	01db      	lsls	r3, r3, #7
   1a4d8:	d4f8      	bmi.n	1a4cc <gnss_interface_getopt+0x104>
   1a4da:	f8d9 0000 	ldr.w	r0, [r9]
   1a4de:	b1d8      	cbz	r0, 1a518 <gnss_interface_getopt+0x150>
   1a4e0:	6825      	ldr	r5, [r4, #0]
   1a4e2:	f015 7500 	ands.w	r5, r5, #33554432	; 0x2000000
   1a4e6:	d00f      	beq.n	1a508 <gnss_interface_getopt+0x140>
   1a4e8:	2f05      	cmp	r7, #5
   1a4ea:	d837      	bhi.n	1a55c <gnss_interface_getopt+0x194>
   1a4ec:	e8df f007 	tbb	[pc, r7]
   1a4f0:	2b26201a 	.word	0x2b26201a
   1a4f4:	0331      	.short	0x0331
   1a4f6:	2500      	movs	r5, #0
   1a4f8:	7b43      	ldrb	r3, [r0, #13]
   1a4fa:	f888 3000 	strb.w	r3, [r8]
   1a4fe:	f000 fa6b 	bl	1a9d8 <rpc_gnss_client_data_free>
   1a502:	2300      	movs	r3, #0
   1a504:	f8c9 3000 	str.w	r3, [r9]
   1a508:	6823      	ldr	r3, [r4, #0]
   1a50a:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
   1a50e:	6023      	str	r3, [r4, #0]
   1a510:	4628      	mov	r0, r5
   1a512:	b007      	add	sp, #28
   1a514:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1a518:	6823      	ldr	r3, [r4, #0]
   1a51a:	4605      	mov	r5, r0
   1a51c:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
   1a520:	6023      	str	r3, [r4, #0]
   1a522:	e7f5      	b.n	1a510 <gnss_interface_getopt+0x148>
   1a524:	f8b0 300f 	ldrh.w	r3, [r0, #15]
   1a528:	2500      	movs	r5, #0
   1a52a:	f8a8 3000 	strh.w	r3, [r8]
   1a52e:	e7e6      	b.n	1a4fe <gnss_interface_getopt+0x136>
   1a530:	f8b0 3011 	ldrh.w	r3, [r0, #17]
   1a534:	2500      	movs	r5, #0
   1a536:	f8a8 3000 	strh.w	r3, [r8]
   1a53a:	e7e0      	b.n	1a4fe <gnss_interface_getopt+0x136>
   1a53c:	7b83      	ldrb	r3, [r0, #14]
   1a53e:	2500      	movs	r5, #0
   1a540:	f888 3000 	strb.w	r3, [r8]
   1a544:	e7db      	b.n	1a4fe <gnss_interface_getopt+0x136>
   1a546:	f8b0 3013 	ldrh.w	r3, [r0, #19]
   1a54a:	2500      	movs	r5, #0
   1a54c:	f8a8 3000 	strh.w	r3, [r8]
   1a550:	e7d5      	b.n	1a4fe <gnss_interface_getopt+0x136>
   1a552:	7b03      	ldrb	r3, [r0, #12]
   1a554:	2500      	movs	r5, #0
   1a556:	f888 3000 	strb.w	r3, [r8]
   1a55a:	e7d0      	b.n	1a4fe <gnss_interface_getopt+0x136>
   1a55c:	2016      	movs	r0, #22
   1a55e:	f7f6 fd7d 	bl	1105c <bsd_os_errno_set>
   1a562:	f04f 35ff 	mov.w	r5, #4294967295
   1a566:	f8d9 0000 	ldr.w	r0, [r9]
   1a56a:	e7c8      	b.n	1a4fe <gnss_interface_getopt+0x136>
   1a56c:	b128      	cbz	r0, 1a57a <gnss_interface_getopt+0x1b2>
   1a56e:	6803      	ldr	r3, [r0, #0]
   1a570:	b11b      	cbz	r3, 1a57a <gnss_interface_getopt+0x1b2>
   1a572:	4618      	mov	r0, r3
   1a574:	f000 fa30 	bl	1a9d8 <rpc_gnss_client_data_free>
   1a578:	9800      	ldr	r0, [sp, #0]
   1a57a:	f000 fa25 	bl	1a9c8 <rpc_gnss_client_message_free>
   1a57e:	2023      	movs	r0, #35	; 0x23
   1a580:	f7f6 fd6c 	bl	1105c <bsd_os_errno_set>
   1a584:	6823      	ldr	r3, [r4, #0]
   1a586:	200e      	movs	r0, #14
   1a588:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
   1a58c:	6023      	str	r3, [r4, #0]
   1a58e:	f04f 35ff 	mov.w	r5, #4294967295
   1a592:	f7f6 fd63 	bl	1105c <bsd_os_errno_set>
   1a596:	e746      	b.n	1a426 <gnss_interface_getopt+0x5e>
   1a598:	200e      	movs	r0, #14
   1a59a:	f7f6 fd5f 	bl	1105c <bsd_os_errno_set>
   1a59e:	f04f 35ff 	mov.w	r5, #4294967295
   1a5a2:	e740      	b.n	1a426 <gnss_interface_getopt+0x5e>
   1a5a4:	202a      	movs	r0, #42	; 0x2a
   1a5a6:	f7f6 fd59 	bl	1105c <bsd_os_errno_set>
   1a5aa:	f04f 35ff 	mov.w	r5, #4294967295
   1a5ae:	e73a      	b.n	1a426 <gnss_interface_getopt+0x5e>
   1a5b0:	2009      	movs	r0, #9
   1a5b2:	f7f6 fd53 	bl	1105c <bsd_os_errno_set>
   1a5b6:	f04f 35ff 	mov.w	r5, #4294967295
   1a5ba:	e734      	b.n	1a426 <gnss_interface_getopt+0x5e>
   1a5bc:	2005      	movs	r0, #5
   1a5be:	f7f6 fd4d 	bl	1105c <bsd_os_errno_set>
   1a5c2:	f04f 35ff 	mov.w	r5, #4294967295
   1a5c6:	e72e      	b.n	1a426 <gnss_interface_getopt+0x5e>
   1a5c8:	2073      	movs	r0, #115	; 0x73
   1a5ca:	f7f6 fd47 	bl	1105c <bsd_os_errno_set>
   1a5ce:	f04f 35ff 	mov.w	r5, #4294967295
   1a5d2:	e728      	b.n	1a426 <gnss_interface_getopt+0x5e>
   1a5d4:	200209fc 	.word	0x200209fc
   1a5d8:	49765443 	.word	0x49765443
   1a5dc:	200260a0 	.word	0x200260a0
   1a5e0:	200214dc 	.word	0x200214dc
   1a5e4:	20020a00 	.word	0x20020a00

0001a5e8 <gnss_interface_init>:
   1a5e8:	2100      	movs	r1, #0
   1a5ea:	b538      	push	{r3, r4, r5, lr}
   1a5ec:	4c09      	ldr	r4, [pc, #36]	; (1a614 <gnss_interface_init+0x2c>)
   1a5ee:	4d0a      	ldr	r5, [pc, #40]	; (1a618 <gnss_interface_init+0x30>)
   1a5f0:	6822      	ldr	r2, [r4, #0]
   1a5f2:	480a      	ldr	r0, [pc, #40]	; (1a61c <gnss_interface_init+0x34>)
   1a5f4:	4b0a      	ldr	r3, [pc, #40]	; (1a620 <gnss_interface_init+0x38>)
   1a5f6:	402a      	ands	r2, r5
   1a5f8:	6022      	str	r2, [r4, #0]
   1a5fa:	8001      	strh	r1, [r0, #0]
   1a5fc:	6019      	str	r1, [r3, #0]
   1a5fe:	f000 f9b3 	bl	1a968 <rpc_gnss_client_init>
   1a602:	b928      	cbnz	r0, 1a610 <gnss_interface_init+0x28>
   1a604:	6823      	ldr	r3, [r4, #0]
   1a606:	402b      	ands	r3, r5
   1a608:	f043 0301 	orr.w	r3, r3, #1
   1a60c:	6023      	str	r3, [r4, #0]
   1a60e:	bd38      	pop	{r3, r4, r5, pc}
   1a610:	2003      	movs	r0, #3
   1a612:	bd38      	pop	{r3, r4, r5, pc}
   1a614:	200209fc 	.word	0x200209fc
   1a618:	ffff0000 	.word	0xffff0000
   1a61c:	200214dc 	.word	0x200214dc
   1a620:	20020a00 	.word	0x20020a00

0001a624 <gnss_interface_open>:
   1a624:	2902      	cmp	r1, #2
   1a626:	b510      	push	{r4, lr}
   1a628:	d121      	bne.n	1a66e <gnss_interface_open+0x4a>
   1a62a:	4c14      	ldr	r4, [pc, #80]	; (1a67c <gnss_interface_open+0x58>)
   1a62c:	6823      	ldr	r3, [r4, #0]
   1a62e:	b29b      	uxth	r3, r3
   1a630:	2b01      	cmp	r3, #1
   1a632:	d116      	bne.n	1a662 <gnss_interface_open+0x3e>
   1a634:	6823      	ldr	r3, [r4, #0]
   1a636:	4608      	mov	r0, r1
   1a638:	0c1b      	lsrs	r3, r3, #16
   1a63a:	041b      	lsls	r3, r3, #16
   1a63c:	f043 0302 	orr.w	r3, r3, #2
   1a640:	2200      	movs	r2, #0
   1a642:	490f      	ldr	r1, [pc, #60]	; (1a680 <gnss_interface_open+0x5c>)
   1a644:	6023      	str	r3, [r4, #0]
   1a646:	f000 faad 	bl	1aba4 <packet_handler_create>
   1a64a:	4a0e      	ldr	r2, [pc, #56]	; (1a684 <gnss_interface_open+0x60>)
   1a64c:	6010      	str	r0, [r2, #0]
   1a64e:	b140      	cbz	r0, 1a662 <gnss_interface_open+0x3e>
   1a650:	6823      	ldr	r3, [r4, #0]
   1a652:	6802      	ldr	r2, [r0, #0]
   1a654:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   1a658:	6812      	ldr	r2, [r2, #0]
   1a65a:	6023      	str	r3, [r4, #0]
   1a65c:	4790      	blx	r2
   1a65e:	480a      	ldr	r0, [pc, #40]	; (1a688 <gnss_interface_open+0x64>)
   1a660:	bd10      	pop	{r4, pc}
   1a662:	200e      	movs	r0, #14
   1a664:	f7f6 fcfa 	bl	1105c <bsd_os_errno_set>
   1a668:	f04f 30ff 	mov.w	r0, #4294967295
   1a66c:	bd10      	pop	{r4, pc}
   1a66e:	2029      	movs	r0, #41	; 0x29
   1a670:	f7f6 fcf4 	bl	1105c <bsd_os_errno_set>
   1a674:	f04f 30ff 	mov.w	r0, #4294967295
   1a678:	bd10      	pop	{r4, pc}
   1a67a:	bf00      	nop
   1a67c:	200209fc 	.word	0x200209fc
   1a680:	0001996d 	.word	0x0001996d
   1a684:	20020a04 	.word	0x20020a04
   1a688:	49765443 	.word	0x49765443

0001a68c <gnss_interface_close>:
   1a68c:	b530      	push	{r4, r5, lr}
   1a68e:	4b13      	ldr	r3, [pc, #76]	; (1a6dc <gnss_interface_close+0x50>)
   1a690:	b083      	sub	sp, #12
   1a692:	4298      	cmp	r0, r3
   1a694:	d11c      	bne.n	1a6d0 <gnss_interface_close+0x44>
   1a696:	4c12      	ldr	r4, [pc, #72]	; (1a6e0 <gnss_interface_close+0x54>)
   1a698:	6823      	ldr	r3, [r4, #0]
   1a69a:	b29b      	uxth	r3, r3
   1a69c:	2b04      	cmp	r3, #4
   1a69e:	d00f      	beq.n	1a6c0 <gnss_interface_close+0x34>
   1a6a0:	4d10      	ldr	r5, [pc, #64]	; (1a6e4 <gnss_interface_close+0x58>)
   1a6a2:	6828      	ldr	r0, [r5, #0]
   1a6a4:	b118      	cbz	r0, 1a6ae <gnss_interface_close+0x22>
   1a6a6:	f000 fa9d 	bl	1abe4 <packet_handler_delete>
   1a6aa:	2300      	movs	r3, #0
   1a6ac:	602b      	str	r3, [r5, #0]
   1a6ae:	2000      	movs	r0, #0
   1a6b0:	6823      	ldr	r3, [r4, #0]
   1a6b2:	0c1b      	lsrs	r3, r3, #16
   1a6b4:	041b      	lsls	r3, r3, #16
   1a6b6:	f043 0301 	orr.w	r3, r3, #1
   1a6ba:	6023      	str	r3, [r4, #0]
   1a6bc:	b003      	add	sp, #12
   1a6be:	bd30      	pop	{r4, r5, pc}
   1a6c0:	2300      	movs	r3, #0
   1a6c2:	2208      	movs	r2, #8
   1a6c4:	9300      	str	r3, [sp, #0]
   1a6c6:	f44f 7101 	mov.w	r1, #516	; 0x204
   1a6ca:	f7fc fe31 	bl	17330 <nrf_setsockopt>
   1a6ce:	e7e7      	b.n	1a6a0 <gnss_interface_close+0x14>
   1a6d0:	2009      	movs	r0, #9
   1a6d2:	f7f6 fcc3 	bl	1105c <bsd_os_errno_set>
   1a6d6:	f04f 30ff 	mov.w	r0, #4294967295
   1a6da:	e7ef      	b.n	1a6bc <gnss_interface_close+0x30>
   1a6dc:	49765443 	.word	0x49765443
   1a6e0:	200209fc 	.word	0x200209fc
   1a6e4:	20020a04 	.word	0x20020a04

0001a6e8 <rpc_gnss_serialize_utc>:
   1a6e8:	4603      	mov	r3, r0
   1a6ea:	b1d8      	cbz	r0, 1a724 <rpc_gnss_serialize_utc+0x3c>
   1a6ec:	b1d1      	cbz	r1, 1a724 <rpc_gnss_serialize_utc+0x3c>
   1a6ee:	2000      	movs	r0, #0
   1a6f0:	2201      	movs	r2, #1
   1a6f2:	7048      	strb	r0, [r1, #1]
   1a6f4:	700a      	strb	r2, [r1, #0]
   1a6f6:	685a      	ldr	r2, [r3, #4]
   1a6f8:	2010      	movs	r0, #16
   1a6fa:	f8c1 2006 	str.w	r2, [r1, #6]
   1a6fe:	681a      	ldr	r2, [r3, #0]
   1a700:	f8c1 2002 	str.w	r2, [r1, #2]
   1a704:	f993 200a 	ldrsb.w	r2, [r3, #10]
   1a708:	730a      	strb	r2, [r1, #12]
   1a70a:	f993 200d 	ldrsb.w	r2, [r3, #13]
   1a70e:	73ca      	strb	r2, [r1, #15]
   1a710:	f993 200c 	ldrsb.w	r2, [r3, #12]
   1a714:	738a      	strb	r2, [r1, #14]
   1a716:	7a1a      	ldrb	r2, [r3, #8]
   1a718:	728a      	strb	r2, [r1, #10]
   1a71a:	7ada      	ldrb	r2, [r3, #11]
   1a71c:	734a      	strb	r2, [r1, #13]
   1a71e:	7a5b      	ldrb	r3, [r3, #9]
   1a720:	72cb      	strb	r3, [r1, #11]
   1a722:	4770      	bx	lr
   1a724:	f04f 30ff 	mov.w	r0, #4294967295
   1a728:	4770      	bx	lr
   1a72a:	bf00      	nop

0001a72c <rpc_gnss_serialize_ephe>:
   1a72c:	4603      	mov	r3, r0
   1a72e:	2800      	cmp	r0, #0
   1a730:	d04b      	beq.n	1a7ca <rpc_gnss_serialize_ephe+0x9e>
   1a732:	2900      	cmp	r1, #0
   1a734:	d049      	beq.n	1a7ca <rpc_gnss_serialize_ephe+0x9e>
   1a736:	2000      	movs	r0, #0
   1a738:	2202      	movs	r2, #2
   1a73a:	7048      	strb	r0, [r1, #1]
   1a73c:	700a      	strb	r2, [r1, #0]
   1a73e:	68da      	ldr	r2, [r3, #12]
   1a740:	2040      	movs	r0, #64	; 0x40
   1a742:	f8c1 200b 	str.w	r2, [r1, #11]
   1a746:	f9b3 2008 	ldrsh.w	r2, [r3, #8]
   1a74a:	f8a1 2009 	strh.w	r2, [r1, #9]
   1a74e:	f993 2006 	ldrsb.w	r2, [r3, #6]
   1a752:	720a      	strb	r2, [r1, #8]
   1a754:	f9b3 2044 	ldrsh.w	r2, [r3, #68]	; 0x44
   1a758:	878a      	strh	r2, [r1, #60]	; 0x3c
   1a75a:	f9b3 203e 	ldrsh.w	r2, [r3, #62]	; 0x3e
   1a75e:	86ca      	strh	r2, [r1, #54]	; 0x36
   1a760:	f9b3 2042 	ldrsh.w	r2, [r3, #66]	; 0x42
   1a764:	874a      	strh	r2, [r1, #58]	; 0x3a
   1a766:	f9b3 203c 	ldrsh.w	r2, [r3, #60]	; 0x3c
   1a76a:	868a      	strh	r2, [r1, #52]	; 0x34
   1a76c:	f9b3 2046 	ldrsh.w	r2, [r3, #70]	; 0x46
   1a770:	87ca      	strh	r2, [r1, #62]	; 0x3e
   1a772:	f9b3 2040 	ldrsh.w	r2, [r3, #64]	; 0x40
   1a776:	870a      	strh	r2, [r1, #56]	; 0x38
   1a778:	f9b3 201c 	ldrsh.w	r2, [r3, #28]
   1a77c:	830a      	strh	r2, [r1, #24]
   1a77e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   1a780:	f8c1 2022 	str.w	r2, [r1, #34]	; 0x22
   1a784:	7c9a      	ldrb	r2, [r3, #18]
   1a786:	744a      	strb	r2, [r1, #17]
   1a788:	785a      	ldrb	r2, [r3, #1]
   1a78a:	70ca      	strb	r2, [r1, #3]
   1a78c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
   1a78e:	62ca      	str	r2, [r1, #44]	; 0x2c
   1a790:	f9b3 202c 	ldrsh.w	r2, [r3, #44]	; 0x2c
   1a794:	84ca      	strh	r2, [r1, #38]	; 0x26
   1a796:	885a      	ldrh	r2, [r3, #2]
   1a798:	808a      	strh	r2, [r1, #4]
   1a79a:	6a1a      	ldr	r2, [r3, #32]
   1a79c:	f8c1 201a 	str.w	r2, [r1, #26]
   1a7a0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
   1a7a2:	630a      	str	r2, [r1, #48]	; 0x30
   1a7a4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
   1a7a6:	f8c1 201e 	str.w	r2, [r1, #30]
   1a7aa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
   1a7ac:	628a      	str	r2, [r1, #40]	; 0x28
   1a7ae:	781a      	ldrb	r2, [r3, #0]
   1a7b0:	708a      	strb	r2, [r1, #2]
   1a7b2:	f993 2010 	ldrsb.w	r2, [r3, #16]
   1a7b6:	73ca      	strb	r2, [r1, #15]
   1a7b8:	889a      	ldrh	r2, [r3, #4]
   1a7ba:	80ca      	strh	r2, [r1, #6]
   1a7bc:	8a9a      	ldrh	r2, [r3, #20]
   1a7be:	824a      	strh	r2, [r1, #18]
   1a7c0:	7c5a      	ldrb	r2, [r3, #17]
   1a7c2:	740a      	strb	r2, [r1, #16]
   1a7c4:	699b      	ldr	r3, [r3, #24]
   1a7c6:	614b      	str	r3, [r1, #20]
   1a7c8:	4770      	bx	lr
   1a7ca:	f04f 30ff 	mov.w	r0, #4294967295
   1a7ce:	4770      	bx	lr

0001a7d0 <rpc_gnss_serialize_alm>:
   1a7d0:	4603      	mov	r3, r0
   1a7d2:	b360      	cbz	r0, 1a82e <rpc_gnss_serialize_alm+0x5e>
   1a7d4:	b359      	cbz	r1, 1a82e <rpc_gnss_serialize_alm+0x5e>
   1a7d6:	2000      	movs	r0, #0
   1a7d8:	2203      	movs	r2, #3
   1a7da:	7048      	strb	r0, [r1, #1]
   1a7dc:	700a      	strb	r2, [r1, #0]
   1a7de:	f9b3 201c 	ldrsh.w	r2, [r3, #28]
   1a7e2:	2021      	movs	r0, #33	; 0x21
   1a7e4:	f8a1 201d 	strh.w	r2, [r1, #29]
   1a7e8:	f9b3 201e 	ldrsh.w	r2, [r3, #30]
   1a7ec:	f8a1 201f 	strh.w	r2, [r1, #31]
   1a7f0:	f9b3 2006 	ldrsh.w	r2, [r3, #6]
   1a7f4:	810a      	strh	r2, [r1, #8]
   1a7f6:	889a      	ldrh	r2, [r3, #4]
   1a7f8:	80ca      	strh	r2, [r1, #6]
   1a7fa:	78da      	ldrb	r2, [r3, #3]
   1a7fc:	714a      	strb	r2, [r1, #5]
   1a7fe:	699a      	ldr	r2, [r3, #24]
   1a800:	f8c1 2019 	str.w	r2, [r1, #25]
   1a804:	691a      	ldr	r2, [r3, #16]
   1a806:	f8c1 2011 	str.w	r2, [r1, #17]
   1a80a:	f9b3 2008 	ldrsh.w	r2, [r3, #8]
   1a80e:	814a      	strh	r2, [r1, #10]
   1a810:	68da      	ldr	r2, [r3, #12]
   1a812:	f8c1 200d 	str.w	r2, [r1, #13]
   1a816:	7a9a      	ldrb	r2, [r3, #10]
   1a818:	730a      	strb	r2, [r1, #12]
   1a81a:	781a      	ldrb	r2, [r3, #0]
   1a81c:	708a      	strb	r2, [r1, #2]
   1a81e:	789a      	ldrb	r2, [r3, #2]
   1a820:	710a      	strb	r2, [r1, #4]
   1a822:	695a      	ldr	r2, [r3, #20]
   1a824:	f8c1 2015 	str.w	r2, [r1, #21]
   1a828:	785b      	ldrb	r3, [r3, #1]
   1a82a:	70cb      	strb	r3, [r1, #3]
   1a82c:	4770      	bx	lr
   1a82e:	f04f 30ff 	mov.w	r0, #4294967295
   1a832:	4770      	bx	lr

0001a834 <rpc_gnss_serialize_klob>:
   1a834:	4603      	mov	r3, r0
   1a836:	b1f0      	cbz	r0, 1a876 <rpc_gnss_serialize_klob+0x42>
   1a838:	b1e9      	cbz	r1, 1a876 <rpc_gnss_serialize_klob+0x42>
   1a83a:	2000      	movs	r0, #0
   1a83c:	2204      	movs	r2, #4
   1a83e:	7048      	strb	r0, [r1, #1]
   1a840:	700a      	strb	r2, [r1, #0]
   1a842:	f993 2000 	ldrsb.w	r2, [r3]
   1a846:	200a      	movs	r0, #10
   1a848:	708a      	strb	r2, [r1, #2]
   1a84a:	f993 2001 	ldrsb.w	r2, [r3, #1]
   1a84e:	70ca      	strb	r2, [r1, #3]
   1a850:	f993 2002 	ldrsb.w	r2, [r3, #2]
   1a854:	710a      	strb	r2, [r1, #4]
   1a856:	f993 2003 	ldrsb.w	r2, [r3, #3]
   1a85a:	714a      	strb	r2, [r1, #5]
   1a85c:	f993 2004 	ldrsb.w	r2, [r3, #4]
   1a860:	718a      	strb	r2, [r1, #6]
   1a862:	f993 2005 	ldrsb.w	r2, [r3, #5]
   1a866:	71ca      	strb	r2, [r1, #7]
   1a868:	f993 2006 	ldrsb.w	r2, [r3, #6]
   1a86c:	720a      	strb	r2, [r1, #8]
   1a86e:	f993 3007 	ldrsb.w	r3, [r3, #7]
   1a872:	724b      	strb	r3, [r1, #9]
   1a874:	4770      	bx	lr
   1a876:	f04f 30ff 	mov.w	r0, #4294967295
   1a87a:	4770      	bx	lr

0001a87c <rpc_gnss_serialize_nequick>:
   1a87c:	4603      	mov	r3, r0
   1a87e:	b198      	cbz	r0, 1a8a8 <rpc_gnss_serialize_nequick+0x2c>
   1a880:	b191      	cbz	r1, 1a8a8 <rpc_gnss_serialize_nequick+0x2c>
   1a882:	2000      	movs	r0, #0
   1a884:	2205      	movs	r2, #5
   1a886:	7048      	strb	r0, [r1, #1]
   1a888:	700a      	strb	r2, [r1, #0]
   1a88a:	f9b3 2000 	ldrsh.w	r2, [r3]
   1a88e:	200a      	movs	r0, #10
   1a890:	804a      	strh	r2, [r1, #2]
   1a892:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
   1a896:	808a      	strh	r2, [r1, #4]
   1a898:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
   1a89c:	80ca      	strh	r2, [r1, #6]
   1a89e:	799a      	ldrb	r2, [r3, #6]
   1a8a0:	720a      	strb	r2, [r1, #8]
   1a8a2:	79db      	ldrb	r3, [r3, #7]
   1a8a4:	724b      	strb	r3, [r1, #9]
   1a8a6:	4770      	bx	lr
   1a8a8:	f04f 30ff 	mov.w	r0, #4294967295
   1a8ac:	4770      	bx	lr
   1a8ae:	bf00      	nop

0001a8b0 <rpc_gnss_serialize_time_and_sv_tow>:
   1a8b0:	b310      	cbz	r0, 1a8f8 <rpc_gnss_serialize_time_and_sv_tow+0x48>
   1a8b2:	b309      	cbz	r1, 1a8f8 <rpc_gnss_serialize_time_and_sv_tow+0x48>
   1a8b4:	b470      	push	{r4, r5, r6}
   1a8b6:	2500      	movs	r5, #0
   1a8b8:	2606      	movs	r6, #6
   1a8ba:	460c      	mov	r4, r1
   1a8bc:	704d      	strb	r5, [r1, #1]
   1a8be:	700e      	strb	r6, [r1, #0]
   1a8c0:	462b      	mov	r3, r5
   1a8c2:	8805      	ldrh	r5, [r0, #0]
   1a8c4:	4602      	mov	r2, r0
   1a8c6:	804d      	strh	r5, [r1, #2]
   1a8c8:	68c5      	ldr	r5, [r0, #12]
   1a8ca:	f8c1 500a 	str.w	r5, [r1, #10]
   1a8ce:	8905      	ldrh	r5, [r0, #8]
   1a8d0:	810d      	strh	r5, [r1, #8]
   1a8d2:	6840      	ldr	r0, [r0, #4]
   1a8d4:	6048      	str	r0, [r1, #4]
   1a8d6:	8a15      	ldrh	r5, [r2, #16]
   1a8d8:	eb03 0043 	add.w	r0, r3, r3, lsl #1
   1a8dc:	4408      	add	r0, r1
   1a8de:	81c5      	strh	r5, [r0, #14]
   1a8e0:	7c90      	ldrb	r0, [r2, #18]
   1a8e2:	3301      	adds	r3, #1
   1a8e4:	2b20      	cmp	r3, #32
   1a8e6:	7420      	strb	r0, [r4, #16]
   1a8e8:	f102 0204 	add.w	r2, r2, #4
   1a8ec:	f104 0403 	add.w	r4, r4, #3
   1a8f0:	d1f1      	bne.n	1a8d6 <rpc_gnss_serialize_time_and_sv_tow+0x26>
   1a8f2:	206e      	movs	r0, #110	; 0x6e
   1a8f4:	bc70      	pop	{r4, r5, r6}
   1a8f6:	4770      	bx	lr
   1a8f8:	f04f 30ff 	mov.w	r0, #4294967295
   1a8fc:	4770      	bx	lr
   1a8fe:	bf00      	nop

0001a900 <rpc_gnss_serialize_location>:
   1a900:	4603      	mov	r3, r0
   1a902:	b1c8      	cbz	r0, 1a938 <rpc_gnss_serialize_location+0x38>
   1a904:	b1c1      	cbz	r1, 1a938 <rpc_gnss_serialize_location+0x38>
   1a906:	2000      	movs	r0, #0
   1a908:	2207      	movs	r2, #7
   1a90a:	7048      	strb	r0, [r1, #1]
   1a90c:	700a      	strb	r2, [r1, #0]
   1a90e:	f9b3 2008 	ldrsh.w	r2, [r3, #8]
   1a912:	2011      	movs	r0, #17
   1a914:	814a      	strh	r2, [r1, #10]
   1a916:	7b9a      	ldrb	r2, [r3, #14]
   1a918:	740a      	strb	r2, [r1, #16]
   1a91a:	681a      	ldr	r2, [r3, #0]
   1a91c:	f8c1 2002 	str.w	r2, [r1, #2]
   1a920:	685a      	ldr	r2, [r3, #4]
   1a922:	f8c1 2006 	str.w	r2, [r1, #6]
   1a926:	7b1a      	ldrb	r2, [r3, #12]
   1a928:	738a      	strb	r2, [r1, #14]
   1a92a:	7b5a      	ldrb	r2, [r3, #13]
   1a92c:	73ca      	strb	r2, [r1, #15]
   1a92e:	7a9a      	ldrb	r2, [r3, #10]
   1a930:	730a      	strb	r2, [r1, #12]
   1a932:	7adb      	ldrb	r3, [r3, #11]
   1a934:	734b      	strb	r3, [r1, #13]
   1a936:	4770      	bx	lr
   1a938:	f04f 30ff 	mov.w	r0, #4294967295
   1a93c:	4770      	bx	lr
   1a93e:	bf00      	nop

0001a940 <rpc_gnss_serialize_integrity>:
   1a940:	b148      	cbz	r0, 1a956 <rpc_gnss_serialize_integrity+0x16>
   1a942:	b141      	cbz	r1, 1a956 <rpc_gnss_serialize_integrity+0x16>
   1a944:	2200      	movs	r2, #0
   1a946:	2308      	movs	r3, #8
   1a948:	704a      	strb	r2, [r1, #1]
   1a94a:	700b      	strb	r3, [r1, #0]
   1a94c:	6803      	ldr	r3, [r0, #0]
   1a94e:	2006      	movs	r0, #6
   1a950:	f8c1 3002 	str.w	r3, [r1, #2]
   1a954:	4770      	bx	lr
   1a956:	f04f 30ff 	mov.w	r0, #4294967295
   1a95a:	4770      	bx	lr

0001a95c <gnss_client_event_handler>:
   1a95c:	f850 1b08 	ldr.w	r1, [r0], #8
   1a960:	0c09      	lsrs	r1, r1, #16
   1a962:	f7ff b811 	b.w	19988 <rpc_gnss_event_handler>
   1a966:	bf00      	nop

0001a968 <rpc_gnss_client_init>:
   1a968:	4801      	ldr	r0, [pc, #4]	; (1a970 <rpc_gnss_client_init+0x8>)
   1a96a:	f7fe bb73 	b.w	19054 <rpc_client_register>
   1a96e:	bf00      	nop
   1a970:	00022f14 	.word	0x00022f14

0001a974 <rpc_gnss_client_request_alloc>:
   1a974:	2300      	movs	r3, #0
   1a976:	b510      	push	{r4, lr}
   1a978:	b082      	sub	sp, #8
   1a97a:	9301      	str	r3, [sp, #4]
   1a97c:	b158      	cbz	r0, 1a996 <rpc_gnss_client_request_alloc+0x22>
   1a97e:	4604      	mov	r4, r0
   1a980:	aa01      	add	r2, sp, #4
   1a982:	2007      	movs	r0, #7
   1a984:	f7fe fd9e 	bl	194c4 <rpc_message_alloc>
   1a988:	b918      	cbnz	r0, 1a992 <rpc_gnss_client_request_alloc+0x1e>
   1a98a:	9b01      	ldr	r3, [sp, #4]
   1a98c:	b10b      	cbz	r3, 1a992 <rpc_gnss_client_request_alloc+0x1e>
   1a98e:	3308      	adds	r3, #8
   1a990:	6023      	str	r3, [r4, #0]
   1a992:	b002      	add	sp, #8
   1a994:	bd10      	pop	{r4, pc}
   1a996:	2007      	movs	r0, #7
   1a998:	b002      	add	sp, #8
   1a99a:	bd10      	pop	{r4, pc}

0001a99c <rpc_gnss_client_request_send>:
   1a99c:	f401 4370 	and.w	r3, r1, #61440	; 0xf000
   1a9a0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
   1a9a4:	d10b      	bne.n	1a9be <rpc_gnss_client_request_send+0x22>
   1a9a6:	b160      	cbz	r0, 1a9c2 <rpc_gnss_client_request_send+0x26>
   1a9a8:	4603      	mov	r3, r0
   1a9aa:	f830 2c08 	ldrh.w	r2, [r0, #-8]
   1a9ae:	2007      	movs	r0, #7
   1a9b0:	ea42 4101 	orr.w	r1, r2, r1, lsl #16
   1a9b4:	f843 1d08 	str.w	r1, [r3, #-8]!
   1a9b8:	4619      	mov	r1, r3
   1a9ba:	f7fe bd6b 	b.w	19494 <rpc_message_send>
   1a9be:	200f      	movs	r0, #15
   1a9c0:	4770      	bx	lr
   1a9c2:	2007      	movs	r0, #7
   1a9c4:	4770      	bx	lr
   1a9c6:	bf00      	nop

0001a9c8 <rpc_gnss_client_message_free>:
   1a9c8:	b120      	cbz	r0, 1a9d4 <rpc_gnss_client_message_free+0xc>
   1a9ca:	f1a0 0108 	sub.w	r1, r0, #8
   1a9ce:	2007      	movs	r0, #7
   1a9d0:	f7fe bdaa 	b.w	19528 <rpc_message_free>
   1a9d4:	2007      	movs	r0, #7
   1a9d6:	4770      	bx	lr

0001a9d8 <rpc_gnss_client_data_free>:
   1a9d8:	b118      	cbz	r0, 1a9e2 <rpc_gnss_client_data_free+0xa>
   1a9da:	4601      	mov	r1, r0
   1a9dc:	2007      	movs	r0, #7
   1a9de:	f7fe beb5 	b.w	1974c <rpc_message_data_free>
   1a9e2:	2007      	movs	r0, #7
   1a9e4:	4770      	bx	lr
   1a9e6:	bf00      	nop

0001a9e8 <datagram_handler_init>:
   1a9e8:	b510      	push	{r4, lr}
   1a9ea:	4604      	mov	r4, r0
   1a9ec:	200c      	movs	r0, #12
   1a9ee:	f7f9 f8d9 	bl	13ba4 <nrf_malloc>
   1a9f2:	60e0      	str	r0, [r4, #12]
   1a9f4:	b118      	cbz	r0, 1a9fe <datagram_handler_init+0x16>
   1a9f6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1a9fa:	f7fc bb8f 	b.w	1711c <linked_list_init>
   1a9fe:	2004      	movs	r0, #4
   1aa00:	bd10      	pop	{r4, pc}
   1aa02:	bf00      	nop

0001aa04 <datagram_handler_put>:
   1aa04:	b570      	push	{r4, r5, r6, lr}
   1aa06:	4606      	mov	r6, r0
   1aa08:	2014      	movs	r0, #20
   1aa0a:	460d      	mov	r5, r1
   1aa0c:	f7f9 f8ca 	bl	13ba4 <nrf_malloc>
   1aa10:	b178      	cbz	r0, 1aa32 <datagram_handler_put+0x2e>
   1aa12:	682b      	ldr	r3, [r5, #0]
   1aa14:	4604      	mov	r4, r0
   1aa16:	6043      	str	r3, [r0, #4]
   1aa18:	686b      	ldr	r3, [r5, #4]
   1aa1a:	4601      	mov	r1, r0
   1aa1c:	6083      	str	r3, [r0, #8]
   1aa1e:	68eb      	ldr	r3, [r5, #12]
   1aa20:	60c3      	str	r3, [r0, #12]
   1aa22:	68ab      	ldr	r3, [r5, #8]
   1aa24:	6103      	str	r3, [r0, #16]
   1aa26:	68f0      	ldr	r0, [r6, #12]
   1aa28:	f7fc fb82 	bl	17130 <linked_list_push>
   1aa2c:	b920      	cbnz	r0, 1aa38 <datagram_handler_put+0x34>
   1aa2e:	6868      	ldr	r0, [r5, #4]
   1aa30:	bd70      	pop	{r4, r5, r6, pc}
   1aa32:	f04f 30ff 	mov.w	r0, #4294967295
   1aa36:	bd70      	pop	{r4, r5, r6, pc}
   1aa38:	4620      	mov	r0, r4
   1aa3a:	f7f9 f8bd 	bl	13bb8 <nrf_free>
   1aa3e:	f04f 30ff 	mov.w	r0, #4294967295
   1aa42:	bd70      	pop	{r4, r5, r6, pc}

0001aa44 <datagram_handler_get>:
   1aa44:	b5f0      	push	{r4, r5, r6, r7, lr}
   1aa46:	4606      	mov	r6, r0
   1aa48:	b085      	sub	sp, #20
   1aa4a:	68c0      	ldr	r0, [r0, #12]
   1aa4c:	460c      	mov	r4, r1
   1aa4e:	4617      	mov	r7, r2
   1aa50:	f7fc fb8e 	bl	17170 <linked_list_peek>
   1aa54:	2800      	cmp	r0, #0
   1aa56:	d037      	beq.n	1aac8 <datagram_handler_get+0x84>
   1aa58:	6882      	ldr	r2, [r0, #8]
   1aa5a:	4605      	mov	r5, r0
   1aa5c:	e9d4 0300 	ldrd	r0, r3, [r4]
   1aa60:	429a      	cmp	r2, r3
   1aa62:	bf28      	it	cs
   1aa64:	461a      	movcs	r2, r3
   1aa66:	6062      	str	r2, [r4, #4]
   1aa68:	b110      	cbz	r0, 1aa70 <datagram_handler_get+0x2c>
   1aa6a:	6869      	ldr	r1, [r5, #4]
   1aa6c:	f006 ff65 	bl	2193a <memcpy>
   1aa70:	68a0      	ldr	r0, [r4, #8]
   1aa72:	b118      	cbz	r0, 1aa7c <datagram_handler_get+0x38>
   1aa74:	692b      	ldr	r3, [r5, #16]
   1aa76:	b10b      	cbz	r3, 1aa7c <datagram_handler_get+0x38>
   1aa78:	68ea      	ldr	r2, [r5, #12]
   1aa7a:	b9e2      	cbnz	r2, 1aab6 <datagram_handler_get+0x72>
   1aa7c:	2300      	movs	r3, #0
   1aa7e:	60e3      	str	r3, [r4, #12]
   1aa80:	073b      	lsls	r3, r7, #28
   1aa82:	d502      	bpl.n	1aa8a <datagram_handler_get+0x46>
   1aa84:	6860      	ldr	r0, [r4, #4]
   1aa86:	b005      	add	sp, #20
   1aa88:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1aa8a:	68f0      	ldr	r0, [r6, #12]
   1aa8c:	f7fc fb66 	bl	1715c <linked_list_pop>
   1aa90:	4605      	mov	r5, r0
   1aa92:	2800      	cmp	r0, #0
   1aa94:	d0f6      	beq.n	1aa84 <datagram_handler_get+0x40>
   1aa96:	e9d0 3101 	ldrd	r3, r1, [r0, #4]
   1aa9a:	6902      	ldr	r2, [r0, #16]
   1aa9c:	9300      	str	r3, [sp, #0]
   1aa9e:	68c3      	ldr	r3, [r0, #12]
   1aaa0:	e9cd 1201 	strd	r1, r2, [sp, #4]
   1aaa4:	9303      	str	r3, [sp, #12]
   1aaa6:	4668      	mov	r0, sp
   1aaa8:	e9d6 3101 	ldrd	r3, r1, [r6, #4]
   1aaac:	4798      	blx	r3
   1aaae:	4628      	mov	r0, r5
   1aab0:	f7f9 f882 	bl	13bb8 <nrf_free>
   1aab4:	e7e6      	b.n	1aa84 <datagram_handler_get+0x40>
   1aab6:	68e3      	ldr	r3, [r4, #12]
   1aab8:	429a      	cmp	r2, r3
   1aaba:	bf28      	it	cs
   1aabc:	461a      	movcs	r2, r3
   1aabe:	60e2      	str	r2, [r4, #12]
   1aac0:	6929      	ldr	r1, [r5, #16]
   1aac2:	f006 ff3a 	bl	2193a <memcpy>
   1aac6:	e7db      	b.n	1aa80 <datagram_handler_get+0x3c>
   1aac8:	f04f 30ff 	mov.w	r0, #4294967295
   1aacc:	e7db      	b.n	1aa86 <datagram_handler_get+0x42>
   1aace:	bf00      	nop

0001aad0 <datagram_handler_available>:
   1aad0:	b508      	push	{r3, lr}
   1aad2:	68c0      	ldr	r0, [r0, #12]
   1aad4:	f7fc fb4c 	bl	17170 <linked_list_peek>
   1aad8:	b108      	cbz	r0, 1aade <datagram_handler_available+0xe>
   1aada:	6880      	ldr	r0, [r0, #8]
   1aadc:	bd08      	pop	{r3, pc}
   1aade:	f04f 30ff 	mov.w	r0, #4294967295
   1aae2:	bd08      	pop	{r3, pc}

0001aae4 <datagram_handler_flush>:
   1aae4:	b530      	push	{r4, r5, lr}
   1aae6:	4605      	mov	r5, r0
   1aae8:	68c0      	ldr	r0, [r0, #12]
   1aaea:	b085      	sub	sp, #20
   1aaec:	b9a8      	cbnz	r0, 1ab1a <datagram_handler_flush+0x36>
   1aaee:	e01a      	b.n	1ab26 <datagram_handler_flush+0x42>
   1aaf0:	68e8      	ldr	r0, [r5, #12]
   1aaf2:	f7fc fb33 	bl	1715c <linked_list_pop>
   1aaf6:	4604      	mov	r4, r0
   1aaf8:	b170      	cbz	r0, 1ab18 <datagram_handler_flush+0x34>
   1aafa:	e9d0 0101 	ldrd	r0, r1, [r0, #4]
   1aafe:	e9d4 3203 	ldrd	r3, r2, [r4, #12]
   1ab02:	e9cd 0100 	strd	r0, r1, [sp]
   1ab06:	e9cd 2302 	strd	r2, r3, [sp, #8]
   1ab0a:	e9d5 3101 	ldrd	r3, r1, [r5, #4]
   1ab0e:	4668      	mov	r0, sp
   1ab10:	4798      	blx	r3
   1ab12:	4620      	mov	r0, r4
   1ab14:	f7f9 f850 	bl	13bb8 <nrf_free>
   1ab18:	68e8      	ldr	r0, [r5, #12]
   1ab1a:	f7fc fb2f 	bl	1717c <linked_list_size_get>
   1ab1e:	2800      	cmp	r0, #0
   1ab20:	d1e6      	bne.n	1aaf0 <datagram_handler_flush+0xc>
   1ab22:	b005      	add	sp, #20
   1ab24:	bd30      	pop	{r4, r5, pc}
   1ab26:	2008      	movs	r0, #8
   1ab28:	b005      	add	sp, #20
   1ab2a:	bd30      	pop	{r4, r5, pc}

0001ab2c <datagram_handler_free>:
   1ab2c:	b530      	push	{r4, r5, lr}
   1ab2e:	4605      	mov	r5, r0
   1ab30:	68c0      	ldr	r0, [r0, #12]
   1ab32:	b085      	sub	sp, #20
   1ab34:	b9a0      	cbnz	r0, 1ab60 <datagram_handler_free+0x34>
   1ab36:	e01c      	b.n	1ab72 <datagram_handler_free+0x46>
   1ab38:	f7fc fb10 	bl	1715c <linked_list_pop>
   1ab3c:	4604      	mov	r4, r0
   1ab3e:	b170      	cbz	r0, 1ab5e <datagram_handler_free+0x32>
   1ab40:	e9d0 0101 	ldrd	r0, r1, [r0, #4]
   1ab44:	e9d4 3203 	ldrd	r3, r2, [r4, #12]
   1ab48:	e9cd 0100 	strd	r0, r1, [sp]
   1ab4c:	e9cd 2302 	strd	r2, r3, [sp, #8]
   1ab50:	e9d5 3101 	ldrd	r3, r1, [r5, #4]
   1ab54:	4668      	mov	r0, sp
   1ab56:	4798      	blx	r3
   1ab58:	4620      	mov	r0, r4
   1ab5a:	f7f9 f82d 	bl	13bb8 <nrf_free>
   1ab5e:	68e8      	ldr	r0, [r5, #12]
   1ab60:	f7fc fb0c 	bl	1717c <linked_list_size_get>
   1ab64:	4604      	mov	r4, r0
   1ab66:	68e8      	ldr	r0, [r5, #12]
   1ab68:	2c00      	cmp	r4, #0
   1ab6a:	d1e5      	bne.n	1ab38 <datagram_handler_free+0xc>
   1ab6c:	f7f9 f824 	bl	13bb8 <nrf_free>
   1ab70:	60ec      	str	r4, [r5, #12]
   1ab72:	b005      	add	sp, #20
   1ab74:	bd30      	pop	{r4, r5, pc}
   1ab76:	bf00      	nop

0001ab78 <null_handler_init>:
   1ab78:	2000      	movs	r0, #0
   1ab7a:	4770      	bx	lr

0001ab7c <null_handler_put>:
   1ab7c:	b510      	push	{r4, lr}
   1ab7e:	460c      	mov	r4, r1
   1ab80:	e9d0 3101 	ldrd	r3, r1, [r0, #4]
   1ab84:	4620      	mov	r0, r4
   1ab86:	4798      	blx	r3
   1ab88:	6860      	ldr	r0, [r4, #4]
   1ab8a:	bd10      	pop	{r4, pc}

0001ab8c <null_handler_get>:
   1ab8c:	f04f 30ff 	mov.w	r0, #4294967295
   1ab90:	4770      	bx	lr
   1ab92:	bf00      	nop

0001ab94 <null_handler_available>:
   1ab94:	f04f 30ff 	mov.w	r0, #4294967295
   1ab98:	4770      	bx	lr
   1ab9a:	bf00      	nop

0001ab9c <null_handler_flush>:
   1ab9c:	2000      	movs	r0, #0
   1ab9e:	4770      	bx	lr

0001aba0 <null_handler_free>:
   1aba0:	4770      	bx	lr
   1aba2:	bf00      	nop

0001aba4 <packet_handler_create>:
   1aba4:	2801      	cmp	r0, #1
   1aba6:	b538      	push	{r3, r4, r5, lr}
   1aba8:	460d      	mov	r5, r1
   1abaa:	4614      	mov	r4, r2
   1abac:	d00d      	beq.n	1abca <packet_handler_create+0x26>
   1abae:	db11      	blt.n	1abd4 <packet_handler_create+0x30>
   1abb0:	2803      	cmp	r0, #3
   1abb2:	dc0f      	bgt.n	1abd4 <packet_handler_create+0x30>
   1abb4:	2010      	movs	r0, #16
   1abb6:	f7f8 fff5 	bl	13ba4 <nrf_malloc>
   1abba:	2218      	movs	r2, #24
   1abbc:	b120      	cbz	r0, 1abc8 <packet_handler_create+0x24>
   1abbe:	4b08      	ldr	r3, [pc, #32]	; (1abe0 <packet_handler_create+0x3c>)
   1abc0:	6045      	str	r5, [r0, #4]
   1abc2:	4413      	add	r3, r2
   1abc4:	6084      	str	r4, [r0, #8]
   1abc6:	6003      	str	r3, [r0, #0]
   1abc8:	bd38      	pop	{r3, r4, r5, pc}
   1abca:	2014      	movs	r0, #20
   1abcc:	f7f8 ffea 	bl	13ba4 <nrf_malloc>
   1abd0:	2230      	movs	r2, #48	; 0x30
   1abd2:	e7f3      	b.n	1abbc <packet_handler_create+0x18>
   1abd4:	200c      	movs	r0, #12
   1abd6:	f7f8 ffe5 	bl	13ba4 <nrf_malloc>
   1abda:	2200      	movs	r2, #0
   1abdc:	e7ee      	b.n	1abbc <packet_handler_create+0x18>
   1abde:	bf00      	nop
   1abe0:	00022f24 	.word	0x00022f24

0001abe4 <packet_handler_delete>:
   1abe4:	b510      	push	{r4, lr}
   1abe6:	4604      	mov	r4, r0
   1abe8:	6803      	ldr	r3, [r0, #0]
   1abea:	691b      	ldr	r3, [r3, #16]
   1abec:	4798      	blx	r3
   1abee:	6823      	ldr	r3, [r4, #0]
   1abf0:	4620      	mov	r0, r4
   1abf2:	695b      	ldr	r3, [r3, #20]
   1abf4:	4798      	blx	r3
   1abf6:	4620      	mov	r0, r4
   1abf8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1abfc:	f7f8 bfdc 	b.w	13bb8 <nrf_free>

0001ac00 <stream_handler_init>:
   1ac00:	b510      	push	{r4, lr}
   1ac02:	4604      	mov	r4, r0
   1ac04:	200c      	movs	r0, #12
   1ac06:	f7f8 ffcd 	bl	13ba4 <nrf_malloc>
   1ac0a:	60e0      	str	r0, [r4, #12]
   1ac0c:	b128      	cbz	r0, 1ac1a <stream_handler_init+0x1a>
   1ac0e:	2300      	movs	r3, #0
   1ac10:	6123      	str	r3, [r4, #16]
   1ac12:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1ac16:	f7fc ba81 	b.w	1711c <linked_list_init>
   1ac1a:	2004      	movs	r0, #4
   1ac1c:	bd10      	pop	{r4, pc}
   1ac1e:	bf00      	nop

0001ac20 <stream_handler_put>:
   1ac20:	b570      	push	{r4, r5, r6, lr}
   1ac22:	4606      	mov	r6, r0
   1ac24:	2014      	movs	r0, #20
   1ac26:	460d      	mov	r5, r1
   1ac28:	f7f8 ffbc 	bl	13ba4 <nrf_malloc>
   1ac2c:	b178      	cbz	r0, 1ac4e <stream_handler_put+0x2e>
   1ac2e:	682b      	ldr	r3, [r5, #0]
   1ac30:	4604      	mov	r4, r0
   1ac32:	6043      	str	r3, [r0, #4]
   1ac34:	686b      	ldr	r3, [r5, #4]
   1ac36:	4601      	mov	r1, r0
   1ac38:	6083      	str	r3, [r0, #8]
   1ac3a:	68eb      	ldr	r3, [r5, #12]
   1ac3c:	60c3      	str	r3, [r0, #12]
   1ac3e:	68ab      	ldr	r3, [r5, #8]
   1ac40:	6103      	str	r3, [r0, #16]
   1ac42:	68f0      	ldr	r0, [r6, #12]
   1ac44:	f7fc fa74 	bl	17130 <linked_list_push>
   1ac48:	b920      	cbnz	r0, 1ac54 <stream_handler_put+0x34>
   1ac4a:	6868      	ldr	r0, [r5, #4]
   1ac4c:	bd70      	pop	{r4, r5, r6, pc}
   1ac4e:	f04f 30ff 	mov.w	r0, #4294967295
   1ac52:	bd70      	pop	{r4, r5, r6, pc}
   1ac54:	4620      	mov	r0, r4
   1ac56:	f7f8 ffaf 	bl	13bb8 <nrf_free>
   1ac5a:	f04f 30ff 	mov.w	r0, #4294967295
   1ac5e:	bd70      	pop	{r4, r5, r6, pc}

0001ac60 <stream_handler_get>:
   1ac60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1ac64:	4682      	mov	sl, r0
   1ac66:	b087      	sub	sp, #28
   1ac68:	68c0      	ldr	r0, [r0, #12]
   1ac6a:	4689      	mov	r9, r1
   1ac6c:	4693      	mov	fp, r2
   1ac6e:	f7fc fa7f 	bl	17170 <linked_list_peek>
   1ac72:	2800      	cmp	r0, #0
   1ac74:	d072      	beq.n	1ad5c <stream_handler_get+0xfc>
   1ac76:	4605      	mov	r5, r0
   1ac78:	f8d9 0008 	ldr.w	r0, [r9, #8]
   1ac7c:	b120      	cbz	r0, 1ac88 <stream_handler_get+0x28>
   1ac7e:	692b      	ldr	r3, [r5, #16]
   1ac80:	b113      	cbz	r3, 1ac88 <stream_handler_get+0x28>
   1ac82:	68ea      	ldr	r2, [r5, #12]
   1ac84:	2a00      	cmp	r2, #0
   1ac86:	d15c      	bne.n	1ad42 <stream_handler_get+0xe2>
   1ac88:	2300      	movs	r3, #0
   1ac8a:	f8c9 300c 	str.w	r3, [r9, #12]
   1ac8e:	f8d9 2000 	ldr.w	r2, [r9]
   1ac92:	f8d9 8004 	ldr.w	r8, [r9, #4]
   1ac96:	f8da 1010 	ldr.w	r1, [sl, #16]
   1ac9a:	9201      	str	r2, [sp, #4]
   1ac9c:	f1b8 0f00 	cmp.w	r8, #0
   1aca0:	d05a      	beq.n	1ad58 <stream_handler_get+0xf8>
   1aca2:	f00b 0308 	and.w	r3, fp, #8
   1aca6:	2400      	movs	r4, #0
   1aca8:	9300      	str	r3, [sp, #0]
   1acaa:	e010      	b.n	1acce <stream_handler_get+0x6e>
   1acac:	f8da 3010 	ldr.w	r3, [sl, #16]
   1acb0:	443b      	add	r3, r7
   1acb2:	f8ca 3010 	str.w	r3, [sl, #16]
   1acb6:	4628      	mov	r0, r5
   1acb8:	f7fc fa62 	bl	17180 <linked_list_get_next>
   1acbc:	443c      	add	r4, r7
   1acbe:	4605      	mov	r5, r0
   1acc0:	2800      	cmp	r0, #0
   1acc2:	d038      	beq.n	1ad36 <stream_handler_get+0xd6>
   1acc4:	45a0      	cmp	r8, r4
   1acc6:	d936      	bls.n	1ad36 <stream_handler_get+0xd6>
   1acc8:	2100      	movs	r1, #0
   1acca:	f8d9 2000 	ldr.w	r2, [r9]
   1acce:	68ae      	ldr	r6, [r5, #8]
   1acd0:	eba8 0b04 	sub.w	fp, r8, r4
   1acd4:	1a76      	subs	r6, r6, r1
   1acd6:	455e      	cmp	r6, fp
   1acd8:	4637      	mov	r7, r6
   1acda:	bf28      	it	cs
   1acdc:	465f      	movcs	r7, fp
   1acde:	b132      	cbz	r2, 1acee <stream_handler_get+0x8e>
   1ace0:	6868      	ldr	r0, [r5, #4]
   1ace2:	9b01      	ldr	r3, [sp, #4]
   1ace4:	4401      	add	r1, r0
   1ace6:	463a      	mov	r2, r7
   1ace8:	1918      	adds	r0, r3, r4
   1acea:	f006 fe26 	bl	2193a <memcpy>
   1acee:	9b00      	ldr	r3, [sp, #0]
   1acf0:	2b00      	cmp	r3, #0
   1acf2:	d1e0      	bne.n	1acb6 <stream_handler_get+0x56>
   1acf4:	455e      	cmp	r6, fp
   1acf6:	d8d9      	bhi.n	1acac <stream_handler_get+0x4c>
   1acf8:	f8da 000c 	ldr.w	r0, [sl, #12]
   1acfc:	f7fc fa2e 	bl	1715c <linked_list_pop>
   1ad00:	4606      	mov	r6, r0
   1ad02:	b170      	cbz	r0, 1ad22 <stream_handler_get+0xc2>
   1ad04:	e9d0 2301 	ldrd	r2, r3, [r0, #4]
   1ad08:	e9d0 0103 	ldrd	r0, r1, [r0, #12]
   1ad0c:	e9cd 2302 	strd	r2, r3, [sp, #8]
   1ad10:	e9cd 1004 	strd	r1, r0, [sp, #16]
   1ad14:	e9da 3101 	ldrd	r3, r1, [sl, #4]
   1ad18:	a802      	add	r0, sp, #8
   1ad1a:	4798      	blx	r3
   1ad1c:	4630      	mov	r0, r6
   1ad1e:	f7f8 ff4b 	bl	13bb8 <nrf_free>
   1ad22:	2300      	movs	r3, #0
   1ad24:	4628      	mov	r0, r5
   1ad26:	f8ca 3010 	str.w	r3, [sl, #16]
   1ad2a:	f7fc fa29 	bl	17180 <linked_list_get_next>
   1ad2e:	443c      	add	r4, r7
   1ad30:	4605      	mov	r5, r0
   1ad32:	2800      	cmp	r0, #0
   1ad34:	d1c6      	bne.n	1acc4 <stream_handler_get+0x64>
   1ad36:	4620      	mov	r0, r4
   1ad38:	f8c9 4004 	str.w	r4, [r9, #4]
   1ad3c:	b007      	add	sp, #28
   1ad3e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1ad42:	f8d9 300c 	ldr.w	r3, [r9, #12]
   1ad46:	429a      	cmp	r2, r3
   1ad48:	bf28      	it	cs
   1ad4a:	461a      	movcs	r2, r3
   1ad4c:	f8c9 200c 	str.w	r2, [r9, #12]
   1ad50:	6929      	ldr	r1, [r5, #16]
   1ad52:	f006 fdf2 	bl	2193a <memcpy>
   1ad56:	e79a      	b.n	1ac8e <stream_handler_get+0x2e>
   1ad58:	4644      	mov	r4, r8
   1ad5a:	e7ec      	b.n	1ad36 <stream_handler_get+0xd6>
   1ad5c:	f04f 30ff 	mov.w	r0, #4294967295
   1ad60:	e7ec      	b.n	1ad3c <stream_handler_get+0xdc>
   1ad62:	bf00      	nop

0001ad64 <stream_handler_available>:
   1ad64:	b510      	push	{r4, lr}
   1ad66:	4604      	mov	r4, r0
   1ad68:	68c0      	ldr	r0, [r0, #12]
   1ad6a:	f7fc fa01 	bl	17170 <linked_list_peek>
   1ad6e:	b150      	cbz	r0, 1ad86 <stream_handler_available+0x22>
   1ad70:	6924      	ldr	r4, [r4, #16]
   1ad72:	4264      	negs	r4, r4
   1ad74:	6883      	ldr	r3, [r0, #8]
   1ad76:	441c      	add	r4, r3
   1ad78:	f7fc fa02 	bl	17180 <linked_list_get_next>
   1ad7c:	2800      	cmp	r0, #0
   1ad7e:	d1f9      	bne.n	1ad74 <stream_handler_available+0x10>
   1ad80:	ea24 70e4 	bic.w	r0, r4, r4, asr #31
   1ad84:	bd10      	pop	{r4, pc}
   1ad86:	f04f 30ff 	mov.w	r0, #4294967295
   1ad8a:	bd10      	pop	{r4, pc}

0001ad8c <stream_handler_flush>:
   1ad8c:	b530      	push	{r4, r5, lr}
   1ad8e:	4605      	mov	r5, r0
   1ad90:	68c0      	ldr	r0, [r0, #12]
   1ad92:	b085      	sub	sp, #20
   1ad94:	b9a8      	cbnz	r0, 1adc2 <stream_handler_flush+0x36>
   1ad96:	e01a      	b.n	1adce <stream_handler_flush+0x42>
   1ad98:	68e8      	ldr	r0, [r5, #12]
   1ad9a:	f7fc f9df 	bl	1715c <linked_list_pop>
   1ad9e:	4604      	mov	r4, r0
   1ada0:	b170      	cbz	r0, 1adc0 <stream_handler_flush+0x34>
   1ada2:	e9d0 0101 	ldrd	r0, r1, [r0, #4]
   1ada6:	e9d4 3203 	ldrd	r3, r2, [r4, #12]
   1adaa:	e9cd 0100 	strd	r0, r1, [sp]
   1adae:	e9cd 2302 	strd	r2, r3, [sp, #8]
   1adb2:	e9d5 3101 	ldrd	r3, r1, [r5, #4]
   1adb6:	4668      	mov	r0, sp
   1adb8:	4798      	blx	r3
   1adba:	4620      	mov	r0, r4
   1adbc:	f7f8 fefc 	bl	13bb8 <nrf_free>
   1adc0:	68e8      	ldr	r0, [r5, #12]
   1adc2:	f7fc f9db 	bl	1717c <linked_list_size_get>
   1adc6:	2800      	cmp	r0, #0
   1adc8:	d1e6      	bne.n	1ad98 <stream_handler_flush+0xc>
   1adca:	b005      	add	sp, #20
   1adcc:	bd30      	pop	{r4, r5, pc}
   1adce:	2008      	movs	r0, #8
   1add0:	b005      	add	sp, #20
   1add2:	bd30      	pop	{r4, r5, pc}

0001add4 <stream_handler_free>:
   1add4:	b530      	push	{r4, r5, lr}
   1add6:	4605      	mov	r5, r0
   1add8:	68c0      	ldr	r0, [r0, #12]
   1adda:	b085      	sub	sp, #20
   1addc:	b9a0      	cbnz	r0, 1ae08 <stream_handler_free+0x34>
   1adde:	e01c      	b.n	1ae1a <stream_handler_free+0x46>
   1ade0:	f7fc f9bc 	bl	1715c <linked_list_pop>
   1ade4:	4604      	mov	r4, r0
   1ade6:	b170      	cbz	r0, 1ae06 <stream_handler_free+0x32>
   1ade8:	e9d0 0101 	ldrd	r0, r1, [r0, #4]
   1adec:	e9d4 3203 	ldrd	r3, r2, [r4, #12]
   1adf0:	e9cd 0100 	strd	r0, r1, [sp]
   1adf4:	e9cd 2302 	strd	r2, r3, [sp, #8]
   1adf8:	e9d5 3101 	ldrd	r3, r1, [r5, #4]
   1adfc:	4668      	mov	r0, sp
   1adfe:	4798      	blx	r3
   1ae00:	4620      	mov	r0, r4
   1ae02:	f7f8 fed9 	bl	13bb8 <nrf_free>
   1ae06:	68e8      	ldr	r0, [r5, #12]
   1ae08:	f7fc f9b8 	bl	1717c <linked_list_size_get>
   1ae0c:	4604      	mov	r4, r0
   1ae0e:	68e8      	ldr	r0, [r5, #12]
   1ae10:	2c00      	cmp	r4, #0
   1ae12:	d1e5      	bne.n	1ade0 <stream_handler_free+0xc>
   1ae14:	f7f8 fed0 	bl	13bb8 <nrf_free>
   1ae18:	60ec      	str	r4, [r5, #12]
   1ae1a:	b005      	add	sp, #20
   1ae1c:	bd30      	pop	{r4, r5, pc}
   1ae1e:	bf00      	nop

0001ae20 <SystemInit>:
    
    /* Enable the FPU if the compiler used floating point unit instructions. __FPU_USED is a MACRO defined by the
    * compiler. Since the FPU consumes energy, remember to disable FPU use in the compiler if floating point unit
    * operations are not used in your code. */
    #if (__FPU_USED == 1)
      SCB->CPACR |= (3UL << 20) | (3UL << 22);
   1ae20:	4a07      	ldr	r2, [pc, #28]	; (1ae40 <SystemInit+0x20>)
   1ae22:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
   1ae26:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
   1ae2a:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  __ASM volatile ("dsb 0xF":::"memory");
   1ae2e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   1ae32:	f3bf 8f6f 	isb	sy
    SystemCoreClock = __SYSTEM_CLOCK;
   1ae36:	4b03      	ldr	r3, [pc, #12]	; (1ae44 <SystemInit+0x24>)
   1ae38:	4a03      	ldr	r2, [pc, #12]	; (1ae48 <SystemInit+0x28>)
   1ae3a:	601a      	str	r2, [r3, #0]
      __DSB();
      __ISB();
    #endif
    
    SystemCoreClockUpdate();
}
   1ae3c:	4770      	bx	lr
   1ae3e:	bf00      	nop
   1ae40:	e000ed00 	.word	0xe000ed00
   1ae44:	200260a4 	.word	0x200260a4
   1ae48:	03d09000 	.word	0x03d09000

0001ae4c <z_sys_device_do_config_level>:
 * off and the next one begins.
 *
 * @param level init level to run.
 */
void z_sys_device_do_config_level(s32_t level)
{
   1ae4c:	b570      	push	{r4, r5, r6, lr}
		retval = device_conf->init(info);
		if (retval != 0) {
			/* Initialization failed. Clear the API struct so that
			 * device_get_binding() will not succeed for it.
			 */
			info->driver_api = NULL;
   1ae4e:	2600      	movs	r6, #0
	for (info = config_levels[level]; info < config_levels[level+1];
   1ae50:	4b08      	ldr	r3, [pc, #32]	; (1ae74 <z_sys_device_do_config_level+0x28>)
   1ae52:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
   1ae56:	3001      	adds	r0, #1
   1ae58:	f853 5020 	ldr.w	r5, [r3, r0, lsl #2]
   1ae5c:	42a5      	cmp	r5, r4
   1ae5e:	d800      	bhi.n	1ae62 <z_sys_device_do_config_level+0x16>
		} else {
			z_object_init(info);
		}
	}
}
   1ae60:	bd70      	pop	{r4, r5, r6, pc}
		retval = device_conf->init(info);
   1ae62:	6823      	ldr	r3, [r4, #0]
   1ae64:	4620      	mov	r0, r4
   1ae66:	685b      	ldr	r3, [r3, #4]
   1ae68:	4798      	blx	r3
		if (retval != 0) {
   1ae6a:	b100      	cbz	r0, 1ae6e <z_sys_device_do_config_level+0x22>
			info->driver_api = NULL;
   1ae6c:	6066      	str	r6, [r4, #4]
								info++) {
   1ae6e:	340c      	adds	r4, #12
   1ae70:	e7f4      	b.n	1ae5c <z_sys_device_do_config_level+0x10>
   1ae72:	bf00      	nop
   1ae74:	00022f6c 	.word	0x00022f6c

0001ae78 <z_impl_device_get_binding>:
	/* Split the search into two loops: in the common scenario, where
	 * device names are stored in ROM (and are referenced by the user
	 * with CONFIG_* macros), only cheap pointer comparisons will be
	 * performed.  Reserve string comparisons for a fallback.
	 */
	for (info = __device_init_start; info != __device_init_end; info++) {
   1ae78:	4b10      	ldr	r3, [pc, #64]	; (1aebc <z_impl_device_get_binding+0x44>)
{
   1ae7a:	b570      	push	{r4, r5, r6, lr}
   1ae7c:	4605      	mov	r5, r0
   1ae7e:	461e      	mov	r6, r3
	for (info = __device_init_start; info != __device_init_end; info++) {
   1ae80:	4c0f      	ldr	r4, [pc, #60]	; (1aec0 <z_impl_device_get_binding+0x48>)
   1ae82:	429c      	cmp	r4, r3
   1ae84:	d104      	bne.n	1ae90 <z_impl_device_get_binding+0x18>
		    (info->config->name == name)) {
			return info;
		}
	}

	for (info = __device_init_start; info != __device_init_end; info++) {
   1ae86:	4c0e      	ldr	r4, [pc, #56]	; (1aec0 <z_impl_device_get_binding+0x48>)
   1ae88:	42b4      	cmp	r4, r6
   1ae8a:	d109      	bne.n	1aea0 <z_impl_device_get_binding+0x28>
		if (strcmp(name, info->config->name) == 0) {
			return info;
		}
	}

	return NULL;
   1ae8c:	2400      	movs	r4, #0
   1ae8e:	e012      	b.n	1aeb6 <z_impl_device_get_binding+0x3e>
		if ((info->driver_api != NULL) &&
   1ae90:	6862      	ldr	r2, [r4, #4]
   1ae92:	b11a      	cbz	r2, 1ae9c <z_impl_device_get_binding+0x24>
		    (info->config->name == name)) {
   1ae94:	6822      	ldr	r2, [r4, #0]
		if ((info->driver_api != NULL) &&
   1ae96:	6812      	ldr	r2, [r2, #0]
   1ae98:	42aa      	cmp	r2, r5
   1ae9a:	d00c      	beq.n	1aeb6 <z_impl_device_get_binding+0x3e>
	for (info = __device_init_start; info != __device_init_end; info++) {
   1ae9c:	340c      	adds	r4, #12
   1ae9e:	e7f0      	b.n	1ae82 <z_impl_device_get_binding+0xa>
		if (info->driver_api == NULL) {
   1aea0:	6863      	ldr	r3, [r4, #4]
   1aea2:	b90b      	cbnz	r3, 1aea8 <z_impl_device_get_binding+0x30>
	for (info = __device_init_start; info != __device_init_end; info++) {
   1aea4:	340c      	adds	r4, #12
   1aea6:	e7ef      	b.n	1ae88 <z_impl_device_get_binding+0x10>
		if (strcmp(name, info->config->name) == 0) {
   1aea8:	6823      	ldr	r3, [r4, #0]
   1aeaa:	4628      	mov	r0, r5
   1aeac:	6819      	ldr	r1, [r3, #0]
   1aeae:	f7f1 ffd9 	bl	ce64 <strcmp>
   1aeb2:	2800      	cmp	r0, #0
   1aeb4:	d1f6      	bne.n	1aea4 <z_impl_device_get_binding+0x2c>
}
   1aeb6:	4620      	mov	r0, r4
   1aeb8:	bd70      	pop	{r4, r5, r6, pc}
   1aeba:	bf00      	nop
   1aebc:	20026364 	.word	0x20026364
   1aec0:	20026280 	.word	0x20026280

0001aec4 <z_impl_z_errno>:
#include <syscalls/z_errno_mrsh.c>

#else
int *z_impl_z_errno(void)
{
	return &_current->errno_var;
   1aec4:	4b01      	ldr	r3, [pc, #4]	; (1aecc <z_impl_z_errno+0x8>)
   1aec6:	6898      	ldr	r0, [r3, #8]
}
   1aec8:	3054      	adds	r0, #84	; 0x54
   1aeca:	4770      	bx	lr
   1aecc:	20021398 	.word	0x20021398

0001aed0 <z_fatal_error>:
	return 0;
#endif
}

void z_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
   1aed0:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   1aed4:	4605      	mov	r5, r0
   1aed6:	4688      	mov	r8, r1
	return z_impl_k_current_get();
   1aed8:	f002 f8c6 	bl	1d068 <z_impl_k_current_get>
	struct k_thread *thread = k_current_get();

	/* sanitycheck looks for the "ZEPHYR FATAL ERROR" string, don't
	 * change it without also updating sanitycheck
	 */
	LOG_ERR(">>> ZEPHYR FATAL ERROR %d: %s on CPU %d", reason,
   1aedc:	2301      	movs	r3, #1
   1aede:	4606      	mov	r6, r0
   1aee0:	f04f 0000 	mov.w	r0, #0
   1aee4:	2200      	movs	r2, #0
   1aee6:	f363 0007 	bfi	r0, r3, #0, #8
   1aeea:	4c2b      	ldr	r4, [pc, #172]	; (1af98 <z_fatal_error+0xc8>)
   1aeec:	4b2b      	ldr	r3, [pc, #172]	; (1af9c <z_fatal_error+0xcc>)
   1aeee:	2d04      	cmp	r5, #4
   1aef0:	eba4 0403 	sub.w	r4, r4, r3
   1aef4:	bf98      	it	ls
   1aef6:	4b2a      	ldrls	r3, [pc, #168]	; (1afa0 <z_fatal_error+0xd0>)
   1aef8:	f3c4 04c9 	ubfx	r4, r4, #3, #10
   1aefc:	bf94      	ite	ls
   1aefe:	f853 3025 	ldrls.w	r3, [r3, r5, lsl #2]
   1af02:	4b28      	ldrhi	r3, [pc, #160]	; (1afa4 <z_fatal_error+0xd4>)
   1af04:	9200      	str	r2, [sp, #0]
   1af06:	f364 108f 	bfi	r0, r4, #6, #10
   1af0a:	462a      	mov	r2, r5
   1af0c:	4926      	ldr	r1, [pc, #152]	; (1afa8 <z_fatal_error+0xd8>)
   1af0e:	f004 ffbb 	bl	1fe88 <log_string_sync>
 * @return true if execution state was in handler mode, before
 *              the current exception occurred, otherwise false.
 */
static ALWAYS_INLINE bool arch_is_in_nested_exception(const z_arch_esf_t *esf)
{
	return (esf->basic.xpsr & IPSR_ISR_Msk) ? (true) : (false);
   1af12:	f8d8 301c 	ldr.w	r3, [r8, #28]
   1af16:	f3c3 0308 	ubfx	r3, r3, #0, #9
	 * an IRQ or exception was being handled, or thread context.
	 *
	 * See #17656
	 */
#if defined(CONFIG_ARCH_HAS_NESTED_EXCEPTION_DETECTION)
	if (arch_is_in_nested_exception(esf)) {
   1af1a:	b14b      	cbz	r3, 1af30 <z_fatal_error+0x60>
		LOG_ERR("Fault during interrupt handling\n");
   1af1c:	f04f 0000 	mov.w	r0, #0
   1af20:	2301      	movs	r3, #1
   1af22:	f363 0007 	bfi	r0, r3, #0, #8
   1af26:	f364 108f 	bfi	r0, r4, #6, #10
   1af2a:	4920      	ldr	r1, [pc, #128]	; (1afac <z_fatal_error+0xdc>)
   1af2c:	f004 ffac 	bl	1fe88 <log_string_sync>
	}
#endif

	LOG_ERR("Current thread: %p (%s)", thread,
   1af30:	f04f 0700 	mov.w	r7, #0
   1af34:	2301      	movs	r3, #1
	const char *thread_name = k_thread_name_get(thread);
   1af36:	4630      	mov	r0, r6
	LOG_ERR("Current thread: %p (%s)", thread,
   1af38:	f363 0707 	bfi	r7, r3, #0, #8
   1af3c:	f364 178f 	bfi	r7, r4, #6, #10
	const char *thread_name = k_thread_name_get(thread);
   1af40:	f006 fc60 	bl	21804 <k_thread_name_get>
	if (thread_name == NULL || thread_name[0] == '\0') {
   1af44:	b328      	cbz	r0, 1af92 <z_fatal_error+0xc2>
   1af46:	7802      	ldrb	r2, [r0, #0]
		thread_name = "unknown";
   1af48:	4b19      	ldr	r3, [pc, #100]	; (1afb0 <z_fatal_error+0xe0>)
   1af4a:	2a00      	cmp	r2, #0
   1af4c:	bf08      	it	eq
   1af4e:	4618      	moveq	r0, r3
	LOG_ERR("Current thread: %p (%s)", thread,
   1af50:	f004 ffac 	bl	1feac <log_strdup>
   1af54:	4632      	mov	r2, r6
   1af56:	4603      	mov	r3, r0
   1af58:	4916      	ldr	r1, [pc, #88]	; (1afb4 <z_fatal_error+0xe4>)
   1af5a:	4638      	mov	r0, r7
   1af5c:	f004 ff94 	bl	1fe88 <log_string_sync>
		log_strdup(thread_name_get(thread)));

	k_sys_fatal_error_handler(reason, esf);
   1af60:	4641      	mov	r1, r8
   1af62:	4628      	mov	r0, r5
   1af64:	f7f7 fc34 	bl	127d0 <k_sys_fatal_error_handler>
	 *
	 * Note that k_thread_abort() returns on some architectures but
	 * not others; e.g. on ARC, x86_64, Xtensa with ASM2, ARM
	 */
	if (!IS_ENABLED(CONFIG_TEST)) {
		__ASSERT(reason != K_ERR_KERNEL_PANIC,
   1af68:	2d04      	cmp	r5, #4
   1af6a:	d10c      	bne.n	1af86 <z_fatal_error+0xb6>
   1af6c:	4912      	ldr	r1, [pc, #72]	; (1afb8 <z_fatal_error+0xe8>)
   1af6e:	2387      	movs	r3, #135	; 0x87
   1af70:	4a12      	ldr	r2, [pc, #72]	; (1afbc <z_fatal_error+0xec>)
   1af72:	4813      	ldr	r0, [pc, #76]	; (1afc0 <z_fatal_error+0xf0>)
   1af74:	f004 ff31 	bl	1fdda <printk>
   1af78:	4812      	ldr	r0, [pc, #72]	; (1afc4 <z_fatal_error+0xf4>)
   1af7a:	f004 ff2e 	bl	1fdda <printk>
   1af7e:	2187      	movs	r1, #135	; 0x87
   1af80:	480e      	ldr	r0, [pc, #56]	; (1afbc <z_fatal_error+0xec>)
   1af82:	f004 ff70 	bl	1fe66 <assert_post_action>
	z_impl_k_thread_abort(thread);
   1af86:	4630      	mov	r0, r6
			}
#endif /*CONFIG_ARCH_HAS_NESTED_EXCEPTION_DETECTION */
	}

	k_thread_abort(thread);
}
   1af88:	b002      	add	sp, #8
   1af8a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   1af8e:	f7f4 bcc7 	b.w	f920 <z_impl_k_thread_abort>
		thread_name = "unknown";
   1af92:	4807      	ldr	r0, [pc, #28]	; (1afb0 <z_fatal_error+0xe0>)
   1af94:	e7dc      	b.n	1af50 <z_fatal_error+0x80>
   1af96:	bf00      	nop
   1af98:	00022984 	.word	0x00022984
   1af9c:	00022924 	.word	0x00022924
   1afa0:	00022f84 	.word	0x00022f84
   1afa4:	00024ec7 	.word	0x00024ec7
   1afa8:	00024edd 	.word	0x00024edd
   1afac:	00024f05 	.word	0x00024f05
   1afb0:	00024ed5 	.word	0x00024ed5
   1afb4:	00024f26 	.word	0x00024f26
   1afb8:	00024f60 	.word	0x00024f60
   1afbc:	00024f3e 	.word	0x00024f3e
   1afc0:	00023451 	.word	0x00023451
   1afc4:	00024f7d 	.word	0x00024f7d

0001afc8 <idle>:
#else
#define IDLE_YIELD_IF_COOP() do { } while (false)
#endif

void idle(void *unused1, void *unused2, void *unused3)
{
   1afc8:	b508      	push	{r3, lr}
	_kernel.idle = ticks;
   1afca:	4d0b      	ldr	r5, [pc, #44]	; (1aff8 <idle+0x30>)
	__asm__ volatile(
   1afcc:	f04f 0220 	mov.w	r2, #32
   1afd0:	f3ef 8311 	mrs	r3, BASEPRI
   1afd4:	f382 8811 	msr	BASEPRI, r2
   1afd8:	f3bf 8f6f 	isb	sy
	s32_t ticks = z_get_next_timeout_expiry();
   1afdc:	f002 fc4a 	bl	1d874 <z_get_next_timeout_expiry>
	z_set_timeout_expiry((ticks < IDLE_THRESH) ? 1 : ticks, true);
   1afe0:	2101      	movs	r1, #1
	s32_t ticks = z_get_next_timeout_expiry();
   1afe2:	4604      	mov	r4, r0
	z_set_timeout_expiry((ticks < IDLE_THRESH) ? 1 : ticks, true);
   1afe4:	2802      	cmp	r0, #2
   1afe6:	bfd8      	it	le
   1afe8:	4608      	movle	r0, r1
   1afea:	f002 fc8b 	bl	1d904 <z_set_timeout_expiry>
	_kernel.idle = ticks;
   1afee:	622c      	str	r4, [r5, #32]
 * @return N/A
 * @req K-CPU-IDLE-001
 */
static inline void k_cpu_idle(void)
{
	arch_cpu_idle();
   1aff0:	f7f3 ffb0 	bl	ef54 <arch_cpu_idle>
   1aff4:	e7ea      	b.n	1afcc <idle+0x4>
   1aff6:	bf00      	nop
   1aff8:	20021398 	.word	0x20021398

0001affc <z_bss_zero>:
 *
 * @return N/A
 */
void z_bss_zero(void)
{
	(void)memset(__bss_start, 0, __bss_end - __bss_start);
   1affc:	4802      	ldr	r0, [pc, #8]	; (1b008 <z_bss_zero+0xc>)
   1affe:	4a03      	ldr	r2, [pc, #12]	; (1b00c <z_bss_zero+0x10>)
   1b000:	2100      	movs	r1, #0
   1b002:	1a12      	subs	r2, r2, r0
   1b004:	f006 bca6 	b.w	21954 <memset>
   1b008:	20020000 	.word	0x20020000
   1b00c:	200227e4 	.word	0x200227e4

0001b010 <z_data_copy>:
 * This routine copies the data section from ROM to RAM.
 *
 * @return N/A
 */
void z_data_copy(void)
{
   1b010:	b508      	push	{r3, lr}
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   1b012:	4806      	ldr	r0, [pc, #24]	; (1b02c <z_data_copy+0x1c>)
   1b014:	4a06      	ldr	r2, [pc, #24]	; (1b030 <z_data_copy+0x20>)
   1b016:	4907      	ldr	r1, [pc, #28]	; (1b034 <z_data_copy+0x24>)
   1b018:	1a12      	subs	r2, r2, r0
   1b01a:	f006 fc8e 	bl	2193a <memcpy>
#else
	(void)memcpy(&_app_smem_start, &_app_smem_rom_start,
		 _app_smem_end - _app_smem_start);
#endif /* CONFIG_STACK_CANARIES */
#endif /* CONFIG_USERSPACE */
}
   1b01e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   1b022:	4a05      	ldr	r2, [pc, #20]	; (1b038 <z_data_copy+0x28>)
   1b024:	4905      	ldr	r1, [pc, #20]	; (1b03c <z_data_copy+0x2c>)
   1b026:	4806      	ldr	r0, [pc, #24]	; (1b040 <z_data_copy+0x30>)
   1b028:	f006 bc87 	b.w	2193a <memcpy>
   1b02c:	20026068 	.word	0x20026068
   1b030:	2002647c 	.word	0x2002647c
   1b034:	000257a4 	.word	0x000257a4
   1b038:	00000000 	.word	0x00000000
   1b03c:	000257a4 	.word	0x000257a4
   1b040:	20020000 	.word	0x20020000

0001b044 <bg_thread_main>:
	static const unsigned int boot_delay = CONFIG_BOOT_DELAY;
#else
	static const unsigned int boot_delay;
#endif

	z_sys_post_kernel = true;
   1b044:	2201      	movs	r2, #1
{
   1b046:	b508      	push	{r3, lr}
	z_sys_post_kernel = true;
   1b048:	4b0b      	ldr	r3, [pc, #44]	; (1b078 <bg_thread_main+0x34>)

	z_sys_device_do_config_level(_SYS_INIT_LEVEL_POST_KERNEL);
   1b04a:	2002      	movs	r0, #2
	z_sys_post_kernel = true;
   1b04c:	701a      	strb	r2, [r3, #0]
	z_sys_device_do_config_level(_SYS_INIT_LEVEL_POST_KERNEL);
   1b04e:	f7ff fefd 	bl	1ae4c <z_sys_device_do_config_level>
		k_busy_wait(CONFIG_BOOT_DELAY * USEC_PER_MSEC);
	}

#if defined(CONFIG_BOOT_BANNER)
#ifdef BUILD_VERSION
	printk("*** Booting Zephyr OS build %s %s ***\n",
   1b052:	4a0a      	ldr	r2, [pc, #40]	; (1b07c <bg_thread_main+0x38>)
   1b054:	490a      	ldr	r1, [pc, #40]	; (1b080 <bg_thread_main+0x3c>)
   1b056:	480b      	ldr	r0, [pc, #44]	; (1b084 <bg_thread_main+0x40>)
   1b058:	f004 febf 	bl	1fdda <printk>
			KERNEL_VERSION_STRING, BOOT_DELAY_BANNER);
#endif
#endif

	/* Final init level before app starts */
	z_sys_device_do_config_level(_SYS_INIT_LEVEL_APPLICATION);
   1b05c:	2003      	movs	r0, #3
   1b05e:	f7ff fef5 	bl	1ae4c <z_sys_device_do_config_level>
	extern void __do_init_array_aux(void);
	__do_global_ctors_aux();
	__do_init_array_aux();
#endif

	z_init_static_threads();
   1b062:	f002 f9d7 	bl	1d414 <z_init_static_threads>
	z_timestamp_main = k_cycle_get_32();
#endif

	extern void main(void);

	main();
   1b066:	f7f2 fe09 	bl	dc7c <main>

	/* Mark nonessenrial since main() has no more work to do */
	z_main_thread.base.user_options &= ~K_ESSENTIAL;
   1b06a:	4a07      	ldr	r2, [pc, #28]	; (1b088 <bg_thread_main+0x44>)
   1b06c:	7b13      	ldrb	r3, [r2, #12]
   1b06e:	f023 0301 	bic.w	r3, r3, #1
   1b072:	7313      	strb	r3, [r2, #12]

	/* Dump coverage data once the main() has exited. */
	gcov_coverage_dump();
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */
   1b074:	bd08      	pop	{r3, pc}
   1b076:	bf00      	nop
   1b078:	2002268f 	.word	0x2002268f
   1b07c:	000241f6 	.word	0x000241f6
   1b080:	00024fb2 	.word	0x00024fb2
   1b084:	00024fd0 	.word	0x00024fd0
   1b088:	20020ab8 	.word	0x20020ab8

0001b08c <z_cstart>:
 * cleared/zeroed.
 *
 * @return Does not return
 */
FUNC_NORETURN void z_cstart(void)
{
   1b08c:	b580      	push	{r7, lr}
   1b08e:	b0b2      	sub	sp, #200	; 0xc8
#endif	/* CONFIG_STACK_CANARIES */

	/* gcov hook needed to get the coverage report.*/
	gcov_static_init();

	LOG_CORE_INIT();
   1b090:	f7f3 f8c0 	bl	e214 <log_core_init>
 *
 * @return N/A
 */
static ALWAYS_INLINE void z_arm_interrupt_stack_setup(void)
{
	u32_t msp = (u32_t)(Z_THREAD_STACK_BUFFER(_interrupt_stack)) +
   1b094:	4b33      	ldr	r3, [pc, #204]	; (1b164 <z_cstart+0xd8>)
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
   1b096:	f383 8808 	msr	MSP, r3
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   1b09a:	2400      	movs	r4, #0
   1b09c:	23e0      	movs	r3, #224	; 0xe0
   1b09e:	4d32      	ldr	r5, [pc, #200]	; (1b168 <z_cstart+0xdc>)

	/* perform any architecture-specific initialization */
	arch_kernel_init();

#ifdef CONFIG_MULTITHREADING
	struct k_thread dummy_thread = {
   1b0a0:	2701      	movs	r7, #1
   1b0a2:	f885 3022 	strb.w	r3, [r5, #34]	; 0x22
   1b0a6:	77ec      	strb	r4, [r5, #31]
   1b0a8:	762c      	strb	r4, [r5, #24]
   1b0aa:	766c      	strb	r4, [r5, #25]
   1b0ac:	76ac      	strb	r4, [r5, #26]
#if defined(CONFIG_ARM_SECURE_FIRMWARE)
	NVIC_SetPriority(SecureFault_IRQn, _EXC_FAULT_PRIO);
#endif /* CONFIG_ARM_SECURE_FIRMWARE */

	/* Enable Usage, Mem, & Bus Faults */
	SCB->SHCSR |= SCB_SHCSR_USGFAULTENA_Msk | SCB_SHCSR_MEMFAULTENA_Msk |
   1b0ae:	6a6b      	ldr	r3, [r5, #36]	; 0x24
# ifdef CONFIG_SCHED_CPU_MASK
		 .base.cpu_mask = -1,
# endif
	};

	_current = &dummy_thread;
   1b0b0:	4e2e      	ldr	r6, [pc, #184]	; (1b16c <z_cstart+0xe0>)
   1b0b2:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
   1b0b6:	626b      	str	r3, [r5, #36]	; 0x24

static ALWAYS_INLINE void arch_kernel_init(void)
{
	z_arm_interrupt_stack_setup();
	z_arm_exc_setup();
	z_arm_fault_init();
   1b0b8:	f7f4 fc0c 	bl	f8d4 <z_arm_fault_init>
	z_arm_cpu_idle_init();
   1b0bc:	f7f3 ff44 	bl	ef48 <z_arm_cpu_idle_init>
static ALWAYS_INLINE void z_arm_clear_faults(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Reset all faults */
	SCB->CFSR = SCB_CFSR_USGFAULTSR_Msk |
   1b0c0:	f04f 33ff 	mov.w	r3, #4294967295
   1b0c4:	62ab      	str	r3, [r5, #40]	; 0x28
		    SCB_CFSR_MEMFAULTSR_Msk |
		    SCB_CFSR_BUSFAULTSR_Msk;

	/* Clear all Hard Faults - HFSR is write-one-to-clear */
	SCB->HFSR = 0xffffffff;
   1b0c6:	62eb      	str	r3, [r5, #44]	; 0x2c
	struct k_thread dummy_thread = {
   1b0c8:	ab06      	add	r3, sp, #24
   1b0ca:	22b0      	movs	r2, #176	; 0xb0
   1b0cc:	4621      	mov	r1, r4
   1b0ce:	4618      	mov	r0, r3
   1b0d0:	f006 fc40 	bl	21954 <memset>
	_current = &dummy_thread;
   1b0d4:	60b0      	str	r0, [r6, #8]
#ifdef CONFIG_USERSPACE
	z_app_shmem_bss_zero();
#endif

	/* perform basic hardware initialization */
	z_sys_device_do_config_level(_SYS_INIT_LEVEL_PRE_KERNEL_1);
   1b0d6:	4620      	mov	r0, r4
	struct k_thread dummy_thread = {
   1b0d8:	f88d 7025 	strb.w	r7, [sp, #37]	; 0x25
	z_sys_device_do_config_level(_SYS_INIT_LEVEL_PRE_KERNEL_1);
   1b0dc:	f7ff feb6 	bl	1ae4c <z_sys_device_do_config_level>
	z_sys_device_do_config_level(_SYS_INIT_LEVEL_PRE_KERNEL_2);
   1b0e0:	4638      	mov	r0, r7
   1b0e2:	f7ff feb3 	bl	1ae4c <z_sys_device_do_config_level>
	_kernel.ready_q.cache = &z_main_thread;
   1b0e6:	4d22      	ldr	r5, [pc, #136]	; (1b170 <z_cstart+0xe4>)
	z_sched_init();
   1b0e8:	f001 fe34 	bl	1cd54 <z_sched_init>
	z_setup_new_thread(&z_main_thread, z_main_stack,
   1b0ec:	4b21      	ldr	r3, [pc, #132]	; (1b174 <z_cstart+0xe8>)
   1b0ee:	f44f 5280 	mov.w	r2, #4096	; 0x1000
   1b0f2:	e9cd 7304 	strd	r7, r3, [sp, #16]
   1b0f6:	e9cd 4402 	strd	r4, r4, [sp, #8]
   1b0fa:	4b1f      	ldr	r3, [pc, #124]	; (1b178 <z_cstart+0xec>)
   1b0fc:	e9cd 4400 	strd	r4, r4, [sp]
   1b100:	491e      	ldr	r1, [pc, #120]	; (1b17c <z_cstart+0xf0>)
   1b102:	4628      	mov	r0, r5
	_kernel.ready_q.cache = &z_main_thread;
   1b104:	6275      	str	r5, [r6, #36]	; 0x24
	z_setup_new_thread(&z_main_thread, z_main_stack,
   1b106:	f002 f89b 	bl	1d240 <z_setup_new_thread>
	sys_trace_thread_resume(thread);
}

static inline void z_mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
   1b10a:	7b6b      	ldrb	r3, [r5, #13]
   1b10c:	f023 0204 	bic.w	r2, r3, #4
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
   1b110:	f013 0f1b 	tst.w	r3, #27
	thread->base.thread_state &= ~_THREAD_PRESTART;
   1b114:	736a      	strb	r2, [r5, #13]
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
   1b116:	d104      	bne.n	1b122 <z_cstart+0x96>
	return true;
}

static ALWAYS_INLINE void z_ready_thread(struct k_thread *thread)
{
	if (z_is_thread_ready(thread)) {
   1b118:	69ab      	ldr	r3, [r5, #24]
   1b11a:	b913      	cbnz	r3, 1b122 <z_cstart+0x96>
		z_add_thread_to_ready_q(thread);
   1b11c:	4628      	mov	r0, r5
   1b11e:	f001 f913 	bl	1c348 <z_add_thread_to_ready_q>
	z_setup_new_thread(thread, stack,
   1b122:	4b17      	ldr	r3, [pc, #92]	; (1b180 <z_cstart+0xf4>)
   1b124:	2201      	movs	r2, #1
   1b126:	9305      	str	r3, [sp, #20]
   1b128:	230f      	movs	r3, #15
   1b12a:	e9cd 3203 	strd	r3, r2, [sp, #12]
   1b12e:	2300      	movs	r3, #0
   1b130:	4d14      	ldr	r5, [pc, #80]	; (1b184 <z_cstart+0xf8>)
   1b132:	e9cd 3301 	strd	r3, r3, [sp, #4]
   1b136:	9300      	str	r3, [sp, #0]
   1b138:	f44f 72a0 	mov.w	r2, #320	; 0x140
   1b13c:	4b12      	ldr	r3, [pc, #72]	; (1b188 <z_cstart+0xfc>)
   1b13e:	4913      	ldr	r1, [pc, #76]	; (1b18c <z_cstart+0x100>)
   1b140:	4628      	mov	r0, r5
   1b142:	f002 f87d 	bl	1d240 <z_setup_new_thread>
	thread->base.thread_state &= ~_THREAD_PRESTART;
   1b146:	7b6b      	ldrb	r3, [r5, #13]
	arch_switch_to_main_thread(&z_main_thread, z_main_stack,
   1b148:	f44f 5280 	mov.w	r2, #4096	; 0x1000
   1b14c:	f023 0304 	bic.w	r3, r3, #4
   1b150:	736b      	strb	r3, [r5, #13]
	list->head = (sys_dnode_t *)list;
   1b152:	4b0f      	ldr	r3, [pc, #60]	; (1b190 <z_cstart+0x104>)
   1b154:	4909      	ldr	r1, [pc, #36]	; (1b17c <z_cstart+0xf0>)
	list->tail = (sys_dnode_t *)list;
   1b156:	e9c6 3306 	strd	r3, r3, [r6, #24]
   1b15a:	4805      	ldr	r0, [pc, #20]	; (1b170 <z_cstart+0xe4>)
   1b15c:	4b06      	ldr	r3, [pc, #24]	; (1b178 <z_cstart+0xec>)
	_kernel.cpus[0].idle_thread = &z_idle_thread;
   1b15e:	60f5      	str	r5, [r6, #12]
	arch_switch_to_main_thread(&z_main_thread, z_main_stack,
   1b160:	f7f3 ffe8 	bl	f134 <arch_switch_to_main_thread>
	CODE_UNREACHABLE; /* LCOV_EXCL_LINE */
   1b164:	20024728 	.word	0x20024728
   1b168:	e000ed00 	.word	0xe000ed00
   1b16c:	20021398 	.word	0x20021398
   1b170:	20020ab8 	.word	0x20020ab8
   1b174:	00024ffa 	.word	0x00024ffa
   1b178:	0001b045 	.word	0x0001b045
   1b17c:	20022de8 	.word	0x20022de8
   1b180:	00024fff 	.word	0x00024fff
   1b184:	20020a08 	.word	0x20020a08
   1b188:	0001afc9 	.word	0x0001afc9
   1b18c:	20023de8 	.word	0x20023de8
   1b190:	200213b0 	.word	0x200213b0

0001b194 <init_mem_slab_module>:
 * Perform any initialization that wasn't done at build time.
 *
 * @return N/A
 */
static int init_mem_slab_module(struct device *dev)
{
   1b194:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	int rc = 0;
	ARG_UNUSED(dev);

	Z_STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
   1b198:	4d16      	ldr	r5, [pc, #88]	; (1b1f4 <init_mem_slab_module+0x60>)
   1b19a:	4c17      	ldr	r4, [pc, #92]	; (1b1f8 <init_mem_slab_module+0x64>)
   1b19c:	46a8      	mov	r8, r5
   1b19e:	4e17      	ldr	r6, [pc, #92]	; (1b1fc <init_mem_slab_module+0x68>)
   1b1a0:	42ac      	cmp	r4, r5
   1b1a2:	d90c      	bls.n	1b1be <init_mem_slab_module+0x2a>
   1b1a4:	4916      	ldr	r1, [pc, #88]	; (1b200 <init_mem_slab_module+0x6c>)
   1b1a6:	2342      	movs	r3, #66	; 0x42
   1b1a8:	4632      	mov	r2, r6
   1b1aa:	4816      	ldr	r0, [pc, #88]	; (1b204 <init_mem_slab_module+0x70>)
   1b1ac:	f004 fe15 	bl	1fdda <printk>
   1b1b0:	4815      	ldr	r0, [pc, #84]	; (1b208 <init_mem_slab_module+0x74>)
   1b1b2:	f004 fe12 	bl	1fdda <printk>
   1b1b6:	2142      	movs	r1, #66	; 0x42
   1b1b8:	4630      	mov	r0, r6
   1b1ba:	f004 fe54 	bl	1fe66 <assert_post_action>
   1b1be:	4544      	cmp	r4, r8
   1b1c0:	d302      	bcc.n	1b1c8 <init_mem_slab_module+0x34>
		}
		SYS_TRACING_OBJ_INIT(k_mem_slab, slab);
		z_object_init(slab);
	}

out:
   1b1c2:	2000      	movs	r0, #0
	return rc;
}
   1b1c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
   1b1c8:	e9d4 1203 	ldrd	r1, r2, [r4, #12]
   1b1cc:	ea42 0301 	orr.w	r3, r2, r1
   1b1d0:	f013 0303 	ands.w	r3, r3, #3
   1b1d4:	d10b      	bne.n	1b1ee <init_mem_slab_module+0x5a>
	for (j = 0U; j < slab->num_blocks; j++) {
   1b1d6:	68a0      	ldr	r0, [r4, #8]
	slab->free_list = NULL;
   1b1d8:	6163      	str	r3, [r4, #20]
	for (j = 0U; j < slab->num_blocks; j++) {
   1b1da:	4283      	cmp	r3, r0
   1b1dc:	d101      	bne.n	1b1e2 <init_mem_slab_module+0x4e>
	Z_STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
   1b1de:	341c      	adds	r4, #28
   1b1e0:	e7de      	b.n	1b1a0 <init_mem_slab_module+0xc>
		*(char **)p = slab->free_list;
   1b1e2:	6967      	ldr	r7, [r4, #20]
	for (j = 0U; j < slab->num_blocks; j++) {
   1b1e4:	3301      	adds	r3, #1
		*(char **)p = slab->free_list;
   1b1e6:	6017      	str	r7, [r2, #0]
		slab->free_list = p;
   1b1e8:	6162      	str	r2, [r4, #20]
		p += slab->block_size;
   1b1ea:	440a      	add	r2, r1
   1b1ec:	e7f5      	b.n	1b1da <init_mem_slab_module+0x46>
		return -EINVAL;
   1b1ee:	f06f 0015 	mvn.w	r0, #21
	return rc;
   1b1f2:	e7e7      	b.n	1b1c4 <init_mem_slab_module+0x30>
   1b1f4:	20026380 	.word	0x20026380
   1b1f8:	20026364 	.word	0x20026364
   1b1fc:	00025004 	.word	0x00025004
   1b200:	00025029 	.word	0x00025029
   1b204:	00023451 	.word	0x00023451
   1b208:	00025046 	.word	0x00025046

0001b20c <k_mem_slab_alloc>:
out:
	return rc;
}

int k_mem_slab_alloc(struct k_mem_slab *slab, void **mem, s32_t timeout)
{
   1b20c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1b20e:	4604      	mov	r4, r0
   1b210:	460d      	mov	r5, r1
   1b212:	4616      	mov	r6, r2
   1b214:	f04f 0320 	mov.w	r3, #32
   1b218:	f3ef 8711 	mrs	r7, BASEPRI
   1b21c:	f383 8811 	msr	BASEPRI, r3
   1b220:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1b224:	4823      	ldr	r0, [pc, #140]	; (1b2b4 <k_mem_slab_alloc+0xa8>)
   1b226:	f002 f823 	bl	1d270 <z_spin_lock_valid>
   1b22a:	b968      	cbnz	r0, 1b248 <k_mem_slab_alloc+0x3c>
   1b22c:	234a      	movs	r3, #74	; 0x4a
   1b22e:	4a22      	ldr	r2, [pc, #136]	; (1b2b8 <k_mem_slab_alloc+0xac>)
   1b230:	4922      	ldr	r1, [pc, #136]	; (1b2bc <k_mem_slab_alloc+0xb0>)
   1b232:	4823      	ldr	r0, [pc, #140]	; (1b2c0 <k_mem_slab_alloc+0xb4>)
   1b234:	f004 fdd1 	bl	1fdda <printk>
   1b238:	491e      	ldr	r1, [pc, #120]	; (1b2b4 <k_mem_slab_alloc+0xa8>)
   1b23a:	4822      	ldr	r0, [pc, #136]	; (1b2c4 <k_mem_slab_alloc+0xb8>)
   1b23c:	f004 fdcd 	bl	1fdda <printk>
   1b240:	214a      	movs	r1, #74	; 0x4a
   1b242:	481d      	ldr	r0, [pc, #116]	; (1b2b8 <k_mem_slab_alloc+0xac>)
   1b244:	f004 fe0f 	bl	1fe66 <assert_post_action>
	z_spin_lock_set_owner(l);
   1b248:	481a      	ldr	r0, [pc, #104]	; (1b2b4 <k_mem_slab_alloc+0xa8>)
   1b24a:	f002 f82f 	bl	1d2ac <z_spin_lock_set_owner>
	k_spinlock_key_t key = k_spin_lock(&lock);
	int result;

	if (slab->free_list != NULL) {
   1b24e:	6963      	ldr	r3, [r4, #20]
   1b250:	b1eb      	cbz	r3, 1b28e <k_mem_slab_alloc+0x82>
		/* take a free block */
		*mem = slab->free_list;
   1b252:	602b      	str	r3, [r5, #0]
		slab->free_list = *(char **)(slab->free_list);
   1b254:	681b      	ldr	r3, [r3, #0]
   1b256:	6163      	str	r3, [r4, #20]
		slab->num_used++;
   1b258:	69a3      	ldr	r3, [r4, #24]
   1b25a:	3301      	adds	r3, #1
   1b25c:	61a3      	str	r3, [r4, #24]
		result = 0;
   1b25e:	2400      	movs	r4, #0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1b260:	4814      	ldr	r0, [pc, #80]	; (1b2b4 <k_mem_slab_alloc+0xa8>)
   1b262:	f002 f813 	bl	1d28c <z_spin_unlock_valid>
   1b266:	b968      	cbnz	r0, 1b284 <k_mem_slab_alloc+0x78>
   1b268:	235d      	movs	r3, #93	; 0x5d
   1b26a:	4a13      	ldr	r2, [pc, #76]	; (1b2b8 <k_mem_slab_alloc+0xac>)
   1b26c:	4916      	ldr	r1, [pc, #88]	; (1b2c8 <k_mem_slab_alloc+0xbc>)
   1b26e:	4814      	ldr	r0, [pc, #80]	; (1b2c0 <k_mem_slab_alloc+0xb4>)
   1b270:	f004 fdb3 	bl	1fdda <printk>
   1b274:	490f      	ldr	r1, [pc, #60]	; (1b2b4 <k_mem_slab_alloc+0xa8>)
   1b276:	4815      	ldr	r0, [pc, #84]	; (1b2cc <k_mem_slab_alloc+0xc0>)
   1b278:	f004 fdaf 	bl	1fdda <printk>
   1b27c:	215d      	movs	r1, #93	; 0x5d
   1b27e:	480e      	ldr	r0, [pc, #56]	; (1b2b8 <k_mem_slab_alloc+0xac>)
   1b280:	f004 fdf1 	bl	1fe66 <assert_post_action>
	__asm__ volatile(
   1b284:	f387 8811 	msr	BASEPRI, r7
   1b288:	f3bf 8f6f 	isb	sy
		return result;
	}

	k_spin_unlock(&lock, key);

	return result;
   1b28c:	e010      	b.n	1b2b0 <k_mem_slab_alloc+0xa4>
	} else if (timeout == K_NO_WAIT) {
   1b28e:	b91e      	cbnz	r6, 1b298 <k_mem_slab_alloc+0x8c>
		*mem = NULL;
   1b290:	602e      	str	r6, [r5, #0]
		result = -ENOMEM;
   1b292:	f06f 040b 	mvn.w	r4, #11
   1b296:	e7e3      	b.n	1b260 <k_mem_slab_alloc+0x54>
		result = z_pend_curr(&lock, key, &slab->wait_q, timeout);
   1b298:	4622      	mov	r2, r4
   1b29a:	4633      	mov	r3, r6
   1b29c:	4639      	mov	r1, r7
   1b29e:	4805      	ldr	r0, [pc, #20]	; (1b2b4 <k_mem_slab_alloc+0xa8>)
   1b2a0:	f001 fc0c 	bl	1cabc <z_pend_curr>
		if (result == 0) {
   1b2a4:	4604      	mov	r4, r0
   1b2a6:	b918      	cbnz	r0, 1b2b0 <k_mem_slab_alloc+0xa4>
			*mem = _current->base.swap_data;
   1b2a8:	4b09      	ldr	r3, [pc, #36]	; (1b2d0 <k_mem_slab_alloc+0xc4>)
   1b2aa:	689b      	ldr	r3, [r3, #8]
   1b2ac:	695b      	ldr	r3, [r3, #20]
   1b2ae:	602b      	str	r3, [r5, #0]
}
   1b2b0:	4620      	mov	r0, r4
   1b2b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1b2b4:	20020b68 	.word	0x20020b68
   1b2b8:	00023852 	.word	0x00023852
   1b2bc:	00023878 	.word	0x00023878
   1b2c0:	00023451 	.word	0x00023451
   1b2c4:	0002388d 	.word	0x0002388d
   1b2c8:	000238a5 	.word	0x000238a5
   1b2cc:	000238bc 	.word	0x000238bc
   1b2d0:	20021398 	.word	0x20021398

0001b2d4 <k_mem_slab_free>:

void k_mem_slab_free(struct k_mem_slab *slab, void **mem)
{
   1b2d4:	b570      	push	{r4, r5, r6, lr}
   1b2d6:	4604      	mov	r4, r0
   1b2d8:	460d      	mov	r5, r1
	__asm__ volatile(
   1b2da:	f04f 0320 	mov.w	r3, #32
   1b2de:	f3ef 8611 	mrs	r6, BASEPRI
   1b2e2:	f383 8811 	msr	BASEPRI, r3
   1b2e6:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1b2ea:	4824      	ldr	r0, [pc, #144]	; (1b37c <k_mem_slab_free+0xa8>)
   1b2ec:	f001 ffc0 	bl	1d270 <z_spin_lock_valid>
   1b2f0:	b968      	cbnz	r0, 1b30e <k_mem_slab_free+0x3a>
   1b2f2:	234a      	movs	r3, #74	; 0x4a
   1b2f4:	4a22      	ldr	r2, [pc, #136]	; (1b380 <k_mem_slab_free+0xac>)
   1b2f6:	4923      	ldr	r1, [pc, #140]	; (1b384 <k_mem_slab_free+0xb0>)
   1b2f8:	4823      	ldr	r0, [pc, #140]	; (1b388 <k_mem_slab_free+0xb4>)
   1b2fa:	f004 fd6e 	bl	1fdda <printk>
   1b2fe:	491f      	ldr	r1, [pc, #124]	; (1b37c <k_mem_slab_free+0xa8>)
   1b300:	4822      	ldr	r0, [pc, #136]	; (1b38c <k_mem_slab_free+0xb8>)
   1b302:	f004 fd6a 	bl	1fdda <printk>
   1b306:	214a      	movs	r1, #74	; 0x4a
   1b308:	481d      	ldr	r0, [pc, #116]	; (1b380 <k_mem_slab_free+0xac>)
   1b30a:	f004 fdac 	bl	1fe66 <assert_post_action>
	z_spin_lock_set_owner(l);
   1b30e:	481b      	ldr	r0, [pc, #108]	; (1b37c <k_mem_slab_free+0xa8>)
   1b310:	f001 ffcc 	bl	1d2ac <z_spin_lock_set_owner>
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_thread *pending_thread = z_unpend_first_thread(&slab->wait_q);
   1b314:	4620      	mov	r0, r4
   1b316:	f001 fc8d 	bl	1cc34 <z_unpend_first_thread>

	if (pending_thread != NULL) {
   1b31a:	b180      	cbz	r0, 1b33e <k_mem_slab_free+0x6a>
}

static ALWAYS_INLINE void
arch_thread_return_value_set(struct k_thread *thread, unsigned int value)
{
	thread->arch.swap_return_value = value;
   1b31c:	2100      	movs	r1, #0
		z_thread_return_value_set_with_data(pending_thread, 0, *mem);
   1b31e:	682a      	ldr	r2, [r5, #0]
   1b320:	6681      	str	r1, [r0, #104]	; 0x68
z_thread_return_value_set_with_data(struct k_thread *thread,
				   unsigned int value,
				   void *data)
{
	arch_thread_return_value_set(thread, value);
	thread->base.swap_data = data;
   1b322:	6142      	str	r2, [r0, #20]
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
   1b324:	7b42      	ldrb	r2, [r0, #13]
   1b326:	06d2      	lsls	r2, r2, #27
   1b328:	d103      	bne.n	1b332 <k_mem_slab_free+0x5e>
	if (z_is_thread_ready(thread)) {
   1b32a:	6983      	ldr	r3, [r0, #24]
   1b32c:	b90b      	cbnz	r3, 1b332 <k_mem_slab_free+0x5e>
		z_add_thread_to_ready_q(thread);
   1b32e:	f001 f80b 	bl	1c348 <z_add_thread_to_ready_q>
		z_ready_thread(pending_thread);
		z_reschedule(&lock, key);
   1b332:	4631      	mov	r1, r6
		**(char ***)mem = slab->free_list;
		slab->free_list = *(char **)mem;
		slab->num_used--;
		k_spin_unlock(&lock, key);
	}
}
   1b334:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		z_reschedule(&lock, key);
   1b338:	4810      	ldr	r0, [pc, #64]	; (1b37c <k_mem_slab_free+0xa8>)
   1b33a:	f000 be1b 	b.w	1bf74 <z_reschedule>
		**(char ***)mem = slab->free_list;
   1b33e:	682b      	ldr	r3, [r5, #0]
   1b340:	6962      	ldr	r2, [r4, #20]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1b342:	480e      	ldr	r0, [pc, #56]	; (1b37c <k_mem_slab_free+0xa8>)
   1b344:	601a      	str	r2, [r3, #0]
		slab->free_list = *(char **)mem;
   1b346:	682b      	ldr	r3, [r5, #0]
   1b348:	6163      	str	r3, [r4, #20]
		slab->num_used--;
   1b34a:	69a3      	ldr	r3, [r4, #24]
   1b34c:	3b01      	subs	r3, #1
   1b34e:	61a3      	str	r3, [r4, #24]
   1b350:	f001 ff9c 	bl	1d28c <z_spin_unlock_valid>
   1b354:	b968      	cbnz	r0, 1b372 <k_mem_slab_free+0x9e>
   1b356:	235d      	movs	r3, #93	; 0x5d
   1b358:	4a09      	ldr	r2, [pc, #36]	; (1b380 <k_mem_slab_free+0xac>)
   1b35a:	490d      	ldr	r1, [pc, #52]	; (1b390 <k_mem_slab_free+0xbc>)
   1b35c:	480a      	ldr	r0, [pc, #40]	; (1b388 <k_mem_slab_free+0xb4>)
   1b35e:	f004 fd3c 	bl	1fdda <printk>
   1b362:	4906      	ldr	r1, [pc, #24]	; (1b37c <k_mem_slab_free+0xa8>)
   1b364:	480b      	ldr	r0, [pc, #44]	; (1b394 <k_mem_slab_free+0xc0>)
   1b366:	f004 fd38 	bl	1fdda <printk>
   1b36a:	215d      	movs	r1, #93	; 0x5d
   1b36c:	4804      	ldr	r0, [pc, #16]	; (1b380 <k_mem_slab_free+0xac>)
   1b36e:	f004 fd7a 	bl	1fe66 <assert_post_action>
	__asm__ volatile(
   1b372:	f386 8811 	msr	BASEPRI, r6
   1b376:	f3bf 8f6f 	isb	sy
}
   1b37a:	bd70      	pop	{r4, r5, r6, pc}
   1b37c:	20020b68 	.word	0x20020b68
   1b380:	00023852 	.word	0x00023852
   1b384:	00023878 	.word	0x00023878
   1b388:	00023451 	.word	0x00023451
   1b38c:	0002388d 	.word	0x0002388d
   1b390:	000238a5 	.word	0x000238a5
   1b394:	000238bc 	.word	0x000238bc

0001b398 <init_static_pools>:
	z_waitq_init(&p->wait_q);
	z_sys_mem_pool_base_init(&p->base);
}

int init_static_pools(struct device *unused)
{
   1b398:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	ARG_UNUSED(unused);

	Z_STRUCT_SECTION_FOREACH(k_mem_pool, p) {
   1b39a:	4d10      	ldr	r5, [pc, #64]	; (1b3dc <init_static_pools+0x44>)
   1b39c:	4c10      	ldr	r4, [pc, #64]	; (1b3e0 <init_static_pools+0x48>)
   1b39e:	462f      	mov	r7, r5
   1b3a0:	4e10      	ldr	r6, [pc, #64]	; (1b3e4 <init_static_pools+0x4c>)
   1b3a2:	42ac      	cmp	r4, r5
   1b3a4:	d90c      	bls.n	1b3c0 <init_static_pools+0x28>
   1b3a6:	4910      	ldr	r1, [pc, #64]	; (1b3e8 <init_static_pools+0x50>)
   1b3a8:	2328      	movs	r3, #40	; 0x28
   1b3aa:	4632      	mov	r2, r6
   1b3ac:	480f      	ldr	r0, [pc, #60]	; (1b3ec <init_static_pools+0x54>)
   1b3ae:	f004 fd14 	bl	1fdda <printk>
   1b3b2:	480f      	ldr	r0, [pc, #60]	; (1b3f0 <init_static_pools+0x58>)
   1b3b4:	f004 fd11 	bl	1fdda <printk>
   1b3b8:	2128      	movs	r1, #40	; 0x28
   1b3ba:	4630      	mov	r0, r6
   1b3bc:	f004 fd53 	bl	1fe66 <assert_post_action>
   1b3c0:	42bc      	cmp	r4, r7
   1b3c2:	d301      	bcc.n	1b3c8 <init_static_pools+0x30>
		k_mem_pool_init(p);
	}

	return 0;
}
   1b3c4:	2000      	movs	r0, #0
   1b3c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	SYS_DLIST_FOR_EACH_CONTAINER(&((wq)->waitq), thread_ptr, \
				     base.qnode_dlist)

static inline void z_waitq_init(_wait_q_t *w)
{
	sys_dlist_init(&w->waitq);
   1b3c8:	f104 0314 	add.w	r3, r4, #20
	z_sys_mem_pool_base_init(&p->base);
   1b3cc:	4620      	mov	r0, r4
   1b3ce:	e9c4 3305 	strd	r3, r3, [r4, #20]
   1b3d2:	f004 fa8a 	bl	1f8ea <z_sys_mem_pool_base_init>
	Z_STRUCT_SECTION_FOREACH(k_mem_pool, p) {
   1b3d6:	341c      	adds	r4, #28
   1b3d8:	e7e3      	b.n	1b3a2 <init_static_pools+0xa>
   1b3da:	bf00      	nop
   1b3dc:	2002639c 	.word	0x2002639c
   1b3e0:	20026380 	.word	0x20026380
   1b3e4:	00025065 	.word	0x00025065
   1b3e8:	00025089 	.word	0x00025089
   1b3ec:	00023451 	.word	0x00023451
   1b3f0:	00025046 	.word	0x00025046

0001b3f4 <k_mem_pool_alloc>:

SYS_INIT(init_static_pools, PRE_KERNEL_1, CONFIG_KERNEL_INIT_PRIORITY_OBJECTS);

int k_mem_pool_alloc(struct k_mem_pool *p, struct k_mem_block *block,
		     size_t size, s32_t timeout)
{
   1b3f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1b3f8:	4607      	mov	r7, r0
   1b3fa:	b085      	sub	sp, #20
   1b3fc:	460d      	mov	r5, r1
   1b3fe:	4692      	mov	sl, r2
   1b400:	461c      	mov	r4, r3
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   1b402:	f3ef 8305 	mrs	r3, IPSR
	int ret;
	s64_t end = 0;

	__ASSERT(!(arch_is_in_isr() && timeout != K_NO_WAIT), "");
   1b406:	2b00      	cmp	r3, #0
   1b408:	d048      	beq.n	1b49c <k_mem_pool_alloc+0xa8>
   1b40a:	2c00      	cmp	r4, #0
   1b40c:	d139      	bne.n	1b482 <k_mem_pool_alloc+0x8e>
	s64_t end = 0;
   1b40e:	f04f 0800 	mov.w	r8, #0
	return pool - &_k_mem_pool_list_start[0];
   1b412:	4b26      	ldr	r3, [pc, #152]	; (1b4ac <k_mem_pool_alloc+0xb8>)
   1b414:	4e26      	ldr	r6, [pc, #152]	; (1b4b0 <k_mem_pool_alloc+0xbc>)
   1b416:	1afb      	subs	r3, r7, r3
   1b418:	109b      	asrs	r3, r3, #2
   1b41a:	435e      	muls	r6, r3
		if (ret == 0 || timeout == K_NO_WAIT ||
		    ret != -ENOMEM) {
			return ret;
		}

		z_pend_curr_unlocked(&p->wait_q, timeout);
   1b41c:	f107 0b14 	add.w	fp, r7, #20
		block->id.pool = pool_id(p);
   1b420:	b2f6      	uxtb	r6, r6
		ret = z_sys_mem_pool_block_alloc(&p->base, size,
   1b422:	ab03      	add	r3, sp, #12
   1b424:	aa02      	add	r2, sp, #8
   1b426:	9500      	str	r5, [sp, #0]
   1b428:	4651      	mov	r1, sl
   1b42a:	4638      	mov	r0, r7
   1b42c:	f004 faa3 	bl	1f976 <z_sys_mem_pool_block_alloc>
		block->id.level = level_num;
   1b430:	796b      	ldrb	r3, [r5, #5]
   1b432:	9a02      	ldr	r2, [sp, #8]
		block->id.pool = pool_id(p);
   1b434:	712e      	strb	r6, [r5, #4]
		block->id.level = level_num;
   1b436:	f362 0303 	bfi	r3, r2, #0, #4
   1b43a:	716b      	strb	r3, [r5, #5]
		block->id.block = block_num;
   1b43c:	686b      	ldr	r3, [r5, #4]
   1b43e:	9a03      	ldr	r2, [sp, #12]
   1b440:	f362 331f 	bfi	r3, r2, #12, #20
   1b444:	606b      	str	r3, [r5, #4]
		if (ret == 0 || timeout == K_NO_WAIT ||
   1b446:	b1c8      	cbz	r0, 1b47c <k_mem_pool_alloc+0x88>
   1b448:	b1c4      	cbz	r4, 1b47c <k_mem_pool_alloc+0x88>
   1b44a:	f110 0f0c 	cmn.w	r0, #12
   1b44e:	d115      	bne.n	1b47c <k_mem_pool_alloc+0x88>
	__asm__ volatile(
   1b450:	f04f 0320 	mov.w	r3, #32
   1b454:	f3ef 8011 	mrs	r0, BASEPRI
   1b458:	f383 8811 	msr	BASEPRI, r3
   1b45c:	f3bf 8f6f 	isb	sy
	(void) z_pend_curr_irqlock(arch_irq_lock(), wait_q, timeout);
   1b460:	4622      	mov	r2, r4
   1b462:	4659      	mov	r1, fp
   1b464:	f001 fad0 	bl	1ca08 <z_pend_curr_irqlock>

		if (timeout != K_FOREVER) {
   1b468:	1c63      	adds	r3, r4, #1
   1b46a:	d0da      	beq.n	1b422 <k_mem_pool_alloc+0x2e>
	return z_impl_k_uptime_get();
   1b46c:	f006 f9df 	bl	2182e <z_impl_k_uptime_get>
			timeout = end - k_uptime_get();
   1b470:	eba8 0400 	sub.w	r4, r8, r0
			if (timeout <= 0) {
   1b474:	2c00      	cmp	r4, #0
   1b476:	dcd4      	bgt.n	1b422 <k_mem_pool_alloc+0x2e>
				break;
			}
		}
	}

	return -EAGAIN;
   1b478:	f06f 000a 	mvn.w	r0, #10
}
   1b47c:	b005      	add	sp, #20
   1b47e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	__ASSERT(!(arch_is_in_isr() && timeout != K_NO_WAIT), "");
   1b482:	490c      	ldr	r1, [pc, #48]	; (1b4b4 <k_mem_pool_alloc+0xc0>)
   1b484:	2337      	movs	r3, #55	; 0x37
   1b486:	4a0c      	ldr	r2, [pc, #48]	; (1b4b8 <k_mem_pool_alloc+0xc4>)
   1b488:	480c      	ldr	r0, [pc, #48]	; (1b4bc <k_mem_pool_alloc+0xc8>)
   1b48a:	f004 fca6 	bl	1fdda <printk>
   1b48e:	480c      	ldr	r0, [pc, #48]	; (1b4c0 <k_mem_pool_alloc+0xcc>)
   1b490:	f004 fca3 	bl	1fdda <printk>
   1b494:	2137      	movs	r1, #55	; 0x37
   1b496:	4808      	ldr	r0, [pc, #32]	; (1b4b8 <k_mem_pool_alloc+0xc4>)
   1b498:	f004 fce5 	bl	1fe66 <assert_post_action>
	if (timeout > 0) {
   1b49c:	2c00      	cmp	r4, #0
   1b49e:	ddb6      	ble.n	1b40e <k_mem_pool_alloc+0x1a>
   1b4a0:	f006 f9c5 	bl	2182e <z_impl_k_uptime_get>
		end = k_uptime_get() + timeout;
   1b4a4:	eb10 0804 	adds.w	r8, r0, r4
   1b4a8:	e7b3      	b.n	1b412 <k_mem_pool_alloc+0x1e>
   1b4aa:	bf00      	nop
   1b4ac:	20026380 	.word	0x20026380
   1b4b0:	b6db6db7 	.word	0xb6db6db7
   1b4b4:	000250a3 	.word	0x000250a3
   1b4b8:	00025065 	.word	0x00025065
   1b4bc:	00023451 	.word	0x00023451
   1b4c0:	000241f4 	.word	0x000241f4

0001b4c4 <k_mem_pool_free_id>:

void k_mem_pool_free_id(struct k_mem_block_id *id)
{
   1b4c4:	b570      	push	{r4, r5, r6, lr}
   1b4c6:	7804      	ldrb	r4, [r0, #0]
	int need_sched = 0;
	struct k_mem_pool *p = get_pool(id->pool);

	z_sys_mem_pool_block_free(&p->base, id->level, id->block);
   1b4c8:	6802      	ldr	r2, [r0, #0]
   1b4ca:	7841      	ldrb	r1, [r0, #1]
   1b4cc:	4d24      	ldr	r5, [pc, #144]	; (1b560 <k_mem_pool_free_id+0x9c>)
   1b4ce:	ebc4 04c4 	rsb	r4, r4, r4, lsl #3
   1b4d2:	00a4      	lsls	r4, r4, #2
   1b4d4:	0b12      	lsrs	r2, r2, #12
   1b4d6:	f001 010f 	and.w	r1, r1, #15
   1b4da:	1928      	adds	r0, r5, r4
   1b4dc:	f7f2 fd22 	bl	df24 <z_sys_mem_pool_block_free>
   1b4e0:	f04f 0320 	mov.w	r3, #32
   1b4e4:	f3ef 8611 	mrs	r6, BASEPRI
   1b4e8:	f383 8811 	msr	BASEPRI, r3
   1b4ec:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1b4f0:	481c      	ldr	r0, [pc, #112]	; (1b564 <k_mem_pool_free_id+0xa0>)
   1b4f2:	f001 febd 	bl	1d270 <z_spin_lock_valid>
   1b4f6:	b968      	cbnz	r0, 1b514 <k_mem_pool_free_id+0x50>
   1b4f8:	234a      	movs	r3, #74	; 0x4a
   1b4fa:	4a1b      	ldr	r2, [pc, #108]	; (1b568 <k_mem_pool_free_id+0xa4>)
   1b4fc:	491b      	ldr	r1, [pc, #108]	; (1b56c <k_mem_pool_free_id+0xa8>)
   1b4fe:	481c      	ldr	r0, [pc, #112]	; (1b570 <k_mem_pool_free_id+0xac>)
   1b500:	f004 fc6b 	bl	1fdda <printk>
   1b504:	4917      	ldr	r1, [pc, #92]	; (1b564 <k_mem_pool_free_id+0xa0>)
   1b506:	481b      	ldr	r0, [pc, #108]	; (1b574 <k_mem_pool_free_id+0xb0>)
   1b508:	f004 fc67 	bl	1fdda <printk>
   1b50c:	214a      	movs	r1, #74	; 0x4a
   1b50e:	4816      	ldr	r0, [pc, #88]	; (1b568 <k_mem_pool_free_id+0xa4>)
   1b510:	f004 fca9 	bl	1fe66 <assert_post_action>
	z_spin_lock_set_owner(l);
   1b514:	4813      	ldr	r0, [pc, #76]	; (1b564 <k_mem_pool_free_id+0xa0>)
   1b516:	f001 fec9 	bl	1d2ac <z_spin_lock_set_owner>
	 * is unsynchronized.  Maybe we want to put the lock into the
	 * wait_q instead and make the API safe?)
	 */
	k_spinlock_key_t key = k_spin_lock(&lock);

	need_sched = z_unpend_all(&p->wait_q);
   1b51a:	f104 0014 	add.w	r0, r4, #20
   1b51e:	4428      	add	r0, r5
   1b520:	f006 f941 	bl	217a6 <z_unpend_all>

	if (need_sched != 0) {
   1b524:	b128      	cbz	r0, 1b532 <k_mem_pool_free_id+0x6e>
		z_reschedule(&lock, key);
   1b526:	4631      	mov	r1, r6
	} else {
		k_spin_unlock(&lock, key);
	}
}
   1b528:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		z_reschedule(&lock, key);
   1b52c:	480d      	ldr	r0, [pc, #52]	; (1b564 <k_mem_pool_free_id+0xa0>)
   1b52e:	f000 bd21 	b.w	1bf74 <z_reschedule>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1b532:	480c      	ldr	r0, [pc, #48]	; (1b564 <k_mem_pool_free_id+0xa0>)
   1b534:	f001 feaa 	bl	1d28c <z_spin_unlock_valid>
   1b538:	b968      	cbnz	r0, 1b556 <k_mem_pool_free_id+0x92>
   1b53a:	235d      	movs	r3, #93	; 0x5d
   1b53c:	4a0a      	ldr	r2, [pc, #40]	; (1b568 <k_mem_pool_free_id+0xa4>)
   1b53e:	490e      	ldr	r1, [pc, #56]	; (1b578 <k_mem_pool_free_id+0xb4>)
   1b540:	480b      	ldr	r0, [pc, #44]	; (1b570 <k_mem_pool_free_id+0xac>)
   1b542:	f004 fc4a 	bl	1fdda <printk>
   1b546:	4907      	ldr	r1, [pc, #28]	; (1b564 <k_mem_pool_free_id+0xa0>)
   1b548:	480c      	ldr	r0, [pc, #48]	; (1b57c <k_mem_pool_free_id+0xb8>)
   1b54a:	f004 fc46 	bl	1fdda <printk>
   1b54e:	215d      	movs	r1, #93	; 0x5d
   1b550:	4805      	ldr	r0, [pc, #20]	; (1b568 <k_mem_pool_free_id+0xa4>)
   1b552:	f004 fc88 	bl	1fe66 <assert_post_action>
	__asm__ volatile(
   1b556:	f386 8811 	msr	BASEPRI, r6
   1b55a:	f3bf 8f6f 	isb	sy
}
   1b55e:	bd70      	pop	{r4, r5, r6, pc}
   1b560:	20026380 	.word	0x20026380
   1b564:	20021390 	.word	0x20021390
   1b568:	00023852 	.word	0x00023852
   1b56c:	00023878 	.word	0x00023878
   1b570:	00023451 	.word	0x00023451
   1b574:	0002388d 	.word	0x0002388d
   1b578:	000238a5 	.word	0x000238a5
   1b57c:	000238bc 	.word	0x000238bc

0001b580 <k_malloc>:
		  CONFIG_HEAP_MEM_POOL_SIZE, 1, 4);
#define _HEAP_MEM_POOL (&_heap_mem_pool)

void *k_malloc(size_t size)
{
	return k_mem_pool_malloc(_HEAP_MEM_POOL, size);
   1b580:	4601      	mov	r1, r0
   1b582:	4801      	ldr	r0, [pc, #4]	; (1b588 <k_malloc+0x8>)
   1b584:	f006 b893 	b.w	216ae <k_mem_pool_malloc>
   1b588:	20026380 	.word	0x20026380

0001b58c <z_thread_malloc>:
#else
#define _HEAP_MEM_POOL	NULL
#endif

void *z_thread_malloc(size_t size)
{
   1b58c:	b510      	push	{r4, lr}
   1b58e:	4604      	mov	r4, r0
	void *ret;
	struct k_mem_pool *pool;

	if (k_is_in_isr()) {
   1b590:	f006 f92f 	bl	217f2 <k_is_in_isr>
   1b594:	b948      	cbnz	r0, 1b5aa <z_thread_malloc+0x1e>
		pool = _HEAP_MEM_POOL;
	} else {
		pool = _current->resource_pool;
   1b596:	4b06      	ldr	r3, [pc, #24]	; (1b5b0 <z_thread_malloc+0x24>)
   1b598:	689b      	ldr	r3, [r3, #8]
   1b59a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
	}

	if (pool) {
   1b59c:	b13b      	cbz	r3, 1b5ae <z_thread_malloc+0x22>
		ret = k_mem_pool_malloc(pool, size);
   1b59e:	4621      	mov	r1, r4
	} else {
		ret = NULL;
	}

	return ret;
}
   1b5a0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		ret = k_mem_pool_malloc(pool, size);
   1b5a4:	4618      	mov	r0, r3
   1b5a6:	f006 b882 	b.w	216ae <k_mem_pool_malloc>
		pool = _HEAP_MEM_POOL;
   1b5aa:	4b02      	ldr	r3, [pc, #8]	; (1b5b4 <z_thread_malloc+0x28>)
   1b5ac:	e7f7      	b.n	1b59e <z_thread_malloc+0x12>
}
   1b5ae:	bd10      	pop	{r4, pc}
   1b5b0:	20021398 	.word	0x20021398
   1b5b4:	20026380 	.word	0x20026380

0001b5b8 <z_impl_k_msgq_put>:
	return 0;
}


int z_impl_k_msgq_put(struct k_msgq *msgq, void *data, s32_t timeout)
{
   1b5b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1b5bc:	4604      	mov	r4, r0
   1b5be:	4688      	mov	r8, r1
   1b5c0:	4616      	mov	r6, r2
   1b5c2:	f3ef 8305 	mrs	r3, IPSR
	__ASSERT(!arch_is_in_isr() || timeout == K_NO_WAIT, "");
   1b5c6:	b16b      	cbz	r3, 1b5e4 <z_impl_k_msgq_put+0x2c>
   1b5c8:	b162      	cbz	r2, 1b5e4 <z_impl_k_msgq_put+0x2c>
   1b5ca:	4941      	ldr	r1, [pc, #260]	; (1b6d0 <z_impl_k_msgq_put+0x118>)
   1b5cc:	2376      	movs	r3, #118	; 0x76
   1b5ce:	4a41      	ldr	r2, [pc, #260]	; (1b6d4 <z_impl_k_msgq_put+0x11c>)
   1b5d0:	4841      	ldr	r0, [pc, #260]	; (1b6d8 <z_impl_k_msgq_put+0x120>)
   1b5d2:	f004 fc02 	bl	1fdda <printk>
   1b5d6:	4841      	ldr	r0, [pc, #260]	; (1b6dc <z_impl_k_msgq_put+0x124>)
   1b5d8:	f004 fbff 	bl	1fdda <printk>
   1b5dc:	2176      	movs	r1, #118	; 0x76
   1b5de:	483d      	ldr	r0, [pc, #244]	; (1b6d4 <z_impl_k_msgq_put+0x11c>)
   1b5e0:	f004 fc41 	bl	1fe66 <assert_post_action>

	struct k_thread *pending_thread;
	k_spinlock_key_t key;
	int result;

	key = k_spin_lock(&msgq->lock);
   1b5e4:	f104 0508 	add.w	r5, r4, #8
	__asm__ volatile(
   1b5e8:	f04f 0320 	mov.w	r3, #32
   1b5ec:	f3ef 8711 	mrs	r7, BASEPRI
   1b5f0:	f383 8811 	msr	BASEPRI, r3
   1b5f4:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1b5f8:	4628      	mov	r0, r5
   1b5fa:	f001 fe39 	bl	1d270 <z_spin_lock_valid>
   1b5fe:	b968      	cbnz	r0, 1b61c <z_impl_k_msgq_put+0x64>
   1b600:	234a      	movs	r3, #74	; 0x4a
   1b602:	4a37      	ldr	r2, [pc, #220]	; (1b6e0 <z_impl_k_msgq_put+0x128>)
   1b604:	4937      	ldr	r1, [pc, #220]	; (1b6e4 <z_impl_k_msgq_put+0x12c>)
   1b606:	4834      	ldr	r0, [pc, #208]	; (1b6d8 <z_impl_k_msgq_put+0x120>)
   1b608:	f004 fbe7 	bl	1fdda <printk>
   1b60c:	4629      	mov	r1, r5
   1b60e:	4836      	ldr	r0, [pc, #216]	; (1b6e8 <z_impl_k_msgq_put+0x130>)
   1b610:	f004 fbe3 	bl	1fdda <printk>
   1b614:	214a      	movs	r1, #74	; 0x4a
   1b616:	4832      	ldr	r0, [pc, #200]	; (1b6e0 <z_impl_k_msgq_put+0x128>)
   1b618:	f004 fc25 	bl	1fe66 <assert_post_action>
	z_spin_lock_set_owner(l);
   1b61c:	4628      	mov	r0, r5
   1b61e:	f001 fe45 	bl	1d2ac <z_spin_lock_set_owner>

	if (msgq->used_msgs < msgq->max_msgs) {
   1b622:	6a62      	ldr	r2, [r4, #36]	; 0x24
   1b624:	6923      	ldr	r3, [r4, #16]
   1b626:	429a      	cmp	r2, r3
   1b628:	d242      	bcs.n	1b6b0 <z_impl_k_msgq_put+0xf8>
		/* message queue isn't full */
		pending_thread = z_unpend_first_thread(&msgq->wait_q);
   1b62a:	4620      	mov	r0, r4
   1b62c:	f001 fb02 	bl	1cc34 <z_unpend_first_thread>
		if (pending_thread != NULL) {
   1b630:	68e2      	ldr	r2, [r4, #12]
   1b632:	4606      	mov	r6, r0
   1b634:	4641      	mov	r1, r8
   1b636:	b1a0      	cbz	r0, 1b662 <z_impl_k_msgq_put+0xaa>
   1b638:	6940      	ldr	r0, [r0, #20]
   1b63a:	f006 f97e 	bl	2193a <memcpy>
   1b63e:	2300      	movs	r3, #0
   1b640:	66b3      	str	r3, [r6, #104]	; 0x68
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
   1b642:	7b73      	ldrb	r3, [r6, #13]
   1b644:	06db      	lsls	r3, r3, #27
   1b646:	d104      	bne.n	1b652 <z_impl_k_msgq_put+0x9a>
	if (z_is_thread_ready(thread)) {
   1b648:	69b3      	ldr	r3, [r6, #24]
   1b64a:	b913      	cbnz	r3, 1b652 <z_impl_k_msgq_put+0x9a>
		z_add_thread_to_ready_q(thread);
   1b64c:	4630      	mov	r0, r6
   1b64e:	f000 fe7b 	bl	1c348 <z_add_thread_to_ready_q>
			(void)memcpy(pending_thread->base.swap_data, data,
			       msgq->msg_size);
			/* wake up waiting thread */
			arch_thread_return_value_set(pending_thread, 0);
			z_ready_thread(pending_thread);
			z_reschedule(&msgq->lock, key);
   1b652:	4639      	mov	r1, r7
   1b654:	4628      	mov	r0, r5
   1b656:	f000 fc8d 	bl	1bf74 <z_reschedule>
			return 0;
   1b65a:	2400      	movs	r4, #0
	}

	k_spin_unlock(&msgq->lock, key);

	return result;
}
   1b65c:	4620      	mov	r0, r4
   1b65e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1b662:	6a20      	ldr	r0, [r4, #32]
   1b664:	f006 f969 	bl	2193a <memcpy>
			msgq->write_ptr += msgq->msg_size;
   1b668:	6a23      	ldr	r3, [r4, #32]
   1b66a:	68e2      	ldr	r2, [r4, #12]
   1b66c:	4413      	add	r3, r2
			if (msgq->write_ptr == msgq->buffer_end) {
   1b66e:	69a2      	ldr	r2, [r4, #24]
			msgq->write_ptr += msgq->msg_size;
   1b670:	6223      	str	r3, [r4, #32]
			if (msgq->write_ptr == msgq->buffer_end) {
   1b672:	4293      	cmp	r3, r2
				msgq->write_ptr = msgq->buffer_start;
   1b674:	bf04      	itt	eq
   1b676:	6963      	ldreq	r3, [r4, #20]
   1b678:	6223      	streq	r3, [r4, #32]
			msgq->used_msgs++;
   1b67a:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1b67c:	3301      	adds	r3, #1
   1b67e:	6263      	str	r3, [r4, #36]	; 0x24
		result = 0;
   1b680:	2400      	movs	r4, #0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1b682:	4628      	mov	r0, r5
   1b684:	f001 fe02 	bl	1d28c <z_spin_unlock_valid>
   1b688:	b968      	cbnz	r0, 1b6a6 <z_impl_k_msgq_put+0xee>
   1b68a:	235d      	movs	r3, #93	; 0x5d
   1b68c:	4a14      	ldr	r2, [pc, #80]	; (1b6e0 <z_impl_k_msgq_put+0x128>)
   1b68e:	4917      	ldr	r1, [pc, #92]	; (1b6ec <z_impl_k_msgq_put+0x134>)
   1b690:	4811      	ldr	r0, [pc, #68]	; (1b6d8 <z_impl_k_msgq_put+0x120>)
   1b692:	f004 fba2 	bl	1fdda <printk>
   1b696:	4629      	mov	r1, r5
   1b698:	4815      	ldr	r0, [pc, #84]	; (1b6f0 <z_impl_k_msgq_put+0x138>)
   1b69a:	f004 fb9e 	bl	1fdda <printk>
   1b69e:	215d      	movs	r1, #93	; 0x5d
   1b6a0:	480f      	ldr	r0, [pc, #60]	; (1b6e0 <z_impl_k_msgq_put+0x128>)
   1b6a2:	f004 fbe0 	bl	1fe66 <assert_post_action>
	__asm__ volatile(
   1b6a6:	f387 8811 	msr	BASEPRI, r7
   1b6aa:	f3bf 8f6f 	isb	sy
	return result;
   1b6ae:	e7d5      	b.n	1b65c <z_impl_k_msgq_put+0xa4>
	} else if (timeout == K_NO_WAIT) {
   1b6b0:	b15e      	cbz	r6, 1b6ca <z_impl_k_msgq_put+0x112>
		_current->base.swap_data = data;
   1b6b2:	4b10      	ldr	r3, [pc, #64]	; (1b6f4 <z_impl_k_msgq_put+0x13c>)
		return z_pend_curr(&msgq->lock, key, &msgq->wait_q, timeout);
   1b6b4:	4622      	mov	r2, r4
		_current->base.swap_data = data;
   1b6b6:	689b      	ldr	r3, [r3, #8]
		return z_pend_curr(&msgq->lock, key, &msgq->wait_q, timeout);
   1b6b8:	4639      	mov	r1, r7
		_current->base.swap_data = data;
   1b6ba:	f8c3 8014 	str.w	r8, [r3, #20]
		return z_pend_curr(&msgq->lock, key, &msgq->wait_q, timeout);
   1b6be:	4628      	mov	r0, r5
   1b6c0:	4633      	mov	r3, r6
}
   1b6c2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		return z_pend_curr(&msgq->lock, key, &msgq->wait_q, timeout);
   1b6c6:	f001 b9f9 	b.w	1cabc <z_pend_curr>
		result = -ENOMSG;
   1b6ca:	f06f 0422 	mvn.w	r4, #34	; 0x22
   1b6ce:	e7d8      	b.n	1b682 <z_impl_k_msgq_put+0xca>
   1b6d0:	000250e9 	.word	0x000250e9
   1b6d4:	000250c7 	.word	0x000250c7
   1b6d8:	00023451 	.word	0x00023451
   1b6dc:	000241f4 	.word	0x000241f4
   1b6e0:	00023852 	.word	0x00023852
   1b6e4:	00023878 	.word	0x00023878
   1b6e8:	0002388d 	.word	0x0002388d
   1b6ec:	000238a5 	.word	0x000238a5
   1b6f0:	000238bc 	.word	0x000238bc
   1b6f4:	20021398 	.word	0x20021398

0001b6f8 <z_impl_k_msgq_get>:
}
#include <syscalls/k_msgq_get_attrs_mrsh.c>
#endif

int z_impl_k_msgq_get(struct k_msgq *msgq, void *data, s32_t timeout)
{
   1b6f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1b6fc:	4604      	mov	r4, r0
   1b6fe:	4688      	mov	r8, r1
   1b700:	4615      	mov	r5, r2
   1b702:	f3ef 8305 	mrs	r3, IPSR
	__ASSERT(!arch_is_in_isr() || timeout == K_NO_WAIT, "");
   1b706:	b16b      	cbz	r3, 1b724 <z_impl_k_msgq_get+0x2c>
   1b708:	b162      	cbz	r2, 1b724 <z_impl_k_msgq_get+0x2c>
   1b70a:	4947      	ldr	r1, [pc, #284]	; (1b828 <z_impl_k_msgq_get+0x130>)
   1b70c:	23c1      	movs	r3, #193	; 0xc1
   1b70e:	4a47      	ldr	r2, [pc, #284]	; (1b82c <z_impl_k_msgq_get+0x134>)
   1b710:	4847      	ldr	r0, [pc, #284]	; (1b830 <z_impl_k_msgq_get+0x138>)
   1b712:	f004 fb62 	bl	1fdda <printk>
   1b716:	4847      	ldr	r0, [pc, #284]	; (1b834 <z_impl_k_msgq_get+0x13c>)
   1b718:	f004 fb5f 	bl	1fdda <printk>
   1b71c:	21c1      	movs	r1, #193	; 0xc1
   1b71e:	4843      	ldr	r0, [pc, #268]	; (1b82c <z_impl_k_msgq_get+0x134>)
   1b720:	f004 fba1 	bl	1fe66 <assert_post_action>

	k_spinlock_key_t key;
	struct k_thread *pending_thread;
	int result;

	key = k_spin_lock(&msgq->lock);
   1b724:	f104 0608 	add.w	r6, r4, #8
	__asm__ volatile(
   1b728:	f04f 0320 	mov.w	r3, #32
   1b72c:	f3ef 8711 	mrs	r7, BASEPRI
   1b730:	f383 8811 	msr	BASEPRI, r3
   1b734:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1b738:	4630      	mov	r0, r6
   1b73a:	f001 fd99 	bl	1d270 <z_spin_lock_valid>
   1b73e:	b968      	cbnz	r0, 1b75c <z_impl_k_msgq_get+0x64>
   1b740:	234a      	movs	r3, #74	; 0x4a
   1b742:	4a3d      	ldr	r2, [pc, #244]	; (1b838 <z_impl_k_msgq_get+0x140>)
   1b744:	493d      	ldr	r1, [pc, #244]	; (1b83c <z_impl_k_msgq_get+0x144>)
   1b746:	483a      	ldr	r0, [pc, #232]	; (1b830 <z_impl_k_msgq_get+0x138>)
   1b748:	f004 fb47 	bl	1fdda <printk>
   1b74c:	4631      	mov	r1, r6
   1b74e:	483c      	ldr	r0, [pc, #240]	; (1b840 <z_impl_k_msgq_get+0x148>)
   1b750:	f004 fb43 	bl	1fdda <printk>
   1b754:	214a      	movs	r1, #74	; 0x4a
   1b756:	4838      	ldr	r0, [pc, #224]	; (1b838 <z_impl_k_msgq_get+0x140>)
   1b758:	f004 fb85 	bl	1fe66 <assert_post_action>
	z_spin_lock_set_owner(l);
   1b75c:	4630      	mov	r0, r6
   1b75e:	f001 fda5 	bl	1d2ac <z_spin_lock_set_owner>

	if (msgq->used_msgs > 0) {
   1b762:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1b764:	2b00      	cmp	r3, #0
   1b766:	d039      	beq.n	1b7dc <z_impl_k_msgq_get+0xe4>
   1b768:	68e2      	ldr	r2, [r4, #12]
   1b76a:	69e1      	ldr	r1, [r4, #28]
   1b76c:	4640      	mov	r0, r8
   1b76e:	f006 f8e4 	bl	2193a <memcpy>
		/* take first available message from queue */
		(void)memcpy(data, msgq->read_ptr, msgq->msg_size);
		msgq->read_ptr += msgq->msg_size;
   1b772:	69e3      	ldr	r3, [r4, #28]
   1b774:	68e2      	ldr	r2, [r4, #12]
			msgq->read_ptr = msgq->buffer_start;
		}
		msgq->used_msgs--;

		/* handle first thread waiting to write (if any) */
		pending_thread = z_unpend_first_thread(&msgq->wait_q);
   1b776:	4620      	mov	r0, r4
		msgq->read_ptr += msgq->msg_size;
   1b778:	4413      	add	r3, r2
		if (msgq->read_ptr == msgq->buffer_end) {
   1b77a:	69a2      	ldr	r2, [r4, #24]
		msgq->read_ptr += msgq->msg_size;
   1b77c:	61e3      	str	r3, [r4, #28]
		if (msgq->read_ptr == msgq->buffer_end) {
   1b77e:	4293      	cmp	r3, r2
			msgq->read_ptr = msgq->buffer_start;
   1b780:	bf04      	itt	eq
   1b782:	6963      	ldreq	r3, [r4, #20]
   1b784:	61e3      	streq	r3, [r4, #28]
		msgq->used_msgs--;
   1b786:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1b788:	3b01      	subs	r3, #1
   1b78a:	6263      	str	r3, [r4, #36]	; 0x24
		pending_thread = z_unpend_first_thread(&msgq->wait_q);
   1b78c:	f001 fa52 	bl	1cc34 <z_unpend_first_thread>
		if (pending_thread != NULL) {
   1b790:	4605      	mov	r5, r0
   1b792:	2800      	cmp	r0, #0
   1b794:	d031      	beq.n	1b7fa <z_impl_k_msgq_get+0x102>
   1b796:	68e2      	ldr	r2, [r4, #12]
   1b798:	6941      	ldr	r1, [r0, #20]
   1b79a:	6a20      	ldr	r0, [r4, #32]
   1b79c:	f006 f8cd 	bl	2193a <memcpy>
			/* add thread's message to queue */
			(void)memcpy(msgq->write_ptr, pending_thread->base.swap_data,
			       msgq->msg_size);
			msgq->write_ptr += msgq->msg_size;
   1b7a0:	6a23      	ldr	r3, [r4, #32]
   1b7a2:	68e2      	ldr	r2, [r4, #12]
   1b7a4:	4413      	add	r3, r2
			if (msgq->write_ptr == msgq->buffer_end) {
   1b7a6:	69a2      	ldr	r2, [r4, #24]
			msgq->write_ptr += msgq->msg_size;
   1b7a8:	6223      	str	r3, [r4, #32]
			if (msgq->write_ptr == msgq->buffer_end) {
   1b7aa:	4293      	cmp	r3, r2
				msgq->write_ptr = msgq->buffer_start;
   1b7ac:	bf04      	itt	eq
   1b7ae:	6963      	ldreq	r3, [r4, #20]
   1b7b0:	6223      	streq	r3, [r4, #32]
			}
			msgq->used_msgs++;
   1b7b2:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1b7b4:	3301      	adds	r3, #1
   1b7b6:	6263      	str	r3, [r4, #36]	; 0x24
   1b7b8:	2300      	movs	r3, #0
   1b7ba:	66ab      	str	r3, [r5, #104]	; 0x68
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
   1b7bc:	7b6b      	ldrb	r3, [r5, #13]
   1b7be:	06db      	lsls	r3, r3, #27
   1b7c0:	d104      	bne.n	1b7cc <z_impl_k_msgq_get+0xd4>
	if (z_is_thread_ready(thread)) {
   1b7c2:	69ab      	ldr	r3, [r5, #24]
   1b7c4:	b913      	cbnz	r3, 1b7cc <z_impl_k_msgq_get+0xd4>
		z_add_thread_to_ready_q(thread);
   1b7c6:	4628      	mov	r0, r5
   1b7c8:	f000 fdbe 	bl	1c348 <z_add_thread_to_ready_q>

			/* wake up waiting thread */
			arch_thread_return_value_set(pending_thread, 0);
			z_ready_thread(pending_thread);
			z_reschedule(&msgq->lock, key);
   1b7cc:	4639      	mov	r1, r7
   1b7ce:	4630      	mov	r0, r6
   1b7d0:	f000 fbd0 	bl	1bf74 <z_reschedule>
			return 0;
   1b7d4:	2500      	movs	r5, #0
	}

	k_spin_unlock(&msgq->lock, key);

	return result;
}
   1b7d6:	4628      	mov	r0, r5
   1b7d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	} else if (timeout == K_NO_WAIT) {
   1b7dc:	b15d      	cbz	r5, 1b7f6 <z_impl_k_msgq_get+0xfe>
		_current->base.swap_data = data;
   1b7de:	4b19      	ldr	r3, [pc, #100]	; (1b844 <z_impl_k_msgq_get+0x14c>)
		return z_pend_curr(&msgq->lock, key, &msgq->wait_q, timeout);
   1b7e0:	4622      	mov	r2, r4
		_current->base.swap_data = data;
   1b7e2:	689b      	ldr	r3, [r3, #8]
		return z_pend_curr(&msgq->lock, key, &msgq->wait_q, timeout);
   1b7e4:	4639      	mov	r1, r7
		_current->base.swap_data = data;
   1b7e6:	f8c3 8014 	str.w	r8, [r3, #20]
		return z_pend_curr(&msgq->lock, key, &msgq->wait_q, timeout);
   1b7ea:	4630      	mov	r0, r6
   1b7ec:	462b      	mov	r3, r5
}
   1b7ee:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		return z_pend_curr(&msgq->lock, key, &msgq->wait_q, timeout);
   1b7f2:	f001 b963 	b.w	1cabc <z_pend_curr>
		result = -ENOMSG;
   1b7f6:	f06f 0522 	mvn.w	r5, #34	; 0x22
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1b7fa:	4630      	mov	r0, r6
   1b7fc:	f001 fd46 	bl	1d28c <z_spin_unlock_valid>
   1b800:	b968      	cbnz	r0, 1b81e <z_impl_k_msgq_get+0x126>
   1b802:	235d      	movs	r3, #93	; 0x5d
   1b804:	4a0c      	ldr	r2, [pc, #48]	; (1b838 <z_impl_k_msgq_get+0x140>)
   1b806:	4910      	ldr	r1, [pc, #64]	; (1b848 <z_impl_k_msgq_get+0x150>)
   1b808:	4809      	ldr	r0, [pc, #36]	; (1b830 <z_impl_k_msgq_get+0x138>)
   1b80a:	f004 fae6 	bl	1fdda <printk>
   1b80e:	4631      	mov	r1, r6
   1b810:	480e      	ldr	r0, [pc, #56]	; (1b84c <z_impl_k_msgq_get+0x154>)
   1b812:	f004 fae2 	bl	1fdda <printk>
   1b816:	215d      	movs	r1, #93	; 0x5d
   1b818:	4807      	ldr	r0, [pc, #28]	; (1b838 <z_impl_k_msgq_get+0x140>)
   1b81a:	f004 fb24 	bl	1fe66 <assert_post_action>
	__asm__ volatile(
   1b81e:	f387 8811 	msr	BASEPRI, r7
   1b822:	f3bf 8f6f 	isb	sy
	return result;
   1b826:	e7d6      	b.n	1b7d6 <z_impl_k_msgq_get+0xde>
   1b828:	000250e9 	.word	0x000250e9
   1b82c:	000250c7 	.word	0x000250c7
   1b830:	00023451 	.word	0x00023451
   1b834:	000241f4 	.word	0x000241f4
   1b838:	00023852 	.word	0x00023852
   1b83c:	00023878 	.word	0x00023878
   1b840:	0002388d 	.word	0x0002388d
   1b844:	20021398 	.word	0x20021398
   1b848:	000238a5 	.word	0x000238a5
   1b84c:	000238bc 	.word	0x000238bc

0001b850 <z_impl_k_mutex_lock>:
	}
	return false;
}

int z_impl_k_mutex_lock(struct k_mutex *mutex, s32_t timeout)
{
   1b850:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1b852:	4604      	mov	r4, r0
   1b854:	460e      	mov	r6, r1
	__asm__ volatile(
   1b856:	f04f 0320 	mov.w	r3, #32
   1b85a:	f3ef 8511 	mrs	r5, BASEPRI
   1b85e:	f383 8811 	msr	BASEPRI, r3
   1b862:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1b866:	4861      	ldr	r0, [pc, #388]	; (1b9ec <z_impl_k_mutex_lock+0x19c>)
   1b868:	f001 fd02 	bl	1d270 <z_spin_lock_valid>
   1b86c:	b968      	cbnz	r0, 1b88a <z_impl_k_mutex_lock+0x3a>
   1b86e:	234a      	movs	r3, #74	; 0x4a
   1b870:	4a5f      	ldr	r2, [pc, #380]	; (1b9f0 <z_impl_k_mutex_lock+0x1a0>)
   1b872:	4960      	ldr	r1, [pc, #384]	; (1b9f4 <z_impl_k_mutex_lock+0x1a4>)
   1b874:	4860      	ldr	r0, [pc, #384]	; (1b9f8 <z_impl_k_mutex_lock+0x1a8>)
   1b876:	f004 fab0 	bl	1fdda <printk>
   1b87a:	495c      	ldr	r1, [pc, #368]	; (1b9ec <z_impl_k_mutex_lock+0x19c>)
   1b87c:	485f      	ldr	r0, [pc, #380]	; (1b9fc <z_impl_k_mutex_lock+0x1ac>)
   1b87e:	f004 faac 	bl	1fdda <printk>
   1b882:	214a      	movs	r1, #74	; 0x4a
   1b884:	485a      	ldr	r0, [pc, #360]	; (1b9f0 <z_impl_k_mutex_lock+0x1a0>)
   1b886:	f004 faee 	bl	1fe66 <assert_post_action>
	z_spin_lock_set_owner(l);
   1b88a:	4858      	ldr	r0, [pc, #352]	; (1b9ec <z_impl_k_mutex_lock+0x19c>)
   1b88c:	f001 fd0e 	bl	1d2ac <z_spin_lock_set_owner>
	bool resched = false;

	sys_trace_void(SYS_TRACE_ID_MUTEX_LOCK);
	key = k_spin_lock(&lock);

	if (likely((mutex->lock_count == 0U) || (mutex->owner == _current))) {
   1b890:	68e3      	ldr	r3, [r4, #12]
   1b892:	4a5b      	ldr	r2, [pc, #364]	; (1ba00 <z_impl_k_mutex_lock+0x1b0>)
   1b894:	b1f3      	cbz	r3, 1b8d4 <z_impl_k_mutex_lock+0x84>
   1b896:	68a0      	ldr	r0, [r4, #8]
   1b898:	6891      	ldr	r1, [r2, #8]
   1b89a:	4288      	cmp	r0, r1
   1b89c:	d03a      	beq.n	1b914 <z_impl_k_mutex_lock+0xc4>
		sys_trace_end_call(SYS_TRACE_ID_MUTEX_LOCK);

		return 0;
	}

	if (unlikely(timeout == (s32_t)K_NO_WAIT)) {
   1b89e:	2e00      	cmp	r6, #0
   1b8a0:	d13a      	bne.n	1b918 <z_impl_k_mutex_lock+0xc8>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1b8a2:	4852      	ldr	r0, [pc, #328]	; (1b9ec <z_impl_k_mutex_lock+0x19c>)
   1b8a4:	f001 fcf2 	bl	1d28c <z_spin_unlock_valid>
   1b8a8:	b968      	cbnz	r0, 1b8c6 <z_impl_k_mutex_lock+0x76>
   1b8aa:	235d      	movs	r3, #93	; 0x5d
   1b8ac:	4a50      	ldr	r2, [pc, #320]	; (1b9f0 <z_impl_k_mutex_lock+0x1a0>)
   1b8ae:	4955      	ldr	r1, [pc, #340]	; (1ba04 <z_impl_k_mutex_lock+0x1b4>)
   1b8b0:	4851      	ldr	r0, [pc, #324]	; (1b9f8 <z_impl_k_mutex_lock+0x1a8>)
   1b8b2:	f004 fa92 	bl	1fdda <printk>
   1b8b6:	494d      	ldr	r1, [pc, #308]	; (1b9ec <z_impl_k_mutex_lock+0x19c>)
   1b8b8:	4853      	ldr	r0, [pc, #332]	; (1ba08 <z_impl_k_mutex_lock+0x1b8>)
   1b8ba:	f004 fa8e 	bl	1fdda <printk>
   1b8be:	215d      	movs	r1, #93	; 0x5d
   1b8c0:	484b      	ldr	r0, [pc, #300]	; (1b9f0 <z_impl_k_mutex_lock+0x1a0>)
   1b8c2:	f004 fad0 	bl	1fe66 <assert_post_action>
	__asm__ volatile(
   1b8c6:	f385 8811 	msr	BASEPRI, r5
   1b8ca:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		sys_trace_end_call(SYS_TRACE_ID_MUTEX_LOCK);
		return -EBUSY;
   1b8ce:	f06f 000f 	mvn.w	r0, #15
   1b8d2:	e01e      	b.n	1b912 <z_impl_k_mutex_lock+0xc2>
					_current->base.prio :
   1b8d4:	6891      	ldr	r1, [r2, #8]
   1b8d6:	f991 100e 	ldrsb.w	r1, [r1, #14]
		mutex->lock_count++;
   1b8da:	3301      	adds	r3, #1
   1b8dc:	60e3      	str	r3, [r4, #12]
		mutex->owner = _current;
   1b8de:	6893      	ldr	r3, [r2, #8]
		mutex->owner_orig_prio = (mutex->lock_count == 0U) ?
   1b8e0:	6121      	str	r1, [r4, #16]
		mutex->owner = _current;
   1b8e2:	60a3      	str	r3, [r4, #8]
   1b8e4:	4841      	ldr	r0, [pc, #260]	; (1b9ec <z_impl_k_mutex_lock+0x19c>)
   1b8e6:	f001 fcd1 	bl	1d28c <z_spin_unlock_valid>
   1b8ea:	b968      	cbnz	r0, 1b908 <z_impl_k_mutex_lock+0xb8>
   1b8ec:	235d      	movs	r3, #93	; 0x5d
   1b8ee:	4a40      	ldr	r2, [pc, #256]	; (1b9f0 <z_impl_k_mutex_lock+0x1a0>)
   1b8f0:	4944      	ldr	r1, [pc, #272]	; (1ba04 <z_impl_k_mutex_lock+0x1b4>)
   1b8f2:	4841      	ldr	r0, [pc, #260]	; (1b9f8 <z_impl_k_mutex_lock+0x1a8>)
   1b8f4:	f004 fa71 	bl	1fdda <printk>
   1b8f8:	493c      	ldr	r1, [pc, #240]	; (1b9ec <z_impl_k_mutex_lock+0x19c>)
   1b8fa:	4843      	ldr	r0, [pc, #268]	; (1ba08 <z_impl_k_mutex_lock+0x1b8>)
   1b8fc:	f004 fa6d 	bl	1fdda <printk>
   1b900:	215d      	movs	r1, #93	; 0x5d
   1b902:	483b      	ldr	r0, [pc, #236]	; (1b9f0 <z_impl_k_mutex_lock+0x1a0>)
   1b904:	f004 faaf 	bl	1fe66 <assert_post_action>
   1b908:	f385 8811 	msr	BASEPRI, r5
   1b90c:	f3bf 8f6f 	isb	sy
		return 0;
   1b910:	2000      	movs	r0, #0
		k_spin_unlock(&lock, key);
	}

	sys_trace_end_call(SYS_TRACE_ID_MUTEX_LOCK);
	return -EAGAIN;
}
   1b912:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
					_current->base.prio :
   1b914:	6921      	ldr	r1, [r4, #16]
   1b916:	e7e0      	b.n	1b8da <z_impl_k_mutex_lock+0x8a>
	new_prio = new_prio_for_inheritance(_current->base.prio,
   1b918:	f990 300e 	ldrsb.w	r3, [r0, #14]
   1b91c:	f991 100e 	ldrsb.w	r1, [r1, #14]
   1b920:	4299      	cmp	r1, r3
   1b922:	bfa8      	it	ge
   1b924:	4619      	movge	r1, r3
   1b926:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
	if (z_is_prio_higher(new_prio, mutex->owner->base.prio)) {
   1b92a:	4299      	cmp	r1, r3
   1b92c:	da40      	bge.n	1b9b0 <z_impl_k_mutex_lock+0x160>
		return z_set_prio(mutex->owner, new_prio);
   1b92e:	f001 f8f3 	bl	1cb18 <z_set_prio>
   1b932:	4607      	mov	r7, r0
	int got_mutex = z_pend_curr(&lock, key, &mutex->wait_q, timeout);
   1b934:	4633      	mov	r3, r6
   1b936:	4622      	mov	r2, r4
   1b938:	4629      	mov	r1, r5
   1b93a:	482c      	ldr	r0, [pc, #176]	; (1b9ec <z_impl_k_mutex_lock+0x19c>)
   1b93c:	f001 f8be 	bl	1cabc <z_pend_curr>
	if (got_mutex == 0) {
   1b940:	2800      	cmp	r0, #0
   1b942:	d0e6      	beq.n	1b912 <z_impl_k_mutex_lock+0xc2>
	__asm__ volatile(
   1b944:	f04f 0320 	mov.w	r3, #32
   1b948:	f3ef 8511 	mrs	r5, BASEPRI
   1b94c:	f383 8811 	msr	BASEPRI, r3
   1b950:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1b954:	4825      	ldr	r0, [pc, #148]	; (1b9ec <z_impl_k_mutex_lock+0x19c>)
   1b956:	f001 fc8b 	bl	1d270 <z_spin_lock_valid>
   1b95a:	b968      	cbnz	r0, 1b978 <z_impl_k_mutex_lock+0x128>
   1b95c:	234a      	movs	r3, #74	; 0x4a
   1b95e:	4a24      	ldr	r2, [pc, #144]	; (1b9f0 <z_impl_k_mutex_lock+0x1a0>)
   1b960:	4924      	ldr	r1, [pc, #144]	; (1b9f4 <z_impl_k_mutex_lock+0x1a4>)
   1b962:	4825      	ldr	r0, [pc, #148]	; (1b9f8 <z_impl_k_mutex_lock+0x1a8>)
   1b964:	f004 fa39 	bl	1fdda <printk>
   1b968:	4920      	ldr	r1, [pc, #128]	; (1b9ec <z_impl_k_mutex_lock+0x19c>)
   1b96a:	4824      	ldr	r0, [pc, #144]	; (1b9fc <z_impl_k_mutex_lock+0x1ac>)
   1b96c:	f004 fa35 	bl	1fdda <printk>
   1b970:	214a      	movs	r1, #74	; 0x4a
   1b972:	481f      	ldr	r0, [pc, #124]	; (1b9f0 <z_impl_k_mutex_lock+0x1a0>)
   1b974:	f004 fa77 	bl	1fe66 <assert_post_action>
	z_spin_lock_set_owner(l);
   1b978:	481c      	ldr	r0, [pc, #112]	; (1b9ec <z_impl_k_mutex_lock+0x19c>)
   1b97a:	f001 fc97 	bl	1d2ac <z_spin_lock_set_owner>
	return list->head == list;
   1b97e:	6823      	ldr	r3, [r4, #0]
   1b980:	6921      	ldr	r1, [r4, #16]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1b982:	429c      	cmp	r4, r3
   1b984:	d007      	beq.n	1b996 <z_impl_k_mutex_lock+0x146>
		new_prio_for_inheritance(waiter->base.prio, mutex->owner_orig_prio) :
   1b986:	b133      	cbz	r3, 1b996 <z_impl_k_mutex_lock+0x146>
   1b988:	f993 300e 	ldrsb.w	r3, [r3, #14]
   1b98c:	4299      	cmp	r1, r3
   1b98e:	bfa8      	it	ge
   1b990:	4619      	movge	r1, r3
   1b992:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
	resched = adjust_owner_prio(mutex, new_prio) || resched;
   1b996:	68a0      	ldr	r0, [r4, #8]
	if (mutex->owner->base.prio != new_prio) {
   1b998:	f990 300e 	ldrsb.w	r3, [r0, #14]
   1b99c:	4299      	cmp	r1, r3
   1b99e:	d109      	bne.n	1b9b4 <z_impl_k_mutex_lock+0x164>
	if (resched) {
   1b9a0:	b16f      	cbz	r7, 1b9be <z_impl_k_mutex_lock+0x16e>
		z_reschedule(&lock, key);
   1b9a2:	4629      	mov	r1, r5
   1b9a4:	4811      	ldr	r0, [pc, #68]	; (1b9ec <z_impl_k_mutex_lock+0x19c>)
   1b9a6:	f000 fae5 	bl	1bf74 <z_reschedule>
	return -EAGAIN;
   1b9aa:	f06f 000a 	mvn.w	r0, #10
   1b9ae:	e7b0      	b.n	1b912 <z_impl_k_mutex_lock+0xc2>
	bool resched = false;
   1b9b0:	2700      	movs	r7, #0
   1b9b2:	e7bf      	b.n	1b934 <z_impl_k_mutex_lock+0xe4>
		return z_set_prio(mutex->owner, new_prio);
   1b9b4:	f001 f8b0 	bl	1cb18 <z_set_prio>
	resched = adjust_owner_prio(mutex, new_prio) || resched;
   1b9b8:	2800      	cmp	r0, #0
   1b9ba:	d1f2      	bne.n	1b9a2 <z_impl_k_mutex_lock+0x152>
   1b9bc:	e7f0      	b.n	1b9a0 <z_impl_k_mutex_lock+0x150>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1b9be:	480b      	ldr	r0, [pc, #44]	; (1b9ec <z_impl_k_mutex_lock+0x19c>)
   1b9c0:	f001 fc64 	bl	1d28c <z_spin_unlock_valid>
   1b9c4:	b968      	cbnz	r0, 1b9e2 <z_impl_k_mutex_lock+0x192>
   1b9c6:	235d      	movs	r3, #93	; 0x5d
   1b9c8:	4a09      	ldr	r2, [pc, #36]	; (1b9f0 <z_impl_k_mutex_lock+0x1a0>)
   1b9ca:	490e      	ldr	r1, [pc, #56]	; (1ba04 <z_impl_k_mutex_lock+0x1b4>)
   1b9cc:	480a      	ldr	r0, [pc, #40]	; (1b9f8 <z_impl_k_mutex_lock+0x1a8>)
   1b9ce:	f004 fa04 	bl	1fdda <printk>
   1b9d2:	4906      	ldr	r1, [pc, #24]	; (1b9ec <z_impl_k_mutex_lock+0x19c>)
   1b9d4:	480c      	ldr	r0, [pc, #48]	; (1ba08 <z_impl_k_mutex_lock+0x1b8>)
   1b9d6:	f004 fa00 	bl	1fdda <printk>
   1b9da:	215d      	movs	r1, #93	; 0x5d
   1b9dc:	4804      	ldr	r0, [pc, #16]	; (1b9f0 <z_impl_k_mutex_lock+0x1a0>)
   1b9de:	f004 fa42 	bl	1fe66 <assert_post_action>
	__asm__ volatile(
   1b9e2:	f385 8811 	msr	BASEPRI, r5
   1b9e6:	f3bf 8f6f 	isb	sy
   1b9ea:	e7de      	b.n	1b9aa <z_impl_k_mutex_lock+0x15a>
   1b9ec:	20021394 	.word	0x20021394
   1b9f0:	00023852 	.word	0x00023852
   1b9f4:	00023878 	.word	0x00023878
   1b9f8:	00023451 	.word	0x00023451
   1b9fc:	0002388d 	.word	0x0002388d
   1ba00:	20021398 	.word	0x20021398
   1ba04:	000238a5 	.word	0x000238a5
   1ba08:	000238bc 	.word	0x000238bc

0001ba0c <z_impl_k_mutex_unlock>:
}
#include <syscalls/k_mutex_lock_mrsh.c>
#endif

int z_impl_k_mutex_unlock(struct k_mutex *mutex)
{
   1ba0c:	b538      	push	{r3, r4, r5, lr}
	struct k_thread *new_owner;

	CHECKIF(mutex->owner == NULL) {
   1ba0e:	6883      	ldr	r3, [r0, #8]
{
   1ba10:	4604      	mov	r4, r0
	CHECKIF(mutex->owner == NULL) {
   1ba12:	2b00      	cmp	r3, #0
   1ba14:	f000 8096 	beq.w	1bb44 <z_impl_k_mutex_unlock+0x138>
		return -EINVAL;
	}
	/*
	 * The current thread does not own the mutex.
	 */
	CHECKIF(mutex->owner != _current) {
   1ba18:	4d4d      	ldr	r5, [pc, #308]	; (1bb50 <z_impl_k_mutex_unlock+0x144>)
   1ba1a:	68aa      	ldr	r2, [r5, #8]
   1ba1c:	4293      	cmp	r3, r2
   1ba1e:	f040 8094 	bne.w	1bb4a <z_impl_k_mutex_unlock+0x13e>
	 * Attempt to unlock a mutex which is unlocked. mutex->lock_count
	 * cannot be zero if the current thread is equal to mutex->owner,
	 * therefore no underflow check is required. Use assert to catch
	 * undefined behavior.
	 */
	__ASSERT_NO_MSG(mutex->lock_count > 0U);
   1ba22:	68c3      	ldr	r3, [r0, #12]
   1ba24:	b94b      	cbnz	r3, 1ba3a <z_impl_k_mutex_unlock+0x2e>
   1ba26:	494b      	ldr	r1, [pc, #300]	; (1bb54 <z_impl_k_mutex_unlock+0x148>)
   1ba28:	484b      	ldr	r0, [pc, #300]	; (1bb58 <z_impl_k_mutex_unlock+0x14c>)
   1ba2a:	23e5      	movs	r3, #229	; 0xe5
   1ba2c:	4a4b      	ldr	r2, [pc, #300]	; (1bb5c <z_impl_k_mutex_unlock+0x150>)
   1ba2e:	f004 f9d4 	bl	1fdda <printk>
   1ba32:	21e5      	movs	r1, #229	; 0xe5
   1ba34:	4849      	ldr	r0, [pc, #292]	; (1bb5c <z_impl_k_mutex_unlock+0x150>)
   1ba36:	f004 fa16 	bl	1fe66 <assert_post_action>
   1ba3a:	f3ef 8305 	mrs	r3, IPSR
}

static inline void z_sched_lock(void)
{
#ifdef CONFIG_PREEMPT_ENABLED
	__ASSERT(!arch_is_in_isr(), "");
   1ba3e:	b173      	cbz	r3, 1ba5e <z_impl_k_mutex_unlock+0x52>
   1ba40:	4947      	ldr	r1, [pc, #284]	; (1bb60 <z_impl_k_mutex_unlock+0x154>)
   1ba42:	f240 130d 	movw	r3, #269	; 0x10d
   1ba46:	4a47      	ldr	r2, [pc, #284]	; (1bb64 <z_impl_k_mutex_unlock+0x158>)
   1ba48:	4843      	ldr	r0, [pc, #268]	; (1bb58 <z_impl_k_mutex_unlock+0x14c>)
   1ba4a:	f004 f9c6 	bl	1fdda <printk>
   1ba4e:	4846      	ldr	r0, [pc, #280]	; (1bb68 <z_impl_k_mutex_unlock+0x15c>)
   1ba50:	f004 f9c3 	bl	1fdda <printk>
   1ba54:	f240 110d 	movw	r1, #269	; 0x10d
   1ba58:	4842      	ldr	r0, [pc, #264]	; (1bb64 <z_impl_k_mutex_unlock+0x158>)
   1ba5a:	f004 fa04 	bl	1fe66 <assert_post_action>
	__ASSERT(_current->base.sched_locked != 1, "");
   1ba5e:	68ab      	ldr	r3, [r5, #8]
   1ba60:	7bdb      	ldrb	r3, [r3, #15]
   1ba62:	2b01      	cmp	r3, #1
   1ba64:	d10e      	bne.n	1ba84 <z_impl_k_mutex_unlock+0x78>
   1ba66:	4941      	ldr	r1, [pc, #260]	; (1bb6c <z_impl_k_mutex_unlock+0x160>)
   1ba68:	f44f 7387 	mov.w	r3, #270	; 0x10e
   1ba6c:	4a3d      	ldr	r2, [pc, #244]	; (1bb64 <z_impl_k_mutex_unlock+0x158>)
   1ba6e:	483a      	ldr	r0, [pc, #232]	; (1bb58 <z_impl_k_mutex_unlock+0x14c>)
   1ba70:	f004 f9b3 	bl	1fdda <printk>
   1ba74:	483c      	ldr	r0, [pc, #240]	; (1bb68 <z_impl_k_mutex_unlock+0x15c>)
   1ba76:	f004 f9b0 	bl	1fdda <printk>
   1ba7a:	f44f 7187 	mov.w	r1, #270	; 0x10e
   1ba7e:	4839      	ldr	r0, [pc, #228]	; (1bb64 <z_impl_k_mutex_unlock+0x158>)
   1ba80:	f004 f9f1 	bl	1fe66 <assert_post_action>

	--_current->base.sched_locked;
   1ba84:	68aa      	ldr	r2, [r5, #8]
   1ba86:	7bd3      	ldrb	r3, [r2, #15]
   1ba88:	3b01      	subs	r3, #1
   1ba8a:	73d3      	strb	r3, [r2, #15]

	/*
	 * If we are the owner and count is greater than 1, then decrement
	 * the count and return and keep current thread as the owner.
	 */
	if (mutex->lock_count - 1U != 0U) {
   1ba8c:	68e3      	ldr	r3, [r4, #12]
   1ba8e:	2b01      	cmp	r3, #1
   1ba90:	d005      	beq.n	1ba9e <z_impl_k_mutex_unlock+0x92>
		mutex->lock_count--;
   1ba92:	3b01      	subs	r3, #1
   1ba94:	60e3      	str	r3, [r4, #12]
		k_spin_unlock(&lock, key);
	}


k_mutex_unlock_return:
	k_sched_unlock();
   1ba96:	f000 fbdb 	bl	1c250 <k_sched_unlock>
	sys_trace_end_call(SYS_TRACE_ID_MUTEX_UNLOCK);

	return 0;
   1ba9a:	2000      	movs	r0, #0
}
   1ba9c:	bd38      	pop	{r3, r4, r5, pc}
	__asm__ volatile(
   1ba9e:	f04f 0320 	mov.w	r3, #32
   1baa2:	f3ef 8511 	mrs	r5, BASEPRI
   1baa6:	f383 8811 	msr	BASEPRI, r3
   1baaa:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1baae:	4830      	ldr	r0, [pc, #192]	; (1bb70 <z_impl_k_mutex_unlock+0x164>)
   1bab0:	f001 fbde 	bl	1d270 <z_spin_lock_valid>
   1bab4:	b968      	cbnz	r0, 1bad2 <z_impl_k_mutex_unlock+0xc6>
   1bab6:	234a      	movs	r3, #74	; 0x4a
   1bab8:	4a2e      	ldr	r2, [pc, #184]	; (1bb74 <z_impl_k_mutex_unlock+0x168>)
   1baba:	492f      	ldr	r1, [pc, #188]	; (1bb78 <z_impl_k_mutex_unlock+0x16c>)
   1babc:	4826      	ldr	r0, [pc, #152]	; (1bb58 <z_impl_k_mutex_unlock+0x14c>)
   1babe:	f004 f98c 	bl	1fdda <printk>
   1bac2:	492b      	ldr	r1, [pc, #172]	; (1bb70 <z_impl_k_mutex_unlock+0x164>)
   1bac4:	482d      	ldr	r0, [pc, #180]	; (1bb7c <z_impl_k_mutex_unlock+0x170>)
   1bac6:	f004 f988 	bl	1fdda <printk>
   1baca:	214a      	movs	r1, #74	; 0x4a
   1bacc:	4829      	ldr	r0, [pc, #164]	; (1bb74 <z_impl_k_mutex_unlock+0x168>)
   1bace:	f004 f9ca 	bl	1fe66 <assert_post_action>
	z_spin_lock_set_owner(l);
   1bad2:	4827      	ldr	r0, [pc, #156]	; (1bb70 <z_impl_k_mutex_unlock+0x164>)
   1bad4:	f001 fbea 	bl	1d2ac <z_spin_lock_set_owner>
	adjust_owner_prio(mutex, mutex->owner_orig_prio);
   1bad8:	68a0      	ldr	r0, [r4, #8]
   1bada:	6921      	ldr	r1, [r4, #16]
	if (mutex->owner->base.prio != new_prio) {
   1badc:	f990 300e 	ldrsb.w	r3, [r0, #14]
   1bae0:	4299      	cmp	r1, r3
   1bae2:	d001      	beq.n	1bae8 <z_impl_k_mutex_unlock+0xdc>
		return z_set_prio(mutex->owner, new_prio);
   1bae4:	f001 f818 	bl	1cb18 <z_set_prio>
	new_owner = z_unpend_first_thread(&mutex->wait_q);
   1bae8:	4620      	mov	r0, r4
   1baea:	f001 f8a3 	bl	1cc34 <z_unpend_first_thread>
	mutex->owner = new_owner;
   1baee:	60a0      	str	r0, [r4, #8]
	if (new_owner != NULL) {
   1baf0:	b180      	cbz	r0, 1bb14 <z_impl_k_mutex_unlock+0x108>
		mutex->owner_orig_prio = new_owner->base.prio;
   1baf2:	f990 200e 	ldrsb.w	r2, [r0, #14]
   1baf6:	6122      	str	r2, [r4, #16]
   1baf8:	2200      	movs	r2, #0
   1bafa:	6682      	str	r2, [r0, #104]	; 0x68
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
   1bafc:	7b42      	ldrb	r2, [r0, #13]
   1bafe:	06d2      	lsls	r2, r2, #27
   1bb00:	d103      	bne.n	1bb0a <z_impl_k_mutex_unlock+0xfe>
	if (z_is_thread_ready(thread)) {
   1bb02:	6983      	ldr	r3, [r0, #24]
   1bb04:	b90b      	cbnz	r3, 1bb0a <z_impl_k_mutex_unlock+0xfe>
		z_add_thread_to_ready_q(thread);
   1bb06:	f000 fc1f 	bl	1c348 <z_add_thread_to_ready_q>
		z_reschedule(&lock, key);
   1bb0a:	4629      	mov	r1, r5
   1bb0c:	4818      	ldr	r0, [pc, #96]	; (1bb70 <z_impl_k_mutex_unlock+0x164>)
   1bb0e:	f000 fa31 	bl	1bf74 <z_reschedule>
   1bb12:	e7c0      	b.n	1ba96 <z_impl_k_mutex_unlock+0x8a>
		mutex->lock_count = 0U;
   1bb14:	60e0      	str	r0, [r4, #12]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1bb16:	4816      	ldr	r0, [pc, #88]	; (1bb70 <z_impl_k_mutex_unlock+0x164>)
   1bb18:	f001 fbb8 	bl	1d28c <z_spin_unlock_valid>
   1bb1c:	b968      	cbnz	r0, 1bb3a <z_impl_k_mutex_unlock+0x12e>
   1bb1e:	235d      	movs	r3, #93	; 0x5d
   1bb20:	4a14      	ldr	r2, [pc, #80]	; (1bb74 <z_impl_k_mutex_unlock+0x168>)
   1bb22:	4917      	ldr	r1, [pc, #92]	; (1bb80 <z_impl_k_mutex_unlock+0x174>)
   1bb24:	480c      	ldr	r0, [pc, #48]	; (1bb58 <z_impl_k_mutex_unlock+0x14c>)
   1bb26:	f004 f958 	bl	1fdda <printk>
   1bb2a:	4911      	ldr	r1, [pc, #68]	; (1bb70 <z_impl_k_mutex_unlock+0x164>)
   1bb2c:	4815      	ldr	r0, [pc, #84]	; (1bb84 <z_impl_k_mutex_unlock+0x178>)
   1bb2e:	f004 f954 	bl	1fdda <printk>
   1bb32:	215d      	movs	r1, #93	; 0x5d
   1bb34:	480f      	ldr	r0, [pc, #60]	; (1bb74 <z_impl_k_mutex_unlock+0x168>)
   1bb36:	f004 f996 	bl	1fe66 <assert_post_action>
	__asm__ volatile(
   1bb3a:	f385 8811 	msr	BASEPRI, r5
   1bb3e:	f3bf 8f6f 	isb	sy
   1bb42:	e7a8      	b.n	1ba96 <z_impl_k_mutex_unlock+0x8a>
		return -EINVAL;
   1bb44:	f06f 0015 	mvn.w	r0, #21
   1bb48:	e7a8      	b.n	1ba9c <z_impl_k_mutex_unlock+0x90>
		return -EPERM;
   1bb4a:	f04f 30ff 	mov.w	r0, #4294967295
   1bb4e:	e7a5      	b.n	1ba9c <z_impl_k_mutex_unlock+0x90>
   1bb50:	20021398 	.word	0x20021398
   1bb54:	0002512d 	.word	0x0002512d
   1bb58:	00023451 	.word	0x00023451
   1bb5c:	0002510b 	.word	0x0002510b
   1bb60:	0002516f 	.word	0x0002516f
   1bb64:	00025144 	.word	0x00025144
   1bb68:	000241f4 	.word	0x000241f4
   1bb6c:	00025181 	.word	0x00025181
   1bb70:	20021394 	.word	0x20021394
   1bb74:	00023852 	.word	0x00023852
   1bb78:	00023878 	.word	0x00023878
   1bb7c:	0002388d 	.word	0x0002388d
   1bb80:	000238a5 	.word	0x000238a5
   1bb84:	000238bc 	.word	0x000238bc

0001bb88 <queue_insert>:
#include <syscalls/k_queue_cancel_wait_mrsh.c>
#endif

static s32_t queue_insert(struct k_queue *queue, void *prev, void *data,
			  bool alloc)
{
   1bb88:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1bb8c:	4604      	mov	r4, r0
   1bb8e:	460e      	mov	r6, r1
   1bb90:	4690      	mov	r8, r2
   1bb92:	4699      	mov	r9, r3
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
   1bb94:	f100 0508 	add.w	r5, r0, #8
	__asm__ volatile(
   1bb98:	f04f 0320 	mov.w	r3, #32
   1bb9c:	f3ef 8711 	mrs	r7, BASEPRI
   1bba0:	f383 8811 	msr	BASEPRI, r3
   1bba4:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1bba8:	4628      	mov	r0, r5
   1bbaa:	f001 fb61 	bl	1d270 <z_spin_lock_valid>
   1bbae:	b968      	cbnz	r0, 1bbcc <queue_insert+0x44>
   1bbb0:	234a      	movs	r3, #74	; 0x4a
   1bbb2:	4a33      	ldr	r2, [pc, #204]	; (1bc80 <queue_insert+0xf8>)
   1bbb4:	4933      	ldr	r1, [pc, #204]	; (1bc84 <queue_insert+0xfc>)
   1bbb6:	4834      	ldr	r0, [pc, #208]	; (1bc88 <queue_insert+0x100>)
   1bbb8:	f004 f90f 	bl	1fdda <printk>
   1bbbc:	4629      	mov	r1, r5
   1bbbe:	4833      	ldr	r0, [pc, #204]	; (1bc8c <queue_insert+0x104>)
   1bbc0:	f004 f90b 	bl	1fdda <printk>
   1bbc4:	214a      	movs	r1, #74	; 0x4a
   1bbc6:	482e      	ldr	r0, [pc, #184]	; (1bc80 <queue_insert+0xf8>)
   1bbc8:	f004 f94d 	bl	1fe66 <assert_post_action>
	z_spin_lock_set_owner(l);
   1bbcc:	4628      	mov	r0, r5
   1bbce:	f001 fb6d 	bl	1d2ac <z_spin_lock_set_owner>
		return 0;
	}
#endif /* !CONFIG_POLL */

	/* Only need to actually allocate if no threads are pending */
	if (alloc) {
   1bbd2:	f1b9 0f00 	cmp.w	r9, #0
   1bbd6:	d02d      	beq.n	1bc34 <queue_insert+0xac>
		struct alloc_node *anode;

		anode = z_thread_malloc(sizeof(*anode));
   1bbd8:	2008      	movs	r0, #8
   1bbda:	f7ff fcd7 	bl	1b58c <z_thread_malloc>
		if (anode == NULL) {
   1bbde:	b9c8      	cbnz	r0, 1bc14 <queue_insert+0x8c>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1bbe0:	4628      	mov	r0, r5
   1bbe2:	f001 fb53 	bl	1d28c <z_spin_unlock_valid>
   1bbe6:	b968      	cbnz	r0, 1bc04 <queue_insert+0x7c>
   1bbe8:	235d      	movs	r3, #93	; 0x5d
   1bbea:	4a25      	ldr	r2, [pc, #148]	; (1bc80 <queue_insert+0xf8>)
   1bbec:	4928      	ldr	r1, [pc, #160]	; (1bc90 <queue_insert+0x108>)
   1bbee:	4826      	ldr	r0, [pc, #152]	; (1bc88 <queue_insert+0x100>)
   1bbf0:	f004 f8f3 	bl	1fdda <printk>
   1bbf4:	4629      	mov	r1, r5
   1bbf6:	4827      	ldr	r0, [pc, #156]	; (1bc94 <queue_insert+0x10c>)
   1bbf8:	f004 f8ef 	bl	1fdda <printk>
   1bbfc:	215d      	movs	r1, #93	; 0x5d
   1bbfe:	4820      	ldr	r0, [pc, #128]	; (1bc80 <queue_insert+0xf8>)
   1bc00:	f004 f931 	bl	1fe66 <assert_post_action>
	__asm__ volatile(
   1bc04:	f387 8811 	msr	BASEPRI, r7
   1bc08:	f3bf 8f6f 	isb	sy
			k_spin_unlock(&queue->lock, key);
			return -ENOMEM;
   1bc0c:	f06f 000b 	mvn.w	r0, #11
	handle_poll_events(queue, K_POLL_STATE_DATA_AVAILABLE);
#endif /* CONFIG_POLL */

	z_reschedule(&queue->lock, key);
	return 0;
}
   1bc10:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 * @param flags A value between 0 and 3 to set the flags value
 */
static inline void sys_sfnode_init(sys_sfnode_t *node, u8_t flags)
{
	__ASSERT((flags & ~SYS_SFLIST_FLAGS_MASK) == 0UL, "flags too large");
	node->next_and_flags = flags;
   1bc14:	2301      	movs	r3, #1
		anode->data = data;
   1bc16:	f8c0 8004 	str.w	r8, [r0, #4]
   1bc1a:	6003      	str	r3, [r0, #0]
 */
static inline void sys_sflist_insert(sys_sflist_t *list,
				     sys_sfnode_t *prev,
				     sys_sfnode_t *node);

Z_GENLIST_INSERT(sflist, sfnode)
   1bc1c:	6803      	ldr	r3, [r0, #0]
   1bc1e:	f003 0203 	and.w	r2, r3, #3
   1bc22:	b95e      	cbnz	r6, 1bc3c <queue_insert+0xb4>
	parent->next_and_flags = cur_flags | (unative_t)child;
   1bc24:	6823      	ldr	r3, [r4, #0]
   1bc26:	4313      	orrs	r3, r2
   1bc28:	6003      	str	r3, [r0, #0]
Z_GENLIST_PREPEND(sflist, sfnode)
   1bc2a:	6863      	ldr	r3, [r4, #4]
	list->head = node;
   1bc2c:	6020      	str	r0, [r4, #0]
Z_GENLIST_PREPEND(sflist, sfnode)
   1bc2e:	b973      	cbnz	r3, 1bc4e <queue_insert+0xc6>
	list->tail = node;
   1bc30:	6060      	str	r0, [r4, #4]
   1bc32:	e00c      	b.n	1bc4e <queue_insert+0xc6>
	node->next_and_flags = flags;
   1bc34:	f8c8 9000 	str.w	r9, [r8]
   1bc38:	4640      	mov	r0, r8
   1bc3a:	e7ef      	b.n	1bc1c <queue_insert+0x94>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   1bc3c:	6833      	ldr	r3, [r6, #0]
Z_GENLIST_INSERT(sflist, sfnode)
   1bc3e:	f033 0303 	bics.w	r3, r3, #3
   1bc42:	d115      	bne.n	1bc70 <queue_insert+0xe8>
	parent->next_and_flags = cur_flags | (unative_t)child;
   1bc44:	6002      	str	r2, [r0, #0]
Z_GENLIST_APPEND(sflist, sfnode)
   1bc46:	6862      	ldr	r2, [r4, #4]
   1bc48:	b962      	cbnz	r2, 1bc64 <queue_insert+0xdc>
	list->head = node;
   1bc4a:	e9c4 0000 	strd	r0, r0, [r4]
	z_handle_obj_poll_events(&queue->poll_events, state);
   1bc4e:	2104      	movs	r1, #4
   1bc50:	f104 000c 	add.w	r0, r4, #12
   1bc54:	f005 fe42 	bl	218dc <z_handle_obj_poll_events>
	z_reschedule(&queue->lock, key);
   1bc58:	4628      	mov	r0, r5
   1bc5a:	4639      	mov	r1, r7
   1bc5c:	f000 f98a 	bl	1bf74 <z_reschedule>
	return 0;
   1bc60:	2000      	movs	r0, #0
   1bc62:	e7d5      	b.n	1bc10 <queue_insert+0x88>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   1bc64:	6813      	ldr	r3, [r2, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   1bc66:	f003 0303 	and.w	r3, r3, #3
   1bc6a:	4303      	orrs	r3, r0
   1bc6c:	6013      	str	r3, [r2, #0]
   1bc6e:	e7df      	b.n	1bc30 <queue_insert+0xa8>
   1bc70:	4313      	orrs	r3, r2
   1bc72:	6003      	str	r3, [r0, #0]
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   1bc74:	6833      	ldr	r3, [r6, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   1bc76:	f003 0303 	and.w	r3, r3, #3
   1bc7a:	4318      	orrs	r0, r3
   1bc7c:	6030      	str	r0, [r6, #0]
   1bc7e:	e7e6      	b.n	1bc4e <queue_insert+0xc6>
   1bc80:	00023852 	.word	0x00023852
   1bc84:	00023878 	.word	0x00023878
   1bc88:	00023451 	.word	0x00023451
   1bc8c:	0002388d 	.word	0x0002388d
   1bc90:	000238a5 	.word	0x000238a5
   1bc94:	000238bc 	.word	0x000238bc

0001bc98 <z_impl_k_queue_get>:
	return val;
}
#endif /* CONFIG_POLL */

void *z_impl_k_queue_get(struct k_queue *queue, s32_t timeout)
{
   1bc98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1bc9c:	4606      	mov	r6, r0
   1bc9e:	b089      	sub	sp, #36	; 0x24
   1bca0:	460f      	mov	r7, r1
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
   1bca2:	f100 0408 	add.w	r4, r0, #8
	__asm__ volatile(
   1bca6:	f04f 0320 	mov.w	r3, #32
   1bcaa:	f3ef 8811 	mrs	r8, BASEPRI
   1bcae:	f383 8811 	msr	BASEPRI, r3
   1bcb2:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1bcb6:	4620      	mov	r0, r4
   1bcb8:	f001 fada 	bl	1d270 <z_spin_lock_valid>
   1bcbc:	b968      	cbnz	r0, 1bcda <z_impl_k_queue_get+0x42>
   1bcbe:	234a      	movs	r3, #74	; 0x4a
   1bcc0:	4a5f      	ldr	r2, [pc, #380]	; (1be40 <z_impl_k_queue_get+0x1a8>)
   1bcc2:	4960      	ldr	r1, [pc, #384]	; (1be44 <z_impl_k_queue_get+0x1ac>)
   1bcc4:	4860      	ldr	r0, [pc, #384]	; (1be48 <z_impl_k_queue_get+0x1b0>)
   1bcc6:	f004 f888 	bl	1fdda <printk>
   1bcca:	4621      	mov	r1, r4
   1bccc:	485f      	ldr	r0, [pc, #380]	; (1be4c <z_impl_k_queue_get+0x1b4>)
   1bcce:	f004 f884 	bl	1fdda <printk>
   1bcd2:	214a      	movs	r1, #74	; 0x4a
   1bcd4:	485a      	ldr	r0, [pc, #360]	; (1be40 <z_impl_k_queue_get+0x1a8>)
   1bcd6:	f004 f8c6 	bl	1fe66 <assert_post_action>
	z_spin_lock_set_owner(l);
   1bcda:	4620      	mov	r0, r4
   1bcdc:	f001 fae6 	bl	1d2ac <z_spin_lock_set_owner>
Z_GENLIST_IS_EMPTY(sflist)
   1bce0:	6835      	ldr	r5, [r6, #0]
	void *data;

	if (likely(!sys_sflist_is_empty(&queue->data_q))) {
   1bce2:	b335      	cbz	r5, 1bd32 <z_impl_k_queue_get+0x9a>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   1bce4:	682b      	ldr	r3, [r5, #0]
 *
 * @return A pointer to the first node of the list
 */
static inline sys_sfnode_t *sys_sflist_get_not_empty(sys_sflist_t *list);

Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode)
   1bce6:	6872      	ldr	r2, [r6, #4]
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   1bce8:	f023 0303 	bic.w	r3, r3, #3
Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode)
   1bcec:	4295      	cmp	r5, r2
		sys_sfnode_t *node;

		node = sys_sflist_get_not_empty(&queue->data_q);
		data = z_queue_node_peek(node, true);
   1bcee:	4628      	mov	r0, r5
	list->head = node;
   1bcf0:	6033      	str	r3, [r6, #0]
	list->tail = node;
   1bcf2:	bf08      	it	eq
   1bcf4:	6073      	streq	r3, [r6, #4]
   1bcf6:	2101      	movs	r1, #1
   1bcf8:	f005 fd0d 	bl	21716 <z_queue_node_peek>
   1bcfc:	4605      	mov	r5, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1bcfe:	4620      	mov	r0, r4
   1bd00:	f001 fac4 	bl	1d28c <z_spin_unlock_valid>
   1bd04:	b968      	cbnz	r0, 1bd22 <z_impl_k_queue_get+0x8a>
   1bd06:	235d      	movs	r3, #93	; 0x5d
   1bd08:	4a4d      	ldr	r2, [pc, #308]	; (1be40 <z_impl_k_queue_get+0x1a8>)
   1bd0a:	4951      	ldr	r1, [pc, #324]	; (1be50 <z_impl_k_queue_get+0x1b8>)
   1bd0c:	484e      	ldr	r0, [pc, #312]	; (1be48 <z_impl_k_queue_get+0x1b0>)
   1bd0e:	f004 f864 	bl	1fdda <printk>
   1bd12:	4621      	mov	r1, r4
   1bd14:	484f      	ldr	r0, [pc, #316]	; (1be54 <z_impl_k_queue_get+0x1bc>)
   1bd16:	f004 f860 	bl	1fdda <printk>
   1bd1a:	215d      	movs	r1, #93	; 0x5d
   1bd1c:	4848      	ldr	r0, [pc, #288]	; (1be40 <z_impl_k_queue_get+0x1a8>)
   1bd1e:	f004 f8a2 	bl	1fe66 <assert_post_action>
	__asm__ volatile(
   1bd22:	f388 8811 	msr	BASEPRI, r8
   1bd26:	f3bf 8f6f 	isb	sy
#else
	int ret = z_pend_curr(&queue->lock, key, &queue->wait_q, timeout);

	return (ret != 0) ? NULL : _current->base.swap_data;
#endif /* CONFIG_POLL */
}
   1bd2a:	4628      	mov	r0, r5
   1bd2c:	b009      	add	sp, #36	; 0x24
   1bd2e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1bd32:	4620      	mov	r0, r4
	if (timeout == K_NO_WAIT) {
   1bd34:	2f00      	cmp	r7, #0
   1bd36:	d0e3      	beq.n	1bd00 <z_impl_k_queue_get+0x68>
   1bd38:	f001 faa8 	bl	1d28c <z_spin_unlock_valid>
   1bd3c:	b968      	cbnz	r0, 1bd5a <z_impl_k_queue_get+0xc2>
   1bd3e:	235d      	movs	r3, #93	; 0x5d
   1bd40:	4a3f      	ldr	r2, [pc, #252]	; (1be40 <z_impl_k_queue_get+0x1a8>)
   1bd42:	4943      	ldr	r1, [pc, #268]	; (1be50 <z_impl_k_queue_get+0x1b8>)
   1bd44:	4840      	ldr	r0, [pc, #256]	; (1be48 <z_impl_k_queue_get+0x1b0>)
   1bd46:	f004 f848 	bl	1fdda <printk>
   1bd4a:	4621      	mov	r1, r4
   1bd4c:	4841      	ldr	r0, [pc, #260]	; (1be54 <z_impl_k_queue_get+0x1bc>)
   1bd4e:	f004 f844 	bl	1fdda <printk>
   1bd52:	215d      	movs	r1, #93	; 0x5d
   1bd54:	483a      	ldr	r0, [pc, #232]	; (1be40 <z_impl_k_queue_get+0x1a8>)
   1bd56:	f004 f886 	bl	1fe66 <assert_post_action>
   1bd5a:	f388 8811 	msr	BASEPRI, r8
   1bd5e:	f3bf 8f6f 	isb	sy
	k_poll_event_init(&event, K_POLL_TYPE_FIFO_DATA_AVAILABLE,
   1bd62:	2200      	movs	r2, #0
   1bd64:	4633      	mov	r3, r6
   1bd66:	2104      	movs	r1, #4
   1bd68:	a803      	add	r0, sp, #12
   1bd6a:	f002 f90b 	bl	1df84 <k_poll_event_init>
	if (timeout != K_FOREVER) {
   1bd6e:	1c7a      	adds	r2, r7, #1
   1bd70:	d002      	beq.n	1bd78 <z_impl_k_queue_get+0xe0>
   1bd72:	f005 fd5c 	bl	2182e <z_impl_k_uptime_get>
   1bd76:	4683      	mov	fp, r0
{
   1bd78:	f04f 0900 	mov.w	r9, #0
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1bd7c:	f8df 80c0 	ldr.w	r8, [pc, #192]	; 1be40 <z_impl_k_queue_get+0x1a8>
   1bd80:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 1be48 <z_impl_k_queue_get+0x1b0>
		event.state = K_POLL_STATE_NOT_READY;
   1bd84:	9b06      	ldr	r3, [sp, #24]
   1bd86:	f36f 3310 	bfc	r3, #12, #5
   1bd8a:	9306      	str	r3, [sp, #24]
	if (z_syscall_trap()) {
		return (int) arch_syscall_invoke3(*(uintptr_t *)&events, *(uintptr_t *)&num_events, *(uintptr_t *)&timeout, K_SYSCALL_K_POLL);
	}
#endif
	compiler_barrier();
	return z_impl_k_poll(events, num_events, timeout);
   1bd8c:	2101      	movs	r1, #1
   1bd8e:	eba7 0209 	sub.w	r2, r7, r9
   1bd92:	a803      	add	r0, sp, #12
   1bd94:	f002 f948 	bl	1e028 <z_impl_k_poll>
		if (err && err != -EAGAIN) {
   1bd98:	b118      	cbz	r0, 1bda2 <z_impl_k_queue_get+0x10a>
   1bd9a:	300b      	adds	r0, #11
   1bd9c:	d001      	beq.n	1bda2 <z_impl_k_queue_get+0x10a>
			return NULL;
   1bd9e:	2500      	movs	r5, #0
   1bda0:	e7c3      	b.n	1bd2a <z_impl_k_queue_get+0x92>
	__asm__ volatile(
   1bda2:	f04f 0320 	mov.w	r3, #32
   1bda6:	f3ef 8211 	mrs	r2, BASEPRI
   1bdaa:	f383 8811 	msr	BASEPRI, r3
   1bdae:	f3bf 8f6f 	isb	sy
   1bdb2:	4620      	mov	r0, r4
   1bdb4:	9201      	str	r2, [sp, #4]
   1bdb6:	f001 fa5b 	bl	1d270 <z_spin_lock_valid>
   1bdba:	b968      	cbnz	r0, 1bdd8 <z_impl_k_queue_get+0x140>
   1bdbc:	234a      	movs	r3, #74	; 0x4a
   1bdbe:	4642      	mov	r2, r8
   1bdc0:	4920      	ldr	r1, [pc, #128]	; (1be44 <z_impl_k_queue_get+0x1ac>)
   1bdc2:	4650      	mov	r0, sl
   1bdc4:	f004 f809 	bl	1fdda <printk>
   1bdc8:	4621      	mov	r1, r4
   1bdca:	4820      	ldr	r0, [pc, #128]	; (1be4c <z_impl_k_queue_get+0x1b4>)
   1bdcc:	f004 f805 	bl	1fdda <printk>
   1bdd0:	214a      	movs	r1, #74	; 0x4a
   1bdd2:	4640      	mov	r0, r8
   1bdd4:	f004 f847 	bl	1fe66 <assert_post_action>
	z_spin_lock_set_owner(l);
   1bdd8:	4620      	mov	r0, r4
   1bdda:	f001 fa67 	bl	1d2ac <z_spin_lock_set_owner>
Z_GENLIST_IS_EMPTY(sflist)
   1bdde:	6830      	ldr	r0, [r6, #0]
 *
 * @return A pointer to the first node of the list (or NULL if empty)
 */
static inline sys_sfnode_t *sys_sflist_get(sys_sflist_t *list);

Z_GENLIST_GET(sflist, sfnode)
   1bde0:	b138      	cbz	r0, 1bdf2 <z_impl_k_queue_get+0x15a>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   1bde2:	6803      	ldr	r3, [r0, #0]
Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode)
   1bde4:	6872      	ldr	r2, [r6, #4]
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   1bde6:	f023 0303 	bic.w	r3, r3, #3
Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode)
   1bdea:	4290      	cmp	r0, r2
	list->head = node;
   1bdec:	6033      	str	r3, [r6, #0]
	list->tail = node;
   1bdee:	bf08      	it	eq
   1bdf0:	6073      	streq	r3, [r6, #4]
		val = z_queue_node_peek(sys_sflist_get(&queue->data_q), true);
   1bdf2:	2101      	movs	r1, #1
   1bdf4:	f005 fc8f 	bl	21716 <z_queue_node_peek>
   1bdf8:	4605      	mov	r5, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1bdfa:	4620      	mov	r0, r4
   1bdfc:	f001 fa46 	bl	1d28c <z_spin_unlock_valid>
   1be00:	b968      	cbnz	r0, 1be1e <z_impl_k_queue_get+0x186>
   1be02:	235d      	movs	r3, #93	; 0x5d
   1be04:	4642      	mov	r2, r8
   1be06:	4912      	ldr	r1, [pc, #72]	; (1be50 <z_impl_k_queue_get+0x1b8>)
   1be08:	4650      	mov	r0, sl
   1be0a:	f003 ffe6 	bl	1fdda <printk>
   1be0e:	4621      	mov	r1, r4
   1be10:	4810      	ldr	r0, [pc, #64]	; (1be54 <z_impl_k_queue_get+0x1bc>)
   1be12:	f003 ffe2 	bl	1fdda <printk>
   1be16:	215d      	movs	r1, #93	; 0x5d
   1be18:	4640      	mov	r0, r8
   1be1a:	f004 f824 	bl	1fe66 <assert_post_action>
	__asm__ volatile(
   1be1e:	9b01      	ldr	r3, [sp, #4]
   1be20:	f383 8811 	msr	BASEPRI, r3
   1be24:	f3bf 8f6f 	isb	sy
		if ((val == NULL) && (timeout != K_FOREVER)) {
   1be28:	2d00      	cmp	r5, #0
   1be2a:	f47f af7e 	bne.w	1bd2a <z_impl_k_queue_get+0x92>
   1be2e:	1c7b      	adds	r3, r7, #1
   1be30:	d0a8      	beq.n	1bd84 <z_impl_k_queue_get+0xec>
	return z_impl_k_uptime_get();
   1be32:	f005 fcfc 	bl	2182e <z_impl_k_uptime_get>
			elapsed = k_uptime_get_32() - start;
   1be36:	eba0 090b 	sub.w	r9, r0, fp
	} while (!val && !done);
   1be3a:	454f      	cmp	r7, r9
   1be3c:	daa2      	bge.n	1bd84 <z_impl_k_queue_get+0xec>
   1be3e:	e7ae      	b.n	1bd9e <z_impl_k_queue_get+0x106>
   1be40:	00023852 	.word	0x00023852
   1be44:	00023878 	.word	0x00023878
   1be48:	00023451 	.word	0x00023451
   1be4c:	0002388d 	.word	0x0002388d
   1be50:	000238a5 	.word	0x000238a5
   1be54:	000238bc 	.word	0x000238bc

0001be58 <pended_on.isra.17>:
	}
}

static _wait_q_t *pended_on(struct k_thread *thread)
{
	__ASSERT_NO_MSG(thread->base.pended_on);
   1be58:	6803      	ldr	r3, [r0, #0]
static _wait_q_t *pended_on(struct k_thread *thread)
   1be5a:	b510      	push	{r4, lr}
   1be5c:	4604      	mov	r4, r0
	__ASSERT_NO_MSG(thread->base.pended_on);
   1be5e:	b95b      	cbnz	r3, 1be78 <pended_on.isra.17+0x20>
   1be60:	4906      	ldr	r1, [pc, #24]	; (1be7c <pended_on.isra.17+0x24>)
   1be62:	4807      	ldr	r0, [pc, #28]	; (1be80 <pended_on.isra.17+0x28>)
   1be64:	f240 139d 	movw	r3, #413	; 0x19d
   1be68:	4a06      	ldr	r2, [pc, #24]	; (1be84 <pended_on.isra.17+0x2c>)
   1be6a:	f003 ffb6 	bl	1fdda <printk>
   1be6e:	f240 119d 	movw	r1, #413	; 0x19d
   1be72:	4804      	ldr	r0, [pc, #16]	; (1be84 <pended_on.isra.17+0x2c>)
   1be74:	f003 fff7 	bl	1fe66 <assert_post_action>

	return thread->base.pended_on;
}
   1be78:	6820      	ldr	r0, [r4, #0]
   1be7a:	bd10      	pop	{r4, pc}
   1be7c:	00025229 	.word	0x00025229
   1be80:	00023451 	.word	0x00023451
   1be84:	00025207 	.word	0x00025207

0001be88 <z_reset_time_slice>:
{
   1be88:	b510      	push	{r4, lr}
	if (slice_time != 0) {
   1be8a:	4c08      	ldr	r4, [pc, #32]	; (1beac <z_reset_time_slice+0x24>)
   1be8c:	6823      	ldr	r3, [r4, #0]
   1be8e:	b15b      	cbz	r3, 1bea8 <z_reset_time_slice+0x20>
		_current_cpu->slice_ticks = slice_time + z_clock_elapsed();
   1be90:	f7f2 ff42 	bl	ed18 <z_clock_elapsed>
   1be94:	6823      	ldr	r3, [r4, #0]
   1be96:	4a06      	ldr	r2, [pc, #24]	; (1beb0 <z_reset_time_slice+0x28>)
   1be98:	4418      	add	r0, r3
   1be9a:	6110      	str	r0, [r2, #16]
		z_set_timeout_expiry(slice_time, false);
   1be9c:	2100      	movs	r1, #0
}
   1be9e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		z_set_timeout_expiry(slice_time, false);
   1bea2:	4618      	mov	r0, r3
   1bea4:	f001 bd2e 	b.w	1d904 <z_set_timeout_expiry>
}
   1bea8:	bd10      	pop	{r4, pc}
   1beaa:	bf00      	nop
   1beac:	200213d8 	.word	0x200213d8
   1beb0:	20021398 	.word	0x20021398

0001beb4 <k_sched_time_slice_set>:
{
   1beb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1beb6:	4607      	mov	r7, r0
   1beb8:	460d      	mov	r5, r1
	__asm__ volatile(
   1beba:	f04f 0320 	mov.w	r3, #32
   1bebe:	f3ef 8411 	mrs	r4, BASEPRI
   1bec2:	f383 8811 	msr	BASEPRI, r3
   1bec6:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1beca:	4820      	ldr	r0, [pc, #128]	; (1bf4c <k_sched_time_slice_set+0x98>)
   1becc:	f001 f9d0 	bl	1d270 <z_spin_lock_valid>
   1bed0:	b968      	cbnz	r0, 1beee <k_sched_time_slice_set+0x3a>
   1bed2:	234a      	movs	r3, #74	; 0x4a
   1bed4:	4a1e      	ldr	r2, [pc, #120]	; (1bf50 <k_sched_time_slice_set+0x9c>)
   1bed6:	491f      	ldr	r1, [pc, #124]	; (1bf54 <k_sched_time_slice_set+0xa0>)
   1bed8:	481f      	ldr	r0, [pc, #124]	; (1bf58 <k_sched_time_slice_set+0xa4>)
   1beda:	f003 ff7e 	bl	1fdda <printk>
   1bede:	491b      	ldr	r1, [pc, #108]	; (1bf4c <k_sched_time_slice_set+0x98>)
   1bee0:	481e      	ldr	r0, [pc, #120]	; (1bf5c <k_sched_time_slice_set+0xa8>)
   1bee2:	f003 ff7a 	bl	1fdda <printk>
   1bee6:	214a      	movs	r1, #74	; 0x4a
   1bee8:	4819      	ldr	r0, [pc, #100]	; (1bf50 <k_sched_time_slice_set+0x9c>)
   1beea:	f003 ffbc 	bl	1fe66 <assert_post_action>
	z_spin_lock_set_owner(l);
   1beee:	4817      	ldr	r0, [pc, #92]	; (1bf4c <k_sched_time_slice_set+0x98>)
   1bef0:	f001 f9dc 	bl	1d2ac <z_spin_lock_set_owner>
		} else {
			return t * (to_hz / from_hz);
		}
	} else {
		if (result32) {
			return (u32_t)((t * to_hz + off) / from_hz);
   1bef4:	f44f 4600 	mov.w	r6, #32768	; 0x8000
		_current_cpu->slice_ticks = 0;
   1bef8:	2200      	movs	r2, #0
   1befa:	f240 30e7 	movw	r0, #999	; 0x3e7
   1befe:	2100      	movs	r1, #0
   1bf00:	4b17      	ldr	r3, [pc, #92]	; (1bf60 <k_sched_time_slice_set+0xac>)
   1bf02:	fbe6 0107 	umlal	r0, r1, r6, r7
   1bf06:	611a      	str	r2, [r3, #16]
   1bf08:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   1bf0c:	2300      	movs	r3, #0
   1bf0e:	f7f0 fb53 	bl	c5b8 <__aeabi_uldivmod>
		slice_time = k_ms_to_ticks_ceil32(slice);
   1bf12:	4b14      	ldr	r3, [pc, #80]	; (1bf64 <k_sched_time_slice_set+0xb0>)
   1bf14:	6018      	str	r0, [r3, #0]
		slice_max_prio = prio;
   1bf16:	4b14      	ldr	r3, [pc, #80]	; (1bf68 <k_sched_time_slice_set+0xb4>)
   1bf18:	601d      	str	r5, [r3, #0]
		z_reset_time_slice();
   1bf1a:	f7ff ffb5 	bl	1be88 <z_reset_time_slice>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1bf1e:	480b      	ldr	r0, [pc, #44]	; (1bf4c <k_sched_time_slice_set+0x98>)
   1bf20:	f001 f9b4 	bl	1d28c <z_spin_unlock_valid>
   1bf24:	b968      	cbnz	r0, 1bf42 <k_sched_time_slice_set+0x8e>
   1bf26:	235d      	movs	r3, #93	; 0x5d
   1bf28:	4a09      	ldr	r2, [pc, #36]	; (1bf50 <k_sched_time_slice_set+0x9c>)
   1bf2a:	4910      	ldr	r1, [pc, #64]	; (1bf6c <k_sched_time_slice_set+0xb8>)
   1bf2c:	480a      	ldr	r0, [pc, #40]	; (1bf58 <k_sched_time_slice_set+0xa4>)
   1bf2e:	f003 ff54 	bl	1fdda <printk>
   1bf32:	4906      	ldr	r1, [pc, #24]	; (1bf4c <k_sched_time_slice_set+0x98>)
   1bf34:	480e      	ldr	r0, [pc, #56]	; (1bf70 <k_sched_time_slice_set+0xbc>)
   1bf36:	f003 ff50 	bl	1fdda <printk>
   1bf3a:	215d      	movs	r1, #93	; 0x5d
   1bf3c:	4804      	ldr	r0, [pc, #16]	; (1bf50 <k_sched_time_slice_set+0x9c>)
   1bf3e:	f003 ff92 	bl	1fe66 <assert_post_action>
	__asm__ volatile(
   1bf42:	f384 8811 	msr	BASEPRI, r4
   1bf46:	f3bf 8f6f 	isb	sy
}
   1bf4a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1bf4c:	200213d0 	.word	0x200213d0
   1bf50:	00023852 	.word	0x00023852
   1bf54:	00023878 	.word	0x00023878
   1bf58:	00023451 	.word	0x00023451
   1bf5c:	0002388d 	.word	0x0002388d
   1bf60:	20021398 	.word	0x20021398
   1bf64:	200213d8 	.word	0x200213d8
   1bf68:	200213d4 	.word	0x200213d4
   1bf6c:	000238a5 	.word	0x000238a5
   1bf70:	000238bc 	.word	0x000238bc

0001bf74 <z_reschedule>:

	return arch_irq_unlocked(key) && !arch_is_in_isr();
}

void z_reschedule(struct k_spinlock *lock, k_spinlock_key_t key)
{
   1bf74:	b538      	push	{r3, r4, r5, lr}
   1bf76:	4604      	mov	r4, r0
	return arch_irq_unlocked(key) && !arch_is_in_isr();
   1bf78:	460d      	mov	r5, r1
   1bf7a:	b9c1      	cbnz	r1, 1bfae <z_reschedule+0x3a>
   1bf7c:	f3ef 8305 	mrs	r3, IPSR
   1bf80:	b9ab      	cbnz	r3, 1bfae <z_reschedule+0x3a>
 */
static ALWAYS_INLINE void k_spin_release(struct k_spinlock *l)
{
	ARG_UNUSED(l);
#ifdef CONFIG_SPIN_VALIDATE
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1bf82:	f001 f983 	bl	1d28c <z_spin_unlock_valid>
   1bf86:	b968      	cbnz	r0, 1bfa4 <z_reschedule+0x30>
   1bf88:	2374      	movs	r3, #116	; 0x74
   1bf8a:	4a14      	ldr	r2, [pc, #80]	; (1bfdc <z_reschedule+0x68>)
   1bf8c:	4914      	ldr	r1, [pc, #80]	; (1bfe0 <z_reschedule+0x6c>)
   1bf8e:	4815      	ldr	r0, [pc, #84]	; (1bfe4 <z_reschedule+0x70>)
   1bf90:	f003 ff23 	bl	1fdda <printk>
   1bf94:	4621      	mov	r1, r4
   1bf96:	4814      	ldr	r0, [pc, #80]	; (1bfe8 <z_reschedule+0x74>)
   1bf98:	f003 ff1f 	bl	1fdda <printk>
   1bf9c:	2174      	movs	r1, #116	; 0x74
   1bf9e:	480f      	ldr	r0, [pc, #60]	; (1bfdc <z_reschedule+0x68>)
   1bfa0:	f003 ff61 	bl	1fe66 <assert_post_action>
	if (resched(key.key)) {
		z_swap(lock, key);
	} else {
		k_spin_unlock(lock, key);
	}
}
   1bfa4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   1bfa8:	2000      	movs	r0, #0
   1bfaa:	f7f3 b807 	b.w	efbc <arch_swap>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1bfae:	4620      	mov	r0, r4
   1bfb0:	f001 f96c 	bl	1d28c <z_spin_unlock_valid>
   1bfb4:	b968      	cbnz	r0, 1bfd2 <z_reschedule+0x5e>
   1bfb6:	235d      	movs	r3, #93	; 0x5d
   1bfb8:	4a08      	ldr	r2, [pc, #32]	; (1bfdc <z_reschedule+0x68>)
   1bfba:	4909      	ldr	r1, [pc, #36]	; (1bfe0 <z_reschedule+0x6c>)
   1bfbc:	4809      	ldr	r0, [pc, #36]	; (1bfe4 <z_reschedule+0x70>)
   1bfbe:	f003 ff0c 	bl	1fdda <printk>
   1bfc2:	4621      	mov	r1, r4
   1bfc4:	4808      	ldr	r0, [pc, #32]	; (1bfe8 <z_reschedule+0x74>)
   1bfc6:	f003 ff08 	bl	1fdda <printk>
   1bfca:	215d      	movs	r1, #93	; 0x5d
   1bfcc:	4803      	ldr	r0, [pc, #12]	; (1bfdc <z_reschedule+0x68>)
   1bfce:	f003 ff4a 	bl	1fe66 <assert_post_action>
   1bfd2:	f385 8811 	msr	BASEPRI, r5
   1bfd6:	f3bf 8f6f 	isb	sy
   1bfda:	bd38      	pop	{r3, r4, r5, pc}
   1bfdc:	00023852 	.word	0x00023852
   1bfe0:	000238a5 	.word	0x000238a5
   1bfe4:	00023451 	.word	0x00023451
   1bfe8:	000238bc 	.word	0x000238bc

0001bfec <k_sched_lock>:
		irq_unlock(key);
	}
}

void k_sched_lock(void)
{
   1bfec:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
   1bfee:	f04f 0320 	mov.w	r3, #32
   1bff2:	f3ef 8511 	mrs	r5, BASEPRI
   1bff6:	f383 8811 	msr	BASEPRI, r3
   1bffa:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1bffe:	482b      	ldr	r0, [pc, #172]	; (1c0ac <k_sched_lock+0xc0>)
   1c000:	f001 f936 	bl	1d270 <z_spin_lock_valid>
   1c004:	b968      	cbnz	r0, 1c022 <k_sched_lock+0x36>
   1c006:	234a      	movs	r3, #74	; 0x4a
   1c008:	4a29      	ldr	r2, [pc, #164]	; (1c0b0 <k_sched_lock+0xc4>)
   1c00a:	492a      	ldr	r1, [pc, #168]	; (1c0b4 <k_sched_lock+0xc8>)
   1c00c:	482a      	ldr	r0, [pc, #168]	; (1c0b8 <k_sched_lock+0xcc>)
   1c00e:	f003 fee4 	bl	1fdda <printk>
   1c012:	4926      	ldr	r1, [pc, #152]	; (1c0ac <k_sched_lock+0xc0>)
   1c014:	4829      	ldr	r0, [pc, #164]	; (1c0bc <k_sched_lock+0xd0>)
   1c016:	f003 fee0 	bl	1fdda <printk>
   1c01a:	214a      	movs	r1, #74	; 0x4a
   1c01c:	4824      	ldr	r0, [pc, #144]	; (1c0b0 <k_sched_lock+0xc4>)
   1c01e:	f003 ff22 	bl	1fe66 <assert_post_action>
	z_spin_lock_set_owner(l);
   1c022:	4822      	ldr	r0, [pc, #136]	; (1c0ac <k_sched_lock+0xc0>)
   1c024:	f001 f942 	bl	1d2ac <z_spin_lock_set_owner>
   1c028:	f3ef 8305 	mrs	r3, IPSR
	__ASSERT(!arch_is_in_isr(), "");
   1c02c:	b173      	cbz	r3, 1c04c <k_sched_lock+0x60>
   1c02e:	4924      	ldr	r1, [pc, #144]	; (1c0c0 <k_sched_lock+0xd4>)
   1c030:	f240 130d 	movw	r3, #269	; 0x10d
   1c034:	4a23      	ldr	r2, [pc, #140]	; (1c0c4 <k_sched_lock+0xd8>)
   1c036:	4820      	ldr	r0, [pc, #128]	; (1c0b8 <k_sched_lock+0xcc>)
   1c038:	f003 fecf 	bl	1fdda <printk>
   1c03c:	4822      	ldr	r0, [pc, #136]	; (1c0c8 <k_sched_lock+0xdc>)
   1c03e:	f003 fecc 	bl	1fdda <printk>
   1c042:	f240 110d 	movw	r1, #269	; 0x10d
   1c046:	481f      	ldr	r0, [pc, #124]	; (1c0c4 <k_sched_lock+0xd8>)
   1c048:	f003 ff0d 	bl	1fe66 <assert_post_action>
	__ASSERT(_current->base.sched_locked != 1, "");
   1c04c:	4c1f      	ldr	r4, [pc, #124]	; (1c0cc <k_sched_lock+0xe0>)
   1c04e:	68a2      	ldr	r2, [r4, #8]
   1c050:	7bd2      	ldrb	r2, [r2, #15]
   1c052:	2a01      	cmp	r2, #1
   1c054:	d10e      	bne.n	1c074 <k_sched_lock+0x88>
   1c056:	491e      	ldr	r1, [pc, #120]	; (1c0d0 <k_sched_lock+0xe4>)
   1c058:	f44f 7387 	mov.w	r3, #270	; 0x10e
   1c05c:	4a19      	ldr	r2, [pc, #100]	; (1c0c4 <k_sched_lock+0xd8>)
   1c05e:	4816      	ldr	r0, [pc, #88]	; (1c0b8 <k_sched_lock+0xcc>)
   1c060:	f003 febb 	bl	1fdda <printk>
   1c064:	4818      	ldr	r0, [pc, #96]	; (1c0c8 <k_sched_lock+0xdc>)
   1c066:	f003 feb8 	bl	1fdda <printk>
   1c06a:	f44f 7187 	mov.w	r1, #270	; 0x10e
   1c06e:	4815      	ldr	r0, [pc, #84]	; (1c0c4 <k_sched_lock+0xd8>)
   1c070:	f003 fef9 	bl	1fe66 <assert_post_action>
	--_current->base.sched_locked;
   1c074:	68a2      	ldr	r2, [r4, #8]
   1c076:	7bd3      	ldrb	r3, [r2, #15]
   1c078:	3b01      	subs	r3, #1
   1c07a:	73d3      	strb	r3, [r2, #15]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1c07c:	480b      	ldr	r0, [pc, #44]	; (1c0ac <k_sched_lock+0xc0>)
   1c07e:	f001 f905 	bl	1d28c <z_spin_unlock_valid>
   1c082:	b968      	cbnz	r0, 1c0a0 <k_sched_lock+0xb4>
   1c084:	235d      	movs	r3, #93	; 0x5d
   1c086:	4a0a      	ldr	r2, [pc, #40]	; (1c0b0 <k_sched_lock+0xc4>)
   1c088:	4912      	ldr	r1, [pc, #72]	; (1c0d4 <k_sched_lock+0xe8>)
   1c08a:	480b      	ldr	r0, [pc, #44]	; (1c0b8 <k_sched_lock+0xcc>)
   1c08c:	f003 fea5 	bl	1fdda <printk>
   1c090:	4906      	ldr	r1, [pc, #24]	; (1c0ac <k_sched_lock+0xc0>)
   1c092:	4811      	ldr	r0, [pc, #68]	; (1c0d8 <k_sched_lock+0xec>)
   1c094:	f003 fea1 	bl	1fdda <printk>
   1c098:	215d      	movs	r1, #93	; 0x5d
   1c09a:	4805      	ldr	r0, [pc, #20]	; (1c0b0 <k_sched_lock+0xc4>)
   1c09c:	f003 fee3 	bl	1fe66 <assert_post_action>
	__asm__ volatile(
   1c0a0:	f385 8811 	msr	BASEPRI, r5
   1c0a4:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
		z_sched_lock();
	}
}
   1c0a8:	bd38      	pop	{r3, r4, r5, pc}
   1c0aa:	bf00      	nop
   1c0ac:	200213d0 	.word	0x200213d0
   1c0b0:	00023852 	.word	0x00023852
   1c0b4:	00023878 	.word	0x00023878
   1c0b8:	00023451 	.word	0x00023451
   1c0bc:	0002388d 	.word	0x0002388d
   1c0c0:	0002516f 	.word	0x0002516f
   1c0c4:	00025144 	.word	0x00025144
   1c0c8:	000241f4 	.word	0x000241f4
   1c0cc:	20021398 	.word	0x20021398
   1c0d0:	00025181 	.word	0x00025181
   1c0d4:	000238a5 	.word	0x000238a5
   1c0d8:	000238bc 	.word	0x000238bc

0001c0dc <z_priq_dumb_remove>:
}

void z_priq_dumb_remove(sys_dlist_t *pq, struct k_thread *thread)
{
#if defined(CONFIG_SWAP_NONATOMIC) && defined(CONFIG_SCHED_DUMB)
	if (pq == &_kernel.ready_q.runq && thread == _current &&
   1c0dc:	4b11      	ldr	r3, [pc, #68]	; (1c124 <z_priq_dumb_remove+0x48>)
{
   1c0de:	b510      	push	{r4, lr}
	if (pq == &_kernel.ready_q.runq && thread == _current &&
   1c0e0:	f103 0228 	add.w	r2, r3, #40	; 0x28
   1c0e4:	4282      	cmp	r2, r0
{
   1c0e6:	460c      	mov	r4, r1
	if (pq == &_kernel.ready_q.runq && thread == _current &&
   1c0e8:	d105      	bne.n	1c0f6 <z_priq_dumb_remove+0x1a>
   1c0ea:	689b      	ldr	r3, [r3, #8]
   1c0ec:	428b      	cmp	r3, r1
   1c0ee:	d102      	bne.n	1c0f6 <z_priq_dumb_remove+0x1a>
   1c0f0:	7b4b      	ldrb	r3, [r1, #13]
   1c0f2:	06db      	lsls	r3, r3, #27
   1c0f4:	d115      	bne.n	1c122 <z_priq_dumb_remove+0x46>
	    z_is_thread_prevented_from_running(thread)) {
		return;
	}
#endif

	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   1c0f6:	4b0c      	ldr	r3, [pc, #48]	; (1c128 <z_priq_dumb_remove+0x4c>)
   1c0f8:	429c      	cmp	r4, r3
   1c0fa:	d10b      	bne.n	1c114 <z_priq_dumb_remove+0x38>
   1c0fc:	490b      	ldr	r1, [pc, #44]	; (1c12c <z_priq_dumb_remove+0x50>)
   1c0fe:	480c      	ldr	r0, [pc, #48]	; (1c130 <z_priq_dumb_remove+0x54>)
   1c100:	f44f 7346 	mov.w	r3, #792	; 0x318
   1c104:	4a0b      	ldr	r2, [pc, #44]	; (1c134 <z_priq_dumb_remove+0x58>)
   1c106:	f003 fe68 	bl	1fdda <printk>
   1c10a:	f44f 7146 	mov.w	r1, #792	; 0x318
   1c10e:	4809      	ldr	r0, [pc, #36]	; (1c134 <z_priq_dumb_remove+0x58>)
   1c110:	f003 fea9 	bl	1fe66 <assert_post_action>
	node->prev->next = node->next;
   1c114:	e9d4 3200 	ldrd	r3, r2, [r4]
   1c118:	6013      	str	r3, [r2, #0]
	node->next->prev = node->prev;
   1c11a:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   1c11c:	2300      	movs	r3, #0
	node->prev = NULL;
   1c11e:	e9c4 3300 	strd	r3, r3, [r4]

	sys_dlist_remove(&thread->base.qnode_dlist);
}
   1c122:	bd10      	pop	{r4, pc}
   1c124:	20021398 	.word	0x20021398
   1c128:	20020a08 	.word	0x20020a08
   1c12c:	0002525f 	.word	0x0002525f
   1c130:	00023451 	.word	0x00023451
   1c134:	00025207 	.word	0x00025207

0001c138 <z_unpend_thread>:
{
   1c138:	b538      	push	{r3, r4, r5, lr}
   1c13a:	4604      	mov	r4, r0
	__asm__ volatile(
   1c13c:	f04f 0320 	mov.w	r3, #32
   1c140:	f3ef 8511 	mrs	r5, BASEPRI
   1c144:	f383 8811 	msr	BASEPRI, r3
   1c148:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1c14c:	481e      	ldr	r0, [pc, #120]	; (1c1c8 <z_unpend_thread+0x90>)
   1c14e:	f001 f88f 	bl	1d270 <z_spin_lock_valid>
   1c152:	b968      	cbnz	r0, 1c170 <z_unpend_thread+0x38>
   1c154:	234a      	movs	r3, #74	; 0x4a
   1c156:	4a1d      	ldr	r2, [pc, #116]	; (1c1cc <z_unpend_thread+0x94>)
   1c158:	491d      	ldr	r1, [pc, #116]	; (1c1d0 <z_unpend_thread+0x98>)
   1c15a:	481e      	ldr	r0, [pc, #120]	; (1c1d4 <z_unpend_thread+0x9c>)
   1c15c:	f003 fe3d 	bl	1fdda <printk>
   1c160:	4919      	ldr	r1, [pc, #100]	; (1c1c8 <z_unpend_thread+0x90>)
   1c162:	481d      	ldr	r0, [pc, #116]	; (1c1d8 <z_unpend_thread+0xa0>)
   1c164:	f003 fe39 	bl	1fdda <printk>
   1c168:	214a      	movs	r1, #74	; 0x4a
   1c16a:	4818      	ldr	r0, [pc, #96]	; (1c1cc <z_unpend_thread+0x94>)
   1c16c:	f003 fe7b 	bl	1fe66 <assert_post_action>
	z_spin_lock_set_owner(l);
   1c170:	4815      	ldr	r0, [pc, #84]	; (1c1c8 <z_unpend_thread+0x90>)
   1c172:	f001 f89b 	bl	1d2ac <z_spin_lock_set_owner>
		_priq_wait_remove(&pended_on(thread)->waitq, thread);
   1c176:	f104 0008 	add.w	r0, r4, #8
   1c17a:	f7ff fe6d 	bl	1be58 <pended_on.isra.17>
   1c17e:	4621      	mov	r1, r4
   1c180:	f7ff ffac 	bl	1c0dc <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
   1c184:	7b63      	ldrb	r3, [r4, #13]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1c186:	4810      	ldr	r0, [pc, #64]	; (1c1c8 <z_unpend_thread+0x90>)
   1c188:	f023 0302 	bic.w	r3, r3, #2
   1c18c:	7363      	strb	r3, [r4, #13]
   1c18e:	f001 f87d 	bl	1d28c <z_spin_unlock_valid>
   1c192:	b968      	cbnz	r0, 1c1b0 <z_unpend_thread+0x78>
   1c194:	235d      	movs	r3, #93	; 0x5d
   1c196:	4a0d      	ldr	r2, [pc, #52]	; (1c1cc <z_unpend_thread+0x94>)
   1c198:	4910      	ldr	r1, [pc, #64]	; (1c1dc <z_unpend_thread+0xa4>)
   1c19a:	480e      	ldr	r0, [pc, #56]	; (1c1d4 <z_unpend_thread+0x9c>)
   1c19c:	f003 fe1d 	bl	1fdda <printk>
   1c1a0:	4909      	ldr	r1, [pc, #36]	; (1c1c8 <z_unpend_thread+0x90>)
   1c1a2:	480f      	ldr	r0, [pc, #60]	; (1c1e0 <z_unpend_thread+0xa8>)
   1c1a4:	f003 fe19 	bl	1fdda <printk>
   1c1a8:	215d      	movs	r1, #93	; 0x5d
   1c1aa:	4808      	ldr	r0, [pc, #32]	; (1c1cc <z_unpend_thread+0x94>)
   1c1ac:	f003 fe5b 	bl	1fe66 <assert_post_action>
	__asm__ volatile(
   1c1b0:	f385 8811 	msr	BASEPRI, r5
   1c1b4:	f3bf 8f6f 	isb	sy
	thread->base.pended_on = NULL;
   1c1b8:	2300      	movs	r3, #0
	z_add_timeout(&th->base.timeout, z_thread_timeout, ticks);
}

static inline int z_abort_thread_timeout(struct k_thread *thread)
{
	return z_abort_timeout(&thread->base.timeout);
   1c1ba:	f104 0018 	add.w	r0, r4, #24
   1c1be:	60a3      	str	r3, [r4, #8]
}
   1c1c0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   1c1c4:	f001 bb08 	b.w	1d7d8 <z_abort_timeout>
   1c1c8:	200213d0 	.word	0x200213d0
   1c1cc:	00023852 	.word	0x00023852
   1c1d0:	00023878 	.word	0x00023878
   1c1d4:	00023451 	.word	0x00023451
   1c1d8:	0002388d 	.word	0x0002388d
   1c1dc:	000238a5 	.word	0x000238a5
   1c1e0:	000238bc 	.word	0x000238bc

0001c1e4 <update_cache>:
{
   1c1e4:	b538      	push	{r3, r4, r5, lr}
	struct k_thread *thread = _priq_run_best(&_kernel.ready_q.runq);
   1c1e6:	4c15      	ldr	r4, [pc, #84]	; (1c23c <update_cache+0x58>)
{
   1c1e8:	4602      	mov	r2, r0
	struct k_thread *thread = _priq_run_best(&_kernel.ready_q.runq);
   1c1ea:	f104 0028 	add.w	r0, r4, #40	; 0x28
   1c1ee:	f005 fad4 	bl	2179a <z_priq_dumb_best>
	return thread ? thread : _current_cpu->idle_thread;
   1c1f2:	4605      	mov	r5, r0
   1c1f4:	b900      	cbnz	r0, 1c1f8 <update_cache+0x14>
   1c1f6:	68e5      	ldr	r5, [r4, #12]
	if (preempt_ok != 0) {
   1c1f8:	b9ca      	cbnz	r2, 1c22e <update_cache+0x4a>
	__ASSERT(_current != NULL, "");
   1c1fa:	68a3      	ldr	r3, [r4, #8]
   1c1fc:	b963      	cbnz	r3, 1c218 <update_cache+0x34>
   1c1fe:	4910      	ldr	r1, [pc, #64]	; (1c240 <update_cache+0x5c>)
   1c200:	237e      	movs	r3, #126	; 0x7e
   1c202:	4a10      	ldr	r2, [pc, #64]	; (1c244 <update_cache+0x60>)
   1c204:	4810      	ldr	r0, [pc, #64]	; (1c248 <update_cache+0x64>)
   1c206:	f003 fde8 	bl	1fdda <printk>
   1c20a:	4810      	ldr	r0, [pc, #64]	; (1c24c <update_cache+0x68>)
   1c20c:	f003 fde5 	bl	1fdda <printk>
   1c210:	217e      	movs	r1, #126	; 0x7e
   1c212:	480c      	ldr	r0, [pc, #48]	; (1c244 <update_cache+0x60>)
   1c214:	f003 fe27 	bl	1fe66 <assert_post_action>
	if (z_is_thread_prevented_from_running(_current)) {
   1c218:	68a3      	ldr	r3, [r4, #8]
   1c21a:	7b5a      	ldrb	r2, [r3, #13]
   1c21c:	06d2      	lsls	r2, r2, #27
   1c21e:	d106      	bne.n	1c22e <update_cache+0x4a>
	if (IS_ENABLED(CONFIG_SWAP_NONATOMIC)
   1c220:	69aa      	ldr	r2, [r5, #24]
   1c222:	b922      	cbnz	r2, 1c22e <update_cache+0x4a>
	if (is_preempt(_current) || is_metairq(thread)) {
   1c224:	89da      	ldrh	r2, [r3, #14]
   1c226:	2a7f      	cmp	r2, #127	; 0x7f
   1c228:	d901      	bls.n	1c22e <update_cache+0x4a>
		_kernel.ready_q.cache = _current;
   1c22a:	6263      	str	r3, [r4, #36]	; 0x24
}
   1c22c:	bd38      	pop	{r3, r4, r5, pc}
		if (thread != _current) {
   1c22e:	68a3      	ldr	r3, [r4, #8]
   1c230:	42ab      	cmp	r3, r5
   1c232:	d001      	beq.n	1c238 <update_cache+0x54>
			z_reset_time_slice();
   1c234:	f7ff fe28 	bl	1be88 <z_reset_time_slice>
		_kernel.ready_q.cache = thread;
   1c238:	6265      	str	r5, [r4, #36]	; 0x24
}
   1c23a:	e7f7      	b.n	1c22c <update_cache+0x48>
   1c23c:	20021398 	.word	0x20021398
   1c240:	00025240 	.word	0x00025240
   1c244:	00025207 	.word	0x00025207
   1c248:	00023451 	.word	0x00023451
   1c24c:	000241f4 	.word	0x000241f4

0001c250 <k_sched_unlock>:
{
   1c250:	b538      	push	{r3, r4, r5, lr}
	__ASSERT(_current->base.sched_locked != 0, "");
   1c252:	4c31      	ldr	r4, [pc, #196]	; (1c318 <k_sched_unlock+0xc8>)
   1c254:	68a2      	ldr	r2, [r4, #8]
   1c256:	7bd2      	ldrb	r2, [r2, #15]
   1c258:	b972      	cbnz	r2, 1c278 <k_sched_unlock+0x28>
   1c25a:	4930      	ldr	r1, [pc, #192]	; (1c31c <k_sched_unlock+0xcc>)
   1c25c:	f240 23ad 	movw	r3, #685	; 0x2ad
   1c260:	4a2f      	ldr	r2, [pc, #188]	; (1c320 <k_sched_unlock+0xd0>)
   1c262:	4830      	ldr	r0, [pc, #192]	; (1c324 <k_sched_unlock+0xd4>)
   1c264:	f003 fdb9 	bl	1fdda <printk>
   1c268:	482f      	ldr	r0, [pc, #188]	; (1c328 <k_sched_unlock+0xd8>)
   1c26a:	f003 fdb6 	bl	1fdda <printk>
   1c26e:	f240 21ad 	movw	r1, #685	; 0x2ad
   1c272:	482b      	ldr	r0, [pc, #172]	; (1c320 <k_sched_unlock+0xd0>)
   1c274:	f003 fdf7 	bl	1fe66 <assert_post_action>
   1c278:	f3ef 8305 	mrs	r3, IPSR
	__ASSERT(!arch_is_in_isr(), "");
   1c27c:	b173      	cbz	r3, 1c29c <k_sched_unlock+0x4c>
   1c27e:	492b      	ldr	r1, [pc, #172]	; (1c32c <k_sched_unlock+0xdc>)
   1c280:	f240 23ae 	movw	r3, #686	; 0x2ae
   1c284:	4a26      	ldr	r2, [pc, #152]	; (1c320 <k_sched_unlock+0xd0>)
   1c286:	4827      	ldr	r0, [pc, #156]	; (1c324 <k_sched_unlock+0xd4>)
   1c288:	f003 fda7 	bl	1fdda <printk>
   1c28c:	4826      	ldr	r0, [pc, #152]	; (1c328 <k_sched_unlock+0xd8>)
   1c28e:	f003 fda4 	bl	1fdda <printk>
   1c292:	f240 21ae 	movw	r1, #686	; 0x2ae
   1c296:	4822      	ldr	r0, [pc, #136]	; (1c320 <k_sched_unlock+0xd0>)
   1c298:	f003 fde5 	bl	1fe66 <assert_post_action>
	__asm__ volatile(
   1c29c:	f04f 0320 	mov.w	r3, #32
   1c2a0:	f3ef 8511 	mrs	r5, BASEPRI
   1c2a4:	f383 8811 	msr	BASEPRI, r3
   1c2a8:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1c2ac:	4820      	ldr	r0, [pc, #128]	; (1c330 <k_sched_unlock+0xe0>)
   1c2ae:	f000 ffdf 	bl	1d270 <z_spin_lock_valid>
   1c2b2:	b968      	cbnz	r0, 1c2d0 <k_sched_unlock+0x80>
   1c2b4:	234a      	movs	r3, #74	; 0x4a
   1c2b6:	4a1f      	ldr	r2, [pc, #124]	; (1c334 <k_sched_unlock+0xe4>)
   1c2b8:	491f      	ldr	r1, [pc, #124]	; (1c338 <k_sched_unlock+0xe8>)
   1c2ba:	481a      	ldr	r0, [pc, #104]	; (1c324 <k_sched_unlock+0xd4>)
   1c2bc:	f003 fd8d 	bl	1fdda <printk>
   1c2c0:	491b      	ldr	r1, [pc, #108]	; (1c330 <k_sched_unlock+0xe0>)
   1c2c2:	481e      	ldr	r0, [pc, #120]	; (1c33c <k_sched_unlock+0xec>)
   1c2c4:	f003 fd89 	bl	1fdda <printk>
   1c2c8:	214a      	movs	r1, #74	; 0x4a
   1c2ca:	481a      	ldr	r0, [pc, #104]	; (1c334 <k_sched_unlock+0xe4>)
   1c2cc:	f003 fdcb 	bl	1fe66 <assert_post_action>
	z_spin_lock_set_owner(l);
   1c2d0:	4817      	ldr	r0, [pc, #92]	; (1c330 <k_sched_unlock+0xe0>)
   1c2d2:	f000 ffeb 	bl	1d2ac <z_spin_lock_set_owner>
		++_current->base.sched_locked;
   1c2d6:	68a2      	ldr	r2, [r4, #8]
		update_cache(0);
   1c2d8:	2000      	movs	r0, #0
		++_current->base.sched_locked;
   1c2da:	7bd3      	ldrb	r3, [r2, #15]
   1c2dc:	3301      	adds	r3, #1
   1c2de:	73d3      	strb	r3, [r2, #15]
		update_cache(0);
   1c2e0:	f7ff ff80 	bl	1c1e4 <update_cache>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1c2e4:	4812      	ldr	r0, [pc, #72]	; (1c330 <k_sched_unlock+0xe0>)
   1c2e6:	f000 ffd1 	bl	1d28c <z_spin_unlock_valid>
   1c2ea:	b968      	cbnz	r0, 1c308 <k_sched_unlock+0xb8>
   1c2ec:	235d      	movs	r3, #93	; 0x5d
   1c2ee:	4a11      	ldr	r2, [pc, #68]	; (1c334 <k_sched_unlock+0xe4>)
   1c2f0:	4913      	ldr	r1, [pc, #76]	; (1c340 <k_sched_unlock+0xf0>)
   1c2f2:	480c      	ldr	r0, [pc, #48]	; (1c324 <k_sched_unlock+0xd4>)
   1c2f4:	f003 fd71 	bl	1fdda <printk>
   1c2f8:	490d      	ldr	r1, [pc, #52]	; (1c330 <k_sched_unlock+0xe0>)
   1c2fa:	4812      	ldr	r0, [pc, #72]	; (1c344 <k_sched_unlock+0xf4>)
   1c2fc:	f003 fd6d 	bl	1fdda <printk>
   1c300:	215d      	movs	r1, #93	; 0x5d
   1c302:	480c      	ldr	r0, [pc, #48]	; (1c334 <k_sched_unlock+0xe4>)
   1c304:	f003 fdaf 	bl	1fe66 <assert_post_action>
	__asm__ volatile(
   1c308:	f385 8811 	msr	BASEPRI, r5
   1c30c:	f3bf 8f6f 	isb	sy
}
   1c310:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule_unlocked();
   1c314:	f005 ba37 	b.w	21786 <z_reschedule_unlocked>
   1c318:	20021398 	.word	0x20021398
   1c31c:	000251a9 	.word	0x000251a9
   1c320:	00025207 	.word	0x00025207
   1c324:	00023451 	.word	0x00023451
   1c328:	000241f4 	.word	0x000241f4
   1c32c:	0002516f 	.word	0x0002516f
   1c330:	200213d0 	.word	0x200213d0
   1c334:	00023852 	.word	0x00023852
   1c338:	00023878 	.word	0x00023878
   1c33c:	0002388d 	.word	0x0002388d
   1c340:	000238a5 	.word	0x000238a5
   1c344:	000238bc 	.word	0x000238bc

0001c348 <z_add_thread_to_ready_q>:
{
   1c348:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1c34a:	4604      	mov	r4, r0
	__asm__ volatile(
   1c34c:	f04f 0320 	mov.w	r3, #32
   1c350:	f3ef 8511 	mrs	r5, BASEPRI
   1c354:	f383 8811 	msr	BASEPRI, r3
   1c358:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1c35c:	482f      	ldr	r0, [pc, #188]	; (1c41c <z_add_thread_to_ready_q+0xd4>)
   1c35e:	f000 ff87 	bl	1d270 <z_spin_lock_valid>
   1c362:	b968      	cbnz	r0, 1c380 <z_add_thread_to_ready_q+0x38>
   1c364:	234a      	movs	r3, #74	; 0x4a
   1c366:	4a2e      	ldr	r2, [pc, #184]	; (1c420 <z_add_thread_to_ready_q+0xd8>)
   1c368:	492e      	ldr	r1, [pc, #184]	; (1c424 <z_add_thread_to_ready_q+0xdc>)
   1c36a:	482f      	ldr	r0, [pc, #188]	; (1c428 <z_add_thread_to_ready_q+0xe0>)
   1c36c:	f003 fd35 	bl	1fdda <printk>
   1c370:	492a      	ldr	r1, [pc, #168]	; (1c41c <z_add_thread_to_ready_q+0xd4>)
   1c372:	482e      	ldr	r0, [pc, #184]	; (1c42c <z_add_thread_to_ready_q+0xe4>)
   1c374:	f003 fd31 	bl	1fdda <printk>
   1c378:	214a      	movs	r1, #74	; 0x4a
   1c37a:	4829      	ldr	r0, [pc, #164]	; (1c420 <z_add_thread_to_ready_q+0xd8>)
   1c37c:	f003 fd73 	bl	1fe66 <assert_post_action>
	z_spin_lock_set_owner(l);
   1c380:	4826      	ldr	r0, [pc, #152]	; (1c41c <z_add_thread_to_ready_q+0xd4>)
   1c382:	f000 ff93 	bl	1d2ac <z_spin_lock_set_owner>
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   1c386:	4b2a      	ldr	r3, [pc, #168]	; (1c430 <z_add_thread_to_ready_q+0xe8>)
   1c388:	429c      	cmp	r4, r3
   1c38a:	d10b      	bne.n	1c3a4 <z_add_thread_to_ready_q+0x5c>
   1c38c:	4929      	ldr	r1, [pc, #164]	; (1c434 <z_add_thread_to_ready_q+0xec>)
   1c38e:	4826      	ldr	r0, [pc, #152]	; (1c428 <z_add_thread_to_ready_q+0xe0>)
   1c390:	f240 3302 	movw	r3, #770	; 0x302
   1c394:	4a28      	ldr	r2, [pc, #160]	; (1c438 <z_add_thread_to_ready_q+0xf0>)
   1c396:	f003 fd20 	bl	1fdda <printk>
   1c39a:	f240 3102 	movw	r1, #770	; 0x302
   1c39e:	4826      	ldr	r0, [pc, #152]	; (1c438 <z_add_thread_to_ready_q+0xf0>)
   1c3a0:	f003 fd61 	bl	1fe66 <assert_post_action>
	return list->head == list;
   1c3a4:	4a25      	ldr	r2, [pc, #148]	; (1c43c <z_add_thread_to_ready_q+0xf4>)
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1c3a6:	f102 0128 	add.w	r1, r2, #40	; 0x28
   1c3aa:	e9d2 300a 	ldrd	r3, r0, [r2, #40]	; 0x28
   1c3ae:	428b      	cmp	r3, r1
   1c3b0:	d02e      	beq.n	1c410 <z_add_thread_to_ready_q+0xc8>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   1c3b2:	b36b      	cbz	r3, 1c410 <z_add_thread_to_ready_q+0xc8>
	if (thread_1->base.prio < thread_2->base.prio) {
   1c3b4:	f994 600e 	ldrsb.w	r6, [r4, #14]
   1c3b8:	f993 700e 	ldrsb.w	r7, [r3, #14]
   1c3bc:	42b7      	cmp	r7, r6
   1c3be:	dd22      	ble.n	1c406 <z_add_thread_to_ready_q+0xbe>
	node->prev = successor->prev;
   1c3c0:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   1c3c2:	e9c4 3200 	strd	r3, r2, [r4]
	successor->prev->next = node;
   1c3c6:	6014      	str	r4, [r2, #0]
	successor->prev = node;
   1c3c8:	605c      	str	r4, [r3, #4]
	thread->base.thread_state |= states;
   1c3ca:	7b63      	ldrb	r3, [r4, #13]
		update_cache(0);
   1c3cc:	2000      	movs	r0, #0
   1c3ce:	f063 037f 	orn	r3, r3, #127	; 0x7f
   1c3d2:	7363      	strb	r3, [r4, #13]
   1c3d4:	f7ff ff06 	bl	1c1e4 <update_cache>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1c3d8:	4810      	ldr	r0, [pc, #64]	; (1c41c <z_add_thread_to_ready_q+0xd4>)
   1c3da:	f000 ff57 	bl	1d28c <z_spin_unlock_valid>
   1c3de:	b968      	cbnz	r0, 1c3fc <z_add_thread_to_ready_q+0xb4>
   1c3e0:	235d      	movs	r3, #93	; 0x5d
   1c3e2:	4a0f      	ldr	r2, [pc, #60]	; (1c420 <z_add_thread_to_ready_q+0xd8>)
   1c3e4:	4916      	ldr	r1, [pc, #88]	; (1c440 <z_add_thread_to_ready_q+0xf8>)
   1c3e6:	4810      	ldr	r0, [pc, #64]	; (1c428 <z_add_thread_to_ready_q+0xe0>)
   1c3e8:	f003 fcf7 	bl	1fdda <printk>
   1c3ec:	490b      	ldr	r1, [pc, #44]	; (1c41c <z_add_thread_to_ready_q+0xd4>)
   1c3ee:	4815      	ldr	r0, [pc, #84]	; (1c444 <z_add_thread_to_ready_q+0xfc>)
   1c3f0:	f003 fcf3 	bl	1fdda <printk>
   1c3f4:	215d      	movs	r1, #93	; 0x5d
   1c3f6:	480a      	ldr	r0, [pc, #40]	; (1c420 <z_add_thread_to_ready_q+0xd8>)
   1c3f8:	f003 fd35 	bl	1fe66 <assert_post_action>
	__asm__ volatile(
   1c3fc:	f385 8811 	msr	BASEPRI, r5
   1c400:	f3bf 8f6f 	isb	sy
}
   1c404:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return (node == list->tail) ? NULL : node->next;
   1c406:	4298      	cmp	r0, r3
   1c408:	d002      	beq.n	1c410 <z_add_thread_to_ready_q+0xc8>
   1c40a:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   1c40c:	2b00      	cmp	r3, #0
   1c40e:	d1d3      	bne.n	1c3b8 <z_add_thread_to_ready_q+0x70>
	node->prev = list->tail;
   1c410:	e9c4 1000 	strd	r1, r0, [r4]
	list->tail->next = node;
   1c414:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
   1c416:	601c      	str	r4, [r3, #0]
	list->tail = node;
   1c418:	62d4      	str	r4, [r2, #44]	; 0x2c
   1c41a:	e7d6      	b.n	1c3ca <z_add_thread_to_ready_q+0x82>
   1c41c:	200213d0 	.word	0x200213d0
   1c420:	00023852 	.word	0x00023852
   1c424:	00023878 	.word	0x00023878
   1c428:	00023451 	.word	0x00023451
   1c42c:	0002388d 	.word	0x0002388d
   1c430:	20020a08 	.word	0x20020a08
   1c434:	0002525f 	.word	0x0002525f
   1c438:	00025207 	.word	0x00025207
   1c43c:	20021398 	.word	0x20021398
   1c440:	000238a5 	.word	0x000238a5
   1c444:	000238bc 	.word	0x000238bc

0001c448 <z_thread_timeout>:
	if (thread->base.pended_on != NULL) {
   1c448:	f850 3c10 	ldr.w	r3, [r0, #-16]
{
   1c44c:	b570      	push	{r4, r5, r6, lr}
   1c44e:	4604      	mov	r4, r0
	struct k_thread *thread = CONTAINER_OF(timeout,
   1c450:	f1a0 0518 	sub.w	r5, r0, #24
	if (thread->base.pended_on != NULL) {
   1c454:	2b00      	cmp	r3, #0
   1c456:	d042      	beq.n	1c4de <z_thread_timeout+0x96>
	__asm__ volatile(
   1c458:	f04f 0320 	mov.w	r3, #32
   1c45c:	f3ef 8611 	mrs	r6, BASEPRI
   1c460:	f383 8811 	msr	BASEPRI, r3
   1c464:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1c468:	4825      	ldr	r0, [pc, #148]	; (1c500 <z_thread_timeout+0xb8>)
   1c46a:	f000 ff01 	bl	1d270 <z_spin_lock_valid>
   1c46e:	b968      	cbnz	r0, 1c48c <z_thread_timeout+0x44>
   1c470:	234a      	movs	r3, #74	; 0x4a
   1c472:	4a24      	ldr	r2, [pc, #144]	; (1c504 <z_thread_timeout+0xbc>)
   1c474:	4924      	ldr	r1, [pc, #144]	; (1c508 <z_thread_timeout+0xc0>)
   1c476:	4825      	ldr	r0, [pc, #148]	; (1c50c <z_thread_timeout+0xc4>)
   1c478:	f003 fcaf 	bl	1fdda <printk>
   1c47c:	4920      	ldr	r1, [pc, #128]	; (1c500 <z_thread_timeout+0xb8>)
   1c47e:	4824      	ldr	r0, [pc, #144]	; (1c510 <z_thread_timeout+0xc8>)
   1c480:	f003 fcab 	bl	1fdda <printk>
   1c484:	214a      	movs	r1, #74	; 0x4a
   1c486:	481f      	ldr	r0, [pc, #124]	; (1c504 <z_thread_timeout+0xbc>)
   1c488:	f003 fced 	bl	1fe66 <assert_post_action>
	z_spin_lock_set_owner(l);
   1c48c:	481c      	ldr	r0, [pc, #112]	; (1c500 <z_thread_timeout+0xb8>)
   1c48e:	f000 ff0d 	bl	1d2ac <z_spin_lock_set_owner>
		_priq_wait_remove(&pended_on(thread)->waitq, thread);
   1c492:	f1a4 0010 	sub.w	r0, r4, #16
   1c496:	f7ff fcdf 	bl	1be58 <pended_on.isra.17>
   1c49a:	4629      	mov	r1, r5
   1c49c:	f7ff fe1e 	bl	1c0dc <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
   1c4a0:	f814 3c0b 	ldrb.w	r3, [r4, #-11]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1c4a4:	4816      	ldr	r0, [pc, #88]	; (1c500 <z_thread_timeout+0xb8>)
   1c4a6:	f023 0302 	bic.w	r3, r3, #2
   1c4aa:	f804 3c0b 	strb.w	r3, [r4, #-11]
   1c4ae:	f000 feed 	bl	1d28c <z_spin_unlock_valid>
   1c4b2:	b968      	cbnz	r0, 1c4d0 <z_thread_timeout+0x88>
   1c4b4:	235d      	movs	r3, #93	; 0x5d
   1c4b6:	4a13      	ldr	r2, [pc, #76]	; (1c504 <z_thread_timeout+0xbc>)
   1c4b8:	4916      	ldr	r1, [pc, #88]	; (1c514 <z_thread_timeout+0xcc>)
   1c4ba:	4814      	ldr	r0, [pc, #80]	; (1c50c <z_thread_timeout+0xc4>)
   1c4bc:	f003 fc8d 	bl	1fdda <printk>
   1c4c0:	490f      	ldr	r1, [pc, #60]	; (1c500 <z_thread_timeout+0xb8>)
   1c4c2:	4815      	ldr	r0, [pc, #84]	; (1c518 <z_thread_timeout+0xd0>)
   1c4c4:	f003 fc89 	bl	1fdda <printk>
   1c4c8:	215d      	movs	r1, #93	; 0x5d
   1c4ca:	480e      	ldr	r0, [pc, #56]	; (1c504 <z_thread_timeout+0xbc>)
   1c4cc:	f003 fccb 	bl	1fe66 <assert_post_action>
	__asm__ volatile(
   1c4d0:	f386 8811 	msr	BASEPRI, r6
   1c4d4:	f3bf 8f6f 	isb	sy
	thread->base.pended_on = NULL;
   1c4d8:	2300      	movs	r3, #0
   1c4da:	f844 3c10 	str.w	r3, [r4, #-16]
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
   1c4de:	f814 3c0b 	ldrb.w	r3, [r4, #-11]
	if (z_is_thread_ready(thread)) {
   1c4e2:	4628      	mov	r0, r5
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
   1c4e4:	f023 0314 	bic.w	r3, r3, #20
   1c4e8:	f804 3c0b 	strb.w	r3, [r4, #-11]
	if (z_is_thread_ready(thread)) {
   1c4ec:	f005 f92d 	bl	2174a <z_is_thread_ready>
   1c4f0:	b120      	cbz	r0, 1c4fc <z_thread_timeout+0xb4>
		z_add_thread_to_ready_q(thread);
   1c4f2:	4628      	mov	r0, r5
}
   1c4f4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   1c4f8:	f7ff bf26 	b.w	1c348 <z_add_thread_to_ready_q>
   1c4fc:	bd70      	pop	{r4, r5, r6, pc}
   1c4fe:	bf00      	nop
   1c500:	200213d0 	.word	0x200213d0
   1c504:	00023852 	.word	0x00023852
   1c508:	00023878 	.word	0x00023878
   1c50c:	00023451 	.word	0x00023451
   1c510:	0002388d 	.word	0x0002388d
   1c514:	000238a5 	.word	0x000238a5
   1c518:	000238bc 	.word	0x000238bc

0001c51c <z_move_thread_to_end_of_prio_q>:
{
   1c51c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1c51e:	4604      	mov	r4, r0
	__asm__ volatile(
   1c520:	f04f 0320 	mov.w	r3, #32
   1c524:	f3ef 8511 	mrs	r5, BASEPRI
   1c528:	f383 8811 	msr	BASEPRI, r3
   1c52c:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1c530:	4835      	ldr	r0, [pc, #212]	; (1c608 <z_move_thread_to_end_of_prio_q+0xec>)
   1c532:	f000 fe9d 	bl	1d270 <z_spin_lock_valid>
   1c536:	b968      	cbnz	r0, 1c554 <z_move_thread_to_end_of_prio_q+0x38>
   1c538:	234a      	movs	r3, #74	; 0x4a
   1c53a:	4a34      	ldr	r2, [pc, #208]	; (1c60c <z_move_thread_to_end_of_prio_q+0xf0>)
   1c53c:	4934      	ldr	r1, [pc, #208]	; (1c610 <z_move_thread_to_end_of_prio_q+0xf4>)
   1c53e:	4835      	ldr	r0, [pc, #212]	; (1c614 <z_move_thread_to_end_of_prio_q+0xf8>)
   1c540:	f003 fc4b 	bl	1fdda <printk>
   1c544:	4930      	ldr	r1, [pc, #192]	; (1c608 <z_move_thread_to_end_of_prio_q+0xec>)
   1c546:	4834      	ldr	r0, [pc, #208]	; (1c618 <z_move_thread_to_end_of_prio_q+0xfc>)
   1c548:	f003 fc47 	bl	1fdda <printk>
   1c54c:	214a      	movs	r1, #74	; 0x4a
   1c54e:	482f      	ldr	r0, [pc, #188]	; (1c60c <z_move_thread_to_end_of_prio_q+0xf0>)
   1c550:	f003 fc89 	bl	1fe66 <assert_post_action>
	z_spin_lock_set_owner(l);
   1c554:	482c      	ldr	r0, [pc, #176]	; (1c608 <z_move_thread_to_end_of_prio_q+0xec>)
   1c556:	f000 fea9 	bl	1d2ac <z_spin_lock_set_owner>
		if (z_is_thread_queued(thread)) {
   1c55a:	f994 300d 	ldrsb.w	r3, [r4, #13]
   1c55e:	2b00      	cmp	r3, #0
   1c560:	da03      	bge.n	1c56a <z_move_thread_to_end_of_prio_q+0x4e>
			_priq_run_remove(&_kernel.ready_q.runq, thread);
   1c562:	4621      	mov	r1, r4
   1c564:	482d      	ldr	r0, [pc, #180]	; (1c61c <z_move_thread_to_end_of_prio_q+0x100>)
   1c566:	f7ff fdb9 	bl	1c0dc <z_priq_dumb_remove>
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   1c56a:	4b2d      	ldr	r3, [pc, #180]	; (1c620 <z_move_thread_to_end_of_prio_q+0x104>)
   1c56c:	429c      	cmp	r4, r3
   1c56e:	d10b      	bne.n	1c588 <z_move_thread_to_end_of_prio_q+0x6c>
   1c570:	492c      	ldr	r1, [pc, #176]	; (1c624 <z_move_thread_to_end_of_prio_q+0x108>)
   1c572:	4828      	ldr	r0, [pc, #160]	; (1c614 <z_move_thread_to_end_of_prio_q+0xf8>)
   1c574:	f240 3302 	movw	r3, #770	; 0x302
   1c578:	4a2b      	ldr	r2, [pc, #172]	; (1c628 <z_move_thread_to_end_of_prio_q+0x10c>)
   1c57a:	f003 fc2e 	bl	1fdda <printk>
   1c57e:	f240 3102 	movw	r1, #770	; 0x302
   1c582:	4829      	ldr	r0, [pc, #164]	; (1c628 <z_move_thread_to_end_of_prio_q+0x10c>)
   1c584:	f003 fc6f 	bl	1fe66 <assert_post_action>
	return list->head == list;
   1c588:	4a28      	ldr	r2, [pc, #160]	; (1c62c <z_move_thread_to_end_of_prio_q+0x110>)
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1c58a:	f102 0128 	add.w	r1, r2, #40	; 0x28
   1c58e:	e9d2 300a 	ldrd	r3, r0, [r2, #40]	; 0x28
   1c592:	428b      	cmp	r3, r1
   1c594:	d032      	beq.n	1c5fc <z_move_thread_to_end_of_prio_q+0xe0>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   1c596:	2b00      	cmp	r3, #0
   1c598:	d030      	beq.n	1c5fc <z_move_thread_to_end_of_prio_q+0xe0>
	if (thread_1->base.prio < thread_2->base.prio) {
   1c59a:	f994 600e 	ldrsb.w	r6, [r4, #14]
   1c59e:	f993 700e 	ldrsb.w	r7, [r3, #14]
   1c5a2:	42b7      	cmp	r7, r6
   1c5a4:	dd25      	ble.n	1c5f2 <z_move_thread_to_end_of_prio_q+0xd6>
	node->prev = successor->prev;
   1c5a6:	6859      	ldr	r1, [r3, #4]
	node->next = successor;
   1c5a8:	e9c4 3100 	strd	r3, r1, [r4]
	successor->prev->next = node;
   1c5ac:	600c      	str	r4, [r1, #0]
	successor->prev = node;
   1c5ae:	605c      	str	r4, [r3, #4]
	thread->base.thread_state |= states;
   1c5b0:	7b63      	ldrb	r3, [r4, #13]
		update_cache(thread == _current);
   1c5b2:	6890      	ldr	r0, [r2, #8]
   1c5b4:	f063 037f 	orn	r3, r3, #127	; 0x7f
   1c5b8:	7363      	strb	r3, [r4, #13]
   1c5ba:	1b03      	subs	r3, r0, r4
   1c5bc:	4258      	negs	r0, r3
   1c5be:	4158      	adcs	r0, r3
   1c5c0:	f7ff fe10 	bl	1c1e4 <update_cache>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1c5c4:	4810      	ldr	r0, [pc, #64]	; (1c608 <z_move_thread_to_end_of_prio_q+0xec>)
   1c5c6:	f000 fe61 	bl	1d28c <z_spin_unlock_valid>
   1c5ca:	b968      	cbnz	r0, 1c5e8 <z_move_thread_to_end_of_prio_q+0xcc>
   1c5cc:	235d      	movs	r3, #93	; 0x5d
   1c5ce:	4a0f      	ldr	r2, [pc, #60]	; (1c60c <z_move_thread_to_end_of_prio_q+0xf0>)
   1c5d0:	4917      	ldr	r1, [pc, #92]	; (1c630 <z_move_thread_to_end_of_prio_q+0x114>)
   1c5d2:	4810      	ldr	r0, [pc, #64]	; (1c614 <z_move_thread_to_end_of_prio_q+0xf8>)
   1c5d4:	f003 fc01 	bl	1fdda <printk>
   1c5d8:	490b      	ldr	r1, [pc, #44]	; (1c608 <z_move_thread_to_end_of_prio_q+0xec>)
   1c5da:	4816      	ldr	r0, [pc, #88]	; (1c634 <z_move_thread_to_end_of_prio_q+0x118>)
   1c5dc:	f003 fbfd 	bl	1fdda <printk>
   1c5e0:	215d      	movs	r1, #93	; 0x5d
   1c5e2:	480a      	ldr	r0, [pc, #40]	; (1c60c <z_move_thread_to_end_of_prio_q+0xf0>)
   1c5e4:	f003 fc3f 	bl	1fe66 <assert_post_action>
	__asm__ volatile(
   1c5e8:	f385 8811 	msr	BASEPRI, r5
   1c5ec:	f3bf 8f6f 	isb	sy
}
   1c5f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return (node == list->tail) ? NULL : node->next;
   1c5f2:	4298      	cmp	r0, r3
   1c5f4:	d002      	beq.n	1c5fc <z_move_thread_to_end_of_prio_q+0xe0>
   1c5f6:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   1c5f8:	2b00      	cmp	r3, #0
   1c5fa:	d1d0      	bne.n	1c59e <z_move_thread_to_end_of_prio_q+0x82>
	node->prev = list->tail;
   1c5fc:	e9c4 1000 	strd	r1, r0, [r4]
	list->tail->next = node;
   1c600:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
   1c602:	601c      	str	r4, [r3, #0]
	list->tail = node;
   1c604:	62d4      	str	r4, [r2, #44]	; 0x2c
   1c606:	e7d3      	b.n	1c5b0 <z_move_thread_to_end_of_prio_q+0x94>
   1c608:	200213d0 	.word	0x200213d0
   1c60c:	00023852 	.word	0x00023852
   1c610:	00023878 	.word	0x00023878
   1c614:	00023451 	.word	0x00023451
   1c618:	0002388d 	.word	0x0002388d
   1c61c:	200213c0 	.word	0x200213c0
   1c620:	20020a08 	.word	0x20020a08
   1c624:	0002525f 	.word	0x0002525f
   1c628:	00025207 	.word	0x00025207
   1c62c:	20021398 	.word	0x20021398
   1c630:	000238a5 	.word	0x000238a5
   1c634:	000238bc 	.word	0x000238bc

0001c638 <z_time_slice>:
	if (pending_current == _current) {
   1c638:	4a15      	ldr	r2, [pc, #84]	; (1c690 <z_time_slice+0x58>)
   1c63a:	4916      	ldr	r1, [pc, #88]	; (1c694 <z_time_slice+0x5c>)
{
   1c63c:	b538      	push	{r3, r4, r5, lr}
	if (pending_current == _current) {
   1c63e:	680c      	ldr	r4, [r1, #0]
   1c640:	6893      	ldr	r3, [r2, #8]
   1c642:	42a3      	cmp	r3, r4
   1c644:	4614      	mov	r4, r2
   1c646:	d103      	bne.n	1c650 <z_time_slice+0x18>
}
   1c648:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
			z_reset_time_slice();
   1c64c:	f7ff bc1c 	b.w	1be88 <z_reset_time_slice>
	pending_current = NULL;
   1c650:	2500      	movs	r5, #0
   1c652:	600d      	str	r5, [r1, #0]
	if (slice_time && sliceable(_current)) {
   1c654:	4910      	ldr	r1, [pc, #64]	; (1c698 <z_time_slice+0x60>)
   1c656:	6809      	ldr	r1, [r1, #0]
   1c658:	b1b9      	cbz	r1, 1c68a <z_time_slice+0x52>
		&& !z_is_thread_timeout_active(thread);
   1c65a:	89d9      	ldrh	r1, [r3, #14]
   1c65c:	297f      	cmp	r1, #127	; 0x7f
   1c65e:	d814      	bhi.n	1c68a <z_time_slice+0x52>
		&& !z_is_prio_higher(thread->base.prio, slice_max_prio)
   1c660:	490e      	ldr	r1, [pc, #56]	; (1c69c <z_time_slice+0x64>)
   1c662:	f993 500e 	ldrsb.w	r5, [r3, #14]
   1c666:	6809      	ldr	r1, [r1, #0]
   1c668:	428d      	cmp	r5, r1
   1c66a:	db0e      	blt.n	1c68a <z_time_slice+0x52>
		&& !z_is_idle_thread_object(thread)
   1c66c:	490c      	ldr	r1, [pc, #48]	; (1c6a0 <z_time_slice+0x68>)
   1c66e:	428b      	cmp	r3, r1
   1c670:	d00b      	beq.n	1c68a <z_time_slice+0x52>
		&& !z_is_thread_timeout_active(thread);
   1c672:	6999      	ldr	r1, [r3, #24]
   1c674:	b949      	cbnz	r1, 1c68a <z_time_slice+0x52>
		if (ticks >= _current_cpu->slice_ticks) {
   1c676:	6911      	ldr	r1, [r2, #16]
   1c678:	4281      	cmp	r1, r0
   1c67a:	dc03      	bgt.n	1c684 <z_time_slice+0x4c>
			z_move_thread_to_end_of_prio_q(_current);
   1c67c:	4618      	mov	r0, r3
   1c67e:	f7ff ff4d 	bl	1c51c <z_move_thread_to_end_of_prio_q>
   1c682:	e7e1      	b.n	1c648 <z_time_slice+0x10>
			_current_cpu->slice_ticks -= ticks;
   1c684:	1a09      	subs	r1, r1, r0
   1c686:	6111      	str	r1, [r2, #16]
}
   1c688:	bd38      	pop	{r3, r4, r5, pc}
		_current_cpu->slice_ticks = 0;
   1c68a:	2300      	movs	r3, #0
   1c68c:	6123      	str	r3, [r4, #16]
   1c68e:	e7fb      	b.n	1c688 <z_time_slice+0x50>
   1c690:	20021398 	.word	0x20021398
   1c694:	200213cc 	.word	0x200213cc
   1c698:	200213d8 	.word	0x200213d8
   1c69c:	200213d4 	.word	0x200213d4
   1c6a0:	20020a08 	.word	0x20020a08

0001c6a4 <z_thread_single_suspend>:
{
   1c6a4:	b570      	push	{r4, r5, r6, lr}
   1c6a6:	4604      	mov	r4, r0
   1c6a8:	3018      	adds	r0, #24
   1c6aa:	f001 f895 	bl	1d7d8 <z_abort_timeout>
	__asm__ volatile(
   1c6ae:	f04f 0320 	mov.w	r3, #32
   1c6b2:	f3ef 8611 	mrs	r6, BASEPRI
   1c6b6:	f383 8811 	msr	BASEPRI, r3
   1c6ba:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1c6be:	4825      	ldr	r0, [pc, #148]	; (1c754 <z_thread_single_suspend+0xb0>)
   1c6c0:	f000 fdd6 	bl	1d270 <z_spin_lock_valid>
   1c6c4:	b968      	cbnz	r0, 1c6e2 <z_thread_single_suspend+0x3e>
   1c6c6:	234a      	movs	r3, #74	; 0x4a
   1c6c8:	4a23      	ldr	r2, [pc, #140]	; (1c758 <z_thread_single_suspend+0xb4>)
   1c6ca:	4924      	ldr	r1, [pc, #144]	; (1c75c <z_thread_single_suspend+0xb8>)
   1c6cc:	4824      	ldr	r0, [pc, #144]	; (1c760 <z_thread_single_suspend+0xbc>)
   1c6ce:	f003 fb84 	bl	1fdda <printk>
   1c6d2:	4920      	ldr	r1, [pc, #128]	; (1c754 <z_thread_single_suspend+0xb0>)
   1c6d4:	4823      	ldr	r0, [pc, #140]	; (1c764 <z_thread_single_suspend+0xc0>)
   1c6d6:	f003 fb80 	bl	1fdda <printk>
   1c6da:	214a      	movs	r1, #74	; 0x4a
   1c6dc:	481e      	ldr	r0, [pc, #120]	; (1c758 <z_thread_single_suspend+0xb4>)
   1c6de:	f003 fbc2 	bl	1fe66 <assert_post_action>
	z_spin_lock_set_owner(l);
   1c6e2:	481c      	ldr	r0, [pc, #112]	; (1c754 <z_thread_single_suspend+0xb0>)
   1c6e4:	f000 fde2 	bl	1d2ac <z_spin_lock_set_owner>
		if (z_is_thread_queued(thread)) {
   1c6e8:	f994 300d 	ldrsb.w	r3, [r4, #13]
   1c6ec:	2b00      	cmp	r3, #0
   1c6ee:	da07      	bge.n	1c700 <z_thread_single_suspend+0x5c>
			_priq_run_remove(&_kernel.ready_q.runq, thread);
   1c6f0:	4621      	mov	r1, r4
   1c6f2:	481d      	ldr	r0, [pc, #116]	; (1c768 <z_thread_single_suspend+0xc4>)
   1c6f4:	f7ff fcf2 	bl	1c0dc <z_priq_dumb_remove>
	thread->base.thread_state &= ~states;
   1c6f8:	7b63      	ldrb	r3, [r4, #13]
   1c6fa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   1c6fe:	7363      	strb	r3, [r4, #13]
		update_cache(thread == _current);
   1c700:	4d1a      	ldr	r5, [pc, #104]	; (1c76c <z_thread_single_suspend+0xc8>)
	thread->base.thread_state |= _THREAD_SUSPENDED;
   1c702:	7b63      	ldrb	r3, [r4, #13]
   1c704:	68a8      	ldr	r0, [r5, #8]
   1c706:	f043 0310 	orr.w	r3, r3, #16
   1c70a:	7363      	strb	r3, [r4, #13]
   1c70c:	1b03      	subs	r3, r0, r4
   1c70e:	4258      	negs	r0, r3
   1c710:	4158      	adcs	r0, r3
   1c712:	f7ff fd67 	bl	1c1e4 <update_cache>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1c716:	480f      	ldr	r0, [pc, #60]	; (1c754 <z_thread_single_suspend+0xb0>)
   1c718:	f000 fdb8 	bl	1d28c <z_spin_unlock_valid>
   1c71c:	b968      	cbnz	r0, 1c73a <z_thread_single_suspend+0x96>
   1c71e:	235d      	movs	r3, #93	; 0x5d
   1c720:	4a0d      	ldr	r2, [pc, #52]	; (1c758 <z_thread_single_suspend+0xb4>)
   1c722:	4913      	ldr	r1, [pc, #76]	; (1c770 <z_thread_single_suspend+0xcc>)
   1c724:	480e      	ldr	r0, [pc, #56]	; (1c760 <z_thread_single_suspend+0xbc>)
   1c726:	f003 fb58 	bl	1fdda <printk>
   1c72a:	490a      	ldr	r1, [pc, #40]	; (1c754 <z_thread_single_suspend+0xb0>)
   1c72c:	4811      	ldr	r0, [pc, #68]	; (1c774 <z_thread_single_suspend+0xd0>)
   1c72e:	f003 fb54 	bl	1fdda <printk>
   1c732:	215d      	movs	r1, #93	; 0x5d
   1c734:	4808      	ldr	r0, [pc, #32]	; (1c758 <z_thread_single_suspend+0xb4>)
   1c736:	f003 fb96 	bl	1fe66 <assert_post_action>
	__asm__ volatile(
   1c73a:	f386 8811 	msr	BASEPRI, r6
   1c73e:	f3bf 8f6f 	isb	sy
	if (thread == _current) {
   1c742:	68ab      	ldr	r3, [r5, #8]
   1c744:	42a3      	cmp	r3, r4
   1c746:	d103      	bne.n	1c750 <z_thread_single_suspend+0xac>
}
   1c748:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		z_reschedule_unlocked();
   1c74c:	f005 b81b 	b.w	21786 <z_reschedule_unlocked>
}
   1c750:	bd70      	pop	{r4, r5, r6, pc}
   1c752:	bf00      	nop
   1c754:	200213d0 	.word	0x200213d0
   1c758:	00023852 	.word	0x00023852
   1c75c:	00023878 	.word	0x00023878
   1c760:	00023451 	.word	0x00023451
   1c764:	0002388d 	.word	0x0002388d
   1c768:	200213c0 	.word	0x200213c0
   1c76c:	20021398 	.word	0x20021398
   1c770:	000238a5 	.word	0x000238a5
   1c774:	000238bc 	.word	0x000238bc

0001c778 <z_thread_single_abort>:
	if (thread->fn_abort != NULL) {
   1c778:	6d03      	ldr	r3, [r0, #80]	; 0x50
{
   1c77a:	b570      	push	{r4, r5, r6, lr}
   1c77c:	4604      	mov	r4, r0
	if (thread->fn_abort != NULL) {
   1c77e:	b103      	cbz	r3, 1c782 <z_thread_single_abort+0xa>
		thread->fn_abort();
   1c780:	4798      	blx	r3
   1c782:	f104 0018 	add.w	r0, r4, #24
   1c786:	f001 f827 	bl	1d7d8 <z_abort_timeout>
	__asm__ volatile(
   1c78a:	f04f 0320 	mov.w	r3, #32
   1c78e:	f3ef 8511 	mrs	r5, BASEPRI
   1c792:	f383 8811 	msr	BASEPRI, r3
   1c796:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1c79a:	482c      	ldr	r0, [pc, #176]	; (1c84c <z_thread_single_abort+0xd4>)
   1c79c:	f000 fd68 	bl	1d270 <z_spin_lock_valid>
   1c7a0:	b968      	cbnz	r0, 1c7be <z_thread_single_abort+0x46>
   1c7a2:	234a      	movs	r3, #74	; 0x4a
   1c7a4:	4a2a      	ldr	r2, [pc, #168]	; (1c850 <z_thread_single_abort+0xd8>)
   1c7a6:	492b      	ldr	r1, [pc, #172]	; (1c854 <z_thread_single_abort+0xdc>)
   1c7a8:	482b      	ldr	r0, [pc, #172]	; (1c858 <z_thread_single_abort+0xe0>)
   1c7aa:	f003 fb16 	bl	1fdda <printk>
   1c7ae:	4927      	ldr	r1, [pc, #156]	; (1c84c <z_thread_single_abort+0xd4>)
   1c7b0:	482a      	ldr	r0, [pc, #168]	; (1c85c <z_thread_single_abort+0xe4>)
   1c7b2:	f003 fb12 	bl	1fdda <printk>
   1c7b6:	214a      	movs	r1, #74	; 0x4a
   1c7b8:	4825      	ldr	r0, [pc, #148]	; (1c850 <z_thread_single_abort+0xd8>)
   1c7ba:	f003 fb54 	bl	1fe66 <assert_post_action>
	z_spin_lock_set_owner(l);
   1c7be:	4823      	ldr	r0, [pc, #140]	; (1c84c <z_thread_single_abort+0xd4>)
   1c7c0:	f000 fd74 	bl	1d2ac <z_spin_lock_set_owner>
		if (z_is_thread_ready(thread)) {
   1c7c4:	4620      	mov	r0, r4
   1c7c6:	f004 ffc0 	bl	2174a <z_is_thread_ready>
   1c7ca:	4606      	mov	r6, r0
   1c7cc:	b368      	cbz	r0, 1c82a <z_thread_single_abort+0xb2>
			if (z_is_thread_queued(thread)) {
   1c7ce:	f994 300d 	ldrsb.w	r3, [r4, #13]
   1c7d2:	2b00      	cmp	r3, #0
   1c7d4:	da07      	bge.n	1c7e6 <z_thread_single_abort+0x6e>
				_priq_run_remove(&_kernel.ready_q.runq,
   1c7d6:	4621      	mov	r1, r4
   1c7d8:	4821      	ldr	r0, [pc, #132]	; (1c860 <z_thread_single_abort+0xe8>)
   1c7da:	f7ff fc7f 	bl	1c0dc <z_priq_dumb_remove>
	thread->base.thread_state &= ~states;
   1c7de:	7b63      	ldrb	r3, [r4, #13]
   1c7e0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   1c7e4:	7363      	strb	r3, [r4, #13]
			update_cache(thread == _current);
   1c7e6:	4b1f      	ldr	r3, [pc, #124]	; (1c864 <z_thread_single_abort+0xec>)
   1c7e8:	6898      	ldr	r0, [r3, #8]
   1c7ea:	1b02      	subs	r2, r0, r4
   1c7ec:	4250      	negs	r0, r2
   1c7ee:	4150      	adcs	r0, r2
   1c7f0:	f7ff fcf8 	bl	1c1e4 <update_cache>
		thread->base.thread_state |= mask;
   1c7f4:	7b63      	ldrb	r3, [r4, #13]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1c7f6:	4815      	ldr	r0, [pc, #84]	; (1c84c <z_thread_single_abort+0xd4>)
   1c7f8:	f043 0308 	orr.w	r3, r3, #8
   1c7fc:	7363      	strb	r3, [r4, #13]
   1c7fe:	f000 fd45 	bl	1d28c <z_spin_unlock_valid>
   1c802:	b968      	cbnz	r0, 1c820 <z_thread_single_abort+0xa8>
   1c804:	235d      	movs	r3, #93	; 0x5d
   1c806:	4a12      	ldr	r2, [pc, #72]	; (1c850 <z_thread_single_abort+0xd8>)
   1c808:	4917      	ldr	r1, [pc, #92]	; (1c868 <z_thread_single_abort+0xf0>)
   1c80a:	4813      	ldr	r0, [pc, #76]	; (1c858 <z_thread_single_abort+0xe0>)
   1c80c:	f003 fae5 	bl	1fdda <printk>
   1c810:	490e      	ldr	r1, [pc, #56]	; (1c84c <z_thread_single_abort+0xd4>)
   1c812:	4816      	ldr	r0, [pc, #88]	; (1c86c <z_thread_single_abort+0xf4>)
   1c814:	f003 fae1 	bl	1fdda <printk>
   1c818:	215d      	movs	r1, #93	; 0x5d
   1c81a:	480d      	ldr	r0, [pc, #52]	; (1c850 <z_thread_single_abort+0xd8>)
   1c81c:	f003 fb23 	bl	1fe66 <assert_post_action>
	__asm__ volatile(
   1c820:	f385 8811 	msr	BASEPRI, r5
   1c824:	f3bf 8f6f 	isb	sy
}
   1c828:	bd70      	pop	{r4, r5, r6, pc}
			if (z_is_thread_pending(thread)) {
   1c82a:	7b63      	ldrb	r3, [r4, #13]
   1c82c:	079b      	lsls	r3, r3, #30
   1c82e:	d5e1      	bpl.n	1c7f4 <z_thread_single_abort+0x7c>
				_priq_wait_remove(&pended_on(thread)->waitq,
   1c830:	f104 0008 	add.w	r0, r4, #8
   1c834:	f7ff fb10 	bl	1be58 <pended_on.isra.17>
   1c838:	4621      	mov	r1, r4
   1c83a:	f7ff fc4f 	bl	1c0dc <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
   1c83e:	7b63      	ldrb	r3, [r4, #13]
				thread->base.pended_on = NULL;
   1c840:	60a6      	str	r6, [r4, #8]
   1c842:	f023 0302 	bic.w	r3, r3, #2
   1c846:	7363      	strb	r3, [r4, #13]
   1c848:	e7d4      	b.n	1c7f4 <z_thread_single_abort+0x7c>
   1c84a:	bf00      	nop
   1c84c:	200213d0 	.word	0x200213d0
   1c850:	00023852 	.word	0x00023852
   1c854:	00023878 	.word	0x00023878
   1c858:	00023451 	.word	0x00023451
   1c85c:	0002388d 	.word	0x0002388d
   1c860:	200213c0 	.word	0x200213c0
   1c864:	20021398 	.word	0x20021398
   1c868:	000238a5 	.word	0x000238a5
   1c86c:	000238bc 	.word	0x000238bc

0001c870 <z_remove_thread_from_ready_q>:
{
   1c870:	b538      	push	{r3, r4, r5, lr}
   1c872:	4604      	mov	r4, r0
	__asm__ volatile(
   1c874:	f04f 0320 	mov.w	r3, #32
   1c878:	f3ef 8511 	mrs	r5, BASEPRI
   1c87c:	f383 8811 	msr	BASEPRI, r3
   1c880:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1c884:	481f      	ldr	r0, [pc, #124]	; (1c904 <z_remove_thread_from_ready_q+0x94>)
   1c886:	f000 fcf3 	bl	1d270 <z_spin_lock_valid>
   1c88a:	b968      	cbnz	r0, 1c8a8 <z_remove_thread_from_ready_q+0x38>
   1c88c:	234a      	movs	r3, #74	; 0x4a
   1c88e:	4a1e      	ldr	r2, [pc, #120]	; (1c908 <z_remove_thread_from_ready_q+0x98>)
   1c890:	491e      	ldr	r1, [pc, #120]	; (1c90c <z_remove_thread_from_ready_q+0x9c>)
   1c892:	481f      	ldr	r0, [pc, #124]	; (1c910 <z_remove_thread_from_ready_q+0xa0>)
   1c894:	f003 faa1 	bl	1fdda <printk>
   1c898:	491a      	ldr	r1, [pc, #104]	; (1c904 <z_remove_thread_from_ready_q+0x94>)
   1c89a:	481e      	ldr	r0, [pc, #120]	; (1c914 <z_remove_thread_from_ready_q+0xa4>)
   1c89c:	f003 fa9d 	bl	1fdda <printk>
   1c8a0:	214a      	movs	r1, #74	; 0x4a
   1c8a2:	4819      	ldr	r0, [pc, #100]	; (1c908 <z_remove_thread_from_ready_q+0x98>)
   1c8a4:	f003 fadf 	bl	1fe66 <assert_post_action>
	z_spin_lock_set_owner(l);
   1c8a8:	4816      	ldr	r0, [pc, #88]	; (1c904 <z_remove_thread_from_ready_q+0x94>)
   1c8aa:	f000 fcff 	bl	1d2ac <z_spin_lock_set_owner>
		if (z_is_thread_queued(thread)) {
   1c8ae:	f994 300d 	ldrsb.w	r3, [r4, #13]
   1c8b2:	2b00      	cmp	r3, #0
   1c8b4:	da07      	bge.n	1c8c6 <z_remove_thread_from_ready_q+0x56>
			_priq_run_remove(&_kernel.ready_q.runq, thread);
   1c8b6:	4621      	mov	r1, r4
   1c8b8:	4817      	ldr	r0, [pc, #92]	; (1c918 <z_remove_thread_from_ready_q+0xa8>)
   1c8ba:	f7ff fc0f 	bl	1c0dc <z_priq_dumb_remove>
	thread->base.thread_state &= ~states;
   1c8be:	7b63      	ldrb	r3, [r4, #13]
   1c8c0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   1c8c4:	7363      	strb	r3, [r4, #13]
		update_cache(thread == _current);
   1c8c6:	4b15      	ldr	r3, [pc, #84]	; (1c91c <z_remove_thread_from_ready_q+0xac>)
   1c8c8:	6898      	ldr	r0, [r3, #8]
   1c8ca:	1b03      	subs	r3, r0, r4
   1c8cc:	4258      	negs	r0, r3
   1c8ce:	4158      	adcs	r0, r3
   1c8d0:	f7ff fc88 	bl	1c1e4 <update_cache>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1c8d4:	480b      	ldr	r0, [pc, #44]	; (1c904 <z_remove_thread_from_ready_q+0x94>)
   1c8d6:	f000 fcd9 	bl	1d28c <z_spin_unlock_valid>
   1c8da:	b968      	cbnz	r0, 1c8f8 <z_remove_thread_from_ready_q+0x88>
   1c8dc:	235d      	movs	r3, #93	; 0x5d
   1c8de:	4a0a      	ldr	r2, [pc, #40]	; (1c908 <z_remove_thread_from_ready_q+0x98>)
   1c8e0:	490f      	ldr	r1, [pc, #60]	; (1c920 <z_remove_thread_from_ready_q+0xb0>)
   1c8e2:	480b      	ldr	r0, [pc, #44]	; (1c910 <z_remove_thread_from_ready_q+0xa0>)
   1c8e4:	f003 fa79 	bl	1fdda <printk>
   1c8e8:	4906      	ldr	r1, [pc, #24]	; (1c904 <z_remove_thread_from_ready_q+0x94>)
   1c8ea:	480e      	ldr	r0, [pc, #56]	; (1c924 <z_remove_thread_from_ready_q+0xb4>)
   1c8ec:	f003 fa75 	bl	1fdda <printk>
   1c8f0:	215d      	movs	r1, #93	; 0x5d
   1c8f2:	4805      	ldr	r0, [pc, #20]	; (1c908 <z_remove_thread_from_ready_q+0x98>)
   1c8f4:	f003 fab7 	bl	1fe66 <assert_post_action>
	__asm__ volatile(
   1c8f8:	f385 8811 	msr	BASEPRI, r5
   1c8fc:	f3bf 8f6f 	isb	sy
}
   1c900:	bd38      	pop	{r3, r4, r5, pc}
   1c902:	bf00      	nop
   1c904:	200213d0 	.word	0x200213d0
   1c908:	00023852 	.word	0x00023852
   1c90c:	00023878 	.word	0x00023878
   1c910:	00023451 	.word	0x00023451
   1c914:	0002388d 	.word	0x0002388d
   1c918:	200213c0 	.word	0x200213c0
   1c91c:	20021398 	.word	0x20021398
   1c920:	000238a5 	.word	0x000238a5
   1c924:	000238bc 	.word	0x000238bc

0001c928 <pend>:
{
   1c928:	b570      	push	{r4, r5, r6, lr}
   1c92a:	4604      	mov	r4, r0
   1c92c:	460d      	mov	r5, r1
   1c92e:	4616      	mov	r6, r2
	z_remove_thread_from_ready_q(thread);
   1c930:	f7ff ff9e 	bl	1c870 <z_remove_thread_from_ready_q>
	thread->base.thread_state |= _THREAD_PENDING;
   1c934:	7b63      	ldrb	r3, [r4, #13]
   1c936:	f043 0302 	orr.w	r3, r3, #2
   1c93a:	7363      	strb	r3, [r4, #13]
	if (wait_q != NULL) {
   1c93c:	b1fd      	cbz	r5, 1c97e <pend+0x56>
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   1c93e:	4b2b      	ldr	r3, [pc, #172]	; (1c9ec <pend+0xc4>)
		thread->base.pended_on = wait_q;
   1c940:	60a5      	str	r5, [r4, #8]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   1c942:	429c      	cmp	r4, r3
   1c944:	d10b      	bne.n	1c95e <pend+0x36>
   1c946:	492a      	ldr	r1, [pc, #168]	; (1c9f0 <pend+0xc8>)
   1c948:	482a      	ldr	r0, [pc, #168]	; (1c9f4 <pend+0xcc>)
   1c94a:	f240 3302 	movw	r3, #770	; 0x302
   1c94e:	4a2a      	ldr	r2, [pc, #168]	; (1c9f8 <pend+0xd0>)
   1c950:	f003 fa43 	bl	1fdda <printk>
   1c954:	f240 3102 	movw	r1, #770	; 0x302
   1c958:	4827      	ldr	r0, [pc, #156]	; (1c9f8 <pend+0xd0>)
   1c95a:	f003 fa84 	bl	1fe66 <assert_post_action>
	return list->head == list;
   1c95e:	682b      	ldr	r3, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1c960:	429d      	cmp	r5, r3
   1c962:	d03b      	beq.n	1c9dc <pend+0xb4>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   1c964:	2b00      	cmp	r3, #0
   1c966:	d039      	beq.n	1c9dc <pend+0xb4>
	if (thread_1->base.prio < thread_2->base.prio) {
   1c968:	f994 200e 	ldrsb.w	r2, [r4, #14]
   1c96c:	f993 100e 	ldrsb.w	r1, [r3, #14]
   1c970:	4291      	cmp	r1, r2
   1c972:	dd2d      	ble.n	1c9d0 <pend+0xa8>
	node->prev = successor->prev;
   1c974:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   1c976:	e9c4 3200 	strd	r3, r2, [r4]
	successor->prev->next = node;
   1c97a:	6014      	str	r4, [r2, #0]
	successor->prev = node;
   1c97c:	605c      	str	r4, [r3, #4]
	if (timeout != K_FOREVER) {
   1c97e:	1c73      	adds	r3, r6, #1
   1c980:	d033      	beq.n	1c9ea <pend+0xc2>
		__ASSERT(timeout >= 0,
   1c982:	2e00      	cmp	r6, #0
   1c984:	da0e      	bge.n	1c9a4 <pend+0x7c>
   1c986:	491d      	ldr	r1, [pc, #116]	; (1c9fc <pend+0xd4>)
   1c988:	f44f 73fb 	mov.w	r3, #502	; 0x1f6
   1c98c:	4a1a      	ldr	r2, [pc, #104]	; (1c9f8 <pend+0xd0>)
   1c98e:	4819      	ldr	r0, [pc, #100]	; (1c9f4 <pend+0xcc>)
   1c990:	f003 fa23 	bl	1fdda <printk>
   1c994:	481a      	ldr	r0, [pc, #104]	; (1ca00 <pend+0xd8>)
   1c996:	f003 fa20 	bl	1fdda <printk>
   1c99a:	f44f 71fb 	mov.w	r1, #502	; 0x1f6
   1c99e:	4816      	ldr	r0, [pc, #88]	; (1c9f8 <pend+0xd0>)
   1c9a0:	f003 fa61 	bl	1fe66 <assert_post_action>
   1c9a4:	f44f 4500 	mov.w	r5, #32768	; 0x8000
   1c9a8:	f240 30e7 	movw	r0, #999	; 0x3e7
   1c9ac:	2100      	movs	r1, #0
   1c9ae:	ea26 76e6 	bic.w	r6, r6, r6, asr #31
   1c9b2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   1c9b6:	fbc5 0106 	smlal	r0, r1, r5, r6
   1c9ba:	2300      	movs	r3, #0
   1c9bc:	f7ef fdfc 	bl	c5b8 <__aeabi_uldivmod>
	z_add_timeout(&th->base.timeout, z_thread_timeout, ticks);
   1c9c0:	4910      	ldr	r1, [pc, #64]	; (1ca04 <pend+0xdc>)
   1c9c2:	1c42      	adds	r2, r0, #1
   1c9c4:	f104 0018 	add.w	r0, r4, #24
}
   1c9c8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   1c9cc:	f000 be5e 	b.w	1d68c <z_add_timeout>
	return (node == list->tail) ? NULL : node->next;
   1c9d0:	6869      	ldr	r1, [r5, #4]
   1c9d2:	428b      	cmp	r3, r1
   1c9d4:	d002      	beq.n	1c9dc <pend+0xb4>
   1c9d6:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   1c9d8:	2b00      	cmp	r3, #0
   1c9da:	d1c7      	bne.n	1c96c <pend+0x44>
	node->prev = list->tail;
   1c9dc:	686b      	ldr	r3, [r5, #4]
	node->next = list;
   1c9de:	6025      	str	r5, [r4, #0]
	node->prev = list->tail;
   1c9e0:	6063      	str	r3, [r4, #4]
	list->tail->next = node;
   1c9e2:	686b      	ldr	r3, [r5, #4]
   1c9e4:	601c      	str	r4, [r3, #0]
	list->tail = node;
   1c9e6:	606c      	str	r4, [r5, #4]
   1c9e8:	e7c9      	b.n	1c97e <pend+0x56>
}
   1c9ea:	bd70      	pop	{r4, r5, r6, pc}
   1c9ec:	20020a08 	.word	0x20020a08
   1c9f0:	0002525f 	.word	0x0002525f
   1c9f4:	00023451 	.word	0x00023451
   1c9f8:	00025207 	.word	0x00025207
   1c9fc:	000251d1 	.word	0x000251d1
   1ca00:	000251de 	.word	0x000251de
   1ca04:	0001c449 	.word	0x0001c449

0001ca08 <z_pend_curr_irqlock>:
{
   1ca08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1ca0a:	4606      	mov	r6, r0
	pend(_current, wait_q, timeout);
   1ca0c:	4d22      	ldr	r5, [pc, #136]	; (1ca98 <z_pend_curr_irqlock+0x90>)
	pending_current = _current;
   1ca0e:	4c23      	ldr	r4, [pc, #140]	; (1ca9c <z_pend_curr_irqlock+0x94>)
	pend(_current, wait_q, timeout);
   1ca10:	68a8      	ldr	r0, [r5, #8]
   1ca12:	f7ff ff89 	bl	1c928 <pend>
	pending_current = _current;
   1ca16:	68ab      	ldr	r3, [r5, #8]
   1ca18:	4630      	mov	r0, r6
   1ca1a:	6023      	str	r3, [r4, #0]
   1ca1c:	f7f2 face 	bl	efbc <arch_swap>
   1ca20:	4606      	mov	r6, r0
	__asm__ volatile(
   1ca22:	f04f 0320 	mov.w	r3, #32
   1ca26:	f3ef 8711 	mrs	r7, BASEPRI
   1ca2a:	f383 8811 	msr	BASEPRI, r3
   1ca2e:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1ca32:	481b      	ldr	r0, [pc, #108]	; (1caa0 <z_pend_curr_irqlock+0x98>)
   1ca34:	f000 fc1c 	bl	1d270 <z_spin_lock_valid>
   1ca38:	b968      	cbnz	r0, 1ca56 <z_pend_curr_irqlock+0x4e>
   1ca3a:	234a      	movs	r3, #74	; 0x4a
   1ca3c:	4a19      	ldr	r2, [pc, #100]	; (1caa4 <z_pend_curr_irqlock+0x9c>)
   1ca3e:	491a      	ldr	r1, [pc, #104]	; (1caa8 <z_pend_curr_irqlock+0xa0>)
   1ca40:	481a      	ldr	r0, [pc, #104]	; (1caac <z_pend_curr_irqlock+0xa4>)
   1ca42:	f003 f9ca 	bl	1fdda <printk>
   1ca46:	4916      	ldr	r1, [pc, #88]	; (1caa0 <z_pend_curr_irqlock+0x98>)
   1ca48:	4819      	ldr	r0, [pc, #100]	; (1cab0 <z_pend_curr_irqlock+0xa8>)
   1ca4a:	f003 f9c6 	bl	1fdda <printk>
   1ca4e:	214a      	movs	r1, #74	; 0x4a
   1ca50:	4814      	ldr	r0, [pc, #80]	; (1caa4 <z_pend_curr_irqlock+0x9c>)
   1ca52:	f003 fa08 	bl	1fe66 <assert_post_action>
	z_spin_lock_set_owner(l);
   1ca56:	4812      	ldr	r0, [pc, #72]	; (1caa0 <z_pend_curr_irqlock+0x98>)
   1ca58:	f000 fc28 	bl	1d2ac <z_spin_lock_set_owner>
		if (pending_current == _current) {
   1ca5c:	6823      	ldr	r3, [r4, #0]
   1ca5e:	68aa      	ldr	r2, [r5, #8]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1ca60:	480f      	ldr	r0, [pc, #60]	; (1caa0 <z_pend_curr_irqlock+0x98>)
   1ca62:	429a      	cmp	r2, r3
			pending_current = NULL;
   1ca64:	bf04      	itt	eq
   1ca66:	2300      	moveq	r3, #0
   1ca68:	6023      	streq	r3, [r4, #0]
   1ca6a:	f000 fc0f 	bl	1d28c <z_spin_unlock_valid>
   1ca6e:	b968      	cbnz	r0, 1ca8c <z_pend_curr_irqlock+0x84>
   1ca70:	235d      	movs	r3, #93	; 0x5d
   1ca72:	4a0c      	ldr	r2, [pc, #48]	; (1caa4 <z_pend_curr_irqlock+0x9c>)
   1ca74:	490f      	ldr	r1, [pc, #60]	; (1cab4 <z_pend_curr_irqlock+0xac>)
   1ca76:	480d      	ldr	r0, [pc, #52]	; (1caac <z_pend_curr_irqlock+0xa4>)
   1ca78:	f003 f9af 	bl	1fdda <printk>
   1ca7c:	4908      	ldr	r1, [pc, #32]	; (1caa0 <z_pend_curr_irqlock+0x98>)
   1ca7e:	480e      	ldr	r0, [pc, #56]	; (1cab8 <z_pend_curr_irqlock+0xb0>)
   1ca80:	f003 f9ab 	bl	1fdda <printk>
   1ca84:	215d      	movs	r1, #93	; 0x5d
   1ca86:	4807      	ldr	r0, [pc, #28]	; (1caa4 <z_pend_curr_irqlock+0x9c>)
   1ca88:	f003 f9ed 	bl	1fe66 <assert_post_action>
	__asm__ volatile(
   1ca8c:	f387 8811 	msr	BASEPRI, r7
   1ca90:	f3bf 8f6f 	isb	sy
}
   1ca94:	4630      	mov	r0, r6
   1ca96:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1ca98:	20021398 	.word	0x20021398
   1ca9c:	200213cc 	.word	0x200213cc
   1caa0:	200213d0 	.word	0x200213d0
   1caa4:	00023852 	.word	0x00023852
   1caa8:	00023878 	.word	0x00023878
   1caac:	00023451 	.word	0x00023451
   1cab0:	0002388d 	.word	0x0002388d
   1cab4:	000238a5 	.word	0x000238a5
   1cab8:	000238bc 	.word	0x000238bc

0001cabc <z_pend_curr>:
{
   1cabc:	b538      	push	{r3, r4, r5, lr}
   1cabe:	4604      	mov	r4, r0
   1cac0:	460d      	mov	r5, r1
   1cac2:	4611      	mov	r1, r2
	pending_current = _current;
   1cac4:	4a0e      	ldr	r2, [pc, #56]	; (1cb00 <z_pend_curr+0x44>)
   1cac6:	6890      	ldr	r0, [r2, #8]
   1cac8:	4a0e      	ldr	r2, [pc, #56]	; (1cb04 <z_pend_curr+0x48>)
   1caca:	6010      	str	r0, [r2, #0]
	pend(_current, wait_q, timeout);
   1cacc:	461a      	mov	r2, r3
   1cace:	f7ff ff2b 	bl	1c928 <pend>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1cad2:	4620      	mov	r0, r4
   1cad4:	f000 fbda 	bl	1d28c <z_spin_unlock_valid>
   1cad8:	b968      	cbnz	r0, 1caf6 <z_pend_curr+0x3a>
   1cada:	2374      	movs	r3, #116	; 0x74
   1cadc:	4a0a      	ldr	r2, [pc, #40]	; (1cb08 <z_pend_curr+0x4c>)
   1cade:	490b      	ldr	r1, [pc, #44]	; (1cb0c <z_pend_curr+0x50>)
   1cae0:	480b      	ldr	r0, [pc, #44]	; (1cb10 <z_pend_curr+0x54>)
   1cae2:	f003 f97a 	bl	1fdda <printk>
   1cae6:	4621      	mov	r1, r4
   1cae8:	480a      	ldr	r0, [pc, #40]	; (1cb14 <z_pend_curr+0x58>)
   1caea:	f003 f976 	bl	1fdda <printk>
   1caee:	2174      	movs	r1, #116	; 0x74
   1caf0:	4805      	ldr	r0, [pc, #20]	; (1cb08 <z_pend_curr+0x4c>)
   1caf2:	f003 f9b8 	bl	1fe66 <assert_post_action>
   1caf6:	4628      	mov	r0, r5
}
   1caf8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   1cafc:	f7f2 ba5e 	b.w	efbc <arch_swap>
   1cb00:	20021398 	.word	0x20021398
   1cb04:	200213cc 	.word	0x200213cc
   1cb08:	00023852 	.word	0x00023852
   1cb0c:	000238a5 	.word	0x000238a5
   1cb10:	00023451 	.word	0x00023451
   1cb14:	000238bc 	.word	0x000238bc

0001cb18 <z_set_prio>:
{
   1cb18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1cb1a:	4604      	mov	r4, r0
   1cb1c:	460d      	mov	r5, r1
	__asm__ volatile(
   1cb1e:	f04f 0320 	mov.w	r3, #32
   1cb22:	f3ef 8611 	mrs	r6, BASEPRI
   1cb26:	f383 8811 	msr	BASEPRI, r3
   1cb2a:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1cb2e:	4835      	ldr	r0, [pc, #212]	; (1cc04 <z_set_prio+0xec>)
   1cb30:	f000 fb9e 	bl	1d270 <z_spin_lock_valid>
   1cb34:	b968      	cbnz	r0, 1cb52 <z_set_prio+0x3a>
   1cb36:	234a      	movs	r3, #74	; 0x4a
   1cb38:	4a33      	ldr	r2, [pc, #204]	; (1cc08 <z_set_prio+0xf0>)
   1cb3a:	4934      	ldr	r1, [pc, #208]	; (1cc0c <z_set_prio+0xf4>)
   1cb3c:	4834      	ldr	r0, [pc, #208]	; (1cc10 <z_set_prio+0xf8>)
   1cb3e:	f003 f94c 	bl	1fdda <printk>
   1cb42:	4930      	ldr	r1, [pc, #192]	; (1cc04 <z_set_prio+0xec>)
   1cb44:	4833      	ldr	r0, [pc, #204]	; (1cc14 <z_set_prio+0xfc>)
   1cb46:	f003 f948 	bl	1fdda <printk>
   1cb4a:	214a      	movs	r1, #74	; 0x4a
   1cb4c:	482e      	ldr	r0, [pc, #184]	; (1cc08 <z_set_prio+0xf0>)
   1cb4e:	f003 f98a 	bl	1fe66 <assert_post_action>
	z_spin_lock_set_owner(l);
   1cb52:	482c      	ldr	r0, [pc, #176]	; (1cc04 <z_set_prio+0xec>)
   1cb54:	f000 fbaa 	bl	1d2ac <z_spin_lock_set_owner>
		need_sched = z_is_thread_ready(thread);
   1cb58:	4620      	mov	r0, r4
   1cb5a:	f004 fdf6 	bl	2174a <z_is_thread_ready>
		if (need_sched) {
   1cb5e:	b26d      	sxtb	r5, r5
   1cb60:	4607      	mov	r7, r0
   1cb62:	2800      	cmp	r0, #0
   1cb64:	d04c      	beq.n	1cc00 <z_set_prio+0xe8>
				_priq_run_remove(&_kernel.ready_q.runq, thread);
   1cb66:	4621      	mov	r1, r4
   1cb68:	482b      	ldr	r0, [pc, #172]	; (1cc18 <z_set_prio+0x100>)
   1cb6a:	f7ff fab7 	bl	1c0dc <z_priq_dumb_remove>
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   1cb6e:	4b2b      	ldr	r3, [pc, #172]	; (1cc1c <z_set_prio+0x104>)
				thread->base.prio = prio;
   1cb70:	73a5      	strb	r5, [r4, #14]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   1cb72:	429c      	cmp	r4, r3
   1cb74:	d10b      	bne.n	1cb8e <z_set_prio+0x76>
   1cb76:	492a      	ldr	r1, [pc, #168]	; (1cc20 <z_set_prio+0x108>)
   1cb78:	4825      	ldr	r0, [pc, #148]	; (1cc10 <z_set_prio+0xf8>)
   1cb7a:	f240 3302 	movw	r3, #770	; 0x302
   1cb7e:	4a29      	ldr	r2, [pc, #164]	; (1cc24 <z_set_prio+0x10c>)
   1cb80:	f003 f92b 	bl	1fdda <printk>
   1cb84:	f240 3102 	movw	r1, #770	; 0x302
   1cb88:	4826      	ldr	r0, [pc, #152]	; (1cc24 <z_set_prio+0x10c>)
   1cb8a:	f003 f96c 	bl	1fe66 <assert_post_action>
	return list->head == list;
   1cb8e:	4a26      	ldr	r2, [pc, #152]	; (1cc28 <z_set_prio+0x110>)
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1cb90:	f102 0128 	add.w	r1, r2, #40	; 0x28
   1cb94:	e9d2 300a 	ldrd	r3, r0, [r2, #40]	; 0x28
   1cb98:	428b      	cmp	r3, r1
   1cb9a:	d02b      	beq.n	1cbf4 <z_set_prio+0xdc>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   1cb9c:	b353      	cbz	r3, 1cbf4 <z_set_prio+0xdc>
	if (thread_1->base.prio < thread_2->base.prio) {
   1cb9e:	f994 500e 	ldrsb.w	r5, [r4, #14]
   1cba2:	f993 c00e 	ldrsb.w	ip, [r3, #14]
   1cba6:	45ac      	cmp	ip, r5
   1cba8:	dd1f      	ble.n	1cbea <z_set_prio+0xd2>
	node->prev = successor->prev;
   1cbaa:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   1cbac:	e9c4 3200 	strd	r3, r2, [r4]
	successor->prev->next = node;
   1cbb0:	6014      	str	r4, [r2, #0]
	successor->prev = node;
   1cbb2:	605c      	str	r4, [r3, #4]
			update_cache(1);
   1cbb4:	2001      	movs	r0, #1
   1cbb6:	f7ff fb15 	bl	1c1e4 <update_cache>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1cbba:	4812      	ldr	r0, [pc, #72]	; (1cc04 <z_set_prio+0xec>)
   1cbbc:	f000 fb66 	bl	1d28c <z_spin_unlock_valid>
   1cbc0:	b968      	cbnz	r0, 1cbde <z_set_prio+0xc6>
   1cbc2:	235d      	movs	r3, #93	; 0x5d
   1cbc4:	4a10      	ldr	r2, [pc, #64]	; (1cc08 <z_set_prio+0xf0>)
   1cbc6:	4919      	ldr	r1, [pc, #100]	; (1cc2c <z_set_prio+0x114>)
   1cbc8:	4811      	ldr	r0, [pc, #68]	; (1cc10 <z_set_prio+0xf8>)
   1cbca:	f003 f906 	bl	1fdda <printk>
   1cbce:	490d      	ldr	r1, [pc, #52]	; (1cc04 <z_set_prio+0xec>)
   1cbd0:	4817      	ldr	r0, [pc, #92]	; (1cc30 <z_set_prio+0x118>)
   1cbd2:	f003 f902 	bl	1fdda <printk>
   1cbd6:	215d      	movs	r1, #93	; 0x5d
   1cbd8:	480b      	ldr	r0, [pc, #44]	; (1cc08 <z_set_prio+0xf0>)
   1cbda:	f003 f944 	bl	1fe66 <assert_post_action>
	__asm__ volatile(
   1cbde:	f386 8811 	msr	BASEPRI, r6
   1cbe2:	f3bf 8f6f 	isb	sy
}
   1cbe6:	4638      	mov	r0, r7
   1cbe8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return (node == list->tail) ? NULL : node->next;
   1cbea:	4298      	cmp	r0, r3
   1cbec:	d002      	beq.n	1cbf4 <z_set_prio+0xdc>
   1cbee:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   1cbf0:	2b00      	cmp	r3, #0
   1cbf2:	d1d6      	bne.n	1cba2 <z_set_prio+0x8a>
	node->prev = list->tail;
   1cbf4:	e9c4 1000 	strd	r1, r0, [r4]
	list->tail->next = node;
   1cbf8:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
   1cbfa:	601c      	str	r4, [r3, #0]
	list->tail = node;
   1cbfc:	62d4      	str	r4, [r2, #44]	; 0x2c
   1cbfe:	e7d9      	b.n	1cbb4 <z_set_prio+0x9c>
			thread->base.prio = prio;
   1cc00:	73a5      	strb	r5, [r4, #14]
   1cc02:	e7da      	b.n	1cbba <z_set_prio+0xa2>
   1cc04:	200213d0 	.word	0x200213d0
   1cc08:	00023852 	.word	0x00023852
   1cc0c:	00023878 	.word	0x00023878
   1cc10:	00023451 	.word	0x00023451
   1cc14:	0002388d 	.word	0x0002388d
   1cc18:	200213c0 	.word	0x200213c0
   1cc1c:	20020a08 	.word	0x20020a08
   1cc20:	0002525f 	.word	0x0002525f
   1cc24:	00025207 	.word	0x00025207
   1cc28:	20021398 	.word	0x20021398
   1cc2c:	000238a5 	.word	0x000238a5
   1cc30:	000238bc 	.word	0x000238bc

0001cc34 <z_unpend_first_thread>:
{
   1cc34:	b538      	push	{r3, r4, r5, lr}
   1cc36:	4604      	mov	r4, r0
	__asm__ volatile(
   1cc38:	f04f 0320 	mov.w	r3, #32
   1cc3c:	f3ef 8511 	mrs	r5, BASEPRI
   1cc40:	f383 8811 	msr	BASEPRI, r3
   1cc44:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1cc48:	483b      	ldr	r0, [pc, #236]	; (1cd38 <z_unpend_first_thread+0x104>)
   1cc4a:	f000 fb11 	bl	1d270 <z_spin_lock_valid>
   1cc4e:	b968      	cbnz	r0, 1cc6c <z_unpend_first_thread+0x38>
   1cc50:	234a      	movs	r3, #74	; 0x4a
   1cc52:	4a3a      	ldr	r2, [pc, #232]	; (1cd3c <z_unpend_first_thread+0x108>)
   1cc54:	493a      	ldr	r1, [pc, #232]	; (1cd40 <z_unpend_first_thread+0x10c>)
   1cc56:	483b      	ldr	r0, [pc, #236]	; (1cd44 <z_unpend_first_thread+0x110>)
   1cc58:	f003 f8bf 	bl	1fdda <printk>
   1cc5c:	4936      	ldr	r1, [pc, #216]	; (1cd38 <z_unpend_first_thread+0x104>)
   1cc5e:	483a      	ldr	r0, [pc, #232]	; (1cd48 <z_unpend_first_thread+0x114>)
   1cc60:	f003 f8bb 	bl	1fdda <printk>
   1cc64:	214a      	movs	r1, #74	; 0x4a
   1cc66:	4835      	ldr	r0, [pc, #212]	; (1cd3c <z_unpend_first_thread+0x108>)
   1cc68:	f003 f8fd 	bl	1fe66 <assert_post_action>
	z_spin_lock_set_owner(l);
   1cc6c:	4832      	ldr	r0, [pc, #200]	; (1cd38 <z_unpend_first_thread+0x104>)
   1cc6e:	f000 fb1d 	bl	1d2ac <z_spin_lock_set_owner>
		ret = _priq_wait_best(&wait_q->waitq);
   1cc72:	4620      	mov	r0, r4
   1cc74:	f004 fd91 	bl	2179a <z_priq_dumb_best>
   1cc78:	4604      	mov	r4, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1cc7a:	482f      	ldr	r0, [pc, #188]	; (1cd38 <z_unpend_first_thread+0x104>)
   1cc7c:	f000 fb06 	bl	1d28c <z_spin_unlock_valid>
   1cc80:	b968      	cbnz	r0, 1cc9e <z_unpend_first_thread+0x6a>
   1cc82:	235d      	movs	r3, #93	; 0x5d
   1cc84:	4a2d      	ldr	r2, [pc, #180]	; (1cd3c <z_unpend_first_thread+0x108>)
   1cc86:	4931      	ldr	r1, [pc, #196]	; (1cd4c <z_unpend_first_thread+0x118>)
   1cc88:	482e      	ldr	r0, [pc, #184]	; (1cd44 <z_unpend_first_thread+0x110>)
   1cc8a:	f003 f8a6 	bl	1fdda <printk>
   1cc8e:	492a      	ldr	r1, [pc, #168]	; (1cd38 <z_unpend_first_thread+0x104>)
   1cc90:	482f      	ldr	r0, [pc, #188]	; (1cd50 <z_unpend_first_thread+0x11c>)
   1cc92:	f003 f8a2 	bl	1fdda <printk>
   1cc96:	215d      	movs	r1, #93	; 0x5d
   1cc98:	4828      	ldr	r0, [pc, #160]	; (1cd3c <z_unpend_first_thread+0x108>)
   1cc9a:	f003 f8e4 	bl	1fe66 <assert_post_action>
	__asm__ volatile(
   1cc9e:	f385 8811 	msr	BASEPRI, r5
   1cca2:	f3bf 8f6f 	isb	sy

static inline struct k_thread *z_unpend1_no_timeout(_wait_q_t *wait_q)
{
	struct k_thread *thread = z_find_first_thread_to_unpend(wait_q, NULL);

	if (thread != NULL) {
   1cca6:	2c00      	cmp	r4, #0
   1cca8:	d043      	beq.n	1cd32 <z_unpend_first_thread+0xfe>
	__asm__ volatile(
   1ccaa:	f04f 0320 	mov.w	r3, #32
   1ccae:	f3ef 8511 	mrs	r5, BASEPRI
   1ccb2:	f383 8811 	msr	BASEPRI, r3
   1ccb6:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1ccba:	481f      	ldr	r0, [pc, #124]	; (1cd38 <z_unpend_first_thread+0x104>)
   1ccbc:	f000 fad8 	bl	1d270 <z_spin_lock_valid>
   1ccc0:	b968      	cbnz	r0, 1ccde <z_unpend_first_thread+0xaa>
   1ccc2:	234a      	movs	r3, #74	; 0x4a
   1ccc4:	4a1d      	ldr	r2, [pc, #116]	; (1cd3c <z_unpend_first_thread+0x108>)
   1ccc6:	491e      	ldr	r1, [pc, #120]	; (1cd40 <z_unpend_first_thread+0x10c>)
   1ccc8:	481e      	ldr	r0, [pc, #120]	; (1cd44 <z_unpend_first_thread+0x110>)
   1ccca:	f003 f886 	bl	1fdda <printk>
   1ccce:	491a      	ldr	r1, [pc, #104]	; (1cd38 <z_unpend_first_thread+0x104>)
   1ccd0:	481d      	ldr	r0, [pc, #116]	; (1cd48 <z_unpend_first_thread+0x114>)
   1ccd2:	f003 f882 	bl	1fdda <printk>
   1ccd6:	214a      	movs	r1, #74	; 0x4a
   1ccd8:	4818      	ldr	r0, [pc, #96]	; (1cd3c <z_unpend_first_thread+0x108>)
   1ccda:	f003 f8c4 	bl	1fe66 <assert_post_action>
	z_spin_lock_set_owner(l);
   1ccde:	4816      	ldr	r0, [pc, #88]	; (1cd38 <z_unpend_first_thread+0x104>)
   1cce0:	f000 fae4 	bl	1d2ac <z_spin_lock_set_owner>
		_priq_wait_remove(&pended_on(thread)->waitq, thread);
   1cce4:	f104 0008 	add.w	r0, r4, #8
   1cce8:	f7ff f8b6 	bl	1be58 <pended_on.isra.17>
   1ccec:	4621      	mov	r1, r4
   1ccee:	f7ff f9f5 	bl	1c0dc <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
   1ccf2:	7b63      	ldrb	r3, [r4, #13]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1ccf4:	4810      	ldr	r0, [pc, #64]	; (1cd38 <z_unpend_first_thread+0x104>)
   1ccf6:	f023 0302 	bic.w	r3, r3, #2
   1ccfa:	7363      	strb	r3, [r4, #13]
   1ccfc:	f000 fac6 	bl	1d28c <z_spin_unlock_valid>
   1cd00:	b968      	cbnz	r0, 1cd1e <z_unpend_first_thread+0xea>
   1cd02:	235d      	movs	r3, #93	; 0x5d
   1cd04:	4a0d      	ldr	r2, [pc, #52]	; (1cd3c <z_unpend_first_thread+0x108>)
   1cd06:	4911      	ldr	r1, [pc, #68]	; (1cd4c <z_unpend_first_thread+0x118>)
   1cd08:	480e      	ldr	r0, [pc, #56]	; (1cd44 <z_unpend_first_thread+0x110>)
   1cd0a:	f003 f866 	bl	1fdda <printk>
   1cd0e:	490a      	ldr	r1, [pc, #40]	; (1cd38 <z_unpend_first_thread+0x104>)
   1cd10:	480f      	ldr	r0, [pc, #60]	; (1cd50 <z_unpend_first_thread+0x11c>)
   1cd12:	f003 f862 	bl	1fdda <printk>
   1cd16:	215d      	movs	r1, #93	; 0x5d
   1cd18:	4808      	ldr	r0, [pc, #32]	; (1cd3c <z_unpend_first_thread+0x108>)
   1cd1a:	f003 f8a4 	bl	1fe66 <assert_post_action>
	__asm__ volatile(
   1cd1e:	f385 8811 	msr	BASEPRI, r5
   1cd22:	f3bf 8f6f 	isb	sy
	thread->base.pended_on = NULL;
   1cd26:	2300      	movs	r3, #0
	return z_abort_timeout(&thread->base.timeout);
   1cd28:	f104 0018 	add.w	r0, r4, #24
   1cd2c:	60a3      	str	r3, [r4, #8]
   1cd2e:	f000 fd53 	bl	1d7d8 <z_abort_timeout>
}
   1cd32:	4620      	mov	r0, r4
   1cd34:	bd38      	pop	{r3, r4, r5, pc}
   1cd36:	bf00      	nop
   1cd38:	200213d0 	.word	0x200213d0
   1cd3c:	00023852 	.word	0x00023852
   1cd40:	00023878 	.word	0x00023878
   1cd44:	00023451 	.word	0x00023451
   1cd48:	0002388d 	.word	0x0002388d
   1cd4c:	000238a5 	.word	0x000238a5
   1cd50:	000238bc 	.word	0x000238bc

0001cd54 <z_sched_init>:
		sys_dlist_init(&_kernel.ready_q.runq.queues[i]);
	}
#endif

#ifdef CONFIG_TIMESLICING
	k_sched_time_slice_set(CONFIG_TIMESLICE_SIZE,
   1cd54:	2100      	movs	r1, #0
	list->head = (sys_dnode_t *)list;
   1cd56:	4b04      	ldr	r3, [pc, #16]	; (1cd68 <z_sched_init+0x14>)
   1cd58:	4608      	mov	r0, r1
   1cd5a:	f103 0228 	add.w	r2, r3, #40	; 0x28
	list->tail = (sys_dnode_t *)list;
   1cd5e:	e9c3 220a 	strd	r2, r2, [r3, #40]	; 0x28
   1cd62:	f7ff b8a7 	b.w	1beb4 <k_sched_time_slice_set>
   1cd66:	bf00      	nop
   1cd68:	20021398 	.word	0x20021398

0001cd6c <z_impl_k_yield>:
#include <syscalls/k_thread_deadline_set_mrsh.c>
#endif
#endif

void z_impl_k_yield(void)
{
   1cd6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1cd6e:	f3ef 8305 	mrs	r3, IPSR
	__ASSERT(!arch_is_in_isr(), "");
   1cd72:	b173      	cbz	r3, 1cd92 <z_impl_k_yield+0x26>
   1cd74:	4945      	ldr	r1, [pc, #276]	; (1ce8c <z_impl_k_yield+0x120>)
   1cd76:	f240 430d 	movw	r3, #1037	; 0x40d
   1cd7a:	4a45      	ldr	r2, [pc, #276]	; (1ce90 <z_impl_k_yield+0x124>)
   1cd7c:	4845      	ldr	r0, [pc, #276]	; (1ce94 <z_impl_k_yield+0x128>)
   1cd7e:	f003 f82c 	bl	1fdda <printk>
   1cd82:	4845      	ldr	r0, [pc, #276]	; (1ce98 <z_impl_k_yield+0x12c>)
   1cd84:	f003 f829 	bl	1fdda <printk>
   1cd88:	f240 410d 	movw	r1, #1037	; 0x40d
   1cd8c:	4840      	ldr	r0, [pc, #256]	; (1ce90 <z_impl_k_yield+0x124>)
   1cd8e:	f003 f86a 	bl	1fe66 <assert_post_action>

	if (!z_is_idle_thread_object(_current)) {
   1cd92:	4c42      	ldr	r4, [pc, #264]	; (1ce9c <z_impl_k_yield+0x130>)
   1cd94:	4e42      	ldr	r6, [pc, #264]	; (1cea0 <z_impl_k_yield+0x134>)
   1cd96:	68a2      	ldr	r2, [r4, #8]
   1cd98:	42b2      	cmp	r2, r6
   1cd9a:	d05f      	beq.n	1ce5c <z_impl_k_yield+0xf0>
	__asm__ volatile(
   1cd9c:	f04f 0320 	mov.w	r3, #32
   1cda0:	f3ef 8711 	mrs	r7, BASEPRI
   1cda4:	f383 8811 	msr	BASEPRI, r3
   1cda8:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1cdac:	483d      	ldr	r0, [pc, #244]	; (1cea4 <z_impl_k_yield+0x138>)
   1cdae:	f000 fa5f 	bl	1d270 <z_spin_lock_valid>
   1cdb2:	b968      	cbnz	r0, 1cdd0 <z_impl_k_yield+0x64>
   1cdb4:	234a      	movs	r3, #74	; 0x4a
   1cdb6:	4a3c      	ldr	r2, [pc, #240]	; (1cea8 <z_impl_k_yield+0x13c>)
   1cdb8:	493c      	ldr	r1, [pc, #240]	; (1ceac <z_impl_k_yield+0x140>)
   1cdba:	4836      	ldr	r0, [pc, #216]	; (1ce94 <z_impl_k_yield+0x128>)
   1cdbc:	f003 f80d 	bl	1fdda <printk>
   1cdc0:	4938      	ldr	r1, [pc, #224]	; (1cea4 <z_impl_k_yield+0x138>)
   1cdc2:	483b      	ldr	r0, [pc, #236]	; (1ceb0 <z_impl_k_yield+0x144>)
   1cdc4:	f003 f809 	bl	1fdda <printk>
   1cdc8:	214a      	movs	r1, #74	; 0x4a
   1cdca:	4837      	ldr	r0, [pc, #220]	; (1cea8 <z_impl_k_yield+0x13c>)
   1cdcc:	f003 f84b 	bl	1fe66 <assert_post_action>
	z_spin_lock_set_owner(l);
   1cdd0:	4834      	ldr	r0, [pc, #208]	; (1cea4 <z_impl_k_yield+0x138>)
   1cdd2:	f000 fa6b 	bl	1d2ac <z_spin_lock_set_owner>
		LOCKED(&sched_spinlock) {
			if (!IS_ENABLED(CONFIG_SMP) ||
			    z_is_thread_queued(_current)) {
				_priq_run_remove(&_kernel.ready_q.runq,
   1cdd6:	68a1      	ldr	r1, [r4, #8]
   1cdd8:	4836      	ldr	r0, [pc, #216]	; (1ceb4 <z_impl_k_yield+0x148>)
   1cdda:	f7ff f97f 	bl	1c0dc <z_priq_dumb_remove>
						 _current);
			}
			_priq_run_add(&_kernel.ready_q.runq, _current);
   1cdde:	68a5      	ldr	r5, [r4, #8]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   1cde0:	42b5      	cmp	r5, r6
   1cde2:	d10b      	bne.n	1cdfc <z_impl_k_yield+0x90>
   1cde4:	4934      	ldr	r1, [pc, #208]	; (1ceb8 <z_impl_k_yield+0x14c>)
   1cde6:	482b      	ldr	r0, [pc, #172]	; (1ce94 <z_impl_k_yield+0x128>)
   1cde8:	f240 3302 	movw	r3, #770	; 0x302
   1cdec:	4a28      	ldr	r2, [pc, #160]	; (1ce90 <z_impl_k_yield+0x124>)
   1cdee:	f002 fff4 	bl	1fdda <printk>
   1cdf2:	f240 3102 	movw	r1, #770	; 0x302
   1cdf6:	4826      	ldr	r0, [pc, #152]	; (1ce90 <z_impl_k_yield+0x124>)
   1cdf8:	f003 f835 	bl	1fe66 <assert_post_action>
	return list->head == list;
   1cdfc:	e9d4 310a 	ldrd	r3, r1, [r4, #40]	; 0x28
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1ce00:	4a2c      	ldr	r2, [pc, #176]	; (1ceb4 <z_impl_k_yield+0x148>)
   1ce02:	4293      	cmp	r3, r2
   1ce04:	d03b      	beq.n	1ce7e <z_impl_k_yield+0x112>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   1ce06:	2b00      	cmp	r3, #0
   1ce08:	d039      	beq.n	1ce7e <z_impl_k_yield+0x112>
	if (thread_1->base.prio < thread_2->base.prio) {
   1ce0a:	f995 000e 	ldrsb.w	r0, [r5, #14]
   1ce0e:	f993 600e 	ldrsb.w	r6, [r3, #14]
   1ce12:	4286      	cmp	r6, r0
   1ce14:	dd2e      	ble.n	1ce74 <z_impl_k_yield+0x108>
	node->prev = successor->prev;
   1ce16:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   1ce18:	e9c5 3200 	strd	r3, r2, [r5]
	successor->prev->next = node;
   1ce1c:	6015      	str	r5, [r2, #0]
	successor->prev = node;
   1ce1e:	605d      	str	r5, [r3, #4]
			z_mark_thread_as_queued(_current);
   1ce20:	68a2      	ldr	r2, [r4, #8]
			update_cache(1);
   1ce22:	2001      	movs	r0, #1
	thread->base.thread_state |= states;
   1ce24:	7b53      	ldrb	r3, [r2, #13]
   1ce26:	f063 037f 	orn	r3, r3, #127	; 0x7f
   1ce2a:	7353      	strb	r3, [r2, #13]
   1ce2c:	f7ff f9da 	bl	1c1e4 <update_cache>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1ce30:	481c      	ldr	r0, [pc, #112]	; (1cea4 <z_impl_k_yield+0x138>)
   1ce32:	f000 fa2b 	bl	1d28c <z_spin_unlock_valid>
   1ce36:	b968      	cbnz	r0, 1ce54 <z_impl_k_yield+0xe8>
   1ce38:	235d      	movs	r3, #93	; 0x5d
   1ce3a:	4a1b      	ldr	r2, [pc, #108]	; (1cea8 <z_impl_k_yield+0x13c>)
   1ce3c:	491f      	ldr	r1, [pc, #124]	; (1cebc <z_impl_k_yield+0x150>)
   1ce3e:	4815      	ldr	r0, [pc, #84]	; (1ce94 <z_impl_k_yield+0x128>)
   1ce40:	f002 ffcb 	bl	1fdda <printk>
   1ce44:	4917      	ldr	r1, [pc, #92]	; (1cea4 <z_impl_k_yield+0x138>)
   1ce46:	481e      	ldr	r0, [pc, #120]	; (1cec0 <z_impl_k_yield+0x154>)
   1ce48:	f002 ffc7 	bl	1fdda <printk>
   1ce4c:	215d      	movs	r1, #93	; 0x5d
   1ce4e:	4816      	ldr	r0, [pc, #88]	; (1cea8 <z_impl_k_yield+0x13c>)
   1ce50:	f003 f809 	bl	1fe66 <assert_post_action>
	__asm__ volatile(
   1ce54:	f387 8811 	msr	BASEPRI, r7
   1ce58:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
   1ce5c:	f04f 0320 	mov.w	r3, #32
   1ce60:	f3ef 8011 	mrs	r0, BASEPRI
   1ce64:	f383 8811 	msr	BASEPRI, r3
   1ce68:	f3bf 8f6f 	isb	sy
		}
	}
	z_swap_unlocked();
}
   1ce6c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   1ce70:	f7f2 b8a4 	b.w	efbc <arch_swap>
	return (node == list->tail) ? NULL : node->next;
   1ce74:	4299      	cmp	r1, r3
   1ce76:	d002      	beq.n	1ce7e <z_impl_k_yield+0x112>
   1ce78:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   1ce7a:	2b00      	cmp	r3, #0
   1ce7c:	d1c7      	bne.n	1ce0e <z_impl_k_yield+0xa2>
	node->prev = list->tail;
   1ce7e:	e9c5 2100 	strd	r2, r1, [r5]
	list->tail->next = node;
   1ce82:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   1ce84:	601d      	str	r5, [r3, #0]
	list->tail = node;
   1ce86:	62e5      	str	r5, [r4, #44]	; 0x2c
   1ce88:	e7ca      	b.n	1ce20 <z_impl_k_yield+0xb4>
   1ce8a:	bf00      	nop
   1ce8c:	0002516f 	.word	0x0002516f
   1ce90:	00025207 	.word	0x00025207
   1ce94:	00023451 	.word	0x00023451
   1ce98:	000241f4 	.word	0x000241f4
   1ce9c:	20021398 	.word	0x20021398
   1cea0:	20020a08 	.word	0x20020a08
   1cea4:	200213d0 	.word	0x200213d0
   1cea8:	00023852 	.word	0x00023852
   1ceac:	00023878 	.word	0x00023878
   1ceb0:	0002388d 	.word	0x0002388d
   1ceb4:	200213c0 	.word	0x200213c0
   1ceb8:	0002525f 	.word	0x0002525f
   1cebc:	000238a5 	.word	0x000238a5
   1cec0:	000238bc 	.word	0x000238bc

0001cec4 <z_tick_sleep>:
}
#include <syscalls/k_yield_mrsh.c>
#endif

static s32_t z_tick_sleep(s32_t ticks)
{
   1cec4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   1cec6:	4604      	mov	r4, r0
   1cec8:	f3ef 8305 	mrs	r3, IPSR
#ifdef CONFIG_MULTITHREADING
	u32_t expected_wakeup_time;

	__ASSERT(!arch_is_in_isr(), "");
   1cecc:	b173      	cbz	r3, 1ceec <z_tick_sleep+0x28>
   1cece:	493b      	ldr	r1, [pc, #236]	; (1cfbc <z_tick_sleep+0xf8>)
   1ced0:	f240 432b 	movw	r3, #1067	; 0x42b
   1ced4:	4a3a      	ldr	r2, [pc, #232]	; (1cfc0 <z_tick_sleep+0xfc>)
   1ced6:	483b      	ldr	r0, [pc, #236]	; (1cfc4 <z_tick_sleep+0x100>)
   1ced8:	f002 ff7f 	bl	1fdda <printk>
   1cedc:	483a      	ldr	r0, [pc, #232]	; (1cfc8 <z_tick_sleep+0x104>)
   1cede:	f002 ff7c 	bl	1fdda <printk>
   1cee2:	f240 412b 	movw	r1, #1067	; 0x42b
   1cee6:	4836      	ldr	r0, [pc, #216]	; (1cfc0 <z_tick_sleep+0xfc>)
   1cee8:	f002 ffbd 	bl	1fe66 <assert_post_action>

	K_DEBUG("thread %p for %d ticks\n", _current, ticks);

	/* wait of 0 ms is treated as a 'yield' */
	if (ticks == 0) {
   1ceec:	b924      	cbnz	r4, 1cef8 <z_tick_sleep+0x34>
	z_impl_k_yield();
   1ceee:	f7ff ff3d 	bl	1cd6c <z_impl_k_yield>
		return ticks;
	}
#endif

	return 0;
}
   1cef2:	4620      	mov	r0, r4
   1cef4:	b003      	add	sp, #12
   1cef6:	bdf0      	pop	{r4, r5, r6, r7, pc}
	expected_wakeup_time = ticks + z_tick_get_32();
   1cef8:	f004 fc95 	bl	21826 <z_tick_get_32>
	struct k_spinlock local_lock = {};
   1cefc:	2300      	movs	r3, #0
	ticks += _TICK_ALIGN;
   1cefe:	1c66      	adds	r6, r4, #1
	expected_wakeup_time = ticks + z_tick_get_32();
   1cf00:	1834      	adds	r4, r6, r0
	struct k_spinlock local_lock = {};
   1cf02:	9301      	str	r3, [sp, #4]
   1cf04:	f04f 0320 	mov.w	r3, #32
   1cf08:	f3ef 8711 	mrs	r7, BASEPRI
   1cf0c:	f383 8811 	msr	BASEPRI, r3
   1cf10:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1cf14:	a801      	add	r0, sp, #4
   1cf16:	f000 f9ab 	bl	1d270 <z_spin_lock_valid>
   1cf1a:	b968      	cbnz	r0, 1cf38 <z_tick_sleep+0x74>
   1cf1c:	234a      	movs	r3, #74	; 0x4a
   1cf1e:	4a2b      	ldr	r2, [pc, #172]	; (1cfcc <z_tick_sleep+0x108>)
   1cf20:	492b      	ldr	r1, [pc, #172]	; (1cfd0 <z_tick_sleep+0x10c>)
   1cf22:	4828      	ldr	r0, [pc, #160]	; (1cfc4 <z_tick_sleep+0x100>)
   1cf24:	f002 ff59 	bl	1fdda <printk>
   1cf28:	a901      	add	r1, sp, #4
   1cf2a:	482a      	ldr	r0, [pc, #168]	; (1cfd4 <z_tick_sleep+0x110>)
   1cf2c:	f002 ff55 	bl	1fdda <printk>
   1cf30:	214a      	movs	r1, #74	; 0x4a
   1cf32:	4826      	ldr	r0, [pc, #152]	; (1cfcc <z_tick_sleep+0x108>)
   1cf34:	f002 ff97 	bl	1fe66 <assert_post_action>
	pending_current = _current;
   1cf38:	4d27      	ldr	r5, [pc, #156]	; (1cfd8 <z_tick_sleep+0x114>)
	z_spin_lock_set_owner(l);
   1cf3a:	a801      	add	r0, sp, #4
   1cf3c:	f000 f9b6 	bl	1d2ac <z_spin_lock_set_owner>
   1cf40:	4b26      	ldr	r3, [pc, #152]	; (1cfdc <z_tick_sleep+0x118>)
   1cf42:	68a8      	ldr	r0, [r5, #8]
   1cf44:	6018      	str	r0, [r3, #0]
	z_remove_thread_from_ready_q(_current);
   1cf46:	f7ff fc93 	bl	1c870 <z_remove_thread_from_ready_q>
	z_add_timeout(&th->base.timeout, z_thread_timeout, ticks);
   1cf4a:	68a8      	ldr	r0, [r5, #8]
   1cf4c:	4632      	mov	r2, r6
   1cf4e:	3018      	adds	r0, #24
   1cf50:	4923      	ldr	r1, [pc, #140]	; (1cfe0 <z_tick_sleep+0x11c>)
   1cf52:	f000 fb9b 	bl	1d68c <z_add_timeout>
	z_mark_thread_as_suspended(_current);
   1cf56:	68aa      	ldr	r2, [r5, #8]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1cf58:	a801      	add	r0, sp, #4
	thread->base.thread_state |= _THREAD_SUSPENDED;
   1cf5a:	7b53      	ldrb	r3, [r2, #13]
   1cf5c:	f043 0310 	orr.w	r3, r3, #16
   1cf60:	7353      	strb	r3, [r2, #13]
   1cf62:	f000 f993 	bl	1d28c <z_spin_unlock_valid>
   1cf66:	b968      	cbnz	r0, 1cf84 <z_tick_sleep+0xc0>
   1cf68:	2374      	movs	r3, #116	; 0x74
   1cf6a:	4a18      	ldr	r2, [pc, #96]	; (1cfcc <z_tick_sleep+0x108>)
   1cf6c:	491d      	ldr	r1, [pc, #116]	; (1cfe4 <z_tick_sleep+0x120>)
   1cf6e:	4815      	ldr	r0, [pc, #84]	; (1cfc4 <z_tick_sleep+0x100>)
   1cf70:	f002 ff33 	bl	1fdda <printk>
   1cf74:	a901      	add	r1, sp, #4
   1cf76:	481c      	ldr	r0, [pc, #112]	; (1cfe8 <z_tick_sleep+0x124>)
   1cf78:	f002 ff2f 	bl	1fdda <printk>
   1cf7c:	2174      	movs	r1, #116	; 0x74
   1cf7e:	4813      	ldr	r0, [pc, #76]	; (1cfcc <z_tick_sleep+0x108>)
   1cf80:	f002 ff71 	bl	1fe66 <assert_post_action>
   1cf84:	4638      	mov	r0, r7
   1cf86:	f7f2 f819 	bl	efbc <arch_swap>
	__ASSERT(!z_is_thread_state_set(_current, _THREAD_SUSPENDED), "");
   1cf8a:	68ab      	ldr	r3, [r5, #8]
   1cf8c:	7b5b      	ldrb	r3, [r3, #13]
   1cf8e:	06db      	lsls	r3, r3, #27
   1cf90:	d50e      	bpl.n	1cfb0 <z_tick_sleep+0xec>
   1cf92:	4916      	ldr	r1, [pc, #88]	; (1cfec <z_tick_sleep+0x128>)
   1cf94:	f44f 6389 	mov.w	r3, #1096	; 0x448
   1cf98:	4a09      	ldr	r2, [pc, #36]	; (1cfc0 <z_tick_sleep+0xfc>)
   1cf9a:	480a      	ldr	r0, [pc, #40]	; (1cfc4 <z_tick_sleep+0x100>)
   1cf9c:	f002 ff1d 	bl	1fdda <printk>
   1cfa0:	4809      	ldr	r0, [pc, #36]	; (1cfc8 <z_tick_sleep+0x104>)
   1cfa2:	f002 ff1a 	bl	1fdda <printk>
   1cfa6:	f44f 6189 	mov.w	r1, #1096	; 0x448
   1cfaa:	4805      	ldr	r0, [pc, #20]	; (1cfc0 <z_tick_sleep+0xfc>)
   1cfac:	f002 ff5b 	bl	1fe66 <assert_post_action>
	ticks = expected_wakeup_time - z_tick_get_32();
   1cfb0:	f004 fc39 	bl	21826 <z_tick_get_32>
   1cfb4:	1a24      	subs	r4, r4, r0
   1cfb6:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
   1cfba:	e79a      	b.n	1cef2 <z_tick_sleep+0x2e>
   1cfbc:	0002516f 	.word	0x0002516f
   1cfc0:	00025207 	.word	0x00025207
   1cfc4:	00023451 	.word	0x00023451
   1cfc8:	000241f4 	.word	0x000241f4
   1cfcc:	00023852 	.word	0x00023852
   1cfd0:	00023878 	.word	0x00023878
   1cfd4:	0002388d 	.word	0x0002388d
   1cfd8:	20021398 	.word	0x20021398
   1cfdc:	200213cc 	.word	0x200213cc
   1cfe0:	0001c449 	.word	0x0001c449
   1cfe4:	000238a5 	.word	0x000238a5
   1cfe8:	000238bc 	.word	0x000238bc
   1cfec:	00025280 	.word	0x00025280

0001cff0 <z_impl_k_sleep>:

s32_t z_impl_k_sleep(int ms)
{
   1cff0:	b538      	push	{r3, r4, r5, lr}
   1cff2:	4604      	mov	r4, r0
   1cff4:	f3ef 8305 	mrs	r3, IPSR
	s32_t ticks;

	__ASSERT(!arch_is_in_isr(), "");
   1cff8:	b173      	cbz	r3, 1d018 <z_impl_k_sleep+0x28>
   1cffa:	4916      	ldr	r1, [pc, #88]	; (1d054 <z_impl_k_sleep+0x64>)
   1cffc:	f240 4357 	movw	r3, #1111	; 0x457
   1d000:	4a15      	ldr	r2, [pc, #84]	; (1d058 <z_impl_k_sleep+0x68>)
   1d002:	4816      	ldr	r0, [pc, #88]	; (1d05c <z_impl_k_sleep+0x6c>)
   1d004:	f002 fee9 	bl	1fdda <printk>
   1d008:	4815      	ldr	r0, [pc, #84]	; (1d060 <z_impl_k_sleep+0x70>)
   1d00a:	f002 fee6 	bl	1fdda <printk>
   1d00e:	f240 4157 	movw	r1, #1111	; 0x457
   1d012:	4811      	ldr	r0, [pc, #68]	; (1d058 <z_impl_k_sleep+0x68>)
   1d014:	f002 ff27 	bl	1fe66 <assert_post_action>

	if (ms == K_FOREVER) {
   1d018:	1c63      	adds	r3, r4, #1
   1d01a:	d105      	bne.n	1d028 <z_impl_k_sleep+0x38>
		k_thread_suspend(_current);
   1d01c:	4b11      	ldr	r3, [pc, #68]	; (1d064 <z_impl_k_sleep+0x74>)
   1d01e:	6898      	ldr	r0, [r3, #8]
	z_impl_k_thread_suspend(thread);
   1d020:	f000 fa82 	bl	1d528 <z_impl_k_thread_suspend>
	}

	ticks = k_ms_to_ticks_ceil32(ms);
	ticks = z_tick_sleep(ticks);
	return k_ticks_to_ms_floor64(ticks);
}
   1d024:	4620      	mov	r0, r4
   1d026:	bd38      	pop	{r3, r4, r5, pc}
   1d028:	f44f 4500 	mov.w	r5, #32768	; 0x8000
   1d02c:	f240 30e7 	movw	r0, #999	; 0x3e7
   1d030:	2100      	movs	r1, #0
   1d032:	2300      	movs	r3, #0
   1d034:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   1d038:	fbe5 0104 	umlal	r0, r1, r5, r4
   1d03c:	f7ef fabc 	bl	c5b8 <__aeabi_uldivmod>
	ticks = z_tick_sleep(ticks);
   1d040:	f7ff ff40 	bl	1cec4 <z_tick_sleep>
		} else {
			return (t * to_hz + off) / from_hz;
   1d044:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   1d048:	fb80 0103 	smull	r0, r1, r0, r3
   1d04c:	0bc4      	lsrs	r4, r0, #15
   1d04e:	ea44 4441 	orr.w	r4, r4, r1, lsl #17
	return k_ticks_to_ms_floor64(ticks);
   1d052:	e7e7      	b.n	1d024 <z_impl_k_sleep+0x34>
   1d054:	0002516f 	.word	0x0002516f
   1d058:	00025207 	.word	0x00025207
   1d05c:	00023451 	.word	0x00023451
   1d060:	000241f4 	.word	0x000241f4
   1d064:	20021398 	.word	0x20021398

0001d068 <z_impl_k_current_get>:
#endif

k_tid_t z_impl_k_current_get(void)
{
	return _current;
}
   1d068:	4b01      	ldr	r3, [pc, #4]	; (1d070 <z_impl_k_current_get+0x8>)
   1d06a:	6898      	ldr	r0, [r3, #8]
   1d06c:	4770      	bx	lr
   1d06e:	bf00      	nop
   1d070:	20021398 	.word	0x20021398

0001d074 <z_impl_k_sem_give>:
	ARG_UNUSED(sem);
#endif
}

void z_impl_k_sem_give(struct k_sem *sem)
{
   1d074:	b570      	push	{r4, r5, r6, lr}
   1d076:	4604      	mov	r4, r0
   1d078:	f04f 0320 	mov.w	r3, #32
   1d07c:	f3ef 8611 	mrs	r6, BASEPRI
   1d080:	f383 8811 	msr	BASEPRI, r3
   1d084:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1d088:	481a      	ldr	r0, [pc, #104]	; (1d0f4 <z_impl_k_sem_give+0x80>)
   1d08a:	f000 f8f1 	bl	1d270 <z_spin_lock_valid>
   1d08e:	b968      	cbnz	r0, 1d0ac <z_impl_k_sem_give+0x38>
   1d090:	234a      	movs	r3, #74	; 0x4a
   1d092:	4a19      	ldr	r2, [pc, #100]	; (1d0f8 <z_impl_k_sem_give+0x84>)
   1d094:	4919      	ldr	r1, [pc, #100]	; (1d0fc <z_impl_k_sem_give+0x88>)
   1d096:	481a      	ldr	r0, [pc, #104]	; (1d100 <z_impl_k_sem_give+0x8c>)
   1d098:	f002 fe9f 	bl	1fdda <printk>
   1d09c:	4915      	ldr	r1, [pc, #84]	; (1d0f4 <z_impl_k_sem_give+0x80>)
   1d09e:	4819      	ldr	r0, [pc, #100]	; (1d104 <z_impl_k_sem_give+0x90>)
   1d0a0:	f002 fe9b 	bl	1fdda <printk>
   1d0a4:	214a      	movs	r1, #74	; 0x4a
   1d0a6:	4814      	ldr	r0, [pc, #80]	; (1d0f8 <z_impl_k_sem_give+0x84>)
   1d0a8:	f002 fedd 	bl	1fe66 <assert_post_action>
	z_spin_lock_set_owner(l);
   1d0ac:	4811      	ldr	r0, [pc, #68]	; (1d0f4 <z_impl_k_sem_give+0x80>)
   1d0ae:	f000 f8fd 	bl	1d2ac <z_spin_lock_set_owner>
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_thread *thread = z_unpend_first_thread(&sem->wait_q);
   1d0b2:	4620      	mov	r0, r4
   1d0b4:	f7ff fdbe 	bl	1cc34 <z_unpend_first_thread>

	sys_trace_void(SYS_TRACE_ID_SEMA_GIVE);

	if (thread != NULL) {
   1d0b8:	4605      	mov	r5, r0
   1d0ba:	b170      	cbz	r0, 1d0da <z_impl_k_sem_give+0x66>
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
   1d0bc:	7b43      	ldrb	r3, [r0, #13]
   1d0be:	06db      	lsls	r3, r3, #27
   1d0c0:	d103      	bne.n	1d0ca <z_impl_k_sem_give+0x56>
	if (z_is_thread_ready(thread)) {
   1d0c2:	6983      	ldr	r3, [r0, #24]
   1d0c4:	b90b      	cbnz	r3, 1d0ca <z_impl_k_sem_give+0x56>
		z_add_thread_to_ready_q(thread);
   1d0c6:	f7ff f93f 	bl	1c348 <z_add_thread_to_ready_q>
   1d0ca:	2300      	movs	r3, #0
   1d0cc:	66ab      	str	r3, [r5, #104]	; 0x68
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
		handle_poll_events(sem);
	}

	sys_trace_end_call(SYS_TRACE_ID_SEMA_GIVE);
	z_reschedule(&lock, key);
   1d0ce:	4631      	mov	r1, r6
}
   1d0d0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	z_reschedule(&lock, key);
   1d0d4:	4807      	ldr	r0, [pc, #28]	; (1d0f4 <z_impl_k_sem_give+0x80>)
   1d0d6:	f7fe bf4d 	b.w	1bf74 <z_reschedule>
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
   1d0da:	e9d4 3202 	ldrd	r3, r2, [r4, #8]
   1d0de:	429a      	cmp	r2, r3
   1d0e0:	bf18      	it	ne
   1d0e2:	3301      	addne	r3, #1
	z_handle_obj_poll_events(&sem->poll_events, K_POLL_STATE_SEM_AVAILABLE);
   1d0e4:	2102      	movs	r1, #2
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
   1d0e6:	60a3      	str	r3, [r4, #8]
	z_handle_obj_poll_events(&sem->poll_events, K_POLL_STATE_SEM_AVAILABLE);
   1d0e8:	f104 0010 	add.w	r0, r4, #16
   1d0ec:	f004 fbf6 	bl	218dc <z_handle_obj_poll_events>
   1d0f0:	e7ed      	b.n	1d0ce <z_impl_k_sem_give+0x5a>
   1d0f2:	bf00      	nop
   1d0f4:	200213dc 	.word	0x200213dc
   1d0f8:	00023852 	.word	0x00023852
   1d0fc:	00023878 	.word	0x00023878
   1d100:	00023451 	.word	0x00023451
   1d104:	0002388d 	.word	0x0002388d

0001d108 <z_impl_k_sem_take>:
}
#include <syscalls/k_sem_give_mrsh.c>
#endif

int z_impl_k_sem_take(struct k_sem *sem, s32_t timeout)
{
   1d108:	b570      	push	{r4, r5, r6, lr}
   1d10a:	4605      	mov	r5, r0
   1d10c:	460e      	mov	r6, r1
   1d10e:	f3ef 8305 	mrs	r3, IPSR
	int ret = 0;

	__ASSERT(((arch_is_in_isr() == false) || (timeout == K_NO_WAIT)), "");
   1d112:	b16b      	cbz	r3, 1d130 <z_impl_k_sem_take+0x28>
   1d114:	b161      	cbz	r1, 1d130 <z_impl_k_sem_take+0x28>
   1d116:	4934      	ldr	r1, [pc, #208]	; (1d1e8 <z_impl_k_sem_take+0xe0>)
   1d118:	238c      	movs	r3, #140	; 0x8c
   1d11a:	4a34      	ldr	r2, [pc, #208]	; (1d1ec <z_impl_k_sem_take+0xe4>)
   1d11c:	4834      	ldr	r0, [pc, #208]	; (1d1f0 <z_impl_k_sem_take+0xe8>)
   1d11e:	f002 fe5c 	bl	1fdda <printk>
   1d122:	4834      	ldr	r0, [pc, #208]	; (1d1f4 <z_impl_k_sem_take+0xec>)
   1d124:	f002 fe59 	bl	1fdda <printk>
   1d128:	218c      	movs	r1, #140	; 0x8c
   1d12a:	4830      	ldr	r0, [pc, #192]	; (1d1ec <z_impl_k_sem_take+0xe4>)
   1d12c:	f002 fe9b 	bl	1fe66 <assert_post_action>
   1d130:	f04f 0320 	mov.w	r3, #32
   1d134:	f3ef 8411 	mrs	r4, BASEPRI
   1d138:	f383 8811 	msr	BASEPRI, r3
   1d13c:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1d140:	482d      	ldr	r0, [pc, #180]	; (1d1f8 <z_impl_k_sem_take+0xf0>)
   1d142:	f000 f895 	bl	1d270 <z_spin_lock_valid>
   1d146:	b968      	cbnz	r0, 1d164 <z_impl_k_sem_take+0x5c>
   1d148:	234a      	movs	r3, #74	; 0x4a
   1d14a:	4a2c      	ldr	r2, [pc, #176]	; (1d1fc <z_impl_k_sem_take+0xf4>)
   1d14c:	492c      	ldr	r1, [pc, #176]	; (1d200 <z_impl_k_sem_take+0xf8>)
   1d14e:	4828      	ldr	r0, [pc, #160]	; (1d1f0 <z_impl_k_sem_take+0xe8>)
   1d150:	f002 fe43 	bl	1fdda <printk>
   1d154:	4928      	ldr	r1, [pc, #160]	; (1d1f8 <z_impl_k_sem_take+0xf0>)
   1d156:	482b      	ldr	r0, [pc, #172]	; (1d204 <z_impl_k_sem_take+0xfc>)
   1d158:	f002 fe3f 	bl	1fdda <printk>
   1d15c:	214a      	movs	r1, #74	; 0x4a
   1d15e:	4827      	ldr	r0, [pc, #156]	; (1d1fc <z_impl_k_sem_take+0xf4>)
   1d160:	f002 fe81 	bl	1fe66 <assert_post_action>
	z_spin_lock_set_owner(l);
   1d164:	4824      	ldr	r0, [pc, #144]	; (1d1f8 <z_impl_k_sem_take+0xf0>)
   1d166:	f000 f8a1 	bl	1d2ac <z_spin_lock_set_owner>

	sys_trace_void(SYS_TRACE_ID_SEMA_TAKE);
	k_spinlock_key_t key = k_spin_lock(&lock);

	if (likely(sem->count > 0U)) {
   1d16a:	68ab      	ldr	r3, [r5, #8]
   1d16c:	b1cb      	cbz	r3, 1d1a2 <z_impl_k_sem_take+0x9a>
		sem->count--;
   1d16e:	3b01      	subs	r3, #1
   1d170:	60ab      	str	r3, [r5, #8]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1d172:	4821      	ldr	r0, [pc, #132]	; (1d1f8 <z_impl_k_sem_take+0xf0>)
   1d174:	f000 f88a 	bl	1d28c <z_spin_unlock_valid>
   1d178:	b968      	cbnz	r0, 1d196 <z_impl_k_sem_take+0x8e>
   1d17a:	235d      	movs	r3, #93	; 0x5d
   1d17c:	4a1f      	ldr	r2, [pc, #124]	; (1d1fc <z_impl_k_sem_take+0xf4>)
   1d17e:	4922      	ldr	r1, [pc, #136]	; (1d208 <z_impl_k_sem_take+0x100>)
   1d180:	481b      	ldr	r0, [pc, #108]	; (1d1f0 <z_impl_k_sem_take+0xe8>)
   1d182:	f002 fe2a 	bl	1fdda <printk>
   1d186:	491c      	ldr	r1, [pc, #112]	; (1d1f8 <z_impl_k_sem_take+0xf0>)
   1d188:	4820      	ldr	r0, [pc, #128]	; (1d20c <z_impl_k_sem_take+0x104>)
   1d18a:	f002 fe26 	bl	1fdda <printk>
   1d18e:	215d      	movs	r1, #93	; 0x5d
   1d190:	481a      	ldr	r0, [pc, #104]	; (1d1fc <z_impl_k_sem_take+0xf4>)
   1d192:	f002 fe68 	bl	1fe66 <assert_post_action>
	__asm__ volatile(
   1d196:	f384 8811 	msr	BASEPRI, r4
   1d19a:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		ret = 0;
   1d19e:	2000      	movs	r0, #0
	ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);

out:
	sys_trace_end_call(SYS_TRACE_ID_SEMA_TAKE);
	return ret;
}
   1d1a0:	bd70      	pop	{r4, r5, r6, pc}
	if (timeout == K_NO_WAIT) {
   1d1a2:	b9c6      	cbnz	r6, 1d1d6 <z_impl_k_sem_take+0xce>
   1d1a4:	4814      	ldr	r0, [pc, #80]	; (1d1f8 <z_impl_k_sem_take+0xf0>)
   1d1a6:	f000 f871 	bl	1d28c <z_spin_unlock_valid>
   1d1aa:	b968      	cbnz	r0, 1d1c8 <z_impl_k_sem_take+0xc0>
   1d1ac:	235d      	movs	r3, #93	; 0x5d
   1d1ae:	4a13      	ldr	r2, [pc, #76]	; (1d1fc <z_impl_k_sem_take+0xf4>)
   1d1b0:	4915      	ldr	r1, [pc, #84]	; (1d208 <z_impl_k_sem_take+0x100>)
   1d1b2:	480f      	ldr	r0, [pc, #60]	; (1d1f0 <z_impl_k_sem_take+0xe8>)
   1d1b4:	f002 fe11 	bl	1fdda <printk>
   1d1b8:	490f      	ldr	r1, [pc, #60]	; (1d1f8 <z_impl_k_sem_take+0xf0>)
   1d1ba:	4814      	ldr	r0, [pc, #80]	; (1d20c <z_impl_k_sem_take+0x104>)
   1d1bc:	f002 fe0d 	bl	1fdda <printk>
   1d1c0:	215d      	movs	r1, #93	; 0x5d
   1d1c2:	480e      	ldr	r0, [pc, #56]	; (1d1fc <z_impl_k_sem_take+0xf4>)
   1d1c4:	f002 fe4f 	bl	1fe66 <assert_post_action>
   1d1c8:	f384 8811 	msr	BASEPRI, r4
   1d1cc:	f3bf 8f6f 	isb	sy
		ret = -EBUSY;
   1d1d0:	f06f 000f 	mvn.w	r0, #15
		goto out;
   1d1d4:	e7e4      	b.n	1d1a0 <z_impl_k_sem_take+0x98>
	ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);
   1d1d6:	4633      	mov	r3, r6
   1d1d8:	462a      	mov	r2, r5
   1d1da:	4621      	mov	r1, r4
}
   1d1dc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);
   1d1e0:	4805      	ldr	r0, [pc, #20]	; (1d1f8 <z_impl_k_sem_take+0xf0>)
   1d1e2:	f7ff bc6b 	b.w	1cabc <z_pend_curr>
   1d1e6:	bf00      	nop
   1d1e8:	000252d8 	.word	0x000252d8
   1d1ec:	000252b8 	.word	0x000252b8
   1d1f0:	00023451 	.word	0x00023451
   1d1f4:	000241f4 	.word	0x000241f4
   1d1f8:	200213dc 	.word	0x200213dc
   1d1fc:	00023852 	.word	0x00023852
   1d200:	00023878 	.word	0x00023878
   1d204:	0002388d 	.word	0x0002388d
   1d208:	000238a5 	.word	0x000238a5
   1d20c:	000238bc 	.word	0x000238bc

0001d210 <k_sys_work_q_init>:
K_THREAD_STACK_DEFINE(sys_work_q_stack, CONFIG_SYSTEM_WORKQUEUE_STACK_SIZE);

struct k_work_q k_sys_work_q;

static int k_sys_work_q_init(struct device *dev)
{
   1d210:	b510      	push	{r4, lr}
	ARG_UNUSED(dev);

	k_work_q_start(&k_sys_work_q,
   1d212:	4c08      	ldr	r4, [pc, #32]	; (1d234 <k_sys_work_q_init+0x24>)
   1d214:	f04f 33ff 	mov.w	r3, #4294967295
   1d218:	f44f 6280 	mov.w	r2, #1024	; 0x400
   1d21c:	4906      	ldr	r1, [pc, #24]	; (1d238 <k_sys_work_q_init+0x28>)
   1d21e:	4620      	mov	r0, r4
   1d220:	f000 f9d6 	bl	1d5d0 <k_work_q_start>
	return z_impl_k_thread_name_set(thread_id, value);
   1d224:	4905      	ldr	r1, [pc, #20]	; (1d23c <k_sys_work_q_init+0x2c>)
   1d226:	f104 0014 	add.w	r0, r4, #20
   1d22a:	f004 fae8 	bl	217fe <z_impl_k_thread_name_set>
		       K_THREAD_STACK_SIZEOF(sys_work_q_stack),
		       CONFIG_SYSTEM_WORKQUEUE_PRIORITY);
	k_thread_name_set(&k_sys_work_q.thread, "sysworkq");

	return 0;
}
   1d22e:	2000      	movs	r0, #0
   1d230:	bd10      	pop	{r4, pc}
   1d232:	bf00      	nop
   1d234:	200213e0 	.word	0x200213e0
   1d238:	20024728 	.word	0x20024728
   1d23c:	00025304 	.word	0x00025304

0001d240 <z_setup_new_thread>:
void z_setup_new_thread(struct k_thread *new_thread,
		       k_thread_stack_t *stack, size_t stack_size,
		       k_thread_entry_t entry,
		       void *p1, void *p2, void *p3,
		       int prio, u32_t options, const char *name)
{
   1d240:	b530      	push	{r4, r5, lr}
   1d242:	b087      	sub	sp, #28
	stack_size = STACK_ROUND_DOWN(stack_size
			- sizeof(*new_thread->userspace_local_data));
#endif
#endif

	arch_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   1d244:	9d0e      	ldr	r5, [sp, #56]	; 0x38
{
   1d246:	4604      	mov	r4, r0
	arch_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   1d248:	9504      	str	r5, [sp, #16]
   1d24a:	9d0d      	ldr	r5, [sp, #52]	; 0x34
   1d24c:	9503      	str	r5, [sp, #12]
   1d24e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
   1d250:	9502      	str	r5, [sp, #8]
   1d252:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
   1d254:	9501      	str	r5, [sp, #4]
   1d256:	9d0a      	ldr	r5, [sp, #40]	; 0x28
   1d258:	9500      	str	r5, [sp, #0]
   1d25a:	f7f1 ff19 	bl	f090 <arch_new_thread>
#ifdef CONFIG_SCHED_CPU_MASK
	new_thread->base.cpu_mask = -1;
#endif
#ifdef CONFIG_ARCH_HAS_CUSTOM_SWAP_TO_MAIN
	/* _current may be null if the dummy thread is not used */
	if (!_current) {
   1d25e:	4b03      	ldr	r3, [pc, #12]	; (1d26c <z_setup_new_thread+0x2c>)
   1d260:	689b      	ldr	r3, [r3, #8]
   1d262:	b103      	cbz	r3, 1d266 <z_setup_new_thread+0x26>
	}
#endif
#ifdef CONFIG_SCHED_DEADLINE
	new_thread->base.prio_deadline = 0;
#endif
	new_thread->resource_pool = _current->resource_pool;
   1d264:	6e1b      	ldr	r3, [r3, #96]	; 0x60
   1d266:	6623      	str	r3, [r4, #96]	; 0x60
	sys_trace_thread_create(new_thread);
}
   1d268:	b007      	add	sp, #28
   1d26a:	bd30      	pop	{r4, r5, pc}
   1d26c:	20021398 	.word	0x20021398

0001d270 <z_spin_lock_valid>:
 * them in spinlock.h is a giant header ordering headache.
 */
#ifdef CONFIG_SPIN_VALIDATE
bool z_spin_lock_valid(struct k_spinlock *l)
{
	uintptr_t thread_cpu = l->thread_cpu;
   1d270:	6800      	ldr	r0, [r0, #0]

	if (thread_cpu) {
   1d272:	b138      	cbz	r0, 1d284 <z_spin_lock_valid+0x14>
		if ((thread_cpu & 3) == _current_cpu->id) {
   1d274:	4b04      	ldr	r3, [pc, #16]	; (1d288 <z_spin_lock_valid+0x18>)
   1d276:	f000 0003 	and.w	r0, r0, #3
   1d27a:	7d1b      	ldrb	r3, [r3, #20]
   1d27c:	1ac0      	subs	r0, r0, r3
   1d27e:	bf18      	it	ne
   1d280:	2001      	movne	r0, #1
   1d282:	4770      	bx	lr
			return false;
		}
	}
	return true;
   1d284:	2001      	movs	r0, #1
}
   1d286:	4770      	bx	lr
   1d288:	20021398 	.word	0x20021398

0001d28c <z_spin_unlock_valid>:

bool z_spin_unlock_valid(struct k_spinlock *l)
{
	if (l->thread_cpu != (_current_cpu->id | (uintptr_t)_current)) {
   1d28c:	4a06      	ldr	r2, [pc, #24]	; (1d2a8 <z_spin_unlock_valid+0x1c>)
   1d28e:	7d11      	ldrb	r1, [r2, #20]
   1d290:	6893      	ldr	r3, [r2, #8]
   1d292:	6802      	ldr	r2, [r0, #0]
   1d294:	430b      	orrs	r3, r1
   1d296:	429a      	cmp	r2, r3
   1d298:	f04f 0300 	mov.w	r3, #0
		return false;
	}
	l->thread_cpu = 0;
   1d29c:	bf06      	itte	eq
   1d29e:	6003      	streq	r3, [r0, #0]
	return true;
   1d2a0:	2001      	moveq	r0, #1
		return false;
   1d2a2:	4618      	movne	r0, r3
}
   1d2a4:	4770      	bx	lr
   1d2a6:	bf00      	nop
   1d2a8:	20021398 	.word	0x20021398

0001d2ac <z_spin_lock_set_owner>:

void z_spin_lock_set_owner(struct k_spinlock *l)
{
	l->thread_cpu = _current_cpu->id | (uintptr_t)_current;
   1d2ac:	4a02      	ldr	r2, [pc, #8]	; (1d2b8 <z_spin_lock_set_owner+0xc>)
   1d2ae:	7d11      	ldrb	r1, [r2, #20]
   1d2b0:	6893      	ldr	r3, [r2, #8]
   1d2b2:	430b      	orrs	r3, r1
   1d2b4:	6003      	str	r3, [r0, #0]
}
   1d2b6:	4770      	bx	lr
   1d2b8:	20021398 	.word	0x20021398

0001d2bc <z_impl_k_thread_start>:
{
   1d2bc:	b538      	push	{r3, r4, r5, lr}
   1d2be:	4604      	mov	r4, r0
	__asm__ volatile(
   1d2c0:	f04f 0320 	mov.w	r3, #32
   1d2c4:	f3ef 8511 	mrs	r5, BASEPRI
   1d2c8:	f383 8811 	msr	BASEPRI, r3
   1d2cc:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1d2d0:	481f      	ldr	r0, [pc, #124]	; (1d350 <z_impl_k_thread_start+0x94>)
   1d2d2:	f7ff ffcd 	bl	1d270 <z_spin_lock_valid>
   1d2d6:	b968      	cbnz	r0, 1d2f4 <z_impl_k_thread_start+0x38>
   1d2d8:	234a      	movs	r3, #74	; 0x4a
   1d2da:	4a1e      	ldr	r2, [pc, #120]	; (1d354 <z_impl_k_thread_start+0x98>)
   1d2dc:	491e      	ldr	r1, [pc, #120]	; (1d358 <z_impl_k_thread_start+0x9c>)
   1d2de:	481f      	ldr	r0, [pc, #124]	; (1d35c <z_impl_k_thread_start+0xa0>)
   1d2e0:	f002 fd7b 	bl	1fdda <printk>
   1d2e4:	491a      	ldr	r1, [pc, #104]	; (1d350 <z_impl_k_thread_start+0x94>)
   1d2e6:	481e      	ldr	r0, [pc, #120]	; (1d360 <z_impl_k_thread_start+0xa4>)
   1d2e8:	f002 fd77 	bl	1fdda <printk>
   1d2ec:	214a      	movs	r1, #74	; 0x4a
   1d2ee:	4819      	ldr	r0, [pc, #100]	; (1d354 <z_impl_k_thread_start+0x98>)
   1d2f0:	f002 fdb9 	bl	1fe66 <assert_post_action>
	z_spin_lock_set_owner(l);
   1d2f4:	4816      	ldr	r0, [pc, #88]	; (1d350 <z_impl_k_thread_start+0x94>)
   1d2f6:	f7ff ffd9 	bl	1d2ac <z_spin_lock_set_owner>
	if (z_has_thread_started(thread)) {
   1d2fa:	7b63      	ldrb	r3, [r4, #13]
   1d2fc:	075a      	lsls	r2, r3, #29
   1d2fe:	d416      	bmi.n	1d32e <z_impl_k_thread_start+0x72>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1d300:	4813      	ldr	r0, [pc, #76]	; (1d350 <z_impl_k_thread_start+0x94>)
   1d302:	f7ff ffc3 	bl	1d28c <z_spin_unlock_valid>
   1d306:	b968      	cbnz	r0, 1d324 <z_impl_k_thread_start+0x68>
   1d308:	235d      	movs	r3, #93	; 0x5d
   1d30a:	4a12      	ldr	r2, [pc, #72]	; (1d354 <z_impl_k_thread_start+0x98>)
   1d30c:	4915      	ldr	r1, [pc, #84]	; (1d364 <z_impl_k_thread_start+0xa8>)
   1d30e:	4813      	ldr	r0, [pc, #76]	; (1d35c <z_impl_k_thread_start+0xa0>)
   1d310:	f002 fd63 	bl	1fdda <printk>
   1d314:	490e      	ldr	r1, [pc, #56]	; (1d350 <z_impl_k_thread_start+0x94>)
   1d316:	4814      	ldr	r0, [pc, #80]	; (1d368 <z_impl_k_thread_start+0xac>)
   1d318:	f002 fd5f 	bl	1fdda <printk>
   1d31c:	215d      	movs	r1, #93	; 0x5d
   1d31e:	480d      	ldr	r0, [pc, #52]	; (1d354 <z_impl_k_thread_start+0x98>)
   1d320:	f002 fda1 	bl	1fe66 <assert_post_action>
	__asm__ volatile(
   1d324:	f385 8811 	msr	BASEPRI, r5
   1d328:	f3bf 8f6f 	isb	sy
}
   1d32c:	bd38      	pop	{r3, r4, r5, pc}
	thread->base.thread_state &= ~_THREAD_PRESTART;
   1d32e:	f023 0204 	bic.w	r2, r3, #4
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
   1d332:	f013 0f1b 	tst.w	r3, #27
	thread->base.thread_state &= ~_THREAD_PRESTART;
   1d336:	7362      	strb	r2, [r4, #13]
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
   1d338:	d104      	bne.n	1d344 <z_impl_k_thread_start+0x88>
	if (z_is_thread_ready(thread)) {
   1d33a:	69a3      	ldr	r3, [r4, #24]
   1d33c:	b913      	cbnz	r3, 1d344 <z_impl_k_thread_start+0x88>
		z_add_thread_to_ready_q(thread);
   1d33e:	4620      	mov	r0, r4
   1d340:	f7ff f802 	bl	1c348 <z_add_thread_to_ready_q>
	z_reschedule(&lock, key);
   1d344:	4629      	mov	r1, r5
}
   1d346:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule(&lock, key);
   1d34a:	4801      	ldr	r0, [pc, #4]	; (1d350 <z_impl_k_thread_start+0x94>)
   1d34c:	f7fe be12 	b.w	1bf74 <z_reschedule>
   1d350:	200214a4 	.word	0x200214a4
   1d354:	00023852 	.word	0x00023852
   1d358:	00023878 	.word	0x00023878
   1d35c:	00023451 	.word	0x00023451
   1d360:	0002388d 	.word	0x0002388d
   1d364:	000238a5 	.word	0x000238a5
   1d368:	000238bc 	.word	0x000238bc

0001d36c <z_impl_k_thread_create>:
{
   1d36c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1d370:	b086      	sub	sp, #24
   1d372:	4604      	mov	r4, r0
   1d374:	460e      	mov	r6, r1
   1d376:	4617      	mov	r7, r2
   1d378:	4698      	mov	r8, r3
   1d37a:	9d11      	ldr	r5, [sp, #68]	; 0x44
   1d37c:	f3ef 8305 	mrs	r3, IPSR
	__ASSERT(!arch_is_in_isr(), "Threads may not be created in ISRs");
   1d380:	b173      	cbz	r3, 1d3a0 <z_impl_k_thread_create+0x34>
   1d382:	491f      	ldr	r1, [pc, #124]	; (1d400 <z_impl_k_thread_create+0x94>)
   1d384:	f240 2357 	movw	r3, #599	; 0x257
   1d388:	4a1e      	ldr	r2, [pc, #120]	; (1d404 <z_impl_k_thread_create+0x98>)
   1d38a:	481f      	ldr	r0, [pc, #124]	; (1d408 <z_impl_k_thread_create+0x9c>)
   1d38c:	f002 fd25 	bl	1fdda <printk>
   1d390:	481e      	ldr	r0, [pc, #120]	; (1d40c <z_impl_k_thread_create+0xa0>)
   1d392:	f002 fd22 	bl	1fdda <printk>
   1d396:	f240 2157 	movw	r1, #599	; 0x257
   1d39a:	481a      	ldr	r0, [pc, #104]	; (1d404 <z_impl_k_thread_create+0x98>)
   1d39c:	f002 fd63 	bl	1fe66 <assert_post_action>
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   1d3a0:	2300      	movs	r3, #0
   1d3a2:	9305      	str	r3, [sp, #20]
   1d3a4:	9b10      	ldr	r3, [sp, #64]	; 0x40
   1d3a6:	463a      	mov	r2, r7
   1d3a8:	9304      	str	r3, [sp, #16]
   1d3aa:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   1d3ac:	4631      	mov	r1, r6
   1d3ae:	9303      	str	r3, [sp, #12]
   1d3b0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   1d3b2:	4620      	mov	r0, r4
   1d3b4:	9302      	str	r3, [sp, #8]
   1d3b6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   1d3b8:	9301      	str	r3, [sp, #4]
   1d3ba:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   1d3bc:	9300      	str	r3, [sp, #0]
   1d3be:	4643      	mov	r3, r8
   1d3c0:	f7ff ff3e 	bl	1d240 <z_setup_new_thread>
	if (delay != K_FOREVER) {
   1d3c4:	1c6b      	adds	r3, r5, #1
   1d3c6:	d003      	beq.n	1d3d0 <z_impl_k_thread_create+0x64>
	if (delay == 0) {
   1d3c8:	b935      	cbnz	r5, 1d3d8 <z_impl_k_thread_create+0x6c>
	z_impl_k_thread_start(thread);
   1d3ca:	4620      	mov	r0, r4
   1d3cc:	f7ff ff76 	bl	1d2bc <z_impl_k_thread_start>
}
   1d3d0:	4620      	mov	r0, r4
   1d3d2:	b006      	add	sp, #24
   1d3d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			return (u32_t)((t * to_hz + off) / from_hz);
   1d3d8:	f44f 4600 	mov.w	r6, #32768	; 0x8000
   1d3dc:	f240 30e7 	movw	r0, #999	; 0x3e7
   1d3e0:	2100      	movs	r1, #0
   1d3e2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   1d3e6:	2300      	movs	r3, #0
   1d3e8:	fbe6 0105 	umlal	r0, r1, r6, r5
   1d3ec:	f7ef f8e4 	bl	c5b8 <__aeabi_uldivmod>
   1d3f0:	4907      	ldr	r1, [pc, #28]	; (1d410 <z_impl_k_thread_create+0xa4>)
   1d3f2:	1c42      	adds	r2, r0, #1
   1d3f4:	f104 0018 	add.w	r0, r4, #24
   1d3f8:	f000 f948 	bl	1d68c <z_add_timeout>
   1d3fc:	e7e8      	b.n	1d3d0 <z_impl_k_thread_create+0x64>
   1d3fe:	bf00      	nop
   1d400:	0002516f 	.word	0x0002516f
   1d404:	0002530d 	.word	0x0002530d
   1d408:	00023451 	.word	0x00023451
   1d40c:	00025330 	.word	0x00025330
   1d410:	0001c449 	.word	0x0001c449

0001d414 <z_init_static_threads>:
{
   1d414:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	_FOREACH_STATIC_THREAD(thread_data) {
   1d418:	4f3c      	ldr	r7, [pc, #240]	; (1d50c <z_init_static_threads+0xf8>)
   1d41a:	4d3d      	ldr	r5, [pc, #244]	; (1d510 <z_init_static_threads+0xfc>)
   1d41c:	463e      	mov	r6, r7
   1d41e:	f8df 8100 	ldr.w	r8, [pc, #256]	; 1d520 <z_init_static_threads+0x10c>
{
   1d422:	b087      	sub	sp, #28
	_FOREACH_STATIC_THREAD(thread_data) {
   1d424:	42bd      	cmp	r5, r7
   1d426:	d90e      	bls.n	1d446 <z_init_static_threads+0x32>
   1d428:	493a      	ldr	r1, [pc, #232]	; (1d514 <z_init_static_threads+0x100>)
   1d42a:	f240 23e7 	movw	r3, #743	; 0x2e7
   1d42e:	4642      	mov	r2, r8
   1d430:	4839      	ldr	r0, [pc, #228]	; (1d518 <z_init_static_threads+0x104>)
   1d432:	f002 fcd2 	bl	1fdda <printk>
   1d436:	4839      	ldr	r0, [pc, #228]	; (1d51c <z_init_static_threads+0x108>)
   1d438:	f002 fccf 	bl	1fdda <printk>
   1d43c:	f240 21e7 	movw	r1, #743	; 0x2e7
   1d440:	4640      	mov	r0, r8
   1d442:	f002 fd10 	bl	1fe66 <assert_post_action>
   1d446:	42b5      	cmp	r5, r6
   1d448:	f105 0430 	add.w	r4, r5, #48	; 0x30
   1d44c:	d31f      	bcc.n	1d48e <z_init_static_threads+0x7a>
	k_sched_lock();
   1d44e:	f7fe fdcd 	bl	1bfec <k_sched_lock>
	_FOREACH_STATIC_THREAD(thread_data) {
   1d452:	4c2f      	ldr	r4, [pc, #188]	; (1d510 <z_init_static_threads+0xfc>)
   1d454:	4d32      	ldr	r5, [pc, #200]	; (1d520 <z_init_static_threads+0x10c>)
   1d456:	f8df 80bc 	ldr.w	r8, [pc, #188]	; 1d514 <z_init_static_threads+0x100>
   1d45a:	f8df 90bc 	ldr.w	r9, [pc, #188]	; 1d518 <z_init_static_threads+0x104>
   1d45e:	42b4      	cmp	r4, r6
   1d460:	d90e      	bls.n	1d480 <z_init_static_threads+0x6c>
   1d462:	4641      	mov	r1, r8
   1d464:	f240 3306 	movw	r3, #774	; 0x306
   1d468:	462a      	mov	r2, r5
   1d46a:	4648      	mov	r0, r9
   1d46c:	f002 fcb5 	bl	1fdda <printk>
   1d470:	482a      	ldr	r0, [pc, #168]	; (1d51c <z_init_static_threads+0x108>)
   1d472:	f002 fcb2 	bl	1fdda <printk>
   1d476:	f240 3106 	movw	r1, #774	; 0x306
   1d47a:	4628      	mov	r0, r5
   1d47c:	f002 fcf3 	bl	1fe66 <assert_post_action>
   1d480:	42b4      	cmp	r4, r6
   1d482:	d321      	bcc.n	1d4c8 <z_init_static_threads+0xb4>
}
   1d484:	b007      	add	sp, #28
   1d486:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
	k_sched_unlock();
   1d48a:	f7fe bee1 	b.w	1c250 <k_sched_unlock>
		z_setup_new_thread(
   1d48e:	f854 3c04 	ldr.w	r3, [r4, #-4]
   1d492:	9305      	str	r3, [sp, #20]
   1d494:	f854 3c10 	ldr.w	r3, [r4, #-16]
   1d498:	9304      	str	r3, [sp, #16]
   1d49a:	f854 3c14 	ldr.w	r3, [r4, #-20]
   1d49e:	9303      	str	r3, [sp, #12]
   1d4a0:	f854 3c18 	ldr.w	r3, [r4, #-24]
   1d4a4:	9302      	str	r3, [sp, #8]
   1d4a6:	f854 3c1c 	ldr.w	r3, [r4, #-28]
   1d4aa:	9301      	str	r3, [sp, #4]
   1d4ac:	f854 3c20 	ldr.w	r3, [r4, #-32]
   1d4b0:	9300      	str	r3, [sp, #0]
   1d4b2:	e954 230a 	ldrd	r2, r3, [r4, #-40]	; 0x28
   1d4b6:	e954 010c 	ldrd	r0, r1, [r4, #-48]	; 0x30
   1d4ba:	f7ff fec1 	bl	1d240 <z_setup_new_thread>
		thread_data->init_thread->init_data = thread_data;
   1d4be:	f854 3c30 	ldr.w	r3, [r4, #-48]
   1d4c2:	64dd      	str	r5, [r3, #76]	; 0x4c
   1d4c4:	4625      	mov	r5, r4
   1d4c6:	e7ad      	b.n	1d424 <z_init_static_threads+0x10>
		if (thread_data->init_delay != K_FOREVER) {
   1d4c8:	f8d4 c024 	ldr.w	ip, [r4, #36]	; 0x24
   1d4cc:	f1bc 3fff 	cmp.w	ip, #4294967295
   1d4d0:	d006      	beq.n	1d4e0 <z_init_static_threads+0xcc>
			schedule_new_thread(thread_data->init_thread,
   1d4d2:	6827      	ldr	r7, [r4, #0]
	if (delay == 0) {
   1d4d4:	f1bc 0f00 	cmp.w	ip, #0
   1d4d8:	d104      	bne.n	1d4e4 <z_init_static_threads+0xd0>
   1d4da:	4638      	mov	r0, r7
   1d4dc:	f7ff feee 	bl	1d2bc <z_impl_k_thread_start>
	_FOREACH_STATIC_THREAD(thread_data) {
   1d4e0:	3430      	adds	r4, #48	; 0x30
   1d4e2:	e7bc      	b.n	1d45e <z_init_static_threads+0x4a>
   1d4e4:	f44f 4e00 	mov.w	lr, #32768	; 0x8000
   1d4e8:	f240 30e7 	movw	r0, #999	; 0x3e7
   1d4ec:	2100      	movs	r1, #0
   1d4ee:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   1d4f2:	2300      	movs	r3, #0
   1d4f4:	fbee 010c 	umlal	r0, r1, lr, ip
   1d4f8:	f7ef f85e 	bl	c5b8 <__aeabi_uldivmod>
   1d4fc:	4909      	ldr	r1, [pc, #36]	; (1d524 <z_init_static_threads+0x110>)
   1d4fe:	1c42      	adds	r2, r0, #1
   1d500:	f107 0018 	add.w	r0, r7, #24
   1d504:	f000 f8c2 	bl	1d68c <z_add_timeout>
   1d508:	e7ea      	b.n	1d4e0 <z_init_static_threads+0xcc>
   1d50a:	bf00      	nop
   1d50c:	20026364 	.word	0x20026364
   1d510:	20026364 	.word	0x20026364
   1d514:	00025355 	.word	0x00025355
   1d518:	00023451 	.word	0x00023451
   1d51c:	00025046 	.word	0x00025046
   1d520:	0002530d 	.word	0x0002530d
   1d524:	0001c449 	.word	0x0001c449

0001d528 <z_impl_k_thread_suspend>:
{
   1d528:	b538      	push	{r3, r4, r5, lr}
   1d52a:	4605      	mov	r5, r0
	__asm__ volatile(
   1d52c:	f04f 0320 	mov.w	r3, #32
   1d530:	f3ef 8411 	mrs	r4, BASEPRI
   1d534:	f383 8811 	msr	BASEPRI, r3
   1d538:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1d53c:	481c      	ldr	r0, [pc, #112]	; (1d5b0 <z_impl_k_thread_suspend+0x88>)
   1d53e:	f7ff fe97 	bl	1d270 <z_spin_lock_valid>
   1d542:	b968      	cbnz	r0, 1d560 <z_impl_k_thread_suspend+0x38>
   1d544:	234a      	movs	r3, #74	; 0x4a
   1d546:	4a1b      	ldr	r2, [pc, #108]	; (1d5b4 <z_impl_k_thread_suspend+0x8c>)
   1d548:	491b      	ldr	r1, [pc, #108]	; (1d5b8 <z_impl_k_thread_suspend+0x90>)
   1d54a:	481c      	ldr	r0, [pc, #112]	; (1d5bc <z_impl_k_thread_suspend+0x94>)
   1d54c:	f002 fc45 	bl	1fdda <printk>
   1d550:	4917      	ldr	r1, [pc, #92]	; (1d5b0 <z_impl_k_thread_suspend+0x88>)
   1d552:	481b      	ldr	r0, [pc, #108]	; (1d5c0 <z_impl_k_thread_suspend+0x98>)
   1d554:	f002 fc41 	bl	1fdda <printk>
   1d558:	214a      	movs	r1, #74	; 0x4a
   1d55a:	4816      	ldr	r0, [pc, #88]	; (1d5b4 <z_impl_k_thread_suspend+0x8c>)
   1d55c:	f002 fc83 	bl	1fe66 <assert_post_action>
	z_spin_lock_set_owner(l);
   1d560:	4813      	ldr	r0, [pc, #76]	; (1d5b0 <z_impl_k_thread_suspend+0x88>)
   1d562:	f7ff fea3 	bl	1d2ac <z_spin_lock_set_owner>
	z_thread_single_suspend(thread);
   1d566:	4628      	mov	r0, r5
   1d568:	f7ff f89c 	bl	1c6a4 <z_thread_single_suspend>
	if (thread == _current) {
   1d56c:	4b15      	ldr	r3, [pc, #84]	; (1d5c4 <z_impl_k_thread_suspend+0x9c>)
   1d56e:	689b      	ldr	r3, [r3, #8]
   1d570:	42ab      	cmp	r3, r5
   1d572:	d105      	bne.n	1d580 <z_impl_k_thread_suspend+0x58>
		z_reschedule(&lock, key);
   1d574:	4621      	mov	r1, r4
}
   1d576:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		z_reschedule(&lock, key);
   1d57a:	480d      	ldr	r0, [pc, #52]	; (1d5b0 <z_impl_k_thread_suspend+0x88>)
   1d57c:	f7fe bcfa 	b.w	1bf74 <z_reschedule>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1d580:	480b      	ldr	r0, [pc, #44]	; (1d5b0 <z_impl_k_thread_suspend+0x88>)
   1d582:	f7ff fe83 	bl	1d28c <z_spin_unlock_valid>
   1d586:	b968      	cbnz	r0, 1d5a4 <z_impl_k_thread_suspend+0x7c>
   1d588:	235d      	movs	r3, #93	; 0x5d
   1d58a:	4a0a      	ldr	r2, [pc, #40]	; (1d5b4 <z_impl_k_thread_suspend+0x8c>)
   1d58c:	490e      	ldr	r1, [pc, #56]	; (1d5c8 <z_impl_k_thread_suspend+0xa0>)
   1d58e:	480b      	ldr	r0, [pc, #44]	; (1d5bc <z_impl_k_thread_suspend+0x94>)
   1d590:	f002 fc23 	bl	1fdda <printk>
   1d594:	4906      	ldr	r1, [pc, #24]	; (1d5b0 <z_impl_k_thread_suspend+0x88>)
   1d596:	480d      	ldr	r0, [pc, #52]	; (1d5cc <z_impl_k_thread_suspend+0xa4>)
   1d598:	f002 fc1f 	bl	1fdda <printk>
   1d59c:	215d      	movs	r1, #93	; 0x5d
   1d59e:	4805      	ldr	r0, [pc, #20]	; (1d5b4 <z_impl_k_thread_suspend+0x8c>)
   1d5a0:	f002 fc61 	bl	1fe66 <assert_post_action>
	__asm__ volatile(
   1d5a4:	f384 8811 	msr	BASEPRI, r4
   1d5a8:	f3bf 8f6f 	isb	sy
}
   1d5ac:	bd38      	pop	{r3, r4, r5, pc}
   1d5ae:	bf00      	nop
   1d5b0:	200214a4 	.word	0x200214a4
   1d5b4:	00023852 	.word	0x00023852
   1d5b8:	00023878 	.word	0x00023878
   1d5bc:	00023451 	.word	0x00023451
   1d5c0:	0002388d 	.word	0x0002388d
   1d5c4:	20021398 	.word	0x20021398
   1d5c8:	000238a5 	.word	0x000238a5
   1d5cc:	000238bc 	.word	0x000238bc

0001d5d0 <k_work_q_start>:

extern void z_work_q_main(void *work_q_ptr, void *p2, void *p3);

void k_work_q_start(struct k_work_q *work_q, k_thread_stack_t *stack,
		    size_t stack_size, int prio)
{
   1d5d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1d5d4:	4605      	mov	r5, r0
   1d5d6:	b086      	sub	sp, #24
   1d5d8:	460e      	mov	r6, r1
   1d5da:	4617      	mov	r7, r2
   1d5dc:	4698      	mov	r8, r3
	z_impl_k_queue_init(queue);
   1d5de:	f004 f8a6 	bl	2172e <z_impl_k_queue_init>
	k_queue_init(&work_q->queue);
	(void)k_thread_create(&work_q->thread, stack, stack_size, z_work_q_main,
   1d5e2:	f105 0414 	add.w	r4, r5, #20
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   1d5e6:	2000      	movs	r0, #0
   1d5e8:	4b09      	ldr	r3, [pc, #36]	; (1d610 <k_work_q_start+0x40>)
   1d5ea:	e9cd 0004 	strd	r0, r0, [sp, #16]
   1d5ee:	e9cd 0802 	strd	r0, r8, [sp, #8]
   1d5f2:	e9cd 5000 	strd	r5, r0, [sp]
   1d5f6:	463a      	mov	r2, r7
   1d5f8:	4631      	mov	r1, r6
   1d5fa:	4620      	mov	r0, r4
   1d5fc:	f7ff feb6 	bl	1d36c <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread_id, value);
   1d600:	4620      	mov	r0, r4
   1d602:	4904      	ldr	r1, [pc, #16]	; (1d614 <k_work_q_start+0x44>)
			work_q, NULL, NULL, prio, 0, K_NO_WAIT);

	k_thread_name_set(&work_q->thread, WORKQUEUE_THREAD_NAME);
}
   1d604:	b006      	add	sp, #24
   1d606:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   1d60a:	f004 b8f8 	b.w	217fe <z_impl_k_thread_name_set>
   1d60e:	bf00      	nop
   1d610:	0001fe31 	.word	0x0001fe31
   1d614:	00025382 	.word	0x00025382

0001d618 <elapsed>:
	sys_dlist_remove(&t->node);
}

static s32_t elapsed(void)
{
	return announce_remaining == 0 ? z_clock_elapsed() : 0;
   1d618:	4b03      	ldr	r3, [pc, #12]	; (1d628 <elapsed+0x10>)
   1d61a:	681b      	ldr	r3, [r3, #0]
   1d61c:	b90b      	cbnz	r3, 1d622 <elapsed+0xa>
   1d61e:	f7f1 bb7b 	b.w	ed18 <z_clock_elapsed>
}
   1d622:	2000      	movs	r0, #0
   1d624:	4770      	bx	lr
   1d626:	bf00      	nop
   1d628:	200214a8 	.word	0x200214a8

0001d62c <remove_timeout>:
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   1d62c:	6803      	ldr	r3, [r0, #0]
   1d62e:	b140      	cbz	r0, 1d642 <remove_timeout+0x16>
   1d630:	4a07      	ldr	r2, [pc, #28]	; (1d650 <remove_timeout+0x24>)
	return (node == list->tail) ? NULL : node->next;
   1d632:	6852      	ldr	r2, [r2, #4]
   1d634:	4290      	cmp	r0, r2
   1d636:	d004      	beq.n	1d642 <remove_timeout+0x16>
	if (next(t) != NULL) {
   1d638:	b11b      	cbz	r3, 1d642 <remove_timeout+0x16>
		next(t)->dticks += t->dticks;
   1d63a:	689a      	ldr	r2, [r3, #8]
   1d63c:	6881      	ldr	r1, [r0, #8]
   1d63e:	440a      	add	r2, r1
   1d640:	609a      	str	r2, [r3, #8]
	node->prev->next = node->next;
   1d642:	6842      	ldr	r2, [r0, #4]
   1d644:	6013      	str	r3, [r2, #0]
	node->next->prev = node->prev;
   1d646:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   1d648:	2300      	movs	r3, #0
	node->prev = NULL;
   1d64a:	e9c0 3300 	strd	r3, r3, [r0]
}
   1d64e:	4770      	bx	lr
   1d650:	200260a8 	.word	0x200260a8

0001d654 <next_timeout>:
	return list->head == list;
   1d654:	4b0b      	ldr	r3, [pc, #44]	; (1d684 <next_timeout+0x30>)

static s32_t next_timeout(void)
{
   1d656:	b510      	push	{r4, lr}
   1d658:	681c      	ldr	r4, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1d65a:	429c      	cmp	r4, r3
   1d65c:	bf08      	it	eq
   1d65e:	2400      	moveq	r4, #0
	struct _timeout *to = first();
	s32_t ticks_elapsed = elapsed();
   1d660:	f7ff ffda 	bl	1d618 <elapsed>
	s32_t ret = to == NULL ? MAX_WAIT : MAX(0, to->dticks - ticks_elapsed);
   1d664:	b154      	cbz	r4, 1d67c <next_timeout+0x28>
   1d666:	68a3      	ldr	r3, [r4, #8]
   1d668:	1a18      	subs	r0, r3, r0
   1d66a:	ea20 70e0 	bic.w	r0, r0, r0, asr #31

#ifdef CONFIG_TIMESLICING
	if (_current_cpu->slice_ticks && _current_cpu->slice_ticks < ret) {
   1d66e:	4b06      	ldr	r3, [pc, #24]	; (1d688 <next_timeout+0x34>)
   1d670:	691b      	ldr	r3, [r3, #16]
   1d672:	b113      	cbz	r3, 1d67a <next_timeout+0x26>
   1d674:	4298      	cmp	r0, r3
   1d676:	bfa8      	it	ge
   1d678:	4618      	movge	r0, r3
		ret = _current_cpu->slice_ticks;
	}
#endif
	return ret;
}
   1d67a:	bd10      	pop	{r4, pc}
	s32_t ret = to == NULL ? MAX_WAIT : MAX(0, to->dticks - ticks_elapsed);
   1d67c:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
   1d680:	e7f5      	b.n	1d66e <next_timeout+0x1a>
   1d682:	bf00      	nop
   1d684:	200260a8 	.word	0x200260a8
   1d688:	20021398 	.word	0x20021398

0001d68c <z_add_timeout>:

void z_add_timeout(struct _timeout *to, _timeout_func_t fn, s32_t ticks)
{
	__ASSERT(!sys_dnode_is_linked(&to->node), "");
   1d68c:	6803      	ldr	r3, [r0, #0]
{
   1d68e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1d692:	4604      	mov	r4, r0
   1d694:	460e      	mov	r6, r1
   1d696:	4615      	mov	r5, r2
	__ASSERT(!sys_dnode_is_linked(&to->node), "");
   1d698:	b163      	cbz	r3, 1d6b4 <z_add_timeout+0x28>
   1d69a:	4943      	ldr	r1, [pc, #268]	; (1d7a8 <z_add_timeout+0x11c>)
   1d69c:	2358      	movs	r3, #88	; 0x58
   1d69e:	4a43      	ldr	r2, [pc, #268]	; (1d7ac <z_add_timeout+0x120>)
   1d6a0:	4843      	ldr	r0, [pc, #268]	; (1d7b0 <z_add_timeout+0x124>)
   1d6a2:	f002 fb9a 	bl	1fdda <printk>
   1d6a6:	4843      	ldr	r0, [pc, #268]	; (1d7b4 <z_add_timeout+0x128>)
   1d6a8:	f002 fb97 	bl	1fdda <printk>
   1d6ac:	2158      	movs	r1, #88	; 0x58
   1d6ae:	483f      	ldr	r0, [pc, #252]	; (1d7ac <z_add_timeout+0x120>)
   1d6b0:	f002 fbd9 	bl	1fe66 <assert_post_action>
	to->fn = fn;
	ticks = MAX(1, ticks);
   1d6b4:	2d01      	cmp	r5, #1
   1d6b6:	bfb8      	it	lt
   1d6b8:	2501      	movlt	r5, #1
	to->fn = fn;
   1d6ba:	60e6      	str	r6, [r4, #12]
	__asm__ volatile(
   1d6bc:	f04f 0320 	mov.w	r3, #32
   1d6c0:	f3ef 8811 	mrs	r8, BASEPRI
   1d6c4:	f383 8811 	msr	BASEPRI, r3
   1d6c8:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1d6cc:	483a      	ldr	r0, [pc, #232]	; (1d7b8 <z_add_timeout+0x12c>)
   1d6ce:	f7ff fdcf 	bl	1d270 <z_spin_lock_valid>
   1d6d2:	b968      	cbnz	r0, 1d6f0 <z_add_timeout+0x64>
   1d6d4:	234a      	movs	r3, #74	; 0x4a
   1d6d6:	4a39      	ldr	r2, [pc, #228]	; (1d7bc <z_add_timeout+0x130>)
   1d6d8:	4939      	ldr	r1, [pc, #228]	; (1d7c0 <z_add_timeout+0x134>)
   1d6da:	4835      	ldr	r0, [pc, #212]	; (1d7b0 <z_add_timeout+0x124>)
   1d6dc:	f002 fb7d 	bl	1fdda <printk>
   1d6e0:	4935      	ldr	r1, [pc, #212]	; (1d7b8 <z_add_timeout+0x12c>)
   1d6e2:	4838      	ldr	r0, [pc, #224]	; (1d7c4 <z_add_timeout+0x138>)
   1d6e4:	f002 fb79 	bl	1fdda <printk>
   1d6e8:	214a      	movs	r1, #74	; 0x4a
   1d6ea:	4834      	ldr	r0, [pc, #208]	; (1d7bc <z_add_timeout+0x130>)
   1d6ec:	f002 fbbb 	bl	1fe66 <assert_post_action>
	z_spin_lock_set_owner(l);
   1d6f0:	4831      	ldr	r0, [pc, #196]	; (1d7b8 <z_add_timeout+0x12c>)
   1d6f2:	f7ff fddb 	bl	1d2ac <z_spin_lock_set_owner>

	LOCKED(&timeout_lock) {
		struct _timeout *t;

		to->dticks = ticks + elapsed();
   1d6f6:	f7ff ff8f 	bl	1d618 <elapsed>
   1d6fa:	4428      	add	r0, r5
	return list->head == list;
   1d6fc:	4d32      	ldr	r5, [pc, #200]	; (1d7c8 <z_add_timeout+0x13c>)
   1d6fe:	60a0      	str	r0, [r4, #8]
   1d700:	682e      	ldr	r6, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1d702:	42ae      	cmp	r6, r5
   1d704:	d005      	beq.n	1d712 <z_add_timeout+0x86>
		for (t = first(); t != NULL; t = next(t)) {
			__ASSERT(t->dticks >= 0, "");
   1d706:	4f29      	ldr	r7, [pc, #164]	; (1d7ac <z_add_timeout+0x120>)
   1d708:	f8df 90c8 	ldr.w	r9, [pc, #200]	; 1d7d4 <z_add_timeout+0x148>
   1d70c:	f8df a0a0 	ldr.w	sl, [pc, #160]	; 1d7b0 <z_add_timeout+0x124>
		for (t = first(); t != NULL; t = next(t)) {
   1d710:	b936      	cbnz	r6, 1d720 <z_add_timeout+0x94>
	node->prev = list->tail;
   1d712:	686b      	ldr	r3, [r5, #4]
	node->next = list;
   1d714:	6025      	str	r5, [r4, #0]
	node->prev = list->tail;
   1d716:	6063      	str	r3, [r4, #4]
	list->tail->next = node;
   1d718:	686b      	ldr	r3, [r5, #4]
   1d71a:	601c      	str	r4, [r3, #0]
	list->tail = node;
   1d71c:	606c      	str	r4, [r5, #4]
   1d71e:	e01a      	b.n	1d756 <z_add_timeout+0xca>
			__ASSERT(t->dticks >= 0, "");
   1d720:	68b3      	ldr	r3, [r6, #8]
   1d722:	2b00      	cmp	r3, #0
   1d724:	da0c      	bge.n	1d740 <z_add_timeout+0xb4>
   1d726:	4649      	mov	r1, r9
   1d728:	2361      	movs	r3, #97	; 0x61
   1d72a:	463a      	mov	r2, r7
   1d72c:	4650      	mov	r0, sl
   1d72e:	f002 fb54 	bl	1fdda <printk>
   1d732:	4820      	ldr	r0, [pc, #128]	; (1d7b4 <z_add_timeout+0x128>)
   1d734:	f002 fb51 	bl	1fdda <printk>
   1d738:	2161      	movs	r1, #97	; 0x61
   1d73a:	4638      	mov	r0, r7
   1d73c:	f002 fb93 	bl	1fe66 <assert_post_action>

			if (t->dticks > to->dticks) {
   1d740:	68b2      	ldr	r2, [r6, #8]
   1d742:	68a3      	ldr	r3, [r4, #8]
   1d744:	429a      	cmp	r2, r3
   1d746:	dd28      	ble.n	1d79a <z_add_timeout+0x10e>
				t->dticks -= to->dticks;
   1d748:	1ad3      	subs	r3, r2, r3
   1d74a:	60b3      	str	r3, [r6, #8]
	node->prev = successor->prev;
   1d74c:	6873      	ldr	r3, [r6, #4]
	node->next = successor;
   1d74e:	e9c4 6300 	strd	r6, r3, [r4]
	successor->prev->next = node;
   1d752:	601c      	str	r4, [r3, #0]
	successor->prev = node;
   1d754:	6074      	str	r4, [r6, #4]
	return list->head == list;
   1d756:	682b      	ldr	r3, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1d758:	42ab      	cmp	r3, r5
   1d75a:	d006      	beq.n	1d76a <z_add_timeout+0xde>

		if (t == NULL) {
			sys_dlist_append(&timeout_list, &to->node);
		}

		if (to == first()) {
   1d75c:	429c      	cmp	r4, r3
   1d75e:	d104      	bne.n	1d76a <z_add_timeout+0xde>
			z_clock_set_timeout(next_timeout(), false);
   1d760:	f7ff ff78 	bl	1d654 <next_timeout>
   1d764:	2100      	movs	r1, #0
   1d766:	f7f1 fa49 	bl	ebfc <z_clock_set_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1d76a:	4813      	ldr	r0, [pc, #76]	; (1d7b8 <z_add_timeout+0x12c>)
   1d76c:	f7ff fd8e 	bl	1d28c <z_spin_unlock_valid>
   1d770:	b968      	cbnz	r0, 1d78e <z_add_timeout+0x102>
   1d772:	235d      	movs	r3, #93	; 0x5d
   1d774:	4a11      	ldr	r2, [pc, #68]	; (1d7bc <z_add_timeout+0x130>)
   1d776:	4915      	ldr	r1, [pc, #84]	; (1d7cc <z_add_timeout+0x140>)
   1d778:	480d      	ldr	r0, [pc, #52]	; (1d7b0 <z_add_timeout+0x124>)
   1d77a:	f002 fb2e 	bl	1fdda <printk>
   1d77e:	490e      	ldr	r1, [pc, #56]	; (1d7b8 <z_add_timeout+0x12c>)
   1d780:	4813      	ldr	r0, [pc, #76]	; (1d7d0 <z_add_timeout+0x144>)
   1d782:	f002 fb2a 	bl	1fdda <printk>
   1d786:	215d      	movs	r1, #93	; 0x5d
   1d788:	480c      	ldr	r0, [pc, #48]	; (1d7bc <z_add_timeout+0x130>)
   1d78a:	f002 fb6c 	bl	1fe66 <assert_post_action>
	__asm__ volatile(
   1d78e:	f388 8811 	msr	BASEPRI, r8
   1d792:	f3bf 8f6f 	isb	sy
		}
	}
}
   1d796:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			to->dticks -= t->dticks;
   1d79a:	1a9b      	subs	r3, r3, r2
   1d79c:	60a3      	str	r3, [r4, #8]
	return (node == list->tail) ? NULL : node->next;
   1d79e:	686b      	ldr	r3, [r5, #4]
   1d7a0:	429e      	cmp	r6, r3
   1d7a2:	d0b6      	beq.n	1d712 <z_add_timeout+0x86>
   1d7a4:	6836      	ldr	r6, [r6, #0]
   1d7a6:	e7b3      	b.n	1d710 <z_add_timeout+0x84>
   1d7a8:	000253b0 	.word	0x000253b0
   1d7ac:	0002538c 	.word	0x0002538c
   1d7b0:	00023451 	.word	0x00023451
   1d7b4:	000241f4 	.word	0x000241f4
   1d7b8:	200214ac 	.word	0x200214ac
   1d7bc:	00023852 	.word	0x00023852
   1d7c0:	00023878 	.word	0x00023878
   1d7c4:	0002388d 	.word	0x0002388d
   1d7c8:	200260a8 	.word	0x200260a8
   1d7cc:	000238a5 	.word	0x000238a5
   1d7d0:	000238bc 	.word	0x000238bc
   1d7d4:	000253d0 	.word	0x000253d0

0001d7d8 <z_abort_timeout>:

int z_abort_timeout(struct _timeout *to)
{
   1d7d8:	b538      	push	{r3, r4, r5, lr}
   1d7da:	4604      	mov	r4, r0
	__asm__ volatile(
   1d7dc:	f04f 0320 	mov.w	r3, #32
   1d7e0:	f3ef 8511 	mrs	r5, BASEPRI
   1d7e4:	f383 8811 	msr	BASEPRI, r3
   1d7e8:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1d7ec:	481a      	ldr	r0, [pc, #104]	; (1d858 <z_abort_timeout+0x80>)
   1d7ee:	f7ff fd3f 	bl	1d270 <z_spin_lock_valid>
   1d7f2:	b968      	cbnz	r0, 1d810 <z_abort_timeout+0x38>
   1d7f4:	234a      	movs	r3, #74	; 0x4a
   1d7f6:	4a19      	ldr	r2, [pc, #100]	; (1d85c <z_abort_timeout+0x84>)
   1d7f8:	4919      	ldr	r1, [pc, #100]	; (1d860 <z_abort_timeout+0x88>)
   1d7fa:	481a      	ldr	r0, [pc, #104]	; (1d864 <z_abort_timeout+0x8c>)
   1d7fc:	f002 faed 	bl	1fdda <printk>
   1d800:	4915      	ldr	r1, [pc, #84]	; (1d858 <z_abort_timeout+0x80>)
   1d802:	4819      	ldr	r0, [pc, #100]	; (1d868 <z_abort_timeout+0x90>)
   1d804:	f002 fae9 	bl	1fdda <printk>
   1d808:	214a      	movs	r1, #74	; 0x4a
   1d80a:	4814      	ldr	r0, [pc, #80]	; (1d85c <z_abort_timeout+0x84>)
   1d80c:	f002 fb2b 	bl	1fe66 <assert_post_action>
	z_spin_lock_set_owner(l);
   1d810:	4811      	ldr	r0, [pc, #68]	; (1d858 <z_abort_timeout+0x80>)
   1d812:	f7ff fd4b 	bl	1d2ac <z_spin_lock_set_owner>
	int ret = -EINVAL;

	LOCKED(&timeout_lock) {
		if (sys_dnode_is_linked(&to->node)) {
   1d816:	6823      	ldr	r3, [r4, #0]
   1d818:	b1db      	cbz	r3, 1d852 <z_abort_timeout+0x7a>
			remove_timeout(to);
   1d81a:	4620      	mov	r0, r4
   1d81c:	f7ff ff06 	bl	1d62c <remove_timeout>
			ret = 0;
   1d820:	2400      	movs	r4, #0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1d822:	480d      	ldr	r0, [pc, #52]	; (1d858 <z_abort_timeout+0x80>)
   1d824:	f7ff fd32 	bl	1d28c <z_spin_unlock_valid>
   1d828:	b968      	cbnz	r0, 1d846 <z_abort_timeout+0x6e>
   1d82a:	235d      	movs	r3, #93	; 0x5d
   1d82c:	4a0b      	ldr	r2, [pc, #44]	; (1d85c <z_abort_timeout+0x84>)
   1d82e:	490f      	ldr	r1, [pc, #60]	; (1d86c <z_abort_timeout+0x94>)
   1d830:	480c      	ldr	r0, [pc, #48]	; (1d864 <z_abort_timeout+0x8c>)
   1d832:	f002 fad2 	bl	1fdda <printk>
   1d836:	4908      	ldr	r1, [pc, #32]	; (1d858 <z_abort_timeout+0x80>)
   1d838:	480d      	ldr	r0, [pc, #52]	; (1d870 <z_abort_timeout+0x98>)
   1d83a:	f002 face 	bl	1fdda <printk>
   1d83e:	215d      	movs	r1, #93	; 0x5d
   1d840:	4806      	ldr	r0, [pc, #24]	; (1d85c <z_abort_timeout+0x84>)
   1d842:	f002 fb10 	bl	1fe66 <assert_post_action>
	__asm__ volatile(
   1d846:	f385 8811 	msr	BASEPRI, r5
   1d84a:	f3bf 8f6f 	isb	sy
		}
	}

	return ret;
}
   1d84e:	4620      	mov	r0, r4
   1d850:	bd38      	pop	{r3, r4, r5, pc}
	int ret = -EINVAL;
   1d852:	f06f 0415 	mvn.w	r4, #21
   1d856:	e7e4      	b.n	1d822 <z_abort_timeout+0x4a>
   1d858:	200214ac 	.word	0x200214ac
   1d85c:	00023852 	.word	0x00023852
   1d860:	00023878 	.word	0x00023878
   1d864:	00023451 	.word	0x00023451
   1d868:	0002388d 	.word	0x0002388d
   1d86c:	000238a5 	.word	0x000238a5
   1d870:	000238bc 	.word	0x000238bc

0001d874 <z_get_next_timeout_expiry>:

	return ticks - elapsed();
}

s32_t z_get_next_timeout_expiry(void)
{
   1d874:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
   1d876:	f04f 0320 	mov.w	r3, #32
   1d87a:	f3ef 8511 	mrs	r5, BASEPRI
   1d87e:	f383 8811 	msr	BASEPRI, r3
   1d882:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1d886:	4818      	ldr	r0, [pc, #96]	; (1d8e8 <z_get_next_timeout_expiry+0x74>)
   1d888:	f7ff fcf2 	bl	1d270 <z_spin_lock_valid>
   1d88c:	b968      	cbnz	r0, 1d8aa <z_get_next_timeout_expiry+0x36>
   1d88e:	234a      	movs	r3, #74	; 0x4a
   1d890:	4a16      	ldr	r2, [pc, #88]	; (1d8ec <z_get_next_timeout_expiry+0x78>)
   1d892:	4917      	ldr	r1, [pc, #92]	; (1d8f0 <z_get_next_timeout_expiry+0x7c>)
   1d894:	4817      	ldr	r0, [pc, #92]	; (1d8f4 <z_get_next_timeout_expiry+0x80>)
   1d896:	f002 faa0 	bl	1fdda <printk>
   1d89a:	4913      	ldr	r1, [pc, #76]	; (1d8e8 <z_get_next_timeout_expiry+0x74>)
   1d89c:	4816      	ldr	r0, [pc, #88]	; (1d8f8 <z_get_next_timeout_expiry+0x84>)
   1d89e:	f002 fa9c 	bl	1fdda <printk>
   1d8a2:	214a      	movs	r1, #74	; 0x4a
   1d8a4:	4811      	ldr	r0, [pc, #68]	; (1d8ec <z_get_next_timeout_expiry+0x78>)
   1d8a6:	f002 fade 	bl	1fe66 <assert_post_action>
	z_spin_lock_set_owner(l);
   1d8aa:	480f      	ldr	r0, [pc, #60]	; (1d8e8 <z_get_next_timeout_expiry+0x74>)
   1d8ac:	f7ff fcfe 	bl	1d2ac <z_spin_lock_set_owner>
	s32_t ret = K_FOREVER;

	LOCKED(&timeout_lock) {
		ret = next_timeout();
   1d8b0:	f7ff fed0 	bl	1d654 <next_timeout>
   1d8b4:	4604      	mov	r4, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1d8b6:	480c      	ldr	r0, [pc, #48]	; (1d8e8 <z_get_next_timeout_expiry+0x74>)
   1d8b8:	f7ff fce8 	bl	1d28c <z_spin_unlock_valid>
   1d8bc:	b968      	cbnz	r0, 1d8da <z_get_next_timeout_expiry+0x66>
   1d8be:	235d      	movs	r3, #93	; 0x5d
   1d8c0:	4a0a      	ldr	r2, [pc, #40]	; (1d8ec <z_get_next_timeout_expiry+0x78>)
   1d8c2:	490e      	ldr	r1, [pc, #56]	; (1d8fc <z_get_next_timeout_expiry+0x88>)
   1d8c4:	480b      	ldr	r0, [pc, #44]	; (1d8f4 <z_get_next_timeout_expiry+0x80>)
   1d8c6:	f002 fa88 	bl	1fdda <printk>
   1d8ca:	4907      	ldr	r1, [pc, #28]	; (1d8e8 <z_get_next_timeout_expiry+0x74>)
   1d8cc:	480c      	ldr	r0, [pc, #48]	; (1d900 <z_get_next_timeout_expiry+0x8c>)
   1d8ce:	f002 fa84 	bl	1fdda <printk>
   1d8d2:	215d      	movs	r1, #93	; 0x5d
   1d8d4:	4805      	ldr	r0, [pc, #20]	; (1d8ec <z_get_next_timeout_expiry+0x78>)
   1d8d6:	f002 fac6 	bl	1fe66 <assert_post_action>
	__asm__ volatile(
   1d8da:	f385 8811 	msr	BASEPRI, r5
   1d8de:	f3bf 8f6f 	isb	sy
	}
	return ret;
}
   1d8e2:	4620      	mov	r0, r4
   1d8e4:	bd38      	pop	{r3, r4, r5, pc}
   1d8e6:	bf00      	nop
   1d8e8:	200214ac 	.word	0x200214ac
   1d8ec:	00023852 	.word	0x00023852
   1d8f0:	00023878 	.word	0x00023878
   1d8f4:	00023451 	.word	0x00023451
   1d8f8:	0002388d 	.word	0x0002388d
   1d8fc:	000238a5 	.word	0x000238a5
   1d900:	000238bc 	.word	0x000238bc

0001d904 <z_set_timeout_expiry>:

void z_set_timeout_expiry(s32_t ticks, bool idle)
{
   1d904:	b570      	push	{r4, r5, r6, lr}
   1d906:	4604      	mov	r4, r0
   1d908:	460e      	mov	r6, r1
	__asm__ volatile(
   1d90a:	f04f 0320 	mov.w	r3, #32
   1d90e:	f3ef 8511 	mrs	r5, BASEPRI
   1d912:	f383 8811 	msr	BASEPRI, r3
   1d916:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1d91a:	481b      	ldr	r0, [pc, #108]	; (1d988 <z_set_timeout_expiry+0x84>)
   1d91c:	f7ff fca8 	bl	1d270 <z_spin_lock_valid>
   1d920:	b968      	cbnz	r0, 1d93e <z_set_timeout_expiry+0x3a>
   1d922:	234a      	movs	r3, #74	; 0x4a
   1d924:	4a19      	ldr	r2, [pc, #100]	; (1d98c <z_set_timeout_expiry+0x88>)
   1d926:	491a      	ldr	r1, [pc, #104]	; (1d990 <z_set_timeout_expiry+0x8c>)
   1d928:	481a      	ldr	r0, [pc, #104]	; (1d994 <z_set_timeout_expiry+0x90>)
   1d92a:	f002 fa56 	bl	1fdda <printk>
   1d92e:	4916      	ldr	r1, [pc, #88]	; (1d988 <z_set_timeout_expiry+0x84>)
   1d930:	4819      	ldr	r0, [pc, #100]	; (1d998 <z_set_timeout_expiry+0x94>)
   1d932:	f002 fa52 	bl	1fdda <printk>
   1d936:	214a      	movs	r1, #74	; 0x4a
   1d938:	4814      	ldr	r0, [pc, #80]	; (1d98c <z_set_timeout_expiry+0x88>)
   1d93a:	f002 fa94 	bl	1fe66 <assert_post_action>
	z_spin_lock_set_owner(l);
   1d93e:	4812      	ldr	r0, [pc, #72]	; (1d988 <z_set_timeout_expiry+0x84>)
   1d940:	f7ff fcb4 	bl	1d2ac <z_spin_lock_set_owner>
	LOCKED(&timeout_lock) {
		int next = next_timeout();
   1d944:	f7ff fe86 	bl	1d654 <next_timeout>
		 * SMP can't use this optimization though: we don't
		 * know when context switches happen until interrupt
		 * exit and so can't get the timeslicing clamp folded
		 * in.
		 */
		if (!imminent && (sooner || IS_ENABLED(CONFIG_SMP))) {
   1d948:	2801      	cmp	r0, #1
   1d94a:	dd05      	ble.n	1d958 <z_set_timeout_expiry+0x54>
   1d94c:	42a0      	cmp	r0, r4
   1d94e:	dd03      	ble.n	1d958 <z_set_timeout_expiry+0x54>
			z_clock_set_timeout(ticks, idle);
   1d950:	4631      	mov	r1, r6
   1d952:	4620      	mov	r0, r4
   1d954:	f7f1 f952 	bl	ebfc <z_clock_set_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1d958:	480b      	ldr	r0, [pc, #44]	; (1d988 <z_set_timeout_expiry+0x84>)
   1d95a:	f7ff fc97 	bl	1d28c <z_spin_unlock_valid>
   1d95e:	b968      	cbnz	r0, 1d97c <z_set_timeout_expiry+0x78>
   1d960:	235d      	movs	r3, #93	; 0x5d
   1d962:	4a0a      	ldr	r2, [pc, #40]	; (1d98c <z_set_timeout_expiry+0x88>)
   1d964:	490d      	ldr	r1, [pc, #52]	; (1d99c <z_set_timeout_expiry+0x98>)
   1d966:	480b      	ldr	r0, [pc, #44]	; (1d994 <z_set_timeout_expiry+0x90>)
   1d968:	f002 fa37 	bl	1fdda <printk>
   1d96c:	4906      	ldr	r1, [pc, #24]	; (1d988 <z_set_timeout_expiry+0x84>)
   1d96e:	480c      	ldr	r0, [pc, #48]	; (1d9a0 <z_set_timeout_expiry+0x9c>)
   1d970:	f002 fa33 	bl	1fdda <printk>
   1d974:	215d      	movs	r1, #93	; 0x5d
   1d976:	4805      	ldr	r0, [pc, #20]	; (1d98c <z_set_timeout_expiry+0x88>)
   1d978:	f002 fa75 	bl	1fe66 <assert_post_action>
	__asm__ volatile(
   1d97c:	f385 8811 	msr	BASEPRI, r5
   1d980:	f3bf 8f6f 	isb	sy
		}
	}
}
   1d984:	bd70      	pop	{r4, r5, r6, pc}
   1d986:	bf00      	nop
   1d988:	200214ac 	.word	0x200214ac
   1d98c:	00023852 	.word	0x00023852
   1d990:	00023878 	.word	0x00023878
   1d994:	00023451 	.word	0x00023451
   1d998:	0002388d 	.word	0x0002388d
   1d99c:	000238a5 	.word	0x000238a5
   1d9a0:	000238bc 	.word	0x000238bc

0001d9a4 <z_clock_announce>:

void z_clock_announce(s32_t ticks)
{
   1d9a4:	e92d 4bf0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, fp, lr}
   1d9a8:	4604      	mov	r4, r0
#ifdef CONFIG_TIMESLICING
	z_time_slice(ticks);
   1d9aa:	f7fe fe45 	bl	1c638 <z_time_slice>
	__asm__ volatile(
   1d9ae:	f04f 0320 	mov.w	r3, #32
   1d9b2:	f3ef 8511 	mrs	r5, BASEPRI
   1d9b6:	f383 8811 	msr	BASEPRI, r3
   1d9ba:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1d9be:	4848      	ldr	r0, [pc, #288]	; (1dae0 <z_clock_announce+0x13c>)
   1d9c0:	f7ff fc56 	bl	1d270 <z_spin_lock_valid>
   1d9c4:	b968      	cbnz	r0, 1d9e2 <z_clock_announce+0x3e>
   1d9c6:	234a      	movs	r3, #74	; 0x4a
   1d9c8:	4a46      	ldr	r2, [pc, #280]	; (1dae4 <z_clock_announce+0x140>)
   1d9ca:	4947      	ldr	r1, [pc, #284]	; (1dae8 <z_clock_announce+0x144>)
   1d9cc:	4847      	ldr	r0, [pc, #284]	; (1daec <z_clock_announce+0x148>)
   1d9ce:	f002 fa04 	bl	1fdda <printk>
   1d9d2:	4943      	ldr	r1, [pc, #268]	; (1dae0 <z_clock_announce+0x13c>)
   1d9d4:	4846      	ldr	r0, [pc, #280]	; (1daf0 <z_clock_announce+0x14c>)
   1d9d6:	f002 fa00 	bl	1fdda <printk>
   1d9da:	214a      	movs	r1, #74	; 0x4a
   1d9dc:	4841      	ldr	r0, [pc, #260]	; (1dae4 <z_clock_announce+0x140>)
   1d9de:	f002 fa42 	bl	1fe66 <assert_post_action>
	z_spin_lock_set_owner(l);
   1d9e2:	4f44      	ldr	r7, [pc, #272]	; (1daf4 <z_clock_announce+0x150>)
#endif

	k_spinlock_key_t key = k_spin_lock(&timeout_lock);

	announce_remaining = ticks;
   1d9e4:	4e44      	ldr	r6, [pc, #272]	; (1daf8 <z_clock_announce+0x154>)
   1d9e6:	46b9      	mov	r9, r7
   1d9e8:	483d      	ldr	r0, [pc, #244]	; (1dae0 <z_clock_announce+0x13c>)
	return list->head == list;
   1d9ea:	f8df 8118 	ldr.w	r8, [pc, #280]	; 1db04 <z_clock_announce+0x160>
   1d9ee:	f7ff fc5d 	bl	1d2ac <z_spin_lock_set_owner>
   1d9f2:	6034      	str	r4, [r6, #0]
   1d9f4:	f8d8 4000 	ldr.w	r4, [r8]
   1d9f8:	6832      	ldr	r2, [r6, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1d9fa:	4544      	cmp	r4, r8
   1d9fc:	e9d7 bc00 	ldrd	fp, ip, [r7]
   1da00:	d005      	beq.n	1da0e <z_clock_announce+0x6a>

	while (first() != NULL && first()->dticks <= announce_remaining) {
   1da02:	b124      	cbz	r4, 1da0e <z_clock_announce+0x6a>
   1da04:	68a3      	ldr	r3, [r4, #8]
   1da06:	4293      	cmp	r3, r2
   1da08:	dd26      	ble.n	1da58 <z_clock_announce+0xb4>
		t->fn(t);
		key = k_spin_lock(&timeout_lock);
	}

	if (first() != NULL) {
		first()->dticks -= announce_remaining;
   1da0a:	1a9b      	subs	r3, r3, r2
   1da0c:	60a3      	str	r3, [r4, #8]
	}

	curr_tick += announce_remaining;
	announce_remaining = 0;
   1da0e:	2400      	movs	r4, #0
	curr_tick += announce_remaining;
   1da10:	eb1b 0002 	adds.w	r0, fp, r2
   1da14:	eb4c 71e2 	adc.w	r1, ip, r2, asr #31
   1da18:	e9c9 0100 	strd	r0, r1, [r9]
	announce_remaining = 0;
   1da1c:	6034      	str	r4, [r6, #0]

	z_clock_set_timeout(next_timeout(), false);
   1da1e:	f7ff fe19 	bl	1d654 <next_timeout>
   1da22:	4621      	mov	r1, r4
   1da24:	f7f1 f8ea 	bl	ebfc <z_clock_set_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1da28:	482d      	ldr	r0, [pc, #180]	; (1dae0 <z_clock_announce+0x13c>)
   1da2a:	f7ff fc2f 	bl	1d28c <z_spin_unlock_valid>
   1da2e:	b968      	cbnz	r0, 1da4c <z_clock_announce+0xa8>
   1da30:	235d      	movs	r3, #93	; 0x5d
   1da32:	4a2c      	ldr	r2, [pc, #176]	; (1dae4 <z_clock_announce+0x140>)
   1da34:	4931      	ldr	r1, [pc, #196]	; (1dafc <z_clock_announce+0x158>)
   1da36:	482d      	ldr	r0, [pc, #180]	; (1daec <z_clock_announce+0x148>)
   1da38:	f002 f9cf 	bl	1fdda <printk>
   1da3c:	4928      	ldr	r1, [pc, #160]	; (1dae0 <z_clock_announce+0x13c>)
   1da3e:	4830      	ldr	r0, [pc, #192]	; (1db00 <z_clock_announce+0x15c>)
   1da40:	f002 f9cb 	bl	1fdda <printk>
   1da44:	215d      	movs	r1, #93	; 0x5d
   1da46:	4827      	ldr	r0, [pc, #156]	; (1dae4 <z_clock_announce+0x140>)
   1da48:	f002 fa0d 	bl	1fe66 <assert_post_action>
	__asm__ volatile(
   1da4c:	f385 8811 	msr	BASEPRI, r5
   1da50:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&timeout_lock, key);
}
   1da54:	e8bd 8bf0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, fp, pc}
		curr_tick += dt;
   1da58:	eb1b 0003 	adds.w	r0, fp, r3
   1da5c:	eb4c 71e3 	adc.w	r1, ip, r3, asr #31
		announce_remaining -= dt;
   1da60:	1ad3      	subs	r3, r2, r3
   1da62:	6033      	str	r3, [r6, #0]
		t->dticks = 0;
   1da64:	2300      	movs	r3, #0
		curr_tick += dt;
   1da66:	e9c7 0100 	strd	r0, r1, [r7]
		t->dticks = 0;
   1da6a:	60a3      	str	r3, [r4, #8]
		remove_timeout(t);
   1da6c:	4620      	mov	r0, r4
   1da6e:	f7ff fddd 	bl	1d62c <remove_timeout>
   1da72:	481b      	ldr	r0, [pc, #108]	; (1dae0 <z_clock_announce+0x13c>)
   1da74:	f7ff fc0a 	bl	1d28c <z_spin_unlock_valid>
   1da78:	b968      	cbnz	r0, 1da96 <z_clock_announce+0xf2>
   1da7a:	235d      	movs	r3, #93	; 0x5d
   1da7c:	4a19      	ldr	r2, [pc, #100]	; (1dae4 <z_clock_announce+0x140>)
   1da7e:	491f      	ldr	r1, [pc, #124]	; (1dafc <z_clock_announce+0x158>)
   1da80:	481a      	ldr	r0, [pc, #104]	; (1daec <z_clock_announce+0x148>)
   1da82:	f002 f9aa 	bl	1fdda <printk>
   1da86:	4916      	ldr	r1, [pc, #88]	; (1dae0 <z_clock_announce+0x13c>)
   1da88:	481d      	ldr	r0, [pc, #116]	; (1db00 <z_clock_announce+0x15c>)
   1da8a:	f002 f9a6 	bl	1fdda <printk>
   1da8e:	215d      	movs	r1, #93	; 0x5d
   1da90:	4814      	ldr	r0, [pc, #80]	; (1dae4 <z_clock_announce+0x140>)
   1da92:	f002 f9e8 	bl	1fe66 <assert_post_action>
   1da96:	f385 8811 	msr	BASEPRI, r5
   1da9a:	f3bf 8f6f 	isb	sy
		t->fn(t);
   1da9e:	68e3      	ldr	r3, [r4, #12]
   1daa0:	4620      	mov	r0, r4
   1daa2:	4798      	blx	r3
	__asm__ volatile(
   1daa4:	f04f 0320 	mov.w	r3, #32
   1daa8:	f3ef 8511 	mrs	r5, BASEPRI
   1daac:	f383 8811 	msr	BASEPRI, r3
   1dab0:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1dab4:	480a      	ldr	r0, [pc, #40]	; (1dae0 <z_clock_announce+0x13c>)
   1dab6:	f7ff fbdb 	bl	1d270 <z_spin_lock_valid>
   1daba:	b968      	cbnz	r0, 1dad8 <z_clock_announce+0x134>
   1dabc:	234a      	movs	r3, #74	; 0x4a
   1dabe:	4a09      	ldr	r2, [pc, #36]	; (1dae4 <z_clock_announce+0x140>)
   1dac0:	4909      	ldr	r1, [pc, #36]	; (1dae8 <z_clock_announce+0x144>)
   1dac2:	480a      	ldr	r0, [pc, #40]	; (1daec <z_clock_announce+0x148>)
   1dac4:	f002 f989 	bl	1fdda <printk>
   1dac8:	4905      	ldr	r1, [pc, #20]	; (1dae0 <z_clock_announce+0x13c>)
   1daca:	4809      	ldr	r0, [pc, #36]	; (1daf0 <z_clock_announce+0x14c>)
   1dacc:	f002 f985 	bl	1fdda <printk>
   1dad0:	214a      	movs	r1, #74	; 0x4a
   1dad2:	4804      	ldr	r0, [pc, #16]	; (1dae4 <z_clock_announce+0x140>)
   1dad4:	f002 f9c7 	bl	1fe66 <assert_post_action>
	z_spin_lock_set_owner(l);
   1dad8:	4801      	ldr	r0, [pc, #4]	; (1dae0 <z_clock_announce+0x13c>)
   1dada:	f7ff fbe7 	bl	1d2ac <z_spin_lock_set_owner>
	return k;
   1dade:	e789      	b.n	1d9f4 <z_clock_announce+0x50>
   1dae0:	200214ac 	.word	0x200214ac
   1dae4:	00023852 	.word	0x00023852
   1dae8:	00023878 	.word	0x00023878
   1daec:	00023451 	.word	0x00023451
   1daf0:	0002388d 	.word	0x0002388d
   1daf4:	20020000 	.word	0x20020000
   1daf8:	200214a8 	.word	0x200214a8
   1dafc:	000238a5 	.word	0x000238a5
   1db00:	000238bc 	.word	0x000238bc
   1db04:	200260a8 	.word	0x200260a8

0001db08 <z_tick_get>:

s64_t z_tick_get(void)
{
   1db08:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1db0c:	f04f 0320 	mov.w	r3, #32
   1db10:	f3ef 8611 	mrs	r6, BASEPRI
   1db14:	f383 8811 	msr	BASEPRI, r3
   1db18:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1db1c:	481b      	ldr	r0, [pc, #108]	; (1db8c <z_tick_get+0x84>)
   1db1e:	f7ff fba7 	bl	1d270 <z_spin_lock_valid>
   1db22:	b968      	cbnz	r0, 1db40 <z_tick_get+0x38>
   1db24:	234a      	movs	r3, #74	; 0x4a
   1db26:	4a1a      	ldr	r2, [pc, #104]	; (1db90 <z_tick_get+0x88>)
   1db28:	491a      	ldr	r1, [pc, #104]	; (1db94 <z_tick_get+0x8c>)
   1db2a:	481b      	ldr	r0, [pc, #108]	; (1db98 <z_tick_get+0x90>)
   1db2c:	f002 f955 	bl	1fdda <printk>
   1db30:	4916      	ldr	r1, [pc, #88]	; (1db8c <z_tick_get+0x84>)
   1db32:	481a      	ldr	r0, [pc, #104]	; (1db9c <z_tick_get+0x94>)
   1db34:	f002 f951 	bl	1fdda <printk>
   1db38:	214a      	movs	r1, #74	; 0x4a
   1db3a:	4815      	ldr	r0, [pc, #84]	; (1db90 <z_tick_get+0x88>)
   1db3c:	f002 f993 	bl	1fe66 <assert_post_action>
	z_spin_lock_set_owner(l);
   1db40:	4812      	ldr	r0, [pc, #72]	; (1db8c <z_tick_get+0x84>)
   1db42:	f7ff fbb3 	bl	1d2ac <z_spin_lock_set_owner>
	u64_t t = 0U;

	LOCKED(&timeout_lock) {
		t = curr_tick + z_clock_elapsed();
   1db46:	f7f1 f8e7 	bl	ed18 <z_clock_elapsed>
   1db4a:	4b15      	ldr	r3, [pc, #84]	; (1dba0 <z_tick_get+0x98>)
   1db4c:	e9d3 4500 	ldrd	r4, r5, [r3]
   1db50:	1827      	adds	r7, r4, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1db52:	480e      	ldr	r0, [pc, #56]	; (1db8c <z_tick_get+0x84>)
   1db54:	f145 0800 	adc.w	r8, r5, #0
   1db58:	f7ff fb98 	bl	1d28c <z_spin_unlock_valid>
   1db5c:	b968      	cbnz	r0, 1db7a <z_tick_get+0x72>
   1db5e:	235d      	movs	r3, #93	; 0x5d
   1db60:	4a0b      	ldr	r2, [pc, #44]	; (1db90 <z_tick_get+0x88>)
   1db62:	4910      	ldr	r1, [pc, #64]	; (1dba4 <z_tick_get+0x9c>)
   1db64:	480c      	ldr	r0, [pc, #48]	; (1db98 <z_tick_get+0x90>)
   1db66:	f002 f938 	bl	1fdda <printk>
   1db6a:	4908      	ldr	r1, [pc, #32]	; (1db8c <z_tick_get+0x84>)
   1db6c:	480e      	ldr	r0, [pc, #56]	; (1dba8 <z_tick_get+0xa0>)
   1db6e:	f002 f934 	bl	1fdda <printk>
   1db72:	215d      	movs	r1, #93	; 0x5d
   1db74:	4806      	ldr	r0, [pc, #24]	; (1db90 <z_tick_get+0x88>)
   1db76:	f002 f976 	bl	1fe66 <assert_post_action>
	__asm__ volatile(
   1db7a:	f386 8811 	msr	BASEPRI, r6
   1db7e:	f3bf 8f6f 	isb	sy
	}
	return t;
}
   1db82:	4638      	mov	r0, r7
   1db84:	4641      	mov	r1, r8
   1db86:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1db8a:	bf00      	nop
   1db8c:	200214ac 	.word	0x200214ac
   1db90:	00023852 	.word	0x00023852
   1db94:	00023878 	.word	0x00023878
   1db98:	00023451 	.word	0x00023451
   1db9c:	0002388d 	.word	0x0002388d
   1dba0:	20020000 	.word	0x20020000
   1dba4:	000238a5 	.word	0x000238a5
   1dba8:	000238bc 	.word	0x000238bc

0001dbac <k_poll_poller_cb>:

	return events_registered;
}

static int k_poll_poller_cb(struct k_poll_event *event, u32_t state)
{
   1dbac:	b538      	push	{r3, r4, r5, lr}
	struct k_thread *thread = event->poller->thread;
   1dbae:	6883      	ldr	r3, [r0, #8]
{
   1dbb0:	460d      	mov	r5, r1
	struct k_thread *thread = event->poller->thread;
   1dbb2:	685c      	ldr	r4, [r3, #4]

	__ASSERT(thread != NULL, "poller should have a thread\n");
   1dbb4:	b964      	cbnz	r4, 1dbd0 <k_poll_poller_cb+0x24>
   1dbb6:	4915      	ldr	r1, [pc, #84]	; (1dc0c <k_poll_poller_cb+0x60>)
   1dbb8:	23e0      	movs	r3, #224	; 0xe0
   1dbba:	4a15      	ldr	r2, [pc, #84]	; (1dc10 <k_poll_poller_cb+0x64>)
   1dbbc:	4815      	ldr	r0, [pc, #84]	; (1dc14 <k_poll_poller_cb+0x68>)
   1dbbe:	f002 f90c 	bl	1fdda <printk>
   1dbc2:	4815      	ldr	r0, [pc, #84]	; (1dc18 <k_poll_poller_cb+0x6c>)
   1dbc4:	f002 f909 	bl	1fdda <printk>
   1dbc8:	21e0      	movs	r1, #224	; 0xe0
   1dbca:	4811      	ldr	r0, [pc, #68]	; (1dc10 <k_poll_poller_cb+0x64>)
   1dbcc:	f002 f94b 	bl	1fe66 <assert_post_action>

	if (!z_is_thread_pending(thread)) {
   1dbd0:	7b63      	ldrb	r3, [r4, #13]
   1dbd2:	079a      	lsls	r2, r3, #30
   1dbd4:	d401      	bmi.n	1dbda <k_poll_poller_cb+0x2e>
		return 0;
   1dbd6:	2000      	movs	r0, #0
	}

	z_ready_thread(thread);

	return 0;
}
   1dbd8:	bd38      	pop	{r3, r4, r5, pc}
	if (z_is_thread_timeout_expired(thread)) {
   1dbda:	6a23      	ldr	r3, [r4, #32]
   1dbdc:	3302      	adds	r3, #2
   1dbde:	d012      	beq.n	1dc06 <k_poll_poller_cb+0x5a>
	z_unpend_thread(thread);
   1dbe0:	4620      	mov	r0, r4
   1dbe2:	f7fe faa9 	bl	1c138 <z_unpend_thread>
	arch_thread_return_value_set(thread,
   1dbe6:	2d08      	cmp	r5, #8
   1dbe8:	bf0c      	ite	eq
   1dbea:	f06f 0303 	mvneq.w	r3, #3
   1dbee:	2300      	movne	r3, #0
   1dbf0:	66a3      	str	r3, [r4, #104]	; 0x68
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
   1dbf2:	7b63      	ldrb	r3, [r4, #13]
   1dbf4:	06db      	lsls	r3, r3, #27
   1dbf6:	d1ee      	bne.n	1dbd6 <k_poll_poller_cb+0x2a>
	if (!z_is_thread_ready(thread)) {
   1dbf8:	69a5      	ldr	r5, [r4, #24]
   1dbfa:	2d00      	cmp	r5, #0
   1dbfc:	d1eb      	bne.n	1dbd6 <k_poll_poller_cb+0x2a>
		z_add_thread_to_ready_q(thread);
   1dbfe:	4620      	mov	r0, r4
   1dc00:	f7fe fba2 	bl	1c348 <z_add_thread_to_ready_q>
	return 0;
   1dc04:	e7e7      	b.n	1dbd6 <k_poll_poller_cb+0x2a>
		return -EAGAIN;
   1dc06:	f06f 000a 	mvn.w	r0, #10
   1dc0a:	e7e5      	b.n	1dbd8 <k_poll_poller_cb+0x2c>
   1dc0c:	0002554d 	.word	0x0002554d
   1dc10:	0002552c 	.word	0x0002552c
   1dc14:	00023451 	.word	0x00023451
   1dc18:	00025563 	.word	0x00025563

0001dc1c <clear_event_registrations>:
{
   1dc1c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1dc20:	2414      	movs	r4, #20
   1dc22:	4680      	mov	r8, r0
   1dc24:	4617      	mov	r7, r2
	while (num_events--) {
   1dc26:	fb04 0401 	mla	r4, r4, r1, r0
		__ASSERT(false, "invalid event type\n");
   1dc2a:	4d48      	ldr	r5, [pc, #288]	; (1dd4c <clear_event_registrations+0x130>)
   1dc2c:	f8df 9158 	ldr.w	r9, [pc, #344]	; 1dd88 <clear_event_registrations+0x16c>
   1dc30:	4e47      	ldr	r6, [pc, #284]	; (1dd50 <clear_event_registrations+0x134>)
	while (num_events--) {
   1dc32:	4544      	cmp	r4, r8
   1dc34:	d101      	bne.n	1dc3a <clear_event_registrations+0x1e>
}
   1dc36:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	event->poller = NULL;
   1dc3a:	2300      	movs	r3, #0
   1dc3c:	f844 3c0c 	str.w	r3, [r4, #-12]
	switch (event->type) {
   1dc40:	f814 3c07 	ldrb.w	r3, [r4, #-7]
   1dc44:	f003 030f 	and.w	r3, r3, #15
   1dc48:	2b04      	cmp	r3, #4
   1dc4a:	d83d      	bhi.n	1dcc8 <clear_event_registrations+0xac>
   1dc4c:	e8df f003 	tbb	[pc, r3]
   1dc50:	3c032d49 	.word	0x3c032d49
   1dc54:	1e          	.byte	0x1e
   1dc55:	00          	.byte	0x00
		__ASSERT(event->sem != NULL, "invalid semaphore\n");
   1dc56:	f854 3c04 	ldr.w	r3, [r4, #-4]
   1dc5a:	b963      	cbnz	r3, 1dc76 <clear_event_registrations+0x5a>
   1dc5c:	493d      	ldr	r1, [pc, #244]	; (1dd54 <clear_event_registrations+0x138>)
   1dc5e:	2396      	movs	r3, #150	; 0x96
   1dc60:	462a      	mov	r2, r5
   1dc62:	4630      	mov	r0, r6
   1dc64:	f002 f8b9 	bl	1fdda <printk>
   1dc68:	483b      	ldr	r0, [pc, #236]	; (1dd58 <clear_event_registrations+0x13c>)
   1dc6a:	f002 f8b6 	bl	1fdda <printk>
   1dc6e:	2196      	movs	r1, #150	; 0x96
		__ASSERT(event->signal != NULL, "invalid poll signal\n");
   1dc70:	4628      	mov	r0, r5
   1dc72:	f002 f8f8 	bl	1fe66 <assert_post_action>
	if (remove && sys_dnode_is_linked(&event->_node)) {
   1dc76:	f854 3c14 	ldr.w	r3, [r4, #-20]
   1dc7a:	b393      	cbz	r3, 1dce2 <clear_event_registrations+0xc6>
	node->prev->next = node->next;
   1dc7c:	f854 2c10 	ldr.w	r2, [r4, #-16]
   1dc80:	6013      	str	r3, [r2, #0]
	node->next->prev = node->prev;
   1dc82:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   1dc84:	2300      	movs	r3, #0
	node->prev = NULL;
   1dc86:	e944 3305 	strd	r3, r3, [r4, #-20]
   1dc8a:	e02a      	b.n	1dce2 <clear_event_registrations+0xc6>
		__ASSERT(event->queue != NULL, "invalid queue\n");
   1dc8c:	f854 3c04 	ldr.w	r3, [r4, #-4]
   1dc90:	2b00      	cmp	r3, #0
   1dc92:	d1f0      	bne.n	1dc76 <clear_event_registrations+0x5a>
   1dc94:	4931      	ldr	r1, [pc, #196]	; (1dd5c <clear_event_registrations+0x140>)
   1dc96:	239a      	movs	r3, #154	; 0x9a
   1dc98:	462a      	mov	r2, r5
   1dc9a:	4630      	mov	r0, r6
   1dc9c:	f002 f89d 	bl	1fdda <printk>
   1dca0:	482f      	ldr	r0, [pc, #188]	; (1dd60 <clear_event_registrations+0x144>)
   1dca2:	f002 f89a 	bl	1fdda <printk>
   1dca6:	219a      	movs	r1, #154	; 0x9a
   1dca8:	e7e2      	b.n	1dc70 <clear_event_registrations+0x54>
		__ASSERT(event->signal != NULL, "invalid poll signal\n");
   1dcaa:	f854 3c04 	ldr.w	r3, [r4, #-4]
   1dcae:	2b00      	cmp	r3, #0
   1dcb0:	d1e1      	bne.n	1dc76 <clear_event_registrations+0x5a>
   1dcb2:	492c      	ldr	r1, [pc, #176]	; (1dd64 <clear_event_registrations+0x148>)
   1dcb4:	239e      	movs	r3, #158	; 0x9e
   1dcb6:	462a      	mov	r2, r5
   1dcb8:	4630      	mov	r0, r6
   1dcba:	f002 f88e 	bl	1fdda <printk>
   1dcbe:	482a      	ldr	r0, [pc, #168]	; (1dd68 <clear_event_registrations+0x14c>)
   1dcc0:	f002 f88b 	bl	1fdda <printk>
   1dcc4:	219e      	movs	r1, #158	; 0x9e
   1dcc6:	e7d3      	b.n	1dc70 <clear_event_registrations+0x54>
		__ASSERT(false, "invalid event type\n");
   1dcc8:	4649      	mov	r1, r9
   1dcca:	23a5      	movs	r3, #165	; 0xa5
   1dccc:	462a      	mov	r2, r5
   1dcce:	4630      	mov	r0, r6
   1dcd0:	f002 f883 	bl	1fdda <printk>
   1dcd4:	4825      	ldr	r0, [pc, #148]	; (1dd6c <clear_event_registrations+0x150>)
   1dcd6:	f002 f880 	bl	1fdda <printk>
   1dcda:	21a5      	movs	r1, #165	; 0xa5
   1dcdc:	4628      	mov	r0, r5
   1dcde:	f002 f8c2 	bl	1fe66 <assert_post_action>
   1dce2:	4823      	ldr	r0, [pc, #140]	; (1dd70 <clear_event_registrations+0x154>)
   1dce4:	f7ff fad2 	bl	1d28c <z_spin_unlock_valid>
   1dce8:	b968      	cbnz	r0, 1dd06 <clear_event_registrations+0xea>
   1dcea:	235d      	movs	r3, #93	; 0x5d
   1dcec:	4a21      	ldr	r2, [pc, #132]	; (1dd74 <clear_event_registrations+0x158>)
   1dcee:	4922      	ldr	r1, [pc, #136]	; (1dd78 <clear_event_registrations+0x15c>)
   1dcf0:	4630      	mov	r0, r6
   1dcf2:	f002 f872 	bl	1fdda <printk>
   1dcf6:	491e      	ldr	r1, [pc, #120]	; (1dd70 <clear_event_registrations+0x154>)
   1dcf8:	4820      	ldr	r0, [pc, #128]	; (1dd7c <clear_event_registrations+0x160>)
   1dcfa:	f002 f86e 	bl	1fdda <printk>
   1dcfe:	215d      	movs	r1, #93	; 0x5d
   1dd00:	481c      	ldr	r0, [pc, #112]	; (1dd74 <clear_event_registrations+0x158>)
   1dd02:	f002 f8b0 	bl	1fe66 <assert_post_action>
   1dd06:	f387 8811 	msr	BASEPRI, r7
   1dd0a:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
   1dd0e:	f04f 0320 	mov.w	r3, #32
   1dd12:	f3ef 8711 	mrs	r7, BASEPRI
   1dd16:	f383 8811 	msr	BASEPRI, r3
   1dd1a:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1dd1e:	4814      	ldr	r0, [pc, #80]	; (1dd70 <clear_event_registrations+0x154>)
   1dd20:	f7ff faa6 	bl	1d270 <z_spin_lock_valid>
   1dd24:	b968      	cbnz	r0, 1dd42 <clear_event_registrations+0x126>
   1dd26:	234a      	movs	r3, #74	; 0x4a
   1dd28:	4a12      	ldr	r2, [pc, #72]	; (1dd74 <clear_event_registrations+0x158>)
   1dd2a:	4915      	ldr	r1, [pc, #84]	; (1dd80 <clear_event_registrations+0x164>)
   1dd2c:	4630      	mov	r0, r6
   1dd2e:	f002 f854 	bl	1fdda <printk>
   1dd32:	490f      	ldr	r1, [pc, #60]	; (1dd70 <clear_event_registrations+0x154>)
   1dd34:	4813      	ldr	r0, [pc, #76]	; (1dd84 <clear_event_registrations+0x168>)
   1dd36:	f002 f850 	bl	1fdda <printk>
   1dd3a:	214a      	movs	r1, #74	; 0x4a
   1dd3c:	480d      	ldr	r0, [pc, #52]	; (1dd74 <clear_event_registrations+0x158>)
   1dd3e:	f002 f892 	bl	1fe66 <assert_post_action>
	z_spin_lock_set_owner(l);
   1dd42:	480b      	ldr	r0, [pc, #44]	; (1dd70 <clear_event_registrations+0x154>)
   1dd44:	f7ff fab2 	bl	1d2ac <z_spin_lock_set_owner>
	return k;
   1dd48:	3c14      	subs	r4, #20
   1dd4a:	e772      	b.n	1dc32 <clear_event_registrations+0x16>
   1dd4c:	0002552c 	.word	0x0002552c
   1dd50:	00023451 	.word	0x00023451
   1dd54:	000253df 	.word	0x000253df
   1dd58:	000253f9 	.word	0x000253f9
   1dd5c:	0002540e 	.word	0x0002540e
   1dd60:	0002542a 	.word	0x0002542a
   1dd64:	0002543b 	.word	0x0002543b
   1dd68:	00025458 	.word	0x00025458
   1dd6c:	0002546f 	.word	0x0002546f
   1dd70:	200214b0 	.word	0x200214b0
   1dd74:	00023852 	.word	0x00023852
   1dd78:	000238a5 	.word	0x000238a5
   1dd7c:	000238bc 	.word	0x000238bc
   1dd80:	00023878 	.word	0x00023878
   1dd84:	0002388d 	.word	0x0002388d
   1dd88:	000251cf 	.word	0x000251cf

0001dd8c <register_events>:
{
   1dd8c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	for (int ii = 0; ii < num_events; ii++) {
   1dd90:	2700      	movs	r7, #0
{
   1dd92:	468a      	mov	sl, r1
   1dd94:	4615      	mov	r5, r2
   1dd96:	4604      	mov	r4, r0
	int events_registered = 0;
   1dd98:	46b9      	mov	r9, r7
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1dd9a:	4e69      	ldr	r6, [pc, #420]	; (1df40 <register_events+0x1b4>)
   1dd9c:	f8df 81e0 	ldr.w	r8, [pc, #480]	; 1df80 <register_events+0x1f4>
{
   1dda0:	9301      	str	r3, [sp, #4]
	for (int ii = 0; ii < num_events; ii++) {
   1dda2:	4557      	cmp	r7, sl
   1dda4:	db03      	blt.n	1ddae <register_events+0x22>
}
   1dda6:	4648      	mov	r0, r9
   1dda8:	b003      	add	sp, #12
   1ddaa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1ddae:	f04f 0320 	mov.w	r3, #32
   1ddb2:	f3ef 8b11 	mrs	fp, BASEPRI
   1ddb6:	f383 8811 	msr	BASEPRI, r3
   1ddba:	f3bf 8f6f 	isb	sy
   1ddbe:	4630      	mov	r0, r6
   1ddc0:	f7ff fa56 	bl	1d270 <z_spin_lock_valid>
   1ddc4:	b968      	cbnz	r0, 1dde2 <register_events+0x56>
   1ddc6:	234a      	movs	r3, #74	; 0x4a
   1ddc8:	4642      	mov	r2, r8
   1ddca:	495e      	ldr	r1, [pc, #376]	; (1df44 <register_events+0x1b8>)
   1ddcc:	485e      	ldr	r0, [pc, #376]	; (1df48 <register_events+0x1bc>)
   1ddce:	f002 f804 	bl	1fdda <printk>
   1ddd2:	4631      	mov	r1, r6
   1ddd4:	485d      	ldr	r0, [pc, #372]	; (1df4c <register_events+0x1c0>)
   1ddd6:	f002 f800 	bl	1fdda <printk>
   1ddda:	214a      	movs	r1, #74	; 0x4a
   1dddc:	4640      	mov	r0, r8
   1ddde:	f002 f842 	bl	1fe66 <assert_post_action>
	z_spin_lock_set_owner(l);
   1dde2:	4630      	mov	r0, r6
   1dde4:	f7ff fa62 	bl	1d2ac <z_spin_lock_set_owner>
	switch (event->type) {
   1dde8:	7b63      	ldrb	r3, [r4, #13]
   1ddea:	f003 030f 	and.w	r3, r3, #15
   1ddee:	2b04      	cmp	r3, #4
   1ddf0:	d844      	bhi.n	1de7c <register_events+0xf0>
   1ddf2:	e8df f003 	tbb	[pc, r3]
   1ddf6:	3d2d      	.short	0x3d2d
   1ddf8:	4303      	.short	0x4303
   1ddfa:	2a          	.byte	0x2a
   1ddfb:	00          	.byte	0x00
		if (k_sem_count_get(event->sem) > 0) {
   1ddfc:	6923      	ldr	r3, [r4, #16]
   1ddfe:	689b      	ldr	r3, [r3, #8]
   1de00:	b333      	cbz	r3, 1de50 <register_events+0xc4>
			*state = K_POLL_STATE_SEM_AVAILABLE;
   1de02:	2202      	movs	r2, #2
	event->poller = NULL;
   1de04:	2100      	movs	r1, #0
	event->state |= state;
   1de06:	68e3      	ldr	r3, [r4, #12]
	event->poller = NULL;
   1de08:	60a1      	str	r1, [r4, #8]
	event->state |= state;
   1de0a:	f3c3 3004 	ubfx	r0, r3, #12, #5
   1de0e:	4302      	orrs	r2, r0
   1de10:	f362 3310 	bfi	r3, r2, #12, #5
   1de14:	60e3      	str	r3, [r4, #12]
			poller->is_polling = false;
   1de16:	7029      	strb	r1, [r5, #0]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1de18:	4630      	mov	r0, r6
   1de1a:	f7ff fa37 	bl	1d28c <z_spin_unlock_valid>
   1de1e:	b968      	cbnz	r0, 1de3c <register_events+0xb0>
   1de20:	235d      	movs	r3, #93	; 0x5d
   1de22:	4642      	mov	r2, r8
   1de24:	494a      	ldr	r1, [pc, #296]	; (1df50 <register_events+0x1c4>)
   1de26:	4848      	ldr	r0, [pc, #288]	; (1df48 <register_events+0x1bc>)
   1de28:	f001 ffd7 	bl	1fdda <printk>
   1de2c:	4631      	mov	r1, r6
   1de2e:	4849      	ldr	r0, [pc, #292]	; (1df54 <register_events+0x1c8>)
   1de30:	f001 ffd3 	bl	1fdda <printk>
   1de34:	215d      	movs	r1, #93	; 0x5d
   1de36:	4640      	mov	r0, r8
   1de38:	f002 f815 	bl	1fe66 <assert_post_action>
	__asm__ volatile(
   1de3c:	f38b 8811 	msr	BASEPRI, fp
   1de40:	f3bf 8f6f 	isb	sy
	for (int ii = 0; ii < num_events; ii++) {
   1de44:	3701      	adds	r7, #1
   1de46:	3414      	adds	r4, #20
   1de48:	e7ab      	b.n	1dda2 <register_events+0x16>
		if (!k_queue_is_empty(event->queue)) {
   1de4a:	6923      	ldr	r3, [r4, #16]
   1de4c:	681b      	ldr	r3, [r3, #0]
   1de4e:	bb33      	cbnz	r3, 1de9e <register_events+0x112>
		} else if (!just_check && poller->is_polling) {
   1de50:	9b01      	ldr	r3, [sp, #4]
   1de52:	2b00      	cmp	r3, #0
   1de54:	d1e0      	bne.n	1de18 <register_events+0x8c>
   1de56:	782b      	ldrb	r3, [r5, #0]
   1de58:	2b00      	cmp	r3, #0
   1de5a:	d0dd      	beq.n	1de18 <register_events+0x8c>
	switch (event->type) {
   1de5c:	7b63      	ldrb	r3, [r4, #13]
   1de5e:	f003 030f 	and.w	r3, r3, #15
   1de62:	2b04      	cmp	r3, #4
   1de64:	d85d      	bhi.n	1df22 <register_events+0x196>
   1de66:	e8df f003 	tbb	[pc, r3]
   1de6a:	4931      	.short	0x4931
   1de6c:	5c1c      	.short	0x5c1c
   1de6e:	35          	.byte	0x35
   1de6f:	00          	.byte	0x00
		if (event->signal->signaled != 0U) {
   1de70:	6923      	ldr	r3, [r4, #16]
   1de72:	689b      	ldr	r3, [r3, #8]
   1de74:	2b00      	cmp	r3, #0
   1de76:	d0eb      	beq.n	1de50 <register_events+0xc4>
			*state = K_POLL_STATE_SIGNALED;
   1de78:	2201      	movs	r2, #1
   1de7a:	e7c3      	b.n	1de04 <register_events+0x78>
		__ASSERT(false, "invalid event type (0x%x)\n", event->type);
   1de7c:	2350      	movs	r3, #80	; 0x50
   1de7e:	4a36      	ldr	r2, [pc, #216]	; (1df58 <register_events+0x1cc>)
   1de80:	4936      	ldr	r1, [pc, #216]	; (1df5c <register_events+0x1d0>)
   1de82:	4831      	ldr	r0, [pc, #196]	; (1df48 <register_events+0x1bc>)
   1de84:	f001 ffa9 	bl	1fdda <printk>
   1de88:	7b61      	ldrb	r1, [r4, #13]
   1de8a:	4835      	ldr	r0, [pc, #212]	; (1df60 <register_events+0x1d4>)
   1de8c:	f001 010f 	and.w	r1, r1, #15
   1de90:	f001 ffa3 	bl	1fdda <printk>
   1de94:	2150      	movs	r1, #80	; 0x50
   1de96:	4830      	ldr	r0, [pc, #192]	; (1df58 <register_events+0x1cc>)
   1de98:	f001 ffe5 	bl	1fe66 <assert_post_action>
		break;
   1de9c:	e7d8      	b.n	1de50 <register_events+0xc4>
			*state = K_POLL_STATE_FIFO_DATA_AVAILABLE;
   1de9e:	2204      	movs	r2, #4
   1dea0:	e7b0      	b.n	1de04 <register_events+0x78>
		__ASSERT(event->sem != NULL, "invalid semaphore\n");
   1dea2:	6923      	ldr	r3, [r4, #16]
   1dea4:	b963      	cbnz	r3, 1dec0 <register_events+0x134>
   1dea6:	492f      	ldr	r1, [pc, #188]	; (1df64 <register_events+0x1d8>)
   1dea8:	2375      	movs	r3, #117	; 0x75
   1deaa:	4a2b      	ldr	r2, [pc, #172]	; (1df58 <register_events+0x1cc>)
   1deac:	4826      	ldr	r0, [pc, #152]	; (1df48 <register_events+0x1bc>)
   1deae:	f001 ff94 	bl	1fdda <printk>
   1deb2:	482d      	ldr	r0, [pc, #180]	; (1df68 <register_events+0x1dc>)
   1deb4:	f001 ff91 	bl	1fdda <printk>
   1deb8:	2175      	movs	r1, #117	; 0x75
   1deba:	4827      	ldr	r0, [pc, #156]	; (1df58 <register_events+0x1cc>)
   1debc:	f001 ffd3 	bl	1fe66 <assert_post_action>
		add_event(&event->sem->poll_events, event, poller);
   1dec0:	462a      	mov	r2, r5
   1dec2:	4621      	mov	r1, r4
   1dec4:	6920      	ldr	r0, [r4, #16]
   1dec6:	3010      	adds	r0, #16
		add_event(&event->queue->poll_events, event, poller);
   1dec8:	f003 fcda 	bl	21880 <add_event>
	event->poller = poller;
   1decc:	60a5      	str	r5, [r4, #8]
				events_registered += 1;
   1dece:	f109 0901 	add.w	r9, r9, #1
   1ded2:	e7a1      	b.n	1de18 <register_events+0x8c>
		__ASSERT(event->queue != NULL, "invalid queue\n");
   1ded4:	6923      	ldr	r3, [r4, #16]
   1ded6:	b963      	cbnz	r3, 1def2 <register_events+0x166>
   1ded8:	4924      	ldr	r1, [pc, #144]	; (1df6c <register_events+0x1e0>)
   1deda:	2379      	movs	r3, #121	; 0x79
   1dedc:	4a1e      	ldr	r2, [pc, #120]	; (1df58 <register_events+0x1cc>)
   1dede:	481a      	ldr	r0, [pc, #104]	; (1df48 <register_events+0x1bc>)
   1dee0:	f001 ff7b 	bl	1fdda <printk>
   1dee4:	4822      	ldr	r0, [pc, #136]	; (1df70 <register_events+0x1e4>)
   1dee6:	f001 ff78 	bl	1fdda <printk>
   1deea:	2179      	movs	r1, #121	; 0x79
   1deec:	481a      	ldr	r0, [pc, #104]	; (1df58 <register_events+0x1cc>)
   1deee:	f001 ffba 	bl	1fe66 <assert_post_action>
		add_event(&event->queue->poll_events, event, poller);
   1def2:	6920      	ldr	r0, [r4, #16]
   1def4:	462a      	mov	r2, r5
   1def6:	4621      	mov	r1, r4
   1def8:	300c      	adds	r0, #12
   1defa:	e7e5      	b.n	1dec8 <register_events+0x13c>
		__ASSERT(event->signal != NULL, "invalid poll signal\n");
   1defc:	6923      	ldr	r3, [r4, #16]
   1defe:	b963      	cbnz	r3, 1df1a <register_events+0x18e>
   1df00:	491c      	ldr	r1, [pc, #112]	; (1df74 <register_events+0x1e8>)
   1df02:	237d      	movs	r3, #125	; 0x7d
   1df04:	4a14      	ldr	r2, [pc, #80]	; (1df58 <register_events+0x1cc>)
   1df06:	4810      	ldr	r0, [pc, #64]	; (1df48 <register_events+0x1bc>)
   1df08:	f001 ff67 	bl	1fdda <printk>
   1df0c:	481a      	ldr	r0, [pc, #104]	; (1df78 <register_events+0x1ec>)
   1df0e:	f001 ff64 	bl	1fdda <printk>
   1df12:	217d      	movs	r1, #125	; 0x7d
   1df14:	4810      	ldr	r0, [pc, #64]	; (1df58 <register_events+0x1cc>)
   1df16:	f001 ffa6 	bl	1fe66 <assert_post_action>
		add_event(&event->signal->poll_events, event, poller);
   1df1a:	462a      	mov	r2, r5
   1df1c:	4621      	mov	r1, r4
   1df1e:	6920      	ldr	r0, [r4, #16]
   1df20:	e7d2      	b.n	1dec8 <register_events+0x13c>
		__ASSERT(false, "invalid event type\n");
   1df22:	2384      	movs	r3, #132	; 0x84
   1df24:	4a0c      	ldr	r2, [pc, #48]	; (1df58 <register_events+0x1cc>)
   1df26:	490d      	ldr	r1, [pc, #52]	; (1df5c <register_events+0x1d0>)
   1df28:	4807      	ldr	r0, [pc, #28]	; (1df48 <register_events+0x1bc>)
   1df2a:	f001 ff56 	bl	1fdda <printk>
   1df2e:	4813      	ldr	r0, [pc, #76]	; (1df7c <register_events+0x1f0>)
   1df30:	f001 ff53 	bl	1fdda <printk>
   1df34:	2184      	movs	r1, #132	; 0x84
   1df36:	4808      	ldr	r0, [pc, #32]	; (1df58 <register_events+0x1cc>)
   1df38:	f001 ff95 	bl	1fe66 <assert_post_action>
		break;
   1df3c:	e7c6      	b.n	1decc <register_events+0x140>
   1df3e:	bf00      	nop
   1df40:	200214b0 	.word	0x200214b0
   1df44:	00023878 	.word	0x00023878
   1df48:	00023451 	.word	0x00023451
   1df4c:	0002388d 	.word	0x0002388d
   1df50:	000238a5 	.word	0x000238a5
   1df54:	000238bc 	.word	0x000238bc
   1df58:	0002552c 	.word	0x0002552c
   1df5c:	000251cf 	.word	0x000251cf
   1df60:	00025582 	.word	0x00025582
   1df64:	000253df 	.word	0x000253df
   1df68:	000253f9 	.word	0x000253f9
   1df6c:	0002540e 	.word	0x0002540e
   1df70:	0002542a 	.word	0x0002542a
   1df74:	0002543b 	.word	0x0002543b
   1df78:	00025458 	.word	0x00025458
   1df7c:	0002546f 	.word	0x0002546f
   1df80:	00023852 	.word	0x00023852

0001df84 <k_poll_event_init>:
{
   1df84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1df86:	4604      	mov	r4, r0
   1df88:	460f      	mov	r7, r1
   1df8a:	461d      	mov	r5, r3
	__ASSERT(mode == K_POLL_MODE_NOTIFY_ONLY,
   1df8c:	4616      	mov	r6, r2
   1df8e:	b162      	cbz	r2, 1dfaa <k_poll_event_init+0x26>
   1df90:	491c      	ldr	r1, [pc, #112]	; (1e004 <k_poll_event_init+0x80>)
   1df92:	232a      	movs	r3, #42	; 0x2a
   1df94:	4a1c      	ldr	r2, [pc, #112]	; (1e008 <k_poll_event_init+0x84>)
   1df96:	481d      	ldr	r0, [pc, #116]	; (1e00c <k_poll_event_init+0x88>)
   1df98:	f001 ff1f 	bl	1fdda <printk>
   1df9c:	481c      	ldr	r0, [pc, #112]	; (1e010 <k_poll_event_init+0x8c>)
   1df9e:	f001 ff1c 	bl	1fdda <printk>
   1dfa2:	212a      	movs	r1, #42	; 0x2a
   1dfa4:	4818      	ldr	r0, [pc, #96]	; (1e008 <k_poll_event_init+0x84>)
   1dfa6:	f001 ff5e 	bl	1fe66 <assert_post_action>
	__ASSERT(type < (BIT(_POLL_NUM_TYPES)), "invalid type\n");
   1dfaa:	2f0f      	cmp	r7, #15
   1dfac:	d90c      	bls.n	1dfc8 <k_poll_event_init+0x44>
   1dfae:	4919      	ldr	r1, [pc, #100]	; (1e014 <k_poll_event_init+0x90>)
   1dfb0:	232b      	movs	r3, #43	; 0x2b
   1dfb2:	4a15      	ldr	r2, [pc, #84]	; (1e008 <k_poll_event_init+0x84>)
   1dfb4:	4815      	ldr	r0, [pc, #84]	; (1e00c <k_poll_event_init+0x88>)
   1dfb6:	f001 ff10 	bl	1fdda <printk>
   1dfba:	4817      	ldr	r0, [pc, #92]	; (1e018 <k_poll_event_init+0x94>)
   1dfbc:	f001 ff0d 	bl	1fdda <printk>
   1dfc0:	212b      	movs	r1, #43	; 0x2b
   1dfc2:	4811      	ldr	r0, [pc, #68]	; (1e008 <k_poll_event_init+0x84>)
   1dfc4:	f001 ff4f 	bl	1fe66 <assert_post_action>
	__ASSERT(obj != NULL, "must provide an object\n");
   1dfc8:	b965      	cbnz	r5, 1dfe4 <k_poll_event_init+0x60>
   1dfca:	4914      	ldr	r1, [pc, #80]	; (1e01c <k_poll_event_init+0x98>)
   1dfcc:	232c      	movs	r3, #44	; 0x2c
   1dfce:	4a0e      	ldr	r2, [pc, #56]	; (1e008 <k_poll_event_init+0x84>)
   1dfd0:	480e      	ldr	r0, [pc, #56]	; (1e00c <k_poll_event_init+0x88>)
   1dfd2:	f001 ff02 	bl	1fdda <printk>
   1dfd6:	4812      	ldr	r0, [pc, #72]	; (1e020 <k_poll_event_init+0x9c>)
   1dfd8:	f001 feff 	bl	1fdda <printk>
   1dfdc:	212c      	movs	r1, #44	; 0x2c
   1dfde:	480a      	ldr	r0, [pc, #40]	; (1e008 <k_poll_event_init+0x84>)
   1dfe0:	f001 ff41 	bl	1fe66 <assert_post_action>
	event->type = type;
   1dfe4:	7b63      	ldrb	r3, [r4, #13]
   1dfe6:	f367 0303 	bfi	r3, r7, #0, #4
   1dfea:	7363      	strb	r3, [r4, #13]
	event->mode = mode;
   1dfec:	7ba3      	ldrb	r3, [r4, #14]
   1dfee:	f366 0341 	bfi	r3, r6, #1, #1
   1dff2:	73a3      	strb	r3, [r4, #14]
	event->poller = NULL;
   1dff4:	2300      	movs	r3, #0
	event->state = K_POLL_STATE_NOT_READY;
   1dff6:	68e2      	ldr	r2, [r4, #12]
	event->poller = NULL;
   1dff8:	60a3      	str	r3, [r4, #8]
	event->state = K_POLL_STATE_NOT_READY;
   1dffa:	4b0a      	ldr	r3, [pc, #40]	; (1e024 <k_poll_event_init+0xa0>)
   1dffc:	4013      	ands	r3, r2
	event->obj = obj;
   1dffe:	e9c4 3503 	strd	r3, r5, [r4, #12]
}
   1e002:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1e004:	00025485 	.word	0x00025485
   1e008:	0002552c 	.word	0x0002552c
   1e00c:	00023451 	.word	0x00023451
   1e010:	000254a5 	.word	0x000254a5
   1e014:	000254cb 	.word	0x000254cb
   1e018:	000254ef 	.word	0x000254ef
   1e01c:	000254ff 	.word	0x000254ff
   1e020:	00025512 	.word	0x00025512
   1e024:	00020fff 	.word	0x00020fff

0001e028 <z_impl_k_poll>:

int z_impl_k_poll(struct k_poll_event *events, int num_events, s32_t timeout)
{
	int events_registered;
	k_spinlock_key_t key;
	struct _poller poller = { .is_polling = true,
   1e028:	2301      	movs	r3, #1
{
   1e02a:	b5f0      	push	{r4, r5, r6, r7, lr}
   1e02c:	b087      	sub	sp, #28
	struct _poller poller = { .is_polling = true,
   1e02e:	f88d 300c 	strb.w	r3, [sp, #12]
				  .thread     = _current,
   1e032:	4b70      	ldr	r3, [pc, #448]	; (1e1f4 <z_impl_k_poll+0x1cc>)
{
   1e034:	4604      	mov	r4, r0
	struct _poller poller = { .is_polling = true,
   1e036:	689b      	ldr	r3, [r3, #8]
{
   1e038:	460d      	mov	r5, r1
	struct _poller poller = { .is_polling = true,
   1e03a:	9304      	str	r3, [sp, #16]
   1e03c:	4b6e      	ldr	r3, [pc, #440]	; (1e1f8 <z_impl_k_poll+0x1d0>)
{
   1e03e:	4616      	mov	r6, r2
	struct _poller poller = { .is_polling = true,
   1e040:	9305      	str	r3, [sp, #20]
   1e042:	f3ef 8305 	mrs	r3, IPSR
				  .cb         = k_poll_poller_cb };

	__ASSERT(!arch_is_in_isr(), "");
   1e046:	b163      	cbz	r3, 1e062 <z_impl_k_poll+0x3a>
   1e048:	496c      	ldr	r1, [pc, #432]	; (1e1fc <z_impl_k_poll+0x1d4>)
   1e04a:	23ff      	movs	r3, #255	; 0xff
   1e04c:	4a6c      	ldr	r2, [pc, #432]	; (1e200 <z_impl_k_poll+0x1d8>)
   1e04e:	486d      	ldr	r0, [pc, #436]	; (1e204 <z_impl_k_poll+0x1dc>)
   1e050:	f001 fec3 	bl	1fdda <printk>
   1e054:	486c      	ldr	r0, [pc, #432]	; (1e208 <z_impl_k_poll+0x1e0>)
   1e056:	f001 fec0 	bl	1fdda <printk>
   1e05a:	21ff      	movs	r1, #255	; 0xff
   1e05c:	4868      	ldr	r0, [pc, #416]	; (1e200 <z_impl_k_poll+0x1d8>)
   1e05e:	f001 ff02 	bl	1fe66 <assert_post_action>
	__ASSERT(events != NULL, "NULL events\n");
   1e062:	b974      	cbnz	r4, 1e082 <z_impl_k_poll+0x5a>
   1e064:	4969      	ldr	r1, [pc, #420]	; (1e20c <z_impl_k_poll+0x1e4>)
   1e066:	f44f 7380 	mov.w	r3, #256	; 0x100
   1e06a:	4a65      	ldr	r2, [pc, #404]	; (1e200 <z_impl_k_poll+0x1d8>)
   1e06c:	4865      	ldr	r0, [pc, #404]	; (1e204 <z_impl_k_poll+0x1dc>)
   1e06e:	f001 feb4 	bl	1fdda <printk>
   1e072:	4867      	ldr	r0, [pc, #412]	; (1e210 <z_impl_k_poll+0x1e8>)
   1e074:	f001 feb1 	bl	1fdda <printk>
   1e078:	f44f 7180 	mov.w	r1, #256	; 0x100
   1e07c:	4860      	ldr	r0, [pc, #384]	; (1e200 <z_impl_k_poll+0x1d8>)
   1e07e:	f001 fef2 	bl	1fe66 <assert_post_action>
	__ASSERT(num_events >= 0, "<0 events\n");
   1e082:	2d00      	cmp	r5, #0
   1e084:	da0e      	bge.n	1e0a4 <z_impl_k_poll+0x7c>
   1e086:	4963      	ldr	r1, [pc, #396]	; (1e214 <z_impl_k_poll+0x1ec>)
   1e088:	f240 1301 	movw	r3, #257	; 0x101
   1e08c:	4a5c      	ldr	r2, [pc, #368]	; (1e200 <z_impl_k_poll+0x1d8>)
   1e08e:	485d      	ldr	r0, [pc, #372]	; (1e204 <z_impl_k_poll+0x1dc>)
   1e090:	f001 fea3 	bl	1fdda <printk>
   1e094:	4860      	ldr	r0, [pc, #384]	; (1e218 <z_impl_k_poll+0x1f0>)
   1e096:	f001 fea0 	bl	1fdda <printk>
   1e09a:	f240 1101 	movw	r1, #257	; 0x101
   1e09e:	4858      	ldr	r0, [pc, #352]	; (1e200 <z_impl_k_poll+0x1d8>)
   1e0a0:	f001 fee1 	bl	1fe66 <assert_post_action>

	events_registered = register_events(events, num_events, &poller,
   1e0a4:	fab6 f386 	clz	r3, r6
   1e0a8:	aa03      	add	r2, sp, #12
   1e0aa:	095b      	lsrs	r3, r3, #5
   1e0ac:	4629      	mov	r1, r5
   1e0ae:	4620      	mov	r0, r4
   1e0b0:	f7ff fe6c 	bl	1dd8c <register_events>
   1e0b4:	4607      	mov	r7, r0
	__asm__ volatile(
   1e0b6:	f04f 0320 	mov.w	r3, #32
   1e0ba:	f3ef 8511 	mrs	r5, BASEPRI
   1e0be:	f383 8811 	msr	BASEPRI, r3
   1e0c2:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1e0c6:	4855      	ldr	r0, [pc, #340]	; (1e21c <z_impl_k_poll+0x1f4>)
   1e0c8:	f7ff f8d2 	bl	1d270 <z_spin_lock_valid>
   1e0cc:	b968      	cbnz	r0, 1e0ea <z_impl_k_poll+0xc2>
   1e0ce:	234a      	movs	r3, #74	; 0x4a
   1e0d0:	4a53      	ldr	r2, [pc, #332]	; (1e220 <z_impl_k_poll+0x1f8>)
   1e0d2:	4954      	ldr	r1, [pc, #336]	; (1e224 <z_impl_k_poll+0x1fc>)
   1e0d4:	484b      	ldr	r0, [pc, #300]	; (1e204 <z_impl_k_poll+0x1dc>)
   1e0d6:	f001 fe80 	bl	1fdda <printk>
   1e0da:	4950      	ldr	r1, [pc, #320]	; (1e21c <z_impl_k_poll+0x1f4>)
   1e0dc:	4852      	ldr	r0, [pc, #328]	; (1e228 <z_impl_k_poll+0x200>)
   1e0de:	f001 fe7c 	bl	1fdda <printk>
   1e0e2:	214a      	movs	r1, #74	; 0x4a
   1e0e4:	484e      	ldr	r0, [pc, #312]	; (1e220 <z_impl_k_poll+0x1f8>)
   1e0e6:	f001 febe 	bl	1fe66 <assert_post_action>
	z_spin_lock_set_owner(l);
   1e0ea:	484c      	ldr	r0, [pc, #304]	; (1e21c <z_impl_k_poll+0x1f4>)
   1e0ec:	f7ff f8de 	bl	1d2ac <z_spin_lock_set_owner>
	/*
	 * If we're not polling anymore, it means that at least one event
	 * condition is met, either when looping through the events here or
	 * because one of the events registered has had its state changed.
	 */
	if (!poller.is_polling) {
   1e0f0:	f89d 300c 	ldrb.w	r3, [sp, #12]
   1e0f4:	b9f3      	cbnz	r3, 1e134 <z_impl_k_poll+0x10c>
		clear_event_registrations(events, events_registered, key);
   1e0f6:	4620      	mov	r0, r4
   1e0f8:	462a      	mov	r2, r5
   1e0fa:	4639      	mov	r1, r7
   1e0fc:	f7ff fd8e 	bl	1dc1c <clear_event_registrations>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1e100:	4846      	ldr	r0, [pc, #280]	; (1e21c <z_impl_k_poll+0x1f4>)
   1e102:	f7ff f8c3 	bl	1d28c <z_spin_unlock_valid>
   1e106:	b968      	cbnz	r0, 1e124 <z_impl_k_poll+0xfc>
   1e108:	235d      	movs	r3, #93	; 0x5d
   1e10a:	4a45      	ldr	r2, [pc, #276]	; (1e220 <z_impl_k_poll+0x1f8>)
   1e10c:	4947      	ldr	r1, [pc, #284]	; (1e22c <z_impl_k_poll+0x204>)
   1e10e:	483d      	ldr	r0, [pc, #244]	; (1e204 <z_impl_k_poll+0x1dc>)
   1e110:	f001 fe63 	bl	1fdda <printk>
   1e114:	4941      	ldr	r1, [pc, #260]	; (1e21c <z_impl_k_poll+0x1f4>)
   1e116:	4846      	ldr	r0, [pc, #280]	; (1e230 <z_impl_k_poll+0x208>)
   1e118:	f001 fe5f 	bl	1fdda <printk>
   1e11c:	215d      	movs	r1, #93	; 0x5d
   1e11e:	4840      	ldr	r0, [pc, #256]	; (1e220 <z_impl_k_poll+0x1f8>)
   1e120:	f001 fea1 	bl	1fe66 <assert_post_action>
	__asm__ volatile(
   1e124:	f385 8811 	msr	BASEPRI, r5
   1e128:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		return 0;
   1e12c:	2500      	movs	r5, #0
	key = k_spin_lock(&lock);
	clear_event_registrations(events, events_registered, key);
	k_spin_unlock(&lock, key);

	return swap_rc;
}
   1e12e:	4628      	mov	r0, r5
   1e130:	b007      	add	sp, #28
   1e132:	bdf0      	pop	{r4, r5, r6, r7, pc}
	poller.is_polling = false;
   1e134:	2300      	movs	r3, #0
   1e136:	f88d 300c 	strb.w	r3, [sp, #12]
	if (timeout == K_NO_WAIT) {
   1e13a:	b9c6      	cbnz	r6, 1e16e <z_impl_k_poll+0x146>
   1e13c:	4837      	ldr	r0, [pc, #220]	; (1e21c <z_impl_k_poll+0x1f4>)
   1e13e:	f7ff f8a5 	bl	1d28c <z_spin_unlock_valid>
   1e142:	b968      	cbnz	r0, 1e160 <z_impl_k_poll+0x138>
   1e144:	235d      	movs	r3, #93	; 0x5d
   1e146:	4a36      	ldr	r2, [pc, #216]	; (1e220 <z_impl_k_poll+0x1f8>)
   1e148:	4938      	ldr	r1, [pc, #224]	; (1e22c <z_impl_k_poll+0x204>)
   1e14a:	482e      	ldr	r0, [pc, #184]	; (1e204 <z_impl_k_poll+0x1dc>)
   1e14c:	f001 fe45 	bl	1fdda <printk>
   1e150:	4932      	ldr	r1, [pc, #200]	; (1e21c <z_impl_k_poll+0x1f4>)
   1e152:	4837      	ldr	r0, [pc, #220]	; (1e230 <z_impl_k_poll+0x208>)
   1e154:	f001 fe41 	bl	1fdda <printk>
   1e158:	215d      	movs	r1, #93	; 0x5d
   1e15a:	4831      	ldr	r0, [pc, #196]	; (1e220 <z_impl_k_poll+0x1f8>)
   1e15c:	f001 fe83 	bl	1fe66 <assert_post_action>
   1e160:	f385 8811 	msr	BASEPRI, r5
   1e164:	f3bf 8f6f 	isb	sy
		return -EAGAIN;
   1e168:	f06f 050a 	mvn.w	r5, #10
   1e16c:	e7df      	b.n	1e12e <z_impl_k_poll+0x106>
	_wait_q_t wait_q = Z_WAIT_Q_INIT(&wait_q);
   1e16e:	aa01      	add	r2, sp, #4
	int swap_rc = z_pend_curr(&lock, key, &wait_q, timeout);
   1e170:	4629      	mov	r1, r5
   1e172:	4633      	mov	r3, r6
   1e174:	4829      	ldr	r0, [pc, #164]	; (1e21c <z_impl_k_poll+0x1f4>)
	_wait_q_t wait_q = Z_WAIT_Q_INIT(&wait_q);
   1e176:	e9cd 2201 	strd	r2, r2, [sp, #4]
	int swap_rc = z_pend_curr(&lock, key, &wait_q, timeout);
   1e17a:	f7fe fc9f 	bl	1cabc <z_pend_curr>
   1e17e:	4605      	mov	r5, r0
	__asm__ volatile(
   1e180:	f04f 0320 	mov.w	r3, #32
   1e184:	f3ef 8611 	mrs	r6, BASEPRI
   1e188:	f383 8811 	msr	BASEPRI, r3
   1e18c:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1e190:	4822      	ldr	r0, [pc, #136]	; (1e21c <z_impl_k_poll+0x1f4>)
   1e192:	f7ff f86d 	bl	1d270 <z_spin_lock_valid>
   1e196:	b968      	cbnz	r0, 1e1b4 <z_impl_k_poll+0x18c>
   1e198:	234a      	movs	r3, #74	; 0x4a
   1e19a:	4a21      	ldr	r2, [pc, #132]	; (1e220 <z_impl_k_poll+0x1f8>)
   1e19c:	4921      	ldr	r1, [pc, #132]	; (1e224 <z_impl_k_poll+0x1fc>)
   1e19e:	4819      	ldr	r0, [pc, #100]	; (1e204 <z_impl_k_poll+0x1dc>)
   1e1a0:	f001 fe1b 	bl	1fdda <printk>
   1e1a4:	491d      	ldr	r1, [pc, #116]	; (1e21c <z_impl_k_poll+0x1f4>)
   1e1a6:	4820      	ldr	r0, [pc, #128]	; (1e228 <z_impl_k_poll+0x200>)
   1e1a8:	f001 fe17 	bl	1fdda <printk>
   1e1ac:	214a      	movs	r1, #74	; 0x4a
   1e1ae:	481c      	ldr	r0, [pc, #112]	; (1e220 <z_impl_k_poll+0x1f8>)
   1e1b0:	f001 fe59 	bl	1fe66 <assert_post_action>
	z_spin_lock_set_owner(l);
   1e1b4:	4819      	ldr	r0, [pc, #100]	; (1e21c <z_impl_k_poll+0x1f4>)
   1e1b6:	f7ff f879 	bl	1d2ac <z_spin_lock_set_owner>
	clear_event_registrations(events, events_registered, key);
   1e1ba:	4620      	mov	r0, r4
   1e1bc:	4632      	mov	r2, r6
   1e1be:	4639      	mov	r1, r7
   1e1c0:	f7ff fd2c 	bl	1dc1c <clear_event_registrations>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1e1c4:	4815      	ldr	r0, [pc, #84]	; (1e21c <z_impl_k_poll+0x1f4>)
   1e1c6:	f7ff f861 	bl	1d28c <z_spin_unlock_valid>
   1e1ca:	b968      	cbnz	r0, 1e1e8 <z_impl_k_poll+0x1c0>
   1e1cc:	235d      	movs	r3, #93	; 0x5d
   1e1ce:	4a14      	ldr	r2, [pc, #80]	; (1e220 <z_impl_k_poll+0x1f8>)
   1e1d0:	4916      	ldr	r1, [pc, #88]	; (1e22c <z_impl_k_poll+0x204>)
   1e1d2:	480c      	ldr	r0, [pc, #48]	; (1e204 <z_impl_k_poll+0x1dc>)
   1e1d4:	f001 fe01 	bl	1fdda <printk>
   1e1d8:	4910      	ldr	r1, [pc, #64]	; (1e21c <z_impl_k_poll+0x1f4>)
   1e1da:	4815      	ldr	r0, [pc, #84]	; (1e230 <z_impl_k_poll+0x208>)
   1e1dc:	f001 fdfd 	bl	1fdda <printk>
   1e1e0:	215d      	movs	r1, #93	; 0x5d
   1e1e2:	480f      	ldr	r0, [pc, #60]	; (1e220 <z_impl_k_poll+0x1f8>)
   1e1e4:	f001 fe3f 	bl	1fe66 <assert_post_action>
	__asm__ volatile(
   1e1e8:	f386 8811 	msr	BASEPRI, r6
   1e1ec:	f3bf 8f6f 	isb	sy
	return swap_rc;
   1e1f0:	e79d      	b.n	1e12e <z_impl_k_poll+0x106>
   1e1f2:	bf00      	nop
   1e1f4:	20021398 	.word	0x20021398
   1e1f8:	0001dbad 	.word	0x0001dbad
   1e1fc:	0002516f 	.word	0x0002516f
   1e200:	0002552c 	.word	0x0002552c
   1e204:	00023451 	.word	0x00023451
   1e208:	000241f4 	.word	0x000241f4
   1e20c:	0002559f 	.word	0x0002559f
   1e210:	000255b5 	.word	0x000255b5
   1e214:	000255c4 	.word	0x000255c4
   1e218:	000255d4 	.word	0x000255d4
   1e21c:	200214b0 	.word	0x200214b0
   1e220:	00023852 	.word	0x00023852
   1e224:	00023878 	.word	0x00023878
   1e228:	0002388d 	.word	0x0002388d
   1e22c:	000238a5 	.word	0x000238a5
   1e230:	000238bc 	.word	0x000238bc

0001e234 <__assert_func>:
   1e234:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   1e236:	461c      	mov	r4, r3
   1e238:	4b09      	ldr	r3, [pc, #36]	; (1e260 <__assert_func+0x2c>)
   1e23a:	4605      	mov	r5, r0
   1e23c:	681b      	ldr	r3, [r3, #0]
   1e23e:	68d8      	ldr	r0, [r3, #12]
   1e240:	b152      	cbz	r2, 1e258 <__assert_func+0x24>
   1e242:	4b08      	ldr	r3, [pc, #32]	; (1e264 <__assert_func+0x30>)
   1e244:	9100      	str	r1, [sp, #0]
   1e246:	4908      	ldr	r1, [pc, #32]	; (1e268 <__assert_func+0x34>)
   1e248:	e9cd 3201 	strd	r3, r2, [sp, #4]
   1e24c:	462b      	mov	r3, r5
   1e24e:	4622      	mov	r2, r4
   1e250:	f000 f80e 	bl	1e270 <fiprintf>
   1e254:	f003 fd33 	bl	21cbe <abort>
   1e258:	4b04      	ldr	r3, [pc, #16]	; (1e26c <__assert_func+0x38>)
   1e25a:	461a      	mov	r2, r3
   1e25c:	e7f2      	b.n	1e244 <__assert_func+0x10>
   1e25e:	bf00      	nop
   1e260:	200260b0 	.word	0x200260b0
   1e264:	000255e1 	.word	0x000255e1
   1e268:	000255ee 	.word	0x000255ee
   1e26c:	000241f6 	.word	0x000241f6

0001e270 <fiprintf>:
   1e270:	b40e      	push	{r1, r2, r3}
   1e272:	b503      	push	{r0, r1, lr}
   1e274:	ab03      	add	r3, sp, #12
   1e276:	4601      	mov	r1, r0
   1e278:	4805      	ldr	r0, [pc, #20]	; (1e290 <fiprintf+0x20>)
   1e27a:	f853 2b04 	ldr.w	r2, [r3], #4
   1e27e:	6800      	ldr	r0, [r0, #0]
   1e280:	9301      	str	r3, [sp, #4]
   1e282:	f000 f807 	bl	1e294 <_vfiprintf_r>
   1e286:	b002      	add	sp, #8
   1e288:	f85d eb04 	ldr.w	lr, [sp], #4
   1e28c:	b003      	add	sp, #12
   1e28e:	4770      	bx	lr
   1e290:	200260b0 	.word	0x200260b0

0001e294 <_vfiprintf_r>:
   1e294:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1e298:	460d      	mov	r5, r1
   1e29a:	b09d      	sub	sp, #116	; 0x74
   1e29c:	4614      	mov	r4, r2
   1e29e:	461e      	mov	r6, r3
   1e2a0:	4607      	mov	r7, r0
   1e2a2:	b118      	cbz	r0, 1e2ac <_vfiprintf_r+0x18>
   1e2a4:	6983      	ldr	r3, [r0, #24]
   1e2a6:	b90b      	cbnz	r3, 1e2ac <_vfiprintf_r+0x18>
   1e2a8:	f000 ffa2 	bl	1f1f0 <__sinit>
   1e2ac:	4b85      	ldr	r3, [pc, #532]	; (1e4c4 <_vfiprintf_r+0x230>)
   1e2ae:	429d      	cmp	r5, r3
   1e2b0:	d11b      	bne.n	1e2ea <_vfiprintf_r+0x56>
   1e2b2:	687d      	ldr	r5, [r7, #4]
   1e2b4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
   1e2b6:	07d9      	lsls	r1, r3, #31
   1e2b8:	d405      	bmi.n	1e2c6 <_vfiprintf_r+0x32>
   1e2ba:	89ab      	ldrh	r3, [r5, #12]
   1e2bc:	059a      	lsls	r2, r3, #22
   1e2be:	d402      	bmi.n	1e2c6 <_vfiprintf_r+0x32>
   1e2c0:	6da8      	ldr	r0, [r5, #88]	; 0x58
   1e2c2:	f003 fdc6 	bl	21e52 <__retarget_lock_acquire_recursive>
   1e2c6:	89ab      	ldrh	r3, [r5, #12]
   1e2c8:	071b      	lsls	r3, r3, #28
   1e2ca:	d501      	bpl.n	1e2d0 <_vfiprintf_r+0x3c>
   1e2cc:	692b      	ldr	r3, [r5, #16]
   1e2ce:	b9eb      	cbnz	r3, 1e30c <_vfiprintf_r+0x78>
   1e2d0:	4629      	mov	r1, r5
   1e2d2:	4638      	mov	r0, r7
   1e2d4:	f000 fdf8 	bl	1eec8 <__swsetup_r>
   1e2d8:	b1c0      	cbz	r0, 1e30c <_vfiprintf_r+0x78>
   1e2da:	6e6b      	ldr	r3, [r5, #100]	; 0x64
   1e2dc:	07d8      	lsls	r0, r3, #31
   1e2de:	d50e      	bpl.n	1e2fe <_vfiprintf_r+0x6a>
   1e2e0:	f04f 30ff 	mov.w	r0, #4294967295
   1e2e4:	b01d      	add	sp, #116	; 0x74
   1e2e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1e2ea:	4b77      	ldr	r3, [pc, #476]	; (1e4c8 <_vfiprintf_r+0x234>)
   1e2ec:	429d      	cmp	r5, r3
   1e2ee:	d101      	bne.n	1e2f4 <_vfiprintf_r+0x60>
   1e2f0:	68bd      	ldr	r5, [r7, #8]
   1e2f2:	e7df      	b.n	1e2b4 <_vfiprintf_r+0x20>
   1e2f4:	4b75      	ldr	r3, [pc, #468]	; (1e4cc <_vfiprintf_r+0x238>)
   1e2f6:	429d      	cmp	r5, r3
   1e2f8:	bf08      	it	eq
   1e2fa:	68fd      	ldreq	r5, [r7, #12]
   1e2fc:	e7da      	b.n	1e2b4 <_vfiprintf_r+0x20>
   1e2fe:	89ab      	ldrh	r3, [r5, #12]
   1e300:	0599      	lsls	r1, r3, #22
   1e302:	d4ed      	bmi.n	1e2e0 <_vfiprintf_r+0x4c>
   1e304:	6da8      	ldr	r0, [r5, #88]	; 0x58
   1e306:	f003 fda5 	bl	21e54 <__retarget_lock_release_recursive>
   1e30a:	e7e9      	b.n	1e2e0 <_vfiprintf_r+0x4c>
   1e30c:	2300      	movs	r3, #0
   1e30e:	f8df 91c0 	ldr.w	r9, [pc, #448]	; 1e4d0 <_vfiprintf_r+0x23c>
   1e312:	f04f 0a01 	mov.w	sl, #1
   1e316:	9603      	str	r6, [sp, #12]
   1e318:	9309      	str	r3, [sp, #36]	; 0x24
   1e31a:	2320      	movs	r3, #32
   1e31c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
   1e320:	2330      	movs	r3, #48	; 0x30
   1e322:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
   1e326:	4623      	mov	r3, r4
   1e328:	461e      	mov	r6, r3
   1e32a:	f813 2b01 	ldrb.w	r2, [r3], #1
   1e32e:	b10a      	cbz	r2, 1e334 <_vfiprintf_r+0xa0>
   1e330:	2a25      	cmp	r2, #37	; 0x25
   1e332:	d1f9      	bne.n	1e328 <_vfiprintf_r+0x94>
   1e334:	ebb6 0b04 	subs.w	fp, r6, r4
   1e338:	d00b      	beq.n	1e352 <_vfiprintf_r+0xbe>
   1e33a:	465b      	mov	r3, fp
   1e33c:	4622      	mov	r2, r4
   1e33e:	4629      	mov	r1, r5
   1e340:	4638      	mov	r0, r7
   1e342:	f003 fb26 	bl	21992 <__sfputs_r>
   1e346:	3001      	adds	r0, #1
   1e348:	f000 80a3 	beq.w	1e492 <_vfiprintf_r+0x1fe>
   1e34c:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1e34e:	445b      	add	r3, fp
   1e350:	9309      	str	r3, [sp, #36]	; 0x24
   1e352:	7833      	ldrb	r3, [r6, #0]
   1e354:	2b00      	cmp	r3, #0
   1e356:	f000 809c 	beq.w	1e492 <_vfiprintf_r+0x1fe>
   1e35a:	2300      	movs	r3, #0
   1e35c:	f04f 32ff 	mov.w	r2, #4294967295
   1e360:	3601      	adds	r6, #1
   1e362:	9304      	str	r3, [sp, #16]
   1e364:	9307      	str	r3, [sp, #28]
   1e366:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
   1e36a:	931a      	str	r3, [sp, #104]	; 0x68
   1e36c:	e9cd 2305 	strd	r2, r3, [sp, #20]
   1e370:	4634      	mov	r4, r6
   1e372:	2205      	movs	r2, #5
   1e374:	4856      	ldr	r0, [pc, #344]	; (1e4d0 <_vfiprintf_r+0x23c>)
   1e376:	f814 1b01 	ldrb.w	r1, [r4], #1
   1e37a:	f003 fac2 	bl	21902 <memchr>
   1e37e:	9b04      	ldr	r3, [sp, #16]
   1e380:	b9c0      	cbnz	r0, 1e3b4 <_vfiprintf_r+0x120>
   1e382:	06da      	lsls	r2, r3, #27
   1e384:	bf44      	itt	mi
   1e386:	2220      	movmi	r2, #32
   1e388:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
   1e38c:	0718      	lsls	r0, r3, #28
   1e38e:	bf44      	itt	mi
   1e390:	222b      	movmi	r2, #43	; 0x2b
   1e392:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
   1e396:	7832      	ldrb	r2, [r6, #0]
   1e398:	2a2a      	cmp	r2, #42	; 0x2a
   1e39a:	d013      	beq.n	1e3c4 <_vfiprintf_r+0x130>
   1e39c:	4634      	mov	r4, r6
   1e39e:	9a07      	ldr	r2, [sp, #28]
   1e3a0:	2000      	movs	r0, #0
   1e3a2:	260a      	movs	r6, #10
   1e3a4:	4621      	mov	r1, r4
   1e3a6:	f811 3b01 	ldrb.w	r3, [r1], #1
   1e3aa:	3b30      	subs	r3, #48	; 0x30
   1e3ac:	2b09      	cmp	r3, #9
   1e3ae:	d94b      	bls.n	1e448 <_vfiprintf_r+0x1b4>
   1e3b0:	b970      	cbnz	r0, 1e3d0 <_vfiprintf_r+0x13c>
   1e3b2:	e014      	b.n	1e3de <_vfiprintf_r+0x14a>
   1e3b4:	eba0 0009 	sub.w	r0, r0, r9
   1e3b8:	4626      	mov	r6, r4
   1e3ba:	fa0a f000 	lsl.w	r0, sl, r0
   1e3be:	4318      	orrs	r0, r3
   1e3c0:	9004      	str	r0, [sp, #16]
   1e3c2:	e7d5      	b.n	1e370 <_vfiprintf_r+0xdc>
   1e3c4:	9a03      	ldr	r2, [sp, #12]
   1e3c6:	1d11      	adds	r1, r2, #4
   1e3c8:	6812      	ldr	r2, [r2, #0]
   1e3ca:	2a00      	cmp	r2, #0
   1e3cc:	9103      	str	r1, [sp, #12]
   1e3ce:	db01      	blt.n	1e3d4 <_vfiprintf_r+0x140>
   1e3d0:	9207      	str	r2, [sp, #28]
   1e3d2:	e004      	b.n	1e3de <_vfiprintf_r+0x14a>
   1e3d4:	4252      	negs	r2, r2
   1e3d6:	f043 0302 	orr.w	r3, r3, #2
   1e3da:	9207      	str	r2, [sp, #28]
   1e3dc:	9304      	str	r3, [sp, #16]
   1e3de:	7823      	ldrb	r3, [r4, #0]
   1e3e0:	2b2e      	cmp	r3, #46	; 0x2e
   1e3e2:	d10c      	bne.n	1e3fe <_vfiprintf_r+0x16a>
   1e3e4:	7863      	ldrb	r3, [r4, #1]
   1e3e6:	2b2a      	cmp	r3, #42	; 0x2a
   1e3e8:	d133      	bne.n	1e452 <_vfiprintf_r+0x1be>
   1e3ea:	9b03      	ldr	r3, [sp, #12]
   1e3ec:	3402      	adds	r4, #2
   1e3ee:	1d1a      	adds	r2, r3, #4
   1e3f0:	681b      	ldr	r3, [r3, #0]
   1e3f2:	2b00      	cmp	r3, #0
   1e3f4:	9203      	str	r2, [sp, #12]
   1e3f6:	bfb8      	it	lt
   1e3f8:	f04f 33ff 	movlt.w	r3, #4294967295
   1e3fc:	9305      	str	r3, [sp, #20]
   1e3fe:	4e35      	ldr	r6, [pc, #212]	; (1e4d4 <_vfiprintf_r+0x240>)
   1e400:	2203      	movs	r2, #3
   1e402:	7821      	ldrb	r1, [r4, #0]
   1e404:	4630      	mov	r0, r6
   1e406:	f003 fa7c 	bl	21902 <memchr>
   1e40a:	b138      	cbz	r0, 1e41c <_vfiprintf_r+0x188>
   1e40c:	2340      	movs	r3, #64	; 0x40
   1e40e:	1b80      	subs	r0, r0, r6
   1e410:	3401      	adds	r4, #1
   1e412:	fa03 f000 	lsl.w	r0, r3, r0
   1e416:	9b04      	ldr	r3, [sp, #16]
   1e418:	4303      	orrs	r3, r0
   1e41a:	9304      	str	r3, [sp, #16]
   1e41c:	f814 1b01 	ldrb.w	r1, [r4], #1
   1e420:	2206      	movs	r2, #6
   1e422:	482d      	ldr	r0, [pc, #180]	; (1e4d8 <_vfiprintf_r+0x244>)
   1e424:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
   1e428:	f003 fa6b 	bl	21902 <memchr>
   1e42c:	2800      	cmp	r0, #0
   1e42e:	d03f      	beq.n	1e4b0 <_vfiprintf_r+0x21c>
   1e430:	4b2a      	ldr	r3, [pc, #168]	; (1e4dc <_vfiprintf_r+0x248>)
   1e432:	bb13      	cbnz	r3, 1e47a <_vfiprintf_r+0x1e6>
   1e434:	9b03      	ldr	r3, [sp, #12]
   1e436:	3307      	adds	r3, #7
   1e438:	f023 0307 	bic.w	r3, r3, #7
   1e43c:	3308      	adds	r3, #8
   1e43e:	9303      	str	r3, [sp, #12]
   1e440:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1e442:	4443      	add	r3, r8
   1e444:	9309      	str	r3, [sp, #36]	; 0x24
   1e446:	e76e      	b.n	1e326 <_vfiprintf_r+0x92>
   1e448:	fb06 3202 	mla	r2, r6, r2, r3
   1e44c:	2001      	movs	r0, #1
   1e44e:	460c      	mov	r4, r1
   1e450:	e7a8      	b.n	1e3a4 <_vfiprintf_r+0x110>
   1e452:	2300      	movs	r3, #0
   1e454:	3401      	adds	r4, #1
   1e456:	260a      	movs	r6, #10
   1e458:	4619      	mov	r1, r3
   1e45a:	9305      	str	r3, [sp, #20]
   1e45c:	4620      	mov	r0, r4
   1e45e:	f810 2b01 	ldrb.w	r2, [r0], #1
   1e462:	3a30      	subs	r2, #48	; 0x30
   1e464:	2a09      	cmp	r2, #9
   1e466:	d903      	bls.n	1e470 <_vfiprintf_r+0x1dc>
   1e468:	2b00      	cmp	r3, #0
   1e46a:	d0c8      	beq.n	1e3fe <_vfiprintf_r+0x16a>
   1e46c:	9105      	str	r1, [sp, #20]
   1e46e:	e7c6      	b.n	1e3fe <_vfiprintf_r+0x16a>
   1e470:	fb06 2101 	mla	r1, r6, r1, r2
   1e474:	2301      	movs	r3, #1
   1e476:	4604      	mov	r4, r0
   1e478:	e7f0      	b.n	1e45c <_vfiprintf_r+0x1c8>
   1e47a:	ab03      	add	r3, sp, #12
   1e47c:	462a      	mov	r2, r5
   1e47e:	a904      	add	r1, sp, #16
   1e480:	4638      	mov	r0, r7
   1e482:	9300      	str	r3, [sp, #0]
   1e484:	4b16      	ldr	r3, [pc, #88]	; (1e4e0 <_vfiprintf_r+0x24c>)
   1e486:	f000 f82d 	bl	1e4e4 <_printf_float>
   1e48a:	f1b0 3fff 	cmp.w	r0, #4294967295
   1e48e:	4680      	mov	r8, r0
   1e490:	d1d6      	bne.n	1e440 <_vfiprintf_r+0x1ac>
   1e492:	6e6b      	ldr	r3, [r5, #100]	; 0x64
   1e494:	07d9      	lsls	r1, r3, #31
   1e496:	d405      	bmi.n	1e4a4 <_vfiprintf_r+0x210>
   1e498:	89ab      	ldrh	r3, [r5, #12]
   1e49a:	059a      	lsls	r2, r3, #22
   1e49c:	d402      	bmi.n	1e4a4 <_vfiprintf_r+0x210>
   1e49e:	6da8      	ldr	r0, [r5, #88]	; 0x58
   1e4a0:	f003 fcd8 	bl	21e54 <__retarget_lock_release_recursive>
   1e4a4:	89ab      	ldrh	r3, [r5, #12]
   1e4a6:	065b      	lsls	r3, r3, #25
   1e4a8:	f53f af1a 	bmi.w	1e2e0 <_vfiprintf_r+0x4c>
   1e4ac:	9809      	ldr	r0, [sp, #36]	; 0x24
   1e4ae:	e719      	b.n	1e2e4 <_vfiprintf_r+0x50>
   1e4b0:	ab03      	add	r3, sp, #12
   1e4b2:	462a      	mov	r2, r5
   1e4b4:	a904      	add	r1, sp, #16
   1e4b6:	4638      	mov	r0, r7
   1e4b8:	9300      	str	r3, [sp, #0]
   1e4ba:	4b09      	ldr	r3, [pc, #36]	; (1e4e0 <_vfiprintf_r+0x24c>)
   1e4bc:	f000 fa3c 	bl	1e938 <_printf_i>
   1e4c0:	e7e3      	b.n	1e48a <_vfiprintf_r+0x1f6>
   1e4c2:	bf00      	nop
   1e4c4:	00022fbc 	.word	0x00022fbc
   1e4c8:	00022fdc 	.word	0x00022fdc
   1e4cc:	00022f9c 	.word	0x00022f9c
   1e4d0:	0002571e 	.word	0x0002571e
   1e4d4:	00025724 	.word	0x00025724
   1e4d8:	00025728 	.word	0x00025728
   1e4dc:	0001e4e5 	.word	0x0001e4e5
   1e4e0:	00021993 	.word	0x00021993

0001e4e4 <_printf_float>:
   1e4e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1e4e8:	b08d      	sub	sp, #52	; 0x34
   1e4ea:	460c      	mov	r4, r1
   1e4ec:	4616      	mov	r6, r2
   1e4ee:	461f      	mov	r7, r3
   1e4f0:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
   1e4f4:	4605      	mov	r5, r0
   1e4f6:	f000 fef9 	bl	1f2ec <_localeconv_r>
   1e4fa:	6803      	ldr	r3, [r0, #0]
   1e4fc:	4618      	mov	r0, r3
   1e4fe:	9306      	str	r3, [sp, #24]
   1e500:	f7ee fcba 	bl	ce78 <strlen>
   1e504:	2300      	movs	r3, #0
   1e506:	9007      	str	r0, [sp, #28]
   1e508:	930a      	str	r3, [sp, #40]	; 0x28
   1e50a:	f8d8 3000 	ldr.w	r3, [r8]
   1e50e:	f894 a018 	ldrb.w	sl, [r4, #24]
   1e512:	3307      	adds	r3, #7
   1e514:	f8d4 b000 	ldr.w	fp, [r4]
   1e518:	f023 0307 	bic.w	r3, r3, #7
   1e51c:	f103 0208 	add.w	r2, r3, #8
   1e520:	f8c8 2000 	str.w	r2, [r8]
   1e524:	e9d3 2300 	ldrd	r2, r3, [r3]
   1e528:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
   1e52c:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
   1e530:	f04f 32ff 	mov.w	r2, #4294967295
   1e534:	ed8d 7b04 	vstr	d7, [sp, #16]
   1e538:	e9dd 8304 	ldrd	r8, r3, [sp, #16]
   1e53c:	f023 4900 	bic.w	r9, r3, #2147483648	; 0x80000000
   1e540:	4640      	mov	r0, r8
   1e542:	4ba6      	ldr	r3, [pc, #664]	; (1e7dc <_printf_float+0x2f8>)
   1e544:	4649      	mov	r1, r9
   1e546:	f7ee fc4f 	bl	cde8 <__aeabi_dcmpun>
   1e54a:	bb70      	cbnz	r0, 1e5aa <_printf_float+0xc6>
   1e54c:	f04f 32ff 	mov.w	r2, #4294967295
   1e550:	4ba2      	ldr	r3, [pc, #648]	; (1e7dc <_printf_float+0x2f8>)
   1e552:	4640      	mov	r0, r8
   1e554:	4649      	mov	r1, r9
   1e556:	f7ee fc29 	bl	cdac <__aeabi_dcmple>
   1e55a:	bb30      	cbnz	r0, 1e5aa <_printf_float+0xc6>
   1e55c:	2200      	movs	r2, #0
   1e55e:	2300      	movs	r3, #0
   1e560:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   1e564:	f7ee fc18 	bl	cd98 <__aeabi_dcmplt>
   1e568:	b110      	cbz	r0, 1e570 <_printf_float+0x8c>
   1e56a:	232d      	movs	r3, #45	; 0x2d
   1e56c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
   1e570:	4a9b      	ldr	r2, [pc, #620]	; (1e7e0 <_printf_float+0x2fc>)
   1e572:	4b9c      	ldr	r3, [pc, #624]	; (1e7e4 <_printf_float+0x300>)
   1e574:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
   1e578:	bf94      	ite	ls
   1e57a:	4690      	movls	r8, r2
   1e57c:	4698      	movhi	r8, r3
   1e57e:	f04f 0900 	mov.w	r9, #0
   1e582:	2303      	movs	r3, #3
   1e584:	f02b 0204 	bic.w	r2, fp, #4
   1e588:	6123      	str	r3, [r4, #16]
   1e58a:	6022      	str	r2, [r4, #0]
   1e58c:	9700      	str	r7, [sp, #0]
   1e58e:	4633      	mov	r3, r6
   1e590:	aa0b      	add	r2, sp, #44	; 0x2c
   1e592:	4621      	mov	r1, r4
   1e594:	4628      	mov	r0, r5
   1e596:	f003 fa9e 	bl	21ad6 <_printf_common>
   1e59a:	3001      	adds	r0, #1
   1e59c:	f040 808c 	bne.w	1e6b8 <_printf_float+0x1d4>
   1e5a0:	f04f 30ff 	mov.w	r0, #4294967295
   1e5a4:	b00d      	add	sp, #52	; 0x34
   1e5a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1e5aa:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   1e5ae:	4610      	mov	r0, r2
   1e5b0:	4619      	mov	r1, r3
   1e5b2:	f7ee fc19 	bl	cde8 <__aeabi_dcmpun>
   1e5b6:	b140      	cbz	r0, 1e5ca <_printf_float+0xe6>
   1e5b8:	9b05      	ldr	r3, [sp, #20]
   1e5ba:	4a8b      	ldr	r2, [pc, #556]	; (1e7e8 <_printf_float+0x304>)
   1e5bc:	2b00      	cmp	r3, #0
   1e5be:	bfbc      	itt	lt
   1e5c0:	232d      	movlt	r3, #45	; 0x2d
   1e5c2:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
   1e5c6:	4b89      	ldr	r3, [pc, #548]	; (1e7ec <_printf_float+0x308>)
   1e5c8:	e7d4      	b.n	1e574 <_printf_float+0x90>
   1e5ca:	6863      	ldr	r3, [r4, #4]
   1e5cc:	f00a 09df 	and.w	r9, sl, #223	; 0xdf
   1e5d0:	1c5a      	adds	r2, r3, #1
   1e5d2:	d13e      	bne.n	1e652 <_printf_float+0x16e>
   1e5d4:	2306      	movs	r3, #6
   1e5d6:	6063      	str	r3, [r4, #4]
   1e5d8:	2300      	movs	r3, #0
   1e5da:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
   1e5de:	6861      	ldr	r1, [r4, #4]
   1e5e0:	4628      	mov	r0, r5
   1e5e2:	9303      	str	r3, [sp, #12]
   1e5e4:	ab0a      	add	r3, sp, #40	; 0x28
   1e5e6:	6022      	str	r2, [r4, #0]
   1e5e8:	e9cd a301 	strd	sl, r3, [sp, #4]
   1e5ec:	ab09      	add	r3, sp, #36	; 0x24
   1e5ee:	ed9d 0b04 	vldr	d0, [sp, #16]
   1e5f2:	9300      	str	r3, [sp, #0]
   1e5f4:	f10d 0323 	add.w	r3, sp, #35	; 0x23
   1e5f8:	f003 f9dd 	bl	219b6 <__cvt>
   1e5fc:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
   1e600:	4680      	mov	r8, r0
   1e602:	9909      	ldr	r1, [sp, #36]	; 0x24
   1e604:	d108      	bne.n	1e618 <_printf_float+0x134>
   1e606:	1cc8      	adds	r0, r1, #3
   1e608:	db02      	blt.n	1e610 <_printf_float+0x12c>
   1e60a:	6863      	ldr	r3, [r4, #4]
   1e60c:	4299      	cmp	r1, r3
   1e60e:	dd41      	ble.n	1e694 <_printf_float+0x1b0>
   1e610:	f1aa 0a02 	sub.w	sl, sl, #2
   1e614:	fa5f fa8a 	uxtb.w	sl, sl
   1e618:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
   1e61c:	d820      	bhi.n	1e660 <_printf_float+0x17c>
   1e61e:	3901      	subs	r1, #1
   1e620:	4652      	mov	r2, sl
   1e622:	f104 0050 	add.w	r0, r4, #80	; 0x50
   1e626:	9109      	str	r1, [sp, #36]	; 0x24
   1e628:	f003 fa22 	bl	21a70 <__exponent>
   1e62c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   1e62e:	4681      	mov	r9, r0
   1e630:	1813      	adds	r3, r2, r0
   1e632:	2a01      	cmp	r2, #1
   1e634:	6123      	str	r3, [r4, #16]
   1e636:	dc02      	bgt.n	1e63e <_printf_float+0x15a>
   1e638:	6822      	ldr	r2, [r4, #0]
   1e63a:	07d2      	lsls	r2, r2, #31
   1e63c:	d501      	bpl.n	1e642 <_printf_float+0x15e>
   1e63e:	3301      	adds	r3, #1
   1e640:	6123      	str	r3, [r4, #16]
   1e642:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
   1e646:	2b00      	cmp	r3, #0
   1e648:	d0a0      	beq.n	1e58c <_printf_float+0xa8>
   1e64a:	232d      	movs	r3, #45	; 0x2d
   1e64c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
   1e650:	e79c      	b.n	1e58c <_printf_float+0xa8>
   1e652:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
   1e656:	d1bf      	bne.n	1e5d8 <_printf_float+0xf4>
   1e658:	2b00      	cmp	r3, #0
   1e65a:	d1bd      	bne.n	1e5d8 <_printf_float+0xf4>
   1e65c:	2301      	movs	r3, #1
   1e65e:	e7ba      	b.n	1e5d6 <_printf_float+0xf2>
   1e660:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
   1e664:	d118      	bne.n	1e698 <_printf_float+0x1b4>
   1e666:	2900      	cmp	r1, #0
   1e668:	6863      	ldr	r3, [r4, #4]
   1e66a:	dd0b      	ble.n	1e684 <_printf_float+0x1a0>
   1e66c:	6121      	str	r1, [r4, #16]
   1e66e:	b913      	cbnz	r3, 1e676 <_printf_float+0x192>
   1e670:	6822      	ldr	r2, [r4, #0]
   1e672:	07d0      	lsls	r0, r2, #31
   1e674:	d502      	bpl.n	1e67c <_printf_float+0x198>
   1e676:	3301      	adds	r3, #1
   1e678:	440b      	add	r3, r1
   1e67a:	6123      	str	r3, [r4, #16]
   1e67c:	65a1      	str	r1, [r4, #88]	; 0x58
   1e67e:	f04f 0900 	mov.w	r9, #0
   1e682:	e7de      	b.n	1e642 <_printf_float+0x15e>
   1e684:	b913      	cbnz	r3, 1e68c <_printf_float+0x1a8>
   1e686:	6822      	ldr	r2, [r4, #0]
   1e688:	07d2      	lsls	r2, r2, #31
   1e68a:	d501      	bpl.n	1e690 <_printf_float+0x1ac>
   1e68c:	3302      	adds	r3, #2
   1e68e:	e7f4      	b.n	1e67a <_printf_float+0x196>
   1e690:	2301      	movs	r3, #1
   1e692:	e7f2      	b.n	1e67a <_printf_float+0x196>
   1e694:	f04f 0a67 	mov.w	sl, #103	; 0x67
   1e698:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   1e69a:	4299      	cmp	r1, r3
   1e69c:	db05      	blt.n	1e6aa <_printf_float+0x1c6>
   1e69e:	6823      	ldr	r3, [r4, #0]
   1e6a0:	6121      	str	r1, [r4, #16]
   1e6a2:	07d8      	lsls	r0, r3, #31
   1e6a4:	d5ea      	bpl.n	1e67c <_printf_float+0x198>
   1e6a6:	1c4b      	adds	r3, r1, #1
   1e6a8:	e7e7      	b.n	1e67a <_printf_float+0x196>
   1e6aa:	2900      	cmp	r1, #0
   1e6ac:	bfd4      	ite	le
   1e6ae:	f1c1 0202 	rsble	r2, r1, #2
   1e6b2:	2201      	movgt	r2, #1
   1e6b4:	4413      	add	r3, r2
   1e6b6:	e7e0      	b.n	1e67a <_printf_float+0x196>
   1e6b8:	6823      	ldr	r3, [r4, #0]
   1e6ba:	055a      	lsls	r2, r3, #21
   1e6bc:	d407      	bmi.n	1e6ce <_printf_float+0x1ea>
   1e6be:	6923      	ldr	r3, [r4, #16]
   1e6c0:	4642      	mov	r2, r8
   1e6c2:	4631      	mov	r1, r6
   1e6c4:	4628      	mov	r0, r5
   1e6c6:	47b8      	blx	r7
   1e6c8:	3001      	adds	r0, #1
   1e6ca:	d12b      	bne.n	1e724 <_printf_float+0x240>
   1e6cc:	e768      	b.n	1e5a0 <_printf_float+0xbc>
   1e6ce:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
   1e6d2:	f240 80dc 	bls.w	1e88e <_printf_float+0x3aa>
   1e6d6:	2200      	movs	r2, #0
   1e6d8:	2300      	movs	r3, #0
   1e6da:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
   1e6de:	f7ee fb51 	bl	cd84 <__aeabi_dcmpeq>
   1e6e2:	2800      	cmp	r0, #0
   1e6e4:	d033      	beq.n	1e74e <_printf_float+0x26a>
   1e6e6:	2301      	movs	r3, #1
   1e6e8:	4a41      	ldr	r2, [pc, #260]	; (1e7f0 <_printf_float+0x30c>)
   1e6ea:	4631      	mov	r1, r6
   1e6ec:	4628      	mov	r0, r5
   1e6ee:	47b8      	blx	r7
   1e6f0:	3001      	adds	r0, #1
   1e6f2:	f43f af55 	beq.w	1e5a0 <_printf_float+0xbc>
   1e6f6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
   1e6fa:	429a      	cmp	r2, r3
   1e6fc:	db02      	blt.n	1e704 <_printf_float+0x220>
   1e6fe:	6823      	ldr	r3, [r4, #0]
   1e700:	07d8      	lsls	r0, r3, #31
   1e702:	d50f      	bpl.n	1e724 <_printf_float+0x240>
   1e704:	4631      	mov	r1, r6
   1e706:	4628      	mov	r0, r5
   1e708:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
   1e70c:	47b8      	blx	r7
   1e70e:	3001      	adds	r0, #1
   1e710:	f43f af46 	beq.w	1e5a0 <_printf_float+0xbc>
   1e714:	f04f 0800 	mov.w	r8, #0
   1e718:	f104 091a 	add.w	r9, r4, #26
   1e71c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   1e71e:	3b01      	subs	r3, #1
   1e720:	4543      	cmp	r3, r8
   1e722:	dc09      	bgt.n	1e738 <_printf_float+0x254>
   1e724:	6823      	ldr	r3, [r4, #0]
   1e726:	079b      	lsls	r3, r3, #30
   1e728:	f100 8101 	bmi.w	1e92e <_printf_float+0x44a>
   1e72c:	68e0      	ldr	r0, [r4, #12]
   1e72e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   1e730:	4298      	cmp	r0, r3
   1e732:	bfb8      	it	lt
   1e734:	4618      	movlt	r0, r3
   1e736:	e735      	b.n	1e5a4 <_printf_float+0xc0>
   1e738:	2301      	movs	r3, #1
   1e73a:	464a      	mov	r2, r9
   1e73c:	4631      	mov	r1, r6
   1e73e:	4628      	mov	r0, r5
   1e740:	47b8      	blx	r7
   1e742:	3001      	adds	r0, #1
   1e744:	f43f af2c 	beq.w	1e5a0 <_printf_float+0xbc>
   1e748:	f108 0801 	add.w	r8, r8, #1
   1e74c:	e7e6      	b.n	1e71c <_printf_float+0x238>
   1e74e:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1e750:	2b00      	cmp	r3, #0
   1e752:	dc2b      	bgt.n	1e7ac <_printf_float+0x2c8>
   1e754:	2301      	movs	r3, #1
   1e756:	4a26      	ldr	r2, [pc, #152]	; (1e7f0 <_printf_float+0x30c>)
   1e758:	4631      	mov	r1, r6
   1e75a:	4628      	mov	r0, r5
   1e75c:	47b8      	blx	r7
   1e75e:	3001      	adds	r0, #1
   1e760:	f43f af1e 	beq.w	1e5a0 <_printf_float+0xbc>
   1e764:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
   1e768:	4313      	orrs	r3, r2
   1e76a:	d102      	bne.n	1e772 <_printf_float+0x28e>
   1e76c:	6823      	ldr	r3, [r4, #0]
   1e76e:	07d9      	lsls	r1, r3, #31
   1e770:	d5d8      	bpl.n	1e724 <_printf_float+0x240>
   1e772:	4631      	mov	r1, r6
   1e774:	4628      	mov	r0, r5
   1e776:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
   1e77a:	47b8      	blx	r7
   1e77c:	3001      	adds	r0, #1
   1e77e:	f43f af0f 	beq.w	1e5a0 <_printf_float+0xbc>
   1e782:	f04f 0900 	mov.w	r9, #0
   1e786:	f104 0a1a 	add.w	sl, r4, #26
   1e78a:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1e78c:	425b      	negs	r3, r3
   1e78e:	454b      	cmp	r3, r9
   1e790:	dc01      	bgt.n	1e796 <_printf_float+0x2b2>
   1e792:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   1e794:	e794      	b.n	1e6c0 <_printf_float+0x1dc>
   1e796:	2301      	movs	r3, #1
   1e798:	4652      	mov	r2, sl
   1e79a:	4631      	mov	r1, r6
   1e79c:	4628      	mov	r0, r5
   1e79e:	47b8      	blx	r7
   1e7a0:	3001      	adds	r0, #1
   1e7a2:	f43f aefd 	beq.w	1e5a0 <_printf_float+0xbc>
   1e7a6:	f109 0901 	add.w	r9, r9, #1
   1e7aa:	e7ee      	b.n	1e78a <_printf_float+0x2a6>
   1e7ac:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   1e7ae:	6da3      	ldr	r3, [r4, #88]	; 0x58
   1e7b0:	429a      	cmp	r2, r3
   1e7b2:	bfa8      	it	ge
   1e7b4:	461a      	movge	r2, r3
   1e7b6:	2a00      	cmp	r2, #0
   1e7b8:	4691      	mov	r9, r2
   1e7ba:	dd07      	ble.n	1e7cc <_printf_float+0x2e8>
   1e7bc:	4613      	mov	r3, r2
   1e7be:	4631      	mov	r1, r6
   1e7c0:	4642      	mov	r2, r8
   1e7c2:	4628      	mov	r0, r5
   1e7c4:	47b8      	blx	r7
   1e7c6:	3001      	adds	r0, #1
   1e7c8:	f43f aeea 	beq.w	1e5a0 <_printf_float+0xbc>
   1e7cc:	f104 031a 	add.w	r3, r4, #26
   1e7d0:	f04f 0b00 	mov.w	fp, #0
   1e7d4:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
   1e7d8:	9304      	str	r3, [sp, #16]
   1e7da:	e015      	b.n	1e808 <_printf_float+0x324>
   1e7dc:	7fefffff 	.word	0x7fefffff
   1e7e0:	0002572f 	.word	0x0002572f
   1e7e4:	0002366d 	.word	0x0002366d
   1e7e8:	00025733 	.word	0x00025733
   1e7ec:	00025737 	.word	0x00025737
   1e7f0:	000251cf 	.word	0x000251cf
   1e7f4:	2301      	movs	r3, #1
   1e7f6:	9a04      	ldr	r2, [sp, #16]
   1e7f8:	4631      	mov	r1, r6
   1e7fa:	4628      	mov	r0, r5
   1e7fc:	47b8      	blx	r7
   1e7fe:	3001      	adds	r0, #1
   1e800:	f43f aece 	beq.w	1e5a0 <_printf_float+0xbc>
   1e804:	f10b 0b01 	add.w	fp, fp, #1
   1e808:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
   1e80c:	ebaa 0309 	sub.w	r3, sl, r9
   1e810:	455b      	cmp	r3, fp
   1e812:	dcef      	bgt.n	1e7f4 <_printf_float+0x310>
   1e814:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
   1e818:	429a      	cmp	r2, r3
   1e81a:	db1b      	blt.n	1e854 <_printf_float+0x370>
   1e81c:	6823      	ldr	r3, [r4, #0]
   1e81e:	07da      	lsls	r2, r3, #31
   1e820:	d418      	bmi.n	1e854 <_printf_float+0x370>
   1e822:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
   1e826:	4592      	cmp	sl, r2
   1e828:	db1c      	blt.n	1e864 <_printf_float+0x380>
   1e82a:	eba3 090a 	sub.w	r9, r3, sl
   1e82e:	f1b9 0f00 	cmp.w	r9, #0
   1e832:	dd08      	ble.n	1e846 <_printf_float+0x362>
   1e834:	464b      	mov	r3, r9
   1e836:	eb08 020a 	add.w	r2, r8, sl
   1e83a:	4631      	mov	r1, r6
   1e83c:	4628      	mov	r0, r5
   1e83e:	47b8      	blx	r7
   1e840:	3001      	adds	r0, #1
   1e842:	f43f aead 	beq.w	1e5a0 <_printf_float+0xbc>
   1e846:	f04f 0800 	mov.w	r8, #0
   1e84a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
   1e84e:	f104 0a1a 	add.w	sl, r4, #26
   1e852:	e014      	b.n	1e87e <_printf_float+0x39a>
   1e854:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
   1e858:	4631      	mov	r1, r6
   1e85a:	4628      	mov	r0, r5
   1e85c:	47b8      	blx	r7
   1e85e:	3001      	adds	r0, #1
   1e860:	d1df      	bne.n	1e822 <_printf_float+0x33e>
   1e862:	e69d      	b.n	1e5a0 <_printf_float+0xbc>
   1e864:	eba3 0902 	sub.w	r9, r3, r2
   1e868:	e7e1      	b.n	1e82e <_printf_float+0x34a>
   1e86a:	2301      	movs	r3, #1
   1e86c:	4652      	mov	r2, sl
   1e86e:	4631      	mov	r1, r6
   1e870:	4628      	mov	r0, r5
   1e872:	47b8      	blx	r7
   1e874:	3001      	adds	r0, #1
   1e876:	f43f ae93 	beq.w	1e5a0 <_printf_float+0xbc>
   1e87a:	f108 0801 	add.w	r8, r8, #1
   1e87e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
   1e882:	1a9b      	subs	r3, r3, r2
   1e884:	eba3 0309 	sub.w	r3, r3, r9
   1e888:	4543      	cmp	r3, r8
   1e88a:	dcee      	bgt.n	1e86a <_printf_float+0x386>
   1e88c:	e74a      	b.n	1e724 <_printf_float+0x240>
   1e88e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   1e890:	2a01      	cmp	r2, #1
   1e892:	dc01      	bgt.n	1e898 <_printf_float+0x3b4>
   1e894:	07db      	lsls	r3, r3, #31
   1e896:	d537      	bpl.n	1e908 <_printf_float+0x424>
   1e898:	2301      	movs	r3, #1
   1e89a:	4642      	mov	r2, r8
   1e89c:	4631      	mov	r1, r6
   1e89e:	4628      	mov	r0, r5
   1e8a0:	47b8      	blx	r7
   1e8a2:	3001      	adds	r0, #1
   1e8a4:	f43f ae7c 	beq.w	1e5a0 <_printf_float+0xbc>
   1e8a8:	4631      	mov	r1, r6
   1e8aa:	4628      	mov	r0, r5
   1e8ac:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
   1e8b0:	47b8      	blx	r7
   1e8b2:	3001      	adds	r0, #1
   1e8b4:	f43f ae74 	beq.w	1e5a0 <_printf_float+0xbc>
   1e8b8:	2200      	movs	r2, #0
   1e8ba:	2300      	movs	r3, #0
   1e8bc:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
   1e8c0:	f7ee fa60 	bl	cd84 <__aeabi_dcmpeq>
   1e8c4:	b9d8      	cbnz	r0, 1e8fe <_printf_float+0x41a>
   1e8c6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   1e8c8:	f108 0201 	add.w	r2, r8, #1
   1e8cc:	3b01      	subs	r3, #1
   1e8ce:	4631      	mov	r1, r6
   1e8d0:	4628      	mov	r0, r5
   1e8d2:	47b8      	blx	r7
   1e8d4:	3001      	adds	r0, #1
   1e8d6:	d10e      	bne.n	1e8f6 <_printf_float+0x412>
   1e8d8:	e662      	b.n	1e5a0 <_printf_float+0xbc>
   1e8da:	2301      	movs	r3, #1
   1e8dc:	4652      	mov	r2, sl
   1e8de:	4631      	mov	r1, r6
   1e8e0:	4628      	mov	r0, r5
   1e8e2:	47b8      	blx	r7
   1e8e4:	3001      	adds	r0, #1
   1e8e6:	f43f ae5b 	beq.w	1e5a0 <_printf_float+0xbc>
   1e8ea:	f108 0801 	add.w	r8, r8, #1
   1e8ee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   1e8f0:	3b01      	subs	r3, #1
   1e8f2:	4543      	cmp	r3, r8
   1e8f4:	dcf1      	bgt.n	1e8da <_printf_float+0x3f6>
   1e8f6:	464b      	mov	r3, r9
   1e8f8:	f104 0250 	add.w	r2, r4, #80	; 0x50
   1e8fc:	e6e1      	b.n	1e6c2 <_printf_float+0x1de>
   1e8fe:	f04f 0800 	mov.w	r8, #0
   1e902:	f104 0a1a 	add.w	sl, r4, #26
   1e906:	e7f2      	b.n	1e8ee <_printf_float+0x40a>
   1e908:	2301      	movs	r3, #1
   1e90a:	4642      	mov	r2, r8
   1e90c:	e7df      	b.n	1e8ce <_printf_float+0x3ea>
   1e90e:	2301      	movs	r3, #1
   1e910:	464a      	mov	r2, r9
   1e912:	4631      	mov	r1, r6
   1e914:	4628      	mov	r0, r5
   1e916:	47b8      	blx	r7
   1e918:	3001      	adds	r0, #1
   1e91a:	f43f ae41 	beq.w	1e5a0 <_printf_float+0xbc>
   1e91e:	f108 0801 	add.w	r8, r8, #1
   1e922:	68e3      	ldr	r3, [r4, #12]
   1e924:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   1e926:	1a9b      	subs	r3, r3, r2
   1e928:	4543      	cmp	r3, r8
   1e92a:	dcf0      	bgt.n	1e90e <_printf_float+0x42a>
   1e92c:	e6fe      	b.n	1e72c <_printf_float+0x248>
   1e92e:	f04f 0800 	mov.w	r8, #0
   1e932:	f104 0919 	add.w	r9, r4, #25
   1e936:	e7f4      	b.n	1e922 <_printf_float+0x43e>

0001e938 <_printf_i>:
   1e938:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1e93c:	4606      	mov	r6, r0
   1e93e:	460c      	mov	r4, r1
   1e940:	f101 0043 	add.w	r0, r1, #67	; 0x43
   1e944:	7e09      	ldrb	r1, [r1, #24]
   1e946:	b085      	sub	sp, #20
   1e948:	4698      	mov	r8, r3
   1e94a:	296e      	cmp	r1, #110	; 0x6e
   1e94c:	4617      	mov	r7, r2
   1e94e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   1e950:	f000 80ba 	beq.w	1eac8 <_printf_i+0x190>
   1e954:	d824      	bhi.n	1e9a0 <_printf_i+0x68>
   1e956:	2963      	cmp	r1, #99	; 0x63
   1e958:	d039      	beq.n	1e9ce <_printf_i+0x96>
   1e95a:	d80a      	bhi.n	1e972 <_printf_i+0x3a>
   1e95c:	2900      	cmp	r1, #0
   1e95e:	f000 80c3 	beq.w	1eae8 <_printf_i+0x1b0>
   1e962:	2958      	cmp	r1, #88	; 0x58
   1e964:	f000 8091 	beq.w	1ea8a <_printf_i+0x152>
   1e968:	f104 0542 	add.w	r5, r4, #66	; 0x42
   1e96c:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
   1e970:	e035      	b.n	1e9de <_printf_i+0xa6>
   1e972:	2964      	cmp	r1, #100	; 0x64
   1e974:	d001      	beq.n	1e97a <_printf_i+0x42>
   1e976:	2969      	cmp	r1, #105	; 0x69
   1e978:	d1f6      	bne.n	1e968 <_printf_i+0x30>
   1e97a:	6825      	ldr	r5, [r4, #0]
   1e97c:	681a      	ldr	r2, [r3, #0]
   1e97e:	f015 0f80 	tst.w	r5, #128	; 0x80
   1e982:	f102 0104 	add.w	r1, r2, #4
   1e986:	d02c      	beq.n	1e9e2 <_printf_i+0xaa>
   1e988:	6812      	ldr	r2, [r2, #0]
   1e98a:	6019      	str	r1, [r3, #0]
   1e98c:	2a00      	cmp	r2, #0
   1e98e:	da03      	bge.n	1e998 <_printf_i+0x60>
   1e990:	232d      	movs	r3, #45	; 0x2d
   1e992:	4252      	negs	r2, r2
   1e994:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
   1e998:	f8df c1bc 	ldr.w	ip, [pc, #444]	; 1eb58 <_printf_i+0x220>
   1e99c:	230a      	movs	r3, #10
   1e99e:	e03f      	b.n	1ea20 <_printf_i+0xe8>
   1e9a0:	2973      	cmp	r1, #115	; 0x73
   1e9a2:	f000 80a5 	beq.w	1eaf0 <_printf_i+0x1b8>
   1e9a6:	d808      	bhi.n	1e9ba <_printf_i+0x82>
   1e9a8:	296f      	cmp	r1, #111	; 0x6f
   1e9aa:	d021      	beq.n	1e9f0 <_printf_i+0xb8>
   1e9ac:	2970      	cmp	r1, #112	; 0x70
   1e9ae:	d1db      	bne.n	1e968 <_printf_i+0x30>
   1e9b0:	6822      	ldr	r2, [r4, #0]
   1e9b2:	f042 0220 	orr.w	r2, r2, #32
   1e9b6:	6022      	str	r2, [r4, #0]
   1e9b8:	e003      	b.n	1e9c2 <_printf_i+0x8a>
   1e9ba:	2975      	cmp	r1, #117	; 0x75
   1e9bc:	d018      	beq.n	1e9f0 <_printf_i+0xb8>
   1e9be:	2978      	cmp	r1, #120	; 0x78
   1e9c0:	d1d2      	bne.n	1e968 <_printf_i+0x30>
   1e9c2:	2278      	movs	r2, #120	; 0x78
   1e9c4:	f8df c194 	ldr.w	ip, [pc, #404]	; 1eb5c <_printf_i+0x224>
   1e9c8:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
   1e9cc:	e061      	b.n	1ea92 <_printf_i+0x15a>
   1e9ce:	681a      	ldr	r2, [r3, #0]
   1e9d0:	f104 0542 	add.w	r5, r4, #66	; 0x42
   1e9d4:	1d11      	adds	r1, r2, #4
   1e9d6:	6019      	str	r1, [r3, #0]
   1e9d8:	6813      	ldr	r3, [r2, #0]
   1e9da:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
   1e9de:	2301      	movs	r3, #1
   1e9e0:	e093      	b.n	1eb0a <_printf_i+0x1d2>
   1e9e2:	6812      	ldr	r2, [r2, #0]
   1e9e4:	f015 0f40 	tst.w	r5, #64	; 0x40
   1e9e8:	6019      	str	r1, [r3, #0]
   1e9ea:	bf18      	it	ne
   1e9ec:	b212      	sxthne	r2, r2
   1e9ee:	e7cd      	b.n	1e98c <_printf_i+0x54>
   1e9f0:	f8d4 c000 	ldr.w	ip, [r4]
   1e9f4:	681a      	ldr	r2, [r3, #0]
   1e9f6:	f01c 0f80 	tst.w	ip, #128	; 0x80
   1e9fa:	f102 0504 	add.w	r5, r2, #4
   1e9fe:	601d      	str	r5, [r3, #0]
   1ea00:	d001      	beq.n	1ea06 <_printf_i+0xce>
   1ea02:	6812      	ldr	r2, [r2, #0]
   1ea04:	e003      	b.n	1ea0e <_printf_i+0xd6>
   1ea06:	f01c 0f40 	tst.w	ip, #64	; 0x40
   1ea0a:	d0fa      	beq.n	1ea02 <_printf_i+0xca>
   1ea0c:	8812      	ldrh	r2, [r2, #0]
   1ea0e:	296f      	cmp	r1, #111	; 0x6f
   1ea10:	f8df c144 	ldr.w	ip, [pc, #324]	; 1eb58 <_printf_i+0x220>
   1ea14:	bf0c      	ite	eq
   1ea16:	2308      	moveq	r3, #8
   1ea18:	230a      	movne	r3, #10
   1ea1a:	2100      	movs	r1, #0
   1ea1c:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
   1ea20:	6865      	ldr	r5, [r4, #4]
   1ea22:	2d00      	cmp	r5, #0
   1ea24:	60a5      	str	r5, [r4, #8]
   1ea26:	bfa2      	ittt	ge
   1ea28:	6821      	ldrge	r1, [r4, #0]
   1ea2a:	f021 0104 	bicge.w	r1, r1, #4
   1ea2e:	6021      	strge	r1, [r4, #0]
   1ea30:	b90a      	cbnz	r2, 1ea36 <_printf_i+0xfe>
   1ea32:	2d00      	cmp	r5, #0
   1ea34:	d046      	beq.n	1eac4 <_printf_i+0x18c>
   1ea36:	4605      	mov	r5, r0
   1ea38:	4293      	cmp	r3, r2
   1ea3a:	fbb2 f1f3 	udiv	r1, r2, r3
   1ea3e:	fb03 2e11 	mls	lr, r3, r1, r2
   1ea42:	f81c e00e 	ldrb.w	lr, [ip, lr]
   1ea46:	f805 ed01 	strb.w	lr, [r5, #-1]!
   1ea4a:	d939      	bls.n	1eac0 <_printf_i+0x188>
   1ea4c:	2b08      	cmp	r3, #8
   1ea4e:	d10b      	bne.n	1ea68 <_printf_i+0x130>
   1ea50:	6823      	ldr	r3, [r4, #0]
   1ea52:	07da      	lsls	r2, r3, #31
   1ea54:	d508      	bpl.n	1ea68 <_printf_i+0x130>
   1ea56:	6923      	ldr	r3, [r4, #16]
   1ea58:	6862      	ldr	r2, [r4, #4]
   1ea5a:	429a      	cmp	r2, r3
   1ea5c:	bfde      	ittt	le
   1ea5e:	2330      	movle	r3, #48	; 0x30
   1ea60:	f805 3c01 	strble.w	r3, [r5, #-1]
   1ea64:	f105 35ff 	addle.w	r5, r5, #4294967295
   1ea68:	1b40      	subs	r0, r0, r5
   1ea6a:	6120      	str	r0, [r4, #16]
   1ea6c:	f8cd 8000 	str.w	r8, [sp]
   1ea70:	463b      	mov	r3, r7
   1ea72:	aa03      	add	r2, sp, #12
   1ea74:	4621      	mov	r1, r4
   1ea76:	4630      	mov	r0, r6
   1ea78:	f003 f82d 	bl	21ad6 <_printf_common>
   1ea7c:	3001      	adds	r0, #1
   1ea7e:	d149      	bne.n	1eb14 <_printf_i+0x1dc>
   1ea80:	f04f 30ff 	mov.w	r0, #4294967295
   1ea84:	b005      	add	sp, #20
   1ea86:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   1ea8a:	f8df c0cc 	ldr.w	ip, [pc, #204]	; 1eb58 <_printf_i+0x220>
   1ea8e:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
   1ea92:	681d      	ldr	r5, [r3, #0]
   1ea94:	6821      	ldr	r1, [r4, #0]
   1ea96:	f855 2b04 	ldr.w	r2, [r5], #4
   1ea9a:	601d      	str	r5, [r3, #0]
   1ea9c:	060d      	lsls	r5, r1, #24
   1ea9e:	d50b      	bpl.n	1eab8 <_printf_i+0x180>
   1eaa0:	07cd      	lsls	r5, r1, #31
   1eaa2:	bf44      	itt	mi
   1eaa4:	f041 0120 	orrmi.w	r1, r1, #32
   1eaa8:	6021      	strmi	r1, [r4, #0]
   1eaaa:	b91a      	cbnz	r2, 1eab4 <_printf_i+0x17c>
   1eaac:	6823      	ldr	r3, [r4, #0]
   1eaae:	f023 0320 	bic.w	r3, r3, #32
   1eab2:	6023      	str	r3, [r4, #0]
   1eab4:	2310      	movs	r3, #16
   1eab6:	e7b0      	b.n	1ea1a <_printf_i+0xe2>
   1eab8:	064b      	lsls	r3, r1, #25
   1eaba:	bf48      	it	mi
   1eabc:	b292      	uxthmi	r2, r2
   1eabe:	e7ef      	b.n	1eaa0 <_printf_i+0x168>
   1eac0:	460a      	mov	r2, r1
   1eac2:	e7b9      	b.n	1ea38 <_printf_i+0x100>
   1eac4:	4605      	mov	r5, r0
   1eac6:	e7c1      	b.n	1ea4c <_printf_i+0x114>
   1eac8:	681a      	ldr	r2, [r3, #0]
   1eaca:	f8d4 c000 	ldr.w	ip, [r4]
   1eace:	1d15      	adds	r5, r2, #4
   1ead0:	6961      	ldr	r1, [r4, #20]
   1ead2:	f01c 0f80 	tst.w	ip, #128	; 0x80
   1ead6:	601d      	str	r5, [r3, #0]
   1ead8:	6813      	ldr	r3, [r2, #0]
   1eada:	d001      	beq.n	1eae0 <_printf_i+0x1a8>
   1eadc:	6019      	str	r1, [r3, #0]
   1eade:	e003      	b.n	1eae8 <_printf_i+0x1b0>
   1eae0:	f01c 0f40 	tst.w	ip, #64	; 0x40
   1eae4:	d0fa      	beq.n	1eadc <_printf_i+0x1a4>
   1eae6:	8019      	strh	r1, [r3, #0]
   1eae8:	2300      	movs	r3, #0
   1eaea:	4605      	mov	r5, r0
   1eaec:	6123      	str	r3, [r4, #16]
   1eaee:	e7bd      	b.n	1ea6c <_printf_i+0x134>
   1eaf0:	681a      	ldr	r2, [r3, #0]
   1eaf2:	1d11      	adds	r1, r2, #4
   1eaf4:	6019      	str	r1, [r3, #0]
   1eaf6:	2100      	movs	r1, #0
   1eaf8:	6815      	ldr	r5, [r2, #0]
   1eafa:	6862      	ldr	r2, [r4, #4]
   1eafc:	4628      	mov	r0, r5
   1eafe:	f002 ff00 	bl	21902 <memchr>
   1eb02:	b108      	cbz	r0, 1eb08 <_printf_i+0x1d0>
   1eb04:	1b40      	subs	r0, r0, r5
   1eb06:	6060      	str	r0, [r4, #4]
   1eb08:	6863      	ldr	r3, [r4, #4]
   1eb0a:	6123      	str	r3, [r4, #16]
   1eb0c:	2300      	movs	r3, #0
   1eb0e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
   1eb12:	e7ab      	b.n	1ea6c <_printf_i+0x134>
   1eb14:	6923      	ldr	r3, [r4, #16]
   1eb16:	462a      	mov	r2, r5
   1eb18:	4639      	mov	r1, r7
   1eb1a:	4630      	mov	r0, r6
   1eb1c:	47c0      	blx	r8
   1eb1e:	3001      	adds	r0, #1
   1eb20:	d0ae      	beq.n	1ea80 <_printf_i+0x148>
   1eb22:	6823      	ldr	r3, [r4, #0]
   1eb24:	079b      	lsls	r3, r3, #30
   1eb26:	d413      	bmi.n	1eb50 <_printf_i+0x218>
   1eb28:	68e0      	ldr	r0, [r4, #12]
   1eb2a:	9b03      	ldr	r3, [sp, #12]
   1eb2c:	4298      	cmp	r0, r3
   1eb2e:	bfb8      	it	lt
   1eb30:	4618      	movlt	r0, r3
   1eb32:	e7a7      	b.n	1ea84 <_printf_i+0x14c>
   1eb34:	2301      	movs	r3, #1
   1eb36:	464a      	mov	r2, r9
   1eb38:	4639      	mov	r1, r7
   1eb3a:	4630      	mov	r0, r6
   1eb3c:	47c0      	blx	r8
   1eb3e:	3001      	adds	r0, #1
   1eb40:	d09e      	beq.n	1ea80 <_printf_i+0x148>
   1eb42:	3501      	adds	r5, #1
   1eb44:	68e3      	ldr	r3, [r4, #12]
   1eb46:	9a03      	ldr	r2, [sp, #12]
   1eb48:	1a9b      	subs	r3, r3, r2
   1eb4a:	42ab      	cmp	r3, r5
   1eb4c:	dcf2      	bgt.n	1eb34 <_printf_i+0x1fc>
   1eb4e:	e7eb      	b.n	1eb28 <_printf_i+0x1f0>
   1eb50:	2500      	movs	r5, #0
   1eb52:	f104 0919 	add.w	r9, r4, #25
   1eb56:	e7f5      	b.n	1eb44 <_printf_i+0x20c>
   1eb58:	0002573b 	.word	0x0002573b
   1eb5c:	0002574c 	.word	0x0002574c

0001eb60 <sniprintf>:
   1eb60:	b40c      	push	{r2, r3}
   1eb62:	4b18      	ldr	r3, [pc, #96]	; (1ebc4 <sniprintf+0x64>)
   1eb64:	b530      	push	{r4, r5, lr}
   1eb66:	1e0c      	subs	r4, r1, #0
   1eb68:	b09d      	sub	sp, #116	; 0x74
   1eb6a:	681d      	ldr	r5, [r3, #0]
   1eb6c:	da08      	bge.n	1eb80 <sniprintf+0x20>
   1eb6e:	238b      	movs	r3, #139	; 0x8b
   1eb70:	f04f 30ff 	mov.w	r0, #4294967295
   1eb74:	602b      	str	r3, [r5, #0]
   1eb76:	b01d      	add	sp, #116	; 0x74
   1eb78:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
   1eb7c:	b002      	add	sp, #8
   1eb7e:	4770      	bx	lr
   1eb80:	f44f 7302 	mov.w	r3, #520	; 0x208
   1eb84:	9002      	str	r0, [sp, #8]
   1eb86:	9006      	str	r0, [sp, #24]
   1eb88:	a902      	add	r1, sp, #8
   1eb8a:	f8ad 3014 	strh.w	r3, [sp, #20]
   1eb8e:	bf14      	ite	ne
   1eb90:	f104 33ff 	addne.w	r3, r4, #4294967295
   1eb94:	4623      	moveq	r3, r4
   1eb96:	9a20      	ldr	r2, [sp, #128]	; 0x80
   1eb98:	4628      	mov	r0, r5
   1eb9a:	9304      	str	r3, [sp, #16]
   1eb9c:	9307      	str	r3, [sp, #28]
   1eb9e:	f64f 73ff 	movw	r3, #65535	; 0xffff
   1eba2:	f8ad 3016 	strh.w	r3, [sp, #22]
   1eba6:	ab21      	add	r3, sp, #132	; 0x84
   1eba8:	9301      	str	r3, [sp, #4]
   1ebaa:	f000 fce1 	bl	1f570 <_svfiprintf_r>
   1ebae:	1c43      	adds	r3, r0, #1
   1ebb0:	bfbc      	itt	lt
   1ebb2:	238b      	movlt	r3, #139	; 0x8b
   1ebb4:	602b      	strlt	r3, [r5, #0]
   1ebb6:	2c00      	cmp	r4, #0
   1ebb8:	d0dd      	beq.n	1eb76 <sniprintf+0x16>
   1ebba:	9b02      	ldr	r3, [sp, #8]
   1ebbc:	2200      	movs	r2, #0
   1ebbe:	701a      	strb	r2, [r3, #0]
   1ebc0:	e7d9      	b.n	1eb76 <sniprintf+0x16>
   1ebc2:	bf00      	nop
   1ebc4:	200260b0 	.word	0x200260b0

0001ebc8 <_strtol_l.isra.0>:
   1ebc8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1ebcc:	4686      	mov	lr, r0
   1ebce:	4f39      	ldr	r7, [pc, #228]	; (1ecb4 <_strtol_l.isra.0+0xec>)
   1ebd0:	4608      	mov	r0, r1
   1ebd2:	4605      	mov	r5, r0
   1ebd4:	f815 4b01 	ldrb.w	r4, [r5], #1
   1ebd8:	5de6      	ldrb	r6, [r4, r7]
   1ebda:	f016 0608 	ands.w	r6, r6, #8
   1ebde:	d135      	bne.n	1ec4c <_strtol_l.isra.0+0x84>
   1ebe0:	2c2d      	cmp	r4, #45	; 0x2d
   1ebe2:	d135      	bne.n	1ec50 <_strtol_l.isra.0+0x88>
   1ebe4:	782c      	ldrb	r4, [r5, #0]
   1ebe6:	f04f 0801 	mov.w	r8, #1
   1ebea:	1c85      	adds	r5, r0, #2
   1ebec:	2b00      	cmp	r3, #0
   1ebee:	d05c      	beq.n	1ecaa <_strtol_l.isra.0+0xe2>
   1ebf0:	2b10      	cmp	r3, #16
   1ebf2:	d109      	bne.n	1ec08 <_strtol_l.isra.0+0x40>
   1ebf4:	2c30      	cmp	r4, #48	; 0x30
   1ebf6:	d107      	bne.n	1ec08 <_strtol_l.isra.0+0x40>
   1ebf8:	7828      	ldrb	r0, [r5, #0]
   1ebfa:	f000 00df 	and.w	r0, r0, #223	; 0xdf
   1ebfe:	2858      	cmp	r0, #88	; 0x58
   1ec00:	d14e      	bne.n	1eca0 <_strtol_l.isra.0+0xd8>
   1ec02:	786c      	ldrb	r4, [r5, #1]
   1ec04:	2310      	movs	r3, #16
   1ec06:	3502      	adds	r5, #2
   1ec08:	f1b8 0f00 	cmp.w	r8, #0
   1ec0c:	f04f 0700 	mov.w	r7, #0
   1ec10:	bf14      	ite	ne
   1ec12:	f04f 4c00 	movne.w	ip, #2147483648	; 0x80000000
   1ec16:	f06f 4c00 	mvneq.w	ip, #2147483648	; 0x80000000
   1ec1a:	4638      	mov	r0, r7
   1ec1c:	fbbc f9f3 	udiv	r9, ip, r3
   1ec20:	fb03 ca19 	mls	sl, r3, r9, ip
   1ec24:	f1a4 0630 	sub.w	r6, r4, #48	; 0x30
   1ec28:	2e09      	cmp	r6, #9
   1ec2a:	d817      	bhi.n	1ec5c <_strtol_l.isra.0+0x94>
   1ec2c:	4634      	mov	r4, r6
   1ec2e:	42a3      	cmp	r3, r4
   1ec30:	dd23      	ble.n	1ec7a <_strtol_l.isra.0+0xb2>
   1ec32:	1c7e      	adds	r6, r7, #1
   1ec34:	d007      	beq.n	1ec46 <_strtol_l.isra.0+0x7e>
   1ec36:	4581      	cmp	r9, r0
   1ec38:	d31c      	bcc.n	1ec74 <_strtol_l.isra.0+0xac>
   1ec3a:	d101      	bne.n	1ec40 <_strtol_l.isra.0+0x78>
   1ec3c:	45a2      	cmp	sl, r4
   1ec3e:	db19      	blt.n	1ec74 <_strtol_l.isra.0+0xac>
   1ec40:	fb00 4003 	mla	r0, r0, r3, r4
   1ec44:	2701      	movs	r7, #1
   1ec46:	f815 4b01 	ldrb.w	r4, [r5], #1
   1ec4a:	e7eb      	b.n	1ec24 <_strtol_l.isra.0+0x5c>
   1ec4c:	4628      	mov	r0, r5
   1ec4e:	e7c0      	b.n	1ebd2 <_strtol_l.isra.0+0xa>
   1ec50:	2c2b      	cmp	r4, #43	; 0x2b
   1ec52:	46b0      	mov	r8, r6
   1ec54:	bf04      	itt	eq
   1ec56:	782c      	ldrbeq	r4, [r5, #0]
   1ec58:	1c85      	addeq	r5, r0, #2
   1ec5a:	e7c7      	b.n	1ebec <_strtol_l.isra.0+0x24>
   1ec5c:	f1a4 0641 	sub.w	r6, r4, #65	; 0x41
   1ec60:	2e19      	cmp	r6, #25
   1ec62:	d801      	bhi.n	1ec68 <_strtol_l.isra.0+0xa0>
   1ec64:	3c37      	subs	r4, #55	; 0x37
   1ec66:	e7e2      	b.n	1ec2e <_strtol_l.isra.0+0x66>
   1ec68:	f1a4 0661 	sub.w	r6, r4, #97	; 0x61
   1ec6c:	2e19      	cmp	r6, #25
   1ec6e:	d804      	bhi.n	1ec7a <_strtol_l.isra.0+0xb2>
   1ec70:	3c57      	subs	r4, #87	; 0x57
   1ec72:	e7dc      	b.n	1ec2e <_strtol_l.isra.0+0x66>
   1ec74:	f04f 37ff 	mov.w	r7, #4294967295
   1ec78:	e7e5      	b.n	1ec46 <_strtol_l.isra.0+0x7e>
   1ec7a:	1c7b      	adds	r3, r7, #1
   1ec7c:	d106      	bne.n	1ec8c <_strtol_l.isra.0+0xc4>
   1ec7e:	2322      	movs	r3, #34	; 0x22
   1ec80:	4660      	mov	r0, ip
   1ec82:	f8ce 3000 	str.w	r3, [lr]
   1ec86:	b942      	cbnz	r2, 1ec9a <_strtol_l.isra.0+0xd2>
   1ec88:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1ec8c:	f1b8 0f00 	cmp.w	r8, #0
   1ec90:	d000      	beq.n	1ec94 <_strtol_l.isra.0+0xcc>
   1ec92:	4240      	negs	r0, r0
   1ec94:	2a00      	cmp	r2, #0
   1ec96:	d0f7      	beq.n	1ec88 <_strtol_l.isra.0+0xc0>
   1ec98:	b107      	cbz	r7, 1ec9c <_strtol_l.isra.0+0xd4>
   1ec9a:	1e69      	subs	r1, r5, #1
   1ec9c:	6011      	str	r1, [r2, #0]
   1ec9e:	e7f3      	b.n	1ec88 <_strtol_l.isra.0+0xc0>
   1eca0:	2430      	movs	r4, #48	; 0x30
   1eca2:	2b00      	cmp	r3, #0
   1eca4:	d1b0      	bne.n	1ec08 <_strtol_l.isra.0+0x40>
   1eca6:	2308      	movs	r3, #8
   1eca8:	e7ae      	b.n	1ec08 <_strtol_l.isra.0+0x40>
   1ecaa:	2c30      	cmp	r4, #48	; 0x30
   1ecac:	d0a4      	beq.n	1ebf8 <_strtol_l.isra.0+0x30>
   1ecae:	230a      	movs	r3, #10
   1ecb0:	e7aa      	b.n	1ec08 <_strtol_l.isra.0+0x40>
   1ecb2:	bf00      	nop
   1ecb4:	0002561e 	.word	0x0002561e

0001ecb8 <strtol>:
   1ecb8:	4613      	mov	r3, r2
   1ecba:	460a      	mov	r2, r1
   1ecbc:	4601      	mov	r1, r0
   1ecbe:	4802      	ldr	r0, [pc, #8]	; (1ecc8 <strtol+0x10>)
   1ecc0:	6800      	ldr	r0, [r0, #0]
   1ecc2:	f7ff bf81 	b.w	1ebc8 <_strtol_l.isra.0>
   1ecc6:	bf00      	nop
   1ecc8:	200260b0 	.word	0x200260b0

0001eccc <_strtoul_l.isra.0>:
   1eccc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1ecd0:	4686      	mov	lr, r0
   1ecd2:	4f37      	ldr	r7, [pc, #220]	; (1edb0 <_strtoul_l.isra.0+0xe4>)
   1ecd4:	4608      	mov	r0, r1
   1ecd6:	4605      	mov	r5, r0
   1ecd8:	f815 4b01 	ldrb.w	r4, [r5], #1
   1ecdc:	5de6      	ldrb	r6, [r4, r7]
   1ecde:	f016 0608 	ands.w	r6, r6, #8
   1ece2:	d131      	bne.n	1ed48 <_strtoul_l.isra.0+0x7c>
   1ece4:	2c2d      	cmp	r4, #45	; 0x2d
   1ece6:	d131      	bne.n	1ed4c <_strtoul_l.isra.0+0x80>
   1ece8:	782c      	ldrb	r4, [r5, #0]
   1ecea:	f04f 0801 	mov.w	r8, #1
   1ecee:	1c85      	adds	r5, r0, #2
   1ecf0:	2b00      	cmp	r3, #0
   1ecf2:	d059      	beq.n	1eda8 <_strtoul_l.isra.0+0xdc>
   1ecf4:	2b10      	cmp	r3, #16
   1ecf6:	d109      	bne.n	1ed0c <_strtoul_l.isra.0+0x40>
   1ecf8:	2c30      	cmp	r4, #48	; 0x30
   1ecfa:	d107      	bne.n	1ed0c <_strtoul_l.isra.0+0x40>
   1ecfc:	7828      	ldrb	r0, [r5, #0]
   1ecfe:	f000 00df 	and.w	r0, r0, #223	; 0xdf
   1ed02:	2858      	cmp	r0, #88	; 0x58
   1ed04:	d14b      	bne.n	1ed9e <_strtoul_l.isra.0+0xd2>
   1ed06:	786c      	ldrb	r4, [r5, #1]
   1ed08:	2310      	movs	r3, #16
   1ed0a:	3502      	adds	r5, #2
   1ed0c:	f04f 3cff 	mov.w	ip, #4294967295
   1ed10:	2600      	movs	r6, #0
   1ed12:	fbbc fcf3 	udiv	ip, ip, r3
   1ed16:	fb03 f90c 	mul.w	r9, r3, ip
   1ed1a:	4630      	mov	r0, r6
   1ed1c:	ea6f 0909 	mvn.w	r9, r9
   1ed20:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
   1ed24:	2f09      	cmp	r7, #9
   1ed26:	d817      	bhi.n	1ed58 <_strtoul_l.isra.0+0x8c>
   1ed28:	463c      	mov	r4, r7
   1ed2a:	42a3      	cmp	r3, r4
   1ed2c:	dd23      	ble.n	1ed76 <_strtoul_l.isra.0+0xaa>
   1ed2e:	2e00      	cmp	r6, #0
   1ed30:	db1e      	blt.n	1ed70 <_strtoul_l.isra.0+0xa4>
   1ed32:	4584      	cmp	ip, r0
   1ed34:	d31c      	bcc.n	1ed70 <_strtoul_l.isra.0+0xa4>
   1ed36:	d101      	bne.n	1ed3c <_strtoul_l.isra.0+0x70>
   1ed38:	45a1      	cmp	r9, r4
   1ed3a:	db19      	blt.n	1ed70 <_strtoul_l.isra.0+0xa4>
   1ed3c:	fb00 4003 	mla	r0, r0, r3, r4
   1ed40:	2601      	movs	r6, #1
   1ed42:	f815 4b01 	ldrb.w	r4, [r5], #1
   1ed46:	e7eb      	b.n	1ed20 <_strtoul_l.isra.0+0x54>
   1ed48:	4628      	mov	r0, r5
   1ed4a:	e7c4      	b.n	1ecd6 <_strtoul_l.isra.0+0xa>
   1ed4c:	2c2b      	cmp	r4, #43	; 0x2b
   1ed4e:	46b0      	mov	r8, r6
   1ed50:	bf04      	itt	eq
   1ed52:	782c      	ldrbeq	r4, [r5, #0]
   1ed54:	1c85      	addeq	r5, r0, #2
   1ed56:	e7cb      	b.n	1ecf0 <_strtoul_l.isra.0+0x24>
   1ed58:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
   1ed5c:	2f19      	cmp	r7, #25
   1ed5e:	d801      	bhi.n	1ed64 <_strtoul_l.isra.0+0x98>
   1ed60:	3c37      	subs	r4, #55	; 0x37
   1ed62:	e7e2      	b.n	1ed2a <_strtoul_l.isra.0+0x5e>
   1ed64:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
   1ed68:	2f19      	cmp	r7, #25
   1ed6a:	d804      	bhi.n	1ed76 <_strtoul_l.isra.0+0xaa>
   1ed6c:	3c57      	subs	r4, #87	; 0x57
   1ed6e:	e7dc      	b.n	1ed2a <_strtoul_l.isra.0+0x5e>
   1ed70:	f04f 36ff 	mov.w	r6, #4294967295
   1ed74:	e7e5      	b.n	1ed42 <_strtoul_l.isra.0+0x76>
   1ed76:	2e00      	cmp	r6, #0
   1ed78:	da07      	bge.n	1ed8a <_strtoul_l.isra.0+0xbe>
   1ed7a:	2322      	movs	r3, #34	; 0x22
   1ed7c:	f04f 30ff 	mov.w	r0, #4294967295
   1ed80:	f8ce 3000 	str.w	r3, [lr]
   1ed84:	b942      	cbnz	r2, 1ed98 <_strtoul_l.isra.0+0xcc>
   1ed86:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   1ed8a:	f1b8 0f00 	cmp.w	r8, #0
   1ed8e:	d000      	beq.n	1ed92 <_strtoul_l.isra.0+0xc6>
   1ed90:	4240      	negs	r0, r0
   1ed92:	2a00      	cmp	r2, #0
   1ed94:	d0f7      	beq.n	1ed86 <_strtoul_l.isra.0+0xba>
   1ed96:	b106      	cbz	r6, 1ed9a <_strtoul_l.isra.0+0xce>
   1ed98:	1e69      	subs	r1, r5, #1
   1ed9a:	6011      	str	r1, [r2, #0]
   1ed9c:	e7f3      	b.n	1ed86 <_strtoul_l.isra.0+0xba>
   1ed9e:	2430      	movs	r4, #48	; 0x30
   1eda0:	2b00      	cmp	r3, #0
   1eda2:	d1b3      	bne.n	1ed0c <_strtoul_l.isra.0+0x40>
   1eda4:	2308      	movs	r3, #8
   1eda6:	e7b1      	b.n	1ed0c <_strtoul_l.isra.0+0x40>
   1eda8:	2c30      	cmp	r4, #48	; 0x30
   1edaa:	d0a7      	beq.n	1ecfc <_strtoul_l.isra.0+0x30>
   1edac:	230a      	movs	r3, #10
   1edae:	e7ad      	b.n	1ed0c <_strtoul_l.isra.0+0x40>
   1edb0:	0002561e 	.word	0x0002561e

0001edb4 <strtoul>:
   1edb4:	4613      	mov	r3, r2
   1edb6:	460a      	mov	r2, r1
   1edb8:	4601      	mov	r1, r0
   1edba:	4802      	ldr	r0, [pc, #8]	; (1edc4 <strtoul+0x10>)
   1edbc:	6800      	ldr	r0, [r0, #0]
   1edbe:	f7ff bf85 	b.w	1eccc <_strtoul_l.isra.0>
   1edc2:	bf00      	nop
   1edc4:	200260b0 	.word	0x200260b0

0001edc8 <vsniprintf>:
   1edc8:	b507      	push	{r0, r1, r2, lr}
   1edca:	9300      	str	r3, [sp, #0]
   1edcc:	4613      	mov	r3, r2
   1edce:	460a      	mov	r2, r1
   1edd0:	4601      	mov	r1, r0
   1edd2:	4803      	ldr	r0, [pc, #12]	; (1ede0 <vsniprintf+0x18>)
   1edd4:	6800      	ldr	r0, [r0, #0]
   1edd6:	f002 ff46 	bl	21c66 <_vsniprintf_r>
   1edda:	b003      	add	sp, #12
   1eddc:	f85d fb04 	ldr.w	pc, [sp], #4
   1ede0:	200260b0 	.word	0x200260b0

0001ede4 <_vsiprintf_r>:
   1ede4:	b500      	push	{lr}
   1ede6:	b09b      	sub	sp, #108	; 0x6c
   1ede8:	9100      	str	r1, [sp, #0]
   1edea:	9104      	str	r1, [sp, #16]
   1edec:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   1edf0:	9105      	str	r1, [sp, #20]
   1edf2:	9102      	str	r1, [sp, #8]
   1edf4:	4905      	ldr	r1, [pc, #20]	; (1ee0c <_vsiprintf_r+0x28>)
   1edf6:	9103      	str	r1, [sp, #12]
   1edf8:	4669      	mov	r1, sp
   1edfa:	f000 fbb9 	bl	1f570 <_svfiprintf_r>
   1edfe:	9b00      	ldr	r3, [sp, #0]
   1ee00:	2200      	movs	r2, #0
   1ee02:	701a      	strb	r2, [r3, #0]
   1ee04:	b01b      	add	sp, #108	; 0x6c
   1ee06:	f85d fb04 	ldr.w	pc, [sp], #4
   1ee0a:	bf00      	nop
   1ee0c:	ffff0208 	.word	0xffff0208

0001ee10 <vsiprintf>:
   1ee10:	4613      	mov	r3, r2
   1ee12:	460a      	mov	r2, r1
   1ee14:	4601      	mov	r1, r0
   1ee16:	4802      	ldr	r0, [pc, #8]	; (1ee20 <vsiprintf+0x10>)
   1ee18:	6800      	ldr	r0, [r0, #0]
   1ee1a:	f7ff bfe3 	b.w	1ede4 <_vsiprintf_r>
   1ee1e:	bf00      	nop
   1ee20:	200260b0 	.word	0x200260b0

0001ee24 <__swbuf_r>:
   1ee24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1ee26:	460e      	mov	r6, r1
   1ee28:	4614      	mov	r4, r2
   1ee2a:	4605      	mov	r5, r0
   1ee2c:	b118      	cbz	r0, 1ee36 <__swbuf_r+0x12>
   1ee2e:	6983      	ldr	r3, [r0, #24]
   1ee30:	b90b      	cbnz	r3, 1ee36 <__swbuf_r+0x12>
   1ee32:	f000 f9dd 	bl	1f1f0 <__sinit>
   1ee36:	4b21      	ldr	r3, [pc, #132]	; (1eebc <__swbuf_r+0x98>)
   1ee38:	429c      	cmp	r4, r3
   1ee3a:	d12b      	bne.n	1ee94 <__swbuf_r+0x70>
   1ee3c:	686c      	ldr	r4, [r5, #4]
   1ee3e:	69a3      	ldr	r3, [r4, #24]
   1ee40:	60a3      	str	r3, [r4, #8]
   1ee42:	89a3      	ldrh	r3, [r4, #12]
   1ee44:	071a      	lsls	r2, r3, #28
   1ee46:	d52f      	bpl.n	1eea8 <__swbuf_r+0x84>
   1ee48:	6923      	ldr	r3, [r4, #16]
   1ee4a:	b36b      	cbz	r3, 1eea8 <__swbuf_r+0x84>
   1ee4c:	6923      	ldr	r3, [r4, #16]
   1ee4e:	b2f6      	uxtb	r6, r6
   1ee50:	6820      	ldr	r0, [r4, #0]
   1ee52:	4637      	mov	r7, r6
   1ee54:	1ac0      	subs	r0, r0, r3
   1ee56:	6963      	ldr	r3, [r4, #20]
   1ee58:	4283      	cmp	r3, r0
   1ee5a:	dc04      	bgt.n	1ee66 <__swbuf_r+0x42>
   1ee5c:	4621      	mov	r1, r4
   1ee5e:	4628      	mov	r0, r5
   1ee60:	f000 f948 	bl	1f0f4 <_fflush_r>
   1ee64:	bb30      	cbnz	r0, 1eeb4 <__swbuf_r+0x90>
   1ee66:	68a3      	ldr	r3, [r4, #8]
   1ee68:	3001      	adds	r0, #1
   1ee6a:	3b01      	subs	r3, #1
   1ee6c:	60a3      	str	r3, [r4, #8]
   1ee6e:	6823      	ldr	r3, [r4, #0]
   1ee70:	1c5a      	adds	r2, r3, #1
   1ee72:	6022      	str	r2, [r4, #0]
   1ee74:	701e      	strb	r6, [r3, #0]
   1ee76:	6963      	ldr	r3, [r4, #20]
   1ee78:	4283      	cmp	r3, r0
   1ee7a:	d004      	beq.n	1ee86 <__swbuf_r+0x62>
   1ee7c:	89a3      	ldrh	r3, [r4, #12]
   1ee7e:	07db      	lsls	r3, r3, #31
   1ee80:	d506      	bpl.n	1ee90 <__swbuf_r+0x6c>
   1ee82:	2e0a      	cmp	r6, #10
   1ee84:	d104      	bne.n	1ee90 <__swbuf_r+0x6c>
   1ee86:	4621      	mov	r1, r4
   1ee88:	4628      	mov	r0, r5
   1ee8a:	f000 f933 	bl	1f0f4 <_fflush_r>
   1ee8e:	b988      	cbnz	r0, 1eeb4 <__swbuf_r+0x90>
   1ee90:	4638      	mov	r0, r7
   1ee92:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1ee94:	4b0a      	ldr	r3, [pc, #40]	; (1eec0 <__swbuf_r+0x9c>)
   1ee96:	429c      	cmp	r4, r3
   1ee98:	d101      	bne.n	1ee9e <__swbuf_r+0x7a>
   1ee9a:	68ac      	ldr	r4, [r5, #8]
   1ee9c:	e7cf      	b.n	1ee3e <__swbuf_r+0x1a>
   1ee9e:	4b09      	ldr	r3, [pc, #36]	; (1eec4 <__swbuf_r+0xa0>)
   1eea0:	429c      	cmp	r4, r3
   1eea2:	bf08      	it	eq
   1eea4:	68ec      	ldreq	r4, [r5, #12]
   1eea6:	e7ca      	b.n	1ee3e <__swbuf_r+0x1a>
   1eea8:	4621      	mov	r1, r4
   1eeaa:	4628      	mov	r0, r5
   1eeac:	f000 f80c 	bl	1eec8 <__swsetup_r>
   1eeb0:	2800      	cmp	r0, #0
   1eeb2:	d0cb      	beq.n	1ee4c <__swbuf_r+0x28>
   1eeb4:	f04f 37ff 	mov.w	r7, #4294967295
   1eeb8:	e7ea      	b.n	1ee90 <__swbuf_r+0x6c>
   1eeba:	bf00      	nop
   1eebc:	00022fbc 	.word	0x00022fbc
   1eec0:	00022fdc 	.word	0x00022fdc
   1eec4:	00022f9c 	.word	0x00022f9c

0001eec8 <__swsetup_r>:
   1eec8:	4b32      	ldr	r3, [pc, #200]	; (1ef94 <__swsetup_r+0xcc>)
   1eeca:	b570      	push	{r4, r5, r6, lr}
   1eecc:	681d      	ldr	r5, [r3, #0]
   1eece:	4606      	mov	r6, r0
   1eed0:	460c      	mov	r4, r1
   1eed2:	b125      	cbz	r5, 1eede <__swsetup_r+0x16>
   1eed4:	69ab      	ldr	r3, [r5, #24]
   1eed6:	b913      	cbnz	r3, 1eede <__swsetup_r+0x16>
   1eed8:	4628      	mov	r0, r5
   1eeda:	f000 f989 	bl	1f1f0 <__sinit>
   1eede:	4b2e      	ldr	r3, [pc, #184]	; (1ef98 <__swsetup_r+0xd0>)
   1eee0:	429c      	cmp	r4, r3
   1eee2:	d10f      	bne.n	1ef04 <__swsetup_r+0x3c>
   1eee4:	686c      	ldr	r4, [r5, #4]
   1eee6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   1eeea:	b29a      	uxth	r2, r3
   1eeec:	0715      	lsls	r5, r2, #28
   1eeee:	d42c      	bmi.n	1ef4a <__swsetup_r+0x82>
   1eef0:	06d0      	lsls	r0, r2, #27
   1eef2:	d411      	bmi.n	1ef18 <__swsetup_r+0x50>
   1eef4:	2209      	movs	r2, #9
   1eef6:	6032      	str	r2, [r6, #0]
   1eef8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   1eefc:	f04f 30ff 	mov.w	r0, #4294967295
   1ef00:	81a3      	strh	r3, [r4, #12]
   1ef02:	e03e      	b.n	1ef82 <__swsetup_r+0xba>
   1ef04:	4b25      	ldr	r3, [pc, #148]	; (1ef9c <__swsetup_r+0xd4>)
   1ef06:	429c      	cmp	r4, r3
   1ef08:	d101      	bne.n	1ef0e <__swsetup_r+0x46>
   1ef0a:	68ac      	ldr	r4, [r5, #8]
   1ef0c:	e7eb      	b.n	1eee6 <__swsetup_r+0x1e>
   1ef0e:	4b24      	ldr	r3, [pc, #144]	; (1efa0 <__swsetup_r+0xd8>)
   1ef10:	429c      	cmp	r4, r3
   1ef12:	bf08      	it	eq
   1ef14:	68ec      	ldreq	r4, [r5, #12]
   1ef16:	e7e6      	b.n	1eee6 <__swsetup_r+0x1e>
   1ef18:	0751      	lsls	r1, r2, #29
   1ef1a:	d512      	bpl.n	1ef42 <__swsetup_r+0x7a>
   1ef1c:	6b61      	ldr	r1, [r4, #52]	; 0x34
   1ef1e:	b141      	cbz	r1, 1ef32 <__swsetup_r+0x6a>
   1ef20:	f104 0344 	add.w	r3, r4, #68	; 0x44
   1ef24:	4299      	cmp	r1, r3
   1ef26:	d002      	beq.n	1ef2e <__swsetup_r+0x66>
   1ef28:	4630      	mov	r0, r6
   1ef2a:	f000 fa79 	bl	1f420 <_free_r>
   1ef2e:	2300      	movs	r3, #0
   1ef30:	6363      	str	r3, [r4, #52]	; 0x34
   1ef32:	89a3      	ldrh	r3, [r4, #12]
   1ef34:	f023 0324 	bic.w	r3, r3, #36	; 0x24
   1ef38:	81a3      	strh	r3, [r4, #12]
   1ef3a:	2300      	movs	r3, #0
   1ef3c:	6063      	str	r3, [r4, #4]
   1ef3e:	6923      	ldr	r3, [r4, #16]
   1ef40:	6023      	str	r3, [r4, #0]
   1ef42:	89a3      	ldrh	r3, [r4, #12]
   1ef44:	f043 0308 	orr.w	r3, r3, #8
   1ef48:	81a3      	strh	r3, [r4, #12]
   1ef4a:	6923      	ldr	r3, [r4, #16]
   1ef4c:	b94b      	cbnz	r3, 1ef62 <__swsetup_r+0x9a>
   1ef4e:	89a3      	ldrh	r3, [r4, #12]
   1ef50:	f403 7320 	and.w	r3, r3, #640	; 0x280
   1ef54:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   1ef58:	d003      	beq.n	1ef62 <__swsetup_r+0x9a>
   1ef5a:	4621      	mov	r1, r4
   1ef5c:	4630      	mov	r0, r6
   1ef5e:	f000 f9c9 	bl	1f2f4 <__smakebuf_r>
   1ef62:	89a2      	ldrh	r2, [r4, #12]
   1ef64:	f012 0301 	ands.w	r3, r2, #1
   1ef68:	d00c      	beq.n	1ef84 <__swsetup_r+0xbc>
   1ef6a:	2300      	movs	r3, #0
   1ef6c:	60a3      	str	r3, [r4, #8]
   1ef6e:	6963      	ldr	r3, [r4, #20]
   1ef70:	425b      	negs	r3, r3
   1ef72:	61a3      	str	r3, [r4, #24]
   1ef74:	6923      	ldr	r3, [r4, #16]
   1ef76:	b953      	cbnz	r3, 1ef8e <__swsetup_r+0xc6>
   1ef78:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   1ef7c:	f013 0080 	ands.w	r0, r3, #128	; 0x80
   1ef80:	d1ba      	bne.n	1eef8 <__swsetup_r+0x30>
   1ef82:	bd70      	pop	{r4, r5, r6, pc}
   1ef84:	0792      	lsls	r2, r2, #30
   1ef86:	bf58      	it	pl
   1ef88:	6963      	ldrpl	r3, [r4, #20]
   1ef8a:	60a3      	str	r3, [r4, #8]
   1ef8c:	e7f2      	b.n	1ef74 <__swsetup_r+0xac>
   1ef8e:	2000      	movs	r0, #0
   1ef90:	e7f7      	b.n	1ef82 <__swsetup_r+0xba>
   1ef92:	bf00      	nop
   1ef94:	200260b0 	.word	0x200260b0
   1ef98:	00022fbc 	.word	0x00022fbc
   1ef9c:	00022fdc 	.word	0x00022fdc
   1efa0:	00022f9c 	.word	0x00022f9c

0001efa4 <__chk_fail>:
   1efa4:	b500      	push	{lr}
   1efa6:	b08d      	sub	sp, #52	; 0x34
   1efa8:	4b0f      	ldr	r3, [pc, #60]	; (1efe8 <__chk_fail+0x44>)
   1efaa:	466a      	mov	r2, sp
   1efac:	f103 0628 	add.w	r6, r3, #40	; 0x28
   1efb0:	4615      	mov	r5, r2
   1efb2:	6818      	ldr	r0, [r3, #0]
   1efb4:	3308      	adds	r3, #8
   1efb6:	f853 1c04 	ldr.w	r1, [r3, #-4]
   1efba:	4614      	mov	r4, r2
   1efbc:	42b3      	cmp	r3, r6
   1efbe:	c403      	stmia	r4!, {r0, r1}
   1efc0:	4622      	mov	r2, r4
   1efc2:	d1f6      	bne.n	1efb2 <__chk_fail+0xe>
   1efc4:	6818      	ldr	r0, [r3, #0]
   1efc6:	889b      	ldrh	r3, [r3, #4]
   1efc8:	6020      	str	r0, [r4, #0]
   1efca:	4628      	mov	r0, r5
   1efcc:	80a3      	strh	r3, [r4, #4]
   1efce:	f7ed ff53 	bl	ce78 <strlen>
   1efd2:	4629      	mov	r1, r5
   1efd4:	4602      	mov	r2, r0
   1efd6:	2002      	movs	r0, #2
   1efd8:	f001 f80d 	bl	1fff6 <_write>
   1efdc:	2006      	movs	r0, #6
   1efde:	f000 fbcf 	bl	1f780 <raise>
   1efe2:	207f      	movs	r0, #127	; 0x7f
   1efe4:	f7f0 ff68 	bl	feb8 <_exit>
   1efe8:	0002575d 	.word	0x0002575d

0001efec <__sflush_r>:
   1efec:	898a      	ldrh	r2, [r1, #12]
   1efee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1eff2:	4605      	mov	r5, r0
   1eff4:	0710      	lsls	r0, r2, #28
   1eff6:	460c      	mov	r4, r1
   1eff8:	d458      	bmi.n	1f0ac <__sflush_r+0xc0>
   1effa:	684b      	ldr	r3, [r1, #4]
   1effc:	2b00      	cmp	r3, #0
   1effe:	dc05      	bgt.n	1f00c <__sflush_r+0x20>
   1f000:	6c0b      	ldr	r3, [r1, #64]	; 0x40
   1f002:	2b00      	cmp	r3, #0
   1f004:	dc02      	bgt.n	1f00c <__sflush_r+0x20>
   1f006:	2000      	movs	r0, #0
   1f008:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1f00c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
   1f00e:	2e00      	cmp	r6, #0
   1f010:	d0f9      	beq.n	1f006 <__sflush_r+0x1a>
   1f012:	2300      	movs	r3, #0
   1f014:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
   1f018:	682f      	ldr	r7, [r5, #0]
   1f01a:	602b      	str	r3, [r5, #0]
   1f01c:	d032      	beq.n	1f084 <__sflush_r+0x98>
   1f01e:	6d60      	ldr	r0, [r4, #84]	; 0x54
   1f020:	89a3      	ldrh	r3, [r4, #12]
   1f022:	075a      	lsls	r2, r3, #29
   1f024:	d505      	bpl.n	1f032 <__sflush_r+0x46>
   1f026:	6863      	ldr	r3, [r4, #4]
   1f028:	1ac0      	subs	r0, r0, r3
   1f02a:	6b63      	ldr	r3, [r4, #52]	; 0x34
   1f02c:	b10b      	cbz	r3, 1f032 <__sflush_r+0x46>
   1f02e:	6c23      	ldr	r3, [r4, #64]	; 0x40
   1f030:	1ac0      	subs	r0, r0, r3
   1f032:	2300      	movs	r3, #0
   1f034:	4602      	mov	r2, r0
   1f036:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
   1f038:	4628      	mov	r0, r5
   1f03a:	6a21      	ldr	r1, [r4, #32]
   1f03c:	47b0      	blx	r6
   1f03e:	1c43      	adds	r3, r0, #1
   1f040:	89a3      	ldrh	r3, [r4, #12]
   1f042:	d106      	bne.n	1f052 <__sflush_r+0x66>
   1f044:	6829      	ldr	r1, [r5, #0]
   1f046:	291d      	cmp	r1, #29
   1f048:	d82c      	bhi.n	1f0a4 <__sflush_r+0xb8>
   1f04a:	4a29      	ldr	r2, [pc, #164]	; (1f0f0 <__sflush_r+0x104>)
   1f04c:	40ca      	lsrs	r2, r1
   1f04e:	07d6      	lsls	r6, r2, #31
   1f050:	d528      	bpl.n	1f0a4 <__sflush_r+0xb8>
   1f052:	2200      	movs	r2, #0
   1f054:	04d9      	lsls	r1, r3, #19
   1f056:	6062      	str	r2, [r4, #4]
   1f058:	6922      	ldr	r2, [r4, #16]
   1f05a:	6022      	str	r2, [r4, #0]
   1f05c:	d504      	bpl.n	1f068 <__sflush_r+0x7c>
   1f05e:	1c42      	adds	r2, r0, #1
   1f060:	d101      	bne.n	1f066 <__sflush_r+0x7a>
   1f062:	682b      	ldr	r3, [r5, #0]
   1f064:	b903      	cbnz	r3, 1f068 <__sflush_r+0x7c>
   1f066:	6560      	str	r0, [r4, #84]	; 0x54
   1f068:	6b61      	ldr	r1, [r4, #52]	; 0x34
   1f06a:	602f      	str	r7, [r5, #0]
   1f06c:	2900      	cmp	r1, #0
   1f06e:	d0ca      	beq.n	1f006 <__sflush_r+0x1a>
   1f070:	f104 0344 	add.w	r3, r4, #68	; 0x44
   1f074:	4299      	cmp	r1, r3
   1f076:	d002      	beq.n	1f07e <__sflush_r+0x92>
   1f078:	4628      	mov	r0, r5
   1f07a:	f000 f9d1 	bl	1f420 <_free_r>
   1f07e:	2000      	movs	r0, #0
   1f080:	6360      	str	r0, [r4, #52]	; 0x34
   1f082:	e7c1      	b.n	1f008 <__sflush_r+0x1c>
   1f084:	6a21      	ldr	r1, [r4, #32]
   1f086:	2301      	movs	r3, #1
   1f088:	4628      	mov	r0, r5
   1f08a:	47b0      	blx	r6
   1f08c:	1c41      	adds	r1, r0, #1
   1f08e:	d1c7      	bne.n	1f020 <__sflush_r+0x34>
   1f090:	682b      	ldr	r3, [r5, #0]
   1f092:	2b00      	cmp	r3, #0
   1f094:	d0c4      	beq.n	1f020 <__sflush_r+0x34>
   1f096:	2b1d      	cmp	r3, #29
   1f098:	d001      	beq.n	1f09e <__sflush_r+0xb2>
   1f09a:	2b16      	cmp	r3, #22
   1f09c:	d101      	bne.n	1f0a2 <__sflush_r+0xb6>
   1f09e:	602f      	str	r7, [r5, #0]
   1f0a0:	e7b1      	b.n	1f006 <__sflush_r+0x1a>
   1f0a2:	89a3      	ldrh	r3, [r4, #12]
   1f0a4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   1f0a8:	81a3      	strh	r3, [r4, #12]
   1f0aa:	e7ad      	b.n	1f008 <__sflush_r+0x1c>
   1f0ac:	690f      	ldr	r7, [r1, #16]
   1f0ae:	2f00      	cmp	r7, #0
   1f0b0:	d0a9      	beq.n	1f006 <__sflush_r+0x1a>
   1f0b2:	0793      	lsls	r3, r2, #30
   1f0b4:	680e      	ldr	r6, [r1, #0]
   1f0b6:	600f      	str	r7, [r1, #0]
   1f0b8:	bf0c      	ite	eq
   1f0ba:	694b      	ldreq	r3, [r1, #20]
   1f0bc:	2300      	movne	r3, #0
   1f0be:	eba6 0807 	sub.w	r8, r6, r7
   1f0c2:	608b      	str	r3, [r1, #8]
   1f0c4:	f1b8 0f00 	cmp.w	r8, #0
   1f0c8:	dd9d      	ble.n	1f006 <__sflush_r+0x1a>
   1f0ca:	4643      	mov	r3, r8
   1f0cc:	463a      	mov	r2, r7
   1f0ce:	6a21      	ldr	r1, [r4, #32]
   1f0d0:	4628      	mov	r0, r5
   1f0d2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
   1f0d4:	47b0      	blx	r6
   1f0d6:	2800      	cmp	r0, #0
   1f0d8:	dc06      	bgt.n	1f0e8 <__sflush_r+0xfc>
   1f0da:	89a3      	ldrh	r3, [r4, #12]
   1f0dc:	f04f 30ff 	mov.w	r0, #4294967295
   1f0e0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   1f0e4:	81a3      	strh	r3, [r4, #12]
   1f0e6:	e78f      	b.n	1f008 <__sflush_r+0x1c>
   1f0e8:	4407      	add	r7, r0
   1f0ea:	eba8 0800 	sub.w	r8, r8, r0
   1f0ee:	e7e9      	b.n	1f0c4 <__sflush_r+0xd8>
   1f0f0:	20400001 	.word	0x20400001

0001f0f4 <_fflush_r>:
   1f0f4:	b538      	push	{r3, r4, r5, lr}
   1f0f6:	690b      	ldr	r3, [r1, #16]
   1f0f8:	4605      	mov	r5, r0
   1f0fa:	460c      	mov	r4, r1
   1f0fc:	b913      	cbnz	r3, 1f104 <_fflush_r+0x10>
   1f0fe:	2500      	movs	r5, #0
   1f100:	4628      	mov	r0, r5
   1f102:	bd38      	pop	{r3, r4, r5, pc}
   1f104:	b118      	cbz	r0, 1f10e <_fflush_r+0x1a>
   1f106:	6983      	ldr	r3, [r0, #24]
   1f108:	b90b      	cbnz	r3, 1f10e <_fflush_r+0x1a>
   1f10a:	f000 f871 	bl	1f1f0 <__sinit>
   1f10e:	4b14      	ldr	r3, [pc, #80]	; (1f160 <_fflush_r+0x6c>)
   1f110:	429c      	cmp	r4, r3
   1f112:	d11b      	bne.n	1f14c <_fflush_r+0x58>
   1f114:	686c      	ldr	r4, [r5, #4]
   1f116:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   1f11a:	2b00      	cmp	r3, #0
   1f11c:	d0ef      	beq.n	1f0fe <_fflush_r+0xa>
   1f11e:	6e62      	ldr	r2, [r4, #100]	; 0x64
   1f120:	07d0      	lsls	r0, r2, #31
   1f122:	d404      	bmi.n	1f12e <_fflush_r+0x3a>
   1f124:	0599      	lsls	r1, r3, #22
   1f126:	d402      	bmi.n	1f12e <_fflush_r+0x3a>
   1f128:	6da0      	ldr	r0, [r4, #88]	; 0x58
   1f12a:	f002 fe92 	bl	21e52 <__retarget_lock_acquire_recursive>
   1f12e:	4628      	mov	r0, r5
   1f130:	4621      	mov	r1, r4
   1f132:	f7ff ff5b 	bl	1efec <__sflush_r>
   1f136:	6e63      	ldr	r3, [r4, #100]	; 0x64
   1f138:	4605      	mov	r5, r0
   1f13a:	07da      	lsls	r2, r3, #31
   1f13c:	d4e0      	bmi.n	1f100 <_fflush_r+0xc>
   1f13e:	89a3      	ldrh	r3, [r4, #12]
   1f140:	059b      	lsls	r3, r3, #22
   1f142:	d4dd      	bmi.n	1f100 <_fflush_r+0xc>
   1f144:	6da0      	ldr	r0, [r4, #88]	; 0x58
   1f146:	f002 fe85 	bl	21e54 <__retarget_lock_release_recursive>
   1f14a:	e7d9      	b.n	1f100 <_fflush_r+0xc>
   1f14c:	4b05      	ldr	r3, [pc, #20]	; (1f164 <_fflush_r+0x70>)
   1f14e:	429c      	cmp	r4, r3
   1f150:	d101      	bne.n	1f156 <_fflush_r+0x62>
   1f152:	68ac      	ldr	r4, [r5, #8]
   1f154:	e7df      	b.n	1f116 <_fflush_r+0x22>
   1f156:	4b04      	ldr	r3, [pc, #16]	; (1f168 <_fflush_r+0x74>)
   1f158:	429c      	cmp	r4, r3
   1f15a:	bf08      	it	eq
   1f15c:	68ec      	ldreq	r4, [r5, #12]
   1f15e:	e7da      	b.n	1f116 <_fflush_r+0x22>
   1f160:	00022fbc 	.word	0x00022fbc
   1f164:	00022fdc 	.word	0x00022fdc
   1f168:	00022f9c 	.word	0x00022f9c

0001f16c <std>:
   1f16c:	2300      	movs	r3, #0
   1f16e:	b510      	push	{r4, lr}
   1f170:	4604      	mov	r4, r0
   1f172:	6083      	str	r3, [r0, #8]
   1f174:	8181      	strh	r1, [r0, #12]
   1f176:	4619      	mov	r1, r3
   1f178:	6643      	str	r3, [r0, #100]	; 0x64
   1f17a:	81c2      	strh	r2, [r0, #14]
   1f17c:	2208      	movs	r2, #8
   1f17e:	6183      	str	r3, [r0, #24]
   1f180:	e9c0 3300 	strd	r3, r3, [r0]
   1f184:	e9c0 3304 	strd	r3, r3, [r0, #16]
   1f188:	305c      	adds	r0, #92	; 0x5c
   1f18a:	f002 fbe3 	bl	21954 <memset>
   1f18e:	4b05      	ldr	r3, [pc, #20]	; (1f1a4 <std+0x38>)
   1f190:	6224      	str	r4, [r4, #32]
   1f192:	6263      	str	r3, [r4, #36]	; 0x24
   1f194:	4b04      	ldr	r3, [pc, #16]	; (1f1a8 <std+0x3c>)
   1f196:	62a3      	str	r3, [r4, #40]	; 0x28
   1f198:	4b04      	ldr	r3, [pc, #16]	; (1f1ac <std+0x40>)
   1f19a:	62e3      	str	r3, [r4, #44]	; 0x2c
   1f19c:	4b04      	ldr	r3, [pc, #16]	; (1f1b0 <std+0x44>)
   1f19e:	6323      	str	r3, [r4, #48]	; 0x30
   1f1a0:	bd10      	pop	{r4, pc}
   1f1a2:	bf00      	nop
   1f1a4:	0002255b 	.word	0x0002255b
   1f1a8:	0002257d 	.word	0x0002257d
   1f1ac:	000225b5 	.word	0x000225b5
   1f1b0:	000225d9 	.word	0x000225d9

0001f1b4 <_cleanup_r>:
   1f1b4:	4901      	ldr	r1, [pc, #4]	; (1f1bc <_cleanup_r+0x8>)
   1f1b6:	f002 be2d 	b.w	21e14 <_fwalk_reent>
   1f1ba:	bf00      	nop
   1f1bc:	0001f0f5 	.word	0x0001f0f5

0001f1c0 <__sfp_lock_acquire>:
   1f1c0:	4801      	ldr	r0, [pc, #4]	; (1f1c8 <__sfp_lock_acquire+0x8>)
   1f1c2:	f002 be46 	b.w	21e52 <__retarget_lock_acquire_recursive>
   1f1c6:	bf00      	nop
   1f1c8:	200227e0 	.word	0x200227e0

0001f1cc <__sfp_lock_release>:
   1f1cc:	4801      	ldr	r0, [pc, #4]	; (1f1d4 <__sfp_lock_release+0x8>)
   1f1ce:	f002 be41 	b.w	21e54 <__retarget_lock_release_recursive>
   1f1d2:	bf00      	nop
   1f1d4:	200227e0 	.word	0x200227e0

0001f1d8 <__sinit_lock_acquire>:
   1f1d8:	4801      	ldr	r0, [pc, #4]	; (1f1e0 <__sinit_lock_acquire+0x8>)
   1f1da:	f002 be3a 	b.w	21e52 <__retarget_lock_acquire_recursive>
   1f1de:	bf00      	nop
   1f1e0:	200227db 	.word	0x200227db

0001f1e4 <__sinit_lock_release>:
   1f1e4:	4801      	ldr	r0, [pc, #4]	; (1f1ec <__sinit_lock_release+0x8>)
   1f1e6:	f002 be35 	b.w	21e54 <__retarget_lock_release_recursive>
   1f1ea:	bf00      	nop
   1f1ec:	200227db 	.word	0x200227db

0001f1f0 <__sinit>:
   1f1f0:	b510      	push	{r4, lr}
   1f1f2:	4604      	mov	r4, r0
   1f1f4:	f7ff fff0 	bl	1f1d8 <__sinit_lock_acquire>
   1f1f8:	69a3      	ldr	r3, [r4, #24]
   1f1fa:	b11b      	cbz	r3, 1f204 <__sinit+0x14>
   1f1fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1f200:	f7ff bff0 	b.w	1f1e4 <__sinit_lock_release>
   1f204:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
   1f208:	6523      	str	r3, [r4, #80]	; 0x50
   1f20a:	4620      	mov	r0, r4
   1f20c:	4b12      	ldr	r3, [pc, #72]	; (1f258 <__sinit+0x68>)
   1f20e:	4a13      	ldr	r2, [pc, #76]	; (1f25c <__sinit+0x6c>)
   1f210:	681b      	ldr	r3, [r3, #0]
   1f212:	62a2      	str	r2, [r4, #40]	; 0x28
   1f214:	42a3      	cmp	r3, r4
   1f216:	bf04      	itt	eq
   1f218:	2301      	moveq	r3, #1
   1f21a:	61a3      	streq	r3, [r4, #24]
   1f21c:	f000 f820 	bl	1f260 <__sfp>
   1f220:	6060      	str	r0, [r4, #4]
   1f222:	4620      	mov	r0, r4
   1f224:	f000 f81c 	bl	1f260 <__sfp>
   1f228:	60a0      	str	r0, [r4, #8]
   1f22a:	4620      	mov	r0, r4
   1f22c:	f000 f818 	bl	1f260 <__sfp>
   1f230:	2200      	movs	r2, #0
   1f232:	60e0      	str	r0, [r4, #12]
   1f234:	2104      	movs	r1, #4
   1f236:	6860      	ldr	r0, [r4, #4]
   1f238:	f7ff ff98 	bl	1f16c <std>
   1f23c:	2201      	movs	r2, #1
   1f23e:	2109      	movs	r1, #9
   1f240:	68a0      	ldr	r0, [r4, #8]
   1f242:	f7ff ff93 	bl	1f16c <std>
   1f246:	2202      	movs	r2, #2
   1f248:	2112      	movs	r1, #18
   1f24a:	68e0      	ldr	r0, [r4, #12]
   1f24c:	f7ff ff8e 	bl	1f16c <std>
   1f250:	2301      	movs	r3, #1
   1f252:	61a3      	str	r3, [r4, #24]
   1f254:	e7d2      	b.n	1f1fc <__sinit+0xc>
   1f256:	bf00      	nop
   1f258:	00022f98 	.word	0x00022f98
   1f25c:	0001f1b5 	.word	0x0001f1b5

0001f260 <__sfp>:
   1f260:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1f262:	4607      	mov	r7, r0
   1f264:	f7ff ffac 	bl	1f1c0 <__sfp_lock_acquire>
   1f268:	4b1e      	ldr	r3, [pc, #120]	; (1f2e4 <__sfp+0x84>)
   1f26a:	681e      	ldr	r6, [r3, #0]
   1f26c:	69b3      	ldr	r3, [r6, #24]
   1f26e:	b913      	cbnz	r3, 1f276 <__sfp+0x16>
   1f270:	4630      	mov	r0, r6
   1f272:	f7ff ffbd 	bl	1f1f0 <__sinit>
   1f276:	3648      	adds	r6, #72	; 0x48
   1f278:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
   1f27c:	3b01      	subs	r3, #1
   1f27e:	d503      	bpl.n	1f288 <__sfp+0x28>
   1f280:	6833      	ldr	r3, [r6, #0]
   1f282:	b30b      	cbz	r3, 1f2c8 <__sfp+0x68>
   1f284:	6836      	ldr	r6, [r6, #0]
   1f286:	e7f7      	b.n	1f278 <__sfp+0x18>
   1f288:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
   1f28c:	b9d5      	cbnz	r5, 1f2c4 <__sfp+0x64>
   1f28e:	4b16      	ldr	r3, [pc, #88]	; (1f2e8 <__sfp+0x88>)
   1f290:	f104 0058 	add.w	r0, r4, #88	; 0x58
   1f294:	6665      	str	r5, [r4, #100]	; 0x64
   1f296:	60e3      	str	r3, [r4, #12]
   1f298:	f002 fdda 	bl	21e50 <__retarget_lock_init_recursive>
   1f29c:	f7ff ff96 	bl	1f1cc <__sfp_lock_release>
   1f2a0:	6025      	str	r5, [r4, #0]
   1f2a2:	61a5      	str	r5, [r4, #24]
   1f2a4:	2208      	movs	r2, #8
   1f2a6:	4629      	mov	r1, r5
   1f2a8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
   1f2ac:	e9c4 5501 	strd	r5, r5, [r4, #4]
   1f2b0:	e9c4 5504 	strd	r5, r5, [r4, #16]
   1f2b4:	f002 fb4e 	bl	21954 <memset>
   1f2b8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
   1f2bc:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
   1f2c0:	4620      	mov	r0, r4
   1f2c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1f2c4:	3468      	adds	r4, #104	; 0x68
   1f2c6:	e7d9      	b.n	1f27c <__sfp+0x1c>
   1f2c8:	2104      	movs	r1, #4
   1f2ca:	4638      	mov	r0, r7
   1f2cc:	f002 fd8c 	bl	21de8 <__sfmoreglue>
   1f2d0:	4604      	mov	r4, r0
   1f2d2:	6030      	str	r0, [r6, #0]
   1f2d4:	2800      	cmp	r0, #0
   1f2d6:	d1d5      	bne.n	1f284 <__sfp+0x24>
   1f2d8:	f7ff ff78 	bl	1f1cc <__sfp_lock_release>
   1f2dc:	230c      	movs	r3, #12
   1f2de:	603b      	str	r3, [r7, #0]
   1f2e0:	e7ee      	b.n	1f2c0 <__sfp+0x60>
   1f2e2:	bf00      	nop
   1f2e4:	00022f98 	.word	0x00022f98
   1f2e8:	ffff0001 	.word	0xffff0001

0001f2ec <_localeconv_r>:
   1f2ec:	4800      	ldr	r0, [pc, #0]	; (1f2f0 <_localeconv_r+0x4>)
   1f2ee:	4770      	bx	lr
   1f2f0:	20026204 	.word	0x20026204

0001f2f4 <__smakebuf_r>:
   1f2f4:	898b      	ldrh	r3, [r1, #12]
   1f2f6:	b573      	push	{r0, r1, r4, r5, r6, lr}
   1f2f8:	079d      	lsls	r5, r3, #30
   1f2fa:	4606      	mov	r6, r0
   1f2fc:	460c      	mov	r4, r1
   1f2fe:	d507      	bpl.n	1f310 <__smakebuf_r+0x1c>
   1f300:	f104 0347 	add.w	r3, r4, #71	; 0x47
   1f304:	6023      	str	r3, [r4, #0]
   1f306:	6123      	str	r3, [r4, #16]
   1f308:	2301      	movs	r3, #1
   1f30a:	6163      	str	r3, [r4, #20]
   1f30c:	b002      	add	sp, #8
   1f30e:	bd70      	pop	{r4, r5, r6, pc}
   1f310:	ab01      	add	r3, sp, #4
   1f312:	466a      	mov	r2, sp
   1f314:	f002 fd9f 	bl	21e56 <__swhatbuf_r>
   1f318:	9900      	ldr	r1, [sp, #0]
   1f31a:	4605      	mov	r5, r0
   1f31c:	4630      	mov	r0, r6
   1f31e:	f000 f8cd 	bl	1f4bc <_malloc_r>
   1f322:	b948      	cbnz	r0, 1f338 <__smakebuf_r+0x44>
   1f324:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   1f328:	059a      	lsls	r2, r3, #22
   1f32a:	d4ef      	bmi.n	1f30c <__smakebuf_r+0x18>
   1f32c:	f023 0303 	bic.w	r3, r3, #3
   1f330:	f043 0302 	orr.w	r3, r3, #2
   1f334:	81a3      	strh	r3, [r4, #12]
   1f336:	e7e3      	b.n	1f300 <__smakebuf_r+0xc>
   1f338:	4b0d      	ldr	r3, [pc, #52]	; (1f370 <__smakebuf_r+0x7c>)
   1f33a:	62b3      	str	r3, [r6, #40]	; 0x28
   1f33c:	89a3      	ldrh	r3, [r4, #12]
   1f33e:	6020      	str	r0, [r4, #0]
   1f340:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   1f344:	6120      	str	r0, [r4, #16]
   1f346:	81a3      	strh	r3, [r4, #12]
   1f348:	9b00      	ldr	r3, [sp, #0]
   1f34a:	6163      	str	r3, [r4, #20]
   1f34c:	9b01      	ldr	r3, [sp, #4]
   1f34e:	b15b      	cbz	r3, 1f368 <__smakebuf_r+0x74>
   1f350:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   1f354:	4630      	mov	r0, r6
   1f356:	f000 fa61 	bl	1f81c <_isatty_r>
   1f35a:	b128      	cbz	r0, 1f368 <__smakebuf_r+0x74>
   1f35c:	89a3      	ldrh	r3, [r4, #12]
   1f35e:	f023 0303 	bic.w	r3, r3, #3
   1f362:	f043 0301 	orr.w	r3, r3, #1
   1f366:	81a3      	strh	r3, [r4, #12]
   1f368:	89a3      	ldrh	r3, [r4, #12]
   1f36a:	431d      	orrs	r5, r3
   1f36c:	81a5      	strh	r5, [r4, #12]
   1f36e:	e7cd      	b.n	1f30c <__smakebuf_r+0x18>
   1f370:	0001f1b5 	.word	0x0001f1b5

0001f374 <malloc>:
   1f374:	4b02      	ldr	r3, [pc, #8]	; (1f380 <malloc+0xc>)
   1f376:	4601      	mov	r1, r0
   1f378:	6818      	ldr	r0, [r3, #0]
   1f37a:	f000 b89f 	b.w	1f4bc <_malloc_r>
   1f37e:	bf00      	nop
   1f380:	200260b0 	.word	0x200260b0

0001f384 <__pow5mult>:
   1f384:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1f388:	4615      	mov	r5, r2
   1f38a:	f012 0203 	ands.w	r2, r2, #3
   1f38e:	4606      	mov	r6, r0
   1f390:	460f      	mov	r7, r1
   1f392:	d007      	beq.n	1f3a4 <__pow5mult+0x20>
   1f394:	3a01      	subs	r2, #1
   1f396:	4c21      	ldr	r4, [pc, #132]	; (1f41c <__pow5mult+0x98>)
   1f398:	2300      	movs	r3, #0
   1f39a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
   1f39e:	f002 fde3 	bl	21f68 <__multadd>
   1f3a2:	4607      	mov	r7, r0
   1f3a4:	10ad      	asrs	r5, r5, #2
   1f3a6:	d035      	beq.n	1f414 <__pow5mult+0x90>
   1f3a8:	6a74      	ldr	r4, [r6, #36]	; 0x24
   1f3aa:	b93c      	cbnz	r4, 1f3bc <__pow5mult+0x38>
   1f3ac:	2010      	movs	r0, #16
   1f3ae:	f7ff ffe1 	bl	1f374 <malloc>
   1f3b2:	6270      	str	r0, [r6, #36]	; 0x24
   1f3b4:	6004      	str	r4, [r0, #0]
   1f3b6:	60c4      	str	r4, [r0, #12]
   1f3b8:	e9c0 4401 	strd	r4, r4, [r0, #4]
   1f3bc:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
   1f3c0:	f8d8 4008 	ldr.w	r4, [r8, #8]
   1f3c4:	b94c      	cbnz	r4, 1f3da <__pow5mult+0x56>
   1f3c6:	f240 2171 	movw	r1, #625	; 0x271
   1f3ca:	4630      	mov	r0, r6
   1f3cc:	f002 fe59 	bl	22082 <__i2b>
   1f3d0:	2300      	movs	r3, #0
   1f3d2:	4604      	mov	r4, r0
   1f3d4:	f8c8 0008 	str.w	r0, [r8, #8]
   1f3d8:	6003      	str	r3, [r0, #0]
   1f3da:	f04f 0800 	mov.w	r8, #0
   1f3de:	07eb      	lsls	r3, r5, #31
   1f3e0:	d50a      	bpl.n	1f3f8 <__pow5mult+0x74>
   1f3e2:	4639      	mov	r1, r7
   1f3e4:	4622      	mov	r2, r4
   1f3e6:	4630      	mov	r0, r6
   1f3e8:	f002 fe54 	bl	22094 <__multiply>
   1f3ec:	4681      	mov	r9, r0
   1f3ee:	4639      	mov	r1, r7
   1f3f0:	4630      	mov	r0, r6
   1f3f2:	464f      	mov	r7, r9
   1f3f4:	f002 fda1 	bl	21f3a <_Bfree>
   1f3f8:	106d      	asrs	r5, r5, #1
   1f3fa:	d00b      	beq.n	1f414 <__pow5mult+0x90>
   1f3fc:	6820      	ldr	r0, [r4, #0]
   1f3fe:	b938      	cbnz	r0, 1f410 <__pow5mult+0x8c>
   1f400:	4622      	mov	r2, r4
   1f402:	4621      	mov	r1, r4
   1f404:	4630      	mov	r0, r6
   1f406:	f002 fe45 	bl	22094 <__multiply>
   1f40a:	6020      	str	r0, [r4, #0]
   1f40c:	f8c0 8000 	str.w	r8, [r0]
   1f410:	4604      	mov	r4, r0
   1f412:	e7e4      	b.n	1f3de <__pow5mult+0x5a>
   1f414:	4638      	mov	r0, r7
   1f416:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   1f41a:	bf00      	nop
   1f41c:	00022ffc 	.word	0x00022ffc

0001f420 <_free_r>:
   1f420:	b538      	push	{r3, r4, r5, lr}
   1f422:	4605      	mov	r5, r0
   1f424:	2900      	cmp	r1, #0
   1f426:	d045      	beq.n	1f4b4 <_free_r+0x94>
   1f428:	f851 3c04 	ldr.w	r3, [r1, #-4]
   1f42c:	1f0c      	subs	r4, r1, #4
   1f42e:	2b00      	cmp	r3, #0
   1f430:	bfb8      	it	lt
   1f432:	18e4      	addlt	r4, r4, r3
   1f434:	f000 fa14 	bl	1f860 <__malloc_lock>
   1f438:	4a1f      	ldr	r2, [pc, #124]	; (1f4b8 <_free_r+0x98>)
   1f43a:	6813      	ldr	r3, [r2, #0]
   1f43c:	4610      	mov	r0, r2
   1f43e:	b933      	cbnz	r3, 1f44e <_free_r+0x2e>
   1f440:	6063      	str	r3, [r4, #4]
   1f442:	6014      	str	r4, [r2, #0]
   1f444:	4628      	mov	r0, r5
   1f446:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   1f44a:	f000 ba0f 	b.w	1f86c <__malloc_unlock>
   1f44e:	42a3      	cmp	r3, r4
   1f450:	d90c      	bls.n	1f46c <_free_r+0x4c>
   1f452:	6821      	ldr	r1, [r4, #0]
   1f454:	1862      	adds	r2, r4, r1
   1f456:	4293      	cmp	r3, r2
   1f458:	bf02      	ittt	eq
   1f45a:	681a      	ldreq	r2, [r3, #0]
   1f45c:	685b      	ldreq	r3, [r3, #4]
   1f45e:	1852      	addeq	r2, r2, r1
   1f460:	6063      	str	r3, [r4, #4]
   1f462:	bf08      	it	eq
   1f464:	6022      	streq	r2, [r4, #0]
   1f466:	6004      	str	r4, [r0, #0]
   1f468:	e7ec      	b.n	1f444 <_free_r+0x24>
   1f46a:	4613      	mov	r3, r2
   1f46c:	685a      	ldr	r2, [r3, #4]
   1f46e:	b10a      	cbz	r2, 1f474 <_free_r+0x54>
   1f470:	42a2      	cmp	r2, r4
   1f472:	d9fa      	bls.n	1f46a <_free_r+0x4a>
   1f474:	6819      	ldr	r1, [r3, #0]
   1f476:	1858      	adds	r0, r3, r1
   1f478:	42a0      	cmp	r0, r4
   1f47a:	d10b      	bne.n	1f494 <_free_r+0x74>
   1f47c:	6820      	ldr	r0, [r4, #0]
   1f47e:	4401      	add	r1, r0
   1f480:	1858      	adds	r0, r3, r1
   1f482:	6019      	str	r1, [r3, #0]
   1f484:	4282      	cmp	r2, r0
   1f486:	d1dd      	bne.n	1f444 <_free_r+0x24>
   1f488:	6810      	ldr	r0, [r2, #0]
   1f48a:	6852      	ldr	r2, [r2, #4]
   1f48c:	4401      	add	r1, r0
   1f48e:	605a      	str	r2, [r3, #4]
   1f490:	6019      	str	r1, [r3, #0]
   1f492:	e7d7      	b.n	1f444 <_free_r+0x24>
   1f494:	d902      	bls.n	1f49c <_free_r+0x7c>
   1f496:	230c      	movs	r3, #12
   1f498:	602b      	str	r3, [r5, #0]
   1f49a:	e7d3      	b.n	1f444 <_free_r+0x24>
   1f49c:	6820      	ldr	r0, [r4, #0]
   1f49e:	1821      	adds	r1, r4, r0
   1f4a0:	428a      	cmp	r2, r1
   1f4a2:	bf02      	ittt	eq
   1f4a4:	6811      	ldreq	r1, [r2, #0]
   1f4a6:	6852      	ldreq	r2, [r2, #4]
   1f4a8:	1809      	addeq	r1, r1, r0
   1f4aa:	6062      	str	r2, [r4, #4]
   1f4ac:	bf08      	it	eq
   1f4ae:	6021      	streq	r1, [r4, #0]
   1f4b0:	605c      	str	r4, [r3, #4]
   1f4b2:	e7c7      	b.n	1f444 <_free_r+0x24>
   1f4b4:	bd38      	pop	{r3, r4, r5, pc}
   1f4b6:	bf00      	nop
   1f4b8:	200214b4 	.word	0x200214b4

0001f4bc <_malloc_r>:
   1f4bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1f4be:	1ccd      	adds	r5, r1, #3
   1f4c0:	4606      	mov	r6, r0
   1f4c2:	f025 0503 	bic.w	r5, r5, #3
   1f4c6:	3508      	adds	r5, #8
   1f4c8:	2d0c      	cmp	r5, #12
   1f4ca:	bf38      	it	cc
   1f4cc:	250c      	movcc	r5, #12
   1f4ce:	2d00      	cmp	r5, #0
   1f4d0:	db01      	blt.n	1f4d6 <_malloc_r+0x1a>
   1f4d2:	42a9      	cmp	r1, r5
   1f4d4:	d903      	bls.n	1f4de <_malloc_r+0x22>
   1f4d6:	230c      	movs	r3, #12
   1f4d8:	6033      	str	r3, [r6, #0]
   1f4da:	2000      	movs	r0, #0
   1f4dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1f4de:	f000 f9bf 	bl	1f860 <__malloc_lock>
   1f4e2:	4921      	ldr	r1, [pc, #132]	; (1f568 <_malloc_r+0xac>)
   1f4e4:	680a      	ldr	r2, [r1, #0]
   1f4e6:	4614      	mov	r4, r2
   1f4e8:	b99c      	cbnz	r4, 1f512 <_malloc_r+0x56>
   1f4ea:	4f20      	ldr	r7, [pc, #128]	; (1f56c <_malloc_r+0xb0>)
   1f4ec:	683b      	ldr	r3, [r7, #0]
   1f4ee:	b923      	cbnz	r3, 1f4fa <_malloc_r+0x3e>
   1f4f0:	4621      	mov	r1, r4
   1f4f2:	4630      	mov	r0, r6
   1f4f4:	f000 f934 	bl	1f760 <_sbrk_r>
   1f4f8:	6038      	str	r0, [r7, #0]
   1f4fa:	4629      	mov	r1, r5
   1f4fc:	4630      	mov	r0, r6
   1f4fe:	f000 f92f 	bl	1f760 <_sbrk_r>
   1f502:	1c43      	adds	r3, r0, #1
   1f504:	d123      	bne.n	1f54e <_malloc_r+0x92>
   1f506:	230c      	movs	r3, #12
   1f508:	4630      	mov	r0, r6
   1f50a:	6033      	str	r3, [r6, #0]
   1f50c:	f000 f9ae 	bl	1f86c <__malloc_unlock>
   1f510:	e7e3      	b.n	1f4da <_malloc_r+0x1e>
   1f512:	6823      	ldr	r3, [r4, #0]
   1f514:	1b5b      	subs	r3, r3, r5
   1f516:	d417      	bmi.n	1f548 <_malloc_r+0x8c>
   1f518:	2b0b      	cmp	r3, #11
   1f51a:	d903      	bls.n	1f524 <_malloc_r+0x68>
   1f51c:	6023      	str	r3, [r4, #0]
   1f51e:	441c      	add	r4, r3
   1f520:	6025      	str	r5, [r4, #0]
   1f522:	e004      	b.n	1f52e <_malloc_r+0x72>
   1f524:	6863      	ldr	r3, [r4, #4]
   1f526:	42a2      	cmp	r2, r4
   1f528:	bf0c      	ite	eq
   1f52a:	600b      	streq	r3, [r1, #0]
   1f52c:	6053      	strne	r3, [r2, #4]
   1f52e:	4630      	mov	r0, r6
   1f530:	f000 f99c 	bl	1f86c <__malloc_unlock>
   1f534:	f104 000b 	add.w	r0, r4, #11
   1f538:	1d23      	adds	r3, r4, #4
   1f53a:	f020 0007 	bic.w	r0, r0, #7
   1f53e:	1ac2      	subs	r2, r0, r3
   1f540:	d0cc      	beq.n	1f4dc <_malloc_r+0x20>
   1f542:	1a1b      	subs	r3, r3, r0
   1f544:	50a3      	str	r3, [r4, r2]
   1f546:	e7c9      	b.n	1f4dc <_malloc_r+0x20>
   1f548:	4622      	mov	r2, r4
   1f54a:	6864      	ldr	r4, [r4, #4]
   1f54c:	e7cc      	b.n	1f4e8 <_malloc_r+0x2c>
   1f54e:	1cc4      	adds	r4, r0, #3
   1f550:	f024 0403 	bic.w	r4, r4, #3
   1f554:	42a0      	cmp	r0, r4
   1f556:	d0e3      	beq.n	1f520 <_malloc_r+0x64>
   1f558:	1a21      	subs	r1, r4, r0
   1f55a:	4630      	mov	r0, r6
   1f55c:	f000 f900 	bl	1f760 <_sbrk_r>
   1f560:	3001      	adds	r0, #1
   1f562:	d1dd      	bne.n	1f520 <_malloc_r+0x64>
   1f564:	e7cf      	b.n	1f506 <_malloc_r+0x4a>
   1f566:	bf00      	nop
   1f568:	200214b4 	.word	0x200214b4
   1f56c:	200214b8 	.word	0x200214b8

0001f570 <_svfiprintf_r>:
   1f570:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1f574:	461e      	mov	r6, r3
   1f576:	898b      	ldrh	r3, [r1, #12]
   1f578:	b09d      	sub	sp, #116	; 0x74
   1f57a:	4607      	mov	r7, r0
   1f57c:	061b      	lsls	r3, r3, #24
   1f57e:	460d      	mov	r5, r1
   1f580:	4614      	mov	r4, r2
   1f582:	d50e      	bpl.n	1f5a2 <_svfiprintf_r+0x32>
   1f584:	690b      	ldr	r3, [r1, #16]
   1f586:	b963      	cbnz	r3, 1f5a2 <_svfiprintf_r+0x32>
   1f588:	2140      	movs	r1, #64	; 0x40
   1f58a:	f7ff ff97 	bl	1f4bc <_malloc_r>
   1f58e:	6028      	str	r0, [r5, #0]
   1f590:	6128      	str	r0, [r5, #16]
   1f592:	b920      	cbnz	r0, 1f59e <_svfiprintf_r+0x2e>
   1f594:	230c      	movs	r3, #12
   1f596:	603b      	str	r3, [r7, #0]
   1f598:	f04f 30ff 	mov.w	r0, #4294967295
   1f59c:	e0c9      	b.n	1f732 <_svfiprintf_r+0x1c2>
   1f59e:	2340      	movs	r3, #64	; 0x40
   1f5a0:	616b      	str	r3, [r5, #20]
   1f5a2:	2300      	movs	r3, #0
   1f5a4:	f8df 91a4 	ldr.w	r9, [pc, #420]	; 1f74c <_svfiprintf_r+0x1dc>
   1f5a8:	f04f 0a01 	mov.w	sl, #1
   1f5ac:	9603      	str	r6, [sp, #12]
   1f5ae:	9309      	str	r3, [sp, #36]	; 0x24
   1f5b0:	2320      	movs	r3, #32
   1f5b2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
   1f5b6:	2330      	movs	r3, #48	; 0x30
   1f5b8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
   1f5bc:	4623      	mov	r3, r4
   1f5be:	461e      	mov	r6, r3
   1f5c0:	f813 2b01 	ldrb.w	r2, [r3], #1
   1f5c4:	b10a      	cbz	r2, 1f5ca <_svfiprintf_r+0x5a>
   1f5c6:	2a25      	cmp	r2, #37	; 0x25
   1f5c8:	d1f9      	bne.n	1f5be <_svfiprintf_r+0x4e>
   1f5ca:	ebb6 0b04 	subs.w	fp, r6, r4
   1f5ce:	d00b      	beq.n	1f5e8 <_svfiprintf_r+0x78>
   1f5d0:	465b      	mov	r3, fp
   1f5d2:	4622      	mov	r2, r4
   1f5d4:	4629      	mov	r1, r5
   1f5d6:	4638      	mov	r0, r7
   1f5d8:	f002 ff3a 	bl	22450 <__ssputs_r>
   1f5dc:	3001      	adds	r0, #1
   1f5de:	f000 80a3 	beq.w	1f728 <_svfiprintf_r+0x1b8>
   1f5e2:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1f5e4:	445b      	add	r3, fp
   1f5e6:	9309      	str	r3, [sp, #36]	; 0x24
   1f5e8:	7833      	ldrb	r3, [r6, #0]
   1f5ea:	2b00      	cmp	r3, #0
   1f5ec:	f000 809c 	beq.w	1f728 <_svfiprintf_r+0x1b8>
   1f5f0:	2300      	movs	r3, #0
   1f5f2:	f04f 32ff 	mov.w	r2, #4294967295
   1f5f6:	3601      	adds	r6, #1
   1f5f8:	9304      	str	r3, [sp, #16]
   1f5fa:	9307      	str	r3, [sp, #28]
   1f5fc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
   1f600:	931a      	str	r3, [sp, #104]	; 0x68
   1f602:	e9cd 2305 	strd	r2, r3, [sp, #20]
   1f606:	4634      	mov	r4, r6
   1f608:	2205      	movs	r2, #5
   1f60a:	4850      	ldr	r0, [pc, #320]	; (1f74c <_svfiprintf_r+0x1dc>)
   1f60c:	f814 1b01 	ldrb.w	r1, [r4], #1
   1f610:	f002 f977 	bl	21902 <memchr>
   1f614:	9b04      	ldr	r3, [sp, #16]
   1f616:	b9c0      	cbnz	r0, 1f64a <_svfiprintf_r+0xda>
   1f618:	06d9      	lsls	r1, r3, #27
   1f61a:	bf44      	itt	mi
   1f61c:	2220      	movmi	r2, #32
   1f61e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
   1f622:	071a      	lsls	r2, r3, #28
   1f624:	bf44      	itt	mi
   1f626:	222b      	movmi	r2, #43	; 0x2b
   1f628:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
   1f62c:	7832      	ldrb	r2, [r6, #0]
   1f62e:	2a2a      	cmp	r2, #42	; 0x2a
   1f630:	d013      	beq.n	1f65a <_svfiprintf_r+0xea>
   1f632:	4634      	mov	r4, r6
   1f634:	9a07      	ldr	r2, [sp, #28]
   1f636:	2000      	movs	r0, #0
   1f638:	260a      	movs	r6, #10
   1f63a:	4621      	mov	r1, r4
   1f63c:	f811 3b01 	ldrb.w	r3, [r1], #1
   1f640:	3b30      	subs	r3, #48	; 0x30
   1f642:	2b09      	cmp	r3, #9
   1f644:	d94b      	bls.n	1f6de <_svfiprintf_r+0x16e>
   1f646:	b970      	cbnz	r0, 1f666 <_svfiprintf_r+0xf6>
   1f648:	e014      	b.n	1f674 <_svfiprintf_r+0x104>
   1f64a:	eba0 0009 	sub.w	r0, r0, r9
   1f64e:	4626      	mov	r6, r4
   1f650:	fa0a f000 	lsl.w	r0, sl, r0
   1f654:	4318      	orrs	r0, r3
   1f656:	9004      	str	r0, [sp, #16]
   1f658:	e7d5      	b.n	1f606 <_svfiprintf_r+0x96>
   1f65a:	9a03      	ldr	r2, [sp, #12]
   1f65c:	1d11      	adds	r1, r2, #4
   1f65e:	6812      	ldr	r2, [r2, #0]
   1f660:	2a00      	cmp	r2, #0
   1f662:	9103      	str	r1, [sp, #12]
   1f664:	db01      	blt.n	1f66a <_svfiprintf_r+0xfa>
   1f666:	9207      	str	r2, [sp, #28]
   1f668:	e004      	b.n	1f674 <_svfiprintf_r+0x104>
   1f66a:	4252      	negs	r2, r2
   1f66c:	f043 0302 	orr.w	r3, r3, #2
   1f670:	9207      	str	r2, [sp, #28]
   1f672:	9304      	str	r3, [sp, #16]
   1f674:	7823      	ldrb	r3, [r4, #0]
   1f676:	2b2e      	cmp	r3, #46	; 0x2e
   1f678:	d10c      	bne.n	1f694 <_svfiprintf_r+0x124>
   1f67a:	7863      	ldrb	r3, [r4, #1]
   1f67c:	2b2a      	cmp	r3, #42	; 0x2a
   1f67e:	d133      	bne.n	1f6e8 <_svfiprintf_r+0x178>
   1f680:	9b03      	ldr	r3, [sp, #12]
   1f682:	3402      	adds	r4, #2
   1f684:	1d1a      	adds	r2, r3, #4
   1f686:	681b      	ldr	r3, [r3, #0]
   1f688:	2b00      	cmp	r3, #0
   1f68a:	9203      	str	r2, [sp, #12]
   1f68c:	bfb8      	it	lt
   1f68e:	f04f 33ff 	movlt.w	r3, #4294967295
   1f692:	9305      	str	r3, [sp, #20]
   1f694:	4e2e      	ldr	r6, [pc, #184]	; (1f750 <_svfiprintf_r+0x1e0>)
   1f696:	2203      	movs	r2, #3
   1f698:	7821      	ldrb	r1, [r4, #0]
   1f69a:	4630      	mov	r0, r6
   1f69c:	f002 f931 	bl	21902 <memchr>
   1f6a0:	b138      	cbz	r0, 1f6b2 <_svfiprintf_r+0x142>
   1f6a2:	2340      	movs	r3, #64	; 0x40
   1f6a4:	1b80      	subs	r0, r0, r6
   1f6a6:	3401      	adds	r4, #1
   1f6a8:	fa03 f000 	lsl.w	r0, r3, r0
   1f6ac:	9b04      	ldr	r3, [sp, #16]
   1f6ae:	4303      	orrs	r3, r0
   1f6b0:	9304      	str	r3, [sp, #16]
   1f6b2:	f814 1b01 	ldrb.w	r1, [r4], #1
   1f6b6:	2206      	movs	r2, #6
   1f6b8:	4826      	ldr	r0, [pc, #152]	; (1f754 <_svfiprintf_r+0x1e4>)
   1f6ba:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
   1f6be:	f002 f920 	bl	21902 <memchr>
   1f6c2:	2800      	cmp	r0, #0
   1f6c4:	d038      	beq.n	1f738 <_svfiprintf_r+0x1c8>
   1f6c6:	4b24      	ldr	r3, [pc, #144]	; (1f758 <_svfiprintf_r+0x1e8>)
   1f6c8:	bb13      	cbnz	r3, 1f710 <_svfiprintf_r+0x1a0>
   1f6ca:	9b03      	ldr	r3, [sp, #12]
   1f6cc:	3307      	adds	r3, #7
   1f6ce:	f023 0307 	bic.w	r3, r3, #7
   1f6d2:	3308      	adds	r3, #8
   1f6d4:	9303      	str	r3, [sp, #12]
   1f6d6:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1f6d8:	4443      	add	r3, r8
   1f6da:	9309      	str	r3, [sp, #36]	; 0x24
   1f6dc:	e76e      	b.n	1f5bc <_svfiprintf_r+0x4c>
   1f6de:	fb06 3202 	mla	r2, r6, r2, r3
   1f6e2:	2001      	movs	r0, #1
   1f6e4:	460c      	mov	r4, r1
   1f6e6:	e7a8      	b.n	1f63a <_svfiprintf_r+0xca>
   1f6e8:	2300      	movs	r3, #0
   1f6ea:	3401      	adds	r4, #1
   1f6ec:	260a      	movs	r6, #10
   1f6ee:	4619      	mov	r1, r3
   1f6f0:	9305      	str	r3, [sp, #20]
   1f6f2:	4620      	mov	r0, r4
   1f6f4:	f810 2b01 	ldrb.w	r2, [r0], #1
   1f6f8:	3a30      	subs	r2, #48	; 0x30
   1f6fa:	2a09      	cmp	r2, #9
   1f6fc:	d903      	bls.n	1f706 <_svfiprintf_r+0x196>
   1f6fe:	2b00      	cmp	r3, #0
   1f700:	d0c8      	beq.n	1f694 <_svfiprintf_r+0x124>
   1f702:	9105      	str	r1, [sp, #20]
   1f704:	e7c6      	b.n	1f694 <_svfiprintf_r+0x124>
   1f706:	fb06 2101 	mla	r1, r6, r1, r2
   1f70a:	2301      	movs	r3, #1
   1f70c:	4604      	mov	r4, r0
   1f70e:	e7f0      	b.n	1f6f2 <_svfiprintf_r+0x182>
   1f710:	ab03      	add	r3, sp, #12
   1f712:	462a      	mov	r2, r5
   1f714:	a904      	add	r1, sp, #16
   1f716:	4638      	mov	r0, r7
   1f718:	9300      	str	r3, [sp, #0]
   1f71a:	4b10      	ldr	r3, [pc, #64]	; (1f75c <_svfiprintf_r+0x1ec>)
   1f71c:	f7fe fee2 	bl	1e4e4 <_printf_float>
   1f720:	f1b0 3fff 	cmp.w	r0, #4294967295
   1f724:	4680      	mov	r8, r0
   1f726:	d1d6      	bne.n	1f6d6 <_svfiprintf_r+0x166>
   1f728:	89ab      	ldrh	r3, [r5, #12]
   1f72a:	065b      	lsls	r3, r3, #25
   1f72c:	f53f af34 	bmi.w	1f598 <_svfiprintf_r+0x28>
   1f730:	9809      	ldr	r0, [sp, #36]	; 0x24
   1f732:	b01d      	add	sp, #116	; 0x74
   1f734:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1f738:	ab03      	add	r3, sp, #12
   1f73a:	462a      	mov	r2, r5
   1f73c:	a904      	add	r1, sp, #16
   1f73e:	4638      	mov	r0, r7
   1f740:	9300      	str	r3, [sp, #0]
   1f742:	4b06      	ldr	r3, [pc, #24]	; (1f75c <_svfiprintf_r+0x1ec>)
   1f744:	f7ff f8f8 	bl	1e938 <_printf_i>
   1f748:	e7ea      	b.n	1f720 <_svfiprintf_r+0x1b0>
   1f74a:	bf00      	nop
   1f74c:	0002571e 	.word	0x0002571e
   1f750:	00025724 	.word	0x00025724
   1f754:	00025728 	.word	0x00025728
   1f758:	0001e4e5 	.word	0x0001e4e5
   1f75c:	00022451 	.word	0x00022451

0001f760 <_sbrk_r>:
   1f760:	b538      	push	{r3, r4, r5, lr}
   1f762:	2300      	movs	r3, #0
   1f764:	4c05      	ldr	r4, [pc, #20]	; (1f77c <_sbrk_r+0x1c>)
   1f766:	4605      	mov	r5, r0
   1f768:	4608      	mov	r0, r1
   1f76a:	6023      	str	r3, [r4, #0]
   1f76c:	f7f0 fbac 	bl	fec8 <_sbrk>
   1f770:	1c43      	adds	r3, r0, #1
   1f772:	d102      	bne.n	1f77a <_sbrk_r+0x1a>
   1f774:	6823      	ldr	r3, [r4, #0]
   1f776:	b103      	cbz	r3, 1f77a <_sbrk_r+0x1a>
   1f778:	602b      	str	r3, [r5, #0]
   1f77a:	bd38      	pop	{r3, r4, r5, pc}
   1f77c:	200227d4 	.word	0x200227d4

0001f780 <raise>:
   1f780:	4b02      	ldr	r3, [pc, #8]	; (1f78c <raise+0xc>)
   1f782:	4601      	mov	r1, r0
   1f784:	6818      	ldr	r0, [r3, #0]
   1f786:	f002 bebe 	b.w	22506 <_raise_r>
   1f78a:	bf00      	nop
   1f78c:	200260b0 	.word	0x200260b0

0001f790 <_kill_r>:
   1f790:	b538      	push	{r3, r4, r5, lr}
   1f792:	2300      	movs	r3, #0
   1f794:	4c06      	ldr	r4, [pc, #24]	; (1f7b0 <_kill_r+0x20>)
   1f796:	4605      	mov	r5, r0
   1f798:	4608      	mov	r0, r1
   1f79a:	4611      	mov	r1, r2
   1f79c:	6023      	str	r3, [r4, #0]
   1f79e:	f000 fc35 	bl	2000c <_kill>
   1f7a2:	1c43      	adds	r3, r0, #1
   1f7a4:	d102      	bne.n	1f7ac <_kill_r+0x1c>
   1f7a6:	6823      	ldr	r3, [r4, #0]
   1f7a8:	b103      	cbz	r3, 1f7ac <_kill_r+0x1c>
   1f7aa:	602b      	str	r3, [r5, #0]
   1f7ac:	bd38      	pop	{r3, r4, r5, pc}
   1f7ae:	bf00      	nop
   1f7b0:	200227d4 	.word	0x200227d4

0001f7b4 <_write_r>:
   1f7b4:	b538      	push	{r3, r4, r5, lr}
   1f7b6:	4605      	mov	r5, r0
   1f7b8:	4c06      	ldr	r4, [pc, #24]	; (1f7d4 <_write_r+0x20>)
   1f7ba:	4608      	mov	r0, r1
   1f7bc:	4611      	mov	r1, r2
   1f7be:	2200      	movs	r2, #0
   1f7c0:	6022      	str	r2, [r4, #0]
   1f7c2:	461a      	mov	r2, r3
   1f7c4:	f000 fc17 	bl	1fff6 <_write>
   1f7c8:	1c43      	adds	r3, r0, #1
   1f7ca:	d102      	bne.n	1f7d2 <_write_r+0x1e>
   1f7cc:	6823      	ldr	r3, [r4, #0]
   1f7ce:	b103      	cbz	r3, 1f7d2 <_write_r+0x1e>
   1f7d0:	602b      	str	r3, [r5, #0]
   1f7d2:	bd38      	pop	{r3, r4, r5, pc}
   1f7d4:	200227d4 	.word	0x200227d4

0001f7d8 <_close_r>:
   1f7d8:	b538      	push	{r3, r4, r5, lr}
   1f7da:	2300      	movs	r3, #0
   1f7dc:	4c05      	ldr	r4, [pc, #20]	; (1f7f4 <_close_r+0x1c>)
   1f7de:	4605      	mov	r5, r0
   1f7e0:	4608      	mov	r0, r1
   1f7e2:	6023      	str	r3, [r4, #0]
   1f7e4:	f000 fc0b 	bl	1fffe <_close>
   1f7e8:	1c43      	adds	r3, r0, #1
   1f7ea:	d102      	bne.n	1f7f2 <_close_r+0x1a>
   1f7ec:	6823      	ldr	r3, [r4, #0]
   1f7ee:	b103      	cbz	r3, 1f7f2 <_close_r+0x1a>
   1f7f0:	602b      	str	r3, [r5, #0]
   1f7f2:	bd38      	pop	{r3, r4, r5, pc}
   1f7f4:	200227d4 	.word	0x200227d4

0001f7f8 <_fstat_r>:
   1f7f8:	b538      	push	{r3, r4, r5, lr}
   1f7fa:	2300      	movs	r3, #0
   1f7fc:	4c06      	ldr	r4, [pc, #24]	; (1f818 <_fstat_r+0x20>)
   1f7fe:	4605      	mov	r5, r0
   1f800:	4608      	mov	r0, r1
   1f802:	4611      	mov	r1, r2
   1f804:	6023      	str	r3, [r4, #0]
   1f806:	f000 fc05 	bl	20014 <_fstat>
   1f80a:	1c43      	adds	r3, r0, #1
   1f80c:	d102      	bne.n	1f814 <_fstat_r+0x1c>
   1f80e:	6823      	ldr	r3, [r4, #0]
   1f810:	b103      	cbz	r3, 1f814 <_fstat_r+0x1c>
   1f812:	602b      	str	r3, [r5, #0]
   1f814:	bd38      	pop	{r3, r4, r5, pc}
   1f816:	bf00      	nop
   1f818:	200227d4 	.word	0x200227d4

0001f81c <_isatty_r>:
   1f81c:	b538      	push	{r3, r4, r5, lr}
   1f81e:	2300      	movs	r3, #0
   1f820:	4c05      	ldr	r4, [pc, #20]	; (1f838 <_isatty_r+0x1c>)
   1f822:	4605      	mov	r5, r0
   1f824:	4608      	mov	r0, r1
   1f826:	6023      	str	r3, [r4, #0]
   1f828:	f000 fbee 	bl	20008 <_isatty>
   1f82c:	1c43      	adds	r3, r0, #1
   1f82e:	d102      	bne.n	1f836 <_isatty_r+0x1a>
   1f830:	6823      	ldr	r3, [r4, #0]
   1f832:	b103      	cbz	r3, 1f836 <_isatty_r+0x1a>
   1f834:	602b      	str	r3, [r5, #0]
   1f836:	bd38      	pop	{r3, r4, r5, pc}
   1f838:	200227d4 	.word	0x200227d4

0001f83c <_lseek_r>:
   1f83c:	b538      	push	{r3, r4, r5, lr}
   1f83e:	4605      	mov	r5, r0
   1f840:	4c06      	ldr	r4, [pc, #24]	; (1f85c <_lseek_r+0x20>)
   1f842:	4608      	mov	r0, r1
   1f844:	4611      	mov	r1, r2
   1f846:	2200      	movs	r2, #0
   1f848:	6022      	str	r2, [r4, #0]
   1f84a:	461a      	mov	r2, r3
   1f84c:	f000 fbda 	bl	20004 <_lseek>
   1f850:	1c43      	adds	r3, r0, #1
   1f852:	d102      	bne.n	1f85a <_lseek_r+0x1e>
   1f854:	6823      	ldr	r3, [r4, #0]
   1f856:	b103      	cbz	r3, 1f85a <_lseek_r+0x1e>
   1f858:	602b      	str	r3, [r5, #0]
   1f85a:	bd38      	pop	{r3, r4, r5, pc}
   1f85c:	200227d4 	.word	0x200227d4

0001f860 <__malloc_lock>:
   1f860:	4801      	ldr	r0, [pc, #4]	; (1f868 <__malloc_lock+0x8>)
   1f862:	f002 baf6 	b.w	21e52 <__retarget_lock_acquire_recursive>
   1f866:	bf00      	nop
   1f868:	200227dc 	.word	0x200227dc

0001f86c <__malloc_unlock>:
   1f86c:	4801      	ldr	r0, [pc, #4]	; (1f874 <__malloc_unlock+0x8>)
   1f86e:	f002 baf1 	b.w	21e54 <__retarget_lock_release_recursive>
   1f872:	bf00      	nop
   1f874:	200227dc 	.word	0x200227dc

0001f878 <_read_r>:
   1f878:	b538      	push	{r3, r4, r5, lr}
   1f87a:	4605      	mov	r5, r0
   1f87c:	4c06      	ldr	r4, [pc, #24]	; (1f898 <_read_r+0x20>)
   1f87e:	4608      	mov	r0, r1
   1f880:	4611      	mov	r1, r2
   1f882:	2200      	movs	r2, #0
   1f884:	6022      	str	r2, [r4, #0]
   1f886:	461a      	mov	r2, r3
   1f888:	f000 fbb1 	bl	1ffee <_read>
   1f88c:	1c43      	adds	r3, r0, #1
   1f88e:	d102      	bne.n	1f896 <_read_r+0x1e>
   1f890:	6823      	ldr	r3, [r4, #0]
   1f892:	b103      	cbz	r3, 1f896 <_read_r+0x1e>
   1f894:	602b      	str	r3, [r5, #0]
   1f896:	bd38      	pop	{r3, r4, r5, pc}
   1f898:	200227d4 	.word	0x200227d4

0001f89c <get_bit_ptr>:
{
   1f89c:	b570      	push	{r4, r5, r6, lr}
   1f89e:	250c      	movs	r5, #12
   1f8a0:	68c6      	ldr	r6, [r0, #12]
	u32_t *bitarray = level <= p->max_inline_level ?
   1f8a2:	f990 000b 	ldrsb.w	r0, [r0, #11]
   1f8a6:	434d      	muls	r5, r1
		p->levels[level].bits : p->levels[level].bits_p;
   1f8a8:	4288      	cmp	r0, r1
	*word = &bitarray[bn / 32];
   1f8aa:	4610      	mov	r0, r2
   1f8ac:	eb06 0405 	add.w	r4, r6, r5
		p->levels[level].bits : p->levels[level].bits_p;
   1f8b0:	bfb8      	it	lt
   1f8b2:	5974      	ldrlt	r4, [r6, r5]
	*word = &bitarray[bn / 32];
   1f8b4:	2a00      	cmp	r2, #0
   1f8b6:	bfb8      	it	lt
   1f8b8:	f102 001f 	addlt.w	r0, r2, #31
   1f8bc:	1140      	asrs	r0, r0, #5
   1f8be:	eb04 0180 	add.w	r1, r4, r0, lsl #2
   1f8c2:	6019      	str	r1, [r3, #0]
}
   1f8c4:	f002 001f 	and.w	r0, r2, #31
   1f8c8:	bd70      	pop	{r4, r5, r6, pc}

0001f8ca <pool_irq_lock.isra.2.part.3>:
	__asm__ volatile(
   1f8ca:	f04f 0320 	mov.w	r3, #32
   1f8ce:	f3ef 8011 	mrs	r0, BASEPRI
   1f8d2:	f383 8811 	msr	BASEPRI, r3
   1f8d6:	f3bf 8f6f 	isb	sy
}
   1f8da:	4770      	bx	lr

0001f8dc <pool_irq_unlock.isra.4>:
	if (p->flags & SYS_MEM_POOL_KERNEL) {
   1f8dc:	07c3      	lsls	r3, r0, #31
   1f8de:	d503      	bpl.n	1f8e8 <pool_irq_unlock.isra.4+0xc>
	__asm__ volatile(
   1f8e0:	f381 8811 	msr	BASEPRI, r1
   1f8e4:	f3bf 8f6f 	isb	sy
}
   1f8e8:	4770      	bx	lr

0001f8ea <z_sys_mem_pool_base_init>:
	p->max_inline_level = -1;
   1f8ea:	23ff      	movs	r3, #255	; 0xff
{
   1f8ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	size_t buflen = p->n_max * p->max_sz, sz = p->max_sz;
   1f8f0:	6846      	ldr	r6, [r0, #4]
	p->max_inline_level = -1;
   1f8f2:	72c3      	strb	r3, [r0, #11]
	size_t buflen = p->n_max * p->max_sz, sz = p->max_sz;
   1f8f4:	4632      	mov	r2, r6
	for (i = 0; i < p->n_levels; i++) {
   1f8f6:	2300      	movs	r3, #0
		sys_dlist_init(&p->levels[i].free_list);
   1f8f8:	f04f 090c 	mov.w	r9, #12
	size_t buflen = p->n_max * p->max_sz, sz = p->max_sz;
   1f8fc:	8907      	ldrh	r7, [r0, #8]
	u32_t *bits = (u32_t *)((u8_t *)p->buf + buflen);
   1f8fe:	6801      	ldr	r1, [r0, #0]
	size_t buflen = p->n_max * p->max_sz, sz = p->max_sz;
   1f900:	fb06 fc07 	mul.w	ip, r6, r7
	for (i = 0; i < p->n_levels; i++) {
   1f904:	f890 800a 	ldrb.w	r8, [r0, #10]
	u32_t *bits = (u32_t *)((u8_t *)p->buf + buflen);
   1f908:	4461      	add	r1, ip
	for (i = 0; i < p->n_levels; i++) {
   1f90a:	4598      	cmp	r8, r3
   1f90c:	dc05      	bgt.n	1f91a <z_sys_mem_pool_base_init+0x30>
   1f90e:	2300      	movs	r3, #0
	for (i = 0; i < p->n_max; i++) {
   1f910:	4619      	mov	r1, r3
   1f912:	428f      	cmp	r7, r1
   1f914:	dc20      	bgt.n	1f958 <z_sys_mem_pool_base_init+0x6e>
}
   1f916:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		int nblocks = buflen / sz;
   1f91a:	fbbc f5f2 	udiv	r5, ip, r2
		sys_dlist_init(&p->levels[i].free_list);
   1f91e:	fb09 fe03 	mul.w	lr, r9, r3
   1f922:	f8d0 a00c 	ldr.w	sl, [r0, #12]
		if (nblocks <= sizeof(p->levels[i].bits)*8) {
   1f926:	2d20      	cmp	r5, #32
		sys_dlist_init(&p->levels[i].free_list);
   1f928:	eb0a 040e 	add.w	r4, sl, lr
   1f92c:	f104 0b04 	add.w	fp, r4, #4
	list->tail = (sys_dnode_t *)list;
   1f930:	e9c4 bb01 	strd	fp, fp, [r4, #4]
		if (nblocks <= sizeof(p->levels[i].bits)*8) {
   1f934:	d805      	bhi.n	1f942 <z_sys_mem_pool_base_init+0x58>
			p->max_inline_level = i;
   1f936:	72c3      	strb	r3, [r0, #11]
		sz = WB_DN(sz / 4);
   1f938:	0892      	lsrs	r2, r2, #2
   1f93a:	f022 0203 	bic.w	r2, r2, #3
	for (i = 0; i < p->n_levels; i++) {
   1f93e:	3301      	adds	r3, #1
   1f940:	e7e3      	b.n	1f90a <z_sys_mem_pool_base_init+0x20>
			bits += (nblocks + 31)/32;
   1f942:	f115 041f 	adds.w	r4, r5, #31
   1f946:	bf48      	it	mi
   1f948:	f105 043e 	addmi.w	r4, r5, #62	; 0x3e
   1f94c:	1164      	asrs	r4, r4, #5
			p->levels[i].bits_p = bits;
   1f94e:	f84a 100e 	str.w	r1, [sl, lr]
			bits += (nblocks + 31)/32;
   1f952:	eb01 0184 	add.w	r1, r1, r4, lsl #2
   1f956:	e7ef      	b.n	1f938 <z_sys_mem_pool_base_init+0x4e>
		sys_dlist_append(&p->levels[0].free_list, block);
   1f958:	68c2      	ldr	r2, [r0, #12]
	return (u8_t *)p->buf + lsz * block;
   1f95a:	6805      	ldr	r5, [r0, #0]
		sys_dlist_append(&p->levels[0].free_list, block);
   1f95c:	f102 0c04 	add.w	ip, r2, #4
	return (u8_t *)p->buf + lsz * block;
   1f960:	18ec      	adds	r4, r5, r3
	node->next = list;
   1f962:	f845 c003 	str.w	ip, [r5, r3]
	node->prev = list->tail;
   1f966:	6895      	ldr	r5, [r2, #8]
	for (i = 0; i < p->n_max; i++) {
   1f968:	3101      	adds	r1, #1
   1f96a:	6065      	str	r5, [r4, #4]
	list->tail->next = node;
   1f96c:	6895      	ldr	r5, [r2, #8]
   1f96e:	4433      	add	r3, r6
   1f970:	602c      	str	r4, [r5, #0]
	list->tail = node;
   1f972:	6094      	str	r4, [r2, #8]
   1f974:	e7cd      	b.n	1f912 <z_sys_mem_pool_base_init+0x28>

0001f976 <z_sys_mem_pool_block_alloc>:
{
   1f976:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1f97a:	b087      	sub	sp, #28
	size_t lsizes[LVL_ARRAY_SZ(p->n_levels)];
   1f97c:	7a84      	ldrb	r4, [r0, #10]
{
   1f97e:	af00      	add	r7, sp, #0
   1f980:	e9c7 3201 	strd	r3, r2, [r7, #4]
	size_t lsizes[LVL_ARRAY_SZ(p->n_levels)];
   1f984:	00a3      	lsls	r3, r4, #2
   1f986:	3307      	adds	r3, #7
   1f988:	f403 63ff 	and.w	r3, r3, #2040	; 0x7f8
   1f98c:	ebad 0d03 	sub.w	sp, sp, r3
   1f990:	46ea      	mov	sl, sp
	lsizes[0] = p->max_sz;
   1f992:	4653      	mov	r3, sl
   1f994:	6842      	ldr	r2, [r0, #4]
{
   1f996:	4605      	mov	r5, r0
	lsizes[0] = p->max_sz;
   1f998:	f843 2904 	str.w	r2, [r3], #-4
	for (i = 0; i < p->n_levels; i++) {
   1f99c:	2200      	movs	r2, #0
   1f99e:	4294      	cmp	r4, r2
   1f9a0:	f102 39ff 	add.w	r9, r2, #4294967295
   1f9a4:	dd09      	ble.n	1f9ba <z_sys_mem_pool_block_alloc+0x44>
		if (i > 0) {
   1f9a6:	b122      	cbz	r2, 1f9b2 <z_sys_mem_pool_block_alloc+0x3c>
			lsizes[i] = WB_DN(lsizes[i-1] / 4);
   1f9a8:	6818      	ldr	r0, [r3, #0]
   1f9aa:	0880      	lsrs	r0, r0, #2
   1f9ac:	f020 0003 	bic.w	r0, r0, #3
   1f9b0:	6058      	str	r0, [r3, #4]
		if (lsizes[i] < size) {
   1f9b2:	f853 0f04 	ldr.w	r0, [r3, #4]!
   1f9b6:	4288      	cmp	r0, r1
   1f9b8:	d208      	bcs.n	1f9cc <z_sys_mem_pool_block_alloc+0x56>
	if (alloc_l < 0) {
   1f9ba:	f1b9 3fff 	cmp.w	r9, #4294967295
   1f9be:	d107      	bne.n	1f9d0 <z_sys_mem_pool_block_alloc+0x5a>
		*data_p = NULL;
   1f9c0:	2300      	movs	r3, #0
   1f9c2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
   1f9c4:	6013      	str	r3, [r2, #0]
		return -ENOMEM;
   1f9c6:	f06f 000b 	mvn.w	r0, #11
   1f9ca:	e02c      	b.n	1fa26 <z_sys_mem_pool_block_alloc+0xb0>
	for (i = 0; i < p->n_levels; i++) {
   1f9cc:	3201      	adds	r2, #1
   1f9ce:	e7e6      	b.n	1f99e <z_sys_mem_pool_block_alloc+0x28>
	if (p->flags & SYS_MEM_POOL_KERNEL) {
   1f9d0:	7c28      	ldrb	r0, [r5, #16]
   1f9d2:	f010 0001 	ands.w	r0, r0, #1
   1f9d6:	d001      	beq.n	1f9dc <z_sys_mem_pool_block_alloc+0x66>
   1f9d8:	f7ff ff77 	bl	1f8ca <pool_irq_lock.isra.2.part.3>
   1f9dc:	230c      	movs	r3, #12
	key = pool_irq_lock(p);
   1f9de:	4680      	mov	r8, r0
	block = sys_dlist_get(&p->levels[l].free_list);
   1f9e0:	464e      	mov	r6, r9
   1f9e2:	68ea      	ldr	r2, [r5, #12]
   1f9e4:	fb03 2309 	mla	r3, r3, r9, r2
	return list->head == list;
   1f9e8:	461a      	mov	r2, r3
   1f9ea:	f852 4f04 	ldr.w	r4, [r2, #4]!

static inline sys_dnode_t *sys_dlist_get(sys_dlist_t *list)
{
	sys_dnode_t *node = NULL;

	if (!sys_dlist_is_empty(list)) {
   1f9ee:	4294      	cmp	r4, r2
   1f9f0:	d11d      	bne.n	1fa2e <z_sys_mem_pool_block_alloc+0xb8>
	for (i = alloc_l; i >= 0; i--) {
   1f9f2:	3e01      	subs	r6, #1
   1f9f4:	1c72      	adds	r2, r6, #1
   1f9f6:	f1a3 030c 	sub.w	r3, r3, #12
   1f9fa:	d1f5      	bne.n	1f9e8 <z_sys_mem_pool_block_alloc+0x72>
   1f9fc:	2400      	movs	r4, #0
	pool_irq_unlock(p, key);
   1f9fe:	4641      	mov	r1, r8
   1fa00:	7c28      	ldrb	r0, [r5, #16]
   1fa02:	f7ff ff6b 	bl	1f8dc <pool_irq_unlock.isra.4>
	*data_p = data;
   1fa06:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   1fa08:	601c      	str	r4, [r3, #0]
	if (data == NULL) {
   1fa0a:	2c00      	cmp	r4, #0
   1fa0c:	d0db      	beq.n	1f9c6 <z_sys_mem_pool_block_alloc+0x50>
	*level_p = alloc_l;
   1fa0e:	68bb      	ldr	r3, [r7, #8]
	return 0;
   1fa10:	2000      	movs	r0, #0
	*level_p = alloc_l;
   1fa12:	f8c3 9000 	str.w	r9, [r3]
	return ((u8_t *)block - (u8_t *)p->buf) / sz;
   1fa16:	682b      	ldr	r3, [r5, #0]
   1fa18:	1ae4      	subs	r4, r4, r3
   1fa1a:	f85a 3029 	ldr.w	r3, [sl, r9, lsl #2]
   1fa1e:	fb94 f4f3 	sdiv	r4, r4, r3
	*block_p = block_num(p, data, lsizes[alloc_l]);
   1fa22:	687b      	ldr	r3, [r7, #4]
   1fa24:	601c      	str	r4, [r3, #0]
}
   1fa26:	371c      	adds	r7, #28
   1fa28:	46bd      	mov	sp, r7
   1fa2a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	node->prev->next = node->next;
   1fa2e:	e9d4 3200 	ldrd	r3, r2, [r4]
   1fa32:	6013      	str	r3, [r2, #0]
	node->next->prev = node->prev;
   1fa34:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   1fa36:	2300      	movs	r3, #0
	node->prev = NULL;
   1fa38:	e9c4 3300 	strd	r3, r3, [r4]
	return ((u8_t *)block - (u8_t *)p->buf) / sz;
   1fa3c:	682b      	ldr	r3, [r5, #0]
		data = block_alloc(p, i, lsizes[i]);
   1fa3e:	f85a 1026 	ldr.w	r1, [sl, r6, lsl #2]
	return ((u8_t *)block - (u8_t *)p->buf) / sz;
   1fa42:	1ae2      	subs	r2, r4, r3
	int bit = get_bit_ptr(p, level, bn, &word);
   1fa44:	f107 0b14 	add.w	fp, r7, #20
   1fa48:	fb92 f2f1 	sdiv	r2, r2, r1
   1fa4c:	465b      	mov	r3, fp
   1fa4e:	4631      	mov	r1, r6
   1fa50:	4628      	mov	r0, r5
   1fa52:	f7ff ff23 	bl	1f89c <get_bit_ptr>
	*word |= (1<<bit);
   1fa56:	2201      	movs	r2, #1
   1fa58:	6979      	ldr	r1, [r7, #20]
   1fa5a:	fa02 f000 	lsl.w	r0, r2, r0
   1fa5e:	680b      	ldr	r3, [r1, #0]
   1fa60:	603a      	str	r2, [r7, #0]
   1fa62:	4303      	orrs	r3, r0
   1fa64:	600b      	str	r3, [r1, #0]
			for (from_l = i; from_l < alloc_l; from_l++) {
   1fa66:	454e      	cmp	r6, r9
   1fa68:	dac9      	bge.n	1f9fe <z_sys_mem_pool_block_alloc+0x88>
	return ((u8_t *)block - (u8_t *)p->buf) / sz;
   1fa6a:	682a      	ldr	r2, [r5, #0]
   1fa6c:	f85a 3026 	ldr.w	r3, [sl, r6, lsl #2]
   1fa70:	1aa2      	subs	r2, r4, r2
   1fa72:	fb92 f2f3 	sdiv	r2, r2, r3
	set_alloc_bit(p, l + 1, 4*bn);
   1fa76:	3601      	adds	r6, #1
	int bit = get_bit_ptr(p, level, bn, &word);
   1fa78:	465b      	mov	r3, fp
   1fa7a:	0092      	lsls	r2, r2, #2
   1fa7c:	4631      	mov	r1, r6
   1fa7e:	4628      	mov	r0, r5
   1fa80:	f7ff ff0c 	bl	1f89c <get_bit_ptr>
	*word |= (1<<bit);
   1fa84:	697a      	ldr	r2, [r7, #20]
   1fa86:	683b      	ldr	r3, [r7, #0]
		sys_dlist_append(&p->levels[l + 1].free_list, block2);
   1fa88:	68e9      	ldr	r1, [r5, #12]
	*word |= (1<<bit);
   1fa8a:	fa03 f000 	lsl.w	r0, r3, r0
   1fa8e:	6813      	ldr	r3, [r2, #0]
   1fa90:	4303      	orrs	r3, r0
   1fa92:	6013      	str	r3, [r2, #0]
		sys_dlist_append(&p->levels[l + 1].free_list, block2);
   1fa94:	230c      	movs	r3, #12
   1fa96:	2203      	movs	r2, #3
   1fa98:	fb03 1106 	mla	r1, r3, r6, r1
		int lsz = lsizes[l + 1];
   1fa9c:	f85a 0026 	ldr.w	r0, [sl, r6, lsl #2]
		sys_dlist_append(&p->levels[l + 1].free_list, block2);
   1faa0:	f101 0e04 	add.w	lr, r1, #4
   1faa4:	1823      	adds	r3, r4, r0
   1faa6:	60fa      	str	r2, [r7, #12]
	node->prev = list->tail;
   1faa8:	688a      	ldr	r2, [r1, #8]
	node->next = list;
   1faaa:	f8c3 e000 	str.w	lr, [r3]
	node->prev = list->tail;
   1faae:	605a      	str	r2, [r3, #4]
	list->tail->next = node;
   1fab0:	688a      	ldr	r2, [r1, #8]
   1fab2:	6013      	str	r3, [r2, #0]
	for (i = 1; i < 4; i++) {
   1fab4:	68fa      	ldr	r2, [r7, #12]
	list->tail = node;
   1fab6:	608b      	str	r3, [r1, #8]
   1fab8:	3a01      	subs	r2, #1
   1faba:	4403      	add	r3, r0
   1fabc:	60fa      	str	r2, [r7, #12]
   1fabe:	d1f3      	bne.n	1faa8 <z_sys_mem_pool_block_alloc+0x132>
				pool_irq_unlock(p, key);
   1fac0:	4641      	mov	r1, r8
   1fac2:	7c28      	ldrb	r0, [r5, #16]
   1fac4:	f7ff ff0a 	bl	1f8dc <pool_irq_unlock.isra.4>
	if (p->flags & SYS_MEM_POOL_KERNEL) {
   1fac8:	7c2b      	ldrb	r3, [r5, #16]
   1faca:	07db      	lsls	r3, r3, #31
   1facc:	d503      	bpl.n	1fad6 <z_sys_mem_pool_block_alloc+0x160>
   1face:	f7ff fefc 	bl	1f8ca <pool_irq_lock.isra.2.part.3>
				key = pool_irq_lock(p);
   1fad2:	4680      	mov	r8, r0
   1fad4:	e7c7      	b.n	1fa66 <z_sys_mem_pool_block_alloc+0xf0>
		return 0;
   1fad6:	68f8      	ldr	r0, [r7, #12]
   1fad8:	e7fb      	b.n	1fad2 <z_sys_mem_pool_block_alloc+0x15c>

0001fada <arch_printk_char_out>:
}
   1fada:	2000      	movs	r0, #0
   1fadc:	4770      	bx	lr

0001fade <print_err>:
{
   1fade:	b570      	push	{r4, r5, r6, lr}
   1fae0:	460d      	mov	r5, r1
   1fae2:	4604      	mov	r4, r0
	out('E', ctx);
   1fae4:	2045      	movs	r0, #69	; 0x45
   1fae6:	47a0      	blx	r4
	out('R', ctx);
   1fae8:	4629      	mov	r1, r5
   1faea:	2052      	movs	r0, #82	; 0x52
   1faec:	47a0      	blx	r4
	out('R', ctx);
   1faee:	4629      	mov	r1, r5
   1faf0:	4623      	mov	r3, r4
}
   1faf2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	out('R', ctx);
   1faf6:	2052      	movs	r0, #82	; 0x52
   1faf8:	4718      	bx	r3

0001fafa <z_vprintk>:
{
   1fafa:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	char length_mod = 0;
   1fafe:	f04f 0800 	mov.w	r8, #0
{
   1fb02:	4606      	mov	r6, r0
   1fb04:	460f      	mov	r7, r1
   1fb06:	461c      	mov	r4, r3
	int min_width = -1;
   1fb08:	f04f 3aff 	mov.w	sl, #4294967295
	enum pad_type padding = PAD_NONE;
   1fb0c:	46c1      	mov	r9, r8
	int might_format = 0; /* 1 if encountered a '%' */
   1fb0e:	4645      	mov	r5, r8
{
   1fb10:	b08b      	sub	sp, #44	; 0x2c
   1fb12:	9202      	str	r2, [sp, #8]
	while (*fmt) {
   1fb14:	9b02      	ldr	r3, [sp, #8]
   1fb16:	7818      	ldrb	r0, [r3, #0]
   1fb18:	b910      	cbnz	r0, 1fb20 <z_vprintk+0x26>
}
   1fb1a:	b00b      	add	sp, #44	; 0x2c
   1fb1c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (!might_format) {
   1fb20:	b945      	cbnz	r5, 1fb34 <z_vprintk+0x3a>
			if (*fmt != '%') {
   1fb22:	2825      	cmp	r0, #37	; 0x25
   1fb24:	f000 814b 	beq.w	1fdbe <z_vprintk+0x2c4>
				out((int)*fmt, ctx);
   1fb28:	4639      	mov	r1, r7
   1fb2a:	47b0      	blx	r6
		++fmt;
   1fb2c:	9b02      	ldr	r3, [sp, #8]
   1fb2e:	3301      	adds	r3, #1
   1fb30:	9302      	str	r3, [sp, #8]
   1fb32:	e7ef      	b.n	1fb14 <z_vprintk+0x1a>
			switch (*fmt) {
   1fb34:	2864      	cmp	r0, #100	; 0x64
   1fb36:	d06d      	beq.n	1fc14 <z_vprintk+0x11a>
   1fb38:	d819      	bhi.n	1fb6e <z_vprintk+0x74>
   1fb3a:	2839      	cmp	r0, #57	; 0x39
   1fb3c:	d80a      	bhi.n	1fb54 <z_vprintk+0x5a>
   1fb3e:	2831      	cmp	r0, #49	; 0x31
   1fb40:	d25f      	bcs.n	1fc02 <z_vprintk+0x108>
   1fb42:	282d      	cmp	r0, #45	; 0x2d
   1fb44:	f000 8141 	beq.w	1fdca <z_vprintk+0x2d0>
   1fb48:	2830      	cmp	r0, #48	; 0x30
   1fb4a:	d04b      	beq.n	1fbe4 <z_vprintk+0xea>
   1fb4c:	2825      	cmp	r0, #37	; 0x25
   1fb4e:	d107      	bne.n	1fb60 <z_vprintk+0x66>
				out((int)'%', ctx);
   1fb50:	4639      	mov	r1, r7
   1fb52:	e132      	b.n	1fdba <z_vprintk+0x2c0>
			switch (*fmt) {
   1fb54:	2858      	cmp	r0, #88	; 0x58
   1fb56:	f000 80bb 	beq.w	1fcd0 <z_vprintk+0x1d6>
   1fb5a:	2863      	cmp	r0, #99	; 0x63
   1fb5c:	f000 812a 	beq.w	1fdb4 <z_vprintk+0x2ba>
				out((int)'%', ctx);
   1fb60:	4639      	mov	r1, r7
   1fb62:	2025      	movs	r0, #37	; 0x25
   1fb64:	47b0      	blx	r6
				out((int)*fmt, ctx);
   1fb66:	9b02      	ldr	r3, [sp, #8]
   1fb68:	4639      	mov	r1, r7
   1fb6a:	7818      	ldrb	r0, [r3, #0]
   1fb6c:	e125      	b.n	1fdba <z_vprintk+0x2c0>
			switch (*fmt) {
   1fb6e:	2870      	cmp	r0, #112	; 0x70
   1fb70:	f000 80a4 	beq.w	1fcbc <z_vprintk+0x1c2>
   1fb74:	d811      	bhi.n	1fb9a <z_vprintk+0xa0>
   1fb76:	2869      	cmp	r0, #105	; 0x69
   1fb78:	d04c      	beq.n	1fc14 <z_vprintk+0x11a>
   1fb7a:	286c      	cmp	r0, #108	; 0x6c
   1fb7c:	d105      	bne.n	1fb8a <z_vprintk+0x90>
				} else if (*fmt == 'l' && length_mod == 'l') {
   1fb7e:	f1b8 0f6c 	cmp.w	r8, #108	; 0x6c
   1fb82:	d12a      	bne.n	1fbda <z_vprintk+0xe0>
					length_mod = 'L';
   1fb84:	f04f 084c 	mov.w	r8, #76	; 0x4c
   1fb88:	e7d0      	b.n	1fb2c <z_vprintk+0x32>
			switch (*fmt) {
   1fb8a:	2868      	cmp	r0, #104	; 0x68
   1fb8c:	d1e8      	bne.n	1fb60 <z_vprintk+0x66>
				if (*fmt == 'h' && length_mod == 'h') {
   1fb8e:	f1b8 0f68 	cmp.w	r8, #104	; 0x68
   1fb92:	d122      	bne.n	1fbda <z_vprintk+0xe0>
					length_mod = 'H';
   1fb94:	f04f 0848 	mov.w	r8, #72	; 0x48
   1fb98:	e7c8      	b.n	1fb2c <z_vprintk+0x32>
			switch (*fmt) {
   1fb9a:	2875      	cmp	r0, #117	; 0x75
   1fb9c:	d072      	beq.n	1fc84 <z_vprintk+0x18a>
   1fb9e:	d818      	bhi.n	1fbd2 <z_vprintk+0xd8>
   1fba0:	2873      	cmp	r0, #115	; 0x73
   1fba2:	d1dd      	bne.n	1fb60 <z_vprintk+0x66>
				char *s = va_arg(ap, char *);
   1fba4:	f854 5b04 	ldr.w	r5, [r4], #4
				while (*s) {
   1fba8:	46ab      	mov	fp, r5
   1fbaa:	465b      	mov	r3, fp
   1fbac:	f81b 0b01 	ldrb.w	r0, [fp], #1
   1fbb0:	2800      	cmp	r0, #0
   1fbb2:	f040 80fc 	bne.w	1fdae <z_vprintk+0x2b4>
				if (padding == PAD_SPACE_AFTER) {
   1fbb6:	f1b9 0f03 	cmp.w	r9, #3
   1fbba:	f040 810c 	bne.w	1fdd6 <z_vprintk+0x2dc>
					int remaining = min_width - (s - start);
   1fbbe:	1b5d      	subs	r5, r3, r5
   1fbc0:	ebaa 0505 	sub.w	r5, sl, r5
					while (remaining-- > 0) {
   1fbc4:	2d00      	cmp	r5, #0
   1fbc6:	dd49      	ble.n	1fc5c <z_vprintk+0x162>
						out(' ', ctx);
   1fbc8:	4639      	mov	r1, r7
   1fbca:	2020      	movs	r0, #32
   1fbcc:	47b0      	blx	r6
   1fbce:	3d01      	subs	r5, #1
   1fbd0:	e7f8      	b.n	1fbc4 <z_vprintk+0xca>
			switch (*fmt) {
   1fbd2:	2878      	cmp	r0, #120	; 0x78
   1fbd4:	d07c      	beq.n	1fcd0 <z_vprintk+0x1d6>
   1fbd6:	287a      	cmp	r0, #122	; 0x7a
   1fbd8:	d1c2      	bne.n	1fb60 <z_vprintk+0x66>
				} else if (length_mod == 0) {
   1fbda:	f1b8 0f00 	cmp.w	r8, #0
   1fbde:	d1bf      	bne.n	1fb60 <z_vprintk+0x66>
   1fbe0:	4680      	mov	r8, r0
   1fbe2:	e7a3      	b.n	1fb2c <z_vprintk+0x32>
				if (min_width < 0 && padding == PAD_NONE) {
   1fbe4:	f1ba 0f00 	cmp.w	sl, #0
   1fbe8:	da0e      	bge.n	1fc08 <z_vprintk+0x10e>
   1fbea:	f1b9 0f00 	cmp.w	r9, #0
   1fbee:	f000 80ef 	beq.w	1fdd0 <z_vprintk+0x2d6>
					min_width = *fmt - '0';
   1fbf2:	f1a0 0a30 	sub.w	sl, r0, #48	; 0x30
					padding = PAD_SPACE_BEFORE;
   1fbf6:	f1b9 0f00 	cmp.w	r9, #0
   1fbfa:	bf08      	it	eq
   1fbfc:	f04f 0902 	moveq.w	r9, #2
   1fc00:	e794      	b.n	1fb2c <z_vprintk+0x32>
				if (min_width < 0) {
   1fc02:	f1ba 0f00 	cmp.w	sl, #0
   1fc06:	dbf4      	blt.n	1fbf2 <z_vprintk+0xf8>
					min_width = 10 * min_width + *fmt - '0';
   1fc08:	230a      	movs	r3, #10
   1fc0a:	fb03 0a0a 	mla	sl, r3, sl, r0
   1fc0e:	f1aa 0a30 	sub.w	sl, sl, #48	; 0x30
   1fc12:	e7f0      	b.n	1fbf6 <z_vprintk+0xfc>
				if (length_mod == 'z') {
   1fc14:	f1b8 0f7a 	cmp.w	r8, #122	; 0x7a
   1fc18:	d102      	bne.n	1fc20 <z_vprintk+0x126>
					d = va_arg(ap, int);
   1fc1a:	f854 5b04 	ldr.w	r5, [r4], #4
   1fc1e:	e020      	b.n	1fc62 <z_vprintk+0x168>
				} else if (length_mod == 'l') {
   1fc20:	f1b8 0f6c 	cmp.w	r8, #108	; 0x6c
   1fc24:	d0f9      	beq.n	1fc1a <z_vprintk+0x120>
				} else if (length_mod == 'L') {
   1fc26:	f1b8 0f4c 	cmp.w	r8, #76	; 0x4c
   1fc2a:	d1f6      	bne.n	1fc1a <z_vprintk+0x120>
					long long lld = va_arg(ap, long long);
   1fc2c:	3407      	adds	r4, #7
   1fc2e:	f024 0407 	bic.w	r4, r4, #7
   1fc32:	e8f4 2302 	ldrd	r2, r3, [r4], #8
					if (lld > __LONG_MAX__ ||
   1fc36:	f112 4100 	adds.w	r1, r2, #2147483648	; 0x80000000
   1fc3a:	9106      	str	r1, [sp, #24]
   1fc3c:	f143 0100 	adc.w	r1, r3, #0
   1fc40:	9107      	str	r1, [sp, #28]
   1fc42:	2100      	movs	r1, #0
   1fc44:	e9dd bc06 	ldrd	fp, ip, [sp, #24]
   1fc48:	f04f 30ff 	mov.w	r0, #4294967295
   1fc4c:	4561      	cmp	r1, ip
   1fc4e:	bf08      	it	eq
   1fc50:	4558      	cmpeq	r0, fp
   1fc52:	d205      	bcs.n	1fc60 <z_vprintk+0x166>
						print_err(out, ctx);
   1fc54:	4639      	mov	r1, r7
   1fc56:	4630      	mov	r0, r6
   1fc58:	f7ff ff41 	bl	1fade <print_err>
			might_format = 0;
   1fc5c:	2500      	movs	r5, #0
				break;
   1fc5e:	e765      	b.n	1fb2c <z_vprintk+0x32>
					d = lld;
   1fc60:	4615      	mov	r5, r2
				if (d < 0) {
   1fc62:	2d00      	cmp	r5, #0
   1fc64:	da05      	bge.n	1fc72 <z_vprintk+0x178>
					out((int)'-', ctx);
   1fc66:	4639      	mov	r1, r7
   1fc68:	202d      	movs	r0, #45	; 0x2d
   1fc6a:	47b0      	blx	r6
					d = -d;
   1fc6c:	426d      	negs	r5, r5
					min_width--;
   1fc6e:	f10a 3aff 	add.w	sl, sl, #4294967295
				_printk_dec_ulong(out, ctx, d, padding,
   1fc72:	464b      	mov	r3, r9
   1fc74:	462a      	mov	r2, r5
   1fc76:	f8cd a000 	str.w	sl, [sp]
				_printk_dec_ulong(out, ctx, u, padding,
   1fc7a:	4639      	mov	r1, r7
   1fc7c:	4630      	mov	r0, r6
   1fc7e:	f7ee fa27 	bl	e0d0 <_printk_dec_ulong>
				break;
   1fc82:	e7eb      	b.n	1fc5c <z_vprintk+0x162>
				if (length_mod == 'z') {
   1fc84:	f1b8 0f7a 	cmp.w	r8, #122	; 0x7a
   1fc88:	d102      	bne.n	1fc90 <z_vprintk+0x196>
					u = va_arg(ap, unsigned int);
   1fc8a:	f854 2b04 	ldr.w	r2, [r4], #4
   1fc8e:	e011      	b.n	1fcb4 <z_vprintk+0x1ba>
				} else if (length_mod == 'l') {
   1fc90:	f1b8 0f6c 	cmp.w	r8, #108	; 0x6c
   1fc94:	d0f9      	beq.n	1fc8a <z_vprintk+0x190>
				} else if (length_mod == 'L') {
   1fc96:	f1b8 0f4c 	cmp.w	r8, #76	; 0x4c
   1fc9a:	d1f6      	bne.n	1fc8a <z_vprintk+0x190>
					if (llu > ~0UL) {
   1fc9c:	2100      	movs	r1, #0
   1fc9e:	f04f 30ff 	mov.w	r0, #4294967295
					unsigned long long llu =
   1fca2:	3407      	adds	r4, #7
   1fca4:	f024 0407 	bic.w	r4, r4, #7
   1fca8:	e8f4 2302 	ldrd	r2, r3, [r4], #8
					if (llu > ~0UL) {
   1fcac:	4299      	cmp	r1, r3
   1fcae:	bf08      	it	eq
   1fcb0:	4290      	cmpeq	r0, r2
   1fcb2:	d3cf      	bcc.n	1fc54 <z_vprintk+0x15a>
				_printk_dec_ulong(out, ctx, u, padding,
   1fcb4:	f8cd a000 	str.w	sl, [sp]
   1fcb8:	464b      	mov	r3, r9
   1fcba:	e7de      	b.n	1fc7a <z_vprintk+0x180>
				out('0', ctx);
   1fcbc:	4639      	mov	r1, r7
   1fcbe:	2030      	movs	r0, #48	; 0x30
   1fcc0:	47b0      	blx	r6
				out('x', ctx);
   1fcc2:	4639      	mov	r1, r7
   1fcc4:	2078      	movs	r0, #120	; 0x78
   1fcc6:	47b0      	blx	r6
					min_width = 8;
   1fcc8:	f04f 0a08 	mov.w	sl, #8
				padding = PAD_ZERO_BEFORE;
   1fccc:	f04f 0901 	mov.w	r9, #1
				if (*fmt == 'p') {
   1fcd0:	9b02      	ldr	r3, [sp, #8]
   1fcd2:	781b      	ldrb	r3, [r3, #0]
   1fcd4:	2b70      	cmp	r3, #112	; 0x70
   1fcd6:	d104      	bne.n	1fce2 <z_vprintk+0x1e8>
					x = va_arg(ap, unsigned int);
   1fcd8:	f854 3b04 	ldr.w	r3, [r4], #4
   1fcdc:	9304      	str	r3, [sp, #16]
   1fcde:	2300      	movs	r3, #0
   1fce0:	e00d      	b.n	1fcfe <z_vprintk+0x204>
				} else if (length_mod == 'l') {
   1fce2:	f1b8 0f6c 	cmp.w	r8, #108	; 0x6c
   1fce6:	d0f7      	beq.n	1fcd8 <z_vprintk+0x1de>
				} else if (length_mod == 'L') {
   1fce8:	f1b8 0f4c 	cmp.w	r8, #76	; 0x4c
   1fcec:	d1f4      	bne.n	1fcd8 <z_vprintk+0x1de>
					x = va_arg(ap, unsigned long long);
   1fcee:	3407      	adds	r4, #7
   1fcf0:	f024 0307 	bic.w	r3, r4, #7
   1fcf4:	461c      	mov	r4, r3
   1fcf6:	f854 2b08 	ldr.w	r2, [r4], #8
   1fcfa:	685b      	ldr	r3, [r3, #4]
   1fcfc:	9204      	str	r2, [sp, #16]
	int digits = 0;
   1fcfe:	2100      	movs	r1, #0
	int remaining = 16; /* 16 digits max */
   1fd00:	2210      	movs	r2, #16
	int shift = sizeof(num) * 8;
   1fd02:	f04f 0b40 	mov.w	fp, #64	; 0x40
	int digits = 0;
   1fd06:	9103      	str	r1, [sp, #12]
	int found_largest_digit = 0;
   1fd08:	9105      	str	r1, [sp, #20]
		shift -= 4;
   1fd0a:	f1ab 0b04 	sub.w	fp, fp, #4
		nibble = (num >> shift) & 0xf;
   1fd0e:	9804      	ldr	r0, [sp, #16]
   1fd10:	f1cb 0c20 	rsb	ip, fp, #32
   1fd14:	f1ab 0120 	sub.w	r1, fp, #32
   1fd18:	fa20 f00b 	lsr.w	r0, r0, fp
   1fd1c:	fa03 fc0c 	lsl.w	ip, r3, ip
   1fd20:	ea40 000c 	orr.w	r0, r0, ip
   1fd24:	fa23 f101 	lsr.w	r1, r3, r1
   1fd28:	4308      	orrs	r0, r1
		if (nibble != 0 || found_largest_digit != 0 || shift == 0) {
   1fd2a:	f010 000f 	ands.w	r0, r0, #15
   1fd2e:	d106      	bne.n	1fd3e <z_vprintk+0x244>
   1fd30:	9905      	ldr	r1, [sp, #20]
   1fd32:	b911      	cbnz	r1, 1fd3a <z_vprintk+0x240>
   1fd34:	f1bb 0f00 	cmp.w	fp, #0
   1fd38:	d122      	bne.n	1fd80 <z_vprintk+0x286>
			nibble += nibble > 9 ? 87 : 48;
   1fd3a:	2130      	movs	r1, #48	; 0x30
   1fd3c:	e003      	b.n	1fd46 <z_vprintk+0x24c>
   1fd3e:	2809      	cmp	r0, #9
   1fd40:	bf8c      	ite	hi
   1fd42:	2157      	movhi	r1, #87	; 0x57
   1fd44:	2130      	movls	r1, #48	; 0x30
   1fd46:	4408      	add	r0, r1
			out((int)nibble, ctx);
   1fd48:	b240      	sxtb	r0, r0
   1fd4a:	4639      	mov	r1, r7
   1fd4c:	9308      	str	r3, [sp, #32]
   1fd4e:	9205      	str	r2, [sp, #20]
   1fd50:	47b0      	blx	r6
			digits++;
   1fd52:	9b03      	ldr	r3, [sp, #12]
	while (shift >= 4) {
   1fd54:	9a05      	ldr	r2, [sp, #20]
			digits++;
   1fd56:	3301      	adds	r3, #1
   1fd58:	9303      	str	r3, [sp, #12]
	while (shift >= 4) {
   1fd5a:	9b08      	ldr	r3, [sp, #32]
   1fd5c:	f1bb 0f00 	cmp.w	fp, #0
   1fd60:	d123      	bne.n	1fdaa <z_vprintk+0x2b0>
	if (padding == PAD_SPACE_AFTER) {
   1fd62:	f1b9 0f03 	cmp.w	r9, #3
   1fd66:	f47f af79 	bne.w	1fc5c <z_vprintk+0x162>
		remaining = min_width * 2 - digits;
   1fd6a:	9b03      	ldr	r3, [sp, #12]
   1fd6c:	ebc3 054a 	rsb	r5, r3, sl, lsl #1
		while (remaining-- > 0) {
   1fd70:	2d00      	cmp	r5, #0
   1fd72:	f77f af73 	ble.w	1fc5c <z_vprintk+0x162>
			out(' ', ctx);
   1fd76:	4639      	mov	r1, r7
   1fd78:	2020      	movs	r0, #32
   1fd7a:	47b0      	blx	r6
   1fd7c:	3d01      	subs	r5, #1
   1fd7e:	e7f7      	b.n	1fd70 <z_vprintk+0x276>
		if (remaining-- <= min_width) {
   1fd80:	1e51      	subs	r1, r2, #1
   1fd82:	4592      	cmp	sl, r2
   1fd84:	9108      	str	r1, [sp, #32]
   1fd86:	db07      	blt.n	1fd98 <z_vprintk+0x29e>
			if (padding == PAD_ZERO_BEFORE) {
   1fd88:	f1b9 0f01 	cmp.w	r9, #1
   1fd8c:	d106      	bne.n	1fd9c <z_vprintk+0x2a2>
				out('0', ctx);
   1fd8e:	4639      	mov	r1, r7
   1fd90:	2030      	movs	r0, #48	; 0x30
   1fd92:	9309      	str	r3, [sp, #36]	; 0x24
				out(' ', ctx);
   1fd94:	47b0      	blx	r6
   1fd96:	9b09      	ldr	r3, [sp, #36]	; 0x24
			nibble += nibble > 9 ? 87 : 48;
   1fd98:	9a08      	ldr	r2, [sp, #32]
   1fd9a:	e7b6      	b.n	1fd0a <z_vprintk+0x210>
			} else if (padding == PAD_SPACE_BEFORE) {
   1fd9c:	f1b9 0f02 	cmp.w	r9, #2
   1fda0:	d1fa      	bne.n	1fd98 <z_vprintk+0x29e>
   1fda2:	9309      	str	r3, [sp, #36]	; 0x24
				out(' ', ctx);
   1fda4:	4639      	mov	r1, r7
   1fda6:	2020      	movs	r0, #32
   1fda8:	e7f4      	b.n	1fd94 <z_vprintk+0x29a>
			found_largest_digit = 1;
   1fdaa:	9505      	str	r5, [sp, #20]
   1fdac:	e7ad      	b.n	1fd0a <z_vprintk+0x210>
					out((int)(*s++), ctx);
   1fdae:	4639      	mov	r1, r7
   1fdb0:	47b0      	blx	r6
   1fdb2:	e6fa      	b.n	1fbaa <z_vprintk+0xb0>
				out(c, ctx);
   1fdb4:	4639      	mov	r1, r7
   1fdb6:	f854 0b04 	ldr.w	r0, [r4], #4
				out((int)'%', ctx);
   1fdba:	47b0      	blx	r6
   1fdbc:	e74e      	b.n	1fc5c <z_vprintk+0x162>
				length_mod = 0;
   1fdbe:	46a8      	mov	r8, r5
				padding = PAD_NONE;
   1fdc0:	46a9      	mov	r9, r5
				min_width = -1;
   1fdc2:	f04f 3aff 	mov.w	sl, #4294967295
				might_format = 1;
   1fdc6:	2501      	movs	r5, #1
   1fdc8:	e6b0      	b.n	1fb2c <z_vprintk+0x32>
				padding = PAD_SPACE_AFTER;
   1fdca:	f04f 0903 	mov.w	r9, #3
   1fdce:	e6ad      	b.n	1fb2c <z_vprintk+0x32>
					padding = PAD_ZERO_BEFORE;
   1fdd0:	f04f 0901 	mov.w	r9, #1
   1fdd4:	e6aa      	b.n	1fb2c <z_vprintk+0x32>
			might_format = 0;
   1fdd6:	4605      	mov	r5, r0
   1fdd8:	e6a8      	b.n	1fb2c <z_vprintk+0x32>

0001fdda <printk>:
{
   1fdda:	b40f      	push	{r0, r1, r2, r3}
   1fddc:	b507      	push	{r0, r1, r2, lr}
   1fdde:	a904      	add	r1, sp, #16
   1fde0:	f851 0b04 	ldr.w	r0, [r1], #4
	va_start(ap, fmt);
   1fde4:	9101      	str	r1, [sp, #4]
		vprintk(fmt, ap);
   1fde6:	f7ee f9c5 	bl	e174 <vprintk>
}
   1fdea:	b003      	add	sp, #12
   1fdec:	f85d eb04 	ldr.w	lr, [sp], #4
   1fdf0:	b004      	add	sp, #16
   1fdf2:	4770      	bx	lr

0001fdf4 <sys_sem_give>:

	return 0;
}

int sys_sem_give(struct sys_sem *sem)
{
   1fdf4:	b508      	push	{r3, lr}
	z_impl_k_sem_give(sem);
   1fdf6:	f7fd f93d 	bl	1d074 <z_impl_k_sem_give>
	k_sem_give(&sem->kernel_sem);

	return 0;
}
   1fdfa:	2000      	movs	r0, #0
   1fdfc:	bd08      	pop	{r3, pc}

0001fdfe <sys_sem_take>:

int sys_sem_take(struct sys_sem *sem, s32_t timeout)
{
   1fdfe:	b508      	push	{r3, lr}
	return z_impl_k_sem_take(sem, timeout);
   1fe00:	f7fd f982 	bl	1d108 <z_impl_k_sem_take>
	int ret_value = 0;

	ret_value = k_sem_take(&sem->kernel_sem, timeout);
	if (ret_value == -EAGAIN || ret_value == -EBUSY) {
   1fe04:	f110 0f0b 	cmn.w	r0, #11
   1fe08:	d005      	beq.n	1fe16 <sys_sem_take+0x18>
   1fe0a:	f110 0f10 	cmn.w	r0, #16
		ret_value = -ETIMEDOUT;
   1fe0e:	bf08      	it	eq
   1fe10:	f06f 0073 	mvneq.w	r0, #115	; 0x73
	}

	return ret_value;
}
   1fe14:	bd08      	pop	{r3, pc}
		ret_value = -ETIMEDOUT;
   1fe16:	f06f 0073 	mvn.w	r0, #115	; 0x73
	return ret_value;
   1fe1a:	e7fb      	b.n	1fe14 <sys_sem_take+0x16>

0001fe1c <z_thread_entry>:
 * This routine does not return, and is marked as such so the compiler won't
 * generate preamble code that is only used by functions that actually return.
 */
FUNC_NORETURN void z_thread_entry(k_thread_entry_t entry,
				 void *p1, void *p2, void *p3)
{
   1fe1c:	4604      	mov	r4, r0
   1fe1e:	b508      	push	{r3, lr}
   1fe20:	4608      	mov	r0, r1
   1fe22:	4611      	mov	r1, r2
	entry(p1, p2, p3);
   1fe24:	461a      	mov	r2, r3
   1fe26:	47a0      	blx	r4
	return z_impl_k_current_get();
   1fe28:	f7fd f91e 	bl	1d068 <z_impl_k_current_get>
	z_impl_k_thread_abort(thread);
   1fe2c:	f7ef fd78 	bl	f920 <z_impl_k_thread_abort>

0001fe30 <z_work_q_main>:

#include <kernel.h>
#define WORKQUEUE_THREAD_NAME	"workqueue"

void z_work_q_main(void *work_q_ptr, void *p2, void *p3)
{
   1fe30:	b510      	push	{r4, lr}
   1fe32:	4604      	mov	r4, r0
	return z_impl_k_queue_get(queue, timeout);
   1fe34:	f04f 31ff 	mov.w	r1, #4294967295
   1fe38:	4620      	mov	r0, r4
   1fe3a:	f7fb ff2d 	bl	1bc98 <z_impl_k_queue_get>
	while (true) {
		struct k_work *work;
		k_work_handler_t handler;

		work = k_queue_get(&work_q->queue, K_FOREVER);
		if (work == NULL) {
   1fe3e:	4603      	mov	r3, r0
   1fe40:	2800      	cmp	r0, #0
   1fe42:	d0f7      	beq.n	1fe34 <z_work_q_main+0x4>
			continue;
		}

		handler = work->handler;
   1fe44:	6842      	ldr	r2, [r0, #4]
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   1fe46:	3308      	adds	r3, #8
   1fe48:	e8d3 1fef 	ldaex	r1, [r3]
   1fe4c:	f021 0c01 	bic.w	ip, r1, #1
   1fe50:	e8c3 cfee 	stlex	lr, ip, [r3]
   1fe54:	f1be 0f00 	cmp.w	lr, #0
   1fe58:	d1f6      	bne.n	1fe48 <z_work_q_main+0x18>

		/* Reset pending state so it can be resubmitted by handler */
		if (atomic_test_and_clear_bit(work->flags,
   1fe5a:	07cb      	lsls	r3, r1, #31
   1fe5c:	d500      	bpl.n	1fe60 <z_work_q_main+0x30>
					      K_WORK_STATE_PENDING)) {
			handler(work);
   1fe5e:	4790      	blx	r2
	z_impl_k_yield();
   1fe60:	f7fc ff84 	bl	1cd6c <z_impl_k_yield>
   1fe64:	e7e6      	b.n	1fe34 <z_work_q_main+0x4>

0001fe66 <assert_post_action>:
	if (_is_user_context()) {
		k_oops();
	}
#endif

	k_panic();
   1fe66:	4040      	eors	r0, r0
   1fe68:	f380 8811 	msr	BASEPRI, r0
   1fe6c:	f04f 0004 	mov.w	r0, #4
   1fe70:	df02      	svc	2
}
   1fe72:	4770      	bx	lr

0001fe74 <_ConfigAbsSyms>:
GEN_ABSOLUTE_SYM(CONFIG_OUTPUT_PRINT_MEMORY_USAGE, 1);
GEN_ABSOLUTE_SYM(CONFIG_BUILD_OUTPUT_BIN, 1);
GEN_ABSOLUTE_SYM(CONFIG_REBOOT, 1);
GEN_ABSOLUTE_SYM(CONFIG_COMPAT_INCLUDES, 1);

GEN_ABS_SYM_END
   1fe74:	4770      	bx	lr

0001fe76 <z_platform_init>:
	nrfx_coredep_delay_us(time_us);
}

void z_platform_init(void)
{
	SystemInit();
   1fe76:	f7fa bfd3 	b.w	1ae20 <SystemInit>

0001fe7a <log_backend_is_active>:
 */
static inline bool log_backend_is_active(
				const struct log_backend *const backend)
{
	__ASSERT_NO_MSG(backend != NULL);
	return backend->cb->active;
   1fe7a:	6843      	ldr	r3, [r0, #4]
}
   1fe7c:	7958      	ldrb	r0, [r3, #5]
   1fe7e:	4770      	bx	lr

0001fe80 <k_cycle_get_32_wrapper>:
   1fe80:	f7ee bf9a 	b.w	edb8 <z_timer_cycle_get_32>

0001fe84 <dummy_timestamp>:
   1fe84:	2000      	movs	r0, #0
   1fe86:	4770      	bx	lr

0001fe88 <log_string_sync>:
{
   1fe88:	b40e      	push	{r1, r2, r3}
   1fe8a:	b503      	push	{r0, r1, lr}
   1fe8c:	aa03      	add	r2, sp, #12
   1fe8e:	f852 1b04 	ldr.w	r1, [r2], #4
	va_start(ap, fmt);
   1fe92:	9201      	str	r2, [sp, #4]
	log_generic(src_level, fmt, ap);
   1fe94:	f7ee f990 	bl	e1b8 <log_generic>
}
   1fe98:	b002      	add	sp, #8
   1fe9a:	f85d eb04 	ldr.w	lr, [sp], #4
   1fe9e:	b003      	add	sp, #12
   1fea0:	4770      	bx	lr

0001fea2 <enable_logger>:

K_THREAD_STACK_DEFINE(logging_stack, CONFIG_LOG_PROCESS_THREAD_STACK_SIZE);
struct k_thread logging_thread;

static int enable_logger(struct device *arg)
{
   1fea2:	b508      	push	{r3, lr}
				K_THREAD_STACK_SIZEOF(logging_stack),
				log_process_thread_func, NULL, NULL, NULL,
				K_LOWEST_APPLICATION_THREAD_PRIO, 0, K_NO_WAIT);
		k_thread_name_set(&logging_thread, "logging");
	} else {
		log_init();
   1fea4:	f7ee f9fe 	bl	e2a4 <log_init>
	}

	return 0;
}
   1fea8:	2000      	movs	r0, #0
   1feaa:	bd08      	pop	{r3, pc}

0001feac <log_strdup>:
}
   1feac:	4770      	bx	lr

0001feae <out_func>:
{
   1feae:	b507      	push	{r0, r1, r2, lr}
		out_ctx->func((u8_t *)&c, 1, out_ctx->control_block->ctx);
   1feb0:	e9d1 3200 	ldrd	r3, r2, [r1]
{
   1feb4:	9001      	str	r0, [sp, #4]
		out_ctx->func((u8_t *)&c, 1, out_ctx->control_block->ctx);
   1feb6:	6852      	ldr	r2, [r2, #4]
   1feb8:	2101      	movs	r1, #1
   1feba:	a801      	add	r0, sp, #4
   1febc:	4798      	blx	r3
}
   1febe:	2000      	movs	r0, #0
   1fec0:	b003      	add	sp, #12
   1fec2:	f85d fb04 	ldr.w	pc, [sp], #4

0001fec6 <buffer_write>:
{
   1fec6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1fec8:	4606      	mov	r6, r0
   1feca:	460d      	mov	r5, r1
   1fecc:	4614      	mov	r4, r2
   1fece:	461f      	mov	r7, r3
		processed = outf(buf, len, ctx);
   1fed0:	4621      	mov	r1, r4
   1fed2:	4628      	mov	r0, r5
   1fed4:	463a      	mov	r2, r7
   1fed6:	47b0      	blx	r6
	} while (len != 0);
   1fed8:	1a24      	subs	r4, r4, r0
		buf += processed;
   1feda:	4405      	add	r5, r0
	} while (len != 0);
   1fedc:	d1f8      	bne.n	1fed0 <buffer_write+0xa>
}
   1fede:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0001fee0 <log_output_flush>:
		     log_output->control_block->offset,
   1fee0:	6842      	ldr	r2, [r0, #4]
{
   1fee2:	b510      	push	{r4, lr}
	buffer_write(log_output->func, log_output->buf,
   1fee4:	e9d2 2300 	ldrd	r2, r3, [r2]
{
   1fee8:	4604      	mov	r4, r0
	buffer_write(log_output->func, log_output->buf,
   1feea:	6881      	ldr	r1, [r0, #8]
   1feec:	6800      	ldr	r0, [r0, #0]
   1feee:	f7ff ffea 	bl	1fec6 <buffer_write>
	log_output->control_block->offset = 0;
   1fef2:	2200      	movs	r2, #0
   1fef4:	6863      	ldr	r3, [r4, #4]
   1fef6:	601a      	str	r2, [r3, #0]
}
   1fef8:	bd10      	pop	{r4, pc}

0001fefa <char_out>:
{
   1fefa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1fefc:	460d      	mov	r5, r1
   1fefe:	4616      	mov	r6, r2
	for (size_t i = 0; i < length; i++) {
   1ff00:	4604      	mov	r4, r0
   1ff02:	1847      	adds	r7, r0, r1
   1ff04:	42bc      	cmp	r4, r7
   1ff06:	d101      	bne.n	1ff0c <char_out+0x12>
}
   1ff08:	4628      	mov	r0, r5
   1ff0a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		uart_poll_out(dev, data[i]);
   1ff0c:	f814 1b01 	ldrb.w	r1, [r4], #1
	api->poll_out(dev, out_char);
   1ff10:	6873      	ldr	r3, [r6, #4]
   1ff12:	4630      	mov	r0, r6
   1ff14:	685b      	ldr	r3, [r3, #4]
   1ff16:	4798      	blx	r3
   1ff18:	e7f4      	b.n	1ff04 <char_out+0xa>

0001ff1a <uart_poll_out>:
   1ff1a:	6843      	ldr	r3, [r0, #4]
   1ff1c:	685b      	ldr	r3, [r3, #4]
   1ff1e:	4718      	bx	r3

0001ff20 <debug_hook_out_nop>:
}
   1ff20:	2000      	movs	r0, #0
   1ff22:	4770      	bx	lr

0001ff24 <clkstarted_handle>:
{
   1ff24:	b538      	push	{r3, r4, r5, lr}
	sub_data->started = true;
   1ff26:	240c      	movs	r4, #12
	struct nrf_clock_control_sub_data *sub_data = get_sub_data(dev, type);
   1ff28:	6883      	ldr	r3, [r0, #8]
{
   1ff2a:	4605      	mov	r5, r0
	sub_data->started = true;
   1ff2c:	fb04 3401 	mla	r4, r4, r1, r3
   1ff30:	2301      	movs	r3, #1
   1ff32:	7263      	strb	r3, [r4, #9]
	__asm__ volatile(
   1ff34:	f04f 0320 	mov.w	r3, #32
   1ff38:	f3ef 8111 	mrs	r1, BASEPRI
   1ff3c:	f383 8811 	msr	BASEPRI, r3
   1ff40:	f3bf 8f6f 	isb	sy
Z_GENLIST_IS_EMPTY(slist)
   1ff44:	6823      	ldr	r3, [r4, #0]
Z_GENLIST_GET(slist, snode)
   1ff46:	b12b      	cbz	r3, 1ff54 <clkstarted_handle+0x30>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   1ff48:	6860      	ldr	r0, [r4, #4]
   1ff4a:	681a      	ldr	r2, [r3, #0]
   1ff4c:	4283      	cmp	r3, r0
	list->head = node;
   1ff4e:	6022      	str	r2, [r4, #0]
	list->tail = node;
   1ff50:	bf08      	it	eq
   1ff52:	6062      	streq	r2, [r4, #4]
	__asm__ volatile(
   1ff54:	f381 8811 	msr	BASEPRI, r1
   1ff58:	f3bf 8f6f 	isb	sy
	while ((async_data = list_get(&sub_data->list)) != NULL) {
   1ff5c:	b903      	cbnz	r3, 1ff60 <clkstarted_handle+0x3c>
}
   1ff5e:	bd38      	pop	{r3, r4, r5, pc}
		async_data->cb(dev, async_data->user_data);
   1ff60:	e9d3 2101 	ldrd	r2, r1, [r3, #4]
   1ff64:	4628      	mov	r0, r5
   1ff66:	4790      	blx	r2
   1ff68:	e7e4      	b.n	1ff34 <clkstarted_handle+0x10>

0001ff6a <clock_start>:
	return clock_async_start(dev, sub_system, NULL);
   1ff6a:	2200      	movs	r2, #0
   1ff6c:	f7ee bc7a 	b.w	e864 <clock_async_start>

0001ff70 <z_clock_idle_exit>:
{
}

void __weak z_clock_idle_exit(void)
{
}
   1ff70:	4770      	bx	lr

0001ff72 <z_irq_spurious>:
	z_arm_reserved();
   1ff72:	f7ee bff5 	b.w	ef60 <z_arm_bus_fault>

0001ff76 <z_do_kernel_oops>:
 *   fault handler will executed insted of the SVC.
 *
 * @param esf exception frame
 */
void z_do_kernel_oops(const z_arch_esf_t *esf)
{
   1ff76:	4601      	mov	r1, r0
			reason = K_ERR_KERNEL_OOPS;
		}
	}

#endif /* CONFIG_USERSPACE */
	z_arm_fatal_error(reason, esf);
   1ff78:	6800      	ldr	r0, [r0, #0]
   1ff7a:	f7ef b905 	b.w	f188 <z_arm_fatal_error>

0001ff7e <z_arm_nmi>:
 *
 * @return N/A
 */

void z_arm_nmi(void)
{
   1ff7e:	b508      	push	{r3, lr}
	handler();
   1ff80:	f7ee fff8 	bl	ef74 <z_SysNmiOnReset>
	z_arm_exc_exit();
}
   1ff84:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_arm_exc_exit();
   1ff88:	f7ee bf68 	b.w	ee5c <z_arm_exc_exit>

0001ff8c <z_arm_configure_dynamic_mpu_regions>:
 *
 * For some MPU architectures, such as the unmodified ARMv8-M MPU,
 * the function must execute with MPU enabled.
 */
void z_arm_configure_dynamic_mpu_regions(struct k_thread *thread)
{
   1ff8c:	b507      	push	{r0, r1, r2, lr}

	region_num++;
#endif /* CONFIG_MPU_STACK_GUARD */

	/* Configure the dynamic MPU regions */
	arm_core_mpu_configure_dynamic_mpu_regions(
   1ff8e:	2100      	movs	r1, #0
   1ff90:	a801      	add	r0, sp, #4
   1ff92:	f7ef ff23 	bl	fddc <arm_core_mpu_configure_dynamic_mpu_regions>
		(const struct k_mem_partition **)dynamic_regions,
		region_num);
}
   1ff96:	b003      	add	sp, #12
   1ff98:	f85d fb04 	ldr.w	pc, [sp], #4

0001ff9c <mpu_configure_region>:
{
   1ff9c:	b530      	push	{r4, r5, lr}
	get_region_attr_from_k_mem_partition_info(&region_conf.attr,
   1ff9e:	684b      	ldr	r3, [r1, #4]
{
   1ffa0:	b085      	sub	sp, #20
	region_conf.base = new_region->start;
   1ffa2:	680c      	ldr	r4, [r1, #0]
	p_attr->rbar = attr->rbar &
   1ffa4:	f89d 2008 	ldrb.w	r2, [sp, #8]
   1ffa8:	890d      	ldrh	r5, [r1, #8]
   1ffaa:	9400      	str	r4, [sp, #0]
	p_attr->mair_idx = attr->mair_idx;
   1ffac:	8949      	ldrh	r1, [r1, #10]
	p_attr->r_limit = REGION_LIMIT_ADDR(base, size);
   1ffae:	f024 041f 	bic.w	r4, r4, #31
   1ffb2:	3b01      	subs	r3, #1
	p_attr->rbar = attr->rbar &
   1ffb4:	f365 0204 	bfi	r2, r5, #0, #5
	p_attr->r_limit = REGION_LIMIT_ADDR(base, size);
   1ffb8:	4423      	add	r3, r4
	p_attr->mair_idx = attr->mair_idx;
   1ffba:	f361 1247 	bfi	r2, r1, #5, #3
	p_attr->r_limit = REGION_LIMIT_ADDR(base, size);
   1ffbe:	f023 031f 	bic.w	r3, r3, #31
	return region_allocate_and_init(index,
   1ffc2:	4669      	mov	r1, sp
	p_attr->mair_idx = attr->mair_idx;
   1ffc4:	f88d 2008 	strb.w	r2, [sp, #8]
	p_attr->r_limit = REGION_LIMIT_ADDR(base, size);
   1ffc8:	9303      	str	r3, [sp, #12]
   1ffca:	f7ef fd29 	bl	fa20 <region_allocate_and_init>
}
   1ffce:	b005      	add	sp, #20
   1ffd0:	bd30      	pop	{r4, r5, pc}

0001ffd2 <arm_cmse_mpu_region_get>:
__CMSE_TT_ASM ()

__extension__ static __inline __attribute__ ((__always_inline__))
cmse_address_info_t
cmse_TT (void *__p)
__CMSE_TT_ASM ()
   1ffd2:	e840 f300 	tt	r3, r0

int arm_cmse_mpu_region_get(u32_t addr)
{
	cmse_address_info_t addr_info =	cmse_TT((void *)addr);

	if (addr_info.flags.mpu_region_valid) {
   1ffd6:	f413 3f80 	tst.w	r3, #65536	; 0x10000
   1ffda:	b2d8      	uxtb	r0, r3
		return addr_info.flags.mpu_region;
	}

	return -EINVAL;
}
   1ffdc:	bf08      	it	eq
   1ffde:	f06f 0015 	mvneq.w	r0, #21
   1ffe2:	4770      	bx	lr

0001ffe4 <_stdout_hook_default>:
}
   1ffe4:	f04f 30ff 	mov.w	r0, #4294967295
   1ffe8:	4770      	bx	lr

0001ffea <_stdin_hook_default>:
}
   1ffea:	2000      	movs	r0, #0
   1ffec:	4770      	bx	lr

0001ffee <_read>:
{
   1ffee:	4608      	mov	r0, r1
	return z_impl_zephyr_read_stdin(buf, nbytes);
   1fff0:	4611      	mov	r1, r2
   1fff2:	f7ef bf35 	b.w	fe60 <z_impl_zephyr_read_stdin>

0001fff6 <_write>:
{
   1fff6:	4608      	mov	r0, r1
	return z_impl_zephyr_write_stdout(buf, nbytes);
   1fff8:	4611      	mov	r1, r2
   1fffa:	f7ef bf45 	b.w	fe88 <z_impl_zephyr_write_stdout>

0001fffe <_close>:
   1fffe:	f04f 30ff 	mov.w	r0, #4294967295
   20002:	4770      	bx	lr

00020004 <_lseek>:
}
   20004:	2000      	movs	r0, #0
   20006:	4770      	bx	lr

00020008 <_isatty>:
}
   20008:	2001      	movs	r0, #1
   2000a:	4770      	bx	lr

0002000c <_kill>:
}
   2000c:	2000      	movs	r0, #0
   2000e:	4770      	bx	lr

00020010 <_getpid>:
}
   20010:	2000      	movs	r0, #0
   20012:	4770      	bx	lr

00020014 <_fstat>:
	st->st_mode = S_IFCHR;
   20014:	f44f 5300 	mov.w	r3, #8192	; 0x2000
}
   20018:	2000      	movs	r0, #0
	st->st_mode = S_IFCHR;
   2001a:	604b      	str	r3, [r1, #4]
}
   2001c:	4770      	bx	lr

0002001e <__errno>:
	if (z_syscall_trap()) {
		return (int *) arch_syscall_invoke0(K_SYSCALL_Z_ERRNO);
	}
#endif
	compiler_barrier();
	return z_impl_z_errno();
   2001e:	f7fa bf51 	b.w	1aec4 <z_impl_z_errno>

00020022 <net_init>:

	return status;
}

static int net_init(struct device *unused)
{
   20022:	b508      	push	{r3, lr}
	net_if_init();
   20024:	f7ef fff8 	bl	10018 <net_if_init>
	net_if_post_init();
   20028:	f7f0 f80a 	bl	10040 <net_if_post_init>
	net_mgmt_event_init();

	init_rx_queues();

	return services_init();
}
   2002c:	2000      	movs	r0, #0
   2002e:	bd08      	pop	{r3, pc}

00020030 <net_if_l2>:
	if (!iface || !iface->if_dev) {
   20030:	b110      	cbz	r0, 20038 <net_if_l2+0x8>
   20032:	6800      	ldr	r0, [r0, #0]
   20034:	b100      	cbz	r0, 20038 <net_if_l2+0x8>
	return iface->if_dev->l2;
   20036:	6840      	ldr	r0, [r0, #4]
}
   20038:	4770      	bx	lr

0002003a <l2_flags_get>:
{
   2003a:	b510      	push	{r4, lr}
   2003c:	4602      	mov	r2, r0
	if (net_if_l2(iface) && net_if_l2(iface)->get_flags) {
   2003e:	f7ff fff7 	bl	20030 <net_if_l2>
   20042:	b128      	cbz	r0, 20050 <l2_flags_get+0x16>
   20044:	68c3      	ldr	r3, [r0, #12]
   20046:	b11b      	cbz	r3, 20050 <l2_flags_get+0x16>
}
   20048:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		flags = net_if_l2(iface)->get_flags(iface);
   2004c:	4610      	mov	r0, r2
   2004e:	4718      	bx	r3
}
   20050:	2000      	movs	r0, #0
   20052:	bd10      	pop	{r4, pc}

00020054 <net_byte_to_hex>:
{
   20054:	b570      	push	{r4, r5, r6, lr}
	for (i = 0, val = (byte & 0xf0) >> 4; i < 2; i++, val = byte & 0x0f) {
   20056:	090e      	lsrs	r6, r1, #4
		if (i == 0 && !pad && !val) {
   20058:	b1b3      	cbz	r3, 20088 <net_byte_to_hex+0x34>
		if (val < 10) {
   2005a:	2e09      	cmp	r6, #9
			*ptr++ = (char) (val - 10 + base);
   2005c:	b274      	sxtb	r4, r6
   2005e:	bf86      	itte	hi
   20060:	f1a2 030a 	subhi.w	r3, r2, #10
   20064:	18e4      	addhi	r4, r4, r3
			*ptr++ = (char) (val + '0');
   20066:	3430      	addls	r4, #48	; 0x30
   20068:	1c45      	adds	r5, r0, #1
   2006a:	7004      	strb	r4, [r0, #0]
   2006c:	f001 010f 	and.w	r1, r1, #15
		if (val < 10) {
   20070:	2909      	cmp	r1, #9
			*ptr++ = (char) (val - 10 + base);
   20072:	b24b      	sxtb	r3, r1
   20074:	bf83      	ittte	hi
   20076:	3a0a      	subhi	r2, #10
   20078:	189b      	addhi	r3, r3, r2
   2007a:	b2db      	uxtbhi	r3, r3
			*ptr++ = (char) (val + '0');
   2007c:	3330      	addls	r3, #48	; 0x30
   2007e:	702b      	strb	r3, [r5, #0]
	*ptr = '\0';
   20080:	2300      	movs	r3, #0
   20082:	706b      	strb	r3, [r5, #1]
   20084:	1c68      	adds	r0, r5, #1
}
   20086:	bd70      	pop	{r4, r5, r6, pc}
		if (i == 0 && !pad && !val) {
   20088:	2e00      	cmp	r6, #0
   2008a:	d1e6      	bne.n	2005a <net_byte_to_hex+0x6>
   2008c:	4605      	mov	r5, r0
   2008e:	e7ed      	b.n	2006c <net_byte_to_hex+0x18>

00020090 <unpack_uint16>:
 */
static int unpack_uint16(struct buf_ctx *buf, u16_t *val)
{
	MQTT_TRC(">> cur:%p, end:%p", buf->cur, buf->end);

	if ((buf->end - buf->cur) < sizeof(u16_t)) {
   20090:	e9d0 2300 	ldrd	r2, r3, [r0]
   20094:	1a9b      	subs	r3, r3, r2
   20096:	2b01      	cmp	r3, #1
{
   20098:	b510      	push	{r4, lr}
	if ((buf->end - buf->cur) < sizeof(u16_t)) {
   2009a:	d90c      	bls.n	200b6 <unpack_uint16+0x26>
		return -EINVAL;
	}

	*val = *(buf->cur++) << 8; /* MSB */
   2009c:	4614      	mov	r4, r2
   2009e:	1c53      	adds	r3, r2, #1
   200a0:	6003      	str	r3, [r0, #0]
   200a2:	f814 3b02 	ldrb.w	r3, [r4], #2
   200a6:	021b      	lsls	r3, r3, #8
   200a8:	800b      	strh	r3, [r1, #0]
	*val |= *(buf->cur++); /* LSB */
   200aa:	6004      	str	r4, [r0, #0]

	MQTT_TRC("<< val:%04x", *val);

	return 0;
   200ac:	2000      	movs	r0, #0
	*val |= *(buf->cur++); /* LSB */
   200ae:	7852      	ldrb	r2, [r2, #1]
   200b0:	4313      	orrs	r3, r2
   200b2:	800b      	strh	r3, [r1, #0]
}
   200b4:	bd10      	pop	{r4, pc}
		return -EINVAL;
   200b6:	f06f 0015 	mvn.w	r0, #21
   200ba:	e7fb      	b.n	200b4 <unpack_uint16+0x24>

000200bc <packet_length_decode>:
int packet_length_decode(struct buf_ctx *buf, u32_t *length)
{
	u8_t shift = 0U;
	u8_t bytes = 0U;

	*length = 0U;
   200bc:	2300      	movs	r3, #0
{
   200be:	b5f0      	push	{r4, r5, r6, r7, lr}
	do {
		if (bytes > MQTT_MAX_LENGTH_BYTES) {
			return -EINVAL;
		}

		if (buf->cur >= buf->end) {
   200c0:	6847      	ldr	r7, [r0, #4]
	*length = 0U;
   200c2:	600b      	str	r3, [r1, #0]
		if (buf->cur >= buf->end) {
   200c4:	6804      	ldr	r4, [r0, #0]
   200c6:	42bc      	cmp	r4, r7
   200c8:	d215      	bcs.n	200f6 <packet_length_decode+0x3a>
			return -EAGAIN;
		}

		*length += ((u32_t)*(buf->cur) & MQTT_LENGTH_VALUE_MASK)
   200ca:	4625      	mov	r5, r4
   200cc:	f815 2b01 	ldrb.w	r2, [r5], #1
   200d0:	680e      	ldr	r6, [r1, #0]
   200d2:	f002 027f 	and.w	r2, r2, #127	; 0x7f
								<< shift;
   200d6:	409a      	lsls	r2, r3
		*length += ((u32_t)*(buf->cur) & MQTT_LENGTH_VALUE_MASK)
   200d8:	4432      	add	r2, r6
   200da:	600a      	str	r2, [r1, #0]
		shift += MQTT_LENGTH_SHIFT;
		bytes++;
	} while ((*(buf->cur++) & MQTT_LENGTH_CONTINUATION_BIT) != 0U);
   200dc:	6005      	str	r5, [r0, #0]
   200de:	f994 2000 	ldrsb.w	r2, [r4]
   200e2:	2a00      	cmp	r2, #0
   200e4:	db01      	blt.n	200ea <packet_length_decode+0x2e>

	MQTT_TRC("length:0x%08x", *length);

	return 0;
   200e6:	2000      	movs	r0, #0
}
   200e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (bytes > MQTT_MAX_LENGTH_BYTES) {
   200ea:	3307      	adds	r3, #7
   200ec:	2b23      	cmp	r3, #35	; 0x23
   200ee:	d1e9      	bne.n	200c4 <packet_length_decode+0x8>
			return -EINVAL;
   200f0:	f06f 0015 	mvn.w	r0, #21
   200f4:	e7f8      	b.n	200e8 <packet_length_decode+0x2c>
			return -EAGAIN;
   200f6:	f06f 000a 	mvn.w	r0, #10
   200fa:	e7f5      	b.n	200e8 <packet_length_decode+0x2c>

000200fc <fixed_header_decode>:

int fixed_header_decode(struct buf_ctx *buf, u8_t *type_and_flags,
			u32_t *length)
{
   200fc:	b430      	push	{r4, r5}
	if ((buf->end - buf->cur) < sizeof(u8_t)) {
   200fe:	e9d0 3500 	ldrd	r3, r5, [r0]
   20102:	429d      	cmp	r5, r3
   20104:	d007      	beq.n	20116 <fixed_header_decode+0x1a>
	*val = *(buf->cur++);
   20106:	1c5d      	adds	r5, r3, #1
   20108:	6005      	str	r5, [r0, #0]
   2010a:	781b      	ldrb	r3, [r3, #0]
   2010c:	700b      	strb	r3, [r1, #0]
	if (err_code != 0) {
		return err_code;
	}

	return packet_length_decode(buf, length);
}
   2010e:	bc30      	pop	{r4, r5}
	return packet_length_decode(buf, length);
   20110:	4611      	mov	r1, r2
   20112:	f7ff bfd3 	b.w	200bc <packet_length_decode>
}
   20116:	f06f 0015 	mvn.w	r0, #21
   2011a:	bc30      	pop	{r4, r5}
   2011c:	4770      	bx	lr

0002011e <connect_ack_decode>:

int connect_ack_decode(const struct mqtt_client *client, struct buf_ctx *buf,
		       struct mqtt_connack_param *param)
{
   2011e:	b530      	push	{r4, r5, lr}
	if ((buf->end - buf->cur) < sizeof(u8_t)) {
   20120:	e9d1 3500 	ldrd	r3, r5, [r1]
   20124:	429d      	cmp	r5, r3
   20126:	d102      	bne.n	2012e <connect_ack_decode+0x10>
		return -EINVAL;
   20128:	f06f 0015 	mvn.w	r0, #21
	}

	param->return_code = (enum mqtt_conn_return_code)ret_code;

	return 0;
}
   2012c:	bd30      	pop	{r4, r5, pc}
	*val = *(buf->cur++);
   2012e:	1c5c      	adds	r4, r3, #1
	if ((buf->end - buf->cur) < sizeof(u8_t)) {
   20130:	42a5      	cmp	r5, r4
	*val = *(buf->cur++);
   20132:	600c      	str	r4, [r1, #0]
	if ((buf->end - buf->cur) < sizeof(u8_t)) {
   20134:	d0f8      	beq.n	20128 <connect_ack_decode+0xa>
	*val = *(buf->cur++);
   20136:	461d      	mov	r5, r3
   20138:	f815 4b02 	ldrb.w	r4, [r5], #2
   2013c:	600d      	str	r5, [r1, #0]
	if (client->protocol_version == MQTT_VERSION_3_1_1) {
   2013e:	f890 105e 	ldrb.w	r1, [r0, #94]	; 0x5e
	*val = *(buf->cur++);
   20142:	785b      	ldrb	r3, [r3, #1]
	if (client->protocol_version == MQTT_VERSION_3_1_1) {
   20144:	2904      	cmp	r1, #4
			flags & MQTT_CONNACK_FLAG_SESSION_PRESENT;
   20146:	bf04      	itt	eq
   20148:	f004 0401 	andeq.w	r4, r4, #1
		param->session_present_flag =
   2014c:	7014      	strbeq	r4, [r2, #0]
	param->return_code = (enum mqtt_conn_return_code)ret_code;
   2014e:	7053      	strb	r3, [r2, #1]
	return 0;
   20150:	2000      	movs	r0, #0
   20152:	e7eb      	b.n	2012c <connect_ack_decode+0xe>

00020154 <publish_decode>:

int publish_decode(u8_t flags, u32_t var_length, struct buf_ctx *buf,
		   struct mqtt_publish_param *param)
{
   20154:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   20158:	461c      	mov	r4, r3
	int err_code;
	u32_t var_header_length;

	param->dup_flag = flags & MQTT_HEADER_DUP_MASK;
   2015a:	7d9b      	ldrb	r3, [r3, #22]
{
   2015c:	4688      	mov	r8, r1
	param->retain_flag = flags & MQTT_HEADER_RETAIN_MASK;
   2015e:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
   20162:	f360 0341 	bfi	r3, r0, #1, #1
	param->message.topic.qos = ((flags & MQTT_HEADER_QOS_MASK) >> 1);
   20166:	f3c0 0041 	ubfx	r0, r0, #1, #2
   2016a:	7220      	strb	r0, [r4, #8]
	param->retain_flag = flags & MQTT_HEADER_RETAIN_MASK;
   2016c:	75a3      	strb	r3, [r4, #22]
	err_code = unpack_uint16(buf, &utf8_strlen);
   2016e:	f10d 0106 	add.w	r1, sp, #6
   20172:	4610      	mov	r0, r2
{
   20174:	4616      	mov	r6, r2
	err_code = unpack_uint16(buf, &utf8_strlen);
   20176:	f7ff ff8b 	bl	20090 <unpack_uint16>
	if (err_code != 0) {
   2017a:	4607      	mov	r7, r0
   2017c:	b940      	cbnz	r0, 20190 <publish_decode+0x3c>
	if ((buf->end - buf->cur) < utf8_strlen) {
   2017e:	6833      	ldr	r3, [r6, #0]
   20180:	6872      	ldr	r2, [r6, #4]
   20182:	f8bd 5006 	ldrh.w	r5, [sp, #6]
   20186:	1ad2      	subs	r2, r2, r3
   20188:	42aa      	cmp	r2, r5
   2018a:	da05      	bge.n	20198 <publish_decode+0x44>
		return -EINVAL;
   2018c:	f06f 0715 	mvn.w	r7, #21

	param->message.payload.data = NULL;
	param->message.payload.len = var_length - var_header_length;

	return 0;
}
   20190:	4638      	mov	r0, r7
   20192:	b002      	add	sp, #8
   20194:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	str->size = utf8_strlen;
   20198:	6065      	str	r5, [r4, #4]
	if (utf8_strlen) {
   2019a:	b15d      	cbz	r5, 201b4 <publish_decode+0x60>
		str->utf8 = buf->cur;
   2019c:	6023      	str	r3, [r4, #0]
		buf->cur += utf8_strlen;
   2019e:	442b      	add	r3, r5
   201a0:	6033      	str	r3, [r6, #0]
	if (param->message.topic.qos > MQTT_QOS_0_AT_MOST_ONCE) {
   201a2:	7a23      	ldrb	r3, [r4, #8]
   201a4:	b943      	cbnz	r3, 201b8 <publish_decode+0x64>
	var_header_length = param->message.topic.topic.size + sizeof(u16_t);
   201a6:	3502      	adds	r5, #2
	param->message.payload.data = NULL;
   201a8:	2300      	movs	r3, #0
	param->message.payload.len = var_length - var_header_length;
   201aa:	eba8 0505 	sub.w	r5, r8, r5
	param->message.payload.data = NULL;
   201ae:	60e3      	str	r3, [r4, #12]
	param->message.payload.len = var_length - var_header_length;
   201b0:	6125      	str	r5, [r4, #16]
	return 0;
   201b2:	e7ed      	b.n	20190 <publish_decode+0x3c>
		str->utf8 = NULL;
   201b4:	6025      	str	r5, [r4, #0]
	if (err_code != 0) {
   201b6:	e7f4      	b.n	201a2 <publish_decode+0x4e>
		err_code = unpack_uint16(buf, &param->message_id);
   201b8:	f104 0114 	add.w	r1, r4, #20
   201bc:	4630      	mov	r0, r6
   201be:	f7ff ff67 	bl	20090 <unpack_uint16>
		if (err_code != 0) {
   201c2:	b908      	cbnz	r0, 201c8 <publish_decode+0x74>
		var_header_length += sizeof(u16_t);
   201c4:	3504      	adds	r5, #4
   201c6:	e7ef      	b.n	201a8 <publish_decode+0x54>
   201c8:	4607      	mov	r7, r0
   201ca:	e7e1      	b.n	20190 <publish_decode+0x3c>

000201cc <publish_ack_decode>:

int publish_ack_decode(struct buf_ctx *buf, struct mqtt_puback_param *param)
{
	return unpack_uint16(buf, &param->message_id);
   201cc:	f7ff bf60 	b.w	20090 <unpack_uint16>

000201d0 <publish_receive_decode>:
}

int publish_receive_decode(struct buf_ctx *buf, struct mqtt_pubrec_param *param)
{
	return unpack_uint16(buf, &param->message_id);
   201d0:	f7ff bf5e 	b.w	20090 <unpack_uint16>

000201d4 <publish_release_decode>:
}

int publish_release_decode(struct buf_ctx *buf, struct mqtt_pubrel_param *param)
{
	return unpack_uint16(buf, &param->message_id);
   201d4:	f7ff bf5c 	b.w	20090 <unpack_uint16>

000201d8 <publish_complete_decode>:
}

int publish_complete_decode(struct buf_ctx *buf,
			    struct mqtt_pubcomp_param *param)
{
	return unpack_uint16(buf, &param->message_id);
   201d8:	f7ff bf5a 	b.w	20090 <unpack_uint16>

000201dc <subscribe_ack_decode>:
}

int subscribe_ack_decode(struct buf_ctx *buf, struct mqtt_suback_param *param)
{
   201dc:	b538      	push	{r3, r4, r5, lr}
   201de:	4605      	mov	r5, r0
   201e0:	460c      	mov	r4, r1
	int err_code;

	err_code = unpack_uint16(buf, &param->message_id);
   201e2:	f7ff ff55 	bl	20090 <unpack_uint16>
	if (err_code != 0) {
   201e6:	b930      	cbnz	r0, 201f6 <subscribe_ack_decode+0x1a>
		return err_code;
	}

	return unpack_data(buf->end - buf->cur, buf, &param->return_codes);
   201e8:	e9d5 2300 	ldrd	r2, r3, [r5]
   201ec:	1a99      	subs	r1, r3, r2
	str->len = length;
   201ee:	60a1      	str	r1, [r4, #8]
	if (length > 0) {
   201f0:	b111      	cbz	r1, 201f8 <subscribe_ack_decode+0x1c>
		str->data = buf->cur;
   201f2:	6062      	str	r2, [r4, #4]
		buf->cur += length;
   201f4:	602b      	str	r3, [r5, #0]
}
   201f6:	bd38      	pop	{r3, r4, r5, pc}
		str->data = NULL;
   201f8:	6060      	str	r0, [r4, #4]
   201fa:	e7fc      	b.n	201f6 <subscribe_ack_decode+0x1a>

000201fc <unsubscribe_ack_decode>:

int unsubscribe_ack_decode(struct buf_ctx *buf,
			   struct mqtt_unsuback_param *param)
{
	return unpack_uint16(buf, &param->message_id);
   201fc:	f7ff bf48 	b.w	20090 <unpack_uint16>

00020200 <pack_uint16>:
	if ((buf->end - buf->cur) < sizeof(u16_t)) {
   20200:	e9d1 3200 	ldrd	r3, r2, [r1]
   20204:	1ad2      	subs	r2, r2, r3
   20206:	2a01      	cmp	r2, #1
   20208:	d909      	bls.n	2021e <pack_uint16+0x1e>
	*(buf->cur++) = (val >> 8) & 0xFF;
   2020a:	1c5a      	adds	r2, r3, #1
   2020c:	600a      	str	r2, [r1, #0]
   2020e:	0a02      	lsrs	r2, r0, #8
   20210:	701a      	strb	r2, [r3, #0]
	*(buf->cur++) = val & 0xFF;
   20212:	680b      	ldr	r3, [r1, #0]
   20214:	1c5a      	adds	r2, r3, #1
   20216:	600a      	str	r2, [r1, #0]
   20218:	7018      	strb	r0, [r3, #0]
	return 0;
   2021a:	2000      	movs	r0, #0
   2021c:	4770      	bx	lr
		return -ENOMEM;
   2021e:	f06f 000b 	mvn.w	r0, #11
}
   20222:	4770      	bx	lr

00020224 <pack_utf8_str>:
{
   20224:	b538      	push	{r3, r4, r5, lr}
	if ((buf->end - buf->cur) < GET_UT8STR_BUFFER_SIZE(str)) {
   20226:	e9d1 2300 	ldrd	r2, r3, [r1]
{
   2022a:	4605      	mov	r5, r0
	if ((buf->end - buf->cur) < GET_UT8STR_BUFFER_SIZE(str)) {
   2022c:	6840      	ldr	r0, [r0, #4]
   2022e:	1a9b      	subs	r3, r3, r2
   20230:	1c82      	adds	r2, r0, #2
   20232:	4293      	cmp	r3, r2
{
   20234:	460c      	mov	r4, r1
	if ((buf->end - buf->cur) < GET_UT8STR_BUFFER_SIZE(str)) {
   20236:	d30d      	bcc.n	20254 <pack_utf8_str+0x30>
	(void)pack_uint16(str->size, buf);
   20238:	b280      	uxth	r0, r0
   2023a:	f7ff ffe1 	bl	20200 <pack_uint16>
   2023e:	e9d5 1200 	ldrd	r1, r2, [r5]
   20242:	6820      	ldr	r0, [r4, #0]
   20244:	f001 fb79 	bl	2193a <memcpy>
	return 0;
   20248:	2000      	movs	r0, #0
	buf->cur += str->size;
   2024a:	6823      	ldr	r3, [r4, #0]
   2024c:	686a      	ldr	r2, [r5, #4]
   2024e:	4413      	add	r3, r2
   20250:	6023      	str	r3, [r4, #0]
}
   20252:	bd38      	pop	{r3, r4, r5, pc}
		return -ENOMEM;
   20254:	f06f 000b 	mvn.w	r0, #11
   20258:	e7fb      	b.n	20252 <pack_utf8_str+0x2e>

0002025a <mqtt_encode_fixed_header>:
{
   2025a:	b570      	push	{r4, r5, r6, lr}
	u32_t length = buf->cur - start;
   2025c:	6815      	ldr	r5, [r2, #0]
   2025e:	1a6d      	subs	r5, r5, r1
	if (length > MQTT_MAX_PAYLOAD_SIZE) {
   20260:	f1b5 5f80 	cmp.w	r5, #268435456	; 0x10000000
   20264:	d227      	bcs.n	202b6 <mqtt_encode_fixed_header+0x5c>
   20266:	462c      	mov	r4, r5
   20268:	2600      	movs	r6, #0
	} while (length > 0);
   2026a:	09e4      	lsrs	r4, r4, #7
   2026c:	b2f3      	uxtb	r3, r6
		if (buf != NULL) {
   2026e:	f106 0601 	add.w	r6, r6, #1
	} while (length > 0);
   20272:	d1fa      	bne.n	2026a <mqtt_encode_fixed_header+0x10>
	fixed_header_length += sizeof(u8_t);
   20274:	3302      	adds	r3, #2
	buf->cur = start - fixed_header_length;
   20276:	b2db      	uxtb	r3, r3
   20278:	425b      	negs	r3, r3
	if ((buf->end - buf->cur) < sizeof(u8_t)) {
   2027a:	6856      	ldr	r6, [r2, #4]
	buf->cur = start - fixed_header_length;
   2027c:	18cc      	adds	r4, r1, r3
	if ((buf->end - buf->cur) < sizeof(u8_t)) {
   2027e:	42b4      	cmp	r4, r6
	buf->cur = start - fixed_header_length;
   20280:	6014      	str	r4, [r2, #0]
	*(buf->cur++) = val;
   20282:	bf1e      	ittt	ne
   20284:	3401      	addne	r4, #1
   20286:	6014      	strne	r4, [r2, #0]
   20288:	54c8      	strbne	r0, [r1, r3]
	return 0;
   2028a:	4628      	mov	r0, r5
			*(buf->cur) = length & MQTT_LENGTH_VALUE_MASK;
   2028c:	6811      	ldr	r1, [r2, #0]
   2028e:	f000 047f 	and.w	r4, r0, #127	; 0x7f
   20292:	700c      	strb	r4, [r1, #0]
			if (length > 0) {
   20294:	09c0      	lsrs	r0, r0, #7
				*(buf->cur) |= MQTT_LENGTH_CONTINUATION_BIT;
   20296:	bf1f      	itttt	ne
   20298:	6814      	ldrne	r4, [r2, #0]
   2029a:	7821      	ldrbne	r1, [r4, #0]
   2029c:	f061 017f 	ornne	r1, r1, #127	; 0x7f
   202a0:	7021      	strbne	r1, [r4, #0]
			buf->cur++;
   202a2:	6811      	ldr	r1, [r2, #0]
   202a4:	3101      	adds	r1, #1
   202a6:	6011      	str	r1, [r2, #0]
	} while (length > 0);
   202a8:	2800      	cmp	r0, #0
   202aa:	d1ef      	bne.n	2028c <mqtt_encode_fixed_header+0x32>
	buf->cur = buf->cur - fixed_header_length;
   202ac:	440b      	add	r3, r1
	buf->end = buf->cur + length + fixed_header_length;
   202ae:	4429      	add	r1, r5
	buf->cur = buf->cur - fixed_header_length;
   202b0:	6013      	str	r3, [r2, #0]
	buf->end = buf->cur + length + fixed_header_length;
   202b2:	6051      	str	r1, [r2, #4]
}
   202b4:	bd70      	pop	{r4, r5, r6, pc}
		return -EMSGSIZE;
   202b6:	f06f 0079 	mvn.w	r0, #121	; 0x79
   202ba:	e7fb      	b.n	202b4 <mqtt_encode_fixed_header+0x5a>

000202bc <publish_encode>:
{
   202bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   202c0:	4607      	mov	r7, r0
	const u8_t message_type = MQTT_MESSAGES_OPTIONS(
   202c2:	7d80      	ldrb	r0, [r0, #22]
   202c4:	7a3c      	ldrb	r4, [r7, #8]
{
   202c6:	460d      	mov	r5, r1
	const u8_t message_type = MQTT_MESSAGES_OPTIONS(
   202c8:	f000 0801 	and.w	r8, r0, #1
   202cc:	f3c0 0940 	ubfx	r9, r0, #1, #1
	if ((param->message.topic.qos) && (param->message_id == 0U)) {
   202d0:	b10c      	cbz	r4, 202d6 <publish_encode+0x1a>
   202d2:	8abb      	ldrh	r3, [r7, #20]
   202d4:	b35b      	cbz	r3, 2032e <publish_encode+0x72>
	buf->cur += MQTT_FIXED_HEADER_MAX_SIZE;
   202d6:	682e      	ldr	r6, [r5, #0]
	err_code = pack_utf8_str(&param->message.topic.topic, buf);
   202d8:	4629      	mov	r1, r5
	buf->cur += MQTT_FIXED_HEADER_MAX_SIZE;
   202da:	3605      	adds	r6, #5
   202dc:	602e      	str	r6, [r5, #0]
	err_code = pack_utf8_str(&param->message.topic.topic, buf);
   202de:	4638      	mov	r0, r7
   202e0:	f7ff ffa0 	bl	20224 <pack_utf8_str>
	if (err_code != 0) {
   202e4:	b9a8      	cbnz	r0, 20312 <publish_encode+0x56>
	if (param->message.topic.qos) {
   202e6:	7a3b      	ldrb	r3, [r7, #8]
   202e8:	b9ab      	cbnz	r3, 20316 <publish_encode+0x5a>
	const u8_t message_type = MQTT_MESSAGES_OPTIONS(
   202ea:	0060      	lsls	r0, r4, #1
   202ec:	f000 0006 	and.w	r0, r0, #6
	buf->cur += param->message.payload.len;
   202f0:	693a      	ldr	r2, [r7, #16]
   202f2:	682b      	ldr	r3, [r5, #0]
	const u8_t message_type = MQTT_MESSAGES_OPTIONS(
   202f4:	ea40 0009 	orr.w	r0, r0, r9
   202f8:	ea40 00c8 	orr.w	r0, r0, r8, lsl #3
	buf->cur += param->message.payload.len;
   202fc:	4413      	add	r3, r2
	const u8_t message_type = MQTT_MESSAGES_OPTIONS(
   202fe:	f040 0030 	orr.w	r0, r0, #48	; 0x30
	buf->cur += param->message.payload.len;
   20302:	602b      	str	r3, [r5, #0]
	err_code = mqtt_encode_fixed_header(message_type, start, buf);
   20304:	462a      	mov	r2, r5
   20306:	4631      	mov	r1, r6
   20308:	f000 003f 	and.w	r0, r0, #63	; 0x3f
   2030c:	f7ff ffa5 	bl	2025a <mqtt_encode_fixed_header>
	if (err_code != 0) {
   20310:	b140      	cbz	r0, 20324 <publish_encode+0x68>
}
   20312:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		err_code = pack_uint16(param->message_id, buf);
   20316:	4629      	mov	r1, r5
   20318:	8ab8      	ldrh	r0, [r7, #20]
   2031a:	f7ff ff71 	bl	20200 <pack_uint16>
		if (err_code != 0) {
   2031e:	2800      	cmp	r0, #0
   20320:	d0e3      	beq.n	202ea <publish_encode+0x2e>
   20322:	e7f6      	b.n	20312 <publish_encode+0x56>
	buf->end -= param->message.payload.len;
   20324:	686b      	ldr	r3, [r5, #4]
   20326:	693a      	ldr	r2, [r7, #16]
   20328:	1a9b      	subs	r3, r3, r2
   2032a:	606b      	str	r3, [r5, #4]
	return 0;
   2032c:	e7f1      	b.n	20312 <publish_encode+0x56>
		return -EINVAL;
   2032e:	f06f 0015 	mvn.w	r0, #21
   20332:	e7ee      	b.n	20312 <publish_encode+0x56>

00020334 <subscribe_encode>:
{
   20334:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   20338:	4607      	mov	r7, r0
	if (param->message_id == 0U) {
   2033a:	88c0      	ldrh	r0, [r0, #6]
{
   2033c:	460d      	mov	r5, r1
	if (param->message_id == 0U) {
   2033e:	b330      	cbz	r0, 2038e <subscribe_encode+0x5a>
	buf->cur += MQTT_FIXED_HEADER_MAX_SIZE;
   20340:	680e      	ldr	r6, [r1, #0]
   20342:	3605      	adds	r6, #5
   20344:	600e      	str	r6, [r1, #0]
	err_code = pack_uint16(param->message_id, buf);
   20346:	f7ff ff5b 	bl	20200 <pack_uint16>
	if (err_code != 0) {
   2034a:	4604      	mov	r4, r0
   2034c:	bb08      	cbnz	r0, 20392 <subscribe_encode+0x5e>
   2034e:	f04f 090c 	mov.w	r9, #12
	for (i = 0; i < param->list_count; i++) {
   20352:	88bb      	ldrh	r3, [r7, #4]
   20354:	42a3      	cmp	r3, r4
   20356:	dc06      	bgt.n	20366 <subscribe_encode+0x32>
	return mqtt_encode_fixed_header(message_type, start, buf);
   20358:	462a      	mov	r2, r5
   2035a:	4631      	mov	r1, r6
}
   2035c:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	return mqtt_encode_fixed_header(message_type, start, buf);
   20360:	2082      	movs	r0, #130	; 0x82
   20362:	f7ff bf7a 	b.w	2025a <mqtt_encode_fixed_header>
		err_code = pack_utf8_str(&param->list[i].topic, buf);
   20366:	fb09 f804 	mul.w	r8, r9, r4
   2036a:	6838      	ldr	r0, [r7, #0]
   2036c:	4629      	mov	r1, r5
   2036e:	4440      	add	r0, r8
   20370:	f7ff ff58 	bl	20224 <pack_utf8_str>
		if (err_code != 0) {
   20374:	b980      	cbnz	r0, 20398 <subscribe_encode+0x64>
		err_code = pack_uint8(param->list[i].qos, buf);
   20376:	683b      	ldr	r3, [r7, #0]
   20378:	4443      	add	r3, r8
   2037a:	7a1a      	ldrb	r2, [r3, #8]
	if ((buf->end - buf->cur) < sizeof(u8_t)) {
   2037c:	e9d5 3100 	ldrd	r3, r1, [r5]
   20380:	4299      	cmp	r1, r3
   20382:	d00b      	beq.n	2039c <subscribe_encode+0x68>
	*(buf->cur++) = val;
   20384:	1c59      	adds	r1, r3, #1
   20386:	6029      	str	r1, [r5, #0]
	for (i = 0; i < param->list_count; i++) {
   20388:	3401      	adds	r4, #1
	*(buf->cur++) = val;
   2038a:	701a      	strb	r2, [r3, #0]
		if (err_code != 0) {
   2038c:	e7e1      	b.n	20352 <subscribe_encode+0x1e>
		return -EINVAL;
   2038e:	f06f 0415 	mvn.w	r4, #21
}
   20392:	4620      	mov	r0, r4
   20394:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		err_code = pack_utf8_str(&param->list[i].topic, buf);
   20398:	4604      	mov	r4, r0
   2039a:	e7fa      	b.n	20392 <subscribe_encode+0x5e>
		return -ENOMEM;
   2039c:	f06f 040b 	mvn.w	r4, #11
   203a0:	e7f7      	b.n	20392 <subscribe_encode+0x5e>

000203a2 <mqtt_read_message_chunk>:
	return err_code;
}

static int mqtt_read_message_chunk(struct mqtt_client *client,
				   struct buf_ctx *buf, u32_t length)
{
   203a2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   203a4:	460d      	mov	r5, r1
	int len;

	/* Calculate how much data we need to read from the transport,
	 * given the already buffered data.
	 */
	remaining = length - (buf->end - buf->cur);
   203a6:	e9d1 4100 	ldrd	r4, r1, [r1]
   203aa:	1b0c      	subs	r4, r1, r4
   203ac:	1b14      	subs	r4, r2, r4
	if (remaining <= 0) {
   203ae:	2c00      	cmp	r4, #0
{
   203b0:	4606      	mov	r6, r0
	if (remaining <= 0) {
   203b2:	dd14      	ble.n	203de <mqtt_read_message_chunk+0x3c>
		return 0;
	}

	/* Check if read does not exceed the buffer. */
	if (buf->end + remaining > client->rx_buf + client->rx_buf_size) {
   203b4:	e9d0 3713 	ldrd	r3, r7, [r0, #76]	; 0x4c
   203b8:	190a      	adds	r2, r1, r4
   203ba:	443b      	add	r3, r7
   203bc:	429a      	cmp	r2, r3
   203be:	d810      	bhi.n	203e2 <mqtt_read_message_chunk+0x40>
		MQTT_ERR("[CID %p]: Buffer too small to receive the message",
			 client);
		return -ENOMEM;
	}

	len = mqtt_transport_read(client, buf->end, remaining, false);
   203c0:	2300      	movs	r3, #0
   203c2:	4622      	mov	r2, r4
   203c4:	f7f0 f902 	bl	105cc <mqtt_transport_read>
	if (len < 0) {
   203c8:	2800      	cmp	r0, #0
   203ca:	db09      	blt.n	203e0 <mqtt_read_message_chunk+0x3e>
		MQTT_TRC("[CID %p]: Transport read error: %d", client, len);
		return len;
	}

	if (len == 0) {
   203cc:	d00c      	beq.n	203e8 <mqtt_read_message_chunk+0x46>
		MQTT_TRC("[CID %p]: Connection closed.", client);
		return -ENOTCONN;
	}

	client->internal.rx_buf_datalen += len;
   203ce:	69f3      	ldr	r3, [r6, #28]
	buf->end += len;

	if (len < remaining) {
   203d0:	4284      	cmp	r4, r0
	client->internal.rx_buf_datalen += len;
   203d2:	4403      	add	r3, r0
   203d4:	61f3      	str	r3, [r6, #28]
	buf->end += len;
   203d6:	686b      	ldr	r3, [r5, #4]
   203d8:	4403      	add	r3, r0
   203da:	606b      	str	r3, [r5, #4]
	if (len < remaining) {
   203dc:	dc07      	bgt.n	203ee <mqtt_read_message_chunk+0x4c>
		MQTT_TRC("[CID %p]: Message partially received.", client);
		return -EAGAIN;
	}

	return 0;
   203de:	2000      	movs	r0, #0
}
   203e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return -ENOMEM;
   203e2:	f06f 000b 	mvn.w	r0, #11
   203e6:	e7fb      	b.n	203e0 <mqtt_read_message_chunk+0x3e>
		return -ENOTCONN;
   203e8:	f06f 007f 	mvn.w	r0, #127	; 0x7f
   203ec:	e7f8      	b.n	203e0 <mqtt_read_message_chunk+0x3e>
		return -EAGAIN;
   203ee:	f06f 000a 	mvn.w	r0, #10
   203f2:	e7f5      	b.n	203e0 <mqtt_read_message_chunk+0x3e>

000203f4 <mqtt_handle_rx>:

	return err_code;
}

int mqtt_handle_rx(struct mqtt_client *client)
{
   203f4:	b570      	push	{r4, r5, r6, lr}
	int err_code;
	u8_t type_and_flags;
	u32_t var_length;
	struct buf_ctx buf;

	buf.cur = client->rx_buf;
   203f6:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
	buf.end = client->rx_buf + client->internal.rx_buf_datalen;
   203f8:	69c2      	ldr	r2, [r0, #28]
{
   203fa:	b08c      	sub	sp, #48	; 0x30
	buf.cur = client->rx_buf;
   203fc:	9302      	str	r3, [sp, #8]
{
   203fe:	4605      	mov	r5, r0
	buf.end = client->rx_buf + client->internal.rx_buf_datalen;
   20400:	4413      	add	r3, r2
	u8_t chunk_size = MQTT_FIXED_HEADER_MIN_SIZE;
   20402:	2202      	movs	r2, #2
	buf.end = client->rx_buf + client->internal.rx_buf_datalen;
   20404:	9303      	str	r3, [sp, #12]
		err_code = mqtt_read_message_chunk(client, buf, chunk_size);
   20406:	a902      	add	r1, sp, #8
   20408:	4628      	mov	r0, r5
   2040a:	f7ff ffca 	bl	203a2 <mqtt_read_message_chunk>
		if (err_code < 0) {
   2040e:	1e04      	subs	r4, r0, #0
   20410:	db2b      	blt.n	2046a <mqtt_handle_rx+0x76>
		buf->cur = client->rx_buf;
   20412:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
		err_code = fixed_header_decode(buf, type_and_flags, var_length);
   20414:	aa01      	add	r2, sp, #4
   20416:	f10d 0103 	add.w	r1, sp, #3
   2041a:	a802      	add	r0, sp, #8
		buf->cur = client->rx_buf;
   2041c:	9302      	str	r3, [sp, #8]
		err_code = fixed_header_decode(buf, type_and_flags, var_length);
   2041e:	f7ff fe6d 	bl	200fc <fixed_header_decode>
	} while (err_code == -EAGAIN);
   20422:	f110 0f0b 	cmn.w	r0, #11
		err_code = fixed_header_decode(buf, type_and_flags, var_length);
   20426:	4604      	mov	r4, r0
		chunk_size = 1U;
   20428:	f04f 0201 	mov.w	r2, #1
	} while (err_code == -EAGAIN);
   2042c:	d0eb      	beq.n	20406 <mqtt_handle_rx+0x12>

	err_code = mqtt_read_and_parse_fixed_header(client, &type_and_flags,
						    &var_length, &buf);
	if (err_code < 0) {
   2042e:	2800      	cmp	r0, #0
   20430:	db1f      	blt.n	20472 <mqtt_handle_rx+0x7e>
		return (err_code == -EAGAIN) ? 0 : err_code;
	}

	if ((type_and_flags & 0xF0) == MQTT_PKT_TYPE_PUBLISH) {
   20432:	f89d 6003 	ldrb.w	r6, [sp, #3]
   20436:	f006 03f0 	and.w	r3, r6, #240	; 0xf0
   2043a:	2b30      	cmp	r3, #48	; 0x30
   2043c:	d11c      	bne.n	20478 <mqtt_handle_rx+0x84>
	err_code = mqtt_read_message_chunk(client, buf, sizeof(u16_t));
   2043e:	2202      	movs	r2, #2
   20440:	a902      	add	r1, sp, #8
   20442:	4628      	mov	r0, r5
   20444:	f7ff ffad 	bl	203a2 <mqtt_read_message_chunk>
	if (err_code < 0) {
   20448:	1e04      	subs	r4, r0, #0
   2044a:	db0e      	blt.n	2046a <mqtt_handle_rx+0x76>
	variable_header_length = *buf->cur << 8; /* MSB */
   2044c:	9b02      	ldr	r3, [sp, #8]
	if (qos > MQTT_QOS_0_AT_MOST_ONCE) {
   2044e:	f016 0f06 	tst.w	r6, #6
   20452:	881a      	ldrh	r2, [r3, #0]
   20454:	ba52      	rev16	r2, r2
   20456:	b292      	uxth	r2, r2
	variable_header_length += sizeof(u16_t);
   20458:	bf0c      	ite	eq
   2045a:	3202      	addeq	r2, #2
		variable_header_length += sizeof(u16_t);
   2045c:	3204      	addne	r2, #4
		err_code = mqtt_read_publish_var_header(client, type_and_flags,
							&buf);
	} else {
		err_code = mqtt_read_message_chunk(client, &buf, var_length);
   2045e:	a902      	add	r1, sp, #8
   20460:	4628      	mov	r0, r5
   20462:	f7ff ff9e 	bl	203a2 <mqtt_read_message_chunk>
	}

	if (err_code < 0) {
   20466:	1e04      	subs	r4, r0, #0
   20468:	da08      	bge.n	2047c <mqtt_handle_rx+0x88>
		return (err_code == -EAGAIN) ? 0 : err_code;
   2046a:	f114 0f0b 	cmn.w	r4, #11
   2046e:	d100      	bne.n	20472 <mqtt_handle_rx+0x7e>
   20470:	2400      	movs	r4, #0
	}

	client->internal.rx_buf_datalen = 0U;

	return 0;
}
   20472:	4620      	mov	r0, r4
   20474:	b00c      	add	sp, #48	; 0x30
   20476:	bd70      	pop	{r4, r5, r6, pc}
		err_code = mqtt_read_message_chunk(client, &buf, var_length);
   20478:	9a01      	ldr	r2, [sp, #4]
   2047a:	e7f0      	b.n	2045e <mqtt_handle_rx+0x6a>
	evt.result = 0;
   2047c:	2200      	movs	r2, #0
	err_code = mqtt_handle_packet(client, type_and_flags, var_length, &buf);
   2047e:	f89d 0003 	ldrb.w	r0, [sp, #3]
   20482:	9901      	ldr	r1, [sp, #4]
	evt.result = 0;
   20484:	f000 03f0 	and.w	r3, r0, #240	; 0xf0
	switch (type_and_flags & 0xF0) {
   20488:	2b60      	cmp	r3, #96	; 0x60
	evt.result = 0;
   2048a:	920b      	str	r2, [sp, #44]	; 0x2c
	switch (type_and_flags & 0xF0) {
   2048c:	d05e      	beq.n	2054c <mqtt_handle_rx+0x158>
   2048e:	d813      	bhi.n	204b8 <mqtt_handle_rx+0xc4>
   20490:	2b30      	cmp	r3, #48	; 0x30
   20492:	d045      	beq.n	20520 <mqtt_handle_rx+0x12c>
   20494:	d804      	bhi.n	204a0 <mqtt_handle_rx+0xac>
   20496:	2b20      	cmp	r3, #32
   20498:	d02a      	beq.n	204f0 <mqtt_handle_rx+0xfc>
	client->internal.rx_buf_datalen = 0U;
   2049a:	2400      	movs	r4, #0
   2049c:	61ec      	str	r4, [r5, #28]
	return 0;
   2049e:	e7e8      	b.n	20472 <mqtt_handle_rx+0x7e>
	switch (type_and_flags & 0xF0) {
   204a0:	2b40      	cmp	r3, #64	; 0x40
   204a2:	d049      	beq.n	20538 <mqtt_handle_rx+0x144>
   204a4:	2b50      	cmp	r3, #80	; 0x50
   204a6:	d1f8      	bne.n	2049a <mqtt_handle_rx+0xa6>
		evt.type = MQTT_EVT_PUBREC;
   204a8:	2304      	movs	r3, #4
		err_code = publish_receive_decode(buf, &evt.param.pubrec);
   204aa:	a905      	add	r1, sp, #20
   204ac:	a802      	add	r0, sp, #8
		evt.type = MQTT_EVT_PUBREC;
   204ae:	f88d 3010 	strb.w	r3, [sp, #16]
		err_code = publish_receive_decode(buf, &evt.param.pubrec);
   204b2:	f7ff fe8d 	bl	201d0 <publish_receive_decode>
   204b6:	e046      	b.n	20546 <mqtt_handle_rx+0x152>
	switch (type_and_flags & 0xF0) {
   204b8:	2b90      	cmp	r3, #144	; 0x90
   204ba:	d04f      	beq.n	2055c <mqtt_handle_rx+0x168>
   204bc:	d809      	bhi.n	204d2 <mqtt_handle_rx+0xde>
   204be:	2b70      	cmp	r3, #112	; 0x70
   204c0:	d1eb      	bne.n	2049a <mqtt_handle_rx+0xa6>
		evt.type = MQTT_EVT_PUBCOMP;
   204c2:	2306      	movs	r3, #6
		err_code = publish_complete_decode(buf, &evt.param.pubcomp);
   204c4:	a905      	add	r1, sp, #20
   204c6:	a802      	add	r0, sp, #8
		evt.type = MQTT_EVT_PUBCOMP;
   204c8:	f88d 3010 	strb.w	r3, [sp, #16]
		err_code = publish_complete_decode(buf, &evt.param.pubcomp);
   204cc:	f7ff fe84 	bl	201d8 <publish_complete_decode>
   204d0:	e039      	b.n	20546 <mqtt_handle_rx+0x152>
	switch (type_and_flags & 0xF0) {
   204d2:	2bb0      	cmp	r3, #176	; 0xb0
   204d4:	d04a      	beq.n	2056c <mqtt_handle_rx+0x178>
   204d6:	2bd0      	cmp	r3, #208	; 0xd0
   204d8:	d1df      	bne.n	2049a <mqtt_handle_rx+0xa6>
		if (client->unacked_ping <= 0) {
   204da:	f995 305f 	ldrsb.w	r3, [r5, #95]	; 0x5f
   204de:	2b00      	cmp	r3, #0
			client->unacked_ping--;
   204e0:	bfca      	itet	gt
   204e2:	f103 33ff 	addgt.w	r3, r3, #4294967295
			client->unacked_ping = 0;
   204e6:	f885 205f 	strble.w	r2, [r5, #95]	; 0x5f
			client->unacked_ping--;
   204ea:	f885 305f 	strbgt.w	r3, [r5, #95]	; 0x5f
	if (err_code < 0) {
   204ee:	e7d4      	b.n	2049a <mqtt_handle_rx+0xa6>
		evt.type = MQTT_EVT_CONNACK;
   204f0:	f88d 2010 	strb.w	r2, [sp, #16]
		err_code = connect_ack_decode(client, buf, &evt.param.connack);
   204f4:	a902      	add	r1, sp, #8
   204f6:	aa05      	add	r2, sp, #20
   204f8:	4628      	mov	r0, r5
   204fa:	f7ff fe10 	bl	2011e <connect_ack_decode>
		if (err_code == 0) {
   204fe:	4604      	mov	r4, r0
   20500:	bb10      	cbnz	r0, 20548 <mqtt_handle_rx+0x154>
			if (evt.param.connack.return_code ==
   20502:	f89d 2015 	ldrb.w	r2, [sp, #21]
   20506:	b91a      	cbnz	r2, 20510 <mqtt_handle_rx+0x11c>
				MQTT_SET_STATE(client, MQTT_STATE_CONNECTED);
   20508:	69ab      	ldr	r3, [r5, #24]
   2050a:	f043 0304 	orr.w	r3, r3, #4
   2050e:	61ab      	str	r3, [r5, #24]
			evt.result = evt.param.connack.return_code;
   20510:	920b      	str	r2, [sp, #44]	; 0x2c
		event_notify(client, &evt);
   20512:	a904      	add	r1, sp, #16
   20514:	4628      	mov	r0, r5
   20516:	f000 f84f 	bl	205b8 <event_notify>
	if (err_code < 0) {
   2051a:	2c00      	cmp	r4, #0
   2051c:	dabd      	bge.n	2049a <mqtt_handle_rx+0xa6>
   2051e:	e7a8      	b.n	20472 <mqtt_handle_rx+0x7e>
		evt.type = MQTT_EVT_PUBLISH;
   20520:	2302      	movs	r3, #2
		err_code = publish_decode(type_and_flags, var_length, buf,
   20522:	aa02      	add	r2, sp, #8
		evt.type = MQTT_EVT_PUBLISH;
   20524:	f88d 3010 	strb.w	r3, [sp, #16]
		err_code = publish_decode(type_and_flags, var_length, buf,
   20528:	ab05      	add	r3, sp, #20
   2052a:	f7ff fe13 	bl	20154 <publish_decode>
		client->internal.remaining_payload =
   2052e:	9b09      	ldr	r3, [sp, #36]	; 0x24
		err_code = publish_decode(type_and_flags, var_length, buf,
   20530:	4604      	mov	r4, r0
		evt.result = err_code;
   20532:	900b      	str	r0, [sp, #44]	; 0x2c
		client->internal.remaining_payload =
   20534:	622b      	str	r3, [r5, #32]
	if (notify_event == true) {
   20536:	e7ec      	b.n	20512 <mqtt_handle_rx+0x11e>
		evt.type = MQTT_EVT_PUBACK;
   20538:	2303      	movs	r3, #3
		err_code = publish_ack_decode(buf, &evt.param.puback);
   2053a:	a905      	add	r1, sp, #20
   2053c:	a802      	add	r0, sp, #8
		evt.type = MQTT_EVT_PUBACK;
   2053e:	f88d 3010 	strb.w	r3, [sp, #16]
		err_code = publish_ack_decode(buf, &evt.param.puback);
   20542:	f7ff fe43 	bl	201cc <publish_ack_decode>
		err_code = unsubscribe_ack_decode(buf, &evt.param.unsuback);
   20546:	4604      	mov	r4, r0
		evt.result = err_code;
   20548:	940b      	str	r4, [sp, #44]	; 0x2c
	if (notify_event == true) {
   2054a:	e7e2      	b.n	20512 <mqtt_handle_rx+0x11e>
		evt.type = MQTT_EVT_PUBREL;
   2054c:	2305      	movs	r3, #5
		err_code = publish_release_decode(buf, &evt.param.pubrel);
   2054e:	a905      	add	r1, sp, #20
   20550:	a802      	add	r0, sp, #8
		evt.type = MQTT_EVT_PUBREL;
   20552:	f88d 3010 	strb.w	r3, [sp, #16]
		err_code = publish_release_decode(buf, &evt.param.pubrel);
   20556:	f7ff fe3d 	bl	201d4 <publish_release_decode>
   2055a:	e7f4      	b.n	20546 <mqtt_handle_rx+0x152>
		evt.type = MQTT_EVT_SUBACK;
   2055c:	2307      	movs	r3, #7
		err_code = subscribe_ack_decode(buf, &evt.param.suback);
   2055e:	a905      	add	r1, sp, #20
   20560:	a802      	add	r0, sp, #8
		evt.type = MQTT_EVT_SUBACK;
   20562:	f88d 3010 	strb.w	r3, [sp, #16]
		err_code = subscribe_ack_decode(buf, &evt.param.suback);
   20566:	f7ff fe39 	bl	201dc <subscribe_ack_decode>
   2056a:	e7ec      	b.n	20546 <mqtt_handle_rx+0x152>
		evt.type = MQTT_EVT_UNSUBACK;
   2056c:	2308      	movs	r3, #8
		err_code = unsubscribe_ack_decode(buf, &evt.param.unsuback);
   2056e:	a905      	add	r1, sp, #20
   20570:	eb0d 0003 	add.w	r0, sp, r3
		evt.type = MQTT_EVT_UNSUBACK;
   20574:	f88d 3010 	strb.w	r3, [sp, #16]
		err_code = unsubscribe_ack_decode(buf, &evt.param.unsuback);
   20578:	f7ff fe40 	bl	201fc <unsubscribe_ack_decode>
   2057c:	e7e3      	b.n	20546 <mqtt_handle_rx+0x152>

0002057e <mqtt_client_tcp_disconnect>:

int mqtt_client_tcp_disconnect(struct mqtt_client *client)
{
   2057e:	b508      	push	{r3, lr}
	int ret;

	MQTT_TRC("Closing socket %d", client->transport.tcp.sock);

	ret = close(client->transport.tcp.sock);
   20580:	6a80      	ldr	r0, [r0, #40]	; 0x28
   20582:	f7ef feef 	bl	10364 <close>
	if (ret < 0) {
   20586:	2800      	cmp	r0, #0
   20588:	da04      	bge.n	20594 <mqtt_client_tcp_disconnect+0x16>
		return -errno;
   2058a:	f7ff fd48 	bl	2001e <__errno>
   2058e:	6800      	ldr	r0, [r0, #0]
   20590:	4240      	negs	r0, r0
	}

	return 0;
}
   20592:	bd08      	pop	{r3, pc}
	return 0;
   20594:	2000      	movs	r0, #0
   20596:	e7fc      	b.n	20592 <mqtt_client_tcp_disconnect+0x14>

00020598 <mqtt_transport_disconnect>:

int mqtt_transport_disconnect(struct mqtt_client *client)
{
	return transport_fn[client->transport.type].disconnect(client);
   20598:	f7ff bff1 	b.w	2057e <mqtt_client_tcp_disconnect>

0002059c <tx_buf_init>:
	client->internal.remaining_payload = 0U;
}

/** @brief Initialize tx buffer. */
static void tx_buf_init(struct mqtt_client *client, struct buf_ctx *buf)
{
   2059c:	b538      	push	{r3, r4, r5, lr}
   2059e:	4604      	mov	r4, r0
   205a0:	460d      	mov	r5, r1
__ssp_bos_icheck3(memset, void *, int)
   205a2:	6d82      	ldr	r2, [r0, #88]	; 0x58
   205a4:	2100      	movs	r1, #0
   205a6:	6d40      	ldr	r0, [r0, #84]	; 0x54
   205a8:	f001 f9d4 	bl	21954 <memset>
	memset(client->tx_buf, 0, client->tx_buf_size);
	buf->cur = client->tx_buf;
   205ac:	6d63      	ldr	r3, [r4, #84]	; 0x54
	buf->end = client->tx_buf + client->tx_buf_size;
   205ae:	6da2      	ldr	r2, [r4, #88]	; 0x58
	buf->cur = client->tx_buf;
   205b0:	602b      	str	r3, [r5, #0]
	buf->end = client->tx_buf + client->tx_buf_size;
   205b2:	4413      	add	r3, r2
   205b4:	606b      	str	r3, [r5, #4]
}
   205b6:	bd38      	pop	{r3, r4, r5, pc}

000205b8 <event_notify>:
	/* Reset internal state. */
	client_reset(client);
}

void event_notify(struct mqtt_client *client, const struct mqtt_evt *evt)
{
   205b8:	b538      	push	{r3, r4, r5, lr}
	if (client->evt_cb != NULL) {
   205ba:	6c83      	ldr	r3, [r0, #72]	; 0x48
{
   205bc:	4604      	mov	r4, r0
   205be:	460d      	mov	r5, r1
	if (client->evt_cb != NULL) {
   205c0:	b153      	cbz	r3, 205d8 <event_notify+0x20>
		mqtt_mutex_unlock(client);
   205c2:	f7f0 f80f 	bl	105e4 <mqtt_mutex_unlock>

		client->evt_cb(client, evt);
   205c6:	4620      	mov	r0, r4
   205c8:	6ca3      	ldr	r3, [r4, #72]	; 0x48
   205ca:	4629      	mov	r1, r5
   205cc:	4798      	blx	r3

		mqtt_mutex_lock(client);
   205ce:	4620      	mov	r0, r4
	}
}
   205d0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		mqtt_mutex_lock(client);
   205d4:	f7f0 b832 	b.w	1063c <mqtt_mutex_lock>
}
   205d8:	bd38      	pop	{r3, r4, r5, pc}

000205da <client_disconnect>:

static void client_disconnect(struct mqtt_client *client, int result)
{
   205da:	b530      	push	{r4, r5, lr}
   205dc:	4604      	mov	r4, r0
   205de:	b089      	sub	sp, #36	; 0x24
   205e0:	460d      	mov	r5, r1
	int err_code;

	err_code = mqtt_transport_disconnect(client);
   205e2:	f7ff ffd9 	bl	20598 <mqtt_transport_disconnect>
	if (MQTT_HAS_STATE(client, MQTT_STATE_CONNECTED)) {
   205e6:	69a3      	ldr	r3, [r4, #24]
	event_notify(client, &evt);
   205e8:	4669      	mov	r1, sp
	if (MQTT_HAS_STATE(client, MQTT_STATE_CONNECTED)) {
   205ea:	f013 0304 	ands.w	r3, r3, #4
		evt.type = MQTT_EVT_DISCONNECT;
   205ee:	bf12      	itee	ne
   205f0:	2301      	movne	r3, #1
		evt.type = MQTT_EVT_CONNACK;
   205f2:	f88d 3000 	strbeq.w	r3, [sp]
		evt.result = -ECONNREFUSED;
   205f6:	f06f 036e 	mvneq.w	r3, #110	; 0x6e
	event_notify(client, &evt);
   205fa:	4620      	mov	r0, r4
		evt.type = MQTT_EVT_DISCONNECT;
   205fc:	bf16      	itet	ne
   205fe:	f88d 3000 	strbne.w	r3, [sp]
		evt.result = -ECONNREFUSED;
   20602:	9307      	streq	r3, [sp, #28]
		evt.result = result;
   20604:	9507      	strne	r5, [sp, #28]
	event_notify(client, &evt);
   20606:	f7ff ffd7 	bl	205b8 <event_notify>
	MQTT_STATE_INIT(client);
   2060a:	2300      	movs	r3, #0
	client->internal.last_activity = 0U;
   2060c:	e9c4 3305 	strd	r3, r3, [r4, #20]
	client->internal.remaining_payload = 0U;
   20610:	e9c4 3307 	strd	r3, r3, [r4, #28]
	if (err_code < 0) {
		MQTT_ERR("Failed to disconnect transport!");
	}

	disconnect_event_notify(client, result);
}
   20614:	b009      	add	sp, #36	; 0x24
   20616:	bd30      	pop	{r4, r5, pc}

00020618 <client_write>:
	return err_code;
}

static int client_write(struct mqtt_client *client, const u8_t *data,
			u32_t datalen)
{
   20618:	b538      	push	{r3, r4, r5, lr}
   2061a:	4605      	mov	r5, r0
	int err_code;

	MQTT_TRC("[%p]: Transport writing %d bytes.", client, datalen);

	err_code = mqtt_transport_write(client, data, datalen);
   2061c:	f7ef ffca 	bl	105b4 <mqtt_transport_write>
	if (err_code < 0) {
   20620:	1e04      	subs	r4, r0, #0
   20622:	da05      	bge.n	20630 <client_write+0x18>
		MQTT_TRC("TCP write failed, errno = %d, "
			 "closing connection", errno);
		client_disconnect(client, err_code);
   20624:	4621      	mov	r1, r4
   20626:	4628      	mov	r0, r5
   20628:	f7ff ffd7 	bl	205da <client_disconnect>

	MQTT_TRC("[%p]: Transport write complete.", client);
	client->internal.last_activity = mqtt_sys_tick_in_ms_get();

	return 0;
}
   2062c:	4620      	mov	r0, r4
   2062e:	bd38      	pop	{r3, r4, r5, pc}
	return z_impl_k_uptime_get();
   20630:	f001 f8fd 	bl	2182e <z_impl_k_uptime_get>
	return 0;
   20634:	2400      	movs	r4, #0
	return (u32_t)k_uptime_get();
   20636:	6168      	str	r0, [r5, #20]
   20638:	e7f8      	b.n	2062c <client_write+0x14>

0002063a <read_publish_payload>:
	return err_code;
}

static int read_publish_payload(struct mqtt_client *client, void *buffer,
				size_t length, bool shall_block)
{
   2063a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2063e:	460f      	mov	r7, r1
   20640:	4690      	mov	r8, r2
   20642:	461e      	mov	r6, r3
	int ret;

	NULL_PARAM_CHECK(client);
   20644:	4605      	mov	r5, r0
   20646:	b320      	cbz	r0, 20692 <read_publish_payload+0x58>

	mqtt_mutex_lock(client);
   20648:	f7ef fff8 	bl	1063c <mqtt_mutex_lock>

	if (client->internal.remaining_payload == 0U) {
   2064c:	6a2c      	ldr	r4, [r5, #32]
   2064e:	b1b4      	cbz	r4, 2067e <read_publish_payload+0x44>

	if (client->internal.remaining_payload < length) {
		length = client->internal.remaining_payload;
	}

	ret = mqtt_transport_read(client, buffer, length, shall_block);
   20650:	4544      	cmp	r4, r8
   20652:	4622      	mov	r2, r4
   20654:	4633      	mov	r3, r6
   20656:	bf28      	it	cs
   20658:	4642      	movcs	r2, r8
   2065a:	4639      	mov	r1, r7
   2065c:	4628      	mov	r0, r5
   2065e:	f7ef ffb5 	bl	105cc <mqtt_transport_read>
   20662:	4604      	mov	r4, r0
	if (!shall_block && ret == -EAGAIN) {
   20664:	b916      	cbnz	r6, 2066c <read_publish_payload+0x32>
   20666:	f110 0f0b 	cmn.w	r0, #11
   2066a:	d008      	beq.n	2067e <read_publish_payload+0x44>
		goto exit;
	}

	if (ret <= 0) {
   2066c:	2c00      	cmp	r4, #0
   2066e:	dc0c      	bgt.n	2068a <read_publish_payload+0x50>
		if (ret == 0) {
			ret = -ENOTCONN;
   20670:	bf08      	it	eq
   20672:	f06f 047f 	mvneq.w	r4, #127	; 0x7f
		}

		client_disconnect(client, ret);
   20676:	4628      	mov	r0, r5
   20678:	4621      	mov	r1, r4
   2067a:	f7ff ffae 	bl	205da <client_disconnect>
	}

	client->internal.remaining_payload -= ret;

exit:
	mqtt_mutex_unlock(client);
   2067e:	4628      	mov	r0, r5
   20680:	f7ef ffb0 	bl	105e4 <mqtt_mutex_unlock>

	return ret;
}
   20684:	4620      	mov	r0, r4
   20686:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	client->internal.remaining_payload -= ret;
   2068a:	6a2b      	ldr	r3, [r5, #32]
   2068c:	1b1b      	subs	r3, r3, r4
   2068e:	622b      	str	r3, [r5, #32]
   20690:	e7f5      	b.n	2067e <read_publish_payload+0x44>
	NULL_PARAM_CHECK(client);
   20692:	f06f 0415 	mvn.w	r4, #21
   20696:	e7f5      	b.n	20684 <read_publish_payload+0x4a>

00020698 <mqtt_client_init>:
{
   20698:	b510      	push	{r4, lr}
	NULL_PARAM_CHECK_VOID(client);
   2069a:	4604      	mov	r4, r0
   2069c:	b1a0      	cbz	r0, 206c8 <mqtt_client_init+0x30>
   2069e:	2264      	movs	r2, #100	; 0x64
   206a0:	2100      	movs	r1, #0
   206a2:	f001 f957 	bl	21954 <memset>
	MQTT_STATE_INIT(client);
   206a6:	2300      	movs	r3, #0
   206a8:	61a3      	str	r3, [r4, #24]
	return z_impl_k_mutex_init(mutex);
   206aa:	4620      	mov	r0, r4
   206ac:	f001 f82c 	bl	21708 <z_impl_k_mutex_init>
	client->protocol_version = MQTT_VERSION_3_1_1;
   206b0:	2304      	movs	r3, #4
   206b2:	f884 305e 	strb.w	r3, [r4, #94]	; 0x5e
	client->clean_session = 1U;
   206b6:	f894 3060 	ldrb.w	r3, [r4, #96]	; 0x60
   206ba:	f043 0302 	orr.w	r3, r3, #2
   206be:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60
	client->keepalive = MQTT_KEEPALIVE;
   206c2:	233c      	movs	r3, #60	; 0x3c
   206c4:	f8a4 305c 	strh.w	r3, [r4, #92]	; 0x5c
}
   206c8:	bd10      	pop	{r4, pc}

000206ca <mqtt_connect>:
{
   206ca:	b537      	push	{r0, r1, r2, r4, r5, lr}
	NULL_PARAM_CHECK(client);
   206cc:	4604      	mov	r4, r0
   206ce:	2800      	cmp	r0, #0
   206d0:	d03c      	beq.n	2074c <mqtt_connect+0x82>
	NULL_PARAM_CHECK(client->client_id.utf8);
   206d2:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
   206d4:	2b00      	cmp	r3, #0
   206d6:	d039      	beq.n	2074c <mqtt_connect+0x82>
	mqtt_mutex_lock(client);
   206d8:	f7ef ffb0 	bl	1063c <mqtt_mutex_lock>
	if ((client->tx_buf == NULL) || (client->rx_buf == NULL)) {
   206dc:	6d63      	ldr	r3, [r4, #84]	; 0x54
   206de:	b393      	cbz	r3, 20746 <mqtt_connect+0x7c>
   206e0:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
   206e2:	b383      	cbz	r3, 20746 <mqtt_connect+0x7c>
	err_code = mqtt_transport_connect(client);
   206e4:	4620      	mov	r0, r4
   206e6:	f7ef ff5d 	bl	105a4 <mqtt_transport_connect>
	if (err_code < 0) {
   206ea:	1e05      	subs	r5, r0, #0
   206ec:	db25      	blt.n	2073a <mqtt_connect+0x70>
	tx_buf_init(client, &packet);
   206ee:	4669      	mov	r1, sp
   206f0:	4620      	mov	r0, r4
   206f2:	f7ff ff53 	bl	2059c <tx_buf_init>
	MQTT_SET_STATE(client, MQTT_STATE_TCP_CONNECTED);
   206f6:	69a3      	ldr	r3, [r4, #24]
	err_code = connect_request_encode(client, &packet);
   206f8:	4669      	mov	r1, sp
	MQTT_SET_STATE(client, MQTT_STATE_TCP_CONNECTED);
   206fa:	f043 0302 	orr.w	r3, r3, #2
   206fe:	61a3      	str	r3, [r4, #24]
	err_code = connect_request_encode(client, &packet);
   20700:	4620      	mov	r0, r4
   20702:	f7ef fd8b 	bl	1021c <connect_request_encode>
	if (err_code < 0) {
   20706:	1e05      	subs	r5, r0, #0
   20708:	db13      	blt.n	20732 <mqtt_connect+0x68>
	err_code = mqtt_transport_write(client, packet.cur,
   2070a:	e9dd 1200 	ldrd	r1, r2, [sp]
   2070e:	4620      	mov	r0, r4
   20710:	1a52      	subs	r2, r2, r1
   20712:	f7ef ff4f 	bl	105b4 <mqtt_transport_write>
	if (err_code < 0) {
   20716:	1e05      	subs	r5, r0, #0
   20718:	db0b      	blt.n	20732 <mqtt_connect+0x68>
	return z_impl_k_uptime_get();
   2071a:	f001 f888 	bl	2182e <z_impl_k_uptime_get>
	client->unacked_ping = 0;
   2071e:	2500      	movs	r5, #0
   20720:	6160      	str	r0, [r4, #20]
   20722:	f884 505f 	strb.w	r5, [r4, #95]	; 0x5f
	mqtt_mutex_unlock(client);
   20726:	4620      	mov	r0, r4
   20728:	f7ef ff5c 	bl	105e4 <mqtt_mutex_unlock>
}
   2072c:	4628      	mov	r0, r5
   2072e:	b003      	add	sp, #12
   20730:	bd30      	pop	{r4, r5, pc}
	client_disconnect(client, err_code);
   20732:	4629      	mov	r1, r5
   20734:	4620      	mov	r0, r4
   20736:	f7ff ff50 	bl	205da <client_disconnect>
	MQTT_STATE_INIT(client);
   2073a:	2300      	movs	r3, #0
	client->internal.last_activity = 0U;
   2073c:	e9c4 3305 	strd	r3, r3, [r4, #20]
	client->internal.remaining_payload = 0U;
   20740:	e9c4 3307 	strd	r3, r3, [r4, #28]
   20744:	e7ef      	b.n	20726 <mqtt_connect+0x5c>
		err_code = -ENOMEM;
   20746:	f06f 050b 	mvn.w	r5, #11
   2074a:	e7f6      	b.n	2073a <mqtt_connect+0x70>
	NULL_PARAM_CHECK(client);
   2074c:	f06f 0515 	mvn.w	r5, #21
   20750:	e7ec      	b.n	2072c <mqtt_connect+0x62>

00020752 <mqtt_publish>:
{
   20752:	b573      	push	{r0, r1, r4, r5, r6, lr}
   20754:	460e      	mov	r6, r1
	NULL_PARAM_CHECK(client);
   20756:	4605      	mov	r5, r0
   20758:	b330      	cbz	r0, 207a8 <mqtt_publish+0x56>
	NULL_PARAM_CHECK(param);
   2075a:	b329      	cbz	r1, 207a8 <mqtt_publish+0x56>
	mqtt_mutex_lock(client);
   2075c:	f7ef ff6e 	bl	1063c <mqtt_mutex_lock>
	tx_buf_init(client, &packet);
   20760:	4669      	mov	r1, sp
   20762:	4628      	mov	r0, r5
   20764:	f7ff ff1a 	bl	2059c <tx_buf_init>
	if (!MQTT_HAS_STATE(client, MQTT_STATE_CONNECTED)) {
   20768:	69ab      	ldr	r3, [r5, #24]
   2076a:	075b      	lsls	r3, r3, #29
   2076c:	d519      	bpl.n	207a2 <mqtt_publish+0x50>
	err_code = publish_encode(param, &packet);
   2076e:	4669      	mov	r1, sp
   20770:	4630      	mov	r0, r6
   20772:	f7ff fda3 	bl	202bc <publish_encode>
	if (err_code < 0) {
   20776:	1e04      	subs	r4, r0, #0
   20778:	db0d      	blt.n	20796 <mqtt_publish+0x44>
	err_code = client_write(client, packet.cur, packet.end - packet.cur);
   2077a:	e9dd 1200 	ldrd	r1, r2, [sp]
   2077e:	4628      	mov	r0, r5
   20780:	1a52      	subs	r2, r2, r1
   20782:	f7ff ff49 	bl	20618 <client_write>
	if (err_code < 0) {
   20786:	1e04      	subs	r4, r0, #0
   20788:	db05      	blt.n	20796 <mqtt_publish+0x44>
	err_code = client_write(client, param->message.payload.data,
   2078a:	e9d6 1203 	ldrd	r1, r2, [r6, #12]
   2078e:	4628      	mov	r0, r5
   20790:	f7ff ff42 	bl	20618 <client_write>
   20794:	4604      	mov	r4, r0
	mqtt_mutex_unlock(client);
   20796:	4628      	mov	r0, r5
   20798:	f7ef ff24 	bl	105e4 <mqtt_mutex_unlock>
}
   2079c:	4620      	mov	r0, r4
   2079e:	b002      	add	sp, #8
   207a0:	bd70      	pop	{r4, r5, r6, pc}
		return -ENOTCONN;
   207a2:	f06f 047f 	mvn.w	r4, #127	; 0x7f
   207a6:	e7f6      	b.n	20796 <mqtt_publish+0x44>
	NULL_PARAM_CHECK(client);
   207a8:	f06f 0415 	mvn.w	r4, #21
   207ac:	e7f6      	b.n	2079c <mqtt_publish+0x4a>

000207ae <mqtt_disconnect>:
{
   207ae:	b537      	push	{r0, r1, r2, r4, r5, lr}
	NULL_PARAM_CHECK(client);
   207b0:	4604      	mov	r4, r0
   207b2:	b310      	cbz	r0, 207fa <mqtt_disconnect+0x4c>
	mqtt_mutex_lock(client);
   207b4:	f7ef ff42 	bl	1063c <mqtt_mutex_lock>
	tx_buf_init(client, &packet);
   207b8:	4669      	mov	r1, sp
   207ba:	4620      	mov	r0, r4
   207bc:	f7ff feee 	bl	2059c <tx_buf_init>
	if (!MQTT_HAS_STATE(client, MQTT_STATE_CONNECTED)) {
   207c0:	69a3      	ldr	r3, [r4, #24]
   207c2:	075b      	lsls	r3, r3, #29
   207c4:	d516      	bpl.n	207f4 <mqtt_disconnect+0x46>
	err_code = disconnect_encode(&packet);
   207c6:	4668      	mov	r0, sp
   207c8:	f7ef fda8 	bl	1031c <disconnect_encode>
	if (err_code < 0) {
   207cc:	1e05      	subs	r5, r0, #0
   207ce:	db0b      	blt.n	207e8 <mqtt_disconnect+0x3a>
	err_code = client_write(client, packet.cur, packet.end - packet.cur);
   207d0:	e9dd 1200 	ldrd	r1, r2, [sp]
   207d4:	4620      	mov	r0, r4
   207d6:	1a52      	subs	r2, r2, r1
   207d8:	f7ff ff1e 	bl	20618 <client_write>
	if (err_code < 0) {
   207dc:	1e05      	subs	r5, r0, #0
   207de:	db03      	blt.n	207e8 <mqtt_disconnect+0x3a>
	client_disconnect(client, 0);
   207e0:	2100      	movs	r1, #0
   207e2:	4620      	mov	r0, r4
   207e4:	f7ff fef9 	bl	205da <client_disconnect>
	mqtt_mutex_unlock(client);
   207e8:	4620      	mov	r0, r4
   207ea:	f7ef fefb 	bl	105e4 <mqtt_mutex_unlock>
}
   207ee:	4628      	mov	r0, r5
   207f0:	b003      	add	sp, #12
   207f2:	bd30      	pop	{r4, r5, pc}
		return -ENOTCONN;
   207f4:	f06f 057f 	mvn.w	r5, #127	; 0x7f
   207f8:	e7f6      	b.n	207e8 <mqtt_disconnect+0x3a>
	NULL_PARAM_CHECK(client);
   207fa:	f06f 0515 	mvn.w	r5, #21
   207fe:	e7f6      	b.n	207ee <mqtt_disconnect+0x40>

00020800 <mqtt_subscribe>:
{
   20800:	b537      	push	{r0, r1, r2, r4, r5, lr}
   20802:	460c      	mov	r4, r1
	NULL_PARAM_CHECK(client);
   20804:	4605      	mov	r5, r0
   20806:	b1f8      	cbz	r0, 20848 <mqtt_subscribe+0x48>
	NULL_PARAM_CHECK(param);
   20808:	b1f1      	cbz	r1, 20848 <mqtt_subscribe+0x48>
	mqtt_mutex_lock(client);
   2080a:	f7ef ff17 	bl	1063c <mqtt_mutex_lock>
	tx_buf_init(client, &packet);
   2080e:	4669      	mov	r1, sp
   20810:	4628      	mov	r0, r5
   20812:	f7ff fec3 	bl	2059c <tx_buf_init>
	if (!MQTT_HAS_STATE(client, MQTT_STATE_CONNECTED)) {
   20816:	69ab      	ldr	r3, [r5, #24]
   20818:	075b      	lsls	r3, r3, #29
   2081a:	d512      	bpl.n	20842 <mqtt_subscribe+0x42>
	err_code = subscribe_encode(param, &packet);
   2081c:	4620      	mov	r0, r4
   2081e:	4669      	mov	r1, sp
   20820:	f7ff fd88 	bl	20334 <subscribe_encode>
	if (err_code < 0) {
   20824:	1e04      	subs	r4, r0, #0
   20826:	db06      	blt.n	20836 <mqtt_subscribe+0x36>
	err_code = client_write(client, packet.cur, packet.end - packet.cur);
   20828:	e9dd 1200 	ldrd	r1, r2, [sp]
   2082c:	4628      	mov	r0, r5
   2082e:	1a52      	subs	r2, r2, r1
   20830:	f7ff fef2 	bl	20618 <client_write>
   20834:	4604      	mov	r4, r0
	mqtt_mutex_unlock(client);
   20836:	4628      	mov	r0, r5
   20838:	f7ef fed4 	bl	105e4 <mqtt_mutex_unlock>
}
   2083c:	4620      	mov	r0, r4
   2083e:	b003      	add	sp, #12
   20840:	bd30      	pop	{r4, r5, pc}
		return -ENOTCONN;
   20842:	f06f 047f 	mvn.w	r4, #127	; 0x7f
   20846:	e7f6      	b.n	20836 <mqtt_subscribe+0x36>
	NULL_PARAM_CHECK(client);
   20848:	f06f 0415 	mvn.w	r4, #21
   2084c:	e7f6      	b.n	2083c <mqtt_subscribe+0x3c>

0002084e <mqtt_ping>:
{
   2084e:	b537      	push	{r0, r1, r2, r4, r5, lr}
	NULL_PARAM_CHECK(client);
   20850:	4604      	mov	r4, r0
   20852:	b320      	cbz	r0, 2089e <mqtt_ping+0x50>
	mqtt_mutex_lock(client);
   20854:	f7ef fef2 	bl	1063c <mqtt_mutex_lock>
	tx_buf_init(client, &packet);
   20858:	4669      	mov	r1, sp
   2085a:	4620      	mov	r0, r4
   2085c:	f7ff fe9e 	bl	2059c <tx_buf_init>
	if (!MQTT_HAS_STATE(client, MQTT_STATE_CONNECTED)) {
   20860:	69a3      	ldr	r3, [r4, #24]
   20862:	075b      	lsls	r3, r3, #29
   20864:	d518      	bpl.n	20898 <mqtt_ping+0x4a>
	err_code = ping_request_encode(&packet);
   20866:	4668      	mov	r0, sp
   20868:	f7ef fd6a 	bl	10340 <ping_request_encode>
	if (err_code < 0) {
   2086c:	1e05      	subs	r5, r0, #0
   2086e:	db0d      	blt.n	2088c <mqtt_ping+0x3e>
	err_code = client_write(client, packet.cur, packet.end - packet.cur);
   20870:	e9dd 1200 	ldrd	r1, r2, [sp]
   20874:	4620      	mov	r0, r4
   20876:	1a52      	subs	r2, r2, r1
   20878:	f7ff fece 	bl	20618 <client_write>
	if (client->unacked_ping >= INT8_MAX) {
   2087c:	f994 305f 	ldrsb.w	r3, [r4, #95]	; 0x5f
	err_code = client_write(client, packet.cur, packet.end - packet.cur);
   20880:	4605      	mov	r5, r0
	if (client->unacked_ping >= INT8_MAX) {
   20882:	2b7f      	cmp	r3, #127	; 0x7f
   20884:	d002      	beq.n	2088c <mqtt_ping+0x3e>
		client->unacked_ping++;
   20886:	3301      	adds	r3, #1
   20888:	f884 305f 	strb.w	r3, [r4, #95]	; 0x5f
	mqtt_mutex_unlock(client);
   2088c:	4620      	mov	r0, r4
   2088e:	f7ef fea9 	bl	105e4 <mqtt_mutex_unlock>
}
   20892:	4628      	mov	r0, r5
   20894:	b003      	add	sp, #12
   20896:	bd30      	pop	{r4, r5, pc}
		return -ENOTCONN;
   20898:	f06f 057f 	mvn.w	r5, #127	; 0x7f
   2089c:	e7f6      	b.n	2088c <mqtt_ping+0x3e>
	NULL_PARAM_CHECK(client);
   2089e:	f06f 0515 	mvn.w	r5, #21
   208a2:	e7f6      	b.n	20892 <mqtt_ping+0x44>

000208a4 <mqtt_live>:
{
   208a4:	b570      	push	{r4, r5, r6, lr}
	NULL_PARAM_CHECK(client);
   208a6:	4606      	mov	r6, r0
   208a8:	b300      	cbz	r0, 208ec <mqtt_live+0x48>
	mqtt_mutex_lock(client);
   208aa:	f7ef fec7 	bl	1063c <mqtt_mutex_lock>
	elapsed_time = mqtt_elapsed_time_in_ms_get(
   208ae:	6974      	ldr	r4, [r6, #20]
   208b0:	f000 ffbd 	bl	2182e <z_impl_k_uptime_get>
 *
 * @retval Time elapsed since last_activity time.
 */
static inline u32_t mqtt_elapsed_time_in_ms_get(u32_t last_activity)
{
	s32_t diff = k_uptime_get_32() - last_activity;
   208b4:	1b00      	subs	r0, r0, r4
	if ((client->keepalive > 0) &&
   208b6:	f8b6 405c 	ldrh.w	r4, [r6, #92]	; 0x5c

	if (diff < 0) {
		return 0;
   208ba:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   208be:	b19c      	cbz	r4, 208e8 <mqtt_live+0x44>
	    (elapsed_time >= (client->keepalive * 1000))) {
   208c0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   208c4:	435c      	muls	r4, r3
	if ((client->keepalive > 0) &&
   208c6:	4284      	cmp	r4, r0
   208c8:	d80d      	bhi.n	208e6 <mqtt_live+0x42>
		err_code = mqtt_ping(client);
   208ca:	4630      	mov	r0, r6
   208cc:	f7ff ffbf 	bl	2084e <mqtt_ping>
		ping_sent = true;
   208d0:	2401      	movs	r4, #1
		err_code = mqtt_ping(client);
   208d2:	4605      	mov	r5, r0
	mqtt_mutex_unlock(client);
   208d4:	4630      	mov	r0, r6
   208d6:	f7ef fe85 	bl	105e4 <mqtt_mutex_unlock>
		return -EAGAIN;
   208da:	2c00      	cmp	r4, #0
   208dc:	bf08      	it	eq
   208de:	f06f 050a 	mvneq.w	r5, #10
}
   208e2:	4628      	mov	r0, r5
   208e4:	bd70      	pop	{r4, r5, r6, pc}
	bool ping_sent = false;
   208e6:	2400      	movs	r4, #0
	int err_code = 0;
   208e8:	4625      	mov	r5, r4
   208ea:	e7f3      	b.n	208d4 <mqtt_live+0x30>
	NULL_PARAM_CHECK(client);
   208ec:	f06f 0515 	mvn.w	r5, #21
   208f0:	e7f7      	b.n	208e2 <mqtt_live+0x3e>

000208f2 <mqtt_keepalive_time_left>:
{
   208f2:	b538      	push	{r3, r4, r5, lr}
   208f4:	4605      	mov	r5, r0
	u32_t elapsed_time = mqtt_elapsed_time_in_ms_get(
   208f6:	6944      	ldr	r4, [r0, #20]
   208f8:	f000 ff99 	bl	2182e <z_impl_k_uptime_get>
	s32_t diff = k_uptime_get_32() - last_activity;
   208fc:	1b04      	subs	r4, r0, r4
	u32_t keepalive_ms = 1000U * client->keepalive;
   208fe:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   20902:	f8b5 205c 	ldrh.w	r2, [r5, #92]	; 0x5c
		return 0;
   20906:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
   2090a:	4350      	muls	r0, r2
	if (client->keepalive == 0) {
   2090c:	b11a      	cbz	r2, 20916 <mqtt_keepalive_time_left+0x24>
	if (keepalive_ms <= elapsed_time) {
   2090e:	42a0      	cmp	r0, r4
   20910:	d904      	bls.n	2091c <mqtt_keepalive_time_left+0x2a>
	return keepalive_ms - elapsed_time;
   20912:	1b00      	subs	r0, r0, r4
}
   20914:	bd38      	pop	{r3, r4, r5, pc}
		return UINT32_MAX;
   20916:	f04f 30ff 	mov.w	r0, #4294967295
   2091a:	e7fb      	b.n	20914 <mqtt_keepalive_time_left+0x22>
		return 0;
   2091c:	2000      	movs	r0, #0
   2091e:	e7f9      	b.n	20914 <mqtt_keepalive_time_left+0x22>

00020920 <mqtt_input>:
{
   20920:	b538      	push	{r3, r4, r5, lr}
	NULL_PARAM_CHECK(client);
   20922:	4605      	mov	r5, r0
   20924:	b1d0      	cbz	r0, 2095c <mqtt_input+0x3c>
	mqtt_mutex_lock(client);
   20926:	f7ef fe89 	bl	1063c <mqtt_mutex_lock>
	if (MQTT_HAS_STATE(client, MQTT_STATE_TCP_CONNECTED)) {
   2092a:	69ab      	ldr	r3, [r5, #24]
   2092c:	079b      	lsls	r3, r3, #30
   2092e:	d50f      	bpl.n	20950 <mqtt_input+0x30>
	if (client->internal.remaining_payload > 0) {
   20930:	6a2b      	ldr	r3, [r5, #32]
   20932:	b983      	cbnz	r3, 20956 <mqtt_input+0x36>
	err_code = mqtt_handle_rx(client);
   20934:	4628      	mov	r0, r5
   20936:	f7ff fd5d 	bl	203f4 <mqtt_handle_rx>
	if (err_code < 0) {
   2093a:	1e04      	subs	r4, r0, #0
   2093c:	da03      	bge.n	20946 <mqtt_input+0x26>
		client_disconnect(client, err_code);
   2093e:	4621      	mov	r1, r4
   20940:	4628      	mov	r0, r5
   20942:	f7ff fe4a 	bl	205da <client_disconnect>
	mqtt_mutex_unlock(client);
   20946:	4628      	mov	r0, r5
   20948:	f7ef fe4c 	bl	105e4 <mqtt_mutex_unlock>
}
   2094c:	4620      	mov	r0, r4
   2094e:	bd38      	pop	{r3, r4, r5, pc}
		err_code = -EACCES;
   20950:	f06f 040c 	mvn.w	r4, #12
   20954:	e7f7      	b.n	20946 <mqtt_input+0x26>
		return -EBUSY;
   20956:	f06f 040f 	mvn.w	r4, #15
   2095a:	e7f4      	b.n	20946 <mqtt_input+0x26>
	NULL_PARAM_CHECK(client);
   2095c:	f06f 0415 	mvn.w	r4, #21
   20960:	e7f4      	b.n	2094c <mqtt_input+0x2c>

00020962 <mqtt_read_publish_payload>:

int mqtt_read_publish_payload(struct mqtt_client *client, void *buffer,
			      size_t length)
{
	return read_publish_payload(client, buffer, length, false);
   20962:	2300      	movs	r3, #0
   20964:	f7ff be69 	b.w	2063a <read_publish_payload>

00020968 <gpio_nrfx_write>:
{
   20968:	b510      	push	{r4, lr}
	return port->config->config_info;
   2096a:	6804      	ldr	r4, [r0, #0]
   2096c:	6880      	ldr	r0, [r0, #8]
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   2096e:	68a4      	ldr	r4, [r4, #8]
	if (access_op == GPIO_ACCESS_BY_PORT) {
   20970:	2901      	cmp	r1, #1
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   20972:	6824      	ldr	r4, [r4, #0]
	if (access_op == GPIO_ACCESS_BY_PORT) {
   20974:	69c0      	ldr	r0, [r0, #28]
   20976:	d103      	bne.n	20980 <gpio_nrfx_write+0x18>
		nrf_gpio_port_out_write(reg, value ^ data->inverted);
   20978:	4058      	eors	r0, r3
    p_reg->OUT = value;
   2097a:	6060      	str	r0, [r4, #4]
}
   2097c:	2000      	movs	r0, #0
   2097e:	bd10      	pop	{r4, pc}
		if ((value > 0) ^ ((BIT(pin) & data->inverted) != 0)) {
   20980:	3300      	adds	r3, #0
   20982:	f04f 0101 	mov.w	r1, #1
   20986:	bf18      	it	ne
   20988:	2301      	movne	r3, #1
   2098a:	40d0      	lsrs	r0, r2
   2098c:	f000 0001 	and.w	r0, r0, #1
   20990:	4091      	lsls	r1, r2
   20992:	4283      	cmp	r3, r0
    p_reg->OUTSET = set_mask;
   20994:	bf14      	ite	ne
   20996:	60a1      	strne	r1, [r4, #8]
}


NRF_STATIC_INLINE void nrf_gpio_port_out_clear(NRF_GPIO_Type * p_reg, uint32_t clr_mask)
{
    p_reg->OUTCLR = clr_mask;
   20998:	60e1      	streq	r1, [r4, #12]
   2099a:	e7ef      	b.n	2097c <gpio_nrfx_write+0x14>

0002099c <gpio_nrfx_read>:
{
   2099c:	b570      	push	{r4, r5, r6, lr}
	return port->config->config_info;
   2099e:	6804      	ldr	r4, [r0, #0]
	u32_t port_val = (port_in | port_out) ^ data->inverted;
   209a0:	6880      	ldr	r0, [r0, #8]
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   209a2:	68a4      	ldr	r4, [r4, #8]
	u32_t port_val = (port_in | port_out) ^ data->inverted;
   209a4:	69c0      	ldr	r0, [r0, #28]
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   209a6:	6825      	ldr	r5, [r4, #0]
	if (access_op == GPIO_ACCESS_BY_PORT) {
   209a8:	2901      	cmp	r1, #1
    return p_reg->DIR;
   209aa:	696e      	ldr	r6, [r5, #20]
    return p_reg->IN;
   209ac:	692c      	ldr	r4, [r5, #16]
    return p_reg->OUT;
   209ae:	686d      	ldr	r5, [r5, #4]
	u32_t port_val = (port_in | port_out) ^ data->inverted;
   209b0:	ea80 0004 	eor.w	r0, r0, r4
   209b4:	ea84 0405 	eor.w	r4, r4, r5
   209b8:	ea04 0406 	and.w	r4, r4, r6
   209bc:	ea80 0004 	eor.w	r0, r0, r4
		*value = (port_val & BIT(pin)) ? 1 : 0;
   209c0:	bf1c      	itt	ne
   209c2:	40d0      	lsrne	r0, r2
   209c4:	f000 0001 	andne.w	r0, r0, #1
   209c8:	6018      	str	r0, [r3, #0]
}
   209ca:	2000      	movs	r0, #0
   209cc:	bd70      	pop	{r4, r5, r6, pc}

000209ce <gpio_nrfx_pin_disable_callback>:
	if (access_op == GPIO_ACCESS_BY_PORT) {
   209ce:	2901      	cmp	r1, #1
{
   209d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
		from_pin = pin;
   209d4:	bf18      	it	ne
   209d6:	b2d4      	uxtbne	r4, r2
{
   209d8:	4606      	mov	r6, r0
		to_pin   = pin;
   209da:	bf12      	itee	ne
   209dc:	4625      	movne	r5, r4
		to_pin   = 31U;
   209de:	251f      	moveq	r5, #31
		from_pin = 0U;
   209e0:	2400      	moveq	r4, #0
		WRITE_BIT(data->int_en, curr_pin, enable);
   209e2:	f04f 0801 	mov.w	r8, #1
	struct gpio_nrfx_data *data = get_port_data(port);
   209e6:	6887      	ldr	r7, [r0, #8]
	for (u8_t curr_pin = from_pin; curr_pin <= to_pin; ++curr_pin) {
   209e8:	42ac      	cmp	r4, r5
   209ea:	d902      	bls.n	209f2 <gpio_nrfx_pin_disable_callback+0x24>
	return res;
   209ec:	2000      	movs	r0, #0
}
   209ee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		WRITE_BIT(data->int_en, curr_pin, enable);
   209f2:	68fb      	ldr	r3, [r7, #12]
   209f4:	fa08 f204 	lsl.w	r2, r8, r4
   209f8:	ea23 0302 	bic.w	r3, r3, r2
   209fc:	60fb      	str	r3, [r7, #12]
		res = gpiote_pin_int_cfg(port, curr_pin);
   209fe:	4621      	mov	r1, r4
   20a00:	4630      	mov	r0, r6
   20a02:	f7ef ff21 	bl	10848 <gpiote_pin_int_cfg>
		if (res != 0) {
   20a06:	2800      	cmp	r0, #0
   20a08:	d1f1      	bne.n	209ee <gpio_nrfx_pin_disable_callback+0x20>
	for (u8_t curr_pin = from_pin; curr_pin <= to_pin; ++curr_pin) {
   20a0a:	3401      	adds	r4, #1
   20a0c:	b2e4      	uxtb	r4, r4
   20a0e:	e7eb      	b.n	209e8 <gpio_nrfx_pin_disable_callback+0x1a>

00020a10 <gpio_nrfx_pin_enable_callback>:
	if (access_op == GPIO_ACCESS_BY_PORT) {
   20a10:	2901      	cmp	r1, #1
{
   20a12:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
		from_pin = pin;
   20a16:	bf18      	it	ne
   20a18:	b2d4      	uxtbne	r4, r2
{
   20a1a:	4606      	mov	r6, r0
		to_pin   = pin;
   20a1c:	bf12      	itee	ne
   20a1e:	4625      	movne	r5, r4
		to_pin   = 31U;
   20a20:	251f      	moveq	r5, #31
		from_pin = 0U;
   20a22:	2400      	moveq	r4, #0
		WRITE_BIT(data->int_en, curr_pin, enable);
   20a24:	f04f 0801 	mov.w	r8, #1
	struct gpio_nrfx_data *data = get_port_data(port);
   20a28:	6887      	ldr	r7, [r0, #8]
	for (u8_t curr_pin = from_pin; curr_pin <= to_pin; ++curr_pin) {
   20a2a:	42ac      	cmp	r4, r5
   20a2c:	d902      	bls.n	20a34 <gpio_nrfx_pin_enable_callback+0x24>
	return res;
   20a2e:	2000      	movs	r0, #0
}
   20a30:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		WRITE_BIT(data->int_en, curr_pin, enable);
   20a34:	68fb      	ldr	r3, [r7, #12]
   20a36:	fa08 f204 	lsl.w	r2, r8, r4
   20a3a:	4313      	orrs	r3, r2
   20a3c:	60fb      	str	r3, [r7, #12]
		res = gpiote_pin_int_cfg(port, curr_pin);
   20a3e:	4621      	mov	r1, r4
   20a40:	4630      	mov	r0, r6
   20a42:	f7ef ff01 	bl	10848 <gpiote_pin_int_cfg>
		if (res != 0) {
   20a46:	2800      	cmp	r0, #0
   20a48:	d1f2      	bne.n	20a30 <gpio_nrfx_pin_enable_callback+0x20>
	for (u8_t curr_pin = from_pin; curr_pin <= to_pin; ++curr_pin) {
   20a4a:	3401      	adds	r4, #1
   20a4c:	b2e4      	uxtb	r4, r4
   20a4e:	e7ec      	b.n	20a2a <gpio_nrfx_pin_enable_callback+0x1a>

00020a50 <uarte_nrfx_isr_int>:
	if (data->int_driven->disable_tx_irq &&
   20a50:	6882      	ldr	r2, [r0, #8]
	return dev->config->config_info;
   20a52:	6803      	ldr	r3, [r0, #0]
	if (data->int_driven->disable_tx_irq &&
   20a54:	6892      	ldr	r2, [r2, #8]
	return config->uarte_regs;
   20a56:	689b      	ldr	r3, [r3, #8]
	if (data->int_driven->disable_tx_irq &&
   20a58:	7b91      	ldrb	r1, [r2, #14]
	return config->uarte_regs;
   20a5a:	681b      	ldr	r3, [r3, #0]
	if (data->int_driven->disable_tx_irq &&
   20a5c:	b159      	cbz	r1, 20a76 <uarte_nrfx_isr_int+0x26>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   20a5e:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
   20a62:	b141      	cbz	r1, 20a76 <uarte_nrfx_isr_int+0x26>
    p_reg->INTENCLR = mask;
   20a64:	f44f 7180 	mov.w	r1, #256	; 0x100
   20a68:	f8c3 1308 	str.w	r1, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   20a6c:	2101      	movs	r1, #1
   20a6e:	60d9      	str	r1, [r3, #12]
		data->int_driven->disable_tx_irq = false;
   20a70:	2300      	movs	r3, #0
   20a72:	7393      	strb	r3, [r2, #14]
		return;
   20a74:	4770      	bx	lr
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   20a76:	f8d3 1124 	ldr.w	r1, [r3, #292]	; 0x124
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ERROR)) {
   20a7a:	b111      	cbz	r1, 20a82 <uarte_nrfx_isr_int+0x32>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   20a7c:	2100      	movs	r1, #0
   20a7e:	f8c3 1124 	str.w	r1, [r3, #292]	; 0x124
	if (data->int_driven->cb) {
   20a82:	6813      	ldr	r3, [r2, #0]
   20a84:	b10b      	cbz	r3, 20a8a <uarte_nrfx_isr_int+0x3a>
		data->int_driven->cb(data->int_driven->cb_data);
   20a86:	6850      	ldr	r0, [r2, #4]
   20a88:	4718      	bx	r3
}
   20a8a:	4770      	bx	lr

00020a8c <uarte_nrfx_config_get>:
{
   20a8c:	460b      	mov	r3, r1
	*cfg = get_dev_data(dev)->uart_config;
   20a8e:	6882      	ldr	r2, [r0, #8]
   20a90:	e892 0003 	ldmia.w	r2, {r0, r1}
   20a94:	e883 0003 	stmia.w	r3, {r0, r1}
}
   20a98:	2000      	movs	r0, #0
   20a9a:	4770      	bx	lr

00020a9c <uarte_nrfx_err_check>:
	return dev->config->config_info;
   20a9c:	6803      	ldr	r3, [r0, #0]
	return config->uarte_regs;
   20a9e:	689b      	ldr	r3, [r3, #8]
   20aa0:	681b      	ldr	r3, [r3, #0]
    uint32_t errsrc_mask = p_reg->ERRORSRC;
   20aa2:	f8d3 0480 	ldr.w	r0, [r3, #1152]	; 0x480
    p_reg->ERRORSRC = errsrc_mask;
   20aa6:	f8c3 0480 	str.w	r0, [r3, #1152]	; 0x480
}
   20aaa:	4770      	bx	lr

00020aac <uarte_nrfx_poll_in>:
	return dev->config->config_info;
   20aac:	6803      	ldr	r3, [r0, #0]
	const struct uarte_nrfx_data *data = get_dev_data(dev);
   20aae:	6882      	ldr	r2, [r0, #8]
	return config->uarte_regs;
   20ab0:	689b      	ldr	r3, [r3, #8]
   20ab2:	681b      	ldr	r3, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   20ab4:	f8d3 0110 	ldr.w	r0, [r3, #272]	; 0x110
	if (!nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
   20ab8:	b138      	cbz	r0, 20aca <uarte_nrfx_poll_in+0x1e>
	*c = data->rx_data;
   20aba:	7b12      	ldrb	r2, [r2, #12]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   20abc:	2000      	movs	r0, #0
   20abe:	700a      	strb	r2, [r1, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   20ac0:	2201      	movs	r2, #1
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   20ac2:	f8c3 0110 	str.w	r0, [r3, #272]	; 0x110
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   20ac6:	601a      	str	r2, [r3, #0]
	return 0;
   20ac8:	4770      	bx	lr
		return -1;
   20aca:	f04f 30ff 	mov.w	r0, #4294967295
}
   20ace:	4770      	bx	lr

00020ad0 <uarte_nrfx_poll_out>:
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   20ad0:	2200      	movs	r2, #0
	return dev->config->config_info;
   20ad2:	6803      	ldr	r3, [r0, #0]
{
   20ad4:	b082      	sub	sp, #8
	return config->uarte_regs;
   20ad6:	689b      	ldr	r3, [r3, #8]
{
   20ad8:	f88d 1007 	strb.w	r1, [sp, #7]
	return config->uarte_regs;
   20adc:	681b      	ldr	r3, [r3, #0]
   20ade:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   20ae2:	f10d 0207 	add.w	r2, sp, #7
   20ae6:	f8c3 2544 	str.w	r2, [r3, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
   20aea:	2201      	movs	r2, #1
   20aec:	f8c3 2548 	str.w	r2, [r3, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   20af0:	609a      	str	r2, [r3, #8]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   20af2:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
	while (!nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDTX)) {
   20af6:	2900      	cmp	r1, #0
   20af8:	d0fb      	beq.n	20af2 <uarte_nrfx_poll_out+0x22>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   20afa:	60da      	str	r2, [r3, #12]
}
   20afc:	b002      	add	sp, #8
   20afe:	4770      	bx	lr

00020b00 <uarte_nrfx_fifo_fill>:
	return dev->config->config_info;
   20b00:	6803      	ldr	r3, [r0, #0]
{
   20b02:	b570      	push	{r4, r5, r6, lr}
	return config->uarte_regs;
   20b04:	689b      	ldr	r3, [r3, #8]
   20b06:	681c      	ldr	r4, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   20b08:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
	if (!nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDTX)) {
   20b0c:	b1bb      	cbz	r3, 20b3e <uarte_nrfx_fifo_fill+0x3e>
	struct uarte_nrfx_data *data = get_dev_data(dev);
   20b0e:	6885      	ldr	r5, [r0, #8]
	if (len > data->int_driven->tx_buff_size) {
   20b10:	68ab      	ldr	r3, [r5, #8]
   20b12:	8998      	ldrh	r0, [r3, #12]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   20b14:	2300      	movs	r3, #0
   20b16:	4290      	cmp	r0, r2
   20b18:	bfa8      	it	ge
   20b1a:	4610      	movge	r0, r2
   20b1c:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
	for (int i = 0; i < len; i++) {
   20b20:	68aa      	ldr	r2, [r5, #8]
   20b22:	4283      	cmp	r3, r0
   20b24:	6892      	ldr	r2, [r2, #8]
   20b26:	db06      	blt.n	20b36 <uarte_nrfx_fifo_fill+0x36>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   20b28:	2301      	movs	r3, #1
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   20b2a:	f8c4 2544 	str.w	r2, [r4, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
   20b2e:	f8c4 0548 	str.w	r0, [r4, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   20b32:	60a3      	str	r3, [r4, #8]
}
   20b34:	bd70      	pop	{r4, r5, r6, pc}
		data->int_driven->tx_buffer[i] = tx_data[i];
   20b36:	5cce      	ldrb	r6, [r1, r3]
   20b38:	54d6      	strb	r6, [r2, r3]
	for (int i = 0; i < len; i++) {
   20b3a:	3301      	adds	r3, #1
   20b3c:	e7f0      	b.n	20b20 <uarte_nrfx_fifo_fill+0x20>
		return 0;
   20b3e:	4618      	mov	r0, r3
   20b40:	e7f8      	b.n	20b34 <uarte_nrfx_fifo_fill+0x34>

00020b42 <uarte_nrfx_fifo_read>:
	return dev->config->config_info;
   20b42:	6803      	ldr	r3, [r0, #0]
	return config->uarte_regs;
   20b44:	689b      	ldr	r3, [r3, #8]
   20b46:	681a      	ldr	r2, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   20b48:	f8d2 3110 	ldr.w	r3, [r2, #272]	; 0x110
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
   20b4c:	b143      	cbz	r3, 20b60 <uarte_nrfx_fifo_read+0x1e>
	const struct uarte_nrfx_data *data = get_dev_data(dev);
   20b4e:	6883      	ldr	r3, [r0, #8]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   20b50:	2000      	movs	r0, #0
   20b52:	f8c2 0110 	str.w	r0, [r2, #272]	; 0x110
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   20b56:	2001      	movs	r0, #1
		rx_data[num_rx++] = (u8_t)data->rx_data;
   20b58:	7b1b      	ldrb	r3, [r3, #12]
   20b5a:	700b      	strb	r3, [r1, #0]
   20b5c:	6010      	str	r0, [r2, #0]
   20b5e:	4770      	bx	lr
	int num_rx = 0;
   20b60:	4618      	mov	r0, r3
}
   20b62:	4770      	bx	lr

00020b64 <uarte_nrfx_irq_tx_enable>:
	data->int_driven->disable_tx_irq = false;
   20b64:	2100      	movs	r1, #0
	return dev->config->config_info;
   20b66:	6803      	ldr	r3, [r0, #0]
	data->int_driven->disable_tx_irq = false;
   20b68:	6882      	ldr	r2, [r0, #8]
	return config->uarte_regs;
   20b6a:	689b      	ldr	r3, [r3, #8]
	data->int_driven->disable_tx_irq = false;
   20b6c:	6892      	ldr	r2, [r2, #8]
	return config->uarte_regs;
   20b6e:	681b      	ldr	r3, [r3, #0]
	data->int_driven->disable_tx_irq = false;
   20b70:	7391      	strb	r1, [r2, #14]
    p_reg->INTENSET = mask;
   20b72:	f44f 7280 	mov.w	r2, #256	; 0x100
   20b76:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
   20b7a:	4770      	bx	lr

00020b7c <uarte_nrfx_irq_tx_disable>:
	data->int_driven->disable_tx_irq = true;
   20b7c:	2201      	movs	r2, #1
   20b7e:	6883      	ldr	r3, [r0, #8]
   20b80:	689b      	ldr	r3, [r3, #8]
   20b82:	739a      	strb	r2, [r3, #14]
}
   20b84:	4770      	bx	lr

00020b86 <uarte_nrfx_irq_tx_ready_complete>:
	return dev->config->config_info;
   20b86:	6803      	ldr	r3, [r0, #0]
	return config->uarte_regs;
   20b88:	689b      	ldr	r3, [r3, #8]
   20b8a:	681b      	ldr	r3, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   20b8c:	f8d3 0120 	ldr.w	r0, [r3, #288]	; 0x120
	return nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDTX) &&
   20b90:	b118      	cbz	r0, 20b9a <uarte_nrfx_irq_tx_ready_complete+0x14>
    return p_reg->INTENSET & mask;
   20b92:	f8d3 0304 	ldr.w	r0, [r3, #772]	; 0x304
   20b96:	f3c0 2000 	ubfx	r0, r0, #8, #1
}
   20b9a:	4770      	bx	lr

00020b9c <uarte_nrfx_irq_rx_ready>:
	return dev->config->config_info;
   20b9c:	6803      	ldr	r3, [r0, #0]
	return config->uarte_regs;
   20b9e:	689b      	ldr	r3, [r3, #8]
   20ba0:	681b      	ldr	r3, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   20ba2:	f8d3 0110 	ldr.w	r0, [r3, #272]	; 0x110
}
   20ba6:	3000      	adds	r0, #0
   20ba8:	bf18      	it	ne
   20baa:	2001      	movne	r0, #1
   20bac:	4770      	bx	lr

00020bae <uarte_nrfx_irq_rx_enable>:
    p_reg->INTENSET = mask;
   20bae:	2210      	movs	r2, #16
	return dev->config->config_info;
   20bb0:	6803      	ldr	r3, [r0, #0]
	return config->uarte_regs;
   20bb2:	689b      	ldr	r3, [r3, #8]
   20bb4:	681b      	ldr	r3, [r3, #0]
   20bb6:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
   20bba:	4770      	bx	lr

00020bbc <uarte_nrfx_irq_rx_disable>:
    p_reg->INTENCLR = mask;
   20bbc:	2210      	movs	r2, #16
	return dev->config->config_info;
   20bbe:	6803      	ldr	r3, [r0, #0]
	return config->uarte_regs;
   20bc0:	689b      	ldr	r3, [r3, #8]
   20bc2:	681b      	ldr	r3, [r3, #0]
   20bc4:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
}
   20bc8:	4770      	bx	lr

00020bca <uarte_nrfx_irq_err_enable>:
    p_reg->INTENSET = mask;
   20bca:	f44f 7200 	mov.w	r2, #512	; 0x200
	return dev->config->config_info;
   20bce:	6803      	ldr	r3, [r0, #0]
	return config->uarte_regs;
   20bd0:	689b      	ldr	r3, [r3, #8]
   20bd2:	681b      	ldr	r3, [r3, #0]
   20bd4:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
   20bd8:	4770      	bx	lr

00020bda <uarte_nrfx_irq_err_disable>:
    p_reg->INTENCLR = mask;
   20bda:	f44f 7200 	mov.w	r2, #512	; 0x200
	return dev->config->config_info;
   20bde:	6803      	ldr	r3, [r0, #0]
	return config->uarte_regs;
   20be0:	689b      	ldr	r3, [r3, #8]
   20be2:	681b      	ldr	r3, [r3, #0]
   20be4:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
}
   20be8:	4770      	bx	lr

00020bea <uarte_nrfx_irq_update>:
}
   20bea:	2001      	movs	r0, #1
   20bec:	4770      	bx	lr

00020bee <uarte_nrfx_irq_callback_set>:
	data->int_driven->cb = cb;
   20bee:	6883      	ldr	r3, [r0, #8]
   20bf0:	689b      	ldr	r3, [r3, #8]
	data->int_driven->cb_data = cb_data;
   20bf2:	e9c3 1200 	strd	r1, r2, [r3]
}
   20bf6:	4770      	bx	lr

00020bf8 <uarte_nrfx_irq_is_pending>:
{
   20bf8:	b508      	push	{r3, lr}
	return dev->config->config_info;
   20bfa:	6803      	ldr	r3, [r0, #0]
{
   20bfc:	4602      	mov	r2, r0
	return config->uarte_regs;
   20bfe:	689b      	ldr	r3, [r3, #8]
   20c00:	6819      	ldr	r1, [r3, #0]
    return p_reg->INTENSET & mask;
   20c02:	f8d1 3304 	ldr.w	r3, [r1, #772]	; 0x304
		||
   20c06:	05db      	lsls	r3, r3, #23
   20c08:	d405      	bmi.n	20c16 <uarte_nrfx_irq_is_pending+0x1e>
   20c0a:	f8d1 0304 	ldr.w	r0, [r1, #772]	; 0x304
   20c0e:	f010 0010 	ands.w	r0, r0, #16
   20c12:	d106      	bne.n	20c22 <uarte_nrfx_irq_is_pending+0x2a>
}
   20c14:	bd08      	pop	{r3, pc}
		 uarte_nrfx_irq_tx_ready_complete(dev))
   20c16:	f7ff ffb6 	bl	20b86 <uarte_nrfx_irq_tx_ready_complete>
					    NRF_UARTE_INT_ENDTX_MASK) &&
   20c1a:	2800      	cmp	r0, #0
   20c1c:	d0f5      	beq.n	20c0a <uarte_nrfx_irq_is_pending+0x12>
		||
   20c1e:	2001      	movs	r0, #1
   20c20:	e7f8      	b.n	20c14 <uarte_nrfx_irq_is_pending+0x1c>
		 uarte_nrfx_irq_rx_ready(dev)));
   20c22:	4610      	mov	r0, r2
   20c24:	f7ff ffba 	bl	20b9c <uarte_nrfx_irq_rx_ready>
					    NRF_UARTE_INT_ENDRX_MASK) &&
   20c28:	3000      	adds	r0, #0
   20c2a:	bf18      	it	ne
   20c2c:	2001      	movne	r0, #1
   20c2e:	e7f1      	b.n	20c14 <uarte_nrfx_irq_is_pending+0x1c>

00020c30 <entropy_cc310_rng_init>:
{
	/* No initialization is required */
	(void)dev;

	return 0;
}
   20c30:	2000      	movs	r0, #0
   20c32:	4770      	bx	lr

00020c34 <trace_proxy_irq_handler>:
ISR_DIRECT_DECLARE(trace_proxy_irq_handler)
   20c34:	4668      	mov	r0, sp
   20c36:	f020 0107 	bic.w	r1, r0, #7
   20c3a:	468d      	mov	sp, r1
   20c3c:	b501      	push	{r0, lr}
	bsd_os_trace_irq_handler();
   20c3e:	f7f4 f99d 	bl	14f7c <bsd_os_trace_irq_handler>
	ISR_DIRECT_PM(); /* PM done after servicing interrupt for best latency
   20c42:	f7ee fa17 	bl	f074 <_arch_isr_direct_pm>
   20c46:	f7ee f909 	bl	ee5c <z_arm_exc_exit>
ISR_DIRECT_DECLARE(trace_proxy_irq_handler)
   20c4a:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
   20c4e:	4685      	mov	sp, r0
   20c50:	4770      	bx	lr

00020c52 <ipc_proxy_irq_handler>:
ISR_DIRECT_DECLARE(ipc_proxy_irq_handler)
   20c52:	4668      	mov	r0, sp
   20c54:	f020 0107 	bic.w	r1, r0, #7
   20c58:	468d      	mov	sp, r1
   20c5a:	b501      	push	{r0, lr}
	IPC_IRQHandler();
   20c5c:	f7f4 fd86 	bl	1576c <IPC_IRQHandler>
	ISR_DIRECT_PM(); /* PM done after servicing interrupt for best latency
   20c60:	f7ee fa08 	bl	f074 <_arch_isr_direct_pm>
   20c64:	f7ee f8fa 	bl	ee5c <z_arm_exc_exit>
ISR_DIRECT_DECLARE(ipc_proxy_irq_handler)
   20c68:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
   20c6c:	4685      	mov	sp, r0
   20c6e:	4770      	bx	lr

00020c70 <trace_task_create>:
{
   20c70:	b508      	push	{r3, lr}
	IRQ_DIRECT_CONNECT(TRACE_IRQ, TRACE_IRQ_PRIORITY,
   20c72:	201d      	movs	r0, #29
   20c74:	2200      	movs	r2, #0
   20c76:	2106      	movs	r1, #6
   20c78:	f7ee f9ca 	bl	f010 <z_arm_irq_priority_set>
}
   20c7c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	irq_enable(TRACE_IRQ);
   20c80:	201d      	movs	r0, #29
   20c82:	f7ee b9b5 	b.w	eff0 <arch_irq_enable>

00020c86 <read_task_create>:
{
   20c86:	b508      	push	{r3, lr}
	IRQ_DIRECT_CONNECT(BSD_APPLICATION_IRQ, BSD_APPLICATION_IRQ_PRIORITY,
   20c88:	201c      	movs	r0, #28
   20c8a:	2200      	movs	r2, #0
   20c8c:	2106      	movs	r1, #6
   20c8e:	f7ee f9bf 	bl	f010 <z_arm_irq_priority_set>
}
   20c92:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	irq_enable(BSD_APPLICATION_IRQ);
   20c96:	201c      	movs	r0, #28
   20c98:	f7ee b9aa 	b.w	eff0 <arch_irq_enable>

00020c9c <bsd_os_trace_put>:
		remaining_bytes -= transfer_len;
	}
#endif

	return 0;
}
   20c9c:	2000      	movs	r0, #0
   20c9e:	4770      	bx	lr

00020ca0 <z_to_nrf_flags>:
		nrf_flags |= NRF_MSG_DONTWAIT;
   20ca0:	f010 0340 	ands.w	r3, r0, #64	; 0x40
   20ca4:	bf18      	it	ne
   20ca6:	2302      	movne	r3, #2
	if (z_flags & MSG_PEEK) {
   20ca8:	0782      	lsls	r2, r0, #30
		nrf_flags |= NRF_MSG_PEEK;
   20caa:	bf48      	it	mi
   20cac:	f043 0308 	orrmi.w	r3, r3, #8
}
   20cb0:	4618      	mov	r0, r3
   20cb2:	4770      	bx	lr

00020cb4 <z_to_nrf_family>:
	switch (z_family) {
   20cb4:	2803      	cmp	r0, #3
   20cb6:	d00f      	beq.n	20cd8 <z_to_nrf_family+0x24>
   20cb8:	d808      	bhi.n	20ccc <z_to_nrf_family+0x18>
   20cba:	2801      	cmp	r0, #1
   20cbc:	d00e      	beq.n	20cdc <z_to_nrf_family+0x28>
   20cbe:	2802      	cmp	r0, #2
		return -EAFNOSUPPORT;
   20cc0:	bf08      	it	eq
   20cc2:	200a      	moveq	r0, #10
   20cc4:	bf18      	it	ne
   20cc6:	f06f 0069 	mvnne.w	r0, #105	; 0x69
   20cca:	4770      	bx	lr
	switch (z_family) {
   20ccc:	2866      	cmp	r0, #102	; 0x66
   20cce:	d006      	beq.n	20cde <z_to_nrf_family+0x2a>
   20cd0:	2867      	cmp	r0, #103	; 0x67
		return -EAFNOSUPPORT;
   20cd2:	bf08      	it	eq
   20cd4:	2001      	moveq	r0, #1
   20cd6:	e7f5      	b.n	20cc4 <z_to_nrf_family+0x10>
		return NRF_AF_PACKET;
   20cd8:	2005      	movs	r0, #5
   20cda:	4770      	bx	lr
		return NRF_AF_INET;
   20cdc:	2002      	movs	r0, #2
}
   20cde:	4770      	bx	lr

00020ce0 <z_to_nrf_protocol>:
	switch (proto) {
   20ce0:	f5b0 7f81 	cmp.w	r0, #258	; 0x102
   20ce4:	d01d      	beq.n	20d22 <z_to_nrf_protocol+0x42>
   20ce6:	dc08      	bgt.n	20cfa <z_to_nrf_protocol+0x1a>
   20ce8:	2806      	cmp	r0, #6
   20cea:	d01d      	beq.n	20d28 <z_to_nrf_protocol+0x48>
   20cec:	2811      	cmp	r0, #17
   20cee:	d01d      	beq.n	20d2c <z_to_nrf_protocol+0x4c>
   20cf0:	2800      	cmp	r0, #0
		return -EPROTONOSUPPORT;
   20cf2:	bf18      	it	ne
   20cf4:	f06f 007a 	mvnne.w	r0, #122	; 0x7a
   20cf8:	4770      	bx	lr
	switch (proto) {
   20cfa:	f240 2301 	movw	r3, #513	; 0x201
   20cfe:	4298      	cmp	r0, r3
   20d00:	d015      	beq.n	20d2e <z_to_nrf_protocol+0x4e>
   20d02:	dc06      	bgt.n	20d12 <z_to_nrf_protocol+0x32>
   20d04:	f240 1311 	movw	r3, #273	; 0x111
   20d08:	4298      	cmp	r0, r3
		return -EPROTONOSUPPORT;
   20d0a:	bf08      	it	eq
   20d0c:	f44f 7087 	moveq.w	r0, #270	; 0x10e
   20d10:	e7ef      	b.n	20cf2 <z_to_nrf_protocol+0x12>
	switch (proto) {
   20d12:	f240 2302 	movw	r3, #514	; 0x202
   20d16:	4298      	cmp	r0, r3
   20d18:	d009      	beq.n	20d2e <z_to_nrf_protocol+0x4e>
   20d1a:	f240 2303 	movw	r3, #515	; 0x203
   20d1e:	4298      	cmp	r0, r3
   20d20:	e7e7      	b.n	20cf2 <z_to_nrf_protocol+0x12>
		return NRF_SPROTO_TLS1v2;
   20d22:	f44f 7082 	mov.w	r0, #260	; 0x104
   20d26:	4770      	bx	lr
		return NRF_IPPROTO_TCP;
   20d28:	2001      	movs	r0, #1
   20d2a:	4770      	bx	lr
		return NRF_IPPROTO_UDP;
   20d2c:	2002      	movs	r0, #2
}
   20d2e:	4770      	bx	lr

00020d30 <nrf91_bsdlib_socket_offload_init>:
}
   20d30:	2000      	movs	r0, #0
   20d32:	4770      	bx	lr

00020d34 <nrf91_socket_offload_freeaddrinfo>:
{
   20d34:	b538      	push	{r3, r4, r5, lr}
   20d36:	4604      	mov	r4, r0
	while (next != NULL) {
   20d38:	b904      	cbnz	r4, 20d3c <nrf91_socket_offload_freeaddrinfo+0x8>
}
   20d3a:	bd38      	pop	{r3, r4, r5, pc}
		k_free(this->ai_addr);
   20d3c:	6960      	ldr	r0, [r4, #20]
		next = next->ai_next;
   20d3e:	69e5      	ldr	r5, [r4, #28]
		k_free(this->ai_addr);
   20d40:	f000 fcc8 	bl	216d4 <k_free>
		k_free(this);
   20d44:	4620      	mov	r0, r4
   20d46:	f000 fcc5 	bl	216d4 <k_free>
		next = next->ai_next;
   20d4a:	462c      	mov	r4, r5
   20d4c:	e7f4      	b.n	20d38 <nrf91_socket_offload_freeaddrinfo+0x4>

00020d4e <z_to_nrf_addrinfo_hints>:
{
   20d4e:	b538      	push	{r3, r4, r5, lr}
   20d50:	460c      	mov	r4, r1
   20d52:	4605      	mov	r5, r0
   20d54:	221c      	movs	r2, #28
   20d56:	2100      	movs	r1, #0
   20d58:	1d20      	adds	r0, r4, #4
   20d5a:	f000 fdfb 	bl	21954 <memset>
	nrf_out->ai_flags = z_to_nrf_addrinfo_flags(z_in->ai_flags);
   20d5e:	2300      	movs	r3, #0
   20d60:	6023      	str	r3, [r4, #0]
	nrf_out->ai_socktype = z_to_nrf_socktype(z_in->ai_socktype);
   20d62:	68ab      	ldr	r3, [r5, #8]
	switch (socktype) {
   20d64:	2b03      	cmp	r3, #3
   20d66:	d003      	beq.n	20d70 <z_to_nrf_addrinfo_hints+0x22>
		return NRF_SOCK_MGMT;
   20d68:	2b04      	cmp	r3, #4
   20d6a:	bf08      	it	eq
   20d6c:	f44f 7300 	moveq.w	r3, #512	; 0x200
	nrf_out->ai_socktype = z_to_nrf_socktype(z_in->ai_socktype);
   20d70:	60a3      	str	r3, [r4, #8]
	family = z_to_nrf_family(z_in->ai_family);
   20d72:	88a8      	ldrh	r0, [r5, #4]
   20d74:	f7ff ff9e 	bl	20cb4 <z_to_nrf_family>
	if (family == -EAFNOSUPPORT) {
   20d78:	f110 0f6a 	cmn.w	r0, #106	; 0x6a
   20d7c:	d00b      	beq.n	20d96 <z_to_nrf_addrinfo_hints+0x48>
	nrf_out->ai_family = family;
   20d7e:	6060      	str	r0, [r4, #4]
	nrf_out->ai_protocol = z_to_nrf_protocol(z_in->ai_protocol);
   20d80:	68e8      	ldr	r0, [r5, #12]
   20d82:	f7ff ffad 	bl	20ce0 <z_to_nrf_protocol>
	if (nrf_out->ai_protocol == -EPROTONOSUPPORT) {
   20d86:	f110 0f7b 	cmn.w	r0, #123	; 0x7b
	nrf_out->ai_protocol = z_to_nrf_protocol(z_in->ai_protocol);
   20d8a:	60e0      	str	r0, [r4, #12]
	if (nrf_out->ai_protocol == -EPROTONOSUPPORT) {
   20d8c:	d003      	beq.n	20d96 <z_to_nrf_addrinfo_hints+0x48>
	if (z_in->ai_canonname != NULL) {
   20d8e:	69a8      	ldr	r0, [r5, #24]
   20d90:	b108      	cbz	r0, 20d96 <z_to_nrf_addrinfo_hints+0x48>
		nrf_out->ai_canonname = z_in->ai_canonname;
   20d92:	61a0      	str	r0, [r4, #24]
	return 0;
   20d94:	2000      	movs	r0, #0
}
   20d96:	bd38      	pop	{r3, r4, r5, pc}

00020d98 <nrf91_socket_offload_send>:
{
   20d98:	b570      	push	{r4, r5, r6, lr}
   20d9a:	4604      	mov	r4, r0
	return nrf_send(sd, buf, len, z_to_nrf_flags(flags));
   20d9c:	4618      	mov	r0, r3
{
   20d9e:	4615      	mov	r5, r2
	return nrf_send(sd, buf, len, z_to_nrf_flags(flags));
   20da0:	f7ff ff7e 	bl	20ca0 <z_to_nrf_flags>
   20da4:	462a      	mov	r2, r5
   20da6:	4603      	mov	r3, r0
   20da8:	4620      	mov	r0, r4
}
   20daa:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return nrf_send(sd, buf, len, z_to_nrf_flags(flags));
   20dae:	f7f6 ba25 	b.w	171fc <nrf_send>

00020db2 <nrf91_socket_offload_recv>:
{
   20db2:	b570      	push	{r4, r5, r6, lr}
   20db4:	4604      	mov	r4, r0
	return nrf_recv(sd, buf, max_len, z_to_nrf_flags(flags));
   20db6:	4618      	mov	r0, r3
{
   20db8:	4615      	mov	r5, r2
	return nrf_recv(sd, buf, max_len, z_to_nrf_flags(flags));
   20dba:	f7ff ff71 	bl	20ca0 <z_to_nrf_flags>
   20dbe:	462a      	mov	r2, r5
   20dc0:	4603      	mov	r3, r0
   20dc2:	4620      	mov	r0, r4
}
   20dc4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return nrf_recv(sd, buf, max_len, z_to_nrf_flags(flags));
   20dc8:	f7f6 ba4e 	b.w	17268 <nrf_recv>

00020dcc <nrf91_socket_offload_getsockopt>:
{
   20dcc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   20dd0:	461d      	mov	r5, r3
	struct nrf_timeval nrf_rcvtimeo = {0, 0};
   20dd2:	2300      	movs	r3, #0
{
   20dd4:	b086      	sub	sp, #24
   20dd6:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
	struct nrf_timeval nrf_rcvtimeo = {0, 0};
   20dda:	e9cd 3304 	strd	r3, r3, [sp, #16]
	nrf_socklen_t nrf_optlen = (nrf_socklen_t)*optlen;
   20dde:	f8d8 3000 	ldr.w	r3, [r8]
	switch (z_in_level) {
   20de2:	f5b1 7f8d 	cmp.w	r1, #282	; 0x11a
{
   20de6:	4607      	mov	r7, r0
   20de8:	460c      	mov	r4, r1
   20dea:	4616      	mov	r6, r2
	nrf_socklen_t nrf_optlen = (nrf_socklen_t)*optlen;
   20dec:	9303      	str	r3, [sp, #12]
	switch (z_in_level) {
   20dee:	d002      	beq.n	20df6 <nrf91_socket_offload_getsockopt+0x2a>
   20df0:	dc2b      	bgt.n	20e4a <nrf91_socket_offload_getsockopt+0x7e>
   20df2:	2901      	cmp	r1, #1
   20df4:	d13d      	bne.n	20e72 <nrf91_socket_offload_getsockopt+0xa6>
	if (z_to_nrf_optname(level, optname, &nrf_optname) < 0)
   20df6:	aa02      	add	r2, sp, #8
   20df8:	4631      	mov	r1, r6
   20dfa:	4620      	mov	r0, r4
   20dfc:	f7f0 fa5c 	bl	112b8 <z_to_nrf_optname>
   20e00:	2800      	cmp	r0, #0
   20e02:	db36      	blt.n	20e72 <nrf91_socket_offload_getsockopt+0xa6>
	if ((level == SOL_SOCKET) && (optname == SO_RCVTIMEO)) {
   20e04:	2c01      	cmp	r4, #1
   20e06:	d128      	bne.n	20e5a <nrf91_socket_offload_getsockopt+0x8e>
   20e08:	2e14      	cmp	r6, #20
   20e0a:	d126      	bne.n	20e5a <nrf91_socket_offload_getsockopt+0x8e>
		nrf_optlen = sizeof(struct nrf_timeval);
   20e0c:	2308      	movs	r3, #8
   20e0e:	9303      	str	r3, [sp, #12]
		nrf_optval = &nrf_rcvtimeo;
   20e10:	ab04      	add	r3, sp, #16
	retval = nrf_getsockopt(sd, nrf_level, nrf_optname, nrf_optval,
   20e12:	aa03      	add	r2, sp, #12
   20e14:	9200      	str	r2, [sp, #0]
   20e16:	4638      	mov	r0, r7
   20e18:	9a02      	ldr	r2, [sp, #8]
   20e1a:	4621      	mov	r1, r4
   20e1c:	f7f6 faa4 	bl	17368 <nrf_getsockopt>
	if ((retval == 0) && (optval != NULL)) {
   20e20:	4607      	mov	r7, r0
   20e22:	b970      	cbnz	r0, 20e42 <nrf91_socket_offload_getsockopt+0x76>
   20e24:	b16d      	cbz	r5, 20e42 <nrf91_socket_offload_getsockopt+0x76>
		*optlen = nrf_optlen;
   20e26:	9b03      	ldr	r3, [sp, #12]
		if (level == SOL_SOCKET) {
   20e28:	2c01      	cmp	r4, #1
		*optlen = nrf_optlen;
   20e2a:	f8c8 3000 	str.w	r3, [r8]
		if (level == SOL_SOCKET) {
   20e2e:	d108      	bne.n	20e42 <nrf91_socket_offload_getsockopt+0x76>
			if (optname == SO_ERROR) {
   20e30:	2e04      	cmp	r6, #4
   20e32:	d114      	bne.n	20e5e <nrf91_socket_offload_getsockopt+0x92>
				bsd_os_errno_set(*(int *)optval);
   20e34:	6828      	ldr	r0, [r5, #0]
   20e36:	f7f0 f911 	bl	1105c <bsd_os_errno_set>
				*(int *)optval = errno;
   20e3a:	f7ff f8f0 	bl	2001e <__errno>
   20e3e:	6803      	ldr	r3, [r0, #0]
   20e40:	602b      	str	r3, [r5, #0]
}
   20e42:	4638      	mov	r0, r7
   20e44:	b006      	add	sp, #24
   20e46:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	switch (z_in_level) {
   20e4a:	f240 2302 	movw	r3, #514	; 0x202
   20e4e:	4299      	cmp	r1, r3
   20e50:	d0d1      	beq.n	20df6 <nrf91_socket_offload_getsockopt+0x2a>
   20e52:	f240 2303 	movw	r3, #515	; 0x203
   20e56:	4299      	cmp	r1, r3
   20e58:	e7cc      	b.n	20df4 <nrf91_socket_offload_getsockopt+0x28>
   20e5a:	462b      	mov	r3, r5
   20e5c:	e7d9      	b.n	20e12 <nrf91_socket_offload_getsockopt+0x46>
			} else if (optname == SO_RCVTIMEO) {
   20e5e:	2e14      	cmp	r6, #20
   20e60:	d1ef      	bne.n	20e42 <nrf91_socket_offload_getsockopt+0x76>
				((struct timeval *)optval)->tv_sec =
   20e62:	9b04      	ldr	r3, [sp, #16]
   20e64:	602b      	str	r3, [r5, #0]
				((struct timeval *)optval)->tv_usec =
   20e66:	9b05      	ldr	r3, [sp, #20]
   20e68:	606b      	str	r3, [r5, #4]
				*optlen = sizeof(struct timeval);
   20e6a:	2308      	movs	r3, #8
   20e6c:	f8c8 3000 	str.w	r3, [r8]
   20e70:	e7e7      	b.n	20e42 <nrf91_socket_offload_getsockopt+0x76>
	errno = ENOPROTOOPT;
   20e72:	f7ff f8d4 	bl	2001e <__errno>
   20e76:	236d      	movs	r3, #109	; 0x6d
	return retval;
   20e78:	f04f 37ff 	mov.w	r7, #4294967295
	errno = ENOPROTOOPT;
   20e7c:	6003      	str	r3, [r0, #0]
	return retval;
   20e7e:	e7e0      	b.n	20e42 <nrf91_socket_offload_getsockopt+0x76>

00020e80 <nrf91_socket_offload_poll>:
{
   20e80:	b5f0      	push	{r4, r5, r6, r7, lr}
   20e82:	b091      	sub	sp, #68	; 0x44
   20e84:	4605      	mov	r5, r0
   20e86:	460c      	mov	r4, r1
   20e88:	4616      	mov	r6, r2
	struct nrf_pollfd tmp[BSD_MAX_SOCKET_COUNT] = {0};
   20e8a:	2100      	movs	r1, #0
   20e8c:	2240      	movs	r2, #64	; 0x40
   20e8e:	4668      	mov	r0, sp
   20e90:	f000 fd60 	bl	21954 <memset>
	for (int i = 0; i < nfds; i++) {
   20e94:	466a      	mov	r2, sp
   20e96:	2100      	movs	r1, #0
		if (fds[i].events & POLLIN) {
   20e98:	1d2f      	adds	r7, r5, #4
	for (int i = 0; i < nfds; i++) {
   20e9a:	42a1      	cmp	r1, r4
   20e9c:	db0c      	blt.n	20eb8 <nrf91_socket_offload_poll+0x38>
	retval = nrf_poll((struct nrf_pollfd *)&tmp, nfds, timeout);
   20e9e:	4632      	mov	r2, r6
   20ea0:	4621      	mov	r1, r4
   20ea2:	4668      	mov	r0, sp
   20ea4:	f7f6 fa80 	bl	173a8 <nrf_poll>
	for (int i = 0; i < nfds; i++) {
   20ea8:	2200      	movs	r2, #0
   20eaa:	462b      	mov	r3, r5
		fds[i].revents = 0;
   20eac:	4616      	mov	r6, r2
			fds[i].revents |= POLLIN;
   20eae:	2701      	movs	r7, #1
	for (int i = 0; i < nfds; i++) {
   20eb0:	42a2      	cmp	r2, r4
   20eb2:	db1a      	blt.n	20eea <nrf91_socket_offload_poll+0x6a>
}
   20eb4:	b011      	add	sp, #68	; 0x44
   20eb6:	bdf0      	pop	{r4, r5, r6, r7, pc}
		tmp[i].handle = fds[i].fd;
   20eb8:	f855 3031 	ldr.w	r3, [r5, r1, lsl #3]
		if (fds[i].events & POLLIN) {
   20ebc:	f837 0031 	ldrh.w	r0, [r7, r1, lsl #3]
		tmp[i].handle = fds[i].fd;
   20ec0:	6013      	str	r3, [r2, #0]
		if (fds[i].events & POLLIN) {
   20ec2:	07c3      	lsls	r3, r0, #31
			tmp[i].requested |= NRF_POLLIN;
   20ec4:	bf48      	it	mi
   20ec6:	8893      	ldrhmi	r3, [r2, #4]
	for (int i = 0; i < nfds; i++) {
   20ec8:	f101 0101 	add.w	r1, r1, #1
			tmp[i].requested |= NRF_POLLIN;
   20ecc:	bf44      	itt	mi
   20ece:	f043 0301 	orrmi.w	r3, r3, #1
   20ed2:	8093      	strhmi	r3, [r2, #4]
		if (fds[i].events & POLLOUT) {
   20ed4:	0743      	lsls	r3, r0, #29
			tmp[i].requested |= NRF_POLLOUT;
   20ed6:	bf48      	it	mi
   20ed8:	8893      	ldrhmi	r3, [r2, #4]
   20eda:	f102 0208 	add.w	r2, r2, #8
   20ede:	bf44      	itt	mi
   20ee0:	f043 0302 	orrmi.w	r3, r3, #2
   20ee4:	f822 3c04 	strhmi.w	r3, [r2, #-4]
   20ee8:	e7d7      	b.n	20e9a <nrf91_socket_offload_poll+0x1a>
		if (tmp[i].returned & NRF_POLLIN) {
   20eea:	eb0d 01c2 	add.w	r1, sp, r2, lsl #3
   20eee:	88c9      	ldrh	r1, [r1, #6]
		fds[i].revents = 0;
   20ef0:	80de      	strh	r6, [r3, #6]
		if (tmp[i].returned & NRF_POLLIN) {
   20ef2:	07cd      	lsls	r5, r1, #31
			fds[i].revents |= POLLIN;
   20ef4:	bf48      	it	mi
   20ef6:	80df      	strhmi	r7, [r3, #6]
		if (tmp[i].returned & NRF_POLLOUT) {
   20ef8:	078d      	lsls	r5, r1, #30
			fds[i].revents |= POLLOUT;
   20efa:	bf48      	it	mi
   20efc:	88dd      	ldrhmi	r5, [r3, #6]
	for (int i = 0; i < nfds; i++) {
   20efe:	f102 0201 	add.w	r2, r2, #1
			fds[i].revents |= POLLOUT;
   20f02:	bf44      	itt	mi
   20f04:	f045 0504 	orrmi.w	r5, r5, #4
   20f08:	80dd      	strhmi	r5, [r3, #6]
		if (tmp[i].returned & NRF_POLLERR) {
   20f0a:	074d      	lsls	r5, r1, #29
			fds[i].revents |= POLLERR;
   20f0c:	bf48      	it	mi
   20f0e:	88dd      	ldrhmi	r5, [r3, #6]
   20f10:	f103 0308 	add.w	r3, r3, #8
   20f14:	bf44      	itt	mi
   20f16:	f045 0508 	orrmi.w	r5, r5, #8
   20f1a:	f823 5c02 	strhmi.w	r5, [r3, #-2]
		if (tmp[i].returned & NRF_POLLNVAL) {
   20f1e:	06cd      	lsls	r5, r1, #27
			fds[i].revents |= POLLNVAL;
   20f20:	bf42      	ittt	mi
   20f22:	f833 5c02 	ldrhmi.w	r5, [r3, #-2]
   20f26:	f045 0520 	orrmi.w	r5, r5, #32
   20f2a:	f823 5c02 	strhmi.w	r5, [r3, #-2]
		if (tmp[i].returned & NRF_POLLHUP) {
   20f2e:	0709      	lsls	r1, r1, #28
			fds[i].revents |= POLLHUP;
   20f30:	bf42      	ittt	mi
   20f32:	f833 1c02 	ldrhmi.w	r1, [r3, #-2]
   20f36:	f041 0110 	orrmi.w	r1, r1, #16
   20f3a:	f823 1c02 	strhmi.w	r1, [r3, #-2]
   20f3e:	e7b7      	b.n	20eb0 <nrf91_socket_offload_poll+0x30>

00020f40 <nrf91_socket_offload_listen>:
	return nrf_listen(sd, backlog);
   20f40:	f7f6 b9be 	b.w	172c0 <nrf_listen>

00020f44 <nrf91_socket_offload_close>:
	return nrf_close(sd);
   20f44:	f7f6 b930 	b.w	171a8 <nrf_close>

00020f48 <nrf91_socket_offload_fcntl>:
	switch (cmd) {
   20f48:	2903      	cmp	r1, #3
{
   20f4a:	b508      	push	{r3, lr}
	switch (cmd) {
   20f4c:	d00b      	beq.n	20f66 <nrf91_socket_offload_fcntl+0x1e>
   20f4e:	2904      	cmp	r1, #4
   20f50:	d111      	bne.n	20f76 <nrf91_socket_offload_fcntl+0x2e>
		flags = va_arg(args, int);
   20f52:	6812      	ldr	r2, [r2, #0]
		if (flags != 0 && flags != O_NONBLOCK)
   20f54:	f432 4380 	bics.w	r3, r2, #16384	; 0x4000
   20f58:	d10d      	bne.n	20f76 <nrf91_socket_offload_fcntl+0x2e>
}
   20f5a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		retval = nrf_fcntl(fd, NRF_F_SETFL, flags);
   20f5e:	1392      	asrs	r2, r2, #14
   20f60:	2101      	movs	r1, #1
   20f62:	f7f6 ba23 	b.w	173ac <nrf_fcntl>
		flags = nrf_fcntl(fd, NRF_F_GETFL, 0);
   20f66:	2200      	movs	r2, #0
   20f68:	2102      	movs	r1, #2
   20f6a:	f7f6 fa1f 	bl	173ac <nrf_fcntl>
		retval = (flags & NRF_O_NONBLOCK) ? O_NONBLOCK : 0;
   20f6e:	0380      	lsls	r0, r0, #14
   20f70:	f400 4080 	and.w	r0, r0, #16384	; 0x4000
}
   20f74:	bd08      	pop	{r3, pc}
	errno = EINVAL;
   20f76:	f7ff f852 	bl	2001e <__errno>
   20f7a:	2316      	movs	r3, #22
   20f7c:	6003      	str	r3, [r0, #0]
	return retval;
   20f7e:	f04f 30ff 	mov.w	r0, #4294967295
   20f82:	e7f7      	b.n	20f74 <nrf91_socket_offload_fcntl+0x2c>

00020f84 <nrf_to_z_ipv6>:
	ptr->sin6_port = nrf_in->sin6_port;
   20f84:	890b      	ldrh	r3, [r1, #8]
	ptr->sin6_family = AF_INET6;
   20f86:	2202      	movs	r2, #2
	ptr->sin6_port = nrf_in->sin6_port;
   20f88:	8043      	strh	r3, [r0, #2]
	ptr->sin6_family = AF_INET6;
   20f8a:	4603      	mov	r3, r0
{
   20f8c:	b530      	push	{r4, r5, lr}
	ptr->sin6_family = AF_INET6;
   20f8e:	f823 2b04 	strh.w	r2, [r3], #4
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   20f92:	f101 0210 	add.w	r2, r1, #16
   20f96:	f102 0410 	add.w	r4, r2, #16
   20f9a:	f852 5b04 	ldr.w	r5, [r2], #4
   20f9e:	42a2      	cmp	r2, r4
   20fa0:	f843 5b04 	str.w	r5, [r3], #4
   20fa4:	d1f9      	bne.n	20f9a <nrf_to_z_ipv6+0x16>
	ptr->sin6_scope_id = (u8_t)nrf_in->sin6_scope_id;
   20fa6:	6a0b      	ldr	r3, [r1, #32]
   20fa8:	7503      	strb	r3, [r0, #20]
}
   20faa:	bd30      	pop	{r4, r5, pc}

00020fac <nrf91_socket_offload_getaddrinfo>:
{
   20fac:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   20fb0:	4614      	mov	r4, r2
   20fb2:	460e      	mov	r6, r1
	struct nrf_addrinfo *nrf_res = NULL;
   20fb4:	2100      	movs	r1, #0
{
   20fb6:	b093      	sub	sp, #76	; 0x4c
   20fb8:	4605      	mov	r5, r0
	memset(&nrf_hints, 0, sizeof(struct nrf_addrinfo));
   20fba:	2220      	movs	r2, #32
   20fbc:	a802      	add	r0, sp, #8
{
   20fbe:	461f      	mov	r7, r3
	struct nrf_addrinfo *nrf_res = NULL;
   20fc0:	9101      	str	r1, [sp, #4]
	memset(&nrf_hints, 0, sizeof(struct nrf_addrinfo));
   20fc2:	f000 fcc7 	bl	21954 <memset>
	if (hints != NULL) {
   20fc6:	b194      	cbz	r4, 20fee <nrf91_socket_offload_getaddrinfo+0x42>
		error = z_to_nrf_addrinfo_hints(hints, &nrf_hints);
   20fc8:	a902      	add	r1, sp, #8
   20fca:	4620      	mov	r0, r4
   20fcc:	f7ff febf 	bl	20d4e <z_to_nrf_addrinfo_hints>
		if (error == -EPROTONOSUPPORT) {
   20fd0:	f110 0f7b 	cmn.w	r0, #123	; 0x7b
   20fd4:	f000 80bf 	beq.w	21156 <nrf91_socket_offload_getaddrinfo+0x1aa>
		} else if (error == -EAFNOSUPPORT) {
   20fd8:	306a      	adds	r0, #106	; 0x6a
   20fda:	f000 80bf 	beq.w	2115c <nrf91_socket_offload_getaddrinfo+0x1b0>
		if (hints->ai_next != NULL) {
   20fde:	69e0      	ldr	r0, [r4, #28]
   20fe0:	b120      	cbz	r0, 20fec <nrf91_socket_offload_getaddrinfo+0x40>
			z_to_nrf_addrinfo_hints(hints->ai_next, &nrf_hints_pdn);
   20fe2:	ac0a      	add	r4, sp, #40	; 0x28
   20fe4:	4621      	mov	r1, r4
   20fe6:	f7ff feb2 	bl	20d4e <z_to_nrf_addrinfo_hints>
			nrf_hints.ai_next = &nrf_hints_pdn;
   20fea:	9409      	str	r4, [sp, #36]	; 0x24
		nrf_hints_ptr = &nrf_hints;
   20fec:	ac02      	add	r4, sp, #8
	int retval = nrf_getaddrinfo(node, service, nrf_hints_ptr, &nrf_res);
   20fee:	4628      	mov	r0, r5
   20ff0:	ab01      	add	r3, sp, #4
   20ff2:	4622      	mov	r2, r4
   20ff4:	4631      	mov	r1, r6
   20ff6:	f7f6 f9d3 	bl	173a0 <nrf_getaddrinfo>
	if (retval != 0) {
   20ffa:	4605      	mov	r5, r0
   20ffc:	b1b0      	cbz	r0, 2102c <nrf91_socket_offload_getaddrinfo+0x80>
	switch (nrf_error) {
   20ffe:	2823      	cmp	r0, #35	; 0x23
   21000:	f000 80af 	beq.w	21162 <nrf91_socket_offload_getaddrinfo+0x1b6>
   21004:	dc0a      	bgt.n	2101c <nrf91_socket_offload_getaddrinfo+0x70>
		return DNS_EAI_SYSTEM;
   21006:	280c      	cmp	r0, #12
   21008:	bf08      	it	eq
   2100a:	f06f 0509 	mvneq.w	r5, #9
   2100e:	bf18      	it	ne
   21010:	f06f 050a 	mvnne.w	r5, #10
}
   21014:	4628      	mov	r0, r5
   21016:	b013      	add	sp, #76	; 0x4c
   21018:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	switch (nrf_error) {
   2101c:	282f      	cmp	r0, #47	; 0x2f
   2101e:	f000 80a3 	beq.w	21168 <nrf91_socket_offload_getaddrinfo+0x1bc>
		return DNS_EAI_SYSTEM;
   21022:	2873      	cmp	r0, #115	; 0x73
   21024:	bf08      	it	eq
   21026:	f06f 0563 	mvneq.w	r5, #99	; 0x63
   2102a:	e7f0      	b.n	2100e <nrf91_socket_offload_getaddrinfo+0x62>
	struct addrinfo *latest_z_res = NULL;
   2102c:	4680      	mov	r8, r0
	z_out->ai_next = NULL;
   2102e:	4681      	mov	r9, r0
	struct nrf_addrinfo *next_nrf_res = nrf_res;
   21030:	9e01      	ldr	r6, [sp, #4]
	*res = NULL;
   21032:	6038      	str	r0, [r7, #0]
	while ((retval == 0) && (next_nrf_res != NULL)) {
   21034:	b91e      	cbnz	r6, 2103e <nrf91_socket_offload_getaddrinfo+0x92>
	nrf_freeaddrinfo(nrf_res);
   21036:	9801      	ldr	r0, [sp, #4]
   21038:	f7f6 f9b4 	bl	173a4 <nrf_freeaddrinfo>
	return retval;
   2103c:	e7ea      	b.n	21014 <nrf91_socket_offload_getaddrinfo+0x68>
		struct addrinfo *next_z_res = k_malloc(sizeof(struct addrinfo));
   2103e:	2020      	movs	r0, #32
   21040:	f7fa fa9e 	bl	1b580 <k_malloc>
		if (next_z_res == NULL) {
   21044:	4604      	mov	r4, r0
   21046:	2800      	cmp	r0, #0
   21048:	d07a      	beq.n	21140 <nrf91_socket_offload_getaddrinfo+0x194>
	family = nrf_to_z_family(nrf_in->ai_family);
   2104a:	6872      	ldr	r2, [r6, #4]
	z_out->ai_socktype = nrf_in->ai_socktype;
   2104c:	68b3      	ldr	r3, [r6, #8]
	switch (nrf_family) {
   2104e:	2a05      	cmp	r2, #5
	z_out->ai_canonname = NULL; /* TODO Do proper content copy. */
   21050:	e9c0 9906 	strd	r9, r9, [r0, #24]
	z_out->ai_flags = nrf_to_z_addrinfo_flags(nrf_in->ai_flags);
   21054:	f8c0 9000 	str.w	r9, [r0]
	z_out->ai_socktype = nrf_in->ai_socktype;
   21058:	6083      	str	r3, [r0, #8]
	switch (nrf_family) {
   2105a:	d033      	beq.n	210c4 <nrf91_socket_offload_getaddrinfo+0x118>
   2105c:	dc09      	bgt.n	21072 <nrf91_socket_offload_getaddrinfo+0xc6>
   2105e:	2a01      	cmp	r2, #1
   21060:	d032      	beq.n	210c8 <nrf91_socket_offload_getaddrinfo+0x11c>
   21062:	2a02      	cmp	r2, #2
   21064:	d032      	beq.n	210cc <nrf91_socket_offload_getaddrinfo+0x120>
			k_free(next_z_res);
   21066:	4620      	mov	r0, r4
   21068:	f000 fb34 	bl	216d4 <k_free>
			retval = DNS_EAI_ADDRFAMILY;
   2106c:	f06f 0508 	mvn.w	r5, #8
   21070:	e068      	b.n	21144 <nrf91_socket_offload_getaddrinfo+0x198>
	switch (nrf_family) {
   21072:	2a0a      	cmp	r2, #10
   21074:	d02c      	beq.n	210d0 <nrf91_socket_offload_getaddrinfo+0x124>
   21076:	2a66      	cmp	r2, #102	; 0x66
   21078:	d1f5      	bne.n	21066 <nrf91_socket_offload_getaddrinfo+0xba>
		return AF_LTE;
   2107a:	4613      	mov	r3, r2
	z_out->ai_family = family;
   2107c:	6063      	str	r3, [r4, #4]
	z_out->ai_protocol = nrf_to_z_protocol(nrf_in->ai_protocol);
   2107e:	68f3      	ldr	r3, [r6, #12]
	switch (proto) {
   21080:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
   21084:	d045      	beq.n	21112 <nrf91_socket_offload_getaddrinfo+0x166>
   21086:	dc25      	bgt.n	210d4 <nrf91_socket_offload_getaddrinfo+0x128>
   21088:	2b01      	cmp	r3, #1
   2108a:	d047      	beq.n	2111c <nrf91_socket_offload_getaddrinfo+0x170>
   2108c:	2b02      	cmp	r3, #2
   2108e:	d043      	beq.n	21118 <nrf91_socket_offload_getaddrinfo+0x16c>
   21090:	bb43      	cbnz	r3, 210e4 <nrf91_socket_offload_getaddrinfo+0x138>
	if (nrf_in->ai_family == NRF_AF_INET) {
   21092:	2a02      	cmp	r2, #2
	z_out->ai_protocol = nrf_to_z_protocol(nrf_in->ai_protocol);
   21094:	60e3      	str	r3, [r4, #12]
	if (nrf_in->ai_family == NRF_AF_INET) {
   21096:	d143      	bne.n	21120 <nrf91_socket_offload_getaddrinfo+0x174>
		z_out->ai_addr = k_malloc(sizeof(struct sockaddr_in));
   21098:	2008      	movs	r0, #8
   2109a:	f7fa fa71 	bl	1b580 <k_malloc>
   2109e:	6160      	str	r0, [r4, #20]
		if (z_out->ai_addr == NULL) {
   210a0:	2800      	cmp	r0, #0
   210a2:	d04a      	beq.n	2113a <nrf91_socket_offload_getaddrinfo+0x18e>
		z_out->ai_addrlen  = sizeof(struct sockaddr_in);
   210a4:	2308      	movs	r3, #8
   210a6:	6123      	str	r3, [r4, #16]
			(const struct nrf_sockaddr_in *)nrf_in->ai_addr);
   210a8:	6973      	ldr	r3, [r6, #20]
	ptr->sin_port = nrf_in->sin_port;
   210aa:	891a      	ldrh	r2, [r3, #8]
	ptr->sin_addr.s_addr = nrf_in->sin_addr.s_addr;
   210ac:	68db      	ldr	r3, [r3, #12]
	ptr->sin_port = nrf_in->sin_port;
   210ae:	8042      	strh	r2, [r0, #2]
	ptr->sin_family = AF_INET;
   210b0:	2201      	movs	r2, #1
	ptr->sin_addr.s_addr = nrf_in->sin_addr.s_addr;
   210b2:	6043      	str	r3, [r0, #4]
	ptr->sin_family = AF_INET;
   210b4:	8002      	strh	r2, [r0, #0]
		if (latest_z_res == NULL) {
   210b6:	f1b8 0f00 	cmp.w	r8, #0
   210ba:	d149      	bne.n	21150 <nrf91_socket_offload_getaddrinfo+0x1a4>
			*res = next_z_res;
   210bc:	603c      	str	r4, [r7, #0]
		next_nrf_res = next_nrf_res->ai_next;
   210be:	69f6      	ldr	r6, [r6, #28]
   210c0:	46a0      	mov	r8, r4
   210c2:	e7b7      	b.n	21034 <nrf91_socket_offload_getaddrinfo+0x88>
		return AF_PACKET;
   210c4:	2303      	movs	r3, #3
   210c6:	e7d9      	b.n	2107c <nrf91_socket_offload_getaddrinfo+0xd0>
		return AF_LOCAL;
   210c8:	2367      	movs	r3, #103	; 0x67
   210ca:	e7d7      	b.n	2107c <nrf91_socket_offload_getaddrinfo+0xd0>
		return AF_INET;
   210cc:	2301      	movs	r3, #1
   210ce:	e7d5      	b.n	2107c <nrf91_socket_offload_getaddrinfo+0xd0>
		return AF_INET6;
   210d0:	2302      	movs	r3, #2
   210d2:	e7d3      	b.n	2107c <nrf91_socket_offload_getaddrinfo+0xd0>
	switch (proto) {
   210d4:	f240 2101 	movw	r1, #513	; 0x201
   210d8:	428b      	cmp	r3, r1
   210da:	d0da      	beq.n	21092 <nrf91_socket_offload_getaddrinfo+0xe6>
   210dc:	dc0d      	bgt.n	210fa <nrf91_socket_offload_getaddrinfo+0x14e>
   210de:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
   210e2:	d013      	beq.n	2110c <nrf91_socket_offload_getaddrinfo+0x160>
	z_out->ai_protocol = nrf_to_z_protocol(nrf_in->ai_protocol);
   210e4:	f06f 037a 	mvn.w	r3, #122	; 0x7a
   210e8:	60e3      	str	r3, [r4, #12]
		z_out->ai_addr = NULL;
   210ea:	2300      	movs	r3, #0
   210ec:	6163      	str	r3, [r4, #20]
			k_free(next_z_res);
   210ee:	4620      	mov	r0, r4
   210f0:	f000 faf0 	bl	216d4 <k_free>
			retval = DNS_EAI_SOCKTYPE;
   210f4:	f06f 0506 	mvn.w	r5, #6
   210f8:	e024      	b.n	21144 <nrf91_socket_offload_getaddrinfo+0x198>
	switch (proto) {
   210fa:	f240 2102 	movw	r1, #514	; 0x202
   210fe:	428b      	cmp	r3, r1
   21100:	d0c7      	beq.n	21092 <nrf91_socket_offload_getaddrinfo+0xe6>
   21102:	f240 2103 	movw	r1, #515	; 0x203
   21106:	428b      	cmp	r3, r1
   21108:	d0c3      	beq.n	21092 <nrf91_socket_offload_getaddrinfo+0xe6>
   2110a:	e7eb      	b.n	210e4 <nrf91_socket_offload_getaddrinfo+0x138>
	z_out->ai_protocol = nrf_to_z_protocol(nrf_in->ai_protocol);
   2110c:	f240 1311 	movw	r3, #273	; 0x111
   21110:	e7bf      	b.n	21092 <nrf91_socket_offload_getaddrinfo+0xe6>
   21112:	f44f 7381 	mov.w	r3, #258	; 0x102
   21116:	e7bc      	b.n	21092 <nrf91_socket_offload_getaddrinfo+0xe6>
   21118:	2311      	movs	r3, #17
   2111a:	e7ba      	b.n	21092 <nrf91_socket_offload_getaddrinfo+0xe6>
   2111c:	2306      	movs	r3, #6
   2111e:	e7b8      	b.n	21092 <nrf91_socket_offload_getaddrinfo+0xe6>
	} else if (nrf_in->ai_family == NRF_AF_INET6) {
   21120:	2a0a      	cmp	r2, #10
   21122:	d1e4      	bne.n	210ee <nrf91_socket_offload_getaddrinfo+0x142>
		z_out->ai_addr = k_malloc(sizeof(struct sockaddr_in6));
   21124:	2018      	movs	r0, #24
   21126:	f7fa fa2b 	bl	1b580 <k_malloc>
   2112a:	6160      	str	r0, [r4, #20]
		if (z_out->ai_addr == NULL) {
   2112c:	b128      	cbz	r0, 2113a <nrf91_socket_offload_getaddrinfo+0x18e>
		z_out->ai_addrlen  = sizeof(struct sockaddr_in6);
   2112e:	2318      	movs	r3, #24
		nrf_to_z_ipv6(z_out->ai_addr,
   21130:	6971      	ldr	r1, [r6, #20]
		z_out->ai_addrlen  = sizeof(struct sockaddr_in6);
   21132:	6123      	str	r3, [r4, #16]
		nrf_to_z_ipv6(z_out->ai_addr,
   21134:	f7ff ff26 	bl	20f84 <nrf_to_z_ipv6>
		} else if (error == -EAFNOSUPPORT) {
   21138:	e7bd      	b.n	210b6 <nrf91_socket_offload_getaddrinfo+0x10a>
			k_free(next_z_res);
   2113a:	4620      	mov	r0, r4
   2113c:	f000 faca 	bl	216d4 <k_free>
			retval = DNS_EAI_MEMORY;
   21140:	f06f 0509 	mvn.w	r5, #9
		nrf91_socket_offload_freeaddrinfo(*res);
   21144:	6838      	ldr	r0, [r7, #0]
   21146:	f7ff fdf5 	bl	20d34 <nrf91_socket_offload_freeaddrinfo>
		*res = NULL;
   2114a:	2300      	movs	r3, #0
   2114c:	603b      	str	r3, [r7, #0]
   2114e:	e772      	b.n	21036 <nrf91_socket_offload_getaddrinfo+0x8a>
			latest_z_res->ai_next = next_z_res;
   21150:	f8c8 401c 	str.w	r4, [r8, #28]
   21154:	e7b3      	b.n	210be <nrf91_socket_offload_getaddrinfo+0x112>
			return DNS_EAI_SOCKTYPE;
   21156:	f06f 0506 	mvn.w	r5, #6
   2115a:	e75b      	b.n	21014 <nrf91_socket_offload_getaddrinfo+0x68>
			return DNS_EAI_ADDRFAMILY;
   2115c:	f06f 0508 	mvn.w	r5, #8
   21160:	e758      	b.n	21014 <nrf91_socket_offload_getaddrinfo+0x68>
		return DNS_EAI_AGAIN;
   21162:	f06f 0502 	mvn.w	r5, #2
   21166:	e755      	b.n	21014 <nrf91_socket_offload_getaddrinfo+0x68>
		return DNS_EAI_NONAME;
   21168:	f06f 0501 	mvn.w	r5, #1
   2116c:	e752      	b.n	21014 <nrf91_socket_offload_getaddrinfo+0x68>

0002116e <z_to_nrf_ipv6>:
	nrf_out->sin6_len = sizeof(struct nrf_sockaddr_in6);
   2116e:	2224      	movs	r2, #36	; 0x24
{
   21170:	b5f0      	push	{r4, r5, r6, r7, lr}
	nrf_out->sin6_len = sizeof(struct nrf_sockaddr_in6);
   21172:	700a      	strb	r2, [r1, #0]
	nrf_out->sin6_port = ptr->sin6_port;
   21174:	8842      	ldrh	r2, [r0, #2]
{
   21176:	4604      	mov	r4, r0
	nrf_out->sin6_port = ptr->sin6_port;
   21178:	810a      	strh	r2, [r1, #8]
	nrf_out->sin6_family = NRF_AF_INET6;
   2117a:	220a      	movs	r2, #10
{
   2117c:	460b      	mov	r3, r1
	nrf_out->sin6_family = NRF_AF_INET6;
   2117e:	604a      	str	r2, [r1, #4]
   21180:	f101 0610 	add.w	r6, r1, #16
   21184:	1d02      	adds	r2, r0, #4
   21186:	f100 0714 	add.w	r7, r0, #20
   2118a:	4635      	mov	r5, r6
   2118c:	6810      	ldr	r0, [r2, #0]
   2118e:	6851      	ldr	r1, [r2, #4]
   21190:	3208      	adds	r2, #8
   21192:	c503      	stmia	r5!, {r0, r1}
   21194:	42ba      	cmp	r2, r7
   21196:	462e      	mov	r6, r5
   21198:	d1f7      	bne.n	2118a <z_to_nrf_ipv6+0x1c>
	nrf_out->sin6_scope_id = (u32_t)ptr->sin6_scope_id;
   2119a:	7d22      	ldrb	r2, [r4, #20]
   2119c:	621a      	str	r2, [r3, #32]
}
   2119e:	bdf0      	pop	{r4, r5, r6, r7, pc}

000211a0 <nrf91_socket_offload_sendto>:
{
   211a0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   211a4:	b08d      	sub	sp, #52	; 0x34
   211a6:	9c14      	ldr	r4, [sp, #80]	; 0x50
   211a8:	4605      	mov	r5, r0
   211aa:	460e      	mov	r6, r1
   211ac:	4617      	mov	r7, r2
   211ae:	4698      	mov	r8, r3
	if (to == NULL) {
   211b0:	b96c      	cbnz	r4, 211ce <nrf91_socket_offload_sendto+0x2e>
		retval = nrf_sendto(sd, buf, len, z_to_nrf_flags(flags), NULL,
   211b2:	4618      	mov	r0, r3
   211b4:	f7ff fd74 	bl	20ca0 <z_to_nrf_flags>
   211b8:	e9cd 4400 	strd	r4, r4, [sp]
		retval = nrf_sendto(sd, buf, len, z_to_nrf_flags(flags), &ipv6,
   211bc:	4603      	mov	r3, r0
   211be:	463a      	mov	r2, r7
   211c0:	4631      	mov	r1, r6
   211c2:	4628      	mov	r0, r5
   211c4:	f7f5 fffe 	bl	171c4 <nrf_sendto>
}
   211c8:	b00d      	add	sp, #52	; 0x34
   211ca:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	} else if (to->sa_family == AF_INET) {
   211ce:	8823      	ldrh	r3, [r4, #0]
   211d0:	2b01      	cmp	r3, #1
   211d2:	d110      	bne.n	211f6 <nrf91_socket_offload_sendto+0x56>
	nrf_out->sin_port = ptr->sin_port;
   211d4:	8863      	ldrh	r3, [r4, #2]
	nrf_out->sin_len = sizeof(struct nrf_sockaddr_in);
   211d6:	2110      	movs	r1, #16
	nrf_out->sin_port = ptr->sin_port;
   211d8:	f8ad 3014 	strh.w	r3, [sp, #20]
	nrf_out->sin_family = NRF_AF_INET;
   211dc:	2302      	movs	r3, #2
   211de:	9304      	str	r3, [sp, #16]
	nrf_out->sin_addr.s_addr = ptr->sin_addr.s_addr;
   211e0:	6863      	ldr	r3, [r4, #4]
		retval = nrf_sendto(sd, buf, len, z_to_nrf_flags(flags), &ipv4,
   211e2:	4640      	mov	r0, r8
	nrf_out->sin_addr.s_addr = ptr->sin_addr.s_addr;
   211e4:	9306      	str	r3, [sp, #24]
	nrf_out->sin_len = sizeof(struct nrf_sockaddr_in);
   211e6:	f88d 100c 	strb.w	r1, [sp, #12]
		retval = nrf_sendto(sd, buf, len, z_to_nrf_flags(flags), &ipv4,
   211ea:	f7ff fd59 	bl	20ca0 <z_to_nrf_flags>
   211ee:	ab03      	add	r3, sp, #12
   211f0:	9101      	str	r1, [sp, #4]
   211f2:	9300      	str	r3, [sp, #0]
   211f4:	e7e2      	b.n	211bc <nrf91_socket_offload_sendto+0x1c>
	} else if (to->sa_family == AF_INET6) {
   211f6:	2b02      	cmp	r3, #2
   211f8:	d10c      	bne.n	21214 <nrf91_socket_offload_sendto+0x74>
		z_to_nrf_ipv6(to, &ipv6);
   211fa:	f10d 090c 	add.w	r9, sp, #12
   211fe:	4649      	mov	r1, r9
   21200:	4620      	mov	r0, r4
   21202:	f7ff ffb4 	bl	2116e <z_to_nrf_ipv6>
		retval = nrf_sendto(sd, buf, len, z_to_nrf_flags(flags), &ipv6,
   21206:	4640      	mov	r0, r8
   21208:	f7ff fd4a 	bl	20ca0 <z_to_nrf_flags>
   2120c:	2324      	movs	r3, #36	; 0x24
   2120e:	e9cd 9300 	strd	r9, r3, [sp]
   21212:	e7d3      	b.n	211bc <nrf91_socket_offload_sendto+0x1c>
	errno = ENOTSUP;
   21214:	f7fe ff03 	bl	2001e <__errno>
   21218:	2386      	movs	r3, #134	; 0x86
   2121a:	6003      	str	r3, [r0, #0]
	return retval;
   2121c:	f04f 30ff 	mov.w	r0, #4294967295
   21220:	e7d2      	b.n	211c8 <nrf91_socket_offload_sendto+0x28>

00021222 <nrf91_socket_offload_recvfrom>:
{
   21222:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   21226:	4605      	mov	r5, r0
   21228:	b08c      	sub	sp, #48	; 0x30
   2122a:	4618      	mov	r0, r3
   2122c:	e9dd 4612 	ldrd	r4, r6, [sp, #72]	; 0x48
   21230:	4690      	mov	r8, r2
	if (from == NULL) {
   21232:	f7ff fd35 	bl	20ca0 <z_to_nrf_flags>
   21236:	4603      	mov	r3, r0
   21238:	b954      	cbnz	r4, 21250 <nrf91_socket_offload_recvfrom+0x2e>
		retval = nrf_recvfrom(sd, buf, len, z_to_nrf_flags(flags), NULL,
   2123a:	4628      	mov	r0, r5
   2123c:	e9cd 4400 	strd	r4, r4, [sp]
   21240:	4642      	mov	r2, r8
   21242:	f7f5 fff5 	bl	17230 <nrf_recvfrom>
   21246:	4605      	mov	r5, r0
}
   21248:	4628      	mov	r0, r5
   2124a:	b00c      	add	sp, #48	; 0x30
   2124c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		nrf_socklen_t sock_len = sizeof(struct nrf_sockaddr_in6);
   21250:	2224      	movs	r2, #36	; 0x24
		retval = nrf_recvfrom(sd, buf, len, z_to_nrf_flags(flags),
   21252:	af03      	add	r7, sp, #12
		nrf_socklen_t sock_len = sizeof(struct nrf_sockaddr_in6);
   21254:	9202      	str	r2, [sp, #8]
		retval = nrf_recvfrom(sd, buf, len, z_to_nrf_flags(flags),
   21256:	aa02      	add	r2, sp, #8
   21258:	9201      	str	r2, [sp, #4]
   2125a:	4628      	mov	r0, r5
   2125c:	9700      	str	r7, [sp, #0]
   2125e:	4642      	mov	r2, r8
   21260:	f7f5 ffe6 	bl	17230 <nrf_recvfrom>
		if (cliaddr->sa_family == NRF_AF_INET) {
   21264:	9b04      	ldr	r3, [sp, #16]
		retval = nrf_recvfrom(sd, buf, len, z_to_nrf_flags(flags),
   21266:	4605      	mov	r5, r0
		if (cliaddr->sa_family == NRF_AF_INET) {
   21268:	2b02      	cmp	r3, #2
   2126a:	d109      	bne.n	21280 <nrf91_socket_offload_recvfrom+0x5e>
	ptr->sin_port = nrf_in->sin_port;
   2126c:	f8bd 3014 	ldrh.w	r3, [sp, #20]
   21270:	8063      	strh	r3, [r4, #2]
	ptr->sin_family = AF_INET;
   21272:	2301      	movs	r3, #1
   21274:	8023      	strh	r3, [r4, #0]
	ptr->sin_addr.s_addr = nrf_in->sin_addr.s_addr;
   21276:	9b06      	ldr	r3, [sp, #24]
   21278:	6063      	str	r3, [r4, #4]
			*fromlen = sizeof(struct sockaddr_in);
   2127a:	2308      	movs	r3, #8
			*fromlen = sizeof(struct sockaddr_in6);
   2127c:	6033      	str	r3, [r6, #0]
	return retval;
   2127e:	e7e3      	b.n	21248 <nrf91_socket_offload_recvfrom+0x26>
		} else if (cliaddr->sa_family == NRF_AF_INET6) {
   21280:	2b0a      	cmp	r3, #10
   21282:	d1e1      	bne.n	21248 <nrf91_socket_offload_recvfrom+0x26>
			nrf_to_z_ipv6(from, (struct nrf_sockaddr_in6 *)
   21284:	4639      	mov	r1, r7
   21286:	4620      	mov	r0, r4
   21288:	f7ff fe7c 	bl	20f84 <nrf_to_z_ipv6>
			*fromlen = sizeof(struct sockaddr_in6);
   2128c:	2318      	movs	r3, #24
   2128e:	e7f5      	b.n	2127c <nrf91_socket_offload_recvfrom+0x5a>

00021290 <nrf91_socket_offload_connect>:
{
   21290:	b530      	push	{r4, r5, lr}
	if (addr->sa_family == AF_INET) {
   21292:	880c      	ldrh	r4, [r1, #0]
{
   21294:	b08b      	sub	sp, #44	; 0x2c
	if (addr->sa_family == AF_INET) {
   21296:	2c01      	cmp	r4, #1
{
   21298:	4605      	mov	r5, r0
   2129a:	460b      	mov	r3, r1
	if (addr->sa_family == AF_INET) {
   2129c:	d10e      	bne.n	212bc <nrf91_socket_offload_connect+0x2c>
	nrf_out->sin_port = ptr->sin_port;
   2129e:	8849      	ldrh	r1, [r1, #2]
	nrf_out->sin_len = sizeof(struct nrf_sockaddr_in);
   212a0:	2210      	movs	r2, #16
	nrf_out->sin_port = ptr->sin_port;
   212a2:	f8ad 100c 	strh.w	r1, [sp, #12]
	nrf_out->sin_family = NRF_AF_INET;
   212a6:	2102      	movs	r1, #2
	nrf_out->sin_addr.s_addr = ptr->sin_addr.s_addr;
   212a8:	685b      	ldr	r3, [r3, #4]
	nrf_out->sin_family = NRF_AF_INET;
   212aa:	9102      	str	r1, [sp, #8]
	nrf_out->sin_len = sizeof(struct nrf_sockaddr_in);
   212ac:	f88d 2004 	strb.w	r2, [sp, #4]
	nrf_out->sin_addr.s_addr = ptr->sin_addr.s_addr;
   212b0:	9304      	str	r3, [sp, #16]
		retval = nrf_connect(sd, (const struct nrf_sockaddr_in *)&ipv4,
   212b2:	a901      	add	r1, sp, #4
		retval = nrf_connect(sd, (const struct nrf_sockaddr *)&ipv6,
   212b4:	f7f5 fff2 	bl	1729c <nrf_connect>
}
   212b8:	b00b      	add	sp, #44	; 0x2c
   212ba:	bd30      	pop	{r4, r5, pc}
	} else if (addr->sa_family == AF_INET6) {
   212bc:	2c02      	cmp	r4, #2
   212be:	d107      	bne.n	212d0 <nrf91_socket_offload_connect+0x40>
		z_to_nrf_ipv6(addr, &ipv6);
   212c0:	a901      	add	r1, sp, #4
   212c2:	4618      	mov	r0, r3
   212c4:	f7ff ff53 	bl	2116e <z_to_nrf_ipv6>
		retval = nrf_connect(sd, (const struct nrf_sockaddr *)&ipv6,
   212c8:	2224      	movs	r2, #36	; 0x24
   212ca:	a901      	add	r1, sp, #4
   212cc:	4628      	mov	r0, r5
   212ce:	e7f1      	b.n	212b4 <nrf91_socket_offload_connect+0x24>
		retval = nrf_connect(sd, (void *)addr, addrlen);
   212d0:	f7f5 ffe4 	bl	1729c <nrf_connect>
		if (retval < 0) {
   212d4:	2800      	cmp	r0, #0
   212d6:	daef      	bge.n	212b8 <nrf91_socket_offload_connect+0x28>
	errno = ENOTSUP;
   212d8:	f7fe fea1 	bl	2001e <__errno>
   212dc:	2386      	movs	r3, #134	; 0x86
   212de:	6003      	str	r3, [r0, #0]
   212e0:	f04f 30ff 	mov.w	r0, #4294967295
   212e4:	e7e8      	b.n	212b8 <nrf91_socket_offload_connect+0x28>

000212e6 <nrf91_socket_offload_accept>:
{
   212e6:	b5f0      	push	{r4, r5, r6, r7, lr}
   212e8:	4616      	mov	r6, r2
   212ea:	b08b      	sub	sp, #44	; 0x2c
	if ((addr != NULL) && (addrlen != NULL)) {
   212ec:	460c      	mov	r4, r1
   212ee:	b1f1      	cbz	r1, 2132e <nrf91_socket_offload_accept+0x48>
   212f0:	b302      	cbz	r2, 21334 <nrf91_socket_offload_accept+0x4e>
		if (*addrlen == sizeof(struct sockaddr_in)) {
   212f2:	6813      	ldr	r3, [r2, #0]
		nrf_addrlen_ptr = &nrf_addrlen;
   212f4:	466a      	mov	r2, sp
		if (*addrlen == sizeof(struct sockaddr_in)) {
   212f6:	2b08      	cmp	r3, #8
			nrf_addrlen = sizeof(struct nrf_sockaddr_in);
   212f8:	bf0c      	ite	eq
   212fa:	2310      	moveq	r3, #16
			nrf_addrlen = sizeof(struct nrf_sockaddr_in6);
   212fc:	2324      	movne	r3, #36	; 0x24
		nrf_addr_ptr = (struct nrf_sockaddr *)&nrf_addr;
   212fe:	ad01      	add	r5, sp, #4
			nrf_addrlen = sizeof(struct nrf_sockaddr_in6);
   21300:	9300      	str	r3, [sp, #0]
	retval = nrf_accept(sd, nrf_addr_ptr, nrf_addrlen_ptr);
   21302:	4629      	mov	r1, r5
   21304:	f7f5 ffec 	bl	172e0 <nrf_accept>
	if (retval < 0) {
   21308:	1e07      	subs	r7, r0, #0
   2130a:	db22      	blt.n	21352 <nrf91_socket_offload_accept+0x6c>
	if ((addr != NULL) && (addrlen != NULL)) {
   2130c:	b164      	cbz	r4, 21328 <nrf91_socket_offload_accept+0x42>
   2130e:	b15e      	cbz	r6, 21328 <nrf91_socket_offload_accept+0x42>
		if (nrf_addr_ptr->sa_family == NRF_AF_INET) {
   21310:	686b      	ldr	r3, [r5, #4]
   21312:	2b02      	cmp	r3, #2
   21314:	d110      	bne.n	21338 <nrf91_socket_offload_accept+0x52>
			*addrlen = sizeof(struct sockaddr_in);
   21316:	2308      	movs	r3, #8
   21318:	6033      	str	r3, [r6, #0]
	ptr->sin_port = nrf_in->sin_port;
   2131a:	f8bd 300c 	ldrh.w	r3, [sp, #12]
   2131e:	8063      	strh	r3, [r4, #2]
	ptr->sin_family = AF_INET;
   21320:	2301      	movs	r3, #1
   21322:	8023      	strh	r3, [r4, #0]
	ptr->sin_addr.s_addr = nrf_in->sin_addr.s_addr;
   21324:	9b04      	ldr	r3, [sp, #16]
   21326:	6063      	str	r3, [r4, #4]
}
   21328:	4638      	mov	r0, r7
   2132a:	b00b      	add	sp, #44	; 0x2c
   2132c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	nrf_socklen_t *nrf_addrlen_ptr = NULL;
   2132e:	460a      	mov	r2, r1
	struct nrf_sockaddr *nrf_addr_ptr = NULL;
   21330:	460d      	mov	r5, r1
   21332:	e7e6      	b.n	21302 <nrf91_socket_offload_accept+0x1c>
   21334:	4615      	mov	r5, r2
   21336:	e7e4      	b.n	21302 <nrf91_socket_offload_accept+0x1c>
		} else if (nrf_addr_ptr->sa_family == NRF_AF_INET6) {
   21338:	2b0a      	cmp	r3, #10
   2133a:	d106      	bne.n	2134a <nrf91_socket_offload_accept+0x64>
			*addrlen = sizeof(struct sockaddr_in6);
   2133c:	2318      	movs	r3, #24
			nrf_to_z_ipv6(
   2133e:	a901      	add	r1, sp, #4
			*addrlen = sizeof(struct sockaddr_in6);
   21340:	6033      	str	r3, [r6, #0]
			nrf_to_z_ipv6(
   21342:	4620      	mov	r0, r4
   21344:	f7ff fe1e 	bl	20f84 <nrf_to_z_ipv6>
   21348:	e7ee      	b.n	21328 <nrf91_socket_offload_accept+0x42>
	errno = ENOTSUP;
   2134a:	f7fe fe68 	bl	2001e <__errno>
   2134e:	2386      	movs	r3, #134	; 0x86
   21350:	6003      	str	r3, [r0, #0]
		return -1;
   21352:	f04f 37ff 	mov.w	r7, #4294967295
   21356:	e7e7      	b.n	21328 <nrf91_socket_offload_accept+0x42>

00021358 <nrf91_socket_offload_socket>:
{
   21358:	b510      	push	{r4, lr}
	family = z_to_nrf_family(family);
   2135a:	b280      	uxth	r0, r0
   2135c:	f7ff fcaa 	bl	20cb4 <z_to_nrf_family>
	if (family == -EAFNOSUPPORT) {
   21360:	f110 0f6a 	cmn.w	r0, #106	; 0x6a
	family = z_to_nrf_family(family);
   21364:	4604      	mov	r4, r0
	if (family == -EAFNOSUPPORT) {
   21366:	d106      	bne.n	21376 <nrf91_socket_offload_socket+0x1e>
		errno = EAFNOSUPPORT;
   21368:	f7fe fe59 	bl	2001e <__errno>
   2136c:	236a      	movs	r3, #106	; 0x6a
		errno = EPROTONOSUPPORT;
   2136e:	6003      	str	r3, [r0, #0]
}
   21370:	f04f 30ff 	mov.w	r0, #4294967295
   21374:	bd10      	pop	{r4, pc}
	switch (socktype) {
   21376:	2903      	cmp	r1, #3
   21378:	d003      	beq.n	21382 <nrf91_socket_offload_socket+0x2a>
		return NRF_SOCK_MGMT;
   2137a:	2904      	cmp	r1, #4
   2137c:	bf08      	it	eq
   2137e:	f44f 7100 	moveq.w	r1, #512	; 0x200
	proto = z_to_nrf_protocol(proto);
   21382:	4610      	mov	r0, r2
   21384:	f7ff fcac 	bl	20ce0 <z_to_nrf_protocol>
	if (proto == -EPROTONOSUPPORT) {
   21388:	f110 0f7b 	cmn.w	r0, #123	; 0x7b
	proto = z_to_nrf_protocol(proto);
   2138c:	4602      	mov	r2, r0
	if (proto == -EPROTONOSUPPORT) {
   2138e:	d103      	bne.n	21398 <nrf91_socket_offload_socket+0x40>
		errno = EPROTONOSUPPORT;
   21390:	f7fe fe45 	bl	2001e <__errno>
   21394:	237b      	movs	r3, #123	; 0x7b
   21396:	e7ea      	b.n	2136e <nrf91_socket_offload_socket+0x16>
	retval = nrf_socket(family, type, proto);
   21398:	4620      	mov	r0, r4
}
   2139a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	retval = nrf_socket(family, type, proto);
   2139e:	f7f5 bef1 	b.w	17184 <nrf_socket>

000213a2 <nrf91_socket_offload_setsockopt>:
{
   213a2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	switch (z_in_level) {
   213a6:	f5b1 7f8d 	cmp.w	r1, #282	; 0x11a
{
   213aa:	b086      	sub	sp, #24
   213ac:	4680      	mov	r8, r0
   213ae:	460c      	mov	r4, r1
   213b0:	4617      	mov	r7, r2
   213b2:	461d      	mov	r5, r3
   213b4:	9e0c      	ldr	r6, [sp, #48]	; 0x30
	switch (z_in_level) {
   213b6:	d002      	beq.n	213be <nrf91_socket_offload_setsockopt+0x1c>
   213b8:	dc1c      	bgt.n	213f4 <nrf91_socket_offload_setsockopt+0x52>
   213ba:	2901      	cmp	r1, #1
   213bc:	d122      	bne.n	21404 <nrf91_socket_offload_setsockopt+0x62>
	if (z_to_nrf_optname(level, optname, &nrf_optname) < 0)
   213be:	aa03      	add	r2, sp, #12
   213c0:	4639      	mov	r1, r7
   213c2:	4620      	mov	r0, r4
   213c4:	f7ef ff78 	bl	112b8 <z_to_nrf_optname>
   213c8:	2800      	cmp	r0, #0
   213ca:	db1b      	blt.n	21404 <nrf91_socket_offload_setsockopt+0x62>
	if ((level == SOL_SOCKET) && (optname == SO_RCVTIMEO)) {
   213cc:	2c01      	cmp	r4, #1
   213ce:	d107      	bne.n	213e0 <nrf91_socket_offload_setsockopt+0x3e>
   213d0:	2f14      	cmp	r7, #20
   213d2:	d105      	bne.n	213e0 <nrf91_socket_offload_setsockopt+0x3e>
		nrf_optlen = sizeof(struct nrf_timeval);
   213d4:	2608      	movs	r6, #8
		nrf_rcvtimeo.tv_sec = ((struct timeval *)optval)->tv_sec;
   213d6:	682b      	ldr	r3, [r5, #0]
   213d8:	9304      	str	r3, [sp, #16]
		nrf_rcvtimeo.tv_usec = ((struct timeval *)optval)->tv_usec;
   213da:	686b      	ldr	r3, [r5, #4]
		nrf_optval = &nrf_rcvtimeo;
   213dc:	ad04      	add	r5, sp, #16
		nrf_rcvtimeo.tv_usec = ((struct timeval *)optval)->tv_usec;
   213de:	9305      	str	r3, [sp, #20]
	retval = nrf_setsockopt(sd, nrf_level, nrf_optname, nrf_optval,
   213e0:	9600      	str	r6, [sp, #0]
   213e2:	462b      	mov	r3, r5
   213e4:	9a03      	ldr	r2, [sp, #12]
   213e6:	4621      	mov	r1, r4
   213e8:	4640      	mov	r0, r8
   213ea:	f7f5 ffa1 	bl	17330 <nrf_setsockopt>
}
   213ee:	b006      	add	sp, #24
   213f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	switch (z_in_level) {
   213f4:	f240 2302 	movw	r3, #514	; 0x202
   213f8:	4299      	cmp	r1, r3
   213fa:	d0e0      	beq.n	213be <nrf91_socket_offload_setsockopt+0x1c>
   213fc:	f240 2303 	movw	r3, #515	; 0x203
   21400:	4299      	cmp	r1, r3
   21402:	e7db      	b.n	213bc <nrf91_socket_offload_setsockopt+0x1a>
	errno = ENOPROTOOPT;
   21404:	f7fe fe0b 	bl	2001e <__errno>
   21408:	236d      	movs	r3, #109	; 0x6d
   2140a:	6003      	str	r3, [r0, #0]
   2140c:	f04f 30ff 	mov.w	r0, #4294967295
   21410:	e7ed      	b.n	213ee <nrf91_socket_offload_setsockopt+0x4c>

00021412 <nrf91_socket_offload_bind>:
{
   21412:	b510      	push	{r4, lr}
	if (addr->sa_family == AF_INET) {
   21414:	880a      	ldrh	r2, [r1, #0]
{
   21416:	b08a      	sub	sp, #40	; 0x28
	if (addr->sa_family == AF_INET) {
   21418:	2a01      	cmp	r2, #1
{
   2141a:	4604      	mov	r4, r0
   2141c:	460b      	mov	r3, r1
	if (addr->sa_family == AF_INET) {
   2141e:	d10e      	bne.n	2143e <nrf91_socket_offload_bind+0x2c>
	nrf_out->sin_port = ptr->sin_port;
   21420:	8849      	ldrh	r1, [r1, #2]
	nrf_out->sin_len = sizeof(struct nrf_sockaddr_in);
   21422:	2210      	movs	r2, #16
	nrf_out->sin_port = ptr->sin_port;
   21424:	f8ad 100c 	strh.w	r1, [sp, #12]
	nrf_out->sin_family = NRF_AF_INET;
   21428:	2102      	movs	r1, #2
	nrf_out->sin_addr.s_addr = ptr->sin_addr.s_addr;
   2142a:	685b      	ldr	r3, [r3, #4]
	nrf_out->sin_family = NRF_AF_INET;
   2142c:	9102      	str	r1, [sp, #8]
	nrf_out->sin_len = sizeof(struct nrf_sockaddr_in);
   2142e:	f88d 2004 	strb.w	r2, [sp, #4]
	nrf_out->sin_addr.s_addr = ptr->sin_addr.s_addr;
   21432:	9304      	str	r3, [sp, #16]
		retval = nrf_bind(sd, (const struct nrf_sockaddr *)&ipv4,
   21434:	a901      	add	r1, sp, #4
		retval = nrf_bind(sd, (const struct nrf_sockaddr *)&ipv6,
   21436:	f7f5 ff69 	bl	1730c <nrf_bind>
}
   2143a:	b00a      	add	sp, #40	; 0x28
   2143c:	bd10      	pop	{r4, pc}
	} else if (addr->sa_family == AF_INET6) {
   2143e:	2a02      	cmp	r2, #2
   21440:	d107      	bne.n	21452 <nrf91_socket_offload_bind+0x40>
		z_to_nrf_ipv6(addr, &ipv6);
   21442:	a901      	add	r1, sp, #4
   21444:	4618      	mov	r0, r3
   21446:	f7ff fe92 	bl	2116e <z_to_nrf_ipv6>
		retval = nrf_bind(sd, (const struct nrf_sockaddr *)&ipv6,
   2144a:	2224      	movs	r2, #36	; 0x24
   2144c:	a901      	add	r1, sp, #4
   2144e:	4620      	mov	r0, r4
   21450:	e7f1      	b.n	21436 <nrf91_socket_offload_bind+0x24>
	errno = ENOTSUP;
   21452:	f7fe fde4 	bl	2001e <__errno>
   21456:	2386      	movs	r3, #134	; 0x86
   21458:	6003      	str	r3, [r0, #0]
   2145a:	f04f 30ff 	mov.w	r0, #4294967295
   2145e:	e7ec      	b.n	2143a <nrf91_socket_offload_bind+0x28>

00021460 <z_impl_uart_irq_rx_enable>:
	if (api->irq_rx_enable) {
   21460:	6843      	ldr	r3, [r0, #4]
   21462:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   21464:	b103      	cbz	r3, 21468 <z_impl_uart_irq_rx_enable+0x8>
		api->irq_rx_enable(dev);
   21466:	4718      	bx	r3
}
   21468:	4770      	bx	lr

0002146a <response_handler>:
	write_uart_string(response);
   2146a:	4608      	mov	r0, r1
   2146c:	f7f0 bb90 	b.w	11b90 <write_uart_string>

00021470 <is_lfcr>:
	if ((chr == '\r') || (chr == '\n')) {
   21470:	280d      	cmp	r0, #13
   21472:	d004      	beq.n	2147e <is_lfcr+0xe>
   21474:	f1a0 030a 	sub.w	r3, r0, #10
   21478:	4258      	negs	r0, r3
   2147a:	4158      	adcs	r0, r3
   2147c:	4770      	bx	lr
		return true;
   2147e:	2001      	movs	r0, #1
}
   21480:	4770      	bx	lr

00021482 <skip_command_prefix>:
{
   21482:	b510      	push	{r4, lr}
	*cmd += sizeof("AT") - 1;
   21484:	6802      	ldr	r2, [r0, #0]
{
   21486:	4601      	mov	r1, r0
	*cmd += sizeof("AT") - 1;
   21488:	1c93      	adds	r3, r2, #2
   2148a:	6003      	str	r3, [r0, #0]
	if (is_lfcr(**cmd) || is_terminated(**cmd)) {
   2148c:	7894      	ldrb	r4, [r2, #2]
   2148e:	4620      	mov	r0, r4
   21490:	f7ff ffee 	bl	21470 <is_lfcr>
   21494:	b910      	cbnz	r0, 2149c <skip_command_prefix+0x1a>
	if (chr == AT_CMD_BUFFER_TERMINATOR) {
   21496:	b10c      	cbz	r4, 2149c <skip_command_prefix+0x1a>
	(*cmd)++;
   21498:	3203      	adds	r2, #3
   2149a:	600a      	str	r2, [r1, #0]
}
   2149c:	bd10      	pop	{r4, pc}

0002149e <at_params_list_init>:
{
   2149e:	b538      	push	{r3, r4, r5, lr}
   214a0:	460d      	mov	r5, r1
	if (list == NULL) {
   214a2:	4604      	mov	r4, r0
   214a4:	b140      	cbz	r0, 214b8 <at_params_list_init+0x1a>
	list->params = k_calloc(max_params_count, sizeof(struct at_param));
   214a6:	210c      	movs	r1, #12
   214a8:	4628      	mov	r0, r5
   214aa:	f000 f918 	bl	216de <k_calloc>
   214ae:	6060      	str	r0, [r4, #4]
	if (list->params == NULL) {
   214b0:	b128      	cbz	r0, 214be <at_params_list_init+0x20>
	return 0;
   214b2:	2000      	movs	r0, #0
	list->param_count = max_params_count;
   214b4:	6025      	str	r5, [r4, #0]
}
   214b6:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
   214b8:	f06f 0015 	mvn.w	r0, #21
   214bc:	e7fb      	b.n	214b6 <at_params_list_init+0x18>
		return -ENOMEM;
   214be:	f06f 000b 	mvn.w	r0, #11
   214c2:	e7f8      	b.n	214b6 <at_params_list_init+0x18>

000214c4 <at_params_list_free>:

void at_params_list_free(struct at_param_list *list)
{
   214c4:	b538      	push	{r3, r4, r5, lr}
	if (list == NULL || list->params == NULL) {
   214c6:	4604      	mov	r4, r0
   214c8:	b148      	cbz	r0, 214de <at_params_list_free+0x1a>
   214ca:	6843      	ldr	r3, [r0, #4]
   214cc:	b13b      	cbz	r3, 214de <at_params_list_free+0x1a>
		return;
	}

	at_params_list_clear(list);

	list->param_count = 0;
   214ce:	2500      	movs	r5, #0
	at_params_list_clear(list);
   214d0:	f7f0 ff9e 	bl	12410 <at_params_list_clear>
	list->param_count = 0;
   214d4:	6025      	str	r5, [r4, #0]
	k_free(list->params);
   214d6:	6860      	ldr	r0, [r4, #4]
   214d8:	f000 f8fc 	bl	216d4 <k_free>
	list->params = NULL;
   214dc:	6065      	str	r5, [r4, #4]
}
   214de:	bd38      	pop	{r3, r4, r5, pc}

000214e0 <at_params_short_put>:

int at_params_short_put(const struct at_param_list *list, size_t index,
			u16_t value)
{
   214e0:	b538      	push	{r3, r4, r5, lr}
   214e2:	4615      	mov	r5, r2
	if (list == NULL || list->params == NULL) {
   214e4:	b910      	cbnz	r0, 214ec <at_params_short_put+0xc>
		return -EINVAL;
   214e6:	f06f 0015 	mvn.w	r0, #21
	at_param_clear(param);

	param->type = AT_PARAM_TYPE_NUM_SHORT;
	param->value.int_val = (u32_t)(value & USHRT_MAX);
	return 0;
}
   214ea:	bd38      	pop	{r3, r4, r5, pc}
	if (list == NULL || list->params == NULL) {
   214ec:	6843      	ldr	r3, [r0, #4]
   214ee:	2b00      	cmp	r3, #0
   214f0:	d0f9      	beq.n	214e6 <at_params_short_put+0x6>
	struct at_param *param = at_params_get(list, index);
   214f2:	f7f0 ff21 	bl	12338 <at_params_get>
	if (param == NULL) {
   214f6:	4604      	mov	r4, r0
   214f8:	2800      	cmp	r0, #0
   214fa:	d0f4      	beq.n	214e6 <at_params_short_put+0x6>
	at_param_clear(param);
   214fc:	f7f0 ff66 	bl	123cc <at_param_clear>
	param->type = AT_PARAM_TYPE_NUM_SHORT;
   21500:	2301      	movs	r3, #1
	param->value.int_val = (u32_t)(value & USHRT_MAX);
   21502:	60a5      	str	r5, [r4, #8]
	param->type = AT_PARAM_TYPE_NUM_SHORT;
   21504:	7023      	strb	r3, [r4, #0]
	return 0;
   21506:	2000      	movs	r0, #0
   21508:	e7ef      	b.n	214ea <at_params_short_put+0xa>

0002150a <at_params_empty_put>:

int at_params_empty_put(const struct at_param_list *list, size_t index)
{
   2150a:	b510      	push	{r4, lr}
	if (list == NULL || list->params == NULL) {
   2150c:	b910      	cbnz	r0, 21514 <at_params_empty_put+0xa>
		return -EINVAL;
   2150e:	f06f 0015 	mvn.w	r0, #21

	param->type = AT_PARAM_TYPE_EMPTY;
	param->value.int_val = 0;

	return 0;
}
   21512:	bd10      	pop	{r4, pc}
	if (list == NULL || list->params == NULL) {
   21514:	6843      	ldr	r3, [r0, #4]
   21516:	2b00      	cmp	r3, #0
   21518:	d0f9      	beq.n	2150e <at_params_empty_put+0x4>
	struct at_param *param = at_params_get(list, index);
   2151a:	f7f0 ff0d 	bl	12338 <at_params_get>
	if (param == NULL) {
   2151e:	4604      	mov	r4, r0
   21520:	2800      	cmp	r0, #0
   21522:	d0f4      	beq.n	2150e <at_params_empty_put+0x4>
	at_param_clear(param);
   21524:	f7f0 ff52 	bl	123cc <at_param_clear>
	param->type = AT_PARAM_TYPE_EMPTY;
   21528:	2305      	movs	r3, #5
	param->value.int_val = 0;
   2152a:	2000      	movs	r0, #0
	param->type = AT_PARAM_TYPE_EMPTY;
   2152c:	7023      	strb	r3, [r4, #0]
	param->value.int_val = 0;
   2152e:	60a0      	str	r0, [r4, #8]
	return 0;
   21530:	e7ef      	b.n	21512 <at_params_empty_put+0x8>

00021532 <at_params_int_put>:

int at_params_int_put(const struct at_param_list *list, size_t index,
		      u32_t value)
{
   21532:	b538      	push	{r3, r4, r5, lr}
   21534:	4615      	mov	r5, r2
	if (list == NULL || list->params == NULL) {
   21536:	b910      	cbnz	r0, 2153e <at_params_int_put+0xc>
		return -EINVAL;
   21538:	f06f 0015 	mvn.w	r0, #21
	at_param_clear(param);

	param->type = AT_PARAM_TYPE_NUM_INT;
	param->value.int_val = value;
	return 0;
}
   2153c:	bd38      	pop	{r3, r4, r5, pc}
	if (list == NULL || list->params == NULL) {
   2153e:	6843      	ldr	r3, [r0, #4]
   21540:	2b00      	cmp	r3, #0
   21542:	d0f9      	beq.n	21538 <at_params_int_put+0x6>
	struct at_param *param = at_params_get(list, index);
   21544:	f7f0 fef8 	bl	12338 <at_params_get>
	if (param == NULL) {
   21548:	4604      	mov	r4, r0
   2154a:	2800      	cmp	r0, #0
   2154c:	d0f4      	beq.n	21538 <at_params_int_put+0x6>
	at_param_clear(param);
   2154e:	f7f0 ff3d 	bl	123cc <at_param_clear>
	param->type = AT_PARAM_TYPE_NUM_INT;
   21552:	2302      	movs	r3, #2
	param->value.int_val = value;
   21554:	60a5      	str	r5, [r4, #8]
	param->type = AT_PARAM_TYPE_NUM_INT;
   21556:	7023      	strb	r3, [r4, #0]
	return 0;
   21558:	2000      	movs	r0, #0
   2155a:	e7ef      	b.n	2153c <at_params_int_put+0xa>

0002155c <at_params_string_put>:

int at_params_string_put(const struct at_param_list *list, size_t index,
			 const char *str, size_t str_len)
{
   2155c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2155e:	4616      	mov	r6, r2
   21560:	461d      	mov	r5, r3
	if (list == NULL || list->params == NULL || str == NULL) {
   21562:	b910      	cbnz	r0, 2156a <at_params_string_put+0xe>
		return -EINVAL;
   21564:	f06f 0015 	mvn.w	r0, #21
	param->size = str_len;
	param->type = AT_PARAM_TYPE_STRING;
	param->value.str_val = param_value;

	return 0;
}
   21568:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (list == NULL || list->params == NULL || str == NULL) {
   2156a:	6843      	ldr	r3, [r0, #4]
   2156c:	2b00      	cmp	r3, #0
   2156e:	d0f9      	beq.n	21564 <at_params_string_put+0x8>
   21570:	2a00      	cmp	r2, #0
   21572:	d0f7      	beq.n	21564 <at_params_string_put+0x8>
	struct at_param *param = at_params_get(list, index);
   21574:	f7f0 fee0 	bl	12338 <at_params_get>
	if (param == NULL) {
   21578:	4604      	mov	r4, r0
   2157a:	2800      	cmp	r0, #0
   2157c:	d0f2      	beq.n	21564 <at_params_string_put+0x8>
	char *param_value = (char *)k_malloc(str_len + 1);
   2157e:	1c68      	adds	r0, r5, #1
   21580:	f7f9 fffe 	bl	1b580 <k_malloc>
	if (param_value == NULL) {
   21584:	4607      	mov	r7, r0
   21586:	b160      	cbz	r0, 215a2 <at_params_string_put+0x46>
   21588:	462a      	mov	r2, r5
   2158a:	4631      	mov	r1, r6
   2158c:	f000 f9d5 	bl	2193a <memcpy>
	at_param_clear(param);
   21590:	4620      	mov	r0, r4
   21592:	f7f0 ff1b 	bl	123cc <at_param_clear>
	param->type = AT_PARAM_TYPE_STRING;
   21596:	2303      	movs	r3, #3
	param->size = str_len;
   21598:	6065      	str	r5, [r4, #4]
	param->type = AT_PARAM_TYPE_STRING;
   2159a:	7023      	strb	r3, [r4, #0]
	param->value.str_val = param_value;
   2159c:	60a7      	str	r7, [r4, #8]
	return 0;
   2159e:	2000      	movs	r0, #0
   215a0:	e7e2      	b.n	21568 <at_params_string_put+0xc>
		return -ENOMEM;
   215a2:	f06f 000b 	mvn.w	r0, #11
   215a6:	e7df      	b.n	21568 <at_params_string_put+0xc>

000215a8 <at_params_array_put>:

int at_params_array_put(const struct at_param_list *list, size_t index,
			const u32_t *array, size_t array_len)
{
   215a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   215aa:	4616      	mov	r6, r2
   215ac:	461d      	mov	r5, r3
	if (list == NULL || list->params == NULL || array == NULL) {
   215ae:	b910      	cbnz	r0, 215b6 <at_params_array_put+0xe>
		return -EINVAL;
   215b0:	f06f 0015 	mvn.w	r0, #21
	param->size = array_len;
	param->type = AT_PARAM_TYPE_ARRAY;
	param->value.array_val = param_value;

	return 0;
}
   215b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (list == NULL || list->params == NULL || array == NULL) {
   215b6:	6843      	ldr	r3, [r0, #4]
   215b8:	2b00      	cmp	r3, #0
   215ba:	d0f9      	beq.n	215b0 <at_params_array_put+0x8>
   215bc:	2a00      	cmp	r2, #0
   215be:	d0f7      	beq.n	215b0 <at_params_array_put+0x8>
	struct at_param *param = at_params_get(list, index);
   215c0:	f7f0 feba 	bl	12338 <at_params_get>
	if (param == NULL) {
   215c4:	4604      	mov	r4, r0
   215c6:	2800      	cmp	r0, #0
   215c8:	d0f2      	beq.n	215b0 <at_params_array_put+0x8>
	u32_t *param_value = (u32_t *)k_malloc(array_len);
   215ca:	4628      	mov	r0, r5
   215cc:	f7f9 ffd8 	bl	1b580 <k_malloc>
	if (param_value == NULL) {
   215d0:	4607      	mov	r7, r0
   215d2:	b160      	cbz	r0, 215ee <at_params_array_put+0x46>
   215d4:	462a      	mov	r2, r5
   215d6:	4631      	mov	r1, r6
   215d8:	f000 f9af 	bl	2193a <memcpy>
	at_param_clear(param);
   215dc:	4620      	mov	r0, r4
   215de:	f7f0 fef5 	bl	123cc <at_param_clear>
	param->type = AT_PARAM_TYPE_ARRAY;
   215e2:	2304      	movs	r3, #4
	param->size = array_len;
   215e4:	6065      	str	r5, [r4, #4]
	param->type = AT_PARAM_TYPE_ARRAY;
   215e6:	7023      	strb	r3, [r4, #0]
	param->value.array_val = param_value;
   215e8:	60a7      	str	r7, [r4, #8]
	return 0;
   215ea:	2000      	movs	r0, #0
   215ec:	e7e2      	b.n	215b4 <at_params_array_put+0xc>
		return -ENOMEM;
   215ee:	f06f 000b 	mvn.w	r0, #11
   215f2:	e7df      	b.n	215b4 <at_params_array_put+0xc>

000215f4 <at_params_int_get>:
	return 0;
}

int at_params_int_get(const struct at_param_list *list, size_t index,
		      u32_t *value)
{
   215f4:	b510      	push	{r4, lr}
   215f6:	4614      	mov	r4, r2
	if (list == NULL || list->params == NULL || value == NULL) {
   215f8:	b910      	cbnz	r0, 21600 <at_params_int_get+0xc>
		return -EINVAL;
   215fa:	f06f 0015 	mvn.w	r0, #21
		return -EINVAL;
	}

	*value = param->value.int_val;
	return 0;
}
   215fe:	bd10      	pop	{r4, pc}
	if (list == NULL || list->params == NULL || value == NULL) {
   21600:	6843      	ldr	r3, [r0, #4]
   21602:	2b00      	cmp	r3, #0
   21604:	d0f9      	beq.n	215fa <at_params_int_get+0x6>
   21606:	2a00      	cmp	r2, #0
   21608:	d0f7      	beq.n	215fa <at_params_int_get+0x6>
	struct at_param *param = at_params_get(list, index);
   2160a:	f7f0 fe95 	bl	12338 <at_params_get>
	if (param == NULL) {
   2160e:	2800      	cmp	r0, #0
   21610:	d0f3      	beq.n	215fa <at_params_int_get+0x6>
	if ((param->type != AT_PARAM_TYPE_NUM_INT) &&
   21612:	7803      	ldrb	r3, [r0, #0]
   21614:	3b01      	subs	r3, #1
   21616:	2b01      	cmp	r3, #1
   21618:	d8ef      	bhi.n	215fa <at_params_int_get+0x6>
	*value = param->value.int_val;
   2161a:	6883      	ldr	r3, [r0, #8]
	return 0;
   2161c:	2000      	movs	r0, #0
	*value = param->value.int_val;
   2161e:	6023      	str	r3, [r4, #0]
	return 0;
   21620:	e7ed      	b.n	215fe <at_params_int_get+0xa>

00021622 <at_params_string_get>:

int at_params_string_get(const struct at_param_list *list, size_t index,
			 char *value, size_t *len)
{
   21622:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   21624:	4616      	mov	r6, r2
   21626:	461c      	mov	r4, r3
	if (list == NULL || list->params == NULL || value == NULL ||
   21628:	b910      	cbnz	r0, 21630 <at_params_string_get+0xe>
	    value == NULL || len == NULL) {
		return -EINVAL;
   2162a:	f06f 0015 	mvn.w	r0, #21

	memcpy(value, param->value.str_val, param_len);
	*len = param_len;

	return 0;
}
   2162e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (list == NULL || list->params == NULL || value == NULL ||
   21630:	6843      	ldr	r3, [r0, #4]
   21632:	2b00      	cmp	r3, #0
   21634:	d0f9      	beq.n	2162a <at_params_string_get+0x8>
   21636:	2a00      	cmp	r2, #0
   21638:	d0f7      	beq.n	2162a <at_params_string_get+0x8>
	    value == NULL || len == NULL) {
   2163a:	2c00      	cmp	r4, #0
   2163c:	d0f5      	beq.n	2162a <at_params_string_get+0x8>
	struct at_param *param = at_params_get(list, index);
   2163e:	f7f0 fe7b 	bl	12338 <at_params_get>
	if (param == NULL) {
   21642:	4607      	mov	r7, r0
   21644:	2800      	cmp	r0, #0
   21646:	d0f0      	beq.n	2162a <at_params_string_get+0x8>
	if (param->type != AT_PARAM_TYPE_STRING) {
   21648:	7803      	ldrb	r3, [r0, #0]
   2164a:	2b03      	cmp	r3, #3
   2164c:	d1ed      	bne.n	2162a <at_params_string_get+0x8>
	size_t param_len = at_param_size(param);
   2164e:	f7f0 fe95 	bl	1237c <at_param_size>
	if (*len < param_len) {
   21652:	6823      	ldr	r3, [r4, #0]
	size_t param_len = at_param_size(param);
   21654:	4605      	mov	r5, r0
	if (*len < param_len) {
   21656:	4283      	cmp	r3, r0
   21658:	d307      	bcc.n	2166a <at_params_string_get+0x48>
   2165a:	4602      	mov	r2, r0
   2165c:	68b9      	ldr	r1, [r7, #8]
   2165e:	4630      	mov	r0, r6
   21660:	f000 f96b 	bl	2193a <memcpy>
	*len = param_len;
   21664:	6025      	str	r5, [r4, #0]
	return 0;
   21666:	2000      	movs	r0, #0
   21668:	e7e1      	b.n	2162e <at_params_string_get+0xc>
		return -ENOMEM;
   2166a:	f06f 000b 	mvn.w	r0, #11
   2166e:	e7de      	b.n	2162e <at_params_string_get+0xc>

00021670 <response_is_valid>:
{
   21670:	b570      	push	{r4, r5, r6, lr}
   21672:	4606      	mov	r6, r0
	if ((response_len < strlen(check)) ||
   21674:	4610      	mov	r0, r2
{
   21676:	460d      	mov	r5, r1
   21678:	4614      	mov	r4, r2
	if ((response_len < strlen(check)) ||
   2167a:	f7eb fbfd 	bl	ce78 <strlen>
   2167e:	42a8      	cmp	r0, r5
   21680:	d808      	bhi.n	21694 <response_is_valid+0x24>
	    (memcmp(response, check, response_len) != 0)) {
   21682:	462a      	mov	r2, r5
   21684:	4621      	mov	r1, r4
   21686:	4630      	mov	r0, r6
   21688:	f000 f949 	bl	2191e <memcmp>
	if ((response_len < strlen(check)) ||
   2168c:	fab0 f080 	clz	r0, r0
   21690:	0940      	lsrs	r0, r0, #5
}
   21692:	bd70      	pop	{r4, r5, r6, pc}
		return false;
   21694:	2000      	movs	r0, #0
   21696:	e7fc      	b.n	21692 <response_is_valid+0x22>

00021698 <lte_lc_init_and_connect>:
{
   21698:	b508      	push	{r3, lr}
	ret = w_lte_lc_init();
   2169a:	f7f0 fef1 	bl	12480 <w_lte_lc_init>
	if (ret) {
   2169e:	b918      	cbnz	r0, 216a8 <lte_lc_init_and_connect+0x10>
}
   216a0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	return w_lte_lc_connect();
   216a4:	f7f1 b804 	b.w	126b0 <w_lte_lc_connect>
}
   216a8:	bd08      	pop	{r3, pc}

000216aa <z_sys_power_save_idle_exit>:
	z_clock_idle_exit();
   216aa:	f7fe bc61 	b.w	1ff70 <z_clock_idle_exit>

000216ae <k_mem_pool_malloc>:
{
   216ae:	b507      	push	{r0, r1, r2, lr}
   216b0:	2204      	movs	r2, #4
   216b2:	188a      	adds	r2, r1, r2
   216b4:	d204      	bcs.n	216c0 <k_mem_pool_malloc+0x12>
	if (k_mem_pool_alloc(pool, &block, size, K_NO_WAIT) != 0) {
   216b6:	2300      	movs	r3, #0
   216b8:	4669      	mov	r1, sp
   216ba:	f7f9 fe9b 	bl	1b3f4 <k_mem_pool_alloc>
   216be:	b118      	cbz	r0, 216c8 <k_mem_pool_malloc+0x1a>
		return NULL;
   216c0:	2000      	movs	r0, #0
}
   216c2:	b003      	add	sp, #12
   216c4:	f85d fb04 	ldr.w	pc, [sp], #4
   216c8:	e9dd 3200 	ldrd	r3, r2, [sp]
   216cc:	601a      	str	r2, [r3, #0]
	return (char *)block.data + WB_UP(sizeof(struct k_mem_block_id));
   216ce:	9800      	ldr	r0, [sp, #0]
   216d0:	3004      	adds	r0, #4
   216d2:	e7f6      	b.n	216c2 <k_mem_pool_malloc+0x14>

000216d4 <k_free>:
	if (ptr != NULL) {
   216d4:	b110      	cbz	r0, 216dc <k_free+0x8>
		k_mem_pool_free_id(ptr);
   216d6:	3804      	subs	r0, #4
   216d8:	f7f9 bef4 	b.w	1b4c4 <k_mem_pool_free_id>
}
   216dc:	4770      	bx	lr

000216de <k_calloc>:
{
   216de:	b538      	push	{r3, r4, r5, lr}
	return a != 0 && (c / a) != b;
}

static inline bool size_mul_overflow(size_t a, size_t b, size_t *result)
{
	size_t c = a * b;
   216e0:	fb01 f400 	mul.w	r4, r1, r0

	*result = c;

	return a != 0 && (c / a) != b;
   216e4:	b118      	cbz	r0, 216ee <k_calloc+0x10>
   216e6:	fbb4 f0f0 	udiv	r0, r4, r0
   216ea:	4281      	cmp	r1, r0
   216ec:	d10a      	bne.n	21704 <k_calloc+0x26>
	ret = k_malloc(bounds);
   216ee:	4620      	mov	r0, r4
   216f0:	f7f9 ff46 	bl	1b580 <k_malloc>
	if (ret != NULL) {
   216f4:	4605      	mov	r5, r0
   216f6:	b118      	cbz	r0, 21700 <k_calloc+0x22>
__ssp_bos_icheck3(memset, void *, int)
   216f8:	4622      	mov	r2, r4
   216fa:	2100      	movs	r1, #0
   216fc:	f000 f92a 	bl	21954 <memset>
}
   21700:	4628      	mov	r0, r5
   21702:	bd38      	pop	{r3, r4, r5, pc}
		return NULL;
   21704:	2500      	movs	r5, #0
   21706:	e7fb      	b.n	21700 <k_calloc+0x22>

00021708 <z_impl_k_mutex_init>:
{
   21708:	4603      	mov	r3, r0
	mutex->owner = NULL;
   2170a:	2000      	movs	r0, #0
	list->tail = (sys_dnode_t *)list;
   2170c:	e9c3 3300 	strd	r3, r3, [r3]
	mutex->lock_count = 0U;
   21710:	e9c3 0002 	strd	r0, r0, [r3, #8]
}
   21714:	4770      	bx	lr

00021716 <z_queue_node_peek>:
{
   21716:	b510      	push	{r4, lr}
	if ((node != NULL) && (sys_sfnode_flags_get(node) != (u8_t)0)) {
   21718:	4604      	mov	r4, r0
   2171a:	b130      	cbz	r0, 2172a <z_queue_node_peek+0x14>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   2171c:	6802      	ldr	r2, [r0, #0]
   2171e:	0793      	lsls	r3, r2, #30
   21720:	d003      	beq.n	2172a <z_queue_node_peek+0x14>
		ret = anode->data;
   21722:	6844      	ldr	r4, [r0, #4]
		if (needs_free) {
   21724:	b109      	cbz	r1, 2172a <z_queue_node_peek+0x14>
			k_free(anode);
   21726:	f7ff ffd5 	bl	216d4 <k_free>
}
   2172a:	4620      	mov	r0, r4
   2172c:	bd10      	pop	{r4, pc}

0002172e <z_impl_k_queue_init>:
	list->head = NULL;
   2172e:	2300      	movs	r3, #0
	list->tail = NULL;
   21730:	e9c0 3300 	strd	r3, r3, [r0]
	queue->lock = (struct k_spinlock) {};
   21734:	6083      	str	r3, [r0, #8]
	sys_dlist_init(&queue->poll_events);
   21736:	f100 030c 	add.w	r3, r0, #12
   2173a:	e9c0 3303 	strd	r3, r3, [r0, #12]
}
   2173e:	4770      	bx	lr

00021740 <k_queue_append>:
	(void)queue_insert(queue, sys_sflist_peek_tail(&queue->data_q),
   21740:	460a      	mov	r2, r1
   21742:	2300      	movs	r3, #0
   21744:	6841      	ldr	r1, [r0, #4]
   21746:	f7fa ba1f 	b.w	1bb88 <queue_insert>

0002174a <z_is_thread_ready>:
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
   2174a:	7b43      	ldrb	r3, [r0, #13]
   2174c:	06db      	lsls	r3, r3, #27
   2174e:	bf03      	ittte	eq
   21750:	6980      	ldreq	r0, [r0, #24]
   21752:	fab0 f080 	clzeq	r0, r0
   21756:	0940      	lsreq	r0, r0, #5
   21758:	2000      	movne	r0, #0
}
   2175a:	4770      	bx	lr

0002175c <z_is_t1_higher_prio_than_t2>:
	if (thread_1->base.prio < thread_2->base.prio) {
   2175c:	f990 000e 	ldrsb.w	r0, [r0, #14]
   21760:	f991 300e 	ldrsb.w	r3, [r1, #14]
}
   21764:	4298      	cmp	r0, r3
   21766:	bfac      	ite	ge
   21768:	2000      	movge	r0, #0
   2176a:	2001      	movlt	r0, #1
   2176c:	4770      	bx	lr

0002176e <z_reschedule_irqlock>:
	return arch_irq_unlocked(key) && !arch_is_in_isr();
   2176e:	4603      	mov	r3, r0
   21770:	b920      	cbnz	r0, 2177c <z_reschedule_irqlock+0xe>
   21772:	f3ef 8205 	mrs	r2, IPSR
   21776:	b90a      	cbnz	r2, 2177c <z_reschedule_irqlock+0xe>
   21778:	f7ed bc20 	b.w	efbc <arch_swap>
   2177c:	f383 8811 	msr	BASEPRI, r3
   21780:	f3bf 8f6f 	isb	sy
}
   21784:	4770      	bx	lr

00021786 <z_reschedule_unlocked>:
	__asm__ volatile(
   21786:	f04f 0320 	mov.w	r3, #32
   2178a:	f3ef 8011 	mrs	r0, BASEPRI
   2178e:	f383 8811 	msr	BASEPRI, r3
   21792:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
   21796:	f7ff bfea 	b.w	2176e <z_reschedule_irqlock>

0002179a <z_priq_dumb_best>:
	return list->head == list;
   2179a:	6803      	ldr	r3, [r0, #0]
}
   2179c:	4298      	cmp	r0, r3
   2179e:	bf14      	ite	ne
   217a0:	4618      	movne	r0, r3
   217a2:	2000      	moveq	r0, #0
   217a4:	4770      	bx	lr

000217a6 <z_unpend_all>:
{
   217a6:	b570      	push	{r4, r5, r6, lr}
   217a8:	4606      	mov	r6, r0
	int need_sched = 0;
   217aa:	2500      	movs	r5, #0
   217ac:	6834      	ldr	r4, [r6, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   217ae:	42a6      	cmp	r6, r4
   217b0:	d000      	beq.n	217b4 <z_unpend_all+0xe>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
   217b2:	b90c      	cbnz	r4, 217b8 <z_unpend_all+0x12>
}
   217b4:	4628      	mov	r0, r5
   217b6:	bd70      	pop	{r4, r5, r6, pc}
		z_unpend_thread(thread);
   217b8:	4620      	mov	r0, r4
   217ba:	f7fa fcbd 	bl	1c138 <z_unpend_thread>
	if (z_is_thread_ready(thread)) {
   217be:	4620      	mov	r0, r4
   217c0:	f7ff ffc3 	bl	2174a <z_is_thread_ready>
		need_sched = 1;
   217c4:	2501      	movs	r5, #1
   217c6:	2800      	cmp	r0, #0
   217c8:	d0f0      	beq.n	217ac <z_unpend_all+0x6>
		z_add_thread_to_ready_q(thread);
   217ca:	4620      	mov	r0, r4
   217cc:	f7fa fdbc 	bl	1c348 <z_add_thread_to_ready_q>
   217d0:	e7ec      	b.n	217ac <z_unpend_all+0x6>

000217d2 <z_impl_k_sem_init>:
	CHECKIF(limit == 0U || initial_count > limit) {
   217d2:	b15a      	cbz	r2, 217ec <z_impl_k_sem_init+0x1a>
   217d4:	428a      	cmp	r2, r1
   217d6:	d309      	bcc.n	217ec <z_impl_k_sem_init+0x1a>
	sys_dlist_init(&sem->poll_events);
   217d8:	f100 0310 	add.w	r3, r0, #16
	sem->limit = limit;
   217dc:	e9c0 1202 	strd	r1, r2, [r0, #8]
	list->tail = (sys_dnode_t *)list;
   217e0:	e9c0 0000 	strd	r0, r0, [r0]
   217e4:	e9c0 3304 	strd	r3, r3, [r0, #16]
	return 0;
   217e8:	2000      	movs	r0, #0
   217ea:	4770      	bx	lr
		return -EINVAL;
   217ec:	f06f 0015 	mvn.w	r0, #21
}
   217f0:	4770      	bx	lr

000217f2 <k_is_in_isr>:
   217f2:	f3ef 8005 	mrs	r0, IPSR
}
   217f6:	3000      	adds	r0, #0
   217f8:	bf18      	it	ne
   217fa:	2001      	movne	r0, #1
   217fc:	4770      	bx	lr

000217fe <z_impl_k_thread_name_set>:
}
   217fe:	f06f 0057 	mvn.w	r0, #87	; 0x57
   21802:	4770      	bx	lr

00021804 <k_thread_name_get>:
}
   21804:	2000      	movs	r0, #0
   21806:	4770      	bx	lr

00021808 <z_new_thread_init>:
{
   21808:	b510      	push	{r4, lr}
	thread_base->user_options = (u8_t)options;
   2180a:	9c02      	ldr	r4, [sp, #8]
	thread_base->prio = priority;
   2180c:	7383      	strb	r3, [r0, #14]
	thread_base->user_options = (u8_t)options;
   2180e:	7304      	strb	r4, [r0, #12]
	thread_base->sched_locked = 0U;
   21810:	2300      	movs	r3, #0
	thread_base->thread_state = (u8_t)initial_state;
   21812:	2404      	movs	r4, #4
	thread_base->sched_locked = 0U;
   21814:	73c3      	strb	r3, [r0, #15]
	thread_base->thread_state = (u8_t)initial_state;
   21816:	7344      	strb	r4, [r0, #13]
	node->prev = NULL;
   21818:	e9c0 3306 	strd	r3, r3, [r0, #24]
	thread->fn_abort = NULL;
   2181c:	e9c0 3313 	strd	r3, r3, [r0, #76]	; 0x4c
	thread->stack_info.size = (u32_t)stackSize;
   21820:	e9c0 1216 	strd	r1, r2, [r0, #88]	; 0x58
}
   21824:	bd10      	pop	{r4, pc}

00021826 <z_tick_get_32>:

u32_t z_tick_get_32(void)
{
   21826:	b508      	push	{r3, lr}
#ifdef CONFIG_TICKLESS_KERNEL
	return (u32_t)z_tick_get();
   21828:	f7fc f96e 	bl	1db08 <z_tick_get>
#else
	return (u32_t)curr_tick;
#endif
}
   2182c:	bd08      	pop	{r3, pc}

0002182e <z_impl_k_uptime_get>:

s64_t z_impl_k_uptime_get(void)
{
   2182e:	b510      	push	{r4, lr}
	return k_ticks_to_ms_floor64(z_tick_get());
   21830:	f7fc f96a 	bl	1db08 <z_tick_get>
			return (t * to_hz + off) / from_hz;
   21834:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
   21838:	fba0 2304 	umull	r2, r3, r0, r4
   2183c:	fb04 3301 	mla	r3, r4, r1, r3
   21840:	0bd0      	lsrs	r0, r2, #15
}
   21842:	ea40 4043 	orr.w	r0, r0, r3, lsl #17
   21846:	0bd9      	lsrs	r1, r3, #15
   21848:	bd10      	pop	{r4, pc}

0002184a <signal_poll_event>:
#include <syscalls/k_poll_mrsh.c>
#endif

/* must be called with interrupts locked */
static int signal_poll_event(struct k_poll_event *event, u32_t state)
{
   2184a:	b570      	push	{r4, r5, r6, lr}
	struct _poller *poller = event->poller;
   2184c:	6884      	ldr	r4, [r0, #8]
{
   2184e:	4605      	mov	r5, r0
   21850:	460e      	mov	r6, r1
	int retcode = 0;

	if (poller) {
   21852:	b19c      	cbz	r4, 2187c <signal_poll_event+0x32>
		if (poller->cb != NULL) {
   21854:	68a3      	ldr	r3, [r4, #8]
   21856:	b95b      	cbnz	r3, 21870 <signal_poll_event+0x26>
	int retcode = 0;
   21858:	4618      	mov	r0, r3
			retcode = poller->cb(event, state);
		}

		poller->is_polling = false;
   2185a:	7023      	strb	r3, [r4, #0]
	event->poller = NULL;
   2185c:	2300      	movs	r3, #0
   2185e:	60ab      	str	r3, [r5, #8]
	event->state |= state;
   21860:	68eb      	ldr	r3, [r5, #12]
   21862:	f3c3 3204 	ubfx	r2, r3, #12, #5
   21866:	4316      	orrs	r6, r2
   21868:	f366 3310 	bfi	r3, r6, #12, #5
   2186c:	60eb      	str	r3, [r5, #12]
			return retcode;
		}
	}

	set_event_ready(event, state);
	return retcode;
   2186e:	e004      	b.n	2187a <signal_poll_event+0x30>
			retcode = poller->cb(event, state);
   21870:	4798      	blx	r3
		poller->is_polling = false;
   21872:	2300      	movs	r3, #0
		if (retcode < 0) {
   21874:	2800      	cmp	r0, #0
		poller->is_polling = false;
   21876:	7023      	strb	r3, [r4, #0]
		if (retcode < 0) {
   21878:	daf0      	bge.n	2185c <signal_poll_event+0x12>
}
   2187a:	bd70      	pop	{r4, r5, r6, pc}
	int retcode = 0;
   2187c:	4620      	mov	r0, r4
   2187e:	e7ed      	b.n	2185c <signal_poll_event+0x12>

00021880 <add_event>:
{
   21880:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   21882:	4617      	mov	r7, r2
	return sys_dlist_is_empty(list) ? NULL : list->tail;
   21884:	e9d0 2300 	ldrd	r2, r3, [r0]
   21888:	4290      	cmp	r0, r2
   2188a:	4604      	mov	r4, r0
   2188c:	460d      	mov	r5, r1
   2188e:	d106      	bne.n	2189e <add_event+0x1e>
	node->prev = list->tail;
   21890:	6863      	ldr	r3, [r4, #4]
	node->next = list;
   21892:	602c      	str	r4, [r5, #0]
	node->prev = list->tail;
   21894:	606b      	str	r3, [r5, #4]
	list->tail->next = node;
   21896:	6863      	ldr	r3, [r4, #4]
   21898:	601d      	str	r5, [r3, #0]
	list->tail = node;
   2189a:	6065      	str	r5, [r4, #4]
}
   2189c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if ((pending == NULL) ||
   2189e:	2b00      	cmp	r3, #0
   218a0:	d0f6      	beq.n	21890 <add_event+0x10>
		z_is_t1_higher_prio_than_t2(pending->poller->thread,
   218a2:	689b      	ldr	r3, [r3, #8]
   218a4:	6879      	ldr	r1, [r7, #4]
   218a6:	6858      	ldr	r0, [r3, #4]
   218a8:	f7ff ff58 	bl	2175c <z_is_t1_higher_prio_than_t2>
	if ((pending == NULL) ||
   218ac:	2800      	cmp	r0, #0
   218ae:	d1ef      	bne.n	21890 <add_event+0x10>
	return list->head == list;
   218b0:	6826      	ldr	r6, [r4, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   218b2:	42b4      	cmp	r4, r6
   218b4:	d0ec      	beq.n	21890 <add_event+0x10>
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
   218b6:	2e00      	cmp	r6, #0
   218b8:	d0ea      	beq.n	21890 <add_event+0x10>
		if (z_is_t1_higher_prio_than_t2(poller->thread,
   218ba:	68b3      	ldr	r3, [r6, #8]
   218bc:	6878      	ldr	r0, [r7, #4]
   218be:	6859      	ldr	r1, [r3, #4]
   218c0:	f7ff ff4c 	bl	2175c <z_is_t1_higher_prio_than_t2>
   218c4:	b128      	cbz	r0, 218d2 <add_event+0x52>
	node->prev = successor->prev;
   218c6:	6873      	ldr	r3, [r6, #4]
	node->next = successor;
   218c8:	e9c5 6300 	strd	r6, r3, [r5]
	successor->prev->next = node;
   218cc:	601d      	str	r5, [r3, #0]
	successor->prev = node;
   218ce:	6075      	str	r5, [r6, #4]
			return;
   218d0:	e7e4      	b.n	2189c <add_event+0x1c>
	return (node == list->tail) ? NULL : node->next;
   218d2:	6863      	ldr	r3, [r4, #4]
   218d4:	429e      	cmp	r6, r3
   218d6:	d0db      	beq.n	21890 <add_event+0x10>
   218d8:	6836      	ldr	r6, [r6, #0]
   218da:	e7ec      	b.n	218b6 <add_event+0x36>

000218dc <z_handle_obj_poll_events>:
	return list->head == list;
   218dc:	6803      	ldr	r3, [r0, #0]
	if (!sys_dlist_is_empty(list)) {
   218de:	4298      	cmp	r0, r3
   218e0:	d009      	beq.n	218f6 <z_handle_obj_poll_events+0x1a>
	node->prev->next = node->next;
   218e2:	e9d3 2000 	ldrd	r2, r0, [r3]
   218e6:	6002      	str	r2, [r0, #0]
	node->next->prev = node->prev;
   218e8:	6050      	str	r0, [r2, #4]
	node->next = NULL;
   218ea:	2200      	movs	r2, #0
{
	struct k_poll_event *poll_event;

	poll_event = (struct k_poll_event *)sys_dlist_get(events);
	if (poll_event != NULL) {
		(void) signal_poll_event(poll_event, state);
   218ec:	4618      	mov	r0, r3
	node->prev = NULL;
   218ee:	e9c3 2200 	strd	r2, r2, [r3]
   218f2:	f7ff bfaa 	b.w	2184a <signal_poll_event>
	}
}
   218f6:	4770      	bx	lr

000218f8 <_OffsetAbsSyms>:
					    sizeof(struct _preempt_float));
#else
GEN_ABSOLUTE_SYM(_K_THREAD_NO_FLOAT_SIZEOF, sizeof(struct k_thread));
#endif

GEN_ABS_SYM_END
   218f8:	4770      	bx	lr

000218fa <atoi>:
   218fa:	220a      	movs	r2, #10
   218fc:	2100      	movs	r1, #0
   218fe:	f7fd b9db 	b.w	1ecb8 <strtol>

00021902 <memchr>:
   21902:	b2c9      	uxtb	r1, r1
   21904:	4402      	add	r2, r0
   21906:	b510      	push	{r4, lr}
   21908:	4290      	cmp	r0, r2
   2190a:	4603      	mov	r3, r0
   2190c:	d101      	bne.n	21912 <memchr+0x10>
   2190e:	2300      	movs	r3, #0
   21910:	e003      	b.n	2191a <memchr+0x18>
   21912:	781c      	ldrb	r4, [r3, #0]
   21914:	3001      	adds	r0, #1
   21916:	428c      	cmp	r4, r1
   21918:	d1f6      	bne.n	21908 <memchr+0x6>
   2191a:	4618      	mov	r0, r3
   2191c:	bd10      	pop	{r4, pc}

0002191e <memcmp>:
   2191e:	b530      	push	{r4, r5, lr}
   21920:	3901      	subs	r1, #1
   21922:	2400      	movs	r4, #0
   21924:	42a2      	cmp	r2, r4
   21926:	d101      	bne.n	2192c <memcmp+0xe>
   21928:	2000      	movs	r0, #0
   2192a:	e005      	b.n	21938 <memcmp+0x1a>
   2192c:	5d03      	ldrb	r3, [r0, r4]
   2192e:	3401      	adds	r4, #1
   21930:	5d0d      	ldrb	r5, [r1, r4]
   21932:	42ab      	cmp	r3, r5
   21934:	d0f6      	beq.n	21924 <memcmp+0x6>
   21936:	1b58      	subs	r0, r3, r5
   21938:	bd30      	pop	{r4, r5, pc}

0002193a <memcpy>:
   2193a:	440a      	add	r2, r1
   2193c:	1e43      	subs	r3, r0, #1
   2193e:	4291      	cmp	r1, r2
   21940:	d100      	bne.n	21944 <memcpy+0xa>
   21942:	4770      	bx	lr
   21944:	b510      	push	{r4, lr}
   21946:	f811 4b01 	ldrb.w	r4, [r1], #1
   2194a:	4291      	cmp	r1, r2
   2194c:	f803 4f01 	strb.w	r4, [r3, #1]!
   21950:	d1f9      	bne.n	21946 <memcpy+0xc>
   21952:	bd10      	pop	{r4, pc}

00021954 <memset>:
   21954:	4402      	add	r2, r0
   21956:	4603      	mov	r3, r0
   21958:	4293      	cmp	r3, r2
   2195a:	d100      	bne.n	2195e <memset+0xa>
   2195c:	4770      	bx	lr
   2195e:	f803 1b01 	strb.w	r1, [r3], #1
   21962:	e7f9      	b.n	21958 <memset+0x4>

00021964 <__sfputc_r>:
   21964:	6893      	ldr	r3, [r2, #8]
   21966:	3b01      	subs	r3, #1
   21968:	2b00      	cmp	r3, #0
   2196a:	6093      	str	r3, [r2, #8]
   2196c:	b410      	push	{r4}
   2196e:	da08      	bge.n	21982 <__sfputc_r+0x1e>
   21970:	6994      	ldr	r4, [r2, #24]
   21972:	42a3      	cmp	r3, r4
   21974:	db01      	blt.n	2197a <__sfputc_r+0x16>
   21976:	290a      	cmp	r1, #10
   21978:	d103      	bne.n	21982 <__sfputc_r+0x1e>
   2197a:	f85d 4b04 	ldr.w	r4, [sp], #4
   2197e:	f7fd ba51 	b.w	1ee24 <__swbuf_r>
   21982:	6813      	ldr	r3, [r2, #0]
   21984:	1c58      	adds	r0, r3, #1
   21986:	6010      	str	r0, [r2, #0]
   21988:	4608      	mov	r0, r1
   2198a:	7019      	strb	r1, [r3, #0]
   2198c:	f85d 4b04 	ldr.w	r4, [sp], #4
   21990:	4770      	bx	lr

00021992 <__sfputs_r>:
   21992:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   21994:	4606      	mov	r6, r0
   21996:	460f      	mov	r7, r1
   21998:	4614      	mov	r4, r2
   2199a:	18d5      	adds	r5, r2, r3
   2199c:	42ac      	cmp	r4, r5
   2199e:	d101      	bne.n	219a4 <__sfputs_r+0x12>
   219a0:	2000      	movs	r0, #0
   219a2:	e007      	b.n	219b4 <__sfputs_r+0x22>
   219a4:	463a      	mov	r2, r7
   219a6:	f814 1b01 	ldrb.w	r1, [r4], #1
   219aa:	4630      	mov	r0, r6
   219ac:	f7ff ffda 	bl	21964 <__sfputc_r>
   219b0:	1c43      	adds	r3, r0, #1
   219b2:	d1f3      	bne.n	2199c <__sfputs_r+0xa>
   219b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000219b6 <__cvt>:
   219b6:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
   219ba:	ec55 4b10 	vmov	r4, r5, d0
   219be:	2d00      	cmp	r5, #0
   219c0:	460e      	mov	r6, r1
   219c2:	4691      	mov	r9, r2
   219c4:	4619      	mov	r1, r3
   219c6:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
   219ca:	f04f 0200 	mov.w	r2, #0
   219ce:	da03      	bge.n	219d8 <__cvt+0x22>
   219d0:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
   219d4:	222d      	movs	r2, #45	; 0x2d
   219d6:	461d      	mov	r5, r3
   219d8:	9f0d      	ldr	r7, [sp, #52]	; 0x34
   219da:	700a      	strb	r2, [r1, #0]
   219dc:	f027 0720 	bic.w	r7, r7, #32
   219e0:	2f46      	cmp	r7, #70	; 0x46
   219e2:	d004      	beq.n	219ee <__cvt+0x38>
   219e4:	2f45      	cmp	r7, #69	; 0x45
   219e6:	d100      	bne.n	219ea <__cvt+0x34>
   219e8:	3601      	adds	r6, #1
   219ea:	2102      	movs	r1, #2
   219ec:	e000      	b.n	219f0 <__cvt+0x3a>
   219ee:	2103      	movs	r1, #3
   219f0:	ab03      	add	r3, sp, #12
   219f2:	4632      	mov	r2, r6
   219f4:	9301      	str	r3, [sp, #4]
   219f6:	ab02      	add	r3, sp, #8
   219f8:	ec45 4b10 	vmov	d0, r4, r5
   219fc:	9300      	str	r3, [sp, #0]
   219fe:	4653      	mov	r3, sl
   21a00:	f7eb fa42 	bl	ce88 <_dtoa_r>
   21a04:	2f47      	cmp	r7, #71	; 0x47
   21a06:	4680      	mov	r8, r0
   21a08:	d102      	bne.n	21a10 <__cvt+0x5a>
   21a0a:	f019 0f01 	tst.w	r9, #1
   21a0e:	d022      	beq.n	21a56 <__cvt+0xa0>
   21a10:	2f46      	cmp	r7, #70	; 0x46
   21a12:	eb08 0906 	add.w	r9, r8, r6
   21a16:	d111      	bne.n	21a3c <__cvt+0x86>
   21a18:	f898 3000 	ldrb.w	r3, [r8]
   21a1c:	2b30      	cmp	r3, #48	; 0x30
   21a1e:	d10a      	bne.n	21a36 <__cvt+0x80>
   21a20:	2200      	movs	r2, #0
   21a22:	2300      	movs	r3, #0
   21a24:	4620      	mov	r0, r4
   21a26:	4629      	mov	r1, r5
   21a28:	f7eb f9ac 	bl	cd84 <__aeabi_dcmpeq>
   21a2c:	b918      	cbnz	r0, 21a36 <__cvt+0x80>
   21a2e:	f1c6 0601 	rsb	r6, r6, #1
   21a32:	f8ca 6000 	str.w	r6, [sl]
   21a36:	f8da 3000 	ldr.w	r3, [sl]
   21a3a:	4499      	add	r9, r3
   21a3c:	2200      	movs	r2, #0
   21a3e:	2300      	movs	r3, #0
   21a40:	4620      	mov	r0, r4
   21a42:	4629      	mov	r1, r5
   21a44:	f7eb f99e 	bl	cd84 <__aeabi_dcmpeq>
   21a48:	b108      	cbz	r0, 21a4e <__cvt+0x98>
   21a4a:	f8cd 900c 	str.w	r9, [sp, #12]
   21a4e:	2230      	movs	r2, #48	; 0x30
   21a50:	9b03      	ldr	r3, [sp, #12]
   21a52:	454b      	cmp	r3, r9
   21a54:	d308      	bcc.n	21a68 <__cvt+0xb2>
   21a56:	9b03      	ldr	r3, [sp, #12]
   21a58:	4640      	mov	r0, r8
   21a5a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   21a5c:	eba3 0308 	sub.w	r3, r3, r8
   21a60:	6013      	str	r3, [r2, #0]
   21a62:	b004      	add	sp, #16
   21a64:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   21a68:	1c59      	adds	r1, r3, #1
   21a6a:	9103      	str	r1, [sp, #12]
   21a6c:	701a      	strb	r2, [r3, #0]
   21a6e:	e7ef      	b.n	21a50 <__cvt+0x9a>

00021a70 <__exponent>:
   21a70:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   21a72:	2900      	cmp	r1, #0
   21a74:	7002      	strb	r2, [r0, #0]
   21a76:	bfba      	itte	lt
   21a78:	4249      	neglt	r1, r1
   21a7a:	232d      	movlt	r3, #45	; 0x2d
   21a7c:	232b      	movge	r3, #43	; 0x2b
   21a7e:	2909      	cmp	r1, #9
   21a80:	7043      	strb	r3, [r0, #1]
   21a82:	dd22      	ble.n	21aca <__exponent+0x5a>
   21a84:	f10d 0307 	add.w	r3, sp, #7
   21a88:	260a      	movs	r6, #10
   21a8a:	461f      	mov	r7, r3
   21a8c:	2963      	cmp	r1, #99	; 0x63
   21a8e:	f103 35ff 	add.w	r5, r3, #4294967295
   21a92:	fb91 f2f6 	sdiv	r2, r1, r6
   21a96:	fb06 1412 	mls	r4, r6, r2, r1
   21a9a:	f104 0430 	add.w	r4, r4, #48	; 0x30
   21a9e:	f803 4c01 	strb.w	r4, [r3, #-1]
   21aa2:	dc0a      	bgt.n	21aba <__exponent+0x4a>
   21aa4:	3230      	adds	r2, #48	; 0x30
   21aa6:	3b02      	subs	r3, #2
   21aa8:	f805 2c01 	strb.w	r2, [r5, #-1]
   21aac:	1c82      	adds	r2, r0, #2
   21aae:	42bb      	cmp	r3, r7
   21ab0:	4614      	mov	r4, r2
   21ab2:	d305      	bcc.n	21ac0 <__exponent+0x50>
   21ab4:	1a20      	subs	r0, r4, r0
   21ab6:	b003      	add	sp, #12
   21ab8:	bdf0      	pop	{r4, r5, r6, r7, pc}
   21aba:	462b      	mov	r3, r5
   21abc:	4611      	mov	r1, r2
   21abe:	e7e5      	b.n	21a8c <__exponent+0x1c>
   21ac0:	f813 1b01 	ldrb.w	r1, [r3], #1
   21ac4:	f802 1b01 	strb.w	r1, [r2], #1
   21ac8:	e7f1      	b.n	21aae <__exponent+0x3e>
   21aca:	2330      	movs	r3, #48	; 0x30
   21acc:	1d04      	adds	r4, r0, #4
   21ace:	4419      	add	r1, r3
   21ad0:	7083      	strb	r3, [r0, #2]
   21ad2:	70c1      	strb	r1, [r0, #3]
   21ad4:	e7ee      	b.n	21ab4 <__exponent+0x44>

00021ad6 <_printf_common>:
   21ad6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   21ada:	4691      	mov	r9, r2
   21adc:	461f      	mov	r7, r3
   21ade:	688a      	ldr	r2, [r1, #8]
   21ae0:	4606      	mov	r6, r0
   21ae2:	690b      	ldr	r3, [r1, #16]
   21ae4:	460c      	mov	r4, r1
   21ae6:	f8dd 8020 	ldr.w	r8, [sp, #32]
   21aea:	4293      	cmp	r3, r2
   21aec:	bfb8      	it	lt
   21aee:	4613      	movlt	r3, r2
   21af0:	f8c9 3000 	str.w	r3, [r9]
   21af4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
   21af8:	b112      	cbz	r2, 21b00 <_printf_common+0x2a>
   21afa:	3301      	adds	r3, #1
   21afc:	f8c9 3000 	str.w	r3, [r9]
   21b00:	6823      	ldr	r3, [r4, #0]
   21b02:	0699      	lsls	r1, r3, #26
   21b04:	bf42      	ittt	mi
   21b06:	f8d9 3000 	ldrmi.w	r3, [r9]
   21b0a:	3302      	addmi	r3, #2
   21b0c:	f8c9 3000 	strmi.w	r3, [r9]
   21b10:	6825      	ldr	r5, [r4, #0]
   21b12:	f015 0506 	ands.w	r5, r5, #6
   21b16:	d107      	bne.n	21b28 <_printf_common+0x52>
   21b18:	f104 0a19 	add.w	sl, r4, #25
   21b1c:	68e3      	ldr	r3, [r4, #12]
   21b1e:	f8d9 2000 	ldr.w	r2, [r9]
   21b22:	1a9b      	subs	r3, r3, r2
   21b24:	42ab      	cmp	r3, r5
   21b26:	dc2b      	bgt.n	21b80 <_printf_common+0xaa>
   21b28:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
   21b2c:	6822      	ldr	r2, [r4, #0]
   21b2e:	3300      	adds	r3, #0
   21b30:	bf18      	it	ne
   21b32:	2301      	movne	r3, #1
   21b34:	0692      	lsls	r2, r2, #26
   21b36:	d430      	bmi.n	21b9a <_printf_common+0xc4>
   21b38:	f104 0243 	add.w	r2, r4, #67	; 0x43
   21b3c:	4639      	mov	r1, r7
   21b3e:	4630      	mov	r0, r6
   21b40:	47c0      	blx	r8
   21b42:	3001      	adds	r0, #1
   21b44:	d023      	beq.n	21b8e <_printf_common+0xb8>
   21b46:	6823      	ldr	r3, [r4, #0]
   21b48:	341a      	adds	r4, #26
   21b4a:	f854 5c0e 	ldr.w	r5, [r4, #-14]
   21b4e:	f003 0306 	and.w	r3, r3, #6
   21b52:	f8d9 2000 	ldr.w	r2, [r9]
   21b56:	f04f 0900 	mov.w	r9, #0
   21b5a:	2b04      	cmp	r3, #4
   21b5c:	f854 3c12 	ldr.w	r3, [r4, #-18]
   21b60:	bf08      	it	eq
   21b62:	1aad      	subeq	r5, r5, r2
   21b64:	f854 2c0a 	ldr.w	r2, [r4, #-10]
   21b68:	bf14      	ite	ne
   21b6a:	2500      	movne	r5, #0
   21b6c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
   21b70:	4293      	cmp	r3, r2
   21b72:	bfc4      	itt	gt
   21b74:	1a9b      	subgt	r3, r3, r2
   21b76:	18ed      	addgt	r5, r5, r3
   21b78:	454d      	cmp	r5, r9
   21b7a:	d11a      	bne.n	21bb2 <_printf_common+0xdc>
   21b7c:	2000      	movs	r0, #0
   21b7e:	e008      	b.n	21b92 <_printf_common+0xbc>
   21b80:	2301      	movs	r3, #1
   21b82:	4652      	mov	r2, sl
   21b84:	4639      	mov	r1, r7
   21b86:	4630      	mov	r0, r6
   21b88:	47c0      	blx	r8
   21b8a:	3001      	adds	r0, #1
   21b8c:	d103      	bne.n	21b96 <_printf_common+0xc0>
   21b8e:	f04f 30ff 	mov.w	r0, #4294967295
   21b92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   21b96:	3501      	adds	r5, #1
   21b98:	e7c0      	b.n	21b1c <_printf_common+0x46>
   21b9a:	18e1      	adds	r1, r4, r3
   21b9c:	1c5a      	adds	r2, r3, #1
   21b9e:	2030      	movs	r0, #48	; 0x30
   21ba0:	3302      	adds	r3, #2
   21ba2:	4422      	add	r2, r4
   21ba4:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
   21ba8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
   21bac:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
   21bb0:	e7c2      	b.n	21b38 <_printf_common+0x62>
   21bb2:	2301      	movs	r3, #1
   21bb4:	4622      	mov	r2, r4
   21bb6:	4639      	mov	r1, r7
   21bb8:	4630      	mov	r0, r6
   21bba:	47c0      	blx	r8
   21bbc:	3001      	adds	r0, #1
   21bbe:	d0e6      	beq.n	21b8e <_printf_common+0xb8>
   21bc0:	f109 0901 	add.w	r9, r9, #1
   21bc4:	e7d8      	b.n	21b78 <_printf_common+0xa2>

00021bc6 <__sprintf_chk>:
   21bc6:	b408      	push	{r3}
   21bc8:	b517      	push	{r0, r1, r2, r4, lr}
   21bca:	ab05      	add	r3, sp, #20
   21bcc:	1e14      	subs	r4, r2, #0
   21bce:	f853 1b04 	ldr.w	r1, [r3], #4
   21bd2:	9301      	str	r3, [sp, #4]
   21bd4:	da07      	bge.n	21be6 <__sprintf_chk+0x20>
   21bd6:	461a      	mov	r2, r3
   21bd8:	f7fd f91a 	bl	1ee10 <vsiprintf>
   21bdc:	b003      	add	sp, #12
   21bde:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   21be2:	b001      	add	sp, #4
   21be4:	4770      	bx	lr
   21be6:	460a      	mov	r2, r1
   21be8:	4621      	mov	r1, r4
   21bea:	f7fd f8ed 	bl	1edc8 <vsniprintf>
   21bee:	2800      	cmp	r0, #0
   21bf0:	dbf4      	blt.n	21bdc <__sprintf_chk+0x16>
   21bf2:	42a0      	cmp	r0, r4
   21bf4:	d3f2      	bcc.n	21bdc <__sprintf_chk+0x16>
   21bf6:	f7fd f9d5 	bl	1efa4 <__chk_fail>

00021bfa <strchr>:
   21bfa:	b2c9      	uxtb	r1, r1
   21bfc:	4603      	mov	r3, r0
   21bfe:	f810 2b01 	ldrb.w	r2, [r0], #1
   21c02:	b11a      	cbz	r2, 21c0c <strchr+0x12>
   21c04:	428a      	cmp	r2, r1
   21c06:	d1f9      	bne.n	21bfc <strchr+0x2>
   21c08:	4618      	mov	r0, r3
   21c0a:	4770      	bx	lr
   21c0c:	2900      	cmp	r1, #0
   21c0e:	bf18      	it	ne
   21c10:	2300      	movne	r3, #0
   21c12:	e7f9      	b.n	21c08 <strchr+0xe>

00021c14 <strncmp>:
   21c14:	b510      	push	{r4, lr}
   21c16:	b16a      	cbz	r2, 21c34 <strncmp+0x20>
   21c18:	3901      	subs	r1, #1
   21c1a:	1884      	adds	r4, r0, r2
   21c1c:	f810 3b01 	ldrb.w	r3, [r0], #1
   21c20:	f811 2f01 	ldrb.w	r2, [r1, #1]!
   21c24:	4293      	cmp	r3, r2
   21c26:	d103      	bne.n	21c30 <strncmp+0x1c>
   21c28:	42a0      	cmp	r0, r4
   21c2a:	d001      	beq.n	21c30 <strncmp+0x1c>
   21c2c:	2b00      	cmp	r3, #0
   21c2e:	d1f5      	bne.n	21c1c <strncmp+0x8>
   21c30:	1a98      	subs	r0, r3, r2
   21c32:	bd10      	pop	{r4, pc}
   21c34:	4610      	mov	r0, r2
   21c36:	e7fc      	b.n	21c32 <strncmp+0x1e>

00021c38 <strstr>:
   21c38:	b5f0      	push	{r4, r5, r6, r7, lr}
   21c3a:	780c      	ldrb	r4, [r1, #0]
   21c3c:	b164      	cbz	r4, 21c58 <strstr+0x20>
   21c3e:	4603      	mov	r3, r0
   21c40:	781a      	ldrb	r2, [r3, #0]
   21c42:	4618      	mov	r0, r3
   21c44:	1c5e      	adds	r6, r3, #1
   21c46:	b90a      	cbnz	r2, 21c4c <strstr+0x14>
   21c48:	4610      	mov	r0, r2
   21c4a:	e005      	b.n	21c58 <strstr+0x20>
   21c4c:	4294      	cmp	r4, r2
   21c4e:	d108      	bne.n	21c62 <strstr+0x2a>
   21c50:	460d      	mov	r5, r1
   21c52:	f815 2f01 	ldrb.w	r2, [r5, #1]!
   21c56:	b902      	cbnz	r2, 21c5a <strstr+0x22>
   21c58:	bdf0      	pop	{r4, r5, r6, r7, pc}
   21c5a:	f813 7f01 	ldrb.w	r7, [r3, #1]!
   21c5e:	4297      	cmp	r7, r2
   21c60:	d0f7      	beq.n	21c52 <strstr+0x1a>
   21c62:	4633      	mov	r3, r6
   21c64:	e7ec      	b.n	21c40 <strstr+0x8>

00021c66 <_vsniprintf_r>:
   21c66:	b530      	push	{r4, r5, lr}
   21c68:	1e14      	subs	r4, r2, #0
   21c6a:	4605      	mov	r5, r0
   21c6c:	b09b      	sub	sp, #108	; 0x6c
   21c6e:	4618      	mov	r0, r3
   21c70:	da05      	bge.n	21c7e <_vsniprintf_r+0x18>
   21c72:	238b      	movs	r3, #139	; 0x8b
   21c74:	f04f 30ff 	mov.w	r0, #4294967295
   21c78:	602b      	str	r3, [r5, #0]
   21c7a:	b01b      	add	sp, #108	; 0x6c
   21c7c:	bd30      	pop	{r4, r5, pc}
   21c7e:	f44f 7302 	mov.w	r3, #520	; 0x208
   21c82:	9100      	str	r1, [sp, #0]
   21c84:	9104      	str	r1, [sp, #16]
   21c86:	4602      	mov	r2, r0
   21c88:	f8ad 300c 	strh.w	r3, [sp, #12]
   21c8c:	bf14      	ite	ne
   21c8e:	f104 33ff 	addne.w	r3, r4, #4294967295
   21c92:	4623      	moveq	r3, r4
   21c94:	4669      	mov	r1, sp
   21c96:	4628      	mov	r0, r5
   21c98:	9302      	str	r3, [sp, #8]
   21c9a:	9305      	str	r3, [sp, #20]
   21c9c:	f64f 73ff 	movw	r3, #65535	; 0xffff
   21ca0:	f8ad 300e 	strh.w	r3, [sp, #14]
   21ca4:	9b1e      	ldr	r3, [sp, #120]	; 0x78
   21ca6:	f7fd fc63 	bl	1f570 <_svfiprintf_r>
   21caa:	1c43      	adds	r3, r0, #1
   21cac:	bfbc      	itt	lt
   21cae:	238b      	movlt	r3, #139	; 0x8b
   21cb0:	602b      	strlt	r3, [r5, #0]
   21cb2:	2c00      	cmp	r4, #0
   21cb4:	d0e1      	beq.n	21c7a <_vsniprintf_r+0x14>
   21cb6:	9b00      	ldr	r3, [sp, #0]
   21cb8:	2200      	movs	r2, #0
   21cba:	701a      	strb	r2, [r3, #0]
   21cbc:	e7dd      	b.n	21c7a <_vsniprintf_r+0x14>

00021cbe <abort>:
   21cbe:	b508      	push	{r3, lr}
   21cc0:	2006      	movs	r0, #6
   21cc2:	f7fd fd5d 	bl	1f780 <raise>
   21cc6:	2001      	movs	r0, #1
   21cc8:	f7ee f8f6 	bl	feb8 <_exit>

00021ccc <quorem>:
   21ccc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   21cd0:	6903      	ldr	r3, [r0, #16]
   21cd2:	4680      	mov	r8, r0
   21cd4:	690c      	ldr	r4, [r1, #16]
   21cd6:	42a3      	cmp	r3, r4
   21cd8:	f2c0 8084 	blt.w	21de4 <quorem+0x118>
   21cdc:	3c01      	subs	r4, #1
   21cde:	f108 0514 	add.w	r5, r8, #20
   21ce2:	f101 0714 	add.w	r7, r1, #20
   21ce6:	00a0      	lsls	r0, r4, #2
   21ce8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
   21cec:	182b      	adds	r3, r5, r0
   21cee:	eb07 0900 	add.w	r9, r7, r0
   21cf2:	9301      	str	r3, [sp, #4]
   21cf4:	f857 3024 	ldr.w	r3, [r7, r4, lsl #2]
   21cf8:	3301      	adds	r3, #1
   21cfa:	429a      	cmp	r2, r3
   21cfc:	fbb2 f6f3 	udiv	r6, r2, r3
   21d00:	d333      	bcc.n	21d6a <quorem+0x9e>
   21d02:	f04f 0a00 	mov.w	sl, #0
   21d06:	46bc      	mov	ip, r7
   21d08:	46ae      	mov	lr, r5
   21d0a:	46d3      	mov	fp, sl
   21d0c:	f85c 2b04 	ldr.w	r2, [ip], #4
   21d10:	b293      	uxth	r3, r2
   21d12:	45e1      	cmp	r9, ip
   21d14:	ea4f 4212 	mov.w	r2, r2, lsr #16
   21d18:	fb06 a303 	mla	r3, r6, r3, sl
   21d1c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
   21d20:	b29b      	uxth	r3, r3
   21d22:	fb06 a202 	mla	r2, r6, r2, sl
   21d26:	ebab 0303 	sub.w	r3, fp, r3
   21d2a:	f8de b000 	ldr.w	fp, [lr]
   21d2e:	ea4f 4a12 	mov.w	sl, r2, lsr #16
   21d32:	fa1f fb8b 	uxth.w	fp, fp
   21d36:	445b      	add	r3, fp
   21d38:	fa1f fb82 	uxth.w	fp, r2
   21d3c:	f8de 2000 	ldr.w	r2, [lr]
   21d40:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
   21d44:	eb02 4223 	add.w	r2, r2, r3, asr #16
   21d48:	b29b      	uxth	r3, r3
   21d4a:	ea4f 4b22 	mov.w	fp, r2, asr #16
   21d4e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
   21d52:	f84e 3b04 	str.w	r3, [lr], #4
   21d56:	d2d9      	bcs.n	21d0c <quorem+0x40>
   21d58:	582b      	ldr	r3, [r5, r0]
   21d5a:	b933      	cbnz	r3, 21d6a <quorem+0x9e>
   21d5c:	9b01      	ldr	r3, [sp, #4]
   21d5e:	3b04      	subs	r3, #4
   21d60:	429d      	cmp	r5, r3
   21d62:	461a      	mov	r2, r3
   21d64:	d332      	bcc.n	21dcc <quorem+0x100>
   21d66:	f8c8 4010 	str.w	r4, [r8, #16]
   21d6a:	4640      	mov	r0, r8
   21d6c:	f000 fa74 	bl	22258 <__mcmp>
   21d70:	2800      	cmp	r0, #0
   21d72:	db27      	blt.n	21dc4 <quorem+0xf8>
   21d74:	3601      	adds	r6, #1
   21d76:	4628      	mov	r0, r5
   21d78:	f04f 0c00 	mov.w	ip, #0
   21d7c:	f857 1b04 	ldr.w	r1, [r7], #4
   21d80:	f8d0 e000 	ldr.w	lr, [r0]
   21d84:	b28b      	uxth	r3, r1
   21d86:	45b9      	cmp	r9, r7
   21d88:	fa1f f28e 	uxth.w	r2, lr
   21d8c:	ebac 0303 	sub.w	r3, ip, r3
   21d90:	4413      	add	r3, r2
   21d92:	ea4f 4211 	mov.w	r2, r1, lsr #16
   21d96:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
   21d9a:	eb02 4223 	add.w	r2, r2, r3, asr #16
   21d9e:	b29b      	uxth	r3, r3
   21da0:	ea4f 4c22 	mov.w	ip, r2, asr #16
   21da4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
   21da8:	f840 3b04 	str.w	r3, [r0], #4
   21dac:	d2e6      	bcs.n	21d7c <quorem+0xb0>
   21dae:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
   21db2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
   21db6:	b92a      	cbnz	r2, 21dc4 <quorem+0xf8>
   21db8:	3b04      	subs	r3, #4
   21dba:	429d      	cmp	r5, r3
   21dbc:	461a      	mov	r2, r3
   21dbe:	d30b      	bcc.n	21dd8 <quorem+0x10c>
   21dc0:	f8c8 4010 	str.w	r4, [r8, #16]
   21dc4:	4630      	mov	r0, r6
   21dc6:	b003      	add	sp, #12
   21dc8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   21dcc:	6812      	ldr	r2, [r2, #0]
   21dce:	3b04      	subs	r3, #4
   21dd0:	2a00      	cmp	r2, #0
   21dd2:	d1c8      	bne.n	21d66 <quorem+0x9a>
   21dd4:	3c01      	subs	r4, #1
   21dd6:	e7c3      	b.n	21d60 <quorem+0x94>
   21dd8:	6812      	ldr	r2, [r2, #0]
   21dda:	3b04      	subs	r3, #4
   21ddc:	2a00      	cmp	r2, #0
   21dde:	d1ef      	bne.n	21dc0 <quorem+0xf4>
   21de0:	3c01      	subs	r4, #1
   21de2:	e7ea      	b.n	21dba <quorem+0xee>
   21de4:	2000      	movs	r0, #0
   21de6:	e7ee      	b.n	21dc6 <quorem+0xfa>

00021de8 <__sfmoreglue>:
   21de8:	b570      	push	{r4, r5, r6, lr}
   21dea:	1e4a      	subs	r2, r1, #1
   21dec:	2568      	movs	r5, #104	; 0x68
   21dee:	460e      	mov	r6, r1
   21df0:	4355      	muls	r5, r2
   21df2:	f105 0174 	add.w	r1, r5, #116	; 0x74
   21df6:	f7fd fb61 	bl	1f4bc <_malloc_r>
   21dfa:	4604      	mov	r4, r0
   21dfc:	b140      	cbz	r0, 21e10 <__sfmoreglue+0x28>
   21dfe:	2100      	movs	r1, #0
   21e00:	f105 0268 	add.w	r2, r5, #104	; 0x68
   21e04:	e9c0 1600 	strd	r1, r6, [r0]
   21e08:	300c      	adds	r0, #12
   21e0a:	60a0      	str	r0, [r4, #8]
   21e0c:	f7ff fda2 	bl	21954 <memset>
   21e10:	4620      	mov	r0, r4
   21e12:	bd70      	pop	{r4, r5, r6, pc}

00021e14 <_fwalk_reent>:
   21e14:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   21e18:	4680      	mov	r8, r0
   21e1a:	4689      	mov	r9, r1
   21e1c:	f100 0448 	add.w	r4, r0, #72	; 0x48
   21e20:	2600      	movs	r6, #0
   21e22:	b914      	cbnz	r4, 21e2a <_fwalk_reent+0x16>
   21e24:	4630      	mov	r0, r6
   21e26:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   21e2a:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
   21e2e:	3f01      	subs	r7, #1
   21e30:	d501      	bpl.n	21e36 <_fwalk_reent+0x22>
   21e32:	6824      	ldr	r4, [r4, #0]
   21e34:	e7f5      	b.n	21e22 <_fwalk_reent+0xe>
   21e36:	89ab      	ldrh	r3, [r5, #12]
   21e38:	2b01      	cmp	r3, #1
   21e3a:	d907      	bls.n	21e4c <_fwalk_reent+0x38>
   21e3c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
   21e40:	3301      	adds	r3, #1
   21e42:	d003      	beq.n	21e4c <_fwalk_reent+0x38>
   21e44:	4629      	mov	r1, r5
   21e46:	4640      	mov	r0, r8
   21e48:	47c8      	blx	r9
   21e4a:	4306      	orrs	r6, r0
   21e4c:	3568      	adds	r5, #104	; 0x68
   21e4e:	e7ee      	b.n	21e2e <_fwalk_reent+0x1a>

00021e50 <__retarget_lock_init_recursive>:
   21e50:	4770      	bx	lr

00021e52 <__retarget_lock_acquire_recursive>:
   21e52:	4770      	bx	lr

00021e54 <__retarget_lock_release_recursive>:
   21e54:	4770      	bx	lr

00021e56 <__swhatbuf_r>:
   21e56:	b570      	push	{r4, r5, r6, lr}
   21e58:	460e      	mov	r6, r1
   21e5a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   21e5e:	b096      	sub	sp, #88	; 0x58
   21e60:	4614      	mov	r4, r2
   21e62:	2900      	cmp	r1, #0
   21e64:	461d      	mov	r5, r3
   21e66:	da07      	bge.n	21e78 <__swhatbuf_r+0x22>
   21e68:	2300      	movs	r3, #0
   21e6a:	602b      	str	r3, [r5, #0]
   21e6c:	89b3      	ldrh	r3, [r6, #12]
   21e6e:	061a      	lsls	r2, r3, #24
   21e70:	d410      	bmi.n	21e94 <__swhatbuf_r+0x3e>
   21e72:	f44f 6380 	mov.w	r3, #1024	; 0x400
   21e76:	e00e      	b.n	21e96 <__swhatbuf_r+0x40>
   21e78:	466a      	mov	r2, sp
   21e7a:	f7fd fcbd 	bl	1f7f8 <_fstat_r>
   21e7e:	2800      	cmp	r0, #0
   21e80:	dbf2      	blt.n	21e68 <__swhatbuf_r+0x12>
   21e82:	9a01      	ldr	r2, [sp, #4]
   21e84:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
   21e88:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
   21e8c:	425a      	negs	r2, r3
   21e8e:	415a      	adcs	r2, r3
   21e90:	602a      	str	r2, [r5, #0]
   21e92:	e7ee      	b.n	21e72 <__swhatbuf_r+0x1c>
   21e94:	2340      	movs	r3, #64	; 0x40
   21e96:	2000      	movs	r0, #0
   21e98:	6023      	str	r3, [r4, #0]
   21e9a:	b016      	add	sp, #88	; 0x58
   21e9c:	bd70      	pop	{r4, r5, r6, pc}

00021e9e <memmove>:
   21e9e:	4288      	cmp	r0, r1
   21ea0:	eb01 0302 	add.w	r3, r1, r2
   21ea4:	b510      	push	{r4, lr}
   21ea6:	d902      	bls.n	21eae <memmove+0x10>
   21ea8:	4283      	cmp	r3, r0
   21eaa:	461c      	mov	r4, r3
   21eac:	d807      	bhi.n	21ebe <memmove+0x20>
   21eae:	1e42      	subs	r2, r0, #1
   21eb0:	4299      	cmp	r1, r3
   21eb2:	d008      	beq.n	21ec6 <memmove+0x28>
   21eb4:	f811 4b01 	ldrb.w	r4, [r1], #1
   21eb8:	f802 4f01 	strb.w	r4, [r2, #1]!
   21ebc:	e7f8      	b.n	21eb0 <memmove+0x12>
   21ebe:	1883      	adds	r3, r0, r2
   21ec0:	1a9a      	subs	r2, r3, r2
   21ec2:	429a      	cmp	r2, r3
   21ec4:	d100      	bne.n	21ec8 <memmove+0x2a>
   21ec6:	bd10      	pop	{r4, pc}
   21ec8:	f814 1d01 	ldrb.w	r1, [r4, #-1]!
   21ecc:	f803 1d01 	strb.w	r1, [r3, #-1]!
   21ed0:	e7f7      	b.n	21ec2 <memmove+0x24>

00021ed2 <_Balloc>:
   21ed2:	b570      	push	{r4, r5, r6, lr}
   21ed4:	6a45      	ldr	r5, [r0, #36]	; 0x24
   21ed6:	4604      	mov	r4, r0
   21ed8:	460e      	mov	r6, r1
   21eda:	b93d      	cbnz	r5, 21eec <_Balloc+0x1a>
   21edc:	2010      	movs	r0, #16
   21ede:	f7fd fa49 	bl	1f374 <malloc>
   21ee2:	6260      	str	r0, [r4, #36]	; 0x24
   21ee4:	6005      	str	r5, [r0, #0]
   21ee6:	60c5      	str	r5, [r0, #12]
   21ee8:	e9c0 5501 	strd	r5, r5, [r0, #4]
   21eec:	6a65      	ldr	r5, [r4, #36]	; 0x24
   21eee:	68eb      	ldr	r3, [r5, #12]
   21ef0:	b183      	cbz	r3, 21f14 <_Balloc+0x42>
   21ef2:	6a63      	ldr	r3, [r4, #36]	; 0x24
   21ef4:	68db      	ldr	r3, [r3, #12]
   21ef6:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
   21efa:	b9b8      	cbnz	r0, 21f2c <_Balloc+0x5a>
   21efc:	2101      	movs	r1, #1
   21efe:	4620      	mov	r0, r4
   21f00:	fa01 f506 	lsl.w	r5, r1, r6
   21f04:	1d6a      	adds	r2, r5, #5
   21f06:	0092      	lsls	r2, r2, #2
   21f08:	f000 fa6e 	bl	223e8 <_calloc_r>
   21f0c:	b160      	cbz	r0, 21f28 <_Balloc+0x56>
   21f0e:	e9c0 6501 	strd	r6, r5, [r0, #4]
   21f12:	e00e      	b.n	21f32 <_Balloc+0x60>
   21f14:	2221      	movs	r2, #33	; 0x21
   21f16:	2104      	movs	r1, #4
   21f18:	4620      	mov	r0, r4
   21f1a:	f000 fa65 	bl	223e8 <_calloc_r>
   21f1e:	6a63      	ldr	r3, [r4, #36]	; 0x24
   21f20:	60e8      	str	r0, [r5, #12]
   21f22:	68db      	ldr	r3, [r3, #12]
   21f24:	2b00      	cmp	r3, #0
   21f26:	d1e4      	bne.n	21ef2 <_Balloc+0x20>
   21f28:	2000      	movs	r0, #0
   21f2a:	bd70      	pop	{r4, r5, r6, pc}
   21f2c:	6802      	ldr	r2, [r0, #0]
   21f2e:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
   21f32:	2300      	movs	r3, #0
   21f34:	e9c0 3303 	strd	r3, r3, [r0, #12]
   21f38:	e7f7      	b.n	21f2a <_Balloc+0x58>

00021f3a <_Bfree>:
   21f3a:	b570      	push	{r4, r5, r6, lr}
   21f3c:	6a44      	ldr	r4, [r0, #36]	; 0x24
   21f3e:	4606      	mov	r6, r0
   21f40:	460d      	mov	r5, r1
   21f42:	b93c      	cbnz	r4, 21f54 <_Bfree+0x1a>
   21f44:	2010      	movs	r0, #16
   21f46:	f7fd fa15 	bl	1f374 <malloc>
   21f4a:	6270      	str	r0, [r6, #36]	; 0x24
   21f4c:	6004      	str	r4, [r0, #0]
   21f4e:	60c4      	str	r4, [r0, #12]
   21f50:	e9c0 4401 	strd	r4, r4, [r0, #4]
   21f54:	b13d      	cbz	r5, 21f66 <_Bfree+0x2c>
   21f56:	6a73      	ldr	r3, [r6, #36]	; 0x24
   21f58:	686a      	ldr	r2, [r5, #4]
   21f5a:	68db      	ldr	r3, [r3, #12]
   21f5c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
   21f60:	6029      	str	r1, [r5, #0]
   21f62:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
   21f66:	bd70      	pop	{r4, r5, r6, pc}

00021f68 <__multadd>:
   21f68:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   21f6c:	f101 0c14 	add.w	ip, r1, #20
   21f70:	461f      	mov	r7, r3
   21f72:	4606      	mov	r6, r0
   21f74:	460c      	mov	r4, r1
   21f76:	690d      	ldr	r5, [r1, #16]
   21f78:	2300      	movs	r3, #0
   21f7a:	f8dc 0000 	ldr.w	r0, [ip]
   21f7e:	3301      	adds	r3, #1
   21f80:	b281      	uxth	r1, r0
   21f82:	429d      	cmp	r5, r3
   21f84:	ea4f 4010 	mov.w	r0, r0, lsr #16
   21f88:	fb02 7101 	mla	r1, r2, r1, r7
   21f8c:	ea4f 4711 	mov.w	r7, r1, lsr #16
   21f90:	b289      	uxth	r1, r1
   21f92:	fb02 7000 	mla	r0, r2, r0, r7
   21f96:	eb01 4100 	add.w	r1, r1, r0, lsl #16
   21f9a:	ea4f 4710 	mov.w	r7, r0, lsr #16
   21f9e:	f84c 1b04 	str.w	r1, [ip], #4
   21fa2:	dcea      	bgt.n	21f7a <__multadd+0x12>
   21fa4:	b1d7      	cbz	r7, 21fdc <__multadd+0x74>
   21fa6:	68a3      	ldr	r3, [r4, #8]
   21fa8:	42ab      	cmp	r3, r5
   21faa:	dc12      	bgt.n	21fd2 <__multadd+0x6a>
   21fac:	6861      	ldr	r1, [r4, #4]
   21fae:	4630      	mov	r0, r6
   21fb0:	3101      	adds	r1, #1
   21fb2:	f7ff ff8e 	bl	21ed2 <_Balloc>
   21fb6:	6922      	ldr	r2, [r4, #16]
   21fb8:	4680      	mov	r8, r0
   21fba:	f104 010c 	add.w	r1, r4, #12
   21fbe:	3202      	adds	r2, #2
   21fc0:	300c      	adds	r0, #12
   21fc2:	0092      	lsls	r2, r2, #2
   21fc4:	f7ff fcb9 	bl	2193a <memcpy>
   21fc8:	4621      	mov	r1, r4
   21fca:	4644      	mov	r4, r8
   21fcc:	4630      	mov	r0, r6
   21fce:	f7ff ffb4 	bl	21f3a <_Bfree>
   21fd2:	eb04 0385 	add.w	r3, r4, r5, lsl #2
   21fd6:	3501      	adds	r5, #1
   21fd8:	615f      	str	r7, [r3, #20]
   21fda:	6125      	str	r5, [r4, #16]
   21fdc:	4620      	mov	r0, r4
   21fde:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00021fe2 <__hi0bits>:
   21fe2:	0c02      	lsrs	r2, r0, #16
   21fe4:	4603      	mov	r3, r0
   21fe6:	0412      	lsls	r2, r2, #16
   21fe8:	b9ca      	cbnz	r2, 2201e <__hi0bits+0x3c>
   21fea:	0403      	lsls	r3, r0, #16
   21fec:	2010      	movs	r0, #16
   21fee:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
   21ff2:	bf04      	itt	eq
   21ff4:	021b      	lsleq	r3, r3, #8
   21ff6:	3008      	addeq	r0, #8
   21ff8:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
   21ffc:	bf04      	itt	eq
   21ffe:	011b      	lsleq	r3, r3, #4
   22000:	3004      	addeq	r0, #4
   22002:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
   22006:	bf04      	itt	eq
   22008:	009b      	lsleq	r3, r3, #2
   2200a:	3002      	addeq	r0, #2
   2200c:	2b00      	cmp	r3, #0
   2200e:	db05      	blt.n	2201c <__hi0bits+0x3a>
   22010:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
   22014:	f100 0001 	add.w	r0, r0, #1
   22018:	bf08      	it	eq
   2201a:	2020      	moveq	r0, #32
   2201c:	4770      	bx	lr
   2201e:	2000      	movs	r0, #0
   22020:	e7e5      	b.n	21fee <__hi0bits+0xc>

00022022 <__lo0bits>:
   22022:	6803      	ldr	r3, [r0, #0]
   22024:	4601      	mov	r1, r0
   22026:	f013 0207 	ands.w	r2, r3, #7
   2202a:	d00b      	beq.n	22044 <__lo0bits+0x22>
   2202c:	07da      	lsls	r2, r3, #31
   2202e:	d424      	bmi.n	2207a <__lo0bits+0x58>
   22030:	0798      	lsls	r0, r3, #30
   22032:	bf47      	ittee	mi
   22034:	085b      	lsrmi	r3, r3, #1
   22036:	2001      	movmi	r0, #1
   22038:	089b      	lsrpl	r3, r3, #2
   2203a:	2002      	movpl	r0, #2
   2203c:	bf4c      	ite	mi
   2203e:	600b      	strmi	r3, [r1, #0]
   22040:	600b      	strpl	r3, [r1, #0]
   22042:	4770      	bx	lr
   22044:	b298      	uxth	r0, r3
   22046:	b9b0      	cbnz	r0, 22076 <__lo0bits+0x54>
   22048:	0c1b      	lsrs	r3, r3, #16
   2204a:	2010      	movs	r0, #16
   2204c:	f013 0fff 	tst.w	r3, #255	; 0xff
   22050:	bf04      	itt	eq
   22052:	0a1b      	lsreq	r3, r3, #8
   22054:	3008      	addeq	r0, #8
   22056:	071a      	lsls	r2, r3, #28
   22058:	bf04      	itt	eq
   2205a:	091b      	lsreq	r3, r3, #4
   2205c:	3004      	addeq	r0, #4
   2205e:	079a      	lsls	r2, r3, #30
   22060:	bf04      	itt	eq
   22062:	089b      	lsreq	r3, r3, #2
   22064:	3002      	addeq	r0, #2
   22066:	07da      	lsls	r2, r3, #31
   22068:	d403      	bmi.n	22072 <__lo0bits+0x50>
   2206a:	085b      	lsrs	r3, r3, #1
   2206c:	f100 0001 	add.w	r0, r0, #1
   22070:	d005      	beq.n	2207e <__lo0bits+0x5c>
   22072:	600b      	str	r3, [r1, #0]
   22074:	4770      	bx	lr
   22076:	4610      	mov	r0, r2
   22078:	e7e8      	b.n	2204c <__lo0bits+0x2a>
   2207a:	2000      	movs	r0, #0
   2207c:	4770      	bx	lr
   2207e:	2020      	movs	r0, #32
   22080:	4770      	bx	lr

00022082 <__i2b>:
   22082:	b510      	push	{r4, lr}
   22084:	460c      	mov	r4, r1
   22086:	2101      	movs	r1, #1
   22088:	f7ff ff23 	bl	21ed2 <_Balloc>
   2208c:	2201      	movs	r2, #1
   2208e:	6144      	str	r4, [r0, #20]
   22090:	6102      	str	r2, [r0, #16]
   22092:	bd10      	pop	{r4, pc}

00022094 <__multiply>:
   22094:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   22098:	4690      	mov	r8, r2
   2209a:	690a      	ldr	r2, [r1, #16]
   2209c:	460c      	mov	r4, r1
   2209e:	f8d8 3010 	ldr.w	r3, [r8, #16]
   220a2:	429a      	cmp	r2, r3
   220a4:	bfbe      	ittt	lt
   220a6:	460b      	movlt	r3, r1
   220a8:	4644      	movlt	r4, r8
   220aa:	4698      	movlt	r8, r3
   220ac:	6927      	ldr	r7, [r4, #16]
   220ae:	68a3      	ldr	r3, [r4, #8]
   220b0:	f8d8 9010 	ldr.w	r9, [r8, #16]
   220b4:	6861      	ldr	r1, [r4, #4]
   220b6:	eb07 0609 	add.w	r6, r7, r9
   220ba:	42b3      	cmp	r3, r6
   220bc:	bfb8      	it	lt
   220be:	3101      	addlt	r1, #1
   220c0:	f7ff ff07 	bl	21ed2 <_Balloc>
   220c4:	f100 0514 	add.w	r5, r0, #20
   220c8:	2200      	movs	r2, #0
   220ca:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
   220ce:	462b      	mov	r3, r5
   220d0:	4573      	cmp	r3, lr
   220d2:	d316      	bcc.n	22102 <__multiply+0x6e>
   220d4:	f104 0314 	add.w	r3, r4, #20
   220d8:	f108 0214 	add.w	r2, r8, #20
   220dc:	eb03 0787 	add.w	r7, r3, r7, lsl #2
   220e0:	eb02 0389 	add.w	r3, r2, r9, lsl #2
   220e4:	9300      	str	r3, [sp, #0]
   220e6:	9b00      	ldr	r3, [sp, #0]
   220e8:	9201      	str	r2, [sp, #4]
   220ea:	4293      	cmp	r3, r2
   220ec:	d80c      	bhi.n	22108 <__multiply+0x74>
   220ee:	2e00      	cmp	r6, #0
   220f0:	dd03      	ble.n	220fa <__multiply+0x66>
   220f2:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
   220f6:	2b00      	cmp	r3, #0
   220f8:	d059      	beq.n	221ae <__multiply+0x11a>
   220fa:	6106      	str	r6, [r0, #16]
   220fc:	b003      	add	sp, #12
   220fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   22102:	f843 2b04 	str.w	r2, [r3], #4
   22106:	e7e3      	b.n	220d0 <__multiply+0x3c>
   22108:	f8b2 a000 	ldrh.w	sl, [r2]
   2210c:	f1ba 0f00 	cmp.w	sl, #0
   22110:	d023      	beq.n	2215a <__multiply+0xc6>
   22112:	f104 0914 	add.w	r9, r4, #20
   22116:	46ac      	mov	ip, r5
   22118:	f04f 0800 	mov.w	r8, #0
   2211c:	f859 1b04 	ldr.w	r1, [r9], #4
   22120:	f8dc b000 	ldr.w	fp, [ip]
   22124:	b28b      	uxth	r3, r1
   22126:	454f      	cmp	r7, r9
   22128:	fa1f fb8b 	uxth.w	fp, fp
   2212c:	fb0a b303 	mla	r3, sl, r3, fp
   22130:	ea4f 4b11 	mov.w	fp, r1, lsr #16
   22134:	f8dc 1000 	ldr.w	r1, [ip]
   22138:	4443      	add	r3, r8
   2213a:	ea4f 4811 	mov.w	r8, r1, lsr #16
   2213e:	fb0a 810b 	mla	r1, sl, fp, r8
   22142:	eb01 4113 	add.w	r1, r1, r3, lsr #16
   22146:	b29b      	uxth	r3, r3
   22148:	ea4f 4811 	mov.w	r8, r1, lsr #16
   2214c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
   22150:	f84c 3b04 	str.w	r3, [ip], #4
   22154:	d8e2      	bhi.n	2211c <__multiply+0x88>
   22156:	f8cc 8000 	str.w	r8, [ip]
   2215a:	9b01      	ldr	r3, [sp, #4]
   2215c:	3204      	adds	r2, #4
   2215e:	f8b3 9002 	ldrh.w	r9, [r3, #2]
   22162:	f1b9 0f00 	cmp.w	r9, #0
   22166:	d020      	beq.n	221aa <__multiply+0x116>
   22168:	682b      	ldr	r3, [r5, #0]
   2216a:	f104 0814 	add.w	r8, r4, #20
   2216e:	46ac      	mov	ip, r5
   22170:	f04f 0a00 	mov.w	sl, #0
   22174:	f8b8 1000 	ldrh.w	r1, [r8]
   22178:	b29b      	uxth	r3, r3
   2217a:	f8bc b002 	ldrh.w	fp, [ip, #2]
   2217e:	fb09 b101 	mla	r1, r9, r1, fp
   22182:	448a      	add	sl, r1
   22184:	ea43 430a 	orr.w	r3, r3, sl, lsl #16
   22188:	f84c 3b04 	str.w	r3, [ip], #4
   2218c:	f858 3b04 	ldr.w	r3, [r8], #4
   22190:	f8bc 1000 	ldrh.w	r1, [ip]
   22194:	0c1b      	lsrs	r3, r3, #16
   22196:	4547      	cmp	r7, r8
   22198:	fb09 1303 	mla	r3, r9, r3, r1
   2219c:	eb03 431a 	add.w	r3, r3, sl, lsr #16
   221a0:	ea4f 4a13 	mov.w	sl, r3, lsr #16
   221a4:	d8e6      	bhi.n	22174 <__multiply+0xe0>
   221a6:	f8cc 3000 	str.w	r3, [ip]
   221aa:	3504      	adds	r5, #4
   221ac:	e79b      	b.n	220e6 <__multiply+0x52>
   221ae:	3e01      	subs	r6, #1
   221b0:	e79d      	b.n	220ee <__multiply+0x5a>

000221b2 <__lshift>:
   221b2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   221b6:	460c      	mov	r4, r1
   221b8:	ea4f 1a62 	mov.w	sl, r2, asr #5
   221bc:	4607      	mov	r7, r0
   221be:	4616      	mov	r6, r2
   221c0:	6923      	ldr	r3, [r4, #16]
   221c2:	6849      	ldr	r1, [r1, #4]
   221c4:	eb0a 0903 	add.w	r9, sl, r3
   221c8:	68a3      	ldr	r3, [r4, #8]
   221ca:	f109 0501 	add.w	r5, r9, #1
   221ce:	42ab      	cmp	r3, r5
   221d0:	db33      	blt.n	2223a <__lshift+0x88>
   221d2:	4638      	mov	r0, r7
   221d4:	f7ff fe7d 	bl	21ed2 <_Balloc>
   221d8:	2300      	movs	r3, #0
   221da:	4680      	mov	r8, r0
   221dc:	f100 0114 	add.w	r1, r0, #20
   221e0:	f100 0210 	add.w	r2, r0, #16
   221e4:	4618      	mov	r0, r3
   221e6:	4553      	cmp	r3, sl
   221e8:	db2a      	blt.n	22240 <__lshift+0x8e>
   221ea:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
   221ee:	f104 0314 	add.w	r3, r4, #20
   221f2:	6920      	ldr	r0, [r4, #16]
   221f4:	f016 021f 	ands.w	r2, r6, #31
   221f8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
   221fc:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
   22200:	d022      	beq.n	22248 <__lshift+0x96>
   22202:	f1c2 0e20 	rsb	lr, r2, #32
   22206:	2000      	movs	r0, #0
   22208:	681e      	ldr	r6, [r3, #0]
   2220a:	4096      	lsls	r6, r2
   2220c:	4330      	orrs	r0, r6
   2220e:	f841 0b04 	str.w	r0, [r1], #4
   22212:	f853 0b04 	ldr.w	r0, [r3], #4
   22216:	459c      	cmp	ip, r3
   22218:	fa20 f00e 	lsr.w	r0, r0, lr
   2221c:	d8f4      	bhi.n	22208 <__lshift+0x56>
   2221e:	6008      	str	r0, [r1, #0]
   22220:	b108      	cbz	r0, 22226 <__lshift+0x74>
   22222:	f109 0502 	add.w	r5, r9, #2
   22226:	3d01      	subs	r5, #1
   22228:	4638      	mov	r0, r7
   2222a:	4621      	mov	r1, r4
   2222c:	f8c8 5010 	str.w	r5, [r8, #16]
   22230:	f7ff fe83 	bl	21f3a <_Bfree>
   22234:	4640      	mov	r0, r8
   22236:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   2223a:	3101      	adds	r1, #1
   2223c:	005b      	lsls	r3, r3, #1
   2223e:	e7c6      	b.n	221ce <__lshift+0x1c>
   22240:	f842 0f04 	str.w	r0, [r2, #4]!
   22244:	3301      	adds	r3, #1
   22246:	e7ce      	b.n	221e6 <__lshift+0x34>
   22248:	3904      	subs	r1, #4
   2224a:	f853 2b04 	ldr.w	r2, [r3], #4
   2224e:	459c      	cmp	ip, r3
   22250:	f841 2f04 	str.w	r2, [r1, #4]!
   22254:	d8f9      	bhi.n	2224a <__lshift+0x98>
   22256:	e7e6      	b.n	22226 <__lshift+0x74>

00022258 <__mcmp>:
   22258:	6903      	ldr	r3, [r0, #16]
   2225a:	690a      	ldr	r2, [r1, #16]
   2225c:	1a9b      	subs	r3, r3, r2
   2225e:	b530      	push	{r4, r5, lr}
   22260:	d10c      	bne.n	2227c <__mcmp+0x24>
   22262:	0092      	lsls	r2, r2, #2
   22264:	3014      	adds	r0, #20
   22266:	3114      	adds	r1, #20
   22268:	1884      	adds	r4, r0, r2
   2226a:	4411      	add	r1, r2
   2226c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
   22270:	f851 2d04 	ldr.w	r2, [r1, #-4]!
   22274:	4295      	cmp	r5, r2
   22276:	d003      	beq.n	22280 <__mcmp+0x28>
   22278:	d305      	bcc.n	22286 <__mcmp+0x2e>
   2227a:	2301      	movs	r3, #1
   2227c:	4618      	mov	r0, r3
   2227e:	bd30      	pop	{r4, r5, pc}
   22280:	42a0      	cmp	r0, r4
   22282:	d3f3      	bcc.n	2226c <__mcmp+0x14>
   22284:	e7fa      	b.n	2227c <__mcmp+0x24>
   22286:	f04f 33ff 	mov.w	r3, #4294967295
   2228a:	e7f7      	b.n	2227c <__mcmp+0x24>

0002228c <__mdiff>:
   2228c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   22290:	460d      	mov	r5, r1
   22292:	4607      	mov	r7, r0
   22294:	4611      	mov	r1, r2
   22296:	4614      	mov	r4, r2
   22298:	4628      	mov	r0, r5
   2229a:	f7ff ffdd 	bl	22258 <__mcmp>
   2229e:	1e06      	subs	r6, r0, #0
   222a0:	d108      	bne.n	222b4 <__mdiff+0x28>
   222a2:	4631      	mov	r1, r6
   222a4:	4638      	mov	r0, r7
   222a6:	f7ff fe14 	bl	21ed2 <_Balloc>
   222aa:	2301      	movs	r3, #1
   222ac:	e9c0 3604 	strd	r3, r6, [r0, #16]
   222b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   222b4:	bfa3      	ittte	ge
   222b6:	4623      	movge	r3, r4
   222b8:	462c      	movge	r4, r5
   222ba:	2600      	movge	r6, #0
   222bc:	2601      	movlt	r6, #1
   222be:	bfa8      	it	ge
   222c0:	461d      	movge	r5, r3
   222c2:	6861      	ldr	r1, [r4, #4]
   222c4:	4638      	mov	r0, r7
   222c6:	f7ff fe04 	bl	21ed2 <_Balloc>
   222ca:	f105 0914 	add.w	r9, r5, #20
   222ce:	60c6      	str	r6, [r0, #12]
   222d0:	f104 0214 	add.w	r2, r4, #20
   222d4:	6926      	ldr	r6, [r4, #16]
   222d6:	f100 0114 	add.w	r1, r0, #20
   222da:	692b      	ldr	r3, [r5, #16]
   222dc:	f04f 0e00 	mov.w	lr, #0
   222e0:	eb02 0786 	add.w	r7, r2, r6, lsl #2
   222e4:	eb09 0883 	add.w	r8, r9, r3, lsl #2
   222e8:	f852 ab04 	ldr.w	sl, [r2], #4
   222ec:	f859 5b04 	ldr.w	r5, [r9], #4
   222f0:	fa1f f38a 	uxth.w	r3, sl
   222f4:	4694      	mov	ip, r2
   222f6:	b2ac      	uxth	r4, r5
   222f8:	45c8      	cmp	r8, r9
   222fa:	4473      	add	r3, lr
   222fc:	eba3 0304 	sub.w	r3, r3, r4
   22300:	ea4f 4415 	mov.w	r4, r5, lsr #16
   22304:	ebc4 441a 	rsb	r4, r4, sl, lsr #16
   22308:	eb04 4423 	add.w	r4, r4, r3, asr #16
   2230c:	b29b      	uxth	r3, r3
   2230e:	ea4f 4e24 	mov.w	lr, r4, asr #16
   22312:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
   22316:	f841 4b04 	str.w	r4, [r1], #4
   2231a:	d8e5      	bhi.n	222e8 <__mdiff+0x5c>
   2231c:	45bc      	cmp	ip, r7
   2231e:	d304      	bcc.n	2232a <__mdiff+0x9e>
   22320:	f851 3d04 	ldr.w	r3, [r1, #-4]!
   22324:	b183      	cbz	r3, 22348 <__mdiff+0xbc>
   22326:	6106      	str	r6, [r0, #16]
   22328:	e7c2      	b.n	222b0 <__mdiff+0x24>
   2232a:	f85c 4b04 	ldr.w	r4, [ip], #4
   2232e:	b2a2      	uxth	r2, r4
   22330:	4472      	add	r2, lr
   22332:	1413      	asrs	r3, r2, #16
   22334:	b292      	uxth	r2, r2
   22336:	eb03 4314 	add.w	r3, r3, r4, lsr #16
   2233a:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
   2233e:	ea4f 4e23 	mov.w	lr, r3, asr #16
   22342:	f841 2b04 	str.w	r2, [r1], #4
   22346:	e7e9      	b.n	2231c <__mdiff+0x90>
   22348:	3e01      	subs	r6, #1
   2234a:	e7e9      	b.n	22320 <__mdiff+0x94>

0002234c <__d2b>:
   2234c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   22350:	ec59 8b10 	vmov	r8, r9, d0
   22354:	f3c9 540a 	ubfx	r4, r9, #20, #11
   22358:	460e      	mov	r6, r1
   2235a:	2101      	movs	r1, #1
   2235c:	4615      	mov	r5, r2
   2235e:	f7ff fdb8 	bl	21ed2 <_Balloc>
   22362:	f3c9 0313 	ubfx	r3, r9, #0, #20
   22366:	4607      	mov	r7, r0
   22368:	bb2c      	cbnz	r4, 223b6 <__d2b+0x6a>
   2236a:	9301      	str	r3, [sp, #4]
   2236c:	f1b8 0300 	subs.w	r3, r8, #0
   22370:	d026      	beq.n	223c0 <__d2b+0x74>
   22372:	4668      	mov	r0, sp
   22374:	9300      	str	r3, [sp, #0]
   22376:	f7ff fe54 	bl	22022 <__lo0bits>
   2237a:	9900      	ldr	r1, [sp, #0]
   2237c:	b1f0      	cbz	r0, 223bc <__d2b+0x70>
   2237e:	9a01      	ldr	r2, [sp, #4]
   22380:	f1c0 0320 	rsb	r3, r0, #32
   22384:	fa02 f303 	lsl.w	r3, r2, r3
   22388:	40c2      	lsrs	r2, r0
   2238a:	430b      	orrs	r3, r1
   2238c:	9201      	str	r2, [sp, #4]
   2238e:	617b      	str	r3, [r7, #20]
   22390:	9b01      	ldr	r3, [sp, #4]
   22392:	2b00      	cmp	r3, #0
   22394:	61bb      	str	r3, [r7, #24]
   22396:	bf14      	ite	ne
   22398:	2102      	movne	r1, #2
   2239a:	2101      	moveq	r1, #1
   2239c:	6139      	str	r1, [r7, #16]
   2239e:	b1c4      	cbz	r4, 223d2 <__d2b+0x86>
   223a0:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
   223a4:	4404      	add	r4, r0
   223a6:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
   223aa:	6034      	str	r4, [r6, #0]
   223ac:	6028      	str	r0, [r5, #0]
   223ae:	4638      	mov	r0, r7
   223b0:	b003      	add	sp, #12
   223b2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   223b6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   223ba:	e7d6      	b.n	2236a <__d2b+0x1e>
   223bc:	6179      	str	r1, [r7, #20]
   223be:	e7e7      	b.n	22390 <__d2b+0x44>
   223c0:	a801      	add	r0, sp, #4
   223c2:	f7ff fe2e 	bl	22022 <__lo0bits>
   223c6:	9b01      	ldr	r3, [sp, #4]
   223c8:	2101      	movs	r1, #1
   223ca:	3020      	adds	r0, #32
   223cc:	617b      	str	r3, [r7, #20]
   223ce:	6139      	str	r1, [r7, #16]
   223d0:	e7e5      	b.n	2239e <__d2b+0x52>
   223d2:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
   223d6:	eb07 0381 	add.w	r3, r7, r1, lsl #2
   223da:	6030      	str	r0, [r6, #0]
   223dc:	6918      	ldr	r0, [r3, #16]
   223de:	f7ff fe00 	bl	21fe2 <__hi0bits>
   223e2:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
   223e6:	e7e1      	b.n	223ac <__d2b+0x60>

000223e8 <_calloc_r>:
   223e8:	b538      	push	{r3, r4, r5, lr}
   223ea:	fb02 f401 	mul.w	r4, r2, r1
   223ee:	4621      	mov	r1, r4
   223f0:	f7fd f864 	bl	1f4bc <_malloc_r>
   223f4:	4605      	mov	r5, r0
   223f6:	b118      	cbz	r0, 22400 <_calloc_r+0x18>
   223f8:	4622      	mov	r2, r4
   223fa:	2100      	movs	r1, #0
   223fc:	f7ff faaa 	bl	21954 <memset>
   22400:	4628      	mov	r0, r5
   22402:	bd38      	pop	{r3, r4, r5, pc}

00022404 <_realloc_r>:
   22404:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   22406:	4607      	mov	r7, r0
   22408:	4614      	mov	r4, r2
   2240a:	460e      	mov	r6, r1
   2240c:	b921      	cbnz	r1, 22418 <_realloc_r+0x14>
   2240e:	4611      	mov	r1, r2
   22410:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   22414:	f7fd b852 	b.w	1f4bc <_malloc_r>
   22418:	b922      	cbnz	r2, 22424 <_realloc_r+0x20>
   2241a:	4625      	mov	r5, r4
   2241c:	f7fd f800 	bl	1f420 <_free_r>
   22420:	4628      	mov	r0, r5
   22422:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   22424:	f000 f8ee 	bl	22604 <_malloc_usable_size_r>
   22428:	42a0      	cmp	r0, r4
   2242a:	d20f      	bcs.n	2244c <_realloc_r+0x48>
   2242c:	4621      	mov	r1, r4
   2242e:	4638      	mov	r0, r7
   22430:	f7fd f844 	bl	1f4bc <_malloc_r>
   22434:	4605      	mov	r5, r0
   22436:	2800      	cmp	r0, #0
   22438:	d0f2      	beq.n	22420 <_realloc_r+0x1c>
   2243a:	4631      	mov	r1, r6
   2243c:	4622      	mov	r2, r4
   2243e:	f7ff fa7c 	bl	2193a <memcpy>
   22442:	4631      	mov	r1, r6
   22444:	4638      	mov	r0, r7
   22446:	f7fc ffeb 	bl	1f420 <_free_r>
   2244a:	e7e9      	b.n	22420 <_realloc_r+0x1c>
   2244c:	4635      	mov	r5, r6
   2244e:	e7e7      	b.n	22420 <_realloc_r+0x1c>

00022450 <__ssputs_r>:
   22450:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   22454:	688e      	ldr	r6, [r1, #8]
   22456:	4682      	mov	sl, r0
   22458:	460c      	mov	r4, r1
   2245a:	4691      	mov	r9, r2
   2245c:	429e      	cmp	r6, r3
   2245e:	4698      	mov	r8, r3
   22460:	d838      	bhi.n	224d4 <__ssputs_r+0x84>
   22462:	f8b1 c00c 	ldrh.w	ip, [r1, #12]
   22466:	f41c 6f90 	tst.w	ip, #1152	; 0x480
   2246a:	d031      	beq.n	224d0 <__ssputs_r+0x80>
   2246c:	6962      	ldr	r2, [r4, #20]
   2246e:	3301      	adds	r3, #1
   22470:	6825      	ldr	r5, [r4, #0]
   22472:	6909      	ldr	r1, [r1, #16]
   22474:	eb02 0242 	add.w	r2, r2, r2, lsl #1
   22478:	1a6f      	subs	r7, r5, r1
   2247a:	eb02 72d2 	add.w	r2, r2, r2, lsr #31
   2247e:	443b      	add	r3, r7
   22480:	1055      	asrs	r5, r2, #1
   22482:	429d      	cmp	r5, r3
   22484:	bf38      	it	cc
   22486:	461d      	movcc	r5, r3
   22488:	f41c 6f80 	tst.w	ip, #1024	; 0x400
   2248c:	d030      	beq.n	224f0 <__ssputs_r+0xa0>
   2248e:	4629      	mov	r1, r5
   22490:	f7fd f814 	bl	1f4bc <_malloc_r>
   22494:	4606      	mov	r6, r0
   22496:	b950      	cbnz	r0, 224ae <__ssputs_r+0x5e>
   22498:	230c      	movs	r3, #12
   2249a:	f04f 30ff 	mov.w	r0, #4294967295
   2249e:	f8ca 3000 	str.w	r3, [sl]
   224a2:	89a3      	ldrh	r3, [r4, #12]
   224a4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   224a8:	81a3      	strh	r3, [r4, #12]
   224aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   224ae:	463a      	mov	r2, r7
   224b0:	6921      	ldr	r1, [r4, #16]
   224b2:	f7ff fa42 	bl	2193a <memcpy>
   224b6:	89a3      	ldrh	r3, [r4, #12]
   224b8:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
   224bc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   224c0:	81a3      	strh	r3, [r4, #12]
   224c2:	6126      	str	r6, [r4, #16]
   224c4:	443e      	add	r6, r7
   224c6:	6165      	str	r5, [r4, #20]
   224c8:	1bed      	subs	r5, r5, r7
   224ca:	6026      	str	r6, [r4, #0]
   224cc:	4646      	mov	r6, r8
   224ce:	60a5      	str	r5, [r4, #8]
   224d0:	4546      	cmp	r6, r8
   224d2:	d900      	bls.n	224d6 <__ssputs_r+0x86>
   224d4:	4646      	mov	r6, r8
   224d6:	4632      	mov	r2, r6
   224d8:	4649      	mov	r1, r9
   224da:	6820      	ldr	r0, [r4, #0]
   224dc:	f7ff fcdf 	bl	21e9e <memmove>
   224e0:	68a3      	ldr	r3, [r4, #8]
   224e2:	2000      	movs	r0, #0
   224e4:	1b9b      	subs	r3, r3, r6
   224e6:	60a3      	str	r3, [r4, #8]
   224e8:	6823      	ldr	r3, [r4, #0]
   224ea:	441e      	add	r6, r3
   224ec:	6026      	str	r6, [r4, #0]
   224ee:	e7dc      	b.n	224aa <__ssputs_r+0x5a>
   224f0:	462a      	mov	r2, r5
   224f2:	f7ff ff87 	bl	22404 <_realloc_r>
   224f6:	4606      	mov	r6, r0
   224f8:	2800      	cmp	r0, #0
   224fa:	d1e2      	bne.n	224c2 <__ssputs_r+0x72>
   224fc:	6921      	ldr	r1, [r4, #16]
   224fe:	4650      	mov	r0, sl
   22500:	f7fc ff8e 	bl	1f420 <_free_r>
   22504:	e7c8      	b.n	22498 <__ssputs_r+0x48>

00022506 <_raise_r>:
   22506:	291f      	cmp	r1, #31
   22508:	b538      	push	{r3, r4, r5, lr}
   2250a:	4604      	mov	r4, r0
   2250c:	460d      	mov	r5, r1
   2250e:	d904      	bls.n	2251a <_raise_r+0x14>
   22510:	2316      	movs	r3, #22
   22512:	6003      	str	r3, [r0, #0]
   22514:	f04f 30ff 	mov.w	r0, #4294967295
   22518:	bd38      	pop	{r3, r4, r5, pc}
   2251a:	6c42      	ldr	r2, [r0, #68]	; 0x44
   2251c:	b112      	cbz	r2, 22524 <_raise_r+0x1e>
   2251e:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
   22522:	b94b      	cbnz	r3, 22538 <_raise_r+0x32>
   22524:	4620      	mov	r0, r4
   22526:	f000 f816 	bl	22556 <_getpid_r>
   2252a:	462a      	mov	r2, r5
   2252c:	4601      	mov	r1, r0
   2252e:	4620      	mov	r0, r4
   22530:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   22534:	f7fd b92c 	b.w	1f790 <_kill_r>
   22538:	2b01      	cmp	r3, #1
   2253a:	d00a      	beq.n	22552 <_raise_r+0x4c>
   2253c:	1c59      	adds	r1, r3, #1
   2253e:	d103      	bne.n	22548 <_raise_r+0x42>
   22540:	2316      	movs	r3, #22
   22542:	6003      	str	r3, [r0, #0]
   22544:	2001      	movs	r0, #1
   22546:	e7e7      	b.n	22518 <_raise_r+0x12>
   22548:	2400      	movs	r4, #0
   2254a:	4628      	mov	r0, r5
   2254c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
   22550:	4798      	blx	r3
   22552:	2000      	movs	r0, #0
   22554:	e7e0      	b.n	22518 <_raise_r+0x12>

00022556 <_getpid_r>:
   22556:	f7fd bd5b 	b.w	20010 <_getpid>

0002255a <__sread>:
   2255a:	b510      	push	{r4, lr}
   2255c:	460c      	mov	r4, r1
   2255e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   22562:	f7fd f989 	bl	1f878 <_read_r>
   22566:	2800      	cmp	r0, #0
   22568:	bfab      	itete	ge
   2256a:	6d63      	ldrge	r3, [r4, #84]	; 0x54
   2256c:	89a3      	ldrhlt	r3, [r4, #12]
   2256e:	181b      	addge	r3, r3, r0
   22570:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
   22574:	bfac      	ite	ge
   22576:	6563      	strge	r3, [r4, #84]	; 0x54
   22578:	81a3      	strhlt	r3, [r4, #12]
   2257a:	bd10      	pop	{r4, pc}

0002257c <__swrite>:
   2257c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   22580:	461f      	mov	r7, r3
   22582:	898b      	ldrh	r3, [r1, #12]
   22584:	4605      	mov	r5, r0
   22586:	460c      	mov	r4, r1
   22588:	05db      	lsls	r3, r3, #23
   2258a:	4616      	mov	r6, r2
   2258c:	d505      	bpl.n	2259a <__swrite+0x1e>
   2258e:	2302      	movs	r3, #2
   22590:	2200      	movs	r2, #0
   22592:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   22596:	f7fd f951 	bl	1f83c <_lseek_r>
   2259a:	89a3      	ldrh	r3, [r4, #12]
   2259c:	4632      	mov	r2, r6
   2259e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   225a2:	4628      	mov	r0, r5
   225a4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
   225a8:	81a3      	strh	r3, [r4, #12]
   225aa:	463b      	mov	r3, r7
   225ac:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   225b0:	f7fd b900 	b.w	1f7b4 <_write_r>

000225b4 <__sseek>:
   225b4:	b510      	push	{r4, lr}
   225b6:	460c      	mov	r4, r1
   225b8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   225bc:	f7fd f93e 	bl	1f83c <_lseek_r>
   225c0:	1c43      	adds	r3, r0, #1
   225c2:	89a3      	ldrh	r3, [r4, #12]
   225c4:	bf15      	itete	ne
   225c6:	6560      	strne	r0, [r4, #84]	; 0x54
   225c8:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
   225cc:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
   225d0:	81a3      	strheq	r3, [r4, #12]
   225d2:	bf18      	it	ne
   225d4:	81a3      	strhne	r3, [r4, #12]
   225d6:	bd10      	pop	{r4, pc}

000225d8 <__sclose>:
   225d8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   225dc:	f7fd b8fc 	b.w	1f7d8 <_close_r>

000225e0 <__ascii_mbtowc>:
   225e0:	b082      	sub	sp, #8
   225e2:	b901      	cbnz	r1, 225e6 <__ascii_mbtowc+0x6>
   225e4:	a901      	add	r1, sp, #4
   225e6:	b142      	cbz	r2, 225fa <__ascii_mbtowc+0x1a>
   225e8:	b14b      	cbz	r3, 225fe <__ascii_mbtowc+0x1e>
   225ea:	7813      	ldrb	r3, [r2, #0]
   225ec:	600b      	str	r3, [r1, #0]
   225ee:	7812      	ldrb	r2, [r2, #0]
   225f0:	1c10      	adds	r0, r2, #0
   225f2:	bf18      	it	ne
   225f4:	2001      	movne	r0, #1
   225f6:	b002      	add	sp, #8
   225f8:	4770      	bx	lr
   225fa:	4610      	mov	r0, r2
   225fc:	e7fb      	b.n	225f6 <__ascii_mbtowc+0x16>
   225fe:	f06f 0001 	mvn.w	r0, #1
   22602:	e7f8      	b.n	225f6 <__ascii_mbtowc+0x16>

00022604 <_malloc_usable_size_r>:
   22604:	f851 3c04 	ldr.w	r3, [r1, #-4]
   22608:	1f18      	subs	r0, r3, #4
   2260a:	2b00      	cmp	r3, #0
   2260c:	bfbc      	itt	lt
   2260e:	580b      	ldrlt	r3, [r1, r0]
   22610:	18c0      	addlt	r0, r0, r3
   22612:	4770      	bx	lr

00022614 <__ascii_wctomb>:
   22614:	b149      	cbz	r1, 2262a <__ascii_wctomb+0x16>
   22616:	2aff      	cmp	r2, #255	; 0xff
   22618:	bf8d      	iteet	hi
   2261a:	238a      	movhi	r3, #138	; 0x8a
   2261c:	700a      	strbls	r2, [r1, #0]
   2261e:	2001      	movls	r0, #1
   22620:	6003      	strhi	r3, [r0, #0]
   22622:	bf88      	it	hi
   22624:	f04f 30ff 	movhi.w	r0, #4294967295
   22628:	4770      	bx	lr
   2262a:	4608      	mov	r0, r1
   2262c:	4770      	bx	lr
