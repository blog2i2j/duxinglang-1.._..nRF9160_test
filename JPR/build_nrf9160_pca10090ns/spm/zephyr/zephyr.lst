
zephyr.elf:     file format elf32-littlearm


Disassembly of section rom_start:

00010200 <_vector_table>:
   10200:	20000a90 	.word	0x20000a90
   10204:	0001128d 	.word	0x0001128d
   10208:	00013c9f 	.word	0x00013c9f
   1020c:	000111dd 	.word	0x000111dd
   10210:	000111dd 	.word	0x000111dd
   10214:	000111dd 	.word	0x000111dd
   10218:	000111dd 	.word	0x000111dd
   1021c:	000111dd 	.word	0x000111dd
   10220:	000111dd 	.word	0x000111dd
   10224:	000111dd 	.word	0x000111dd
   10228:	000111dd 	.word	0x000111dd
   1022c:	000110cd 	.word	0x000110cd
   10230:	000111dd 	.word	0x000111dd
   10234:	000111dd 	.word	0x000111dd
   10238:	00011079 	.word	0x00011079
   1023c:	00013b9d 	.word	0x00013b9d

00010240 <_irq_vector_table>:
   10240:	0001124d 0001124d 0001124d 0001124d     M...M...M...M...
   10250:	0001124d 0001124d 0001124d 0001124d     M...M...M...M...
   10260:	0001124d 0001124d 0001124d 0001124d     M...M...M...M...
   10270:	0001124d 0001124d 0001124d 0001124d     M...M...M...M...
   10280:	0001124d 0001124d 0001124d 0001124d     M...M...M...M...
   10290:	0001124d 0001124d 0001124d 0001124d     M...M...M...M...
   102a0:	0001124d 0001124d 0001124d 0001124d     M...M...M...M...
   102b0:	0001124d 0001124d 0001124d 0001124d     M...M...M...M...
   102c0:	0001124d 0001124d 0001124d 0001124d     M...M...M...M...
   102d0:	0001124d 0001124d 0001124d 0001124d     M...M...M...M...
   102e0:	0001124d 0001124d 0001124d 0001124d     M...M...M...M...
   102f0:	0001124d 0001124d 0001124d 0001124d     M...M...M...M...
   10300:	0001124d 0001124d 0001124d 0001124d     M...M...M...M...
   10310:	0001124d 0001124d 0001124d 0001124d     M...M...M...M...
   10320:	0001124d 0001124d 0001124d 0001124d     M...M...M...M...
   10330:	0001124d 0001124d 0001124d 0001124d     M...M...M...M...
   10340:	0001124d                                M...

00010344 <_vector_end>:
	...

00010400 <m_firmware_info>:
   10400:	281ee6de 8fcebb4c 00005b02 0000003c     ...(L....[..<...
   10410:	00007e00 00000001 00010200 00010200     .~..............
   10420:	9102ffff 00000000 00000000 00000000     ................
	...

Disassembly of section text:

0001043c <__aeabi_uldivmod>:
   1043c:	b953      	cbnz	r3, 10454 <__aeabi_uldivmod+0x18>
   1043e:	b94a      	cbnz	r2, 10454 <__aeabi_uldivmod+0x18>
   10440:	2900      	cmp	r1, #0
   10442:	bf08      	it	eq
   10444:	2800      	cmpeq	r0, #0
   10446:	bf1c      	itt	ne
   10448:	f04f 31ff 	movne.w	r1, #4294967295
   1044c:	f04f 30ff 	movne.w	r0, #4294967295
   10450:	f000 b970 	b.w	10734 <__aeabi_idiv0>
   10454:	f1ad 0c08 	sub.w	ip, sp, #8
   10458:	e96d ce04 	strd	ip, lr, [sp, #-16]!
   1045c:	f000 f806 	bl	1046c <__udivmoddi4>
   10460:	f8dd e004 	ldr.w	lr, [sp, #4]
   10464:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   10468:	b004      	add	sp, #16
   1046a:	4770      	bx	lr

0001046c <__udivmoddi4>:
   1046c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   10470:	9e09      	ldr	r6, [sp, #36]	; 0x24
   10472:	4604      	mov	r4, r0
   10474:	4689      	mov	r9, r1
   10476:	2b00      	cmp	r3, #0
   10478:	f040 8083 	bne.w	10582 <__udivmoddi4+0x116>
   1047c:	428a      	cmp	r2, r1
   1047e:	4615      	mov	r5, r2
   10480:	d945      	bls.n	1050e <__udivmoddi4+0xa2>
   10482:	fab2 f282 	clz	r2, r2
   10486:	b14a      	cbz	r2, 1049c <__udivmoddi4+0x30>
   10488:	f1c2 0720 	rsb	r7, r2, #32
   1048c:	fa01 f302 	lsl.w	r3, r1, r2
   10490:	4095      	lsls	r5, r2
   10492:	4094      	lsls	r4, r2
   10494:	fa20 f707 	lsr.w	r7, r0, r7
   10498:	ea47 0903 	orr.w	r9, r7, r3
   1049c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
   104a0:	0c23      	lsrs	r3, r4, #16
   104a2:	fa1f f885 	uxth.w	r8, r5
   104a6:	fbb9 fcfe 	udiv	ip, r9, lr
   104aa:	fb0e 991c 	mls	r9, lr, ip, r9
   104ae:	fb0c f108 	mul.w	r1, ip, r8
   104b2:	ea43 4309 	orr.w	r3, r3, r9, lsl #16
   104b6:	4299      	cmp	r1, r3
   104b8:	d90a      	bls.n	104d0 <__udivmoddi4+0x64>
   104ba:	18eb      	adds	r3, r5, r3
   104bc:	bf2c      	ite	cs
   104be:	2001      	movcs	r0, #1
   104c0:	2000      	movcc	r0, #0
   104c2:	4299      	cmp	r1, r3
   104c4:	d902      	bls.n	104cc <__udivmoddi4+0x60>
   104c6:	2800      	cmp	r0, #0
   104c8:	f000 811d 	beq.w	10706 <__udivmoddi4+0x29a>
   104cc:	f10c 3cff 	add.w	ip, ip, #4294967295
   104d0:	1a59      	subs	r1, r3, r1
   104d2:	b2a3      	uxth	r3, r4
   104d4:	fbb1 f0fe 	udiv	r0, r1, lr
   104d8:	fb0e 1110 	mls	r1, lr, r0, r1
   104dc:	fb00 f808 	mul.w	r8, r0, r8
   104e0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
   104e4:	45a0      	cmp	r8, r4
   104e6:	d905      	bls.n	104f4 <__udivmoddi4+0x88>
   104e8:	192c      	adds	r4, r5, r4
   104ea:	d202      	bcs.n	104f2 <__udivmoddi4+0x86>
   104ec:	45a0      	cmp	r8, r4
   104ee:	f200 810e 	bhi.w	1070e <__udivmoddi4+0x2a2>
   104f2:	3801      	subs	r0, #1
   104f4:	eba4 0408 	sub.w	r4, r4, r8
   104f8:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
   104fc:	2700      	movs	r7, #0
   104fe:	b11e      	cbz	r6, 10508 <__udivmoddi4+0x9c>
   10500:	40d4      	lsrs	r4, r2
   10502:	2300      	movs	r3, #0
   10504:	e9c6 4300 	strd	r4, r3, [r6]
   10508:	4639      	mov	r1, r7
   1050a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1050e:	2a00      	cmp	r2, #0
   10510:	d051      	beq.n	105b6 <__udivmoddi4+0x14a>
   10512:	fab2 f282 	clz	r2, r2
   10516:	2a00      	cmp	r2, #0
   10518:	f040 80af 	bne.w	1067a <__udivmoddi4+0x20e>
   1051c:	1b49      	subs	r1, r1, r5
   1051e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
   10522:	fa1f f885 	uxth.w	r8, r5
   10526:	2701      	movs	r7, #1
   10528:	0c23      	lsrs	r3, r4, #16
   1052a:	fbb1 fcfe 	udiv	ip, r1, lr
   1052e:	fb0e 111c 	mls	r1, lr, ip, r1
   10532:	fb08 f00c 	mul.w	r0, r8, ip
   10536:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
   1053a:	4298      	cmp	r0, r3
   1053c:	d90a      	bls.n	10554 <__udivmoddi4+0xe8>
   1053e:	18eb      	adds	r3, r5, r3
   10540:	bf2c      	ite	cs
   10542:	2101      	movcs	r1, #1
   10544:	2100      	movcc	r1, #0
   10546:	4298      	cmp	r0, r3
   10548:	d902      	bls.n	10550 <__udivmoddi4+0xe4>
   1054a:	2900      	cmp	r1, #0
   1054c:	f000 80d7 	beq.w	106fe <__udivmoddi4+0x292>
   10550:	f10c 3cff 	add.w	ip, ip, #4294967295
   10554:	1a19      	subs	r1, r3, r0
   10556:	b2a3      	uxth	r3, r4
   10558:	fbb1 f0fe 	udiv	r0, r1, lr
   1055c:	fb0e 1110 	mls	r1, lr, r0, r1
   10560:	fb08 f800 	mul.w	r8, r8, r0
   10564:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
   10568:	45a0      	cmp	r8, r4
   1056a:	d905      	bls.n	10578 <__udivmoddi4+0x10c>
   1056c:	192c      	adds	r4, r5, r4
   1056e:	d202      	bcs.n	10576 <__udivmoddi4+0x10a>
   10570:	45a0      	cmp	r8, r4
   10572:	f200 80c1 	bhi.w	106f8 <__udivmoddi4+0x28c>
   10576:	3801      	subs	r0, #1
   10578:	eba4 0408 	sub.w	r4, r4, r8
   1057c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
   10580:	e7bd      	b.n	104fe <__udivmoddi4+0x92>
   10582:	428b      	cmp	r3, r1
   10584:	d908      	bls.n	10598 <__udivmoddi4+0x12c>
   10586:	2e00      	cmp	r6, #0
   10588:	d074      	beq.n	10674 <__udivmoddi4+0x208>
   1058a:	2700      	movs	r7, #0
   1058c:	e9c6 0100 	strd	r0, r1, [r6]
   10590:	4638      	mov	r0, r7
   10592:	4639      	mov	r1, r7
   10594:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   10598:	fab3 f783 	clz	r7, r3
   1059c:	b967      	cbnz	r7, 105b8 <__udivmoddi4+0x14c>
   1059e:	428b      	cmp	r3, r1
   105a0:	f0c0 80a4 	bcc.w	106ec <__udivmoddi4+0x280>
   105a4:	4282      	cmp	r2, r0
   105a6:	f240 80a1 	bls.w	106ec <__udivmoddi4+0x280>
   105aa:	4638      	mov	r0, r7
   105ac:	2e00      	cmp	r6, #0
   105ae:	d0ab      	beq.n	10508 <__udivmoddi4+0x9c>
   105b0:	e9c6 4900 	strd	r4, r9, [r6]
   105b4:	e7a8      	b.n	10508 <__udivmoddi4+0x9c>
   105b6:	deff      	udf	#255	; 0xff
   105b8:	f1c7 0520 	rsb	r5, r7, #32
   105bc:	40bb      	lsls	r3, r7
   105be:	fa02 fc07 	lsl.w	ip, r2, r7
   105c2:	fa01 f407 	lsl.w	r4, r1, r7
   105c6:	40ea      	lsrs	r2, r5
   105c8:	fa20 f805 	lsr.w	r8, r0, r5
   105cc:	40e9      	lsrs	r1, r5
   105ce:	fa00 fe07 	lsl.w	lr, r0, r7
   105d2:	431a      	orrs	r2, r3
   105d4:	ea48 0404 	orr.w	r4, r8, r4
   105d8:	ea4f 4812 	mov.w	r8, r2, lsr #16
   105dc:	0c20      	lsrs	r0, r4, #16
   105de:	fa1f f982 	uxth.w	r9, r2
   105e2:	fbb1 faf8 	udiv	sl, r1, r8
   105e6:	fb08 111a 	mls	r1, r8, sl, r1
   105ea:	fb0a fb09 	mul.w	fp, sl, r9
   105ee:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
   105f2:	458b      	cmp	fp, r1
   105f4:	d90a      	bls.n	1060c <__udivmoddi4+0x1a0>
   105f6:	1851      	adds	r1, r2, r1
   105f8:	bf2c      	ite	cs
   105fa:	2301      	movcs	r3, #1
   105fc:	2300      	movcc	r3, #0
   105fe:	458b      	cmp	fp, r1
   10600:	d902      	bls.n	10608 <__udivmoddi4+0x19c>
   10602:	2b00      	cmp	r3, #0
   10604:	f000 8088 	beq.w	10718 <__udivmoddi4+0x2ac>
   10608:	f10a 3aff 	add.w	sl, sl, #4294967295
   1060c:	eba1 010b 	sub.w	r1, r1, fp
   10610:	b2a4      	uxth	r4, r4
   10612:	fbb1 f0f8 	udiv	r0, r1, r8
   10616:	fb08 1110 	mls	r1, r8, r0, r1
   1061a:	fb00 f909 	mul.w	r9, r0, r9
   1061e:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
   10622:	4589      	cmp	r9, r1
   10624:	d904      	bls.n	10630 <__udivmoddi4+0x1c4>
   10626:	1851      	adds	r1, r2, r1
   10628:	d201      	bcs.n	1062e <__udivmoddi4+0x1c2>
   1062a:	4589      	cmp	r9, r1
   1062c:	d87b      	bhi.n	10726 <__udivmoddi4+0x2ba>
   1062e:	3801      	subs	r0, #1
   10630:	ea40 400a 	orr.w	r0, r0, sl, lsl #16
   10634:	eba1 0109 	sub.w	r1, r1, r9
   10638:	fba0 890c 	umull	r8, r9, r0, ip
   1063c:	4549      	cmp	r1, r9
   1063e:	4644      	mov	r4, r8
   10640:	464b      	mov	r3, r9
   10642:	d302      	bcc.n	1064a <__udivmoddi4+0x1de>
   10644:	d106      	bne.n	10654 <__udivmoddi4+0x1e8>
   10646:	45c6      	cmp	lr, r8
   10648:	d204      	bcs.n	10654 <__udivmoddi4+0x1e8>
   1064a:	3801      	subs	r0, #1
   1064c:	ebb8 040c 	subs.w	r4, r8, ip
   10650:	eb69 0302 	sbc.w	r3, r9, r2
   10654:	2e00      	cmp	r6, #0
   10656:	d05d      	beq.n	10714 <__udivmoddi4+0x2a8>
   10658:	ebbe 0204 	subs.w	r2, lr, r4
   1065c:	eb61 0103 	sbc.w	r1, r1, r3
   10660:	fa01 f505 	lsl.w	r5, r1, r5
   10664:	fa22 f307 	lsr.w	r3, r2, r7
   10668:	40f9      	lsrs	r1, r7
   1066a:	2700      	movs	r7, #0
   1066c:	431d      	orrs	r5, r3
   1066e:	e9c6 5100 	strd	r5, r1, [r6]
   10672:	e749      	b.n	10508 <__udivmoddi4+0x9c>
   10674:	4637      	mov	r7, r6
   10676:	4630      	mov	r0, r6
   10678:	e746      	b.n	10508 <__udivmoddi4+0x9c>
   1067a:	f1c2 0020 	rsb	r0, r2, #32
   1067e:	4095      	lsls	r5, r2
   10680:	fa01 f702 	lsl.w	r7, r1, r2
   10684:	fa21 f300 	lsr.w	r3, r1, r0
   10688:	ea4f 4e15 	mov.w	lr, r5, lsr #16
   1068c:	fa24 f100 	lsr.w	r1, r4, r0
   10690:	fa1f f885 	uxth.w	r8, r5
   10694:	4094      	lsls	r4, r2
   10696:	4339      	orrs	r1, r7
   10698:	fbb3 f0fe 	udiv	r0, r3, lr
   1069c:	0c0f      	lsrs	r7, r1, #16
   1069e:	fb0e 3310 	mls	r3, lr, r0, r3
   106a2:	fb00 fc08 	mul.w	ip, r0, r8
   106a6:	ea47 4303 	orr.w	r3, r7, r3, lsl #16
   106aa:	459c      	cmp	ip, r3
   106ac:	d907      	bls.n	106be <__udivmoddi4+0x252>
   106ae:	18eb      	adds	r3, r5, r3
   106b0:	bf2c      	ite	cs
   106b2:	2701      	movcs	r7, #1
   106b4:	2700      	movcc	r7, #0
   106b6:	459c      	cmp	ip, r3
   106b8:	d900      	bls.n	106bc <__udivmoddi4+0x250>
   106ba:	b38f      	cbz	r7, 10720 <__udivmoddi4+0x2b4>
   106bc:	3801      	subs	r0, #1
   106be:	eba3 030c 	sub.w	r3, r3, ip
   106c2:	b289      	uxth	r1, r1
   106c4:	fbb3 f7fe 	udiv	r7, r3, lr
   106c8:	fb0e 3317 	mls	r3, lr, r7, r3
   106cc:	fb07 fc08 	mul.w	ip, r7, r8
   106d0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
   106d4:	458c      	cmp	ip, r1
   106d6:	d904      	bls.n	106e2 <__udivmoddi4+0x276>
   106d8:	1869      	adds	r1, r5, r1
   106da:	d201      	bcs.n	106e0 <__udivmoddi4+0x274>
   106dc:	458c      	cmp	ip, r1
   106de:	d825      	bhi.n	1072c <__udivmoddi4+0x2c0>
   106e0:	3f01      	subs	r7, #1
   106e2:	eba1 010c 	sub.w	r1, r1, ip
   106e6:	ea47 4700 	orr.w	r7, r7, r0, lsl #16
   106ea:	e71d      	b.n	10528 <__udivmoddi4+0xbc>
   106ec:	1a84      	subs	r4, r0, r2
   106ee:	eb61 0303 	sbc.w	r3, r1, r3
   106f2:	2001      	movs	r0, #1
   106f4:	4699      	mov	r9, r3
   106f6:	e759      	b.n	105ac <__udivmoddi4+0x140>
   106f8:	3802      	subs	r0, #2
   106fa:	442c      	add	r4, r5
   106fc:	e73c      	b.n	10578 <__udivmoddi4+0x10c>
   106fe:	f1ac 0c02 	sub.w	ip, ip, #2
   10702:	442b      	add	r3, r5
   10704:	e726      	b.n	10554 <__udivmoddi4+0xe8>
   10706:	f1ac 0c02 	sub.w	ip, ip, #2
   1070a:	442b      	add	r3, r5
   1070c:	e6e0      	b.n	104d0 <__udivmoddi4+0x64>
   1070e:	3802      	subs	r0, #2
   10710:	442c      	add	r4, r5
   10712:	e6ef      	b.n	104f4 <__udivmoddi4+0x88>
   10714:	4637      	mov	r7, r6
   10716:	e6f7      	b.n	10508 <__udivmoddi4+0x9c>
   10718:	f1aa 0a02 	sub.w	sl, sl, #2
   1071c:	4411      	add	r1, r2
   1071e:	e775      	b.n	1060c <__udivmoddi4+0x1a0>
   10720:	3802      	subs	r0, #2
   10722:	442b      	add	r3, r5
   10724:	e7cb      	b.n	106be <__udivmoddi4+0x252>
   10726:	3802      	subs	r0, #2
   10728:	4411      	add	r1, r2
   1072a:	e781      	b.n	10630 <__udivmoddi4+0x1c4>
   1072c:	3f02      	subs	r7, #2
   1072e:	4429      	add	r1, r5
   10730:	e7d7      	b.n	106e2 <__udivmoddi4+0x276>
   10732:	bf00      	nop

00010734 <__aeabi_idiv0>:
   10734:	4770      	bx	lr
   10736:	bf00      	nop

00010738 <__gnu_cmse_nonsecure_call>:
   10738:	e92d 4fe0 	stmdb	sp!, {r5, r6, r7, r8, r9, sl, fp, lr}
   1073c:	4627      	mov	r7, r4
   1073e:	46a0      	mov	r8, r4
   10740:	46a1      	mov	r9, r4
   10742:	46a2      	mov	sl, r4
   10744:	46a3      	mov	fp, r4
   10746:	46a4      	mov	ip, r4
   10748:	ed2d 8b10 	vpush	{d8-d15}
   1074c:	f04f 0500 	mov.w	r5, #0
   10750:	ec45 5b18 	vmov	d8, r5, r5
   10754:	ec45 5a19 	vmov	s18, s19, r5, r5
   10758:	ec45 5a1a 	vmov	s20, s21, r5, r5
   1075c:	ec45 5a1b 	vmov	s22, s23, r5, r5
   10760:	ec45 5a1c 	vmov	s24, s25, r5, r5
   10764:	ec45 5a1d 	vmov	s26, s27, r5, r5
   10768:	ec45 5a1e 	vmov	s28, s29, r5, r5
   1076c:	ec45 5a1f 	vmov	s30, s31, r5, r5
   10770:	eef1 5a10 	vmrs	r5, fpscr
   10774:	f64f 7660 	movw	r6, #65376	; 0xff60
   10778:	f6c0 76ff 	movt	r6, #4095	; 0xfff
   1077c:	4035      	ands	r5, r6
   1077e:	eee1 5a10 	vmsr	fpscr, r5
   10782:	f384 8800 	msr	CPSR_f, r4
   10786:	4625      	mov	r5, r4
   10788:	4626      	mov	r6, r4
   1078a:	47a4      	blxns	r4
   1078c:	ecbd 8b10 	vpop	{d8-d15}
   10790:	e8bd 8fe0 	ldmia.w	sp!, {r5, r6, r7, r8, r9, sl, fp, pc}

00010794 <char_out>:

static int char_out(int c, void *ctx_p)
{
	struct out_context *ctx = ctx_p;

	ctx->count++;
   10794:	680b      	ldr	r3, [r1, #0]
   10796:	3301      	adds	r3, #1
   10798:	600b      	str	r3, [r1, #0]
	return _char_out(c);
   1079a:	4b01      	ldr	r3, [pc, #4]	; (107a0 <char_out+0xc>)
   1079c:	681b      	ldr	r3, [r3, #0]
   1079e:	4718      	bx	r3
   107a0:	200013d0 	.word	0x200013d0

000107a4 <_printk_dec_ulong>:
 * @return N/A
 */
static void _printk_dec_ulong(out_func_t out, void *ctx,
			      const unsigned long num, enum pad_type padding,
			      int min_width)
{
   107a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   107a8:	b085      	sub	sp, #20
   107aa:	9c0e      	ldr	r4, [sp, #56]	; 0x38
   107ac:	469b      	mov	fp, r3
   107ae:	2c01      	cmp	r4, #1
   107b0:	bfb8      	it	lt
   107b2:	2401      	movlt	r4, #1
   107b4:	2b01      	cmp	r3, #1
   107b6:	bf0c      	ite	eq
   107b8:	2330      	moveq	r3, #48	; 0x30
   107ba:	2320      	movne	r3, #32
   107bc:	4616      	mov	r6, r2
   107be:	4682      	mov	sl, r0
   107c0:	4688      	mov	r8, r1
   107c2:	2501      	movs	r5, #1
   107c4:	270a      	movs	r7, #10
   107c6:	2200      	movs	r2, #0
   107c8:	f8df 906c 	ldr.w	r9, [pc, #108]	; 10838 <_printk_dec_ulong+0x94>
   107cc:	9302      	str	r3, [sp, #8]
	if (min_width <= 0) {
		min_width = 1;
	}

	while (pos >= 10) {
		if (found_largest_digit != 0 || remainder >= pos) {
   107ce:	fbb6 f3f9 	udiv	r3, r6, r9
   107d2:	9301      	str	r3, [sp, #4]
   107d4:	b90a      	cbnz	r2, 107da <_printk_dec_ulong+0x36>
   107d6:	45b1      	cmp	r9, r6
   107d8:	d81c      	bhi.n	10814 <_printk_dec_ulong+0x70>
			found_largest_digit = 1;
			out((int)(remainder / pos + 48), ctx);
   107da:	9b01      	ldr	r3, [sp, #4]
   107dc:	4641      	mov	r1, r8
   107de:	f103 0030 	add.w	r0, r3, #48	; 0x30
   107e2:	47d0      	blx	sl
			found_largest_digit = 1;
   107e4:	2201      	movs	r2, #1
			digits++;
   107e6:	3501      	adds	r5, #1
				&& padding < PAD_SPACE_AFTER) {
			out((int)(padding == PAD_ZERO_BEFORE ? '0' : ' '), ctx);
			digits++;
		}
		remaining--;
		remainder %= pos;
   107e8:	9b01      	ldr	r3, [sp, #4]
		remaining--;
   107ea:	3f01      	subs	r7, #1
		remainder %= pos;
   107ec:	fb09 6613 	mls	r6, r9, r3, r6
		pos /= 10;
   107f0:	230a      	movs	r3, #10
	while (pos >= 10) {
   107f2:	2f01      	cmp	r7, #1
		pos /= 10;
   107f4:	fbb9 f9f3 	udiv	r9, r9, r3
	while (pos >= 10) {
   107f8:	d1e9      	bne.n	107ce <_printk_dec_ulong+0x2a>
	}
	out((int)(remainder + 48), ctx);
   107fa:	4641      	mov	r1, r8
   107fc:	f106 0030 	add.w	r0, r6, #48	; 0x30
   10800:	47d0      	blx	sl

	if (padding == PAD_SPACE_AFTER) {
   10802:	f1bb 0f03 	cmp.w	fp, #3
   10806:	d102      	bne.n	1080e <_printk_dec_ulong+0x6a>
		remaining = min_width - digits;
   10808:	1b64      	subs	r4, r4, r5
		while (remaining-- > 0) {
   1080a:	2c00      	cmp	r4, #0
   1080c:	dc0e      	bgt.n	1082c <_printk_dec_ulong+0x88>
			out(' ', ctx);
		}
	}
}
   1080e:	b005      	add	sp, #20
   10810:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		} else if (remaining <= min_width
   10814:	42bc      	cmp	r4, r7
   10816:	dbe7      	blt.n	107e8 <_printk_dec_ulong+0x44>
				&& padding < PAD_SPACE_AFTER) {
   10818:	f1bb 0f02 	cmp.w	fp, #2
   1081c:	d8e4      	bhi.n	107e8 <_printk_dec_ulong+0x44>
			out((int)(padding == PAD_ZERO_BEFORE ? '0' : ' '), ctx);
   1081e:	4641      	mov	r1, r8
   10820:	9802      	ldr	r0, [sp, #8]
   10822:	9203      	str	r2, [sp, #12]
			digits++;
   10824:	3501      	adds	r5, #1
			out((int)(padding == PAD_ZERO_BEFORE ? '0' : ' '), ctx);
   10826:	47d0      	blx	sl
			digits++;
   10828:	9a03      	ldr	r2, [sp, #12]
   1082a:	e7dd      	b.n	107e8 <_printk_dec_ulong+0x44>
			out(' ', ctx);
   1082c:	4641      	mov	r1, r8
   1082e:	2020      	movs	r0, #32
   10830:	47d0      	blx	sl
   10832:	3c01      	subs	r4, #1
   10834:	e7e9      	b.n	1080a <_printk_dec_ulong+0x66>
   10836:	bf00      	nop
   10838:	3b9aca00 	.word	0x3b9aca00

0001083c <vprintk>:
	struct out_context ctx = { 0 };
   1083c:	2300      	movs	r3, #0
{
   1083e:	b507      	push	{r0, r1, r2, lr}
	z_vprintk(char_out, &ctx, fmt, ap);
   10840:	4602      	mov	r2, r0
	struct out_context ctx = { 0 };
   10842:	9301      	str	r3, [sp, #4]
	z_vprintk(char_out, &ctx, fmt, ap);
   10844:	4803      	ldr	r0, [pc, #12]	; (10854 <vprintk+0x18>)
   10846:	460b      	mov	r3, r1
   10848:	a901      	add	r1, sp, #4
   1084a:	f002 ff24 	bl	13696 <z_vprintk>
}
   1084e:	b003      	add	sp, #12
   10850:	f85d fb04 	ldr.w	pc, [sp], #4
   10854:	00010795 	.word	0x00010795

00010858 <nordicsemi_nrf91_init>:
		:
		: "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	unsigned int tmp;

	__asm__ volatile(
   10858:	f04f 0220 	mov.w	r2, #32
   1085c:	f3ef 8311 	mrs	r3, BASEPRI
   10860:	f382 8811 	msr	BASEPRI, r2
   10864:	f3bf 8f6f 	isb	sy

	key = irq_lock();

#ifdef CONFIG_NRF_ENABLE_ICACHE
	/* Enable the instruction cache */
	NRF_NVMC->ICACHECNF = NVMC_ICACHECNF_CACHEEN_Msk;
   10868:	2101      	movs	r1, #1
   1086a:	4a04      	ldr	r2, [pc, #16]	; (1087c <nordicsemi_nrf91_init+0x24>)
   1086c:	f8c2 1540 	str.w	r1, [r2, #1344]	; 0x540
	__asm__ volatile(
		"cpsie i;"
		"isb"
		: : : "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile(
   10870:	f383 8811 	msr	BASEPRI, r3
   10874:	f3bf 8f6f 	isb	sy
	NMI_INIT();

	irq_unlock(key);

	return 0;
}
   10878:	2000      	movs	r0, #0
   1087a:	4770      	bx	lr
   1087c:	50039000 	.word	0x50039000

00010880 <nrf_power_clock_isr>:
	}
#endif
}

void nrf_power_clock_isr(void *arg)
{
   10880:	b508      	push	{r3, lr}
#endif
}

NRF_STATIC_INLINE bool nrf_clock_event_check(NRF_CLOCK_Type const * p_reg, nrf_clock_event_t event)
{
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
   10882:	4b11      	ldr	r3, [pc, #68]	; (108c8 <nrf_power_clock_isr+0x48>)
   10884:	681a      	ldr	r2, [r3, #0]
	bool ret = nrf_clock_event_check(NRF_CLOCK, evt) &&
   10886:	b16a      	cbz	r2, 108a4 <nrf_power_clock_isr+0x24>
    return p_reg->INTENSET & mask;
   10888:	f04f 2250 	mov.w	r2, #1342197760	; 0x50005000
   1088c:	f8d2 2304 	ldr.w	r2, [r2, #772]	; 0x304
	if (ret) {
   10890:	07d1      	lsls	r1, r2, #31
   10892:	d507      	bpl.n	108a4 <nrf_power_clock_isr+0x24>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   10894:	2200      	movs	r2, #0
	struct device *dev = DEVICE_GET(clock_nrf);

	if (clock_event_check_and_clean(NRF_CLOCK_EVENT_HFCLKSTARTED,
					NRF_CLOCK_INT_HF_STARTED_MASK)) {
		struct nrf_clock_control_sub_data *data =
				get_sub_data(dev, CLOCK_CONTROL_NRF_TYPE_HFCLK);
   10896:	480d      	ldr	r0, [pc, #52]	; (108cc <nrf_power_clock_isr+0x4c>)
   10898:	601a      	str	r2, [r3, #0]

		/* Check needed due to anomaly 201:
		 * HFCLKSTARTED may be generated twice.
		 */
		if (!data->started) {
   1089a:	6883      	ldr	r3, [r0, #8]
   1089c:	7a59      	ldrb	r1, [r3, #9]
   1089e:	b909      	cbnz	r1, 108a4 <nrf_power_clock_isr+0x24>
			clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_HFCLK);
   108a0:	f003 f8cc 	bl	13a3c <clkstarted_handle>
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
   108a4:	4b0a      	ldr	r3, [pc, #40]	; (108d0 <nrf_power_clock_isr+0x50>)
   108a6:	681a      	ldr	r2, [r3, #0]
	bool ret = nrf_clock_event_check(NRF_CLOCK, evt) &&
   108a8:	b16a      	cbz	r2, 108c6 <nrf_power_clock_isr+0x46>
    return p_reg->INTENSET & mask;
   108aa:	f04f 2250 	mov.w	r2, #1342197760	; 0x50005000
   108ae:	f8d2 2304 	ldr.w	r2, [r2, #772]	; 0x304
	if (ret) {
   108b2:	0792      	lsls	r2, r2, #30
   108b4:	d507      	bpl.n	108c6 <nrf_power_clock_isr+0x46>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   108b6:	2200      	movs	r2, #0
					NRF_CLOCK_INT_LF_STARTED_MASK)) {
		if (IS_ENABLED(
			CONFIG_CLOCK_CONTROL_NRF_K32SRC_RC_CALIBRATION)) {
			z_nrf_clock_calibration_lfclk_started(dev);
		}
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_LFCLK);
   108b8:	2101      	movs	r1, #1
   108ba:	601a      	str	r2, [r3, #0]
   108bc:	4803      	ldr	r0, [pc, #12]	; (108cc <nrf_power_clock_isr+0x4c>)
	usb_power_isr();

	if (IS_ENABLED(CONFIG_CLOCK_CONTROL_NRF_K32SRC_RC_CALIBRATION)) {
		z_nrf_clock_calibration_isr();
	}
}
   108be:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_LFCLK);
   108c2:	f003 b8bb 	b.w	13a3c <clkstarted_handle>
}
   108c6:	bd08      	pop	{r3, pc}
   108c8:	50005100 	.word	0x50005100
   108cc:	20001470 	.word	0x20001470
   108d0:	50005104 	.word	0x50005104

000108d4 <rtc1_nrf_isr>:
 * symbol.
 */
void rtc1_nrf_isr(void *arg)
{
	ARG_UNUSED(arg);
	RTC->EVENTS_COMPARE[0] = 0;
   108d4:	2200      	movs	r2, #0
   108d6:	4b0d      	ldr	r3, [pc, #52]	; (1090c <rtc1_nrf_isr+0x38>)
   108d8:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
	__asm__ volatile(
   108dc:	f04f 0220 	mov.w	r2, #32
   108e0:	f3ef 8111 	mrs	r1, BASEPRI
   108e4:	f382 8811 	msr	BASEPRI, r2
   108e8:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&lock);
	u32_t t = counter();
	u32_t dticks = counter_sub(t, last_count) / CYC_PER_TICK;
   108ec:	4a08      	ldr	r2, [pc, #32]	; (10910 <rtc1_nrf_isr+0x3c>)
#endif
}

NRF_STATIC_INLINE uint32_t nrf_rtc_counter_get(NRF_RTC_Type const * p_reg)
{
     return p_reg->COUNTER;
   108ee:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
   108f2:	6813      	ldr	r3, [r2, #0]
	return (a - b) & COUNTER_MAX;
   108f4:	1ac0      	subs	r0, r0, r3
   108f6:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000

	last_count += dticks * CYC_PER_TICK;
   108fa:	4403      	add	r3, r0
   108fc:	6013      	str	r3, [r2, #0]
	__asm__ volatile(
   108fe:	f381 8811 	msr	BASEPRI, r1
   10902:	f3bf 8f6f 	isb	sy
		}
		set_comparator(next);
	}

	k_spin_unlock(&lock, key);
	z_clock_announce(IS_ENABLED(CONFIG_TICKLESS_KERNEL) ? dticks : 1);
   10906:	f001 bf19 	b.w	1273c <z_clock_announce>
   1090a:	bf00      	nop
   1090c:	50015000 	.word	0x50015000
   10910:	20000020 	.word	0x20000020

00010914 <z_clock_driver_init>:
}

int z_clock_driver_init(struct device *device)
{
   10914:	b570      	push	{r4, r5, r6, lr}
	if (z_syscall_trap()) {
		return (struct device *) arch_syscall_invoke1(*(uintptr_t *)&name, K_SYSCALL_DEVICE_GET_BINDING);
	}
#endif
	compiler_barrier();
	return z_impl_device_get_binding(name);
   10916:	4815      	ldr	r0, [pc, #84]	; (1096c <z_clock_driver_init+0x58>)
   10918:	f001 f954 	bl	11bc4 <z_impl_device_get_binding>
	struct device *clock;

	ARG_UNUSED(device);

	clock = device_get_binding(DT_INST_0_NORDIC_NRF_CLOCK_LABEL);
	if (!clock) {
   1091c:	b310      	cbz	r0, 10964 <z_clock_driver_init+0x50>
				   clock_control_subsys_t sys)
{
	const struct clock_control_driver_api *api =
		(const struct clock_control_driver_api *)dev->driver_api;

	return api->on(dev, sys);
   1091e:	6843      	ldr	r3, [r0, #4]
   10920:	2101      	movs	r1, #1
   10922:	681b      	ldr	r3, [r3, #0]
   10924:	4798      	blx	r3
}

NRF_STATIC_INLINE void nrf_rtc_prescaler_set(NRF_RTC_Type * p_reg, uint32_t val)
{
    NRFX_ASSERT(val <= (RTC_PRESCALER_PRESCALER_Msk >> RTC_PRESCALER_PRESCALER_Pos));
    p_reg->PRESCALER = val;
   10926:	2400      	movs	r4, #0
    p_reg->CC[ch] = cc_val;
   10928:	2601      	movs	r6, #1
    p_reg->INTENSET = mask;
   1092a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   1092e:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
    p_reg->PRESCALER = val;
   10932:	4d0f      	ldr	r5, [pc, #60]	; (10970 <z_clock_driver_init+0x5c>)

	/* Clear the event flag and possible pending interrupt */
	nrf_rtc_event_clear(RTC, NRF_RTC_EVENT_COMPARE_0);
	NVIC_ClearPendingIRQ(RTC1_IRQn);

	IRQ_CONNECT(RTC1_IRQn, 1, rtc1_nrf_isr, 0, 0);
   10934:	4631      	mov	r1, r6
   10936:	f8c5 4508 	str.w	r4, [r5, #1288]	; 0x508
    p_reg->CC[ch] = cc_val;
   1093a:	f8c5 6540 	str.w	r6, [r5, #1344]	; 0x540
    p_reg->INTENSET = mask;
   1093e:	f8c5 3304 	str.w	r3, [r5, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   10942:	4b0c      	ldr	r3, [pc, #48]	; (10974 <z_clock_driver_init+0x60>)
   10944:	2015      	movs	r0, #21
   10946:	601c      	str	r4, [r3, #0]
   10948:	4b0b      	ldr	r3, [pc, #44]	; (10978 <z_clock_driver_init+0x64>)
   1094a:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
   1094e:	4622      	mov	r2, r4
   10950:	f000 fbdc 	bl	1110c <z_arm_irq_priority_set>
	irq_enable(RTC1_IRQn);
   10954:	2015      	movs	r0, #21
   10956:	f000 fbc9 	bl	110ec <arch_irq_enable>

	if (!IS_ENABLED(CONFIG_TICKLESS_KERNEL)) {
		set_comparator(counter() + CYC_PER_TICK);
	}

	return 0;
   1095a:	4620      	mov	r0, r4
    return (uint32_t)p_reg + task;
}

NRF_STATIC_INLINE void nrf_rtc_task_trigger(NRF_RTC_Type * p_reg, nrf_rtc_task_t task)
{
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
   1095c:	4b07      	ldr	r3, [pc, #28]	; (1097c <z_clock_driver_init+0x68>)
   1095e:	601e      	str	r6, [r3, #0]
   10960:	602e      	str	r6, [r5, #0]
}
   10962:	bd70      	pop	{r4, r5, r6, pc}
		return -1;
   10964:	f04f 30ff 	mov.w	r0, #4294967295
   10968:	e7fb      	b.n	10962 <z_clock_driver_init+0x4e>
   1096a:	bf00      	nop
   1096c:	00014714 	.word	0x00014714
   10970:	50015000 	.word	0x50015000
   10974:	50015140 	.word	0x50015140
   10978:	e000e100 	.word	0xe000e100
   1097c:	50015008 	.word	0x50015008

00010980 <z_clock_set_timeout>:

void z_clock_set_timeout(s32_t ticks, bool idle)
{
   10980:	b570      	push	{r4, r5, r6, lr}
	ARG_UNUSED(idle);

#ifdef CONFIG_TICKLESS_KERNEL
	ticks = (ticks == K_FOREVER) ? MAX_TICKS : ticks;
   10982:	4c25      	ldr	r4, [pc, #148]	; (10a18 <z_clock_set_timeout+0x98>)
   10984:	f1b0 3fff 	cmp.w	r0, #4294967295
   10988:	bf08      	it	eq
   1098a:	4620      	moveq	r0, r4
	__asm__ volatile(
   1098c:	f04f 0320 	mov.w	r3, #32
   10990:	f3ef 8511 	mrs	r5, BASEPRI
   10994:	f383 8811 	msr	BASEPRI, r3
   10998:	f3bf 8f6f 	isb	sy
     return p_reg->COUNTER;
   1099c:	4b1f      	ldr	r3, [pc, #124]	; (10a1c <z_clock_set_timeout+0x9c>)
   1099e:	f8d3 1504 	ldr.w	r1, [r3, #1284]	; 0x504
	ticks = MAX(MIN(ticks - 1, (s32_t)MAX_TICKS), 0);

	k_spinlock_key_t key = k_spin_lock(&lock);
	u32_t cyc, dt, t = counter();
	u32_t unannounced = counter_sub(t, last_count);
   109a2:	4b1f      	ldr	r3, [pc, #124]	; (10a20 <z_clock_set_timeout+0xa0>)
   109a4:	681b      	ldr	r3, [r3, #0]
	return (a - b) & COUNTER_MAX;
   109a6:	1aca      	subs	r2, r1, r3
   109a8:	f022 467f 	bic.w	r6, r2, #4278190080	; 0xff000000
	/* If we haven't announced for more than half the 24-bit wrap
	 * duration, then force an announce to avoid loss of a wrap
	 * event.  This can happen if new timeouts keep being set
	 * before the existing one triggers the interrupt.
	 */
	if (unannounced >= COUNTER_HALF_SPAN) {
   109ac:	0212      	lsls	r2, r2, #8
   109ae:	d41a      	bmi.n	109e6 <z_clock_set_timeout+0x66>
	ticks = MAX(MIN(ticks - 1, (s32_t)MAX_TICKS), 0);
   109b0:	1e42      	subs	r2, r0, #1
   109b2:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
   109b6:	42a2      	cmp	r2, r4
   109b8:	bfa8      	it	ge
   109ba:	4622      	movge	r2, r4
	}

	/* Get the cycles from last_count to the tick boundary after
	 * the requested ticks have passed starting now.
	 */
	cyc = ticks * CYC_PER_TICK + 1 + unannounced;
   109bc:	1c70      	adds	r0, r6, #1
   109be:	4410      	add	r0, r2
	 */
	if (cyc > MAX_CYCLES) {
		cyc = MAX_CYCLES;
	}

	cyc += last_count;
   109c0:	42a0      	cmp	r0, r4
   109c2:	bf94      	ite	ls
   109c4:	1818      	addls	r0, r3, r0
   109c6:	1918      	addhi	r0, r3, r4
	return (a - b) & COUNTER_MAX;
   109c8:	1a41      	subs	r1, r0, r1
   109ca:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
   109ce:	4a13      	ldr	r2, [pc, #76]	; (10a1c <z_clock_set_timeout+0x9c>)
   109d0:	f020 437f 	bic.w	r3, r0, #4278190080	; 0xff000000
	 * least on nRF52.  Some experimentation on nrf52840 shows
	 * that you need to be early by about 400 processor cycles
	 * (about 1/5th of a RTC cycle) in order to reliably get the
	 * interrupt.  The docs say two cycles, they mean two cycles.
	 */
	if (counter_sub(cyc, t) > 2) {
   109d4:	2902      	cmp	r1, #2
    p_reg->CC[ch] = cc_val;
   109d6:	f8c2 3540 	str.w	r3, [r2, #1344]	; 0x540
   109da:	d906      	bls.n	109ea <z_clock_set_timeout+0x6a>
	__asm__ volatile(
   109dc:	f385 8811 	msr	BASEPRI, r5
   109e0:	f3bf 8f6f 	isb	sy
	}
#endif

	k_spin_unlock(&lock, key);
#endif /* CONFIG_TICKLESS_KERNEL */
}
   109e4:	bd70      	pop	{r4, r5, r6, pc}
		ticks = 0;
   109e6:	2200      	movs	r2, #0
   109e8:	e7e8      	b.n	109bc <z_clock_set_timeout+0x3c>
     return p_reg->COUNTER;
   109ea:	f8d2 3504 	ldr.w	r3, [r2, #1284]	; 0x504
		if (dt == 0 || dt > 0x7fffff) {
   109ee:	490d      	ldr	r1, [pc, #52]	; (10a24 <z_clock_set_timeout+0xa4>)
	return (a - b) & COUNTER_MAX;
   109f0:	1ac3      	subs	r3, r0, r3
   109f2:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
		if (dt == 0 || dt > 0x7fffff) {
   109f6:	1e5c      	subs	r4, r3, #1
   109f8:	428c      	cmp	r4, r1
   109fa:	d905      	bls.n	10a08 <z_clock_set_timeout+0x88>
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   109fc:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
   10a00:	4b09      	ldr	r3, [pc, #36]	; (10a28 <z_clock_set_timeout+0xa8>)
   10a02:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
   10a06:	e7e9      	b.n	109dc <z_clock_set_timeout+0x5c>
		} else if (dt == 1) {
   10a08:	2b01      	cmp	r3, #1
			set_comparator(cyc + 2);
   10a0a:	bf02      	ittt	eq
   10a0c:	3002      	addeq	r0, #2
	nrf_rtc_cc_set(RTC, 0, cyc & COUNTER_MAX);
   10a0e:	f020 407f 	biceq.w	r0, r0, #4278190080	; 0xff000000
    p_reg->CC[ch] = cc_val;
   10a12:	f8c2 0540 	streq.w	r0, [r2, #1344]	; 0x540
   10a16:	e7e1      	b.n	109dc <z_clock_set_timeout+0x5c>
   10a18:	00fffffe 	.word	0x00fffffe
   10a1c:	50015000 	.word	0x50015000
   10a20:	20000020 	.word	0x20000020
   10a24:	007ffffe 	.word	0x007ffffe
   10a28:	e000e100 	.word	0xe000e100

00010a2c <z_clock_elapsed>:
	__asm__ volatile(
   10a2c:	f04f 0220 	mov.w	r2, #32
   10a30:	f3ef 8311 	mrs	r3, BASEPRI
   10a34:	f382 8811 	msr	BASEPRI, r2
   10a38:	f3bf 8f6f 	isb	sy
     return p_reg->COUNTER;
   10a3c:	4a06      	ldr	r2, [pc, #24]	; (10a58 <z_clock_elapsed+0x2c>)
   10a3e:	f8d2 0504 	ldr.w	r0, [r2, #1284]	; 0x504
	if (!IS_ENABLED(CONFIG_TICKLESS_KERNEL)) {
		return 0;
	}

	k_spinlock_key_t key = k_spin_lock(&lock);
	u32_t ret = counter_sub(counter(), last_count) / CYC_PER_TICK;
   10a42:	4a06      	ldr	r2, [pc, #24]	; (10a5c <z_clock_elapsed+0x30>)
	return (a - b) & COUNTER_MAX;
   10a44:	6812      	ldr	r2, [r2, #0]
   10a46:	1a80      	subs	r0, r0, r2
   10a48:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
	__asm__ volatile(
   10a4c:	f383 8811 	msr	BASEPRI, r3
   10a50:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&lock, key);
	return ret;
}
   10a54:	4770      	bx	lr
   10a56:	bf00      	nop
   10a58:	50015000 	.word	0x50015000
   10a5c:	20000020 	.word	0x20000020

00010a60 <config_regions>:
}
#endif /* CONFIG_ARM_FIRMWARE_HAS_SECURE_ENTRY_FUNCS */


static void config_regions(bool ram, size_t start, size_t end, u32_t perm)
{
   10a60:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	const size_t region_size = ram ? RAM_SECURE_ATTRIBUTION_REGION_SIZE
					: FLASH_SECURE_ATTRIBUTION_REGION_SIZE;
   10a62:	2800      	cmp	r0, #0
{
   10a64:	461c      	mov	r4, r3

	for (size_t i = start; i < end; i++) {
   10a66:	460d      	mov	r5, r1
					: FLASH_SECURE_ATTRIBUTION_REGION_SIZE;
   10a68:	bf14      	ite	ne
   10a6a:	f44f 5300 	movne.w	r3, #8192	; 0x2000
   10a6e:	f44f 4300 	moveq.w	r3, #32768	; 0x8000
	for (size_t i = start; i < end; i++) {
   10a72:	4e20      	ldr	r6, [pc, #128]	; (10af4 <config_regions+0x94>)
   10a74:	4295      	cmp	r5, r2
   10a76:	d332      	bcc.n	10ade <config_regions+0x7e>
		} else {
			NRF_SPU->FLASHREGION[i].PERM = perm;
		}
	}

	PRINT("%02u %02u 0x%05x 0x%05x \t", start, end - 1,
   10a78:	fb02 f003 	mul.w	r0, r2, r3
   10a7c:	3a01      	subs	r2, #1
   10a7e:	9000      	str	r0, [sp, #0]
   10a80:	434b      	muls	r3, r1
   10a82:	481d      	ldr	r0, [pc, #116]	; (10af8 <config_regions+0x98>)
   10a84:	f002 ff77 	bl	13976 <printk>
				region_size * start, region_size * end);
	PRINT("%s", perm & (ram ? SRAM_SECURE : FLASH_SECURE) ? "Secure\t\t" :
   10a88:	4b1c      	ldr	r3, [pc, #112]	; (10afc <config_regions+0x9c>)
   10a8a:	f014 0f10 	tst.w	r4, #16
   10a8e:	491c      	ldr	r1, [pc, #112]	; (10b00 <config_regions+0xa0>)
   10a90:	481c      	ldr	r0, [pc, #112]	; (10b04 <config_regions+0xa4>)
   10a92:	bf08      	it	eq
   10a94:	4619      	moveq	r1, r3
   10a96:	f002 ff6e 	bl	13976 <printk>
								"Non-Secure\t");
	PRINT("%c", perm & (ram ? SRAM_READ : FLASH_READ)  ? 'r' : '-');
   10a9a:	f014 0f04 	tst.w	r4, #4
   10a9e:	bf14      	ite	ne
   10aa0:	2172      	movne	r1, #114	; 0x72
   10aa2:	212d      	moveq	r1, #45	; 0x2d
   10aa4:	4818      	ldr	r0, [pc, #96]	; (10b08 <config_regions+0xa8>)
   10aa6:	f002 ff66 	bl	13976 <printk>
	PRINT("%c", perm & (ram ? SRAM_WRITE : FLASH_WRITE) ? 'w' : '-');
   10aaa:	f014 0f02 	tst.w	r4, #2
   10aae:	bf14      	ite	ne
   10ab0:	2177      	movne	r1, #119	; 0x77
   10ab2:	212d      	moveq	r1, #45	; 0x2d
   10ab4:	4814      	ldr	r0, [pc, #80]	; (10b08 <config_regions+0xa8>)
   10ab6:	f002 ff5e 	bl	13976 <printk>
	PRINT("%c", perm & (ram ? SRAM_EXEC : FLASH_EXEC)  ? 'x' : '-');
   10aba:	f014 0f01 	tst.w	r4, #1
   10abe:	bf0c      	ite	eq
   10ac0:	212d      	moveq	r1, #45	; 0x2d
   10ac2:	2178      	movne	r1, #120	; 0x78
   10ac4:	4810      	ldr	r0, [pc, #64]	; (10b08 <config_regions+0xa8>)
   10ac6:	f002 ff56 	bl	13976 <printk>
	PRINT("%c", perm & (ram ? SRAM_LOCK : FLASH_LOCK)  ? 'l' : '-');
   10aca:	216c      	movs	r1, #108	; 0x6c
   10acc:	480e      	ldr	r0, [pc, #56]	; (10b08 <config_regions+0xa8>)
   10ace:	f002 ff52 	bl	13976 <printk>
	PRINT("\n");
   10ad2:	480e      	ldr	r0, [pc, #56]	; (10b0c <config_regions+0xac>)
}
   10ad4:	b003      	add	sp, #12
   10ad6:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	PRINT("\n");
   10ada:	f002 bf4c 	b.w	13976 <printk>
		if (ram) {
   10ade:	b128      	cbz	r0, 10aec <config_regions+0x8c>
			NRF_SPU->RAMREGION[i].PERM = perm;
   10ae0:	f505 77e0 	add.w	r7, r5, #448	; 0x1c0
			NRF_SPU->FLASHREGION[i].PERM = perm;
   10ae4:	f846 4027 	str.w	r4, [r6, r7, lsl #2]
	for (size_t i = start; i < end; i++) {
   10ae8:	3501      	adds	r5, #1
   10aea:	e7c3      	b.n	10a74 <config_regions+0x14>
			NRF_SPU->FLASHREGION[i].PERM = perm;
   10aec:	f505 77c0 	add.w	r7, r5, #384	; 0x180
   10af0:	e7f8      	b.n	10ae4 <config_regions+0x84>
   10af2:	bf00      	nop
   10af4:	50003000 	.word	0x50003000
   10af8:	00014573 	.word	0x00014573
   10afc:	00014567 	.word	0x00014567
   10b00:	0001455e 	.word	0x0001455e
   10b04:	0001467d 	.word	0x0001467d
   10b08:	0001458d 	.word	0x0001458d
   10b0c:	000148c9 	.word	0x000148c9

00010b10 <spm_config_peripheral.constprop.1>:
		     SPU_PERIPHID_PERM_SECUREMAPPING_Split;

	return present && (usel || split);
}

static int spm_config_peripheral(u8_t id, bool dma_present)
   10b10:	b508      	push	{r3, lr}
	 * Assign DMA capabilities and lock down the attribution.
	 *
	 * Note: the function assumes that the peripheral ID matches
	 * the IRQ line.
	 */
	NVIC_DisableIRQ(id);
   10b12:	b243      	sxtb	r3, r0
  if ((int32_t)(IRQn) >= 0)
   10b14:	2b00      	cmp	r3, #0
   10b16:	db0c      	blt.n	10b32 <spm_config_peripheral.constprop.1+0x22>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   10b18:	2201      	movs	r2, #1
   10b1a:	f000 011f 	and.w	r1, r0, #31
   10b1e:	408a      	lsls	r2, r1
   10b20:	095b      	lsrs	r3, r3, #5
   10b22:	4910      	ldr	r1, [pc, #64]	; (10b64 <spm_config_peripheral.constprop.1+0x54>)
   10b24:	3320      	adds	r3, #32
   10b26:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
   10b2a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   10b2e:	f3bf 8f6f 	isb	sy
	const u32_t perm = NRF_SPU->PERIPHID[id].PERM;
   10b32:	0083      	lsls	r3, r0, #2
   10b34:	f103 43a0 	add.w	r3, r3, #1342177280	; 0x50000000
   10b38:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
	if (id == NRFX_PERIPHERAL_ID_GET(NRF_GPIOTE1_NS)) {
   10b3c:	2831      	cmp	r0, #49	; 0x31
	const u32_t perm = NRF_SPU->PERIPHID[id].PERM;
   10b3e:	f8d3 2800 	ldr.w	r2, [r3, #2048]	; 0x800
	if (id == NRFX_PERIPHERAL_ID_GET(NRF_GPIOTE1_NS)) {
   10b42:	d006      	beq.n	10b52 <spm_config_peripheral.constprop.1+0x42>
	return present && (usel || split);
   10b44:	2a00      	cmp	r2, #0
   10b46:	da07      	bge.n	10b58 <spm_config_peripheral.constprop.1+0x48>
	bool usel = (perm & SPU_PERIPHID_PERM_SECUREMAPPING_Msk) ==
   10b48:	f002 0203 	and.w	r2, r2, #3
	return present && (usel || split);
   10b4c:	3a02      	subs	r2, #2
   10b4e:	2a01      	cmp	r2, #1
   10b50:	d802      	bhi.n	10b58 <spm_config_peripheral.constprop.1+0x48>

	if (usel_or_split(id)) {
		NRF_SPU->PERIPHID[id].PERM = PERIPH_PRESENT | PERIPH_NONSEC |
   10b52:	4a05      	ldr	r2, [pc, #20]	; (10b68 <spm_config_peripheral.constprop.1+0x58>)
   10b54:	f8c3 2800 	str.w	r2, [r3, #2048]	; 0x800
	}

	/* Even for non-present peripherals we force IRQs to be routed
	 * to Non-Secure state.
	 */
	irq_target_state_set(id, 0);
   10b58:	2100      	movs	r1, #0
   10b5a:	f003 f86f 	bl	13c3c <irq_target_state_set>
	return 0;
}
   10b5e:	2000      	movs	r0, #0
   10b60:	bd08      	pop	{r3, pc}
   10b62:	bf00      	nop
   10b64:	e000e100 	.word	0xe000e100
   10b68:	80000100 	.word	0x80000100

00010b6c <spm_jump>:
	tz_nonsecure_fpu_access_enable();
#endif /* CONFIG_ARMV7_M_ARMV8_M_FP */
}

void spm_jump(void)
{
   10b6c:	b530      	push	{r4, r5, lr}
	 * The assumption is that the MSP is located at VTOR_NS[0].
	 */
	u32_t *vtor_ns = (u32_t *)NON_SECURE_APP_ADDRESS;

	PRINT("SPM: NS image at 0x%x\n", (u32_t)vtor_ns);
	PRINT("SPM: NS MSP at 0x%x\n", vtor_ns[0]);
   10b6e:	f44f 34e1 	mov.w	r4, #115200	; 0x1c200
{
   10b72:	b085      	sub	sp, #20
	PRINT("SPM: NS reset vector at 0x%x\n", vtor_ns[1]);
   10b74:	4d2e      	ldr	r5, [pc, #184]	; (10c30 <spm_jump+0xc4>)
	PRINT("SPM: NS image at 0x%x\n", (u32_t)vtor_ns);
   10b76:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
   10b7a:	482e      	ldr	r0, [pc, #184]	; (10c34 <spm_jump+0xc8>)
   10b7c:	f002 fefb 	bl	13976 <printk>
	PRINT("SPM: NS MSP at 0x%x\n", vtor_ns[0]);
   10b80:	6821      	ldr	r1, [r4, #0]
   10b82:	482d      	ldr	r0, [pc, #180]	; (10c38 <spm_jump+0xcc>)
   10b84:	f002 fef7 	bl	13976 <printk>
	PRINT("SPM: NS reset vector at 0x%x\n", vtor_ns[1]);
   10b88:	6829      	ldr	r1, [r5, #0]
   10b8a:	482c      	ldr	r0, [pc, #176]	; (10c3c <spm_jump+0xd0>)
   10b8c:	f002 fef3 	bl	13976 <printk>

	/* Configure Non-Secure stack */
	tz_nonsecure_setup_conf_t spm_ns_conf = {
   10b90:	2210      	movs	r2, #16
   10b92:	2100      	movs	r1, #0
   10b94:	4668      	mov	r0, sp
   10b96:	f003 f919 	bl	13dcc <memset>
		.vtor_ns = (u32_t)vtor_ns,
		.msp_ns = vtor_ns[0],
   10b9a:	6823      	ldr	r3, [r4, #0]
	tz_nonsecure_state_setup(spm_ns_conf);
   10b9c:	4668      	mov	r0, sp
	tz_nonsecure_setup_conf_t spm_ns_conf = {
   10b9e:	9300      	str	r3, [sp, #0]
   10ba0:	9402      	str	r4, [sp, #8]
	tz_nonsecure_state_setup(spm_ns_conf);
   10ba2:	f000 fe5f 	bl	11864 <tz_nonsecure_state_setup>
	tz_nonsecure_exception_prio_config(1);
   10ba6:	2001      	movs	r0, #1
   10ba8:	f000 fe8c 	bl	118c4 <tz_nonsecure_exception_prio_config>
	tz_nbanked_exception_target_state_set(0);
   10bac:	2000      	movs	r0, #0
   10bae:	f000 fe75 	bl	1189c <tz_nbanked_exception_target_state_set>
	tz_nonsecure_system_reset_req_block(
   10bb2:	2000      	movs	r0, #0
   10bb4:	f000 fe9a 	bl	118ec <tz_nonsecure_system_reset_req_block>
	tz_sau_configure(0, 1);
   10bb8:	2101      	movs	r1, #1
   10bba:	2000      	movs	r0, #0
   10bbc:	f000 feb4 	bl	11928 <tz_sau_configure>
	tz_nonsecure_fpu_access_enable();
   10bc0:	f000 fea8 	bl	11914 <tz_nonsecure_fpu_access_enable>

	spm_configure_ns(&spm_ns_conf);

	/* Generate function pointer for Non-Secure function call. */
	TZ_NONSECURE_FUNC_PTR_DECLARE(reset_ns);
	reset_ns = TZ_NONSECURE_FUNC_PTR_CREATE(vtor_ns[1]);
   10bc4:	682c      	ldr	r4, [r5, #0]

	if (TZ_NONSECURE_FUNC_PTR_IS_NS(reset_ns)) {
		PRINT("SPM: prepare to jump to Non-Secure image.\n");
   10bc6:	481e      	ldr	r0, [pc, #120]	; (10c40 <spm_jump+0xd4>)
   10bc8:	f002 fed5 	bl	13976 <printk>
		/* Note: Move UARTE0 before jumping, if it is
		 * to be used on the Non-Secure domain.
		 */

		/* Configure UARTE0 as non-secure */
		spm_config_peripheral(
   10bcc:	2008      	movs	r0, #8
   10bce:	f7ff ff9f 	bl	10b10 <spm_config_peripheral.constprop.1>
	reset_ns = TZ_NONSECURE_FUNC_PTR_CREATE(vtor_ns[1]);
   10bd2:	f024 0401 	bic.w	r4, r4, #1
  __ASM volatile ("dsb 0xF":::"memory");
   10bd6:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   10bda:	f3bf 8f6f 	isb	sy

		__DSB();
		__ISB();

		/* Jump to Non-Secure firmware */
		reset_ns();
   10bde:	0864      	lsrs	r4, r4, #1
   10be0:	0064      	lsls	r4, r4, #1
   10be2:	4620      	mov	r0, r4
   10be4:	4621      	mov	r1, r4
   10be6:	4622      	mov	r2, r4
   10be8:	4623      	mov	r3, r4
   10bea:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
   10bee:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
   10bf2:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
   10bf6:	eef7 1a00 	vmov.f32	s3, #112	; 0x3f800000  1.0
   10bfa:	eeb7 2a00 	vmov.f32	s4, #112	; 0x3f800000  1.0
   10bfe:	eef7 2a00 	vmov.f32	s5, #112	; 0x3f800000  1.0
   10c02:	eeb7 3a00 	vmov.f32	s6, #112	; 0x3f800000  1.0
   10c06:	eef7 3a00 	vmov.f32	s7, #112	; 0x3f800000  1.0
   10c0a:	eeb7 4a00 	vmov.f32	s8, #112	; 0x3f800000  1.0
   10c0e:	eef7 4a00 	vmov.f32	s9, #112	; 0x3f800000  1.0
   10c12:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
   10c16:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
   10c1a:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
   10c1e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
   10c22:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
   10c26:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
   10c2a:	f7ff fd85 	bl	10738 <__gnu_cmse_nonsecure_call>

		CODE_UNREACHABLE;
   10c2e:	bf00      	nop
   10c30:	0001c204 	.word	0x0001c204
   10c34:	00014694 	.word	0x00014694
   10c38:	000146ab 	.word	0x000146ab
   10c3c:	000146c0 	.word	0x000146c0
   10c40:	000146de 	.word	0x000146de

00010c44 <spm_config>:
		      (u32_t)reset_ns);
	}
}

void spm_config(void)
{
   10c44:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	PRINT("Flash regions\t\tDomain\t\tPermissions\n");
   10c48:	483b      	ldr	r0, [pc, #236]	; (10d38 <spm_config+0xf4>)
   10c4a:	f002 fe94 	bl	13976 <printk>
	config_regions(false, 0, NON_SECURE_FLASH_REGION_INDEX,
   10c4e:	2100      	movs	r1, #0
   10c50:	f240 1317 	movw	r3, #279	; 0x117
   10c54:	4608      	mov	r0, r1
   10c56:	2203      	movs	r2, #3
   10c58:	f7ff ff02 	bl	10a60 <config_regions>
	config_regions(false, NON_SECURE_FLASH_REGION_INDEX,
   10c5c:	f240 1307 	movw	r3, #263	; 0x107
   10c60:	2220      	movs	r2, #32
   10c62:	2103      	movs	r1, #3
   10c64:	2000      	movs	r0, #0
   10c66:	f7ff fefb 	bl	10a60 <config_regions>
	PRINT("\n");
   10c6a:	4834      	ldr	r0, [pc, #208]	; (10d3c <spm_config+0xf8>)
   10c6c:	f002 fe83 	bl	13976 <printk>
	u32_t nsc_size = FLASH_NSC_SIZE_FROM_ADDR(__sg_start);
   10c70:	4b33      	ldr	r3, [pc, #204]	; (10d40 <spm_config+0xfc>)
                                            bool               lock_conf)
{
    NRFX_ASSERT(!(p_reg->FLASHNSC[flash_nsc_id].REGION & SPU_FLASHNSC_REGION_LOCK_Msk));
    NRFX_ASSERT(!(p_reg->FLASHNSC[flash_nsc_id].SIZE & SPU_FLASHNSC_SIZE_LOCK_Msk));

    p_reg->FLASHNSC[flash_nsc_id].REGION = (uint32_t)region_number |
   10c72:	4a34      	ldr	r2, [pc, #208]	; (10d44 <spm_config+0x100>)
   10c74:	f3c3 31c4 	ubfx	r1, r3, #15, #5
   10c78:	f3c3 030e 	ubfx	r3, r3, #0, #15
   10c7c:	f5c3 4300 	rsb	r3, r3, #32768	; 0x8000
        (lock_conf ? SPU_FLASHNSC_REGION_LOCK_Msk : 0);
    p_reg->FLASHNSC[flash_nsc_id].SIZE = (uint32_t)flash_nsc_size |
   10c80:	f3c3 1343 	ubfx	r3, r3, #5, #4
    p_reg->FLASHNSC[flash_nsc_id].REGION = (uint32_t)region_number |
   10c84:	f8c2 1500 	str.w	r1, [r2, #1280]	; 0x500
    p_reg->FLASHNSC[flash_nsc_id].SIZE = (uint32_t)flash_nsc_size |
   10c88:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504
	PRINT("Non-secure callable region 0 placed in flash region %d with size %d.\n",
   10c8c:	f8d2 1500 	ldr.w	r1, [r2, #1280]	; 0x500
   10c90:	f8d2 2504 	ldr.w	r2, [r2, #1284]	; 0x504
   10c94:	482c      	ldr	r0, [pc, #176]	; (10d48 <spm_config+0x104>)
   10c96:	0152      	lsls	r2, r2, #5
   10c98:	f002 fe6d 	bl	13976 <printk>
	PRINT("\n");
   10c9c:	4827      	ldr	r0, [pc, #156]	; (10d3c <spm_config+0xf8>)
   10c9e:	f002 fe6a 	bl	13976 <printk>
	int err = spm_secure_services_init();
   10ca2:	f002 ff7d 	bl	13ba0 <spm_secure_services_init>
	if (err != 0) {
   10ca6:	4601      	mov	r1, r0
   10ca8:	b110      	cbz	r0, 10cb0 <spm_config+0x6c>
		PRINT("Could not initialize secure services (err %d).\n", err);
   10caa:	4828      	ldr	r0, [pc, #160]	; (10d4c <spm_config+0x108>)
   10cac:	f002 fe63 	bl	13976 <printk>
	NRF_SPU->DPPI[0].PERM = mask;
   10cb0:	2400      	movs	r4, #0
	PRINT("SRAM region\t\tDomain\t\tPermissions\n");
   10cb2:	4827      	ldr	r0, [pc, #156]	; (10d50 <spm_config+0x10c>)
   10cb4:	f002 fe5f 	bl	13976 <printk>
	config_regions(true, 0, NON_SECURE_RAM_REGION_INDEX,
   10cb8:	f240 1317 	movw	r3, #279	; 0x117
   10cbc:	2208      	movs	r2, #8
   10cbe:	2100      	movs	r1, #0
   10cc0:	2001      	movs	r0, #1
   10cc2:	f7ff fecd 	bl	10a60 <config_regions>
	NRF_SPU->DPPI[0].PERM = mask;
   10cc6:	4d1f      	ldr	r5, [pc, #124]	; (10d44 <spm_config+0x100>)
	config_regions(true, NON_SECURE_RAM_REGION_INDEX,
   10cc8:	f240 1307 	movw	r3, #263	; 0x107
   10ccc:	2220      	movs	r2, #32
   10cce:	2108      	movs	r1, #8
   10cd0:	2001      	movs	r0, #1
   10cd2:	f7ff fec5 	bl	10a60 <config_regions>
	PRINT("\n");
   10cd6:	4819      	ldr	r0, [pc, #100]	; (10d3c <spm_config+0xf8>)
   10cd8:	f002 fe4d 	bl	13976 <printk>
	NRF_SPU->DPPI[0].PERM = mask;
   10cdc:	f8c5 4480 	str.w	r4, [r5, #1152]	; 0x480
	PRINT("Peripheral\t\tDomain\t\tStatus\n");
   10ce0:	481c      	ldr	r0, [pc, #112]	; (10d54 <spm_config+0x110>)
   10ce2:	f002 fe48 	bl	13976 <printk>
		PRINT("%02u %-21s%s", i, periph[i].name,
   10ce6:	4f1c      	ldr	r7, [pc, #112]	; (10d58 <spm_config+0x114>)
		NRF_SPU->GPIOPORT[0].PERM = 0;
   10ce8:	f8c5 44c0 	str.w	r4, [r5, #1216]	; 0x4c0
		PRINT("%02u %-21s%s", i, periph[i].name,
   10cec:	f8df 807c 	ldr.w	r8, [pc, #124]	; 10d6c <spm_config+0x128>
   10cf0:	4d1a      	ldr	r5, [pc, #104]	; (10d5c <spm_config+0x118>)
   10cf2:	f8df 907c 	ldr.w	r9, [pc, #124]	; 10d70 <spm_config+0x12c>
   10cf6:	796e      	ldrb	r6, [r5, #5]
   10cf8:	682a      	ldr	r2, [r5, #0]
   10cfa:	2e00      	cmp	r6, #0
   10cfc:	bf14      	ite	ne
   10cfe:	463b      	movne	r3, r7
   10d00:	4643      	moveq	r3, r8
   10d02:	4621      	mov	r1, r4
   10d04:	4648      	mov	r0, r9
   10d06:	f002 fe36 	bl	13976 <printk>
		if (!periph[i].nonsecure) {
   10d0a:	b966      	cbnz	r6, 10d26 <spm_config+0xe2>
			PRINT("\tSKIP\n");
   10d0c:	4814      	ldr	r0, [pc, #80]	; (10d60 <spm_config+0x11c>)
	for (size_t i = 0; i < ARRAY_SIZE(periph); i++) {
   10d0e:	3401      	adds	r4, #1
			PRINT("\tOK\n");
   10d10:	f002 fe31 	bl	13976 <printk>
	for (size_t i = 0; i < ARRAY_SIZE(periph); i++) {
   10d14:	2c1b      	cmp	r4, #27
   10d16:	f105 0508 	add.w	r5, r5, #8
   10d1a:	d1ec      	bne.n	10cf6 <spm_config+0xb2>
	PRINT("\n");
   10d1c:	4807      	ldr	r0, [pc, #28]	; (10d3c <spm_config+0xf8>)
	spm_config_flash();
	spm_config_sram();
	spm_config_peripherals();
}
   10d1e:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	PRINT("\n");
   10d22:	f002 be28 	b.w	13976 <printk>
		err = spm_config_peripheral(periph[i].id, false);
   10d26:	7928      	ldrb	r0, [r5, #4]
   10d28:	f7ff fef2 	bl	10b10 <spm_config_peripheral.constprop.1>
		if (err) {
   10d2c:	b108      	cbz	r0, 10d32 <spm_config+0xee>
			PRINT("\tERROR\n");
   10d2e:	480d      	ldr	r0, [pc, #52]	; (10d64 <spm_config+0x120>)
   10d30:	e7ed      	b.n	10d0e <spm_config+0xca>
			PRINT("\tOK\n");
   10d32:	480d      	ldr	r0, [pc, #52]	; (10d68 <spm_config+0x124>)
   10d34:	e7eb      	b.n	10d0e <spm_config+0xca>
   10d36:	bf00      	nop
   10d38:	0001459b 	.word	0x0001459b
   10d3c:	000148c9 	.word	0x000148c9
   10d40:	00017fe0 	.word	0x00017fe0
   10d44:	50003000 	.word	0x50003000
   10d48:	000145bf 	.word	0x000145bf
   10d4c:	00014605 	.word	0x00014605
   10d50:	00014635 	.word	0x00014635
   10d54:	00014657 	.word	0x00014657
   10d58:	00014590 	.word	0x00014590
   10d5c:	0001430c 	.word	0x0001430c
   10d60:	00014680 	.word	0x00014680
   10d64:	00014687 	.word	0x00014687
   10d68:	0001468f 	.word	0x0001468f
   10d6c:	0001456b 	.word	0x0001456b
   10d70:	00014673 	.word	0x00014673

00010d74 <__acle_se_spm_request_read>:
};


__TZ_NONSECURE_ENTRY_FUNC
int spm_request_read(void *destination, u32_t addr, size_t len)
{
   10d74:	b510      	push	{r4, lr}
		 .size = FICR_PUBLIC_SIZE},
		{.start = FICR_RESTRICTED_ADDR,
		 .size = FICR_RESTRICTED_SIZE},
	};

	if (destination == NULL || len <= 0) {
   10d76:	2800      	cmp	r0, #0
   10d78:	d050      	beq.n	10e1c <__acle_se_spm_request_read+0xa8>
   10d7a:	2a00      	cmp	r2, #0
   10d7c:	d04e      	beq.n	10e1c <__acle_se_spm_request_read+0xa8>

	for (size_t i = 0; i < ARRAY_SIZE(ranges); i++) {
		u32_t start = ranges[i].start;
		u32_t size = ranges[i].size;

		if (addr >= start && addr + len <= start + size) {
   10d7e:	f5b1 3f80 	cmp.w	r1, #65536	; 0x10000
   10d82:	d348      	bcc.n	10e16 <__acle_se_spm_request_read+0xa2>
   10d84:	1853      	adds	r3, r2, r1
   10d86:	f5b3 3f81 	cmp.w	r3, #66048	; 0x10200
   10d8a:	d906      	bls.n	10d9a <__acle_se_spm_request_read+0x26>
   10d8c:	4c25      	ldr	r4, [pc, #148]	; (10e24 <__acle_se_spm_request_read+0xb0>)
   10d8e:	42a1      	cmp	r1, r4
   10d90:	d93b      	bls.n	10e0a <__acle_se_spm_request_read+0x96>
   10d92:	f604 241d 	addw	r4, r4, #2589	; 0xa1d
   10d96:	42a3      	cmp	r3, r4
   10d98:	d83a      	bhi.n	10e10 <__acle_se_spm_request_read+0x9c>
			memcpy(destination, (const void *)addr, len);
   10d9a:	f002 ffed 	bl	13d78 <memcpy>
			return 0;
   10d9e:	2000      	movs	r0, #0
		}
	}

	return -EPERM;
}
   10da0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   10da4:	4671      	mov	r1, lr
   10da6:	4672      	mov	r2, lr
   10da8:	4673      	mov	r3, lr
   10daa:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
   10dae:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
   10db2:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
   10db6:	eef7 1a00 	vmov.f32	s3, #112	; 0x3f800000  1.0
   10dba:	eeb7 2a00 	vmov.f32	s4, #112	; 0x3f800000  1.0
   10dbe:	eef7 2a00 	vmov.f32	s5, #112	; 0x3f800000  1.0
   10dc2:	eeb7 3a00 	vmov.f32	s6, #112	; 0x3f800000  1.0
   10dc6:	eef7 3a00 	vmov.f32	s7, #112	; 0x3f800000  1.0
   10dca:	eeb7 4a00 	vmov.f32	s8, #112	; 0x3f800000  1.0
   10dce:	eef7 4a00 	vmov.f32	s9, #112	; 0x3f800000  1.0
   10dd2:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
   10dd6:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
   10dda:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
   10dde:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
   10de2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
   10de6:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
   10dea:	f38e 8c00 	msr	CPSR_fs, lr
   10dee:	b410      	push	{r4}
   10df0:	eef1 ca10 	vmrs	ip, fpscr
   10df4:	f64f 7460 	movw	r4, #65376	; 0xff60
   10df8:	f6c0 74ff 	movt	r4, #4095	; 0xfff
   10dfc:	ea0c 0c04 	and.w	ip, ip, r4
   10e00:	eee1 ca10 	vmsr	fpscr, ip
   10e04:	bc10      	pop	{r4}
   10e06:	46f4      	mov	ip, lr
   10e08:	4774      	bxns	lr
		if (addr >= start && addr + len <= start + size) {
   10e0a:	4c07      	ldr	r4, [pc, #28]	; (10e28 <__acle_se_spm_request_read+0xb4>)
   10e0c:	42a1      	cmp	r1, r4
   10e0e:	d902      	bls.n	10e16 <__acle_se_spm_request_read+0xa2>
   10e10:	4c06      	ldr	r4, [pc, #24]	; (10e2c <__acle_se_spm_request_read+0xb8>)
   10e12:	42a3      	cmp	r3, r4
   10e14:	d9c1      	bls.n	10d9a <__acle_se_spm_request_read+0x26>
	return -EPERM;
   10e16:	f04f 30ff 	mov.w	r0, #4294967295
   10e1a:	e7c1      	b.n	10da0 <__acle_se_spm_request_read+0x2c>
		return -EINVAL;
   10e1c:	f06f 0015 	mvn.w	r0, #21
   10e20:	e7be      	b.n	10da0 <__acle_se_spm_request_read+0x2c>
   10e22:	bf00      	nop
   10e24:	00ff0203 	.word	0x00ff0203
   10e28:	00ff012f 	.word	0x00ff012f
   10e2c:	00ff0138 	.word	0x00ff0138

00010e30 <__acle_se_spm_firmware_info>:


#ifdef CONFIG_SPM_SERVICE_FIND_FIRMWARE_INFO
__TZ_NONSECURE_ENTRY_FUNC
int spm_firmware_info(u32_t fw_address, struct fw_info *info)
{
   10e30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   10e34:	4683      	mov	fp, r0
   10e36:	b085      	sub	sp, #20
	const struct fw_info *tmp_info;

	if (info == NULL) {
   10e38:	4689      	mov	r9, r1
   10e3a:	2900      	cmp	r1, #0
   10e3c:	d051      	beq.n	10ee2 <__acle_se_spm_firmware_info+0xb2>
 */
static inline const struct fw_info *fw_info_find(u32_t firmware_address)
{
	const struct fw_info *finfo;

	for (u32_t i = 0; i < FW_INFO_OFFSET_COUNT; i++) {
   10e3e:	2700      	movs	r7, #0
   10e40:	f8df a0b0 	ldr.w	sl, [pc, #176]	; 10ef4 <__acle_se_spm_firmware_info+0xc4>
	const u32_t fw_info_magic[] = {FIRMWARE_INFO_MAGIC};
   10e44:	f8df 80b0 	ldr.w	r8, [pc, #176]	; 10ef8 <__acle_se_spm_firmware_info+0xc8>
   10e48:	ae01      	add	r6, sp, #4
		finfo = fw_info_check(firmware_address +
						fw_info_allowed_offsets[i]);
   10e4a:	f85a 4b04 	ldr.w	r4, [sl], #4
	const u32_t fw_info_magic[] = {FIRMWARE_INFO_MAGIC};
   10e4e:	e898 0007 	ldmia.w	r8, {r0, r1, r2}
		finfo = fw_info_check(firmware_address +
   10e52:	445c      	add	r4, fp
	const u32_t fw_info_magic[] = {FIRMWARE_INFO_MAGIC};
   10e54:	e886 0007 	stmia.w	r6, {r0, r1, r2}
	if (memcmp(finfo->magic, fw_info_magic, CONFIG_FW_INFO_MAGIC_LEN)
   10e58:	220c      	movs	r2, #12
   10e5a:	4631      	mov	r1, r6
   10e5c:	4620      	mov	r0, r4
   10e5e:	f002 ff64 	bl	13d2a <memcmp>
   10e62:	4605      	mov	r5, r0
   10e64:	b908      	cbnz	r0, 10e6a <__acle_se_spm_firmware_info+0x3a>
		if (finfo) {
   10e66:	2c00      	cmp	r4, #0
   10e68:	d13e      	bne.n	10ee8 <__acle_se_spm_firmware_info+0xb8>
	for (u32_t i = 0; i < FW_INFO_OFFSET_COUNT; i++) {
   10e6a:	3701      	adds	r7, #1
   10e6c:	2f05      	cmp	r7, #5
   10e6e:	d1ec      	bne.n	10e4a <__acle_se_spm_firmware_info+0x1a>
	if (tmp_info != NULL) {
		memcpy(info, tmp_info, sizeof(*tmp_info));
		return 0;
	}

	return -EFAULT;
   10e70:	f06f 050d 	mvn.w	r5, #13
}
   10e74:	4628      	mov	r0, r5
   10e76:	b005      	add	sp, #20
   10e78:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
   10e7c:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
   10e80:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
   10e84:	eef7 1a00 	vmov.f32	s3, #112	; 0x3f800000  1.0
   10e88:	eeb7 2a00 	vmov.f32	s4, #112	; 0x3f800000  1.0
   10e8c:	eef7 2a00 	vmov.f32	s5, #112	; 0x3f800000  1.0
   10e90:	eeb7 3a00 	vmov.f32	s6, #112	; 0x3f800000  1.0
   10e94:	eef7 3a00 	vmov.f32	s7, #112	; 0x3f800000  1.0
   10e98:	eeb7 4a00 	vmov.f32	s8, #112	; 0x3f800000  1.0
   10e9c:	eef7 4a00 	vmov.f32	s9, #112	; 0x3f800000  1.0
   10ea0:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
   10ea4:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
   10ea8:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
   10eac:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
   10eb0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
   10eb4:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   10eb8:	4671      	mov	r1, lr
   10eba:	4672      	mov	r2, lr
   10ebc:	4673      	mov	r3, lr
   10ebe:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
   10ec2:	f38e 8c00 	msr	CPSR_fs, lr
   10ec6:	b410      	push	{r4}
   10ec8:	eef1 ca10 	vmrs	ip, fpscr
   10ecc:	f64f 7460 	movw	r4, #65376	; 0xff60
   10ed0:	f6c0 74ff 	movt	r4, #4095	; 0xfff
   10ed4:	ea0c 0c04 	and.w	ip, ip, r4
   10ed8:	eee1 ca10 	vmsr	fpscr, ip
   10edc:	bc10      	pop	{r4}
   10ede:	46f4      	mov	ip, lr
   10ee0:	4774      	bxns	lr
		return -EINVAL;
   10ee2:	f06f 0515 	mvn.w	r5, #21
   10ee6:	e7c5      	b.n	10e74 <__acle_se_spm_firmware_info+0x44>
		memcpy(info, tmp_info, sizeof(*tmp_info));
   10ee8:	223c      	movs	r2, #60	; 0x3c
   10eea:	4621      	mov	r1, r4
   10eec:	4648      	mov	r0, r9
   10eee:	f002 ff43 	bl	13d78 <memcpy>
		return 0;
   10ef2:	e7bf      	b.n	10e74 <__acle_se_spm_firmware_info+0x44>
   10ef4:	000143e4 	.word	0x000143e4
   10ef8:	000142bc 	.word	0x000142bc

00010efc <nrf_cc310_platform_abort_init>:

/** @brief Function to initialize the nrf_cc310_platform abort APIs.
 */
void nrf_cc310_platform_abort_init(void)
{
	nrf_cc310_platform_set_abort(&apis);
   10efc:	4801      	ldr	r0, [pc, #4]	; (10f04 <nrf_cc310_platform_abort_init+0x8>)
   10efe:	f001 be8b 	b.w	12c18 <nrf_cc310_platform_set_abort>
   10f02:	bf00      	nop
   10f04:	000143f8 	.word	0x000143f8

00010f08 <mutex_unlock>:
}


/** @brief Static function to unlock a mutex
 */
static int32_t mutex_unlock(nrf_cc310_platform_mutex_t *mutex) {
   10f08:	b508      	push	{r3, lr}
    struct k_mutex * p_mutex;

    /* Ensure that the mutex param is valid (not NULL) */
    if(mutex == NULL) {
   10f0a:	b130      	cbz	r0, 10f1a <mutex_unlock+0x12>
        return NRF_CC310_PLATFORM_ERROR_PARAM_NULL;
    }

    /* Ensure that the mutex has been initialized */
    if (mutex->flags == NRF_CC310_PLATFORM_MUTEX_MASK_INVALID) {
   10f0c:	6843      	ldr	r3, [r0, #4]
   10f0e:	b13b      	cbz	r3, 10f20 <mutex_unlock+0x18>
        return NRF_CC310_PLATFORM_ERROR_MUTEX_NOT_INITIALIZED;
    }

    p_mutex = (struct k_mutex *)mutex->mutex;
   10f10:	6800      	ldr	r0, [r0, #0]
	if (z_syscall_trap()) {
		return (int) arch_syscall_invoke1(*(uintptr_t *)&mutex, K_SYSCALL_K_MUTEX_UNLOCK);
	}
#endif
	compiler_barrier();
	return z_impl_k_mutex_unlock(mutex);
   10f12:	f001 f849 	bl	11fa8 <z_impl_k_mutex_unlock>

    k_mutex_unlock(p_mutex);
    return NRF_CC310_PLATFORM_SUCCESS;
   10f16:	2000      	movs	r0, #0
}
   10f18:	bd08      	pop	{r3, pc}
        return NRF_CC310_PLATFORM_ERROR_PARAM_NULL;
   10f1a:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
   10f1e:	e7fb      	b.n	10f18 <mutex_unlock+0x10>
        return NRF_CC310_PLATFORM_ERROR_MUTEX_NOT_INITIALIZED;
   10f20:	4800      	ldr	r0, [pc, #0]	; (10f24 <mutex_unlock+0x1c>)
   10f22:	e7f9      	b.n	10f18 <mutex_unlock+0x10>
   10f24:	ffff8fea 	.word	0xffff8fea

00010f28 <mutex_free>:
static void mutex_free(nrf_cc310_platform_mutex_t *mutex) {
   10f28:	b538      	push	{r3, r4, r5, lr}
    if (mutex == NULL) {
   10f2a:	4604      	mov	r4, r0
   10f2c:	b918      	cbnz	r0, 10f36 <mutex_free+0xe>
        platform_abort_apis.abort_fn(
   10f2e:	4b0b      	ldr	r3, [pc, #44]	; (10f5c <mutex_free+0x34>)
   10f30:	480b      	ldr	r0, [pc, #44]	; (10f60 <mutex_free+0x38>)
   10f32:	685b      	ldr	r3, [r3, #4]
   10f34:	4798      	blx	r3
    if (mutex->flags == NRF_CC310_PLATFORM_MUTEX_MASK_INVALID) {
   10f36:	6865      	ldr	r5, [r4, #4]
   10f38:	b155      	cbz	r5, 10f50 <mutex_free+0x28>
    if ((mutex->flags & NRF_CC310_PLATFORM_MUTEX_MASK_IS_ALLOCATED) == 0) {
   10f3a:	f015 0502 	ands.w	r5, r5, #2
   10f3e:	6820      	ldr	r0, [r4, #0]
   10f40:	d107      	bne.n	10f52 <mutex_free+0x2a>
        k_mem_slab_free(&mutex_slab, mutex->mutex);
   10f42:	4601      	mov	r1, r0
   10f44:	4807      	ldr	r0, [pc, #28]	; (10f64 <mutex_free+0x3c>)
   10f46:	f000 ff8f 	bl	11e68 <k_mem_slab_free>
        mutex->mutex = NULL;
   10f4a:	6025      	str	r5, [r4, #0]
    mutex->flags = NRF_CC310_PLATFORM_MUTEX_MASK_INVALID;
   10f4c:	2300      	movs	r3, #0
   10f4e:	6063      	str	r3, [r4, #4]
}
   10f50:	bd38      	pop	{r3, r4, r5, pc}
        memset(mutex->mutex, 0, sizeof(struct k_mutex));
   10f52:	2214      	movs	r2, #20
   10f54:	2100      	movs	r1, #0
   10f56:	f002 ff39 	bl	13dcc <memset>
   10f5a:	e7f7      	b.n	10f4c <mutex_free+0x24>
   10f5c:	20001414 	.word	0x20001414
   10f60:	0001480d 	.word	0x0001480d
   10f64:	20000024 	.word	0x20000024

00010f68 <mutex_init>:
static void mutex_init(nrf_cc310_platform_mutex_t *mutex) {
   10f68:	b510      	push	{r4, lr}
    if (mutex == NULL) {
   10f6a:	4604      	mov	r4, r0
   10f6c:	b918      	cbnz	r0, 10f76 <mutex_init+0xe>
        platform_abort_apis.abort_fn(
   10f6e:	4b13      	ldr	r3, [pc, #76]	; (10fbc <mutex_init+0x54>)
   10f70:	4813      	ldr	r0, [pc, #76]	; (10fc0 <mutex_init+0x58>)
   10f72:	685b      	ldr	r3, [r3, #4]
   10f74:	4798      	blx	r3
    if (mutex->flags == NRF_CC310_PLATFORM_MUTEX_MASK_INVALID &&
   10f76:	6863      	ldr	r3, [r4, #4]
   10f78:	b9bb      	cbnz	r3, 10faa <mutex_init+0x42>
   10f7a:	6823      	ldr	r3, [r4, #0]
   10f7c:	b9ab      	cbnz	r3, 10faa <mutex_init+0x42>
        ret = k_mem_slab_alloc(&mutex_slab, &mutex->mutex, K_FOREVER);
   10f7e:	f04f 32ff 	mov.w	r2, #4294967295
   10f82:	4621      	mov	r1, r4
   10f84:	480f      	ldr	r0, [pc, #60]	; (10fc4 <mutex_init+0x5c>)
   10f86:	f000 ff43 	bl	11e10 <k_mem_slab_alloc>
        if(ret != 0 || mutex->mutex == NULL)
   10f8a:	b908      	cbnz	r0, 10f90 <mutex_init+0x28>
   10f8c:	6823      	ldr	r3, [r4, #0]
   10f8e:	b91b      	cbnz	r3, 10f98 <mutex_init+0x30>
            platform_abort_apis.abort_fn(
   10f90:	4b0a      	ldr	r3, [pc, #40]	; (10fbc <mutex_init+0x54>)
   10f92:	480d      	ldr	r0, [pc, #52]	; (10fc8 <mutex_init+0x60>)
   10f94:	685b      	ldr	r3, [r3, #4]
   10f96:	4798      	blx	r3
        memset(mutex->mutex, 0, sizeof(struct k_mutex));
   10f98:	2214      	movs	r2, #20
   10f9a:	2100      	movs	r1, #0
   10f9c:	6820      	ldr	r0, [r4, #0]
   10f9e:	f002 ff15 	bl	13dcc <memset>
        mutex->flags |= NRF_CC310_PLATFORM_MUTEX_MASK_IS_ALLOCATED;
   10fa2:	6863      	ldr	r3, [r4, #4]
   10fa4:	f043 0302 	orr.w	r3, r3, #2
   10fa8:	6063      	str	r3, [r4, #4]
    p_mutex = (struct k_mutex *)mutex->mutex;
   10faa:	6820      	ldr	r0, [r4, #0]
	return z_impl_k_mutex_init(mutex);
   10fac:	f002 ff69 	bl	13e82 <z_impl_k_mutex_init>
    mutex->flags |= NRF_CC310_PLATFORM_MUTEX_MASK_IS_VALID;
   10fb0:	6863      	ldr	r3, [r4, #4]
   10fb2:	f043 0301 	orr.w	r3, r3, #1
   10fb6:	6063      	str	r3, [r4, #4]
}
   10fb8:	bd10      	pop	{r4, pc}
   10fba:	bf00      	nop
   10fbc:	20001414 	.word	0x20001414
   10fc0:	0001480d 	.word	0x0001480d
   10fc4:	20000024 	.word	0x20000024
   10fc8:	00014833 	.word	0x00014833

00010fcc <mutex_lock>:
static int32_t mutex_lock(nrf_cc310_platform_mutex_t *mutex) {
   10fcc:	b508      	push	{r3, lr}
    if(mutex == NULL) {
   10fce:	b158      	cbz	r0, 10fe8 <mutex_lock+0x1c>
    if (mutex->flags == NRF_CC310_PLATFORM_MUTEX_MASK_INVALID) {
   10fd0:	6843      	ldr	r3, [r0, #4]
   10fd2:	b163      	cbz	r3, 10fee <mutex_lock+0x22>
    p_mutex = (struct k_mutex *)mutex->mutex;
   10fd4:	6800      	ldr	r0, [r0, #0]
	return z_impl_k_mutex_lock(mutex, timeout);
   10fd6:	f04f 31ff 	mov.w	r1, #4294967295
   10fda:	f000 ff73 	bl	11ec4 <z_impl_k_mutex_lock>
        return NRF_CC310_PLATFORM_ERROR_MUTEX_FAILED;
   10fde:	4b05      	ldr	r3, [pc, #20]	; (10ff4 <mutex_lock+0x28>)
    if (ret == 0) {
   10fe0:	2800      	cmp	r0, #0
        return NRF_CC310_PLATFORM_ERROR_MUTEX_FAILED;
   10fe2:	bf18      	it	ne
   10fe4:	4618      	movne	r0, r3
}
   10fe6:	bd08      	pop	{r3, pc}
        return NRF_CC310_PLATFORM_ERROR_PARAM_NULL;
   10fe8:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
   10fec:	e7fb      	b.n	10fe6 <mutex_lock+0x1a>
        return NRF_CC310_PLATFORM_ERROR_MUTEX_NOT_INITIALIZED;
   10fee:	4802      	ldr	r0, [pc, #8]	; (10ff8 <mutex_lock+0x2c>)
   10ff0:	e7f9      	b.n	10fe6 <mutex_lock+0x1a>
   10ff2:	bf00      	nop
   10ff4:	ffff8fe9 	.word	0xffff8fe9
   10ff8:	ffff8fea 	.word	0xffff8fea

00010ffc <nrf_cc310_platform_mutex_init>:
};

/** @brief Function to initialize the nrf_cc310_platform mutex APIs
 */
void nrf_cc310_platform_mutex_init(void)
{
   10ffc:	b508      	push	{r3, lr}
    k_mem_slab_init(&mutex_slab,
   10ffe:	4906      	ldr	r1, [pc, #24]	; (11018 <nrf_cc310_platform_mutex_init+0x1c>)
   11000:	2340      	movs	r3, #64	; 0x40
   11002:	2214      	movs	r2, #20
   11004:	4805      	ldr	r0, [pc, #20]	; (1101c <nrf_cc310_platform_mutex_init+0x20>)
   11006:	f002 ff21 	bl	13e4c <k_mem_slab_init>
            mutex_slab_buffer,
            sizeof(struct k_mutex),
            NUM_MUTEXES);

    nrf_cc310_platform_set_mutexes(&mutex_apis, &mutexes);
}
   1100a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    nrf_cc310_platform_set_mutexes(&mutex_apis, &mutexes);
   1100e:	4904      	ldr	r1, [pc, #16]	; (11020 <nrf_cc310_platform_mutex_init+0x24>)
   11010:	4804      	ldr	r0, [pc, #16]	; (11024 <nrf_cc310_platform_mutex_init+0x28>)
   11012:	f001 be39 	b.w	12c88 <nrf_cc310_platform_set_mutexes>
   11016:	bf00      	nop
   11018:	20000040 	.word	0x20000040
   1101c:	20000024 	.word	0x20000024
   11020:	00014410 	.word	0x00014410
   11024:	00014400 	.word	0x00014400

00011028 <z_arm_exc_exit>:
    /* r0 contains the caller mode */
    push {r0, lr}
#endif

#ifdef CONFIG_PREEMPT_ENABLED
    ldr r0, =_kernel
   11028:	4804      	ldr	r0, [pc, #16]	; (1103c <_EXIT_EXC+0x2>)

    ldr r1, [r0, #_kernel_offset_to_current]
   1102a:	6881      	ldr	r1, [r0, #8]

    ldr r0, [r0, #_kernel_offset_to_ready_q_cache]
   1102c:	6a40      	ldr	r0, [r0, #36]	; 0x24
    cmp r0, r1
   1102e:	4288      	cmp	r0, r1
    beq _EXIT_EXC
   11030:	d003      	beq.n	1103a <_EXIT_EXC>

#if defined(CONFIG_CPU_CORTEX_M)
    /* context switch required, pend the PendSV exception */
    ldr r1, =_SCS_ICSR
   11032:	4903      	ldr	r1, [pc, #12]	; (11040 <_EXIT_EXC+0x6>)
    ldr r2, =_SCS_ICSR_PENDSV
   11034:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    str r2, [r1]
   11038:	600a      	str	r2, [r1, #0]

0001103a <_EXIT_EXC>:
    bl z_check_stack_sentinel
#endif /* CONFIG_CPU_CORTEX_M */
#endif /* CONFIG_STACK_SENTINEL */

#if defined(CONFIG_CPU_CORTEX_M)
    bx lr
   1103a:	4770      	bx	lr
    ldr r0, =_kernel
   1103c:	2000062c 	.word	0x2000062c
    ldr r1, =_SCS_ICSR
   11040:	e000ed04 	.word	0xe000ed04

00011044 <arch_swap>:
#ifdef CONFIG_EXECUTION_BENCHMARKING
	read_timer_start_of_swap();
#endif

	/* store off key and return value */
	_current->arch.basepri = key;
   11044:	4a09      	ldr	r2, [pc, #36]	; (1106c <arch_swap+0x28>)
	_current->arch.swap_return_value = _k_neg_eagain;
   11046:	490a      	ldr	r1, [pc, #40]	; (11070 <arch_swap+0x2c>)
	_current->arch.basepri = key;
   11048:	6893      	ldr	r3, [r2, #8]
	_current->arch.swap_return_value = _k_neg_eagain;
   1104a:	6809      	ldr	r1, [r1, #0]
	_current->arch.basepri = key;
   1104c:	6658      	str	r0, [r3, #100]	; 0x64
	_current->arch.swap_return_value = _k_neg_eagain;
   1104e:	6699      	str	r1, [r3, #104]	; 0x68

#if defined(CONFIG_CPU_CORTEX_M)
	/* set pending bit to make sure we will take a PendSV exception */
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
   11050:	4908      	ldr	r1, [pc, #32]	; (11074 <arch_swap+0x30>)
   11052:	684b      	ldr	r3, [r1, #4]
   11054:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
   11058:	604b      	str	r3, [r1, #4]
   1105a:	2300      	movs	r3, #0
   1105c:	f383 8811 	msr	BASEPRI, r3
   11060:	f3bf 8f6f 	isb	sy
#endif

	/* Context switch is performed here. Returning implies the
	 * thread has been context-switched-in again.
	 */
	return _current->arch.swap_return_value;
   11064:	6893      	ldr	r3, [r2, #8]
}
   11066:	6e98      	ldr	r0, [r3, #104]	; 0x68
   11068:	4770      	bx	lr
   1106a:	bf00      	nop
   1106c:	2000062c 	.word	0x2000062c
   11070:	00014460 	.word	0x00014460
   11074:	e000ed00 	.word	0xe000ed00

00011078 <z_arm_pendsv>:
    pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_TRACING */

    /* load _kernel into r1 and current k_thread into r2 */
    ldr r1, =_kernel
   11078:	4912      	ldr	r1, [pc, #72]	; (110c4 <z_arm_pendsv+0x4c>)
    ldr r2, [r1, #_kernel_offset_to_current]
   1107a:	688a      	ldr	r2, [r1, #8]

    /* addr of callee-saved regs in thread in r0 */
    ldr r0, =_thread_offset_to_callee_saved
   1107c:	f04f 0028 	mov.w	r0, #40	; 0x28
    add r0, r2
   11080:	4410      	add	r0, r2

    /* save callee-saved + psp in thread */
#if defined(CONFIG_CPU_CORTEX_M)
    mrs ip, PSP
   11082:	f3ef 8c09 	mrs	ip, PSP
    mov r6, r11
    mov r7, ip
    /* store r8-12 */
    stmea r0!, {r3-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    stmia r0, {v1-v8, ip}
   11086:	e880 1ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}

    /* Protect the kernel state while we play with the thread lists */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
   1108a:	2020      	movs	r0, #32
    msr BASEPRI, r0
   1108c:	f380 8811 	msr	BASEPRI, r0
    isb /* Make the effect of disabling interrupts be realized immediately */
   11090:	f3bf 8f6f 	isb	sy
     * the new thread is context-switched in since all decisions
     * to pend PendSV have been taken with the current kernel
     * state and this is what we're handling currently.
     */
#if defined(CONFIG_CPU_CORTEX_M)
    ldr v4, =_SCS_ICSR
   11094:	4f0c      	ldr	r7, [pc, #48]	; (110c8 <z_arm_pendsv+0x50>)
    ldr v3, =_SCS_ICSR_UNPENDSV
   11096:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000
#endif

    /* _kernel is still in r1 */

    /* fetch the thread to run from the ready queue cache */
    ldr r2, [r1, #_kernel_offset_to_ready_q_cache]
   1109a:	6a4a      	ldr	r2, [r1, #36]	; 0x24

    str r2, [r1, #_kernel_offset_to_current]
   1109c:	608a      	str	r2, [r1, #8]
     * has been handled.
     */

    /* _SCS_ICSR is still in v4 and _SCS_ICSR_UNPENDSV in v3 */
#if defined(CONFIG_CPU_CORTEX_M)
    str v3, [v4, #0]
   1109e:	603e      	str	r6, [r7, #0]

    ldr r0, [r4]
    movs.n r3, #0
    str r3, [r4]
#else
    ldr r0, [r2, #_thread_offset_to_basepri]
   110a0:	6e50      	ldr	r0, [r2, #100]	; 0x64
    movs r3, #0
   110a2:	2300      	movs	r3, #0
    str r3, [r2, #_thread_offset_to_basepri]
   110a4:	6653      	str	r3, [r2, #100]	; 0x64
    /* restore r4-r7, go back 9*4 bytes to the start of the stored block */
    subs r0, #36
    ldmia r0!, {r4-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    /* restore BASEPRI for the incoming thread */
    msr BASEPRI, r0
   110a6:	f380 8811 	msr	BASEPRI, r0
    isb
#endif

#if defined (CONFIG_ARM_MPU)
    /* Re-program dynamic memory map */
    push {r2,lr}
   110aa:	b504      	push	{r2, lr}
    mov r0, r2 /* _current thread */
   110ac:	4610      	mov	r0, r2
    bl z_arm_configure_dynamic_mpu_regions
   110ae:	f002 fdfd 	bl	13cac <z_arm_configure_dynamic_mpu_regions>
    pop {r2,lr}
   110b2:	e8bd 4004 	ldmia.w	sp!, {r2, lr}
    isb

#endif

    /* load callee-saved + psp from thread */
    add r0, r2, #_thread_offset_to_callee_saved
   110b6:	f102 0028 	add.w	r0, r2, #40	; 0x28
    ldmia r0, {v1-v8, ip}
   110ba:	e890 1ff0 	ldmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
    mov r0, #0
    msr PSPLIM, r0
#endif /* CONFIG_BUILTIN_STACK_GUARD */

#if defined(CONFIG_CPU_CORTEX_M)
    msr PSP, ip
   110be:	f38c 8809 	msr	PSP, ip

    /*
     * Cortex-M: return from PendSV exception
     * Cortex-R: return to the caller (_IntExit or z_arm_svc)
     */
    bx lr
   110c2:	4770      	bx	lr
    ldr r1, =_kernel
   110c4:	2000062c 	.word	0x2000062c
    ldr v4, =_SCS_ICSR
   110c8:	e000ed04 	.word	0xe000ed04

000110cc <z_arm_svc>:
  bne _stack_frame_endif
_stack_frame_msp:
  mrs r0, MSP
_stack_frame_endif:
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    tst lr, #0x4    /* did we come from thread mode ? */
   110cc:	f01e 0f04 	tst.w	lr, #4
    ite eq  /* if zero (equal), came from handler mode */
   110d0:	bf0c      	ite	eq
        mrseq r0, MSP   /* handler mode, stack frame is on MSP */
   110d2:	f3ef 8008 	mrseq	r0, MSP
        mrsne r0, PSP   /* thread mode, stack frame is on PSP */
   110d6:	f3ef 8009 	mrsne	r0, PSP
#endif


    /* Figure out what SVC call number was invoked */

    ldr r1, [r0, #24]   /* grab address of PC from stack frame */
   110da:	6981      	ldr	r1, [r0, #24]
     */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    subs r1, r1, #2
    ldrb r1, [r1]
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    ldrb r1, [r1, #-2]
   110dc:	f811 1c02 	ldrb.w	r1, [r1, #-2]
#endif
    bne _oops

#endif /* CONFIG_USERSPACE */

    cmp r1, #2
   110e0:	2902      	cmp	r1, #2
    beq _oops
   110e2:	d0ff      	beq.n	110e4 <_oops>

000110e4 <_oops>:
    /* exception return is done in z_arm_int_exit() */
    b z_arm_int_exit
#endif

_oops:
    push {r0, lr}
   110e4:	b501      	push	{r0, lr}
    bl z_do_kernel_oops
   110e6:	f002 fdd6 	bl	13c96 <z_do_kernel_oops>
    /* return from SVC exception is done here */
    pop {r0, pc}
   110ea:	bd01      	pop	{r0, pc}

000110ec <arch_irq_enable>:
#define REG_FROM_IRQ(irq) (irq / NUM_IRQS_PER_REG)
#define BIT_FROM_IRQ(irq) (irq % NUM_IRQS_PER_REG)

void arch_irq_enable(unsigned int irq)
{
	NVIC_EnableIRQ((IRQn_Type)irq);
   110ec:	b243      	sxtb	r3, r0
  if ((int32_t)(IRQn) >= 0)
   110ee:	2b00      	cmp	r3, #0
   110f0:	db08      	blt.n	11104 <arch_irq_enable+0x18>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   110f2:	2201      	movs	r2, #1
   110f4:	f000 001f 	and.w	r0, r0, #31
   110f8:	fa02 f000 	lsl.w	r0, r2, r0
   110fc:	4a02      	ldr	r2, [pc, #8]	; (11108 <arch_irq_enable+0x1c>)
   110fe:	095b      	lsrs	r3, r3, #5
   11100:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
}
   11104:	4770      	bx	lr
   11106:	bf00      	nop
   11108:	e000e100 	.word	0xe000e100

0001110c <z_arm_irq_priority_set>:
	 */
	__ASSERT(prio <= (BIT(DT_NUM_IRQ_PRIO_BITS) - 1),
		 "invalid priority %d! values must be less than %lu\n",
		 prio - _IRQ_PRIO_OFFSET,
		 BIT(DT_NUM_IRQ_PRIO_BITS) - (_IRQ_PRIO_OFFSET));
	NVIC_SetPriority((IRQn_Type)irq, prio);
   1110c:	b243      	sxtb	r3, r0
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
   1110e:	2b00      	cmp	r3, #0
	prio += _IRQ_PRIO_OFFSET;
   11110:	f101 0101 	add.w	r1, r1, #1
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   11114:	bfa8      	it	ge
   11116:	f103 4360 	addge.w	r3, r3, #3758096384	; 0xe0000000
   1111a:	ea4f 1141 	mov.w	r1, r1, lsl #5
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   1111e:	bfb8      	it	lt
   11120:	4b05      	ldrlt	r3, [pc, #20]	; (11138 <z_arm_irq_priority_set+0x2c>)
   11122:	b2c9      	uxtb	r1, r1
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   11124:	bfab      	itete	ge
   11126:	f503 4361 	addge.w	r3, r3, #57600	; 0xe100
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   1112a:	f000 000f 	andlt.w	r0, r0, #15
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   1112e:	f883 1300 	strbge.w	r1, [r3, #768]	; 0x300
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   11132:	5419      	strblt	r1, [r3, r0]
}
   11134:	4770      	bx	lr
   11136:	bf00      	nop
   11138:	e000ed14 	.word	0xe000ed14

0001113c <arch_new_thread>:
 */
void arch_new_thread(struct k_thread *thread, k_thread_stack_t *stack,
		     size_t stackSize, k_thread_entry_t pEntry,
		     void *parameter1, void *parameter2, void *parameter3,
		     int priority, unsigned int options)
{
   1113c:	b573      	push	{r0, r1, r4, r5, r6, lr}
   1113e:	461e      	mov	r6, r3
#endif
	stackEnd = pStackMem + stackSize;

	struct __esf *pInitCtx;

	z_new_thread_init(thread, pStackMem, stackSize, priority,
   11140:	9b0a      	ldr	r3, [sp, #40]	; 0x28
{
   11142:	4605      	mov	r5, r0
	z_new_thread_init(thread, pStackMem, stackSize, priority,
   11144:	9300      	str	r3, [sp, #0]
   11146:	9b09      	ldr	r3, [sp, #36]	; 0x24
	stackEnd = pStackMem + stackSize;
   11148:	188c      	adds	r4, r1, r2
	z_new_thread_init(thread, pStackMem, stackSize, priority,
   1114a:	f002 ff2f 	bl	13fac <z_new_thread_init>
	pInitCtx->basic.pc = (u32_t)z_thread_entry;
#endif

#if defined(CONFIG_CPU_CORTEX_M)
	/* force ARM mode by clearing LSB of address */
	pInitCtx->basic.pc &= 0xfffffffe;
   1114e:	4a0b      	ldr	r2, [pc, #44]	; (1117c <arch_new_thread+0x40>)
	pInitCtx = (struct __esf *)(STACK_ROUND_DOWN(stackEnd -
   11150:	f1a4 0320 	sub.w	r3, r4, #32
   11154:	f023 0307 	bic.w	r3, r3, #7
	pInitCtx->basic.pc &= 0xfffffffe;
   11158:	f022 0201 	bic.w	r2, r2, #1
   1115c:	619a      	str	r2, [r3, #24]
#endif

	pInitCtx->basic.a1 = (u32_t)pEntry;
	pInitCtx->basic.a2 = (u32_t)parameter1;
   1115e:	9a06      	ldr	r2, [sp, #24]
	pInitCtx->basic.a1 = (u32_t)pEntry;
   11160:	601e      	str	r6, [r3, #0]
	pInitCtx->basic.a2 = (u32_t)parameter1;
   11162:	605a      	str	r2, [r3, #4]
	pInitCtx->basic.a3 = (u32_t)parameter2;
   11164:	9a07      	ldr	r2, [sp, #28]
   11166:	609a      	str	r2, [r3, #8]
	pInitCtx->basic.a4 = (u32_t)parameter3;
   11168:	9a08      	ldr	r2, [sp, #32]
   1116a:	60da      	str	r2, [r3, #12]
	pInitCtx->basic.xpsr =
   1116c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
   11170:	61da      	str	r2, [r3, #28]
		0x01000000UL; /* clear all, thumb bit is 1, even if RO */

	thread->callee_saved.psp = (u32_t)pInitCtx;
   11172:	64ab      	str	r3, [r5, #72]	; 0x48
#if defined(CONFIG_CPU_CORTEX_R)
	pInitCtx->basic.lr = (u32_t)pInitCtx->basic.pc;
	thread->callee_saved.spsr = A_BIT | T_BIT | MODE_SYS;
	thread->callee_saved.lr = (u32_t)pInitCtx->basic.pc;
#endif
	thread->arch.basepri = 0;
   11174:	2300      	movs	r3, #0
   11176:	666b      	str	r3, [r5, #100]	; 0x64

	/*
	 * initial values in all other registers/thread entries are
	 * irrelevant.
	 */
}
   11178:	b002      	add	sp, #8
   1117a:	bd70      	pop	{r4, r5, r6, pc}
   1117c:	00013991 	.word	0x00013991

00011180 <arch_switch_to_main_thread>:

void arch_switch_to_main_thread(struct k_thread *main_thread,
				k_thread_stack_t *main_stack,
				size_t main_stack_size,
				k_thread_entry_t _main)
{
   11180:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   11182:	461e      	mov	r6, r3
   11184:	4605      	mov	r5, r0
   11186:	460c      	mov	r4, r1
   11188:	4617      	mov	r7, r2
  __ASM volatile ("VMSR fpscr, %0" : : "r" (fpscr) : "vfpcc", "memory");
   1118a:	2300      	movs	r3, #0
   1118c:	eee1 3a10 	vmsr	fpscr, r3
	 * to set up access permissions for fixed memory sections, such
	 * as Application Memory or No-Cacheable SRAM area.
	 *
	 * This function is invoked once, upon system initialization.
	 */
	z_arm_configure_static_mpu_regions();
   11190:	f000 f9d6 	bl	11540 <z_arm_configure_static_mpu_regions>
	start_of_main_stack =
		Z_THREAD_STACK_BUFFER(main_stack) + main_stack_size;

	start_of_main_stack = (char *)STACK_ROUND_DOWN(start_of_main_stack);

	_current = main_thread;
   11194:	4b0a      	ldr	r3, [pc, #40]	; (111c0 <arch_switch_to_main_thread+0x40>)
	start_of_main_stack =
   11196:	443c      	add	r4, r7
#ifdef CONFIG_ARM_MPU
	/*
	 * If stack protection is enabled, make sure to set it
	 * before jumping to thread entry function
	 */
	z_arm_configure_dynamic_mpu_regions(main_thread);
   11198:	4628      	mov	r0, r5
	_current = main_thread;
   1119a:	609d      	str	r5, [r3, #8]
	start_of_main_stack = (char *)STACK_ROUND_DOWN(start_of_main_stack);
   1119c:	f024 0407 	bic.w	r4, r4, #7
	z_arm_configure_dynamic_mpu_regions(main_thread);
   111a0:	f002 fd84 	bl	13cac <z_arm_configure_dynamic_mpu_regions>

	/*
	 * Set PSP to the highest address of the main stack
	 * before enabling interrupts and jumping to main.
	 */
	__asm__ volatile (
   111a4:	4630      	mov	r0, r6
   111a6:	f384 8809 	msr	PSP, r4
   111aa:	2100      	movs	r1, #0
   111ac:	b663      	cpsie	if
   111ae:	f381 8811 	msr	BASEPRI, r1
   111b2:	f3bf 8f6f 	isb	sy
   111b6:	2200      	movs	r2, #0
   111b8:	2300      	movs	r3, #0
   111ba:	f002 fbe9 	bl	13990 <z_thread_entry>
	:
	: "r" (_main), "r" (start_of_main_stack)
	: "r0" /* not to be overwritten by msr PSP, %1 */
	);

	CODE_UNREACHABLE;
   111be:	bf00      	nop
   111c0:	2000062c 	.word	0x2000062c

000111c4 <z_arm_cpu_idle_init>:
 * void z_arm_cpu_idle_init(void);
 */

SECTION_FUNC(TEXT, z_arm_cpu_idle_init)
#if defined(CONFIG_CPU_CORTEX_M)
	ldr r1, =_SCB_SCR
   111c4:	4901      	ldr	r1, [pc, #4]	; (111cc <z_arm_cpu_idle_init+0x8>)
	movs.n r2, #_SCR_INIT_BITS
   111c6:	2210      	movs	r2, #16
	str r2, [r1]
   111c8:	600a      	str	r2, [r1, #0]
#endif
	bx lr
   111ca:	4770      	bx	lr
	ldr r1, =_SCB_SCR
   111cc:	e000ed10 	.word	0xe000ed10

000111d0 <arch_cpu_idle>:
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE) \
	|| defined(CONFIG_ARMV7_R)
	cpsie i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* clear BASEPRI so wfi is awakened by incoming interrupts */
	eors.n r0, r0
   111d0:	4040      	eors	r0, r0
	msr BASEPRI, r0
   111d2:	f380 8811 	msr	BASEPRI, r0
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	wfi
   111d6:	bf30      	wfi

	bx lr
   111d8:	4770      	bx	lr
   111da:	bf00      	nop

000111dc <z_arm_bus_fault>:
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
SECTION_SUBSEC_FUNC(TEXT,__fault,z_arm_reserved)

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE) || \
	defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	mrs r0, MSP
   111dc:	f3ef 8008 	mrs	r0, MSP
	mrs r1, PSP
   111e0:	f3ef 8109 	mrs	r1, PSP
	mov r2, lr /* EXC_RETURN */
   111e4:	4672      	mov	r2, lr

	push {r0, lr}
   111e6:	b501      	push	{r0, lr}
	mov r0, #0
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE || CONFIG_ARMv7_M_ARMV8_M_MAINLINE */

	bl z_arm_fault
   111e8:	f000 f8d2 	bl	11390 <z_arm_fault>

#if defined(CONFIG_CPU_CORTEX_M)
	pop {r0, pc}
   111ec:	bd01      	pop	{r0, pc}
   111ee:	bf00      	nop

000111f0 <z_SysNmiOnReset>:
_ASM_FILE_PROLOGUE

GTEXT(z_SysNmiOnReset)

SECTION_FUNC(TEXT, z_SysNmiOnReset)
    wfi
   111f0:	bf30      	wfi
    b z_SysNmiOnReset
   111f2:	f7ff bffd 	b.w	111f0 <z_SysNmiOnReset>
   111f6:	bf00      	nop

000111f8 <z_arm_prep_c>:
#else
#define VECTOR_ADDRESS CONFIG_SRAM_BASE_ADDRESS
#endif
static inline void relocate_vector_table(void)
{
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
   111f8:	4a11      	ldr	r2, [pc, #68]	; (11240 <z_arm_prep_c+0x48>)
 * This routine prepares for the execution of and runs C code.
 *
 * @return N/A
 */
void z_arm_prep_c(void)
{
   111fa:	b508      	push	{r3, lr}
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
   111fc:	4b11      	ldr	r3, [pc, #68]	; (11244 <z_arm_prep_c+0x4c>)
   111fe:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
   11202:	609a      	str	r2, [r3, #8]
  __ASM volatile ("dsb 0xF":::"memory");
   11204:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   11208:	f3bf 8f6f 	isb	sy
	SCB->CPACR |= CPACR_CP10_PRIV_ACCESS | CPACR_CP11_PRIV_ACCESS;
   1120c:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
   11210:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
   11214:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	FPU->FPCCR &= (~(FPU_FPCCR_ASPEN_Msk | FPU_FPCCR_LSPEN_Msk));
   11218:	4a0b      	ldr	r2, [pc, #44]	; (11248 <z_arm_prep_c+0x50>)
   1121a:	6853      	ldr	r3, [r2, #4]
   1121c:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
   11220:	6053      	str	r3, [r2, #4]
  __ASM volatile ("dsb 0xF":::"memory");
   11222:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   11226:	f3bf 8f6f 	isb	sy
  __ASM volatile ("VMSR fpscr, %0" : : "r" (fpscr) : "vfpcc", "memory");
   1122a:	2300      	movs	r3, #0
   1122c:	eee1 3a10 	vmsr	fpscr, r3
	relocate_vector_table();
	enable_floating_point();
	z_bss_zero();
   11230:	f000 fd08 	bl	11c44 <z_bss_zero>
	z_data_copy();
   11234:	f000 fd10 	bl	11c58 <z_data_copy>
#if defined(CONFIG_ARMV7_R) && defined(CONFIG_INIT_STACKS)
	z_arm_init_stacks();
#endif
	z_arm_int_lib_init();
   11238:	f000 f950 	bl	114dc <z_arm_int_lib_init>
	z_cstart();
   1123c:	f000 fd3e 	bl	11cbc <z_cstart>
   11240:	00010200 	.word	0x00010200
   11244:	e000ed00 	.word	0xe000ed00
   11248:	e000ef30 	.word	0xe000ef30

0001124c <_isr_wrapper>:
 * @return N/A
 */
SECTION_FUNC(TEXT, _isr_wrapper)

#if defined(CONFIG_CPU_CORTEX_M)
	push {r0,lr}		/* r0, lr are now the first items on the stack */
   1124c:	b501      	push	{r0, lr}
      * FIXME: Remove the Cortex-M conditional compilation checks for `cpsid i`
      *        and `cpsie i` after the Cortex-R port is updated to support
      *        interrupt nesting.  For more details, refer to the issue #21758.
      */
#if defined(CONFIG_CPU_CORTEX_M)
	cpsid i  /* PRIMASK = 1 */
   1124e:	b672      	cpsid	i
#endif

	/* is this a wakeup from idle ? */
	ldr r2, =_kernel
   11250:	4a0b      	ldr	r2, [pc, #44]	; (11280 <_isr_wrapper+0x34>)
	/* requested idle duration, in ticks */
	ldr r0, [r2, #_kernel_offset_to_idle]
   11252:	6a10      	ldr	r0, [r2, #32]
	cmp r0, #0
   11254:	2800      	cmp	r0, #0
	str r1, [r2, #_kernel_offset_to_idle]
	bl z_sys_power_save_idle_exit
_idle_state_cleared:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	ittt ne
   11256:	bf1e      	ittt	ne
	movne	r1, #0
   11258:	2100      	movne	r1, #0
		/* clear kernel idle state */
		strne	r1, [r2, #_kernel_offset_to_idle]
   1125a:	6211      	strne	r1, [r2, #32]
		blne	z_sys_power_save_idle_exit
   1125c:	f002 fdf4 	blne	13e48 <z_sys_power_save_idle_exit>
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
	cpsie i		/* re-enable interrupts (PRIMASK = 0) */
   11260:	b662      	cpsie	i
#endif

#endif /* CONFIG_SYS_POWER_MANAGEMENT */

#if defined(CONFIG_CPU_CORTEX_M)
	mrs r0, IPSR	/* get exception number */
   11262:	f3ef 8005 	mrs	r0, IPSR
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r1, =16
	subs r0, r1	/* get IRQ number */
	lsls r0, #3	/* table is 8-byte wide */
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	sub r0, r0, #16	/* get IRQ number */
   11266:	f1a0 0010 	sub.w	r0, r0, #16
	lsl r0, r0, #3	/* table is 8-byte wide */
   1126a:	ea4f 00c0 	mov.w	r0, r0, lsl #3
	 */
	mov r0, #0
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
	ldr r1, =_sw_isr_table
   1126e:	4905      	ldr	r1, [pc, #20]	; (11284 <_isr_wrapper+0x38>)
	add r1, r1, r0	/* table entry: ISRs must have their MSB set to stay
   11270:	4401      	add	r1, r0
			 * in thumb mode */

	ldm r1!,{r0,r3}	/* arg in r0, ISR in r3 */
   11272:	c909      	ldmia	r1!, {r0, r3}
#else
	pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
	ldm sp!,{r0-r3} /* Restore r0 to r3 regs */
#endif /* CONFIG_EXECUTION_BENCHMARKING */
	blx r3		/* call ISR */
   11274:	4798      	blx	r3

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	pop {r0, r3}
	mov lr, r3
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	pop {r0, lr}
   11276:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
#endif

	/* Use 'bx' instead of 'b' because 'bx' can jump further, and use
	 * 'bx' instead of 'blx' because exception return is done in
	 * z_arm_int_exit() */
	ldr r1, =z_arm_int_exit
   1127a:	4903      	ldr	r1, [pc, #12]	; (11288 <_isr_wrapper+0x3c>)
	bx r1
   1127c:	4708      	bx	r1
   1127e:	0000      	.short	0x0000
	ldr r2, =_kernel
   11280:	2000062c 	.word	0x2000062c
	ldr r1, =_sw_isr_table
   11284:	00014054 	.word	0x00014054
	ldr r1, =z_arm_int_exit
   11288:	00011029 	.word	0x00011029

0001128c <__start>:
 * search for a __start symbol instead, so create that alias here.
 */
SECTION_SUBSEC_FUNC(TEXT,_reset_section,__start)

#if defined(CONFIG_PLATFORM_SPECIFIC_INIT)
    bl z_platform_init
   1128c:	f002 fb8b 	bl	139a6 <z_platform_init>

    /* lock interrupts: will get unlocked when switch to main task */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
   11290:	2020      	movs	r0, #32
    msr BASEPRI, r0
   11292:	f380 8811 	msr	BASEPRI, r0

    /*
     * Set PSP and use it to boot without using MSP, so that it
     * gets set to _interrupt_stack during initialization.
     */
    ldr r0, =_interrupt_stack
   11296:	4808      	ldr	r0, [pc, #32]	; (112b8 <__start+0x2c>)
    ldr r1, =CONFIG_ISR_STACK_SIZE
   11298:	f44f 6100 	mov.w	r1, #2048	; 0x800
    adds r0, r0, r1
   1129c:	1840      	adds	r0, r0, r1
    msr PSP, r0
   1129e:	f380 8809 	msr	PSP, r0
    mrs r0, CONTROL
   112a2:	f3ef 8014 	mrs	r0, CONTROL
    movs r1, #2
   112a6:	2102      	movs	r1, #2
    orrs r0, r1 /* CONTROL_SPSEL_Msk */
   112a8:	4308      	orrs	r0, r1
    msr CONTROL, r0
   112aa:	f380 8814 	msr	CONTROL, r0
    /*
     * When changing the stack pointer, software must use an ISB instruction
     * immediately after the MSR instruction. This ensures that instructions
     * after the ISB instruction execute using the new stack pointer.
     */
    isb
   112ae:	f3bf 8f6f 	isb	sy
    /*
     * 'bl' jumps the furthest of the branch instructions that are
     * supported on all platforms. So it is used when jumping to z_arm_prep_c
     * (even though we do not intend to return).
     */
    bl z_arm_prep_c
   112b2:	f7ff ffa1 	bl	111f8 <z_arm_prep_c>
   112b6:	0000      	.short	0x0000
    ldr r0, =_interrupt_stack
   112b8:	20000bd0 	.word	0x20000bd0

000112bc <mem_manage_fault.isra.2>:
	u32_t reason = K_ERR_CPU_EXCEPTION;
	u32_t mmfar = -EINVAL;

	PR_FAULT_INFO("***** MPU FAULT *****");

	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
   112bc:	4b0c      	ldr	r3, [pc, #48]	; (112f0 <mem_manage_fault.isra.2+0x34>)
   112be:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Stacking error (context area might be"
			" not valid)");
	}
	if ((SCB->CFSR & SCB_CFSR_MUNSTKERR_Msk) != 0) {
   112c0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Unstacking error");
	}
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
   112c2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   112c4:	0792      	lsls	r2, r2, #30
   112c6:	d508      	bpl.n	112da <mem_manage_fault.isra.2+0x1e>
		 * The MMFAR address is valid only if this bit is 1.
		 *
		 * Software must follow this sequence because another higher
		 * priority exception might change the MMFAR value.
		 */
		mmfar = SCB->MMFAR;
   112c8:	6b5a      	ldr	r2, [r3, #52]	; 0x34

		if ((SCB->CFSR & SCB_CFSR_MMARVALID_Msk) != 0) {
   112ca:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   112cc:	0612      	lsls	r2, r2, #24
   112ce:	d504      	bpl.n	112da <mem_manage_fault.isra.2+0x1e>
			PR_EXC("  MMFAR Address: 0x%x", mmfar);
			if (from_hard_fault) {
   112d0:	b118      	cbz	r0, 112da <mem_manage_fault.isra.2+0x1e>
				/* clear SCB_MMAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
   112d2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   112d4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
   112d8:	629a      	str	r2, [r3, #40]	; 0x28

	/* clear MMFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;

	/* Assess whether system shall ignore/recover from this MPU fault. */
	*recoverable = memory_fault_recoverable(esf);
   112da:	2000      	movs	r0, #0
	if ((SCB->CFSR & SCB_CFSR_IACCVIOL_Msk) != 0) {
   112dc:	4b04      	ldr	r3, [pc, #16]	; (112f0 <mem_manage_fault.isra.2+0x34>)
   112de:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
   112e0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if (SCB->CFSR & SCB_CFSR_MSTKERR_Msk) {
   112e2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
   112e4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   112e6:	f042 02ff 	orr.w	r2, r2, #255	; 0xff
   112ea:	629a      	str	r2, [r3, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf);
   112ec:	7008      	strb	r0, [r1, #0]

	return reason;
}
   112ee:	4770      	bx	lr
   112f0:	e000ed00 	.word	0xe000ed00

000112f4 <bus_fault.isra.3>:
{
	u32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** BUS FAULT *****");

	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
   112f4:	4b0d      	ldr	r3, [pc, #52]	; (1132c <bus_fault.isra.3+0x38>)
   112f6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Stacking error");
	}
	if (SCB->CFSR & SCB_CFSR_UNSTKERR_Msk) {
   112f8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Unstacking error");
	}
	if (SCB->CFSR & SCB_CFSR_PRECISERR_Msk) {
   112fa:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   112fc:	0592      	lsls	r2, r2, #22
   112fe:	d508      	bpl.n	11312 <bus_fault.isra.3+0x1e>
		 * The BFAR address is valid only if this bit is 1.
		 *
		 * Software must follow this sequence because another
		 * higher priority exception might change the BFAR value.
		 */
		STORE_xFAR(bfar, SCB->BFAR);
   11300:	6b9a      	ldr	r2, [r3, #56]	; 0x38

		if ((SCB->CFSR & SCB_CFSR_BFARVALID_Msk) != 0) {
   11302:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   11304:	0412      	lsls	r2, r2, #16
   11306:	d504      	bpl.n	11312 <bus_fault.isra.3+0x1e>
			PR_EXC("  BFAR Address: 0x%x", bfar);
			if (from_hard_fault) {
   11308:	b118      	cbz	r0, 11312 <bus_fault.isra.3+0x1e>
				/* clear SCB_CFSR_BFAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_BFARVALID_Msk;
   1130a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   1130c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
   11310:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* defined(CONFIG_ARM_MPU) && defined(CONFIG_CPU_HAS_NXP_MPU) */

	/* clear BFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;

	*recoverable = memory_fault_recoverable(esf);
   11312:	2000      	movs	r0, #0
	if (SCB->CFSR & SCB_CFSR_IMPRECISERR_Msk) {
   11314:	4b05      	ldr	r3, [pc, #20]	; (1132c <bus_fault.isra.3+0x38>)
   11316:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_IBUSERR_Msk) != 0) {
   11318:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   1131a:	05d2      	lsls	r2, r2, #23
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
   1131c:	bf58      	it	pl
   1131e:	6a9a      	ldrpl	r2, [r3, #40]	; 0x28
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
   11320:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   11322:	f442 427f 	orr.w	r2, r2, #65280	; 0xff00
   11326:	629a      	str	r2, [r3, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf);
   11328:	7008      	strb	r0, [r1, #0]

	return reason;
}
   1132a:	4770      	bx	lr
   1132c:	e000ed00 	.word	0xe000ed00

00011330 <usage_fault.isra.4>:
	u32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** USAGE FAULT *****");

	/* bits are sticky: they stack and must be reset */
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
   11330:	4b07      	ldr	r3, [pc, #28]	; (11350 <usage_fault.isra.4+0x20>)

	/* clear UFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;

	return reason;
}
   11332:	2000      	movs	r0, #0
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
   11334:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_UNALIGNED_Msk) != 0) {
   11336:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_STKOF_Msk) != 0) {
   11338:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_NOCP_Msk) != 0) {
   1133a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_INVPC_Msk) != 0) {
   1133c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_INVSTATE_Msk) != 0) {
   1133e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_UNDEFINSTR_Msk) != 0) {
   11340:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
   11342:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   11344:	ea6f 4202 	mvn.w	r2, r2, lsl #16
   11348:	ea6f 4212 	mvn.w	r2, r2, lsr #16
   1134c:	629a      	str	r2, [r3, #40]	; 0x28
}
   1134e:	4770      	bx	lr
   11350:	e000ed00 	.word	0xe000ed00

00011354 <secure_fault.isra.5>:
 */
static void secure_fault(const z_arch_esf_t *esf)
{
	PR_FAULT_INFO("***** SECURE FAULT *****");

	STORE_xFAR(sfar, SAU->SFAR);
   11354:	4b0d      	ldr	r3, [pc, #52]	; (1138c <secure_fault.isra.5+0x38>)
   11356:	699a      	ldr	r2, [r3, #24]
	if ((SAU->SFSR & SAU_SFSR_SFARVALID_Msk) != 0) {
   11358:	695a      	ldr	r2, [r3, #20]
		PR_EXC("  Address: 0x%x", sfar);
	}

	/* bits are sticky: they stack and must be reset */
	if ((SAU->SFSR & SAU_SFSR_INVEP_Msk) != 0) {
   1135a:	695a      	ldr	r2, [r3, #20]
   1135c:	07d0      	lsls	r0, r2, #31
   1135e:	d40f      	bmi.n	11380 <secure_fault.isra.5+0x2c>
		PR_FAULT_INFO("  Invalid entry point");
	} else if ((SAU->SFSR & SAU_SFSR_INVIS_Msk) != 0) {
   11360:	695a      	ldr	r2, [r3, #20]
   11362:	0791      	lsls	r1, r2, #30
   11364:	d40c      	bmi.n	11380 <secure_fault.isra.5+0x2c>
		PR_FAULT_INFO("  Invalid integrity signature");
	} else if ((SAU->SFSR & SAU_SFSR_INVER_Msk) != 0) {
   11366:	695a      	ldr	r2, [r3, #20]
   11368:	0752      	lsls	r2, r2, #29
   1136a:	d409      	bmi.n	11380 <secure_fault.isra.5+0x2c>
		PR_FAULT_INFO("  Invalid exception return");
	} else if ((SAU->SFSR & SAU_SFSR_AUVIOL_Msk) != 0) {
   1136c:	695a      	ldr	r2, [r3, #20]
   1136e:	0710      	lsls	r0, r2, #28
   11370:	d406      	bmi.n	11380 <secure_fault.isra.5+0x2c>
		PR_FAULT_INFO("  Attribution unit violation");
	} else if ((SAU->SFSR & SAU_SFSR_INVTRAN_Msk) != 0) {
   11372:	695a      	ldr	r2, [r3, #20]
   11374:	06d1      	lsls	r1, r2, #27
   11376:	d403      	bmi.n	11380 <secure_fault.isra.5+0x2c>
		PR_FAULT_INFO("  Invalid transition");
	} else if ((SAU->SFSR & SAU_SFSR_LSPERR_Msk) != 0) {
   11378:	695a      	ldr	r2, [r3, #20]
   1137a:	0692      	lsls	r2, r2, #26
		PR_FAULT_INFO("  Lazy state preservation");
	} else if ((SAU->SFSR & SAU_SFSR_LSERR_Msk) != 0) {
   1137c:	bf58      	it	pl
   1137e:	695a      	ldrpl	r2, [r3, #20]
		PR_FAULT_INFO("  Lazy state error");
	}

	/* clear SFSR sticky bits */
	SAU->SFSR |= 0xFF;
   11380:	695a      	ldr	r2, [r3, #20]
   11382:	f042 02ff 	orr.w	r2, r2, #255	; 0xff
   11386:	615a      	str	r2, [r3, #20]
}
   11388:	4770      	bx	lr
   1138a:	bf00      	nop
   1138c:	e000edd0 	.word	0xe000edd0

00011390 <z_arm_fault>:
 * @param psp PSP value immediately after the exception occurred
 * @param exc_return EXC_RETURN value present in LR after exception entry.
 *
 */
void z_arm_fault(u32_t msp, u32_t psp, u32_t exc_return)
{
   11390:	b5f0      	push	{r4, r5, r6, r7, lr}
	u32_t reason = K_ERR_CPU_EXCEPTION;
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
   11392:	4b41      	ldr	r3, [pc, #260]	; (11498 <z_arm_fault+0x108>)
{
   11394:	b08b      	sub	sp, #44	; 0x2c
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
   11396:	685b      	ldr	r3, [r3, #4]
   11398:	2500      	movs	r5, #0
   1139a:	f3c3 0308 	ubfx	r3, r3, #0, #9
   1139e:	f385 8811 	msr	BASEPRI, r5
   113a2:	f3bf 8f6f 	isb	sy
	if ((exc_return & EXC_RETURN_INDICATOR_PREFIX) !=
   113a6:	f002 447f 	and.w	r4, r2, #4278190080	; 0xff000000
   113aa:	f1b4 4f7f 	cmp.w	r4, #4278190080	; 0xff000000
   113ae:	d11e      	bne.n	113ee <z_arm_fault+0x5e>
	if ((exc_return & EXC_RETURN_EXCEPTION_SECURE_Secure) == 0U) {
   113b0:	f012 0401 	ands.w	r4, r2, #1
   113b4:	d01a      	beq.n	113ec <z_arm_fault+0x5c>
	if (exc_return & EXC_RETURN_RETURN_STACK_Secure) {
   113b6:	0656      	lsls	r6, r2, #25
   113b8:	f002 0408 	and.w	r4, r2, #8
   113bc:	d467      	bmi.n	1148e <z_arm_fault+0xfe>
		if (exc_return & EXC_RETURN_SPSEL_PROCESS) {
   113be:	f082 0204 	eor.w	r2, r2, #4
   113c2:	f3c2 0580 	ubfx	r5, r2, #2, #1
		if (exc_return & EXC_RETURN_MODE_THREAD) {
   113c6:	b164      	cbz	r4, 113e2 <z_arm_fault+0x52>
  __ASM volatile ("MRS %0, psp_ns"  : "=r" (result) );
   113c8:	f3ef 8689 	mrs	r6, PSP_NS
	*recoverable = false;
   113cc:	2200      	movs	r2, #0
	switch (fault) {
   113ce:	3b03      	subs	r3, #3
	*recoverable = false;
   113d0:	f88d 2007 	strb.w	r2, [sp, #7]
	switch (fault) {
   113d4:	2b04      	cmp	r3, #4
   113d6:	d84b      	bhi.n	11470 <z_arm_fault+0xe0>
   113d8:	e8df f003 	tbb	[pc, r3]
   113dc:	41504c0b 	.word	0x41504c0b
   113e0:	48          	.byte	0x48
   113e1:	00          	.byte	0x00
  __ASM volatile ("MRS %0, msp_ns" : "=r" (result) );
   113e2:	f3ef 8688 	mrs	r6, MSP_NS
  return(result);
   113e6:	e7f1      	b.n	113cc <z_arm_fault+0x3c>
			ptr_esf =  (z_arch_esf_t *)psp;
   113e8:	460e      	mov	r6, r1
   113ea:	e7ef      	b.n	113cc <z_arm_fault+0x3c>
	*nested_exc = false;
   113ec:	4625      	mov	r5, r4
		return NULL;
   113ee:	462e      	mov	r6, r5
   113f0:	e7ec      	b.n	113cc <z_arm_fault+0x3c>
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
   113f2:	4b29      	ldr	r3, [pc, #164]	; (11498 <z_arm_fault+0x108>)
   113f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   113f6:	0792      	lsls	r2, r2, #30
   113f8:	d43a      	bmi.n	11470 <z_arm_fault+0xe0>
	} else if ((SCB->HFSR & SCB_HFSR_FORCED_Msk) != 0) {
   113fa:	6adc      	ldr	r4, [r3, #44]	; 0x2c
   113fc:	f014 4480 	ands.w	r4, r4, #1073741824	; 0x40000000
   11400:	d008      	beq.n	11414 <z_arm_fault+0x84>
		if (SCB_MMFSR != 0) {
   11402:	3328      	adds	r3, #40	; 0x28
   11404:	781b      	ldrb	r3, [r3, #0]
   11406:	b1eb      	cbz	r3, 11444 <z_arm_fault+0xb4>
			reason = mem_manage_fault(esf, 1, recoverable);
   11408:	2001      	movs	r0, #1
   1140a:	f10d 0107 	add.w	r1, sp, #7
		reason = mem_manage_fault(esf, 0, recoverable);
   1140e:	f7ff ff55 	bl	112bc <mem_manage_fault.isra.2>
   11412:	4604      	mov	r4, r0
	 esf = get_esf(msp, psp, exc_return, &nested_exc);
	__ASSERT(esf != NULL,
		"ESF could not be retrieved successfully. Shall never occur.");

	reason = fault_handle(esf, fault, &recoverable);
	if (recoverable) {
   11414:	f89d 3007 	ldrb.w	r3, [sp, #7]
   11418:	b993      	cbnz	r3, 11440 <z_arm_fault+0xb0>
		return;
	}

	/* Copy ESF */
	memcpy(&esf_copy, esf, sizeof(z_arch_esf_t));
   1141a:	2220      	movs	r2, #32
   1141c:	4631      	mov	r1, r6
   1141e:	a802      	add	r0, sp, #8
   11420:	f002 fcaa 	bl	13d78 <memcpy>
	/* Overwrite stacked IPSR to mark a nested exception,
	 * or a return to Thread mode. Note that this may be
	 * required, if the retrieved ESF contents are invalid
	 * due to, for instance, a stacking error.
	 */
	if (nested_exc) {
   11424:	9b09      	ldr	r3, [sp, #36]	; 0x24
   11426:	b36d      	cbz	r5, 11484 <z_arm_fault+0xf4>
		if ((esf_copy.basic.xpsr & IPSR_ISR_Msk) == 0) {
   11428:	f3c3 0208 	ubfx	r2, r3, #0, #9
   1142c:	b922      	cbnz	r2, 11438 <z_arm_fault+0xa8>
			esf_copy.basic.xpsr |= IPSR_ISR_Msk;
   1142e:	ea6f 2353 	mvn.w	r3, r3, lsr #9
   11432:	ea6f 2343 	mvn.w	r3, r3, lsl #9
		}
	} else {
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
   11436:	9309      	str	r3, [sp, #36]	; 0x24
	}

	z_arm_fatal_error(reason, &esf_copy);
   11438:	a902      	add	r1, sp, #8
   1143a:	4620      	mov	r0, r4
   1143c:	f002 fc29 	bl	13c92 <z_arm_fatal_error>
}
   11440:	b00b      	add	sp, #44	; 0x2c
   11442:	bdf0      	pop	{r4, r5, r6, r7, pc}
		} else if (SCB_BFSR != 0) {
   11444:	4b15      	ldr	r3, [pc, #84]	; (1149c <z_arm_fault+0x10c>)
   11446:	781b      	ldrb	r3, [r3, #0]
   11448:	b12b      	cbz	r3, 11456 <z_arm_fault+0xc6>
			reason = bus_fault(esf, 1, recoverable);
   1144a:	2001      	movs	r0, #1
   1144c:	f10d 0107 	add.w	r1, sp, #7
		reason = bus_fault(esf, 0, recoverable);
   11450:	f7ff ff50 	bl	112f4 <bus_fault.isra.3>
   11454:	e7dd      	b.n	11412 <z_arm_fault+0x82>
		} else if (SCB_UFSR != 0) {
   11456:	4b12      	ldr	r3, [pc, #72]	; (114a0 <z_arm_fault+0x110>)
   11458:	881f      	ldrh	r7, [r3, #0]
   1145a:	b2bf      	uxth	r7, r7
   1145c:	b117      	cbz	r7, 11464 <z_arm_fault+0xd4>
		reason = usage_fault(esf);
   1145e:	f7ff ff67 	bl	11330 <usage_fault.isra.4>
   11462:	e7d6      	b.n	11412 <z_arm_fault+0x82>
		} else if (SAU->SFSR != 0) {
   11464:	4b0f      	ldr	r3, [pc, #60]	; (114a4 <z_arm_fault+0x114>)
   11466:	695c      	ldr	r4, [r3, #20]
   11468:	2c00      	cmp	r4, #0
   1146a:	d0d3      	beq.n	11414 <z_arm_fault+0x84>
		secure_fault(esf);
   1146c:	f7ff ff72 	bl	11354 <secure_fault.isra.5>
	u32_t reason = K_ERR_CPU_EXCEPTION;
   11470:	2400      	movs	r4, #0
   11472:	e7cf      	b.n	11414 <z_arm_fault+0x84>
		reason = mem_manage_fault(esf, 0, recoverable);
   11474:	f10d 0107 	add.w	r1, sp, #7
   11478:	2000      	movs	r0, #0
   1147a:	e7c8      	b.n	1140e <z_arm_fault+0x7e>
		reason = bus_fault(esf, 0, recoverable);
   1147c:	f10d 0107 	add.w	r1, sp, #7
   11480:	2000      	movs	r0, #0
   11482:	e7e5      	b.n	11450 <z_arm_fault+0xc0>
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
   11484:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
   11488:	f023 0301 	bic.w	r3, r3, #1
   1148c:	e7d3      	b.n	11436 <z_arm_fault+0xa6>
		if (exc_return & EXC_RETURN_MODE_THREAD) {
   1148e:	2c00      	cmp	r4, #0
   11490:	d1aa      	bne.n	113e8 <z_arm_fault+0x58>
			ptr_esf = (z_arch_esf_t *)msp;
   11492:	4606      	mov	r6, r0
			*nested_exc = true;
   11494:	2501      	movs	r5, #1
   11496:	e799      	b.n	113cc <z_arm_fault+0x3c>
   11498:	e000ed00 	.word	0xe000ed00
   1149c:	e000ed29 	.word	0xe000ed29
   114a0:	e000ed2a 	.word	0xe000ed2a
   114a4:	e000edd0 	.word	0xe000edd0

000114a8 <z_arm_fault_init>:
 */
void z_arm_fault_init(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
   114a8:	4a02      	ldr	r2, [pc, #8]	; (114b4 <z_arm_fault_init+0xc>)
   114aa:	6953      	ldr	r3, [r2, #20]
   114ac:	f043 0310 	orr.w	r3, r3, #16
   114b0:	6153      	str	r3, [r2, #20]
	 * Stack to attempt to descend into secure region, in which case a
	 * Secure Hard Fault will occur and we can track the fault from there.
	 */
	SCB->CCR |= SCB_CCR_STKOFHFNMIGN_Msk;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
}
   114b2:	4770      	bx	lr
   114b4:	e000ed00 	.word	0xe000ed00

000114b8 <sys_arch_reboot>:
  __ASM volatile ("dsb 0xF":::"memory");
   114b8:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
   114bc:	4905      	ldr	r1, [pc, #20]	; (114d4 <sys_arch_reboot+0x1c>)
   114be:	4b06      	ldr	r3, [pc, #24]	; (114d8 <sys_arch_reboot+0x20>)
   114c0:	68ca      	ldr	r2, [r1, #12]
   114c2:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
   114c6:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
   114c8:	60cb      	str	r3, [r1, #12]
   114ca:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
   114ce:	bf00      	nop
   114d0:	e7fd      	b.n	114ce <sys_arch_reboot+0x16>
   114d2:	bf00      	nop
   114d4:	e000ed00 	.word	0xe000ed00
   114d8:	05fa0004 	.word	0x05fa0004

000114dc <z_arm_int_lib_init>:
 * @return N/A
 */

void z_arm_int_lib_init(void)
{
	int irq = 0;
   114dc:	2300      	movs	r3, #0
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   114de:	2120      	movs	r1, #32
   114e0:	4803      	ldr	r0, [pc, #12]	; (114f0 <z_arm_int_lib_init+0x14>)
   114e2:	18c2      	adds	r2, r0, r3

	for (; irq < CONFIG_NUM_IRQS; irq++) {
   114e4:	3301      	adds	r3, #1
   114e6:	2b41      	cmp	r3, #65	; 0x41
   114e8:	f882 1300 	strb.w	r1, [r2, #768]	; 0x300
   114ec:	d1f9      	bne.n	114e2 <z_arm_int_lib_init+0x6>
		NVIC_SetPriority((IRQn_Type)irq, _IRQ_PRIO_OFFSET);
	}
}
   114ee:	4770      	bx	lr
   114f0:	e000e100 	.word	0xe000e100

000114f4 <z_impl_k_thread_abort>:
#include <sys/__assert.h>

extern void z_thread_single_abort(struct k_thread *thread);

void z_impl_k_thread_abort(k_tid_t thread)
{
   114f4:	b538      	push	{r3, r4, r5, lr}
   114f6:	4605      	mov	r5, r0
	__asm__ volatile(
   114f8:	f04f 0320 	mov.w	r3, #32
   114fc:	f3ef 8411 	mrs	r4, BASEPRI
   11500:	f383 8811 	msr	BASEPRI, r3
   11504:	f3bf 8f6f 	isb	sy
	key = irq_lock();

	__ASSERT(!(thread->base.user_options & K_ESSENTIAL),
		 "essential thread aborted");

	z_thread_single_abort(thread);
   11508:	f000 fef0 	bl	122ec <z_thread_single_abort>
	z_thread_monitor_exit(thread);

	if (_current == thread) {
   1150c:	4b0a      	ldr	r3, [pc, #40]	; (11538 <z_impl_k_thread_abort+0x44>)
   1150e:	689b      	ldr	r3, [r3, #8]
   11510:	42ab      	cmp	r3, r5
   11512:	d10b      	bne.n	1152c <z_impl_k_thread_abort+0x38>
		if ((SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk) == 0) {
   11514:	4b09      	ldr	r3, [pc, #36]	; (1153c <z_impl_k_thread_abort+0x48>)
   11516:	685a      	ldr	r2, [r3, #4]
   11518:	f3c2 0208 	ubfx	r2, r2, #0, #9
   1151c:	b912      	cbnz	r2, 11524 <z_impl_k_thread_abort+0x30>
	int ret;
	z_check_stack_sentinel();
#ifndef CONFIG_ARM
	sys_trace_thread_switched_out();
#endif
	ret = arch_swap(key);
   1151e:	4620      	mov	r0, r4
   11520:	f7ff fd90 	bl	11044 <arch_swap>
			(void)z_swap_irqlock(key);
			CODE_UNREACHABLE;
		} else {
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
   11524:	685a      	ldr	r2, [r3, #4]
   11526:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
   1152a:	605a      	str	r2, [r3, #4]
		}
	}

	/* The abort handler might have altered the ready queue. */
	z_reschedule_irqlock(key);
   1152c:	4620      	mov	r0, r4
}
   1152e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule_irqlock(key);
   11532:	f002 bcc1 	b.w	13eb8 <z_reschedule_irqlock>
   11536:	bf00      	nop
   11538:	2000062c 	.word	0x2000062c
   1153c:	e000ed00 	.word	0xe000ed00

00011540 <z_arm_configure_static_mpu_regions>:
 *
 * For some MPU architectures, such as the unmodified ARMv8-M MPU,
 * the function must execute with MPU enabled.
 */
void z_arm_configure_static_mpu_regions(void)
{
   11540:	b510      	push	{r4, lr}
		.size = (u32_t)&_nocache_ram_size,
		.attr = K_MEM_PARTITION_P_RW_U_NA_NOCACHE,
		};
#endif /* CONFIG_NOCACHE_MEMORY */
#if defined(CONFIG_ARCH_HAS_RAMFUNC_SUPPORT)
		const struct k_mem_partition ramfunc_region =
   11542:	4b0e      	ldr	r3, [pc, #56]	; (1157c <z_arm_configure_static_mpu_regions+0x3c>)
{
   11544:	b088      	sub	sp, #32
		const struct k_mem_partition ramfunc_region =
   11546:	9302      	str	r3, [sp, #8]
   11548:	4b0d      	ldr	r3, [pc, #52]	; (11580 <z_arm_configure_static_mpu_regions+0x40>)
	/* Configure the static MPU regions within firmware SRAM boundaries.
	 * Start address of the image is given by _image_ram_start. The end
	 * of the firmware SRAM area is marked by __kernel_ram_end, taking
	 * into account the unused SRAM area, as well.
	 */
	arm_core_mpu_configure_static_mpu_regions(static_regions,
   1154a:	4c0e      	ldr	r4, [pc, #56]	; (11584 <z_arm_configure_static_mpu_regions+0x44>)
		const struct k_mem_partition ramfunc_region =
   1154c:	9303      	str	r3, [sp, #12]
   1154e:	4b0e      	ldr	r3, [pc, #56]	; (11588 <z_arm_configure_static_mpu_regions+0x48>)
	arm_core_mpu_configure_static_mpu_regions(static_regions,
   11550:	4a0e      	ldr	r2, [pc, #56]	; (1158c <z_arm_configure_static_mpu_regions+0x4c>)
		const struct k_mem_partition ramfunc_region =
   11552:	9304      	str	r3, [sp, #16]
	const struct k_mem_partition *static_regions[] = {
   11554:	ab02      	add	r3, sp, #8
   11556:	9301      	str	r3, [sp, #4]
	arm_core_mpu_configure_static_mpu_regions(static_regions,
   11558:	a801      	add	r0, sp, #4
   1155a:	4623      	mov	r3, r4
   1155c:	2101      	movs	r1, #1
   1155e:	f000 f903 	bl	11768 <arm_core_mpu_configure_static_mpu_regions>
	/* Define a constant array of k_mem_partition objects that holds the
	 * boundaries of the areas, inside which dynamic region programming
	 * is allowed. The information is passed to the underlying driver at
	 * initialization.
	 */
	const struct k_mem_partition dyn_region_areas[] = {
   11562:	2300      	movs	r3, #0
   11564:	9307      	str	r3, [sp, #28]
		{
		.start = _MPU_DYNAMIC_REGIONS_AREA_START,
   11566:	4b0a      	ldr	r3, [pc, #40]	; (11590 <z_arm_configure_static_mpu_regions+0x50>)
		.size =  _MPU_DYNAMIC_REGIONS_AREA_SIZE,
		}
	};

	arm_core_mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
   11568:	2101      	movs	r1, #1
		.size =  _MPU_DYNAMIC_REGIONS_AREA_SIZE,
   1156a:	1ae4      	subs	r4, r4, r3
	arm_core_mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
   1156c:	a805      	add	r0, sp, #20
	const struct k_mem_partition dyn_region_areas[] = {
   1156e:	9305      	str	r3, [sp, #20]
   11570:	9406      	str	r4, [sp, #24]
	arm_core_mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
   11572:	f000 f903 	bl	1177c <arm_core_mpu_mark_areas_for_dynamic_regions>
		ARRAY_SIZE(dyn_region_areas));
#endif /* CONFIG_MPU_REQUIRES_NON_OVERLAPPING_REGIONS */
}
   11576:	b008      	add	sp, #32
   11578:	bd10      	pop	{r4, pc}
   1157a:	bf00      	nop
   1157c:	20000000 	.word	0x20000000
   11580:	00000000 	.word	0x00000000
   11584:	20010000 	.word	0x20010000
   11588:	00010006 	.word	0x00010006
   1158c:	20000000 	.word	0x20000000
   11590:	20000000 	.word	0x20000000

00011594 <region_init>:
 * Note:
 *   The caller must provide a valid region index.
 */
static void region_init(const u32_t index,
	const struct arm_mpu_region *region_conf)
{
   11594:	b510      	push	{r4, lr}
	ARM_MPU_SetRegion(
		/* RNR */
		index,
		/* RBAR */
		(region_conf->base & MPU_RBAR_BASE_Msk)
   11596:	680b      	ldr	r3, [r1, #0]
		| (region_conf->attr.rbar &
   11598:	7a0c      	ldrb	r4, [r1, #8]
		(region_conf->base & MPU_RBAR_BASE_Msk)
   1159a:	f023 021f 	bic.w	r2, r3, #31
		| (region_conf->attr.rbar &
   1159e:	f004 031f 	and.w	r3, r4, #31
   115a2:	431a      	orrs	r2, r3
			(MPU_RBAR_XN_Msk | MPU_RBAR_AP_Msk | MPU_RBAR_SH_Msk)),
		/* RLAR */
		(region_conf->attr.r_limit & MPU_RLAR_LIMIT_Msk)
   115a4:	68cb      	ldr	r3, [r1, #12]
		| ((region_conf->attr.mair_idx << MPU_RLAR_AttrIndx_Pos)
   115a6:	0964      	lsrs	r4, r4, #5
		(region_conf->attr.r_limit & MPU_RLAR_LIMIT_Msk)
   115a8:	f023 031f 	bic.w	r3, r3, #31
* \param rbar Value for RBAR register.
* \param rlar Value for RLAR register.
*/   
__STATIC_INLINE void ARM_MPU_SetRegionEx(MPU_Type* mpu, uint32_t rnr, uint32_t rbar, uint32_t rlar)
{
  mpu->RNR = rnr;
   115ac:	4904      	ldr	r1, [pc, #16]	; (115c0 <region_init+0x2c>)
		| ((region_conf->attr.mair_idx << MPU_RLAR_AttrIndx_Pos)
   115ae:	ea43 0344 	orr.w	r3, r3, r4, lsl #1
			& MPU_RLAR_AttrIndx_Msk)
		| MPU_RLAR_EN_Msk
   115b2:	f043 0301 	orr.w	r3, r3, #1
   115b6:	6088      	str	r0, [r1, #8]
  mpu->RBAR = rbar;
   115b8:	60ca      	str	r2, [r1, #12]
  mpu->RLAR = rlar;
   115ba:	610b      	str	r3, [r1, #16]
	);

	LOG_DBG("[%d] 0x%08x 0x%08x 0x%08x 0x%08x",
			index, region_conf->base, region_conf->attr.rbar,
			region_conf->attr.mair_idx, region_conf->attr.r_limit);
}
   115bc:	bd10      	pop	{r4, pc}
   115be:	bf00      	nop
   115c0:	e000ed90 	.word	0xe000ed90

000115c4 <mpu_configure_regions_and_partition.constprop.1>:
 * sanity check of the memory regions to be programmed.
 *
 * The function performs a full partition of the background memory
 * area, effectively, leaving no space in this area uncovered by MPU.
 */
static int mpu_configure_regions_and_partition(const struct k_mem_partition
   115c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   115c8:	4680      	mov	r8, r0
   115ca:	4689      	mov	r9, r1
   115cc:	4614      	mov	r4, r2
	bool do_sanity_check)
{
	int i;
	int reg_index = start_reg_index;

	for (i = 0; i < regions_num; i++) {
   115ce:	2700      	movs	r7, #0
	MPU->RNR = index;
   115d0:	4d48      	ldr	r5, [pc, #288]	; (116f4 <mpu_configure_regions_and_partition.constprop.1+0x130>)
static int mpu_configure_regions_and_partition(const struct k_mem_partition
   115d2:	b085      	sub	sp, #20
	for (i = 0; i < regions_num; i++) {
   115d4:	454f      	cmp	r7, r9
   115d6:	da07      	bge.n	115e8 <mpu_configure_regions_and_partition.constprop.1+0x24>
		if (regions[i]->size == 0U) {
   115d8:	f858 3027 	ldr.w	r3, [r8, r7, lsl #2]
   115dc:	685e      	ldr	r6, [r3, #4]
   115de:	b3c6      	cbz	r6, 11652 <mpu_configure_regions_and_partition.constprop.1+0x8e>
		&&
   115e0:	2e1f      	cmp	r6, #31
   115e2:	d805      	bhi.n	115f0 <mpu_configure_regions_and_partition.constprop.1+0x2c>

			reg_index =
				mpu_configure_region(reg_index, regions[i]);

			if (reg_index == -EINVAL) {
				return reg_index;
   115e4:	f06f 0415 	mvn.w	r4, #21
			reg_index++;
		}
	}

	return reg_index;
}
   115e8:	4620      	mov	r0, r4
   115ea:	b005      	add	sp, #20
   115ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		&&
   115f0:	06f2      	lsls	r2, r6, #27
   115f2:	d1f7      	bne.n	115e4 <mpu_configure_regions_and_partition.constprop.1+0x20>
		((part->start &
   115f4:	f8d3 a000 	ldr.w	sl, [r3]
		&&
   115f8:	f01a 0f1f 	tst.w	sl, #31
   115fc:	d1f2      	bne.n	115e4 <mpu_configure_regions_and_partition.constprop.1+0x20>
	u32_t region_start_addr = arm_cmse_mpu_region_get(start);
   115fe:	4650      	mov	r0, sl
   11600:	f002 fb7e 	bl	13d00 <arm_cmse_mpu_region_get>
   11604:	4683      	mov	fp, r0
	u32_t region_end_addr = arm_cmse_mpu_region_get(start + size - 1);
   11606:	eb06 000a 	add.w	r0, r6, sl
   1160a:	3801      	subs	r0, #1
   1160c:	f002 fb78 	bl	13d00 <arm_cmse_mpu_region_get>
	if (region_start_addr == region_end_addr) {
   11610:	4583      	cmp	fp, r0
   11612:	d1e7      	bne.n	115e4 <mpu_configure_regions_and_partition.constprop.1+0x20>
		if ((u_reg_index == -EINVAL) ||
   11614:	f11b 0f16 	cmn.w	fp, #22
   11618:	d0e4      	beq.n	115e4 <mpu_configure_regions_and_partition.constprop.1+0x20>
			(u_reg_index > (reg_index - 1))) {
   1161a:	1e63      	subs	r3, r4, #1
		if ((u_reg_index == -EINVAL) ||
   1161c:	455b      	cmp	r3, fp
   1161e:	dbe1      	blt.n	115e4 <mpu_configure_regions_and_partition.constprop.1+0x20>
	MPU->RNR = index;
   11620:	f8c5 b008 	str.w	fp, [r5, #8]
	return MPU->RBAR & MPU_RBAR_BASE_Msk;
   11624:	68e8      	ldr	r0, [r5, #12]
		u32_t reg_last = regions[i]->start + regions[i]->size - 1;
   11626:	f858 1027 	ldr.w	r1, [r8, r7, lsl #2]
	MPU->RNR = index;
   1162a:	f8c5 b008 	str.w	fp, [r5, #8]
	return (MPU->RLAR & MPU_RLAR_LIMIT_Msk) | (~MPU_RLAR_LIMIT_Msk);
   1162e:	692e      	ldr	r6, [r5, #16]
	return MPU->RBAR & MPU_RBAR_BASE_Msk;
   11630:	f020 001f 	bic.w	r0, r0, #31
		u32_t reg_last = regions[i]->start + regions[i]->size - 1;
   11634:	e9d1 3200 	ldrd	r3, r2, [r1]
   11638:	441a      	add	r2, r3
		if ((regions[i]->start == u_reg_base) &&
   1163a:	4298      	cmp	r0, r3
	return (MPU->RLAR & MPU_RLAR_LIMIT_Msk) | (~MPU_RLAR_LIMIT_Msk);
   1163c:	f046 061f 	orr.w	r6, r6, #31
		u32_t reg_last = regions[i]->start + regions[i]->size - 1;
   11640:	f102 3aff 	add.w	sl, r2, #4294967295
		if ((regions[i]->start == u_reg_base) &&
   11644:	d118      	bne.n	11678 <mpu_configure_regions_and_partition.constprop.1+0xb4>
   11646:	4556      	cmp	r6, sl
   11648:	d105      	bne.n	11656 <mpu_configure_regions_and_partition.constprop.1+0x92>
			mpu_configure_region(u_reg_index, regions[i]);
   1164a:	fa5f f08b 	uxtb.w	r0, fp
   1164e:	f002 fb35 	bl	13cbc <mpu_configure_region>
	for (i = 0; i < regions_num; i++) {
   11652:	3701      	adds	r7, #1
   11654:	e7be      	b.n	115d4 <mpu_configure_regions_and_partition.constprop.1+0x10>
	MPU->RNR = index;
   11656:	f8c5 b008 	str.w	fp, [r5, #8]
	MPU->RBAR = (MPU->RBAR & (~MPU_RBAR_BASE_Msk))
   1165a:	68eb      	ldr	r3, [r5, #12]
		| (base & MPU_RBAR_BASE_Msk);
   1165c:	f022 021f 	bic.w	r2, r2, #31
	MPU->RBAR = (MPU->RBAR & (~MPU_RBAR_BASE_Msk))
   11660:	f003 031f 	and.w	r3, r3, #31
		| (base & MPU_RBAR_BASE_Msk);
   11664:	431a      	orrs	r2, r3
	MPU->RBAR = (MPU->RBAR & (~MPU_RBAR_BASE_Msk))
   11666:	60ea      	str	r2, [r5, #12]
				mpu_configure_region(reg_index, regions[i]);
   11668:	b2e0      	uxtb	r0, r4
				mpu_configure_region(reg_index, regions[i]);
   1166a:	f002 fb27 	bl	13cbc <mpu_configure_region>
			if (reg_index == -EINVAL) {
   1166e:	f110 0f16 	cmn.w	r0, #22
   11672:	d0b7      	beq.n	115e4 <mpu_configure_regions_and_partition.constprop.1+0x20>
			reg_index++;
   11674:	1c44      	adds	r4, r0, #1
   11676:	e7ec      	b.n	11652 <mpu_configure_regions_and_partition.constprop.1+0x8e>
	MPU->RNR = index;
   11678:	f8c5 b008 	str.w	fp, [r5, #8]
	MPU->RLAR = (MPU->RLAR & (~MPU_RLAR_LIMIT_Msk))
   1167c:	692a      	ldr	r2, [r5, #16]
   1167e:	3b01      	subs	r3, #1
   11680:	f023 031f 	bic.w	r3, r3, #31
   11684:	f002 021f 	and.w	r2, r2, #31
		| (limit & MPU_RLAR_LIMIT_Msk);
   11688:	4313      	orrs	r3, r2
		} else if (reg_last == u_reg_last) {
   1168a:	4556      	cmp	r6, sl
   1168c:	b2e0      	uxtb	r0, r4
	MPU->RLAR = (MPU->RLAR & (~MPU_RLAR_LIMIT_Msk))
   1168e:	612b      	str	r3, [r5, #16]
		} else if (reg_last == u_reg_last) {
   11690:	d0eb      	beq.n	1166a <mpu_configure_regions_and_partition.constprop.1+0xa6>
				mpu_configure_region(reg_index, regions[i]);
   11692:	f002 fb13 	bl	13cbc <mpu_configure_region>
			if (reg_index == -EINVAL) {
   11696:	f110 0f16 	cmn.w	r0, #22
   1169a:	d0a3      	beq.n	115e4 <mpu_configure_regions_and_partition.constprop.1+0x20>
	MPU->RNR = index;
   1169c:	f8c5 b008 	str.w	fp, [r5, #8]
	attr->rbar = MPU->RBAR &
   116a0:	68ea      	ldr	r2, [r5, #12]
   116a2:	f89d 3008 	ldrb.w	r3, [sp, #8]
			REGION_LIMIT_ADDR((regions[i]->start +
   116a6:	3e01      	subs	r6, #1
	attr->rbar = MPU->RBAR &
   116a8:	f362 0304 	bfi	r3, r2, #0, #5
   116ac:	f88d 3008 	strb.w	r3, [sp, #8]
	attr->mair_idx = (MPU->RLAR & MPU_RLAR_AttrIndx_Msk) >>
   116b0:	692b      	ldr	r3, [r5, #16]
   116b2:	f89d 2008 	ldrb.w	r2, [sp, #8]
   116b6:	085b      	lsrs	r3, r3, #1
   116b8:	f363 1247 	bfi	r2, r3, #5, #3
   116bc:	f88d 2008 	strb.w	r2, [sp, #8]
			fill_region.base = regions[i]->start +
   116c0:	f858 2027 	ldr.w	r2, [r8, r7, lsl #2]
			reg_index++;
   116c4:	3001      	adds	r0, #1
			fill_region.base = regions[i]->start +
   116c6:	e9d2 3200 	ldrd	r3, r2, [r2]
   116ca:	4413      	add	r3, r2
   116cc:	9300      	str	r3, [sp, #0]
			REGION_LIMIT_ADDR((regions[i]->start +
   116ce:	f023 031f 	bic.w	r3, r3, #31
   116d2:	441e      	add	r6, r3
   116d4:	eba6 060a 	sub.w	r6, r6, sl
   116d8:	b2c4      	uxtb	r4, r0
   116da:	f026 061f 	bic.w	r6, r6, #31

static int region_allocate_and_init(const u8_t index,
	const struct arm_mpu_region *region_conf)
{
	/* Attempt to allocate new region index. */
	if (index > (get_num_regions() - 1)) {
   116de:	2c0f      	cmp	r4, #15
			fill_region.attr.r_limit =
   116e0:	9603      	str	r6, [sp, #12]
   116e2:	f63f af7f 	bhi.w	115e4 <mpu_configure_regions_and_partition.constprop.1+0x20>
	}

	LOG_DBG("Program MPU region at index 0x%x", index);

	/* Program region */
	region_init(index, region_conf);
   116e6:	4620      	mov	r0, r4
   116e8:	4669      	mov	r1, sp
   116ea:	f7ff ff53 	bl	11594 <region_init>
			reg_index++;
   116ee:	3401      	adds	r4, #1
   116f0:	e7af      	b.n	11652 <mpu_configure_regions_and_partition.constprop.1+0x8e>
   116f2:	bf00      	nop
   116f4:	e000ed90 	.word	0xe000ed90

000116f8 <arm_core_mpu_enable>:
void arm_core_mpu_enable(void)
{
	/* Enable MPU and use the default memory map as a
	 * background region for privileged software access.
	 */
	MPU->CTRL = MPU_CTRL_ENABLE_Msk | MPU_CTRL_PRIVDEFENA_Msk;
   116f8:	2205      	movs	r2, #5
   116fa:	4b03      	ldr	r3, [pc, #12]	; (11708 <arm_core_mpu_enable+0x10>)
   116fc:	605a      	str	r2, [r3, #4]
   116fe:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   11702:	f3bf 8f6f 	isb	sy

	/* Make sure that all the registers are set before proceeding */
	__DSB();
	__ISB();
}
   11706:	4770      	bx	lr
   11708:	e000ed90 	.word	0xe000ed90

0001170c <arm_core_mpu_disable>:
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
   1170c:	f3bf 8f5f 	dmb	sy
{
	/* Force any outstanding transfers to complete before disabling MPU */
	__DMB();

	/* Disable MPU */
	MPU->CTRL = 0;
   11710:	2200      	movs	r2, #0
   11712:	4b01      	ldr	r3, [pc, #4]	; (11718 <arm_core_mpu_disable+0xc>)
   11714:	605a      	str	r2, [r3, #4]
}
   11716:	4770      	bx	lr
   11718:	e000ed90 	.word	0xe000ed90

0001171c <arm_mpu_init>:
 *
 * This function provides the default configuration mechanism for the Memory
 * Protection Unit (MPU).
 */
static int arm_mpu_init(struct device *arg)
{
   1171c:	b570      	push	{r4, r5, r6, lr}
	u32_t r_index;

	if (mpu_config.num_regions > get_num_regions()) {
   1171e:	4d0e      	ldr	r5, [pc, #56]	; (11758 <arm_mpu_init+0x3c>)
   11720:	682e      	ldr	r6, [r5, #0]
   11722:	2e10      	cmp	r6, #16
   11724:	d815      	bhi.n	11752 <arm_mpu_init+0x36>

	/* Architecture-specific configuration */
	mpu_init();

	/* Program fixed regions configured at SOC definition. */
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
   11726:	2400      	movs	r4, #0
	arm_core_mpu_disable();
   11728:	f7ff fff0 	bl	1170c <arm_core_mpu_disable>
	MPU->MAIR0 =
   1172c:	4b0b      	ldr	r3, [pc, #44]	; (1175c <arm_mpu_init+0x40>)
   1172e:	4a0c      	ldr	r2, [pc, #48]	; (11760 <arm_mpu_init+0x44>)
   11730:	631a      	str	r2, [r3, #48]	; 0x30
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
   11732:	42a6      	cmp	r6, r4
   11734:	d105      	bne.n	11742 <arm_mpu_init+0x26>
		region_init(r_index, &mpu_config.mpu_regions[r_index]);
	}

	/* Update the number of programmed MPU regions. */
	static_regions_num = mpu_config.num_regions;
   11736:	4b0b      	ldr	r3, [pc, #44]	; (11764 <arm_mpu_init+0x48>)
   11738:	701e      	strb	r6, [r3, #0]


	arm_core_mpu_enable();
   1173a:	f7ff ffdd 	bl	116f8 <arm_core_mpu_enable>
	__ASSERT(
		(MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos ==
		DT_NUM_MPU_REGIONS,
		"Invalid number of MPU regions\n");
#endif /* CORTEX_M0PLUS || CPU_CORTEX_M3 || CPU_CORTEX_M4 */
	return 0;
   1173e:	2000      	movs	r0, #0
}
   11740:	bd70      	pop	{r4, r5, r6, pc}
		region_init(r_index, &mpu_config.mpu_regions[r_index]);
   11742:	6869      	ldr	r1, [r5, #4]
   11744:	4620      	mov	r0, r4
   11746:	eb01 1104 	add.w	r1, r1, r4, lsl #4
   1174a:	f7ff ff23 	bl	11594 <region_init>
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
   1174e:	3401      	adds	r4, #1
   11750:	e7ef      	b.n	11732 <arm_mpu_init+0x16>
		return -1;
   11752:	f04f 30ff 	mov.w	r0, #4294967295
   11756:	e7f3      	b.n	11740 <arm_mpu_init+0x24>
   11758:	00014424 	.word	0x00014424
   1175c:	e000ed90 	.word	0xe000ed90
   11760:	0044ffaa 	.word	0x0044ffaa
   11764:	20000688 	.word	0x20000688

00011768 <arm_core_mpu_configure_static_mpu_regions>:
{
   11768:	b510      	push	{r4, lr}
static int mpu_configure_static_mpu_regions(const struct k_mem_partition
	*static_regions[], const u8_t regions_num,
	const u32_t background_area_base,
	const u32_t background_area_end)
{
	int mpu_reg_index = static_regions_num;
   1176a:	4c03      	ldr	r4, [pc, #12]	; (11778 <arm_core_mpu_configure_static_mpu_regions+0x10>)
	 * given boundaries.
	 */
	ARG_UNUSED(background_area_base);
	ARG_UNUSED(background_area_end);

	mpu_reg_index = mpu_configure_regions_and_partition(static_regions,
   1176c:	7822      	ldrb	r2, [r4, #0]
   1176e:	f7ff ff29 	bl	115c4 <mpu_configure_regions_and_partition.constprop.1>
		regions_num, mpu_reg_index, true);

	static_regions_num = mpu_reg_index;
   11772:	7020      	strb	r0, [r4, #0]
}
   11774:	bd10      	pop	{r4, pc}
   11776:	bf00      	nop
   11778:	20000688 	.word	0x20000688

0001177c <arm_core_mpu_mark_areas_for_dynamic_regions>:
{
   1177c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11780:	4c25      	ldr	r4, [pc, #148]	; (11818 <arm_core_mpu_mark_areas_for_dynamic_regions+0x9c>)
   11782:	468a      	mov	sl, r1
{
	/* In ARMv8-M architecture we need to store the index values
	 * and the default configuration of the MPU regions, inside
	 * which dynamic memory regions may be programmed at run-time.
	 */
	for (int i = 0; i < dyn_region_areas_num; i++) {
   11784:	4680      	mov	r8, r0
   11786:	2700      	movs	r7, #0
   11788:	46a1      	mov	r9, r4
	attr->rbar = MPU->RBAR &
   1178a:	f04f 0b14 	mov.w	fp, #20
	MPU->RNR = index;
   1178e:	4d23      	ldr	r5, [pc, #140]	; (1181c <arm_core_mpu_mark_areas_for_dynamic_regions+0xa0>)
	for (int i = 0; i < dyn_region_areas_num; i++) {
   11790:	4557      	cmp	r7, sl
   11792:	da1a      	bge.n	117ca <arm_core_mpu_mark_areas_for_dynamic_regions+0x4e>
		if (dyn_region_areas[i].size == 0U) {
   11794:	f8d8 3004 	ldr.w	r3, [r8, #4]
   11798:	9301      	str	r3, [sp, #4]
   1179a:	2b00      	cmp	r3, #0
   1179c:	d036      	beq.n	1180c <arm_core_mpu_mark_areas_for_dynamic_regions+0x90>
		}
		/* Non-empty area */

		/* Retrieve HW MPU region index */
		dyn_reg_info[i].index =
			get_region_index(dyn_region_areas[i].start,
   1179e:	f8d8 1000 	ldr.w	r1, [r8]
	u32_t region_start_addr = arm_cmse_mpu_region_get(start);
   117a2:	4608      	mov	r0, r1
   117a4:	9100      	str	r1, [sp, #0]
   117a6:	f002 faab 	bl	13d00 <arm_cmse_mpu_region_get>
	u32_t region_end_addr = arm_cmse_mpu_region_get(start + size - 1);
   117aa:	e9dd 1300 	ldrd	r1, r3, [sp]
	u32_t region_start_addr = arm_cmse_mpu_region_get(start);
   117ae:	4606      	mov	r6, r0
	u32_t region_end_addr = arm_cmse_mpu_region_get(start + size - 1);
   117b0:	1858      	adds	r0, r3, r1
   117b2:	3801      	subs	r0, #1
   117b4:	f002 faa4 	bl	13d00 <arm_cmse_mpu_region_get>
	if (region_start_addr == region_end_addr) {
   117b8:	4286      	cmp	r6, r0
   117ba:	4a19      	ldr	r2, [pc, #100]	; (11820 <arm_core_mpu_mark_areas_for_dynamic_regions+0xa4>)
   117bc:	d008      	beq.n	117d0 <arm_core_mpu_mark_areas_for_dynamic_regions+0x54>
		dyn_reg_info[i].index =
   117be:	2314      	movs	r3, #20
   117c0:	435f      	muls	r7, r3
   117c2:	f06f 0315 	mvn.w	r3, #21
   117c6:	f849 3007 	str.w	r3, [r9, r7]
}
   117ca:	b003      	add	sp, #12
   117cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
					dyn_region_areas[i].size);

		if (dyn_reg_info[i].index == -EINVAL) {
   117d0:	f116 0f16 	cmn.w	r6, #22
		dyn_reg_info[i].index =
   117d4:	6026      	str	r6, [r4, #0]
		if (dyn_reg_info[i].index == -EINVAL) {
   117d6:	d0f8      	beq.n	117ca <arm_core_mpu_mark_areas_for_dynamic_regions+0x4e>

			return -EINVAL;
		}

		if (dyn_reg_info[i].index >= static_regions_num) {
   117d8:	7813      	ldrb	r3, [r2, #0]
   117da:	42b3      	cmp	r3, r6
   117dc:	ddf5      	ble.n	117ca <arm_core_mpu_mark_areas_for_dynamic_regions+0x4e>
	attr->rbar = MPU->RBAR &
   117de:	fb0b 9307 	mla	r3, fp, r7, r9
	MPU->RNR = index;
   117e2:	60ae      	str	r6, [r5, #8]
	MPU->RNR = index;
   117e4:	60ae      	str	r6, [r5, #8]
	attr->rbar = MPU->RBAR &
   117e6:	68e8      	ldr	r0, [r5, #12]
   117e8:	7b19      	ldrb	r1, [r3, #12]
   117ea:	f360 0104 	bfi	r1, r0, #0, #5
   117ee:	7319      	strb	r1, [r3, #12]
	attr->mair_idx = (MPU->RLAR & MPU_RLAR_AttrIndx_Msk) >>
   117f0:	6929      	ldr	r1, [r5, #16]
   117f2:	7b18      	ldrb	r0, [r3, #12]
   117f4:	0849      	lsrs	r1, r1, #1
   117f6:	f361 1047 	bfi	r0, r1, #5, #3
   117fa:	7318      	strb	r0, [r3, #12]
	region_conf->base = (MPU->RBAR & MPU_RBAR_BASE_Msk);
   117fc:	68eb      	ldr	r3, [r5, #12]
   117fe:	f023 031f 	bic.w	r3, r3, #31
   11802:	6063      	str	r3, [r4, #4]
	region_conf->attr.r_limit = MPU->RLAR & MPU_RLAR_LIMIT_Msk;
   11804:	692b      	ldr	r3, [r5, #16]
   11806:	f023 031f 	bic.w	r3, r3, #31
   1180a:	6123      	str	r3, [r4, #16]
	for (int i = 0; i < dyn_region_areas_num; i++) {
   1180c:	3701      	adds	r7, #1
   1180e:	3414      	adds	r4, #20
   11810:	f108 080c 	add.w	r8, r8, #12
   11814:	e7bc      	b.n	11790 <arm_core_mpu_mark_areas_for_dynamic_regions+0x14>
   11816:	bf00      	nop
   11818:	20000540 	.word	0x20000540
   1181c:	e000ed90 	.word	0xe000ed90
   11820:	20000688 	.word	0x20000688

00011824 <arm_core_mpu_configure_dynamic_mpu_regions>:
{
   11824:	b570      	push	{r4, r5, r6, lr}
 * performed, the error signal is propagated to the caller of the function.
 */
static int mpu_configure_dynamic_mpu_regions(const struct k_mem_partition
	*dynamic_regions[], u8_t regions_num)
{
	int mpu_reg_index = static_regions_num;
   11826:	4b0c      	ldr	r3, [pc, #48]	; (11858 <arm_core_mpu_configure_dynamic_mpu_regions+0x34>)
   11828:	460e      	mov	r6, r1
   1182a:	781c      	ldrb	r4, [r3, #0]
   1182c:	4605      	mov	r5, r0
   1182e:	4623      	mov	r3, r4
  mpu->RLAR = 0U;
   11830:	2100      	movs	r1, #0
  mpu->RNR = rnr;
   11832:	4a0a      	ldr	r2, [pc, #40]	; (1185c <arm_core_mpu_configure_dynamic_mpu_regions+0x38>)

	/* Disable all MPU regions except for the static ones. */
	for (int i = mpu_reg_index; i < get_num_regions(); i++) {
   11834:	2b0f      	cmp	r3, #15
   11836:	dd0b      	ble.n	11850 <arm_core_mpu_configure_dynamic_mpu_regions+0x2c>
#if defined(CONFIG_MPU_GAP_FILLING)
	/* Reset MPU regions inside which dynamic memory regions may
	 * be programmed.
	 */
	for (int i = 0; i < MPU_DYNAMIC_REGION_AREAS_NUM; i++) {
		region_init(dyn_reg_info[i].index,
   11838:	4909      	ldr	r1, [pc, #36]	; (11860 <arm_core_mpu_configure_dynamic_mpu_regions+0x3c>)
   1183a:	f851 0b04 	ldr.w	r0, [r1], #4
   1183e:	f7ff fea9 	bl	11594 <region_init>

	/* In ARMv8-M architecture the dynamic regions are programmed on SRAM,
	 * forming a full partition of the background area, specified by the
	 * given boundaries.
	 */
	mpu_reg_index = mpu_configure_regions_and_partition(dynamic_regions,
   11842:	4622      	mov	r2, r4
   11844:	4631      	mov	r1, r6
   11846:	4628      	mov	r0, r5
}
   11848:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   1184c:	f7ff beba 	b.w	115c4 <mpu_configure_regions_and_partition.constprop.1>
   11850:	6093      	str	r3, [r2, #8]
  mpu->RLAR = 0U;
   11852:	6111      	str	r1, [r2, #16]
	for (int i = mpu_reg_index; i < get_num_regions(); i++) {
   11854:	3301      	adds	r3, #1
   11856:	e7ed      	b.n	11834 <arm_core_mpu_configure_dynamic_mpu_regions+0x10>
   11858:	20000688 	.word	0x20000688
   1185c:	e000ed90 	.word	0xe000ed90
   11860:	20000540 	.word	0x20000540

00011864 <tz_nonsecure_state_setup>:
}
#endif /* CONFIG_ARMV8_M_MAINLINE */

void tz_nonsecure_state_setup(const tz_nonsecure_setup_conf_t *p_ns_conf)
{
	configure_nonsecure_vtor_offset(p_ns_conf->vtor_ns);
   11864:	6882      	ldr	r2, [r0, #8]
	SCB_NS->VTOR = vtor_ns;
   11866:	4b0c      	ldr	r3, [pc, #48]	; (11898 <tz_nonsecure_state_setup+0x34>)
   11868:	609a      	str	r2, [r3, #8]
  __ASM volatile ("MSR msp_ns, %0" : : "r" (topOfMainStack) : );
   1186a:	6803      	ldr	r3, [r0, #0]
   1186c:	f383 8888 	msr	MSP_NS, r3
  __ASM volatile ("MSR psp_ns, %0" : : "r" (topOfProcStack) : );
   11870:	6843      	ldr	r3, [r0, #4]
   11872:	f383 8889 	msr	PSP_NS, r3
	configure_nonsecure_psp(p_ns_conf->psp_ns);
	/* Select which stack-pointer to use (MSP or PSP) and
	 * the privilege level for thread mode.
	 */
	configure_nonsecure_control(p_ns_conf->control_ns.spsel,
		p_ns_conf->control_ns.npriv);
   11876:	7b02      	ldrb	r2, [r0, #12]
   11878:	f002 0101 	and.w	r1, r2, #1
  __ASM volatile ("MRS %0, control_ns" : "=r" (result) );
   1187c:	f3ef 8394 	mrs	r3, CONTROL_NS
	control_ns &= ~(CONTROL_SPSEL_Msk | CONTROL_nPRIV_Msk);
   11880:	f023 0303 	bic.w	r3, r3, #3
	if (spsel_ns) {
   11884:	0792      	lsls	r2, r2, #30
		control_ns |= CONTROL_SPSEL_Msk;
   11886:	bf48      	it	mi
   11888:	f043 0302 	orrmi.w	r3, r3, #2
	if (npriv_ns) {
   1188c:	b109      	cbz	r1, 11892 <tz_nonsecure_state_setup+0x2e>
		control_ns |= CONTROL_nPRIV_Msk;
   1188e:	f043 0301 	orr.w	r3, r3, #1
  __ASM volatile ("MSR control_ns, %0" : : "r" (control) : "memory");
   11892:	f383 8894 	msr	CONTROL_NS, r3
}
   11896:	4770      	bx	lr
   11898:	e002ed00 	.word	0xe002ed00

0001189c <tz_nbanked_exception_target_state_set>:

void tz_nbanked_exception_target_state_set(int secure_state)
{
	u32_t aircr_payload = SCB->AIRCR & (~(SCB_AIRCR_VECTKEY_Msk));
   1189c:	4a08      	ldr	r2, [pc, #32]	; (118c0 <tz_nbanked_exception_target_state_set+0x24>)
   1189e:	68d3      	ldr	r3, [r2, #12]
	if (secure_state) {
   118a0:	b148      	cbz	r0, 118b6 <tz_nbanked_exception_target_state_set+0x1a>
		aircr_payload &= ~(SCB_AIRCR_BFHFNMINS_Msk);
   118a2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
   118a6:	041b      	lsls	r3, r3, #16
   118a8:	0c1b      	lsrs	r3, r3, #16
	} else {
		aircr_payload |= SCB_AIRCR_BFHFNMINS_Msk;
	}
	SCB->AIRCR = ((AIRCR_VECT_KEY_PERMIT_WRITE << SCB_AIRCR_VECTKEY_Pos)
			& SCB_AIRCR_VECTKEY_Msk)
		| aircr_payload;
   118aa:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
   118ae:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
	SCB->AIRCR = ((AIRCR_VECT_KEY_PERMIT_WRITE << SCB_AIRCR_VECTKEY_Pos)
   118b2:	60d3      	str	r3, [r2, #12]
}
   118b4:	4770      	bx	lr
	u32_t aircr_payload = SCB->AIRCR & (~(SCB_AIRCR_VECTKEY_Msk));
   118b6:	b29b      	uxth	r3, r3
		aircr_payload |= SCB_AIRCR_BFHFNMINS_Msk;
   118b8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
   118bc:	e7f5      	b.n	118aa <tz_nbanked_exception_target_state_set+0xe>
   118be:	bf00      	nop
   118c0:	e000ed00 	.word	0xe000ed00

000118c4 <tz_nonsecure_exception_prio_config>:

void tz_nonsecure_exception_prio_config(int secure_boost)
{
	u32_t aircr_payload = SCB->AIRCR & (~(SCB_AIRCR_VECTKEY_Msk));
   118c4:	4a08      	ldr	r2, [pc, #32]	; (118e8 <tz_nonsecure_exception_prio_config+0x24>)
   118c6:	68d3      	ldr	r3, [r2, #12]
	if (secure_boost) {
   118c8:	b140      	cbz	r0, 118dc <tz_nonsecure_exception_prio_config+0x18>
	u32_t aircr_payload = SCB->AIRCR & (~(SCB_AIRCR_VECTKEY_Msk));
   118ca:	b29b      	uxth	r3, r3
		aircr_payload |= SCB_AIRCR_PRIS_Msk;
   118cc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
	} else {
		aircr_payload &= ~(SCB_AIRCR_PRIS_Msk);
	}
	SCB->AIRCR = ((AIRCR_VECT_KEY_PERMIT_WRITE << SCB_AIRCR_VECTKEY_Pos)
			& SCB_AIRCR_VECTKEY_Msk)
		| aircr_payload;
   118d0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
   118d4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
	SCB->AIRCR = ((AIRCR_VECT_KEY_PERMIT_WRITE << SCB_AIRCR_VECTKEY_Pos)
   118d8:	60d3      	str	r3, [r2, #12]
}
   118da:	4770      	bx	lr
		aircr_payload &= ~(SCB_AIRCR_PRIS_Msk);
   118dc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
   118e0:	041b      	lsls	r3, r3, #16
   118e2:	0c1b      	lsrs	r3, r3, #16
   118e4:	e7f4      	b.n	118d0 <tz_nonsecure_exception_prio_config+0xc>
   118e6:	bf00      	nop
   118e8:	e000ed00 	.word	0xe000ed00

000118ec <tz_nonsecure_system_reset_req_block>:

void tz_nonsecure_system_reset_req_block(int block)
{
	u32_t aircr_payload = SCB->AIRCR & (~(SCB_AIRCR_VECTKEY_Msk));
   118ec:	4a08      	ldr	r2, [pc, #32]	; (11910 <tz_nonsecure_system_reset_req_block+0x24>)
   118ee:	68d3      	ldr	r3, [r2, #12]
	if (block) {
   118f0:	b140      	cbz	r0, 11904 <tz_nonsecure_system_reset_req_block+0x18>
	u32_t aircr_payload = SCB->AIRCR & (~(SCB_AIRCR_VECTKEY_Msk));
   118f2:	b29b      	uxth	r3, r3
		aircr_payload |= SCB_AIRCR_SYSRESETREQS_Msk;
   118f4:	f043 0308 	orr.w	r3, r3, #8
	} else {
		aircr_payload &= ~(SCB_AIRCR_SYSRESETREQS_Msk);
	}
	SCB->AIRCR = ((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)
			& SCB_AIRCR_VECTKEY_Msk)
		| aircr_payload;
   118f8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
   118fc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
	SCB->AIRCR = ((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)
   11900:	60d3      	str	r3, [r2, #12]
}
   11902:	4770      	bx	lr
		aircr_payload &= ~(SCB_AIRCR_SYSRESETREQS_Msk);
   11904:	f023 0308 	bic.w	r3, r3, #8
   11908:	041b      	lsls	r3, r3, #16
   1190a:	0c1b      	lsrs	r3, r3, #16
   1190c:	e7f4      	b.n	118f8 <tz_nonsecure_system_reset_req_block+0xc>
   1190e:	bf00      	nop
   11910:	e000ed00 	.word	0xe000ed00

00011914 <tz_nonsecure_fpu_access_enable>:

#if defined(CONFIG_ARMV7_M_ARMV8_M_FP)
void tz_nonsecure_fpu_access_enable(void)
{
	SCB->NSACR |=
   11914:	4a03      	ldr	r2, [pc, #12]	; (11924 <tz_nonsecure_fpu_access_enable+0x10>)
   11916:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
   1191a:	f443 6340 	orr.w	r3, r3, #3072	; 0xc00
   1191e:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
		(1UL << SCB_NSACR_CP10_Pos) | (1UL << SCB_NSACR_CP11_Pos);
}
   11922:	4770      	bx	lr
   11924:	e000ed00 	.word	0xe000ed00

00011928 <tz_sau_configure>:
#endif /* CONFIG_ARMV7_M_ARMV8_M_FP */

void tz_sau_configure(int enable, int allns)
{
	if (enable) {
   11928:	4b08      	ldr	r3, [pc, #32]	; (1194c <tz_sau_configure+0x24>)
  \brief   Enable SAU
  \details Enables the Security Attribution Unit (SAU).
 */
__STATIC_INLINE void TZ_SAU_Enable(void)
{
    SAU->CTRL |=  (SAU_CTRL_ENABLE_Msk);
   1192a:	681a      	ldr	r2, [r3, #0]
   1192c:	b118      	cbz	r0, 11936 <tz_sau_configure+0xe>
   1192e:	f042 0201 	orr.w	r2, r2, #1
	} else {
		TZ_SAU_Disable();
		if (allns) {
			SAU->CTRL |= SAU_CTRL_ALLNS_Msk;
		} else {
			SAU->CTRL &= ~(SAU_CTRL_ALLNS_Msk);
   11932:	601a      	str	r2, [r3, #0]
		}
	}
}
   11934:	4770      	bx	lr
  \brief   Disable SAU
  \details Disables the Security Attribution Unit (SAU).
 */
__STATIC_INLINE void TZ_SAU_Disable(void)
{
    SAU->CTRL &= ~(SAU_CTRL_ENABLE_Msk);
   11936:	f022 0201 	bic.w	r2, r2, #1
   1193a:	601a      	str	r2, [r3, #0]
			SAU->CTRL |= SAU_CTRL_ALLNS_Msk;
   1193c:	681a      	ldr	r2, [r3, #0]
		if (allns) {
   1193e:	b111      	cbz	r1, 11946 <tz_sau_configure+0x1e>
			SAU->CTRL |= SAU_CTRL_ALLNS_Msk;
   11940:	f042 0202 	orr.w	r2, r2, #2
   11944:	e7f5      	b.n	11932 <tz_sau_configure+0xa>
			SAU->CTRL &= ~(SAU_CTRL_ALLNS_Msk);
   11946:	f022 0202 	bic.w	r2, r2, #2
   1194a:	e7f2      	b.n	11932 <tz_sau_configure+0xa>
   1194c:	e000edd0 	.word	0xe000edd0

00011950 <check_ext_api_requests>:
	}
};
#endif

static int check_ext_api_requests(struct device *dev)
{
   11950:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	(void)dev;

	const struct fw_info_ext_api_request *ext_api_req =
			skip_ext_apis(&m_firmware_info);

	for (u32_t i = 0; i < m_firmware_info.ext_api_request_num; i++) {
   11954:	2500      	movs	r5, #0
			skip_ext_apis(&m_firmware_info);
   11956:	4c21      	ldr	r4, [pc, #132]	; (119dc <check_ext_api_requests+0x8c>)
	const u32_t ext_api_magic[] = {EXT_API_MAGIC};
   11958:	4e21      	ldr	r6, [pc, #132]	; (119e0 <check_ext_api_requests+0x90>)
	for (u32_t i = 0; i < m_firmware_info.ext_api_request_num; i++) {
   1195a:	f854 8c04 	ldr.w	r8, [r4, #-4]
			/* EXT_API hard requirement not met. */
			printk("ERROR: Cannot fulfill EXT_API request.\r\n");
			k_panic();
		} else {
			/* EXT_API soft requirement not met. */
			printk("WARNING: Optional EXT_API request not "
   1195e:	f8df 9088 	ldr.w	r9, [pc, #136]	; 119e8 <check_ext_api_requests+0x98>
{
   11962:	b085      	sub	sp, #20
	for (u32_t i = 0; i < m_firmware_info.ext_api_request_num; i++) {
   11964:	45a8      	cmp	r8, r5
   11966:	d803      	bhi.n	11970 <check_ext_api_requests+0x20>
		}
		ADVANCE_EXT_API_REQ(ext_api_req);
	}

	return 0;
}
   11968:	2000      	movs	r0, #0
   1196a:	b005      	add	sp, #20
   1196c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		if (fw_info_ext_api_check((u32_t)*(ext_api_req->ext_api))
   11970:	6a63      	ldr	r3, [r4, #36]	; 0x24
   11972:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
   11976:	681f      	ldr	r7, [r3, #0]
   11978:	ab01      	add	r3, sp, #4
   1197a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	if (memcmp(ext_api->magic, ext_api_magic, CONFIG_FW_INFO_MAGIC_LEN)
   1197e:	220c      	movs	r2, #12
   11980:	4619      	mov	r1, r3
   11982:	4638      	mov	r0, r7
   11984:	f002 f9d1 	bl	13d2a <memcmp>
   11988:	b990      	cbnz	r0, 119b0 <check_ext_api_requests+0x60>
   1198a:	b18f      	cbz	r7, 119b0 <check_ext_api_requests+0x60>
			&& ext_api_satisfies_req(*(ext_api_req->ext_api),
   1198c:	6a63      	ldr	r3, [r4, #36]	; 0x24
	const u32_t req_id = ext_api_req->request.ext_api_id;
   1198e:	6921      	ldr	r1, [r4, #16]
			&& ext_api_satisfies_req(*(ext_api_req->ext_api),
   11990:	681b      	ldr	r3, [r3, #0]
	return ((ext_api->ext_api_id == req_id)
   11992:	691a      	ldr	r2, [r3, #16]
		&& ((ext_api->ext_api_flags & req_flags) == req_flags));
   11994:	4291      	cmp	r1, r2
   11996:	d10b      	bne.n	119b0 <check_ext_api_requests+0x60>
		&&  (ext_api->ext_api_version >= req_min_version)
   11998:	699a      	ldr	r2, [r3, #24]
	const u32_t req_min_version = ext_api_req->request.ext_api_version;
   1199a:	69a1      	ldr	r1, [r4, #24]
		&&  (ext_api->ext_api_version >= req_min_version)
   1199c:	4291      	cmp	r1, r2
   1199e:	d807      	bhi.n	119b0 <check_ext_api_requests+0x60>
	const u32_t req_max_version = ext_api_req->ext_api_max_version;
   119a0:	69e1      	ldr	r1, [r4, #28]
		&&  (ext_api->ext_api_version <  req_max_version)
   119a2:	4291      	cmp	r1, r2
   119a4:	d904      	bls.n	119b0 <check_ext_api_requests+0x60>
	const u32_t req_flags = ext_api_req->request.ext_api_flags;
   119a6:	6962      	ldr	r2, [r4, #20]
		&& ((ext_api->ext_api_flags & req_flags) == req_flags));
   119a8:	695b      	ldr	r3, [r3, #20]
   119aa:	ea32 0303 	bics.w	r3, r2, r3
   119ae:	d00a      	beq.n	119c6 <check_ext_api_requests+0x76>
		} else if (ext_api_req->required) {
   119b0:	6a27      	ldr	r7, [r4, #32]
   119b2:	b167      	cbz	r7, 119ce <check_ext_api_requests+0x7e>
			printk("ERROR: Cannot fulfill EXT_API request.\r\n");
   119b4:	480b      	ldr	r0, [pc, #44]	; (119e4 <check_ext_api_requests+0x94>)
   119b6:	f001 ffde 	bl	13976 <printk>
			k_panic();
   119ba:	4040      	eors	r0, r0
   119bc:	f380 8811 	msr	BASEPRI, r0
   119c0:	f04f 0004 	mov.w	r0, #4
   119c4:	df02      	svc	2
		ADVANCE_EXT_API_REQ(ext_api_req);
   119c6:	68e3      	ldr	r3, [r4, #12]
	for (u32_t i = 0; i < m_firmware_info.ext_api_request_num; i++) {
   119c8:	3501      	adds	r5, #1
		ADVANCE_EXT_API_REQ(ext_api_req);
   119ca:	441c      	add	r4, r3
   119cc:	e7ca      	b.n	11964 <check_ext_api_requests+0x14>
			printk("WARNING: Optional EXT_API request not "
   119ce:	4648      	mov	r0, r9
   119d0:	f001 ffd1 	bl	13976 <printk>
			*ext_api_req->ext_api = NULL;
   119d4:	6a63      	ldr	r3, [r4, #36]	; 0x24
   119d6:	601f      	str	r7, [r3, #0]
   119d8:	e7f5      	b.n	119c6 <check_ext_api_requests+0x76>
   119da:	bf00      	nop
   119dc:	0001043c 	.word	0x0001043c
   119e0:	000142c8 	.word	0x000142c8
   119e4:	0001486f 	.word	0x0001486f
   119e8:	00014898 	.word	0x00014898

000119ec <nrf91_errata_31>:
    #ifndef NRF91_SERIES
        return false;
    #else
        #if defined (NRF9160_XXAA) || defined (DEVELOP_IN_NRF9160)
            uint32_t var1 = *(uint32_t *)0x00FF0130ul;
            uint32_t var2 = *(uint32_t *)0x00FF0134ul;
   119ec:	4b06      	ldr	r3, [pc, #24]	; (11a08 <nrf91_errata_31+0x1c>)
   119ee:	6818      	ldr	r0, [r3, #0]
            uint32_t var1 = *(uint32_t *)0x00FF0130ul;
   119f0:	3b04      	subs	r3, #4
        #endif
        #if defined (NRF9160_XXAA) || defined (DEVELOP_IN_NRF9160)
            if (var1 == 0x09)
   119f2:	681b      	ldr	r3, [r3, #0]
   119f4:	2b09      	cmp	r3, #9
   119f6:	d105      	bne.n	11a04 <nrf91_errata_31+0x18>
            {
                switch(var2)
   119f8:	3801      	subs	r0, #1
   119fa:	2801      	cmp	r0, #1
   119fc:	bf8c      	ite	hi
   119fe:	2000      	movhi	r0, #0
   11a00:	2001      	movls	r0, #1
   11a02:	4770      	bx	lr
                    case 0x02ul:
                        return true;
                }
            }
        #endif
        return false;
   11a04:	2000      	movs	r0, #0
    #endif
}
   11a06:	4770      	bx	lr
   11a08:	00ff0134 	.word	0x00ff0134

00011a0c <nrf91_errata_14>:
    #ifndef NRF91_SERIES
        return false;
    #else
        #if defined (NRF9160_XXAA) || defined (DEVELOP_IN_NRF9160)
            uint32_t var1 = *(uint32_t *)0x00FF0130ul;
            uint32_t var2 = *(uint32_t *)0x00FF0134ul;
   11a0c:	4b05      	ldr	r3, [pc, #20]	; (11a24 <nrf91_errata_14+0x18>)
   11a0e:	6818      	ldr	r0, [r3, #0]
            uint32_t var1 = *(uint32_t *)0x00FF0130ul;
   11a10:	3b04      	subs	r3, #4
        #endif
        #if defined (NRF9160_XXAA) || defined (DEVELOP_IN_NRF9160)
            if (var1 == 0x09)
   11a12:	681b      	ldr	r3, [r3, #0]
   11a14:	2b09      	cmp	r3, #9
   11a16:	d103      	bne.n	11a20 <nrf91_errata_14+0x14>
            {
                switch(var2)
   11a18:	1e43      	subs	r3, r0, #1
   11a1a:	4258      	negs	r0, r3
   11a1c:	4158      	adcs	r0, r3
   11a1e:	4770      	bx	lr
                    case 0x02ul:
                        return false;
                }
            }
        #endif
        return false;
   11a20:	2000      	movs	r0, #0
    #endif
}
   11a22:	4770      	bx	lr
   11a24:	00ff0134 	.word	0x00ff0134

00011a28 <SystemInit>:
        /* Perform Secure-mode initialization routines. */

        /* Set all ARM SAU regions to NonSecure if TrustZone extensions are enabled.
        * Nordic SPU should handle Secure Attribution tasks */
        #if defined (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U)
          SAU->CTRL |= (1 << SAU_CTRL_ALLNS_Pos);
   11a28:	4a4e      	ldr	r2, [pc, #312]	; (11b64 <SystemInit+0x13c>)
{
   11a2a:	b508      	push	{r3, lr}
          SAU->CTRL |= (1 << SAU_CTRL_ALLNS_Pos);
   11a2c:	6813      	ldr	r3, [r2, #0]
   11a2e:	f043 0302 	orr.w	r3, r3, #2
   11a32:	6013      	str	r3, [r2, #0]
        #endif
        
        /* Workaround for Errata 6 "POWER: SLEEPENTER and SLEEPEXIT events asserted after pin reset" found at the Errata document
            for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf91_errata_6()){
   11a34:	f7ff ffda 	bl	119ec <nrf91_errata_31>
   11a38:	b130      	cbz	r0, 11a48 <SystemInit+0x20>
            NRF_POWER_S->EVENTS_SLEEPENTER = (POWER_EVENTS_SLEEPENTER_EVENTS_SLEEPENTER_NotGenerated << POWER_EVENTS_SLEEPENTER_EVENTS_SLEEPENTER_Pos);
   11a3a:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
   11a3e:	2200      	movs	r2, #0
   11a40:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
            NRF_POWER_S->EVENTS_SLEEPEXIT = (POWER_EVENTS_SLEEPEXIT_EVENTS_SLEEPEXIT_NotGenerated << POWER_EVENTS_SLEEPEXIT_EVENTS_SLEEPEXIT_Pos);
   11a44:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
        }

        /* Workaround for Errata 14 "REGULATORS: LDO mode at startup" found at the Errata document
            for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf91_errata_14()){
   11a48:	f7ff ffe0 	bl	11a0c <nrf91_errata_14>
   11a4c:	b130      	cbz	r0, 11a5c <SystemInit+0x34>
            *((volatile uint32_t *)0x50004A38) = 0x01ul;
   11a4e:	2301      	movs	r3, #1
   11a50:	4a45      	ldr	r2, [pc, #276]	; (11b68 <SystemInit+0x140>)
   11a52:	6013      	str	r3, [r2, #0]
            NRF_REGULATORS_S->DCDCEN = REGULATORS_DCDCEN_DCDCEN_Enabled << REGULATORS_DCDCEN_DCDCEN_Pos;
   11a54:	f6a2 2238 	subw	r2, r2, #2616	; 0xa38
   11a58:	f8c2 3578 	str.w	r3, [r2, #1400]	; 0x578
{
    #ifndef NRF91_SERIES
        return false;
    #else
        #if defined (NRF9160_XXAA) || defined (DEVELOP_IN_NRF9160)
            uint32_t var1 = *(uint32_t *)0x00FF0130ul;
   11a5c:	4b43      	ldr	r3, [pc, #268]	; (11b6c <SystemInit+0x144>)
            uint32_t var2 = *(uint32_t *)0x00FF0134ul;
        #endif
        #if defined (NRF9160_XXAA) || defined (DEVELOP_IN_NRF9160)
            if (var1 == 0x09)
   11a5e:	681b      	ldr	r3, [r3, #0]
   11a60:	2b09      	cmp	r3, #9
   11a62:	d107      	bne.n	11a74 <SystemInit+0x4c>
            uint32_t var2 = *(uint32_t *)0x00FF0134ul;
   11a64:	4b42      	ldr	r3, [pc, #264]	; (11b70 <SystemInit+0x148>)
            {
                switch(var2)
   11a66:	681b      	ldr	r3, [r3, #0]
   11a68:	2b02      	cmp	r3, #2
        }

        /* Workaround for Errata 15 "REGULATORS: LDO mode at startup" found at the Errata document
            for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf91_errata_15()){
            NRF_REGULATORS_S->DCDCEN = REGULATORS_DCDCEN_DCDCEN_Enabled << REGULATORS_DCDCEN_DCDCEN_Pos;
   11a6a:	bf02      	ittt	eq
   11a6c:	2201      	moveq	r2, #1
   11a6e:	4b41      	ldreq	r3, [pc, #260]	; (11b74 <SystemInit+0x14c>)
   11a70:	f8c3 2578 	streq.w	r2, [r3, #1400]	; 0x578
        }

        /* Workaround for Errata 20 "RAM content cannot be trusted upon waking up from System ON Idle or System OFF mode" found at the Errata document
            for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf91_errata_20()){
   11a74:	f7ff ffca 	bl	11a0c <nrf91_errata_14>
   11a78:	b110      	cbz	r0, 11a80 <SystemInit+0x58>
            *((volatile uint32_t *)0x5003AEE4) = 0xE;
   11a7a:	220e      	movs	r2, #14
   11a7c:	4b3e      	ldr	r3, [pc, #248]	; (11b78 <SystemInit+0x150>)
   11a7e:	601a      	str	r2, [r3, #0]
        }

        /* Workaround for Errata 31 "XOSC32k Startup Failure" found at the Errata document
            for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf91_errata_31()){
   11a80:	f7ff ffb4 	bl	119ec <nrf91_errata_31>
   11a84:	b120      	cbz	r0, 11a90 <SystemInit+0x68>
            *((volatile uint32_t *)0x5000470Cul) = 0x0;
   11a86:	2200      	movs	r2, #0
   11a88:	4b3c      	ldr	r3, [pc, #240]	; (11b7c <SystemInit+0x154>)
   11a8a:	601a      	str	r2, [r3, #0]
            *((volatile uint32_t *)0x50004710ul) = 0x1;
   11a8c:	2201      	movs	r2, #1
   11a8e:	605a      	str	r2, [r3, #4]
{
   11a90:	2200      	movs	r2, #0
   11a92:	00d3      	lsls	r3, r2, #3
   11a94:	f503 037f 	add.w	r3, r3, #16711680	; 0xff0000
        }

        /* Trimming of the device. Copy all the trimming values from FICR into the target addresses. Trim
         until one ADDR is not initialized. */
        uint32_t index = 0;
        for (index = 0; index < 256ul && NRF_FICR_S->TRIMCNF[index].ADDR != 0xFFFFFFFFul; index++){
   11a98:	f8d3 1300 	ldr.w	r1, [r3, #768]	; 0x300
   11a9c:	3101      	adds	r1, #1
   11a9e:	d008      	beq.n	11ab2 <SystemInit+0x8a>
          #if defined ( __ICCARM__ )
              #pragma diag_suppress=Pa082
          #endif
          *(volatile uint32_t *)NRF_FICR_S->TRIMCNF[index].ADDR = NRF_FICR_S->TRIMCNF[index].DATA;
   11aa0:	f8d3 1300 	ldr.w	r1, [r3, #768]	; 0x300
        for (index = 0; index < 256ul && NRF_FICR_S->TRIMCNF[index].ADDR != 0xFFFFFFFFul; index++){
   11aa4:	3201      	adds	r2, #1
          *(volatile uint32_t *)NRF_FICR_S->TRIMCNF[index].ADDR = NRF_FICR_S->TRIMCNF[index].DATA;
   11aa6:	f8d3 3304 	ldr.w	r3, [r3, #772]	; 0x304
        for (index = 0; index < 256ul && NRF_FICR_S->TRIMCNF[index].ADDR != 0xFFFFFFFFul; index++){
   11aaa:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
          *(volatile uint32_t *)NRF_FICR_S->TRIMCNF[index].ADDR = NRF_FICR_S->TRIMCNF[index].DATA;
   11aae:	600b      	str	r3, [r1, #0]
        for (index = 0; index < 256ul && NRF_FICR_S->TRIMCNF[index].ADDR != 0xFFFFFFFFul; index++){
   11ab0:	d1ef      	bne.n	11a92 <SystemInit+0x6a>
    }
    
    
    bool uicr_HFXOSRC_erased()
    {
        if ((NRF_UICR_S->HFXOSRC & UICR_HFXOSRC_HFXOSRC_Msk) != UICR_HFXOSRC_HFXOSRC_TCXO) {
   11ab2:	4b33      	ldr	r3, [pc, #204]	; (11b80 <SystemInit+0x158>)
   11ab4:	69da      	ldr	r2, [r3, #28]
   11ab6:	07d1      	lsls	r1, r2, #31
   11ab8:	d53b      	bpl.n	11b32 <SystemInit+0x10a>
          while (NRF_NVMC_S->READY != NVMC_READY_READY_Ready);
   11aba:	4b32      	ldr	r3, [pc, #200]	; (11b84 <SystemInit+0x15c>)
   11abc:	4619      	mov	r1, r3
   11abe:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
   11ac2:	2a01      	cmp	r2, #1
   11ac4:	d1fb      	bne.n	11abe <SystemInit+0x96>
          NRF_NVMC_S->CONFIG = NVMC_CONFIG_WEN_Wen;
   11ac6:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
          while (NRF_NVMC_S->READY != NVMC_READY_READY_Ready);
   11aca:	f8d1 3400 	ldr.w	r3, [r1, #1024]	; 0x400
   11ace:	2b01      	cmp	r3, #1
   11ad0:	d1fb      	bne.n	11aca <SystemInit+0xa2>
        if ((NRF_UICR_S->HFXOSRC & UICR_HFXOSRC_HFXOSRC_Msk) != UICR_HFXOSRC_HFXOSRC_TCXO) {
   11ad2:	4b2b      	ldr	r3, [pc, #172]	; (11b80 <SystemInit+0x158>)
   11ad4:	69da      	ldr	r2, [r3, #28]
   11ad6:	07d2      	lsls	r2, r2, #31
   11ad8:	d508      	bpl.n	11aec <SystemInit+0xc4>
            uicr_erased_value = NRF_UICR_S->HFXOSRC;
   11ada:	69da      	ldr	r2, [r3, #28]
            while (NRF_NVMC_S->READY != NVMC_READY_READY_Ready);
   11adc:	4929      	ldr	r1, [pc, #164]	; (11b84 <SystemInit+0x15c>)
            uicr_new_value = (uicr_erased_value & ~UICR_HFXOSRC_HFXOSRC_Msk) | UICR_HFXOSRC_HFXOSRC_TCXO;
   11ade:	f022 0201 	bic.w	r2, r2, #1
            NRF_UICR_S->HFXOSRC = uicr_new_value;
   11ae2:	61da      	str	r2, [r3, #28]
            while (NRF_NVMC_S->READY != NVMC_READY_READY_Ready);
   11ae4:	f8d1 2400 	ldr.w	r2, [r1, #1024]	; 0x400
   11ae8:	2a01      	cmp	r2, #1
   11aea:	d1fb      	bne.n	11ae4 <SystemInit+0xbc>
        if (NRF_UICR_S->HFXOCNT == 0xFFFFFFFFul) {
   11aec:	6a1a      	ldr	r2, [r3, #32]
   11aee:	3201      	adds	r2, #1
   11af0:	d10a      	bne.n	11b08 <SystemInit+0xe0>
            uicr_erased_value = NRF_UICR_S->HFXOCNT;
   11af2:	6a1a      	ldr	r2, [r3, #32]
            uicr_new_value = (uicr_erased_value & ~UICR_HFXOCNT_HFXOCNT_Msk) | 0x20;
   11af4:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
   11af8:	f042 0220 	orr.w	r2, r2, #32
            NRF_UICR_S->HFXOCNT = uicr_new_value;
   11afc:	621a      	str	r2, [r3, #32]
            while (NRF_NVMC_S->READY != NVMC_READY_READY_Ready);
   11afe:	4a21      	ldr	r2, [pc, #132]	; (11b84 <SystemInit+0x15c>)
   11b00:	f8d2 3400 	ldr.w	r3, [r2, #1024]	; 0x400
   11b04:	2b01      	cmp	r3, #1
   11b06:	d1fb      	bne.n	11b00 <SystemInit+0xd8>
          NRF_NVMC_S->CONFIG = NVMC_CONFIG_WEN_Ren;
   11b08:	2200      	movs	r2, #0
   11b0a:	4b1e      	ldr	r3, [pc, #120]	; (11b84 <SystemInit+0x15c>)
   11b0c:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
          while (NRF_NVMC_S->READY != NVMC_READY_READY_Ready);
   11b10:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
   11b14:	2a01      	cmp	r2, #1
   11b16:	d1fb      	bne.n	11b10 <SystemInit+0xe8>
  __ASM volatile ("dsb 0xF":::"memory");
   11b18:	f3bf 8f4f 	dsb	sy
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
   11b1c:	491a      	ldr	r1, [pc, #104]	; (11b88 <SystemInit+0x160>)
   11b1e:	4b1b      	ldr	r3, [pc, #108]	; (11b8c <SystemInit+0x164>)
   11b20:	68ca      	ldr	r2, [r1, #12]
   11b22:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
   11b26:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
   11b28:	60cb      	str	r3, [r1, #12]
   11b2a:	f3bf 8f4f 	dsb	sy
    __NOP();
   11b2e:	bf00      	nop
   11b30:	e7fd      	b.n	11b2e <SystemInit+0x106>
        if (NRF_UICR_S->HFXOCNT == 0xFFFFFFFFul) {
   11b32:	6a1b      	ldr	r3, [r3, #32]
   11b34:	3301      	adds	r3, #1
   11b36:	d0c0      	beq.n	11aba <SystemInit+0x92>
        SCB->NSACR |= (3UL << 10);
   11b38:	4b13      	ldr	r3, [pc, #76]	; (11b88 <SystemInit+0x160>)
   11b3a:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
   11b3e:	f442 6240 	orr.w	r2, r2, #3072	; 0xc00
   11b42:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      SCB->CPACR |= (3UL << 20) | (3UL << 22);
   11b46:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
   11b4a:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
   11b4e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
   11b52:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   11b56:	f3bf 8f6f 	isb	sy
    SystemCoreClock = __SYSTEM_CLOCK;
   11b5a:	4b0d      	ldr	r3, [pc, #52]	; (11b90 <SystemInit+0x168>)
   11b5c:	4a0d      	ldr	r2, [pc, #52]	; (11b94 <SystemInit+0x16c>)
   11b5e:	601a      	str	r2, [r3, #0]
}
   11b60:	bd08      	pop	{r3, pc}
   11b62:	bf00      	nop
   11b64:	e000edd0 	.word	0xe000edd0
   11b68:	50004a38 	.word	0x50004a38
   11b6c:	00ff0130 	.word	0x00ff0130
   11b70:	00ff0134 	.word	0x00ff0134
   11b74:	50004000 	.word	0x50004000
   11b78:	5003aee4 	.word	0x5003aee4
   11b7c:	5000470c 	.word	0x5000470c
   11b80:	00ff8000 	.word	0x00ff8000
   11b84:	50039000 	.word	0x50039000
   11b88:	e000ed00 	.word	0xe000ed00
   11b8c:	05fa0004 	.word	0x05fa0004
   11b90:	200013f4 	.word	0x200013f4
   11b94:	03d09000 	.word	0x03d09000

00011b98 <z_sys_device_do_config_level>:
 * off and the next one begins.
 *
 * @param level init level to run.
 */
void z_sys_device_do_config_level(s32_t level)
{
   11b98:	b570      	push	{r4, r5, r6, lr}
		retval = device_conf->init(info);
		if (retval != 0) {
			/* Initialization failed. Clear the API struct so that
			 * device_get_binding() will not succeed for it.
			 */
			info->driver_api = NULL;
   11b9a:	2600      	movs	r6, #0
	for (info = config_levels[level]; info < config_levels[level+1];
   11b9c:	4b08      	ldr	r3, [pc, #32]	; (11bc0 <z_sys_device_do_config_level+0x28>)
   11b9e:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
   11ba2:	3001      	adds	r0, #1
   11ba4:	f853 5020 	ldr.w	r5, [r3, r0, lsl #2]
   11ba8:	42a5      	cmp	r5, r4
   11baa:	d800      	bhi.n	11bae <z_sys_device_do_config_level+0x16>
		} else {
			z_object_init(info);
		}
	}
}
   11bac:	bd70      	pop	{r4, r5, r6, pc}
		retval = device_conf->init(info);
   11bae:	6823      	ldr	r3, [r4, #0]
   11bb0:	4620      	mov	r0, r4
   11bb2:	685b      	ldr	r3, [r3, #4]
   11bb4:	4798      	blx	r3
		if (retval != 0) {
   11bb6:	b100      	cbz	r0, 11bba <z_sys_device_do_config_level+0x22>
			info->driver_api = NULL;
   11bb8:	6066      	str	r6, [r4, #4]
								info++) {
   11bba:	340c      	adds	r4, #12
   11bbc:	e7f4      	b.n	11ba8 <z_sys_device_do_config_level+0x10>
   11bbe:	bf00      	nop
   11bc0:	0001444c 	.word	0x0001444c

00011bc4 <z_impl_device_get_binding>:
	/* Split the search into two loops: in the common scenario, where
	 * device names are stored in ROM (and are referenced by the user
	 * with CONFIG_* macros), only cheap pointer comparisons will be
	 * performed.  Reserve string comparisons for a fallback.
	 */
	for (info = __device_init_start; info != __device_init_end; info++) {
   11bc4:	4b10      	ldr	r3, [pc, #64]	; (11c08 <z_impl_device_get_binding+0x44>)
{
   11bc6:	b570      	push	{r4, r5, r6, lr}
   11bc8:	4605      	mov	r5, r0
   11bca:	461e      	mov	r6, r3
	for (info = __device_init_start; info != __device_init_end; info++) {
   11bcc:	4c0f      	ldr	r4, [pc, #60]	; (11c0c <z_impl_device_get_binding+0x48>)
   11bce:	429c      	cmp	r4, r3
   11bd0:	d104      	bne.n	11bdc <z_impl_device_get_binding+0x18>
		    (info->config->name == name)) {
			return info;
		}
	}

	for (info = __device_init_start; info != __device_init_end; info++) {
   11bd2:	4c0e      	ldr	r4, [pc, #56]	; (11c0c <z_impl_device_get_binding+0x48>)
   11bd4:	42b4      	cmp	r4, r6
   11bd6:	d109      	bne.n	11bec <z_impl_device_get_binding+0x28>
		if (strcmp(name, info->config->name) == 0) {
			return info;
		}
	}

	return NULL;
   11bd8:	2400      	movs	r4, #0
   11bda:	e012      	b.n	11c02 <z_impl_device_get_binding+0x3e>
		if ((info->driver_api != NULL) &&
   11bdc:	6862      	ldr	r2, [r4, #4]
   11bde:	b11a      	cbz	r2, 11be8 <z_impl_device_get_binding+0x24>
		    (info->config->name == name)) {
   11be0:	6822      	ldr	r2, [r4, #0]
		if ((info->driver_api != NULL) &&
   11be2:	6812      	ldr	r2, [r2, #0]
   11be4:	42aa      	cmp	r2, r5
   11be6:	d00c      	beq.n	11c02 <z_impl_device_get_binding+0x3e>
	for (info = __device_init_start; info != __device_init_end; info++) {
   11be8:	340c      	adds	r4, #12
   11bea:	e7f0      	b.n	11bce <z_impl_device_get_binding+0xa>
		if (info->driver_api == NULL) {
   11bec:	6863      	ldr	r3, [r4, #4]
   11bee:	b90b      	cbnz	r3, 11bf4 <z_impl_device_get_binding+0x30>
	for (info = __device_init_start; info != __device_init_end; info++) {
   11bf0:	340c      	adds	r4, #12
   11bf2:	e7ef      	b.n	11bd4 <z_impl_device_get_binding+0x10>
		if (strcmp(name, info->config->name) == 0) {
   11bf4:	6823      	ldr	r3, [r4, #0]
   11bf6:	4628      	mov	r0, r5
   11bf8:	6819      	ldr	r1, [r3, #0]
   11bfa:	f002 f88a 	bl	13d12 <strcmp>
   11bfe:	2800      	cmp	r0, #0
   11c00:	d1f6      	bne.n	11bf0 <z_impl_device_get_binding+0x2c>
}
   11c02:	4620      	mov	r0, r4
   11c04:	bd70      	pop	{r4, r5, r6, pc}
   11c06:	bf00      	nop
   11c08:	200014a0 	.word	0x200014a0
   11c0c:	20001440 	.word	0x20001440

00011c10 <idle>:
#else
#define IDLE_YIELD_IF_COOP() do { } while (false)
#endif

void idle(void *unused1, void *unused2, void *unused3)
{
   11c10:	b508      	push	{r3, lr}
	_kernel.idle = ticks;
   11c12:	4d0b      	ldr	r5, [pc, #44]	; (11c40 <idle+0x30>)
   11c14:	f04f 0220 	mov.w	r2, #32
   11c18:	f3ef 8311 	mrs	r3, BASEPRI
   11c1c:	f382 8811 	msr	BASEPRI, r2
   11c20:	f3bf 8f6f 	isb	sy
	s32_t ticks = z_get_next_timeout_expiry();
   11c24:	f002 f9e7 	bl	13ff6 <z_get_next_timeout_expiry>
	z_set_timeout_expiry((ticks < IDLE_THRESH) ? 1 : ticks, true);
   11c28:	2101      	movs	r1, #1
	s32_t ticks = z_get_next_timeout_expiry();
   11c2a:	4604      	mov	r4, r0
	z_set_timeout_expiry((ticks < IDLE_THRESH) ? 1 : ticks, true);
   11c2c:	2802      	cmp	r0, #2
   11c2e:	bfd8      	it	le
   11c30:	4608      	movle	r0, r1
   11c32:	f002 f9f0 	bl	14016 <z_set_timeout_expiry>
	_kernel.idle = ticks;
   11c36:	622c      	str	r4, [r5, #32]
 * @return N/A
 * @req K-CPU-IDLE-001
 */
static inline void k_cpu_idle(void)
{
	arch_cpu_idle();
   11c38:	f7ff faca 	bl	111d0 <arch_cpu_idle>
   11c3c:	e7ea      	b.n	11c14 <idle+0x4>
   11c3e:	bf00      	nop
   11c40:	2000062c 	.word	0x2000062c

00011c44 <z_bss_zero>:
 *
 * @return N/A
 */
void z_bss_zero(void)
{
	(void)memset(__bss_start, 0, __bss_end - __bss_start);
   11c44:	4802      	ldr	r0, [pc, #8]	; (11c50 <z_bss_zero+0xc>)
   11c46:	4a03      	ldr	r2, [pc, #12]	; (11c54 <z_bss_zero+0x10>)
   11c48:	2100      	movs	r1, #0
   11c4a:	1a12      	subs	r2, r2, r0
   11c4c:	f002 b8be 	b.w	13dcc <memset>
   11c50:	20000000 	.word	0x20000000
   11c54:	2000068c 	.word	0x2000068c

00011c58 <z_data_copy>:
 * This routine copies the data section from ROM to RAM.
 *
 * @return N/A
 */
void z_data_copy(void)
{
   11c58:	b508      	push	{r3, lr}
	(void)memcpy(&__data_ram_start, &__data_rom_start,
		 __data_ram_end - __data_ram_start);
   11c5a:	4806      	ldr	r0, [pc, #24]	; (11c74 <z_data_copy+0x1c>)
	(void)memcpy(&__data_ram_start, &__data_rom_start,
   11c5c:	4a06      	ldr	r2, [pc, #24]	; (11c78 <z_data_copy+0x20>)
   11c5e:	4907      	ldr	r1, [pc, #28]	; (11c7c <z_data_copy+0x24>)
   11c60:	1a12      	subs	r2, r2, r0
   11c62:	f002 f889 	bl	13d78 <memcpy>
#else
	(void)memcpy(&_app_smem_start, &_app_smem_rom_start,
		 _app_smem_end - _app_smem_start);
#endif /* CONFIG_STACK_CANARIES */
#endif /* CONFIG_USERSPACE */
}
   11c66:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	(void)memcpy(&_ramfunc_ram_start, &_ramfunc_rom_start,
   11c6a:	4a05      	ldr	r2, [pc, #20]	; (11c80 <z_data_copy+0x28>)
   11c6c:	4905      	ldr	r1, [pc, #20]	; (11c84 <z_data_copy+0x2c>)
   11c6e:	4806      	ldr	r0, [pc, #24]	; (11c88 <z_data_copy+0x30>)
   11c70:	f002 b882 	b.w	13d78 <memcpy>
   11c74:	200013d0 	.word	0x200013d0
   11c78:	20001504 	.word	0x20001504
   11c7c:	000148e4 	.word	0x000148e4
   11c80:	00000000 	.word	0x00000000
   11c84:	000148e4 	.word	0x000148e4
   11c88:	20000000 	.word	0x20000000

00011c8c <bg_thread_main>:
	static const unsigned int boot_delay = CONFIG_BOOT_DELAY;
#else
	static const unsigned int boot_delay;
#endif

	z_sys_post_kernel = true;
   11c8c:	2201      	movs	r2, #1
{
   11c8e:	b508      	push	{r3, lr}
	z_sys_post_kernel = true;
   11c90:	4b08      	ldr	r3, [pc, #32]	; (11cb4 <bg_thread_main+0x28>)

	z_sys_device_do_config_level(_SYS_INIT_LEVEL_POST_KERNEL);
   11c92:	2002      	movs	r0, #2
	z_sys_post_kernel = true;
   11c94:	701a      	strb	r2, [r3, #0]
	z_sys_device_do_config_level(_SYS_INIT_LEVEL_POST_KERNEL);
   11c96:	f7ff ff7f 	bl	11b98 <z_sys_device_do_config_level>
			KERNEL_VERSION_STRING, BOOT_DELAY_BANNER);
#endif
#endif

	/* Final init level before app starts */
	z_sys_device_do_config_level(_SYS_INIT_LEVEL_APPLICATION);
   11c9a:	2003      	movs	r0, #3
   11c9c:	f7ff ff7c 	bl	11b98 <z_sys_device_do_config_level>
	extern void __do_init_array_aux(void);
	__do_global_ctors_aux();
	__do_init_array_aux();
#endif

	z_init_static_threads();
   11ca0:	f000 fc76 	bl	12590 <z_init_static_threads>
	z_timestamp_main = k_cycle_get_32();
#endif

	extern void main(void);

	main();
   11ca4:	f001 fc9a 	bl	135dc <main>

	/* Mark nonessenrial since main() has no more work to do */
	z_main_thread.base.user_options &= ~K_ESSENTIAL;
   11ca8:	4a03      	ldr	r2, [pc, #12]	; (11cb8 <bg_thread_main+0x2c>)
   11caa:	7b13      	ldrb	r3, [r2, #12]
   11cac:	f023 0301 	bic.w	r3, r3, #1
   11cb0:	7313      	strb	r3, [r2, #12]

	/* Dump coverage data once the main() has exited. */
	gcov_coverage_dump();
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */
   11cb2:	bd08      	pop	{r3, pc}
   11cb4:	20000689 	.word	0x20000689
   11cb8:	200005c0 	.word	0x200005c0

00011cbc <z_cstart>:
 * cleared/zeroed.
 *
 * @return Does not return
 */
FUNC_NORETURN void z_cstart(void)
{
   11cbc:	b580      	push	{r7, lr}
 *
 * @return N/A
 */
static ALWAYS_INLINE void z_arm_interrupt_stack_setup(void)
{
	u32_t msp = (u32_t)(Z_THREAD_STACK_BUFFER(_interrupt_stack)) +
   11cbe:	4b37      	ldr	r3, [pc, #220]	; (11d9c <z_cstart+0xe0>)
   11cc0:	b0a2      	sub	sp, #136	; 0x88
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
   11cc2:	f383 8808 	msr	MSP, r3
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   11cc6:	2500      	movs	r5, #0
   11cc8:	23e0      	movs	r3, #224	; 0xe0
   11cca:	4c35      	ldr	r4, [pc, #212]	; (11da0 <z_cstart+0xe4>)

	/* perform any architecture-specific initialization */
	arch_kernel_init();

#ifdef CONFIG_MULTITHREADING
	struct k_thread dummy_thread = {
   11ccc:	2701      	movs	r7, #1
   11cce:	f884 3022 	strb.w	r3, [r4, #34]	; 0x22
   11cd2:	77e5      	strb	r5, [r4, #31]
   11cd4:	7625      	strb	r5, [r4, #24]
   11cd6:	7665      	strb	r5, [r4, #25]
   11cd8:	76a5      	strb	r5, [r4, #26]
   11cda:	76e5      	strb	r5, [r4, #27]
#if defined(CONFIG_ARM_SECURE_FIRMWARE)
	NVIC_SetPriority(SecureFault_IRQn, _EXC_FAULT_PRIO);
#endif /* CONFIG_ARM_SECURE_FIRMWARE */

	/* Enable Usage, Mem, & Bus Faults */
	SCB->SHCSR |= SCB_SHCSR_USGFAULTENA_Msk | SCB_SHCSR_MEMFAULTENA_Msk |
   11cdc:	6a63      	ldr	r3, [r4, #36]	; 0x24
	_kernel.ready_q.cache = &z_main_thread;
   11cde:	4e31      	ldr	r6, [pc, #196]	; (11da4 <z_cstart+0xe8>)
   11ce0:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
   11ce4:	6263      	str	r3, [r4, #36]	; 0x24
		      SCB_SHCSR_BUSFAULTENA_Msk;
#if defined(CONFIG_ARM_SECURE_FIRMWARE)
	/* Enable Secure Fault */
	SCB->SHCSR |= SCB_SHCSR_SECUREFAULTENA_Msk;
   11ce6:	6a63      	ldr	r3, [r4, #36]	; 0x24
   11ce8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
   11cec:	6263      	str	r3, [r4, #36]	; 0x24
	/* Clear BFAR before setting BusFaults to target Non-Secure state. */
	SCB->BFAR = 0;
   11cee:	63a5      	str	r5, [r4, #56]	; 0x38

static ALWAYS_INLINE void arch_kernel_init(void)
{
	z_arm_interrupt_stack_setup();
	z_arm_exc_setup();
	z_arm_fault_init();
   11cf0:	f7ff fbda 	bl	114a8 <z_arm_fault_init>
	z_arm_cpu_idle_init();
   11cf4:	f7ff fa66 	bl	111c4 <z_arm_cpu_idle_init>
static ALWAYS_INLINE void z_arm_clear_faults(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Reset all faults */
	SCB->CFSR = SCB_CFSR_USGFAULTSR_Msk |
   11cf8:	f04f 33ff 	mov.w	r3, #4294967295
   11cfc:	62a3      	str	r3, [r4, #40]	; 0x28
		    SCB_CFSR_MEMFAULTSR_Msk |
		    SCB_CFSR_BUSFAULTSR_Msk;

	/* Clear all Hard Faults - HFSR is write-one-to-clear */
	SCB->HFSR = 0xffffffff;
   11cfe:	62e3      	str	r3, [r4, #44]	; 0x2c
	struct k_thread dummy_thread = {
   11d00:	ab07      	add	r3, sp, #28
   11d02:	226c      	movs	r2, #108	; 0x6c
   11d04:	4629      	mov	r1, r5
   11d06:	4618      	mov	r0, r3
   11d08:	f002 f860 	bl	13dcc <memset>
# ifdef CONFIG_SCHED_CPU_MASK
		 .base.cpu_mask = -1,
# endif
	};

	_current = &dummy_thread;
   11d0c:	4c26      	ldr	r4, [pc, #152]	; (11da8 <z_cstart+0xec>)
	struct k_thread dummy_thread = {
   11d0e:	f88d 7029 	strb.w	r7, [sp, #41]	; 0x29
	_current = &dummy_thread;
   11d12:	60a0      	str	r0, [r4, #8]
#ifdef CONFIG_USERSPACE
	z_app_shmem_bss_zero();
#endif

	/* perform basic hardware initialization */
	z_sys_device_do_config_level(_SYS_INIT_LEVEL_PRE_KERNEL_1);
   11d14:	4628      	mov	r0, r5
   11d16:	f7ff ff3f 	bl	11b98 <z_sys_device_do_config_level>
	z_sys_device_do_config_level(_SYS_INIT_LEVEL_PRE_KERNEL_2);
   11d1a:	4638      	mov	r0, r7
   11d1c:	f7ff ff3c 	bl	11b98 <z_sys_device_do_config_level>
	z_sched_init();
   11d20:	f000 fbe8 	bl	124f4 <z_sched_init>
	z_setup_new_thread(&z_main_thread, z_main_stack,
   11d24:	4b21      	ldr	r3, [pc, #132]	; (11dac <z_cstart+0xf0>)
	_kernel.ready_q.cache = &z_main_thread;
   11d26:	6266      	str	r6, [r4, #36]	; 0x24
	z_setup_new_thread(&z_main_thread, z_main_stack,
   11d28:	f44f 6280 	mov.w	r2, #1024	; 0x400
   11d2c:	e9cd 7304 	strd	r7, r3, [sp, #16]
   11d30:	e9cd 5502 	strd	r5, r5, [sp, #8]
   11d34:	4b1e      	ldr	r3, [pc, #120]	; (11db0 <z_cstart+0xf4>)
   11d36:	e9cd 5500 	strd	r5, r5, [sp]
   11d3a:	491e      	ldr	r1, [pc, #120]	; (11db4 <z_cstart+0xf8>)
   11d3c:	4630      	mov	r0, r6
   11d3e:	f000 fc0f 	bl	12560 <z_setup_new_thread>
	sys_trace_thread_resume(thread);
}

static inline void z_mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
   11d42:	7b73      	ldrb	r3, [r6, #13]
   11d44:	f023 0204 	bic.w	r2, r3, #4
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
   11d48:	f013 0f1b 	tst.w	r3, #27
	thread->base.thread_state &= ~_THREAD_PRESTART;
   11d4c:	7372      	strb	r2, [r6, #13]
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
   11d4e:	d104      	bne.n	11d5a <z_cstart+0x9e>
	return true;
}

static ALWAYS_INLINE void z_ready_thread(struct k_thread *thread)
{
	if (z_is_thread_ready(thread)) {
   11d50:	69b3      	ldr	r3, [r6, #24]
   11d52:	b913      	cbnz	r3, 11d5a <z_cstart+0x9e>
		z_add_thread_to_ready_q(thread);
   11d54:	4630      	mov	r0, r6
   11d56:	f000 fa19 	bl	1218c <z_add_thread_to_ready_q>
	z_setup_new_thread(thread, stack,
   11d5a:	4b17      	ldr	r3, [pc, #92]	; (11db8 <z_cstart+0xfc>)
   11d5c:	2201      	movs	r2, #1
   11d5e:	9305      	str	r3, [sp, #20]
   11d60:	230f      	movs	r3, #15
   11d62:	e9cd 3203 	strd	r3, r2, [sp, #12]
   11d66:	2300      	movs	r3, #0
   11d68:	4d14      	ldr	r5, [pc, #80]	; (11dbc <z_cstart+0x100>)
   11d6a:	e9cd 3301 	strd	r3, r3, [sp, #4]
   11d6e:	9300      	str	r3, [sp, #0]
   11d70:	f44f 72a0 	mov.w	r2, #320	; 0x140
   11d74:	4b12      	ldr	r3, [pc, #72]	; (11dc0 <z_cstart+0x104>)
   11d76:	4913      	ldr	r1, [pc, #76]	; (11dc4 <z_cstart+0x108>)
   11d78:	4628      	mov	r0, r5
   11d7a:	f000 fbf1 	bl	12560 <z_setup_new_thread>
	thread->base.thread_state &= ~_THREAD_PRESTART;
   11d7e:	7b6b      	ldrb	r3, [r5, #13]
	_kernel.cpus[0].idle_thread = &z_idle_thread;
   11d80:	60e5      	str	r5, [r4, #12]
   11d82:	f023 0304 	bic.w	r3, r3, #4
   11d86:	736b      	strb	r3, [r5, #13]
 * @return N/A
 */

static inline void sys_dlist_init(sys_dlist_t *list)
{
	list->head = (sys_dnode_t *)list;
   11d88:	4b0f      	ldr	r3, [pc, #60]	; (11dc8 <z_cstart+0x10c>)
	arch_switch_to_main_thread(&z_main_thread, z_main_stack,
   11d8a:	f44f 6280 	mov.w	r2, #1024	; 0x400
	list->tail = (sys_dnode_t *)list;
   11d8e:	e9c4 3306 	strd	r3, r3, [r4, #24]
   11d92:	4908      	ldr	r1, [pc, #32]	; (11db4 <z_cstart+0xf8>)
   11d94:	4b06      	ldr	r3, [pc, #24]	; (11db0 <z_cstart+0xf4>)
   11d96:	4803      	ldr	r0, [pc, #12]	; (11da4 <z_cstart+0xe8>)
   11d98:	f7ff f9f2 	bl	11180 <arch_switch_to_main_thread>
	CODE_UNREACHABLE; /* LCOV_EXCL_LINE */
   11d9c:	200013d0 	.word	0x200013d0
   11da0:	e000ed00 	.word	0xe000ed00
   11da4:	200005c0 	.word	0x200005c0
   11da8:	2000062c 	.word	0x2000062c
   11dac:	000148d6 	.word	0x000148d6
   11db0:	00011c8d 	.word	0x00011c8d
   11db4:	20000690 	.word	0x20000690
   11db8:	000148db 	.word	0x000148db
   11dbc:	20000554 	.word	0x20000554
   11dc0:	00011c11 	.word	0x00011c11
   11dc4:	20000a90 	.word	0x20000a90
   11dc8:	20000644 	.word	0x20000644

00011dcc <init_mem_slab_module>:
 * Perform any initialization that wasn't done at build time.
 *
 * @return N/A
 */
static int init_mem_slab_module(struct device *dev)
{
   11dcc:	b570      	push	{r4, r5, r6, lr}
	int rc = 0;
	ARG_UNUSED(dev);

	Z_STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
   11dce:	4b0e      	ldr	r3, [pc, #56]	; (11e08 <init_mem_slab_module+0x3c>)
   11dd0:	4c0e      	ldr	r4, [pc, #56]	; (11e0c <init_mem_slab_module+0x40>)
   11dd2:	42a3      	cmp	r3, r4
   11dd4:	d301      	bcc.n	11dda <init_mem_slab_module+0xe>
		}
		SYS_TRACING_OBJ_INIT(k_mem_slab, slab);
		z_object_init(slab);
	}

out:
   11dd6:	2000      	movs	r0, #0
	return rc;
}
   11dd8:	bd70      	pop	{r4, r5, r6, pc}
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
   11dda:	e9d3 0103 	ldrd	r0, r1, [r3, #12]
   11dde:	ea41 0200 	orr.w	r2, r1, r0
   11de2:	f012 0203 	ands.w	r2, r2, #3
   11de6:	d10b      	bne.n	11e00 <init_mem_slab_module+0x34>
	for (j = 0U; j < slab->num_blocks; j++) {
   11de8:	689d      	ldr	r5, [r3, #8]
	slab->free_list = NULL;
   11dea:	615a      	str	r2, [r3, #20]
	for (j = 0U; j < slab->num_blocks; j++) {
   11dec:	42aa      	cmp	r2, r5
   11dee:	d101      	bne.n	11df4 <init_mem_slab_module+0x28>
	Z_STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
   11df0:	331c      	adds	r3, #28
   11df2:	e7ee      	b.n	11dd2 <init_mem_slab_module+0x6>
		*(char **)p = slab->free_list;
   11df4:	695e      	ldr	r6, [r3, #20]
	for (j = 0U; j < slab->num_blocks; j++) {
   11df6:	3201      	adds	r2, #1
		*(char **)p = slab->free_list;
   11df8:	600e      	str	r6, [r1, #0]
		slab->free_list = p;
   11dfa:	6159      	str	r1, [r3, #20]
		p += slab->block_size;
   11dfc:	4401      	add	r1, r0
   11dfe:	e7f5      	b.n	11dec <init_mem_slab_module+0x20>
		return -EINVAL;
   11e00:	f06f 0015 	mvn.w	r0, #21
	return rc;
   11e04:	e7e8      	b.n	11dd8 <init_mem_slab_module+0xc>
   11e06:	bf00      	nop
   11e08:	200014a0 	.word	0x200014a0
   11e0c:	200014a0 	.word	0x200014a0

00011e10 <k_mem_slab_alloc>:
out:
	return rc;
}

int k_mem_slab_alloc(struct k_mem_slab *slab, void **mem, s32_t timeout)
{
   11e10:	b510      	push	{r4, lr}
   11e12:	4613      	mov	r3, r2
   11e14:	460c      	mov	r4, r1
   11e16:	f04f 0220 	mov.w	r2, #32
   11e1a:	f3ef 8111 	mrs	r1, BASEPRI
   11e1e:	f382 8811 	msr	BASEPRI, r2
   11e22:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	int result;

	if (slab->free_list != NULL) {
   11e26:	6942      	ldr	r2, [r0, #20]
   11e28:	b15a      	cbz	r2, 11e42 <k_mem_slab_alloc+0x32>
		/* take a free block */
		*mem = slab->free_list;
   11e2a:	6022      	str	r2, [r4, #0]
		slab->free_list = *(char **)(slab->free_list);
   11e2c:	6813      	ldr	r3, [r2, #0]
   11e2e:	6143      	str	r3, [r0, #20]
		slab->num_used++;
   11e30:	6983      	ldr	r3, [r0, #24]
   11e32:	3301      	adds	r3, #1
   11e34:	6183      	str	r3, [r0, #24]
		result = 0;
   11e36:	2000      	movs	r0, #0
	__asm__ volatile(
   11e38:	f381 8811 	msr	BASEPRI, r1
   11e3c:	f3bf 8f6f 	isb	sy
		return result;
	}

	k_spin_unlock(&lock, key);

	return result;
   11e40:	e00d      	b.n	11e5e <k_mem_slab_alloc+0x4e>
	} else if (timeout == K_NO_WAIT) {
   11e42:	b91b      	cbnz	r3, 11e4c <k_mem_slab_alloc+0x3c>
		*mem = NULL;
   11e44:	6023      	str	r3, [r4, #0]
		result = -ENOMEM;
   11e46:	f06f 000b 	mvn.w	r0, #11
   11e4a:	e7f5      	b.n	11e38 <k_mem_slab_alloc+0x28>
		result = z_pend_curr(&lock, key, &slab->wait_q, timeout);
   11e4c:	4602      	mov	r2, r0
   11e4e:	4804      	ldr	r0, [pc, #16]	; (11e60 <k_mem_slab_alloc+0x50>)
   11e50:	f000 fafa 	bl	12448 <z_pend_curr>
		if (result == 0) {
   11e54:	b918      	cbnz	r0, 11e5e <k_mem_slab_alloc+0x4e>
			*mem = _current->base.swap_data;
   11e56:	4b03      	ldr	r3, [pc, #12]	; (11e64 <k_mem_slab_alloc+0x54>)
   11e58:	689b      	ldr	r3, [r3, #8]
   11e5a:	695b      	ldr	r3, [r3, #20]
   11e5c:	6023      	str	r3, [r4, #0]
}
   11e5e:	bd10      	pop	{r4, pc}
   11e60:	2000068a 	.word	0x2000068a
   11e64:	2000062c 	.word	0x2000062c

00011e68 <k_mem_slab_free>:

void k_mem_slab_free(struct k_mem_slab *slab, void **mem)
{
   11e68:	b570      	push	{r4, r5, r6, lr}
   11e6a:	4604      	mov	r4, r0
   11e6c:	460d      	mov	r5, r1
	__asm__ volatile(
   11e6e:	f04f 0320 	mov.w	r3, #32
   11e72:	f3ef 8611 	mrs	r6, BASEPRI
   11e76:	f383 8811 	msr	BASEPRI, r3
   11e7a:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_thread *pending_thread = z_unpend_first_thread(&slab->wait_q);
   11e7e:	f002 f868 	bl	13f52 <z_unpend_first_thread>

	if (pending_thread != NULL) {
   11e82:	b180      	cbz	r0, 11ea6 <k_mem_slab_free+0x3e>
}

static ALWAYS_INLINE void
arch_thread_return_value_set(struct k_thread *thread, unsigned int value)
{
	thread->arch.swap_return_value = value;
   11e84:	2100      	movs	r1, #0
		z_thread_return_value_set_with_data(pending_thread, 0, *mem);
   11e86:	682a      	ldr	r2, [r5, #0]
   11e88:	6681      	str	r1, [r0, #104]	; 0x68
z_thread_return_value_set_with_data(struct k_thread *thread,
				   unsigned int value,
				   void *data)
{
	arch_thread_return_value_set(thread, value);
	thread->base.swap_data = data;
   11e8a:	6142      	str	r2, [r0, #20]
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
   11e8c:	7b42      	ldrb	r2, [r0, #13]
   11e8e:	06d2      	lsls	r2, r2, #27
   11e90:	d103      	bne.n	11e9a <k_mem_slab_free+0x32>
	if (z_is_thread_ready(thread)) {
   11e92:	6983      	ldr	r3, [r0, #24]
   11e94:	b90b      	cbnz	r3, 11e9a <k_mem_slab_free+0x32>
		z_add_thread_to_ready_q(thread);
   11e96:	f000 f979 	bl	1218c <z_add_thread_to_ready_q>
		z_ready_thread(pending_thread);
		z_reschedule(&lock, key);
   11e9a:	4631      	mov	r1, r6
		**(char ***)mem = slab->free_list;
		slab->free_list = *(char **)mem;
		slab->num_used--;
		k_spin_unlock(&lock, key);
	}
}
   11e9c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		z_reschedule(&lock, key);
   11ea0:	4807      	ldr	r0, [pc, #28]	; (11ec0 <k_mem_slab_free+0x58>)
   11ea2:	f001 bffe 	b.w	13ea2 <z_reschedule>
		**(char ***)mem = slab->free_list;
   11ea6:	682b      	ldr	r3, [r5, #0]
   11ea8:	6962      	ldr	r2, [r4, #20]
   11eaa:	601a      	str	r2, [r3, #0]
		slab->free_list = *(char **)mem;
   11eac:	682b      	ldr	r3, [r5, #0]
   11eae:	6163      	str	r3, [r4, #20]
		slab->num_used--;
   11eb0:	69a3      	ldr	r3, [r4, #24]
   11eb2:	3b01      	subs	r3, #1
   11eb4:	61a3      	str	r3, [r4, #24]
	__asm__ volatile(
   11eb6:	f386 8811 	msr	BASEPRI, r6
   11eba:	f3bf 8f6f 	isb	sy
}
   11ebe:	bd70      	pop	{r4, r5, r6, pc}
   11ec0:	2000068a 	.word	0x2000068a

00011ec4 <z_impl_k_mutex_lock>:
	}
	return false;
}

int z_impl_k_mutex_lock(struct k_mutex *mutex, s32_t timeout)
{
   11ec4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   11ec6:	4604      	mov	r4, r0
   11ec8:	460f      	mov	r7, r1
	__asm__ volatile(
   11eca:	f04f 0320 	mov.w	r3, #32
   11ece:	f3ef 8511 	mrs	r5, BASEPRI
   11ed2:	f383 8811 	msr	BASEPRI, r3
   11ed6:	f3bf 8f6f 	isb	sy
	bool resched = false;

	sys_trace_void(SYS_TRACE_ID_MUTEX_LOCK);
	key = k_spin_lock(&lock);

	if (likely((mutex->lock_count == 0U) || (mutex->owner == _current))) {
   11eda:	68c2      	ldr	r2, [r0, #12]
   11edc:	4930      	ldr	r1, [pc, #192]	; (11fa0 <z_impl_k_mutex_lock+0xdc>)
   11ede:	b15a      	cbz	r2, 11ef8 <z_impl_k_mutex_lock+0x34>
   11ee0:	6880      	ldr	r0, [r0, #8]
   11ee2:	688e      	ldr	r6, [r1, #8]
   11ee4:	42b0      	cmp	r0, r6
   11ee6:	d015      	beq.n	11f14 <z_impl_k_mutex_lock+0x50>
		sys_trace_end_call(SYS_TRACE_ID_MUTEX_LOCK);

		return 0;
	}

	if (unlikely(timeout == (s32_t)K_NO_WAIT)) {
   11ee8:	b9b7      	cbnz	r7, 11f18 <z_impl_k_mutex_lock+0x54>
	__asm__ volatile(
   11eea:	f385 8811 	msr	BASEPRI, r5
   11eee:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		sys_trace_end_call(SYS_TRACE_ID_MUTEX_LOCK);
		return -EBUSY;
   11ef2:	f06f 000f 	mvn.w	r0, #15
   11ef6:	e00c      	b.n	11f12 <z_impl_k_mutex_lock+0x4e>
					_current->base.prio :
   11ef8:	688b      	ldr	r3, [r1, #8]
   11efa:	f993 300e 	ldrsb.w	r3, [r3, #14]
		mutex->owner_orig_prio = (mutex->lock_count == 0U) ?
   11efe:	6123      	str	r3, [r4, #16]
		mutex->owner = _current;
   11f00:	688b      	ldr	r3, [r1, #8]
		mutex->lock_count++;
   11f02:	3201      	adds	r2, #1
   11f04:	60e2      	str	r2, [r4, #12]
		mutex->owner = _current;
   11f06:	60a3      	str	r3, [r4, #8]
   11f08:	f385 8811 	msr	BASEPRI, r5
   11f0c:	f3bf 8f6f 	isb	sy
		return 0;
   11f10:	2000      	movs	r0, #0
		k_spin_unlock(&lock, key);
	}

	sys_trace_end_call(SYS_TRACE_ID_MUTEX_LOCK);
	return -EAGAIN;
}
   11f12:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
					_current->base.prio :
   11f14:	6923      	ldr	r3, [r4, #16]
   11f16:	e7f2      	b.n	11efe <z_impl_k_mutex_lock+0x3a>
	new_prio = new_prio_for_inheritance(_current->base.prio,
   11f18:	f990 300e 	ldrsb.w	r3, [r0, #14]
   11f1c:	f996 100e 	ldrsb.w	r1, [r6, #14]
   11f20:	4299      	cmp	r1, r3
   11f22:	bfa8      	it	ge
   11f24:	4619      	movge	r1, r3
   11f26:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
	if (z_is_prio_higher(new_prio, mutex->owner->base.prio)) {
   11f2a:	4299      	cmp	r1, r3
   11f2c:	da2b      	bge.n	11f86 <z_impl_k_mutex_lock+0xc2>
		return z_set_prio(mutex->owner, new_prio);
   11f2e:	f000 fa9f 	bl	12470 <z_set_prio>
   11f32:	4606      	mov	r6, r0
	int got_mutex = z_pend_curr(&lock, key, &mutex->wait_q, timeout);
   11f34:	463b      	mov	r3, r7
   11f36:	4622      	mov	r2, r4
   11f38:	4629      	mov	r1, r5
   11f3a:	481a      	ldr	r0, [pc, #104]	; (11fa4 <z_impl_k_mutex_lock+0xe0>)
   11f3c:	f000 fa84 	bl	12448 <z_pend_curr>
	if (got_mutex == 0) {
   11f40:	2800      	cmp	r0, #0
   11f42:	d0e6      	beq.n	11f12 <z_impl_k_mutex_lock+0x4e>
	__asm__ volatile(
   11f44:	f04f 0320 	mov.w	r3, #32
   11f48:	f3ef 8511 	mrs	r5, BASEPRI
   11f4c:	f383 8811 	msr	BASEPRI, r3
   11f50:	f3bf 8f6f 	isb	sy
 * @return true if empty, false otherwise
 */

static inline bool sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
   11f54:	6823      	ldr	r3, [r4, #0]
   11f56:	6921      	ldr	r1, [r4, #16]
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
   11f58:	429c      	cmp	r4, r3
   11f5a:	d007      	beq.n	11f6c <z_impl_k_mutex_lock+0xa8>
		new_prio_for_inheritance(waiter->base.prio, mutex->owner_orig_prio) :
   11f5c:	b133      	cbz	r3, 11f6c <z_impl_k_mutex_lock+0xa8>
   11f5e:	f993 300e 	ldrsb.w	r3, [r3, #14]
   11f62:	4299      	cmp	r1, r3
   11f64:	bfa8      	it	ge
   11f66:	4619      	movge	r1, r3
   11f68:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
	resched = adjust_owner_prio(mutex, new_prio) || resched;
   11f6c:	68a0      	ldr	r0, [r4, #8]
	if (mutex->owner->base.prio != new_prio) {
   11f6e:	f990 300e 	ldrsb.w	r3, [r0, #14]
   11f72:	4299      	cmp	r1, r3
   11f74:	d109      	bne.n	11f8a <z_impl_k_mutex_lock+0xc6>
	if (resched) {
   11f76:	b16e      	cbz	r6, 11f94 <z_impl_k_mutex_lock+0xd0>
		z_reschedule(&lock, key);
   11f78:	4629      	mov	r1, r5
   11f7a:	480a      	ldr	r0, [pc, #40]	; (11fa4 <z_impl_k_mutex_lock+0xe0>)
   11f7c:	f001 ff91 	bl	13ea2 <z_reschedule>
	return -EAGAIN;
   11f80:	f06f 000a 	mvn.w	r0, #10
   11f84:	e7c5      	b.n	11f12 <z_impl_k_mutex_lock+0x4e>
	bool resched = false;
   11f86:	2600      	movs	r6, #0
   11f88:	e7d4      	b.n	11f34 <z_impl_k_mutex_lock+0x70>
		return z_set_prio(mutex->owner, new_prio);
   11f8a:	f000 fa71 	bl	12470 <z_set_prio>
	resched = adjust_owner_prio(mutex, new_prio) || resched;
   11f8e:	2800      	cmp	r0, #0
   11f90:	d1f2      	bne.n	11f78 <z_impl_k_mutex_lock+0xb4>
   11f92:	e7f0      	b.n	11f76 <z_impl_k_mutex_lock+0xb2>
	__asm__ volatile(
   11f94:	f385 8811 	msr	BASEPRI, r5
   11f98:	f3bf 8f6f 	isb	sy
   11f9c:	e7f0      	b.n	11f80 <z_impl_k_mutex_lock+0xbc>
   11f9e:	bf00      	nop
   11fa0:	2000062c 	.word	0x2000062c
   11fa4:	2000068a 	.word	0x2000068a

00011fa8 <z_impl_k_mutex_unlock>:
}
#include <syscalls/k_mutex_lock_mrsh.c>
#endif

int z_impl_k_mutex_unlock(struct k_mutex *mutex)
{
   11fa8:	b538      	push	{r3, r4, r5, lr}
	struct k_thread *new_owner;

	CHECKIF(mutex->owner == NULL) {
   11faa:	6883      	ldr	r3, [r0, #8]
{
   11fac:	4604      	mov	r4, r0
	CHECKIF(mutex->owner == NULL) {
   11fae:	2b00      	cmp	r3, #0
   11fb0:	d03b      	beq.n	1202a <z_impl_k_mutex_unlock+0x82>
		return -EINVAL;
	}
	/*
	 * The current thread does not own the mutex.
	 */
	CHECKIF(mutex->owner != _current) {
   11fb2:	4a21      	ldr	r2, [pc, #132]	; (12038 <z_impl_k_mutex_unlock+0x90>)
   11fb4:	6892      	ldr	r2, [r2, #8]
   11fb6:	4293      	cmp	r3, r2
   11fb8:	d13a      	bne.n	12030 <z_impl_k_mutex_unlock+0x88>
{
#ifdef CONFIG_PREEMPT_ENABLED
	__ASSERT(!arch_is_in_isr(), "");
	__ASSERT(_current->base.sched_locked != 1, "");

	--_current->base.sched_locked;
   11fba:	7bda      	ldrb	r2, [r3, #15]
   11fbc:	3a01      	subs	r2, #1
   11fbe:	73da      	strb	r2, [r3, #15]

	/*
	 * If we are the owner and count is greater than 1, then decrement
	 * the count and return and keep current thread as the owner.
	 */
	if (mutex->lock_count - 1U != 0U) {
   11fc0:	68c3      	ldr	r3, [r0, #12]
   11fc2:	2b01      	cmp	r3, #1
   11fc4:	d005      	beq.n	11fd2 <z_impl_k_mutex_unlock+0x2a>
		mutex->lock_count--;
   11fc6:	3b01      	subs	r3, #1
   11fc8:	60c3      	str	r3, [r0, #12]
		k_spin_unlock(&lock, key);
	}


k_mutex_unlock_return:
	k_sched_unlock();
   11fca:	f000 f8c3 	bl	12154 <k_sched_unlock>
	sys_trace_end_call(SYS_TRACE_ID_MUTEX_UNLOCK);

	return 0;
   11fce:	2000      	movs	r0, #0
}
   11fd0:	bd38      	pop	{r3, r4, r5, pc}
	__asm__ volatile(
   11fd2:	f04f 0320 	mov.w	r3, #32
   11fd6:	f3ef 8511 	mrs	r5, BASEPRI
   11fda:	f383 8811 	msr	BASEPRI, r3
   11fde:	f3bf 8f6f 	isb	sy
	adjust_owner_prio(mutex, mutex->owner_orig_prio);
   11fe2:	6901      	ldr	r1, [r0, #16]
   11fe4:	6880      	ldr	r0, [r0, #8]
	if (mutex->owner->base.prio != new_prio) {
   11fe6:	f990 300e 	ldrsb.w	r3, [r0, #14]
   11fea:	4299      	cmp	r1, r3
   11fec:	d001      	beq.n	11ff2 <z_impl_k_mutex_unlock+0x4a>
		return z_set_prio(mutex->owner, new_prio);
   11fee:	f000 fa3f 	bl	12470 <z_set_prio>
	new_owner = z_unpend_first_thread(&mutex->wait_q);
   11ff2:	4620      	mov	r0, r4
   11ff4:	f001 ffad 	bl	13f52 <z_unpend_first_thread>
	mutex->owner = new_owner;
   11ff8:	60a0      	str	r0, [r4, #8]
	if (new_owner != NULL) {
   11ffa:	b180      	cbz	r0, 1201e <z_impl_k_mutex_unlock+0x76>
		mutex->owner_orig_prio = new_owner->base.prio;
   11ffc:	f990 200e 	ldrsb.w	r2, [r0, #14]
   12000:	6122      	str	r2, [r4, #16]
   12002:	2200      	movs	r2, #0
   12004:	6682      	str	r2, [r0, #104]	; 0x68
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
   12006:	7b42      	ldrb	r2, [r0, #13]
   12008:	06d2      	lsls	r2, r2, #27
   1200a:	d103      	bne.n	12014 <z_impl_k_mutex_unlock+0x6c>
	if (z_is_thread_ready(thread)) {
   1200c:	6983      	ldr	r3, [r0, #24]
   1200e:	b90b      	cbnz	r3, 12014 <z_impl_k_mutex_unlock+0x6c>
		z_add_thread_to_ready_q(thread);
   12010:	f000 f8bc 	bl	1218c <z_add_thread_to_ready_q>
		z_reschedule(&lock, key);
   12014:	4629      	mov	r1, r5
   12016:	4809      	ldr	r0, [pc, #36]	; (1203c <z_impl_k_mutex_unlock+0x94>)
   12018:	f001 ff43 	bl	13ea2 <z_reschedule>
   1201c:	e7d5      	b.n	11fca <z_impl_k_mutex_unlock+0x22>
		mutex->lock_count = 0U;
   1201e:	60e0      	str	r0, [r4, #12]
	__asm__ volatile(
   12020:	f385 8811 	msr	BASEPRI, r5
   12024:	f3bf 8f6f 	isb	sy
   12028:	e7cf      	b.n	11fca <z_impl_k_mutex_unlock+0x22>
		return -EINVAL;
   1202a:	f06f 0015 	mvn.w	r0, #21
   1202e:	e7cf      	b.n	11fd0 <z_impl_k_mutex_unlock+0x28>
		return -EPERM;
   12030:	f04f 30ff 	mov.w	r0, #4294967295
   12034:	e7cc      	b.n	11fd0 <z_impl_k_mutex_unlock+0x28>
   12036:	bf00      	nop
   12038:	2000062c 	.word	0x2000062c
   1203c:	2000068a 	.word	0x2000068a

00012040 <z_reset_time_slice>:
 */
static struct k_thread *pending_current;
#endif

void z_reset_time_slice(void)
{
   12040:	b510      	push	{r4, lr}
	/* Add the elapsed time since the last announced tick to the
	 * slice count, as we'll see those "expired" ticks arrive in a
	 * FUTURE z_time_slice() call.
	 */
	if (slice_time != 0) {
   12042:	4c08      	ldr	r4, [pc, #32]	; (12064 <z_reset_time_slice+0x24>)
   12044:	6823      	ldr	r3, [r4, #0]
   12046:	b15b      	cbz	r3, 12060 <z_reset_time_slice+0x20>
		_current_cpu->slice_ticks = slice_time + z_clock_elapsed();
   12048:	f7fe fcf0 	bl	10a2c <z_clock_elapsed>
   1204c:	6823      	ldr	r3, [r4, #0]
   1204e:	4a06      	ldr	r2, [pc, #24]	; (12068 <z_reset_time_slice+0x28>)
   12050:	4418      	add	r0, r3
   12052:	6110      	str	r0, [r2, #16]
		z_set_timeout_expiry(slice_time, false);
   12054:	2100      	movs	r1, #0
	}
}
   12056:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		z_set_timeout_expiry(slice_time, false);
   1205a:	4618      	mov	r0, r3
   1205c:	f001 bfdb 	b.w	14016 <z_set_timeout_expiry>
}
   12060:	bd10      	pop	{r4, pc}
   12062:	bf00      	nop
   12064:	20000664 	.word	0x20000664
   12068:	2000062c 	.word	0x2000062c

0001206c <k_sched_time_slice_set>:

void k_sched_time_slice_set(s32_t slice, int prio)
{
   1206c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1206e:	460d      	mov	r5, r1
	__asm__ volatile(
   12070:	f04f 0320 	mov.w	r3, #32
   12074:	f3ef 8411 	mrs	r4, BASEPRI
   12078:	f383 8811 	msr	BASEPRI, r3
   1207c:	f3bf 8f6f 	isb	sy
		} else {
			return t * (to_hz / from_hz);
		}
	} else {
		if (result32) {
			return (u32_t)((t * to_hz + off) / from_hz);
   12080:	f44f 4100 	mov.w	r1, #32768	; 0x8000
   12084:	f240 36e7 	movw	r6, #999	; 0x3e7
   12088:	2700      	movs	r7, #0
	LOCKED(&sched_spinlock) {
		_current_cpu->slice_ticks = 0;
   1208a:	2200      	movs	r2, #0
   1208c:	fbe1 6700 	umlal	r6, r7, r1, r0
   12090:	4b09      	ldr	r3, [pc, #36]	; (120b8 <k_sched_time_slice_set+0x4c>)
   12092:	4630      	mov	r0, r6
   12094:	611a      	str	r2, [r3, #16]
   12096:	4639      	mov	r1, r7
   12098:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   1209c:	2300      	movs	r3, #0
   1209e:	f7fe f9cd 	bl	1043c <__aeabi_uldivmod>
		slice_time = k_ms_to_ticks_ceil32(slice);
   120a2:	4b06      	ldr	r3, [pc, #24]	; (120bc <k_sched_time_slice_set+0x50>)
   120a4:	6018      	str	r0, [r3, #0]
		slice_max_prio = prio;
   120a6:	4b06      	ldr	r3, [pc, #24]	; (120c0 <k_sched_time_slice_set+0x54>)
   120a8:	601d      	str	r5, [r3, #0]
		z_reset_time_slice();
   120aa:	f7ff ffc9 	bl	12040 <z_reset_time_slice>
	__asm__ volatile(
   120ae:	f384 8811 	msr	BASEPRI, r4
   120b2:	f3bf 8f6f 	isb	sy
	}
}
   120b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   120b8:	2000062c 	.word	0x2000062c
   120bc:	20000664 	.word	0x20000664
   120c0:	20000660 	.word	0x20000660

000120c4 <k_sched_lock>:
	__asm__ volatile(
   120c4:	f04f 0320 	mov.w	r3, #32
   120c8:	f3ef 8111 	mrs	r1, BASEPRI
   120cc:	f383 8811 	msr	BASEPRI, r3
   120d0:	f3bf 8f6f 	isb	sy
	--_current->base.sched_locked;
   120d4:	4b04      	ldr	r3, [pc, #16]	; (120e8 <k_sched_lock+0x24>)
   120d6:	689a      	ldr	r2, [r3, #8]
   120d8:	7bd3      	ldrb	r3, [r2, #15]
   120da:	3b01      	subs	r3, #1
   120dc:	73d3      	strb	r3, [r2, #15]
	__asm__ volatile(
   120de:	f381 8811 	msr	BASEPRI, r1
   120e2:	f3bf 8f6f 	isb	sy
void k_sched_lock(void)
{
	LOCKED(&sched_spinlock) {
		z_sched_lock();
	}
}
   120e6:	4770      	bx	lr
   120e8:	2000062c 	.word	0x2000062c

000120ec <z_priq_dumb_remove>:
}

void z_priq_dumb_remove(sys_dlist_t *pq, struct k_thread *thread)
{
#if defined(CONFIG_SWAP_NONATOMIC) && defined(CONFIG_SCHED_DUMB)
	if (pq == &_kernel.ready_q.runq && thread == _current &&
   120ec:	4b09      	ldr	r3, [pc, #36]	; (12114 <z_priq_dumb_remove+0x28>)
   120ee:	f103 0228 	add.w	r2, r3, #40	; 0x28
   120f2:	4282      	cmp	r2, r0
   120f4:	d105      	bne.n	12102 <z_priq_dumb_remove+0x16>
   120f6:	689b      	ldr	r3, [r3, #8]
   120f8:	428b      	cmp	r3, r1
   120fa:	d102      	bne.n	12102 <z_priq_dumb_remove+0x16>
   120fc:	7b4b      	ldrb	r3, [r1, #13]
   120fe:	06db      	lsls	r3, r3, #27
   12100:	d106      	bne.n	12110 <z_priq_dumb_remove+0x24>
 * @return N/A
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	node->prev->next = node->next;
   12102:	e9d1 3200 	ldrd	r3, r2, [r1]
   12106:	6013      	str	r3, [r2, #0]
	node->next->prev = node->prev;
   12108:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   1210a:	2300      	movs	r3, #0
	node->prev = NULL;
   1210c:	e9c1 3300 	strd	r3, r3, [r1]
#endif

	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));

	sys_dlist_remove(&thread->base.qnode_dlist);
}
   12110:	4770      	bx	lr
   12112:	bf00      	nop
   12114:	2000062c 	.word	0x2000062c

00012118 <update_cache>:
{
   12118:	b538      	push	{r3, r4, r5, lr}
	struct k_thread *thread = _priq_run_best(&_kernel.ready_q.runq);
   1211a:	4c0d      	ldr	r4, [pc, #52]	; (12150 <update_cache+0x38>)
{
   1211c:	4602      	mov	r2, r0
	struct k_thread *thread = _priq_run_best(&_kernel.ready_q.runq);
   1211e:	f104 0028 	add.w	r0, r4, #40	; 0x28
   12122:	f001 fedf 	bl	13ee4 <z_priq_dumb_best>
	return thread ? thread : _current_cpu->idle_thread;
   12126:	4605      	mov	r5, r0
   12128:	b900      	cbnz	r0, 1212c <update_cache+0x14>
   1212a:	68e5      	ldr	r5, [r4, #12]
	if (preempt_ok != 0) {
   1212c:	68a3      	ldr	r3, [r4, #8]
   1212e:	b94a      	cbnz	r2, 12144 <update_cache+0x2c>
	if (z_is_thread_prevented_from_running(_current)) {
   12130:	7b5a      	ldrb	r2, [r3, #13]
   12132:	06d2      	lsls	r2, r2, #27
   12134:	d106      	bne.n	12144 <update_cache+0x2c>
	if (IS_ENABLED(CONFIG_SWAP_NONATOMIC)
   12136:	69aa      	ldr	r2, [r5, #24]
   12138:	b922      	cbnz	r2, 12144 <update_cache+0x2c>
	if (is_preempt(_current) || is_metairq(thread)) {
   1213a:	89da      	ldrh	r2, [r3, #14]
   1213c:	2a7f      	cmp	r2, #127	; 0x7f
   1213e:	d901      	bls.n	12144 <update_cache+0x2c>
		_kernel.ready_q.cache = _current;
   12140:	6263      	str	r3, [r4, #36]	; 0x24
}
   12142:	bd38      	pop	{r3, r4, r5, pc}
		if (thread != _current) {
   12144:	429d      	cmp	r5, r3
   12146:	d001      	beq.n	1214c <update_cache+0x34>
			z_reset_time_slice();
   12148:	f7ff ff7a 	bl	12040 <z_reset_time_slice>
		_kernel.ready_q.cache = thread;
   1214c:	6265      	str	r5, [r4, #36]	; 0x24
}
   1214e:	e7f8      	b.n	12142 <update_cache+0x2a>
   12150:	2000062c 	.word	0x2000062c

00012154 <k_sched_unlock>:
{
   12154:	b510      	push	{r4, lr}
	__asm__ volatile(
   12156:	f04f 0320 	mov.w	r3, #32
   1215a:	f3ef 8411 	mrs	r4, BASEPRI
   1215e:	f383 8811 	msr	BASEPRI, r3
   12162:	f3bf 8f6f 	isb	sy
		++_current->base.sched_locked;
   12166:	4b08      	ldr	r3, [pc, #32]	; (12188 <k_sched_unlock+0x34>)
		update_cache(0);
   12168:	2000      	movs	r0, #0
		++_current->base.sched_locked;
   1216a:	689a      	ldr	r2, [r3, #8]
   1216c:	7bd3      	ldrb	r3, [r2, #15]
   1216e:	3301      	adds	r3, #1
   12170:	73d3      	strb	r3, [r2, #15]
		update_cache(0);
   12172:	f7ff ffd1 	bl	12118 <update_cache>
	__asm__ volatile(
   12176:	f384 8811 	msr	BASEPRI, r4
   1217a:	f3bf 8f6f 	isb	sy
}
   1217e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule_unlocked();
   12182:	f001 bea5 	b.w	13ed0 <z_reschedule_unlocked>
   12186:	bf00      	nop
   12188:	2000062c 	.word	0x2000062c

0001218c <z_add_thread_to_ready_q>:
{
   1218c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	__asm__ volatile(
   1218e:	f04f 0320 	mov.w	r3, #32
   12192:	f3ef 8411 	mrs	r4, BASEPRI
   12196:	f383 8811 	msr	BASEPRI, r3
   1219a:	f3bf 8f6f 	isb	sy
	return list->head == list;
   1219e:	4a15      	ldr	r2, [pc, #84]	; (121f4 <z_add_thread_to_ready_q+0x68>)
   121a0:	4611      	mov	r1, r2
   121a2:	f851 3f28 	ldr.w	r3, [r1, #40]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   121a6:	428b      	cmp	r3, r1
   121a8:	d01d      	beq.n	121e6 <z_add_thread_to_ready_q+0x5a>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   121aa:	b1e3      	cbz	r3, 121e6 <z_add_thread_to_ready_q+0x5a>
   121ac:	6ad6      	ldr	r6, [r2, #44]	; 0x2c
	if (thread_1->base.prio < thread_2->base.prio) {
   121ae:	f990 500e 	ldrsb.w	r5, [r0, #14]
   121b2:	f993 700e 	ldrsb.w	r7, [r3, #14]
   121b6:	42af      	cmp	r7, r5
   121b8:	dd10      	ble.n	121dc <z_add_thread_to_ready_q+0x50>
	node->prev = successor->prev;
   121ba:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   121bc:	e9c0 3200 	strd	r3, r2, [r0]
	successor->prev->next = node;
   121c0:	6010      	str	r0, [r2, #0]
	successor->prev = node;
   121c2:	6058      	str	r0, [r3, #4]
	thread->base.thread_state |= states;
   121c4:	7b43      	ldrb	r3, [r0, #13]
   121c6:	f063 037f 	orn	r3, r3, #127	; 0x7f
   121ca:	7343      	strb	r3, [r0, #13]
		update_cache(0);
   121cc:	2000      	movs	r0, #0
   121ce:	f7ff ffa3 	bl	12118 <update_cache>
	__asm__ volatile(
   121d2:	f384 8811 	msr	BASEPRI, r4
   121d6:	f3bf 8f6f 	isb	sy
}
   121da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return (node == list->tail) ? NULL : node->next;
   121dc:	42b3      	cmp	r3, r6
   121de:	d002      	beq.n	121e6 <z_add_thread_to_ready_q+0x5a>
   121e0:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   121e2:	2b00      	cmp	r3, #0
   121e4:	d1e5      	bne.n	121b2 <z_add_thread_to_ready_q+0x26>
	node->prev = list->tail;
   121e6:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
	node->next = list;
   121e8:	6001      	str	r1, [r0, #0]
	node->prev = list->tail;
   121ea:	6043      	str	r3, [r0, #4]
	list->tail->next = node;
   121ec:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
   121ee:	6018      	str	r0, [r3, #0]
	list->tail = node;
   121f0:	62d0      	str	r0, [r2, #44]	; 0x2c
   121f2:	e7e7      	b.n	121c4 <z_add_thread_to_ready_q+0x38>
   121f4:	2000062c 	.word	0x2000062c

000121f8 <z_move_thread_to_end_of_prio_q>:
{
   121f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   121fa:	4604      	mov	r4, r0
	__asm__ volatile(
   121fc:	f04f 0320 	mov.w	r3, #32
   12200:	f3ef 8511 	mrs	r5, BASEPRI
   12204:	f383 8811 	msr	BASEPRI, r3
   12208:	f3bf 8f6f 	isb	sy
		if (z_is_thread_queued(thread)) {
   1220c:	f990 300d 	ldrsb.w	r3, [r0, #13]
   12210:	2b00      	cmp	r3, #0
   12212:	da03      	bge.n	1221c <z_move_thread_to_end_of_prio_q+0x24>
			_priq_run_remove(&_kernel.ready_q.runq, thread);
   12214:	4601      	mov	r1, r0
   12216:	4818      	ldr	r0, [pc, #96]	; (12278 <z_move_thread_to_end_of_prio_q+0x80>)
   12218:	f7ff ff68 	bl	120ec <z_priq_dumb_remove>
	return list->head == list;
   1221c:	4a17      	ldr	r2, [pc, #92]	; (1227c <z_move_thread_to_end_of_prio_q+0x84>)
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1221e:	f102 0128 	add.w	r1, r2, #40	; 0x28
   12222:	e9d2 300a 	ldrd	r3, r0, [r2, #40]	; 0x28
   12226:	428b      	cmp	r3, r1
   12228:	d01f      	beq.n	1226a <z_move_thread_to_end_of_prio_q+0x72>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   1222a:	b1f3      	cbz	r3, 1226a <z_move_thread_to_end_of_prio_q+0x72>
	if (thread_1->base.prio < thread_2->base.prio) {
   1222c:	f994 600e 	ldrsb.w	r6, [r4, #14]
   12230:	f993 700e 	ldrsb.w	r7, [r3, #14]
   12234:	42b7      	cmp	r7, r6
   12236:	dd13      	ble.n	12260 <z_move_thread_to_end_of_prio_q+0x68>
	node->prev = successor->prev;
   12238:	6859      	ldr	r1, [r3, #4]
	node->next = successor;
   1223a:	e9c4 3100 	strd	r3, r1, [r4]
	successor->prev->next = node;
   1223e:	600c      	str	r4, [r1, #0]
	successor->prev = node;
   12240:	605c      	str	r4, [r3, #4]
   12242:	7b63      	ldrb	r3, [r4, #13]
		update_cache(thread == _current);
   12244:	6890      	ldr	r0, [r2, #8]
   12246:	f063 037f 	orn	r3, r3, #127	; 0x7f
   1224a:	7363      	strb	r3, [r4, #13]
   1224c:	1b03      	subs	r3, r0, r4
   1224e:	4258      	negs	r0, r3
   12250:	4158      	adcs	r0, r3
   12252:	f7ff ff61 	bl	12118 <update_cache>
	__asm__ volatile(
   12256:	f385 8811 	msr	BASEPRI, r5
   1225a:	f3bf 8f6f 	isb	sy
}
   1225e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return (node == list->tail) ? NULL : node->next;
   12260:	4298      	cmp	r0, r3
   12262:	d002      	beq.n	1226a <z_move_thread_to_end_of_prio_q+0x72>
   12264:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   12266:	2b00      	cmp	r3, #0
   12268:	d1e2      	bne.n	12230 <z_move_thread_to_end_of_prio_q+0x38>
	node->prev = list->tail;
   1226a:	e9c4 1000 	strd	r1, r0, [r4]
	list->tail->next = node;
   1226e:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
   12270:	601c      	str	r4, [r3, #0]
	list->tail = node;
   12272:	62d4      	str	r4, [r2, #44]	; 0x2c
   12274:	e7e5      	b.n	12242 <z_move_thread_to_end_of_prio_q+0x4a>
   12276:	bf00      	nop
   12278:	20000654 	.word	0x20000654
   1227c:	2000062c 	.word	0x2000062c

00012280 <z_time_slice>:
	if (pending_current == _current) {
   12280:	4a15      	ldr	r2, [pc, #84]	; (122d8 <z_time_slice+0x58>)
   12282:	4916      	ldr	r1, [pc, #88]	; (122dc <z_time_slice+0x5c>)
{
   12284:	b538      	push	{r3, r4, r5, lr}
	if (pending_current == _current) {
   12286:	680c      	ldr	r4, [r1, #0]
   12288:	6893      	ldr	r3, [r2, #8]
   1228a:	42a3      	cmp	r3, r4
   1228c:	4614      	mov	r4, r2
   1228e:	d103      	bne.n	12298 <z_time_slice+0x18>
}
   12290:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
			z_reset_time_slice();
   12294:	f7ff bed4 	b.w	12040 <z_reset_time_slice>
	pending_current = NULL;
   12298:	2500      	movs	r5, #0
   1229a:	600d      	str	r5, [r1, #0]
	if (slice_time && sliceable(_current)) {
   1229c:	4910      	ldr	r1, [pc, #64]	; (122e0 <z_time_slice+0x60>)
   1229e:	6809      	ldr	r1, [r1, #0]
   122a0:	b1b9      	cbz	r1, 122d2 <z_time_slice+0x52>
		&& !z_is_thread_timeout_active(thread);
   122a2:	89d9      	ldrh	r1, [r3, #14]
   122a4:	297f      	cmp	r1, #127	; 0x7f
   122a6:	d814      	bhi.n	122d2 <z_time_slice+0x52>
		&& !z_is_prio_higher(thread->base.prio, slice_max_prio)
   122a8:	490e      	ldr	r1, [pc, #56]	; (122e4 <z_time_slice+0x64>)
   122aa:	f993 500e 	ldrsb.w	r5, [r3, #14]
   122ae:	6809      	ldr	r1, [r1, #0]
   122b0:	428d      	cmp	r5, r1
   122b2:	db0e      	blt.n	122d2 <z_time_slice+0x52>
		&& !z_is_idle_thread_object(thread)
   122b4:	490c      	ldr	r1, [pc, #48]	; (122e8 <z_time_slice+0x68>)
   122b6:	428b      	cmp	r3, r1
   122b8:	d00b      	beq.n	122d2 <z_time_slice+0x52>
		&& !z_is_thread_timeout_active(thread);
   122ba:	6999      	ldr	r1, [r3, #24]
   122bc:	b949      	cbnz	r1, 122d2 <z_time_slice+0x52>
		if (ticks >= _current_cpu->slice_ticks) {
   122be:	6911      	ldr	r1, [r2, #16]
   122c0:	4281      	cmp	r1, r0
   122c2:	dc03      	bgt.n	122cc <z_time_slice+0x4c>
			z_move_thread_to_end_of_prio_q(_current);
   122c4:	4618      	mov	r0, r3
   122c6:	f7ff ff97 	bl	121f8 <z_move_thread_to_end_of_prio_q>
   122ca:	e7e1      	b.n	12290 <z_time_slice+0x10>
			_current_cpu->slice_ticks -= ticks;
   122cc:	1a09      	subs	r1, r1, r0
   122ce:	6111      	str	r1, [r2, #16]
}
   122d0:	bd38      	pop	{r3, r4, r5, pc}
		_current_cpu->slice_ticks = 0;
   122d2:	2300      	movs	r3, #0
   122d4:	6123      	str	r3, [r4, #16]
   122d6:	e7fb      	b.n	122d0 <z_time_slice+0x50>
   122d8:	2000062c 	.word	0x2000062c
   122dc:	2000065c 	.word	0x2000065c
   122e0:	20000664 	.word	0x20000664
   122e4:	20000660 	.word	0x20000660
   122e8:	20000554 	.word	0x20000554

000122ec <z_thread_single_abort>:
	if (thread->fn_abort != NULL) {
   122ec:	6d03      	ldr	r3, [r0, #80]	; 0x50
{
   122ee:	b570      	push	{r4, r5, r6, lr}
   122f0:	4604      	mov	r4, r0
	if (thread->fn_abort != NULL) {
   122f2:	b103      	cbz	r3, 122f6 <z_thread_single_abort+0xa>
		thread->fn_abort();
   122f4:	4798      	blx	r3
	z_add_timeout(&th->base.timeout, z_thread_timeout, ticks);
}

static inline int z_abort_thread_timeout(struct k_thread *thread)
{
	return z_abort_timeout(&thread->base.timeout);
   122f6:	f104 0018 	add.w	r0, r4, #24
   122fa:	f001 fe66 	bl	13fca <z_abort_timeout>
	__asm__ volatile(
   122fe:	f04f 0320 	mov.w	r3, #32
   12302:	f3ef 8511 	mrs	r5, BASEPRI
   12306:	f383 8811 	msr	BASEPRI, r3
   1230a:	f3bf 8f6f 	isb	sy
		if (z_is_thread_ready(thread)) {
   1230e:	4620      	mov	r0, r4
   12310:	f001 fdbe 	bl	13e90 <z_is_thread_ready>
   12314:	4606      	mov	r6, r0
   12316:	b1d8      	cbz	r0, 12350 <z_thread_single_abort+0x64>
			if (z_is_thread_queued(thread)) {
   12318:	f994 300d 	ldrsb.w	r3, [r4, #13]
   1231c:	2b00      	cmp	r3, #0
   1231e:	da07      	bge.n	12330 <z_thread_single_abort+0x44>
				_priq_run_remove(&_kernel.ready_q.runq,
   12320:	4621      	mov	r1, r4
   12322:	4812      	ldr	r0, [pc, #72]	; (1236c <z_thread_single_abort+0x80>)
   12324:	f7ff fee2 	bl	120ec <z_priq_dumb_remove>
	thread->base.thread_state &= ~states;
   12328:	7b63      	ldrb	r3, [r4, #13]
   1232a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   1232e:	7363      	strb	r3, [r4, #13]
			update_cache(thread == _current);
   12330:	4b0f      	ldr	r3, [pc, #60]	; (12370 <z_thread_single_abort+0x84>)
   12332:	6898      	ldr	r0, [r3, #8]
   12334:	1b02      	subs	r2, r0, r4
   12336:	4250      	negs	r0, r2
   12338:	4150      	adcs	r0, r2
   1233a:	f7ff feed 	bl	12118 <update_cache>
		thread->base.thread_state |= mask;
   1233e:	7b63      	ldrb	r3, [r4, #13]
   12340:	f043 0308 	orr.w	r3, r3, #8
   12344:	7363      	strb	r3, [r4, #13]
	__asm__ volatile(
   12346:	f385 8811 	msr	BASEPRI, r5
   1234a:	f3bf 8f6f 	isb	sy
}
   1234e:	bd70      	pop	{r4, r5, r6, pc}
			if (z_is_thread_pending(thread)) {
   12350:	7b63      	ldrb	r3, [r4, #13]
   12352:	079b      	lsls	r3, r3, #30
   12354:	d5f3      	bpl.n	1233e <z_thread_single_abort+0x52>
				_priq_wait_remove(&pended_on(thread)->waitq,
   12356:	4621      	mov	r1, r4
   12358:	68a0      	ldr	r0, [r4, #8]
   1235a:	f7ff fec7 	bl	120ec <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
   1235e:	7b63      	ldrb	r3, [r4, #13]
				thread->base.pended_on = NULL;
   12360:	60a6      	str	r6, [r4, #8]
   12362:	f023 0302 	bic.w	r3, r3, #2
   12366:	7363      	strb	r3, [r4, #13]
   12368:	e7e9      	b.n	1233e <z_thread_single_abort+0x52>
   1236a:	bf00      	nop
   1236c:	20000654 	.word	0x20000654
   12370:	2000062c 	.word	0x2000062c

00012374 <z_remove_thread_from_ready_q>:
{
   12374:	b538      	push	{r3, r4, r5, lr}
   12376:	4604      	mov	r4, r0
	__asm__ volatile(
   12378:	f04f 0320 	mov.w	r3, #32
   1237c:	f3ef 8511 	mrs	r5, BASEPRI
   12380:	f383 8811 	msr	BASEPRI, r3
   12384:	f3bf 8f6f 	isb	sy
		if (z_is_thread_queued(thread)) {
   12388:	f990 300d 	ldrsb.w	r3, [r0, #13]
   1238c:	2b00      	cmp	r3, #0
   1238e:	da07      	bge.n	123a0 <z_remove_thread_from_ready_q+0x2c>
			_priq_run_remove(&_kernel.ready_q.runq, thread);
   12390:	4601      	mov	r1, r0
   12392:	4809      	ldr	r0, [pc, #36]	; (123b8 <z_remove_thread_from_ready_q+0x44>)
   12394:	f7ff feaa 	bl	120ec <z_priq_dumb_remove>
	thread->base.thread_state &= ~states;
   12398:	7b63      	ldrb	r3, [r4, #13]
   1239a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   1239e:	7363      	strb	r3, [r4, #13]
		update_cache(thread == _current);
   123a0:	4b06      	ldr	r3, [pc, #24]	; (123bc <z_remove_thread_from_ready_q+0x48>)
   123a2:	6898      	ldr	r0, [r3, #8]
   123a4:	1b03      	subs	r3, r0, r4
   123a6:	4258      	negs	r0, r3
   123a8:	4158      	adcs	r0, r3
   123aa:	f7ff feb5 	bl	12118 <update_cache>
	__asm__ volatile(
   123ae:	f385 8811 	msr	BASEPRI, r5
   123b2:	f3bf 8f6f 	isb	sy
}
   123b6:	bd38      	pop	{r3, r4, r5, pc}
   123b8:	20000654 	.word	0x20000654
   123bc:	2000062c 	.word	0x2000062c

000123c0 <pend>:
{
   123c0:	b570      	push	{r4, r5, r6, lr}
   123c2:	4604      	mov	r4, r0
   123c4:	460d      	mov	r5, r1
   123c6:	4616      	mov	r6, r2
	z_remove_thread_from_ready_q(thread);
   123c8:	f7ff ffd4 	bl	12374 <z_remove_thread_from_ready_q>
	thread->base.thread_state |= _THREAD_PENDING;
   123cc:	7b63      	ldrb	r3, [r4, #13]
   123ce:	f043 0302 	orr.w	r3, r3, #2
   123d2:	7363      	strb	r3, [r4, #13]
	if (wait_q != NULL) {
   123d4:	b17d      	cbz	r5, 123f6 <pend+0x36>
	return list->head == list;
   123d6:	682b      	ldr	r3, [r5, #0]
		thread->base.pended_on = wait_q;
   123d8:	60a5      	str	r5, [r4, #8]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   123da:	429d      	cmp	r5, r3
   123dc:	d029      	beq.n	12432 <pend+0x72>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   123de:	b343      	cbz	r3, 12432 <pend+0x72>
	if (thread_1->base.prio < thread_2->base.prio) {
   123e0:	f994 200e 	ldrsb.w	r2, [r4, #14]
   123e4:	f993 100e 	ldrsb.w	r1, [r3, #14]
   123e8:	4291      	cmp	r1, r2
   123ea:	dd1c      	ble.n	12426 <pend+0x66>
	node->prev = successor->prev;
   123ec:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   123ee:	e9c4 3200 	strd	r3, r2, [r4]
	successor->prev->next = node;
   123f2:	6014      	str	r4, [r2, #0]
	successor->prev = node;
   123f4:	605c      	str	r4, [r3, #4]
	if (timeout != K_FOREVER) {
   123f6:	1c73      	adds	r3, r6, #1
   123f8:	d022      	beq.n	12440 <pend+0x80>
   123fa:	f44f 4500 	mov.w	r5, #32768	; 0x8000
   123fe:	f240 30e7 	movw	r0, #999	; 0x3e7
   12402:	2100      	movs	r1, #0
   12404:	ea26 76e6 	bic.w	r6, r6, r6, asr #31
   12408:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   1240c:	fbc5 0106 	smlal	r0, r1, r5, r6
   12410:	2300      	movs	r3, #0
   12412:	f7fe f813 	bl	1043c <__aeabi_uldivmod>
	z_add_timeout(&th->base.timeout, z_thread_timeout, ticks);
   12416:	490b      	ldr	r1, [pc, #44]	; (12444 <pend+0x84>)
   12418:	1c42      	adds	r2, r0, #1
   1241a:	f104 0018 	add.w	r0, r4, #24
}
   1241e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   12422:	f000 b949 	b.w	126b8 <z_add_timeout>
	return (node == list->tail) ? NULL : node->next;
   12426:	6869      	ldr	r1, [r5, #4]
   12428:	428b      	cmp	r3, r1
   1242a:	d002      	beq.n	12432 <pend+0x72>
   1242c:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   1242e:	2b00      	cmp	r3, #0
   12430:	d1d8      	bne.n	123e4 <pend+0x24>
	node->prev = list->tail;
   12432:	686b      	ldr	r3, [r5, #4]
	node->next = list;
   12434:	6025      	str	r5, [r4, #0]
	node->prev = list->tail;
   12436:	6063      	str	r3, [r4, #4]
	list->tail->next = node;
   12438:	686b      	ldr	r3, [r5, #4]
   1243a:	601c      	str	r4, [r3, #0]
	list->tail = node;
   1243c:	606c      	str	r4, [r5, #4]
   1243e:	e7da      	b.n	123f6 <pend+0x36>
}
   12440:	bd70      	pop	{r4, r5, r6, pc}
   12442:	bf00      	nop
   12444:	00013ef1 	.word	0x00013ef1

00012448 <z_pend_curr>:
{
   12448:	b510      	push	{r4, lr}
   1244a:	460c      	mov	r4, r1
   1244c:	4611      	mov	r1, r2
	pending_current = _current;
   1244e:	4a06      	ldr	r2, [pc, #24]	; (12468 <z_pend_curr+0x20>)
   12450:	6890      	ldr	r0, [r2, #8]
   12452:	4a06      	ldr	r2, [pc, #24]	; (1246c <z_pend_curr+0x24>)
   12454:	6010      	str	r0, [r2, #0]
	pend(_current, wait_q, timeout);
   12456:	461a      	mov	r2, r3
   12458:	f7ff ffb2 	bl	123c0 <pend>
   1245c:	4620      	mov	r0, r4
}
   1245e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   12462:	f7fe bdef 	b.w	11044 <arch_swap>
   12466:	bf00      	nop
   12468:	2000062c 	.word	0x2000062c
   1246c:	2000065c 	.word	0x2000065c

00012470 <z_set_prio>:
{
   12470:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   12474:	4604      	mov	r4, r0
	__asm__ volatile(
   12476:	f04f 0320 	mov.w	r3, #32
   1247a:	f3ef 8911 	mrs	r9, BASEPRI
   1247e:	f383 8811 	msr	BASEPRI, r3
   12482:	f3bf 8f6f 	isb	sy
		need_sched = z_is_thread_ready(thread);
   12486:	f001 fd03 	bl	13e90 <z_is_thread_ready>
		if (need_sched) {
   1248a:	b24e      	sxtb	r6, r1
   1248c:	4680      	mov	r8, r0
   1248e:	b360      	cbz	r0, 124ea <z_set_prio+0x7a>
				_priq_run_remove(&_kernel.ready_q.runq, thread);
   12490:	4d17      	ldr	r5, [pc, #92]	; (124f0 <z_set_prio+0x80>)
   12492:	4621      	mov	r1, r4
   12494:	f105 0728 	add.w	r7, r5, #40	; 0x28
   12498:	4638      	mov	r0, r7
   1249a:	f7ff fe27 	bl	120ec <z_priq_dumb_remove>
	return list->head == list;
   1249e:	6aab      	ldr	r3, [r5, #40]	; 0x28
				thread->base.prio = prio;
   124a0:	73a6      	strb	r6, [r4, #14]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   124a2:	42bb      	cmp	r3, r7
   124a4:	462a      	mov	r2, r5
   124a6:	d019      	beq.n	124dc <z_set_prio+0x6c>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   124a8:	b1c3      	cbz	r3, 124dc <z_set_prio+0x6c>
   124aa:	6ae9      	ldr	r1, [r5, #44]	; 0x2c
	if (thread_1->base.prio < thread_2->base.prio) {
   124ac:	f993 000e 	ldrsb.w	r0, [r3, #14]
   124b0:	42b0      	cmp	r0, r6
   124b2:	dd0e      	ble.n	124d2 <z_set_prio+0x62>
	node->prev = successor->prev;
   124b4:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   124b6:	e9c4 3200 	strd	r3, r2, [r4]
	successor->prev->next = node;
   124ba:	6014      	str	r4, [r2, #0]
	successor->prev = node;
   124bc:	605c      	str	r4, [r3, #4]
			update_cache(1);
   124be:	2001      	movs	r0, #1
   124c0:	f7ff fe2a 	bl	12118 <update_cache>
	__asm__ volatile(
   124c4:	f389 8811 	msr	BASEPRI, r9
   124c8:	f3bf 8f6f 	isb	sy
}
   124cc:	4640      	mov	r0, r8
   124ce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	return (node == list->tail) ? NULL : node->next;
   124d2:	4299      	cmp	r1, r3
   124d4:	d002      	beq.n	124dc <z_set_prio+0x6c>
   124d6:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   124d8:	2b00      	cmp	r3, #0
   124da:	d1e7      	bne.n	124ac <z_set_prio+0x3c>
	node->prev = list->tail;
   124dc:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
	node->next = list;
   124de:	6027      	str	r7, [r4, #0]
	node->prev = list->tail;
   124e0:	6063      	str	r3, [r4, #4]
	list->tail->next = node;
   124e2:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
   124e4:	601c      	str	r4, [r3, #0]
	list->tail = node;
   124e6:	62d4      	str	r4, [r2, #44]	; 0x2c
   124e8:	e7e9      	b.n	124be <z_set_prio+0x4e>
			thread->base.prio = prio;
   124ea:	73a6      	strb	r6, [r4, #14]
   124ec:	e7ea      	b.n	124c4 <z_set_prio+0x54>
   124ee:	bf00      	nop
   124f0:	2000062c 	.word	0x2000062c

000124f4 <z_sched_init>:
		sys_dlist_init(&_kernel.ready_q.runq.queues[i]);
	}
#endif

#ifdef CONFIG_TIMESLICING
	k_sched_time_slice_set(CONFIG_TIMESLICE_SIZE,
   124f4:	2100      	movs	r1, #0
	list->head = (sys_dnode_t *)list;
   124f6:	4b04      	ldr	r3, [pc, #16]	; (12508 <z_sched_init+0x14>)
   124f8:	4608      	mov	r0, r1
   124fa:	f103 0228 	add.w	r2, r3, #40	; 0x28
	list->tail = (sys_dnode_t *)list;
   124fe:	e9c3 220a 	strd	r2, r2, [r3, #40]	; 0x28
   12502:	f7ff bdb3 	b.w	1206c <k_sched_time_slice_set>
   12506:	bf00      	nop
   12508:	2000062c 	.word	0x2000062c

0001250c <z_impl_k_current_get>:
#endif

k_tid_t z_impl_k_current_get(void)
{
	return _current;
}
   1250c:	4b01      	ldr	r3, [pc, #4]	; (12514 <z_impl_k_current_get+0x8>)
   1250e:	6898      	ldr	r0, [r3, #8]
   12510:	4770      	bx	lr
   12512:	bf00      	nop
   12514:	2000062c 	.word	0x2000062c

00012518 <z_impl_k_thread_start>:
}
#endif

#ifdef CONFIG_MULTITHREADING
void z_impl_k_thread_start(struct k_thread *thread)
{
   12518:	b510      	push	{r4, lr}
	__asm__ volatile(
   1251a:	f04f 0220 	mov.w	r2, #32
   1251e:	f3ef 8411 	mrs	r4, BASEPRI
   12522:	f382 8811 	msr	BASEPRI, r2
   12526:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock); /* protect kernel queues */

	if (z_has_thread_started(thread)) {
   1252a:	7b42      	ldrb	r2, [r0, #13]
   1252c:	0751      	lsls	r1, r2, #29
   1252e:	d404      	bmi.n	1253a <z_impl_k_thread_start+0x22>
	__asm__ volatile(
   12530:	f384 8811 	msr	BASEPRI, r4
   12534:	f3bf 8f6f 	isb	sy
	}

	z_mark_thread_as_started(thread);
	z_ready_thread(thread);
	z_reschedule(&lock, key);
}
   12538:	bd10      	pop	{r4, pc}
	thread->base.thread_state &= ~_THREAD_PRESTART;
   1253a:	f022 0104 	bic.w	r1, r2, #4
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
   1253e:	f012 0f1b 	tst.w	r2, #27
	thread->base.thread_state &= ~_THREAD_PRESTART;
   12542:	7341      	strb	r1, [r0, #13]
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
   12544:	d103      	bne.n	1254e <z_impl_k_thread_start+0x36>
	if (z_is_thread_ready(thread)) {
   12546:	6983      	ldr	r3, [r0, #24]
   12548:	b90b      	cbnz	r3, 1254e <z_impl_k_thread_start+0x36>
		z_add_thread_to_ready_q(thread);
   1254a:	f7ff fe1f 	bl	1218c <z_add_thread_to_ready_q>
	z_reschedule(&lock, key);
   1254e:	4621      	mov	r1, r4
}
   12550:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule(&lock, key);
   12554:	4801      	ldr	r0, [pc, #4]	; (1255c <z_impl_k_thread_start+0x44>)
   12556:	f001 bca4 	b.w	13ea2 <z_reschedule>
   1255a:	bf00      	nop
   1255c:	2000068a 	.word	0x2000068a

00012560 <z_setup_new_thread>:
void z_setup_new_thread(struct k_thread *new_thread,
		       k_thread_stack_t *stack, size_t stack_size,
		       k_thread_entry_t entry,
		       void *p1, void *p2, void *p3,
		       int prio, u32_t options, const char *name)
{
   12560:	b530      	push	{r4, r5, lr}
   12562:	b087      	sub	sp, #28
	stack_size = STACK_ROUND_DOWN(stack_size
			- sizeof(*new_thread->userspace_local_data));
#endif
#endif

	arch_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   12564:	9d0e      	ldr	r5, [sp, #56]	; 0x38
{
   12566:	4604      	mov	r4, r0
	arch_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   12568:	9504      	str	r5, [sp, #16]
   1256a:	9d0d      	ldr	r5, [sp, #52]	; 0x34
   1256c:	9503      	str	r5, [sp, #12]
   1256e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
   12570:	9502      	str	r5, [sp, #8]
   12572:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
   12574:	9501      	str	r5, [sp, #4]
   12576:	9d0a      	ldr	r5, [sp, #40]	; 0x28
   12578:	9500      	str	r5, [sp, #0]
   1257a:	f7fe fddf 	bl	1113c <arch_new_thread>
#ifdef CONFIG_SCHED_CPU_MASK
	new_thread->base.cpu_mask = -1;
#endif
#ifdef CONFIG_ARCH_HAS_CUSTOM_SWAP_TO_MAIN
	/* _current may be null if the dummy thread is not used */
	if (!_current) {
   1257e:	4b03      	ldr	r3, [pc, #12]	; (1258c <z_setup_new_thread+0x2c>)
   12580:	689b      	ldr	r3, [r3, #8]
   12582:	b103      	cbz	r3, 12586 <z_setup_new_thread+0x26>
	}
#endif
#ifdef CONFIG_SCHED_DEADLINE
	new_thread->base.prio_deadline = 0;
#endif
	new_thread->resource_pool = _current->resource_pool;
   12584:	6e1b      	ldr	r3, [r3, #96]	; 0x60
   12586:	6623      	str	r3, [r4, #96]	; 0x60
	sys_trace_thread_create(new_thread);
}
   12588:	b007      	add	sp, #28
   1258a:	bd30      	pop	{r4, r5, pc}
   1258c:	2000062c 	.word	0x2000062c

00012590 <z_init_static_threads>:
	}
}
#endif /* CONFIG_USERSPACE */

void z_init_static_threads(void)
{
   12590:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	_FOREACH_STATIC_THREAD(thread_data) {
   12594:	4e28      	ldr	r6, [pc, #160]	; (12638 <z_init_static_threads+0xa8>)
   12596:	4d29      	ldr	r5, [pc, #164]	; (1263c <z_init_static_threads+0xac>)
   12598:	46b0      	mov	r8, r6
{
   1259a:	b087      	sub	sp, #28
	_FOREACH_STATIC_THREAD(thread_data) {
   1259c:	42b5      	cmp	r5, r6
   1259e:	f105 0430 	add.w	r4, r5, #48	; 0x30
   125a2:	d310      	bcc.n	125c6 <z_init_static_threads+0x36>
	 * until they are all started.
	 *
	 * Note that static threads defined using the legacy API have a
	 * delay of K_FOREVER.
	 */
	k_sched_lock();
   125a4:	f7ff fd8e 	bl	120c4 <k_sched_lock>
   125a8:	f44f 4900 	mov.w	r9, #32768	; 0x8000
   125ac:	f240 36e7 	movw	r6, #999	; 0x3e7
   125b0:	2700      	movs	r7, #0
	_FOREACH_STATIC_THREAD(thread_data) {
   125b2:	4c22      	ldr	r4, [pc, #136]	; (1263c <z_init_static_threads+0xac>)
   125b4:	f8df a088 	ldr.w	sl, [pc, #136]	; 12640 <z_init_static_threads+0xb0>
   125b8:	4544      	cmp	r4, r8
   125ba:	d321      	bcc.n	12600 <z_init_static_threads+0x70>
			schedule_new_thread(thread_data->init_thread,
					    thread_data->init_delay);
		}
	}
	k_sched_unlock();
}
   125bc:	b007      	add	sp, #28
   125be:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	k_sched_unlock();
   125c2:	f7ff bdc7 	b.w	12154 <k_sched_unlock>
		z_setup_new_thread(
   125c6:	f854 3c04 	ldr.w	r3, [r4, #-4]
   125ca:	9305      	str	r3, [sp, #20]
   125cc:	f854 3c10 	ldr.w	r3, [r4, #-16]
   125d0:	9304      	str	r3, [sp, #16]
   125d2:	f854 3c14 	ldr.w	r3, [r4, #-20]
   125d6:	9303      	str	r3, [sp, #12]
   125d8:	f854 3c18 	ldr.w	r3, [r4, #-24]
   125dc:	9302      	str	r3, [sp, #8]
   125de:	f854 3c1c 	ldr.w	r3, [r4, #-28]
   125e2:	9301      	str	r3, [sp, #4]
   125e4:	f854 3c20 	ldr.w	r3, [r4, #-32]
   125e8:	9300      	str	r3, [sp, #0]
   125ea:	e954 230a 	ldrd	r2, r3, [r4, #-40]	; 0x28
   125ee:	e954 010c 	ldrd	r0, r1, [r4, #-48]	; 0x30
   125f2:	f7ff ffb5 	bl	12560 <z_setup_new_thread>
		thread_data->init_thread->init_data = thread_data;
   125f6:	f854 3c30 	ldr.w	r3, [r4, #-48]
   125fa:	64dd      	str	r5, [r3, #76]	; 0x4c
   125fc:	4625      	mov	r5, r4
   125fe:	e7cd      	b.n	1259c <z_init_static_threads+0xc>
		if (thread_data->init_delay != K_FOREVER) {
   12600:	6a61      	ldr	r1, [r4, #36]	; 0x24
   12602:	1c4b      	adds	r3, r1, #1
   12604:	d004      	beq.n	12610 <z_init_static_threads+0x80>
			schedule_new_thread(thread_data->init_thread,
   12606:	6825      	ldr	r5, [r4, #0]
	if (delay == 0) {
   12608:	b921      	cbnz	r1, 12614 <z_init_static_threads+0x84>
	z_impl_k_thread_start(thread);
   1260a:	4628      	mov	r0, r5
   1260c:	f7ff ff84 	bl	12518 <z_impl_k_thread_start>
	_FOREACH_STATIC_THREAD(thread_data) {
   12610:	3430      	adds	r4, #48	; 0x30
   12612:	e7d1      	b.n	125b8 <z_init_static_threads+0x28>
   12614:	46b3      	mov	fp, r6
   12616:	46bc      	mov	ip, r7
   12618:	fbe9 bc01 	umlal	fp, ip, r9, r1
   1261c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   12620:	2300      	movs	r3, #0
   12622:	4658      	mov	r0, fp
   12624:	4661      	mov	r1, ip
   12626:	f7fd ff09 	bl	1043c <__aeabi_uldivmod>
   1262a:	4651      	mov	r1, sl
   1262c:	1c42      	adds	r2, r0, #1
   1262e:	f105 0018 	add.w	r0, r5, #24
   12632:	f000 f841 	bl	126b8 <z_add_timeout>
   12636:	e7eb      	b.n	12610 <z_init_static_threads+0x80>
   12638:	200014a0 	.word	0x200014a0
   1263c:	200014a0 	.word	0x200014a0
   12640:	00013ef1 	.word	0x00013ef1

00012644 <elapsed>:
	sys_dlist_remove(&t->node);
}

static s32_t elapsed(void)
{
	return announce_remaining == 0 ? z_clock_elapsed() : 0;
   12644:	4b03      	ldr	r3, [pc, #12]	; (12654 <elapsed+0x10>)
   12646:	681b      	ldr	r3, [r3, #0]
   12648:	b90b      	cbnz	r3, 1264e <elapsed+0xa>
   1264a:	f7fe b9ef 	b.w	10a2c <z_clock_elapsed>
}
   1264e:	2000      	movs	r0, #0
   12650:	4770      	bx	lr
   12652:	bf00      	nop
   12654:	20000668 	.word	0x20000668

00012658 <remove_timeout>:
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   12658:	6803      	ldr	r3, [r0, #0]
   1265a:	b140      	cbz	r0, 1266e <remove_timeout+0x16>
   1265c:	4a07      	ldr	r2, [pc, #28]	; (1267c <remove_timeout+0x24>)
	return (node == list->tail) ? NULL : node->next;
   1265e:	6852      	ldr	r2, [r2, #4]
   12660:	4290      	cmp	r0, r2
   12662:	d004      	beq.n	1266e <remove_timeout+0x16>
	if (next(t) != NULL) {
   12664:	b11b      	cbz	r3, 1266e <remove_timeout+0x16>
		next(t)->dticks += t->dticks;
   12666:	689a      	ldr	r2, [r3, #8]
   12668:	6881      	ldr	r1, [r0, #8]
   1266a:	440a      	add	r2, r1
   1266c:	609a      	str	r2, [r3, #8]
	node->prev->next = node->next;
   1266e:	6842      	ldr	r2, [r0, #4]
   12670:	6013      	str	r3, [r2, #0]
	node->next->prev = node->prev;
   12672:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   12674:	2300      	movs	r3, #0
	node->prev = NULL;
   12676:	e9c0 3300 	strd	r3, r3, [r0]
}
   1267a:	4770      	bx	lr
   1267c:	200013f8 	.word	0x200013f8

00012680 <next_timeout>:
	return list->head == list;
   12680:	4b0b      	ldr	r3, [pc, #44]	; (126b0 <next_timeout+0x30>)

static s32_t next_timeout(void)
{
   12682:	b510      	push	{r4, lr}
   12684:	681c      	ldr	r4, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   12686:	429c      	cmp	r4, r3
   12688:	bf08      	it	eq
   1268a:	2400      	moveq	r4, #0
	struct _timeout *to = first();
	s32_t ticks_elapsed = elapsed();
   1268c:	f7ff ffda 	bl	12644 <elapsed>
	s32_t ret = to == NULL ? MAX_WAIT : MAX(0, to->dticks - ticks_elapsed);
   12690:	b154      	cbz	r4, 126a8 <next_timeout+0x28>
   12692:	68a3      	ldr	r3, [r4, #8]
   12694:	1a18      	subs	r0, r3, r0
   12696:	ea20 70e0 	bic.w	r0, r0, r0, asr #31

#ifdef CONFIG_TIMESLICING
	if (_current_cpu->slice_ticks && _current_cpu->slice_ticks < ret) {
   1269a:	4b06      	ldr	r3, [pc, #24]	; (126b4 <next_timeout+0x34>)
   1269c:	691b      	ldr	r3, [r3, #16]
   1269e:	b113      	cbz	r3, 126a6 <next_timeout+0x26>
   126a0:	4298      	cmp	r0, r3
   126a2:	bfa8      	it	ge
   126a4:	4618      	movge	r0, r3
		ret = _current_cpu->slice_ticks;
	}
#endif
	return ret;
}
   126a6:	bd10      	pop	{r4, pc}
	s32_t ret = to == NULL ? MAX_WAIT : MAX(0, to->dticks - ticks_elapsed);
   126a8:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
   126ac:	e7f5      	b.n	1269a <next_timeout+0x1a>
   126ae:	bf00      	nop
   126b0:	200013f8 	.word	0x200013f8
   126b4:	2000062c 	.word	0x2000062c

000126b8 <z_add_timeout>:

void z_add_timeout(struct _timeout *to, _timeout_func_t fn, s32_t ticks)
{
   126b8:	b570      	push	{r4, r5, r6, lr}
   126ba:	4604      	mov	r4, r0
   126bc:	4616      	mov	r6, r2
	__ASSERT(!sys_dnode_is_linked(&to->node), "");
	to->fn = fn;
   126be:	60c1      	str	r1, [r0, #12]
	__asm__ volatile(
   126c0:	f04f 0320 	mov.w	r3, #32
   126c4:	f3ef 8511 	mrs	r5, BASEPRI
   126c8:	f383 8811 	msr	BASEPRI, r3
   126cc:	f3bf 8f6f 	isb	sy
	ticks = MAX(1, ticks);

	LOCKED(&timeout_lock) {
		struct _timeout *t;

		to->dticks = ticks + elapsed();
   126d0:	f7ff ffb8 	bl	12644 <elapsed>
   126d4:	2e01      	cmp	r6, #1
   126d6:	bfac      	ite	ge
   126d8:	1980      	addge	r0, r0, r6
   126da:	3001      	addlt	r0, #1
	return list->head == list;
   126dc:	4b16      	ldr	r3, [pc, #88]	; (12738 <z_add_timeout+0x80>)
   126de:	60a0      	str	r0, [r4, #8]
   126e0:	681a      	ldr	r2, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   126e2:	429a      	cmp	r2, r3
   126e4:	d001      	beq.n	126ea <z_add_timeout+0x32>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   126e6:	685e      	ldr	r6, [r3, #4]
		for (t = first(); t != NULL; t = next(t)) {
   126e8:	b932      	cbnz	r2, 126f8 <z_add_timeout+0x40>
	node->prev = list->tail;
   126ea:	685a      	ldr	r2, [r3, #4]
	node->next = list;
   126ec:	6023      	str	r3, [r4, #0]
	node->prev = list->tail;
   126ee:	6062      	str	r2, [r4, #4]
	list->tail->next = node;
   126f0:	685a      	ldr	r2, [r3, #4]
   126f2:	6014      	str	r4, [r2, #0]
	list->tail = node;
   126f4:	605c      	str	r4, [r3, #4]
   126f6:	e00a      	b.n	1270e <z_add_timeout+0x56>
			__ASSERT(t->dticks >= 0, "");

			if (t->dticks > to->dticks) {
   126f8:	6890      	ldr	r0, [r2, #8]
   126fa:	68a1      	ldr	r1, [r4, #8]
   126fc:	4288      	cmp	r0, r1
   126fe:	dd15      	ble.n	1272c <z_add_timeout+0x74>
				t->dticks -= to->dticks;
   12700:	1a41      	subs	r1, r0, r1
   12702:	6091      	str	r1, [r2, #8]
	node->prev = successor->prev;
   12704:	6851      	ldr	r1, [r2, #4]
	node->next = successor;
   12706:	e9c4 2100 	strd	r2, r1, [r4]
	successor->prev->next = node;
   1270a:	600c      	str	r4, [r1, #0]
	successor->prev = node;
   1270c:	6054      	str	r4, [r2, #4]
	return list->head == list;
   1270e:	681a      	ldr	r2, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   12710:	429a      	cmp	r2, r3
   12712:	d006      	beq.n	12722 <z_add_timeout+0x6a>

		if (t == NULL) {
			sys_dlist_append(&timeout_list, &to->node);
		}

		if (to == first()) {
   12714:	4294      	cmp	r4, r2
   12716:	d104      	bne.n	12722 <z_add_timeout+0x6a>
			z_clock_set_timeout(next_timeout(), false);
   12718:	f7ff ffb2 	bl	12680 <next_timeout>
   1271c:	2100      	movs	r1, #0
   1271e:	f7fe f92f 	bl	10980 <z_clock_set_timeout>
	__asm__ volatile(
   12722:	f385 8811 	msr	BASEPRI, r5
   12726:	f3bf 8f6f 	isb	sy
		}
	}
}
   1272a:	bd70      	pop	{r4, r5, r6, pc}
			to->dticks -= t->dticks;
   1272c:	1a09      	subs	r1, r1, r0
	return (node == list->tail) ? NULL : node->next;
   1272e:	4296      	cmp	r6, r2
   12730:	60a1      	str	r1, [r4, #8]
   12732:	d0da      	beq.n	126ea <z_add_timeout+0x32>
   12734:	6812      	ldr	r2, [r2, #0]
   12736:	e7d7      	b.n	126e8 <z_add_timeout+0x30>
   12738:	200013f8 	.word	0x200013f8

0001273c <z_clock_announce>:
		}
	}
}

void z_clock_announce(s32_t ticks)
{
   1273c:	e92d 4bf0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, fp, lr}
   12740:	4604      	mov	r4, r0
#ifdef CONFIG_TIMESLICING
	z_time_slice(ticks);
   12742:	f7ff fd9d 	bl	12280 <z_time_slice>
	__asm__ volatile(
   12746:	f04f 0320 	mov.w	r3, #32
   1274a:	f3ef 8511 	mrs	r5, BASEPRI
   1274e:	f383 8811 	msr	BASEPRI, r3
   12752:	f3bf 8f6f 	isb	sy
#endif

	k_spinlock_key_t key = k_spin_lock(&timeout_lock);

	announce_remaining = ticks;
   12756:	4f21      	ldr	r7, [pc, #132]	; (127dc <z_clock_announce+0xa0>)
   12758:	4e21      	ldr	r6, [pc, #132]	; (127e0 <z_clock_announce+0xa4>)
   1275a:	46b8      	mov	r8, r7
	return list->head == list;
   1275c:	f8df 9084 	ldr.w	r9, [pc, #132]	; 127e4 <z_clock_announce+0xa8>
   12760:	6034      	str	r4, [r6, #0]
   12762:	f8d9 4000 	ldr.w	r4, [r9]
   12766:	6832      	ldr	r2, [r6, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   12768:	454c      	cmp	r4, r9
   1276a:	e9d7 bc00 	ldrd	fp, ip, [r7]
   1276e:	d005      	beq.n	1277c <z_clock_announce+0x40>

	while (first() != NULL && first()->dticks <= announce_remaining) {
   12770:	b124      	cbz	r4, 1277c <z_clock_announce+0x40>
   12772:	68a3      	ldr	r3, [r4, #8]
   12774:	4293      	cmp	r3, r2
   12776:	dd14      	ble.n	127a2 <z_clock_announce+0x66>
		t->fn(t);
		key = k_spin_lock(&timeout_lock);
	}

	if (first() != NULL) {
		first()->dticks -= announce_remaining;
   12778:	1a9b      	subs	r3, r3, r2
   1277a:	60a3      	str	r3, [r4, #8]
	}

	curr_tick += announce_remaining;
	announce_remaining = 0;
   1277c:	2400      	movs	r4, #0
	curr_tick += announce_remaining;
   1277e:	eb1b 0002 	adds.w	r0, fp, r2
   12782:	eb4c 71e2 	adc.w	r1, ip, r2, asr #31
   12786:	e9c8 0100 	strd	r0, r1, [r8]
	announce_remaining = 0;
   1278a:	6034      	str	r4, [r6, #0]

	z_clock_set_timeout(next_timeout(), false);
   1278c:	f7ff ff78 	bl	12680 <next_timeout>
   12790:	4621      	mov	r1, r4
   12792:	f7fe f8f5 	bl	10980 <z_clock_set_timeout>
	__asm__ volatile(
   12796:	f385 8811 	msr	BASEPRI, r5
   1279a:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&timeout_lock, key);
}
   1279e:	e8bd 8bf0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, fp, pc}
		curr_tick += dt;
   127a2:	eb1b 0003 	adds.w	r0, fp, r3
   127a6:	eb4c 71e3 	adc.w	r1, ip, r3, asr #31
		announce_remaining -= dt;
   127aa:	1ad3      	subs	r3, r2, r3
   127ac:	6033      	str	r3, [r6, #0]
		t->dticks = 0;
   127ae:	2300      	movs	r3, #0
		curr_tick += dt;
   127b0:	e9c7 0100 	strd	r0, r1, [r7]
		t->dticks = 0;
   127b4:	60a3      	str	r3, [r4, #8]
		remove_timeout(t);
   127b6:	4620      	mov	r0, r4
   127b8:	f7ff ff4e 	bl	12658 <remove_timeout>
   127bc:	f385 8811 	msr	BASEPRI, r5
   127c0:	f3bf 8f6f 	isb	sy
		t->fn(t);
   127c4:	68e3      	ldr	r3, [r4, #12]
   127c6:	4798      	blx	r3
	__asm__ volatile(
   127c8:	f04f 0320 	mov.w	r3, #32
   127cc:	f3ef 8511 	mrs	r5, BASEPRI
   127d0:	f383 8811 	msr	BASEPRI, r3
   127d4:	f3bf 8f6f 	isb	sy
#endif

#ifdef CONFIG_SPIN_VALIDATE
	z_spin_lock_set_owner(l);
#endif
	return k;
   127d8:	e7c3      	b.n	12762 <z_clock_announce+0x26>
   127da:	bf00      	nop
   127dc:	20000000 	.word	0x20000000
   127e0:	20000668 	.word	0x20000668
   127e4:	200013f8 	.word	0x200013f8

000127e8 <init_static_pools>:
	z_waitq_init(&p->wait_q);
	z_sys_mem_pool_base_init(&p->base);
}

int init_static_pools(struct device *unused)
{
   127e8:	b538      	push	{r3, r4, r5, lr}
	ARG_UNUSED(unused);

	Z_STRUCT_SECTION_FOREACH(k_mem_pool, p) {
   127ea:	4c07      	ldr	r4, [pc, #28]	; (12808 <init_static_pools+0x20>)
   127ec:	4d07      	ldr	r5, [pc, #28]	; (1280c <init_static_pools+0x24>)
   127ee:	42ac      	cmp	r4, r5
   127f0:	d301      	bcc.n	127f6 <init_static_pools+0xe>
		k_mem_pool_init(p);
	}

	return 0;
}
   127f2:	2000      	movs	r0, #0
   127f4:	bd38      	pop	{r3, r4, r5, pc}
	SYS_DLIST_FOR_EACH_CONTAINER(&((wq)->waitq), thread_ptr, \
				     base.qnode_dlist)

static inline void z_waitq_init(_wait_q_t *w)
{
	sys_dlist_init(&w->waitq);
   127f6:	f104 0314 	add.w	r3, r4, #20
	z_sys_mem_pool_base_init(&p->base);
   127fa:	4620      	mov	r0, r4
	list->tail = (sys_dnode_t *)list;
   127fc:	e9c4 3305 	strd	r3, r3, [r4, #20]
   12800:	f000 fef3 	bl	135ea <z_sys_mem_pool_base_init>
	Z_STRUCT_SECTION_FOREACH(k_mem_pool, p) {
   12804:	341c      	adds	r4, #28
   12806:	e7f2      	b.n	127ee <init_static_pools+0x6>
   12808:	200014a0 	.word	0x200014a0
   1280c:	200014a0 	.word	0x200014a0

00012810 <CC_PalMemCopyPlat>:
   12810:	f001 ba9b 	b.w	13d4a <memmove>

00012814 <CC_PalMemSetZeroPlat>:
   12814:	460a      	mov	r2, r1
   12816:	2100      	movs	r1, #0
   12818:	f001 bad8 	b.w	13dcc <memset>

0001281c <CC_PalInit>:
   1281c:	b510      	push	{r4, lr}
   1281e:	4811      	ldr	r0, [pc, #68]	; (12864 <CC_PalInit+0x48>)
   12820:	f000 f848 	bl	128b4 <CC_PalMutexCreate>
   12824:	b100      	cbz	r0, 12828 <CC_PalInit+0xc>
   12826:	bd10      	pop	{r4, pc}
   12828:	480f      	ldr	r0, [pc, #60]	; (12868 <CC_PalInit+0x4c>)
   1282a:	f000 f843 	bl	128b4 <CC_PalMutexCreate>
   1282e:	2800      	cmp	r0, #0
   12830:	d1f9      	bne.n	12826 <CC_PalInit+0xa>
   12832:	4c0e      	ldr	r4, [pc, #56]	; (1286c <CC_PalInit+0x50>)
   12834:	4620      	mov	r0, r4
   12836:	f000 f83d 	bl	128b4 <CC_PalMutexCreate>
   1283a:	2800      	cmp	r0, #0
   1283c:	d1f3      	bne.n	12826 <CC_PalInit+0xa>
   1283e:	4b0c      	ldr	r3, [pc, #48]	; (12870 <CC_PalInit+0x54>)
   12840:	480c      	ldr	r0, [pc, #48]	; (12874 <CC_PalInit+0x58>)
   12842:	601c      	str	r4, [r3, #0]
   12844:	f000 f836 	bl	128b4 <CC_PalMutexCreate>
   12848:	4601      	mov	r1, r0
   1284a:	2800      	cmp	r0, #0
   1284c:	d1eb      	bne.n	12826 <CC_PalInit+0xa>
   1284e:	f000 f82d 	bl	128ac <CC_PalDmaInit>
   12852:	4604      	mov	r4, r0
   12854:	b108      	cbz	r0, 1285a <CC_PalInit+0x3e>
   12856:	4620      	mov	r0, r4
   12858:	bd10      	pop	{r4, pc}
   1285a:	f000 f851 	bl	12900 <CC_PalPowerSaveModeInit>
   1285e:	4620      	mov	r0, r4
   12860:	e7fa      	b.n	12858 <CC_PalInit+0x3c>
   12862:	bf00      	nop
   12864:	2000140c 	.word	0x2000140c
   12868:	20001400 	.word	0x20001400
   1286c:	20001408 	.word	0x20001408
   12870:	20001410 	.word	0x20001410
   12874:	20001404 	.word	0x20001404

00012878 <CC_PalTerminate>:
   12878:	b508      	push	{r3, lr}
   1287a:	4808      	ldr	r0, [pc, #32]	; (1289c <CC_PalTerminate+0x24>)
   1287c:	f000 f824 	bl	128c8 <CC_PalMutexDestroy>
   12880:	4807      	ldr	r0, [pc, #28]	; (128a0 <CC_PalTerminate+0x28>)
   12882:	f000 f821 	bl	128c8 <CC_PalMutexDestroy>
   12886:	4807      	ldr	r0, [pc, #28]	; (128a4 <CC_PalTerminate+0x2c>)
   12888:	f000 f81e 	bl	128c8 <CC_PalMutexDestroy>
   1288c:	4806      	ldr	r0, [pc, #24]	; (128a8 <CC_PalTerminate+0x30>)
   1288e:	f000 f81b 	bl	128c8 <CC_PalMutexDestroy>
   12892:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   12896:	f000 b80b 	b.w	128b0 <CC_PalDmaTerminate>
   1289a:	bf00      	nop
   1289c:	2000140c 	.word	0x2000140c
   128a0:	20001400 	.word	0x20001400
   128a4:	20001408 	.word	0x20001408
   128a8:	20001404 	.word	0x20001404

000128ac <CC_PalDmaInit>:
   128ac:	2000      	movs	r0, #0
   128ae:	4770      	bx	lr

000128b0 <CC_PalDmaTerminate>:
   128b0:	4770      	bx	lr
   128b2:	bf00      	nop

000128b4 <CC_PalMutexCreate>:
   128b4:	b508      	push	{r3, lr}
   128b6:	4b03      	ldr	r3, [pc, #12]	; (128c4 <CC_PalMutexCreate+0x10>)
   128b8:	6802      	ldr	r2, [r0, #0]
   128ba:	681b      	ldr	r3, [r3, #0]
   128bc:	6810      	ldr	r0, [r2, #0]
   128be:	4798      	blx	r3
   128c0:	2000      	movs	r0, #0
   128c2:	bd08      	pop	{r3, pc}
   128c4:	2000141c 	.word	0x2000141c

000128c8 <CC_PalMutexDestroy>:
   128c8:	b508      	push	{r3, lr}
   128ca:	4b03      	ldr	r3, [pc, #12]	; (128d8 <CC_PalMutexDestroy+0x10>)
   128cc:	6802      	ldr	r2, [r0, #0]
   128ce:	685b      	ldr	r3, [r3, #4]
   128d0:	6810      	ldr	r0, [r2, #0]
   128d2:	4798      	blx	r3
   128d4:	2000      	movs	r0, #0
   128d6:	bd08      	pop	{r3, pc}
   128d8:	2000141c 	.word	0x2000141c

000128dc <CC_PalMutexLock>:
   128dc:	6802      	ldr	r2, [r0, #0]
   128de:	4b02      	ldr	r3, [pc, #8]	; (128e8 <CC_PalMutexLock+0xc>)
   128e0:	6810      	ldr	r0, [r2, #0]
   128e2:	689b      	ldr	r3, [r3, #8]
   128e4:	4718      	bx	r3
   128e6:	bf00      	nop
   128e8:	2000141c 	.word	0x2000141c

000128ec <CC_PalMutexUnlock>:
   128ec:	b508      	push	{r3, lr}
   128ee:	4b03      	ldr	r3, [pc, #12]	; (128fc <CC_PalMutexUnlock+0x10>)
   128f0:	6802      	ldr	r2, [r0, #0]
   128f2:	68db      	ldr	r3, [r3, #12]
   128f4:	6810      	ldr	r0, [r2, #0]
   128f6:	4798      	blx	r3
   128f8:	2000      	movs	r0, #0
   128fa:	bd08      	pop	{r3, pc}
   128fc:	2000141c 	.word	0x2000141c

00012900 <CC_PalPowerSaveModeInit>:
   12900:	b570      	push	{r4, r5, r6, lr}
   12902:	4c09      	ldr	r4, [pc, #36]	; (12928 <CC_PalPowerSaveModeInit+0x28>)
   12904:	4d09      	ldr	r5, [pc, #36]	; (1292c <CC_PalPowerSaveModeInit+0x2c>)
   12906:	6920      	ldr	r0, [r4, #16]
   12908:	68ab      	ldr	r3, [r5, #8]
   1290a:	4798      	blx	r3
   1290c:	b118      	cbz	r0, 12916 <CC_PalPowerSaveModeInit+0x16>
   1290e:	4b08      	ldr	r3, [pc, #32]	; (12930 <CC_PalPowerSaveModeInit+0x30>)
   12910:	4808      	ldr	r0, [pc, #32]	; (12934 <CC_PalPowerSaveModeInit+0x34>)
   12912:	685b      	ldr	r3, [r3, #4]
   12914:	4798      	blx	r3
   12916:	2100      	movs	r1, #0
   12918:	4a07      	ldr	r2, [pc, #28]	; (12938 <CC_PalPowerSaveModeInit+0x38>)
   1291a:	68eb      	ldr	r3, [r5, #12]
   1291c:	6011      	str	r1, [r2, #0]
   1291e:	6920      	ldr	r0, [r4, #16]
   12920:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   12924:	4718      	bx	r3
   12926:	bf00      	nop
   12928:	2000142c 	.word	0x2000142c
   1292c:	2000141c 	.word	0x2000141c
   12930:	20001414 	.word	0x20001414
   12934:	00014464 	.word	0x00014464
   12938:	2000066c 	.word	0x2000066c

0001293c <CC_PalPowerSaveModeSelect>:
   1293c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1293e:	4c1a      	ldr	r4, [pc, #104]	; (129a8 <CC_PalPowerSaveModeSelect+0x6c>)
   12940:	4d1a      	ldr	r5, [pc, #104]	; (129ac <CC_PalPowerSaveModeSelect+0x70>)
   12942:	4607      	mov	r7, r0
   12944:	68ab      	ldr	r3, [r5, #8]
   12946:	6920      	ldr	r0, [r4, #16]
   12948:	4798      	blx	r3
   1294a:	b9e8      	cbnz	r0, 12988 <CC_PalPowerSaveModeSelect+0x4c>
   1294c:	4e18      	ldr	r6, [pc, #96]	; (129b0 <CC_PalPowerSaveModeSelect+0x74>)
   1294e:	6833      	ldr	r3, [r6, #0]
   12950:	b97f      	cbnz	r7, 12972 <CC_PalPowerSaveModeSelect+0x36>
   12952:	b93b      	cbnz	r3, 12964 <CC_PalPowerSaveModeSelect+0x28>
   12954:	2001      	movs	r0, #1
   12956:	4a17      	ldr	r2, [pc, #92]	; (129b4 <CC_PalPowerSaveModeSelect+0x78>)
   12958:	4917      	ldr	r1, [pc, #92]	; (129b8 <CC_PalPowerSaveModeSelect+0x7c>)
   1295a:	f8c2 0500 	str.w	r0, [r2, #1280]	; 0x500
   1295e:	680a      	ldr	r2, [r1, #0]
   12960:	2a00      	cmp	r2, #0
   12962:	d1fc      	bne.n	1295e <CC_PalPowerSaveModeSelect+0x22>
   12964:	3301      	adds	r3, #1
   12966:	6033      	str	r3, [r6, #0]
   12968:	68eb      	ldr	r3, [r5, #12]
   1296a:	6920      	ldr	r0, [r4, #16]
   1296c:	4798      	blx	r3
   1296e:	2000      	movs	r0, #0
   12970:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   12972:	2b00      	cmp	r3, #0
   12974:	d0f8      	beq.n	12968 <CC_PalPowerSaveModeSelect+0x2c>
   12976:	2b01      	cmp	r3, #1
   12978:	d008      	beq.n	1298c <CC_PalPowerSaveModeSelect+0x50>
   1297a:	3b01      	subs	r3, #1
   1297c:	6033      	str	r3, [r6, #0]
   1297e:	6920      	ldr	r0, [r4, #16]
   12980:	68eb      	ldr	r3, [r5, #12]
   12982:	4798      	blx	r3
   12984:	2000      	movs	r0, #0
   12986:	e7f3      	b.n	12970 <CC_PalPowerSaveModeSelect+0x34>
   12988:	480c      	ldr	r0, [pc, #48]	; (129bc <CC_PalPowerSaveModeSelect+0x80>)
   1298a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1298c:	4a0a      	ldr	r2, [pc, #40]	; (129b8 <CC_PalPowerSaveModeSelect+0x7c>)
   1298e:	6813      	ldr	r3, [r2, #0]
   12990:	2b00      	cmp	r3, #0
   12992:	d1fc      	bne.n	1298e <CC_PalPowerSaveModeSelect+0x52>
   12994:	4a07      	ldr	r2, [pc, #28]	; (129b4 <CC_PalPowerSaveModeSelect+0x78>)
   12996:	f06f 407e 	mvn.w	r0, #4261412864	; 0xfe000000
   1299a:	f8c2 3500 	str.w	r3, [r2, #1280]	; 0x500
   1299e:	f000 f821 	bl	129e4 <CC_HalMaskInterrupt>
   129a2:	6833      	ldr	r3, [r6, #0]
   129a4:	e7e9      	b.n	1297a <CC_PalPowerSaveModeSelect+0x3e>
   129a6:	bf00      	nop
   129a8:	2000142c 	.word	0x2000142c
   129ac:	2000141c 	.word	0x2000141c
   129b0:	2000066c 	.word	0x2000066c
   129b4:	50840000 	.word	0x50840000
   129b8:	50841910 	.word	0x50841910
   129bc:	ffff8fe9 	.word	0xffff8fe9

000129c0 <CC_HalInit>:
   129c0:	2000      	movs	r0, #0
   129c2:	4770      	bx	lr

000129c4 <CC_HalTerminate>:
   129c4:	2000      	movs	r0, #0
   129c6:	4770      	bx	lr

000129c8 <CC_HalClearInterruptBit>:
   129c8:	0543      	lsls	r3, r0, #21
   129ca:	d503      	bpl.n	129d4 <CC_HalClearInterruptBit+0xc>
   129cc:	f04f 32ff 	mov.w	r2, #4294967295
   129d0:	4b02      	ldr	r3, [pc, #8]	; (129dc <CC_HalClearInterruptBit+0x14>)
   129d2:	601a      	str	r2, [r3, #0]
   129d4:	4b02      	ldr	r3, [pc, #8]	; (129e0 <CC_HalClearInterruptBit+0x18>)
   129d6:	6018      	str	r0, [r3, #0]
   129d8:	4770      	bx	lr
   129da:	bf00      	nop
   129dc:	50841108 	.word	0x50841108
   129e0:	50841a08 	.word	0x50841a08

000129e4 <CC_HalMaskInterrupt>:
   129e4:	4b01      	ldr	r3, [pc, #4]	; (129ec <CC_HalMaskInterrupt+0x8>)
   129e6:	6018      	str	r0, [r3, #0]
   129e8:	4770      	bx	lr
   129ea:	bf00      	nop
   129ec:	50841a04 	.word	0x50841a04

000129f0 <CC_HalWaitInterruptRND>:
   129f0:	b108      	cbz	r0, 129f6 <CC_HalWaitInterruptRND+0x6>
   129f2:	f000 b803 	b.w	129fc <CC_PalWaitInterruptRND>
   129f6:	f44f 0075 	mov.w	r0, #16056320	; 0xf50000
   129fa:	4770      	bx	lr

000129fc <CC_PalWaitInterruptRND>:
   129fc:	4602      	mov	r2, r0
   129fe:	4807      	ldr	r0, [pc, #28]	; (12a1c <CC_PalWaitInterruptRND+0x20>)
   12a00:	6803      	ldr	r3, [r0, #0]
   12a02:	4213      	tst	r3, r2
   12a04:	d0fc      	beq.n	12a00 <CC_PalWaitInterruptRND+0x4>
   12a06:	b121      	cbz	r1, 12a12 <CC_PalWaitInterruptRND+0x16>
   12a08:	4b05      	ldr	r3, [pc, #20]	; (12a20 <CC_PalWaitInterruptRND+0x24>)
   12a0a:	4806      	ldr	r0, [pc, #24]	; (12a24 <CC_PalWaitInterruptRND+0x28>)
   12a0c:	681b      	ldr	r3, [r3, #0]
   12a0e:	600b      	str	r3, [r1, #0]
   12a10:	6003      	str	r3, [r0, #0]
   12a12:	4b05      	ldr	r3, [pc, #20]	; (12a28 <CC_PalWaitInterruptRND+0x2c>)
   12a14:	2000      	movs	r0, #0
   12a16:	601a      	str	r2, [r3, #0]
   12a18:	4770      	bx	lr
   12a1a:	bf00      	nop
   12a1c:	50841a00 	.word	0x50841a00
   12a20:	50841104 	.word	0x50841104
   12a24:	50841108 	.word	0x50841108
   12a28:	50841a08 	.word	0x50841a08

00012a2c <mbedtls_platform_setup>:
   12a2c:	f000 b8a0 	b.w	12b70 <nrf_cc310_platform_init>

00012a30 <mbedtls_platform_zeroize>:
   12a30:	b130      	cbz	r0, 12a40 <mbedtls_platform_zeroize+0x10>
   12a32:	b129      	cbz	r1, 12a40 <mbedtls_platform_zeroize+0x10>
   12a34:	2300      	movs	r3, #0
   12a36:	4401      	add	r1, r0
   12a38:	7003      	strb	r3, [r0, #0]
   12a3a:	3001      	adds	r0, #1
   12a3c:	4281      	cmp	r1, r0
   12a3e:	d1fb      	bne.n	12a38 <mbedtls_platform_zeroize+0x8>
   12a40:	4770      	bx	lr
   12a42:	bf00      	nop

00012a44 <mbedtls_hardware_poll>:
   12a44:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   12a48:	f5ad 7d1a 	sub.w	sp, sp, #616	; 0x268
   12a4c:	460f      	mov	r7, r1
   12a4e:	9205      	str	r2, [sp, #20]
   12a50:	2100      	movs	r1, #0
   12a52:	4614      	mov	r4, r2
   12a54:	a812      	add	r0, sp, #72	; 0x48
   12a56:	f44f 7208 	mov.w	r2, #544	; 0x220
   12a5a:	461e      	mov	r6, r3
   12a5c:	f001 f9b6 	bl	13dcc <memset>
   12a60:	2300      	movs	r3, #0
   12a62:	a808      	add	r0, sp, #32
   12a64:	4619      	mov	r1, r3
   12a66:	2228      	movs	r2, #40	; 0x28
   12a68:	9306      	str	r3, [sp, #24]
   12a6a:	f001 f9af 	bl	13dcc <memset>
   12a6e:	2f00      	cmp	r7, #0
   12a70:	d03c      	beq.n	12aec <mbedtls_hardware_poll+0xa8>
   12a72:	2e00      	cmp	r6, #0
   12a74:	d03a      	beq.n	12aec <mbedtls_hardware_poll+0xa8>
   12a76:	2c00      	cmp	r4, #0
   12a78:	d038      	beq.n	12aec <mbedtls_hardware_poll+0xa8>
   12a7a:	2104      	movs	r1, #4
   12a7c:	a806      	add	r0, sp, #24
   12a7e:	f7ff fec9 	bl	12814 <CC_PalMemSetZeroPlat>
   12a82:	a808      	add	r0, sp, #32
   12a84:	2128      	movs	r1, #40	; 0x28
   12a86:	f7ff fec5 	bl	12814 <CC_PalMemSetZeroPlat>
   12a8a:	a808      	add	r0, sp, #32
   12a8c:	f000 f832 	bl	12af4 <RNG_PLAT_SetUserRngParameters>
   12a90:	b178      	cbz	r0, 12ab2 <mbedtls_hardware_poll+0x6e>
   12a92:	f04f 35ff 	mov.w	r5, #4294967295
   12a96:	a812      	add	r0, sp, #72	; 0x48
   12a98:	f44f 7108 	mov.w	r1, #544	; 0x220
   12a9c:	f7ff ffc8 	bl	12a30 <mbedtls_platform_zeroize>
   12aa0:	a806      	add	r0, sp, #24
   12aa2:	2104      	movs	r1, #4
   12aa4:	f7ff ffc4 	bl	12a30 <mbedtls_platform_zeroize>
   12aa8:	4628      	mov	r0, r5
   12aaa:	f50d 7d1a 	add.w	sp, sp, #616	; 0x268
   12aae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   12ab2:	ab12      	add	r3, sp, #72	; 0x48
   12ab4:	f10d 081c 	add.w	r8, sp, #28
   12ab8:	9003      	str	r0, [sp, #12]
   12aba:	e9cd 6301 	strd	r6, r3, [sp, #4]
   12abe:	4602      	mov	r2, r0
   12ac0:	ab05      	add	r3, sp, #20
   12ac2:	a908      	add	r1, sp, #32
   12ac4:	f8cd 8000 	str.w	r8, [sp]
   12ac8:	a806      	add	r0, sp, #24
   12aca:	f000 fce9 	bl	134a0 <LLF_RND_GetTrngSource>
   12ace:	2800      	cmp	r0, #0
   12ad0:	d1df      	bne.n	12a92 <mbedtls_hardware_poll+0x4e>
   12ad2:	6833      	ldr	r3, [r6, #0]
   12ad4:	42a3      	cmp	r3, r4
   12ad6:	d3dc      	bcc.n	12a92 <mbedtls_hardware_poll+0x4e>
   12ad8:	f8d8 1000 	ldr.w	r1, [r8]
   12adc:	4605      	mov	r5, r0
   12ade:	3108      	adds	r1, #8
   12ae0:	4638      	mov	r0, r7
   12ae2:	4622      	mov	r2, r4
   12ae4:	f7ff fe94 	bl	12810 <CC_PalMemCopyPlat>
   12ae8:	6034      	str	r4, [r6, #0]
   12aea:	e7d4      	b.n	12a96 <mbedtls_hardware_poll+0x52>
   12aec:	f04f 35ff 	mov.w	r5, #4294967295
   12af0:	e7da      	b.n	12aa8 <mbedtls_hardware_poll+0x64>
   12af2:	bf00      	nop

00012af4 <RNG_PLAT_SetUserRngParameters>:
   12af4:	231c      	movs	r3, #28
   12af6:	b530      	push	{r4, r5, lr}
   12af8:	b083      	sub	sp, #12
   12afa:	a902      	add	r1, sp, #8
   12afc:	f841 3d04 	str.w	r3, [r1, #-4]!
   12b00:	4604      	mov	r4, r0
   12b02:	f000 f9b1 	bl	12e68 <CC_PalTrngParamGet>
   12b06:	4605      	mov	r5, r0
   12b08:	b9d8      	cbnz	r0, 12b42 <RNG_PLAT_SetUserRngParameters+0x4e>
   12b0a:	9b01      	ldr	r3, [sp, #4]
   12b0c:	2b1c      	cmp	r3, #28
   12b0e:	d11b      	bne.n	12b48 <RNG_PLAT_SetUserRngParameters+0x54>
   12b10:	e9d4 3200 	ldrd	r3, r2, [r4]
   12b14:	2101      	movs	r1, #1
   12b16:	3300      	adds	r3, #0
   12b18:	61e1      	str	r1, [r4, #28]
   12b1a:	bf18      	it	ne
   12b1c:	2301      	movne	r3, #1
   12b1e:	b10a      	cbz	r2, 12b24 <RNG_PLAT_SetUserRngParameters+0x30>
   12b20:	f043 0302 	orr.w	r3, r3, #2
   12b24:	68a2      	ldr	r2, [r4, #8]
   12b26:	b932      	cbnz	r2, 12b36 <RNG_PLAT_SetUserRngParameters+0x42>
   12b28:	68e2      	ldr	r2, [r4, #12]
   12b2a:	b9aa      	cbnz	r2, 12b58 <RNG_PLAT_SetUserRngParameters+0x64>
   12b2c:	e9c4 3208 	strd	r3, r2, [r4, #32]
   12b30:	b93b      	cbnz	r3, 12b42 <RNG_PLAT_SetUserRngParameters+0x4e>
   12b32:	4d0d      	ldr	r5, [pc, #52]	; (12b68 <RNG_PLAT_SetUserRngParameters+0x74>)
   12b34:	e009      	b.n	12b4a <RNG_PLAT_SetUserRngParameters+0x56>
   12b36:	68e2      	ldr	r2, [r4, #12]
   12b38:	f043 0304 	orr.w	r3, r3, #4
   12b3c:	b962      	cbnz	r2, 12b58 <RNG_PLAT_SetUserRngParameters+0x64>
   12b3e:	e9c4 3208 	strd	r3, r2, [r4, #32]
   12b42:	4628      	mov	r0, r5
   12b44:	b003      	add	sp, #12
   12b46:	bd30      	pop	{r4, r5, pc}
   12b48:	4d08      	ldr	r5, [pc, #32]	; (12b6c <RNG_PLAT_SetUserRngParameters+0x78>)
   12b4a:	4620      	mov	r0, r4
   12b4c:	211c      	movs	r1, #28
   12b4e:	f7ff fe61 	bl	12814 <CC_PalMemSetZeroPlat>
   12b52:	4628      	mov	r0, r5
   12b54:	b003      	add	sp, #12
   12b56:	bd30      	pop	{r4, r5, pc}
   12b58:	2200      	movs	r2, #0
   12b5a:	4628      	mov	r0, r5
   12b5c:	f043 0308 	orr.w	r3, r3, #8
   12b60:	e9c4 3208 	strd	r3, r2, [r4, #32]
   12b64:	b003      	add	sp, #12
   12b66:	bd30      	pop	{r4, r5, pc}
   12b68:	00f00c0e 	.word	0x00f00c0e
   12b6c:	00f00c37 	.word	0x00f00c37

00012b70 <nrf_cc310_platform_init>:
   12b70:	b510      	push	{r4, lr}
   12b72:	4c0c      	ldr	r4, [pc, #48]	; (12ba4 <nrf_cc310_platform_init+0x34>)
   12b74:	6823      	ldr	r3, [r4, #0]
   12b76:	b113      	cbz	r3, 12b7e <nrf_cc310_platform_init+0xe>
   12b78:	4b0b      	ldr	r3, [pc, #44]	; (12ba8 <nrf_cc310_platform_init+0x38>)
   12b7a:	681b      	ldr	r3, [r3, #0]
   12b7c:	b96b      	cbnz	r3, 12b9a <nrf_cc310_platform_init+0x2a>
   12b7e:	f000 f931 	bl	12de4 <CC_LibInit>
   12b82:	b138      	cbz	r0, 12b94 <nrf_cc310_platform_init+0x24>
   12b84:	3801      	subs	r0, #1
   12b86:	2806      	cmp	r0, #6
   12b88:	bf96      	itet	ls
   12b8a:	4b08      	ldrls	r3, [pc, #32]	; (12bac <nrf_cc310_platform_init+0x3c>)
   12b8c:	4808      	ldrhi	r0, [pc, #32]	; (12bb0 <nrf_cc310_platform_init+0x40>)
   12b8e:	f853 0020 	ldrls.w	r0, [r3, r0, lsl #2]
   12b92:	bd10      	pop	{r4, pc}
   12b94:	2201      	movs	r2, #1
   12b96:	4b04      	ldr	r3, [pc, #16]	; (12ba8 <nrf_cc310_platform_init+0x38>)
   12b98:	601a      	str	r2, [r3, #0]
   12b9a:	2301      	movs	r3, #1
   12b9c:	2000      	movs	r0, #0
   12b9e:	6023      	str	r3, [r4, #0]
   12ba0:	bd10      	pop	{r4, pc}
   12ba2:	bf00      	nop
   12ba4:	20000670 	.word	0x20000670
   12ba8:	20000674 	.word	0x20000674
   12bac:	00014484 	.word	0x00014484
   12bb0:	ffff8ffe 	.word	0xffff8ffe

00012bb4 <nrf_cc310_platform_init_no_rng>:
   12bb4:	b510      	push	{r4, lr}
   12bb6:	4c09      	ldr	r4, [pc, #36]	; (12bdc <nrf_cc310_platform_init_no_rng+0x28>)
   12bb8:	6823      	ldr	r3, [r4, #0]
   12bba:	b11b      	cbz	r3, 12bc4 <nrf_cc310_platform_init_no_rng+0x10>
   12bbc:	2301      	movs	r3, #1
   12bbe:	2000      	movs	r0, #0
   12bc0:	6023      	str	r3, [r4, #0]
   12bc2:	bd10      	pop	{r4, pc}
   12bc4:	f000 f87c 	bl	12cc0 <CC_LibInitNoRng>
   12bc8:	2800      	cmp	r0, #0
   12bca:	d0f7      	beq.n	12bbc <nrf_cc310_platform_init_no_rng+0x8>
   12bcc:	3801      	subs	r0, #1
   12bce:	2806      	cmp	r0, #6
   12bd0:	bf96      	itet	ls
   12bd2:	4b03      	ldrls	r3, [pc, #12]	; (12be0 <nrf_cc310_platform_init_no_rng+0x2c>)
   12bd4:	4803      	ldrhi	r0, [pc, #12]	; (12be4 <nrf_cc310_platform_init_no_rng+0x30>)
   12bd6:	f853 0020 	ldrls.w	r0, [r3, r0, lsl #2]
   12bda:	bd10      	pop	{r4, pc}
   12bdc:	20000670 	.word	0x20000670
   12be0:	00014484 	.word	0x00014484
   12be4:	ffff8ffe 	.word	0xffff8ffe

00012be8 <nrf_cc310_platform_abort>:
   12be8:	f3bf 8f4f 	dsb	sy
   12bec:	4905      	ldr	r1, [pc, #20]	; (12c04 <nrf_cc310_platform_abort+0x1c>)
   12bee:	4b06      	ldr	r3, [pc, #24]	; (12c08 <nrf_cc310_platform_abort+0x20>)
   12bf0:	68ca      	ldr	r2, [r1, #12]
   12bf2:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
   12bf6:	4313      	orrs	r3, r2
   12bf8:	60cb      	str	r3, [r1, #12]
   12bfa:	f3bf 8f4f 	dsb	sy
   12bfe:	bf00      	nop
   12c00:	e7fd      	b.n	12bfe <nrf_cc310_platform_abort+0x16>
   12c02:	bf00      	nop
   12c04:	e000ed00 	.word	0xe000ed00
   12c08:	05fa0004 	.word	0x05fa0004

00012c0c <CC_PalAbort>:
   12c0c:	4b01      	ldr	r3, [pc, #4]	; (12c14 <CC_PalAbort+0x8>)
   12c0e:	685b      	ldr	r3, [r3, #4]
   12c10:	4718      	bx	r3
   12c12:	bf00      	nop
   12c14:	20001414 	.word	0x20001414

00012c18 <nrf_cc310_platform_set_abort>:
   12c18:	4b02      	ldr	r3, [pc, #8]	; (12c24 <nrf_cc310_platform_set_abort+0xc>)
   12c1a:	e9d0 1200 	ldrd	r1, r2, [r0]
   12c1e:	e9c3 1200 	strd	r1, r2, [r3]
   12c22:	4770      	bx	lr
   12c24:	20001414 	.word	0x20001414

00012c28 <mutex_free>:
   12c28:	4770      	bx	lr
   12c2a:	bf00      	nop

00012c2c <mutex_unlock>:
   12c2c:	b510      	push	{r4, lr}
   12c2e:	4604      	mov	r4, r0
   12c30:	b120      	cbz	r0, 12c3c <mutex_unlock+0x10>
   12c32:	f3bf 8f5f 	dmb	sy
   12c36:	2000      	movs	r0, #0
   12c38:	6020      	str	r0, [r4, #0]
   12c3a:	bd10      	pop	{r4, pc}
   12c3c:	4803      	ldr	r0, [pc, #12]	; (12c4c <mutex_unlock+0x20>)
   12c3e:	f7ff ffe5 	bl	12c0c <CC_PalAbort>
   12c42:	f3bf 8f5f 	dmb	sy
   12c46:	2000      	movs	r0, #0
   12c48:	6020      	str	r0, [r4, #0]
   12c4a:	bd10      	pop	{r4, pc}
   12c4c:	000144c4 	.word	0x000144c4

00012c50 <mutex_init>:
   12c50:	b510      	push	{r4, lr}
   12c52:	4604      	mov	r4, r0
   12c54:	b110      	cbz	r0, 12c5c <mutex_init+0xc>
   12c56:	2300      	movs	r3, #0
   12c58:	6023      	str	r3, [r4, #0]
   12c5a:	bd10      	pop	{r4, pc}
   12c5c:	4802      	ldr	r0, [pc, #8]	; (12c68 <mutex_init+0x18>)
   12c5e:	f7ff ffd5 	bl	12c0c <CC_PalAbort>
   12c62:	2300      	movs	r3, #0
   12c64:	6023      	str	r3, [r4, #0]
   12c66:	bd10      	pop	{r4, pc}
   12c68:	000144a0 	.word	0x000144a0

00012c6c <mutex_lock>:
   12c6c:	b150      	cbz	r0, 12c84 <mutex_lock+0x18>
   12c6e:	2201      	movs	r2, #1
   12c70:	e8d0 3fef 	ldaex	r3, [r0]
   12c74:	e8c0 2fe1 	stlex	r1, r2, [r0]
   12c78:	2900      	cmp	r1, #0
   12c7a:	d1f9      	bne.n	12c70 <mutex_lock+0x4>
   12c7c:	2b01      	cmp	r3, #1
   12c7e:	d0f7      	beq.n	12c70 <mutex_lock+0x4>
   12c80:	f3bf 8f5f 	dmb	sy
   12c84:	2000      	movs	r0, #0
   12c86:	4770      	bx	lr

00012c88 <nrf_cc310_platform_set_mutexes>:
   12c88:	b470      	push	{r4, r5, r6}
   12c8a:	4b0b      	ldr	r3, [pc, #44]	; (12cb8 <nrf_cc310_platform_set_mutexes+0x30>)
   12c8c:	6806      	ldr	r6, [r0, #0]
   12c8e:	68c2      	ldr	r2, [r0, #12]
   12c90:	e9d0 5401 	ldrd	r5, r4, [r0, #4]
   12c94:	e9c3 4202 	strd	r4, r2, [r3, #8]
   12c98:	e9c3 6500 	strd	r6, r5, [r3]
   12c9c:	e9d1 0203 	ldrd	r0, r2, [r1, #12]
   12ca0:	680e      	ldr	r6, [r1, #0]
   12ca2:	4b06      	ldr	r3, [pc, #24]	; (12cbc <nrf_cc310_platform_set_mutexes+0x34>)
   12ca4:	e9d1 5401 	ldrd	r5, r4, [r1, #4]
   12ca8:	e9c3 6500 	strd	r6, r5, [r3]
   12cac:	e9c3 4002 	strd	r4, r0, [r3, #8]
   12cb0:	611a      	str	r2, [r3, #16]
   12cb2:	bc70      	pop	{r4, r5, r6}
   12cb4:	4770      	bx	lr
   12cb6:	bf00      	nop
   12cb8:	2000141c 	.word	0x2000141c
   12cbc:	2000142c 	.word	0x2000142c

00012cc0 <CC_LibInitNoRng>:
   12cc0:	b510      	push	{r4, lr}
   12cc2:	f7ff fe7d 	bl	129c0 <CC_HalInit>
   12cc6:	b970      	cbnz	r0, 12ce6 <CC_LibInitNoRng+0x26>
   12cc8:	f7ff fda8 	bl	1281c <CC_PalInit>
   12ccc:	b980      	cbnz	r0, 12cf0 <CC_LibInitNoRng+0x30>
   12cce:	f7ff fe35 	bl	1293c <CC_PalPowerSaveModeSelect>
   12cd2:	b980      	cbnz	r0, 12cf6 <CC_LibInitNoRng+0x36>
   12cd4:	4b11      	ldr	r3, [pc, #68]	; (12d1c <CC_LibInitNoRng+0x5c>)
   12cd6:	681b      	ldr	r3, [r3, #0]
   12cd8:	0e1b      	lsrs	r3, r3, #24
   12cda:	2bf0      	cmp	r3, #240	; 0xf0
   12cdc:	d00d      	beq.n	12cfa <CC_LibInitNoRng+0x3a>
   12cde:	2406      	movs	r4, #6
   12ce0:	f7ff fe70 	bl	129c4 <CC_HalTerminate>
   12ce4:	e000      	b.n	12ce8 <CC_LibInitNoRng+0x28>
   12ce6:	2403      	movs	r4, #3
   12ce8:	f7ff fdc6 	bl	12878 <CC_PalTerminate>
   12cec:	4620      	mov	r0, r4
   12cee:	bd10      	pop	{r4, pc}
   12cf0:	2404      	movs	r4, #4
   12cf2:	4620      	mov	r0, r4
   12cf4:	bd10      	pop	{r4, pc}
   12cf6:	2400      	movs	r4, #0
   12cf8:	e7f2      	b.n	12ce0 <CC_LibInitNoRng+0x20>
   12cfa:	4a09      	ldr	r2, [pc, #36]	; (12d20 <CC_LibInitNoRng+0x60>)
   12cfc:	4b09      	ldr	r3, [pc, #36]	; (12d24 <CC_LibInitNoRng+0x64>)
   12cfe:	6812      	ldr	r2, [r2, #0]
   12d00:	429a      	cmp	r2, r3
   12d02:	d001      	beq.n	12d08 <CC_LibInitNoRng+0x48>
   12d04:	2407      	movs	r4, #7
   12d06:	e7eb      	b.n	12ce0 <CC_LibInitNoRng+0x20>
   12d08:	2001      	movs	r0, #1
   12d0a:	f7ff fe17 	bl	1293c <CC_PalPowerSaveModeSelect>
   12d0e:	2800      	cmp	r0, #0
   12d10:	d1f1      	bne.n	12cf6 <CC_LibInitNoRng+0x36>
   12d12:	4b05      	ldr	r3, [pc, #20]	; (12d28 <CC_LibInitNoRng+0x68>)
   12d14:	4604      	mov	r4, r0
   12d16:	6018      	str	r0, [r3, #0]
   12d18:	e7e8      	b.n	12cec <CC_LibInitNoRng+0x2c>
   12d1a:	bf00      	nop
   12d1c:	50841928 	.word	0x50841928
   12d20:	50841a24 	.word	0x50841a24
   12d24:	20e00000 	.word	0x20e00000
   12d28:	50841a0c 	.word	0x50841a0c

00012d2c <CC_LibInitRngModule>:
   12d2c:	b530      	push	{r4, r5, lr}
   12d2e:	f5ad 7d15 	sub.w	sp, sp, #596	; 0x254
   12d32:	f44f 7208 	mov.w	r2, #544	; 0x220
   12d36:	2100      	movs	r1, #0
   12d38:	a80c      	add	r0, sp, #48	; 0x30
   12d3a:	f001 f847 	bl	13dcc <memset>
   12d3e:	2300      	movs	r3, #0
   12d40:	a802      	add	r0, sp, #8
   12d42:	4619      	mov	r1, r3
   12d44:	2228      	movs	r2, #40	; 0x28
   12d46:	9301      	str	r3, [sp, #4]
   12d48:	f001 f840 	bl	13dcc <memset>
   12d4c:	a802      	add	r0, sp, #8
   12d4e:	f7ff fed1 	bl	12af4 <RNG_PLAT_SetUserRngParameters>
   12d52:	b118      	cbz	r0, 12d5c <CC_LibInitRngModule+0x30>
   12d54:	2005      	movs	r0, #5
   12d56:	f50d 7d15 	add.w	sp, sp, #596	; 0x254
   12d5a:	bd30      	pop	{r4, r5, pc}
   12d5c:	4d1c      	ldr	r5, [pc, #112]	; (12dd0 <CC_LibInitRngModule+0xa4>)
   12d5e:	f04f 31ff 	mov.w	r1, #4294967295
   12d62:	6828      	ldr	r0, [r5, #0]
   12d64:	f7ff fdba 	bl	128dc <CC_PalMutexLock>
   12d68:	4604      	mov	r4, r0
   12d6a:	b9f0      	cbnz	r0, 12daa <CC_LibInitRngModule+0x7e>
   12d6c:	2000      	movs	r0, #0
   12d6e:	f7ff fde5 	bl	1293c <CC_PalPowerSaveModeSelect>
   12d72:	b9b0      	cbnz	r0, 12da2 <CC_LibInitRngModule+0x76>
   12d74:	aa0c      	add	r2, sp, #48	; 0x30
   12d76:	a902      	add	r1, sp, #8
   12d78:	a801      	add	r0, sp, #4
   12d7a:	f000 fbd5 	bl	13528 <LLF_RND_RunTrngStartupTest>
   12d7e:	4604      	mov	r4, r0
   12d80:	2001      	movs	r0, #1
   12d82:	f7ff fddb 	bl	1293c <CC_PalPowerSaveModeSelect>
   12d86:	b9f0      	cbnz	r0, 12dc6 <CC_LibInitRngModule+0x9a>
   12d88:	6828      	ldr	r0, [r5, #0]
   12d8a:	f7ff fdaf 	bl	128ec <CC_PalMutexUnlock>
   12d8e:	b110      	cbz	r0, 12d96 <CC_LibInitRngModule+0x6a>
   12d90:	4810      	ldr	r0, [pc, #64]	; (12dd4 <CC_LibInitRngModule+0xa8>)
   12d92:	f7ff ff3b 	bl	12c0c <CC_PalAbort>
   12d96:	4620      	mov	r0, r4
   12d98:	2c00      	cmp	r4, #0
   12d9a:	d1db      	bne.n	12d54 <CC_LibInitRngModule+0x28>
   12d9c:	f50d 7d15 	add.w	sp, sp, #596	; 0x254
   12da0:	bd30      	pop	{r4, r5, pc}
   12da2:	480d      	ldr	r0, [pc, #52]	; (12dd8 <CC_LibInitRngModule+0xac>)
   12da4:	f7ff ff32 	bl	12c0c <CC_PalAbort>
   12da8:	e7e4      	b.n	12d74 <CC_LibInitRngModule+0x48>
   12daa:	480c      	ldr	r0, [pc, #48]	; (12ddc <CC_LibInitRngModule+0xb0>)
   12dac:	f7ff ff2e 	bl	12c0c <CC_PalAbort>
   12db0:	2c01      	cmp	r4, #1
   12db2:	d1db      	bne.n	12d6c <CC_LibInitRngModule+0x40>
   12db4:	6828      	ldr	r0, [r5, #0]
   12db6:	f7ff fd99 	bl	128ec <CC_PalMutexUnlock>
   12dba:	2800      	cmp	r0, #0
   12dbc:	d0ca      	beq.n	12d54 <CC_LibInitRngModule+0x28>
   12dbe:	4805      	ldr	r0, [pc, #20]	; (12dd4 <CC_LibInitRngModule+0xa8>)
   12dc0:	f7ff ff24 	bl	12c0c <CC_PalAbort>
   12dc4:	e7c6      	b.n	12d54 <CC_LibInitRngModule+0x28>
   12dc6:	4806      	ldr	r0, [pc, #24]	; (12de0 <CC_LibInitRngModule+0xb4>)
   12dc8:	f7ff ff20 	bl	12c0c <CC_PalAbort>
   12dcc:	e7dc      	b.n	12d88 <CC_LibInitRngModule+0x5c>
   12dce:	bf00      	nop
   12dd0:	20001410 	.word	0x20001410
   12dd4:	000144fc 	.word	0x000144fc
   12dd8:	00014514 	.word	0x00014514
   12ddc:	000144e4 	.word	0x000144e4
   12de0:	00014534 	.word	0x00014534

00012de4 <CC_LibInit>:
   12de4:	b508      	push	{r3, lr}
   12de6:	f7ff fdeb 	bl	129c0 <CC_HalInit>
   12dea:	b118      	cbz	r0, 12df4 <CC_LibInit+0x10>
   12dec:	f7ff fd44 	bl	12878 <CC_PalTerminate>
   12df0:	2003      	movs	r0, #3
   12df2:	bd08      	pop	{r3, pc}
   12df4:	f7ff fd12 	bl	1281c <CC_PalInit>
   12df8:	b968      	cbnz	r0, 12e16 <CC_LibInit+0x32>
   12dfa:	f7ff fd9f 	bl	1293c <CC_PalPowerSaveModeSelect>
   12dfe:	b960      	cbnz	r0, 12e1a <CC_LibInit+0x36>
   12e00:	4b15      	ldr	r3, [pc, #84]	; (12e58 <CC_LibInit+0x74>)
   12e02:	681b      	ldr	r3, [r3, #0]
   12e04:	0e1b      	lsrs	r3, r3, #24
   12e06:	2bf0      	cmp	r3, #240	; 0xf0
   12e08:	d012      	beq.n	12e30 <CC_LibInit+0x4c>
   12e0a:	f7ff fddb 	bl	129c4 <CC_HalTerminate>
   12e0e:	f7ff fd33 	bl	12878 <CC_PalTerminate>
   12e12:	2006      	movs	r0, #6
   12e14:	bd08      	pop	{r3, pc}
   12e16:	2004      	movs	r0, #4
   12e18:	bd08      	pop	{r3, pc}
   12e1a:	f7ff fdd3 	bl	129c4 <CC_HalTerminate>
   12e1e:	f7ff fd2b 	bl	12878 <CC_PalTerminate>
   12e22:	f7ff ff83 	bl	12d2c <CC_LibInitRngModule>
   12e26:	2800      	cmp	r0, #0
   12e28:	bf0c      	ite	eq
   12e2a:	2000      	moveq	r0, #0
   12e2c:	2005      	movne	r0, #5
   12e2e:	bd08      	pop	{r3, pc}
   12e30:	4a0a      	ldr	r2, [pc, #40]	; (12e5c <CC_LibInit+0x78>)
   12e32:	4b0b      	ldr	r3, [pc, #44]	; (12e60 <CC_LibInit+0x7c>)
   12e34:	6812      	ldr	r2, [r2, #0]
   12e36:	429a      	cmp	r2, r3
   12e38:	d005      	beq.n	12e46 <CC_LibInit+0x62>
   12e3a:	f7ff fdc3 	bl	129c4 <CC_HalTerminate>
   12e3e:	f7ff fd1b 	bl	12878 <CC_PalTerminate>
   12e42:	2007      	movs	r0, #7
   12e44:	bd08      	pop	{r3, pc}
   12e46:	2001      	movs	r0, #1
   12e48:	f7ff fd78 	bl	1293c <CC_PalPowerSaveModeSelect>
   12e4c:	2800      	cmp	r0, #0
   12e4e:	d1e4      	bne.n	12e1a <CC_LibInit+0x36>
   12e50:	4b04      	ldr	r3, [pc, #16]	; (12e64 <CC_LibInit+0x80>)
   12e52:	6018      	str	r0, [r3, #0]
   12e54:	e7e5      	b.n	12e22 <CC_LibInit+0x3e>
   12e56:	bf00      	nop
   12e58:	50841928 	.word	0x50841928
   12e5c:	50841a24 	.word	0x50841a24
   12e60:	20e00000 	.word	0x20e00000
   12e64:	50841a0c 	.word	0x50841a0c

00012e68 <CC_PalTrngParamGet>:
   12e68:	b118      	cbz	r0, 12e72 <CC_PalTrngParamGet+0xa>
   12e6a:	b111      	cbz	r1, 12e72 <CC_PalTrngParamGet+0xa>
   12e6c:	680b      	ldr	r3, [r1, #0]
   12e6e:	2b1c      	cmp	r3, #28
   12e70:	d001      	beq.n	12e76 <CC_PalTrngParamGet+0xe>
   12e72:	2001      	movs	r0, #1
   12e74:	4770      	bx	lr
   12e76:	f44f 037f 	mov.w	r3, #16711680	; 0xff0000
   12e7a:	4a3a      	ldr	r2, [pc, #232]	; (12f64 <CC_PalTrngParamGet+0xfc>)
   12e7c:	f8d3 1c10 	ldr.w	r1, [r3, #3088]	; 0xc10
   12e80:	4291      	cmp	r1, r2
   12e82:	d05a      	beq.n	12f3a <CC_PalTrngParamGet+0xd2>
   12e84:	f8d3 2c10 	ldr.w	r2, [r3, #3088]	; 0xc10
   12e88:	3201      	adds	r2, #1
   12e8a:	d056      	beq.n	12f3a <CC_PalTrngParamGet+0xd2>
   12e8c:	f8d3 2c10 	ldr.w	r2, [r3, #3088]	; 0xc10
   12e90:	f44f 037f 	mov.w	r3, #16711680	; 0xff0000
   12e94:	6002      	str	r2, [r0, #0]
   12e96:	f8d3 1c14 	ldr.w	r1, [r3, #3092]	; 0xc14
   12e9a:	4a33      	ldr	r2, [pc, #204]	; (12f68 <CC_PalTrngParamGet+0x100>)
   12e9c:	4291      	cmp	r1, r2
   12e9e:	d05e      	beq.n	12f5e <CC_PalTrngParamGet+0xf6>
   12ea0:	f8d3 2c14 	ldr.w	r2, [r3, #3092]	; 0xc14
   12ea4:	3201      	adds	r2, #1
   12ea6:	d05a      	beq.n	12f5e <CC_PalTrngParamGet+0xf6>
   12ea8:	f8d3 2c14 	ldr.w	r2, [r3, #3092]	; 0xc14
   12eac:	f44f 037f 	mov.w	r3, #16711680	; 0xff0000
   12eb0:	6042      	str	r2, [r0, #4]
   12eb2:	f8d3 2c18 	ldr.w	r2, [r3, #3096]	; 0xc18
   12eb6:	f512 7f94 	cmn.w	r2, #296	; 0x128
   12eba:	d04d      	beq.n	12f58 <CC_PalTrngParamGet+0xf0>
   12ebc:	f8d3 2c18 	ldr.w	r2, [r3, #3096]	; 0xc18
   12ec0:	3201      	adds	r2, #1
   12ec2:	d049      	beq.n	12f58 <CC_PalTrngParamGet+0xf0>
   12ec4:	f8d3 2c18 	ldr.w	r2, [r3, #3096]	; 0xc18
   12ec8:	f44f 037f 	mov.w	r3, #16711680	; 0xff0000
   12ecc:	6082      	str	r2, [r0, #8]
   12ece:	f8d3 1c1c 	ldr.w	r1, [r3, #3100]	; 0xc1c
   12ed2:	4a26      	ldr	r2, [pc, #152]	; (12f6c <CC_PalTrngParamGet+0x104>)
   12ed4:	4291      	cmp	r1, r2
   12ed6:	d03c      	beq.n	12f52 <CC_PalTrngParamGet+0xea>
   12ed8:	f8d3 2c1c 	ldr.w	r2, [r3, #3100]	; 0xc1c
   12edc:	3201      	adds	r2, #1
   12ede:	d038      	beq.n	12f52 <CC_PalTrngParamGet+0xea>
   12ee0:	f8d3 2c1c 	ldr.w	r2, [r3, #3100]	; 0xc1c
   12ee4:	f44f 037f 	mov.w	r3, #16711680	; 0xff0000
   12ee8:	60c2      	str	r2, [r0, #12]
   12eea:	f8d3 2c00 	ldr.w	r2, [r3, #3072]	; 0xc00
   12eee:	3270      	adds	r2, #112	; 0x70
   12ef0:	d02d      	beq.n	12f4e <CC_PalTrngParamGet+0xe6>
   12ef2:	f8d3 2c00 	ldr.w	r2, [r3, #3072]	; 0xc00
   12ef6:	3201      	adds	r2, #1
   12ef8:	d029      	beq.n	12f4e <CC_PalTrngParamGet+0xe6>
   12efa:	f8d3 2c00 	ldr.w	r2, [r3, #3072]	; 0xc00
   12efe:	f44f 037f 	mov.w	r3, #16711680	; 0xff0000
   12f02:	6102      	str	r2, [r0, #16]
   12f04:	f8d3 2c04 	ldr.w	r2, [r3, #3076]	; 0xc04
   12f08:	32af      	adds	r2, #175	; 0xaf
   12f0a:	d01e      	beq.n	12f4a <CC_PalTrngParamGet+0xe2>
   12f0c:	f8d3 2c04 	ldr.w	r2, [r3, #3076]	; 0xc04
   12f10:	3201      	adds	r2, #1
   12f12:	d01a      	beq.n	12f4a <CC_PalTrngParamGet+0xe2>
   12f14:	f8d3 2c04 	ldr.w	r2, [r3, #3076]	; 0xc04
   12f18:	f44f 037f 	mov.w	r3, #16711680	; 0xff0000
   12f1c:	6142      	str	r2, [r0, #20]
   12f1e:	f8d3 1c08 	ldr.w	r1, [r3, #3080]	; 0xc08
   12f22:	4a13      	ldr	r2, [pc, #76]	; (12f70 <CC_PalTrngParamGet+0x108>)
   12f24:	4291      	cmp	r1, r2
   12f26:	d00b      	beq.n	12f40 <CC_PalTrngParamGet+0xd8>
   12f28:	f8d3 2c08 	ldr.w	r2, [r3, #3080]	; 0xc08
   12f2c:	3201      	adds	r2, #1
   12f2e:	d007      	beq.n	12f40 <CC_PalTrngParamGet+0xd8>
   12f30:	f8d3 3c08 	ldr.w	r3, [r3, #3080]	; 0xc08
   12f34:	6183      	str	r3, [r0, #24]
   12f36:	2000      	movs	r0, #0
   12f38:	4770      	bx	lr
   12f3a:	f640 02fc 	movw	r2, #2300	; 0x8fc
   12f3e:	e7a7      	b.n	12e90 <CC_PalTrngParamGet+0x28>
   12f40:	f240 3337 	movw	r3, #823	; 0x337
   12f44:	6183      	str	r3, [r0, #24]
   12f46:	2000      	movs	r0, #0
   12f48:	4770      	bx	lr
   12f4a:	2251      	movs	r2, #81	; 0x51
   12f4c:	e7e4      	b.n	12f18 <CC_PalTrngParamGet+0xb0>
   12f4e:	2290      	movs	r2, #144	; 0x90
   12f50:	e7d5      	b.n	12efe <CC_PalTrngParamGet+0x96>
   12f52:	f642 1204 	movw	r2, #10500	; 0x2904
   12f56:	e7c5      	b.n	12ee4 <CC_PalTrngParamGet+0x7c>
   12f58:	f640 62d8 	movw	r2, #3800	; 0xed8
   12f5c:	e7b4      	b.n	12ec8 <CC_PalTrngParamGet+0x60>
   12f5e:	f242 02d0 	movw	r2, #8400	; 0x20d0
   12f62:	e7a3      	b.n	12eac <CC_PalTrngParamGet+0x44>
   12f64:	fffff8fc 	.word	0xfffff8fc
   12f68:	ffff20d0 	.word	0xffff20d0
   12f6c:	ffff2904 	.word	0xffff2904
   12f70:	fffff337 	.word	0xfffff337

00012f74 <LLF_RND_AdaptiveProportionTest>:
   12f74:	b3a8      	cbz	r0, 12fe2 <LLF_RND_AdaptiveProportionTest+0x6e>
   12f76:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   12f7a:	1e4c      	subs	r4, r1, #1
   12f7c:	f5b4 7f04 	cmp.w	r4, #528	; 0x210
   12f80:	d22c      	bcs.n	12fdc <LLF_RND_AdaptiveProportionTest+0x68>
   12f82:	b35b      	cbz	r3, 12fdc <LLF_RND_AdaptiveProportionTest+0x68>
   12f84:	b352      	cbz	r2, 12fdc <LLF_RND_AdaptiveProportionTest+0x68>
   12f86:	f04f 0c00 	mov.w	ip, #0
   12f8a:	00c9      	lsls	r1, r1, #3
   12f8c:	46e6      	mov	lr, ip
   12f8e:	4665      	mov	r5, ip
   12f90:	4664      	mov	r4, ip
   12f92:	1e4f      	subs	r7, r1, #1
   12f94:	f103 38ff 	add.w	r8, r3, #4294967295
   12f98:	e00c      	b.n	12fb4 <LLF_RND_AdaptiveProportionTest+0x40>
   12f9a:	42ab      	cmp	r3, r5
   12f9c:	d016      	beq.n	12fcc <LLF_RND_AdaptiveProportionTest+0x58>
   12f9e:	458e      	cmp	lr, r1
   12fa0:	d101      	bne.n	12fa6 <LLF_RND_AdaptiveProportionTest+0x32>
   12fa2:	f10c 0c01 	add.w	ip, ip, #1
   12fa6:	45a8      	cmp	r8, r5
   12fa8:	d016      	beq.n	12fd8 <LLF_RND_AdaptiveProportionTest+0x64>
   12faa:	3401      	adds	r4, #1
   12fac:	42bc      	cmp	r4, r7
   12fae:	f105 0501 	add.w	r5, r5, #1
   12fb2:	d818      	bhi.n	12fe6 <LLF_RND_AdaptiveProportionTest+0x72>
   12fb4:	0961      	lsrs	r1, r4, #5
   12fb6:	f850 1021 	ldr.w	r1, [r0, r1, lsl #2]
   12fba:	f004 061f 	and.w	r6, r4, #31
   12fbe:	40f1      	lsrs	r1, r6
   12fc0:	2e1f      	cmp	r6, #31
   12fc2:	bf18      	it	ne
   12fc4:	f001 0101 	andne.w	r1, r1, #1
   12fc8:	2c00      	cmp	r4, #0
   12fca:	d1e6      	bne.n	12f9a <LLF_RND_AdaptiveProportionTest+0x26>
   12fcc:	2500      	movs	r5, #0
   12fce:	45a8      	cmp	r8, r5
   12fd0:	468e      	mov	lr, r1
   12fd2:	f04f 0c01 	mov.w	ip, #1
   12fd6:	d1e8      	bne.n	12faa <LLF_RND_AdaptiveProportionTest+0x36>
   12fd8:	4562      	cmp	r2, ip
   12fda:	d2e6      	bcs.n	12faa <LLF_RND_AdaptiveProportionTest+0x36>
   12fdc:	4803      	ldr	r0, [pc, #12]	; (12fec <LLF_RND_AdaptiveProportionTest+0x78>)
   12fde:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   12fe2:	4802      	ldr	r0, [pc, #8]	; (12fec <LLF_RND_AdaptiveProportionTest+0x78>)
   12fe4:	4770      	bx	lr
   12fe6:	2000      	movs	r0, #0
   12fe8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   12fec:	00f10c37 	.word	0x00f10c37

00012ff0 <getTrngSource>:
   12ff0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12ff4:	b08f      	sub	sp, #60	; 0x3c
   12ff6:	460d      	mov	r5, r1
   12ff8:	e9dd 4119 	ldrd	r4, r1, [sp, #100]	; 0x64
   12ffc:	4683      	mov	fp, r0
   12ffe:	2900      	cmp	r1, #0
   13000:	d157      	bne.n	130b2 <getTrngSource+0xc2>
   13002:	6929      	ldr	r1, [r5, #16]
   13004:	9103      	str	r1, [sp, #12]
   13006:	2100      	movs	r1, #0
   13008:	601c      	str	r4, [r3, #0]
   1300a:	9b18      	ldr	r3, [sp, #96]	; 0x60
   1300c:	6019      	str	r1, [r3, #0]
   1300e:	2a00      	cmp	r2, #0
   13010:	f000 8122 	beq.w	13258 <getTrngSource+0x268>
   13014:	4a81      	ldr	r2, [pc, #516]	; (1321c <getTrngSource+0x22c>)
   13016:	4b82      	ldr	r3, [pc, #520]	; (13220 <getTrngSource+0x230>)
   13018:	6811      	ldr	r1, [r2, #0]
   1301a:	6a6a      	ldr	r2, [r5, #36]	; 0x24
   1301c:	681b      	ldr	r3, [r3, #0]
   1301e:	429a      	cmp	r2, r3
   13020:	d157      	bne.n	130d2 <getTrngSource+0xe2>
   13022:	290a      	cmp	r1, #10
   13024:	d155      	bne.n	130d2 <getTrngSource+0xe2>
   13026:	f89b 3003 	ldrb.w	r3, [fp, #3]
   1302a:	9306      	str	r3, [sp, #24]
   1302c:	9903      	ldr	r1, [sp, #12]
   1302e:	2304      	movs	r3, #4
   13030:	4608      	mov	r0, r1
   13032:	4a7c      	ldr	r2, [pc, #496]	; (13224 <getTrngSource+0x234>)
   13034:	9302      	str	r3, [sp, #8]
   13036:	fba2 0200 	umull	r0, r2, r2, r0
   1303a:	0892      	lsrs	r2, r2, #2
   1303c:	00cb      	lsls	r3, r1, #3
   1303e:	eb02 0242 	add.w	r2, r2, r2, lsl #1
   13042:	f104 0008 	add.w	r0, r4, #8
   13046:	eba1 0242 	sub.w	r2, r1, r2, lsl #1
   1304a:	3b01      	subs	r3, #1
   1304c:	f8df 91d0 	ldr.w	r9, [pc, #464]	; 13220 <getTrngSource+0x230>
   13050:	f8df a200 	ldr.w	sl, [pc, #512]	; 13254 <getTrngSource+0x264>
   13054:	9004      	str	r0, [sp, #16]
   13056:	9200      	str	r2, [sp, #0]
   13058:	9305      	str	r3, [sp, #20]
   1305a:	9b18      	ldr	r3, [sp, #96]	; 0x60
   1305c:	9c03      	ldr	r4, [sp, #12]
   1305e:	601c      	str	r4, [r3, #0]
   13060:	2c00      	cmp	r4, #0
   13062:	f000 80cc 	beq.w	131fe <getTrngSource+0x20e>
   13066:	2600      	movs	r6, #0
   13068:	9f04      	ldr	r7, [sp, #16]
   1306a:	f000 faa9 	bl	135c0 <LLF_RND_TurnOffTrng>
   1306e:	2300      	movs	r3, #0
   13070:	9307      	str	r3, [sp, #28]
   13072:	9b06      	ldr	r3, [sp, #24]
   13074:	f1bb 0f00 	cmp.w	fp, #0
   13078:	d03a      	beq.n	130f0 <getTrngSource+0x100>
   1307a:	2d00      	cmp	r5, #0
   1307c:	d034      	beq.n	130e8 <getTrngSource+0xf8>
   1307e:	bb53      	cbnz	r3, 130d6 <getTrngSource+0xe6>
   13080:	005b      	lsls	r3, r3, #1
   13082:	9306      	str	r3, [sp, #24]
   13084:	f1bb 0f00 	cmp.w	fp, #0
   13088:	d036      	beq.n	130f8 <getTrngSource+0x108>
   1308a:	2d00      	cmp	r5, #0
   1308c:	d034      	beq.n	130f8 <getTrngSource+0x108>
   1308e:	b1e3      	cbz	r3, 130ca <getTrngSource+0xda>
   13090:	a906      	add	r1, sp, #24
   13092:	4628      	mov	r0, r5
   13094:	f000 fa84 	bl	135a0 <LLF_RND_GetFastestRosc>
   13098:	2800      	cmp	r0, #0
   1309a:	f000 817d 	beq.w	13398 <getTrngSource+0x3a8>
   1309e:	4b62      	ldr	r3, [pc, #392]	; (13228 <getTrngSource+0x238>)
   130a0:	4298      	cmp	r0, r3
   130a2:	d012      	beq.n	130ca <getTrngSource+0xda>
   130a4:	9000      	str	r0, [sp, #0]
   130a6:	f000 fa8b 	bl	135c0 <LLF_RND_TurnOffTrng>
   130aa:	9800      	ldr	r0, [sp, #0]
   130ac:	b00f      	add	sp, #60	; 0x3c
   130ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   130b2:	f44f 017f 	mov.w	r1, #16711680	; 0xff0000
   130b6:	f8d1 0c0c 	ldr.w	r0, [r1, #3084]	; 0xc0c
   130ba:	3001      	adds	r0, #1
   130bc:	bf0c      	ite	eq
   130be:	f44f 7104 	moveq.w	r1, #528	; 0x210
   130c2:	f8d1 1c0c 	ldrne.w	r1, [r1, #3084]	; 0xc0c
   130c6:	9103      	str	r1, [sp, #12]
   130c8:	e79d      	b.n	13006 <getTrngSource+0x16>
   130ca:	6a2b      	ldr	r3, [r5, #32]
   130cc:	b973      	cbnz	r3, 130ec <getTrngSource+0xfc>
   130ce:	4856      	ldr	r0, [pc, #344]	; (13228 <getTrngSource+0x238>)
   130d0:	e7e8      	b.n	130a4 <getTrngSource+0xb4>
   130d2:	4856      	ldr	r0, [pc, #344]	; (1322c <getTrngSource+0x23c>)
   130d4:	e7e6      	b.n	130a4 <getTrngSource+0xb4>
   130d6:	a906      	add	r1, sp, #24
   130d8:	4628      	mov	r0, r5
   130da:	f000 fa61 	bl	135a0 <LLF_RND_GetFastestRosc>
   130de:	b168      	cbz	r0, 130fc <getTrngSource+0x10c>
   130e0:	4b53      	ldr	r3, [pc, #332]	; (13230 <getTrngSource+0x240>)
   130e2:	4298      	cmp	r0, r3
   130e4:	d0de      	beq.n	130a4 <getTrngSource+0xb4>
   130e6:	9b06      	ldr	r3, [sp, #24]
   130e8:	2b08      	cmp	r3, #8
   130ea:	d1c9      	bne.n	13080 <getTrngSource+0x90>
   130ec:	4851      	ldr	r0, [pc, #324]	; (13234 <getTrngSource+0x244>)
   130ee:	e7d9      	b.n	130a4 <getTrngSource+0xb4>
   130f0:	2b08      	cmp	r3, #8
   130f2:	d0fb      	beq.n	130ec <getTrngSource+0xfc>
   130f4:	005b      	lsls	r3, r3, #1
   130f6:	9306      	str	r3, [sp, #24]
   130f8:	484f      	ldr	r0, [pc, #316]	; (13238 <getTrngSource+0x248>)
   130fa:	e7d3      	b.n	130a4 <getTrngSource+0xb4>
   130fc:	4629      	mov	r1, r5
   130fe:	9806      	ldr	r0, [sp, #24]
   13100:	f000 fa30 	bl	13564 <LLF_RND_GetRoscSampleCnt>
   13104:	2800      	cmp	r0, #0
   13106:	d1eb      	bne.n	130e0 <getTrngSource+0xf0>
   13108:	9b06      	ldr	r3, [sp, #24]
   1310a:	2b08      	cmp	r3, #8
   1310c:	f000 810e 	beq.w	1332c <getTrngSource+0x33c>
   13110:	2b04      	cmp	r3, #4
   13112:	f000 8131 	beq.w	13378 <getTrngSource+0x388>
   13116:	f1a3 0302 	sub.w	r3, r3, #2
   1311a:	fab3 f383 	clz	r3, r3
   1311e:	095b      	lsrs	r3, r3, #5
   13120:	9301      	str	r3, [sp, #4]
   13122:	2301      	movs	r3, #1
   13124:	4619      	mov	r1, r3
   13126:	4a45      	ldr	r2, [pc, #276]	; (1323c <getTrngSource+0x24c>)
   13128:	6013      	str	r3, [r2, #0]
   1312a:	f842 3c84 	str.w	r3, [r2, #-132]
   1312e:	4b43      	ldr	r3, [pc, #268]	; (1323c <getTrngSource+0x24c>)
   13130:	6019      	str	r1, [r3, #0]
   13132:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   13134:	f8c9 3000 	str.w	r3, [r9]
   13138:	f8d9 2000 	ldr.w	r2, [r9]
   1313c:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   1313e:	429a      	cmp	r2, r3
   13140:	d1f5      	bne.n	1312e <getTrngSource+0x13e>
   13142:	f04f 0800 	mov.w	r8, #0
   13146:	f04f 30ff 	mov.w	r0, #4294967295
   1314a:	f8ca 8000 	str.w	r8, [sl]
   1314e:	f7ff fc3b 	bl	129c8 <CC_HalClearInterruptBit>
   13152:	4a3b      	ldr	r2, [pc, #236]	; (13240 <getTrngSource+0x250>)
   13154:	4b3b      	ldr	r3, [pc, #236]	; (13244 <getTrngSource+0x254>)
   13156:	4640      	mov	r0, r8
   13158:	601a      	str	r2, [r3, #0]
   1315a:	f7ff fc43 	bl	129e4 <CC_HalMaskInterrupt>
   1315e:	220a      	movs	r2, #10
   13160:	9801      	ldr	r0, [sp, #4]
   13162:	4939      	ldr	r1, [pc, #228]	; (13248 <getTrngSource+0x258>)
   13164:	4b2d      	ldr	r3, [pc, #180]	; (1321c <getTrngSource+0x22c>)
   13166:	6008      	str	r0, [r1, #0]
   13168:	601a      	str	r2, [r3, #0]
   1316a:	692a      	ldr	r2, [r5, #16]
   1316c:	f1a8 3855 	sub.w	r8, r8, #1431655765	; 0x55555555
   13170:	fba8 1202 	umull	r1, r2, r8, r2
   13174:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   13176:	0912      	lsrs	r2, r2, #4
   13178:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   1317c:	03db      	lsls	r3, r3, #15
   1317e:	fb03 f302 	mul.w	r3, r3, r2
   13182:	4a32      	ldr	r2, [pc, #200]	; (1324c <getTrngSource+0x25c>)
   13184:	099b      	lsrs	r3, r3, #6
   13186:	6013      	str	r3, [r2, #0]
   13188:	2301      	movs	r3, #1
   1318a:	f8ca 3000 	str.w	r3, [sl]
   1318e:	9906      	ldr	r1, [sp, #24]
   13190:	f8db 2000 	ldr.w	r2, [fp]
   13194:	020b      	lsls	r3, r1, #8
   13196:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
   1319a:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
   1319e:	4313      	orrs	r3, r2
   131a0:	f8cb 3000 	str.w	r3, [fp]
   131a4:	a807      	add	r0, sp, #28
   131a6:	f000 f9cd 	bl	13544 <LLF_RND_WaitRngInterrupt>
   131aa:	2800      	cmp	r0, #0
   131ac:	d198      	bne.n	130e0 <getTrngSource+0xf0>
   131ae:	4b28      	ldr	r3, [pc, #160]	; (13250 <getTrngSource+0x260>)
   131b0:	fba8 2804 	umull	r2, r8, r8, r4
   131b4:	681a      	ldr	r2, [r3, #0]
   131b6:	3314      	adds	r3, #20
   131b8:	9208      	str	r2, [sp, #32]
   131ba:	f853 2c10 	ldr.w	r2, [r3, #-16]
   131be:	ebb6 0f98 	cmp.w	r6, r8, lsr #2
   131c2:	9209      	str	r2, [sp, #36]	; 0x24
   131c4:	f853 2c0c 	ldr.w	r2, [r3, #-12]
   131c8:	920a      	str	r2, [sp, #40]	; 0x28
   131ca:	f853 2c08 	ldr.w	r2, [r3, #-8]
   131ce:	920b      	str	r2, [sp, #44]	; 0x2c
   131d0:	f853 2c04 	ldr.w	r2, [r3, #-4]
   131d4:	920c      	str	r2, [sp, #48]	; 0x30
   131d6:	681b      	ldr	r3, [r3, #0]
   131d8:	930d      	str	r3, [sp, #52]	; 0x34
   131da:	d101      	bne.n	131e0 <getTrngSource+0x1f0>
   131dc:	9b00      	ldr	r3, [sp, #0]
   131de:	b99b      	cbnz	r3, 13208 <getTrngSource+0x218>
   131e0:	4638      	mov	r0, r7
   131e2:	2218      	movs	r2, #24
   131e4:	a908      	add	r1, sp, #32
   131e6:	f7ff fb13 	bl	12810 <CC_PalMemCopyPlat>
   131ea:	3c18      	subs	r4, #24
   131ec:	3718      	adds	r7, #24
   131ee:	3601      	adds	r6, #1
   131f0:	2c00      	cmp	r4, #0
   131f2:	f47f af3a 	bne.w	1306a <getTrngSource+0x7a>
   131f6:	9b04      	ldr	r3, [sp, #16]
   131f8:	2b00      	cmp	r3, #0
   131fa:	f040 809a 	bne.w	13332 <getTrngSource+0x342>
   131fe:	2300      	movs	r3, #0
   13200:	9a18      	ldr	r2, [sp, #96]	; 0x60
   13202:	6013      	str	r3, [r2, #0]
   13204:	9b06      	ldr	r3, [sp, #24]
   13206:	e76f      	b.n	130e8 <getTrngSource+0xf8>
   13208:	461a      	mov	r2, r3
   1320a:	4638      	mov	r0, r7
   1320c:	a908      	add	r1, sp, #32
   1320e:	1ae4      	subs	r4, r4, r3
   13210:	f7ff fafe 	bl	12810 <CC_PalMemCopyPlat>
   13214:	9b00      	ldr	r3, [sp, #0]
   13216:	441f      	add	r7, r3
   13218:	e7e9      	b.n	131ee <getTrngSource+0x1fe>
   1321a:	bf00      	nop
   1321c:	50841138 	.word	0x50841138
   13220:	50841130 	.word	0x50841130
   13224:	aaaaaaab 	.word	0xaaaaaaab
   13228:	00f10c31 	.word	0x00f10c31
   1322c:	00f10c30 	.word	0x00f10c30
   13230:	00f10c02 	.word	0x00f10c02
   13234:	00f10c32 	.word	0x00f10c32
   13238:	00f10c35 	.word	0x00f10c35
   1323c:	508411c4 	.word	0x508411c4
   13240:	0ffffffe 	.word	0x0ffffffe
   13244:	50841100 	.word	0x50841100
   13248:	5084110c 	.word	0x5084110c
   1324c:	508411d8 	.word	0x508411d8
   13250:	50841114 	.word	0x50841114
   13254:	5084112c 	.word	0x5084112c
   13258:	f1bb 0f00 	cmp.w	fp, #0
   1325c:	f43f af4c 	beq.w	130f8 <getTrngSource+0x108>
   13260:	2d00      	cmp	r5, #0
   13262:	f43f af49 	beq.w	130f8 <getTrngSource+0x108>
   13266:	2301      	movs	r3, #1
   13268:	a90e      	add	r1, sp, #56	; 0x38
   1326a:	f841 3d20 	str.w	r3, [r1, #-32]!
   1326e:	f8cb 2000 	str.w	r2, [fp]
   13272:	4628      	mov	r0, r5
   13274:	f000 f994 	bl	135a0 <LLF_RND_GetFastestRosc>
   13278:	2800      	cmp	r0, #0
   1327a:	f47f af13 	bne.w	130a4 <getTrngSource+0xb4>
   1327e:	4629      	mov	r1, r5
   13280:	9806      	ldr	r0, [sp, #24]
   13282:	f000 f96f 	bl	13564 <LLF_RND_GetRoscSampleCnt>
   13286:	2800      	cmp	r0, #0
   13288:	f47f af0c 	bne.w	130a4 <getTrngSource+0xb4>
   1328c:	9f06      	ldr	r7, [sp, #24]
   1328e:	2f08      	cmp	r7, #8
   13290:	f000 80eb 	beq.w	1346a <getTrngSource+0x47a>
   13294:	2f04      	cmp	r7, #4
   13296:	f000 80ea 	beq.w	1346e <getTrngSource+0x47e>
   1329a:	f1a7 0702 	sub.w	r7, r7, #2
   1329e:	fab7 f787 	clz	r7, r7
   132a2:	097f      	lsrs	r7, r7, #5
   132a4:	2201      	movs	r2, #1
   132a6:	4616      	mov	r6, r2
   132a8:	4b73      	ldr	r3, [pc, #460]	; (13478 <getTrngSource+0x488>)
   132aa:	4974      	ldr	r1, [pc, #464]	; (1347c <getTrngSource+0x48c>)
   132ac:	601a      	str	r2, [r3, #0]
   132ae:	4618      	mov	r0, r3
   132b0:	600a      	str	r2, [r1, #0]
   132b2:	3b94      	subs	r3, #148	; 0x94
   132b4:	6006      	str	r6, [r0, #0]
   132b6:	6a6a      	ldr	r2, [r5, #36]	; 0x24
   132b8:	601a      	str	r2, [r3, #0]
   132ba:	6819      	ldr	r1, [r3, #0]
   132bc:	6a6a      	ldr	r2, [r5, #36]	; 0x24
   132be:	4291      	cmp	r1, r2
   132c0:	d1f8      	bne.n	132b4 <getTrngSource+0x2c4>
   132c2:	f04f 0800 	mov.w	r8, #0
   132c6:	4b6e      	ldr	r3, [pc, #440]	; (13480 <getTrngSource+0x490>)
   132c8:	f04f 30ff 	mov.w	r0, #4294967295
   132cc:	f8c3 8000 	str.w	r8, [r3]
   132d0:	f7ff fb7a 	bl	129c8 <CC_HalClearInterruptBit>
   132d4:	4b6b      	ldr	r3, [pc, #428]	; (13484 <getTrngSource+0x494>)
   132d6:	4a6c      	ldr	r2, [pc, #432]	; (13488 <getTrngSource+0x498>)
   132d8:	4640      	mov	r0, r8
   132da:	601a      	str	r2, [r3, #0]
   132dc:	f7ff fb82 	bl	129e4 <CC_HalMaskInterrupt>
   132e0:	220a      	movs	r2, #10
   132e2:	496a      	ldr	r1, [pc, #424]	; (1348c <getTrngSource+0x49c>)
   132e4:	4b6a      	ldr	r3, [pc, #424]	; (13490 <getTrngSource+0x4a0>)
   132e6:	600f      	str	r7, [r1, #0]
   132e8:	601a      	str	r2, [r3, #0]
   132ea:	991a      	ldr	r1, [sp, #104]	; 0x68
   132ec:	692b      	ldr	r3, [r5, #16]
   132ee:	2901      	cmp	r1, #1
   132f0:	6a6a      	ldr	r2, [r5, #36]	; 0x24
   132f2:	f000 80b1 	beq.w	13458 <getTrngSource+0x468>
   132f6:	4967      	ldr	r1, [pc, #412]	; (13494 <getTrngSource+0x4a4>)
   132f8:	fba1 1303 	umull	r1, r3, r1, r3
   132fc:	091b      	lsrs	r3, r3, #4
   132fe:	2101      	movs	r1, #1
   13300:	eb02 0242 	add.w	r2, r2, r2, lsl #1
   13304:	03d2      	lsls	r2, r2, #15
   13306:	fb03 f302 	mul.w	r3, r3, r2
   1330a:	4a63      	ldr	r2, [pc, #396]	; (13498 <getTrngSource+0x4a8>)
   1330c:	099b      	lsrs	r3, r3, #6
   1330e:	6013      	str	r3, [r2, #0]
   13310:	4b5b      	ldr	r3, [pc, #364]	; (13480 <getTrngSource+0x490>)
   13312:	6019      	str	r1, [r3, #0]
   13314:	9906      	ldr	r1, [sp, #24]
   13316:	f8db 2000 	ldr.w	r2, [fp]
   1331a:	020b      	lsls	r3, r1, #8
   1331c:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
   13320:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
   13324:	4313      	orrs	r3, r2
   13326:	f8cb 3000 	str.w	r3, [fp]
   1332a:	e67f      	b.n	1302c <getTrngSource+0x3c>
   1332c:	2303      	movs	r3, #3
   1332e:	9301      	str	r3, [sp, #4]
   13330:	e6f7      	b.n	13122 <getTrngSource+0x132>
   13332:	9b03      	ldr	r3, [sp, #12]
   13334:	f5b3 7f04 	cmp.w	r3, #528	; 0x210
   13338:	f63f af61 	bhi.w	131fe <getTrngSource+0x20e>
   1333c:	e9dd 7c04 	ldrd	r7, ip, [sp, #16]
   13340:	4620      	mov	r0, r4
   13342:	4623      	mov	r3, r4
   13344:	696e      	ldr	r6, [r5, #20]
   13346:	e004      	b.n	13352 <getTrngSource+0x362>
   13348:	2001      	movs	r0, #1
   1334a:	3301      	adds	r3, #1
   1334c:	4563      	cmp	r3, ip
   1334e:	4614      	mov	r4, r2
   13350:	d815      	bhi.n	1337e <getTrngSource+0x38e>
   13352:	095a      	lsrs	r2, r3, #5
   13354:	f857 2022 	ldr.w	r2, [r7, r2, lsl #2]
   13358:	f003 011f 	and.w	r1, r3, #31
   1335c:	40ca      	lsrs	r2, r1
   1335e:	291f      	cmp	r1, #31
   13360:	bf18      	it	ne
   13362:	f002 0201 	andne.w	r2, r2, #1
   13366:	2b00      	cmp	r3, #0
   13368:	d0ee      	beq.n	13348 <getTrngSource+0x358>
   1336a:	42a2      	cmp	r2, r4
   1336c:	d1ec      	bne.n	13348 <getTrngSource+0x358>
   1336e:	3001      	adds	r0, #1
   13370:	4286      	cmp	r6, r0
   13372:	d1ea      	bne.n	1334a <getTrngSource+0x35a>
   13374:	4849      	ldr	r0, [pc, #292]	; (1349c <getTrngSource+0x4ac>)
   13376:	e00b      	b.n	13390 <getTrngSource+0x3a0>
   13378:	2302      	movs	r3, #2
   1337a:	9301      	str	r3, [sp, #4]
   1337c:	e6d1      	b.n	13122 <getTrngSource+0x132>
   1337e:	f44f 6380 	mov.w	r3, #1024	; 0x400
   13382:	e9dd 1003 	ldrd	r1, r0, [sp, #12]
   13386:	69aa      	ldr	r2, [r5, #24]
   13388:	f7ff fdf4 	bl	12f74 <LLF_RND_AdaptiveProportionTest>
   1338c:	2800      	cmp	r0, #0
   1338e:	d05d      	beq.n	1344c <getTrngSource+0x45c>
   13390:	2300      	movs	r3, #0
   13392:	9a18      	ldr	r2, [sp, #96]	; 0x60
   13394:	6013      	str	r3, [r2, #0]
   13396:	e6a3      	b.n	130e0 <getTrngSource+0xf0>
   13398:	4629      	mov	r1, r5
   1339a:	9806      	ldr	r0, [sp, #24]
   1339c:	f000 f8e2 	bl	13564 <LLF_RND_GetRoscSampleCnt>
   133a0:	2800      	cmp	r0, #0
   133a2:	f47f ae7c 	bne.w	1309e <getTrngSource+0xae>
   133a6:	9c06      	ldr	r4, [sp, #24]
   133a8:	2c08      	cmp	r4, #8
   133aa:	d051      	beq.n	13450 <getTrngSource+0x460>
   133ac:	2c04      	cmp	r4, #4
   133ae:	d051      	beq.n	13454 <getTrngSource+0x464>
   133b0:	f1a4 0402 	sub.w	r4, r4, #2
   133b4:	fab4 f484 	clz	r4, r4
   133b8:	0964      	lsrs	r4, r4, #5
   133ba:	2301      	movs	r3, #1
   133bc:	461e      	mov	r6, r3
   133be:	4619      	mov	r1, r3
   133c0:	4a2d      	ldr	r2, [pc, #180]	; (13478 <getTrngSource+0x488>)
   133c2:	6013      	str	r3, [r2, #0]
   133c4:	f842 3c84 	str.w	r3, [r2, #-132]
   133c8:	4b2b      	ldr	r3, [pc, #172]	; (13478 <getTrngSource+0x488>)
   133ca:	6019      	str	r1, [r3, #0]
   133cc:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   133ce:	f8c9 3000 	str.w	r3, [r9]
   133d2:	f8d9 2000 	ldr.w	r2, [r9]
   133d6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   133d8:	429a      	cmp	r2, r3
   133da:	d1f5      	bne.n	133c8 <getTrngSource+0x3d8>
   133dc:	2700      	movs	r7, #0
   133de:	f04f 30ff 	mov.w	r0, #4294967295
   133e2:	f8ca 7000 	str.w	r7, [sl]
   133e6:	f7ff faef 	bl	129c8 <CC_HalClearInterruptBit>
   133ea:	4b26      	ldr	r3, [pc, #152]	; (13484 <getTrngSource+0x494>)
   133ec:	4a26      	ldr	r2, [pc, #152]	; (13488 <getTrngSource+0x498>)
   133ee:	4638      	mov	r0, r7
   133f0:	601a      	str	r2, [r3, #0]
   133f2:	f7ff faf7 	bl	129e4 <CC_HalMaskInterrupt>
   133f6:	220a      	movs	r2, #10
   133f8:	4924      	ldr	r1, [pc, #144]	; (1348c <getTrngSource+0x49c>)
   133fa:	4b25      	ldr	r3, [pc, #148]	; (13490 <getTrngSource+0x4a0>)
   133fc:	600c      	str	r4, [r1, #0]
   133fe:	601a      	str	r2, [r3, #0]
   13400:	692a      	ldr	r2, [r5, #16]
   13402:	4924      	ldr	r1, [pc, #144]	; (13494 <getTrngSource+0x4a4>)
   13404:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   13406:	fba1 1202 	umull	r1, r2, r1, r2
   1340a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   1340e:	0912      	lsrs	r2, r2, #4
   13410:	03db      	lsls	r3, r3, #15
   13412:	fb03 f302 	mul.w	r3, r3, r2
   13416:	4a20      	ldr	r2, [pc, #128]	; (13498 <getTrngSource+0x4a8>)
   13418:	099b      	lsrs	r3, r3, #6
   1341a:	6013      	str	r3, [r2, #0]
   1341c:	f8ca 6000 	str.w	r6, [sl]
   13420:	9b06      	ldr	r3, [sp, #24]
   13422:	f8db 1000 	ldr.w	r1, [fp]
   13426:	021a      	lsls	r2, r3, #8
   13428:	ea42 6303 	orr.w	r3, r2, r3, lsl #24
   1342c:	f021 427f 	bic.w	r2, r1, #4278190080	; 0xff000000
   13430:	431a      	orrs	r2, r3
   13432:	0a13      	lsrs	r3, r2, #8
   13434:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
   13438:	4313      	orrs	r3, r2
   1343a:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
   1343e:	f8cb 3000 	str.w	r3, [fp]
   13442:	9b02      	ldr	r3, [sp, #8]
   13444:	3b01      	subs	r3, #1
   13446:	9302      	str	r3, [sp, #8]
   13448:	f47f ae07 	bne.w	1305a <getTrngSource+0x6a>
   1344c:	2000      	movs	r0, #0
   1344e:	e629      	b.n	130a4 <getTrngSource+0xb4>
   13450:	2403      	movs	r4, #3
   13452:	e7b2      	b.n	133ba <getTrngSource+0x3ca>
   13454:	2402      	movs	r4, #2
   13456:	e7b0      	b.n	133ba <getTrngSource+0x3ca>
   13458:	f44f 037f 	mov.w	r3, #16711680	; 0xff0000
   1345c:	f8d3 1c0c 	ldr.w	r1, [r3, #3084]	; 0xc0c
   13460:	3101      	adds	r1, #1
   13462:	d006      	beq.n	13472 <getTrngSource+0x482>
   13464:	f8d3 3c0c 	ldr.w	r3, [r3, #3084]	; 0xc0c
   13468:	e745      	b.n	132f6 <getTrngSource+0x306>
   1346a:	2703      	movs	r7, #3
   1346c:	e71a      	b.n	132a4 <getTrngSource+0x2b4>
   1346e:	2702      	movs	r7, #2
   13470:	e718      	b.n	132a4 <getTrngSource+0x2b4>
   13472:	2316      	movs	r3, #22
   13474:	e743      	b.n	132fe <getTrngSource+0x30e>
   13476:	bf00      	nop
   13478:	508411c4 	.word	0x508411c4
   1347c:	50841140 	.word	0x50841140
   13480:	5084112c 	.word	0x5084112c
   13484:	50841100 	.word	0x50841100
   13488:	0ffffffe 	.word	0x0ffffffe
   1348c:	5084110c 	.word	0x5084110c
   13490:	50841138 	.word	0x50841138
   13494:	aaaaaaab 	.word	0xaaaaaaab
   13498:	508411d8 	.word	0x508411d8
   1349c:	00f10c36 	.word	0x00f10c36

000134a0 <LLF_RND_GetTrngSource>:
   134a0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   134a4:	4c1b      	ldr	r4, [pc, #108]	; (13514 <LLF_RND_GetTrngSource+0x74>)
   134a6:	b085      	sub	sp, #20
   134a8:	4607      	mov	r7, r0
   134aa:	e9dd 560d 	ldrd	r5, r6, [sp, #52]	; 0x34
   134ae:	4688      	mov	r8, r1
   134b0:	6820      	ldr	r0, [r4, #0]
   134b2:	f04f 31ff 	mov.w	r1, #4294967295
   134b6:	4691      	mov	r9, r2
   134b8:	f7ff fa10 	bl	128dc <CC_PalMutexLock>
   134bc:	bb28      	cbnz	r0, 1350a <LLF_RND_GetTrngSource+0x6a>
   134be:	2000      	movs	r0, #0
   134c0:	f7ff fa3c 	bl	1293c <CC_PalPowerSaveModeSelect>
   134c4:	b9e8      	cbnz	r0, 13502 <LLF_RND_GetTrngSource+0x62>
   134c6:	2300      	movs	r3, #0
   134c8:	e9cd 5600 	strd	r5, r6, [sp]
   134cc:	9302      	str	r3, [sp, #8]
   134ce:	464a      	mov	r2, r9
   134d0:	4641      	mov	r1, r8
   134d2:	4638      	mov	r0, r7
   134d4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   134d6:	f7ff fd8b 	bl	12ff0 <getTrngSource>
   134da:	4605      	mov	r5, r0
   134dc:	2001      	movs	r0, #1
   134de:	f7ff fa2d 	bl	1293c <CC_PalPowerSaveModeSelect>
   134e2:	b950      	cbnz	r0, 134fa <LLF_RND_GetTrngSource+0x5a>
   134e4:	6820      	ldr	r0, [r4, #0]
   134e6:	f7ff fa01 	bl	128ec <CC_PalMutexUnlock>
   134ea:	b110      	cbz	r0, 134f2 <LLF_RND_GetTrngSource+0x52>
   134ec:	480a      	ldr	r0, [pc, #40]	; (13518 <LLF_RND_GetTrngSource+0x78>)
   134ee:	f7ff fb8d 	bl	12c0c <CC_PalAbort>
   134f2:	4628      	mov	r0, r5
   134f4:	b005      	add	sp, #20
   134f6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   134fa:	4808      	ldr	r0, [pc, #32]	; (1351c <LLF_RND_GetTrngSource+0x7c>)
   134fc:	f7ff fb86 	bl	12c0c <CC_PalAbort>
   13500:	e7f0      	b.n	134e4 <LLF_RND_GetTrngSource+0x44>
   13502:	4807      	ldr	r0, [pc, #28]	; (13520 <LLF_RND_GetTrngSource+0x80>)
   13504:	f7ff fb82 	bl	12c0c <CC_PalAbort>
   13508:	e7dd      	b.n	134c6 <LLF_RND_GetTrngSource+0x26>
   1350a:	4806      	ldr	r0, [pc, #24]	; (13524 <LLF_RND_GetTrngSource+0x84>)
   1350c:	f7ff fb7e 	bl	12c0c <CC_PalAbort>
   13510:	e7d5      	b.n	134be <LLF_RND_GetTrngSource+0x1e>
   13512:	bf00      	nop
   13514:	20001410 	.word	0x20001410
   13518:	000144fc 	.word	0x000144fc
   1351c:	00014534 	.word	0x00014534
   13520:	00014514 	.word	0x00014514
   13524:	000144e4 	.word	0x000144e4

00013528 <LLF_RND_RunTrngStartupTest>:
   13528:	b510      	push	{r4, lr}
   1352a:	2401      	movs	r4, #1
   1352c:	b086      	sub	sp, #24
   1352e:	ab05      	add	r3, sp, #20
   13530:	e9cd 2401 	strd	r2, r4, [sp, #4]
   13534:	9300      	str	r3, [sp, #0]
   13536:	2200      	movs	r2, #0
   13538:	ab04      	add	r3, sp, #16
   1353a:	f7ff fd59 	bl	12ff0 <getTrngSource>
   1353e:	b006      	add	sp, #24
   13540:	bd10      	pop	{r4, pc}
   13542:	bf00      	nop

00013544 <LLF_RND_WaitRngInterrupt>:
   13544:	b508      	push	{r3, lr}
   13546:	4601      	mov	r1, r0
   13548:	f44f 6080 	mov.w	r0, #1024	; 0x400
   1354c:	f7ff fa50 	bl	129f0 <CC_HalWaitInterruptRND>
   13550:	2300      	movs	r3, #0
   13552:	4902      	ldr	r1, [pc, #8]	; (1355c <LLF_RND_WaitRngInterrupt+0x18>)
   13554:	4a02      	ldr	r2, [pc, #8]	; (13560 <LLF_RND_WaitRngInterrupt+0x1c>)
   13556:	600b      	str	r3, [r1, #0]
   13558:	6013      	str	r3, [r2, #0]
   1355a:	bd08      	pop	{r3, pc}
   1355c:	508411c8 	.word	0x508411c8
   13560:	5084112c 	.word	0x5084112c

00013564 <LLF_RND_GetRoscSampleCnt>:
   13564:	3801      	subs	r0, #1
   13566:	2807      	cmp	r0, #7
   13568:	d815      	bhi.n	13596 <LLF_RND_GetRoscSampleCnt+0x32>
   1356a:	e8df f000 	tbb	[pc, r0]
   1356e:	0c10      	.short	0x0c10
   13570:	14140814 	.word	0x14140814
   13574:	0414      	.short	0x0414
   13576:	68cb      	ldr	r3, [r1, #12]
   13578:	2000      	movs	r0, #0
   1357a:	624b      	str	r3, [r1, #36]	; 0x24
   1357c:	4770      	bx	lr
   1357e:	688b      	ldr	r3, [r1, #8]
   13580:	2000      	movs	r0, #0
   13582:	624b      	str	r3, [r1, #36]	; 0x24
   13584:	4770      	bx	lr
   13586:	684b      	ldr	r3, [r1, #4]
   13588:	2000      	movs	r0, #0
   1358a:	624b      	str	r3, [r1, #36]	; 0x24
   1358c:	4770      	bx	lr
   1358e:	680b      	ldr	r3, [r1, #0]
   13590:	2000      	movs	r0, #0
   13592:	624b      	str	r3, [r1, #36]	; 0x24
   13594:	4770      	bx	lr
   13596:	4801      	ldr	r0, [pc, #4]	; (1359c <LLF_RND_GetRoscSampleCnt+0x38>)
   13598:	4770      	bx	lr
   1359a:	bf00      	nop
   1359c:	00f10c31 	.word	0x00f10c31

000135a0 <LLF_RND_GetFastestRosc>:
   135a0:	680b      	ldr	r3, [r1, #0]
   135a2:	e002      	b.n	135aa <LLF_RND_GetFastestRosc+0xa>
   135a4:	2b08      	cmp	r3, #8
   135a6:	600b      	str	r3, [r1, #0]
   135a8:	d806      	bhi.n	135b8 <LLF_RND_GetFastestRosc+0x18>
   135aa:	6a02      	ldr	r2, [r0, #32]
   135ac:	4213      	tst	r3, r2
   135ae:	ea4f 0343 	mov.w	r3, r3, lsl #1
   135b2:	d0f7      	beq.n	135a4 <LLF_RND_GetFastestRosc+0x4>
   135b4:	2000      	movs	r0, #0
   135b6:	4770      	bx	lr
   135b8:	4800      	ldr	r0, [pc, #0]	; (135bc <LLF_RND_GetFastestRosc+0x1c>)
   135ba:	4770      	bx	lr
   135bc:	00f10c31 	.word	0x00f10c31

000135c0 <LLF_RND_TurnOffTrng>:
   135c0:	2300      	movs	r3, #0
   135c2:	4904      	ldr	r1, [pc, #16]	; (135d4 <LLF_RND_TurnOffTrng+0x14>)
   135c4:	4a04      	ldr	r2, [pc, #16]	; (135d8 <LLF_RND_TurnOffTrng+0x18>)
   135c6:	600b      	str	r3, [r1, #0]
   135c8:	f44f 6080 	mov.w	r0, #1024	; 0x400
   135cc:	6013      	str	r3, [r2, #0]
   135ce:	f7ff b9fb 	b.w	129c8 <CC_HalClearInterruptBit>
   135d2:	bf00      	nop
   135d4:	5084112c 	.word	0x5084112c
   135d8:	508411c4 	.word	0x508411c4

000135dc <main>:
 *  0 kB  |---------------------|
 */


void main(void)
{
   135dc:	b508      	push	{r3, lr}
	spm_config();
   135de:	f7fd fb31 	bl	10c44 <spm_config>
	spm_jump();
}
   135e2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	spm_jump();
   135e6:	f7fd bac1 	b.w	10b6c <spm_jump>

000135ea <z_sys_mem_pool_base_init>:
{
	int i;
	size_t buflen = p->n_max * p->max_sz, sz = p->max_sz;
	u32_t *bits = (u32_t *)((u8_t *)p->buf + buflen);

	p->max_inline_level = -1;
   135ea:	23ff      	movs	r3, #255	; 0xff
{
   135ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	size_t buflen = p->n_max * p->max_sz, sz = p->max_sz;
   135f0:	6846      	ldr	r6, [r0, #4]
	p->max_inline_level = -1;
   135f2:	72c3      	strb	r3, [r0, #11]
	size_t buflen = p->n_max * p->max_sz, sz = p->max_sz;
   135f4:	4632      	mov	r2, r6

	for (i = 0; i < p->n_levels; i++) {
   135f6:	2300      	movs	r3, #0
		int nblocks = buflen / sz;

		sys_dlist_init(&p->levels[i].free_list);
   135f8:	f04f 090c 	mov.w	r9, #12
	size_t buflen = p->n_max * p->max_sz, sz = p->max_sz;
   135fc:	8907      	ldrh	r7, [r0, #8]
	u32_t *bits = (u32_t *)((u8_t *)p->buf + buflen);
   135fe:	6801      	ldr	r1, [r0, #0]
	size_t buflen = p->n_max * p->max_sz, sz = p->max_sz;
   13600:	fb06 fc07 	mul.w	ip, r6, r7
	for (i = 0; i < p->n_levels; i++) {
   13604:	f890 800a 	ldrb.w	r8, [r0, #10]
	u32_t *bits = (u32_t *)((u8_t *)p->buf + buflen);
   13608:	4461      	add	r1, ip
	for (i = 0; i < p->n_levels; i++) {
   1360a:	4598      	cmp	r8, r3
   1360c:	dc05      	bgt.n	1361a <z_sys_mem_pool_base_init+0x30>
   1360e:	2300      	movs	r3, #0
		}

		sz = WB_DN(sz / 4);
	}

	for (i = 0; i < p->n_max; i++) {
   13610:	4619      	mov	r1, r3
   13612:	428f      	cmp	r7, r1
   13614:	dc20      	bgt.n	13658 <z_sys_mem_pool_base_init+0x6e>
		void *block = block_ptr(p, p->max_sz, i);

		sys_dlist_append(&p->levels[0].free_list, block);
	}
}
   13616:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		int nblocks = buflen / sz;
   1361a:	fbbc f5f2 	udiv	r5, ip, r2
		sys_dlist_init(&p->levels[i].free_list);
   1361e:	fb09 fe03 	mul.w	lr, r9, r3
   13622:	f8d0 a00c 	ldr.w	sl, [r0, #12]
		if (nblocks <= sizeof(p->levels[i].bits)*8) {
   13626:	2d20      	cmp	r5, #32
		sys_dlist_init(&p->levels[i].free_list);
   13628:	eb0a 040e 	add.w	r4, sl, lr
   1362c:	f104 0b04 	add.w	fp, r4, #4
   13630:	e9c4 bb01 	strd	fp, fp, [r4, #4]
		if (nblocks <= sizeof(p->levels[i].bits)*8) {
   13634:	d805      	bhi.n	13642 <z_sys_mem_pool_base_init+0x58>
			p->max_inline_level = i;
   13636:	72c3      	strb	r3, [r0, #11]
		sz = WB_DN(sz / 4);
   13638:	0892      	lsrs	r2, r2, #2
   1363a:	f022 0203 	bic.w	r2, r2, #3
	for (i = 0; i < p->n_levels; i++) {
   1363e:	3301      	adds	r3, #1
   13640:	e7e3      	b.n	1360a <z_sys_mem_pool_base_init+0x20>
			bits += (nblocks + 31)/32;
   13642:	f115 041f 	adds.w	r4, r5, #31
   13646:	bf48      	it	mi
   13648:	f105 043e 	addmi.w	r4, r5, #62	; 0x3e
   1364c:	1164      	asrs	r4, r4, #5
			p->levels[i].bits_p = bits;
   1364e:	f84a 100e 	str.w	r1, [sl, lr]
			bits += (nblocks + 31)/32;
   13652:	eb01 0184 	add.w	r1, r1, r4, lsl #2
   13656:	e7ef      	b.n	13638 <z_sys_mem_pool_base_init+0x4e>
		sys_dlist_append(&p->levels[0].free_list, block);
   13658:	68c2      	ldr	r2, [r0, #12]
	return (u8_t *)p->buf + lsz * block;
   1365a:	6805      	ldr	r5, [r0, #0]
		sys_dlist_append(&p->levels[0].free_list, block);
   1365c:	f102 0c04 	add.w	ip, r2, #4
	return (u8_t *)p->buf + lsz * block;
   13660:	18ec      	adds	r4, r5, r3
	node->next = list;
   13662:	f845 c003 	str.w	ip, [r5, r3]
	node->prev = list->tail;
   13666:	6895      	ldr	r5, [r2, #8]
	for (i = 0; i < p->n_max; i++) {
   13668:	3101      	adds	r1, #1
   1366a:	6065      	str	r5, [r4, #4]
	list->tail->next = node;
   1366c:	6895      	ldr	r5, [r2, #8]
   1366e:	4433      	add	r3, r6
   13670:	602c      	str	r4, [r5, #0]
	list->tail = node;
   13672:	6094      	str	r4, [r2, #8]
   13674:	e7cd      	b.n	13612 <z_sys_mem_pool_base_init+0x28>

00013676 <arch_printk_char_out>:
}
   13676:	2000      	movs	r0, #0
   13678:	4770      	bx	lr

0001367a <print_err>:
{
   1367a:	b570      	push	{r4, r5, r6, lr}
   1367c:	460d      	mov	r5, r1
   1367e:	4604      	mov	r4, r0
	out('E', ctx);
   13680:	2045      	movs	r0, #69	; 0x45
   13682:	47a0      	blx	r4
	out('R', ctx);
   13684:	4629      	mov	r1, r5
   13686:	2052      	movs	r0, #82	; 0x52
   13688:	47a0      	blx	r4
	out('R', ctx);
   1368a:	4629      	mov	r1, r5
   1368c:	4623      	mov	r3, r4
}
   1368e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	out('R', ctx);
   13692:	2052      	movs	r0, #82	; 0x52
   13694:	4718      	bx	r3

00013696 <z_vprintk>:
{
   13696:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	char length_mod = 0;
   1369a:	f04f 0800 	mov.w	r8, #0
{
   1369e:	4606      	mov	r6, r0
   136a0:	460f      	mov	r7, r1
   136a2:	461c      	mov	r4, r3
	int min_width = -1;
   136a4:	f04f 3aff 	mov.w	sl, #4294967295
	enum pad_type padding = PAD_NONE;
   136a8:	46c1      	mov	r9, r8
	int might_format = 0; /* 1 if encountered a '%' */
   136aa:	4645      	mov	r5, r8
{
   136ac:	b08b      	sub	sp, #44	; 0x2c
   136ae:	9202      	str	r2, [sp, #8]
	while (*fmt) {
   136b0:	9b02      	ldr	r3, [sp, #8]
   136b2:	7818      	ldrb	r0, [r3, #0]
   136b4:	b910      	cbnz	r0, 136bc <z_vprintk+0x26>
}
   136b6:	b00b      	add	sp, #44	; 0x2c
   136b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (!might_format) {
   136bc:	b945      	cbnz	r5, 136d0 <z_vprintk+0x3a>
			if (*fmt != '%') {
   136be:	2825      	cmp	r0, #37	; 0x25
   136c0:	f000 814b 	beq.w	1395a <z_vprintk+0x2c4>
				out((int)*fmt, ctx);
   136c4:	4639      	mov	r1, r7
   136c6:	47b0      	blx	r6
		++fmt;
   136c8:	9b02      	ldr	r3, [sp, #8]
   136ca:	3301      	adds	r3, #1
   136cc:	9302      	str	r3, [sp, #8]
   136ce:	e7ef      	b.n	136b0 <z_vprintk+0x1a>
			switch (*fmt) {
   136d0:	2864      	cmp	r0, #100	; 0x64
   136d2:	d06d      	beq.n	137b0 <z_vprintk+0x11a>
   136d4:	d819      	bhi.n	1370a <z_vprintk+0x74>
   136d6:	2839      	cmp	r0, #57	; 0x39
   136d8:	d80a      	bhi.n	136f0 <z_vprintk+0x5a>
   136da:	2831      	cmp	r0, #49	; 0x31
   136dc:	d25f      	bcs.n	1379e <z_vprintk+0x108>
   136de:	282d      	cmp	r0, #45	; 0x2d
   136e0:	f000 8141 	beq.w	13966 <z_vprintk+0x2d0>
   136e4:	2830      	cmp	r0, #48	; 0x30
   136e6:	d04b      	beq.n	13780 <z_vprintk+0xea>
   136e8:	2825      	cmp	r0, #37	; 0x25
   136ea:	d107      	bne.n	136fc <z_vprintk+0x66>
				out((int)'%', ctx);
   136ec:	4639      	mov	r1, r7
   136ee:	e132      	b.n	13956 <z_vprintk+0x2c0>
			switch (*fmt) {
   136f0:	2858      	cmp	r0, #88	; 0x58
   136f2:	f000 80bb 	beq.w	1386c <z_vprintk+0x1d6>
   136f6:	2863      	cmp	r0, #99	; 0x63
   136f8:	f000 812a 	beq.w	13950 <z_vprintk+0x2ba>
				out((int)'%', ctx);
   136fc:	4639      	mov	r1, r7
   136fe:	2025      	movs	r0, #37	; 0x25
   13700:	47b0      	blx	r6
				out((int)*fmt, ctx);
   13702:	9b02      	ldr	r3, [sp, #8]
   13704:	4639      	mov	r1, r7
   13706:	7818      	ldrb	r0, [r3, #0]
   13708:	e125      	b.n	13956 <z_vprintk+0x2c0>
			switch (*fmt) {
   1370a:	2870      	cmp	r0, #112	; 0x70
   1370c:	f000 80a4 	beq.w	13858 <z_vprintk+0x1c2>
   13710:	d811      	bhi.n	13736 <z_vprintk+0xa0>
   13712:	2869      	cmp	r0, #105	; 0x69
   13714:	d04c      	beq.n	137b0 <z_vprintk+0x11a>
   13716:	286c      	cmp	r0, #108	; 0x6c
   13718:	d105      	bne.n	13726 <z_vprintk+0x90>
				} else if (*fmt == 'l' && length_mod == 'l') {
   1371a:	f1b8 0f6c 	cmp.w	r8, #108	; 0x6c
   1371e:	d12a      	bne.n	13776 <z_vprintk+0xe0>
					length_mod = 'L';
   13720:	f04f 084c 	mov.w	r8, #76	; 0x4c
   13724:	e7d0      	b.n	136c8 <z_vprintk+0x32>
			switch (*fmt) {
   13726:	2868      	cmp	r0, #104	; 0x68
   13728:	d1e8      	bne.n	136fc <z_vprintk+0x66>
				if (*fmt == 'h' && length_mod == 'h') {
   1372a:	f1b8 0f68 	cmp.w	r8, #104	; 0x68
   1372e:	d122      	bne.n	13776 <z_vprintk+0xe0>
					length_mod = 'H';
   13730:	f04f 0848 	mov.w	r8, #72	; 0x48
   13734:	e7c8      	b.n	136c8 <z_vprintk+0x32>
			switch (*fmt) {
   13736:	2875      	cmp	r0, #117	; 0x75
   13738:	d072      	beq.n	13820 <z_vprintk+0x18a>
   1373a:	d818      	bhi.n	1376e <z_vprintk+0xd8>
   1373c:	2873      	cmp	r0, #115	; 0x73
   1373e:	d1dd      	bne.n	136fc <z_vprintk+0x66>
				char *s = va_arg(ap, char *);
   13740:	f854 5b04 	ldr.w	r5, [r4], #4
				while (*s) {
   13744:	46ab      	mov	fp, r5
   13746:	465b      	mov	r3, fp
   13748:	f81b 0b01 	ldrb.w	r0, [fp], #1
   1374c:	2800      	cmp	r0, #0
   1374e:	f040 80fc 	bne.w	1394a <z_vprintk+0x2b4>
				if (padding == PAD_SPACE_AFTER) {
   13752:	f1b9 0f03 	cmp.w	r9, #3
   13756:	f040 810c 	bne.w	13972 <z_vprintk+0x2dc>
					int remaining = min_width - (s - start);
   1375a:	1b5d      	subs	r5, r3, r5
   1375c:	ebaa 0505 	sub.w	r5, sl, r5
					while (remaining-- > 0) {
   13760:	2d00      	cmp	r5, #0
   13762:	dd49      	ble.n	137f8 <z_vprintk+0x162>
						out(' ', ctx);
   13764:	4639      	mov	r1, r7
   13766:	2020      	movs	r0, #32
   13768:	47b0      	blx	r6
   1376a:	3d01      	subs	r5, #1
   1376c:	e7f8      	b.n	13760 <z_vprintk+0xca>
			switch (*fmt) {
   1376e:	2878      	cmp	r0, #120	; 0x78
   13770:	d07c      	beq.n	1386c <z_vprintk+0x1d6>
   13772:	287a      	cmp	r0, #122	; 0x7a
   13774:	d1c2      	bne.n	136fc <z_vprintk+0x66>
				} else if (length_mod == 0) {
   13776:	f1b8 0f00 	cmp.w	r8, #0
   1377a:	d1bf      	bne.n	136fc <z_vprintk+0x66>
   1377c:	4680      	mov	r8, r0
   1377e:	e7a3      	b.n	136c8 <z_vprintk+0x32>
				if (min_width < 0 && padding == PAD_NONE) {
   13780:	f1ba 0f00 	cmp.w	sl, #0
   13784:	da0e      	bge.n	137a4 <z_vprintk+0x10e>
   13786:	f1b9 0f00 	cmp.w	r9, #0
   1378a:	f000 80ef 	beq.w	1396c <z_vprintk+0x2d6>
					min_width = *fmt - '0';
   1378e:	f1a0 0a30 	sub.w	sl, r0, #48	; 0x30
					padding = PAD_SPACE_BEFORE;
   13792:	f1b9 0f00 	cmp.w	r9, #0
   13796:	bf08      	it	eq
   13798:	f04f 0902 	moveq.w	r9, #2
   1379c:	e794      	b.n	136c8 <z_vprintk+0x32>
				if (min_width < 0) {
   1379e:	f1ba 0f00 	cmp.w	sl, #0
   137a2:	dbf4      	blt.n	1378e <z_vprintk+0xf8>
					min_width = 10 * min_width + *fmt - '0';
   137a4:	230a      	movs	r3, #10
   137a6:	fb03 0a0a 	mla	sl, r3, sl, r0
   137aa:	f1aa 0a30 	sub.w	sl, sl, #48	; 0x30
   137ae:	e7f0      	b.n	13792 <z_vprintk+0xfc>
				if (length_mod == 'z') {
   137b0:	f1b8 0f7a 	cmp.w	r8, #122	; 0x7a
   137b4:	d102      	bne.n	137bc <z_vprintk+0x126>
					d = va_arg(ap, int);
   137b6:	f854 5b04 	ldr.w	r5, [r4], #4
   137ba:	e020      	b.n	137fe <z_vprintk+0x168>
				} else if (length_mod == 'l') {
   137bc:	f1b8 0f6c 	cmp.w	r8, #108	; 0x6c
   137c0:	d0f9      	beq.n	137b6 <z_vprintk+0x120>
				} else if (length_mod == 'L') {
   137c2:	f1b8 0f4c 	cmp.w	r8, #76	; 0x4c
   137c6:	d1f6      	bne.n	137b6 <z_vprintk+0x120>
					long long lld = va_arg(ap, long long);
   137c8:	3407      	adds	r4, #7
   137ca:	f024 0407 	bic.w	r4, r4, #7
   137ce:	e8f4 2302 	ldrd	r2, r3, [r4], #8
					if (lld > __LONG_MAX__ ||
   137d2:	f112 4100 	adds.w	r1, r2, #2147483648	; 0x80000000
   137d6:	9106      	str	r1, [sp, #24]
   137d8:	f143 0100 	adc.w	r1, r3, #0
   137dc:	9107      	str	r1, [sp, #28]
   137de:	2100      	movs	r1, #0
   137e0:	e9dd bc06 	ldrd	fp, ip, [sp, #24]
   137e4:	f04f 30ff 	mov.w	r0, #4294967295
   137e8:	4561      	cmp	r1, ip
   137ea:	bf08      	it	eq
   137ec:	4558      	cmpeq	r0, fp
   137ee:	d205      	bcs.n	137fc <z_vprintk+0x166>
						print_err(out, ctx);
   137f0:	4639      	mov	r1, r7
   137f2:	4630      	mov	r0, r6
   137f4:	f7ff ff41 	bl	1367a <print_err>
			might_format = 0;
   137f8:	2500      	movs	r5, #0
				break;
   137fa:	e765      	b.n	136c8 <z_vprintk+0x32>
					d = lld;
   137fc:	4615      	mov	r5, r2
				if (d < 0) {
   137fe:	2d00      	cmp	r5, #0
   13800:	da05      	bge.n	1380e <z_vprintk+0x178>
					out((int)'-', ctx);
   13802:	4639      	mov	r1, r7
   13804:	202d      	movs	r0, #45	; 0x2d
   13806:	47b0      	blx	r6
					d = -d;
   13808:	426d      	negs	r5, r5
					min_width--;
   1380a:	f10a 3aff 	add.w	sl, sl, #4294967295
				_printk_dec_ulong(out, ctx, d, padding,
   1380e:	464b      	mov	r3, r9
   13810:	462a      	mov	r2, r5
   13812:	f8cd a000 	str.w	sl, [sp]
				_printk_dec_ulong(out, ctx, u, padding,
   13816:	4639      	mov	r1, r7
   13818:	4630      	mov	r0, r6
   1381a:	f7fc ffc3 	bl	107a4 <_printk_dec_ulong>
				break;
   1381e:	e7eb      	b.n	137f8 <z_vprintk+0x162>
				if (length_mod == 'z') {
   13820:	f1b8 0f7a 	cmp.w	r8, #122	; 0x7a
   13824:	d102      	bne.n	1382c <z_vprintk+0x196>
					u = va_arg(ap, unsigned int);
   13826:	f854 2b04 	ldr.w	r2, [r4], #4
   1382a:	e011      	b.n	13850 <z_vprintk+0x1ba>
				} else if (length_mod == 'l') {
   1382c:	f1b8 0f6c 	cmp.w	r8, #108	; 0x6c
   13830:	d0f9      	beq.n	13826 <z_vprintk+0x190>
				} else if (length_mod == 'L') {
   13832:	f1b8 0f4c 	cmp.w	r8, #76	; 0x4c
   13836:	d1f6      	bne.n	13826 <z_vprintk+0x190>
					if (llu > ~0UL) {
   13838:	2100      	movs	r1, #0
   1383a:	f04f 30ff 	mov.w	r0, #4294967295
					unsigned long long llu =
   1383e:	3407      	adds	r4, #7
   13840:	f024 0407 	bic.w	r4, r4, #7
   13844:	e8f4 2302 	ldrd	r2, r3, [r4], #8
					if (llu > ~0UL) {
   13848:	4299      	cmp	r1, r3
   1384a:	bf08      	it	eq
   1384c:	4290      	cmpeq	r0, r2
   1384e:	d3cf      	bcc.n	137f0 <z_vprintk+0x15a>
				_printk_dec_ulong(out, ctx, u, padding,
   13850:	f8cd a000 	str.w	sl, [sp]
   13854:	464b      	mov	r3, r9
   13856:	e7de      	b.n	13816 <z_vprintk+0x180>
				out('0', ctx);
   13858:	4639      	mov	r1, r7
   1385a:	2030      	movs	r0, #48	; 0x30
   1385c:	47b0      	blx	r6
				out('x', ctx);
   1385e:	4639      	mov	r1, r7
   13860:	2078      	movs	r0, #120	; 0x78
   13862:	47b0      	blx	r6
					min_width = 8;
   13864:	f04f 0a08 	mov.w	sl, #8
				padding = PAD_ZERO_BEFORE;
   13868:	f04f 0901 	mov.w	r9, #1
				if (*fmt == 'p') {
   1386c:	9b02      	ldr	r3, [sp, #8]
   1386e:	781b      	ldrb	r3, [r3, #0]
   13870:	2b70      	cmp	r3, #112	; 0x70
   13872:	d104      	bne.n	1387e <z_vprintk+0x1e8>
					x = va_arg(ap, unsigned int);
   13874:	f854 3b04 	ldr.w	r3, [r4], #4
   13878:	9304      	str	r3, [sp, #16]
   1387a:	2300      	movs	r3, #0
   1387c:	e00d      	b.n	1389a <z_vprintk+0x204>
				} else if (length_mod == 'l') {
   1387e:	f1b8 0f6c 	cmp.w	r8, #108	; 0x6c
   13882:	d0f7      	beq.n	13874 <z_vprintk+0x1de>
				} else if (length_mod == 'L') {
   13884:	f1b8 0f4c 	cmp.w	r8, #76	; 0x4c
   13888:	d1f4      	bne.n	13874 <z_vprintk+0x1de>
					x = va_arg(ap, unsigned long long);
   1388a:	3407      	adds	r4, #7
   1388c:	f024 0307 	bic.w	r3, r4, #7
   13890:	461c      	mov	r4, r3
   13892:	f854 2b08 	ldr.w	r2, [r4], #8
   13896:	685b      	ldr	r3, [r3, #4]
   13898:	9204      	str	r2, [sp, #16]
	int digits = 0;
   1389a:	2100      	movs	r1, #0
	int remaining = 16; /* 16 digits max */
   1389c:	2210      	movs	r2, #16
	int shift = sizeof(num) * 8;
   1389e:	f04f 0b40 	mov.w	fp, #64	; 0x40
	int digits = 0;
   138a2:	9103      	str	r1, [sp, #12]
	int found_largest_digit = 0;
   138a4:	9105      	str	r1, [sp, #20]
		shift -= 4;
   138a6:	f1ab 0b04 	sub.w	fp, fp, #4
		nibble = (num >> shift) & 0xf;
   138aa:	9804      	ldr	r0, [sp, #16]
   138ac:	f1cb 0c20 	rsb	ip, fp, #32
   138b0:	f1ab 0120 	sub.w	r1, fp, #32
   138b4:	fa20 f00b 	lsr.w	r0, r0, fp
   138b8:	fa03 fc0c 	lsl.w	ip, r3, ip
   138bc:	ea40 000c 	orr.w	r0, r0, ip
   138c0:	fa23 f101 	lsr.w	r1, r3, r1
   138c4:	4308      	orrs	r0, r1
		if (nibble != 0 || found_largest_digit != 0 || shift == 0) {
   138c6:	f010 000f 	ands.w	r0, r0, #15
   138ca:	d106      	bne.n	138da <z_vprintk+0x244>
   138cc:	9905      	ldr	r1, [sp, #20]
   138ce:	b911      	cbnz	r1, 138d6 <z_vprintk+0x240>
   138d0:	f1bb 0f00 	cmp.w	fp, #0
   138d4:	d122      	bne.n	1391c <z_vprintk+0x286>
			nibble += nibble > 9 ? 87 : 48;
   138d6:	2130      	movs	r1, #48	; 0x30
   138d8:	e003      	b.n	138e2 <z_vprintk+0x24c>
   138da:	2809      	cmp	r0, #9
   138dc:	bf8c      	ite	hi
   138de:	2157      	movhi	r1, #87	; 0x57
   138e0:	2130      	movls	r1, #48	; 0x30
   138e2:	4408      	add	r0, r1
			out((int)nibble, ctx);
   138e4:	b240      	sxtb	r0, r0
   138e6:	4639      	mov	r1, r7
   138e8:	9308      	str	r3, [sp, #32]
   138ea:	9205      	str	r2, [sp, #20]
   138ec:	47b0      	blx	r6
			digits++;
   138ee:	9b03      	ldr	r3, [sp, #12]
	while (shift >= 4) {
   138f0:	9a05      	ldr	r2, [sp, #20]
			digits++;
   138f2:	3301      	adds	r3, #1
   138f4:	9303      	str	r3, [sp, #12]
	while (shift >= 4) {
   138f6:	9b08      	ldr	r3, [sp, #32]
   138f8:	f1bb 0f00 	cmp.w	fp, #0
   138fc:	d123      	bne.n	13946 <z_vprintk+0x2b0>
	if (padding == PAD_SPACE_AFTER) {
   138fe:	f1b9 0f03 	cmp.w	r9, #3
   13902:	f47f af79 	bne.w	137f8 <z_vprintk+0x162>
		remaining = min_width * 2 - digits;
   13906:	9b03      	ldr	r3, [sp, #12]
   13908:	ebc3 054a 	rsb	r5, r3, sl, lsl #1
		while (remaining-- > 0) {
   1390c:	2d00      	cmp	r5, #0
   1390e:	f77f af73 	ble.w	137f8 <z_vprintk+0x162>
			out(' ', ctx);
   13912:	4639      	mov	r1, r7
   13914:	2020      	movs	r0, #32
   13916:	47b0      	blx	r6
   13918:	3d01      	subs	r5, #1
   1391a:	e7f7      	b.n	1390c <z_vprintk+0x276>
		if (remaining-- <= min_width) {
   1391c:	1e51      	subs	r1, r2, #1
   1391e:	4592      	cmp	sl, r2
   13920:	9108      	str	r1, [sp, #32]
   13922:	db07      	blt.n	13934 <z_vprintk+0x29e>
			if (padding == PAD_ZERO_BEFORE) {
   13924:	f1b9 0f01 	cmp.w	r9, #1
   13928:	d106      	bne.n	13938 <z_vprintk+0x2a2>
				out('0', ctx);
   1392a:	4639      	mov	r1, r7
   1392c:	2030      	movs	r0, #48	; 0x30
   1392e:	9309      	str	r3, [sp, #36]	; 0x24
				out(' ', ctx);
   13930:	47b0      	blx	r6
   13932:	9b09      	ldr	r3, [sp, #36]	; 0x24
			nibble += nibble > 9 ? 87 : 48;
   13934:	9a08      	ldr	r2, [sp, #32]
   13936:	e7b6      	b.n	138a6 <z_vprintk+0x210>
			} else if (padding == PAD_SPACE_BEFORE) {
   13938:	f1b9 0f02 	cmp.w	r9, #2
   1393c:	d1fa      	bne.n	13934 <z_vprintk+0x29e>
   1393e:	9309      	str	r3, [sp, #36]	; 0x24
				out(' ', ctx);
   13940:	4639      	mov	r1, r7
   13942:	2020      	movs	r0, #32
   13944:	e7f4      	b.n	13930 <z_vprintk+0x29a>
			found_largest_digit = 1;
   13946:	9505      	str	r5, [sp, #20]
   13948:	e7ad      	b.n	138a6 <z_vprintk+0x210>
					out((int)(*s++), ctx);
   1394a:	4639      	mov	r1, r7
   1394c:	47b0      	blx	r6
   1394e:	e6fa      	b.n	13746 <z_vprintk+0xb0>
				out(c, ctx);
   13950:	4639      	mov	r1, r7
   13952:	f854 0b04 	ldr.w	r0, [r4], #4
				out((int)'%', ctx);
   13956:	47b0      	blx	r6
   13958:	e74e      	b.n	137f8 <z_vprintk+0x162>
				length_mod = 0;
   1395a:	46a8      	mov	r8, r5
				padding = PAD_NONE;
   1395c:	46a9      	mov	r9, r5
				min_width = -1;
   1395e:	f04f 3aff 	mov.w	sl, #4294967295
				might_format = 1;
   13962:	2501      	movs	r5, #1
   13964:	e6b0      	b.n	136c8 <z_vprintk+0x32>
				padding = PAD_SPACE_AFTER;
   13966:	f04f 0903 	mov.w	r9, #3
   1396a:	e6ad      	b.n	136c8 <z_vprintk+0x32>
					padding = PAD_ZERO_BEFORE;
   1396c:	f04f 0901 	mov.w	r9, #1
   13970:	e6aa      	b.n	136c8 <z_vprintk+0x32>
			might_format = 0;
   13972:	4605      	mov	r5, r0
   13974:	e6a8      	b.n	136c8 <z_vprintk+0x32>

00013976 <printk>:
{
   13976:	b40f      	push	{r0, r1, r2, r3}
   13978:	b507      	push	{r0, r1, r2, lr}
   1397a:	a904      	add	r1, sp, #16
   1397c:	f851 0b04 	ldr.w	r0, [r1], #4
	va_start(ap, fmt);
   13980:	9101      	str	r1, [sp, #4]
		vprintk(fmt, ap);
   13982:	f7fc ff5b 	bl	1083c <vprintk>
}
   13986:	b003      	add	sp, #12
   13988:	f85d eb04 	ldr.w	lr, [sp], #4
   1398c:	b004      	add	sp, #16
   1398e:	4770      	bx	lr

00013990 <z_thread_entry>:
 * This routine does not return, and is marked as such so the compiler won't
 * generate preamble code that is only used by functions that actually return.
 */
FUNC_NORETURN void z_thread_entry(k_thread_entry_t entry,
				 void *p1, void *p2, void *p3)
{
   13990:	4604      	mov	r4, r0
   13992:	b508      	push	{r3, lr}
   13994:	4608      	mov	r0, r1
   13996:	4611      	mov	r1, r2
	entry(p1, p2, p3);
   13998:	461a      	mov	r2, r3
   1399a:	47a0      	blx	r4
	return z_impl_k_current_get();
   1399c:	f7fe fdb6 	bl	1250c <z_impl_k_current_get>
	z_impl_k_thread_abort(thread);
   139a0:	f7fd fda8 	bl	114f4 <z_impl_k_thread_abort>

000139a4 <_ConfigAbsSyms>:
GEN_ABSOLUTE_SYM(CONFIG_OUTPUT_DISASSEMBLY, 1);
GEN_ABSOLUTE_SYM(CONFIG_OUTPUT_PRINT_MEMORY_USAGE, 1);
GEN_ABSOLUTE_SYM(CONFIG_BUILD_OUTPUT_BIN, 1);
GEN_ABSOLUTE_SYM(CONFIG_COMPAT_INCLUDES, 1);

GEN_ABS_SYM_END
   139a4:	4770      	bx	lr

000139a6 <z_platform_init>:
	nrfx_coredep_delay_us(time_us);
}

void z_platform_init(void)
{
	SystemInit();
   139a6:	f7fe b83f 	b.w	11a28 <SystemInit>

000139aa <get_status>:
	if (data->started) {
   139aa:	220c      	movs	r2, #12
	data = get_sub_data(dev, type);
   139ac:	6883      	ldr	r3, [r0, #8]
	return &data->subsys[type];
   139ae:	b2c9      	uxtb	r1, r1
	if (data->started) {
   139b0:	fb02 3101 	mla	r1, r2, r1, r3
   139b4:	7a4b      	ldrb	r3, [r1, #9]
   139b6:	b923      	cbnz	r3, 139c2 <get_status+0x18>
	if (data->ref > 0) {
   139b8:	7a08      	ldrb	r0, [r1, #8]
		return CLOCK_CONTROL_STATUS_ON;
   139ba:	fab0 f080 	clz	r0, r0
   139be:	0940      	lsrs	r0, r0, #5
   139c0:	4770      	bx	lr
   139c2:	2002      	movs	r0, #2
}
   139c4:	4770      	bx	lr

000139c6 <clock_stop>:
	const struct nrf_clock_control_config *config =
   139c6:	6802      	ldr	r2, [r0, #0]
{
   139c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	const struct nrf_clock_control_config *config =
   139ca:	6897      	ldr	r7, [r2, #8]
	return &config->subsys[type];
   139cc:	b2cc      	uxtb	r4, r1
	data = get_sub_data(dev, type);
   139ce:	6886      	ldr	r6, [r0, #8]
   139d0:	f04f 0320 	mov.w	r3, #32
   139d4:	f3ef 8511 	mrs	r5, BASEPRI
   139d8:	f383 8811 	msr	BASEPRI, r3
   139dc:	f3bf 8f6f 	isb	sy
	if (data->ref == 0) {
   139e0:	220c      	movs	r2, #12
   139e2:	4362      	muls	r2, r4
   139e4:	18b1      	adds	r1, r6, r2
   139e6:	7a0b      	ldrb	r3, [r1, #8]
   139e8:	b31b      	cbz	r3, 13a32 <clock_stop+0x6c>
	data->ref--;
   139ea:	3b01      	subs	r3, #1
   139ec:	b2db      	uxtb	r3, r3
   139ee:	720b      	strb	r3, [r1, #8]
	if (data->ref == 0) {
   139f0:	bb13      	cbnz	r3, 13a38 <clock_stop+0x72>
 *
 * @param list A pointer on the list to initialize
 */
static inline void sys_slist_init(sys_slist_t *list)
{
	list->head = NULL;
   139f2:	50b3      	str	r3, [r6, r2]
		do_stop =  (config->stop_handler) ?
   139f4:	443a      	add	r2, r7
	list->tail = NULL;
   139f6:	604b      	str	r3, [r1, #4]
   139f8:	6853      	ldr	r3, [r2, #4]
				config->stop_handler(dev) : true;
   139fa:	b9b3      	cbnz	r3, 13a2a <clock_stop+0x64>
			nrf_clock_task_trigger(NRF_CLOCK, config->stop_tsk);
   139fc:	230c      	movs	r3, #12
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   139fe:	2101      	movs	r1, #1
   13a00:	fb03 7304 	mla	r3, r3, r4, r7
   13a04:	7ada      	ldrb	r2, [r3, #11]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   13a06:	891b      	ldrh	r3, [r3, #8]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   13a08:	f102 2250 	add.w	r2, r2, #1342197760	; 0x50005000
   13a0c:	6011      	str	r1, [r2, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   13a0e:	2200      	movs	r2, #0
   13a10:	f103 2350 	add.w	r3, r3, #1342197760	; 0x50005000
   13a14:	601a      	str	r2, [r3, #0]
		data->started = false;
   13a16:	210c      	movs	r1, #12
   13a18:	2000      	movs	r0, #0
   13a1a:	fb01 6404 	mla	r4, r1, r4, r6
   13a1e:	7260      	strb	r0, [r4, #9]
	__asm__ volatile(
   13a20:	f385 8811 	msr	BASEPRI, r5
   13a24:	f3bf 8f6f 	isb	sy
}
   13a28:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
				config->stop_handler(dev) : true;
   13a2a:	4798      	blx	r3
   13a2c:	2800      	cmp	r0, #0
   13a2e:	d1e5      	bne.n	139fc <clock_stop+0x36>
   13a30:	e7f1      	b.n	13a16 <clock_stop+0x50>
		err = -EALREADY;
   13a32:	f06f 0044 	mvn.w	r0, #68	; 0x44
   13a36:	e7f3      	b.n	13a20 <clock_stop+0x5a>
	int err = 0;
   13a38:	2000      	movs	r0, #0
   13a3a:	e7f1      	b.n	13a20 <clock_stop+0x5a>

00013a3c <clkstarted_handle>:
{
   13a3c:	b538      	push	{r3, r4, r5, lr}
	sub_data->started = true;
   13a3e:	240c      	movs	r4, #12
	struct nrf_clock_control_sub_data *sub_data = get_sub_data(dev, type);
   13a40:	6883      	ldr	r3, [r0, #8]
{
   13a42:	4605      	mov	r5, r0
	sub_data->started = true;
   13a44:	fb04 3401 	mla	r4, r4, r1, r3
   13a48:	2301      	movs	r3, #1
   13a4a:	7263      	strb	r3, [r4, #9]
	__asm__ volatile(
   13a4c:	f04f 0320 	mov.w	r3, #32
   13a50:	f3ef 8111 	mrs	r1, BASEPRI
   13a54:	f383 8811 	msr	BASEPRI, r3
   13a58:	f3bf 8f6f 	isb	sy
 *
 * @return a boolean, true if it's empty, false otherwise
 */
static inline bool sys_slist_is_empty(sys_slist_t *list);

Z_GENLIST_IS_EMPTY(slist)
   13a5c:	6823      	ldr	r3, [r4, #0]
 *
 * @return A pointer to the first node of the list (or NULL if empty)
 */
static inline sys_snode_t *sys_slist_get(sys_slist_t *list);

Z_GENLIST_GET(slist, snode)
   13a5e:	b12b      	cbz	r3, 13a6c <clkstarted_handle+0x30>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   13a60:	6860      	ldr	r0, [r4, #4]
   13a62:	681a      	ldr	r2, [r3, #0]
   13a64:	4283      	cmp	r3, r0
	list->head = node;
   13a66:	6022      	str	r2, [r4, #0]
	list->tail = node;
   13a68:	bf08      	it	eq
   13a6a:	6062      	streq	r2, [r4, #4]
	__asm__ volatile(
   13a6c:	f381 8811 	msr	BASEPRI, r1
   13a70:	f3bf 8f6f 	isb	sy
	while ((async_data = list_get(&sub_data->list)) != NULL) {
   13a74:	b903      	cbnz	r3, 13a78 <clkstarted_handle+0x3c>
}
   13a76:	bd38      	pop	{r3, r4, r5, pc}
		async_data->cb(dev, async_data->user_data);
   13a78:	e9d3 2101 	ldrd	r2, r1, [r3, #4]
   13a7c:	4628      	mov	r0, r5
   13a7e:	4790      	blx	r2
   13a80:	e7e4      	b.n	13a4c <clkstarted_handle+0x10>

00013a82 <clock_async_start>:
	const struct nrf_clock_control_config *config =
   13a82:	6803      	ldr	r3, [r0, #0]
{
   13a84:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	clk_data = get_sub_data(dev, type);
   13a88:	f8d0 c008 	ldr.w	ip, [r0, #8]
{
   13a8c:	4605      	mov	r5, r0
	const struct nrf_clock_control_config *config =
   13a8e:	689f      	ldr	r7, [r3, #8]
	return &config->subsys[type];
   13a90:	b2ce      	uxtb	r6, r1
	if ((data != NULL)
   13a92:	b14a      	cbz	r2, 13aa8 <clock_async_start+0x26>
	sys_snode_t *item = sys_slist_peek_head(list);
   13a94:	230c      	movs	r3, #12
   13a96:	4373      	muls	r3, r6
   13a98:	f85c 3003 	ldr.w	r3, [ip, r3]
		if (item == node) {
   13a9c:	429a      	cmp	r2, r3
   13a9e:	d05c      	beq.n	13b5a <clock_async_start+0xd8>
Z_GENLIST_PEEK_NEXT(slist, snode)
   13aa0:	b113      	cbz	r3, 13aa8 <clock_async_start+0x26>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   13aa2:	681b      	ldr	r3, [r3, #0]
	} while (item);
   13aa4:	2b00      	cmp	r3, #0
   13aa6:	d1f9      	bne.n	13a9c <clock_async_start+0x1a>
	__asm__ volatile(
   13aa8:	f04f 0320 	mov.w	r3, #32
   13aac:	f3ef 8011 	mrs	r0, BASEPRI
   13ab0:	f383 8811 	msr	BASEPRI, r3
   13ab4:	f3bf 8f6f 	isb	sy
	ref = ++clk_data->ref;
   13ab8:	210c      	movs	r1, #12
   13aba:	4371      	muls	r1, r6
   13abc:	eb0c 0301 	add.w	r3, ip, r1
   13ac0:	7a1c      	ldrb	r4, [r3, #8]
   13ac2:	3401      	adds	r4, #1
   13ac4:	b2e4      	uxtb	r4, r4
   13ac6:	721c      	strb	r4, [r3, #8]
	__asm__ volatile(
   13ac8:	f380 8811 	msr	BASEPRI, r0
   13acc:	f3bf 8f6f 	isb	sy
	if (data) {
   13ad0:	b332      	cbz	r2, 13b20 <clock_async_start+0x9e>
    p_reg->INTENCLR = mask;
   13ad2:	f04f 2050 	mov.w	r0, #1342197760	; 0x50005000
   13ad6:	f04f 0e03 	mov.w	lr, #3
   13ada:	f8c0 e308 	str.w	lr, [r0, #776]	; 0x308
		already_started = clk_data->started;
   13ade:	7a58      	ldrb	r0, [r3, #9]
		if (!already_started) {
   13ae0:	b9a0      	cbnz	r0, 13b0c <clock_async_start+0x8a>
	__asm__ volatile(
   13ae2:	f04f 0e20 	mov.w	lr, #32
   13ae6:	f3ef 8811 	mrs	r8, BASEPRI
   13aea:	f38e 8811 	msr	BASEPRI, lr
   13aee:	f3bf 8f6f 	isb	sy
	parent->next = child;
   13af2:	6010      	str	r0, [r2, #0]
Z_GENLIST_APPEND(slist, snode)
   13af4:	f8d3 e004 	ldr.w	lr, [r3, #4]
   13af8:	f1be 0f00 	cmp.w	lr, #0
   13afc:	d120      	bne.n	13b40 <clock_async_start+0xbe>
	list->tail = node;
   13afe:	605a      	str	r2, [r3, #4]
	list->head = node;
   13b00:	f84c 2001 	str.w	r2, [ip, r1]
	__asm__ volatile(
   13b04:	f388 8811 	msr	BASEPRI, r8
   13b08:	f3bf 8f6f 	isb	sy
    p_reg->INTENSET = mask;
   13b0c:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
   13b10:	2103      	movs	r1, #3
   13b12:	f8c3 1304 	str.w	r1, [r3, #772]	; 0x304
		if (already_started) {
   13b16:	b118      	cbz	r0, 13b20 <clock_async_start+0x9e>
			data->cb(dev, data->user_data);
   13b18:	e9d2 3101 	ldrd	r3, r1, [r2, #4]
   13b1c:	4628      	mov	r0, r5
   13b1e:	4798      	blx	r3
	if (ref == 1) {
   13b20:	2c01      	cmp	r4, #1
   13b22:	d10b      	bne.n	13b3c <clock_async_start+0xba>
		do_start =  (config->start_handler) ?
   13b24:	230c      	movs	r3, #12
   13b26:	4373      	muls	r3, r6
   13b28:	58fb      	ldr	r3, [r7, r3]
				config->start_handler(dev) : true;
   13b2a:	b96b      	cbnz	r3, 13b48 <clock_async_start+0xc6>
			nrf_clock_task_trigger(NRF_CLOCK,
   13b2c:	230c      	movs	r3, #12
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   13b2e:	2201      	movs	r2, #1
   13b30:	fb03 7606 	mla	r6, r3, r6, r7
   13b34:	7ab3      	ldrb	r3, [r6, #10]
   13b36:	f103 2350 	add.w	r3, r3, #1342197760	; 0x50005000
   13b3a:	601a      	str	r2, [r3, #0]
	return 0;
   13b3c:	2000      	movs	r0, #0
   13b3e:	e00e      	b.n	13b5e <clock_async_start+0xdc>
	parent->next = child;
   13b40:	f8ce 2000 	str.w	r2, [lr]
	list->tail = node;
   13b44:	605a      	str	r2, [r3, #4]
   13b46:	e7dd      	b.n	13b04 <clock_async_start+0x82>
				config->start_handler(dev) : true;
   13b48:	4628      	mov	r0, r5
   13b4a:	4798      	blx	r3
   13b4c:	2800      	cmp	r0, #0
   13b4e:	d1ed      	bne.n	13b2c <clock_async_start+0xaa>
			clkstarted_handle(dev, type);
   13b50:	4631      	mov	r1, r6
   13b52:	4628      	mov	r0, r5
   13b54:	f7ff ff72 	bl	13a3c <clkstarted_handle>
   13b58:	e7f0      	b.n	13b3c <clock_async_start+0xba>
		return -EBUSY;
   13b5a:	f06f 000f 	mvn.w	r0, #15
}
   13b5e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00013b62 <clock_start>:
	return clock_async_start(dev, sub_system, NULL);
   13b62:	2200      	movs	r2, #0
   13b64:	f7ff bf8d 	b.w	13a82 <clock_async_start>

00013b68 <clk_init>:
{
   13b68:	b510      	push	{r4, lr}
	IRQ_CONNECT(DT_INST_0_NORDIC_NRF_CLOCK_IRQ_0,
   13b6a:	2200      	movs	r2, #0
{
   13b6c:	4604      	mov	r4, r0
	IRQ_CONNECT(DT_INST_0_NORDIC_NRF_CLOCK_IRQ_0,
   13b6e:	2101      	movs	r1, #1
   13b70:	2005      	movs	r0, #5
   13b72:	f7fd facb 	bl	1110c <z_arm_irq_priority_set>
	irq_enable(DT_INST_0_NORDIC_NRF_CLOCK_IRQ_0);
   13b76:	2005      	movs	r0, #5
   13b78:	f7fd fab8 	bl	110ec <arch_irq_enable>
    return false;
}

NRF_STATIC_INLINE void nrf_clock_lf_src_set(NRF_CLOCK_Type * p_reg, nrf_clock_lfclk_t source)
{
    p_reg->LFCLKSRC = (uint32_t)(source);
   13b7c:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
   13b80:	2202      	movs	r2, #2
   13b82:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    p_reg->INTENSET = mask;
   13b86:	2203      	movs	r2, #3
	list->head = NULL;
   13b88:	2000      	movs	r0, #0
   13b8a:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
		sys_slist_init(&(get_sub_data(dev, i)->list));
   13b8e:	68a3      	ldr	r3, [r4, #8]
	list->tail = NULL;
   13b90:	e9c3 0000 	strd	r0, r0, [r3]
   13b94:	68a3      	ldr	r3, [r4, #8]
   13b96:	e9c3 0003 	strd	r0, r0, [r3, #12]
}
   13b9a:	bd10      	pop	{r4, pc}

00013b9c <z_clock_isr>:
/* Weak-linked noop defaults for optional driver interfaces: */

void __weak z_clock_isr(void *arg)
{
	__ASSERT_NO_MSG(false);
}
   13b9c:	4770      	bx	lr

00013b9e <z_clock_idle_exit>:
{
}

void __weak z_clock_idle_exit(void)
{
}
   13b9e:	4770      	bx	lr

00013ba0 <spm_secure_services_init>:
	mbedtls_platform_context platform_ctx = {0};
   13ba0:	2300      	movs	r3, #0
{
   13ba2:	b507      	push	{r0, r1, r2, lr}
	err = mbedtls_platform_setup(&platform_ctx);
   13ba4:	a801      	add	r0, sp, #4
	mbedtls_platform_context platform_ctx = {0};
   13ba6:	f88d 3004 	strb.w	r3, [sp, #4]
	err = mbedtls_platform_setup(&platform_ctx);
   13baa:	f7fe ff3f 	bl	12a2c <mbedtls_platform_setup>
}
   13bae:	b003      	add	sp, #12
   13bb0:	f85d fb04 	ldr.w	pc, [sp], #4

00013bb4 <__acle_se_spm_request_random_number>:
	if (len != MBEDTLS_ENTROPY_MAX_GATHER) {
   13bb4:	2990      	cmp	r1, #144	; 0x90
{
   13bb6:	b508      	push	{r3, lr}
   13bb8:	4613      	mov	r3, r2
	if (len != MBEDTLS_ENTROPY_MAX_GATHER) {
   13bba:	d139      	bne.n	13c30 <__acle_se_spm_request_random_number+0x7c>
	err = mbedtls_hardware_poll(NULL, output, len, olen);
   13bbc:	460a      	mov	r2, r1
   13bbe:	4601      	mov	r1, r0
   13bc0:	2000      	movs	r0, #0
   13bc2:	f7fe ff3f 	bl	12a44 <mbedtls_hardware_poll>
}
   13bc6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   13bca:	4671      	mov	r1, lr
   13bcc:	4672      	mov	r2, lr
   13bce:	4673      	mov	r3, lr
   13bd0:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
   13bd4:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
   13bd8:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
   13bdc:	eef7 1a00 	vmov.f32	s3, #112	; 0x3f800000  1.0
   13be0:	eeb7 2a00 	vmov.f32	s4, #112	; 0x3f800000  1.0
   13be4:	eef7 2a00 	vmov.f32	s5, #112	; 0x3f800000  1.0
   13be8:	eeb7 3a00 	vmov.f32	s6, #112	; 0x3f800000  1.0
   13bec:	eef7 3a00 	vmov.f32	s7, #112	; 0x3f800000  1.0
   13bf0:	eeb7 4a00 	vmov.f32	s8, #112	; 0x3f800000  1.0
   13bf4:	eef7 4a00 	vmov.f32	s9, #112	; 0x3f800000  1.0
   13bf8:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
   13bfc:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
   13c00:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
   13c04:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
   13c08:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
   13c0c:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
   13c10:	f38e 8c00 	msr	CPSR_fs, lr
   13c14:	b410      	push	{r4}
   13c16:	eef1 ca10 	vmrs	ip, fpscr
   13c1a:	f64f 7460 	movw	r4, #65376	; 0xff60
   13c1e:	f6c0 74ff 	movt	r4, #4095	; 0xfff
   13c22:	ea0c 0c04 	and.w	ip, ip, r4
   13c26:	eee1 ca10 	vmsr	fpscr, ip
   13c2a:	bc10      	pop	{r4}
   13c2c:	46f4      	mov	ip, lr
   13c2e:	4774      	bxns	lr
		return -EINVAL;
   13c30:	f06f 0015 	mvn.w	r0, #21
   13c34:	e7c7      	b.n	13bc6 <__acle_se_spm_request_random_number+0x12>

00013c36 <abort_function>:
	while(1);
   13c36:	e7fe      	b.n	13c36 <abort_function>

00013c38 <z_irq_spurious>:
 * @return N/A
 */
void z_irq_spurious(void *unused)
{
	ARG_UNUSED(unused);
	z_arm_reserved();
   13c38:	f7fd bad0 	b.w	111dc <z_arm_bus_fault>

00013c3c <irq_target_state_set>:
 *
 * @return N/A
 */
void irq_target_state_set(unsigned int irq, int secure_state)
{
	if (secure_state) {
   13c3c:	b243      	sxtb	r3, r0
   13c3e:	b1a9      	cbz	r1, 13c6c <irq_target_state_set+0x30>
  if ((int32_t)(IRQn) >= 0)
   13c40:	2b00      	cmp	r3, #0
   13c42:	db12      	blt.n	13c6a <irq_target_state_set+0x2e>
    NVIC->ITNS[(((uint32_t)IRQn) >> 5UL)] &= ~((uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL)));
   13c44:	2101      	movs	r1, #1
   13c46:	095b      	lsrs	r3, r3, #5
   13c48:	009b      	lsls	r3, r3, #2
   13c4a:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
   13c4e:	f503 4361 	add.w	r3, r3, #57600	; 0xe100
   13c52:	f8d3 2280 	ldr.w	r2, [r3, #640]	; 0x280
   13c56:	f000 001f 	and.w	r0, r0, #31
   13c5a:	fa01 f000 	lsl.w	r0, r1, r0
   13c5e:	ea22 0200 	bic.w	r2, r2, r0
   13c62:	f8c3 2280 	str.w	r2, [r3, #640]	; 0x280
    return((uint32_t)(((NVIC->ITNS[(((uint32_t)IRQn) >> 5UL)] & (1UL << (((uint32_t)IRQn) & 0x1FUL))) != 0UL) ? 1UL : 0UL));
   13c66:	f8d3 3280 	ldr.w	r3, [r3, #640]	; 0x280
		/* Set target state to Non-Secure */
		if (NVIC_SetTargetState(irq) != 1) {
			__ASSERT(0, "NVIC SetTargetState error");
		}
	}
}
   13c6a:	4770      	bx	lr
  if ((int32_t)(IRQn) >= 0)
   13c6c:	2b00      	cmp	r3, #0
   13c6e:	dbfc      	blt.n	13c6a <irq_target_state_set+0x2e>
    NVIC->ITNS[(((uint32_t)IRQn) >> 5UL)] |=  ((uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL)));
   13c70:	2201      	movs	r2, #1
   13c72:	095b      	lsrs	r3, r3, #5
   13c74:	009b      	lsls	r3, r3, #2
   13c76:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
   13c7a:	f503 4361 	add.w	r3, r3, #57600	; 0xe100
   13c7e:	f8d3 1280 	ldr.w	r1, [r3, #640]	; 0x280
   13c82:	f000 001f 	and.w	r0, r0, #31
   13c86:	fa02 f000 	lsl.w	r0, r2, r0
   13c8a:	4308      	orrs	r0, r1
   13c8c:	f8c3 0280 	str.w	r0, [r3, #640]	; 0x280
   13c90:	e7e9      	b.n	13c66 <irq_target_state_set+0x2a>

00013c92 <z_arm_fatal_error>:
{

	if (esf != NULL) {
		esf_dump(esf);
	}
	z_fatal_error(reason, esf);
   13c92:	f000 b8ca 	b.w	13e2a <z_fatal_error>

00013c96 <z_do_kernel_oops>:
 *   fault handler will executed insted of the SVC.
 *
 * @param esf exception frame
 */
void z_do_kernel_oops(const z_arch_esf_t *esf)
{
   13c96:	4601      	mov	r1, r0
	z_fatal_error(reason, esf);
   13c98:	6800      	ldr	r0, [r0, #0]
   13c9a:	f000 b8c6 	b.w	13e2a <z_fatal_error>

00013c9e <z_arm_nmi>:
 *
 * @return N/A
 */

void z_arm_nmi(void)
{
   13c9e:	b508      	push	{r3, lr}
	handler();
   13ca0:	f7fd faa6 	bl	111f0 <z_SysNmiOnReset>
	z_arm_exc_exit();
}
   13ca4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_arm_exc_exit();
   13ca8:	f7fd b9be 	b.w	11028 <z_arm_exc_exit>

00013cac <z_arm_configure_dynamic_mpu_regions>:
 *
 * For some MPU architectures, such as the unmodified ARMv8-M MPU,
 * the function must execute with MPU enabled.
 */
void z_arm_configure_dynamic_mpu_regions(struct k_thread *thread)
{
   13cac:	b507      	push	{r0, r1, r2, lr}

	region_num++;
#endif /* CONFIG_MPU_STACK_GUARD */

	/* Configure the dynamic MPU regions */
	arm_core_mpu_configure_dynamic_mpu_regions(
   13cae:	2100      	movs	r1, #0
   13cb0:	a801      	add	r0, sp, #4
   13cb2:	f7fd fdb7 	bl	11824 <arm_core_mpu_configure_dynamic_mpu_regions>
		(const struct k_mem_partition **)dynamic_regions,
		region_num);
}
   13cb6:	b003      	add	sp, #12
   13cb8:	f85d fb04 	ldr.w	pc, [sp], #4

00013cbc <mpu_configure_region>:
{
   13cbc:	b530      	push	{r4, r5, lr}
	region_conf.base = new_region->start;
   13cbe:	680b      	ldr	r3, [r1, #0]
{
   13cc0:	b085      	sub	sp, #20
	get_region_attr_from_k_mem_partition_info(&region_conf.attr,
   13cc2:	684c      	ldr	r4, [r1, #4]
	p_attr->rbar = attr->rbar &
   13cc4:	f89d 2008 	ldrb.w	r2, [sp, #8]
   13cc8:	890d      	ldrh	r5, [r1, #8]
	p_attr->r_limit = REGION_LIMIT_ADDR(base, size);
   13cca:	3c01      	subs	r4, #1
	region_conf.base = new_region->start;
   13ccc:	9300      	str	r3, [sp, #0]
	p_attr->mair_idx = attr->mair_idx;
   13cce:	8949      	ldrh	r1, [r1, #10]
	p_attr->r_limit = REGION_LIMIT_ADDR(base, size);
   13cd0:	f023 031f 	bic.w	r3, r3, #31
   13cd4:	4423      	add	r3, r4
	p_attr->rbar = attr->rbar &
   13cd6:	f365 0204 	bfi	r2, r5, #0, #5
	p_attr->mair_idx = attr->mair_idx;
   13cda:	f361 1247 	bfi	r2, r1, #5, #3
	p_attr->r_limit = REGION_LIMIT_ADDR(base, size);
   13cde:	f023 031f 	bic.w	r3, r3, #31
	if (index > (get_num_regions() - 1)) {
   13ce2:	280f      	cmp	r0, #15
	p_attr->mair_idx = attr->mair_idx;
   13ce4:	f88d 2008 	strb.w	r2, [sp, #8]
	p_attr->r_limit = REGION_LIMIT_ADDR(base, size);
   13ce8:	9303      	str	r3, [sp, #12]
   13cea:	4604      	mov	r4, r0
   13cec:	d805      	bhi.n	13cfa <mpu_configure_region+0x3e>
	region_init(index, region_conf);
   13cee:	4669      	mov	r1, sp
   13cf0:	f7fd fc50 	bl	11594 <region_init>
}
   13cf4:	4620      	mov	r0, r4
   13cf6:	b005      	add	sp, #20
   13cf8:	bd30      	pop	{r4, r5, pc}
		return -EINVAL;
   13cfa:	f06f 0415 	mvn.w	r4, #21
	return region_allocate_and_init(index,
   13cfe:	e7f9      	b.n	13cf4 <mpu_configure_region+0x38>

00013d00 <arm_cmse_mpu_region_get>:
__CMSE_TT_ASM ()

__extension__ static __inline __attribute__ ((__always_inline__))
cmse_address_info_t
cmse_TT (void *__p)
__CMSE_TT_ASM ()
   13d00:	e840 f300 	tt	r3, r0

int arm_cmse_mpu_region_get(u32_t addr)
{
	cmse_address_info_t addr_info =	cmse_TT((void *)addr);

	if (addr_info.flags.mpu_region_valid) {
   13d04:	f413 3f80 	tst.w	r3, #65536	; 0x10000
   13d08:	b2d8      	uxtb	r0, r3
		return addr_info.flags.mpu_region;
	}

	return -EINVAL;
}
   13d0a:	bf08      	it	eq
   13d0c:	f06f 0015 	mvneq.w	r0, #21
   13d10:	4770      	bx	lr

00013d12 <strcmp>:
 * @return negative # if <s1> < <s2>, 0 if <s1> == <s2>, else positive #
 */

int strcmp(const char *s1, const char *s2)
{
	while ((*s1 == *s2) && (*s1 != '\0')) {
   13d12:	3801      	subs	r0, #1
   13d14:	3901      	subs	r1, #1
   13d16:	f810 3f01 	ldrb.w	r3, [r0, #1]!
   13d1a:	f811 2f01 	ldrb.w	r2, [r1, #1]!
   13d1e:	4293      	cmp	r3, r2
   13d20:	d101      	bne.n	13d26 <strcmp+0x14>
   13d22:	2b00      	cmp	r3, #0
   13d24:	d1f7      	bne.n	13d16 <strcmp+0x4>
		s1++;
		s2++;
	}

	return *s1 - *s2;
}
   13d26:	1a98      	subs	r0, r3, r2
   13d28:	4770      	bx	lr

00013d2a <memcmp>:
 * @brief Compare two memory areas
 *
 * @return negative # if <m1> < <m2>, 0 if <m1> == <m2>, else positive #
 */
int memcmp(const void *m1, const void *m2, size_t n)
{
   13d2a:	b510      	push	{r4, lr}
	const char *c1 = m1;
	const char *c2 = m2;

	if (!n) {
   13d2c:	b15a      	cbz	r2, 13d46 <memcmp+0x1c>
   13d2e:	3901      	subs	r1, #1
   13d30:	1884      	adds	r4, r0, r2
   13d32:	f810 2b01 	ldrb.w	r2, [r0], #1
   13d36:	f811 3f01 	ldrb.w	r3, [r1, #1]!
		return 0;
	}

	while ((--n > 0) && (*c1 == *c2)) {
   13d3a:	42a0      	cmp	r0, r4
   13d3c:	d001      	beq.n	13d42 <memcmp+0x18>
   13d3e:	429a      	cmp	r2, r3
   13d40:	d0f7      	beq.n	13d32 <memcmp+0x8>
		c1++;
		c2++;
	}

	return *c1 - *c2;
   13d42:	1ad0      	subs	r0, r2, r3
}
   13d44:	bd10      	pop	{r4, pc}
		return 0;
   13d46:	4610      	mov	r0, r2
   13d48:	e7fc      	b.n	13d44 <memcmp+0x1a>

00013d4a <memmove>:
void *memmove(void *d, const void *s, size_t n)
{
	char *dest = d;
	const char *src  = s;

	if ((size_t) (dest - src) < n) {
   13d4a:	1a43      	subs	r3, r0, r1
   13d4c:	4293      	cmp	r3, r2
{
   13d4e:	b510      	push	{r4, lr}
   13d50:	eb00 0302 	add.w	r3, r0, r2
	if ((size_t) (dest - src) < n) {
   13d54:	d308      	bcc.n	13d68 <memmove+0x1e>
	char *dest = d;
   13d56:	4602      	mov	r2, r0
   13d58:	3901      	subs	r1, #1
			n--;
			dest[n] = src[n];
		}
	} else {
		/* It is safe to perform a forward-copy */
		while (n > 0) {
   13d5a:	429a      	cmp	r2, r3
   13d5c:	d00b      	beq.n	13d76 <memmove+0x2c>
			*dest = *src;
   13d5e:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   13d62:	f802 4b01 	strb.w	r4, [r2], #1
			dest++;
			src++;
			n--;
   13d66:	e7f8      	b.n	13d5a <memmove+0x10>
   13d68:	440a      	add	r2, r1
			dest[n] = src[n];
   13d6a:	f812 4d01 	ldrb.w	r4, [r2, #-1]!
		while (n > 0) {
   13d6e:	428a      	cmp	r2, r1
			dest[n] = src[n];
   13d70:	f803 4d01 	strb.w	r4, [r3, #-1]!
		while (n > 0) {
   13d74:	d1f9      	bne.n	13d6a <memmove+0x20>
		}
	}

	return d;
}
   13d76:	bd10      	pop	{r4, pc}

00013d78 <memcpy>:
 *
 * @return pointer to start of destination buffer
 */

void *memcpy(void *_MLIBC_RESTRICT d, const void *_MLIBC_RESTRICT s, size_t n)
{
   13d78:	b5f0      	push	{r4, r5, r6, r7, lr}

	unsigned char *d_byte = (unsigned char *)d;
	const unsigned char *s_byte = (const unsigned char *)s;
	const uintptr_t mask = sizeof(mem_word_t) - 1;

	if ((((uintptr_t)d ^ (uintptr_t)s_byte) & mask) == 0) {
   13d7a:	ea81 0400 	eor.w	r4, r1, r0
   13d7e:	07a5      	lsls	r5, r4, #30
   13d80:	4603      	mov	r3, r0
   13d82:	d00b      	beq.n	13d9c <memcpy+0x24>
   13d84:	3b01      	subs	r3, #1
   13d86:	440a      	add	r2, r1
		s_byte = (unsigned char *)s_word;
	}

	/* do byte-sized copying until finished */

	while (n > 0) {
   13d88:	4291      	cmp	r1, r2
   13d8a:	d11a      	bne.n	13dc2 <memcpy+0x4a>
		*(d_byte++) = *(s_byte++);
		n--;
	}

	return d;
}
   13d8c:	bdf0      	pop	{r4, r5, r6, r7, pc}
			if (n == 0) {
   13d8e:	2a00      	cmp	r2, #0
   13d90:	d0fc      	beq.n	13d8c <memcpy+0x14>
			*(d_byte++) = *(s_byte++);
   13d92:	f811 4b01 	ldrb.w	r4, [r1], #1
			n--;
   13d96:	3a01      	subs	r2, #1
			*(d_byte++) = *(s_byte++);
   13d98:	f803 4b01 	strb.w	r4, [r3], #1
		while (((uintptr_t)d_byte) & mask) {
   13d9c:	079c      	lsls	r4, r3, #30
   13d9e:	d1f6      	bne.n	13d8e <memcpy+0x16>
   13da0:	0895      	lsrs	r5, r2, #2
   13da2:	00ac      	lsls	r4, r5, #2
   13da4:	1f1e      	subs	r6, r3, #4
   13da6:	190f      	adds	r7, r1, r4
		while (n >= sizeof(mem_word_t)) {
   13da8:	42b9      	cmp	r1, r7
   13daa:	d105      	bne.n	13db8 <memcpy+0x40>
   13dac:	f06f 0603 	mvn.w	r6, #3
   13db0:	4423      	add	r3, r4
   13db2:	fb06 2205 	mla	r2, r6, r5, r2
   13db6:	e7e5      	b.n	13d84 <memcpy+0xc>
			*(d_word++) = *(s_word++);
   13db8:	f851 cb04 	ldr.w	ip, [r1], #4
   13dbc:	f846 cf04 	str.w	ip, [r6, #4]!
			n -= sizeof(mem_word_t);
   13dc0:	e7f2      	b.n	13da8 <memcpy+0x30>
		*(d_byte++) = *(s_byte++);
   13dc2:	f811 4b01 	ldrb.w	r4, [r1], #1
   13dc6:	f803 4f01 	strb.w	r4, [r3, #1]!
		n--;
   13dca:	e7dd      	b.n	13d88 <memcpy+0x10>

00013dcc <memset>:

void *memset(void *buf, int c, size_t n)
{
	/* do byte-sized initialization until word-aligned or finished */

	unsigned char *d_byte = (unsigned char *)buf;
   13dcc:	4603      	mov	r3, r0
{
   13dce:	b570      	push	{r4, r5, r6, lr}
	unsigned char c_byte = (unsigned char)c;
   13dd0:	b2c9      	uxtb	r1, r1

	while (((uintptr_t)d_byte) & (sizeof(mem_word_t) - 1)) {
   13dd2:	079c      	lsls	r4, r3, #30
   13dd4:	d110      	bne.n	13df8 <memset+0x2c>
	/* do word-sized initialization as long as possible */

	mem_word_t *d_word = (mem_word_t *)d_byte;
	mem_word_t c_word = (mem_word_t)c_byte;

	c_word |= c_word << 8;
   13dd6:	ea41 2401 	orr.w	r4, r1, r1, lsl #8
	c_word |= c_word << 16;
   13dda:	ea44 4504 	orr.w	r5, r4, r4, lsl #16
#if Z_MEM_WORD_T_WIDTH > 32
	c_word |= c_word << 32;
#endif

	while (n >= sizeof(mem_word_t)) {
   13dde:	0894      	lsrs	r4, r2, #2
   13de0:	eb03 0684 	add.w	r6, r3, r4, lsl #2
   13de4:	42b3      	cmp	r3, r6
   13de6:	d10d      	bne.n	13e04 <memset+0x38>
   13de8:	f06f 0503 	mvn.w	r5, #3
   13dec:	fb05 2404 	mla	r4, r5, r4, r2
   13df0:	441c      	add	r4, r3

	/* do byte-sized initialization until finished */

	d_byte = (unsigned char *)d_word;

	while (n > 0) {
   13df2:	42a3      	cmp	r3, r4
   13df4:	d109      	bne.n	13e0a <memset+0x3e>
		*(d_byte++) = c_byte;
		n--;
	}

	return buf;
}
   13df6:	bd70      	pop	{r4, r5, r6, pc}
		if (n == 0) {
   13df8:	2a00      	cmp	r2, #0
   13dfa:	d0fc      	beq.n	13df6 <memset+0x2a>
		*(d_byte++) = c_byte;
   13dfc:	f803 1b01 	strb.w	r1, [r3], #1
		n--;
   13e00:	3a01      	subs	r2, #1
   13e02:	e7e6      	b.n	13dd2 <memset+0x6>
		*(d_word++) = c_word;
   13e04:	f843 5b04 	str.w	r5, [r3], #4
		n -= sizeof(mem_word_t);
   13e08:	e7ec      	b.n	13de4 <memset+0x18>
		*(d_byte++) = c_byte;
   13e0a:	f803 1b01 	strb.w	r1, [r3], #1
		n--;
   13e0e:	e7f0      	b.n	13df2 <memset+0x26>

00013e10 <k_sys_fatal_error_handler>:

extern void sys_arch_reboot(int type);

void k_sys_fatal_error_handler(unsigned int reason,
			       const z_arch_esf_t *esf)
{
   13e10:	b508      	push	{r3, lr}
	ARG_UNUSED(reason);

	LOG_PANIC();

	LOG_ERR("Resetting system");
	sys_arch_reboot(0);
   13e12:	2000      	movs	r0, #0
   13e14:	f7fd fb50 	bl	114b8 <sys_arch_reboot>

00013e18 <hw_cc310_init>:
#include <nrf_cc310_platform.h>

#if CONFIG_HW_CC310

static int hw_cc310_init(struct device *dev)
{
   13e18:	b508      	push	{r3, lr}
	int res;

	__ASSERT_NO_MSG(dev != NULL);

	/* Set the RTOS abort APIs */
	nrf_cc310_platform_abort_init();
   13e1a:	f7fd f86f 	bl	10efc <nrf_cc310_platform_abort_init>

	/* Set the RTOS mutex APIs */
	nrf_cc310_platform_mutex_init();
   13e1e:	f7fd f8ed 	bl	10ffc <nrf_cc310_platform_mutex_init>
	res = nrf_cc310_platform_init();
#else
	res = nrf_cc310_platform_init_no_rng();
#endif
	return res;
}
   13e22:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	res = nrf_cc310_platform_init_no_rng();
   13e26:	f7fe bec5 	b.w	12bb4 <nrf_cc310_platform_init_no_rng>

00013e2a <z_fatal_error>:
	return 0;
#endif
}

void z_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
   13e2a:	b570      	push	{r4, r5, r6, lr}
   13e2c:	4605      	mov	r5, r0
   13e2e:	460e      	mov	r6, r1
	return z_impl_k_current_get();
   13e30:	f7fe fb6c 	bl	1250c <z_impl_k_current_get>
#endif

	LOG_ERR("Current thread: %p (%s)", thread,
		log_strdup(thread_name_get(thread)));

	k_sys_fatal_error_handler(reason, esf);
   13e34:	4631      	mov	r1, r6
   13e36:	4604      	mov	r4, r0
   13e38:	4628      	mov	r0, r5
   13e3a:	f7ff ffe9 	bl	13e10 <k_sys_fatal_error_handler>
	z_impl_k_thread_abort(thread);
   13e3e:	4620      	mov	r0, r4
			}
#endif /*CONFIG_ARCH_HAS_NESTED_EXCEPTION_DETECTION */
	}

	k_thread_abort(thread);
}
   13e40:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   13e44:	f7fd bb56 	b.w	114f4 <z_impl_k_thread_abort>

00013e48 <z_sys_power_save_idle_exit>:
	z_clock_idle_exit();
   13e48:	f7ff bea9 	b.w	13b9e <z_clock_idle_exit>

00013e4c <k_mem_slab_init>:
{
   13e4c:	b530      	push	{r4, r5, lr}
	slab->num_used = 0U;
   13e4e:	2400      	movs	r4, #0
   13e50:	6184      	str	r4, [r0, #24]
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
   13e52:	ea41 0402 	orr.w	r4, r1, r2
   13e56:	f014 0403 	ands.w	r4, r4, #3
	slab->block_size = block_size;
   13e5a:	e9c0 3202 	strd	r3, r2, [r0, #8]
	slab->buffer = buffer;
   13e5e:	6101      	str	r1, [r0, #16]
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
   13e60:	d10c      	bne.n	13e7c <k_mem_slab_init+0x30>
	slab->free_list = NULL;
   13e62:	6144      	str	r4, [r0, #20]
	for (j = 0U; j < slab->num_blocks; j++) {
   13e64:	42a3      	cmp	r3, r4
   13e66:	d103      	bne.n	13e70 <k_mem_slab_init+0x24>
	list->tail = (sys_dnode_t *)list;
   13e68:	e9c0 0000 	strd	r0, r0, [r0]
   13e6c:	2000      	movs	r0, #0
}
   13e6e:	bd30      	pop	{r4, r5, pc}
		*(char **)p = slab->free_list;
   13e70:	6945      	ldr	r5, [r0, #20]
	for (j = 0U; j < slab->num_blocks; j++) {
   13e72:	3401      	adds	r4, #1
		*(char **)p = slab->free_list;
   13e74:	600d      	str	r5, [r1, #0]
		slab->free_list = p;
   13e76:	6141      	str	r1, [r0, #20]
		p += slab->block_size;
   13e78:	4411      	add	r1, r2
   13e7a:	e7f3      	b.n	13e64 <k_mem_slab_init+0x18>
		return -EINVAL;
   13e7c:	f06f 0015 	mvn.w	r0, #21
	return rc;
   13e80:	e7f5      	b.n	13e6e <k_mem_slab_init+0x22>

00013e82 <z_impl_k_mutex_init>:
{
   13e82:	4603      	mov	r3, r0
	mutex->owner = NULL;
   13e84:	2000      	movs	r0, #0
   13e86:	e9c3 3300 	strd	r3, r3, [r3]
	mutex->lock_count = 0U;
   13e8a:	e9c3 0002 	strd	r0, r0, [r3, #8]
}
   13e8e:	4770      	bx	lr

00013e90 <z_is_thread_ready>:
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
   13e90:	7b43      	ldrb	r3, [r0, #13]
   13e92:	06db      	lsls	r3, r3, #27
   13e94:	bf03      	ittte	eq
   13e96:	6980      	ldreq	r0, [r0, #24]
   13e98:	fab0 f080 	clzeq	r0, r0
   13e9c:	0940      	lsreq	r0, r0, #5
   13e9e:	2000      	movne	r0, #0
}
   13ea0:	4770      	bx	lr

00013ea2 <z_reschedule>:
	return arch_irq_unlocked(key) && !arch_is_in_isr();
   13ea2:	b921      	cbnz	r1, 13eae <z_reschedule+0xc>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   13ea4:	f3ef 8005 	mrs	r0, IPSR
   13ea8:	b908      	cbnz	r0, 13eae <z_reschedule+0xc>
   13eaa:	f7fd b8cb 	b.w	11044 <arch_swap>
   13eae:	f381 8811 	msr	BASEPRI, r1
   13eb2:	f3bf 8f6f 	isb	sy
}
   13eb6:	4770      	bx	lr

00013eb8 <z_reschedule_irqlock>:
	return arch_irq_unlocked(key) && !arch_is_in_isr();
   13eb8:	4603      	mov	r3, r0
   13eba:	b920      	cbnz	r0, 13ec6 <z_reschedule_irqlock+0xe>
   13ebc:	f3ef 8205 	mrs	r2, IPSR
   13ec0:	b90a      	cbnz	r2, 13ec6 <z_reschedule_irqlock+0xe>
   13ec2:	f7fd b8bf 	b.w	11044 <arch_swap>
   13ec6:	f383 8811 	msr	BASEPRI, r3
   13eca:	f3bf 8f6f 	isb	sy
}
   13ece:	4770      	bx	lr

00013ed0 <z_reschedule_unlocked>:
	__asm__ volatile(
   13ed0:	f04f 0320 	mov.w	r3, #32
   13ed4:	f3ef 8011 	mrs	r0, BASEPRI
   13ed8:	f383 8811 	msr	BASEPRI, r3
   13edc:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
   13ee0:	f7ff bfea 	b.w	13eb8 <z_reschedule_irqlock>

00013ee4 <z_priq_dumb_best>:
	return list->head == list;
   13ee4:	6803      	ldr	r3, [r0, #0]
}
   13ee6:	4298      	cmp	r0, r3
   13ee8:	bf14      	ite	ne
   13eea:	4618      	movne	r0, r3
   13eec:	2000      	moveq	r0, #0
   13eee:	4770      	bx	lr

00013ef0 <z_thread_timeout>:
	if (thread->base.pended_on != NULL) {
   13ef0:	f850 3c10 	ldr.w	r3, [r0, #-16]
{
   13ef4:	b570      	push	{r4, r5, r6, lr}
   13ef6:	4604      	mov	r4, r0
	struct k_thread *thread = CONTAINER_OF(timeout,
   13ef8:	f1a0 0518 	sub.w	r5, r0, #24
	if (thread->base.pended_on != NULL) {
   13efc:	b1cb      	cbz	r3, 13f32 <z_thread_timeout+0x42>
   13efe:	f04f 0320 	mov.w	r3, #32
   13f02:	f3ef 8611 	mrs	r6, BASEPRI
   13f06:	f383 8811 	msr	BASEPRI, r3
   13f0a:	f3bf 8f6f 	isb	sy
		_priq_wait_remove(&pended_on(thread)->waitq, thread);
   13f0e:	4629      	mov	r1, r5
   13f10:	f850 0c10 	ldr.w	r0, [r0, #-16]
   13f14:	f7fe f8ea 	bl	120ec <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
   13f18:	f814 3c0b 	ldrb.w	r3, [r4, #-11]
   13f1c:	f023 0302 	bic.w	r3, r3, #2
   13f20:	f804 3c0b 	strb.w	r3, [r4, #-11]
	__asm__ volatile(
   13f24:	f386 8811 	msr	BASEPRI, r6
   13f28:	f3bf 8f6f 	isb	sy
	thread->base.pended_on = NULL;
   13f2c:	2300      	movs	r3, #0
   13f2e:	f844 3c10 	str.w	r3, [r4, #-16]
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
   13f32:	f814 3c0b 	ldrb.w	r3, [r4, #-11]
	if (z_is_thread_ready(thread)) {
   13f36:	4628      	mov	r0, r5
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
   13f38:	f023 0314 	bic.w	r3, r3, #20
   13f3c:	f804 3c0b 	strb.w	r3, [r4, #-11]
	if (z_is_thread_ready(thread)) {
   13f40:	f7ff ffa6 	bl	13e90 <z_is_thread_ready>
   13f44:	b120      	cbz	r0, 13f50 <z_thread_timeout+0x60>
		z_add_thread_to_ready_q(thread);
   13f46:	4628      	mov	r0, r5
}
   13f48:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   13f4c:	f7fe b91e 	b.w	1218c <z_add_thread_to_ready_q>
   13f50:	bd70      	pop	{r4, r5, r6, pc}

00013f52 <z_unpend_first_thread>:
{
   13f52:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
   13f54:	f04f 0320 	mov.w	r3, #32
   13f58:	f3ef 8211 	mrs	r2, BASEPRI
   13f5c:	f383 8811 	msr	BASEPRI, r3
   13f60:	f3bf 8f6f 	isb	sy
		ret = _priq_wait_best(&wait_q->waitq);
   13f64:	f7ff ffbe 	bl	13ee4 <z_priq_dumb_best>
   13f68:	4604      	mov	r4, r0
	__asm__ volatile(
   13f6a:	f382 8811 	msr	BASEPRI, r2
   13f6e:	f3bf 8f6f 	isb	sy

static inline struct k_thread *z_unpend1_no_timeout(_wait_q_t *wait_q)
{
	struct k_thread *thread = z_find_first_thread_to_unpend(wait_q, NULL);

	if (thread != NULL) {
   13f72:	b1c8      	cbz	r0, 13fa8 <z_unpend_first_thread+0x56>
	__asm__ volatile(
   13f74:	f04f 0320 	mov.w	r3, #32
   13f78:	f3ef 8511 	mrs	r5, BASEPRI
   13f7c:	f383 8811 	msr	BASEPRI, r3
   13f80:	f3bf 8f6f 	isb	sy
		_priq_wait_remove(&pended_on(thread)->waitq, thread);
   13f84:	4601      	mov	r1, r0
   13f86:	6880      	ldr	r0, [r0, #8]
   13f88:	f7fe f8b0 	bl	120ec <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
   13f8c:	7b63      	ldrb	r3, [r4, #13]
   13f8e:	f023 0302 	bic.w	r3, r3, #2
   13f92:	7363      	strb	r3, [r4, #13]
	__asm__ volatile(
   13f94:	f385 8811 	msr	BASEPRI, r5
   13f98:	f3bf 8f6f 	isb	sy
	thread->base.pended_on = NULL;
   13f9c:	2300      	movs	r3, #0
	return z_abort_timeout(&thread->base.timeout);
   13f9e:	f104 0018 	add.w	r0, r4, #24
   13fa2:	60a3      	str	r3, [r4, #8]
   13fa4:	f000 f811 	bl	13fca <z_abort_timeout>
}
   13fa8:	4620      	mov	r0, r4
   13faa:	bd38      	pop	{r3, r4, r5, pc}

00013fac <z_new_thread_init>:
{
   13fac:	b510      	push	{r4, lr}
void z_init_thread_base(struct _thread_base *thread_base, int priority,
		       u32_t initial_state, unsigned int options)
{
	/* k_q_node is initialized upon first insertion in a list */

	thread_base->user_options = (u8_t)options;
   13fae:	9c02      	ldr	r4, [sp, #8]
	thread_base->thread_state = (u8_t)initial_state;

	thread_base->prio = priority;
   13fb0:	7383      	strb	r3, [r0, #14]
	thread_base->user_options = (u8_t)options;
   13fb2:	7304      	strb	r4, [r0, #12]

	thread_base->sched_locked = 0U;
   13fb4:	2300      	movs	r3, #0
	thread_base->thread_state = (u8_t)initial_state;
   13fb6:	2404      	movs	r4, #4
	thread_base->sched_locked = 0U;
   13fb8:	73c3      	strb	r3, [r0, #15]
	thread_base->thread_state = (u8_t)initial_state;
   13fba:	7344      	strb	r4, [r0, #13]
	node->prev = NULL;
   13fbc:	e9c0 3306 	strd	r3, r3, [r0, #24]
	thread->fn_abort = NULL;
   13fc0:	e9c0 3313 	strd	r3, r3, [r0, #76]	; 0x4c
	thread->stack_info.size = (u32_t)stackSize;
   13fc4:	e9c0 1216 	strd	r1, r2, [r0, #88]	; 0x58
}
   13fc8:	bd10      	pop	{r4, pc}

00013fca <z_abort_timeout>:
{
   13fca:	b510      	push	{r4, lr}
	__asm__ volatile(
   13fcc:	f04f 0220 	mov.w	r2, #32
   13fd0:	f3ef 8411 	mrs	r4, BASEPRI
   13fd4:	f382 8811 	msr	BASEPRI, r2
   13fd8:	f3bf 8f6f 	isb	sy
		if (sys_dnode_is_linked(&to->node)) {
   13fdc:	6803      	ldr	r3, [r0, #0]
   13fde:	b13b      	cbz	r3, 13ff0 <z_abort_timeout+0x26>
			remove_timeout(to);
   13fe0:	f7fe fb3a 	bl	12658 <remove_timeout>
			ret = 0;
   13fe4:	2000      	movs	r0, #0
	__asm__ volatile(
   13fe6:	f384 8811 	msr	BASEPRI, r4
   13fea:	f3bf 8f6f 	isb	sy
}
   13fee:	bd10      	pop	{r4, pc}
	int ret = -EINVAL;
   13ff0:	f06f 0015 	mvn.w	r0, #21
   13ff4:	e7f7      	b.n	13fe6 <z_abort_timeout+0x1c>

00013ff6 <z_get_next_timeout_expiry>:
{
   13ff6:	b510      	push	{r4, lr}
	__asm__ volatile(
   13ff8:	f04f 0320 	mov.w	r3, #32
   13ffc:	f3ef 8411 	mrs	r4, BASEPRI
   14000:	f383 8811 	msr	BASEPRI, r3
   14004:	f3bf 8f6f 	isb	sy
		ret = next_timeout();
   14008:	f7fe fb3a 	bl	12680 <next_timeout>
	__asm__ volatile(
   1400c:	f384 8811 	msr	BASEPRI, r4
   14010:	f3bf 8f6f 	isb	sy
}
   14014:	bd10      	pop	{r4, pc}

00014016 <z_set_timeout_expiry>:
{
   14016:	b570      	push	{r4, r5, r6, lr}
   14018:	4604      	mov	r4, r0
   1401a:	460e      	mov	r6, r1
	__asm__ volatile(
   1401c:	f04f 0320 	mov.w	r3, #32
   14020:	f3ef 8511 	mrs	r5, BASEPRI
   14024:	f383 8811 	msr	BASEPRI, r3
   14028:	f3bf 8f6f 	isb	sy
		int next = next_timeout();
   1402c:	f7fe fb28 	bl	12680 <next_timeout>
		if (!imminent && (sooner || IS_ENABLED(CONFIG_SMP))) {
   14030:	2801      	cmp	r0, #1
   14032:	dd05      	ble.n	14040 <z_set_timeout_expiry+0x2a>
   14034:	42a0      	cmp	r0, r4
   14036:	dd03      	ble.n	14040 <z_set_timeout_expiry+0x2a>
			z_clock_set_timeout(ticks, idle);
   14038:	4631      	mov	r1, r6
   1403a:	4620      	mov	r0, r4
   1403c:	f7fc fca0 	bl	10980 <z_clock_set_timeout>
	__asm__ volatile(
   14040:	f385 8811 	msr	BASEPRI, r5
   14044:	f3bf 8f6f 	isb	sy
}
   14048:	bd70      	pop	{r4, r5, r6, pc}

0001404a <_OffsetAbsSyms>:
					    sizeof(struct _preempt_float));
#else
GEN_ABSOLUTE_SYM(_K_THREAD_NO_FLOAT_SIZEOF, sizeof(struct k_thread));
#endif

GEN_ABS_SYM_END
   1404a:	4770      	bx	lr

Disassembly of section .gnu.sgstubs:

00014a20 <spm_request_read-0x35c0>:
	...

00017fe0 <spm_request_read>:
   17fe0:	e97f e97f 	sg
   17fe4:	f7f8 bec6 	b.w	10d74 <__acle_se_spm_request_read>

00017fe8 <spm_firmware_info>:
   17fe8:	e97f e97f 	sg
   17fec:	f7f8 bf20 	b.w	10e30 <__acle_se_spm_firmware_info>

00017ff0 <spm_request_random_number>:
   17ff0:	e97f e97f 	sg
   17ff4:	f7fb bdde 	b.w	13bb4 <__acle_se_spm_request_random_number>
	...
