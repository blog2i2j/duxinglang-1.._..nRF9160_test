
zephyr.elf:     file format elf32-littlearm


Disassembly of section rom_start:

0000c000 <_vector_table>:
    c000:	20026568 	.word	0x20026568
    c004:	0000db11 	.word	0x0000db11
    c008:	0001a585 	.word	0x0001a585
    c00c:	0000d7f5 	.word	0x0000d7f5
    c010:	0000d7f5 	.word	0x0000d7f5
    c014:	0000d7f5 	.word	0x0000d7f5
    c018:	0000d7f5 	.word	0x0000d7f5
    c01c:	0000d7f5 	.word	0x0000d7f5
    c020:	0000d7f5 	.word	0x0000d7f5
    c024:	0000d7f5 	.word	0x0000d7f5
    c028:	0000d7f5 	.word	0x0000d7f5
    c02c:	0000d7bd 	.word	0x0000d7bd
    c030:	0000d7f5 	.word	0x0000d7f5
    c034:	0000d7f5 	.word	0x0000d7f5
    c038:	0000d70d 	.word	0x0000d70d
    c03c:	0001a567 	.word	0x0001a567

0000c040 <_irq_vector_table>:
    c040:	0000d811 0000d811 0000d811 0000d811     ................
    c050:	0000d811 0000d811 0000d811 0000d811     ................
    c060:	0000d811 0000d811 0000d811 0000d811     ................
    c070:	0000d811 0000d811 0000d811 0000d811     ................
    c080:	0000d811 0000d811 0000d811 0000d811     ................
    c090:	0000d811 0000d811 0000d811 0000d811     ................
    c0a0:	0000d811 0000d811 0000d811 0000d811     ................
    c0b0:	0000f675 0001adad 0000d811 0000d811     u...............
    c0c0:	0000d811 0000d811 0000d811 0000d811     ................
    c0d0:	0000d811 0000d811 0000d811 0000d811     ................
    c0e0:	0000d811 0000d811 0001adcb 0000d811     ................
    c0f0:	0000d811 0000d811 0000d811 0000d811     ................
    c100:	0000d811 0000d811 0000d811 0000d811     ................
    c110:	0000d811 0000d811 0000d811 0000d811     ................
    c120:	0000d811 0000d811 0000d811 0000d811     ................
    c130:	0000d811 0000d811 0000d811 0000d811     ................
    c140:	0000d811                                ....

0000c144 <_vector_end>:
	...

0000c200 <m_firmware_info>:
    c200:	281ee6de 8fcebb4c 00005b02 0000003c     ...(L....[..<...
    c210:	000115d5 00000001 0000c000 0000c000     ................
    c220:	9102ffff 00000000 00000000 00000000     ................
	...

Disassembly of section text:

0000c23c <__aeabi_uldivmod>:
    c23c:	b953      	cbnz	r3, c254 <__aeabi_uldivmod+0x18>
    c23e:	b94a      	cbnz	r2, c254 <__aeabi_uldivmod+0x18>
    c240:	2900      	cmp	r1, #0
    c242:	bf08      	it	eq
    c244:	2800      	cmpeq	r0, #0
    c246:	bf1c      	itt	ne
    c248:	f04f 31ff 	movne.w	r1, #4294967295
    c24c:	f04f 30ff 	movne.w	r0, #4294967295
    c250:	f000 b970 	b.w	c534 <__aeabi_idiv0>
    c254:	f1ad 0c08 	sub.w	ip, sp, #8
    c258:	e96d ce04 	strd	ip, lr, [sp, #-16]!
    c25c:	f000 f806 	bl	c26c <__udivmoddi4>
    c260:	f8dd e004 	ldr.w	lr, [sp, #4]
    c264:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    c268:	b004      	add	sp, #16
    c26a:	4770      	bx	lr

0000c26c <__udivmoddi4>:
    c26c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    c270:	9e09      	ldr	r6, [sp, #36]	; 0x24
    c272:	4604      	mov	r4, r0
    c274:	4689      	mov	r9, r1
    c276:	2b00      	cmp	r3, #0
    c278:	f040 8083 	bne.w	c382 <__udivmoddi4+0x116>
    c27c:	428a      	cmp	r2, r1
    c27e:	4615      	mov	r5, r2
    c280:	d945      	bls.n	c30e <__udivmoddi4+0xa2>
    c282:	fab2 f282 	clz	r2, r2
    c286:	b14a      	cbz	r2, c29c <__udivmoddi4+0x30>
    c288:	f1c2 0720 	rsb	r7, r2, #32
    c28c:	fa01 f302 	lsl.w	r3, r1, r2
    c290:	4095      	lsls	r5, r2
    c292:	4094      	lsls	r4, r2
    c294:	fa20 f707 	lsr.w	r7, r0, r7
    c298:	ea47 0903 	orr.w	r9, r7, r3
    c29c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
    c2a0:	0c23      	lsrs	r3, r4, #16
    c2a2:	fa1f f885 	uxth.w	r8, r5
    c2a6:	fbb9 fcfe 	udiv	ip, r9, lr
    c2aa:	fb0e 991c 	mls	r9, lr, ip, r9
    c2ae:	fb0c f108 	mul.w	r1, ip, r8
    c2b2:	ea43 4309 	orr.w	r3, r3, r9, lsl #16
    c2b6:	4299      	cmp	r1, r3
    c2b8:	d90a      	bls.n	c2d0 <__udivmoddi4+0x64>
    c2ba:	18eb      	adds	r3, r5, r3
    c2bc:	bf2c      	ite	cs
    c2be:	2001      	movcs	r0, #1
    c2c0:	2000      	movcc	r0, #0
    c2c2:	4299      	cmp	r1, r3
    c2c4:	d902      	bls.n	c2cc <__udivmoddi4+0x60>
    c2c6:	2800      	cmp	r0, #0
    c2c8:	f000 811d 	beq.w	c506 <__udivmoddi4+0x29a>
    c2cc:	f10c 3cff 	add.w	ip, ip, #4294967295
    c2d0:	1a59      	subs	r1, r3, r1
    c2d2:	b2a3      	uxth	r3, r4
    c2d4:	fbb1 f0fe 	udiv	r0, r1, lr
    c2d8:	fb0e 1110 	mls	r1, lr, r0, r1
    c2dc:	fb00 f808 	mul.w	r8, r0, r8
    c2e0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
    c2e4:	45a0      	cmp	r8, r4
    c2e6:	d905      	bls.n	c2f4 <__udivmoddi4+0x88>
    c2e8:	192c      	adds	r4, r5, r4
    c2ea:	d202      	bcs.n	c2f2 <__udivmoddi4+0x86>
    c2ec:	45a0      	cmp	r8, r4
    c2ee:	f200 810e 	bhi.w	c50e <__udivmoddi4+0x2a2>
    c2f2:	3801      	subs	r0, #1
    c2f4:	eba4 0408 	sub.w	r4, r4, r8
    c2f8:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
    c2fc:	2700      	movs	r7, #0
    c2fe:	b11e      	cbz	r6, c308 <__udivmoddi4+0x9c>
    c300:	40d4      	lsrs	r4, r2
    c302:	2300      	movs	r3, #0
    c304:	e9c6 4300 	strd	r4, r3, [r6]
    c308:	4639      	mov	r1, r7
    c30a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    c30e:	2a00      	cmp	r2, #0
    c310:	d051      	beq.n	c3b6 <__udivmoddi4+0x14a>
    c312:	fab2 f282 	clz	r2, r2
    c316:	2a00      	cmp	r2, #0
    c318:	f040 80af 	bne.w	c47a <__udivmoddi4+0x20e>
    c31c:	1b49      	subs	r1, r1, r5
    c31e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
    c322:	fa1f f885 	uxth.w	r8, r5
    c326:	2701      	movs	r7, #1
    c328:	0c23      	lsrs	r3, r4, #16
    c32a:	fbb1 fcfe 	udiv	ip, r1, lr
    c32e:	fb0e 111c 	mls	r1, lr, ip, r1
    c332:	fb08 f00c 	mul.w	r0, r8, ip
    c336:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
    c33a:	4298      	cmp	r0, r3
    c33c:	d90a      	bls.n	c354 <__udivmoddi4+0xe8>
    c33e:	18eb      	adds	r3, r5, r3
    c340:	bf2c      	ite	cs
    c342:	2101      	movcs	r1, #1
    c344:	2100      	movcc	r1, #0
    c346:	4298      	cmp	r0, r3
    c348:	d902      	bls.n	c350 <__udivmoddi4+0xe4>
    c34a:	2900      	cmp	r1, #0
    c34c:	f000 80d7 	beq.w	c4fe <__udivmoddi4+0x292>
    c350:	f10c 3cff 	add.w	ip, ip, #4294967295
    c354:	1a19      	subs	r1, r3, r0
    c356:	b2a3      	uxth	r3, r4
    c358:	fbb1 f0fe 	udiv	r0, r1, lr
    c35c:	fb0e 1110 	mls	r1, lr, r0, r1
    c360:	fb08 f800 	mul.w	r8, r8, r0
    c364:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
    c368:	45a0      	cmp	r8, r4
    c36a:	d905      	bls.n	c378 <__udivmoddi4+0x10c>
    c36c:	192c      	adds	r4, r5, r4
    c36e:	d202      	bcs.n	c376 <__udivmoddi4+0x10a>
    c370:	45a0      	cmp	r8, r4
    c372:	f200 80c1 	bhi.w	c4f8 <__udivmoddi4+0x28c>
    c376:	3801      	subs	r0, #1
    c378:	eba4 0408 	sub.w	r4, r4, r8
    c37c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
    c380:	e7bd      	b.n	c2fe <__udivmoddi4+0x92>
    c382:	428b      	cmp	r3, r1
    c384:	d908      	bls.n	c398 <__udivmoddi4+0x12c>
    c386:	2e00      	cmp	r6, #0
    c388:	d074      	beq.n	c474 <__udivmoddi4+0x208>
    c38a:	2700      	movs	r7, #0
    c38c:	e9c6 0100 	strd	r0, r1, [r6]
    c390:	4638      	mov	r0, r7
    c392:	4639      	mov	r1, r7
    c394:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    c398:	fab3 f783 	clz	r7, r3
    c39c:	b967      	cbnz	r7, c3b8 <__udivmoddi4+0x14c>
    c39e:	428b      	cmp	r3, r1
    c3a0:	f0c0 80a4 	bcc.w	c4ec <__udivmoddi4+0x280>
    c3a4:	4282      	cmp	r2, r0
    c3a6:	f240 80a1 	bls.w	c4ec <__udivmoddi4+0x280>
    c3aa:	4638      	mov	r0, r7
    c3ac:	2e00      	cmp	r6, #0
    c3ae:	d0ab      	beq.n	c308 <__udivmoddi4+0x9c>
    c3b0:	e9c6 4900 	strd	r4, r9, [r6]
    c3b4:	e7a8      	b.n	c308 <__udivmoddi4+0x9c>
    c3b6:	deff      	udf	#255	; 0xff
    c3b8:	f1c7 0520 	rsb	r5, r7, #32
    c3bc:	40bb      	lsls	r3, r7
    c3be:	fa02 fc07 	lsl.w	ip, r2, r7
    c3c2:	fa01 f407 	lsl.w	r4, r1, r7
    c3c6:	40ea      	lsrs	r2, r5
    c3c8:	fa20 f805 	lsr.w	r8, r0, r5
    c3cc:	40e9      	lsrs	r1, r5
    c3ce:	fa00 fe07 	lsl.w	lr, r0, r7
    c3d2:	431a      	orrs	r2, r3
    c3d4:	ea48 0404 	orr.w	r4, r8, r4
    c3d8:	ea4f 4812 	mov.w	r8, r2, lsr #16
    c3dc:	0c20      	lsrs	r0, r4, #16
    c3de:	fa1f f982 	uxth.w	r9, r2
    c3e2:	fbb1 faf8 	udiv	sl, r1, r8
    c3e6:	fb08 111a 	mls	r1, r8, sl, r1
    c3ea:	fb0a fb09 	mul.w	fp, sl, r9
    c3ee:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
    c3f2:	458b      	cmp	fp, r1
    c3f4:	d90a      	bls.n	c40c <__udivmoddi4+0x1a0>
    c3f6:	1851      	adds	r1, r2, r1
    c3f8:	bf2c      	ite	cs
    c3fa:	2301      	movcs	r3, #1
    c3fc:	2300      	movcc	r3, #0
    c3fe:	458b      	cmp	fp, r1
    c400:	d902      	bls.n	c408 <__udivmoddi4+0x19c>
    c402:	2b00      	cmp	r3, #0
    c404:	f000 8088 	beq.w	c518 <__udivmoddi4+0x2ac>
    c408:	f10a 3aff 	add.w	sl, sl, #4294967295
    c40c:	eba1 010b 	sub.w	r1, r1, fp
    c410:	b2a4      	uxth	r4, r4
    c412:	fbb1 f0f8 	udiv	r0, r1, r8
    c416:	fb08 1110 	mls	r1, r8, r0, r1
    c41a:	fb00 f909 	mul.w	r9, r0, r9
    c41e:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
    c422:	4589      	cmp	r9, r1
    c424:	d904      	bls.n	c430 <__udivmoddi4+0x1c4>
    c426:	1851      	adds	r1, r2, r1
    c428:	d201      	bcs.n	c42e <__udivmoddi4+0x1c2>
    c42a:	4589      	cmp	r9, r1
    c42c:	d87b      	bhi.n	c526 <__udivmoddi4+0x2ba>
    c42e:	3801      	subs	r0, #1
    c430:	ea40 400a 	orr.w	r0, r0, sl, lsl #16
    c434:	eba1 0109 	sub.w	r1, r1, r9
    c438:	fba0 890c 	umull	r8, r9, r0, ip
    c43c:	4549      	cmp	r1, r9
    c43e:	4644      	mov	r4, r8
    c440:	464b      	mov	r3, r9
    c442:	d302      	bcc.n	c44a <__udivmoddi4+0x1de>
    c444:	d106      	bne.n	c454 <__udivmoddi4+0x1e8>
    c446:	45c6      	cmp	lr, r8
    c448:	d204      	bcs.n	c454 <__udivmoddi4+0x1e8>
    c44a:	3801      	subs	r0, #1
    c44c:	ebb8 040c 	subs.w	r4, r8, ip
    c450:	eb69 0302 	sbc.w	r3, r9, r2
    c454:	2e00      	cmp	r6, #0
    c456:	d05d      	beq.n	c514 <__udivmoddi4+0x2a8>
    c458:	ebbe 0204 	subs.w	r2, lr, r4
    c45c:	eb61 0103 	sbc.w	r1, r1, r3
    c460:	fa01 f505 	lsl.w	r5, r1, r5
    c464:	fa22 f307 	lsr.w	r3, r2, r7
    c468:	40f9      	lsrs	r1, r7
    c46a:	2700      	movs	r7, #0
    c46c:	431d      	orrs	r5, r3
    c46e:	e9c6 5100 	strd	r5, r1, [r6]
    c472:	e749      	b.n	c308 <__udivmoddi4+0x9c>
    c474:	4637      	mov	r7, r6
    c476:	4630      	mov	r0, r6
    c478:	e746      	b.n	c308 <__udivmoddi4+0x9c>
    c47a:	f1c2 0020 	rsb	r0, r2, #32
    c47e:	4095      	lsls	r5, r2
    c480:	fa01 f702 	lsl.w	r7, r1, r2
    c484:	fa21 f300 	lsr.w	r3, r1, r0
    c488:	ea4f 4e15 	mov.w	lr, r5, lsr #16
    c48c:	fa24 f100 	lsr.w	r1, r4, r0
    c490:	fa1f f885 	uxth.w	r8, r5
    c494:	4094      	lsls	r4, r2
    c496:	4339      	orrs	r1, r7
    c498:	fbb3 f0fe 	udiv	r0, r3, lr
    c49c:	0c0f      	lsrs	r7, r1, #16
    c49e:	fb0e 3310 	mls	r3, lr, r0, r3
    c4a2:	fb00 fc08 	mul.w	ip, r0, r8
    c4a6:	ea47 4303 	orr.w	r3, r7, r3, lsl #16
    c4aa:	459c      	cmp	ip, r3
    c4ac:	d907      	bls.n	c4be <__udivmoddi4+0x252>
    c4ae:	18eb      	adds	r3, r5, r3
    c4b0:	bf2c      	ite	cs
    c4b2:	2701      	movcs	r7, #1
    c4b4:	2700      	movcc	r7, #0
    c4b6:	459c      	cmp	ip, r3
    c4b8:	d900      	bls.n	c4bc <__udivmoddi4+0x250>
    c4ba:	b38f      	cbz	r7, c520 <__udivmoddi4+0x2b4>
    c4bc:	3801      	subs	r0, #1
    c4be:	eba3 030c 	sub.w	r3, r3, ip
    c4c2:	b289      	uxth	r1, r1
    c4c4:	fbb3 f7fe 	udiv	r7, r3, lr
    c4c8:	fb0e 3317 	mls	r3, lr, r7, r3
    c4cc:	fb07 fc08 	mul.w	ip, r7, r8
    c4d0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
    c4d4:	458c      	cmp	ip, r1
    c4d6:	d904      	bls.n	c4e2 <__udivmoddi4+0x276>
    c4d8:	1869      	adds	r1, r5, r1
    c4da:	d201      	bcs.n	c4e0 <__udivmoddi4+0x274>
    c4dc:	458c      	cmp	ip, r1
    c4de:	d825      	bhi.n	c52c <__udivmoddi4+0x2c0>
    c4e0:	3f01      	subs	r7, #1
    c4e2:	eba1 010c 	sub.w	r1, r1, ip
    c4e6:	ea47 4700 	orr.w	r7, r7, r0, lsl #16
    c4ea:	e71d      	b.n	c328 <__udivmoddi4+0xbc>
    c4ec:	1a84      	subs	r4, r0, r2
    c4ee:	eb61 0303 	sbc.w	r3, r1, r3
    c4f2:	2001      	movs	r0, #1
    c4f4:	4699      	mov	r9, r3
    c4f6:	e759      	b.n	c3ac <__udivmoddi4+0x140>
    c4f8:	3802      	subs	r0, #2
    c4fa:	442c      	add	r4, r5
    c4fc:	e73c      	b.n	c378 <__udivmoddi4+0x10c>
    c4fe:	f1ac 0c02 	sub.w	ip, ip, #2
    c502:	442b      	add	r3, r5
    c504:	e726      	b.n	c354 <__udivmoddi4+0xe8>
    c506:	f1ac 0c02 	sub.w	ip, ip, #2
    c50a:	442b      	add	r3, r5
    c50c:	e6e0      	b.n	c2d0 <__udivmoddi4+0x64>
    c50e:	3802      	subs	r0, #2
    c510:	442c      	add	r4, r5
    c512:	e6ef      	b.n	c2f4 <__udivmoddi4+0x88>
    c514:	4637      	mov	r7, r6
    c516:	e6f7      	b.n	c308 <__udivmoddi4+0x9c>
    c518:	f1aa 0a02 	sub.w	sl, sl, #2
    c51c:	4411      	add	r1, r2
    c51e:	e775      	b.n	c40c <__udivmoddi4+0x1a0>
    c520:	3802      	subs	r0, #2
    c522:	442b      	add	r3, r5
    c524:	e7cb      	b.n	c4be <__udivmoddi4+0x252>
    c526:	3802      	subs	r0, #2
    c528:	4411      	add	r1, r2
    c52a:	e781      	b.n	c430 <__udivmoddi4+0x1c4>
    c52c:	3f02      	subs	r7, #2
    c52e:	4429      	add	r1, r5
    c530:	e7d7      	b.n	c4e2 <__udivmoddi4+0x276>
    c532:	bf00      	nop

0000c534 <__aeabi_idiv0>:
    c534:	4770      	bx	lr
    c536:	bf00      	nop

0000c538 <uart_cb>:
	//}
}

static void uart_cb(struct device *x)
{
	u8_t tmpbyte = 0;
    c538:	2300      	movs	r3, #0
{
    c53a:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    c53e:	4604      	mov	r4, r0
	u8_t tmpbyte = 0;
    c540:	f88d 3007 	strb.w	r3, [sp, #7]
static inline int z_impl_uart_irq_update(struct device *dev)
{
	const struct uart_driver_api *api =
		(const struct uart_driver_api *)dev->driver_api;

	if (api->irq_update) {
    c544:	6843      	ldr	r3, [r0, #4]
    c546:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    c548:	b103      	cbz	r3, c54c <uart_cb+0x14>
		return api->irq_update(dev);
    c54a:	4798      	blx	r3
	if (api->irq_rx_ready) {
    c54c:	6863      	ldr	r3, [r4, #4]
    c54e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    c550:	b92b      	cbnz	r3, c55e <uart_cb+0x26>
	if (api->irq_tx_ready) {
    c552:	6863      	ldr	r3, [r4, #4]
    c554:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    c556:	bb6b      	cbnz	r3, c5b4 <uart_cb+0x7c>
			uart_irq_tx_disable(x);
		}

		k_free(buf);
	}
}
    c558:	b002      	add	sp, #8
    c55a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return api->irq_rx_ready(dev);
    c55e:	4620      	mov	r0, r4
    c560:	4798      	blx	r3
	if(uart_irq_rx_ready(x)) 
    c562:	2800      	cmp	r0, #0
    c564:	d0f5      	beq.n	c552 <uart_cb+0x1a>
 * @return Source ID.
 */
static inline u32_t log_const_source_id(
				const struct log_source_const_data *data)
{
	return ((u8_t *)data - (u8_t *)__log_const_start)/
    c566:	4d2c      	ldr	r5, [pc, #176]	; (c618 <uart_cb+0xe0>)
	LOG_INF("uart_rece:%02X\n", data);
    c568:	4b2c      	ldr	r3, [pc, #176]	; (c61c <uart_cb+0xe4>)
    c56a:	4f2d      	ldr	r7, [pc, #180]	; (c620 <uart_cb+0xe8>)
    c56c:	1aed      	subs	r5, r5, r3
	rx_buf[rece_len++] = data;
    c56e:	f8df 80b8 	ldr.w	r8, [pc, #184]	; c628 <uart_cb+0xf0>
	LOG_INF("uart_rece:%02X\n", data);
    c572:	f3c5 05c9 	ubfx	r5, r5, #3, #10
	if (api->fifo_read) {
    c576:	6863      	ldr	r3, [r4, #4]
    c578:	699b      	ldr	r3, [r3, #24]
    c57a:	2b00      	cmp	r3, #0
    c57c:	d0e9      	beq.n	c552 <uart_cb+0x1a>
		return api->fifo_read(dev, rx_data, size);
    c57e:	2201      	movs	r2, #1
    c580:	f10d 0107 	add.w	r1, sp, #7
    c584:	4620      	mov	r0, r4
    c586:	4798      	blx	r3
		while((len = uart_fifo_read(x, &tmpbyte, 1)) > 0)
    c588:	2800      	cmp	r0, #0
    c58a:	d0e2      	beq.n	c552 <uart_cb+0x1a>
	LOG_INF("uart_rece:%02X\n", data);
    c58c:	f026 033f 	bic.w	r3, r6, #63	; 0x3f
    c590:	f043 0303 	orr.w	r3, r3, #3
    c594:	f363 0607 	bfi	r6, r3, #0, #8
    c598:	f365 168f 	bfi	r6, r5, #6, #10
    c59c:	4632      	mov	r2, r6
    c59e:	f89d 1007 	ldrb.w	r1, [sp, #7]
    c5a2:	4638      	mov	r0, r7
    c5a4:	f00d fc9b 	bl	19ede <log_1>
	rx_buf[rece_len++] = data;
    c5a8:	f8d8 3000 	ldr.w	r3, [r8]
    c5ac:	3301      	adds	r3, #1
    c5ae:	f8c8 3000 	str.w	r3, [r8]
    c5b2:	e7e0      	b.n	c576 <uart_cb+0x3e>
		return api->irq_tx_ready(dev);
    c5b4:	4620      	mov	r0, r4
    c5b6:	4798      	blx	r3
	if(uart_irq_tx_ready(x))
    c5b8:	2800      	cmp	r0, #0
    c5ba:	d0cd      	beq.n	c558 <uart_cb+0x20>
	if (z_syscall_trap()) {
		return (void *) arch_syscall_invoke2(*(uintptr_t *)&queue, *(uintptr_t *)&timeout, K_SYSCALL_K_QUEUE_GET);
	}
#endif
	compiler_barrier();
	return z_impl_k_queue_get(queue, timeout);
    c5bc:	2100      	movs	r1, #0
    c5be:	4819      	ldr	r0, [pc, #100]	; (c624 <uart_cb+0xec>)
    c5c0:	f00f f868 	bl	1b694 <z_impl_k_queue_get>
		if(!buf)
    c5c4:	4606      	mov	r6, r0
    c5c6:	bb00      	cbnz	r0, c60a <uart_cb+0xd2>
			uart_irq_tx_disable(x);
    c5c8:	4620      	mov	r0, r4
    c5ca:	f00d f8bd 	bl	19748 <uart_irq_tx_disable>
			return;
    c5ce:	e7c3      	b.n	c558 <uart_cb+0x20>
	if (api->fifo_fill) {
    c5d0:	695b      	ldr	r3, [r3, #20]
    c5d2:	b1c3      	cbz	r3, c606 <uart_cb+0xce>
			written += uart_fifo_fill(x, &buf->data[written], buf->len - written);
    c5d4:	1d29      	adds	r1, r5, #4
		return api->fifo_fill(dev, tx_data, size);
    c5d6:	1b52      	subs	r2, r2, r5
    c5d8:	4431      	add	r1, r6
    c5da:	4620      	mov	r0, r4
    c5dc:	4798      	blx	r3
    c5de:	4405      	add	r5, r0
    c5e0:	b2ad      	uxth	r5, r5
		while(buf->len > written)
    c5e2:	f8b6 2404 	ldrh.w	r2, [r6, #1028]	; 0x404
    c5e6:	6863      	ldr	r3, [r4, #4]
    c5e8:	42aa      	cmp	r2, r5
    c5ea:	d8f1      	bhi.n	c5d0 <uart_cb+0x98>
	if (api->irq_tx_complete) {
    c5ec:	6863      	ldr	r3, [r4, #4]
    c5ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    c5f0:	b96b      	cbnz	r3, c60e <uart_cb+0xd6>
 *
 * @return a boolean, true if it's empty, false otherwise
 */
static inline bool sys_sflist_is_empty(sys_sflist_t *list);

Z_GENLIST_IS_EMPTY(sflist)
    c5f2:	4b0c      	ldr	r3, [pc, #48]	; (c624 <uart_cb+0xec>)
		if (k_fifo_is_empty(&fifo_uart_tx_data))
    c5f4:	681b      	ldr	r3, [r3, #0]
    c5f6:	b913      	cbnz	r3, c5fe <uart_cb+0xc6>
			uart_irq_tx_disable(x);
    c5f8:	4620      	mov	r0, r4
    c5fa:	f00d f8a5 	bl	19748 <uart_irq_tx_disable>
		k_free(buf);
    c5fe:	4630      	mov	r0, r6
    c600:	f00f f82f 	bl	1b662 <k_free>
    c604:	e7a8      	b.n	c558 <uart_cb+0x20>
	return 0;
    c606:	4618      	mov	r0, r3
    c608:	e7e9      	b.n	c5de <uart_cb+0xa6>
		u16_t written = 0;
    c60a:	2500      	movs	r5, #0
    c60c:	e7e9      	b.n	c5e2 <uart_cb+0xaa>
		return api->irq_tx_complete(dev);
    c60e:	4620      	mov	r0, r4
    c610:	4798      	blx	r3
		while (!uart_irq_tx_complete(x))
    c612:	2800      	cmp	r0, #0
    c614:	d0ea      	beq.n	c5ec <uart_cb+0xb4>
    c616:	e7ec      	b.n	c5f2 <uart_cb+0xba>
    c618:	0001c004 	.word	0x0001c004
    c61c:	0001c004 	.word	0x0001c004
    c620:	0001c5c2 	.word	0x0001c5c2
    c624:	200281fc 	.word	0x200281fc
    c628:	20020008 	.word	0x20020008

0000c62c <ble_init>:

void ble_init(void)
{
	LOG_INF("ble_init\n");
    c62c:	2303      	movs	r3, #3
    c62e:	f04f 0100 	mov.w	r1, #0
{
    c632:	b570      	push	{r4, r5, r6, lr}
	LOG_INF("ble_init\n");
    c634:	f363 0107 	bfi	r1, r3, #0, #8
    c638:	4c15      	ldr	r4, [pc, #84]	; (c690 <ble_init+0x64>)
    c63a:	4b16      	ldr	r3, [pc, #88]	; (c694 <ble_init+0x68>)
    c63c:	4816      	ldr	r0, [pc, #88]	; (c698 <ble_init+0x6c>)
    c63e:	1ae4      	subs	r4, r4, r3
    c640:	f3c4 04c9 	ubfx	r4, r4, #3, #10
    c644:	f364 118f 	bfi	r1, r4, #6, #10
    c648:	f00d fc3c 	bl	19ec4 <log_0>
	if (z_syscall_trap()) {
		return (struct device *) arch_syscall_invoke1(*(uintptr_t *)&name, K_SYSCALL_DEVICE_GET_BINDING);
	}
#endif
	compiler_barrier();
	return z_impl_device_get_binding(name);
    c64c:	4813      	ldr	r0, [pc, #76]	; (c69c <ble_init+0x70>)
    c64e:	f00b fead 	bl	183ac <z_impl_device_get_binding>
	
	uart_ble = device_get_binding("UART_0");
    c652:	4d13      	ldr	r5, [pc, #76]	; (c6a0 <ble_init+0x74>)
    c654:	4601      	mov	r1, r0
    c656:	6028      	str	r0, [r5, #0]
	if(!uart_ble)
    c658:	b958      	cbnz	r0, c672 <ble_init+0x46>
	{
		LOG_INF("Could not get %s device\n", uart_ble);
    c65a:	f04f 0200 	mov.w	r2, #0
    c65e:	2303      	movs	r3, #3
    c660:	f363 0207 	bfi	r2, r3, #0, #8
    c664:	f364 128f 	bfi	r2, r4, #6, #10
    c668:	480e      	ldr	r0, [pc, #56]	; (c6a4 <ble_init+0x78>)
		return;
	}

	uart_irq_callback_set(uart_ble, uart_cb);
	uart_irq_rx_enable(uart_ble);
}
    c66a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		LOG_INF("Could not get %s device\n", uart_ble);
    c66e:	f00d bc36 	b.w	19ede <log_1>
static inline void uart_irq_callback_user_data_set(
					struct device *dev,
					uart_irq_callback_user_data_t cb,
					void *user_data)
{
	const struct uart_driver_api *api =
    c672:	6843      	ldr	r3, [r0, #4]
		(const struct uart_driver_api *)dev->driver_api;

	if ((api != NULL) && (api->irq_callback_set != NULL)) {
    c674:	b123      	cbz	r3, c680 <ble_init+0x54>
    c676:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    c678:	b113      	cbz	r3, c680 <ble_init+0x54>
		api->irq_callback_set(dev, cb, user_data);
    c67a:	4602      	mov	r2, r0
    c67c:	490a      	ldr	r1, [pc, #40]	; (c6a8 <ble_init+0x7c>)
    c67e:	4798      	blx	r3
	uart_irq_rx_enable(uart_ble);
    c680:	6828      	ldr	r0, [r5, #0]
	if (api->irq_rx_enable) {
    c682:	6843      	ldr	r3, [r0, #4]
    c684:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    c686:	b113      	cbz	r3, c68e <ble_init+0x62>
}
    c688:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		api->irq_rx_enable(dev);
    c68c:	4718      	bx	r3
    c68e:	bd70      	pop	{r4, r5, r6, pc}
    c690:	0001c004 	.word	0x0001c004
    c694:	0001c004 	.word	0x0001c004
    c698:	0001c594 	.word	0x0001c594
    c69c:	0001c59e 	.word	0x0001c59e
    c6a0:	2002000c 	.word	0x2002000c
    c6a4:	0001c5a5 	.word	0x0001c5a5
    c6a8:	0000c539 	.word	0x0000c539

0000c6ac <char_out>:

static int char_out(int c, void *ctx_p)
{
	struct out_context *ctx = ctx_p;

	ctx->count++;
    c6ac:	680b      	ldr	r3, [r1, #0]
    c6ae:	3301      	adds	r3, #1
    c6b0:	600b      	str	r3, [r1, #0]
	return _char_out(c);
    c6b2:	4b01      	ldr	r3, [pc, #4]	; (c6b8 <char_out+0xc>)
    c6b4:	681b      	ldr	r3, [r3, #0]
    c6b6:	4718      	bx	r3
    c6b8:	20027aa8 	.word	0x20027aa8

0000c6bc <_printk_dec_ulong>:
 * @return N/A
 */
static void _printk_dec_ulong(out_func_t out, void *ctx,
			      const unsigned long num, enum pad_type padding,
			      int min_width)
{
    c6bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    c6c0:	b085      	sub	sp, #20
    c6c2:	9c0e      	ldr	r4, [sp, #56]	; 0x38
    c6c4:	469b      	mov	fp, r3
    c6c6:	2c01      	cmp	r4, #1
    c6c8:	bfb8      	it	lt
    c6ca:	2401      	movlt	r4, #1
    c6cc:	2b01      	cmp	r3, #1
    c6ce:	bf0c      	ite	eq
    c6d0:	2330      	moveq	r3, #48	; 0x30
    c6d2:	2320      	movne	r3, #32
    c6d4:	4616      	mov	r6, r2
    c6d6:	4682      	mov	sl, r0
    c6d8:	4688      	mov	r8, r1
    c6da:	2501      	movs	r5, #1
    c6dc:	270a      	movs	r7, #10
    c6de:	2200      	movs	r2, #0
    c6e0:	f8df 906c 	ldr.w	r9, [pc, #108]	; c750 <_printk_dec_ulong+0x94>
    c6e4:	9302      	str	r3, [sp, #8]
	if (min_width <= 0) {
		min_width = 1;
	}

	while (pos >= 10) {
		if (found_largest_digit != 0 || remainder >= pos) {
    c6e6:	fbb6 f3f9 	udiv	r3, r6, r9
    c6ea:	9301      	str	r3, [sp, #4]
    c6ec:	b90a      	cbnz	r2, c6f2 <_printk_dec_ulong+0x36>
    c6ee:	45b1      	cmp	r9, r6
    c6f0:	d81c      	bhi.n	c72c <_printk_dec_ulong+0x70>
			found_largest_digit = 1;
			out((int)(remainder / pos + 48), ctx);
    c6f2:	9b01      	ldr	r3, [sp, #4]
    c6f4:	4641      	mov	r1, r8
    c6f6:	f103 0030 	add.w	r0, r3, #48	; 0x30
    c6fa:	47d0      	blx	sl
			found_largest_digit = 1;
    c6fc:	2201      	movs	r2, #1
			digits++;
    c6fe:	3501      	adds	r5, #1
				&& padding < PAD_SPACE_AFTER) {
			out((int)(padding == PAD_ZERO_BEFORE ? '0' : ' '), ctx);
			digits++;
		}
		remaining--;
		remainder %= pos;
    c700:	9b01      	ldr	r3, [sp, #4]
		remaining--;
    c702:	3f01      	subs	r7, #1
		remainder %= pos;
    c704:	fb09 6613 	mls	r6, r9, r3, r6
		pos /= 10;
    c708:	230a      	movs	r3, #10
	while (pos >= 10) {
    c70a:	2f01      	cmp	r7, #1
		pos /= 10;
    c70c:	fbb9 f9f3 	udiv	r9, r9, r3
	while (pos >= 10) {
    c710:	d1e9      	bne.n	c6e6 <_printk_dec_ulong+0x2a>
	}
	out((int)(remainder + 48), ctx);
    c712:	4641      	mov	r1, r8
    c714:	f106 0030 	add.w	r0, r6, #48	; 0x30
    c718:	47d0      	blx	sl

	if (padding == PAD_SPACE_AFTER) {
    c71a:	f1bb 0f03 	cmp.w	fp, #3
    c71e:	d102      	bne.n	c726 <_printk_dec_ulong+0x6a>
		remaining = min_width - digits;
    c720:	1b64      	subs	r4, r4, r5
		while (remaining-- > 0) {
    c722:	2c00      	cmp	r4, #0
    c724:	dc0e      	bgt.n	c744 <_printk_dec_ulong+0x88>
			out(' ', ctx);
		}
	}
}
    c726:	b005      	add	sp, #20
    c728:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		} else if (remaining <= min_width
    c72c:	42bc      	cmp	r4, r7
    c72e:	dbe7      	blt.n	c700 <_printk_dec_ulong+0x44>
				&& padding < PAD_SPACE_AFTER) {
    c730:	f1bb 0f02 	cmp.w	fp, #2
    c734:	d8e4      	bhi.n	c700 <_printk_dec_ulong+0x44>
			out((int)(padding == PAD_ZERO_BEFORE ? '0' : ' '), ctx);
    c736:	4641      	mov	r1, r8
    c738:	9802      	ldr	r0, [sp, #8]
    c73a:	9203      	str	r2, [sp, #12]
			digits++;
    c73c:	3501      	adds	r5, #1
			out((int)(padding == PAD_ZERO_BEFORE ? '0' : ' '), ctx);
    c73e:	47d0      	blx	sl
			digits++;
    c740:	9a03      	ldr	r2, [sp, #12]
    c742:	e7dd      	b.n	c700 <_printk_dec_ulong+0x44>
			out(' ', ctx);
    c744:	4641      	mov	r1, r8
    c746:	2020      	movs	r0, #32
    c748:	47d0      	blx	sl
    c74a:	3c01      	subs	r4, #1
    c74c:	e7e9      	b.n	c722 <_printk_dec_ulong+0x66>
    c74e:	bf00      	nop
    c750:	3b9aca00 	.word	0x3b9aca00

0000c754 <vprintk>:
	struct out_context ctx = { 0 };
    c754:	2300      	movs	r3, #0
{
    c756:	b507      	push	{r0, r1, r2, lr}
	z_vprintk(char_out, &ctx, fmt, ap);
    c758:	4602      	mov	r2, r0
	struct out_context ctx = { 0 };
    c75a:	9301      	str	r3, [sp, #4]
	z_vprintk(char_out, &ctx, fmt, ap);
    c75c:	4803      	ldr	r0, [pc, #12]	; (c76c <vprintk+0x18>)
    c75e:	460b      	mov	r3, r1
    c760:	a901      	add	r1, sp, #4
    c762:	f00d f9c7 	bl	19af4 <z_vprintk>
}
    c766:	b003      	add	sp, #12
    c768:	f85d fb04 	ldr.w	pc, [sp], #4
    c76c:	0000c6ad 	.word	0x0000c6ad

0000c770 <nordicsemi_nrf91_init>:
		:
		: "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	unsigned int tmp;

	__asm__ volatile(
    c770:	f04f 0220 	mov.w	r2, #32
    c774:	f3ef 8311 	mrs	r3, BASEPRI
    c778:	f382 8811 	msr	BASEPRI, r2
    c77c:	f3bf 8f6f 	isb	sy

	key = irq_lock();

#ifdef CONFIG_NRF_ENABLE_ICACHE
	/* Enable the instruction cache */
	NRF_NVMC->ICACHECNF = NVMC_ICACHECNF_CACHEEN_Msk;
    c780:	2101      	movs	r1, #1
    c782:	4a04      	ldr	r2, [pc, #16]	; (c794 <nordicsemi_nrf91_init+0x24>)
    c784:	f8c2 1540 	str.w	r1, [r2, #1344]	; 0x540
	__asm__ volatile(
		"cpsie i;"
		"isb"
		: : : "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile(
    c788:	f383 8811 	msr	BASEPRI, r3
    c78c:	f3bf 8f6f 	isb	sy
	NMI_INIT();

	irq_unlock(key);

	return 0;
}
    c790:	2000      	movs	r0, #0
    c792:	4770      	bx	lr
    c794:	40039000 	.word	0x40039000

0000c798 <arch_busy_wait>:

#else // NRFX_CHECK(NRFX_DELAY_DWT_BASED)

NRF_STATIC_INLINE void nrfx_coredep_delay_us(uint32_t time_us)
{
    if (time_us == 0)
    c798:	b120      	cbz	r0, c7a4 <arch_busy_wait+0xc>
    };

    typedef void (* delay_func_t)(uint32_t);
    const delay_func_t delay_cycles =
        // Set LSB to 1 to execute the code in the Thumb mode.
        (delay_func_t)((((uint32_t)delay_machine_code) | 1));
    c79a:	4b03      	ldr	r3, [pc, #12]	; (c7a8 <arch_busy_wait+0x10>)
    uint32_t cycles = time_us * NRFX_DELAY_CPU_FREQ_MHZ;
    delay_cycles(cycles);
    c79c:	0180      	lsls	r0, r0, #6
    c79e:	f043 0301 	orr.w	r3, r3, #1
    c7a2:	4718      	bx	r3

void arch_busy_wait(u32_t time_us)
{
	nrfx_coredep_delay_us(time_us);
}
    c7a4:	4770      	bx	lr
    c7a6:	bf00      	nop
    c7a8:	0001c0a0 	.word	0x0001c0a0

0000c7ac <enable_logger>:

K_THREAD_STACK_DEFINE(logging_stack, CONFIG_LOG_PROCESS_THREAD_STACK_SIZE);
struct k_thread logging_thread;

static int enable_logger(struct device *arg)
{
    c7ac:	b530      	push	{r4, r5, lr}
	ARG_UNUSED(arg);

	if (IS_ENABLED(CONFIG_LOG_PROCESS_THREAD)) {
		k_timer_init(&log_process_thread_timer,
    c7ae:	2200      	movs	r2, #0
{
    c7b0:	b087      	sub	sp, #28
		k_timer_init(&log_process_thread_timer,
    c7b2:	490d      	ldr	r1, [pc, #52]	; (c7e8 <enable_logger+0x3c>)
    c7b4:	480d      	ldr	r0, [pc, #52]	; (c7ec <enable_logger+0x40>)
    c7b6:	f00f f93e 	bl	1ba36 <k_timer_init>
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
    c7ba:	2400      	movs	r4, #0
    c7bc:	230e      	movs	r3, #14
    c7be:	4d0c      	ldr	r5, [pc, #48]	; (c7f0 <enable_logger+0x44>)
    c7c0:	e9cd 4302 	strd	r4, r3, [sp, #8]
    c7c4:	e9cd 4404 	strd	r4, r4, [sp, #16]
    c7c8:	e9cd 4400 	strd	r4, r4, [sp]
    c7cc:	4b09      	ldr	r3, [pc, #36]	; (c7f4 <enable_logger+0x48>)
    c7ce:	f44f 7240 	mov.w	r2, #768	; 0x300
    c7d2:	4909      	ldr	r1, [pc, #36]	; (c7f8 <enable_logger+0x4c>)
    c7d4:	4628      	mov	r0, r5
    c7d6:	f00c fd3f 	bl	19258 <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread_id, value);
    c7da:	4908      	ldr	r1, [pc, #32]	; (c7fc <enable_logger+0x50>)
    c7dc:	4628      	mov	r0, r5
    c7de:	f00f f8c4 	bl	1b96a <z_impl_k_thread_name_set>
	} else {
		log_init();
	}

	return 0;
}
    c7e2:	4620      	mov	r0, r4
    c7e4:	b007      	add	sp, #28
    c7e6:	bd30      	pop	{r4, r5, pc}
    c7e8:	0000c801 	.word	0x0000c801
    c7ec:	20020024 	.word	0x20020024
    c7f0:	2002006c 	.word	0x2002006c
    c7f4:	0000cbc1 	.word	0x0000cbc1
    c7f8:	20025268 	.word	0x20025268
    c7fc:	0001c5db 	.word	0x0001c5db

0000c800 <log_process_thread_timer_expiry_fn>:
		arch_syscall_invoke1(*(uintptr_t *)&sem, K_SYSCALL_K_SEM_GIVE);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_sem_give(sem);
    c800:	4801      	ldr	r0, [pc, #4]	; (c808 <log_process_thread_timer_expiry_fn+0x8>)
    c802:	f00c bc83 	b.w	1910c <z_impl_k_sem_give>
    c806:	bf00      	nop
    c808:	200281ac 	.word	0x200281ac

0000c80c <log_core_init>:
{
    c80c:	b508      	push	{r3, lr}
		log_msg_pool_init();
    c80e:	f000 fa33 	bl	cc78 <log_msg_pool_init>
		log_list_init(&list);
    c812:	4809      	ldr	r0, [pc, #36]	; (c838 <log_core_init+0x2c>)
    c814:	f00d fb13 	bl	19e3e <log_list_init>
		k_mem_slab_init(&log_strdup_pool, log_strdup_pool_buf,
    c818:	2304      	movs	r3, #4
    c81a:	2234      	movs	r2, #52	; 0x34
    c81c:	4907      	ldr	r1, [pc, #28]	; (c83c <log_core_init+0x30>)
    c81e:	4808      	ldr	r0, [pc, #32]	; (c840 <log_core_init+0x34>)
    c820:	f00e fef0 	bl	1b604 <k_mem_slab_init>
		timestamp_func = k_cycle_get_32_wrapper;
    c824:	4b07      	ldr	r3, [pc, #28]	; (c844 <log_core_init+0x38>)
    c826:	4a08      	ldr	r2, [pc, #32]	; (c848 <log_core_init+0x3c>)
	log_output_timestamp_freq_set(freq);
    c828:	f44f 4000 	mov.w	r0, #32768	; 0x8000
		timestamp_func = k_cycle_get_32_wrapper;
    c82c:	601a      	str	r2, [r3, #0]
}
    c82e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	log_output_timestamp_freq_set(freq);
    c832:	f000 bc61 	b.w	d0f8 <log_output_timestamp_freq_set>
    c836:	bf00      	nop
    c838:	2002001c 	.word	0x2002001c
    c83c:	200272a8 	.word	0x200272a8
    c840:	20020050 	.word	0x20020050
    c844:	20027b5c 	.word	0x20027b5c
    c848:	00019e7d 	.word	0x00019e7d

0000c84c <dropped_notify>:
{
    c84c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
{
	/* This builtin, as described by Intel, is not a traditional
	 * test-and-set operation, but rather an atomic exchange operation. It
	 * writes value into *ptr, and returns the previous contents of *ptr.
	 */
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    c84e:	2500      	movs	r5, #0
    c850:	4b0c      	ldr	r3, [pc, #48]	; (c884 <dropped_notify+0x38>)
    c852:	e8d3 7fef 	ldaex	r7, [r3]
    c856:	e8c3 5fe2 	stlex	r2, r5, [r3]
    c85a:	2a00      	cmp	r2, #0
    c85c:	d1f9      	bne.n	c852 <dropped_notify+0x6>
 *
 * @return Number of backends.
 */
static inline int log_backend_count_get(void)
{
	return __log_backends_end - __log_backends_start;
    c85e:	4c0a      	ldr	r4, [pc, #40]	; (c888 <dropped_notify+0x3c>)
    c860:	4e0a      	ldr	r6, [pc, #40]	; (c88c <dropped_notify+0x40>)
    c862:	1b36      	subs	r6, r6, r4
    c864:	1136      	asrs	r6, r6, #4
	for (int i = 0; i < log_backend_count_get(); i++) {
    c866:	42b5      	cmp	r5, r6
    c868:	db00      	blt.n	c86c <dropped_notify+0x20>
}
    c86a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 */
static inline bool log_backend_is_active(
				const struct log_backend *const backend)
{
	__ASSERT_NO_MSG(backend != NULL);
	return backend->cb->active;
    c86c:	6863      	ldr	r3, [r4, #4]
		if (log_backend_is_active(backend)) {
    c86e:	795b      	ldrb	r3, [r3, #5]
    c870:	b12b      	cbz	r3, c87e <dropped_notify+0x32>
	if (backend->api->dropped != NULL) {
    c872:	6823      	ldr	r3, [r4, #0]
    c874:	68db      	ldr	r3, [r3, #12]
    c876:	b113      	cbz	r3, c87e <dropped_notify+0x32>
		backend->api->dropped(backend, cnt);
    c878:	4639      	mov	r1, r7
    c87a:	4620      	mov	r0, r4
    c87c:	4798      	blx	r3
	for (int i = 0; i < log_backend_count_get(); i++) {
    c87e:	3501      	adds	r5, #1
    c880:	3410      	adds	r4, #16
    c882:	e7f0      	b.n	c866 <dropped_notify+0x1a>
    c884:	20020014 	.word	0x20020014
    c888:	0001c064 	.word	0x0001c064
    c88c:	0001c074 	.word	0x0001c074

0000c890 <log_dropped>:
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
    c890:	4b04      	ldr	r3, [pc, #16]	; (c8a4 <log_dropped+0x14>)
    c892:	e8d3 2fef 	ldaex	r2, [r3]
    c896:	3201      	adds	r2, #1
    c898:	e8c3 2fe1 	stlex	r1, r2, [r3]
    c89c:	2900      	cmp	r1, #0
    c89e:	d1f8      	bne.n	c892 <log_dropped+0x2>
}
    c8a0:	4770      	bx	lr
    c8a2:	bf00      	nop
    c8a4:	20020014 	.word	0x20020014

0000c8a8 <log_source_name_get>:
    c8a8:	4a04      	ldr	r2, [pc, #16]	; (c8bc <log_source_name_get+0x14>)
    c8aa:	4b05      	ldr	r3, [pc, #20]	; (c8c0 <log_source_name_get+0x18>)
    c8ac:	1a9b      	subs	r3, r3, r2
	return src_id < log_sources_count() ? log_name_get(src_id) : NULL;
    c8ae:	ebb1 0fd3 	cmp.w	r1, r3, lsr #3
	return __log_const_start[source_id].name;
    c8b2:	bf34      	ite	cc
    c8b4:	f852 0031 	ldrcc.w	r0, [r2, r1, lsl #3]
    c8b8:	2000      	movcs	r0, #0
}
    c8ba:	4770      	bx	lr
    c8bc:	0001c004 	.word	0x0001c004
    c8c0:	0001c064 	.word	0x0001c064

0000c8c4 <log_backend_enable>:
	id += backend - log_backend_get(0);
    c8c4:	4b09      	ldr	r3, [pc, #36]	; (c8ec <log_backend_enable+0x28>)
	log_backend_id_set(backend, id);
    c8c6:	6842      	ldr	r2, [r0, #4]
	id += backend - log_backend_get(0);
    c8c8:	1ac3      	subs	r3, r0, r3
    c8ca:	111b      	asrs	r3, r3, #4
    c8cc:	3301      	adds	r3, #1
{
    c8ce:	b510      	push	{r4, lr}
	log_backend_id_set(backend, id);
    c8d0:	7113      	strb	r3, [r2, #4]
	backend->cb->active = true;
    c8d2:	2201      	movs	r2, #1
	log_backend_activate(backend, ctx);
    c8d4:	6843      	ldr	r3, [r0, #4]
	if (!backend_attached) {
    c8d6:	4c06      	ldr	r4, [pc, #24]	; (c8f0 <log_backend_enable+0x2c>)
    c8d8:	715a      	strb	r2, [r3, #5]
    c8da:	7822      	ldrb	r2, [r4, #0]
	backend->cb->ctx = ctx;
    c8dc:	6019      	str	r1, [r3, #0]
    c8de:	b912      	cbnz	r2, c8e6 <log_backend_enable+0x22>
    c8e0:	4804      	ldr	r0, [pc, #16]	; (c8f4 <log_backend_enable+0x30>)
    c8e2:	f00c fc13 	bl	1910c <z_impl_k_sem_give>
	backend_attached = true;
    c8e6:	2301      	movs	r3, #1
    c8e8:	7023      	strb	r3, [r4, #0]
}
    c8ea:	bd10      	pop	{r4, pc}
    c8ec:	0001c064 	.word	0x0001c064
    c8f0:	20024cd2 	.word	0x20024cd2
    c8f4:	200281ac 	.word	0x200281ac

0000c8f8 <log_init>:
{
    c8f8:	b570      	push	{r4, r5, r6, lr}
    c8fa:	4b0f      	ldr	r3, [pc, #60]	; (c938 <log_init+0x40>)
    c8fc:	e8d3 5fef 	ldaex	r5, [r3]
    c900:	1c6a      	adds	r2, r5, #1
    c902:	e8c3 2fe1 	stlex	r1, r2, [r3]
    c906:	2900      	cmp	r1, #0
    c908:	d1f8      	bne.n	c8fc <log_init+0x4>
	if (atomic_inc(&initialized) != 0) {
    c90a:	b92d      	cbnz	r5, c918 <log_init+0x20>
	return __log_backends_end - __log_backends_start;
    c90c:	4c0b      	ldr	r4, [pc, #44]	; (c93c <log_init+0x44>)
    c90e:	4e0c      	ldr	r6, [pc, #48]	; (c940 <log_init+0x48>)
    c910:	1b36      	subs	r6, r6, r4
    c912:	1136      	asrs	r6, r6, #4
	for (i = 0; i < log_backend_count_get(); i++) {
    c914:	42b5      	cmp	r5, r6
    c916:	db00      	blt.n	c91a <log_init+0x22>
}
    c918:	bd70      	pop	{r4, r5, r6, pc}
		if (backend->autostart) {
    c91a:	7b23      	ldrb	r3, [r4, #12]
    c91c:	b143      	cbz	r3, c930 <log_init+0x38>
			if (backend->api->init != NULL) {
    c91e:	6823      	ldr	r3, [r4, #0]
    c920:	695b      	ldr	r3, [r3, #20]
    c922:	b103      	cbz	r3, c926 <log_init+0x2e>
				backend->api->init();
    c924:	4798      	blx	r3
			log_backend_enable(backend, NULL, CONFIG_LOG_MAX_LEVEL);
    c926:	2204      	movs	r2, #4
    c928:	2100      	movs	r1, #0
    c92a:	4620      	mov	r0, r4
    c92c:	f7ff ffca 	bl	c8c4 <log_backend_enable>
	for (i = 0; i < log_backend_count_get(); i++) {
    c930:	3501      	adds	r5, #1
    c932:	3410      	adds	r4, #16
    c934:	e7ee      	b.n	c914 <log_init+0x1c>
    c936:	bf00      	nop
    c938:	20020018 	.word	0x20020018
    c93c:	0001c064 	.word	0x0001c064
    c940:	0001c074 	.word	0x0001c074

0000c944 <log_strdup>:
	return (((const char *)addr >= (const char *)RO_START) &&
    c944:	4b14      	ldr	r3, [pc, #80]	; (c998 <log_strdup+0x54>)
{
    c946:	b537      	push	{r0, r1, r2, r4, r5, lr}
	return (((const char *)addr >= (const char *)RO_START) &&
    c948:	4298      	cmp	r0, r3
{
    c94a:	4604      	mov	r4, r0
	return (((const char *)addr >= (const char *)RO_START) &&
    c94c:	d302      	bcc.n	c954 <log_strdup+0x10>
	if (IS_ENABLED(CONFIG_LOG_IMMEDIATE) ||
    c94e:	4b13      	ldr	r3, [pc, #76]	; (c99c <log_strdup+0x58>)
    c950:	4298      	cmp	r0, r3
    c952:	d31b      	bcc.n	c98c <log_strdup+0x48>
	err = k_mem_slab_alloc(&log_strdup_pool, (void **)&dup, K_NO_WAIT);
    c954:	2200      	movs	r2, #0
    c956:	a901      	add	r1, sp, #4
    c958:	4811      	ldr	r0, [pc, #68]	; (c9a0 <log_strdup+0x5c>)
    c95a:	f00b fec7 	bl	186ec <k_mem_slab_alloc>
	if (err != 0) {
    c95e:	4605      	mov	r5, r0
    c960:	b9b8      	cbnz	r0, c992 <log_strdup+0x4e>
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    c962:	2201      	movs	r2, #1
    c964:	9b01      	ldr	r3, [sp, #4]
    c966:	e8d3 1fef 	ldaex	r1, [r3]
    c96a:	e8c3 2fe0 	stlex	r0, r2, [r3]
    c96e:	2800      	cmp	r0, #0
    c970:	d1f9      	bne.n	c966 <log_strdup+0x22>
	strncpy(dup->buf, str, sizeof(dup->buf) - 2);
    c972:	9801      	ldr	r0, [sp, #4]
    c974:	4621      	mov	r1, r4
    c976:	222d      	movs	r2, #45	; 0x2d
    c978:	3004      	adds	r0, #4
    c97a:	f00d ff01 	bl	1a780 <strncpy>
	dup->buf[sizeof(dup->buf) - 2] = '~';
    c97e:	237e      	movs	r3, #126	; 0x7e
    c980:	9c01      	ldr	r4, [sp, #4]
    c982:	f884 3031 	strb.w	r3, [r4, #49]	; 0x31
	dup->buf[sizeof(dup->buf) - 1] = '\0';
    c986:	f884 5032 	strb.w	r5, [r4, #50]	; 0x32
	return dup->buf;
    c98a:	3404      	adds	r4, #4
}
    c98c:	4620      	mov	r0, r4
    c98e:	b003      	add	sp, #12
    c990:	bd30      	pop	{r4, r5, pc}
		return (char *)log_strdup_fail_msg;
    c992:	4c04      	ldr	r4, [pc, #16]	; (c9a4 <log_strdup+0x60>)
    c994:	e7fa      	b.n	c98c <log_strdup+0x48>
    c996:	bf00      	nop
    c998:	0001bca8 	.word	0x0001bca8
    c99c:	0001cde0 	.word	0x0001cde0
    c9a0:	20020050 	.word	0x20020050
    c9a4:	0001c5e3 	.word	0x0001c5e3

0000c9a8 <log_is_strdup>:
	return PART_OF_ARRAY(log_strdup_pool_buf, (u8_t *)buf);
    c9a8:	b148      	cbz	r0, c9be <log_is_strdup+0x16>
    c9aa:	4b05      	ldr	r3, [pc, #20]	; (c9c0 <log_is_strdup+0x18>)
    c9ac:	4298      	cmp	r0, r3
    c9ae:	d305      	bcc.n	c9bc <log_is_strdup+0x14>
    c9b0:	33d0      	adds	r3, #208	; 0xd0
    c9b2:	4298      	cmp	r0, r3
    c9b4:	bf2c      	ite	cs
    c9b6:	2000      	movcs	r0, #0
    c9b8:	2001      	movcc	r0, #1
    c9ba:	4770      	bx	lr
    c9bc:	2000      	movs	r0, #0
}
    c9be:	4770      	bx	lr
    c9c0:	200272a8 	.word	0x200272a8

0000c9c4 <z_impl_log_process>:
{
    c9c4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (!backend_attached && !bypass) {
    c9c8:	4b44      	ldr	r3, [pc, #272]	; (cadc <z_impl_log_process+0x118>)
{
    c9ca:	4605      	mov	r5, r0
	if (!backend_attached && !bypass) {
    c9cc:	781b      	ldrb	r3, [r3, #0]
    c9ce:	b903      	cbnz	r3, c9d2 <z_impl_log_process+0xe>
    c9d0:	b340      	cbz	r0, ca24 <z_impl_log_process+0x60>
	__asm__ volatile(
    c9d2:	f04f 0320 	mov.w	r3, #32
    c9d6:	f3ef 8611 	mrs	r6, BASEPRI
    c9da:	f383 8811 	msr	BASEPRI, r3
    c9de:	f3bf 8f6f 	isb	sy
	msg = log_list_head_get(&list);
    c9e2:	483f      	ldr	r0, [pc, #252]	; (cae0 <z_impl_log_process+0x11c>)
    c9e4:	f00d fa3b 	bl	19e5e <log_list_head_get>
    c9e8:	4604      	mov	r4, r0
	__asm__ volatile(
    c9ea:	f386 8811 	msr	BASEPRI, r6
    c9ee:	f3bf 8f6f 	isb	sy
	if (msg != NULL) {
    c9f2:	b158      	cbz	r0, ca0c <z_impl_log_process+0x48>
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
    c9f4:	4b3b      	ldr	r3, [pc, #236]	; (cae4 <z_impl_log_process+0x120>)
    c9f6:	e8d3 2fef 	ldaex	r2, [r3]
    c9fa:	3a01      	subs	r2, #1
    c9fc:	e8c3 2fe1 	stlex	r1, r2, [r3]
    ca00:	2900      	cmp	r1, #0
    ca02:	d1f8      	bne.n	c9f6 <z_impl_log_process+0x32>
	if (!bypass) {
    ca04:	b18d      	cbz	r5, ca2a <z_impl_log_process+0x66>
	log_msg_put(msg);
    ca06:	4620      	mov	r0, r4
    ca08:	f00d fb36 	bl	1a078 <log_msg_put>
	if (!bypass && dropped_cnt) {
    ca0c:	b925      	cbnz	r5, ca18 <z_impl_log_process+0x54>
    ca0e:	4b36      	ldr	r3, [pc, #216]	; (cae8 <z_impl_log_process+0x124>)
    ca10:	681b      	ldr	r3, [r3, #0]
    ca12:	b10b      	cbz	r3, ca18 <z_impl_log_process+0x54>
		dropped_notify();
    ca14:	f7ff ff1a 	bl	c84c <dropped_notify>
	return (log_list_head_peek(&list) != NULL);
    ca18:	4831      	ldr	r0, [pc, #196]	; (cae0 <z_impl_log_process+0x11c>)
    ca1a:	f00d fa1e 	bl	19e5a <log_list_head_peek>
    ca1e:	1c05      	adds	r5, r0, #0
    ca20:	bf18      	it	ne
    ca22:	2501      	movne	r5, #1
}
    ca24:	4628      	mov	r0, r5
    ca26:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		    !panic_mode) {
    ca2a:	4b30      	ldr	r3, [pc, #192]	; (caec <z_impl_log_process+0x128>)
		if (IS_ENABLED(CONFIG_LOG_DETECT_MISSED_STRDUP) &&
    ca2c:	781b      	ldrb	r3, [r3, #0]
    ca2e:	b9ab      	cbnz	r3, ca5c <z_impl_log_process+0x98>
 * @retval true  Standard message.
 * @retval false Hexdump message.
 */
static inline bool log_msg_is_std(struct log_msg *msg)
{
	return  (msg->hdr.params.generic.type == LOG_MSG_TYPE_STD);
    ca30:	7a23      	ldrb	r3, [r4, #8]
	if (!log_msg_is_std(msg)) {
    ca32:	07db      	lsls	r3, r3, #31
    ca34:	d412      	bmi.n	ca5c <z_impl_log_process+0x98>
	msg_str = log_msg_str_get(msg);
    ca36:	f00d fb2e 	bl	1a096 <log_msg_str_get>
    ca3a:	4681      	mov	r9, r0
	mask = z_log_get_s_mask(msg_str, log_msg_nargs_get(msg));
    ca3c:	4620      	mov	r0, r4
    ca3e:	f00d fafb 	bl	1a038 <log_msg_nargs_get>
    ca42:	4601      	mov	r1, r0
    ca44:	4648      	mov	r0, r9
    ca46:	f00d fa1d 	bl	19e84 <z_log_get_s_mask>
    ca4a:	4607      	mov	r7, r0
	return ((u8_t *)data - (u8_t *)__log_const_start)/
    ca4c:	4b28      	ldr	r3, [pc, #160]	; (caf0 <z_impl_log_process+0x12c>)
				LOG_ERR(ERR_MSG, idx, msg_str);
    ca4e:	4a29      	ldr	r2, [pc, #164]	; (caf4 <z_impl_log_process+0x130>)
    ca50:	f8df b0b8 	ldr.w	fp, [pc, #184]	; cb0c <z_impl_log_process+0x148>
    ca54:	1a9b      	subs	r3, r3, r2
    ca56:	f3c3 0ac9 	ubfx	sl, r3, #3, #10
	while (mask) {
    ca5a:	b937      	cbnz	r7, ca6a <z_impl_log_process+0xa6>
    ca5c:	4e26      	ldr	r6, [pc, #152]	; (caf8 <z_impl_log_process+0x134>)
    ca5e:	4f27      	ldr	r7, [pc, #156]	; (cafc <z_impl_log_process+0x138>)
    ca60:	f04f 0800 	mov.w	r8, #0
    ca64:	1bbf      	subs	r7, r7, r6
    ca66:	113f      	asrs	r7, r7, #4
    ca68:	e034      	b.n	cad4 <z_impl_log_process+0x110>
		idx = 31 - __builtin_clz(mask);
    ca6a:	fab7 f687 	clz	r6, r7
    ca6e:	f1c6 061f 	rsb	r6, r6, #31
		str = (const char *)log_msg_arg_get(msg, idx);
    ca72:	4631      	mov	r1, r6
    ca74:	4620      	mov	r0, r4
    ca76:	f00d fae2 	bl	1a03e <log_msg_arg_get>
	return (((const char *)addr >= (const char *)RO_START) &&
    ca7a:	4b21      	ldr	r3, [pc, #132]	; (cb00 <z_impl_log_process+0x13c>)
		str = (const char *)log_msg_arg_get(msg, idx);
    ca7c:	4602      	mov	r2, r0
	return (((const char *)addr >= (const char *)RO_START) &&
    ca7e:	4298      	cmp	r0, r3
    ca80:	d302      	bcc.n	ca88 <z_impl_log_process+0xc4>
		if (!is_rodata(str) && !log_is_strdup(str) &&
    ca82:	4b20      	ldr	r3, [pc, #128]	; (cb04 <z_impl_log_process+0x140>)
    ca84:	4298      	cmp	r0, r3
    ca86:	d314      	bcc.n	cab2 <z_impl_log_process+0xee>
    ca88:	4610      	mov	r0, r2
    ca8a:	f7ff ff8d 	bl	c9a8 <log_is_strdup>
    ca8e:	b980      	cbnz	r0, cab2 <z_impl_log_process+0xee>
    ca90:	4b1d      	ldr	r3, [pc, #116]	; (cb08 <z_impl_log_process+0x144>)
    ca92:	429a      	cmp	r2, r3
    ca94:	d00d      	beq.n	cab2 <z_impl_log_process+0xee>
				LOG_ERR(ERR_MSG, idx, msg_str);
    ca96:	f028 033f 	bic.w	r3, r8, #63	; 0x3f
    ca9a:	f043 0301 	orr.w	r3, r3, #1
    ca9e:	f363 0807 	bfi	r8, r3, #0, #8
    caa2:	f36a 188f 	bfi	r8, sl, #6, #10
    caa6:	4643      	mov	r3, r8
    caa8:	464a      	mov	r2, r9
    caaa:	4631      	mov	r1, r6
    caac:	4658      	mov	r0, fp
    caae:	f00d fa2a 	bl	19f06 <log_2>
		mask &= ~BIT(idx);
    cab2:	2301      	movs	r3, #1
    cab4:	fa03 f606 	lsl.w	r6, r3, r6
    cab8:	ea27 0706 	bic.w	r7, r7, r6
    cabc:	e7cd      	b.n	ca5a <z_impl_log_process+0x96>
	return backend->cb->active;
    cabe:	6873      	ldr	r3, [r6, #4]
			if (log_backend_is_active(backend) &&
    cac0:	795b      	ldrb	r3, [r3, #5]
    cac2:	b123      	cbz	r3, cace <z_impl_log_process+0x10a>
	backend->api->put(backend, msg);
    cac4:	6833      	ldr	r3, [r6, #0]
    cac6:	4621      	mov	r1, r4
    cac8:	681b      	ldr	r3, [r3, #0]
    caca:	4630      	mov	r0, r6
    cacc:	4798      	blx	r3
		for (int i = 0; i < log_backend_count_get(); i++) {
    cace:	f108 0801 	add.w	r8, r8, #1
    cad2:	3610      	adds	r6, #16
    cad4:	45b8      	cmp	r8, r7
    cad6:	dbf2      	blt.n	cabe <z_impl_log_process+0xfa>
    cad8:	e795      	b.n	ca06 <z_impl_log_process+0x42>
    cada:	bf00      	nop
    cadc:	20024cd2 	.word	0x20024cd2
    cae0:	2002001c 	.word	0x2002001c
    cae4:	20020010 	.word	0x20020010
    cae8:	20020014 	.word	0x20020014
    caec:	20024cd3 	.word	0x20024cd3
    caf0:	0001c02c 	.word	0x0001c02c
    caf4:	0001c004 	.word	0x0001c004
    caf8:	0001c064 	.word	0x0001c064
    cafc:	0001c074 	.word	0x0001c074
    cb00:	0001bca8 	.word	0x0001bca8
    cb04:	0001cde0 	.word	0x0001cde0
    cb08:	0001c5e3 	.word	0x0001c5e3
    cb0c:	0001c601 	.word	0x0001c601

0000cb10 <msg_finalize>:
	msg->hdr.timestamp = timestamp_func();
    cb10:	4b24      	ldr	r3, [pc, #144]	; (cba4 <msg_finalize+0x94>)
{
    cb12:	b570      	push	{r4, r5, r6, lr}
	msg->hdr.timestamp = timestamp_func();
    cb14:	681b      	ldr	r3, [r3, #0]
	msg->hdr.ids = src_level;
    cb16:	8141      	strh	r1, [r0, #10]
{
    cb18:	4605      	mov	r5, r0
	msg->hdr.timestamp = timestamp_func();
    cb1a:	4798      	blx	r3
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
    cb1c:	4c22      	ldr	r4, [pc, #136]	; (cba8 <msg_finalize+0x98>)
    cb1e:	60e8      	str	r0, [r5, #12]
    cb20:	e8d4 3fef 	ldaex	r3, [r4]
    cb24:	3301      	adds	r3, #1
    cb26:	e8c4 3fe2 	stlex	r2, r3, [r4]
    cb2a:	2a00      	cmp	r2, #0
    cb2c:	d1f8      	bne.n	cb20 <msg_finalize+0x10>
	__asm__ volatile(
    cb2e:	f04f 0320 	mov.w	r3, #32
    cb32:	f3ef 8611 	mrs	r6, BASEPRI
    cb36:	f383 8811 	msr	BASEPRI, r3
    cb3a:	f3bf 8f6f 	isb	sy
	log_list_add_tail(&list, msg);
    cb3e:	481b      	ldr	r0, [pc, #108]	; (cbac <msg_finalize+0x9c>)
    cb40:	4629      	mov	r1, r5
    cb42:	f00d f980 	bl	19e46 <log_list_add_tail>
	__asm__ volatile(
    cb46:	f386 8811 	msr	BASEPRI, r6
    cb4a:	f3bf 8f6f 	isb	sy
	if (panic_mode) {
    cb4e:	4b18      	ldr	r3, [pc, #96]	; (cbb0 <msg_finalize+0xa0>)
    cb50:	781a      	ldrb	r2, [r3, #0]
    cb52:	b17a      	cbz	r2, cb74 <msg_finalize+0x64>
	__asm__ volatile(
    cb54:	f04f 0320 	mov.w	r3, #32
    cb58:	f3ef 8411 	mrs	r4, BASEPRI
    cb5c:	f383 8811 	msr	BASEPRI, r3
    cb60:	f3bf 8f6f 	isb	sy
	if (z_syscall_trap()) {
		return (bool) arch_syscall_invoke1(*(uintptr_t *)&bypass, K_SYSCALL_LOG_PROCESS);
	}
#endif
	compiler_barrier();
	return z_impl_log_process(bypass);
    cb64:	2000      	movs	r0, #0
    cb66:	f7ff ff2d 	bl	c9c4 <z_impl_log_process>
	__asm__ volatile(
    cb6a:	f384 8811 	msr	BASEPRI, r4
    cb6e:	f3bf 8f6f 	isb	sy
}
    cb72:	bd70      	pop	{r4, r5, r6, pc}
	} else if (proc_tid != NULL && buffered_cnt == 1) {
    cb74:	490f      	ldr	r1, [pc, #60]	; (cbb4 <msg_finalize+0xa4>)
    cb76:	6823      	ldr	r3, [r4, #0]
    cb78:	6809      	ldr	r1, [r1, #0]
    cb7a:	2900      	cmp	r1, #0
    cb7c:	d0f9      	beq.n	cb72 <msg_finalize+0x62>
    cb7e:	2b01      	cmp	r3, #1
    cb80:	d106      	bne.n	cb90 <msg_finalize+0x80>
}
    cb82:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	z_impl_k_timer_start(timer, duration, period);
    cb86:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
    cb8a:	480b      	ldr	r0, [pc, #44]	; (cbb8 <msg_finalize+0xa8>)
    cb8c:	f00c bd46 	b.w	1961c <z_impl_k_timer_start>
		if ((buffered_cnt == CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD) &&
    cb90:	2b0a      	cmp	r3, #10
    cb92:	d1ee      	bne.n	cb72 <msg_finalize+0x62>
	z_impl_k_timer_stop(timer);
    cb94:	4808      	ldr	r0, [pc, #32]	; (cbb8 <msg_finalize+0xa8>)
    cb96:	f00e ff5a 	bl	1ba4e <z_impl_k_timer_stop>
}
    cb9a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	z_impl_k_sem_give(sem);
    cb9e:	4807      	ldr	r0, [pc, #28]	; (cbbc <msg_finalize+0xac>)
    cba0:	f00c bab4 	b.w	1910c <z_impl_k_sem_give>
    cba4:	20027b5c 	.word	0x20027b5c
    cba8:	20020010 	.word	0x20020010
    cbac:	2002001c 	.word	0x2002001c
    cbb0:	20024cd3 	.word	0x20024cd3
    cbb4:	2002011c 	.word	0x2002011c
    cbb8:	20020024 	.word	0x20020024
    cbbc:	200281ac 	.word	0x200281ac

0000cbc0 <log_process_thread_func>:
{
    cbc0:	b508      	push	{r3, lr}
	log_init();
    cbc2:	f7ff fe99 	bl	c8f8 <log_init>
	return z_impl_k_current_get();
    cbc6:	f00c fa9b 	bl	19100 <z_impl_k_current_get>
	proc_tid = process_tid;
    cbca:	4b0b      	ldr	r3, [pc, #44]	; (cbf8 <log_process_thread_func+0x38>)
    cbcc:	6018      	str	r0, [r3, #0]
	if (CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD &&
    cbce:	b130      	cbz	r0, cbde <log_process_thread_func+0x1e>
	    buffered_cnt >= CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD) {
    cbd0:	4b0a      	ldr	r3, [pc, #40]	; (cbfc <log_process_thread_func+0x3c>)
	    process_tid &&
    cbd2:	681b      	ldr	r3, [r3, #0]
    cbd4:	2b09      	cmp	r3, #9
    cbd6:	dd02      	ble.n	cbde <log_process_thread_func+0x1e>
	z_impl_k_sem_give(sem);
    cbd8:	4809      	ldr	r0, [pc, #36]	; (cc00 <log_process_thread_func+0x40>)
    cbda:	f00c fa97 	bl	1910c <z_impl_k_sem_give>
	return z_impl_k_sem_take(sem, timeout);
    cbde:	4c08      	ldr	r4, [pc, #32]	; (cc00 <log_process_thread_func+0x40>)
    cbe0:	2000      	movs	r0, #0
    cbe2:	f7ff feef 	bl	c9c4 <z_impl_log_process>
		if (log_process(false) == false) {
    cbe6:	2800      	cmp	r0, #0
    cbe8:	d1fa      	bne.n	cbe0 <log_process_thread_func+0x20>
    cbea:	f04f 31ff 	mov.w	r1, #4294967295
    cbee:	4620      	mov	r0, r4
    cbf0:	f00c fab8 	bl	19164 <z_impl_k_sem_take>
    cbf4:	e7f4      	b.n	cbe0 <log_process_thread_func+0x20>
    cbf6:	bf00      	nop
    cbf8:	2002011c 	.word	0x2002011c
    cbfc:	20020010 	.word	0x20020010
    cc00:	200281ac 	.word	0x200281ac

0000cc04 <z_impl_log_panic>:
{
    cc04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (panic_mode) {
    cc06:	4f0e      	ldr	r7, [pc, #56]	; (cc40 <z_impl_log_panic+0x3c>)
    cc08:	783d      	ldrb	r5, [r7, #0]
    cc0a:	b975      	cbnz	r5, cc2a <z_impl_log_panic+0x26>
	log_init();
    cc0c:	f7ff fe74 	bl	c8f8 <log_init>
	return __log_backends_end - __log_backends_start;
    cc10:	4c0c      	ldr	r4, [pc, #48]	; (cc44 <z_impl_log_panic+0x40>)
    cc12:	4e0d      	ldr	r6, [pc, #52]	; (cc48 <z_impl_log_panic+0x44>)
    cc14:	1b36      	subs	r6, r6, r4
    cc16:	1136      	asrs	r6, r6, #4
	for (int i = 0; i < log_backend_count_get(); i++) {
    cc18:	42b5      	cmp	r5, r6
    cc1a:	db07      	blt.n	cc2c <z_impl_log_panic+0x28>
    cc1c:	2000      	movs	r0, #0
    cc1e:	f7ff fed1 	bl	c9c4 <z_impl_log_process>
		while (log_process(false) == true) {
    cc22:	2800      	cmp	r0, #0
    cc24:	d1fa      	bne.n	cc1c <z_impl_log_panic+0x18>
	panic_mode = true;
    cc26:	2301      	movs	r3, #1
    cc28:	703b      	strb	r3, [r7, #0]
}
    cc2a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return backend->cb->active;
    cc2c:	6863      	ldr	r3, [r4, #4]
		if (log_backend_is_active(backend)) {
    cc2e:	795b      	ldrb	r3, [r3, #5]
    cc30:	b11b      	cbz	r3, cc3a <z_impl_log_panic+0x36>
	backend->api->panic(backend);
    cc32:	6823      	ldr	r3, [r4, #0]
    cc34:	4620      	mov	r0, r4
    cc36:	691b      	ldr	r3, [r3, #16]
    cc38:	4798      	blx	r3
	for (int i = 0; i < log_backend_count_get(); i++) {
    cc3a:	3501      	adds	r5, #1
    cc3c:	3410      	adds	r4, #16
    cc3e:	e7eb      	b.n	cc18 <z_impl_log_panic+0x14>
    cc40:	20024cd3 	.word	0x20024cd3
    cc44:	0001c064 	.word	0x0001c064
    cc48:	0001c074 	.word	0x0001c074

0000cc4c <log_free>:
{
    cc4c:	b507      	push	{r0, r1, r2, lr}
	struct log_strdup_buf *dup = CONTAINER_OF(str, struct log_strdup_buf,
    cc4e:	3804      	subs	r0, #4
    cc50:	9001      	str	r0, [sp, #4]
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
    cc52:	e8d0 3fef 	ldaex	r3, [r0]
    cc56:	1e5a      	subs	r2, r3, #1
    cc58:	e8c0 2fe1 	stlex	r1, r2, [r0]
    cc5c:	2900      	cmp	r1, #0
    cc5e:	d1f8      	bne.n	cc52 <log_free+0x6>
	if (atomic_dec(&dup->refcount) == 1) {
    cc60:	2b01      	cmp	r3, #1
    cc62:	d103      	bne.n	cc6c <log_free+0x20>
		k_mem_slab_free(&log_strdup_pool, (void **)&dup);
    cc64:	a901      	add	r1, sp, #4
    cc66:	4803      	ldr	r0, [pc, #12]	; (cc74 <log_free+0x28>)
    cc68:	f00b fd6c 	bl	18744 <k_mem_slab_free>
}
    cc6c:	b003      	add	sp, #12
    cc6e:	f85d fb04 	ldr.w	pc, [sp], #4
    cc72:	bf00      	nop
    cc74:	20020050 	.word	0x20020050

0000cc78 <log_msg_pool_init>:
static u8_t __noinit __aligned(sizeof(void *))
		log_msg_pool_buf[CONFIG_LOG_BUFFER_SIZE];

void log_msg_pool_init(void)
{
	k_mem_slab_init(&log_msg_pool, log_msg_pool_buf, MSG_SIZE, NUM_OF_MSGS);
    cc78:	2320      	movs	r3, #32
    cc7a:	4902      	ldr	r1, [pc, #8]	; (cc84 <log_msg_pool_init+0xc>)
    cc7c:	461a      	mov	r2, r3
    cc7e:	4802      	ldr	r0, [pc, #8]	; (cc88 <log_msg_pool_init+0x10>)
    cc80:	f00e bcc0 	b.w	1b604 <k_mem_slab_init>
    cc84:	20027378 	.word	0x20027378
    cc88:	20020120 	.word	0x20020120

0000cc8c <log_msg_no_space_handle>:
	k_mem_slab_free(&log_msg_pool, (void **)&msg);
}

union log_msg_chunk *log_msg_no_space_handle(void)
{
	union log_msg_chunk *msg = NULL;
    cc8c:	2300      	movs	r3, #0
{
    cc8e:	b537      	push	{r0, r1, r2, r4, r5, lr}

	if (IS_ENABLED(CONFIG_LOG_MODE_OVERFLOW)) {
		do {
			more = log_process(true);
			log_dropped();
			err = k_mem_slab_alloc(&log_msg_pool,
    cc90:	4d09      	ldr	r5, [pc, #36]	; (ccb8 <log_msg_no_space_handle+0x2c>)
	union log_msg_chunk *msg = NULL;
    cc92:	9301      	str	r3, [sp, #4]
    cc94:	2001      	movs	r0, #1
    cc96:	f7ff fe95 	bl	c9c4 <z_impl_log_process>
    cc9a:	4604      	mov	r4, r0
			log_dropped();
    cc9c:	f7ff fdf8 	bl	c890 <log_dropped>
			err = k_mem_slab_alloc(&log_msg_pool,
    cca0:	2200      	movs	r2, #0
    cca2:	a901      	add	r1, sp, #4
    cca4:	4628      	mov	r0, r5
    cca6:	f00b fd21 	bl	186ec <k_mem_slab_alloc>
					       (void **)&msg,
					       K_NO_WAIT);
		} while ((err != 0) && more);
    ccaa:	b108      	cbz	r0, ccb0 <log_msg_no_space_handle+0x24>
    ccac:	2c00      	cmp	r4, #0
    ccae:	d1f1      	bne.n	cc94 <log_msg_no_space_handle+0x8>
	} else {
		log_dropped();
	}
	return msg;

}
    ccb0:	9801      	ldr	r0, [sp, #4]
    ccb2:	b003      	add	sp, #12
    ccb4:	bd30      	pop	{r4, r5, pc}
    ccb6:	bf00      	nop
    ccb8:	20020120 	.word	0x20020120

0000ccbc <log_msg_chunk_alloc>:
{
    ccbc:	b507      	push	{r0, r1, r2, lr}
	union log_msg_chunk *msg = NULL;
    ccbe:	2200      	movs	r2, #0
	int err = k_mem_slab_alloc(&log_msg_pool, (void **)&msg,
    ccc0:	a901      	add	r1, sp, #4
    ccc2:	4806      	ldr	r0, [pc, #24]	; (ccdc <log_msg_chunk_alloc+0x20>)
	union log_msg_chunk *msg = NULL;
    ccc4:	9201      	str	r2, [sp, #4]
	int err = k_mem_slab_alloc(&log_msg_pool, (void **)&msg,
    ccc6:	f00b fd11 	bl	186ec <k_mem_slab_alloc>
	if (err != 0) {
    ccca:	b110      	cbz	r0, ccd2 <log_msg_chunk_alloc+0x16>
		msg = log_msg_no_space_handle();
    cccc:	f7ff ffde 	bl	cc8c <log_msg_no_space_handle>
    ccd0:	9001      	str	r0, [sp, #4]
}
    ccd2:	9801      	ldr	r0, [sp, #4]
    ccd4:	b003      	add	sp, #12
    ccd6:	f85d fb04 	ldr.w	pc, [sp], #4
    ccda:	bf00      	nop
    ccdc:	20020120 	.word	0x20020120

0000cce0 <msg_free>:
{
    cce0:	b5f0      	push	{r4, r5, r6, r7, lr}
    cce2:	7a04      	ldrb	r4, [r0, #8]
	}
}

u32_t log_msg_nargs_get(struct log_msg *msg)
{
	return msg->hdr.params.std.nargs;
    cce4:	7a46      	ldrb	r6, [r0, #9]
{
    cce6:	b085      	sub	sp, #20
	if (log_msg_is_std(msg) && nargs) {
    cce8:	f014 0401 	ands.w	r4, r4, #1
{
    ccec:	9001      	str	r0, [sp, #4]
	return msg->hdr.params.std.nargs;
    ccee:	ea4f 1616 	mov.w	r6, r6, lsr #4
	if (log_msg_is_std(msg) && nargs) {
    ccf2:	d00e      	beq.n	cd12 <msg_free+0x32>
	if (msg->hdr.params.generic.ext == 1) {
    ccf4:	9b01      	ldr	r3, [sp, #4]
    ccf6:	7a1a      	ldrb	r2, [r3, #8]
    ccf8:	0792      	lsls	r2, r2, #30
    ccfa:	d504      	bpl.n	cd06 <msg_free+0x26>
		cont_free(msg->payload.ext.next);
    ccfc:	695b      	ldr	r3, [r3, #20]
		k_mem_slab_free(&log_msg_pool, (void **)&cont);
    ccfe:	4c18      	ldr	r4, [pc, #96]	; (cd60 <msg_free+0x80>)
    cd00:	9303      	str	r3, [sp, #12]
	while (cont != NULL) {
    cd02:	9b03      	ldr	r3, [sp, #12]
    cd04:	bb2b      	cbnz	r3, cd52 <msg_free+0x72>
	k_mem_slab_free(&log_msg_pool, (void **)&msg);
    cd06:	a901      	add	r1, sp, #4
    cd08:	4815      	ldr	r0, [pc, #84]	; (cd60 <msg_free+0x80>)
    cd0a:	f00b fd1b 	bl	18744 <k_mem_slab_free>
}
    cd0e:	b005      	add	sp, #20
    cd10:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (log_msg_is_std(msg) && nargs) {
    cd12:	2e00      	cmp	r6, #0
    cd14:	d0ee      	beq.n	ccf4 <msg_free+0x14>
		for (i = 0; i < nargs; i++) {
    cd16:	4625      	mov	r5, r4
    cd18:	e017      	b.n	cd4a <msg_free+0x6a>
			void *buf = (void *)log_msg_arg_get(msg, i);
    cd1a:	4629      	mov	r1, r5
    cd1c:	f00d f98f 	bl	1a03e <log_msg_arg_get>
    cd20:	4607      	mov	r7, r0
			if (log_is_strdup(buf)) {
    cd22:	f7ff fe41 	bl	c9a8 <log_is_strdup>
    cd26:	b178      	cbz	r0, cd48 <msg_free+0x68>
				if (smask == 0) {
    cd28:	b93c      	cbnz	r4, cd3a <msg_free+0x5a>
					smask = z_log_get_s_mask(
    cd2a:	9b01      	ldr	r3, [sp, #4]
    cd2c:	4631      	mov	r1, r6
    cd2e:	6918      	ldr	r0, [r3, #16]
    cd30:	f00d f8a8 	bl	19e84 <z_log_get_s_mask>
					if (smask == 0) {
    cd34:	4604      	mov	r4, r0
    cd36:	2800      	cmp	r0, #0
    cd38:	d0dc      	beq.n	ccf4 <msg_free+0x14>
				if (smask & BIT(i)) {
    cd3a:	fa24 f305 	lsr.w	r3, r4, r5
    cd3e:	07db      	lsls	r3, r3, #31
    cd40:	d502      	bpl.n	cd48 <msg_free+0x68>
					log_free(buf);
    cd42:	4638      	mov	r0, r7
    cd44:	f7ff ff82 	bl	cc4c <log_free>
		for (i = 0; i < nargs; i++) {
    cd48:	3501      	adds	r5, #1
    cd4a:	42ae      	cmp	r6, r5
    cd4c:	9801      	ldr	r0, [sp, #4]
    cd4e:	d8e4      	bhi.n	cd1a <msg_free+0x3a>
    cd50:	e7d0      	b.n	ccf4 <msg_free+0x14>
		next = cont->next;
    cd52:	681d      	ldr	r5, [r3, #0]
		k_mem_slab_free(&log_msg_pool, (void **)&cont);
    cd54:	a903      	add	r1, sp, #12
    cd56:	4620      	mov	r0, r4
    cd58:	f00b fcf4 	bl	18744 <k_mem_slab_free>
		cont = next;
    cd5c:	9503      	str	r5, [sp, #12]
    cd5e:	e7d0      	b.n	cd02 <msg_free+0x22>
    cd60:	20020120 	.word	0x20020120

0000cd64 <print_formatted>:
	return 0;
}

static int print_formatted(const struct log_output *log_output,
			   const char *fmt, ...)
{
    cd64:	b40e      	push	{r1, r2, r3}
    cd66:	b503      	push	{r0, r1, lr}
    cd68:	ab03      	add	r3, sp, #12
    cd6a:	f853 2b04 	ldr.w	r2, [r3], #4
	va_start(args, fmt);
#if !defined(CONFIG_NEWLIB_LIBC) && !defined(CONFIG_ARCH_POSIX) && \
    defined(CONFIG_LOG_ENABLE_FANCY_OUTPUT_FORMATTING)
	length = z_prf(out_func, (void *)log_output, (char *)fmt, args);
#else
	z_vprintk(out_func, (void *)log_output, fmt, args);
    cd6e:	4601      	mov	r1, r0
    cd70:	4804      	ldr	r0, [pc, #16]	; (cd84 <print_formatted+0x20>)
	va_start(args, fmt);
    cd72:	9301      	str	r3, [sp, #4]
	z_vprintk(out_func, (void *)log_output, fmt, args);
    cd74:	f00c febe 	bl	19af4 <z_vprintk>
#endif
	va_end(args);

	return length;
}
    cd78:	2000      	movs	r0, #0
    cd7a:	b002      	add	sp, #8
    cd7c:	f85d eb04 	ldr.w	lr, [sp], #4
    cd80:	b003      	add	sp, #12
    cd82:	4770      	bx	lr
    cd84:	0001a43f 	.word	0x0001a43f

0000cd88 <prefix_print>:
}

static u32_t prefix_print(const struct log_output *log_output,
			 u32_t flags, bool func_on, u32_t timestamp, u8_t level,
			 u8_t domain_id, u16_t source_id)
{
    cd88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
			"<%d>1 ",
			facility * 8 +
			level_to_rfc5424_severity(level));
	}

	if (stamp) {
    cd8c:	f011 0402 	ands.w	r4, r1, #2
{
    cd90:	b085      	sub	sp, #20
    cd92:	4606      	mov	r6, r0
    cd94:	4690      	mov	r8, r2
    cd96:	f89d 7038 	ldrb.w	r7, [sp, #56]	; 0x38
	bool colors_on = flags & LOG_OUTPUT_FLAG_COLORS;
    cd9a:	f001 0901 	and.w	r9, r1, #1
	bool level_on = flags & LOG_OUTPUT_FLAG_LEVEL;
    cd9e:	f001 0508 	and.w	r5, r1, #8
	if (stamp) {
    cda2:	d007      	beq.n	cdb4 <prefix_print+0x2c>
	if (!format) {
    cda4:	f011 0f44 	tst.w	r1, #68	; 0x44
    cda8:	d137      	bne.n	ce1a <prefix_print+0x92>
		length = print_formatted(log_output, "[%08lu] ", timestamp);
    cdaa:	461a      	mov	r2, r3
    cdac:	4932      	ldr	r1, [pc, #200]	; (ce78 <prefix_print+0xf0>)
    cdae:	f7ff ffd9 	bl	cd64 <print_formatted>
		length += timestamp_print(log_output, flags, timestamp);
    cdb2:	4604      	mov	r4, r0
	if (color) {
    cdb4:	f1b9 0f00 	cmp.w	r9, #0
    cdb8:	d00a      	beq.n	cdd0 <prefix_print+0x48>
		const char *color = start && (colors[level] != NULL) ?
    cdba:	4b30      	ldr	r3, [pc, #192]	; (ce7c <prefix_print+0xf4>)
		print_formatted(log_output, "%s", color);
    cdbc:	4930      	ldr	r1, [pc, #192]	; (ce80 <prefix_print+0xf8>)
		const char *color = start && (colors[level] != NULL) ?
    cdbe:	f853 2027 	ldr.w	r2, [r3, r7, lsl #2]
		print_formatted(log_output, "%s", color);
    cdc2:	4b30      	ldr	r3, [pc, #192]	; (ce84 <prefix_print+0xfc>)
    cdc4:	4630      	mov	r0, r6
    cdc6:	2a00      	cmp	r2, #0
    cdc8:	bf08      	it	eq
    cdca:	461a      	moveq	r2, r3
    cdcc:	f7ff ffca 	bl	cd64 <print_formatted>
	if (level_on) {
    cdd0:	b13d      	cbz	r5, cde2 <prefix_print+0x5a>
		total += print_formatted(log_output, "<%s> ", severity[level]);
    cdd2:	4b2d      	ldr	r3, [pc, #180]	; (ce88 <prefix_print+0x100>)
    cdd4:	492d      	ldr	r1, [pc, #180]	; (ce8c <prefix_print+0x104>)
    cdd6:	f853 2027 	ldr.w	r2, [r3, r7, lsl #2]
    cdda:	4630      	mov	r0, r6
    cddc:	f7ff ffc2 	bl	cd64 <print_formatted>
    cde0:	4605      	mov	r5, r0
	total += print_formatted(log_output,
    cde2:	f1b8 0f00 	cmp.w	r8, #0
    cde6:	d044      	beq.n	ce72 <prefix_print+0xea>
				((1 << level) & LOG_FUNCTION_PREFIX_MASK)) ?
    cde8:	2301      	movs	r3, #1
    cdea:	fa03 f707 	lsl.w	r7, r3, r7
	total += print_formatted(log_output,
    cdee:	4b28      	ldr	r3, [pc, #160]	; (ce90 <prefix_print+0x108>)
    cdf0:	f017 0f10 	tst.w	r7, #16
    cdf4:	4f27      	ldr	r7, [pc, #156]	; (ce94 <prefix_print+0x10c>)
    cdf6:	bf18      	it	ne
    cdf8:	461f      	movne	r7, r3
    cdfa:	f8bd 1040 	ldrh.w	r1, [sp, #64]	; 0x40
    cdfe:	f89d 003c 	ldrb.w	r0, [sp, #60]	; 0x3c
    ce02:	f7ff fd51 	bl	c8a8 <log_source_name_get>
    ce06:	4639      	mov	r1, r7
    ce08:	4602      	mov	r2, r0
    ce0a:	4630      	mov	r0, r6
    ce0c:	f7ff ffaa 	bl	cd64 <print_formatted>
    ce10:	4428      	add	r0, r5
		length += ids_print(log_output, level_on, func_on,
				    domain_id, source_id, level);
	}

	return length;
}
    ce12:	4420      	add	r0, r4
    ce14:	b005      	add	sp, #20
    ce16:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	} else if (freq != 0U) {
    ce1a:	4a1f      	ldr	r2, [pc, #124]	; (ce98 <prefix_print+0x110>)
    ce1c:	6811      	ldr	r1, [r2, #0]
    ce1e:	b331      	cbz	r1, ce6e <prefix_print+0xe6>
		timestamp /= timestamp_div;
    ce20:	4a1e      	ldr	r2, [pc, #120]	; (ce9c <prefix_print+0x114>)
    ce22:	f44f 6e61 	mov.w	lr, #3600	; 0xe10
    ce26:	6814      	ldr	r4, [r2, #0]
		ms = (remainder * 1000U) / freq;
    ce28:	f44f 7c7a 	mov.w	ip, #1000	; 0x3e8
		timestamp /= timestamp_div;
    ce2c:	fbb3 f3f4 	udiv	r3, r3, r4
		seconds = timestamp / freq;
    ce30:	fbb3 f4f1 	udiv	r4, r3, r1
		seconds -= hours * 3600U;
    ce34:	fbb4 f2fe 	udiv	r2, r4, lr
    ce38:	fb0e 4e12 	mls	lr, lr, r2, r4
		remainder = timestamp % freq;
    ce3c:	fb01 3414 	mls	r4, r1, r4, r3
		ms = (remainder * 1000U) / freq;
    ce40:	fb0c f404 	mul.w	r4, ip, r4
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
    ce44:	fbb4 fbf1 	udiv	fp, r4, r1
		mins = seconds / 60U;
    ce48:	f04f 0a3c 	mov.w	sl, #60	; 0x3c
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
    ce4c:	fb01 441b 	mls	r4, r1, fp, r4
    ce50:	fb0c f404 	mul.w	r4, ip, r4
		mins = seconds / 60U;
    ce54:	fbbe f3fa 	udiv	r3, lr, sl
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
    ce58:	fbb4 f1f1 	udiv	r1, r4, r1
			length = print_formatted(log_output,
    ce5c:	e9cd b101 	strd	fp, r1, [sp, #4]
    ce60:	fb0a e113 	mls	r1, sl, r3, lr
    ce64:	9100      	str	r1, [sp, #0]
    ce66:	490e      	ldr	r1, [pc, #56]	; (cea0 <prefix_print+0x118>)
    ce68:	f7ff ff7c 	bl	cd64 <print_formatted>
    ce6c:	e7a1      	b.n	cdb2 <prefix_print+0x2a>
		length = 0;
    ce6e:	4608      	mov	r0, r1
    ce70:	e79f      	b.n	cdb2 <prefix_print+0x2a>
	total += print_formatted(log_output,
    ce72:	4f08      	ldr	r7, [pc, #32]	; (ce94 <prefix_print+0x10c>)
    ce74:	e7c1      	b.n	cdfa <prefix_print+0x72>
    ce76:	bf00      	nop
    ce78:	0001c67e 	.word	0x0001c67e
    ce7c:	0001c0a8 	.word	0x0001c0a8
    ce80:	0001c6a3 	.word	0x0001c6a3
    ce84:	0001c670 	.word	0x0001c670
    ce88:	0001c0bc 	.word	0x0001c0bc
    ce8c:	0001c6a6 	.word	0x0001c6a6
    ce90:	0001c67a 	.word	0x0001c67a
    ce94:	0001c675 	.word	0x0001c675
    ce98:	2002013c 	.word	0x2002013c
    ce9c:	20020140 	.word	0x20020140
    cea0:	0001c687 	.word	0x0001c687

0000cea4 <postfix_print>:

static void postfix_print(const struct log_output *log_output,
			  u32_t flags, u8_t level)
{
    cea4:	b538      	push	{r3, r4, r5, lr}
    cea6:	460c      	mov	r4, r1
	if (color) {
    cea8:	07e1      	lsls	r1, r4, #31
{
    ceaa:	4605      	mov	r5, r0
	if (color) {
    ceac:	d503      	bpl.n	ceb6 <postfix_print+0x12>
		print_formatted(log_output, "%s", color);
    ceae:	4a08      	ldr	r2, [pc, #32]	; (ced0 <postfix_print+0x2c>)
    ceb0:	4908      	ldr	r1, [pc, #32]	; (ced4 <postfix_print+0x30>)
    ceb2:	f7ff ff57 	bl	cd64 <print_formatted>
	if ((flags & LOG_OUTPUT_FLAG_CRLF_NONE) != 0U) {
    ceb6:	06e2      	lsls	r2, r4, #27
    ceb8:	d408      	bmi.n	cecc <postfix_print+0x28>
	if ((flags & LOG_OUTPUT_FLAG_CRLF_LFONLY) != 0U) {
    ceba:	06a3      	lsls	r3, r4, #26
		print_formatted(ctx, "\r\n");
    cebc:	4628      	mov	r0, r5
	color_postfix(log_output, (flags & LOG_OUTPUT_FLAG_COLORS),
			      level);
	newline_print(log_output, flags);
}
    cebe:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		print_formatted(ctx, "\n");
    cec2:	bf4c      	ite	mi
    cec4:	4904      	ldrmi	r1, [pc, #16]	; (ced8 <postfix_print+0x34>)
		print_formatted(ctx, "\r\n");
    cec6:	4905      	ldrpl	r1, [pc, #20]	; (cedc <postfix_print+0x38>)
    cec8:	f7ff bf4c 	b.w	cd64 <print_formatted>
}
    cecc:	bd38      	pop	{r3, r4, r5, pc}
    cece:	bf00      	nop
    ced0:	0001c670 	.word	0x0001c670
    ced4:	0001c6a3 	.word	0x0001c6a3
    ced8:	0001ccf7 	.word	0x0001ccf7
    cedc:	0001ccf6 	.word	0x0001ccf6

0000cee0 <hexdump_line_print>:
{
    cee0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    cee4:	4698      	mov	r8, r3
    cee6:	9b08      	ldr	r3, [sp, #32]
    cee8:	4604      	mov	r4, r0
	if ((flags & LOG_OUTPUT_FLAG_CRLF_NONE) != 0U) {
    ceea:	06dd      	lsls	r5, r3, #27
{
    ceec:	460e      	mov	r6, r1
    ceee:	4617      	mov	r7, r2
	if ((flags & LOG_OUTPUT_FLAG_CRLF_NONE) != 0U) {
    cef0:	d405      	bmi.n	cefe <hexdump_line_print+0x1e>
	if ((flags & LOG_OUTPUT_FLAG_CRLF_LFONLY) != 0U) {
    cef2:	0699      	lsls	r1, r3, #26
		print_formatted(ctx, "\n");
    cef4:	bf4c      	ite	mi
    cef6:	4929      	ldrmi	r1, [pc, #164]	; (cf9c <hexdump_line_print+0xbc>)
		print_formatted(ctx, "\r\n");
    cef8:	4929      	ldrpl	r1, [pc, #164]	; (cfa0 <hexdump_line_print+0xc0>)
    cefa:	f7ff ff33 	bl	cd64 <print_formatted>
{
    cefe:	2500      	movs	r5, #0
		print_formatted(log_output, " ");
    cf00:	f8df 90a4 	ldr.w	r9, [pc, #164]	; cfa8 <hexdump_line_print+0xc8>
	for (int i = 0; i < prefix_offset; i++) {
    cf04:	4545      	cmp	r5, r8
    cf06:	db2a      	blt.n	cf5e <hexdump_line_print+0x7e>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    cf08:	2500      	movs	r5, #0
			print_formatted(log_output, "   ");
    cf0a:	f8df 80a0 	ldr.w	r8, [pc, #160]	; cfac <hexdump_line_print+0xcc>
			print_formatted(log_output, "%02x ", data[i]);
    cf0e:	f8df 90a0 	ldr.w	r9, [pc, #160]	; cfb0 <hexdump_line_print+0xd0>
			print_formatted(log_output, " ");
    cf12:	f8df a094 	ldr.w	sl, [pc, #148]	; cfa8 <hexdump_line_print+0xc8>
		if (i < length) {
    cf16:	42bd      	cmp	r5, r7
    cf18:	d22e      	bcs.n	cf78 <hexdump_line_print+0x98>
			print_formatted(log_output, "%02x ", data[i]);
    cf1a:	5d72      	ldrb	r2, [r6, r5]
    cf1c:	4649      	mov	r1, r9
    cf1e:	4620      	mov	r0, r4
    cf20:	f7ff ff20 	bl	cd64 <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    cf24:	3501      	adds	r5, #1
    cf26:	2d10      	cmp	r5, #16
    cf28:	d11f      	bne.n	cf6a <hexdump_line_print+0x8a>
	print_formatted(log_output, "|");
    cf2a:	491e      	ldr	r1, [pc, #120]	; (cfa4 <hexdump_line_print+0xc4>)
    cf2c:	4620      	mov	r0, r4
    cf2e:	f7ff ff19 	bl	cd64 <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    cf32:	2500      	movs	r5, #0
			print_formatted(log_output, " ");
    cf34:	f8df 8070 	ldr.w	r8, [pc, #112]	; cfa8 <hexdump_line_print+0xc8>
			print_formatted(log_output, "%c",
    cf38:	f8df 9078 	ldr.w	r9, [pc, #120]	; cfb4 <hexdump_line_print+0xd4>
		if (i < length) {
    cf3c:	42af      	cmp	r7, r5
    cf3e:	d927      	bls.n	cf90 <hexdump_line_print+0xb0>
			      isprint((int)c) ? c : '.');
    cf40:	5d72      	ldrb	r2, [r6, r5]
			print_formatted(log_output, "%c",
    cf42:	4649      	mov	r1, r9
			(((unsigned)c) <= (unsigned)'~'));
}

static inline int isprint(int c)
{
	return (int)((((unsigned)c) >= ' ') &&
    cf44:	f1a2 0320 	sub.w	r3, r2, #32
    cf48:	2b5f      	cmp	r3, #95	; 0x5f
    cf4a:	bf28      	it	cs
    cf4c:	222e      	movcs	r2, #46	; 0x2e
    cf4e:	4620      	mov	r0, r4
    cf50:	f7ff ff08 	bl	cd64 <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    cf54:	3501      	adds	r5, #1
    cf56:	2d10      	cmp	r5, #16
    cf58:	d113      	bne.n	cf82 <hexdump_line_print+0xa2>
}
    cf5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		print_formatted(log_output, " ");
    cf5e:	4649      	mov	r1, r9
    cf60:	4620      	mov	r0, r4
    cf62:	f7ff feff 	bl	cd64 <print_formatted>
	for (int i = 0; i < prefix_offset; i++) {
    cf66:	3501      	adds	r5, #1
    cf68:	e7cc      	b.n	cf04 <hexdump_line_print+0x24>
		if (i > 0 && !(i % 8)) {
    cf6a:	076a      	lsls	r2, r5, #29
    cf6c:	d1d3      	bne.n	cf16 <hexdump_line_print+0x36>
			print_formatted(log_output, " ");
    cf6e:	4651      	mov	r1, sl
    cf70:	4620      	mov	r0, r4
    cf72:	f7ff fef7 	bl	cd64 <print_formatted>
    cf76:	e7ce      	b.n	cf16 <hexdump_line_print+0x36>
			print_formatted(log_output, "   ");
    cf78:	4641      	mov	r1, r8
    cf7a:	4620      	mov	r0, r4
    cf7c:	f7ff fef2 	bl	cd64 <print_formatted>
    cf80:	e7d0      	b.n	cf24 <hexdump_line_print+0x44>
		if (i > 0 && !(i % 8)) {
    cf82:	076b      	lsls	r3, r5, #29
    cf84:	d1da      	bne.n	cf3c <hexdump_line_print+0x5c>
			print_formatted(log_output, " ");
    cf86:	4641      	mov	r1, r8
    cf88:	4620      	mov	r0, r4
    cf8a:	f7ff feeb 	bl	cd64 <print_formatted>
    cf8e:	e7d5      	b.n	cf3c <hexdump_line_print+0x5c>
			print_formatted(log_output, " ");
    cf90:	4641      	mov	r1, r8
    cf92:	4620      	mov	r0, r4
    cf94:	f7ff fee6 	bl	cd64 <print_formatted>
    cf98:	e7dc      	b.n	cf54 <hexdump_line_print+0x74>
    cf9a:	bf00      	nop
    cf9c:	0001ccf7 	.word	0x0001ccf7
    cfa0:	0001ccf6 	.word	0x0001ccf6
    cfa4:	0001c641 	.word	0x0001c641
    cfa8:	0001c63f 	.word	0x0001c63f
    cfac:	0001c63d 	.word	0x0001c63d
    cfb0:	0001c637 	.word	0x0001c637
    cfb4:	0001c643 	.word	0x0001c643

0000cfb8 <log_output_msg_process>:

void log_output_msg_process(const struct log_output *log_output,
			    struct log_msg *msg,
			    u32_t flags)
{
    cfb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return msg->hdr.ids.level;
    cfbc:	7a8b      	ldrb	r3, [r1, #10]
    cfbe:	4617      	mov	r7, r2
		log_output_msg_syst_process(log_output, msg, flags);
		return;
	}

	prefix_offset = raw_string ?
			0 : prefix_print(log_output, flags, std_msg, timestamp,
    cfc0:	f013 0407 	ands.w	r4, r3, #7
{
    cfc4:	b08a      	sub	sp, #40	; 0x28
    cfc6:	4605      	mov	r5, r0
    cfc8:	460e      	mov	r6, r1
	return  (msg->hdr.params.generic.type == LOG_MSG_TYPE_STD);
    cfca:	7a0a      	ldrb	r2, [r1, #8]
			0 : prefix_print(log_output, flags, std_msg, timestamp,
    cfcc:	d01c      	beq.n	d008 <log_output_msg_process+0x50>
    cfce:	43d2      	mvns	r2, r2
	return msg->hdr.ids.source_id;
    cfd0:	8949      	ldrh	r1, [r1, #10]
    cfd2:	f3c3 03c2 	ubfx	r3, r3, #3, #3
    cfd6:	0989      	lsrs	r1, r1, #6
    cfd8:	9102      	str	r1, [sp, #8]
    cfda:	e9cd 4300 	strd	r4, r3, [sp]
    cfde:	f002 0201 	and.w	r2, r2, #1
    cfe2:	68f3      	ldr	r3, [r6, #12]
    cfe4:	4639      	mov	r1, r7
    cfe6:	f7ff fecf 	bl	cd88 <prefix_print>
    cfea:	4681      	mov	r9, r0
	return  (msg->hdr.params.generic.type == LOG_MSG_TYPE_STD);
    cfec:	7a33      	ldrb	r3, [r6, #8]
					 level, domain_id, source_id);

	if (log_msg_is_std(msg)) {
    cfee:	07da      	lsls	r2, r3, #31
    cff0:	d40c      	bmi.n	d00c <log_output_msg_process+0x54>
		std_print(msg, log_output);
    cff2:	4629      	mov	r1, r5
    cff4:	4630      	mov	r0, r6
    cff6:	f00d f8b8 	bl	1a16a <std_print>
		raw_string_print(msg, log_output);
	} else {
		hexdump_print(msg, log_output, prefix_offset, flags);
	}

	if (!raw_string) {
    cffa:	b34c      	cbz	r4, d050 <log_output_msg_process+0x98>
		postfix_print(log_output, flags, level);
    cffc:	4622      	mov	r2, r4
    cffe:	4639      	mov	r1, r7
    d000:	4628      	mov	r0, r5
    d002:	f7ff ff4f 	bl	cea4 <postfix_print>
    d006:	e023      	b.n	d050 <log_output_msg_process+0x98>
			0 : prefix_print(log_output, flags, std_msg, timestamp,
    d008:	46a1      	mov	r9, r4
    d00a:	e7ef      	b.n	cfec <log_output_msg_process+0x34>
	} else if (raw_string) {
    d00c:	bb34      	cbnz	r4, d05c <log_output_msg_process+0xa4>
	size_t offset = 0;
    d00e:	4627      	mov	r7, r4
		length = log_output->size;
    d010:	68eb      	ldr	r3, [r5, #12]
		log_msg_hexdump_data_get(msg, log_output->buf, &length, offset);
    d012:	aa06      	add	r2, sp, #24
		length = log_output->size;
    d014:	9306      	str	r3, [sp, #24]
		log_msg_hexdump_data_get(msg, log_output->buf, &length, offset);
    d016:	68a9      	ldr	r1, [r5, #8]
    d018:	463b      	mov	r3, r7
    d01a:	4630      	mov	r0, r6
    d01c:	f00d f891 	bl	1a142 <log_msg_hexdump_data_get>
		log_output->control_block->offset = length;
    d020:	9a06      	ldr	r2, [sp, #24]
    d022:	686b      	ldr	r3, [r5, #4]
    d024:	601a      	str	r2, [r3, #0]
		if (length != 0) {
    d026:	b13a      	cbz	r2, d038 <log_output_msg_process+0x80>
			eol = (log_output->buf[length - 1] == '\n');
    d028:	68ab      	ldr	r3, [r5, #8]
    d02a:	4413      	add	r3, r2
    d02c:	f813 4c01 	ldrb.w	r4, [r3, #-1]
    d030:	f1a4 030a 	sub.w	r3, r4, #10
    d034:	425c      	negs	r4, r3
    d036:	415c      	adcs	r4, r3
		log_output_flush(log_output);
    d038:	4628      	mov	r0, r5
    d03a:	f00d f9f3 	bl	1a424 <log_output_flush>
		offset += length;
    d03e:	9b06      	ldr	r3, [sp, #24]
    d040:	441f      	add	r7, r3
	} while (length > 0);
    d042:	2b00      	cmp	r3, #0
    d044:	d1e4      	bne.n	d010 <log_output_msg_process+0x58>
	if (eol) {
    d046:	b11c      	cbz	r4, d050 <log_output_msg_process+0x98>
		print_formatted(log_output, "\r");
    d048:	4914      	ldr	r1, [pc, #80]	; (d09c <log_output_msg_process+0xe4>)
    d04a:	4628      	mov	r0, r5
    d04c:	f7ff fe8a 	bl	cd64 <print_formatted>
	}

	log_output_flush(log_output);
    d050:	4628      	mov	r0, r5
    d052:	f00d f9e7 	bl	1a424 <log_output_flush>
}
    d056:	b00a      	add	sp, #40	; 0x28
    d058:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	print_formatted(log_output, "%s", log_msg_str_get(msg));
    d05c:	4630      	mov	r0, r6
    d05e:	f00d f81a 	bl	1a096 <log_msg_str_get>
    d062:	490f      	ldr	r1, [pc, #60]	; (d0a0 <log_output_msg_process+0xe8>)
    d064:	4602      	mov	r2, r0
    d066:	4628      	mov	r0, r5
    d068:	f7ff fe7c 	bl	cd64 <print_formatted>
	u32_t offset = 0U;
    d06c:	f04f 0800 	mov.w	r8, #0
		length = sizeof(buf);
    d070:	f04f 0a10 	mov.w	sl, #16
		log_msg_hexdump_data_get(msg, buf, &length, offset);
    d074:	aa05      	add	r2, sp, #20
    d076:	4643      	mov	r3, r8
    d078:	a906      	add	r1, sp, #24
    d07a:	4630      	mov	r0, r6
		length = sizeof(buf);
    d07c:	f8cd a014 	str.w	sl, [sp, #20]
		log_msg_hexdump_data_get(msg, buf, &length, offset);
    d080:	f00d f85f 	bl	1a142 <log_msg_hexdump_data_get>
		if (length) {
    d084:	9a05      	ldr	r2, [sp, #20]
    d086:	2a00      	cmp	r2, #0
    d088:	d0b8      	beq.n	cffc <log_output_msg_process+0x44>
			hexdump_line_print(log_output, buf, length,
    d08a:	464b      	mov	r3, r9
    d08c:	9700      	str	r7, [sp, #0]
    d08e:	a906      	add	r1, sp, #24
    d090:	4628      	mov	r0, r5
    d092:	f7ff ff25 	bl	cee0 <hexdump_line_print>
			offset += length;
    d096:	9b05      	ldr	r3, [sp, #20]
    d098:	4498      	add	r8, r3
    d09a:	e7eb      	b.n	d074 <log_output_msg_process+0xbc>
    d09c:	0001c646 	.word	0x0001c646
    d0a0:	0001c6a3 	.word	0x0001c6a3

0000d0a4 <log_output_dropped_process>:
	postfix_print(log_output, flags, level);
	log_output_flush(log_output);
}

void log_output_dropped_process(const struct log_output *log_output, u32_t cnt)
{
    d0a4:	b573      	push	{r0, r1, r4, r5, r6, lr}
	int len;
	static const char prefix[] = DROPPED_COLOR_PREFIX "--- ";
	static const char postfix[] =
			" messages dropped ---\r\n" DROPPED_COLOR_POSTFIX;
	log_output_func_t outf = log_output->func;
	struct device *dev = (struct device *)log_output->control_block->ctx;
    d0a6:	e9d0 4300 	ldrd	r4, r3, [r0]
    d0aa:	685d      	ldr	r5, [r3, #4]

	cnt = MIN(cnt, 9999);
	len = snprintf(buf, sizeof(buf), "%d", cnt);
    d0ac:	f242 730f 	movw	r3, #9999	; 0x270f
    d0b0:	428b      	cmp	r3, r1
    d0b2:	bf28      	it	cs
    d0b4:	460b      	movcs	r3, r1
    d0b6:	4a0d      	ldr	r2, [pc, #52]	; (d0ec <log_output_dropped_process+0x48>)
    d0b8:	2105      	movs	r1, #5
    d0ba:	4668      	mov	r0, sp
    d0bc:	f001 fed0 	bl	ee60 <snprintf>
    d0c0:	4606      	mov	r6, r0

	buffer_write(outf, (u8_t *)prefix, sizeof(prefix) - 1, dev);
    d0c2:	462b      	mov	r3, r5
    d0c4:	4620      	mov	r0, r4
    d0c6:	220b      	movs	r2, #11
    d0c8:	4909      	ldr	r1, [pc, #36]	; (d0f0 <log_output_dropped_process+0x4c>)
    d0ca:	f00d f841 	bl	1a150 <buffer_write>
	buffer_write(outf, buf, len, dev);
    d0ce:	462b      	mov	r3, r5
    d0d0:	4632      	mov	r2, r6
    d0d2:	4669      	mov	r1, sp
    d0d4:	4620      	mov	r0, r4
    d0d6:	f00d f83b 	bl	1a150 <buffer_write>
	buffer_write(outf, (u8_t *)postfix, sizeof(postfix) - 1, dev);
    d0da:	462b      	mov	r3, r5
    d0dc:	221b      	movs	r2, #27
    d0de:	4905      	ldr	r1, [pc, #20]	; (d0f4 <log_output_dropped_process+0x50>)
    d0e0:	4620      	mov	r0, r4
    d0e2:	f00d f835 	bl	1a150 <buffer_write>
}
    d0e6:	b002      	add	sp, #8
    d0e8:	bd70      	pop	{r4, r5, r6, pc}
    d0ea:	bf00      	nop
    d0ec:	0001cd7e 	.word	0x0001cd7e
    d0f0:	0001c664 	.word	0x0001c664
    d0f4:	0001c648 	.word	0x0001c648

0000d0f8 <log_output_timestamp_freq_set>:

void log_output_timestamp_freq_set(u32_t frequency)
{
	timestamp_div = 1U;
    d0f8:	2301      	movs	r3, #1
	/* There is no point to have frequency higher than 1MHz (ns are not
	 * printed) and too high frequency leads to overflows in calculations.
	 */
	while (frequency > 1000000) {
    d0fa:	2100      	movs	r1, #0
	timestamp_div = 1U;
    d0fc:	4a07      	ldr	r2, [pc, #28]	; (d11c <log_output_timestamp_freq_set+0x24>)
{
    d0fe:	b510      	push	{r4, lr}
	while (frequency > 1000000) {
    d100:	4c07      	ldr	r4, [pc, #28]	; (d120 <log_output_timestamp_freq_set+0x28>)
	timestamp_div = 1U;
    d102:	6013      	str	r3, [r2, #0]
	while (frequency > 1000000) {
    d104:	42a0      	cmp	r0, r4
    d106:	d804      	bhi.n	d112 <log_output_timestamp_freq_set+0x1a>
    d108:	b101      	cbz	r1, d10c <log_output_timestamp_freq_set+0x14>
    d10a:	6013      	str	r3, [r2, #0]
		frequency /= 2U;
		timestamp_div *= 2U;
	}

	freq = frequency;
    d10c:	4b05      	ldr	r3, [pc, #20]	; (d124 <log_output_timestamp_freq_set+0x2c>)
    d10e:	6018      	str	r0, [r3, #0]
}
    d110:	bd10      	pop	{r4, pc}
		frequency /= 2U;
    d112:	0840      	lsrs	r0, r0, #1
		timestamp_div *= 2U;
    d114:	005b      	lsls	r3, r3, #1
    d116:	2101      	movs	r1, #1
    d118:	e7f4      	b.n	d104 <log_output_timestamp_freq_set+0xc>
    d11a:	bf00      	nop
    d11c:	20020140 	.word	0x20020140
    d120:	000f4240 	.word	0x000f4240
    d124:	2002013c 	.word	0x2002013c

0000d128 <log_backend_rtt_init>:
{
	if (CONFIG_LOG_BACKEND_RTT_BUFFER > 0) {
		log_backend_rtt_cfg();
	}

	host_present = true;
    d128:	2201      	movs	r2, #1
    d12a:	4b01      	ldr	r3, [pc, #4]	; (d130 <log_backend_rtt_init+0x8>)
    d12c:	701a      	strb	r2, [r3, #0]
	line_pos = line_buf;
}
    d12e:	4770      	bx	lr
    d130:	20024ce4 	.word	0x20024ce4

0000d134 <panic>:

static void panic(struct log_backend const *const backend)
{
    d134:	b508      	push	{r3, lr}
 * @param log_output	Log output instance.
 */
static inline void
log_backend_std_panic(const struct log_output *const log_output)
{
	log_output_flush(log_output);
    d136:	4803      	ldr	r0, [pc, #12]	; (d144 <panic+0x10>)
    d138:	f00d f974 	bl	1a424 <log_output_flush>
	log_backend_std_panic(&log_output);
	panic_mode = true;
    d13c:	2201      	movs	r2, #1
    d13e:	4b02      	ldr	r3, [pc, #8]	; (d148 <panic+0x14>)
    d140:	701a      	strb	r2, [r3, #0]
}
    d142:	bd08      	pop	{r3, pc}
    d144:	0001c0e8 	.word	0x0001c0e8
    d148:	20024ce5 	.word	0x20024ce5

0000d14c <dropped>:
 * @param cnt		Number of dropped messages.
 */
static inline void
log_backend_std_dropped(const struct log_output *const log_output, u32_t cnt)
{
	log_output_dropped_process(log_output, cnt);
    d14c:	4801      	ldr	r0, [pc, #4]	; (d154 <dropped+0x8>)
    d14e:	f7ff bfa9 	b.w	d0a4 <log_output_dropped_process>
    d152:	bf00      	nop
    d154:	0001c0e8 	.word	0x0001c0e8

0000d158 <put>:
{
    d158:	b510      	push	{r4, lr}
    d15a:	460c      	mov	r4, r1
	log_msg_get(msg);
    d15c:	4608      	mov	r0, r1
    d15e:	f00c ff62 	bl	1a026 <log_msg_get>
	log_output_msg_process(log_output, msg, flags);
    d162:	4621      	mov	r1, r4
    d164:	4804      	ldr	r0, [pc, #16]	; (d178 <put+0x20>)
    d166:	220f      	movs	r2, #15
    d168:	f7ff ff26 	bl	cfb8 <log_output_msg_process>
	log_msg_put(msg);
    d16c:	4620      	mov	r0, r4
}
    d16e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    d172:	f00c bf81 	b.w	1a078 <log_msg_put>
    d176:	bf00      	nop
    d178:	0001c0e8 	.word	0x0001c0e8

0000d17c <on_failed_write.part.0>:
	return IS_ENABLED(CONFIG_LOG_IMMEDIATE) || panic_mode;
    d17c:	4b04      	ldr	r3, [pc, #16]	; (d190 <on_failed_write.part.0+0x14>)
	} else if (is_sync_mode()) {
    d17e:	781b      	ldrb	r3, [r3, #0]
    d180:	b11b      	cbz	r3, d18a <on_failed_write.part.0+0xe>
	z_impl_k_busy_wait(usec_to_wait);
    d182:	f241 3088 	movw	r0, #5000	; 0x1388
    d186:	f00e bbee 	b.w	1b966 <z_impl_k_busy_wait>
	return z_impl_k_sleep(ms);
    d18a:	2005      	movs	r0, #5
    d18c:	f00b bf90 	b.w	190b0 <z_impl_k_sleep>
    d190:	20024ce5 	.word	0x20024ce5

0000d194 <data_out_block_mode>:
{
    d194:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	return IS_ENABLED(CONFIG_LOG_IMMEDIATE) || panic_mode;
    d198:	4f21      	ldr	r7, [pc, #132]	; (d220 <data_out_block_mode+0x8c>)
{
    d19a:	4682      	mov	sl, r0
    d19c:	460e      	mov	r6, r1
	int retry_cnt = CONFIG_LOG_BACKEND_RTT_RETRY_CNT;
    d19e:	2404      	movs	r4, #4
    d1a0:	46b8      	mov	r8, r7
	return z_impl_k_mutex_lock(mutex, timeout);
    d1a2:	f8df 9084 	ldr.w	r9, [pc, #132]	; d228 <data_out_block_mode+0x94>
		if (!is_sync_mode()) {
    d1a6:	783b      	ldrb	r3, [r7, #0]
    d1a8:	b923      	cbnz	r3, d1b4 <data_out_block_mode+0x20>
    d1aa:	f04f 31ff 	mov.w	r1, #4294967295
    d1ae:	4648      	mov	r0, r9
    d1b0:	f00b fb88 	bl	188c4 <z_impl_k_mutex_lock>
		ret = SEGGER_RTT_WriteSkipNoLock(CONFIG_LOG_BACKEND_RTT_BUFFER,
    d1b4:	4632      	mov	r2, r6
    d1b6:	4651      	mov	r1, sl
    d1b8:	2000      	movs	r0, #0
    d1ba:	f000 fa43 	bl	d644 <SEGGER_RTT_WriteSkipNoLock>
		if (!is_sync_mode()) {
    d1be:	f898 3000 	ldrb.w	r3, [r8]
		ret = SEGGER_RTT_WriteSkipNoLock(CONFIG_LOG_BACKEND_RTT_BUFFER,
    d1c2:	4683      	mov	fp, r0
		if (!is_sync_mode()) {
    d1c4:	b913      	cbnz	r3, d1cc <data_out_block_mode+0x38>
	return z_impl_k_mutex_unlock(mutex);
    d1c6:	4648      	mov	r0, r9
    d1c8:	f00b fbee 	bl	189a8 <z_impl_k_mutex_unlock>
		if (ret) {
    d1cc:	4d15      	ldr	r5, [pc, #84]	; (d224 <data_out_block_mode+0x90>)
    d1ce:	f1bb 0f00 	cmp.w	fp, #0
    d1d2:	d018      	beq.n	d206 <data_out_block_mode+0x72>
	host_present = true;
    d1d4:	2301      	movs	r3, #1
    d1d6:	702b      	strb	r3, [r5, #0]
	if (is_panic_mode()) {
    d1d8:	f898 3000 	ldrb.w	r3, [r8]
    d1dc:	b933      	cbnz	r3, d1ec <data_out_block_mode+0x58>
}
    d1de:	4630      	mov	r0, r6
    d1e0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (retry_cnt == 0) {
    d1e4:	b95c      	cbnz	r4, d1fe <data_out_block_mode+0x6a>
		host_present = false;
    d1e6:	702c      	strb	r4, [r5, #0]
    d1e8:	f04f 34ff 	mov.w	r4, #4294967295
		while (SEGGER_RTT_HasDataUp(CONFIG_LOG_BACKEND_RTT_BUFFER) &&
    d1ec:	2000      	movs	r0, #0
    d1ee:	f000 fa75 	bl	d6dc <SEGGER_RTT_HasDataUp>
    d1f2:	2800      	cmp	r0, #0
    d1f4:	d0f3      	beq.n	d1de <data_out_block_mode+0x4a>
    d1f6:	782b      	ldrb	r3, [r5, #0]
    d1f8:	2b00      	cmp	r3, #0
    d1fa:	d1f3      	bne.n	d1e4 <data_out_block_mode+0x50>
    d1fc:	e7ef      	b.n	d1de <data_out_block_mode+0x4a>
			on_failed_write(retry_cnt--);
    d1fe:	3c01      	subs	r4, #1
    d200:	f7ff ffbc 	bl	d17c <on_failed_write.part.0>
    d204:	e7f2      	b.n	d1ec <data_out_block_mode+0x58>
		} else if (host_present) {
    d206:	782b      	ldrb	r3, [r5, #0]
    d208:	b113      	cbz	r3, d210 <data_out_block_mode+0x7c>
	if (retry_cnt == 0) {
    d20a:	3c01      	subs	r4, #1
    d20c:	d104      	bne.n	d218 <data_out_block_mode+0x84>
		host_present = false;
    d20e:	702c      	strb	r4, [r5, #0]
	} while ((ret == 0) && host_present);
    d210:	782b      	ldrb	r3, [r5, #0]
    d212:	2b00      	cmp	r3, #0
    d214:	d1c7      	bne.n	d1a6 <data_out_block_mode+0x12>
    d216:	e7e2      	b.n	d1de <data_out_block_mode+0x4a>
    d218:	f7ff ffb0 	bl	d17c <on_failed_write.part.0>
    d21c:	e7f8      	b.n	d210 <data_out_block_mode+0x7c>
    d21e:	bf00      	nop
    d220:	20024ce5 	.word	0x20024ce5
    d224:	20024ce4 	.word	0x20024ce4
    d228:	200281d8 	.word	0x200281d8

0000d22c <socket_offload_register>:
void socket_offload_register(const struct socket_offload *ops)
{
	__ASSERT_NO_MSG(ops);
	__ASSERT_NO_MSG(socket_ops == NULL);

	socket_ops = ops;
    d22c:	4b01      	ldr	r3, [pc, #4]	; (d234 <socket_offload_register+0x8>)
    d22e:	6018      	str	r0, [r3, #0]
}
    d230:	4770      	bx	lr
    d232:	bf00      	nop
    d234:	20020158 	.word	0x20020158

0000d238 <sys_pm_create_device_list>:
		}
	}
}

void sys_pm_create_device_list(void)
{
    d238:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	/*
	 * Create an ordered list of devices that will be suspended.
	 * Ordering should be done based on dependencies. Devices
	 * in the beginning of the list will be resumed first.
	 */
	device_list_get(&pm_device_list, &count);
    d23c:	4819      	ldr	r0, [pc, #100]	; (d2a4 <sys_pm_create_device_list+0x6c>)
    d23e:	a901      	add	r1, sp, #4
    d240:	f00b f8da 	bl	183f8 <device_list_get>

	/* Reserve for 32KHz, 16MHz, system clock, etc... */
	device_count = NUM_CORE_DEVICES;
    d244:	2304      	movs	r3, #4

	for (i = 0; (i < count) && (device_count < MAX_PM_DEVICES); i++) {
    d246:	2400      	movs	r4, #0
    d248:	f04f 090c 	mov.w	r9, #12
	device_count = NUM_CORE_DEVICES;
    d24c:	4d16      	ldr	r5, [pc, #88]	; (d2a8 <sys_pm_create_device_list+0x70>)

		/* Check if the device is core device */
		for (j = 0, is_core_dev = false; j < NUM_CORE_DEVICES; j++) {
			if (!strcmp(pm_device_list[i].config->name,
    d24e:	f8df a054 	ldr.w	sl, [pc, #84]	; d2a4 <sys_pm_create_device_list+0x6c>
				break;
			}
		}

		if (is_core_dev) {
			device_ordered_list[j] = i;
    d252:	f8df 805c 	ldr.w	r8, [pc, #92]	; d2b0 <sys_pm_create_device_list+0x78>
	device_count = NUM_CORE_DEVICES;
    d256:	602b      	str	r3, [r5, #0]
	for (i = 0; (i < count) && (device_count < MAX_PM_DEVICES); i++) {
    d258:	9b01      	ldr	r3, [sp, #4]
    d25a:	42a3      	cmp	r3, r4
    d25c:	dd02      	ble.n	d264 <sys_pm_create_device_list+0x2c>
    d25e:	682b      	ldr	r3, [r5, #0]
    d260:	2b0e      	cmp	r3, #14
    d262:	dd02      	ble.n	d26a <sys_pm_create_device_list+0x32>
		} else {
			device_ordered_list[device_count++] = i;
		}
	}
}
    d264:	b003      	add	sp, #12
    d266:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		for (j = 0, is_core_dev = false; j < NUM_CORE_DEVICES; j++) {
    d26a:	2600      	movs	r6, #0
    d26c:	fb09 fb04 	mul.w	fp, r9, r4
    d270:	4f0e      	ldr	r7, [pc, #56]	; (d2ac <sys_pm_create_device_list+0x74>)
			if (!strcmp(pm_device_list[i].config->name,
    d272:	f8da 3000 	ldr.w	r3, [sl]
    d276:	4639      	mov	r1, r7
    d278:	f853 300b 	ldr.w	r3, [r3, fp]
    d27c:	6818      	ldr	r0, [r3, #0]
    d27e:	f00d faa7 	bl	1a7d0 <strcmp>
    d282:	b150      	cbz	r0, d29a <sys_pm_create_device_list+0x62>
		for (j = 0, is_core_dev = false; j < NUM_CORE_DEVICES; j++) {
    d284:	3601      	adds	r6, #1
    d286:	2e04      	cmp	r6, #4
    d288:	f107 0710 	add.w	r7, r7, #16
    d28c:	d1f1      	bne.n	d272 <sys_pm_create_device_list+0x3a>
			device_ordered_list[device_count++] = i;
    d28e:	682b      	ldr	r3, [r5, #0]
    d290:	1c5a      	adds	r2, r3, #1
    d292:	602a      	str	r2, [r5, #0]
    d294:	f848 4023 	str.w	r4, [r8, r3, lsl #2]
    d298:	e001      	b.n	d29e <sys_pm_create_device_list+0x66>
			device_ordered_list[j] = i;
    d29a:	f848 4026 	str.w	r4, [r8, r6, lsl #2]
	for (i = 0; (i < count) && (device_count < MAX_PM_DEVICES); i++) {
    d29e:	3401      	adds	r4, #1
    d2a0:	e7da      	b.n	d258 <sys_pm_create_device_list+0x20>
    d2a2:	bf00      	nop
    d2a4:	2002019c 	.word	0x2002019c
    d2a8:	2002015c 	.word	0x2002015c
    d2ac:	0001c6e2 	.word	0x0001c6e2
    d2b0:	20020160 	.word	0x20020160

0000d2b4 <clock_async_start>:

static const struct nrf_clock_control_sub_config *get_sub_config(
					struct device *dev,
					enum clock_control_nrf_type type)
{
	const struct nrf_clock_control_config *config =
    d2b4:	6803      	ldr	r3, [r0, #0]
}

static int clock_async_start(struct device *dev,
			     clock_control_subsys_t subsys,
			     struct clock_control_async_data *data)
{
    d2b6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	int key;
	u8_t ref;

	__ASSERT_NO_MSG(type < CLOCK_CONTROL_NRF_TYPE_COUNT);
	config = get_sub_config(dev, type);
	clk_data = get_sub_data(dev, type);
    d2ba:	f8d0 c008 	ldr.w	ip, [r0, #8]
{
    d2be:	4605      	mov	r5, r0
	const struct nrf_clock_control_config *config =
    d2c0:	691f      	ldr	r7, [r3, #16]
	return &config->subsys[type];
    d2c2:	b2ce      	uxtb	r6, r1
			((data != NULL) && (data->cb != NULL)));

	/* if node is in the list it means that it is scheduled for
	 * the second time.
	 */
	if ((data != NULL)
    d2c4:	b14a      	cbz	r2, d2da <clock_async_start+0x26>
	sys_snode_t *item = sys_slist_peek_head(list);
    d2c6:	230c      	movs	r3, #12
    d2c8:	4373      	muls	r3, r6
    d2ca:	f85c 3003 	ldr.w	r3, [ip, r3]
		if (item == node) {
    d2ce:	429a      	cmp	r2, r3
    d2d0:	d05b      	beq.n	d38a <clock_async_start+0xd6>
 *
 * @return a pointer on the next node (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_next(sys_snode_t *node);

Z_GENLIST_PEEK_NEXT(slist, snode)
    d2d2:	b113      	cbz	r3, d2da <clock_async_start+0x26>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
    d2d4:	681b      	ldr	r3, [r3, #0]
	} while (item);
    d2d6:	2b00      	cmp	r3, #0
    d2d8:	d1f9      	bne.n	d2ce <clock_async_start+0x1a>
	__asm__ volatile(
    d2da:	f04f 0320 	mov.w	r3, #32
    d2de:	f3ef 8011 	mrs	r0, BASEPRI
    d2e2:	f383 8811 	msr	BASEPRI, r3
    d2e6:	f3bf 8f6f 	isb	sy
	    && is_in_list(&clk_data->list, &data->node)) {
		return -EBUSY;
	}

	key = irq_lock();
	ref = ++clk_data->ref;
    d2ea:	210c      	movs	r1, #12
    d2ec:	4371      	muls	r1, r6
    d2ee:	eb0c 0301 	add.w	r3, ip, r1
    d2f2:	7a1c      	ldrb	r4, [r3, #8]
    d2f4:	3401      	adds	r4, #1
    d2f6:	b2e4      	uxtb	r4, r4
    d2f8:	721c      	strb	r4, [r3, #8]
	__asm__ volatile(
    d2fa:	f380 8811 	msr	BASEPRI, r0
    d2fe:	f3bf 8f6f 	isb	sy
	__ASSERT_NO_MSG(clk_data->ref > 0);
	irq_unlock(key);

	if (data) {
    d302:	b322      	cbz	r2, d34e <clock_async_start+0x9a>
    p_reg->INTENSET = mask;
}

NRF_STATIC_INLINE void nrf_clock_int_disable(NRF_CLOCK_Type * p_reg, uint32_t mask)
{
    p_reg->INTENCLR = mask;
    d304:	f04f 0e03 	mov.w	lr, #3
    d308:	4822      	ldr	r0, [pc, #136]	; (d394 <clock_async_start+0xe0>)
    d30a:	f8c0 e308 	str.w	lr, [r0, #776]	; 0x308
		bool already_started;

		clock_irqs_disable();
		already_started = clk_data->started;
    d30e:	7a58      	ldrb	r0, [r3, #9]
		if (!already_started) {
    d310:	b9a0      	cbnz	r0, d33c <clock_async_start+0x88>
	__asm__ volatile(
    d312:	f04f 0e20 	mov.w	lr, #32
    d316:	f3ef 8811 	mrs	r8, BASEPRI
    d31a:	f38e 8811 	msr	BASEPRI, lr
    d31e:	f3bf 8f6f 	isb	sy
	parent->next = child;
    d322:	6010      	str	r0, [r2, #0]
 * @param node A pointer on the node to append
 */
static inline void sys_slist_append(sys_slist_t *list,
				    sys_snode_t *node);

Z_GENLIST_APPEND(slist, snode)
    d324:	f8d3 e004 	ldr.w	lr, [r3, #4]
    d328:	f1be 0f00 	cmp.w	lr, #0
    d32c:	d120      	bne.n	d370 <clock_async_start+0xbc>
	list->tail = node;
    d32e:	605a      	str	r2, [r3, #4]
	list->head = node;
    d330:	f84c 2001 	str.w	r2, [ip, r1]
	__asm__ volatile(
    d334:	f388 8811 	msr	BASEPRI, r8
    d338:	f3bf 8f6f 	isb	sy
    p_reg->INTENSET = mask;
    d33c:	2103      	movs	r1, #3
    d33e:	4b15      	ldr	r3, [pc, #84]	; (d394 <clock_async_start+0xe0>)
    d340:	f8c3 1304 	str.w	r1, [r3, #772]	; 0x304
			list_append(&clk_data->list, &data->node);
		}
		clock_irqs_enable();

		if (already_started) {
    d344:	b118      	cbz	r0, d34e <clock_async_start+0x9a>
			data->cb(dev, data->user_data);
    d346:	e9d2 3101 	ldrd	r3, r1, [r2, #4]
    d34a:	4628      	mov	r0, r5
    d34c:	4798      	blx	r3
		}
	}

	if (ref == 1) {
    d34e:	2c01      	cmp	r4, #1
    d350:	d10c      	bne.n	d36c <clock_async_start+0xb8>
		bool do_start;

		do_start =  (config->start_handler) ?
    d352:	ea4f 1806 	mov.w	r8, r6, lsl #4
    d356:	f857 3008 	ldr.w	r3, [r7, r8]
				config->start_handler(dev) : true;
    d35a:	b96b      	cbnz	r3, d378 <clock_async_start+0xc4>
    return (uint32_t)((uint8_t *)p_reg + (uint32_t)task);
}

NRF_STATIC_INLINE void nrf_clock_task_trigger(NRF_CLOCK_Type * p_reg, nrf_clock_task_t task)
{
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    d35c:	2201      	movs	r2, #1
			if (IS_ENABLED(CONFIG_NRF52_ANOMALY_132_WORKAROUND) &&
			    (subsys == CLOCK_CONTROL_NRF_SUBSYS_LF)) {
				anomaly_132_workaround();
			}

			nrf_clock_task_trigger(NRF_CLOCK,
    d35e:	4447      	add	r7, r8
    d360:	7abb      	ldrb	r3, [r7, #10]
    d362:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    d366:	f503 43a0 	add.w	r3, r3, #20480	; 0x5000
    d36a:	601a      	str	r2, [r3, #0]
			 */
			clkstarted_handle(dev, type);
		}
	}

	return 0;
    d36c:	2000      	movs	r0, #0
    d36e:	e00e      	b.n	d38e <clock_async_start+0xda>
	parent->next = child;
    d370:	f8ce 2000 	str.w	r2, [lr]
	list->tail = node;
    d374:	605a      	str	r2, [r3, #4]
    d376:	e7dd      	b.n	d334 <clock_async_start+0x80>
				config->start_handler(dev) : true;
    d378:	4628      	mov	r0, r5
    d37a:	4798      	blx	r3
    d37c:	2800      	cmp	r0, #0
    d37e:	d1ed      	bne.n	d35c <clock_async_start+0xa8>
			clkstarted_handle(dev, type);
    d380:	4631      	mov	r1, r6
    d382:	4628      	mov	r0, r5
    d384:	f00d f8c7 	bl	1a516 <clkstarted_handle>
    d388:	e7f0      	b.n	d36c <clock_async_start+0xb8>
		return -EBUSY;
    d38a:	f06f 000f 	mvn.w	r0, #15
}
    d38e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    d392:	bf00      	nop
    d394:	40005000 	.word	0x40005000

0000d398 <clk_init>:
 * symbol.
 */
void nrf_power_clock_isr(void *arg);

static int clk_init(struct device *dev)
{
    d398:	b510      	push	{r4, lr}
	IRQ_CONNECT(DT_INST_0_NORDIC_NRF_CLOCK_IRQ_0,
    d39a:	2200      	movs	r2, #0
{
    d39c:	4604      	mov	r4, r0
	IRQ_CONNECT(DT_INST_0_NORDIC_NRF_CLOCK_IRQ_0,
    d39e:	2101      	movs	r1, #1
    d3a0:	2005      	movs	r0, #5
    d3a2:	f000 fa7f 	bl	d8a4 <z_arm_irq_priority_set>
		    DT_INST_0_NORDIC_NRF_CLOCK_IRQ_0_PRIORITY,
		    nrf_power_clock_isr, 0, 0);

	irq_enable(DT_INST_0_NORDIC_NRF_CLOCK_IRQ_0);
    d3a6:	2005      	movs	r0, #5
    d3a8:	f000 fa6c 	bl	d884 <arch_irq_enable>
    return false;
}

NRF_STATIC_INLINE void nrf_clock_lf_src_set(NRF_CLOCK_Type * p_reg, nrf_clock_lfclk_t source)
{
    p_reg->LFCLKSRC = (uint32_t)(source);
    d3ac:	2202      	movs	r2, #2
    d3ae:	4b07      	ldr	r3, [pc, #28]	; (d3cc <clk_init+0x34>)
	list->head = NULL;
    d3b0:	2000      	movs	r0, #0
    d3b2:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    p_reg->INTENSET = mask;
    d3b6:	2203      	movs	r2, #3
    d3b8:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304

	clock_irqs_enable();

	for (enum clock_control_nrf_type i = 0;
		i < CLOCK_CONTROL_NRF_TYPE_COUNT; i++) {
		sys_slist_init(&(get_sub_data(dev, i)->list));
    d3bc:	68a3      	ldr	r3, [r4, #8]
	list->tail = NULL;
    d3be:	e9c3 0000 	strd	r0, r0, [r3]
    d3c2:	68a3      	ldr	r3, [r4, #8]
    d3c4:	e9c3 0003 	strd	r0, r0, [r3, #12]
	}

	return 0;
}
    d3c8:	bd10      	pop	{r4, pc}
    d3ca:	bf00      	nop
    d3cc:	40005000 	.word	0x40005000

0000d3d0 <nrf_power_clock_isr>:
	}
#endif
}

void nrf_power_clock_isr(void *arg)
{
    d3d0:	b508      	push	{r3, lr}
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    d3d2:	4b10      	ldr	r3, [pc, #64]	; (d414 <nrf_power_clock_isr+0x44>)
    d3d4:	681a      	ldr	r2, [r3, #0]
	bool ret = nrf_clock_event_check(NRF_CLOCK, evt) &&
    d3d6:	b162      	cbz	r2, d3f2 <nrf_power_clock_isr+0x22>
    return p_reg->INTENSET & mask;
    d3d8:	4a0f      	ldr	r2, [pc, #60]	; (d418 <nrf_power_clock_isr+0x48>)
    d3da:	f8d2 2304 	ldr.w	r2, [r2, #772]	; 0x304
	if (ret) {
    d3de:	07d1      	lsls	r1, r2, #31
    d3e0:	d507      	bpl.n	d3f2 <nrf_power_clock_isr+0x22>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    d3e2:	2200      	movs	r2, #0
	struct device *dev = DEVICE_GET(clock_nrf);

	if (clock_event_check_and_clean(NRF_CLOCK_EVENT_HFCLKSTARTED,
					NRF_CLOCK_INT_HF_STARTED_MASK)) {
		struct nrf_clock_control_sub_data *data =
				get_sub_data(dev, CLOCK_CONTROL_NRF_TYPE_HFCLK);
    d3e4:	480d      	ldr	r0, [pc, #52]	; (d41c <nrf_power_clock_isr+0x4c>)
    d3e6:	601a      	str	r2, [r3, #0]

		/* Check needed due to anomaly 201:
		 * HFCLKSTARTED may be generated twice.
		 */
		if (!data->started) {
    d3e8:	6883      	ldr	r3, [r0, #8]
    d3ea:	7a59      	ldrb	r1, [r3, #9]
    d3ec:	b909      	cbnz	r1, d3f2 <nrf_power_clock_isr+0x22>
			clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_HFCLK);
    d3ee:	f00d f892 	bl	1a516 <clkstarted_handle>
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    d3f2:	4b0b      	ldr	r3, [pc, #44]	; (d420 <nrf_power_clock_isr+0x50>)
    d3f4:	681a      	ldr	r2, [r3, #0]
	bool ret = nrf_clock_event_check(NRF_CLOCK, evt) &&
    d3f6:	b162      	cbz	r2, d412 <nrf_power_clock_isr+0x42>
    return p_reg->INTENSET & mask;
    d3f8:	4a07      	ldr	r2, [pc, #28]	; (d418 <nrf_power_clock_isr+0x48>)
    d3fa:	f8d2 2304 	ldr.w	r2, [r2, #772]	; 0x304
	if (ret) {
    d3fe:	0792      	lsls	r2, r2, #30
    d400:	d507      	bpl.n	d412 <nrf_power_clock_isr+0x42>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    d402:	2200      	movs	r2, #0
					NRF_CLOCK_INT_LF_STARTED_MASK)) {
		if (IS_ENABLED(
			CONFIG_CLOCK_CONTROL_NRF_K32SRC_RC_CALIBRATION)) {
			z_nrf_clock_calibration_lfclk_started(dev);
		}
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_LFCLK);
    d404:	2101      	movs	r1, #1
    d406:	601a      	str	r2, [r3, #0]
    d408:	4804      	ldr	r0, [pc, #16]	; (d41c <nrf_power_clock_isr+0x4c>)
	usb_power_isr();

	if (IS_ENABLED(CONFIG_CLOCK_CONTROL_NRF_K32SRC_RC_CALIBRATION)) {
		z_nrf_clock_calibration_isr();
	}
}
    d40a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_LFCLK);
    d40e:	f00d b882 	b.w	1a516 <clkstarted_handle>
}
    d412:	bd08      	pop	{r3, pc}
    d414:	40005100 	.word	0x40005100
    d418:	40005000 	.word	0x40005000
    d41c:	200280fc 	.word	0x200280fc
    d420:	40005104 	.word	0x40005104

0000d424 <rtc1_nrf_isr>:
 * symbol.
 */
void rtc1_nrf_isr(void *arg)
{
	ARG_UNUSED(arg);
	RTC->EVENTS_COMPARE[0] = 0;
    d424:	2200      	movs	r2, #0
    d426:	4b0d      	ldr	r3, [pc, #52]	; (d45c <rtc1_nrf_isr+0x38>)
    d428:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
	__asm__ volatile(
    d42c:	f04f 0220 	mov.w	r2, #32
    d430:	f3ef 8111 	mrs	r1, BASEPRI
    d434:	f382 8811 	msr	BASEPRI, r2
    d438:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&lock);
	u32_t t = counter();
	u32_t dticks = counter_sub(t, last_count) / CYC_PER_TICK;
    d43c:	4a08      	ldr	r2, [pc, #32]	; (d460 <rtc1_nrf_isr+0x3c>)
#endif
}

NRF_STATIC_INLINE uint32_t nrf_rtc_counter_get(NRF_RTC_Type const * p_reg)
{
     return p_reg->COUNTER;
    d43e:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
    d442:	6813      	ldr	r3, [r2, #0]
	return (a - b) & COUNTER_MAX;
    d444:	1ac0      	subs	r0, r0, r3
    d446:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000

	last_count += dticks * CYC_PER_TICK;
    d44a:	4403      	add	r3, r0
    d44c:	6013      	str	r3, [r2, #0]
	__asm__ volatile(
    d44e:	f381 8811 	msr	BASEPRI, r1
    d452:	f3bf 8f6f 	isb	sy
		}
		set_comparator(next);
	}

	k_spin_unlock(&lock, key);
	z_clock_announce(IS_ENABLED(CONFIG_TICKLESS_KERNEL) ? dticks : 1);
    d456:	f00c b849 	b.w	194ec <z_clock_announce>
    d45a:	bf00      	nop
    d45c:	40015000 	.word	0x40015000
    d460:	200201b8 	.word	0x200201b8

0000d464 <z_clock_driver_init>:
}

int z_clock_driver_init(struct device *device)
{
    d464:	b570      	push	{r4, r5, r6, lr}
    d466:	4815      	ldr	r0, [pc, #84]	; (d4bc <z_clock_driver_init+0x58>)
    d468:	f00a ffa0 	bl	183ac <z_impl_device_get_binding>
	struct device *clock;

	ARG_UNUSED(device);

	clock = device_get_binding(DT_INST_0_NORDIC_NRF_CLOCK_LABEL);
	if (!clock) {
    d46c:	b310      	cbz	r0, d4b4 <z_clock_driver_init+0x50>
				   clock_control_subsys_t sys)
{
	const struct clock_control_driver_api *api =
		(const struct clock_control_driver_api *)dev->driver_api;

	return api->on(dev, sys);
    d46e:	6843      	ldr	r3, [r0, #4]
    d470:	2101      	movs	r1, #1
    d472:	681b      	ldr	r3, [r3, #0]
    d474:	4798      	blx	r3
}

NRF_STATIC_INLINE void nrf_rtc_prescaler_set(NRF_RTC_Type * p_reg, uint32_t val)
{
    NRFX_ASSERT(val <= (RTC_PRESCALER_PRESCALER_Msk >> RTC_PRESCALER_PRESCALER_Pos));
    p_reg->PRESCALER = val;
    d476:	2400      	movs	r4, #0
    p_reg->CC[ch] = cc_val;
    d478:	2601      	movs	r6, #1
    p_reg->INTENSET = mask;
    d47a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    d47e:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
    p_reg->PRESCALER = val;
    d482:	4d0f      	ldr	r5, [pc, #60]	; (d4c0 <z_clock_driver_init+0x5c>)

	/* Clear the event flag and possible pending interrupt */
	nrf_rtc_event_clear(RTC, NRF_RTC_EVENT_COMPARE_0);
	NVIC_ClearPendingIRQ(RTC1_IRQn);

	IRQ_CONNECT(RTC1_IRQn, 1, rtc1_nrf_isr, 0, 0);
    d484:	4631      	mov	r1, r6
    d486:	f8c5 4508 	str.w	r4, [r5, #1288]	; 0x508
    p_reg->CC[ch] = cc_val;
    d48a:	f8c5 6540 	str.w	r6, [r5, #1344]	; 0x540
    p_reg->INTENSET = mask;
    d48e:	f8c5 3304 	str.w	r3, [r5, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    d492:	4b0c      	ldr	r3, [pc, #48]	; (d4c4 <z_clock_driver_init+0x60>)
    d494:	2015      	movs	r0, #21
    d496:	601c      	str	r4, [r3, #0]
    d498:	4b0b      	ldr	r3, [pc, #44]	; (d4c8 <z_clock_driver_init+0x64>)
    d49a:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    d49e:	4622      	mov	r2, r4
    d4a0:	f000 fa00 	bl	d8a4 <z_arm_irq_priority_set>
	irq_enable(RTC1_IRQn);
    d4a4:	2015      	movs	r0, #21
    d4a6:	f000 f9ed 	bl	d884 <arch_irq_enable>

	if (!IS_ENABLED(CONFIG_TICKLESS_KERNEL)) {
		set_comparator(counter() + CYC_PER_TICK);
	}

	return 0;
    d4aa:	4620      	mov	r0, r4
    return (uint32_t)p_reg + task;
}

NRF_STATIC_INLINE void nrf_rtc_task_trigger(NRF_RTC_Type * p_reg, nrf_rtc_task_t task)
{
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
    d4ac:	4b07      	ldr	r3, [pc, #28]	; (d4cc <z_clock_driver_init+0x68>)
    d4ae:	601e      	str	r6, [r3, #0]
    d4b0:	602e      	str	r6, [r5, #0]
}
    d4b2:	bd70      	pop	{r4, r5, r6, pc}
		return -1;
    d4b4:	f04f 30ff 	mov.w	r0, #4294967295
    d4b8:	e7fb      	b.n	d4b2 <z_clock_driver_init+0x4e>
    d4ba:	bf00      	nop
    d4bc:	0001c722 	.word	0x0001c722
    d4c0:	40015000 	.word	0x40015000
    d4c4:	40015140 	.word	0x40015140
    d4c8:	e000e100 	.word	0xe000e100
    d4cc:	40015008 	.word	0x40015008

0000d4d0 <z_clock_set_timeout>:

void z_clock_set_timeout(s32_t ticks, bool idle)
{
    d4d0:	b570      	push	{r4, r5, r6, lr}
	ARG_UNUSED(idle);

#ifdef CONFIG_TICKLESS_KERNEL
	ticks = (ticks == K_FOREVER) ? MAX_TICKS : ticks;
    d4d2:	4c25      	ldr	r4, [pc, #148]	; (d568 <z_clock_set_timeout+0x98>)
    d4d4:	f1b0 3fff 	cmp.w	r0, #4294967295
    d4d8:	bf08      	it	eq
    d4da:	4620      	moveq	r0, r4
	__asm__ volatile(
    d4dc:	f04f 0320 	mov.w	r3, #32
    d4e0:	f3ef 8511 	mrs	r5, BASEPRI
    d4e4:	f383 8811 	msr	BASEPRI, r3
    d4e8:	f3bf 8f6f 	isb	sy
     return p_reg->COUNTER;
    d4ec:	4b1f      	ldr	r3, [pc, #124]	; (d56c <z_clock_set_timeout+0x9c>)
    d4ee:	f8d3 1504 	ldr.w	r1, [r3, #1284]	; 0x504
	ticks = MAX(MIN(ticks - 1, (s32_t)MAX_TICKS), 0);

	k_spinlock_key_t key = k_spin_lock(&lock);
	u32_t cyc, dt, t = counter();
	u32_t unannounced = counter_sub(t, last_count);
    d4f2:	4b1f      	ldr	r3, [pc, #124]	; (d570 <z_clock_set_timeout+0xa0>)
    d4f4:	681b      	ldr	r3, [r3, #0]
	return (a - b) & COUNTER_MAX;
    d4f6:	1aca      	subs	r2, r1, r3
    d4f8:	f022 467f 	bic.w	r6, r2, #4278190080	; 0xff000000
	/* If we haven't announced for more than half the 24-bit wrap
	 * duration, then force an announce to avoid loss of a wrap
	 * event.  This can happen if new timeouts keep being set
	 * before the existing one triggers the interrupt.
	 */
	if (unannounced >= COUNTER_HALF_SPAN) {
    d4fc:	0212      	lsls	r2, r2, #8
    d4fe:	d41a      	bmi.n	d536 <z_clock_set_timeout+0x66>
	ticks = MAX(MIN(ticks - 1, (s32_t)MAX_TICKS), 0);
    d500:	1e42      	subs	r2, r0, #1
    d502:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
    d506:	42a2      	cmp	r2, r4
    d508:	bfa8      	it	ge
    d50a:	4622      	movge	r2, r4
	}

	/* Get the cycles from last_count to the tick boundary after
	 * the requested ticks have passed starting now.
	 */
	cyc = ticks * CYC_PER_TICK + 1 + unannounced;
    d50c:	1c70      	adds	r0, r6, #1
    d50e:	4410      	add	r0, r2
	 */
	if (cyc > MAX_CYCLES) {
		cyc = MAX_CYCLES;
	}

	cyc += last_count;
    d510:	42a0      	cmp	r0, r4
    d512:	bf94      	ite	ls
    d514:	1818      	addls	r0, r3, r0
    d516:	1918      	addhi	r0, r3, r4
	return (a - b) & COUNTER_MAX;
    d518:	1a41      	subs	r1, r0, r1
    d51a:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
    d51e:	4a13      	ldr	r2, [pc, #76]	; (d56c <z_clock_set_timeout+0x9c>)
    d520:	f020 437f 	bic.w	r3, r0, #4278190080	; 0xff000000
	 * least on nRF52.  Some experimentation on nrf52840 shows
	 * that you need to be early by about 400 processor cycles
	 * (about 1/5th of a RTC cycle) in order to reliably get the
	 * interrupt.  The docs say two cycles, they mean two cycles.
	 */
	if (counter_sub(cyc, t) > 2) {
    d524:	2902      	cmp	r1, #2
    p_reg->CC[ch] = cc_val;
    d526:	f8c2 3540 	str.w	r3, [r2, #1344]	; 0x540
    d52a:	d906      	bls.n	d53a <z_clock_set_timeout+0x6a>
	__asm__ volatile(
    d52c:	f385 8811 	msr	BASEPRI, r5
    d530:	f3bf 8f6f 	isb	sy
	}
#endif

	k_spin_unlock(&lock, key);
#endif /* CONFIG_TICKLESS_KERNEL */
}
    d534:	bd70      	pop	{r4, r5, r6, pc}
		ticks = 0;
    d536:	2200      	movs	r2, #0
    d538:	e7e8      	b.n	d50c <z_clock_set_timeout+0x3c>
     return p_reg->COUNTER;
    d53a:	f8d2 3504 	ldr.w	r3, [r2, #1284]	; 0x504
		if (dt == 0 || dt > 0x7fffff) {
    d53e:	490d      	ldr	r1, [pc, #52]	; (d574 <z_clock_set_timeout+0xa4>)
	return (a - b) & COUNTER_MAX;
    d540:	1ac3      	subs	r3, r0, r3
    d542:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
		if (dt == 0 || dt > 0x7fffff) {
    d546:	1e5c      	subs	r4, r3, #1
    d548:	428c      	cmp	r4, r1
    d54a:	d905      	bls.n	d558 <z_clock_set_timeout+0x88>
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    d54c:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
    d550:	4b09      	ldr	r3, [pc, #36]	; (d578 <z_clock_set_timeout+0xa8>)
    d552:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
    d556:	e7e9      	b.n	d52c <z_clock_set_timeout+0x5c>
		} else if (dt == 1) {
    d558:	2b01      	cmp	r3, #1
			set_comparator(cyc + 2);
    d55a:	bf02      	ittt	eq
    d55c:	3002      	addeq	r0, #2
	nrf_rtc_cc_set(RTC, 0, cyc & COUNTER_MAX);
    d55e:	f020 407f 	biceq.w	r0, r0, #4278190080	; 0xff000000
    p_reg->CC[ch] = cc_val;
    d562:	f8c2 0540 	streq.w	r0, [r2, #1344]	; 0x540
    d566:	e7e1      	b.n	d52c <z_clock_set_timeout+0x5c>
    d568:	00fffffe 	.word	0x00fffffe
    d56c:	40015000 	.word	0x40015000
    d570:	200201b8 	.word	0x200201b8
    d574:	007ffffe 	.word	0x007ffffe
    d578:	e000e100 	.word	0xe000e100

0000d57c <z_clock_elapsed>:
	__asm__ volatile(
    d57c:	f04f 0220 	mov.w	r2, #32
    d580:	f3ef 8311 	mrs	r3, BASEPRI
    d584:	f382 8811 	msr	BASEPRI, r2
    d588:	f3bf 8f6f 	isb	sy
     return p_reg->COUNTER;
    d58c:	4a06      	ldr	r2, [pc, #24]	; (d5a8 <z_clock_elapsed+0x2c>)
    d58e:	f8d2 0504 	ldr.w	r0, [r2, #1284]	; 0x504
	if (!IS_ENABLED(CONFIG_TICKLESS_KERNEL)) {
		return 0;
	}

	k_spinlock_key_t key = k_spin_lock(&lock);
	u32_t ret = counter_sub(counter(), last_count) / CYC_PER_TICK;
    d592:	4a06      	ldr	r2, [pc, #24]	; (d5ac <z_clock_elapsed+0x30>)
	return (a - b) & COUNTER_MAX;
    d594:	6812      	ldr	r2, [r2, #0]
    d596:	1a80      	subs	r0, r0, r2
    d598:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
	__asm__ volatile(
    d59c:	f383 8811 	msr	BASEPRI, r3
    d5a0:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&lock, key);
	return ret;
}
    d5a4:	4770      	bx	lr
    d5a6:	bf00      	nop
    d5a8:	40015000 	.word	0x40015000
    d5ac:	200201b8 	.word	0x200201b8

0000d5b0 <z_timer_cycle_get_32>:
	__asm__ volatile(
    d5b0:	f04f 0320 	mov.w	r3, #32
    d5b4:	f3ef 8211 	mrs	r2, BASEPRI
    d5b8:	f383 8811 	msr	BASEPRI, r3
    d5bc:	f3bf 8f6f 	isb	sy

u32_t z_timer_cycle_get_32(void)
{
	k_spinlock_key_t key = k_spin_lock(&lock);
	u32_t ret = counter_sub(counter(), last_count) + last_count;
    d5c0:	4906      	ldr	r1, [pc, #24]	; (d5dc <z_timer_cycle_get_32+0x2c>)
    d5c2:	4b07      	ldr	r3, [pc, #28]	; (d5e0 <z_timer_cycle_get_32+0x30>)
    d5c4:	6808      	ldr	r0, [r1, #0]
    d5c6:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
	__asm__ volatile(
    d5ca:	f382 8811 	msr	BASEPRI, r2
    d5ce:	f3bf 8f6f 	isb	sy
	return (a - b) & COUNTER_MAX;
    d5d2:	1a1b      	subs	r3, r3, r0
    d5d4:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000

	k_spin_unlock(&lock, key);
	return ret;
}
    d5d8:	4418      	add	r0, r3
    d5da:	4770      	bx	lr
    d5dc:	200201b8 	.word	0x200201b8
    d5e0:	40015000 	.word	0x40015000

0000d5e4 <_DoInit>:
  SEGGER_RTT_CB* p;
  //
  // Initialize control block
  //
  p = &_SEGGER_RTT;
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
    d5e4:	2303      	movs	r3, #3
static void _DoInit(void) {
    d5e6:	b510      	push	{r4, lr}
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
    d5e8:	4c10      	ldr	r4, [pc, #64]	; (d62c <_DoInit+0x48>)
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
    d5ea:	4a11      	ldr	r2, [pc, #68]	; (d630 <_DoInit+0x4c>)
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
    d5ec:	e9c4 3304 	strd	r3, r3, [r4, #16]
  p->aUp[0].pBuffer       = _acUpBuffer;
    d5f0:	4b10      	ldr	r3, [pc, #64]	; (d634 <_DoInit+0x50>)
  p->aUp[0].sName         = "Terminal";
    d5f2:	61a2      	str	r2, [r4, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
    d5f4:	61e3      	str	r3, [r4, #28]
  p->aUp[0].SizeOfBuffer  = sizeof(_acUpBuffer);
    d5f6:	f44f 6380 	mov.w	r3, #1024	; 0x400
  p->aUp[0].WrOff         = 0u;
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
    d5fa:	6622      	str	r2, [r4, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
    d5fc:	4a0e      	ldr	r2, [pc, #56]	; (d638 <_DoInit+0x54>)
  p->aUp[0].SizeOfBuffer  = sizeof(_acUpBuffer);
    d5fe:	6223      	str	r3, [r4, #32]
  p->aDown[0].pBuffer       = _acDownBuffer;
    d600:	6662      	str	r2, [r4, #100]	; 0x64
  p->aUp[0].RdOff         = 0u;
    d602:	2300      	movs	r3, #0
  p->aDown[0].SizeOfBuffer  = sizeof(_acDownBuffer);
    d604:	2210      	movs	r2, #16
  //
  // Finish initialization of the control block.
  // Copy Id string in three steps to make sure "SEGGER RTT" is not found
  // in initializer memory (usually flash) by J-Link
  //
  strcpy(&p->acID[7], "RTT");
    d606:	490d      	ldr	r1, [pc, #52]	; (d63c <_DoInit+0x58>)
    d608:	1de0      	adds	r0, r4, #7
  p->aUp[0].RdOff         = 0u;
    d60a:	62a3      	str	r3, [r4, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
    d60c:	6263      	str	r3, [r4, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
    d60e:	62e3      	str	r3, [r4, #44]	; 0x2c
  p->aDown[0].RdOff         = 0u;
    d610:	6723      	str	r3, [r4, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
    d612:	66e3      	str	r3, [r4, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
    d614:	6763      	str	r3, [r4, #116]	; 0x74
  p->aDown[0].SizeOfBuffer  = sizeof(_acDownBuffer);
    d616:	66a2      	str	r2, [r4, #104]	; 0x68
  strcpy(&p->acID[7], "RTT");
    d618:	f00d f8a8 	bl	1a76c <strcpy>
  strcpy(&p->acID[0], "SEGGER");
    d61c:	4908      	ldr	r1, [pc, #32]	; (d640 <_DoInit+0x5c>)
    d61e:	4620      	mov	r0, r4
    d620:	f00d f8a4 	bl	1a76c <strcpy>
  p->acID[6] = ' ';
    d624:	2320      	movs	r3, #32
    d626:	71a3      	strb	r3, [r4, #6]
}
    d628:	bd10      	pop	{r4, pc}
    d62a:	bf00      	nop
    d62c:	200201bc 	.word	0x200201bc
    d630:	0001c74c 	.word	0x0001c74c
    d634:	20024cf6 	.word	0x20024cf6
    d638:	20024ce6 	.word	0x20024ce6
    d63c:	0001c755 	.word	0x0001c755
    d640:	0001c759 	.word	0x0001c759

0000d644 <SEGGER_RTT_WriteSkipNoLock>:
*    (2) For performance reasons this function does not call Init()
*        and may only be called after RTT has been initialized.
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*/
#if (RTT_USE_ASM == 0)
unsigned SEGGER_RTT_WriteSkipNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
    d644:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  //
  // 1) is the most common case for large buffers and assuming that J-Link reads the data fast enough
  //
  pData = (const char *)pBuffer;
  pRing = &_SEGGER_RTT.aUp[BufferIndex];
  RdOff = pRing->RdOff;
    d648:	f04f 0b18 	mov.w	fp, #24
    d64c:	4e22      	ldr	r6, [pc, #136]	; (d6d8 <SEGGER_RTT_WriteSkipNoLock+0x94>)
unsigned SEGGER_RTT_WriteSkipNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
    d64e:	4614      	mov	r4, r2
  RdOff = pRing->RdOff;
    d650:	fb0b 6200 	mla	r2, fp, r0, r6
    d654:	6a93      	ldr	r3, [r2, #40]	; 0x28
  WrOff = pRing->WrOff;
    d656:	6a55      	ldr	r5, [r2, #36]	; 0x24
unsigned SEGGER_RTT_WriteSkipNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
    d658:	4607      	mov	r7, r0
  if (RdOff <= WrOff) {                                 // Case 1), 2) or 3)
    d65a:	42ab      	cmp	r3, r5
unsigned SEGGER_RTT_WriteSkipNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
    d65c:	4688      	mov	r8, r1
  if (RdOff <= WrOff) {                                 // Case 1), 2) or 3)
    d65e:	d834      	bhi.n	d6ca <SEGGER_RTT_WriteSkipNoLock+0x86>
    Avail = pRing->SizeOfBuffer - WrOff - 1u;           // Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
    d660:	f8d2 a020 	ldr.w	sl, [r2, #32]
    d664:	ebaa 0905 	sub.w	r9, sl, r5
    d668:	f109 32ff 	add.w	r2, r9, #4294967295
    if (Avail >= NumBytes) {                            // Case 1)?
    d66c:	42a2      	cmp	r2, r4
    d66e:	d311      	bcc.n	d694 <SEGGER_RTT_WriteSkipNoLock+0x50>
CopyStraight:
      memcpy(pRing->pBuffer + WrOff, pData, NumBytes);
    d670:	f04f 0918 	mov.w	r9, #24
    d674:	fb07 9309 	mla	r3, r7, r9, r9
    d678:	4433      	add	r3, r6
    d67a:	6858      	ldr	r0, [r3, #4]
    d67c:	4622      	mov	r2, r4
    d67e:	4641      	mov	r1, r8
    d680:	4428      	add	r0, r5
    d682:	f00d f8d0 	bl	1a826 <memcpy>
      pRing->WrOff = WrOff + NumBytes;
    d686:	fb09 6607 	mla	r6, r9, r7, r6
    d68a:	442c      	add	r4, r5
      //
      if (NumBytes) {
        memcpy(pRing->pBuffer, pData + Rem, NumBytes);
      }
      pRing->WrOff = NumBytes;
      return 1;
    d68c:	2001      	movs	r0, #1
      pRing->WrOff = NumBytes;
    d68e:	6274      	str	r4, [r6, #36]	; 0x24
    if (Avail >= NumBytes) {                           // Case 4)? => If not, we have case 5) (does not fit)
      goto CopyStraight;
    }
  }
  return 0;     // No space in buffer
}
    d690:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    Avail += RdOff;                                     // Space incl. wrap-around
    d694:	4413      	add	r3, r2
    if (Avail >= NumBytes) {                            // Case 2? => If not, we have case 3) (does not fit)
    d696:	429c      	cmp	r4, r3
    d698:	d81b      	bhi.n	d6d2 <SEGGER_RTT_WriteSkipNoLock+0x8e>
      memcpy(pRing->pBuffer + WrOff, pData, Rem);       // Copy 1st chunk
    d69a:	fb00 bb0b 	mla	fp, r0, fp, fp
    d69e:	44b3      	add	fp, r6
    d6a0:	f8db 0004 	ldr.w	r0, [fp, #4]
    d6a4:	464a      	mov	r2, r9
    d6a6:	4428      	add	r0, r5
    d6a8:	442c      	add	r4, r5
    d6aa:	f00d f8bc 	bl	1a826 <memcpy>
      if (NumBytes) {
    d6ae:	ebb4 040a 	subs.w	r4, r4, sl
    d6b2:	d006      	beq.n	d6c2 <SEGGER_RTT_WriteSkipNoLock+0x7e>
        memcpy(pRing->pBuffer, pData + Rem, NumBytes);
    d6b4:	4622      	mov	r2, r4
    d6b6:	eb08 0109 	add.w	r1, r8, r9
    d6ba:	f8db 0004 	ldr.w	r0, [fp, #4]
    d6be:	f00d f8b2 	bl	1a826 <memcpy>
      pRing->WrOff = NumBytes;
    d6c2:	2318      	movs	r3, #24
    d6c4:	fb03 6607 	mla	r6, r3, r7, r6
    d6c8:	e7e0      	b.n	d68c <SEGGER_RTT_WriteSkipNoLock+0x48>
    Avail = RdOff - WrOff - 1u;
    d6ca:	3b01      	subs	r3, #1
    d6cc:	1b5b      	subs	r3, r3, r5
    if (Avail >= NumBytes) {                           // Case 4)? => If not, we have case 5) (does not fit)
    d6ce:	429c      	cmp	r4, r3
    d6d0:	d9ce      	bls.n	d670 <SEGGER_RTT_WriteSkipNoLock+0x2c>
  return 0;     // No space in buffer
    d6d2:	2000      	movs	r0, #0
    d6d4:	e7dc      	b.n	d690 <SEGGER_RTT_WriteSkipNoLock+0x4c>
    d6d6:	bf00      	nop
    d6d8:	200201bc 	.word	0x200201bc

0000d6dc <SEGGER_RTT_HasDataUp>:
unsigned SEGGER_RTT_HasDataUp(unsigned BufferIndex) {
  SEGGER_RTT_BUFFER_UP* pRing;
  unsigned                v;

  pRing = &_SEGGER_RTT.aUp[BufferIndex];
  v = pRing->RdOff;
    d6dc:	2318      	movs	r3, #24
    d6de:	4a03      	ldr	r2, [pc, #12]	; (d6ec <SEGGER_RTT_HasDataUp+0x10>)
    d6e0:	fb03 2300 	mla	r3, r3, r0, r2
    d6e4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
  return pRing->WrOff - v;
    d6e6:	6a58      	ldr	r0, [r3, #36]	; 0x24
}
    d6e8:	1a80      	subs	r0, r0, r2
    d6ea:	4770      	bx	lr
    d6ec:	200201bc 	.word	0x200201bc

0000d6f0 <z_arm_exc_exit>:
    /* r0 contains the caller mode */
    push {r0, lr}
#endif

#ifdef CONFIG_PREEMPT_ENABLED
    ldr r0, =_kernel
    d6f0:	4804      	ldr	r0, [pc, #16]	; (d704 <_EXIT_EXC+0x2>)

    ldr r1, [r0, #_kernel_offset_to_current]
    d6f2:	6881      	ldr	r1, [r0, #8]

    ldr r0, [r0, #_kernel_offset_to_ready_q_cache]
    d6f4:	6a40      	ldr	r0, [r0, #36]	; 0x24
    cmp r0, r1
    d6f6:	4288      	cmp	r0, r1
    beq _EXIT_EXC
    d6f8:	d003      	beq.n	d702 <_EXIT_EXC>

#if defined(CONFIG_CPU_CORTEX_M)
    /* context switch required, pend the PendSV exception */
    ldr r1, =_SCS_ICSR
    d6fa:	4903      	ldr	r1, [pc, #12]	; (d708 <_EXIT_EXC+0x6>)
    ldr r2, =_SCS_ICSR_PENDSV
    d6fc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    str r2, [r1]
    d700:	600a      	str	r2, [r1, #0]

0000d702 <_EXIT_EXC>:
    bl z_check_stack_sentinel
#endif /* CONFIG_CPU_CORTEX_M */
#endif /* CONFIG_STACK_SENTINEL */

#if defined(CONFIG_CPU_CORTEX_M)
    bx lr
    d702:	4770      	bx	lr
    ldr r0, =_kernel
    d704:	20024bc4 	.word	0x20024bc4
    ldr r1, =_SCS_ICSR
    d708:	e000ed04 	.word	0xe000ed04

0000d70c <z_arm_pendsv>:
    pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_TRACING */

    /* load _kernel into r1 and current k_thread into r2 */
    ldr r1, =_kernel
    d70c:	4929      	ldr	r1, [pc, #164]	; (d7b4 <in_fp_endif+0x2c>)
    ldr r2, [r1, #_kernel_offset_to_current]
    d70e:	688a      	ldr	r2, [r1, #8]

    /* addr of callee-saved regs in thread in r0 */
    ldr r0, =_thread_offset_to_callee_saved
    d710:	f04f 0028 	mov.w	r0, #40	; 0x28
    add r0, r2
    d714:	4410      	add	r0, r2

    /* save callee-saved + psp in thread */
#if defined(CONFIG_CPU_CORTEX_M)
    mrs ip, PSP
    d716:	f3ef 8c09 	mrs	ip, PSP
    mov r6, r11
    mov r7, ip
    /* store r8-12 */
    stmea r0!, {r3-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    stmia r0, {v1-v8, ip}
    d71a:	e880 1ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
#ifdef CONFIG_FP_SHARING
    /* Assess whether switched-out thread had been using the FP registers. */
    ldr r0, =0x10 /* EXC_RETURN.F_Type Mask */
    d71e:	f04f 0010 	mov.w	r0, #16
    tst lr, r0    /* EXC_RETURN & EXC_RETURN.F_Type_Msk */
    d722:	ea1e 0f00 	tst.w	lr, r0
    beq out_fp_active
    d726:	d004      	beq.n	d732 <out_fp_active>
    /* FP context inactive: clear FP state */
    ldr r0, [r2, #_thread_offset_to_mode]
    d728:	f8d2 00ac 	ldr.w	r0, [r2, #172]	; 0xac
    bic r0, #0x4 /* _current->arch.mode &= ~(CONTROL_FPCA_Msk) */
    d72c:	f020 0004 	bic.w	r0, r0, #4
    b out_fp_endif
    d730:	e007      	b.n	d742 <out_fp_endif>

0000d732 <out_fp_active>:

out_fp_active:
    /* FP context active: set FP state and store callee-saved registers */
    add r0, r2, #_thread_offset_to_preempt_float
    d732:	f102 006c 	add.w	r0, r2, #108	; 0x6c
    vstmia r0, {s16-s31}
    d736:	ec80 8a10 	vstmia	r0, {s16-s31}
    ldr r0, [r2, #_thread_offset_to_mode]
    d73a:	f8d2 00ac 	ldr.w	r0, [r2, #172]	; 0xac
    orrs r0, r0, #0x4 /* _current->arch.mode |= CONTROL_FPCA_Msk */
    d73e:	f050 0004 	orrs.w	r0, r0, #4

0000d742 <out_fp_endif>:

out_fp_endif:
    str r0, [r2, #_thread_offset_to_mode]
    d742:	f8c2 00ac 	str.w	r0, [r2, #172]	; 0xac

    /* Protect the kernel state while we play with the thread lists */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    d746:	2020      	movs	r0, #32
    msr BASEPRI, r0
    d748:	f380 8811 	msr	BASEPRI, r0
    isb /* Make the effect of disabling interrupts be realized immediately */
    d74c:	f3bf 8f6f 	isb	sy
     * the new thread is context-switched in since all decisions
     * to pend PendSV have been taken with the current kernel
     * state and this is what we're handling currently.
     */
#if defined(CONFIG_CPU_CORTEX_M)
    ldr v4, =_SCS_ICSR
    d750:	4f19      	ldr	r7, [pc, #100]	; (d7b8 <in_fp_endif+0x30>)
    ldr v3, =_SCS_ICSR_UNPENDSV
    d752:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000
#endif

    /* _kernel is still in r1 */

    /* fetch the thread to run from the ready queue cache */
    ldr r2, [r1, #_kernel_offset_to_ready_q_cache]
    d756:	6a4a      	ldr	r2, [r1, #36]	; 0x24

    str r2, [r1, #_kernel_offset_to_current]
    d758:	608a      	str	r2, [r1, #8]
     * has been handled.
     */

    /* _SCS_ICSR is still in v4 and _SCS_ICSR_UNPENDSV in v3 */
#if defined(CONFIG_CPU_CORTEX_M)
    str v3, [v4, #0]
    d75a:	603e      	str	r6, [r7, #0]

    ldr r0, [r4]
    movs.n r3, #0
    str r3, [r4]
#else
    ldr r0, [r2, #_thread_offset_to_basepri]
    d75c:	6e50      	ldr	r0, [r2, #100]	; 0x64
    movs r3, #0
    d75e:	2300      	movs	r3, #0
    str r3, [r2, #_thread_offset_to_basepri]
    d760:	6653      	str	r3, [r2, #100]	; 0x64
    /* restore r4-r7, go back 9*4 bytes to the start of the stored block */
    subs r0, #36
    ldmia r0!, {r4-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    /* restore BASEPRI for the incoming thread */
    msr BASEPRI, r0
    d762:	f380 8811 	msr	BASEPRI, r0

#ifdef CONFIG_FP_SHARING
    /* Assess whether switched-in thread had been using the FP registers. */
    ldr r0, [r2, #_thread_offset_to_mode]
    d766:	f8d2 00ac 	ldr.w	r0, [r2, #172]	; 0xac
    tst r0, #0x04 /* thread.arch.mode & CONTROL.FPCA Msk */
    d76a:	f010 0f04 	tst.w	r0, #4
    bne in_fp_active
    d76e:	d105      	bne.n	d77c <in_fp_active>
    /* FP context inactive for swapped-in thread:
     * - reset FPSCR to 0
     * - set EXC_RETURN.F_Type (prevents FP frame un-stacking when returning
     *   from pendSV)
     */
    movs.n r3, #0
    d770:	2300      	movs	r3, #0
    vmsr fpscr, r3
    d772:	eee1 3a10 	vmsr	fpscr, r3
    orrs lr, lr, #0x10 /* EXC_RETURN & EXC_RETURN.F_Type_Msk */
    d776:	f05e 0e10 	orrs.w	lr, lr, #16
    b in_fp_endif
    d77a:	e005      	b.n	d788 <in_fp_endif>

0000d77c <in_fp_active>:
    /* FP context active:
     * - clear EXC_RETURN.F_Type
     * - FPSCR and caller-saved registers will be restored automatically
     * - restore callee-saved FP registers
     */
    bic lr, #0x10 /* EXC_RETURN | (~EXC_RETURN.F_Type_Msk) */
    d77c:	f02e 0e10 	bic.w	lr, lr, #16
    add r0, r2, #_thread_offset_to_preempt_float
    d780:	f102 006c 	add.w	r0, r2, #108	; 0x6c
    vldmia r0, {s16-s31}
    d784:	ec90 8a10 	vldmia	r0, {s16-s31}

0000d788 <in_fp_endif>:
in_fp_endif:
    /* Clear CONTROL.FPCA that may have been set by FP instructions */
    mrs r3, CONTROL
    d788:	f3ef 8314 	mrs	r3, CONTROL
    bic r3, #0x4 /* CONTROL.FPCA Msk */
    d78c:	f023 0304 	bic.w	r3, r3, #4
    msr CONTROL, r3
    d790:	f383 8814 	msr	CONTROL, r3
    isb
    d794:	f3bf 8f6f 	isb	sy
#endif

#if defined (CONFIG_ARM_MPU)
    /* Re-program dynamic memory map */
    push {r2,lr}
    d798:	b504      	push	{r2, lr}
    mov r0, r2 /* _current thread */
    d79a:	4610      	mov	r0, r2
    bl z_arm_configure_dynamic_mpu_regions
    d79c:	f00c fef9 	bl	1a592 <z_arm_configure_dynamic_mpu_regions>
    pop {r2,lr}
    d7a0:	e8bd 4004 	ldmia.w	sp!, {r2, lr}
    isb

#endif

    /* load callee-saved + psp from thread */
    add r0, r2, #_thread_offset_to_callee_saved
    d7a4:	f102 0028 	add.w	r0, r2, #40	; 0x28
    ldmia r0, {v1-v8, ip}
    d7a8:	e890 1ff0 	ldmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
    mov r0, #0
    msr PSPLIM, r0
#endif /* CONFIG_BUILTIN_STACK_GUARD */

#if defined(CONFIG_CPU_CORTEX_M)
    msr PSP, ip
    d7ac:	f38c 8809 	msr	PSP, ip

    /*
     * Cortex-M: return from PendSV exception
     * Cortex-R: return to the caller (_IntExit or z_arm_svc)
     */
    bx lr
    d7b0:	4770      	bx	lr
    d7b2:	0000      	.short	0x0000
    ldr r1, =_kernel
    d7b4:	20024bc4 	.word	0x20024bc4
    ldr v4, =_SCS_ICSR
    d7b8:	e000ed04 	.word	0xe000ed04

0000d7bc <z_arm_svc>:
  bne _stack_frame_endif
_stack_frame_msp:
  mrs r0, MSP
_stack_frame_endif:
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    tst lr, #0x4    /* did we come from thread mode ? */
    d7bc:	f01e 0f04 	tst.w	lr, #4
    ite eq  /* if zero (equal), came from handler mode */
    d7c0:	bf0c      	ite	eq
        mrseq r0, MSP   /* handler mode, stack frame is on MSP */
    d7c2:	f3ef 8008 	mrseq	r0, MSP
        mrsne r0, PSP   /* thread mode, stack frame is on PSP */
    d7c6:	f3ef 8009 	mrsne	r0, PSP
#endif


    /* Figure out what SVC call number was invoked */

    ldr r1, [r0, #24]   /* grab address of PC from stack frame */
    d7ca:	6981      	ldr	r1, [r0, #24]
     */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    subs r1, r1, #2
    ldrb r1, [r1]
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    ldrb r1, [r1, #-2]
    d7cc:	f811 1c02 	ldrb.w	r1, [r1, #-2]
#endif
    bne _oops

#endif /* CONFIG_USERSPACE */

    cmp r1, #2
    d7d0:	2902      	cmp	r1, #2
    beq _oops
    d7d2:	d0ff      	beq.n	d7d4 <_oops>

0000d7d4 <_oops>:
    /* exception return is done in z_arm_int_exit() */
    b z_arm_int_exit
#endif

_oops:
    push {r0, lr}
    d7d4:	b501      	push	{r0, lr}
    bl z_do_kernel_oops
    d7d6:	f00c fed1 	bl	1a57c <z_do_kernel_oops>
    /* return from SVC exception is done here */
    pop {r0, pc}
    d7da:	bd01      	pop	{r0, pc}

0000d7dc <z_arm_cpu_idle_init>:
 * void z_arm_cpu_idle_init(void);
 */

SECTION_FUNC(TEXT, z_arm_cpu_idle_init)
#if defined(CONFIG_CPU_CORTEX_M)
	ldr r1, =_SCB_SCR
    d7dc:	4901      	ldr	r1, [pc, #4]	; (d7e4 <z_arm_cpu_idle_init+0x8>)
	movs.n r2, #_SCR_INIT_BITS
    d7de:	2210      	movs	r2, #16
	str r2, [r1]
    d7e0:	600a      	str	r2, [r1, #0]
#endif
	bx lr
    d7e2:	4770      	bx	lr
	ldr r1, =_SCB_SCR
    d7e4:	e000ed10 	.word	0xe000ed10

0000d7e8 <arch_cpu_idle>:
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE) \
	|| defined(CONFIG_ARMV7_R)
	cpsie i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* clear BASEPRI so wfi is awakened by incoming interrupts */
	eors.n r0, r0
    d7e8:	4040      	eors	r0, r0
	msr BASEPRI, r0
    d7ea:	f380 8811 	msr	BASEPRI, r0
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	wfi
    d7ee:	bf30      	wfi

	bx lr
    d7f0:	4770      	bx	lr
    d7f2:	bf00      	nop

0000d7f4 <z_arm_bus_fault>:
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
SECTION_SUBSEC_FUNC(TEXT,__fault,z_arm_reserved)

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE) || \
	defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	mrs r0, MSP
    d7f4:	f3ef 8008 	mrs	r0, MSP
	mrs r1, PSP
    d7f8:	f3ef 8109 	mrs	r1, PSP
	mov r2, lr /* EXC_RETURN */
    d7fc:	4672      	mov	r2, lr

	push {r0, lr}
    d7fe:	b501      	push	{r0, lr}
	mov r0, #0
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE || CONFIG_ARMv7_M_ARMV8_M_MAINLINE */

	bl z_arm_fault
    d800:	f000 fb4e 	bl	dea0 <z_arm_fault>

#if defined(CONFIG_CPU_CORTEX_M)
	pop {r0, pc}
    d804:	bd01      	pop	{r0, pc}
    d806:	bf00      	nop

0000d808 <z_SysNmiOnReset>:
_ASM_FILE_PROLOGUE

GTEXT(z_SysNmiOnReset)

SECTION_FUNC(TEXT, z_SysNmiOnReset)
    wfi
    d808:	bf30      	wfi
    b z_SysNmiOnReset
    d80a:	f7ff bffd 	b.w	d808 <z_SysNmiOnReset>
    d80e:	bf00      	nop

0000d810 <_isr_wrapper>:
 * @return N/A
 */
SECTION_FUNC(TEXT, _isr_wrapper)

#if defined(CONFIG_CPU_CORTEX_M)
	push {r0,lr}		/* r0, lr are now the first items on the stack */
    d810:	b501      	push	{r0, lr}
      * FIXME: Remove the Cortex-M conditional compilation checks for `cpsid i`
      *        and `cpsie i` after the Cortex-R port is updated to support
      *        interrupt nesting.  For more details, refer to the issue #21758.
      */
#if defined(CONFIG_CPU_CORTEX_M)
	cpsid i  /* PRIMASK = 1 */
    d812:	b672      	cpsid	i
#endif

	/* is this a wakeup from idle ? */
	ldr r2, =_kernel
    d814:	4a0b      	ldr	r2, [pc, #44]	; (d844 <_isr_wrapper+0x34>)
	/* requested idle duration, in ticks */
	ldr r0, [r2, #_kernel_offset_to_idle]
    d816:	6a10      	ldr	r0, [r2, #32]
	cmp r0, #0
    d818:	2800      	cmp	r0, #0
	str r1, [r2, #_kernel_offset_to_idle]
	bl z_sys_power_save_idle_exit
_idle_state_cleared:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	ittt ne
    d81a:	bf1e      	ittt	ne
	movne	r1, #0
    d81c:	2100      	movne	r1, #0
		/* clear kernel idle state */
		strne	r1, [r2, #_kernel_offset_to_idle]
    d81e:	6211      	strne	r1, [r2, #32]
		blne	z_sys_power_save_idle_exit
    d820:	f00d feee 	blne	1b600 <z_sys_power_save_idle_exit>
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
	cpsie i		/* re-enable interrupts (PRIMASK = 0) */
    d824:	b662      	cpsie	i
#endif

#endif /* CONFIG_SYS_POWER_MANAGEMENT */

#if defined(CONFIG_CPU_CORTEX_M)
	mrs r0, IPSR	/* get exception number */
    d826:	f3ef 8005 	mrs	r0, IPSR
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r1, =16
	subs r0, r1	/* get IRQ number */
	lsls r0, #3	/* table is 8-byte wide */
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	sub r0, r0, #16	/* get IRQ number */
    d82a:	f1a0 0010 	sub.w	r0, r0, #16
	lsl r0, r0, #3	/* table is 8-byte wide */
    d82e:	ea4f 00c0 	mov.w	r0, r0, lsl #3
	 */
	mov r0, #0
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
	ldr r1, =_sw_isr_table
    d832:	4905      	ldr	r1, [pc, #20]	; (d848 <_isr_wrapper+0x38>)
	add r1, r1, r0	/* table entry: ISRs must have their MSB set to stay
    d834:	4401      	add	r1, r0
			 * in thumb mode */

	ldm r1!,{r0,r3}	/* arg in r0, ISR in r3 */
    d836:	c909      	ldmia	r1!, {r0, r3}
#else
	pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
	ldm sp!,{r0-r3} /* Restore r0 to r3 regs */
#endif /* CONFIG_EXECUTION_BENCHMARKING */
	blx r3		/* call ISR */
    d838:	4798      	blx	r3

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	pop {r0, r3}
	mov lr, r3
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	pop {r0, lr}
    d83a:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
#endif

	/* Use 'bx' instead of 'b' because 'bx' can jump further, and use
	 * 'bx' instead of 'blx' because exception return is done in
	 * z_arm_int_exit() */
	ldr r1, =z_arm_int_exit
    d83e:	4903      	ldr	r1, [pc, #12]	; (d84c <_isr_wrapper+0x3c>)
	bx r1
    d840:	4708      	bx	r1
    d842:	0000      	.short	0x0000
	ldr r2, =_kernel
    d844:	20024bc4 	.word	0x20024bc4
	ldr r1, =_sw_isr_table
    d848:	0001bca8 	.word	0x0001bca8
	ldr r1, =z_arm_int_exit
    d84c:	0000d6f1 	.word	0x0000d6f1

0000d850 <arch_swap>:
#ifdef CONFIG_EXECUTION_BENCHMARKING
	read_timer_start_of_swap();
#endif

	/* store off key and return value */
	_current->arch.basepri = key;
    d850:	4a09      	ldr	r2, [pc, #36]	; (d878 <arch_swap+0x28>)
	_current->arch.swap_return_value = _k_neg_eagain;
    d852:	490a      	ldr	r1, [pc, #40]	; (d87c <arch_swap+0x2c>)
	_current->arch.basepri = key;
    d854:	6893      	ldr	r3, [r2, #8]
	_current->arch.swap_return_value = _k_neg_eagain;
    d856:	6809      	ldr	r1, [r1, #0]
	_current->arch.basepri = key;
    d858:	6658      	str	r0, [r3, #100]	; 0x64
	_current->arch.swap_return_value = _k_neg_eagain;
    d85a:	6699      	str	r1, [r3, #104]	; 0x68

#if defined(CONFIG_CPU_CORTEX_M)
	/* set pending bit to make sure we will take a PendSV exception */
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    d85c:	4908      	ldr	r1, [pc, #32]	; (d880 <arch_swap+0x30>)
    d85e:	684b      	ldr	r3, [r1, #4]
    d860:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
    d864:	604b      	str	r3, [r1, #4]
    d866:	2300      	movs	r3, #0
    d868:	f383 8811 	msr	BASEPRI, r3
    d86c:	f3bf 8f6f 	isb	sy
#endif

	/* Context switch is performed here. Returning implies the
	 * thread has been context-switched-in again.
	 */
	return _current->arch.swap_return_value;
    d870:	6893      	ldr	r3, [r2, #8]
}
    d872:	6e98      	ldr	r0, [r3, #104]	; 0x68
    d874:	4770      	bx	lr
    d876:	bf00      	nop
    d878:	20024bc4 	.word	0x20024bc4
    d87c:	0001c57c 	.word	0x0001c57c
    d880:	e000ed00 	.word	0xe000ed00

0000d884 <arch_irq_enable>:
#define REG_FROM_IRQ(irq) (irq / NUM_IRQS_PER_REG)
#define BIT_FROM_IRQ(irq) (irq % NUM_IRQS_PER_REG)

void arch_irq_enable(unsigned int irq)
{
	NVIC_EnableIRQ((IRQn_Type)irq);
    d884:	b243      	sxtb	r3, r0
  if ((int32_t)(IRQn) >= 0)
    d886:	2b00      	cmp	r3, #0
    d888:	db08      	blt.n	d89c <arch_irq_enable+0x18>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    d88a:	2201      	movs	r2, #1
    d88c:	f000 001f 	and.w	r0, r0, #31
    d890:	fa02 f000 	lsl.w	r0, r2, r0
    d894:	4a02      	ldr	r2, [pc, #8]	; (d8a0 <arch_irq_enable+0x1c>)
    d896:	095b      	lsrs	r3, r3, #5
    d898:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
}
    d89c:	4770      	bx	lr
    d89e:	bf00      	nop
    d8a0:	e000e100 	.word	0xe000e100

0000d8a4 <z_arm_irq_priority_set>:
	 */
	__ASSERT(prio <= (BIT(DT_NUM_IRQ_PRIO_BITS) - 1),
		 "invalid priority %d! values must be less than %lu\n",
		 prio - _IRQ_PRIO_OFFSET,
		 BIT(DT_NUM_IRQ_PRIO_BITS) - (_IRQ_PRIO_OFFSET));
	NVIC_SetPriority((IRQn_Type)irq, prio);
    d8a4:	b243      	sxtb	r3, r0
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
    d8a6:	2b00      	cmp	r3, #0
	prio += _IRQ_PRIO_OFFSET;
    d8a8:	f101 0101 	add.w	r1, r1, #1
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    d8ac:	bfa8      	it	ge
    d8ae:	f103 4360 	addge.w	r3, r3, #3758096384	; 0xe0000000
    d8b2:	ea4f 1141 	mov.w	r1, r1, lsl #5
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    d8b6:	bfb8      	it	lt
    d8b8:	4b05      	ldrlt	r3, [pc, #20]	; (d8d0 <z_arm_irq_priority_set+0x2c>)
    d8ba:	b2c9      	uxtb	r1, r1
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    d8bc:	bfab      	itete	ge
    d8be:	f503 4361 	addge.w	r3, r3, #57600	; 0xe100
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    d8c2:	f000 000f 	andlt.w	r0, r0, #15
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    d8c6:	f883 1300 	strbge.w	r1, [r3, #768]	; 0x300
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    d8ca:	5419      	strblt	r1, [r3, r0]
}
    d8cc:	4770      	bx	lr
    d8ce:	bf00      	nop
    d8d0:	e000ed14 	.word	0xe000ed14

0000d8d4 <_arch_isr_direct_pm>:
	z_arm_reserved();
}

#ifdef CONFIG_SYS_POWER_MANAGEMENT
void _arch_isr_direct_pm(void)
{
    d8d4:	b508      	push	{r3, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Lock all interrupts. irq_lock() will on this CPU only disable those
	 * lower than BASEPRI, which is not what we want. See comments in
	 * arch/arm/core/aarch32/isr_wrapper.S
	 */
	__asm__ volatile("cpsid i" : : : "memory");
    d8d6:	b672      	cpsid	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	if (_kernel.idle) {
    d8d8:	4b04      	ldr	r3, [pc, #16]	; (d8ec <_arch_isr_direct_pm+0x18>)
    d8da:	6a18      	ldr	r0, [r3, #32]
    d8dc:	b118      	cbz	r0, d8e6 <_arch_isr_direct_pm+0x12>
		s32_t idle_val = _kernel.idle;

		_kernel.idle = 0;
    d8de:	2200      	movs	r2, #0
    d8e0:	621a      	str	r2, [r3, #32]
		z_sys_power_save_idle_exit(idle_val);
    d8e2:	f00d fe8d 	bl	1b600 <z_sys_power_save_idle_exit>

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE) \
	|| defined(CONFIG_ARMV7_R)
	irq_unlock(key);
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile("cpsie i" : : : "memory");
    d8e6:	b662      	cpsie	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

}
    d8e8:	bd08      	pop	{r3, pc}
    d8ea:	bf00      	nop
    d8ec:	20024bc4 	.word	0x20024bc4

0000d8f0 <arch_new_thread>:
 */
void arch_new_thread(struct k_thread *thread, k_thread_stack_t *stack,
		     size_t stackSize, k_thread_entry_t pEntry,
		     void *parameter1, void *parameter2, void *parameter3,
		     int priority, unsigned int options)
{
    d8f0:	b573      	push	{r0, r1, r4, r5, r6, lr}
    d8f2:	461e      	mov	r6, r3
#endif
	stackEnd = pStackMem + stackSize;

	struct __esf *pInitCtx;

	z_new_thread_init(thread, pStackMem, stackSize, priority,
    d8f4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
{
    d8f6:	4605      	mov	r5, r0
	z_new_thread_init(thread, pStackMem, stackSize, priority,
    d8f8:	9300      	str	r3, [sp, #0]
    d8fa:	9b09      	ldr	r3, [sp, #36]	; 0x24
	stackEnd = pStackMem + stackSize;
    d8fc:	188c      	adds	r4, r1, r2
	z_new_thread_init(thread, pStackMem, stackSize, priority,
    d8fe:	f00e f839 	bl	1b974 <z_new_thread_init>
	pInitCtx->basic.pc = (u32_t)z_thread_entry;
#endif

#if defined(CONFIG_CPU_CORTEX_M)
	/* force ARM mode by clearing LSB of address */
	pInitCtx->basic.pc &= 0xfffffffe;
    d902:	4a0c      	ldr	r2, [pc, #48]	; (d934 <arch_new_thread+0x44>)
	pInitCtx = (struct __esf *)(STACK_ROUND_DOWN(stackEnd -
    d904:	f1a4 0320 	sub.w	r3, r4, #32
    d908:	f023 0307 	bic.w	r3, r3, #7
	pInitCtx->basic.pc &= 0xfffffffe;
    d90c:	f022 0201 	bic.w	r2, r2, #1
    d910:	619a      	str	r2, [r3, #24]
#endif

	pInitCtx->basic.a1 = (u32_t)pEntry;
	pInitCtx->basic.a2 = (u32_t)parameter1;
    d912:	9a06      	ldr	r2, [sp, #24]
	pInitCtx->basic.a1 = (u32_t)pEntry;
    d914:	601e      	str	r6, [r3, #0]
	pInitCtx->basic.a2 = (u32_t)parameter1;
    d916:	605a      	str	r2, [r3, #4]
	pInitCtx->basic.a3 = (u32_t)parameter2;
    d918:	9a07      	ldr	r2, [sp, #28]
    d91a:	609a      	str	r2, [r3, #8]
	pInitCtx->basic.a4 = (u32_t)parameter3;
    d91c:	9a08      	ldr	r2, [sp, #32]
    d91e:	60da      	str	r2, [r3, #12]
	pInitCtx->basic.xpsr =
    d920:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
    d924:	61da      	str	r2, [r3, #28]
		0x01000000UL; /* clear all, thumb bit is 1, even if RO */

	thread->callee_saved.psp = (u32_t)pInitCtx;
    d926:	64ab      	str	r3, [r5, #72]	; 0x48
#if defined(CONFIG_CPU_CORTEX_R)
	pInitCtx->basic.lr = (u32_t)pInitCtx->basic.pc;
	thread->callee_saved.spsr = A_BIT | T_BIT | MODE_SYS;
	thread->callee_saved.lr = (u32_t)pInitCtx->basic.pc;
#endif
	thread->arch.basepri = 0;
    d928:	2300      	movs	r3, #0
    d92a:	666b      	str	r3, [r5, #100]	; 0x64

#if defined(CONFIG_USERSPACE) || defined(CONFIG_FP_SHARING)
	thread->arch.mode = 0;
    d92c:	f8c5 30ac 	str.w	r3, [r5, #172]	; 0xac

	/*
	 * initial values in all other registers/thread entries are
	 * irrelevant.
	 */
}
    d930:	b002      	add	sp, #8
    d932:	bd70      	pop	{r4, r5, r6, pc}
    d934:	00019def 	.word	0x00019def

0000d938 <arch_switch_to_main_thread>:

void arch_switch_to_main_thread(struct k_thread *main_thread,
				k_thread_stack_t *main_stack,
				size_t main_stack_size,
				k_thread_entry_t _main)
{
    d938:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    d93c:	461f      	mov	r7, r3
    d93e:	4606      	mov	r6, r0
    d940:	460c      	mov	r4, r1
    d942:	4690      	mov	r8, r2
// Re-enable using built-in when GCC has been fixed
// || (__GNUC__ > 7) || (__GNUC__ == 7 && __GNUC_MINOR__ >= 2)
  /* see https://gcc.gnu.org/ml/gcc-patches/2017-04/msg00443.html */
  __builtin_arm_set_fpscr(fpscr);
#else
  __ASM volatile ("VMSR fpscr, %0" : : "r" (fpscr) : "vfpcc", "memory");
    d944:	2300      	movs	r3, #0
    d946:	eee1 3a10 	vmsr	fpscr, r3
  __ASM volatile ("MRS %0, control" : "=r" (result) );
    d94a:	f3ef 8514 	mrs	r5, CONTROL
	 * initialized at thread creation for threads that make use of the FP).
	 */
	__set_FPSCR(0);
#if defined(CONFIG_FP_SHARING)
	/* In Sharing mode clearing FPSCR may set the CONTROL.FPCA flag. */
	__set_CONTROL(__get_CONTROL() & (~(CONTROL_FPCA_Msk)));
    d94e:	f025 0504 	bic.w	r5, r5, #4
  __ASM volatile ("MSR control, %0" : : "r" (control) : "memory");
    d952:	f385 8814 	msr	CONTROL, r5
           so that all instructions following the ISB are fetched from cache or memory,
           after the instruction has been completed.
 */
__STATIC_FORCEINLINE void __ISB(void)
{
  __ASM volatile ("isb 0xF":::"memory");
    d956:	f3bf 8f6f 	isb	sy
	 * to set up access permissions for fixed memory sections, such
	 * as Application Memory or No-Cacheable SRAM area.
	 *
	 * This function is invoked once, upon system initialization.
	 */
	z_arm_configure_static_mpu_regions();
    d95a:	f000 fbdf 	bl	e11c <z_arm_configure_static_mpu_regions>
	start_of_main_stack =
		Z_THREAD_STACK_BUFFER(main_stack) + main_stack_size;

	start_of_main_stack = (char *)STACK_ROUND_DOWN(start_of_main_stack);

	_current = main_thread;
    d95e:	4b0a      	ldr	r3, [pc, #40]	; (d988 <arch_switch_to_main_thread+0x50>)
	start_of_main_stack =
    d960:	4444      	add	r4, r8
#ifdef CONFIG_ARM_MPU
	/*
	 * If stack protection is enabled, make sure to set it
	 * before jumping to thread entry function
	 */
	z_arm_configure_dynamic_mpu_regions(main_thread);
    d962:	4630      	mov	r0, r6
	_current = main_thread;
    d964:	609e      	str	r6, [r3, #8]
	start_of_main_stack = (char *)STACK_ROUND_DOWN(start_of_main_stack);
    d966:	f024 0407 	bic.w	r4, r4, #7
	z_arm_configure_dynamic_mpu_regions(main_thread);
    d96a:	f00c fe12 	bl	1a592 <z_arm_configure_dynamic_mpu_regions>

	/*
	 * Set PSP to the highest address of the main stack
	 * before enabling interrupts and jumping to main.
	 */
	__asm__ volatile (
    d96e:	4638      	mov	r0, r7
    d970:	f384 8809 	msr	PSP, r4
    d974:	2100      	movs	r1, #0
    d976:	b663      	cpsie	if
    d978:	f381 8811 	msr	BASEPRI, r1
    d97c:	f3bf 8f6f 	isb	sy
    d980:	2200      	movs	r2, #0
    d982:	2300      	movs	r3, #0
    d984:	f00c fa33 	bl	19dee <z_thread_entry>
	:
	: "r" (_main), "r" (start_of_main_stack)
	: "r0" /* not to be overwritten by msr PSP, %1 */
	);

	CODE_UNREACHABLE;
    d988:	20024bc4 	.word	0x20024bc4

0000d98c <z_arm_fatal_error>:
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
		esf->basic.pc);
}

void z_arm_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
    d98c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    d990:	4681      	mov	r9, r0
    d992:	b08a      	sub	sp, #40	; 0x28

	if (esf != NULL) {
    d994:	460c      	mov	r4, r1
    d996:	2900      	cmp	r1, #0
    d998:	d07a      	beq.n	da90 <z_arm_fatal_error+0x104>
	LOG_ERR("r0/a1:  0x%08x  r1/a2:  0x%08x  r2/a3:  0x%08x",
    d99a:	2201      	movs	r2, #1
    d99c:	f04f 0300 	mov.w	r3, #0
    d9a0:	4d3f      	ldr	r5, [pc, #252]	; (daa0 <z_arm_fatal_error+0x114>)
    d9a2:	f362 0307 	bfi	r3, r2, #0, #8
    d9a6:	4a3f      	ldr	r2, [pc, #252]	; (daa4 <z_arm_fatal_error+0x118>)
    d9a8:	483f      	ldr	r0, [pc, #252]	; (daa8 <z_arm_fatal_error+0x11c>)
    d9aa:	1aad      	subs	r5, r5, r2
    d9ac:	f3c5 05c9 	ubfx	r5, r5, #3, #10
    d9b0:	f365 138f 	bfi	r3, r5, #6, #10
    d9b4:	f8ad 3000 	strh.w	r3, [sp]
    d9b8:	e9d1 2301 	ldrd	r2, r3, [r1, #4]
    d9bc:	6809      	ldr	r1, [r1, #0]
    d9be:	f00c faba 	bl	19f36 <log_3>
	LOG_ERR("r3/a4:  0x%08x r12/ip:  0x%08x r14/lr:  0x%08x",
    d9c2:	2201      	movs	r2, #1
    d9c4:	f04f 0300 	mov.w	r3, #0
    d9c8:	f362 0307 	bfi	r3, r2, #0, #8
    d9cc:	f365 138f 	bfi	r3, r5, #6, #10
    d9d0:	f8ad 3000 	strh.w	r3, [sp]
    d9d4:	e9d4 2304 	ldrd	r2, r3, [r4, #16]
    d9d8:	68e1      	ldr	r1, [r4, #12]
    d9da:	4834      	ldr	r0, [pc, #208]	; (daac <z_arm_fatal_error+0x120>)
    d9dc:	f00c faab 	bl	19f36 <log_3>
	LOG_ERR(" xpsr:  0x%08x", esf->basic.xpsr);
    d9e0:	2301      	movs	r3, #1
    d9e2:	f04f 0200 	mov.w	r2, #0
    d9e6:	f363 0207 	bfi	r2, r3, #0, #8
    d9ea:	f365 128f 	bfi	r2, r5, #6, #10
    d9ee:	69e1      	ldr	r1, [r4, #28]
    d9f0:	482f      	ldr	r0, [pc, #188]	; (dab0 <z_arm_fatal_error+0x124>)
    d9f2:	f00c fa74 	bl	19ede <log_1>
	for (int i = 0; i < 16; i += 4) {
    d9f6:	4627      	mov	r7, r4
    d9f8:	2600      	movs	r6, #0
		LOG_ERR("s[%2d]:  0x%08x  s[%2d]:  0x%08x"
    d9fa:	f8df a0c0 	ldr.w	sl, [pc, #192]	; dabc <z_arm_fatal_error+0x130>
    d9fe:	edd7 7a08 	vldr	s15, [r7, #32]
    da02:	eefc 7ae7 	vcvt.u32.f32	s15, s15
    da06:	edcd 7a03 	vstr	s15, [sp, #12]
    da0a:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
    da0e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
    da12:	edcd 7a05 	vstr	s15, [sp, #20]
    da16:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
    da1a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
    da1e:	edcd 7a07 	vstr	s15, [sp, #28]
    da22:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
    da26:	2208      	movs	r2, #8
    da28:	eefc 7ae7 	vcvt.u32.f32	s15, s15
    da2c:	f028 033f 	bic.w	r3, r8, #63	; 0x3f
    da30:	f043 0301 	orr.w	r3, r3, #1
    da34:	f363 0807 	bfi	r8, r3, #0, #8
    da38:	1c73      	adds	r3, r6, #1
    da3a:	9304      	str	r3, [sp, #16]
    da3c:	1cb3      	adds	r3, r6, #2
    da3e:	9306      	str	r3, [sp, #24]
    da40:	f365 188f 	bfi	r8, r5, #6, #10
    da44:	1cf3      	adds	r3, r6, #3
    da46:	9602      	str	r6, [sp, #8]
    da48:	9308      	str	r3, [sp, #32]
    da4a:	eb0d 0102 	add.w	r1, sp, r2
    da4e:	4643      	mov	r3, r8
    da50:	4650      	mov	r0, sl
	for (int i = 0; i < 16; i += 4) {
    da52:	3604      	adds	r6, #4
		LOG_ERR("s[%2d]:  0x%08x  s[%2d]:  0x%08x"
    da54:	edcd 7a09 	vstr	s15, [sp, #36]	; 0x24
    da58:	f00c fa88 	bl	19f6c <log_n>
	for (int i = 0; i < 16; i += 4) {
    da5c:	2e10      	cmp	r6, #16
    da5e:	f107 0710 	add.w	r7, r7, #16
    da62:	d1cc      	bne.n	d9fe <z_arm_fatal_error+0x72>
	LOG_ERR("fpscr:  0x%08x", esf->fpscr);
    da64:	2301      	movs	r3, #1
    da66:	f04f 0200 	mov.w	r2, #0
    da6a:	f363 0207 	bfi	r2, r3, #0, #8
    da6e:	f365 128f 	bfi	r2, r5, #6, #10
    da72:	6e21      	ldr	r1, [r4, #96]	; 0x60
    da74:	480f      	ldr	r0, [pc, #60]	; (dab4 <z_arm_fatal_error+0x128>)
    da76:	f00c fa32 	bl	19ede <log_1>
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
    da7a:	f04f 0200 	mov.w	r2, #0
    da7e:	2301      	movs	r3, #1
    da80:	f363 0207 	bfi	r2, r3, #0, #8
    da84:	f365 128f 	bfi	r2, r5, #6, #10
    da88:	69a1      	ldr	r1, [r4, #24]
    da8a:	480b      	ldr	r0, [pc, #44]	; (dab8 <z_arm_fatal_error+0x12c>)
    da8c:	f00c fa27 	bl	19ede <log_1>
		esf_dump(esf);
	}
	z_fatal_error(reason, esf);
    da90:	4621      	mov	r1, r4
    da92:	4648      	mov	r0, r9
    da94:	f00a fcc6 	bl	18424 <z_fatal_error>
}
    da98:	b00a      	add	sp, #40	; 0x28
    da9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    da9e:	bf00      	nop
    daa0:	0001c044 	.word	0x0001c044
    daa4:	0001c004 	.word	0x0001c004
    daa8:	0001c760 	.word	0x0001c760
    daac:	0001c78f 	.word	0x0001c78f
    dab0:	0001c7be 	.word	0x0001c7be
    dab4:	0001c810 	.word	0x0001c810
    dab8:	0001c81f 	.word	0x0001c81f
    dabc:	0001c7cd 	.word	0x0001c7cd

0000dac0 <z_arm_prep_c>:
#else
#define VECTOR_ADDRESS CONFIG_SRAM_BASE_ADDRESS
#endif
static inline void relocate_vector_table(void)
{
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
    dac0:	4a11      	ldr	r2, [pc, #68]	; (db08 <z_arm_prep_c+0x48>)
 * This routine prepares for the execution of and runs C code.
 *
 * @return N/A
 */
void z_arm_prep_c(void)
{
    dac2:	b508      	push	{r3, lr}
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
    dac4:	4b11      	ldr	r3, [pc, #68]	; (db0c <z_arm_prep_c+0x4c>)
    dac6:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
    daca:	609a      	str	r2, [r3, #8]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
    dacc:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    dad0:	f3bf 8f6f 	isb	sy
	SCB->CPACR |= CPACR_CP10_PRIV_ACCESS | CPACR_CP11_PRIV_ACCESS;
    dad4:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
    dad8:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
    dadc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	FPU->FPCCR = FPU_FPCCR_ASPEN_Msk | FPU_FPCCR_LSPEN_Msk;
    dae0:	f04f 4240 	mov.w	r2, #3221225472	; 0xc0000000
    dae4:	f8c3 2234 	str.w	r2, [r3, #564]	; 0x234
  __ASM volatile ("dsb 0xF":::"memory");
    dae8:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    daec:	f3bf 8f6f 	isb	sy
  __ASM volatile ("VMSR fpscr, %0" : : "r" (fpscr) : "vfpcc", "memory");
    daf0:	2300      	movs	r3, #0
    daf2:	eee1 3a10 	vmsr	fpscr, r3
	relocate_vector_table();
	enable_floating_point();
	z_bss_zero();
    daf6:	f00a fd15 	bl	18524 <z_bss_zero>
	z_data_copy();
    dafa:	f00a fd1d 	bl	18538 <z_data_copy>
#if defined(CONFIG_ARMV7_R) && defined(CONFIG_INIT_STACKS)
	z_arm_init_stacks();
#endif
	z_arm_int_lib_init();
    dafe:	f000 fadb 	bl	e0b8 <z_arm_int_lib_init>
	z_cstart();
    db02:	f00a fd4b 	bl	1859c <z_cstart>
    db06:	bf00      	nop
    db08:	0000c000 	.word	0x0000c000
    db0c:	e000ed00 	.word	0xe000ed00

0000db10 <__start>:
 * search for a __start symbol instead, so create that alias here.
 */
SECTION_SUBSEC_FUNC(TEXT,_reset_section,__start)

#if defined(CONFIG_PLATFORM_SPECIFIC_INIT)
    bl z_platform_init
    db10:	f00c f993 	bl	19e3a <z_platform_init>

    /* lock interrupts: will get unlocked when switch to main task */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    db14:	2020      	movs	r0, #32
    msr BASEPRI, r0
    db16:	f380 8811 	msr	BASEPRI, r0

    /*
     * Set PSP and use it to boot without using MSP, so that it
     * gets set to _interrupt_stack during initialization.
     */
    ldr r0, =_interrupt_stack
    db1a:	4808      	ldr	r0, [pc, #32]	; (db3c <__start+0x2c>)
    ldr r1, =CONFIG_ISR_STACK_SIZE
    db1c:	f44f 6100 	mov.w	r1, #2048	; 0x800
    adds r0, r0, r1
    db20:	1840      	adds	r0, r0, r1
    msr PSP, r0
    db22:	f380 8809 	msr	PSP, r0
    mrs r0, CONTROL
    db26:	f3ef 8014 	mrs	r0, CONTROL
    movs r1, #2
    db2a:	2102      	movs	r1, #2
    orrs r0, r1 /* CONTROL_SPSEL_Msk */
    db2c:	4308      	orrs	r0, r1
    msr CONTROL, r0
    db2e:	f380 8814 	msr	CONTROL, r0
    /*
     * When changing the stack pointer, software must use an ISB instruction
     * immediately after the MSR instruction. This ensures that instructions
     * after the ISB instruction execute using the new stack pointer.
     */
    isb
    db32:	f3bf 8f6f 	isb	sy
    /*
     * 'bl' jumps the furthest of the branch instructions that are
     * supported on all platforms. So it is used when jumping to z_arm_prep_c
     * (even though we do not intend to return).
     */
    bl z_arm_prep_c
    db36:	f7ff ffc3 	bl	dac0 <z_arm_prep_c>
    db3a:	0000      	.short	0x0000
    ldr r0, =_interrupt_stack
    db3c:	200266a8 	.word	0x200266a8

0000db40 <usage_fault.isra.2>:
 */
static u32_t usage_fault(const z_arch_esf_t *esf)
{
	u32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** USAGE FAULT *****");
    db40:	2301      	movs	r3, #1
    db42:	f04f 0100 	mov.w	r1, #0
static u32_t usage_fault(const z_arch_esf_t *esf)
    db46:	b510      	push	{r4, lr}
	PR_FAULT_INFO("***** USAGE FAULT *****");
    db48:	f363 0107 	bfi	r1, r3, #0, #8
    db4c:	4c3a      	ldr	r4, [pc, #232]	; (dc38 <usage_fault.isra.2+0xf8>)
    db4e:	4b3b      	ldr	r3, [pc, #236]	; (dc3c <usage_fault.isra.2+0xfc>)
    db50:	483b      	ldr	r0, [pc, #236]	; (dc40 <usage_fault.isra.2+0x100>)
    db52:	1ae4      	subs	r4, r4, r3
    db54:	f3c4 04c9 	ubfx	r4, r4, #3, #10
    db58:	f364 118f 	bfi	r1, r4, #6, #10
    db5c:	f00c f9b2 	bl	19ec4 <log_0>

	/* bits are sticky: they stack and must be reset */
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
    db60:	4b38      	ldr	r3, [pc, #224]	; (dc44 <usage_fault.isra.2+0x104>)
    db62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    db64:	0199      	lsls	r1, r3, #6
    db66:	d509      	bpl.n	db7c <usage_fault.isra.2+0x3c>
		PR_FAULT_INFO("  Division by zero");
    db68:	f04f 0100 	mov.w	r1, #0
    db6c:	2301      	movs	r3, #1
    db6e:	f363 0107 	bfi	r1, r3, #0, #8
    db72:	f364 118f 	bfi	r1, r4, #6, #10
    db76:	4834      	ldr	r0, [pc, #208]	; (dc48 <usage_fault.isra.2+0x108>)
    db78:	f00c f9a4 	bl	19ec4 <log_0>
	}
	if ((SCB->CFSR & SCB_CFSR_UNALIGNED_Msk) != 0) {
    db7c:	4b31      	ldr	r3, [pc, #196]	; (dc44 <usage_fault.isra.2+0x104>)
    db7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    db80:	01da      	lsls	r2, r3, #7
    db82:	d509      	bpl.n	db98 <usage_fault.isra.2+0x58>
		PR_FAULT_INFO("  Unaligned memory access");
    db84:	f04f 0100 	mov.w	r1, #0
    db88:	2301      	movs	r3, #1
    db8a:	f363 0107 	bfi	r1, r3, #0, #8
    db8e:	f364 118f 	bfi	r1, r4, #6, #10
    db92:	482e      	ldr	r0, [pc, #184]	; (dc4c <usage_fault.isra.2+0x10c>)
    db94:	f00c f996 	bl	19ec4 <log_0>
	}
#if defined(CONFIG_ARMV8_M_MAINLINE)
	if ((SCB->CFSR & SCB_CFSR_STKOF_Msk) != 0) {
    db98:	4b2a      	ldr	r3, [pc, #168]	; (dc44 <usage_fault.isra.2+0x104>)
    db9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    db9c:	02db      	lsls	r3, r3, #11
    db9e:	d509      	bpl.n	dbb4 <usage_fault.isra.2+0x74>
		PR_FAULT_INFO("  Stack overflow (context area not valid)");
    dba0:	f04f 0100 	mov.w	r1, #0
    dba4:	2301      	movs	r3, #1
    dba6:	f363 0107 	bfi	r1, r3, #0, #8
    dbaa:	f364 118f 	bfi	r1, r4, #6, #10
    dbae:	4828      	ldr	r0, [pc, #160]	; (dc50 <usage_fault.isra.2+0x110>)
    dbb0:	f00c f988 	bl	19ec4 <log_0>
		 */
		reason = K_ERR_STACK_CHK_FAIL;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
	}
#endif /* CONFIG_ARMV8_M_MAINLINE */
	if ((SCB->CFSR & SCB_CFSR_NOCP_Msk) != 0) {
    dbb4:	4b23      	ldr	r3, [pc, #140]	; (dc44 <usage_fault.isra.2+0x104>)
    dbb6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    dbb8:	0318      	lsls	r0, r3, #12
    dbba:	d509      	bpl.n	dbd0 <usage_fault.isra.2+0x90>
		PR_FAULT_INFO("  No coprocessor instructions");
    dbbc:	f04f 0100 	mov.w	r1, #0
    dbc0:	2301      	movs	r3, #1
    dbc2:	f363 0107 	bfi	r1, r3, #0, #8
    dbc6:	f364 118f 	bfi	r1, r4, #6, #10
    dbca:	4822      	ldr	r0, [pc, #136]	; (dc54 <usage_fault.isra.2+0x114>)
    dbcc:	f00c f97a 	bl	19ec4 <log_0>
	}
	if ((SCB->CFSR & SCB_CFSR_INVPC_Msk) != 0) {
    dbd0:	4b1c      	ldr	r3, [pc, #112]	; (dc44 <usage_fault.isra.2+0x104>)
    dbd2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    dbd4:	0359      	lsls	r1, r3, #13
    dbd6:	d509      	bpl.n	dbec <usage_fault.isra.2+0xac>
		PR_FAULT_INFO("  Illegal load of EXC_RETURN into PC");
    dbd8:	f04f 0100 	mov.w	r1, #0
    dbdc:	2301      	movs	r3, #1
    dbde:	f363 0107 	bfi	r1, r3, #0, #8
    dbe2:	f364 118f 	bfi	r1, r4, #6, #10
    dbe6:	481c      	ldr	r0, [pc, #112]	; (dc58 <usage_fault.isra.2+0x118>)
    dbe8:	f00c f96c 	bl	19ec4 <log_0>
	}
	if ((SCB->CFSR & SCB_CFSR_INVSTATE_Msk) != 0) {
    dbec:	4b15      	ldr	r3, [pc, #84]	; (dc44 <usage_fault.isra.2+0x104>)
    dbee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    dbf0:	039a      	lsls	r2, r3, #14
    dbf2:	d509      	bpl.n	dc08 <usage_fault.isra.2+0xc8>
		PR_FAULT_INFO("  Illegal use of the EPSR");
    dbf4:	f04f 0100 	mov.w	r1, #0
    dbf8:	2301      	movs	r3, #1
    dbfa:	f363 0107 	bfi	r1, r3, #0, #8
    dbfe:	f364 118f 	bfi	r1, r4, #6, #10
    dc02:	4816      	ldr	r0, [pc, #88]	; (dc5c <usage_fault.isra.2+0x11c>)
    dc04:	f00c f95e 	bl	19ec4 <log_0>
	}
	if ((SCB->CFSR & SCB_CFSR_UNDEFINSTR_Msk) != 0) {
    dc08:	4b0e      	ldr	r3, [pc, #56]	; (dc44 <usage_fault.isra.2+0x104>)
    dc0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    dc0c:	03db      	lsls	r3, r3, #15
    dc0e:	d509      	bpl.n	dc24 <usage_fault.isra.2+0xe4>
		PR_FAULT_INFO("  Attempt to execute undefined instruction");
    dc10:	f04f 0100 	mov.w	r1, #0
    dc14:	2301      	movs	r3, #1
    dc16:	f363 0107 	bfi	r1, r3, #0, #8
    dc1a:	f364 118f 	bfi	r1, r4, #6, #10
    dc1e:	4810      	ldr	r0, [pc, #64]	; (dc60 <usage_fault.isra.2+0x120>)
    dc20:	f00c f950 	bl	19ec4 <log_0>
	}

	/* clear UFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
    dc24:	4a07      	ldr	r2, [pc, #28]	; (dc44 <usage_fault.isra.2+0x104>)

	return reason;
}
    dc26:	2000      	movs	r0, #0
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
    dc28:	6a93      	ldr	r3, [r2, #40]	; 0x28
    dc2a:	ea6f 4303 	mvn.w	r3, r3, lsl #16
    dc2e:	ea6f 4313 	mvn.w	r3, r3, lsr #16
    dc32:	6293      	str	r3, [r2, #40]	; 0x28
}
    dc34:	bd10      	pop	{r4, pc}
    dc36:	bf00      	nop
    dc38:	0001c044 	.word	0x0001c044
    dc3c:	0001c004 	.word	0x0001c004
    dc40:	0001c9ad 	.word	0x0001c9ad
    dc44:	e000ed00 	.word	0xe000ed00
    dc48:	0001c9c5 	.word	0x0001c9c5
    dc4c:	0001c9d8 	.word	0x0001c9d8
    dc50:	0001c9f2 	.word	0x0001c9f2
    dc54:	0001ca1c 	.word	0x0001ca1c
    dc58:	0001ca3a 	.word	0x0001ca3a
    dc5c:	0001ca5f 	.word	0x0001ca5f
    dc60:	0001ca79 	.word	0x0001ca79

0000dc64 <mem_manage_fault.isra.4>:
static u32_t mem_manage_fault(z_arch_esf_t *esf, int from_hard_fault,
    dc64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	PR_FAULT_INFO("***** MPU FAULT *****");
    dc66:	2301      	movs	r3, #1
static u32_t mem_manage_fault(z_arch_esf_t *esf, int from_hard_fault,
    dc68:	460e      	mov	r6, r1
	PR_FAULT_INFO("***** MPU FAULT *****");
    dc6a:	f04f 0100 	mov.w	r1, #0
    dc6e:	4c37      	ldr	r4, [pc, #220]	; (dd4c <mem_manage_fault.isra.4+0xe8>)
    dc70:	f363 0107 	bfi	r1, r3, #0, #8
    dc74:	4b36      	ldr	r3, [pc, #216]	; (dd50 <mem_manage_fault.isra.4+0xec>)
static u32_t mem_manage_fault(z_arch_esf_t *esf, int from_hard_fault,
    dc76:	4607      	mov	r7, r0
	PR_FAULT_INFO("***** MPU FAULT *****");
    dc78:	1ae4      	subs	r4, r4, r3
    dc7a:	f3c4 04c9 	ubfx	r4, r4, #3, #10
    dc7e:	f364 118f 	bfi	r1, r4, #6, #10
    dc82:	4834      	ldr	r0, [pc, #208]	; (dd54 <mem_manage_fault.isra.4+0xf0>)
    dc84:	f00c f91e 	bl	19ec4 <log_0>
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
    dc88:	4b33      	ldr	r3, [pc, #204]	; (dd58 <mem_manage_fault.isra.4+0xf4>)
    dc8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    dc8c:	06d9      	lsls	r1, r3, #27
    dc8e:	d509      	bpl.n	dca4 <mem_manage_fault.isra.4+0x40>
		PR_FAULT_INFO("  Stacking error (context area might be"
    dc90:	f04f 0100 	mov.w	r1, #0
    dc94:	2301      	movs	r3, #1
    dc96:	f363 0107 	bfi	r1, r3, #0, #8
    dc9a:	f364 118f 	bfi	r1, r4, #6, #10
    dc9e:	482f      	ldr	r0, [pc, #188]	; (dd5c <mem_manage_fault.isra.4+0xf8>)
    dca0:	f00c f910 	bl	19ec4 <log_0>
	if ((SCB->CFSR & SCB_CFSR_MUNSTKERR_Msk) != 0) {
    dca4:	4b2c      	ldr	r3, [pc, #176]	; (dd58 <mem_manage_fault.isra.4+0xf4>)
    dca6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    dca8:	071a      	lsls	r2, r3, #28
    dcaa:	d509      	bpl.n	dcc0 <mem_manage_fault.isra.4+0x5c>
		PR_FAULT_INFO("  Unstacking error");
    dcac:	f04f 0100 	mov.w	r1, #0
    dcb0:	2301      	movs	r3, #1
    dcb2:	f363 0107 	bfi	r1, r3, #0, #8
    dcb6:	f364 118f 	bfi	r1, r4, #6, #10
    dcba:	4829      	ldr	r0, [pc, #164]	; (dd60 <mem_manage_fault.isra.4+0xfc>)
    dcbc:	f00c f902 	bl	19ec4 <log_0>
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
    dcc0:	4d25      	ldr	r5, [pc, #148]	; (dd58 <mem_manage_fault.isra.4+0xf4>)
    dcc2:	6aab      	ldr	r3, [r5, #40]	; 0x28
    dcc4:	079b      	lsls	r3, r3, #30
    dcc6:	d51c      	bpl.n	dd02 <mem_manage_fault.isra.4+0x9e>
		PR_FAULT_INFO("  Data Access Violation");
    dcc8:	2301      	movs	r3, #1
    dcca:	f04f 0100 	mov.w	r1, #0
    dcce:	f363 0107 	bfi	r1, r3, #0, #8
    dcd2:	f364 118f 	bfi	r1, r4, #6, #10
    dcd6:	4823      	ldr	r0, [pc, #140]	; (dd64 <mem_manage_fault.isra.4+0x100>)
    dcd8:	f00c f8f4 	bl	19ec4 <log_0>
		mmfar = SCB->MMFAR;
    dcdc:	6b69      	ldr	r1, [r5, #52]	; 0x34
		if ((SCB->CFSR & SCB_CFSR_MMARVALID_Msk) != 0) {
    dcde:	6aab      	ldr	r3, [r5, #40]	; 0x28
    dce0:	0618      	lsls	r0, r3, #24
    dce2:	d50e      	bpl.n	dd02 <mem_manage_fault.isra.4+0x9e>
			PR_EXC("  MMFAR Address: 0x%x", mmfar);
    dce4:	f04f 0200 	mov.w	r2, #0
    dce8:	2301      	movs	r3, #1
    dcea:	f363 0207 	bfi	r2, r3, #0, #8
    dcee:	f364 128f 	bfi	r2, r4, #6, #10
    dcf2:	481d      	ldr	r0, [pc, #116]	; (dd68 <mem_manage_fault.isra.4+0x104>)
    dcf4:	f00c f8f3 	bl	19ede <log_1>
			if (from_hard_fault) {
    dcf8:	b11f      	cbz	r7, dd02 <mem_manage_fault.isra.4+0x9e>
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
    dcfa:	6aab      	ldr	r3, [r5, #40]	; 0x28
    dcfc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    dd00:	62ab      	str	r3, [r5, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_IACCVIOL_Msk) != 0) {
    dd02:	4b15      	ldr	r3, [pc, #84]	; (dd58 <mem_manage_fault.isra.4+0xf4>)
    dd04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    dd06:	07da      	lsls	r2, r3, #31
    dd08:	d509      	bpl.n	dd1e <mem_manage_fault.isra.4+0xba>
		PR_FAULT_INFO("  Instruction Access Violation");
    dd0a:	f04f 0100 	mov.w	r1, #0
    dd0e:	2301      	movs	r3, #1
    dd10:	f363 0107 	bfi	r1, r3, #0, #8
    dd14:	f364 118f 	bfi	r1, r4, #6, #10
    dd18:	4814      	ldr	r0, [pc, #80]	; (dd6c <mem_manage_fault.isra.4+0x108>)
    dd1a:	f00c f8d3 	bl	19ec4 <log_0>
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
    dd1e:	4b0e      	ldr	r3, [pc, #56]	; (dd58 <mem_manage_fault.isra.4+0xf4>)
    dd20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    dd22:	069b      	lsls	r3, r3, #26
    dd24:	d509      	bpl.n	dd3a <mem_manage_fault.isra.4+0xd6>
		PR_FAULT_INFO(
    dd26:	f04f 0100 	mov.w	r1, #0
    dd2a:	2301      	movs	r3, #1
    dd2c:	f363 0107 	bfi	r1, r3, #0, #8
    dd30:	f364 118f 	bfi	r1, r4, #6, #10
    dd34:	480e      	ldr	r0, [pc, #56]	; (dd70 <mem_manage_fault.isra.4+0x10c>)
    dd36:	f00c f8c5 	bl	19ec4 <log_0>
	*recoverable = memory_fault_recoverable(esf);
    dd3a:	2000      	movs	r0, #0
	if (SCB->CFSR & SCB_CFSR_MSTKERR_Msk) {
    dd3c:	4b06      	ldr	r3, [pc, #24]	; (dd58 <mem_manage_fault.isra.4+0xf4>)
    dd3e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
    dd40:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    dd42:	f042 02ff 	orr.w	r2, r2, #255	; 0xff
    dd46:	629a      	str	r2, [r3, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf);
    dd48:	7030      	strb	r0, [r6, #0]
}
    dd4a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    dd4c:	0001c044 	.word	0x0001c044
    dd50:	0001c004 	.word	0x0001c004
    dd54:	0001c8d5 	.word	0x0001c8d5
    dd58:	e000ed00 	.word	0xe000ed00
    dd5c:	0001c8eb 	.word	0x0001c8eb
    dd60:	0001c91e 	.word	0x0001c91e
    dd64:	0001c931 	.word	0x0001c931
    dd68:	0001c949 	.word	0x0001c949
    dd6c:	0001c95f 	.word	0x0001c95f
    dd70:	0001c97e 	.word	0x0001c97e

0000dd74 <bus_fault.isra.5>:
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
    dd74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	PR_FAULT_INFO("***** BUS FAULT *****");
    dd76:	2301      	movs	r3, #1
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
    dd78:	460e      	mov	r6, r1
	PR_FAULT_INFO("***** BUS FAULT *****");
    dd7a:	f04f 0100 	mov.w	r1, #0
    dd7e:	4c3d      	ldr	r4, [pc, #244]	; (de74 <bus_fault.isra.5+0x100>)
    dd80:	f363 0107 	bfi	r1, r3, #0, #8
    dd84:	4b3c      	ldr	r3, [pc, #240]	; (de78 <bus_fault.isra.5+0x104>)
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
    dd86:	4607      	mov	r7, r0
	PR_FAULT_INFO("***** BUS FAULT *****");
    dd88:	1ae4      	subs	r4, r4, r3
    dd8a:	f3c4 04c9 	ubfx	r4, r4, #3, #10
    dd8e:	f364 118f 	bfi	r1, r4, #6, #10
    dd92:	483a      	ldr	r0, [pc, #232]	; (de7c <bus_fault.isra.5+0x108>)
    dd94:	f00c f896 	bl	19ec4 <log_0>
	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
    dd98:	4b39      	ldr	r3, [pc, #228]	; (de80 <bus_fault.isra.5+0x10c>)
    dd9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    dd9c:	04d9      	lsls	r1, r3, #19
    dd9e:	d509      	bpl.n	ddb4 <bus_fault.isra.5+0x40>
		PR_FAULT_INFO("  Stacking error");
    dda0:	f04f 0100 	mov.w	r1, #0
    dda4:	2301      	movs	r3, #1
    dda6:	f363 0107 	bfi	r1, r3, #0, #8
    ddaa:	f364 118f 	bfi	r1, r4, #6, #10
    ddae:	4835      	ldr	r0, [pc, #212]	; (de84 <bus_fault.isra.5+0x110>)
    ddb0:	f00c f888 	bl	19ec4 <log_0>
	if (SCB->CFSR & SCB_CFSR_UNSTKERR_Msk) {
    ddb4:	4b32      	ldr	r3, [pc, #200]	; (de80 <bus_fault.isra.5+0x10c>)
    ddb6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    ddb8:	051a      	lsls	r2, r3, #20
    ddba:	d509      	bpl.n	ddd0 <bus_fault.isra.5+0x5c>
		PR_FAULT_INFO("  Unstacking error");
    ddbc:	f04f 0100 	mov.w	r1, #0
    ddc0:	2301      	movs	r3, #1
    ddc2:	f363 0107 	bfi	r1, r3, #0, #8
    ddc6:	f364 118f 	bfi	r1, r4, #6, #10
    ddca:	482f      	ldr	r0, [pc, #188]	; (de88 <bus_fault.isra.5+0x114>)
    ddcc:	f00c f87a 	bl	19ec4 <log_0>
	if (SCB->CFSR & SCB_CFSR_PRECISERR_Msk) {
    ddd0:	4d2b      	ldr	r5, [pc, #172]	; (de80 <bus_fault.isra.5+0x10c>)
    ddd2:	6aab      	ldr	r3, [r5, #40]	; 0x28
    ddd4:	059b      	lsls	r3, r3, #22
    ddd6:	d51c      	bpl.n	de12 <bus_fault.isra.5+0x9e>
		PR_FAULT_INFO("  Precise data bus error");
    ddd8:	2301      	movs	r3, #1
    ddda:	f04f 0100 	mov.w	r1, #0
    ddde:	f363 0107 	bfi	r1, r3, #0, #8
    dde2:	f364 118f 	bfi	r1, r4, #6, #10
    dde6:	4829      	ldr	r0, [pc, #164]	; (de8c <bus_fault.isra.5+0x118>)
    dde8:	f00c f86c 	bl	19ec4 <log_0>
		STORE_xFAR(bfar, SCB->BFAR);
    ddec:	6ba9      	ldr	r1, [r5, #56]	; 0x38
		if ((SCB->CFSR & SCB_CFSR_BFARVALID_Msk) != 0) {
    ddee:	6aab      	ldr	r3, [r5, #40]	; 0x28
    ddf0:	0418      	lsls	r0, r3, #16
    ddf2:	d50e      	bpl.n	de12 <bus_fault.isra.5+0x9e>
			PR_EXC("  BFAR Address: 0x%x", bfar);
    ddf4:	f04f 0200 	mov.w	r2, #0
    ddf8:	2301      	movs	r3, #1
    ddfa:	f363 0207 	bfi	r2, r3, #0, #8
    ddfe:	f364 128f 	bfi	r2, r4, #6, #10
    de02:	4823      	ldr	r0, [pc, #140]	; (de90 <bus_fault.isra.5+0x11c>)
    de04:	f00c f86b 	bl	19ede <log_1>
			if (from_hard_fault) {
    de08:	b11f      	cbz	r7, de12 <bus_fault.isra.5+0x9e>
				SCB->CFSR &= ~SCB_CFSR_BFARVALID_Msk;
    de0a:	6aab      	ldr	r3, [r5, #40]	; 0x28
    de0c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
    de10:	62ab      	str	r3, [r5, #40]	; 0x28
	if (SCB->CFSR & SCB_CFSR_IMPRECISERR_Msk) {
    de12:	4b1b      	ldr	r3, [pc, #108]	; (de80 <bus_fault.isra.5+0x10c>)
    de14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    de16:	0559      	lsls	r1, r3, #21
    de18:	d509      	bpl.n	de2e <bus_fault.isra.5+0xba>
		PR_FAULT_INFO("  Imprecise data bus error");
    de1a:	f04f 0100 	mov.w	r1, #0
    de1e:	2301      	movs	r3, #1
    de20:	f363 0107 	bfi	r1, r3, #0, #8
    de24:	f364 118f 	bfi	r1, r4, #6, #10
    de28:	481a      	ldr	r0, [pc, #104]	; (de94 <bus_fault.isra.5+0x120>)
    de2a:	f00c f84b 	bl	19ec4 <log_0>
	if ((SCB->CFSR & SCB_CFSR_IBUSERR_Msk) != 0) {
    de2e:	4b14      	ldr	r3, [pc, #80]	; (de80 <bus_fault.isra.5+0x10c>)
    de30:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    de32:	05d2      	lsls	r2, r2, #23
    de34:	d511      	bpl.n	de5a <bus_fault.isra.5+0xe6>
		PR_FAULT_INFO("  Instruction bus error");
    de36:	f04f 0100 	mov.w	r1, #0
    de3a:	2301      	movs	r3, #1
    de3c:	4816      	ldr	r0, [pc, #88]	; (de98 <bus_fault.isra.5+0x124>)
    de3e:	f363 0107 	bfi	r1, r3, #0, #8
    de42:	f364 118f 	bfi	r1, r4, #6, #10
		PR_FAULT_INFO("  Floating-point lazy state preservation error");
    de46:	f00c f83d 	bl	19ec4 <log_0>
	*recoverable = memory_fault_recoverable(esf);
    de4a:	2000      	movs	r0, #0
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
    de4c:	4a0c      	ldr	r2, [pc, #48]	; (de80 <bus_fault.isra.5+0x10c>)
    de4e:	6a93      	ldr	r3, [r2, #40]	; 0x28
    de50:	f443 437f 	orr.w	r3, r3, #65280	; 0xff00
    de54:	6293      	str	r3, [r2, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf);
    de56:	7030      	strb	r0, [r6, #0]
}
    de58:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
    de5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    de5c:	049b      	lsls	r3, r3, #18
    de5e:	d5f4      	bpl.n	de4a <bus_fault.isra.5+0xd6>
		PR_FAULT_INFO("  Floating-point lazy state preservation error");
    de60:	f04f 0100 	mov.w	r1, #0
    de64:	2301      	movs	r3, #1
    de66:	f363 0107 	bfi	r1, r3, #0, #8
    de6a:	f364 118f 	bfi	r1, r4, #6, #10
    de6e:	480b      	ldr	r0, [pc, #44]	; (de9c <bus_fault.isra.5+0x128>)
    de70:	e7e9      	b.n	de46 <bus_fault.isra.5+0xd2>
    de72:	bf00      	nop
    de74:	0001c044 	.word	0x0001c044
    de78:	0001c004 	.word	0x0001c004
    de7c:	0001c84d 	.word	0x0001c84d
    de80:	e000ed00 	.word	0xe000ed00
    de84:	0001c863 	.word	0x0001c863
    de88:	0001c91e 	.word	0x0001c91e
    de8c:	0001c874 	.word	0x0001c874
    de90:	0001c88d 	.word	0x0001c88d
    de94:	0001c8a2 	.word	0x0001c8a2
    de98:	0001c8bd 	.word	0x0001c8bd
    de9c:	0001c97e 	.word	0x0001c97e

0000dea0 <z_arm_fault>:
 * @param psp PSP value immediately after the exception occurred
 * @param exc_return EXC_RETURN value present in LR after exception entry.
 *
 */
void z_arm_fault(u32_t msp, u32_t psp, u32_t exc_return)
{
    dea0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	u32_t reason = K_ERR_CPU_EXCEPTION;
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    dea4:	4b69      	ldr	r3, [pc, #420]	; (e04c <z_arm_fault+0x1ac>)
{
    dea6:	b09d      	sub	sp, #116	; 0x74
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    dea8:	f8d3 8004 	ldr.w	r8, [r3, #4]
{
    deac:	4606      	mov	r6, r0
    deae:	4689      	mov	r9, r1
    deb0:	4614      	mov	r4, r2
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    deb2:	f3c8 0708 	ubfx	r7, r8, #0, #9
    deb6:	2500      	movs	r5, #0
    deb8:	f385 8811 	msr	BASEPRI, r5
    debc:	f3bf 8f6f 	isb	sy
	if ((exc_return & EXC_RETURN_INDICATOR_PREFIX) !=
    dec0:	f002 437f 	and.w	r3, r2, #4278190080	; 0xff000000
    dec4:	f1b3 4f7f 	cmp.w	r3, #4278190080	; 0xff000000
    dec8:	d128      	bne.n	df1c <z_arm_fault+0x7c>
	if (exc_return & EXC_RETURN_EXCEPTION_SECURE_Secure) {
    deca:	07d0      	lsls	r0, r2, #31
    decc:	d426      	bmi.n	df1c <z_arm_fault+0x7c>
	if (exc_return & EXC_RETURN_RETURN_STACK_Secure) {
    dece:	0651      	lsls	r1, r2, #25
    ded0:	d403      	bmi.n	deda <z_arm_fault+0x3a>
		if (exc_return & EXC_RETURN_MODE_THREAD) {
    ded2:	0722      	lsls	r2, r4, #28
    ded4:	d412      	bmi.n	defc <z_arm_fault+0x5c>
			*nested_exc = true;
    ded6:	2501      	movs	r5, #1
    ded8:	e012      	b.n	df00 <z_arm_fault+0x60>
		PR_FAULT_INFO("Exception occurred in Secure State");
    deda:	2301      	movs	r3, #1
    dedc:	f04f 0100 	mov.w	r1, #0
    dee0:	4a5b      	ldr	r2, [pc, #364]	; (e050 <z_arm_fault+0x1b0>)
    dee2:	f363 0107 	bfi	r1, r3, #0, #8
    dee6:	4b5b      	ldr	r3, [pc, #364]	; (e054 <z_arm_fault+0x1b4>)
    dee8:	485b      	ldr	r0, [pc, #364]	; (e058 <z_arm_fault+0x1b8>)
    deea:	1a9b      	subs	r3, r3, r2
    deec:	08db      	lsrs	r3, r3, #3
    deee:	f363 118f 	bfi	r1, r3, #6, #10
    def2:	f00b ffe7 	bl	19ec4 <log_0>
		if (exc_return & EXC_RETURN_SPSEL_PROCESS) {
    def6:	f014 0504 	ands.w	r5, r4, #4
    defa:	d001      	beq.n	df00 <z_arm_fault+0x60>
			ptr_esf = (z_arch_esf_t *)psp;
    defc:	464e      	mov	r6, r9
	*nested_exc = false;
    defe:	2500      	movs	r5, #0
	*recoverable = false;
    df00:	2300      	movs	r3, #0
    df02:	f88d 3007 	strb.w	r3, [sp, #7]
	switch (fault) {
    df06:	1efb      	subs	r3, r7, #3
    df08:	2b09      	cmp	r3, #9
    df0a:	f200 8082 	bhi.w	e012 <z_arm_fault+0x172>
    df0e:	e8df f003 	tbb	[pc, r3]
    df12:	6b07      	.short	0x6b07
    df14:	80804e6f 	.word	0x80804e6f
    df18:	73808080 	.word	0x73808080
		return NULL;
    df1c:	462e      	mov	r6, r5
    df1e:	e7ef      	b.n	df00 <z_arm_fault+0x60>
	PR_FAULT_INFO("***** HARD FAULT *****");
    df20:	2301      	movs	r3, #1
    df22:	f04f 0100 	mov.w	r1, #0
	*recoverable = false;
    df26:	f04f 0800 	mov.w	r8, #0
	PR_FAULT_INFO("***** HARD FAULT *****");
    df2a:	f363 0107 	bfi	r1, r3, #0, #8
    df2e:	4f49      	ldr	r7, [pc, #292]	; (e054 <z_arm_fault+0x1b4>)
    df30:	4b47      	ldr	r3, [pc, #284]	; (e050 <z_arm_fault+0x1b0>)
    df32:	484a      	ldr	r0, [pc, #296]	; (e05c <z_arm_fault+0x1bc>)
    df34:	1aff      	subs	r7, r7, r3
    df36:	f3c7 07c9 	ubfx	r7, r7, #3, #10
    df3a:	f367 118f 	bfi	r1, r7, #6, #10
    df3e:	f00b ffc1 	bl	19ec4 <log_0>
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
    df42:	4b42      	ldr	r3, [pc, #264]	; (e04c <z_arm_fault+0x1ac>)
	*recoverable = false;
    df44:	f88d 8007 	strb.w	r8, [sp, #7]
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
    df48:	6adc      	ldr	r4, [r3, #44]	; 0x2c
    df4a:	f014 0402 	ands.w	r4, r4, #2
    df4e:	d00b      	beq.n	df68 <z_arm_fault+0xc8>
		PR_EXC("  Bus fault on vector table read");
    df50:	f04f 0100 	mov.w	r1, #0
    df54:	2301      	movs	r3, #1
    df56:	4842      	ldr	r0, [pc, #264]	; (e060 <z_arm_fault+0x1c0>)
    df58:	f363 0107 	bfi	r1, r3, #0, #8
    df5c:	f367 118f 	bfi	r1, r7, #6, #10
	PR_FAULT_INFO(
    df60:	f00b ffb0 	bl	19ec4 <log_0>
	u32_t reason = K_ERR_CPU_EXCEPTION;
    df64:	2400      	movs	r4, #0
    df66:	e025      	b.n	dfb4 <z_arm_fault+0x114>
	} else if ((SCB->HFSR & SCB_HFSR_FORCED_Msk) != 0) {
    df68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    df6a:	005b      	lsls	r3, r3, #1
    df6c:	d522      	bpl.n	dfb4 <z_arm_fault+0x114>
		PR_EXC("  Fault escalation (see below)");
    df6e:	2301      	movs	r3, #1
    df70:	f04f 0100 	mov.w	r1, #0
    df74:	f363 0107 	bfi	r1, r3, #0, #8
    df78:	f367 118f 	bfi	r1, r7, #6, #10
    df7c:	4839      	ldr	r0, [pc, #228]	; (e064 <z_arm_fault+0x1c4>)
    df7e:	f00b ffa1 	bl	19ec4 <log_0>
		if (SCB_MMFSR != 0) {
    df82:	4b39      	ldr	r3, [pc, #228]	; (e068 <z_arm_fault+0x1c8>)
    df84:	781b      	ldrb	r3, [r3, #0]
    df86:	b12b      	cbz	r3, df94 <z_arm_fault+0xf4>
			reason = mem_manage_fault(esf, 1, recoverable);
    df88:	2001      	movs	r0, #1
    df8a:	f10d 0107 	add.w	r1, sp, #7
		reason = mem_manage_fault(esf, 0, recoverable);
    df8e:	f7ff fe69 	bl	dc64 <mem_manage_fault.isra.4>
    df92:	e00e      	b.n	dfb2 <z_arm_fault+0x112>
		} else if (SCB_BFSR != 0) {
    df94:	4b35      	ldr	r3, [pc, #212]	; (e06c <z_arm_fault+0x1cc>)
    df96:	781b      	ldrb	r3, [r3, #0]
    df98:	b12b      	cbz	r3, dfa6 <z_arm_fault+0x106>
			reason = bus_fault(esf, 1, recoverable);
    df9a:	2001      	movs	r0, #1
    df9c:	f10d 0107 	add.w	r1, sp, #7
		reason = bus_fault(esf, 0, recoverable);
    dfa0:	f7ff fee8 	bl	dd74 <bus_fault.isra.5>
    dfa4:	e005      	b.n	dfb2 <z_arm_fault+0x112>
		} else if (SCB_UFSR != 0) {
    dfa6:	4b32      	ldr	r3, [pc, #200]	; (e070 <z_arm_fault+0x1d0>)
    dfa8:	881b      	ldrh	r3, [r3, #0]
    dfaa:	b29b      	uxth	r3, r3
    dfac:	b113      	cbz	r3, dfb4 <z_arm_fault+0x114>
			reason = usage_fault(esf);
    dfae:	f7ff fdc7 	bl	db40 <usage_fault.isra.2>
    dfb2:	4604      	mov	r4, r0
	 esf = get_esf(msp, psp, exc_return, &nested_exc);
	__ASSERT(esf != NULL,
		"ESF could not be retrieved successfully. Shall never occur.");

	reason = fault_handle(esf, fault, &recoverable);
	if (recoverable) {
    dfb4:	f89d 3007 	ldrb.w	r3, [sp, #7]
    dfb8:	b99b      	cbnz	r3, dfe2 <z_arm_fault+0x142>
		return;
	}

	/* Copy ESF */
	memcpy(&esf_copy, esf, sizeof(z_arch_esf_t));
    dfba:	2268      	movs	r2, #104	; 0x68
    dfbc:	4631      	mov	r1, r6
    dfbe:	a802      	add	r0, sp, #8
    dfc0:	f00c fc31 	bl	1a826 <memcpy>
	/* Overwrite stacked IPSR to mark a nested exception,
	 * or a return to Thread mode. Note that this may be
	 * required, if the retrieved ESF contents are invalid
	 * due to, for instance, a stacking error.
	 */
	if (nested_exc) {
    dfc4:	9b09      	ldr	r3, [sp, #36]	; 0x24
    dfc6:	2d00      	cmp	r5, #0
    dfc8:	d03a      	beq.n	e040 <z_arm_fault+0x1a0>
		if ((esf_copy.basic.xpsr & IPSR_ISR_Msk) == 0) {
    dfca:	f3c3 0208 	ubfx	r2, r3, #0, #9
    dfce:	b922      	cbnz	r2, dfda <z_arm_fault+0x13a>
			esf_copy.basic.xpsr |= IPSR_ISR_Msk;
    dfd0:	ea6f 2353 	mvn.w	r3, r3, lsr #9
    dfd4:	ea6f 2343 	mvn.w	r3, r3, lsl #9
		}
	} else {
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
    dfd8:	9309      	str	r3, [sp, #36]	; 0x24
	}

	z_arm_fatal_error(reason, &esf_copy);
    dfda:	a902      	add	r1, sp, #8
    dfdc:	4620      	mov	r0, r4
    dfde:	f7ff fcd5 	bl	d98c <z_arm_fatal_error>
}
    dfe2:	b01d      	add	sp, #116	; 0x74
    dfe4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		reason = mem_manage_fault(esf, 0, recoverable);
    dfe8:	f10d 0107 	add.w	r1, sp, #7
    dfec:	2000      	movs	r0, #0
    dfee:	e7ce      	b.n	df8e <z_arm_fault+0xee>
		reason = bus_fault(esf, 0, recoverable);
    dff0:	f10d 0107 	add.w	r1, sp, #7
    dff4:	2000      	movs	r0, #0
    dff6:	e7d3      	b.n	dfa0 <z_arm_fault+0x100>
	PR_FAULT_INFO(
    dff8:	2301      	movs	r3, #1
    dffa:	f04f 0100 	mov.w	r1, #0
    dffe:	4a14      	ldr	r2, [pc, #80]	; (e050 <z_arm_fault+0x1b0>)
    e000:	f363 0107 	bfi	r1, r3, #0, #8
    e004:	4b13      	ldr	r3, [pc, #76]	; (e054 <z_arm_fault+0x1b4>)
    e006:	481b      	ldr	r0, [pc, #108]	; (e074 <z_arm_fault+0x1d4>)
    e008:	1a9b      	subs	r3, r3, r2
    e00a:	08db      	lsrs	r3, r3, #3
    e00c:	f363 118f 	bfi	r1, r3, #6, #10
    e010:	e7a6      	b.n	df60 <z_arm_fault+0xc0>
	PR_FAULT_INFO("***** %s %d) *****",
    e012:	2201      	movs	r2, #1
    e014:	f04f 0300 	mov.w	r3, #0
    e018:	490e      	ldr	r1, [pc, #56]	; (e054 <z_arm_fault+0x1b4>)
    e01a:	f362 0307 	bfi	r3, r2, #0, #8
    e01e:	4a0c      	ldr	r2, [pc, #48]	; (e050 <z_arm_fault+0x1b0>)
    e020:	4815      	ldr	r0, [pc, #84]	; (e078 <z_arm_fault+0x1d8>)
    e022:	1a89      	subs	r1, r1, r2
    e024:	08c9      	lsrs	r1, r1, #3
    e026:	f418 7ff8 	tst.w	r8, #496	; 0x1f0
    e02a:	f361 138f 	bfi	r3, r1, #6, #10
    e02e:	f1a7 0210 	sub.w	r2, r7, #16
    e032:	4912      	ldr	r1, [pc, #72]	; (e07c <z_arm_fault+0x1dc>)
    e034:	bf18      	it	ne
    e036:	4601      	movne	r1, r0
    e038:	4811      	ldr	r0, [pc, #68]	; (e080 <z_arm_fault+0x1e0>)
    e03a:	f00b ff64 	bl	19f06 <log_2>
    e03e:	e791      	b.n	df64 <z_arm_fault+0xc4>
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
    e040:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
    e044:	f023 0301 	bic.w	r3, r3, #1
    e048:	e7c6      	b.n	dfd8 <z_arm_fault+0x138>
    e04a:	bf00      	nop
    e04c:	e000ed00 	.word	0xe000ed00
    e050:	0001c004 	.word	0x0001c004
    e054:	0001c044 	.word	0x0001c044
    e058:	0001caa4 	.word	0x0001caa4
    e05c:	0001cac7 	.word	0x0001cac7
    e060:	0001cade 	.word	0x0001cade
    e064:	0001caff 	.word	0x0001caff
    e068:	e000ed28 	.word	0xe000ed28
    e06c:	e000ed29 	.word	0xe000ed29
    e070:	e000ed2a 	.word	0xe000ed2a
    e074:	0001cb1e 	.word	0x0001cb1e
    e078:	0001cb69 	.word	0x0001cb69
    e07c:	0001cb54 	.word	0x0001cb54
    e080:	0001cb82 	.word	0x0001cb82

0000e084 <z_arm_fault_init>:
 */
void z_arm_fault_init(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
    e084:	4a02      	ldr	r2, [pc, #8]	; (e090 <z_arm_fault_init+0xc>)
    e086:	6953      	ldr	r3, [r2, #20]
    e088:	f043 0310 	orr.w	r3, r3, #16
    e08c:	6153      	str	r3, [r2, #20]
	 * Stack to attempt to descend into secure region, in which case a
	 * Secure Hard Fault will occur and we can track the fault from there.
	 */
	SCB->CCR |= SCB_CCR_STKOFHFNMIGN_Msk;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
}
    e08e:	4770      	bx	lr
    e090:	e000ed00 	.word	0xe000ed00

0000e094 <sys_arch_reboot>:
  __ASM volatile ("dsb 0xF":::"memory");
    e094:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
    e098:	4905      	ldr	r1, [pc, #20]	; (e0b0 <sys_arch_reboot+0x1c>)
    e09a:	4b06      	ldr	r3, [pc, #24]	; (e0b4 <sys_arch_reboot+0x20>)
    e09c:	68ca      	ldr	r2, [r1, #12]
    e09e:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
    e0a2:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
    e0a4:	60cb      	str	r3, [r1, #12]
    e0a6:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
    e0aa:	bf00      	nop
    e0ac:	e7fd      	b.n	e0aa <sys_arch_reboot+0x16>
    e0ae:	bf00      	nop
    e0b0:	e000ed00 	.word	0xe000ed00
    e0b4:	05fa0004 	.word	0x05fa0004

0000e0b8 <z_arm_int_lib_init>:
 * @return N/A
 */

void z_arm_int_lib_init(void)
{
	int irq = 0;
    e0b8:	2300      	movs	r3, #0
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    e0ba:	2120      	movs	r1, #32
    e0bc:	4803      	ldr	r0, [pc, #12]	; (e0cc <z_arm_int_lib_init+0x14>)
    e0be:	18c2      	adds	r2, r0, r3

	for (; irq < CONFIG_NUM_IRQS; irq++) {
    e0c0:	3301      	adds	r3, #1
    e0c2:	2b41      	cmp	r3, #65	; 0x41
    e0c4:	f882 1300 	strb.w	r1, [r2, #768]	; 0x300
    e0c8:	d1f9      	bne.n	e0be <z_arm_int_lib_init+0x6>
		NVIC_SetPriority((IRQn_Type)irq, _IRQ_PRIO_OFFSET);
	}
}
    e0ca:	4770      	bx	lr
    e0cc:	e000e100 	.word	0xe000e100

0000e0d0 <z_impl_k_thread_abort>:
#include <sys/__assert.h>

extern void z_thread_single_abort(struct k_thread *thread);

void z_impl_k_thread_abort(k_tid_t thread)
{
    e0d0:	b538      	push	{r3, r4, r5, lr}
    e0d2:	4605      	mov	r5, r0
	__asm__ volatile(
    e0d4:	f04f 0320 	mov.w	r3, #32
    e0d8:	f3ef 8411 	mrs	r4, BASEPRI
    e0dc:	f383 8811 	msr	BASEPRI, r3
    e0e0:	f3bf 8f6f 	isb	sy
	key = irq_lock();

	__ASSERT(!(thread->base.user_options & K_ESSENTIAL),
		 "essential thread aborted");

	z_thread_single_abort(thread);
    e0e4:	f00a fe36 	bl	18d54 <z_thread_single_abort>
	z_thread_monitor_exit(thread);

	if (_current == thread) {
    e0e8:	4b0a      	ldr	r3, [pc, #40]	; (e114 <z_impl_k_thread_abort+0x44>)
    e0ea:	689b      	ldr	r3, [r3, #8]
    e0ec:	42ab      	cmp	r3, r5
    e0ee:	d10b      	bne.n	e108 <z_impl_k_thread_abort+0x38>
		if ((SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk) == 0) {
    e0f0:	4b09      	ldr	r3, [pc, #36]	; (e118 <z_impl_k_thread_abort+0x48>)
    e0f2:	685a      	ldr	r2, [r3, #4]
    e0f4:	f3c2 0208 	ubfx	r2, r2, #0, #9
    e0f8:	b912      	cbnz	r2, e100 <z_impl_k_thread_abort+0x30>
	int ret;
	z_check_stack_sentinel();
#ifndef CONFIG_ARM
	sys_trace_thread_switched_out();
#endif
	ret = arch_swap(key);
    e0fa:	4620      	mov	r0, r4
    e0fc:	f7ff fba8 	bl	d850 <arch_swap>
			(void)z_swap_irqlock(key);
			CODE_UNREACHABLE;
		} else {
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    e100:	685a      	ldr	r2, [r3, #4]
    e102:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
    e106:	605a      	str	r2, [r3, #4]
		}
	}

	/* The abort handler might have altered the ready queue. */
	z_reschedule_irqlock(key);
    e108:	4620      	mov	r0, r4
}
    e10a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule_irqlock(key);
    e10e:	f00d bb6c 	b.w	1b7ea <z_reschedule_irqlock>
    e112:	bf00      	nop
    e114:	20024bc4 	.word	0x20024bc4
    e118:	e000ed00 	.word	0xe000ed00

0000e11c <z_arm_configure_static_mpu_regions>:
 *
 * For some MPU architectures, such as the unmodified ARMv8-M MPU,
 * the function must execute with MPU enabled.
 */
void z_arm_configure_static_mpu_regions(void)
{
    e11c:	b510      	push	{r4, lr}
		.size = (u32_t)&_nocache_ram_size,
		.attr = K_MEM_PARTITION_P_RW_U_NA_NOCACHE,
		};
#endif /* CONFIG_NOCACHE_MEMORY */
#if defined(CONFIG_ARCH_HAS_RAMFUNC_SUPPORT)
		const struct k_mem_partition ramfunc_region =
    e11e:	4b0e      	ldr	r3, [pc, #56]	; (e158 <z_arm_configure_static_mpu_regions+0x3c>)
{
    e120:	b088      	sub	sp, #32
		const struct k_mem_partition ramfunc_region =
    e122:	9302      	str	r3, [sp, #8]
    e124:	4b0d      	ldr	r3, [pc, #52]	; (e15c <z_arm_configure_static_mpu_regions+0x40>)
	/* Configure the static MPU regions within firmware SRAM boundaries.
	 * Start address of the image is given by _image_ram_start. The end
	 * of the firmware SRAM area is marked by __kernel_ram_end, taking
	 * into account the unused SRAM area, as well.
	 */
	arm_core_mpu_configure_static_mpu_regions(static_regions,
    e126:	4c0e      	ldr	r4, [pc, #56]	; (e160 <z_arm_configure_static_mpu_regions+0x44>)
		const struct k_mem_partition ramfunc_region =
    e128:	9303      	str	r3, [sp, #12]
    e12a:	4b0e      	ldr	r3, [pc, #56]	; (e164 <z_arm_configure_static_mpu_regions+0x48>)
	arm_core_mpu_configure_static_mpu_regions(static_regions,
    e12c:	4a0e      	ldr	r2, [pc, #56]	; (e168 <z_arm_configure_static_mpu_regions+0x4c>)
		const struct k_mem_partition ramfunc_region =
    e12e:	9304      	str	r3, [sp, #16]
	const struct k_mem_partition *static_regions[] = {
    e130:	ab02      	add	r3, sp, #8
    e132:	9301      	str	r3, [sp, #4]
	arm_core_mpu_configure_static_mpu_regions(static_regions,
    e134:	a801      	add	r0, sp, #4
    e136:	4623      	mov	r3, r4
    e138:	2101      	movs	r1, #1
    e13a:	f000 f951 	bl	e3e0 <arm_core_mpu_configure_static_mpu_regions>
	/* Define a constant array of k_mem_partition objects that holds the
	 * boundaries of the areas, inside which dynamic region programming
	 * is allowed. The information is passed to the underlying driver at
	 * initialization.
	 */
	const struct k_mem_partition dyn_region_areas[] = {
    e13e:	2300      	movs	r3, #0
    e140:	9307      	str	r3, [sp, #28]
		{
		.start = _MPU_DYNAMIC_REGIONS_AREA_START,
    e142:	4b0a      	ldr	r3, [pc, #40]	; (e16c <z_arm_configure_static_mpu_regions+0x50>)
		.size =  _MPU_DYNAMIC_REGIONS_AREA_SIZE,
		}
	};

	arm_core_mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
    e144:	2101      	movs	r1, #1
		.size =  _MPU_DYNAMIC_REGIONS_AREA_SIZE,
    e146:	1ae4      	subs	r4, r4, r3
	arm_core_mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
    e148:	a805      	add	r0, sp, #20
	const struct k_mem_partition dyn_region_areas[] = {
    e14a:	9305      	str	r3, [sp, #20]
    e14c:	9406      	str	r4, [sp, #24]
	arm_core_mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
    e14e:	f000 f951 	bl	e3f4 <arm_core_mpu_mark_areas_for_dynamic_regions>
		ARRAY_SIZE(dyn_region_areas));
#endif /* CONFIG_MPU_REQUIRES_NON_OVERLAPPING_REGIONS */
}
    e152:	b008      	add	sp, #32
    e154:	bd10      	pop	{r4, pc}
    e156:	bf00      	nop
    e158:	20020000 	.word	0x20020000
    e15c:	00000000 	.word	0x00000000
    e160:	20040000 	.word	0x20040000
    e164:	00010006 	.word	0x00010006
    e168:	20020000 	.word	0x20020000
    e16c:	20020000 	.word	0x20020000

0000e170 <region_init>:
 * Note:
 *   The caller must provide a valid region index.
 */
static void region_init(const u32_t index,
	const struct arm_mpu_region *region_conf)
{
    e170:	b510      	push	{r4, lr}
	ARM_MPU_SetRegion(
		/* RNR */
		index,
		/* RBAR */
		(region_conf->base & MPU_RBAR_BASE_Msk)
    e172:	680b      	ldr	r3, [r1, #0]
		| (region_conf->attr.rbar &
    e174:	7a0c      	ldrb	r4, [r1, #8]
		(region_conf->base & MPU_RBAR_BASE_Msk)
    e176:	f023 021f 	bic.w	r2, r3, #31
		| (region_conf->attr.rbar &
    e17a:	f004 031f 	and.w	r3, r4, #31
    e17e:	431a      	orrs	r2, r3
			(MPU_RBAR_XN_Msk | MPU_RBAR_AP_Msk | MPU_RBAR_SH_Msk)),
		/* RLAR */
		(region_conf->attr.r_limit & MPU_RLAR_LIMIT_Msk)
    e180:	68cb      	ldr	r3, [r1, #12]
		| ((region_conf->attr.mair_idx << MPU_RLAR_AttrIndx_Pos)
    e182:	0964      	lsrs	r4, r4, #5
		(region_conf->attr.r_limit & MPU_RLAR_LIMIT_Msk)
    e184:	f023 031f 	bic.w	r3, r3, #31
* \param rbar Value for RBAR register.
* \param rlar Value for RLAR register.
*/   
__STATIC_INLINE void ARM_MPU_SetRegionEx(MPU_Type* mpu, uint32_t rnr, uint32_t rbar, uint32_t rlar)
{
  mpu->RNR = rnr;
    e188:	4904      	ldr	r1, [pc, #16]	; (e19c <region_init+0x2c>)
		| ((region_conf->attr.mair_idx << MPU_RLAR_AttrIndx_Pos)
    e18a:	ea43 0344 	orr.w	r3, r3, r4, lsl #1
			& MPU_RLAR_AttrIndx_Msk)
		| MPU_RLAR_EN_Msk
    e18e:	f043 0301 	orr.w	r3, r3, #1
    e192:	6088      	str	r0, [r1, #8]
  mpu->RBAR = rbar;
    e194:	60ca      	str	r2, [r1, #12]
  mpu->RLAR = rlar;
    e196:	610b      	str	r3, [r1, #16]
	);

	LOG_DBG("[%d] 0x%08x 0x%08x 0x%08x 0x%08x",
			index, region_conf->base, region_conf->attr.rbar,
			region_conf->attr.mair_idx, region_conf->attr.r_limit);
}
    e198:	bd10      	pop	{r4, pc}
    e19a:	bf00      	nop
    e19c:	e000ed90 	.word	0xe000ed90

0000e1a0 <region_allocate_and_init.part.0>:
#include <arm_mpu_v8_internal.h>
#else
#error "Unsupported ARM CPU"
#endif

static int region_allocate_and_init(const u8_t index,
    e1a0:	b508      	push	{r3, lr}
{
	/* Attempt to allocate new region index. */
	if (index > (get_num_regions() - 1)) {

		/* No available MPU region index. */
		LOG_ERR("Failed to allocate new MPU region %u\n", index);
    e1a2:	f04f 0200 	mov.w	r2, #0
    e1a6:	2301      	movs	r3, #1
    e1a8:	4907      	ldr	r1, [pc, #28]	; (e1c8 <region_allocate_and_init.part.0+0x28>)
    e1aa:	f363 0207 	bfi	r2, r3, #0, #8
    e1ae:	4b07      	ldr	r3, [pc, #28]	; (e1cc <region_allocate_and_init.part.0+0x2c>)
    e1b0:	1a5b      	subs	r3, r3, r1
    e1b2:	08db      	lsrs	r3, r3, #3
    e1b4:	4601      	mov	r1, r0
    e1b6:	f363 128f 	bfi	r2, r3, #6, #10
    e1ba:	4805      	ldr	r0, [pc, #20]	; (e1d0 <region_allocate_and_init.part.0+0x30>)
    e1bc:	f00b fe8f 	bl	19ede <log_1>

	/* Program region */
	region_init(index, region_conf);

	return index;
}
    e1c0:	f06f 0015 	mvn.w	r0, #21
    e1c4:	bd08      	pop	{r3, pc}
    e1c6:	bf00      	nop
    e1c8:	0001c004 	.word	0x0001c004
    e1cc:	0001c034 	.word	0x0001c034
    e1d0:	0001cbdf 	.word	0x0001cbdf

0000e1d4 <mpu_configure_regions_and_partition.constprop.2>:
 * sanity check of the memory regions to be programmed.
 *
 * The function performs a full partition of the background memory
 * area, effectively, leaving no space in this area uncovered by MPU.
 */
static int mpu_configure_regions_and_partition(const struct k_mem_partition
    e1d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    e1d8:	4607      	mov	r7, r0
    e1da:	4688      	mov	r8, r1
    e1dc:	4614      	mov	r4, r2
	bool do_sanity_check)
{
	int i;
	int reg_index = start_reg_index;

	for (i = 0; i < regions_num; i++) {
    e1de:	2600      	movs	r6, #0
	MPU->RNR = index;
    e1e0:	4d5e      	ldr	r5, [pc, #376]	; (e35c <mpu_configure_regions_and_partition.constprop.2+0x188>)
static int mpu_configure_regions_and_partition(const struct k_mem_partition
    e1e2:	b085      	sub	sp, #20
	for (i = 0; i < regions_num; i++) {
    e1e4:	4546      	cmp	r6, r8
    e1e6:	da3d      	bge.n	e264 <mpu_configure_regions_and_partition.constprop.2+0x90>
		if (regions[i]->size == 0U) {
    e1e8:	f857 3026 	ldr.w	r3, [r7, r6, lsl #2]
    e1ec:	f8d3 9004 	ldr.w	r9, [r3, #4]
    e1f0:	f1b9 0f00 	cmp.w	r9, #0
    e1f4:	d059      	beq.n	e2aa <mpu_configure_regions_and_partition.constprop.2+0xd6>
		&&
    e1f6:	f1b9 0f1f 	cmp.w	r9, #31
    e1fa:	d922      	bls.n	e242 <mpu_configure_regions_and_partition.constprop.2+0x6e>
		&&
    e1fc:	f019 0f1f 	tst.w	r9, #31
    e200:	d11f      	bne.n	e242 <mpu_configure_regions_and_partition.constprop.2+0x6e>
		((part->start &
    e202:	f8d3 a000 	ldr.w	sl, [r3]
		&&
    e206:	f01a 0f1f 	tst.w	sl, #31
    e20a:	d11a      	bne.n	e242 <mpu_configure_regions_and_partition.constprop.2+0x6e>
	u32_t region_start_addr = arm_cmse_mpu_region_get(start);
    e20c:	4650      	mov	r0, sl
    e20e:	f00c f9eb 	bl	1a5e8 <arm_cmse_mpu_region_get>
    e212:	4683      	mov	fp, r0
	u32_t region_end_addr = arm_cmse_mpu_region_get(start + size - 1);
    e214:	eb09 000a 	add.w	r0, r9, sl
    e218:	3801      	subs	r0, #1
    e21a:	f00c f9e5 	bl	1a5e8 <arm_cmse_mpu_region_get>
	if (region_start_addr == region_end_addr) {
    e21e:	4583      	cmp	fp, r0
    e220:	d024      	beq.n	e26c <mpu_configure_regions_and_partition.constprop.2+0x98>
	return -EINVAL;
    e222:	f06f 0b15 	mvn.w	fp, #21
		int u_reg_index =
			get_region_index(regions[i]->start, regions[i]->size);

		if ((u_reg_index == -EINVAL) ||
			(u_reg_index > (reg_index - 1))) {
			LOG_ERR("Invalid underlying region index %u",
    e226:	2301      	movs	r3, #1
    e228:	f04f 0200 	mov.w	r2, #0
    e22c:	494c      	ldr	r1, [pc, #304]	; (e360 <mpu_configure_regions_and_partition.constprop.2+0x18c>)
    e22e:	f363 0207 	bfi	r2, r3, #0, #8
    e232:	4b4c      	ldr	r3, [pc, #304]	; (e364 <mpu_configure_regions_and_partition.constprop.2+0x190>)
    e234:	484c      	ldr	r0, [pc, #304]	; (e368 <mpu_configure_regions_and_partition.constprop.2+0x194>)
    e236:	1a5b      	subs	r3, r3, r1
    e238:	08db      	lsrs	r3, r3, #3
    e23a:	f363 128f 	bfi	r2, r3, #6, #10
    e23e:	4659      	mov	r1, fp
    e240:	e00c      	b.n	e25c <mpu_configure_regions_and_partition.constprop.2+0x88>
			LOG_ERR("Partition %u: sanity check failed.", i);
    e242:	2301      	movs	r3, #1
    e244:	f04f 0200 	mov.w	r2, #0
    e248:	4945      	ldr	r1, [pc, #276]	; (e360 <mpu_configure_regions_and_partition.constprop.2+0x18c>)
    e24a:	f363 0207 	bfi	r2, r3, #0, #8
    e24e:	4b45      	ldr	r3, [pc, #276]	; (e364 <mpu_configure_regions_and_partition.constprop.2+0x190>)
    e250:	4846      	ldr	r0, [pc, #280]	; (e36c <mpu_configure_regions_and_partition.constprop.2+0x198>)
    e252:	1a5b      	subs	r3, r3, r1
    e254:	4631      	mov	r1, r6
    e256:	08db      	lsrs	r3, r3, #3
    e258:	f363 128f 	bfi	r2, r3, #6, #10
			LOG_ERR("Invalid underlying region index %u",
    e25c:	f00b fe3f 	bl	19ede <log_1>

			reg_index =
				mpu_configure_region(reg_index, regions[i]);

			if (reg_index == -EINVAL) {
				return reg_index;
    e260:	f06f 0415 	mvn.w	r4, #21
			reg_index++;
		}
	}

	return reg_index;
}
    e264:	4620      	mov	r0, r4
    e266:	b005      	add	sp, #20
    e268:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if ((u_reg_index == -EINVAL) ||
    e26c:	f11b 0f16 	cmn.w	fp, #22
    e270:	d0d9      	beq.n	e226 <mpu_configure_regions_and_partition.constprop.2+0x52>
			(u_reg_index > (reg_index - 1))) {
    e272:	1e63      	subs	r3, r4, #1
		if ((u_reg_index == -EINVAL) ||
    e274:	455b      	cmp	r3, fp
    e276:	dbd6      	blt.n	e226 <mpu_configure_regions_and_partition.constprop.2+0x52>
	MPU->RNR = index;
    e278:	f8c5 b008 	str.w	fp, [r5, #8]
	return MPU->RBAR & MPU_RBAR_BASE_Msk;
    e27c:	68e8      	ldr	r0, [r5, #12]
	MPU->RNR = index;
    e27e:	f8c5 b008 	str.w	fp, [r5, #8]
	return (MPU->RLAR & MPU_RLAR_LIMIT_Msk) | (~MPU_RLAR_LIMIT_Msk);
    e282:	692b      	ldr	r3, [r5, #16]
		u32_t reg_last = regions[i]->start + regions[i]->size - 1;
    e284:	f857 1026 	ldr.w	r1, [r7, r6, lsl #2]
	return MPU->RBAR & MPU_RBAR_BASE_Msk;
    e288:	f020 001f 	bic.w	r0, r0, #31
	return (MPU->RLAR & MPU_RLAR_LIMIT_Msk) | (~MPU_RLAR_LIMIT_Msk);
    e28c:	f043 0a1f 	orr.w	sl, r3, #31
		u32_t reg_last = regions[i]->start + regions[i]->size - 1;
    e290:	e9d1 3200 	ldrd	r3, r2, [r1]
    e294:	441a      	add	r2, r3
		if ((regions[i]->start == u_reg_base) &&
    e296:	4298      	cmp	r0, r3
		u32_t reg_last = regions[i]->start + regions[i]->size - 1;
    e298:	f102 39ff 	add.w	r9, r2, #4294967295
		if ((regions[i]->start == u_reg_base) &&
    e29c:	d118      	bne.n	e2d0 <mpu_configure_regions_and_partition.constprop.2+0xfc>
    e29e:	45ca      	cmp	sl, r9
    e2a0:	d105      	bne.n	e2ae <mpu_configure_regions_and_partition.constprop.2+0xda>
			mpu_configure_region(u_reg_index, regions[i]);
    e2a2:	fa5f f08b 	uxtb.w	r0, fp
    e2a6:	f00c f97c 	bl	1a5a2 <mpu_configure_region>
	for (i = 0; i < regions_num; i++) {
    e2aa:	3601      	adds	r6, #1
    e2ac:	e79a      	b.n	e1e4 <mpu_configure_regions_and_partition.constprop.2+0x10>
	MPU->RNR = index;
    e2ae:	f8c5 b008 	str.w	fp, [r5, #8]
	MPU->RBAR = (MPU->RBAR & (~MPU_RBAR_BASE_Msk))
    e2b2:	68eb      	ldr	r3, [r5, #12]
		| (base & MPU_RBAR_BASE_Msk);
    e2b4:	f022 021f 	bic.w	r2, r2, #31
	MPU->RBAR = (MPU->RBAR & (~MPU_RBAR_BASE_Msk))
    e2b8:	f003 031f 	and.w	r3, r3, #31
		| (base & MPU_RBAR_BASE_Msk);
    e2bc:	431a      	orrs	r2, r3
	MPU->RBAR = (MPU->RBAR & (~MPU_RBAR_BASE_Msk))
    e2be:	60ea      	str	r2, [r5, #12]
				mpu_configure_region(reg_index, regions[i]);
    e2c0:	b2e0      	uxtb	r0, r4
				mpu_configure_region(reg_index, regions[i]);
    e2c2:	f00c f96e 	bl	1a5a2 <mpu_configure_region>
			if (reg_index == -EINVAL) {
    e2c6:	f110 0f16 	cmn.w	r0, #22
    e2ca:	d0c9      	beq.n	e260 <mpu_configure_regions_and_partition.constprop.2+0x8c>
			reg_index++;
    e2cc:	1c44      	adds	r4, r0, #1
    e2ce:	e7ec      	b.n	e2aa <mpu_configure_regions_and_partition.constprop.2+0xd6>
	MPU->RNR = index;
    e2d0:	f8c5 b008 	str.w	fp, [r5, #8]
	MPU->RLAR = (MPU->RLAR & (~MPU_RLAR_LIMIT_Msk))
    e2d4:	692a      	ldr	r2, [r5, #16]
    e2d6:	3b01      	subs	r3, #1
    e2d8:	f023 031f 	bic.w	r3, r3, #31
    e2dc:	f002 021f 	and.w	r2, r2, #31
		| (limit & MPU_RLAR_LIMIT_Msk);
    e2e0:	4313      	orrs	r3, r2
		} else if (reg_last == u_reg_last) {
    e2e2:	45ca      	cmp	sl, r9
    e2e4:	b2e0      	uxtb	r0, r4
	MPU->RLAR = (MPU->RLAR & (~MPU_RLAR_LIMIT_Msk))
    e2e6:	612b      	str	r3, [r5, #16]
		} else if (reg_last == u_reg_last) {
    e2e8:	d0eb      	beq.n	e2c2 <mpu_configure_regions_and_partition.constprop.2+0xee>
				mpu_configure_region(reg_index, regions[i]);
    e2ea:	f00c f95a 	bl	1a5a2 <mpu_configure_region>
			if (reg_index == -EINVAL) {
    e2ee:	f110 0f16 	cmn.w	r0, #22
    e2f2:	d0b5      	beq.n	e260 <mpu_configure_regions_and_partition.constprop.2+0x8c>
	MPU->RNR = index;
    e2f4:	f8c5 b008 	str.w	fp, [r5, #8]
	attr->rbar = MPU->RBAR &
    e2f8:	68ea      	ldr	r2, [r5, #12]
    e2fa:	f89d 3008 	ldrb.w	r3, [sp, #8]
			REGION_LIMIT_ADDR((regions[i]->start +
    e2fe:	f10a 3aff 	add.w	sl, sl, #4294967295
	attr->rbar = MPU->RBAR &
    e302:	f362 0304 	bfi	r3, r2, #0, #5
    e306:	f88d 3008 	strb.w	r3, [sp, #8]
	attr->mair_idx = (MPU->RLAR & MPU_RLAR_AttrIndx_Msk) >>
    e30a:	692b      	ldr	r3, [r5, #16]
    e30c:	f89d 2008 	ldrb.w	r2, [sp, #8]
    e310:	085b      	lsrs	r3, r3, #1
    e312:	f363 1247 	bfi	r2, r3, #5, #3
			fill_region.base = regions[i]->start +
    e316:	f857 3026 	ldr.w	r3, [r7, r6, lsl #2]
	attr->mair_idx = (MPU->RLAR & MPU_RLAR_AttrIndx_Msk) >>
    e31a:	f88d 2008 	strb.w	r2, [sp, #8]
			fill_region.base = regions[i]->start +
    e31e:	e9d3 1300 	ldrd	r1, r3, [r3]
    e322:	440b      	add	r3, r1
    e324:	9300      	str	r3, [sp, #0]
			REGION_LIMIT_ADDR((regions[i]->start +
    e326:	f023 031f 	bic.w	r3, r3, #31
			reg_index++;
    e32a:	1c44      	adds	r4, r0, #1
			REGION_LIMIT_ADDR((regions[i]->start +
    e32c:	4453      	add	r3, sl
    e32e:	eba3 0309 	sub.w	r3, r3, r9
				region_allocate_and_init(reg_index,
    e332:	b2e4      	uxtb	r4, r4
			REGION_LIMIT_ADDR((regions[i]->start +
    e334:	f023 031f 	bic.w	r3, r3, #31
	if (index > (get_num_regions() - 1)) {
    e338:	2c0f      	cmp	r4, #15
			fill_region.attr.r_limit =
    e33a:	9303      	str	r3, [sp, #12]
    e33c:	d908      	bls.n	e350 <mpu_configure_regions_and_partition.constprop.2+0x17c>
    e33e:	4620      	mov	r0, r4
    e340:	f7ff ff2e 	bl	e1a0 <region_allocate_and_init.part.0>
			if (reg_index == -EINVAL) {
    e344:	f110 0f16 	cmn.w	r0, #22
    e348:	4604      	mov	r4, r0
    e34a:	d089      	beq.n	e260 <mpu_configure_regions_and_partition.constprop.2+0x8c>
			reg_index++;
    e34c:	3401      	adds	r4, #1
    e34e:	e7ac      	b.n	e2aa <mpu_configure_regions_and_partition.constprop.2+0xd6>
	region_init(index, region_conf);
    e350:	4669      	mov	r1, sp
    e352:	4620      	mov	r0, r4
    e354:	f7ff ff0c 	bl	e170 <region_init>
			if (reg_index == -EINVAL) {
    e358:	e7f8      	b.n	e34c <mpu_configure_regions_and_partition.constprop.2+0x178>
    e35a:	bf00      	nop
    e35c:	e000ed90 	.word	0xe000ed90
    e360:	0001c004 	.word	0x0001c004
    e364:	0001c034 	.word	0x0001c034
    e368:	0001cbbc 	.word	0x0001cbbc
    e36c:	0001cb99 	.word	0x0001cb99

0000e370 <arm_core_mpu_enable>:
void arm_core_mpu_enable(void)
{
	/* Enable MPU and use the default memory map as a
	 * background region for privileged software access.
	 */
	MPU->CTRL = MPU_CTRL_ENABLE_Msk | MPU_CTRL_PRIVDEFENA_Msk;
    e370:	2205      	movs	r2, #5
    e372:	4b03      	ldr	r3, [pc, #12]	; (e380 <arm_core_mpu_enable+0x10>)
    e374:	605a      	str	r2, [r3, #4]
    e376:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    e37a:	f3bf 8f6f 	isb	sy

	/* Make sure that all the registers are set before proceeding */
	__DSB();
	__ISB();
}
    e37e:	4770      	bx	lr
    e380:	e000ed90 	.word	0xe000ed90

0000e384 <arm_core_mpu_disable>:
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
    e384:	f3bf 8f5f 	dmb	sy
{
	/* Force any outstanding transfers to complete before disabling MPU */
	__DMB();

	/* Disable MPU */
	MPU->CTRL = 0;
    e388:	2200      	movs	r2, #0
    e38a:	4b01      	ldr	r3, [pc, #4]	; (e390 <arm_core_mpu_disable+0xc>)
    e38c:	605a      	str	r2, [r3, #4]
}
    e38e:	4770      	bx	lr
    e390:	e000ed90 	.word	0xe000ed90

0000e394 <arm_mpu_init>:
 *
 * This function provides the default configuration mechanism for the Memory
 * Protection Unit (MPU).
 */
static int arm_mpu_init(struct device *arg)
{
    e394:	b570      	push	{r4, r5, r6, lr}
	u32_t r_index;

	if (mpu_config.num_regions > get_num_regions()) {
    e396:	4d0e      	ldr	r5, [pc, #56]	; (e3d0 <arm_mpu_init+0x3c>)
    e398:	682e      	ldr	r6, [r5, #0]
    e39a:	2e10      	cmp	r6, #16
    e39c:	d815      	bhi.n	e3ca <arm_mpu_init+0x36>

	/* Architecture-specific configuration */
	mpu_init();

	/* Program fixed regions configured at SOC definition. */
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    e39e:	2400      	movs	r4, #0
	arm_core_mpu_disable();
    e3a0:	f7ff fff0 	bl	e384 <arm_core_mpu_disable>
	MPU->MAIR0 =
    e3a4:	4b0b      	ldr	r3, [pc, #44]	; (e3d4 <arm_mpu_init+0x40>)
    e3a6:	4a0c      	ldr	r2, [pc, #48]	; (e3d8 <arm_mpu_init+0x44>)
    e3a8:	631a      	str	r2, [r3, #48]	; 0x30
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    e3aa:	42a6      	cmp	r6, r4
    e3ac:	d105      	bne.n	e3ba <arm_mpu_init+0x26>
		region_init(r_index, &mpu_config.mpu_regions[r_index]);
	}

	/* Update the number of programmed MPU regions. */
	static_regions_num = mpu_config.num_regions;
    e3ae:	4b0b      	ldr	r3, [pc, #44]	; (e3dc <arm_mpu_init+0x48>)
    e3b0:	701e      	strb	r6, [r3, #0]


	arm_core_mpu_enable();
    e3b2:	f7ff ffdd 	bl	e370 <arm_core_mpu_enable>
	__ASSERT(
		(MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos ==
		DT_NUM_MPU_REGIONS,
		"Invalid number of MPU regions\n");
#endif /* CORTEX_M0PLUS || CPU_CORTEX_M3 || CPU_CORTEX_M4 */
	return 0;
    e3b6:	2000      	movs	r0, #0
}
    e3b8:	bd70      	pop	{r4, r5, r6, pc}
		region_init(r_index, &mpu_config.mpu_regions[r_index]);
    e3ba:	6869      	ldr	r1, [r5, #4]
    e3bc:	4620      	mov	r0, r4
    e3be:	eb01 1104 	add.w	r1, r1, r4, lsl #4
    e3c2:	f7ff fed5 	bl	e170 <region_init>
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    e3c6:	3401      	adds	r4, #1
    e3c8:	e7ef      	b.n	e3aa <arm_mpu_init+0x16>
		return -1;
    e3ca:	f04f 30ff 	mov.w	r0, #4294967295
    e3ce:	e7f3      	b.n	e3b8 <arm_mpu_init+0x24>
    e3d0:	0001c12c 	.word	0x0001c12c
    e3d4:	e000ed90 	.word	0xe000ed90
    e3d8:	0044ffaa 	.word	0x0044ffaa
    e3dc:	200250f6 	.word	0x200250f6

0000e3e0 <arm_core_mpu_configure_static_mpu_regions>:
{
    e3e0:	b510      	push	{r4, lr}
static int mpu_configure_static_mpu_regions(const struct k_mem_partition
	*static_regions[], const u8_t regions_num,
	const u32_t background_area_base,
	const u32_t background_area_end)
{
	int mpu_reg_index = static_regions_num;
    e3e2:	4c03      	ldr	r4, [pc, #12]	; (e3f0 <arm_core_mpu_configure_static_mpu_regions+0x10>)
	 * given boundaries.
	 */
	ARG_UNUSED(background_area_base);
	ARG_UNUSED(background_area_end);

	mpu_reg_index = mpu_configure_regions_and_partition(static_regions,
    e3e4:	7822      	ldrb	r2, [r4, #0]
    e3e6:	f7ff fef5 	bl	e1d4 <mpu_configure_regions_and_partition.constprop.2>
		regions_num, mpu_reg_index, true);

	static_regions_num = mpu_reg_index;
    e3ea:	7020      	strb	r0, [r4, #0]
}
    e3ec:	bd10      	pop	{r4, pc}
    e3ee:	bf00      	nop
    e3f0:	200250f6 	.word	0x200250f6

0000e3f4 <arm_core_mpu_mark_areas_for_dynamic_regions>:
{
    e3f4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    e3f8:	4c25      	ldr	r4, [pc, #148]	; (e490 <arm_core_mpu_mark_areas_for_dynamic_regions+0x9c>)
    e3fa:	468a      	mov	sl, r1
{
	/* In ARMv8-M architecture we need to store the index values
	 * and the default configuration of the MPU regions, inside
	 * which dynamic memory regions may be programmed at run-time.
	 */
	for (int i = 0; i < dyn_region_areas_num; i++) {
    e3fc:	4680      	mov	r8, r0
    e3fe:	2700      	movs	r7, #0
    e400:	46a1      	mov	r9, r4
	attr->rbar = MPU->RBAR &
    e402:	f04f 0b14 	mov.w	fp, #20
	MPU->RNR = index;
    e406:	4d23      	ldr	r5, [pc, #140]	; (e494 <arm_core_mpu_mark_areas_for_dynamic_regions+0xa0>)
	for (int i = 0; i < dyn_region_areas_num; i++) {
    e408:	4557      	cmp	r7, sl
    e40a:	da1a      	bge.n	e442 <arm_core_mpu_mark_areas_for_dynamic_regions+0x4e>
		if (dyn_region_areas[i].size == 0U) {
    e40c:	f8d8 3004 	ldr.w	r3, [r8, #4]
    e410:	9301      	str	r3, [sp, #4]
    e412:	2b00      	cmp	r3, #0
    e414:	d036      	beq.n	e484 <arm_core_mpu_mark_areas_for_dynamic_regions+0x90>
		}
		/* Non-empty area */

		/* Retrieve HW MPU region index */
		dyn_reg_info[i].index =
			get_region_index(dyn_region_areas[i].start,
    e416:	f8d8 1000 	ldr.w	r1, [r8]
	u32_t region_start_addr = arm_cmse_mpu_region_get(start);
    e41a:	4608      	mov	r0, r1
    e41c:	9100      	str	r1, [sp, #0]
    e41e:	f00c f8e3 	bl	1a5e8 <arm_cmse_mpu_region_get>
	u32_t region_end_addr = arm_cmse_mpu_region_get(start + size - 1);
    e422:	e9dd 1300 	ldrd	r1, r3, [sp]
	u32_t region_start_addr = arm_cmse_mpu_region_get(start);
    e426:	4606      	mov	r6, r0
	u32_t region_end_addr = arm_cmse_mpu_region_get(start + size - 1);
    e428:	1858      	adds	r0, r3, r1
    e42a:	3801      	subs	r0, #1
    e42c:	f00c f8dc 	bl	1a5e8 <arm_cmse_mpu_region_get>
	if (region_start_addr == region_end_addr) {
    e430:	4286      	cmp	r6, r0
    e432:	4a19      	ldr	r2, [pc, #100]	; (e498 <arm_core_mpu_mark_areas_for_dynamic_regions+0xa4>)
    e434:	d008      	beq.n	e448 <arm_core_mpu_mark_areas_for_dynamic_regions+0x54>
		dyn_reg_info[i].index =
    e436:	2314      	movs	r3, #20
    e438:	435f      	muls	r7, r3
    e43a:	f06f 0315 	mvn.w	r3, #21
    e43e:	f849 3007 	str.w	r3, [r9, r7]
}
    e442:	b003      	add	sp, #12
    e444:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
					dyn_region_areas[i].size);

		if (dyn_reg_info[i].index == -EINVAL) {
    e448:	f116 0f16 	cmn.w	r6, #22
		dyn_reg_info[i].index =
    e44c:	6026      	str	r6, [r4, #0]
		if (dyn_reg_info[i].index == -EINVAL) {
    e44e:	d0f8      	beq.n	e442 <arm_core_mpu_mark_areas_for_dynamic_regions+0x4e>

			return -EINVAL;
		}

		if (dyn_reg_info[i].index >= static_regions_num) {
    e450:	7813      	ldrb	r3, [r2, #0]
    e452:	42b3      	cmp	r3, r6
    e454:	ddf5      	ble.n	e442 <arm_core_mpu_mark_areas_for_dynamic_regions+0x4e>
	attr->rbar = MPU->RBAR &
    e456:	fb0b 9307 	mla	r3, fp, r7, r9
	MPU->RNR = index;
    e45a:	60ae      	str	r6, [r5, #8]
	MPU->RNR = index;
    e45c:	60ae      	str	r6, [r5, #8]
	attr->rbar = MPU->RBAR &
    e45e:	68e8      	ldr	r0, [r5, #12]
    e460:	7b19      	ldrb	r1, [r3, #12]
    e462:	f360 0104 	bfi	r1, r0, #0, #5
    e466:	7319      	strb	r1, [r3, #12]
	attr->mair_idx = (MPU->RLAR & MPU_RLAR_AttrIndx_Msk) >>
    e468:	6929      	ldr	r1, [r5, #16]
    e46a:	7b18      	ldrb	r0, [r3, #12]
    e46c:	0849      	lsrs	r1, r1, #1
    e46e:	f361 1047 	bfi	r0, r1, #5, #3
    e472:	7318      	strb	r0, [r3, #12]
	region_conf->base = (MPU->RBAR & MPU_RBAR_BASE_Msk);
    e474:	68eb      	ldr	r3, [r5, #12]
    e476:	f023 031f 	bic.w	r3, r3, #31
    e47a:	6063      	str	r3, [r4, #4]
	region_conf->attr.r_limit = MPU->RLAR & MPU_RLAR_LIMIT_Msk;
    e47c:	692b      	ldr	r3, [r5, #16]
    e47e:	f023 031f 	bic.w	r3, r3, #31
    e482:	6123      	str	r3, [r4, #16]
	for (int i = 0; i < dyn_region_areas_num; i++) {
    e484:	3701      	adds	r7, #1
    e486:	3414      	adds	r4, #20
    e488:	f108 080c 	add.w	r8, r8, #12
    e48c:	e7bc      	b.n	e408 <arm_core_mpu_mark_areas_for_dynamic_regions+0x14>
    e48e:	bf00      	nop
    e490:	20020264 	.word	0x20020264
    e494:	e000ed90 	.word	0xe000ed90
    e498:	200250f6 	.word	0x200250f6

0000e49c <arm_core_mpu_configure_dynamic_mpu_regions>:
{
    e49c:	b570      	push	{r4, r5, r6, lr}
 * performed, the error signal is propagated to the caller of the function.
 */
static int mpu_configure_dynamic_mpu_regions(const struct k_mem_partition
	*dynamic_regions[], u8_t regions_num)
{
	int mpu_reg_index = static_regions_num;
    e49e:	4b0c      	ldr	r3, [pc, #48]	; (e4d0 <arm_core_mpu_configure_dynamic_mpu_regions+0x34>)
    e4a0:	460e      	mov	r6, r1
    e4a2:	781c      	ldrb	r4, [r3, #0]
    e4a4:	4605      	mov	r5, r0
    e4a6:	4623      	mov	r3, r4
  mpu->RLAR = 0U;
    e4a8:	2100      	movs	r1, #0
  mpu->RNR = rnr;
    e4aa:	4a0a      	ldr	r2, [pc, #40]	; (e4d4 <arm_core_mpu_configure_dynamic_mpu_regions+0x38>)

	/* Disable all MPU regions except for the static ones. */
	for (int i = mpu_reg_index; i < get_num_regions(); i++) {
    e4ac:	2b0f      	cmp	r3, #15
    e4ae:	dd0b      	ble.n	e4c8 <arm_core_mpu_configure_dynamic_mpu_regions+0x2c>
#if defined(CONFIG_MPU_GAP_FILLING)
	/* Reset MPU regions inside which dynamic memory regions may
	 * be programmed.
	 */
	for (int i = 0; i < MPU_DYNAMIC_REGION_AREAS_NUM; i++) {
		region_init(dyn_reg_info[i].index,
    e4b0:	4909      	ldr	r1, [pc, #36]	; (e4d8 <arm_core_mpu_configure_dynamic_mpu_regions+0x3c>)
    e4b2:	f851 0b04 	ldr.w	r0, [r1], #4
    e4b6:	f7ff fe5b 	bl	e170 <region_init>

	/* In ARMv8-M architecture the dynamic regions are programmed on SRAM,
	 * forming a full partition of the background area, specified by the
	 * given boundaries.
	 */
	mpu_reg_index = mpu_configure_regions_and_partition(dynamic_regions,
    e4ba:	4622      	mov	r2, r4
    e4bc:	4631      	mov	r1, r6
    e4be:	4628      	mov	r0, r5
}
    e4c0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    e4c4:	f7ff be86 	b.w	e1d4 <mpu_configure_regions_and_partition.constprop.2>
    e4c8:	6093      	str	r3, [r2, #8]
  mpu->RLAR = 0U;
    e4ca:	6111      	str	r1, [r2, #16]
	for (int i = mpu_reg_index; i < get_num_regions(); i++) {
    e4cc:	3301      	adds	r3, #1
    e4ce:	e7ed      	b.n	e4ac <arm_core_mpu_configure_dynamic_mpu_regions+0x10>
    e4d0:	200250f6 	.word	0x200250f6
    e4d4:	e000ed90 	.word	0xe000ed90
    e4d8:	20020264 	.word	0x20020264

0000e4dc <z_prf>:
	*sptr = p;
	return i;
}

int z_prf(int (*func)(), void *dest, const char *format, va_list vargs)
{
    e4dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    e4e0:	461e      	mov	r6, r3
	struct zero_padding zero;
	VALTYPE val;

#define PUTC(c)	do { if ((*func)(c, dest) == EOF) return EOF; } while (false)

	count = 0;
    e4e2:	2300      	movs	r3, #0
{
    e4e4:	b0a3      	sub	sp, #140	; 0x8c
    e4e6:	e9cd 0102 	strd	r0, r1, [sp, #8]
	count = 0;
    e4ea:	9301      	str	r3, [sp, #4]

	while ((c = *format++)) {
    e4ec:	4613      	mov	r3, r2
    e4ee:	f813 0b01 	ldrb.w	r0, [r3], #1
    e4f2:	9308      	str	r3, [sp, #32]
    e4f4:	b158      	cbz	r0, e50e <z_prf+0x32>
		if (c != '%') {
    e4f6:	2825      	cmp	r0, #37	; 0x25
    e4f8:	f000 8085 	beq.w	e606 <z_prf+0x12a>
			PUTC(c);
    e4fc:	9903      	ldr	r1, [sp, #12]
    e4fe:	9b02      	ldr	r3, [sp, #8]
    e500:	4798      	blx	r3
    e502:	3001      	adds	r0, #1
    e504:	f040 8417 	bne.w	ed36 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x2d6>
    e508:	f04f 33ff 	mov.w	r3, #4294967295
    e50c:	9301      	str	r3, [sp, #4]
		}
	}
	return count;

#undef PUTC
}
    e50e:	9801      	ldr	r0, [sp, #4]
    e510:	b023      	add	sp, #140	; 0x8c
    e512:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				switch (c) {
    e516:	2c23      	cmp	r4, #35	; 0x23
    e518:	d06c      	beq.n	e5f4 <z_prf+0x118>
    e51a:	d861      	bhi.n	e5e0 <z_prf+0x104>
    e51c:	2c00      	cmp	r4, #0
    e51e:	d0f6      	beq.n	e50e <z_prf+0x32>
					fspace = true;
    e520:	2c20      	cmp	r4, #32
    e522:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    e524:	bf08      	it	eq
    e526:	2301      	moveq	r3, #1
    e528:	930e      	str	r3, [sp, #56]	; 0x38
					fminus = true;
    e52a:	f8cd 8020 	str.w	r8, [sp, #32]
			while (strchr("-+ #0", (c = *format++)) != NULL) {
    e52e:	f8dd 8020 	ldr.w	r8, [sp, #32]
    e532:	48b7      	ldr	r0, [pc, #732]	; (e810 <z_prf+0x334>)
    e534:	f818 4b01 	ldrb.w	r4, [r8], #1
    e538:	4621      	mov	r1, r4
    e53a:	f00c f934 	bl	1a7a6 <strchr>
    e53e:	2800      	cmp	r0, #0
    e540:	d1e9      	bne.n	e516 <z_prf+0x3a>
			if (c == '*') {
    e542:	2c2a      	cmp	r4, #42	; 0x2a
    e544:	d166      	bne.n	e614 <z_prf+0x138>
				width = va_arg(vargs, int);
    e546:	f856 3b04 	ldr.w	r3, [r6], #4
				c = *format++;
    e54a:	f898 4000 	ldrb.w	r4, [r8]
				if (width < 0) {
    e54e:	2b00      	cmp	r3, #0
				width = va_arg(vargs, int);
    e550:	9309      	str	r3, [sp, #36]	; 0x24
					width = -width;
    e552:	bfbf      	itttt	lt
    e554:	425b      	neglt	r3, r3
    e556:	9309      	strlt	r3, [sp, #36]	; 0x24
					fminus = true;
    e558:	2301      	movlt	r3, #1
    e55a:	930f      	strlt	r3, [sp, #60]	; 0x3c
				c = *format++;
    e55c:	9b08      	ldr	r3, [sp, #32]
    e55e:	f103 0802 	add.w	r8, r3, #2
			if (c == '.') {
    e562:	2c2e      	cmp	r4, #46	; 0x2e
    e564:	d17b      	bne.n	e65e <z_prf+0x182>
				if (c == '*') {
    e566:	f898 3000 	ldrb.w	r3, [r8]
    e56a:	2b2a      	cmp	r3, #42	; 0x2a
    e56c:	d174      	bne.n	e658 <z_prf+0x17c>
					precision = va_arg(vargs, int);
    e56e:	f856 5b04 	ldr.w	r5, [r6], #4
				c = *format++;
    e572:	f108 0801 	add.w	r8, r8, #1
				c = *format++;
    e576:	f818 4b01 	ldrb.w	r4, [r8], #1
			if (strchr("hlz", c) != NULL) {
    e57a:	4621      	mov	r1, r4
    e57c:	48a5      	ldr	r0, [pc, #660]	; (e814 <z_prf+0x338>)
    e57e:	4627      	mov	r7, r4
    e580:	f00c f911 	bl	1a7a6 <strchr>
    e584:	2800      	cmp	r0, #0
    e586:	d06d      	beq.n	e664 <z_prf+0x188>
				c = *format++;
    e588:	4643      	mov	r3, r8
    e58a:	f813 4b01 	ldrb.w	r4, [r3], #1
				} else if (i == 'h' && c == 'h') {
    e58e:	2f68      	cmp	r7, #104	; 0x68
				c = *format++;
    e590:	9308      	str	r3, [sp, #32]
				} else if (i == 'h' && c == 'h') {
    e592:	d107      	bne.n	e5a4 <z_prf+0xc8>
    e594:	2c68      	cmp	r4, #104	; 0x68
    e596:	d105      	bne.n	e5a4 <z_prf+0xc8>
					i = 'H';
    e598:	2748      	movs	r7, #72	; 0x48
					c = *format++;
    e59a:	f108 0302 	add.w	r3, r8, #2
    e59e:	f898 4001 	ldrb.w	r4, [r8, #1]
    e5a2:	9308      	str	r3, [sp, #32]
			switch (c) {
    e5a4:	2c67      	cmp	r4, #103	; 0x67
    e5a6:	d87b      	bhi.n	e6a0 <z_prf+0x1c4>
    e5a8:	2c65      	cmp	r4, #101	; 0x65
    e5aa:	f080 8135 	bcs.w	e818 <z_prf+0x33c>
    e5ae:	2c47      	cmp	r4, #71	; 0x47
    e5b0:	d85c      	bhi.n	e66c <z_prf+0x190>
    e5b2:	2c45      	cmp	r4, #69	; 0x45
    e5b4:	f080 8130 	bcs.w	e818 <z_prf+0x33c>
    e5b8:	2c00      	cmp	r4, #0
    e5ba:	d0a8      	beq.n	e50e <z_prf+0x32>
    e5bc:	2c25      	cmp	r4, #37	; 0x25
    e5be:	f000 83b6 	beq.w	ed2e <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x2ce>
				PUTC('%');
    e5c2:	9903      	ldr	r1, [sp, #12]
    e5c4:	2025      	movs	r0, #37	; 0x25
    e5c6:	9b02      	ldr	r3, [sp, #8]
    e5c8:	4798      	blx	r3
    e5ca:	3001      	adds	r0, #1
    e5cc:	d09c      	beq.n	e508 <z_prf+0x2c>
				PUTC(c);
    e5ce:	9903      	ldr	r1, [sp, #12]
    e5d0:	4620      	mov	r0, r4
    e5d2:	9b02      	ldr	r3, [sp, #8]
    e5d4:	4798      	blx	r3
    e5d6:	3001      	adds	r0, #1
    e5d8:	d096      	beq.n	e508 <z_prf+0x2c>
				count += 2;
    e5da:	9b01      	ldr	r3, [sp, #4]
    e5dc:	3302      	adds	r3, #2
    e5de:	e3ac      	b.n	ed3a <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x2da>
				switch (c) {
    e5e0:	2c2d      	cmp	r4, #45	; 0x2d
    e5e2:	d00a      	beq.n	e5fa <z_prf+0x11e>
    e5e4:	2c30      	cmp	r4, #48	; 0x30
    e5e6:	d00b      	beq.n	e600 <z_prf+0x124>
					fplus = true;
    e5e8:	2c2b      	cmp	r4, #43	; 0x2b
    e5ea:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    e5ec:	bf08      	it	eq
    e5ee:	2301      	moveq	r3, #1
    e5f0:	930b      	str	r3, [sp, #44]	; 0x2c
    e5f2:	e79a      	b.n	e52a <z_prf+0x4e>
					falt = true;
    e5f4:	f04f 0b01 	mov.w	fp, #1
    e5f8:	e797      	b.n	e52a <z_prf+0x4e>
					fminus = true;
    e5fa:	2301      	movs	r3, #1
    e5fc:	930f      	str	r3, [sp, #60]	; 0x3c
    e5fe:	e794      	b.n	e52a <z_prf+0x4e>
					fzero = true;
    e600:	2301      	movs	r3, #1
    e602:	930a      	str	r3, [sp, #40]	; 0x28
    e604:	e791      	b.n	e52a <z_prf+0x4e>
			fminus = fplus = fspace = falt = fzero = false;
    e606:	2300      	movs	r3, #0
    e608:	930a      	str	r3, [sp, #40]	; 0x28
    e60a:	930e      	str	r3, [sp, #56]	; 0x38
    e60c:	930b      	str	r3, [sp, #44]	; 0x2c
    e60e:	930f      	str	r3, [sp, #60]	; 0x3c
    e610:	469b      	mov	fp, r3
    e612:	e78c      	b.n	e52e <z_prf+0x52>
			(((unsigned)c) <= (unsigned)'~'));
}

static inline int isdigit(int a)
{
	return (int)(((unsigned)(a)-(unsigned)'0') < 10U);
    e614:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
			} else if (!isdigit(c)) {
    e618:	2b09      	cmp	r3, #9
				width = 0;
    e61a:	9009      	str	r0, [sp, #36]	; 0x24
			} else if (!isdigit(c)) {
    e61c:	d8a1      	bhi.n	e562 <z_prf+0x86>
		i = 10 * i + *p++ - '0';
    e61e:	220a      	movs	r2, #10
	while (isdigit(*p)) {
    e620:	f8dd 8020 	ldr.w	r8, [sp, #32]
    e624:	f818 4b01 	ldrb.w	r4, [r8], #1
    e628:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
    e62c:	2b09      	cmp	r3, #9
    e62e:	d898      	bhi.n	e562 <z_prf+0x86>
		i = 10 * i + *p++ - '0';
    e630:	9b09      	ldr	r3, [sp, #36]	; 0x24
    e632:	fb02 4403 	mla	r4, r2, r3, r4
    e636:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
    e63a:	e9cd 8308 	strd	r8, r3, [sp, #32]
    e63e:	e7ef      	b.n	e620 <z_prf+0x144>
    e640:	4690      	mov	r8, r2
    e642:	fb01 3505 	mla	r5, r1, r5, r3
    e646:	3d30      	subs	r5, #48	; 0x30
	while (isdigit(*p)) {
    e648:	4642      	mov	r2, r8
    e64a:	f812 3b01 	ldrb.w	r3, [r2], #1
    e64e:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
    e652:	2809      	cmp	r0, #9
    e654:	d9f4      	bls.n	e640 <z_prf+0x164>
    e656:	e78e      	b.n	e576 <z_prf+0x9a>
	int i = 0;
    e658:	2500      	movs	r5, #0
		i = 10 * i + *p++ - '0';
    e65a:	210a      	movs	r1, #10
    e65c:	e7f4      	b.n	e648 <z_prf+0x16c>
			precision = -1;
    e65e:	f04f 35ff 	mov.w	r5, #4294967295
    e662:	e78a      	b.n	e57a <z_prf+0x9e>
    e664:	f8cd 8020 	str.w	r8, [sp, #32]
			i = 0;
    e668:	4607      	mov	r7, r0
    e66a:	e79b      	b.n	e5a4 <z_prf+0xc8>
			switch (c) {
    e66c:	2c63      	cmp	r4, #99	; 0x63
    e66e:	d059      	beq.n	e724 <z_prf+0x248>
    e670:	d820      	bhi.n	e6b4 <z_prf+0x1d8>
    e672:	2c58      	cmp	r4, #88	; 0x58
    e674:	d1a5      	bne.n	e5c2 <z_prf+0xe6>
				if (c == 'o') {
    e676:	2c6f      	cmp	r4, #111	; 0x6f
    e678:	f106 0904 	add.w	r9, r6, #4
    e67c:	6831      	ldr	r1, [r6, #0]
    e67e:	f040 8328 	bne.w	ecd2 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x272>
	if (alt_form) {
    e682:	f1bb 0f00 	cmp.w	fp, #0
    e686:	f000 8317 	beq.w	ecb8 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x258>
		*buf++ = '0';
    e68a:	2330      	movs	r3, #48	; 0x30
    e68c:	f88d 306c 	strb.w	r3, [sp, #108]	; 0x6c
		if (!value) {
    e690:	2900      	cmp	r1, #0
    e692:	f040 831b 	bne.w	eccc <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x26c>
			*buf++ = 0;
    e696:	f88d 106d 	strb.w	r1, [sp, #109]	; 0x6d
			prefix = 0;
    e69a:	460f      	mov	r7, r1
			return 1;
    e69c:	2601      	movs	r6, #1
    e69e:	e025      	b.n	e6ec <z_prf+0x210>
			switch (c) {
    e6a0:	2c70      	cmp	r4, #112	; 0x70
    e6a2:	f000 82f5 	beq.w	ec90 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x230>
    e6a6:	d827      	bhi.n	e6f8 <z_prf+0x21c>
    e6a8:	2c6e      	cmp	r4, #110	; 0x6e
    e6aa:	f000 82de 	beq.w	ec6a <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x20a>
    e6ae:	d8e2      	bhi.n	e676 <z_prf+0x19a>
    e6b0:	2c69      	cmp	r4, #105	; 0x69
    e6b2:	d186      	bne.n	e5c2 <z_prf+0xe6>
				switch (i) {
    e6b4:	6837      	ldr	r7, [r6, #0]
    e6b6:	f106 0904 	add.w	r9, r6, #4
	if (value < 0) {
    e6ba:	2f00      	cmp	r7, #0
    e6bc:	f280 809a 	bge.w	e7f4 <z_prf+0x318>
		*buf++ = '-';
    e6c0:	232d      	movs	r3, #45	; 0x2d
		value = -value;
    e6c2:	4279      	negs	r1, r7
		*buf++ = '-';
    e6c4:	f88d 306c 	strb.w	r3, [sp, #108]	; 0x6c
		*buf++ = ' ';
    e6c8:	f10d 066d 	add.w	r6, sp, #109	; 0x6d
	return _to_x(buf, value, 10);
    e6cc:	4630      	mov	r0, r6
    e6ce:	220a      	movs	r2, #10
    e6d0:	f00c f8f5 	bl	1a8be <_to_x>
				if (fplus || fspace || val < 0) {
    e6d4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
	return (buf + _to_udec(buf, value)) - start;
    e6d6:	4406      	add	r6, r0
    e6d8:	a81b      	add	r0, sp, #108	; 0x6c
    e6da:	1a36      	subs	r6, r6, r0
				if (fplus || fspace || val < 0) {
    e6dc:	2b00      	cmp	r3, #0
    e6de:	f040 832f 	bne.w	ed40 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x2e0>
    e6e2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    e6e4:	2b00      	cmp	r3, #0
    e6e6:	f040 832b 	bne.w	ed40 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x2e0>
    e6ea:	0fff      	lsrs	r7, r7, #31
			if (precision >= 0) {
    e6ec:	2d00      	cmp	r5, #0
    e6ee:	da21      	bge.n	e734 <z_prf+0x258>
			zero.predot = zero.postdot = zero.trail = 0;
    e6f0:	2500      	movs	r5, #0
    e6f2:	46ab      	mov	fp, r5
    e6f4:	46a8      	mov	r8, r5
    e6f6:	e0e1      	b.n	e8bc <z_prf+0x3e0>
			switch (c) {
    e6f8:	2c75      	cmp	r4, #117	; 0x75
    e6fa:	d0bc      	beq.n	e676 <z_prf+0x19a>
    e6fc:	2c78      	cmp	r4, #120	; 0x78
    e6fe:	d0ba      	beq.n	e676 <z_prf+0x19a>
    e700:	2c73      	cmp	r4, #115	; 0x73
    e702:	f47f af5e 	bne.w	e5c2 <z_prf+0xe6>
				cptr = va_arg(vargs, char *);
    e706:	46b1      	mov	r9, r6
					precision = INT_MAX;
    e708:	2d00      	cmp	r5, #0
    e70a:	bfb8      	it	lt
    e70c:	f06f 4500 	mvnlt.w	r5, #2147483648	; 0x80000000
				for (clen = 0; clen < precision; clen++) {
    e710:	2600      	movs	r6, #0
				cptr = va_arg(vargs, char *);
    e712:	f859 3b04 	ldr.w	r3, [r9], #4
				for (clen = 0; clen < precision; clen++) {
    e716:	42b5      	cmp	r5, r6
    e718:	f040 82c9 	bne.w	ecae <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x24e>
    e71c:	462e      	mov	r6, r5
    e71e:	2500      	movs	r5, #0
    e720:	462f      	mov	r7, r5
    e722:	e008      	b.n	e736 <z_prf+0x25a>
				break;
    e724:	2700      	movs	r7, #0
				buf[0] = va_arg(vargs, int);
    e726:	46b1      	mov	r9, r6
				break;
    e728:	463d      	mov	r5, r7
				clen = 1;
    e72a:	2601      	movs	r6, #1
				buf[0] = va_arg(vargs, int);
    e72c:	f859 3b04 	ldr.w	r3, [r9], #4
    e730:	f88d 306c 	strb.w	r3, [sp, #108]	; 0x6c
				break;
    e734:	ab1b      	add	r3, sp, #108	; 0x6c
				zero_head = precision - clen + prefix;
    e736:	19ea      	adds	r2, r5, r7
			zero.predot = zero.postdot = zero.trail = 0;
    e738:	2500      	movs	r5, #0
    e73a:	46ab      	mov	fp, r5
    e73c:	46a8      	mov	r8, r5
				zero_head = precision - clen + prefix;
    e73e:	1b92      	subs	r2, r2, r6
			if (zero_head < 0) {
    e740:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
			width -= clen + zero_head;
    e744:	1991      	adds	r1, r2, r6
    e746:	9106      	str	r1, [sp, #24]
    e748:	9909      	ldr	r1, [sp, #36]	; 0x24
    e74a:	1990      	adds	r0, r2, r6
    e74c:	1a0c      	subs	r4, r1, r0
			if (!fminus && width > 0) {
    e74e:	990f      	ldr	r1, [sp, #60]	; 0x3c
    e750:	b911      	cbnz	r1, e758 <z_prf+0x27c>
    e752:	2c00      	cmp	r4, #0
    e754:	f300 8311 	bgt.w	ed7a <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x31a>
			while (prefix-- > 0) {
    e758:	eb03 0a07 	add.w	sl, r3, r7
    e75c:	4553      	cmp	r3, sl
    e75e:	f040 8311 	bne.w	ed84 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x324>
			while (zero_head-- > 0) {
    e762:	f112 32ff 	adds.w	r2, r2, #4294967295
    e766:	f080 831b 	bcs.w	eda0 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x340>
			clen -= prefix;
    e76a:	1bf6      	subs	r6, r6, r7
			if (zero.predot) {
    e76c:	f1b8 0f00 	cmp.w	r8, #0
    e770:	d011      	beq.n	e796 <z_prf+0x2ba>
				c = *cptr;
    e772:	f89a 0000 	ldrb.w	r0, [sl]
				while (isdigit(c)) {
    e776:	eb0a 0706 	add.w	r7, sl, r6
    e77a:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
    e77e:	2b09      	cmp	r3, #9
    e780:	eba7 060a 	sub.w	r6, r7, sl
    e784:	f240 8317 	bls.w	edb6 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x356>
    e788:	4647      	mov	r7, r8
				while (zero.predot-- > 0) {
    e78a:	f117 37ff 	adds.w	r7, r7, #4294967295
    e78e:	f080 831b 	bcs.w	edc8 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x368>
				clen -= zero.predot;
    e792:	eba6 0608 	sub.w	r6, r6, r8
			if (zero.postdot) {
    e796:	f1bb 0f00 	cmp.w	fp, #0
    e79a:	d015      	beq.n	e7c8 <z_prf+0x2ec>
    e79c:	eb0a 0706 	add.w	r7, sl, r6
					c = *cptr++;
    e7a0:	f81a 8b01 	ldrb.w	r8, [sl], #1
					PUTC(c);
    e7a4:	9903      	ldr	r1, [sp, #12]
    e7a6:	4640      	mov	r0, r8
    e7a8:	9b02      	ldr	r3, [sp, #8]
    e7aa:	4798      	blx	r3
    e7ac:	3001      	adds	r0, #1
    e7ae:	f43f aeab 	beq.w	e508 <z_prf+0x2c>
				} while (c != '.');
    e7b2:	f1b8 0f2e 	cmp.w	r8, #46	; 0x2e
    e7b6:	eba7 060a 	sub.w	r6, r7, sl
    e7ba:	d1f1      	bne.n	e7a0 <z_prf+0x2c4>
				while (zero.postdot-- > 0) {
    e7bc:	465f      	mov	r7, fp
    e7be:	2f00      	cmp	r7, #0
    e7c0:	f300 830b 	bgt.w	edda <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x37a>
				clen -= zero.postdot;
    e7c4:	eba6 060b 	sub.w	r6, r6, fp
			if (zero.trail) {
    e7c8:	b195      	cbz	r5, e7f0 <z_prf+0x314>
				c = *cptr;
    e7ca:	f89a 0000 	ldrb.w	r0, [sl]
				while (isdigit(c) || c == '.') {
    e7ce:	eb0a 0706 	add.w	r7, sl, r6
    e7d2:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
    e7d6:	2b09      	cmp	r3, #9
    e7d8:	eba7 060a 	sub.w	r6, r7, sl
    e7dc:	f240 8308 	bls.w	edf0 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x390>
    e7e0:	282e      	cmp	r0, #46	; 0x2e
    e7e2:	f000 8305 	beq.w	edf0 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x390>
				while (zero.trail-- > 0) {
    e7e6:	462f      	mov	r7, r5
    e7e8:	2f00      	cmp	r7, #0
    e7ea:	f300 830a 	bgt.w	ee02 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x3a2>
				clen -= zero.trail;
    e7ee:	1b76      	subs	r6, r6, r5
    e7f0:	4456      	add	r6, sl
    e7f2:	e319      	b.n	ee28 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x3c8>
	} else if (fplus) {
    e7f4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    e7f6:	b123      	cbz	r3, e802 <z_prf+0x326>
		*buf++ = '+';
    e7f8:	232b      	movs	r3, #43	; 0x2b
		*buf++ = ' ';
    e7fa:	f88d 306c 	strb.w	r3, [sp, #108]	; 0x6c
    e7fe:	4639      	mov	r1, r7
    e800:	e762      	b.n	e6c8 <z_prf+0x1ec>
	} else if (fspace) {
    e802:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    e804:	b10b      	cbz	r3, e80a <z_prf+0x32e>
		*buf++ = ' ';
    e806:	2320      	movs	r3, #32
    e808:	e7f7      	b.n	e7fa <z_prf+0x31e>
	} else if (fspace) {
    e80a:	4639      	mov	r1, r7
    e80c:	ae1b      	add	r6, sp, #108	; 0x6c
    e80e:	e75d      	b.n	e6cc <z_prf+0x1f0>
    e810:	0001cc05 	.word	0x0001cc05
    e814:	0001cc0b 	.word	0x0001cc0b
				u.d = va_arg(vargs, double);
    e818:	f106 0907 	add.w	r9, r6, #7
    e81c:	f029 0907 	bic.w	r9, r9, #7
    e820:	e8f9 2302 	ldrd	r2, r3, [r9], #8
	fract = (double_temp << 11) & ~HIGHBIT64;
    e824:	02d8      	lsls	r0, r3, #11
    e826:	ea40 5052 	orr.w	r0, r0, r2, lsr #21
    e82a:	02d6      	lsls	r6, r2, #11
    e82c:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
	if (sign) {
    e830:	2a00      	cmp	r2, #0
	exp = double_temp >> 52 & 0x7ff;
    e832:	f3c3 510a 	ubfx	r1, r3, #20, #11
	fract = (double_temp << 11) & ~HIGHBIT64;
    e836:	9604      	str	r6, [sp, #16]
    e838:	9005      	str	r0, [sp, #20]
	if (sign) {
    e83a:	f173 0300 	sbcs.w	r3, r3, #0
	fract = (double_temp << 11) & ~HIGHBIT64;
    e83e:	e9dd 6704 	ldrd	r6, r7, [sp, #16]
    e842:	e9cd 6716 	strd	r6, r7, [sp, #88]	; 0x58
	if (sign) {
    e846:	da41      	bge.n	e8cc <z_prf+0x3f0>
		*buf++ = '-';
    e848:	232d      	movs	r3, #45	; 0x2d
		*buf++ = ' ';
    e84a:	f88d 306c 	strb.w	r3, [sp, #108]	; 0x6c
    e84e:	f10d 076d 	add.w	r7, sp, #109	; 0x6d
	if (exp == 0x7ff) {
    e852:	f240 73ff 	movw	r3, #2047	; 0x7ff
    e856:	4299      	cmp	r1, r3
    e858:	d153      	bne.n	e902 <z_prf+0x426>
		if (!fract) {
    e85a:	e9dd 1204 	ldrd	r1, r2, [sp, #16]
    e85e:	430a      	orrs	r2, r1
    e860:	f1a4 0441 	sub.w	r4, r4, #65	; 0x41
    e864:	f107 0303 	add.w	r3, r7, #3
    e868:	d140      	bne.n	e8ec <z_prf+0x410>
			if (isupper(c)) {
    e86a:	2c19      	cmp	r4, #25
    e86c:	d838      	bhi.n	e8e0 <z_prf+0x404>
				*buf++ = 'I';
    e86e:	2249      	movs	r2, #73	; 0x49
    e870:	703a      	strb	r2, [r7, #0]
				*buf++ = 'N';
    e872:	224e      	movs	r2, #78	; 0x4e
    e874:	707a      	strb	r2, [r7, #1]
				*buf++ = 'F';
    e876:	2246      	movs	r2, #70	; 0x46
		*buf = 0;
    e878:	2500      	movs	r5, #0
			zero.predot = zero.postdot = zero.trail = 0;
    e87a:	46ab      	mov	fp, r5
    e87c:	46a8      	mov	r8, r5
		return buf - start;
    e87e:	ae1b      	add	r6, sp, #108	; 0x6c
				*buf++ = 'n';
    e880:	70ba      	strb	r2, [r7, #2]
		*buf = 0;
    e882:	70fd      	strb	r5, [r7, #3]
		return buf - start;
    e884:	1b9b      	subs	r3, r3, r6
				if (fplus || fspace || (buf[0] == '-')) {
    e886:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    e888:	2a00      	cmp	r2, #0
    e88a:	f040 81ec 	bne.w	ec66 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x206>
    e88e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    e890:	2a00      	cmp	r2, #0
    e892:	f040 81e8 	bne.w	ec66 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x206>
    e896:	f89d 706c 	ldrb.w	r7, [sp, #108]	; 0x6c
    e89a:	f1a7 022d 	sub.w	r2, r7, #45	; 0x2d
    e89e:	4257      	negs	r7, r2
    e8a0:	4157      	adcs	r7, r2
				clen += zero.predot + zero.postdot + zero.trail;
    e8a2:	eb05 0608 	add.w	r6, r5, r8
    e8a6:	4433      	add	r3, r6
    e8a8:	eb03 060b 	add.w	r6, r3, fp
				if (!isdigit(buf[prefix])) {
    e8ac:	ab22      	add	r3, sp, #136	; 0x88
    e8ae:	443b      	add	r3, r7
    e8b0:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
    e8b4:	3b30      	subs	r3, #48	; 0x30
    e8b6:	2b09      	cmp	r3, #9
    e8b8:	f200 8246 	bhi.w	ed48 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x2e8>
			} else if (fzero) {
    e8bc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    e8be:	2b00      	cmp	r3, #0
    e8c0:	f000 8245 	beq.w	ed4e <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x2ee>
    e8c4:	9b09      	ldr	r3, [sp, #36]	; 0x24
    e8c6:	1b9a      	subs	r2, r3, r6
    e8c8:	ab1b      	add	r3, sp, #108	; 0x6c
    e8ca:	e739      	b.n	e740 <z_prf+0x264>
	} else if (fplus) {
    e8cc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    e8ce:	b10b      	cbz	r3, e8d4 <z_prf+0x3f8>
		*buf++ = '+';
    e8d0:	232b      	movs	r3, #43	; 0x2b
    e8d2:	e7ba      	b.n	e84a <z_prf+0x36e>
	} else if (fspace) {
    e8d4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    e8d6:	b10b      	cbz	r3, e8dc <z_prf+0x400>
		*buf++ = ' ';
    e8d8:	2320      	movs	r3, #32
    e8da:	e7b6      	b.n	e84a <z_prf+0x36e>
	} else if (fspace) {
    e8dc:	af1b      	add	r7, sp, #108	; 0x6c
    e8de:	e7b8      	b.n	e852 <z_prf+0x376>
				*buf++ = 'i';
    e8e0:	2269      	movs	r2, #105	; 0x69
    e8e2:	703a      	strb	r2, [r7, #0]
				*buf++ = 'n';
    e8e4:	226e      	movs	r2, #110	; 0x6e
    e8e6:	707a      	strb	r2, [r7, #1]
				*buf++ = 'f';
    e8e8:	2266      	movs	r2, #102	; 0x66
    e8ea:	e7c5      	b.n	e878 <z_prf+0x39c>
			if (isupper(c)) {
    e8ec:	2c19      	cmp	r4, #25
				*buf++ = 'N';
    e8ee:	bf99      	ittee	ls
    e8f0:	224e      	movls	r2, #78	; 0x4e
				*buf++ = 'A';
    e8f2:	2141      	movls	r1, #65	; 0x41
				*buf++ = 'n';
    e8f4:	226e      	movhi	r2, #110	; 0x6e
				*buf++ = 'a';
    e8f6:	2161      	movhi	r1, #97	; 0x61
				*buf++ = 'N';
    e8f8:	bf94      	ite	ls
    e8fa:	703a      	strbls	r2, [r7, #0]
				*buf++ = 'n';
    e8fc:	703a      	strbhi	r2, [r7, #0]
				*buf++ = 'a';
    e8fe:	7079      	strb	r1, [r7, #1]
    e900:	e7ba      	b.n	e878 <z_prf+0x39c>
	if ((exp | fract) != 0) {
    e902:	9b04      	ldr	r3, [sp, #16]
    e904:	9805      	ldr	r0, [sp, #20]
    e906:	430b      	orrs	r3, r1
    e908:	9310      	str	r3, [sp, #64]	; 0x40
    e90a:	17cb      	asrs	r3, r1, #31
    e90c:	4303      	orrs	r3, r0
		c = 'f';
    e90e:	2c46      	cmp	r4, #70	; 0x46
	if ((exp | fract) != 0) {
    e910:	9311      	str	r3, [sp, #68]	; 0x44
		c = 'f';
    e912:	bf08      	it	eq
    e914:	2466      	moveq	r4, #102	; 0x66
	if ((exp | fract) != 0) {
    e916:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
    e91a:	4313      	orrs	r3, r2
    e91c:	f000 8111 	beq.w	eb42 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xe2>
		if (exp == 0) {
    e920:	2900      	cmp	r1, #0
    e922:	f000 809b 	beq.w	ea5c <z_prf+0x580>
		fract |= HIGHBIT64;
    e926:	2600      	movs	r6, #0
    e928:	9b17      	ldr	r3, [sp, #92]	; 0x5c
		exp -= (1023 - 1);	/* +1 since .1 vs 1. */
    e92a:	f2a1 38fe 	subw	r8, r1, #1022	; 0x3fe
		fract |= HIGHBIT64;
    e92e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
    e932:	9317      	str	r3, [sp, #92]	; 0x5c
	while (exp <= -3) {
    e934:	f118 0f02 	cmn.w	r8, #2
    e938:	f2c0 80a4 	blt.w	ea84 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x24>
	while (exp > 0) {
    e93c:	f1b8 0f00 	cmp.w	r8, #0
    e940:	f300 80dd 	bgt.w	eafe <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x9e>
		_rlrshift(&fract);
    e944:	a816      	add	r0, sp, #88	; 0x58
		exp++;
    e946:	f108 0801 	add.w	r8, r8, #1
		_rlrshift(&fract);
    e94a:	f00b ffda 	bl	1a902 <_rlrshift>
	while (exp < (0 + 4)) {
    e94e:	f1b8 0f04 	cmp.w	r8, #4
    e952:	d1f7      	bne.n	e944 <z_prf+0x468>
		precision = 6;		/* Default precision if none given */
    e954:	2d00      	cmp	r5, #0
	if ((c == 'g') || (c == 'G')) {
    e956:	f004 03df 	and.w	r3, r4, #223	; 0xdf
		precision = 6;		/* Default precision if none given */
    e95a:	bfb8      	it	lt
    e95c:	2506      	movlt	r5, #6
	if ((c == 'g') || (c == 'G')) {
    e95e:	2b47      	cmp	r3, #71	; 0x47
    e960:	f040 80f8 	bne.w	eb54 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xf4>
		if (decexp < (-4 + 1) || decexp > precision) {
    e964:	1cf1      	adds	r1, r6, #3
    e966:	db02      	blt.n	e96e <z_prf+0x492>
    e968:	42b5      	cmp	r5, r6
    e96a:	f280 80ed 	bge.w	eb48 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xe8>
			c += 'e' - 'g';
    e96e:	3c02      	subs	r4, #2
    e970:	b2e4      	uxtb	r4, r4
			if (precision > 0) {
    e972:	2d00      	cmp	r5, #0
    e974:	f000 80f4 	beq.w	eb60 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x100>
				precision--;
    e978:	3d01      	subs	r5, #1
		if (!falt && (precision > 0)) {
    e97a:	f1bb 0f00 	cmp.w	fp, #0
    e97e:	f040 80ef 	bne.w	eb60 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x100>
    e982:	2d00      	cmp	r5, #0
    e984:	bfd4      	ite	le
    e986:	f04f 0a00 	movle.w	sl, #0
    e98a:	f04f 0a01 	movgt.w	sl, #1
	if (c == 'f') {
    e98e:	2c66      	cmp	r4, #102	; 0x66
    e990:	f040 80e8 	bne.w	eb64 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x104>
		if (exp < 0) {
    e994:	eb15 0806 	adds.w	r8, r5, r6
    e998:	f140 80ec 	bpl.w	eb74 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x114>
	digit_count = 16;
    e99c:	2310      	movs	r3, #16
    e99e:	2466      	movs	r4, #102	; 0x66
			exp = 0;
    e9a0:	f04f 0800 	mov.w	r8, #0
	digit_count = 16;
    e9a4:	9315      	str	r3, [sp, #84]	; 0x54
	ltemp = 0x0800000000000000;
    e9a6:	2200      	movs	r2, #0
    e9a8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
    e9ac:	e9cd 2318 	strd	r2, r3, [sp, #96]	; 0x60
	while (exp--) {
    e9b0:	f118 38ff 	adds.w	r8, r8, #4294967295
    e9b4:	f080 80e0 	bcs.w	eb78 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x118>
	fract += ltemp;
    e9b8:	9b16      	ldr	r3, [sp, #88]	; 0x58
    e9ba:	9a18      	ldr	r2, [sp, #96]	; 0x60
    e9bc:	9919      	ldr	r1, [sp, #100]	; 0x64
    e9be:	189b      	adds	r3, r3, r2
    e9c0:	9a17      	ldr	r2, [sp, #92]	; 0x5c
    e9c2:	eb41 0202 	adc.w	r2, r1, r2
    e9c6:	e9cd 3216 	strd	r3, r2, [sp, #88]	; 0x58
	if ((fract >> 32) & 0xF0000000) {
    e9ca:	f002 4370 	and.w	r3, r2, #4026531840	; 0xf0000000
    e9ce:	9312      	str	r3, [sp, #72]	; 0x48
    e9d0:	2300      	movs	r3, #0
    e9d2:	9313      	str	r3, [sp, #76]	; 0x4c
    e9d4:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
    e9d8:	4313      	orrs	r3, r2
    e9da:	d006      	beq.n	e9ea <z_prf+0x50e>
		_ldiv5(&fract);
    e9dc:	a816      	add	r0, sp, #88	; 0x58
    e9de:	f00b ffa1 	bl	1a924 <_ldiv5>
		_rlrshift(&fract);
    e9e2:	a816      	add	r0, sp, #88	; 0x58
    e9e4:	f00b ff8d 	bl	1a902 <_rlrshift>
		decexp++;
    e9e8:	3601      	adds	r6, #1
	if (c == 'f') {
    e9ea:	2c66      	cmp	r4, #102	; 0x66
    e9ec:	f040 80e1 	bne.w	ebb2 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x152>
		if (decexp > 0) {
    e9f0:	2e00      	cmp	r6, #0
    e9f2:	f340 80c8 	ble.w	eb86 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x126>
			while (decexp > 0 && digit_count > 0) {
    e9f6:	9b15      	ldr	r3, [sp, #84]	; 0x54
    e9f8:	2b00      	cmp	r3, #0
    e9fa:	dd07      	ble.n	ea0c <z_prf+0x530>
				*buf++ = _get_digit(&fract, &digit_count);
    e9fc:	a915      	add	r1, sp, #84	; 0x54
    e9fe:	a816      	add	r0, sp, #88	; 0x58
    ea00:	f00b ffbb 	bl	1a97a <_get_digit>
			while (decexp > 0 && digit_count > 0) {
    ea04:	3e01      	subs	r6, #1
				*buf++ = _get_digit(&fract, &digit_count);
    ea06:	f807 0b01 	strb.w	r0, [r7], #1
			while (decexp > 0 && digit_count > 0) {
    ea0a:	d1f4      	bne.n	e9f6 <z_prf+0x51a>
			zp->predot = decexp;
    ea0c:	46b0      	mov	r8, r6
    ea0e:	463b      	mov	r3, r7
			decexp = 0;
    ea10:	2600      	movs	r6, #0
		if (falt || (precision > 0)) {
    ea12:	f1bb 0f00 	cmp.w	fp, #0
    ea16:	d101      	bne.n	ea1c <z_prf+0x540>
    ea18:	2d00      	cmp	r5, #0
    ea1a:	dd15      	ble.n	ea48 <z_prf+0x56c>
			*buf++ = '.';
    ea1c:	222e      	movs	r2, #46	; 0x2e
    ea1e:	f803 2b01 	strb.w	r2, [r3], #1
		if (decexp < 0 && precision > 0) {
    ea22:	2e00      	cmp	r6, #0
    ea24:	f000 80c0 	beq.w	eba8 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x148>
    ea28:	2d00      	cmp	r5, #0
    ea2a:	f340 80bf 	ble.w	ebac <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x14c>
			zp->postdot = -decexp;
    ea2e:	f1c6 0b00 	rsb	fp, r6, #0
    ea32:	45ab      	cmp	fp, r5
    ea34:	bfa8      	it	ge
    ea36:	46ab      	movge	fp, r5
			precision -= zp->postdot;
    ea38:	eba5 050b 	sub.w	r5, r5, fp
		while (precision > 0 && digit_count > 0) {
    ea3c:	2d00      	cmp	r5, #0
    ea3e:	dd03      	ble.n	ea48 <z_prf+0x56c>
    ea40:	9a15      	ldr	r2, [sp, #84]	; 0x54
    ea42:	2a00      	cmp	r2, #0
    ea44:	f300 80a6 	bgt.w	eb94 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x134>
	if (prune_zero) {
    ea48:	f1ba 0f00 	cmp.w	sl, #0
    ea4c:	f040 80c6 	bne.w	ebdc <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x17c>
	*buf = 0;
    ea50:	2200      	movs	r2, #0
	return buf - start;
    ea52:	ae1b      	add	r6, sp, #108	; 0x6c
	*buf = 0;
    ea54:	701a      	strb	r2, [r3, #0]
	return buf - start;
    ea56:	1b9b      	subs	r3, r3, r6
    ea58:	e715      	b.n	e886 <z_prf+0x3aa>
				exp--;
    ea5a:	3901      	subs	r1, #1
			while (((fract <<= 1) & HIGHBIT64) == 0) {
    ea5c:	9b04      	ldr	r3, [sp, #16]
    ea5e:	18db      	adds	r3, r3, r3
    ea60:	9304      	str	r3, [sp, #16]
    ea62:	9b05      	ldr	r3, [sp, #20]
    ea64:	415b      	adcs	r3, r3
    ea66:	9305      	str	r3, [sp, #20]
    ea68:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
    ea6c:	2a00      	cmp	r2, #0
    ea6e:	f173 0300 	sbcs.w	r3, r3, #0
    ea72:	daf2      	bge.n	ea5a <z_prf+0x57e>
    ea74:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
    ea78:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
    ea7c:	e753      	b.n	e926 <z_prf+0x44a>
			_rlrshift(&fract);
    ea7e:	a816      	add	r0, sp, #88	; 0x58
    ea80:	f00b ff3f 	bl	1a902 <_rlrshift>
		while ((fract >> 32) >= (MAXFP1 / 5)) {
    ea84:	e9dd ec16 	ldrd	lr, ip, [sp, #88]	; 0x58
    ea88:	2300      	movs	r3, #0
    ea8a:	2100      	movs	r1, #0
    ea8c:	f8cd c030 	str.w	ip, [sp, #48]	; 0x30
    ea90:	930d      	str	r3, [sp, #52]	; 0x34
    ea92:	48bb      	ldr	r0, [pc, #748]	; (ed80 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x320>)
    ea94:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
    ea98:	4299      	cmp	r1, r3
    ea9a:	bf08      	it	eq
    ea9c:	4290      	cmpeq	r0, r2
    ea9e:	f108 0801 	add.w	r8, r8, #1
    eaa2:	d3ec      	bcc.n	ea7e <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x1e>
		fract *= 5U;
    eaa4:	2005      	movs	r0, #5
    eaa6:	fbae 2300 	umull	r2, r3, lr, r0
    eaaa:	e9cd 2306 	strd	r2, r3, [sp, #24]
    eaae:	9b07      	ldr	r3, [sp, #28]
		decexp--;
    eab0:	3e01      	subs	r6, #1
		fract *= 5U;
    eab2:	fb00 330c 	mla	r3, r0, ip, r3
		decexp--;
    eab6:	f04f 0c00 	mov.w	ip, #0
		fract *= 5U;
    eaba:	9307      	str	r3, [sp, #28]
    eabc:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
    eac0:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
		while ((fract >> 32) <= (MAXFP1 / 2)) {
    eac4:	2100      	movs	r1, #0
    eac6:	2300      	movs	r3, #0
    eac8:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
    eacc:	9807      	ldr	r0, [sp, #28]
    eace:	428b      	cmp	r3, r1
    ead0:	bf08      	it	eq
    ead2:	4282      	cmpeq	r2, r0
    ead4:	d208      	bcs.n	eae8 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x88>
    ead6:	f1bc 0f00 	cmp.w	ip, #0
    eada:	f43f af2b 	beq.w	e934 <z_prf+0x458>
    eade:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
    eae2:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
    eae6:	e725      	b.n	e934 <z_prf+0x458>
			fract <<= 1;
    eae8:	9b06      	ldr	r3, [sp, #24]
			exp--;
    eaea:	f108 38ff 	add.w	r8, r8, #4294967295
			fract <<= 1;
    eaee:	18db      	adds	r3, r3, r3
    eaf0:	9306      	str	r3, [sp, #24]
    eaf2:	9b07      	ldr	r3, [sp, #28]
    eaf4:	f04f 0c01 	mov.w	ip, #1
    eaf8:	415b      	adcs	r3, r3
    eafa:	9307      	str	r3, [sp, #28]
			exp--;
    eafc:	e7e2      	b.n	eac4 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x64>
		_ldiv5(&fract);
    eafe:	a816      	add	r0, sp, #88	; 0x58
    eb00:	f00b ff10 	bl	1a924 <_ldiv5>
		exp--;
    eb04:	e9dd ae16 	ldrd	sl, lr, [sp, #88]	; 0x58
		decexp++;
    eb08:	f04f 0c00 	mov.w	ip, #0
		exp--;
    eb0c:	f108 38ff 	add.w	r8, r8, #4294967295
		decexp++;
    eb10:	3601      	adds	r6, #1
		while ((fract >> 32) <= (MAXFP1 / 2)) {
    eb12:	2300      	movs	r3, #0
    eb14:	2100      	movs	r1, #0
    eb16:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
    eb1a:	4299      	cmp	r1, r3
    eb1c:	bf08      	it	eq
    eb1e:	4570      	cmpeq	r0, lr
    eb20:	d206      	bcs.n	eb30 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xd0>
    eb22:	f1bc 0f00 	cmp.w	ip, #0
    eb26:	f43f af09 	beq.w	e93c <z_prf+0x460>
    eb2a:	e9cd ae16 	strd	sl, lr, [sp, #88]	; 0x58
    eb2e:	e705      	b.n	e93c <z_prf+0x460>
			fract <<= 1;
    eb30:	eb1a 0a0a 	adds.w	sl, sl, sl
    eb34:	eb4e 0e0e 	adc.w	lr, lr, lr
			exp--;
    eb38:	f108 38ff 	add.w	r8, r8, #4294967295
    eb3c:	f04f 0c01 	mov.w	ip, #1
    eb40:	e7e7      	b.n	eb12 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xb2>
	if ((exp | fract) != 0) {
    eb42:	2600      	movs	r6, #0
    eb44:	46b0      	mov	r8, r6
    eb46:	e6fd      	b.n	e944 <z_prf+0x468>
			precision -= decexp;
    eb48:	1bad      	subs	r5, r5, r6
		if (!falt && (precision > 0)) {
    eb4a:	f1bb 0f00 	cmp.w	fp, #0
    eb4e:	d104      	bne.n	eb5a <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xfa>
			c = 'f';
    eb50:	2466      	movs	r4, #102	; 0x66
    eb52:	e716      	b.n	e982 <z_prf+0x4a6>
	prune_zero = false;		/* Assume trailing 0's allowed     */
    eb54:	f04f 0a00 	mov.w	sl, #0
    eb58:	e719      	b.n	e98e <z_prf+0x4b2>
    eb5a:	f04f 0a00 	mov.w	sl, #0
    eb5e:	e719      	b.n	e994 <z_prf+0x4b8>
    eb60:	f04f 0a00 	mov.w	sl, #0
		exp = precision + 1;
    eb64:	f105 0801 	add.w	r8, r5, #1
	digit_count = 16;
    eb68:	2310      	movs	r3, #16
    eb6a:	4598      	cmp	r8, r3
    eb6c:	9315      	str	r3, [sp, #84]	; 0x54
	if (exp > 16) {
    eb6e:	bfa8      	it	ge
    eb70:	4698      	movge	r8, r3
    eb72:	e718      	b.n	e9a6 <z_prf+0x4ca>
		if (exp < 0) {
    eb74:	2466      	movs	r4, #102	; 0x66
    eb76:	e7f7      	b.n	eb68 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x108>
		_ldiv5(&ltemp);
    eb78:	a818      	add	r0, sp, #96	; 0x60
    eb7a:	f00b fed3 	bl	1a924 <_ldiv5>
		_rlrshift(&ltemp);
    eb7e:	a818      	add	r0, sp, #96	; 0x60
    eb80:	f00b febf 	bl	1a902 <_rlrshift>
    eb84:	e714      	b.n	e9b0 <z_prf+0x4d4>
			*buf++ = '0';
    eb86:	463b      	mov	r3, r7
    eb88:	2230      	movs	r2, #48	; 0x30
			zero.predot = zero.postdot = zero.trail = 0;
    eb8a:	f04f 0800 	mov.w	r8, #0
			*buf++ = '0';
    eb8e:	f803 2b01 	strb.w	r2, [r3], #1
    eb92:	e73e      	b.n	ea12 <z_prf+0x536>
			*buf++ = _get_digit(&fract, &digit_count);
    eb94:	a915      	add	r1, sp, #84	; 0x54
    eb96:	a816      	add	r0, sp, #88	; 0x58
    eb98:	9306      	str	r3, [sp, #24]
    eb9a:	f00b feee 	bl	1a97a <_get_digit>
    eb9e:	9b06      	ldr	r3, [sp, #24]
			precision--;
    eba0:	3d01      	subs	r5, #1
			*buf++ = _get_digit(&fract, &digit_count);
    eba2:	f803 0b01 	strb.w	r0, [r3], #1
			precision--;
    eba6:	e749      	b.n	ea3c <z_prf+0x560>
			zero.predot = zero.postdot = zero.trail = 0;
    eba8:	46b3      	mov	fp, r6
    ebaa:	e747      	b.n	ea3c <z_prf+0x560>
    ebac:	f04f 0b00 	mov.w	fp, #0
    ebb0:	e74a      	b.n	ea48 <z_prf+0x56c>
		*buf = _get_digit(&fract, &digit_count);
    ebb2:	a915      	add	r1, sp, #84	; 0x54
    ebb4:	a816      	add	r0, sp, #88	; 0x58
    ebb6:	f00b fee0 	bl	1a97a <_get_digit>
		if (*buf++ != '0') {
    ebba:	2830      	cmp	r0, #48	; 0x30
		*buf = _get_digit(&fract, &digit_count);
    ebbc:	7038      	strb	r0, [r7, #0]
			decexp--;
    ebbe:	bf18      	it	ne
    ebc0:	f106 36ff 	addne.w	r6, r6, #4294967295
		if (falt || (precision > 0)) {
    ebc4:	f1bb 0f00 	cmp.w	fp, #0
    ebc8:	d138      	bne.n	ec3c <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x1dc>
    ebca:	2d00      	cmp	r5, #0
    ebcc:	dc36      	bgt.n	ec3c <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x1dc>
		if (*buf++ != '0') {
    ebce:	1c7b      	adds	r3, r7, #1
	if (prune_zero) {
    ebd0:	f1ba 0f00 	cmp.w	sl, #0
    ebd4:	d044      	beq.n	ec60 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x200>
			zero.predot = zero.postdot = zero.trail = 0;
    ebd6:	f04f 0b00 	mov.w	fp, #0
    ebda:	46d8      	mov	r8, fp
		while (*--buf == '0')
    ebdc:	461a      	mov	r2, r3
    ebde:	f813 1d01 	ldrb.w	r1, [r3, #-1]!
    ebe2:	2930      	cmp	r1, #48	; 0x30
    ebe4:	d0fa      	beq.n	ebdc <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x17c>
		if (*buf != '.') {
    ebe6:	292e      	cmp	r1, #46	; 0x2e
    ebe8:	bf18      	it	ne
    ebea:	4613      	movne	r3, r2
    ebec:	2500      	movs	r5, #0
	if ((c == 'e') || (c == 'E')) {
    ebee:	f004 02df 	and.w	r2, r4, #223	; 0xdf
    ebf2:	2a45      	cmp	r2, #69	; 0x45
    ebf4:	f47f af2c 	bne.w	ea50 <z_prf+0x574>
		if (decexp < 0) {
    ebf8:	2e00      	cmp	r6, #0
			*buf++ = '-';
    ebfa:	bfb4      	ite	lt
    ebfc:	222d      	movlt	r2, #45	; 0x2d
			*buf++ = '+';
    ebfe:	222b      	movge	r2, #43	; 0x2b
		*buf++ = c;
    ec00:	4619      	mov	r1, r3
			decexp = -decexp;
    ec02:	bfb8      	it	lt
    ec04:	4276      	neglt	r6, r6
		if (decexp >= 100) {
    ec06:	2e63      	cmp	r6, #99	; 0x63
		*buf++ = c;
    ec08:	f801 4b02 	strb.w	r4, [r1], #2
			*buf++ = '-';
    ec0c:	705a      	strb	r2, [r3, #1]
		if (decexp >= 100) {
    ec0e:	dd08      	ble.n	ec22 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x1c2>
			*buf++ = (decexp / 100) + '0';
    ec10:	2064      	movs	r0, #100	; 0x64
    ec12:	fb96 f2f0 	sdiv	r2, r6, r0
			decexp %= 100;
    ec16:	fb00 6612 	mls	r6, r0, r2, r6
			*buf++ = (decexp / 100) + '0';
    ec1a:	f102 0430 	add.w	r4, r2, #48	; 0x30
    ec1e:	1cd9      	adds	r1, r3, #3
    ec20:	709c      	strb	r4, [r3, #2]
		*buf++ = (decexp / 10) + '0';
    ec22:	200a      	movs	r0, #10
    ec24:	fb96 f2f0 	sdiv	r2, r6, r0
    ec28:	460b      	mov	r3, r1
		decexp %= 10;
    ec2a:	fb00 6612 	mls	r6, r0, r2, r6
		*buf++ = (decexp / 10) + '0';
    ec2e:	f102 0430 	add.w	r4, r2, #48	; 0x30
		*buf++ = decexp + '0';
    ec32:	3630      	adds	r6, #48	; 0x30
		*buf++ = (decexp / 10) + '0';
    ec34:	f803 4b02 	strb.w	r4, [r3], #2
		*buf++ = decexp + '0';
    ec38:	704e      	strb	r6, [r1, #1]
    ec3a:	e709      	b.n	ea50 <z_prf+0x574>
			*buf++ = '.';
    ec3c:	222e      	movs	r2, #46	; 0x2e
    ec3e:	1cbb      	adds	r3, r7, #2
    ec40:	707a      	strb	r2, [r7, #1]
		while (precision > 0 && digit_count > 0) {
    ec42:	2d00      	cmp	r5, #0
    ec44:	ddc4      	ble.n	ebd0 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x170>
    ec46:	9a15      	ldr	r2, [sp, #84]	; 0x54
    ec48:	2a00      	cmp	r2, #0
    ec4a:	ddc1      	ble.n	ebd0 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x170>
			*buf++ = _get_digit(&fract, &digit_count);
    ec4c:	a915      	add	r1, sp, #84	; 0x54
    ec4e:	a816      	add	r0, sp, #88	; 0x58
    ec50:	9306      	str	r3, [sp, #24]
    ec52:	f00b fe92 	bl	1a97a <_get_digit>
    ec56:	9b06      	ldr	r3, [sp, #24]
			precision--;
    ec58:	3d01      	subs	r5, #1
			*buf++ = _get_digit(&fract, &digit_count);
    ec5a:	f803 0b01 	strb.w	r0, [r3], #1
			precision--;
    ec5e:	e7f0      	b.n	ec42 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x1e2>
			zero.predot = zero.postdot = zero.trail = 0;
    ec60:	46d3      	mov	fp, sl
    ec62:	46d0      	mov	r8, sl
    ec64:	e7c3      	b.n	ebee <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x18e>
					prefix = 1;
    ec66:	2701      	movs	r7, #1
    ec68:	e61b      	b.n	e8a2 <z_prf+0x3c6>
				switch (i) {
    ec6a:	46b1      	mov	r9, r6
    ec6c:	2f68      	cmp	r7, #104	; 0x68
    ec6e:	f859 3b04 	ldr.w	r3, [r9], #4
    ec72:	d005      	beq.n	ec80 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x220>
    ec74:	dc01      	bgt.n	ec7a <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x21a>
    ec76:	2f48      	cmp	r7, #72	; 0x48
    ec78:	d007      	beq.n	ec8a <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x22a>
					*va_arg(vargs, int *) = count;
    ec7a:	9a01      	ldr	r2, [sp, #4]
    ec7c:	601a      	str	r2, [r3, #0]
					break;
    ec7e:	e001      	b.n	ec84 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x224>
					*va_arg(vargs, short *) = count;
    ec80:	9a01      	ldr	r2, [sp, #4]
    ec82:	801a      	strh	r2, [r3, #0]
				continue;
    ec84:	464e      	mov	r6, r9
    ec86:	9a08      	ldr	r2, [sp, #32]
    ec88:	e430      	b.n	e4ec <z_prf+0x10>
					*va_arg(vargs, char *) = count;
    ec8a:	9a01      	ldr	r2, [sp, #4]
    ec8c:	701a      	strb	r2, [r3, #0]
					break;
    ec8e:	e7f9      	b.n	ec84 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x224>
				val = (uintptr_t) va_arg(vargs, void *);
    ec90:	46b1      	mov	r9, r6
		*buf++ = '0';
    ec92:	f647 0330 	movw	r3, #30768	; 0x7830
	len = _to_x(buf, value, 16);
    ec96:	2210      	movs	r2, #16
    ec98:	f859 1b04 	ldr.w	r1, [r9], #4
    ec9c:	f10d 006e 	add.w	r0, sp, #110	; 0x6e
		*buf++ = '0';
    eca0:	f8ad 306c 	strh.w	r3, [sp, #108]	; 0x6c
	len = _to_x(buf, value, 16);
    eca4:	f00b fe0b 	bl	1a8be <_to_x>
				prefix = 2;
    eca8:	2702      	movs	r7, #2
	return len + (buf - buf0);
    ecaa:	1c86      	adds	r6, r0, #2
				break;
    ecac:	e51e      	b.n	e6ec <z_prf+0x210>
					if (cptr[clen] == '\0') {
    ecae:	5d9a      	ldrb	r2, [r3, r6]
    ecb0:	2a00      	cmp	r2, #0
    ecb2:	d047      	beq.n	ed44 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x2e4>
				for (clen = 0; clen < precision; clen++) {
    ecb4:	3601      	adds	r6, #1
    ecb6:	e52e      	b.n	e716 <z_prf+0x23a>
	if (alt_form) {
    ecb8:	ac1b      	add	r4, sp, #108	; 0x6c
	return (buf - buf0) + _to_x(buf, value, 8);
    ecba:	2208      	movs	r2, #8
    ecbc:	4620      	mov	r0, r4
    ecbe:	f00b fdfe 	bl	1a8be <_to_x>
    ecc2:	ae1b      	add	r6, sp, #108	; 0x6c
    ecc4:	1ba6      	subs	r6, r4, r6
    ecc6:	4406      	add	r6, r0
			prefix = 0;
    ecc8:	2700      	movs	r7, #0
    ecca:	e50f      	b.n	e6ec <z_prf+0x210>
		*buf++ = '0';
    eccc:	f10d 046d 	add.w	r4, sp, #109	; 0x6d
    ecd0:	e7f3      	b.n	ecba <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x25a>
				} else if (c == 'u') {
    ecd2:	2c75      	cmp	r4, #117	; 0x75
    ecd4:	d105      	bne.n	ece2 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x282>
	return _to_x(buf, value, 10);
    ecd6:	220a      	movs	r2, #10
    ecd8:	a81b      	add	r0, sp, #108	; 0x6c
    ecda:	f00b fdf0 	bl	1a8be <_to_x>
    ecde:	4606      	mov	r6, r0
    ece0:	e7f2      	b.n	ecc8 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x268>
	if (alt_form) {
    ece2:	f1bb 0f00 	cmp.w	fp, #0
    ece6:	d012      	beq.n	ed0e <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x2ae>
		*buf++ = '0';
    ece8:	f647 0330 	movw	r3, #30768	; 0x7830
		*buf++ = 'x';
    ecec:	f10d 086e 	add.w	r8, sp, #110	; 0x6e
		*buf++ = '0';
    ecf0:	f8ad 306c 	strh.w	r3, [sp, #108]	; 0x6c
	len = _to_x(buf, value, 16);
    ecf4:	2210      	movs	r2, #16
    ecf6:	4640      	mov	r0, r8
    ecf8:	f00b fde1 	bl	1a8be <_to_x>
	if (prefix == 'X') {
    ecfc:	2c58      	cmp	r4, #88	; 0x58
    ecfe:	d009      	beq.n	ed14 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x2b4>
	return len + (buf - buf0);
    ed00:	ae1b      	add	r6, sp, #108	; 0x6c
    ed02:	eba8 0606 	sub.w	r6, r8, r6
    ed06:	4406      	add	r6, r0
						prefix = 2;
    ed08:	ea4f 074b 	mov.w	r7, fp, lsl #1
    ed0c:	e4ee      	b.n	e6ec <z_prf+0x210>
	if (alt_form) {
    ed0e:	f10d 086c 	add.w	r8, sp, #108	; 0x6c
    ed12:	e7ef      	b.n	ecf4 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x294>
	if (prefix == 'X') {
    ed14:	aa1b      	add	r2, sp, #108	; 0x6c
		if (*buf >= 'a' && *buf <= 'z') {
    ed16:	7813      	ldrb	r3, [r2, #0]
    ed18:	f1a3 0161 	sub.w	r1, r3, #97	; 0x61
    ed1c:	2919      	cmp	r1, #25
			*buf += 'A' - 'a';
    ed1e:	bf9c      	itt	ls
    ed20:	3b20      	subls	r3, #32
    ed22:	7013      	strbls	r3, [r2, #0]
	} while (*buf++);
    ed24:	f812 3b01 	ldrb.w	r3, [r2], #1
    ed28:	2b00      	cmp	r3, #0
    ed2a:	d1f4      	bne.n	ed16 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x2b6>
    ed2c:	e7e8      	b.n	ed00 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x2a0>
				PUTC('%');
    ed2e:	9903      	ldr	r1, [sp, #12]
    ed30:	4620      	mov	r0, r4
    ed32:	f7ff bbe4 	b.w	e4fe <z_prf+0x22>
				count++;
    ed36:	9b01      	ldr	r3, [sp, #4]
    ed38:	3301      	adds	r3, #1
				count += 2;
    ed3a:	9301      	str	r3, [sp, #4]
				continue;
    ed3c:	46b1      	mov	r9, r6
    ed3e:	e7a1      	b.n	ec84 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x224>
					prefix = 1;
    ed40:	2701      	movs	r7, #1
    ed42:	e4d3      	b.n	e6ec <z_prf+0x210>
    ed44:	4615      	mov	r5, r2
    ed46:	e4eb      	b.n	e720 <z_prf+0x244>
			cptr = buf;
    ed48:	ab1b      	add	r3, sp, #108	; 0x6c
				zero_head = 0;
    ed4a:	2200      	movs	r2, #0
    ed4c:	e4fa      	b.n	e744 <z_prf+0x268>
    ed4e:	ab1b      	add	r3, sp, #108	; 0x6c
    ed50:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    ed52:	e4f7      	b.n	e744 <z_prf+0x268>
    ed54:	e9cd 3209 	strd	r3, r2, [sp, #36]	; 0x24
					PUTC(' ');
    ed58:	9903      	ldr	r1, [sp, #12]
    ed5a:	9b02      	ldr	r3, [sp, #8]
    ed5c:	2020      	movs	r0, #32
    ed5e:	4798      	blx	r3
    ed60:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
    ed64:	3001      	adds	r0, #1
    ed66:	f43f abcf 	beq.w	e508 <z_prf+0x2c>
				while (width-- > 0) {
    ed6a:	f11a 3aff 	adds.w	sl, sl, #4294967295
    ed6e:	d2f1      	bcs.n	ed54 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x2f4>
				count += width;
    ed70:	9901      	ldr	r1, [sp, #4]
    ed72:	4421      	add	r1, r4
    ed74:	9101      	str	r1, [sp, #4]
				while (width-- > 0) {
    ed76:	4654      	mov	r4, sl
    ed78:	e4ee      	b.n	e758 <z_prf+0x27c>
    ed7a:	46a2      	mov	sl, r4
    ed7c:	e7f5      	b.n	ed6a <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x30a>
    ed7e:	bf00      	nop
    ed80:	33333332 	.word	0x33333332
				PUTC(*cptr++);
    ed84:	f813 0b01 	ldrb.w	r0, [r3], #1
    ed88:	9903      	ldr	r1, [sp, #12]
    ed8a:	9309      	str	r3, [sp, #36]	; 0x24
    ed8c:	9b02      	ldr	r3, [sp, #8]
    ed8e:	920a      	str	r2, [sp, #40]	; 0x28
    ed90:	4798      	blx	r3
    ed92:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
    ed96:	3001      	adds	r0, #1
    ed98:	f47f ace0 	bne.w	e75c <z_prf+0x280>
    ed9c:	f7ff bbb4 	b.w	e508 <z_prf+0x2c>
				PUTC('0');
    eda0:	9903      	ldr	r1, [sp, #12]
    eda2:	2030      	movs	r0, #48	; 0x30
    eda4:	9b02      	ldr	r3, [sp, #8]
    eda6:	9209      	str	r2, [sp, #36]	; 0x24
    eda8:	4798      	blx	r3
    edaa:	3001      	adds	r0, #1
    edac:	9a09      	ldr	r2, [sp, #36]	; 0x24
    edae:	f47f acd8 	bne.w	e762 <z_prf+0x286>
    edb2:	f7ff bba9 	b.w	e508 <z_prf+0x2c>
					PUTC(c);
    edb6:	e9dd 3102 	ldrd	r3, r1, [sp, #8]
    edba:	4798      	blx	r3
    edbc:	3001      	adds	r0, #1
    edbe:	f43f aba3 	beq.w	e508 <z_prf+0x2c>
					c = *++cptr;
    edc2:	f81a 0f01 	ldrb.w	r0, [sl, #1]!
    edc6:	e4d8      	b.n	e77a <z_prf+0x29e>
					PUTC('0');
    edc8:	9903      	ldr	r1, [sp, #12]
    edca:	2030      	movs	r0, #48	; 0x30
    edcc:	9b02      	ldr	r3, [sp, #8]
    edce:	4798      	blx	r3
    edd0:	3001      	adds	r0, #1
    edd2:	f47f acda 	bne.w	e78a <z_prf+0x2ae>
    edd6:	f7ff bb97 	b.w	e508 <z_prf+0x2c>
					PUTC('0');
    edda:	9903      	ldr	r1, [sp, #12]
    eddc:	2030      	movs	r0, #48	; 0x30
    edde:	9b02      	ldr	r3, [sp, #8]
    ede0:	4798      	blx	r3
    ede2:	3001      	adds	r0, #1
    ede4:	f107 37ff 	add.w	r7, r7, #4294967295
    ede8:	f47f ace9 	bne.w	e7be <z_prf+0x2e2>
    edec:	f7ff bb8c 	b.w	e508 <z_prf+0x2c>
					PUTC(c);
    edf0:	e9dd 3102 	ldrd	r3, r1, [sp, #8]
    edf4:	4798      	blx	r3
    edf6:	3001      	adds	r0, #1
    edf8:	f43f ab86 	beq.w	e508 <z_prf+0x2c>
					c = *++cptr;
    edfc:	f81a 0f01 	ldrb.w	r0, [sl, #1]!
    ee00:	e4e7      	b.n	e7d2 <z_prf+0x2f6>
					PUTC('0');
    ee02:	9903      	ldr	r1, [sp, #12]
    ee04:	2030      	movs	r0, #48	; 0x30
    ee06:	9b02      	ldr	r3, [sp, #8]
    ee08:	4798      	blx	r3
    ee0a:	3001      	adds	r0, #1
    ee0c:	f107 37ff 	add.w	r7, r7, #4294967295
    ee10:	f47f acea 	bne.w	e7e8 <z_prf+0x30c>
    ee14:	f7ff bb78 	b.w	e508 <z_prf+0x2c>
				PUTC(*cptr++);
    ee18:	9903      	ldr	r1, [sp, #12]
    ee1a:	f81a 0b01 	ldrb.w	r0, [sl], #1
    ee1e:	9b02      	ldr	r3, [sp, #8]
    ee20:	4798      	blx	r3
    ee22:	3001      	adds	r0, #1
    ee24:	f43f ab70 	beq.w	e508 <z_prf+0x2c>
    ee28:	eba6 030a 	sub.w	r3, r6, sl
			while (clen-- > 0) {
    ee2c:	2b00      	cmp	r3, #0
    ee2e:	dcf3      	bgt.n	ee18 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x3b8>
			count += clen;
    ee30:	9b01      	ldr	r3, [sp, #4]
    ee32:	9a06      	ldr	r2, [sp, #24]
			if (width > 0) {
    ee34:	2c00      	cmp	r4, #0
			count += clen;
    ee36:	4413      	add	r3, r2
    ee38:	9301      	str	r3, [sp, #4]
			if (width > 0) {
    ee3a:	f77f af23 	ble.w	ec84 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x224>
    ee3e:	4625      	mov	r5, r4
    ee40:	e006      	b.n	ee50 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x3f0>
					PUTC(' ');
    ee42:	9903      	ldr	r1, [sp, #12]
    ee44:	2020      	movs	r0, #32
    ee46:	9b02      	ldr	r3, [sp, #8]
    ee48:	4798      	blx	r3
    ee4a:	3001      	adds	r0, #1
    ee4c:	f43f ab5c 	beq.w	e508 <z_prf+0x2c>
				while (width-- > 0) {
    ee50:	f115 35ff 	adds.w	r5, r5, #4294967295
    ee54:	d2f5      	bcs.n	ee42 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x3e2>
				count += width;
    ee56:	9b01      	ldr	r3, [sp, #4]
    ee58:	4423      	add	r3, r4
    ee5a:	9301      	str	r3, [sp, #4]
    ee5c:	e712      	b.n	ec84 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x224>
    ee5e:	bf00      	nop

0000ee60 <snprintf>:
	return 0; /* indicate keep going so we get the total count */
}

int snprintf(char *_MLIBC_RESTRICT s, size_t len,
	     const char *_MLIBC_RESTRICT format, ...)
{
    ee60:	b40c      	push	{r2, r3}
    ee62:	b51f      	push	{r0, r1, r2, r3, r4, lr}

	struct emitter p;
	int     r;
	char    dummy;

	if (len == 0) {
    ee64:	b909      	cbnz	r1, ee6a <snprintf+0xa>
		s = &dummy; /* write final NUL to dummy, can't change *s */
    ee66:	f10d 0003 	add.w	r0, sp, #3
	}

	p.ptr = s;
	p.len = (int) len;
    ee6a:	e9cd 0102 	strd	r0, r1, [sp, #8]

	va_start(vargs, format);
    ee6e:	ab07      	add	r3, sp, #28
	r = z_prf(sprintf_out, (void *) (&p), format, vargs);
    ee70:	9a06      	ldr	r2, [sp, #24]
    ee72:	a902      	add	r1, sp, #8
    ee74:	4805      	ldr	r0, [pc, #20]	; (ee8c <snprintf+0x2c>)
	va_start(vargs, format);
    ee76:	9301      	str	r3, [sp, #4]
	r = z_prf(sprintf_out, (void *) (&p), format, vargs);
    ee78:	f7ff fb30 	bl	e4dc <z_prf>
	va_end(vargs);

	*(p.ptr) = 0;
    ee7c:	2200      	movs	r2, #0
    ee7e:	9b02      	ldr	r3, [sp, #8]
    ee80:	701a      	strb	r2, [r3, #0]
	return r;
}
    ee82:	b005      	add	sp, #20
    ee84:	f85d eb04 	ldr.w	lr, [sp], #4
    ee88:	b002      	add	sp, #8
    ee8a:	4770      	bx	lr
    ee8c:	0001a9a9 	.word	0x0001a9a9

0000ee90 <net_buf_id>:
	return pool - _net_buf_pool_list;
}

int net_buf_id(struct net_buf *buf)
{
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
    ee90:	7982      	ldrb	r2, [r0, #6]

	return buf - pool->__bufs;
    ee92:	4b04      	ldr	r3, [pc, #16]	; (eea4 <net_buf_id+0x14>)
    ee94:	eb03 1342 	add.w	r3, r3, r2, lsl #5
    ee98:	69db      	ldr	r3, [r3, #28]
    ee9a:	1ac0      	subs	r0, r0, r3
}
    ee9c:	4b02      	ldr	r3, [pc, #8]	; (eea8 <net_buf_id+0x18>)
	return buf - pool->__bufs;
    ee9e:	10c0      	asrs	r0, r0, #3
}
    eea0:	4358      	muls	r0, r3
    eea2:	4770      	bx	lr
    eea4:	2002820c 	.word	0x2002820c
    eea8:	aaaaaaab 	.word	0xaaaaaaab

0000eeac <fixed_data_alloc>:
	.ref   = generic_data_ref,
	.unref = mem_pool_data_unref,
};

static u8_t *fixed_data_alloc(struct net_buf *buf, size_t *size, s32_t timeout)
{
    eeac:	b510      	push	{r4, lr}
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
    eeae:	4b09      	ldr	r3, [pc, #36]	; (eed4 <fixed_data_alloc+0x28>)
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
    eeb0:	7982      	ldrb	r2, [r0, #6]
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
    eeb2:	eb03 1342 	add.w	r3, r3, r2, lsl #5
    eeb6:	699b      	ldr	r3, [r3, #24]

	*size = MIN(fixed->data_size, *size);
    eeb8:	680a      	ldr	r2, [r1, #0]
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
    eeba:	685c      	ldr	r4, [r3, #4]
	*size = MIN(fixed->data_size, *size);
    eebc:	6823      	ldr	r3, [r4, #0]
    eebe:	429a      	cmp	r2, r3
    eec0:	bf94      	ite	ls
    eec2:	600a      	strls	r2, [r1, #0]
    eec4:	600b      	strhi	r3, [r1, #0]

	return fixed->data_pool + fixed->data_size * net_buf_id(buf);
    eec6:	f7ff ffe3 	bl	ee90 <net_buf_id>
    eeca:	e9d4 2300 	ldrd	r2, r3, [r4]
}
    eece:	fb02 3000 	mla	r0, r2, r0, r3
    eed2:	bd10      	pop	{r4, pc}
    eed4:	2002820c 	.word	0x2002820c

0000eed8 <net_if_init>:
	k_fifo_put(&tx_ts_queue, pkt);
}
#endif /* CONFIG_NET_PKT_TIMESTAMP_THREAD */

void net_if_init(void)
{
    eed8:	b538      	push	{r3, r4, r5, lr}

	NET_DBG("");

	net_tc_tx_init();

	for (iface = __net_if_start, if_count = 0; iface != __net_if_end;
    eeda:	4c07      	ldr	r4, [pc, #28]	; (eef8 <net_if_init+0x20>)
    eedc:	4d07      	ldr	r5, [pc, #28]	; (eefc <net_if_init+0x24>)
    eede:	42ac      	cmp	r4, r5
    eee0:	d100      	bne.n	eee4 <net_if_init+0xc>
		NET_WARN("You have configured only %d VLAN interfaces"
			 " but you have %d network interfaces.",
			 CONFIG_NET_VLAN_COUNT, if_count);
	}
#endif
}
    eee2:	bd38      	pop	{r3, r4, r5, pc}
 *
 * @return a pointer to the device driver instance
 */
static inline struct device *net_if_get_device(struct net_if *iface)
{
	return iface->if_dev->dev;
    eee4:	6823      	ldr	r3, [r4, #0]
	const struct net_if_api *api = net_if_get_device(iface)->driver_api;
    eee6:	681b      	ldr	r3, [r3, #0]
    eee8:	685b      	ldr	r3, [r3, #4]
	if (!api || !api->init) {
    eeea:	b11b      	cbz	r3, eef4 <net_if_init+0x1c>
    eeec:	681b      	ldr	r3, [r3, #0]
    eeee:	b10b      	cbz	r3, eef4 <net_if_init+0x1c>
	api->init(iface);
    eef0:	4620      	mov	r0, r4
    eef2:	4798      	blx	r3
	     iface++, if_count++) {
    eef4:	3420      	adds	r4, #32
    eef6:	e7f2      	b.n	eede <net_if_init+0x6>
    eef8:	20028260 	.word	0x20028260
    eefc:	20028280 	.word	0x20028280

0000ef00 <net_if_post_init>:

void net_if_post_init(void)
{
    ef00:	b538      	push	{r3, r4, r5, lr}
	struct net_if *iface;

	NET_DBG("");

	/* After TX is running, attempt to bring the interface up */
	for (iface = __net_if_start; iface != __net_if_end; iface++) {
    ef02:	4c08      	ldr	r4, [pc, #32]	; (ef24 <net_if_post_init+0x24>)
    ef04:	4d08      	ldr	r5, [pc, #32]	; (ef28 <net_if_post_init+0x28>)
    ef06:	42ac      	cmp	r4, r5
    ef08:	d100      	bne.n	ef0c <net_if_post_init+0xc>
		if (!net_if_flag_is_set(iface, NET_IF_NO_AUTO_START)) {
			net_if_up(iface);
		}
	}
}
    ef0a:	bd38      	pop	{r3, r4, r5, pc}
	return atomic_test_bit(iface->if_dev->flags, value);
    ef0c:	6820      	ldr	r0, [r4, #0]
    ef0e:	2103      	movs	r1, #3
    ef10:	300c      	adds	r0, #12
    ef12:	f00b fd72 	bl	1a9fa <atomic_test_bit>
		if (!net_if_flag_is_set(iface, NET_IF_NO_AUTO_START)) {
    ef16:	b910      	cbnz	r0, ef1e <net_if_post_init+0x1e>
			net_if_up(iface);
    ef18:	4620      	mov	r0, r4
    ef1a:	f00b fd74 	bl	1aa06 <net_if_up>
	for (iface = __net_if_start; iface != __net_if_end; iface++) {
    ef1e:	3420      	adds	r4, #32
    ef20:	e7f1      	b.n	ef06 <net_if_post_init+0x6>
    ef22:	bf00      	nop
    ef24:	20028260 	.word	0x20028260
    ef28:	20028280 	.word	0x20028280

0000ef2c <gpio_nrfx_init>:
#endif
	}
}

static int gpio_nrfx_init(struct device *port)
{
    ef2c:	b508      	push	{r3, lr}
	static bool gpio_initialized;

	if (!gpio_initialized) {
    ef2e:	4b09      	ldr	r3, [pc, #36]	; (ef54 <gpio_nrfx_init+0x28>)
    ef30:	781a      	ldrb	r2, [r3, #0]
    ef32:	b96a      	cbnz	r2, ef50 <gpio_nrfx_init+0x24>
		gpio_initialized = true;
    ef34:	2101      	movs	r1, #1
		IRQ_CONNECT(DT_NORDIC_NRF_GPIOTE_GPIOTE_0_IRQ_0,
    ef36:	2031      	movs	r0, #49	; 0x31
		gpio_initialized = true;
    ef38:	7019      	strb	r1, [r3, #0]
		IRQ_CONNECT(DT_NORDIC_NRF_GPIOTE_GPIOTE_0_IRQ_0,
    ef3a:	2105      	movs	r1, #5
    ef3c:	f7fe fcb2 	bl	d8a4 <z_arm_irq_priority_set>
			    DT_NORDIC_NRF_GPIOTE_GPIOTE_0_IRQ_0_PRIORITY,
			    gpiote_event_handler, NULL, 0);

		irq_enable(DT_NORDIC_NRF_GPIOTE_GPIOTE_0_IRQ_0);
    ef40:	2031      	movs	r0, #49	; 0x31
    ef42:	f7fe fc9f 	bl	d884 <arch_irq_enable>
    return ((uint32_t)p_reg + event);
}

NRF_STATIC_INLINE void nrf_gpiote_int_enable(NRF_GPIOTE_Type * p_reg, uint32_t mask)
{
    p_reg->INTENSET = mask;
    ef46:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
    ef4a:	4b03      	ldr	r3, [pc, #12]	; (ef58 <gpio_nrfx_init+0x2c>)
    ef4c:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
		nrf_gpiote_int_enable(NRF_GPIOTE, NRF_GPIOTE_INT_PORT_MASK);
	}

	return 0;
}
    ef50:	2000      	movs	r0, #0
    ef52:	bd08      	pop	{r3, pc}
    ef54:	200250f7 	.word	0x200250f7
    ef58:	40031000 	.word	0x40031000

0000ef5c <gpiote_pin_int_cfg>:
{
    ef5c:	b570      	push	{r4, r5, r6, lr}
	return port->config->config_info;
    ef5e:	6803      	ldr	r3, [r0, #0]
	struct gpio_nrfx_data *data = get_port_data(port);
    ef60:	6882      	ldr	r2, [r0, #8]
	u32_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
    ef62:	691b      	ldr	r3, [r3, #16]
    p_reg->INTENCLR = mask;
}

NRF_STATIC_INLINE uint32_t nrf_gpiote_int_enable_check(NRF_GPIOTE_Type const * p_reg, uint32_t mask)
{
    return p_reg->INTENSET & mask;
    ef64:	4c51      	ldr	r4, [pc, #324]	; (f0ac <gpiote_pin_int_cfg+0x150>)
    ef66:	7918      	ldrb	r0, [r3, #4]
    ef68:	f001 031f 	and.w	r3, r1, #31
    ef6c:	ea43 1340 	orr.w	r3, r3, r0, lsl #5
	for (size_t i = 0; i < GPIOTE_CH_NUM; i++) {
    ef70:	2000      	movs	r0, #0
    ef72:	f8d4 5304 	ldr.w	r5, [r4, #772]	; 0x304
    ef76:	b2ed      	uxtb	r5, r5
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk);
}

NRF_STATIC_INLINE uint32_t nrf_gpiote_event_pin_get(NRF_GPIOTE_Type const * p_reg, uint32_t idx)
{
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
    ef78:	f500 76a2 	add.w	r6, r0, #324	; 0x144
    ef7c:	f854 6026 	ldr.w	r6, [r4, r6, lsl #2]
    ef80:	f3c6 2604 	ubfx	r6, r6, #8, #5
		if ((nrf_gpiote_event_pin_get(NRF_GPIOTE, i) == abs_pin)
    ef84:	42b3      	cmp	r3, r6
    ef86:	d170      	bne.n	f06a <gpiote_pin_int_cfg+0x10e>
		    && (intenset & BIT(i))) {
    ef88:	fa25 f600 	lsr.w	r6, r5, r0
    ef8c:	07f6      	lsls	r6, r6, #31
    ef8e:	d56c      	bpl.n	f06a <gpiote_pin_int_cfg+0x10e>
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Event;
    ef90:	0085      	lsls	r5, r0, #2
    ef92:	f105 4580 	add.w	r5, r5, #1073741824	; 0x40000000
    ef96:	f505 3544 	add.w	r5, r5, #200704	; 0x31000
    ef9a:	f8d5 6510 	ldr.w	r6, [r5, #1296]	; 0x510
    ef9e:	f026 0601 	bic.w	r6, r6, #1
    efa2:	f8c5 6510 	str.w	r6, [r5, #1296]	; 0x510
			nrf_gpiote_int_disable(NRF_GPIOTE, BIT(i));
    efa6:	2501      	movs	r5, #1
    efa8:	fa05 f000 	lsl.w	r0, r5, r0
    p_reg->INTENCLR = mask;
    efac:	f8c4 0308 	str.w	r0, [r4, #776]	; 0x308
NRF_STATIC_INLINE void nrf_gpio_cfg_sense_set(uint32_t             pin_number,
                                              nrf_gpio_pin_sense_t sense_config)
{
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    /*lint -e{845} // A zero has been given as right argument to operator '|'" */
    uint32_t cnf = reg->PIN_CNF[pin_number] & ~GPIO_PIN_CNF_SENSE_Msk;
    efb0:	4d3f      	ldr	r5, [pc, #252]	; (f0b0 <gpiote_pin_int_cfg+0x154>)
    efb2:	eb05 0583 	add.w	r5, r5, r3, lsl #2
    efb6:	f8d5 0200 	ldr.w	r0, [r5, #512]	; 0x200
    efba:	f420 3040 	bic.w	r0, r0, #196608	; 0x30000

    reg->PIN_CNF[pin_number] = cnf | (sense_config << GPIO_PIN_CNF_SENSE_Pos);
    efbe:	f8c5 0200 	str.w	r0, [r5, #512]	; 0x200
	if ((data->pin_int_en & BIT(pin)) && (data->int_en & BIT(pin))) {
    efc2:	6890      	ldr	r0, [r2, #8]
    efc4:	40c8      	lsrs	r0, r1
    efc6:	f010 0001 	ands.w	r0, r0, #1
    efca:	d04d      	beq.n	f068 <gpiote_pin_int_cfg+0x10c>
    efcc:	68d0      	ldr	r0, [r2, #12]
    efce:	40c8      	lsrs	r0, r1
    efd0:	f010 0001 	ands.w	r0, r0, #1
    efd4:	d048      	beq.n	f068 <gpiote_pin_int_cfg+0x10c>
		if (data->trig_edge & BIT(pin)) {
    efd6:	6950      	ldr	r0, [r2, #20]
    efd8:	40c8      	lsrs	r0, r1
    efda:	f010 0001 	ands.w	r0, r0, #1
    efde:	d050      	beq.n	f082 <gpiote_pin_int_cfg+0x126>
			if (data->double_edge & BIT(pin)) {
    efe0:	6990      	ldr	r0, [r2, #24]
    efe2:	40c8      	lsrs	r0, r1
    efe4:	07c0      	lsls	r0, r0, #31
    efe6:	d444      	bmi.n	f072 <gpiote_pin_int_cfg+0x116>
			} else if (((data->active_level & BIT(pin)) != 0U)
    efe8:	6910      	ldr	r0, [r2, #16]
				   ^ ((BIT(pin) & data->inverted) != 0)) {
    efea:	69d2      	ldr	r2, [r2, #28]
			} else if (((data->active_level & BIT(pin)) != 0U)
    efec:	40c8      	lsrs	r0, r1
				   ^ ((BIT(pin) & data->inverted) != 0)) {
    efee:	fa22 f101 	lsr.w	r1, r2, r1
			} else if (((data->active_level & BIT(pin)) != 0U)
    eff2:	f000 0001 	and.w	r0, r0, #1
    eff6:	f001 0101 	and.w	r1, r1, #1
				pol = NRF_GPIOTE_POLARITY_HITOLO;
    effa:	4288      	cmp	r0, r1
    effc:	bf14      	ite	ne
    effe:	2101      	movne	r1, #1
    f000:	2102      	moveq	r1, #2
    f002:	2500      	movs	r5, #0
    p_reg->CONFIG[idx] = 0;
}

NRF_STATIC_INLINE bool nrf_gpiote_te_is_enabled(NRF_GPIOTE_Type const * p_reg, uint32_t idx)
{
    return (p_reg->CONFIG[idx] & GPIOTE_CONFIG_MODE_Msk) != GPIOTE_CONFIG_MODE_Disabled;
    f004:	f505 72a2 	add.w	r2, r5, #324	; 0x144
    f008:	f854 0022 	ldr.w	r0, [r4, r2, lsl #2]
		if (!nrf_gpiote_te_is_enabled(NRF_GPIOTE, channel)) {
    f00c:	f010 0003 	ands.w	r0, r0, #3
    f010:	d131      	bne.n	f076 <gpiote_pin_int_cfg+0x11a>
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk | GPIOTE_CONFIG_POLARITY_Msk);
    f012:	00aa      	lsls	r2, r5, #2
    f014:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
    f018:	f502 3244 	add.w	r2, r2, #200704	; 0x31000
    f01c:	f8d2 6510 	ldr.w	r6, [r2, #1296]	; 0x510
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    f020:	021b      	lsls	r3, r3, #8
    f022:	f403 53f8 	and.w	r3, r3, #7936	; 0x1f00
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk | GPIOTE_CONFIG_POLARITY_Msk);
    f026:	f426 3647 	bic.w	r6, r6, #203776	; 0x31c00
    f02a:	f426 7640 	bic.w	r6, r6, #768	; 0x300
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    f02e:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
			nrf_gpiote_event_t evt =
    f032:	f105 0340 	add.w	r3, r5, #64	; 0x40
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk | GPIOTE_CONFIG_POLARITY_Msk);
    f036:	f8c2 6510 	str.w	r6, [r2, #1296]	; 0x510
    f03a:	009b      	lsls	r3, r3, #2
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    f03c:	f8d2 6510 	ldr.w	r6, [r2, #1296]	; 0x510
    return ((uint32_t)p_reg + event);
    f040:	b29b      	uxth	r3, r3
    f042:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    f046:	f503 3344 	add.w	r3, r3, #200704	; 0x31000
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    f04a:	4331      	orrs	r1, r6
    f04c:	f8c2 1510 	str.w	r1, [r2, #1296]	; 0x510
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    f050:	6018      	str	r0, [r3, #0]
   p_reg->CONFIG[idx] |= GPIOTE_CONFIG_MODE_Event;
    f052:	f8d2 3510 	ldr.w	r3, [r2, #1296]	; 0x510
    f056:	f043 0301 	orr.w	r3, r3, #1
    f05a:	f8c2 3510 	str.w	r3, [r2, #1296]	; 0x510
			nrf_gpiote_int_enable(NRF_GPIOTE, BIT(channel));
    f05e:	2301      	movs	r3, #1
    f060:	fa03 f505 	lsl.w	r5, r3, r5
    p_reg->INTENSET = mask;
    f064:	f8c4 5304 	str.w	r5, [r4, #772]	; 0x304
}
    f068:	bd70      	pop	{r4, r5, r6, pc}
	for (size_t i = 0; i < GPIOTE_CH_NUM; i++) {
    f06a:	3001      	adds	r0, #1
    f06c:	2808      	cmp	r0, #8
    f06e:	d183      	bne.n	ef78 <gpiote_pin_int_cfg+0x1c>
    f070:	e79e      	b.n	efb0 <gpiote_pin_int_cfg+0x54>
				pol = NRF_GPIOTE_POLARITY_TOGGLE;
    f072:	2103      	movs	r1, #3
    f074:	e7c5      	b.n	f002 <gpiote_pin_int_cfg+0xa6>
    f076:	3501      	adds	r5, #1
	for (u8_t channel = 0; channel < GPIOTE_CH_NUM; ++channel) {
    f078:	2d08      	cmp	r5, #8
    f07a:	d1c3      	bne.n	f004 <gpiote_pin_int_cfg+0xa8>
	return -ENODEV;
    f07c:	f06f 0012 	mvn.w	r0, #18
    f080:	e7f2      	b.n	f068 <gpiote_pin_int_cfg+0x10c>
	if ((BIT(pin) & (data->active_level ^ data->inverted)) != 0) {
    f082:	6913      	ldr	r3, [r2, #16]
    f084:	69d2      	ldr	r2, [r2, #28]
    f086:	4053      	eors	r3, r2
    f088:	fa23 f101 	lsr.w	r1, r3, r1
		return NRF_GPIO_PIN_SENSE_HIGH;
    f08c:	f011 0f01 	tst.w	r1, #1
    f090:	bf14      	ite	ne
    f092:	f44f 3200 	movne.w	r2, #131072	; 0x20000
    f096:	f44f 3240 	moveq.w	r2, #196608	; 0x30000
    uint32_t cnf = reg->PIN_CNF[pin_number] & ~GPIO_PIN_CNF_SENSE_Msk;
    f09a:	f8d5 3200 	ldr.w	r3, [r5, #512]	; 0x200
    f09e:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
    reg->PIN_CNF[pin_number] = cnf | (sense_config << GPIO_PIN_CNF_SENSE_Pos);
    f0a2:	4313      	orrs	r3, r2
    f0a4:	f8c5 3200 	str.w	r3, [r5, #512]	; 0x200
    f0a8:	e7de      	b.n	f068 <gpiote_pin_int_cfg+0x10c>
    f0aa:	bf00      	nop
    f0ac:	40031000 	.word	0x40031000
    f0b0:	40842500 	.word	0x40842500

0000f0b4 <gpio_nrfx_config>:
{
    f0b4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    f0b8:	4680      	mov	r8, r0
	struct gpio_nrfx_data *data = get_port_data(port);
    f0ba:	6885      	ldr	r5, [r0, #8]
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK)) {
    f0bc:	f403 4070 	and.w	r0, r3, #61440	; 0xf000
    f0c0:	f5b0 4f80 	cmp.w	r0, #16384	; 0x4000
{
    f0c4:	461e      	mov	r6, r3
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK)) {
    f0c6:	d040      	beq.n	f14a <gpio_nrfx_config+0x96>
    f0c8:	dc09      	bgt.n	f0de <gpio_nrfx_config+0x2a>
    f0ca:	f5b0 5f80 	cmp.w	r0, #4096	; 0x1000
    f0ce:	d03e      	beq.n	f14e <gpio_nrfx_config+0x9a>
    f0d0:	f5b0 5f40 	cmp.w	r0, #12288	; 0x3000
    f0d4:	d03d      	beq.n	f152 <gpio_nrfx_config+0x9e>
    f0d6:	b190      	cbz	r0, f0fe <gpio_nrfx_config+0x4a>
		return -EINVAL;
    f0d8:	f06f 0015 	mvn.w	r0, #21
    f0dc:	e032      	b.n	f144 <gpio_nrfx_config+0x90>
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK)) {
    f0de:	f5b0 4fe0 	cmp.w	r0, #28672	; 0x7000
    f0e2:	d038      	beq.n	f156 <gpio_nrfx_config+0xa2>
    f0e4:	dc04      	bgt.n	f0f0 <gpio_nrfx_config+0x3c>
    f0e6:	f5b0 4fa0 	cmp.w	r0, #20480	; 0x5000
    f0ea:	d1f5      	bne.n	f0d8 <gpio_nrfx_config+0x24>
		drive = NRF_GPIO_PIN_H0H1;
    f0ec:	2003      	movs	r0, #3
    f0ee:	e006      	b.n	f0fe <gpio_nrfx_config+0x4a>
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK)) {
    f0f0:	f5b0 4f40 	cmp.w	r0, #49152	; 0xc000
    f0f4:	d031      	beq.n	f15a <gpio_nrfx_config+0xa6>
    f0f6:	f5b0 4f50 	cmp.w	r0, #53248	; 0xd000
    f0fa:	d1ed      	bne.n	f0d8 <gpio_nrfx_config+0x24>
		drive = NRF_GPIO_PIN_H0D1;
    f0fc:	2007      	movs	r0, #7
	if ((flags & GPIO_PUD_MASK) == GPIO_PUD_PULL_UP) {
    f0fe:	f406 7740 	and.w	r7, r6, #768	; 0x300
    f102:	f5b7 7f80 	cmp.w	r7, #256	; 0x100
    f106:	d02a      	beq.n	f15e <gpio_nrfx_config+0xaa>
		pull = NRF_GPIO_PIN_NOPULL;
    f108:	f5a7 7400 	sub.w	r4, r7, #512	; 0x200
    f10c:	4263      	negs	r3, r4
    f10e:	4163      	adcs	r3, r4
	if (access_op == GPIO_ACCESS_BY_PORT) {
    f110:	2901      	cmp	r1, #1
		from_pin = pin;
    f112:	bf19      	ittee	ne
    f114:	b2d4      	uxtbne	r4, r2
		to_pin   = pin;
    f116:	46a1      	movne	r9, r4
		to_pin   = 31U;
    f118:	f04f 091f 	moveq.w	r9, #31
		from_pin = 0U;
    f11c:	2400      	moveq	r4, #0
    f11e:	f04f 0b01 	mov.w	fp, #1
	dir = ((flags & GPIO_DIR_MASK) == GPIO_DIR_OUT)
    f122:	f006 0c01 	and.w	ip, r6, #1
                               | ((uint32_t)input << GPIO_PIN_CNF_INPUT_Pos)
    f126:	ea4f 074c 	mov.w	r7, ip, lsl #1
                               | ((uint32_t)drive << GPIO_PIN_CNF_DRIVE_Pos)
    f12a:	ea47 070c 	orr.w	r7, r7, ip
    f12e:	ea47 2000 	orr.w	r0, r7, r0, lsl #8
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
    f132:	f8df a0a0 	ldr.w	sl, [pc, #160]	; f1d4 <gpio_nrfx_config+0x120>
                               | ((uint32_t)drive << GPIO_PIN_CNF_DRIVE_Pos)
    f136:	ea40 0783 	orr.w	r7, r0, r3, lsl #2
		WRITE_BIT(data->pin_int_en, curr_pin, flags & GPIO_INT);
    f13a:	f006 0302 	and.w	r3, r6, #2
	for (u8_t curr_pin = from_pin; curr_pin <= to_pin; ++curr_pin) {
    f13e:	45a1      	cmp	r9, r4
    f140:	d20f      	bcs.n	f162 <gpio_nrfx_config+0xae>
	return 0;
    f142:	2000      	movs	r0, #0
}
    f144:	b003      	add	sp, #12
    f146:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		drive = NRF_GPIO_PIN_S0H1;
    f14a:	2002      	movs	r0, #2
    f14c:	e7d7      	b.n	f0fe <gpio_nrfx_config+0x4a>
		drive = NRF_GPIO_PIN_H0S1;
    f14e:	2001      	movs	r0, #1
    f150:	e7d5      	b.n	f0fe <gpio_nrfx_config+0x4a>
		drive = NRF_GPIO_PIN_D0S1;
    f152:	2004      	movs	r0, #4
    f154:	e7d3      	b.n	f0fe <gpio_nrfx_config+0x4a>
		drive = NRF_GPIO_PIN_D0H1;
    f156:	2005      	movs	r0, #5
    f158:	e7d1      	b.n	f0fe <gpio_nrfx_config+0x4a>
		drive = NRF_GPIO_PIN_S0D1;
    f15a:	2006      	movs	r0, #6
    f15c:	e7cf      	b.n	f0fe <gpio_nrfx_config+0x4a>
		pull = NRF_GPIO_PIN_PULLUP;
    f15e:	2303      	movs	r3, #3
    f160:	e7d6      	b.n	f110 <gpio_nrfx_config+0x5c>
	return port->config->config_info;
    f162:	f8d8 2000 	ldr.w	r2, [r8]
		nrf_gpio_cfg(NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num,
    f166:	6912      	ldr	r2, [r2, #16]
    f168:	7911      	ldrb	r1, [r2, #4]
    f16a:	f004 021f 	and.w	r2, r4, #31
    f16e:	ea42 1241 	orr.w	r2, r2, r1, lsl #5
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
    f172:	3280      	adds	r2, #128	; 0x80
    f174:	f84a 7022 	str.w	r7, [sl, r2, lsl #2]
		WRITE_BIT(data->pin_int_en, curr_pin, flags & GPIO_INT);
    f178:	68a9      	ldr	r1, [r5, #8]
    f17a:	fa0b f204 	lsl.w	r2, fp, r4
    f17e:	2b00      	cmp	r3, #0
    f180:	d025      	beq.n	f1ce <gpio_nrfx_config+0x11a>
    f182:	4311      	orrs	r1, r2
    f184:	60a9      	str	r1, [r5, #8]
		WRITE_BIT(data->trig_edge, curr_pin, flags & GPIO_INT_EDGE);
    f186:	6969      	ldr	r1, [r5, #20]
    f188:	06b0      	lsls	r0, r6, #26
    f18a:	bf4c      	ite	mi
    f18c:	4311      	orrmi	r1, r2
    f18e:	4391      	bicpl	r1, r2
    f190:	6169      	str	r1, [r5, #20]
		WRITE_BIT(data->double_edge, curr_pin,
    f192:	69a9      	ldr	r1, [r5, #24]
    f194:	0670      	lsls	r0, r6, #25
    f196:	bf4c      	ite	mi
    f198:	4311      	orrmi	r1, r2
    f19a:	4391      	bicpl	r1, r2
    f19c:	61a9      	str	r1, [r5, #24]
		WRITE_BIT(data->active_level, curr_pin,
    f19e:	6929      	ldr	r1, [r5, #16]
    f1a0:	0770      	lsls	r0, r6, #29
    f1a2:	bf4c      	ite	mi
    f1a4:	4311      	orrmi	r1, r2
    f1a6:	4391      	bicpl	r1, r2
    f1a8:	6129      	str	r1, [r5, #16]
		WRITE_BIT(data->inverted, curr_pin, flags & GPIO_POL_INV);
    f1aa:	69e9      	ldr	r1, [r5, #28]
    f1ac:	0630      	lsls	r0, r6, #24
    f1ae:	bf4c      	ite	mi
    f1b0:	430a      	orrmi	r2, r1
    f1b2:	ea21 0202 	bicpl.w	r2, r1, r2
    f1b6:	61ea      	str	r2, [r5, #28]
		res = gpiote_pin_int_cfg(port, curr_pin);
    f1b8:	4621      	mov	r1, r4
    f1ba:	4640      	mov	r0, r8
    f1bc:	9301      	str	r3, [sp, #4]
    f1be:	f7ff fecd 	bl	ef5c <gpiote_pin_int_cfg>
		if (res != 0) {
    f1c2:	2800      	cmp	r0, #0
    f1c4:	d1be      	bne.n	f144 <gpio_nrfx_config+0x90>
	for (u8_t curr_pin = from_pin; curr_pin <= to_pin; ++curr_pin) {
    f1c6:	3401      	adds	r4, #1
    f1c8:	b2e4      	uxtb	r4, r4
    f1ca:	9b01      	ldr	r3, [sp, #4]
    f1cc:	e7b7      	b.n	f13e <gpio_nrfx_config+0x8a>
		WRITE_BIT(data->pin_int_en, curr_pin, flags & GPIO_INT);
    f1ce:	ea21 0102 	bic.w	r1, r1, r2
    f1d2:	e7d7      	b.n	f184 <gpio_nrfx_config+0xd0>
    f1d4:	40842500 	.word	0x40842500

0000f1d8 <gpiote_event_handler>:
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    f1d8:	494f      	ldr	r1, [pc, #316]	; (f318 <gpiote_event_handler+0x140>)
{
    f1da:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    f1de:	680d      	ldr	r5, [r1, #0]
	if (port_event) {
    f1e0:	2d00      	cmp	r5, #0
    f1e2:	d060      	beq.n	f2a6 <gpiote_event_handler+0xce>
	struct gpio_nrfx_data *data = get_port_data(port);
    f1e4:	4b4d      	ldr	r3, [pc, #308]	; (f31c <gpiote_event_handler+0x144>)
	u32_t pin = 0U;
    f1e6:	2600      	movs	r6, #0
	struct gpio_nrfx_data *data = get_port_data(port);
    f1e8:	689a      	ldr	r2, [r3, #8]
	return port->config->config_info;
    f1ea:	681b      	ldr	r3, [r3, #0]
    f1ec:	f8df e138 	ldr.w	lr, [pc, #312]	; f328 <gpiote_event_handler+0x150>
    f1f0:	691f      	ldr	r7, [r3, #16]
	u32_t out = data->int_en & data->pin_int_en;
    f1f2:	e9d2 0302 	ldrd	r0, r3, [r2, #8]
    f1f6:	4003      	ands	r3, r0
	out &= ~data->trig_edge & ~data->double_edge;
    f1f8:	e9d2 0405 	ldrd	r0, r4, [r2, #20]
    f1fc:	4320      	orrs	r0, r4
    f1fe:	ea23 0300 	bic.w	r3, r3, r0
	u32_t port_in = nrf_gpio_port_in_read(cfg->port);
    f202:	6838      	ldr	r0, [r7, #0]
	u32_t pin_states = ~(port_in ^ data->inverted ^ data->active_level);
    f204:	69d4      	ldr	r4, [r2, #28]
    f206:	6912      	ldr	r2, [r2, #16]
}


NRF_STATIC_INLINE uint32_t nrf_gpio_port_in_read(NRF_GPIO_Type const * p_reg)
{
    return p_reg->IN;
    f208:	6900      	ldr	r0, [r0, #16]
    f20a:	4054      	eors	r4, r2
    f20c:	4044      	eors	r4, r0
	u32_t bit = 1U << pin;
    f20e:	2001      	movs	r0, #1
	u32_t out = pin_states & level_pins;
    f210:	ea23 0404 	bic.w	r4, r3, r4
	while (level_pins) {
    f214:	bb93      	cbnz	r3, f27c <gpiote_event_handler+0xa4>
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    f216:	600b      	str	r3, [r1, #0]
	u32_t fired_triggers[GPIO_COUNT] = {0};
    f218:	2300      	movs	r3, #0
		if (nrf_gpiote_int_enable_check(NRF_GPIOTE, BIT(i)) &&
    f21a:	2001      	movs	r0, #1
    f21c:	461f      	mov	r7, r3
    return p_reg->INTENSET & mask;
    f21e:	4940      	ldr	r1, [pc, #256]	; (f320 <gpiote_event_handler+0x148>)
    f220:	4e40      	ldr	r6, [pc, #256]	; (f324 <gpiote_event_handler+0x14c>)
    f222:	f8d1 2304 	ldr.w	r2, [r1, #772]	; 0x304
    f226:	fa00 fc03 	lsl.w	ip, r0, r3
    f22a:	ea1c 0f02 	tst.w	ip, r2
    f22e:	d00d      	beq.n	f24c <gpiote_event_handler+0x74>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    f230:	f856 2023 	ldr.w	r2, [r6, r3, lsl #2]
    f234:	b152      	cbz	r2, f24c <gpiote_event_handler+0x74>
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
    f236:	f503 72a2 	add.w	r2, r3, #324	; 0x144
    f23a:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    f23e:	f846 7023 	str.w	r7, [r6, r3, lsl #2]
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
    f242:	f3c2 2204 	ubfx	r2, r2, #8, #5
			fired_triggers[abs_pin / 32U] |= BIT(abs_pin % 32);
    f246:	fa00 f202 	lsl.w	r2, r0, r2
    f24a:	4314      	orrs	r4, r2
	for (size_t i = 0; i < GPIOTE_CH_NUM; i++) {
    f24c:	3301      	adds	r3, #1
    f24e:	2b08      	cmp	r3, #8
    f250:	d1e7      	bne.n	f222 <gpiote_event_handler+0x4a>
	if (fired_triggers[0]) {
    f252:	bb54      	cbnz	r4, f2aa <gpiote_event_handler+0xd2>
	if (port_event) {
    f254:	b185      	cbz	r5, f278 <gpiote_event_handler+0xa0>
	u32_t bit = 1U << pin;
    f256:	2401      	movs	r4, #1
	u32_t pin = 0U;
    f258:	2500      	movs	r5, #0
	const struct gpio_nrfx_data *data = get_port_data(port);
    f25a:	4b30      	ldr	r3, [pc, #192]	; (f31c <gpiote_event_handler+0x144>)
    f25c:	f8df c0c8 	ldr.w	ip, [pc, #200]	; f328 <gpiote_event_handler+0x150>
    f260:	689a      	ldr	r2, [r3, #8]
	return port->config->config_info;
    f262:	681b      	ldr	r3, [r3, #0]
    f264:	691e      	ldr	r6, [r3, #16]
	u32_t out = data->int_en & data->pin_int_en;
    f266:	e9d2 1302 	ldrd	r1, r3, [r2, #8]
    f26a:	400b      	ands	r3, r1
	out &= ~data->trig_edge & ~data->double_edge;
    f26c:	e9d2 1005 	ldrd	r1, r0, [r2, #20]
    f270:	4301      	orrs	r1, r0
    f272:	ea23 0301 	bic.w	r3, r3, r1
	while (level_pins) {
    f276:	bb7b      	cbnz	r3, f2d8 <gpiote_event_handler+0x100>
}
    f278:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (level_pins & bit) {
    f27c:	4203      	tst	r3, r0
    f27e:	d00f      	beq.n	f2a0 <gpiote_event_handler+0xc8>
			u32_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
    f280:	f897 c004 	ldrb.w	ip, [r7, #4]
    f284:	f006 021f 	and.w	r2, r6, #31
    f288:	ea42 124c 	orr.w	r2, r2, ip, lsl #5
    f28c:	eb0e 0282 	add.w	r2, lr, r2, lsl #2
    uint32_t cnf = reg->PIN_CNF[pin_number] & ~GPIO_PIN_CNF_SENSE_Msk;
    f290:	f8d2 c200 	ldr.w	ip, [r2, #512]	; 0x200
			level_pins &= ~bit;
    f294:	ea23 0300 	bic.w	r3, r3, r0
    f298:	f42c 3c40 	bic.w	ip, ip, #196608	; 0x30000
    reg->PIN_CNF[pin_number] = cnf | (sense_config << GPIO_PIN_CNF_SENSE_Pos);
    f29c:	f8c2 c200 	str.w	ip, [r2, #512]	; 0x200
		++pin;
    f2a0:	3601      	adds	r6, #1
		bit <<= 1;
    f2a2:	0040      	lsls	r0, r0, #1
    f2a4:	e7b6      	b.n	f214 <gpiote_event_handler+0x3c>
	u32_t fired_triggers[GPIO_COUNT] = {0};
    f2a6:	462c      	mov	r4, r5
    f2a8:	e7b6      	b.n	f218 <gpiote_event_handler+0x40>
	struct gpio_nrfx_data *data = get_port_data(port);
    f2aa:	4f1c      	ldr	r7, [pc, #112]	; (f31c <gpiote_event_handler+0x144>)
    f2ac:	f8d7 8008 	ldr.w	r8, [r7, #8]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
    f2b0:	f8d8 1000 	ldr.w	r1, [r8]
    f2b4:	2900      	cmp	r1, #0
    f2b6:	d0cd      	beq.n	f254 <gpiote_event_handler+0x7c>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
    f2b8:	680e      	ldr	r6, [r1, #0]
		if ((cb->pin_mask & pins) & data->int_en) {
    f2ba:	f8d8 300c 	ldr.w	r3, [r8, #12]
    f2be:	688a      	ldr	r2, [r1, #8]
    f2c0:	4023      	ands	r3, r4
    f2c2:	4213      	tst	r3, r2
    f2c4:	d003      	beq.n	f2ce <gpiote_event_handler+0xf6>
			cb->handler(port, cb, pins);
    f2c6:	684b      	ldr	r3, [r1, #4]
    f2c8:	4622      	mov	r2, r4
    f2ca:	4638      	mov	r0, r7
    f2cc:	4798      	blx	r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
    f2ce:	2e00      	cmp	r6, #0
    f2d0:	d0c0      	beq.n	f254 <gpiote_event_handler+0x7c>
    f2d2:	4631      	mov	r1, r6
    f2d4:	6836      	ldr	r6, [r6, #0]
    f2d6:	e7f0      	b.n	f2ba <gpiote_event_handler+0xe2>
		if (level_pins & bit) {
    f2d8:	421c      	tst	r4, r3
    f2da:	d01a      	beq.n	f312 <gpiote_event_handler+0x13a>
			u32_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
    f2dc:	7930      	ldrb	r0, [r6, #4]
    f2de:	f005 011f 	and.w	r1, r5, #31
	if ((BIT(pin) & (data->active_level ^ data->inverted)) != 0) {
    f2e2:	69d7      	ldr	r7, [r2, #28]
			u32_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
    f2e4:	ea41 1140 	orr.w	r1, r1, r0, lsl #5
	if ((BIT(pin) & (data->active_level ^ data->inverted)) != 0) {
    f2e8:	6910      	ldr	r0, [r2, #16]
    f2ea:	eb0c 0181 	add.w	r1, ip, r1, lsl #2
    f2ee:	4078      	eors	r0, r7
    f2f0:	40e8      	lsrs	r0, r5
		return NRF_GPIO_PIN_SENSE_HIGH;
    f2f2:	f010 0f01 	tst.w	r0, #1
    f2f6:	bf14      	ite	ne
    f2f8:	f44f 3700 	movne.w	r7, #131072	; 0x20000
    f2fc:	f44f 3740 	moveq.w	r7, #196608	; 0x30000
    uint32_t cnf = reg->PIN_CNF[pin_number] & ~GPIO_PIN_CNF_SENSE_Msk;
    f300:	f8d1 0200 	ldr.w	r0, [r1, #512]	; 0x200
			level_pins &= ~bit;
    f304:	ea23 0304 	bic.w	r3, r3, r4
    f308:	f420 3040 	bic.w	r0, r0, #196608	; 0x30000
    reg->PIN_CNF[pin_number] = cnf | (sense_config << GPIO_PIN_CNF_SENSE_Pos);
    f30c:	4338      	orrs	r0, r7
    f30e:	f8c1 0200 	str.w	r0, [r1, #512]	; 0x200
		++pin;
    f312:	3501      	adds	r5, #1
		bit <<= 1;
    f314:	0064      	lsls	r4, r4, #1
    f316:	e7ae      	b.n	f276 <gpiote_event_handler+0x9e>
    f318:	4003117c 	.word	0x4003117c
    f31c:	20028144 	.word	0x20028144
    f320:	40031000 	.word	0x40031000
    f324:	40031100 	.word	0x40031100
    f328:	40842500 	.word	0x40842500

0000f32c <uarte_nrfx_configure>:
	return 0;
}

static int uarte_nrfx_configure(struct device *dev,
				const struct uart_config *cfg)
{
    f32c:	b5f0      	push	{r4, r5, r6, r7, lr}
	nrf_uarte_config_t uarte_cfg;

#if defined(UARTE_CONFIG_STOP_Msk)
	switch (cfg->stop_bits) {
    f32e:	794b      	ldrb	r3, [r1, #5]
    f330:	2b01      	cmp	r3, #1
    f332:	d029      	beq.n	f388 <uarte_nrfx_configure+0x5c>
    f334:	2b03      	cmp	r3, #3
    f336:	d124      	bne.n	f382 <uarte_nrfx_configure+0x56>
	case UART_CFG_STOP_BITS_1:
		uarte_cfg.stop = NRF_UARTE_STOP_ONE;
		break;
	case UART_CFG_STOP_BITS_2:
		uarte_cfg.stop = NRF_UARTE_STOP_TWO;
    f338:	2610      	movs	r6, #16
	if (cfg->stop_bits != UART_CFG_STOP_BITS_1) {
		return -ENOTSUP;
	}
#endif

	if (cfg->data_bits != UART_CFG_DATA_BITS_8) {
    f33a:	798b      	ldrb	r3, [r1, #6]
    f33c:	2b03      	cmp	r3, #3
    f33e:	d120      	bne.n	f382 <uarte_nrfx_configure+0x56>
		return -ENOTSUP;
	}

	switch (cfg->flow_ctrl) {
    f340:	79cc      	ldrb	r4, [r1, #7]
    f342:	b12c      	cbz	r4, f350 <uarte_nrfx_configure+0x24>
    f344:	2c01      	cmp	r4, #1
    f346:	d11c      	bne.n	f382 <uarte_nrfx_configure+0x56>
	return dev->config->config_info;
    f348:	6803      	ldr	r3, [r0, #0]
	case UART_CFG_FLOW_CTRL_NONE:
		uarte_cfg.hwfc = NRF_UARTE_HWFC_DISABLED;
		break;
	case UART_CFG_FLOW_CTRL_RTS_CTS:
		if (get_dev_config(dev)->rts_cts_pins_set) {
    f34a:	691b      	ldr	r3, [r3, #16]
    f34c:	791b      	ldrb	r3, [r3, #4]
    f34e:	b1c3      	cbz	r3, f382 <uarte_nrfx_configure+0x56>
	}

#if defined(UARTE_CONFIG_PARITYTYPE_Msk)
	uarte_cfg.paritytype = NRF_UARTE_PARITYTYPE_EVEN;
#endif
	switch (cfg->parity) {
    f350:	790a      	ldrb	r2, [r1, #4]
    f352:	b112      	cbz	r2, f35a <uarte_nrfx_configure+0x2e>
    f354:	2a02      	cmp	r2, #2
    f356:	d114      	bne.n	f382 <uarte_nrfx_configure+0x56>
	case UART_CFG_PARITY_NONE:
		uarte_cfg.parity = NRF_UARTE_PARITY_EXCLUDED;
		break;
	case UART_CFG_PARITY_EVEN:
		uarte_cfg.parity = NRF_UARTE_PARITY_INCLUDED;
    f358:	220e      	movs	r2, #14
	switch (baudrate) {
    f35a:	f647 2712 	movw	r7, #31250	; 0x7a12
	return dev->config->config_info;
    f35e:	6805      	ldr	r5, [r0, #0]
#endif
	default:
		return -ENOTSUP;
	}

	if (baudrate_set(dev, cfg->baudrate) != 0) {
    f360:	680b      	ldr	r3, [r1, #0]
	return config->uarte_regs;
    f362:	692d      	ldr	r5, [r5, #16]
	switch (baudrate) {
    f364:	42bb      	cmp	r3, r7
	return config->uarte_regs;
    f366:	682d      	ldr	r5, [r5, #0]
	switch (baudrate) {
    f368:	d062      	beq.n	f430 <uarte_nrfx_configure+0x104>
    f36a:	d829      	bhi.n	f3c0 <uarte_nrfx_configure+0x94>
    f36c:	f5b3 5f96 	cmp.w	r3, #4800	; 0x12c0
    f370:	d061      	beq.n	f436 <uarte_nrfx_configure+0x10a>
    f372:	d814      	bhi.n	f39e <uarte_nrfx_configure+0x72>
    f374:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
    f378:	d05f      	beq.n	f43a <uarte_nrfx_configure+0x10e>
    f37a:	d807      	bhi.n	f38c <uarte_nrfx_configure+0x60>
    f37c:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
    f380:	d05e      	beq.n	f440 <uarte_nrfx_configure+0x114>
		return -ENOTSUP;
    f382:	f06f 0022 	mvn.w	r0, #34	; 0x22
    f386:	e052      	b.n	f42e <uarte_nrfx_configure+0x102>
		uarte_cfg.stop = NRF_UARTE_STOP_ONE;
    f388:	2600      	movs	r6, #0
    f38a:	e7d6      	b.n	f33a <uarte_nrfx_configure+0xe>
	switch (baudrate) {
    f38c:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
    f390:	d059      	beq.n	f446 <uarte_nrfx_configure+0x11a>
    f392:	f5b3 6f16 	cmp.w	r3, #2400	; 0x960
    f396:	d1f4      	bne.n	f382 <uarte_nrfx_configure+0x56>
		nrf_baudrate = NRF_UARTE_BAUDRATE_2400;
    f398:	f44f 231d 	mov.w	r3, #643072	; 0x9d000
    f39c:	e03c      	b.n	f418 <uarte_nrfx_configure+0xec>
	switch (baudrate) {
    f39e:	f5b3 5f61 	cmp.w	r3, #14400	; 0x3840
    f3a2:	d053      	beq.n	f44c <uarte_nrfx_configure+0x120>
    f3a4:	d804      	bhi.n	f3b0 <uarte_nrfx_configure+0x84>
    f3a6:	f5b3 5f16 	cmp.w	r3, #9600	; 0x2580
    f3aa:	d1ea      	bne.n	f382 <uarte_nrfx_configure+0x56>
		nrf_baudrate = NRF_UARTE_BAUDRATE_9600;
    f3ac:	4b32      	ldr	r3, [pc, #200]	; (f478 <uarte_nrfx_configure+0x14c>)
    f3ae:	e033      	b.n	f418 <uarte_nrfx_configure+0xec>
	switch (baudrate) {
    f3b0:	f5b3 4f96 	cmp.w	r3, #19200	; 0x4b00
    f3b4:	d04c      	beq.n	f450 <uarte_nrfx_configure+0x124>
    f3b6:	f5b3 4fe1 	cmp.w	r3, #28800	; 0x7080
    f3ba:	d1e2      	bne.n	f382 <uarte_nrfx_configure+0x56>
		nrf_baudrate = NRF_UARTE_BAUDRATE_28800;
    f3bc:	4b2f      	ldr	r3, [pc, #188]	; (f47c <uarte_nrfx_configure+0x150>)
    f3be:	e02b      	b.n	f418 <uarte_nrfx_configure+0xec>
	switch (baudrate) {
    f3c0:	f5b3 3fe1 	cmp.w	r3, #115200	; 0x1c200
    f3c4:	d046      	beq.n	f454 <uarte_nrfx_configure+0x128>
    f3c6:	d812      	bhi.n	f3ee <uarte_nrfx_configure+0xc2>
    f3c8:	f64d 27c0 	movw	r7, #56000	; 0xdac0
    f3cc:	42bb      	cmp	r3, r7
    f3ce:	d044      	beq.n	f45a <uarte_nrfx_configure+0x12e>
    f3d0:	d805      	bhi.n	f3de <uarte_nrfx_configure+0xb2>
    f3d2:	f5b3 4f16 	cmp.w	r3, #38400	; 0x9600
    f3d6:	d1d4      	bne.n	f382 <uarte_nrfx_configure+0x56>
		nrf_baudrate = NRF_UARTE_BAUDRATE_38400;
    f3d8:	f44f 031d 	mov.w	r3, #10289152	; 0x9d0000
    f3dc:	e01c      	b.n	f418 <uarte_nrfx_configure+0xec>
	switch (baudrate) {
    f3de:	f5b3 4f61 	cmp.w	r3, #57600	; 0xe100
    f3e2:	d03d      	beq.n	f460 <uarte_nrfx_configure+0x134>
    f3e4:	f5b3 3f96 	cmp.w	r3, #76800	; 0x12c00
    f3e8:	d1cb      	bne.n	f382 <uarte_nrfx_configure+0x56>
		nrf_baudrate = NRF_UARTE_BAUDRATE_76800;
    f3ea:	4b25      	ldr	r3, [pc, #148]	; (f480 <uarte_nrfx_configure+0x154>)
    f3ec:	e014      	b.n	f418 <uarte_nrfx_configure+0xec>
	switch (baudrate) {
    f3ee:	f5b3 2fe1 	cmp.w	r3, #460800	; 0x70800
    f3f2:	d038      	beq.n	f466 <uarte_nrfx_configure+0x13a>
    f3f4:	d808      	bhi.n	f408 <uarte_nrfx_configure+0xdc>
    f3f6:	f5b3 3f61 	cmp.w	r3, #230400	; 0x38400
    f3fa:	d037      	beq.n	f46c <uarte_nrfx_configure+0x140>
    f3fc:	4f21      	ldr	r7, [pc, #132]	; (f484 <uarte_nrfx_configure+0x158>)
    f3fe:	42bb      	cmp	r3, r7
    f400:	d1bf      	bne.n	f382 <uarte_nrfx_configure+0x56>
		nrf_baudrate = NRF_UARTE_BAUDRATE_250000;
    f402:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
    f406:	e007      	b.n	f418 <uarte_nrfx_configure+0xec>
	switch (baudrate) {
    f408:	f5b3 2f61 	cmp.w	r3, #921600	; 0xe1000
    f40c:	d031      	beq.n	f472 <uarte_nrfx_configure+0x146>
    f40e:	4f1e      	ldr	r7, [pc, #120]	; (f488 <uarte_nrfx_configure+0x15c>)
    f410:	42bb      	cmp	r3, r7
    f412:	d1b6      	bne.n	f382 <uarte_nrfx_configure+0x56>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1000000;
    f414:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
                    | (uint32_t)p_cfg->hwfc;
}

NRF_STATIC_INLINE void nrf_uarte_baudrate_set(NRF_UARTE_Type * p_reg, nrf_uarte_baudrate_t baudrate)
{
    p_reg->BAUDRATE = baudrate;
    f418:	f8c5 3524 	str.w	r3, [r5, #1316]	; 0x524
                    | (uint32_t)p_cfg->hwfc;
    f41c:	4334      	orrs	r4, r6
		return -ENOTSUP;
	}

	nrf_uarte_configure(get_uarte_instance(dev), &uarte_cfg);

	get_dev_data(dev)->uart_config = *cfg;
    f41e:	6883      	ldr	r3, [r0, #8]
    f420:	4322      	orrs	r2, r4
    f422:	c903      	ldmia	r1, {r0, r1}
    p_reg->CONFIG = (uint32_t)p_cfg->parity
    f424:	f8c5 256c 	str.w	r2, [r5, #1388]	; 0x56c
    f428:	e883 0003 	stmia.w	r3, {r0, r1}

	return 0;
    f42c:	2000      	movs	r0, #0
}
    f42e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		nrf_baudrate = NRF_UARTE_BAUDRATE_31250;
    f430:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
    f434:	e7f0      	b.n	f418 <uarte_nrfx_configure+0xec>
		nrf_baudrate = NRF_UARTE_BAUDRATE_4800;
    f436:	4b15      	ldr	r3, [pc, #84]	; (f48c <uarte_nrfx_configure+0x160>)
    f438:	e7ee      	b.n	f418 <uarte_nrfx_configure+0xec>
		nrf_baudrate = 0x00027000;
    f43a:	f44f 331c 	mov.w	r3, #159744	; 0x27000
    f43e:	e7eb      	b.n	f418 <uarte_nrfx_configure+0xec>
		nrf_baudrate = 0x00014000;
    f440:	f44f 33a0 	mov.w	r3, #81920	; 0x14000
    f444:	e7e8      	b.n	f418 <uarte_nrfx_configure+0xec>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1200;
    f446:	f44f 239e 	mov.w	r3, #323584	; 0x4f000
    f44a:	e7e5      	b.n	f418 <uarte_nrfx_configure+0xec>
		nrf_baudrate = NRF_UARTE_BAUDRATE_14400;
    f44c:	4b10      	ldr	r3, [pc, #64]	; (f490 <uarte_nrfx_configure+0x164>)
    f44e:	e7e3      	b.n	f418 <uarte_nrfx_configure+0xec>
		nrf_baudrate = NRF_UARTE_BAUDRATE_19200;
    f450:	4b10      	ldr	r3, [pc, #64]	; (f494 <uarte_nrfx_configure+0x168>)
    f452:	e7e1      	b.n	f418 <uarte_nrfx_configure+0xec>
		nrf_baudrate = NRF_UARTE_BAUDRATE_115200;
    f454:	f04f 73eb 	mov.w	r3, #30801920	; 0x1d60000
    f458:	e7de      	b.n	f418 <uarte_nrfx_configure+0xec>
		nrf_baudrate = NRF_UARTE_BAUDRATE_56000;
    f45a:	f44f 0365 	mov.w	r3, #15007744	; 0xe50000
    f45e:	e7db      	b.n	f418 <uarte_nrfx_configure+0xec>
		nrf_baudrate = NRF_UARTE_BAUDRATE_57600;
    f460:	f44f 036b 	mov.w	r3, #15400960	; 0xeb0000
    f464:	e7d8      	b.n	f418 <uarte_nrfx_configure+0xec>
		nrf_baudrate = NRF_UARTE_BAUDRATE_460800;
    f466:	f04f 63e8 	mov.w	r3, #121634816	; 0x7400000
    f46a:	e7d5      	b.n	f418 <uarte_nrfx_configure+0xec>
		nrf_baudrate = NRF_UARTE_BAUDRATE_230400;
    f46c:	f04f 736c 	mov.w	r3, #61865984	; 0x3b00000
    f470:	e7d2      	b.n	f418 <uarte_nrfx_configure+0xec>
		nrf_baudrate = NRF_UARTE_BAUDRATE_921600;
    f472:	f04f 6370 	mov.w	r3, #251658240	; 0xf000000
    f476:	e7cf      	b.n	f418 <uarte_nrfx_configure+0xec>
    f478:	00275000 	.word	0x00275000
    f47c:	0075c000 	.word	0x0075c000
    f480:	013a9000 	.word	0x013a9000
    f484:	0003d090 	.word	0x0003d090
    f488:	000f4240 	.word	0x000f4240
    f48c:	0013b000 	.word	0x0013b000
    f490:	003af000 	.word	0x003af000
    f494:	004ea000 	.word	0x004ea000

0000f498 <uarte_0_init>:
	#endif
	#if !defined(DT_NORDIC_NRF_UARTE_UART_0_RX_PIN)
	#define DT_NORDIC_NRF_UARTE_UART_0_RX_PIN NRF_UARTE_PSEL_DISCONNECTED
	#endif

	UART_NRF_UARTE_DEVICE(0);
    f498:	b570      	push	{r4, r5, r6, lr}
    f49a:	4606      	mov	r6, r0
    f49c:	2200      	movs	r2, #0
    f49e:	2101      	movs	r1, #1
    f4a0:	2008      	movs	r0, #8
    f4a2:	f7fe f9ff 	bl	d8a4 <z_arm_irq_priority_set>
    f4a6:	2008      	movs	r0, #8
    f4a8:	f7fe f9ec 	bl	d884 <arch_irq_enable>
}


NRF_STATIC_INLINE void nrf_gpio_port_out_set(NRF_GPIO_Type * p_reg, uint32_t set_mask)
{
    p_reg->OUTSET = set_mask;
    f4ac:	2280      	movs	r2, #128	; 0x80
	return dev->config->config_info;
    f4ae:	6833      	ldr	r3, [r6, #0]
	struct uarte_nrfx_data *data = get_dev_data(dev);
    f4b0:	68b5      	ldr	r5, [r6, #8]
	return config->uarte_regs;
    f4b2:	691b      	ldr	r3, [r3, #16]
	err = uarte_nrfx_configure(dev, &get_dev_data(dev)->uart_config);
    f4b4:	4629      	mov	r1, r5
	return config->uarte_regs;
    f4b6:	681c      	ldr	r4, [r3, #0]
    f4b8:	4b14      	ldr	r3, [pc, #80]	; (f50c <uarte_0_init+0x74>)
	err = uarte_nrfx_configure(dev, &get_dev_data(dev)->uart_config);
    f4ba:	4630      	mov	r0, r6
    f4bc:	609a      	str	r2, [r3, #8]
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
    f4be:	2203      	movs	r2, #3
    f4c0:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    f4c4:	2200      	movs	r2, #0
    f4c6:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270
    p_reg->PSEL.TXD = pseltxd;
    f4ca:	2307      	movs	r3, #7
    f4cc:	f8c4 350c 	str.w	r3, [r4, #1292]	; 0x50c
    p_reg->PSEL.RXD = pselrxd;
    f4d0:	231c      	movs	r3, #28
    f4d2:	f8c4 3514 	str.w	r3, [r4, #1300]	; 0x514
    f4d6:	f7ff ff29 	bl	f32c <uarte_nrfx_configure>
	if (err) {
    f4da:	b9a8      	cbnz	r0, f508 <uarte_0_init+0x70>
	data->pm_state = DEVICE_PM_ACTIVE_STATE;
    f4dc:	2301      	movs	r3, #1
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
    f4de:	2208      	movs	r2, #8
    f4e0:	60eb      	str	r3, [r5, #12]
    f4e2:	f8c4 2500 	str.w	r2, [r4, #1280]	; 0x500
		nrf_uarte_rx_buffer_set(uarte, &data->rx_data, 1);
    f4e6:	f105 0210 	add.w	r2, r5, #16
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    f4ea:	f8c4 0110 	str.w	r0, [r4, #272]	; 0x110

NRF_STATIC_INLINE void nrf_uarte_rx_buffer_set(NRF_UARTE_Type * p_reg,
                                               uint8_t *        p_buffer,
                                               size_t           length)
{
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
    f4ee:	f8c4 2534 	str.w	r2, [r4, #1332]	; 0x534
		nrf_uarte_tx_buffer_set(uarte, data->int_driven->tx_buffer, 0);
    f4f2:	68aa      	ldr	r2, [r5, #8]
    p_reg->RXD.MAXCNT = length;
    f4f4:	f8c4 3538 	str.w	r3, [r4, #1336]	; 0x538
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
    f4f8:	6892      	ldr	r2, [r2, #8]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    f4fa:	6023      	str	r3, [r4, #0]
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
    f4fc:	f8c4 2544 	str.w	r2, [r4, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
    f500:	f8c4 0548 	str.w	r0, [r4, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    f504:	60a3      	str	r3, [r4, #8]
    f506:	60e3      	str	r3, [r4, #12]
	UART_NRF_UARTE_DEVICE(0);
    f508:	bd70      	pop	{r4, r5, r6, pc}
    f50a:	bf00      	nop
    f50c:	40842500 	.word	0x40842500

0000f510 <uarte_nrfx_pm_control>:
	struct uarte_nrfx_data *data = get_dev_data(dev);
    f510:	f8d0 c008 	ldr.w	ip, [r0, #8]
	if (ctrl_command == DEVICE_PM_SET_POWER_STATE) {
    f514:	2901      	cmp	r1, #1
{
    f516:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    f51a:	461f      	mov	r7, r3
    f51c:	f8dc 500c 	ldr.w	r5, [ip, #12]
	if (ctrl_command == DEVICE_PM_SET_POWER_STATE) {
    f520:	d175      	bne.n	f60e <uarte_nrfx_pm_control+0xfe>
		u32_t new_state = *((const u32_t *)context);
    f522:	6816      	ldr	r6, [r2, #0]
		if (new_state != data->pm_state) {
    f524:	42ae      	cmp	r6, r5
    f526:	d039      	beq.n	f59c <uarte_nrfx_pm_control+0x8c>
	return dev->config->config_info;
    f528:	6803      	ldr	r3, [r0, #0]
	if (new_state == DEVICE_PM_ACTIVE_STATE) {
    f52a:	2e01      	cmp	r6, #1
	return dev->config->config_info;
    f52c:	691c      	ldr	r4, [r3, #16]
	return config->uarte_regs;
    f52e:	6823      	ldr	r3, [r4, #0]
	if (new_state == DEVICE_PM_ACTIVE_STATE) {
    f530:	d13b      	bne.n	f5aa <uarte_nrfx_pm_control+0x9a>
	if (!get_dev_config(dev)->gpio_mgmt) {
    f532:	7961      	ldrb	r1, [r4, #5]
    f534:	b359      	cbz	r1, f58e <uarte_nrfx_pm_control+0x7e>
    return p_reg->PSEL.TXD;
    f536:	f8d3 150c 	ldr.w	r1, [r3, #1292]	; 0x50c
    p_reg->OUTSET = set_mask;
    f53a:	f8df a0d8 	ldr.w	sl, [pc, #216]	; f614 <uarte_nrfx_pm_control+0x104>
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
    f53e:	fa06 f901 	lsl.w	r9, r6, r1
    return p_reg->PSEL.RXD;
    f542:	f8d3 e514 	ldr.w	lr, [r3, #1300]	; 0x514
    return p_reg->PSEL.CTS;
    f546:	f8d3 8510 	ldr.w	r8, [r3, #1296]	; 0x510
    return p_reg->PSEL.RTS;
    f54a:	f8d3 5508 	ldr.w	r5, [r3, #1288]	; 0x508
    p_reg->OUTSET = set_mask;
    f54e:	f8ca 9008 	str.w	r9, [sl, #8]
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
    f552:	f101 0980 	add.w	r9, r1, #128	; 0x80
    f556:	2103      	movs	r1, #3
		if (rx_pin != NRF_UARTE_PSEL_DISCONNECTED) {
    f558:	f1be 3fff 	cmp.w	lr, #4294967295
    f55c:	f84a 1029 	str.w	r1, [sl, r9, lsl #2]
    f560:	bf18      	it	ne
    f562:	f04f 0900 	movne.w	r9, #0
		if (get_dev_config(dev)->rts_cts_pins_set) {
    f566:	7924      	ldrb	r4, [r4, #4]
    f568:	bf1c      	itt	ne
    f56a:	f10e 0e80 	addne.w	lr, lr, #128	; 0x80
    f56e:	f84a 902e 	strne.w	r9, [sl, lr, lsl #2]
    f572:	b164      	cbz	r4, f58e <uarte_nrfx_pm_control+0x7e>
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
    f574:	2401      	movs	r4, #1
    f576:	40ac      	lsls	r4, r5
    p_reg->OUTSET = set_mask;
    f578:	f8ca 4008 	str.w	r4, [sl, #8]
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
    f57c:	2403      	movs	r4, #3
    f57e:	3580      	adds	r5, #128	; 0x80
    f580:	f84a 4025 	str.w	r4, [sl, r5, lsl #2]
    f584:	2400      	movs	r4, #0
    f586:	f108 0880 	add.w	r8, r8, #128	; 0x80
    f58a:	f84a 4028 	str.w	r4, [sl, r8, lsl #2]
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
    f58e:	2108      	movs	r1, #8
    f590:	f8c3 1500 	str.w	r1, [r3, #1280]	; 0x500
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    f594:	2101      	movs	r1, #1
    f596:	6019      	str	r1, [r3, #0]
			data->pm_state = new_state;
    f598:	f8cc 600c 	str.w	r6, [ip, #12]
	if (cb) {
    f59c:	b117      	cbz	r7, f5a4 <uarte_nrfx_pm_control+0x94>
		cb(dev, 0, context, arg);
    f59e:	9b08      	ldr	r3, [sp, #32]
    f5a0:	2100      	movs	r1, #0
    f5a2:	47b8      	blx	r7
}
    f5a4:	2000      	movs	r0, #0
    f5a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		if (data->pm_state != DEVICE_PM_ACTIVE_STATE) {
    f5aa:	2d01      	cmp	r5, #1
    f5ac:	d1f4      	bne.n	f598 <uarte_nrfx_pm_control+0x88>
    f5ae:	605d      	str	r5, [r3, #4]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    f5b0:	f8d3 1144 	ldr.w	r1, [r3, #324]	; 0x144
		while (!nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_RXTO)) {
    f5b4:	2900      	cmp	r1, #0
    f5b6:	d0fb      	beq.n	f5b0 <uarte_nrfx_pm_control+0xa0>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    f5b8:	2100      	movs	r1, #0
    f5ba:	f8c3 1144 	str.w	r1, [r3, #324]	; 0x144
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
    f5be:	f8c3 1500 	str.w	r1, [r3, #1280]	; 0x500
	if (!get_dev_config(dev)->gpio_mgmt) {
    f5c2:	7961      	ldrb	r1, [r4, #5]
    f5c4:	2900      	cmp	r1, #0
    f5c6:	d0e7      	beq.n	f598 <uarte_nrfx_pm_control+0x88>
    f5c8:	f04f 0902 	mov.w	r9, #2
    return p_reg->PSEL.TXD;
    f5cc:	f8d3 850c 	ldr.w	r8, [r3, #1292]	; 0x50c
    return p_reg->PSEL.RXD;
    f5d0:	f8d3 1514 	ldr.w	r1, [r3, #1300]	; 0x514
    return p_reg->PSEL.CTS;
    f5d4:	f8d3 e510 	ldr.w	lr, [r3, #1296]	; 0x510
		if (rx_pin != NRF_UARTE_PSEL_DISCONNECTED) {
    f5d8:	f1b1 3fff 	cmp.w	r1, #4294967295
    return p_reg->PSEL.RTS;
    f5dc:	f8d3 5508 	ldr.w	r5, [r3, #1288]	; 0x508
    f5e0:	4b0c      	ldr	r3, [pc, #48]	; (f614 <uarte_nrfx_pm_control+0x104>)
    f5e2:	bf18      	it	ne
    f5e4:	3180      	addne	r1, #128	; 0x80
    f5e6:	f108 0880 	add.w	r8, r8, #128	; 0x80
    f5ea:	f843 9028 	str.w	r9, [r3, r8, lsl #2]
    f5ee:	bf18      	it	ne
    f5f0:	f843 9021 	strne.w	r9, [r3, r1, lsl #2]
		if (get_dev_config(dev)->rts_cts_pins_set) {
    f5f4:	7921      	ldrb	r1, [r4, #4]
    f5f6:	2900      	cmp	r1, #0
    f5f8:	d0ce      	beq.n	f598 <uarte_nrfx_pm_control+0x88>
    f5fa:	2402      	movs	r4, #2
    f5fc:	f10e 0180 	add.w	r1, lr, #128	; 0x80
    f600:	f843 4021 	str.w	r4, [r3, r1, lsl #2]
    f604:	f105 0180 	add.w	r1, r5, #128	; 0x80
    f608:	f843 4021 	str.w	r4, [r3, r1, lsl #2]
    f60c:	e7c4      	b.n	f598 <uarte_nrfx_pm_control+0x88>
		*((u32_t *)context) = data->pm_state;
    f60e:	6015      	str	r5, [r2, #0]
    f610:	e7c4      	b.n	f59c <uarte_nrfx_pm_control+0x8c>
    f612:	bf00      	nop
    f614:	40842500 	.word	0x40842500

0000f618 <_bsdlib_init>:
static int _bsdlib_init(struct device *unused)
{
	/* Setup the network IRQ used by the BSD library.
	 * Note: No call to irq_enable() here, that is done through bsd_init().
	 */
	IRQ_DIRECT_CONNECT(BSD_NETWORK_IRQ, BSD_NETWORK_IRQ_PRIORITY,
    f618:	2200      	movs	r2, #0
{
    f61a:	b508      	push	{r3, lr}
	IRQ_DIRECT_CONNECT(BSD_NETWORK_IRQ, BSD_NETWORK_IRQ_PRIORITY,
    f61c:	4611      	mov	r1, r2
    f61e:	202a      	movs	r0, #42	; 0x2a
    f620:	f7fe f940 	bl	d8a4 <z_arm_irq_priority_set>
			   ipc_proxy_irq_handler, 0);

	init_ret = bsd_init();
    f624:	f002 fc8a 	bl	11f3c <bsd_init>
    f628:	4b01      	ldr	r3, [pc, #4]	; (f630 <_bsdlib_init+0x18>)
    f62a:	6018      	str	r0, [r3, #0]
		 */
		return 0;
	}

	return init_ret;
}
    f62c:	2000      	movs	r0, #0
    f62e:	bd08      	pop	{r3, pc}
    f630:	20020298 	.word	0x20020298

0000f634 <thread_monitor_entry_get>:

/* Get thread monitor structure assigned to a specific thread id, with a RPC
 * counter value at which bsdlib last checked the 'readiness' of a thread
 */
static struct thread_monitor_entry *thread_monitor_entry_get(k_tid_t id)
{
    f634:	b570      	push	{r4, r5, r6, lr}
			new_entry = entry;
			break;
		}

		/* Identify oldest entry. */
		entry_age = rpc_event_cnt - entry->cnt;
    f636:	4b0d      	ldr	r3, [pc, #52]	; (f66c <thread_monitor_entry_get+0x38>)
	struct thread_monitor_entry *new_entry = thread_event_monitor;
    f638:	4c0d      	ldr	r4, [pc, #52]	; (f670 <thread_monitor_entry_get+0x3c>)
		entry_age = rpc_event_cnt - entry->cnt;
    f63a:	681a      	ldr	r2, [r3, #0]
    f63c:	250a      	movs	r5, #10
	int entry_age, oldest_entry_age = 0;
    f63e:	2600      	movs	r6, #0
	struct thread_monitor_entry *entry = thread_event_monitor;
    f640:	4623      	mov	r3, r4
		if (entry->id == id) {
    f642:	6819      	ldr	r1, [r3, #0]
    f644:	4281      	cmp	r1, r0
    f646:	d00e      	beq.n	f666 <thread_monitor_entry_get+0x32>
		} else if (entry->id == 0) {
    f648:	b151      	cbz	r1, f660 <thread_monitor_entry_get+0x2c>
		entry_age = rpc_event_cnt - entry->cnt;
    f64a:	6859      	ldr	r1, [r3, #4]
    f64c:	1a51      	subs	r1, r2, r1
		if (entry_age > oldest_entry_age) {
    f64e:	42b1      	cmp	r1, r6
    f650:	bfc4      	itt	gt
    f652:	461c      	movgt	r4, r3
    f654:	460e      	movgt	r6, r1
	for ( ; PART_OF_ARRAY(thread_event_monitor, entry); entry++) {
    f656:	3d01      	subs	r5, #1
    f658:	f103 0308 	add.w	r3, r3, #8
    f65c:	d1f1      	bne.n	f642 <thread_monitor_entry_get+0xe>
    f65e:	4623      	mov	r3, r4
			new_entry = entry;
		}
	}

	new_entry->id = id;
	new_entry->cnt = rpc_event_cnt - 1;
    f660:	3a01      	subs	r2, #1
	new_entry->id = id;
    f662:	6018      	str	r0, [r3, #0]
	new_entry->cnt = rpc_event_cnt - 1;
    f664:	605a      	str	r2, [r3, #4]

	return new_entry;
}
    f666:	4618      	mov	r0, r3
    f668:	bd70      	pop	{r4, r5, r6, pc}
    f66a:	bf00      	nop
    f66c:	2002029c 	.word	0x2002029c
    f670:	200202a8 	.word	0x200202a8

0000f674 <rpc_proxy_irq_handler>:
			  */

	return 1; /* We should check if scheduling decision should be made */
}

ISR_DIRECT_DECLARE(rpc_proxy_irq_handler)
    f674:	4668      	mov	r0, sp
    f676:	f020 0107 	bic.w	r1, r0, #7
    f67a:	468d      	mov	sp, r1
    f67c:	b519      	push	{r0, r3, r4, lr}
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
    f67e:	4b0d      	ldr	r3, [pc, #52]	; (f6b4 <rpc_proxy_irq_handler+0x40>)
    f680:	e8d3 2fef 	ldaex	r2, [r3]
    f684:	3201      	adds	r2, #1
    f686:	e8c3 2fe1 	stlex	r1, r2, [r3]
    f68a:	2900      	cmp	r1, #0
    f68c:	d1f8      	bne.n	f680 <rpc_proxy_irq_handler+0xc>
{
	atomic_inc(&rpc_event_cnt);

	bsd_os_application_irq_handler();
    f68e:	f006 fe0d 	bl	162ac <bsd_os_application_irq_handler>

	struct sleeping_thread *thread;

	/* Wake up all sleeping threads. */
	SYS_SLIST_FOR_EACH_CONTAINER(&sleeping_threads, thread, node) {
    f692:	4b09      	ldr	r3, [pc, #36]	; (f6b8 <rpc_proxy_irq_handler+0x44>)
    f694:	681c      	ldr	r4, [r3, #0]
    f696:	b93c      	cbnz	r4, f6a8 <rpc_proxy_irq_handler+0x34>
		k_sem_give(&thread->sem);
	}

	ISR_DIRECT_PM(); /* PM done after servicing interrupt for best latency
    f698:	f7fe f91c 	bl	d8d4 <_arch_isr_direct_pm>
{
#ifdef CONFIG_TRACING
	sys_trace_isr_exit();
#endif
	if (maybe_swap) {
		z_arm_int_exit();
    f69c:	f7fe f828 	bl	d6f0 <z_arm_exc_exit>
ISR_DIRECT_DECLARE(rpc_proxy_irq_handler)
    f6a0:	e8bd 4019 	ldmia.w	sp!, {r0, r3, r4, lr}
    f6a4:	4685      	mov	sp, r0
    f6a6:	4770      	bx	lr
	z_impl_k_sem_give(sem);
    f6a8:	1d20      	adds	r0, r4, #4
    f6aa:	f009 fd2f 	bl	1910c <z_impl_k_sem_give>
    f6ae:	6824      	ldr	r4, [r4, #0]
	return node->next;
    f6b0:	e7f1      	b.n	f696 <rpc_proxy_irq_handler+0x22>
    f6b2:	bf00      	nop
    f6b4:	2002029c 	.word	0x2002029c
    f6b8:	200202a0 	.word	0x200202a0

0000f6bc <bsd_os_timedwait>:
{
    f6bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    f6c0:	4688      	mov	r8, r1
    f6c2:	b089      	sub	sp, #36	; 0x24
	return z_impl_k_uptime_get();
    f6c4:	f00c f9a9 	bl	1ba1a <z_impl_k_uptime_get>
	if (*timeout == 0) {
    f6c8:	f8d8 3000 	ldr.w	r3, [r8]
    f6cc:	4606      	mov	r6, r0
    f6ce:	2b00      	cmp	r3, #0
    f6d0:	460f      	mov	r7, r1
    f6d2:	d103      	bne.n	f6dc <bsd_os_timedwait+0x20>
	z_impl_k_yield();
    f6d4:	f009 fca0 	bl	19018 <z_impl_k_yield>
		return NRF_ETIMEDOUT;
    f6d8:	203c      	movs	r0, #60	; 0x3c
    f6da:	e06e      	b.n	f7ba <bsd_os_timedwait+0xfe>
		*timeout = K_FOREVER;
    f6dc:	bfbc      	itt	lt
    f6de:	f04f 33ff 	movlt.w	r3, #4294967295
    f6e2:	f8c8 3000 	strlt.w	r3, [r8]
	return z_impl_k_sem_init(sem, initial_count, limit);
    f6e6:	2201      	movs	r2, #1
    f6e8:	2100      	movs	r1, #0
    f6ea:	a802      	add	r0, sp, #8
    f6ec:	f00c f92b 	bl	1b946 <z_impl_k_sem_init>
    f6f0:	f10d 0a04 	add.w	sl, sp, #4
    f6f4:	f04f 0320 	mov.w	r3, #32
    f6f8:	f3ef 8b11 	mrs	fp, BASEPRI
    f6fc:	f383 8811 	msr	BASEPRI, r3
    f700:	f3bf 8f6f 	isb	sy
	return z_impl_k_current_get();
    f704:	f009 fcfc 	bl	19100 <z_impl_k_current_get>
	entry = thread_monitor_entry_get(k_current_get());
    f708:	f7ff ff94 	bl	f634 <thread_monitor_entry_get>
	if (rpc_event_cnt != entry->cnt) {
    f70c:	4933      	ldr	r1, [pc, #204]	; (f7dc <bsd_os_timedwait+0x120>)
    f70e:	6843      	ldr	r3, [r0, #4]
    f710:	680a      	ldr	r2, [r1, #0]
    f712:	4689      	mov	r9, r1
    f714:	4293      	cmp	r3, r2
    f716:	f04f 0300 	mov.w	r3, #0
    f71a:	d108      	bne.n	f72e <bsd_os_timedwait+0x72>
	parent->next = child;
    f71c:	9301      	str	r3, [sp, #4]
Z_GENLIST_APPEND(slist, snode)
    f71e:	4b30      	ldr	r3, [pc, #192]	; (f7e0 <bsd_os_timedwait+0x124>)
    f720:	685a      	ldr	r2, [r3, #4]
    f722:	2a00      	cmp	r2, #0
    f724:	d14c      	bne.n	f7c0 <bsd_os_timedwait+0x104>
	list->head = node;
    f726:	e9c3 aa00 	strd	sl, sl, [r3]
		allow_to_sleep = true;
    f72a:	2301      	movs	r3, #1
    f72c:	e000      	b.n	f730 <bsd_os_timedwait+0x74>
	entry->cnt = rpc_event_cnt;
    f72e:	6042      	str	r2, [r0, #4]
	__asm__ volatile(
    f730:	f38b 8811 	msr	BASEPRI, fp
    f734:	f3bf 8f6f 	isb	sy
	if (!sleeping_thread_add(&thread)) {
    f738:	2b00      	cmp	r3, #0
    f73a:	d03d      	beq.n	f7b8 <bsd_os_timedwait+0xfc>
	(void)k_sem_take(&thread.sem, *timeout);
    f73c:	f8d8 1000 	ldr.w	r1, [r8]
	return z_impl_k_sem_take(sem, timeout);
    f740:	a802      	add	r0, sp, #8
    f742:	f009 fd0f 	bl	19164 <z_impl_k_sem_take>
	__asm__ volatile(
    f746:	f04f 0320 	mov.w	r3, #32
    f74a:	f3ef 8b11 	mrs	fp, BASEPRI
    f74e:	f383 8811 	msr	BASEPRI, r3
    f752:	f3bf 8f6f 	isb	sy
 * @return true if node was removed
 */
static inline bool sys_slist_find_and_remove(sys_slist_t *list,
					     sys_snode_t *node);

Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    f756:	2000      	movs	r0, #0
    f758:	4b21      	ldr	r3, [pc, #132]	; (f7e0 <bsd_os_timedwait+0x124>)
    f75a:	681a      	ldr	r2, [r3, #0]
    f75c:	b152      	cbz	r2, f774 <bsd_os_timedwait+0xb8>
    f75e:	4552      	cmp	r2, sl
    f760:	d139      	bne.n	f7d6 <bsd_os_timedwait+0x11a>
Z_GENLIST_REMOVE(slist, snode)
    f762:	9901      	ldr	r1, [sp, #4]
    f764:	bb88      	cbnz	r0, f7ca <bsd_os_timedwait+0x10e>
    f766:	6858      	ldr	r0, [r3, #4]
	list->head = node;
    f768:	6019      	str	r1, [r3, #0]
Z_GENLIST_REMOVE(slist, snode)
    f76a:	4290      	cmp	r0, r2
    f76c:	d100      	bne.n	f770 <bsd_os_timedwait+0xb4>
	list->tail = node;
    f76e:	6059      	str	r1, [r3, #4]
	parent->next = child;
    f770:	2300      	movs	r3, #0
    f772:	9301      	str	r3, [sp, #4]
	return z_impl_k_current_get();
    f774:	f009 fcc4 	bl	19100 <z_impl_k_current_get>
	entry = thread_monitor_entry_get(k_current_get());
    f778:	f7ff ff5c 	bl	f634 <thread_monitor_entry_get>
	entry->cnt = rpc_event_cnt;
    f77c:	f8d9 3000 	ldr.w	r3, [r9]
    f780:	6043      	str	r3, [r0, #4]
	__asm__ volatile(
    f782:	f38b 8811 	msr	BASEPRI, fp
    f786:	f3bf 8f6f 	isb	sy
	if (*timeout == K_FOREVER) {
    f78a:	f8d8 9000 	ldr.w	r9, [r8]
    f78e:	f1b9 3fff 	cmp.w	r9, #4294967295
    f792:	d011      	beq.n	f7b8 <bsd_os_timedwait+0xfc>
	return z_impl_k_uptime_get();
    f794:	f00c f941 	bl	1ba1a <z_impl_k_uptime_get>
	remaining = *timeout - (k_uptime_get() - start);
    f798:	eb16 0209 	adds.w	r2, r6, r9
    f79c:	eb47 73e9 	adc.w	r3, r7, r9, asr #31
    f7a0:	1a14      	subs	r4, r2, r0
    f7a2:	eb63 0501 	sbc.w	r5, r3, r1
	*timeout = remaining > 0 ? remaining : 0;
    f7a6:	2c00      	cmp	r4, #0
    f7a8:	f175 0300 	sbcs.w	r3, r5, #0
    f7ac:	bfb8      	it	lt
    f7ae:	2400      	movlt	r4, #0
    f7b0:	f8c8 4000 	str.w	r4, [r8]
	if (*timeout == 0) {
    f7b4:	2c00      	cmp	r4, #0
    f7b6:	d08f      	beq.n	f6d8 <bsd_os_timedwait+0x1c>
	return 0;
    f7b8:	2000      	movs	r0, #0
}
    f7ba:	b009      	add	sp, #36	; 0x24
    f7bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    f7c0:	f8c2 a000 	str.w	sl, [r2]
	list->tail = node;
    f7c4:	f8c3 a004 	str.w	sl, [r3, #4]
    f7c8:	e7af      	b.n	f72a <bsd_os_timedwait+0x6e>
	parent->next = child;
    f7ca:	6001      	str	r1, [r0, #0]
Z_GENLIST_REMOVE(slist, snode)
    f7cc:	6859      	ldr	r1, [r3, #4]
    f7ce:	4291      	cmp	r1, r2
	list->tail = node;
    f7d0:	bf08      	it	eq
    f7d2:	6058      	streq	r0, [r3, #4]
    f7d4:	e7cc      	b.n	f770 <bsd_os_timedwait+0xb4>
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    f7d6:	4610      	mov	r0, r2
    f7d8:	6812      	ldr	r2, [r2, #0]
    f7da:	e7bf      	b.n	f75c <bsd_os_timedwait+0xa0>
    f7dc:	2002029c 	.word	0x2002029c
    f7e0:	200202a0 	.word	0x200202a0

0000f7e4 <bsd_os_errno_set>:
	switch (err_code) {
    f7e4:	282d      	cmp	r0, #45	; 0x2d
{
    f7e6:	b510      	push	{r4, lr}
    f7e8:	4604      	mov	r4, r0
	switch (err_code) {
    f7ea:	d00c      	beq.n	f806 <bsd_os_errno_set+0x22>
    f7ec:	dc3f      	bgt.n	f86e <bsd_os_errno_set+0x8a>
    f7ee:	2816      	cmp	r0, #22
    f7f0:	d009      	beq.n	f806 <bsd_os_errno_set+0x22>
    f7f2:	dc28      	bgt.n	f846 <bsd_os_errno_set+0x62>
    f7f4:	2808      	cmp	r0, #8
    f7f6:	d006      	beq.n	f806 <bsd_os_errno_set+0x22>
    f7f8:	dc09      	bgt.n	f80e <bsd_os_errno_set+0x2a>
    f7fa:	2802      	cmp	r0, #2
    f7fc:	d003      	beq.n	f806 <bsd_os_errno_set+0x22>
    f7fe:	2805      	cmp	r0, #5
    f800:	d001      	beq.n	f806 <bsd_os_errno_set+0x22>
    f802:	2801      	cmp	r0, #1
    f804:	d10c      	bne.n	f820 <bsd_os_errno_set+0x3c>
		errno = ETIMEDOUT;
    f806:	f00b facf 	bl	1ada8 <z_errno>
    f80a:	6004      	str	r4, [r0, #0]
}
    f80c:	bd10      	pop	{r4, pc}
	switch (err_code) {
    f80e:	280c      	cmp	r0, #12
    f810:	d0f9      	beq.n	f806 <bsd_os_errno_set+0x22>
    f812:	dc01      	bgt.n	f818 <bsd_os_errno_set+0x34>
    f814:	2809      	cmp	r0, #9
    f816:	e7f5      	b.n	f804 <bsd_os_errno_set+0x20>
    f818:	280d      	cmp	r0, #13
    f81a:	d0f4      	beq.n	f806 <bsd_os_errno_set+0x22>
    f81c:	280e      	cmp	r0, #14
    f81e:	d05f      	beq.n	f8e0 <bsd_os_errno_set+0xfc>
		LOG_ERR("Untranslated errno %d set by bsdlib!", err_code);
    f820:	2301      	movs	r3, #1
    f822:	f04f 0200 	mov.w	r2, #0
    f826:	4946      	ldr	r1, [pc, #280]	; (f940 <bsd_os_errno_set+0x15c>)
    f828:	f363 0207 	bfi	r2, r3, #0, #8
    f82c:	4b45      	ldr	r3, [pc, #276]	; (f944 <bsd_os_errno_set+0x160>)
    f82e:	4846      	ldr	r0, [pc, #280]	; (f948 <bsd_os_errno_set+0x164>)
    f830:	1a5b      	subs	r3, r3, r1
    f832:	08db      	lsrs	r3, r3, #3
    f834:	f363 128f 	bfi	r2, r3, #6, #10
    f838:	4621      	mov	r1, r4
    f83a:	f00a fb50 	bl	19ede <log_1>
		errno = 0xBAADBAAD;
    f83e:	f00b fab3 	bl	1ada8 <z_errno>
    f842:	4b42      	ldr	r3, [pc, #264]	; (f94c <bsd_os_errno_set+0x168>)
    f844:	e04f      	b.n	f8e6 <bsd_os_errno_set+0x102>
	switch (err_code) {
    f846:	2828      	cmp	r0, #40	; 0x28
    f848:	d076      	beq.n	f938 <bsd_os_errno_set+0x154>
    f84a:	dc05      	bgt.n	f858 <bsd_os_errno_set+0x74>
    f84c:	2823      	cmp	r0, #35	; 0x23
    f84e:	d04c      	beq.n	f8ea <bsd_os_errno_set+0x106>
    f850:	2825      	cmp	r0, #37	; 0x25
    f852:	d0d8      	beq.n	f806 <bsd_os_errno_set+0x22>
    f854:	2818      	cmp	r0, #24
    f856:	e7d5      	b.n	f804 <bsd_os_errno_set+0x20>
    f858:	282a      	cmp	r0, #42	; 0x2a
    f85a:	d0d4      	beq.n	f806 <bsd_os_errno_set+0x22>
    f85c:	db49      	blt.n	f8f2 <bsd_os_errno_set+0x10e>
    f85e:	282b      	cmp	r0, #43	; 0x2b
    f860:	d0d1      	beq.n	f806 <bsd_os_errno_set+0x22>
    f862:	282c      	cmp	r0, #44	; 0x2c
    f864:	d1dc      	bne.n	f820 <bsd_os_errno_set+0x3c>
		errno = ESOCKTNOSUPPORT;
    f866:	f00b fa9f 	bl	1ada8 <z_errno>
    f86a:	232c      	movs	r3, #44	; 0x2c
    f86c:	e03b      	b.n	f8e6 <bsd_os_errno_set+0x102>
	switch (err_code) {
    f86e:	283c      	cmp	r0, #60	; 0x3c
    f870:	d0c9      	beq.n	f806 <bsd_os_errno_set+0x22>
    f872:	dc15      	bgt.n	f8a0 <bsd_os_errno_set+0xbc>
    f874:	2833      	cmp	r0, #51	; 0x33
    f876:	d0c6      	beq.n	f806 <bsd_os_errno_set+0x22>
    f878:	dc05      	bgt.n	f886 <bsd_os_errno_set+0xa2>
    f87a:	2830      	cmp	r0, #48	; 0x30
    f87c:	d0c3      	beq.n	f806 <bsd_os_errno_set+0x22>
    f87e:	2832      	cmp	r0, #50	; 0x32
    f880:	d03b      	beq.n	f8fa <bsd_os_errno_set+0x116>
    f882:	282f      	cmp	r0, #47	; 0x2f
    f884:	e7be      	b.n	f804 <bsd_os_errno_set+0x20>
    f886:	2836      	cmp	r0, #54	; 0x36
    f888:	d0bd      	beq.n	f806 <bsd_os_errno_set+0x22>
    f88a:	dc01      	bgt.n	f890 <bsd_os_errno_set+0xac>
    f88c:	2834      	cmp	r0, #52	; 0x34
    f88e:	e7b9      	b.n	f804 <bsd_os_errno_set+0x20>
    f890:	2838      	cmp	r0, #56	; 0x38
    f892:	d0b8      	beq.n	f806 <bsd_os_errno_set+0x22>
    f894:	2839      	cmp	r0, #57	; 0x39
    f896:	d1c3      	bne.n	f820 <bsd_os_errno_set+0x3c>
		errno = ENOTCONN;
    f898:	f00b fa86 	bl	1ada8 <z_errno>
    f89c:	2339      	movs	r3, #57	; 0x39
    f89e:	e022      	b.n	f8e6 <bsd_os_errno_set+0x102>
	switch (err_code) {
    f8a0:	287d      	cmp	r0, #125	; 0x7d
    f8a2:	d036      	beq.n	f912 <bsd_os_errno_set+0x12e>
    f8a4:	dc10      	bgt.n	f8c8 <bsd_os_errno_set+0xe4>
    f8a6:	2870      	cmp	r0, #112	; 0x70
    f8a8:	d02b      	beq.n	f902 <bsd_os_errno_set+0x11e>
    f8aa:	dc05      	bgt.n	f8b8 <bsd_os_errno_set+0xd4>
    f8ac:	2869      	cmp	r0, #105	; 0x69
    f8ae:	d1b7      	bne.n	f820 <bsd_os_errno_set+0x3c>
		errno = ENOBUFS;
    f8b0:	f00b fa7a 	bl	1ada8 <z_errno>
    f8b4:	2337      	movs	r3, #55	; 0x37
    f8b6:	e016      	b.n	f8e6 <bsd_os_errno_set+0x102>
	switch (err_code) {
    f8b8:	2872      	cmp	r0, #114	; 0x72
    f8ba:	d026      	beq.n	f90a <bsd_os_errno_set+0x126>
    f8bc:	2873      	cmp	r0, #115	; 0x73
    f8be:	d1af      	bne.n	f820 <bsd_os_errno_set+0x3c>
		errno = EINPROGRESS;
    f8c0:	f00b fa72 	bl	1ada8 <z_errno>
    f8c4:	2344      	movs	r3, #68	; 0x44
    f8c6:	e00e      	b.n	f8e6 <bsd_os_errno_set+0x102>
	switch (err_code) {
    f8c8:	287f      	cmp	r0, #127	; 0x7f
    f8ca:	d02b      	beq.n	f924 <bsd_os_errno_set+0x140>
    f8cc:	db25      	blt.n	f91a <bsd_os_errno_set+0x136>
    f8ce:	2880      	cmp	r0, #128	; 0x80
    f8d0:	d02d      	beq.n	f92e <bsd_os_errno_set+0x14a>
    f8d2:	2881      	cmp	r0, #129	; 0x81
    f8d4:	d1a4      	bne.n	f820 <bsd_os_errno_set+0x3c>
		errno = EKEYREJECTED;
    f8d6:	f00b fa67 	bl	1ada8 <z_errno>
    f8da:	f240 73d4 	movw	r3, #2004	; 0x7d4
    f8de:	e002      	b.n	f8e6 <bsd_os_errno_set+0x102>
		errno = EFAULT;
    f8e0:	f00b fa62 	bl	1ada8 <z_errno>
    f8e4:	230e      	movs	r3, #14
		errno = 0xBAADBAAD;
    f8e6:	6003      	str	r3, [r0, #0]
}
    f8e8:	e790      	b.n	f80c <bsd_os_errno_set+0x28>
		errno = EAGAIN;
    f8ea:	f00b fa5d 	bl	1ada8 <z_errno>
    f8ee:	230b      	movs	r3, #11
    f8f0:	e7f9      	b.n	f8e6 <bsd_os_errno_set+0x102>
		errno = EPROTOTYPE;
    f8f2:	f00b fa59 	bl	1ada8 <z_errno>
    f8f6:	2329      	movs	r3, #41	; 0x29
    f8f8:	e7f5      	b.n	f8e6 <bsd_os_errno_set+0x102>
		errno = ENETDOWN;
    f8fa:	f00b fa55 	bl	1ada8 <z_errno>
    f8fe:	233e      	movs	r3, #62	; 0x3e
    f900:	e7f1      	b.n	f8e6 <bsd_os_errno_set+0x102>
		errno = EHOSTDOWN;
    f902:	f00b fa51 	bl	1ada8 <z_errno>
    f906:	2343      	movs	r3, #67	; 0x43
    f908:	e7ed      	b.n	f8e6 <bsd_os_errno_set+0x102>
		errno = EALREADY;
    f90a:	f00b fa4d 	bl	1ada8 <z_errno>
    f90e:	2345      	movs	r3, #69	; 0x45
    f910:	e7e9      	b.n	f8e6 <bsd_os_errno_set+0x102>
		errno = ECANCELED;
    f912:	f00b fa49 	bl	1ada8 <z_errno>
    f916:	2348      	movs	r3, #72	; 0x48
    f918:	e7e5      	b.n	f8e6 <bsd_os_errno_set+0x102>
		errno = ENOKEY;
    f91a:	f00b fa45 	bl	1ada8 <z_errno>
    f91e:	f240 73d1 	movw	r3, #2001	; 0x7d1
    f922:	e7e0      	b.n	f8e6 <bsd_os_errno_set+0x102>
		errno = EKEYEXPIRED;
    f924:	f00b fa40 	bl	1ada8 <z_errno>
    f928:	f240 73d2 	movw	r3, #2002	; 0x7d2
    f92c:	e7db      	b.n	f8e6 <bsd_os_errno_set+0x102>
		errno = EKEYREVOKED;
    f92e:	f00b fa3b 	bl	1ada8 <z_errno>
    f932:	f240 73d3 	movw	r3, #2003	; 0x7d3
    f936:	e7d6      	b.n	f8e6 <bsd_os_errno_set+0x102>
		errno = EMSGSIZE;
    f938:	f00b fa36 	bl	1ada8 <z_errno>
    f93c:	2324      	movs	r3, #36	; 0x24
    f93e:	e7d2      	b.n	f8e6 <bsd_os_errno_set+0x102>
    f940:	0001c004 	.word	0x0001c004
    f944:	0001c00c 	.word	0x0001c00c
    f948:	0001cc47 	.word	0x0001cc47
    f94c:	baadbaad 	.word	0xbaadbaad

0000f950 <bsd_os_application_irq_set>:
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    f950:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    f954:	4b01      	ldr	r3, [pc, #4]	; (f95c <bsd_os_application_irq_set+0xc>)
    f956:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
}
    f95a:	4770      	bx	lr
    f95c:	e000e100 	.word	0xe000e100

0000f960 <bsd_os_application_irq_clear>:
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    f960:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    f964:	4b01      	ldr	r3, [pc, #4]	; (f96c <bsd_os_application_irq_clear+0xc>)
    f966:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
}
    f96a:	4770      	bx	lr
    f96c:	e000e100 	.word	0xe000e100

0000f970 <bsd_os_trace_irq_set>:
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    f970:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
    f974:	4b01      	ldr	r3, [pc, #4]	; (f97c <bsd_os_trace_irq_set+0xc>)
    f976:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
}
    f97a:	4770      	bx	lr
    f97c:	e000e100 	.word	0xe000e100

0000f980 <bsd_os_trace_irq_clear>:
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    f980:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
    f984:	4b01      	ldr	r3, [pc, #4]	; (f98c <bsd_os_trace_irq_clear+0xc>)
    f986:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
}
    f98a:	4770      	bx	lr
    f98c:	e000e100 	.word	0xe000e100

0000f990 <trace_uart_init>:
			   rpc_proxy_irq_handler, UNUSED_FLAGS);
	irq_enable(BSD_APPLICATION_IRQ);
}

void trace_uart_init(void)
{
    f990:	b500      	push	{lr}
    f992:	b089      	sub	sp, #36	; 0x24
#ifdef CONFIG_BSD_LIBRARY_TRACE_ENABLED
	/* UART pins are defined in "nrf9160_pca10090.dts". */
	const nrfx_uarte_config_t config = {
    f994:	2218      	movs	r2, #24
    f996:	2100      	movs	r1, #0
    f998:	a802      	add	r0, sp, #8
    f99a:	f00a ff6e 	bl	1a87a <memset>
    f99e:	2301      	movs	r3, #1
    f9a0:	9301      	str	r3, [sp, #4]
    f9a2:	f04f 33ff 	mov.w	r3, #4294967295
    f9a6:	e9cd 3303 	strd	r3, r3, [sp, #12]
    f9aa:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    f9ae:	9306      	str	r3, [sp, #24]
    f9b0:	2307      	movs	r3, #7
		.p_context = NULL,
	};

	/* Initialize nrfx UARTE driver in blocking mode. */
	/* TODO: use UARTE in non-blocking mode with IRQ handler. */
	nrfx_uarte_init(&uarte_inst, &config, NULL);
    f9b2:	2200      	movs	r2, #0
    f9b4:	a901      	add	r1, sp, #4
    f9b6:	4804      	ldr	r0, [pc, #16]	; (f9c8 <trace_uart_init+0x38>)
	const nrfx_uarte_config_t config = {
    f9b8:	f88d 301c 	strb.w	r3, [sp, #28]
	nrfx_uarte_init(&uarte_inst, &config, NULL);
    f9bc:	f008 fbec 	bl	18198 <nrfx_uarte_init>
#endif
}
    f9c0:	b009      	add	sp, #36	; 0x24
    f9c2:	f85d fb04 	ldr.w	pc, [sp], #4
    f9c6:	bf00      	nop
    f9c8:	0001c200 	.word	0x0001c200

0000f9cc <bsd_os_init>:

/* This function is called by bsd_init and must not be called explicitly. */
void bsd_os_init(void)
{
    f9cc:	b508      	push	{r3, lr}
	list->head = NULL;
    f9ce:	2300      	movs	r3, #0
    f9d0:	4a08      	ldr	r2, [pc, #32]	; (f9f4 <bsd_os_init+0x28>)
	list->tail = NULL;
    f9d2:	e9c2 3300 	strd	r3, r3, [r2]
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    f9d6:	4a08      	ldr	r2, [pc, #32]	; (f9f8 <bsd_os_init+0x2c>)
    f9d8:	e8d2 1fef 	ldaex	r1, [r2]
    f9dc:	e8c2 3fe0 	stlex	r0, r3, [r2]
    f9e0:	2800      	cmp	r0, #0
    f9e2:	d1f9      	bne.n	f9d8 <bsd_os_init+0xc>
	sys_slist_init(&sleeping_threads);
	atomic_clear(&rpc_event_cnt);

	read_task_create();
    f9e4:	f00b fa0b 	bl	1adfe <read_task_create>

	/* Configure and enable modem tracing over UART. */
	trace_uart_init();
    f9e8:	f7ff ffd2 	bl	f990 <trace_uart_init>
	trace_task_create();
}
    f9ec:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	trace_task_create();
    f9f0:	f00b b9fa 	b.w	1ade8 <trace_task_create>
    f9f4:	200202a0 	.word	0x200202a0
    f9f8:	2002029c 	.word	0x2002029c

0000f9fc <bsd_os_trace_put>:

int32_t bsd_os_trace_put(const uint8_t * const data, uint32_t len)
{
    f9fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    fa00:	4607      	mov	r7, r0
    fa02:	460d      	mov	r5, r1
#ifdef CONFIG_BSD_LIBRARY_TRACE_ENABLED
	/* Max DMA transfers are 255 bytes.
	 * Split RAM buffer into smaller chunks
	 * to be transferred using DMA.
	 */
	u32_t remaining_bytes = len;
    fa04:	460c      	mov	r4, r1

	while (remaining_bytes) {
		u8_t transfer_len = MIN(remaining_bytes, UINT8_MAX);
		u32_t idx = len - remaining_bytes;

		nrfx_uarte_tx(&uarte_inst, &data[idx], transfer_len);
    fa06:	f8df 8024 	ldr.w	r8, [pc, #36]	; fa2c <bsd_os_trace_put+0x30>
	while (remaining_bytes) {
    fa0a:	b914      	cbnz	r4, fa12 <bsd_os_trace_put+0x16>
		remaining_bytes -= transfer_len;
	}
#endif

	return 0;
}
    fa0c:	4620      	mov	r0, r4
    fa0e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		u8_t transfer_len = MIN(remaining_bytes, UINT8_MAX);
    fa12:	2cff      	cmp	r4, #255	; 0xff
    fa14:	4626      	mov	r6, r4
    fa16:	bf28      	it	cs
    fa18:	26ff      	movcs	r6, #255	; 0xff
		u32_t idx = len - remaining_bytes;
    fa1a:	1b29      	subs	r1, r5, r4
		nrfx_uarte_tx(&uarte_inst, &data[idx], transfer_len);
    fa1c:	4632      	mov	r2, r6
    fa1e:	4439      	add	r1, r7
    fa20:	4640      	mov	r0, r8
    fa22:	f008 fc67 	bl	182f4 <nrfx_uarte_tx>
		remaining_bytes -= transfer_len;
    fa26:	1ba4      	subs	r4, r4, r6
    fa28:	e7ef      	b.n	fa0a <bsd_os_trace_put+0xe>
    fa2a:	bf00      	nop
    fa2c:	0001c200 	.word	0x0001c200

0000fa30 <z_to_nrf_optname>:
static int z_to_nrf_optname(int z_in_level, int z_in_optname,
			    int *nrf_out_optname)
{
	int retval = 0;

	switch (z_in_level) {
    fa30:	f5b0 7f8d 	cmp.w	r0, #282	; 0x11a
    fa34:	d03c      	beq.n	fab0 <z_to_nrf_optname+0x80>
    fa36:	dc04      	bgt.n	fa42 <z_to_nrf_optname+0x12>
    fa38:	2801      	cmp	r0, #1
    fa3a:	d044      	beq.n	fac6 <z_to_nrf_optname+0x96>
			break;
		}
		break;

	default:
		retval = -1;
    fa3c:	f04f 30ff 	mov.w	r0, #4294967295
		break;
	}

	return retval;
}
    fa40:	4770      	bx	lr
	switch (z_in_level) {
    fa42:	f240 2302 	movw	r3, #514	; 0x202
    fa46:	4298      	cmp	r0, r3
    fa48:	d052      	beq.n	faf0 <z_to_nrf_optname+0xc0>
    fa4a:	f240 2303 	movw	r3, #515	; 0x203
    fa4e:	4298      	cmp	r0, r3
    fa50:	d1f4      	bne.n	fa3c <z_to_nrf_optname+0xc>
		switch (z_in_optname) {
    fa52:	3901      	subs	r1, #1
    fa54:	2913      	cmp	r1, #19
    fa56:	d8f1      	bhi.n	fa3c <z_to_nrf_optname+0xc>
    fa58:	a301      	add	r3, pc, #4	; (adr r3, fa60 <z_to_nrf_optname+0x30>)
    fa5a:	f853 f021 	ldr.w	pc, [r3, r1, lsl #2]
    fa5e:	bf00      	nop
    fa60:	0000fafd 	.word	0x0000fafd
    fa64:	0000fac1 	.word	0x0000fac1
    fa68:	0000fae1 	.word	0x0000fae1
    fa6c:	0000fad3 	.word	0x0000fad3
    fa70:	0000fae5 	.word	0x0000fae5
    fa74:	0000fae9 	.word	0x0000fae9
    fa78:	0000faed 	.word	0x0000faed
    fa7c:	0000fa3d 	.word	0x0000fa3d
    fa80:	0000fa3d 	.word	0x0000fa3d
    fa84:	0000fa3d 	.word	0x0000fa3d
    fa88:	0000fa3d 	.word	0x0000fa3d
    fa8c:	0000fa3d 	.word	0x0000fa3d
    fa90:	0000fa3d 	.word	0x0000fa3d
    fa94:	0000fa3d 	.word	0x0000fa3d
    fa98:	0000fa3d 	.word	0x0000fa3d
    fa9c:	0000fa3d 	.word	0x0000fa3d
    faa0:	0000fa3d 	.word	0x0000fa3d
    faa4:	0000fa3d 	.word	0x0000fa3d
    faa8:	0000fa3d 	.word	0x0000fa3d
    faac:	0000fad7 	.word	0x0000fad7
		switch (z_in_optname) {
    fab0:	3901      	subs	r1, #1
    fab2:	2905      	cmp	r1, #5
    fab4:	d8c2      	bhi.n	fa3c <z_to_nrf_optname+0xc>
    fab6:	e8df f001 	tbb	[pc, r1]
    faba:	1503      	.short	0x1503
    fabc:	210c1917 	.word	0x210c1917
			*nrf_out_optname = NRF_SO_SEC_TAG_LIST;
    fac0:	2302      	movs	r3, #2
			*nrf_out_optname = NRF_SO_DFU_OFFSET;
    fac2:	6013      	str	r3, [r2, #0]
    fac4:	e00a      	b.n	fadc <z_to_nrf_optname+0xac>
		switch (z_in_optname) {
    fac6:	2914      	cmp	r1, #20
    fac8:	d005      	beq.n	fad6 <z_to_nrf_optname+0xa6>
    faca:	2919      	cmp	r1, #25
    facc:	d005      	beq.n	fada <z_to_nrf_optname+0xaa>
    face:	2904      	cmp	r1, #4
    fad0:	d1b4      	bne.n	fa3c <z_to_nrf_optname+0xc>
			*nrf_out_optname = NRF_SO_SEC_PEER_VERIFY;
    fad2:	2304      	movs	r3, #4
    fad4:	e7f5      	b.n	fac2 <z_to_nrf_optname+0x92>
			*nrf_out_optname = NRF_SO_RCVTIMEO;
    fad6:	2314      	movs	r3, #20
    fad8:	e7f3      	b.n	fac2 <z_to_nrf_optname+0x92>
			*nrf_out_optname = NRF_SO_BINDTODEVICE;
    fada:	6011      	str	r1, [r2, #0]
	int retval = 0;
    fadc:	2000      	movs	r0, #0
			break;
    fade:	4770      	bx	lr
			*nrf_out_optname = NRF_SO_DFU_TIMEO;
    fae0:	2303      	movs	r3, #3
    fae2:	e7ee      	b.n	fac2 <z_to_nrf_optname+0x92>
			*nrf_out_optname = NRF_SO_DFU_REVERT;
    fae4:	2305      	movs	r3, #5
    fae6:	e7ec      	b.n	fac2 <z_to_nrf_optname+0x92>
			*nrf_out_optname = NRF_SO_DFU_BACKUP_DELETE;
    fae8:	2306      	movs	r3, #6
    faea:	e7ea      	b.n	fac2 <z_to_nrf_optname+0x92>
			*nrf_out_optname = NRF_SO_DFU_OFFSET;
    faec:	2307      	movs	r3, #7
    faee:	e7e8      	b.n	fac2 <z_to_nrf_optname+0x92>
		switch (z_in_optname) {
    faf0:	2902      	cmp	r1, #2
    faf2:	d0e5      	beq.n	fac0 <z_to_nrf_optname+0x90>
    faf4:	2903      	cmp	r1, #3
    faf6:	d0f3      	beq.n	fae0 <z_to_nrf_optname+0xb0>
    faf8:	2901      	cmp	r1, #1
    fafa:	d19f      	bne.n	fa3c <z_to_nrf_optname+0xc>
			*nrf_out_optname = NRF_SO_SEC_ROLE;
    fafc:	2301      	movs	r3, #1
    fafe:	e7e0      	b.n	fac2 <z_to_nrf_optname+0x92>

0000fb00 <nrf91_socket_iface_init>:

static void nrf91_socket_iface_init(struct net_if *iface)
{
	nrf91_socket_iface_data.iface = iface;

	iface->if_dev->offloaded = true;
    fb00:	2201      	movs	r2, #1
	nrf91_socket_iface_data.iface = iface;
    fb02:	4b03      	ldr	r3, [pc, #12]	; (fb10 <nrf91_socket_iface_init+0x10>)
    fb04:	6018      	str	r0, [r3, #0]
	iface->if_dev->offloaded = true;
    fb06:	6803      	ldr	r3, [r0, #0]

	socket_offload_register(&nrf91_socket_offload_ops);
    fb08:	4802      	ldr	r0, [pc, #8]	; (fb14 <nrf91_socket_iface_init+0x14>)
	iface->if_dev->offloaded = true;
    fb0a:	769a      	strb	r2, [r3, #26]
	socket_offload_register(&nrf91_socket_offload_ops);
    fb0c:	f7fd bb8e 	b.w	d22c <socket_offload_register>
    fb10:	200202f8 	.word	0x200202f8
    fb14:	0001c208 	.word	0x0001c208

0000fb18 <k_sys_fatal_error_handler>:

extern void sys_arch_reboot(int type);

void k_sys_fatal_error_handler(unsigned int reason,
			       const z_arch_esf_t *esf)
{
    fb18:	b508      	push	{r3, lr}
	z_impl_log_panic();
    fb1a:	f7fd f873 	bl	cc04 <z_impl_log_panic>
	ARG_UNUSED(esf);
	ARG_UNUSED(reason);

	LOG_PANIC();

	LOG_ERR("Resetting system");
    fb1e:	2301      	movs	r3, #1
    fb20:	f04f 0100 	mov.w	r1, #0
    fb24:	4a06      	ldr	r2, [pc, #24]	; (fb40 <k_sys_fatal_error_handler+0x28>)
    fb26:	f363 0107 	bfi	r1, r3, #0, #8
    fb2a:	4b06      	ldr	r3, [pc, #24]	; (fb44 <k_sys_fatal_error_handler+0x2c>)
    fb2c:	4806      	ldr	r0, [pc, #24]	; (fb48 <k_sys_fatal_error_handler+0x30>)
    fb2e:	1a9b      	subs	r3, r3, r2
    fb30:	08db      	lsrs	r3, r3, #3
    fb32:	f363 118f 	bfi	r1, r3, #6, #10
    fb36:	f00a f9c5 	bl	19ec4 <log_0>
	sys_arch_reboot(0);
    fb3a:	2000      	movs	r0, #0
    fb3c:	f7fe faaa 	bl	e094 <sys_arch_reboot>

	CODE_UNREACHABLE;
    fb40:	0001c004 	.word	0x0001c004
    fb44:	0001c024 	.word	0x0001c024
    fb48:	0001cc80 	.word	0x0001cc80

0000fb4c <check_ext_api_requests>:
	}
};
#endif

static int check_ext_api_requests(struct device *dev)
{
    fb4c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	(void)dev;

	const struct fw_info_ext_api_request *ext_api_req =
			skip_ext_apis(&m_firmware_info);

	for (u32_t i = 0; i < m_firmware_info.ext_api_request_num; i++) {
    fb50:	2500      	movs	r5, #0
			skip_ext_apis(&m_firmware_info);
    fb52:	4c21      	ldr	r4, [pc, #132]	; (fbd8 <check_ext_api_requests+0x8c>)
 */
static inline const struct fw_info_ext_api *fw_info_ext_api_check(
							u32_t ext_api_addr)
{
	const struct fw_info_ext_api *ext_api;
	const u32_t ext_api_magic[] = {EXT_API_MAGIC};
    fb54:	4e21      	ldr	r6, [pc, #132]	; (fbdc <check_ext_api_requests+0x90>)
	for (u32_t i = 0; i < m_firmware_info.ext_api_request_num; i++) {
    fb56:	f854 8c04 	ldr.w	r8, [r4, #-4]
			/* EXT_API hard requirement not met. */
			printk("ERROR: Cannot fulfill EXT_API request.\r\n");
			k_panic();
		} else {
			/* EXT_API soft requirement not met. */
			printk("WARNING: Optional EXT_API request not "
    fb5a:	f8df 9088 	ldr.w	r9, [pc, #136]	; fbe4 <check_ext_api_requests+0x98>
{
    fb5e:	b085      	sub	sp, #20
	for (u32_t i = 0; i < m_firmware_info.ext_api_request_num; i++) {
    fb60:	45a8      	cmp	r8, r5
    fb62:	d803      	bhi.n	fb6c <check_ext_api_requests+0x20>
		}
		ADVANCE_EXT_API_REQ(ext_api_req);
	}

	return 0;
}
    fb64:	2000      	movs	r0, #0
    fb66:	b005      	add	sp, #20
    fb68:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		if (fw_info_ext_api_check((u32_t)*(ext_api_req->ext_api))
    fb6c:	6a63      	ldr	r3, [r4, #36]	; 0x24
    fb6e:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
    fb72:	681f      	ldr	r7, [r3, #0]
    fb74:	ab01      	add	r3, sp, #4
    fb76:	e883 0007 	stmia.w	r3, {r0, r1, r2}

	ext_api = (const struct fw_info_ext_api *)(ext_api_addr);
	if (memcmp(ext_api->magic, ext_api_magic, CONFIG_FW_INFO_MAGIC_LEN)
    fb7a:	220c      	movs	r2, #12
    fb7c:	4619      	mov	r1, r3
    fb7e:	4638      	mov	r0, r7
    fb80:	f00a fe41 	bl	1a806 <memcmp>
    fb84:	b990      	cbnz	r0, fbac <check_ext_api_requests+0x60>
    fb86:	b18f      	cbz	r7, fbac <check_ext_api_requests+0x60>
			&& ext_api_satisfies_req(*(ext_api_req->ext_api),
    fb88:	6a63      	ldr	r3, [r4, #36]	; 0x24
	const u32_t req_id = ext_api_req->request.ext_api_id;
    fb8a:	6921      	ldr	r1, [r4, #16]
			&& ext_api_satisfies_req(*(ext_api_req->ext_api),
    fb8c:	681b      	ldr	r3, [r3, #0]
	return ((ext_api->ext_api_id == req_id)
    fb8e:	691a      	ldr	r2, [r3, #16]
		&& ((ext_api->ext_api_flags & req_flags) == req_flags));
    fb90:	4291      	cmp	r1, r2
    fb92:	d10b      	bne.n	fbac <check_ext_api_requests+0x60>
		&&  (ext_api->ext_api_version >= req_min_version)
    fb94:	699a      	ldr	r2, [r3, #24]
	const u32_t req_min_version = ext_api_req->request.ext_api_version;
    fb96:	69a1      	ldr	r1, [r4, #24]
		&&  (ext_api->ext_api_version >= req_min_version)
    fb98:	4291      	cmp	r1, r2
    fb9a:	d807      	bhi.n	fbac <check_ext_api_requests+0x60>
	const u32_t req_max_version = ext_api_req->ext_api_max_version;
    fb9c:	69e1      	ldr	r1, [r4, #28]
		&&  (ext_api->ext_api_version <  req_max_version)
    fb9e:	4291      	cmp	r1, r2
    fba0:	d904      	bls.n	fbac <check_ext_api_requests+0x60>
	const u32_t req_flags = ext_api_req->request.ext_api_flags;
    fba2:	6962      	ldr	r2, [r4, #20]
		&& ((ext_api->ext_api_flags & req_flags) == req_flags));
    fba4:	695b      	ldr	r3, [r3, #20]
    fba6:	ea32 0303 	bics.w	r3, r2, r3
    fbaa:	d00a      	beq.n	fbc2 <check_ext_api_requests+0x76>
		} else if (ext_api_req->required) {
    fbac:	6a27      	ldr	r7, [r4, #32]
    fbae:	b167      	cbz	r7, fbca <check_ext_api_requests+0x7e>
			printk("ERROR: Cannot fulfill EXT_API request.\r\n");
    fbb0:	480b      	ldr	r0, [pc, #44]	; (fbe0 <check_ext_api_requests+0x94>)
    fbb2:	f00a f90f 	bl	19dd4 <printk>
			k_panic();
    fbb6:	4040      	eors	r0, r0
    fbb8:	f380 8811 	msr	BASEPRI, r0
    fbbc:	f04f 0004 	mov.w	r0, #4
    fbc0:	df02      	svc	2
		ADVANCE_EXT_API_REQ(ext_api_req);
    fbc2:	68e3      	ldr	r3, [r4, #12]
	for (u32_t i = 0; i < m_firmware_info.ext_api_request_num; i++) {
    fbc4:	3501      	adds	r5, #1
		ADVANCE_EXT_API_REQ(ext_api_req);
    fbc6:	441c      	add	r4, r3
    fbc8:	e7ca      	b.n	fb60 <check_ext_api_requests+0x14>
			printk("WARNING: Optional EXT_API request not "
    fbca:	4648      	mov	r0, r9
    fbcc:	f00a f902 	bl	19dd4 <printk>
			*ext_api_req->ext_api = NULL;
    fbd0:	6a63      	ldr	r3, [r4, #36]	; 0x24
    fbd2:	601f      	str	r7, [r3, #0]
    fbd4:	e7f5      	b.n	fbc2 <check_ext_api_requests+0x76>
    fbd6:	bf00      	nop
    fbd8:	0000c23c 	.word	0x0000c23c
    fbdc:	0001c080 	.word	0x0001c080
    fbe0:	0001cc9d 	.word	0x0001cc9d
    fbe4:	0001ccc6 	.word	0x0001ccc6

0000fbe8 <rpc_logobj_client_evt_handler>:
    fbe8:	b120      	cbz	r0, fbf4 <rpc_logobj_client_evt_handler+0xc>
    fbea:	f850 1b08 	ldr.w	r1, [r0], #8
    fbee:	0c09      	lsrs	r1, r1, #16
    fbf0:	f000 b852 	b.w	fc98 <logobj_event_handler>
    fbf4:	4770      	bx	lr
    fbf6:	bf00      	nop

0000fbf8 <rpc_logobj_client_init>:
    fbf8:	4801      	ldr	r0, [pc, #4]	; (fc00 <rpc_logobj_client_init+0x8>)
    fbfa:	f006 bbd1 	b.w	163a0 <rpc_client_register>
    fbfe:	bf00      	nop
    fc00:	0001c248 	.word	0x0001c248

0000fc04 <rpc_logobj_client_request_alloc>:
    fc04:	2300      	movs	r3, #0
    fc06:	b510      	push	{r4, lr}
    fc08:	b082      	sub	sp, #8
    fc0a:	9301      	str	r3, [sp, #4]
    fc0c:	b961      	cbnz	r1, fc28 <rpc_logobj_client_request_alloc+0x24>
    fc0e:	b170      	cbz	r0, fc2e <rpc_logobj_client_request_alloc+0x2a>
    fc10:	4604      	mov	r4, r0
    fc12:	aa01      	add	r2, sp, #4
    fc14:	2009      	movs	r0, #9
    fc16:	f006 fdfb 	bl	16810 <rpc_message_alloc>
    fc1a:	b918      	cbnz	r0, fc24 <rpc_logobj_client_request_alloc+0x20>
    fc1c:	9b01      	ldr	r3, [sp, #4]
    fc1e:	b10b      	cbz	r3, fc24 <rpc_logobj_client_request_alloc+0x20>
    fc20:	3308      	adds	r3, #8
    fc22:	6023      	str	r3, [r4, #0]
    fc24:	b002      	add	sp, #8
    fc26:	bd10      	pop	{r4, pc}
    fc28:	200f      	movs	r0, #15
    fc2a:	b002      	add	sp, #8
    fc2c:	bd10      	pop	{r4, pc}
    fc2e:	200e      	movs	r0, #14
    fc30:	b002      	add	sp, #8
    fc32:	bd10      	pop	{r4, pc}

0000fc34 <rpc_logobj_client_request_send>:
    fc34:	f401 4370 	and.w	r3, r1, #61440	; 0xf000
    fc38:	f5b3 4fe0 	cmp.w	r3, #28672	; 0x7000
    fc3c:	d10b      	bne.n	fc56 <rpc_logobj_client_request_send+0x22>
    fc3e:	b160      	cbz	r0, fc5a <rpc_logobj_client_request_send+0x26>
    fc40:	4603      	mov	r3, r0
    fc42:	f830 2c08 	ldrh.w	r2, [r0, #-8]
    fc46:	2009      	movs	r0, #9
    fc48:	ea42 4101 	orr.w	r1, r2, r1, lsl #16
    fc4c:	f843 1d08 	str.w	r1, [r3, #-8]!
    fc50:	4619      	mov	r1, r3
    fc52:	f006 bdc5 	b.w	167e0 <rpc_message_send>
    fc56:	200f      	movs	r0, #15
    fc58:	4770      	bx	lr
    fc5a:	200e      	movs	r0, #14
    fc5c:	4770      	bx	lr
    fc5e:	bf00      	nop

0000fc60 <rpc_logobj_client_message_free>:
    fc60:	b120      	cbz	r0, fc6c <rpc_logobj_client_message_free+0xc>
    fc62:	f1a0 0108 	sub.w	r1, r0, #8
    fc66:	2009      	movs	r0, #9
    fc68:	f006 be04 	b.w	16874 <rpc_message_free>
    fc6c:	200e      	movs	r0, #14
    fc6e:	4770      	bx	lr

0000fc70 <rpc_logobj_client_data_free>:
    fc70:	b118      	cbz	r0, fc7a <rpc_logobj_client_data_free+0xa>
    fc72:	4601      	mov	r1, r0
    fc74:	2009      	movs	r0, #9
    fc76:	f006 bf0f 	b.w	16a98 <rpc_message_data_free>
    fc7a:	200e      	movs	r0, #14
    fc7c:	4770      	bx	lr
    fc7e:	bf00      	nop

0000fc80 <packet_free_cb>:
    fc80:	b510      	push	{r4, lr}
    fc82:	4604      	mov	r4, r0
    fc84:	6800      	ldr	r0, [r0, #0]
    fc86:	f7ff fff3 	bl	fc70 <rpc_logobj_client_data_free>
    fc8a:	68a0      	ldr	r0, [r4, #8]
    fc8c:	b118      	cbz	r0, fc96 <packet_free_cb+0x16>
    fc8e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    fc92:	f001 b935 	b.w	10f00 <nrf_free>
    fc96:	bd10      	pop	{r4, pc}

0000fc98 <logobj_event_handler>:
    fc98:	b530      	push	{r4, r5, lr}
    fc9a:	4b3b      	ldr	r3, [pc, #236]	; (fd88 <logobj_event_handler+0xf0>)
    fc9c:	b085      	sub	sp, #20
    fc9e:	681d      	ldr	r5, [r3, #0]
    fca0:	2d00      	cmp	r5, #0
    fca2:	d04c      	beq.n	fd3e <logobj_event_handler+0xa6>
    fca4:	f248 0302 	movw	r3, #32770	; 0x8002
    fca8:	4299      	cmp	r1, r3
    fcaa:	d053      	beq.n	fd54 <logobj_event_handler+0xbc>
    fcac:	d91c      	bls.n	fce8 <logobj_event_handler+0x50>
    fcae:	f248 0303 	movw	r3, #32771	; 0x8003
    fcb2:	4299      	cmp	r1, r3
    fcb4:	d05a      	beq.n	fd6c <logobj_event_handler+0xd4>
    fcb6:	f249 0301 	movw	r3, #36865	; 0x9001
    fcba:	4299      	cmp	r1, r3
    fcbc:	d147      	bne.n	fd4e <logobj_event_handler+0xb6>
    fcbe:	2400      	movs	r4, #0
    fcc0:	6843      	ldr	r3, [r0, #4]
    fcc2:	6802      	ldr	r2, [r0, #0]
    fcc4:	e9cd 4402 	strd	r4, r4, [sp, #8]
    fcc8:	e9cd 2300 	strd	r2, r3, [sp]
    fccc:	69e8      	ldr	r0, [r5, #28]
    fcce:	4669      	mov	r1, sp
    fcd0:	6803      	ldr	r3, [r0, #0]
    fcd2:	685b      	ldr	r3, [r3, #4]
    fcd4:	4798      	blx	r3
    fcd6:	3001      	adds	r0, #1
    fcd8:	d04e      	beq.n	fd78 <logobj_event_handler+0xe0>
    fcda:	4620      	mov	r0, r4
    fcdc:	682b      	ldr	r3, [r5, #0]
    fcde:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
    fce2:	602b      	str	r3, [r5, #0]
    fce4:	b005      	add	sp, #20
    fce6:	bd30      	pop	{r4, r5, pc}
    fce8:	f248 0301 	movw	r3, #32769	; 0x8001
    fcec:	4299      	cmp	r1, r3
    fcee:	d12e      	bne.n	fd4e <logobj_event_handler+0xb6>
    fcf0:	68c3      	ldr	r3, [r0, #12]
    fcf2:	2b00      	cmp	r3, #0
    fcf4:	d135      	bne.n	fd62 <logobj_event_handler+0xca>
    fcf6:	6828      	ldr	r0, [r5, #0]
    fcf8:	f410 0080 	ands.w	r0, r0, #4194304	; 0x400000
    fcfc:	d03e      	beq.n	fd7c <logobj_event_handler+0xe4>
    fcfe:	682b      	ldr	r3, [r5, #0]
    fd00:	b29b      	uxth	r3, r3
    fd02:	2b01      	cmp	r3, #1
    fd04:	d105      	bne.n	fd12 <logobj_event_handler+0x7a>
    fd06:	682b      	ldr	r3, [r5, #0]
    fd08:	0c1b      	lsrs	r3, r3, #16
    fd0a:	041b      	lsls	r3, r3, #16
    fd0c:	f043 0302 	orr.w	r3, r3, #2
    fd10:	602b      	str	r3, [r5, #0]
    fd12:	4b1e      	ldr	r3, [pc, #120]	; (fd8c <logobj_event_handler+0xf4>)
    fd14:	781a      	ldrb	r2, [r3, #0]
    fd16:	f002 01ff 	and.w	r1, r2, #255	; 0xff
    fd1a:	2a00      	cmp	r2, #0
    fd1c:	d031      	beq.n	fd82 <logobj_event_handler+0xea>
    fd1e:	4a1c      	ldr	r2, [pc, #112]	; (fd90 <logobj_event_handler+0xf8>)
    fd20:	7811      	ldrb	r1, [r2, #0]
    fd22:	b909      	cbnz	r1, fd28 <logobj_event_handler+0x90>
    fd24:	2101      	movs	r1, #1
    fd26:	7011      	strb	r1, [r2, #0]
    fd28:	2000      	movs	r0, #0
    fd2a:	7018      	strb	r0, [r3, #0]
    fd2c:	682b      	ldr	r3, [r5, #0]
    fd2e:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
    fd32:	602b      	str	r3, [r5, #0]
    fd34:	682b      	ldr	r3, [r5, #0]
    fd36:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
    fd3a:	602b      	str	r3, [r5, #0]
    fd3c:	e7d2      	b.n	fce4 <logobj_event_handler+0x4c>
    fd3e:	6800      	ldr	r0, [r0, #0]
    fd40:	2800      	cmp	r0, #0
    fd42:	d0cf      	beq.n	fce4 <logobj_event_handler+0x4c>
    fd44:	f7ff ff94 	bl	fc70 <rpc_logobj_client_data_free>
    fd48:	4628      	mov	r0, r5
    fd4a:	b005      	add	sp, #20
    fd4c:	bd30      	pop	{r4, r5, pc}
    fd4e:	2000      	movs	r0, #0
    fd50:	b005      	add	sp, #20
    fd52:	bd30      	pop	{r4, r5, pc}
    fd54:	682b      	ldr	r3, [r5, #0]
    fd56:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
    fd5a:	d00b      	beq.n	fd74 <logobj_event_handler+0xdc>
    fd5c:	68c0      	ldr	r0, [r0, #12]
    fd5e:	2800      	cmp	r0, #0
    fd60:	d0e4      	beq.n	fd2c <logobj_event_handler+0x94>
    fd62:	230e      	movs	r3, #14
    fd64:	2000      	movs	r0, #0
    fd66:	606b      	str	r3, [r5, #4]
    fd68:	b005      	add	sp, #20
    fd6a:	bd30      	pop	{r4, r5, pc}
    fd6c:	68c3      	ldr	r3, [r0, #12]
    fd6e:	2b01      	cmp	r3, #1
    fd70:	d1a5      	bne.n	fcbe <logobj_event_handler+0x26>
    fd72:	e7f6      	b.n	fd62 <logobj_event_handler+0xca>
    fd74:	4618      	mov	r0, r3
    fd76:	e7b5      	b.n	fce4 <logobj_event_handler+0x4c>
    fd78:	2002      	movs	r0, #2
    fd7a:	e7b3      	b.n	fce4 <logobj_event_handler+0x4c>
    fd7c:	230e      	movs	r3, #14
    fd7e:	606b      	str	r3, [r5, #4]
    fd80:	e7b0      	b.n	fce4 <logobj_event_handler+0x4c>
    fd82:	4a03      	ldr	r2, [pc, #12]	; (fd90 <logobj_event_handler+0xf8>)
    fd84:	7011      	strb	r1, [r2, #0]
    fd86:	e7cf      	b.n	fd28 <logobj_event_handler+0x90>
    fd88:	20020300 	.word	0x20020300
    fd8c:	20025118 	.word	0x20025118
    fd90:	20025119 	.word	0x20025119

0000fd94 <logobj_interface_init>:
    fd94:	2300      	movs	r3, #0
    fd96:	b510      	push	{r4, lr}
    fd98:	4907      	ldr	r1, [pc, #28]	; (fdb8 <logobj_interface_init+0x24>)
    fd9a:	4a08      	ldr	r2, [pc, #32]	; (fdbc <logobj_interface_init+0x28>)
    fd9c:	4c08      	ldr	r4, [pc, #32]	; (fdc0 <logobj_interface_init+0x2c>)
    fd9e:	4809      	ldr	r0, [pc, #36]	; (fdc4 <logobj_interface_init+0x30>)
    fda0:	7023      	strb	r3, [r4, #0]
    fda2:	6003      	str	r3, [r0, #0]
    fda4:	700b      	strb	r3, [r1, #0]
    fda6:	6013      	str	r3, [r2, #0]
    fda8:	f7ff ff26 	bl	fbf8 <rpc_logobj_client_init>
    fdac:	3000      	adds	r0, #0
    fdae:	bf18      	it	ne
    fdb0:	2001      	movne	r0, #1
    fdb2:	4240      	negs	r0, r0
    fdb4:	bd10      	pop	{r4, pc}
    fdb6:	bf00      	nop
    fdb8:	20025118 	.word	0x20025118
    fdbc:	200202fc 	.word	0x200202fc
    fdc0:	20025119 	.word	0x20025119
    fdc4:	20020300 	.word	0x20020300

0000fdc8 <logobj_interface_open>:
    fdc8:	2300      	movs	r3, #0
    fdca:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    fdce:	2866      	cmp	r0, #102	; 0x66
    fdd0:	b082      	sub	sp, #8
    fdd2:	9300      	str	r3, [sp, #0]
    fdd4:	d172      	bne.n	febc <logobj_interface_open+0xf4>
    fdd6:	2902      	cmp	r1, #2
    fdd8:	4689      	mov	r9, r1
    fdda:	d16f      	bne.n	febc <logobj_interface_open+0xf4>
    fddc:	f240 2305 	movw	r3, #517	; 0x205
    fde0:	429a      	cmp	r2, r3
    fde2:	4692      	mov	sl, r2
    fde4:	d16a      	bne.n	febc <logobj_interface_open+0xf4>
    fde6:	4f48      	ldr	r7, [pc, #288]	; (ff08 <logobj_interface_open+0x140>)
    fde8:	683d      	ldr	r5, [r7, #0]
    fdea:	2d00      	cmp	r5, #0
    fdec:	d17c      	bne.n	fee8 <logobj_interface_open+0x120>
    fdee:	4680      	mov	r8, r0
    fdf0:	4a46      	ldr	r2, [pc, #280]	; (ff0c <logobj_interface_open+0x144>)
    fdf2:	4668      	mov	r0, sp
    fdf4:	f006 f872 	bl	15edc <interface_socket_allocate>
    fdf8:	9b00      	ldr	r3, [sp, #0]
    fdfa:	4606      	mov	r6, r0
    fdfc:	2b00      	cmp	r3, #0
    fdfe:	d07d      	beq.n	fefc <logobj_interface_open+0x134>
    fe00:	4629      	mov	r1, r5
    fe02:	2204      	movs	r2, #4
    fe04:	4842      	ldr	r0, [pc, #264]	; (ff10 <logobj_interface_open+0x148>)
    fe06:	603b      	str	r3, [r7, #0]
    fe08:	f00a fd37 	bl	1a87a <memset>
    fe0c:	9c00      	ldr	r4, [sp, #0]
    fe0e:	4629      	mov	r1, r5
    fe10:	e9c4 8903 	strd	r8, r9, [r4, #12]
    fe14:	f8c4 a014 	str.w	sl, [r4, #20]
    fe18:	a801      	add	r0, sp, #4
    fe1a:	f7ff fef3 	bl	fc04 <rpc_logobj_client_request_alloc>
    fe1e:	2800      	cmp	r0, #0
    fe20:	d13c      	bne.n	fe9c <logobj_interface_open+0xd4>
    fe22:	2201      	movs	r2, #1
    fe24:	2104      	movs	r1, #4
    fe26:	9b01      	ldr	r3, [sp, #4]
    fe28:	4d3a      	ldr	r5, [pc, #232]	; (ff14 <logobj_interface_open+0x14c>)
    fe2a:	7358      	strb	r0, [r3, #13]
    fe2c:	7398      	strb	r0, [r3, #14]
    fe2e:	73d8      	strb	r0, [r3, #15]
    fe30:	7258      	strb	r0, [r3, #9]
    fe32:	7298      	strb	r0, [r3, #10]
    fe34:	72d8      	strb	r0, [r3, #11]
    fe36:	7219      	strb	r1, [r3, #8]
    fe38:	702a      	strb	r2, [r5, #0]
    fe3a:	731a      	strb	r2, [r3, #12]
    fe3c:	6822      	ldr	r2, [r4, #0]
    fe3e:	4618      	mov	r0, r3
    fe40:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
    fe44:	6022      	str	r2, [r4, #0]
    fe46:	f247 0101 	movw	r1, #28673	; 0x7001
    fe4a:	f7ff fef3 	bl	fc34 <rpc_logobj_client_request_send>
    fe4e:	bb38      	cbnz	r0, fea0 <logobj_interface_open+0xd8>
    fe50:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
    fe54:	f04f 33ff 	mov.w	r3, #4294967295
    fe58:	4611      	mov	r1, r2
    fe5a:	4630      	mov	r0, r6
    fe5c:	f006 f8f0 	bl	16040 <interface_socket_wait>
    fe60:	4604      	mov	r4, r0
    fe62:	b310      	cbz	r0, feaa <logobj_interface_open+0xe2>
    fe64:	9a00      	ldr	r2, [sp, #0]
    fe66:	2e00      	cmp	r6, #0
    fe68:	6813      	ldr	r3, [r2, #0]
    fe6a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
    fe6e:	6013      	str	r3, [r2, #0]
    fe70:	9a00      	ldr	r2, [sp, #0]
    fe72:	6813      	ldr	r3, [r2, #0]
    fe74:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
    fe78:	6013      	str	r3, [r2, #0]
    fe7a:	9a00      	ldr	r2, [sp, #0]
    fe7c:	6813      	ldr	r3, [r2, #0]
    fe7e:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
    fe82:	6013      	str	r3, [r2, #0]
    fe84:	da36      	bge.n	fef4 <logobj_interface_open+0x12c>
    fe86:	2300      	movs	r3, #0
    fe88:	4620      	mov	r0, r4
    fe8a:	603b      	str	r3, [r7, #0]
    fe8c:	f04f 36ff 	mov.w	r6, #4294967295
    fe90:	f7ff fca8 	bl	f7e4 <bsd_os_errno_set>
    fe94:	4630      	mov	r0, r6
    fe96:	b002      	add	sp, #8
    fe98:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    fe9c:	240c      	movs	r4, #12
    fe9e:	e7e1      	b.n	fe64 <logobj_interface_open+0x9c>
    fea0:	9801      	ldr	r0, [sp, #4]
    fea2:	f7ff fedd 	bl	fc60 <rpc_logobj_client_message_free>
    fea6:	2405      	movs	r4, #5
    fea8:	e7dc      	b.n	fe64 <logobj_interface_open+0x9c>
    feaa:	4630      	mov	r0, r6
    feac:	f006 f93c 	bl	16128 <interface_socket_from_handle_get>
    feb0:	b150      	cbz	r0, fec8 <logobj_interface_open+0x100>
    feb2:	6844      	ldr	r4, [r0, #4]
    feb4:	b144      	cbz	r4, fec8 <logobj_interface_open+0x100>
    feb6:	2300      	movs	r3, #0
    feb8:	6043      	str	r3, [r0, #4]
    feba:	e7d3      	b.n	fe64 <logobj_interface_open+0x9c>
    febc:	2016      	movs	r0, #22
    febe:	f7ff fc91 	bl	f7e4 <bsd_os_errno_set>
    fec2:	f04f 36ff 	mov.w	r6, #4294967295
    fec6:	e7e5      	b.n	fe94 <logobj_interface_open+0xcc>
    fec8:	9a00      	ldr	r2, [sp, #0]
    feca:	6813      	ldr	r3, [r2, #0]
    fecc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
    fed0:	6013      	str	r3, [r2, #0]
    fed2:	9a00      	ldr	r2, [sp, #0]
    fed4:	6813      	ldr	r3, [r2, #0]
    fed6:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
    feda:	6013      	str	r3, [r2, #0]
    fedc:	9a00      	ldr	r2, [sp, #0]
    fede:	6813      	ldr	r3, [r2, #0]
    fee0:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
    fee4:	6013      	str	r3, [r2, #0]
    fee6:	e7d5      	b.n	fe94 <logobj_interface_open+0xcc>
    fee8:	2001      	movs	r0, #1
    feea:	f7ff fc7b 	bl	f7e4 <bsd_os_errno_set>
    feee:	f04f 36ff 	mov.w	r6, #4294967295
    fef2:	e7cf      	b.n	fe94 <logobj_interface_open+0xcc>
    fef4:	4630      	mov	r0, r6
    fef6:	f006 f855 	bl	15fa4 <interface_socket_free>
    fefa:	e7c4      	b.n	fe86 <logobj_interface_open+0xbe>
    fefc:	2018      	movs	r0, #24
    fefe:	f7ff fc71 	bl	f7e4 <bsd_os_errno_set>
    ff02:	f04f 36ff 	mov.w	r6, #4294967295
    ff06:	e7c5      	b.n	fe94 <logobj_interface_open+0xcc>
    ff08:	20020300 	.word	0x20020300
    ff0c:	0000fc81 	.word	0x0000fc81
    ff10:	200202fc 	.word	0x200202fc
    ff14:	20025118 	.word	0x20025118

0000ff18 <logobj_interface_read>:
    ff18:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    ff1c:	b085      	sub	sp, #20
    ff1e:	2900      	cmp	r1, #0
    ff20:	d068      	beq.n	fff4 <logobj_interface_read+0xdc>
    ff22:	2a00      	cmp	r2, #0
    ff24:	4617      	mov	r7, r2
    ff26:	dd65      	ble.n	fff4 <logobj_interface_read+0xdc>
    ff28:	461d      	mov	r5, r3
    ff2a:	4680      	mov	r8, r0
    ff2c:	460e      	mov	r6, r1
    ff2e:	f006 f8fb 	bl	16128 <interface_socket_from_handle_get>
    ff32:	4604      	mov	r4, r0
    ff34:	2800      	cmp	r0, #0
    ff36:	d063      	beq.n	10000 <logobj_interface_read+0xe8>
    ff38:	bb4d      	cbnz	r5, ff8e <logobj_interface_read+0x76>
    ff3a:	69e0      	ldr	r0, [r4, #28]
    ff3c:	07aa      	lsls	r2, r5, #30
    ff3e:	6803      	ldr	r3, [r0, #0]
    ff40:	68db      	ldr	r3, [r3, #12]
    ff42:	d52d      	bpl.n	ffa0 <logobj_interface_read+0x88>
    ff44:	4798      	blx	r3
    ff46:	3001      	adds	r0, #1
    ff48:	d044      	beq.n	ffd4 <logobj_interface_read+0xbc>
    ff4a:	6823      	ldr	r3, [r4, #0]
    ff4c:	69e0      	ldr	r0, [r4, #28]
    ff4e:	f413 3380 	ands.w	r3, r3, #65536	; 0x10000
    ff52:	d041      	beq.n	ffd8 <logobj_interface_read+0xc0>
    ff54:	2100      	movs	r1, #0
    ff56:	6823      	ldr	r3, [r4, #0]
    ff58:	462a      	mov	r2, r5
    ff5a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
    ff5e:	6023      	str	r3, [r4, #0]
    ff60:	e9cd 1102 	strd	r1, r1, [sp, #8]
    ff64:	e9cd 6700 	strd	r6, r7, [sp]
    ff68:	6803      	ldr	r3, [r0, #0]
    ff6a:	4669      	mov	r1, sp
    ff6c:	689b      	ldr	r3, [r3, #8]
    ff6e:	4798      	blx	r3
    ff70:	4605      	mov	r5, r0
    ff72:	69e0      	ldr	r0, [r4, #28]
    ff74:	6803      	ldr	r3, [r0, #0]
    ff76:	68db      	ldr	r3, [r3, #12]
    ff78:	4798      	blx	r3
    ff7a:	3001      	adds	r0, #1
    ff7c:	d003      	beq.n	ff86 <logobj_interface_read+0x6e>
    ff7e:	6823      	ldr	r3, [r4, #0]
    ff80:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
    ff84:	6023      	str	r3, [r4, #0]
    ff86:	4628      	mov	r0, r5
    ff88:	b005      	add	sp, #20
    ff8a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    ff8e:	f015 0f0a 	tst.w	r5, #10
    ff92:	d1d2      	bne.n	ff3a <logobj_interface_read+0x22>
    ff94:	202d      	movs	r0, #45	; 0x2d
    ff96:	f7ff fc25 	bl	f7e4 <bsd_os_errno_set>
    ff9a:	f04f 35ff 	mov.w	r5, #4294967295
    ff9e:	e7f2      	b.n	ff86 <logobj_interface_read+0x6e>
    ffa0:	6822      	ldr	r2, [r4, #0]
    ffa2:	f012 5980 	ands.w	r9, r2, #268435456	; 0x10000000
    ffa6:	d1cd      	bne.n	ff44 <logobj_interface_read+0x2c>
    ffa8:	4798      	blx	r3
    ffaa:	1c43      	adds	r3, r0, #1
    ffac:	d1cd      	bne.n	ff4a <logobj_interface_read+0x32>
    ffae:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    ffb2:	6a23      	ldr	r3, [r4, #32]
    ffb4:	4611      	mov	r1, r2
    ffb6:	2b00      	cmp	r3, #0
    ffb8:	bf08      	it	eq
    ffba:	4603      	moveq	r3, r0
    ffbc:	4640      	mov	r0, r8
    ffbe:	f006 f83f 	bl	16040 <interface_socket_wait>
    ffc2:	b158      	cbz	r0, ffdc <logobj_interface_read+0xc4>
    ffc4:	f04f 35ff 	mov.w	r5, #4294967295
    ffc8:	f7ff fc0c 	bl	f7e4 <bsd_os_errno_set>
    ffcc:	4628      	mov	r0, r5
    ffce:	b005      	add	sp, #20
    ffd0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    ffd4:	2023      	movs	r0, #35	; 0x23
    ffd6:	e7f5      	b.n	ffc4 <logobj_interface_read+0xac>
    ffd8:	461d      	mov	r5, r3
    ffda:	e7cb      	b.n	ff74 <logobj_interface_read+0x5c>
    ffdc:	4640      	mov	r0, r8
    ffde:	f006 f8a3 	bl	16128 <interface_socket_from_handle_get>
    ffe2:	4603      	mov	r3, r0
    ffe4:	2800      	cmp	r0, #0
    ffe6:	d0b0      	beq.n	ff4a <logobj_interface_read+0x32>
    ffe8:	6840      	ldr	r0, [r0, #4]
    ffea:	2800      	cmp	r0, #0
    ffec:	d0ad      	beq.n	ff4a <logobj_interface_read+0x32>
    ffee:	f8c3 9004 	str.w	r9, [r3, #4]
    fff2:	e7e7      	b.n	ffc4 <logobj_interface_read+0xac>
    fff4:	2016      	movs	r0, #22
    fff6:	f7ff fbf5 	bl	f7e4 <bsd_os_errno_set>
    fffa:	f04f 35ff 	mov.w	r5, #4294967295
    fffe:	e7c2      	b.n	ff86 <logobj_interface_read+0x6e>
   10000:	2009      	movs	r0, #9
   10002:	f7ff fbef 	bl	f7e4 <bsd_os_errno_set>
   10006:	f04f 35ff 	mov.w	r5, #4294967295
   1000a:	e7bc      	b.n	ff86 <logobj_interface_read+0x6e>

0001000c <logobj_interface_write>:
   1000c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   10010:	b082      	sub	sp, #8
   10012:	2900      	cmp	r1, #0
   10014:	d05e      	beq.n	100d4 <logobj_interface_write+0xc8>
   10016:	2a04      	cmp	r2, #4
   10018:	d15c      	bne.n	100d4 <logobj_interface_write+0xc8>
   1001a:	461e      	mov	r6, r3
   1001c:	4607      	mov	r7, r0
   1001e:	460d      	mov	r5, r1
   10020:	f006 f882 	bl	16128 <interface_socket_from_handle_get>
   10024:	4604      	mov	r4, r0
   10026:	2800      	cmp	r0, #0
   10028:	d070      	beq.n	1010c <logobj_interface_write+0x100>
   1002a:	b1e6      	cbz	r6, 10066 <logobj_interface_write+0x5a>
   1002c:	07b0      	lsls	r0, r6, #30
   1002e:	d567      	bpl.n	10100 <logobj_interface_write+0xf4>
   10030:	6823      	ldr	r3, [r4, #0]
   10032:	039b      	lsls	r3, r3, #14
   10034:	d560      	bpl.n	100f8 <logobj_interface_write+0xec>
   10036:	2600      	movs	r6, #0
   10038:	6823      	ldr	r3, [r4, #0]
   1003a:	2100      	movs	r1, #0
   1003c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
   10040:	6023      	str	r3, [r4, #0]
   10042:	a801      	add	r0, sp, #4
   10044:	f8d5 8000 	ldr.w	r8, [r5]
   10048:	f7ff fddc 	bl	fc04 <rpc_logobj_client_request_alloc>
   1004c:	b198      	cbz	r0, 10076 <logobj_interface_write+0x6a>
   1004e:	200c      	movs	r0, #12
   10050:	6823      	ldr	r3, [r4, #0]
   10052:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   10056:	6023      	str	r3, [r4, #0]
   10058:	f7ff fbc4 	bl	f7e4 <bsd_os_errno_set>
   1005c:	f04f 30ff 	mov.w	r0, #4294967295
   10060:	b002      	add	sp, #8
   10062:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   10066:	6803      	ldr	r3, [r0, #0]
   10068:	00d9      	lsls	r1, r3, #3
   1006a:	d4e1      	bmi.n	10030 <logobj_interface_write+0x24>
   1006c:	6803      	ldr	r3, [r0, #0]
   1006e:	039a      	lsls	r2, r3, #14
   10070:	d544      	bpl.n	100fc <logobj_interface_write+0xf0>
   10072:	2601      	movs	r6, #1
   10074:	e7e0      	b.n	10038 <logobj_interface_write+0x2c>
   10076:	2504      	movs	r5, #4
   10078:	9b01      	ldr	r3, [sp, #4]
   1007a:	f247 0103 	movw	r1, #28675	; 0x7003
   1007e:	f8c3 800c 	str.w	r8, [r3, #12]
   10082:	7258      	strb	r0, [r3, #9]
   10084:	7298      	strb	r0, [r3, #10]
   10086:	72d8      	strb	r0, [r3, #11]
   10088:	721d      	strb	r5, [r3, #8]
   1008a:	4618      	mov	r0, r3
   1008c:	f7ff fdd2 	bl	fc34 <rpc_logobj_client_request_send>
   10090:	4680      	mov	r8, r0
   10092:	b9b0      	cbnz	r0, 100c2 <logobj_interface_write+0xb6>
   10094:	b93e      	cbnz	r6, 100a6 <logobj_interface_write+0x9a>
   10096:	4628      	mov	r0, r5
   10098:	6823      	ldr	r3, [r4, #0]
   1009a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   1009e:	6023      	str	r3, [r4, #0]
   100a0:	b002      	add	sp, #8
   100a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   100a6:	f44f 3280 	mov.w	r2, #65536	; 0x10000
   100aa:	f04f 33ff 	mov.w	r3, #4294967295
   100ae:	4611      	mov	r1, r2
   100b0:	4638      	mov	r0, r7
   100b2:	f005 ffc5 	bl	16040 <interface_socket_wait>
   100b6:	b198      	cbz	r0, 100e0 <logobj_interface_write+0xd4>
   100b8:	6823      	ldr	r3, [r4, #0]
   100ba:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   100be:	6023      	str	r3, [r4, #0]
   100c0:	e7ca      	b.n	10058 <logobj_interface_write+0x4c>
   100c2:	9801      	ldr	r0, [sp, #4]
   100c4:	f7ff fdcc 	bl	fc60 <rpc_logobj_client_message_free>
   100c8:	6823      	ldr	r3, [r4, #0]
   100ca:	2005      	movs	r0, #5
   100cc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   100d0:	6023      	str	r3, [r4, #0]
   100d2:	e7c1      	b.n	10058 <logobj_interface_write+0x4c>
   100d4:	2016      	movs	r0, #22
   100d6:	f7ff fb85 	bl	f7e4 <bsd_os_errno_set>
   100da:	f04f 30ff 	mov.w	r0, #4294967295
   100de:	e7bf      	b.n	10060 <logobj_interface_write+0x54>
   100e0:	4638      	mov	r0, r7
   100e2:	f006 f821 	bl	16128 <interface_socket_from_handle_get>
   100e6:	4603      	mov	r3, r0
   100e8:	2800      	cmp	r0, #0
   100ea:	d0d4      	beq.n	10096 <logobj_interface_write+0x8a>
   100ec:	6840      	ldr	r0, [r0, #4]
   100ee:	2800      	cmp	r0, #0
   100f0:	d0d1      	beq.n	10096 <logobj_interface_write+0x8a>
   100f2:	f8c3 8004 	str.w	r8, [r3, #4]
   100f6:	e7df      	b.n	100b8 <logobj_interface_write+0xac>
   100f8:	2073      	movs	r0, #115	; 0x73
   100fa:	e7ad      	b.n	10058 <logobj_interface_write+0x4c>
   100fc:	2009      	movs	r0, #9
   100fe:	e7ab      	b.n	10058 <logobj_interface_write+0x4c>
   10100:	202d      	movs	r0, #45	; 0x2d
   10102:	f7ff fb6f 	bl	f7e4 <bsd_os_errno_set>
   10106:	f04f 30ff 	mov.w	r0, #4294967295
   1010a:	e7a9      	b.n	10060 <logobj_interface_write+0x54>
   1010c:	2009      	movs	r0, #9
   1010e:	f7ff fb69 	bl	f7e4 <bsd_os_errno_set>
   10112:	f04f 30ff 	mov.w	r0, #4294967295
   10116:	e7a3      	b.n	10060 <logobj_interface_write+0x54>

00010118 <logobj_interface_setopt>:
   10118:	b5f0      	push	{r4, r5, r6, r7, lr}
   1011a:	2901      	cmp	r1, #1
   1011c:	b085      	sub	sp, #20
   1011e:	d068      	beq.n	101f2 <logobj_interface_setopt+0xda>
   10120:	461e      	mov	r6, r3
   10122:	f240 2305 	movw	r3, #517	; 0x205
   10126:	4299      	cmp	r1, r3
   10128:	f040 8095 	bne.w	10256 <logobj_interface_setopt+0x13e>
   1012c:	4607      	mov	r7, r0
   1012e:	4615      	mov	r5, r2
   10130:	f005 fffa 	bl	16128 <interface_socket_from_handle_get>
   10134:	4604      	mov	r4, r0
   10136:	2800      	cmp	r0, #0
   10138:	f000 80b2 	beq.w	102a0 <logobj_interface_setopt+0x188>
   1013c:	2d01      	cmp	r5, #1
   1013e:	d019      	beq.n	10174 <logobj_interface_setopt+0x5c>
   10140:	2d02      	cmp	r5, #2
   10142:	d010      	beq.n	10166 <logobj_interface_setopt+0x4e>
   10144:	252a      	movs	r5, #42	; 0x2a
   10146:	6803      	ldr	r3, [r0, #0]
   10148:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
   1014c:	6023      	str	r3, [r4, #0]
   1014e:	6823      	ldr	r3, [r4, #0]
   10150:	4628      	mov	r0, r5
   10152:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
   10156:	6023      	str	r3, [r4, #0]
   10158:	f7ff fb44 	bl	f7e4 <bsd_os_errno_set>
   1015c:	f04f 35ff 	mov.w	r5, #4294967295
   10160:	4628      	mov	r0, r5
   10162:	b005      	add	sp, #20
   10164:	bdf0      	pop	{r4, r5, r6, r7, pc}
   10166:	b116      	cbz	r6, 1016e <logobj_interface_setopt+0x56>
   10168:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   1016a:	2b01      	cmp	r3, #1
   1016c:	d049      	beq.n	10202 <logobj_interface_setopt+0xea>
   1016e:	6823      	ldr	r3, [r4, #0]
   10170:	2516      	movs	r5, #22
   10172:	e7e9      	b.n	10148 <logobj_interface_setopt+0x30>
   10174:	2e00      	cmp	r6, #0
   10176:	d0fa      	beq.n	1016e <logobj_interface_setopt+0x56>
   10178:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   1017a:	2b04      	cmp	r3, #4
   1017c:	d1f7      	bne.n	1016e <logobj_interface_setopt+0x56>
   1017e:	2100      	movs	r1, #0
   10180:	a803      	add	r0, sp, #12
   10182:	f7ff fd3f 	bl	fc04 <rpc_logobj_client_request_alloc>
   10186:	4605      	mov	r5, r0
   10188:	2800      	cmp	r0, #0
   1018a:	d16a      	bne.n	10262 <logobj_interface_setopt+0x14a>
   1018c:	9803      	ldr	r0, [sp, #12]
   1018e:	2208      	movs	r2, #8
   10190:	4629      	mov	r1, r5
   10192:	300c      	adds	r0, #12
   10194:	f00a fb71 	bl	1a87a <memset>
   10198:	9803      	ldr	r0, [sp, #12]
   1019a:	4631      	mov	r1, r6
   1019c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   1019e:	300c      	adds	r0, #12
   101a0:	f00a fb41 	bl	1a826 <memcpy>
   101a4:	2308      	movs	r3, #8
   101a6:	9803      	ldr	r0, [sp, #12]
   101a8:	f247 0102 	movw	r1, #28674	; 0x7002
   101ac:	7203      	strb	r3, [r0, #8]
   101ae:	7245      	strb	r5, [r0, #9]
   101b0:	7285      	strb	r5, [r0, #10]
   101b2:	72c5      	strb	r5, [r0, #11]
   101b4:	6823      	ldr	r3, [r4, #0]
   101b6:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
   101ba:	6023      	str	r3, [r4, #0]
   101bc:	f7ff fd3a 	bl	fc34 <rpc_logobj_client_request_send>
   101c0:	2800      	cmp	r0, #0
   101c2:	d151      	bne.n	10268 <logobj_interface_setopt+0x150>
   101c4:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
   101c8:	f04f 33ff 	mov.w	r3, #4294967295
   101cc:	4611      	mov	r1, r2
   101ce:	4638      	mov	r0, r7
   101d0:	f005 ff36 	bl	16040 <interface_socket_wait>
   101d4:	4605      	mov	r5, r0
   101d6:	2800      	cmp	r0, #0
   101d8:	d13b      	bne.n	10252 <logobj_interface_setopt+0x13a>
   101da:	4638      	mov	r0, r7
   101dc:	f005 ffa4 	bl	16128 <interface_socket_from_handle_get>
   101e0:	2800      	cmp	r0, #0
   101e2:	d04f      	beq.n	10284 <logobj_interface_setopt+0x16c>
   101e4:	6843      	ldr	r3, [r0, #4]
   101e6:	2b00      	cmp	r3, #0
   101e8:	d04c      	beq.n	10284 <logobj_interface_setopt+0x16c>
   101ea:	2200      	movs	r2, #0
   101ec:	461d      	mov	r5, r3
   101ee:	6042      	str	r2, [r0, #4]
   101f0:	e02f      	b.n	10252 <logobj_interface_setopt+0x13a>
   101f2:	9c0a      	ldr	r4, [sp, #40]	; 0x28
   101f4:	9400      	str	r4, [sp, #0]
   101f6:	f005 ffbf 	bl	16178 <interface_socket_setopt>
   101fa:	4605      	mov	r5, r0
   101fc:	4628      	mov	r0, r5
   101fe:	b005      	add	sp, #20
   10200:	bdf0      	pop	{r4, r5, r6, r7, pc}
   10202:	2100      	movs	r1, #0
   10204:	a803      	add	r0, sp, #12
   10206:	7835      	ldrb	r5, [r6, #0]
   10208:	f7ff fcfc 	bl	fc04 <rpc_logobj_client_request_alloc>
   1020c:	bb48      	cbnz	r0, 10262 <logobj_interface_setopt+0x14a>
   1020e:	2d01      	cmp	r5, #1
   10210:	bf08      	it	eq
   10212:	4b26      	ldreq	r3, [pc, #152]	; (102ac <logobj_interface_setopt+0x194>)
   10214:	f04f 0204 	mov.w	r2, #4
   10218:	bf08      	it	eq
   1021a:	701d      	strbeq	r5, [r3, #0]
   1021c:	2300      	movs	r3, #0
   1021e:	9803      	ldr	r0, [sp, #12]
   10220:	f247 0101 	movw	r1, #28673	; 0x7001
   10224:	7243      	strb	r3, [r0, #9]
   10226:	60c5      	str	r5, [r0, #12]
   10228:	7283      	strb	r3, [r0, #10]
   1022a:	72c3      	strb	r3, [r0, #11]
   1022c:	7202      	strb	r2, [r0, #8]
   1022e:	6823      	ldr	r3, [r4, #0]
   10230:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
   10234:	6023      	str	r3, [r4, #0]
   10236:	f7ff fcfd 	bl	fc34 <rpc_logobj_client_request_send>
   1023a:	4606      	mov	r6, r0
   1023c:	b9a0      	cbnz	r0, 10268 <logobj_interface_setopt+0x150>
   1023e:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
   10242:	f04f 33ff 	mov.w	r3, #4294967295
   10246:	4611      	mov	r1, r2
   10248:	4638      	mov	r0, r7
   1024a:	f005 fef9 	bl	16040 <interface_socket_wait>
   1024e:	4605      	mov	r5, r0
   10250:	b180      	cbz	r0, 10274 <logobj_interface_setopt+0x15c>
   10252:	6823      	ldr	r3, [r4, #0]
   10254:	e778      	b.n	10148 <logobj_interface_setopt+0x30>
   10256:	202a      	movs	r0, #42	; 0x2a
   10258:	f7ff fac4 	bl	f7e4 <bsd_os_errno_set>
   1025c:	f04f 35ff 	mov.w	r5, #4294967295
   10260:	e77e      	b.n	10160 <logobj_interface_setopt+0x48>
   10262:	6823      	ldr	r3, [r4, #0]
   10264:	250c      	movs	r5, #12
   10266:	e76f      	b.n	10148 <logobj_interface_setopt+0x30>
   10268:	9803      	ldr	r0, [sp, #12]
   1026a:	f7ff fcf9 	bl	fc60 <rpc_logobj_client_message_free>
   1026e:	2505      	movs	r5, #5
   10270:	6823      	ldr	r3, [r4, #0]
   10272:	e769      	b.n	10148 <logobj_interface_setopt+0x30>
   10274:	4638      	mov	r0, r7
   10276:	f005 ff57 	bl	16128 <interface_socket_from_handle_get>
   1027a:	b140      	cbz	r0, 1028e <logobj_interface_setopt+0x176>
   1027c:	6845      	ldr	r5, [r0, #4]
   1027e:	b135      	cbz	r5, 1028e <logobj_interface_setopt+0x176>
   10280:	6046      	str	r6, [r0, #4]
   10282:	e7e6      	b.n	10252 <logobj_interface_setopt+0x13a>
   10284:	4631      	mov	r1, r6
   10286:	2204      	movs	r2, #4
   10288:	4809      	ldr	r0, [pc, #36]	; (102b0 <logobj_interface_setopt+0x198>)
   1028a:	f00a facc 	bl	1a826 <memcpy>
   1028e:	6823      	ldr	r3, [r4, #0]
   10290:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
   10294:	6023      	str	r3, [r4, #0]
   10296:	6823      	ldr	r3, [r4, #0]
   10298:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
   1029c:	6023      	str	r3, [r4, #0]
   1029e:	e75f      	b.n	10160 <logobj_interface_setopt+0x48>
   102a0:	2009      	movs	r0, #9
   102a2:	f7ff fa9f 	bl	f7e4 <bsd_os_errno_set>
   102a6:	f04f 35ff 	mov.w	r5, #4294967295
   102aa:	e759      	b.n	10160 <logobj_interface_setopt+0x48>
   102ac:	20025118 	.word	0x20025118
   102b0:	200202fc 	.word	0x200202fc

000102b4 <logobj_interface_getopt>:
   102b4:	b5f0      	push	{r4, r5, r6, r7, lr}
   102b6:	2901      	cmp	r1, #1
   102b8:	b083      	sub	sp, #12
   102ba:	9e08      	ldr	r6, [sp, #32]
   102bc:	d030      	beq.n	10320 <logobj_interface_getopt+0x6c>
   102be:	461f      	mov	r7, r3
   102c0:	f240 2305 	movw	r3, #517	; 0x205
   102c4:	4299      	cmp	r1, r3
   102c6:	d134      	bne.n	10332 <logobj_interface_getopt+0x7e>
   102c8:	4615      	mov	r5, r2
   102ca:	f005 ff2d 	bl	16128 <interface_socket_from_handle_get>
   102ce:	2800      	cmp	r0, #0
   102d0:	d037      	beq.n	10342 <logobj_interface_getopt+0x8e>
   102d2:	2d01      	cmp	r5, #1
   102d4:	d015      	beq.n	10302 <logobj_interface_getopt+0x4e>
   102d6:	2d02      	cmp	r5, #2
   102d8:	d10b      	bne.n	102f2 <logobj_interface_getopt+0x3e>
   102da:	b387      	cbz	r7, 1033e <logobj_interface_getopt+0x8a>
   102dc:	6833      	ldr	r3, [r6, #0]
   102de:	b373      	cbz	r3, 1033e <logobj_interface_getopt+0x8a>
   102e0:	2300      	movs	r3, #0
   102e2:	2201      	movs	r2, #1
   102e4:	4618      	mov	r0, r3
   102e6:	491a      	ldr	r1, [pc, #104]	; (10350 <logobj_interface_getopt+0x9c>)
   102e8:	7809      	ldrb	r1, [r1, #0]
   102ea:	7039      	strb	r1, [r7, #0]
   102ec:	6032      	str	r2, [r6, #0]
   102ee:	b003      	add	sp, #12
   102f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
   102f2:	2009      	movs	r0, #9
   102f4:	f7ff fa76 	bl	f7e4 <bsd_os_errno_set>
   102f8:	f04f 33ff 	mov.w	r3, #4294967295
   102fc:	4618      	mov	r0, r3
   102fe:	b003      	add	sp, #12
   10300:	bdf0      	pop	{r4, r5, r6, r7, pc}
   10302:	b1e7      	cbz	r7, 1033e <logobj_interface_getopt+0x8a>
   10304:	6833      	ldr	r3, [r6, #0]
   10306:	2b03      	cmp	r3, #3
   10308:	d919      	bls.n	1033e <logobj_interface_getopt+0x8a>
   1030a:	4638      	mov	r0, r7
   1030c:	2204      	movs	r2, #4
   1030e:	4911      	ldr	r1, [pc, #68]	; (10354 <logobj_interface_getopt+0xa0>)
   10310:	f00a fa89 	bl	1a826 <memcpy>
   10314:	2300      	movs	r3, #0
   10316:	2204      	movs	r2, #4
   10318:	4618      	mov	r0, r3
   1031a:	6032      	str	r2, [r6, #0]
   1031c:	b003      	add	sp, #12
   1031e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   10320:	9600      	str	r6, [sp, #0]
   10322:	f005 ff6b 	bl	161fc <interface_socket_getopt>
   10326:	4603      	mov	r3, r0
   10328:	2800      	cmp	r0, #0
   1032a:	d1e3      	bne.n	102f4 <logobj_interface_getopt+0x40>
   1032c:	4618      	mov	r0, r3
   1032e:	b003      	add	sp, #12
   10330:	bdf0      	pop	{r4, r5, r6, r7, pc}
   10332:	202a      	movs	r0, #42	; 0x2a
   10334:	f7ff fa56 	bl	f7e4 <bsd_os_errno_set>
   10338:	f04f 33ff 	mov.w	r3, #4294967295
   1033c:	e7de      	b.n	102fc <logobj_interface_getopt+0x48>
   1033e:	2016      	movs	r0, #22
   10340:	e7d8      	b.n	102f4 <logobj_interface_getopt+0x40>
   10342:	2009      	movs	r0, #9
   10344:	f7ff fa4e 	bl	f7e4 <bsd_os_errno_set>
   10348:	f04f 33ff 	mov.w	r3, #4294967295
   1034c:	e7d6      	b.n	102fc <logobj_interface_getopt+0x48>
   1034e:	bf00      	nop
   10350:	20025119 	.word	0x20025119
   10354:	200202fc 	.word	0x200202fc

00010358 <logobj_interface_close>:
   10358:	b510      	push	{r4, lr}
   1035a:	4604      	mov	r4, r0
   1035c:	f005 fee4 	bl	16128 <interface_socket_from_handle_get>
   10360:	b138      	cbz	r0, 10372 <logobj_interface_close+0x1a>
   10362:	4620      	mov	r0, r4
   10364:	f005 fe1e 	bl	15fa4 <interface_socket_free>
   10368:	2300      	movs	r3, #0
   1036a:	4a05      	ldr	r2, [pc, #20]	; (10380 <logobj_interface_close+0x28>)
   1036c:	4618      	mov	r0, r3
   1036e:	6013      	str	r3, [r2, #0]
   10370:	bd10      	pop	{r4, pc}
   10372:	2009      	movs	r0, #9
   10374:	f7ff fa36 	bl	f7e4 <bsd_os_errno_set>
   10378:	f04f 30ff 	mov.w	r0, #4294967295
   1037c:	bd10      	pop	{r4, pc}
   1037e:	bf00      	nop
   10380:	20020300 	.word	0x20020300

00010384 <packet_free_cb>:
   10384:	6800      	ldr	r0, [r0, #0]
   10386:	f004 b9f1 	b.w	1476c <rpc_at_client_data_free>
   1038a:	bf00      	nop

0001038c <at_interface_write>:
   1038c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   10390:	b082      	sub	sp, #8
   10392:	9c08      	ldr	r4, [sp, #32]
   10394:	2c00      	cmp	r4, #0
   10396:	d15b      	bne.n	10450 <at_interface_write+0xc4>
   10398:	460f      	mov	r7, r1
   1039a:	4615      	mov	r5, r2
   1039c:	4698      	mov	r8, r3
   1039e:	4606      	mov	r6, r0
   103a0:	f005 fec2 	bl	16128 <interface_socket_from_handle_get>
   103a4:	4604      	mov	r4, r0
   103a6:	f1b8 0f00 	cmp.w	r8, #0
   103aa:	d12b      	bne.n	10404 <at_interface_write+0x78>
   103ac:	2800      	cmp	r0, #0
   103ae:	d055      	beq.n	1045c <at_interface_write+0xd0>
   103b0:	6803      	ldr	r3, [r0, #0]
   103b2:	039b      	lsls	r3, r3, #14
   103b4:	d552      	bpl.n	1045c <at_interface_write+0xd0>
   103b6:	6803      	ldr	r3, [r0, #0]
   103b8:	4629      	mov	r1, r5
   103ba:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
   103be:	6003      	str	r3, [r0, #0]
   103c0:	6803      	ldr	r3, [r0, #0]
   103c2:	a801      	add	r0, sp, #4
   103c4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
   103c8:	6023      	str	r3, [r4, #0]
   103ca:	f004 f9a5 	bl	14718 <rpc_at_client_request_alloc>
   103ce:	bb08      	cbnz	r0, 10414 <at_interface_write+0x88>
   103d0:	2204      	movs	r2, #4
   103d2:	9b01      	ldr	r3, [sp, #4]
   103d4:	721a      	strb	r2, [r3, #8]
   103d6:	7258      	strb	r0, [r3, #9]
   103d8:	7298      	strb	r0, [r3, #10]
   103da:	72d8      	strb	r0, [r3, #11]
   103dc:	60de      	str	r6, [r3, #12]
   103de:	b9fd      	cbnz	r5, 10420 <at_interface_write+0x94>
   103e0:	4618      	mov	r0, r3
   103e2:	2101      	movs	r1, #1
   103e4:	f004 f9ac 	bl	14740 <rpc_at_client_request_send>
   103e8:	bb48      	cbnz	r0, 1043e <at_interface_write+0xb2>
   103ea:	f44f 3200 	mov.w	r2, #131072	; 0x20000
   103ee:	4630      	mov	r0, r6
   103f0:	4611      	mov	r1, r2
   103f2:	f04f 33ff 	mov.w	r3, #4294967295
   103f6:	f005 fe23 	bl	16040 <interface_socket_wait>
   103fa:	b960      	cbnz	r0, 10416 <at_interface_write+0x8a>
   103fc:	4628      	mov	r0, r5
   103fe:	b002      	add	sp, #8
   10400:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   10404:	b360      	cbz	r0, 10460 <at_interface_write+0xd4>
   10406:	6803      	ldr	r3, [r0, #0]
   10408:	202d      	movs	r0, #45	; 0x2d
   1040a:	f7ff f9eb 	bl	f7e4 <bsd_os_errno_set>
   1040e:	f04f 30ff 	mov.w	r0, #4294967295
   10412:	e7f4      	b.n	103fe <at_interface_write+0x72>
   10414:	200c      	movs	r0, #12
   10416:	6823      	ldr	r3, [r4, #0]
   10418:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   1041c:	6023      	str	r3, [r4, #0]
   1041e:	e7f4      	b.n	1040a <at_interface_write+0x7e>
   10420:	4639      	mov	r1, r7
   10422:	6818      	ldr	r0, [r3, #0]
   10424:	462a      	mov	r2, r5
   10426:	f00a f9fe 	bl	1a826 <memcpy>
   1042a:	2101      	movs	r1, #1
   1042c:	9801      	ldr	r0, [sp, #4]
   1042e:	f004 f987 	bl	14740 <rpc_at_client_request_send>
   10432:	2800      	cmp	r0, #0
   10434:	d0d9      	beq.n	103ea <at_interface_write+0x5e>
   10436:	9b01      	ldr	r3, [sp, #4]
   10438:	6818      	ldr	r0, [r3, #0]
   1043a:	f004 f997 	bl	1476c <rpc_at_client_data_free>
   1043e:	9801      	ldr	r0, [sp, #4]
   10440:	f004 f98c 	bl	1475c <rpc_at_client_message_free>
   10444:	6823      	ldr	r3, [r4, #0]
   10446:	2023      	movs	r0, #35	; 0x23
   10448:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   1044c:	6023      	str	r3, [r4, #0]
   1044e:	e7dc      	b.n	1040a <at_interface_write+0x7e>
   10450:	2038      	movs	r0, #56	; 0x38
   10452:	f7ff f9c7 	bl	f7e4 <bsd_os_errno_set>
   10456:	f04f 30ff 	mov.w	r0, #4294967295
   1045a:	e7d0      	b.n	103fe <at_interface_write+0x72>
   1045c:	2016      	movs	r0, #22
   1045e:	e7d4      	b.n	1040a <at_interface_write+0x7e>
   10460:	202d      	movs	r0, #45	; 0x2d
   10462:	e7d2      	b.n	1040a <at_interface_write+0x7e>

00010464 <at_interface_init>:
   10464:	f004 b952 	b.w	1470c <rpc_at_client_init>

00010468 <at_interface_open>:
   10468:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1046c:	2600      	movs	r6, #0
   1046e:	b082      	sub	sp, #8
   10470:	2902      	cmp	r1, #2
   10472:	9600      	str	r6, [sp, #0]
   10474:	d13e      	bne.n	104f4 <at_interface_open+0x8c>
   10476:	4680      	mov	r8, r0
   10478:	4617      	mov	r7, r2
   1047a:	4668      	mov	r0, sp
   1047c:	4a20      	ldr	r2, [pc, #128]	; (10500 <at_interface_open+0x98>)
   1047e:	460c      	mov	r4, r1
   10480:	f005 fd2c 	bl	15edc <interface_socket_allocate>
   10484:	9b00      	ldr	r3, [sp, #0]
   10486:	4605      	mov	r5, r0
   10488:	b30b      	cbz	r3, 104ce <at_interface_open+0x66>
   1048a:	e9c3 8403 	strd	r8, r4, [r3, #12]
   1048e:	615f      	str	r7, [r3, #20]
   10490:	4631      	mov	r1, r6
   10492:	a801      	add	r0, sp, #4
   10494:	f004 f940 	bl	14718 <rpc_at_client_request_alloc>
   10498:	bb50      	cbnz	r0, 104f0 <at_interface_open+0x88>
   1049a:	2204      	movs	r2, #4
   1049c:	9b01      	ldr	r3, [sp, #4]
   1049e:	2105      	movs	r1, #5
   104a0:	7258      	strb	r0, [r3, #9]
   104a2:	7298      	strb	r0, [r3, #10]
   104a4:	72d8      	strb	r0, [r3, #11]
   104a6:	721a      	strb	r2, [r3, #8]
   104a8:	60dd      	str	r5, [r3, #12]
   104aa:	4618      	mov	r0, r3
   104ac:	f004 f948 	bl	14740 <rpc_at_client_request_send>
   104b0:	b988      	cbnz	r0, 104d6 <at_interface_open+0x6e>
   104b2:	4622      	mov	r2, r4
   104b4:	4621      	mov	r1, r4
   104b6:	f04f 33ff 	mov.w	r3, #4294967295
   104ba:	4628      	mov	r0, r5
   104bc:	f005 fdc0 	bl	16040 <interface_socket_wait>
   104c0:	4604      	mov	r4, r0
   104c2:	b960      	cbnz	r0, 104de <at_interface_open+0x76>
   104c4:	9a00      	ldr	r2, [sp, #0]
   104c6:	6813      	ldr	r3, [r2, #0]
   104c8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   104cc:	6013      	str	r3, [r2, #0]
   104ce:	4628      	mov	r0, r5
   104d0:	b002      	add	sp, #8
   104d2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   104d6:	9801      	ldr	r0, [sp, #4]
   104d8:	f004 f940 	bl	1475c <rpc_at_client_message_free>
   104dc:	2423      	movs	r4, #35	; 0x23
   104de:	4628      	mov	r0, r5
   104e0:	f005 fd60 	bl	15fa4 <interface_socket_free>
   104e4:	4620      	mov	r0, r4
   104e6:	f7ff f97d 	bl	f7e4 <bsd_os_errno_set>
   104ea:	f04f 35ff 	mov.w	r5, #4294967295
   104ee:	e7ee      	b.n	104ce <at_interface_open+0x66>
   104f0:	240c      	movs	r4, #12
   104f2:	e7f4      	b.n	104de <at_interface_open+0x76>
   104f4:	2029      	movs	r0, #41	; 0x29
   104f6:	f7ff f975 	bl	f7e4 <bsd_os_errno_set>
   104fa:	f04f 35ff 	mov.w	r5, #4294967295
   104fe:	e7e6      	b.n	104ce <at_interface_open+0x66>
   10500:	00010385 	.word	0x00010385

00010504 <at_interface_close>:
   10504:	b5f0      	push	{r4, r5, r6, r7, lr}
   10506:	b083      	sub	sp, #12
   10508:	4606      	mov	r6, r0
   1050a:	f005 fe0d 	bl	16128 <interface_socket_from_handle_get>
   1050e:	2800      	cmp	r0, #0
   10510:	d03d      	beq.n	1058e <at_interface_close+0x8a>
   10512:	230d      	movs	r3, #13
   10514:	6807      	ldr	r7, [r0, #0]
   10516:	6003      	str	r3, [r0, #0]
   10518:	6803      	ldr	r3, [r0, #0]
   1051a:	4604      	mov	r4, r0
   1051c:	039b      	lsls	r3, r3, #14
   1051e:	d41f      	bmi.n	10560 <at_interface_close+0x5c>
   10520:	2100      	movs	r1, #0
   10522:	a801      	add	r0, sp, #4
   10524:	f004 f8f8 	bl	14718 <rpc_at_client_request_alloc>
   10528:	bb20      	cbnz	r0, 10574 <at_interface_close+0x70>
   1052a:	2204      	movs	r2, #4
   1052c:	9b01      	ldr	r3, [sp, #4]
   1052e:	2106      	movs	r1, #6
   10530:	7258      	strb	r0, [r3, #9]
   10532:	7298      	strb	r0, [r3, #10]
   10534:	72d8      	strb	r0, [r3, #11]
   10536:	721a      	strb	r2, [r3, #8]
   10538:	60de      	str	r6, [r3, #12]
   1053a:	4618      	mov	r0, r3
   1053c:	f004 f900 	bl	14740 <rpc_at_client_request_send>
   10540:	b9d0      	cbnz	r0, 10578 <at_interface_close+0x74>
   10542:	220e      	movs	r2, #14
   10544:	f04f 33ff 	mov.w	r3, #4294967295
   10548:	4611      	mov	r1, r2
   1054a:	4630      	mov	r0, r6
   1054c:	f005 fd78 	bl	16040 <interface_socket_wait>
   10550:	4605      	mov	r5, r0
   10552:	b9a8      	cbnz	r0, 10580 <at_interface_close+0x7c>
   10554:	4630      	mov	r0, r6
   10556:	f005 fd25 	bl	15fa4 <interface_socket_free>
   1055a:	4628      	mov	r0, r5
   1055c:	b003      	add	sp, #12
   1055e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   10560:	6803      	ldr	r3, [r0, #0]
   10562:	2100      	movs	r1, #0
   10564:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
   10568:	6003      	str	r3, [r0, #0]
   1056a:	a801      	add	r0, sp, #4
   1056c:	f004 f8d4 	bl	14718 <rpc_at_client_request_alloc>
   10570:	2800      	cmp	r0, #0
   10572:	d0da      	beq.n	1052a <at_interface_close+0x26>
   10574:	250c      	movs	r5, #12
   10576:	e003      	b.n	10580 <at_interface_close+0x7c>
   10578:	9801      	ldr	r0, [sp, #4]
   1057a:	f004 f8ef 	bl	1475c <rpc_at_client_message_free>
   1057e:	2523      	movs	r5, #35	; 0x23
   10580:	6027      	str	r7, [r4, #0]
   10582:	4628      	mov	r0, r5
   10584:	f7ff f92e 	bl	f7e4 <bsd_os_errno_set>
   10588:	f04f 35ff 	mov.w	r5, #4294967295
   1058c:	e7e5      	b.n	1055a <at_interface_close+0x56>
   1058e:	2516      	movs	r5, #22
   10590:	e7f7      	b.n	10582 <at_interface_close+0x7e>
   10592:	bf00      	nop

00010594 <at_interface_read>:
   10594:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   10598:	b084      	sub	sp, #16
   1059a:	4688      	mov	r8, r1
   1059c:	4615      	mov	r5, r2
   1059e:	461e      	mov	r6, r3
   105a0:	4607      	mov	r7, r0
   105a2:	f005 fdc1 	bl	16128 <interface_socket_from_handle_get>
   105a6:	2800      	cmp	r0, #0
   105a8:	d043      	beq.n	10632 <at_interface_read+0x9e>
   105aa:	2300      	movs	r3, #0
   105ac:	4604      	mov	r4, r0
   105ae:	e9cd 8500 	strd	r8, r5, [sp]
   105b2:	e9cd 3302 	strd	r3, r3, [sp, #8]
   105b6:	bb2e      	cbnz	r6, 10604 <at_interface_read+0x70>
   105b8:	f016 0502 	ands.w	r5, r6, #2
   105bc:	d00d      	beq.n	105da <at_interface_read+0x46>
   105be:	e028      	b.n	10612 <at_interface_read+0x7e>
   105c0:	b9cd      	cbnz	r5, 105f6 <at_interface_read+0x62>
   105c2:	f44f 3280 	mov.w	r2, #65536	; 0x10000
   105c6:	6a23      	ldr	r3, [r4, #32]
   105c8:	4611      	mov	r1, r2
   105ca:	2b00      	cmp	r3, #0
   105cc:	bf08      	it	eq
   105ce:	f04f 33ff 	moveq.w	r3, #4294967295
   105d2:	4638      	mov	r0, r7
   105d4:	f005 fd34 	bl	16040 <interface_socket_wait>
   105d8:	4605      	mov	r5, r0
   105da:	6823      	ldr	r3, [r4, #0]
   105dc:	69e0      	ldr	r0, [r4, #28]
   105de:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
   105e2:	6023      	str	r3, [r4, #0]
   105e4:	6803      	ldr	r3, [r0, #0]
   105e6:	4632      	mov	r2, r6
   105e8:	689b      	ldr	r3, [r3, #8]
   105ea:	4669      	mov	r1, sp
   105ec:	4798      	blx	r3
   105ee:	f1b0 0800 	subs.w	r8, r0, #0
   105f2:	dbe5      	blt.n	105c0 <at_interface_read+0x2c>
   105f4:	b115      	cbz	r5, 105fc <at_interface_read+0x68>
   105f6:	4628      	mov	r0, r5
   105f8:	f7ff f8f4 	bl	f7e4 <bsd_os_errno_set>
   105fc:	4640      	mov	r0, r8
   105fe:	b004      	add	sp, #16
   10600:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   10604:	f016 0f0a 	tst.w	r6, #10
   10608:	d1d6      	bne.n	105b8 <at_interface_read+0x24>
   1060a:	252d      	movs	r5, #45	; 0x2d
   1060c:	f04f 38ff 	mov.w	r8, #4294967295
   10610:	e7f1      	b.n	105f6 <at_interface_read+0x62>
   10612:	6823      	ldr	r3, [r4, #0]
   10614:	69e0      	ldr	r0, [r4, #28]
   10616:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
   1061a:	6023      	str	r3, [r4, #0]
   1061c:	6803      	ldr	r3, [r0, #0]
   1061e:	4632      	mov	r2, r6
   10620:	689b      	ldr	r3, [r3, #8]
   10622:	4669      	mov	r1, sp
   10624:	4798      	blx	r3
   10626:	f1b0 3fff 	cmp.w	r0, #4294967295
   1062a:	4680      	mov	r8, r0
   1062c:	d1e6      	bne.n	105fc <at_interface_read+0x68>
   1062e:	2523      	movs	r5, #35	; 0x23
   10630:	e7e1      	b.n	105f6 <at_interface_read+0x62>
   10632:	2516      	movs	r5, #22
   10634:	f04f 38ff 	mov.w	r8, #4294967295
   10638:	e7dd      	b.n	105f6 <at_interface_read+0x62>
   1063a:	bf00      	nop

0001063c <at_interface_getopt>:
   1063c:	f005 bdde 	b.w	161fc <interface_socket_getopt>

00010640 <at_interface_setopt>:
   10640:	f005 bd9a 	b.w	16178 <interface_socket_setopt>

00010644 <rpc_at_event_handler>:
   10644:	b570      	push	{r4, r5, r6, lr}
   10646:	4606      	mov	r6, r0
   10648:	b084      	sub	sp, #16
   1064a:	68c0      	ldr	r0, [r0, #12]
   1064c:	460d      	mov	r5, r1
   1064e:	f005 fd6b 	bl	16128 <interface_socket_from_handle_get>
   10652:	4604      	mov	r4, r0
   10654:	b348      	cbz	r0, 106aa <rpc_at_event_handler+0x66>
   10656:	6803      	ldr	r3, [r0, #0]
   10658:	b29b      	uxth	r3, r3
   1065a:	2b01      	cmp	r3, #1
   1065c:	d01f      	beq.n	1069e <rpc_at_event_handler+0x5a>
   1065e:	6803      	ldr	r3, [r0, #0]
   10660:	b29b      	uxth	r3, r3
   10662:	2b0d      	cmp	r3, #13
   10664:	d029      	beq.n	106ba <rpc_at_event_handler+0x76>
   10666:	6803      	ldr	r3, [r0, #0]
   10668:	b29b      	uxth	r3, r3
   1066a:	2b02      	cmp	r3, #2
   1066c:	d02d      	beq.n	106ca <rpc_at_event_handler+0x86>
   1066e:	3d03      	subs	r5, #3
   10670:	2d01      	cmp	r5, #1
   10672:	d817      	bhi.n	106a4 <rpc_at_event_handler+0x60>
   10674:	2500      	movs	r5, #0
   10676:	6873      	ldr	r3, [r6, #4]
   10678:	6832      	ldr	r2, [r6, #0]
   1067a:	e9cd 5502 	strd	r5, r5, [sp, #8]
   1067e:	e9cd 2300 	strd	r2, r3, [sp]
   10682:	69e0      	ldr	r0, [r4, #28]
   10684:	4669      	mov	r1, sp
   10686:	6803      	ldr	r3, [r0, #0]
   10688:	685b      	ldr	r3, [r3, #4]
   1068a:	4798      	blx	r3
   1068c:	3001      	adds	r0, #1
   1068e:	d019      	beq.n	106c4 <rpc_at_event_handler+0x80>
   10690:	4628      	mov	r0, r5
   10692:	6823      	ldr	r3, [r4, #0]
   10694:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   10698:	6023      	str	r3, [r4, #0]
   1069a:	b004      	add	sp, #16
   1069c:	bd70      	pop	{r4, r5, r6, pc}
   1069e:	2d02      	cmp	r5, #2
   106a0:	d1e5      	bne.n	1066e <rpc_at_event_handler+0x2a>
   106a2:	6005      	str	r5, [r0, #0]
   106a4:	2000      	movs	r0, #0
   106a6:	b004      	add	sp, #16
   106a8:	bd70      	pop	{r4, r5, r6, pc}
   106aa:	6830      	ldr	r0, [r6, #0]
   106ac:	2800      	cmp	r0, #0
   106ae:	d0f9      	beq.n	106a4 <rpc_at_event_handler+0x60>
   106b0:	f004 f85c 	bl	1476c <rpc_at_client_data_free>
   106b4:	4620      	mov	r0, r4
   106b6:	b004      	add	sp, #16
   106b8:	bd70      	pop	{r4, r5, r6, pc}
   106ba:	2d02      	cmp	r5, #2
   106bc:	d1d7      	bne.n	1066e <rpc_at_event_handler+0x2a>
   106be:	230e      	movs	r3, #14
   106c0:	6003      	str	r3, [r0, #0]
   106c2:	e7ef      	b.n	106a4 <rpc_at_event_handler+0x60>
   106c4:	2002      	movs	r0, #2
   106c6:	b004      	add	sp, #16
   106c8:	bd70      	pop	{r4, r5, r6, pc}
   106ca:	6803      	ldr	r3, [r0, #0]
   106cc:	029b      	lsls	r3, r3, #10
   106ce:	d5ce      	bpl.n	1066e <rpc_at_event_handler+0x2a>
   106d0:	2d02      	cmp	r5, #2
   106d2:	d1cc      	bne.n	1066e <rpc_at_event_handler+0x2a>
   106d4:	6803      	ldr	r3, [r0, #0]
   106d6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
   106da:	6003      	str	r3, [r0, #0]
   106dc:	6803      	ldr	r3, [r0, #0]
   106de:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   106e2:	6003      	str	r3, [r0, #0]
   106e4:	e7de      	b.n	106a4 <rpc_at_event_handler+0x60>
   106e6:	bf00      	nop

000106e8 <dfu_client_event_handler>:
   106e8:	f850 1b08 	ldr.w	r1, [r0], #8
   106ec:	0c09      	lsrs	r1, r1, #16
   106ee:	f001 b925 	b.w	1193c <rpc_dfu_event_handler>
   106f2:	bf00      	nop

000106f4 <rpc_dfu_client_init>:
   106f4:	4801      	ldr	r0, [pc, #4]	; (106fc <rpc_dfu_client_init+0x8>)
   106f6:	f005 be53 	b.w	163a0 <rpc_client_register>
   106fa:	bf00      	nop
   106fc:	0001c258 	.word	0x0001c258

00010700 <rpc_dfu_client_request_alloc>:
   10700:	2300      	movs	r3, #0
   10702:	b510      	push	{r4, lr}
   10704:	b082      	sub	sp, #8
   10706:	9301      	str	r3, [sp, #4]
   10708:	b158      	cbz	r0, 10722 <rpc_dfu_client_request_alloc+0x22>
   1070a:	4604      	mov	r4, r0
   1070c:	aa01      	add	r2, sp, #4
   1070e:	2006      	movs	r0, #6
   10710:	f006 f87e 	bl	16810 <rpc_message_alloc>
   10714:	b918      	cbnz	r0, 1071e <rpc_dfu_client_request_alloc+0x1e>
   10716:	9b01      	ldr	r3, [sp, #4]
   10718:	b10b      	cbz	r3, 1071e <rpc_dfu_client_request_alloc+0x1e>
   1071a:	3308      	adds	r3, #8
   1071c:	6023      	str	r3, [r4, #0]
   1071e:	b002      	add	sp, #8
   10720:	bd10      	pop	{r4, pc}
   10722:	2007      	movs	r0, #7
   10724:	b002      	add	sp, #8
   10726:	bd10      	pop	{r4, pc}

00010728 <rpc_dfu_client_request_send>:
   10728:	f411 4f70 	tst.w	r1, #61440	; 0xf000
   1072c:	d10b      	bne.n	10746 <rpc_dfu_client_request_send+0x1e>
   1072e:	b160      	cbz	r0, 1074a <rpc_dfu_client_request_send+0x22>
   10730:	4603      	mov	r3, r0
   10732:	f830 2c08 	ldrh.w	r2, [r0, #-8]
   10736:	2006      	movs	r0, #6
   10738:	ea42 4101 	orr.w	r1, r2, r1, lsl #16
   1073c:	f843 1d08 	str.w	r1, [r3, #-8]!
   10740:	4619      	mov	r1, r3
   10742:	f006 b84d 	b.w	167e0 <rpc_message_send>
   10746:	200f      	movs	r0, #15
   10748:	4770      	bx	lr
   1074a:	2007      	movs	r0, #7
   1074c:	4770      	bx	lr
   1074e:	bf00      	nop

00010750 <rpc_dfu_client_message_free>:
   10750:	b120      	cbz	r0, 1075c <rpc_dfu_client_message_free+0xc>
   10752:	f1a0 0108 	sub.w	r1, r0, #8
   10756:	2006      	movs	r0, #6
   10758:	f006 b88c 	b.w	16874 <rpc_message_free>
   1075c:	2007      	movs	r0, #7
   1075e:	4770      	bx	lr

00010760 <rpc_dfu_client_data_free>:
   10760:	b118      	cbz	r0, 1076a <rpc_dfu_client_data_free+0xa>
   10762:	4601      	mov	r1, r0
   10764:	2006      	movs	r0, #6
   10766:	f006 b997 	b.w	16a98 <rpc_message_data_free>
   1076a:	2007      	movs	r0, #7
   1076c:	4770      	bx	lr
   1076e:	bf00      	nop

00010770 <mem_free>:
   10770:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   10774:	f8df c0cc 	ldr.w	ip, [pc, #204]	; 10844 <mem_free+0xd4>
   10778:	b083      	sub	sp, #12
   1077a:	9000      	str	r0, [sp, #0]
   1077c:	f10c 0b3c 	add.w	fp, ip, #60	; 0x3c
   10780:	f8dc 3008 	ldr.w	r3, [ip, #8]
   10784:	b12b      	cbz	r3, 10792 <mem_free+0x22>
   10786:	f8dc 2000 	ldr.w	r2, [ip]
   1078a:	9c00      	ldr	r4, [sp, #0]
   1078c:	7810      	ldrb	r0, [r2, #0]
   1078e:	42a0      	cmp	r0, r4
   10790:	d006      	beq.n	107a0 <mem_free+0x30>
   10792:	f10c 0c0c 	add.w	ip, ip, #12
   10796:	45e3      	cmp	fp, ip
   10798:	d1f2      	bne.n	10780 <mem_free+0x10>
   1079a:	b003      	add	sp, #12
   1079c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   107a0:	f8dc a004 	ldr.w	sl, [ip, #4]
   107a4:	eb03 080a 	add.w	r8, r3, sl
   107a8:	45c2      	cmp	sl, r8
   107aa:	d2f2      	bcs.n	10792 <mem_free+0x22>
   107ac:	6853      	ldr	r3, [r2, #4]
   107ae:	f8cd c004 	str.w	ip, [sp, #4]
   107b2:	46d6      	mov	lr, sl
   107b4:	469c      	mov	ip, r3
   107b6:	f8d2 9010 	ldr.w	r9, [r2, #16]
   107ba:	8997      	ldrh	r7, [r2, #12]
   107bc:	ebae 000a 	sub.w	r0, lr, sl
   107c0:	b3df      	cbz	r7, 1083a <mem_free+0xca>
   107c2:	f8b9 2002 	ldrh.w	r2, [r9, #2]
   107c6:	4290      	cmp	r0, r2
   107c8:	d31c      	bcc.n	10804 <mem_free+0x94>
   107ca:	4665      	mov	r5, ip
   107cc:	2400      	movs	r4, #0
   107ce:	f109 0304 	add.w	r3, r9, #4
   107d2:	e003      	b.n	107dc <mem_free+0x6c>
   107d4:	885a      	ldrh	r2, [r3, #2]
   107d6:	3304      	adds	r3, #4
   107d8:	4282      	cmp	r2, r0
   107da:	d815      	bhi.n	10808 <mem_free+0x98>
   107dc:	f833 6c04 	ldrh.w	r6, [r3, #-4]
   107e0:	3401      	adds	r4, #1
   107e2:	42a7      	cmp	r7, r4
   107e4:	fb02 5506 	mla	r5, r2, r6, r5
   107e8:	eba0 0002 	sub.w	r0, r0, r2
   107ec:	461e      	mov	r6, r3
   107ee:	d1f1      	bne.n	107d4 <mem_free+0x64>
   107f0:	2000      	movs	r0, #0
   107f2:	4281      	cmp	r1, r0
   107f4:	d00d      	beq.n	10812 <mem_free+0xa2>
   107f6:	f10e 0e01 	add.w	lr, lr, #1
   107fa:	45f0      	cmp	r8, lr
   107fc:	d1de      	bne.n	107bc <mem_free+0x4c>
   107fe:	f8dd c004 	ldr.w	ip, [sp, #4]
   10802:	e7c6      	b.n	10792 <mem_free+0x22>
   10804:	4665      	mov	r5, ip
   10806:	464e      	mov	r6, r9
   10808:	8833      	ldrh	r3, [r6, #0]
   1080a:	fb00 5003 	mla	r0, r0, r3, r5
   1080e:	4281      	cmp	r1, r0
   10810:	d1f1      	bne.n	107f6 <mem_free+0x86>
   10812:	f5be 7f00 	cmp.w	lr, #512	; 0x200
   10816:	f8dd c004 	ldr.w	ip, [sp, #4]
   1081a:	d0ba      	beq.n	10792 <mem_free+0x22>
   1081c:	2301      	movs	r3, #1
   1081e:	4a08      	ldr	r2, [pc, #32]	; (10840 <mem_free+0xd0>)
   10820:	ea4f 115e 	mov.w	r1, lr, lsr #5
   10824:	f852 0021 	ldr.w	r0, [r2, r1, lsl #2]
   10828:	f00e 0e1f 	and.w	lr, lr, #31
   1082c:	fa03 fe0e 	lsl.w	lr, r3, lr
   10830:	ea4e 0000 	orr.w	r0, lr, r0
   10834:	f842 0021 	str.w	r0, [r2, r1, lsl #2]
   10838:	e7af      	b.n	1079a <mem_free+0x2a>
   1083a:	4638      	mov	r0, r7
   1083c:	e7d9      	b.n	107f2 <mem_free+0x82>
   1083e:	bf00      	nop
   10840:	20020304 	.word	0x20020304
   10844:	20020348 	.word	0x20020348

00010848 <mem_alloc.constprop.5>:
   10848:	2800      	cmp	r0, #0
   1084a:	d050      	beq.n	108ee <mem_alloc.constprop.5+0xa6>
   1084c:	4b6d      	ldr	r3, [pc, #436]	; (10a04 <mem_alloc.constprop.5+0x1bc>)
   1084e:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
   10852:	4290      	cmp	r0, r2
   10854:	d84b      	bhi.n	108ee <mem_alloc.constprop.5+0xa6>
   10856:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1085a:	f8d3 b08c 	ldr.w	fp, [r3, #140]	; 0x8c
   1085e:	b083      	sub	sp, #12
   10860:	f1bb 0f00 	cmp.w	fp, #0
   10864:	d054      	beq.n	10910 <mem_alloc.constprop.5+0xc8>
   10866:	f10b 32ff 	add.w	r2, fp, #4294967295
   1086a:	4691      	mov	r9, r2
   1086c:	2600      	movs	r6, #0
   1086e:	f04f 0812 	mov.w	r8, #18
   10872:	4f65      	ldr	r7, [pc, #404]	; (10a08 <mem_alloc.constprop.5+0x1c0>)
   10874:	9201      	str	r2, [sp, #4]
   10876:	f10b 0e11 	add.w	lr, fp, #17
   1087a:	eb06 0209 	add.w	r2, r6, r9
   1087e:	f853 4038 	ldr.w	r4, [r3, r8, lsl #3]
   10882:	3201      	adds	r2, #1
   10884:	0852      	lsrs	r2, r2, #1
   10886:	eb04 0c44 	add.w	ip, r4, r4, lsl #1
   1088a:	f102 0112 	add.w	r1, r2, #18
   1088e:	f853 5031 	ldr.w	r5, [r3, r1, lsl #3]
   10892:	f857 a02c 	ldr.w	sl, [r7, ip, lsl #2]
   10896:	f853 403e 	ldr.w	r4, [r3, lr, lsl #3]
   1089a:	eb03 0cc8 	add.w	ip, r3, r8, lsl #3
   1089e:	f8dc c004 	ldr.w	ip, [ip, #4]
   108a2:	eb05 0545 	add.w	r5, r5, r5, lsl #1
   108a6:	eb04 0444 	add.w	r4, r4, r4, lsl #1
   108aa:	f8da a010 	ldr.w	sl, [sl, #16]
   108ae:	f857 5025 	ldr.w	r5, [r7, r5, lsl #2]
   108b2:	f857 4024 	ldr.w	r4, [r7, r4, lsl #2]
   108b6:	f83a a02c 	ldrh.w	sl, [sl, ip, lsl #2]
   108ba:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
   108be:	eb03 0cce 	add.w	ip, r3, lr, lsl #3
   108c2:	6849      	ldr	r1, [r1, #4]
   108c4:	692d      	ldr	r5, [r5, #16]
   108c6:	6924      	ldr	r4, [r4, #16]
   108c8:	f8dc c004 	ldr.w	ip, [ip, #4]
   108cc:	4550      	cmp	r0, sl
   108ce:	f835 5021 	ldrh.w	r5, [r5, r1, lsl #2]
   108d2:	f834 102c 	ldrh.w	r1, [r4, ip, lsl #2]
   108d6:	d915      	bls.n	10904 <mem_alloc.constprop.5+0xbc>
   108d8:	4288      	cmp	r0, r1
   108da:	d211      	bcs.n	10900 <mem_alloc.constprop.5+0xb8>
   108dc:	42a8      	cmp	r0, r5
   108de:	d908      	bls.n	108f2 <mem_alloc.constprop.5+0xaa>
   108e0:	1c56      	adds	r6, r2, #1
   108e2:	45b1      	cmp	r9, r6
   108e4:	f0c0 8087 	bcc.w	109f6 <mem_alloc.constprop.5+0x1ae>
   108e8:	f102 0813 	add.w	r8, r2, #19
   108ec:	e7c5      	b.n	1087a <mem_alloc.constprop.5+0x32>
   108ee:	2000      	movs	r0, #0
   108f0:	4770      	bx	lr
   108f2:	f102 39ff 	add.w	r9, r2, #4294967295
   108f6:	454e      	cmp	r6, r9
   108f8:	d87d      	bhi.n	109f6 <mem_alloc.constprop.5+0x1ae>
   108fa:	f102 0e11 	add.w	lr, r2, #17
   108fe:	e7bc      	b.n	1087a <mem_alloc.constprop.5+0x32>
   10900:	f109 0601 	add.w	r6, r9, #1
   10904:	45b3      	cmp	fp, r6
   10906:	d007      	beq.n	10918 <mem_alloc.constprop.5+0xd0>
   10908:	2e10      	cmp	r6, #16
   1090a:	d001      	beq.n	10910 <mem_alloc.constprop.5+0xc8>
   1090c:	45b3      	cmp	fp, r6
   1090e:	d808      	bhi.n	10922 <mem_alloc.constprop.5+0xda>
   10910:	2000      	movs	r0, #0
   10912:	b003      	add	sp, #12
   10914:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   10918:	9a01      	ldr	r2, [sp, #4]
   1091a:	2a10      	cmp	r2, #16
   1091c:	bf18      	it	ne
   1091e:	4616      	movne	r6, r2
   10920:	d0f6      	beq.n	10910 <mem_alloc.constprop.5+0xc8>
   10922:	f8df c0e8 	ldr.w	ip, [pc, #232]	; 10a0c <mem_alloc.constprop.5+0x1c4>
   10926:	eb03 08c6 	add.w	r8, r3, r6, lsl #3
   1092a:	e9d8 2424 	ldrd	r2, r4, [r8, #144]	; 0x90
   1092e:	eb02 0242 	add.w	r2, r2, r2, lsl #1
   10932:	f857 3022 	ldr.w	r3, [r7, r2, lsl #2]
   10936:	eb07 0282 	add.w	r2, r7, r2, lsl #2
   1093a:	f8d2 e004 	ldr.w	lr, [r2, #4]
   1093e:	691d      	ldr	r5, [r3, #16]
   10940:	2c00      	cmp	r4, #0
   10942:	d056      	beq.n	109f2 <mem_alloc.constprop.5+0x1aa>
   10944:	462a      	mov	r2, r5
   10946:	4670      	mov	r0, lr
   10948:	00a4      	lsls	r4, r4, #2
   1094a:	eb05 0904 	add.w	r9, r5, r4
   1094e:	8851      	ldrh	r1, [r2, #2]
   10950:	3204      	adds	r2, #4
   10952:	4591      	cmp	r9, r2
   10954:	4408      	add	r0, r1
   10956:	d1fa      	bne.n	1094e <mem_alloc.constprop.5+0x106>
   10958:	1929      	adds	r1, r5, r4
   1095a:	f8b1 a002 	ldrh.w	sl, [r1, #2]
   1095e:	4482      	add	sl, r0
   10960:	4582      	cmp	sl, r0
   10962:	d918      	bls.n	10996 <mem_alloc.constprop.5+0x14e>
   10964:	0941      	lsrs	r1, r0, #5
   10966:	f85c 2021 	ldr.w	r2, [ip, r1, lsl #2]
   1096a:	f000 041f 	and.w	r4, r0, #31
   1096e:	fa22 f904 	lsr.w	r9, r2, r4
   10972:	f019 0f01 	tst.w	r9, #1
   10976:	d007      	beq.n	10988 <mem_alloc.constprop.5+0x140>
   10978:	e013      	b.n	109a2 <mem_alloc.constprop.5+0x15a>
   1097a:	f85c 2021 	ldr.w	r2, [ip, r1, lsl #2]
   1097e:	fa22 f904 	lsr.w	r9, r2, r4
   10982:	f019 0f01 	tst.w	r9, #1
   10986:	d10c      	bne.n	109a2 <mem_alloc.constprop.5+0x15a>
   10988:	3001      	adds	r0, #1
   1098a:	4582      	cmp	sl, r0
   1098c:	ea4f 1150 	mov.w	r1, r0, lsr #5
   10990:	f000 041f 	and.w	r4, r0, #31
   10994:	d1f1      	bne.n	1097a <mem_alloc.constprop.5+0x132>
   10996:	3601      	adds	r6, #1
   10998:	455e      	cmp	r6, fp
   1099a:	f108 0808 	add.w	r8, r8, #8
   1099e:	d3c4      	bcc.n	1092a <mem_alloc.constprop.5+0xe2>
   109a0:	e7b6      	b.n	10910 <mem_alloc.constprop.5+0xc8>
   109a2:	2601      	movs	r6, #1
   109a4:	fa06 f404 	lsl.w	r4, r6, r4
   109a8:	899e      	ldrh	r6, [r3, #12]
   109aa:	ea22 0204 	bic.w	r2, r2, r4
   109ae:	eba0 000e 	sub.w	r0, r0, lr
   109b2:	f84c 2021 	str.w	r2, [ip, r1, lsl #2]
   109b6:	685c      	ldr	r4, [r3, #4]
   109b8:	2e00      	cmp	r6, #0
   109ba:	d0a9      	beq.n	10910 <mem_alloc.constprop.5+0xc8>
   109bc:	886a      	ldrh	r2, [r5, #2]
   109be:	4282      	cmp	r2, r0
   109c0:	d811      	bhi.n	109e6 <mem_alloc.constprop.5+0x19e>
   109c2:	2100      	movs	r1, #0
   109c4:	1d2b      	adds	r3, r5, #4
   109c6:	e003      	b.n	109d0 <mem_alloc.constprop.5+0x188>
   109c8:	885a      	ldrh	r2, [r3, #2]
   109ca:	3304      	adds	r3, #4
   109cc:	4282      	cmp	r2, r0
   109ce:	d80a      	bhi.n	109e6 <mem_alloc.constprop.5+0x19e>
   109d0:	f833 5c04 	ldrh.w	r5, [r3, #-4]
   109d4:	3101      	adds	r1, #1
   109d6:	428e      	cmp	r6, r1
   109d8:	fb02 4405 	mla	r4, r2, r5, r4
   109dc:	eba0 0002 	sub.w	r0, r0, r2
   109e0:	461d      	mov	r5, r3
   109e2:	d1f1      	bne.n	109c8 <mem_alloc.constprop.5+0x180>
   109e4:	e794      	b.n	10910 <mem_alloc.constprop.5+0xc8>
   109e6:	882b      	ldrh	r3, [r5, #0]
   109e8:	fb00 4003 	mla	r0, r0, r3, r4
   109ec:	b003      	add	sp, #12
   109ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   109f2:	4670      	mov	r0, lr
   109f4:	e7b0      	b.n	10958 <mem_alloc.constprop.5+0x110>
   109f6:	f1bb 0f10 	cmp.w	fp, #16
   109fa:	bf08      	it	eq
   109fc:	260f      	moveq	r6, #15
   109fe:	d090      	beq.n	10922 <mem_alloc.constprop.5+0xda>
   10a00:	e786      	b.n	10910 <mem_alloc.constprop.5+0xc8>
   10a02:	bf00      	nop
   10a04:	20020384 	.word	0x20020384
   10a08:	20020348 	.word	0x20020348
   10a0c:	20020304 	.word	0x20020304

00010a10 <mem_alloc.constprop.4>:
   10a10:	2800      	cmp	r0, #0
   10a12:	d04c      	beq.n	10aae <mem_alloc.constprop.4+0x9e>
   10a14:	4b6b      	ldr	r3, [pc, #428]	; (10bc4 <mem_alloc.constprop.4+0x1b4>)
   10a16:	681a      	ldr	r2, [r3, #0]
   10a18:	4290      	cmp	r0, r2
   10a1a:	d848      	bhi.n	10aae <mem_alloc.constprop.4+0x9e>
   10a1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   10a20:	685f      	ldr	r7, [r3, #4]
   10a22:	b083      	sub	sp, #12
   10a24:	9700      	str	r7, [sp, #0]
   10a26:	2f00      	cmp	r7, #0
   10a28:	d051      	beq.n	10ace <mem_alloc.constprop.4+0xbe>
   10a2a:	1e7a      	subs	r2, r7, #1
   10a2c:	4696      	mov	lr, r2
   10a2e:	2100      	movs	r1, #0
   10a30:	f04f 0c01 	mov.w	ip, #1
   10a34:	4c64      	ldr	r4, [pc, #400]	; (10bc8 <mem_alloc.constprop.4+0x1b8>)
   10a36:	9201      	str	r2, [sp, #4]
   10a38:	eb01 020e 	add.w	r2, r1, lr
   10a3c:	3201      	adds	r2, #1
   10a3e:	f853 503c 	ldr.w	r5, [r3, ip, lsl #3]
   10a42:	0852      	lsrs	r2, r2, #1
   10a44:	f102 0801 	add.w	r8, r2, #1
   10a48:	eb05 0545 	add.w	r5, r5, r5, lsl #1
   10a4c:	f853 9037 	ldr.w	r9, [r3, r7, lsl #3]
   10a50:	f854 a025 	ldr.w	sl, [r4, r5, lsl #2]
   10a54:	f853 6038 	ldr.w	r6, [r3, r8, lsl #3]
   10a58:	eb09 0549 	add.w	r5, r9, r9, lsl #1
   10a5c:	eb03 09cc 	add.w	r9, r3, ip, lsl #3
   10a60:	f8d9 9004 	ldr.w	r9, [r9, #4]
   10a64:	eb06 0646 	add.w	r6, r6, r6, lsl #1
   10a68:	f8da a010 	ldr.w	sl, [sl, #16]
   10a6c:	f854 6026 	ldr.w	r6, [r4, r6, lsl #2]
   10a70:	f854 5025 	ldr.w	r5, [r4, r5, lsl #2]
   10a74:	f83a a029 	ldrh.w	sl, [sl, r9, lsl #2]
   10a78:	eb03 0bc8 	add.w	fp, r3, r8, lsl #3
   10a7c:	eb03 09c7 	add.w	r9, r3, r7, lsl #3
   10a80:	6936      	ldr	r6, [r6, #16]
   10a82:	f8db b004 	ldr.w	fp, [fp, #4]
   10a86:	692d      	ldr	r5, [r5, #16]
   10a88:	f8d9 9004 	ldr.w	r9, [r9, #4]
   10a8c:	4550      	cmp	r0, sl
   10a8e:	f836 602b 	ldrh.w	r6, [r6, fp, lsl #2]
   10a92:	f835 5029 	ldrh.w	r5, [r5, r9, lsl #2]
   10a96:	d913      	bls.n	10ac0 <mem_alloc.constprop.4+0xb0>
   10a98:	42a8      	cmp	r0, r5
   10a9a:	d210      	bcs.n	10abe <mem_alloc.constprop.4+0xae>
   10a9c:	42b0      	cmp	r0, r6
   10a9e:	d908      	bls.n	10ab2 <mem_alloc.constprop.4+0xa2>
   10aa0:	45c6      	cmp	lr, r8
   10aa2:	4641      	mov	r1, r8
   10aa4:	f0c0 8087 	bcc.w	10bb6 <mem_alloc.constprop.4+0x1a6>
   10aa8:	f108 0c01 	add.w	ip, r8, #1
   10aac:	e7c4      	b.n	10a38 <mem_alloc.constprop.4+0x28>
   10aae:	2000      	movs	r0, #0
   10ab0:	4770      	bx	lr
   10ab2:	f102 3eff 	add.w	lr, r2, #4294967295
   10ab6:	4571      	cmp	r1, lr
   10ab8:	d87d      	bhi.n	10bb6 <mem_alloc.constprop.4+0x1a6>
   10aba:	4617      	mov	r7, r2
   10abc:	e7bc      	b.n	10a38 <mem_alloc.constprop.4+0x28>
   10abe:	4639      	mov	r1, r7
   10ac0:	9a00      	ldr	r2, [sp, #0]
   10ac2:	428a      	cmp	r2, r1
   10ac4:	d007      	beq.n	10ad6 <mem_alloc.constprop.4+0xc6>
   10ac6:	2910      	cmp	r1, #16
   10ac8:	d001      	beq.n	10ace <mem_alloc.constprop.4+0xbe>
   10aca:	428a      	cmp	r2, r1
   10acc:	d808      	bhi.n	10ae0 <mem_alloc.constprop.4+0xd0>
   10ace:	2000      	movs	r0, #0
   10ad0:	b003      	add	sp, #12
   10ad2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   10ad6:	9a01      	ldr	r2, [sp, #4]
   10ad8:	2a10      	cmp	r2, #16
   10ada:	bf18      	it	ne
   10adc:	4611      	movne	r1, r2
   10ade:	d0f6      	beq.n	10ace <mem_alloc.constprop.4+0xbe>
   10ae0:	f8df c0e8 	ldr.w	ip, [pc, #232]	; 10bcc <mem_alloc.constprop.4+0x1bc>
   10ae4:	f8dd 9000 	ldr.w	r9, [sp]
   10ae8:	eb03 08c1 	add.w	r8, r3, r1, lsl #3
   10aec:	e9d8 2602 	ldrd	r2, r6, [r8, #8]
   10af0:	eb02 0242 	add.w	r2, r2, r2, lsl #1
   10af4:	f854 3022 	ldr.w	r3, [r4, r2, lsl #2]
   10af8:	eb04 0282 	add.w	r2, r4, r2, lsl #2
   10afc:	f8d2 e004 	ldr.w	lr, [r2, #4]
   10b00:	691f      	ldr	r7, [r3, #16]
   10b02:	2e00      	cmp	r6, #0
   10b04:	d055      	beq.n	10bb2 <mem_alloc.constprop.4+0x1a2>
   10b06:	463a      	mov	r2, r7
   10b08:	4670      	mov	r0, lr
   10b0a:	00b6      	lsls	r6, r6, #2
   10b0c:	eb07 0a06 	add.w	sl, r7, r6
   10b10:	8855      	ldrh	r5, [r2, #2]
   10b12:	3204      	adds	r2, #4
   10b14:	4592      	cmp	sl, r2
   10b16:	4428      	add	r0, r5
   10b18:	d1fa      	bne.n	10b10 <mem_alloc.constprop.4+0x100>
   10b1a:	19bd      	adds	r5, r7, r6
   10b1c:	f8b5 b002 	ldrh.w	fp, [r5, #2]
   10b20:	4483      	add	fp, r0
   10b22:	4583      	cmp	fp, r0
   10b24:	d918      	bls.n	10b58 <mem_alloc.constprop.4+0x148>
   10b26:	0945      	lsrs	r5, r0, #5
   10b28:	f85c 2025 	ldr.w	r2, [ip, r5, lsl #2]
   10b2c:	f000 061f 	and.w	r6, r0, #31
   10b30:	fa22 fa06 	lsr.w	sl, r2, r6
   10b34:	f01a 0f01 	tst.w	sl, #1
   10b38:	d007      	beq.n	10b4a <mem_alloc.constprop.4+0x13a>
   10b3a:	e013      	b.n	10b64 <mem_alloc.constprop.4+0x154>
   10b3c:	f85c 2025 	ldr.w	r2, [ip, r5, lsl #2]
   10b40:	fa22 fa06 	lsr.w	sl, r2, r6
   10b44:	f01a 0f01 	tst.w	sl, #1
   10b48:	d10c      	bne.n	10b64 <mem_alloc.constprop.4+0x154>
   10b4a:	3001      	adds	r0, #1
   10b4c:	4583      	cmp	fp, r0
   10b4e:	ea4f 1550 	mov.w	r5, r0, lsr #5
   10b52:	f000 061f 	and.w	r6, r0, #31
   10b56:	d1f1      	bne.n	10b3c <mem_alloc.constprop.4+0x12c>
   10b58:	3101      	adds	r1, #1
   10b5a:	4549      	cmp	r1, r9
   10b5c:	f108 0808 	add.w	r8, r8, #8
   10b60:	d3c4      	bcc.n	10aec <mem_alloc.constprop.4+0xdc>
   10b62:	e7b4      	b.n	10ace <mem_alloc.constprop.4+0xbe>
   10b64:	2101      	movs	r1, #1
   10b66:	40b1      	lsls	r1, r6
   10b68:	899e      	ldrh	r6, [r3, #12]
   10b6a:	ea22 0201 	bic.w	r2, r2, r1
   10b6e:	eba0 000e 	sub.w	r0, r0, lr
   10b72:	f84c 2025 	str.w	r2, [ip, r5, lsl #2]
   10b76:	685c      	ldr	r4, [r3, #4]
   10b78:	2e00      	cmp	r6, #0
   10b7a:	d0a8      	beq.n	10ace <mem_alloc.constprop.4+0xbe>
   10b7c:	887a      	ldrh	r2, [r7, #2]
   10b7e:	4282      	cmp	r2, r0
   10b80:	d811      	bhi.n	10ba6 <mem_alloc.constprop.4+0x196>
   10b82:	2100      	movs	r1, #0
   10b84:	1d3b      	adds	r3, r7, #4
   10b86:	e003      	b.n	10b90 <mem_alloc.constprop.4+0x180>
   10b88:	885a      	ldrh	r2, [r3, #2]
   10b8a:	3304      	adds	r3, #4
   10b8c:	4282      	cmp	r2, r0
   10b8e:	d80a      	bhi.n	10ba6 <mem_alloc.constprop.4+0x196>
   10b90:	f833 5c04 	ldrh.w	r5, [r3, #-4]
   10b94:	3101      	adds	r1, #1
   10b96:	428e      	cmp	r6, r1
   10b98:	eba0 0002 	sub.w	r0, r0, r2
   10b9c:	fb02 4405 	mla	r4, r2, r5, r4
   10ba0:	461f      	mov	r7, r3
   10ba2:	d1f1      	bne.n	10b88 <mem_alloc.constprop.4+0x178>
   10ba4:	e793      	b.n	10ace <mem_alloc.constprop.4+0xbe>
   10ba6:	883b      	ldrh	r3, [r7, #0]
   10ba8:	fb00 4003 	mla	r0, r0, r3, r4
   10bac:	b003      	add	sp, #12
   10bae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   10bb2:	4670      	mov	r0, lr
   10bb4:	e7b1      	b.n	10b1a <mem_alloc.constprop.4+0x10a>
   10bb6:	9a00      	ldr	r2, [sp, #0]
   10bb8:	2a10      	cmp	r2, #16
   10bba:	bf08      	it	eq
   10bbc:	210f      	moveq	r1, #15
   10bbe:	d08f      	beq.n	10ae0 <mem_alloc.constprop.4+0xd0>
   10bc0:	e785      	b.n	10ace <mem_alloc.constprop.4+0xbe>
   10bc2:	bf00      	nop
   10bc4:	20020384 	.word	0x20020384
   10bc8:	20020348 	.word	0x20020348
   10bcc:	20020304 	.word	0x20020304

00010bd0 <nrf_mem_init>:
   10bd0:	b570      	push	{r4, r5, r6, lr}
   10bd2:	2200      	movs	r2, #0
   10bd4:	2501      	movs	r5, #1
   10bd6:	4833      	ldr	r0, [pc, #204]	; (10ca4 <nrf_mem_init+0xd4>)
   10bd8:	0951      	lsrs	r1, r2, #5
   10bda:	f850 4021 	ldr.w	r4, [r0, r1, lsl #2]
   10bde:	f002 031f 	and.w	r3, r2, #31
   10be2:	fa05 f303 	lsl.w	r3, r5, r3
   10be6:	3201      	adds	r2, #1
   10be8:	4323      	orrs	r3, r4
   10bea:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
   10bee:	f840 3021 	str.w	r3, [r0, r1, lsl #2]
   10bf2:	d1f1      	bne.n	10bd8 <nrf_mem_init+0x8>
   10bf4:	2400      	movs	r4, #0
   10bf6:	4b2c      	ldr	r3, [pc, #176]	; (10ca8 <nrf_mem_init+0xd8>)
   10bf8:	4621      	mov	r1, r4
   10bfa:	223c      	movs	r2, #60	; 0x3c
   10bfc:	482b      	ldr	r0, [pc, #172]	; (10cac <nrf_mem_init+0xdc>)
   10bfe:	601c      	str	r4, [r3, #0]
   10c00:	f009 fe3b 	bl	1a87a <memset>
   10c04:	2110      	movs	r1, #16
   10c06:	2205      	movs	r2, #5
   10c08:	4b29      	ldr	r3, [pc, #164]	; (10cb0 <nrf_mem_init+0xe0>)
   10c0a:	4e2a      	ldr	r6, [pc, #168]	; (10cb4 <nrf_mem_init+0xe4>)
   10c0c:	e9c3 4400 	strd	r4, r4, [r3]
   10c10:	60d9      	str	r1, [r3, #12]
   10c12:	6159      	str	r1, [r3, #20]
   10c14:	61d9      	str	r1, [r3, #28]
   10c16:	6259      	str	r1, [r3, #36]	; 0x24
   10c18:	62d9      	str	r1, [r3, #44]	; 0x2c
   10c1a:	6359      	str	r1, [r3, #52]	; 0x34
   10c1c:	63d9      	str	r1, [r3, #60]	; 0x3c
   10c1e:	6459      	str	r1, [r3, #68]	; 0x44
   10c20:	64d9      	str	r1, [r3, #76]	; 0x4c
   10c22:	6559      	str	r1, [r3, #84]	; 0x54
   10c24:	65d9      	str	r1, [r3, #92]	; 0x5c
   10c26:	6659      	str	r1, [r3, #100]	; 0x64
   10c28:	66d9      	str	r1, [r3, #108]	; 0x6c
   10c2a:	6759      	str	r1, [r3, #116]	; 0x74
   10c2c:	67d9      	str	r1, [r3, #124]	; 0x7c
   10c2e:	609a      	str	r2, [r3, #8]
   10c30:	611a      	str	r2, [r3, #16]
   10c32:	619a      	str	r2, [r3, #24]
   10c34:	621a      	str	r2, [r3, #32]
   10c36:	629a      	str	r2, [r3, #40]	; 0x28
   10c38:	631a      	str	r2, [r3, #48]	; 0x30
   10c3a:	639a      	str	r2, [r3, #56]	; 0x38
   10c3c:	641a      	str	r2, [r3, #64]	; 0x40
   10c3e:	649a      	str	r2, [r3, #72]	; 0x48
   10c40:	651a      	str	r2, [r3, #80]	; 0x50
   10c42:	659a      	str	r2, [r3, #88]	; 0x58
   10c44:	661a      	str	r2, [r3, #96]	; 0x60
   10c46:	669a      	str	r2, [r3, #104]	; 0x68
   10c48:	671a      	str	r2, [r3, #112]	; 0x70
   10c4a:	679a      	str	r2, [r3, #120]	; 0x78
   10c4c:	e9c3 2120 	strd	r2, r1, [r3, #128]	; 0x80
   10c50:	e9c3 4422 	strd	r4, r4, [r3, #136]	; 0x88
   10c54:	e9c3 2124 	strd	r2, r1, [r3, #144]	; 0x90
   10c58:	e9c3 2126 	strd	r2, r1, [r3, #152]	; 0x98
   10c5c:	e9c3 2128 	strd	r2, r1, [r3, #160]	; 0xa0
   10c60:	e9c3 212a 	strd	r2, r1, [r3, #168]	; 0xa8
   10c64:	e9c3 212c 	strd	r2, r1, [r3, #176]	; 0xb0
   10c68:	e9c3 212e 	strd	r2, r1, [r3, #184]	; 0xb8
   10c6c:	e9c3 2130 	strd	r2, r1, [r3, #192]	; 0xc0
   10c70:	e9c3 2132 	strd	r2, r1, [r3, #200]	; 0xc8
   10c74:	e9c3 2134 	strd	r2, r1, [r3, #208]	; 0xd0
   10c78:	e9c3 2136 	strd	r2, r1, [r3, #216]	; 0xd8
   10c7c:	e9c3 2138 	strd	r2, r1, [r3, #224]	; 0xe0
   10c80:	e9c3 213a 	strd	r2, r1, [r3, #232]	; 0xe8
   10c84:	e9c3 213c 	strd	r2, r1, [r3, #240]	; 0xf0
   10c88:	e9c3 213e 	strd	r2, r1, [r3, #248]	; 0xf8
   10c8c:	f8c3 1104 	str.w	r1, [r3, #260]	; 0x104
   10c90:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
   10c94:	f8c3 110c 	str.w	r1, [r3, #268]	; 0x10c
   10c98:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
   10c9c:	4620      	mov	r0, r4
   10c9e:	7035      	strb	r5, [r6, #0]
   10ca0:	bd70      	pop	{r4, r5, r6, pc}
   10ca2:	bf00      	nop
   10ca4:	20020304 	.word	0x20020304
   10ca8:	20020344 	.word	0x20020344
   10cac:	20020348 	.word	0x20020348
   10cb0:	20020384 	.word	0x20020384
   10cb4:	2002511a 	.word	0x2002511a

00010cb8 <nrf_mem_register>:
   10cb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   10cbc:	4b87      	ldr	r3, [pc, #540]	; (10edc <nrf_mem_register+0x224>)
   10cbe:	b087      	sub	sp, #28
   10cc0:	781b      	ldrb	r3, [r3, #0]
   10cc2:	2b00      	cmp	r3, #0
   10cc4:	f000 808c 	beq.w	10de0 <nrf_mem_register+0x128>
   10cc8:	b328      	cbz	r0, 10d16 <nrf_mem_register+0x5e>
   10cca:	b321      	cbz	r1, 10d16 <nrf_mem_register+0x5e>
   10ccc:	780b      	ldrb	r3, [r1, #0]
   10cce:	f8df 8218 	ldr.w	r8, [pc, #536]	; 10ee8 <nrf_mem_register+0x230>
   10cd2:	eb03 1303 	add.w	r3, r3, r3, lsl #4
   10cd6:	eb08 03c3 	add.w	r3, r8, r3, lsl #3
   10cda:	685b      	ldr	r3, [r3, #4]
   10cdc:	f8b1 c00c 	ldrh.w	ip, [r1, #12]
   10ce0:	4463      	add	r3, ip
   10ce2:	2b10      	cmp	r3, #16
   10ce4:	d811      	bhi.n	10d0a <nrf_mem_register+0x52>
   10ce6:	f04f 0a00 	mov.w	sl, #0
   10cea:	4689      	mov	r9, r1
   10cec:	4b7c      	ldr	r3, [pc, #496]	; (10ee0 <nrf_mem_register+0x228>)
   10cee:	4f7d      	ldr	r7, [pc, #500]	; (10ee4 <nrf_mem_register+0x22c>)
   10cf0:	681b      	ldr	r3, [r3, #0]
   10cf2:	ea4f 0e8c 	mov.w	lr, ip, lsl #2
   10cf6:	9300      	str	r3, [sp, #0]
   10cf8:	68b9      	ldr	r1, [r7, #8]
   10cfa:	b191      	cbz	r1, 10d22 <nrf_mem_register+0x6a>
   10cfc:	f10a 0a01 	add.w	sl, sl, #1
   10d00:	f1ba 0f05 	cmp.w	sl, #5
   10d04:	f107 070c 	add.w	r7, r7, #12
   10d08:	d1f6      	bne.n	10cf8 <nrf_mem_register+0x40>
   10d0a:	f248 1b07 	movw	fp, #33031	; 0x8107
   10d0e:	4658      	mov	r0, fp
   10d10:	b007      	add	sp, #28
   10d12:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   10d16:	f248 1b0e 	movw	fp, #33038	; 0x810e
   10d1a:	4658      	mov	r0, fp
   10d1c:	b007      	add	sp, #28
   10d1e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   10d22:	f1bc 0f00 	cmp.w	ip, #0
   10d26:	d061      	beq.n	10dec <nrf_mem_register+0x134>
   10d28:	460d      	mov	r5, r1
   10d2a:	460c      	mov	r4, r1
   10d2c:	f8d9 3010 	ldr.w	r3, [r9, #16]
   10d30:	eb0e 0b03 	add.w	fp, lr, r3
   10d34:	885a      	ldrh	r2, [r3, #2]
   10d36:	f833 6b04 	ldrh.w	r6, [r3], #4
   10d3a:	4415      	add	r5, r2
   10d3c:	459b      	cmp	fp, r3
   10d3e:	fb02 4406 	mla	r4, r2, r6, r4
   10d42:	d1f7      	bne.n	10d34 <nrf_mem_register+0x7c>
   10d44:	f8d9 3008 	ldr.w	r3, [r9, #8]
   10d48:	42a3      	cmp	r3, r4
   10d4a:	d3d7      	bcc.n	10cfc <nrf_mem_register+0x44>
   10d4c:	9b00      	ldr	r3, [sp, #0]
   10d4e:	442b      	add	r3, r5
   10d50:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   10d54:	d2d2      	bcs.n	10cfc <nrf_mem_register+0x44>
   10d56:	4c63      	ldr	r4, [pc, #396]	; (10ee4 <nrf_mem_register+0x22c>)
   10d58:	eb0a 024a 	add.w	r2, sl, sl, lsl #1
   10d5c:	0092      	lsls	r2, r2, #2
   10d5e:	f8c0 a000 	str.w	sl, [r0]
   10d62:	18a0      	adds	r0, r4, r2
   10d64:	f844 9002 	str.w	r9, [r4, r2]
   10d68:	9a00      	ldr	r2, [sp, #0]
   10d6a:	468b      	mov	fp, r1
   10d6c:	e9c0 2501 	strd	r2, r5, [r0, #4]
   10d70:	f899 2001 	ldrb.w	r2, [r9, #1]
   10d74:	485a      	ldr	r0, [pc, #360]	; (10ee0 <nrf_mem_register+0x228>)
   10d76:	2a01      	cmp	r2, #1
   10d78:	6003      	str	r3, [r0, #0]
   10d7a:	d0c8      	beq.n	10d0e <nrf_mem_register+0x56>
   10d7c:	f8b9 300c 	ldrh.w	r3, [r9, #12]
   10d80:	2b00      	cmp	r3, #0
   10d82:	d0c4      	beq.n	10d0e <nrf_mem_register+0x56>
   10d84:	2500      	movs	r5, #0
   10d86:	f8cd 9004 	str.w	r9, [sp, #4]
   10d8a:	f8cd a00c 	str.w	sl, [sp, #12]
   10d8e:	f8cd b014 	str.w	fp, [sp, #20]
   10d92:	9b01      	ldr	r3, [sp, #4]
   10d94:	781f      	ldrb	r7, [r3, #0]
   10d96:	691a      	ldr	r2, [r3, #16]
   10d98:	013b      	lsls	r3, r7, #4
   10d9a:	eb03 0907 	add.w	r9, r3, r7
   10d9e:	9300      	str	r3, [sp, #0]
   10da0:	eb08 03c9 	add.w	r3, r8, r9, lsl #3
   10da4:	6859      	ldr	r1, [r3, #4]
   10da6:	f832 4025 	ldrh.w	r4, [r2, r5, lsl #2]
   10daa:	9102      	str	r1, [sp, #8]
   10dac:	bb39      	cbnz	r1, 10dfe <nrf_mem_register+0x146>
   10dae:	9a03      	ldr	r2, [sp, #12]
   10db0:	60dd      	str	r5, [r3, #12]
   10db2:	609a      	str	r2, [r3, #8]
   10db4:	9b00      	ldr	r3, [sp, #0]
   10db6:	443b      	add	r3, r7
   10db8:	461f      	mov	r7, r3
   10dba:	eb08 01c3 	add.w	r1, r8, r3, lsl #3
   10dbe:	684b      	ldr	r3, [r1, #4]
   10dc0:	f858 2037 	ldr.w	r2, [r8, r7, lsl #3]
   10dc4:	3301      	adds	r3, #1
   10dc6:	4294      	cmp	r4, r2
   10dc8:	604b      	str	r3, [r1, #4]
   10dca:	d912      	bls.n	10df2 <nrf_mem_register+0x13a>
   10dcc:	9b01      	ldr	r3, [sp, #4]
   10dce:	f848 4037 	str.w	r4, [r8, r7, lsl #3]
   10dd2:	899b      	ldrh	r3, [r3, #12]
   10dd4:	3501      	adds	r5, #1
   10dd6:	429d      	cmp	r5, r3
   10dd8:	d3db      	bcc.n	10d92 <nrf_mem_register+0xda>
   10dda:	f8dd b014 	ldr.w	fp, [sp, #20]
   10dde:	e796      	b.n	10d0e <nrf_mem_register+0x56>
   10de0:	f248 1b08 	movw	fp, #33032	; 0x8108
   10de4:	4658      	mov	r0, fp
   10de6:	b007      	add	sp, #28
   10de8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   10dec:	9b00      	ldr	r3, [sp, #0]
   10dee:	4665      	mov	r5, ip
   10df0:	e7ae      	b.n	10d50 <nrf_mem_register+0x98>
   10df2:	9b01      	ldr	r3, [sp, #4]
   10df4:	3501      	adds	r5, #1
   10df6:	899b      	ldrh	r3, [r3, #12]
   10df8:	42ab      	cmp	r3, r5
   10dfa:	d8ca      	bhi.n	10d92 <nrf_mem_register+0xda>
   10dfc:	e7ed      	b.n	10dda <nrf_mem_register+0x122>
   10dfe:	2600      	movs	r6, #0
   10e00:	f101 3aff 	add.w	sl, r1, #4294967295
   10e04:	9504      	str	r5, [sp, #16]
   10e06:	eb06 000a 	add.w	r0, r6, sl
   10e0a:	eb09 0206 	add.w	r2, r9, r6
   10e0e:	3201      	adds	r2, #1
   10e10:	3001      	adds	r0, #1
   10e12:	f858 c032 	ldr.w	ip, [r8, r2, lsl #3]
   10e16:	0840      	lsrs	r0, r0, #1
   10e18:	4d32      	ldr	r5, [pc, #200]	; (10ee4 <nrf_mem_register+0x22c>)
   10e1a:	eb09 0100 	add.w	r1, r9, r0
   10e1e:	eb09 030a 	add.w	r3, r9, sl
   10e22:	3101      	adds	r1, #1
   10e24:	3301      	adds	r3, #1
   10e26:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
   10e2a:	f858 e031 	ldr.w	lr, [r8, r1, lsl #3]
   10e2e:	f855 b02c 	ldr.w	fp, [r5, ip, lsl #2]
   10e32:	f858 c033 	ldr.w	ip, [r8, r3, lsl #3]
   10e36:	eb08 02c2 	add.w	r2, r8, r2, lsl #3
   10e3a:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
   10e3e:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
   10e42:	f8db b010 	ldr.w	fp, [fp, #16]
   10e46:	6852      	ldr	r2, [r2, #4]
   10e48:	f855 e02e 	ldr.w	lr, [r5, lr, lsl #2]
   10e4c:	f855 c02c 	ldr.w	ip, [r5, ip, lsl #2]
   10e50:	eb08 01c1 	add.w	r1, r8, r1, lsl #3
   10e54:	eb08 03c3 	add.w	r3, r8, r3, lsl #3
   10e58:	f83b 2022 	ldrh.w	r2, [fp, r2, lsl #2]
   10e5c:	f8de e010 	ldr.w	lr, [lr, #16]
   10e60:	6849      	ldr	r1, [r1, #4]
   10e62:	f8dc c010 	ldr.w	ip, [ip, #16]
   10e66:	685b      	ldr	r3, [r3, #4]
   10e68:	4294      	cmp	r4, r2
   10e6a:	f83e 1021 	ldrh.w	r1, [lr, r1, lsl #2]
   10e6e:	f83c 3023 	ldrh.w	r3, [ip, r3, lsl #2]
   10e72:	d92d      	bls.n	10ed0 <nrf_mem_register+0x218>
   10e74:	429c      	cmp	r4, r3
   10e76:	d22d      	bcs.n	10ed4 <nrf_mem_register+0x21c>
   10e78:	428c      	cmp	r4, r1
   10e7a:	d924      	bls.n	10ec6 <nrf_mem_register+0x20e>
   10e7c:	1c46      	adds	r6, r0, #1
   10e7e:	45b2      	cmp	sl, r6
   10e80:	d2c1      	bcs.n	10e06 <nrf_mem_register+0x14e>
   10e82:	2610      	movs	r6, #16
   10e84:	9d04      	ldr	r5, [sp, #16]
   10e86:	9a02      	ldr	r2, [sp, #8]
   10e88:	42b2      	cmp	r2, r6
   10e8a:	d911      	bls.n	10eb0 <nrf_mem_register+0x1f8>
   10e8c:	9b00      	ldr	r3, [sp, #0]
   10e8e:	443b      	add	r3, r7
   10e90:	441a      	add	r2, r3
   10e92:	4433      	add	r3, r6
   10e94:	eb08 0ac2 	add.w	sl, r8, r2, lsl #3
   10e98:	eb08 09c3 	add.w	r9, r8, r3, lsl #3
   10e9c:	2208      	movs	r2, #8
   10e9e:	4651      	mov	r1, sl
   10ea0:	eb0a 0002 	add.w	r0, sl, r2
   10ea4:	f1aa 0a08 	sub.w	sl, sl, #8
   10ea8:	f009 fcbd 	bl	1a826 <memcpy>
   10eac:	45d1      	cmp	r9, sl
   10eae:	d1f5      	bne.n	10e9c <nrf_mem_register+0x1e4>
   10eb0:	9b00      	ldr	r3, [sp, #0]
   10eb2:	9903      	ldr	r1, [sp, #12]
   10eb4:	443b      	add	r3, r7
   10eb6:	4433      	add	r3, r6
   10eb8:	3301      	adds	r3, #1
   10eba:	eb08 02c3 	add.w	r2, r8, r3, lsl #3
   10ebe:	f848 1033 	str.w	r1, [r8, r3, lsl #3]
   10ec2:	6055      	str	r5, [r2, #4]
   10ec4:	e776      	b.n	10db4 <nrf_mem_register+0xfc>
   10ec6:	f100 3aff 	add.w	sl, r0, #4294967295
   10eca:	4556      	cmp	r6, sl
   10ecc:	d99b      	bls.n	10e06 <nrf_mem_register+0x14e>
   10ece:	e7d8      	b.n	10e82 <nrf_mem_register+0x1ca>
   10ed0:	9d04      	ldr	r5, [sp, #16]
   10ed2:	e7d8      	b.n	10e86 <nrf_mem_register+0x1ce>
   10ed4:	9d04      	ldr	r5, [sp, #16]
   10ed6:	f10a 0601 	add.w	r6, sl, #1
   10eda:	e7d4      	b.n	10e86 <nrf_mem_register+0x1ce>
   10edc:	2002511a 	.word	0x2002511a
   10ee0:	20020344 	.word	0x20020344
   10ee4:	20020348 	.word	0x20020348
   10ee8:	20020384 	.word	0x20020384

00010eec <nrf_malloc>:
   10eec:	4b03      	ldr	r3, [pc, #12]	; (10efc <nrf_malloc+0x10>)
   10eee:	781b      	ldrb	r3, [r3, #0]
   10ef0:	b10b      	cbz	r3, 10ef6 <nrf_malloc+0xa>
   10ef2:	f7ff bd8d 	b.w	10a10 <mem_alloc.constprop.4>
   10ef6:	4618      	mov	r0, r3
   10ef8:	4770      	bx	lr
   10efa:	bf00      	nop
   10efc:	2002511a 	.word	0x2002511a

00010f00 <nrf_free>:
   10f00:	4b04      	ldr	r3, [pc, #16]	; (10f14 <nrf_free+0x14>)
   10f02:	781b      	ldrb	r3, [r3, #0]
   10f04:	b123      	cbz	r3, 10f10 <nrf_free+0x10>
   10f06:	b118      	cbz	r0, 10f10 <nrf_free+0x10>
   10f08:	4601      	mov	r1, r0
   10f0a:	2000      	movs	r0, #0
   10f0c:	f7ff bc30 	b.w	10770 <mem_free>
   10f10:	4770      	bx	lr
   10f12:	bf00      	nop
   10f14:	2002511a 	.word	0x2002511a

00010f18 <nrf_shared_malloc>:
   10f18:	4b03      	ldr	r3, [pc, #12]	; (10f28 <nrf_shared_malloc+0x10>)
   10f1a:	781b      	ldrb	r3, [r3, #0]
   10f1c:	b10b      	cbz	r3, 10f22 <nrf_shared_malloc+0xa>
   10f1e:	f7ff bc93 	b.w	10848 <mem_alloc.constprop.5>
   10f22:	4618      	mov	r0, r3
   10f24:	4770      	bx	lr
   10f26:	bf00      	nop
   10f28:	2002511a 	.word	0x2002511a

00010f2c <nrf_shared_free>:
   10f2c:	4b04      	ldr	r3, [pc, #16]	; (10f40 <nrf_shared_free+0x14>)
   10f2e:	781b      	ldrb	r3, [r3, #0]
   10f30:	b123      	cbz	r3, 10f3c <nrf_shared_free+0x10>
   10f32:	b118      	cbz	r0, 10f3c <nrf_shared_free+0x10>
   10f34:	4601      	mov	r1, r0
   10f36:	2001      	movs	r0, #1
   10f38:	f7ff bc1a 	b.w	10770 <mem_free>
   10f3c:	4770      	bx	lr
   10f3e:	bf00      	nop
   10f40:	2002511a 	.word	0x2002511a

00010f44 <ip_client_event_handler>:
   10f44:	f850 1b08 	ldr.w	r1, [r0], #8
   10f48:	0c09      	lsrs	r1, r1, #16
   10f4a:	f004 bd35 	b.w	159b8 <rpc_ip_event_handler>
   10f4e:	bf00      	nop

00010f50 <rpc_ip_client_init>:
   10f50:	4801      	ldr	r0, [pc, #4]	; (10f58 <rpc_ip_client_init+0x8>)
   10f52:	f005 ba25 	b.w	163a0 <rpc_client_register>
   10f56:	bf00      	nop
   10f58:	0001c268 	.word	0x0001c268

00010f5c <rpc_ip_client_request_alloc>:
   10f5c:	2300      	movs	r3, #0
   10f5e:	b510      	push	{r4, lr}
   10f60:	b082      	sub	sp, #8
   10f62:	9301      	str	r3, [sp, #4]
   10f64:	b158      	cbz	r0, 10f7e <rpc_ip_client_request_alloc+0x22>
   10f66:	4604      	mov	r4, r0
   10f68:	aa01      	add	r2, sp, #4
   10f6a:	2004      	movs	r0, #4
   10f6c:	f005 fc50 	bl	16810 <rpc_message_alloc>
   10f70:	b918      	cbnz	r0, 10f7a <rpc_ip_client_request_alloc+0x1e>
   10f72:	9b01      	ldr	r3, [sp, #4]
   10f74:	b10b      	cbz	r3, 10f7a <rpc_ip_client_request_alloc+0x1e>
   10f76:	3308      	adds	r3, #8
   10f78:	6023      	str	r3, [r4, #0]
   10f7a:	b002      	add	sp, #8
   10f7c:	bd10      	pop	{r4, pc}
   10f7e:	2007      	movs	r0, #7
   10f80:	b002      	add	sp, #8
   10f82:	bd10      	pop	{r4, pc}

00010f84 <rpc_ip_client_request_send>:
   10f84:	f401 4370 	and.w	r3, r1, #61440	; 0xf000
   10f88:	f5b3 4fe0 	cmp.w	r3, #28672	; 0x7000
   10f8c:	d10b      	bne.n	10fa6 <rpc_ip_client_request_send+0x22>
   10f8e:	b160      	cbz	r0, 10faa <rpc_ip_client_request_send+0x26>
   10f90:	4603      	mov	r3, r0
   10f92:	f830 2c08 	ldrh.w	r2, [r0, #-8]
   10f96:	2004      	movs	r0, #4
   10f98:	ea42 4101 	orr.w	r1, r2, r1, lsl #16
   10f9c:	f843 1d08 	str.w	r1, [r3, #-8]!
   10fa0:	4619      	mov	r1, r3
   10fa2:	f005 bc1d 	b.w	167e0 <rpc_message_send>
   10fa6:	200f      	movs	r0, #15
   10fa8:	4770      	bx	lr
   10faa:	2007      	movs	r0, #7
   10fac:	4770      	bx	lr
   10fae:	bf00      	nop

00010fb0 <rpc_ip_client_message_free>:
   10fb0:	b120      	cbz	r0, 10fbc <rpc_ip_client_message_free+0xc>
   10fb2:	f1a0 0108 	sub.w	r1, r0, #8
   10fb6:	2004      	movs	r0, #4
   10fb8:	f005 bc5c 	b.w	16874 <rpc_message_free>
   10fbc:	2007      	movs	r0, #7
   10fbe:	4770      	bx	lr

00010fc0 <rpc_ip_client_data_free>:
   10fc0:	b118      	cbz	r0, 10fca <rpc_ip_client_data_free+0xa>
   10fc2:	4601      	mov	r1, r0
   10fc4:	2004      	movs	r0, #4
   10fc6:	f005 bd67 	b.w	16a98 <rpc_message_data_free>
   10fca:	2007      	movs	r0, #7
   10fcc:	4770      	bx	lr
   10fce:	bf00      	nop

00010fd0 <secure_client_socket>:
   10fd0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   10fd4:	460c      	mov	r4, r1
   10fd6:	680b      	ldr	r3, [r1, #0]
   10fd8:	4f46      	ldr	r7, [pc, #280]	; (110f4 <secure_client_socket+0x124>)
   10fda:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
   10fde:	600b      	str	r3, [r1, #0]
   10fe0:	680b      	ldr	r3, [r1, #0]
   10fe2:	00c6      	lsls	r6, r0, #3
   10fe4:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
   10fe8:	600b      	str	r3, [r1, #0]
   10fea:	eb07 0a06 	add.w	sl, r7, r6
   10fee:	b082      	sub	sp, #8
   10ff0:	f8da 3004 	ldr.w	r3, [sl, #4]
   10ff4:	6989      	ldr	r1, [r1, #24]
   10ff6:	f247 0281 	movw	r2, #28801	; 0x7081
   10ffa:	4605      	mov	r5, r0
   10ffc:	f8d4 8000 	ldr.w	r8, [r4]
   11000:	f003 fbd2 	bl	147a8 <ip_interface_request_create>
   11004:	2800      	cmp	r0, #0
   11006:	d06f      	beq.n	110e8 <secure_client_socket+0x118>
   11008:	f8da 2004 	ldr.w	r2, [sl, #4]
   1100c:	4681      	mov	r9, r0
   1100e:	2a00      	cmp	r2, #0
   11010:	d15f      	bne.n	110d2 <secure_client_socket+0x102>
   11012:	4b39      	ldr	r3, [pc, #228]	; (110f8 <secure_client_socket+0x128>)
   11014:	1971      	adds	r1, r6, r5
   11016:	eb03 0181 	add.w	r1, r3, r1, lsl #2
   1101a:	2224      	movs	r2, #36	; 0x24
   1101c:	f109 0014 	add.w	r0, r9, #20
   11020:	f009 fc01 	bl	1a826 <memcpy>
   11024:	f8d9 3008 	ldr.w	r3, [r9, #8]
   11028:	4649      	mov	r1, r9
   1102a:	3324      	adds	r3, #36	; 0x24
   1102c:	f8c9 3008 	str.w	r3, [r9, #8]
   11030:	6822      	ldr	r2, [r4, #0]
   11032:	4643      	mov	r3, r8
   11034:	0c12      	lsrs	r2, r2, #16
   11036:	0412      	lsls	r2, r2, #16
   11038:	f042 020a 	orr.w	r2, r2, #10
   1103c:	6022      	str	r2, [r4, #0]
   1103e:	4620      	mov	r0, r4
   11040:	f247 0281 	movw	r2, #28801	; 0x7081
   11044:	f003 fbd0 	bl	147e8 <ip_interface_request_send>
   11048:	4603      	mov	r3, r0
   1104a:	b970      	cbnz	r0, 1106a <secure_client_socket+0x9a>
   1104c:	6823      	ldr	r3, [r4, #0]
   1104e:	00db      	lsls	r3, r3, #3
   11050:	d40f      	bmi.n	11072 <secure_client_socket+0xa2>
   11052:	f04f 33ff 	mov.w	r3, #4294967295
   11056:	f64f 72ff 	movw	r2, #65535	; 0xffff
   1105a:	210b      	movs	r1, #11
   1105c:	4628      	mov	r0, r5
   1105e:	f003 fbd7 	bl	14810 <ip_interface_wait>
   11062:	4603      	mov	r3, r0
   11064:	b150      	cbz	r0, 1107c <secure_client_socket+0xac>
   11066:	f8c4 8000 	str.w	r8, [r4]
   1106a:	4618      	mov	r0, r3
   1106c:	b002      	add	sp, #8
   1106e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   11072:	2373      	movs	r3, #115	; 0x73
   11074:	4618      	mov	r0, r3
   11076:	b002      	add	sp, #8
   11078:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1107c:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
   11080:	f04f 33ff 	mov.w	r3, #4294967295
   11084:	4611      	mov	r1, r2
   11086:	4628      	mov	r0, r5
   11088:	f003 fbc2 	bl	14810 <ip_interface_wait>
   1108c:	4603      	mov	r3, r0
   1108e:	bb30      	cbnz	r0, 110de <secure_client_socket+0x10e>
   11090:	f857 0035 	ldr.w	r0, [r7, r5, lsl #3]
   11094:	b138      	cbz	r0, 110a6 <secure_client_socket+0xd6>
   11096:	9301      	str	r3, [sp, #4]
   11098:	f7ff ff32 	bl	10f00 <nrf_free>
   1109c:	9b01      	ldr	r3, [sp, #4]
   1109e:	443e      	add	r6, r7
   110a0:	6073      	str	r3, [r6, #4]
   110a2:	f847 3035 	str.w	r3, [r7, r5, lsl #3]
   110a6:	4618      	mov	r0, r3
   110a8:	6822      	ldr	r2, [r4, #0]
   110aa:	f022 6280 	bic.w	r2, r2, #67108864	; 0x4000000
   110ae:	6022      	str	r2, [r4, #0]
   110b0:	6822      	ldr	r2, [r4, #0]
   110b2:	0c12      	lsrs	r2, r2, #16
   110b4:	0412      	lsls	r2, r2, #16
   110b6:	f042 020c 	orr.w	r2, r2, #12
   110ba:	6022      	str	r2, [r4, #0]
   110bc:	6822      	ldr	r2, [r4, #0]
   110be:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
   110c2:	6022      	str	r2, [r4, #0]
   110c4:	6822      	ldr	r2, [r4, #0]
   110c6:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
   110ca:	6022      	str	r2, [r4, #0]
   110cc:	b002      	add	sp, #8
   110ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   110d2:	f857 1035 	ldr.w	r1, [r7, r5, lsl #3]
   110d6:	6800      	ldr	r0, [r0, #0]
   110d8:	f009 fba5 	bl	1a826 <memcpy>
   110dc:	e799      	b.n	11012 <secure_client_socket+0x42>
   110de:	2b73      	cmp	r3, #115	; 0x73
   110e0:	d0c3      	beq.n	1106a <secure_client_socket+0x9a>
   110e2:	f8c4 8000 	str.w	r8, [r4]
   110e6:	e7c0      	b.n	1106a <secure_client_socket+0x9a>
   110e8:	230c      	movs	r3, #12
   110ea:	4618      	mov	r0, r3
   110ec:	b002      	add	sp, #8
   110ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   110f2:	bf00      	nop
   110f4:	200205d8 	.word	0x200205d8
   110f8:	20020494 	.word	0x20020494

000110fc <tls_interface_init>:
   110fc:	2000      	movs	r0, #0
   110fe:	4770      	bx	lr

00011100 <tls_interface_open>:
   11100:	b538      	push	{r3, r4, r5, lr}
   11102:	1e4b      	subs	r3, r1, #1
   11104:	2b01      	cmp	r3, #1
   11106:	d808      	bhi.n	1111a <tls_interface_open+0x1a>
   11108:	4614      	mov	r4, r2
   1110a:	b162      	cbz	r2, 11126 <tls_interface_open+0x26>
   1110c:	2901      	cmp	r1, #1
   1110e:	d02d      	beq.n	1116c <tls_interface_open+0x6c>
   11110:	f5b2 7f87 	cmp.w	r2, #270	; 0x10e
   11114:	bf08      	it	eq
   11116:	2202      	moveq	r2, #2
   11118:	d00d      	beq.n	11136 <tls_interface_open+0x36>
   1111a:	2029      	movs	r0, #41	; 0x29
   1111c:	f7fe fb62 	bl	f7e4 <bsd_os_errno_set>
   11120:	f04f 35ff 	mov.w	r5, #4294967295
   11124:	e020      	b.n	11168 <tls_interface_open+0x68>
   11126:	2901      	cmp	r1, #1
   11128:	bf0b      	itete	eq
   1112a:	2201      	moveq	r2, #1
   1112c:	2202      	movne	r2, #2
   1112e:	f44f 7482 	moveq.w	r4, #260	; 0x104
   11132:	f44f 7487 	movne.w	r4, #270	; 0x10e
   11136:	f003 fb97 	bl	14868 <ip_interface_open>
   1113a:	1e05      	subs	r5, r0, #0
   1113c:	db1b      	blt.n	11176 <tls_interface_open+0x76>
   1113e:	4b0f      	ldr	r3, [pc, #60]	; (1117c <tls_interface_open+0x7c>)
   11140:	eb05 00c5 	add.w	r0, r5, r5, lsl #3
   11144:	eb03 0080 	add.w	r0, r3, r0, lsl #2
   11148:	2224      	movs	r2, #36	; 0x24
   1114a:	490d      	ldr	r1, [pc, #52]	; (11180 <tls_interface_open+0x80>)
   1114c:	f009 fb6b 	bl	1a826 <memcpy>
   11150:	4628      	mov	r0, r5
   11152:	f004 ffe9 	bl	16128 <interface_socket_from_handle_get>
   11156:	6803      	ldr	r3, [r0, #0]
   11158:	6144      	str	r4, [r0, #20]
   1115a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
   1115e:	6003      	str	r3, [r0, #0]
   11160:	6803      	ldr	r3, [r0, #0]
   11162:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
   11166:	6003      	str	r3, [r0, #0]
   11168:	4628      	mov	r0, r5
   1116a:	bd38      	pop	{r3, r4, r5, pc}
   1116c:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
   11170:	d1d3      	bne.n	1111a <tls_interface_open+0x1a>
   11172:	460a      	mov	r2, r1
   11174:	e7df      	b.n	11136 <tls_interface_open+0x36>
   11176:	f04f 35ff 	mov.w	r5, #4294967295
   1117a:	e7f5      	b.n	11168 <tls_interface_open+0x68>
   1117c:	20020494 	.word	0x20020494
   11180:	0001c278 	.word	0x0001c278

00011184 <tls_interface_close>:
   11184:	b538      	push	{r3, r4, r5, lr}
   11186:	4604      	mov	r4, r0
   11188:	f004 ffce 	bl	16128 <interface_socket_from_handle_get>
   1118c:	b180      	cbz	r0, 111b0 <tls_interface_close+0x2c>
   1118e:	4d0b      	ldr	r5, [pc, #44]	; (111bc <tls_interface_close+0x38>)
   11190:	f855 0034 	ldr.w	r0, [r5, r4, lsl #3]
   11194:	b138      	cbz	r0, 111a6 <tls_interface_close+0x22>
   11196:	f7ff feb3 	bl	10f00 <nrf_free>
   1119a:	2300      	movs	r3, #0
   1119c:	eb05 02c4 	add.w	r2, r5, r4, lsl #3
   111a0:	f845 3034 	str.w	r3, [r5, r4, lsl #3]
   111a4:	6053      	str	r3, [r2, #4]
   111a6:	4620      	mov	r0, r4
   111a8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   111ac:	f003 bc0e 	b.w	149cc <ip_interface_close>
   111b0:	2009      	movs	r0, #9
   111b2:	f7fe fb17 	bl	f7e4 <bsd_os_errno_set>
   111b6:	f04f 30ff 	mov.w	r0, #4294967295
   111ba:	bd38      	pop	{r3, r4, r5, pc}
   111bc:	200205d8 	.word	0x200205d8

000111c0 <tls_interface_sendto>:
   111c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   111c4:	460d      	mov	r5, r1
   111c6:	e9dd 8908 	ldrd	r8, r9, [sp, #32]
   111ca:	4616      	mov	r6, r2
   111cc:	461f      	mov	r7, r3
   111ce:	4604      	mov	r4, r0
   111d0:	f004 ffaa 	bl	16128 <interface_socket_from_handle_get>
   111d4:	2800      	cmp	r0, #0
   111d6:	d03b      	beq.n	11250 <tls_interface_sendto+0x90>
   111d8:	6803      	ldr	r3, [r0, #0]
   111da:	b29b      	uxth	r3, r3
   111dc:	2b0c      	cmp	r3, #12
   111de:	d039      	beq.n	11254 <tls_interface_sendto+0x94>
   111e0:	6803      	ldr	r3, [r0, #0]
   111e2:	b29b      	uxth	r3, r3
   111e4:	2b0b      	cmp	r3, #11
   111e6:	d111      	bne.n	1120c <tls_interface_sendto+0x4c>
   111e8:	4b20      	ldr	r3, [pc, #128]	; (1126c <tls_interface_sendto+0xac>)
   111ea:	eb04 04c4 	add.w	r4, r4, r4, lsl #3
   111ee:	f813 3024 	ldrb.w	r3, [r3, r4, lsl #2]
   111f2:	2b02      	cmp	r3, #2
   111f4:	d038      	beq.n	11268 <tls_interface_sendto+0xa8>
   111f6:	6903      	ldr	r3, [r0, #16]
   111f8:	2b01      	cmp	r3, #1
   111fa:	bf14      	ite	ne
   111fc:	2039      	movne	r0, #57	; 0x39
   111fe:	202a      	moveq	r0, #42	; 0x2a
   11200:	f7fe faf0 	bl	f7e4 <bsd_os_errno_set>
   11204:	f04f 30ff 	mov.w	r0, #4294967295
   11208:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1120c:	6903      	ldr	r3, [r0, #16]
   1120e:	2b01      	cmp	r3, #1
   11210:	d00b      	beq.n	1122a <tls_interface_sendto+0x6a>
   11212:	2b02      	cmp	r3, #2
   11214:	d001      	beq.n	1121a <tls_interface_sendto+0x5a>
   11216:	2039      	movs	r0, #57	; 0x39
   11218:	e7f2      	b.n	11200 <tls_interface_sendto+0x40>
   1121a:	6803      	ldr	r3, [r0, #0]
   1121c:	b29b      	uxth	r3, r3
   1121e:	2b02      	cmp	r3, #2
   11220:	d007      	beq.n	11232 <tls_interface_sendto+0x72>
   11222:	6803      	ldr	r3, [r0, #0]
   11224:	b29b      	uxth	r3, r3
   11226:	2b04      	cmp	r3, #4
   11228:	d003      	beq.n	11232 <tls_interface_sendto+0x72>
   1122a:	6803      	ldr	r3, [r0, #0]
   1122c:	b29b      	uxth	r3, r3
   1122e:	2b05      	cmp	r3, #5
   11230:	d1f1      	bne.n	11216 <tls_interface_sendto+0x56>
   11232:	4b0e      	ldr	r3, [pc, #56]	; (1126c <tls_interface_sendto+0xac>)
   11234:	eb04 02c4 	add.w	r2, r4, r4, lsl #3
   11238:	f813 3022 	ldrb.w	r3, [r3, r2, lsl #2]
   1123c:	2b02      	cmp	r3, #2
   1123e:	d1ea      	bne.n	11216 <tls_interface_sendto+0x56>
   11240:	4601      	mov	r1, r0
   11242:	4620      	mov	r0, r4
   11244:	f7ff fec4 	bl	10fd0 <secure_client_socket>
   11248:	2800      	cmp	r0, #0
   1124a:	d003      	beq.n	11254 <tls_interface_sendto+0x94>
   1124c:	dcd8      	bgt.n	11200 <tls_interface_sendto+0x40>
   1124e:	e7d9      	b.n	11204 <tls_interface_sendto+0x44>
   11250:	2009      	movs	r0, #9
   11252:	e7d5      	b.n	11200 <tls_interface_sendto+0x40>
   11254:	e9cd 8908 	strd	r8, r9, [sp, #32]
   11258:	463b      	mov	r3, r7
   1125a:	4632      	mov	r2, r6
   1125c:	4629      	mov	r1, r5
   1125e:	4620      	mov	r0, r4
   11260:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   11264:	f003 bc22 	b.w	14aac <ip_interface_sendto>
   11268:	2023      	movs	r0, #35	; 0x23
   1126a:	e7c9      	b.n	11200 <tls_interface_sendto+0x40>
   1126c:	20020494 	.word	0x20020494

00011270 <tls_interface_recvfrom>:
   11270:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   11274:	460d      	mov	r5, r1
   11276:	e9dd 8908 	ldrd	r8, r9, [sp, #32]
   1127a:	4616      	mov	r6, r2
   1127c:	461f      	mov	r7, r3
   1127e:	4604      	mov	r4, r0
   11280:	f004 ff52 	bl	16128 <interface_socket_from_handle_get>
   11284:	2800      	cmp	r0, #0
   11286:	d038      	beq.n	112fa <tls_interface_recvfrom+0x8a>
   11288:	6803      	ldr	r3, [r0, #0]
   1128a:	b29b      	uxth	r3, r3
   1128c:	2b0c      	cmp	r3, #12
   1128e:	d00f      	beq.n	112b0 <tls_interface_recvfrom+0x40>
   11290:	6803      	ldr	r3, [r0, #0]
   11292:	b29b      	uxth	r3, r3
   11294:	2b0d      	cmp	r3, #13
   11296:	d00b      	beq.n	112b0 <tls_interface_recvfrom+0x40>
   11298:	6903      	ldr	r3, [r0, #16]
   1129a:	2b01      	cmp	r3, #1
   1129c:	d01a      	beq.n	112d4 <tls_interface_recvfrom+0x64>
   1129e:	2b02      	cmp	r3, #2
   112a0:	d010      	beq.n	112c4 <tls_interface_recvfrom+0x54>
   112a2:	2023      	movs	r0, #35	; 0x23
   112a4:	f7fe fa9e 	bl	f7e4 <bsd_os_errno_set>
   112a8:	f04f 30ff 	mov.w	r0, #4294967295
   112ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   112b0:	e9cd 8908 	strd	r8, r9, [sp, #32]
   112b4:	463b      	mov	r3, r7
   112b6:	4632      	mov	r2, r6
   112b8:	4629      	mov	r1, r5
   112ba:	4620      	mov	r0, r4
   112bc:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   112c0:	f003 bd6c 	b.w	14d9c <ip_interface_recvfrom>
   112c4:	6803      	ldr	r3, [r0, #0]
   112c6:	b29b      	uxth	r3, r3
   112c8:	2b02      	cmp	r3, #2
   112ca:	d007      	beq.n	112dc <tls_interface_recvfrom+0x6c>
   112cc:	6803      	ldr	r3, [r0, #0]
   112ce:	b29b      	uxth	r3, r3
   112d0:	2b04      	cmp	r3, #4
   112d2:	d003      	beq.n	112dc <tls_interface_recvfrom+0x6c>
   112d4:	6803      	ldr	r3, [r0, #0]
   112d6:	b29b      	uxth	r3, r3
   112d8:	2b05      	cmp	r3, #5
   112da:	d1e2      	bne.n	112a2 <tls_interface_recvfrom+0x32>
   112dc:	4b08      	ldr	r3, [pc, #32]	; (11300 <tls_interface_recvfrom+0x90>)
   112de:	eb04 02c4 	add.w	r2, r4, r4, lsl #3
   112e2:	f813 3022 	ldrb.w	r3, [r3, r2, lsl #2]
   112e6:	2b02      	cmp	r3, #2
   112e8:	d1db      	bne.n	112a2 <tls_interface_recvfrom+0x32>
   112ea:	4601      	mov	r1, r0
   112ec:	4620      	mov	r0, r4
   112ee:	f7ff fe6f 	bl	10fd0 <secure_client_socket>
   112f2:	2800      	cmp	r0, #0
   112f4:	d0dc      	beq.n	112b0 <tls_interface_recvfrom+0x40>
   112f6:	dcd5      	bgt.n	112a4 <tls_interface_recvfrom+0x34>
   112f8:	e7d6      	b.n	112a8 <tls_interface_recvfrom+0x38>
   112fa:	2009      	movs	r0, #9
   112fc:	e7d2      	b.n	112a4 <tls_interface_recvfrom+0x34>
   112fe:	bf00      	nop
   11300:	20020494 	.word	0x20020494

00011304 <tls_interface_bind>:
   11304:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11308:	460c      	mov	r4, r1
   1130a:	4617      	mov	r7, r2
   1130c:	4606      	mov	r6, r0
   1130e:	f004 ff0b 	bl	16128 <interface_socket_from_handle_get>
   11312:	2800      	cmp	r0, #0
   11314:	d06d      	beq.n	113f2 <tls_interface_bind+0xee>
   11316:	6803      	ldr	r3, [r0, #0]
   11318:	4605      	mov	r5, r0
   1131a:	b29b      	uxth	r3, r3
   1131c:	2b02      	cmp	r3, #2
   1131e:	d15a      	bne.n	113d6 <tls_interface_bind+0xd2>
   11320:	4621      	mov	r1, r4
   11322:	463a      	mov	r2, r7
   11324:	4630      	mov	r0, r6
   11326:	f003 ff27 	bl	15178 <ip_interface_bind>
   1132a:	4604      	mov	r4, r0
   1132c:	2800      	cmp	r0, #0
   1132e:	d148      	bne.n	113c2 <tls_interface_bind+0xbe>
   11330:	00f7      	lsls	r7, r6, #3
   11332:	f8df 80c4 	ldr.w	r8, [pc, #196]	; 113f8 <tls_interface_bind+0xf4>
   11336:	19bb      	adds	r3, r7, r6
   11338:	f818 3023 	ldrb.w	r3, [r8, r3, lsl #2]
   1133c:	2b01      	cmp	r3, #1
   1133e:	d002      	beq.n	11346 <tls_interface_bind+0x42>
   11340:	4620      	mov	r0, r4
   11342:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11346:	f8df b0b4 	ldr.w	fp, [pc, #180]	; 113fc <tls_interface_bind+0xf8>
   1134a:	f247 0281 	movw	r2, #28801	; 0x7081
   1134e:	eb0b 0a07 	add.w	sl, fp, r7
   11352:	f8da 3004 	ldr.w	r3, [sl, #4]
   11356:	69a9      	ldr	r1, [r5, #24]
   11358:	4630      	mov	r0, r6
   1135a:	f003 fa25 	bl	147a8 <ip_interface_request_create>
   1135e:	4681      	mov	r9, r0
   11360:	2800      	cmp	r0, #0
   11362:	d044      	beq.n	113ee <tls_interface_bind+0xea>
   11364:	f8da 2004 	ldr.w	r2, [sl, #4]
   11368:	2a00      	cmp	r2, #0
   1136a:	d13a      	bne.n	113e2 <tls_interface_bind+0xde>
   1136c:	19b9      	adds	r1, r7, r6
   1136e:	eb08 0181 	add.w	r1, r8, r1, lsl #2
   11372:	2224      	movs	r2, #36	; 0x24
   11374:	f109 0014 	add.w	r0, r9, #20
   11378:	f009 fa55 	bl	1a826 <memcpy>
   1137c:	f8d9 3008 	ldr.w	r3, [r9, #8]
   11380:	4649      	mov	r1, r9
   11382:	3324      	adds	r3, #36	; 0x24
   11384:	f8c9 3008 	str.w	r3, [r9, #8]
   11388:	682a      	ldr	r2, [r5, #0]
   1138a:	2304      	movs	r3, #4
   1138c:	0c12      	lsrs	r2, r2, #16
   1138e:	0412      	lsls	r2, r2, #16
   11390:	f042 020a 	orr.w	r2, r2, #10
   11394:	602a      	str	r2, [r5, #0]
   11396:	4628      	mov	r0, r5
   11398:	f247 0281 	movw	r2, #28801	; 0x7081
   1139c:	f003 fa24 	bl	147e8 <ip_interface_request_send>
   113a0:	b9e8      	cbnz	r0, 113de <tls_interface_bind+0xda>
   113a2:	682b      	ldr	r3, [r5, #0]
   113a4:	00db      	lsls	r3, r3, #3
   113a6:	d418      	bmi.n	113da <tls_interface_bind+0xd6>
   113a8:	4630      	mov	r0, r6
   113aa:	f04f 33ff 	mov.w	r3, #4294967295
   113ae:	f64f 72ff 	movw	r2, #65535	; 0xffff
   113b2:	210b      	movs	r1, #11
   113b4:	f003 fa2c 	bl	14810 <ip_interface_wait>
   113b8:	2800      	cmp	r0, #0
   113ba:	d0c1      	beq.n	11340 <tls_interface_bind+0x3c>
   113bc:	2304      	movs	r3, #4
   113be:	4604      	mov	r4, r0
   113c0:	602b      	str	r3, [r5, #0]
   113c2:	2c00      	cmp	r4, #0
   113c4:	ddbc      	ble.n	11340 <tls_interface_bind+0x3c>
   113c6:	4620      	mov	r0, r4
   113c8:	f04f 34ff 	mov.w	r4, #4294967295
   113cc:	f7fe fa0a 	bl	f7e4 <bsd_os_errno_set>
   113d0:	4620      	mov	r0, r4
   113d2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   113d6:	242d      	movs	r4, #45	; 0x2d
   113d8:	e7f5      	b.n	113c6 <tls_interface_bind+0xc2>
   113da:	2473      	movs	r4, #115	; 0x73
   113dc:	e7f3      	b.n	113c6 <tls_interface_bind+0xc2>
   113de:	4604      	mov	r4, r0
   113e0:	e7ef      	b.n	113c2 <tls_interface_bind+0xbe>
   113e2:	f85b 1036 	ldr.w	r1, [fp, r6, lsl #3]
   113e6:	6800      	ldr	r0, [r0, #0]
   113e8:	f009 fa1d 	bl	1a826 <memcpy>
   113ec:	e7be      	b.n	1136c <tls_interface_bind+0x68>
   113ee:	240c      	movs	r4, #12
   113f0:	e7e9      	b.n	113c6 <tls_interface_bind+0xc2>
   113f2:	2409      	movs	r4, #9
   113f4:	e7e7      	b.n	113c6 <tls_interface_bind+0xc2>
   113f6:	bf00      	nop
   113f8:	20020494 	.word	0x20020494
   113fc:	200205d8 	.word	0x200205d8

00011400 <tls_interface_connect>:
   11400:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   11402:	460e      	mov	r6, r1
   11404:	4617      	mov	r7, r2
   11406:	4604      	mov	r4, r0
   11408:	f004 fe8e 	bl	16128 <interface_socket_from_handle_get>
   1140c:	b1e8      	cbz	r0, 1144a <tls_interface_connect+0x4a>
   1140e:	4b13      	ldr	r3, [pc, #76]	; (1145c <tls_interface_connect+0x5c>)
   11410:	eb04 02c4 	add.w	r2, r4, r4, lsl #3
   11414:	f813 3022 	ldrb.w	r3, [r3, r2, lsl #2]
   11418:	2b02      	cmp	r3, #2
   1141a:	d11c      	bne.n	11456 <tls_interface_connect+0x56>
   1141c:	6803      	ldr	r3, [r0, #0]
   1141e:	4605      	mov	r5, r0
   11420:	b29b      	uxth	r3, r3
   11422:	2b02      	cmp	r3, #2
   11424:	d003      	beq.n	1142e <tls_interface_connect+0x2e>
   11426:	6803      	ldr	r3, [r0, #0]
   11428:	b29b      	uxth	r3, r3
   1142a:	2b04      	cmp	r3, #4
   1142c:	d113      	bne.n	11456 <tls_interface_connect+0x56>
   1142e:	463a      	mov	r2, r7
   11430:	4631      	mov	r1, r6
   11432:	4620      	mov	r0, r4
   11434:	f003 fde6 	bl	15004 <ip_interface_connect>
   11438:	b110      	cbz	r0, 11440 <tls_interface_connect+0x40>
   1143a:	2800      	cmp	r0, #0
   1143c:	dc06      	bgt.n	1144c <tls_interface_connect+0x4c>
   1143e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   11440:	4629      	mov	r1, r5
   11442:	4620      	mov	r0, r4
   11444:	f7ff fdc4 	bl	10fd0 <secure_client_socket>
   11448:	e7f7      	b.n	1143a <tls_interface_connect+0x3a>
   1144a:	2009      	movs	r0, #9
   1144c:	f7fe f9ca 	bl	f7e4 <bsd_os_errno_set>
   11450:	f04f 30ff 	mov.w	r0, #4294967295
   11454:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   11456:	202d      	movs	r0, #45	; 0x2d
   11458:	e7f8      	b.n	1144c <tls_interface_connect+0x4c>
   1145a:	bf00      	nop
   1145c:	20020494 	.word	0x20020494

00011460 <tls_interface_listen>:
   11460:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11464:	b083      	sub	sp, #12
   11466:	9101      	str	r1, [sp, #4]
   11468:	4605      	mov	r5, r0
   1146a:	f004 fe5d 	bl	16128 <interface_socket_from_handle_get>
   1146e:	2800      	cmp	r0, #0
   11470:	d079      	beq.n	11566 <tls_interface_listen+0x106>
   11472:	6903      	ldr	r3, [r0, #16]
   11474:	4604      	mov	r4, r0
   11476:	2b01      	cmp	r3, #1
   11478:	d173      	bne.n	11562 <tls_interface_listen+0x102>
   1147a:	6803      	ldr	r3, [r0, #0]
   1147c:	b29b      	uxth	r3, r3
   1147e:	2b04      	cmp	r3, #4
   11480:	d05f      	beq.n	11542 <tls_interface_listen+0xe2>
   11482:	6823      	ldr	r3, [r4, #0]
   11484:	b29b      	uxth	r3, r3
   11486:	2b0b      	cmp	r3, #11
   11488:	d16b      	bne.n	11562 <tls_interface_listen+0x102>
   1148a:	00ee      	lsls	r6, r5, #3
   1148c:	4f37      	ldr	r7, [pc, #220]	; (1156c <tls_interface_listen+0x10c>)
   1148e:	1973      	adds	r3, r6, r5
   11490:	f817 3023 	ldrb.w	r3, [r7, r3, lsl #2]
   11494:	2b01      	cmp	r3, #1
   11496:	d164      	bne.n	11562 <tls_interface_listen+0x102>
   11498:	2201      	movs	r2, #1
   1149a:	f8df 90d4 	ldr.w	r9, [pc, #212]	; 11570 <tls_interface_listen+0x110>
   1149e:	1973      	adds	r3, r6, r5
   114a0:	00ee      	lsls	r6, r5, #3
   114a2:	f807 2023 	strb.w	r2, [r7, r3, lsl #2]
   114a6:	eb09 0806 	add.w	r8, r9, r6
   114aa:	69a1      	ldr	r1, [r4, #24]
   114ac:	f8d8 3004 	ldr.w	r3, [r8, #4]
   114b0:	f247 0281 	movw	r2, #28801	; 0x7081
   114b4:	4628      	mov	r0, r5
   114b6:	f8d4 a000 	ldr.w	sl, [r4]
   114ba:	f003 f975 	bl	147a8 <ip_interface_request_create>
   114be:	4683      	mov	fp, r0
   114c0:	2800      	cmp	r0, #0
   114c2:	d04c      	beq.n	1155e <tls_interface_listen+0xfe>
   114c4:	f8d8 2004 	ldr.w	r2, [r8, #4]
   114c8:	2a00      	cmp	r2, #0
   114ca:	d142      	bne.n	11552 <tls_interface_listen+0xf2>
   114cc:	1971      	adds	r1, r6, r5
   114ce:	eb07 0181 	add.w	r1, r7, r1, lsl #2
   114d2:	2224      	movs	r2, #36	; 0x24
   114d4:	f10b 0014 	add.w	r0, fp, #20
   114d8:	f009 f9a5 	bl	1a826 <memcpy>
   114dc:	f8db 2008 	ldr.w	r2, [fp, #8]
   114e0:	4659      	mov	r1, fp
   114e2:	3224      	adds	r2, #36	; 0x24
   114e4:	f8cb 2008 	str.w	r2, [fp, #8]
   114e8:	6822      	ldr	r2, [r4, #0]
   114ea:	4653      	mov	r3, sl
   114ec:	0c12      	lsrs	r2, r2, #16
   114ee:	0412      	lsls	r2, r2, #16
   114f0:	f042 020a 	orr.w	r2, r2, #10
   114f4:	6022      	str	r2, [r4, #0]
   114f6:	4620      	mov	r0, r4
   114f8:	f247 0281 	movw	r2, #28801	; 0x7081
   114fc:	f003 f974 	bl	147e8 <ip_interface_request_send>
   11500:	b968      	cbnz	r0, 1151e <tls_interface_listen+0xbe>
   11502:	6823      	ldr	r3, [r4, #0]
   11504:	00db      	lsls	r3, r3, #3
   11506:	d40f      	bmi.n	11528 <tls_interface_listen+0xc8>
   11508:	f04f 33ff 	mov.w	r3, #4294967295
   1150c:	f64f 72ff 	movw	r2, #65535	; 0xffff
   11510:	210b      	movs	r1, #11
   11512:	4628      	mov	r0, r5
   11514:	f003 f97c 	bl	14810 <ip_interface_wait>
   11518:	b170      	cbz	r0, 11538 <tls_interface_listen+0xd8>
   1151a:	f8c4 a000 	str.w	sl, [r4]
   1151e:	2800      	cmp	r0, #0
   11520:	dc03      	bgt.n	1152a <tls_interface_listen+0xca>
   11522:	b003      	add	sp, #12
   11524:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11528:	2073      	movs	r0, #115	; 0x73
   1152a:	f7fe f95b 	bl	f7e4 <bsd_os_errno_set>
   1152e:	f04f 30ff 	mov.w	r0, #4294967295
   11532:	b003      	add	sp, #12
   11534:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11538:	9901      	ldr	r1, [sp, #4]
   1153a:	4628      	mov	r0, r5
   1153c:	f003 febc 	bl	152b8 <ip_interface_listen>
   11540:	e7ed      	b.n	1151e <tls_interface_listen+0xbe>
   11542:	00ee      	lsls	r6, r5, #3
   11544:	4f09      	ldr	r7, [pc, #36]	; (1156c <tls_interface_listen+0x10c>)
   11546:	1973      	adds	r3, r6, r5
   11548:	f817 3023 	ldrb.w	r3, [r7, r3, lsl #2]
   1154c:	2b02      	cmp	r3, #2
   1154e:	d198      	bne.n	11482 <tls_interface_listen+0x22>
   11550:	e7a2      	b.n	11498 <tls_interface_listen+0x38>
   11552:	f859 1035 	ldr.w	r1, [r9, r5, lsl #3]
   11556:	6800      	ldr	r0, [r0, #0]
   11558:	f009 f965 	bl	1a826 <memcpy>
   1155c:	e7b6      	b.n	114cc <tls_interface_listen+0x6c>
   1155e:	200c      	movs	r0, #12
   11560:	e7e3      	b.n	1152a <tls_interface_listen+0xca>
   11562:	202d      	movs	r0, #45	; 0x2d
   11564:	e7e1      	b.n	1152a <tls_interface_listen+0xca>
   11566:	2009      	movs	r0, #9
   11568:	e7df      	b.n	1152a <tls_interface_listen+0xca>
   1156a:	bf00      	nop
   1156c:	20020494 	.word	0x20020494
   11570:	200205d8 	.word	0x200205d8

00011574 <tls_interface_accept>:
   11574:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   11576:	460c      	mov	r4, r1
   11578:	4616      	mov	r6, r2
   1157a:	461f      	mov	r7, r3
   1157c:	4605      	mov	r5, r0
   1157e:	f004 fdd3 	bl	16128 <interface_socket_from_handle_get>
   11582:	2800      	cmp	r0, #0
   11584:	d03b      	beq.n	115fe <_flash_used+0x29>
   11586:	6800      	ldr	r0, [r0, #0]
   11588:	b280      	uxth	r0, r0
   1158a:	2806      	cmp	r0, #6
   1158c:	d137      	bne.n	115fe <_flash_used+0x29>
   1158e:	4621      	mov	r1, r4
   11590:	463b      	mov	r3, r7
   11592:	4632      	mov	r2, r6
   11594:	4628      	mov	r0, r5
   11596:	f003 ff05 	bl	153a4 <ip_interface_accept>
   1159a:	4604      	mov	r4, r0
   1159c:	b118      	cbz	r0, 115a6 <tls_interface_accept+0x32>
   1159e:	2c00      	cmp	r4, #0
   115a0:	dc2e      	bgt.n	11600 <_flash_used+0x2b>
   115a2:	4620      	mov	r0, r4
   115a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   115a6:	4628      	mov	r0, r5
   115a8:	f004 fdbe 	bl	16128 <interface_socket_from_handle_get>
   115ac:	6803      	ldr	r3, [r0, #0]
   115ae:	4f18      	ldr	r7, [pc, #96]	; (11610 <_flash_used+0x3b>)
   115b0:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
   115b4:	6003      	str	r3, [r0, #0]
   115b6:	6803      	ldr	r3, [r0, #0]
   115b8:	eb05 05c5 	add.w	r5, r5, r5, lsl #3
   115bc:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
   115c0:	4606      	mov	r6, r0
   115c2:	6003      	str	r3, [r0, #0]
   115c4:	eb07 0185 	add.w	r1, r7, r5, lsl #2
   115c8:	2224      	movs	r2, #36	; 0x24
   115ca:	4638      	mov	r0, r7
   115cc:	f009 f92b 	bl	1a826 <memcpy>
   115d0:	2302      	movs	r3, #2
   115d2:	703b      	strb	r3, [r7, #0]
   115d4:	6833      	ldr	r3, [r6, #0]
   115d6:	4620      	mov	r0, r4
   115d8:	0c1b      	lsrs	r3, r3, #16
   115da:	041b      	lsls	r3, r3, #16
   115dc:	f043 030b 	orr.w	r3, r3, #11
   115e0:	6033      	str	r3, [r6, #0]
   115e2:	f64f 72ff 	movw	r2, #65535	; 0xffff
   115e6:	f04f 33ff 	mov.w	r3, #4294967295
   115ea:	210c      	movs	r1, #12
   115ec:	f003 f910 	bl	14810 <ip_interface_wait>
   115f0:	4604      	mov	r4, r0
   115f2:	2800      	cmp	r0, #0
   115f4:	d0d5      	beq.n	115a2 <tls_interface_accept+0x2e>
   115f6:	2000      	movs	r0, #0
   115f8:	f003 f9e8 	bl	149cc <ip_interface_close>
   115fc:	e7cf      	b.n	1159e <tls_interface_accept+0x2a>
   115fe:	2409      	movs	r4, #9
   11600:	4620      	mov	r0, r4
   11602:	f04f 34ff 	mov.w	r4, #4294967295
   11606:	f7fe f8ed 	bl	f7e4 <bsd_os_errno_set>
   1160a:	4620      	mov	r0, r4
   1160c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1160e:	bf00      	nop
   11610:	20020494 	.word	0x20020494

00011614 <tls_interface_setopt>:
   11614:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   11618:	f5b1 7f8d 	cmp.w	r1, #282	; 0x11a
   1161c:	9e06      	ldr	r6, [sp, #24]
   1161e:	d11e      	bne.n	1165e <tls_interface_setopt+0x4a>
   11620:	461f      	mov	r7, r3
   11622:	4605      	mov	r5, r0
   11624:	2b00      	cmp	r3, #0
   11626:	f000 808c 	beq.w	11742 <tls_interface_setopt+0x12e>
   1162a:	4690      	mov	r8, r2
   1162c:	f004 fd7c 	bl	16128 <interface_socket_from_handle_get>
   11630:	2800      	cmp	r0, #0
   11632:	d07b      	beq.n	1172c <tls_interface_setopt+0x118>
   11634:	6804      	ldr	r4, [r0, #0]
   11636:	b2a4      	uxth	r4, r4
   11638:	2c02      	cmp	r4, #2
   1163a:	d007      	beq.n	1164c <tls_interface_setopt+0x38>
   1163c:	6803      	ldr	r3, [r0, #0]
   1163e:	b29b      	uxth	r3, r3
   11640:	2b04      	cmp	r3, #4
   11642:	d003      	beq.n	1164c <tls_interface_setopt+0x38>
   11644:	6803      	ldr	r3, [r0, #0]
   11646:	b29b      	uxth	r3, r3
   11648:	2b05      	cmp	r3, #5
   1164a:	d16f      	bne.n	1172c <tls_interface_setopt+0x118>
   1164c:	f108 32ff 	add.w	r2, r8, #4294967295
   11650:	2a04      	cmp	r2, #4
   11652:	d87c      	bhi.n	1174e <tls_interface_setopt+0x13a>
   11654:	e8df f002 	tbb	[pc, r2]
   11658:	41324e24 	.word	0x41324e24
   1165c:	07          	.byte	0x07
   1165d:	00          	.byte	0x00
   1165e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   11662:	f003 bfd7 	b.w	15614 <ip_interface_setopt>
   11666:	4c3b      	ldr	r4, [pc, #236]	; (11754 <tls_interface_setopt+0x140>)
   11668:	f854 0035 	ldr.w	r0, [r4, r5, lsl #3]
   1166c:	b138      	cbz	r0, 1167e <tls_interface_setopt+0x6a>
   1166e:	f7ff fc47 	bl	10f00 <nrf_free>
   11672:	2200      	movs	r2, #0
   11674:	eb04 03c5 	add.w	r3, r4, r5, lsl #3
   11678:	f844 2035 	str.w	r2, [r4, r5, lsl #3]
   1167c:	605a      	str	r2, [r3, #4]
   1167e:	4630      	mov	r0, r6
   11680:	b34e      	cbz	r6, 116d6 <tls_interface_setopt+0xc2>
   11682:	f7ff fc33 	bl	10eec <nrf_malloc>
   11686:	f844 0035 	str.w	r0, [r4, r5, lsl #3]
   1168a:	2800      	cmp	r0, #0
   1168c:	d057      	beq.n	1173e <tls_interface_setopt+0x12a>
   1168e:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
   11692:	4632      	mov	r2, r6
   11694:	4639      	mov	r1, r7
   11696:	6066      	str	r6, [r4, #4]
   11698:	f009 f8c5 	bl	1a826 <memcpy>
   1169c:	2000      	movs	r0, #0
   1169e:	e01a      	b.n	116d6 <tls_interface_setopt+0xc2>
   116a0:	2e04      	cmp	r6, #4
   116a2:	d14a      	bne.n	1173a <tls_interface_setopt+0x126>
   116a4:	6838      	ldr	r0, [r7, #0]
   116a6:	2800      	cmp	r0, #0
   116a8:	d039      	beq.n	1171e <tls_interface_setopt+0x10a>
   116aa:	2801      	cmp	r0, #1
   116ac:	d145      	bne.n	1173a <tls_interface_setopt+0x126>
   116ae:	4a2a      	ldr	r2, [pc, #168]	; (11758 <tls_interface_setopt+0x144>)
   116b0:	eb05 04c5 	add.w	r4, r5, r5, lsl #3
   116b4:	f802 0024 	strb.w	r0, [r2, r4, lsl #2]
   116b8:	2000      	movs	r0, #0
   116ba:	e00c      	b.n	116d6 <tls_interface_setopt+0xc2>
   116bc:	2e01      	cmp	r6, #1
   116be:	d13c      	bne.n	1173a <tls_interface_setopt+0x126>
   116c0:	783a      	ldrb	r2, [r7, #0]
   116c2:	2000      	movs	r0, #0
   116c4:	3200      	adds	r2, #0
   116c6:	bf18      	it	ne
   116c8:	2201      	movne	r2, #1
   116ca:	4b23      	ldr	r3, [pc, #140]	; (11758 <tls_interface_setopt+0x144>)
   116cc:	eb05 04c5 	add.w	r4, r5, r5, lsl #3
   116d0:	eb03 0484 	add.w	r4, r3, r4, lsl #2
   116d4:	7062      	strb	r2, [r4, #1]
   116d6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   116da:	2e04      	cmp	r6, #4
   116dc:	d12d      	bne.n	1173a <tls_interface_setopt+0x126>
   116de:	683a      	ldr	r2, [r7, #0]
   116e0:	2a02      	cmp	r2, #2
   116e2:	d82a      	bhi.n	1173a <tls_interface_setopt+0x126>
   116e4:	4b1c      	ldr	r3, [pc, #112]	; (11758 <tls_interface_setopt+0x144>)
   116e6:	eb05 04c5 	add.w	r4, r5, r5, lsl #3
   116ea:	eb03 0484 	add.w	r4, r3, r4, lsl #2
   116ee:	70a2      	strb	r2, [r4, #2]
   116f0:	2000      	movs	r0, #0
   116f2:	e7f0      	b.n	116d6 <tls_interface_setopt+0xc2>
   116f4:	ea5f 0c96 	movs.w	ip, r6, lsr #2
   116f8:	d01f      	beq.n	1173a <tls_interface_setopt+0x126>
   116fa:	f016 0403 	ands.w	r4, r6, #3
   116fe:	d11c      	bne.n	1173a <tls_interface_setopt+0x126>
   11700:	eb05 05c5 	add.w	r5, r5, r5, lsl #3
   11704:	00ad      	lsls	r5, r5, #2
   11706:	4b14      	ldr	r3, [pc, #80]	; (11758 <tls_interface_setopt+0x144>)
   11708:	1d28      	adds	r0, r5, #4
   1170a:	4418      	add	r0, r3
   1170c:	442b      	add	r3, r5
   1170e:	4632      	mov	r2, r6
   11710:	4639      	mov	r1, r7
   11712:	f883 c003 	strb.w	ip, [r3, #3]
   11716:	f009 f886 	bl	1a826 <memcpy>
   1171a:	4620      	mov	r0, r4
   1171c:	e7db      	b.n	116d6 <tls_interface_setopt+0xc2>
   1171e:	2102      	movs	r1, #2
   11720:	4a0d      	ldr	r2, [pc, #52]	; (11758 <tls_interface_setopt+0x144>)
   11722:	eb05 04c5 	add.w	r4, r5, r5, lsl #3
   11726:	f802 1024 	strb.w	r1, [r2, r4, lsl #2]
   1172a:	e7d4      	b.n	116d6 <tls_interface_setopt+0xc2>
   1172c:	2009      	movs	r0, #9
   1172e:	f7fe f859 	bl	f7e4 <bsd_os_errno_set>
   11732:	f04f 30ff 	mov.w	r0, #4294967295
   11736:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1173a:	2016      	movs	r0, #22
   1173c:	e7f7      	b.n	1172e <tls_interface_setopt+0x11a>
   1173e:	200c      	movs	r0, #12
   11740:	e7f5      	b.n	1172e <tls_interface_setopt+0x11a>
   11742:	200e      	movs	r0, #14
   11744:	f7fe f84e 	bl	f7e4 <bsd_os_errno_set>
   11748:	f04f 30ff 	mov.w	r0, #4294967295
   1174c:	e7c3      	b.n	116d6 <tls_interface_setopt+0xc2>
   1174e:	202a      	movs	r0, #42	; 0x2a
   11750:	e7ed      	b.n	1172e <tls_interface_setopt+0x11a>
   11752:	bf00      	nop
   11754:	200205d8 	.word	0x200205d8
   11758:	20020494 	.word	0x20020494

0001175c <tls_interface_getopt>:
   1175c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   11760:	f5b1 7f8d 	cmp.w	r1, #282	; 0x11a
   11764:	9f06      	ldr	r7, [sp, #24]
   11766:	d112      	bne.n	1178e <tls_interface_getopt+0x32>
   11768:	461d      	mov	r5, r3
   1176a:	b16b      	cbz	r3, 11788 <tls_interface_getopt+0x2c>
   1176c:	b167      	cbz	r7, 11788 <tls_interface_getopt+0x2c>
   1176e:	4606      	mov	r6, r0
   11770:	4614      	mov	r4, r2
   11772:	f004 fcd9 	bl	16128 <interface_socket_from_handle_get>
   11776:	2800      	cmp	r0, #0
   11778:	d04f      	beq.n	1181a <tls_interface_getopt+0xbe>
   1177a:	3c01      	subs	r4, #1
   1177c:	2c03      	cmp	r4, #3
   1177e:	d852      	bhi.n	11826 <tls_interface_getopt+0xca>
   11780:	e8df f004 	tbb	[pc, r4]
   11784:	09152139 	.word	0x09152139
   11788:	200e      	movs	r0, #14
   1178a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1178e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   11792:	f003 bffb 	b.w	1578c <ip_interface_getopt>
   11796:	683b      	ldr	r3, [r7, #0]
   11798:	2b04      	cmp	r3, #4
   1179a:	d13c      	bne.n	11816 <tls_interface_getopt+0xba>
   1179c:	4b23      	ldr	r3, [pc, #140]	; (1182c <tls_interface_getopt+0xd0>)
   1179e:	eb06 06c6 	add.w	r6, r6, r6, lsl #3
   117a2:	eb03 0686 	add.w	r6, r3, r6, lsl #2
   117a6:	78b3      	ldrb	r3, [r6, #2]
   117a8:	2000      	movs	r0, #0
   117aa:	602b      	str	r3, [r5, #0]
   117ac:	e7ed      	b.n	1178a <tls_interface_getopt+0x2e>
   117ae:	683b      	ldr	r3, [r7, #0]
   117b0:	2b01      	cmp	r3, #1
   117b2:	d130      	bne.n	11816 <tls_interface_getopt+0xba>
   117b4:	4b1d      	ldr	r3, [pc, #116]	; (1182c <tls_interface_getopt+0xd0>)
   117b6:	eb06 06c6 	add.w	r6, r6, r6, lsl #3
   117ba:	eb03 0686 	add.w	r6, r3, r6, lsl #2
   117be:	7873      	ldrb	r3, [r6, #1]
   117c0:	2000      	movs	r0, #0
   117c2:	702b      	strb	r3, [r5, #0]
   117c4:	e7e1      	b.n	1178a <tls_interface_getopt+0x2e>
   117c6:	eb06 06c6 	add.w	r6, r6, r6, lsl #3
   117ca:	4918      	ldr	r1, [pc, #96]	; (1182c <tls_interface_getopt+0xd0>)
   117cc:	683b      	ldr	r3, [r7, #0]
   117ce:	00b6      	lsls	r6, r6, #2
   117d0:	198a      	adds	r2, r1, r6
   117d2:	f013 0403 	ands.w	r4, r3, #3
   117d6:	78d0      	ldrb	r0, [r2, #3]
   117d8:	d121      	bne.n	1181e <tls_interface_getopt+0xc2>
   117da:	089b      	lsrs	r3, r3, #2
   117dc:	4283      	cmp	r3, r0
   117de:	bf28      	it	cs
   117e0:	4603      	movcs	r3, r0
   117e2:	009a      	lsls	r2, r3, #2
   117e4:	b1db      	cbz	r3, 1181e <tls_interface_getopt+0xc2>
   117e6:	3604      	adds	r6, #4
   117e8:	4431      	add	r1, r6
   117ea:	603a      	str	r2, [r7, #0]
   117ec:	4628      	mov	r0, r5
   117ee:	f009 f81a 	bl	1a826 <memcpy>
   117f2:	4620      	mov	r0, r4
   117f4:	e7c9      	b.n	1178a <tls_interface_getopt+0x2e>
   117f6:	683b      	ldr	r3, [r7, #0]
   117f8:	2b04      	cmp	r3, #4
   117fa:	d10c      	bne.n	11816 <tls_interface_getopt+0xba>
   117fc:	4b0b      	ldr	r3, [pc, #44]	; (1182c <tls_interface_getopt+0xd0>)
   117fe:	eb06 06c6 	add.w	r6, r6, r6, lsl #3
   11802:	f813 3026 	ldrb.w	r3, [r3, r6, lsl #2]
   11806:	2000      	movs	r0, #0
   11808:	f1a3 0301 	sub.w	r3, r3, #1
   1180c:	fab3 f383 	clz	r3, r3
   11810:	095b      	lsrs	r3, r3, #5
   11812:	602b      	str	r3, [r5, #0]
   11814:	e7b9      	b.n	1178a <tls_interface_getopt+0x2e>
   11816:	2016      	movs	r0, #22
   11818:	e7b7      	b.n	1178a <tls_interface_getopt+0x2e>
   1181a:	2009      	movs	r0, #9
   1181c:	e7b5      	b.n	1178a <tls_interface_getopt+0x2e>
   1181e:	2800      	cmp	r0, #0
   11820:	d1f9      	bne.n	11816 <tls_interface_getopt+0xba>
   11822:	6038      	str	r0, [r7, #0]
   11824:	e7b1      	b.n	1178a <tls_interface_getopt+0x2e>
   11826:	202a      	movs	r0, #42	; 0x2a
   11828:	e7af      	b.n	1178a <tls_interface_getopt+0x2e>
   1182a:	bf00      	nop
   1182c:	20020494 	.word	0x20020494

00011830 <tls_rpc_ip_event_handler>:
   11830:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   11832:	f248 0581 	movw	r5, #32897	; 0x8081
   11836:	42ab      	cmp	r3, r5
   11838:	460c      	mov	r4, r1
   1183a:	d062      	beq.n	11902 <tls_rpc_ip_event_handler+0xd2>
   1183c:	f249 0182 	movw	r1, #36994	; 0x9082
   11840:	428b      	cmp	r3, r1
   11842:	4606      	mov	r6, r0
   11844:	d02e      	beq.n	118a4 <tls_rpc_ip_event_handler+0x74>
   11846:	f248 0102 	movw	r1, #32770	; 0x8002
   1184a:	428b      	cmp	r3, r1
   1184c:	d001      	beq.n	11852 <tls_rpc_ip_event_handler+0x22>
   1184e:	2001      	movs	r0, #1
   11850:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   11852:	2c00      	cmp	r4, #0
   11854:	d0fb      	beq.n	1184e <tls_rpc_ip_event_handler+0x1e>
   11856:	6963      	ldr	r3, [r4, #20]
   11858:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
   1185c:	d002      	beq.n	11864 <tls_rpc_ip_event_handler+0x34>
   1185e:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
   11862:	d1f4      	bne.n	1184e <tls_rpc_ip_event_handler+0x1e>
   11864:	6823      	ldr	r3, [r4, #0]
   11866:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
   1186a:	6023      	str	r3, [r4, #0]
   1186c:	6955      	ldr	r5, [r2, #20]
   1186e:	2d00      	cmp	r5, #0
   11870:	d156      	bne.n	11920 <tls_rpc_ip_event_handler+0xf0>
   11872:	6823      	ldr	r3, [r4, #0]
   11874:	0c1b      	lsrs	r3, r3, #16
   11876:	041b      	lsls	r3, r3, #16
   11878:	f043 0305 	orr.w	r3, r3, #5
   1187c:	6023      	str	r3, [r4, #0]
   1187e:	6823      	ldr	r3, [r4, #0]
   11880:	00da      	lsls	r2, r3, #3
   11882:	d50d      	bpl.n	118a0 <tls_rpc_ip_event_handler+0x70>
   11884:	4b2b      	ldr	r3, [pc, #172]	; (11934 <tls_rpc_ip_event_handler+0x104>)
   11886:	eb06 02c6 	add.w	r2, r6, r6, lsl #3
   1188a:	f813 3022 	ldrb.w	r3, [r3, r2, lsl #2]
   1188e:	2b02      	cmp	r3, #2
   11890:	d106      	bne.n	118a0 <tls_rpc_ip_event_handler+0x70>
   11892:	4630      	mov	r0, r6
   11894:	4621      	mov	r1, r4
   11896:	f7ff fb9b 	bl	10fd0 <secure_client_socket>
   1189a:	b108      	cbz	r0, 118a0 <tls_rpc_ip_event_handler+0x70>
   1189c:	2873      	cmp	r0, #115	; 0x73
   1189e:	d142      	bne.n	11926 <tls_rpc_ip_event_handler+0xf6>
   118a0:	2000      	movs	r0, #0
   118a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   118a4:	2c00      	cmp	r4, #0
   118a6:	d0fb      	beq.n	118a0 <tls_rpc_ip_event_handler+0x70>
   118a8:	6823      	ldr	r3, [r4, #0]
   118aa:	b29b      	uxth	r3, r3
   118ac:	2b0b      	cmp	r3, #11
   118ae:	d1f7      	bne.n	118a0 <tls_rpc_ip_event_handler+0x70>
   118b0:	6915      	ldr	r5, [r2, #16]
   118b2:	2d00      	cmp	r5, #0
   118b4:	d134      	bne.n	11920 <tls_rpc_ip_event_handler+0xf0>
   118b6:	6823      	ldr	r3, [r4, #0]
   118b8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
   118bc:	6023      	str	r3, [r4, #0]
   118be:	6823      	ldr	r3, [r4, #0]
   118c0:	00db      	lsls	r3, r3, #3
   118c2:	d5ed      	bpl.n	118a0 <tls_rpc_ip_event_handler+0x70>
   118c4:	4f1c      	ldr	r7, [pc, #112]	; (11938 <tls_rpc_ip_event_handler+0x108>)
   118c6:	f857 0030 	ldr.w	r0, [r7, r0, lsl #3]
   118ca:	b130      	cbz	r0, 118da <tls_rpc_ip_event_handler+0xaa>
   118cc:	f7ff fb18 	bl	10f00 <nrf_free>
   118d0:	eb07 03c6 	add.w	r3, r7, r6, lsl #3
   118d4:	f847 5036 	str.w	r5, [r7, r6, lsl #3]
   118d8:	605d      	str	r5, [r3, #4]
   118da:	6823      	ldr	r3, [r4, #0]
   118dc:	2000      	movs	r0, #0
   118de:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
   118e2:	6023      	str	r3, [r4, #0]
   118e4:	6823      	ldr	r3, [r4, #0]
   118e6:	0c1b      	lsrs	r3, r3, #16
   118e8:	041b      	lsls	r3, r3, #16
   118ea:	f043 030c 	orr.w	r3, r3, #12
   118ee:	6023      	str	r3, [r4, #0]
   118f0:	6823      	ldr	r3, [r4, #0]
   118f2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   118f6:	6023      	str	r3, [r4, #0]
   118f8:	6823      	ldr	r3, [r4, #0]
   118fa:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   118fe:	6023      	str	r3, [r4, #0]
   11900:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   11902:	2900      	cmp	r1, #0
   11904:	d0cc      	beq.n	118a0 <tls_rpc_ip_event_handler+0x70>
   11906:	680b      	ldr	r3, [r1, #0]
   11908:	b29b      	uxth	r3, r3
   1190a:	2b0a      	cmp	r3, #10
   1190c:	d1c8      	bne.n	118a0 <tls_rpc_ip_event_handler+0x70>
   1190e:	6950      	ldr	r0, [r2, #20]
   11910:	b938      	cbnz	r0, 11922 <tls_rpc_ip_event_handler+0xf2>
   11912:	680b      	ldr	r3, [r1, #0]
   11914:	0c1b      	lsrs	r3, r3, #16
   11916:	041b      	lsls	r3, r3, #16
   11918:	f043 030b 	orr.w	r3, r3, #11
   1191c:	600b      	str	r3, [r1, #0]
   1191e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   11920:	4628      	mov	r0, r5
   11922:	f002 ff37 	bl	14794 <rpc_error_to_nrf_bsd_error>
   11926:	6060      	str	r0, [r4, #4]
   11928:	6823      	ldr	r3, [r4, #0]
   1192a:	2000      	movs	r0, #0
   1192c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
   11930:	6023      	str	r3, [r4, #0]
   11932:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   11934:	20020494 	.word	0x20020494
   11938:	200205d8 	.word	0x200205d8

0001193c <rpc_dfu_event_handler>:
   1193c:	b508      	push	{r3, lr}
   1193e:	4a08      	ldr	r2, [pc, #32]	; (11960 <rpc_dfu_event_handler+0x24>)
   11940:	68c1      	ldr	r1, [r0, #12]
   11942:	8812      	ldrh	r2, [r2, #0]
   11944:	4603      	mov	r3, r0
   11946:	ebb2 4f11 	cmp.w	r2, r1, lsr #16
   1194a:	d005      	beq.n	11958 <rpc_dfu_event_handler+0x1c>
   1194c:	6800      	ldr	r0, [r0, #0]
   1194e:	b110      	cbz	r0, 11956 <rpc_dfu_event_handler+0x1a>
   11950:	f7fe ff06 	bl	10760 <rpc_dfu_client_data_free>
   11954:	2000      	movs	r0, #0
   11956:	bd08      	pop	{r3, pc}
   11958:	4a02      	ldr	r2, [pc, #8]	; (11964 <rpc_dfu_event_handler+0x28>)
   1195a:	2001      	movs	r0, #1
   1195c:	6013      	str	r3, [r2, #0]
   1195e:	bd08      	pop	{r3, pc}
   11960:	20024cc8 	.word	0x20024cc8
   11964:	20020624 	.word	0x20020624

00011968 <mfu_interface_init>:
   11968:	2300      	movs	r3, #0
   1196a:	b510      	push	{r4, lr}
   1196c:	4808      	ldr	r0, [pc, #32]	; (11990 <mfu_interface_init+0x28>)
   1196e:	4909      	ldr	r1, [pc, #36]	; (11994 <mfu_interface_init+0x2c>)
   11970:	4a09      	ldr	r2, [pc, #36]	; (11998 <mfu_interface_init+0x30>)
   11972:	4c0a      	ldr	r4, [pc, #40]	; (1199c <mfu_interface_init+0x34>)
   11974:	8003      	strh	r3, [r0, #0]
   11976:	600b      	str	r3, [r1, #0]
   11978:	6013      	str	r3, [r2, #0]
   1197a:	6023      	str	r3, [r4, #0]
   1197c:	f7fe feba 	bl	106f4 <rpc_dfu_client_init>
   11980:	b910      	cbnz	r0, 11988 <mfu_interface_init+0x20>
   11982:	2301      	movs	r3, #1
   11984:	6023      	str	r3, [r4, #0]
   11986:	bd10      	pop	{r4, pc}
   11988:	f04f 30ff 	mov.w	r0, #4294967295
   1198c:	bd10      	pop	{r4, pc}
   1198e:	bf00      	nop
   11990:	20024cc8 	.word	0x20024cc8
   11994:	20020624 	.word	0x20020624
   11998:	20020620 	.word	0x20020620
   1199c:	20020618 	.word	0x20020618

000119a0 <mfu_interface_open>:
   119a0:	b508      	push	{r3, lr}
   119a2:	4b07      	ldr	r3, [pc, #28]	; (119c0 <mfu_interface_open+0x20>)
   119a4:	681a      	ldr	r2, [r3, #0]
   119a6:	2a01      	cmp	r2, #1
   119a8:	d103      	bne.n	119b2 <mfu_interface_open+0x12>
   119aa:	2202      	movs	r2, #2
   119ac:	601a      	str	r2, [r3, #0]
   119ae:	4805      	ldr	r0, [pc, #20]	; (119c4 <mfu_interface_open+0x24>)
   119b0:	bd08      	pop	{r3, pc}
   119b2:	2001      	movs	r0, #1
   119b4:	f7fd ff16 	bl	f7e4 <bsd_os_errno_set>
   119b8:	f04f 30ff 	mov.w	r0, #4294967295
   119bc:	bd08      	pop	{r3, pc}
   119be:	bf00      	nop
   119c0:	20020618 	.word	0x20020618
   119c4:	49765432 	.word	0x49765432

000119c8 <mfu_interface_close>:
   119c8:	b5f0      	push	{r4, r5, r6, r7, lr}
   119ca:	4c32      	ldr	r4, [pc, #200]	; (11a94 <mfu_interface_close+0xcc>)
   119cc:	b083      	sub	sp, #12
   119ce:	6823      	ldr	r3, [r4, #0]
   119d0:	1e9a      	subs	r2, r3, #2
   119d2:	2a01      	cmp	r2, #1
   119d4:	d857      	bhi.n	11a86 <mfu_interface_close+0xbe>
   119d6:	2b03      	cmp	r3, #3
   119d8:	d004      	beq.n	119e4 <mfu_interface_close+0x1c>
   119da:	2301      	movs	r3, #1
   119dc:	2000      	movs	r0, #0
   119de:	6023      	str	r3, [r4, #0]
   119e0:	b003      	add	sp, #12
   119e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
   119e4:	2100      	movs	r1, #0
   119e6:	4668      	mov	r0, sp
   119e8:	f7fe fe8a 	bl	10700 <rpc_dfu_client_request_alloc>
   119ec:	4603      	mov	r3, r0
   119ee:	2800      	cmp	r0, #0
   119f0:	d13d      	bne.n	11a6e <mfu_interface_close+0xa6>
   119f2:	2104      	movs	r1, #4
   119f4:	4e28      	ldr	r6, [pc, #160]	; (11a98 <mfu_interface_close+0xd0>)
   119f6:	9800      	ldr	r0, [sp, #0]
   119f8:	8832      	ldrh	r2, [r6, #0]
   119fa:	7201      	strb	r1, [r0, #8]
   119fc:	3201      	adds	r2, #1
   119fe:	b292      	uxth	r2, r2
   11a00:	0411      	lsls	r1, r2, #16
   11a02:	f041 0106 	orr.w	r1, r1, #6
   11a06:	4d25      	ldr	r5, [pc, #148]	; (11a9c <mfu_interface_close+0xd4>)
   11a08:	60c1      	str	r1, [r0, #12]
   11a0a:	7103      	strb	r3, [r0, #4]
   11a0c:	7143      	strb	r3, [r0, #5]
   11a0e:	7183      	strb	r3, [r0, #6]
   11a10:	71c3      	strb	r3, [r0, #7]
   11a12:	7243      	strb	r3, [r0, #9]
   11a14:	7283      	strb	r3, [r0, #10]
   11a16:	72c3      	strb	r3, [r0, #11]
   11a18:	2106      	movs	r1, #6
   11a1a:	8032      	strh	r2, [r6, #0]
   11a1c:	602b      	str	r3, [r5, #0]
   11a1e:	f7fe fe83 	bl	10728 <rpc_dfu_client_request_send>
   11a22:	b9d8      	cbnz	r0, 11a5c <mfu_interface_close+0x94>
   11a24:	f04f 33ff 	mov.w	r3, #4294967295
   11a28:	ae02      	add	r6, sp, #8
   11a2a:	4627      	mov	r7, r4
   11a2c:	f846 3d04 	str.w	r3, [r6, #-4]!
   11a30:	e004      	b.n	11a3c <mfu_interface_close+0x74>
   11a32:	4631      	mov	r1, r6
   11a34:	4638      	mov	r0, r7
   11a36:	f7fd fe41 	bl	f6bc <bsd_os_timedwait>
   11a3a:	b9f0      	cbnz	r0, 11a7a <mfu_interface_close+0xb2>
   11a3c:	6828      	ldr	r0, [r5, #0]
   11a3e:	2800      	cmp	r0, #0
   11a40:	d0f7      	beq.n	11a32 <mfu_interface_close+0x6a>
   11a42:	6905      	ldr	r5, [r0, #16]
   11a44:	f7fe fe84 	bl	10750 <rpc_dfu_client_message_free>
   11a48:	2d00      	cmp	r5, #0
   11a4a:	d0c6      	beq.n	119da <mfu_interface_close+0x12>
   11a4c:	4b14      	ldr	r3, [pc, #80]	; (11aa0 <mfu_interface_close+0xd8>)
   11a4e:	2008      	movs	r0, #8
   11a50:	601d      	str	r5, [r3, #0]
   11a52:	f7fd fec7 	bl	f7e4 <bsd_os_errno_set>
   11a56:	f04f 30ff 	mov.w	r0, #4294967295
   11a5a:	e7c1      	b.n	119e0 <mfu_interface_close+0x18>
   11a5c:	9800      	ldr	r0, [sp, #0]
   11a5e:	6803      	ldr	r3, [r0, #0]
   11a60:	b11b      	cbz	r3, 11a6a <mfu_interface_close+0xa2>
   11a62:	4618      	mov	r0, r3
   11a64:	f7fe fe7c 	bl	10760 <rpc_dfu_client_data_free>
   11a68:	9800      	ldr	r0, [sp, #0]
   11a6a:	f7fe fe71 	bl	10750 <rpc_dfu_client_message_free>
   11a6e:	200c      	movs	r0, #12
   11a70:	f7fd feb8 	bl	f7e4 <bsd_os_errno_set>
   11a74:	f04f 30ff 	mov.w	r0, #4294967295
   11a78:	e7b2      	b.n	119e0 <mfu_interface_close+0x18>
   11a7a:	203c      	movs	r0, #60	; 0x3c
   11a7c:	f7fd feb2 	bl	f7e4 <bsd_os_errno_set>
   11a80:	f04f 30ff 	mov.w	r0, #4294967295
   11a84:	e7ac      	b.n	119e0 <mfu_interface_close+0x18>
   11a86:	2001      	movs	r0, #1
   11a88:	f7fd feac 	bl	f7e4 <bsd_os_errno_set>
   11a8c:	f04f 30ff 	mov.w	r0, #4294967295
   11a90:	e7a6      	b.n	119e0 <mfu_interface_close+0x18>
   11a92:	bf00      	nop
   11a94:	20020618 	.word	0x20020618
   11a98:	20024cc8 	.word	0x20024cc8
   11a9c:	20020624 	.word	0x20020624
   11aa0:	2002061c 	.word	0x2002061c

00011aa4 <mfu_interface_sendto>:
   11aa4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   11aa8:	4e64      	ldr	r6, [pc, #400]	; (11c3c <mfu_interface_sendto+0x198>)
   11aaa:	460f      	mov	r7, r1
   11aac:	6831      	ldr	r1, [r6, #0]
   11aae:	4615      	mov	r5, r2
   11ab0:	1e8a      	subs	r2, r1, #2
   11ab2:	2a01      	cmp	r2, #1
   11ab4:	b082      	sub	sp, #8
   11ab6:	f200 80b4 	bhi.w	11c22 <mfu_interface_sendto+0x17e>
   11aba:	2f00      	cmp	r7, #0
   11abc:	f000 80a5 	beq.w	11c0a <mfu_interface_sendto+0x166>
   11ac0:	2d00      	cmp	r5, #0
   11ac2:	f000 80a2 	beq.w	11c0a <mfu_interface_sendto+0x166>
   11ac6:	2b00      	cmp	r3, #0
   11ac8:	f040 80b1 	bne.w	11c2e <mfu_interface_sendto+0x18a>
   11acc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   11ace:	2b00      	cmp	r3, #0
   11ad0:	f040 80a1 	bne.w	11c16 <mfu_interface_sendto+0x172>
   11ad4:	2902      	cmp	r1, #2
   11ad6:	d04f      	beq.n	11b78 <mfu_interface_sendto+0xd4>
   11ad8:	46e8      	mov	r8, sp
   11ada:	4640      	mov	r0, r8
   11adc:	4629      	mov	r1, r5
   11ade:	f7fe fe0f 	bl	10700 <rpc_dfu_client_request_alloc>
   11ae2:	4606      	mov	r6, r0
   11ae4:	b140      	cbz	r0, 11af8 <mfu_interface_sendto+0x54>
   11ae6:	200c      	movs	r0, #12
   11ae8:	f7fd fe7c 	bl	f7e4 <bsd_os_errno_set>
   11aec:	f04f 35ff 	mov.w	r5, #4294967295
   11af0:	4628      	mov	r0, r5
   11af2:	b002      	add	sp, #8
   11af4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   11af8:	9b00      	ldr	r3, [sp, #0]
   11afa:	4639      	mov	r1, r7
   11afc:	6818      	ldr	r0, [r3, #0]
   11afe:	462a      	mov	r2, r5
   11b00:	f008 fe91 	bl	1a826 <memcpy>
   11b04:	2104      	movs	r1, #4
   11b06:	4c4e      	ldr	r4, [pc, #312]	; (11c40 <mfu_interface_sendto+0x19c>)
   11b08:	9800      	ldr	r0, [sp, #0]
   11b0a:	8823      	ldrh	r3, [r4, #0]
   11b0c:	6045      	str	r5, [r0, #4]
   11b0e:	3301      	adds	r3, #1
   11b10:	b29b      	uxth	r3, r3
   11b12:	041a      	lsls	r2, r3, #16
   11b14:	8023      	strh	r3, [r4, #0]
   11b16:	430a      	orrs	r2, r1
   11b18:	4c4a      	ldr	r4, [pc, #296]	; (11c44 <mfu_interface_sendto+0x1a0>)
   11b1a:	60c2      	str	r2, [r0, #12]
   11b1c:	7246      	strb	r6, [r0, #9]
   11b1e:	7286      	strb	r6, [r0, #10]
   11b20:	72c6      	strb	r6, [r0, #11]
   11b22:	7201      	strb	r1, [r0, #8]
   11b24:	6026      	str	r6, [r4, #0]
   11b26:	f7fe fdff 	bl	10728 <rpc_dfu_client_request_send>
   11b2a:	2800      	cmp	r0, #0
   11b2c:	d163      	bne.n	11bf6 <mfu_interface_sendto+0x152>
   11b2e:	f04f 33ff 	mov.w	r3, #4294967295
   11b32:	ae02      	add	r6, sp, #8
   11b34:	4f41      	ldr	r7, [pc, #260]	; (11c3c <mfu_interface_sendto+0x198>)
   11b36:	f846 3d04 	str.w	r3, [r6, #-4]!
   11b3a:	e004      	b.n	11b46 <mfu_interface_sendto+0xa2>
   11b3c:	4631      	mov	r1, r6
   11b3e:	4638      	mov	r0, r7
   11b40:	f7fd fdbc 	bl	f6bc <bsd_os_timedwait>
   11b44:	b978      	cbnz	r0, 11b66 <mfu_interface_sendto+0xc2>
   11b46:	6820      	ldr	r0, [r4, #0]
   11b48:	2800      	cmp	r0, #0
   11b4a:	d0f7      	beq.n	11b3c <mfu_interface_sendto+0x98>
   11b4c:	6904      	ldr	r4, [r0, #16]
   11b4e:	f7fe fdff 	bl	10750 <rpc_dfu_client_message_free>
   11b52:	2c00      	cmp	r4, #0
   11b54:	d0cc      	beq.n	11af0 <mfu_interface_sendto+0x4c>
   11b56:	4b3c      	ldr	r3, [pc, #240]	; (11c48 <mfu_interface_sendto+0x1a4>)
   11b58:	2008      	movs	r0, #8
   11b5a:	601c      	str	r4, [r3, #0]
   11b5c:	f04f 35ff 	mov.w	r5, #4294967295
   11b60:	f7fd fe40 	bl	f7e4 <bsd_os_errno_set>
   11b64:	e7c4      	b.n	11af0 <mfu_interface_sendto+0x4c>
   11b66:	f04f 35ff 	mov.w	r5, #4294967295
   11b6a:	203c      	movs	r0, #60	; 0x3c
   11b6c:	f7fd fe3a 	bl	f7e4 <bsd_os_errno_set>
   11b70:	4628      	mov	r0, r5
   11b72:	b002      	add	sp, #8
   11b74:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   11b78:	46e8      	mov	r8, sp
   11b7a:	4619      	mov	r1, r3
   11b7c:	4640      	mov	r0, r8
   11b7e:	f7fe fdbf 	bl	10700 <rpc_dfu_client_request_alloc>
   11b82:	4602      	mov	r2, r0
   11b84:	2800      	cmp	r0, #0
   11b86:	d1ae      	bne.n	11ae6 <mfu_interface_sendto+0x42>
   11b88:	f04f 0c08 	mov.w	ip, #8
   11b8c:	492c      	ldr	r1, [pc, #176]	; (11c40 <mfu_interface_sendto+0x19c>)
   11b8e:	482f      	ldr	r0, [pc, #188]	; (11c4c <mfu_interface_sendto+0x1a8>)
   11b90:	880b      	ldrh	r3, [r1, #0]
   11b92:	6804      	ldr	r4, [r0, #0]
   11b94:	3301      	adds	r3, #1
   11b96:	9800      	ldr	r0, [sp, #0]
   11b98:	b29b      	uxth	r3, r3
   11b9a:	800b      	strh	r3, [r1, #0]
   11b9c:	041b      	lsls	r3, r3, #16
   11b9e:	f043 0303 	orr.w	r3, r3, #3
   11ba2:	6104      	str	r4, [r0, #16]
   11ba4:	4c27      	ldr	r4, [pc, #156]	; (11c44 <mfu_interface_sendto+0x1a0>)
   11ba6:	60c3      	str	r3, [r0, #12]
   11ba8:	7102      	strb	r2, [r0, #4]
   11baa:	7142      	strb	r2, [r0, #5]
   11bac:	7182      	strb	r2, [r0, #6]
   11bae:	71c2      	strb	r2, [r0, #7]
   11bb0:	7242      	strb	r2, [r0, #9]
   11bb2:	7282      	strb	r2, [r0, #10]
   11bb4:	72c2      	strb	r2, [r0, #11]
   11bb6:	f880 c008 	strb.w	ip, [r0, #8]
   11bba:	2103      	movs	r1, #3
   11bbc:	6022      	str	r2, [r4, #0]
   11bbe:	f7fe fdb3 	bl	10728 <rpc_dfu_client_request_send>
   11bc2:	b9c0      	cbnz	r0, 11bf6 <mfu_interface_sendto+0x152>
   11bc4:	f04f 33ff 	mov.w	r3, #4294967295
   11bc8:	f10d 0908 	add.w	r9, sp, #8
   11bcc:	f849 3d04 	str.w	r3, [r9, #-4]!
   11bd0:	46b2      	mov	sl, r6
   11bd2:	e005      	b.n	11be0 <mfu_interface_sendto+0x13c>
   11bd4:	4649      	mov	r1, r9
   11bd6:	4650      	mov	r0, sl
   11bd8:	f7fd fd70 	bl	f6bc <bsd_os_timedwait>
   11bdc:	2800      	cmp	r0, #0
   11bde:	d1c2      	bne.n	11b66 <mfu_interface_sendto+0xc2>
   11be0:	6820      	ldr	r0, [r4, #0]
   11be2:	2800      	cmp	r0, #0
   11be4:	d0f6      	beq.n	11bd4 <mfu_interface_sendto+0x130>
   11be6:	6904      	ldr	r4, [r0, #16]
   11be8:	f7fe fdb2 	bl	10750 <rpc_dfu_client_message_free>
   11bec:	2c00      	cmp	r4, #0
   11bee:	d1b2      	bne.n	11b56 <mfu_interface_sendto+0xb2>
   11bf0:	2303      	movs	r3, #3
   11bf2:	6033      	str	r3, [r6, #0]
   11bf4:	e771      	b.n	11ada <mfu_interface_sendto+0x36>
   11bf6:	9800      	ldr	r0, [sp, #0]
   11bf8:	6803      	ldr	r3, [r0, #0]
   11bfa:	b11b      	cbz	r3, 11c04 <mfu_interface_sendto+0x160>
   11bfc:	4618      	mov	r0, r3
   11bfe:	f7fe fdaf 	bl	10760 <rpc_dfu_client_data_free>
   11c02:	9800      	ldr	r0, [sp, #0]
   11c04:	f7fe fda4 	bl	10750 <rpc_dfu_client_message_free>
   11c08:	e76d      	b.n	11ae6 <mfu_interface_sendto+0x42>
   11c0a:	2016      	movs	r0, #22
   11c0c:	f7fd fdea 	bl	f7e4 <bsd_os_errno_set>
   11c10:	f04f 35ff 	mov.w	r5, #4294967295
   11c14:	e76c      	b.n	11af0 <mfu_interface_sendto+0x4c>
   11c16:	2038      	movs	r0, #56	; 0x38
   11c18:	f7fd fde4 	bl	f7e4 <bsd_os_errno_set>
   11c1c:	f04f 35ff 	mov.w	r5, #4294967295
   11c20:	e766      	b.n	11af0 <mfu_interface_sendto+0x4c>
   11c22:	2001      	movs	r0, #1
   11c24:	f7fd fdde 	bl	f7e4 <bsd_os_errno_set>
   11c28:	f04f 35ff 	mov.w	r5, #4294967295
   11c2c:	e760      	b.n	11af0 <mfu_interface_sendto+0x4c>
   11c2e:	202d      	movs	r0, #45	; 0x2d
   11c30:	f7fd fdd8 	bl	f7e4 <bsd_os_errno_set>
   11c34:	f04f 35ff 	mov.w	r5, #4294967295
   11c38:	e75a      	b.n	11af0 <mfu_interface_sendto+0x4c>
   11c3a:	bf00      	nop
   11c3c:	20020618 	.word	0x20020618
   11c40:	20024cc8 	.word	0x20024cc8
   11c44:	20020624 	.word	0x20020624
   11c48:	2002061c 	.word	0x2002061c
   11c4c:	20020620 	.word	0x20020620

00011c50 <mfu_interface_setopt>:
   11c50:	b5f0      	push	{r4, r5, r6, r7, lr}
   11c52:	4846      	ldr	r0, [pc, #280]	; (11d6c <mfu_interface_setopt+0x11c>)
   11c54:	b083      	sub	sp, #12
   11c56:	6800      	ldr	r0, [r0, #0]
   11c58:	3802      	subs	r0, #2
   11c5a:	2801      	cmp	r0, #1
   11c5c:	d877      	bhi.n	11d4e <mfu_interface_setopt+0xfe>
   11c5e:	f240 2003 	movw	r0, #515	; 0x203
   11c62:	4281      	cmp	r1, r0
   11c64:	d16d      	bne.n	11d42 <mfu_interface_setopt+0xf2>
   11c66:	3a04      	subs	r2, #4
   11c68:	2a03      	cmp	r2, #3
   11c6a:	d85c      	bhi.n	11d26 <mfu_interface_setopt+0xd6>
   11c6c:	e8df f002 	tbb	[pc, r2]
   11c70:	514e024b 	.word	0x514e024b
   11c74:	2407      	movs	r4, #7
   11c76:	4625      	mov	r5, r4
   11c78:	2100      	movs	r1, #0
   11c7a:	4668      	mov	r0, sp
   11c7c:	f7fe fd40 	bl	10700 <rpc_dfu_client_request_alloc>
   11c80:	4603      	mov	r3, r0
   11c82:	2800      	cmp	r0, #0
   11c84:	d138      	bne.n	11cf8 <mfu_interface_setopt+0xa8>
   11c86:	2704      	movs	r7, #4
   11c88:	4e39      	ldr	r6, [pc, #228]	; (11d70 <mfu_interface_setopt+0x120>)
   11c8a:	9800      	ldr	r0, [sp, #0]
   11c8c:	8832      	ldrh	r2, [r6, #0]
   11c8e:	4629      	mov	r1, r5
   11c90:	3201      	adds	r2, #1
   11c92:	b292      	uxth	r2, r2
   11c94:	ea44 4502 	orr.w	r5, r4, r2, lsl #16
   11c98:	4c36      	ldr	r4, [pc, #216]	; (11d74 <mfu_interface_setopt+0x124>)
   11c9a:	60c5      	str	r5, [r0, #12]
   11c9c:	7103      	strb	r3, [r0, #4]
   11c9e:	7143      	strb	r3, [r0, #5]
   11ca0:	7183      	strb	r3, [r0, #6]
   11ca2:	71c3      	strb	r3, [r0, #7]
   11ca4:	7243      	strb	r3, [r0, #9]
   11ca6:	7283      	strb	r3, [r0, #10]
   11ca8:	72c3      	strb	r3, [r0, #11]
   11caa:	7207      	strb	r7, [r0, #8]
   11cac:	8032      	strh	r2, [r6, #0]
   11cae:	6023      	str	r3, [r4, #0]
   11cb0:	f7fe fd3a 	bl	10728 <rpc_dfu_client_request_send>
   11cb4:	b9b8      	cbnz	r0, 11ce6 <mfu_interface_setopt+0x96>
   11cb6:	f04f 33ff 	mov.w	r3, #4294967295
   11cba:	ad02      	add	r5, sp, #8
   11cbc:	4e2b      	ldr	r6, [pc, #172]	; (11d6c <mfu_interface_setopt+0x11c>)
   11cbe:	f845 3d04 	str.w	r3, [r5, #-4]!
   11cc2:	e005      	b.n	11cd0 <mfu_interface_setopt+0x80>
   11cc4:	4629      	mov	r1, r5
   11cc6:	4630      	mov	r0, r6
   11cc8:	f7fd fcf8 	bl	f6bc <bsd_os_timedwait>
   11ccc:	2800      	cmp	r0, #0
   11cce:	d131      	bne.n	11d34 <mfu_interface_setopt+0xe4>
   11cd0:	6820      	ldr	r0, [r4, #0]
   11cd2:	2800      	cmp	r0, #0
   11cd4:	d0f6      	beq.n	11cc4 <mfu_interface_setopt+0x74>
   11cd6:	6904      	ldr	r4, [r0, #16]
   11cd8:	f7fe fd3a 	bl	10750 <rpc_dfu_client_message_free>
   11cdc:	2c00      	cmp	r4, #0
   11cde:	d13c      	bne.n	11d5a <mfu_interface_setopt+0x10a>
   11ce0:	4620      	mov	r0, r4
   11ce2:	b003      	add	sp, #12
   11ce4:	bdf0      	pop	{r4, r5, r6, r7, pc}
   11ce6:	9800      	ldr	r0, [sp, #0]
   11ce8:	6803      	ldr	r3, [r0, #0]
   11cea:	b11b      	cbz	r3, 11cf4 <mfu_interface_setopt+0xa4>
   11cec:	4618      	mov	r0, r3
   11cee:	f7fe fd37 	bl	10760 <rpc_dfu_client_data_free>
   11cf2:	9800      	ldr	r0, [sp, #0]
   11cf4:	f7fe fd2c 	bl	10750 <rpc_dfu_client_message_free>
   11cf8:	200c      	movs	r0, #12
   11cfa:	f7fd fd73 	bl	f7e4 <bsd_os_errno_set>
   11cfe:	f04f 30ff 	mov.w	r0, #4294967295
   11d02:	b003      	add	sp, #12
   11d04:	bdf0      	pop	{r4, r5, r6, r7, pc}
   11d06:	2405      	movs	r4, #5
   11d08:	4625      	mov	r5, r4
   11d0a:	e7b5      	b.n	11c78 <mfu_interface_setopt+0x28>
   11d0c:	2408      	movs	r4, #8
   11d0e:	4625      	mov	r5, r4
   11d10:	e7b2      	b.n	11c78 <mfu_interface_setopt+0x28>
   11d12:	b1b3      	cbz	r3, 11d42 <mfu_interface_setopt+0xf2>
   11d14:	9a08      	ldr	r2, [sp, #32]
   11d16:	2a04      	cmp	r2, #4
   11d18:	d113      	bne.n	11d42 <mfu_interface_setopt+0xf2>
   11d1a:	2000      	movs	r0, #0
   11d1c:	681a      	ldr	r2, [r3, #0]
   11d1e:	4b16      	ldr	r3, [pc, #88]	; (11d78 <mfu_interface_setopt+0x128>)
   11d20:	601a      	str	r2, [r3, #0]
   11d22:	b003      	add	sp, #12
   11d24:	bdf0      	pop	{r4, r5, r6, r7, pc}
   11d26:	202a      	movs	r0, #42	; 0x2a
   11d28:	f7fd fd5c 	bl	f7e4 <bsd_os_errno_set>
   11d2c:	f04f 30ff 	mov.w	r0, #4294967295
   11d30:	b003      	add	sp, #12
   11d32:	bdf0      	pop	{r4, r5, r6, r7, pc}
   11d34:	203c      	movs	r0, #60	; 0x3c
   11d36:	f7fd fd55 	bl	f7e4 <bsd_os_errno_set>
   11d3a:	f04f 30ff 	mov.w	r0, #4294967295
   11d3e:	b003      	add	sp, #12
   11d40:	bdf0      	pop	{r4, r5, r6, r7, pc}
   11d42:	2016      	movs	r0, #22
   11d44:	f7fd fd4e 	bl	f7e4 <bsd_os_errno_set>
   11d48:	f04f 30ff 	mov.w	r0, #4294967295
   11d4c:	e7c9      	b.n	11ce2 <mfu_interface_setopt+0x92>
   11d4e:	2001      	movs	r0, #1
   11d50:	f7fd fd48 	bl	f7e4 <bsd_os_errno_set>
   11d54:	f04f 30ff 	mov.w	r0, #4294967295
   11d58:	e7c3      	b.n	11ce2 <mfu_interface_setopt+0x92>
   11d5a:	4b08      	ldr	r3, [pc, #32]	; (11d7c <mfu_interface_setopt+0x12c>)
   11d5c:	2008      	movs	r0, #8
   11d5e:	601c      	str	r4, [r3, #0]
   11d60:	f7fd fd40 	bl	f7e4 <bsd_os_errno_set>
   11d64:	f04f 30ff 	mov.w	r0, #4294967295
   11d68:	e7bb      	b.n	11ce2 <mfu_interface_setopt+0x92>
   11d6a:	bf00      	nop
   11d6c:	20020618 	.word	0x20020618
   11d70:	20024cc8 	.word	0x20024cc8
   11d74:	20020624 	.word	0x20020624
   11d78:	20020620 	.word	0x20020620
   11d7c:	2002061c 	.word	0x2002061c

00011d80 <mfu_interface_getopt>:
   11d80:	f240 2003 	movw	r0, #515	; 0x203
   11d84:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   11d88:	4281      	cmp	r1, r0
   11d8a:	b082      	sub	sp, #8
   11d8c:	9e08      	ldr	r6, [sp, #32]
   11d8e:	f040 80ae 	bne.w	11eee <mfu_interface_getopt+0x16e>
   11d92:	461d      	mov	r5, r3
   11d94:	2b00      	cmp	r3, #0
   11d96:	f000 80aa 	beq.w	11eee <mfu_interface_getopt+0x16e>
   11d9a:	2e00      	cmp	r6, #0
   11d9c:	f000 80a7 	beq.w	11eee <mfu_interface_getopt+0x16e>
   11da0:	4b5e      	ldr	r3, [pc, #376]	; (11f1c <mfu_interface_getopt+0x19c>)
   11da2:	681b      	ldr	r3, [r3, #0]
   11da4:	3b02      	subs	r3, #2
   11da6:	2b01      	cmp	r3, #1
   11da8:	f200 80a7 	bhi.w	11efa <mfu_interface_getopt+0x17a>
   11dac:	3a01      	subs	r2, #1
   11dae:	2a13      	cmp	r2, #19
   11db0:	d879      	bhi.n	11ea6 <mfu_interface_getopt+0x126>
   11db2:	e8df f002 	tbb	[pc, r2]
   11db6:	5f17      	.short	0x5f17
   11db8:	78787878 	.word	0x78787878
   11dbc:	78787872 	.word	0x78787872
   11dc0:	78787878 	.word	0x78787878
   11dc4:	78787878 	.word	0x78787878
   11dc8:	0a78      	.short	0x0a78
   11dca:	6833      	ldr	r3, [r6, #0]
   11dcc:	2b04      	cmp	r3, #4
   11dce:	f040 808e 	bne.w	11eee <mfu_interface_getopt+0x16e>
   11dd2:	2200      	movs	r2, #0
   11dd4:	4610      	mov	r0, r2
   11dd6:	4b52      	ldr	r3, [pc, #328]	; (11f20 <mfu_interface_getopt+0x1a0>)
   11dd8:	6819      	ldr	r1, [r3, #0]
   11dda:	601a      	str	r2, [r3, #0]
   11ddc:	6029      	str	r1, [r5, #0]
   11dde:	b002      	add	sp, #8
   11de0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   11de4:	6833      	ldr	r3, [r6, #0]
   11de6:	2b24      	cmp	r3, #36	; 0x24
   11de8:	f040 8081 	bne.w	11eee <mfu_interface_getopt+0x16e>
   11dec:	2401      	movs	r4, #1
   11dee:	46a0      	mov	r8, r4
   11df0:	2100      	movs	r1, #0
   11df2:	4668      	mov	r0, sp
   11df4:	f7fe fc84 	bl	10700 <rpc_dfu_client_request_alloc>
   11df8:	2800      	cmp	r0, #0
   11dfa:	d146      	bne.n	11e8a <mfu_interface_getopt+0x10a>
   11dfc:	4949      	ldr	r1, [pc, #292]	; (11f24 <mfu_interface_getopt+0x1a4>)
   11dfe:	9b00      	ldr	r3, [sp, #0]
   11e00:	880a      	ldrh	r2, [r1, #0]
   11e02:	f1b8 0f03 	cmp.w	r8, #3
   11e06:	f102 0201 	add.w	r2, r2, #1
   11e0a:	b292      	uxth	r2, r2
   11e0c:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
   11e10:	7118      	strb	r0, [r3, #4]
   11e12:	800a      	strh	r2, [r1, #0]
   11e14:	60dc      	str	r4, [r3, #12]
   11e16:	7158      	strb	r0, [r3, #5]
   11e18:	7198      	strb	r0, [r3, #6]
   11e1a:	71d8      	strb	r0, [r3, #7]
   11e1c:	d04b      	beq.n	11eb6 <mfu_interface_getopt+0x136>
   11e1e:	2104      	movs	r1, #4
   11e20:	2200      	movs	r2, #0
   11e22:	4f41      	ldr	r7, [pc, #260]	; (11f28 <mfu_interface_getopt+0x1a8>)
   11e24:	6099      	str	r1, [r3, #8]
   11e26:	4618      	mov	r0, r3
   11e28:	4641      	mov	r1, r8
   11e2a:	603a      	str	r2, [r7, #0]
   11e2c:	f7fe fc7c 	bl	10728 <rpc_dfu_client_request_send>
   11e30:	2800      	cmp	r0, #0
   11e32:	d14d      	bne.n	11ed0 <mfu_interface_getopt+0x150>
   11e34:	f04f 33ff 	mov.w	r3, #4294967295
   11e38:	ac02      	add	r4, sp, #8
   11e3a:	f844 3d04 	str.w	r3, [r4, #-4]!
   11e3e:	f8df 80dc 	ldr.w	r8, [pc, #220]	; 11f1c <mfu_interface_getopt+0x19c>
   11e42:	e005      	b.n	11e50 <mfu_interface_getopt+0xd0>
   11e44:	4621      	mov	r1, r4
   11e46:	4640      	mov	r0, r8
   11e48:	f7fd fc38 	bl	f6bc <bsd_os_timedwait>
   11e4c:	2800      	cmp	r0, #0
   11e4e:	d137      	bne.n	11ec0 <mfu_interface_getopt+0x140>
   11e50:	6839      	ldr	r1, [r7, #0]
   11e52:	2900      	cmp	r1, #0
   11e54:	d0f6      	beq.n	11e44 <mfu_interface_getopt+0xc4>
   11e56:	690c      	ldr	r4, [r1, #16]
   11e58:	2c00      	cmp	r4, #0
   11e5a:	d154      	bne.n	11f06 <mfu_interface_getopt+0x186>
   11e5c:	6832      	ldr	r2, [r6, #0]
   11e5e:	3114      	adds	r1, #20
   11e60:	4628      	mov	r0, r5
   11e62:	f008 fce0 	bl	1a826 <memcpy>
   11e66:	6838      	ldr	r0, [r7, #0]
   11e68:	f7fe fc72 	bl	10750 <rpc_dfu_client_message_free>
   11e6c:	4620      	mov	r0, r4
   11e6e:	b002      	add	sp, #8
   11e70:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   11e74:	6833      	ldr	r3, [r6, #0]
   11e76:	2b04      	cmp	r3, #4
   11e78:	d139      	bne.n	11eee <mfu_interface_getopt+0x16e>
   11e7a:	2402      	movs	r4, #2
   11e7c:	2100      	movs	r1, #0
   11e7e:	4668      	mov	r0, sp
   11e80:	46a0      	mov	r8, r4
   11e82:	f7fe fc3d 	bl	10700 <rpc_dfu_client_request_alloc>
   11e86:	2800      	cmp	r0, #0
   11e88:	d0b8      	beq.n	11dfc <mfu_interface_getopt+0x7c>
   11e8a:	200c      	movs	r0, #12
   11e8c:	f7fd fcaa 	bl	f7e4 <bsd_os_errno_set>
   11e90:	f04f 30ff 	mov.w	r0, #4294967295
   11e94:	b002      	add	sp, #8
   11e96:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   11e9a:	6833      	ldr	r3, [r6, #0]
   11e9c:	2b04      	cmp	r3, #4
   11e9e:	d126      	bne.n	11eee <mfu_interface_getopt+0x16e>
   11ea0:	2409      	movs	r4, #9
   11ea2:	46a0      	mov	r8, r4
   11ea4:	e7a4      	b.n	11df0 <mfu_interface_getopt+0x70>
   11ea6:	202a      	movs	r0, #42	; 0x2a
   11ea8:	f7fd fc9c 	bl	f7e4 <bsd_os_errno_set>
   11eac:	f04f 30ff 	mov.w	r0, #4294967295
   11eb0:	b002      	add	sp, #8
   11eb2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   11eb6:	4a1d      	ldr	r2, [pc, #116]	; (11f2c <mfu_interface_getopt+0x1ac>)
   11eb8:	2108      	movs	r1, #8
   11eba:	6812      	ldr	r2, [r2, #0]
   11ebc:	611a      	str	r2, [r3, #16]
   11ebe:	e7af      	b.n	11e20 <mfu_interface_getopt+0xa0>
   11ec0:	203c      	movs	r0, #60	; 0x3c
   11ec2:	f7fd fc8f 	bl	f7e4 <bsd_os_errno_set>
   11ec6:	f04f 30ff 	mov.w	r0, #4294967295
   11eca:	b002      	add	sp, #8
   11ecc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   11ed0:	9800      	ldr	r0, [sp, #0]
   11ed2:	6803      	ldr	r3, [r0, #0]
   11ed4:	b11b      	cbz	r3, 11ede <mfu_interface_getopt+0x15e>
   11ed6:	4618      	mov	r0, r3
   11ed8:	f7fe fc42 	bl	10760 <rpc_dfu_client_data_free>
   11edc:	9800      	ldr	r0, [sp, #0]
   11ede:	f7fe fc37 	bl	10750 <rpc_dfu_client_message_free>
   11ee2:	200c      	movs	r0, #12
   11ee4:	f7fd fc7e 	bl	f7e4 <bsd_os_errno_set>
   11ee8:	f04f 30ff 	mov.w	r0, #4294967295
   11eec:	e7d2      	b.n	11e94 <mfu_interface_getopt+0x114>
   11eee:	2016      	movs	r0, #22
   11ef0:	f7fd fc78 	bl	f7e4 <bsd_os_errno_set>
   11ef4:	f04f 30ff 	mov.w	r0, #4294967295
   11ef8:	e771      	b.n	11dde <mfu_interface_getopt+0x5e>
   11efa:	2001      	movs	r0, #1
   11efc:	f7fd fc72 	bl	f7e4 <bsd_os_errno_set>
   11f00:	f04f 30ff 	mov.w	r0, #4294967295
   11f04:	e76b      	b.n	11dde <mfu_interface_getopt+0x5e>
   11f06:	4b06      	ldr	r3, [pc, #24]	; (11f20 <mfu_interface_getopt+0x1a0>)
   11f08:	2008      	movs	r0, #8
   11f0a:	601c      	str	r4, [r3, #0]
   11f0c:	f7fd fc6a 	bl	f7e4 <bsd_os_errno_set>
   11f10:	6838      	ldr	r0, [r7, #0]
   11f12:	f7fe fc1d 	bl	10750 <rpc_dfu_client_message_free>
   11f16:	f04f 30ff 	mov.w	r0, #4294967295
   11f1a:	e760      	b.n	11dde <mfu_interface_getopt+0x5e>
   11f1c:	20020618 	.word	0x20020618
   11f20:	2002061c 	.word	0x2002061c
   11f24:	20024cc8 	.word	0x20024cc8
   11f28:	20020624 	.word	0x20020624
   11f2c:	20020620 	.word	0x20020620

00011f30 <bsd_recoverable_error_handler>:
   11f30:	4770      	bx	lr
   11f32:	bf00      	nop

00011f34 <bsd_platform_error_handler>:
   11f34:	b508      	push	{r3, lr}
   11f36:	f7ff fffb 	bl	11f30 <bsd_recoverable_error_handler>
   11f3a:	bd08      	pop	{r3, pc}

00011f3c <bsd_init>:
   11f3c:	b510      	push	{r4, lr}
   11f3e:	4c06      	ldr	r4, [pc, #24]	; (11f58 <bsd_init+0x1c>)
   11f40:	7823      	ldrb	r3, [r4, #0]
   11f42:	b92b      	cbnz	r3, 11f50 <bsd_init+0x14>
   11f44:	f000 f818 	bl	11f78 <bsd_platform_init>
   11f48:	b908      	cbnz	r0, 11f4e <bsd_init+0x12>
   11f4a:	2301      	movs	r3, #1
   11f4c:	7023      	strb	r3, [r4, #0]
   11f4e:	bd10      	pop	{r4, pc}
   11f50:	f04f 30ff 	mov.w	r0, #4294967295
   11f54:	bd10      	pop	{r4, pc}
   11f56:	bf00      	nop
   11f58:	2002511b 	.word	0x2002511b

00011f5c <unimplemented_method>:
   11f5c:	b40f      	push	{r0, r1, r2, r3}
   11f5e:	b508      	push	{r3, lr}
   11f60:	202d      	movs	r0, #45	; 0x2d
   11f62:	f7fd fc3f 	bl	f7e4 <bsd_os_errno_set>
   11f66:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   11f6a:	f04f 30ff 	mov.w	r0, #4294967295
   11f6e:	b004      	add	sp, #16
   11f70:	4770      	bx	lr
   11f72:	bf00      	nop

00011f74 <rpc_transport_ipc_fault_handler>:
   11f74:	f7ff bfde 	b.w	11f34 <bsd_platform_error_handler>

00011f78 <bsd_platform_init>:
   11f78:	b5f0      	push	{r4, r5, r6, r7, lr}
   11f7a:	b093      	sub	sp, #76	; 0x4c
   11f7c:	f7fe fe28 	bl	10bd0 <nrf_mem_init>
   11f80:	2800      	cmp	r0, #0
   11f82:	d14c      	bne.n	1201e <bsd_platform_init+0xa6>
   11f84:	4928      	ldr	r1, [pc, #160]	; (12028 <bsd_platform_init+0xb0>)
   11f86:	a801      	add	r0, sp, #4
   11f88:	f7fe fe96 	bl	10cb8 <nrf_mem_register>
   11f8c:	2800      	cmp	r0, #0
   11f8e:	d146      	bne.n	1201e <bsd_platform_init+0xa6>
   11f90:	f7fd fd1c 	bl	f9cc <bsd_os_init>
   11f94:	f004 f9fa 	bl	1638c <rpc_framework_init>
   11f98:	2800      	cmp	r0, #0
   11f9a:	d140      	bne.n	1201e <bsd_platform_init+0xa6>
   11f9c:	2320      	movs	r3, #32
   11f9e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
   11fa2:	2208      	movs	r2, #8
   11fa4:	f44f 5c40 	mov.w	ip, #12288	; 0x3000
   11fa8:	4f20      	ldr	r7, [pc, #128]	; (1202c <bsd_platform_init+0xb4>)
   11faa:	4e21      	ldr	r6, [pc, #132]	; (12030 <bsd_platform_init+0xb8>)
   11fac:	9303      	str	r3, [sp, #12]
   11fae:	9305      	str	r3, [sp, #20]
   11fb0:	9307      	str	r3, [sp, #28]
   11fb2:	4d20      	ldr	r5, [pc, #128]	; (12034 <bsd_platform_init+0xbc>)
   11fb4:	9109      	str	r1, [sp, #36]	; 0x24
   11fb6:	910d      	str	r1, [sp, #52]	; 0x34
   11fb8:	4c1f      	ldr	r4, [pc, #124]	; (12038 <bsd_platform_init+0xc0>)
   11fba:	4920      	ldr	r1, [pc, #128]	; (1203c <bsd_platform_init+0xc4>)
   11fbc:	4b20      	ldr	r3, [pc, #128]	; (12040 <bsd_platform_init+0xc8>)
   11fbe:	e9cd 0010 	strd	r0, r0, [sp, #64]	; 0x40
   11fc2:	eb0d 0002 	add.w	r0, sp, r2
   11fc6:	f8cd c02c 	str.w	ip, [sp, #44]	; 0x2c
   11fca:	e9cd 220e 	strd	r2, r2, [sp, #56]	; 0x38
   11fce:	9702      	str	r7, [sp, #8]
   11fd0:	9604      	str	r6, [sp, #16]
   11fd2:	9506      	str	r5, [sp, #24]
   11fd4:	9408      	str	r4, [sp, #32]
   11fd6:	910a      	str	r1, [sp, #40]	; 0x28
   11fd8:	930c      	str	r3, [sp, #48]	; 0x30
   11fda:	f000 fbe9 	bl	127b0 <rpc_transport_ipc_init>
   11fde:	b108      	cbz	r0, 11fe4 <bsd_platform_init+0x6c>
   11fe0:	b013      	add	sp, #76	; 0x4c
   11fe2:	bdf0      	pop	{r4, r5, r6, r7, pc}
   11fe4:	f003 ff6e 	bl	15ec4 <interface_init>
   11fe8:	b9c8      	cbnz	r0, 1201e <bsd_platform_init+0xa6>
   11fea:	f7fe fa3b 	bl	10464 <at_interface_init>
   11fee:	b9b0      	cbnz	r0, 1201e <bsd_platform_init+0xa6>
   11ff0:	f002 fc22 	bl	14838 <ip_interface_init>
   11ff4:	b998      	cbnz	r0, 1201e <bsd_platform_init+0xa6>
   11ff6:	f7ff f881 	bl	110fc <tls_interface_init>
   11ffa:	b980      	cbnz	r0, 1201e <bsd_platform_init+0xa6>
   11ffc:	f7ff fcb4 	bl	11968 <mfu_interface_init>
   12000:	b968      	cbnz	r0, 1201e <bsd_platform_init+0xa6>
   12002:	f001 f9e9 	bl	133d8 <pdn_interface_init>
   12006:	b950      	cbnz	r0, 1201e <bsd_platform_init+0xa6>
   12008:	f005 fc94 	bl	17934 <gnss_interface_init>
   1200c:	b938      	cbnz	r0, 1201e <bsd_platform_init+0xa6>
   1200e:	f7fd fec1 	bl	fd94 <logobj_interface_init>
   12012:	3000      	adds	r0, #0
   12014:	bf18      	it	ne
   12016:	2001      	movne	r0, #1
   12018:	4240      	negs	r0, r0
   1201a:	b013      	add	sp, #76	; 0x4c
   1201c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1201e:	f04f 30ff 	mov.w	r0, #4294967295
   12022:	b013      	add	sp, #76	; 0x4c
   12024:	bdf0      	pop	{r4, r5, r6, r7, pc}
   12026:	bf00      	nop
   12028:	0001c3f4 	.word	0x0001c3f4
   1202c:	20010000 	.word	0x20010000
   12030:	20010040 	.word	0x20010040
   12034:	20010020 	.word	0x20010020
   12038:	20017060 	.word	0x20017060
   1203c:	20010060 	.word	0x20010060
   12040:	20013060 	.word	0x20013060

00012044 <bsd_platform_af_method_table_get>:
   12044:	2805      	cmp	r0, #5
   12046:	d02a      	beq.n	1209e <bsd_platform_af_method_table_get+0x5a>
   12048:	b508      	push	{r3, lr}
   1204a:	d914      	bls.n	12076 <bsd_platform_af_method_table_get+0x32>
   1204c:	280a      	cmp	r0, #10
   1204e:	d016      	beq.n	1207e <bsd_platform_af_method_table_get+0x3a>
   12050:	2866      	cmp	r0, #102	; 0x66
   12052:	d11f      	bne.n	12094 <bsd_platform_af_method_table_get+0x50>
   12054:	f240 2302 	movw	r3, #514	; 0x202
   12058:	429a      	cmp	r2, r3
   1205a:	d035      	beq.n	120c8 <bsd_platform_af_method_table_get+0x84>
   1205c:	f240 2305 	movw	r3, #517	; 0x205
   12060:	429a      	cmp	r2, r3
   12062:	d035      	beq.n	120d0 <bsd_platform_af_method_table_get+0x8c>
   12064:	f240 2301 	movw	r3, #513	; 0x201
   12068:	429a      	cmp	r2, r3
   1206a:	d02f      	beq.n	120cc <bsd_platform_af_method_table_get+0x88>
   1206c:	202b      	movs	r0, #43	; 0x2b
   1206e:	f7fd fbb9 	bl	f7e4 <bsd_os_errno_set>
   12072:	2000      	movs	r0, #0
   12074:	bd08      	pop	{r3, pc}
   12076:	2801      	cmp	r0, #1
   12078:	d016      	beq.n	120a8 <bsd_platform_af_method_table_get+0x64>
   1207a:	2802      	cmp	r0, #2
   1207c:	d10a      	bne.n	12094 <bsd_platform_af_method_table_get+0x50>
   1207e:	f5b2 7f83 	cmp.w	r2, #262	; 0x106
   12082:	d21a      	bcs.n	120ba <bsd_platform_af_method_table_get+0x76>
   12084:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
   12088:	d21a      	bcs.n	120c0 <bsd_platform_af_method_table_get+0x7c>
   1208a:	3a01      	subs	r2, #1
   1208c:	2a01      	cmp	r2, #1
   1208e:	d8ed      	bhi.n	1206c <bsd_platform_af_method_table_get+0x28>
   12090:	4810      	ldr	r0, [pc, #64]	; (120d4 <bsd_platform_af_method_table_get+0x90>)
   12092:	bd08      	pop	{r3, pc}
   12094:	2016      	movs	r0, #22
   12096:	f7fd fba5 	bl	f7e4 <bsd_os_errno_set>
   1209a:	2000      	movs	r0, #0
   1209c:	bd08      	pop	{r3, pc}
   1209e:	2903      	cmp	r1, #3
   120a0:	480d      	ldr	r0, [pc, #52]	; (120d8 <bsd_platform_af_method_table_get+0x94>)
   120a2:	bf18      	it	ne
   120a4:	2000      	movne	r0, #0
   120a6:	4770      	bx	lr
   120a8:	f240 2303 	movw	r3, #515	; 0x203
   120ac:	429a      	cmp	r2, r3
   120ae:	d009      	beq.n	120c4 <bsd_platform_af_method_table_get+0x80>
   120b0:	f5b2 7f01 	cmp.w	r2, #516	; 0x204
   120b4:	d1da      	bne.n	1206c <bsd_platform_af_method_table_get+0x28>
   120b6:	4809      	ldr	r0, [pc, #36]	; (120dc <bsd_platform_af_method_table_get+0x98>)
   120b8:	bd08      	pop	{r3, pc}
   120ba:	f5b2 7f87 	cmp.w	r2, #270	; 0x10e
   120be:	d1d5      	bne.n	1206c <bsd_platform_af_method_table_get+0x28>
   120c0:	4807      	ldr	r0, [pc, #28]	; (120e0 <bsd_platform_af_method_table_get+0x9c>)
   120c2:	bd08      	pop	{r3, pc}
   120c4:	4807      	ldr	r0, [pc, #28]	; (120e4 <bsd_platform_af_method_table_get+0xa0>)
   120c6:	bd08      	pop	{r3, pc}
   120c8:	4807      	ldr	r0, [pc, #28]	; (120e8 <bsd_platform_af_method_table_get+0xa4>)
   120ca:	bd08      	pop	{r3, pc}
   120cc:	4807      	ldr	r0, [pc, #28]	; (120ec <bsd_platform_af_method_table_get+0xa8>)
   120ce:	bd08      	pop	{r3, pc}
   120d0:	4807      	ldr	r0, [pc, #28]	; (120f0 <bsd_platform_af_method_table_get+0xac>)
   120d2:	bd08      	pop	{r3, pc}
   120d4:	0001c2c4 	.word	0x0001c2c4
   120d8:	0001c3b4 	.word	0x0001c3b4
   120dc:	0001c364 	.word	0x0001c364
   120e0:	0001c2ec 	.word	0x0001c2ec
   120e4:	0001c314 	.word	0x0001c314
   120e8:	0001c33c 	.word	0x0001c33c
   120ec:	0001c29c 	.word	0x0001c29c
   120f0:	0001c38c 	.word	0x0001c38c

000120f4 <bsd_platform_fd_method_table_get>:
   120f4:	b538      	push	{r3, r4, r5, lr}
   120f6:	4605      	mov	r5, r0
   120f8:	f004 f816 	bl	16128 <interface_socket_from_handle_get>
   120fc:	4604      	mov	r4, r0
   120fe:	b960      	cbnz	r0, 1211a <bsd_platform_fd_method_table_get+0x26>
   12100:	4b2c      	ldr	r3, [pc, #176]	; (121b4 <bsd_platform_fd_method_table_get+0xc0>)
   12102:	429d      	cmp	r5, r3
   12104:	d02f      	beq.n	12166 <bsd_platform_fd_method_table_get+0x72>
   12106:	0c2b      	lsrs	r3, r5, #16
   12108:	4a2b      	ldr	r2, [pc, #172]	; (121b8 <bsd_platform_fd_method_table_get+0xc4>)
   1210a:	041b      	lsls	r3, r3, #16
   1210c:	4293      	cmp	r3, r2
   1210e:	d03d      	beq.n	1218c <bsd_platform_fd_method_table_get+0x98>
   12110:	4b2a      	ldr	r3, [pc, #168]	; (121bc <bsd_platform_fd_method_table_get+0xc8>)
   12112:	429d      	cmp	r5, r3
   12114:	d149      	bne.n	121aa <bsd_platform_fd_method_table_get+0xb6>
   12116:	482a      	ldr	r0, [pc, #168]	; (121c0 <bsd_platform_fd_method_table_get+0xcc>)
   12118:	bd38      	pop	{r3, r4, r5, pc}
   1211a:	68c3      	ldr	r3, [r0, #12]
   1211c:	6942      	ldr	r2, [r0, #20]
   1211e:	2b05      	cmp	r3, #5
   12120:	d036      	beq.n	12190 <bsd_platform_fd_method_table_get+0x9c>
   12122:	d911      	bls.n	12148 <bsd_platform_fd_method_table_get+0x54>
   12124:	2b0a      	cmp	r3, #10
   12126:	d013      	beq.n	12150 <bsd_platform_fd_method_table_get+0x5c>
   12128:	2b66      	cmp	r3, #102	; 0x66
   1212a:	d11e      	bne.n	1216a <bsd_platform_fd_method_table_get+0x76>
   1212c:	f240 2302 	movw	r3, #514	; 0x202
   12130:	429a      	cmp	r2, r3
   12132:	d02b      	beq.n	1218c <bsd_platform_fd_method_table_get+0x98>
   12134:	f240 2305 	movw	r3, #517	; 0x205
   12138:	429a      	cmp	r2, r3
   1213a:	d02f      	beq.n	1219c <bsd_platform_fd_method_table_get+0xa8>
   1213c:	f240 2301 	movw	r3, #513	; 0x201
   12140:	429a      	cmp	r2, r3
   12142:	d11e      	bne.n	12182 <bsd_platform_fd_method_table_get+0x8e>
   12144:	481f      	ldr	r0, [pc, #124]	; (121c4 <bsd_platform_fd_method_table_get+0xd0>)
   12146:	bd38      	pop	{r3, r4, r5, pc}
   12148:	2b01      	cmp	r3, #1
   1214a:	d013      	beq.n	12174 <bsd_platform_fd_method_table_get+0x80>
   1214c:	2b02      	cmp	r3, #2
   1214e:	d10c      	bne.n	1216a <bsd_platform_fd_method_table_get+0x76>
   12150:	f5b2 7f83 	cmp.w	r2, #262	; 0x106
   12154:	d224      	bcs.n	121a0 <bsd_platform_fd_method_table_get+0xac>
   12156:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
   1215a:	d224      	bcs.n	121a6 <bsd_platform_fd_method_table_get+0xb2>
   1215c:	3a01      	subs	r2, #1
   1215e:	2a01      	cmp	r2, #1
   12160:	d80f      	bhi.n	12182 <bsd_platform_fd_method_table_get+0x8e>
   12162:	4819      	ldr	r0, [pc, #100]	; (121c8 <bsd_platform_fd_method_table_get+0xd4>)
   12164:	bd38      	pop	{r3, r4, r5, pc}
   12166:	4819      	ldr	r0, [pc, #100]	; (121cc <bsd_platform_fd_method_table_get+0xd8>)
   12168:	bd38      	pop	{r3, r4, r5, pc}
   1216a:	2016      	movs	r0, #22
   1216c:	f7fd fb3a 	bl	f7e4 <bsd_os_errno_set>
   12170:	2000      	movs	r0, #0
   12172:	bd38      	pop	{r3, r4, r5, pc}
   12174:	f240 2303 	movw	r3, #515	; 0x203
   12178:	429a      	cmp	r2, r3
   1217a:	d0f4      	beq.n	12166 <bsd_platform_fd_method_table_get+0x72>
   1217c:	f5b2 7f01 	cmp.w	r2, #516	; 0x204
   12180:	d0c9      	beq.n	12116 <bsd_platform_fd_method_table_get+0x22>
   12182:	202b      	movs	r0, #43	; 0x2b
   12184:	f7fd fb2e 	bl	f7e4 <bsd_os_errno_set>
   12188:	2000      	movs	r0, #0
   1218a:	bd38      	pop	{r3, r4, r5, pc}
   1218c:	4810      	ldr	r0, [pc, #64]	; (121d0 <bsd_platform_fd_method_table_get+0xdc>)
   1218e:	bd38      	pop	{r3, r4, r5, pc}
   12190:	6903      	ldr	r3, [r0, #16]
   12192:	4810      	ldr	r0, [pc, #64]	; (121d4 <bsd_platform_fd_method_table_get+0xe0>)
   12194:	2b03      	cmp	r3, #3
   12196:	bf18      	it	ne
   12198:	2000      	movne	r0, #0
   1219a:	bd38      	pop	{r3, r4, r5, pc}
   1219c:	480e      	ldr	r0, [pc, #56]	; (121d8 <bsd_platform_fd_method_table_get+0xe4>)
   1219e:	bd38      	pop	{r3, r4, r5, pc}
   121a0:	f5b2 7f87 	cmp.w	r2, #270	; 0x10e
   121a4:	d1ed      	bne.n	12182 <bsd_platform_fd_method_table_get+0x8e>
   121a6:	480d      	ldr	r0, [pc, #52]	; (121dc <bsd_platform_fd_method_table_get+0xe8>)
   121a8:	bd38      	pop	{r3, r4, r5, pc}
   121aa:	2009      	movs	r0, #9
   121ac:	f7fd fb1a 	bl	f7e4 <bsd_os_errno_set>
   121b0:	4620      	mov	r0, r4
   121b2:	bd38      	pop	{r3, r4, r5, pc}
   121b4:	49765432 	.word	0x49765432
   121b8:	789a0000 	.word	0x789a0000
   121bc:	49765443 	.word	0x49765443
   121c0:	0001c364 	.word	0x0001c364
   121c4:	0001c29c 	.word	0x0001c29c
   121c8:	0001c2c4 	.word	0x0001c2c4
   121cc:	0001c314 	.word	0x0001c314
   121d0:	0001c33c 	.word	0x0001c33c
   121d4:	0001c3b4 	.word	0x0001c3b4
   121d8:	0001c38c 	.word	0x0001c38c
   121dc:	0001c2ec 	.word	0x0001c2ec

000121e0 <bsd_platform_getaddrinfo>:
   121e0:	f003 bad6 	b.w	15790 <ip_interface_getaddrinfo>

000121e4 <bsd_platform_freeaddrinfo>:
   121e4:	f003 bbca 	b.w	1597c <ip_interface_freeaddrinfo>

000121e8 <bsd_platform_poll>:
   121e8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   121ec:	ea42 72e2 	orr.w	r2, r2, r2, asr #31
   121f0:	b083      	sub	sp, #12
   121f2:	9200      	str	r2, [sp, #0]
   121f4:	2800      	cmp	r0, #0
   121f6:	d048      	beq.n	1228a <bsd_platform_poll+0xa2>
   121f8:	1e4b      	subs	r3, r1, #1
   121fa:	2b08      	cmp	r3, #8
   121fc:	d845      	bhi.n	1228a <bsd_platform_poll+0xa2>
   121fe:	4680      	mov	r8, r0
   12200:	4605      	mov	r5, r0
   12202:	2400      	movs	r4, #0
   12204:	eb00 07c1 	add.w	r7, r0, r1, lsl #3
   12208:	88ab      	ldrh	r3, [r5, #4]
   1220a:	6828      	ldr	r0, [r5, #0]
   1220c:	f003 0303 	and.w	r3, r3, #3
   12210:	a901      	add	r1, sp, #4
   12212:	f043 061c 	orr.w	r6, r3, #28
   12216:	f003 ff95 	bl	16144 <interface_socket_event_get>
   1221a:	9b01      	ldr	r3, [sp, #4]
   1221c:	3508      	adds	r5, #8
   1221e:	4033      	ands	r3, r6
   12220:	f825 3c02 	strh.w	r3, [r5, #-2]
   12224:	b103      	cbz	r3, 12228 <bsd_platform_poll+0x40>
   12226:	3401      	adds	r4, #1
   12228:	42af      	cmp	r7, r5
   1222a:	d1ed      	bne.n	12208 <bsd_platform_poll+0x20>
   1222c:	bb9c      	cbnz	r4, 12296 <bsd_platform_poll+0xae>
   1222e:	4669      	mov	r1, sp
   12230:	4640      	mov	r0, r8
   12232:	f7fd fa43 	bl	f6bc <bsd_os_timedwait>
   12236:	4607      	mov	r7, r0
   12238:	b108      	cbz	r0, 1223e <bsd_platform_poll+0x56>
   1223a:	283c      	cmp	r0, #60	; 0x3c
   1223c:	d11d      	bne.n	1227a <bsd_platform_poll+0x92>
   1223e:	46c1      	mov	r9, r8
   12240:	2600      	movs	r6, #0
   12242:	f8b9 3004 	ldrh.w	r3, [r9, #4]
   12246:	f8d9 0000 	ldr.w	r0, [r9]
   1224a:	f003 0303 	and.w	r3, r3, #3
   1224e:	a901      	add	r1, sp, #4
   12250:	f043 041c 	orr.w	r4, r3, #28
   12254:	f003 ff76 	bl	16144 <interface_socket_event_get>
   12258:	9b01      	ldr	r3, [sp, #4]
   1225a:	f109 0908 	add.w	r9, r9, #8
   1225e:	4023      	ands	r3, r4
   12260:	f829 3c02 	strh.w	r3, [r9, #-2]
   12264:	b103      	cbz	r3, 12268 <bsd_platform_poll+0x80>
   12266:	3601      	adds	r6, #1
   12268:	454d      	cmp	r5, r9
   1226a:	d1ea      	bne.n	12242 <bsd_platform_poll+0x5a>
   1226c:	b90e      	cbnz	r6, 12272 <bsd_platform_poll+0x8a>
   1226e:	2f00      	cmp	r7, #0
   12270:	d0dd      	beq.n	1222e <bsd_platform_poll+0x46>
   12272:	4630      	mov	r0, r6
   12274:	b003      	add	sp, #12
   12276:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   1227a:	2023      	movs	r0, #35	; 0x23
   1227c:	f7fd fab2 	bl	f7e4 <bsd_os_errno_set>
   12280:	f04f 30ff 	mov.w	r0, #4294967295
   12284:	b003      	add	sp, #12
   12286:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   1228a:	2016      	movs	r0, #22
   1228c:	f7fd faaa 	bl	f7e4 <bsd_os_errno_set>
   12290:	f04f 30ff 	mov.w	r0, #4294967295
   12294:	e7ee      	b.n	12274 <bsd_platform_poll+0x8c>
   12296:	4620      	mov	r0, r4
   12298:	e7ec      	b.n	12274 <bsd_platform_poll+0x8c>
   1229a:	bf00      	nop

0001229c <bsd_platform_fcntl>:
   1229c:	b508      	push	{r3, lr}
   1229e:	4b06      	ldr	r3, [pc, #24]	; (122b8 <bsd_platform_fcntl+0x1c>)
   122a0:	4298      	cmp	r0, r3
   122a2:	d003      	beq.n	122ac <bsd_platform_fcntl+0x10>
   122a4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   122a8:	f003 bfd6 	b.w	16258 <interface_socket_fcntl>
   122ac:	202d      	movs	r0, #45	; 0x2d
   122ae:	f7fd fa99 	bl	f7e4 <bsd_os_errno_set>
   122b2:	f04f 30ff 	mov.w	r0, #4294967295
   122b6:	bd08      	pop	{r3, pc}
   122b8:	49765432 	.word	0x49765432

000122bc <ipc_trace_init>:
   122bc:	4b01      	ldr	r3, [pc, #4]	; (122c4 <ipc_trace_init+0x8>)
   122be:	6018      	str	r0, [r3, #0]
   122c0:	4770      	bx	lr
   122c2:	bf00      	nop
   122c4:	20020634 	.word	0x20020634

000122c8 <bsd_os_trace_irq_handler>:
   122c8:	b5f0      	push	{r4, r5, r6, r7, lr}
   122ca:	4b6c      	ldr	r3, [pc, #432]	; (1247c <bsd_os_trace_irq_handler+0x1b4>)
   122cc:	b083      	sub	sp, #12
   122ce:	781b      	ldrb	r3, [r3, #0]
   122d0:	2b00      	cmp	r3, #0
   122d2:	f000 80ad 	beq.w	12430 <bsd_os_trace_irq_handler+0x168>
   122d6:	4b6a      	ldr	r3, [pc, #424]	; (12480 <bsd_os_trace_irq_handler+0x1b8>)
   122d8:	681c      	ldr	r4, [r3, #0]
   122da:	68a2      	ldr	r2, [r4, #8]
   122dc:	6863      	ldr	r3, [r4, #4]
   122de:	429a      	cmp	r2, r3
   122e0:	d02d      	beq.n	1233e <bsd_os_trace_irq_handler+0x76>
   122e2:	f64b 63ef 	movw	r3, #48879	; 0xbeef
   122e6:	f8ad 3000 	strh.w	r3, [sp]
   122ea:	7823      	ldrb	r3, [r4, #0]
   122ec:	466e      	mov	r6, sp
   122ee:	f88d 3004 	strb.w	r3, [sp, #4]
   122f2:	6863      	ldr	r3, [r4, #4]
   122f4:	2105      	movs	r1, #5
   122f6:	429a      	cmp	r2, r3
   122f8:	bf2a      	itet	cs
   122fa:	6927      	ldrcs	r7, [r4, #16]
   122fc:	1a9f      	subcc	r7, r3, r2
   122fe:	1abf      	subcs	r7, r7, r2
   12300:	429a      	cmp	r2, r3
   12302:	bf94      	ite	ls
   12304:	2500      	movls	r5, #0
   12306:	68e5      	ldrhi	r5, [r4, #12]
   12308:	b2bf      	uxth	r7, r7
   1230a:	bf88      	it	hi
   1230c:	1b5b      	subhi	r3, r3, r5
   1230e:	4630      	mov	r0, r6
   12310:	bf88      	it	hi
   12312:	b29d      	uxthhi	r5, r3
   12314:	f8ad 7002 	strh.w	r7, [sp, #2]
   12318:	f7fd fb70 	bl	f9fc <bsd_os_trace_put>
   1231c:	f8bd 1002 	ldrh.w	r1, [sp, #2]
   12320:	68a0      	ldr	r0, [r4, #8]
   12322:	f7fd fb6b 	bl	f9fc <bsd_os_trace_put>
   12326:	68a3      	ldr	r3, [r4, #8]
   12328:	6922      	ldr	r2, [r4, #16]
   1232a:	441f      	add	r7, r3
   1232c:	4297      	cmp	r7, r2
   1232e:	bf08      	it	eq
   12330:	68e3      	ldreq	r3, [r4, #12]
   12332:	60a7      	str	r7, [r4, #8]
   12334:	bf08      	it	eq
   12336:	60a3      	streq	r3, [r4, #8]
   12338:	2d00      	cmp	r5, #0
   1233a:	f040 808d 	bne.w	12458 <bsd_os_trace_irq_handler+0x190>
   1233e:	4b51      	ldr	r3, [pc, #324]	; (12484 <bsd_os_trace_irq_handler+0x1bc>)
   12340:	681c      	ldr	r4, [r3, #0]
   12342:	68a2      	ldr	r2, [r4, #8]
   12344:	6863      	ldr	r3, [r4, #4]
   12346:	429a      	cmp	r2, r3
   12348:	d02c      	beq.n	123a4 <bsd_os_trace_irq_handler+0xdc>
   1234a:	f64b 63ef 	movw	r3, #48879	; 0xbeef
   1234e:	f8ad 3000 	strh.w	r3, [sp]
   12352:	7823      	ldrb	r3, [r4, #0]
   12354:	466e      	mov	r6, sp
   12356:	f88d 3004 	strb.w	r3, [sp, #4]
   1235a:	6863      	ldr	r3, [r4, #4]
   1235c:	2105      	movs	r1, #5
   1235e:	429a      	cmp	r2, r3
   12360:	bf2a      	itet	cs
   12362:	6927      	ldrcs	r7, [r4, #16]
   12364:	1a9f      	subcc	r7, r3, r2
   12366:	1abf      	subcs	r7, r7, r2
   12368:	429a      	cmp	r2, r3
   1236a:	bf94      	ite	ls
   1236c:	2500      	movls	r5, #0
   1236e:	68e5      	ldrhi	r5, [r4, #12]
   12370:	b2bf      	uxth	r7, r7
   12372:	bf88      	it	hi
   12374:	1b5b      	subhi	r3, r3, r5
   12376:	4630      	mov	r0, r6
   12378:	bf88      	it	hi
   1237a:	b29d      	uxthhi	r5, r3
   1237c:	f8ad 7002 	strh.w	r7, [sp, #2]
   12380:	f7fd fb3c 	bl	f9fc <bsd_os_trace_put>
   12384:	f8bd 1002 	ldrh.w	r1, [sp, #2]
   12388:	68a0      	ldr	r0, [r4, #8]
   1238a:	f7fd fb37 	bl	f9fc <bsd_os_trace_put>
   1238e:	68a3      	ldr	r3, [r4, #8]
   12390:	6922      	ldr	r2, [r4, #16]
   12392:	441f      	add	r7, r3
   12394:	4297      	cmp	r7, r2
   12396:	bf08      	it	eq
   12398:	68e3      	ldreq	r3, [r4, #12]
   1239a:	60a7      	str	r7, [r4, #8]
   1239c:	bf08      	it	eq
   1239e:	60a3      	streq	r3, [r4, #8]
   123a0:	2d00      	cmp	r5, #0
   123a2:	d148      	bne.n	12436 <bsd_os_trace_irq_handler+0x16e>
   123a4:	4b38      	ldr	r3, [pc, #224]	; (12488 <bsd_os_trace_irq_handler+0x1c0>)
   123a6:	681c      	ldr	r4, [r3, #0]
   123a8:	68a2      	ldr	r2, [r4, #8]
   123aa:	6863      	ldr	r3, [r4, #4]
   123ac:	429a      	cmp	r2, r3
   123ae:	d02b      	beq.n	12408 <bsd_os_trace_irq_handler+0x140>
   123b0:	f64b 63ef 	movw	r3, #48879	; 0xbeef
   123b4:	f8ad 3000 	strh.w	r3, [sp]
   123b8:	7823      	ldrb	r3, [r4, #0]
   123ba:	466e      	mov	r6, sp
   123bc:	f88d 3004 	strb.w	r3, [sp, #4]
   123c0:	6863      	ldr	r3, [r4, #4]
   123c2:	2105      	movs	r1, #5
   123c4:	429a      	cmp	r2, r3
   123c6:	bf2a      	itet	cs
   123c8:	6927      	ldrcs	r7, [r4, #16]
   123ca:	1a9f      	subcc	r7, r3, r2
   123cc:	1abf      	subcs	r7, r7, r2
   123ce:	429a      	cmp	r2, r3
   123d0:	bf94      	ite	ls
   123d2:	2500      	movls	r5, #0
   123d4:	68e5      	ldrhi	r5, [r4, #12]
   123d6:	b2bf      	uxth	r7, r7
   123d8:	bf88      	it	hi
   123da:	1b5b      	subhi	r3, r3, r5
   123dc:	4630      	mov	r0, r6
   123de:	bf88      	it	hi
   123e0:	b29d      	uxthhi	r5, r3
   123e2:	f8ad 7002 	strh.w	r7, [sp, #2]
   123e6:	f7fd fb09 	bl	f9fc <bsd_os_trace_put>
   123ea:	f8bd 1002 	ldrh.w	r1, [sp, #2]
   123ee:	68a0      	ldr	r0, [r4, #8]
   123f0:	f7fd fb04 	bl	f9fc <bsd_os_trace_put>
   123f4:	68a3      	ldr	r3, [r4, #8]
   123f6:	6922      	ldr	r2, [r4, #16]
   123f8:	441f      	add	r7, r3
   123fa:	4297      	cmp	r7, r2
   123fc:	bf08      	it	eq
   123fe:	68e3      	ldreq	r3, [r4, #12]
   12400:	60a7      	str	r7, [r4, #8]
   12402:	bf08      	it	eq
   12404:	60a3      	streq	r3, [r4, #8]
   12406:	b90d      	cbnz	r5, 1240c <bsd_os_trace_irq_handler+0x144>
   12408:	b003      	add	sp, #12
   1240a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1240c:	4630      	mov	r0, r6
   1240e:	2105      	movs	r1, #5
   12410:	f8ad 5002 	strh.w	r5, [sp, #2]
   12414:	f7fd faf2 	bl	f9fc <bsd_os_trace_put>
   12418:	f8bd 1002 	ldrh.w	r1, [sp, #2]
   1241c:	68e0      	ldr	r0, [r4, #12]
   1241e:	f7fd faed 	bl	f9fc <bsd_os_trace_put>
   12422:	f8bd 2002 	ldrh.w	r2, [sp, #2]
   12426:	68e3      	ldr	r3, [r4, #12]
   12428:	4413      	add	r3, r2
   1242a:	60a3      	str	r3, [r4, #8]
   1242c:	b003      	add	sp, #12
   1242e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   12430:	f7fd faa6 	bl	f980 <bsd_os_trace_irq_clear>
   12434:	e74f      	b.n	122d6 <bsd_os_trace_irq_handler+0xe>
   12436:	2105      	movs	r1, #5
   12438:	4630      	mov	r0, r6
   1243a:	f8ad 5002 	strh.w	r5, [sp, #2]
   1243e:	f7fd fadd 	bl	f9fc <bsd_os_trace_put>
   12442:	f8bd 1002 	ldrh.w	r1, [sp, #2]
   12446:	68e0      	ldr	r0, [r4, #12]
   12448:	f7fd fad8 	bl	f9fc <bsd_os_trace_put>
   1244c:	f8bd 2002 	ldrh.w	r2, [sp, #2]
   12450:	68e3      	ldr	r3, [r4, #12]
   12452:	4413      	add	r3, r2
   12454:	60a3      	str	r3, [r4, #8]
   12456:	e7a5      	b.n	123a4 <bsd_os_trace_irq_handler+0xdc>
   12458:	2105      	movs	r1, #5
   1245a:	4630      	mov	r0, r6
   1245c:	f8ad 5002 	strh.w	r5, [sp, #2]
   12460:	f7fd facc 	bl	f9fc <bsd_os_trace_put>
   12464:	f8bd 1002 	ldrh.w	r1, [sp, #2]
   12468:	68e0      	ldr	r0, [r4, #12]
   1246a:	f7fd fac7 	bl	f9fc <bsd_os_trace_put>
   1246e:	f8bd 2002 	ldrh.w	r2, [sp, #2]
   12472:	68e3      	ldr	r3, [r4, #12]
   12474:	4413      	add	r3, r2
   12476:	60a3      	str	r3, [r4, #8]
   12478:	e761      	b.n	1233e <bsd_os_trace_irq_handler+0x76>
   1247a:	bf00      	nop
   1247c:	2002511c 	.word	0x2002511c
   12480:	20020630 	.word	0x20020630
   12484:	20020628 	.word	0x20020628
   12488:	2002062c 	.word	0x2002062c

0001248c <ipc_trace_handle>:
   1248c:	2200      	movs	r2, #0
   1248e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12492:	4bb0      	ldr	r3, [pc, #704]	; (12754 <ipc_trace_handle+0x2c8>)
   12494:	b083      	sub	sp, #12
   12496:	681b      	ldr	r3, [r3, #0]
   12498:	6919      	ldr	r1, [r3, #16]
   1249a:	695c      	ldr	r4, [r3, #20]
   1249c:	7c18      	ldrb	r0, [r3, #16]
   1249e:	741a      	strb	r2, [r3, #16]
   124a0:	7c58      	ldrb	r0, [r3, #17]
   124a2:	745a      	strb	r2, [r3, #17]
   124a4:	7c98      	ldrb	r0, [r3, #18]
   124a6:	749a      	strb	r2, [r3, #18]
   124a8:	7cd8      	ldrb	r0, [r3, #19]
   124aa:	74da      	strb	r2, [r3, #19]
   124ac:	7d18      	ldrb	r0, [r3, #20]
   124ae:	751a      	strb	r2, [r3, #20]
   124b0:	7d58      	ldrb	r0, [r3, #21]
   124b2:	755a      	strb	r2, [r3, #21]
   124b4:	7d98      	ldrb	r0, [r3, #22]
   124b6:	759a      	strb	r2, [r3, #22]
   124b8:	7dd8      	ldrb	r0, [r3, #23]
   124ba:	75da      	strb	r2, [r3, #23]
   124bc:	b1b9      	cbz	r1, 124ee <ipc_trace_handle+0x62>
   124be:	3901      	subs	r1, #1
   124c0:	2903      	cmp	r1, #3
   124c2:	d814      	bhi.n	124ee <ipc_trace_handle+0x62>
   124c4:	e8df f011 	tbh	[pc, r1, lsl #1]
   124c8:	010300d6 	.word	0x010300d6
   124cc:	00160004 	.word	0x00160004
   124d0:	2501      	movs	r5, #1
   124d2:	2003      	movs	r0, #3
   124d4:	2200      	movs	r2, #0
   124d6:	f06f 015f 	mvn.w	r1, #95	; 0x5f
   124da:	4c9f      	ldr	r4, [pc, #636]	; (12758 <ipc_trace_handle+0x2cc>)
   124dc:	7025      	strb	r5, [r4, #0]
   124de:	7a1c      	ldrb	r4, [r3, #8]
   124e0:	7218      	strb	r0, [r3, #8]
   124e2:	7a58      	ldrb	r0, [r3, #9]
   124e4:	725a      	strb	r2, [r3, #9]
   124e6:	7a98      	ldrb	r0, [r3, #10]
   124e8:	729a      	strb	r2, [r3, #10]
   124ea:	7ada      	ldrb	r2, [r3, #11]
   124ec:	72d9      	strb	r1, [r3, #11]
   124ee:	b003      	add	sp, #12
   124f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   124f4:	2104      	movs	r1, #4
   124f6:	2200      	movs	r2, #0
   124f8:	f06f 005f 	mvn.w	r0, #95	; 0x5f
   124fc:	7a1c      	ldrb	r4, [r3, #8]
   124fe:	7219      	strb	r1, [r3, #8]
   12500:	7a59      	ldrb	r1, [r3, #9]
   12502:	725a      	strb	r2, [r3, #9]
   12504:	4994      	ldr	r1, [pc, #592]	; (12758 <ipc_trace_handle+0x2cc>)
   12506:	7a9c      	ldrb	r4, [r3, #10]
   12508:	729a      	strb	r2, [r3, #10]
   1250a:	7adc      	ldrb	r4, [r3, #11]
   1250c:	72d8      	strb	r0, [r3, #11]
   1250e:	700a      	strb	r2, [r1, #0]
   12510:	780b      	ldrb	r3, [r1, #0]
   12512:	2b00      	cmp	r3, #0
   12514:	f000 8117 	beq.w	12746 <ipc_trace_handle+0x2ba>
   12518:	4b90      	ldr	r3, [pc, #576]	; (1275c <ipc_trace_handle+0x2d0>)
   1251a:	681c      	ldr	r4, [r3, #0]
   1251c:	68a2      	ldr	r2, [r4, #8]
   1251e:	6863      	ldr	r3, [r4, #4]
   12520:	429a      	cmp	r2, r3
   12522:	d02d      	beq.n	12580 <ipc_trace_handle+0xf4>
   12524:	f64b 63ef 	movw	r3, #48879	; 0xbeef
   12528:	f8ad 3000 	strh.w	r3, [sp]
   1252c:	7823      	ldrb	r3, [r4, #0]
   1252e:	466e      	mov	r6, sp
   12530:	f88d 3004 	strb.w	r3, [sp, #4]
   12534:	6863      	ldr	r3, [r4, #4]
   12536:	2105      	movs	r1, #5
   12538:	429a      	cmp	r2, r3
   1253a:	bf2a      	itet	cs
   1253c:	6927      	ldrcs	r7, [r4, #16]
   1253e:	1a9f      	subcc	r7, r3, r2
   12540:	1abf      	subcs	r7, r7, r2
   12542:	429a      	cmp	r2, r3
   12544:	bf94      	ite	ls
   12546:	2500      	movls	r5, #0
   12548:	68e5      	ldrhi	r5, [r4, #12]
   1254a:	b2bf      	uxth	r7, r7
   1254c:	bf88      	it	hi
   1254e:	1b5b      	subhi	r3, r3, r5
   12550:	4630      	mov	r0, r6
   12552:	bf88      	it	hi
   12554:	b29d      	uxthhi	r5, r3
   12556:	f8ad 7002 	strh.w	r7, [sp, #2]
   1255a:	f7fd fa4f 	bl	f9fc <bsd_os_trace_put>
   1255e:	f8bd 1002 	ldrh.w	r1, [sp, #2]
   12562:	68a0      	ldr	r0, [r4, #8]
   12564:	f7fd fa4a 	bl	f9fc <bsd_os_trace_put>
   12568:	68a3      	ldr	r3, [r4, #8]
   1256a:	6922      	ldr	r2, [r4, #16]
   1256c:	441f      	add	r7, r3
   1256e:	4297      	cmp	r7, r2
   12570:	bf08      	it	eq
   12572:	68e3      	ldreq	r3, [r4, #12]
   12574:	60a7      	str	r7, [r4, #8]
   12576:	bf08      	it	eq
   12578:	60a3      	streq	r3, [r4, #8]
   1257a:	2d00      	cmp	r5, #0
   1257c:	f040 80d2 	bne.w	12724 <ipc_trace_handle+0x298>
   12580:	4b77      	ldr	r3, [pc, #476]	; (12760 <ipc_trace_handle+0x2d4>)
   12582:	681c      	ldr	r4, [r3, #0]
   12584:	68a2      	ldr	r2, [r4, #8]
   12586:	6863      	ldr	r3, [r4, #4]
   12588:	429a      	cmp	r2, r3
   1258a:	d02d      	beq.n	125e8 <ipc_trace_handle+0x15c>
   1258c:	f64b 63ef 	movw	r3, #48879	; 0xbeef
   12590:	f8ad 3000 	strh.w	r3, [sp]
   12594:	7823      	ldrb	r3, [r4, #0]
   12596:	466e      	mov	r6, sp
   12598:	f88d 3004 	strb.w	r3, [sp, #4]
   1259c:	6863      	ldr	r3, [r4, #4]
   1259e:	2105      	movs	r1, #5
   125a0:	429a      	cmp	r2, r3
   125a2:	bf2a      	itet	cs
   125a4:	6927      	ldrcs	r7, [r4, #16]
   125a6:	1a9f      	subcc	r7, r3, r2
   125a8:	1abf      	subcs	r7, r7, r2
   125aa:	429a      	cmp	r2, r3
   125ac:	bf94      	ite	ls
   125ae:	2500      	movls	r5, #0
   125b0:	68e5      	ldrhi	r5, [r4, #12]
   125b2:	b2bf      	uxth	r7, r7
   125b4:	bf88      	it	hi
   125b6:	1b5b      	subhi	r3, r3, r5
   125b8:	4630      	mov	r0, r6
   125ba:	bf88      	it	hi
   125bc:	b29d      	uxthhi	r5, r3
   125be:	f8ad 7002 	strh.w	r7, [sp, #2]
   125c2:	f7fd fa1b 	bl	f9fc <bsd_os_trace_put>
   125c6:	f8bd 1002 	ldrh.w	r1, [sp, #2]
   125ca:	68a0      	ldr	r0, [r4, #8]
   125cc:	f7fd fa16 	bl	f9fc <bsd_os_trace_put>
   125d0:	68a3      	ldr	r3, [r4, #8]
   125d2:	6922      	ldr	r2, [r4, #16]
   125d4:	441f      	add	r7, r3
   125d6:	4297      	cmp	r7, r2
   125d8:	bf08      	it	eq
   125da:	68e3      	ldreq	r3, [r4, #12]
   125dc:	60a7      	str	r7, [r4, #8]
   125de:	bf08      	it	eq
   125e0:	60a3      	streq	r3, [r4, #8]
   125e2:	2d00      	cmp	r5, #0
   125e4:	f040 808d 	bne.w	12702 <ipc_trace_handle+0x276>
   125e8:	4b5e      	ldr	r3, [pc, #376]	; (12764 <ipc_trace_handle+0x2d8>)
   125ea:	681c      	ldr	r4, [r3, #0]
   125ec:	68a2      	ldr	r2, [r4, #8]
   125ee:	6863      	ldr	r3, [r4, #4]
   125f0:	429a      	cmp	r2, r3
   125f2:	f43f af7c 	beq.w	124ee <ipc_trace_handle+0x62>
   125f6:	f64b 63ef 	movw	r3, #48879	; 0xbeef
   125fa:	f8ad 3000 	strh.w	r3, [sp]
   125fe:	7823      	ldrb	r3, [r4, #0]
   12600:	466e      	mov	r6, sp
   12602:	f88d 3004 	strb.w	r3, [sp, #4]
   12606:	6863      	ldr	r3, [r4, #4]
   12608:	2105      	movs	r1, #5
   1260a:	429a      	cmp	r2, r3
   1260c:	bf2a      	itet	cs
   1260e:	6927      	ldrcs	r7, [r4, #16]
   12610:	1a9f      	subcc	r7, r3, r2
   12612:	1abf      	subcs	r7, r7, r2
   12614:	429a      	cmp	r2, r3
   12616:	bf94      	ite	ls
   12618:	2500      	movls	r5, #0
   1261a:	68e5      	ldrhi	r5, [r4, #12]
   1261c:	b2bf      	uxth	r7, r7
   1261e:	bf88      	it	hi
   12620:	1b5b      	subhi	r3, r3, r5
   12622:	4630      	mov	r0, r6
   12624:	bf88      	it	hi
   12626:	b29d      	uxthhi	r5, r3
   12628:	f8ad 7002 	strh.w	r7, [sp, #2]
   1262c:	f7fd f9e6 	bl	f9fc <bsd_os_trace_put>
   12630:	f8bd 1002 	ldrh.w	r1, [sp, #2]
   12634:	68a0      	ldr	r0, [r4, #8]
   12636:	f7fd f9e1 	bl	f9fc <bsd_os_trace_put>
   1263a:	68a3      	ldr	r3, [r4, #8]
   1263c:	6922      	ldr	r2, [r4, #16]
   1263e:	441f      	add	r7, r3
   12640:	4297      	cmp	r7, r2
   12642:	bf08      	it	eq
   12644:	68e3      	ldreq	r3, [r4, #12]
   12646:	60a7      	str	r7, [r4, #8]
   12648:	bf08      	it	eq
   1264a:	60a3      	streq	r3, [r4, #8]
   1264c:	2d00      	cmp	r5, #0
   1264e:	f43f af4e 	beq.w	124ee <ipc_trace_handle+0x62>
   12652:	2105      	movs	r1, #5
   12654:	4630      	mov	r0, r6
   12656:	f8ad 5002 	strh.w	r5, [sp, #2]
   1265a:	f7fd f9cf 	bl	f9fc <bsd_os_trace_put>
   1265e:	f8bd 1002 	ldrh.w	r1, [sp, #2]
   12662:	68e0      	ldr	r0, [r4, #12]
   12664:	f7fd f9ca 	bl	f9fc <bsd_os_trace_put>
   12668:	f8bd 2002 	ldrh.w	r2, [sp, #2]
   1266c:	68e3      	ldr	r3, [r4, #12]
   1266e:	4413      	add	r3, r2
   12670:	60a3      	str	r3, [r4, #8]
   12672:	e73c      	b.n	124ee <ipc_trace_handle+0x62>
   12674:	4a38      	ldr	r2, [pc, #224]	; (12758 <ipc_trace_handle+0x2cc>)
   12676:	7811      	ldrb	r1, [r2, #0]
   12678:	b109      	cbz	r1, 1267e <ipc_trace_handle+0x1f2>
   1267a:	2100      	movs	r1, #0
   1267c:	7011      	strb	r1, [r2, #0]
   1267e:	68a5      	ldr	r5, [r4, #8]
   12680:	2d00      	cmp	r5, #0
   12682:	d039      	beq.n	126f8 <ipc_trace_handle+0x26c>
   12684:	f04f 0c00 	mov.w	ip, #0
   12688:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 12760 <ipc_trace_handle+0x2d4>
   1268c:	f8df b0cc 	ldr.w	fp, [pc, #204]	; 1275c <ipc_trace_handle+0x2d0>
   12690:	4934      	ldr	r1, [pc, #208]	; (12764 <ipc_trace_handle+0x2d8>)
   12692:	46e1      	mov	r9, ip
   12694:	4666      	mov	r6, ip
   12696:	4662      	mov	r2, ip
   12698:	f8d1 e000 	ldr.w	lr, [r1]
   1269c:	f8da 8000 	ldr.w	r8, [sl]
   126a0:	f8db 7000 	ldr.w	r7, [fp]
   126a4:	e008      	b.n	126b8 <ipc_trace_handle+0x22c>
   126a6:	2963      	cmp	r1, #99	; 0x63
   126a8:	d016      	beq.n	126d8 <ipc_trace_handle+0x24c>
   126aa:	2961      	cmp	r1, #97	; 0x61
   126ac:	bf04      	itt	eq
   126ae:	4607      	moveq	r7, r0
   126b0:	2601      	moveq	r6, #1
   126b2:	3201      	adds	r2, #1
   126b4:	42aa      	cmp	r2, r5
   126b6:	d013      	beq.n	126e0 <ipc_trace_handle+0x254>
   126b8:	1c91      	adds	r1, r2, #2
   126ba:	eb04 0181 	add.w	r1, r4, r1, lsl #2
   126be:	6848      	ldr	r0, [r1, #4]
   126c0:	7801      	ldrb	r1, [r0, #0]
   126c2:	2962      	cmp	r1, #98	; 0x62
   126c4:	d1ef      	bne.n	126a6 <ipc_trace_handle+0x21a>
   126c6:	4680      	mov	r8, r0
   126c8:	f04f 0901 	mov.w	r9, #1
   126cc:	e7f1      	b.n	126b2 <ipc_trace_handle+0x226>
   126ce:	f7fd f94f 	bl	f970 <bsd_os_trace_irq_set>
   126d2:	b003      	add	sp, #12
   126d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   126d8:	4686      	mov	lr, r0
   126da:	f04f 0c01 	mov.w	ip, #1
   126de:	e7e8      	b.n	126b2 <ipc_trace_handle+0x226>
   126e0:	bba6      	cbnz	r6, 1274c <ipc_trace_handle+0x2c0>
   126e2:	f1b9 0f00 	cmp.w	r9, #0
   126e6:	d001      	beq.n	126ec <ipc_trace_handle+0x260>
   126e8:	f8ca 8000 	str.w	r8, [sl]
   126ec:	f1bc 0f00 	cmp.w	ip, #0
   126f0:	d002      	beq.n	126f8 <ipc_trace_handle+0x26c>
   126f2:	4a1c      	ldr	r2, [pc, #112]	; (12764 <ipc_trace_handle+0x2d8>)
   126f4:	f8c2 e000 	str.w	lr, [r2]
   126f8:	2001      	movs	r0, #1
   126fa:	2200      	movs	r2, #0
   126fc:	f06f 015f 	mvn.w	r1, #95	; 0x5f
   12700:	e6ed      	b.n	124de <ipc_trace_handle+0x52>
   12702:	2105      	movs	r1, #5
   12704:	4630      	mov	r0, r6
   12706:	f8ad 5002 	strh.w	r5, [sp, #2]
   1270a:	f7fd f977 	bl	f9fc <bsd_os_trace_put>
   1270e:	f8bd 1002 	ldrh.w	r1, [sp, #2]
   12712:	68e0      	ldr	r0, [r4, #12]
   12714:	f7fd f972 	bl	f9fc <bsd_os_trace_put>
   12718:	f8bd 2002 	ldrh.w	r2, [sp, #2]
   1271c:	68e3      	ldr	r3, [r4, #12]
   1271e:	4413      	add	r3, r2
   12720:	60a3      	str	r3, [r4, #8]
   12722:	e761      	b.n	125e8 <ipc_trace_handle+0x15c>
   12724:	2105      	movs	r1, #5
   12726:	4630      	mov	r0, r6
   12728:	f8ad 5002 	strh.w	r5, [sp, #2]
   1272c:	f7fd f966 	bl	f9fc <bsd_os_trace_put>
   12730:	f8bd 1002 	ldrh.w	r1, [sp, #2]
   12734:	68e0      	ldr	r0, [r4, #12]
   12736:	f7fd f961 	bl	f9fc <bsd_os_trace_put>
   1273a:	f8bd 2002 	ldrh.w	r2, [sp, #2]
   1273e:	68e3      	ldr	r3, [r4, #12]
   12740:	4413      	add	r3, r2
   12742:	60a3      	str	r3, [r4, #8]
   12744:	e71c      	b.n	12580 <ipc_trace_handle+0xf4>
   12746:	f7fd f91b 	bl	f980 <bsd_os_trace_irq_clear>
   1274a:	e6e5      	b.n	12518 <ipc_trace_handle+0x8c>
   1274c:	f8cb 7000 	str.w	r7, [fp]
   12750:	e7c7      	b.n	126e2 <ipc_trace_handle+0x256>
   12752:	bf00      	nop
   12754:	20020634 	.word	0x20020634
   12758:	2002511c 	.word	0x2002511c
   1275c:	20020630 	.word	0x20020630
   12760:	20020628 	.word	0x20020628
   12764:	2002062c 	.word	0x2002062c

00012768 <rpc_trace_coredump_in_progress>:
   12768:	4b01      	ldr	r3, [pc, #4]	; (12770 <rpc_trace_coredump_in_progress+0x8>)
   1276a:	7818      	ldrb	r0, [r3, #0]
   1276c:	4770      	bx	lr
   1276e:	bf00      	nop
   12770:	2002511c 	.word	0x2002511c

00012774 <transport_reset>:
   12774:	2000      	movs	r0, #0
   12776:	4770      	bx	lr

00012778 <transport_data_free>:
   12778:	4b0b      	ldr	r3, [pc, #44]	; (127a8 <transport_data_free+0x30>)
   1277a:	e9d3 2300 	ldrd	r2, r3, [r3]
   1277e:	4413      	add	r3, r2
   12780:	4298      	cmp	r0, r3
   12782:	d20d      	bcs.n	127a0 <transport_data_free+0x28>
   12784:	4282      	cmp	r2, r0
   12786:	d80b      	bhi.n	127a0 <transport_data_free+0x28>
   12788:	b510      	push	{r4, lr}
   1278a:	4604      	mov	r4, r0
   1278c:	f000 fd5a 	bl	13244 <rpc_transport_ipc_tx_rpc_ctrl_alloc>
   12790:	b140      	cbz	r0, 127a4 <transport_data_free+0x2c>
   12792:	4a06      	ldr	r2, [pc, #24]	; (127ac <transport_data_free+0x34>)
   12794:	6084      	str	r4, [r0, #8]
   12796:	6002      	str	r2, [r0, #0]
   12798:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1279c:	f000 bc9a 	b.w	130d4 <rpc_transport_ipc_tx_send>
   127a0:	f7fe bbc4 	b.w	10f2c <nrf_shared_free>
   127a4:	bd10      	pop	{r4, pc}
   127a6:	bf00      	nop
   127a8:	20020638 	.word	0x20020638
   127ac:	00020001 	.word	0x00020001

000127b0 <rpc_transport_ipc_init>:
   127b0:	2800      	cmp	r0, #0
   127b2:	d02b      	beq.n	1280c <rpc_transport_ipc_init+0x5c>
   127b4:	b530      	push	{r4, r5, lr}
   127b6:	b089      	sub	sp, #36	; 0x24
   127b8:	aa01      	add	r2, sp, #4
   127ba:	4669      	mov	r1, sp
   127bc:	4604      	mov	r4, r0
   127be:	f000 fb9f 	bl	12f00 <rpc_transport_ipc_tx_init>
   127c2:	4603      	mov	r3, r0
   127c4:	b140      	cbz	r0, 127d8 <rpc_transport_ipc_init+0x28>
   127c6:	4a13      	ldr	r2, [pc, #76]	; (12814 <rpc_transport_ipc_init+0x64>)
   127c8:	f104 0028 	add.w	r0, r4, #40	; 0x28
   127cc:	c803      	ldmia	r0, {r0, r1}
   127ce:	e882 0003 	stmia.w	r2, {r0, r1}
   127d2:	4618      	mov	r0, r3
   127d4:	b009      	add	sp, #36	; 0x24
   127d6:	bd30      	pop	{r4, r5, pc}
   127d8:	e9dd 1200 	ldrd	r1, r2, [sp]
   127dc:	4620      	mov	r0, r4
   127de:	f000 f84b 	bl	12878 <rpc_transport_ipc_rx_init>
   127e2:	4603      	mov	r3, r0
   127e4:	2800      	cmp	r0, #0
   127e6:	d1ee      	bne.n	127c6 <rpc_transport_ipc_init+0x16>
   127e8:	4b0b      	ldr	r3, [pc, #44]	; (12818 <rpc_transport_ipc_init+0x68>)
   127ea:	490c      	ldr	r1, [pc, #48]	; (1281c <rpc_transport_ipc_init+0x6c>)
   127ec:	480c      	ldr	r0, [pc, #48]	; (12820 <rpc_transport_ipc_init+0x70>)
   127ee:	4a0d      	ldr	r2, [pc, #52]	; (12824 <rpc_transport_ipc_init+0x74>)
   127f0:	9303      	str	r3, [sp, #12]
   127f2:	4d0d      	ldr	r5, [pc, #52]	; (12828 <rpc_transport_ipc_init+0x78>)
   127f4:	4b0d      	ldr	r3, [pc, #52]	; (1282c <rpc_transport_ipc_init+0x7c>)
   127f6:	9104      	str	r1, [sp, #16]
   127f8:	9005      	str	r0, [sp, #20]
   127fa:	490d      	ldr	r1, [pc, #52]	; (12830 <rpc_transport_ipc_init+0x80>)
   127fc:	a802      	add	r0, sp, #8
   127fe:	9307      	str	r3, [sp, #28]
   12800:	9506      	str	r5, [sp, #24]
   12802:	9202      	str	r2, [sp, #8]
   12804:	f003 ff44 	bl	16690 <rpc_transport_register>
   12808:	4603      	mov	r3, r0
   1280a:	e7dc      	b.n	127c6 <rpc_transport_ipc_init+0x16>
   1280c:	230e      	movs	r3, #14
   1280e:	4618      	mov	r0, r3
   12810:	4770      	bx	lr
   12812:	bf00      	nop
   12814:	20020638 	.word	0x20020638
   12818:	000131d5 	.word	0x000131d5
   1281c:	000132a5 	.word	0x000132a5
   12820:	00012e95 	.word	0x00012e95
   12824:	000130d5 	.word	0x000130d5
   12828:	00012779 	.word	0x00012779
   1282c:	00012775 	.word	0x00012775
   12830:	20020640 	.word	0x20020640

00012834 <rpc_transport_rx_handle>:
   12834:	b160      	cbz	r0, 12850 <rpc_transport_rx_handle+0x1c>
   12836:	b508      	push	{r3, lr}
   12838:	6843      	ldr	r3, [r0, #4]
   1283a:	b2db      	uxtb	r3, r3
   1283c:	2b02      	cmp	r3, #2
   1283e:	d00e      	beq.n	1285e <rpc_transport_rx_handle+0x2a>
   12840:	6803      	ldr	r3, [r0, #0]
   12842:	0c1b      	lsrs	r3, r3, #16
   12844:	2b02      	cmp	r3, #2
   12846:	d005      	beq.n	12854 <rpc_transport_rx_handle+0x20>
   12848:	2b04      	cmp	r3, #4
   1284a:	d00e      	beq.n	1286a <rpc_transport_rx_handle+0x36>
   1284c:	2000      	movs	r0, #0
   1284e:	bd08      	pop	{r3, pc}
   12850:	2000      	movs	r0, #0
   12852:	4770      	bx	lr
   12854:	6880      	ldr	r0, [r0, #8]
   12856:	f7fe fb69 	bl	10f2c <nrf_shared_free>
   1285a:	2000      	movs	r0, #0
   1285c:	bd08      	pop	{r3, pc}
   1285e:	4601      	mov	r1, r0
   12860:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   12864:	4803      	ldr	r0, [pc, #12]	; (12874 <rpc_transport_rx_handle+0x40>)
   12866:	f003 be05 	b.w	16474 <rpc_transport_input>
   1286a:	4802      	ldr	r0, [pc, #8]	; (12874 <rpc_transport_rx_handle+0x40>)
   1286c:	f003 ff70 	bl	16750 <rpc_transport_unregister>
   12870:	2000      	movs	r0, #0
   12872:	bd08      	pop	{r3, pc}
   12874:	20020640 	.word	0x20020640

00012878 <rpc_transport_ipc_rx_init>:
   12878:	2800      	cmp	r0, #0
   1287a:	f000 80ff 	beq.w	12a7c <rpc_transport_ipc_rx_init+0x204>
   1287e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12882:	6805      	ldr	r5, [r0, #0]
   12884:	b095      	sub	sp, #84	; 0x54
   12886:	2d00      	cmp	r5, #0
   12888:	f000 80ee 	beq.w	12a68 <rpc_transport_ipc_rx_init+0x1f0>
   1288c:	6883      	ldr	r3, [r0, #8]
   1288e:	2b00      	cmp	r3, #0
   12890:	f000 80ea 	beq.w	12a68 <rpc_transport_ipc_rx_init+0x1f0>
   12894:	6907      	ldr	r7, [r0, #16]
   12896:	2f00      	cmp	r7, #0
   12898:	f000 80e6 	beq.w	12a68 <rpc_transport_ipc_rx_init+0x1f0>
   1289c:	6a84      	ldr	r4, [r0, #40]	; 0x28
   1289e:	2c00      	cmp	r4, #0
   128a0:	f000 80e2 	beq.w	12a68 <rpc_transport_ipc_rx_init+0x1f0>
   128a4:	6844      	ldr	r4, [r0, #4]
   128a6:	2c1b      	cmp	r4, #27
   128a8:	f240 80e3 	bls.w	12a72 <rpc_transport_ipc_rx_init+0x1fa>
   128ac:	68c4      	ldr	r4, [r0, #12]
   128ae:	2c0b      	cmp	r4, #11
   128b0:	f240 80df 	bls.w	12a72 <rpc_transport_ipc_rx_init+0x1fa>
   128b4:	f8d0 e014 	ldr.w	lr, [r0, #20]
   128b8:	f1be 0f17 	cmp.w	lr, #23
   128bc:	f240 80d9 	bls.w	12a72 <rpc_transport_ipc_rx_init+0x1fa>
   128c0:	2600      	movs	r6, #0
   128c2:	4604      	mov	r4, r0
   128c4:	486f      	ldr	r0, [pc, #444]	; (12a84 <rpc_transport_ipc_rx_init+0x20c>)
   128c6:	e9cd 1200 	strd	r1, r2, [sp]
   128ca:	f8df a1d8 	ldr.w	sl, [pc, #472]	; 12aa4 <rpc_transport_ipc_rx_init+0x22c>
   128ce:	496e      	ldr	r1, [pc, #440]	; (12a88 <rpc_transport_ipc_rx_init+0x210>)
   128d0:	8006      	strh	r6, [r0, #0]
   128d2:	6ba0      	ldr	r0, [r4, #56]	; 0x38
   128d4:	f8df c1d0 	ldr.w	ip, [pc, #464]	; 12aa8 <rpc_transport_ipc_rx_init+0x230>
   128d8:	f8df 81d0 	ldr.w	r8, [pc, #464]	; 12aac <rpc_transport_ipc_rx_init+0x234>
   128dc:	f8df b1d0 	ldr.w	fp, [pc, #464]	; 12ab0 <rpc_transport_ipc_rx_init+0x238>
   128e0:	f8df 91d0 	ldr.w	r9, [pc, #464]	; 12ab4 <rpc_transport_ipc_rx_init+0x23c>
   128e4:	4672      	mov	r2, lr
   128e6:	600e      	str	r6, [r1, #0]
   128e8:	f8ca 0000 	str.w	r0, [sl]
   128ec:	4631      	mov	r1, r6
   128ee:	4638      	mov	r0, r7
   128f0:	f8cc 6000 	str.w	r6, [ip]
   128f4:	f8cb 3000 	str.w	r3, [fp]
   128f8:	f8c8 6000 	str.w	r6, [r8]
   128fc:	f8c9 6000 	str.w	r6, [r9]
   12900:	f007 ffbb 	bl	1a87a <memset>
   12904:	69e3      	ldr	r3, [r4, #28]
   12906:	4638      	mov	r0, r7
   12908:	603b      	str	r3, [r7, #0]
   1290a:	69a3      	ldr	r3, [r4, #24]
   1290c:	607b      	str	r3, [r7, #4]
   1290e:	f7ff fcd5 	bl	122bc <ipc_trace_init>
   12912:	2201      	movs	r2, #1
   12914:	f04f 0c04 	mov.w	ip, #4
   12918:	4b5c      	ldr	r3, [pc, #368]	; (12a8c <rpc_transport_ipc_rx_init+0x214>)
   1291a:	495d      	ldr	r1, [pc, #372]	; (12a90 <rpc_transport_ipc_rx_init+0x218>)
   1291c:	f8c3 5610 	str.w	r5, [r3, #1552]	; 0x610
   12920:	6809      	ldr	r1, [r1, #0]
   12922:	2080      	movs	r0, #128	; 0x80
   12924:	9104      	str	r1, [sp, #16]
   12926:	495b      	ldr	r1, [pc, #364]	; (12a94 <rpc_transport_ipc_rx_init+0x21c>)
   12928:	f8dd e010 	ldr.w	lr, [sp, #16]
   1292c:	f8c3 6614 	str.w	r6, [r3, #1556]	; 0x614
   12930:	6809      	ldr	r1, [r1, #0]
   12932:	702e      	strb	r6, [r5, #0]
   12934:	9103      	str	r1, [sp, #12]
   12936:	706e      	strb	r6, [r5, #1]
   12938:	70ee      	strb	r6, [r5, #3]
   1293a:	70aa      	strb	r2, [r5, #2]
   1293c:	9903      	ldr	r1, [sp, #12]
   1293e:	6aa1      	ldr	r1, [r4, #40]	; 0x28
   12940:	f8db e000 	ldr.w	lr, [fp]
   12944:	6069      	str	r1, [r5, #4]
   12946:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
   12948:	9c01      	ldr	r4, [sp, #4]
   1294a:	60a9      	str	r1, [r5, #8]
   1294c:	60ec      	str	r4, [r5, #12]
   1294e:	9c00      	ldr	r4, [sp, #0]
   12950:	4951      	ldr	r1, [pc, #324]	; (12a98 <rpc_transport_ipc_rx_init+0x220>)
   12952:	61af      	str	r7, [r5, #24]
   12954:	f8c5 e014 	str.w	lr, [r5, #20]
   12958:	612c      	str	r4, [r5, #16]
   1295a:	f8c3 2590 	str.w	r2, [r3, #1424]	; 0x590
   1295e:	680c      	ldr	r4, [r1, #0]
   12960:	f5a1 6192 	sub.w	r1, r1, #1168	; 0x490
   12964:	9405      	str	r4, [sp, #20]
   12966:	9c05      	ldr	r4, [sp, #20]
   12968:	f8c3 c598 	str.w	ip, [r3, #1432]	; 0x598
   1296c:	f8d1 4498 	ldr.w	r4, [r1, #1176]	; 0x498
   12970:	f44f 6780 	mov.w	r7, #1024	; 0x400
   12974:	9406      	str	r4, [sp, #24]
   12976:	9c06      	ldr	r4, [sp, #24]
   12978:	2410      	movs	r4, #16
   1297a:	f8c3 45a0 	str.w	r4, [r3, #1440]	; 0x5a0
   1297e:	f8d1 44a0 	ldr.w	r4, [r1, #1184]	; 0x4a0
   12982:	4d46      	ldr	r5, [pc, #280]	; (12a9c <rpc_transport_ipc_rx_init+0x224>)
   12984:	9407      	str	r4, [sp, #28]
   12986:	9c07      	ldr	r4, [sp, #28]
   12988:	2440      	movs	r4, #64	; 0x40
   1298a:	f8c3 45a8 	str.w	r4, [r3, #1448]	; 0x5a8
   1298e:	f8d1 44a8 	ldr.w	r4, [r1, #1192]	; 0x4a8
   12992:	9408      	str	r4, [sp, #32]
   12994:	9c08      	ldr	r4, [sp, #32]
   12996:	f8c3 05ac 	str.w	r0, [r3, #1452]	; 0x5ac
   1299a:	f8d1 04ac 	ldr.w	r0, [r1, #1196]	; 0x4ac
   1299e:	9009      	str	r0, [sp, #36]	; 0x24
   129a0:	9809      	ldr	r0, [sp, #36]	; 0x24
   129a2:	f8c3 6100 	str.w	r6, [r3, #256]	; 0x100
   129a6:	6808      	ldr	r0, [r1, #0]
   129a8:	900a      	str	r0, [sp, #40]	; 0x28
   129aa:	980a      	ldr	r0, [sp, #40]	; 0x28
   129ac:	f8c3 6108 	str.w	r6, [r3, #264]	; 0x108
   129b0:	6888      	ldr	r0, [r1, #8]
   129b2:	900b      	str	r0, [sp, #44]	; 0x2c
   129b4:	980b      	ldr	r0, [sp, #44]	; 0x2c
   129b6:	f8c3 6110 	str.w	r6, [r3, #272]	; 0x110
   129ba:	6908      	ldr	r0, [r1, #16]
   129bc:	900c      	str	r0, [sp, #48]	; 0x30
   129be:	980c      	ldr	r0, [sp, #48]	; 0x30
   129c0:	f8c3 6118 	str.w	r6, [r3, #280]	; 0x118
   129c4:	6988      	ldr	r0, [r1, #24]
   129c6:	900d      	str	r0, [sp, #52]	; 0x34
   129c8:	980d      	ldr	r0, [sp, #52]	; 0x34
   129ca:	f8c3 611c 	str.w	r6, [r3, #284]	; 0x11c
   129ce:	69c8      	ldr	r0, [r1, #28]
   129d0:	f501 7101 	add.w	r1, r1, #516	; 0x204
   129d4:	900e      	str	r0, [sp, #56]	; 0x38
   129d6:	980e      	ldr	r0, [sp, #56]	; 0x38
   129d8:	f8d3 0304 	ldr.w	r0, [r3, #772]	; 0x304
   129dc:	4310      	orrs	r0, r2
   129de:	f8c3 0304 	str.w	r0, [r3, #772]	; 0x304
   129e2:	680c      	ldr	r4, [r1, #0]
   129e4:	482e      	ldr	r0, [pc, #184]	; (12aa0 <rpc_transport_ipc_rx_init+0x228>)
   129e6:	940f      	str	r4, [sp, #60]	; 0x3c
   129e8:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
   129ea:	f8d3 4304 	ldr.w	r4, [r3, #772]	; 0x304
   129ee:	ea44 040c 	orr.w	r4, r4, ip
   129f2:	f8c3 4304 	str.w	r4, [r3, #772]	; 0x304
   129f6:	680c      	ldr	r4, [r1, #0]
   129f8:	9410      	str	r4, [sp, #64]	; 0x40
   129fa:	9c10      	ldr	r4, [sp, #64]	; 0x40
   129fc:	f8d3 4304 	ldr.w	r4, [r3, #772]	; 0x304
   12a00:	f044 0410 	orr.w	r4, r4, #16
   12a04:	f8c3 4304 	str.w	r4, [r3, #772]	; 0x304
   12a08:	680c      	ldr	r4, [r1, #0]
   12a0a:	9411      	str	r4, [sp, #68]	; 0x44
   12a0c:	9c11      	ldr	r4, [sp, #68]	; 0x44
   12a0e:	f8d3 4304 	ldr.w	r4, [r3, #772]	; 0x304
   12a12:	f044 0440 	orr.w	r4, r4, #64	; 0x40
   12a16:	f8c3 4304 	str.w	r4, [r3, #772]	; 0x304
   12a1a:	680c      	ldr	r4, [r1, #0]
   12a1c:	9412      	str	r4, [sp, #72]	; 0x48
   12a1e:	9c12      	ldr	r4, [sp, #72]	; 0x48
   12a20:	f8d3 4304 	ldr.w	r4, [r3, #772]	; 0x304
   12a24:	f044 0480 	orr.w	r4, r4, #128	; 0x80
   12a28:	f8c3 4304 	str.w	r4, [r3, #772]	; 0x304
   12a2c:	f8da 3000 	ldr.w	r3, [sl]
   12a30:	6809      	ldr	r1, [r1, #0]
   12a32:	015b      	lsls	r3, r3, #5
   12a34:	9113      	str	r1, [sp, #76]	; 0x4c
   12a36:	b2db      	uxtb	r3, r3
   12a38:	9913      	ldr	r1, [sp, #76]	; 0x4c
   12a3a:	f8c8 2000 	str.w	r2, [r8]
   12a3e:	f880 332a 	strb.w	r3, [r0, #810]	; 0x32a
   12a42:	f8c0 7184 	str.w	r7, [r0, #388]	; 0x184
   12a46:	6047      	str	r7, [r0, #4]
   12a48:	9602      	str	r6, [sp, #8]
   12a4a:	f8c5 6610 	str.w	r6, [r5, #1552]	; 0x610
   12a4e:	f8d5 3610 	ldr.w	r3, [r5, #1552]	; 0x610
   12a52:	9302      	str	r3, [sp, #8]
   12a54:	9b02      	ldr	r3, [sp, #8]
   12a56:	f8d8 3000 	ldr.w	r3, [r8]
   12a5a:	2b01      	cmp	r3, #1
   12a5c:	d0fb      	beq.n	12a56 <rpc_transport_ipc_rx_init+0x1de>
   12a5e:	f8d9 0000 	ldr.w	r0, [r9]
   12a62:	b015      	add	sp, #84	; 0x54
   12a64:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12a68:	f24c 000e 	movw	r0, #49166	; 0xc00e
   12a6c:	b015      	add	sp, #84	; 0x54
   12a6e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12a72:	f24c 0009 	movw	r0, #49161	; 0xc009
   12a76:	b015      	add	sp, #84	; 0x54
   12a78:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12a7c:	f24c 000e 	movw	r0, #49166	; 0xc00e
   12a80:	4770      	bx	lr
   12a82:	bf00      	nop
   12a84:	20024cca 	.word	0x20024cca
   12a88:	20020650 	.word	0x20020650
   12a8c:	4002a000 	.word	0x4002a000
   12a90:	4002a610 	.word	0x4002a610
   12a94:	4002a614 	.word	0x4002a614
   12a98:	4002a590 	.word	0x4002a590
   12a9c:	40005000 	.word	0x40005000
   12aa0:	e000e100 	.word	0xe000e100
   12aa4:	20020648 	.word	0x20020648
   12aa8:	20020654 	.word	0x20020654
   12aac:	2002064c 	.word	0x2002064c
   12ab0:	20020658 	.word	0x20020658
   12ab4:	20020644 	.word	0x20020644

00012ab8 <IPC_IRQHandler>:
   12ab8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12abc:	f44f 6580 	mov.w	r5, #1024	; 0x400
   12ac0:	4ca7      	ldr	r4, [pc, #668]	; (12d60 <IPC_IRQHandler+0x2a8>)
   12ac2:	b087      	sub	sp, #28
   12ac4:	f8c4 5084 	str.w	r5, [r4, #132]	; 0x84
   12ac8:	f3bf 8f4f 	dsb	sy
   12acc:	f3bf 8f6f 	isb	sy
   12ad0:	4ea4      	ldr	r6, [pc, #656]	; (12d64 <IPC_IRQHandler+0x2ac>)
   12ad2:	f8c4 5184 	str.w	r5, [r4, #388]	; 0x184
   12ad6:	f8d6 330c 	ldr.w	r3, [r6, #780]	; 0x30c
   12ada:	061f      	lsls	r7, r3, #24
   12adc:	f100 80c8 	bmi.w	12c70 <IPC_IRQHandler+0x1b8>
   12ae0:	4ba0      	ldr	r3, [pc, #640]	; (12d64 <IPC_IRQHandler+0x2ac>)
   12ae2:	f8d3 230c 	ldr.w	r2, [r3, #780]	; 0x30c
   12ae6:	07d0      	lsls	r0, r2, #31
   12ae8:	f100 80d4 	bmi.w	12c94 <IPC_IRQHandler+0x1dc>
   12aec:	f8d3 230c 	ldr.w	r2, [r3, #780]	; 0x30c
   12af0:	f012 0240 	ands.w	r2, r2, #64	; 0x40
   12af4:	f040 80b6 	bne.w	12c64 <IPC_IRQHandler+0x1ac>
   12af8:	f8d3 130c 	ldr.w	r1, [r3, #780]	; 0x30c
   12afc:	0749      	lsls	r1, r1, #29
   12afe:	f100 80e6 	bmi.w	12cce <IPC_IRQHandler+0x216>
   12b02:	f8d3 330c 	ldr.w	r3, [r3, #780]	; 0x30c
   12b06:	06da      	lsls	r2, r3, #27
   12b08:	f140 809d 	bpl.w	12c46 <IPC_IRQHandler+0x18e>
   12b0c:	2100      	movs	r1, #0
   12b0e:	4a95      	ldr	r2, [pc, #596]	; (12d64 <IPC_IRQHandler+0x2ac>)
   12b10:	4b95      	ldr	r3, [pc, #596]	; (12d68 <IPC_IRQHandler+0x2b0>)
   12b12:	f8c2 1110 	str.w	r1, [r2, #272]	; 0x110
   12b16:	681b      	ldr	r3, [r3, #0]
   12b18:	9304      	str	r3, [sp, #16]
   12b1a:	9b04      	ldr	r3, [sp, #16]
   12b1c:	f8df 8270 	ldr.w	r8, [pc, #624]	; 12d90 <IPC_IRQHandler+0x2d8>
   12b20:	4f92      	ldr	r7, [pc, #584]	; (12d6c <IPC_IRQHandler+0x2b4>)
   12b22:	f8df 9270 	ldr.w	r9, [pc, #624]	; 12d94 <IPC_IRQHandler+0x2dc>
   12b26:	f8d8 a000 	ldr.w	sl, [r8]
   12b2a:	f8da 1000 	ldr.w	r1, [sl]
   12b2e:	2900      	cmp	r1, #0
   12b30:	d03f      	beq.n	12bb2 <IPC_IRQHandler+0xfa>
   12b32:	2200      	movs	r2, #0
   12b34:	4614      	mov	r4, r2
   12b36:	e002      	b.n	12b3e <IPC_IRQHandler+0x86>
   12b38:	3401      	adds	r4, #1
   12b3a:	428c      	cmp	r4, r1
   12b3c:	d227      	bcs.n	12b8e <IPC_IRQHandler+0xd6>
   12b3e:	eb0a 05c4 	add.w	r5, sl, r4, lsl #3
   12b42:	68ab      	ldr	r3, [r5, #8]
   12b44:	2b00      	cmp	r3, #0
   12b46:	d0f7      	beq.n	12b38 <IPC_IRQHandler+0x80>
   12b48:	686e      	ldr	r6, [r5, #4]
   12b4a:	b2f6      	uxtb	r6, r6
   12b4c:	2e01      	cmp	r6, #1
   12b4e:	d1f3      	bne.n	12b38 <IPC_IRQHandler+0x80>
   12b50:	6868      	ldr	r0, [r5, #4]
   12b52:	f8b9 3000 	ldrh.w	r3, [r9]
   12b56:	ebb3 4f10 	cmp.w	r3, r0, lsr #16
   12b5a:	d1ed      	bne.n	12b38 <IPC_IRQHandler+0x80>
   12b5c:	686a      	ldr	r2, [r5, #4]
   12b5e:	3301      	adds	r3, #1
   12b60:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
   12b64:	f042 0202 	orr.w	r2, r2, #2
   12b68:	606a      	str	r2, [r5, #4]
   12b6a:	68a8      	ldr	r0, [r5, #8]
   12b6c:	f8a9 3000 	strh.w	r3, [r9]
   12b70:	f7ff fe60 	bl	12834 <rpc_transport_rx_handle>
   12b74:	4632      	mov	r2, r6
   12b76:	b928      	cbnz	r0, 12b84 <IPC_IRQHandler+0xcc>
   12b78:	686b      	ldr	r3, [r5, #4]
   12b7a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
   12b7e:	f043 0303 	orr.w	r3, r3, #3
   12b82:	606b      	str	r3, [r5, #4]
   12b84:	f8da 1000 	ldr.w	r1, [sl]
   12b88:	3401      	adds	r4, #1
   12b8a:	428c      	cmp	r4, r1
   12b8c:	d3d7      	bcc.n	12b3e <IPC_IRQHandler+0x86>
   12b8e:	2a00      	cmp	r2, #0
   12b90:	d1cd      	bne.n	12b2e <IPC_IRQHandler+0x76>
   12b92:	b171      	cbz	r1, 12bb2 <IPC_IRQHandler+0xfa>
   12b94:	4613      	mov	r3, r2
   12b96:	eb0a 02c3 	add.w	r2, sl, r3, lsl #3
   12b9a:	6890      	ldr	r0, [r2, #8]
   12b9c:	3301      	adds	r3, #1
   12b9e:	b130      	cbz	r0, 12bae <IPC_IRQHandler+0xf6>
   12ba0:	f8d2 b004 	ldr.w	fp, [r2, #4]
   12ba4:	fa5f fb8b 	uxtb.w	fp, fp
   12ba8:	f1bb 0f01 	cmp.w	fp, #1
   12bac:	d003      	beq.n	12bb6 <IPC_IRQHandler+0xfe>
   12bae:	428b      	cmp	r3, r1
   12bb0:	d1f1      	bne.n	12b96 <IPC_IRQHandler+0xde>
   12bb2:	f04f 0b00 	mov.w	fp, #0
   12bb6:	f8d7 a000 	ldr.w	sl, [r7]
   12bba:	f8da 2000 	ldr.w	r2, [sl]
   12bbe:	2a00      	cmp	r2, #0
   12bc0:	d03d      	beq.n	12c3e <IPC_IRQHandler+0x186>
   12bc2:	2100      	movs	r1, #0
   12bc4:	460c      	mov	r4, r1
   12bc6:	e002      	b.n	12bce <IPC_IRQHandler+0x116>
   12bc8:	3401      	adds	r4, #1
   12bca:	4294      	cmp	r4, r2
   12bcc:	d227      	bcs.n	12c1e <IPC_IRQHandler+0x166>
   12bce:	eb0a 05c4 	add.w	r5, sl, r4, lsl #3
   12bd2:	68ab      	ldr	r3, [r5, #8]
   12bd4:	2b00      	cmp	r3, #0
   12bd6:	d0f7      	beq.n	12bc8 <IPC_IRQHandler+0x110>
   12bd8:	686e      	ldr	r6, [r5, #4]
   12bda:	b2f6      	uxtb	r6, r6
   12bdc:	2e01      	cmp	r6, #1
   12bde:	d1f3      	bne.n	12bc8 <IPC_IRQHandler+0x110>
   12be0:	6868      	ldr	r0, [r5, #4]
   12be2:	f8b9 3000 	ldrh.w	r3, [r9]
   12be6:	ebb3 4f10 	cmp.w	r3, r0, lsr #16
   12bea:	d1ed      	bne.n	12bc8 <IPC_IRQHandler+0x110>
   12bec:	686a      	ldr	r2, [r5, #4]
   12bee:	3301      	adds	r3, #1
   12bf0:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
   12bf4:	f042 0202 	orr.w	r2, r2, #2
   12bf8:	606a      	str	r2, [r5, #4]
   12bfa:	68a8      	ldr	r0, [r5, #8]
   12bfc:	f8a9 3000 	strh.w	r3, [r9]
   12c00:	f7ff fe18 	bl	12834 <rpc_transport_rx_handle>
   12c04:	4631      	mov	r1, r6
   12c06:	b928      	cbnz	r0, 12c14 <IPC_IRQHandler+0x15c>
   12c08:	686a      	ldr	r2, [r5, #4]
   12c0a:	f022 03ff 	bic.w	r3, r2, #255	; 0xff
   12c0e:	f043 0303 	orr.w	r3, r3, #3
   12c12:	606b      	str	r3, [r5, #4]
   12c14:	f8da 2000 	ldr.w	r2, [sl]
   12c18:	3401      	adds	r4, #1
   12c1a:	4294      	cmp	r4, r2
   12c1c:	d3d7      	bcc.n	12bce <IPC_IRQHandler+0x116>
   12c1e:	2900      	cmp	r1, #0
   12c20:	d1cd      	bne.n	12bbe <IPC_IRQHandler+0x106>
   12c22:	b162      	cbz	r2, 12c3e <IPC_IRQHandler+0x186>
   12c24:	460b      	mov	r3, r1
   12c26:	eb0a 01c3 	add.w	r1, sl, r3, lsl #3
   12c2a:	6888      	ldr	r0, [r1, #8]
   12c2c:	3301      	adds	r3, #1
   12c2e:	b120      	cbz	r0, 12c3a <IPC_IRQHandler+0x182>
   12c30:	6849      	ldr	r1, [r1, #4]
   12c32:	b2c9      	uxtb	r1, r1
   12c34:	2901      	cmp	r1, #1
   12c36:	f43f af76 	beq.w	12b26 <IPC_IRQHandler+0x6e>
   12c3a:	4293      	cmp	r3, r2
   12c3c:	d1f3      	bne.n	12c26 <IPC_IRQHandler+0x16e>
   12c3e:	f1bb 0f00 	cmp.w	fp, #0
   12c42:	f47f af70 	bne.w	12b26 <IPC_IRQHandler+0x6e>
   12c46:	f44f 6180 	mov.w	r1, #1024	; 0x400
   12c4a:	4b49      	ldr	r3, [pc, #292]	; (12d70 <IPC_IRQHandler+0x2b8>)
   12c4c:	4a44      	ldr	r2, [pc, #272]	; (12d60 <IPC_IRQHandler+0x2a8>)
   12c4e:	681b      	ldr	r3, [r3, #0]
   12c50:	015b      	lsls	r3, r3, #5
   12c52:	b2db      	uxtb	r3, r3
   12c54:	f882 332a 	strb.w	r3, [r2, #810]	; 0x32a
   12c58:	f8c2 1184 	str.w	r1, [r2, #388]	; 0x184
   12c5c:	6051      	str	r1, [r2, #4]
   12c5e:	b007      	add	sp, #28
   12c60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12c64:	2206      	movs	r2, #6
   12c66:	4b43      	ldr	r3, [pc, #268]	; (12d74 <IPC_IRQHandler+0x2bc>)
   12c68:	601a      	str	r2, [r3, #0]
   12c6a:	b007      	add	sp, #28
   12c6c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12c70:	f7ff fc0c 	bl	1248c <ipc_trace_handle>
   12c74:	f7ff fd78 	bl	12768 <rpc_trace_coredump_in_progress>
   12c78:	2800      	cmp	r0, #0
   12c7a:	d149      	bne.n	12d10 <IPC_IRQHandler+0x258>
   12c7c:	4b3e      	ldr	r3, [pc, #248]	; (12d78 <IPC_IRQHandler+0x2c0>)
   12c7e:	f8c6 011c 	str.w	r0, [r6, #284]	; 0x11c
   12c82:	681b      	ldr	r3, [r3, #0]
   12c84:	9301      	str	r3, [sp, #4]
   12c86:	9b01      	ldr	r3, [sp, #4]
   12c88:	4b36      	ldr	r3, [pc, #216]	; (12d64 <IPC_IRQHandler+0x2ac>)
   12c8a:	f8d3 230c 	ldr.w	r2, [r3, #780]	; 0x30c
   12c8e:	07d0      	lsls	r0, r2, #31
   12c90:	f57f af2c 	bpl.w	12aec <IPC_IRQHandler+0x34>
   12c94:	2000      	movs	r0, #0
   12c96:	f248 0202 	movw	r2, #32770	; 0x8002
   12c9a:	4938      	ldr	r1, [pc, #224]	; (12d7c <IPC_IRQHandler+0x2c4>)
   12c9c:	f8c3 0100 	str.w	r0, [r3, #256]	; 0x100
   12ca0:	6809      	ldr	r1, [r1, #0]
   12ca2:	9102      	str	r1, [sp, #8]
   12ca4:	9902      	ldr	r1, [sp, #8]
   12ca6:	f8d3 3614 	ldr.w	r3, [r3, #1556]	; 0x614
   12caa:	4293      	cmp	r3, r2
   12cac:	d040      	beq.n	12d30 <IPC_IRQHandler+0x278>
   12cae:	d81e      	bhi.n	12cee <IPC_IRQHandler+0x236>
   12cb0:	2b00      	cmp	r3, #0
   12cb2:	d04f      	beq.n	12d54 <IPC_IRQHandler+0x29c>
   12cb4:	2b02      	cmp	r3, #2
   12cb6:	d942      	bls.n	12d3e <IPC_IRQHandler+0x286>
   12cb8:	f248 0201 	movw	r2, #32769	; 0x8001
   12cbc:	4293      	cmp	r3, r2
   12cbe:	d149      	bne.n	12d54 <IPC_IRQHandler+0x29c>
   12cc0:	2003      	movs	r0, #3
   12cc2:	2207      	movs	r2, #7
   12cc4:	492b      	ldr	r1, [pc, #172]	; (12d74 <IPC_IRQHandler+0x2bc>)
   12cc6:	4b2e      	ldr	r3, [pc, #184]	; (12d80 <IPC_IRQHandler+0x2c8>)
   12cc8:	6008      	str	r0, [r1, #0]
   12cca:	601a      	str	r2, [r3, #0]
   12ccc:	e7cd      	b.n	12c6a <IPC_IRQHandler+0x1b2>
   12cce:	4d29      	ldr	r5, [pc, #164]	; (12d74 <IPC_IRQHandler+0x2bc>)
   12cd0:	6829      	ldr	r1, [r5, #0]
   12cd2:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
   12cd6:	2901      	cmp	r1, #1
   12cd8:	492a      	ldr	r1, [pc, #168]	; (12d84 <IPC_IRQHandler+0x2cc>)
   12cda:	d05d      	beq.n	12d98 <IPC_IRQHandler+0x2e0>
   12cdc:	680a      	ldr	r2, [r1, #0]
   12cde:	9203      	str	r2, [sp, #12]
   12ce0:	9a03      	ldr	r2, [sp, #12]
   12ce2:	f8d3 330c 	ldr.w	r3, [r3, #780]	; 0x30c
   12ce6:	06db      	lsls	r3, r3, #27
   12ce8:	f53f af10 	bmi.w	12b0c <IPC_IRQHandler+0x54>
   12cec:	e716      	b.n	12b1c <IPC_IRQHandler+0x64>
   12cee:	4a26      	ldr	r2, [pc, #152]	; (12d88 <IPC_IRQHandler+0x2d0>)
   12cf0:	4293      	cmp	r3, r2
   12cf2:	d814      	bhi.n	12d1e <IPC_IRQHandler+0x266>
   12cf4:	f1b3 6f88 	cmp.w	r3, #71303168	; 0x4400000
   12cf8:	d814      	bhi.n	12d24 <IPC_IRQHandler+0x26c>
   12cfa:	f248 0203 	movw	r2, #32771	; 0x8003
   12cfe:	4293      	cmp	r3, r2
   12d00:	d128      	bne.n	12d54 <IPC_IRQHandler+0x29c>
   12d02:	2003      	movs	r0, #3
   12d04:	2204      	movs	r2, #4
   12d06:	491b      	ldr	r1, [pc, #108]	; (12d74 <IPC_IRQHandler+0x2bc>)
   12d08:	4b1d      	ldr	r3, [pc, #116]	; (12d80 <IPC_IRQHandler+0x2c8>)
   12d0a:	6008      	str	r0, [r1, #0]
   12d0c:	601a      	str	r2, [r3, #0]
   12d0e:	e7ac      	b.n	12c6a <IPC_IRQHandler+0x1b2>
   12d10:	23e0      	movs	r3, #224	; 0xe0
   12d12:	f884 332a 	strb.w	r3, [r4, #810]	; 0x32a
   12d16:	6065      	str	r5, [r4, #4]
   12d18:	b007      	add	sp, #28
   12d1a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12d1e:	4a1b      	ldr	r2, [pc, #108]	; (12d8c <IPC_IRQHandler+0x2d4>)
   12d20:	4293      	cmp	r3, r2
   12d22:	d117      	bne.n	12d54 <IPC_IRQHandler+0x29c>
   12d24:	2003      	movs	r0, #3
   12d26:	4913      	ldr	r1, [pc, #76]	; (12d74 <IPC_IRQHandler+0x2bc>)
   12d28:	4a15      	ldr	r2, [pc, #84]	; (12d80 <IPC_IRQHandler+0x2c8>)
   12d2a:	6008      	str	r0, [r1, #0]
   12d2c:	6013      	str	r3, [r2, #0]
   12d2e:	e79c      	b.n	12c6a <IPC_IRQHandler+0x1b2>
   12d30:	2003      	movs	r0, #3
   12d32:	2206      	movs	r2, #6
   12d34:	490f      	ldr	r1, [pc, #60]	; (12d74 <IPC_IRQHandler+0x2bc>)
   12d36:	4b12      	ldr	r3, [pc, #72]	; (12d80 <IPC_IRQHandler+0x2c8>)
   12d38:	6008      	str	r0, [r1, #0]
   12d3a:	601a      	str	r2, [r3, #0]
   12d3c:	e795      	b.n	12c6a <IPC_IRQHandler+0x1b2>
   12d3e:	2303      	movs	r3, #3
   12d40:	4618      	mov	r0, r3
   12d42:	490c      	ldr	r1, [pc, #48]	; (12d74 <IPC_IRQHandler+0x2bc>)
   12d44:	4a0e      	ldr	r2, [pc, #56]	; (12d80 <IPC_IRQHandler+0x2c8>)
   12d46:	600b      	str	r3, [r1, #0]
   12d48:	6013      	str	r3, [r2, #0]
   12d4a:	b007      	add	sp, #28
   12d4c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12d50:	f7ff b910 	b.w	11f74 <rpc_transport_ipc_fault_handler>
   12d54:	2303      	movs	r3, #3
   12d56:	4907      	ldr	r1, [pc, #28]	; (12d74 <IPC_IRQHandler+0x2bc>)
   12d58:	4a09      	ldr	r2, [pc, #36]	; (12d80 <IPC_IRQHandler+0x2c8>)
   12d5a:	600b      	str	r3, [r1, #0]
   12d5c:	6013      	str	r3, [r2, #0]
   12d5e:	e784      	b.n	12c6a <IPC_IRQHandler+0x1b2>
   12d60:	e000e100 	.word	0xe000e100
   12d64:	4002a000 	.word	0x4002a000
   12d68:	4002a110 	.word	0x4002a110
   12d6c:	20020650 	.word	0x20020650
   12d70:	20020648 	.word	0x20020648
   12d74:	2002064c 	.word	0x2002064c
   12d78:	4002a11c 	.word	0x4002a11c
   12d7c:	4002a100 	.word	0x4002a100
   12d80:	20020644 	.word	0x20020644
   12d84:	4002a108 	.word	0x4002a108
   12d88:	04400004 	.word	0x04400004
   12d8c:	05500001 	.word	0x05500001
   12d90:	20020654 	.word	0x20020654
   12d94:	20024cca 	.word	0x20024cca
   12d98:	4a37      	ldr	r2, [pc, #220]	; (12e78 <IPC_IRQHandler+0x3c0>)
   12d9a:	680b      	ldr	r3, [r1, #0]
   12d9c:	6812      	ldr	r2, [r2, #0]
   12d9e:	9305      	str	r3, [sp, #20]
   12da0:	6893      	ldr	r3, [r2, #8]
   12da2:	4836      	ldr	r0, [pc, #216]	; (12e7c <IPC_IRQHandler+0x3c4>)
   12da4:	4936      	ldr	r1, [pc, #216]	; (12e80 <IPC_IRQHandler+0x3c8>)
   12da6:	6003      	str	r3, [r0, #0]
   12da8:	6854      	ldr	r4, [r2, #4]
   12daa:	9a05      	ldr	r2, [sp, #20]
   12dac:	600c      	str	r4, [r1, #0]
   12dae:	b16b      	cbz	r3, 12dcc <IPC_IRQHandler+0x314>
   12db0:	b164      	cbz	r4, 12dcc <IPC_IRQHandler+0x314>
   12db2:	681b      	ldr	r3, [r3, #0]
   12db4:	2b10      	cmp	r3, #16
   12db6:	d802      	bhi.n	12dbe <IPC_IRQHandler+0x306>
   12db8:	6822      	ldr	r2, [r4, #0]
   12dba:	2a10      	cmp	r2, #16
   12dbc:	d90c      	bls.n	12dd8 <IPC_IRQHandler+0x320>
   12dbe:	2103      	movs	r1, #3
   12dc0:	f24c 0206 	movw	r2, #49158	; 0xc006
   12dc4:	4b2f      	ldr	r3, [pc, #188]	; (12e84 <IPC_IRQHandler+0x3cc>)
   12dc6:	6029      	str	r1, [r5, #0]
   12dc8:	601a      	str	r2, [r3, #0]
   12dca:	e74e      	b.n	12c6a <IPC_IRQHandler+0x1b2>
   12dcc:	2103      	movs	r1, #3
   12dce:	2210      	movs	r2, #16
   12dd0:	4b2c      	ldr	r3, [pc, #176]	; (12e84 <IPC_IRQHandler+0x3cc>)
   12dd2:	6029      	str	r1, [r5, #0]
   12dd4:	601a      	str	r2, [r3, #0]
   12dd6:	e748      	b.n	12c6a <IPC_IRQHandler+0x1b2>
   12dd8:	f8df 80b4 	ldr.w	r8, [pc, #180]	; 12e90 <IPC_IRQHandler+0x3d8>
   12ddc:	2a00      	cmp	r2, #0
   12dde:	d042      	beq.n	12e66 <IPC_IRQHandler+0x3ae>
   12de0:	2300      	movs	r3, #0
   12de2:	f104 0904 	add.w	r9, r4, #4
   12de6:	461e      	mov	r6, r3
   12de8:	e002      	b.n	12df0 <IPC_IRQHandler+0x338>
   12dea:	3601      	adds	r6, #1
   12dec:	4296      	cmp	r6, r2
   12dee:	d22a      	bcs.n	12e46 <IPC_IRQHandler+0x38e>
   12df0:	00f7      	lsls	r7, r6, #3
   12df2:	19e1      	adds	r1, r4, r7
   12df4:	6888      	ldr	r0, [r1, #8]
   12df6:	2800      	cmp	r0, #0
   12df8:	d0f7      	beq.n	12dea <IPC_IRQHandler+0x332>
   12dfa:	f8d1 a004 	ldr.w	sl, [r1, #4]
   12dfe:	fa5f fa8a 	uxtb.w	sl, sl
   12e02:	f1ba 0f01 	cmp.w	sl, #1
   12e06:	d1f0      	bne.n	12dea <IPC_IRQHandler+0x332>
   12e08:	f8d1 c004 	ldr.w	ip, [r1, #4]
   12e0c:	f8b8 0000 	ldrh.w	r0, [r8]
   12e10:	ebb0 4f1c 	cmp.w	r0, ip, lsr #16
   12e14:	d1e9      	bne.n	12dea <IPC_IRQHandler+0x332>
   12e16:	684b      	ldr	r3, [r1, #4]
   12e18:	1c42      	adds	r2, r0, #1
   12e1a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
   12e1e:	f043 0302 	orr.w	r3, r3, #2
   12e22:	604b      	str	r3, [r1, #4]
   12e24:	6888      	ldr	r0, [r1, #8]
   12e26:	f8a8 2000 	strh.w	r2, [r8]
   12e2a:	f7ff fd03 	bl	12834 <rpc_transport_rx_handle>
   12e2e:	4653      	mov	r3, sl
   12e30:	b938      	cbnz	r0, 12e42 <IPC_IRQHandler+0x38a>
   12e32:	f859 2007 	ldr.w	r2, [r9, r7]
   12e36:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
   12e3a:	f042 0203 	orr.w	r2, r2, #3
   12e3e:	f849 2007 	str.w	r2, [r9, r7]
   12e42:	6822      	ldr	r2, [r4, #0]
   12e44:	e7d1      	b.n	12dea <IPC_IRQHandler+0x332>
   12e46:	2b00      	cmp	r3, #0
   12e48:	d1c8      	bne.n	12ddc <IPC_IRQHandler+0x324>
   12e4a:	b912      	cbnz	r2, 12e52 <IPC_IRQHandler+0x39a>
   12e4c:	e00b      	b.n	12e66 <IPC_IRQHandler+0x3ae>
   12e4e:	4293      	cmp	r3, r2
   12e50:	d009      	beq.n	12e66 <IPC_IRQHandler+0x3ae>
   12e52:	eb04 01c3 	add.w	r1, r4, r3, lsl #3
   12e56:	6888      	ldr	r0, [r1, #8]
   12e58:	3301      	adds	r3, #1
   12e5a:	2800      	cmp	r0, #0
   12e5c:	d0f7      	beq.n	12e4e <IPC_IRQHandler+0x396>
   12e5e:	6849      	ldr	r1, [r1, #4]
   12e60:	b2c9      	uxtb	r1, r1
   12e62:	2901      	cmp	r1, #1
   12e64:	d1f3      	bne.n	12e4e <IPC_IRQHandler+0x396>
   12e66:	2002      	movs	r0, #2
   12e68:	4b07      	ldr	r3, [pc, #28]	; (12e88 <IPC_IRQHandler+0x3d0>)
   12e6a:	f44f 6180 	mov.w	r1, #1024	; 0x400
   12e6e:	4a07      	ldr	r2, [pc, #28]	; (12e8c <IPC_IRQHandler+0x3d4>)
   12e70:	681b      	ldr	r3, [r3, #0]
   12e72:	6028      	str	r0, [r5, #0]
   12e74:	e6ec      	b.n	12c50 <IPC_IRQHandler+0x198>
   12e76:	bf00      	nop
   12e78:	20020658 	.word	0x20020658
   12e7c:	20020654 	.word	0x20020654
   12e80:	20020650 	.word	0x20020650
   12e84:	20020644 	.word	0x20020644
   12e88:	20020648 	.word	0x20020648
   12e8c:	e000e100 	.word	0xe000e100
   12e90:	20024cca 	.word	0x20024cca

00012e94 <rpc_transport_msg_free>:
   12e94:	b430      	push	{r4, r5}
   12e96:	4b18      	ldr	r3, [pc, #96]	; (12ef8 <rpc_transport_msg_free+0x64>)
   12e98:	681c      	ldr	r4, [r3, #0]
   12e9a:	6825      	ldr	r5, [r4, #0]
   12e9c:	b16d      	cbz	r5, 12eba <rpc_transport_msg_free+0x26>
   12e9e:	68a3      	ldr	r3, [r4, #8]
   12ea0:	4283      	cmp	r3, r0
   12ea2:	d027      	beq.n	12ef4 <rpc_transport_msg_free+0x60>
   12ea4:	2300      	movs	r3, #0
   12ea6:	e002      	b.n	12eae <rpc_transport_msg_free+0x1a>
   12ea8:	6889      	ldr	r1, [r1, #8]
   12eaa:	4281      	cmp	r1, r0
   12eac:	d019      	beq.n	12ee2 <rpc_transport_msg_free+0x4e>
   12eae:	3301      	adds	r3, #1
   12eb0:	00da      	lsls	r2, r3, #3
   12eb2:	42ab      	cmp	r3, r5
   12eb4:	eb04 0102 	add.w	r1, r4, r2
   12eb8:	d1f6      	bne.n	12ea8 <rpc_transport_msg_free+0x14>
   12eba:	4b10      	ldr	r3, [pc, #64]	; (12efc <rpc_transport_msg_free+0x68>)
   12ebc:	681c      	ldr	r4, [r3, #0]
   12ebe:	6825      	ldr	r5, [r4, #0]
   12ec0:	b16d      	cbz	r5, 12ede <rpc_transport_msg_free+0x4a>
   12ec2:	68a3      	ldr	r3, [r4, #8]
   12ec4:	4283      	cmp	r3, r0
   12ec6:	d015      	beq.n	12ef4 <rpc_transport_msg_free+0x60>
   12ec8:	2300      	movs	r3, #0
   12eca:	e002      	b.n	12ed2 <rpc_transport_msg_free+0x3e>
   12ecc:	6889      	ldr	r1, [r1, #8]
   12ece:	4281      	cmp	r1, r0
   12ed0:	d007      	beq.n	12ee2 <rpc_transport_msg_free+0x4e>
   12ed2:	3301      	adds	r3, #1
   12ed4:	00da      	lsls	r2, r3, #3
   12ed6:	429d      	cmp	r5, r3
   12ed8:	eb04 0102 	add.w	r1, r4, r2
   12edc:	d1f6      	bne.n	12ecc <rpc_transport_msg_free+0x38>
   12ede:	bc30      	pop	{r4, r5}
   12ee0:	4770      	bx	lr
   12ee2:	3204      	adds	r2, #4
   12ee4:	58a3      	ldr	r3, [r4, r2]
   12ee6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
   12eea:	f043 0303 	orr.w	r3, r3, #3
   12eee:	50a3      	str	r3, [r4, r2]
   12ef0:	bc30      	pop	{r4, r5}
   12ef2:	4770      	bx	lr
   12ef4:	2204      	movs	r2, #4
   12ef6:	e7f5      	b.n	12ee4 <rpc_transport_msg_free+0x50>
   12ef8:	20020654 	.word	0x20020654
   12efc:	20020650 	.word	0x20020650

00012f00 <rpc_transport_ipc_tx_init>:
   12f00:	2800      	cmp	r0, #0
   12f02:	f000 80b8 	beq.w	13076 <rpc_transport_ipc_tx_init+0x176>
   12f06:	2900      	cmp	r1, #0
   12f08:	f000 80b5 	beq.w	13076 <rpc_transport_ipc_tx_init+0x176>
   12f0c:	2a00      	cmp	r2, #0
   12f0e:	f000 80b2 	beq.w	13076 <rpc_transport_ipc_tx_init+0x176>
   12f12:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12f16:	6a04      	ldr	r4, [r0, #32]
   12f18:	b085      	sub	sp, #20
   12f1a:	2c00      	cmp	r4, #0
   12f1c:	f000 80a6 	beq.w	1306c <rpc_transport_ipc_tx_init+0x16c>
   12f20:	6a40      	ldr	r0, [r0, #36]	; 0x24
   12f22:	2800      	cmp	r0, #0
   12f24:	f000 80a2 	beq.w	1306c <rpc_transport_ipc_tx_init+0x16c>
   12f28:	f642 4587 	movw	r5, #11399	; 0x2c87
   12f2c:	f04f 0a00 	mov.w	sl, #0
   12f30:	4e55      	ldr	r6, [pc, #340]	; (13088 <rpc_transport_ipc_tx_init+0x188>)
   12f32:	42a8      	cmp	r0, r5
   12f34:	f886 a000 	strb.w	sl, [r6]
   12f38:	f240 80a0 	bls.w	1307c <rpc_transport_ipc_tx_init+0x17c>
   12f3c:	2708      	movs	r7, #8
   12f3e:	f8df 9180 	ldr.w	r9, [pc, #384]	; 130c0 <rpc_transport_ipc_tx_init+0x1c0>
   12f42:	4620      	mov	r0, r4
   12f44:	4616      	mov	r6, r2
   12f46:	460d      	mov	r5, r1
   12f48:	2244      	movs	r2, #68	; 0x44
   12f4a:	4651      	mov	r1, sl
   12f4c:	f8c9 4000 	str.w	r4, [r9]
   12f50:	f007 fc93 	bl	1a87a <memset>
   12f54:	f8d9 2000 	ldr.w	r2, [r9]
   12f58:	f104 0344 	add.w	r3, r4, #68	; 0x44
   12f5c:	f8df 8164 	ldr.w	r8, [pc, #356]	; 130c4 <rpc_transport_ipc_tx_init+0x1c4>
   12f60:	f882 a001 	strb.w	sl, [r2, #1]
   12f64:	f882 a002 	strb.w	sl, [r2, #2]
   12f68:	f882 a003 	strb.w	sl, [r2, #3]
   12f6c:	7017      	strb	r7, [r2, #0]
   12f6e:	4618      	mov	r0, r3
   12f70:	2244      	movs	r2, #68	; 0x44
   12f72:	4651      	mov	r1, sl
   12f74:	f8c8 3000 	str.w	r3, [r8]
   12f78:	f007 fc7f 	bl	1a87a <memset>
   12f7c:	f8d8 2000 	ldr.w	r2, [r8]
   12f80:	f104 0388 	add.w	r3, r4, #136	; 0x88
   12f84:	f8df b140 	ldr.w	fp, [pc, #320]	; 130c8 <rpc_transport_ipc_tx_init+0x1c8>
   12f88:	7017      	strb	r7, [r2, #0]
   12f8a:	f882 a001 	strb.w	sl, [r2, #1]
   12f8e:	f882 a002 	strb.w	sl, [r2, #2]
   12f92:	f882 a003 	strb.w	sl, [r2, #3]
   12f96:	4618      	mov	r0, r3
   12f98:	f44f 7200 	mov.w	r2, #512	; 0x200
   12f9c:	4651      	mov	r1, sl
   12f9e:	f8cb 3000 	str.w	r3, [fp]
   12fa2:	f007 fc6a 	bl	1a87a <memset>
   12fa6:	4b39      	ldr	r3, [pc, #228]	; (1308c <rpc_transport_ipc_tx_init+0x18c>)
   12fa8:	f504 7c22 	add.w	ip, r4, #648	; 0x288
   12fac:	f8c3 c000 	str.w	ip, [r3]
   12fb0:	4651      	mov	r1, sl
   12fb2:	4660      	mov	r0, ip
   12fb4:	f44f 7200 	mov.w	r2, #512	; 0x200
   12fb8:	f007 fc5f 	bl	1a87a <memset>
   12fbc:	f44f 5c20 	mov.w	ip, #10240	; 0x2800
   12fc0:	2106      	movs	r1, #6
   12fc2:	f04f 0e01 	mov.w	lr, #1
   12fc6:	f44f 3001 	mov.w	r0, #132096	; 0x20400
   12fca:	f44f 3288 	mov.w	r2, #69632	; 0x11000
   12fce:	4b30      	ldr	r3, [pc, #192]	; (13090 <rpc_transport_ipc_tx_init+0x190>)
   12fd0:	f504 6491 	add.w	r4, r4, #1160	; 0x488
   12fd4:	605c      	str	r4, [r3, #4]
   12fd6:	4c2f      	ldr	r4, [pc, #188]	; (13094 <rpc_transport_ipc_tx_init+0x194>)
   12fd8:	f8c3 c008 	str.w	ip, [r3, #8]
   12fdc:	8199      	strh	r1, [r3, #12]
   12fde:	f8a3 e000 	strh.w	lr, [r3]
   12fe2:	4619      	mov	r1, r3
   12fe4:	611c      	str	r4, [r3, #16]
   12fe6:	4b2c      	ldr	r3, [pc, #176]	; (13098 <rpc_transport_ipc_tx_init+0x198>)
   12fe8:	f8df c0e0 	ldr.w	ip, [pc, #224]	; 130cc <rpc_transport_ipc_tx_init+0x1cc>
   12fec:	6120      	str	r0, [r4, #16]
   12fee:	482b      	ldr	r0, [pc, #172]	; (1309c <rpc_transport_ipc_tx_init+0x19c>)
   12ff0:	6063      	str	r3, [r4, #4]
   12ff2:	f503 73c0 	add.w	r3, r3, #384	; 0x180
   12ff6:	60a0      	str	r0, [r4, #8]
   12ff8:	f8c4 c000 	str.w	ip, [r4]
   12ffc:	4828      	ldr	r0, [pc, #160]	; (130a0 <rpc_transport_ipc_tx_init+0x1a0>)
   12ffe:	60e3      	str	r3, [r4, #12]
   13000:	6162      	str	r2, [r4, #20]
   13002:	f7fd fe59 	bl	10cb8 <nrf_mem_register>
   13006:	2800      	cmp	r0, #0
   13008:	d132      	bne.n	13070 <rpc_transport_ipc_tx_init+0x170>
   1300a:	f04f 0c02 	mov.w	ip, #2
   1300e:	2420      	movs	r4, #32
   13010:	f8d9 1000 	ldr.w	r1, [r9]
   13014:	f8db 2000 	ldr.w	r2, [fp]
   13018:	6029      	str	r1, [r5, #0]
   1301a:	4b1c      	ldr	r3, [pc, #112]	; (1308c <rpc_transport_ipc_tx_init+0x18c>)
   1301c:	f8d8 1000 	ldr.w	r1, [r8]
   13020:	f8df e0ac 	ldr.w	lr, [pc, #172]	; 130d0 <rpc_transport_ipc_tx_init+0x1d0>
   13024:	4d1f      	ldr	r5, [pc, #124]	; (130a4 <rpc_transport_ipc_tx_init+0x1a4>)
   13026:	6031      	str	r1, [r6, #0]
   13028:	f8ce 2000 	str.w	r2, [lr]
   1302c:	681b      	ldr	r3, [r3, #0]
   1302e:	491e      	ldr	r1, [pc, #120]	; (130a8 <rpc_transport_ipc_tx_init+0x1a8>)
   13030:	f502 7200 	add.w	r2, r2, #512	; 0x200
   13034:	602a      	str	r2, [r5, #0]
   13036:	4e1d      	ldr	r6, [pc, #116]	; (130ac <rpc_transport_ipc_tx_init+0x1ac>)
   13038:	4a1d      	ldr	r2, [pc, #116]	; (130b0 <rpc_transport_ipc_tx_init+0x1b0>)
   1303a:	4d1e      	ldr	r5, [pc, #120]	; (130b4 <rpc_transport_ipc_tx_init+0x1b4>)
   1303c:	600b      	str	r3, [r1, #0]
   1303e:	f503 7300 	add.w	r3, r3, #512	; 0x200
   13042:	491d      	ldr	r1, [pc, #116]	; (130b8 <rpc_transport_ipc_tx_init+0x1b8>)
   13044:	6033      	str	r3, [r6, #0]
   13046:	8028      	strh	r0, [r5, #0]
   13048:	f8c2 c514 	str.w	ip, [r2, #1300]	; 0x514
   1304c:	6809      	ldr	r1, [r1, #0]
   1304e:	4b1b      	ldr	r3, [pc, #108]	; (130bc <rpc_transport_ipc_tx_init+0x1bc>)
   13050:	9103      	str	r1, [sp, #12]
   13052:	9903      	ldr	r1, [sp, #12]
   13054:	f8c2 751c 	str.w	r7, [r2, #1308]	; 0x51c
   13058:	6819      	ldr	r1, [r3, #0]
   1305a:	443b      	add	r3, r7
   1305c:	9102      	str	r1, [sp, #8]
   1305e:	9902      	ldr	r1, [sp, #8]
   13060:	f8c2 4524 	str.w	r4, [r2, #1316]	; 0x524
   13064:	681b      	ldr	r3, [r3, #0]
   13066:	9301      	str	r3, [sp, #4]
   13068:	9b01      	ldr	r3, [sp, #4]
   1306a:	e001      	b.n	13070 <rpc_transport_ipc_tx_init+0x170>
   1306c:	f24c 0007 	movw	r0, #49159	; 0xc007
   13070:	b005      	add	sp, #20
   13072:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13076:	f24c 000e 	movw	r0, #49166	; 0xc00e
   1307a:	4770      	bx	lr
   1307c:	f24c 0004 	movw	r0, #49156	; 0xc004
   13080:	b005      	add	sp, #20
   13082:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13086:	bf00      	nop
   13088:	2002511d 	.word	0x2002511d
   1308c:	20020684 	.word	0x20020684
   13090:	20020670 	.word	0x20020670
   13094:	20020694 	.word	0x20020694
   13098:	00040080 	.word	0x00040080
   1309c:	00040100 	.word	0x00040100
   130a0:	2002065c 	.word	0x2002065c
   130a4:	20020668 	.word	0x20020668
   130a8:	20020664 	.word	0x20020664
   130ac:	20020660 	.word	0x20020660
   130b0:	4002a000 	.word	0x4002a000
   130b4:	20024ccc 	.word	0x20024ccc
   130b8:	4002a514 	.word	0x4002a514
   130bc:	4002a51c 	.word	0x4002a51c
   130c0:	20020690 	.word	0x20020690
   130c4:	20020688 	.word	0x20020688
   130c8:	2002068c 	.word	0x2002068c
   130cc:	00080040 	.word	0x00080040
   130d0:	2002066c 	.word	0x2002066c

000130d4 <rpc_transport_ipc_tx_send>:
   130d4:	2800      	cmp	r0, #0
   130d6:	d05f      	beq.n	13198 <rpc_transport_ipc_tx_send+0xc4>
   130d8:	b470      	push	{r4, r5, r6}
   130da:	4b33      	ldr	r3, [pc, #204]	; (131a8 <rpc_transport_ipc_tx_send+0xd4>)
   130dc:	b083      	sub	sp, #12
   130de:	681a      	ldr	r2, [r3, #0]
   130e0:	4b32      	ldr	r3, [pc, #200]	; (131ac <rpc_transport_ipc_tx_send+0xd8>)
   130e2:	4282      	cmp	r2, r0
   130e4:	d81e      	bhi.n	13124 <rpc_transport_ipc_tx_send+0x50>
   130e6:	681b      	ldr	r3, [r3, #0]
   130e8:	4931      	ldr	r1, [pc, #196]	; (131b0 <rpc_transport_ipc_tx_send+0xdc>)
   130ea:	4283      	cmp	r3, r0
   130ec:	6809      	ldr	r1, [r1, #0]
   130ee:	d803      	bhi.n	130f8 <rpc_transport_ipc_tx_send+0x24>
   130f0:	4c30      	ldr	r4, [pc, #192]	; (131b4 <rpc_transport_ipc_tx_send+0xe0>)
   130f2:	6824      	ldr	r4, [r4, #0]
   130f4:	4284      	cmp	r4, r0
   130f6:	d847      	bhi.n	13188 <rpc_transport_ipc_tx_send+0xb4>
   130f8:	4281      	cmp	r1, r0
   130fa:	d90e      	bls.n	1311a <rpc_transport_ipc_tx_send+0x46>
   130fc:	4b2e      	ldr	r3, [pc, #184]	; (131b8 <rpc_transport_ipc_tx_send+0xe4>)
   130fe:	781b      	ldrb	r3, [r3, #0]
   13100:	2b00      	cmp	r3, #0
   13102:	d14c      	bne.n	1319e <rpc_transport_ipc_tx_send+0xca>
   13104:	1a83      	subs	r3, r0, r2
   13106:	492d      	ldr	r1, [pc, #180]	; (131bc <rpc_transport_ipc_tx_send+0xe8>)
   13108:	099e      	lsrs	r6, r3, #6
   1310a:	069b      	lsls	r3, r3, #26
   1310c:	680a      	ldr	r2, [r1, #0]
   1310e:	4c2c      	ldr	r4, [pc, #176]	; (131c0 <rpc_transport_ipc_tx_send+0xec>)
   13110:	f04f 0103 	mov.w	r1, #3
   13114:	f04f 0502 	mov.w	r5, #2
   13118:	d014      	beq.n	13144 <rpc_transport_ipc_tx_send+0x70>
   1311a:	f24c 0010 	movw	r0, #49168	; 0xc010
   1311e:	b003      	add	sp, #12
   13120:	bc70      	pop	{r4, r5, r6}
   13122:	4770      	bx	lr
   13124:	681b      	ldr	r3, [r3, #0]
   13126:	4298      	cmp	r0, r3
   13128:	d3f7      	bcc.n	1311a <rpc_transport_ipc_tx_send+0x46>
   1312a:	4a22      	ldr	r2, [pc, #136]	; (131b4 <rpc_transport_ipc_tx_send+0xe0>)
   1312c:	6812      	ldr	r2, [r2, #0]
   1312e:	4290      	cmp	r0, r2
   13130:	d2f3      	bcs.n	1311a <rpc_transport_ipc_tx_send+0x46>
   13132:	2101      	movs	r1, #1
   13134:	1ac3      	subs	r3, r0, r3
   13136:	4a23      	ldr	r2, [pc, #140]	; (131c4 <rpc_transport_ipc_tx_send+0xf0>)
   13138:	099e      	lsrs	r6, r3, #6
   1313a:	069b      	lsls	r3, r3, #26
   1313c:	460d      	mov	r5, r1
   1313e:	6812      	ldr	r2, [r2, #0]
   13140:	4c21      	ldr	r4, [pc, #132]	; (131c8 <rpc_transport_ipc_tx_send+0xf4>)
   13142:	d1ea      	bne.n	1311a <rpc_transport_ipc_tx_send+0x46>
   13144:	6843      	ldr	r3, [r0, #4]
   13146:	b2db      	uxtb	r3, r3
   13148:	429d      	cmp	r5, r3
   1314a:	d120      	bne.n	1318e <rpc_transport_ipc_tx_send+0xba>
   1314c:	2020      	movs	r0, #32
   1314e:	eb02 02c6 	add.w	r2, r2, r6, lsl #3
   13152:	4d1e      	ldr	r5, [pc, #120]	; (131cc <rpc_transport_ipc_tx_send+0xf8>)
   13154:	6853      	ldr	r3, [r2, #4]
   13156:	882e      	ldrh	r6, [r5, #0]
   13158:	b29b      	uxth	r3, r3
   1315a:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
   1315e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
   13162:	f043 0301 	orr.w	r3, r3, #1
   13166:	6053      	str	r3, [r2, #4]
   13168:	bf00      	nop
   1316a:	3801      	subs	r0, #1
   1316c:	d1fc      	bne.n	13168 <rpc_transport_ipc_tx_send+0x94>
   1316e:	2201      	movs	r2, #1
   13170:	4b17      	ldr	r3, [pc, #92]	; (131d0 <rpc_transport_ipc_tx_send+0xfc>)
   13172:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
   13176:	6822      	ldr	r2, [r4, #0]
   13178:	882b      	ldrh	r3, [r5, #0]
   1317a:	9201      	str	r2, [sp, #4]
   1317c:	9a01      	ldr	r2, [sp, #4]
   1317e:	3301      	adds	r3, #1
   13180:	802b      	strh	r3, [r5, #0]
   13182:	b003      	add	sp, #12
   13184:	bc70      	pop	{r4, r5, r6}
   13186:	4770      	bx	lr
   13188:	4281      	cmp	r1, r0
   1318a:	d9d2      	bls.n	13132 <rpc_transport_ipc_tx_send+0x5e>
   1318c:	e7b6      	b.n	130fc <rpc_transport_ipc_tx_send+0x28>
   1318e:	f24c 0007 	movw	r0, #49159	; 0xc007
   13192:	b003      	add	sp, #12
   13194:	bc70      	pop	{r4, r5, r6}
   13196:	4770      	bx	lr
   13198:	f24c 000e 	movw	r0, #49166	; 0xc00e
   1319c:	4770      	bx	lr
   1319e:	f24c 000f 	movw	r0, #49167	; 0xc00f
   131a2:	b003      	add	sp, #12
   131a4:	bc70      	pop	{r4, r5, r6}
   131a6:	4770      	bx	lr
   131a8:	2002066c 	.word	0x2002066c
   131ac:	20020664 	.word	0x20020664
   131b0:	20020668 	.word	0x20020668
   131b4:	20020660 	.word	0x20020660
   131b8:	2002511d 	.word	0x2002511d
   131bc:	20020690 	.word	0x20020690
   131c0:	4002a00c 	.word	0x4002a00c
   131c4:	20020688 	.word	0x20020688
   131c8:	4002a004 	.word	0x4002a004
   131cc:	20024ccc 	.word	0x20024ccc
   131d0:	4002a000 	.word	0x4002a000

000131d4 <rpc_transport_ipc_tx_rpc_data_alloc>:
   131d4:	4b18      	ldr	r3, [pc, #96]	; (13238 <rpc_transport_ipc_tx_rpc_data_alloc+0x64>)
   131d6:	781b      	ldrb	r3, [r3, #0]
   131d8:	bb63      	cbnz	r3, 13234 <rpc_transport_ipc_tx_rpc_data_alloc+0x60>
   131da:	b4f0      	push	{r4, r5, r6, r7}
   131dc:	4a17      	ldr	r2, [pc, #92]	; (1323c <rpc_transport_ipc_tx_rpc_data_alloc+0x68>)
   131de:	f003 00ff 	and.w	r0, r3, #255	; 0xff
   131e2:	6814      	ldr	r4, [r2, #0]
   131e4:	4b16      	ldr	r3, [pc, #88]	; (13240 <rpc_transport_ipc_tx_rpc_data_alloc+0x6c>)
   131e6:	6825      	ldr	r5, [r4, #0]
   131e8:	681e      	ldr	r6, [r3, #0]
   131ea:	b1a5      	cbz	r5, 13216 <rpc_transport_ipc_tx_rpc_data_alloc+0x42>
   131ec:	4607      	mov	r7, r0
   131ee:	00c1      	lsls	r1, r0, #3
   131f0:	1863      	adds	r3, r4, r1
   131f2:	685a      	ldr	r2, [r3, #4]
   131f4:	b2d2      	uxtb	r2, r2
   131f6:	2a03      	cmp	r2, #3
   131f8:	d104      	bne.n	13204 <rpc_transport_ipc_tx_rpc_data_alloc+0x30>
   131fa:	609f      	str	r7, [r3, #8]
   131fc:	685a      	ldr	r2, [r3, #4]
   131fe:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
   13202:	605a      	str	r2, [r3, #4]
   13204:	685a      	ldr	r2, [r3, #4]
   13206:	f012 0fff 	tst.w	r2, #255	; 0xff
   1320a:	d101      	bne.n	13210 <rpc_transport_ipc_tx_rpc_data_alloc+0x3c>
   1320c:	689b      	ldr	r3, [r3, #8]
   1320e:	b12b      	cbz	r3, 1321c <rpc_transport_ipc_tx_rpc_data_alloc+0x48>
   13210:	3001      	adds	r0, #1
   13212:	42a8      	cmp	r0, r5
   13214:	d1eb      	bne.n	131ee <rpc_transport_ipc_tx_rpc_data_alloc+0x1a>
   13216:	2000      	movs	r0, #0
   13218:	bcf0      	pop	{r4, r5, r6, r7}
   1321a:	4770      	bx	lr
   1321c:	eb06 1080 	add.w	r0, r6, r0, lsl #6
   13220:	4421      	add	r1, r4
   13222:	6088      	str	r0, [r1, #8]
   13224:	6843      	ldr	r3, [r0, #4]
   13226:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
   1322a:	f043 0302 	orr.w	r3, r3, #2
   1322e:	6043      	str	r3, [r0, #4]
   13230:	bcf0      	pop	{r4, r5, r6, r7}
   13232:	4770      	bx	lr
   13234:	2000      	movs	r0, #0
   13236:	4770      	bx	lr
   13238:	2002511d 	.word	0x2002511d
   1323c:	20020690 	.word	0x20020690
   13240:	2002068c 	.word	0x2002068c

00013244 <rpc_transport_ipc_tx_rpc_ctrl_alloc>:
   13244:	b4f0      	push	{r4, r5, r6, r7}
   13246:	4a15      	ldr	r2, [pc, #84]	; (1329c <rpc_transport_ipc_tx_rpc_ctrl_alloc+0x58>)
   13248:	4b15      	ldr	r3, [pc, #84]	; (132a0 <rpc_transport_ipc_tx_rpc_ctrl_alloc+0x5c>)
   1324a:	6814      	ldr	r4, [r2, #0]
   1324c:	681e      	ldr	r6, [r3, #0]
   1324e:	6825      	ldr	r5, [r4, #0]
   13250:	b1ad      	cbz	r5, 1327e <rpc_transport_ipc_tx_rpc_ctrl_alloc+0x3a>
   13252:	2000      	movs	r0, #0
   13254:	4607      	mov	r7, r0
   13256:	00c1      	lsls	r1, r0, #3
   13258:	1863      	adds	r3, r4, r1
   1325a:	685a      	ldr	r2, [r3, #4]
   1325c:	b2d2      	uxtb	r2, r2
   1325e:	2a03      	cmp	r2, #3
   13260:	d104      	bne.n	1326c <rpc_transport_ipc_tx_rpc_ctrl_alloc+0x28>
   13262:	609f      	str	r7, [r3, #8]
   13264:	685a      	ldr	r2, [r3, #4]
   13266:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
   1326a:	605a      	str	r2, [r3, #4]
   1326c:	685a      	ldr	r2, [r3, #4]
   1326e:	f012 0fff 	tst.w	r2, #255	; 0xff
   13272:	d101      	bne.n	13278 <rpc_transport_ipc_tx_rpc_ctrl_alloc+0x34>
   13274:	689b      	ldr	r3, [r3, #8]
   13276:	b12b      	cbz	r3, 13284 <rpc_transport_ipc_tx_rpc_ctrl_alloc+0x40>
   13278:	3001      	adds	r0, #1
   1327a:	4285      	cmp	r5, r0
   1327c:	d1eb      	bne.n	13256 <rpc_transport_ipc_tx_rpc_ctrl_alloc+0x12>
   1327e:	2000      	movs	r0, #0
   13280:	bcf0      	pop	{r4, r5, r6, r7}
   13282:	4770      	bx	lr
   13284:	eb06 1080 	add.w	r0, r6, r0, lsl #6
   13288:	4421      	add	r1, r4
   1328a:	6088      	str	r0, [r1, #8]
   1328c:	6843      	ldr	r3, [r0, #4]
   1328e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
   13292:	f043 0301 	orr.w	r3, r3, #1
   13296:	6043      	str	r3, [r0, #4]
   13298:	bcf0      	pop	{r4, r5, r6, r7}
   1329a:	4770      	bx	lr
   1329c:	20020688 	.word	0x20020688
   132a0:	20020684 	.word	0x20020684

000132a4 <rpc_transport_ipc_tx_data_alloc>:
   132a4:	4b03      	ldr	r3, [pc, #12]	; (132b4 <rpc_transport_ipc_tx_data_alloc+0x10>)
   132a6:	781b      	ldrb	r3, [r3, #0]
   132a8:	b90b      	cbnz	r3, 132ae <rpc_transport_ipc_tx_data_alloc+0xa>
   132aa:	f7fd be35 	b.w	10f18 <nrf_shared_malloc>
   132ae:	2000      	movs	r0, #0
   132b0:	4770      	bx	lr
   132b2:	bf00      	nop
   132b4:	2002511d 	.word	0x2002511d

000132b8 <ok_rsp_parser>:
   132b8:	2000      	movs	r0, #0
   132ba:	4770      	bx	lr

000132bc <pdn_state_get_parser>:
   132bc:	2200      	movs	r2, #0
   132be:	b570      	push	{r4, r5, r6, lr}
   132c0:	780b      	ldrb	r3, [r1, #0]
   132c2:	b084      	sub	sp, #16
   132c4:	460e      	mov	r6, r1
   132c6:	e9cd 2200 	strd	r2, r2, [sp]
   132ca:	e9cd 2202 	strd	r2, r2, [sp, #8]
   132ce:	b323      	cbz	r3, 1331a <pdn_state_get_parser+0x5e>
   132d0:	460c      	mov	r4, r1
   132d2:	2b20      	cmp	r3, #32
   132d4:	460d      	mov	r5, r1
   132d6:	d01b      	beq.n	13310 <pdn_state_get_parser+0x54>
   132d8:	700b      	strb	r3, [r1, #0]
   132da:	3201      	adds	r2, #1
   132dc:	f814 3f01 	ldrb.w	r3, [r4, #1]!
   132e0:	18b1      	adds	r1, r6, r2
   132e2:	460d      	mov	r5, r1
   132e4:	2b00      	cmp	r3, #0
   132e6:	d1f4      	bne.n	132d2 <pdn_state_get_parser+0x16>
   132e8:	2200      	movs	r2, #0
   132ea:	4b0d      	ldr	r3, [pc, #52]	; (13320 <pdn_state_get_parser+0x64>)
   132ec:	702a      	strb	r2, [r5, #0]
   132ee:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
   132f2:	4a0c      	ldr	r2, [pc, #48]	; (13324 <pdn_state_get_parser+0x68>)
   132f4:	681b      	ldr	r3, [r3, #0]
   132f6:	2110      	movs	r1, #16
   132f8:	4668      	mov	r0, sp
   132fa:	f7fb fdb1 	bl	ee60 <snprintf>
   132fe:	4669      	mov	r1, sp
   13300:	4630      	mov	r0, r6
   13302:	f007 fa16 	bl	1a732 <strstr>
   13306:	3000      	adds	r0, #0
   13308:	bf18      	it	ne
   1330a:	2001      	movne	r0, #1
   1330c:	b004      	add	sp, #16
   1330e:	bd70      	pop	{r4, r5, r6, pc}
   13310:	f814 3f01 	ldrb.w	r3, [r4, #1]!
   13314:	2b00      	cmp	r3, #0
   13316:	d1dc      	bne.n	132d2 <pdn_state_get_parser+0x16>
   13318:	e7e6      	b.n	132e8 <pdn_state_get_parser+0x2c>
   1331a:	460d      	mov	r5, r1
   1331c:	e7e4      	b.n	132e8 <pdn_state_get_parser+0x2c>
   1331e:	bf00      	nop
   13320:	200207b0 	.word	0x200207b0
   13324:	0001c4b0 	.word	0x0001c4b0

00013328 <pdn_id_get_parser>:
   13328:	b570      	push	{r4, r5, r6, lr}
   1332a:	780b      	ldrb	r3, [r1, #0]
   1332c:	4606      	mov	r6, r0
   1332e:	b313      	cbz	r3, 13376 <pdn_id_get_parser+0x4e>
   13330:	4608      	mov	r0, r1
   13332:	2400      	movs	r4, #0
   13334:	460a      	mov	r2, r1
   13336:	2b20      	cmp	r3, #32
   13338:	4615      	mov	r5, r2
   1333a:	d017      	beq.n	1336c <pdn_id_get_parser+0x44>
   1333c:	7013      	strb	r3, [r2, #0]
   1333e:	3401      	adds	r4, #1
   13340:	f810 3f01 	ldrb.w	r3, [r0, #1]!
   13344:	190a      	adds	r2, r1, r4
   13346:	4615      	mov	r5, r2
   13348:	2b00      	cmp	r3, #0
   1334a:	d1f4      	bne.n	13336 <pdn_id_get_parser+0xe>
   1334c:	2300      	movs	r3, #0
   1334e:	4608      	mov	r0, r1
   13350:	702b      	strb	r3, [r5, #0]
   13352:	213a      	movs	r1, #58	; 0x3a
   13354:	f007 fa27 	bl	1a7a6 <strchr>
   13358:	b130      	cbz	r0, 13368 <pdn_id_get_parser+0x40>
   1335a:	3001      	adds	r0, #1
   1335c:	f007 f94d 	bl	1a5fa <atoi>
   13360:	4b06      	ldr	r3, [pc, #24]	; (1337c <pdn_id_get_parser+0x54>)
   13362:	f853 3026 	ldr.w	r3, [r3, r6, lsl #2]
   13366:	6058      	str	r0, [r3, #4]
   13368:	2000      	movs	r0, #0
   1336a:	bd70      	pop	{r4, r5, r6, pc}
   1336c:	f810 3f01 	ldrb.w	r3, [r0, #1]!
   13370:	2b00      	cmp	r3, #0
   13372:	d1e0      	bne.n	13336 <pdn_id_get_parser+0xe>
   13374:	e7ea      	b.n	1334c <pdn_id_get_parser+0x24>
   13376:	460d      	mov	r5, r1
   13378:	e7e8      	b.n	1334c <pdn_id_get_parser+0x24>
   1337a:	bf00      	nop
   1337c:	200207b0 	.word	0x200207b0

00013380 <context_create_parser>:
   13380:	b570      	push	{r4, r5, r6, lr}
   13382:	780b      	ldrb	r3, [r1, #0]
   13384:	4606      	mov	r6, r0
   13386:	b313      	cbz	r3, 133ce <context_create_parser+0x4e>
   13388:	4608      	mov	r0, r1
   1338a:	2400      	movs	r4, #0
   1338c:	460a      	mov	r2, r1
   1338e:	2b20      	cmp	r3, #32
   13390:	4615      	mov	r5, r2
   13392:	d017      	beq.n	133c4 <context_create_parser+0x44>
   13394:	7013      	strb	r3, [r2, #0]
   13396:	3401      	adds	r4, #1
   13398:	f810 3f01 	ldrb.w	r3, [r0, #1]!
   1339c:	190a      	adds	r2, r1, r4
   1339e:	4615      	mov	r5, r2
   133a0:	2b00      	cmp	r3, #0
   133a2:	d1f4      	bne.n	1338e <context_create_parser+0xe>
   133a4:	2300      	movs	r3, #0
   133a6:	4608      	mov	r0, r1
   133a8:	702b      	strb	r3, [r5, #0]
   133aa:	213a      	movs	r1, #58	; 0x3a
   133ac:	f007 f9fb 	bl	1a7a6 <strchr>
   133b0:	b130      	cbz	r0, 133c0 <context_create_parser+0x40>
   133b2:	4b08      	ldr	r3, [pc, #32]	; (133d4 <context_create_parser+0x54>)
   133b4:	3001      	adds	r0, #1
   133b6:	f853 4026 	ldr.w	r4, [r3, r6, lsl #2]
   133ba:	f007 f91e 	bl	1a5fa <atoi>
   133be:	6020      	str	r0, [r4, #0]
   133c0:	2000      	movs	r0, #0
   133c2:	bd70      	pop	{r4, r5, r6, pc}
   133c4:	f810 3f01 	ldrb.w	r3, [r0, #1]!
   133c8:	2b00      	cmp	r3, #0
   133ca:	d1e0      	bne.n	1338e <context_create_parser+0xe>
   133cc:	e7ea      	b.n	133a4 <context_create_parser+0x24>
   133ce:	460d      	mov	r5, r1
   133d0:	e7e8      	b.n	133a4 <context_create_parser+0x24>
   133d2:	bf00      	nop
   133d4:	200207b0 	.word	0x200207b0

000133d8 <pdn_interface_init>:
   133d8:	f04f 33ff 	mov.w	r3, #4294967295
   133dc:	b510      	push	{r4, lr}
   133de:	4c09      	ldr	r4, [pc, #36]	; (13404 <pdn_interface_init+0x2c>)
   133e0:	2228      	movs	r2, #40	; 0x28
   133e2:	2100      	movs	r1, #0
   133e4:	4808      	ldr	r0, [pc, #32]	; (13408 <pdn_interface_init+0x30>)
   133e6:	6023      	str	r3, [r4, #0]
   133e8:	f007 fa47 	bl	1a87a <memset>
   133ec:	f240 2201 	movw	r2, #513	; 0x201
   133f0:	2102      	movs	r1, #2
   133f2:	2066      	movs	r0, #102	; 0x66
   133f4:	f7fd f838 	bl	10468 <at_interface_open>
   133f8:	2800      	cmp	r0, #0
   133fa:	6020      	str	r0, [r4, #0]
   133fc:	bfb4      	ite	lt
   133fe:	2003      	movlt	r0, #3
   13400:	2000      	movge	r0, #0
   13402:	bd10      	pop	{r4, pc}
   13404:	200206ac 	.word	0x200206ac
   13408:	200207b0 	.word	0x200207b0

0001340c <pdn_interface_open>:
   1340c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   13410:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
   13414:	b083      	sub	sp, #12
   13416:	f040 80ad 	bne.w	13574 <pdn_interface_open+0x168>
   1341a:	4c5f      	ldr	r4, [pc, #380]	; (13598 <pdn_interface_open+0x18c>)
   1341c:	6825      	ldr	r5, [r4, #0]
   1341e:	b34d      	cbz	r5, 13474 <pdn_interface_open+0x68>
   13420:	6863      	ldr	r3, [r4, #4]
   13422:	2b00      	cmp	r3, #0
   13424:	f000 8098 	beq.w	13558 <pdn_interface_open+0x14c>
   13428:	68a3      	ldr	r3, [r4, #8]
   1342a:	2b00      	cmp	r3, #0
   1342c:	f000 8096 	beq.w	1355c <pdn_interface_open+0x150>
   13430:	68e3      	ldr	r3, [r4, #12]
   13432:	2b00      	cmp	r3, #0
   13434:	f000 8094 	beq.w	13560 <pdn_interface_open+0x154>
   13438:	6923      	ldr	r3, [r4, #16]
   1343a:	2b00      	cmp	r3, #0
   1343c:	f000 8092 	beq.w	13564 <pdn_interface_open+0x158>
   13440:	6963      	ldr	r3, [r4, #20]
   13442:	2b00      	cmp	r3, #0
   13444:	f000 8090 	beq.w	13568 <pdn_interface_open+0x15c>
   13448:	69a3      	ldr	r3, [r4, #24]
   1344a:	2b00      	cmp	r3, #0
   1344c:	f000 808e 	beq.w	1356c <pdn_interface_open+0x160>
   13450:	69e3      	ldr	r3, [r4, #28]
   13452:	2b00      	cmp	r3, #0
   13454:	f000 808c 	beq.w	13570 <pdn_interface_open+0x164>
   13458:	6a23      	ldr	r3, [r4, #32]
   1345a:	b153      	cbz	r3, 13472 <pdn_interface_open+0x66>
   1345c:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1345e:	2509      	movs	r5, #9
   13460:	b143      	cbz	r3, 13474 <pdn_interface_open+0x68>
   13462:	200c      	movs	r0, #12
   13464:	f7fc f9be 	bl	f7e4 <bsd_os_errno_set>
   13468:	f04f 30ff 	mov.w	r0, #4294967295
   1346c:	b003      	add	sp, #12
   1346e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   13472:	2508      	movs	r5, #8
   13474:	2074      	movs	r0, #116	; 0x74
   13476:	f7fd fd39 	bl	10eec <nrf_malloc>
   1347a:	f844 0025 	str.w	r0, [r4, r5, lsl #2]
   1347e:	2800      	cmp	r0, #0
   13480:	d0ef      	beq.n	13462 <pdn_interface_open+0x56>
   13482:	2274      	movs	r2, #116	; 0x74
   13484:	2100      	movs	r1, #0
   13486:	f007 f9f8 	bl	1a87a <memset>
   1348a:	2101      	movs	r1, #1
   1348c:	2003      	movs	r0, #3
   1348e:	f04f 37ff 	mov.w	r7, #4294967295
   13492:	f854 3025 	ldr.w	r3, [r4, r5, lsl #2]
   13496:	4a41      	ldr	r2, [pc, #260]	; (1359c <pdn_interface_open+0x190>)
   13498:	6099      	str	r1, [r3, #8]
   1349a:	f854 3025 	ldr.w	r3, [r4, r5, lsl #2]
   1349e:	f44f 7180 	mov.w	r1, #256	; 0x100
   134a2:	6718      	str	r0, [r3, #112]	; 0x70
   134a4:	605f      	str	r7, [r3, #4]
   134a6:	483e      	ldr	r0, [pc, #248]	; (135a0 <pdn_interface_open+0x194>)
   134a8:	f8df 8100 	ldr.w	r8, [pc, #256]	; 135ac <pdn_interface_open+0x1a0>
   134ac:	f7fb fcd8 	bl	ee60 <snprintf>
   134b0:	483b      	ldr	r0, [pc, #236]	; (135a0 <pdn_interface_open+0x194>)
   134b2:	f8d8 9000 	ldr.w	r9, [r8]
   134b6:	2600      	movs	r6, #0
   134b8:	f007 f983 	bl	1a7c2 <strlen>
   134bc:	4633      	mov	r3, r6
   134be:	4602      	mov	r2, r0
   134c0:	4937      	ldr	r1, [pc, #220]	; (135a0 <pdn_interface_open+0x194>)
   134c2:	4648      	mov	r0, r9
   134c4:	9601      	str	r6, [sp, #4]
   134c6:	9600      	str	r6, [sp, #0]
   134c8:	f7fc ff60 	bl	1038c <at_interface_write>
   134cc:	4681      	mov	r9, r0
   134ce:	4834      	ldr	r0, [pc, #208]	; (135a0 <pdn_interface_open+0x194>)
   134d0:	f007 f977 	bl	1a7c2 <strlen>
   134d4:	4548      	cmp	r0, r9
   134d6:	d153      	bne.n	13580 <pdn_interface_open+0x174>
   134d8:	4633      	mov	r3, r6
   134da:	e9cd 6600 	strd	r6, r6, [sp]
   134de:	f44f 7280 	mov.w	r2, #256	; 0x100
   134e2:	492f      	ldr	r1, [pc, #188]	; (135a0 <pdn_interface_open+0x194>)
   134e4:	f8d8 0000 	ldr.w	r0, [r8]
   134e8:	f7fd f854 	bl	10594 <at_interface_read>
   134ec:	4606      	mov	r6, r0
   134ee:	482d      	ldr	r0, [pc, #180]	; (135a4 <pdn_interface_open+0x198>)
   134f0:	f007 f967 	bl	1a7c2 <strlen>
   134f4:	4286      	cmp	r6, r0
   134f6:	db15      	blt.n	13524 <pdn_interface_open+0x118>
   134f8:	4602      	mov	r2, r0
   134fa:	4929      	ldr	r1, [pc, #164]	; (135a0 <pdn_interface_open+0x194>)
   134fc:	4829      	ldr	r0, [pc, #164]	; (135a4 <pdn_interface_open+0x198>)
   134fe:	f007 f973 	bl	1a7e8 <strncmp>
   13502:	b978      	cbnz	r0, 13524 <pdn_interface_open+0x118>
   13504:	4926      	ldr	r1, [pc, #152]	; (135a0 <pdn_interface_open+0x194>)
   13506:	4628      	mov	r0, r5
   13508:	f7ff ff3a 	bl	13380 <context_create_parser>
   1350c:	b9b0      	cbnz	r0, 1353c <pdn_interface_open+0x130>
   1350e:	2202      	movs	r2, #2
   13510:	f854 3025 	ldr.w	r3, [r4, r5, lsl #2]
   13514:	f045 40f1 	orr.w	r0, r5, #2021654528	; 0x78800000
   13518:	f440 10d0 	orr.w	r0, r0, #1703936	; 0x1a0000
   1351c:	609a      	str	r2, [r3, #8]
   1351e:	b003      	add	sp, #12
   13520:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   13524:	4820      	ldr	r0, [pc, #128]	; (135a8 <pdn_interface_open+0x19c>)
   13526:	f007 f94c 	bl	1a7c2 <strlen>
   1352a:	491d      	ldr	r1, [pc, #116]	; (135a0 <pdn_interface_open+0x194>)
   1352c:	4602      	mov	r2, r0
   1352e:	481e      	ldr	r0, [pc, #120]	; (135a8 <pdn_interface_open+0x19c>)
   13530:	f007 f95a 	bl	1a7e8 <strncmp>
   13534:	b960      	cbnz	r0, 13550 <pdn_interface_open+0x144>
   13536:	2008      	movs	r0, #8
   13538:	f7fc f954 	bl	f7e4 <bsd_os_errno_set>
   1353c:	f854 0025 	ldr.w	r0, [r4, r5, lsl #2]
   13540:	f7fd fcde 	bl	10f00 <nrf_free>
   13544:	2300      	movs	r3, #0
   13546:	f04f 30ff 	mov.w	r0, #4294967295
   1354a:	f844 3025 	str.w	r3, [r4, r5, lsl #2]
   1354e:	e78d      	b.n	1346c <pdn_interface_open+0x60>
   13550:	2005      	movs	r0, #5
   13552:	f7fc f947 	bl	f7e4 <bsd_os_errno_set>
   13556:	e7f1      	b.n	1353c <pdn_interface_open+0x130>
   13558:	2501      	movs	r5, #1
   1355a:	e78b      	b.n	13474 <pdn_interface_open+0x68>
   1355c:	2502      	movs	r5, #2
   1355e:	e789      	b.n	13474 <pdn_interface_open+0x68>
   13560:	2503      	movs	r5, #3
   13562:	e787      	b.n	13474 <pdn_interface_open+0x68>
   13564:	2504      	movs	r5, #4
   13566:	e785      	b.n	13474 <pdn_interface_open+0x68>
   13568:	2505      	movs	r5, #5
   1356a:	e783      	b.n	13474 <pdn_interface_open+0x68>
   1356c:	2506      	movs	r5, #6
   1356e:	e781      	b.n	13474 <pdn_interface_open+0x68>
   13570:	2507      	movs	r5, #7
   13572:	e77f      	b.n	13474 <pdn_interface_open+0x68>
   13574:	2029      	movs	r0, #41	; 0x29
   13576:	f7fc f935 	bl	f7e4 <bsd_os_errno_set>
   1357a:	f04f 30ff 	mov.w	r0, #4294967295
   1357e:	e775      	b.n	1346c <pdn_interface_open+0x60>
   13580:	2005      	movs	r0, #5
   13582:	f7fc f92f 	bl	f7e4 <bsd_os_errno_set>
   13586:	f854 0025 	ldr.w	r0, [r4, r5, lsl #2]
   1358a:	f7fd fcb9 	bl	10f00 <nrf_free>
   1358e:	f844 6025 	str.w	r6, [r4, r5, lsl #2]
   13592:	4638      	mov	r0, r7
   13594:	e76a      	b.n	1346c <pdn_interface_open+0x60>
   13596:	bf00      	nop
   13598:	200207b0 	.word	0x200207b0
   1359c:	0001c48c 	.word	0x0001c48c
   135a0:	200206b0 	.word	0x200206b0
   135a4:	0001c49c 	.word	0x0001c49c
   135a8:	0001c4a8 	.word	0x0001c4a8
   135ac:	200206ac 	.word	0x200206ac

000135b0 <pdn_interface_connect>:
   135b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   135b4:	b083      	sub	sp, #12
   135b6:	2900      	cmp	r1, #0
   135b8:	f000 813d 	beq.w	13836 <pdn_interface_connect+0x286>
   135bc:	2a64      	cmp	r2, #100	; 0x64
   135be:	4691      	mov	r9, r2
   135c0:	f200 8139 	bhi.w	13836 <pdn_interface_connect+0x286>
   135c4:	4605      	mov	r5, r0
   135c6:	4608      	mov	r0, r1
   135c8:	4688      	mov	r8, r1
   135ca:	f007 f8fa 	bl	1a7c2 <strlen>
   135ce:	2864      	cmp	r0, #100	; 0x64
   135d0:	f200 8131 	bhi.w	13836 <pdn_interface_connect+0x286>
   135d4:	0c2b      	lsrs	r3, r5, #16
   135d6:	4aa5      	ldr	r2, [pc, #660]	; (1386c <pdn_interface_connect+0x2bc>)
   135d8:	041b      	lsls	r3, r3, #16
   135da:	4293      	cmp	r3, r2
   135dc:	f040 8122 	bne.w	13824 <pdn_interface_connect+0x274>
   135e0:	f025 45f1 	bic.w	r5, r5, #2021654528	; 0x78800000
   135e4:	f425 15d0 	bic.w	r5, r5, #1703936	; 0x1a0000
   135e8:	2d09      	cmp	r5, #9
   135ea:	f300 811b 	bgt.w	13824 <pdn_interface_connect+0x274>
   135ee:	4fa0      	ldr	r7, [pc, #640]	; (13870 <pdn_interface_connect+0x2c0>)
   135f0:	f857 3025 	ldr.w	r3, [r7, r5, lsl #2]
   135f4:	2b00      	cmp	r3, #0
   135f6:	f000 8115 	beq.w	13824 <pdn_interface_connect+0x274>
   135fa:	689a      	ldr	r2, [r3, #8]
   135fc:	2a00      	cmp	r2, #0
   135fe:	f000 8111 	beq.w	13824 <pdn_interface_connect+0x274>
   13602:	689b      	ldr	r3, [r3, #8]
   13604:	2b02      	cmp	r3, #2
   13606:	f040 810d 	bne.w	13824 <pdn_interface_connect+0x274>
   1360a:	4e9a      	ldr	r6, [pc, #616]	; (13874 <pdn_interface_connect+0x2c4>)
   1360c:	4a9a      	ldr	r2, [pc, #616]	; (13878 <pdn_interface_connect+0x2c8>)
   1360e:	f44f 7180 	mov.w	r1, #256	; 0x100
   13612:	4630      	mov	r0, r6
   13614:	f7fb fc24 	bl	ee60 <snprintf>
   13618:	f857 3025 	ldr.w	r3, [r7, r5, lsl #2]
   1361c:	4604      	mov	r4, r0
   1361e:	f5c0 7180 	rsb	r1, r0, #256	; 0x100
   13622:	681b      	ldr	r3, [r3, #0]
   13624:	4a95      	ldr	r2, [pc, #596]	; (1387c <pdn_interface_connect+0x2cc>)
   13626:	1830      	adds	r0, r6, r0
   13628:	f7fb fc1a 	bl	ee60 <snprintf>
   1362c:	f857 3025 	ldr.w	r3, [r7, r5, lsl #2]
   13630:	4404      	add	r4, r0
   13632:	6f1b      	ldr	r3, [r3, #112]	; 0x70
   13634:	f003 0203 	and.w	r2, r3, #3
   13638:	2a03      	cmp	r2, #3
   1363a:	f000 80ea 	beq.w	13812 <pdn_interface_connect+0x262>
   1363e:	079b      	lsls	r3, r3, #30
   13640:	eb06 0004 	add.w	r0, r6, r4
   13644:	f5c4 7180 	rsb	r1, r4, #256	; 0x100
   13648:	bf4c      	ite	mi
   1364a:	4b8d      	ldrmi	r3, [pc, #564]	; (13880 <pdn_interface_connect+0x2d0>)
   1364c:	4b8d      	ldrpl	r3, [pc, #564]	; (13884 <pdn_interface_connect+0x2d4>)
   1364e:	4a8e      	ldr	r2, [pc, #568]	; (13888 <pdn_interface_connect+0x2d8>)
   13650:	f7fb fc06 	bl	ee60 <snprintf>
   13654:	4404      	add	r4, r0
   13656:	4643      	mov	r3, r8
   13658:	4a8c      	ldr	r2, [pc, #560]	; (1388c <pdn_interface_connect+0x2dc>)
   1365a:	f5c4 7180 	rsb	r1, r4, #256	; 0x100
   1365e:	1930      	adds	r0, r6, r4
   13660:	f7fb fbfe 	bl	ee60 <snprintf>
   13664:	4420      	add	r0, r4
   13666:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
   1366a:	f300 80f7 	bgt.w	1385c <pdn_interface_connect+0x2ac>
   1366e:	f8df a23c 	ldr.w	sl, [pc, #572]	; 138ac <pdn_interface_connect+0x2fc>
   13672:	4880      	ldr	r0, [pc, #512]	; (13874 <pdn_interface_connect+0x2c4>)
   13674:	f8da b000 	ldr.w	fp, [sl]
   13678:	2400      	movs	r4, #0
   1367a:	f007 f8a2 	bl	1a7c2 <strlen>
   1367e:	4623      	mov	r3, r4
   13680:	4602      	mov	r2, r0
   13682:	497c      	ldr	r1, [pc, #496]	; (13874 <pdn_interface_connect+0x2c4>)
   13684:	4658      	mov	r0, fp
   13686:	9401      	str	r4, [sp, #4]
   13688:	9400      	str	r4, [sp, #0]
   1368a:	f7fc fe7f 	bl	1038c <at_interface_write>
   1368e:	4683      	mov	fp, r0
   13690:	4878      	ldr	r0, [pc, #480]	; (13874 <pdn_interface_connect+0x2c4>)
   13692:	f007 f896 	bl	1a7c2 <strlen>
   13696:	4558      	cmp	r0, fp
   13698:	d008      	beq.n	136ac <pdn_interface_connect+0xfc>
   1369a:	2005      	movs	r0, #5
   1369c:	f7fc f8a2 	bl	f7e4 <bsd_os_errno_set>
   136a0:	f04f 34ff 	mov.w	r4, #4294967295
   136a4:	4620      	mov	r0, r4
   136a6:	b003      	add	sp, #12
   136a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   136ac:	4623      	mov	r3, r4
   136ae:	e9cd 4400 	strd	r4, r4, [sp]
   136b2:	f44f 7280 	mov.w	r2, #256	; 0x100
   136b6:	496f      	ldr	r1, [pc, #444]	; (13874 <pdn_interface_connect+0x2c4>)
   136b8:	f8da 0000 	ldr.w	r0, [sl]
   136bc:	f7fc ff6a 	bl	10594 <at_interface_read>
   136c0:	4604      	mov	r4, r0
   136c2:	4873      	ldr	r0, [pc, #460]	; (13890 <pdn_interface_connect+0x2e0>)
   136c4:	f007 f87d 	bl	1a7c2 <strlen>
   136c8:	4284      	cmp	r4, r0
   136ca:	f2c0 8091 	blt.w	137f0 <pdn_interface_connect+0x240>
   136ce:	4602      	mov	r2, r0
   136d0:	4968      	ldr	r1, [pc, #416]	; (13874 <pdn_interface_connect+0x2c4>)
   136d2:	486f      	ldr	r0, [pc, #444]	; (13890 <pdn_interface_connect+0x2e0>)
   136d4:	f007 f888 	bl	1a7e8 <strncmp>
   136d8:	2800      	cmp	r0, #0
   136da:	f040 8089 	bne.w	137f0 <pdn_interface_connect+0x240>
   136de:	4965      	ldr	r1, [pc, #404]	; (13874 <pdn_interface_connect+0x2c4>)
   136e0:	4628      	mov	r0, r5
   136e2:	f7ff fde9 	bl	132b8 <ok_rsp_parser>
   136e6:	4604      	mov	r4, r0
   136e8:	2800      	cmp	r0, #0
   136ea:	d1db      	bne.n	136a4 <pdn_interface_connect+0xf4>
   136ec:	4a69      	ldr	r2, [pc, #420]	; (13894 <pdn_interface_connect+0x2e4>)
   136ee:	f44f 7180 	mov.w	r1, #256	; 0x100
   136f2:	4860      	ldr	r0, [pc, #384]	; (13874 <pdn_interface_connect+0x2c4>)
   136f4:	f7fb fbb4 	bl	ee60 <snprintf>
   136f8:	f857 3025 	ldr.w	r3, [r7, r5, lsl #2]
   136fc:	f5c0 7180 	rsb	r1, r0, #256	; 0x100
   13700:	681b      	ldr	r3, [r3, #0]
   13702:	4a65      	ldr	r2, [pc, #404]	; (13898 <pdn_interface_connect+0x2e8>)
   13704:	4430      	add	r0, r6
   13706:	f7fb fbab 	bl	ee60 <snprintf>
   1370a:	485a      	ldr	r0, [pc, #360]	; (13874 <pdn_interface_connect+0x2c4>)
   1370c:	f8da b000 	ldr.w	fp, [sl]
   13710:	f007 f857 	bl	1a7c2 <strlen>
   13714:	4623      	mov	r3, r4
   13716:	4602      	mov	r2, r0
   13718:	4956      	ldr	r1, [pc, #344]	; (13874 <pdn_interface_connect+0x2c4>)
   1371a:	4658      	mov	r0, fp
   1371c:	9401      	str	r4, [sp, #4]
   1371e:	9400      	str	r4, [sp, #0]
   13720:	f7fc fe34 	bl	1038c <at_interface_write>
   13724:	4683      	mov	fp, r0
   13726:	4853      	ldr	r0, [pc, #332]	; (13874 <pdn_interface_connect+0x2c4>)
   13728:	f007 f84b 	bl	1a7c2 <strlen>
   1372c:	4558      	cmp	r0, fp
   1372e:	d1b4      	bne.n	1369a <pdn_interface_connect+0xea>
   13730:	4623      	mov	r3, r4
   13732:	f44f 7280 	mov.w	r2, #256	; 0x100
   13736:	494f      	ldr	r1, [pc, #316]	; (13874 <pdn_interface_connect+0x2c4>)
   13738:	f8da 0000 	ldr.w	r0, [sl]
   1373c:	e9cd 4400 	strd	r4, r4, [sp]
   13740:	f7fc ff28 	bl	10594 <at_interface_read>
   13744:	4683      	mov	fp, r0
   13746:	4852      	ldr	r0, [pc, #328]	; (13890 <pdn_interface_connect+0x2e0>)
   13748:	f007 f83b 	bl	1a7c2 <strlen>
   1374c:	4583      	cmp	fp, r0
   1374e:	db4f      	blt.n	137f0 <pdn_interface_connect+0x240>
   13750:	4602      	mov	r2, r0
   13752:	4948      	ldr	r1, [pc, #288]	; (13874 <pdn_interface_connect+0x2c4>)
   13754:	484e      	ldr	r0, [pc, #312]	; (13890 <pdn_interface_connect+0x2e0>)
   13756:	f007 f847 	bl	1a7e8 <strncmp>
   1375a:	2800      	cmp	r0, #0
   1375c:	d148      	bne.n	137f0 <pdn_interface_connect+0x240>
   1375e:	2103      	movs	r1, #3
   13760:	f857 3025 	ldr.w	r3, [r7, r5, lsl #2]
   13764:	464a      	mov	r2, r9
   13766:	6099      	str	r1, [r3, #8]
   13768:	f857 0025 	ldr.w	r0, [r7, r5, lsl #2]
   1376c:	4641      	mov	r1, r8
   1376e:	300c      	adds	r0, #12
   13770:	f007 f859 	bl	1a826 <memcpy>
   13774:	4a49      	ldr	r2, [pc, #292]	; (1389c <pdn_interface_connect+0x2ec>)
   13776:	f44f 7180 	mov.w	r1, #256	; 0x100
   1377a:	483e      	ldr	r0, [pc, #248]	; (13874 <pdn_interface_connect+0x2c4>)
   1377c:	f7fb fb70 	bl	ee60 <snprintf>
   13780:	4601      	mov	r1, r0
   13782:	f857 3025 	ldr.w	r3, [r7, r5, lsl #2]
   13786:	f5c1 7180 	rsb	r1, r1, #256	; 0x100
   1378a:	681b      	ldr	r3, [r3, #0]
   1378c:	4a42      	ldr	r2, [pc, #264]	; (13898 <pdn_interface_connect+0x2e8>)
   1378e:	1830      	adds	r0, r6, r0
   13790:	f7fb fb66 	bl	ee60 <snprintf>
   13794:	4837      	ldr	r0, [pc, #220]	; (13874 <pdn_interface_connect+0x2c4>)
   13796:	f8da 6000 	ldr.w	r6, [sl]
   1379a:	f007 f812 	bl	1a7c2 <strlen>
   1379e:	4623      	mov	r3, r4
   137a0:	4602      	mov	r2, r0
   137a2:	4934      	ldr	r1, [pc, #208]	; (13874 <pdn_interface_connect+0x2c4>)
   137a4:	4630      	mov	r0, r6
   137a6:	9401      	str	r4, [sp, #4]
   137a8:	9400      	str	r4, [sp, #0]
   137aa:	f7fc fdef 	bl	1038c <at_interface_write>
   137ae:	4606      	mov	r6, r0
   137b0:	4830      	ldr	r0, [pc, #192]	; (13874 <pdn_interface_connect+0x2c4>)
   137b2:	f007 f806 	bl	1a7c2 <strlen>
   137b6:	42b0      	cmp	r0, r6
   137b8:	d153      	bne.n	13862 <pdn_interface_connect+0x2b2>
   137ba:	4623      	mov	r3, r4
   137bc:	f44f 7280 	mov.w	r2, #256	; 0x100
   137c0:	492c      	ldr	r1, [pc, #176]	; (13874 <pdn_interface_connect+0x2c4>)
   137c2:	f8da 0000 	ldr.w	r0, [sl]
   137c6:	e9cd 4400 	strd	r4, r4, [sp]
   137ca:	f7fc fee3 	bl	10594 <at_interface_read>
   137ce:	4606      	mov	r6, r0
   137d0:	4833      	ldr	r0, [pc, #204]	; (138a0 <pdn_interface_connect+0x2f0>)
   137d2:	f006 fff6 	bl	1a7c2 <strlen>
   137d6:	4286      	cmp	r6, r0
   137d8:	db33      	blt.n	13842 <pdn_interface_connect+0x292>
   137da:	4602      	mov	r2, r0
   137dc:	4925      	ldr	r1, [pc, #148]	; (13874 <pdn_interface_connect+0x2c4>)
   137de:	4830      	ldr	r0, [pc, #192]	; (138a0 <pdn_interface_connect+0x2f0>)
   137e0:	f007 f802 	bl	1a7e8 <strncmp>
   137e4:	bb68      	cbnz	r0, 13842 <pdn_interface_connect+0x292>
   137e6:	4628      	mov	r0, r5
   137e8:	4922      	ldr	r1, [pc, #136]	; (13874 <pdn_interface_connect+0x2c4>)
   137ea:	f7ff fd9d 	bl	13328 <pdn_id_get_parser>
   137ee:	e759      	b.n	136a4 <pdn_interface_connect+0xf4>
   137f0:	482c      	ldr	r0, [pc, #176]	; (138a4 <pdn_interface_connect+0x2f4>)
   137f2:	f006 ffe6 	bl	1a7c2 <strlen>
   137f6:	491f      	ldr	r1, [pc, #124]	; (13874 <pdn_interface_connect+0x2c4>)
   137f8:	4602      	mov	r2, r0
   137fa:	482a      	ldr	r0, [pc, #168]	; (138a4 <pdn_interface_connect+0x2f4>)
   137fc:	f006 fff4 	bl	1a7e8 <strncmp>
   13800:	2800      	cmp	r0, #0
   13802:	f47f af4a 	bne.w	1369a <pdn_interface_connect+0xea>
   13806:	2008      	movs	r0, #8
   13808:	f7fb ffec 	bl	f7e4 <bsd_os_errno_set>
   1380c:	f04f 34ff 	mov.w	r4, #4294967295
   13810:	e748      	b.n	136a4 <pdn_interface_connect+0xf4>
   13812:	f5c4 7180 	rsb	r1, r4, #256	; 0x100
   13816:	1930      	adds	r0, r6, r4
   13818:	4b23      	ldr	r3, [pc, #140]	; (138a8 <pdn_interface_connect+0x2f8>)
   1381a:	4a1b      	ldr	r2, [pc, #108]	; (13888 <pdn_interface_connect+0x2d8>)
   1381c:	f7fb fb20 	bl	ee60 <snprintf>
   13820:	4404      	add	r4, r0
   13822:	e718      	b.n	13656 <pdn_interface_connect+0xa6>
   13824:	f04f 34ff 	mov.w	r4, #4294967295
   13828:	2009      	movs	r0, #9
   1382a:	f7fb ffdb 	bl	f7e4 <bsd_os_errno_set>
   1382e:	4620      	mov	r0, r4
   13830:	b003      	add	sp, #12
   13832:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13836:	2016      	movs	r0, #22
   13838:	f7fb ffd4 	bl	f7e4 <bsd_os_errno_set>
   1383c:	f04f 34ff 	mov.w	r4, #4294967295
   13840:	e730      	b.n	136a4 <pdn_interface_connect+0xf4>
   13842:	4818      	ldr	r0, [pc, #96]	; (138a4 <pdn_interface_connect+0x2f4>)
   13844:	f006 ffbd 	bl	1a7c2 <strlen>
   13848:	490a      	ldr	r1, [pc, #40]	; (13874 <pdn_interface_connect+0x2c4>)
   1384a:	4602      	mov	r2, r0
   1384c:	4815      	ldr	r0, [pc, #84]	; (138a4 <pdn_interface_connect+0x2f4>)
   1384e:	f006 ffcb 	bl	1a7e8 <strncmp>
   13852:	b930      	cbnz	r0, 13862 <pdn_interface_connect+0x2b2>
   13854:	2008      	movs	r0, #8
   13856:	f7fb ffc5 	bl	f7e4 <bsd_os_errno_set>
   1385a:	e723      	b.n	136a4 <pdn_interface_connect+0xf4>
   1385c:	f04f 34ff 	mov.w	r4, #4294967295
   13860:	e720      	b.n	136a4 <pdn_interface_connect+0xf4>
   13862:	2005      	movs	r0, #5
   13864:	f7fb ffbe 	bl	f7e4 <bsd_os_errno_set>
   13868:	e71c      	b.n	136a4 <pdn_interface_connect+0xf4>
   1386a:	bf00      	nop
   1386c:	789a0000 	.word	0x789a0000
   13870:	200207b0 	.word	0x200207b0
   13874:	200206b0 	.word	0x200206b0
   13878:	0001c414 	.word	0x0001c414
   1387c:	0001c420 	.word	0x0001c420
   13880:	0001c434 	.word	0x0001c434
   13884:	0001c43c 	.word	0x0001c43c
   13888:	0001c42c 	.word	0x0001c42c
   1388c:	0001c470 	.word	0x0001c470
   13890:	0001c440 	.word	0x0001c440
   13894:	0001c444 	.word	0x0001c444
   13898:	0001c450 	.word	0x0001c450
   1389c:	0001c454 	.word	0x0001c454
   138a0:	0001c464 	.word	0x0001c464
   138a4:	0001c4a8 	.word	0x0001c4a8
   138a8:	0001c424 	.word	0x0001c424
   138ac:	200206ac 	.word	0x200206ac

000138b0 <pdn_interface_close>:
   138b0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   138b4:	4a64      	ldr	r2, [pc, #400]	; (13a48 <pdn_interface_close+0x198>)
   138b6:	0c03      	lsrs	r3, r0, #16
   138b8:	041b      	lsls	r3, r3, #16
   138ba:	4293      	cmp	r3, r2
   138bc:	b083      	sub	sp, #12
   138be:	f040 809d 	bne.w	139fc <pdn_interface_close+0x14c>
   138c2:	f020 44f1 	bic.w	r4, r0, #2021654528	; 0x78800000
   138c6:	f424 14d0 	bic.w	r4, r4, #1703936	; 0x1a0000
   138ca:	2c09      	cmp	r4, #9
   138cc:	f300 8096 	bgt.w	139fc <pdn_interface_close+0x14c>
   138d0:	4d5e      	ldr	r5, [pc, #376]	; (13a4c <pdn_interface_close+0x19c>)
   138d2:	f855 0024 	ldr.w	r0, [r5, r4, lsl #2]
   138d6:	2800      	cmp	r0, #0
   138d8:	f000 8090 	beq.w	139fc <pdn_interface_close+0x14c>
   138dc:	6883      	ldr	r3, [r0, #8]
   138de:	2b00      	cmp	r3, #0
   138e0:	f000 808c 	beq.w	139fc <pdn_interface_close+0x14c>
   138e4:	6883      	ldr	r3, [r0, #8]
   138e6:	2b03      	cmp	r3, #3
   138e8:	d008      	beq.n	138fc <pdn_interface_close+0x4c>
   138ea:	f7fd fb09 	bl	10f00 <nrf_free>
   138ee:	2300      	movs	r3, #0
   138f0:	4618      	mov	r0, r3
   138f2:	f845 3024 	str.w	r3, [r5, r4, lsl #2]
   138f6:	b003      	add	sp, #12
   138f8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   138fc:	4e54      	ldr	r6, [pc, #336]	; (13a50 <pdn_interface_close+0x1a0>)
   138fe:	4a55      	ldr	r2, [pc, #340]	; (13a54 <pdn_interface_close+0x1a4>)
   13900:	f44f 7180 	mov.w	r1, #256	; 0x100
   13904:	4630      	mov	r0, r6
   13906:	f7fb faab 	bl	ee60 <snprintf>
   1390a:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
   1390e:	f5c0 7180 	rsb	r1, r0, #256	; 0x100
   13912:	681b      	ldr	r3, [r3, #0]
   13914:	4a50      	ldr	r2, [pc, #320]	; (13a58 <pdn_interface_close+0x1a8>)
   13916:	4430      	add	r0, r6
   13918:	f8df 814c 	ldr.w	r8, [pc, #332]	; 13a68 <pdn_interface_close+0x1b8>
   1391c:	f7fb faa0 	bl	ee60 <snprintf>
   13920:	4630      	mov	r0, r6
   13922:	f8d8 9000 	ldr.w	r9, [r8]
   13926:	2700      	movs	r7, #0
   13928:	f006 ff4b 	bl	1a7c2 <strlen>
   1392c:	4631      	mov	r1, r6
   1392e:	4602      	mov	r2, r0
   13930:	463b      	mov	r3, r7
   13932:	4648      	mov	r0, r9
   13934:	9701      	str	r7, [sp, #4]
   13936:	9700      	str	r7, [sp, #0]
   13938:	f7fc fd28 	bl	1038c <at_interface_write>
   1393c:	4681      	mov	r9, r0
   1393e:	4630      	mov	r0, r6
   13940:	f006 ff3f 	bl	1a7c2 <strlen>
   13944:	4548      	cmp	r0, r9
   13946:	d176      	bne.n	13a36 <pdn_interface_close+0x186>
   13948:	463b      	mov	r3, r7
   1394a:	e9cd 7700 	strd	r7, r7, [sp]
   1394e:	f44f 7280 	mov.w	r2, #256	; 0x100
   13952:	4631      	mov	r1, r6
   13954:	f8d8 0000 	ldr.w	r0, [r8]
   13958:	f7fc fe1c 	bl	10594 <at_interface_read>
   1395c:	4607      	mov	r7, r0
   1395e:	483f      	ldr	r0, [pc, #252]	; (13a5c <pdn_interface_close+0x1ac>)
   13960:	f006 ff2f 	bl	1a7c2 <strlen>
   13964:	4287      	cmp	r7, r0
   13966:	da4f      	bge.n	13a08 <pdn_interface_close+0x158>
   13968:	483d      	ldr	r0, [pc, #244]	; (13a60 <pdn_interface_close+0x1b0>)
   1396a:	f006 ff2a 	bl	1a7c2 <strlen>
   1396e:	4938      	ldr	r1, [pc, #224]	; (13a50 <pdn_interface_close+0x1a0>)
   13970:	4602      	mov	r2, r0
   13972:	483b      	ldr	r0, [pc, #236]	; (13a60 <pdn_interface_close+0x1b0>)
   13974:	f006 ff38 	bl	1a7e8 <strncmp>
   13978:	2800      	cmp	r0, #0
   1397a:	d15c      	bne.n	13a36 <pdn_interface_close+0x186>
   1397c:	2008      	movs	r0, #8
   1397e:	f7fb ff31 	bl	f7e4 <bsd_os_errno_set>
   13982:	4a38      	ldr	r2, [pc, #224]	; (13a64 <pdn_interface_close+0x1b4>)
   13984:	f44f 7180 	mov.w	r1, #256	; 0x100
   13988:	4831      	ldr	r0, [pc, #196]	; (13a50 <pdn_interface_close+0x1a0>)
   1398a:	f7fb fa69 	bl	ee60 <snprintf>
   1398e:	4601      	mov	r1, r0
   13990:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
   13994:	f5c1 7180 	rsb	r1, r1, #256	; 0x100
   13998:	681b      	ldr	r3, [r3, #0]
   1399a:	4a2f      	ldr	r2, [pc, #188]	; (13a58 <pdn_interface_close+0x1a8>)
   1399c:	1830      	adds	r0, r6, r0
   1399e:	f7fb fa5f 	bl	ee60 <snprintf>
   139a2:	482b      	ldr	r0, [pc, #172]	; (13a50 <pdn_interface_close+0x1a0>)
   139a4:	f8d8 7000 	ldr.w	r7, [r8]
   139a8:	2600      	movs	r6, #0
   139aa:	f006 ff0a 	bl	1a7c2 <strlen>
   139ae:	4633      	mov	r3, r6
   139b0:	4602      	mov	r2, r0
   139b2:	4927      	ldr	r1, [pc, #156]	; (13a50 <pdn_interface_close+0x1a0>)
   139b4:	4638      	mov	r0, r7
   139b6:	9601      	str	r6, [sp, #4]
   139b8:	9600      	str	r6, [sp, #0]
   139ba:	f7fc fce7 	bl	1038c <at_interface_write>
   139be:	4607      	mov	r7, r0
   139c0:	4823      	ldr	r0, [pc, #140]	; (13a50 <pdn_interface_close+0x1a0>)
   139c2:	f006 fefe 	bl	1a7c2 <strlen>
   139c6:	42b8      	cmp	r0, r7
   139c8:	d139      	bne.n	13a3e <pdn_interface_close+0x18e>
   139ca:	4633      	mov	r3, r6
   139cc:	e9cd 6600 	strd	r6, r6, [sp]
   139d0:	f44f 7280 	mov.w	r2, #256	; 0x100
   139d4:	491e      	ldr	r1, [pc, #120]	; (13a50 <pdn_interface_close+0x1a0>)
   139d6:	f8d8 0000 	ldr.w	r0, [r8]
   139da:	f7fc fddb 	bl	10594 <at_interface_read>
   139de:	4606      	mov	r6, r0
   139e0:	481e      	ldr	r0, [pc, #120]	; (13a5c <pdn_interface_close+0x1ac>)
   139e2:	f006 feee 	bl	1a7c2 <strlen>
   139e6:	4286      	cmp	r6, r0
   139e8:	db16      	blt.n	13a18 <pdn_interface_close+0x168>
   139ea:	4602      	mov	r2, r0
   139ec:	4918      	ldr	r1, [pc, #96]	; (13a50 <pdn_interface_close+0x1a0>)
   139ee:	481b      	ldr	r0, [pc, #108]	; (13a5c <pdn_interface_close+0x1ac>)
   139f0:	f006 fefa 	bl	1a7e8 <strncmp>
   139f4:	b980      	cbnz	r0, 13a18 <pdn_interface_close+0x168>
   139f6:	f855 0024 	ldr.w	r0, [r5, r4, lsl #2]
   139fa:	e776      	b.n	138ea <pdn_interface_close+0x3a>
   139fc:	2009      	movs	r0, #9
   139fe:	f7fb fef1 	bl	f7e4 <bsd_os_errno_set>
   13a02:	f04f 30ff 	mov.w	r0, #4294967295
   13a06:	e776      	b.n	138f6 <pdn_interface_close+0x46>
   13a08:	4602      	mov	r2, r0
   13a0a:	4631      	mov	r1, r6
   13a0c:	4813      	ldr	r0, [pc, #76]	; (13a5c <pdn_interface_close+0x1ac>)
   13a0e:	f006 feeb 	bl	1a7e8 <strncmp>
   13a12:	2800      	cmp	r0, #0
   13a14:	d0b5      	beq.n	13982 <pdn_interface_close+0xd2>
   13a16:	e7a7      	b.n	13968 <pdn_interface_close+0xb8>
   13a18:	4811      	ldr	r0, [pc, #68]	; (13a60 <pdn_interface_close+0x1b0>)
   13a1a:	f006 fed2 	bl	1a7c2 <strlen>
   13a1e:	490c      	ldr	r1, [pc, #48]	; (13a50 <pdn_interface_close+0x1a0>)
   13a20:	4602      	mov	r2, r0
   13a22:	480f      	ldr	r0, [pc, #60]	; (13a60 <pdn_interface_close+0x1b0>)
   13a24:	f006 fee0 	bl	1a7e8 <strncmp>
   13a28:	b948      	cbnz	r0, 13a3e <pdn_interface_close+0x18e>
   13a2a:	2008      	movs	r0, #8
   13a2c:	f7fb feda 	bl	f7e4 <bsd_os_errno_set>
   13a30:	f855 0024 	ldr.w	r0, [r5, r4, lsl #2]
   13a34:	e759      	b.n	138ea <pdn_interface_close+0x3a>
   13a36:	2005      	movs	r0, #5
   13a38:	f7fb fed4 	bl	f7e4 <bsd_os_errno_set>
   13a3c:	e7a1      	b.n	13982 <pdn_interface_close+0xd2>
   13a3e:	2005      	movs	r0, #5
   13a40:	f7fb fed0 	bl	f7e4 <bsd_os_errno_set>
   13a44:	e7d7      	b.n	139f6 <pdn_interface_close+0x146>
   13a46:	bf00      	nop
   13a48:	789a0000 	.word	0x789a0000
   13a4c:	200207b0 	.word	0x200207b0
   13a50:	200206b0 	.word	0x200206b0
   13a54:	0001c408 	.word	0x0001c408
   13a58:	0001c450 	.word	0x0001c450
   13a5c:	0001c440 	.word	0x0001c440
   13a60:	0001c4a8 	.word	0x0001c4a8
   13a64:	0001c414 	.word	0x0001c414
   13a68:	200206ac 	.word	0x200206ac

00013a6c <pdn_interface_setopt>:
   13a6c:	b510      	push	{r4, lr}
   13a6e:	f240 2402 	movw	r4, #514	; 0x202
   13a72:	42a1      	cmp	r1, r4
   13a74:	d10d      	bne.n	13a92 <pdn_interface_setopt+0x26>
   13a76:	b163      	cbz	r3, 13a92 <pdn_interface_setopt+0x26>
   13a78:	9902      	ldr	r1, [sp, #8]
   13a7a:	b151      	cbz	r1, 13a92 <pdn_interface_setopt+0x26>
   13a7c:	0c01      	lsrs	r1, r0, #16
   13a7e:	4c25      	ldr	r4, [pc, #148]	; (13b14 <pdn_interface_setopt+0xa8>)
   13a80:	0409      	lsls	r1, r1, #16
   13a82:	42a1      	cmp	r1, r4
   13a84:	d00b      	beq.n	13a9e <pdn_interface_setopt+0x32>
   13a86:	2009      	movs	r0, #9
   13a88:	f7fb feac 	bl	f7e4 <bsd_os_errno_set>
   13a8c:	f04f 30ff 	mov.w	r0, #4294967295
   13a90:	bd10      	pop	{r4, pc}
   13a92:	2016      	movs	r0, #22
   13a94:	f7fb fea6 	bl	f7e4 <bsd_os_errno_set>
   13a98:	f04f 30ff 	mov.w	r0, #4294967295
   13a9c:	bd10      	pop	{r4, pc}
   13a9e:	f020 40f1 	bic.w	r0, r0, #2021654528	; 0x78800000
   13aa2:	f420 10d0 	bic.w	r0, r0, #1703936	; 0x1a0000
   13aa6:	2809      	cmp	r0, #9
   13aa8:	dced      	bgt.n	13a86 <pdn_interface_setopt+0x1a>
   13aaa:	491b      	ldr	r1, [pc, #108]	; (13b18 <pdn_interface_setopt+0xac>)
   13aac:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
   13ab0:	2900      	cmp	r1, #0
   13ab2:	d0e8      	beq.n	13a86 <pdn_interface_setopt+0x1a>
   13ab4:	6888      	ldr	r0, [r1, #8]
   13ab6:	2800      	cmp	r0, #0
   13ab8:	d0e5      	beq.n	13a86 <pdn_interface_setopt+0x1a>
   13aba:	2a01      	cmp	r2, #1
   13abc:	d001      	beq.n	13ac2 <pdn_interface_setopt+0x56>
   13abe:	202d      	movs	r0, #45	; 0x2d
   13ac0:	e7e8      	b.n	13a94 <pdn_interface_setopt+0x28>
   13ac2:	688a      	ldr	r2, [r1, #8]
   13ac4:	b1fa      	cbz	r2, 13b06 <pdn_interface_setopt+0x9a>
   13ac6:	688a      	ldr	r2, [r1, #8]
   13ac8:	2a03      	cmp	r2, #3
   13aca:	d01c      	beq.n	13b06 <pdn_interface_setopt+0x9a>
   13acc:	688a      	ldr	r2, [r1, #8]
   13ace:	2a04      	cmp	r2, #4
   13ad0:	d019      	beq.n	13b06 <pdn_interface_setopt+0x9a>
   13ad2:	9a02      	ldr	r2, [sp, #8]
   13ad4:	0890      	lsrs	r0, r2, #2
   13ad6:	1e42      	subs	r2, r0, #1
   13ad8:	2a01      	cmp	r2, #1
   13ada:	d8da      	bhi.n	13a92 <pdn_interface_setopt+0x26>
   13adc:	9a02      	ldr	r2, [sp, #8]
   13ade:	0792      	lsls	r2, r2, #30
   13ae0:	d1d7      	bne.n	13a92 <pdn_interface_setopt+0x26>
   13ae2:	681a      	ldr	r2, [r3, #0]
   13ae4:	2a02      	cmp	r2, #2
   13ae6:	d010      	beq.n	13b0a <pdn_interface_setopt+0x9e>
   13ae8:	2a0a      	cmp	r2, #10
   13aea:	d1d2      	bne.n	13a92 <pdn_interface_setopt+0x26>
   13aec:	2202      	movs	r2, #2
   13aee:	2802      	cmp	r0, #2
   13af0:	d106      	bne.n	13b00 <pdn_interface_setopt+0x94>
   13af2:	685b      	ldr	r3, [r3, #4]
   13af4:	2b02      	cmp	r3, #2
   13af6:	d00a      	beq.n	13b0e <pdn_interface_setopt+0xa2>
   13af8:	2b0a      	cmp	r3, #10
   13afa:	d1ca      	bne.n	13a92 <pdn_interface_setopt+0x26>
   13afc:	f042 0202 	orr.w	r2, r2, #2
   13b00:	670a      	str	r2, [r1, #112]	; 0x70
   13b02:	2000      	movs	r0, #0
   13b04:	e7c6      	b.n	13a94 <pdn_interface_setopt+0x28>
   13b06:	200e      	movs	r0, #14
   13b08:	e7c4      	b.n	13a94 <pdn_interface_setopt+0x28>
   13b0a:	2201      	movs	r2, #1
   13b0c:	e7ef      	b.n	13aee <pdn_interface_setopt+0x82>
   13b0e:	f042 0201 	orr.w	r2, r2, #1
   13b12:	e7f5      	b.n	13b00 <pdn_interface_setopt+0x94>
   13b14:	789a0000 	.word	0x789a0000
   13b18:	200207b0 	.word	0x200207b0

00013b1c <pdn_interface_getopt>:
   13b1c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   13b20:	f240 2402 	movw	r4, #514	; 0x202
   13b24:	b083      	sub	sp, #12
   13b26:	42a1      	cmp	r1, r4
   13b28:	9d0a      	ldr	r5, [sp, #40]	; 0x28
   13b2a:	f040 80a9 	bne.w	13c80 <pdn_interface_getopt+0x164>
   13b2e:	461e      	mov	r6, r3
   13b30:	2b00      	cmp	r3, #0
   13b32:	f000 80a5 	beq.w	13c80 <pdn_interface_getopt+0x164>
   13b36:	2d00      	cmp	r5, #0
   13b38:	f000 80a2 	beq.w	13c80 <pdn_interface_getopt+0x164>
   13b3c:	0c03      	lsrs	r3, r0, #16
   13b3e:	4956      	ldr	r1, [pc, #344]	; (13c98 <pdn_interface_getopt+0x17c>)
   13b40:	041b      	lsls	r3, r3, #16
   13b42:	428b      	cmp	r3, r1
   13b44:	f040 8082 	bne.w	13c4c <pdn_interface_getopt+0x130>
   13b48:	f020 44f1 	bic.w	r4, r0, #2021654528	; 0x78800000
   13b4c:	f424 14d0 	bic.w	r4, r4, #1703936	; 0x1a0000
   13b50:	2c09      	cmp	r4, #9
   13b52:	dc7b      	bgt.n	13c4c <pdn_interface_getopt+0x130>
   13b54:	4b51      	ldr	r3, [pc, #324]	; (13c9c <pdn_interface_getopt+0x180>)
   13b56:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
   13b5a:	2b00      	cmp	r3, #0
   13b5c:	d076      	beq.n	13c4c <pdn_interface_getopt+0x130>
   13b5e:	6899      	ldr	r1, [r3, #8]
   13b60:	2900      	cmp	r1, #0
   13b62:	d073      	beq.n	13c4c <pdn_interface_getopt+0x130>
   13b64:	2a02      	cmp	r2, #2
   13b66:	d00e      	beq.n	13b86 <pdn_interface_getopt+0x6a>
   13b68:	2a03      	cmp	r2, #3
   13b6a:	d008      	beq.n	13b7e <pdn_interface_getopt+0x62>
   13b6c:	2a01      	cmp	r2, #1
   13b6e:	d015      	beq.n	13b9c <pdn_interface_getopt+0x80>
   13b70:	202d      	movs	r0, #45	; 0x2d
   13b72:	f7fb fe37 	bl	f7e4 <bsd_os_errno_set>
   13b76:	2000      	movs	r0, #0
   13b78:	b003      	add	sp, #12
   13b7a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   13b7e:	682b      	ldr	r3, [r5, #0]
   13b80:	bb23      	cbnz	r3, 13bcc <pdn_interface_getopt+0xb0>
   13b82:	2016      	movs	r0, #22
   13b84:	e7f5      	b.n	13b72 <pdn_interface_getopt+0x56>
   13b86:	682a      	ldr	r2, [r5, #0]
   13b88:	2a00      	cmp	r2, #0
   13b8a:	d0fa      	beq.n	13b82 <pdn_interface_getopt+0x66>
   13b8c:	2201      	movs	r2, #1
   13b8e:	2000      	movs	r0, #0
   13b90:	681b      	ldr	r3, [r3, #0]
   13b92:	7033      	strb	r3, [r6, #0]
   13b94:	602a      	str	r2, [r5, #0]
   13b96:	b003      	add	sp, #12
   13b98:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   13b9c:	689a      	ldr	r2, [r3, #8]
   13b9e:	2a00      	cmp	r2, #0
   13ba0:	d052      	beq.n	13c48 <pdn_interface_getopt+0x12c>
   13ba2:	689a      	ldr	r2, [r3, #8]
   13ba4:	2a04      	cmp	r2, #4
   13ba6:	d04f      	beq.n	13c48 <pdn_interface_getopt+0x12c>
   13ba8:	682a      	ldr	r2, [r5, #0]
   13baa:	2a07      	cmp	r2, #7
   13bac:	d9e9      	bls.n	13b82 <pdn_interface_getopt+0x66>
   13bae:	f012 0203 	ands.w	r2, r2, #3
   13bb2:	d1e6      	bne.n	13b82 <pdn_interface_getopt+0x66>
   13bb4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
   13bb6:	0799      	lsls	r1, r3, #30
   13bb8:	d45d      	bmi.n	13c76 <pdn_interface_getopt+0x15a>
   13bba:	2104      	movs	r1, #4
   13bbc:	07db      	lsls	r3, r3, #31
   13bbe:	d502      	bpl.n	13bc6 <pdn_interface_getopt+0xaa>
   13bc0:	2302      	movs	r3, #2
   13bc2:	50b3      	str	r3, [r6, r2]
   13bc4:	460a      	mov	r2, r1
   13bc6:	602a      	str	r2, [r5, #0]
   13bc8:	2000      	movs	r0, #0
   13bca:	e7d5      	b.n	13b78 <pdn_interface_getopt+0x5c>
   13bcc:	4a34      	ldr	r2, [pc, #208]	; (13ca0 <pdn_interface_getopt+0x184>)
   13bce:	f44f 7180 	mov.w	r1, #256	; 0x100
   13bd2:	4834      	ldr	r0, [pc, #208]	; (13ca4 <pdn_interface_getopt+0x188>)
   13bd4:	f8df 80d8 	ldr.w	r8, [pc, #216]	; 13cb0 <pdn_interface_getopt+0x194>
   13bd8:	f7fb f942 	bl	ee60 <snprintf>
   13bdc:	4831      	ldr	r0, [pc, #196]	; (13ca4 <pdn_interface_getopt+0x188>)
   13bde:	f8d8 9000 	ldr.w	r9, [r8]
   13be2:	2700      	movs	r7, #0
   13be4:	f006 fded 	bl	1a7c2 <strlen>
   13be8:	463b      	mov	r3, r7
   13bea:	4602      	mov	r2, r0
   13bec:	492d      	ldr	r1, [pc, #180]	; (13ca4 <pdn_interface_getopt+0x188>)
   13bee:	4648      	mov	r0, r9
   13bf0:	9701      	str	r7, [sp, #4]
   13bf2:	9700      	str	r7, [sp, #0]
   13bf4:	f7fc fbca 	bl	1038c <at_interface_write>
   13bf8:	4681      	mov	r9, r0
   13bfa:	482a      	ldr	r0, [pc, #168]	; (13ca4 <pdn_interface_getopt+0x188>)
   13bfc:	f006 fde1 	bl	1a7c2 <strlen>
   13c00:	4548      	cmp	r0, r9
   13c02:	d143      	bne.n	13c8c <pdn_interface_getopt+0x170>
   13c04:	463b      	mov	r3, r7
   13c06:	e9cd 7700 	strd	r7, r7, [sp]
   13c0a:	f44f 7280 	mov.w	r2, #256	; 0x100
   13c0e:	4925      	ldr	r1, [pc, #148]	; (13ca4 <pdn_interface_getopt+0x188>)
   13c10:	f8d8 0000 	ldr.w	r0, [r8]
   13c14:	f7fc fcbe 	bl	10594 <at_interface_read>
   13c18:	4607      	mov	r7, r0
   13c1a:	4823      	ldr	r0, [pc, #140]	; (13ca8 <pdn_interface_getopt+0x18c>)
   13c1c:	f006 fdd1 	bl	1a7c2 <strlen>
   13c20:	4287      	cmp	r7, r0
   13c22:	db19      	blt.n	13c58 <pdn_interface_getopt+0x13c>
   13c24:	4602      	mov	r2, r0
   13c26:	491f      	ldr	r1, [pc, #124]	; (13ca4 <pdn_interface_getopt+0x188>)
   13c28:	481f      	ldr	r0, [pc, #124]	; (13ca8 <pdn_interface_getopt+0x18c>)
   13c2a:	f006 fddd 	bl	1a7e8 <strncmp>
   13c2e:	4607      	mov	r7, r0
   13c30:	b990      	cbnz	r0, 13c58 <pdn_interface_getopt+0x13c>
   13c32:	4620      	mov	r0, r4
   13c34:	491b      	ldr	r1, [pc, #108]	; (13ca4 <pdn_interface_getopt+0x188>)
   13c36:	f7ff fb41 	bl	132bc <pdn_state_get_parser>
   13c3a:	2800      	cmp	r0, #0
   13c3c:	db99      	blt.n	13b72 <pdn_interface_getopt+0x56>
   13c3e:	2301      	movs	r3, #1
   13c40:	7030      	strb	r0, [r6, #0]
   13c42:	4638      	mov	r0, r7
   13c44:	602b      	str	r3, [r5, #0]
   13c46:	e797      	b.n	13b78 <pdn_interface_getopt+0x5c>
   13c48:	200e      	movs	r0, #14
   13c4a:	e792      	b.n	13b72 <pdn_interface_getopt+0x56>
   13c4c:	2009      	movs	r0, #9
   13c4e:	f7fb fdc9 	bl	f7e4 <bsd_os_errno_set>
   13c52:	f04f 30ff 	mov.w	r0, #4294967295
   13c56:	e78f      	b.n	13b78 <pdn_interface_getopt+0x5c>
   13c58:	4814      	ldr	r0, [pc, #80]	; (13cac <pdn_interface_getopt+0x190>)
   13c5a:	f006 fdb2 	bl	1a7c2 <strlen>
   13c5e:	4911      	ldr	r1, [pc, #68]	; (13ca4 <pdn_interface_getopt+0x188>)
   13c60:	4602      	mov	r2, r0
   13c62:	4812      	ldr	r0, [pc, #72]	; (13cac <pdn_interface_getopt+0x190>)
   13c64:	f006 fdc0 	bl	1a7e8 <strncmp>
   13c68:	b980      	cbnz	r0, 13c8c <pdn_interface_getopt+0x170>
   13c6a:	2008      	movs	r0, #8
   13c6c:	f7fb fdba 	bl	f7e4 <bsd_os_errno_set>
   13c70:	f04f 30ff 	mov.w	r0, #4294967295
   13c74:	e77d      	b.n	13b72 <pdn_interface_getopt+0x56>
   13c76:	220a      	movs	r2, #10
   13c78:	2108      	movs	r1, #8
   13c7a:	6032      	str	r2, [r6, #0]
   13c7c:	2204      	movs	r2, #4
   13c7e:	e79d      	b.n	13bbc <pdn_interface_getopt+0xa0>
   13c80:	2016      	movs	r0, #22
   13c82:	f7fb fdaf 	bl	f7e4 <bsd_os_errno_set>
   13c86:	f04f 30ff 	mov.w	r0, #4294967295
   13c8a:	e775      	b.n	13b78 <pdn_interface_getopt+0x5c>
   13c8c:	2005      	movs	r0, #5
   13c8e:	f7fb fda9 	bl	f7e4 <bsd_os_errno_set>
   13c92:	f04f 30ff 	mov.w	r0, #4294967295
   13c96:	e76c      	b.n	13b72 <pdn_interface_getopt+0x56>
   13c98:	789a0000 	.word	0x789a0000
   13c9c:	200207b0 	.word	0x200207b0
   13ca0:	0001c478 	.word	0x0001c478
   13ca4:	200206b0 	.word	0x200206b0
   13ca8:	0001c484 	.word	0x0001c484
   13cac:	0001c4a8 	.word	0x0001c4a8
   13cb0:	200206ac 	.word	0x200206ac

00013cb4 <pdn_interface_pdn_id_get>:
   13cb4:	2900      	cmp	r1, #0
   13cb6:	f000 83b9 	beq.w	1442c <pdn_interface_pdn_id_get+0x778>
   13cba:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   13cbe:	4ca3      	ldr	r4, [pc, #652]	; (13f4c <pdn_interface_pdn_id_get+0x298>)
   13cc0:	2802      	cmp	r0, #2
   13cc2:	b083      	sub	sp, #12
   13cc4:	460d      	mov	r5, r1
   13cc6:	6823      	ldr	r3, [r4, #0]
   13cc8:	f000 8094 	beq.w	13df4 <pdn_interface_pdn_id_get+0x140>
   13ccc:	280a      	cmp	r0, #10
   13cce:	d03f      	beq.n	13d50 <pdn_interface_pdn_id_get+0x9c>
   13cd0:	b11b      	cbz	r3, 13cda <pdn_interface_pdn_id_get+0x26>
   13cd2:	689b      	ldr	r3, [r3, #8]
   13cd4:	2b03      	cmp	r3, #3
   13cd6:	f000 8127 	beq.w	13f28 <pdn_interface_pdn_id_get+0x274>
   13cda:	6863      	ldr	r3, [r4, #4]
   13cdc:	b11b      	cbz	r3, 13ce6 <pdn_interface_pdn_id_get+0x32>
   13cde:	689b      	ldr	r3, [r3, #8]
   13ce0:	2b03      	cmp	r3, #3
   13ce2:	f000 8110 	beq.w	13f06 <pdn_interface_pdn_id_get+0x252>
   13ce6:	68a3      	ldr	r3, [r4, #8]
   13ce8:	b11b      	cbz	r3, 13cf2 <pdn_interface_pdn_id_get+0x3e>
   13cea:	689b      	ldr	r3, [r3, #8]
   13cec:	2b03      	cmp	r3, #3
   13cee:	f000 80f9 	beq.w	13ee4 <pdn_interface_pdn_id_get+0x230>
   13cf2:	68e3      	ldr	r3, [r4, #12]
   13cf4:	b11b      	cbz	r3, 13cfe <pdn_interface_pdn_id_get+0x4a>
   13cf6:	689b      	ldr	r3, [r3, #8]
   13cf8:	2b03      	cmp	r3, #3
   13cfa:	f000 80e2 	beq.w	13ec2 <pdn_interface_pdn_id_get+0x20e>
   13cfe:	6923      	ldr	r3, [r4, #16]
   13d00:	b11b      	cbz	r3, 13d0a <pdn_interface_pdn_id_get+0x56>
   13d02:	689b      	ldr	r3, [r3, #8]
   13d04:	2b03      	cmp	r3, #3
   13d06:	f000 8123 	beq.w	13f50 <pdn_interface_pdn_id_get+0x29c>
   13d0a:	6963      	ldr	r3, [r4, #20]
   13d0c:	b11b      	cbz	r3, 13d16 <pdn_interface_pdn_id_get+0x62>
   13d0e:	689b      	ldr	r3, [r3, #8]
   13d10:	2b03      	cmp	r3, #3
   13d12:	f000 8161 	beq.w	13fd8 <pdn_interface_pdn_id_get+0x324>
   13d16:	69a3      	ldr	r3, [r4, #24]
   13d18:	b11b      	cbz	r3, 13d22 <pdn_interface_pdn_id_get+0x6e>
   13d1a:	689b      	ldr	r3, [r3, #8]
   13d1c:	2b03      	cmp	r3, #3
   13d1e:	f000 814a 	beq.w	13fb6 <pdn_interface_pdn_id_get+0x302>
   13d22:	69e3      	ldr	r3, [r4, #28]
   13d24:	b11b      	cbz	r3, 13d2e <pdn_interface_pdn_id_get+0x7a>
   13d26:	689b      	ldr	r3, [r3, #8]
   13d28:	2b03      	cmp	r3, #3
   13d2a:	f000 8133 	beq.w	13f94 <pdn_interface_pdn_id_get+0x2e0>
   13d2e:	6a23      	ldr	r3, [r4, #32]
   13d30:	b11b      	cbz	r3, 13d3a <pdn_interface_pdn_id_get+0x86>
   13d32:	689b      	ldr	r3, [r3, #8]
   13d34:	2b03      	cmp	r3, #3
   13d36:	f000 811c 	beq.w	13f72 <pdn_interface_pdn_id_get+0x2be>
   13d3a:	6a63      	ldr	r3, [r4, #36]	; 0x24
   13d3c:	b11b      	cbz	r3, 13d46 <pdn_interface_pdn_id_get+0x92>
   13d3e:	689b      	ldr	r3, [r3, #8]
   13d40:	2b03      	cmp	r3, #3
   13d42:	f000 80ad 	beq.w	13ea0 <pdn_interface_pdn_id_get+0x1ec>
   13d46:	f04f 30ff 	mov.w	r0, #4294967295
   13d4a:	b003      	add	sp, #12
   13d4c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   13d50:	b11b      	cbz	r3, 13d5a <pdn_interface_pdn_id_get+0xa6>
   13d52:	689b      	ldr	r3, [r3, #8]
   13d54:	2b03      	cmp	r3, #3
   13d56:	f000 8335 	beq.w	143c4 <pdn_interface_pdn_id_get+0x710>
   13d5a:	6863      	ldr	r3, [r4, #4]
   13d5c:	b11b      	cbz	r3, 13d66 <pdn_interface_pdn_id_get+0xb2>
   13d5e:	689b      	ldr	r3, [r3, #8]
   13d60:	2b03      	cmp	r3, #3
   13d62:	f000 82fd 	beq.w	14360 <pdn_interface_pdn_id_get+0x6ac>
   13d66:	68a3      	ldr	r3, [r4, #8]
   13d68:	b11b      	cbz	r3, 13d72 <pdn_interface_pdn_id_get+0xbe>
   13d6a:	689b      	ldr	r3, [r3, #8]
   13d6c:	2b03      	cmp	r3, #3
   13d6e:	f000 82d5 	beq.w	1431c <pdn_interface_pdn_id_get+0x668>
   13d72:	68e3      	ldr	r3, [r4, #12]
   13d74:	b11b      	cbz	r3, 13d7e <pdn_interface_pdn_id_get+0xca>
   13d76:	689e      	ldr	r6, [r3, #8]
   13d78:	2e03      	cmp	r6, #3
   13d7a:	f000 81f0 	beq.w	1415e <pdn_interface_pdn_id_get+0x4aa>
   13d7e:	6923      	ldr	r3, [r4, #16]
   13d80:	b11b      	cbz	r3, 13d8a <pdn_interface_pdn_id_get+0xd6>
   13d82:	689b      	ldr	r3, [r3, #8]
   13d84:	2b03      	cmp	r3, #3
   13d86:	f000 8203 	beq.w	14190 <pdn_interface_pdn_id_get+0x4dc>
   13d8a:	6963      	ldr	r3, [r4, #20]
   13d8c:	b11b      	cbz	r3, 13d96 <pdn_interface_pdn_id_get+0xe2>
   13d8e:	689b      	ldr	r3, [r3, #8]
   13d90:	2b03      	cmp	r3, #3
   13d92:	f000 8215 	beq.w	141c0 <pdn_interface_pdn_id_get+0x50c>
   13d96:	69a3      	ldr	r3, [r4, #24]
   13d98:	b11b      	cbz	r3, 13da2 <pdn_interface_pdn_id_get+0xee>
   13d9a:	689b      	ldr	r3, [r3, #8]
   13d9c:	2b03      	cmp	r3, #3
   13d9e:	f000 8227 	beq.w	141f0 <pdn_interface_pdn_id_get+0x53c>
   13da2:	69e3      	ldr	r3, [r4, #28]
   13da4:	b11b      	cbz	r3, 13dae <pdn_interface_pdn_id_get+0xfa>
   13da6:	689b      	ldr	r3, [r3, #8]
   13da8:	2b03      	cmp	r3, #3
   13daa:	f000 8239 	beq.w	14220 <pdn_interface_pdn_id_get+0x56c>
   13dae:	6a23      	ldr	r3, [r4, #32]
   13db0:	b11b      	cbz	r3, 13dba <pdn_interface_pdn_id_get+0x106>
   13db2:	689b      	ldr	r3, [r3, #8]
   13db4:	2b03      	cmp	r3, #3
   13db6:	f000 824d 	beq.w	14254 <pdn_interface_pdn_id_get+0x5a0>
   13dba:	6a63      	ldr	r3, [r4, #36]	; 0x24
   13dbc:	2b00      	cmp	r3, #0
   13dbe:	d0c2      	beq.n	13d46 <pdn_interface_pdn_id_get+0x92>
   13dc0:	689b      	ldr	r3, [r3, #8]
   13dc2:	2b03      	cmp	r3, #3
   13dc4:	d1bf      	bne.n	13d46 <pdn_interface_pdn_id_get+0x92>
   13dc6:	4628      	mov	r0, r5
   13dc8:	f006 fcfb 	bl	1a7c2 <strlen>
   13dcc:	4606      	mov	r6, r0
   13dce:	6a60      	ldr	r0, [r4, #36]	; 0x24
   13dd0:	300c      	adds	r0, #12
   13dd2:	f006 fcf6 	bl	1a7c2 <strlen>
   13dd6:	42b0      	cmp	r0, r6
   13dd8:	d1b5      	bne.n	13d46 <pdn_interface_pdn_id_get+0x92>
   13dda:	6a61      	ldr	r1, [r4, #36]	; 0x24
   13ddc:	4628      	mov	r0, r5
   13dde:	310c      	adds	r1, #12
   13de0:	f006 fcf6 	bl	1a7d0 <strcmp>
   13de4:	2800      	cmp	r0, #0
   13de6:	d1ae      	bne.n	13d46 <pdn_interface_pdn_id_get+0x92>
   13de8:	6a63      	ldr	r3, [r4, #36]	; 0x24
   13dea:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   13dec:	0792      	lsls	r2, r2, #30
   13dee:	d5aa      	bpl.n	13d46 <pdn_interface_pdn_id_get+0x92>
   13df0:	2609      	movs	r6, #9
   13df2:	e11a      	b.n	1402a <pdn_interface_pdn_id_get+0x376>
   13df4:	b11b      	cbz	r3, 13dfe <pdn_interface_pdn_id_get+0x14a>
   13df6:	689b      	ldr	r3, [r3, #8]
   13df8:	2b03      	cmp	r3, #3
   13dfa:	f000 82fd 	beq.w	143f8 <pdn_interface_pdn_id_get+0x744>
   13dfe:	6863      	ldr	r3, [r4, #4]
   13e00:	b11b      	cbz	r3, 13e0a <pdn_interface_pdn_id_get+0x156>
   13e02:	689b      	ldr	r3, [r3, #8]
   13e04:	2b03      	cmp	r3, #3
   13e06:	f000 82c5 	beq.w	14394 <pdn_interface_pdn_id_get+0x6e0>
   13e0a:	68a3      	ldr	r3, [r4, #8]
   13e0c:	b11b      	cbz	r3, 13e16 <pdn_interface_pdn_id_get+0x162>
   13e0e:	689b      	ldr	r3, [r3, #8]
   13e10:	2b03      	cmp	r3, #3
   13e12:	f000 8269 	beq.w	142e8 <pdn_interface_pdn_id_get+0x634>
   13e16:	68e3      	ldr	r3, [r4, #12]
   13e18:	b11b      	cbz	r3, 13e22 <pdn_interface_pdn_id_get+0x16e>
   13e1a:	689e      	ldr	r6, [r3, #8]
   13e1c:	2e03      	cmp	r6, #3
   13e1e:	f000 80ec 	beq.w	13ffa <pdn_interface_pdn_id_get+0x346>
   13e22:	6923      	ldr	r3, [r4, #16]
   13e24:	b11b      	cbz	r3, 13e2e <pdn_interface_pdn_id_get+0x17a>
   13e26:	689b      	ldr	r3, [r3, #8]
   13e28:	2b03      	cmp	r3, #3
   13e2a:	f000 814a 	beq.w	140c2 <pdn_interface_pdn_id_get+0x40e>
   13e2e:	6963      	ldr	r3, [r4, #20]
   13e30:	b11b      	cbz	r3, 13e3a <pdn_interface_pdn_id_get+0x186>
   13e32:	689b      	ldr	r3, [r3, #8]
   13e34:	2b03      	cmp	r3, #3
   13e36:	f000 815e 	beq.w	140f6 <pdn_interface_pdn_id_get+0x442>
   13e3a:	69a3      	ldr	r3, [r4, #24]
   13e3c:	b11b      	cbz	r3, 13e46 <pdn_interface_pdn_id_get+0x192>
   13e3e:	689b      	ldr	r3, [r3, #8]
   13e40:	2b03      	cmp	r3, #3
   13e42:	f000 8172 	beq.w	1412a <pdn_interface_pdn_id_get+0x476>
   13e46:	69e3      	ldr	r3, [r4, #28]
   13e48:	b11b      	cbz	r3, 13e52 <pdn_interface_pdn_id_get+0x19e>
   13e4a:	689b      	ldr	r3, [r3, #8]
   13e4c:	2b03      	cmp	r3, #3
   13e4e:	f000 821b 	beq.w	14288 <pdn_interface_pdn_id_get+0x5d4>
   13e52:	6a23      	ldr	r3, [r4, #32]
   13e54:	b11b      	cbz	r3, 13e5e <pdn_interface_pdn_id_get+0x1aa>
   13e56:	689b      	ldr	r3, [r3, #8]
   13e58:	2b03      	cmp	r3, #3
   13e5a:	f000 822d 	beq.w	142b8 <pdn_interface_pdn_id_get+0x604>
   13e5e:	6a63      	ldr	r3, [r4, #36]	; 0x24
   13e60:	2b00      	cmp	r3, #0
   13e62:	f43f af70 	beq.w	13d46 <pdn_interface_pdn_id_get+0x92>
   13e66:	689b      	ldr	r3, [r3, #8]
   13e68:	2b03      	cmp	r3, #3
   13e6a:	f47f af6c 	bne.w	13d46 <pdn_interface_pdn_id_get+0x92>
   13e6e:	4628      	mov	r0, r5
   13e70:	f006 fca7 	bl	1a7c2 <strlen>
   13e74:	4606      	mov	r6, r0
   13e76:	6a60      	ldr	r0, [r4, #36]	; 0x24
   13e78:	300c      	adds	r0, #12
   13e7a:	f006 fca2 	bl	1a7c2 <strlen>
   13e7e:	4286      	cmp	r6, r0
   13e80:	f47f af61 	bne.w	13d46 <pdn_interface_pdn_id_get+0x92>
   13e84:	6a61      	ldr	r1, [r4, #36]	; 0x24
   13e86:	4628      	mov	r0, r5
   13e88:	310c      	adds	r1, #12
   13e8a:	f006 fca1 	bl	1a7d0 <strcmp>
   13e8e:	2800      	cmp	r0, #0
   13e90:	f47f af59 	bne.w	13d46 <pdn_interface_pdn_id_get+0x92>
   13e94:	6a63      	ldr	r3, [r4, #36]	; 0x24
   13e96:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   13e98:	07d2      	lsls	r2, r2, #31
   13e9a:	f57f af54 	bpl.w	13d46 <pdn_interface_pdn_id_get+0x92>
   13e9e:	e7a7      	b.n	13df0 <pdn_interface_pdn_id_get+0x13c>
   13ea0:	4628      	mov	r0, r5
   13ea2:	f006 fc8e 	bl	1a7c2 <strlen>
   13ea6:	4606      	mov	r6, r0
   13ea8:	6a60      	ldr	r0, [r4, #36]	; 0x24
   13eaa:	300c      	adds	r0, #12
   13eac:	f006 fc89 	bl	1a7c2 <strlen>
   13eb0:	42b0      	cmp	r0, r6
   13eb2:	f47f af48 	bne.w	13d46 <pdn_interface_pdn_id_get+0x92>
   13eb6:	6a61      	ldr	r1, [r4, #36]	; 0x24
   13eb8:	4628      	mov	r0, r5
   13eba:	310c      	adds	r1, #12
   13ebc:	f006 fc88 	bl	1a7d0 <strcmp>
   13ec0:	e741      	b.n	13d46 <pdn_interface_pdn_id_get+0x92>
   13ec2:	4628      	mov	r0, r5
   13ec4:	f006 fc7d 	bl	1a7c2 <strlen>
   13ec8:	4606      	mov	r6, r0
   13eca:	68e0      	ldr	r0, [r4, #12]
   13ecc:	300c      	adds	r0, #12
   13ece:	f006 fc78 	bl	1a7c2 <strlen>
   13ed2:	4286      	cmp	r6, r0
   13ed4:	f47f af13 	bne.w	13cfe <pdn_interface_pdn_id_get+0x4a>
   13ed8:	68e1      	ldr	r1, [r4, #12]
   13eda:	4628      	mov	r0, r5
   13edc:	310c      	adds	r1, #12
   13ede:	f006 fc77 	bl	1a7d0 <strcmp>
   13ee2:	e70c      	b.n	13cfe <pdn_interface_pdn_id_get+0x4a>
   13ee4:	4628      	mov	r0, r5
   13ee6:	f006 fc6c 	bl	1a7c2 <strlen>
   13eea:	4606      	mov	r6, r0
   13eec:	68a0      	ldr	r0, [r4, #8]
   13eee:	300c      	adds	r0, #12
   13ef0:	f006 fc67 	bl	1a7c2 <strlen>
   13ef4:	4286      	cmp	r6, r0
   13ef6:	f47f aefc 	bne.w	13cf2 <pdn_interface_pdn_id_get+0x3e>
   13efa:	68a1      	ldr	r1, [r4, #8]
   13efc:	4628      	mov	r0, r5
   13efe:	310c      	adds	r1, #12
   13f00:	f006 fc66 	bl	1a7d0 <strcmp>
   13f04:	e6f5      	b.n	13cf2 <pdn_interface_pdn_id_get+0x3e>
   13f06:	4628      	mov	r0, r5
   13f08:	f006 fc5b 	bl	1a7c2 <strlen>
   13f0c:	4606      	mov	r6, r0
   13f0e:	6860      	ldr	r0, [r4, #4]
   13f10:	300c      	adds	r0, #12
   13f12:	f006 fc56 	bl	1a7c2 <strlen>
   13f16:	4286      	cmp	r6, r0
   13f18:	f47f aee5 	bne.w	13ce6 <pdn_interface_pdn_id_get+0x32>
   13f1c:	6861      	ldr	r1, [r4, #4]
   13f1e:	4628      	mov	r0, r5
   13f20:	310c      	adds	r1, #12
   13f22:	f006 fc55 	bl	1a7d0 <strcmp>
   13f26:	e6de      	b.n	13ce6 <pdn_interface_pdn_id_get+0x32>
   13f28:	4608      	mov	r0, r1
   13f2a:	f006 fc4a 	bl	1a7c2 <strlen>
   13f2e:	4606      	mov	r6, r0
   13f30:	6820      	ldr	r0, [r4, #0]
   13f32:	300c      	adds	r0, #12
   13f34:	f006 fc45 	bl	1a7c2 <strlen>
   13f38:	4286      	cmp	r6, r0
   13f3a:	f47f aece 	bne.w	13cda <pdn_interface_pdn_id_get+0x26>
   13f3e:	6821      	ldr	r1, [r4, #0]
   13f40:	4628      	mov	r0, r5
   13f42:	310c      	adds	r1, #12
   13f44:	f006 fc44 	bl	1a7d0 <strcmp>
   13f48:	e6c7      	b.n	13cda <pdn_interface_pdn_id_get+0x26>
   13f4a:	bf00      	nop
   13f4c:	200207b0 	.word	0x200207b0
   13f50:	4628      	mov	r0, r5
   13f52:	f006 fc36 	bl	1a7c2 <strlen>
   13f56:	4606      	mov	r6, r0
   13f58:	6920      	ldr	r0, [r4, #16]
   13f5a:	300c      	adds	r0, #12
   13f5c:	f006 fc31 	bl	1a7c2 <strlen>
   13f60:	4286      	cmp	r6, r0
   13f62:	f47f aed2 	bne.w	13d0a <pdn_interface_pdn_id_get+0x56>
   13f66:	6921      	ldr	r1, [r4, #16]
   13f68:	4628      	mov	r0, r5
   13f6a:	310c      	adds	r1, #12
   13f6c:	f006 fc30 	bl	1a7d0 <strcmp>
   13f70:	e6cb      	b.n	13d0a <pdn_interface_pdn_id_get+0x56>
   13f72:	4628      	mov	r0, r5
   13f74:	f006 fc25 	bl	1a7c2 <strlen>
   13f78:	4606      	mov	r6, r0
   13f7a:	6a20      	ldr	r0, [r4, #32]
   13f7c:	300c      	adds	r0, #12
   13f7e:	f006 fc20 	bl	1a7c2 <strlen>
   13f82:	4286      	cmp	r6, r0
   13f84:	f47f aed9 	bne.w	13d3a <pdn_interface_pdn_id_get+0x86>
   13f88:	6a21      	ldr	r1, [r4, #32]
   13f8a:	4628      	mov	r0, r5
   13f8c:	310c      	adds	r1, #12
   13f8e:	f006 fc1f 	bl	1a7d0 <strcmp>
   13f92:	e6d2      	b.n	13d3a <pdn_interface_pdn_id_get+0x86>
   13f94:	4628      	mov	r0, r5
   13f96:	f006 fc14 	bl	1a7c2 <strlen>
   13f9a:	4606      	mov	r6, r0
   13f9c:	69e0      	ldr	r0, [r4, #28]
   13f9e:	300c      	adds	r0, #12
   13fa0:	f006 fc0f 	bl	1a7c2 <strlen>
   13fa4:	4286      	cmp	r6, r0
   13fa6:	f47f aec2 	bne.w	13d2e <pdn_interface_pdn_id_get+0x7a>
   13faa:	69e1      	ldr	r1, [r4, #28]
   13fac:	4628      	mov	r0, r5
   13fae:	310c      	adds	r1, #12
   13fb0:	f006 fc0e 	bl	1a7d0 <strcmp>
   13fb4:	e6bb      	b.n	13d2e <pdn_interface_pdn_id_get+0x7a>
   13fb6:	4628      	mov	r0, r5
   13fb8:	f006 fc03 	bl	1a7c2 <strlen>
   13fbc:	4606      	mov	r6, r0
   13fbe:	69a0      	ldr	r0, [r4, #24]
   13fc0:	300c      	adds	r0, #12
   13fc2:	f006 fbfe 	bl	1a7c2 <strlen>
   13fc6:	4286      	cmp	r6, r0
   13fc8:	f47f aeab 	bne.w	13d22 <pdn_interface_pdn_id_get+0x6e>
   13fcc:	69a1      	ldr	r1, [r4, #24]
   13fce:	4628      	mov	r0, r5
   13fd0:	310c      	adds	r1, #12
   13fd2:	f006 fbfd 	bl	1a7d0 <strcmp>
   13fd6:	e6a4      	b.n	13d22 <pdn_interface_pdn_id_get+0x6e>
   13fd8:	4628      	mov	r0, r5
   13fda:	f006 fbf2 	bl	1a7c2 <strlen>
   13fde:	4606      	mov	r6, r0
   13fe0:	6960      	ldr	r0, [r4, #20]
   13fe2:	300c      	adds	r0, #12
   13fe4:	f006 fbed 	bl	1a7c2 <strlen>
   13fe8:	4286      	cmp	r6, r0
   13fea:	f47f ae94 	bne.w	13d16 <pdn_interface_pdn_id_get+0x62>
   13fee:	6961      	ldr	r1, [r4, #20]
   13ff0:	4628      	mov	r0, r5
   13ff2:	310c      	adds	r1, #12
   13ff4:	f006 fbec 	bl	1a7d0 <strcmp>
   13ff8:	e68d      	b.n	13d16 <pdn_interface_pdn_id_get+0x62>
   13ffa:	4628      	mov	r0, r5
   13ffc:	f006 fbe1 	bl	1a7c2 <strlen>
   14000:	4607      	mov	r7, r0
   14002:	68e0      	ldr	r0, [r4, #12]
   14004:	300c      	adds	r0, #12
   14006:	f006 fbdc 	bl	1a7c2 <strlen>
   1400a:	4287      	cmp	r7, r0
   1400c:	f47f af09 	bne.w	13e22 <pdn_interface_pdn_id_get+0x16e>
   14010:	68e1      	ldr	r1, [r4, #12]
   14012:	4628      	mov	r0, r5
   14014:	310c      	adds	r1, #12
   14016:	f006 fbdb 	bl	1a7d0 <strcmp>
   1401a:	2800      	cmp	r0, #0
   1401c:	f47f af01 	bne.w	13e22 <pdn_interface_pdn_id_get+0x16e>
   14020:	68e3      	ldr	r3, [r4, #12]
   14022:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   14024:	07d1      	lsls	r1, r2, #31
   14026:	f57f aefc 	bpl.w	13e22 <pdn_interface_pdn_id_get+0x16e>
   1402a:	6858      	ldr	r0, [r3, #4]
   1402c:	1c43      	adds	r3, r0, #1
   1402e:	f47f ae8c 	bne.w	13d4a <pdn_interface_pdn_id_get+0x96>
   14032:	4dc6      	ldr	r5, [pc, #792]	; (1434c <pdn_interface_pdn_id_get+0x698>)
   14034:	4ac6      	ldr	r2, [pc, #792]	; (14350 <pdn_interface_pdn_id_get+0x69c>)
   14036:	f44f 7180 	mov.w	r1, #256	; 0x100
   1403a:	4628      	mov	r0, r5
   1403c:	f7fa ff10 	bl	ee60 <snprintf>
   14040:	f854 3026 	ldr.w	r3, [r4, r6, lsl #2]
   14044:	f5c0 7180 	rsb	r1, r0, #256	; 0x100
   14048:	681b      	ldr	r3, [r3, #0]
   1404a:	4ac2      	ldr	r2, [pc, #776]	; (14354 <pdn_interface_pdn_id_get+0x6a0>)
   1404c:	4428      	add	r0, r5
   1404e:	f8df 830c 	ldr.w	r8, [pc, #780]	; 1435c <pdn_interface_pdn_id_get+0x6a8>
   14052:	f7fa ff05 	bl	ee60 <snprintf>
   14056:	4628      	mov	r0, r5
   14058:	f8d8 9000 	ldr.w	r9, [r8]
   1405c:	2700      	movs	r7, #0
   1405e:	f006 fbb0 	bl	1a7c2 <strlen>
   14062:	4629      	mov	r1, r5
   14064:	4602      	mov	r2, r0
   14066:	463b      	mov	r3, r7
   14068:	4648      	mov	r0, r9
   1406a:	9701      	str	r7, [sp, #4]
   1406c:	9700      	str	r7, [sp, #0]
   1406e:	f7fc f98d 	bl	1038c <at_interface_write>
   14072:	4681      	mov	r9, r0
   14074:	4628      	mov	r0, r5
   14076:	f006 fba4 	bl	1a7c2 <strlen>
   1407a:	4548      	cmp	r0, r9
   1407c:	f040 81e9 	bne.w	14452 <pdn_interface_pdn_id_get+0x79e>
   14080:	463b      	mov	r3, r7
   14082:	f44f 7280 	mov.w	r2, #256	; 0x100
   14086:	e9cd 7700 	strd	r7, r7, [sp]
   1408a:	4629      	mov	r1, r5
   1408c:	f8d8 0000 	ldr.w	r0, [r8]
   14090:	f7fc fa80 	bl	10594 <at_interface_read>
   14094:	4607      	mov	r7, r0
   14096:	48b0      	ldr	r0, [pc, #704]	; (14358 <pdn_interface_pdn_id_get+0x6a4>)
   14098:	f006 fb93 	bl	1a7c2 <strlen>
   1409c:	4287      	cmp	r7, r0
   1409e:	4602      	mov	r2, r0
   140a0:	f2c0 81c7 	blt.w	14432 <pdn_interface_pdn_id_get+0x77e>
   140a4:	4629      	mov	r1, r5
   140a6:	48ac      	ldr	r0, [pc, #688]	; (14358 <pdn_interface_pdn_id_get+0x6a4>)
   140a8:	f006 fb9e 	bl	1a7e8 <strncmp>
   140ac:	2800      	cmp	r0, #0
   140ae:	f040 81c0 	bne.w	14432 <pdn_interface_pdn_id_get+0x77e>
   140b2:	4629      	mov	r1, r5
   140b4:	4630      	mov	r0, r6
   140b6:	f7ff f937 	bl	13328 <pdn_id_get_parser>
   140ba:	f854 3026 	ldr.w	r3, [r4, r6, lsl #2]
   140be:	6858      	ldr	r0, [r3, #4]
   140c0:	e643      	b.n	13d4a <pdn_interface_pdn_id_get+0x96>
   140c2:	4628      	mov	r0, r5
   140c4:	f006 fb7d 	bl	1a7c2 <strlen>
   140c8:	4606      	mov	r6, r0
   140ca:	6920      	ldr	r0, [r4, #16]
   140cc:	300c      	adds	r0, #12
   140ce:	f006 fb78 	bl	1a7c2 <strlen>
   140d2:	4286      	cmp	r6, r0
   140d4:	f47f aeab 	bne.w	13e2e <pdn_interface_pdn_id_get+0x17a>
   140d8:	6921      	ldr	r1, [r4, #16]
   140da:	4628      	mov	r0, r5
   140dc:	310c      	adds	r1, #12
   140de:	f006 fb77 	bl	1a7d0 <strcmp>
   140e2:	2800      	cmp	r0, #0
   140e4:	f47f aea3 	bne.w	13e2e <pdn_interface_pdn_id_get+0x17a>
   140e8:	6923      	ldr	r3, [r4, #16]
   140ea:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   140ec:	07d2      	lsls	r2, r2, #31
   140ee:	f57f ae9e 	bpl.w	13e2e <pdn_interface_pdn_id_get+0x17a>
   140f2:	2604      	movs	r6, #4
   140f4:	e799      	b.n	1402a <pdn_interface_pdn_id_get+0x376>
   140f6:	4628      	mov	r0, r5
   140f8:	f006 fb63 	bl	1a7c2 <strlen>
   140fc:	4606      	mov	r6, r0
   140fe:	6960      	ldr	r0, [r4, #20]
   14100:	300c      	adds	r0, #12
   14102:	f006 fb5e 	bl	1a7c2 <strlen>
   14106:	4286      	cmp	r6, r0
   14108:	f47f ae97 	bne.w	13e3a <pdn_interface_pdn_id_get+0x186>
   1410c:	6961      	ldr	r1, [r4, #20]
   1410e:	4628      	mov	r0, r5
   14110:	310c      	adds	r1, #12
   14112:	f006 fb5d 	bl	1a7d0 <strcmp>
   14116:	2800      	cmp	r0, #0
   14118:	f47f ae8f 	bne.w	13e3a <pdn_interface_pdn_id_get+0x186>
   1411c:	6963      	ldr	r3, [r4, #20]
   1411e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   14120:	07d7      	lsls	r7, r2, #31
   14122:	f57f ae8a 	bpl.w	13e3a <pdn_interface_pdn_id_get+0x186>
   14126:	2605      	movs	r6, #5
   14128:	e77f      	b.n	1402a <pdn_interface_pdn_id_get+0x376>
   1412a:	4628      	mov	r0, r5
   1412c:	f006 fb49 	bl	1a7c2 <strlen>
   14130:	4606      	mov	r6, r0
   14132:	69a0      	ldr	r0, [r4, #24]
   14134:	300c      	adds	r0, #12
   14136:	f006 fb44 	bl	1a7c2 <strlen>
   1413a:	4286      	cmp	r6, r0
   1413c:	f47f ae83 	bne.w	13e46 <pdn_interface_pdn_id_get+0x192>
   14140:	69a1      	ldr	r1, [r4, #24]
   14142:	4628      	mov	r0, r5
   14144:	310c      	adds	r1, #12
   14146:	f006 fb43 	bl	1a7d0 <strcmp>
   1414a:	2800      	cmp	r0, #0
   1414c:	f47f ae7b 	bne.w	13e46 <pdn_interface_pdn_id_get+0x192>
   14150:	69a3      	ldr	r3, [r4, #24]
   14152:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   14154:	07d6      	lsls	r6, r2, #31
   14156:	f57f ae76 	bpl.w	13e46 <pdn_interface_pdn_id_get+0x192>
   1415a:	2606      	movs	r6, #6
   1415c:	e765      	b.n	1402a <pdn_interface_pdn_id_get+0x376>
   1415e:	4628      	mov	r0, r5
   14160:	f006 fb2f 	bl	1a7c2 <strlen>
   14164:	4607      	mov	r7, r0
   14166:	68e0      	ldr	r0, [r4, #12]
   14168:	300c      	adds	r0, #12
   1416a:	f006 fb2a 	bl	1a7c2 <strlen>
   1416e:	4287      	cmp	r7, r0
   14170:	f47f ae05 	bne.w	13d7e <pdn_interface_pdn_id_get+0xca>
   14174:	68e1      	ldr	r1, [r4, #12]
   14176:	4628      	mov	r0, r5
   14178:	310c      	adds	r1, #12
   1417a:	f006 fb29 	bl	1a7d0 <strcmp>
   1417e:	2800      	cmp	r0, #0
   14180:	f47f adfd 	bne.w	13d7e <pdn_interface_pdn_id_get+0xca>
   14184:	68e3      	ldr	r3, [r4, #12]
   14186:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   14188:	0791      	lsls	r1, r2, #30
   1418a:	f53f af4e 	bmi.w	1402a <pdn_interface_pdn_id_get+0x376>
   1418e:	e5f6      	b.n	13d7e <pdn_interface_pdn_id_get+0xca>
   14190:	4628      	mov	r0, r5
   14192:	f006 fb16 	bl	1a7c2 <strlen>
   14196:	4606      	mov	r6, r0
   14198:	6920      	ldr	r0, [r4, #16]
   1419a:	300c      	adds	r0, #12
   1419c:	f006 fb11 	bl	1a7c2 <strlen>
   141a0:	4286      	cmp	r6, r0
   141a2:	f47f adf2 	bne.w	13d8a <pdn_interface_pdn_id_get+0xd6>
   141a6:	6921      	ldr	r1, [r4, #16]
   141a8:	4628      	mov	r0, r5
   141aa:	310c      	adds	r1, #12
   141ac:	f006 fb10 	bl	1a7d0 <strcmp>
   141b0:	2800      	cmp	r0, #0
   141b2:	f47f adea 	bne.w	13d8a <pdn_interface_pdn_id_get+0xd6>
   141b6:	6923      	ldr	r3, [r4, #16]
   141b8:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   141ba:	0792      	lsls	r2, r2, #30
   141bc:	d499      	bmi.n	140f2 <pdn_interface_pdn_id_get+0x43e>
   141be:	e5e4      	b.n	13d8a <pdn_interface_pdn_id_get+0xd6>
   141c0:	4628      	mov	r0, r5
   141c2:	f006 fafe 	bl	1a7c2 <strlen>
   141c6:	4606      	mov	r6, r0
   141c8:	6960      	ldr	r0, [r4, #20]
   141ca:	300c      	adds	r0, #12
   141cc:	f006 faf9 	bl	1a7c2 <strlen>
   141d0:	4286      	cmp	r6, r0
   141d2:	f47f ade0 	bne.w	13d96 <pdn_interface_pdn_id_get+0xe2>
   141d6:	6961      	ldr	r1, [r4, #20]
   141d8:	4628      	mov	r0, r5
   141da:	310c      	adds	r1, #12
   141dc:	f006 faf8 	bl	1a7d0 <strcmp>
   141e0:	2800      	cmp	r0, #0
   141e2:	f47f add8 	bne.w	13d96 <pdn_interface_pdn_id_get+0xe2>
   141e6:	6963      	ldr	r3, [r4, #20]
   141e8:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   141ea:	0797      	lsls	r7, r2, #30
   141ec:	d49b      	bmi.n	14126 <pdn_interface_pdn_id_get+0x472>
   141ee:	e5d2      	b.n	13d96 <pdn_interface_pdn_id_get+0xe2>
   141f0:	4628      	mov	r0, r5
   141f2:	f006 fae6 	bl	1a7c2 <strlen>
   141f6:	4606      	mov	r6, r0
   141f8:	69a0      	ldr	r0, [r4, #24]
   141fa:	300c      	adds	r0, #12
   141fc:	f006 fae1 	bl	1a7c2 <strlen>
   14200:	4286      	cmp	r6, r0
   14202:	f47f adce 	bne.w	13da2 <pdn_interface_pdn_id_get+0xee>
   14206:	69a1      	ldr	r1, [r4, #24]
   14208:	4628      	mov	r0, r5
   1420a:	310c      	adds	r1, #12
   1420c:	f006 fae0 	bl	1a7d0 <strcmp>
   14210:	2800      	cmp	r0, #0
   14212:	f47f adc6 	bne.w	13da2 <pdn_interface_pdn_id_get+0xee>
   14216:	69a3      	ldr	r3, [r4, #24]
   14218:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   1421a:	0796      	lsls	r6, r2, #30
   1421c:	d49d      	bmi.n	1415a <pdn_interface_pdn_id_get+0x4a6>
   1421e:	e5c0      	b.n	13da2 <pdn_interface_pdn_id_get+0xee>
   14220:	4628      	mov	r0, r5
   14222:	f006 face 	bl	1a7c2 <strlen>
   14226:	4606      	mov	r6, r0
   14228:	69e0      	ldr	r0, [r4, #28]
   1422a:	300c      	adds	r0, #12
   1422c:	f006 fac9 	bl	1a7c2 <strlen>
   14230:	4286      	cmp	r6, r0
   14232:	f47f adbc 	bne.w	13dae <pdn_interface_pdn_id_get+0xfa>
   14236:	69e1      	ldr	r1, [r4, #28]
   14238:	4628      	mov	r0, r5
   1423a:	310c      	adds	r1, #12
   1423c:	f006 fac8 	bl	1a7d0 <strcmp>
   14240:	2800      	cmp	r0, #0
   14242:	f47f adb4 	bne.w	13dae <pdn_interface_pdn_id_get+0xfa>
   14246:	69e3      	ldr	r3, [r4, #28]
   14248:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   1424a:	0790      	lsls	r0, r2, #30
   1424c:	f57f adaf 	bpl.w	13dae <pdn_interface_pdn_id_get+0xfa>
   14250:	2607      	movs	r6, #7
   14252:	e6ea      	b.n	1402a <pdn_interface_pdn_id_get+0x376>
   14254:	4628      	mov	r0, r5
   14256:	f006 fab4 	bl	1a7c2 <strlen>
   1425a:	4606      	mov	r6, r0
   1425c:	6a20      	ldr	r0, [r4, #32]
   1425e:	300c      	adds	r0, #12
   14260:	f006 faaf 	bl	1a7c2 <strlen>
   14264:	4286      	cmp	r6, r0
   14266:	f47f ada8 	bne.w	13dba <pdn_interface_pdn_id_get+0x106>
   1426a:	6a21      	ldr	r1, [r4, #32]
   1426c:	4628      	mov	r0, r5
   1426e:	310c      	adds	r1, #12
   14270:	f006 faae 	bl	1a7d0 <strcmp>
   14274:	2800      	cmp	r0, #0
   14276:	f47f ada0 	bne.w	13dba <pdn_interface_pdn_id_get+0x106>
   1427a:	6a23      	ldr	r3, [r4, #32]
   1427c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   1427e:	0791      	lsls	r1, r2, #30
   14280:	f57f ad9b 	bpl.w	13dba <pdn_interface_pdn_id_get+0x106>
   14284:	2608      	movs	r6, #8
   14286:	e6d0      	b.n	1402a <pdn_interface_pdn_id_get+0x376>
   14288:	4628      	mov	r0, r5
   1428a:	f006 fa9a 	bl	1a7c2 <strlen>
   1428e:	4606      	mov	r6, r0
   14290:	69e0      	ldr	r0, [r4, #28]
   14292:	300c      	adds	r0, #12
   14294:	f006 fa95 	bl	1a7c2 <strlen>
   14298:	4286      	cmp	r6, r0
   1429a:	f47f adda 	bne.w	13e52 <pdn_interface_pdn_id_get+0x19e>
   1429e:	69e1      	ldr	r1, [r4, #28]
   142a0:	4628      	mov	r0, r5
   142a2:	310c      	adds	r1, #12
   142a4:	f006 fa94 	bl	1a7d0 <strcmp>
   142a8:	2800      	cmp	r0, #0
   142aa:	f47f add2 	bne.w	13e52 <pdn_interface_pdn_id_get+0x19e>
   142ae:	69e3      	ldr	r3, [r4, #28]
   142b0:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   142b2:	07d0      	lsls	r0, r2, #31
   142b4:	d4cc      	bmi.n	14250 <pdn_interface_pdn_id_get+0x59c>
   142b6:	e5cc      	b.n	13e52 <pdn_interface_pdn_id_get+0x19e>
   142b8:	4628      	mov	r0, r5
   142ba:	f006 fa82 	bl	1a7c2 <strlen>
   142be:	4606      	mov	r6, r0
   142c0:	6a20      	ldr	r0, [r4, #32]
   142c2:	300c      	adds	r0, #12
   142c4:	f006 fa7d 	bl	1a7c2 <strlen>
   142c8:	4286      	cmp	r6, r0
   142ca:	f47f adc8 	bne.w	13e5e <pdn_interface_pdn_id_get+0x1aa>
   142ce:	6a21      	ldr	r1, [r4, #32]
   142d0:	4628      	mov	r0, r5
   142d2:	310c      	adds	r1, #12
   142d4:	f006 fa7c 	bl	1a7d0 <strcmp>
   142d8:	2800      	cmp	r0, #0
   142da:	f47f adc0 	bne.w	13e5e <pdn_interface_pdn_id_get+0x1aa>
   142de:	6a23      	ldr	r3, [r4, #32]
   142e0:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   142e2:	07d1      	lsls	r1, r2, #31
   142e4:	d4ce      	bmi.n	14284 <pdn_interface_pdn_id_get+0x5d0>
   142e6:	e5ba      	b.n	13e5e <pdn_interface_pdn_id_get+0x1aa>
   142e8:	4628      	mov	r0, r5
   142ea:	f006 fa6a 	bl	1a7c2 <strlen>
   142ee:	4606      	mov	r6, r0
   142f0:	68a0      	ldr	r0, [r4, #8]
   142f2:	300c      	adds	r0, #12
   142f4:	f006 fa65 	bl	1a7c2 <strlen>
   142f8:	4286      	cmp	r6, r0
   142fa:	f47f ad8c 	bne.w	13e16 <pdn_interface_pdn_id_get+0x162>
   142fe:	68a1      	ldr	r1, [r4, #8]
   14300:	4628      	mov	r0, r5
   14302:	310c      	adds	r1, #12
   14304:	f006 fa64 	bl	1a7d0 <strcmp>
   14308:	2800      	cmp	r0, #0
   1430a:	f47f ad84 	bne.w	13e16 <pdn_interface_pdn_id_get+0x162>
   1430e:	68a3      	ldr	r3, [r4, #8]
   14310:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   14312:	07d0      	lsls	r0, r2, #31
   14314:	f57f ad7f 	bpl.w	13e16 <pdn_interface_pdn_id_get+0x162>
   14318:	2602      	movs	r6, #2
   1431a:	e686      	b.n	1402a <pdn_interface_pdn_id_get+0x376>
   1431c:	4628      	mov	r0, r5
   1431e:	f006 fa50 	bl	1a7c2 <strlen>
   14322:	4606      	mov	r6, r0
   14324:	68a0      	ldr	r0, [r4, #8]
   14326:	300c      	adds	r0, #12
   14328:	f006 fa4b 	bl	1a7c2 <strlen>
   1432c:	4286      	cmp	r6, r0
   1432e:	f47f ad20 	bne.w	13d72 <pdn_interface_pdn_id_get+0xbe>
   14332:	68a1      	ldr	r1, [r4, #8]
   14334:	4628      	mov	r0, r5
   14336:	310c      	adds	r1, #12
   14338:	f006 fa4a 	bl	1a7d0 <strcmp>
   1433c:	2800      	cmp	r0, #0
   1433e:	f47f ad18 	bne.w	13d72 <pdn_interface_pdn_id_get+0xbe>
   14342:	68a3      	ldr	r3, [r4, #8]
   14344:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   14346:	0790      	lsls	r0, r2, #30
   14348:	d4e6      	bmi.n	14318 <pdn_interface_pdn_id_get+0x664>
   1434a:	e512      	b.n	13d72 <pdn_interface_pdn_id_get+0xbe>
   1434c:	200206b0 	.word	0x200206b0
   14350:	0001c454 	.word	0x0001c454
   14354:	0001c450 	.word	0x0001c450
   14358:	0001c464 	.word	0x0001c464
   1435c:	200206ac 	.word	0x200206ac
   14360:	4628      	mov	r0, r5
   14362:	f006 fa2e 	bl	1a7c2 <strlen>
   14366:	4606      	mov	r6, r0
   14368:	6860      	ldr	r0, [r4, #4]
   1436a:	300c      	adds	r0, #12
   1436c:	f006 fa29 	bl	1a7c2 <strlen>
   14370:	4286      	cmp	r6, r0
   14372:	f47f acf8 	bne.w	13d66 <pdn_interface_pdn_id_get+0xb2>
   14376:	6861      	ldr	r1, [r4, #4]
   14378:	4628      	mov	r0, r5
   1437a:	310c      	adds	r1, #12
   1437c:	f006 fa28 	bl	1a7d0 <strcmp>
   14380:	2800      	cmp	r0, #0
   14382:	f47f acf0 	bne.w	13d66 <pdn_interface_pdn_id_get+0xb2>
   14386:	6863      	ldr	r3, [r4, #4]
   14388:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   1438a:	0796      	lsls	r6, r2, #30
   1438c:	f57f aceb 	bpl.w	13d66 <pdn_interface_pdn_id_get+0xb2>
   14390:	2601      	movs	r6, #1
   14392:	e64a      	b.n	1402a <pdn_interface_pdn_id_get+0x376>
   14394:	4628      	mov	r0, r5
   14396:	f006 fa14 	bl	1a7c2 <strlen>
   1439a:	4606      	mov	r6, r0
   1439c:	6860      	ldr	r0, [r4, #4]
   1439e:	300c      	adds	r0, #12
   143a0:	f006 fa0f 	bl	1a7c2 <strlen>
   143a4:	4286      	cmp	r6, r0
   143a6:	f47f ad30 	bne.w	13e0a <pdn_interface_pdn_id_get+0x156>
   143aa:	6861      	ldr	r1, [r4, #4]
   143ac:	4628      	mov	r0, r5
   143ae:	310c      	adds	r1, #12
   143b0:	f006 fa0e 	bl	1a7d0 <strcmp>
   143b4:	2800      	cmp	r0, #0
   143b6:	f47f ad28 	bne.w	13e0a <pdn_interface_pdn_id_get+0x156>
   143ba:	6863      	ldr	r3, [r4, #4]
   143bc:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   143be:	07d6      	lsls	r6, r2, #31
   143c0:	d4e6      	bmi.n	14390 <pdn_interface_pdn_id_get+0x6dc>
   143c2:	e522      	b.n	13e0a <pdn_interface_pdn_id_get+0x156>
   143c4:	4608      	mov	r0, r1
   143c6:	f006 f9fc 	bl	1a7c2 <strlen>
   143ca:	4606      	mov	r6, r0
   143cc:	6820      	ldr	r0, [r4, #0]
   143ce:	300c      	adds	r0, #12
   143d0:	f006 f9f7 	bl	1a7c2 <strlen>
   143d4:	4286      	cmp	r6, r0
   143d6:	f47f acc0 	bne.w	13d5a <pdn_interface_pdn_id_get+0xa6>
   143da:	6821      	ldr	r1, [r4, #0]
   143dc:	4628      	mov	r0, r5
   143de:	310c      	adds	r1, #12
   143e0:	f006 f9f6 	bl	1a7d0 <strcmp>
   143e4:	4606      	mov	r6, r0
   143e6:	2800      	cmp	r0, #0
   143e8:	f47f acb7 	bne.w	13d5a <pdn_interface_pdn_id_get+0xa6>
   143ec:	6823      	ldr	r3, [r4, #0]
   143ee:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   143f0:	0797      	lsls	r7, r2, #30
   143f2:	f53f ae1a 	bmi.w	1402a <pdn_interface_pdn_id_get+0x376>
   143f6:	e4b0      	b.n	13d5a <pdn_interface_pdn_id_get+0xa6>
   143f8:	4608      	mov	r0, r1
   143fa:	f006 f9e2 	bl	1a7c2 <strlen>
   143fe:	4606      	mov	r6, r0
   14400:	6820      	ldr	r0, [r4, #0]
   14402:	300c      	adds	r0, #12
   14404:	f006 f9dd 	bl	1a7c2 <strlen>
   14408:	4286      	cmp	r6, r0
   1440a:	f47f acf8 	bne.w	13dfe <pdn_interface_pdn_id_get+0x14a>
   1440e:	6821      	ldr	r1, [r4, #0]
   14410:	4628      	mov	r0, r5
   14412:	310c      	adds	r1, #12
   14414:	f006 f9dc 	bl	1a7d0 <strcmp>
   14418:	4606      	mov	r6, r0
   1441a:	2800      	cmp	r0, #0
   1441c:	f47f acef 	bne.w	13dfe <pdn_interface_pdn_id_get+0x14a>
   14420:	6823      	ldr	r3, [r4, #0]
   14422:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   14424:	07d7      	lsls	r7, r2, #31
   14426:	f53f ae00 	bmi.w	1402a <pdn_interface_pdn_id_get+0x376>
   1442a:	e4e8      	b.n	13dfe <pdn_interface_pdn_id_get+0x14a>
   1442c:	f04f 30ff 	mov.w	r0, #4294967295
   14430:	4770      	bx	lr
   14432:	480b      	ldr	r0, [pc, #44]	; (14460 <pdn_interface_pdn_id_get+0x7ac>)
   14434:	f006 f9c5 	bl	1a7c2 <strlen>
   14438:	490a      	ldr	r1, [pc, #40]	; (14464 <pdn_interface_pdn_id_get+0x7b0>)
   1443a:	4602      	mov	r2, r0
   1443c:	4808      	ldr	r0, [pc, #32]	; (14460 <pdn_interface_pdn_id_get+0x7ac>)
   1443e:	f006 f9d3 	bl	1a7e8 <strncmp>
   14442:	b930      	cbnz	r0, 14452 <pdn_interface_pdn_id_get+0x79e>
   14444:	2008      	movs	r0, #8
   14446:	f7fb f9cd 	bl	f7e4 <bsd_os_errno_set>
   1444a:	f854 3026 	ldr.w	r3, [r4, r6, lsl #2]
   1444e:	6858      	ldr	r0, [r3, #4]
   14450:	e47b      	b.n	13d4a <pdn_interface_pdn_id_get+0x96>
   14452:	2005      	movs	r0, #5
   14454:	f7fb f9c6 	bl	f7e4 <bsd_os_errno_set>
   14458:	f854 3026 	ldr.w	r3, [r4, r6, lsl #2]
   1445c:	6858      	ldr	r0, [r3, #4]
   1445e:	e474      	b.n	13d4a <pdn_interface_pdn_id_get+0x96>
   14460:	0001c4a8 	.word	0x0001c4a8
   14464:	200206b0 	.word	0x200206b0

00014468 <linked_list_init>:
   14468:	b128      	cbz	r0, 14476 <linked_list_init+0xe>
   1446a:	2300      	movs	r3, #0
   1446c:	6003      	str	r3, [r0, #0]
   1446e:	e9c0 3301 	strd	r3, r3, [r0, #4]
   14472:	4618      	mov	r0, r3
   14474:	4770      	bx	lr
   14476:	2007      	movs	r0, #7
   14478:	4770      	bx	lr
   1447a:	bf00      	nop

0001447c <linked_list_push>:
   1447c:	6802      	ldr	r2, [r0, #0]
   1447e:	4603      	mov	r3, r0
   14480:	3201      	adds	r2, #1
   14482:	d00e      	beq.n	144a2 <linked_list_push+0x26>
   14484:	2200      	movs	r2, #0
   14486:	600a      	str	r2, [r1, #0]
   14488:	6802      	ldr	r2, [r0, #0]
   1448a:	b13a      	cbz	r2, 1449c <linked_list_push+0x20>
   1448c:	6882      	ldr	r2, [r0, #8]
   1448e:	6011      	str	r1, [r2, #0]
   14490:	6081      	str	r1, [r0, #8]
   14492:	681a      	ldr	r2, [r3, #0]
   14494:	2000      	movs	r0, #0
   14496:	3201      	adds	r2, #1
   14498:	601a      	str	r2, [r3, #0]
   1449a:	4770      	bx	lr
   1449c:	e9c0 1101 	strd	r1, r1, [r0, #4]
   144a0:	e7f7      	b.n	14492 <linked_list_push+0x16>
   144a2:	2004      	movs	r0, #4
   144a4:	4770      	bx	lr
   144a6:	bf00      	nop

000144a8 <linked_list_pop>:
   144a8:	4603      	mov	r3, r0
   144aa:	6800      	ldr	r0, [r0, #0]
   144ac:	b128      	cbz	r0, 144ba <linked_list_pop+0x12>
   144ae:	6858      	ldr	r0, [r3, #4]
   144b0:	681a      	ldr	r2, [r3, #0]
   144b2:	6801      	ldr	r1, [r0, #0]
   144b4:	3a01      	subs	r2, #1
   144b6:	6059      	str	r1, [r3, #4]
   144b8:	601a      	str	r2, [r3, #0]
   144ba:	4770      	bx	lr

000144bc <linked_list_peek>:
   144bc:	6803      	ldr	r3, [r0, #0]
   144be:	b10b      	cbz	r3, 144c4 <linked_list_peek+0x8>
   144c0:	6840      	ldr	r0, [r0, #4]
   144c2:	4770      	bx	lr
   144c4:	4618      	mov	r0, r3
   144c6:	4770      	bx	lr

000144c8 <linked_list_size_get>:
   144c8:	6800      	ldr	r0, [r0, #0]
   144ca:	4770      	bx	lr

000144cc <linked_list_get_next>:
   144cc:	6800      	ldr	r0, [r0, #0]
   144ce:	4770      	bx	lr

000144d0 <nrf_socket>:
   144d0:	b570      	push	{r4, r5, r6, lr}
   144d2:	4604      	mov	r4, r0
   144d4:	460d      	mov	r5, r1
   144d6:	4616      	mov	r6, r2
   144d8:	f7fd fdb4 	bl	12044 <bsd_platform_af_method_table_get>
   144dc:	b130      	cbz	r0, 144ec <nrf_socket+0x1c>
   144de:	6803      	ldr	r3, [r0, #0]
   144e0:	4632      	mov	r2, r6
   144e2:	4629      	mov	r1, r5
   144e4:	4620      	mov	r0, r4
   144e6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   144ea:	4718      	bx	r3
   144ec:	f04f 30ff 	mov.w	r0, #4294967295
   144f0:	bd70      	pop	{r4, r5, r6, pc}
   144f2:	bf00      	nop

000144f4 <nrf_close>:
   144f4:	b510      	push	{r4, lr}
   144f6:	4604      	mov	r4, r0
   144f8:	f7fd fdfc 	bl	120f4 <bsd_platform_fd_method_table_get>
   144fc:	b120      	cbz	r0, 14508 <nrf_close+0x14>
   144fe:	6843      	ldr	r3, [r0, #4]
   14500:	4620      	mov	r0, r4
   14502:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   14506:	4718      	bx	r3
   14508:	f04f 30ff 	mov.w	r0, #4294967295
   1450c:	bd10      	pop	{r4, pc}
   1450e:	bf00      	nop

00014510 <nrf_sendto>:
   14510:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   14514:	460d      	mov	r5, r1
   14516:	e9dd 8908 	ldrd	r8, r9, [sp, #32]
   1451a:	4616      	mov	r6, r2
   1451c:	461f      	mov	r7, r3
   1451e:	4604      	mov	r4, r0
   14520:	f7fd fde8 	bl	120f4 <bsd_platform_fd_method_table_get>
   14524:	b158      	cbz	r0, 1453e <nrf_sendto+0x2e>
   14526:	e9cd 8908 	strd	r8, r9, [sp, #32]
   1452a:	f8d0 e008 	ldr.w	lr, [r0, #8]
   1452e:	463b      	mov	r3, r7
   14530:	4632      	mov	r2, r6
   14532:	4629      	mov	r1, r5
   14534:	4620      	mov	r0, r4
   14536:	46f4      	mov	ip, lr
   14538:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1453c:	4760      	bx	ip
   1453e:	f04f 30ff 	mov.w	r0, #4294967295
   14542:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   14546:	bf00      	nop

00014548 <nrf_send>:
   14548:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1454c:	b082      	sub	sp, #8
   1454e:	460e      	mov	r6, r1
   14550:	4617      	mov	r7, r2
   14552:	4698      	mov	r8, r3
   14554:	4605      	mov	r5, r0
   14556:	f7fd fdcd 	bl	120f4 <bsd_platform_fd_method_table_get>
   1455a:	b160      	cbz	r0, 14576 <nrf_send+0x2e>
   1455c:	4604      	mov	r4, r0
   1455e:	2000      	movs	r0, #0
   14560:	e9cd 0000 	strd	r0, r0, [sp]
   14564:	4643      	mov	r3, r8
   14566:	463a      	mov	r2, r7
   14568:	4631      	mov	r1, r6
   1456a:	4628      	mov	r0, r5
   1456c:	68a4      	ldr	r4, [r4, #8]
   1456e:	47a0      	blx	r4
   14570:	b002      	add	sp, #8
   14572:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   14576:	f04f 30ff 	mov.w	r0, #4294967295
   1457a:	e7f9      	b.n	14570 <nrf_send+0x28>

0001457c <nrf_recvfrom>:
   1457c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   14580:	460d      	mov	r5, r1
   14582:	e9dd 8908 	ldrd	r8, r9, [sp, #32]
   14586:	4616      	mov	r6, r2
   14588:	461f      	mov	r7, r3
   1458a:	4604      	mov	r4, r0
   1458c:	f7fd fdb2 	bl	120f4 <bsd_platform_fd_method_table_get>
   14590:	b158      	cbz	r0, 145aa <nrf_recvfrom+0x2e>
   14592:	e9cd 8908 	strd	r8, r9, [sp, #32]
   14596:	f8d0 e00c 	ldr.w	lr, [r0, #12]
   1459a:	463b      	mov	r3, r7
   1459c:	4632      	mov	r2, r6
   1459e:	4629      	mov	r1, r5
   145a0:	4620      	mov	r0, r4
   145a2:	46f4      	mov	ip, lr
   145a4:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   145a8:	4760      	bx	ip
   145aa:	f04f 30ff 	mov.w	r0, #4294967295
   145ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   145b2:	bf00      	nop

000145b4 <nrf_recv>:
   145b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   145b8:	b082      	sub	sp, #8
   145ba:	460e      	mov	r6, r1
   145bc:	4617      	mov	r7, r2
   145be:	4698      	mov	r8, r3
   145c0:	4605      	mov	r5, r0
   145c2:	f7fd fd97 	bl	120f4 <bsd_platform_fd_method_table_get>
   145c6:	b160      	cbz	r0, 145e2 <nrf_recv+0x2e>
   145c8:	4604      	mov	r4, r0
   145ca:	2000      	movs	r0, #0
   145cc:	e9cd 0000 	strd	r0, r0, [sp]
   145d0:	4643      	mov	r3, r8
   145d2:	463a      	mov	r2, r7
   145d4:	4631      	mov	r1, r6
   145d6:	4628      	mov	r0, r5
   145d8:	68e4      	ldr	r4, [r4, #12]
   145da:	47a0      	blx	r4
   145dc:	b002      	add	sp, #8
   145de:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   145e2:	f04f 30ff 	mov.w	r0, #4294967295
   145e6:	e7f9      	b.n	145dc <nrf_recv+0x28>

000145e8 <nrf_connect>:
   145e8:	b570      	push	{r4, r5, r6, lr}
   145ea:	460d      	mov	r5, r1
   145ec:	4616      	mov	r6, r2
   145ee:	4604      	mov	r4, r0
   145f0:	f7fd fd80 	bl	120f4 <bsd_platform_fd_method_table_get>
   145f4:	b130      	cbz	r0, 14604 <nrf_connect+0x1c>
   145f6:	6943      	ldr	r3, [r0, #20]
   145f8:	4632      	mov	r2, r6
   145fa:	4629      	mov	r1, r5
   145fc:	4620      	mov	r0, r4
   145fe:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   14602:	4718      	bx	r3
   14604:	f04f 30ff 	mov.w	r0, #4294967295
   14608:	bd70      	pop	{r4, r5, r6, pc}
   1460a:	bf00      	nop

0001460c <nrf_listen>:
   1460c:	b570      	push	{r4, r5, r6, lr}
   1460e:	460d      	mov	r5, r1
   14610:	4604      	mov	r4, r0
   14612:	f7fd fd6f 	bl	120f4 <bsd_platform_fd_method_table_get>
   14616:	b128      	cbz	r0, 14624 <nrf_listen+0x18>
   14618:	6983      	ldr	r3, [r0, #24]
   1461a:	4629      	mov	r1, r5
   1461c:	4620      	mov	r0, r4
   1461e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   14622:	4718      	bx	r3
   14624:	f04f 30ff 	mov.w	r0, #4294967295
   14628:	bd70      	pop	{r4, r5, r6, pc}
   1462a:	bf00      	nop

0001462c <nrf_accept>:
   1462c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   14630:	460d      	mov	r5, r1
   14632:	4616      	mov	r6, r2
   14634:	4604      	mov	r4, r0
   14636:	f7fd fd5d 	bl	120f4 <bsd_platform_fd_method_table_get>
   1463a:	b140      	cbz	r0, 1464e <nrf_accept+0x22>
   1463c:	69c7      	ldr	r7, [r0, #28]
   1463e:	4632      	mov	r2, r6
   14640:	4629      	mov	r1, r5
   14642:	4620      	mov	r0, r4
   14644:	46bc      	mov	ip, r7
   14646:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   1464a:	2300      	movs	r3, #0
   1464c:	4760      	bx	ip
   1464e:	f04f 30ff 	mov.w	r0, #4294967295
   14652:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   14656:	bf00      	nop

00014658 <nrf_bind>:
   14658:	b570      	push	{r4, r5, r6, lr}
   1465a:	460d      	mov	r5, r1
   1465c:	4616      	mov	r6, r2
   1465e:	4604      	mov	r4, r0
   14660:	f7fd fd48 	bl	120f4 <bsd_platform_fd_method_table_get>
   14664:	b130      	cbz	r0, 14674 <nrf_bind+0x1c>
   14666:	6903      	ldr	r3, [r0, #16]
   14668:	4632      	mov	r2, r6
   1466a:	4629      	mov	r1, r5
   1466c:	4620      	mov	r0, r4
   1466e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   14672:	4718      	bx	r3
   14674:	f04f 30ff 	mov.w	r0, #4294967295
   14678:	bd70      	pop	{r4, r5, r6, pc}
   1467a:	bf00      	nop

0001467c <nrf_setsockopt>:
   1467c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   14680:	f8dd 8018 	ldr.w	r8, [sp, #24]
   14684:	460d      	mov	r5, r1
   14686:	4616      	mov	r6, r2
   14688:	461f      	mov	r7, r3
   1468a:	4604      	mov	r4, r0
   1468c:	f7fd fd32 	bl	120f4 <bsd_platform_fd_method_table_get>
   14690:	b158      	cbz	r0, 146aa <nrf_setsockopt+0x2e>
   14692:	f8cd 8018 	str.w	r8, [sp, #24]
   14696:	f8d0 e020 	ldr.w	lr, [r0, #32]
   1469a:	463b      	mov	r3, r7
   1469c:	4632      	mov	r2, r6
   1469e:	4629      	mov	r1, r5
   146a0:	4620      	mov	r0, r4
   146a2:	46f4      	mov	ip, lr
   146a4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   146a8:	4760      	bx	ip
   146aa:	f04f 30ff 	mov.w	r0, #4294967295
   146ae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   146b2:	bf00      	nop

000146b4 <nrf_getsockopt>:
   146b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   146b8:	f8dd 8018 	ldr.w	r8, [sp, #24]
   146bc:	460d      	mov	r5, r1
   146be:	4616      	mov	r6, r2
   146c0:	461f      	mov	r7, r3
   146c2:	4604      	mov	r4, r0
   146c4:	f7fd fd16 	bl	120f4 <bsd_platform_fd_method_table_get>
   146c8:	b158      	cbz	r0, 146e2 <nrf_getsockopt+0x2e>
   146ca:	f8cd 8018 	str.w	r8, [sp, #24]
   146ce:	f8d0 e024 	ldr.w	lr, [r0, #36]	; 0x24
   146d2:	463b      	mov	r3, r7
   146d4:	4632      	mov	r2, r6
   146d6:	4629      	mov	r1, r5
   146d8:	4620      	mov	r0, r4
   146da:	46f4      	mov	ip, lr
   146dc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   146e0:	4760      	bx	ip
   146e2:	f04f 30ff 	mov.w	r0, #4294967295
   146e6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   146ea:	bf00      	nop

000146ec <nrf_getaddrinfo>:
   146ec:	f7fd bd78 	b.w	121e0 <bsd_platform_getaddrinfo>

000146f0 <nrf_freeaddrinfo>:
   146f0:	f7fd bd78 	b.w	121e4 <bsd_platform_freeaddrinfo>

000146f4 <nrf_poll>:
   146f4:	f7fd bd78 	b.w	121e8 <bsd_platform_poll>

000146f8 <nrf_fcntl>:
   146f8:	f7fd bdd0 	b.w	1229c <bsd_platform_fcntl>

000146fc <at_client_evt_handler>:
   146fc:	b120      	cbz	r0, 14708 <at_client_evt_handler+0xc>
   146fe:	f850 1b08 	ldr.w	r1, [r0], #8
   14702:	0c09      	lsrs	r1, r1, #16
   14704:	f7fb bf9e 	b.w	10644 <rpc_at_event_handler>
   14708:	4770      	bx	lr
   1470a:	bf00      	nop

0001470c <rpc_at_client_init>:
   1470c:	4801      	ldr	r0, [pc, #4]	; (14714 <rpc_at_client_init+0x8>)
   1470e:	f001 be47 	b.w	163a0 <rpc_client_register>
   14712:	bf00      	nop
   14714:	0001c4bc 	.word	0x0001c4bc

00014718 <rpc_at_client_request_alloc>:
   14718:	b180      	cbz	r0, 1473c <rpc_at_client_request_alloc+0x24>
   1471a:	2300      	movs	r3, #0
   1471c:	b510      	push	{r4, lr}
   1471e:	b082      	sub	sp, #8
   14720:	aa02      	add	r2, sp, #8
   14722:	4604      	mov	r4, r0
   14724:	f842 3d04 	str.w	r3, [r2, #-4]!
   14728:	2003      	movs	r0, #3
   1472a:	f002 f871 	bl	16810 <rpc_message_alloc>
   1472e:	b918      	cbnz	r0, 14738 <rpc_at_client_request_alloc+0x20>
   14730:	9b01      	ldr	r3, [sp, #4]
   14732:	b10b      	cbz	r3, 14738 <rpc_at_client_request_alloc+0x20>
   14734:	3308      	adds	r3, #8
   14736:	6023      	str	r3, [r4, #0]
   14738:	b002      	add	sp, #8
   1473a:	bd10      	pop	{r4, pc}
   1473c:	200e      	movs	r0, #14
   1473e:	4770      	bx	lr

00014740 <rpc_at_client_request_send>:
   14740:	b150      	cbz	r0, 14758 <rpc_at_client_request_send+0x18>
   14742:	4603      	mov	r3, r0
   14744:	f830 2c08 	ldrh.w	r2, [r0, #-8]
   14748:	2003      	movs	r0, #3
   1474a:	ea42 4101 	orr.w	r1, r2, r1, lsl #16
   1474e:	f843 1d08 	str.w	r1, [r3, #-8]!
   14752:	4619      	mov	r1, r3
   14754:	f002 b844 	b.w	167e0 <rpc_message_send>
   14758:	200e      	movs	r0, #14
   1475a:	4770      	bx	lr

0001475c <rpc_at_client_message_free>:
   1475c:	b120      	cbz	r0, 14768 <rpc_at_client_message_free+0xc>
   1475e:	f1a0 0108 	sub.w	r1, r0, #8
   14762:	2003      	movs	r0, #3
   14764:	f002 b886 	b.w	16874 <rpc_message_free>
   14768:	200e      	movs	r0, #14
   1476a:	4770      	bx	lr

0001476c <rpc_at_client_data_free>:
   1476c:	b118      	cbz	r0, 14776 <rpc_at_client_data_free+0xa>
   1476e:	4601      	mov	r1, r0
   14770:	2003      	movs	r0, #3
   14772:	f002 b991 	b.w	16a98 <rpc_message_data_free>
   14776:	200e      	movs	r0, #14
   14778:	4770      	bx	lr
   1477a:	bf00      	nop

0001477c <ip_recvd_packet_free_cb>:
   1477c:	b510      	push	{r4, lr}
   1477e:	4604      	mov	r4, r0
   14780:	6800      	ldr	r0, [r0, #0]
   14782:	f7fc fc1d 	bl	10fc0 <rpc_ip_client_data_free>
   14786:	68a0      	ldr	r0, [r4, #8]
   14788:	b118      	cbz	r0, 14792 <ip_recvd_packet_free_cb+0x16>
   1478a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1478e:	f7fc bbb7 	b.w	10f00 <nrf_free>
   14792:	bd10      	pop	{r4, pc}

00014794 <rpc_error_to_nrf_bsd_error>:
   14794:	2810      	cmp	r0, #16
   14796:	bf9a      	itte	ls
   14798:	4b02      	ldrls	r3, [pc, #8]	; (147a4 <rpc_error_to_nrf_bsd_error+0x10>)
   1479a:	f853 0020 	ldrls.w	r0, [r3, r0, lsl #2]
   1479e:	202d      	movhi	r0, #45	; 0x2d
   147a0:	4770      	bx	lr
   147a2:	bf00      	nop
   147a4:	0001c4cc 	.word	0x0001c4cc

000147a8 <ip_interface_request_create>:
   147a8:	b570      	push	{r4, r5, r6, lr}
   147aa:	2500      	movs	r5, #0
   147ac:	b082      	sub	sp, #8
   147ae:	ac02      	add	r4, sp, #8
   147b0:	f844 5d04 	str.w	r5, [r4, #-4]!
   147b4:	4606      	mov	r6, r0
   147b6:	460d      	mov	r5, r1
   147b8:	4620      	mov	r0, r4
   147ba:	4619      	mov	r1, r3
   147bc:	4614      	mov	r4, r2
   147be:	f7fc fbcd 	bl	10f5c <rpc_ip_client_request_alloc>
   147c2:	b960      	cbnz	r0, 147de <ip_interface_request_create+0x36>
   147c4:	9b01      	ldr	r3, [sp, #4]
   147c6:	2208      	movs	r2, #8
   147c8:	7258      	strb	r0, [r3, #9]
   147ca:	7298      	strb	r0, [r3, #10]
   147cc:	72d8      	strb	r0, [r3, #11]
   147ce:	4618      	mov	r0, r3
   147d0:	ea44 4406 	orr.w	r4, r4, r6, lsl #16
   147d4:	60dc      	str	r4, [r3, #12]
   147d6:	611d      	str	r5, [r3, #16]
   147d8:	721a      	strb	r2, [r3, #8]
   147da:	b002      	add	sp, #8
   147dc:	bd70      	pop	{r4, r5, r6, pc}
   147de:	9b01      	ldr	r3, [sp, #4]
   147e0:	4618      	mov	r0, r3
   147e2:	b002      	add	sp, #8
   147e4:	bd70      	pop	{r4, r5, r6, pc}
   147e6:	bf00      	nop

000147e8 <ip_interface_request_send>:
   147e8:	b570      	push	{r4, r5, r6, lr}
   147ea:	460c      	mov	r4, r1
   147ec:	4605      	mov	r5, r0
   147ee:	4611      	mov	r1, r2
   147f0:	4620      	mov	r0, r4
   147f2:	461e      	mov	r6, r3
   147f4:	f7fc fbc6 	bl	10f84 <rpc_ip_client_request_send>
   147f8:	b900      	cbnz	r0, 147fc <ip_interface_request_send+0x14>
   147fa:	bd70      	pop	{r4, r5, r6, pc}
   147fc:	6820      	ldr	r0, [r4, #0]
   147fe:	b108      	cbz	r0, 14804 <ip_interface_request_send+0x1c>
   14800:	f7fc fbde 	bl	10fc0 <rpc_ip_client_data_free>
   14804:	4620      	mov	r0, r4
   14806:	f7fc fbd3 	bl	10fb0 <rpc_ip_client_message_free>
   1480a:	602e      	str	r6, [r5, #0]
   1480c:	2023      	movs	r0, #35	; 0x23
   1480e:	bd70      	pop	{r4, r5, r6, pc}

00014810 <ip_interface_wait>:
   14810:	b538      	push	{r3, r4, r5, lr}
   14812:	4605      	mov	r5, r0
   14814:	f001 fc14 	bl	16040 <interface_socket_wait>
   14818:	4604      	mov	r4, r0
   1481a:	b108      	cbz	r0, 14820 <ip_interface_wait+0x10>
   1481c:	4620      	mov	r0, r4
   1481e:	bd38      	pop	{r3, r4, r5, pc}
   14820:	4628      	mov	r0, r5
   14822:	f001 fc81 	bl	16128 <interface_socket_from_handle_get>
   14826:	2800      	cmp	r0, #0
   14828:	d0f8      	beq.n	1481c <ip_interface_wait+0xc>
   1482a:	6844      	ldr	r4, [r0, #4]
   1482c:	2c00      	cmp	r4, #0
   1482e:	d0f5      	beq.n	1481c <ip_interface_wait+0xc>
   14830:	2300      	movs	r3, #0
   14832:	6043      	str	r3, [r0, #4]
   14834:	4620      	mov	r0, r4
   14836:	bd38      	pop	{r3, r4, r5, pc}

00014838 <ip_interface_init>:
   14838:	b538      	push	{r3, r4, r5, lr}
   1483a:	2300      	movs	r3, #0
   1483c:	4d07      	ldr	r5, [pc, #28]	; (1485c <ip_interface_init+0x24>)
   1483e:	4c08      	ldr	r4, [pc, #32]	; (14860 <ip_interface_init+0x28>)
   14840:	4619      	mov	r1, r3
   14842:	2224      	movs	r2, #36	; 0x24
   14844:	4807      	ldr	r0, [pc, #28]	; (14864 <ip_interface_init+0x2c>)
   14846:	602b      	str	r3, [r5, #0]
   14848:	6023      	str	r3, [r4, #0]
   1484a:	f006 f816 	bl	1a87a <memset>
   1484e:	f7fc fb7f 	bl	10f50 <rpc_ip_client_init>
   14852:	3000      	adds	r0, #0
   14854:	bf18      	it	ne
   14856:	2001      	movne	r0, #1
   14858:	4240      	negs	r0, r0
   1485a:	bd38      	pop	{r3, r4, r5, pc}
   1485c:	200207e8 	.word	0x200207e8
   14860:	200207e4 	.word	0x200207e4
   14864:	200207f0 	.word	0x200207f0

00014868 <ip_interface_open>:
   14868:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1486c:	4606      	mov	r6, r0
   1486e:	2000      	movs	r0, #0
   14870:	f026 0308 	bic.w	r3, r6, #8
   14874:	b082      	sub	sp, #8
   14876:	2b02      	cmp	r3, #2
   14878:	460c      	mov	r4, r1
   1487a:	4617      	mov	r7, r2
   1487c:	9000      	str	r0, [sp, #0]
   1487e:	d002      	beq.n	14886 <ip_interface_open+0x1e>
   14880:	2e05      	cmp	r6, #5
   14882:	f040 8085 	bne.w	14990 <ip_interface_open+0x128>
   14886:	1e63      	subs	r3, r4, #1
   14888:	2b02      	cmp	r3, #2
   1488a:	f200 8097 	bhi.w	149bc <ip_interface_open+0x154>
   1488e:	2f00      	cmp	r7, #0
   14890:	d154      	bne.n	1493c <ip_interface_open+0xd4>
   14892:	2c01      	cmp	r4, #1
   14894:	d067      	beq.n	14966 <ip_interface_open+0xfe>
   14896:	2c03      	cmp	r4, #3
   14898:	bf18      	it	ne
   1489a:	2702      	movne	r7, #2
   1489c:	4a4a      	ldr	r2, [pc, #296]	; (149c8 <ip_interface_open+0x160>)
   1489e:	4621      	mov	r1, r4
   148a0:	4668      	mov	r0, sp
   148a2:	f001 fb1b 	bl	15edc <interface_socket_allocate>
   148a6:	9b00      	ldr	r3, [sp, #0]
   148a8:	4680      	mov	r8, r0
   148aa:	2b00      	cmp	r3, #0
   148ac:	d059      	beq.n	14962 <ip_interface_open+0xfa>
   148ae:	2100      	movs	r1, #0
   148b0:	a802      	add	r0, sp, #8
   148b2:	f840 1d04 	str.w	r1, [r0, #-4]!
   148b6:	e9c3 6403 	strd	r6, r4, [r3, #12]
   148ba:	615f      	str	r7, [r3, #20]
   148bc:	f7fc fb4e 	bl	10f5c <rpc_ip_client_request_alloc>
   148c0:	2800      	cmp	r0, #0
   148c2:	d14b      	bne.n	1495c <ip_interface_open+0xf4>
   148c4:	f247 0201 	movw	r2, #28673	; 0x7001
   148c8:	f04f 33ff 	mov.w	r3, #4294967295
   148cc:	2108      	movs	r1, #8
   148ce:	9d01      	ldr	r5, [sp, #4]
   148d0:	ea42 4208 	orr.w	r2, r2, r8, lsl #16
   148d4:	60ea      	str	r2, [r5, #12]
   148d6:	7268      	strb	r0, [r5, #9]
   148d8:	72a8      	strb	r0, [r5, #10]
   148da:	72e8      	strb	r0, [r5, #11]
   148dc:	7229      	strb	r1, [r5, #8]
   148de:	742b      	strb	r3, [r5, #16]
   148e0:	746b      	strb	r3, [r5, #17]
   148e2:	74ab      	strb	r3, [r5, #18]
   148e4:	74eb      	strb	r3, [r5, #19]
   148e6:	68ab      	ldr	r3, [r5, #8]
   148e8:	2e05      	cmp	r6, #5
   148ea:	f103 030c 	add.w	r3, r3, #12
   148ee:	60ab      	str	r3, [r5, #8]
   148f0:	d003      	beq.n	148fa <ip_interface_open+0x92>
   148f2:	2e0a      	cmp	r6, #10
   148f4:	bf14      	ite	ne
   148f6:	2601      	movne	r6, #1
   148f8:	2602      	moveq	r6, #2
   148fa:	616e      	str	r6, [r5, #20]
   148fc:	61ef      	str	r7, [r5, #28]
   148fe:	61ac      	str	r4, [r5, #24]
   14900:	f247 0101 	movw	r1, #28673	; 0x7001
   14904:	4628      	mov	r0, r5
   14906:	9f00      	ldr	r7, [sp, #0]
   14908:	f7fc fb3c 	bl	10f84 <rpc_ip_client_request_send>
   1490c:	4606      	mov	r6, r0
   1490e:	b360      	cbz	r0, 1496a <ip_interface_open+0x102>
   14910:	6828      	ldr	r0, [r5, #0]
   14912:	b108      	cbz	r0, 14918 <ip_interface_open+0xb0>
   14914:	f7fc fb54 	bl	10fc0 <rpc_ip_client_data_free>
   14918:	4628      	mov	r0, r5
   1491a:	f7fc fb49 	bl	10fb0 <rpc_ip_client_message_free>
   1491e:	2301      	movs	r3, #1
   14920:	2523      	movs	r5, #35	; 0x23
   14922:	603b      	str	r3, [r7, #0]
   14924:	4640      	mov	r0, r8
   14926:	f001 fb3d 	bl	15fa4 <interface_socket_free>
   1492a:	4628      	mov	r0, r5
   1492c:	f7fa ff5a 	bl	f7e4 <bsd_os_errno_set>
   14930:	f04f 38ff 	mov.w	r8, #4294967295
   14934:	4640      	mov	r0, r8
   14936:	b002      	add	sp, #8
   14938:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1493c:	2c01      	cmp	r4, #1
   1493e:	d009      	beq.n	14954 <ip_interface_open+0xec>
   14940:	2c02      	cmp	r4, #2
   14942:	d109      	bne.n	14958 <ip_interface_open+0xf0>
   14944:	2f02      	cmp	r7, #2
   14946:	d0a9      	beq.n	1489c <ip_interface_open+0x34>
   14948:	2029      	movs	r0, #41	; 0x29
   1494a:	f7fa ff4b 	bl	f7e4 <bsd_os_errno_set>
   1494e:	f04f 38ff 	mov.w	r8, #4294967295
   14952:	e7ef      	b.n	14934 <ip_interface_open+0xcc>
   14954:	2f01      	cmp	r7, #1
   14956:	d1f7      	bne.n	14948 <ip_interface_open+0xe0>
   14958:	2702      	movs	r7, #2
   1495a:	e79f      	b.n	1489c <ip_interface_open+0x34>
   1495c:	9d01      	ldr	r5, [sp, #4]
   1495e:	2d00      	cmp	r5, #0
   14960:	d1c1      	bne.n	148e6 <ip_interface_open+0x7e>
   14962:	250c      	movs	r5, #12
   14964:	e7de      	b.n	14924 <ip_interface_open+0xbc>
   14966:	4627      	mov	r7, r4
   14968:	e798      	b.n	1489c <ip_interface_open+0x34>
   1496a:	f04f 33ff 	mov.w	r3, #4294967295
   1496e:	f64f 72ff 	movw	r2, #65535	; 0xffff
   14972:	2102      	movs	r1, #2
   14974:	4640      	mov	r0, r8
   14976:	f001 fb63 	bl	16040 <interface_socket_wait>
   1497a:	4605      	mov	r5, r0
   1497c:	2800      	cmp	r0, #0
   1497e:	d1d1      	bne.n	14924 <ip_interface_open+0xbc>
   14980:	4640      	mov	r0, r8
   14982:	f001 fbd1 	bl	16128 <interface_socket_from_handle_get>
   14986:	b148      	cbz	r0, 1499c <ip_interface_open+0x134>
   14988:	6845      	ldr	r5, [r0, #4]
   1498a:	b13d      	cbz	r5, 1499c <ip_interface_open+0x134>
   1498c:	6046      	str	r6, [r0, #4]
   1498e:	e7c9      	b.n	14924 <ip_interface_open+0xbc>
   14990:	202f      	movs	r0, #47	; 0x2f
   14992:	f7fa ff27 	bl	f7e4 <bsd_os_errno_set>
   14996:	f04f 38ff 	mov.w	r8, #4294967295
   1499a:	e7cb      	b.n	14934 <ip_interface_open+0xcc>
   1499c:	3c02      	subs	r4, #2
   1499e:	2c01      	cmp	r4, #1
   149a0:	d8c8      	bhi.n	14934 <ip_interface_open+0xcc>
   149a2:	4640      	mov	r0, r8
   149a4:	9b00      	ldr	r3, [sp, #0]
   149a6:	681a      	ldr	r2, [r3, #0]
   149a8:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
   149ac:	601a      	str	r2, [r3, #0]
   149ae:	681a      	ldr	r2, [r3, #0]
   149b0:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
   149b4:	601a      	str	r2, [r3, #0]
   149b6:	b002      	add	sp, #8
   149b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   149bc:	2016      	movs	r0, #22
   149be:	f7fa ff11 	bl	f7e4 <bsd_os_errno_set>
   149c2:	f04f 38ff 	mov.w	r8, #4294967295
   149c6:	e7b5      	b.n	14934 <ip_interface_open+0xcc>
   149c8:	0001477d 	.word	0x0001477d

000149cc <ip_interface_close>:
   149cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   149d0:	b082      	sub	sp, #8
   149d2:	4606      	mov	r6, r0
   149d4:	f001 fba8 	bl	16128 <interface_socket_from_handle_get>
   149d8:	2800      	cmp	r0, #0
   149da:	d063      	beq.n	14aa4 <ip_interface_close+0xd8>
   149dc:	4604      	mov	r4, r0
   149de:	2100      	movs	r1, #0
   149e0:	a802      	add	r0, sp, #8
   149e2:	6827      	ldr	r7, [r4, #0]
   149e4:	f840 1d04 	str.w	r1, [r0, #-4]!
   149e8:	f8d4 8018 	ldr.w	r8, [r4, #24]
   149ec:	f7fc fab6 	bl	10f5c <rpc_ip_client_request_alloc>
   149f0:	2800      	cmp	r0, #0
   149f2:	d13a      	bne.n	14a6a <ip_interface_close+0x9e>
   149f4:	f247 0309 	movw	r3, #28681	; 0x7009
   149f8:	2208      	movs	r2, #8
   149fa:	9d01      	ldr	r5, [sp, #4]
   149fc:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
   14a00:	60eb      	str	r3, [r5, #12]
   14a02:	f8c5 8010 	str.w	r8, [r5, #16]
   14a06:	7268      	strb	r0, [r5, #9]
   14a08:	72a8      	strb	r0, [r5, #10]
   14a0a:	72e8      	strb	r0, [r5, #11]
   14a0c:	722a      	strb	r2, [r5, #8]
   14a0e:	6823      	ldr	r3, [r4, #0]
   14a10:	f247 0109 	movw	r1, #28681	; 0x7009
   14a14:	0c1b      	lsrs	r3, r3, #16
   14a16:	041b      	lsls	r3, r3, #16
   14a18:	f043 030d 	orr.w	r3, r3, #13
   14a1c:	6023      	str	r3, [r4, #0]
   14a1e:	6823      	ldr	r3, [r4, #0]
   14a20:	4628      	mov	r0, r5
   14a22:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
   14a26:	6023      	str	r3, [r4, #0]
   14a28:	6823      	ldr	r3, [r4, #0]
   14a2a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
   14a2e:	6023      	str	r3, [r4, #0]
   14a30:	f7fc faa8 	bl	10f84 <rpc_ip_client_request_send>
   14a34:	bb40      	cbnz	r0, 14a88 <ip_interface_close+0xbc>
   14a36:	f04f 33ff 	mov.w	r3, #4294967295
   14a3a:	f64f 72ff 	movw	r2, #65535	; 0xffff
   14a3e:	210e      	movs	r1, #14
   14a40:	4630      	mov	r0, r6
   14a42:	f001 fafd 	bl	16040 <interface_socket_wait>
   14a46:	4604      	mov	r4, r0
   14a48:	b1a0      	cbz	r0, 14a74 <ip_interface_close+0xa8>
   14a4a:	4c17      	ldr	r4, [pc, #92]	; (14aa8 <ip_interface_close+0xdc>)
   14a4c:	f854 0026 	ldr.w	r0, [r4, r6, lsl #2]
   14a50:	b120      	cbz	r0, 14a5c <ip_interface_close+0x90>
   14a52:	f7fc faad 	bl	10fb0 <rpc_ip_client_message_free>
   14a56:	2300      	movs	r3, #0
   14a58:	f844 3026 	str.w	r3, [r4, r6, lsl #2]
   14a5c:	4630      	mov	r0, r6
   14a5e:	f001 faa1 	bl	15fa4 <interface_socket_free>
   14a62:	2000      	movs	r0, #0
   14a64:	b002      	add	sp, #8
   14a66:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   14a6a:	9d01      	ldr	r5, [sp, #4]
   14a6c:	200c      	movs	r0, #12
   14a6e:	2d00      	cmp	r5, #0
   14a70:	d1cd      	bne.n	14a0e <ip_interface_close+0x42>
   14a72:	e012      	b.n	14a9a <ip_interface_close+0xce>
   14a74:	4630      	mov	r0, r6
   14a76:	f001 fb57 	bl	16128 <interface_socket_from_handle_get>
   14a7a:	2800      	cmp	r0, #0
   14a7c:	d0e5      	beq.n	14a4a <ip_interface_close+0x7e>
   14a7e:	6843      	ldr	r3, [r0, #4]
   14a80:	2b00      	cmp	r3, #0
   14a82:	d0e2      	beq.n	14a4a <ip_interface_close+0x7e>
   14a84:	6044      	str	r4, [r0, #4]
   14a86:	e7e0      	b.n	14a4a <ip_interface_close+0x7e>
   14a88:	6828      	ldr	r0, [r5, #0]
   14a8a:	b108      	cbz	r0, 14a90 <ip_interface_close+0xc4>
   14a8c:	f7fc fa98 	bl	10fc0 <rpc_ip_client_data_free>
   14a90:	4628      	mov	r0, r5
   14a92:	f7fc fa8d 	bl	10fb0 <rpc_ip_client_message_free>
   14a96:	2023      	movs	r0, #35	; 0x23
   14a98:	6027      	str	r7, [r4, #0]
   14a9a:	f7fa fea3 	bl	f7e4 <bsd_os_errno_set>
   14a9e:	f04f 30ff 	mov.w	r0, #4294967295
   14aa2:	e7df      	b.n	14a64 <ip_interface_close+0x98>
   14aa4:	2009      	movs	r0, #9
   14aa6:	e7f8      	b.n	14a9a <ip_interface_close+0xce>
   14aa8:	200207f0 	.word	0x200207f0

00014aac <ip_interface_sendto>:
   14aac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14ab0:	2400      	movs	r4, #0
   14ab2:	b089      	sub	sp, #36	; 0x24
   14ab4:	9102      	str	r1, [sp, #8]
   14ab6:	4615      	mov	r5, r2
   14ab8:	4699      	mov	r9, r3
   14aba:	9407      	str	r4, [sp, #28]
   14abc:	4607      	mov	r7, r0
   14abe:	9e12      	ldr	r6, [sp, #72]	; 0x48
   14ac0:	f001 fb32 	bl	16128 <interface_socket_from_handle_get>
   14ac4:	2800      	cmp	r0, #0
   14ac6:	f000 815f 	beq.w	14d88 <ip_interface_sendto+0x2dc>
   14aca:	f5b5 5f80 	cmp.w	r5, #4096	; 0x1000
   14ace:	f300 814c 	bgt.w	14d6a <ip_interface_sendto+0x2be>
   14ad2:	6903      	ldr	r3, [r0, #16]
   14ad4:	4604      	mov	r4, r0
   14ad6:	2b01      	cmp	r3, #1
   14ad8:	f000 80fb 	beq.w	14cd2 <ip_interface_sendto+0x226>
   14adc:	6822      	ldr	r2, [r4, #0]
   14ade:	0390      	lsls	r0, r2, #14
   14ae0:	d562      	bpl.n	14ba8 <ip_interface_sendto+0xfc>
   14ae2:	f1b9 0f00 	cmp.w	r9, #0
   14ae6:	f000 80fc 	beq.w	14ce2 <ip_interface_sendto+0x236>
   14aea:	f019 0f02 	tst.w	r9, #2
   14aee:	f000 8146 	beq.w	14d7e <ip_interface_sendto+0x2d2>
   14af2:	2300      	movs	r3, #0
   14af4:	9303      	str	r3, [sp, #12]
   14af6:	f247 0806 	movw	r8, #28678	; 0x7006
   14afa:	f04f 0b0c 	mov.w	fp, #12
   14afe:	4ba6      	ldr	r3, [pc, #664]	; (14d98 <ip_interface_sendto+0x2ec>)
   14b00:	9300      	str	r3, [sp, #0]
   14b02:	043b      	lsls	r3, r7, #16
   14b04:	9304      	str	r3, [sp, #16]
   14b06:	4629      	mov	r1, r5
   14b08:	a807      	add	r0, sp, #28
   14b0a:	f7fc fa27 	bl	10f5c <rpc_ip_client_request_alloc>
   14b0e:	2804      	cmp	r0, #4
   14b10:	d063      	beq.n	14bda <ip_interface_sendto+0x12e>
   14b12:	2800      	cmp	r0, #0
   14b14:	f040 813d 	bne.w	14d92 <ip_interface_sendto+0x2e6>
   14b18:	9b07      	ldr	r3, [sp, #28]
   14b1a:	f883 b008 	strb.w	fp, [r3, #8]
   14b1e:	7258      	strb	r0, [r3, #9]
   14b20:	7298      	strb	r0, [r3, #10]
   14b22:	72d8      	strb	r0, [r3, #11]
   14b24:	2e00      	cmp	r6, #0
   14b26:	d074      	beq.n	14c12 <ip_interface_sendto+0x166>
   14b28:	68e2      	ldr	r2, [r4, #12]
   14b2a:	6871      	ldr	r1, [r6, #4]
   14b2c:	428a      	cmp	r2, r1
   14b2e:	f040 80a2 	bne.w	14c76 <ip_interface_sendto+0x1ca>
   14b32:	7831      	ldrb	r1, [r6, #0]
   14b34:	9813      	ldr	r0, [sp, #76]	; 0x4c
   14b36:	4288      	cmp	r0, r1
   14b38:	d10a      	bne.n	14b50 <ip_interface_sendto+0xa4>
   14b3a:	2a02      	cmp	r2, #2
   14b3c:	f103 001c 	add.w	r0, r3, #28
   14b40:	f000 8101 	beq.w	14d46 <ip_interface_sendto+0x29a>
   14b44:	2a0a      	cmp	r2, #10
   14b46:	d103      	bne.n	14b50 <ip_interface_sendto+0xa4>
   14b48:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   14b4a:	2a24      	cmp	r2, #36	; 0x24
   14b4c:	f000 80e8 	beq.w	14d20 <ip_interface_sendto+0x274>
   14b50:	f04f 0a16 	mov.w	sl, #22
   14b54:	6818      	ldr	r0, [r3, #0]
   14b56:	b110      	cbz	r0, 14b5e <ip_interface_sendto+0xb2>
   14b58:	f7fc fa32 	bl	10fc0 <rpc_ip_client_data_free>
   14b5c:	9b07      	ldr	r3, [sp, #28]
   14b5e:	4618      	mov	r0, r3
   14b60:	f7fc fa26 	bl	10fb0 <rpc_ip_client_message_free>
   14b64:	6823      	ldr	r3, [r4, #0]
   14b66:	031a      	lsls	r2, r3, #12
   14b68:	d43f      	bmi.n	14bea <ip_interface_sendto+0x13e>
   14b6a:	6823      	ldr	r3, [r4, #0]
   14b6c:	b29b      	uxth	r3, r3
   14b6e:	2b0d      	cmp	r3, #13
   14b70:	d007      	beq.n	14b82 <ip_interface_sendto+0xd6>
   14b72:	6823      	ldr	r3, [r4, #0]
   14b74:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
   14b78:	6023      	str	r3, [r4, #0]
   14b7a:	6823      	ldr	r3, [r4, #0]
   14b7c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   14b80:	6023      	str	r3, [r4, #0]
   14b82:	f1ba 0f00 	cmp.w	sl, #0
   14b86:	d130      	bne.n	14bea <ip_interface_sendto+0x13e>
   14b88:	6823      	ldr	r3, [r4, #0]
   14b8a:	0118      	lsls	r0, r3, #4
   14b8c:	d576      	bpl.n	14c7c <ip_interface_sendto+0x1d0>
   14b8e:	6823      	ldr	r3, [r4, #0]
   14b90:	f023 6300 	bic.w	r3, r3, #134217728	; 0x8000000
   14b94:	6023      	str	r3, [r4, #0]
   14b96:	9b00      	ldr	r3, [sp, #0]
   14b98:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
   14b9c:	2800      	cmp	r0, #0
   14b9e:	d12e      	bne.n	14bfe <ip_interface_sendto+0x152>
   14ba0:	4628      	mov	r0, r5
   14ba2:	b009      	add	sp, #36	; 0x24
   14ba4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14ba8:	6822      	ldr	r2, [r4, #0]
   14baa:	0091      	lsls	r1, r2, #2
   14bac:	d406      	bmi.n	14bbc <ip_interface_sendto+0x110>
   14bae:	2b01      	cmp	r3, #1
   14bb0:	f000 80b0 	beq.w	14d14 <ip_interface_sendto+0x268>
   14bb4:	6823      	ldr	r3, [r4, #0]
   14bb6:	031a      	lsls	r2, r3, #12
   14bb8:	f140 80d2 	bpl.w	14d60 <ip_interface_sendto+0x2b4>
   14bbc:	6823      	ldr	r3, [r4, #0]
   14bbe:	031b      	lsls	r3, r3, #12
   14bc0:	f140 80d8 	bpl.w	14d74 <ip_interface_sendto+0x2c8>
   14bc4:	4b74      	ldr	r3, [pc, #464]	; (14d98 <ip_interface_sendto+0x2ec>)
   14bc6:	f8d4 a008 	ldr.w	sl, [r4, #8]
   14bca:	9300      	str	r3, [sp, #0]
   14bcc:	e7d9      	b.n	14b82 <ip_interface_sendto+0xd6>
   14bce:	9b00      	ldr	r3, [sp, #0]
   14bd0:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
   14bd4:	b108      	cbz	r0, 14bda <ip_interface_sendto+0x12e>
   14bd6:	f7fc f9eb 	bl	10fb0 <rpc_ip_client_message_free>
   14bda:	9b03      	ldr	r3, [sp, #12]
   14bdc:	2b00      	cmp	r3, #0
   14bde:	d192      	bne.n	14b06 <ip_interface_sendto+0x5a>
   14be0:	6823      	ldr	r3, [r4, #0]
   14be2:	f04f 0a23 	mov.w	sl, #35	; 0x23
   14be6:	031a      	lsls	r2, r3, #12
   14be8:	d5bf      	bpl.n	14b6a <ip_interface_sendto+0xbe>
   14bea:	4650      	mov	r0, sl
   14bec:	f7fa fdfa 	bl	f7e4 <bsd_os_errno_set>
   14bf0:	9b00      	ldr	r3, [sp, #0]
   14bf2:	f04f 35ff 	mov.w	r5, #4294967295
   14bf6:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
   14bfa:	2800      	cmp	r0, #0
   14bfc:	d0d0      	beq.n	14ba0 <ip_interface_sendto+0xf4>
   14bfe:	f7fc f9d7 	bl	10fb0 <rpc_ip_client_message_free>
   14c02:	2300      	movs	r3, #0
   14c04:	9a00      	ldr	r2, [sp, #0]
   14c06:	f842 3027 	str.w	r3, [r2, r7, lsl #2]
   14c0a:	4628      	mov	r0, r5
   14c0c:	b009      	add	sp, #36	; 0x24
   14c0e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14c12:	4642      	mov	r2, r8
   14c14:	f8c3 9014 	str.w	r9, [r3, #20]
   14c18:	69a1      	ldr	r1, [r4, #24]
   14c1a:	9804      	ldr	r0, [sp, #16]
   14c1c:	6119      	str	r1, [r3, #16]
   14c1e:	9902      	ldr	r1, [sp, #8]
   14c20:	4302      	orrs	r2, r0
   14c22:	60da      	str	r2, [r3, #12]
   14c24:	605d      	str	r5, [r3, #4]
   14c26:	b119      	cbz	r1, 14c30 <ip_interface_sendto+0x184>
   14c28:	6818      	ldr	r0, [r3, #0]
   14c2a:	462a      	mov	r2, r5
   14c2c:	f005 fdfb 	bl	1a826 <memcpy>
   14c30:	6823      	ldr	r3, [r4, #0]
   14c32:	4641      	mov	r1, r8
   14c34:	9305      	str	r3, [sp, #20]
   14c36:	6823      	ldr	r3, [r4, #0]
   14c38:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
   14c3c:	6023      	str	r3, [r4, #0]
   14c3e:	6823      	ldr	r3, [r4, #0]
   14c40:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
   14c44:	6023      	str	r3, [r4, #0]
   14c46:	9b07      	ldr	r3, [sp, #28]
   14c48:	4618      	mov	r0, r3
   14c4a:	9301      	str	r3, [sp, #4]
   14c4c:	f7fc f99a 	bl	10f84 <rpc_ip_client_request_send>
   14c50:	9b01      	ldr	r3, [sp, #4]
   14c52:	4682      	mov	sl, r0
   14c54:	b9e8      	cbnz	r0, 14c92 <ip_interface_sendto+0x1e6>
   14c56:	f44f 3200 	mov.w	r2, #131072	; 0x20000
   14c5a:	f04f 33ff 	mov.w	r3, #4294967295
   14c5e:	4611      	mov	r1, r2
   14c60:	4638      	mov	r0, r7
   14c62:	f001 f9ed 	bl	16040 <interface_socket_wait>
   14c66:	b308      	cbz	r0, 14cac <ip_interface_sendto+0x200>
   14c68:	6823      	ldr	r3, [r4, #0]
   14c6a:	0319      	lsls	r1, r3, #12
   14c6c:	d42a      	bmi.n	14cc4 <ip_interface_sendto+0x218>
   14c6e:	280c      	cmp	r0, #12
   14c70:	d0ad      	beq.n	14bce <ip_interface_sendto+0x122>
   14c72:	4682      	mov	sl, r0
   14c74:	e776      	b.n	14b64 <ip_interface_sendto+0xb8>
   14c76:	f04f 0a2f 	mov.w	sl, #47	; 0x2f
   14c7a:	e76b      	b.n	14b54 <ip_interface_sendto+0xa8>
   14c7c:	9b00      	ldr	r3, [sp, #0]
   14c7e:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
   14c82:	6985      	ldr	r5, [r0, #24]
   14c84:	f7fc f994 	bl	10fb0 <rpc_ip_client_message_free>
   14c88:	2300      	movs	r3, #0
   14c8a:	9a00      	ldr	r2, [sp, #0]
   14c8c:	f842 3027 	str.w	r3, [r2, r7, lsl #2]
   14c90:	e7bb      	b.n	14c0a <ip_interface_sendto+0x15e>
   14c92:	6818      	ldr	r0, [r3, #0]
   14c94:	469a      	mov	sl, r3
   14c96:	b108      	cbz	r0, 14c9c <ip_interface_sendto+0x1f0>
   14c98:	f7fc f992 	bl	10fc0 <rpc_ip_client_data_free>
   14c9c:	4650      	mov	r0, sl
   14c9e:	f7fc f987 	bl	10fb0 <rpc_ip_client_message_free>
   14ca2:	9b05      	ldr	r3, [sp, #20]
   14ca4:	f04f 0a23 	mov.w	sl, #35	; 0x23
   14ca8:	6023      	str	r3, [r4, #0]
   14caa:	e75b      	b.n	14b64 <ip_interface_sendto+0xb8>
   14cac:	4638      	mov	r0, r7
   14cae:	f001 fa3b 	bl	16128 <interface_socket_from_handle_get>
   14cb2:	4603      	mov	r3, r0
   14cb4:	b1e0      	cbz	r0, 14cf0 <ip_interface_sendto+0x244>
   14cb6:	6840      	ldr	r0, [r0, #4]
   14cb8:	b1d0      	cbz	r0, 14cf0 <ip_interface_sendto+0x244>
   14cba:	f8c3 a004 	str.w	sl, [r3, #4]
   14cbe:	6823      	ldr	r3, [r4, #0]
   14cc0:	0319      	lsls	r1, r3, #12
   14cc2:	d5d4      	bpl.n	14c6e <ip_interface_sendto+0x1c2>
   14cc4:	f8d4 a008 	ldr.w	sl, [r4, #8]
   14cc8:	6823      	ldr	r3, [r4, #0]
   14cca:	031e      	lsls	r6, r3, #12
   14ccc:	f57f af4d 	bpl.w	14b6a <ip_interface_sendto+0xbe>
   14cd0:	e757      	b.n	14b82 <ip_interface_sendto+0xd6>
   14cd2:	2e00      	cmp	r6, #0
   14cd4:	f43f af02 	beq.w	14adc <ip_interface_sendto+0x30>
   14cd8:	4b2f      	ldr	r3, [pc, #188]	; (14d98 <ip_interface_sendto+0x2ec>)
   14cda:	f04f 0a38 	mov.w	sl, #56	; 0x38
   14cde:	9300      	str	r3, [sp, #0]
   14ce0:	e783      	b.n	14bea <ip_interface_sendto+0x13e>
   14ce2:	6823      	ldr	r3, [r4, #0]
   14ce4:	f083 5380 	eor.w	r3, r3, #268435456	; 0x10000000
   14ce8:	f3c3 7300 	ubfx	r3, r3, #28, #1
   14cec:	9303      	str	r3, [sp, #12]
   14cee:	e702      	b.n	14af6 <ip_interface_sendto+0x4a>
   14cf0:	6823      	ldr	r3, [r4, #0]
   14cf2:	031b      	lsls	r3, r3, #12
   14cf4:	f53f af48 	bmi.w	14b88 <ip_interface_sendto+0xdc>
   14cf8:	6823      	ldr	r3, [r4, #0]
   14cfa:	b29b      	uxth	r3, r3
   14cfc:	2b0d      	cmp	r3, #13
   14cfe:	f43f af43 	beq.w	14b88 <ip_interface_sendto+0xdc>
   14d02:	6823      	ldr	r3, [r4, #0]
   14d04:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
   14d08:	6023      	str	r3, [r4, #0]
   14d0a:	6823      	ldr	r3, [r4, #0]
   14d0c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   14d10:	6023      	str	r3, [r4, #0]
   14d12:	e739      	b.n	14b88 <ip_interface_sendto+0xdc>
   14d14:	6823      	ldr	r3, [r4, #0]
   14d16:	b29b      	uxth	r3, r3
   14d18:	2b05      	cmp	r3, #5
   14d1a:	f47f af4f 	bne.w	14bbc <ip_interface_sendto+0x110>
   14d1e:	e749      	b.n	14bb4 <ip_interface_sendto+0x108>
   14d20:	2210      	movs	r2, #16
   14d22:	8931      	ldrh	r1, [r6, #8]
   14d24:	835a      	strh	r2, [r3, #26]
   14d26:	8319      	strh	r1, [r3, #24]
   14d28:	18b1      	adds	r1, r6, r2
   14d2a:	f005 fd7c 	bl	1a826 <memcpy>
   14d2e:	f247 0207 	movw	r2, #28679	; 0x7007
   14d32:	9b07      	ldr	r3, [sp, #28]
   14d34:	4690      	mov	r8, r2
   14d36:	6899      	ldr	r1, [r3, #8]
   14d38:	8b58      	ldrh	r0, [r3, #26]
   14d3a:	3104      	adds	r1, #4
   14d3c:	4401      	add	r1, r0
   14d3e:	f8c3 9014 	str.w	r9, [r3, #20]
   14d42:	6099      	str	r1, [r3, #8]
   14d44:	e768      	b.n	14c18 <ip_interface_sendto+0x16c>
   14d46:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   14d48:	2a10      	cmp	r2, #16
   14d4a:	f47f af01 	bne.w	14b50 <ip_interface_sendto+0xa4>
   14d4e:	2204      	movs	r2, #4
   14d50:	8931      	ldrh	r1, [r6, #8]
   14d52:	835a      	strh	r2, [r3, #26]
   14d54:	8319      	strh	r1, [r3, #24]
   14d56:	f106 010c 	add.w	r1, r6, #12
   14d5a:	f005 fd64 	bl	1a826 <memcpy>
   14d5e:	e7e6      	b.n	14d2e <ip_interface_sendto+0x282>
   14d60:	4b0d      	ldr	r3, [pc, #52]	; (14d98 <ip_interface_sendto+0x2ec>)
   14d62:	f04f 0a23 	mov.w	sl, #35	; 0x23
   14d66:	9300      	str	r3, [sp, #0]
   14d68:	e73f      	b.n	14bea <ip_interface_sendto+0x13e>
   14d6a:	4b0b      	ldr	r3, [pc, #44]	; (14d98 <ip_interface_sendto+0x2ec>)
   14d6c:	f04f 0a28 	mov.w	sl, #40	; 0x28
   14d70:	9300      	str	r3, [sp, #0]
   14d72:	e73a      	b.n	14bea <ip_interface_sendto+0x13e>
   14d74:	4b08      	ldr	r3, [pc, #32]	; (14d98 <ip_interface_sendto+0x2ec>)
   14d76:	f04f 0a39 	mov.w	sl, #57	; 0x39
   14d7a:	9300      	str	r3, [sp, #0]
   14d7c:	e735      	b.n	14bea <ip_interface_sendto+0x13e>
   14d7e:	4b06      	ldr	r3, [pc, #24]	; (14d98 <ip_interface_sendto+0x2ec>)
   14d80:	f04f 0a2d 	mov.w	sl, #45	; 0x2d
   14d84:	9300      	str	r3, [sp, #0]
   14d86:	e730      	b.n	14bea <ip_interface_sendto+0x13e>
   14d88:	4b03      	ldr	r3, [pc, #12]	; (14d98 <ip_interface_sendto+0x2ec>)
   14d8a:	f04f 0a09 	mov.w	sl, #9
   14d8e:	9300      	str	r3, [sp, #0]
   14d90:	e72b      	b.n	14bea <ip_interface_sendto+0x13e>
   14d92:	f04f 0a0c 	mov.w	sl, #12
   14d96:	e6e5      	b.n	14b64 <ip_interface_sendto+0xb8>
   14d98:	200207f0 	.word	0x200207f0

00014d9c <ip_interface_recvfrom>:
   14d9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14da0:	b085      	sub	sp, #20
   14da2:	2a00      	cmp	r2, #0
   14da4:	f000 811b 	beq.w	14fde <ip_interface_recvfrom+0x242>
   14da8:	4605      	mov	r5, r0
   14daa:	468a      	mov	sl, r1
   14dac:	4698      	mov	r8, r3
   14dae:	4617      	mov	r7, r2
   14db0:	b11b      	cbz	r3, 14dba <ip_interface_recvfrom+0x1e>
   14db2:	f013 0f1a 	tst.w	r3, #26
   14db6:	f000 810f 	beq.w	14fd8 <ip_interface_recvfrom+0x23c>
   14dba:	4628      	mov	r0, r5
   14dbc:	f001 f9b4 	bl	16128 <interface_socket_from_handle_get>
   14dc0:	4604      	mov	r4, r0
   14dc2:	2800      	cmp	r0, #0
   14dc4:	f000 810e 	beq.w	14fe4 <ip_interface_recvfrom+0x248>
   14dc8:	6803      	ldr	r3, [r0, #0]
   14dca:	02d9      	lsls	r1, r3, #11
   14dcc:	d564      	bpl.n	14e98 <ip_interface_recvfrom+0xfc>
   14dce:	f018 0f02 	tst.w	r8, #2
   14dd2:	bf18      	it	ne
   14dd4:	f04f 0900 	movne.w	r9, #0
   14dd8:	f04f 3bff 	mov.w	fp, #4294967295
   14ddc:	bf08      	it	eq
   14dde:	6803      	ldreq	r3, [r0, #0]
   14de0:	f008 0610 	and.w	r6, r8, #16
   14de4:	bf04      	itt	eq
   14de6:	f083 5980 	eoreq.w	r9, r3, #268435456	; 0x10000000
   14dea:	f3c9 7900 	ubfxeq	r9, r9, #28, #1
   14dee:	6823      	ldr	r3, [r4, #0]
   14df0:	03da      	lsls	r2, r3, #15
   14df2:	d56c      	bpl.n	14ece <ip_interface_recvfrom+0x132>
   14df4:	6823      	ldr	r3, [r4, #0]
   14df6:	69e0      	ldr	r0, [r4, #28]
   14df8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
   14dfc:	6023      	str	r3, [r4, #0]
   14dfe:	6803      	ldr	r3, [r0, #0]
   14e00:	68db      	ldr	r3, [r3, #12]
   14e02:	4798      	blx	r3
   14e04:	f1b0 3fff 	cmp.w	r0, #4294967295
   14e08:	4683      	mov	fp, r0
   14e0a:	d07f      	beq.n	14f0c <ip_interface_recvfrom+0x170>
   14e0c:	4287      	cmp	r7, r0
   14e0e:	dd03      	ble.n	14e18 <ip_interface_recvfrom+0x7c>
   14e10:	6923      	ldr	r3, [r4, #16]
   14e12:	2b01      	cmp	r3, #1
   14e14:	f000 80a6 	beq.w	14f64 <ip_interface_recvfrom+0x1c8>
   14e18:	2600      	movs	r6, #0
   14e1a:	69e0      	ldr	r0, [r4, #28]
   14e1c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   14e1e:	b103      	cbz	r3, 14e22 <ip_interface_recvfrom+0x86>
   14e20:	681b      	ldr	r3, [r3, #0]
   14e22:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   14e24:	e9cd a700 	strd	sl, r7, [sp]
   14e28:	e9cd 2302 	strd	r2, r3, [sp, #8]
   14e2c:	6803      	ldr	r3, [r0, #0]
   14e2e:	4642      	mov	r2, r8
   14e30:	689b      	ldr	r3, [r3, #8]
   14e32:	4669      	mov	r1, sp
   14e34:	4798      	blx	r3
   14e36:	4683      	mov	fp, r0
   14e38:	69e0      	ldr	r0, [r4, #28]
   14e3a:	f1bb 3fff 	cmp.w	fp, #4294967295
   14e3e:	6803      	ldr	r3, [r0, #0]
   14e40:	bf18      	it	ne
   14e42:	2501      	movne	r5, #1
   14e44:	68db      	ldr	r3, [r3, #12]
   14e46:	bf0a      	itet	eq
   14e48:	2500      	moveq	r5, #0
   14e4a:	f04f 0900 	movne.w	r9, #0
   14e4e:	f04f 0923 	moveq.w	r9, #35	; 0x23
   14e52:	4798      	blx	r3
   14e54:	3001      	adds	r0, #1
   14e56:	d135      	bne.n	14ec4 <ip_interface_recvfrom+0x128>
   14e58:	2e00      	cmp	r6, #0
   14e5a:	f000 80b5 	beq.w	14fc8 <ip_interface_recvfrom+0x22c>
   14e5e:	2d00      	cmp	r5, #0
   14e60:	f000 80a5 	beq.w	14fae <ip_interface_recvfrom+0x212>
   14e64:	6823      	ldr	r3, [r4, #0]
   14e66:	0319      	lsls	r1, r3, #12
   14e68:	d506      	bpl.n	14e78 <ip_interface_recvfrom+0xdc>
   14e6a:	6823      	ldr	r3, [r4, #0]
   14e6c:	b29b      	uxth	r3, r3
   14e6e:	2b0d      	cmp	r3, #13
   14e70:	d002      	beq.n	14e78 <ip_interface_recvfrom+0xdc>
   14e72:	6923      	ldr	r3, [r4, #16]
   14e74:	2b01      	cmp	r3, #1
   14e76:	d025      	beq.n	14ec4 <ip_interface_recvfrom+0x128>
   14e78:	6823      	ldr	r3, [r4, #0]
   14e7a:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
   14e7e:	6823      	ldr	r3, [r4, #0]
   14e80:	f040 80b3 	bne.w	14fea <ip_interface_recvfrom+0x24e>
   14e84:	031a      	lsls	r2, r3, #12
   14e86:	d474      	bmi.n	14f72 <ip_interface_recvfrom+0x1d6>
   14e88:	f1b9 0f00 	cmp.w	r9, #0
   14e8c:	f040 8089 	bne.w	14fa2 <ip_interface_recvfrom+0x206>
   14e90:	4658      	mov	r0, fp
   14e92:	b005      	add	sp, #20
   14e94:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14e98:	6803      	ldr	r3, [r0, #0]
   14e9a:	b29b      	uxth	r3, r3
   14e9c:	2b06      	cmp	r3, #6
   14e9e:	d072      	beq.n	14f86 <ip_interface_recvfrom+0x1ea>
   14ea0:	6803      	ldr	r3, [r0, #0]
   14ea2:	b29b      	uxth	r3, r3
   14ea4:	2b07      	cmp	r3, #7
   14ea6:	bf0c      	ite	eq
   14ea8:	f04f 0909 	moveq.w	r9, #9
   14eac:	f04f 0939 	movne.w	r9, #57	; 0x39
   14eb0:	69e0      	ldr	r0, [r4, #28]
   14eb2:	6803      	ldr	r3, [r0, #0]
   14eb4:	68db      	ldr	r3, [r3, #12]
   14eb6:	4798      	blx	r3
   14eb8:	f1b0 3fff 	cmp.w	r0, #4294967295
   14ebc:	4683      	mov	fp, r0
   14ebe:	d0db      	beq.n	14e78 <ip_interface_recvfrom+0xdc>
   14ec0:	f04f 3bff 	mov.w	fp, #4294967295
   14ec4:	6823      	ldr	r3, [r4, #0]
   14ec6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   14eca:	6023      	str	r3, [r4, #0]
   14ecc:	e7dc      	b.n	14e88 <ip_interface_recvfrom+0xec>
   14ece:	f1b9 0f00 	cmp.w	r9, #0
   14ed2:	d07d      	beq.n	14fd0 <ip_interface_recvfrom+0x234>
   14ed4:	f44f 3280 	mov.w	r2, #65536	; 0x10000
   14ed8:	6a23      	ldr	r3, [r4, #32]
   14eda:	4611      	mov	r1, r2
   14edc:	2b00      	cmp	r3, #0
   14ede:	bf08      	it	eq
   14ee0:	f04f 33ff 	moveq.w	r3, #4294967295
   14ee4:	4628      	mov	r0, r5
   14ee6:	f001 f8ab 	bl	16040 <interface_socket_wait>
   14eea:	4681      	mov	r9, r0
   14eec:	b358      	cbz	r0, 14f46 <ip_interface_recvfrom+0x1aa>
   14eee:	6823      	ldr	r3, [r4, #0]
   14ef0:	69e0      	ldr	r0, [r4, #28]
   14ef2:	031b      	lsls	r3, r3, #12
   14ef4:	d521      	bpl.n	14f3a <ip_interface_recvfrom+0x19e>
   14ef6:	6823      	ldr	r3, [r4, #0]
   14ef8:	b29b      	uxth	r3, r3
   14efa:	2b0d      	cmp	r3, #13
   14efc:	d01d      	beq.n	14f3a <ip_interface_recvfrom+0x19e>
   14efe:	6926      	ldr	r6, [r4, #16]
   14f00:	f1a6 0601 	sub.w	r6, r6, #1
   14f04:	fab6 f686 	clz	r6, r6
   14f08:	0976      	lsrs	r6, r6, #5
   14f0a:	e787      	b.n	14e1c <ip_interface_recvfrom+0x80>
   14f0c:	6823      	ldr	r3, [r4, #0]
   14f0e:	0318      	lsls	r0, r3, #12
   14f10:	d5dd      	bpl.n	14ece <ip_interface_recvfrom+0x132>
   14f12:	6823      	ldr	r3, [r4, #0]
   14f14:	b29b      	uxth	r3, r3
   14f16:	2b0d      	cmp	r3, #13
   14f18:	d0d9      	beq.n	14ece <ip_interface_recvfrom+0x132>
   14f1a:	6923      	ldr	r3, [r4, #16]
   14f1c:	69e0      	ldr	r0, [r4, #28]
   14f1e:	2b01      	cmp	r3, #1
   14f20:	d034      	beq.n	14f8c <ip_interface_recvfrom+0x1f0>
   14f22:	f04f 0939 	mov.w	r9, #57	; 0x39
   14f26:	6823      	ldr	r3, [r4, #0]
   14f28:	0c1b      	lsrs	r3, r3, #16
   14f2a:	041b      	lsls	r3, r3, #16
   14f2c:	f043 030d 	orr.w	r3, r3, #13
   14f30:	6023      	str	r3, [r4, #0]
   14f32:	6823      	ldr	r3, [r4, #0]
   14f34:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
   14f38:	6023      	str	r3, [r4, #0]
   14f3a:	6803      	ldr	r3, [r0, #0]
   14f3c:	68db      	ldr	r3, [r3, #12]
   14f3e:	4798      	blx	r3
   14f40:	3001      	adds	r0, #1
   14f42:	d1bf      	bne.n	14ec4 <ip_interface_recvfrom+0x128>
   14f44:	e798      	b.n	14e78 <ip_interface_recvfrom+0xdc>
   14f46:	4628      	mov	r0, r5
   14f48:	f001 f8ee 	bl	16128 <interface_socket_from_handle_get>
   14f4c:	b138      	cbz	r0, 14f5e <ip_interface_recvfrom+0x1c2>
   14f4e:	f8d0 9004 	ldr.w	r9, [r0, #4]
   14f52:	f1b9 0f00 	cmp.w	r9, #0
   14f56:	d002      	beq.n	14f5e <ip_interface_recvfrom+0x1c2>
   14f58:	2300      	movs	r3, #0
   14f5a:	6043      	str	r3, [r0, #4]
   14f5c:	e7c7      	b.n	14eee <ip_interface_recvfrom+0x152>
   14f5e:	f04f 0901 	mov.w	r9, #1
   14f62:	e744      	b.n	14dee <ip_interface_recvfrom+0x52>
   14f64:	b11e      	cbz	r6, 14f6e <ip_interface_recvfrom+0x1d2>
   14f66:	6823      	ldr	r3, [r4, #0]
   14f68:	00db      	lsls	r3, r3, #3
   14f6a:	d5b3      	bpl.n	14ed4 <ip_interface_recvfrom+0x138>
   14f6c:	e754      	b.n	14e18 <ip_interface_recvfrom+0x7c>
   14f6e:	69e0      	ldr	r0, [r4, #28]
   14f70:	e754      	b.n	14e1c <ip_interface_recvfrom+0x80>
   14f72:	6823      	ldr	r3, [r4, #0]
   14f74:	b29b      	uxth	r3, r3
   14f76:	2b0d      	cmp	r3, #13
   14f78:	d186      	bne.n	14e88 <ip_interface_recvfrom+0xec>
   14f7a:	68a3      	ldr	r3, [r4, #8]
   14f7c:	2b00      	cmp	r3, #0
   14f7e:	d083      	beq.n	14e88 <ip_interface_recvfrom+0xec>
   14f80:	f8d4 9008 	ldr.w	r9, [r4, #8]
   14f84:	e780      	b.n	14e88 <ip_interface_recvfrom+0xec>
   14f86:	f04f 0909 	mov.w	r9, #9
   14f8a:	e791      	b.n	14eb0 <ip_interface_recvfrom+0x114>
   14f8c:	6803      	ldr	r3, [r0, #0]
   14f8e:	68db      	ldr	r3, [r3, #12]
   14f90:	4798      	blx	r3
   14f92:	3001      	adds	r0, #1
   14f94:	d00b      	beq.n	14fae <ip_interface_recvfrom+0x212>
   14f96:	f04f 0923 	mov.w	r9, #35	; 0x23
   14f9a:	6823      	ldr	r3, [r4, #0]
   14f9c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   14fa0:	6023      	str	r3, [r4, #0]
   14fa2:	4648      	mov	r0, r9
   14fa4:	f7fa fc1e 	bl	f7e4 <bsd_os_errno_set>
   14fa8:	f04f 3bff 	mov.w	fp, #4294967295
   14fac:	e770      	b.n	14e90 <ip_interface_recvfrom+0xf4>
   14fae:	6823      	ldr	r3, [r4, #0]
   14fb0:	f04f 0b00 	mov.w	fp, #0
   14fb4:	0c1b      	lsrs	r3, r3, #16
   14fb6:	041b      	lsls	r3, r3, #16
   14fb8:	f043 030d 	orr.w	r3, r3, #13
   14fbc:	6023      	str	r3, [r4, #0]
   14fbe:	6823      	ldr	r3, [r4, #0]
   14fc0:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
   14fc4:	6023      	str	r3, [r4, #0]
   14fc6:	e763      	b.n	14e90 <ip_interface_recvfrom+0xf4>
   14fc8:	2d00      	cmp	r5, #0
   14fca:	f47f af4b 	bne.w	14e64 <ip_interface_recvfrom+0xc8>
   14fce:	e753      	b.n	14e78 <ip_interface_recvfrom+0xdc>
   14fd0:	f04f 0923 	mov.w	r9, #35	; 0x23
   14fd4:	69e0      	ldr	r0, [r4, #28]
   14fd6:	e7b0      	b.n	14f3a <ip_interface_recvfrom+0x19e>
   14fd8:	f04f 092d 	mov.w	r9, #45	; 0x2d
   14fdc:	e7e1      	b.n	14fa2 <ip_interface_recvfrom+0x206>
   14fde:	f04f 0916 	mov.w	r9, #22
   14fe2:	e7de      	b.n	14fa2 <ip_interface_recvfrom+0x206>
   14fe4:	f04f 0909 	mov.w	r9, #9
   14fe8:	e7db      	b.n	14fa2 <ip_interface_recvfrom+0x206>
   14fea:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
   14fee:	6023      	str	r3, [r4, #0]
   14ff0:	6823      	ldr	r3, [r4, #0]
   14ff2:	f04f 0969 	mov.w	r9, #105	; 0x69
   14ff6:	0c1b      	lsrs	r3, r3, #16
   14ff8:	041b      	lsls	r3, r3, #16
   14ffa:	f043 030d 	orr.w	r3, r3, #13
   14ffe:	6023      	str	r3, [r4, #0]
   15000:	e7cf      	b.n	14fa2 <ip_interface_recvfrom+0x206>
   15002:	bf00      	nop

00015004 <ip_interface_connect>:
   15004:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   15008:	b083      	sub	sp, #12
   1500a:	2900      	cmp	r1, #0
   1500c:	d049      	beq.n	150a2 <ip_interface_connect+0x9e>
   1500e:	4616      	mov	r6, r2
   15010:	2a00      	cmp	r2, #0
   15012:	d046      	beq.n	150a2 <ip_interface_connect+0x9e>
   15014:	4607      	mov	r7, r0
   15016:	4688      	mov	r8, r1
   15018:	f001 f886 	bl	16128 <interface_socket_from_handle_get>
   1501c:	4605      	mov	r5, r0
   1501e:	2800      	cmp	r0, #0
   15020:	f000 80a8 	beq.w	15174 <ip_interface_connect+0x170>
   15024:	6803      	ldr	r3, [r0, #0]
   15026:	b29b      	uxth	r3, r3
   15028:	2b02      	cmp	r3, #2
   1502a:	d004      	beq.n	15036 <ip_interface_connect+0x32>
   1502c:	6803      	ldr	r3, [r0, #0]
   1502e:	b29b      	uxth	r3, r3
   15030:	2b04      	cmp	r3, #4
   15032:	f040 808b 	bne.w	1514c <ip_interface_connect+0x148>
   15036:	6829      	ldr	r1, [r5, #0]
   15038:	f011 5100 	ands.w	r1, r1, #536870912	; 0x20000000
   1503c:	f040 8082 	bne.w	15144 <ip_interface_connect+0x140>
   15040:	a802      	add	r0, sp, #8
   15042:	f840 1d04 	str.w	r1, [r0, #-4]!
   15046:	f8d5 9018 	ldr.w	r9, [r5, #24]
   1504a:	f7fb ff87 	bl	10f5c <rpc_ip_client_request_alloc>
   1504e:	bb90      	cbnz	r0, 150b6 <ip_interface_connect+0xb2>
   15050:	2108      	movs	r1, #8
   15052:	043b      	lsls	r3, r7, #16
   15054:	9c01      	ldr	r4, [sp, #4]
   15056:	f443 42e0 	orr.w	r2, r3, #28672	; 0x7000
   1505a:	f042 0202 	orr.w	r2, r2, #2
   1505e:	60e2      	str	r2, [r4, #12]
   15060:	f8c4 9010 	str.w	r9, [r4, #16]
   15064:	7260      	strb	r0, [r4, #9]
   15066:	72a0      	strb	r0, [r4, #10]
   15068:	72e0      	strb	r0, [r4, #11]
   1506a:	7221      	strb	r1, [r4, #8]
   1506c:	f443 43e0 	orr.w	r3, r3, #28672	; 0x7000
   15070:	f043 0302 	orr.w	r3, r3, #2
   15074:	60e3      	str	r3, [r4, #12]
   15076:	68a3      	ldr	r3, [r4, #8]
   15078:	69aa      	ldr	r2, [r5, #24]
   1507a:	3304      	adds	r3, #4
   1507c:	6122      	str	r2, [r4, #16]
   1507e:	60a3      	str	r3, [r4, #8]
   15080:	68eb      	ldr	r3, [r5, #12]
   15082:	f8d8 2004 	ldr.w	r2, [r8, #4]
   15086:	4293      	cmp	r3, r2
   15088:	d11a      	bne.n	150c0 <ip_interface_connect+0xbc>
   1508a:	f898 2000 	ldrb.w	r2, [r8]
   1508e:	4296      	cmp	r6, r2
   15090:	d107      	bne.n	150a2 <ip_interface_connect+0x9e>
   15092:	2b02      	cmp	r3, #2
   15094:	f104 0018 	add.w	r0, r4, #24
   15098:	d014      	beq.n	150c4 <ip_interface_connect+0xc0>
   1509a:	2b0a      	cmp	r3, #10
   1509c:	d101      	bne.n	150a2 <ip_interface_connect+0x9e>
   1509e:	2e24      	cmp	r6, #36	; 0x24
   150a0:	d01c      	beq.n	150dc <ip_interface_connect+0xd8>
   150a2:	2416      	movs	r4, #22
   150a4:	4620      	mov	r0, r4
   150a6:	f7fa fb9d 	bl	f7e4 <bsd_os_errno_set>
   150aa:	f04f 34ff 	mov.w	r4, #4294967295
   150ae:	4620      	mov	r0, r4
   150b0:	b003      	add	sp, #12
   150b2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   150b6:	9c01      	ldr	r4, [sp, #4]
   150b8:	2c00      	cmp	r4, #0
   150ba:	d059      	beq.n	15170 <ip_interface_connect+0x16c>
   150bc:	043b      	lsls	r3, r7, #16
   150be:	e7d5      	b.n	1506c <ip_interface_connect+0x68>
   150c0:	242f      	movs	r4, #47	; 0x2f
   150c2:	e7ef      	b.n	150a4 <ip_interface_connect+0xa0>
   150c4:	2e10      	cmp	r6, #16
   150c6:	d1ec      	bne.n	150a2 <ip_interface_connect+0x9e>
   150c8:	2204      	movs	r2, #4
   150ca:	f8b8 3008 	ldrh.w	r3, [r8, #8]
   150ce:	f108 010c 	add.w	r1, r8, #12
   150d2:	82e2      	strh	r2, [r4, #22]
   150d4:	82a3      	strh	r3, [r4, #20]
   150d6:	f005 fba6 	bl	1a826 <memcpy>
   150da:	e008      	b.n	150ee <ip_interface_connect+0xea>
   150dc:	2210      	movs	r2, #16
   150de:	f8b8 3008 	ldrh.w	r3, [r8, #8]
   150e2:	eb08 0102 	add.w	r1, r8, r2
   150e6:	82e2      	strh	r2, [r4, #22]
   150e8:	82a3      	strh	r3, [r4, #20]
   150ea:	f005 fb9c 	bl	1a826 <memcpy>
   150ee:	68a3      	ldr	r3, [r4, #8]
   150f0:	8ae2      	ldrh	r2, [r4, #22]
   150f2:	f247 0102 	movw	r1, #28674	; 0x7002
   150f6:	4413      	add	r3, r2
   150f8:	60a3      	str	r3, [r4, #8]
   150fa:	682e      	ldr	r6, [r5, #0]
   150fc:	682b      	ldr	r3, [r5, #0]
   150fe:	4620      	mov	r0, r4
   15100:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
   15104:	602b      	str	r3, [r5, #0]
   15106:	f7fb ff3d 	bl	10f84 <rpc_ip_client_request_send>
   1510a:	b988      	cbnz	r0, 15130 <ip_interface_connect+0x12c>
   1510c:	682b      	ldr	r3, [r5, #0]
   1510e:	f013 5880 	ands.w	r8, r3, #268435456	; 0x10000000
   15112:	d119      	bne.n	15148 <ip_interface_connect+0x144>
   15114:	f04f 33ff 	mov.w	r3, #4294967295
   15118:	f64f 72ff 	movw	r2, #65535	; 0xffff
   1511c:	2105      	movs	r1, #5
   1511e:	4638      	mov	r0, r7
   15120:	f000 ff8e 	bl	16040 <interface_socket_wait>
   15124:	4604      	mov	r4, r0
   15126:	b1c0      	cbz	r0, 1515a <ip_interface_connect+0x156>
   15128:	2c73      	cmp	r4, #115	; 0x73
   1512a:	d0bb      	beq.n	150a4 <ip_interface_connect+0xa0>
   1512c:	602e      	str	r6, [r5, #0]
   1512e:	e7b9      	b.n	150a4 <ip_interface_connect+0xa0>
   15130:	6820      	ldr	r0, [r4, #0]
   15132:	b108      	cbz	r0, 15138 <ip_interface_connect+0x134>
   15134:	f7fb ff44 	bl	10fc0 <rpc_ip_client_data_free>
   15138:	4620      	mov	r0, r4
   1513a:	f7fb ff39 	bl	10fb0 <rpc_ip_client_message_free>
   1513e:	2423      	movs	r4, #35	; 0x23
   15140:	602e      	str	r6, [r5, #0]
   15142:	e7af      	b.n	150a4 <ip_interface_connect+0xa0>
   15144:	2472      	movs	r4, #114	; 0x72
   15146:	e7ad      	b.n	150a4 <ip_interface_connect+0xa0>
   15148:	2473      	movs	r4, #115	; 0x73
   1514a:	e7ab      	b.n	150a4 <ip_interface_connect+0xa0>
   1514c:	6803      	ldr	r3, [r0, #0]
   1514e:	b29b      	uxth	r3, r3
   15150:	2b05      	cmp	r3, #5
   15152:	bf14      	ite	ne
   15154:	2409      	movne	r4, #9
   15156:	2438      	moveq	r4, #56	; 0x38
   15158:	e7a4      	b.n	150a4 <ip_interface_connect+0xa0>
   1515a:	4638      	mov	r0, r7
   1515c:	f000 ffe4 	bl	16128 <interface_socket_from_handle_get>
   15160:	2800      	cmp	r0, #0
   15162:	d0a4      	beq.n	150ae <ip_interface_connect+0xaa>
   15164:	6844      	ldr	r4, [r0, #4]
   15166:	2c00      	cmp	r4, #0
   15168:	d0a1      	beq.n	150ae <ip_interface_connect+0xaa>
   1516a:	f8c0 8004 	str.w	r8, [r0, #4]
   1516e:	e7db      	b.n	15128 <ip_interface_connect+0x124>
   15170:	240c      	movs	r4, #12
   15172:	e797      	b.n	150a4 <ip_interface_connect+0xa0>
   15174:	2409      	movs	r4, #9
   15176:	e795      	b.n	150a4 <ip_interface_connect+0xa0>

00015178 <ip_interface_bind>:
   15178:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1517c:	b083      	sub	sp, #12
   1517e:	b3b1      	cbz	r1, 151ee <ip_interface_bind+0x76>
   15180:	4616      	mov	r6, r2
   15182:	b3a2      	cbz	r2, 151ee <ip_interface_bind+0x76>
   15184:	4607      	mov	r7, r0
   15186:	4688      	mov	r8, r1
   15188:	f000 ffce 	bl	16128 <interface_socket_from_handle_get>
   1518c:	4605      	mov	r5, r0
   1518e:	2800      	cmp	r0, #0
   15190:	d04a      	beq.n	15228 <ip_interface_bind+0xb0>
   15192:	6803      	ldr	r3, [r0, #0]
   15194:	b29b      	uxth	r3, r3
   15196:	2b02      	cmp	r3, #2
   15198:	d146      	bne.n	15228 <ip_interface_bind+0xb0>
   1519a:	2100      	movs	r1, #0
   1519c:	a802      	add	r0, sp, #8
   1519e:	f840 1d04 	str.w	r1, [r0, #-4]!
   151a2:	f8d5 9018 	ldr.w	r9, [r5, #24]
   151a6:	f7fb fed9 	bl	10f5c <rpc_ip_client_request_alloc>
   151aa:	bb50      	cbnz	r0, 15202 <ip_interface_bind+0x8a>
   151ac:	f247 0305 	movw	r3, #28677	; 0x7005
   151b0:	2208      	movs	r2, #8
   151b2:	9c01      	ldr	r4, [sp, #4]
   151b4:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
   151b8:	60e3      	str	r3, [r4, #12]
   151ba:	f8c4 9010 	str.w	r9, [r4, #16]
   151be:	7260      	strb	r0, [r4, #9]
   151c0:	72a0      	strb	r0, [r4, #10]
   151c2:	72e0      	strb	r0, [r4, #11]
   151c4:	7222      	strb	r2, [r4, #8]
   151c6:	68a3      	ldr	r3, [r4, #8]
   151c8:	3304      	adds	r3, #4
   151ca:	60a3      	str	r3, [r4, #8]
   151cc:	68eb      	ldr	r3, [r5, #12]
   151ce:	f8d8 2004 	ldr.w	r2, [r8, #4]
   151d2:	4293      	cmp	r3, r2
   151d4:	d11a      	bne.n	1520c <ip_interface_bind+0x94>
   151d6:	f898 2000 	ldrb.w	r2, [r8]
   151da:	4296      	cmp	r6, r2
   151dc:	d107      	bne.n	151ee <ip_interface_bind+0x76>
   151de:	2b02      	cmp	r3, #2
   151e0:	f104 0018 	add.w	r0, r4, #24
   151e4:	d014      	beq.n	15210 <ip_interface_bind+0x98>
   151e6:	2b0a      	cmp	r3, #10
   151e8:	d101      	bne.n	151ee <ip_interface_bind+0x76>
   151ea:	2e24      	cmp	r6, #36	; 0x24
   151ec:	d01e      	beq.n	1522c <ip_interface_bind+0xb4>
   151ee:	2416      	movs	r4, #22
   151f0:	4620      	mov	r0, r4
   151f2:	f7fa faf7 	bl	f7e4 <bsd_os_errno_set>
   151f6:	f04f 34ff 	mov.w	r4, #4294967295
   151fa:	4620      	mov	r0, r4
   151fc:	b003      	add	sp, #12
   151fe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   15202:	9c01      	ldr	r4, [sp, #4]
   15204:	2c00      	cmp	r4, #0
   15206:	d1de      	bne.n	151c6 <ip_interface_bind+0x4e>
   15208:	240c      	movs	r4, #12
   1520a:	e7f1      	b.n	151f0 <ip_interface_bind+0x78>
   1520c:	242f      	movs	r4, #47	; 0x2f
   1520e:	e7ef      	b.n	151f0 <ip_interface_bind+0x78>
   15210:	2e10      	cmp	r6, #16
   15212:	d1ec      	bne.n	151ee <ip_interface_bind+0x76>
   15214:	2204      	movs	r2, #4
   15216:	f8b8 3008 	ldrh.w	r3, [r8, #8]
   1521a:	f108 010c 	add.w	r1, r8, #12
   1521e:	82e2      	strh	r2, [r4, #22]
   15220:	82a3      	strh	r3, [r4, #20]
   15222:	f005 fb00 	bl	1a826 <memcpy>
   15226:	e00a      	b.n	1523e <ip_interface_bind+0xc6>
   15228:	2409      	movs	r4, #9
   1522a:	e7e1      	b.n	151f0 <ip_interface_bind+0x78>
   1522c:	2210      	movs	r2, #16
   1522e:	f8b8 3008 	ldrh.w	r3, [r8, #8]
   15232:	eb08 0102 	add.w	r1, r8, r2
   15236:	82e2      	strh	r2, [r4, #22]
   15238:	82a3      	strh	r3, [r4, #20]
   1523a:	f005 faf4 	bl	1a826 <memcpy>
   1523e:	68a3      	ldr	r3, [r4, #8]
   15240:	8ae2      	ldrh	r2, [r4, #22]
   15242:	f247 0105 	movw	r1, #28677	; 0x7005
   15246:	4413      	add	r3, r2
   15248:	60a3      	str	r3, [r4, #8]
   1524a:	682b      	ldr	r3, [r5, #0]
   1524c:	4620      	mov	r0, r4
   1524e:	0c1b      	lsrs	r3, r3, #16
   15250:	041b      	lsls	r3, r3, #16
   15252:	f043 0303 	orr.w	r3, r3, #3
   15256:	602b      	str	r3, [r5, #0]
   15258:	682e      	ldr	r6, [r5, #0]
   1525a:	f7fb fe93 	bl	10f84 <rpc_ip_client_request_send>
   1525e:	4680      	mov	r8, r0
   15260:	b980      	cbnz	r0, 15284 <ip_interface_bind+0x10c>
   15262:	f04f 33ff 	mov.w	r3, #4294967295
   15266:	f64f 72ff 	movw	r2, #65535	; 0xffff
   1526a:	2104      	movs	r1, #4
   1526c:	4638      	mov	r0, r7
   1526e:	f000 fee7 	bl	16040 <interface_socket_wait>
   15272:	4604      	mov	r4, r0
   15274:	b1a0      	cbz	r0, 152a0 <ip_interface_bind+0x128>
   15276:	682b      	ldr	r3, [r5, #0]
   15278:	0c1b      	lsrs	r3, r3, #16
   1527a:	041b      	lsls	r3, r3, #16
   1527c:	f043 0302 	orr.w	r3, r3, #2
   15280:	602b      	str	r3, [r5, #0]
   15282:	e7b5      	b.n	151f0 <ip_interface_bind+0x78>
   15284:	6820      	ldr	r0, [r4, #0]
   15286:	b108      	cbz	r0, 1528c <ip_interface_bind+0x114>
   15288:	f7fb fe9a 	bl	10fc0 <rpc_ip_client_data_free>
   1528c:	0c36      	lsrs	r6, r6, #16
   1528e:	0436      	lsls	r6, r6, #16
   15290:	4620      	mov	r0, r4
   15292:	f046 0602 	orr.w	r6, r6, #2
   15296:	f7fb fe8b 	bl	10fb0 <rpc_ip_client_message_free>
   1529a:	2423      	movs	r4, #35	; 0x23
   1529c:	602e      	str	r6, [r5, #0]
   1529e:	e7a7      	b.n	151f0 <ip_interface_bind+0x78>
   152a0:	4638      	mov	r0, r7
   152a2:	f000 ff41 	bl	16128 <interface_socket_from_handle_get>
   152a6:	2800      	cmp	r0, #0
   152a8:	d0a7      	beq.n	151fa <ip_interface_bind+0x82>
   152aa:	6844      	ldr	r4, [r0, #4]
   152ac:	2c00      	cmp	r4, #0
   152ae:	d0a4      	beq.n	151fa <ip_interface_bind+0x82>
   152b0:	f8c0 8004 	str.w	r8, [r0, #4]
   152b4:	e7df      	b.n	15276 <ip_interface_bind+0xfe>
   152b6:	bf00      	nop

000152b8 <ip_interface_listen>:
   152b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   152bc:	b082      	sub	sp, #8
   152be:	4606      	mov	r6, r0
   152c0:	f000 ff32 	bl	16128 <interface_socket_from_handle_get>
   152c4:	2800      	cmp	r0, #0
   152c6:	d067      	beq.n	15398 <ip_interface_listen+0xe0>
   152c8:	6803      	ldr	r3, [r0, #0]
   152ca:	4605      	mov	r5, r0
   152cc:	b29b      	uxth	r3, r3
   152ce:	2b04      	cmp	r3, #4
   152d0:	d162      	bne.n	15398 <ip_interface_listen+0xe0>
   152d2:	2100      	movs	r1, #0
   152d4:	4a32      	ldr	r2, [pc, #200]	; (153a0 <ip_interface_listen+0xe8>)
   152d6:	4630      	mov	r0, r6
   152d8:	f000 fe7a 	bl	15fd0 <interface_socket_packet_handler_update>
   152dc:	4601      	mov	r1, r0
   152de:	2800      	cmp	r0, #0
   152e0:	d15c      	bne.n	1539c <ip_interface_listen+0xe4>
   152e2:	a802      	add	r0, sp, #8
   152e4:	f840 1d04 	str.w	r1, [r0, #-4]!
   152e8:	69af      	ldr	r7, [r5, #24]
   152ea:	f7fb fe37 	bl	10f5c <rpc_ip_client_request_alloc>
   152ee:	bba8      	cbnz	r0, 1535c <ip_interface_listen+0xa4>
   152f0:	f247 0308 	movw	r3, #28680	; 0x7008
   152f4:	2208      	movs	r2, #8
   152f6:	9c01      	ldr	r4, [sp, #4]
   152f8:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
   152fc:	60e3      	str	r3, [r4, #12]
   152fe:	6127      	str	r7, [r4, #16]
   15300:	7260      	strb	r0, [r4, #9]
   15302:	72a0      	strb	r0, [r4, #10]
   15304:	72e0      	strb	r0, [r4, #11]
   15306:	7222      	strb	r2, [r4, #8]
   15308:	68a3      	ldr	r3, [r4, #8]
   1530a:	f247 0108 	movw	r1, #28680	; 0x7008
   1530e:	3304      	adds	r3, #4
   15310:	60a3      	str	r3, [r4, #8]
   15312:	682b      	ldr	r3, [r5, #0]
   15314:	4620      	mov	r0, r4
   15316:	0c1b      	lsrs	r3, r3, #16
   15318:	041b      	lsls	r3, r3, #16
   1531a:	f043 0306 	orr.w	r3, r3, #6
   1531e:	602b      	str	r3, [r5, #0]
   15320:	682f      	ldr	r7, [r5, #0]
   15322:	f7fb fe2f 	bl	10f84 <rpc_ip_client_request_send>
   15326:	4680      	mov	r8, r0
   15328:	b9e8      	cbnz	r0, 15366 <ip_interface_listen+0xae>
   1532a:	f04f 33ff 	mov.w	r3, #4294967295
   1532e:	f64f 72ff 	movw	r2, #65535	; 0xffff
   15332:	2107      	movs	r1, #7
   15334:	4630      	mov	r0, r6
   15336:	f000 fe83 	bl	16040 <interface_socket_wait>
   1533a:	4604      	mov	r4, r0
   1533c:	b308      	cbz	r0, 15382 <ip_interface_listen+0xca>
   1533e:	682b      	ldr	r3, [r5, #0]
   15340:	0c1b      	lsrs	r3, r3, #16
   15342:	041b      	lsls	r3, r3, #16
   15344:	f043 0304 	orr.w	r3, r3, #4
   15348:	602b      	str	r3, [r5, #0]
   1534a:	4620      	mov	r0, r4
   1534c:	f7fa fa4a 	bl	f7e4 <bsd_os_errno_set>
   15350:	f04f 34ff 	mov.w	r4, #4294967295
   15354:	4620      	mov	r0, r4
   15356:	b002      	add	sp, #8
   15358:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1535c:	9c01      	ldr	r4, [sp, #4]
   1535e:	2c00      	cmp	r4, #0
   15360:	d1d2      	bne.n	15308 <ip_interface_listen+0x50>
   15362:	240c      	movs	r4, #12
   15364:	e7f1      	b.n	1534a <ip_interface_listen+0x92>
   15366:	6820      	ldr	r0, [r4, #0]
   15368:	b108      	cbz	r0, 1536e <ip_interface_listen+0xb6>
   1536a:	f7fb fe29 	bl	10fc0 <rpc_ip_client_data_free>
   1536e:	0c3f      	lsrs	r7, r7, #16
   15370:	043f      	lsls	r7, r7, #16
   15372:	4620      	mov	r0, r4
   15374:	f047 0704 	orr.w	r7, r7, #4
   15378:	f7fb fe1a 	bl	10fb0 <rpc_ip_client_message_free>
   1537c:	2423      	movs	r4, #35	; 0x23
   1537e:	602f      	str	r7, [r5, #0]
   15380:	e7e3      	b.n	1534a <ip_interface_listen+0x92>
   15382:	4630      	mov	r0, r6
   15384:	f000 fed0 	bl	16128 <interface_socket_from_handle_get>
   15388:	2800      	cmp	r0, #0
   1538a:	d0e3      	beq.n	15354 <ip_interface_listen+0x9c>
   1538c:	6844      	ldr	r4, [r0, #4]
   1538e:	2c00      	cmp	r4, #0
   15390:	d0e0      	beq.n	15354 <ip_interface_listen+0x9c>
   15392:	f8c0 8004 	str.w	r8, [r0, #4]
   15396:	e7d2      	b.n	1533e <ip_interface_listen+0x86>
   15398:	2409      	movs	r4, #9
   1539a:	e7d6      	b.n	1534a <ip_interface_listen+0x92>
   1539c:	2423      	movs	r4, #35	; 0x23
   1539e:	e7d4      	b.n	1534a <ip_interface_listen+0x92>
   153a0:	0001477d 	.word	0x0001477d

000153a4 <ip_interface_accept>:
   153a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   153a8:	2500      	movs	r5, #0
   153aa:	b085      	sub	sp, #20
   153ac:	460f      	mov	r7, r1
   153ae:	4690      	mov	r8, r2
   153b0:	9502      	str	r5, [sp, #8]
   153b2:	4606      	mov	r6, r0
   153b4:	f000 feb8 	bl	16128 <interface_socket_from_handle_get>
   153b8:	4604      	mov	r4, r0
   153ba:	2800      	cmp	r0, #0
   153bc:	f000 811c 	beq.w	155f8 <ip_interface_accept+0x254>
   153c0:	6803      	ldr	r3, [r0, #0]
   153c2:	b29b      	uxth	r3, r3
   153c4:	2b07      	cmp	r3, #7
   153c6:	d10a      	bne.n	153de <ip_interface_accept+0x3a>
   153c8:	6803      	ldr	r3, [r0, #0]
   153ca:	6805      	ldr	r5, [r0, #0]
   153cc:	00db      	lsls	r3, r3, #3
   153ce:	d416      	bmi.n	153fe <ip_interface_accept+0x5a>
   153d0:	f415 3580 	ands.w	r5, r5, #65536	; 0x10000
   153d4:	d019      	beq.n	1540a <ip_interface_accept+0x66>
   153d6:	6805      	ldr	r5, [r0, #0]
   153d8:	f415 3580 	ands.w	r5, r5, #65536	; 0x10000
   153dc:	d124      	bne.n	15428 <ip_interface_accept+0x84>
   153de:	f04f 0909 	mov.w	r9, #9
   153e2:	9b02      	ldr	r3, [sp, #8]
   153e4:	b113      	cbz	r3, 153ec <ip_interface_accept+0x48>
   153e6:	4628      	mov	r0, r5
   153e8:	f000 fddc 	bl	15fa4 <interface_socket_free>
   153ec:	4648      	mov	r0, r9
   153ee:	f04f 39ff 	mov.w	r9, #4294967295
   153f2:	f7fa f9f7 	bl	f7e4 <bsd_os_errno_set>
   153f6:	4648      	mov	r0, r9
   153f8:	b005      	add	sp, #20
   153fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   153fe:	f415 3580 	ands.w	r5, r5, #65536	; 0x10000
   15402:	d16d      	bne.n	154e0 <ip_interface_accept+0x13c>
   15404:	f04f 0923 	mov.w	r9, #35	; 0x23
   15408:	e7eb      	b.n	153e2 <ip_interface_accept+0x3e>
   1540a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
   1540e:	f04f 33ff 	mov.w	r3, #4294967295
   15412:	4611      	mov	r1, r2
   15414:	4630      	mov	r0, r6
   15416:	f000 fe13 	bl	16040 <interface_socket_wait>
   1541a:	4681      	mov	r9, r0
   1541c:	2800      	cmp	r0, #0
   1541e:	d07e      	beq.n	1551e <ip_interface_accept+0x17a>
   15420:	6825      	ldr	r5, [r4, #0]
   15422:	f415 3580 	ands.w	r5, r5, #65536	; 0x10000
   15426:	d0dc      	beq.n	153e2 <ip_interface_accept+0x3e>
   15428:	f04f 30ff 	mov.w	r0, #4294967295
   1542c:	2300      	movs	r3, #0
   1542e:	e9cd 0300 	strd	r0, r3, [sp]
   15432:	4a75      	ldr	r2, [pc, #468]	; (15608 <ip_interface_accept+0x264>)
   15434:	6921      	ldr	r1, [r4, #16]
   15436:	a802      	add	r0, sp, #8
   15438:	f000 fd50 	bl	15edc <interface_socket_allocate>
   1543c:	9b02      	ldr	r3, [sp, #8]
   1543e:	4605      	mov	r5, r0
   15440:	2b00      	cmp	r3, #0
   15442:	f000 80dd 	beq.w	15600 <ip_interface_accept+0x25c>
   15446:	2100      	movs	r1, #0
   15448:	6962      	ldr	r2, [r4, #20]
   1544a:	a804      	add	r0, sp, #16
   1544c:	615a      	str	r2, [r3, #20]
   1544e:	68e2      	ldr	r2, [r4, #12]
   15450:	f840 1d04 	str.w	r1, [r0, #-4]!
   15454:	60da      	str	r2, [r3, #12]
   15456:	6922      	ldr	r2, [r4, #16]
   15458:	611a      	str	r2, [r3, #16]
   1545a:	f8d4 9018 	ldr.w	r9, [r4, #24]
   1545e:	f7fb fd7d 	bl	10f5c <rpc_ip_client_request_alloc>
   15462:	2800      	cmp	r0, #0
   15464:	d143      	bne.n	154ee <ip_interface_accept+0x14a>
   15466:	f247 030c 	movw	r3, #28684	; 0x700c
   1546a:	2108      	movs	r1, #8
   1546c:	f8dd b00c 	ldr.w	fp, [sp, #12]
   15470:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
   15474:	f8cb 300c 	str.w	r3, [fp, #12]
   15478:	f8cb 9010 	str.w	r9, [fp, #16]
   1547c:	f88b 0009 	strb.w	r0, [fp, #9]
   15480:	f88b 000a 	strb.w	r0, [fp, #10]
   15484:	f88b 000b 	strb.w	r0, [fp, #11]
   15488:	f88b 1008 	strb.w	r1, [fp, #8]
   1548c:	6823      	ldr	r3, [r4, #0]
   1548e:	f247 010c 	movw	r1, #28684	; 0x700c
   15492:	0c1b      	lsrs	r3, r3, #16
   15494:	041b      	lsls	r3, r3, #16
   15496:	f043 0308 	orr.w	r3, r3, #8
   1549a:	6023      	str	r3, [r4, #0]
   1549c:	4658      	mov	r0, fp
   1549e:	f8d4 9000 	ldr.w	r9, [r4]
   154a2:	f7fb fd6f 	bl	10f84 <rpc_ip_client_request_send>
   154a6:	4682      	mov	sl, r0
   154a8:	bb48      	cbnz	r0, 154fe <ip_interface_accept+0x15a>
   154aa:	6822      	ldr	r2, [r4, #0]
   154ac:	9900      	ldr	r1, [sp, #0]
   154ae:	f04f 33ff 	mov.w	r3, #4294967295
   154b2:	400a      	ands	r2, r1
   154b4:	6022      	str	r2, [r4, #0]
   154b6:	2109      	movs	r1, #9
   154b8:	f64f 72ff 	movw	r2, #65535	; 0xffff
   154bc:	4630      	mov	r0, r6
   154be:	f000 fdbf 	bl	16040 <interface_socket_wait>
   154c2:	4681      	mov	r9, r0
   154c4:	2800      	cmp	r0, #0
   154c6:	f000 8085 	beq.w	155d4 <ip_interface_accept+0x230>
   154ca:	6823      	ldr	r3, [r4, #0]
   154cc:	9a01      	ldr	r2, [sp, #4]
   154ce:	431a      	orrs	r2, r3
   154d0:	6022      	str	r2, [r4, #0]
   154d2:	6823      	ldr	r3, [r4, #0]
   154d4:	0c1b      	lsrs	r3, r3, #16
   154d6:	041b      	lsls	r3, r3, #16
   154d8:	f043 0307 	orr.w	r3, r3, #7
   154dc:	6023      	str	r3, [r4, #0]
   154de:	e780      	b.n	153e2 <ip_interface_accept+0x3e>
   154e0:	f06f 5280 	mvn.w	r2, #268435456	; 0x10000000
   154e4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   154e8:	e9cd 2300 	strd	r2, r3, [sp]
   154ec:	e7a1      	b.n	15432 <ip_interface_accept+0x8e>
   154ee:	f8dd b00c 	ldr.w	fp, [sp, #12]
   154f2:	f04f 090c 	mov.w	r9, #12
   154f6:	f1bb 0f00 	cmp.w	fp, #0
   154fa:	d1c7      	bne.n	1548c <ip_interface_accept+0xe8>
   154fc:	e771      	b.n	153e2 <ip_interface_accept+0x3e>
   154fe:	f8db 0000 	ldr.w	r0, [fp]
   15502:	b108      	cbz	r0, 15508 <ip_interface_accept+0x164>
   15504:	f7fb fd5c 	bl	10fc0 <rpc_ip_client_data_free>
   15508:	ea4f 4919 	mov.w	r9, r9, lsr #16
   1550c:	4658      	mov	r0, fp
   1550e:	ea4f 4909 	mov.w	r9, r9, lsl #16
   15512:	f7fb fd4d 	bl	10fb0 <rpc_ip_client_message_free>
   15516:	f049 0307 	orr.w	r3, r9, #7
   1551a:	6023      	str	r3, [r4, #0]
   1551c:	e772      	b.n	15404 <ip_interface_accept+0x60>
   1551e:	4630      	mov	r0, r6
   15520:	f000 fe02 	bl	16128 <interface_socket_from_handle_get>
   15524:	b130      	cbz	r0, 15534 <ip_interface_accept+0x190>
   15526:	f8d0 9004 	ldr.w	r9, [r0, #4]
   1552a:	f1b9 0f00 	cmp.w	r9, #0
   1552e:	d001      	beq.n	15534 <ip_interface_accept+0x190>
   15530:	6045      	str	r5, [r0, #4]
   15532:	e775      	b.n	15420 <ip_interface_accept+0x7c>
   15534:	6823      	ldr	r3, [r4, #0]
   15536:	03d9      	lsls	r1, r3, #15
   15538:	f53f af76 	bmi.w	15428 <ip_interface_accept+0x84>
   1553c:	4d33      	ldr	r5, [pc, #204]	; (1560c <ip_interface_accept+0x268>)
   1553e:	9902      	ldr	r1, [sp, #8]
   15540:	f855 3026 	ldr.w	r3, [r5, r6, lsl #2]
   15544:	699b      	ldr	r3, [r3, #24]
   15546:	618b      	str	r3, [r1, #24]
   15548:	b147      	cbz	r7, 1555c <ip_interface_accept+0x1b8>
   1554a:	68cb      	ldr	r3, [r1, #12]
   1554c:	2b0a      	cmp	r3, #10
   1554e:	d024      	beq.n	1559a <ip_interface_accept+0x1f6>
   15550:	2b02      	cmp	r3, #2
   15552:	d103      	bne.n	1555c <ip_interface_accept+0x1b8>
   15554:	f8d8 2000 	ldr.w	r2, [r8]
   15558:	2a10      	cmp	r2, #16
   1555a:	d032      	beq.n	155c2 <ip_interface_accept+0x21e>
   1555c:	680a      	ldr	r2, [r1, #0]
   1555e:	482c      	ldr	r0, [pc, #176]	; (15610 <ip_interface_accept+0x26c>)
   15560:	4002      	ands	r2, r0
   15562:	f042 0205 	orr.w	r2, r2, #5
   15566:	600a      	str	r2, [r1, #0]
   15568:	9a02      	ldr	r2, [sp, #8]
   1556a:	6811      	ldr	r1, [r2, #0]
   1556c:	f441 3100 	orr.w	r1, r1, #131072	; 0x20000
   15570:	6011      	str	r1, [r2, #0]
   15572:	6811      	ldr	r1, [r2, #0]
   15574:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   15578:	6011      	str	r1, [r2, #0]
   1557a:	6823      	ldr	r3, [r4, #0]
   1557c:	4003      	ands	r3, r0
   1557e:	f043 0307 	orr.w	r3, r3, #7
   15582:	6023      	str	r3, [r4, #0]
   15584:	f855 0026 	ldr.w	r0, [r5, r6, lsl #2]
   15588:	f7fb fd12 	bl	10fb0 <rpc_ip_client_message_free>
   1558c:	2300      	movs	r3, #0
   1558e:	4648      	mov	r0, r9
   15590:	f845 3026 	str.w	r3, [r5, r6, lsl #2]
   15594:	b005      	add	sp, #20
   15596:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1559a:	f8d8 2000 	ldr.w	r2, [r8]
   1559e:	2a24      	cmp	r2, #36	; 0x24
   155a0:	d1dc      	bne.n	1555c <ip_interface_accept+0x1b8>
   155a2:	703a      	strb	r2, [r7, #0]
   155a4:	2210      	movs	r2, #16
   155a6:	607b      	str	r3, [r7, #4]
   155a8:	f855 3026 	ldr.w	r3, [r5, r6, lsl #2]
   155ac:	f107 0010 	add.w	r0, r7, #16
   155b0:	8b9b      	ldrh	r3, [r3, #28]
   155b2:	813b      	strh	r3, [r7, #8]
   155b4:	f855 1026 	ldr.w	r1, [r5, r6, lsl #2]
   155b8:	3120      	adds	r1, #32
   155ba:	f005 f934 	bl	1a826 <memcpy>
   155be:	9902      	ldr	r1, [sp, #8]
   155c0:	e7cc      	b.n	1555c <ip_interface_accept+0x1b8>
   155c2:	703a      	strb	r2, [r7, #0]
   155c4:	607b      	str	r3, [r7, #4]
   155c6:	f855 3026 	ldr.w	r3, [r5, r6, lsl #2]
   155ca:	f107 000c 	add.w	r0, r7, #12
   155ce:	8b9b      	ldrh	r3, [r3, #28]
   155d0:	2204      	movs	r2, #4
   155d2:	e7ee      	b.n	155b2 <ip_interface_accept+0x20e>
   155d4:	4630      	mov	r0, r6
   155d6:	f000 fda7 	bl	16128 <interface_socket_from_handle_get>
   155da:	b138      	cbz	r0, 155ec <ip_interface_accept+0x248>
   155dc:	f8d0 9004 	ldr.w	r9, [r0, #4]
   155e0:	f1b9 0f00 	cmp.w	r9, #0
   155e4:	d002      	beq.n	155ec <ip_interface_accept+0x248>
   155e6:	f8c0 a004 	str.w	sl, [r0, #4]
   155ea:	e76e      	b.n	154ca <ip_interface_accept+0x126>
   155ec:	6823      	ldr	r3, [r4, #0]
   155ee:	9a01      	ldr	r2, [sp, #4]
   155f0:	46a9      	mov	r9, r5
   155f2:	4313      	orrs	r3, r2
   155f4:	6023      	str	r3, [r4, #0]
   155f6:	e7a1      	b.n	1553c <ip_interface_accept+0x198>
   155f8:	4605      	mov	r5, r0
   155fa:	f04f 0909 	mov.w	r9, #9
   155fe:	e6f0      	b.n	153e2 <ip_interface_accept+0x3e>
   15600:	f04f 090c 	mov.w	r9, #12
   15604:	e6f2      	b.n	153ec <ip_interface_accept+0x48>
   15606:	bf00      	nop
   15608:	0001477d 	.word	0x0001477d
   1560c:	200207f0 	.word	0x200207f0
   15610:	ffff0000 	.word	0xffff0000

00015614 <ip_interface_setopt>:
   15614:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   15618:	2901      	cmp	r1, #1
   1561a:	b084      	sub	sp, #16
   1561c:	f040 809c 	bne.w	15758 <ip_interface_setopt+0x144>
   15620:	460e      	mov	r6, r1
   15622:	4690      	mov	r8, r2
   15624:	461d      	mov	r5, r3
   15626:	4607      	mov	r7, r0
   15628:	f000 fd7e 	bl	16128 <interface_socket_from_handle_get>
   1562c:	4604      	mov	r4, r0
   1562e:	2800      	cmp	r0, #0
   15630:	f000 80a5 	beq.w	1577e <ip_interface_setopt+0x16a>
   15634:	f1b8 0f19 	cmp.w	r8, #25
   15638:	d16e      	bne.n	15718 <ip_interface_setopt+0x104>
   1563a:	2d00      	cmp	r5, #0
   1563c:	f000 8092 	beq.w	15764 <ip_interface_setopt+0x150>
   15640:	4628      	mov	r0, r5
   15642:	f005 f8be 	bl	1a7c2 <strlen>
   15646:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   15648:	4298      	cmp	r0, r3
   1564a:	f040 808b 	bne.w	15764 <ip_interface_setopt+0x150>
   1564e:	6823      	ldr	r3, [r4, #0]
   15650:	b29b      	uxth	r3, r3
   15652:	2b02      	cmp	r3, #2
   15654:	d173      	bne.n	1573e <ip_interface_setopt+0x12a>
   15656:	4629      	mov	r1, r5
   15658:	68e0      	ldr	r0, [r4, #12]
   1565a:	f7fe fb2b 	bl	13cb4 <pdn_interface_pdn_id_get>
   1565e:	9002      	str	r0, [sp, #8]
   15660:	3001      	adds	r0, #1
   15662:	bf08      	it	eq
   15664:	2516      	moveq	r5, #22
   15666:	d04e      	beq.n	15706 <ip_interface_setopt+0xf2>
   15668:	6823      	ldr	r3, [r4, #0]
   1566a:	025b      	lsls	r3, r3, #9
   1566c:	d44a      	bmi.n	15704 <ip_interface_setopt+0xf0>
   1566e:	6823      	ldr	r3, [r4, #0]
   15670:	f413 0300 	ands.w	r3, r3, #8388608	; 0x800000
   15674:	d146      	bne.n	15704 <ip_interface_setopt+0xf0>
   15676:	6826      	ldr	r6, [r4, #0]
   15678:	6822      	ldr	r2, [r4, #0]
   1567a:	a804      	add	r0, sp, #16
   1567c:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
   15680:	6022      	str	r2, [r4, #0]
   15682:	2104      	movs	r1, #4
   15684:	f840 3d04 	str.w	r3, [r0, #-4]!
   15688:	f8d4 8018 	ldr.w	r8, [r4, #24]
   1568c:	f7fb fc66 	bl	10f5c <rpc_ip_client_request_alloc>
   15690:	2800      	cmp	r0, #0
   15692:	d14e      	bne.n	15732 <ip_interface_setopt+0x11e>
   15694:	f247 0203 	movw	r2, #28675	; 0x7003
   15698:	2300      	movs	r3, #0
   1569a:	2108      	movs	r1, #8
   1569c:	9d03      	ldr	r5, [sp, #12]
   1569e:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
   156a2:	60ea      	str	r2, [r5, #12]
   156a4:	f8c5 8010 	str.w	r8, [r5, #16]
   156a8:	7229      	strb	r1, [r5, #8]
   156aa:	726b      	strb	r3, [r5, #9]
   156ac:	72ab      	strb	r3, [r5, #10]
   156ae:	72eb      	strb	r3, [r5, #11]
   156b0:	f04f 0c08 	mov.w	ip, #8
   156b4:	2300      	movs	r3, #0
   156b6:	2010      	movs	r0, #16
   156b8:	2130      	movs	r1, #48	; 0x30
   156ba:	68aa      	ldr	r2, [r5, #8]
   156bc:	756b      	strb	r3, [r5, #21]
   156be:	4462      	add	r2, ip
   156c0:	60aa      	str	r2, [r5, #8]
   156c2:	75ab      	strb	r3, [r5, #22]
   156c4:	75eb      	strb	r3, [r5, #23]
   156c6:	76ab      	strb	r3, [r5, #26]
   156c8:	76eb      	strb	r3, [r5, #27]
   156ca:	f885 c014 	strb.w	ip, [r5, #20]
   156ce:	7628      	strb	r0, [r5, #24]
   156d0:	7669      	strb	r1, [r5, #25]
   156d2:	2204      	movs	r2, #4
   156d4:	eb0d 010c 	add.w	r1, sp, ip
   156d8:	6828      	ldr	r0, [r5, #0]
   156da:	f005 f8a4 	bl	1a826 <memcpy>
   156de:	f247 0103 	movw	r1, #28675	; 0x7003
   156e2:	4628      	mov	r0, r5
   156e4:	f7fb fc4e 	bl	10f84 <rpc_ip_client_request_send>
   156e8:	4680      	mov	r8, r0
   156ea:	bb50      	cbnz	r0, 15742 <ip_interface_setopt+0x12e>
   156ec:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
   156f0:	f04f 33ff 	mov.w	r3, #4294967295
   156f4:	4611      	mov	r1, r2
   156f6:	4638      	mov	r0, r7
   156f8:	f000 fca2 	bl	16040 <interface_socket_wait>
   156fc:	4605      	mov	r5, r0
   156fe:	b398      	cbz	r0, 15768 <ip_interface_setopt+0x154>
   15700:	6026      	str	r6, [r4, #0]
   15702:	e000      	b.n	15706 <ip_interface_setopt+0xf2>
   15704:	2523      	movs	r5, #35	; 0x23
   15706:	4628      	mov	r0, r5
   15708:	f7fa f86c 	bl	f7e4 <bsd_os_errno_set>
   1570c:	f04f 35ff 	mov.w	r5, #4294967295
   15710:	4628      	mov	r0, r5
   15712:	b004      	add	sp, #16
   15714:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   15718:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   1571a:	4642      	mov	r2, r8
   1571c:	9300      	str	r3, [sp, #0]
   1571e:	4631      	mov	r1, r6
   15720:	462b      	mov	r3, r5
   15722:	4638      	mov	r0, r7
   15724:	f000 fd28 	bl	16178 <interface_socket_setopt>
   15728:	4605      	mov	r5, r0
   1572a:	4628      	mov	r0, r5
   1572c:	b004      	add	sp, #16
   1572e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   15732:	9d03      	ldr	r5, [sp, #12]
   15734:	2d00      	cmp	r5, #0
   15736:	d1bb      	bne.n	156b0 <ip_interface_setopt+0x9c>
   15738:	6026      	str	r6, [r4, #0]
   1573a:	250c      	movs	r5, #12
   1573c:	e7e3      	b.n	15706 <ip_interface_setopt+0xf2>
   1573e:	2509      	movs	r5, #9
   15740:	e7e1      	b.n	15706 <ip_interface_setopt+0xf2>
   15742:	6828      	ldr	r0, [r5, #0]
   15744:	b108      	cbz	r0, 1574a <ip_interface_setopt+0x136>
   15746:	f7fb fc3b 	bl	10fc0 <rpc_ip_client_data_free>
   1574a:	4628      	mov	r0, r5
   1574c:	f7fb fc30 	bl	10fb0 <rpc_ip_client_message_free>
   15750:	2523      	movs	r5, #35	; 0x23
   15752:	6026      	str	r6, [r4, #0]
   15754:	6026      	str	r6, [r4, #0]
   15756:	e7d6      	b.n	15706 <ip_interface_setopt+0xf2>
   15758:	202a      	movs	r0, #42	; 0x2a
   1575a:	f7fa f843 	bl	f7e4 <bsd_os_errno_set>
   1575e:	f04f 35ff 	mov.w	r5, #4294967295
   15762:	e7d5      	b.n	15710 <ip_interface_setopt+0xfc>
   15764:	250e      	movs	r5, #14
   15766:	e7ce      	b.n	15706 <ip_interface_setopt+0xf2>
   15768:	4638      	mov	r0, r7
   1576a:	f000 fcdd 	bl	16128 <interface_socket_from_handle_get>
   1576e:	b120      	cbz	r0, 1577a <ip_interface_setopt+0x166>
   15770:	6845      	ldr	r5, [r0, #4]
   15772:	b115      	cbz	r5, 1577a <ip_interface_setopt+0x166>
   15774:	f8c0 8004 	str.w	r8, [r0, #4]
   15778:	e7c2      	b.n	15700 <ip_interface_setopt+0xec>
   1577a:	6026      	str	r6, [r4, #0]
   1577c:	e7c8      	b.n	15710 <ip_interface_setopt+0xfc>
   1577e:	2009      	movs	r0, #9
   15780:	f7fa f830 	bl	f7e4 <bsd_os_errno_set>
   15784:	f04f 35ff 	mov.w	r5, #4294967295
   15788:	e7c2      	b.n	15710 <ip_interface_setopt+0xfc>
   1578a:	bf00      	nop

0001578c <ip_interface_getopt>:
   1578c:	f000 bd36 	b.w	161fc <interface_socket_getopt>

00015790 <ip_interface_getaddrinfo>:
   15790:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15794:	f04f 0c00 	mov.w	ip, #0
   15798:	2401      	movs	r4, #1
   1579a:	4e72      	ldr	r6, [pc, #456]	; (15964 <ip_interface_getaddrinfo+0x1d4>)
   1579c:	f8df a1d0 	ldr.w	sl, [pc, #464]	; 15970 <ip_interface_getaddrinfo+0x1e0>
   157a0:	f8df 91d0 	ldr.w	r9, [pc, #464]	; 15974 <ip_interface_getaddrinfo+0x1e4>
   157a4:	b085      	sub	sp, #20
   157a6:	4607      	mov	r7, r0
   157a8:	4615      	mov	r5, r2
   157aa:	9301      	str	r3, [sp, #4]
   157ac:	f8a6 c000 	strh.w	ip, [r6]
   157b0:	f8ca 4000 	str.w	r4, [sl]
   157b4:	f8c9 4000 	str.w	r4, [r9]
   157b8:	b171      	cbz	r1, 157d8 <ip_interface_getaddrinfo+0x48>
   157ba:	4608      	mov	r0, r1
   157bc:	220a      	movs	r2, #10
   157be:	4661      	mov	r1, ip
   157c0:	f004 ff41 	bl	1a646 <strtol>
   157c4:	f64f 73fe 	movw	r3, #65534	; 0xfffe
   157c8:	1e42      	subs	r2, r0, #1
   157ca:	429a      	cmp	r2, r3
   157cc:	f200 8083 	bhi.w	158d6 <ip_interface_getaddrinfo+0x146>
   157d0:	0203      	lsls	r3, r0, #8
   157d2:	ea43 2020 	orr.w	r0, r3, r0, asr #8
   157d6:	8030      	strh	r0, [r6, #0]
   157d8:	f8df 819c 	ldr.w	r8, [pc, #412]	; 15978 <ip_interface_getaddrinfo+0x1e8>
   157dc:	f8d8 3000 	ldr.w	r3, [r8]
   157e0:	2b00      	cmp	r3, #0
   157e2:	d174      	bne.n	158ce <ip_interface_getaddrinfo+0x13e>
   157e4:	4a60      	ldr	r2, [pc, #384]	; (15968 <ip_interface_getaddrinfo+0x1d8>)
   157e6:	6013      	str	r3, [r2, #0]
   157e8:	4a60      	ldr	r2, [pc, #384]	; (1596c <ip_interface_getaddrinfo+0x1dc>)
   157ea:	6013      	str	r3, [r2, #0]
   157ec:	2f00      	cmp	r7, #0
   157ee:	d062      	beq.n	158b6 <ip_interface_getaddrinfo+0x126>
   157f0:	4638      	mov	r0, r7
   157f2:	f004 ffe6 	bl	1a7c2 <strlen>
   157f6:	4683      	mov	fp, r0
   157f8:	b125      	cbz	r5, 15804 <ip_interface_getaddrinfo+0x74>
   157fa:	69ea      	ldr	r2, [r5, #28]
   157fc:	b112      	cbz	r2, 15804 <ip_interface_getaddrinfo+0x74>
   157fe:	6851      	ldr	r1, [r2, #4]
   15800:	2966      	cmp	r1, #102	; 0x66
   15802:	d06c      	beq.n	158de <ip_interface_getaddrinfo+0x14e>
   15804:	f04f 32ff 	mov.w	r2, #4294967295
   15808:	2100      	movs	r1, #0
   1580a:	ae04      	add	r6, sp, #16
   1580c:	f846 1d04 	str.w	r1, [r6, #-4]!
   15810:	4630      	mov	r0, r6
   15812:	4659      	mov	r1, fp
   15814:	9200      	str	r2, [sp, #0]
   15816:	f7fb fba1 	bl	10f5c <rpc_ip_client_request_alloc>
   1581a:	9a00      	ldr	r2, [sp, #0]
   1581c:	2800      	cmp	r0, #0
   1581e:	d14c      	bne.n	158ba <ip_interface_getaddrinfo+0x12a>
   15820:	f247 010d 	movw	r1, #28685	; 0x700d
   15824:	f04f 0c08 	mov.w	ip, #8
   15828:	9c03      	ldr	r4, [sp, #12]
   1582a:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
   1582e:	60e1      	str	r1, [r4, #12]
   15830:	6122      	str	r2, [r4, #16]
   15832:	7260      	strb	r0, [r4, #9]
   15834:	72a0      	strb	r0, [r4, #10]
   15836:	72e0      	strb	r0, [r4, #11]
   15838:	f884 c008 	strb.w	ip, [r4, #8]
   1583c:	2d00      	cmp	r5, #0
   1583e:	d076      	beq.n	1592e <ip_interface_getaddrinfo+0x19e>
   15840:	686a      	ldr	r2, [r5, #4]
   15842:	f022 0108 	bic.w	r1, r2, #8
   15846:	2902      	cmp	r1, #2
   15848:	d05c      	beq.n	15904 <ip_interface_getaddrinfo+0x174>
   1584a:	2a05      	cmp	r2, #5
   1584c:	d178      	bne.n	15940 <ip_interface_getaddrinfo+0x1b0>
   1584e:	68a9      	ldr	r1, [r5, #8]
   15850:	2902      	cmp	r1, #2
   15852:	f8c9 1000 	str.w	r1, [r9]
   15856:	d061      	beq.n	1591c <ip_interface_getaddrinfo+0x18c>
   15858:	61a2      	str	r2, [r4, #24]
   1585a:	68ea      	ldr	r2, [r5, #12]
   1585c:	6222      	str	r2, [r4, #32]
   1585e:	68aa      	ldr	r2, [r5, #8]
   15860:	61e2      	str	r2, [r4, #28]
   15862:	682a      	ldr	r2, [r5, #0]
   15864:	6162      	str	r2, [r4, #20]
   15866:	68a2      	ldr	r2, [r4, #8]
   15868:	3210      	adds	r2, #16
   1586a:	60a2      	str	r2, [r4, #8]
   1586c:	b12f      	cbz	r7, 1587a <ip_interface_getaddrinfo+0xea>
   1586e:	6820      	ldr	r0, [r4, #0]
   15870:	b118      	cbz	r0, 1587a <ip_interface_getaddrinfo+0xea>
   15872:	465a      	mov	r2, fp
   15874:	4639      	mov	r1, r7
   15876:	f004 ffd6 	bl	1a826 <memcpy>
   1587a:	2301      	movs	r3, #1
   1587c:	f247 010d 	movw	r1, #28685	; 0x700d
   15880:	4620      	mov	r0, r4
   15882:	f8c8 3000 	str.w	r3, [r8]
   15886:	f7fb fb7d 	bl	10f84 <rpc_ip_client_request_send>
   1588a:	2800      	cmp	r0, #0
   1588c:	d156      	bne.n	1593c <ip_interface_getaddrinfo+0x1ac>
   1588e:	f04f 33ff 	mov.w	r3, #4294967295
   15892:	9303      	str	r3, [sp, #12]
   15894:	4631      	mov	r1, r6
   15896:	4620      	mov	r0, r4
   15898:	f7f9 ff10 	bl	f6bc <bsd_os_timedwait>
   1589c:	f8d8 3000 	ldr.w	r3, [r8]
   158a0:	2b01      	cmp	r3, #1
   158a2:	d0f7      	beq.n	15894 <ip_interface_getaddrinfo+0x104>
   158a4:	4b31      	ldr	r3, [pc, #196]	; (1596c <ip_interface_getaddrinfo+0x1dc>)
   158a6:	6818      	ldr	r0, [r3, #0]
   158a8:	2800      	cmp	r0, #0
   158aa:	d13b      	bne.n	15924 <ip_interface_getaddrinfo+0x194>
   158ac:	4b2e      	ldr	r3, [pc, #184]	; (15968 <ip_interface_getaddrinfo+0x1d8>)
   158ae:	9a01      	ldr	r2, [sp, #4]
   158b0:	681b      	ldr	r3, [r3, #0]
   158b2:	6013      	str	r3, [r2, #0]
   158b4:	e00c      	b.n	158d0 <ip_interface_getaddrinfo+0x140>
   158b6:	46bb      	mov	fp, r7
   158b8:	e79e      	b.n	157f8 <ip_interface_getaddrinfo+0x68>
   158ba:	9c03      	ldr	r4, [sp, #12]
   158bc:	2c00      	cmp	r4, #0
   158be:	d1bd      	bne.n	1583c <ip_interface_getaddrinfo+0xac>
   158c0:	200c      	movs	r0, #12
   158c2:	2300      	movs	r3, #0
   158c4:	f8c8 3000 	str.w	r3, [r8]
   158c8:	b005      	add	sp, #20
   158ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   158ce:	2073      	movs	r0, #115	; 0x73
   158d0:	b005      	add	sp, #20
   158d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   158d6:	2016      	movs	r0, #22
   158d8:	b005      	add	sp, #20
   158da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   158de:	6891      	ldr	r1, [r2, #8]
   158e0:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
   158e4:	d18e      	bne.n	15804 <ip_interface_getaddrinfo+0x74>
   158e6:	f240 2102 	movw	r1, #514	; 0x202
   158ea:	68d0      	ldr	r0, [r2, #12]
   158ec:	4288      	cmp	r0, r1
   158ee:	d189      	bne.n	15804 <ip_interface_getaddrinfo+0x74>
   158f0:	6991      	ldr	r1, [r2, #24]
   158f2:	2900      	cmp	r1, #0
   158f4:	d086      	beq.n	15804 <ip_interface_getaddrinfo+0x74>
   158f6:	6868      	ldr	r0, [r5, #4]
   158f8:	f7fe f9dc 	bl	13cb4 <pdn_interface_pdn_id_get>
   158fc:	1c43      	adds	r3, r0, #1
   158fe:	d081      	beq.n	15804 <ip_interface_getaddrinfo+0x74>
   15900:	4602      	mov	r2, r0
   15902:	e781      	b.n	15808 <ip_interface_getaddrinfo+0x78>
   15904:	68a9      	ldr	r1, [r5, #8]
   15906:	2902      	cmp	r1, #2
   15908:	f8c9 1000 	str.w	r1, [r9]
   1590c:	d006      	beq.n	1591c <ip_interface_getaddrinfo+0x18c>
   1590e:	2a05      	cmp	r2, #5
   15910:	d0a2      	beq.n	15858 <ip_interface_getaddrinfo+0xc8>
   15912:	2a0a      	cmp	r2, #10
   15914:	bf14      	ite	ne
   15916:	2201      	movne	r2, #1
   15918:	2202      	moveq	r2, #2
   1591a:	e79d      	b.n	15858 <ip_interface_getaddrinfo+0xc8>
   1591c:	2102      	movs	r1, #2
   1591e:	f8ca 1000 	str.w	r1, [sl]
   15922:	e7f4      	b.n	1590e <ip_interface_getaddrinfo+0x17e>
   15924:	4b11      	ldr	r3, [pc, #68]	; (1596c <ip_interface_getaddrinfo+0x1dc>)
   15926:	6818      	ldr	r0, [r3, #0]
   15928:	2800      	cmp	r0, #0
   1592a:	d0d1      	beq.n	158d0 <ip_interface_getaddrinfo+0x140>
   1592c:	e7c9      	b.n	158c2 <ip_interface_getaddrinfo+0x132>
   1592e:	4629      	mov	r1, r5
   15930:	2210      	movs	r2, #16
   15932:	f104 0014 	add.w	r0, r4, #20
   15936:	f004 ffa0 	bl	1a87a <memset>
   1593a:	e794      	b.n	15866 <ip_interface_getaddrinfo+0xd6>
   1593c:	2023      	movs	r0, #35	; 0x23
   1593e:	e7c0      	b.n	158c2 <ip_interface_getaddrinfo+0x132>
   15940:	202f      	movs	r0, #47	; 0x2f
   15942:	f7f9 ff4f 	bl	f7e4 <bsd_os_errno_set>
   15946:	68a2      	ldr	r2, [r4, #8]
   15948:	3210      	adds	r2, #16
   1594a:	60a2      	str	r2, [r4, #8]
   1594c:	b917      	cbnz	r7, 15954 <ip_interface_getaddrinfo+0x1c4>
   1594e:	f04f 30ff 	mov.w	r0, #4294967295
   15952:	e7b6      	b.n	158c2 <ip_interface_getaddrinfo+0x132>
   15954:	6820      	ldr	r0, [r4, #0]
   15956:	2800      	cmp	r0, #0
   15958:	d0f9      	beq.n	1594e <ip_interface_getaddrinfo+0x1be>
   1595a:	465a      	mov	r2, fp
   1595c:	4639      	mov	r1, r7
   1595e:	f004 ff62 	bl	1a826 <memcpy>
   15962:	e7f4      	b.n	1594e <ip_interface_getaddrinfo+0x1be>
   15964:	20024cce 	.word	0x20024cce
   15968:	200207e8 	.word	0x200207e8
   1596c:	200207e0 	.word	0x200207e0
   15970:	200207d8 	.word	0x200207d8
   15974:	200207dc 	.word	0x200207dc
   15978:	200207e4 	.word	0x200207e4

0001597c <ip_interface_freeaddrinfo>:
   1597c:	b538      	push	{r3, r4, r5, lr}
   1597e:	4c0b      	ldr	r4, [pc, #44]	; (159ac <ip_interface_freeaddrinfo+0x30>)
   15980:	6823      	ldr	r3, [r4, #0]
   15982:	2b02      	cmp	r3, #2
   15984:	d000      	beq.n	15988 <ip_interface_freeaddrinfo+0xc>
   15986:	bd38      	pop	{r3, r4, r5, pc}
   15988:	b130      	cbz	r0, 15998 <ip_interface_freeaddrinfo+0x1c>
   1598a:	4605      	mov	r5, r0
   1598c:	6940      	ldr	r0, [r0, #20]
   1598e:	f7fb fab7 	bl	10f00 <nrf_free>
   15992:	4628      	mov	r0, r5
   15994:	f7fb fab4 	bl	10f00 <nrf_free>
   15998:	2300      	movs	r3, #0
   1599a:	4a05      	ldr	r2, [pc, #20]	; (159b0 <ip_interface_freeaddrinfo+0x34>)
   1599c:	4905      	ldr	r1, [pc, #20]	; (159b4 <ip_interface_freeaddrinfo+0x38>)
   1599e:	6023      	str	r3, [r4, #0]
   159a0:	6013      	str	r3, [r2, #0]
   159a2:	6808      	ldr	r0, [r1, #0]
   159a4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   159a8:	f7fb bb0a 	b.w	10fc0 <rpc_ip_client_data_free>
   159ac:	200207e4 	.word	0x200207e4
   159b0:	200207e0 	.word	0x200207e0
   159b4:	200207ec 	.word	0x200207ec

000159b8 <rpc_ip_event_handler>:
   159b8:	f248 030d 	movw	r3, #32781	; 0x800d
   159bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   159c0:	4299      	cmp	r1, r3
   159c2:	b089      	sub	sp, #36	; 0x24
   159c4:	4605      	mov	r5, r0
   159c6:	d062      	beq.n	15a8e <rpc_ip_event_handler+0xd6>
   159c8:	f248 030f 	movw	r3, #32783	; 0x800f
   159cc:	4299      	cmp	r1, r3
   159ce:	460c      	mov	r4, r1
   159d0:	d04b      	beq.n	15a6a <rpc_ip_event_handler+0xb2>
   159d2:	f401 4310 	and.w	r3, r1, #36864	; 0x9000
   159d6:	f5b3 4f10 	cmp.w	r3, #36864	; 0x9000
   159da:	68c0      	ldr	r0, [r0, #12]
   159dc:	d07b      	beq.n	15ad6 <rpc_ip_event_handler+0x11e>
   159de:	0c07      	lsrs	r7, r0, #16
   159e0:	4638      	mov	r0, r7
   159e2:	f000 fba1 	bl	16128 <interface_socket_from_handle_get>
   159e6:	4606      	mov	r6, r0
   159e8:	2800      	cmp	r0, #0
   159ea:	d05f      	beq.n	15aac <rpc_ip_event_handler+0xf4>
   159ec:	4601      	mov	r1, r0
   159ee:	4623      	mov	r3, r4
   159f0:	462a      	mov	r2, r5
   159f2:	4638      	mov	r0, r7
   159f4:	f7fb ff1c 	bl	11830 <tls_rpc_ip_event_handler>
   159f8:	2800      	cmp	r0, #0
   159fa:	d053      	beq.n	15aa4 <rpc_ip_event_handler+0xec>
   159fc:	f248 0307 	movw	r3, #32775	; 0x8007
   15a00:	429c      	cmp	r4, r3
   15a02:	d97d      	bls.n	15b00 <rpc_ip_event_handler+0x148>
   15a04:	f248 030c 	movw	r3, #32780	; 0x800c
   15a08:	429c      	cmp	r4, r3
   15a0a:	d068      	beq.n	15ade <rpc_ip_event_handler+0x126>
   15a0c:	f240 8119 	bls.w	15c42 <rpc_ip_event_handler+0x28a>
   15a10:	f249 0302 	movw	r3, #36866	; 0x9002
   15a14:	429c      	cmp	r4, r3
   15a16:	f000 8195 	beq.w	15d44 <rpc_ip_event_handler+0x38c>
   15a1a:	f249 0303 	movw	r3, #36867	; 0x9003
   15a1e:	429c      	cmp	r4, r3
   15a20:	f000 81aa 	beq.w	15d78 <rpc_ip_event_handler+0x3c0>
   15a24:	f249 0301 	movw	r3, #36865	; 0x9001
   15a28:	429c      	cmp	r4, r3
   15a2a:	d13f      	bne.n	15aac <rpc_ip_event_handler+0xf4>
   15a2c:	6834      	ldr	r4, [r6, #0]
   15a2e:	f414 1480 	ands.w	r4, r4, #1048576	; 0x100000
   15a32:	f000 81c2 	beq.w	15dba <rpc_ip_event_handler+0x402>
   15a36:	68ab      	ldr	r3, [r5, #8]
   15a38:	2b04      	cmp	r3, #4
   15a3a:	f200 81ff 	bhi.w	15e3c <rpc_ip_event_handler+0x484>
   15a3e:	2400      	movs	r4, #0
   15a40:	4627      	mov	r7, r4
   15a42:	6829      	ldr	r1, [r5, #0]
   15a44:	686a      	ldr	r2, [r5, #4]
   15a46:	e9cd 7406 	strd	r7, r4, [sp, #24]
   15a4a:	e9cd 1204 	strd	r1, r2, [sp, #16]
   15a4e:	69f0      	ldr	r0, [r6, #28]
   15a50:	a904      	add	r1, sp, #16
   15a52:	6803      	ldr	r3, [r0, #0]
   15a54:	685b      	ldr	r3, [r3, #4]
   15a56:	4798      	blx	r3
   15a58:	3001      	adds	r0, #1
   15a5a:	f000 81db 	beq.w	15e14 <rpc_ip_event_handler+0x45c>
   15a5e:	6833      	ldr	r3, [r6, #0]
   15a60:	2000      	movs	r0, #0
   15a62:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   15a66:	6033      	str	r3, [r6, #0]
   15a68:	e00e      	b.n	15a88 <rpc_ip_event_handler+0xd0>
   15a6a:	6943      	ldr	r3, [r0, #20]
   15a6c:	2001      	movs	r0, #1
   15a6e:	2b10      	cmp	r3, #16
   15a70:	49b7      	ldr	r1, [pc, #732]	; (15d50 <rpc_ip_event_handler+0x398>)
   15a72:	bf88      	it	hi
   15a74:	222d      	movhi	r2, #45	; 0x2d
   15a76:	7008      	strb	r0, [r1, #0]
   15a78:	f04f 0000 	mov.w	r0, #0
   15a7c:	bf9c      	itt	ls
   15a7e:	4ab5      	ldrls	r2, [pc, #724]	; (15d54 <rpc_ip_event_handler+0x39c>)
   15a80:	f852 2023 	ldrls.w	r2, [r2, r3, lsl #2]
   15a84:	4bb4      	ldr	r3, [pc, #720]	; (15d58 <rpc_ip_event_handler+0x3a0>)
   15a86:	601a      	str	r2, [r3, #0]
   15a88:	b009      	add	sp, #36	; 0x24
   15a8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15a8e:	f8df 92dc 	ldr.w	r9, [pc, #732]	; 15d6c <rpc_ip_event_handler+0x3b4>
   15a92:	6807      	ldr	r7, [r0, #0]
   15a94:	f8d9 3000 	ldr.w	r3, [r9]
   15a98:	2b01      	cmp	r3, #1
   15a9a:	d00b      	beq.n	15ab4 <rpc_ip_event_handler+0xfc>
   15a9c:	b117      	cbz	r7, 15aa4 <rpc_ip_event_handler+0xec>
   15a9e:	4638      	mov	r0, r7
   15aa0:	f7fb fa8e 	bl	10fc0 <rpc_ip_client_data_free>
   15aa4:	2000      	movs	r0, #0
   15aa6:	b009      	add	sp, #36	; 0x24
   15aa8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15aac:	6828      	ldr	r0, [r5, #0]
   15aae:	2800      	cmp	r0, #0
   15ab0:	d1f6      	bne.n	15aa0 <rpc_ip_event_handler+0xe8>
   15ab2:	e7f7      	b.n	15aa4 <rpc_ip_event_handler+0xec>
   15ab4:	6943      	ldr	r3, [r0, #20]
   15ab6:	2b00      	cmp	r3, #0
   15ab8:	d046      	beq.n	15b48 <rpc_ip_event_handler+0x190>
   15aba:	2b10      	cmp	r3, #16
   15abc:	bf96      	itet	ls
   15abe:	4aa5      	ldrls	r2, [pc, #660]	; (15d54 <rpc_ip_event_handler+0x39c>)
   15ac0:	232d      	movhi	r3, #45	; 0x2d
   15ac2:	f852 3023 	ldrls.w	r3, [r2, r3, lsl #2]
   15ac6:	2202      	movs	r2, #2
   15ac8:	49a4      	ldr	r1, [pc, #656]	; (15d5c <rpc_ip_event_handler+0x3a4>)
   15aca:	600b      	str	r3, [r1, #0]
   15acc:	f8c9 2000 	str.w	r2, [r9]
   15ad0:	2f00      	cmp	r7, #0
   15ad2:	d1e4      	bne.n	15a9e <rpc_ip_event_handler+0xe6>
   15ad4:	e7e6      	b.n	15aa4 <rpc_ip_event_handler+0xec>
   15ad6:	f000 fad5 	bl	16084 <interface_from_internal_id_search>
   15ada:	4607      	mov	r7, r0
   15adc:	e780      	b.n	159e0 <rpc_ip_event_handler+0x28>
   15ade:	6833      	ldr	r3, [r6, #0]
   15ae0:	b29b      	uxth	r3, r3
   15ae2:	2b08      	cmp	r3, #8
   15ae4:	d1de      	bne.n	15aa4 <rpc_ip_event_handler+0xec>
   15ae6:	696b      	ldr	r3, [r5, #20]
   15ae8:	2b00      	cmp	r3, #0
   15aea:	f000 819c 	beq.w	15e26 <rpc_ip_event_handler+0x46e>
   15aee:	2b10      	cmp	r3, #16
   15af0:	f200 8161 	bhi.w	15db6 <rpc_ip_event_handler+0x3fe>
   15af4:	4a97      	ldr	r2, [pc, #604]	; (15d54 <rpc_ip_event_handler+0x39c>)
   15af6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15afa:	6073      	str	r3, [r6, #4]
   15afc:	2000      	movs	r0, #0
   15afe:	e7c3      	b.n	15a88 <rpc_ip_event_handler+0xd0>
   15b00:	f248 0306 	movw	r3, #32774	; 0x8006
   15b04:	429c      	cmp	r4, r3
   15b06:	f080 810d 	bcs.w	15d24 <rpc_ip_event_handler+0x36c>
   15b0a:	f248 0302 	movw	r3, #32770	; 0x8002
   15b0e:	429c      	cmp	r4, r3
   15b10:	f000 80f0 	beq.w	15cf4 <rpc_ip_event_handler+0x33c>
   15b14:	f240 80be 	bls.w	15c94 <rpc_ip_event_handler+0x2dc>
   15b18:	f248 0303 	movw	r3, #32771	; 0x8003
   15b1c:	429c      	cmp	r4, r3
   15b1e:	f000 80ca 	beq.w	15cb6 <rpc_ip_event_handler+0x2fe>
   15b22:	f248 0305 	movw	r3, #32773	; 0x8005
   15b26:	429c      	cmp	r4, r3
   15b28:	d1c0      	bne.n	15aac <rpc_ip_event_handler+0xf4>
   15b2a:	6833      	ldr	r3, [r6, #0]
   15b2c:	b29b      	uxth	r3, r3
   15b2e:	2b03      	cmp	r3, #3
   15b30:	d1b8      	bne.n	15aa4 <rpc_ip_event_handler+0xec>
   15b32:	696b      	ldr	r3, [r5, #20]
   15b34:	2b00      	cmp	r3, #0
   15b36:	d1da      	bne.n	15aee <rpc_ip_event_handler+0x136>
   15b38:	6833      	ldr	r3, [r6, #0]
   15b3a:	2000      	movs	r0, #0
   15b3c:	0c1b      	lsrs	r3, r3, #16
   15b3e:	041b      	lsls	r3, r3, #16
   15b40:	f043 0304 	orr.w	r3, r3, #4
   15b44:	6033      	str	r3, [r6, #0]
   15b46:	e79f      	b.n	15a88 <rpc_ip_event_handler+0xd0>
   15b48:	4b85      	ldr	r3, [pc, #532]	; (15d60 <rpc_ip_event_handler+0x3a8>)
   15b4a:	601f      	str	r7, [r3, #0]
   15b4c:	6984      	ldr	r4, [r0, #24]
   15b4e:	0163      	lsls	r3, r4, #5
   15b50:	4618      	mov	r0, r3
   15b52:	9303      	str	r3, [sp, #12]
   15b54:	f7fb f9ca 	bl	10eec <nrf_malloc>
   15b58:	9002      	str	r0, [sp, #8]
   15b5a:	2800      	cmp	r0, #0
   15b5c:	f000 808a 	beq.w	15c74 <rpc_ip_event_handler+0x2bc>
   15b60:	00e5      	lsls	r5, r4, #3
   15b62:	1928      	adds	r0, r5, r4
   15b64:	0080      	lsls	r0, r0, #2
   15b66:	f7fb f9c1 	bl	10eec <nrf_malloc>
   15b6a:	2800      	cmp	r0, #0
   15b6c:	f000 811f 	beq.w	15dae <rpc_ip_event_handler+0x3f6>
   15b70:	2c00      	cmp	r4, #0
   15b72:	d05e      	beq.n	15c32 <rpc_ip_event_handler+0x27a>
   15b74:	3510      	adds	r5, #16
   15b76:	1943      	adds	r3, r0, r5
   15b78:	9301      	str	r3, [sp, #4]
   15b7a:	9b02      	ldr	r3, [sp, #8]
   15b7c:	2404      	movs	r4, #4
   15b7e:	f8df a1f0 	ldr.w	sl, [pc, #496]	; 15d70 <rpc_ip_event_handler+0x3b8>
   15b82:	f8df b1f0 	ldr.w	fp, [pc, #496]	; 15d74 <rpc_ip_event_handler+0x3bc>
   15b86:	f100 0810 	add.w	r8, r0, #16
   15b8a:	f103 0620 	add.w	r6, r3, #32
   15b8e:	e01d      	b.n	15bcc <rpc_ip_event_handler+0x214>
   15b90:	220a      	movs	r2, #10
   15b92:	f848 2c0c 	str.w	r2, [r8, #-12]
   15b96:	f04f 0224 	mov.w	r2, #36	; 0x24
   15b9a:	4640      	mov	r0, r8
   15b9c:	f808 2c10 	strb.w	r2, [r8, #-16]
   15ba0:	f828 3c08 	strh.w	r3, [r8, #-8]
   15ba4:	f856 2c10 	ldr.w	r2, [r6, #-16]
   15ba8:	f004 fe3d 	bl	1a826 <memcpy>
   15bac:	f856 3c10 	ldr.w	r3, [r6, #-16]
   15bb0:	f108 0808 	add.w	r8, r8, #8
   15bb4:	441c      	add	r4, r3
   15bb6:	193b      	adds	r3, r7, r4
   15bb8:	f846 3c08 	str.w	r3, [r6, #-8]
   15bbc:	9b01      	ldr	r3, [sp, #4]
   15bbe:	f846 6c04 	str.w	r6, [r6, #-4]
   15bc2:	4598      	cmp	r8, r3
   15bc4:	442c      	add	r4, r5
   15bc6:	f106 0620 	add.w	r6, r6, #32
   15bca:	d02c      	beq.n	15c26 <rpc_ip_event_handler+0x26e>
   15bcc:	593b      	ldr	r3, [r7, r4]
   15bce:	193a      	adds	r2, r7, r4
   15bd0:	f846 3c20 	str.w	r3, [r6, #-32]
   15bd4:	6853      	ldr	r3, [r2, #4]
   15bd6:	f8da 1000 	ldr.w	r1, [sl]
   15bda:	2b02      	cmp	r3, #2
   15bdc:	bf14      	ite	ne
   15bde:	2002      	movne	r0, #2
   15be0:	200a      	moveq	r0, #10
   15be2:	f8db 3000 	ldr.w	r3, [fp]
   15be6:	e946 0107 	strd	r0, r1, [r6, #-28]
   15bea:	f846 3c14 	str.w	r3, [r6, #-20]
   15bee:	8a10      	ldrh	r0, [r2, #16]
   15bf0:	f1a8 0310 	sub.w	r3, r8, #16
   15bf4:	f846 0c10 	str.w	r0, [r6, #-16]
   15bf8:	8a55      	ldrh	r5, [r2, #18]
   15bfa:	f846 3c0c 	str.w	r3, [r6, #-12]
   15bfe:	4b59      	ldr	r3, [pc, #356]	; (15d64 <rpc_ip_event_handler+0x3ac>)
   15c00:	3414      	adds	r4, #20
   15c02:	2804      	cmp	r0, #4
   15c04:	eb07 0104 	add.w	r1, r7, r4
   15c08:	881b      	ldrh	r3, [r3, #0]
   15c0a:	d1c1      	bne.n	15b90 <rpc_ip_event_handler+0x1d8>
   15c0c:	2210      	movs	r2, #16
   15c0e:	2002      	movs	r0, #2
   15c10:	f828 3c08 	strh.w	r3, [r8, #-8]
   15c14:	f848 0c0c 	str.w	r0, [r8, #-12]
   15c18:	f808 2c10 	strb.w	r2, [r8, #-16]
   15c1c:	f856 2c10 	ldr.w	r2, [r6, #-16]
   15c20:	f1a8 0004 	sub.w	r0, r8, #4
   15c24:	e7c0      	b.n	15ba8 <rpc_ip_event_handler+0x1f0>
   15c26:	2200      	movs	r2, #0
   15c28:	e9dd 1302 	ldrd	r1, r3, [sp, #8]
   15c2c:	440b      	add	r3, r1
   15c2e:	f843 2c04 	str.w	r2, [r3, #-4]
   15c32:	2202      	movs	r2, #2
   15c34:	4b4c      	ldr	r3, [pc, #304]	; (15d68 <rpc_ip_event_handler+0x3b0>)
   15c36:	f8c9 2000 	str.w	r2, [r9]
   15c3a:	9a02      	ldr	r2, [sp, #8]
   15c3c:	2000      	movs	r0, #0
   15c3e:	601a      	str	r2, [r3, #0]
   15c40:	e722      	b.n	15a88 <rpc_ip_event_handler+0xd0>
   15c42:	f248 0308 	movw	r3, #32776	; 0x8008
   15c46:	429c      	cmp	r4, r3
   15c48:	d045      	beq.n	15cd6 <rpc_ip_event_handler+0x31e>
   15c4a:	f248 0309 	movw	r3, #32777	; 0x8009
   15c4e:	429c      	cmp	r4, r3
   15c50:	f47f af2c 	bne.w	15aac <rpc_ip_event_handler+0xf4>
   15c54:	6833      	ldr	r3, [r6, #0]
   15c56:	b29b      	uxth	r3, r3
   15c58:	2b0d      	cmp	r3, #13
   15c5a:	f47f af23 	bne.w	15aa4 <rpc_ip_event_handler+0xec>
   15c5e:	6968      	ldr	r0, [r5, #20]
   15c60:	2800      	cmp	r0, #0
   15c62:	f000 80d9 	beq.w	15e18 <rpc_ip_event_handler+0x460>
   15c66:	2810      	cmp	r0, #16
   15c68:	f200 80a5 	bhi.w	15db6 <rpc_ip_event_handler+0x3fe>
   15c6c:	4b39      	ldr	r3, [pc, #228]	; (15d54 <rpc_ip_event_handler+0x39c>)
   15c6e:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
   15c72:	e742      	b.n	15afa <rpc_ip_event_handler+0x142>
   15c74:	f7fb f944 	bl	10f00 <nrf_free>
   15c78:	200c      	movs	r0, #12
   15c7a:	2302      	movs	r3, #2
   15c7c:	4937      	ldr	r1, [pc, #220]	; (15d5c <rpc_ip_event_handler+0x3a4>)
   15c7e:	4a3a      	ldr	r2, [pc, #232]	; (15d68 <rpc_ip_event_handler+0x3b0>)
   15c80:	6008      	str	r0, [r1, #0]
   15c82:	682f      	ldr	r7, [r5, #0]
   15c84:	9902      	ldr	r1, [sp, #8]
   15c86:	f8c9 3000 	str.w	r3, [r9]
   15c8a:	6011      	str	r1, [r2, #0]
   15c8c:	2f00      	cmp	r7, #0
   15c8e:	f47f af06 	bne.w	15a9e <rpc_ip_event_handler+0xe6>
   15c92:	e707      	b.n	15aa4 <rpc_ip_event_handler+0xec>
   15c94:	f248 0301 	movw	r3, #32769	; 0x8001
   15c98:	429c      	cmp	r4, r3
   15c9a:	f47f af07 	bne.w	15aac <rpc_ip_event_handler+0xf4>
   15c9e:	6833      	ldr	r3, [r6, #0]
   15ca0:	2b01      	cmp	r3, #1
   15ca2:	f47f aeff 	bne.w	15aa4 <rpc_ip_event_handler+0xec>
   15ca6:	6968      	ldr	r0, [r5, #20]
   15ca8:	2800      	cmp	r0, #0
   15caa:	d1dc      	bne.n	15c66 <rpc_ip_event_handler+0x2ae>
   15cac:	2302      	movs	r3, #2
   15cae:	6033      	str	r3, [r6, #0]
   15cb0:	69ab      	ldr	r3, [r5, #24]
   15cb2:	61b3      	str	r3, [r6, #24]
   15cb4:	e6e8      	b.n	15a88 <rpc_ip_event_handler+0xd0>
   15cb6:	6833      	ldr	r3, [r6, #0]
   15cb8:	025b      	lsls	r3, r3, #9
   15cba:	f57f aef3 	bpl.w	15aa4 <rpc_ip_event_handler+0xec>
   15cbe:	6968      	ldr	r0, [r5, #20]
   15cc0:	2800      	cmp	r0, #0
   15cc2:	f000 80a0 	beq.w	15e06 <rpc_ip_event_handler+0x44e>
   15cc6:	2810      	cmp	r0, #16
   15cc8:	bf8e      	itee	hi
   15cca:	232d      	movhi	r3, #45	; 0x2d
   15ccc:	4b21      	ldrls	r3, [pc, #132]	; (15d54 <rpc_ip_event_handler+0x39c>)
   15cce:	f853 3020 	ldrls.w	r3, [r3, r0, lsl #2]
   15cd2:	6073      	str	r3, [r6, #4]
   15cd4:	e6e6      	b.n	15aa4 <rpc_ip_event_handler+0xec>
   15cd6:	6833      	ldr	r3, [r6, #0]
   15cd8:	b29b      	uxth	r3, r3
   15cda:	2b06      	cmp	r3, #6
   15cdc:	f47f aee2 	bne.w	15aa4 <rpc_ip_event_handler+0xec>
   15ce0:	6968      	ldr	r0, [r5, #20]
   15ce2:	2800      	cmp	r0, #0
   15ce4:	d1bf      	bne.n	15c66 <rpc_ip_event_handler+0x2ae>
   15ce6:	6833      	ldr	r3, [r6, #0]
   15ce8:	0c1b      	lsrs	r3, r3, #16
   15cea:	041b      	lsls	r3, r3, #16
   15cec:	f043 0307 	orr.w	r3, r3, #7
   15cf0:	6033      	str	r3, [r6, #0]
   15cf2:	e6c9      	b.n	15a88 <rpc_ip_event_handler+0xd0>
   15cf4:	6833      	ldr	r3, [r6, #0]
   15cf6:	0099      	lsls	r1, r3, #2
   15cf8:	f57f aed4 	bpl.w	15aa4 <rpc_ip_event_handler+0xec>
   15cfc:	6833      	ldr	r3, [r6, #0]
   15cfe:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
   15d02:	6033      	str	r3, [r6, #0]
   15d04:	6968      	ldr	r0, [r5, #20]
   15d06:	2800      	cmp	r0, #0
   15d08:	d06e      	beq.n	15de8 <rpc_ip_event_handler+0x430>
   15d0a:	2810      	cmp	r0, #16
   15d0c:	f200 8080 	bhi.w	15e10 <rpc_ip_event_handler+0x458>
   15d10:	4b10      	ldr	r3, [pc, #64]	; (15d54 <rpc_ip_event_handler+0x39c>)
   15d12:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
   15d16:	6073      	str	r3, [r6, #4]
   15d18:	6833      	ldr	r3, [r6, #0]
   15d1a:	2000      	movs	r0, #0
   15d1c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
   15d20:	6033      	str	r3, [r6, #0]
   15d22:	e6b1      	b.n	15a88 <rpc_ip_event_handler+0xd0>
   15d24:	6833      	ldr	r3, [r6, #0]
   15d26:	029a      	lsls	r2, r3, #10
   15d28:	f57f aebc 	bpl.w	15aa4 <rpc_ip_event_handler+0xec>
   15d2c:	696b      	ldr	r3, [r5, #20]
   15d2e:	2b00      	cmp	r3, #0
   15d30:	d051      	beq.n	15dd6 <rpc_ip_event_handler+0x41e>
   15d32:	2b6b      	cmp	r3, #107	; 0x6b
   15d34:	f000 8086 	beq.w	15e44 <rpc_ip_event_handler+0x48c>
   15d38:	2b10      	cmp	r3, #16
   15d3a:	d869      	bhi.n	15e10 <rpc_ip_event_handler+0x458>
   15d3c:	4a05      	ldr	r2, [pc, #20]	; (15d54 <rpc_ip_event_handler+0x39c>)
   15d3e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15d42:	e7e8      	b.n	15d16 <rpc_ip_event_handler+0x35e>
   15d44:	6833      	ldr	r3, [r6, #0]
   15d46:	b29b      	uxth	r3, r3
   15d48:	2b07      	cmp	r3, #7
   15d4a:	f47f aeab 	bne.w	15aa4 <rpc_ip_event_handler+0xec>
   15d4e:	e686      	b.n	15a5e <rpc_ip_event_handler+0xa6>
   15d50:	2002511e 	.word	0x2002511e
   15d54:	0001c4cc 	.word	0x0001c4cc
   15d58:	20020814 	.word	0x20020814
   15d5c:	200207e0 	.word	0x200207e0
   15d60:	200207ec 	.word	0x200207ec
   15d64:	20024cce 	.word	0x20024cce
   15d68:	200207e8 	.word	0x200207e8
   15d6c:	200207e4 	.word	0x200207e4
   15d70:	200207dc 	.word	0x200207dc
   15d74:	200207d8 	.word	0x200207d8
   15d78:	6833      	ldr	r3, [r6, #0]
   15d7a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
   15d7e:	6033      	str	r3, [r6, #0]
   15d80:	6833      	ldr	r3, [r6, #0]
   15d82:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
   15d86:	6033      	str	r3, [r6, #0]
   15d88:	6833      	ldr	r3, [r6, #0]
   15d8a:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
   15d8e:	6033      	str	r3, [r6, #0]
   15d90:	692b      	ldr	r3, [r5, #16]
   15d92:	2b6c      	cmp	r3, #108	; 0x6c
   15d94:	d016      	beq.n	15dc4 <rpc_ip_event_handler+0x40c>
   15d96:	2b10      	cmp	r3, #16
   15d98:	bf8c      	ite	hi
   15d9a:	232d      	movhi	r3, #45	; 0x2d
   15d9c:	4a46      	ldrls	r2, [pc, #280]	; (15eb8 <rpc_ip_event_handler+0x500>)
   15d9e:	f04f 0000 	mov.w	r0, #0
   15da2:	bf98      	it	ls
   15da4:	f852 3023 	ldrls.w	r3, [r2, r3, lsl #2]
   15da8:	6073      	str	r3, [r6, #4]
   15daa:	60b3      	str	r3, [r6, #8]
   15dac:	e66c      	b.n	15a88 <rpc_ip_event_handler+0xd0>
   15dae:	220c      	movs	r2, #12
   15db0:	4b42      	ldr	r3, [pc, #264]	; (15ebc <rpc_ip_event_handler+0x504>)
   15db2:	601a      	str	r2, [r3, #0]
   15db4:	e73d      	b.n	15c32 <rpc_ip_event_handler+0x27a>
   15db6:	232d      	movs	r3, #45	; 0x2d
   15db8:	e69f      	b.n	15afa <rpc_ip_event_handler+0x142>
   15dba:	6828      	ldr	r0, [r5, #0]
   15dbc:	f7fb f900 	bl	10fc0 <rpc_ip_client_data_free>
   15dc0:	4620      	mov	r0, r4
   15dc2:	e661      	b.n	15a88 <rpc_ip_event_handler+0xd0>
   15dc4:	2239      	movs	r2, #57	; 0x39
   15dc6:	6833      	ldr	r3, [r6, #0]
   15dc8:	2000      	movs	r0, #0
   15dca:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
   15dce:	6033      	str	r3, [r6, #0]
   15dd0:	6072      	str	r2, [r6, #4]
   15dd2:	60b2      	str	r2, [r6, #8]
   15dd4:	e658      	b.n	15a88 <rpc_ip_event_handler+0xd0>
   15dd6:	6833      	ldr	r3, [r6, #0]
   15dd8:	4a39      	ldr	r2, [pc, #228]	; (15ec0 <rpc_ip_event_handler+0x508>)
   15dda:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   15dde:	6033      	str	r3, [r6, #0]
   15de0:	2001      	movs	r0, #1
   15de2:	f842 5027 	str.w	r5, [r2, r7, lsl #2]
   15de6:	e64f      	b.n	15a88 <rpc_ip_event_handler+0xd0>
   15de8:	6833      	ldr	r3, [r6, #0]
   15dea:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   15dee:	6033      	str	r3, [r6, #0]
   15df0:	6833      	ldr	r3, [r6, #0]
   15df2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   15df6:	6033      	str	r3, [r6, #0]
   15df8:	6833      	ldr	r3, [r6, #0]
   15dfa:	0c1b      	lsrs	r3, r3, #16
   15dfc:	041b      	lsls	r3, r3, #16
   15dfe:	f043 0305 	orr.w	r3, r3, #5
   15e02:	6033      	str	r3, [r6, #0]
   15e04:	e640      	b.n	15a88 <rpc_ip_event_handler+0xd0>
   15e06:	6833      	ldr	r3, [r6, #0]
   15e08:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
   15e0c:	6033      	str	r3, [r6, #0]
   15e0e:	e63b      	b.n	15a88 <rpc_ip_event_handler+0xd0>
   15e10:	232d      	movs	r3, #45	; 0x2d
   15e12:	e780      	b.n	15d16 <rpc_ip_event_handler+0x35e>
   15e14:	2002      	movs	r0, #2
   15e16:	e637      	b.n	15a88 <rpc_ip_event_handler+0xd0>
   15e18:	6833      	ldr	r3, [r6, #0]
   15e1a:	0c1b      	lsrs	r3, r3, #16
   15e1c:	041b      	lsls	r3, r3, #16
   15e1e:	f043 030e 	orr.w	r3, r3, #14
   15e22:	6033      	str	r3, [r6, #0]
   15e24:	e630      	b.n	15a88 <rpc_ip_event_handler+0xd0>
   15e26:	4b26      	ldr	r3, [pc, #152]	; (15ec0 <rpc_ip_event_handler+0x508>)
   15e28:	2001      	movs	r0, #1
   15e2a:	f843 5027 	str.w	r5, [r3, r7, lsl #2]
   15e2e:	6833      	ldr	r3, [r6, #0]
   15e30:	0c1b      	lsrs	r3, r3, #16
   15e32:	041b      	lsls	r3, r3, #16
   15e34:	f043 0309 	orr.w	r3, r3, #9
   15e38:	6033      	str	r3, [r6, #0]
   15e3a:	e625      	b.n	15a88 <rpc_ip_event_handler+0xd0>
   15e3c:	8a6c      	ldrh	r4, [r5, #18]
   15e3e:	b934      	cbnz	r4, 15e4e <rpc_ip_event_handler+0x496>
   15e40:	4627      	mov	r7, r4
   15e42:	e5fe      	b.n	15a42 <rpc_ip_event_handler+0x8a>
   15e44:	6933      	ldr	r3, [r6, #16]
   15e46:	2b01      	cmp	r3, #1
   15e48:	d012      	beq.n	15e70 <rpc_ip_event_handler+0x4b8>
   15e4a:	230c      	movs	r3, #12
   15e4c:	e763      	b.n	15d16 <rpc_ip_event_handler+0x35e>
   15e4e:	2024      	movs	r0, #36	; 0x24
   15e50:	f7fb f84c 	bl	10eec <nrf_malloc>
   15e54:	4607      	mov	r7, r0
   15e56:	b358      	cbz	r0, 15eb0 <rpc_ip_event_handler+0x4f8>
   15e58:	8a6a      	ldrh	r2, [r5, #18]
   15e5a:	2a10      	cmp	r2, #16
   15e5c:	d01c      	beq.n	15e98 <rpc_ip_event_handler+0x4e0>
   15e5e:	2a04      	cmp	r2, #4
   15e60:	d00e      	beq.n	15e80 <rpc_ip_event_handler+0x4c8>
   15e62:	6828      	ldr	r0, [r5, #0]
   15e64:	f7fb f8ac 	bl	10fc0 <rpc_ip_client_data_free>
   15e68:	4638      	mov	r0, r7
   15e6a:	f7fb f849 	bl	10f00 <nrf_free>
   15e6e:	e619      	b.n	15aa4 <rpc_ip_event_handler+0xec>
   15e70:	220c      	movs	r2, #12
   15e72:	6833      	ldr	r3, [r6, #0]
   15e74:	2000      	movs	r0, #0
   15e76:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
   15e7a:	6033      	str	r3, [r6, #0]
   15e7c:	6072      	str	r2, [r6, #4]
   15e7e:	e603      	b.n	15a88 <rpc_ip_event_handler+0xd0>
   15e80:	2302      	movs	r3, #2
   15e82:	2410      	movs	r4, #16
   15e84:	6043      	str	r3, [r0, #4]
   15e86:	7004      	strb	r4, [r0, #0]
   15e88:	8a2b      	ldrh	r3, [r5, #16]
   15e8a:	f105 0114 	add.w	r1, r5, #20
   15e8e:	8103      	strh	r3, [r0, #8]
   15e90:	300c      	adds	r0, #12
   15e92:	f004 fcc8 	bl	1a826 <memcpy>
   15e96:	e5d4      	b.n	15a42 <rpc_ip_event_handler+0x8a>
   15e98:	230a      	movs	r3, #10
   15e9a:	2424      	movs	r4, #36	; 0x24
   15e9c:	6043      	str	r3, [r0, #4]
   15e9e:	7004      	strb	r4, [r0, #0]
   15ea0:	8a2b      	ldrh	r3, [r5, #16]
   15ea2:	f105 0114 	add.w	r1, r5, #20
   15ea6:	8103      	strh	r3, [r0, #8]
   15ea8:	3010      	adds	r0, #16
   15eaa:	f004 fcbc 	bl	1a826 <memcpy>
   15eae:	e5c8      	b.n	15a42 <rpc_ip_event_handler+0x8a>
   15eb0:	6828      	ldr	r0, [r5, #0]
   15eb2:	f7fb f885 	bl	10fc0 <rpc_ip_client_data_free>
   15eb6:	e5f5      	b.n	15aa4 <rpc_ip_event_handler+0xec>
   15eb8:	0001c4cc 	.word	0x0001c4cc
   15ebc:	200207e0 	.word	0x200207e0
   15ec0:	200207f0 	.word	0x200207f0

00015ec4 <interface_init>:
   15ec4:	b508      	push	{r3, lr}
   15ec6:	f44f 72a2 	mov.w	r2, #324	; 0x144
   15eca:	2100      	movs	r1, #0
   15ecc:	4802      	ldr	r0, [pc, #8]	; (15ed8 <interface_init+0x14>)
   15ece:	f004 fcd4 	bl	1a87a <memset>
   15ed2:	2000      	movs	r0, #0
   15ed4:	bd08      	pop	{r3, pc}
   15ed6:	bf00      	nop
   15ed8:	20025120 	.word	0x20025120

00015edc <interface_socket_allocate>:
   15edc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   15ede:	4b30      	ldr	r3, [pc, #192]	; (15fa0 <interface_socket_allocate+0xc4>)
   15ee0:	4606      	mov	r6, r0
   15ee2:	681d      	ldr	r5, [r3, #0]
   15ee4:	4608      	mov	r0, r1
   15ee6:	b31d      	cbz	r5, 15f30 <interface_socket_allocate+0x54>
   15ee8:	6a5c      	ldr	r4, [r3, #36]	; 0x24
   15eea:	2c00      	cmp	r4, #0
   15eec:	d04a      	beq.n	15f84 <interface_socket_allocate+0xa8>
   15eee:	6c9c      	ldr	r4, [r3, #72]	; 0x48
   15ef0:	2c00      	cmp	r4, #0
   15ef2:	d049      	beq.n	15f88 <interface_socket_allocate+0xac>
   15ef4:	6edc      	ldr	r4, [r3, #108]	; 0x6c
   15ef6:	2c00      	cmp	r4, #0
   15ef8:	d048      	beq.n	15f8c <interface_socket_allocate+0xb0>
   15efa:	f8d3 1090 	ldr.w	r1, [r3, #144]	; 0x90
   15efe:	2900      	cmp	r1, #0
   15f00:	d046      	beq.n	15f90 <interface_socket_allocate+0xb4>
   15f02:	f8d3 10b4 	ldr.w	r1, [r3, #180]	; 0xb4
   15f06:	b191      	cbz	r1, 15f2e <interface_socket_allocate+0x52>
   15f08:	f8d3 10d8 	ldr.w	r1, [r3, #216]	; 0xd8
   15f0c:	2900      	cmp	r1, #0
   15f0e:	d043      	beq.n	15f98 <interface_socket_allocate+0xbc>
   15f10:	f8d3 10fc 	ldr.w	r1, [r3, #252]	; 0xfc
   15f14:	2900      	cmp	r1, #0
   15f16:	d041      	beq.n	15f9c <interface_socket_allocate+0xc0>
   15f18:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
   15f1c:	2900      	cmp	r1, #0
   15f1e:	d039      	beq.n	15f94 <interface_socket_allocate+0xb8>
   15f20:	f04f 35ff 	mov.w	r5, #4294967295
   15f24:	2069      	movs	r0, #105	; 0x69
   15f26:	f7f9 fc5d 	bl	f7e4 <bsd_os_errno_set>
   15f2a:	4628      	mov	r0, r5
   15f2c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   15f2e:	2505      	movs	r5, #5
   15f30:	f04f 0c01 	mov.w	ip, #1
   15f34:	f04f 37ff 	mov.w	r7, #4294967295
   15f38:	eb05 04c5 	add.w	r4, r5, r5, lsl #3
   15f3c:	00a4      	lsls	r4, r4, #2
   15f3e:	f843 c004 	str.w	ip, [r3, r4]
   15f42:	441c      	add	r4, r3
   15f44:	4611      	mov	r1, r2
   15f46:	61a7      	str	r7, [r4, #24]
   15f48:	4622      	mov	r2, r4
   15f4a:	f001 ffd1 	bl	17ef0 <packet_handler_create>
   15f4e:	4603      	mov	r3, r0
   15f50:	61e0      	str	r0, [r4, #28]
   15f52:	b158      	cbz	r0, 15f6c <interface_socket_allocate+0x90>
   15f54:	681b      	ldr	r3, [r3, #0]
   15f56:	681b      	ldr	r3, [r3, #0]
   15f58:	4798      	blx	r3
   15f5a:	b910      	cbnz	r0, 15f62 <interface_socket_allocate+0x86>
   15f5c:	6034      	str	r4, [r6, #0]
   15f5e:	4628      	mov	r0, r5
   15f60:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   15f62:	69e0      	ldr	r0, [r4, #28]
   15f64:	f001 ffe4 	bl	17f30 <packet_handler_delete>
   15f68:	2300      	movs	r3, #0
   15f6a:	61e3      	str	r3, [r4, #28]
   15f6c:	f04f 35ff 	mov.w	r5, #4294967295
   15f70:	2224      	movs	r2, #36	; 0x24
   15f72:	2100      	movs	r1, #0
   15f74:	4620      	mov	r0, r4
   15f76:	f004 fc80 	bl	1a87a <memset>
   15f7a:	200c      	movs	r0, #12
   15f7c:	f7f9 fc32 	bl	f7e4 <bsd_os_errno_set>
   15f80:	4628      	mov	r0, r5
   15f82:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   15f84:	2501      	movs	r5, #1
   15f86:	e7d3      	b.n	15f30 <interface_socket_allocate+0x54>
   15f88:	2502      	movs	r5, #2
   15f8a:	e7d1      	b.n	15f30 <interface_socket_allocate+0x54>
   15f8c:	2503      	movs	r5, #3
   15f8e:	e7cf      	b.n	15f30 <interface_socket_allocate+0x54>
   15f90:	2504      	movs	r5, #4
   15f92:	e7cd      	b.n	15f30 <interface_socket_allocate+0x54>
   15f94:	2508      	movs	r5, #8
   15f96:	e7cb      	b.n	15f30 <interface_socket_allocate+0x54>
   15f98:	2506      	movs	r5, #6
   15f9a:	e7c9      	b.n	15f30 <interface_socket_allocate+0x54>
   15f9c:	2507      	movs	r5, #7
   15f9e:	e7c7      	b.n	15f30 <interface_socket_allocate+0x54>
   15fa0:	20025120 	.word	0x20025120

00015fa4 <interface_socket_free>:
   15fa4:	2808      	cmp	r0, #8
   15fa6:	d900      	bls.n	15faa <interface_socket_free+0x6>
   15fa8:	4770      	bx	lr
   15faa:	b510      	push	{r4, lr}
   15fac:	4c07      	ldr	r4, [pc, #28]	; (15fcc <interface_socket_free+0x28>)
   15fae:	eb00 00c0 	add.w	r0, r0, r0, lsl #3
   15fb2:	eb04 0480 	add.w	r4, r4, r0, lsl #2
   15fb6:	69e0      	ldr	r0, [r4, #28]
   15fb8:	b108      	cbz	r0, 15fbe <interface_socket_free+0x1a>
   15fba:	f001 ffb9 	bl	17f30 <packet_handler_delete>
   15fbe:	4620      	mov	r0, r4
   15fc0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   15fc4:	2224      	movs	r2, #36	; 0x24
   15fc6:	2100      	movs	r1, #0
   15fc8:	f004 bc57 	b.w	1a87a <memset>
   15fcc:	20025120 	.word	0x20025120

00015fd0 <interface_socket_packet_handler_update>:
   15fd0:	2808      	cmp	r0, #8
   15fd2:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   15fd6:	d81e      	bhi.n	16016 <interface_socket_packet_handler_update+0x46>
   15fd8:	ea4f 08c0 	mov.w	r8, r0, lsl #3
   15fdc:	4e17      	ldr	r6, [pc, #92]	; (1603c <interface_socket_packet_handler_update+0x6c>)
   15fde:	eb08 0300 	add.w	r3, r8, r0
   15fe2:	009b      	lsls	r3, r3, #2
   15fe4:	58f4      	ldr	r4, [r6, r3]
   15fe6:	18f5      	adds	r5, r6, r3
   15fe8:	b1ac      	cbz	r4, 16016 <interface_socket_packet_handler_update+0x46>
   15fea:	460b      	mov	r3, r1
   15fec:	4604      	mov	r4, r0
   15fee:	4611      	mov	r1, r2
   15ff0:	4618      	mov	r0, r3
   15ff2:	462a      	mov	r2, r5
   15ff4:	f8d5 901c 	ldr.w	r9, [r5, #28]
   15ff8:	f001 ff7a 	bl	17ef0 <packet_handler_create>
   15ffc:	61e8      	str	r0, [r5, #28]
   15ffe:	b1d0      	cbz	r0, 16036 <interface_socket_packet_handler_update+0x66>
   16000:	6803      	ldr	r3, [r0, #0]
   16002:	681b      	ldr	r3, [r3, #0]
   16004:	4798      	blx	r3
   16006:	4607      	mov	r7, r0
   16008:	b948      	cbnz	r0, 1601e <interface_socket_packet_handler_update+0x4e>
   1600a:	4648      	mov	r0, r9
   1600c:	f001 ff90 	bl	17f30 <packet_handler_delete>
   16010:	4638      	mov	r0, r7
   16012:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   16016:	2705      	movs	r7, #5
   16018:	4638      	mov	r0, r7
   1601a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   1601e:	69e8      	ldr	r0, [r5, #28]
   16020:	f001 ff86 	bl	17f30 <packet_handler_delete>
   16024:	eb08 0004 	add.w	r0, r8, r4
   16028:	eb06 0680 	add.w	r6, r6, r0, lsl #2
   1602c:	f8c6 901c 	str.w	r9, [r6, #28]
   16030:	4638      	mov	r0, r7
   16032:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   16036:	2704      	movs	r7, #4
   16038:	e7f4      	b.n	16024 <interface_socket_packet_handler_update+0x54>
   1603a:	bf00      	nop
   1603c:	20025120 	.word	0x20025120

00016040 <interface_socket_wait>:
   16040:	b5f0      	push	{r4, r5, r6, r7, lr}
   16042:	eb00 00c0 	add.w	r0, r0, r0, lsl #3
   16046:	4c0e      	ldr	r4, [pc, #56]	; (16080 <interface_socket_wait+0x40>)
   16048:	0080      	lsls	r0, r0, #2
   1604a:	5825      	ldr	r5, [r4, r0]
   1604c:	b083      	sub	sp, #12
   1604e:	4015      	ands	r5, r2
   16050:	428d      	cmp	r5, r1
   16052:	9301      	str	r3, [sp, #4]
   16054:	4404      	add	r4, r0
   16056:	d010      	beq.n	1607a <interface_socket_wait+0x3a>
   16058:	6863      	ldr	r3, [r4, #4]
   1605a:	b973      	cbnz	r3, 1607a <interface_socket_wait+0x3a>
   1605c:	460f      	mov	r7, r1
   1605e:	4616      	mov	r6, r2
   16060:	4625      	mov	r5, r4
   16062:	e006      	b.n	16072 <interface_socket_wait+0x32>
   16064:	686b      	ldr	r3, [r5, #4]
   16066:	b943      	cbnz	r3, 1607a <interface_socket_wait+0x3a>
   16068:	a901      	add	r1, sp, #4
   1606a:	4620      	mov	r0, r4
   1606c:	f7f9 fb26 	bl	f6bc <bsd_os_timedwait>
   16070:	b920      	cbnz	r0, 1607c <interface_socket_wait+0x3c>
   16072:	682b      	ldr	r3, [r5, #0]
   16074:	4033      	ands	r3, r6
   16076:	42bb      	cmp	r3, r7
   16078:	d1f4      	bne.n	16064 <interface_socket_wait+0x24>
   1607a:	2000      	movs	r0, #0
   1607c:	b003      	add	sp, #12
   1607e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   16080:	20025120 	.word	0x20025120

00016084 <interface_from_internal_id_search>:
   16084:	4b27      	ldr	r3, [pc, #156]	; (16124 <interface_from_internal_id_search+0xa0>)
   16086:	681a      	ldr	r2, [r3, #0]
   16088:	b112      	cbz	r2, 16090 <interface_from_internal_id_search+0xc>
   1608a:	699a      	ldr	r2, [r3, #24]
   1608c:	4282      	cmp	r2, r0
   1608e:	d039      	beq.n	16104 <interface_from_internal_id_search+0x80>
   16090:	6a5a      	ldr	r2, [r3, #36]	; 0x24
   16092:	b112      	cbz	r2, 1609a <interface_from_internal_id_search+0x16>
   16094:	6bda      	ldr	r2, [r3, #60]	; 0x3c
   16096:	4282      	cmp	r2, r0
   16098:	d036      	beq.n	16108 <interface_from_internal_id_search+0x84>
   1609a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
   1609c:	b112      	cbz	r2, 160a4 <interface_from_internal_id_search+0x20>
   1609e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
   160a0:	4282      	cmp	r2, r0
   160a2:	d033      	beq.n	1610c <interface_from_internal_id_search+0x88>
   160a4:	6eda      	ldr	r2, [r3, #108]	; 0x6c
   160a6:	b11a      	cbz	r2, 160b0 <interface_from_internal_id_search+0x2c>
   160a8:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
   160ac:	4282      	cmp	r2, r0
   160ae:	d02f      	beq.n	16110 <interface_from_internal_id_search+0x8c>
   160b0:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
   160b4:	b11a      	cbz	r2, 160be <interface_from_internal_id_search+0x3a>
   160b6:	f8d3 20a8 	ldr.w	r2, [r3, #168]	; 0xa8
   160ba:	4282      	cmp	r2, r0
   160bc:	d02a      	beq.n	16114 <interface_from_internal_id_search+0x90>
   160be:	f8d3 20b4 	ldr.w	r2, [r3, #180]	; 0xb4
   160c2:	b11a      	cbz	r2, 160cc <interface_from_internal_id_search+0x48>
   160c4:	f8d3 20cc 	ldr.w	r2, [r3, #204]	; 0xcc
   160c8:	4282      	cmp	r2, r0
   160ca:	d025      	beq.n	16118 <interface_from_internal_id_search+0x94>
   160cc:	f8d3 20d8 	ldr.w	r2, [r3, #216]	; 0xd8
   160d0:	b11a      	cbz	r2, 160da <interface_from_internal_id_search+0x56>
   160d2:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
   160d6:	4282      	cmp	r2, r0
   160d8:	d020      	beq.n	1611c <interface_from_internal_id_search+0x98>
   160da:	f8d3 20fc 	ldr.w	r2, [r3, #252]	; 0xfc
   160de:	b11a      	cbz	r2, 160e8 <interface_from_internal_id_search+0x64>
   160e0:	f8d3 2114 	ldr.w	r2, [r3, #276]	; 0x114
   160e4:	4282      	cmp	r2, r0
   160e6:	d01b      	beq.n	16120 <interface_from_internal_id_search+0x9c>
   160e8:	f8d3 2120 	ldr.w	r2, [r3, #288]	; 0x120
   160ec:	b13a      	cbz	r2, 160fe <interface_from_internal_id_search+0x7a>
   160ee:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
   160f2:	4283      	cmp	r3, r0
   160f4:	bf14      	ite	ne
   160f6:	f04f 30ff 	movne.w	r0, #4294967295
   160fa:	2008      	moveq	r0, #8
   160fc:	4770      	bx	lr
   160fe:	f04f 30ff 	mov.w	r0, #4294967295
   16102:	4770      	bx	lr
   16104:	2000      	movs	r0, #0
   16106:	4770      	bx	lr
   16108:	2001      	movs	r0, #1
   1610a:	4770      	bx	lr
   1610c:	2002      	movs	r0, #2
   1610e:	4770      	bx	lr
   16110:	2003      	movs	r0, #3
   16112:	4770      	bx	lr
   16114:	2004      	movs	r0, #4
   16116:	4770      	bx	lr
   16118:	2005      	movs	r0, #5
   1611a:	4770      	bx	lr
   1611c:	2006      	movs	r0, #6
   1611e:	4770      	bx	lr
   16120:	2007      	movs	r0, #7
   16122:	4770      	bx	lr
   16124:	20025120 	.word	0x20025120

00016128 <interface_socket_from_handle_get>:
   16128:	2808      	cmp	r0, #8
   1612a:	d807      	bhi.n	1613c <interface_socket_from_handle_get+0x14>
   1612c:	eb00 00c0 	add.w	r0, r0, r0, lsl #3
   16130:	4b03      	ldr	r3, [pc, #12]	; (16140 <interface_socket_from_handle_get+0x18>)
   16132:	0080      	lsls	r0, r0, #2
   16134:	581a      	ldr	r2, [r3, r0]
   16136:	b10a      	cbz	r2, 1613c <interface_socket_from_handle_get+0x14>
   16138:	4418      	add	r0, r3
   1613a:	4770      	bx	lr
   1613c:	2000      	movs	r0, #0
   1613e:	4770      	bx	lr
   16140:	20025120 	.word	0x20025120

00016144 <interface_socket_event_get>:
   16144:	b119      	cbz	r1, 1614e <interface_socket_event_get+0xa>
   16146:	2808      	cmp	r0, #8
   16148:	d902      	bls.n	16150 <interface_socket_event_get+0xc>
   1614a:	2310      	movs	r3, #16
   1614c:	600b      	str	r3, [r1, #0]
   1614e:	4770      	bx	lr
   16150:	eb00 00c0 	add.w	r0, r0, r0, lsl #3
   16154:	4b07      	ldr	r3, [pc, #28]	; (16174 <interface_socket_event_get+0x30>)
   16156:	0080      	lsls	r0, r0, #2
   16158:	581a      	ldr	r2, [r3, r0]
   1615a:	2a00      	cmp	r2, #0
   1615c:	d0f5      	beq.n	1614a <interface_socket_event_get+0x6>
   1615e:	581b      	ldr	r3, [r3, r0]
   16160:	0c1b      	lsrs	r3, r3, #16
   16162:	f003 020a 	and.w	r2, r3, #10
   16166:	2a0a      	cmp	r2, #10
   16168:	bf14      	ite	ne
   1616a:	f003 030f 	andne.w	r3, r3, #15
   1616e:	f003 030d 	andeq.w	r3, r3, #13
   16172:	e7eb      	b.n	1614c <interface_socket_event_get+0x8>
   16174:	20025120 	.word	0x20025120

00016178 <interface_socket_setopt>:
   16178:	2808      	cmp	r0, #8
   1617a:	b538      	push	{r3, r4, r5, lr}
   1617c:	d82d      	bhi.n	161da <interface_socket_setopt+0x62>
   1617e:	eb00 00c0 	add.w	r0, r0, r0, lsl #3
   16182:	4c1c      	ldr	r4, [pc, #112]	; (161f4 <interface_socket_setopt+0x7c>)
   16184:	0080      	lsls	r0, r0, #2
   16186:	461d      	mov	r5, r3
   16188:	5823      	ldr	r3, [r4, r0]
   1618a:	b333      	cbz	r3, 161da <interface_socket_setopt+0x62>
   1618c:	2901      	cmp	r1, #1
   1618e:	d11e      	bne.n	161ce <interface_socket_setopt+0x56>
   16190:	2a14      	cmp	r2, #20
   16192:	d11c      	bne.n	161ce <interface_socket_setopt+0x56>
   16194:	b1ad      	cbz	r5, 161c2 <interface_socket_setopt+0x4a>
   16196:	9b04      	ldr	r3, [sp, #16]
   16198:	2b08      	cmp	r3, #8
   1619a:	d112      	bne.n	161c2 <interface_socket_setopt+0x4a>
   1619c:	686a      	ldr	r2, [r5, #4]
   1619e:	4b16      	ldr	r3, [pc, #88]	; (161f8 <interface_socket_setopt+0x80>)
   161a0:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   161a4:	fba3 3202 	umull	r3, r2, r3, r2
   161a8:	2300      	movs	r3, #0
   161aa:	682d      	ldr	r5, [r5, #0]
   161ac:	0992      	lsrs	r2, r2, #6
   161ae:	fbe1 2305 	umlal	r2, r3, r1, r5
   161b2:	2b01      	cmp	r3, #1
   161b4:	bf08      	it	eq
   161b6:	2a00      	cmpeq	r2, #0
   161b8:	d215      	bcs.n	161e6 <interface_socket_setopt+0x6e>
   161ba:	4420      	add	r0, r4
   161bc:	6202      	str	r2, [r0, #32]
   161be:	2000      	movs	r0, #0
   161c0:	bd38      	pop	{r3, r4, r5, pc}
   161c2:	2016      	movs	r0, #22
   161c4:	f7f9 fb0e 	bl	f7e4 <bsd_os_errno_set>
   161c8:	f04f 30ff 	mov.w	r0, #4294967295
   161cc:	bd38      	pop	{r3, r4, r5, pc}
   161ce:	202a      	movs	r0, #42	; 0x2a
   161d0:	f7f9 fb08 	bl	f7e4 <bsd_os_errno_set>
   161d4:	f04f 30ff 	mov.w	r0, #4294967295
   161d8:	bd38      	pop	{r3, r4, r5, pc}
   161da:	2009      	movs	r0, #9
   161dc:	f7f9 fb02 	bl	f7e4 <bsd_os_errno_set>
   161e0:	f04f 30ff 	mov.w	r0, #4294967295
   161e4:	bd38      	pop	{r3, r4, r5, pc}
   161e6:	2025      	movs	r0, #37	; 0x25
   161e8:	f7f9 fafc 	bl	f7e4 <bsd_os_errno_set>
   161ec:	f04f 30ff 	mov.w	r0, #4294967295
   161f0:	bd38      	pop	{r3, r4, r5, pc}
   161f2:	bf00      	nop
   161f4:	20025120 	.word	0x20025120
   161f8:	10624dd3 	.word	0x10624dd3

000161fc <interface_socket_getopt>:
   161fc:	b570      	push	{r4, r5, r6, lr}
   161fe:	2808      	cmp	r0, #8
   16200:	9d04      	ldr	r5, [sp, #16]
   16202:	d821      	bhi.n	16248 <interface_socket_getopt+0x4c>
   16204:	4c13      	ldr	r4, [pc, #76]	; (16254 <interface_socket_getopt+0x58>)
   16206:	eb00 00c0 	add.w	r0, r0, r0, lsl #3
   1620a:	0080      	lsls	r0, r0, #2
   1620c:	5826      	ldr	r6, [r4, r0]
   1620e:	4404      	add	r4, r0
   16210:	b1d6      	cbz	r6, 16248 <interface_socket_getopt+0x4c>
   16212:	2901      	cmp	r1, #1
   16214:	d112      	bne.n	1623c <interface_socket_getopt+0x40>
   16216:	2a04      	cmp	r2, #4
   16218:	d110      	bne.n	1623c <interface_socket_getopt+0x40>
   1621a:	b14b      	cbz	r3, 16230 <interface_socket_getopt+0x34>
   1621c:	b145      	cbz	r5, 16230 <interface_socket_getopt+0x34>
   1621e:	682a      	ldr	r2, [r5, #0]
   16220:	2a04      	cmp	r2, #4
   16222:	d105      	bne.n	16230 <interface_socket_getopt+0x34>
   16224:	2200      	movs	r2, #0
   16226:	6861      	ldr	r1, [r4, #4]
   16228:	4610      	mov	r0, r2
   1622a:	6019      	str	r1, [r3, #0]
   1622c:	6062      	str	r2, [r4, #4]
   1622e:	bd70      	pop	{r4, r5, r6, pc}
   16230:	2016      	movs	r0, #22
   16232:	f7f9 fad7 	bl	f7e4 <bsd_os_errno_set>
   16236:	f04f 30ff 	mov.w	r0, #4294967295
   1623a:	bd70      	pop	{r4, r5, r6, pc}
   1623c:	202a      	movs	r0, #42	; 0x2a
   1623e:	f7f9 fad1 	bl	f7e4 <bsd_os_errno_set>
   16242:	f04f 30ff 	mov.w	r0, #4294967295
   16246:	bd70      	pop	{r4, r5, r6, pc}
   16248:	2009      	movs	r0, #9
   1624a:	f7f9 facb 	bl	f7e4 <bsd_os_errno_set>
   1624e:	f04f 30ff 	mov.w	r0, #4294967295
   16252:	bd70      	pop	{r4, r5, r6, pc}
   16254:	20025120 	.word	0x20025120

00016258 <interface_socket_fcntl>:
   16258:	2808      	cmp	r0, #8
   1625a:	b510      	push	{r4, lr}
   1625c:	d818      	bhi.n	16290 <interface_socket_fcntl+0x38>
   1625e:	eb00 00c0 	add.w	r0, r0, r0, lsl #3
   16262:	4c11      	ldr	r4, [pc, #68]	; (162a8 <interface_socket_fcntl+0x50>)
   16264:	0083      	lsls	r3, r0, #2
   16266:	58e0      	ldr	r0, [r4, r3]
   16268:	b190      	cbz	r0, 16290 <interface_socket_fcntl+0x38>
   1626a:	2901      	cmp	r1, #1
   1626c:	d005      	beq.n	1627a <interface_socket_fcntl+0x22>
   1626e:	2902      	cmp	r1, #2
   16270:	d114      	bne.n	1629c <interface_socket_fcntl+0x44>
   16272:	58e0      	ldr	r0, [r4, r3]
   16274:	f3c0 7000 	ubfx	r0, r0, #28, #1
   16278:	bd10      	pop	{r4, pc}
   1627a:	f012 0001 	ands.w	r0, r2, #1
   1627e:	58e2      	ldr	r2, [r4, r3]
   16280:	bf1a      	itte	ne
   16282:	2000      	movne	r0, #0
   16284:	f042 5280 	orrne.w	r2, r2, #268435456	; 0x10000000
   16288:	f022 5280 	biceq.w	r2, r2, #268435456	; 0x10000000
   1628c:	50e2      	str	r2, [r4, r3]
   1628e:	bd10      	pop	{r4, pc}
   16290:	2009      	movs	r0, #9
   16292:	f7f9 faa7 	bl	f7e4 <bsd_os_errno_set>
   16296:	f04f 30ff 	mov.w	r0, #4294967295
   1629a:	bd10      	pop	{r4, pc}
   1629c:	2016      	movs	r0, #22
   1629e:	f7f9 faa1 	bl	f7e4 <bsd_os_errno_set>
   162a2:	f04f 30ff 	mov.w	r0, #4294967295
   162a6:	bd10      	pop	{r4, pc}
   162a8:	20025120 	.word	0x20025120

000162ac <bsd_os_application_irq_handler>:
   162ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   162b0:	4c33      	ldr	r4, [pc, #204]	; (16380 <bsd_os_application_irq_handler+0xd4>)
   162b2:	f7f9 fb55 	bl	f960 <bsd_os_application_irq_clear>
   162b6:	f04f 0803 	mov.w	r8, #3
   162ba:	4d32      	ldr	r5, [pc, #200]	; (16384 <bsd_os_application_irq_handler+0xd8>)
   162bc:	4f32      	ldr	r7, [pc, #200]	; (16388 <bsd_os_application_irq_handler+0xdc>)
   162be:	f104 0680 	add.w	r6, r4, #128	; 0x80
   162c2:	e004      	b.n	162ce <bsd_os_application_irq_handler+0x22>
   162c4:	2b04      	cmp	r3, #4
   162c6:	d006      	beq.n	162d6 <bsd_os_application_irq_handler+0x2a>
   162c8:	3408      	adds	r4, #8
   162ca:	42b4      	cmp	r4, r6
   162cc:	d03b      	beq.n	16346 <bsd_os_application_irq_handler+0x9a>
   162ce:	f814 3c04 	ldrb.w	r3, [r4, #-4]
   162d2:	2b02      	cmp	r3, #2
   162d4:	d1f6      	bne.n	162c4 <bsd_os_application_irq_handler+0x18>
   162d6:	6820      	ldr	r0, [r4, #0]
   162d8:	882a      	ldrh	r2, [r5, #0]
   162da:	6803      	ldr	r3, [r0, #0]
   162dc:	b29b      	uxth	r3, r3
   162de:	429a      	cmp	r2, r3
   162e0:	d033      	beq.n	1634a <bsd_os_application_irq_handler+0x9e>
   162e2:	8a2a      	ldrh	r2, [r5, #16]
   162e4:	429a      	cmp	r2, r3
   162e6:	d032      	beq.n	1634e <bsd_os_application_irq_handler+0xa2>
   162e8:	8c2a      	ldrh	r2, [r5, #32]
   162ea:	429a      	cmp	r2, r3
   162ec:	d031      	beq.n	16352 <bsd_os_application_irq_handler+0xa6>
   162ee:	8e2a      	ldrh	r2, [r5, #48]	; 0x30
   162f0:	429a      	cmp	r2, r3
   162f2:	d030      	beq.n	16356 <bsd_os_application_irq_handler+0xaa>
   162f4:	f8b5 2040 	ldrh.w	r2, [r5, #64]	; 0x40
   162f8:	429a      	cmp	r2, r3
   162fa:	d036      	beq.n	1636a <bsd_os_application_irq_handler+0xbe>
   162fc:	f8b5 2050 	ldrh.w	r2, [r5, #80]	; 0x50
   16300:	429a      	cmp	r2, r3
   16302:	d034      	beq.n	1636e <bsd_os_application_irq_handler+0xc2>
   16304:	f8b5 2060 	ldrh.w	r2, [r5, #96]	; 0x60
   16308:	429a      	cmp	r2, r3
   1630a:	d032      	beq.n	16372 <bsd_os_application_irq_handler+0xc6>
   1630c:	f8b5 2070 	ldrh.w	r2, [r5, #112]	; 0x70
   16310:	429a      	cmp	r2, r3
   16312:	d030      	beq.n	16376 <bsd_os_application_irq_handler+0xca>
   16314:	f8b5 2080 	ldrh.w	r2, [r5, #128]	; 0x80
   16318:	429a      	cmp	r2, r3
   1631a:	d02e      	beq.n	1637a <bsd_os_application_irq_handler+0xce>
   1631c:	f8b5 2090 	ldrh.w	r2, [r5, #144]	; 0x90
   16320:	429a      	cmp	r2, r3
   16322:	bf08      	it	eq
   16324:	2309      	moveq	r3, #9
   16326:	d1cf      	bne.n	162c8 <bsd_os_application_irq_handler+0x1c>
   16328:	eb05 1303 	add.w	r3, r5, r3, lsl #4
   1632c:	685a      	ldr	r2, [r3, #4]
   1632e:	68d9      	ldr	r1, [r3, #12]
   16330:	4790      	blx	r2
   16332:	b990      	cbnz	r0, 1635a <bsd_os_application_irq_handler+0xae>
   16334:	2201      	movs	r2, #1
   16336:	6820      	ldr	r0, [r4, #0]
   16338:	f804 2c04 	strb.w	r2, [r4, #-4]
   1633c:	68fb      	ldr	r3, [r7, #12]
   1633e:	3408      	adds	r4, #8
   16340:	4798      	blx	r3
   16342:	42b4      	cmp	r4, r6
   16344:	d1c3      	bne.n	162ce <bsd_os_application_irq_handler+0x22>
   16346:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1634a:	2300      	movs	r3, #0
   1634c:	e7ec      	b.n	16328 <bsd_os_application_irq_handler+0x7c>
   1634e:	2301      	movs	r3, #1
   16350:	e7ea      	b.n	16328 <bsd_os_application_irq_handler+0x7c>
   16352:	2302      	movs	r3, #2
   16354:	e7e8      	b.n	16328 <bsd_os_application_irq_handler+0x7c>
   16356:	2303      	movs	r3, #3
   16358:	e7e6      	b.n	16328 <bsd_os_application_irq_handler+0x7c>
   1635a:	2802      	cmp	r0, #2
   1635c:	bf0a      	itet	eq
   1635e:	2304      	moveq	r3, #4
   16360:	f804 8c04 	strbne.w	r8, [r4, #-4]
   16364:	f804 3c04 	strbeq.w	r3, [r4, #-4]
   16368:	e7ae      	b.n	162c8 <bsd_os_application_irq_handler+0x1c>
   1636a:	2304      	movs	r3, #4
   1636c:	e7dc      	b.n	16328 <bsd_os_application_irq_handler+0x7c>
   1636e:	2305      	movs	r3, #5
   16370:	e7da      	b.n	16328 <bsd_os_application_irq_handler+0x7c>
   16372:	2306      	movs	r3, #6
   16374:	e7d8      	b.n	16328 <bsd_os_application_irq_handler+0x7c>
   16376:	2307      	movs	r3, #7
   16378:	e7d6      	b.n	16328 <bsd_os_application_irq_handler+0x7c>
   1637a:	2308      	movs	r3, #8
   1637c:	e7d4      	b.n	16328 <bsd_os_application_irq_handler+0x7c>
   1637e:	bf00      	nop
   16380:	20020954 	.word	0x20020954
   16384:	20020818 	.word	0x20020818
   16388:	200208b8 	.word	0x200208b8

0001638c <rpc_framework_init>:
   1638c:	b508      	push	{r3, lr}
   1638e:	22a0      	movs	r2, #160	; 0xa0
   16390:	2100      	movs	r1, #0
   16392:	4802      	ldr	r0, [pc, #8]	; (1639c <rpc_framework_init+0x10>)
   16394:	f004 fa71 	bl	1a87a <memset>
   16398:	2000      	movs	r0, #0
   1639a:	bd08      	pop	{r3, pc}
   1639c:	20020818 	.word	0x20020818

000163a0 <rpc_client_register>:
   163a0:	8803      	ldrh	r3, [r0, #0]
   163a2:	2b00      	cmp	r3, #0
   163a4:	d045      	beq.n	16432 <rpc_client_register+0x92>
   163a6:	6842      	ldr	r2, [r0, #4]
   163a8:	4601      	mov	r1, r0
   163aa:	2a00      	cmp	r2, #0
   163ac:	d050      	beq.n	16450 <rpc_client_register+0xb0>
   163ae:	4a30      	ldr	r2, [pc, #192]	; (16470 <rpc_client_register+0xd0>)
   163b0:	8810      	ldrh	r0, [r2, #0]
   163b2:	4283      	cmp	r3, r0
   163b4:	d03d      	beq.n	16432 <rpc_client_register+0x92>
   163b6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   163ba:	8a14      	ldrh	r4, [r2, #16]
   163bc:	42a3      	cmp	r3, r4
   163be:	d035      	beq.n	1642c <rpc_client_register+0x8c>
   163c0:	8c15      	ldrh	r5, [r2, #32]
   163c2:	42ab      	cmp	r3, r5
   163c4:	d032      	beq.n	1642c <rpc_client_register+0x8c>
   163c6:	8e16      	ldrh	r6, [r2, #48]	; 0x30
   163c8:	42b3      	cmp	r3, r6
   163ca:	d02f      	beq.n	1642c <rpc_client_register+0x8c>
   163cc:	f8b2 7040 	ldrh.w	r7, [r2, #64]	; 0x40
   163d0:	42bb      	cmp	r3, r7
   163d2:	d02b      	beq.n	1642c <rpc_client_register+0x8c>
   163d4:	f8b2 c050 	ldrh.w	ip, [r2, #80]	; 0x50
   163d8:	4563      	cmp	r3, ip
   163da:	d027      	beq.n	1642c <rpc_client_register+0x8c>
   163dc:	f8b2 e060 	ldrh.w	lr, [r2, #96]	; 0x60
   163e0:	4573      	cmp	r3, lr
   163e2:	d023      	beq.n	1642c <rpc_client_register+0x8c>
   163e4:	f8b2 8070 	ldrh.w	r8, [r2, #112]	; 0x70
   163e8:	4543      	cmp	r3, r8
   163ea:	d01f      	beq.n	1642c <rpc_client_register+0x8c>
   163ec:	f8b2 9080 	ldrh.w	r9, [r2, #128]	; 0x80
   163f0:	454b      	cmp	r3, r9
   163f2:	d01b      	beq.n	1642c <rpc_client_register+0x8c>
   163f4:	f8b2 a090 	ldrh.w	sl, [r2, #144]	; 0x90
   163f8:	4553      	cmp	r3, sl
   163fa:	d017      	beq.n	1642c <rpc_client_register+0x8c>
   163fc:	b1e0      	cbz	r0, 16438 <rpc_client_register+0x98>
   163fe:	b35c      	cbz	r4, 16458 <rpc_client_register+0xb8>
   16400:	b365      	cbz	r5, 1645c <rpc_client_register+0xbc>
   16402:	b36e      	cbz	r6, 16460 <rpc_client_register+0xc0>
   16404:	b377      	cbz	r7, 16464 <rpc_client_register+0xc4>
   16406:	f1bc 0f00 	cmp.w	ip, #0
   1640a:	d02d      	beq.n	16468 <rpc_client_register+0xc8>
   1640c:	f1be 0f00 	cmp.w	lr, #0
   16410:	d020      	beq.n	16454 <rpc_client_register+0xb4>
   16412:	f1b8 0f00 	cmp.w	r8, #0
   16416:	d029      	beq.n	1646c <rpc_client_register+0xcc>
   16418:	f1b9 0f00 	cmp.w	r9, #0
   1641c:	d00b      	beq.n	16436 <rpc_client_register+0x96>
   1641e:	2009      	movs	r0, #9
   16420:	f1ba 0f00 	cmp.w	sl, #0
   16424:	d008      	beq.n	16438 <rpc_client_register+0x98>
   16426:	2004      	movs	r0, #4
   16428:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1642c:	2007      	movs	r0, #7
   1642e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   16432:	2007      	movs	r0, #7
   16434:	4770      	bx	lr
   16436:	2008      	movs	r0, #8
   16438:	0100      	lsls	r0, r0, #4
   1643a:	5213      	strh	r3, [r2, r0]
   1643c:	684b      	ldr	r3, [r1, #4]
   1643e:	4402      	add	r2, r0
   16440:	6053      	str	r3, [r2, #4]
   16442:	688b      	ldr	r3, [r1, #8]
   16444:	2000      	movs	r0, #0
   16446:	6093      	str	r3, [r2, #8]
   16448:	68cb      	ldr	r3, [r1, #12]
   1644a:	60d3      	str	r3, [r2, #12]
   1644c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   16450:	200e      	movs	r0, #14
   16452:	4770      	bx	lr
   16454:	2006      	movs	r0, #6
   16456:	e7ef      	b.n	16438 <rpc_client_register+0x98>
   16458:	2001      	movs	r0, #1
   1645a:	e7ed      	b.n	16438 <rpc_client_register+0x98>
   1645c:	2002      	movs	r0, #2
   1645e:	e7eb      	b.n	16438 <rpc_client_register+0x98>
   16460:	2003      	movs	r0, #3
   16462:	e7e9      	b.n	16438 <rpc_client_register+0x98>
   16464:	2004      	movs	r0, #4
   16466:	e7e7      	b.n	16438 <rpc_client_register+0x98>
   16468:	2005      	movs	r0, #5
   1646a:	e7e5      	b.n	16438 <rpc_client_register+0x98>
   1646c:	2007      	movs	r0, #7
   1646e:	e7e3      	b.n	16438 <rpc_client_register+0x98>
   16470:	20020818 	.word	0x20020818

00016474 <rpc_transport_input>:
   16474:	b538      	push	{r3, r4, r5, lr}
   16476:	4a82      	ldr	r2, [pc, #520]	; (16680 <rpc_transport_input+0x20c>)
   16478:	680b      	ldr	r3, [r1, #0]
   1647a:	8810      	ldrh	r0, [r2, #0]
   1647c:	b29b      	uxth	r3, r3
   1647e:	4298      	cmp	r0, r3
   16480:	d027      	beq.n	164d2 <rpc_transport_input+0x5e>
   16482:	8a10      	ldrh	r0, [r2, #16]
   16484:	4298      	cmp	r0, r3
   16486:	d024      	beq.n	164d2 <rpc_transport_input+0x5e>
   16488:	8c10      	ldrh	r0, [r2, #32]
   1648a:	4298      	cmp	r0, r3
   1648c:	d021      	beq.n	164d2 <rpc_transport_input+0x5e>
   1648e:	8e10      	ldrh	r0, [r2, #48]	; 0x30
   16490:	4298      	cmp	r0, r3
   16492:	d01e      	beq.n	164d2 <rpc_transport_input+0x5e>
   16494:	f8b2 0040 	ldrh.w	r0, [r2, #64]	; 0x40
   16498:	4298      	cmp	r0, r3
   1649a:	d01a      	beq.n	164d2 <rpc_transport_input+0x5e>
   1649c:	f8b2 0050 	ldrh.w	r0, [r2, #80]	; 0x50
   164a0:	4298      	cmp	r0, r3
   164a2:	d016      	beq.n	164d2 <rpc_transport_input+0x5e>
   164a4:	f8b2 0060 	ldrh.w	r0, [r2, #96]	; 0x60
   164a8:	4298      	cmp	r0, r3
   164aa:	d012      	beq.n	164d2 <rpc_transport_input+0x5e>
   164ac:	f8b2 0070 	ldrh.w	r0, [r2, #112]	; 0x70
   164b0:	4298      	cmp	r0, r3
   164b2:	d00e      	beq.n	164d2 <rpc_transport_input+0x5e>
   164b4:	f8b2 0080 	ldrh.w	r0, [r2, #128]	; 0x80
   164b8:	4298      	cmp	r0, r3
   164ba:	d00a      	beq.n	164d2 <rpc_transport_input+0x5e>
   164bc:	f8b2 2090 	ldrh.w	r2, [r2, #144]	; 0x90
   164c0:	429a      	cmp	r2, r3
   164c2:	d006      	beq.n	164d2 <rpc_transport_input+0x5e>
   164c4:	6888      	ldr	r0, [r1, #8]
   164c6:	b118      	cbz	r0, 164d0 <rpc_transport_input+0x5c>
   164c8:	4b6e      	ldr	r3, [pc, #440]	; (16684 <rpc_transport_input+0x210>)
   164ca:	691b      	ldr	r3, [r3, #16]
   164cc:	4798      	blx	r3
   164ce:	2000      	movs	r0, #0
   164d0:	bd38      	pop	{r3, r4, r5, pc}
   164d2:	6888      	ldr	r0, [r1, #8]
   164d4:	2800      	cmp	r0, #0
   164d6:	f000 8098 	beq.w	1660a <rpc_transport_input+0x196>
   164da:	4a6b      	ldr	r2, [pc, #428]	; (16688 <rpc_transport_input+0x214>)
   164dc:	6814      	ldr	r4, [r2, #0]
   164de:	2c00      	cmp	r4, #0
   164e0:	d03c      	beq.n	1655c <rpc_transport_input+0xe8>
   164e2:	6894      	ldr	r4, [r2, #8]
   164e4:	2c00      	cmp	r4, #0
   164e6:	f000 809a 	beq.w	1661e <rpc_transport_input+0x1aa>
   164ea:	6914      	ldr	r4, [r2, #16]
   164ec:	2c00      	cmp	r4, #0
   164ee:	f000 809a 	beq.w	16626 <rpc_transport_input+0x1b2>
   164f2:	6994      	ldr	r4, [r2, #24]
   164f4:	2c00      	cmp	r4, #0
   164f6:	f000 809a 	beq.w	1662e <rpc_transport_input+0x1ba>
   164fa:	6a14      	ldr	r4, [r2, #32]
   164fc:	2c00      	cmp	r4, #0
   164fe:	f000 809a 	beq.w	16636 <rpc_transport_input+0x1c2>
   16502:	6a94      	ldr	r4, [r2, #40]	; 0x28
   16504:	2c00      	cmp	r4, #0
   16506:	f000 8084 	beq.w	16612 <rpc_transport_input+0x19e>
   1650a:	6b14      	ldr	r4, [r2, #48]	; 0x30
   1650c:	2c00      	cmp	r4, #0
   1650e:	f000 8098 	beq.w	16642 <rpc_transport_input+0x1ce>
   16512:	6b94      	ldr	r4, [r2, #56]	; 0x38
   16514:	2c00      	cmp	r4, #0
   16516:	f000 8096 	beq.w	16646 <rpc_transport_input+0x1d2>
   1651a:	6c14      	ldr	r4, [r2, #64]	; 0x40
   1651c:	2c00      	cmp	r4, #0
   1651e:	f000 8096 	beq.w	1664e <rpc_transport_input+0x1da>
   16522:	6c94      	ldr	r4, [r2, #72]	; 0x48
   16524:	2c00      	cmp	r4, #0
   16526:	f000 8096 	beq.w	16656 <rpc_transport_input+0x1e2>
   1652a:	6d14      	ldr	r4, [r2, #80]	; 0x50
   1652c:	2c00      	cmp	r4, #0
   1652e:	f000 8096 	beq.w	1665e <rpc_transport_input+0x1ea>
   16532:	6d94      	ldr	r4, [r2, #88]	; 0x58
   16534:	2c00      	cmp	r4, #0
   16536:	f000 8098 	beq.w	1666a <rpc_transport_input+0x1f6>
   1653a:	6e14      	ldr	r4, [r2, #96]	; 0x60
   1653c:	2c00      	cmp	r4, #0
   1653e:	f000 8098 	beq.w	16672 <rpc_transport_input+0x1fe>
   16542:	6e94      	ldr	r4, [r2, #104]	; 0x68
   16544:	2c00      	cmp	r4, #0
   16546:	f000 8096 	beq.w	16676 <rpc_transport_input+0x202>
   1654a:	6f14      	ldr	r4, [r2, #112]	; 0x70
   1654c:	2c00      	cmp	r4, #0
   1654e:	f000 8094 	beq.w	1667a <rpc_transport_input+0x206>
   16552:	6f94      	ldr	r4, [r2, #120]	; 0x78
   16554:	b10c      	cbz	r4, 1655a <rpc_transport_input+0xe6>
   16556:	2001      	movs	r0, #1
   16558:	bd38      	pop	{r3, r4, r5, pc}
   1655a:	240f      	movs	r4, #15
   1655c:	eb02 05c4 	add.w	r5, r2, r4, lsl #3
   16560:	f842 0034 	str.w	r0, [r2, r4, lsl #3]
   16564:	80ab      	strh	r3, [r5, #4]
   16566:	4b49      	ldr	r3, [pc, #292]	; (1668c <rpc_transport_input+0x218>)
   16568:	781a      	ldrb	r2, [r3, #0]
   1656a:	2a01      	cmp	r2, #1
   1656c:	d053      	beq.n	16616 <rpc_transport_input+0x1a2>
   1656e:	7a1a      	ldrb	r2, [r3, #8]
   16570:	2a01      	cmp	r2, #1
   16572:	d041      	beq.n	165f8 <rpc_transport_input+0x184>
   16574:	7c1a      	ldrb	r2, [r3, #16]
   16576:	2a01      	cmp	r2, #1
   16578:	d04f      	beq.n	1661a <rpc_transport_input+0x1a6>
   1657a:	7e1a      	ldrb	r2, [r3, #24]
   1657c:	2a01      	cmp	r2, #1
   1657e:	d050      	beq.n	16622 <rpc_transport_input+0x1ae>
   16580:	f893 2020 	ldrb.w	r2, [r3, #32]
   16584:	2a01      	cmp	r2, #1
   16586:	d050      	beq.n	1662a <rpc_transport_input+0x1b6>
   16588:	f893 2028 	ldrb.w	r2, [r3, #40]	; 0x28
   1658c:	2a01      	cmp	r2, #1
   1658e:	d050      	beq.n	16632 <rpc_transport_input+0x1be>
   16590:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
   16594:	2a01      	cmp	r2, #1
   16596:	d03a      	beq.n	1660e <rpc_transport_input+0x19a>
   16598:	f893 2038 	ldrb.w	r2, [r3, #56]	; 0x38
   1659c:	2a01      	cmp	r2, #1
   1659e:	d04c      	beq.n	1663a <rpc_transport_input+0x1c6>
   165a0:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
   165a4:	2a01      	cmp	r2, #1
   165a6:	d04a      	beq.n	1663e <rpc_transport_input+0x1ca>
   165a8:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
   165ac:	2a01      	cmp	r2, #1
   165ae:	d04c      	beq.n	1664a <rpc_transport_input+0x1d6>
   165b0:	f893 2050 	ldrb.w	r2, [r3, #80]	; 0x50
   165b4:	2a01      	cmp	r2, #1
   165b6:	d04c      	beq.n	16652 <rpc_transport_input+0x1de>
   165b8:	f893 2058 	ldrb.w	r2, [r3, #88]	; 0x58
   165bc:	2a01      	cmp	r2, #1
   165be:	d04c      	beq.n	1665a <rpc_transport_input+0x1e6>
   165c0:	f893 2060 	ldrb.w	r2, [r3, #96]	; 0x60
   165c4:	2a01      	cmp	r2, #1
   165c6:	d04c      	beq.n	16662 <rpc_transport_input+0x1ee>
   165c8:	f893 2068 	ldrb.w	r2, [r3, #104]	; 0x68
   165cc:	2a01      	cmp	r2, #1
   165ce:	d04a      	beq.n	16666 <rpc_transport_input+0x1f2>
   165d0:	f893 2070 	ldrb.w	r2, [r3, #112]	; 0x70
   165d4:	2a01      	cmp	r2, #1
   165d6:	d04a      	beq.n	1666e <rpc_transport_input+0x1fa>
   165d8:	f893 2078 	ldrb.w	r2, [r3, #120]	; 0x78
   165dc:	2a01      	cmp	r2, #1
   165de:	d00a      	beq.n	165f6 <rpc_transport_input+0x182>
   165e0:	2c10      	cmp	r4, #16
   165e2:	d0b8      	beq.n	16556 <rpc_transport_input+0xe2>
   165e4:	2200      	movs	r2, #0
   165e6:	4b28      	ldr	r3, [pc, #160]	; (16688 <rpc_transport_input+0x214>)
   165e8:	2001      	movs	r0, #1
   165ea:	eb03 01c4 	add.w	r1, r3, r4, lsl #3
   165ee:	808a      	strh	r2, [r1, #4]
   165f0:	f843 2034 	str.w	r2, [r3, r4, lsl #3]
   165f4:	bd38      	pop	{r3, r4, r5, pc}
   165f6:	220f      	movs	r2, #15
   165f8:	2402      	movs	r4, #2
   165fa:	eb03 00c2 	add.w	r0, r3, r2, lsl #3
   165fe:	f803 4032 	strb.w	r4, [r3, r2, lsl #3]
   16602:	6041      	str	r1, [r0, #4]
   16604:	f7f9 f9a4 	bl	f950 <bsd_os_application_irq_set>
   16608:	e7a5      	b.n	16556 <rpc_transport_input+0xe2>
   1660a:	2410      	movs	r4, #16
   1660c:	e7ab      	b.n	16566 <rpc_transport_input+0xf2>
   1660e:	2206      	movs	r2, #6
   16610:	e7f2      	b.n	165f8 <rpc_transport_input+0x184>
   16612:	2405      	movs	r4, #5
   16614:	e7a2      	b.n	1655c <rpc_transport_input+0xe8>
   16616:	2200      	movs	r2, #0
   16618:	e7ee      	b.n	165f8 <rpc_transport_input+0x184>
   1661a:	2202      	movs	r2, #2
   1661c:	e7ec      	b.n	165f8 <rpc_transport_input+0x184>
   1661e:	2401      	movs	r4, #1
   16620:	e79c      	b.n	1655c <rpc_transport_input+0xe8>
   16622:	2203      	movs	r2, #3
   16624:	e7e8      	b.n	165f8 <rpc_transport_input+0x184>
   16626:	2402      	movs	r4, #2
   16628:	e798      	b.n	1655c <rpc_transport_input+0xe8>
   1662a:	2204      	movs	r2, #4
   1662c:	e7e4      	b.n	165f8 <rpc_transport_input+0x184>
   1662e:	2403      	movs	r4, #3
   16630:	e794      	b.n	1655c <rpc_transport_input+0xe8>
   16632:	2205      	movs	r2, #5
   16634:	e7e0      	b.n	165f8 <rpc_transport_input+0x184>
   16636:	2404      	movs	r4, #4
   16638:	e790      	b.n	1655c <rpc_transport_input+0xe8>
   1663a:	2207      	movs	r2, #7
   1663c:	e7dc      	b.n	165f8 <rpc_transport_input+0x184>
   1663e:	2208      	movs	r2, #8
   16640:	e7da      	b.n	165f8 <rpc_transport_input+0x184>
   16642:	2406      	movs	r4, #6
   16644:	e78a      	b.n	1655c <rpc_transport_input+0xe8>
   16646:	2407      	movs	r4, #7
   16648:	e788      	b.n	1655c <rpc_transport_input+0xe8>
   1664a:	2209      	movs	r2, #9
   1664c:	e7d4      	b.n	165f8 <rpc_transport_input+0x184>
   1664e:	2408      	movs	r4, #8
   16650:	e784      	b.n	1655c <rpc_transport_input+0xe8>
   16652:	220a      	movs	r2, #10
   16654:	e7d0      	b.n	165f8 <rpc_transport_input+0x184>
   16656:	2409      	movs	r4, #9
   16658:	e780      	b.n	1655c <rpc_transport_input+0xe8>
   1665a:	220b      	movs	r2, #11
   1665c:	e7cc      	b.n	165f8 <rpc_transport_input+0x184>
   1665e:	240a      	movs	r4, #10
   16660:	e77c      	b.n	1655c <rpc_transport_input+0xe8>
   16662:	220c      	movs	r2, #12
   16664:	e7c8      	b.n	165f8 <rpc_transport_input+0x184>
   16666:	220d      	movs	r2, #13
   16668:	e7c6      	b.n	165f8 <rpc_transport_input+0x184>
   1666a:	240b      	movs	r4, #11
   1666c:	e776      	b.n	1655c <rpc_transport_input+0xe8>
   1666e:	220e      	movs	r2, #14
   16670:	e7c2      	b.n	165f8 <rpc_transport_input+0x184>
   16672:	240c      	movs	r4, #12
   16674:	e772      	b.n	1655c <rpc_transport_input+0xe8>
   16676:	240d      	movs	r4, #13
   16678:	e770      	b.n	1655c <rpc_transport_input+0xe8>
   1667a:	240e      	movs	r4, #14
   1667c:	e76e      	b.n	1655c <rpc_transport_input+0xe8>
   1667e:	bf00      	nop
   16680:	20020818 	.word	0x20020818
   16684:	200208b8 	.word	0x200208b8
   16688:	200208d0 	.word	0x200208d0
   1668c:	20020950 	.word	0x20020950

00016690 <rpc_transport_register>:
   16690:	b4f0      	push	{r4, r5, r6, r7}
   16692:	2900      	cmp	r1, #0
   16694:	d052      	beq.n	1673c <rpc_transport_register+0xac>
   16696:	2800      	cmp	r0, #0
   16698:	d050      	beq.n	1673c <rpc_transport_register+0xac>
   1669a:	6883      	ldr	r3, [r0, #8]
   1669c:	2b00      	cmp	r3, #0
   1669e:	d04d      	beq.n	1673c <rpc_transport_register+0xac>
   166a0:	6903      	ldr	r3, [r0, #16]
   166a2:	2b00      	cmp	r3, #0
   166a4:	d04a      	beq.n	1673c <rpc_transport_register+0xac>
   166a6:	6843      	ldr	r3, [r0, #4]
   166a8:	2b00      	cmp	r3, #0
   166aa:	d047      	beq.n	1673c <rpc_transport_register+0xac>
   166ac:	68c3      	ldr	r3, [r0, #12]
   166ae:	2b00      	cmp	r3, #0
   166b0:	d044      	beq.n	1673c <rpc_transport_register+0xac>
   166b2:	6803      	ldr	r3, [r0, #0]
   166b4:	2b00      	cmp	r3, #0
   166b6:	d041      	beq.n	1673c <rpc_transport_register+0xac>
   166b8:	6943      	ldr	r3, [r0, #20]
   166ba:	2b00      	cmp	r3, #0
   166bc:	d03e      	beq.n	1673c <rpc_transport_register+0xac>
   166be:	2601      	movs	r6, #1
   166c0:	2500      	movs	r5, #0
   166c2:	4604      	mov	r4, r0
   166c4:	460f      	mov	r7, r1
   166c6:	4a1f      	ldr	r2, [pc, #124]	; (16744 <rpc_transport_register+0xb4>)
   166c8:	4b1f      	ldr	r3, [pc, #124]	; (16748 <rpc_transport_register+0xb8>)
   166ca:	f8df c080 	ldr.w	ip, [pc, #128]	; 1674c <rpc_transport_register+0xbc>
   166ce:	7416      	strb	r6, [r2, #16]
   166d0:	7616      	strb	r6, [r2, #24]
   166d2:	f882 6020 	strb.w	r6, [r2, #32]
   166d6:	f882 6028 	strb.w	r6, [r2, #40]	; 0x28
   166da:	f882 6030 	strb.w	r6, [r2, #48]	; 0x30
   166de:	f882 6038 	strb.w	r6, [r2, #56]	; 0x38
   166e2:	f882 6040 	strb.w	r6, [r2, #64]	; 0x40
   166e6:	f882 6048 	strb.w	r6, [r2, #72]	; 0x48
   166ea:	f882 6050 	strb.w	r6, [r2, #80]	; 0x50
   166ee:	f882 6058 	strb.w	r6, [r2, #88]	; 0x58
   166f2:	f882 6060 	strb.w	r6, [r2, #96]	; 0x60
   166f6:	f882 6068 	strb.w	r6, [r2, #104]	; 0x68
   166fa:	f882 6070 	strb.w	r6, [r2, #112]	; 0x70
   166fe:	f882 6078 	strb.w	r6, [r2, #120]	; 0x78
   16702:	611d      	str	r5, [r3, #16]
   16704:	619d      	str	r5, [r3, #24]
   16706:	621d      	str	r5, [r3, #32]
   16708:	629d      	str	r5, [r3, #40]	; 0x28
   1670a:	631d      	str	r5, [r3, #48]	; 0x30
   1670c:	639d      	str	r5, [r3, #56]	; 0x38
   1670e:	641d      	str	r5, [r3, #64]	; 0x40
   16710:	649d      	str	r5, [r3, #72]	; 0x48
   16712:	651d      	str	r5, [r3, #80]	; 0x50
   16714:	659d      	str	r5, [r3, #88]	; 0x58
   16716:	661d      	str	r5, [r3, #96]	; 0x60
   16718:	669d      	str	r5, [r3, #104]	; 0x68
   1671a:	671d      	str	r5, [r3, #112]	; 0x70
   1671c:	679d      	str	r5, [r3, #120]	; 0x78
   1671e:	7016      	strb	r6, [r2, #0]
   16720:	7216      	strb	r6, [r2, #8]
   16722:	601d      	str	r5, [r3, #0]
   16724:	609d      	str	r5, [r3, #8]
   16726:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   16728:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   1672c:	e894 0003 	ldmia.w	r4, {r0, r1}
   16730:	e88c 0003 	stmia.w	ip, {r0, r1}
   16734:	603e      	str	r6, [r7, #0]
   16736:	4628      	mov	r0, r5
   16738:	bcf0      	pop	{r4, r5, r6, r7}
   1673a:	4770      	bx	lr
   1673c:	250e      	movs	r5, #14
   1673e:	4628      	mov	r0, r5
   16740:	bcf0      	pop	{r4, r5, r6, r7}
   16742:	4770      	bx	lr
   16744:	20020950 	.word	0x20020950
   16748:	200208d0 	.word	0x200208d0
   1674c:	200208b8 	.word	0x200208b8

00016750 <rpc_transport_unregister>:
   16750:	2800      	cmp	r0, #0
   16752:	d03a      	beq.n	167ca <rpc_transport_unregister+0x7a>
   16754:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   16758:	4680      	mov	r8, r0
   1675a:	4c1d      	ldr	r4, [pc, #116]	; (167d0 <rpc_transport_unregister+0x80>)
   1675c:	f104 05a0 	add.w	r5, r4, #160	; 0xa0
   16760:	68a3      	ldr	r3, [r4, #8]
   16762:	3410      	adds	r4, #16
   16764:	b103      	cbz	r3, 16768 <rpc_transport_unregister+0x18>
   16766:	4798      	blx	r3
   16768:	42ac      	cmp	r4, r5
   1676a:	d1f9      	bne.n	16760 <rpc_transport_unregister+0x10>
   1676c:	f04f 0901 	mov.w	r9, #1
   16770:	2600      	movs	r6, #0
   16772:	4c18      	ldr	r4, [pc, #96]	; (167d4 <rpc_transport_unregister+0x84>)
   16774:	4d18      	ldr	r5, [pc, #96]	; (167d8 <rpc_transport_unregister+0x88>)
   16776:	f8df a064 	ldr.w	sl, [pc, #100]	; 167dc <rpc_transport_unregister+0x8c>
   1677a:	f104 0780 	add.w	r7, r4, #128	; 0x80
   1677e:	f814 3c04 	ldrb.w	r3, [r4, #-4]
   16782:	2b01      	cmp	r3, #1
   16784:	d005      	beq.n	16792 <rpc_transport_unregister+0x42>
   16786:	f8da 300c 	ldr.w	r3, [sl, #12]
   1678a:	6820      	ldr	r0, [r4, #0]
   1678c:	4798      	blx	r3
   1678e:	f804 9c04 	strb.w	r9, [r4, #-4]
   16792:	f855 0c04 	ldr.w	r0, [r5, #-4]
   16796:	3408      	adds	r4, #8
   16798:	b128      	cbz	r0, 167a6 <rpc_transport_unregister+0x56>
   1679a:	f8da 3010 	ldr.w	r3, [sl, #16]
   1679e:	4798      	blx	r3
   167a0:	802e      	strh	r6, [r5, #0]
   167a2:	f845 6c04 	str.w	r6, [r5, #-4]
   167a6:	42bc      	cmp	r4, r7
   167a8:	f105 0508 	add.w	r5, r5, #8
   167ac:	d1e7      	bne.n	1677e <rpc_transport_unregister+0x2e>
   167ae:	f8d8 0000 	ldr.w	r0, [r8]
   167b2:	2218      	movs	r2, #24
   167b4:	3801      	subs	r0, #1
   167b6:	eb00 0040 	add.w	r0, r0, r0, lsl #1
   167ba:	eb0a 00c0 	add.w	r0, sl, r0, lsl #3
   167be:	2100      	movs	r1, #0
   167c0:	f004 f85b 	bl	1a87a <memset>
   167c4:	2000      	movs	r0, #0
   167c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   167ca:	200e      	movs	r0, #14
   167cc:	4770      	bx	lr
   167ce:	bf00      	nop
   167d0:	20020818 	.word	0x20020818
   167d4:	20020954 	.word	0x20020954
   167d8:	200208d4 	.word	0x200208d4
   167dc:	200208b8 	.word	0x200208b8

000167e0 <rpc_message_send>:
   167e0:	b168      	cbz	r0, 167fe <rpc_message_send+0x1e>
   167e2:	b171      	cbz	r1, 16802 <rpc_message_send+0x22>
   167e4:	4a09      	ldr	r2, [pc, #36]	; (1680c <rpc_message_send+0x2c>)
   167e6:	6853      	ldr	r3, [r2, #4]
   167e8:	b16b      	cbz	r3, 16806 <rpc_message_send+0x26>
   167ea:	684b      	ldr	r3, [r1, #4]
   167ec:	8008      	strh	r0, [r1, #0]
   167ee:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
   167f2:	f043 0302 	orr.w	r3, r3, #2
   167f6:	6812      	ldr	r2, [r2, #0]
   167f8:	604b      	str	r3, [r1, #4]
   167fa:	4608      	mov	r0, r1
   167fc:	4710      	bx	r2
   167fe:	2007      	movs	r0, #7
   16800:	4770      	bx	lr
   16802:	200e      	movs	r0, #14
   16804:	4770      	bx	lr
   16806:	2008      	movs	r0, #8
   16808:	4770      	bx	lr
   1680a:	bf00      	nop
   1680c:	200208b8 	.word	0x200208b8

00016810 <rpc_message_alloc>:
   16810:	b35a      	cbz	r2, 1686a <rpc_message_alloc+0x5a>
   16812:	b330      	cbz	r0, 16862 <rpc_message_alloc+0x52>
   16814:	2300      	movs	r3, #0
   16816:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1681a:	4f15      	ldr	r7, [pc, #84]	; (16870 <rpc_message_alloc+0x60>)
   1681c:	6013      	str	r3, [r2, #0]
   1681e:	687b      	ldr	r3, [r7, #4]
   16820:	b30b      	cbz	r3, 16866 <rpc_message_alloc+0x56>
   16822:	4615      	mov	r5, r2
   16824:	460c      	mov	r4, r1
   16826:	4606      	mov	r6, r0
   16828:	b959      	cbnz	r1, 16842 <rpc_message_alloc+0x32>
   1682a:	4798      	blx	r3
   1682c:	4603      	mov	r3, r0
   1682e:	b1a8      	cbz	r0, 1685c <rpc_message_alloc+0x4c>
   16830:	46a0      	mov	r8, r4
   16832:	60dc      	str	r4, [r3, #12]
   16834:	f8c3 8008 	str.w	r8, [r3, #8]
   16838:	801e      	strh	r6, [r3, #0]
   1683a:	602b      	str	r3, [r5, #0]
   1683c:	2000      	movs	r0, #0
   1683e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   16842:	68bb      	ldr	r3, [r7, #8]
   16844:	4608      	mov	r0, r1
   16846:	4798      	blx	r3
   16848:	4680      	mov	r8, r0
   1684a:	b138      	cbz	r0, 1685c <rpc_message_alloc+0x4c>
   1684c:	687b      	ldr	r3, [r7, #4]
   1684e:	4798      	blx	r3
   16850:	4603      	mov	r3, r0
   16852:	2800      	cmp	r0, #0
   16854:	d1ed      	bne.n	16832 <rpc_message_alloc+0x22>
   16856:	693b      	ldr	r3, [r7, #16]
   16858:	4640      	mov	r0, r8
   1685a:	4798      	blx	r3
   1685c:	2004      	movs	r0, #4
   1685e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   16862:	2007      	movs	r0, #7
   16864:	4770      	bx	lr
   16866:	2008      	movs	r0, #8
   16868:	e7f9      	b.n	1685e <rpc_message_alloc+0x4e>
   1686a:	200e      	movs	r0, #14
   1686c:	4770      	bx	lr
   1686e:	bf00      	nop
   16870:	200208b8 	.word	0x200208b8

00016874 <rpc_message_free>:
   16874:	2800      	cmp	r0, #0
   16876:	f000 808c 	beq.w	16992 <rpc_message_free+0x11e>
   1687a:	2900      	cmp	r1, #0
   1687c:	f000 80e9 	beq.w	16a52 <rpc_message_free+0x1de>
   16880:	b538      	push	{r3, r4, r5, lr}
   16882:	4a83      	ldr	r2, [pc, #524]	; (16a90 <rpc_message_free+0x21c>)
   16884:	6853      	ldr	r3, [r2, #4]
   16886:	2b00      	cmp	r3, #0
   16888:	f000 8085 	beq.w	16996 <rpc_message_free+0x122>
   1688c:	4c81      	ldr	r4, [pc, #516]	; (16a94 <rpc_message_free+0x220>)
   1688e:	4608      	mov	r0, r1
   16890:	6863      	ldr	r3, [r4, #4]
   16892:	4299      	cmp	r1, r3
   16894:	f000 8085 	beq.w	169a2 <rpc_message_free+0x12e>
   16898:	68e3      	ldr	r3, [r4, #12]
   1689a:	4298      	cmp	r0, r3
   1689c:	f000 808e 	beq.w	169bc <rpc_message_free+0x148>
   168a0:	6963      	ldr	r3, [r4, #20]
   168a2:	4298      	cmp	r0, r3
   168a4:	f000 8090 	beq.w	169c8 <rpc_message_free+0x154>
   168a8:	69e3      	ldr	r3, [r4, #28]
   168aa:	4298      	cmp	r0, r3
   168ac:	f000 8092 	beq.w	169d4 <rpc_message_free+0x160>
   168b0:	6a63      	ldr	r3, [r4, #36]	; 0x24
   168b2:	4298      	cmp	r0, r3
   168b4:	f000 8095 	beq.w	169e2 <rpc_message_free+0x16e>
   168b8:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   168ba:	4298      	cmp	r0, r3
   168bc:	f000 8098 	beq.w	169f0 <rpc_message_free+0x17c>
   168c0:	6b63      	ldr	r3, [r4, #52]	; 0x34
   168c2:	4298      	cmp	r0, r3
   168c4:	f000 809b 	beq.w	169fe <rpc_message_free+0x18a>
   168c8:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   168ca:	4298      	cmp	r0, r3
   168cc:	f000 809e 	beq.w	16a0c <rpc_message_free+0x198>
   168d0:	6c63      	ldr	r3, [r4, #68]	; 0x44
   168d2:	4298      	cmp	r0, r3
   168d4:	f000 80a1 	beq.w	16a1a <rpc_message_free+0x1a6>
   168d8:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
   168da:	4298      	cmp	r0, r3
   168dc:	f000 80a4 	beq.w	16a28 <rpc_message_free+0x1b4>
   168e0:	6d63      	ldr	r3, [r4, #84]	; 0x54
   168e2:	4298      	cmp	r0, r3
   168e4:	f000 80a7 	beq.w	16a36 <rpc_message_free+0x1c2>
   168e8:	6de3      	ldr	r3, [r4, #92]	; 0x5c
   168ea:	4298      	cmp	r0, r3
   168ec:	f000 80aa 	beq.w	16a44 <rpc_message_free+0x1d0>
   168f0:	6e63      	ldr	r3, [r4, #100]	; 0x64
   168f2:	4298      	cmp	r0, r3
   168f4:	f000 80af 	beq.w	16a56 <rpc_message_free+0x1e2>
   168f8:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
   168fa:	4298      	cmp	r0, r3
   168fc:	f000 80b2 	beq.w	16a64 <rpc_message_free+0x1f0>
   16900:	6f63      	ldr	r3, [r4, #116]	; 0x74
   16902:	4298      	cmp	r0, r3
   16904:	f000 80b5 	beq.w	16a72 <rpc_message_free+0x1fe>
   16908:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
   1690a:	4283      	cmp	r3, r0
   1690c:	f000 80b8 	beq.w	16a80 <rpc_message_free+0x20c>
   16910:	68d3      	ldr	r3, [r2, #12]
   16912:	4798      	blx	r3
   16914:	7823      	ldrb	r3, [r4, #0]
   16916:	2b04      	cmp	r3, #4
   16918:	d03f      	beq.n	1699a <rpc_message_free+0x126>
   1691a:	7a23      	ldrb	r3, [r4, #8]
   1691c:	2b04      	cmp	r3, #4
   1691e:	d03c      	beq.n	1699a <rpc_message_free+0x126>
   16920:	7c23      	ldrb	r3, [r4, #16]
   16922:	2b04      	cmp	r3, #4
   16924:	d039      	beq.n	1699a <rpc_message_free+0x126>
   16926:	7e23      	ldrb	r3, [r4, #24]
   16928:	2b04      	cmp	r3, #4
   1692a:	d036      	beq.n	1699a <rpc_message_free+0x126>
   1692c:	f894 3020 	ldrb.w	r3, [r4, #32]
   16930:	2b04      	cmp	r3, #4
   16932:	d032      	beq.n	1699a <rpc_message_free+0x126>
   16934:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
   16938:	2b04      	cmp	r3, #4
   1693a:	d02e      	beq.n	1699a <rpc_message_free+0x126>
   1693c:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
   16940:	2b04      	cmp	r3, #4
   16942:	d02a      	beq.n	1699a <rpc_message_free+0x126>
   16944:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
   16948:	2b04      	cmp	r3, #4
   1694a:	d026      	beq.n	1699a <rpc_message_free+0x126>
   1694c:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
   16950:	2b04      	cmp	r3, #4
   16952:	d022      	beq.n	1699a <rpc_message_free+0x126>
   16954:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
   16958:	2b04      	cmp	r3, #4
   1695a:	d01e      	beq.n	1699a <rpc_message_free+0x126>
   1695c:	f894 3050 	ldrb.w	r3, [r4, #80]	; 0x50
   16960:	2b04      	cmp	r3, #4
   16962:	d01a      	beq.n	1699a <rpc_message_free+0x126>
   16964:	f894 3058 	ldrb.w	r3, [r4, #88]	; 0x58
   16968:	2b04      	cmp	r3, #4
   1696a:	d016      	beq.n	1699a <rpc_message_free+0x126>
   1696c:	f894 3060 	ldrb.w	r3, [r4, #96]	; 0x60
   16970:	2b04      	cmp	r3, #4
   16972:	d012      	beq.n	1699a <rpc_message_free+0x126>
   16974:	f894 3068 	ldrb.w	r3, [r4, #104]	; 0x68
   16978:	2b04      	cmp	r3, #4
   1697a:	d00e      	beq.n	1699a <rpc_message_free+0x126>
   1697c:	f894 3070 	ldrb.w	r3, [r4, #112]	; 0x70
   16980:	2b04      	cmp	r3, #4
   16982:	d00a      	beq.n	1699a <rpc_message_free+0x126>
   16984:	f894 3078 	ldrb.w	r3, [r4, #120]	; 0x78
   16988:	2b04      	cmp	r3, #4
   1698a:	bf18      	it	ne
   1698c:	2000      	movne	r0, #0
   1698e:	d004      	beq.n	1699a <rpc_message_free+0x126>
   16990:	bd38      	pop	{r3, r4, r5, pc}
   16992:	2007      	movs	r0, #7
   16994:	4770      	bx	lr
   16996:	2008      	movs	r0, #8
   16998:	bd38      	pop	{r3, r4, r5, pc}
   1699a:	f7f8 ffd9 	bl	f950 <bsd_os_application_irq_set>
   1699e:	2000      	movs	r0, #0
   169a0:	bd38      	pop	{r3, r4, r5, pc}
   169a2:	7821      	ldrb	r1, [r4, #0]
   169a4:	2903      	cmp	r1, #3
   169a6:	f47f af77 	bne.w	16898 <rpc_message_free+0x24>
   169aa:	2100      	movs	r1, #0
   169ac:	2501      	movs	r5, #1
   169ae:	4618      	mov	r0, r3
   169b0:	68d2      	ldr	r2, [r2, #12]
   169b2:	f804 5031 	strb.w	r5, [r4, r1, lsl #3]
   169b6:	4790      	blx	r2
   169b8:	2000      	movs	r0, #0
   169ba:	bd38      	pop	{r3, r4, r5, pc}
   169bc:	7a21      	ldrb	r1, [r4, #8]
   169be:	2903      	cmp	r1, #3
   169c0:	f47f af6e 	bne.w	168a0 <rpc_message_free+0x2c>
   169c4:	2101      	movs	r1, #1
   169c6:	e7f1      	b.n	169ac <rpc_message_free+0x138>
   169c8:	7c21      	ldrb	r1, [r4, #16]
   169ca:	2903      	cmp	r1, #3
   169cc:	f47f af6c 	bne.w	168a8 <rpc_message_free+0x34>
   169d0:	2102      	movs	r1, #2
   169d2:	e7eb      	b.n	169ac <rpc_message_free+0x138>
   169d4:	7e21      	ldrb	r1, [r4, #24]
   169d6:	2903      	cmp	r1, #3
   169d8:	d0e8      	beq.n	169ac <rpc_message_free+0x138>
   169da:	6a63      	ldr	r3, [r4, #36]	; 0x24
   169dc:	4298      	cmp	r0, r3
   169de:	f47f af6b 	bne.w	168b8 <rpc_message_free+0x44>
   169e2:	f894 1020 	ldrb.w	r1, [r4, #32]
   169e6:	2903      	cmp	r1, #3
   169e8:	f47f af66 	bne.w	168b8 <rpc_message_free+0x44>
   169ec:	2104      	movs	r1, #4
   169ee:	e7dd      	b.n	169ac <rpc_message_free+0x138>
   169f0:	f894 1028 	ldrb.w	r1, [r4, #40]	; 0x28
   169f4:	2903      	cmp	r1, #3
   169f6:	f47f af63 	bne.w	168c0 <rpc_message_free+0x4c>
   169fa:	2105      	movs	r1, #5
   169fc:	e7d6      	b.n	169ac <rpc_message_free+0x138>
   169fe:	f894 1030 	ldrb.w	r1, [r4, #48]	; 0x30
   16a02:	2903      	cmp	r1, #3
   16a04:	f47f af60 	bne.w	168c8 <rpc_message_free+0x54>
   16a08:	2106      	movs	r1, #6
   16a0a:	e7cf      	b.n	169ac <rpc_message_free+0x138>
   16a0c:	f894 1038 	ldrb.w	r1, [r4, #56]	; 0x38
   16a10:	2903      	cmp	r1, #3
   16a12:	f47f af5d 	bne.w	168d0 <rpc_message_free+0x5c>
   16a16:	2107      	movs	r1, #7
   16a18:	e7c8      	b.n	169ac <rpc_message_free+0x138>
   16a1a:	f894 1040 	ldrb.w	r1, [r4, #64]	; 0x40
   16a1e:	2903      	cmp	r1, #3
   16a20:	f47f af5a 	bne.w	168d8 <rpc_message_free+0x64>
   16a24:	2108      	movs	r1, #8
   16a26:	e7c1      	b.n	169ac <rpc_message_free+0x138>
   16a28:	f894 1048 	ldrb.w	r1, [r4, #72]	; 0x48
   16a2c:	2903      	cmp	r1, #3
   16a2e:	f47f af57 	bne.w	168e0 <rpc_message_free+0x6c>
   16a32:	2109      	movs	r1, #9
   16a34:	e7ba      	b.n	169ac <rpc_message_free+0x138>
   16a36:	f894 1050 	ldrb.w	r1, [r4, #80]	; 0x50
   16a3a:	2903      	cmp	r1, #3
   16a3c:	f47f af54 	bne.w	168e8 <rpc_message_free+0x74>
   16a40:	210a      	movs	r1, #10
   16a42:	e7b3      	b.n	169ac <rpc_message_free+0x138>
   16a44:	f894 1058 	ldrb.w	r1, [r4, #88]	; 0x58
   16a48:	2903      	cmp	r1, #3
   16a4a:	f47f af51 	bne.w	168f0 <rpc_message_free+0x7c>
   16a4e:	210b      	movs	r1, #11
   16a50:	e7ac      	b.n	169ac <rpc_message_free+0x138>
   16a52:	200e      	movs	r0, #14
   16a54:	4770      	bx	lr
   16a56:	f894 1060 	ldrb.w	r1, [r4, #96]	; 0x60
   16a5a:	2903      	cmp	r1, #3
   16a5c:	f47f af4c 	bne.w	168f8 <rpc_message_free+0x84>
   16a60:	210c      	movs	r1, #12
   16a62:	e7a3      	b.n	169ac <rpc_message_free+0x138>
   16a64:	f894 1068 	ldrb.w	r1, [r4, #104]	; 0x68
   16a68:	2903      	cmp	r1, #3
   16a6a:	f47f af49 	bne.w	16900 <rpc_message_free+0x8c>
   16a6e:	210d      	movs	r1, #13
   16a70:	e79c      	b.n	169ac <rpc_message_free+0x138>
   16a72:	f894 1070 	ldrb.w	r1, [r4, #112]	; 0x70
   16a76:	2903      	cmp	r1, #3
   16a78:	f47f af46 	bne.w	16908 <rpc_message_free+0x94>
   16a7c:	210e      	movs	r1, #14
   16a7e:	e795      	b.n	169ac <rpc_message_free+0x138>
   16a80:	f894 3078 	ldrb.w	r3, [r4, #120]	; 0x78
   16a84:	2b03      	cmp	r3, #3
   16a86:	f47f af43 	bne.w	16910 <rpc_message_free+0x9c>
   16a8a:	4603      	mov	r3, r0
   16a8c:	210f      	movs	r1, #15
   16a8e:	e78d      	b.n	169ac <rpc_message_free+0x138>
   16a90:	200208b8 	.word	0x200208b8
   16a94:	20020950 	.word	0x20020950

00016a98 <rpc_message_data_free>:
   16a98:	2800      	cmp	r0, #0
   16a9a:	f000 8091 	beq.w	16bc0 <rpc_message_data_free+0x128>
   16a9e:	2900      	cmp	r1, #0
   16aa0:	f000 80e4 	beq.w	16c6c <rpc_message_data_free+0x1d4>
   16aa4:	b538      	push	{r3, r4, r5, lr}
   16aa6:	4a81      	ldr	r2, [pc, #516]	; (16cac <rpc_message_data_free+0x214>)
   16aa8:	6853      	ldr	r3, [r2, #4]
   16aaa:	2b00      	cmp	r3, #0
   16aac:	f000 808a 	beq.w	16bc4 <rpc_message_data_free+0x12c>
   16ab0:	4b7f      	ldr	r3, [pc, #508]	; (16cb0 <rpc_message_data_free+0x218>)
   16ab2:	681c      	ldr	r4, [r3, #0]
   16ab4:	42a1      	cmp	r1, r4
   16ab6:	f000 8087 	beq.w	16bc8 <rpc_message_data_free+0x130>
   16aba:	689c      	ldr	r4, [r3, #8]
   16abc:	42a1      	cmp	r1, r4
   16abe:	f000 808f 	beq.w	16be0 <rpc_message_data_free+0x148>
   16ac2:	691c      	ldr	r4, [r3, #16]
   16ac4:	42a1      	cmp	r1, r4
   16ac6:	f000 8091 	beq.w	16bec <rpc_message_data_free+0x154>
   16aca:	699c      	ldr	r4, [r3, #24]
   16acc:	42a1      	cmp	r1, r4
   16ace:	f000 8093 	beq.w	16bf8 <rpc_message_data_free+0x160>
   16ad2:	6a1c      	ldr	r4, [r3, #32]
   16ad4:	42a1      	cmp	r1, r4
   16ad6:	f000 8095 	beq.w	16c04 <rpc_message_data_free+0x16c>
   16ada:	6a9c      	ldr	r4, [r3, #40]	; 0x28
   16adc:	42a1      	cmp	r1, r4
   16ade:	f000 8097 	beq.w	16c10 <rpc_message_data_free+0x178>
   16ae2:	6b1c      	ldr	r4, [r3, #48]	; 0x30
   16ae4:	42a1      	cmp	r1, r4
   16ae6:	f000 8099 	beq.w	16c1c <rpc_message_data_free+0x184>
   16aea:	6b9c      	ldr	r4, [r3, #56]	; 0x38
   16aec:	42a1      	cmp	r1, r4
   16aee:	f000 809b 	beq.w	16c28 <rpc_message_data_free+0x190>
   16af2:	6c1c      	ldr	r4, [r3, #64]	; 0x40
   16af4:	42a1      	cmp	r1, r4
   16af6:	f000 809d 	beq.w	16c34 <rpc_message_data_free+0x19c>
   16afa:	6c9c      	ldr	r4, [r3, #72]	; 0x48
   16afc:	42a1      	cmp	r1, r4
   16afe:	f000 80a0 	beq.w	16c42 <rpc_message_data_free+0x1aa>
   16b02:	6d1c      	ldr	r4, [r3, #80]	; 0x50
   16b04:	42a1      	cmp	r1, r4
   16b06:	f000 80a3 	beq.w	16c50 <rpc_message_data_free+0x1b8>
   16b0a:	6d9c      	ldr	r4, [r3, #88]	; 0x58
   16b0c:	42a1      	cmp	r1, r4
   16b0e:	f000 80a6 	beq.w	16c5e <rpc_message_data_free+0x1c6>
   16b12:	6e1c      	ldr	r4, [r3, #96]	; 0x60
   16b14:	42a1      	cmp	r1, r4
   16b16:	f000 80ab 	beq.w	16c70 <rpc_message_data_free+0x1d8>
   16b1a:	6e9c      	ldr	r4, [r3, #104]	; 0x68
   16b1c:	42a1      	cmp	r1, r4
   16b1e:	f000 80ae 	beq.w	16c7e <rpc_message_data_free+0x1e6>
   16b22:	6f1c      	ldr	r4, [r3, #112]	; 0x70
   16b24:	42a1      	cmp	r1, r4
   16b26:	f000 80b1 	beq.w	16c8c <rpc_message_data_free+0x1f4>
   16b2a:	6f9c      	ldr	r4, [r3, #120]	; 0x78
   16b2c:	428c      	cmp	r4, r1
   16b2e:	f000 80b4 	beq.w	16c9a <rpc_message_data_free+0x202>
   16b32:	6913      	ldr	r3, [r2, #16]
   16b34:	4608      	mov	r0, r1
   16b36:	4798      	blx	r3
   16b38:	4b5e      	ldr	r3, [pc, #376]	; (16cb4 <rpc_message_data_free+0x21c>)
   16b3a:	781a      	ldrb	r2, [r3, #0]
   16b3c:	2a04      	cmp	r2, #4
   16b3e:	d03b      	beq.n	16bb8 <rpc_message_data_free+0x120>
   16b40:	7a1a      	ldrb	r2, [r3, #8]
   16b42:	2a04      	cmp	r2, #4
   16b44:	d038      	beq.n	16bb8 <rpc_message_data_free+0x120>
   16b46:	7c1a      	ldrb	r2, [r3, #16]
   16b48:	2a04      	cmp	r2, #4
   16b4a:	d035      	beq.n	16bb8 <rpc_message_data_free+0x120>
   16b4c:	7e1a      	ldrb	r2, [r3, #24]
   16b4e:	2a04      	cmp	r2, #4
   16b50:	d032      	beq.n	16bb8 <rpc_message_data_free+0x120>
   16b52:	f893 2020 	ldrb.w	r2, [r3, #32]
   16b56:	2a04      	cmp	r2, #4
   16b58:	d02e      	beq.n	16bb8 <rpc_message_data_free+0x120>
   16b5a:	f893 2028 	ldrb.w	r2, [r3, #40]	; 0x28
   16b5e:	2a04      	cmp	r2, #4
   16b60:	d02a      	beq.n	16bb8 <rpc_message_data_free+0x120>
   16b62:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
   16b66:	2a04      	cmp	r2, #4
   16b68:	d026      	beq.n	16bb8 <rpc_message_data_free+0x120>
   16b6a:	f893 2038 	ldrb.w	r2, [r3, #56]	; 0x38
   16b6e:	2a04      	cmp	r2, #4
   16b70:	d022      	beq.n	16bb8 <rpc_message_data_free+0x120>
   16b72:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
   16b76:	2a04      	cmp	r2, #4
   16b78:	d01e      	beq.n	16bb8 <rpc_message_data_free+0x120>
   16b7a:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
   16b7e:	2a04      	cmp	r2, #4
   16b80:	d01a      	beq.n	16bb8 <rpc_message_data_free+0x120>
   16b82:	f893 2050 	ldrb.w	r2, [r3, #80]	; 0x50
   16b86:	2a04      	cmp	r2, #4
   16b88:	d016      	beq.n	16bb8 <rpc_message_data_free+0x120>
   16b8a:	f893 2058 	ldrb.w	r2, [r3, #88]	; 0x58
   16b8e:	2a04      	cmp	r2, #4
   16b90:	d012      	beq.n	16bb8 <rpc_message_data_free+0x120>
   16b92:	f893 2060 	ldrb.w	r2, [r3, #96]	; 0x60
   16b96:	2a04      	cmp	r2, #4
   16b98:	d00e      	beq.n	16bb8 <rpc_message_data_free+0x120>
   16b9a:	f893 2068 	ldrb.w	r2, [r3, #104]	; 0x68
   16b9e:	2a04      	cmp	r2, #4
   16ba0:	d00a      	beq.n	16bb8 <rpc_message_data_free+0x120>
   16ba2:	f893 2070 	ldrb.w	r2, [r3, #112]	; 0x70
   16ba6:	2a04      	cmp	r2, #4
   16ba8:	d006      	beq.n	16bb8 <rpc_message_data_free+0x120>
   16baa:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
   16bae:	2b04      	cmp	r3, #4
   16bb0:	bf18      	it	ne
   16bb2:	2000      	movne	r0, #0
   16bb4:	d000      	beq.n	16bb8 <rpc_message_data_free+0x120>
   16bb6:	bd38      	pop	{r3, r4, r5, pc}
   16bb8:	f7f8 feca 	bl	f950 <bsd_os_application_irq_set>
   16bbc:	2000      	movs	r0, #0
   16bbe:	bd38      	pop	{r3, r4, r5, pc}
   16bc0:	2007      	movs	r0, #7
   16bc2:	4770      	bx	lr
   16bc4:	2008      	movs	r0, #8
   16bc6:	bd38      	pop	{r3, r4, r5, pc}
   16bc8:	889c      	ldrh	r4, [r3, #4]
   16bca:	4284      	cmp	r4, r0
   16bcc:	f47f af75 	bne.w	16aba <rpc_message_data_free+0x22>
   16bd0:	2400      	movs	r4, #0
   16bd2:	2000      	movs	r0, #0
   16bd4:	eb03 05c4 	add.w	r5, r3, r4, lsl #3
   16bd8:	f843 0034 	str.w	r0, [r3, r4, lsl #3]
   16bdc:	80a8      	strh	r0, [r5, #4]
   16bde:	e7a8      	b.n	16b32 <rpc_message_data_free+0x9a>
   16be0:	899c      	ldrh	r4, [r3, #12]
   16be2:	4284      	cmp	r4, r0
   16be4:	f47f af6d 	bne.w	16ac2 <rpc_message_data_free+0x2a>
   16be8:	2401      	movs	r4, #1
   16bea:	e7f2      	b.n	16bd2 <rpc_message_data_free+0x13a>
   16bec:	8a9c      	ldrh	r4, [r3, #20]
   16bee:	4284      	cmp	r4, r0
   16bf0:	f47f af6b 	bne.w	16aca <rpc_message_data_free+0x32>
   16bf4:	2402      	movs	r4, #2
   16bf6:	e7ec      	b.n	16bd2 <rpc_message_data_free+0x13a>
   16bf8:	8b9c      	ldrh	r4, [r3, #28]
   16bfa:	4284      	cmp	r4, r0
   16bfc:	f47f af69 	bne.w	16ad2 <rpc_message_data_free+0x3a>
   16c00:	2403      	movs	r4, #3
   16c02:	e7e6      	b.n	16bd2 <rpc_message_data_free+0x13a>
   16c04:	8c9c      	ldrh	r4, [r3, #36]	; 0x24
   16c06:	4284      	cmp	r4, r0
   16c08:	f47f af67 	bne.w	16ada <rpc_message_data_free+0x42>
   16c0c:	2404      	movs	r4, #4
   16c0e:	e7e0      	b.n	16bd2 <rpc_message_data_free+0x13a>
   16c10:	8d9c      	ldrh	r4, [r3, #44]	; 0x2c
   16c12:	4284      	cmp	r4, r0
   16c14:	f47f af65 	bne.w	16ae2 <rpc_message_data_free+0x4a>
   16c18:	2405      	movs	r4, #5
   16c1a:	e7da      	b.n	16bd2 <rpc_message_data_free+0x13a>
   16c1c:	8e9c      	ldrh	r4, [r3, #52]	; 0x34
   16c1e:	4284      	cmp	r4, r0
   16c20:	f47f af63 	bne.w	16aea <rpc_message_data_free+0x52>
   16c24:	2406      	movs	r4, #6
   16c26:	e7d4      	b.n	16bd2 <rpc_message_data_free+0x13a>
   16c28:	8f9c      	ldrh	r4, [r3, #60]	; 0x3c
   16c2a:	4284      	cmp	r4, r0
   16c2c:	f47f af61 	bne.w	16af2 <rpc_message_data_free+0x5a>
   16c30:	2407      	movs	r4, #7
   16c32:	e7ce      	b.n	16bd2 <rpc_message_data_free+0x13a>
   16c34:	f8b3 4044 	ldrh.w	r4, [r3, #68]	; 0x44
   16c38:	4284      	cmp	r4, r0
   16c3a:	f47f af5e 	bne.w	16afa <rpc_message_data_free+0x62>
   16c3e:	2408      	movs	r4, #8
   16c40:	e7c7      	b.n	16bd2 <rpc_message_data_free+0x13a>
   16c42:	f8b3 404c 	ldrh.w	r4, [r3, #76]	; 0x4c
   16c46:	4284      	cmp	r4, r0
   16c48:	f47f af5b 	bne.w	16b02 <rpc_message_data_free+0x6a>
   16c4c:	2409      	movs	r4, #9
   16c4e:	e7c0      	b.n	16bd2 <rpc_message_data_free+0x13a>
   16c50:	f8b3 4054 	ldrh.w	r4, [r3, #84]	; 0x54
   16c54:	4284      	cmp	r4, r0
   16c56:	f47f af58 	bne.w	16b0a <rpc_message_data_free+0x72>
   16c5a:	240a      	movs	r4, #10
   16c5c:	e7b9      	b.n	16bd2 <rpc_message_data_free+0x13a>
   16c5e:	f8b3 405c 	ldrh.w	r4, [r3, #92]	; 0x5c
   16c62:	4284      	cmp	r4, r0
   16c64:	f47f af55 	bne.w	16b12 <rpc_message_data_free+0x7a>
   16c68:	240b      	movs	r4, #11
   16c6a:	e7b2      	b.n	16bd2 <rpc_message_data_free+0x13a>
   16c6c:	200e      	movs	r0, #14
   16c6e:	4770      	bx	lr
   16c70:	f8b3 4064 	ldrh.w	r4, [r3, #100]	; 0x64
   16c74:	4284      	cmp	r4, r0
   16c76:	f47f af50 	bne.w	16b1a <rpc_message_data_free+0x82>
   16c7a:	240c      	movs	r4, #12
   16c7c:	e7a9      	b.n	16bd2 <rpc_message_data_free+0x13a>
   16c7e:	f8b3 406c 	ldrh.w	r4, [r3, #108]	; 0x6c
   16c82:	4284      	cmp	r4, r0
   16c84:	f47f af4d 	bne.w	16b22 <rpc_message_data_free+0x8a>
   16c88:	240d      	movs	r4, #13
   16c8a:	e7a2      	b.n	16bd2 <rpc_message_data_free+0x13a>
   16c8c:	f8b3 4074 	ldrh.w	r4, [r3, #116]	; 0x74
   16c90:	4284      	cmp	r4, r0
   16c92:	f47f af4a 	bne.w	16b2a <rpc_message_data_free+0x92>
   16c96:	240e      	movs	r4, #14
   16c98:	e79b      	b.n	16bd2 <rpc_message_data_free+0x13a>
   16c9a:	f8b3 407c 	ldrh.w	r4, [r3, #124]	; 0x7c
   16c9e:	4284      	cmp	r4, r0
   16ca0:	bf08      	it	eq
   16ca2:	240f      	moveq	r4, #15
   16ca4:	f47f af45 	bne.w	16b32 <rpc_message_data_free+0x9a>
   16ca8:	e793      	b.n	16bd2 <rpc_message_data_free+0x13a>
   16caa:	bf00      	nop
   16cac:	200208b8 	.word	0x200208b8
   16cb0:	200208d0 	.word	0x200208d0
   16cb4:	20020950 	.word	0x20020950

00016cb8 <packet_free_cb>:
   16cb8:	b510      	push	{r4, lr}
   16cba:	4604      	mov	r4, r0
   16cbc:	b118      	cbz	r0, 16cc6 <packet_free_cb+0xe>
   16cbe:	6800      	ldr	r0, [r0, #0]
   16cc0:	b108      	cbz	r0, 16cc6 <packet_free_cb+0xe>
   16cc2:	f001 f82f 	bl	17d24 <rpc_gnss_client_data_free>
   16cc6:	68a0      	ldr	r0, [r4, #8]
   16cc8:	b118      	cbz	r0, 16cd2 <packet_free_cb+0x1a>
   16cca:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   16cce:	f7fa b917 	b.w	10f00 <nrf_free>
   16cd2:	bd10      	pop	{r4, pc}

00016cd4 <rpc_gnss_event_handler>:
   16cd4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   16cd8:	4b64      	ldr	r3, [pc, #400]	; (16e6c <rpc_gnss_event_handler+0x198>)
   16cda:	4606      	mov	r6, r0
   16cdc:	6800      	ldr	r0, [r0, #0]
   16cde:	881b      	ldrh	r3, [r3, #0]
   16ce0:	6802      	ldr	r2, [r0, #0]
   16ce2:	4f63      	ldr	r7, [pc, #396]	; (16e70 <rpc_gnss_event_handler+0x19c>)
   16ce4:	ebb3 4f12 	cmp.w	r3, r2, lsr #16
   16ce8:	b084      	sub	sp, #16
   16cea:	460d      	mov	r5, r1
   16cec:	6038      	str	r0, [r7, #0]
   16cee:	d038      	beq.n	16d62 <rpc_gnss_event_handler+0x8e>
   16cf0:	f505 433f 	add.w	r3, r5, #48896	; 0xbf00
   16cf4:	33ff      	adds	r3, #255	; 0xff
   16cf6:	b29b      	uxth	r3, r3
   16cf8:	2b02      	cmp	r3, #2
   16cfa:	d810      	bhi.n	16d1e <rpc_gnss_event_handler+0x4a>
   16cfc:	4c5d      	ldr	r4, [pc, #372]	; (16e74 <rpc_gnss_event_handler+0x1a0>)
   16cfe:	6823      	ldr	r3, [r4, #0]
   16d00:	075a      	lsls	r2, r3, #29
   16d02:	d410      	bmi.n	16d26 <rpc_gnss_event_handler+0x52>
   16d04:	6823      	ldr	r3, [r4, #0]
   16d06:	079b      	lsls	r3, r3, #30
   16d08:	d503      	bpl.n	16d12 <rpc_gnss_event_handler+0x3e>
   16d0a:	f244 0303 	movw	r3, #16387	; 0x4003
   16d0e:	429d      	cmp	r5, r3
   16d10:	d009      	beq.n	16d26 <rpc_gnss_event_handler+0x52>
   16d12:	6830      	ldr	r0, [r6, #0]
   16d14:	b118      	cbz	r0, 16d1e <rpc_gnss_event_handler+0x4a>
   16d16:	f001 f805 	bl	17d24 <rpc_gnss_client_data_free>
   16d1a:	2300      	movs	r3, #0
   16d1c:	603b      	str	r3, [r7, #0]
   16d1e:	2000      	movs	r0, #0
   16d20:	b004      	add	sp, #16
   16d22:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   16d26:	2002      	movs	r0, #2
   16d28:	f7fa f8e0 	bl	10eec <nrf_malloc>
   16d2c:	4680      	mov	r8, r0
   16d2e:	2800      	cmp	r0, #0
   16d30:	f000 8093 	beq.w	16e5a <rpc_gnss_event_handler+0x186>
   16d34:	2302      	movs	r3, #2
   16d36:	8005      	strh	r5, [r0, #0]
   16d38:	6831      	ldr	r1, [r6, #0]
   16d3a:	6872      	ldr	r2, [r6, #4]
   16d3c:	484e      	ldr	r0, [pc, #312]	; (16e78 <rpc_gnss_event_handler+0x1a4>)
   16d3e:	e88d 0106 	stmia.w	sp, {r1, r2, r8}
   16d42:	6800      	ldr	r0, [r0, #0]
   16d44:	9303      	str	r3, [sp, #12]
   16d46:	6803      	ldr	r3, [r0, #0]
   16d48:	4669      	mov	r1, sp
   16d4a:	685b      	ldr	r3, [r3, #4]
   16d4c:	4798      	blx	r3
   16d4e:	3001      	adds	r0, #1
   16d50:	d070      	beq.n	16e34 <rpc_gnss_event_handler+0x160>
   16d52:	2000      	movs	r0, #0
   16d54:	6823      	ldr	r3, [r4, #0]
   16d56:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   16d5a:	6023      	str	r3, [r4, #0]
   16d5c:	b004      	add	sp, #16
   16d5e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   16d62:	4c44      	ldr	r4, [pc, #272]	; (16e74 <rpc_gnss_event_handler+0x1a0>)
   16d64:	6823      	ldr	r3, [r4, #0]
   16d66:	01d9      	lsls	r1, r3, #7
   16d68:	d523      	bpl.n	16db2 <rpc_gnss_event_handler+0xde>
   16d6a:	f242 1302 	movw	r3, #8450	; 0x2102
   16d6e:	429d      	cmp	r5, r3
   16d70:	d11f      	bne.n	16db2 <rpc_gnss_event_handler+0xde>
   16d72:	6843      	ldr	r3, [r0, #4]
   16d74:	b91b      	cbnz	r3, 16d7e <rpc_gnss_event_handler+0xaa>
   16d76:	6823      	ldr	r3, [r4, #0]
   16d78:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
   16d7c:	6023      	str	r3, [r4, #0]
   16d7e:	6823      	ldr	r3, [r4, #0]
   16d80:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
   16d84:	6023      	str	r3, [r4, #0]
   16d86:	6823      	ldr	r3, [r4, #0]
   16d88:	025a      	lsls	r2, r3, #9
   16d8a:	d430      	bmi.n	16dee <rpc_gnss_event_handler+0x11a>
   16d8c:	f242 0305 	movw	r3, #8197	; 0x2005
   16d90:	429d      	cmp	r5, r3
   16d92:	d12c      	bne.n	16dee <rpc_gnss_event_handler+0x11a>
   16d94:	6823      	ldr	r3, [r4, #0]
   16d96:	0299      	lsls	r1, r3, #10
   16d98:	d529      	bpl.n	16dee <rpc_gnss_event_handler+0x11a>
   16d9a:	6843      	ldr	r3, [r0, #4]
   16d9c:	2b00      	cmp	r3, #0
   16d9e:	d157      	bne.n	16e50 <rpc_gnss_event_handler+0x17c>
   16da0:	6823      	ldr	r3, [r4, #0]
   16da2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
   16da6:	6023      	str	r3, [r4, #0]
   16da8:	6823      	ldr	r3, [r4, #0]
   16daa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   16dae:	6023      	str	r3, [r4, #0]
   16db0:	e01d      	b.n	16dee <rpc_gnss_event_handler+0x11a>
   16db2:	6823      	ldr	r3, [r4, #0]
   16db4:	025b      	lsls	r3, r3, #9
   16db6:	d50e      	bpl.n	16dd6 <rpc_gnss_event_handler+0x102>
   16db8:	f242 1303 	movw	r3, #8451	; 0x2103
   16dbc:	429d      	cmp	r5, r3
   16dbe:	d10a      	bne.n	16dd6 <rpc_gnss_event_handler+0x102>
   16dc0:	6843      	ldr	r3, [r0, #4]
   16dc2:	b91b      	cbnz	r3, 16dcc <rpc_gnss_event_handler+0xf8>
   16dc4:	6823      	ldr	r3, [r4, #0]
   16dc6:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
   16dca:	6023      	str	r3, [r4, #0]
   16dcc:	6823      	ldr	r3, [r4, #0]
   16dce:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
   16dd2:	6023      	str	r3, [r4, #0]
   16dd4:	e00b      	b.n	16dee <rpc_gnss_event_handler+0x11a>
   16dd6:	f242 0301 	movw	r3, #8193	; 0x2001
   16dda:	429d      	cmp	r5, r3
   16ddc:	d10c      	bne.n	16df8 <rpc_gnss_event_handler+0x124>
   16dde:	6843      	ldr	r3, [r0, #4]
   16de0:	b92b      	cbnz	r3, 16dee <rpc_gnss_event_handler+0x11a>
   16de2:	6823      	ldr	r3, [r4, #0]
   16de4:	0c1b      	lsrs	r3, r3, #16
   16de6:	041b      	lsls	r3, r3, #16
   16de8:	f043 0302 	orr.w	r3, r3, #2
   16dec:	6023      	str	r3, [r4, #0]
   16dee:	f000 ff99 	bl	17d24 <rpc_gnss_client_data_free>
   16df2:	2300      	movs	r3, #0
   16df4:	603b      	str	r3, [r7, #0]
   16df6:	e77b      	b.n	16cf0 <rpc_gnss_event_handler+0x1c>
   16df8:	f242 0304 	movw	r3, #8196	; 0x2004
   16dfc:	429d      	cmp	r5, r3
   16dfe:	d1c5      	bne.n	16d8c <rpc_gnss_event_handler+0xb8>
   16e00:	6843      	ldr	r3, [r0, #4]
   16e02:	b993      	cbnz	r3, 16e2a <rpc_gnss_event_handler+0x156>
   16e04:	6823      	ldr	r3, [r4, #0]
   16e06:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
   16e0a:	6023      	str	r3, [r4, #0]
   16e0c:	6823      	ldr	r3, [r4, #0]
   16e0e:	b29b      	uxth	r3, r3
   16e10:	2b03      	cmp	r3, #3
   16e12:	6823      	ldr	r3, [r4, #0]
   16e14:	d016      	beq.n	16e44 <rpc_gnss_event_handler+0x170>
   16e16:	b29b      	uxth	r3, r3
   16e18:	2b04      	cmp	r3, #4
   16e1a:	d1d7      	bne.n	16dcc <rpc_gnss_event_handler+0xf8>
   16e1c:	6823      	ldr	r3, [r4, #0]
   16e1e:	0c1b      	lsrs	r3, r3, #16
   16e20:	041b      	lsls	r3, r3, #16
   16e22:	f043 0302 	orr.w	r3, r3, #2
   16e26:	6023      	str	r3, [r4, #0]
   16e28:	e7d0      	b.n	16dcc <rpc_gnss_event_handler+0xf8>
   16e2a:	6823      	ldr	r3, [r4, #0]
   16e2c:	b29b      	uxth	r3, r3
   16e2e:	2b03      	cmp	r3, #3
   16e30:	d1cc      	bne.n	16dcc <rpc_gnss_event_handler+0xf8>
   16e32:	e7f3      	b.n	16e1c <rpc_gnss_event_handler+0x148>
   16e34:	4640      	mov	r0, r8
   16e36:	f7fa f863 	bl	10f00 <nrf_free>
   16e3a:	6830      	ldr	r0, [r6, #0]
   16e3c:	2800      	cmp	r0, #0
   16e3e:	f47f af6a 	bne.w	16d16 <rpc_gnss_event_handler+0x42>
   16e42:	e76c      	b.n	16d1e <rpc_gnss_event_handler+0x4a>
   16e44:	0c1b      	lsrs	r3, r3, #16
   16e46:	041b      	lsls	r3, r3, #16
   16e48:	f043 0304 	orr.w	r3, r3, #4
   16e4c:	6023      	str	r3, [r4, #0]
   16e4e:	e7bd      	b.n	16dcc <rpc_gnss_event_handler+0xf8>
   16e50:	6823      	ldr	r3, [r4, #0]
   16e52:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
   16e56:	6023      	str	r3, [r4, #0]
   16e58:	e7c9      	b.n	16dee <rpc_gnss_event_handler+0x11a>
   16e5a:	6830      	ldr	r0, [r6, #0]
   16e5c:	2800      	cmp	r0, #0
   16e5e:	f43f af5e 	beq.w	16d1e <rpc_gnss_event_handler+0x4a>
   16e62:	f000 ff5f 	bl	17d24 <rpc_gnss_client_data_free>
   16e66:	f8c7 8000 	str.w	r8, [r7]
   16e6a:	e758      	b.n	16d1e <rpc_gnss_event_handler+0x4a>
   16e6c:	20024cd0 	.word	0x20024cd0
   16e70:	200209d4 	.word	0x200209d4
   16e74:	200209d0 	.word	0x200209d0
   16e78:	200209d8 	.word	0x200209d8

00016e7c <gnss_interface_write>:
   16e7c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   16e80:	4a74      	ldr	r2, [pc, #464]	; (17054 <gnss_interface_write+0x1d8>)
   16e82:	b09f      	sub	sp, #124	; 0x7c
   16e84:	4290      	cmp	r0, r2
   16e86:	9d26      	ldr	r5, [sp, #152]	; 0x98
   16e88:	f040 80d7 	bne.w	1703a <gnss_interface_write+0x1be>
   16e8c:	2900      	cmp	r1, #0
   16e8e:	f000 80c6 	beq.w	1701e <gnss_interface_write+0x1a2>
   16e92:	2d00      	cmp	r5, #0
   16e94:	f000 80c3 	beq.w	1701e <gnss_interface_write+0x1a2>
   16e98:	9a27      	ldr	r2, [sp, #156]	; 0x9c
   16e9a:	2a02      	cmp	r2, #2
   16e9c:	f040 80bf 	bne.w	1701e <gnss_interface_write+0x1a2>
   16ea0:	4c6d      	ldr	r4, [pc, #436]	; (17058 <gnss_interface_write+0x1dc>)
   16ea2:	6822      	ldr	r2, [r4, #0]
   16ea4:	b292      	uxth	r2, r2
   16ea6:	2a02      	cmp	r2, #2
   16ea8:	d004      	beq.n	16eb4 <gnss_interface_write+0x38>
   16eaa:	6822      	ldr	r2, [r4, #0]
   16eac:	b292      	uxth	r2, r2
   16eae:	2a04      	cmp	r2, #4
   16eb0:	f040 80bd 	bne.w	1702e <gnss_interface_write+0x1b2>
   16eb4:	2b00      	cmp	r3, #0
   16eb6:	f040 80c6 	bne.w	17046 <gnss_interface_write+0x1ca>
   16eba:	6822      	ldr	r2, [r4, #0]
   16ebc:	0390      	lsls	r0, r2, #14
   16ebe:	d512      	bpl.n	16ee6 <gnss_interface_write+0x6a>
   16ec0:	6822      	ldr	r2, [r4, #0]
   16ec2:	882b      	ldrh	r3, [r5, #0]
   16ec4:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
   16ec8:	6022      	str	r2, [r4, #0]
   16eca:	6822      	ldr	r2, [r4, #0]
   16ecc:	3b01      	subs	r3, #1
   16ece:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
   16ed2:	6022      	str	r2, [r4, #0]
   16ed4:	2b07      	cmp	r3, #7
   16ed6:	f200 80a2 	bhi.w	1701e <gnss_interface_write+0x1a2>
   16eda:	e8df f003 	tbb	[pc, r3]
   16ede:	7d82      	.short	0x7d82
   16ee0:	646e7378 	.word	0x646e7378
   16ee4:	0869      	.short	0x0869
   16ee6:	2000      	movs	r0, #0
   16ee8:	b01f      	add	sp, #124	; 0x7c
   16eea:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   16eee:	4608      	mov	r0, r1
   16ef0:	a902      	add	r1, sp, #8
   16ef2:	f000 fecb 	bl	17c8c <rpc_gnss_serialize_integrity>
   16ef6:	2172      	movs	r1, #114	; 0x72
   16ef8:	4668      	mov	r0, sp
   16efa:	f000 fee1 	bl	17cc0 <rpc_gnss_client_request_alloc>
   16efe:	4605      	mov	r5, r0
   16f00:	9800      	ldr	r0, [sp, #0]
   16f02:	2d00      	cmp	r5, #0
   16f04:	d172      	bne.n	16fec <gnss_interface_write+0x170>
   16f06:	2800      	cmp	r0, #0
   16f08:	d077      	beq.n	16ffa <gnss_interface_write+0x17e>
   16f0a:	f241 0605 	movw	r6, #4101	; 0x1005
   16f0e:	f04f 0c49 	mov.w	ip, #73	; 0x49
   16f12:	2272      	movs	r2, #114	; 0x72
   16f14:	f04f 0e76 	mov.w	lr, #118	; 0x76
   16f18:	f04f 0943 	mov.w	r9, #67	; 0x43
   16f1c:	f04f 0854 	mov.w	r8, #84	; 0x54
   16f20:	4f4e      	ldr	r7, [pc, #312]	; (1705c <gnss_interface_write+0x1e0>)
   16f22:	a91e      	add	r1, sp, #120	; 0x78
   16f24:	883b      	ldrh	r3, [r7, #0]
   16f26:	f880 c00f 	strb.w	ip, [r0, #15]
   16f2a:	3301      	adds	r3, #1
   16f2c:	b29b      	uxth	r3, r3
   16f2e:	ea46 4c03 	orr.w	ip, r6, r3, lsl #16
   16f32:	f841 cd74 	str.w	ip, [r1, #-116]!
   16f36:	7145      	strb	r5, [r0, #5]
   16f38:	7185      	strb	r5, [r0, #6]
   16f3a:	71c5      	strb	r5, [r0, #7]
   16f3c:	7205      	strb	r5, [r0, #8]
   16f3e:	7245      	strb	r5, [r0, #9]
   16f40:	7285      	strb	r5, [r0, #10]
   16f42:	72c5      	strb	r5, [r0, #11]
   16f44:	7102      	strb	r2, [r0, #4]
   16f46:	f880 900c 	strb.w	r9, [r0, #12]
   16f4a:	f880 800d 	strb.w	r8, [r0, #13]
   16f4e:	f880 e00e 	strb.w	lr, [r0, #14]
   16f52:	6800      	ldr	r0, [r0, #0]
   16f54:	803b      	strh	r3, [r7, #0]
   16f56:	f003 fc66 	bl	1a826 <memcpy>
   16f5a:	4b41      	ldr	r3, [pc, #260]	; (17060 <gnss_interface_write+0x1e4>)
   16f5c:	4631      	mov	r1, r6
   16f5e:	9800      	ldr	r0, [sp, #0]
   16f60:	601d      	str	r5, [r3, #0]
   16f62:	f000 fec1 	bl	17ce8 <rpc_gnss_client_request_send>
   16f66:	2800      	cmp	r0, #0
   16f68:	d14e      	bne.n	17008 <gnss_interface_write+0x18c>
   16f6a:	6823      	ldr	r3, [r4, #0]
   16f6c:	0299      	lsls	r1, r3, #10
   16f6e:	d50b      	bpl.n	16f88 <gnss_interface_write+0x10c>
   16f70:	4e3c      	ldr	r6, [pc, #240]	; (17064 <gnss_interface_write+0x1e8>)
   16f72:	4d38      	ldr	r5, [pc, #224]	; (17054 <gnss_interface_write+0x1d8>)
   16f74:	e000      	b.n	16f78 <gnss_interface_write+0xfc>
   16f76:	b978      	cbnz	r0, 16f98 <gnss_interface_write+0x11c>
   16f78:	4631      	mov	r1, r6
   16f7a:	4628      	mov	r0, r5
   16f7c:	f7f8 fb9e 	bl	f6bc <bsd_os_timedwait>
   16f80:	6823      	ldr	r3, [r4, #0]
   16f82:	029a      	lsls	r2, r3, #10
   16f84:	d4f7      	bmi.n	16f76 <gnss_interface_write+0xfa>
   16f86:	b938      	cbnz	r0, 16f98 <gnss_interface_write+0x11c>
   16f88:	6823      	ldr	r3, [r4, #0]
   16f8a:	039b      	lsls	r3, r3, #14
   16f8c:	d4ab      	bmi.n	16ee6 <gnss_interface_write+0x6a>
   16f8e:	2005      	movs	r0, #5
   16f90:	6823      	ldr	r3, [r4, #0]
   16f92:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   16f96:	6023      	str	r3, [r4, #0]
   16f98:	f7f8 fc24 	bl	f7e4 <bsd_os_errno_set>
   16f9c:	f04f 30ff 	mov.w	r0, #4294967295
   16fa0:	b01f      	add	sp, #124	; 0x7c
   16fa2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   16fa6:	4608      	mov	r0, r1
   16fa8:	a902      	add	r1, sp, #8
   16faa:	f000 fe27 	bl	17bfc <rpc_gnss_serialize_time_and_sv_tow>
   16fae:	e7a2      	b.n	16ef6 <gnss_interface_write+0x7a>
   16fb0:	4608      	mov	r0, r1
   16fb2:	a902      	add	r1, sp, #8
   16fb4:	f000 fe4a 	bl	17c4c <rpc_gnss_serialize_location>
   16fb8:	e79d      	b.n	16ef6 <gnss_interface_write+0x7a>
   16fba:	4608      	mov	r0, r1
   16fbc:	a902      	add	r1, sp, #8
   16fbe:	f000 fe03 	bl	17bc8 <rpc_gnss_serialize_nequick>
   16fc2:	e798      	b.n	16ef6 <gnss_interface_write+0x7a>
   16fc4:	4608      	mov	r0, r1
   16fc6:	a902      	add	r1, sp, #8
   16fc8:	f000 fdda 	bl	17b80 <rpc_gnss_serialize_klob>
   16fcc:	e793      	b.n	16ef6 <gnss_interface_write+0x7a>
   16fce:	4608      	mov	r0, r1
   16fd0:	a902      	add	r1, sp, #8
   16fd2:	f000 fda3 	bl	17b1c <rpc_gnss_serialize_alm>
   16fd6:	e78e      	b.n	16ef6 <gnss_interface_write+0x7a>
   16fd8:	4608      	mov	r0, r1
   16fda:	a902      	add	r1, sp, #8
   16fdc:	f000 fd4c 	bl	17a78 <rpc_gnss_serialize_ephe>
   16fe0:	e789      	b.n	16ef6 <gnss_interface_write+0x7a>
   16fe2:	4608      	mov	r0, r1
   16fe4:	a902      	add	r1, sp, #8
   16fe6:	f000 fd25 	bl	17a34 <rpc_gnss_serialize_utc>
   16fea:	e784      	b.n	16ef6 <gnss_interface_write+0x7a>
   16fec:	b128      	cbz	r0, 16ffa <gnss_interface_write+0x17e>
   16fee:	6803      	ldr	r3, [r0, #0]
   16ff0:	b11b      	cbz	r3, 16ffa <gnss_interface_write+0x17e>
   16ff2:	4618      	mov	r0, r3
   16ff4:	f000 fe96 	bl	17d24 <rpc_gnss_client_data_free>
   16ff8:	9800      	ldr	r0, [sp, #0]
   16ffa:	f000 fe8b 	bl	17d14 <rpc_gnss_client_message_free>
   16ffe:	2023      	movs	r0, #35	; 0x23
   17000:	f7f8 fbf0 	bl	f7e4 <bsd_os_errno_set>
   17004:	f04f 30ff 	mov.w	r0, #4294967295
   17008:	6823      	ldr	r3, [r4, #0]
   1700a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
   1700e:	6023      	str	r3, [r4, #0]
   17010:	6823      	ldr	r3, [r4, #0]
   17012:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   17016:	6023      	str	r3, [r4, #0]
   17018:	b01f      	add	sp, #124	; 0x7c
   1701a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   1701e:	2016      	movs	r0, #22
   17020:	f7f8 fbe0 	bl	f7e4 <bsd_os_errno_set>
   17024:	f04f 30ff 	mov.w	r0, #4294967295
   17028:	b01f      	add	sp, #124	; 0x7c
   1702a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   1702e:	2039      	movs	r0, #57	; 0x39
   17030:	f7f8 fbd8 	bl	f7e4 <bsd_os_errno_set>
   17034:	f04f 30ff 	mov.w	r0, #4294967295
   17038:	e756      	b.n	16ee8 <gnss_interface_write+0x6c>
   1703a:	2009      	movs	r0, #9
   1703c:	f7f8 fbd2 	bl	f7e4 <bsd_os_errno_set>
   17040:	f04f 30ff 	mov.w	r0, #4294967295
   17044:	e750      	b.n	16ee8 <gnss_interface_write+0x6c>
   17046:	202d      	movs	r0, #45	; 0x2d
   17048:	f7f8 fbcc 	bl	f7e4 <bsd_os_errno_set>
   1704c:	f04f 30ff 	mov.w	r0, #4294967295
   17050:	e74a      	b.n	16ee8 <gnss_interface_write+0x6c>
   17052:	bf00      	nop
   17054:	49765443 	.word	0x49765443
   17058:	200209d0 	.word	0x200209d0
   1705c:	20024cd0 	.word	0x20024cd0
   17060:	200209d4 	.word	0x200209d4
   17064:	20027fa8 	.word	0x20027fa8

00017068 <gnss_interface_read>:
   17068:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1706c:	4c50      	ldr	r4, [pc, #320]	; (171b0 <gnss_interface_read+0x148>)
   1706e:	b0b7      	sub	sp, #220	; 0xdc
   17070:	42a0      	cmp	r0, r4
   17072:	f040 81fe 	bne.w	17472 <gnss_interface_read+0x40a>
   17076:	4688      	mov	r8, r1
   17078:	2900      	cmp	r1, #0
   1707a:	f000 81f4 	beq.w	17466 <gnss_interface_read+0x3fe>
   1707e:	2ad7      	cmp	r2, #215	; 0xd7
   17080:	f240 81f1 	bls.w	17466 <gnss_interface_read+0x3fe>
   17084:	4d4b      	ldr	r5, [pc, #300]	; (171b4 <gnss_interface_read+0x14c>)
   17086:	4699      	mov	r9, r3
   17088:	682b      	ldr	r3, [r5, #0]
   1708a:	b29b      	uxth	r3, r3
   1708c:	2b04      	cmp	r3, #4
   1708e:	d004      	beq.n	1709a <gnss_interface_read+0x32>
   17090:	682b      	ldr	r3, [r5, #0]
   17092:	b29b      	uxth	r3, r3
   17094:	2b02      	cmp	r3, #2
   17096:	f040 81e0 	bne.w	1745a <gnss_interface_read+0x3f2>
   1709a:	f1b9 0f00 	cmp.w	r9, #0
   1709e:	d158      	bne.n	17152 <gnss_interface_read+0xea>
   170a0:	2102      	movs	r1, #2
   170a2:	20b6      	movs	r0, #182	; 0xb6
   170a4:	2400      	movs	r4, #0
   170a6:	682b      	ldr	r3, [r5, #0]
   170a8:	f10d 020e 	add.w	r2, sp, #14
   170ac:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
   170b0:	602b      	str	r3, [r5, #0]
   170b2:	f8df a108 	ldr.w	sl, [pc, #264]	; 171bc <gnss_interface_read+0x154>
   170b6:	ab08      	add	r3, sp, #32
   170b8:	4f3f      	ldr	r7, [pc, #252]	; (171b8 <gnss_interface_read+0x150>)
   170ba:	4e3d      	ldr	r6, [pc, #244]	; (171b0 <gnss_interface_read+0x148>)
   170bc:	9005      	str	r0, [sp, #20]
   170be:	9107      	str	r1, [sp, #28]
   170c0:	9304      	str	r3, [sp, #16]
   170c2:	9206      	str	r2, [sp, #24]
   170c4:	ea09 0b01 	and.w	fp, r9, r1
   170c8:	f8da 0000 	ldr.w	r0, [sl]
   170cc:	464a      	mov	r2, r9
   170ce:	6803      	ldr	r3, [r0, #0]
   170d0:	a904      	add	r1, sp, #16
   170d2:	689b      	ldr	r3, [r3, #8]
   170d4:	4798      	blx	r3
   170d6:	2800      	cmp	r0, #0
   170d8:	da11      	bge.n	170fe <gnss_interface_read+0x96>
   170da:	f1bb 0f00 	cmp.w	fp, #0
   170de:	d141      	bne.n	17164 <gnss_interface_read+0xfc>
   170e0:	682b      	ldr	r3, [r5, #0]
   170e2:	03d8      	lsls	r0, r3, #15
   170e4:	d4f0      	bmi.n	170c8 <gnss_interface_read+0x60>
   170e6:	b10c      	cbz	r4, 170ec <gnss_interface_read+0x84>
   170e8:	e7ee      	b.n	170c8 <gnss_interface_read+0x60>
   170ea:	b930      	cbnz	r0, 170fa <gnss_interface_read+0x92>
   170ec:	4639      	mov	r1, r7
   170ee:	4630      	mov	r0, r6
   170f0:	f7f8 fae4 	bl	f6bc <bsd_os_timedwait>
   170f4:	682b      	ldr	r3, [r5, #0]
   170f6:	03d9      	lsls	r1, r3, #15
   170f8:	d5f7      	bpl.n	170ea <gnss_interface_read+0x82>
   170fa:	4604      	mov	r4, r0
   170fc:	e7e4      	b.n	170c8 <gnss_interface_read+0x60>
   170fe:	f244 0202 	movw	r2, #16386	; 0x4002
   17102:	f8bd 300e 	ldrh.w	r3, [sp, #14]
   17106:	4293      	cmp	r3, r2
   17108:	d042      	beq.n	17190 <gnss_interface_read+0x128>
   1710a:	f244 0201 	movw	r2, #16385	; 0x4001
   1710e:	4293      	cmp	r3, r2
   17110:	d056      	beq.n	171c0 <gnss_interface_read+0x158>
   17112:	f244 0203 	movw	r2, #16387	; 0x4003
   17116:	4293      	cmp	r3, r2
   17118:	f040 81a5 	bne.w	17466 <gnss_interface_read+0x3fe>
   1711c:	2203      	movs	r2, #3
   1711e:	2414      	movs	r4, #20
   17120:	9b08      	ldr	r3, [sp, #32]
   17122:	f888 2000 	strb.w	r2, [r8]
   17126:	9a09      	ldr	r2, [sp, #36]	; 0x24
   17128:	f8c8 3008 	str.w	r3, [r8, #8]
   1712c:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
   17130:	e9c8 2303 	strd	r2, r3, [r8, #12]
   17134:	f8da 0000 	ldr.w	r0, [sl]
   17138:	6803      	ldr	r3, [r0, #0]
   1713a:	68db      	ldr	r3, [r3, #12]
   1713c:	4798      	blx	r3
   1713e:	2800      	cmp	r0, #0
   17140:	dd03      	ble.n	1714a <gnss_interface_read+0xe2>
   17142:	682b      	ldr	r3, [r5, #0]
   17144:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   17148:	602b      	str	r3, [r5, #0]
   1714a:	4620      	mov	r0, r4
   1714c:	b037      	add	sp, #220	; 0xdc
   1714e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17152:	f019 0f0a 	tst.w	r9, #10
   17156:	d1a3      	bne.n	170a0 <gnss_interface_read+0x38>
   17158:	202d      	movs	r0, #45	; 0x2d
   1715a:	f7f8 fb43 	bl	f7e4 <bsd_os_errno_set>
   1715e:	f04f 34ff 	mov.w	r4, #4294967295
   17162:	e7f2      	b.n	1714a <gnss_interface_read+0xe2>
   17164:	1c42      	adds	r2, r0, #1
   17166:	4603      	mov	r3, r0
   17168:	d1c9      	bne.n	170fe <gnss_interface_read+0x96>
   1716a:	b93c      	cbnz	r4, 1717c <gnss_interface_read+0x114>
   1716c:	461c      	mov	r4, r3
   1716e:	2023      	movs	r0, #35	; 0x23
   17170:	f7f8 fb38 	bl	f7e4 <bsd_os_errno_set>
   17174:	4620      	mov	r0, r4
   17176:	b037      	add	sp, #220	; 0xdc
   17178:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1717c:	9001      	str	r0, [sp, #4]
   1717e:	4620      	mov	r0, r4
   17180:	f7f8 fb30 	bl	f7e4 <bsd_os_errno_set>
   17184:	9b01      	ldr	r3, [sp, #4]
   17186:	461c      	mov	r4, r3
   17188:	4620      	mov	r0, r4
   1718a:	b037      	add	sp, #220	; 0xdc
   1718c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17190:	a808      	add	r0, sp, #32
   17192:	f003 fb16 	bl	1a7c2 <strlen>
   17196:	2302      	movs	r3, #2
   17198:	1c44      	adds	r4, r0, #1
   1719a:	b2a4      	uxth	r4, r4
   1719c:	f808 3b08 	strb.w	r3, [r8], #8
   171a0:	4622      	mov	r2, r4
   171a2:	a908      	add	r1, sp, #32
   171a4:	4640      	mov	r0, r8
   171a6:	f003 fb3e 	bl	1a826 <memcpy>
   171aa:	3408      	adds	r4, #8
   171ac:	e7c2      	b.n	17134 <gnss_interface_read+0xcc>
   171ae:	bf00      	nop
   171b0:	49765443 	.word	0x49765443
   171b4:	200209d0 	.word	0x200209d0
   171b8:	20027fa8 	.word	0x20027fa8
   171bc:	200209d8 	.word	0x200209d8
   171c0:	2401      	movs	r4, #1
   171c2:	a809      	add	r0, sp, #36	; 0x24
   171c4:	c80f      	ldmia	r0, {r0, r1, r2, r3}
   171c6:	e9c8 0102 	strd	r0, r1, [r8, #8]
   171ca:	e9c8 2304 	strd	r2, r3, [r8, #16]
   171ce:	990d      	ldr	r1, [sp, #52]	; 0x34
   171d0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   171d2:	f888 4000 	strb.w	r4, [r8]
   171d6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   171d8:	f8c8 1018 	str.w	r1, [r8, #24]
   171dc:	9910      	ldr	r1, [sp, #64]	; 0x40
   171de:	f8c8 201c 	str.w	r2, [r8, #28]
   171e2:	f8c8 3020 	str.w	r3, [r8, #32]
   171e6:	f89d 205d 	ldrb.w	r2, [sp, #93]	; 0x5d
   171ea:	f8dd 304d 	ldr.w	r3, [sp, #77]	; 0x4d
   171ee:	f8c8 1024 	str.w	r1, [r8, #36]	; 0x24
   171f2:	f8dd 1051 	ldr.w	r1, [sp, #81]	; 0x51
   171f6:	f888 2044 	strb.w	r2, [r8, #68]	; 0x44
   171fa:	f8dd 2055 	ldr.w	r2, [sp, #85]	; 0x55
   171fe:	f8c8 3034 	str.w	r3, [r8, #52]	; 0x34
   17202:	f8dd 3059 	ldr.w	r3, [sp, #89]	; 0x59
   17206:	f8c8 1038 	str.w	r1, [r8, #56]	; 0x38
   1720a:	f8bd 1044 	ldrh.w	r1, [sp, #68]	; 0x44
   1720e:	f8c8 203c 	str.w	r2, [r8, #60]	; 0x3c
   17212:	f8c8 3040 	str.w	r3, [r8, #64]	; 0x40
   17216:	f8dd 2046 	ldr.w	r2, [sp, #70]	; 0x46
   1721a:	f89d 304a 	ldrb.w	r3, [sp, #74]	; 0x4a
   1721e:	f8a8 1028 	strh.w	r1, [r8, #40]	; 0x28
   17222:	f888 302e 	strb.w	r3, [r8, #46]	; 0x2e
   17226:	f8c8 202a 	str.w	r2, [r8, #42]	; 0x2a
   1722a:	f89d 004b 	ldrb.w	r0, [sp, #75]	; 0x4b
   1722e:	f89d 204c 	ldrb.w	r2, [sp, #76]	; 0x4c
   17232:	9b18      	ldr	r3, [sp, #96]	; 0x60
   17234:	f89d 406c 	ldrb.w	r4, [sp, #108]	; 0x6c
   17238:	ea40 2002 	orr.w	r0, r0, r2, lsl #8
   1723c:	f89d 206b 	ldrb.w	r2, [sp, #107]	; 0x6b
   17240:	f3c3 210f 	ubfx	r1, r3, #8, #16
   17244:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   17246:	ea42 2204 	orr.w	r2, r2, r4, lsl #8
   1724a:	f8a8 0030 	strh.w	r0, [r8, #48]	; 0x30
   1724e:	f8a8 104a 	strh.w	r1, [r8, #74]	; 0x4a
   17252:	f8bd 105e 	ldrh.w	r1, [sp, #94]	; 0x5e
   17256:	f3c3 230f 	ubfx	r3, r3, #8, #16
   1725a:	f8a8 2056 	strh.w	r2, [r8, #86]	; 0x56
   1725e:	f89d 2060 	ldrb.w	r2, [sp, #96]	; 0x60
   17262:	f8a8 3062 	strh.w	r3, [r8, #98]	; 0x62
   17266:	f8dd 3063 	ldr.w	r3, [sp, #99]	; 0x63
   1726a:	f8a8 1046 	strh.w	r1, [r8, #70]	; 0x46
   1726e:	f888 2048 	strb.w	r2, [r8, #72]	; 0x48
   17272:	f8bd 2068 	ldrh.w	r2, [sp, #104]	; 0x68
   17276:	f89d 1067 	ldrb.w	r1, [sp, #103]	; 0x67
   1727a:	f8c8 304c 	str.w	r3, [r8, #76]	; 0x4c
   1727e:	f89d 306a 	ldrb.w	r3, [sp, #106]	; 0x6a
   17282:	f888 1050 	strb.w	r1, [r8, #80]	; 0x50
   17286:	f8a8 2052 	strh.w	r2, [r8, #82]	; 0x52
   1728a:	f888 3054 	strb.w	r3, [r8, #84]	; 0x54
   1728e:	f8bd 3072 	ldrh.w	r3, [sp, #114]	; 0x72
   17292:	f8dd 106d 	ldr.w	r1, [sp, #109]	; 0x6d
   17296:	f89d 2071 	ldrb.w	r2, [sp, #113]	; 0x71
   1729a:	f8c8 1058 	str.w	r1, [r8, #88]	; 0x58
   1729e:	f888 205c 	strb.w	r2, [r8, #92]	; 0x5c
   172a2:	f89d 1074 	ldrb.w	r1, [sp, #116]	; 0x74
   172a6:	f8dd 2077 	ldr.w	r2, [sp, #119]	; 0x77
   172aa:	f8a8 305e 	strh.w	r3, [r8, #94]	; 0x5e
   172ae:	f89d 307b 	ldrb.w	r3, [sp, #123]	; 0x7b
   172b2:	f888 1060 	strb.w	r1, [r8, #96]	; 0x60
   172b6:	f8c8 2064 	str.w	r2, [r8, #100]	; 0x64
   172ba:	f888 3068 	strb.w	r3, [r8, #104]	; 0x68
   172be:	f89d 3080 	ldrb.w	r3, [sp, #128]	; 0x80
   172c2:	f89d 107f 	ldrb.w	r1, [sp, #127]	; 0x7f
   172c6:	9a22      	ldr	r2, [sp, #136]	; 0x88
   172c8:	f89d 0094 	ldrb.w	r0, [sp, #148]	; 0x94
   172cc:	ea41 2103 	orr.w	r1, r1, r3, lsl #8
   172d0:	f89d 3093 	ldrb.w	r3, [sp, #147]	; 0x93
   172d4:	f3c2 220f 	ubfx	r2, r2, #8, #16
   172d8:	f8a8 106e 	strh.w	r1, [r8, #110]	; 0x6e
   172dc:	f8bd 107c 	ldrh.w	r1, [sp, #124]	; 0x7c
   172e0:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
   172e4:	f8a8 207a 	strh.w	r2, [r8, #122]	; 0x7a
   172e8:	f89d 207e 	ldrb.w	r2, [sp, #126]	; 0x7e
   172ec:	f8a8 3086 	strh.w	r3, [r8, #134]	; 0x86
   172f0:	f8dd 3081 	ldr.w	r3, [sp, #129]	; 0x81
   172f4:	f8a8 106a 	strh.w	r1, [r8, #106]	; 0x6a
   172f8:	f888 206c 	strb.w	r2, [r8, #108]	; 0x6c
   172fc:	f8bd 2086 	ldrh.w	r2, [sp, #134]	; 0x86
   17300:	f89d 1085 	ldrb.w	r1, [sp, #133]	; 0x85
   17304:	f8c8 3070 	str.w	r3, [r8, #112]	; 0x70
   17308:	f89d 3088 	ldrb.w	r3, [sp, #136]	; 0x88
   1730c:	f888 1074 	strb.w	r1, [r8, #116]	; 0x74
   17310:	f8a8 2076 	strh.w	r2, [r8, #118]	; 0x76
   17314:	f888 3078 	strb.w	r3, [r8, #120]	; 0x78
   17318:	f8bd 3090 	ldrh.w	r3, [sp, #144]	; 0x90
   1731c:	f8dd 108b 	ldr.w	r1, [sp, #139]	; 0x8b
   17320:	f89d 208f 	ldrb.w	r2, [sp, #143]	; 0x8f
   17324:	f8c8 107c 	str.w	r1, [r8, #124]	; 0x7c
   17328:	f888 2080 	strb.w	r2, [r8, #128]	; 0x80
   1732c:	f89d 1092 	ldrb.w	r1, [sp, #146]	; 0x92
   17330:	f8dd 2095 	ldr.w	r2, [sp, #149]	; 0x95
   17334:	f8a8 3082 	strh.w	r3, [r8, #130]	; 0x82
   17338:	f89d 3099 	ldrb.w	r3, [sp, #153]	; 0x99
   1733c:	f888 1084 	strb.w	r1, [r8, #132]	; 0x84
   17340:	f8c8 2088 	str.w	r2, [r8, #136]	; 0x88
   17344:	f888 308c 	strb.w	r3, [r8, #140]	; 0x8c
   17348:	f8bd 009a 	ldrh.w	r0, [sp, #154]	; 0x9a
   1734c:	9b27      	ldr	r3, [sp, #156]	; 0x9c
   1734e:	f89d 40a8 	ldrb.w	r4, [sp, #168]	; 0xa8
   17352:	f89d 20a7 	ldrb.w	r2, [sp, #167]	; 0xa7
   17356:	f3c3 210f 	ubfx	r1, r3, #8, #16
   1735a:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
   1735c:	ea42 2204 	orr.w	r2, r2, r4, lsl #8
   17360:	f8a8 1092 	strh.w	r1, [r8, #146]	; 0x92
   17364:	f89d 109c 	ldrb.w	r1, [sp, #156]	; 0x9c
   17368:	f8a8 209e 	strh.w	r2, [r8, #158]	; 0x9e
   1736c:	f3c3 230f 	ubfx	r3, r3, #8, #16
   17370:	f8dd 209f 	ldr.w	r2, [sp, #159]	; 0x9f
   17374:	f8a8 008e 	strh.w	r0, [r8, #142]	; 0x8e
   17378:	f8a8 30aa 	strh.w	r3, [r8, #170]	; 0xaa
   1737c:	f888 1090 	strb.w	r1, [r8, #144]	; 0x90
   17380:	f89d 30a3 	ldrb.w	r3, [sp, #163]	; 0xa3
   17384:	f8bd 10a4 	ldrh.w	r1, [sp, #164]	; 0xa4
   17388:	f8c8 2094 	str.w	r2, [r8, #148]	; 0x94
   1738c:	f89d 20a6 	ldrb.w	r2, [sp, #166]	; 0xa6
   17390:	f888 3098 	strb.w	r3, [r8, #152]	; 0x98
   17394:	f8dd 30a9 	ldr.w	r3, [sp, #169]	; 0xa9
   17398:	f8a8 109a 	strh.w	r1, [r8, #154]	; 0x9a
   1739c:	f888 209c 	strb.w	r2, [r8, #156]	; 0x9c
   173a0:	f8bd 20ae 	ldrh.w	r2, [sp, #174]	; 0xae
   173a4:	f89d 10ad 	ldrb.w	r1, [sp, #173]	; 0xad
   173a8:	f8c8 30a0 	str.w	r3, [r8, #160]	; 0xa0
   173ac:	f89d 30b0 	ldrb.w	r3, [sp, #176]	; 0xb0
   173b0:	f888 10a4 	strb.w	r1, [r8, #164]	; 0xa4
   173b4:	f8a8 20a6 	strh.w	r2, [r8, #166]	; 0xa6
   173b8:	f888 30a8 	strb.w	r3, [r8, #168]	; 0xa8
   173bc:	f8bd 30b8 	ldrh.w	r3, [sp, #184]	; 0xb8
   173c0:	f8dd 10b3 	ldr.w	r1, [sp, #179]	; 0xb3
   173c4:	f89d 20b7 	ldrb.w	r2, [sp, #183]	; 0xb7
   173c8:	f8c8 10ac 	str.w	r1, [r8, #172]	; 0xac
   173cc:	f888 20b0 	strb.w	r2, [r8, #176]	; 0xb0
   173d0:	f8a8 30b2 	strh.w	r3, [r8, #178]	; 0xb2
   173d4:	f89d 30bc 	ldrb.w	r3, [sp, #188]	; 0xbc
   173d8:	f89d 10bb 	ldrb.w	r1, [sp, #187]	; 0xbb
   173dc:	f89d 00d0 	ldrb.w	r0, [sp, #208]	; 0xd0
   173e0:	9a31      	ldr	r2, [sp, #196]	; 0xc4
   173e2:	ea41 2103 	orr.w	r1, r1, r3, lsl #8
   173e6:	f89d 30cf 	ldrb.w	r3, [sp, #207]	; 0xcf
   173ea:	f89d 40ba 	ldrb.w	r4, [sp, #186]	; 0xba
   173ee:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
   173f2:	f3c2 220f 	ubfx	r2, r2, #8, #16
   173f6:	f8a8 10b6 	strh.w	r1, [r8, #182]	; 0xb6
   173fa:	f8a8 30ce 	strh.w	r3, [r8, #206]	; 0xce
   173fe:	f888 40b4 	strb.w	r4, [r8, #180]	; 0xb4
   17402:	f8a8 20c2 	strh.w	r2, [r8, #194]	; 0xc2
   17406:	f8bd 20c2 	ldrh.w	r2, [sp, #194]	; 0xc2
   1740a:	f89d 10c1 	ldrb.w	r1, [sp, #193]	; 0xc1
   1740e:	f89d 30c4 	ldrb.w	r3, [sp, #196]	; 0xc4
   17412:	f8dd 00bd 	ldr.w	r0, [sp, #189]	; 0xbd
   17416:	f888 10bc 	strb.w	r1, [r8, #188]	; 0xbc
   1741a:	f8a8 20be 	strh.w	r2, [r8, #190]	; 0xbe
   1741e:	f8c8 00b8 	str.w	r0, [r8, #184]	; 0xb8
   17422:	f888 30c0 	strb.w	r3, [r8, #192]	; 0xc0
   17426:	f8bd 30cc 	ldrh.w	r3, [sp, #204]	; 0xcc
   1742a:	f8dd 10c7 	ldr.w	r1, [sp, #199]	; 0xc7
   1742e:	f89d 20cb 	ldrb.w	r2, [sp, #203]	; 0xcb
   17432:	f8c8 10c4 	str.w	r1, [r8, #196]	; 0xc4
   17436:	f888 20c8 	strb.w	r2, [r8, #200]	; 0xc8
   1743a:	f89d 10ce 	ldrb.w	r1, [sp, #206]	; 0xce
   1743e:	f8dd 20d1 	ldr.w	r2, [sp, #209]	; 0xd1
   17442:	f8a8 30ca 	strh.w	r3, [r8, #202]	; 0xca
   17446:	f89d 30d5 	ldrb.w	r3, [sp, #213]	; 0xd5
   1744a:	f888 10cc 	strb.w	r1, [r8, #204]	; 0xcc
   1744e:	f8c8 20d0 	str.w	r2, [r8, #208]	; 0xd0
   17452:	f888 30d4 	strb.w	r3, [r8, #212]	; 0xd4
   17456:	24d8      	movs	r4, #216	; 0xd8
   17458:	e66c      	b.n	17134 <gnss_interface_read+0xcc>
   1745a:	2039      	movs	r0, #57	; 0x39
   1745c:	f7f8 f9c2 	bl	f7e4 <bsd_os_errno_set>
   17460:	f04f 34ff 	mov.w	r4, #4294967295
   17464:	e671      	b.n	1714a <gnss_interface_read+0xe2>
   17466:	2016      	movs	r0, #22
   17468:	f7f8 f9bc 	bl	f7e4 <bsd_os_errno_set>
   1746c:	f04f 34ff 	mov.w	r4, #4294967295
   17470:	e66b      	b.n	1714a <gnss_interface_read+0xe2>
   17472:	2009      	movs	r0, #9
   17474:	f7f8 f9b6 	bl	f7e4 <bsd_os_errno_set>
   17478:	f04f 34ff 	mov.w	r4, #4294967295
   1747c:	e665      	b.n	1714a <gnss_interface_read+0xe2>
   1747e:	bf00      	nop

00017480 <gnss_interface_setopt>:
   17480:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   17484:	f241 1402 	movw	r4, #4354	; 0x1102
   17488:	4222      	tst	r2, r4
   1748a:	b086      	sub	sp, #24
   1748c:	4d9c      	ldr	r5, [pc, #624]	; (17700 <gnss_interface_setopt+0x280>)
   1748e:	d004      	beq.n	1749a <gnss_interface_setopt+0x1a>
   17490:	682c      	ldr	r4, [r5, #0]
   17492:	b2a4      	uxth	r4, r4
   17494:	2c02      	cmp	r4, #2
   17496:	f040 8104 	bne.w	176a2 <gnss_interface_setopt+0x222>
   1749a:	682c      	ldr	r4, [r5, #0]
   1749c:	0264      	lsls	r4, r4, #9
   1749e:	f100 8128 	bmi.w	176f2 <gnss_interface_setopt+0x272>
   174a2:	f5b1 7f01 	cmp.w	r1, #516	; 0x204
   174a6:	f040 811e 	bne.w	176e6 <gnss_interface_setopt+0x266>
   174aa:	4996      	ldr	r1, [pc, #600]	; (17704 <gnss_interface_setopt+0x284>)
   174ac:	4288      	cmp	r0, r1
   174ae:	f040 8114 	bne.w	176da <gnss_interface_setopt+0x25a>
   174b2:	3a01      	subs	r2, #1
   174b4:	2a08      	cmp	r2, #8
   174b6:	f200 80ec 	bhi.w	17692 <gnss_interface_setopt+0x212>
   174ba:	e8df f012 	tbh	[pc, r2, lsl #1]
   174be:	0075      	.short	0x0075
   174c0:	00c200d8 	.word	0x00c200d8
   174c4:	008100cc 	.word	0x008100cc
   174c8:	0098008c 	.word	0x0098008c
   174cc:	000900af 	.word	0x000900af
   174d0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   174d2:	2a01      	cmp	r2, #1
   174d4:	f040 80dd 	bne.w	17692 <gnss_interface_setopt+0x212>
   174d8:	f241 1603 	movw	r6, #4355	; 0x1103
   174dc:	2240      	movs	r2, #64	; 0x40
   174de:	4637      	mov	r7, r6
   174e0:	781b      	ldrb	r3, [r3, #0]
   174e2:	9202      	str	r2, [sp, #8]
   174e4:	f88d 3015 	strb.w	r3, [sp, #21]
   174e8:	682b      	ldr	r3, [r5, #0]
   174ea:	2112      	movs	r1, #18
   174ec:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
   174f0:	4668      	mov	r0, sp
   174f2:	602b      	str	r3, [r5, #0]
   174f4:	f000 fbe4 	bl	17cc0 <rpc_gnss_client_request_alloc>
   174f8:	4604      	mov	r4, r0
   174fa:	9800      	ldr	r0, [sp, #0]
   174fc:	2c00      	cmp	r4, #0
   174fe:	f040 80d6 	bne.w	176ae <gnss_interface_setopt+0x22e>
   17502:	2800      	cmp	r0, #0
   17504:	f000 80da 	beq.w	176bc <gnss_interface_setopt+0x23c>
   17508:	2212      	movs	r2, #18
   1750a:	f04f 0876 	mov.w	r8, #118	; 0x76
   1750e:	f04f 0e49 	mov.w	lr, #73	; 0x49
   17512:	f04f 0a43 	mov.w	sl, #67	; 0x43
   17516:	f04f 0954 	mov.w	r9, #84	; 0x54
   1751a:	f8df c1f0 	ldr.w	ip, [pc, #496]	; 1770c <gnss_interface_setopt+0x28c>
   1751e:	a906      	add	r1, sp, #24
   17520:	f8bc 3000 	ldrh.w	r3, [ip]
   17524:	f880 800e 	strb.w	r8, [r0, #14]
   17528:	3301      	adds	r3, #1
   1752a:	b29b      	uxth	r3, r3
   1752c:	ea46 4603 	orr.w	r6, r6, r3, lsl #16
   17530:	f841 6d14 	str.w	r6, [r1, #-20]!
   17534:	7144      	strb	r4, [r0, #5]
   17536:	7184      	strb	r4, [r0, #6]
   17538:	71c4      	strb	r4, [r0, #7]
   1753a:	7204      	strb	r4, [r0, #8]
   1753c:	7244      	strb	r4, [r0, #9]
   1753e:	7284      	strb	r4, [r0, #10]
   17540:	72c4      	strb	r4, [r0, #11]
   17542:	7102      	strb	r2, [r0, #4]
   17544:	f880 a00c 	strb.w	sl, [r0, #12]
   17548:	f880 900d 	strb.w	r9, [r0, #13]
   1754c:	f880 e00f 	strb.w	lr, [r0, #15]
   17550:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 17710 <gnss_interface_setopt+0x290>
   17554:	6800      	ldr	r0, [r0, #0]
   17556:	f8ac 3000 	strh.w	r3, [ip]
   1755a:	f003 f964 	bl	1a826 <memcpy>
   1755e:	4639      	mov	r1, r7
   17560:	9800      	ldr	r0, [sp, #0]
   17562:	f8c8 4000 	str.w	r4, [r8]
   17566:	f000 fbbf 	bl	17ce8 <rpc_gnss_client_request_send>
   1756a:	2800      	cmp	r0, #0
   1756c:	f040 80ab 	bne.w	176c6 <gnss_interface_setopt+0x246>
   17570:	4f65      	ldr	r7, [pc, #404]	; (17708 <gnss_interface_setopt+0x288>)
   17572:	4e64      	ldr	r6, [pc, #400]	; (17704 <gnss_interface_setopt+0x284>)
   17574:	4639      	mov	r1, r7
   17576:	4630      	mov	r0, r6
   17578:	f7f8 f8a0 	bl	f6bc <bsd_os_timedwait>
   1757c:	682c      	ldr	r4, [r5, #0]
   1757e:	f414 0480 	ands.w	r4, r4, #4194304	; 0x400000
   17582:	d1f7      	bne.n	17574 <gnss_interface_setopt+0xf4>
   17584:	f8d8 0000 	ldr.w	r0, [r8]
   17588:	b118      	cbz	r0, 17592 <gnss_interface_setopt+0x112>
   1758a:	f000 fbcb 	bl	17d24 <rpc_gnss_client_data_free>
   1758e:	f8c8 4000 	str.w	r4, [r8]
   17592:	682b      	ldr	r3, [r5, #0]
   17594:	021b      	lsls	r3, r3, #8
   17596:	d576      	bpl.n	17686 <gnss_interface_setopt+0x206>
   17598:	2000      	movs	r0, #0
   1759a:	682b      	ldr	r3, [r5, #0]
   1759c:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
   175a0:	602b      	str	r3, [r5, #0]
   175a2:	b006      	add	sp, #24
   175a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   175a8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   175aa:	2a02      	cmp	r2, #2
   175ac:	d171      	bne.n	17692 <gnss_interface_setopt+0x212>
   175ae:	2208      	movs	r2, #8
   175b0:	f241 1603 	movw	r6, #4355	; 0x1103
   175b4:	881b      	ldrh	r3, [r3, #0]
   175b6:	9202      	str	r2, [sp, #8]
   175b8:	f8ad 300f 	strh.w	r3, [sp, #15]
   175bc:	4637      	mov	r7, r6
   175be:	e793      	b.n	174e8 <gnss_interface_setopt+0x68>
   175c0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   175c2:	2a01      	cmp	r2, #1
   175c4:	d165      	bne.n	17692 <gnss_interface_setopt+0x212>
   175c6:	f241 1603 	movw	r6, #4355	; 0x1103
   175ca:	781b      	ldrb	r3, [r3, #0]
   175cc:	9202      	str	r2, [sp, #8]
   175ce:	f88d 300c 	strb.w	r3, [sp, #12]
   175d2:	4637      	mov	r7, r6
   175d4:	e788      	b.n	174e8 <gnss_interface_setopt+0x68>
   175d6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   175d8:	2a01      	cmp	r2, #1
   175da:	d15a      	bne.n	17692 <gnss_interface_setopt+0x212>
   175dc:	2202      	movs	r2, #2
   175de:	f241 1603 	movw	r6, #4355	; 0x1103
   175e2:	781b      	ldrb	r3, [r3, #0]
   175e4:	9202      	str	r2, [sp, #8]
   175e6:	f88d 300d 	strb.w	r3, [sp, #13]
   175ea:	4637      	mov	r7, r6
   175ec:	e77c      	b.n	174e8 <gnss_interface_setopt+0x68>
   175ee:	682a      	ldr	r2, [r5, #0]
   175f0:	b292      	uxth	r2, r2
   175f2:	2a02      	cmp	r2, #2
   175f4:	d155      	bne.n	176a2 <gnss_interface_setopt+0x222>
   175f6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   175f8:	2a04      	cmp	r2, #4
   175fa:	d14a      	bne.n	17692 <gnss_interface_setopt+0x212>
   175fc:	2101      	movs	r1, #1
   175fe:	f241 0604 	movw	r6, #4100	; 0x1004
   17602:	682a      	ldr	r2, [r5, #0]
   17604:	6818      	ldr	r0, [r3, #0]
   17606:	0c13      	lsrs	r3, r2, #16
   17608:	041b      	lsls	r3, r3, #16
   1760a:	f043 0303 	orr.w	r3, r3, #3
   1760e:	f8cd 0009 	str.w	r0, [sp, #9]
   17612:	602b      	str	r3, [r5, #0]
   17614:	f88d 1008 	strb.w	r1, [sp, #8]
   17618:	4637      	mov	r7, r6
   1761a:	e765      	b.n	174e8 <gnss_interface_setopt+0x68>
   1761c:	682b      	ldr	r3, [r5, #0]
   1761e:	b29b      	uxth	r3, r3
   17620:	2b04      	cmp	r3, #4
   17622:	d13e      	bne.n	176a2 <gnss_interface_setopt+0x222>
   17624:	2300      	movs	r3, #0
   17626:	f241 0604 	movw	r6, #4100	; 0x1004
   1762a:	f88d 3008 	strb.w	r3, [sp, #8]
   1762e:	f88d 3009 	strb.w	r3, [sp, #9]
   17632:	f88d 300a 	strb.w	r3, [sp, #10]
   17636:	f88d 300b 	strb.w	r3, [sp, #11]
   1763a:	f88d 300c 	strb.w	r3, [sp, #12]
   1763e:	4637      	mov	r7, r6
   17640:	e752      	b.n	174e8 <gnss_interface_setopt+0x68>
   17642:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   17644:	2a01      	cmp	r2, #1
   17646:	d124      	bne.n	17692 <gnss_interface_setopt+0x212>
   17648:	781b      	ldrb	r3, [r3, #0]
   1764a:	2b01      	cmp	r3, #1
   1764c:	d121      	bne.n	17692 <gnss_interface_setopt+0x212>
   1764e:	f241 1603 	movw	r6, #4355	; 0x1103
   17652:	4637      	mov	r7, r6
   17654:	e748      	b.n	174e8 <gnss_interface_setopt+0x68>
   17656:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   17658:	2a02      	cmp	r2, #2
   1765a:	d11a      	bne.n	17692 <gnss_interface_setopt+0x212>
   1765c:	2220      	movs	r2, #32
   1765e:	f241 1603 	movw	r6, #4355	; 0x1103
   17662:	881b      	ldrh	r3, [r3, #0]
   17664:	9202      	str	r2, [sp, #8]
   17666:	f8ad 3013 	strh.w	r3, [sp, #19]
   1766a:	4637      	mov	r7, r6
   1766c:	e73c      	b.n	174e8 <gnss_interface_setopt+0x68>
   1766e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   17670:	2a02      	cmp	r2, #2
   17672:	d10e      	bne.n	17692 <gnss_interface_setopt+0x212>
   17674:	2210      	movs	r2, #16
   17676:	f241 1603 	movw	r6, #4355	; 0x1103
   1767a:	881b      	ldrh	r3, [r3, #0]
   1767c:	9202      	str	r2, [sp, #8]
   1767e:	f8ad 3011 	strh.w	r3, [sp, #17]
   17682:	4637      	mov	r7, r6
   17684:	e730      	b.n	174e8 <gnss_interface_setopt+0x68>
   17686:	200e      	movs	r0, #14
   17688:	f7f8 f8ac 	bl	f7e4 <bsd_os_errno_set>
   1768c:	f04f 30ff 	mov.w	r0, #4294967295
   17690:	e783      	b.n	1759a <gnss_interface_setopt+0x11a>
   17692:	2016      	movs	r0, #22
   17694:	f7f8 f8a6 	bl	f7e4 <bsd_os_errno_set>
   17698:	f04f 30ff 	mov.w	r0, #4294967295
   1769c:	b006      	add	sp, #24
   1769e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   176a2:	200e      	movs	r0, #14
   176a4:	f7f8 f89e 	bl	f7e4 <bsd_os_errno_set>
   176a8:	f04f 30ff 	mov.w	r0, #4294967295
   176ac:	e779      	b.n	175a2 <gnss_interface_setopt+0x122>
   176ae:	b128      	cbz	r0, 176bc <gnss_interface_setopt+0x23c>
   176b0:	6803      	ldr	r3, [r0, #0]
   176b2:	b11b      	cbz	r3, 176bc <gnss_interface_setopt+0x23c>
   176b4:	4618      	mov	r0, r3
   176b6:	f000 fb35 	bl	17d24 <rpc_gnss_client_data_free>
   176ba:	9800      	ldr	r0, [sp, #0]
   176bc:	f000 fb2a 	bl	17d14 <rpc_gnss_client_message_free>
   176c0:	2023      	movs	r0, #35	; 0x23
   176c2:	f7f8 f88f 	bl	f7e4 <bsd_os_errno_set>
   176c6:	682b      	ldr	r3, [r5, #0]
   176c8:	200e      	movs	r0, #14
   176ca:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
   176ce:	602b      	str	r3, [r5, #0]
   176d0:	f7f8 f888 	bl	f7e4 <bsd_os_errno_set>
   176d4:	f04f 30ff 	mov.w	r0, #4294967295
   176d8:	e763      	b.n	175a2 <gnss_interface_setopt+0x122>
   176da:	2009      	movs	r0, #9
   176dc:	f7f8 f882 	bl	f7e4 <bsd_os_errno_set>
   176e0:	f04f 30ff 	mov.w	r0, #4294967295
   176e4:	e75d      	b.n	175a2 <gnss_interface_setopt+0x122>
   176e6:	202a      	movs	r0, #42	; 0x2a
   176e8:	f7f8 f87c 	bl	f7e4 <bsd_os_errno_set>
   176ec:	f04f 30ff 	mov.w	r0, #4294967295
   176f0:	e757      	b.n	175a2 <gnss_interface_setopt+0x122>
   176f2:	2073      	movs	r0, #115	; 0x73
   176f4:	f7f8 f876 	bl	f7e4 <bsd_os_errno_set>
   176f8:	f04f 30ff 	mov.w	r0, #4294967295
   176fc:	e751      	b.n	175a2 <gnss_interface_setopt+0x122>
   176fe:	bf00      	nop
   17700:	200209d0 	.word	0x200209d0
   17704:	49765443 	.word	0x49765443
   17708:	20027fa8 	.word	0x20027fa8
   1770c:	20024cd0 	.word	0x20024cd0
   17710:	200209d4 	.word	0x200209d4

00017714 <gnss_interface_getopt>:
   17714:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17718:	4c81      	ldr	r4, [pc, #516]	; (17920 <gnss_interface_getopt+0x20c>)
   1771a:	b087      	sub	sp, #28
   1771c:	6825      	ldr	r5, [r4, #0]
   1771e:	4698      	mov	r8, r3
   17720:	b2ad      	uxth	r5, r5
   17722:	2d02      	cmp	r5, #2
   17724:	9b10      	ldr	r3, [sp, #64]	; 0x40
   17726:	f040 80dd 	bne.w	178e4 <gnss_interface_getopt+0x1d0>
   1772a:	6825      	ldr	r5, [r4, #0]
   1772c:	03ee      	lsls	r6, r5, #15
   1772e:	f100 80eb 	bmi.w	17908 <gnss_interface_getopt+0x1f4>
   17732:	6825      	ldr	r5, [r4, #0]
   17734:	01ed      	lsls	r5, r5, #7
   17736:	f100 80ed 	bmi.w	17914 <gnss_interface_getopt+0x200>
   1773a:	f5b1 7f01 	cmp.w	r1, #516	; 0x204
   1773e:	f040 80d7 	bne.w	178f0 <gnss_interface_getopt+0x1dc>
   17742:	4978      	ldr	r1, [pc, #480]	; (17924 <gnss_interface_getopt+0x210>)
   17744:	4288      	cmp	r0, r1
   17746:	f040 80d9 	bne.w	178fc <gnss_interface_getopt+0x1e8>
   1774a:	f1b8 0f00 	cmp.w	r8, #0
   1774e:	d00b      	beq.n	17768 <gnss_interface_getopt+0x54>
   17750:	b153      	cbz	r3, 17768 <gnss_interface_getopt+0x54>
   17752:	1e57      	subs	r7, r2, #1
   17754:	2f05      	cmp	r7, #5
   17756:	d807      	bhi.n	17768 <gnss_interface_getopt+0x54>
   17758:	e8df f007 	tbb	[pc, r7]
   1775c:	0f030f0f 	.word	0x0f030f0f
   17760:	0303      	.short	0x0303
   17762:	681b      	ldr	r3, [r3, #0]
   17764:	2b01      	cmp	r3, #1
   17766:	d00b      	beq.n	17780 <gnss_interface_getopt+0x6c>
   17768:	2016      	movs	r0, #22
   1776a:	f7f8 f83b 	bl	f7e4 <bsd_os_errno_set>
   1776e:	f04f 35ff 	mov.w	r5, #4294967295
   17772:	4628      	mov	r0, r5
   17774:	b007      	add	sp, #28
   17776:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1777a:	681b      	ldr	r3, [r3, #0]
   1777c:	2b02      	cmp	r3, #2
   1777e:	d1f3      	bne.n	17768 <gnss_interface_getopt+0x54>
   17780:	6823      	ldr	r3, [r4, #0]
   17782:	2212      	movs	r2, #18
   17784:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
   17788:	2100      	movs	r1, #0
   1778a:	a801      	add	r0, sp, #4
   1778c:	6023      	str	r3, [r4, #0]
   1778e:	f003 f874 	bl	1a87a <memset>
   17792:	2112      	movs	r1, #18
   17794:	4668      	mov	r0, sp
   17796:	f000 fa93 	bl	17cc0 <rpc_gnss_client_request_alloc>
   1779a:	4605      	mov	r5, r0
   1779c:	9800      	ldr	r0, [sp, #0]
   1779e:	2d00      	cmp	r5, #0
   177a0:	f040 808a 	bne.w	178b8 <gnss_interface_getopt+0x1a4>
   177a4:	2800      	cmp	r0, #0
   177a6:	f000 808e 	beq.w	178c6 <gnss_interface_getopt+0x1b2>
   177aa:	f241 1602 	movw	r6, #4354	; 0x1102
   177ae:	f04f 0e49 	mov.w	lr, #73	; 0x49
   177b2:	2212      	movs	r2, #18
   177b4:	f04f 0976 	mov.w	r9, #118	; 0x76
   177b8:	f04f 0b43 	mov.w	fp, #67	; 0x43
   177bc:	f04f 0a54 	mov.w	sl, #84	; 0x54
   177c0:	f8df c168 	ldr.w	ip, [pc, #360]	; 1792c <gnss_interface_getopt+0x218>
   177c4:	f880 e00f 	strb.w	lr, [r0, #15]
   177c8:	f8bc 3000 	ldrh.w	r3, [ip]
   177cc:	f880 900e 	strb.w	r9, [r0, #14]
   177d0:	3301      	adds	r3, #1
   177d2:	b29b      	uxth	r3, r3
   177d4:	ea46 4e03 	orr.w	lr, r6, r3, lsl #16
   177d8:	f8cd e004 	str.w	lr, [sp, #4]
   177dc:	7145      	strb	r5, [r0, #5]
   177de:	7185      	strb	r5, [r0, #6]
   177e0:	71c5      	strb	r5, [r0, #7]
   177e2:	7205      	strb	r5, [r0, #8]
   177e4:	7245      	strb	r5, [r0, #9]
   177e6:	7285      	strb	r5, [r0, #10]
   177e8:	72c5      	strb	r5, [r0, #11]
   177ea:	a901      	add	r1, sp, #4
   177ec:	7102      	strb	r2, [r0, #4]
   177ee:	f880 b00c 	strb.w	fp, [r0, #12]
   177f2:	f880 a00d 	strb.w	sl, [r0, #13]
   177f6:	f8df 9138 	ldr.w	r9, [pc, #312]	; 17930 <gnss_interface_getopt+0x21c>
   177fa:	6800      	ldr	r0, [r0, #0]
   177fc:	f8ac 3000 	strh.w	r3, [ip]
   17800:	f003 f811 	bl	1a826 <memcpy>
   17804:	4631      	mov	r1, r6
   17806:	9800      	ldr	r0, [sp, #0]
   17808:	f8c9 5000 	str.w	r5, [r9]
   1780c:	f000 fa6c 	bl	17ce8 <rpc_gnss_client_request_send>
   17810:	2800      	cmp	r0, #0
   17812:	d15d      	bne.n	178d0 <gnss_interface_getopt+0x1bc>
   17814:	4e44      	ldr	r6, [pc, #272]	; (17928 <gnss_interface_getopt+0x214>)
   17816:	4d43      	ldr	r5, [pc, #268]	; (17924 <gnss_interface_getopt+0x210>)
   17818:	4631      	mov	r1, r6
   1781a:	4628      	mov	r0, r5
   1781c:	f7f7 ff4e 	bl	f6bc <bsd_os_timedwait>
   17820:	6823      	ldr	r3, [r4, #0]
   17822:	01db      	lsls	r3, r3, #7
   17824:	d4f8      	bmi.n	17818 <gnss_interface_getopt+0x104>
   17826:	f8d9 0000 	ldr.w	r0, [r9]
   1782a:	b1d8      	cbz	r0, 17864 <gnss_interface_getopt+0x150>
   1782c:	6825      	ldr	r5, [r4, #0]
   1782e:	f015 7500 	ands.w	r5, r5, #33554432	; 0x2000000
   17832:	d00f      	beq.n	17854 <gnss_interface_getopt+0x140>
   17834:	2f05      	cmp	r7, #5
   17836:	d837      	bhi.n	178a8 <gnss_interface_getopt+0x194>
   17838:	e8df f007 	tbb	[pc, r7]
   1783c:	2b26201a 	.word	0x2b26201a
   17840:	0331      	.short	0x0331
   17842:	2500      	movs	r5, #0
   17844:	7b43      	ldrb	r3, [r0, #13]
   17846:	f888 3000 	strb.w	r3, [r8]
   1784a:	f000 fa6b 	bl	17d24 <rpc_gnss_client_data_free>
   1784e:	2300      	movs	r3, #0
   17850:	f8c9 3000 	str.w	r3, [r9]
   17854:	6823      	ldr	r3, [r4, #0]
   17856:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
   1785a:	6023      	str	r3, [r4, #0]
   1785c:	4628      	mov	r0, r5
   1785e:	b007      	add	sp, #28
   17860:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17864:	6823      	ldr	r3, [r4, #0]
   17866:	4605      	mov	r5, r0
   17868:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
   1786c:	6023      	str	r3, [r4, #0]
   1786e:	e7f5      	b.n	1785c <gnss_interface_getopt+0x148>
   17870:	f8b0 300f 	ldrh.w	r3, [r0, #15]
   17874:	2500      	movs	r5, #0
   17876:	f8a8 3000 	strh.w	r3, [r8]
   1787a:	e7e6      	b.n	1784a <gnss_interface_getopt+0x136>
   1787c:	f8b0 3011 	ldrh.w	r3, [r0, #17]
   17880:	2500      	movs	r5, #0
   17882:	f8a8 3000 	strh.w	r3, [r8]
   17886:	e7e0      	b.n	1784a <gnss_interface_getopt+0x136>
   17888:	7b83      	ldrb	r3, [r0, #14]
   1788a:	2500      	movs	r5, #0
   1788c:	f888 3000 	strb.w	r3, [r8]
   17890:	e7db      	b.n	1784a <gnss_interface_getopt+0x136>
   17892:	f8b0 3013 	ldrh.w	r3, [r0, #19]
   17896:	2500      	movs	r5, #0
   17898:	f8a8 3000 	strh.w	r3, [r8]
   1789c:	e7d5      	b.n	1784a <gnss_interface_getopt+0x136>
   1789e:	7b03      	ldrb	r3, [r0, #12]
   178a0:	2500      	movs	r5, #0
   178a2:	f888 3000 	strb.w	r3, [r8]
   178a6:	e7d0      	b.n	1784a <gnss_interface_getopt+0x136>
   178a8:	2016      	movs	r0, #22
   178aa:	f7f7 ff9b 	bl	f7e4 <bsd_os_errno_set>
   178ae:	f04f 35ff 	mov.w	r5, #4294967295
   178b2:	f8d9 0000 	ldr.w	r0, [r9]
   178b6:	e7c8      	b.n	1784a <gnss_interface_getopt+0x136>
   178b8:	b128      	cbz	r0, 178c6 <gnss_interface_getopt+0x1b2>
   178ba:	6803      	ldr	r3, [r0, #0]
   178bc:	b11b      	cbz	r3, 178c6 <gnss_interface_getopt+0x1b2>
   178be:	4618      	mov	r0, r3
   178c0:	f000 fa30 	bl	17d24 <rpc_gnss_client_data_free>
   178c4:	9800      	ldr	r0, [sp, #0]
   178c6:	f000 fa25 	bl	17d14 <rpc_gnss_client_message_free>
   178ca:	2023      	movs	r0, #35	; 0x23
   178cc:	f7f7 ff8a 	bl	f7e4 <bsd_os_errno_set>
   178d0:	6823      	ldr	r3, [r4, #0]
   178d2:	200e      	movs	r0, #14
   178d4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
   178d8:	6023      	str	r3, [r4, #0]
   178da:	f04f 35ff 	mov.w	r5, #4294967295
   178de:	f7f7 ff81 	bl	f7e4 <bsd_os_errno_set>
   178e2:	e746      	b.n	17772 <gnss_interface_getopt+0x5e>
   178e4:	200e      	movs	r0, #14
   178e6:	f7f7 ff7d 	bl	f7e4 <bsd_os_errno_set>
   178ea:	f04f 35ff 	mov.w	r5, #4294967295
   178ee:	e740      	b.n	17772 <gnss_interface_getopt+0x5e>
   178f0:	202a      	movs	r0, #42	; 0x2a
   178f2:	f7f7 ff77 	bl	f7e4 <bsd_os_errno_set>
   178f6:	f04f 35ff 	mov.w	r5, #4294967295
   178fa:	e73a      	b.n	17772 <gnss_interface_getopt+0x5e>
   178fc:	2009      	movs	r0, #9
   178fe:	f7f7 ff71 	bl	f7e4 <bsd_os_errno_set>
   17902:	f04f 35ff 	mov.w	r5, #4294967295
   17906:	e734      	b.n	17772 <gnss_interface_getopt+0x5e>
   17908:	2005      	movs	r0, #5
   1790a:	f7f7 ff6b 	bl	f7e4 <bsd_os_errno_set>
   1790e:	f04f 35ff 	mov.w	r5, #4294967295
   17912:	e72e      	b.n	17772 <gnss_interface_getopt+0x5e>
   17914:	2073      	movs	r0, #115	; 0x73
   17916:	f7f7 ff65 	bl	f7e4 <bsd_os_errno_set>
   1791a:	f04f 35ff 	mov.w	r5, #4294967295
   1791e:	e728      	b.n	17772 <gnss_interface_getopt+0x5e>
   17920:	200209d0 	.word	0x200209d0
   17924:	49765443 	.word	0x49765443
   17928:	20027fa8 	.word	0x20027fa8
   1792c:	20024cd0 	.word	0x20024cd0
   17930:	200209d4 	.word	0x200209d4

00017934 <gnss_interface_init>:
   17934:	2100      	movs	r1, #0
   17936:	b538      	push	{r3, r4, r5, lr}
   17938:	4c09      	ldr	r4, [pc, #36]	; (17960 <gnss_interface_init+0x2c>)
   1793a:	4d0a      	ldr	r5, [pc, #40]	; (17964 <gnss_interface_init+0x30>)
   1793c:	6822      	ldr	r2, [r4, #0]
   1793e:	480a      	ldr	r0, [pc, #40]	; (17968 <gnss_interface_init+0x34>)
   17940:	4b0a      	ldr	r3, [pc, #40]	; (1796c <gnss_interface_init+0x38>)
   17942:	402a      	ands	r2, r5
   17944:	6022      	str	r2, [r4, #0]
   17946:	8001      	strh	r1, [r0, #0]
   17948:	6019      	str	r1, [r3, #0]
   1794a:	f000 f9b3 	bl	17cb4 <rpc_gnss_client_init>
   1794e:	b928      	cbnz	r0, 1795c <gnss_interface_init+0x28>
   17950:	6823      	ldr	r3, [r4, #0]
   17952:	402b      	ands	r3, r5
   17954:	f043 0301 	orr.w	r3, r3, #1
   17958:	6023      	str	r3, [r4, #0]
   1795a:	bd38      	pop	{r3, r4, r5, pc}
   1795c:	2003      	movs	r0, #3
   1795e:	bd38      	pop	{r3, r4, r5, pc}
   17960:	200209d0 	.word	0x200209d0
   17964:	ffff0000 	.word	0xffff0000
   17968:	20024cd0 	.word	0x20024cd0
   1796c:	200209d4 	.word	0x200209d4

00017970 <gnss_interface_open>:
   17970:	2902      	cmp	r1, #2
   17972:	b510      	push	{r4, lr}
   17974:	d121      	bne.n	179ba <gnss_interface_open+0x4a>
   17976:	4c14      	ldr	r4, [pc, #80]	; (179c8 <gnss_interface_open+0x58>)
   17978:	6823      	ldr	r3, [r4, #0]
   1797a:	b29b      	uxth	r3, r3
   1797c:	2b01      	cmp	r3, #1
   1797e:	d116      	bne.n	179ae <gnss_interface_open+0x3e>
   17980:	6823      	ldr	r3, [r4, #0]
   17982:	4608      	mov	r0, r1
   17984:	0c1b      	lsrs	r3, r3, #16
   17986:	041b      	lsls	r3, r3, #16
   17988:	f043 0302 	orr.w	r3, r3, #2
   1798c:	2200      	movs	r2, #0
   1798e:	490f      	ldr	r1, [pc, #60]	; (179cc <gnss_interface_open+0x5c>)
   17990:	6023      	str	r3, [r4, #0]
   17992:	f000 faad 	bl	17ef0 <packet_handler_create>
   17996:	4a0e      	ldr	r2, [pc, #56]	; (179d0 <gnss_interface_open+0x60>)
   17998:	6010      	str	r0, [r2, #0]
   1799a:	b140      	cbz	r0, 179ae <gnss_interface_open+0x3e>
   1799c:	6823      	ldr	r3, [r4, #0]
   1799e:	6802      	ldr	r2, [r0, #0]
   179a0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   179a4:	6812      	ldr	r2, [r2, #0]
   179a6:	6023      	str	r3, [r4, #0]
   179a8:	4790      	blx	r2
   179aa:	480a      	ldr	r0, [pc, #40]	; (179d4 <gnss_interface_open+0x64>)
   179ac:	bd10      	pop	{r4, pc}
   179ae:	200e      	movs	r0, #14
   179b0:	f7f7 ff18 	bl	f7e4 <bsd_os_errno_set>
   179b4:	f04f 30ff 	mov.w	r0, #4294967295
   179b8:	bd10      	pop	{r4, pc}
   179ba:	2029      	movs	r0, #41	; 0x29
   179bc:	f7f7 ff12 	bl	f7e4 <bsd_os_errno_set>
   179c0:	f04f 30ff 	mov.w	r0, #4294967295
   179c4:	bd10      	pop	{r4, pc}
   179c6:	bf00      	nop
   179c8:	200209d0 	.word	0x200209d0
   179cc:	00016cb9 	.word	0x00016cb9
   179d0:	200209d8 	.word	0x200209d8
   179d4:	49765443 	.word	0x49765443

000179d8 <gnss_interface_close>:
   179d8:	b530      	push	{r4, r5, lr}
   179da:	4b13      	ldr	r3, [pc, #76]	; (17a28 <gnss_interface_close+0x50>)
   179dc:	b083      	sub	sp, #12
   179de:	4298      	cmp	r0, r3
   179e0:	d11c      	bne.n	17a1c <gnss_interface_close+0x44>
   179e2:	4c12      	ldr	r4, [pc, #72]	; (17a2c <gnss_interface_close+0x54>)
   179e4:	6823      	ldr	r3, [r4, #0]
   179e6:	b29b      	uxth	r3, r3
   179e8:	2b04      	cmp	r3, #4
   179ea:	d00f      	beq.n	17a0c <gnss_interface_close+0x34>
   179ec:	4d10      	ldr	r5, [pc, #64]	; (17a30 <gnss_interface_close+0x58>)
   179ee:	6828      	ldr	r0, [r5, #0]
   179f0:	b118      	cbz	r0, 179fa <gnss_interface_close+0x22>
   179f2:	f000 fa9d 	bl	17f30 <packet_handler_delete>
   179f6:	2300      	movs	r3, #0
   179f8:	602b      	str	r3, [r5, #0]
   179fa:	2000      	movs	r0, #0
   179fc:	6823      	ldr	r3, [r4, #0]
   179fe:	0c1b      	lsrs	r3, r3, #16
   17a00:	041b      	lsls	r3, r3, #16
   17a02:	f043 0301 	orr.w	r3, r3, #1
   17a06:	6023      	str	r3, [r4, #0]
   17a08:	b003      	add	sp, #12
   17a0a:	bd30      	pop	{r4, r5, pc}
   17a0c:	2300      	movs	r3, #0
   17a0e:	2208      	movs	r2, #8
   17a10:	9300      	str	r3, [sp, #0]
   17a12:	f44f 7101 	mov.w	r1, #516	; 0x204
   17a16:	f7fc fe31 	bl	1467c <nrf_setsockopt>
   17a1a:	e7e7      	b.n	179ec <gnss_interface_close+0x14>
   17a1c:	2009      	movs	r0, #9
   17a1e:	f7f7 fee1 	bl	f7e4 <bsd_os_errno_set>
   17a22:	f04f 30ff 	mov.w	r0, #4294967295
   17a26:	e7ef      	b.n	17a08 <gnss_interface_close+0x30>
   17a28:	49765443 	.word	0x49765443
   17a2c:	200209d0 	.word	0x200209d0
   17a30:	200209d8 	.word	0x200209d8

00017a34 <rpc_gnss_serialize_utc>:
   17a34:	4603      	mov	r3, r0
   17a36:	b1d8      	cbz	r0, 17a70 <rpc_gnss_serialize_utc+0x3c>
   17a38:	b1d1      	cbz	r1, 17a70 <rpc_gnss_serialize_utc+0x3c>
   17a3a:	2000      	movs	r0, #0
   17a3c:	2201      	movs	r2, #1
   17a3e:	7048      	strb	r0, [r1, #1]
   17a40:	700a      	strb	r2, [r1, #0]
   17a42:	685a      	ldr	r2, [r3, #4]
   17a44:	2010      	movs	r0, #16
   17a46:	f8c1 2006 	str.w	r2, [r1, #6]
   17a4a:	681a      	ldr	r2, [r3, #0]
   17a4c:	f8c1 2002 	str.w	r2, [r1, #2]
   17a50:	f993 200a 	ldrsb.w	r2, [r3, #10]
   17a54:	730a      	strb	r2, [r1, #12]
   17a56:	f993 200d 	ldrsb.w	r2, [r3, #13]
   17a5a:	73ca      	strb	r2, [r1, #15]
   17a5c:	f993 200c 	ldrsb.w	r2, [r3, #12]
   17a60:	738a      	strb	r2, [r1, #14]
   17a62:	7a1a      	ldrb	r2, [r3, #8]
   17a64:	728a      	strb	r2, [r1, #10]
   17a66:	7ada      	ldrb	r2, [r3, #11]
   17a68:	734a      	strb	r2, [r1, #13]
   17a6a:	7a5b      	ldrb	r3, [r3, #9]
   17a6c:	72cb      	strb	r3, [r1, #11]
   17a6e:	4770      	bx	lr
   17a70:	f04f 30ff 	mov.w	r0, #4294967295
   17a74:	4770      	bx	lr
   17a76:	bf00      	nop

00017a78 <rpc_gnss_serialize_ephe>:
   17a78:	4603      	mov	r3, r0
   17a7a:	2800      	cmp	r0, #0
   17a7c:	d04b      	beq.n	17b16 <rpc_gnss_serialize_ephe+0x9e>
   17a7e:	2900      	cmp	r1, #0
   17a80:	d049      	beq.n	17b16 <rpc_gnss_serialize_ephe+0x9e>
   17a82:	2000      	movs	r0, #0
   17a84:	2202      	movs	r2, #2
   17a86:	7048      	strb	r0, [r1, #1]
   17a88:	700a      	strb	r2, [r1, #0]
   17a8a:	68da      	ldr	r2, [r3, #12]
   17a8c:	2040      	movs	r0, #64	; 0x40
   17a8e:	f8c1 200b 	str.w	r2, [r1, #11]
   17a92:	f9b3 2008 	ldrsh.w	r2, [r3, #8]
   17a96:	f8a1 2009 	strh.w	r2, [r1, #9]
   17a9a:	f993 2006 	ldrsb.w	r2, [r3, #6]
   17a9e:	720a      	strb	r2, [r1, #8]
   17aa0:	f9b3 2044 	ldrsh.w	r2, [r3, #68]	; 0x44
   17aa4:	878a      	strh	r2, [r1, #60]	; 0x3c
   17aa6:	f9b3 203e 	ldrsh.w	r2, [r3, #62]	; 0x3e
   17aaa:	86ca      	strh	r2, [r1, #54]	; 0x36
   17aac:	f9b3 2042 	ldrsh.w	r2, [r3, #66]	; 0x42
   17ab0:	874a      	strh	r2, [r1, #58]	; 0x3a
   17ab2:	f9b3 203c 	ldrsh.w	r2, [r3, #60]	; 0x3c
   17ab6:	868a      	strh	r2, [r1, #52]	; 0x34
   17ab8:	f9b3 2046 	ldrsh.w	r2, [r3, #70]	; 0x46
   17abc:	87ca      	strh	r2, [r1, #62]	; 0x3e
   17abe:	f9b3 2040 	ldrsh.w	r2, [r3, #64]	; 0x40
   17ac2:	870a      	strh	r2, [r1, #56]	; 0x38
   17ac4:	f9b3 201c 	ldrsh.w	r2, [r3, #28]
   17ac8:	830a      	strh	r2, [r1, #24]
   17aca:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   17acc:	f8c1 2022 	str.w	r2, [r1, #34]	; 0x22
   17ad0:	7c9a      	ldrb	r2, [r3, #18]
   17ad2:	744a      	strb	r2, [r1, #17]
   17ad4:	785a      	ldrb	r2, [r3, #1]
   17ad6:	70ca      	strb	r2, [r1, #3]
   17ad8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
   17ada:	62ca      	str	r2, [r1, #44]	; 0x2c
   17adc:	f9b3 202c 	ldrsh.w	r2, [r3, #44]	; 0x2c
   17ae0:	84ca      	strh	r2, [r1, #38]	; 0x26
   17ae2:	885a      	ldrh	r2, [r3, #2]
   17ae4:	808a      	strh	r2, [r1, #4]
   17ae6:	6a1a      	ldr	r2, [r3, #32]
   17ae8:	f8c1 201a 	str.w	r2, [r1, #26]
   17aec:	6b9a      	ldr	r2, [r3, #56]	; 0x38
   17aee:	630a      	str	r2, [r1, #48]	; 0x30
   17af0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
   17af2:	f8c1 201e 	str.w	r2, [r1, #30]
   17af6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
   17af8:	628a      	str	r2, [r1, #40]	; 0x28
   17afa:	781a      	ldrb	r2, [r3, #0]
   17afc:	708a      	strb	r2, [r1, #2]
   17afe:	f993 2010 	ldrsb.w	r2, [r3, #16]
   17b02:	73ca      	strb	r2, [r1, #15]
   17b04:	889a      	ldrh	r2, [r3, #4]
   17b06:	80ca      	strh	r2, [r1, #6]
   17b08:	8a9a      	ldrh	r2, [r3, #20]
   17b0a:	824a      	strh	r2, [r1, #18]
   17b0c:	7c5a      	ldrb	r2, [r3, #17]
   17b0e:	740a      	strb	r2, [r1, #16]
   17b10:	699b      	ldr	r3, [r3, #24]
   17b12:	614b      	str	r3, [r1, #20]
   17b14:	4770      	bx	lr
   17b16:	f04f 30ff 	mov.w	r0, #4294967295
   17b1a:	4770      	bx	lr

00017b1c <rpc_gnss_serialize_alm>:
   17b1c:	4603      	mov	r3, r0
   17b1e:	b360      	cbz	r0, 17b7a <rpc_gnss_serialize_alm+0x5e>
   17b20:	b359      	cbz	r1, 17b7a <rpc_gnss_serialize_alm+0x5e>
   17b22:	2000      	movs	r0, #0
   17b24:	2203      	movs	r2, #3
   17b26:	7048      	strb	r0, [r1, #1]
   17b28:	700a      	strb	r2, [r1, #0]
   17b2a:	f9b3 201c 	ldrsh.w	r2, [r3, #28]
   17b2e:	2021      	movs	r0, #33	; 0x21
   17b30:	f8a1 201d 	strh.w	r2, [r1, #29]
   17b34:	f9b3 201e 	ldrsh.w	r2, [r3, #30]
   17b38:	f8a1 201f 	strh.w	r2, [r1, #31]
   17b3c:	f9b3 2006 	ldrsh.w	r2, [r3, #6]
   17b40:	810a      	strh	r2, [r1, #8]
   17b42:	889a      	ldrh	r2, [r3, #4]
   17b44:	80ca      	strh	r2, [r1, #6]
   17b46:	78da      	ldrb	r2, [r3, #3]
   17b48:	714a      	strb	r2, [r1, #5]
   17b4a:	699a      	ldr	r2, [r3, #24]
   17b4c:	f8c1 2019 	str.w	r2, [r1, #25]
   17b50:	691a      	ldr	r2, [r3, #16]
   17b52:	f8c1 2011 	str.w	r2, [r1, #17]
   17b56:	f9b3 2008 	ldrsh.w	r2, [r3, #8]
   17b5a:	814a      	strh	r2, [r1, #10]
   17b5c:	68da      	ldr	r2, [r3, #12]
   17b5e:	f8c1 200d 	str.w	r2, [r1, #13]
   17b62:	7a9a      	ldrb	r2, [r3, #10]
   17b64:	730a      	strb	r2, [r1, #12]
   17b66:	781a      	ldrb	r2, [r3, #0]
   17b68:	708a      	strb	r2, [r1, #2]
   17b6a:	789a      	ldrb	r2, [r3, #2]
   17b6c:	710a      	strb	r2, [r1, #4]
   17b6e:	695a      	ldr	r2, [r3, #20]
   17b70:	f8c1 2015 	str.w	r2, [r1, #21]
   17b74:	785b      	ldrb	r3, [r3, #1]
   17b76:	70cb      	strb	r3, [r1, #3]
   17b78:	4770      	bx	lr
   17b7a:	f04f 30ff 	mov.w	r0, #4294967295
   17b7e:	4770      	bx	lr

00017b80 <rpc_gnss_serialize_klob>:
   17b80:	4603      	mov	r3, r0
   17b82:	b1f0      	cbz	r0, 17bc2 <rpc_gnss_serialize_klob+0x42>
   17b84:	b1e9      	cbz	r1, 17bc2 <rpc_gnss_serialize_klob+0x42>
   17b86:	2000      	movs	r0, #0
   17b88:	2204      	movs	r2, #4
   17b8a:	7048      	strb	r0, [r1, #1]
   17b8c:	700a      	strb	r2, [r1, #0]
   17b8e:	f993 2000 	ldrsb.w	r2, [r3]
   17b92:	200a      	movs	r0, #10
   17b94:	708a      	strb	r2, [r1, #2]
   17b96:	f993 2001 	ldrsb.w	r2, [r3, #1]
   17b9a:	70ca      	strb	r2, [r1, #3]
   17b9c:	f993 2002 	ldrsb.w	r2, [r3, #2]
   17ba0:	710a      	strb	r2, [r1, #4]
   17ba2:	f993 2003 	ldrsb.w	r2, [r3, #3]
   17ba6:	714a      	strb	r2, [r1, #5]
   17ba8:	f993 2004 	ldrsb.w	r2, [r3, #4]
   17bac:	718a      	strb	r2, [r1, #6]
   17bae:	f993 2005 	ldrsb.w	r2, [r3, #5]
   17bb2:	71ca      	strb	r2, [r1, #7]
   17bb4:	f993 2006 	ldrsb.w	r2, [r3, #6]
   17bb8:	720a      	strb	r2, [r1, #8]
   17bba:	f993 3007 	ldrsb.w	r3, [r3, #7]
   17bbe:	724b      	strb	r3, [r1, #9]
   17bc0:	4770      	bx	lr
   17bc2:	f04f 30ff 	mov.w	r0, #4294967295
   17bc6:	4770      	bx	lr

00017bc8 <rpc_gnss_serialize_nequick>:
   17bc8:	4603      	mov	r3, r0
   17bca:	b198      	cbz	r0, 17bf4 <rpc_gnss_serialize_nequick+0x2c>
   17bcc:	b191      	cbz	r1, 17bf4 <rpc_gnss_serialize_nequick+0x2c>
   17bce:	2000      	movs	r0, #0
   17bd0:	2205      	movs	r2, #5
   17bd2:	7048      	strb	r0, [r1, #1]
   17bd4:	700a      	strb	r2, [r1, #0]
   17bd6:	f9b3 2000 	ldrsh.w	r2, [r3]
   17bda:	200a      	movs	r0, #10
   17bdc:	804a      	strh	r2, [r1, #2]
   17bde:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
   17be2:	808a      	strh	r2, [r1, #4]
   17be4:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
   17be8:	80ca      	strh	r2, [r1, #6]
   17bea:	799a      	ldrb	r2, [r3, #6]
   17bec:	720a      	strb	r2, [r1, #8]
   17bee:	79db      	ldrb	r3, [r3, #7]
   17bf0:	724b      	strb	r3, [r1, #9]
   17bf2:	4770      	bx	lr
   17bf4:	f04f 30ff 	mov.w	r0, #4294967295
   17bf8:	4770      	bx	lr
   17bfa:	bf00      	nop

00017bfc <rpc_gnss_serialize_time_and_sv_tow>:
   17bfc:	b310      	cbz	r0, 17c44 <rpc_gnss_serialize_time_and_sv_tow+0x48>
   17bfe:	b309      	cbz	r1, 17c44 <rpc_gnss_serialize_time_and_sv_tow+0x48>
   17c00:	b470      	push	{r4, r5, r6}
   17c02:	2500      	movs	r5, #0
   17c04:	2606      	movs	r6, #6
   17c06:	460c      	mov	r4, r1
   17c08:	704d      	strb	r5, [r1, #1]
   17c0a:	700e      	strb	r6, [r1, #0]
   17c0c:	462b      	mov	r3, r5
   17c0e:	8805      	ldrh	r5, [r0, #0]
   17c10:	4602      	mov	r2, r0
   17c12:	804d      	strh	r5, [r1, #2]
   17c14:	68c5      	ldr	r5, [r0, #12]
   17c16:	f8c1 500a 	str.w	r5, [r1, #10]
   17c1a:	8905      	ldrh	r5, [r0, #8]
   17c1c:	810d      	strh	r5, [r1, #8]
   17c1e:	6840      	ldr	r0, [r0, #4]
   17c20:	6048      	str	r0, [r1, #4]
   17c22:	8a15      	ldrh	r5, [r2, #16]
   17c24:	eb03 0043 	add.w	r0, r3, r3, lsl #1
   17c28:	4408      	add	r0, r1
   17c2a:	81c5      	strh	r5, [r0, #14]
   17c2c:	7c90      	ldrb	r0, [r2, #18]
   17c2e:	3301      	adds	r3, #1
   17c30:	2b20      	cmp	r3, #32
   17c32:	7420      	strb	r0, [r4, #16]
   17c34:	f102 0204 	add.w	r2, r2, #4
   17c38:	f104 0403 	add.w	r4, r4, #3
   17c3c:	d1f1      	bne.n	17c22 <rpc_gnss_serialize_time_and_sv_tow+0x26>
   17c3e:	206e      	movs	r0, #110	; 0x6e
   17c40:	bc70      	pop	{r4, r5, r6}
   17c42:	4770      	bx	lr
   17c44:	f04f 30ff 	mov.w	r0, #4294967295
   17c48:	4770      	bx	lr
   17c4a:	bf00      	nop

00017c4c <rpc_gnss_serialize_location>:
   17c4c:	4603      	mov	r3, r0
   17c4e:	b1c8      	cbz	r0, 17c84 <rpc_gnss_serialize_location+0x38>
   17c50:	b1c1      	cbz	r1, 17c84 <rpc_gnss_serialize_location+0x38>
   17c52:	2000      	movs	r0, #0
   17c54:	2207      	movs	r2, #7
   17c56:	7048      	strb	r0, [r1, #1]
   17c58:	700a      	strb	r2, [r1, #0]
   17c5a:	f9b3 2008 	ldrsh.w	r2, [r3, #8]
   17c5e:	2011      	movs	r0, #17
   17c60:	814a      	strh	r2, [r1, #10]
   17c62:	7b9a      	ldrb	r2, [r3, #14]
   17c64:	740a      	strb	r2, [r1, #16]
   17c66:	681a      	ldr	r2, [r3, #0]
   17c68:	f8c1 2002 	str.w	r2, [r1, #2]
   17c6c:	685a      	ldr	r2, [r3, #4]
   17c6e:	f8c1 2006 	str.w	r2, [r1, #6]
   17c72:	7b1a      	ldrb	r2, [r3, #12]
   17c74:	738a      	strb	r2, [r1, #14]
   17c76:	7b5a      	ldrb	r2, [r3, #13]
   17c78:	73ca      	strb	r2, [r1, #15]
   17c7a:	7a9a      	ldrb	r2, [r3, #10]
   17c7c:	730a      	strb	r2, [r1, #12]
   17c7e:	7adb      	ldrb	r3, [r3, #11]
   17c80:	734b      	strb	r3, [r1, #13]
   17c82:	4770      	bx	lr
   17c84:	f04f 30ff 	mov.w	r0, #4294967295
   17c88:	4770      	bx	lr
   17c8a:	bf00      	nop

00017c8c <rpc_gnss_serialize_integrity>:
   17c8c:	b148      	cbz	r0, 17ca2 <rpc_gnss_serialize_integrity+0x16>
   17c8e:	b141      	cbz	r1, 17ca2 <rpc_gnss_serialize_integrity+0x16>
   17c90:	2200      	movs	r2, #0
   17c92:	2308      	movs	r3, #8
   17c94:	704a      	strb	r2, [r1, #1]
   17c96:	700b      	strb	r3, [r1, #0]
   17c98:	6803      	ldr	r3, [r0, #0]
   17c9a:	2006      	movs	r0, #6
   17c9c:	f8c1 3002 	str.w	r3, [r1, #2]
   17ca0:	4770      	bx	lr
   17ca2:	f04f 30ff 	mov.w	r0, #4294967295
   17ca6:	4770      	bx	lr

00017ca8 <gnss_client_event_handler>:
   17ca8:	f850 1b08 	ldr.w	r1, [r0], #8
   17cac:	0c09      	lsrs	r1, r1, #16
   17cae:	f7ff b811 	b.w	16cd4 <rpc_gnss_event_handler>
   17cb2:	bf00      	nop

00017cb4 <rpc_gnss_client_init>:
   17cb4:	4801      	ldr	r0, [pc, #4]	; (17cbc <rpc_gnss_client_init+0x8>)
   17cb6:	f7fe bb73 	b.w	163a0 <rpc_client_register>
   17cba:	bf00      	nop
   17cbc:	0001c510 	.word	0x0001c510

00017cc0 <rpc_gnss_client_request_alloc>:
   17cc0:	2300      	movs	r3, #0
   17cc2:	b510      	push	{r4, lr}
   17cc4:	b082      	sub	sp, #8
   17cc6:	9301      	str	r3, [sp, #4]
   17cc8:	b158      	cbz	r0, 17ce2 <rpc_gnss_client_request_alloc+0x22>
   17cca:	4604      	mov	r4, r0
   17ccc:	aa01      	add	r2, sp, #4
   17cce:	2007      	movs	r0, #7
   17cd0:	f7fe fd9e 	bl	16810 <rpc_message_alloc>
   17cd4:	b918      	cbnz	r0, 17cde <rpc_gnss_client_request_alloc+0x1e>
   17cd6:	9b01      	ldr	r3, [sp, #4]
   17cd8:	b10b      	cbz	r3, 17cde <rpc_gnss_client_request_alloc+0x1e>
   17cda:	3308      	adds	r3, #8
   17cdc:	6023      	str	r3, [r4, #0]
   17cde:	b002      	add	sp, #8
   17ce0:	bd10      	pop	{r4, pc}
   17ce2:	2007      	movs	r0, #7
   17ce4:	b002      	add	sp, #8
   17ce6:	bd10      	pop	{r4, pc}

00017ce8 <rpc_gnss_client_request_send>:
   17ce8:	f401 4370 	and.w	r3, r1, #61440	; 0xf000
   17cec:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
   17cf0:	d10b      	bne.n	17d0a <rpc_gnss_client_request_send+0x22>
   17cf2:	b160      	cbz	r0, 17d0e <rpc_gnss_client_request_send+0x26>
   17cf4:	4603      	mov	r3, r0
   17cf6:	f830 2c08 	ldrh.w	r2, [r0, #-8]
   17cfa:	2007      	movs	r0, #7
   17cfc:	ea42 4101 	orr.w	r1, r2, r1, lsl #16
   17d00:	f843 1d08 	str.w	r1, [r3, #-8]!
   17d04:	4619      	mov	r1, r3
   17d06:	f7fe bd6b 	b.w	167e0 <rpc_message_send>
   17d0a:	200f      	movs	r0, #15
   17d0c:	4770      	bx	lr
   17d0e:	2007      	movs	r0, #7
   17d10:	4770      	bx	lr
   17d12:	bf00      	nop

00017d14 <rpc_gnss_client_message_free>:
   17d14:	b120      	cbz	r0, 17d20 <rpc_gnss_client_message_free+0xc>
   17d16:	f1a0 0108 	sub.w	r1, r0, #8
   17d1a:	2007      	movs	r0, #7
   17d1c:	f7fe bdaa 	b.w	16874 <rpc_message_free>
   17d20:	2007      	movs	r0, #7
   17d22:	4770      	bx	lr

00017d24 <rpc_gnss_client_data_free>:
   17d24:	b118      	cbz	r0, 17d2e <rpc_gnss_client_data_free+0xa>
   17d26:	4601      	mov	r1, r0
   17d28:	2007      	movs	r0, #7
   17d2a:	f7fe beb5 	b.w	16a98 <rpc_message_data_free>
   17d2e:	2007      	movs	r0, #7
   17d30:	4770      	bx	lr
   17d32:	bf00      	nop

00017d34 <datagram_handler_init>:
   17d34:	b510      	push	{r4, lr}
   17d36:	4604      	mov	r4, r0
   17d38:	200c      	movs	r0, #12
   17d3a:	f7f9 f8d7 	bl	10eec <nrf_malloc>
   17d3e:	60e0      	str	r0, [r4, #12]
   17d40:	b118      	cbz	r0, 17d4a <datagram_handler_init+0x16>
   17d42:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   17d46:	f7fc bb8f 	b.w	14468 <linked_list_init>
   17d4a:	2004      	movs	r0, #4
   17d4c:	bd10      	pop	{r4, pc}
   17d4e:	bf00      	nop

00017d50 <datagram_handler_put>:
   17d50:	b570      	push	{r4, r5, r6, lr}
   17d52:	4606      	mov	r6, r0
   17d54:	2014      	movs	r0, #20
   17d56:	460d      	mov	r5, r1
   17d58:	f7f9 f8c8 	bl	10eec <nrf_malloc>
   17d5c:	b178      	cbz	r0, 17d7e <datagram_handler_put+0x2e>
   17d5e:	682b      	ldr	r3, [r5, #0]
   17d60:	4604      	mov	r4, r0
   17d62:	6043      	str	r3, [r0, #4]
   17d64:	686b      	ldr	r3, [r5, #4]
   17d66:	4601      	mov	r1, r0
   17d68:	6083      	str	r3, [r0, #8]
   17d6a:	68eb      	ldr	r3, [r5, #12]
   17d6c:	60c3      	str	r3, [r0, #12]
   17d6e:	68ab      	ldr	r3, [r5, #8]
   17d70:	6103      	str	r3, [r0, #16]
   17d72:	68f0      	ldr	r0, [r6, #12]
   17d74:	f7fc fb82 	bl	1447c <linked_list_push>
   17d78:	b920      	cbnz	r0, 17d84 <datagram_handler_put+0x34>
   17d7a:	6868      	ldr	r0, [r5, #4]
   17d7c:	bd70      	pop	{r4, r5, r6, pc}
   17d7e:	f04f 30ff 	mov.w	r0, #4294967295
   17d82:	bd70      	pop	{r4, r5, r6, pc}
   17d84:	4620      	mov	r0, r4
   17d86:	f7f9 f8bb 	bl	10f00 <nrf_free>
   17d8a:	f04f 30ff 	mov.w	r0, #4294967295
   17d8e:	bd70      	pop	{r4, r5, r6, pc}

00017d90 <datagram_handler_get>:
   17d90:	b5f0      	push	{r4, r5, r6, r7, lr}
   17d92:	4606      	mov	r6, r0
   17d94:	b085      	sub	sp, #20
   17d96:	68c0      	ldr	r0, [r0, #12]
   17d98:	460c      	mov	r4, r1
   17d9a:	4617      	mov	r7, r2
   17d9c:	f7fc fb8e 	bl	144bc <linked_list_peek>
   17da0:	2800      	cmp	r0, #0
   17da2:	d037      	beq.n	17e14 <datagram_handler_get+0x84>
   17da4:	6882      	ldr	r2, [r0, #8]
   17da6:	4605      	mov	r5, r0
   17da8:	e9d4 0300 	ldrd	r0, r3, [r4]
   17dac:	429a      	cmp	r2, r3
   17dae:	bf28      	it	cs
   17db0:	461a      	movcs	r2, r3
   17db2:	6062      	str	r2, [r4, #4]
   17db4:	b110      	cbz	r0, 17dbc <datagram_handler_get+0x2c>
   17db6:	6869      	ldr	r1, [r5, #4]
   17db8:	f002 fd35 	bl	1a826 <memcpy>
   17dbc:	68a0      	ldr	r0, [r4, #8]
   17dbe:	b118      	cbz	r0, 17dc8 <datagram_handler_get+0x38>
   17dc0:	692b      	ldr	r3, [r5, #16]
   17dc2:	b10b      	cbz	r3, 17dc8 <datagram_handler_get+0x38>
   17dc4:	68ea      	ldr	r2, [r5, #12]
   17dc6:	b9e2      	cbnz	r2, 17e02 <datagram_handler_get+0x72>
   17dc8:	2300      	movs	r3, #0
   17dca:	60e3      	str	r3, [r4, #12]
   17dcc:	073b      	lsls	r3, r7, #28
   17dce:	d502      	bpl.n	17dd6 <datagram_handler_get+0x46>
   17dd0:	6860      	ldr	r0, [r4, #4]
   17dd2:	b005      	add	sp, #20
   17dd4:	bdf0      	pop	{r4, r5, r6, r7, pc}
   17dd6:	68f0      	ldr	r0, [r6, #12]
   17dd8:	f7fc fb66 	bl	144a8 <linked_list_pop>
   17ddc:	4605      	mov	r5, r0
   17dde:	2800      	cmp	r0, #0
   17de0:	d0f6      	beq.n	17dd0 <datagram_handler_get+0x40>
   17de2:	e9d0 3101 	ldrd	r3, r1, [r0, #4]
   17de6:	6902      	ldr	r2, [r0, #16]
   17de8:	9300      	str	r3, [sp, #0]
   17dea:	68c3      	ldr	r3, [r0, #12]
   17dec:	e9cd 1201 	strd	r1, r2, [sp, #4]
   17df0:	9303      	str	r3, [sp, #12]
   17df2:	4668      	mov	r0, sp
   17df4:	e9d6 3101 	ldrd	r3, r1, [r6, #4]
   17df8:	4798      	blx	r3
   17dfa:	4628      	mov	r0, r5
   17dfc:	f7f9 f880 	bl	10f00 <nrf_free>
   17e00:	e7e6      	b.n	17dd0 <datagram_handler_get+0x40>
   17e02:	68e3      	ldr	r3, [r4, #12]
   17e04:	429a      	cmp	r2, r3
   17e06:	bf28      	it	cs
   17e08:	461a      	movcs	r2, r3
   17e0a:	60e2      	str	r2, [r4, #12]
   17e0c:	6929      	ldr	r1, [r5, #16]
   17e0e:	f002 fd0a 	bl	1a826 <memcpy>
   17e12:	e7db      	b.n	17dcc <datagram_handler_get+0x3c>
   17e14:	f04f 30ff 	mov.w	r0, #4294967295
   17e18:	e7db      	b.n	17dd2 <datagram_handler_get+0x42>
   17e1a:	bf00      	nop

00017e1c <datagram_handler_available>:
   17e1c:	b508      	push	{r3, lr}
   17e1e:	68c0      	ldr	r0, [r0, #12]
   17e20:	f7fc fb4c 	bl	144bc <linked_list_peek>
   17e24:	b108      	cbz	r0, 17e2a <datagram_handler_available+0xe>
   17e26:	6880      	ldr	r0, [r0, #8]
   17e28:	bd08      	pop	{r3, pc}
   17e2a:	f04f 30ff 	mov.w	r0, #4294967295
   17e2e:	bd08      	pop	{r3, pc}

00017e30 <datagram_handler_flush>:
   17e30:	b530      	push	{r4, r5, lr}
   17e32:	4605      	mov	r5, r0
   17e34:	68c0      	ldr	r0, [r0, #12]
   17e36:	b085      	sub	sp, #20
   17e38:	b9a8      	cbnz	r0, 17e66 <datagram_handler_flush+0x36>
   17e3a:	e01a      	b.n	17e72 <datagram_handler_flush+0x42>
   17e3c:	68e8      	ldr	r0, [r5, #12]
   17e3e:	f7fc fb33 	bl	144a8 <linked_list_pop>
   17e42:	4604      	mov	r4, r0
   17e44:	b170      	cbz	r0, 17e64 <datagram_handler_flush+0x34>
   17e46:	e9d0 0101 	ldrd	r0, r1, [r0, #4]
   17e4a:	e9d4 3203 	ldrd	r3, r2, [r4, #12]
   17e4e:	e9cd 0100 	strd	r0, r1, [sp]
   17e52:	e9cd 2302 	strd	r2, r3, [sp, #8]
   17e56:	e9d5 3101 	ldrd	r3, r1, [r5, #4]
   17e5a:	4668      	mov	r0, sp
   17e5c:	4798      	blx	r3
   17e5e:	4620      	mov	r0, r4
   17e60:	f7f9 f84e 	bl	10f00 <nrf_free>
   17e64:	68e8      	ldr	r0, [r5, #12]
   17e66:	f7fc fb2f 	bl	144c8 <linked_list_size_get>
   17e6a:	2800      	cmp	r0, #0
   17e6c:	d1e6      	bne.n	17e3c <datagram_handler_flush+0xc>
   17e6e:	b005      	add	sp, #20
   17e70:	bd30      	pop	{r4, r5, pc}
   17e72:	2008      	movs	r0, #8
   17e74:	b005      	add	sp, #20
   17e76:	bd30      	pop	{r4, r5, pc}

00017e78 <datagram_handler_free>:
   17e78:	b530      	push	{r4, r5, lr}
   17e7a:	4605      	mov	r5, r0
   17e7c:	68c0      	ldr	r0, [r0, #12]
   17e7e:	b085      	sub	sp, #20
   17e80:	b9a0      	cbnz	r0, 17eac <datagram_handler_free+0x34>
   17e82:	e01c      	b.n	17ebe <datagram_handler_free+0x46>
   17e84:	f7fc fb10 	bl	144a8 <linked_list_pop>
   17e88:	4604      	mov	r4, r0
   17e8a:	b170      	cbz	r0, 17eaa <datagram_handler_free+0x32>
   17e8c:	e9d0 0101 	ldrd	r0, r1, [r0, #4]
   17e90:	e9d4 3203 	ldrd	r3, r2, [r4, #12]
   17e94:	e9cd 0100 	strd	r0, r1, [sp]
   17e98:	e9cd 2302 	strd	r2, r3, [sp, #8]
   17e9c:	e9d5 3101 	ldrd	r3, r1, [r5, #4]
   17ea0:	4668      	mov	r0, sp
   17ea2:	4798      	blx	r3
   17ea4:	4620      	mov	r0, r4
   17ea6:	f7f9 f82b 	bl	10f00 <nrf_free>
   17eaa:	68e8      	ldr	r0, [r5, #12]
   17eac:	f7fc fb0c 	bl	144c8 <linked_list_size_get>
   17eb0:	4604      	mov	r4, r0
   17eb2:	68e8      	ldr	r0, [r5, #12]
   17eb4:	2c00      	cmp	r4, #0
   17eb6:	d1e5      	bne.n	17e84 <datagram_handler_free+0xc>
   17eb8:	f7f9 f822 	bl	10f00 <nrf_free>
   17ebc:	60ec      	str	r4, [r5, #12]
   17ebe:	b005      	add	sp, #20
   17ec0:	bd30      	pop	{r4, r5, pc}
   17ec2:	bf00      	nop

00017ec4 <null_handler_init>:
   17ec4:	2000      	movs	r0, #0
   17ec6:	4770      	bx	lr

00017ec8 <null_handler_put>:
   17ec8:	b510      	push	{r4, lr}
   17eca:	460c      	mov	r4, r1
   17ecc:	e9d0 3101 	ldrd	r3, r1, [r0, #4]
   17ed0:	4620      	mov	r0, r4
   17ed2:	4798      	blx	r3
   17ed4:	6860      	ldr	r0, [r4, #4]
   17ed6:	bd10      	pop	{r4, pc}

00017ed8 <null_handler_get>:
   17ed8:	f04f 30ff 	mov.w	r0, #4294967295
   17edc:	4770      	bx	lr
   17ede:	bf00      	nop

00017ee0 <null_handler_available>:
   17ee0:	f04f 30ff 	mov.w	r0, #4294967295
   17ee4:	4770      	bx	lr
   17ee6:	bf00      	nop

00017ee8 <null_handler_flush>:
   17ee8:	2000      	movs	r0, #0
   17eea:	4770      	bx	lr

00017eec <null_handler_free>:
   17eec:	4770      	bx	lr
   17eee:	bf00      	nop

00017ef0 <packet_handler_create>:
   17ef0:	2801      	cmp	r0, #1
   17ef2:	b538      	push	{r3, r4, r5, lr}
   17ef4:	460d      	mov	r5, r1
   17ef6:	4614      	mov	r4, r2
   17ef8:	d00d      	beq.n	17f16 <packet_handler_create+0x26>
   17efa:	db11      	blt.n	17f20 <packet_handler_create+0x30>
   17efc:	2803      	cmp	r0, #3
   17efe:	dc0f      	bgt.n	17f20 <packet_handler_create+0x30>
   17f00:	2010      	movs	r0, #16
   17f02:	f7f8 fff3 	bl	10eec <nrf_malloc>
   17f06:	2218      	movs	r2, #24
   17f08:	b120      	cbz	r0, 17f14 <packet_handler_create+0x24>
   17f0a:	4b08      	ldr	r3, [pc, #32]	; (17f2c <packet_handler_create+0x3c>)
   17f0c:	6045      	str	r5, [r0, #4]
   17f0e:	4413      	add	r3, r2
   17f10:	6084      	str	r4, [r0, #8]
   17f12:	6003      	str	r3, [r0, #0]
   17f14:	bd38      	pop	{r3, r4, r5, pc}
   17f16:	2014      	movs	r0, #20
   17f18:	f7f8 ffe8 	bl	10eec <nrf_malloc>
   17f1c:	2230      	movs	r2, #48	; 0x30
   17f1e:	e7f3      	b.n	17f08 <packet_handler_create+0x18>
   17f20:	200c      	movs	r0, #12
   17f22:	f7f8 ffe3 	bl	10eec <nrf_malloc>
   17f26:	2200      	movs	r2, #0
   17f28:	e7ee      	b.n	17f08 <packet_handler_create+0x18>
   17f2a:	bf00      	nop
   17f2c:	0001c520 	.word	0x0001c520

00017f30 <packet_handler_delete>:
   17f30:	b510      	push	{r4, lr}
   17f32:	4604      	mov	r4, r0
   17f34:	6803      	ldr	r3, [r0, #0]
   17f36:	691b      	ldr	r3, [r3, #16]
   17f38:	4798      	blx	r3
   17f3a:	6823      	ldr	r3, [r4, #0]
   17f3c:	4620      	mov	r0, r4
   17f3e:	695b      	ldr	r3, [r3, #20]
   17f40:	4798      	blx	r3
   17f42:	4620      	mov	r0, r4
   17f44:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   17f48:	f7f8 bfda 	b.w	10f00 <nrf_free>

00017f4c <stream_handler_init>:
   17f4c:	b510      	push	{r4, lr}
   17f4e:	4604      	mov	r4, r0
   17f50:	200c      	movs	r0, #12
   17f52:	f7f8 ffcb 	bl	10eec <nrf_malloc>
   17f56:	60e0      	str	r0, [r4, #12]
   17f58:	b128      	cbz	r0, 17f66 <stream_handler_init+0x1a>
   17f5a:	2300      	movs	r3, #0
   17f5c:	6123      	str	r3, [r4, #16]
   17f5e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   17f62:	f7fc ba81 	b.w	14468 <linked_list_init>
   17f66:	2004      	movs	r0, #4
   17f68:	bd10      	pop	{r4, pc}
   17f6a:	bf00      	nop

00017f6c <stream_handler_put>:
   17f6c:	b570      	push	{r4, r5, r6, lr}
   17f6e:	4606      	mov	r6, r0
   17f70:	2014      	movs	r0, #20
   17f72:	460d      	mov	r5, r1
   17f74:	f7f8 ffba 	bl	10eec <nrf_malloc>
   17f78:	b178      	cbz	r0, 17f9a <stream_handler_put+0x2e>
   17f7a:	682b      	ldr	r3, [r5, #0]
   17f7c:	4604      	mov	r4, r0
   17f7e:	6043      	str	r3, [r0, #4]
   17f80:	686b      	ldr	r3, [r5, #4]
   17f82:	4601      	mov	r1, r0
   17f84:	6083      	str	r3, [r0, #8]
   17f86:	68eb      	ldr	r3, [r5, #12]
   17f88:	60c3      	str	r3, [r0, #12]
   17f8a:	68ab      	ldr	r3, [r5, #8]
   17f8c:	6103      	str	r3, [r0, #16]
   17f8e:	68f0      	ldr	r0, [r6, #12]
   17f90:	f7fc fa74 	bl	1447c <linked_list_push>
   17f94:	b920      	cbnz	r0, 17fa0 <stream_handler_put+0x34>
   17f96:	6868      	ldr	r0, [r5, #4]
   17f98:	bd70      	pop	{r4, r5, r6, pc}
   17f9a:	f04f 30ff 	mov.w	r0, #4294967295
   17f9e:	bd70      	pop	{r4, r5, r6, pc}
   17fa0:	4620      	mov	r0, r4
   17fa2:	f7f8 ffad 	bl	10f00 <nrf_free>
   17fa6:	f04f 30ff 	mov.w	r0, #4294967295
   17faa:	bd70      	pop	{r4, r5, r6, pc}

00017fac <stream_handler_get>:
   17fac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17fb0:	4682      	mov	sl, r0
   17fb2:	b087      	sub	sp, #28
   17fb4:	68c0      	ldr	r0, [r0, #12]
   17fb6:	4689      	mov	r9, r1
   17fb8:	4693      	mov	fp, r2
   17fba:	f7fc fa7f 	bl	144bc <linked_list_peek>
   17fbe:	2800      	cmp	r0, #0
   17fc0:	d072      	beq.n	180a8 <stream_handler_get+0xfc>
   17fc2:	4605      	mov	r5, r0
   17fc4:	f8d9 0008 	ldr.w	r0, [r9, #8]
   17fc8:	b120      	cbz	r0, 17fd4 <stream_handler_get+0x28>
   17fca:	692b      	ldr	r3, [r5, #16]
   17fcc:	b113      	cbz	r3, 17fd4 <stream_handler_get+0x28>
   17fce:	68ea      	ldr	r2, [r5, #12]
   17fd0:	2a00      	cmp	r2, #0
   17fd2:	d15c      	bne.n	1808e <stream_handler_get+0xe2>
   17fd4:	2300      	movs	r3, #0
   17fd6:	f8c9 300c 	str.w	r3, [r9, #12]
   17fda:	f8d9 2000 	ldr.w	r2, [r9]
   17fde:	f8d9 8004 	ldr.w	r8, [r9, #4]
   17fe2:	f8da 1010 	ldr.w	r1, [sl, #16]
   17fe6:	9201      	str	r2, [sp, #4]
   17fe8:	f1b8 0f00 	cmp.w	r8, #0
   17fec:	d05a      	beq.n	180a4 <stream_handler_get+0xf8>
   17fee:	f00b 0308 	and.w	r3, fp, #8
   17ff2:	2400      	movs	r4, #0
   17ff4:	9300      	str	r3, [sp, #0]
   17ff6:	e010      	b.n	1801a <stream_handler_get+0x6e>
   17ff8:	f8da 3010 	ldr.w	r3, [sl, #16]
   17ffc:	443b      	add	r3, r7
   17ffe:	f8ca 3010 	str.w	r3, [sl, #16]
   18002:	4628      	mov	r0, r5
   18004:	f7fc fa62 	bl	144cc <linked_list_get_next>
   18008:	443c      	add	r4, r7
   1800a:	4605      	mov	r5, r0
   1800c:	2800      	cmp	r0, #0
   1800e:	d038      	beq.n	18082 <stream_handler_get+0xd6>
   18010:	45a0      	cmp	r8, r4
   18012:	d936      	bls.n	18082 <stream_handler_get+0xd6>
   18014:	2100      	movs	r1, #0
   18016:	f8d9 2000 	ldr.w	r2, [r9]
   1801a:	68ae      	ldr	r6, [r5, #8]
   1801c:	eba8 0b04 	sub.w	fp, r8, r4
   18020:	1a76      	subs	r6, r6, r1
   18022:	455e      	cmp	r6, fp
   18024:	4637      	mov	r7, r6
   18026:	bf28      	it	cs
   18028:	465f      	movcs	r7, fp
   1802a:	b132      	cbz	r2, 1803a <stream_handler_get+0x8e>
   1802c:	6868      	ldr	r0, [r5, #4]
   1802e:	9b01      	ldr	r3, [sp, #4]
   18030:	4401      	add	r1, r0
   18032:	463a      	mov	r2, r7
   18034:	1918      	adds	r0, r3, r4
   18036:	f002 fbf6 	bl	1a826 <memcpy>
   1803a:	9b00      	ldr	r3, [sp, #0]
   1803c:	2b00      	cmp	r3, #0
   1803e:	d1e0      	bne.n	18002 <stream_handler_get+0x56>
   18040:	455e      	cmp	r6, fp
   18042:	d8d9      	bhi.n	17ff8 <stream_handler_get+0x4c>
   18044:	f8da 000c 	ldr.w	r0, [sl, #12]
   18048:	f7fc fa2e 	bl	144a8 <linked_list_pop>
   1804c:	4606      	mov	r6, r0
   1804e:	b170      	cbz	r0, 1806e <stream_handler_get+0xc2>
   18050:	e9d0 2301 	ldrd	r2, r3, [r0, #4]
   18054:	e9d0 0103 	ldrd	r0, r1, [r0, #12]
   18058:	e9cd 2302 	strd	r2, r3, [sp, #8]
   1805c:	e9cd 1004 	strd	r1, r0, [sp, #16]
   18060:	e9da 3101 	ldrd	r3, r1, [sl, #4]
   18064:	a802      	add	r0, sp, #8
   18066:	4798      	blx	r3
   18068:	4630      	mov	r0, r6
   1806a:	f7f8 ff49 	bl	10f00 <nrf_free>
   1806e:	2300      	movs	r3, #0
   18070:	4628      	mov	r0, r5
   18072:	f8ca 3010 	str.w	r3, [sl, #16]
   18076:	f7fc fa29 	bl	144cc <linked_list_get_next>
   1807a:	443c      	add	r4, r7
   1807c:	4605      	mov	r5, r0
   1807e:	2800      	cmp	r0, #0
   18080:	d1c6      	bne.n	18010 <stream_handler_get+0x64>
   18082:	4620      	mov	r0, r4
   18084:	f8c9 4004 	str.w	r4, [r9, #4]
   18088:	b007      	add	sp, #28
   1808a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1808e:	f8d9 300c 	ldr.w	r3, [r9, #12]
   18092:	429a      	cmp	r2, r3
   18094:	bf28      	it	cs
   18096:	461a      	movcs	r2, r3
   18098:	f8c9 200c 	str.w	r2, [r9, #12]
   1809c:	6929      	ldr	r1, [r5, #16]
   1809e:	f002 fbc2 	bl	1a826 <memcpy>
   180a2:	e79a      	b.n	17fda <stream_handler_get+0x2e>
   180a4:	4644      	mov	r4, r8
   180a6:	e7ec      	b.n	18082 <stream_handler_get+0xd6>
   180a8:	f04f 30ff 	mov.w	r0, #4294967295
   180ac:	e7ec      	b.n	18088 <stream_handler_get+0xdc>
   180ae:	bf00      	nop

000180b0 <stream_handler_available>:
   180b0:	b510      	push	{r4, lr}
   180b2:	4604      	mov	r4, r0
   180b4:	68c0      	ldr	r0, [r0, #12]
   180b6:	f7fc fa01 	bl	144bc <linked_list_peek>
   180ba:	b150      	cbz	r0, 180d2 <stream_handler_available+0x22>
   180bc:	6924      	ldr	r4, [r4, #16]
   180be:	4264      	negs	r4, r4
   180c0:	6883      	ldr	r3, [r0, #8]
   180c2:	441c      	add	r4, r3
   180c4:	f7fc fa02 	bl	144cc <linked_list_get_next>
   180c8:	2800      	cmp	r0, #0
   180ca:	d1f9      	bne.n	180c0 <stream_handler_available+0x10>
   180cc:	ea24 70e4 	bic.w	r0, r4, r4, asr #31
   180d0:	bd10      	pop	{r4, pc}
   180d2:	f04f 30ff 	mov.w	r0, #4294967295
   180d6:	bd10      	pop	{r4, pc}

000180d8 <stream_handler_flush>:
   180d8:	b530      	push	{r4, r5, lr}
   180da:	4605      	mov	r5, r0
   180dc:	68c0      	ldr	r0, [r0, #12]
   180de:	b085      	sub	sp, #20
   180e0:	b9a8      	cbnz	r0, 1810e <stream_handler_flush+0x36>
   180e2:	e01a      	b.n	1811a <stream_handler_flush+0x42>
   180e4:	68e8      	ldr	r0, [r5, #12]
   180e6:	f7fc f9df 	bl	144a8 <linked_list_pop>
   180ea:	4604      	mov	r4, r0
   180ec:	b170      	cbz	r0, 1810c <stream_handler_flush+0x34>
   180ee:	e9d0 0101 	ldrd	r0, r1, [r0, #4]
   180f2:	e9d4 3203 	ldrd	r3, r2, [r4, #12]
   180f6:	e9cd 0100 	strd	r0, r1, [sp]
   180fa:	e9cd 2302 	strd	r2, r3, [sp, #8]
   180fe:	e9d5 3101 	ldrd	r3, r1, [r5, #4]
   18102:	4668      	mov	r0, sp
   18104:	4798      	blx	r3
   18106:	4620      	mov	r0, r4
   18108:	f7f8 fefa 	bl	10f00 <nrf_free>
   1810c:	68e8      	ldr	r0, [r5, #12]
   1810e:	f7fc f9db 	bl	144c8 <linked_list_size_get>
   18112:	2800      	cmp	r0, #0
   18114:	d1e6      	bne.n	180e4 <stream_handler_flush+0xc>
   18116:	b005      	add	sp, #20
   18118:	bd30      	pop	{r4, r5, pc}
   1811a:	2008      	movs	r0, #8
   1811c:	b005      	add	sp, #20
   1811e:	bd30      	pop	{r4, r5, pc}

00018120 <stream_handler_free>:
   18120:	b530      	push	{r4, r5, lr}
   18122:	4605      	mov	r5, r0
   18124:	68c0      	ldr	r0, [r0, #12]
   18126:	b085      	sub	sp, #20
   18128:	b9a0      	cbnz	r0, 18154 <stream_handler_free+0x34>
   1812a:	e01c      	b.n	18166 <stream_handler_free+0x46>
   1812c:	f7fc f9bc 	bl	144a8 <linked_list_pop>
   18130:	4604      	mov	r4, r0
   18132:	b170      	cbz	r0, 18152 <stream_handler_free+0x32>
   18134:	e9d0 0101 	ldrd	r0, r1, [r0, #4]
   18138:	e9d4 3203 	ldrd	r3, r2, [r4, #12]
   1813c:	e9cd 0100 	strd	r0, r1, [sp]
   18140:	e9cd 2302 	strd	r2, r3, [sp, #8]
   18144:	e9d5 3101 	ldrd	r3, r1, [r5, #4]
   18148:	4668      	mov	r0, sp
   1814a:	4798      	blx	r3
   1814c:	4620      	mov	r0, r4
   1814e:	f7f8 fed7 	bl	10f00 <nrf_free>
   18152:	68e8      	ldr	r0, [r5, #12]
   18154:	f7fc f9b8 	bl	144c8 <linked_list_size_get>
   18158:	4604      	mov	r4, r0
   1815a:	68e8      	ldr	r0, [r5, #12]
   1815c:	2c00      	cmp	r4, #0
   1815e:	d1e5      	bne.n	1812c <stream_handler_free+0xc>
   18160:	f7f8 fece 	bl	10f00 <nrf_free>
   18164:	60ec      	str	r4, [r5, #12]
   18166:	b005      	add	sp, #20
   18168:	bd30      	pop	{r4, r5, pc}
   1816a:	bf00      	nop

0001816c <SystemInit>:
    
    /* Enable the FPU if the compiler used floating point unit instructions. __FPU_USED is a MACRO defined by the
    * compiler. Since the FPU consumes energy, remember to disable FPU use in the compiler if floating point unit
    * operations are not used in your code. */
    #if (__FPU_USED == 1)
      SCB->CPACR |= (3UL << 20) | (3UL << 22);
   1816c:	4a07      	ldr	r2, [pc, #28]	; (1818c <SystemInit+0x20>)
   1816e:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
   18172:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
   18176:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  __ASM volatile ("dsb 0xF":::"memory");
   1817a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   1817e:	f3bf 8f6f 	isb	sy
    SystemCoreClock = __SYSTEM_CLOCK;
   18182:	4b03      	ldr	r3, [pc, #12]	; (18190 <SystemInit+0x24>)
   18184:	4a03      	ldr	r2, [pc, #12]	; (18194 <SystemInit+0x28>)
   18186:	601a      	str	r2, [r3, #0]
      __DSB();
      __ISB();
    #endif
    
    SystemCoreClockUpdate();
}
   18188:	4770      	bx	lr
   1818a:	bf00      	nop
   1818c:	e000ed00 	.word	0xe000ed00
   18190:	20027fac 	.word	0x20027fac
   18194:	03d09000 	.word	0x03d09000

00018198 <nrfx_uarte_init>:
}

nrfx_err_t nrfx_uarte_init(nrfx_uarte_t const *        p_instance,
                           nrfx_uarte_config_t const * p_config,
                           nrfx_uarte_event_handler_t  event_handler)
{
   18198:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1819c:	4606      	mov	r6, r0
    NRFX_ASSERT(p_config);
    uarte_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
   1819e:	7904      	ldrb	r4, [r0, #4]
    nrfx_err_t err_code = NRFX_SUCCESS;

    if (p_cb->state != NRFX_DRV_STATE_UNINITIALIZED)
   181a0:	2024      	movs	r0, #36	; 0x24
   181a2:	4d4f      	ldr	r5, [pc, #316]	; (182e0 <nrfx_uarte_init+0x148>)
   181a4:	fb00 5004 	mla	r0, r0, r4, r5
   181a8:	f890 0020 	ldrb.w	r0, [r0, #32]
   181ac:	2800      	cmp	r0, #0
   181ae:	f040 8094 	bne.w	182da <nrfx_uarte_init+0x142>
    if (p_config->pseltxd != NRF_UARTE_PSEL_DISCONNECTED)
   181b2:	680f      	ldr	r7, [r1, #0]
   181b4:	1c7b      	adds	r3, r7, #1
   181b6:	d009      	beq.n	181cc <nrfx_uarte_init+0x34>
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   181b8:	2301      	movs	r3, #1
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
   181ba:	f04f 0c03 	mov.w	ip, #3
    p_reg->OUTSET = set_mask;
   181be:	4849      	ldr	r0, [pc, #292]	; (182e4 <nrfx_uarte_init+0x14c>)
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   181c0:	40bb      	lsls	r3, r7
    p_reg->OUTSET = set_mask;
   181c2:	6083      	str	r3, [r0, #8]
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
   181c4:	f107 0380 	add.w	r3, r7, #128	; 0x80
   181c8:	f840 c023 	str.w	ip, [r0, r3, lsl #2]
    if (p_config->pselrxd != NRF_UARTE_PSEL_DISCONNECTED)
   181cc:	f8d1 c004 	ldr.w	ip, [r1, #4]
                    | (uint32_t)p_cfg->hwfc;
   181d0:	f891 801b 	ldrb.w	r8, [r1, #27]
   181d4:	f1bc 3fff 	cmp.w	ip, #4294967295
   181d8:	bf1f      	itttt	ne
   181da:	f04f 0e00 	movne.w	lr, #0
   181de:	4841      	ldrne	r0, [pc, #260]	; (182e4 <nrfx_uarte_init+0x14c>)
   181e0:	f10c 0380 	addne.w	r3, ip, #128	; 0x80
   181e4:	f840 e023 	strne.w	lr, [r0, r3, lsl #2]
    nrf_uarte_baudrate_set(p_instance->p_reg, p_config->baudrate);
   181e8:	6948      	ldr	r0, [r1, #20]
   181ea:	6833      	ldr	r3, [r6, #0]
   181ec:	f891 e019 	ldrb.w	lr, [r1, #25]
    p_reg->BAUDRATE = baudrate;
   181f0:	f8c3 0524 	str.w	r0, [r3, #1316]	; 0x524
                    | (uint32_t)p_cfg->hwfc;
   181f4:	7e88      	ldrb	r0, [r1, #26]
    if (p_config->hal_cfg.hwfc == NRF_UARTE_HWFC_ENABLED)
   181f6:	f1be 0f01 	cmp.w	lr, #1
   181fa:	ea40 0008 	orr.w	r0, r0, r8
   181fe:	ea4e 0000 	orr.w	r0, lr, r0
    p_reg->CONFIG = (uint32_t)p_cfg->parity
   18202:	f8c3 056c 	str.w	r0, [r3, #1388]	; 0x56c
    p_reg->PSEL.TXD = pseltxd;
   18206:	f8c3 750c 	str.w	r7, [r3, #1292]	; 0x50c
    p_reg->PSEL.RXD = pselrxd;
   1820a:	f8c3 c514 	str.w	ip, [r3, #1300]	; 0x514
   1820e:	d120      	bne.n	18252 <nrfx_uarte_init+0xba>
        if (p_config->pselcts != NRF_UARTE_PSEL_DISCONNECTED)
   18210:	688f      	ldr	r7, [r1, #8]
   18212:	1c78      	adds	r0, r7, #1
   18214:	bf1f      	itttt	ne
   18216:	f04f 0e00 	movne.w	lr, #0
   1821a:	f8df c0c8 	ldrne.w	ip, [pc, #200]	; 182e4 <nrfx_uarte_init+0x14c>
   1821e:	f107 0080 	addne.w	r0, r7, #128	; 0x80
   18222:	f84c e020 	strne.w	lr, [ip, r0, lsl #2]
        if (p_config->pselrts != NRF_UARTE_PSEL_DISCONNECTED)
   18226:	68c8      	ldr	r0, [r1, #12]
   18228:	f1b0 3fff 	cmp.w	r0, #4294967295
   1822c:	d00d      	beq.n	1824a <nrfx_uarte_init+0xb2>
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   1822e:	f04f 0c01 	mov.w	ip, #1
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
   18232:	f04f 0803 	mov.w	r8, #3
    p_reg->OUTSET = set_mask;
   18236:	f8df e0ac 	ldr.w	lr, [pc, #172]	; 182e4 <nrfx_uarte_init+0x14c>
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   1823a:	fa0c fc00 	lsl.w	ip, ip, r0
    p_reg->OUTSET = set_mask;
   1823e:	f8ce c008 	str.w	ip, [lr, #8]
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
   18242:	f100 0c80 	add.w	ip, r0, #128	; 0x80
   18246:	f84e 802c 	str.w	r8, [lr, ip, lsl #2]
    p_reg->PSEL.RTS = pselrts;
   1824a:	f8c3 0508 	str.w	r0, [r3, #1288]	; 0x508
    p_reg->PSEL.CTS = pselcts;
   1824e:	f8c3 7510 	str.w	r7, [r3, #1296]	; 0x510
    if (*txenable_reg == 1)
   18252:	f8d3 0568 	ldr.w	r0, [r3, #1384]	; 0x568
        (volatile uint32_t *)(((uint32_t)p_instance->p_reg) + 0x564);
   18256:	f203 5764 	addw	r7, r3, #1380	; 0x564
    if (*txenable_reg == 1)
   1825a:	2801      	cmp	r0, #1
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1825c:	bf08      	it	eq
   1825e:	60d8      	streq	r0, [r3, #12]
    if (*rxenable_reg == 1)
   18260:	f8d3 0564 	ldr.w	r0, [r3, #1380]	; 0x564
   18264:	2801      	cmp	r0, #1
   18266:	d10d      	bne.n	18284 <nrfx_uarte_init+0xec>
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
   18268:	f04f 0c08 	mov.w	ip, #8
   1826c:	f8c3 c500 	str.w	ip, [r3, #1280]	; 0x500
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   18270:	6058      	str	r0, [r3, #4]
        while (*rxenable_reg)
   18272:	6838      	ldr	r0, [r7, #0]
   18274:	2800      	cmp	r0, #0
   18276:	d1fc      	bne.n	18272 <nrfx_uarte_init+0xda>
    uint32_t errsrc_mask = p_reg->ERRORSRC;
   18278:	f8d3 7480 	ldr.w	r7, [r3, #1152]	; 0x480
    p_reg->ERRORSRC = errsrc_mask;
   1827c:	f8c3 7480 	str.w	r7, [r3, #1152]	; 0x480
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
   18280:	f8c3 0500 	str.w	r0, [r3, #1280]	; 0x500

    apply_config(p_instance, p_config);

    apply_workaround_for_enable_anomaly(p_instance);

    p_cb->handler   = event_handler;
   18284:	2324      	movs	r3, #36	; 0x24
   18286:	4363      	muls	r3, r4
    p_cb->p_context = p_config->p_context;
   18288:	6909      	ldr	r1, [r1, #16]
    p_cb->handler   = event_handler;
   1828a:	18e8      	adds	r0, r5, r3
   1828c:	6042      	str	r2, [r0, #4]
    p_cb->p_context = p_config->p_context;
   1828e:	50e9      	str	r1, [r5, r3]

    if (p_cb->handler)
   18290:	b192      	cbz	r2, 182b8 <nrfx_uarte_init+0x120>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   18292:	2300      	movs	r3, #0
    {
        interrupts_enable(p_instance, p_config->interrupt_priority);
   18294:	6830      	ldr	r0, [r6, #0]
   18296:	f8c0 3110 	str.w	r3, [r0, #272]	; 0x110
   1829a:	f8c0 3120 	str.w	r3, [r0, #288]	; 0x120
   1829e:	f8c0 3124 	str.w	r3, [r0, #292]	; 0x124
   182a2:	f8c0 3144 	str.w	r3, [r0, #324]	; 0x144
   182a6:	f8c0 3158 	str.w	r3, [r0, #344]	; 0x158
    p_reg->INTENSET = mask;
   182aa:	4b0f      	ldr	r3, [pc, #60]	; (182e8 <nrfx_uarte_init+0x150>)
   182ac:	f8c0 3304 	str.w	r3, [r0, #772]	; 0x304
    NRFX_IRQ_ENABLE(nrfx_get_irq_number((void *)p_instance->p_reg));
   182b0:	f340 3007 	sbfx	r0, r0, #12, #8
   182b4:	f7f5 fae6 	bl	d884 <arch_irq_enable>
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
   182b8:	2208      	movs	r2, #8
    }

    nrf_uarte_enable(p_instance->p_reg);
   182ba:	6833      	ldr	r3, [r6, #0]
    p_cb->tx_buffer_length           = 0;
    p_cb->state                      = NRFX_DRV_STATE_INITIALIZED;
    NRFX_LOG_WARNING("Function: %s, error code: %s.",
                     __func__,
                     NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
   182bc:	480b      	ldr	r0, [pc, #44]	; (182ec <nrfx_uarte_init+0x154>)
   182be:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
    p_cb->rx_buffer_length           = 0;
   182c2:	2324      	movs	r3, #36	; 0x24
   182c4:	2200      	movs	r2, #0
   182c6:	fb03 5304 	mla	r3, r3, r4, r5
    p_cb->rx_secondary_buffer_length = 0;
   182ca:	e9c3 2206 	strd	r2, r2, [r3, #24]
    p_cb->tx_buffer_length           = 0;
   182ce:	615a      	str	r2, [r3, #20]
    p_cb->state                      = NRFX_DRV_STATE_INITIALIZED;
   182d0:	2201      	movs	r2, #1
   182d2:	f883 2020 	strb.w	r2, [r3, #32]
}
   182d6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        return err_code;
   182da:	4805      	ldr	r0, [pc, #20]	; (182f0 <nrfx_uarte_init+0x158>)
   182dc:	e7fb      	b.n	182d6 <nrfx_uarte_init+0x13e>
   182de:	bf00      	nop
   182e0:	200209dc 	.word	0x200209dc
   182e4:	40842500 	.word	0x40842500
   182e8:	00420310 	.word	0x00420310
   182ec:	0bad0000 	.word	0x0bad0000
   182f0:	0bad0005 	.word	0x0bad0005

000182f4 <nrfx_uarte_tx>:

#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE bool nrfx_is_in_ram(void const * p_object)
{
    return ((((uint32_t)p_object) & 0xE0000000u) == 0x20000000u);
   182f4:	f001 4360 	and.w	r3, r1, #3758096384	; 0xe0000000

    nrfx_err_t err_code;

    // EasyDMA requires that transfer buffers are placed in DataRAM,
    // signal error if the are not.
    if (!nrfx_is_in_ram(p_data))
   182f8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
{
   182fc:	b5f0      	push	{r4, r5, r6, r7, lr}
    if (!nrfx_is_in_ram(p_data))
   182fe:	d12e      	bne.n	1835e <nrfx_uarte_tx+0x6a>
    return err_code;
}

bool nrfx_uarte_tx_in_progress(nrfx_uarte_t const * p_instance)
{
    return (m_cb[p_instance->drv_inst_idx].tx_buffer_length != 0);
   18300:	2424      	movs	r4, #36	; 0x24
    uarte_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
   18302:	7905      	ldrb	r5, [r0, #4]
    return (m_cb[p_instance->drv_inst_idx].tx_buffer_length != 0);
   18304:	4f19      	ldr	r7, [pc, #100]	; (1836c <nrfx_uarte_tx+0x78>)
   18306:	fb04 7405 	mla	r4, r4, r5, r7
   1830a:	6966      	ldr	r6, [r4, #20]
    if (nrfx_uarte_tx_in_progress(p_instance))
   1830c:	bb4e      	cbnz	r6, 18362 <nrfx_uarte_tx+0x6e>
    nrf_uarte_event_clear(p_instance->p_reg, NRF_UARTE_EVENT_ENDTX);
   1830e:	6803      	ldr	r3, [r0, #0]
    p_cb->tx_buffer_length = length;
   18310:	6162      	str	r2, [r4, #20]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   18312:	f8c3 6120 	str.w	r6, [r3, #288]	; 0x120
   18316:	f8c3 6158 	str.w	r6, [r3, #344]	; 0x158
    nrf_uarte_tx_buffer_set(p_instance->p_reg, p_cb->p_tx_buffer, p_cb->tx_buffer_length);
   1831a:	6962      	ldr	r2, [r4, #20]
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   1831c:	f8c3 1544 	str.w	r1, [r3, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
   18320:	f8c3 2548 	str.w	r2, [r3, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   18324:	2201      	movs	r2, #1
    p_cb->p_tx_buffer      = p_data;
   18326:	60a1      	str	r1, [r4, #8]
   18328:	609a      	str	r2, [r3, #8]
    if (p_cb->handler == NULL)
   1832a:	6862      	ldr	r2, [r4, #4]
   1832c:	b9da      	cbnz	r2, 18366 <nrfx_uarte_tx+0x72>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1832e:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
   18332:	f8d3 2158 	ldr.w	r2, [r3, #344]	; 0x158
        while ((!endtx) && (!txstopped));
   18336:	b919      	cbnz	r1, 18340 <nrfx_uarte_tx+0x4c>
   18338:	2a00      	cmp	r2, #0
   1833a:	d0f8      	beq.n	1832e <nrfx_uarte_tx+0x3a>
            err_code = NRFX_ERROR_FORBIDDEN;
   1833c:	480c      	ldr	r0, [pc, #48]	; (18370 <nrfx_uarte_tx+0x7c>)
   1833e:	e008      	b.n	18352 <nrfx_uarte_tx+0x5e>
        if (txstopped)
   18340:	2a00      	cmp	r2, #0
   18342:	d1fb      	bne.n	1833c <nrfx_uarte_tx+0x48>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   18344:	2201      	movs	r2, #1
   18346:	60da      	str	r2, [r3, #12]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   18348:	f8d3 2158 	ldr.w	r2, [r3, #344]	; 0x158
            while (!nrf_uarte_event_check(p_instance->p_reg, NRF_UARTE_EVENT_TXSTOPPED))
   1834c:	2a00      	cmp	r2, #0
   1834e:	d0fb      	beq.n	18348 <nrfx_uarte_tx+0x54>
    err_code = NRFX_SUCCESS;
   18350:	4808      	ldr	r0, [pc, #32]	; (18374 <nrfx_uarte_tx+0x80>)
        p_cb->tx_buffer_length = 0;
   18352:	2324      	movs	r3, #36	; 0x24
   18354:	fb03 7505 	mla	r5, r3, r5, r7
   18358:	2300      	movs	r3, #0
   1835a:	616b      	str	r3, [r5, #20]
}
   1835c:	bdf0      	pop	{r4, r5, r6, r7, pc}
        return err_code;
   1835e:	4806      	ldr	r0, [pc, #24]	; (18378 <nrfx_uarte_tx+0x84>)
   18360:	e7fc      	b.n	1835c <nrfx_uarte_tx+0x68>
        return err_code;
   18362:	4806      	ldr	r0, [pc, #24]	; (1837c <nrfx_uarte_tx+0x88>)
   18364:	e7fa      	b.n	1835c <nrfx_uarte_tx+0x68>
    err_code = NRFX_SUCCESS;
   18366:	4803      	ldr	r0, [pc, #12]	; (18374 <nrfx_uarte_tx+0x80>)
   18368:	e7f8      	b.n	1835c <nrfx_uarte_tx+0x68>
   1836a:	bf00      	nop
   1836c:	200209dc 	.word	0x200209dc
   18370:	0bad0008 	.word	0x0bad0008
   18374:	0bad0000 	.word	0x0bad0000
   18378:	0bad000a 	.word	0x0bad000a
   1837c:	0bad000b 	.word	0x0bad000b

00018380 <z_sys_device_do_config_level>:
 * off and the next one begins.
 *
 * @param level init level to run.
 */
void z_sys_device_do_config_level(s32_t level)
{
   18380:	b570      	push	{r4, r5, r6, lr}
		retval = device_conf->init(info);
		if (retval != 0) {
			/* Initialization failed. Clear the API struct so that
			 * device_get_binding() will not succeed for it.
			 */
			info->driver_api = NULL;
   18382:	2600      	movs	r6, #0
	for (info = config_levels[level]; info < config_levels[level+1];
   18384:	4b08      	ldr	r3, [pc, #32]	; (183a8 <z_sys_device_do_config_level+0x28>)
   18386:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
   1838a:	3001      	adds	r0, #1
   1838c:	f853 5020 	ldr.w	r5, [r3, r0, lsl #2]
   18390:	42a5      	cmp	r5, r4
   18392:	d800      	bhi.n	18396 <z_sys_device_do_config_level+0x16>
		} else {
			z_object_init(info);
		}
	}
}
   18394:	bd70      	pop	{r4, r5, r6, pc}
		retval = device_conf->init(info);
   18396:	6823      	ldr	r3, [r4, #0]
   18398:	4620      	mov	r0, r4
   1839a:	685b      	ldr	r3, [r3, #4]
   1839c:	4798      	blx	r3
		if (retval != 0) {
   1839e:	b100      	cbz	r0, 183a2 <z_sys_device_do_config_level+0x22>
			info->driver_api = NULL;
   183a0:	6066      	str	r6, [r4, #4]
								info++) {
   183a2:	340c      	adds	r4, #12
   183a4:	e7f4      	b.n	18390 <z_sys_device_do_config_level+0x10>
   183a6:	bf00      	nop
   183a8:	0001c568 	.word	0x0001c568

000183ac <z_impl_device_get_binding>:
	/* Split the search into two loops: in the common scenario, where
	 * device names are stored in ROM (and are referenced by the user
	 * with CONFIG_* macros), only cheap pointer comparisons will be
	 * performed.  Reserve string comparisons for a fallback.
	 */
	for (info = __device_init_start; info != __device_init_end; info++) {
   183ac:	4b10      	ldr	r3, [pc, #64]	; (183f0 <z_impl_device_get_binding+0x44>)
{
   183ae:	b570      	push	{r4, r5, r6, lr}
   183b0:	4605      	mov	r5, r0
   183b2:	461e      	mov	r6, r3
	for (info = __device_init_start; info != __device_init_end; info++) {
   183b4:	4c0f      	ldr	r4, [pc, #60]	; (183f4 <z_impl_device_get_binding+0x48>)
   183b6:	429c      	cmp	r4, r3
   183b8:	d104      	bne.n	183c4 <z_impl_device_get_binding+0x18>
		    (info->config->name == name)) {
			return info;
		}
	}

	for (info = __device_init_start; info != __device_init_end; info++) {
   183ba:	4c0e      	ldr	r4, [pc, #56]	; (183f4 <z_impl_device_get_binding+0x48>)
   183bc:	42b4      	cmp	r4, r6
   183be:	d109      	bne.n	183d4 <z_impl_device_get_binding+0x28>
		if (strcmp(name, info->config->name) == 0) {
			return info;
		}
	}

	return NULL;
   183c0:	2400      	movs	r4, #0
   183c2:	e012      	b.n	183ea <z_impl_device_get_binding+0x3e>
		if ((info->driver_api != NULL) &&
   183c4:	6862      	ldr	r2, [r4, #4]
   183c6:	b11a      	cbz	r2, 183d0 <z_impl_device_get_binding+0x24>
		    (info->config->name == name)) {
   183c8:	6822      	ldr	r2, [r4, #0]
		if ((info->driver_api != NULL) &&
   183ca:	6812      	ldr	r2, [r2, #0]
   183cc:	42aa      	cmp	r2, r5
   183ce:	d00c      	beq.n	183ea <z_impl_device_get_binding+0x3e>
	for (info = __device_init_start; info != __device_init_end; info++) {
   183d0:	340c      	adds	r4, #12
   183d2:	e7f0      	b.n	183b6 <z_impl_device_get_binding+0xa>
		if (info->driver_api == NULL) {
   183d4:	6863      	ldr	r3, [r4, #4]
   183d6:	b90b      	cbnz	r3, 183dc <z_impl_device_get_binding+0x30>
	for (info = __device_init_start; info != __device_init_end; info++) {
   183d8:	340c      	adds	r4, #12
   183da:	e7ef      	b.n	183bc <z_impl_device_get_binding+0x10>
		if (strcmp(name, info->config->name) == 0) {
   183dc:	6823      	ldr	r3, [r4, #0]
   183de:	4628      	mov	r0, r5
   183e0:	6819      	ldr	r1, [r3, #0]
   183e2:	f002 f9f5 	bl	1a7d0 <strcmp>
   183e6:	2800      	cmp	r0, #0
   183e8:	d1f6      	bne.n	183d8 <z_impl_device_get_binding+0x2c>
}
   183ea:	4620      	mov	r0, r4
   183ec:	bd70      	pop	{r4, r5, r6, pc}
   183ee:	bf00      	nop
   183f0:	2002818c 	.word	0x2002818c
   183f4:	200280c0 	.word	0x200280c0

000183f8 <device_list_get>:
}

void device_list_get(struct device **device_list, int *device_count)
{

	*device_list = __device_init_start;
   183f8:	4a04      	ldr	r2, [pc, #16]	; (1840c <device_list_get+0x14>)
	*device_count = __device_init_end - __device_init_start;
   183fa:	4b05      	ldr	r3, [pc, #20]	; (18410 <device_list_get+0x18>)
	*device_list = __device_init_start;
   183fc:	6002      	str	r2, [r0, #0]
	*device_count = __device_init_end - __device_init_start;
   183fe:	1a9b      	subs	r3, r3, r2
   18400:	4a04      	ldr	r2, [pc, #16]	; (18414 <device_list_get+0x1c>)
   18402:	109b      	asrs	r3, r3, #2
   18404:	4353      	muls	r3, r2
   18406:	600b      	str	r3, [r1, #0]
}
   18408:	4770      	bx	lr
   1840a:	bf00      	nop
   1840c:	200280c0 	.word	0x200280c0
   18410:	2002818c 	.word	0x2002818c
   18414:	aaaaaaab 	.word	0xaaaaaaab

00018418 <z_impl_z_errno>:
#include <syscalls/z_errno_mrsh.c>

#else
int *z_impl_z_errno(void)
{
	return &_current->errno_var;
   18418:	4b01      	ldr	r3, [pc, #4]	; (18420 <z_impl_z_errno+0x8>)
   1841a:	6898      	ldr	r0, [r3, #8]
}
   1841c:	3054      	adds	r0, #84	; 0x54
   1841e:	4770      	bx	lr
   18420:	20024bc4 	.word	0x20024bc4

00018424 <z_fatal_error>:
	return 0;
#endif
}

void z_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
   18424:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   18428:	4605      	mov	r5, r0
   1842a:	4688      	mov	r8, r1
	return z_impl_k_current_get();
   1842c:	f000 fe68 	bl	19100 <z_impl_k_current_get>
	struct k_thread *thread = k_current_get();

	/* sanitycheck looks for the "ZEPHYR FATAL ERROR" string, don't
	 * change it without also updating sanitycheck
	 */
	LOG_ERR(">>> ZEPHYR FATAL ERROR %d: %s on CPU %d", reason,
   18430:	2201      	movs	r2, #1
   18432:	f04f 0300 	mov.w	r3, #0
   18436:	4c26      	ldr	r4, [pc, #152]	; (184d0 <z_fatal_error+0xac>)
   18438:	f362 0307 	bfi	r3, r2, #0, #8
   1843c:	4a25      	ldr	r2, [pc, #148]	; (184d4 <z_fatal_error+0xb0>)
   1843e:	2d04      	cmp	r5, #4
   18440:	eba4 0402 	sub.w	r4, r4, r2
   18444:	f3c4 04c9 	ubfx	r4, r4, #3, #10
   18448:	bf98      	it	ls
   1844a:	4a23      	ldrls	r2, [pc, #140]	; (184d8 <z_fatal_error+0xb4>)
   1844c:	f364 138f 	bfi	r3, r4, #6, #10
   18450:	f8ad 3000 	strh.w	r3, [sp]
   18454:	4606      	mov	r6, r0
   18456:	f04f 0300 	mov.w	r3, #0
   1845a:	bf94      	ite	ls
   1845c:	f852 2025 	ldrls.w	r2, [r2, r5, lsl #2]
   18460:	4a1e      	ldrhi	r2, [pc, #120]	; (184dc <z_fatal_error+0xb8>)
   18462:	4629      	mov	r1, r5
   18464:	481e      	ldr	r0, [pc, #120]	; (184e0 <z_fatal_error+0xbc>)
   18466:	f001 fd66 	bl	19f36 <log_3>
 * @return true if execution state was in handler mode, before
 *              the current exception occurred, otherwise false.
 */
static ALWAYS_INLINE bool arch_is_in_nested_exception(const z_arch_esf_t *esf)
{
	return (esf->basic.xpsr & IPSR_ISR_Msk) ? (true) : (false);
   1846a:	f8d8 301c 	ldr.w	r3, [r8, #28]
   1846e:	f3c3 0308 	ubfx	r3, r3, #0, #9
	 * an IRQ or exception was being handled, or thread context.
	 *
	 * See #17656
	 */
#if defined(CONFIG_ARCH_HAS_NESTED_EXCEPTION_DETECTION)
	if (arch_is_in_nested_exception(esf)) {
   18472:	b14b      	cbz	r3, 18488 <z_fatal_error+0x64>
		LOG_ERR("Fault during interrupt handling\n");
   18474:	f04f 0100 	mov.w	r1, #0
   18478:	2301      	movs	r3, #1
   1847a:	f363 0107 	bfi	r1, r3, #0, #8
   1847e:	f364 118f 	bfi	r1, r4, #6, #10
   18482:	4818      	ldr	r0, [pc, #96]	; (184e4 <z_fatal_error+0xc0>)
   18484:	f001 fd1e 	bl	19ec4 <log_0>
	}
#endif

	LOG_ERR("Current thread: %p (%s)", thread,
   18488:	f04f 0700 	mov.w	r7, #0
   1848c:	2301      	movs	r3, #1
	const char *thread_name = k_thread_name_get(thread);
   1848e:	4630      	mov	r0, r6
	LOG_ERR("Current thread: %p (%s)", thread,
   18490:	f363 0707 	bfi	r7, r3, #0, #8
   18494:	f364 178f 	bfi	r7, r4, #6, #10
	const char *thread_name = k_thread_name_get(thread);
   18498:	f003 fa6a 	bl	1b970 <k_thread_name_get>
	if (thread_name == NULL || thread_name[0] == '\0') {
   1849c:	b1b0      	cbz	r0, 184cc <z_fatal_error+0xa8>
   1849e:	7802      	ldrb	r2, [r0, #0]
		thread_name = "unknown";
   184a0:	4b11      	ldr	r3, [pc, #68]	; (184e8 <z_fatal_error+0xc4>)
   184a2:	2a00      	cmp	r2, #0
   184a4:	bf08      	it	eq
   184a6:	4618      	moveq	r0, r3
	LOG_ERR("Current thread: %p (%s)", thread,
   184a8:	f7f4 fa4c 	bl	c944 <log_strdup>
   184ac:	463b      	mov	r3, r7
   184ae:	4602      	mov	r2, r0
   184b0:	4631      	mov	r1, r6
   184b2:	480e      	ldr	r0, [pc, #56]	; (184ec <z_fatal_error+0xc8>)
   184b4:	f001 fd27 	bl	19f06 <log_2>
		log_strdup(thread_name_get(thread)));

	k_sys_fatal_error_handler(reason, esf);
   184b8:	4641      	mov	r1, r8
   184ba:	4628      	mov	r0, r5
   184bc:	f7f7 fb2c 	bl	fb18 <k_sys_fatal_error_handler>
	z_impl_k_thread_abort(thread);
   184c0:	4630      	mov	r0, r6
			}
#endif /*CONFIG_ARCH_HAS_NESTED_EXCEPTION_DETECTION */
	}

	k_thread_abort(thread);
}
   184c2:	b002      	add	sp, #8
   184c4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   184c8:	f7f5 be02 	b.w	e0d0 <z_impl_k_thread_abort>
		thread_name = "unknown";
   184cc:	4806      	ldr	r0, [pc, #24]	; (184e8 <z_fatal_error+0xc4>)
   184ce:	e7eb      	b.n	184a8 <z_fatal_error+0x84>
   184d0:	0001c044 	.word	0x0001c044
   184d4:	0001c004 	.word	0x0001c004
   184d8:	0001c580 	.word	0x0001c580
   184dc:	0001cd43 	.word	0x0001cd43
   184e0:	0001cd59 	.word	0x0001cd59
   184e4:	0001cd81 	.word	0x0001cd81
   184e8:	0001cd51 	.word	0x0001cd51
   184ec:	0001cda2 	.word	0x0001cda2

000184f0 <idle>:
#else
#define IDLE_YIELD_IF_COOP() do { } while (false)
#endif

void idle(void *unused1, void *unused2, void *unused3)
{
   184f0:	b508      	push	{r3, lr}
	_kernel.idle = ticks;
   184f2:	4d0b      	ldr	r5, [pc, #44]	; (18520 <idle+0x30>)
	__asm__ volatile(
   184f4:	f04f 0220 	mov.w	r2, #32
   184f8:	f3ef 8311 	mrs	r3, BASEPRI
   184fc:	f382 8811 	msr	BASEPRI, r2
   18500:	f3bf 8f6f 	isb	sy
	s32_t ticks = z_get_next_timeout_expiry();
   18504:	f003 fa5b 	bl	1b9be <z_get_next_timeout_expiry>
	z_set_timeout_expiry((ticks < IDLE_THRESH) ? 1 : ticks, true);
   18508:	2101      	movs	r1, #1
	s32_t ticks = z_get_next_timeout_expiry();
   1850a:	4604      	mov	r4, r0
	z_set_timeout_expiry((ticks < IDLE_THRESH) ? 1 : ticks, true);
   1850c:	2802      	cmp	r0, #2
   1850e:	bfd8      	it	le
   18510:	4608      	movle	r0, r1
   18512:	f003 fa64 	bl	1b9de <z_set_timeout_expiry>
	_kernel.idle = ticks;
   18516:	622c      	str	r4, [r5, #32]
 * @return N/A
 * @req K-CPU-IDLE-001
 */
static inline void k_cpu_idle(void)
{
	arch_cpu_idle();
   18518:	f7f5 f966 	bl	d7e8 <arch_cpu_idle>
   1851c:	e7ea      	b.n	184f4 <idle+0x4>
   1851e:	bf00      	nop
   18520:	20024bc4 	.word	0x20024bc4

00018524 <z_bss_zero>:
 *
 * @return N/A
 */
void z_bss_zero(void)
{
	(void)memset(__bss_start, 0, __bss_end - __bss_start);
   18524:	4802      	ldr	r0, [pc, #8]	; (18530 <z_bss_zero+0xc>)
   18526:	4a03      	ldr	r2, [pc, #12]	; (18534 <z_bss_zero+0x10>)
   18528:	2100      	movs	r1, #0
   1852a:	1a12      	subs	r2, r2, r0
   1852c:	f002 b9a5 	b.w	1a87a <memset>
   18530:	20020000 	.word	0x20020000
   18534:	20025264 	.word	0x20025264

00018538 <z_data_copy>:
 * This routine copies the data section from ROM to RAM.
 *
 * @return N/A
 */
void z_data_copy(void)
{
   18538:	b508      	push	{r3, lr}
	(void)memcpy(&__data_ram_start, &__data_rom_start,
		 __data_ram_end - __data_ram_start);
   1853a:	4806      	ldr	r0, [pc, #24]	; (18554 <z_data_copy+0x1c>)
	(void)memcpy(&__data_ram_start, &__data_rom_start,
   1853c:	4a06      	ldr	r2, [pc, #24]	; (18558 <z_data_copy+0x20>)
   1853e:	4907      	ldr	r1, [pc, #28]	; (1855c <z_data_copy+0x24>)
   18540:	1a12      	subs	r2, r2, r0
   18542:	f002 f970 	bl	1a826 <memcpy>
#else
	(void)memcpy(&_app_smem_start, &_app_smem_rom_start,
		 _app_smem_end - _app_smem_start);
#endif /* CONFIG_STACK_CANARIES */
#endif /* CONFIG_USERSPACE */
}
   18546:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	(void)memcpy(&_ramfunc_ram_start, &_ramfunc_rom_start,
   1854a:	4a05      	ldr	r2, [pc, #20]	; (18560 <z_data_copy+0x28>)
   1854c:	4905      	ldr	r1, [pc, #20]	; (18564 <z_data_copy+0x2c>)
   1854e:	4806      	ldr	r0, [pc, #24]	; (18568 <z_data_copy+0x30>)
   18550:	f002 b969 	b.w	1a826 <memcpy>
   18554:	20027aa8 	.word	0x20027aa8
   18558:	2002829c 	.word	0x2002829c
   1855c:	0001cde1 	.word	0x0001cde1
   18560:	00000000 	.word	0x00000000
   18564:	0001cde0 	.word	0x0001cde0
   18568:	20020000 	.word	0x20020000

0001856c <bg_thread_main>:
	static const unsigned int boot_delay = CONFIG_BOOT_DELAY;
#else
	static const unsigned int boot_delay;
#endif

	z_sys_post_kernel = true;
   1856c:	2201      	movs	r2, #1
{
   1856e:	b508      	push	{r3, lr}
	z_sys_post_kernel = true;
   18570:	4b08      	ldr	r3, [pc, #32]	; (18594 <bg_thread_main+0x28>)

	z_sys_device_do_config_level(_SYS_INIT_LEVEL_POST_KERNEL);
   18572:	2002      	movs	r0, #2
	z_sys_post_kernel = true;
   18574:	701a      	strb	r2, [r3, #0]
	z_sys_device_do_config_level(_SYS_INIT_LEVEL_POST_KERNEL);
   18576:	f7ff ff03 	bl	18380 <z_sys_device_do_config_level>
			KERNEL_VERSION_STRING, BOOT_DELAY_BANNER);
#endif
#endif

	/* Final init level before app starts */
	z_sys_device_do_config_level(_SYS_INIT_LEVEL_APPLICATION);
   1857a:	2003      	movs	r0, #3
   1857c:	f7ff ff00 	bl	18380 <z_sys_device_do_config_level>
	extern void __do_init_array_aux(void);
	__do_global_ctors_aux();
	__do_init_array_aux();
#endif

	z_init_static_threads();
   18580:	f000 feba 	bl	192f8 <z_init_static_threads>
	z_timestamp_main = k_cycle_get_32();
#endif

	extern void main(void);

	main();
   18584:	f001 f8e5 	bl	19752 <main>

	/* Mark nonessenrial since main() has no more work to do */
	z_main_thread.base.user_options &= ~K_ESSENTIAL;
   18588:	4a03      	ldr	r2, [pc, #12]	; (18598 <bg_thread_main+0x2c>)
   1858a:	7b13      	ldrb	r3, [r2, #12]
   1858c:	f023 0301 	bic.w	r3, r3, #1
   18590:	7313      	strb	r3, [r2, #12]

	/* Dump coverage data once the main() has exited. */
	gcov_coverage_dump();
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */
   18592:	bd08      	pop	{r3, pc}
   18594:	2002511f 	.word	0x2002511f
   18598:	20020ab0 	.word	0x20020ab0

0001859c <z_cstart>:
 * cleared/zeroed.
 *
 * @return Does not return
 */
FUNC_NORETURN void z_cstart(void)
{
   1859c:	b580      	push	{r7, lr}
   1859e:	b0b2      	sub	sp, #200	; 0xc8
#endif	/* CONFIG_STACK_CANARIES */

	/* gcov hook needed to get the coverage report.*/
	gcov_static_init();

	LOG_CORE_INIT();
   185a0:	f7f4 f934 	bl	c80c <log_core_init>
 *
 * @return N/A
 */
static ALWAYS_INLINE void z_arm_interrupt_stack_setup(void)
{
	u32_t msp = (u32_t)(Z_THREAD_STACK_BUFFER(_interrupt_stack)) +
   185a4:	4b34      	ldr	r3, [pc, #208]	; (18678 <z_cstart+0xdc>)
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
   185a6:	f383 8808 	msr	MSP, r3
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   185aa:	2400      	movs	r4, #0
   185ac:	23e0      	movs	r3, #224	; 0xe0
   185ae:	4d33      	ldr	r5, [pc, #204]	; (1867c <z_cstart+0xe0>)

	/* perform any architecture-specific initialization */
	arch_kernel_init();

#ifdef CONFIG_MULTITHREADING
	struct k_thread dummy_thread = {
   185b0:	2701      	movs	r7, #1
   185b2:	f885 3022 	strb.w	r3, [r5, #34]	; 0x22
   185b6:	77ec      	strb	r4, [r5, #31]
   185b8:	762c      	strb	r4, [r5, #24]
   185ba:	766c      	strb	r4, [r5, #25]
   185bc:	76ac      	strb	r4, [r5, #26]
#if defined(CONFIG_ARM_SECURE_FIRMWARE)
	NVIC_SetPriority(SecureFault_IRQn, _EXC_FAULT_PRIO);
#endif /* CONFIG_ARM_SECURE_FIRMWARE */

	/* Enable Usage, Mem, & Bus Faults */
	SCB->SHCSR |= SCB_SHCSR_USGFAULTENA_Msk | SCB_SHCSR_MEMFAULTENA_Msk |
   185be:	6a6b      	ldr	r3, [r5, #36]	; 0x24
# ifdef CONFIG_SCHED_CPU_MASK
		 .base.cpu_mask = -1,
# endif
	};

	_current = &dummy_thread;
   185c0:	4e2f      	ldr	r6, [pc, #188]	; (18680 <z_cstart+0xe4>)
   185c2:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
   185c6:	626b      	str	r3, [r5, #36]	; 0x24

static ALWAYS_INLINE void arch_kernel_init(void)
{
	z_arm_interrupt_stack_setup();
	z_arm_exc_setup();
	z_arm_fault_init();
   185c8:	f7f5 fd5c 	bl	e084 <z_arm_fault_init>
	z_arm_cpu_idle_init();
   185cc:	f7f5 f906 	bl	d7dc <z_arm_cpu_idle_init>
static ALWAYS_INLINE void z_arm_clear_faults(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Reset all faults */
	SCB->CFSR = SCB_CFSR_USGFAULTSR_Msk |
   185d0:	f04f 33ff 	mov.w	r3, #4294967295
   185d4:	62ab      	str	r3, [r5, #40]	; 0x28
		    SCB_CFSR_MEMFAULTSR_Msk |
		    SCB_CFSR_BUSFAULTSR_Msk;

	/* Clear all Hard Faults - HFSR is write-one-to-clear */
	SCB->HFSR = 0xffffffff;
   185d6:	62eb      	str	r3, [r5, #44]	; 0x2c
	struct k_thread dummy_thread = {
   185d8:	ab06      	add	r3, sp, #24
   185da:	22b0      	movs	r2, #176	; 0xb0
   185dc:	4621      	mov	r1, r4
   185de:	4618      	mov	r0, r3
   185e0:	f002 f94b 	bl	1a87a <memset>
	_current = &dummy_thread;
   185e4:	60b0      	str	r0, [r6, #8]
#ifdef CONFIG_USERSPACE
	z_app_shmem_bss_zero();
#endif

	/* perform basic hardware initialization */
	z_sys_device_do_config_level(_SYS_INIT_LEVEL_PRE_KERNEL_1);
   185e6:	4620      	mov	r0, r4
	struct k_thread dummy_thread = {
   185e8:	f88d 7025 	strb.w	r7, [sp, #37]	; 0x25
	z_sys_device_do_config_level(_SYS_INIT_LEVEL_PRE_KERNEL_1);
   185ec:	f7ff fec8 	bl	18380 <z_sys_device_do_config_level>
	z_sys_device_do_config_level(_SYS_INIT_LEVEL_PRE_KERNEL_2);
   185f0:	4638      	mov	r0, r7
   185f2:	f7ff fec5 	bl	18380 <z_sys_device_do_config_level>
	z_sched_init();
   185f6:	f000 fd03 	bl	19000 <z_sched_init>
	z_setup_new_thread(&z_main_thread, z_main_stack,
   185fa:	4b22      	ldr	r3, [pc, #136]	; (18684 <z_cstart+0xe8>)
	_kernel.ready_q.cache = &z_main_thread;
   185fc:	4d22      	ldr	r5, [pc, #136]	; (18688 <z_cstart+0xec>)
	z_setup_new_thread(&z_main_thread, z_main_stack,
   185fe:	e9cd 7304 	strd	r7, r3, [sp, #16]
   18602:	2307      	movs	r3, #7
   18604:	f44f 5280 	mov.w	r2, #4096	; 0x1000
   18608:	e9cd 4302 	strd	r4, r3, [sp, #8]
   1860c:	e9cd 4400 	strd	r4, r4, [sp]
   18610:	4b1e      	ldr	r3, [pc, #120]	; (1868c <z_cstart+0xf0>)
   18612:	491f      	ldr	r1, [pc, #124]	; (18690 <z_cstart+0xf4>)
   18614:	4628      	mov	r0, r5
	_kernel.ready_q.cache = &z_main_thread;
   18616:	6275      	str	r5, [r6, #36]	; 0x24
	z_setup_new_thread(&z_main_thread, z_main_stack,
   18618:	f000 fe06 	bl	19228 <z_setup_new_thread>
	sys_trace_thread_resume(thread);
}

static inline void z_mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
   1861c:	7b6b      	ldrb	r3, [r5, #13]
   1861e:	f023 0204 	bic.w	r2, r3, #4
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
   18622:	f013 0f1b 	tst.w	r3, #27
	thread->base.thread_state &= ~_THREAD_PRESTART;
   18626:	736a      	strb	r2, [r5, #13]
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
   18628:	d104      	bne.n	18634 <z_cstart+0x98>
	return true;
}

static ALWAYS_INLINE void z_ready_thread(struct k_thread *thread)
{
	if (z_is_thread_ready(thread)) {
   1862a:	69ab      	ldr	r3, [r5, #24]
   1862c:	b913      	cbnz	r3, 18634 <z_cstart+0x98>
		z_add_thread_to_ready_q(thread);
   1862e:	4628      	mov	r0, r5
   18630:	f000 faac 	bl	18b8c <z_add_thread_to_ready_q>
	z_setup_new_thread(thread, stack,
   18634:	4b17      	ldr	r3, [pc, #92]	; (18694 <z_cstart+0xf8>)
   18636:	2201      	movs	r2, #1
   18638:	9305      	str	r3, [sp, #20]
   1863a:	230f      	movs	r3, #15
   1863c:	e9cd 3203 	strd	r3, r2, [sp, #12]
   18640:	2300      	movs	r3, #0
   18642:	4d15      	ldr	r5, [pc, #84]	; (18698 <z_cstart+0xfc>)
   18644:	e9cd 3301 	strd	r3, r3, [sp, #4]
   18648:	9300      	str	r3, [sp, #0]
   1864a:	f44f 72a0 	mov.w	r2, #320	; 0x140
   1864e:	4b13      	ldr	r3, [pc, #76]	; (1869c <z_cstart+0x100>)
   18650:	4913      	ldr	r1, [pc, #76]	; (186a0 <z_cstart+0x104>)
   18652:	4628      	mov	r0, r5
   18654:	f000 fde8 	bl	19228 <z_setup_new_thread>
	thread->base.thread_state &= ~_THREAD_PRESTART;
   18658:	7b6b      	ldrb	r3, [r5, #13]
	arch_switch_to_main_thread(&z_main_thread, z_main_stack,
   1865a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
   1865e:	f023 0304 	bic.w	r3, r3, #4
   18662:	736b      	strb	r3, [r5, #13]
 * @return N/A
 */

static inline void sys_dlist_init(sys_dlist_t *list)
{
	list->head = (sys_dnode_t *)list;
   18664:	4b0f      	ldr	r3, [pc, #60]	; (186a4 <z_cstart+0x108>)
   18666:	490a      	ldr	r1, [pc, #40]	; (18690 <z_cstart+0xf4>)
	list->tail = (sys_dnode_t *)list;
   18668:	e9c6 3306 	strd	r3, r3, [r6, #24]
   1866c:	4806      	ldr	r0, [pc, #24]	; (18688 <z_cstart+0xec>)
   1866e:	4b07      	ldr	r3, [pc, #28]	; (1868c <z_cstart+0xf0>)
	_kernel.cpus[0].idle_thread = &z_idle_thread;
   18670:	60f5      	str	r5, [r6, #12]
	arch_switch_to_main_thread(&z_main_thread, z_main_stack,
   18672:	f7f5 f961 	bl	d938 <arch_switch_to_main_thread>
	CODE_UNREACHABLE; /* LCOV_EXCL_LINE */
   18676:	bf00      	nop
   18678:	20026ea8 	.word	0x20026ea8
   1867c:	e000ed00 	.word	0xe000ed00
   18680:	20024bc4 	.word	0x20024bc4
   18684:	0001cdbd 	.word	0x0001cdbd
   18688:	20020ab0 	.word	0x20020ab0
   1868c:	0001856d 	.word	0x0001856d
   18690:	20025568 	.word	0x20025568
   18694:	0001cdc2 	.word	0x0001cdc2
   18698:	20020a00 	.word	0x20020a00
   1869c:	000184f1 	.word	0x000184f1
   186a0:	20026568 	.word	0x20026568
   186a4:	20024bdc 	.word	0x20024bdc

000186a8 <init_mem_slab_module>:
 * Perform any initialization that wasn't done at build time.
 *
 * @return N/A
 */
static int init_mem_slab_module(struct device *dev)
{
   186a8:	b570      	push	{r4, r5, r6, lr}
	int rc = 0;
	ARG_UNUSED(dev);

	Z_STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
   186aa:	4b0e      	ldr	r3, [pc, #56]	; (186e4 <init_mem_slab_module+0x3c>)
   186ac:	4c0e      	ldr	r4, [pc, #56]	; (186e8 <init_mem_slab_module+0x40>)
   186ae:	42a3      	cmp	r3, r4
   186b0:	d301      	bcc.n	186b6 <init_mem_slab_module+0xe>
		}
		SYS_TRACING_OBJ_INIT(k_mem_slab, slab);
		z_object_init(slab);
	}

out:
   186b2:	2000      	movs	r0, #0
	return rc;
}
   186b4:	bd70      	pop	{r4, r5, r6, pc}
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
   186b6:	e9d3 0103 	ldrd	r0, r1, [r3, #12]
   186ba:	ea41 0200 	orr.w	r2, r1, r0
   186be:	f012 0203 	ands.w	r2, r2, #3
   186c2:	d10b      	bne.n	186dc <init_mem_slab_module+0x34>
	for (j = 0U; j < slab->num_blocks; j++) {
   186c4:	689d      	ldr	r5, [r3, #8]
	slab->free_list = NULL;
   186c6:	615a      	str	r2, [r3, #20]
	for (j = 0U; j < slab->num_blocks; j++) {
   186c8:	42aa      	cmp	r2, r5
   186ca:	d101      	bne.n	186d0 <init_mem_slab_module+0x28>
	Z_STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
   186cc:	331c      	adds	r3, #28
   186ce:	e7ee      	b.n	186ae <init_mem_slab_module+0x6>
		*(char **)p = slab->free_list;
   186d0:	695e      	ldr	r6, [r3, #20]
	for (j = 0U; j < slab->num_blocks; j++) {
   186d2:	3201      	adds	r2, #1
		*(char **)p = slab->free_list;
   186d4:	600e      	str	r6, [r1, #0]
		slab->free_list = p;
   186d6:	6159      	str	r1, [r3, #20]
		p += slab->block_size;
   186d8:	4401      	add	r1, r0
   186da:	e7f5      	b.n	186c8 <init_mem_slab_module+0x20>
		return -EINVAL;
   186dc:	f06f 0015 	mvn.w	r0, #21
	return rc;
   186e0:	e7e8      	b.n	186b4 <init_mem_slab_module+0xc>
   186e2:	bf00      	nop
   186e4:	20028190 	.word	0x20028190
   186e8:	20028190 	.word	0x20028190

000186ec <k_mem_slab_alloc>:
out:
	return rc;
}

int k_mem_slab_alloc(struct k_mem_slab *slab, void **mem, s32_t timeout)
{
   186ec:	b510      	push	{r4, lr}
   186ee:	4613      	mov	r3, r2
   186f0:	460c      	mov	r4, r1
   186f2:	f04f 0220 	mov.w	r2, #32
   186f6:	f3ef 8111 	mrs	r1, BASEPRI
   186fa:	f382 8811 	msr	BASEPRI, r2
   186fe:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	int result;

	if (slab->free_list != NULL) {
   18702:	6942      	ldr	r2, [r0, #20]
   18704:	b15a      	cbz	r2, 1871e <k_mem_slab_alloc+0x32>
		/* take a free block */
		*mem = slab->free_list;
   18706:	6022      	str	r2, [r4, #0]
		slab->free_list = *(char **)(slab->free_list);
   18708:	6813      	ldr	r3, [r2, #0]
   1870a:	6143      	str	r3, [r0, #20]
		slab->num_used++;
   1870c:	6983      	ldr	r3, [r0, #24]
   1870e:	3301      	adds	r3, #1
   18710:	6183      	str	r3, [r0, #24]
		result = 0;
   18712:	2000      	movs	r0, #0
	__asm__ volatile(
   18714:	f381 8811 	msr	BASEPRI, r1
   18718:	f3bf 8f6f 	isb	sy
		return result;
	}

	k_spin_unlock(&lock, key);

	return result;
   1871c:	e00d      	b.n	1873a <k_mem_slab_alloc+0x4e>
	} else if (timeout == K_NO_WAIT) {
   1871e:	b91b      	cbnz	r3, 18728 <k_mem_slab_alloc+0x3c>
		*mem = NULL;
   18720:	6023      	str	r3, [r4, #0]
		result = -ENOMEM;
   18722:	f06f 000b 	mvn.w	r0, #11
   18726:	e7f5      	b.n	18714 <k_mem_slab_alloc+0x28>
		result = z_pend_curr(&lock, key, &slab->wait_q, timeout);
   18728:	4602      	mov	r2, r0
   1872a:	4804      	ldr	r0, [pc, #16]	; (1873c <k_mem_slab_alloc+0x50>)
   1872c:	f000 fbe4 	bl	18ef8 <z_pend_curr>
		if (result == 0) {
   18730:	b918      	cbnz	r0, 1873a <k_mem_slab_alloc+0x4e>
			*mem = _current->base.swap_data;
   18732:	4b03      	ldr	r3, [pc, #12]	; (18740 <k_mem_slab_alloc+0x54>)
   18734:	689b      	ldr	r3, [r3, #8]
   18736:	695b      	ldr	r3, [r3, #20]
   18738:	6023      	str	r3, [r4, #0]
}
   1873a:	bd10      	pop	{r4, pc}
   1873c:	20025120 	.word	0x20025120
   18740:	20024bc4 	.word	0x20024bc4

00018744 <k_mem_slab_free>:

void k_mem_slab_free(struct k_mem_slab *slab, void **mem)
{
   18744:	b570      	push	{r4, r5, r6, lr}
   18746:	4604      	mov	r4, r0
   18748:	460d      	mov	r5, r1
	__asm__ volatile(
   1874a:	f04f 0320 	mov.w	r3, #32
   1874e:	f3ef 8611 	mrs	r6, BASEPRI
   18752:	f383 8811 	msr	BASEPRI, r3
   18756:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_thread *pending_thread = z_unpend_first_thread(&slab->wait_q);
   1875a:	f003 f8b1 	bl	1b8c0 <z_unpend_first_thread>

	if (pending_thread != NULL) {
   1875e:	b180      	cbz	r0, 18782 <k_mem_slab_free+0x3e>
}

static ALWAYS_INLINE void
arch_thread_return_value_set(struct k_thread *thread, unsigned int value)
{
	thread->arch.swap_return_value = value;
   18760:	2100      	movs	r1, #0
		z_thread_return_value_set_with_data(pending_thread, 0, *mem);
   18762:	682a      	ldr	r2, [r5, #0]
   18764:	6681      	str	r1, [r0, #104]	; 0x68
z_thread_return_value_set_with_data(struct k_thread *thread,
				   unsigned int value,
				   void *data)
{
	arch_thread_return_value_set(thread, value);
	thread->base.swap_data = data;
   18766:	6142      	str	r2, [r0, #20]
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
   18768:	7b42      	ldrb	r2, [r0, #13]
   1876a:	06d2      	lsls	r2, r2, #27
   1876c:	d103      	bne.n	18776 <k_mem_slab_free+0x32>
	if (z_is_thread_ready(thread)) {
   1876e:	6983      	ldr	r3, [r0, #24]
   18770:	b90b      	cbnz	r3, 18776 <k_mem_slab_free+0x32>
		z_add_thread_to_ready_q(thread);
   18772:	f000 fa0b 	bl	18b8c <z_add_thread_to_ready_q>
		z_ready_thread(pending_thread);
		z_reschedule(&lock, key);
   18776:	4631      	mov	r1, r6
		**(char ***)mem = slab->free_list;
		slab->free_list = *(char **)mem;
		slab->num_used--;
		k_spin_unlock(&lock, key);
	}
}
   18778:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		z_reschedule(&lock, key);
   1877c:	4807      	ldr	r0, [pc, #28]	; (1879c <k_mem_slab_free+0x58>)
   1877e:	f003 b829 	b.w	1b7d4 <z_reschedule>
		**(char ***)mem = slab->free_list;
   18782:	682b      	ldr	r3, [r5, #0]
   18784:	6962      	ldr	r2, [r4, #20]
   18786:	601a      	str	r2, [r3, #0]
		slab->free_list = *(char **)mem;
   18788:	682b      	ldr	r3, [r5, #0]
   1878a:	6163      	str	r3, [r4, #20]
		slab->num_used--;
   1878c:	69a3      	ldr	r3, [r4, #24]
   1878e:	3b01      	subs	r3, #1
   18790:	61a3      	str	r3, [r4, #24]
	__asm__ volatile(
   18792:	f386 8811 	msr	BASEPRI, r6
   18796:	f3bf 8f6f 	isb	sy
}
   1879a:	bd70      	pop	{r4, r5, r6, pc}
   1879c:	20025120 	.word	0x20025120

000187a0 <init_static_pools>:
	z_waitq_init(&p->wait_q);
	z_sys_mem_pool_base_init(&p->base);
}

int init_static_pools(struct device *unused)
{
   187a0:	b538      	push	{r3, r4, r5, lr}
	ARG_UNUSED(unused);

	Z_STRUCT_SECTION_FOREACH(k_mem_pool, p) {
   187a2:	4c07      	ldr	r4, [pc, #28]	; (187c0 <init_static_pools+0x20>)
   187a4:	4d07      	ldr	r5, [pc, #28]	; (187c4 <init_static_pools+0x24>)
   187a6:	42ac      	cmp	r4, r5
   187a8:	d301      	bcc.n	187ae <init_static_pools+0xe>
		k_mem_pool_init(p);
	}

	return 0;
}
   187aa:	2000      	movs	r0, #0
   187ac:	bd38      	pop	{r3, r4, r5, pc}
	SYS_DLIST_FOR_EACH_CONTAINER(&((wq)->waitq), thread_ptr, \
				     base.qnode_dlist)

static inline void z_waitq_init(_wait_q_t *w)
{
	sys_dlist_init(&w->waitq);
   187ae:	f104 0314 	add.w	r3, r4, #20
	z_sys_mem_pool_base_init(&p->base);
   187b2:	4620      	mov	r0, r4
   187b4:	e9c4 3305 	strd	r3, r3, [r4, #20]
   187b8:	f000 fffa 	bl	197b0 <z_sys_mem_pool_base_init>
	Z_STRUCT_SECTION_FOREACH(k_mem_pool, p) {
   187bc:	341c      	adds	r4, #28
   187be:	e7f2      	b.n	187a6 <init_static_pools+0x6>
   187c0:	20028190 	.word	0x20028190
   187c4:	200281ac 	.word	0x200281ac

000187c8 <k_mem_pool_alloc>:

SYS_INIT(init_static_pools, PRE_KERNEL_1, CONFIG_KERNEL_INIT_PRIORITY_OBJECTS);

int k_mem_pool_alloc(struct k_mem_pool *p, struct k_mem_block *block,
		     size_t size, s32_t timeout)
{
   187c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	int ret;
	s64_t end = 0;

	__ASSERT(!(arch_is_in_isr() && timeout != K_NO_WAIT), "");

	if (timeout > 0) {
   187cc:	1e1c      	subs	r4, r3, #0
{
   187ce:	b085      	sub	sp, #20
   187d0:	4607      	mov	r7, r0
   187d2:	460d      	mov	r5, r1
   187d4:	4692      	mov	sl, r2
	if (timeout > 0) {
   187d6:	dd3b      	ble.n	18850 <k_mem_pool_alloc+0x88>
	return z_impl_k_uptime_get();
   187d8:	f003 f91f 	bl	1ba1a <z_impl_k_uptime_get>
		end = k_uptime_get() + timeout;
   187dc:	eb10 0804 	adds.w	r8, r0, r4
	return pool - &_k_mem_pool_list_start[0];
   187e0:	4b1d      	ldr	r3, [pc, #116]	; (18858 <k_mem_pool_alloc+0x90>)
   187e2:	4e1e      	ldr	r6, [pc, #120]	; (1885c <k_mem_pool_alloc+0x94>)
   187e4:	1afb      	subs	r3, r7, r3
   187e6:	109b      	asrs	r3, r3, #2
   187e8:	435e      	muls	r6, r3
		if (ret == 0 || timeout == K_NO_WAIT ||
		    ret != -ENOMEM) {
			return ret;
		}

		z_pend_curr_unlocked(&p->wait_q, timeout);
   187ea:	f107 0b14 	add.w	fp, r7, #20
		block->id.pool = pool_id(p);
   187ee:	b2f6      	uxtb	r6, r6
		ret = z_sys_mem_pool_block_alloc(&p->base, size,
   187f0:	ab03      	add	r3, sp, #12
   187f2:	aa02      	add	r2, sp, #8
   187f4:	9500      	str	r5, [sp, #0]
   187f6:	4651      	mov	r1, sl
   187f8:	4638      	mov	r0, r7
   187fa:	f001 f81f 	bl	1983c <z_sys_mem_pool_block_alloc>
		block->id.level = level_num;
   187fe:	796b      	ldrb	r3, [r5, #5]
   18800:	9a02      	ldr	r2, [sp, #8]
		block->id.pool = pool_id(p);
   18802:	712e      	strb	r6, [r5, #4]
		block->id.level = level_num;
   18804:	f362 0303 	bfi	r3, r2, #0, #4
   18808:	716b      	strb	r3, [r5, #5]
		block->id.block = block_num;
   1880a:	686b      	ldr	r3, [r5, #4]
   1880c:	9a03      	ldr	r2, [sp, #12]
   1880e:	f362 331f 	bfi	r3, r2, #12, #20
   18812:	606b      	str	r3, [r5, #4]
		if (ret == 0 || timeout == K_NO_WAIT ||
   18814:	b1c8      	cbz	r0, 1884a <k_mem_pool_alloc+0x82>
   18816:	b1c4      	cbz	r4, 1884a <k_mem_pool_alloc+0x82>
   18818:	f110 0f0c 	cmn.w	r0, #12
   1881c:	d115      	bne.n	1884a <k_mem_pool_alloc+0x82>
	__asm__ volatile(
   1881e:	f04f 0320 	mov.w	r3, #32
   18822:	f3ef 8011 	mrs	r0, BASEPRI
   18826:	f383 8811 	msr	BASEPRI, r3
   1882a:	f3bf 8f6f 	isb	sy
	(void) z_pend_curr_irqlock(arch_irq_lock(), wait_q, timeout);
   1882e:	4622      	mov	r2, r4
   18830:	4659      	mov	r1, fp
   18832:	f000 fb3d 	bl	18eb0 <z_pend_curr_irqlock>

		if (timeout != K_FOREVER) {
   18836:	1c63      	adds	r3, r4, #1
   18838:	d0da      	beq.n	187f0 <k_mem_pool_alloc+0x28>
   1883a:	f003 f8ee 	bl	1ba1a <z_impl_k_uptime_get>
			timeout = end - k_uptime_get();
   1883e:	eba8 0400 	sub.w	r4, r8, r0
			if (timeout <= 0) {
   18842:	2c00      	cmp	r4, #0
   18844:	dcd4      	bgt.n	187f0 <k_mem_pool_alloc+0x28>
				break;
			}
		}
	}

	return -EAGAIN;
   18846:	f06f 000a 	mvn.w	r0, #10
}
   1884a:	b005      	add	sp, #20
   1884c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	s64_t end = 0;
   18850:	f04f 0800 	mov.w	r8, #0
   18854:	e7c4      	b.n	187e0 <k_mem_pool_alloc+0x18>
   18856:	bf00      	nop
   18858:	20028190 	.word	0x20028190
   1885c:	b6db6db7 	.word	0xb6db6db7

00018860 <k_mem_pool_free_id>:

void k_mem_pool_free_id(struct k_mem_block_id *id)
{
   18860:	b570      	push	{r4, r5, r6, lr}
   18862:	7804      	ldrb	r4, [r0, #0]
	int need_sched = 0;
	struct k_mem_pool *p = get_pool(id->pool);

	z_sys_mem_pool_block_free(&p->base, id->level, id->block);
   18864:	6802      	ldr	r2, [r0, #0]
   18866:	7841      	ldrb	r1, [r0, #1]
   18868:	4e11      	ldr	r6, [pc, #68]	; (188b0 <k_mem_pool_free_id+0x50>)
   1886a:	ebc4 04c4 	rsb	r4, r4, r4, lsl #3
   1886e:	00a4      	lsls	r4, r4, #2
   18870:	0b12      	lsrs	r2, r2, #12
   18872:	f001 010f 	and.w	r1, r1, #15
   18876:	1930      	adds	r0, r6, r4
   18878:	f001 f892 	bl	199a0 <z_sys_mem_pool_block_free>
   1887c:	f04f 0320 	mov.w	r3, #32
   18880:	f3ef 8511 	mrs	r5, BASEPRI
   18884:	f383 8811 	msr	BASEPRI, r3
   18888:	f3bf 8f6f 	isb	sy
	 * is unsynchronized.  Maybe we want to put the lock into the
	 * wait_q instead and make the API safe?)
	 */
	k_spinlock_key_t key = k_spin_lock(&lock);

	need_sched = z_unpend_all(&p->wait_q);
   1888c:	f104 0014 	add.w	r0, r4, #20
   18890:	4430      	add	r0, r6
   18892:	f003 f842 	bl	1b91a <z_unpend_all>

	if (need_sched != 0) {
   18896:	b128      	cbz	r0, 188a4 <k_mem_pool_free_id+0x44>
		z_reschedule(&lock, key);
   18898:	4629      	mov	r1, r5
	} else {
		k_spin_unlock(&lock, key);
	}
}
   1889a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		z_reschedule(&lock, key);
   1889e:	4805      	ldr	r0, [pc, #20]	; (188b4 <k_mem_pool_free_id+0x54>)
   188a0:	f002 bf98 	b.w	1b7d4 <z_reschedule>
	__asm__ volatile(
   188a4:	f385 8811 	msr	BASEPRI, r5
   188a8:	f3bf 8f6f 	isb	sy
}
   188ac:	bd70      	pop	{r4, r5, r6, pc}
   188ae:	bf00      	nop
   188b0:	20028190 	.word	0x20028190
   188b4:	20025120 	.word	0x20025120

000188b8 <k_malloc>:
		  CONFIG_HEAP_MEM_POOL_SIZE, 1, 4);
#define _HEAP_MEM_POOL (&_heap_mem_pool)

void *k_malloc(size_t size)
{
	return k_mem_pool_malloc(_HEAP_MEM_POOL, size);
   188b8:	4601      	mov	r1, r0
   188ba:	4801      	ldr	r0, [pc, #4]	; (188c0 <k_malloc+0x8>)
   188bc:	f002 bebd 	b.w	1b63a <k_mem_pool_malloc>
   188c0:	20028190 	.word	0x20028190

000188c4 <z_impl_k_mutex_lock>:
	}
	return false;
}

int z_impl_k_mutex_lock(struct k_mutex *mutex, s32_t timeout)
{
   188c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   188c6:	4604      	mov	r4, r0
   188c8:	460f      	mov	r7, r1
	__asm__ volatile(
   188ca:	f04f 0320 	mov.w	r3, #32
   188ce:	f3ef 8511 	mrs	r5, BASEPRI
   188d2:	f383 8811 	msr	BASEPRI, r3
   188d6:	f3bf 8f6f 	isb	sy
	bool resched = false;

	sys_trace_void(SYS_TRACE_ID_MUTEX_LOCK);
	key = k_spin_lock(&lock);

	if (likely((mutex->lock_count == 0U) || (mutex->owner == _current))) {
   188da:	68c2      	ldr	r2, [r0, #12]
   188dc:	4930      	ldr	r1, [pc, #192]	; (189a0 <z_impl_k_mutex_lock+0xdc>)
   188de:	b15a      	cbz	r2, 188f8 <z_impl_k_mutex_lock+0x34>
   188e0:	6880      	ldr	r0, [r0, #8]
   188e2:	688e      	ldr	r6, [r1, #8]
   188e4:	42b0      	cmp	r0, r6
   188e6:	d015      	beq.n	18914 <z_impl_k_mutex_lock+0x50>
		sys_trace_end_call(SYS_TRACE_ID_MUTEX_LOCK);

		return 0;
	}

	if (unlikely(timeout == (s32_t)K_NO_WAIT)) {
   188e8:	b9b7      	cbnz	r7, 18918 <z_impl_k_mutex_lock+0x54>
	__asm__ volatile(
   188ea:	f385 8811 	msr	BASEPRI, r5
   188ee:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		sys_trace_end_call(SYS_TRACE_ID_MUTEX_LOCK);
		return -EBUSY;
   188f2:	f06f 000f 	mvn.w	r0, #15
   188f6:	e00c      	b.n	18912 <z_impl_k_mutex_lock+0x4e>
					_current->base.prio :
   188f8:	688b      	ldr	r3, [r1, #8]
   188fa:	f993 300e 	ldrsb.w	r3, [r3, #14]
		mutex->owner_orig_prio = (mutex->lock_count == 0U) ?
   188fe:	6123      	str	r3, [r4, #16]
		mutex->owner = _current;
   18900:	688b      	ldr	r3, [r1, #8]
		mutex->lock_count++;
   18902:	3201      	adds	r2, #1
   18904:	60e2      	str	r2, [r4, #12]
		mutex->owner = _current;
   18906:	60a3      	str	r3, [r4, #8]
   18908:	f385 8811 	msr	BASEPRI, r5
   1890c:	f3bf 8f6f 	isb	sy
		return 0;
   18910:	2000      	movs	r0, #0
		k_spin_unlock(&lock, key);
	}

	sys_trace_end_call(SYS_TRACE_ID_MUTEX_LOCK);
	return -EAGAIN;
}
   18912:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
					_current->base.prio :
   18914:	6923      	ldr	r3, [r4, #16]
   18916:	e7f2      	b.n	188fe <z_impl_k_mutex_lock+0x3a>
	new_prio = new_prio_for_inheritance(_current->base.prio,
   18918:	f990 300e 	ldrsb.w	r3, [r0, #14]
   1891c:	f996 100e 	ldrsb.w	r1, [r6, #14]
   18920:	4299      	cmp	r1, r3
   18922:	bfa8      	it	ge
   18924:	4619      	movge	r1, r3
   18926:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
	if (z_is_prio_higher(new_prio, mutex->owner->base.prio)) {
   1892a:	4299      	cmp	r1, r3
   1892c:	da2b      	bge.n	18986 <z_impl_k_mutex_lock+0xc2>
		return z_set_prio(mutex->owner, new_prio);
   1892e:	f000 fb25 	bl	18f7c <z_set_prio>
   18932:	4606      	mov	r6, r0
	int got_mutex = z_pend_curr(&lock, key, &mutex->wait_q, timeout);
   18934:	463b      	mov	r3, r7
   18936:	4622      	mov	r2, r4
   18938:	4629      	mov	r1, r5
   1893a:	481a      	ldr	r0, [pc, #104]	; (189a4 <z_impl_k_mutex_lock+0xe0>)
   1893c:	f000 fadc 	bl	18ef8 <z_pend_curr>
	if (got_mutex == 0) {
   18940:	2800      	cmp	r0, #0
   18942:	d0e6      	beq.n	18912 <z_impl_k_mutex_lock+0x4e>
	__asm__ volatile(
   18944:	f04f 0320 	mov.w	r3, #32
   18948:	f3ef 8511 	mrs	r5, BASEPRI
   1894c:	f383 8811 	msr	BASEPRI, r3
   18950:	f3bf 8f6f 	isb	sy
 * @return true if empty, false otherwise
 */

static inline bool sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
   18954:	6823      	ldr	r3, [r4, #0]
   18956:	6921      	ldr	r1, [r4, #16]
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
   18958:	429c      	cmp	r4, r3
   1895a:	d007      	beq.n	1896c <z_impl_k_mutex_lock+0xa8>
		new_prio_for_inheritance(waiter->base.prio, mutex->owner_orig_prio) :
   1895c:	b133      	cbz	r3, 1896c <z_impl_k_mutex_lock+0xa8>
   1895e:	f993 300e 	ldrsb.w	r3, [r3, #14]
   18962:	4299      	cmp	r1, r3
   18964:	bfa8      	it	ge
   18966:	4619      	movge	r1, r3
   18968:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
	resched = adjust_owner_prio(mutex, new_prio) || resched;
   1896c:	68a0      	ldr	r0, [r4, #8]
	if (mutex->owner->base.prio != new_prio) {
   1896e:	f990 300e 	ldrsb.w	r3, [r0, #14]
   18972:	4299      	cmp	r1, r3
   18974:	d109      	bne.n	1898a <z_impl_k_mutex_lock+0xc6>
	if (resched) {
   18976:	b16e      	cbz	r6, 18994 <z_impl_k_mutex_lock+0xd0>
		z_reschedule(&lock, key);
   18978:	4629      	mov	r1, r5
   1897a:	480a      	ldr	r0, [pc, #40]	; (189a4 <z_impl_k_mutex_lock+0xe0>)
   1897c:	f002 ff2a 	bl	1b7d4 <z_reschedule>
	return -EAGAIN;
   18980:	f06f 000a 	mvn.w	r0, #10
   18984:	e7c5      	b.n	18912 <z_impl_k_mutex_lock+0x4e>
	bool resched = false;
   18986:	2600      	movs	r6, #0
   18988:	e7d4      	b.n	18934 <z_impl_k_mutex_lock+0x70>
		return z_set_prio(mutex->owner, new_prio);
   1898a:	f000 faf7 	bl	18f7c <z_set_prio>
	resched = adjust_owner_prio(mutex, new_prio) || resched;
   1898e:	2800      	cmp	r0, #0
   18990:	d1f2      	bne.n	18978 <z_impl_k_mutex_lock+0xb4>
   18992:	e7f0      	b.n	18976 <z_impl_k_mutex_lock+0xb2>
	__asm__ volatile(
   18994:	f385 8811 	msr	BASEPRI, r5
   18998:	f3bf 8f6f 	isb	sy
   1899c:	e7f0      	b.n	18980 <z_impl_k_mutex_lock+0xbc>
   1899e:	bf00      	nop
   189a0:	20024bc4 	.word	0x20024bc4
   189a4:	20025120 	.word	0x20025120

000189a8 <z_impl_k_mutex_unlock>:
}
#include <syscalls/k_mutex_lock_mrsh.c>
#endif

int z_impl_k_mutex_unlock(struct k_mutex *mutex)
{
   189a8:	b538      	push	{r3, r4, r5, lr}
	struct k_thread *new_owner;

	CHECKIF(mutex->owner == NULL) {
   189aa:	6883      	ldr	r3, [r0, #8]
{
   189ac:	4604      	mov	r4, r0
	CHECKIF(mutex->owner == NULL) {
   189ae:	2b00      	cmp	r3, #0
   189b0:	d03b      	beq.n	18a2a <z_impl_k_mutex_unlock+0x82>
		return -EINVAL;
	}
	/*
	 * The current thread does not own the mutex.
	 */
	CHECKIF(mutex->owner != _current) {
   189b2:	4a21      	ldr	r2, [pc, #132]	; (18a38 <z_impl_k_mutex_unlock+0x90>)
   189b4:	6892      	ldr	r2, [r2, #8]
   189b6:	4293      	cmp	r3, r2
   189b8:	d13a      	bne.n	18a30 <z_impl_k_mutex_unlock+0x88>
{
#ifdef CONFIG_PREEMPT_ENABLED
	__ASSERT(!arch_is_in_isr(), "");
	__ASSERT(_current->base.sched_locked != 1, "");

	--_current->base.sched_locked;
   189ba:	7bda      	ldrb	r2, [r3, #15]
   189bc:	3a01      	subs	r2, #1
   189be:	73da      	strb	r2, [r3, #15]

	/*
	 * If we are the owner and count is greater than 1, then decrement
	 * the count and return and keep current thread as the owner.
	 */
	if (mutex->lock_count - 1U != 0U) {
   189c0:	68c3      	ldr	r3, [r0, #12]
   189c2:	2b01      	cmp	r3, #1
   189c4:	d005      	beq.n	189d2 <z_impl_k_mutex_unlock+0x2a>
		mutex->lock_count--;
   189c6:	3b01      	subs	r3, #1
   189c8:	60c3      	str	r3, [r0, #12]
		k_spin_unlock(&lock, key);
	}


k_mutex_unlock_return:
	k_sched_unlock();
   189ca:	f000 f8c3 	bl	18b54 <k_sched_unlock>
	sys_trace_end_call(SYS_TRACE_ID_MUTEX_UNLOCK);

	return 0;
   189ce:	2000      	movs	r0, #0
}
   189d0:	bd38      	pop	{r3, r4, r5, pc}
	__asm__ volatile(
   189d2:	f04f 0320 	mov.w	r3, #32
   189d6:	f3ef 8511 	mrs	r5, BASEPRI
   189da:	f383 8811 	msr	BASEPRI, r3
   189de:	f3bf 8f6f 	isb	sy
	adjust_owner_prio(mutex, mutex->owner_orig_prio);
   189e2:	6901      	ldr	r1, [r0, #16]
   189e4:	6880      	ldr	r0, [r0, #8]
	if (mutex->owner->base.prio != new_prio) {
   189e6:	f990 300e 	ldrsb.w	r3, [r0, #14]
   189ea:	4299      	cmp	r1, r3
   189ec:	d001      	beq.n	189f2 <z_impl_k_mutex_unlock+0x4a>
		return z_set_prio(mutex->owner, new_prio);
   189ee:	f000 fac5 	bl	18f7c <z_set_prio>
	new_owner = z_unpend_first_thread(&mutex->wait_q);
   189f2:	4620      	mov	r0, r4
   189f4:	f002 ff64 	bl	1b8c0 <z_unpend_first_thread>
	mutex->owner = new_owner;
   189f8:	60a0      	str	r0, [r4, #8]
	if (new_owner != NULL) {
   189fa:	b180      	cbz	r0, 18a1e <z_impl_k_mutex_unlock+0x76>
		mutex->owner_orig_prio = new_owner->base.prio;
   189fc:	f990 200e 	ldrsb.w	r2, [r0, #14]
   18a00:	6122      	str	r2, [r4, #16]
   18a02:	2200      	movs	r2, #0
   18a04:	6682      	str	r2, [r0, #104]	; 0x68
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
   18a06:	7b42      	ldrb	r2, [r0, #13]
   18a08:	06d2      	lsls	r2, r2, #27
   18a0a:	d103      	bne.n	18a14 <z_impl_k_mutex_unlock+0x6c>
	if (z_is_thread_ready(thread)) {
   18a0c:	6983      	ldr	r3, [r0, #24]
   18a0e:	b90b      	cbnz	r3, 18a14 <z_impl_k_mutex_unlock+0x6c>
		z_add_thread_to_ready_q(thread);
   18a10:	f000 f8bc 	bl	18b8c <z_add_thread_to_ready_q>
		z_reschedule(&lock, key);
   18a14:	4629      	mov	r1, r5
   18a16:	4809      	ldr	r0, [pc, #36]	; (18a3c <z_impl_k_mutex_unlock+0x94>)
   18a18:	f002 fedc 	bl	1b7d4 <z_reschedule>
   18a1c:	e7d5      	b.n	189ca <z_impl_k_mutex_unlock+0x22>
		mutex->lock_count = 0U;
   18a1e:	60e0      	str	r0, [r4, #12]
	__asm__ volatile(
   18a20:	f385 8811 	msr	BASEPRI, r5
   18a24:	f3bf 8f6f 	isb	sy
   18a28:	e7cf      	b.n	189ca <z_impl_k_mutex_unlock+0x22>
		return -EINVAL;
   18a2a:	f06f 0015 	mvn.w	r0, #21
   18a2e:	e7cf      	b.n	189d0 <z_impl_k_mutex_unlock+0x28>
		return -EPERM;
   18a30:	f04f 30ff 	mov.w	r0, #4294967295
   18a34:	e7cc      	b.n	189d0 <z_impl_k_mutex_unlock+0x28>
   18a36:	bf00      	nop
   18a38:	20024bc4 	.word	0x20024bc4
   18a3c:	20025120 	.word	0x20025120

00018a40 <z_reset_time_slice>:
 */
static struct k_thread *pending_current;
#endif

void z_reset_time_slice(void)
{
   18a40:	b510      	push	{r4, lr}
	/* Add the elapsed time since the last announced tick to the
	 * slice count, as we'll see those "expired" ticks arrive in a
	 * FUTURE z_time_slice() call.
	 */
	if (slice_time != 0) {
   18a42:	4c08      	ldr	r4, [pc, #32]	; (18a64 <z_reset_time_slice+0x24>)
   18a44:	6823      	ldr	r3, [r4, #0]
   18a46:	b15b      	cbz	r3, 18a60 <z_reset_time_slice+0x20>
		_current_cpu->slice_ticks = slice_time + z_clock_elapsed();
   18a48:	f7f4 fd98 	bl	d57c <z_clock_elapsed>
   18a4c:	6823      	ldr	r3, [r4, #0]
   18a4e:	4a06      	ldr	r2, [pc, #24]	; (18a68 <z_reset_time_slice+0x28>)
   18a50:	4418      	add	r0, r3
   18a52:	6110      	str	r0, [r2, #16]
		z_set_timeout_expiry(slice_time, false);
   18a54:	2100      	movs	r1, #0
	}
}
   18a56:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		z_set_timeout_expiry(slice_time, false);
   18a5a:	4618      	mov	r0, r3
   18a5c:	f002 bfbf 	b.w	1b9de <z_set_timeout_expiry>
}
   18a60:	bd10      	pop	{r4, pc}
   18a62:	bf00      	nop
   18a64:	20024c00 	.word	0x20024c00
   18a68:	20024bc4 	.word	0x20024bc4

00018a6c <k_sched_time_slice_set>:

void k_sched_time_slice_set(s32_t slice, int prio)
{
   18a6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   18a6e:	460d      	mov	r5, r1
	__asm__ volatile(
   18a70:	f04f 0320 	mov.w	r3, #32
   18a74:	f3ef 8411 	mrs	r4, BASEPRI
   18a78:	f383 8811 	msr	BASEPRI, r3
   18a7c:	f3bf 8f6f 	isb	sy
		} else {
			return t * (to_hz / from_hz);
		}
	} else {
		if (result32) {
			return (u32_t)((t * to_hz + off) / from_hz);
   18a80:	f44f 4100 	mov.w	r1, #32768	; 0x8000
   18a84:	f240 36e7 	movw	r6, #999	; 0x3e7
   18a88:	2700      	movs	r7, #0
	LOCKED(&sched_spinlock) {
		_current_cpu->slice_ticks = 0;
   18a8a:	2200      	movs	r2, #0
   18a8c:	fbe1 6700 	umlal	r6, r7, r1, r0
   18a90:	4b09      	ldr	r3, [pc, #36]	; (18ab8 <k_sched_time_slice_set+0x4c>)
   18a92:	4630      	mov	r0, r6
   18a94:	611a      	str	r2, [r3, #16]
   18a96:	4639      	mov	r1, r7
   18a98:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   18a9c:	2300      	movs	r3, #0
   18a9e:	f7f3 fbcd 	bl	c23c <__aeabi_uldivmod>
		slice_time = k_ms_to_ticks_ceil32(slice);
   18aa2:	4b06      	ldr	r3, [pc, #24]	; (18abc <k_sched_time_slice_set+0x50>)
   18aa4:	6018      	str	r0, [r3, #0]
		slice_max_prio = prio;
   18aa6:	4b06      	ldr	r3, [pc, #24]	; (18ac0 <k_sched_time_slice_set+0x54>)
   18aa8:	601d      	str	r5, [r3, #0]
		z_reset_time_slice();
   18aaa:	f7ff ffc9 	bl	18a40 <z_reset_time_slice>
	__asm__ volatile(
   18aae:	f384 8811 	msr	BASEPRI, r4
   18ab2:	f3bf 8f6f 	isb	sy
	}
}
   18ab6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   18ab8:	20024bc4 	.word	0x20024bc4
   18abc:	20024c00 	.word	0x20024c00
   18ac0:	20024bfc 	.word	0x20024bfc

00018ac4 <k_sched_lock>:
	__asm__ volatile(
   18ac4:	f04f 0320 	mov.w	r3, #32
   18ac8:	f3ef 8111 	mrs	r1, BASEPRI
   18acc:	f383 8811 	msr	BASEPRI, r3
   18ad0:	f3bf 8f6f 	isb	sy
	--_current->base.sched_locked;
   18ad4:	4b04      	ldr	r3, [pc, #16]	; (18ae8 <k_sched_lock+0x24>)
   18ad6:	689a      	ldr	r2, [r3, #8]
   18ad8:	7bd3      	ldrb	r3, [r2, #15]
   18ada:	3b01      	subs	r3, #1
   18adc:	73d3      	strb	r3, [r2, #15]
	__asm__ volatile(
   18ade:	f381 8811 	msr	BASEPRI, r1
   18ae2:	f3bf 8f6f 	isb	sy
void k_sched_lock(void)
{
	LOCKED(&sched_spinlock) {
		z_sched_lock();
	}
}
   18ae6:	4770      	bx	lr
   18ae8:	20024bc4 	.word	0x20024bc4

00018aec <z_priq_dumb_remove>:
}

void z_priq_dumb_remove(sys_dlist_t *pq, struct k_thread *thread)
{
#if defined(CONFIG_SWAP_NONATOMIC) && defined(CONFIG_SCHED_DUMB)
	if (pq == &_kernel.ready_q.runq && thread == _current &&
   18aec:	4b09      	ldr	r3, [pc, #36]	; (18b14 <z_priq_dumb_remove+0x28>)
   18aee:	f103 0228 	add.w	r2, r3, #40	; 0x28
   18af2:	4282      	cmp	r2, r0
   18af4:	d105      	bne.n	18b02 <z_priq_dumb_remove+0x16>
   18af6:	689b      	ldr	r3, [r3, #8]
   18af8:	428b      	cmp	r3, r1
   18afa:	d102      	bne.n	18b02 <z_priq_dumb_remove+0x16>
   18afc:	7b4b      	ldrb	r3, [r1, #13]
   18afe:	06db      	lsls	r3, r3, #27
   18b00:	d106      	bne.n	18b10 <z_priq_dumb_remove+0x24>
 * @return N/A
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	node->prev->next = node->next;
   18b02:	e9d1 3200 	ldrd	r3, r2, [r1]
   18b06:	6013      	str	r3, [r2, #0]
	node->next->prev = node->prev;
   18b08:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   18b0a:	2300      	movs	r3, #0
	node->prev = NULL;
   18b0c:	e9c1 3300 	strd	r3, r3, [r1]
#endif

	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));

	sys_dlist_remove(&thread->base.qnode_dlist);
}
   18b10:	4770      	bx	lr
   18b12:	bf00      	nop
   18b14:	20024bc4 	.word	0x20024bc4

00018b18 <update_cache>:
{
   18b18:	b538      	push	{r3, r4, r5, lr}
	struct k_thread *thread = _priq_run_best(&_kernel.ready_q.runq);
   18b1a:	4c0d      	ldr	r4, [pc, #52]	; (18b50 <update_cache+0x38>)
{
   18b1c:	4602      	mov	r2, r0
	struct k_thread *thread = _priq_run_best(&_kernel.ready_q.runq);
   18b1e:	f104 0028 	add.w	r0, r4, #40	; 0x28
   18b22:	f002 fe96 	bl	1b852 <z_priq_dumb_best>
	return thread ? thread : _current_cpu->idle_thread;
   18b26:	4605      	mov	r5, r0
   18b28:	b900      	cbnz	r0, 18b2c <update_cache+0x14>
   18b2a:	68e5      	ldr	r5, [r4, #12]
	if (preempt_ok != 0) {
   18b2c:	68a3      	ldr	r3, [r4, #8]
   18b2e:	b94a      	cbnz	r2, 18b44 <update_cache+0x2c>
	if (z_is_thread_prevented_from_running(_current)) {
   18b30:	7b5a      	ldrb	r2, [r3, #13]
   18b32:	06d2      	lsls	r2, r2, #27
   18b34:	d106      	bne.n	18b44 <update_cache+0x2c>
	if (IS_ENABLED(CONFIG_SWAP_NONATOMIC)
   18b36:	69aa      	ldr	r2, [r5, #24]
   18b38:	b922      	cbnz	r2, 18b44 <update_cache+0x2c>
	if (is_preempt(_current) || is_metairq(thread)) {
   18b3a:	89da      	ldrh	r2, [r3, #14]
   18b3c:	2a7f      	cmp	r2, #127	; 0x7f
   18b3e:	d901      	bls.n	18b44 <update_cache+0x2c>
		_kernel.ready_q.cache = _current;
   18b40:	6263      	str	r3, [r4, #36]	; 0x24
}
   18b42:	bd38      	pop	{r3, r4, r5, pc}
		if (thread != _current) {
   18b44:	429d      	cmp	r5, r3
   18b46:	d001      	beq.n	18b4c <update_cache+0x34>
			z_reset_time_slice();
   18b48:	f7ff ff7a 	bl	18a40 <z_reset_time_slice>
		_kernel.ready_q.cache = thread;
   18b4c:	6265      	str	r5, [r4, #36]	; 0x24
}
   18b4e:	e7f8      	b.n	18b42 <update_cache+0x2a>
   18b50:	20024bc4 	.word	0x20024bc4

00018b54 <k_sched_unlock>:
{
   18b54:	b510      	push	{r4, lr}
	__asm__ volatile(
   18b56:	f04f 0320 	mov.w	r3, #32
   18b5a:	f3ef 8411 	mrs	r4, BASEPRI
   18b5e:	f383 8811 	msr	BASEPRI, r3
   18b62:	f3bf 8f6f 	isb	sy
		++_current->base.sched_locked;
   18b66:	4b08      	ldr	r3, [pc, #32]	; (18b88 <k_sched_unlock+0x34>)
		update_cache(0);
   18b68:	2000      	movs	r0, #0
		++_current->base.sched_locked;
   18b6a:	689a      	ldr	r2, [r3, #8]
   18b6c:	7bd3      	ldrb	r3, [r2, #15]
   18b6e:	3301      	adds	r3, #1
   18b70:	73d3      	strb	r3, [r2, #15]
		update_cache(0);
   18b72:	f7ff ffd1 	bl	18b18 <update_cache>
	__asm__ volatile(
   18b76:	f384 8811 	msr	BASEPRI, r4
   18b7a:	f3bf 8f6f 	isb	sy
}
   18b7e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule_unlocked();
   18b82:	f002 be3e 	b.w	1b802 <z_reschedule_unlocked>
   18b86:	bf00      	nop
   18b88:	20024bc4 	.word	0x20024bc4

00018b8c <z_add_thread_to_ready_q>:
{
   18b8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	__asm__ volatile(
   18b8e:	f04f 0320 	mov.w	r3, #32
   18b92:	f3ef 8411 	mrs	r4, BASEPRI
   18b96:	f383 8811 	msr	BASEPRI, r3
   18b9a:	f3bf 8f6f 	isb	sy
	return list->head == list;
   18b9e:	4a15      	ldr	r2, [pc, #84]	; (18bf4 <z_add_thread_to_ready_q+0x68>)
   18ba0:	4611      	mov	r1, r2
   18ba2:	f851 3f28 	ldr.w	r3, [r1, #40]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   18ba6:	428b      	cmp	r3, r1
   18ba8:	d01d      	beq.n	18be6 <z_add_thread_to_ready_q+0x5a>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   18baa:	b1e3      	cbz	r3, 18be6 <z_add_thread_to_ready_q+0x5a>
   18bac:	6ad6      	ldr	r6, [r2, #44]	; 0x2c
	if (thread_1->base.prio < thread_2->base.prio) {
   18bae:	f990 500e 	ldrsb.w	r5, [r0, #14]
   18bb2:	f993 700e 	ldrsb.w	r7, [r3, #14]
   18bb6:	42af      	cmp	r7, r5
   18bb8:	dd10      	ble.n	18bdc <z_add_thread_to_ready_q+0x50>
	node->prev = successor->prev;
   18bba:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   18bbc:	e9c0 3200 	strd	r3, r2, [r0]
	successor->prev->next = node;
   18bc0:	6010      	str	r0, [r2, #0]
	successor->prev = node;
   18bc2:	6058      	str	r0, [r3, #4]
	thread->base.thread_state |= states;
   18bc4:	7b43      	ldrb	r3, [r0, #13]
   18bc6:	f063 037f 	orn	r3, r3, #127	; 0x7f
   18bca:	7343      	strb	r3, [r0, #13]
		update_cache(0);
   18bcc:	2000      	movs	r0, #0
   18bce:	f7ff ffa3 	bl	18b18 <update_cache>
	__asm__ volatile(
   18bd2:	f384 8811 	msr	BASEPRI, r4
   18bd6:	f3bf 8f6f 	isb	sy
}
   18bda:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return (node == list->tail) ? NULL : node->next;
   18bdc:	42b3      	cmp	r3, r6
   18bde:	d002      	beq.n	18be6 <z_add_thread_to_ready_q+0x5a>
   18be0:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   18be2:	2b00      	cmp	r3, #0
   18be4:	d1e5      	bne.n	18bb2 <z_add_thread_to_ready_q+0x26>
	node->prev = list->tail;
   18be6:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
	node->next = list;
   18be8:	6001      	str	r1, [r0, #0]
	node->prev = list->tail;
   18bea:	6043      	str	r3, [r0, #4]
	list->tail->next = node;
   18bec:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
   18bee:	6018      	str	r0, [r3, #0]
	list->tail = node;
   18bf0:	62d0      	str	r0, [r2, #44]	; 0x2c
   18bf2:	e7e7      	b.n	18bc4 <z_add_thread_to_ready_q+0x38>
   18bf4:	20024bc4 	.word	0x20024bc4

00018bf8 <z_move_thread_to_end_of_prio_q>:
{
   18bf8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   18bfa:	4604      	mov	r4, r0
	__asm__ volatile(
   18bfc:	f04f 0320 	mov.w	r3, #32
   18c00:	f3ef 8511 	mrs	r5, BASEPRI
   18c04:	f383 8811 	msr	BASEPRI, r3
   18c08:	f3bf 8f6f 	isb	sy
		if (z_is_thread_queued(thread)) {
   18c0c:	f990 300d 	ldrsb.w	r3, [r0, #13]
   18c10:	2b00      	cmp	r3, #0
   18c12:	da03      	bge.n	18c1c <z_move_thread_to_end_of_prio_q+0x24>
			_priq_run_remove(&_kernel.ready_q.runq, thread);
   18c14:	4601      	mov	r1, r0
   18c16:	4818      	ldr	r0, [pc, #96]	; (18c78 <z_move_thread_to_end_of_prio_q+0x80>)
   18c18:	f7ff ff68 	bl	18aec <z_priq_dumb_remove>
	return list->head == list;
   18c1c:	4a17      	ldr	r2, [pc, #92]	; (18c7c <z_move_thread_to_end_of_prio_q+0x84>)
	return sys_dlist_is_empty(list) ? NULL : list->head;
   18c1e:	f102 0128 	add.w	r1, r2, #40	; 0x28
   18c22:	e9d2 300a 	ldrd	r3, r0, [r2, #40]	; 0x28
   18c26:	428b      	cmp	r3, r1
   18c28:	d01f      	beq.n	18c6a <z_move_thread_to_end_of_prio_q+0x72>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   18c2a:	b1f3      	cbz	r3, 18c6a <z_move_thread_to_end_of_prio_q+0x72>
	if (thread_1->base.prio < thread_2->base.prio) {
   18c2c:	f994 600e 	ldrsb.w	r6, [r4, #14]
   18c30:	f993 700e 	ldrsb.w	r7, [r3, #14]
   18c34:	42b7      	cmp	r7, r6
   18c36:	dd13      	ble.n	18c60 <z_move_thread_to_end_of_prio_q+0x68>
	node->prev = successor->prev;
   18c38:	6859      	ldr	r1, [r3, #4]
	node->next = successor;
   18c3a:	e9c4 3100 	strd	r3, r1, [r4]
	successor->prev->next = node;
   18c3e:	600c      	str	r4, [r1, #0]
	successor->prev = node;
   18c40:	605c      	str	r4, [r3, #4]
   18c42:	7b63      	ldrb	r3, [r4, #13]
		update_cache(thread == _current);
   18c44:	6890      	ldr	r0, [r2, #8]
   18c46:	f063 037f 	orn	r3, r3, #127	; 0x7f
   18c4a:	7363      	strb	r3, [r4, #13]
   18c4c:	1b03      	subs	r3, r0, r4
   18c4e:	4258      	negs	r0, r3
   18c50:	4158      	adcs	r0, r3
   18c52:	f7ff ff61 	bl	18b18 <update_cache>
	__asm__ volatile(
   18c56:	f385 8811 	msr	BASEPRI, r5
   18c5a:	f3bf 8f6f 	isb	sy
}
   18c5e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return (node == list->tail) ? NULL : node->next;
   18c60:	4298      	cmp	r0, r3
   18c62:	d002      	beq.n	18c6a <z_move_thread_to_end_of_prio_q+0x72>
   18c64:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   18c66:	2b00      	cmp	r3, #0
   18c68:	d1e2      	bne.n	18c30 <z_move_thread_to_end_of_prio_q+0x38>
	node->prev = list->tail;
   18c6a:	e9c4 1000 	strd	r1, r0, [r4]
	list->tail->next = node;
   18c6e:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
   18c70:	601c      	str	r4, [r3, #0]
	list->tail = node;
   18c72:	62d4      	str	r4, [r2, #44]	; 0x2c
   18c74:	e7e5      	b.n	18c42 <z_move_thread_to_end_of_prio_q+0x4a>
   18c76:	bf00      	nop
   18c78:	20024bec 	.word	0x20024bec
   18c7c:	20024bc4 	.word	0x20024bc4

00018c80 <z_time_slice>:
	if (pending_current == _current) {
   18c80:	4a15      	ldr	r2, [pc, #84]	; (18cd8 <z_time_slice+0x58>)
   18c82:	4916      	ldr	r1, [pc, #88]	; (18cdc <z_time_slice+0x5c>)
{
   18c84:	b538      	push	{r3, r4, r5, lr}
	if (pending_current == _current) {
   18c86:	680c      	ldr	r4, [r1, #0]
   18c88:	6893      	ldr	r3, [r2, #8]
   18c8a:	42a3      	cmp	r3, r4
   18c8c:	4614      	mov	r4, r2
   18c8e:	d103      	bne.n	18c98 <z_time_slice+0x18>
}
   18c90:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
			z_reset_time_slice();
   18c94:	f7ff bed4 	b.w	18a40 <z_reset_time_slice>
	pending_current = NULL;
   18c98:	2500      	movs	r5, #0
   18c9a:	600d      	str	r5, [r1, #0]
	if (slice_time && sliceable(_current)) {
   18c9c:	4910      	ldr	r1, [pc, #64]	; (18ce0 <z_time_slice+0x60>)
   18c9e:	6809      	ldr	r1, [r1, #0]
   18ca0:	b1b9      	cbz	r1, 18cd2 <z_time_slice+0x52>
		&& !z_is_thread_timeout_active(thread);
   18ca2:	89d9      	ldrh	r1, [r3, #14]
   18ca4:	297f      	cmp	r1, #127	; 0x7f
   18ca6:	d814      	bhi.n	18cd2 <z_time_slice+0x52>
		&& !z_is_prio_higher(thread->base.prio, slice_max_prio)
   18ca8:	490e      	ldr	r1, [pc, #56]	; (18ce4 <z_time_slice+0x64>)
   18caa:	f993 500e 	ldrsb.w	r5, [r3, #14]
   18cae:	6809      	ldr	r1, [r1, #0]
   18cb0:	428d      	cmp	r5, r1
   18cb2:	db0e      	blt.n	18cd2 <z_time_slice+0x52>
		&& !z_is_idle_thread_object(thread)
   18cb4:	490c      	ldr	r1, [pc, #48]	; (18ce8 <z_time_slice+0x68>)
   18cb6:	428b      	cmp	r3, r1
   18cb8:	d00b      	beq.n	18cd2 <z_time_slice+0x52>
		&& !z_is_thread_timeout_active(thread);
   18cba:	6999      	ldr	r1, [r3, #24]
   18cbc:	b949      	cbnz	r1, 18cd2 <z_time_slice+0x52>
		if (ticks >= _current_cpu->slice_ticks) {
   18cbe:	6911      	ldr	r1, [r2, #16]
   18cc0:	4281      	cmp	r1, r0
   18cc2:	dc03      	bgt.n	18ccc <z_time_slice+0x4c>
			z_move_thread_to_end_of_prio_q(_current);
   18cc4:	4618      	mov	r0, r3
   18cc6:	f7ff ff97 	bl	18bf8 <z_move_thread_to_end_of_prio_q>
   18cca:	e7e1      	b.n	18c90 <z_time_slice+0x10>
			_current_cpu->slice_ticks -= ticks;
   18ccc:	1a09      	subs	r1, r1, r0
   18cce:	6111      	str	r1, [r2, #16]
}
   18cd0:	bd38      	pop	{r3, r4, r5, pc}
		_current_cpu->slice_ticks = 0;
   18cd2:	2300      	movs	r3, #0
   18cd4:	6123      	str	r3, [r4, #16]
   18cd6:	e7fb      	b.n	18cd0 <z_time_slice+0x50>
   18cd8:	20024bc4 	.word	0x20024bc4
   18cdc:	20024bf8 	.word	0x20024bf8
   18ce0:	20024c00 	.word	0x20024c00
   18ce4:	20024bfc 	.word	0x20024bfc
   18ce8:	20020a00 	.word	0x20020a00

00018cec <z_thread_single_suspend>:
{
   18cec:	b570      	push	{r4, r5, r6, lr}
   18cee:	4604      	mov	r4, r0
	z_add_timeout(&th->base.timeout, z_thread_timeout, ticks);
}

static inline int z_abort_thread_timeout(struct k_thread *thread)
{
	return z_abort_timeout(&thread->base.timeout);
   18cf0:	3018      	adds	r0, #24
   18cf2:	f002 fe4e 	bl	1b992 <z_abort_timeout>
	__asm__ volatile(
   18cf6:	f04f 0320 	mov.w	r3, #32
   18cfa:	f3ef 8611 	mrs	r6, BASEPRI
   18cfe:	f383 8811 	msr	BASEPRI, r3
   18d02:	f3bf 8f6f 	isb	sy
		if (z_is_thread_queued(thread)) {
   18d06:	f994 300d 	ldrsb.w	r3, [r4, #13]
   18d0a:	2b00      	cmp	r3, #0
   18d0c:	da07      	bge.n	18d1e <z_thread_single_suspend+0x32>
			_priq_run_remove(&_kernel.ready_q.runq, thread);
   18d0e:	4621      	mov	r1, r4
   18d10:	480e      	ldr	r0, [pc, #56]	; (18d4c <z_thread_single_suspend+0x60>)
   18d12:	f7ff feeb 	bl	18aec <z_priq_dumb_remove>
	thread->base.thread_state &= ~states;
   18d16:	7b63      	ldrb	r3, [r4, #13]
   18d18:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   18d1c:	7363      	strb	r3, [r4, #13]
		update_cache(thread == _current);
   18d1e:	4d0c      	ldr	r5, [pc, #48]	; (18d50 <z_thread_single_suspend+0x64>)
	thread->base.thread_state |= _THREAD_SUSPENDED;
   18d20:	7b63      	ldrb	r3, [r4, #13]
   18d22:	68a8      	ldr	r0, [r5, #8]
   18d24:	f043 0310 	orr.w	r3, r3, #16
   18d28:	7363      	strb	r3, [r4, #13]
   18d2a:	1b03      	subs	r3, r0, r4
   18d2c:	4258      	negs	r0, r3
   18d2e:	4158      	adcs	r0, r3
   18d30:	f7ff fef2 	bl	18b18 <update_cache>
	__asm__ volatile(
   18d34:	f386 8811 	msr	BASEPRI, r6
   18d38:	f3bf 8f6f 	isb	sy
	if (thread == _current) {
   18d3c:	68ab      	ldr	r3, [r5, #8]
   18d3e:	42a3      	cmp	r3, r4
   18d40:	d103      	bne.n	18d4a <z_thread_single_suspend+0x5e>
}
   18d42:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		z_reschedule_unlocked();
   18d46:	f002 bd5c 	b.w	1b802 <z_reschedule_unlocked>
}
   18d4a:	bd70      	pop	{r4, r5, r6, pc}
   18d4c:	20024bec 	.word	0x20024bec
   18d50:	20024bc4 	.word	0x20024bc4

00018d54 <z_thread_single_abort>:
	if (thread->fn_abort != NULL) {
   18d54:	6d03      	ldr	r3, [r0, #80]	; 0x50
{
   18d56:	b570      	push	{r4, r5, r6, lr}
   18d58:	4604      	mov	r4, r0
	if (thread->fn_abort != NULL) {
   18d5a:	b103      	cbz	r3, 18d5e <z_thread_single_abort+0xa>
		thread->fn_abort();
   18d5c:	4798      	blx	r3
   18d5e:	f104 0018 	add.w	r0, r4, #24
   18d62:	f002 fe16 	bl	1b992 <z_abort_timeout>
	__asm__ volatile(
   18d66:	f04f 0320 	mov.w	r3, #32
   18d6a:	f3ef 8511 	mrs	r5, BASEPRI
   18d6e:	f383 8811 	msr	BASEPRI, r3
   18d72:	f3bf 8f6f 	isb	sy
		if (z_is_thread_ready(thread)) {
   18d76:	4620      	mov	r0, r4
   18d78:	f002 fcf1 	bl	1b75e <z_is_thread_ready>
   18d7c:	4606      	mov	r6, r0
   18d7e:	b1d8      	cbz	r0, 18db8 <z_thread_single_abort+0x64>
			if (z_is_thread_queued(thread)) {
   18d80:	f994 300d 	ldrsb.w	r3, [r4, #13]
   18d84:	2b00      	cmp	r3, #0
   18d86:	da07      	bge.n	18d98 <z_thread_single_abort+0x44>
				_priq_run_remove(&_kernel.ready_q.runq,
   18d88:	4621      	mov	r1, r4
   18d8a:	4812      	ldr	r0, [pc, #72]	; (18dd4 <z_thread_single_abort+0x80>)
   18d8c:	f7ff feae 	bl	18aec <z_priq_dumb_remove>
	thread->base.thread_state &= ~states;
   18d90:	7b63      	ldrb	r3, [r4, #13]
   18d92:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   18d96:	7363      	strb	r3, [r4, #13]
			update_cache(thread == _current);
   18d98:	4b0f      	ldr	r3, [pc, #60]	; (18dd8 <z_thread_single_abort+0x84>)
   18d9a:	6898      	ldr	r0, [r3, #8]
   18d9c:	1b02      	subs	r2, r0, r4
   18d9e:	4250      	negs	r0, r2
   18da0:	4150      	adcs	r0, r2
   18da2:	f7ff feb9 	bl	18b18 <update_cache>
		thread->base.thread_state |= mask;
   18da6:	7b63      	ldrb	r3, [r4, #13]
   18da8:	f043 0308 	orr.w	r3, r3, #8
   18dac:	7363      	strb	r3, [r4, #13]
	__asm__ volatile(
   18dae:	f385 8811 	msr	BASEPRI, r5
   18db2:	f3bf 8f6f 	isb	sy
}
   18db6:	bd70      	pop	{r4, r5, r6, pc}
			if (z_is_thread_pending(thread)) {
   18db8:	7b63      	ldrb	r3, [r4, #13]
   18dba:	079b      	lsls	r3, r3, #30
   18dbc:	d5f3      	bpl.n	18da6 <z_thread_single_abort+0x52>
				_priq_wait_remove(&pended_on(thread)->waitq,
   18dbe:	4621      	mov	r1, r4
   18dc0:	68a0      	ldr	r0, [r4, #8]
   18dc2:	f7ff fe93 	bl	18aec <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
   18dc6:	7b63      	ldrb	r3, [r4, #13]
				thread->base.pended_on = NULL;
   18dc8:	60a6      	str	r6, [r4, #8]
   18dca:	f023 0302 	bic.w	r3, r3, #2
   18dce:	7363      	strb	r3, [r4, #13]
   18dd0:	e7e9      	b.n	18da6 <z_thread_single_abort+0x52>
   18dd2:	bf00      	nop
   18dd4:	20024bec 	.word	0x20024bec
   18dd8:	20024bc4 	.word	0x20024bc4

00018ddc <z_remove_thread_from_ready_q>:
{
   18ddc:	b538      	push	{r3, r4, r5, lr}
   18dde:	4604      	mov	r4, r0
	__asm__ volatile(
   18de0:	f04f 0320 	mov.w	r3, #32
   18de4:	f3ef 8511 	mrs	r5, BASEPRI
   18de8:	f383 8811 	msr	BASEPRI, r3
   18dec:	f3bf 8f6f 	isb	sy
		if (z_is_thread_queued(thread)) {
   18df0:	f990 300d 	ldrsb.w	r3, [r0, #13]
   18df4:	2b00      	cmp	r3, #0
   18df6:	da07      	bge.n	18e08 <z_remove_thread_from_ready_q+0x2c>
			_priq_run_remove(&_kernel.ready_q.runq, thread);
   18df8:	4601      	mov	r1, r0
   18dfa:	4809      	ldr	r0, [pc, #36]	; (18e20 <z_remove_thread_from_ready_q+0x44>)
   18dfc:	f7ff fe76 	bl	18aec <z_priq_dumb_remove>
	thread->base.thread_state &= ~states;
   18e00:	7b63      	ldrb	r3, [r4, #13]
   18e02:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   18e06:	7363      	strb	r3, [r4, #13]
		update_cache(thread == _current);
   18e08:	4b06      	ldr	r3, [pc, #24]	; (18e24 <z_remove_thread_from_ready_q+0x48>)
   18e0a:	6898      	ldr	r0, [r3, #8]
   18e0c:	1b03      	subs	r3, r0, r4
   18e0e:	4258      	negs	r0, r3
   18e10:	4158      	adcs	r0, r3
   18e12:	f7ff fe81 	bl	18b18 <update_cache>
	__asm__ volatile(
   18e16:	f385 8811 	msr	BASEPRI, r5
   18e1a:	f3bf 8f6f 	isb	sy
}
   18e1e:	bd38      	pop	{r3, r4, r5, pc}
   18e20:	20024bec 	.word	0x20024bec
   18e24:	20024bc4 	.word	0x20024bc4

00018e28 <pend>:
{
   18e28:	b570      	push	{r4, r5, r6, lr}
   18e2a:	4604      	mov	r4, r0
   18e2c:	460d      	mov	r5, r1
   18e2e:	4616      	mov	r6, r2
	z_remove_thread_from_ready_q(thread);
   18e30:	f7ff ffd4 	bl	18ddc <z_remove_thread_from_ready_q>
	thread->base.thread_state |= _THREAD_PENDING;
   18e34:	7b63      	ldrb	r3, [r4, #13]
   18e36:	f043 0302 	orr.w	r3, r3, #2
   18e3a:	7363      	strb	r3, [r4, #13]
	if (wait_q != NULL) {
   18e3c:	b17d      	cbz	r5, 18e5e <pend+0x36>
	return list->head == list;
   18e3e:	682b      	ldr	r3, [r5, #0]
		thread->base.pended_on = wait_q;
   18e40:	60a5      	str	r5, [r4, #8]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   18e42:	429d      	cmp	r5, r3
   18e44:	d029      	beq.n	18e9a <pend+0x72>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   18e46:	b343      	cbz	r3, 18e9a <pend+0x72>
	if (thread_1->base.prio < thread_2->base.prio) {
   18e48:	f994 200e 	ldrsb.w	r2, [r4, #14]
   18e4c:	f993 100e 	ldrsb.w	r1, [r3, #14]
   18e50:	4291      	cmp	r1, r2
   18e52:	dd1c      	ble.n	18e8e <pend+0x66>
	node->prev = successor->prev;
   18e54:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   18e56:	e9c4 3200 	strd	r3, r2, [r4]
	successor->prev->next = node;
   18e5a:	6014      	str	r4, [r2, #0]
	successor->prev = node;
   18e5c:	605c      	str	r4, [r3, #4]
	if (timeout != K_FOREVER) {
   18e5e:	1c73      	adds	r3, r6, #1
   18e60:	d022      	beq.n	18ea8 <pend+0x80>
   18e62:	f44f 4500 	mov.w	r5, #32768	; 0x8000
   18e66:	f240 30e7 	movw	r0, #999	; 0x3e7
   18e6a:	2100      	movs	r1, #0
   18e6c:	ea26 76e6 	bic.w	r6, r6, r6, asr #31
   18e70:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   18e74:	fbc5 0106 	smlal	r0, r1, r5, r6
   18e78:	2300      	movs	r3, #0
   18e7a:	f7f3 f9df 	bl	c23c <__aeabi_uldivmod>
	z_add_timeout(&th->base.timeout, z_thread_timeout, ticks);
   18e7e:	490b      	ldr	r1, [pc, #44]	; (18eac <pend+0x84>)
   18e80:	1c42      	adds	r2, r0, #1
   18e82:	f104 0018 	add.w	r0, r4, #24
}
   18e86:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   18e8a:	f000 baed 	b.w	19468 <z_add_timeout>
	return (node == list->tail) ? NULL : node->next;
   18e8e:	6869      	ldr	r1, [r5, #4]
   18e90:	428b      	cmp	r3, r1
   18e92:	d002      	beq.n	18e9a <pend+0x72>
   18e94:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   18e96:	2b00      	cmp	r3, #0
   18e98:	d1d8      	bne.n	18e4c <pend+0x24>
	node->prev = list->tail;
   18e9a:	686b      	ldr	r3, [r5, #4]
	node->next = list;
   18e9c:	6025      	str	r5, [r4, #0]
	node->prev = list->tail;
   18e9e:	6063      	str	r3, [r4, #4]
	list->tail->next = node;
   18ea0:	686b      	ldr	r3, [r5, #4]
   18ea2:	601c      	str	r4, [r3, #0]
	list->tail = node;
   18ea4:	606c      	str	r4, [r5, #4]
   18ea6:	e7da      	b.n	18e5e <pend+0x36>
}
   18ea8:	bd70      	pop	{r4, r5, r6, pc}
   18eaa:	bf00      	nop
   18eac:	0001b85f 	.word	0x0001b85f

00018eb0 <z_pend_curr_irqlock>:
{
   18eb0:	b570      	push	{r4, r5, r6, lr}
   18eb2:	4606      	mov	r6, r0
	pend(_current, wait_q, timeout);
   18eb4:	4d0e      	ldr	r5, [pc, #56]	; (18ef0 <z_pend_curr_irqlock+0x40>)
	pending_current = _current;
   18eb6:	4c0f      	ldr	r4, [pc, #60]	; (18ef4 <z_pend_curr_irqlock+0x44>)
	pend(_current, wait_q, timeout);
   18eb8:	68a8      	ldr	r0, [r5, #8]
   18eba:	f7ff ffb5 	bl	18e28 <pend>
	pending_current = _current;
   18ebe:	68ab      	ldr	r3, [r5, #8]
   18ec0:	4630      	mov	r0, r6
   18ec2:	6023      	str	r3, [r4, #0]
   18ec4:	f7f4 fcc4 	bl	d850 <arch_swap>
	__asm__ volatile(
   18ec8:	f04f 0220 	mov.w	r2, #32
   18ecc:	f3ef 8311 	mrs	r3, BASEPRI
   18ed0:	f382 8811 	msr	BASEPRI, r2
   18ed4:	f3bf 8f6f 	isb	sy
		if (pending_current == _current) {
   18ed8:	6822      	ldr	r2, [r4, #0]
   18eda:	68a9      	ldr	r1, [r5, #8]
   18edc:	4291      	cmp	r1, r2
			pending_current = NULL;
   18ede:	bf04      	itt	eq
   18ee0:	2200      	moveq	r2, #0
   18ee2:	6022      	streq	r2, [r4, #0]
	__asm__ volatile(
   18ee4:	f383 8811 	msr	BASEPRI, r3
   18ee8:	f3bf 8f6f 	isb	sy
}
   18eec:	bd70      	pop	{r4, r5, r6, pc}
   18eee:	bf00      	nop
   18ef0:	20024bc4 	.word	0x20024bc4
   18ef4:	20024bf8 	.word	0x20024bf8

00018ef8 <z_pend_curr>:
{
   18ef8:	b510      	push	{r4, lr}
   18efa:	460c      	mov	r4, r1
   18efc:	4611      	mov	r1, r2
	pending_current = _current;
   18efe:	4a06      	ldr	r2, [pc, #24]	; (18f18 <z_pend_curr+0x20>)
   18f00:	6890      	ldr	r0, [r2, #8]
   18f02:	4a06      	ldr	r2, [pc, #24]	; (18f1c <z_pend_curr+0x24>)
   18f04:	6010      	str	r0, [r2, #0]
	pend(_current, wait_q, timeout);
   18f06:	461a      	mov	r2, r3
   18f08:	f7ff ff8e 	bl	18e28 <pend>
   18f0c:	4620      	mov	r0, r4
}
   18f0e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   18f12:	f7f4 bc9d 	b.w	d850 <arch_swap>
   18f16:	bf00      	nop
   18f18:	20024bc4 	.word	0x20024bc4
   18f1c:	20024bf8 	.word	0x20024bf8

00018f20 <z_tick_sleep.part.19>:
	z_impl_k_yield();
}
#include <syscalls/k_yield_mrsh.c>
#endif

static s32_t z_tick_sleep(s32_t ticks)
   18f20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (ticks == 0) {
		k_yield();
		return 0;
	}

	ticks += _TICK_ALIGN;
   18f22:	1c46      	adds	r6, r0, #1
	expected_wakeup_time = ticks + z_tick_get_32();
   18f24:	f002 fd75 	bl	1ba12 <z_tick_get_32>
   18f28:	1834      	adds	r4, r6, r0
	__asm__ volatile(
   18f2a:	f04f 0320 	mov.w	r3, #32
   18f2e:	f3ef 8711 	mrs	r7, BASEPRI
   18f32:	f383 8811 	msr	BASEPRI, r3
   18f36:	f3bf 8f6f 	isb	sy
	 */
	struct k_spinlock local_lock = {};
	k_spinlock_key_t key = k_spin_lock(&local_lock);

#if defined(CONFIG_TIMESLICING) && defined(CONFIG_SWAP_NONATOMIC)
	pending_current = _current;
   18f3a:	4d0d      	ldr	r5, [pc, #52]	; (18f70 <z_tick_sleep.part.19+0x50>)
   18f3c:	4b0d      	ldr	r3, [pc, #52]	; (18f74 <z_tick_sleep.part.19+0x54>)
   18f3e:	68a8      	ldr	r0, [r5, #8]
   18f40:	6018      	str	r0, [r3, #0]
#endif
	z_remove_thread_from_ready_q(_current);
   18f42:	f7ff ff4b 	bl	18ddc <z_remove_thread_from_ready_q>
   18f46:	68a8      	ldr	r0, [r5, #8]
   18f48:	490b      	ldr	r1, [pc, #44]	; (18f78 <z_tick_sleep.part.19+0x58>)
   18f4a:	4632      	mov	r2, r6
   18f4c:	3018      	adds	r0, #24
   18f4e:	f000 fa8b 	bl	19468 <z_add_timeout>
	z_add_thread_timeout(_current, ticks);
	z_mark_thread_as_suspended(_current);
   18f52:	68aa      	ldr	r2, [r5, #8]
   18f54:	4638      	mov	r0, r7
	thread->base.thread_state |= _THREAD_SUSPENDED;
   18f56:	7b53      	ldrb	r3, [r2, #13]
   18f58:	f043 0310 	orr.w	r3, r3, #16
   18f5c:	7353      	strb	r3, [r2, #13]
   18f5e:	f7f4 fc77 	bl	d850 <arch_swap>

	(void)z_swap(&local_lock, key);

	__ASSERT(!z_is_thread_state_set(_current, _THREAD_SUSPENDED), "");

	ticks = expected_wakeup_time - z_tick_get_32();
   18f62:	f002 fd56 	bl	1ba12 <z_tick_get_32>
   18f66:	1a20      	subs	r0, r4, r0
		return ticks;
	}
#endif

	return 0;
}
   18f68:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   18f6c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   18f6e:	bf00      	nop
   18f70:	20024bc4 	.word	0x20024bc4
   18f74:	20024bf8 	.word	0x20024bf8
   18f78:	0001b85f 	.word	0x0001b85f

00018f7c <z_set_prio>:
{
   18f7c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   18f80:	4604      	mov	r4, r0
   18f82:	f04f 0320 	mov.w	r3, #32
   18f86:	f3ef 8911 	mrs	r9, BASEPRI
   18f8a:	f383 8811 	msr	BASEPRI, r3
   18f8e:	f3bf 8f6f 	isb	sy
		need_sched = z_is_thread_ready(thread);
   18f92:	f002 fbe4 	bl	1b75e <z_is_thread_ready>
		if (need_sched) {
   18f96:	b24e      	sxtb	r6, r1
   18f98:	4680      	mov	r8, r0
   18f9a:	b360      	cbz	r0, 18ff6 <z_set_prio+0x7a>
				_priq_run_remove(&_kernel.ready_q.runq, thread);
   18f9c:	4d17      	ldr	r5, [pc, #92]	; (18ffc <z_set_prio+0x80>)
   18f9e:	4621      	mov	r1, r4
   18fa0:	f105 0728 	add.w	r7, r5, #40	; 0x28
   18fa4:	4638      	mov	r0, r7
   18fa6:	f7ff fda1 	bl	18aec <z_priq_dumb_remove>
	return list->head == list;
   18faa:	6aab      	ldr	r3, [r5, #40]	; 0x28
				thread->base.prio = prio;
   18fac:	73a6      	strb	r6, [r4, #14]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   18fae:	42bb      	cmp	r3, r7
   18fb0:	462a      	mov	r2, r5
   18fb2:	d019      	beq.n	18fe8 <z_set_prio+0x6c>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   18fb4:	b1c3      	cbz	r3, 18fe8 <z_set_prio+0x6c>
   18fb6:	6ae9      	ldr	r1, [r5, #44]	; 0x2c
	if (thread_1->base.prio < thread_2->base.prio) {
   18fb8:	f993 000e 	ldrsb.w	r0, [r3, #14]
   18fbc:	42b0      	cmp	r0, r6
   18fbe:	dd0e      	ble.n	18fde <z_set_prio+0x62>
	node->prev = successor->prev;
   18fc0:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   18fc2:	e9c4 3200 	strd	r3, r2, [r4]
	successor->prev->next = node;
   18fc6:	6014      	str	r4, [r2, #0]
	successor->prev = node;
   18fc8:	605c      	str	r4, [r3, #4]
			update_cache(1);
   18fca:	2001      	movs	r0, #1
   18fcc:	f7ff fda4 	bl	18b18 <update_cache>
	__asm__ volatile(
   18fd0:	f389 8811 	msr	BASEPRI, r9
   18fd4:	f3bf 8f6f 	isb	sy
}
   18fd8:	4640      	mov	r0, r8
   18fda:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	return (node == list->tail) ? NULL : node->next;
   18fde:	4299      	cmp	r1, r3
   18fe0:	d002      	beq.n	18fe8 <z_set_prio+0x6c>
   18fe2:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   18fe4:	2b00      	cmp	r3, #0
   18fe6:	d1e7      	bne.n	18fb8 <z_set_prio+0x3c>
	node->prev = list->tail;
   18fe8:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
	node->next = list;
   18fea:	6027      	str	r7, [r4, #0]
	node->prev = list->tail;
   18fec:	6063      	str	r3, [r4, #4]
	list->tail->next = node;
   18fee:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
   18ff0:	601c      	str	r4, [r3, #0]
	list->tail = node;
   18ff2:	62d4      	str	r4, [r2, #44]	; 0x2c
   18ff4:	e7e9      	b.n	18fca <z_set_prio+0x4e>
			thread->base.prio = prio;
   18ff6:	73a6      	strb	r6, [r4, #14]
   18ff8:	e7ea      	b.n	18fd0 <z_set_prio+0x54>
   18ffa:	bf00      	nop
   18ffc:	20024bc4 	.word	0x20024bc4

00019000 <z_sched_init>:
	k_sched_time_slice_set(CONFIG_TIMESLICE_SIZE,
   19000:	2100      	movs	r1, #0
	list->head = (sys_dnode_t *)list;
   19002:	4b04      	ldr	r3, [pc, #16]	; (19014 <z_sched_init+0x14>)
   19004:	4608      	mov	r0, r1
   19006:	f103 0228 	add.w	r2, r3, #40	; 0x28
	list->tail = (sys_dnode_t *)list;
   1900a:	e9c3 220a 	strd	r2, r2, [r3, #40]	; 0x28
   1900e:	f7ff bd2d 	b.w	18a6c <k_sched_time_slice_set>
   19012:	bf00      	nop
   19014:	20024bc4 	.word	0x20024bc4

00019018 <z_impl_k_yield>:
{
   19018:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (!z_is_idle_thread_object(_current)) {
   1901a:	4c23      	ldr	r4, [pc, #140]	; (190a8 <z_impl_k_yield+0x90>)
   1901c:	4b23      	ldr	r3, [pc, #140]	; (190ac <z_impl_k_yield+0x94>)
   1901e:	68a2      	ldr	r2, [r4, #8]
   19020:	429a      	cmp	r2, r3
   19022:	d029      	beq.n	19078 <z_impl_k_yield+0x60>
	__asm__ volatile(
   19024:	f04f 0320 	mov.w	r3, #32
   19028:	f3ef 8611 	mrs	r6, BASEPRI
   1902c:	f383 8811 	msr	BASEPRI, r3
   19030:	f3bf 8f6f 	isb	sy
				_priq_run_remove(&_kernel.ready_q.runq,
   19034:	f104 0528 	add.w	r5, r4, #40	; 0x28
   19038:	68a1      	ldr	r1, [r4, #8]
   1903a:	4628      	mov	r0, r5
   1903c:	f7ff fd56 	bl	18aec <z_priq_dumb_remove>
	return list->head == list;
   19040:	6aa2      	ldr	r2, [r4, #40]	; 0x28
			_priq_run_add(&_kernel.ready_q.runq, _current);
   19042:	68a3      	ldr	r3, [r4, #8]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   19044:	42aa      	cmp	r2, r5
   19046:	d028      	beq.n	1909a <z_impl_k_yield+0x82>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   19048:	b33a      	cbz	r2, 1909a <z_impl_k_yield+0x82>
   1904a:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
	if (thread_1->base.prio < thread_2->base.prio) {
   1904c:	f993 100e 	ldrsb.w	r1, [r3, #14]
   19050:	f992 700e 	ldrsb.w	r7, [r2, #14]
   19054:	428f      	cmp	r7, r1
   19056:	dd1b      	ble.n	19090 <z_impl_k_yield+0x78>
	node->prev = successor->prev;
   19058:	6851      	ldr	r1, [r2, #4]
	node->next = successor;
   1905a:	e9c3 2100 	strd	r2, r1, [r3]
	successor->prev->next = node;
   1905e:	600b      	str	r3, [r1, #0]
	successor->prev = node;
   19060:	6053      	str	r3, [r2, #4]
	thread->base.thread_state |= states;
   19062:	7b5a      	ldrb	r2, [r3, #13]
			update_cache(1);
   19064:	2001      	movs	r0, #1
   19066:	f062 027f 	orn	r2, r2, #127	; 0x7f
   1906a:	735a      	strb	r2, [r3, #13]
   1906c:	f7ff fd54 	bl	18b18 <update_cache>
	__asm__ volatile(
   19070:	f386 8811 	msr	BASEPRI, r6
   19074:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
   19078:	f04f 0320 	mov.w	r3, #32
   1907c:	f3ef 8011 	mrs	r0, BASEPRI
   19080:	f383 8811 	msr	BASEPRI, r3
   19084:	f3bf 8f6f 	isb	sy
}
   19088:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   1908c:	f7f4 bbe0 	b.w	d850 <arch_swap>
	return (node == list->tail) ? NULL : node->next;
   19090:	4282      	cmp	r2, r0
   19092:	d002      	beq.n	1909a <z_impl_k_yield+0x82>
   19094:	6812      	ldr	r2, [r2, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   19096:	2a00      	cmp	r2, #0
   19098:	d1da      	bne.n	19050 <z_impl_k_yield+0x38>
	node->prev = list->tail;
   1909a:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
	node->next = list;
   1909c:	601d      	str	r5, [r3, #0]
	node->prev = list->tail;
   1909e:	605a      	str	r2, [r3, #4]
	list->tail->next = node;
   190a0:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
   190a2:	6013      	str	r3, [r2, #0]
	list->tail = node;
   190a4:	62e3      	str	r3, [r4, #44]	; 0x2c
   190a6:	e7dc      	b.n	19062 <z_impl_k_yield+0x4a>
   190a8:	20024bc4 	.word	0x20024bc4
   190ac:	20020a00 	.word	0x20020a00

000190b0 <z_impl_k_sleep>:

s32_t z_impl_k_sleep(int ms)
{
   190b0:	b538      	push	{r3, r4, r5, lr}
	s32_t ticks;

	__ASSERT(!arch_is_in_isr(), "");

	if (ms == K_FOREVER) {
   190b2:	1c43      	adds	r3, r0, #1
{
   190b4:	4604      	mov	r4, r0
	if (ms == K_FOREVER) {
   190b6:	d105      	bne.n	190c4 <z_impl_k_sleep+0x14>
		k_thread_suspend(_current);
   190b8:	4b10      	ldr	r3, [pc, #64]	; (190fc <z_impl_k_sleep+0x4c>)
   190ba:	6898      	ldr	r0, [r3, #8]
	z_impl_k_thread_suspend(thread);
   190bc:	f000 f8fc 	bl	192b8 <z_impl_k_thread_suspend>
	}

	ticks = k_ms_to_ticks_ceil32(ms);
	ticks = z_tick_sleep(ticks);
	return k_ticks_to_ms_floor64(ticks);
}
   190c0:	4620      	mov	r0, r4
   190c2:	bd38      	pop	{r3, r4, r5, pc}
   190c4:	f44f 4500 	mov.w	r5, #32768	; 0x8000
   190c8:	f240 30e7 	movw	r0, #999	; 0x3e7
   190cc:	2100      	movs	r1, #0
   190ce:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   190d2:	fbe5 0104 	umlal	r0, r1, r5, r4
   190d6:	2300      	movs	r3, #0
   190d8:	f7f3 f8b0 	bl	c23c <__aeabi_uldivmod>
	if (ticks == 0) {
   190dc:	4604      	mov	r4, r0
   190de:	b948      	cbnz	r0, 190f4 <z_impl_k_sleep+0x44>
	z_impl_k_yield();
   190e0:	f7ff ff9a 	bl	19018 <z_impl_k_yield>
		} else {
			return (t * to_hz + off) / from_hz;
   190e4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   190e8:	fb84 0100 	smull	r0, r1, r4, r0
   190ec:	0bc4      	lsrs	r4, r0, #15
   190ee:	ea44 4441 	orr.w	r4, r4, r1, lsl #17
	return k_ticks_to_ms_floor64(ticks);
   190f2:	e7e5      	b.n	190c0 <z_impl_k_sleep+0x10>
   190f4:	f7ff ff14 	bl	18f20 <z_tick_sleep.part.19>
   190f8:	4604      	mov	r4, r0
   190fa:	e7f3      	b.n	190e4 <z_impl_k_sleep+0x34>
   190fc:	20024bc4 	.word	0x20024bc4

00019100 <z_impl_k_current_get>:
#endif

k_tid_t z_impl_k_current_get(void)
{
	return _current;
}
   19100:	4b01      	ldr	r3, [pc, #4]	; (19108 <z_impl_k_current_get+0x8>)
   19102:	6898      	ldr	r0, [r3, #8]
   19104:	4770      	bx	lr
   19106:	bf00      	nop
   19108:	20024bc4 	.word	0x20024bc4

0001910c <z_impl_k_sem_give>:
	ARG_UNUSED(sem);
#endif
}

void z_impl_k_sem_give(struct k_sem *sem)
{
   1910c:	b570      	push	{r4, r5, r6, lr}
   1910e:	4604      	mov	r4, r0
   19110:	f04f 0320 	mov.w	r3, #32
   19114:	f3ef 8611 	mrs	r6, BASEPRI
   19118:	f383 8811 	msr	BASEPRI, r3
   1911c:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_thread *thread = z_unpend_first_thread(&sem->wait_q);
   19120:	f002 fbce 	bl	1b8c0 <z_unpend_first_thread>

	sys_trace_void(SYS_TRACE_ID_SEMA_GIVE);

	if (thread != NULL) {
   19124:	4605      	mov	r5, r0
   19126:	b170      	cbz	r0, 19146 <z_impl_k_sem_give+0x3a>
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
   19128:	7b43      	ldrb	r3, [r0, #13]
   1912a:	06db      	lsls	r3, r3, #27
   1912c:	d103      	bne.n	19136 <z_impl_k_sem_give+0x2a>
	if (z_is_thread_ready(thread)) {
   1912e:	6983      	ldr	r3, [r0, #24]
   19130:	b90b      	cbnz	r3, 19136 <z_impl_k_sem_give+0x2a>
		z_add_thread_to_ready_q(thread);
   19132:	f7ff fd2b 	bl	18b8c <z_add_thread_to_ready_q>
   19136:	2300      	movs	r3, #0
   19138:	66ab      	str	r3, [r5, #104]	; 0x68
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
		handle_poll_events(sem);
	}

	sys_trace_end_call(SYS_TRACE_ID_SEMA_GIVE);
	z_reschedule(&lock, key);
   1913a:	4631      	mov	r1, r6
}
   1913c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	z_reschedule(&lock, key);
   19140:	4807      	ldr	r0, [pc, #28]	; (19160 <z_impl_k_sem_give+0x54>)
   19142:	f002 bb47 	b.w	1b7d4 <z_reschedule>
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
   19146:	e9d4 3202 	ldrd	r3, r2, [r4, #8]
   1914a:	429a      	cmp	r2, r3
   1914c:	bf18      	it	ne
   1914e:	3301      	addne	r3, #1
	z_handle_obj_poll_events(&sem->poll_events, K_POLL_STATE_SEM_AVAILABLE);
   19150:	2102      	movs	r1, #2
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
   19152:	60a3      	str	r3, [r4, #8]
	z_handle_obj_poll_events(&sem->poll_events, K_POLL_STATE_SEM_AVAILABLE);
   19154:	f104 0010 	add.w	r0, r4, #16
   19158:	f002 fd92 	bl	1bc80 <z_handle_obj_poll_events>
   1915c:	e7ed      	b.n	1913a <z_impl_k_sem_give+0x2e>
   1915e:	bf00      	nop
   19160:	20025120 	.word	0x20025120

00019164 <z_impl_k_sem_take>:
}
#include <syscalls/k_sem_give_mrsh.c>
#endif

int z_impl_k_sem_take(struct k_sem *sem, s32_t timeout)
{
   19164:	b410      	push	{r4}
   19166:	4602      	mov	r2, r0
   19168:	460b      	mov	r3, r1
   1916a:	f04f 0020 	mov.w	r0, #32
   1916e:	f3ef 8111 	mrs	r1, BASEPRI
   19172:	f380 8811 	msr	BASEPRI, r0
   19176:	f3bf 8f6f 	isb	sy
	__ASSERT(((arch_is_in_isr() == false) || (timeout == K_NO_WAIT)), "");

	sys_trace_void(SYS_TRACE_ID_SEMA_TAKE);
	k_spinlock_key_t key = k_spin_lock(&lock);

	if (likely(sem->count > 0U)) {
   1917a:	6894      	ldr	r4, [r2, #8]
   1917c:	b14c      	cbz	r4, 19192 <z_impl_k_sem_take+0x2e>
		sem->count--;
   1917e:	3c01      	subs	r4, #1
   19180:	6094      	str	r4, [r2, #8]
	__asm__ volatile(
   19182:	f381 8811 	msr	BASEPRI, r1
   19186:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		ret = 0;
   1918a:	2000      	movs	r0, #0
	ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);

out:
	sys_trace_end_call(SYS_TRACE_ID_SEMA_TAKE);
	return ret;
}
   1918c:	f85d 4b04 	ldr.w	r4, [sp], #4
   19190:	4770      	bx	lr
	if (timeout == K_NO_WAIT) {
   19192:	b933      	cbnz	r3, 191a2 <z_impl_k_sem_take+0x3e>
   19194:	f381 8811 	msr	BASEPRI, r1
   19198:	f3bf 8f6f 	isb	sy
		ret = -EBUSY;
   1919c:	f06f 000f 	mvn.w	r0, #15
		goto out;
   191a0:	e7f4      	b.n	1918c <z_impl_k_sem_take+0x28>
	ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);
   191a2:	4802      	ldr	r0, [pc, #8]	; (191ac <z_impl_k_sem_take+0x48>)
}
   191a4:	f85d 4b04 	ldr.w	r4, [sp], #4
	ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);
   191a8:	f7ff bea6 	b.w	18ef8 <z_pend_curr>
   191ac:	20025120 	.word	0x20025120

000191b0 <k_sys_work_q_init>:
K_THREAD_STACK_DEFINE(sys_work_q_stack, CONFIG_SYSTEM_WORKQUEUE_STACK_SIZE);

struct k_work_q k_sys_work_q;

static int k_sys_work_q_init(struct device *dev)
{
   191b0:	b510      	push	{r4, lr}
	ARG_UNUSED(dev);

	k_work_q_start(&k_sys_work_q,
   191b2:	4c08      	ldr	r4, [pc, #32]	; (191d4 <k_sys_work_q_init+0x24>)
   191b4:	f04f 33ff 	mov.w	r3, #4294967295
   191b8:	f44f 6280 	mov.w	r2, #1024	; 0x400
   191bc:	4906      	ldr	r1, [pc, #24]	; (191d8 <k_sys_work_q_init+0x28>)
   191be:	4620      	mov	r0, r4
   191c0:	f000 f8f4 	bl	193ac <k_work_q_start>
	return z_impl_k_thread_name_set(thread_id, value);
   191c4:	4905      	ldr	r1, [pc, #20]	; (191dc <k_sys_work_q_init+0x2c>)
   191c6:	f104 0010 	add.w	r0, r4, #16
   191ca:	f002 fbce 	bl	1b96a <z_impl_k_thread_name_set>
		       K_THREAD_STACK_SIZEOF(sys_work_q_stack),
		       CONFIG_SYSTEM_WORKQUEUE_PRIORITY);
	k_thread_name_set(&k_sys_work_q.thread, "sysworkq");

	return 0;
}
   191ce:	2000      	movs	r0, #0
   191d0:	bd10      	pop	{r4, pc}
   191d2:	bf00      	nop
   191d4:	20024c04 	.word	0x20024c04
   191d8:	20026ea8 	.word	0x20026ea8
   191dc:	0001cdc7 	.word	0x0001cdc7

000191e0 <z_impl_k_thread_start>:
}
#endif

#ifdef CONFIG_MULTITHREADING
void z_impl_k_thread_start(struct k_thread *thread)
{
   191e0:	b510      	push	{r4, lr}
	__asm__ volatile(
   191e2:	f04f 0220 	mov.w	r2, #32
   191e6:	f3ef 8411 	mrs	r4, BASEPRI
   191ea:	f382 8811 	msr	BASEPRI, r2
   191ee:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock); /* protect kernel queues */

	if (z_has_thread_started(thread)) {
   191f2:	7b42      	ldrb	r2, [r0, #13]
   191f4:	0751      	lsls	r1, r2, #29
   191f6:	d404      	bmi.n	19202 <z_impl_k_thread_start+0x22>
	__asm__ volatile(
   191f8:	f384 8811 	msr	BASEPRI, r4
   191fc:	f3bf 8f6f 	isb	sy
	}

	z_mark_thread_as_started(thread);
	z_ready_thread(thread);
	z_reschedule(&lock, key);
}
   19200:	bd10      	pop	{r4, pc}
	thread->base.thread_state &= ~_THREAD_PRESTART;
   19202:	f022 0104 	bic.w	r1, r2, #4
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
   19206:	f012 0f1b 	tst.w	r2, #27
	thread->base.thread_state &= ~_THREAD_PRESTART;
   1920a:	7341      	strb	r1, [r0, #13]
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
   1920c:	d103      	bne.n	19216 <z_impl_k_thread_start+0x36>
	if (z_is_thread_ready(thread)) {
   1920e:	6983      	ldr	r3, [r0, #24]
   19210:	b90b      	cbnz	r3, 19216 <z_impl_k_thread_start+0x36>
		z_add_thread_to_ready_q(thread);
   19212:	f7ff fcbb 	bl	18b8c <z_add_thread_to_ready_q>
	z_reschedule(&lock, key);
   19216:	4621      	mov	r1, r4
}
   19218:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule(&lock, key);
   1921c:	4801      	ldr	r0, [pc, #4]	; (19224 <z_impl_k_thread_start+0x44>)
   1921e:	f002 bad9 	b.w	1b7d4 <z_reschedule>
   19222:	bf00      	nop
   19224:	20025120 	.word	0x20025120

00019228 <z_setup_new_thread>:
void z_setup_new_thread(struct k_thread *new_thread,
		       k_thread_stack_t *stack, size_t stack_size,
		       k_thread_entry_t entry,
		       void *p1, void *p2, void *p3,
		       int prio, u32_t options, const char *name)
{
   19228:	b530      	push	{r4, r5, lr}
   1922a:	b087      	sub	sp, #28
	stack_size = STACK_ROUND_DOWN(stack_size
			- sizeof(*new_thread->userspace_local_data));
#endif
#endif

	arch_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   1922c:	9d0e      	ldr	r5, [sp, #56]	; 0x38
{
   1922e:	4604      	mov	r4, r0
	arch_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   19230:	9504      	str	r5, [sp, #16]
   19232:	9d0d      	ldr	r5, [sp, #52]	; 0x34
   19234:	9503      	str	r5, [sp, #12]
   19236:	9d0c      	ldr	r5, [sp, #48]	; 0x30
   19238:	9502      	str	r5, [sp, #8]
   1923a:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
   1923c:	9501      	str	r5, [sp, #4]
   1923e:	9d0a      	ldr	r5, [sp, #40]	; 0x28
   19240:	9500      	str	r5, [sp, #0]
   19242:	f7f4 fb55 	bl	d8f0 <arch_new_thread>
#ifdef CONFIG_SCHED_CPU_MASK
	new_thread->base.cpu_mask = -1;
#endif
#ifdef CONFIG_ARCH_HAS_CUSTOM_SWAP_TO_MAIN
	/* _current may be null if the dummy thread is not used */
	if (!_current) {
   19246:	4b03      	ldr	r3, [pc, #12]	; (19254 <z_setup_new_thread+0x2c>)
   19248:	689b      	ldr	r3, [r3, #8]
   1924a:	b103      	cbz	r3, 1924e <z_setup_new_thread+0x26>
	}
#endif
#ifdef CONFIG_SCHED_DEADLINE
	new_thread->base.prio_deadline = 0;
#endif
	new_thread->resource_pool = _current->resource_pool;
   1924c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
   1924e:	6623      	str	r3, [r4, #96]	; 0x60
	sys_trace_thread_create(new_thread);
}
   19250:	b007      	add	sp, #28
   19252:	bd30      	pop	{r4, r5, pc}
   19254:	20024bc4 	.word	0x20024bc4

00019258 <z_impl_k_thread_create>:
k_tid_t z_impl_k_thread_create(struct k_thread *new_thread,
			      k_thread_stack_t *stack,
			      size_t stack_size, k_thread_entry_t entry,
			      void *p1, void *p2, void *p3,
			      int prio, u32_t options, s32_t delay)
{
   19258:	b570      	push	{r4, r5, r6, lr}
	__ASSERT((options & K_USER) == 0,
		 "Platform is capable of user mode, and test thread created with K_USER option,"
		 " but neither CONFIG_TEST_USERSPACE nor CONFIG_USERSPACE is set\n");
#endif

	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   1925a:	2600      	movs	r6, #0
{
   1925c:	b086      	sub	sp, #24
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   1925e:	9605      	str	r6, [sp, #20]
   19260:	9e0e      	ldr	r6, [sp, #56]	; 0x38
{
   19262:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   19264:	9604      	str	r6, [sp, #16]
   19266:	9e0d      	ldr	r6, [sp, #52]	; 0x34
{
   19268:	4604      	mov	r4, r0
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   1926a:	9603      	str	r6, [sp, #12]
   1926c:	9e0c      	ldr	r6, [sp, #48]	; 0x30
   1926e:	9602      	str	r6, [sp, #8]
   19270:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
   19272:	9601      	str	r6, [sp, #4]
   19274:	9e0a      	ldr	r6, [sp, #40]	; 0x28
   19276:	9600      	str	r6, [sp, #0]
   19278:	f7ff ffd6 	bl	19228 <z_setup_new_thread>
			  prio, options, NULL);

	if (delay != K_FOREVER) {
   1927c:	1c6b      	adds	r3, r5, #1
   1927e:	d003      	beq.n	19288 <z_impl_k_thread_create+0x30>
	if (delay == 0) {
   19280:	b92d      	cbnz	r5, 1928e <z_impl_k_thread_create+0x36>
	z_impl_k_thread_start(thread);
   19282:	4620      	mov	r0, r4
   19284:	f7ff ffac 	bl	191e0 <z_impl_k_thread_start>
		schedule_new_thread(new_thread, delay);
	}

	return new_thread;
}
   19288:	4620      	mov	r0, r4
   1928a:	b006      	add	sp, #24
   1928c:	bd70      	pop	{r4, r5, r6, pc}
			return (u32_t)((t * to_hz + off) / from_hz);
   1928e:	f44f 4600 	mov.w	r6, #32768	; 0x8000
   19292:	f240 30e7 	movw	r0, #999	; 0x3e7
   19296:	2100      	movs	r1, #0
   19298:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   1929c:	2300      	movs	r3, #0
   1929e:	fbe6 0105 	umlal	r0, r1, r6, r5
   192a2:	f7f2 ffcb 	bl	c23c <__aeabi_uldivmod>
   192a6:	4903      	ldr	r1, [pc, #12]	; (192b4 <z_impl_k_thread_create+0x5c>)
   192a8:	1c42      	adds	r2, r0, #1
   192aa:	f104 0018 	add.w	r0, r4, #24
   192ae:	f000 f8db 	bl	19468 <z_add_timeout>
   192b2:	e7e9      	b.n	19288 <z_impl_k_thread_create+0x30>
   192b4:	0001b85f 	.word	0x0001b85f

000192b8 <z_impl_k_thread_suspend>:
#endif /* CONFIG_MULTITHREADING */

extern void z_thread_single_suspend(struct k_thread *thread);

void z_impl_k_thread_suspend(struct k_thread *thread)
{
   192b8:	b538      	push	{r3, r4, r5, lr}
   192ba:	4605      	mov	r5, r0
	__asm__ volatile(
   192bc:	f04f 0320 	mov.w	r3, #32
   192c0:	f3ef 8411 	mrs	r4, BASEPRI
   192c4:	f383 8811 	msr	BASEPRI, r3
   192c8:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);

	z_thread_single_suspend(thread);
   192cc:	f7ff fd0e 	bl	18cec <z_thread_single_suspend>

	if (thread == _current) {
   192d0:	4b07      	ldr	r3, [pc, #28]	; (192f0 <z_impl_k_thread_suspend+0x38>)
   192d2:	689b      	ldr	r3, [r3, #8]
   192d4:	42ab      	cmp	r3, r5
   192d6:	d105      	bne.n	192e4 <z_impl_k_thread_suspend+0x2c>
		z_reschedule(&lock, key);
   192d8:	4621      	mov	r1, r4
	} else {
		k_spin_unlock(&lock, key);
	}
}
   192da:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		z_reschedule(&lock, key);
   192de:	4805      	ldr	r0, [pc, #20]	; (192f4 <z_impl_k_thread_suspend+0x3c>)
   192e0:	f002 ba78 	b.w	1b7d4 <z_reschedule>
	__asm__ volatile(
   192e4:	f384 8811 	msr	BASEPRI, r4
   192e8:	f3bf 8f6f 	isb	sy
}
   192ec:	bd38      	pop	{r3, r4, r5, pc}
   192ee:	bf00      	nop
   192f0:	20024bc4 	.word	0x20024bc4
   192f4:	20025120 	.word	0x20025120

000192f8 <z_init_static_threads>:
	}
}
#endif /* CONFIG_USERSPACE */

void z_init_static_threads(void)
{
   192f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	_FOREACH_STATIC_THREAD(thread_data) {
   192fc:	4e28      	ldr	r6, [pc, #160]	; (193a0 <z_init_static_threads+0xa8>)
   192fe:	4d29      	ldr	r5, [pc, #164]	; (193a4 <z_init_static_threads+0xac>)
   19300:	46b0      	mov	r8, r6
{
   19302:	b087      	sub	sp, #28
	_FOREACH_STATIC_THREAD(thread_data) {
   19304:	42b5      	cmp	r5, r6
   19306:	f105 0430 	add.w	r4, r5, #48	; 0x30
   1930a:	d310      	bcc.n	1932e <z_init_static_threads+0x36>
	 * until they are all started.
	 *
	 * Note that static threads defined using the legacy API have a
	 * delay of K_FOREVER.
	 */
	k_sched_lock();
   1930c:	f7ff fbda 	bl	18ac4 <k_sched_lock>
   19310:	f44f 4900 	mov.w	r9, #32768	; 0x8000
   19314:	f240 36e7 	movw	r6, #999	; 0x3e7
   19318:	2700      	movs	r7, #0
	_FOREACH_STATIC_THREAD(thread_data) {
   1931a:	4c22      	ldr	r4, [pc, #136]	; (193a4 <z_init_static_threads+0xac>)
   1931c:	f8df a088 	ldr.w	sl, [pc, #136]	; 193a8 <z_init_static_threads+0xb0>
   19320:	4544      	cmp	r4, r8
   19322:	d321      	bcc.n	19368 <z_init_static_threads+0x70>
			schedule_new_thread(thread_data->init_thread,
					    thread_data->init_delay);
		}
	}
	k_sched_unlock();
}
   19324:	b007      	add	sp, #28
   19326:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	k_sched_unlock();
   1932a:	f7ff bc13 	b.w	18b54 <k_sched_unlock>
		z_setup_new_thread(
   1932e:	f854 3c04 	ldr.w	r3, [r4, #-4]
   19332:	9305      	str	r3, [sp, #20]
   19334:	f854 3c10 	ldr.w	r3, [r4, #-16]
   19338:	9304      	str	r3, [sp, #16]
   1933a:	f854 3c14 	ldr.w	r3, [r4, #-20]
   1933e:	9303      	str	r3, [sp, #12]
   19340:	f854 3c18 	ldr.w	r3, [r4, #-24]
   19344:	9302      	str	r3, [sp, #8]
   19346:	f854 3c1c 	ldr.w	r3, [r4, #-28]
   1934a:	9301      	str	r3, [sp, #4]
   1934c:	f854 3c20 	ldr.w	r3, [r4, #-32]
   19350:	9300      	str	r3, [sp, #0]
   19352:	e954 230a 	ldrd	r2, r3, [r4, #-40]	; 0x28
   19356:	e954 010c 	ldrd	r0, r1, [r4, #-48]	; 0x30
   1935a:	f7ff ff65 	bl	19228 <z_setup_new_thread>
		thread_data->init_thread->init_data = thread_data;
   1935e:	f854 3c30 	ldr.w	r3, [r4, #-48]
   19362:	64dd      	str	r5, [r3, #76]	; 0x4c
   19364:	4625      	mov	r5, r4
   19366:	e7cd      	b.n	19304 <z_init_static_threads+0xc>
		if (thread_data->init_delay != K_FOREVER) {
   19368:	6a61      	ldr	r1, [r4, #36]	; 0x24
   1936a:	1c4b      	adds	r3, r1, #1
   1936c:	d004      	beq.n	19378 <z_init_static_threads+0x80>
			schedule_new_thread(thread_data->init_thread,
   1936e:	6825      	ldr	r5, [r4, #0]
	if (delay == 0) {
   19370:	b921      	cbnz	r1, 1937c <z_init_static_threads+0x84>
   19372:	4628      	mov	r0, r5
   19374:	f7ff ff34 	bl	191e0 <z_impl_k_thread_start>
	_FOREACH_STATIC_THREAD(thread_data) {
   19378:	3430      	adds	r4, #48	; 0x30
   1937a:	e7d1      	b.n	19320 <z_init_static_threads+0x28>
   1937c:	46b3      	mov	fp, r6
   1937e:	46bc      	mov	ip, r7
   19380:	fbe9 bc01 	umlal	fp, ip, r9, r1
   19384:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   19388:	2300      	movs	r3, #0
   1938a:	4658      	mov	r0, fp
   1938c:	4661      	mov	r1, ip
   1938e:	f7f2 ff55 	bl	c23c <__aeabi_uldivmod>
   19392:	4651      	mov	r1, sl
   19394:	1c42      	adds	r2, r0, #1
   19396:	f105 0018 	add.w	r0, r5, #24
   1939a:	f000 f865 	bl	19468 <z_add_timeout>
   1939e:	e7eb      	b.n	19378 <z_init_static_threads+0x80>
   193a0:	20028190 	.word	0x20028190
   193a4:	20028190 	.word	0x20028190
   193a8:	0001b85f 	.word	0x0001b85f

000193ac <k_work_q_start>:

extern void z_work_q_main(void *work_q_ptr, void *p2, void *p3);

void k_work_q_start(struct k_work_q *work_q, k_thread_stack_t *stack,
		    size_t stack_size, int prio)
{
   193ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   193b0:	4605      	mov	r5, r0
   193b2:	b086      	sub	sp, #24
   193b4:	460e      	mov	r6, r1
   193b6:	4617      	mov	r7, r2
   193b8:	4698      	mov	r8, r3
	z_impl_k_queue_init(queue);
   193ba:	f002 f963 	bl	1b684 <z_impl_k_queue_init>
	k_queue_init(&work_q->queue);
	(void)k_thread_create(&work_q->thread, stack, stack_size, z_work_q_main,
   193be:	f105 0410 	add.w	r4, r5, #16
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   193c2:	2000      	movs	r0, #0
   193c4:	4b09      	ldr	r3, [pc, #36]	; (193ec <k_work_q_start+0x40>)
   193c6:	e9cd 0004 	strd	r0, r0, [sp, #16]
   193ca:	e9cd 0802 	strd	r0, r8, [sp, #8]
   193ce:	e9cd 5000 	strd	r5, r0, [sp]
   193d2:	463a      	mov	r2, r7
   193d4:	4631      	mov	r1, r6
   193d6:	4620      	mov	r0, r4
   193d8:	f7ff ff3e 	bl	19258 <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread_id, value);
   193dc:	4620      	mov	r0, r4
   193de:	4904      	ldr	r1, [pc, #16]	; (193f0 <k_work_q_start+0x44>)
			work_q, NULL, NULL, prio, 0, K_NO_WAIT);

	k_thread_name_set(&work_q->thread, WORKQUEUE_THREAD_NAME);
}
   193e0:	b006      	add	sp, #24
   193e2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   193e6:	f002 bac0 	b.w	1b96a <z_impl_k_thread_name_set>
   193ea:	bf00      	nop
   193ec:	00019e03 	.word	0x00019e03
   193f0:	0001cdd0 	.word	0x0001cdd0

000193f4 <elapsed>:
	sys_dlist_remove(&t->node);
}

static s32_t elapsed(void)
{
	return announce_remaining == 0 ? z_clock_elapsed() : 0;
   193f4:	4b03      	ldr	r3, [pc, #12]	; (19404 <elapsed+0x10>)
   193f6:	681b      	ldr	r3, [r3, #0]
   193f8:	b90b      	cbnz	r3, 193fe <elapsed+0xa>
   193fa:	f7f4 b8bf 	b.w	d57c <z_clock_elapsed>
}
   193fe:	2000      	movs	r0, #0
   19400:	4770      	bx	lr
   19402:	bf00      	nop
   19404:	20024cc4 	.word	0x20024cc4

00019408 <remove_timeout>:
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   19408:	6803      	ldr	r3, [r0, #0]
   1940a:	b140      	cbz	r0, 1941e <remove_timeout+0x16>
   1940c:	4a07      	ldr	r2, [pc, #28]	; (1942c <remove_timeout+0x24>)
	return (node == list->tail) ? NULL : node->next;
   1940e:	6852      	ldr	r2, [r2, #4]
   19410:	4290      	cmp	r0, r2
   19412:	d004      	beq.n	1941e <remove_timeout+0x16>
	if (next(t) != NULL) {
   19414:	b11b      	cbz	r3, 1941e <remove_timeout+0x16>
		next(t)->dticks += t->dticks;
   19416:	689a      	ldr	r2, [r3, #8]
   19418:	6881      	ldr	r1, [r0, #8]
   1941a:	440a      	add	r2, r1
   1941c:	609a      	str	r2, [r3, #8]
	node->prev->next = node->next;
   1941e:	6842      	ldr	r2, [r0, #4]
   19420:	6013      	str	r3, [r2, #0]
	node->next->prev = node->prev;
   19422:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   19424:	2300      	movs	r3, #0
	node->prev = NULL;
   19426:	e9c0 3300 	strd	r3, r3, [r0]
}
   1942a:	4770      	bx	lr
   1942c:	200280b8 	.word	0x200280b8

00019430 <next_timeout>:
	return list->head == list;
   19430:	4b0b      	ldr	r3, [pc, #44]	; (19460 <next_timeout+0x30>)

static s32_t next_timeout(void)
{
   19432:	b510      	push	{r4, lr}
   19434:	681c      	ldr	r4, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   19436:	429c      	cmp	r4, r3
   19438:	bf08      	it	eq
   1943a:	2400      	moveq	r4, #0
	struct _timeout *to = first();
	s32_t ticks_elapsed = elapsed();
   1943c:	f7ff ffda 	bl	193f4 <elapsed>
	s32_t ret = to == NULL ? MAX_WAIT : MAX(0, to->dticks - ticks_elapsed);
   19440:	b154      	cbz	r4, 19458 <next_timeout+0x28>
   19442:	68a3      	ldr	r3, [r4, #8]
   19444:	1a18      	subs	r0, r3, r0
   19446:	ea20 70e0 	bic.w	r0, r0, r0, asr #31

#ifdef CONFIG_TIMESLICING
	if (_current_cpu->slice_ticks && _current_cpu->slice_ticks < ret) {
   1944a:	4b06      	ldr	r3, [pc, #24]	; (19464 <next_timeout+0x34>)
   1944c:	691b      	ldr	r3, [r3, #16]
   1944e:	b113      	cbz	r3, 19456 <next_timeout+0x26>
   19450:	4298      	cmp	r0, r3
   19452:	bfa8      	it	ge
   19454:	4618      	movge	r0, r3
		ret = _current_cpu->slice_ticks;
	}
#endif
	return ret;
}
   19456:	bd10      	pop	{r4, pc}
	s32_t ret = to == NULL ? MAX_WAIT : MAX(0, to->dticks - ticks_elapsed);
   19458:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
   1945c:	e7f5      	b.n	1944a <next_timeout+0x1a>
   1945e:	bf00      	nop
   19460:	200280b8 	.word	0x200280b8
   19464:	20024bc4 	.word	0x20024bc4

00019468 <z_add_timeout>:

void z_add_timeout(struct _timeout *to, _timeout_func_t fn, s32_t ticks)
{
   19468:	b570      	push	{r4, r5, r6, lr}
   1946a:	4604      	mov	r4, r0
   1946c:	4616      	mov	r6, r2
	__ASSERT(!sys_dnode_is_linked(&to->node), "");
	to->fn = fn;
   1946e:	60c1      	str	r1, [r0, #12]
	__asm__ volatile(
   19470:	f04f 0320 	mov.w	r3, #32
   19474:	f3ef 8511 	mrs	r5, BASEPRI
   19478:	f383 8811 	msr	BASEPRI, r3
   1947c:	f3bf 8f6f 	isb	sy
	ticks = MAX(1, ticks);

	LOCKED(&timeout_lock) {
		struct _timeout *t;

		to->dticks = ticks + elapsed();
   19480:	f7ff ffb8 	bl	193f4 <elapsed>
   19484:	2e01      	cmp	r6, #1
   19486:	bfac      	ite	ge
   19488:	1980      	addge	r0, r0, r6
   1948a:	3001      	addlt	r0, #1
	return list->head == list;
   1948c:	4b16      	ldr	r3, [pc, #88]	; (194e8 <z_add_timeout+0x80>)
   1948e:	60a0      	str	r0, [r4, #8]
   19490:	681a      	ldr	r2, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   19492:	429a      	cmp	r2, r3
   19494:	d001      	beq.n	1949a <z_add_timeout+0x32>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   19496:	685e      	ldr	r6, [r3, #4]
		for (t = first(); t != NULL; t = next(t)) {
   19498:	b932      	cbnz	r2, 194a8 <z_add_timeout+0x40>
	node->prev = list->tail;
   1949a:	685a      	ldr	r2, [r3, #4]
	node->next = list;
   1949c:	6023      	str	r3, [r4, #0]
	node->prev = list->tail;
   1949e:	6062      	str	r2, [r4, #4]
	list->tail->next = node;
   194a0:	685a      	ldr	r2, [r3, #4]
   194a2:	6014      	str	r4, [r2, #0]
	list->tail = node;
   194a4:	605c      	str	r4, [r3, #4]
   194a6:	e00a      	b.n	194be <z_add_timeout+0x56>
			__ASSERT(t->dticks >= 0, "");

			if (t->dticks > to->dticks) {
   194a8:	6890      	ldr	r0, [r2, #8]
   194aa:	68a1      	ldr	r1, [r4, #8]
   194ac:	4288      	cmp	r0, r1
   194ae:	dd15      	ble.n	194dc <z_add_timeout+0x74>
				t->dticks -= to->dticks;
   194b0:	1a41      	subs	r1, r0, r1
   194b2:	6091      	str	r1, [r2, #8]
	node->prev = successor->prev;
   194b4:	6851      	ldr	r1, [r2, #4]
	node->next = successor;
   194b6:	e9c4 2100 	strd	r2, r1, [r4]
	successor->prev->next = node;
   194ba:	600c      	str	r4, [r1, #0]
	successor->prev = node;
   194bc:	6054      	str	r4, [r2, #4]
	return list->head == list;
   194be:	681a      	ldr	r2, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   194c0:	429a      	cmp	r2, r3
   194c2:	d006      	beq.n	194d2 <z_add_timeout+0x6a>

		if (t == NULL) {
			sys_dlist_append(&timeout_list, &to->node);
		}

		if (to == first()) {
   194c4:	4294      	cmp	r4, r2
   194c6:	d104      	bne.n	194d2 <z_add_timeout+0x6a>
			z_clock_set_timeout(next_timeout(), false);
   194c8:	f7ff ffb2 	bl	19430 <next_timeout>
   194cc:	2100      	movs	r1, #0
   194ce:	f7f3 ffff 	bl	d4d0 <z_clock_set_timeout>
	__asm__ volatile(
   194d2:	f385 8811 	msr	BASEPRI, r5
   194d6:	f3bf 8f6f 	isb	sy
		}
	}
}
   194da:	bd70      	pop	{r4, r5, r6, pc}
			to->dticks -= t->dticks;
   194dc:	1a09      	subs	r1, r1, r0
	return (node == list->tail) ? NULL : node->next;
   194de:	4296      	cmp	r6, r2
   194e0:	60a1      	str	r1, [r4, #8]
   194e2:	d0da      	beq.n	1949a <z_add_timeout+0x32>
   194e4:	6812      	ldr	r2, [r2, #0]
   194e6:	e7d7      	b.n	19498 <z_add_timeout+0x30>
   194e8:	200280b8 	.word	0x200280b8

000194ec <z_clock_announce>:
		}
	}
}

void z_clock_announce(s32_t ticks)
{
   194ec:	e92d 4bf0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, fp, lr}
   194f0:	4604      	mov	r4, r0
#ifdef CONFIG_TIMESLICING
	z_time_slice(ticks);
   194f2:	f7ff fbc5 	bl	18c80 <z_time_slice>
	__asm__ volatile(
   194f6:	f04f 0320 	mov.w	r3, #32
   194fa:	f3ef 8511 	mrs	r5, BASEPRI
   194fe:	f383 8811 	msr	BASEPRI, r3
   19502:	f3bf 8f6f 	isb	sy
#endif

	k_spinlock_key_t key = k_spin_lock(&timeout_lock);

	announce_remaining = ticks;
   19506:	4f21      	ldr	r7, [pc, #132]	; (1958c <z_clock_announce+0xa0>)
   19508:	4e21      	ldr	r6, [pc, #132]	; (19590 <z_clock_announce+0xa4>)
   1950a:	46b8      	mov	r8, r7
	return list->head == list;
   1950c:	f8df 9084 	ldr.w	r9, [pc, #132]	; 19594 <z_clock_announce+0xa8>
   19510:	6034      	str	r4, [r6, #0]
   19512:	f8d9 4000 	ldr.w	r4, [r9]
   19516:	6832      	ldr	r2, [r6, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   19518:	454c      	cmp	r4, r9
   1951a:	e9d7 bc00 	ldrd	fp, ip, [r7]
   1951e:	d005      	beq.n	1952c <z_clock_announce+0x40>

	while (first() != NULL && first()->dticks <= announce_remaining) {
   19520:	b124      	cbz	r4, 1952c <z_clock_announce+0x40>
   19522:	68a3      	ldr	r3, [r4, #8]
   19524:	4293      	cmp	r3, r2
   19526:	dd14      	ble.n	19552 <z_clock_announce+0x66>
		t->fn(t);
		key = k_spin_lock(&timeout_lock);
	}

	if (first() != NULL) {
		first()->dticks -= announce_remaining;
   19528:	1a9b      	subs	r3, r3, r2
   1952a:	60a3      	str	r3, [r4, #8]
	}

	curr_tick += announce_remaining;
	announce_remaining = 0;
   1952c:	2400      	movs	r4, #0
	curr_tick += announce_remaining;
   1952e:	eb1b 0002 	adds.w	r0, fp, r2
   19532:	eb4c 71e2 	adc.w	r1, ip, r2, asr #31
   19536:	e9c8 0100 	strd	r0, r1, [r8]
	announce_remaining = 0;
   1953a:	6034      	str	r4, [r6, #0]

	z_clock_set_timeout(next_timeout(), false);
   1953c:	f7ff ff78 	bl	19430 <next_timeout>
   19540:	4621      	mov	r1, r4
   19542:	f7f3 ffc5 	bl	d4d0 <z_clock_set_timeout>
	__asm__ volatile(
   19546:	f385 8811 	msr	BASEPRI, r5
   1954a:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&timeout_lock, key);
}
   1954e:	e8bd 8bf0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, fp, pc}
		curr_tick += dt;
   19552:	eb1b 0003 	adds.w	r0, fp, r3
   19556:	eb4c 71e3 	adc.w	r1, ip, r3, asr #31
		announce_remaining -= dt;
   1955a:	1ad3      	subs	r3, r2, r3
   1955c:	6033      	str	r3, [r6, #0]
		t->dticks = 0;
   1955e:	2300      	movs	r3, #0
		curr_tick += dt;
   19560:	e9c7 0100 	strd	r0, r1, [r7]
		t->dticks = 0;
   19564:	60a3      	str	r3, [r4, #8]
		remove_timeout(t);
   19566:	4620      	mov	r0, r4
   19568:	f7ff ff4e 	bl	19408 <remove_timeout>
   1956c:	f385 8811 	msr	BASEPRI, r5
   19570:	f3bf 8f6f 	isb	sy
		t->fn(t);
   19574:	68e3      	ldr	r3, [r4, #12]
   19576:	4798      	blx	r3
	__asm__ volatile(
   19578:	f04f 0320 	mov.w	r3, #32
   1957c:	f3ef 8511 	mrs	r5, BASEPRI
   19580:	f383 8811 	msr	BASEPRI, r3
   19584:	f3bf 8f6f 	isb	sy
#endif

#ifdef CONFIG_SPIN_VALIDATE
	z_spin_lock_set_owner(l);
#endif
	return k;
   19588:	e7c3      	b.n	19512 <z_clock_announce+0x26>
   1958a:	bf00      	nop
   1958c:	20020000 	.word	0x20020000
   19590:	20024cc4 	.word	0x20024cc4
   19594:	200280b8 	.word	0x200280b8

00019598 <z_tick_get>:

s64_t z_tick_get(void)
{
   19598:	e92d 4818 	stmdb	sp!, {r3, r4, fp, lr}
   1959c:	f04f 0320 	mov.w	r3, #32
   195a0:	f3ef 8411 	mrs	r4, BASEPRI
   195a4:	f383 8811 	msr	BASEPRI, r3
   195a8:	f3bf 8f6f 	isb	sy
	u64_t t = 0U;

	LOCKED(&timeout_lock) {
		t = curr_tick + z_clock_elapsed();
   195ac:	f7f3 ffe6 	bl	d57c <z_clock_elapsed>
   195b0:	4b07      	ldr	r3, [pc, #28]	; (195d0 <z_tick_get+0x38>)
   195b2:	e9d3 2300 	ldrd	r2, r3, [r3]
   195b6:	eb12 0b00 	adds.w	fp, r2, r0
   195ba:	f143 0c00 	adc.w	ip, r3, #0
   195be:	4658      	mov	r0, fp
   195c0:	4661      	mov	r1, ip
	__asm__ volatile(
   195c2:	f384 8811 	msr	BASEPRI, r4
   195c6:	f3bf 8f6f 	isb	sy
	}
	return t;
}
   195ca:	e8bd 8818 	ldmia.w	sp!, {r3, r4, fp, pc}
   195ce:	bf00      	nop
   195d0:	20020000 	.word	0x20020000

000195d4 <z_timer_expiration_handler>:

	/*
	 * if the timer is periodic, start it again; don't add _TICK_ALIGN
	 * since we're already aligned to a tick boundary
	 */
	if (timer->period > 0) {
   195d4:	6a02      	ldr	r2, [r0, #32]
{
   195d6:	b538      	push	{r3, r4, r5, lr}
	if (timer->period > 0) {
   195d8:	2a00      	cmp	r2, #0
{
   195da:	4604      	mov	r4, r0
	if (timer->period > 0) {
   195dc:	dd02      	ble.n	195e4 <z_timer_expiration_handler+0x10>
		z_add_timeout(&timer->timeout, z_timer_expiration_handler,
   195de:	490e      	ldr	r1, [pc, #56]	; (19618 <z_timer_expiration_handler+0x44>)
   195e0:	f7ff ff42 	bl	19468 <z_add_timeout>
			     timer->period);
	}

	/* update timer's status */
	timer->status += 1U;
   195e4:	6a63      	ldr	r3, [r4, #36]	; 0x24
   195e6:	3301      	adds	r3, #1
   195e8:	6263      	str	r3, [r4, #36]	; 0x24

	/* invoke timer expiry function */
	if (timer->expiry_fn != NULL) {
   195ea:	69a3      	ldr	r3, [r4, #24]
   195ec:	b10b      	cbz	r3, 195f2 <z_timer_expiration_handler+0x1e>
		timer->expiry_fn(timer);
   195ee:	4620      	mov	r0, r4
   195f0:	4798      	blx	r3
	return list->head == list;
   195f2:	f854 5f10 	ldr.w	r5, [r4, #16]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   195f6:	42a5      	cmp	r5, r4
   195f8:	d00d      	beq.n	19616 <z_timer_expiration_handler+0x42>
	}

	thread = z_waitq_head(&timer->wait_q);

	if (thread == NULL) {
   195fa:	b165      	cbz	r5, 19616 <z_timer_expiration_handler+0x42>
	 * place a thread can be taken off this pend queue, and b) the
	 * only place a thread can be put on the pend queue is at
	 * thread level, which of course cannot interrupt the current
	 * context.
	 */
	z_unpend_thread_no_timeout(thread);
   195fc:	4628      	mov	r0, r5
   195fe:	f002 f8d0 	bl	1b7a2 <z_unpend_thread_no_timeout>
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
   19602:	7b6b      	ldrb	r3, [r5, #13]
   19604:	06db      	lsls	r3, r3, #27
   19606:	d104      	bne.n	19612 <z_timer_expiration_handler+0x3e>
	if (z_is_thread_ready(thread)) {
   19608:	69ab      	ldr	r3, [r5, #24]
   1960a:	b913      	cbnz	r3, 19612 <z_timer_expiration_handler+0x3e>
		z_add_thread_to_ready_q(thread);
   1960c:	4628      	mov	r0, r5
   1960e:	f7ff fabd 	bl	18b8c <z_add_thread_to_ready_q>
   19612:	2300      	movs	r3, #0
   19614:	66ab      	str	r3, [r5, #104]	; 0x68

	z_ready_thread(thread);

	arch_thread_return_value_set(thread, 0);
}
   19616:	bd38      	pop	{r3, r4, r5, pc}
   19618:	000195d5 	.word	0x000195d5

0001961c <z_impl_k_timer_start>:
	z_object_init(timer);
}


void z_impl_k_timer_start(struct k_timer *timer, s32_t duration, s32_t period)
{
   1961c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   19620:	f240 36e7 	movw	r6, #999	; 0x3e7
   19624:	2700      	movs	r7, #0
   19626:	4604      	mov	r4, r0
   19628:	4688      	mov	r8, r1
   1962a:	f44f 4500 	mov.w	r5, #32768	; 0x8000
   1962e:	4630      	mov	r0, r6
   19630:	4639      	mov	r1, r7
   19632:	2300      	movs	r3, #0
   19634:	fbe5 0102 	umlal	r0, r1, r5, r2
   19638:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   1963c:	f7f2 fdfe 	bl	c23c <__aeabi_uldivmod>
   19640:	4639      	mov	r1, r7
	__ASSERT(duration >= 0 && period >= 0 &&
		 (duration != 0 || period != 0), "invalid parameters\n");

	volatile s32_t period_in_ticks, duration_in_ticks;

	period_in_ticks = k_ms_to_ticks_ceil32(period);
   19642:	9000      	str	r0, [sp, #0]
   19644:	4630      	mov	r0, r6
   19646:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   1964a:	2300      	movs	r3, #0
   1964c:	fbe5 0108 	umlal	r0, r1, r5, r8
   19650:	f7f2 fdf4 	bl	c23c <__aeabi_uldivmod>
	duration_in_ticks = k_ms_to_ticks_ceil32(duration);
   19654:	9001      	str	r0, [sp, #4]

	(void)z_abort_timeout(&timer->timeout);
   19656:	4620      	mov	r0, r4
   19658:	f002 f99b 	bl	1b992 <z_abort_timeout>
	timer->period = period_in_ticks;
   1965c:	9b00      	ldr	r3, [sp, #0]
	timer->status = 0U;
	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
   1965e:	4620      	mov	r0, r4
	timer->period = period_in_ticks;
   19660:	6223      	str	r3, [r4, #32]
	timer->status = 0U;
   19662:	2300      	movs	r3, #0
	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
   19664:	9a01      	ldr	r2, [sp, #4]
   19666:	4903      	ldr	r1, [pc, #12]	; (19674 <z_impl_k_timer_start+0x58>)
	timer->status = 0U;
   19668:	6263      	str	r3, [r4, #36]	; 0x24
		     duration_in_ticks);
}
   1966a:	b002      	add	sp, #8
   1966c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
   19670:	f7ff befa 	b.w	19468 <z_add_timeout>
   19674:	000195d5 	.word	0x000195d5

00019678 <k_poll_event_init>:
 */
static struct k_spinlock lock;

void k_poll_event_init(struct k_poll_event *event, u32_t type,
		       int mode, void *obj)
{
   19678:	b510      	push	{r4, lr}
	__ASSERT(type < (BIT(_POLL_NUM_TYPES)), "invalid type\n");
	__ASSERT(obj != NULL, "must provide an object\n");

	event->poller = NULL;
	/* event->tag is left uninitialized: the user will set it if needed */
	event->type = type;
   1967a:	7b44      	ldrb	r4, [r0, #13]
   1967c:	f361 0403 	bfi	r4, r1, #0, #4
	event->state = K_POLL_STATE_NOT_READY;
	event->mode = mode;
   19680:	7b81      	ldrb	r1, [r0, #14]
	event->type = type;
   19682:	7344      	strb	r4, [r0, #13]
	event->mode = mode;
   19684:	f362 0141 	bfi	r1, r2, #1, #1
	event->poller = NULL;
   19688:	2200      	movs	r2, #0
	event->mode = mode;
   1968a:	7381      	strb	r1, [r0, #14]
	event->state = K_POLL_STATE_NOT_READY;
   1968c:	68c1      	ldr	r1, [r0, #12]
	event->poller = NULL;
   1968e:	6082      	str	r2, [r0, #8]
	event->state = K_POLL_STATE_NOT_READY;
   19690:	4a02      	ldr	r2, [pc, #8]	; (1969c <k_poll_event_init+0x24>)
   19692:	400a      	ands	r2, r1
	event->unused = 0U;
	event->obj = obj;
   19694:	e9c0 2303 	strd	r2, r3, [r0, #12]
}
   19698:	bd10      	pop	{r4, pc}
   1969a:	bf00      	nop
   1969c:	00020fff 	.word	0x00020fff

000196a0 <z_impl_k_poll>:

int z_impl_k_poll(struct k_poll_event *events, int num_events, s32_t timeout)
{
	int events_registered;
	k_spinlock_key_t key;
	struct _poller poller = { .is_polling = true,
   196a0:	2301      	movs	r3, #1
{
   196a2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   196a6:	b086      	sub	sp, #24
	struct _poller poller = { .is_polling = true,
   196a8:	f88d 300c 	strb.w	r3, [sp, #12]
				  .thread     = _current,
   196ac:	4b23      	ldr	r3, [pc, #140]	; (1973c <z_impl_k_poll+0x9c>)

	__ASSERT(!arch_is_in_isr(), "");
	__ASSERT(events != NULL, "NULL events\n");
	__ASSERT(num_events >= 0, "<0 events\n");

	events_registered = register_events(events, num_events, &poller,
   196ae:	4690      	mov	r8, r2
	struct _poller poller = { .is_polling = true,
   196b0:	689b      	ldr	r3, [r3, #8]
{
   196b2:	4606      	mov	r6, r0
	struct _poller poller = { .is_polling = true,
   196b4:	9304      	str	r3, [sp, #16]
   196b6:	4b22      	ldr	r3, [pc, #136]	; (19740 <z_impl_k_poll+0xa0>)
   196b8:	9305      	str	r3, [sp, #20]
	events_registered = register_events(events, num_events, &poller,
   196ba:	fab2 f382 	clz	r3, r2
   196be:	aa03      	add	r2, sp, #12
   196c0:	095b      	lsrs	r3, r3, #5
   196c2:	f002 fa83 	bl	1bbcc <register_events>
   196c6:	4607      	mov	r7, r0
	__asm__ volatile(
   196c8:	f04f 0320 	mov.w	r3, #32
   196cc:	f3ef 8511 	mrs	r5, BASEPRI
   196d0:	f383 8811 	msr	BASEPRI, r3
   196d4:	f3bf 8f6f 	isb	sy
	/*
	 * If we're not polling anymore, it means that at least one event
	 * condition is met, either when looping through the events here or
	 * because one of the events registered has had its state changed.
	 */
	if (!poller.is_polling) {
   196d8:	f89d 300c 	ldrb.w	r3, [sp, #12]
   196dc:	f003 04ff 	and.w	r4, r3, #255	; 0xff
   196e0:	b94b      	cbnz	r3, 196f6 <z_impl_k_poll+0x56>
	 * we've already know the return code (-EAGAIN), and even if they are
	 * added to the list of events that occurred, the user has to check the
	 * return code first, which invalidates the whole list of event states.
	 */
	key = k_spin_lock(&lock);
	clear_event_registrations(events, events_registered, key);
   196e2:	462a      	mov	r2, r5
   196e4:	4639      	mov	r1, r7
   196e6:	4630      	mov	r0, r6
   196e8:	f002 f9d8 	bl	1ba9c <clear_event_registrations>
	__asm__ volatile(
   196ec:	f385 8811 	msr	BASEPRI, r5
   196f0:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&lock, key);

	return swap_rc;
   196f4:	e00b      	b.n	1970e <z_impl_k_poll+0x6e>
	poller.is_polling = false;
   196f6:	2300      	movs	r3, #0
   196f8:	f88d 300c 	strb.w	r3, [sp, #12]
	if (timeout == K_NO_WAIT) {
   196fc:	f1b8 0f00 	cmp.w	r8, #0
   19700:	d109      	bne.n	19716 <z_impl_k_poll+0x76>
   19702:	f385 8811 	msr	BASEPRI, r5
   19706:	f3bf 8f6f 	isb	sy
		return -EAGAIN;
   1970a:	f06f 040a 	mvn.w	r4, #10
}
   1970e:	4620      	mov	r0, r4
   19710:	b006      	add	sp, #24
   19712:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	_wait_q_t wait_q = Z_WAIT_Q_INIT(&wait_q);
   19716:	aa01      	add	r2, sp, #4
	int swap_rc = z_pend_curr(&lock, key, &wait_q, timeout);
   19718:	4643      	mov	r3, r8
   1971a:	4629      	mov	r1, r5
   1971c:	4809      	ldr	r0, [pc, #36]	; (19744 <z_impl_k_poll+0xa4>)
	_wait_q_t wait_q = Z_WAIT_Q_INIT(&wait_q);
   1971e:	e9cd 2201 	strd	r2, r2, [sp, #4]
	int swap_rc = z_pend_curr(&lock, key, &wait_q, timeout);
   19722:	f7ff fbe9 	bl	18ef8 <z_pend_curr>
   19726:	4604      	mov	r4, r0
	__asm__ volatile(
   19728:	f04f 0320 	mov.w	r3, #32
   1972c:	f3ef 8511 	mrs	r5, BASEPRI
   19730:	f383 8811 	msr	BASEPRI, r3
   19734:	f3bf 8f6f 	isb	sy
   19738:	e7d3      	b.n	196e2 <z_impl_k_poll+0x42>
   1973a:	bf00      	nop
   1973c:	20024bc4 	.word	0x20024bc4
   19740:	0001bb2d 	.word	0x0001bb2d
   19744:	20025120 	.word	0x20025120

00019748 <uart_irq_tx_disable>:
	if (api->irq_tx_disable) {
   19748:	6843      	ldr	r3, [r0, #4]
   1974a:	6a1b      	ldr	r3, [r3, #32]
   1974c:	b103      	cbz	r3, 19750 <uart_irq_tx_disable+0x8>
		api->irq_tx_disable(dev);
   1974e:	4718      	bx	r3
		return;
	}
#endif
	compiler_barrier();
	z_impl_uart_irq_tx_disable(dev);
}
   19750:	4770      	bx	lr

00019752 <main>:

void main(void)
{
   19752:	b508      	push	{r3, lr}
	//start_execute();
	ble_init();
   19754:	f7f2 ff6a 	bl	c62c <ble_init>
	return z_impl_k_sleep(ms);
   19758:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   1975c:	f7ff fca8 	bl	190b0 <z_impl_k_sleep>
   19760:	e7fa      	b.n	19758 <main+0x6>

00019762 <get_bit_ptr>:
/* Places a 32 bit output pointer in word, and an integer bit index
 * within that word as the return value
 */
static int get_bit_ptr(struct sys_mem_pool_base *p, int level, int bn,
		       u32_t **word)
{
   19762:	b570      	push	{r4, r5, r6, lr}
   19764:	250c      	movs	r5, #12
   19766:	68c6      	ldr	r6, [r0, #12]
	u32_t *bitarray = level <= p->max_inline_level ?
   19768:	f990 000b 	ldrsb.w	r0, [r0, #11]
   1976c:	434d      	muls	r5, r1
		p->levels[level].bits : p->levels[level].bits_p;
   1976e:	4288      	cmp	r0, r1

	*word = &bitarray[bn / 32];
   19770:	4610      	mov	r0, r2
   19772:	eb06 0405 	add.w	r4, r6, r5
		p->levels[level].bits : p->levels[level].bits_p;
   19776:	bfb8      	it	lt
   19778:	5974      	ldrlt	r4, [r6, r5]
	*word = &bitarray[bn / 32];
   1977a:	2a00      	cmp	r2, #0
   1977c:	bfb8      	it	lt
   1977e:	f102 001f 	addlt.w	r0, r2, #31
   19782:	1140      	asrs	r0, r0, #5
   19784:	eb04 0180 	add.w	r1, r4, r0, lsl #2
   19788:	6019      	str	r1, [r3, #0]

	return bn & 0x1f;
}
   1978a:	f002 001f 	and.w	r0, r2, #31
   1978e:	bd70      	pop	{r4, r5, r6, pc}

00019790 <pool_irq_lock.isra.2.part.3>:
   19790:	f04f 0320 	mov.w	r3, #32
   19794:	f3ef 8011 	mrs	r0, BASEPRI
   19798:	f383 8811 	msr	BASEPRI, r3
   1979c:	f3bf 8f6f 	isb	sy
	if (p->flags & SYS_MEM_POOL_KERNEL) {
		return irq_lock();
	} else {
		return 0;
	}
}
   197a0:	4770      	bx	lr

000197a2 <pool_irq_unlock.isra.4>:

static inline void pool_irq_unlock(struct sys_mem_pool_base *p, int key)
{
	if (p->flags & SYS_MEM_POOL_KERNEL) {
   197a2:	07c3      	lsls	r3, r0, #31
   197a4:	d503      	bpl.n	197ae <pool_irq_unlock.isra.4+0xc>
	__asm__ volatile(
   197a6:	f381 8811 	msr	BASEPRI, r1
   197aa:	f3bf 8f6f 	isb	sy
		irq_unlock(key);
	}
}
   197ae:	4770      	bx	lr

000197b0 <z_sys_mem_pool_base_init>:
	p->max_inline_level = -1;
   197b0:	23ff      	movs	r3, #255	; 0xff
{
   197b2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	size_t buflen = p->n_max * p->max_sz, sz = p->max_sz;
   197b6:	6846      	ldr	r6, [r0, #4]
	p->max_inline_level = -1;
   197b8:	72c3      	strb	r3, [r0, #11]
	size_t buflen = p->n_max * p->max_sz, sz = p->max_sz;
   197ba:	4632      	mov	r2, r6
	for (i = 0; i < p->n_levels; i++) {
   197bc:	2300      	movs	r3, #0
		sys_dlist_init(&p->levels[i].free_list);
   197be:	f04f 090c 	mov.w	r9, #12
	size_t buflen = p->n_max * p->max_sz, sz = p->max_sz;
   197c2:	8907      	ldrh	r7, [r0, #8]
	u32_t *bits = (u32_t *)((u8_t *)p->buf + buflen);
   197c4:	6801      	ldr	r1, [r0, #0]
	size_t buflen = p->n_max * p->max_sz, sz = p->max_sz;
   197c6:	fb06 fc07 	mul.w	ip, r6, r7
	for (i = 0; i < p->n_levels; i++) {
   197ca:	f890 800a 	ldrb.w	r8, [r0, #10]
	u32_t *bits = (u32_t *)((u8_t *)p->buf + buflen);
   197ce:	4461      	add	r1, ip
	for (i = 0; i < p->n_levels; i++) {
   197d0:	4598      	cmp	r8, r3
   197d2:	dc05      	bgt.n	197e0 <z_sys_mem_pool_base_init+0x30>
   197d4:	2300      	movs	r3, #0
	for (i = 0; i < p->n_max; i++) {
   197d6:	4619      	mov	r1, r3
   197d8:	428f      	cmp	r7, r1
   197da:	dc20      	bgt.n	1981e <z_sys_mem_pool_base_init+0x6e>
}
   197dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		int nblocks = buflen / sz;
   197e0:	fbbc f5f2 	udiv	r5, ip, r2
		sys_dlist_init(&p->levels[i].free_list);
   197e4:	fb09 fe03 	mul.w	lr, r9, r3
   197e8:	f8d0 a00c 	ldr.w	sl, [r0, #12]
		if (nblocks <= sizeof(p->levels[i].bits)*8) {
   197ec:	2d20      	cmp	r5, #32
		sys_dlist_init(&p->levels[i].free_list);
   197ee:	eb0a 040e 	add.w	r4, sl, lr
   197f2:	f104 0b04 	add.w	fp, r4, #4
	list->tail = (sys_dnode_t *)list;
   197f6:	e9c4 bb01 	strd	fp, fp, [r4, #4]
		if (nblocks <= sizeof(p->levels[i].bits)*8) {
   197fa:	d805      	bhi.n	19808 <z_sys_mem_pool_base_init+0x58>
			p->max_inline_level = i;
   197fc:	72c3      	strb	r3, [r0, #11]
		sz = WB_DN(sz / 4);
   197fe:	0892      	lsrs	r2, r2, #2
   19800:	f022 0203 	bic.w	r2, r2, #3
	for (i = 0; i < p->n_levels; i++) {
   19804:	3301      	adds	r3, #1
   19806:	e7e3      	b.n	197d0 <z_sys_mem_pool_base_init+0x20>
			bits += (nblocks + 31)/32;
   19808:	f115 041f 	adds.w	r4, r5, #31
   1980c:	bf48      	it	mi
   1980e:	f105 043e 	addmi.w	r4, r5, #62	; 0x3e
   19812:	1164      	asrs	r4, r4, #5
			p->levels[i].bits_p = bits;
   19814:	f84a 100e 	str.w	r1, [sl, lr]
			bits += (nblocks + 31)/32;
   19818:	eb01 0184 	add.w	r1, r1, r4, lsl #2
   1981c:	e7ef      	b.n	197fe <z_sys_mem_pool_base_init+0x4e>
		sys_dlist_append(&p->levels[0].free_list, block);
   1981e:	68c2      	ldr	r2, [r0, #12]
	return (u8_t *)p->buf + lsz * block;
   19820:	6805      	ldr	r5, [r0, #0]
		sys_dlist_append(&p->levels[0].free_list, block);
   19822:	f102 0c04 	add.w	ip, r2, #4
	return (u8_t *)p->buf + lsz * block;
   19826:	18ec      	adds	r4, r5, r3
	node->next = list;
   19828:	f845 c003 	str.w	ip, [r5, r3]
	node->prev = list->tail;
   1982c:	6895      	ldr	r5, [r2, #8]
	for (i = 0; i < p->n_max; i++) {
   1982e:	3101      	adds	r1, #1
   19830:	6065      	str	r5, [r4, #4]
	list->tail->next = node;
   19832:	6895      	ldr	r5, [r2, #8]
   19834:	4433      	add	r3, r6
   19836:	602c      	str	r4, [r5, #0]
	list->tail = node;
   19838:	6094      	str	r4, [r2, #8]
   1983a:	e7cd      	b.n	197d8 <z_sys_mem_pool_base_init+0x28>

0001983c <z_sys_mem_pool_block_alloc>:
	return block;
}

int z_sys_mem_pool_block_alloc(struct sys_mem_pool_base *p, size_t size,
			      u32_t *level_p, u32_t *block_p, void **data_p)
{
   1983c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19840:	b087      	sub	sp, #28
	int i, from_l, alloc_l = -1;
	unsigned int key;
	void *data = NULL;
	size_t lsizes[LVL_ARRAY_SZ(p->n_levels)];
   19842:	7a84      	ldrb	r4, [r0, #10]
{
   19844:	af00      	add	r7, sp, #0
   19846:	e9c7 3201 	strd	r3, r2, [r7, #4]
	size_t lsizes[LVL_ARRAY_SZ(p->n_levels)];
   1984a:	00a3      	lsls	r3, r4, #2
   1984c:	3307      	adds	r3, #7
   1984e:	f403 63ff 	and.w	r3, r3, #2040	; 0x7f8
   19852:	ebad 0d03 	sub.w	sp, sp, r3
   19856:	46ea      	mov	sl, sp
	 * want to allocate and the smallest one with a free entry
	 * from which we can split an allocation if needed.  Along the
	 * way, we populate an array of sizes for each level so we
	 * don't need to waste RAM storing it.
	 */
	lsizes[0] = p->max_sz;
   19858:	4653      	mov	r3, sl
   1985a:	6842      	ldr	r2, [r0, #4]
{
   1985c:	4605      	mov	r5, r0
	lsizes[0] = p->max_sz;
   1985e:	f843 2904 	str.w	r2, [r3], #-4
	for (i = 0; i < p->n_levels; i++) {
   19862:	2200      	movs	r2, #0
   19864:	4294      	cmp	r4, r2
   19866:	f102 39ff 	add.w	r9, r2, #4294967295
   1986a:	dd09      	ble.n	19880 <z_sys_mem_pool_block_alloc+0x44>
		if (i > 0) {
   1986c:	b122      	cbz	r2, 19878 <z_sys_mem_pool_block_alloc+0x3c>
			lsizes[i] = WB_DN(lsizes[i-1] / 4);
   1986e:	6818      	ldr	r0, [r3, #0]
   19870:	0880      	lsrs	r0, r0, #2
   19872:	f020 0003 	bic.w	r0, r0, #3
   19876:	6058      	str	r0, [r3, #4]
		}

		if (lsizes[i] < size) {
   19878:	f853 0f04 	ldr.w	r0, [r3, #4]!
   1987c:	4288      	cmp	r0, r1
   1987e:	d208      	bcs.n	19892 <z_sys_mem_pool_block_alloc+0x56>
		}

		alloc_l = i;
	}

	if (alloc_l < 0) {
   19880:	f1b9 3fff 	cmp.w	r9, #4294967295
   19884:	d107      	bne.n	19896 <z_sys_mem_pool_block_alloc+0x5a>
		*data_p = NULL;
   19886:	2300      	movs	r3, #0
   19888:	6c3a      	ldr	r2, [r7, #64]	; 0x40
   1988a:	6013      	str	r3, [r2, #0]
	pool_irq_unlock(p, key);

	*data_p = data;

	if (data == NULL) {
		return -ENOMEM;
   1988c:	f06f 000b 	mvn.w	r0, #11
   19890:	e02c      	b.n	198ec <z_sys_mem_pool_block_alloc+0xb0>
	for (i = 0; i < p->n_levels; i++) {
   19892:	3201      	adds	r2, #1
   19894:	e7e6      	b.n	19864 <z_sys_mem_pool_block_alloc+0x28>
	if (p->flags & SYS_MEM_POOL_KERNEL) {
   19896:	7c28      	ldrb	r0, [r5, #16]
   19898:	f010 0001 	ands.w	r0, r0, #1
   1989c:	d001      	beq.n	198a2 <z_sys_mem_pool_block_alloc+0x66>
   1989e:	f7ff ff77 	bl	19790 <pool_irq_lock.isra.2.part.3>
   198a2:	230c      	movs	r3, #12
	key = pool_irq_lock(p);
   198a4:	4680      	mov	r8, r0
	block = sys_dlist_get(&p->levels[l].free_list);
   198a6:	464e      	mov	r6, r9
   198a8:	68ea      	ldr	r2, [r5, #12]
   198aa:	fb03 2309 	mla	r3, r3, r9, r2
	return list->head == list;
   198ae:	461a      	mov	r2, r3
   198b0:	f852 4f04 	ldr.w	r4, [r2, #4]!

static inline sys_dnode_t *sys_dlist_get(sys_dlist_t *list)
{
	sys_dnode_t *node = NULL;

	if (!sys_dlist_is_empty(list)) {
   198b4:	4294      	cmp	r4, r2
   198b6:	d11d      	bne.n	198f4 <z_sys_mem_pool_block_alloc+0xb8>
	for (i = alloc_l; i >= 0; i--) {
   198b8:	3e01      	subs	r6, #1
   198ba:	1c72      	adds	r2, r6, #1
   198bc:	f1a3 030c 	sub.w	r3, r3, #12
   198c0:	d1f5      	bne.n	198ae <z_sys_mem_pool_block_alloc+0x72>
   198c2:	2400      	movs	r4, #0
	pool_irq_unlock(p, key);
   198c4:	4641      	mov	r1, r8
   198c6:	7c28      	ldrb	r0, [r5, #16]
   198c8:	f7ff ff6b 	bl	197a2 <pool_irq_unlock.isra.4>
	*data_p = data;
   198cc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   198ce:	601c      	str	r4, [r3, #0]
	if (data == NULL) {
   198d0:	2c00      	cmp	r4, #0
   198d2:	d0db      	beq.n	1988c <z_sys_mem_pool_block_alloc+0x50>
	}

	*level_p = alloc_l;
   198d4:	68bb      	ldr	r3, [r7, #8]
	*block_p = block_num(p, data, lsizes[alloc_l]);

	return 0;
   198d6:	2000      	movs	r0, #0
	*level_p = alloc_l;
   198d8:	f8c3 9000 	str.w	r9, [r3]
	return ((u8_t *)block - (u8_t *)p->buf) / sz;
   198dc:	682b      	ldr	r3, [r5, #0]
   198de:	1ae4      	subs	r4, r4, r3
   198e0:	f85a 3029 	ldr.w	r3, [sl, r9, lsl #2]
   198e4:	fb94 f4f3 	sdiv	r4, r4, r3
	*block_p = block_num(p, data, lsizes[alloc_l]);
   198e8:	687b      	ldr	r3, [r7, #4]
   198ea:	601c      	str	r4, [r3, #0]
}
   198ec:	371c      	adds	r7, #28
   198ee:	46bd      	mov	sp, r7
   198f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	node->prev->next = node->next;
   198f4:	e9d4 3200 	ldrd	r3, r2, [r4]
   198f8:	6013      	str	r3, [r2, #0]
	node->next->prev = node->prev;
   198fa:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   198fc:	2300      	movs	r3, #0
	node->prev = NULL;
   198fe:	e9c4 3300 	strd	r3, r3, [r4]
	return ((u8_t *)block - (u8_t *)p->buf) / sz;
   19902:	682b      	ldr	r3, [r5, #0]
		data = block_alloc(p, i, lsizes[i]);
   19904:	f85a 1026 	ldr.w	r1, [sl, r6, lsl #2]
	return ((u8_t *)block - (u8_t *)p->buf) / sz;
   19908:	1ae2      	subs	r2, r4, r3
	int bit = get_bit_ptr(p, level, bn, &word);
   1990a:	f107 0b14 	add.w	fp, r7, #20
   1990e:	fb92 f2f1 	sdiv	r2, r2, r1
   19912:	465b      	mov	r3, fp
   19914:	4631      	mov	r1, r6
   19916:	4628      	mov	r0, r5
   19918:	f7ff ff23 	bl	19762 <get_bit_ptr>
	*word |= (1<<bit);
   1991c:	2201      	movs	r2, #1
   1991e:	6979      	ldr	r1, [r7, #20]
   19920:	fa02 f000 	lsl.w	r0, r2, r0
   19924:	680b      	ldr	r3, [r1, #0]
   19926:	603a      	str	r2, [r7, #0]
   19928:	4303      	orrs	r3, r0
   1992a:	600b      	str	r3, [r1, #0]
			for (from_l = i; from_l < alloc_l; from_l++) {
   1992c:	454e      	cmp	r6, r9
   1992e:	dac9      	bge.n	198c4 <z_sys_mem_pool_block_alloc+0x88>
	return ((u8_t *)block - (u8_t *)p->buf) / sz;
   19930:	682a      	ldr	r2, [r5, #0]
   19932:	f85a 3026 	ldr.w	r3, [sl, r6, lsl #2]
   19936:	1aa2      	subs	r2, r4, r2
   19938:	fb92 f2f3 	sdiv	r2, r2, r3
	set_alloc_bit(p, l + 1, 4*bn);
   1993c:	3601      	adds	r6, #1
	int bit = get_bit_ptr(p, level, bn, &word);
   1993e:	465b      	mov	r3, fp
   19940:	0092      	lsls	r2, r2, #2
   19942:	4631      	mov	r1, r6
   19944:	4628      	mov	r0, r5
   19946:	f7ff ff0c 	bl	19762 <get_bit_ptr>
	*word |= (1<<bit);
   1994a:	697a      	ldr	r2, [r7, #20]
   1994c:	683b      	ldr	r3, [r7, #0]
		sys_dlist_append(&p->levels[l + 1].free_list, block2);
   1994e:	68e9      	ldr	r1, [r5, #12]
	*word |= (1<<bit);
   19950:	fa03 f000 	lsl.w	r0, r3, r0
   19954:	6813      	ldr	r3, [r2, #0]
   19956:	4303      	orrs	r3, r0
   19958:	6013      	str	r3, [r2, #0]
		sys_dlist_append(&p->levels[l + 1].free_list, block2);
   1995a:	230c      	movs	r3, #12
   1995c:	2203      	movs	r2, #3
   1995e:	fb03 1106 	mla	r1, r3, r6, r1
		int lsz = lsizes[l + 1];
   19962:	f85a 0026 	ldr.w	r0, [sl, r6, lsl #2]
		sys_dlist_append(&p->levels[l + 1].free_list, block2);
   19966:	f101 0e04 	add.w	lr, r1, #4
   1996a:	1823      	adds	r3, r4, r0
   1996c:	60fa      	str	r2, [r7, #12]
	node->prev = list->tail;
   1996e:	688a      	ldr	r2, [r1, #8]
	node->next = list;
   19970:	f8c3 e000 	str.w	lr, [r3]
	node->prev = list->tail;
   19974:	605a      	str	r2, [r3, #4]
	list->tail->next = node;
   19976:	688a      	ldr	r2, [r1, #8]
   19978:	6013      	str	r3, [r2, #0]
	for (i = 1; i < 4; i++) {
   1997a:	68fa      	ldr	r2, [r7, #12]
	list->tail = node;
   1997c:	608b      	str	r3, [r1, #8]
   1997e:	3a01      	subs	r2, #1
   19980:	4403      	add	r3, r0
   19982:	60fa      	str	r2, [r7, #12]
   19984:	d1f3      	bne.n	1996e <z_sys_mem_pool_block_alloc+0x132>
				pool_irq_unlock(p, key);
   19986:	4641      	mov	r1, r8
   19988:	7c28      	ldrb	r0, [r5, #16]
   1998a:	f7ff ff0a 	bl	197a2 <pool_irq_unlock.isra.4>
	if (p->flags & SYS_MEM_POOL_KERNEL) {
   1998e:	7c2b      	ldrb	r3, [r5, #16]
   19990:	07db      	lsls	r3, r3, #31
   19992:	d503      	bpl.n	1999c <z_sys_mem_pool_block_alloc+0x160>
   19994:	f7ff fefc 	bl	19790 <pool_irq_lock.isra.2.part.3>
				key = pool_irq_lock(p);
   19998:	4680      	mov	r8, r0
   1999a:	e7c7      	b.n	1992c <z_sys_mem_pool_block_alloc+0xf0>
		return 0;
   1999c:	68f8      	ldr	r0, [r7, #12]
   1999e:	e7fb      	b.n	19998 <z_sys_mem_pool_block_alloc+0x15c>

000199a0 <z_sys_mem_pool_block_free>:

void z_sys_mem_pool_block_free(struct sys_mem_pool_base *p, u32_t level,
			      u32_t block)
{
   199a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   199a4:	b085      	sub	sp, #20
	size_t lsizes[LVL_ARRAY_SZ(p->n_levels)];
   199a6:	7a83      	ldrb	r3, [r0, #10]
{
   199a8:	af00      	add	r7, sp, #0
	size_t lsizes[LVL_ARRAY_SZ(p->n_levels)];
   199aa:	009b      	lsls	r3, r3, #2
   199ac:	3307      	adds	r3, #7
   199ae:	f403 63ff 	and.w	r3, r3, #2040	; 0x7f8
   199b2:	ebad 0d03 	sub.w	sp, sp, r3
   199b6:	46eb      	mov	fp, sp
	 * to avoid having to store it in precious RAM bytes.
	 * Overhead here is somewhat higher because block_free()
	 * doesn't inherently need to traverse all the larger
	 * sublevels.
	 */
	lsizes[0] = p->max_sz;
   199b8:	6843      	ldr	r3, [r0, #4]
{
   199ba:	4606      	mov	r6, r0
	lsizes[0] = p->max_sz;
   199bc:	465c      	mov	r4, fp
	for (i = 1; i <= level; i++) {
   199be:	2001      	movs	r0, #1
	lsizes[0] = p->max_sz;
   199c0:	f8cb 3000 	str.w	r3, [fp]
	for (i = 1; i <= level; i++) {
   199c4:	4281      	cmp	r1, r0
   199c6:	d215      	bcs.n	199f4 <z_sys_mem_pool_block_free+0x54>
	if (p->flags & SYS_MEM_POOL_KERNEL) {
   199c8:	7c30      	ldrb	r0, [r6, #16]
		lsizes[i] = WB_DN(lsizes[i-1] / 4);
	}

	block_free(p, level, lsizes, block);
   199ca:	4688      	mov	r8, r1
	if (p->flags & SYS_MEM_POOL_KERNEL) {
   199cc:	f010 0001 	ands.w	r0, r0, #1
	block_free(p, level, lsizes, block);
   199d0:	4615      	mov	r5, r2
	if (p->flags & SYS_MEM_POOL_KERNEL) {
   199d2:	d001      	beq.n	199d8 <z_sys_mem_pool_block_free+0x38>
   199d4:	f7ff fedc 	bl	19790 <pool_irq_lock.isra.2.part.3>
	unsigned int key = pool_irq_lock(p);
   199d8:	4604      	mov	r4, r0
	while (level >= 0) {
   199da:	f1b8 0f00 	cmp.w	r8, #0
   199de:	da11      	bge.n	19a04 <z_sys_mem_pool_block_free+0x64>
	return -1;
   199e0:	f04f 34ff 	mov.w	r4, #4294967295
	pool_irq_unlock(p, key);
   199e4:	4621      	mov	r1, r4
   199e6:	7c30      	ldrb	r0, [r6, #16]
   199e8:	f7ff fedb 	bl	197a2 <pool_irq_unlock.isra.4>
}
   199ec:	3714      	adds	r7, #20
   199ee:	46bd      	mov	sp, r7
   199f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		lsizes[i] = WB_DN(lsizes[i-1] / 4);
   199f4:	6823      	ldr	r3, [r4, #0]
	for (i = 1; i <= level; i++) {
   199f6:	3001      	adds	r0, #1
		lsizes[i] = WB_DN(lsizes[i-1] / 4);
   199f8:	089b      	lsrs	r3, r3, #2
   199fa:	f023 0303 	bic.w	r3, r3, #3
   199fe:	f844 3f04 	str.w	r3, [r4, #4]!
   19a02:	e7df      	b.n	199c4 <z_sys_mem_pool_block_free+0x24>
		int i, lsz = lsizes[level];
   19a04:	f85b 3028 	ldr.w	r3, [fp, r8, lsl #2]
	int bit = get_bit_ptr(p, level, bn, &word);
   19a08:	462a      	mov	r2, r5
	return (u8_t *)p->buf + lsz * block;
   19a0a:	fb03 fa05 	mul.w	sl, r3, r5
		int i, lsz = lsizes[level];
   19a0e:	607b      	str	r3, [r7, #4]
	return (u8_t *)p->buf + lsz * block;
   19a10:	6833      	ldr	r3, [r6, #0]
	int bit = get_bit_ptr(p, level, bn, &word);
   19a12:	4641      	mov	r1, r8
	return (u8_t *)p->buf + lsz * block;
   19a14:	eb03 090a 	add.w	r9, r3, sl
   19a18:	603b      	str	r3, [r7, #0]
	int bit = get_bit_ptr(p, level, bn, &word);
   19a1a:	4630      	mov	r0, r6
   19a1c:	f107 030c 	add.w	r3, r7, #12
   19a20:	f7ff fe9f 	bl	19762 <get_bit_ptr>
	*word &= ~(1<<bit);
   19a24:	2301      	movs	r3, #1
   19a26:	68fa      	ldr	r2, [r7, #12]
   19a28:	fa03 f000 	lsl.w	r0, r3, r0
   19a2c:	6813      	ldr	r3, [r2, #0]
	node->next = list;
   19a2e:	6839      	ldr	r1, [r7, #0]
   19a30:	ea23 0300 	bic.w	r3, r3, r0
   19a34:	6013      	str	r3, [r2, #0]
		sys_dlist_append(&p->levels[level].free_list, block);
   19a36:	220c      	movs	r2, #12
   19a38:	68f3      	ldr	r3, [r6, #12]
   19a3a:	fb02 3308 	mla	r3, r2, r8, r3
   19a3e:	1d1a      	adds	r2, r3, #4
   19a40:	f841 200a 	str.w	r2, [r1, sl]
	node->prev = list->tail;
   19a44:	689a      	ldr	r2, [r3, #8]
		pool_irq_unlock(p, key);
   19a46:	4621      	mov	r1, r4
   19a48:	f8c9 2004 	str.w	r2, [r9, #4]
	list->tail->next = node;
   19a4c:	689a      	ldr	r2, [r3, #8]
   19a4e:	f8c2 9000 	str.w	r9, [r2]
	list->tail = node;
   19a52:	f8c3 9008 	str.w	r9, [r3, #8]
   19a56:	7c30      	ldrb	r0, [r6, #16]
   19a58:	f7ff fea3 	bl	197a2 <pool_irq_unlock.isra.4>
	if (p->flags & SYS_MEM_POOL_KERNEL) {
   19a5c:	7c30      	ldrb	r0, [r6, #16]
   19a5e:	f010 0001 	ands.w	r0, r0, #1
   19a62:	d001      	beq.n	19a68 <z_sys_mem_pool_block_free+0xc8>
   19a64:	f7ff fe94 	bl	19790 <pool_irq_lock.isra.2.part.3>
		key = pool_irq_lock(p);
   19a68:	4604      	mov	r4, r0
		if (level == 0 || partner_alloc_bits(p, level, bn) != 0) {
   19a6a:	f1b8 0f00 	cmp.w	r8, #0
   19a6e:	d0b9      	beq.n	199e4 <z_sys_mem_pool_block_free+0x44>
	int bit = get_bit_ptr(p, level, bn, &word);
   19a70:	f107 030c 	add.w	r3, r7, #12
   19a74:	462a      	mov	r2, r5
   19a76:	4641      	mov	r1, r8
   19a78:	4630      	mov	r0, r6
   19a7a:	f7ff fe72 	bl	19762 <get_bit_ptr>
	return (*word >> (4*(bit / 4))) & 0xf;
   19a7e:	68fb      	ldr	r3, [r7, #12]
   19a80:	2800      	cmp	r0, #0
   19a82:	bfb8      	it	lt
   19a84:	3003      	addlt	r0, #3
   19a86:	681b      	ldr	r3, [r3, #0]
   19a88:	f020 0003 	bic.w	r0, r0, #3
   19a8c:	fa23 f000 	lsr.w	r0, r3, r0
		if (level == 0 || partner_alloc_bits(p, level, bn) != 0) {
   19a90:	f010 000f 	ands.w	r0, r0, #15
   19a94:	d1a6      	bne.n	199e4 <z_sys_mem_pool_block_free+0x44>
	node->next = NULL;
   19a96:	4684      	mov	ip, r0
			int b = (bn & ~3) + i;
   19a98:	f025 0a03 	bic.w	sl, r5, #3
	return (u8_t *)p->buf + lsz * block;
   19a9c:	687a      	ldr	r2, [r7, #4]
			int b = (bn & ~3) + i;
   19a9e:	eb0a 0300 	add.w	r3, sl, r0
	return (u8_t *)p->buf + lsz * block;
   19aa2:	4353      	muls	r3, r2
   19aa4:	6832      	ldr	r2, [r6, #0]
		for (i = 0; i < 4; i++) {
   19aa6:	3001      	adds	r0, #1
	return (u8_t *)p->buf + lsz * block;
   19aa8:	18d1      	adds	r1, r2, r3
	node->prev->next = node->next;
   19aaa:	f8d1 9004 	ldr.w	r9, [r1, #4]
   19aae:	f852 e003 	ldr.w	lr, [r2, r3]
		for (i = 0; i < 4; i++) {
   19ab2:	2804      	cmp	r0, #4
   19ab4:	f8c9 e000 	str.w	lr, [r9]
	node->next->prev = node->prev;
   19ab8:	f8ce 9004 	str.w	r9, [lr, #4]
	node->next = NULL;
   19abc:	f842 c003 	str.w	ip, [r2, r3]
	node->prev = NULL;
   19ac0:	f8c1 c004 	str.w	ip, [r1, #4]
   19ac4:	d1ea      	bne.n	19a9c <z_sys_mem_pool_block_free+0xfc>
		bn = bn / 4;
   19ac6:	2d00      	cmp	r5, #0
   19ac8:	bfb8      	it	lt
   19aca:	3503      	addlt	r5, #3
		level = level - 1;
   19acc:	f108 38ff 	add.w	r8, r8, #4294967295
		bn = bn / 4;
   19ad0:	10ad      	asrs	r5, r5, #2
   19ad2:	e782      	b.n	199da <z_sys_mem_pool_block_free+0x3a>

00019ad4 <arch_printk_char_out>:
}
   19ad4:	2000      	movs	r0, #0
   19ad6:	4770      	bx	lr

00019ad8 <print_err>:
{
   19ad8:	b570      	push	{r4, r5, r6, lr}
   19ada:	460d      	mov	r5, r1
   19adc:	4604      	mov	r4, r0
	out('E', ctx);
   19ade:	2045      	movs	r0, #69	; 0x45
   19ae0:	47a0      	blx	r4
	out('R', ctx);
   19ae2:	4629      	mov	r1, r5
   19ae4:	2052      	movs	r0, #82	; 0x52
   19ae6:	47a0      	blx	r4
	out('R', ctx);
   19ae8:	4629      	mov	r1, r5
   19aea:	4623      	mov	r3, r4
}
   19aec:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	out('R', ctx);
   19af0:	2052      	movs	r0, #82	; 0x52
   19af2:	4718      	bx	r3

00019af4 <z_vprintk>:
{
   19af4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	char length_mod = 0;
   19af8:	f04f 0800 	mov.w	r8, #0
{
   19afc:	4606      	mov	r6, r0
   19afe:	460f      	mov	r7, r1
   19b00:	461c      	mov	r4, r3
	int min_width = -1;
   19b02:	f04f 3aff 	mov.w	sl, #4294967295
	enum pad_type padding = PAD_NONE;
   19b06:	46c1      	mov	r9, r8
	int might_format = 0; /* 1 if encountered a '%' */
   19b08:	4645      	mov	r5, r8
{
   19b0a:	b08b      	sub	sp, #44	; 0x2c
   19b0c:	9202      	str	r2, [sp, #8]
	while (*fmt) {
   19b0e:	9b02      	ldr	r3, [sp, #8]
   19b10:	7818      	ldrb	r0, [r3, #0]
   19b12:	b910      	cbnz	r0, 19b1a <z_vprintk+0x26>
}
   19b14:	b00b      	add	sp, #44	; 0x2c
   19b16:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (!might_format) {
   19b1a:	b945      	cbnz	r5, 19b2e <z_vprintk+0x3a>
			if (*fmt != '%') {
   19b1c:	2825      	cmp	r0, #37	; 0x25
   19b1e:	f000 814b 	beq.w	19db8 <z_vprintk+0x2c4>
				out((int)*fmt, ctx);
   19b22:	4639      	mov	r1, r7
   19b24:	47b0      	blx	r6
		++fmt;
   19b26:	9b02      	ldr	r3, [sp, #8]
   19b28:	3301      	adds	r3, #1
   19b2a:	9302      	str	r3, [sp, #8]
   19b2c:	e7ef      	b.n	19b0e <z_vprintk+0x1a>
			switch (*fmt) {
   19b2e:	2864      	cmp	r0, #100	; 0x64
   19b30:	d06d      	beq.n	19c0e <z_vprintk+0x11a>
   19b32:	d819      	bhi.n	19b68 <z_vprintk+0x74>
   19b34:	2839      	cmp	r0, #57	; 0x39
   19b36:	d80a      	bhi.n	19b4e <z_vprintk+0x5a>
   19b38:	2831      	cmp	r0, #49	; 0x31
   19b3a:	d25f      	bcs.n	19bfc <z_vprintk+0x108>
   19b3c:	282d      	cmp	r0, #45	; 0x2d
   19b3e:	f000 8141 	beq.w	19dc4 <z_vprintk+0x2d0>
   19b42:	2830      	cmp	r0, #48	; 0x30
   19b44:	d04b      	beq.n	19bde <z_vprintk+0xea>
   19b46:	2825      	cmp	r0, #37	; 0x25
   19b48:	d107      	bne.n	19b5a <z_vprintk+0x66>
				out((int)'%', ctx);
   19b4a:	4639      	mov	r1, r7
   19b4c:	e132      	b.n	19db4 <z_vprintk+0x2c0>
			switch (*fmt) {
   19b4e:	2858      	cmp	r0, #88	; 0x58
   19b50:	f000 80bb 	beq.w	19cca <z_vprintk+0x1d6>
   19b54:	2863      	cmp	r0, #99	; 0x63
   19b56:	f000 812a 	beq.w	19dae <z_vprintk+0x2ba>
				out((int)'%', ctx);
   19b5a:	4639      	mov	r1, r7
   19b5c:	2025      	movs	r0, #37	; 0x25
   19b5e:	47b0      	blx	r6
				out((int)*fmt, ctx);
   19b60:	9b02      	ldr	r3, [sp, #8]
   19b62:	4639      	mov	r1, r7
   19b64:	7818      	ldrb	r0, [r3, #0]
   19b66:	e125      	b.n	19db4 <z_vprintk+0x2c0>
			switch (*fmt) {
   19b68:	2870      	cmp	r0, #112	; 0x70
   19b6a:	f000 80a4 	beq.w	19cb6 <z_vprintk+0x1c2>
   19b6e:	d811      	bhi.n	19b94 <z_vprintk+0xa0>
   19b70:	2869      	cmp	r0, #105	; 0x69
   19b72:	d04c      	beq.n	19c0e <z_vprintk+0x11a>
   19b74:	286c      	cmp	r0, #108	; 0x6c
   19b76:	d105      	bne.n	19b84 <z_vprintk+0x90>
				} else if (*fmt == 'l' && length_mod == 'l') {
   19b78:	f1b8 0f6c 	cmp.w	r8, #108	; 0x6c
   19b7c:	d12a      	bne.n	19bd4 <z_vprintk+0xe0>
					length_mod = 'L';
   19b7e:	f04f 084c 	mov.w	r8, #76	; 0x4c
   19b82:	e7d0      	b.n	19b26 <z_vprintk+0x32>
			switch (*fmt) {
   19b84:	2868      	cmp	r0, #104	; 0x68
   19b86:	d1e8      	bne.n	19b5a <z_vprintk+0x66>
				if (*fmt == 'h' && length_mod == 'h') {
   19b88:	f1b8 0f68 	cmp.w	r8, #104	; 0x68
   19b8c:	d122      	bne.n	19bd4 <z_vprintk+0xe0>
					length_mod = 'H';
   19b8e:	f04f 0848 	mov.w	r8, #72	; 0x48
   19b92:	e7c8      	b.n	19b26 <z_vprintk+0x32>
			switch (*fmt) {
   19b94:	2875      	cmp	r0, #117	; 0x75
   19b96:	d072      	beq.n	19c7e <z_vprintk+0x18a>
   19b98:	d818      	bhi.n	19bcc <z_vprintk+0xd8>
   19b9a:	2873      	cmp	r0, #115	; 0x73
   19b9c:	d1dd      	bne.n	19b5a <z_vprintk+0x66>
				char *s = va_arg(ap, char *);
   19b9e:	f854 5b04 	ldr.w	r5, [r4], #4
				while (*s) {
   19ba2:	46ab      	mov	fp, r5
   19ba4:	465b      	mov	r3, fp
   19ba6:	f81b 0b01 	ldrb.w	r0, [fp], #1
   19baa:	2800      	cmp	r0, #0
   19bac:	f040 80fc 	bne.w	19da8 <z_vprintk+0x2b4>
				if (padding == PAD_SPACE_AFTER) {
   19bb0:	f1b9 0f03 	cmp.w	r9, #3
   19bb4:	f040 810c 	bne.w	19dd0 <z_vprintk+0x2dc>
					int remaining = min_width - (s - start);
   19bb8:	1b5d      	subs	r5, r3, r5
   19bba:	ebaa 0505 	sub.w	r5, sl, r5
					while (remaining-- > 0) {
   19bbe:	2d00      	cmp	r5, #0
   19bc0:	dd49      	ble.n	19c56 <z_vprintk+0x162>
						out(' ', ctx);
   19bc2:	4639      	mov	r1, r7
   19bc4:	2020      	movs	r0, #32
   19bc6:	47b0      	blx	r6
   19bc8:	3d01      	subs	r5, #1
   19bca:	e7f8      	b.n	19bbe <z_vprintk+0xca>
			switch (*fmt) {
   19bcc:	2878      	cmp	r0, #120	; 0x78
   19bce:	d07c      	beq.n	19cca <z_vprintk+0x1d6>
   19bd0:	287a      	cmp	r0, #122	; 0x7a
   19bd2:	d1c2      	bne.n	19b5a <z_vprintk+0x66>
				} else if (length_mod == 0) {
   19bd4:	f1b8 0f00 	cmp.w	r8, #0
   19bd8:	d1bf      	bne.n	19b5a <z_vprintk+0x66>
   19bda:	4680      	mov	r8, r0
   19bdc:	e7a3      	b.n	19b26 <z_vprintk+0x32>
				if (min_width < 0 && padding == PAD_NONE) {
   19bde:	f1ba 0f00 	cmp.w	sl, #0
   19be2:	da0e      	bge.n	19c02 <z_vprintk+0x10e>
   19be4:	f1b9 0f00 	cmp.w	r9, #0
   19be8:	f000 80ef 	beq.w	19dca <z_vprintk+0x2d6>
					min_width = *fmt - '0';
   19bec:	f1a0 0a30 	sub.w	sl, r0, #48	; 0x30
					padding = PAD_SPACE_BEFORE;
   19bf0:	f1b9 0f00 	cmp.w	r9, #0
   19bf4:	bf08      	it	eq
   19bf6:	f04f 0902 	moveq.w	r9, #2
   19bfa:	e794      	b.n	19b26 <z_vprintk+0x32>
				if (min_width < 0) {
   19bfc:	f1ba 0f00 	cmp.w	sl, #0
   19c00:	dbf4      	blt.n	19bec <z_vprintk+0xf8>
					min_width = 10 * min_width + *fmt - '0';
   19c02:	230a      	movs	r3, #10
   19c04:	fb03 0a0a 	mla	sl, r3, sl, r0
   19c08:	f1aa 0a30 	sub.w	sl, sl, #48	; 0x30
   19c0c:	e7f0      	b.n	19bf0 <z_vprintk+0xfc>
				if (length_mod == 'z') {
   19c0e:	f1b8 0f7a 	cmp.w	r8, #122	; 0x7a
   19c12:	d102      	bne.n	19c1a <z_vprintk+0x126>
					d = va_arg(ap, int);
   19c14:	f854 5b04 	ldr.w	r5, [r4], #4
   19c18:	e020      	b.n	19c5c <z_vprintk+0x168>
				} else if (length_mod == 'l') {
   19c1a:	f1b8 0f6c 	cmp.w	r8, #108	; 0x6c
   19c1e:	d0f9      	beq.n	19c14 <z_vprintk+0x120>
				} else if (length_mod == 'L') {
   19c20:	f1b8 0f4c 	cmp.w	r8, #76	; 0x4c
   19c24:	d1f6      	bne.n	19c14 <z_vprintk+0x120>
					long long lld = va_arg(ap, long long);
   19c26:	3407      	adds	r4, #7
   19c28:	f024 0407 	bic.w	r4, r4, #7
   19c2c:	e8f4 2302 	ldrd	r2, r3, [r4], #8
					if (lld > __LONG_MAX__ ||
   19c30:	f112 4100 	adds.w	r1, r2, #2147483648	; 0x80000000
   19c34:	9106      	str	r1, [sp, #24]
   19c36:	f143 0100 	adc.w	r1, r3, #0
   19c3a:	9107      	str	r1, [sp, #28]
   19c3c:	2100      	movs	r1, #0
   19c3e:	e9dd bc06 	ldrd	fp, ip, [sp, #24]
   19c42:	f04f 30ff 	mov.w	r0, #4294967295
   19c46:	4561      	cmp	r1, ip
   19c48:	bf08      	it	eq
   19c4a:	4558      	cmpeq	r0, fp
   19c4c:	d205      	bcs.n	19c5a <z_vprintk+0x166>
						print_err(out, ctx);
   19c4e:	4639      	mov	r1, r7
   19c50:	4630      	mov	r0, r6
   19c52:	f7ff ff41 	bl	19ad8 <print_err>
			might_format = 0;
   19c56:	2500      	movs	r5, #0
				break;
   19c58:	e765      	b.n	19b26 <z_vprintk+0x32>
					d = lld;
   19c5a:	4615      	mov	r5, r2
				if (d < 0) {
   19c5c:	2d00      	cmp	r5, #0
   19c5e:	da05      	bge.n	19c6c <z_vprintk+0x178>
					out((int)'-', ctx);
   19c60:	4639      	mov	r1, r7
   19c62:	202d      	movs	r0, #45	; 0x2d
   19c64:	47b0      	blx	r6
					d = -d;
   19c66:	426d      	negs	r5, r5
					min_width--;
   19c68:	f10a 3aff 	add.w	sl, sl, #4294967295
				_printk_dec_ulong(out, ctx, d, padding,
   19c6c:	464b      	mov	r3, r9
   19c6e:	462a      	mov	r2, r5
   19c70:	f8cd a000 	str.w	sl, [sp]
				_printk_dec_ulong(out, ctx, u, padding,
   19c74:	4639      	mov	r1, r7
   19c76:	4630      	mov	r0, r6
   19c78:	f7f2 fd20 	bl	c6bc <_printk_dec_ulong>
				break;
   19c7c:	e7eb      	b.n	19c56 <z_vprintk+0x162>
				if (length_mod == 'z') {
   19c7e:	f1b8 0f7a 	cmp.w	r8, #122	; 0x7a
   19c82:	d102      	bne.n	19c8a <z_vprintk+0x196>
					u = va_arg(ap, unsigned int);
   19c84:	f854 2b04 	ldr.w	r2, [r4], #4
   19c88:	e011      	b.n	19cae <z_vprintk+0x1ba>
				} else if (length_mod == 'l') {
   19c8a:	f1b8 0f6c 	cmp.w	r8, #108	; 0x6c
   19c8e:	d0f9      	beq.n	19c84 <z_vprintk+0x190>
				} else if (length_mod == 'L') {
   19c90:	f1b8 0f4c 	cmp.w	r8, #76	; 0x4c
   19c94:	d1f6      	bne.n	19c84 <z_vprintk+0x190>
					if (llu > ~0UL) {
   19c96:	2100      	movs	r1, #0
   19c98:	f04f 30ff 	mov.w	r0, #4294967295
					unsigned long long llu =
   19c9c:	3407      	adds	r4, #7
   19c9e:	f024 0407 	bic.w	r4, r4, #7
   19ca2:	e8f4 2302 	ldrd	r2, r3, [r4], #8
					if (llu > ~0UL) {
   19ca6:	4299      	cmp	r1, r3
   19ca8:	bf08      	it	eq
   19caa:	4290      	cmpeq	r0, r2
   19cac:	d3cf      	bcc.n	19c4e <z_vprintk+0x15a>
				_printk_dec_ulong(out, ctx, u, padding,
   19cae:	f8cd a000 	str.w	sl, [sp]
   19cb2:	464b      	mov	r3, r9
   19cb4:	e7de      	b.n	19c74 <z_vprintk+0x180>
				out('0', ctx);
   19cb6:	4639      	mov	r1, r7
   19cb8:	2030      	movs	r0, #48	; 0x30
   19cba:	47b0      	blx	r6
				out('x', ctx);
   19cbc:	4639      	mov	r1, r7
   19cbe:	2078      	movs	r0, #120	; 0x78
   19cc0:	47b0      	blx	r6
					min_width = 8;
   19cc2:	f04f 0a08 	mov.w	sl, #8
				padding = PAD_ZERO_BEFORE;
   19cc6:	f04f 0901 	mov.w	r9, #1
				if (*fmt == 'p') {
   19cca:	9b02      	ldr	r3, [sp, #8]
   19ccc:	781b      	ldrb	r3, [r3, #0]
   19cce:	2b70      	cmp	r3, #112	; 0x70
   19cd0:	d104      	bne.n	19cdc <z_vprintk+0x1e8>
					x = va_arg(ap, unsigned int);
   19cd2:	f854 3b04 	ldr.w	r3, [r4], #4
   19cd6:	9304      	str	r3, [sp, #16]
   19cd8:	2300      	movs	r3, #0
   19cda:	e00d      	b.n	19cf8 <z_vprintk+0x204>
				} else if (length_mod == 'l') {
   19cdc:	f1b8 0f6c 	cmp.w	r8, #108	; 0x6c
   19ce0:	d0f7      	beq.n	19cd2 <z_vprintk+0x1de>
				} else if (length_mod == 'L') {
   19ce2:	f1b8 0f4c 	cmp.w	r8, #76	; 0x4c
   19ce6:	d1f4      	bne.n	19cd2 <z_vprintk+0x1de>
					x = va_arg(ap, unsigned long long);
   19ce8:	3407      	adds	r4, #7
   19cea:	f024 0307 	bic.w	r3, r4, #7
   19cee:	461c      	mov	r4, r3
   19cf0:	f854 2b08 	ldr.w	r2, [r4], #8
   19cf4:	685b      	ldr	r3, [r3, #4]
   19cf6:	9204      	str	r2, [sp, #16]
	int digits = 0;
   19cf8:	2100      	movs	r1, #0
	int remaining = 16; /* 16 digits max */
   19cfa:	2210      	movs	r2, #16
	int shift = sizeof(num) * 8;
   19cfc:	f04f 0b40 	mov.w	fp, #64	; 0x40
	int digits = 0;
   19d00:	9103      	str	r1, [sp, #12]
	int found_largest_digit = 0;
   19d02:	9105      	str	r1, [sp, #20]
		shift -= 4;
   19d04:	f1ab 0b04 	sub.w	fp, fp, #4
		nibble = (num >> shift) & 0xf;
   19d08:	9804      	ldr	r0, [sp, #16]
   19d0a:	f1cb 0c20 	rsb	ip, fp, #32
   19d0e:	f1ab 0120 	sub.w	r1, fp, #32
   19d12:	fa20 f00b 	lsr.w	r0, r0, fp
   19d16:	fa03 fc0c 	lsl.w	ip, r3, ip
   19d1a:	ea40 000c 	orr.w	r0, r0, ip
   19d1e:	fa23 f101 	lsr.w	r1, r3, r1
   19d22:	4308      	orrs	r0, r1
		if (nibble != 0 || found_largest_digit != 0 || shift == 0) {
   19d24:	f010 000f 	ands.w	r0, r0, #15
   19d28:	d106      	bne.n	19d38 <z_vprintk+0x244>
   19d2a:	9905      	ldr	r1, [sp, #20]
   19d2c:	b911      	cbnz	r1, 19d34 <z_vprintk+0x240>
   19d2e:	f1bb 0f00 	cmp.w	fp, #0
   19d32:	d122      	bne.n	19d7a <z_vprintk+0x286>
			nibble += nibble > 9 ? 87 : 48;
   19d34:	2130      	movs	r1, #48	; 0x30
   19d36:	e003      	b.n	19d40 <z_vprintk+0x24c>
   19d38:	2809      	cmp	r0, #9
   19d3a:	bf8c      	ite	hi
   19d3c:	2157      	movhi	r1, #87	; 0x57
   19d3e:	2130      	movls	r1, #48	; 0x30
   19d40:	4408      	add	r0, r1
			out((int)nibble, ctx);
   19d42:	b240      	sxtb	r0, r0
   19d44:	4639      	mov	r1, r7
   19d46:	9308      	str	r3, [sp, #32]
   19d48:	9205      	str	r2, [sp, #20]
   19d4a:	47b0      	blx	r6
			digits++;
   19d4c:	9b03      	ldr	r3, [sp, #12]
	while (shift >= 4) {
   19d4e:	9a05      	ldr	r2, [sp, #20]
			digits++;
   19d50:	3301      	adds	r3, #1
   19d52:	9303      	str	r3, [sp, #12]
	while (shift >= 4) {
   19d54:	9b08      	ldr	r3, [sp, #32]
   19d56:	f1bb 0f00 	cmp.w	fp, #0
   19d5a:	d123      	bne.n	19da4 <z_vprintk+0x2b0>
	if (padding == PAD_SPACE_AFTER) {
   19d5c:	f1b9 0f03 	cmp.w	r9, #3
   19d60:	f47f af79 	bne.w	19c56 <z_vprintk+0x162>
		remaining = min_width * 2 - digits;
   19d64:	9b03      	ldr	r3, [sp, #12]
   19d66:	ebc3 054a 	rsb	r5, r3, sl, lsl #1
		while (remaining-- > 0) {
   19d6a:	2d00      	cmp	r5, #0
   19d6c:	f77f af73 	ble.w	19c56 <z_vprintk+0x162>
			out(' ', ctx);
   19d70:	4639      	mov	r1, r7
   19d72:	2020      	movs	r0, #32
   19d74:	47b0      	blx	r6
   19d76:	3d01      	subs	r5, #1
   19d78:	e7f7      	b.n	19d6a <z_vprintk+0x276>
		if (remaining-- <= min_width) {
   19d7a:	1e51      	subs	r1, r2, #1
   19d7c:	4592      	cmp	sl, r2
   19d7e:	9108      	str	r1, [sp, #32]
   19d80:	db07      	blt.n	19d92 <z_vprintk+0x29e>
			if (padding == PAD_ZERO_BEFORE) {
   19d82:	f1b9 0f01 	cmp.w	r9, #1
   19d86:	d106      	bne.n	19d96 <z_vprintk+0x2a2>
				out('0', ctx);
   19d88:	4639      	mov	r1, r7
   19d8a:	2030      	movs	r0, #48	; 0x30
   19d8c:	9309      	str	r3, [sp, #36]	; 0x24
				out(' ', ctx);
   19d8e:	47b0      	blx	r6
   19d90:	9b09      	ldr	r3, [sp, #36]	; 0x24
			nibble += nibble > 9 ? 87 : 48;
   19d92:	9a08      	ldr	r2, [sp, #32]
   19d94:	e7b6      	b.n	19d04 <z_vprintk+0x210>
			} else if (padding == PAD_SPACE_BEFORE) {
   19d96:	f1b9 0f02 	cmp.w	r9, #2
   19d9a:	d1fa      	bne.n	19d92 <z_vprintk+0x29e>
   19d9c:	9309      	str	r3, [sp, #36]	; 0x24
				out(' ', ctx);
   19d9e:	4639      	mov	r1, r7
   19da0:	2020      	movs	r0, #32
   19da2:	e7f4      	b.n	19d8e <z_vprintk+0x29a>
			found_largest_digit = 1;
   19da4:	9505      	str	r5, [sp, #20]
   19da6:	e7ad      	b.n	19d04 <z_vprintk+0x210>
					out((int)(*s++), ctx);
   19da8:	4639      	mov	r1, r7
   19daa:	47b0      	blx	r6
   19dac:	e6fa      	b.n	19ba4 <z_vprintk+0xb0>
				out(c, ctx);
   19dae:	4639      	mov	r1, r7
   19db0:	f854 0b04 	ldr.w	r0, [r4], #4
				out((int)'%', ctx);
   19db4:	47b0      	blx	r6
   19db6:	e74e      	b.n	19c56 <z_vprintk+0x162>
				length_mod = 0;
   19db8:	46a8      	mov	r8, r5
				padding = PAD_NONE;
   19dba:	46a9      	mov	r9, r5
				min_width = -1;
   19dbc:	f04f 3aff 	mov.w	sl, #4294967295
				might_format = 1;
   19dc0:	2501      	movs	r5, #1
   19dc2:	e6b0      	b.n	19b26 <z_vprintk+0x32>
				padding = PAD_SPACE_AFTER;
   19dc4:	f04f 0903 	mov.w	r9, #3
   19dc8:	e6ad      	b.n	19b26 <z_vprintk+0x32>
					padding = PAD_ZERO_BEFORE;
   19dca:	f04f 0901 	mov.w	r9, #1
   19dce:	e6aa      	b.n	19b26 <z_vprintk+0x32>
			might_format = 0;
   19dd0:	4605      	mov	r5, r0
   19dd2:	e6a8      	b.n	19b26 <z_vprintk+0x32>

00019dd4 <printk>:
{
   19dd4:	b40f      	push	{r0, r1, r2, r3}
   19dd6:	b507      	push	{r0, r1, r2, lr}
   19dd8:	a904      	add	r1, sp, #16
   19dda:	f851 0b04 	ldr.w	r0, [r1], #4
	va_start(ap, fmt);
   19dde:	9101      	str	r1, [sp, #4]
		vprintk(fmt, ap);
   19de0:	f7f2 fcb8 	bl	c754 <vprintk>
}
   19de4:	b003      	add	sp, #12
   19de6:	f85d eb04 	ldr.w	lr, [sp], #4
   19dea:	b004      	add	sp, #16
   19dec:	4770      	bx	lr

00019dee <z_thread_entry>:
 * This routine does not return, and is marked as such so the compiler won't
 * generate preamble code that is only used by functions that actually return.
 */
FUNC_NORETURN void z_thread_entry(k_thread_entry_t entry,
				 void *p1, void *p2, void *p3)
{
   19dee:	4604      	mov	r4, r0
   19df0:	b508      	push	{r3, lr}
   19df2:	4608      	mov	r0, r1
   19df4:	4611      	mov	r1, r2
	entry(p1, p2, p3);
   19df6:	461a      	mov	r2, r3
   19df8:	47a0      	blx	r4
	return z_impl_k_current_get();
   19dfa:	f7ff f981 	bl	19100 <z_impl_k_current_get>
	z_impl_k_thread_abort(thread);
   19dfe:	f7f4 f967 	bl	e0d0 <z_impl_k_thread_abort>

00019e02 <z_work_q_main>:

#include <kernel.h>
#define WORKQUEUE_THREAD_NAME	"workqueue"

void z_work_q_main(void *work_q_ptr, void *p2, void *p3)
{
   19e02:	b510      	push	{r4, lr}
   19e04:	4604      	mov	r4, r0
	return z_impl_k_queue_get(queue, timeout);
   19e06:	f04f 31ff 	mov.w	r1, #4294967295
   19e0a:	4620      	mov	r0, r4
   19e0c:	f001 fc42 	bl	1b694 <z_impl_k_queue_get>
	while (true) {
		struct k_work *work;
		k_work_handler_t handler;

		work = k_queue_get(&work_q->queue, K_FOREVER);
		if (work == NULL) {
   19e10:	4603      	mov	r3, r0
   19e12:	2800      	cmp	r0, #0
   19e14:	d0f7      	beq.n	19e06 <z_work_q_main+0x4>
			continue;
		}

		handler = work->handler;
   19e16:	6842      	ldr	r2, [r0, #4]
 * @return Previous value of @a target.
 */
#ifdef CONFIG_ATOMIC_OPERATIONS_BUILTIN
static inline atomic_val_t atomic_and(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   19e18:	3308      	adds	r3, #8
   19e1a:	e8d3 1fef 	ldaex	r1, [r3]
   19e1e:	f021 0c01 	bic.w	ip, r1, #1
   19e22:	e8c3 cfee 	stlex	lr, ip, [r3]
   19e26:	f1be 0f00 	cmp.w	lr, #0
   19e2a:	d1f6      	bne.n	19e1a <z_work_q_main+0x18>

		/* Reset pending state so it can be resubmitted by handler */
		if (atomic_test_and_clear_bit(work->flags,
   19e2c:	07cb      	lsls	r3, r1, #31
   19e2e:	d500      	bpl.n	19e32 <z_work_q_main+0x30>
					      K_WORK_STATE_PENDING)) {
			handler(work);
   19e30:	4790      	blx	r2
	z_impl_k_yield();
   19e32:	f7ff f8f1 	bl	19018 <z_impl_k_yield>
   19e36:	e7e6      	b.n	19e06 <z_work_q_main+0x4>

00019e38 <_ConfigAbsSyms>:
GEN_ABSOLUTE_SYM(CONFIG_OUTPUT_DISASSEMBLY, 1);
GEN_ABSOLUTE_SYM(CONFIG_OUTPUT_PRINT_MEMORY_USAGE, 1);
GEN_ABSOLUTE_SYM(CONFIG_BUILD_OUTPUT_BIN, 1);
GEN_ABSOLUTE_SYM(CONFIG_COMPAT_INCLUDES, 1);

GEN_ABS_SYM_END
   19e38:	4770      	bx	lr

00019e3a <z_platform_init>:

void z_platform_init(void)
{
	SystemInit();
   19e3a:	f7fe b997 	b.w	1816c <SystemInit>

00019e3e <log_list_init>:

#include "log_list.h"

void log_list_init(struct log_list_t *list)
{
	list->tail = NULL;
   19e3e:	2300      	movs	r3, #0
	list->head = NULL;
   19e40:	e9c0 3300 	strd	r3, r3, [r0]
}
   19e44:	4770      	bx	lr

00019e46 <log_list_add_tail>:

void log_list_add_tail(struct log_list_t *list, struct log_msg *msg)
{
	if (list->head == NULL) {
   19e46:	6803      	ldr	r3, [r0, #0]
   19e48:	b923      	cbnz	r3, 19e54 <log_list_add_tail+0xe>
		list->head = msg;
   19e4a:	6001      	str	r1, [r0, #0]
	} else {
		list->tail->next = msg;
	}

	list->tail = msg;
	msg->next = NULL;
   19e4c:	2300      	movs	r3, #0
	list->tail = msg;
   19e4e:	6041      	str	r1, [r0, #4]
	msg->next = NULL;
   19e50:	600b      	str	r3, [r1, #0]
}
   19e52:	4770      	bx	lr
		list->tail->next = msg;
   19e54:	6843      	ldr	r3, [r0, #4]
   19e56:	6019      	str	r1, [r3, #0]
   19e58:	e7f8      	b.n	19e4c <log_list_add_tail+0x6>

00019e5a <log_list_head_peek>:

struct log_msg *log_list_head_peek(struct log_list_t *list)
{
	return list->head;
}
   19e5a:	6800      	ldr	r0, [r0, #0]
   19e5c:	4770      	bx	lr

00019e5e <log_list_head_get>:

struct log_msg *log_list_head_get(struct log_list_t *list)
{
	struct log_msg *msg = list->head;
   19e5e:	6803      	ldr	r3, [r0, #0]

	if (list->head != NULL) {
   19e60:	b10b      	cbz	r3, 19e66 <log_list_head_get+0x8>
		list->head = list->head->next;
   19e62:	681a      	ldr	r2, [r3, #0]
   19e64:	6002      	str	r2, [r0, #0]
	}

	return msg;
}
   19e66:	4618      	mov	r0, r3
   19e68:	4770      	bx	lr

00019e6a <z_log_msg_std_alloc>:
/** @brief Allocate chunk for standard log message.
 *
 *  @return Allocated chunk of NULL.
 */
static inline struct log_msg *z_log_msg_std_alloc(void)
{
   19e6a:	b508      	push	{r3, lr}
	struct  log_msg *msg = (struct  log_msg *)log_msg_chunk_alloc();
   19e6c:	f7f2 ff26 	bl	ccbc <log_msg_chunk_alloc>

	if (msg != NULL) {
   19e70:	b118      	cbz	r0, 19e7a <z_log_msg_std_alloc+0x10>
		/* all fields reset to 0, reference counter to 1 */
		msg->hdr.ref_cnt = 1;
   19e72:	2301      	movs	r3, #1
   19e74:	6043      	str	r3, [r0, #4]
		msg->hdr.params.raw = 0U;
   19e76:	2300      	movs	r3, #0
   19e78:	8103      	strh	r3, [r0, #8]
		msg->hdr.params.std.type = LOG_MSG_TYPE_STD;
	}

	return msg;
}
   19e7a:	bd08      	pop	{r3, pc}

00019e7c <k_cycle_get_32_wrapper>:
#ifndef _ASMLANGUAGE
extern u32_t z_timer_cycle_get_32(void);

static inline u32_t arch_k_cycle_get_32(void)
{
	return z_timer_cycle_get_32();
   19e7c:	f7f3 bb98 	b.w	d5b0 <z_timer_cycle_get_32>

00019e80 <dummy_timestamp>:
   19e80:	2000      	movs	r0, #0
   19e82:	4770      	bx	lr

00019e84 <z_log_get_s_mask>:
	u32_t mask = 0;
   19e84:	2300      	movs	r3, #0
{
   19e86:	b5f0      	push	{r4, r5, r6, r7, lr}
	u32_t arg = 0;
   19e88:	461a      	mov	r2, r3
	bool arm = false;
   19e8a:	461c      	mov	r4, r3
				mask |= BIT(arg);
   19e8c:	2701      	movs	r7, #1
	while ((curr = *str++) && arg < nargs) {
   19e8e:	f810 5b01 	ldrb.w	r5, [r0], #1
   19e92:	b10d      	cbz	r5, 19e98 <z_log_get_s_mask+0x14>
   19e94:	428a      	cmp	r2, r1
   19e96:	d301      	bcc.n	19e9c <z_log_get_s_mask+0x18>
}
   19e98:	4618      	mov	r0, r3
   19e9a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (curr == '%') {
   19e9c:	2d25      	cmp	r5, #37	; 0x25
   19e9e:	d102      	bne.n	19ea6 <z_log_get_s_mask+0x22>
			arm = !arm;
   19ea0:	f084 0401 	eor.w	r4, r4, #1
   19ea4:	e7f3      	b.n	19e8e <z_log_get_s_mask+0xa>
		} else if (arm && isalpha((int)curr)) {
   19ea6:	2c00      	cmp	r4, #0
   19ea8:	d0f1      	beq.n	19e8e <z_log_get_s_mask+0xa>
	return (int)((((unsigned)c|32u)-(unsigned)'a') < 26U);
   19eaa:	f045 0620 	orr.w	r6, r5, #32
   19eae:	3e61      	subs	r6, #97	; 0x61
   19eb0:	2e19      	cmp	r6, #25
   19eb2:	d8ec      	bhi.n	19e8e <z_log_get_s_mask+0xa>
			if (curr == 's') {
   19eb4:	2d73      	cmp	r5, #115	; 0x73
				mask |= BIT(arg);
   19eb6:	bf04      	itt	eq
   19eb8:	fa07 f402 	lsleq.w	r4, r7, r2
   19ebc:	4323      	orreq	r3, r4
			arg++;
   19ebe:	3201      	adds	r2, #1
			arm = false;
   19ec0:	2400      	movs	r4, #0
   19ec2:	e7e4      	b.n	19e8e <z_log_get_s_mask+0xa>

00019ec4 <log_0>:
{
   19ec4:	b538      	push	{r3, r4, r5, lr}
   19ec6:	4605      	mov	r5, r0
   19ec8:	460c      	mov	r4, r1
 *
 *  @return Pointer to allocated head of the message or NULL.
 */
static inline struct log_msg *log_msg_create_0(const char *str)
{
	struct log_msg *msg = z_log_msg_std_alloc();
   19eca:	f7ff ffce 	bl	19e6a <z_log_msg_std_alloc>

	if (msg != NULL) {
   19ece:	b128      	cbz	r0, 19edc <log_0+0x18>
		msg->str = str;
   19ed0:	6105      	str	r5, [r0, #16]
		msg_finalize(msg, src_level);
   19ed2:	4621      	mov	r1, r4
}
   19ed4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		msg_finalize(msg, src_level);
   19ed8:	f7f2 be1a 	b.w	cb10 <msg_finalize>
}
   19edc:	bd38      	pop	{r3, r4, r5, pc}

00019ede <log_1>:
{
   19ede:	b570      	push	{r4, r5, r6, lr}
   19ee0:	4604      	mov	r4, r0
   19ee2:	460e      	mov	r6, r1
   19ee4:	4615      	mov	r5, r2
 *  @return Pointer to allocated head of the message or NULL.
 */
static inline struct log_msg *log_msg_create_1(const char *str,
					       log_arg_t arg1)
{
	struct  log_msg *msg = z_log_msg_std_alloc();
   19ee6:	f7ff ffc0 	bl	19e6a <z_log_msg_std_alloc>

	if (msg != NULL) {
   19eea:	b158      	cbz	r0, 19f04 <log_1+0x26>
		msg->str = str;
		msg->hdr.params.std.nargs = 1U;
   19eec:	2201      	movs	r2, #1
		msg->str = str;
   19eee:	6104      	str	r4, [r0, #16]
		msg->hdr.params.std.nargs = 1U;
   19ef0:	7a44      	ldrb	r4, [r0, #9]
		msg->payload.single.args[0] = arg1;
   19ef2:	6146      	str	r6, [r0, #20]
		msg->hdr.params.std.nargs = 1U;
   19ef4:	f362 1407 	bfi	r4, r2, #4, #4
   19ef8:	7244      	strb	r4, [r0, #9]
		msg_finalize(msg, src_level);
   19efa:	4629      	mov	r1, r5
}
   19efc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		msg_finalize(msg, src_level);
   19f00:	f7f2 be06 	b.w	cb10 <msg_finalize>
}
   19f04:	bd70      	pop	{r4, r5, r6, pc}

00019f06 <log_2>:
{
   19f06:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   19f0a:	4605      	mov	r5, r0
   19f0c:	4688      	mov	r8, r1
   19f0e:	4617      	mov	r7, r2
   19f10:	461e      	mov	r6, r3
 */
static inline struct log_msg *log_msg_create_2(const char *str,
					       log_arg_t arg1,
					       log_arg_t arg2)
{
	struct  log_msg *msg = z_log_msg_std_alloc();
   19f12:	f7ff ffaa 	bl	19e6a <z_log_msg_std_alloc>

	if (msg != NULL) {
   19f16:	b160      	cbz	r0, 19f32 <log_2+0x2c>
		msg->str = str;
		msg->hdr.params.std.nargs = 2U;
   19f18:	2302      	movs	r3, #2
		msg->str = str;
   19f1a:	6105      	str	r5, [r0, #16]
		msg->hdr.params.std.nargs = 2U;
   19f1c:	7a45      	ldrb	r5, [r0, #9]
		msg->payload.single.args[0] = arg1;
		msg->payload.single.args[1] = arg2;
   19f1e:	e9c0 8705 	strd	r8, r7, [r0, #20]
		msg->hdr.params.std.nargs = 2U;
   19f22:	f363 1507 	bfi	r5, r3, #4, #4
   19f26:	7245      	strb	r5, [r0, #9]
		msg_finalize(msg, src_level);
   19f28:	4631      	mov	r1, r6
}
   19f2a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		msg_finalize(msg, src_level);
   19f2e:	f7f2 bdef 	b.w	cb10 <msg_finalize>
}
   19f32:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00019f36 <log_3>:
{
   19f36:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   19f3a:	4605      	mov	r5, r0
   19f3c:	4689      	mov	r9, r1
   19f3e:	4690      	mov	r8, r2
   19f40:	461f      	mov	r7, r3
   19f42:	f8bd 6020 	ldrh.w	r6, [sp, #32]
static inline struct log_msg *log_msg_create_3(const char *str,
					       log_arg_t arg1,
					       log_arg_t arg2,
					       log_arg_t arg3)
{
	struct  log_msg *msg = z_log_msg_std_alloc();
   19f46:	f7ff ff90 	bl	19e6a <z_log_msg_std_alloc>

	if (msg != NULL) {
   19f4a:	b168      	cbz	r0, 19f68 <log_3+0x32>
		msg->str = str;
		msg->hdr.params.std.nargs = 3U;
   19f4c:	2303      	movs	r3, #3
		msg->str = str;
   19f4e:	6105      	str	r5, [r0, #16]
		msg->hdr.params.std.nargs = 3U;
   19f50:	7a45      	ldrb	r5, [r0, #9]
		msg->payload.single.args[0] = arg1;
		msg->payload.single.args[1] = arg2;
   19f52:	e9c0 9805 	strd	r9, r8, [r0, #20]
		msg->hdr.params.std.nargs = 3U;
   19f56:	f363 1507 	bfi	r5, r3, #4, #4
   19f5a:	7245      	strb	r5, [r0, #9]
		msg->payload.single.args[2] = arg3;
   19f5c:	61c7      	str	r7, [r0, #28]
		msg_finalize(msg, src_level);
   19f5e:	4631      	mov	r1, r6
}
   19f60:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
		msg_finalize(msg, src_level);
   19f64:	f7f2 bdd4 	b.w	cb10 <msg_finalize>
}
   19f68:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

00019f6c <log_n>:
{
   19f6c:	b510      	push	{r4, lr}
   19f6e:	461c      	mov	r4, r3
		struct log_msg *msg = log_msg_create_n(str, args, narg);
   19f70:	f000 f893 	bl	1a09a <log_msg_create_n>
		if (msg == NULL) {
   19f74:	b120      	cbz	r0, 19f80 <log_n+0x14>
		msg_finalize(msg, src_level);
   19f76:	4621      	mov	r1, r4
}
   19f78:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		msg_finalize(msg, src_level);
   19f7c:	f7f2 bdc8 	b.w	cb10 <msg_finalize>
}
   19f80:	bd10      	pop	{r4, pc}

00019f82 <log_msg_hexdump_data_op>:
static void log_msg_hexdump_data_op(struct log_msg *msg,
				    u8_t *data,
				    size_t *length,
				    size_t offset,
				    bool put_op)
{
   19f82:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   19f86:	461c      	mov	r4, r3
	u32_t available_len = msg->hdr.params.hexdump.length;
   19f88:	8903      	ldrh	r3, [r0, #8]
{
   19f8a:	460e      	mov	r6, r1
	u32_t available_len = msg->hdr.params.hexdump.length;
   19f8c:	089b      	lsrs	r3, r3, #2
	u8_t *head_data;
	u32_t chunk_len;
	u32_t req_len;
	u32_t cpy_len;

	if (offset >= available_len) {
   19f8e:	42a3      	cmp	r3, r4
{
   19f90:	f89d 7020 	ldrb.w	r7, [sp, #32]
	if (offset >= available_len) {
   19f94:	d803      	bhi.n	19f9e <log_msg_hexdump_data_op+0x1c>
		*length = 0;
   19f96:	2300      	movs	r3, #0
   19f98:	6013      	str	r3, [r2, #0]
		offset = 0;
		cont = cont->next;
		req_len -= cpy_len;
		data += cpy_len;
	}
}
   19f9a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	if ((offset + *length) > available_len) {
   19f9e:	6811      	ldr	r1, [r2, #0]
   19fa0:	4421      	add	r1, r4
   19fa2:	4299      	cmp	r1, r3
		*length = available_len - offset;
   19fa4:	bf84      	itt	hi
   19fa6:	1b19      	subhi	r1, r3, r4
   19fa8:	6011      	strhi	r1, [r2, #0]
	if (available_len > LOG_MSG_HEXDUMP_BYTES_SINGLE_CHUNK) {
   19faa:	2b0c      	cmp	r3, #12
	req_len = *length;
   19fac:	f8d2 9000 	ldr.w	r9, [r2]
	if (available_len > LOG_MSG_HEXDUMP_BYTES_SINGLE_CHUNK) {
   19fb0:	d928      	bls.n	1a004 <log_msg_hexdump_data_op+0x82>
	if (offset < chunk_len) {
   19fb2:	2c07      	cmp	r4, #7
		cont = msg->payload.ext.next;
   19fb4:	f8d0 8014 	ldr.w	r8, [r0, #20]
	if (offset < chunk_len) {
   19fb8:	d82b      	bhi.n	1a012 <log_msg_hexdump_data_op+0x90>
		chunk_len = LOG_MSG_HEXDUMP_BYTES_HEAD_CHUNK;
   19fba:	2308      	movs	r3, #8
		head_data = msg->payload.ext.data.bytes;
   19fbc:	3018      	adds	r0, #24
		cpy_len = req_len > chunk_len ? chunk_len : req_len;
   19fbe:	454b      	cmp	r3, r9
   19fc0:	bf28      	it	cs
   19fc2:	464b      	movcs	r3, r9
   19fc4:	4420      	add	r0, r4
   19fc6:	461d      	mov	r5, r3
			(void)memcpy(&head_data[offset], data, cpy_len);
   19fc8:	461a      	mov	r2, r3
		if (put_op) {
   19fca:	b1ff      	cbz	r7, 1a00c <log_msg_hexdump_data_op+0x8a>
			(void)memcpy(&head_data[offset], data, cpy_len);
   19fcc:	4631      	mov	r1, r6
			(void)memcpy(data, &head_data[offset], cpy_len);
   19fce:	f000 fc2a 	bl	1a826 <memcpy>
		req_len -= cpy_len;
   19fd2:	eba9 0905 	sub.w	r9, r9, r5
		data += cpy_len;
   19fd6:	442e      	add	r6, r5
	while (req_len > 0) {
   19fd8:	f1b9 0f00 	cmp.w	r9, #0
   19fdc:	d0dd      	beq.n	19f9a <log_msg_hexdump_data_op+0x18>
		chunk_len = HEXDUMP_BYTES_CONT_MSG - offset;
   19fde:	f1c4 051c 	rsb	r5, r4, #28
		cpy_len = req_len > chunk_len ? chunk_len : req_len;
   19fe2:	454d      	cmp	r5, r9
   19fe4:	bf28      	it	cs
   19fe6:	464d      	movcs	r5, r9
		if (put_op) {
   19fe8:	1d20      	adds	r0, r4, #4
   19fea:	4440      	add	r0, r8
			(void)memcpy(&cont->payload.bytes[offset],
   19fec:	462a      	mov	r2, r5
		if (put_op) {
   19fee:	b1bf      	cbz	r7, 1a020 <log_msg_hexdump_data_op+0x9e>
			(void)memcpy(&cont->payload.bytes[offset],
   19ff0:	4631      	mov	r1, r6
			(void)memcpy(data, &cont->payload.bytes[offset],
   19ff2:	f000 fc18 	bl	1a826 <memcpy>
		req_len -= cpy_len;
   19ff6:	eba9 0905 	sub.w	r9, r9, r5
		cont = cont->next;
   19ffa:	f8d8 8000 	ldr.w	r8, [r8]
		data += cpy_len;
   19ffe:	442e      	add	r6, r5
		offset = 0;
   1a000:	2400      	movs	r4, #0
   1a002:	e7e9      	b.n	19fd8 <log_msg_hexdump_data_op+0x56>
		head_data = msg->payload.single.bytes;
   1a004:	3014      	adds	r0, #20
	struct log_msg_cont *cont = NULL;
   1a006:	f04f 0800 	mov.w	r8, #0
   1a00a:	e7d8      	b.n	19fbe <log_msg_hexdump_data_op+0x3c>
			(void)memcpy(data, &head_data[offset], cpy_len);
   1a00c:	4601      	mov	r1, r0
   1a00e:	4630      	mov	r0, r6
   1a010:	e7dd      	b.n	19fce <log_msg_hexdump_data_op+0x4c>
		offset -= chunk_len;
   1a012:	3c08      	subs	r4, #8
		while (offset >= chunk_len) {
   1a014:	2c1b      	cmp	r4, #27
   1a016:	d9df      	bls.n	19fd8 <log_msg_hexdump_data_op+0x56>
			cont = cont->next;
   1a018:	f8d8 8000 	ldr.w	r8, [r8]
			offset -= chunk_len;
   1a01c:	3c1c      	subs	r4, #28
   1a01e:	e7f9      	b.n	1a014 <log_msg_hexdump_data_op+0x92>
			(void)memcpy(data, &cont->payload.bytes[offset],
   1a020:	4601      	mov	r1, r0
   1a022:	4630      	mov	r0, r6
   1a024:	e7e5      	b.n	19ff2 <log_msg_hexdump_data_op+0x70>

0001a026 <log_msg_get>:
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
   1a026:	3004      	adds	r0, #4
   1a028:	e8d0 3fef 	ldaex	r3, [r0]
   1a02c:	3301      	adds	r3, #1
   1a02e:	e8c0 3fe2 	stlex	r2, r3, [r0]
   1a032:	2a00      	cmp	r2, #0
   1a034:	d1f8      	bne.n	1a028 <log_msg_get+0x2>
}
   1a036:	4770      	bx	lr

0001a038 <log_msg_nargs_get>:
	return msg->hdr.params.std.nargs;
   1a038:	7a40      	ldrb	r0, [r0, #9]
}
   1a03a:	0900      	lsrs	r0, r0, #4
   1a03c:	4770      	bx	lr

0001a03e <log_msg_arg_get>:
	if (arg_idx >= msg->hdr.params.std.nargs) {
   1a03e:	7a43      	ldrb	r3, [r0, #9]
   1a040:	091b      	lsrs	r3, r3, #4
   1a042:	428b      	cmp	r3, r1
   1a044:	d916      	bls.n	1a074 <log_msg_arg_get+0x36>
	if (msg->hdr.params.std.nargs <= LOG_MSG_NARGS_SINGLE_CHUNK) {
   1a046:	2b03      	cmp	r3, #3
   1a048:	d803      	bhi.n	1a052 <log_msg_arg_get+0x14>
		arg = msg->payload.single.args[arg_idx];
   1a04a:	eb00 0181 	add.w	r1, r0, r1, lsl #2
   1a04e:	6948      	ldr	r0, [r1, #20]
   1a050:	4770      	bx	lr
	if (arg_idx < LOG_MSG_NARGS_HEAD_CHUNK) {
   1a052:	2901      	cmp	r1, #1
   1a054:	d803      	bhi.n	1a05e <log_msg_arg_get+0x20>
		return msg->payload.ext.data.args[arg_idx];
   1a056:	eb00 0181 	add.w	r1, r0, r1, lsl #2
   1a05a:	6988      	ldr	r0, [r1, #24]
   1a05c:	4770      	bx	lr
	cont = msg->payload.ext.next;
   1a05e:	6943      	ldr	r3, [r0, #20]
	arg_idx -= LOG_MSG_NARGS_HEAD_CHUNK;
   1a060:	3902      	subs	r1, #2
	while (arg_idx >= ARGS_CONT_MSG) {
   1a062:	2906      	cmp	r1, #6
   1a064:	d803      	bhi.n	1a06e <log_msg_arg_get+0x30>
	return cont->payload.args[arg_idx];
   1a066:	eb03 0181 	add.w	r1, r3, r1, lsl #2
   1a06a:	6848      	ldr	r0, [r1, #4]
   1a06c:	4770      	bx	lr
		arg_idx -= ARGS_CONT_MSG;
   1a06e:	3907      	subs	r1, #7
		cont = cont->next;
   1a070:	681b      	ldr	r3, [r3, #0]
   1a072:	e7f6      	b.n	1a062 <log_msg_arg_get+0x24>
		return 0;
   1a074:	2000      	movs	r0, #0
}
   1a076:	4770      	bx	lr

0001a078 <log_msg_put>:
{
   1a078:	4603      	mov	r3, r0
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
   1a07a:	1d02      	adds	r2, r0, #4
   1a07c:	e8d2 1fef 	ldaex	r1, [r2]
   1a080:	3901      	subs	r1, #1
   1a082:	e8c2 1fec 	stlex	ip, r1, [r2]
   1a086:	f1bc 0f00 	cmp.w	ip, #0
   1a08a:	d1f7      	bne.n	1a07c <log_msg_put+0x4>
	if (msg->hdr.ref_cnt == 0) {
   1a08c:	685b      	ldr	r3, [r3, #4]
   1a08e:	b90b      	cbnz	r3, 1a094 <log_msg_put+0x1c>
		msg_free(msg);
   1a090:	f7f2 be26 	b.w	cce0 <msg_free>
}
   1a094:	4770      	bx	lr

0001a096 <log_msg_str_get>:
}
   1a096:	6900      	ldr	r0, [r0, #16]
   1a098:	4770      	bx	lr

0001a09a <log_msg_create_n>:
{
   1a09a:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1a09e:	4682      	mov	sl, r0
   1a0a0:	4688      	mov	r8, r1
   1a0a2:	4615      	mov	r5, r2
	struct  log_msg *msg = (struct  log_msg *)log_msg_chunk_alloc();
   1a0a4:	f7f2 fe0a 	bl	ccbc <log_msg_chunk_alloc>
	if (msg != NULL) {
   1a0a8:	4604      	mov	r4, r0
   1a0aa:	b330      	cbz	r0, 1a0fa <log_msg_create_n+0x60>
		msg->hdr.ref_cnt = 1;
   1a0ac:	2301      	movs	r3, #1
		msg->hdr.params.raw = 0U;
   1a0ae:	2600      	movs	r6, #0
	if ((msg == NULL) || nargs <= LOG_MSG_NARGS_SINGLE_CHUNK) {
   1a0b0:	2d03      	cmp	r5, #3
		msg->hdr.ref_cnt = 1;
   1a0b2:	6043      	str	r3, [r0, #4]
		msg->hdr.params.raw = 0U;
   1a0b4:	8106      	strh	r6, [r0, #8]
   1a0b6:	d909      	bls.n	1a0cc <log_msg_create_n+0x32>
	msg->hdr.params.generic.ext = 1;
   1a0b8:	2202      	movs	r2, #2
	n -= LOG_MSG_NARGS_HEAD_CHUNK;
   1a0ba:	f1a5 0902 	sub.w	r9, r5, #2
	msg->hdr.params.generic.ext = 1;
   1a0be:	8102      	strh	r2, [r0, #8]
	next = &msg->payload.ext.next;
   1a0c0:	f100 0b14 	add.w	fp, r0, #20
	*next = NULL;
   1a0c4:	6146      	str	r6, [r0, #20]
	while (n > 0) {
   1a0c6:	f1b9 0f00 	cmp.w	r9, #0
   1a0ca:	dc0e      	bgt.n	1a0ea <log_msg_create_n+0x50>
		msg->hdr.params.std.nargs = nargs;
   1a0cc:	7a63      	ldrb	r3, [r4, #9]
	if (nargs > LOG_MSG_NARGS_SINGLE_CHUNK) {
   1a0ce:	2d03      	cmp	r5, #3
		msg->hdr.params.std.nargs = nargs;
   1a0d0:	f365 1307 	bfi	r3, r5, #4, #4
		msg->str = str;
   1a0d4:	f8c4 a010 	str.w	sl, [r4, #16]
		msg->hdr.params.std.nargs = nargs;
   1a0d8:	7263      	strb	r3, [r4, #9]
	if (nargs > LOG_MSG_NARGS_SINGLE_CHUNK) {
   1a0da:	d818      	bhi.n	1a10e <log_msg_create_n+0x74>
		(void)memcpy(msg->payload.single.args, args,
   1a0dc:	00aa      	lsls	r2, r5, #2
   1a0de:	4641      	mov	r1, r8
   1a0e0:	f104 0014 	add.w	r0, r4, #20
   1a0e4:	f000 fb9f 	bl	1a826 <memcpy>
		nargs  = 0U;
   1a0e8:	e007      	b.n	1a0fa <log_msg_create_n+0x60>
		cont = (struct log_msg_cont *)log_msg_chunk_alloc();
   1a0ea:	f7f2 fde7 	bl	ccbc <log_msg_chunk_alloc>
		if (cont == NULL) {
   1a0ee:	4607      	mov	r7, r0
   1a0f0:	b930      	cbnz	r0, 1a100 <log_msg_create_n+0x66>
			msg_free(msg);
   1a0f2:	4620      	mov	r0, r4
   1a0f4:	f7f2 fdf4 	bl	cce0 <msg_free>
			return NULL;
   1a0f8:	463c      	mov	r4, r7
}
   1a0fa:	4620      	mov	r0, r4
   1a0fc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		*next = cont;
   1a100:	f8cb 0000 	str.w	r0, [fp]
		cont->next = NULL;
   1a104:	f1a9 0907 	sub.w	r9, r9, #7
   1a108:	6006      	str	r6, [r0, #0]
		next = &cont->next;
   1a10a:	4683      	mov	fp, r0
		n -= ARGS_CONT_MSG;
   1a10c:	e7db      	b.n	1a0c6 <log_msg_create_n+0x2c>
		(void)memcpy(msg->payload.ext.data.args, args,
   1a10e:	4641      	mov	r1, r8
   1a110:	2208      	movs	r2, #8
   1a112:	f104 0018 	add.w	r0, r4, #24
	struct log_msg_cont *cont = msg->payload.ext.next;
   1a116:	6967      	ldr	r7, [r4, #20]
		(void)memcpy(msg->payload.ext.data.args, args,
   1a118:	f000 fb85 	bl	1a826 <memcpy>
		nargs -= LOG_MSG_NARGS_HEAD_CHUNK;
   1a11c:	3d02      	subs	r5, #2
		args += LOG_MSG_NARGS_HEAD_CHUNK;
   1a11e:	f108 0808 	add.w	r8, r8, #8
		u32_t cpy_args = MIN(nargs, ARGS_CONT_MSG);
   1a122:	2d07      	cmp	r5, #7
   1a124:	462e      	mov	r6, r5
   1a126:	bf28      	it	cs
   1a128:	2607      	movcs	r6, #7
		(void)memcpy(cont->payload.args, args,
   1a12a:	ea4f 0986 	mov.w	r9, r6, lsl #2
   1a12e:	4641      	mov	r1, r8
   1a130:	1d38      	adds	r0, r7, #4
   1a132:	464a      	mov	r2, r9
   1a134:	f000 fb77 	bl	1a826 <memcpy>
	while (nargs != 0U) {
   1a138:	1bad      	subs	r5, r5, r6
		args += cpy_args;
   1a13a:	44c8      	add	r8, r9
		cont = cont->next;
   1a13c:	683f      	ldr	r7, [r7, #0]
	while (nargs != 0U) {
   1a13e:	d1f0      	bne.n	1a122 <log_msg_create_n+0x88>
   1a140:	e7db      	b.n	1a0fa <log_msg_create_n+0x60>

0001a142 <log_msg_hexdump_data_get>:

void log_msg_hexdump_data_get(struct log_msg *msg,
			      u8_t *data,
			      size_t *length,
			      size_t offset)
{
   1a142:	b513      	push	{r0, r1, r4, lr}
	log_msg_hexdump_data_op(msg, data, length, offset, false);
   1a144:	2400      	movs	r4, #0
   1a146:	9400      	str	r4, [sp, #0]
   1a148:	f7ff ff1b 	bl	19f82 <log_msg_hexdump_data_op>
}
   1a14c:	b002      	add	sp, #8
   1a14e:	bd10      	pop	{r4, pc}

0001a150 <buffer_write>:
{
   1a150:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1a152:	4606      	mov	r6, r0
   1a154:	460d      	mov	r5, r1
   1a156:	4614      	mov	r4, r2
   1a158:	461f      	mov	r7, r3
		processed = outf(buf, len, ctx);
   1a15a:	4621      	mov	r1, r4
   1a15c:	4628      	mov	r0, r5
   1a15e:	463a      	mov	r2, r7
   1a160:	47b0      	blx	r6
	} while (len != 0);
   1a162:	1a24      	subs	r4, r4, r0
		buf += processed;
   1a164:	4405      	add	r5, r0
	} while (len != 0);
   1a166:	d1f8      	bne.n	1a15a <buffer_write+0xa>
}
   1a168:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0001a16a <std_print>:
{
   1a16a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1a16e:	b08e      	sub	sp, #56	; 0x38
   1a170:	af0e      	add	r7, sp, #56	; 0x38
   1a172:	4681      	mov	r9, r0
   1a174:	460d      	mov	r5, r1
	const char *str = log_msg_str_get(msg);
   1a176:	f7ff ff8e 	bl	1a096 <log_msg_str_get>
   1a17a:	4606      	mov	r6, r0
	u32_t nargs = log_msg_nargs_get(msg);
   1a17c:	4648      	mov	r0, r9
   1a17e:	f7ff ff5b 	bl	1a038 <log_msg_nargs_get>
	for (i = 0; i < nargs; i++) {
   1a182:	f04f 0800 	mov.w	r8, #0
	u32_t nargs = log_msg_nargs_get(msg);
   1a186:	4682      	mov	sl, r0
	u32_t *args = alloca(sizeof(u32_t)*nargs);
   1a188:	0083      	lsls	r3, r0, #2
   1a18a:	3307      	adds	r3, #7
   1a18c:	f023 0307 	bic.w	r3, r3, #7
   1a190:	ebad 0d03 	sub.w	sp, sp, r3
   1a194:	ac0e      	add	r4, sp, #56	; 0x38
	for (i = 0; i < nargs; i++) {
   1a196:	45d0      	cmp	r8, sl
   1a198:	d116      	bne.n	1a1c8 <std_print+0x5e>
	switch (log_msg_nargs_get(msg)) {
   1a19a:	4648      	mov	r0, r9
   1a19c:	f7ff ff4c 	bl	1a038 <log_msg_nargs_get>
   1a1a0:	280f      	cmp	r0, #15
   1a1a2:	d81e      	bhi.n	1a1e2 <std_print+0x78>
   1a1a4:	e8df f010 	tbh	[pc, r0, lsl #1]
   1a1a8:	00200019 	.word	0x00200019
   1a1ac:	002d0026 	.word	0x002d0026
   1a1b0:	00410036 	.word	0x00410036
   1a1b4:	005d004e 	.word	0x005d004e
   1a1b8:	0081006e 	.word	0x0081006e
   1a1bc:	00ad0096 	.word	0x00ad0096
   1a1c0:	00e100c6 	.word	0x00e100c6
   1a1c4:	011d00fe 	.word	0x011d00fe
		args[i] = log_msg_arg_get(msg, i);
   1a1c8:	4641      	mov	r1, r8
   1a1ca:	4648      	mov	r0, r9
   1a1cc:	f7ff ff37 	bl	1a03e <log_msg_arg_get>
   1a1d0:	f844 0028 	str.w	r0, [r4, r8, lsl #2]
	for (i = 0; i < nargs; i++) {
   1a1d4:	f108 0801 	add.w	r8, r8, #1
   1a1d8:	e7dd      	b.n	1a196 <std_print+0x2c>
		print_formatted(log_output, str);
   1a1da:	4631      	mov	r1, r6
   1a1dc:	4628      	mov	r0, r5
   1a1de:	f7f2 fdc1 	bl	cd64 <print_formatted>
}
   1a1e2:	46bd      	mov	sp, r7
   1a1e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		print_formatted(log_output, str, args[0]);
   1a1e8:	6822      	ldr	r2, [r4, #0]
   1a1ea:	4631      	mov	r1, r6
   1a1ec:	4628      	mov	r0, r5
   1a1ee:	f7f2 fdb9 	bl	cd64 <print_formatted>
		break;
   1a1f2:	e7f6      	b.n	1a1e2 <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1]);
   1a1f4:	e9d4 2300 	ldrd	r2, r3, [r4]
   1a1f8:	4631      	mov	r1, r6
   1a1fa:	4628      	mov	r0, r5
   1a1fc:	f7f2 fdb2 	bl	cd64 <print_formatted>
		break;
   1a200:	e7ef      	b.n	1a1e2 <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2]);
   1a202:	68a3      	ldr	r3, [r4, #8]
   1a204:	4631      	mov	r1, r6
   1a206:	9300      	str	r3, [sp, #0]
   1a208:	e9d4 2300 	ldrd	r2, r3, [r4]
   1a20c:	4628      	mov	r0, r5
   1a20e:	f7f2 fda9 	bl	cd64 <print_formatted>
		break;
   1a212:	e7e6      	b.n	1a1e2 <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2],
   1a214:	68e3      	ldr	r3, [r4, #12]
   1a216:	4631      	mov	r1, r6
   1a218:	9301      	str	r3, [sp, #4]
   1a21a:	68a3      	ldr	r3, [r4, #8]
   1a21c:	4628      	mov	r0, r5
   1a21e:	9300      	str	r3, [sp, #0]
   1a220:	e9d4 2300 	ldrd	r2, r3, [r4]
   1a224:	f7f2 fd9e 	bl	cd64 <print_formatted>
		break;
   1a228:	e7db      	b.n	1a1e2 <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2],
   1a22a:	6923      	ldr	r3, [r4, #16]
   1a22c:	4631      	mov	r1, r6
   1a22e:	9302      	str	r3, [sp, #8]
   1a230:	68e3      	ldr	r3, [r4, #12]
   1a232:	4628      	mov	r0, r5
   1a234:	9301      	str	r3, [sp, #4]
   1a236:	68a3      	ldr	r3, [r4, #8]
   1a238:	9300      	str	r3, [sp, #0]
   1a23a:	e9d4 2300 	ldrd	r2, r3, [r4]
   1a23e:	f7f2 fd91 	bl	cd64 <print_formatted>
		break;
   1a242:	e7ce      	b.n	1a1e2 <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2],
   1a244:	6963      	ldr	r3, [r4, #20]
   1a246:	4631      	mov	r1, r6
   1a248:	9303      	str	r3, [sp, #12]
   1a24a:	6923      	ldr	r3, [r4, #16]
   1a24c:	4628      	mov	r0, r5
   1a24e:	9302      	str	r3, [sp, #8]
   1a250:	68e3      	ldr	r3, [r4, #12]
   1a252:	9301      	str	r3, [sp, #4]
   1a254:	68a3      	ldr	r3, [r4, #8]
   1a256:	9300      	str	r3, [sp, #0]
   1a258:	e9d4 2300 	ldrd	r2, r3, [r4]
   1a25c:	f7f2 fd82 	bl	cd64 <print_formatted>
		break;
   1a260:	e7bf      	b.n	1a1e2 <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2],
   1a262:	69a3      	ldr	r3, [r4, #24]
   1a264:	4631      	mov	r1, r6
   1a266:	9304      	str	r3, [sp, #16]
   1a268:	6963      	ldr	r3, [r4, #20]
   1a26a:	4628      	mov	r0, r5
   1a26c:	9303      	str	r3, [sp, #12]
   1a26e:	6923      	ldr	r3, [r4, #16]
   1a270:	9302      	str	r3, [sp, #8]
   1a272:	68e3      	ldr	r3, [r4, #12]
   1a274:	9301      	str	r3, [sp, #4]
   1a276:	68a3      	ldr	r3, [r4, #8]
   1a278:	9300      	str	r3, [sp, #0]
   1a27a:	e9d4 2300 	ldrd	r2, r3, [r4]
   1a27e:	f7f2 fd71 	bl	cd64 <print_formatted>
		break;
   1a282:	e7ae      	b.n	1a1e2 <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2],
   1a284:	69e3      	ldr	r3, [r4, #28]
   1a286:	4631      	mov	r1, r6
   1a288:	9305      	str	r3, [sp, #20]
   1a28a:	69a3      	ldr	r3, [r4, #24]
   1a28c:	4628      	mov	r0, r5
   1a28e:	9304      	str	r3, [sp, #16]
   1a290:	6963      	ldr	r3, [r4, #20]
   1a292:	9303      	str	r3, [sp, #12]
   1a294:	6923      	ldr	r3, [r4, #16]
   1a296:	9302      	str	r3, [sp, #8]
   1a298:	68e3      	ldr	r3, [r4, #12]
   1a29a:	9301      	str	r3, [sp, #4]
   1a29c:	68a3      	ldr	r3, [r4, #8]
   1a29e:	9300      	str	r3, [sp, #0]
   1a2a0:	e9d4 2300 	ldrd	r2, r3, [r4]
   1a2a4:	f7f2 fd5e 	bl	cd64 <print_formatted>
		break;
   1a2a8:	e79b      	b.n	1a1e2 <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2],
   1a2aa:	6a23      	ldr	r3, [r4, #32]
   1a2ac:	4631      	mov	r1, r6
   1a2ae:	9306      	str	r3, [sp, #24]
   1a2b0:	69e3      	ldr	r3, [r4, #28]
   1a2b2:	4628      	mov	r0, r5
   1a2b4:	9305      	str	r3, [sp, #20]
   1a2b6:	69a3      	ldr	r3, [r4, #24]
   1a2b8:	9304      	str	r3, [sp, #16]
   1a2ba:	6963      	ldr	r3, [r4, #20]
   1a2bc:	9303      	str	r3, [sp, #12]
   1a2be:	6923      	ldr	r3, [r4, #16]
   1a2c0:	9302      	str	r3, [sp, #8]
   1a2c2:	68e3      	ldr	r3, [r4, #12]
   1a2c4:	9301      	str	r3, [sp, #4]
   1a2c6:	68a3      	ldr	r3, [r4, #8]
   1a2c8:	9300      	str	r3, [sp, #0]
   1a2ca:	e9d4 2300 	ldrd	r2, r3, [r4]
   1a2ce:	f7f2 fd49 	bl	cd64 <print_formatted>
		break;
   1a2d2:	e786      	b.n	1a1e2 <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2],
   1a2d4:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1a2d6:	4631      	mov	r1, r6
   1a2d8:	9307      	str	r3, [sp, #28]
   1a2da:	6a23      	ldr	r3, [r4, #32]
   1a2dc:	4628      	mov	r0, r5
   1a2de:	9306      	str	r3, [sp, #24]
   1a2e0:	69e3      	ldr	r3, [r4, #28]
   1a2e2:	9305      	str	r3, [sp, #20]
   1a2e4:	69a3      	ldr	r3, [r4, #24]
   1a2e6:	9304      	str	r3, [sp, #16]
   1a2e8:	6963      	ldr	r3, [r4, #20]
   1a2ea:	9303      	str	r3, [sp, #12]
   1a2ec:	6923      	ldr	r3, [r4, #16]
   1a2ee:	9302      	str	r3, [sp, #8]
   1a2f0:	68e3      	ldr	r3, [r4, #12]
   1a2f2:	9301      	str	r3, [sp, #4]
   1a2f4:	68a3      	ldr	r3, [r4, #8]
   1a2f6:	9300      	str	r3, [sp, #0]
   1a2f8:	e9d4 2300 	ldrd	r2, r3, [r4]
   1a2fc:	f7f2 fd32 	bl	cd64 <print_formatted>
		break;
   1a300:	e76f      	b.n	1a1e2 <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2],
   1a302:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   1a304:	4631      	mov	r1, r6
   1a306:	9308      	str	r3, [sp, #32]
   1a308:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1a30a:	4628      	mov	r0, r5
   1a30c:	9307      	str	r3, [sp, #28]
   1a30e:	6a23      	ldr	r3, [r4, #32]
   1a310:	9306      	str	r3, [sp, #24]
   1a312:	69e3      	ldr	r3, [r4, #28]
   1a314:	9305      	str	r3, [sp, #20]
   1a316:	69a3      	ldr	r3, [r4, #24]
   1a318:	9304      	str	r3, [sp, #16]
   1a31a:	6963      	ldr	r3, [r4, #20]
   1a31c:	9303      	str	r3, [sp, #12]
   1a31e:	6923      	ldr	r3, [r4, #16]
   1a320:	9302      	str	r3, [sp, #8]
   1a322:	68e3      	ldr	r3, [r4, #12]
   1a324:	9301      	str	r3, [sp, #4]
   1a326:	68a3      	ldr	r3, [r4, #8]
   1a328:	9300      	str	r3, [sp, #0]
   1a32a:	e9d4 2300 	ldrd	r2, r3, [r4]
   1a32e:	f7f2 fd19 	bl	cd64 <print_formatted>
		break;
   1a332:	e756      	b.n	1a1e2 <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2],
   1a334:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   1a336:	4631      	mov	r1, r6
   1a338:	9309      	str	r3, [sp, #36]	; 0x24
   1a33a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   1a33c:	4628      	mov	r0, r5
   1a33e:	9308      	str	r3, [sp, #32]
   1a340:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1a342:	9307      	str	r3, [sp, #28]
   1a344:	6a23      	ldr	r3, [r4, #32]
   1a346:	9306      	str	r3, [sp, #24]
   1a348:	69e3      	ldr	r3, [r4, #28]
   1a34a:	9305      	str	r3, [sp, #20]
   1a34c:	69a3      	ldr	r3, [r4, #24]
   1a34e:	9304      	str	r3, [sp, #16]
   1a350:	6963      	ldr	r3, [r4, #20]
   1a352:	9303      	str	r3, [sp, #12]
   1a354:	6923      	ldr	r3, [r4, #16]
   1a356:	9302      	str	r3, [sp, #8]
   1a358:	68e3      	ldr	r3, [r4, #12]
   1a35a:	9301      	str	r3, [sp, #4]
   1a35c:	68a3      	ldr	r3, [r4, #8]
   1a35e:	9300      	str	r3, [sp, #0]
   1a360:	e9d4 2300 	ldrd	r2, r3, [r4]
   1a364:	f7f2 fcfe 	bl	cd64 <print_formatted>
		break;
   1a368:	e73b      	b.n	1a1e2 <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2],
   1a36a:	6b23      	ldr	r3, [r4, #48]	; 0x30
   1a36c:	4631      	mov	r1, r6
   1a36e:	930a      	str	r3, [sp, #40]	; 0x28
   1a370:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   1a372:	4628      	mov	r0, r5
   1a374:	9309      	str	r3, [sp, #36]	; 0x24
   1a376:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   1a378:	9308      	str	r3, [sp, #32]
   1a37a:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1a37c:	9307      	str	r3, [sp, #28]
   1a37e:	6a23      	ldr	r3, [r4, #32]
   1a380:	9306      	str	r3, [sp, #24]
   1a382:	69e3      	ldr	r3, [r4, #28]
   1a384:	9305      	str	r3, [sp, #20]
   1a386:	69a3      	ldr	r3, [r4, #24]
   1a388:	9304      	str	r3, [sp, #16]
   1a38a:	6963      	ldr	r3, [r4, #20]
   1a38c:	9303      	str	r3, [sp, #12]
   1a38e:	6923      	ldr	r3, [r4, #16]
   1a390:	9302      	str	r3, [sp, #8]
   1a392:	68e3      	ldr	r3, [r4, #12]
   1a394:	9301      	str	r3, [sp, #4]
   1a396:	68a3      	ldr	r3, [r4, #8]
   1a398:	9300      	str	r3, [sp, #0]
   1a39a:	e9d4 2300 	ldrd	r2, r3, [r4]
   1a39e:	f7f2 fce1 	bl	cd64 <print_formatted>
		break;
   1a3a2:	e71e      	b.n	1a1e2 <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2],
   1a3a4:	6b63      	ldr	r3, [r4, #52]	; 0x34
   1a3a6:	4631      	mov	r1, r6
   1a3a8:	930b      	str	r3, [sp, #44]	; 0x2c
   1a3aa:	6b23      	ldr	r3, [r4, #48]	; 0x30
   1a3ac:	4628      	mov	r0, r5
   1a3ae:	930a      	str	r3, [sp, #40]	; 0x28
   1a3b0:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   1a3b2:	9309      	str	r3, [sp, #36]	; 0x24
   1a3b4:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   1a3b6:	9308      	str	r3, [sp, #32]
   1a3b8:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1a3ba:	9307      	str	r3, [sp, #28]
   1a3bc:	6a23      	ldr	r3, [r4, #32]
   1a3be:	9306      	str	r3, [sp, #24]
   1a3c0:	69e3      	ldr	r3, [r4, #28]
   1a3c2:	9305      	str	r3, [sp, #20]
   1a3c4:	69a3      	ldr	r3, [r4, #24]
   1a3c6:	9304      	str	r3, [sp, #16]
   1a3c8:	6963      	ldr	r3, [r4, #20]
   1a3ca:	9303      	str	r3, [sp, #12]
   1a3cc:	6923      	ldr	r3, [r4, #16]
   1a3ce:	9302      	str	r3, [sp, #8]
   1a3d0:	68e3      	ldr	r3, [r4, #12]
   1a3d2:	9301      	str	r3, [sp, #4]
   1a3d4:	68a3      	ldr	r3, [r4, #8]
   1a3d6:	9300      	str	r3, [sp, #0]
   1a3d8:	e9d4 2300 	ldrd	r2, r3, [r4]
   1a3dc:	f7f2 fcc2 	bl	cd64 <print_formatted>
		break;
   1a3e0:	e6ff      	b.n	1a1e2 <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2],
   1a3e2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   1a3e4:	4631      	mov	r1, r6
   1a3e6:	930c      	str	r3, [sp, #48]	; 0x30
   1a3e8:	6b63      	ldr	r3, [r4, #52]	; 0x34
   1a3ea:	4628      	mov	r0, r5
   1a3ec:	930b      	str	r3, [sp, #44]	; 0x2c
   1a3ee:	6b23      	ldr	r3, [r4, #48]	; 0x30
   1a3f0:	930a      	str	r3, [sp, #40]	; 0x28
   1a3f2:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   1a3f4:	9309      	str	r3, [sp, #36]	; 0x24
   1a3f6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   1a3f8:	9308      	str	r3, [sp, #32]
   1a3fa:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1a3fc:	9307      	str	r3, [sp, #28]
   1a3fe:	6a23      	ldr	r3, [r4, #32]
   1a400:	9306      	str	r3, [sp, #24]
   1a402:	69e3      	ldr	r3, [r4, #28]
   1a404:	9305      	str	r3, [sp, #20]
   1a406:	69a3      	ldr	r3, [r4, #24]
   1a408:	9304      	str	r3, [sp, #16]
   1a40a:	6963      	ldr	r3, [r4, #20]
   1a40c:	9303      	str	r3, [sp, #12]
   1a40e:	6923      	ldr	r3, [r4, #16]
   1a410:	9302      	str	r3, [sp, #8]
   1a412:	68e3      	ldr	r3, [r4, #12]
   1a414:	9301      	str	r3, [sp, #4]
   1a416:	68a3      	ldr	r3, [r4, #8]
   1a418:	9300      	str	r3, [sp, #0]
   1a41a:	e9d4 2300 	ldrd	r2, r3, [r4]
   1a41e:	f7f2 fca1 	bl	cd64 <print_formatted>
}
   1a422:	e6de      	b.n	1a1e2 <std_print+0x78>

0001a424 <log_output_flush>:
		     log_output->control_block->offset,
   1a424:	6842      	ldr	r2, [r0, #4]
{
   1a426:	b510      	push	{r4, lr}
	buffer_write(log_output->func, log_output->buf,
   1a428:	e9d2 2300 	ldrd	r2, r3, [r2]
{
   1a42c:	4604      	mov	r4, r0
	buffer_write(log_output->func, log_output->buf,
   1a42e:	6881      	ldr	r1, [r0, #8]
   1a430:	6800      	ldr	r0, [r0, #0]
   1a432:	f7ff fe8d 	bl	1a150 <buffer_write>
	log_output->control_block->offset = 0;
   1a436:	2200      	movs	r2, #0
   1a438:	6863      	ldr	r3, [r4, #4]
   1a43a:	601a      	str	r2, [r3, #0]
}
   1a43c:	bd10      	pop	{r4, pc}

0001a43e <out_func>:
{
   1a43e:	b538      	push	{r3, r4, r5, lr}
	if (out_ctx->control_block->offset == out_ctx->size) {
   1a440:	684b      	ldr	r3, [r1, #4]
{
   1a442:	4605      	mov	r5, r0
	if (out_ctx->control_block->offset == out_ctx->size) {
   1a444:	681a      	ldr	r2, [r3, #0]
   1a446:	68cb      	ldr	r3, [r1, #12]
{
   1a448:	460c      	mov	r4, r1
	if (out_ctx->control_block->offset == out_ctx->size) {
   1a44a:	429a      	cmp	r2, r3
   1a44c:	d102      	bne.n	1a454 <out_func+0x16>
		log_output_flush(out_ctx);
   1a44e:	4608      	mov	r0, r1
   1a450:	f7ff ffe8 	bl	1a424 <log_output_flush>
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
   1a454:	6863      	ldr	r3, [r4, #4]
   1a456:	e8d3 2fef 	ldaex	r2, [r3]
   1a45a:	1c51      	adds	r1, r2, #1
   1a45c:	e8c3 1fe0 	stlex	r0, r1, [r3]
   1a460:	2800      	cmp	r0, #0
   1a462:	d1f8      	bne.n	1a456 <out_func+0x18>
	out_ctx->buf[idx] = (u8_t)c;
   1a464:	68a3      	ldr	r3, [r4, #8]
}
   1a466:	2000      	movs	r0, #0
	out_ctx->buf[idx] = (u8_t)c;
   1a468:	549d      	strb	r5, [r3, r2]
}
   1a46a:	bd38      	pop	{r3, r4, r5, pc}

0001a46c <sys_pm_init>:
	}
}

#if CONFIG_DEVICE_POWER_MANAGEMENT
static int sys_pm_init(struct device *dev)
{
   1a46c:	b508      	push	{r3, lr}
	ARG_UNUSED(dev);

	sys_pm_create_device_list();
   1a46e:	f7f2 fee3 	bl	d238 <sys_pm_create_device_list>
	return 0;
}
   1a472:	2000      	movs	r0, #0
   1a474:	bd08      	pop	{r3, pc}

0001a476 <get_status>:
	if (data->started) {
   1a476:	220c      	movs	r2, #12
	data = get_sub_data(dev, type);
   1a478:	6883      	ldr	r3, [r0, #8]
	return &data->subsys[type];
   1a47a:	b2c9      	uxtb	r1, r1
	if (data->started) {
   1a47c:	fb02 3101 	mla	r1, r2, r1, r3
   1a480:	7a4b      	ldrb	r3, [r1, #9]
   1a482:	b923      	cbnz	r3, 1a48e <get_status+0x18>
	if (data->ref > 0) {
   1a484:	7a08      	ldrb	r0, [r1, #8]
		return CLOCK_CONTROL_STATUS_ON;
   1a486:	fab0 f080 	clz	r0, r0
   1a48a:	0940      	lsrs	r0, r0, #5
   1a48c:	4770      	bx	lr
   1a48e:	2002      	movs	r0, #2
}
   1a490:	4770      	bx	lr

0001a492 <clock_stop>:
	const struct nrf_clock_control_config *config =
   1a492:	6802      	ldr	r2, [r0, #0]
{
   1a494:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	const struct nrf_clock_control_config *config =
   1a498:	f8d2 8010 	ldr.w	r8, [r2, #16]
	return &config->subsys[type];
   1a49c:	b2cc      	uxtb	r4, r1
	data = get_sub_data(dev, type);
   1a49e:	6887      	ldr	r7, [r0, #8]
	__asm__ volatile(
   1a4a0:	f04f 0320 	mov.w	r3, #32
   1a4a4:	f3ef 8611 	mrs	r6, BASEPRI
   1a4a8:	f383 8811 	msr	BASEPRI, r3
   1a4ac:	f3bf 8f6f 	isb	sy
	if (data->ref == 0) {
   1a4b0:	220c      	movs	r2, #12
   1a4b2:	4362      	muls	r2, r4
   1a4b4:	18b9      	adds	r1, r7, r2
   1a4b6:	7a0b      	ldrb	r3, [r1, #8]
   1a4b8:	b343      	cbz	r3, 1a50c <clock_stop+0x7a>
	data->ref--;
   1a4ba:	3b01      	subs	r3, #1
   1a4bc:	b2db      	uxtb	r3, r3
   1a4be:	720b      	strb	r3, [r1, #8]
	if (data->ref == 0) {
   1a4c0:	bb3b      	cbnz	r3, 1a512 <clock_stop+0x80>
		do_stop =  (config->stop_handler) ?
   1a4c2:	0125      	lsls	r5, r4, #4
	list->head = NULL;
   1a4c4:	50bb      	str	r3, [r7, r2]
	list->tail = NULL;
   1a4c6:	604b      	str	r3, [r1, #4]
   1a4c8:	eb08 0305 	add.w	r3, r8, r5
   1a4cc:	685b      	ldr	r3, [r3, #4]
				config->stop_handler(dev) : true;
   1a4ce:	b9cb      	cbnz	r3, 1a504 <clock_stop+0x72>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1a4d0:	2201      	movs	r2, #1
			nrf_clock_task_trigger(NRF_CLOCK, config->stop_tsk);
   1a4d2:	4445      	add	r5, r8
   1a4d4:	7aeb      	ldrb	r3, [r5, #11]
   1a4d6:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   1a4da:	f503 43a0 	add.w	r3, r3, #20480	; 0x5000
   1a4de:	601a      	str	r2, [r3, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1a4e0:	2200      	movs	r2, #0
   1a4e2:	892b      	ldrh	r3, [r5, #8]
   1a4e4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   1a4e8:	f503 43a0 	add.w	r3, r3, #20480	; 0x5000
   1a4ec:	601a      	str	r2, [r3, #0]
		data->started = false;
   1a4ee:	210c      	movs	r1, #12
   1a4f0:	2000      	movs	r0, #0
   1a4f2:	fb01 7404 	mla	r4, r1, r4, r7
   1a4f6:	7260      	strb	r0, [r4, #9]
	__asm__ volatile(
   1a4f8:	f386 8811 	msr	BASEPRI, r6
   1a4fc:	f3bf 8f6f 	isb	sy
}
   1a500:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
				config->stop_handler(dev) : true;
   1a504:	4798      	blx	r3
   1a506:	2800      	cmp	r0, #0
   1a508:	d1e2      	bne.n	1a4d0 <clock_stop+0x3e>
   1a50a:	e7f0      	b.n	1a4ee <clock_stop+0x5c>
		err = -EALREADY;
   1a50c:	f06f 0044 	mvn.w	r0, #68	; 0x44
   1a510:	e7f2      	b.n	1a4f8 <clock_stop+0x66>
	int err = 0;
   1a512:	2000      	movs	r0, #0
   1a514:	e7f0      	b.n	1a4f8 <clock_stop+0x66>

0001a516 <clkstarted_handle>:
{
   1a516:	b538      	push	{r3, r4, r5, lr}
	sub_data->started = true;
   1a518:	240c      	movs	r4, #12
	struct nrf_clock_control_sub_data *sub_data = get_sub_data(dev, type);
   1a51a:	6883      	ldr	r3, [r0, #8]
{
   1a51c:	4605      	mov	r5, r0
	sub_data->started = true;
   1a51e:	fb04 3401 	mla	r4, r4, r1, r3
   1a522:	2301      	movs	r3, #1
   1a524:	7263      	strb	r3, [r4, #9]
	__asm__ volatile(
   1a526:	f04f 0320 	mov.w	r3, #32
   1a52a:	f3ef 8111 	mrs	r1, BASEPRI
   1a52e:	f383 8811 	msr	BASEPRI, r3
   1a532:	f3bf 8f6f 	isb	sy
Z_GENLIST_IS_EMPTY(slist)
   1a536:	6823      	ldr	r3, [r4, #0]
Z_GENLIST_GET(slist, snode)
   1a538:	b12b      	cbz	r3, 1a546 <clkstarted_handle+0x30>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   1a53a:	6860      	ldr	r0, [r4, #4]
   1a53c:	681a      	ldr	r2, [r3, #0]
   1a53e:	4283      	cmp	r3, r0
	list->head = node;
   1a540:	6022      	str	r2, [r4, #0]
	list->tail = node;
   1a542:	bf08      	it	eq
   1a544:	6062      	streq	r2, [r4, #4]
	__asm__ volatile(
   1a546:	f381 8811 	msr	BASEPRI, r1
   1a54a:	f3bf 8f6f 	isb	sy
	while ((async_data = list_get(&sub_data->list)) != NULL) {
   1a54e:	b903      	cbnz	r3, 1a552 <clkstarted_handle+0x3c>
}
   1a550:	bd38      	pop	{r3, r4, r5, pc}
		async_data->cb(dev, async_data->user_data);
   1a552:	e9d3 2101 	ldrd	r2, r1, [r3, #4]
   1a556:	4628      	mov	r0, r5
   1a558:	4790      	blx	r2
   1a55a:	e7e4      	b.n	1a526 <clkstarted_handle+0x10>

0001a55c <clock_start>:
	return clock_async_start(dev, sub_system, NULL);
   1a55c:	2200      	movs	r2, #0
   1a55e:	f7f2 bea9 	b.w	d2b4 <clock_async_start>

0001a562 <z_clock_device_ctrl>:

int __weak z_clock_device_ctrl(struct device *device, u32_t ctrl_command,
			       void *context, device_pm_cb cb, void *arg)
{
	return 0;
}
   1a562:	2000      	movs	r0, #0
   1a564:	4770      	bx	lr

0001a566 <z_clock_isr>:
}
   1a566:	4770      	bx	lr

0001a568 <z_clock_idle_exit>:
{
}

void __weak z_clock_idle_exit(void)
{
}
   1a568:	4770      	bx	lr

0001a56a <SEGGER_RTT_Init>:
*    Initializes the RTT Control Block.
*    Should be used in RAM targets, at start of the application.
*
*/
void SEGGER_RTT_Init (void) {
  _DoInit();
   1a56a:	f7f3 b83b 	b.w	d5e4 <_DoInit>

0001a56e <rtt_init>:
 */

K_MUTEX_DEFINE(rtt_term_mutex);

static int rtt_init(struct device *unused)
{
   1a56e:	b508      	push	{r3, lr}
	ARG_UNUSED(unused);

	SEGGER_RTT_Init();
   1a570:	f7ff fffb 	bl	1a56a <SEGGER_RTT_Init>

	return 0;
}
   1a574:	2000      	movs	r0, #0
   1a576:	bd08      	pop	{r3, pc}

0001a578 <z_irq_spurious>:
	z_arm_reserved();
   1a578:	f7f3 b93c 	b.w	d7f4 <z_arm_bus_fault>

0001a57c <z_do_kernel_oops>:
 *   fault handler will executed insted of the SVC.
 *
 * @param esf exception frame
 */
void z_do_kernel_oops(const z_arch_esf_t *esf)
{
   1a57c:	4601      	mov	r1, r0
			reason = K_ERR_KERNEL_OOPS;
		}
	}

#endif /* CONFIG_USERSPACE */
	z_arm_fatal_error(reason, esf);
   1a57e:	6800      	ldr	r0, [r0, #0]
   1a580:	f7f3 ba04 	b.w	d98c <z_arm_fatal_error>

0001a584 <z_arm_nmi>:
 *
 * @return N/A
 */

void z_arm_nmi(void)
{
   1a584:	b508      	push	{r3, lr}
	handler();
   1a586:	f7f3 f93f 	bl	d808 <z_SysNmiOnReset>
	z_arm_exc_exit();
}
   1a58a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_arm_exc_exit();
   1a58e:	f7f3 b8af 	b.w	d6f0 <z_arm_exc_exit>

0001a592 <z_arm_configure_dynamic_mpu_regions>:
 *
 * For some MPU architectures, such as the unmodified ARMv8-M MPU,
 * the function must execute with MPU enabled.
 */
void z_arm_configure_dynamic_mpu_regions(struct k_thread *thread)
{
   1a592:	b507      	push	{r0, r1, r2, lr}

	region_num++;
#endif /* CONFIG_MPU_STACK_GUARD */

	/* Configure the dynamic MPU regions */
	arm_core_mpu_configure_dynamic_mpu_regions(
   1a594:	2100      	movs	r1, #0
   1a596:	a801      	add	r0, sp, #4
   1a598:	f7f3 ff80 	bl	e49c <arm_core_mpu_configure_dynamic_mpu_regions>
		(const struct k_mem_partition **)dynamic_regions,
		region_num);
}
   1a59c:	b003      	add	sp, #12
   1a59e:	f85d fb04 	ldr.w	pc, [sp], #4

0001a5a2 <mpu_configure_region>:
{
   1a5a2:	b530      	push	{r4, r5, lr}
	get_region_attr_from_k_mem_partition_info(&region_conf.attr,
   1a5a4:	684b      	ldr	r3, [r1, #4]
{
   1a5a6:	b085      	sub	sp, #20
	region_conf.base = new_region->start;
   1a5a8:	680c      	ldr	r4, [r1, #0]
	p_attr->rbar = attr->rbar &
   1a5aa:	f89d 2008 	ldrb.w	r2, [sp, #8]
   1a5ae:	890d      	ldrh	r5, [r1, #8]
   1a5b0:	9400      	str	r4, [sp, #0]
	p_attr->mair_idx = attr->mair_idx;
   1a5b2:	8949      	ldrh	r1, [r1, #10]
	p_attr->r_limit = REGION_LIMIT_ADDR(base, size);
   1a5b4:	f024 041f 	bic.w	r4, r4, #31
   1a5b8:	3b01      	subs	r3, #1
   1a5ba:	4423      	add	r3, r4
	p_attr->rbar = attr->rbar &
   1a5bc:	f365 0204 	bfi	r2, r5, #0, #5
	p_attr->mair_idx = attr->mair_idx;
   1a5c0:	f361 1247 	bfi	r2, r1, #5, #3
	p_attr->r_limit = REGION_LIMIT_ADDR(base, size);
   1a5c4:	f023 031f 	bic.w	r3, r3, #31
	if (index > (get_num_regions() - 1)) {
   1a5c8:	280f      	cmp	r0, #15
	p_attr->mair_idx = attr->mair_idx;
   1a5ca:	f88d 2008 	strb.w	r2, [sp, #8]
	p_attr->r_limit = REGION_LIMIT_ADDR(base, size);
   1a5ce:	9303      	str	r3, [sp, #12]
   1a5d0:	4604      	mov	r4, r0
   1a5d2:	d905      	bls.n	1a5e0 <mpu_configure_region+0x3e>
   1a5d4:	f7f3 fde4 	bl	e1a0 <region_allocate_and_init.part.0>
   1a5d8:	4604      	mov	r4, r0
}
   1a5da:	4620      	mov	r0, r4
   1a5dc:	b005      	add	sp, #20
   1a5de:	bd30      	pop	{r4, r5, pc}
	region_init(index, region_conf);
   1a5e0:	4669      	mov	r1, sp
   1a5e2:	f7f3 fdc5 	bl	e170 <region_init>
	return region_allocate_and_init(index,
   1a5e6:	e7f8      	b.n	1a5da <mpu_configure_region+0x38>

0001a5e8 <arm_cmse_mpu_region_get>:
__CMSE_TT_ASM ()

__extension__ static __inline __attribute__ ((__always_inline__))
cmse_address_info_t
cmse_TT (void *__p)
__CMSE_TT_ASM ()
   1a5e8:	e840 f300 	tt	r3, r0

int arm_cmse_mpu_region_get(u32_t addr)
{
	cmse_address_info_t addr_info =	cmse_TT((void *)addr);

	if (addr_info.flags.mpu_region_valid) {
   1a5ec:	f413 3f80 	tst.w	r3, #65536	; 0x10000
   1a5f0:	b2d8      	uxtb	r0, r3
		return addr_info.flags.mpu_region;
	}

	return -EINVAL;
}
   1a5f2:	bf08      	it	eq
   1a5f4:	f06f 0015 	mvneq.w	r0, #21
   1a5f8:	4770      	bx	lr

0001a5fa <atoi>:

#include <stdlib.h>
#include <ctype.h>

int atoi(const char *s)
{
   1a5fa:	b530      	push	{r4, r5, lr}
	int n = 0;
	int neg = 0;

	while (isspace(*s)) {
   1a5fc:	7802      	ldrb	r2, [r0, #0]
   1a5fe:	4603      	mov	r3, r0
	return (int)(c == (int)' ' || ((unsigned)c-(unsigned)'\t') < 5U);
   1a600:	2a20      	cmp	r2, #32
   1a602:	f100 0001 	add.w	r0, r0, #1
   1a606:	d0f9      	beq.n	1a5fc <atoi+0x2>
   1a608:	f1a2 0109 	sub.w	r1, r2, #9
   1a60c:	2904      	cmp	r1, #4
   1a60e:	d9f5      	bls.n	1a5fc <atoi+0x2>
		s++;
	}
	switch (*s) {
   1a610:	2a2b      	cmp	r2, #43	; 0x2b
   1a612:	d008      	beq.n	1a626 <atoi+0x2c>
	case '-':
		neg = 1;
		s++;
   1a614:	2a2d      	cmp	r2, #45	; 0x2d
   1a616:	bf0a      	itet	eq
   1a618:	4603      	moveq	r3, r0
   1a61a:	2100      	movne	r1, #0
   1a61c:	2101      	moveq	r1, #1
   1a61e:	3b01      	subs	r3, #1
	int neg = 0;
   1a620:	2000      	movs	r0, #0
	case '+':
		s++;
	}
	/* Compute n as a negative number to avoid overflow on INT_MIN */
	while (isdigit(*s)) {
		n = 10*n - (*s++ - '0');
   1a622:	250a      	movs	r5, #10
   1a624:	e006      	b.n	1a634 <atoi+0x3a>
		s++;
   1a626:	4603      	mov	r3, r0
	int neg = 0;
   1a628:	2100      	movs	r1, #0
   1a62a:	e7f8      	b.n	1a61e <atoi+0x24>
		n = 10*n - (*s++ - '0');
   1a62c:	f1c2 0230 	rsb	r2, r2, #48	; 0x30
   1a630:	fb05 2000 	mla	r0, r5, r0, r2
	while (isdigit(*s)) {
   1a634:	f813 2f01 	ldrb.w	r2, [r3, #1]!
	return (int)(((unsigned)(a)-(unsigned)'0') < 10U);
   1a638:	f1a2 0430 	sub.w	r4, r2, #48	; 0x30
   1a63c:	2c09      	cmp	r4, #9
   1a63e:	d9f5      	bls.n	1a62c <atoi+0x32>
	}
	return neg ? n : -n;
   1a640:	b901      	cbnz	r1, 1a644 <atoi+0x4a>
   1a642:	4240      	negs	r0, r0
}
   1a644:	bd30      	pop	{r4, r5, pc}

0001a646 <strtol>:
 *
 * Ignores `locale' stuff.  Assumes that the upper and lower case
 * alphabets and digits are each contiguous.
 */
long strtol(const char *nptr, char **endptr, register int base)
{
   1a646:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1a64a:	4684      	mov	ip, r0
   1a64c:	460f      	mov	r7, r1
	register const char *s = nptr;
   1a64e:	4605      	mov	r5, r0
	 * Skip white space and pick up leading +/- sign if any.
	 * If base is 0, allow 0x for hex and 0 for octal, else
	 * assume decimal; if base is already 16, allow 0x.
	 */
	do {
		c = *s++;
   1a650:	462c      	mov	r4, r5
   1a652:	f814 3b01 	ldrb.w	r3, [r4], #1
	return (int)(c == (int)' ' || ((unsigned)c-(unsigned)'\t') < 5U);
   1a656:	2b20      	cmp	r3, #32
   1a658:	d036      	beq.n	1a6c8 <strtol+0x82>
   1a65a:	f1a3 0109 	sub.w	r1, r3, #9
   1a65e:	2904      	cmp	r1, #4
   1a660:	d932      	bls.n	1a6c8 <strtol+0x82>
	} while (isspace(c));
	if (c == '-') {
   1a662:	2b2d      	cmp	r3, #45	; 0x2d
   1a664:	d132      	bne.n	1a6cc <strtol+0x86>
		neg = 1;
   1a666:	2101      	movs	r1, #1
		c = *s++;
   1a668:	786b      	ldrb	r3, [r5, #1]
   1a66a:	1cac      	adds	r4, r5, #2
	} else if (c == '+') {
		c = *s++;
	}

	if ((base == 0 || base == 16) &&
   1a66c:	2a00      	cmp	r2, #0
   1a66e:	d05c      	beq.n	1a72a <strtol+0xe4>
   1a670:	2a10      	cmp	r2, #16
   1a672:	d109      	bne.n	1a688 <strtol+0x42>
   1a674:	2b30      	cmp	r3, #48	; 0x30
   1a676:	d107      	bne.n	1a688 <strtol+0x42>
	    c == '0' && (*s == 'x' || *s == 'X')) {
   1a678:	7823      	ldrb	r3, [r4, #0]
   1a67a:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   1a67e:	2b58      	cmp	r3, #88	; 0x58
   1a680:	d14e      	bne.n	1a720 <strtol+0xda>
		c = s[1];
		s += 2;
		base = 16;
   1a682:	2210      	movs	r2, #16
		c = s[1];
   1a684:	7863      	ldrb	r3, [r4, #1]
		s += 2;
   1a686:	3402      	adds	r4, #2
	 * the number is too big, and we will return a range error.
	 *
	 * Set any if any `digits' consumed; make it negative to indicate
	 * overflow.
	 */
	cutoff = neg ? -(unsigned long)LONG_MIN : LONG_MAX;
   1a688:	2900      	cmp	r1, #0
   1a68a:	bf14      	ite	ne
   1a68c:	f04f 4800 	movne.w	r8, #2147483648	; 0x80000000
   1a690:	f06f 4800 	mvneq.w	r8, #2147483648	; 0x80000000
	cutlim = cutoff % (unsigned long)base;
	cutoff /= (unsigned long)base;
	for (acc = 0, any = 0;; c = *s++) {
   1a694:	2600      	movs	r6, #0
	cutlim = cutoff % (unsigned long)base;
   1a696:	fbb8 fef2 	udiv	lr, r8, r2
	for (acc = 0, any = 0;; c = *s++) {
   1a69a:	4630      	mov	r0, r6
	cutlim = cutoff % (unsigned long)base;
   1a69c:	fb02 891e 	mls	r9, r2, lr, r8
	return (int)(((unsigned)(a)-(unsigned)'0') < 10U);
   1a6a0:	f1a3 0530 	sub.w	r5, r3, #48	; 0x30
		if (isdigit(c)) {
   1a6a4:	2d09      	cmp	r5, #9
   1a6a6:	d817      	bhi.n	1a6d8 <strtol+0x92>
			c -= '0';
   1a6a8:	462b      	mov	r3, r5
		} else if (isalpha(c)) {
			c -= isupper(c) ? 'A' - 10 : 'a' - 10;
		} else {
			break;
		}
		if (c >= base) {
   1a6aa:	429a      	cmp	r2, r3
   1a6ac:	dd24      	ble.n	1a6f8 <strtol+0xb2>
			break;
		}
		if (any < 0 || acc > cutoff || (acc == cutoff && c > cutlim)) {
   1a6ae:	1c75      	adds	r5, r6, #1
   1a6b0:	d007      	beq.n	1a6c2 <strtol+0x7c>
   1a6b2:	4570      	cmp	r0, lr
   1a6b4:	d81d      	bhi.n	1a6f2 <strtol+0xac>
   1a6b6:	d101      	bne.n	1a6bc <strtol+0x76>
   1a6b8:	454b      	cmp	r3, r9
   1a6ba:	dc1a      	bgt.n	1a6f2 <strtol+0xac>
			any = -1;
		} else {
			any = 1;
   1a6bc:	2601      	movs	r6, #1
			acc *= base;
			acc += c;
   1a6be:	fb00 3002 	mla	r0, r0, r2, r3
	for (acc = 0, any = 0;; c = *s++) {
   1a6c2:	f814 3b01 	ldrb.w	r3, [r4], #1
		if (isdigit(c)) {
   1a6c6:	e7eb      	b.n	1a6a0 <strtol+0x5a>
{
   1a6c8:	4625      	mov	r5, r4
   1a6ca:	e7c1      	b.n	1a650 <strtol+0xa>
	} else if (c == '+') {
   1a6cc:	2b2b      	cmp	r3, #43	; 0x2b
		c = *s++;
   1a6ce:	bf04      	itt	eq
   1a6d0:	1cac      	addeq	r4, r5, #2
   1a6d2:	786b      	ldrbeq	r3, [r5, #1]
	register int neg = 0, any, cutlim;
   1a6d4:	2100      	movs	r1, #0
   1a6d6:	e7c9      	b.n	1a66c <strtol+0x26>
	return (int)((((unsigned)c|32u)-(unsigned)'a') < 26U);
   1a6d8:	f043 0520 	orr.w	r5, r3, #32
   1a6dc:	3d61      	subs	r5, #97	; 0x61
		} else if (isalpha(c)) {
   1a6de:	2d19      	cmp	r5, #25
   1a6e0:	d80a      	bhi.n	1a6f8 <strtol+0xb2>
	return (int)(((unsigned)(a)-(unsigned)'A') < 26U);
   1a6e2:	f1a3 0541 	sub.w	r5, r3, #65	; 0x41
			c -= isupper(c) ? 'A' - 10 : 'a' - 10;
   1a6e6:	2d1a      	cmp	r5, #26
   1a6e8:	bf34      	ite	cc
   1a6ea:	2537      	movcc	r5, #55	; 0x37
   1a6ec:	2557      	movcs	r5, #87	; 0x57
   1a6ee:	1b5b      	subs	r3, r3, r5
   1a6f0:	e7db      	b.n	1a6aa <strtol+0x64>
			any = -1;
   1a6f2:	f04f 36ff 	mov.w	r6, #4294967295
   1a6f6:	e7e4      	b.n	1a6c2 <strtol+0x7c>
		}
	}

	if (any < 0) {
   1a6f8:	1c73      	adds	r3, r6, #1
   1a6fa:	d107      	bne.n	1a70c <strtol+0xc6>
	if (z_syscall_trap()) {
		return (int *) arch_syscall_invoke0(K_SYSCALL_Z_ERRNO);
	}
#endif
	compiler_barrier();
	return z_impl_z_errno();
   1a6fc:	f7fd fe8c 	bl	18418 <z_impl_z_errno>
		acc = neg ? LONG_MIN : LONG_MAX;
		errno = ERANGE;
   1a700:	2326      	movs	r3, #38	; 0x26
   1a702:	6003      	str	r3, [r0, #0]
		acc = neg ? LONG_MIN : LONG_MAX;
   1a704:	4640      	mov	r0, r8
	} else if (neg) {
		acc = -acc;
	}

	if (endptr != NULL) {
   1a706:	b937      	cbnz	r7, 1a716 <strtol+0xd0>
		*endptr = (char *)(any ? s - 1 : nptr);
	}
	return acc;
}
   1a708:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	} else if (neg) {
   1a70c:	b101      	cbz	r1, 1a710 <strtol+0xca>
		acc = -acc;
   1a70e:	4240      	negs	r0, r0
	if (endptr != NULL) {
   1a710:	2f00      	cmp	r7, #0
   1a712:	d0f9      	beq.n	1a708 <strtol+0xc2>
		*endptr = (char *)(any ? s - 1 : nptr);
   1a714:	b10e      	cbz	r6, 1a71a <strtol+0xd4>
   1a716:	f104 3cff 	add.w	ip, r4, #4294967295
   1a71a:	f8c7 c000 	str.w	ip, [r7]
	return acc;
   1a71e:	e7f3      	b.n	1a708 <strtol+0xc2>
	if (base == 0) {
   1a720:	2330      	movs	r3, #48	; 0x30
   1a722:	2a00      	cmp	r2, #0
   1a724:	d1b0      	bne.n	1a688 <strtol+0x42>
		base = c == '0' ? 8 : 10;
   1a726:	2208      	movs	r2, #8
   1a728:	e7ae      	b.n	1a688 <strtol+0x42>
	if ((base == 0 || base == 16) &&
   1a72a:	2b30      	cmp	r3, #48	; 0x30
   1a72c:	d0a4      	beq.n	1a678 <strtol+0x32>
		base = c == '0' ? 8 : 10;
   1a72e:	220a      	movs	r2, #10
   1a730:	e7aa      	b.n	1a688 <strtol+0x42>

0001a732 <strstr>:
/*
 * Find the first occurrence of find in s.
 */
char *
strstr(const char *s, const char *find)
{
   1a732:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	char c, sc;
	size_t len;

	c = *find++;
   1a736:	780f      	ldrb	r7, [r1, #0]
{
   1a738:	4605      	mov	r5, r0
	if (c != 0) {
   1a73a:	b187      	cbz	r7, 1a75e <strstr+0x2c>
	c = *find++;
   1a73c:	1c4c      	adds	r4, r1, #1
		len = strlen(find);
   1a73e:	4620      	mov	r0, r4
   1a740:	f000 f83f 	bl	1a7c2 <strlen>
   1a744:	4680      	mov	r8, r0
		do {
			do {
				sc = *s++;
   1a746:	462e      	mov	r6, r5
   1a748:	f816 3b01 	ldrb.w	r3, [r6], #1
				if (sc == 0) {
   1a74c:	b163      	cbz	r3, 1a768 <strstr+0x36>
					return NULL;
				}
			} while (sc != c);
   1a74e:	429f      	cmp	r7, r3
   1a750:	d108      	bne.n	1a764 <strstr+0x32>
		} while (strncmp(s, find, len) != 0);
   1a752:	4642      	mov	r2, r8
   1a754:	4621      	mov	r1, r4
   1a756:	4630      	mov	r0, r6
   1a758:	f000 f846 	bl	1a7e8 <strncmp>
   1a75c:	b910      	cbnz	r0, 1a764 <strstr+0x32>
	s--;
	}
	return (char *)s;
}
   1a75e:	4628      	mov	r0, r5
   1a760:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
{
   1a764:	4635      	mov	r5, r6
   1a766:	e7ee      	b.n	1a746 <strstr+0x14>
					return NULL;
   1a768:	461d      	mov	r5, r3
   1a76a:	e7f8      	b.n	1a75e <strstr+0x2c>

0001a76c <strcpy>:

char *strcpy(char *_MLIBC_RESTRICT d, const char *_MLIBC_RESTRICT s)
{
	char *dest = d;

	while (*s != '\0') {
   1a76c:	4603      	mov	r3, r0
   1a76e:	3901      	subs	r1, #1
   1a770:	f811 2f01 	ldrb.w	r2, [r1, #1]!
   1a774:	b90a      	cbnz	r2, 1a77a <strcpy+0xe>
		*d = *s;
		d++;
		s++;
	}

	*d = '\0';
   1a776:	701a      	strb	r2, [r3, #0]

	return dest;
}
   1a778:	4770      	bx	lr
		*d = *s;
   1a77a:	f803 2b01 	strb.w	r2, [r3], #1
		s++;
   1a77e:	e7f7      	b.n	1a770 <strcpy+0x4>

0001a780 <strncpy>:
 *
 * @return pointer to destination buffer <d>
 */

char *strncpy(char *_MLIBC_RESTRICT d, const char *_MLIBC_RESTRICT s, size_t n)
{
   1a780:	b570      	push	{r4, r5, r6, lr}
   1a782:	4605      	mov	r5, r0
   1a784:	3901      	subs	r1, #1
   1a786:	462c      	mov	r4, r5
	char *dest = d;

	while ((n > 0) && *s != '\0') {
   1a788:	b142      	cbz	r2, 1a79c <strncpy+0x1c>
   1a78a:	f811 3f01 	ldrb.w	r3, [r1, #1]!
   1a78e:	1e56      	subs	r6, r2, #1
   1a790:	b92b      	cbnz	r3, 1a79e <strncpy+0x1e>
   1a792:	442a      	add	r2, r5
		d++;
		n--;
	}

	while (n > 0) {
		*d = '\0';
   1a794:	f804 3b01 	strb.w	r3, [r4], #1
	while (n > 0) {
   1a798:	42a2      	cmp	r2, r4
   1a79a:	d1fb      	bne.n	1a794 <strncpy+0x14>
		d++;
		n--;
	}

	return dest;
}
   1a79c:	bd70      	pop	{r4, r5, r6, pc}
		*d = *s;
   1a79e:	f805 3b01 	strb.w	r3, [r5], #1
		n--;
   1a7a2:	4632      	mov	r2, r6
   1a7a4:	e7ef      	b.n	1a786 <strncpy+0x6>

0001a7a6 <strchr>:
 * @return pointer to 1st instance of found byte, or NULL if not found
 */

char *strchr(const char *s, int c)
{
	char tmp = (char) c;
   1a7a6:	b2c9      	uxtb	r1, r1

	while ((*s != tmp) && (*s != '\0')) {
   1a7a8:	7802      	ldrb	r2, [r0, #0]
   1a7aa:	4603      	mov	r3, r0
   1a7ac:	428a      	cmp	r2, r1
   1a7ae:	f100 0001 	add.w	r0, r0, #1
   1a7b2:	d004      	beq.n	1a7be <strchr+0x18>
   1a7b4:	2a00      	cmp	r2, #0
   1a7b6:	d1f7      	bne.n	1a7a8 <strchr+0x2>
		s++;
	}

	return (*s == tmp) ? (char *) s : NULL;
   1a7b8:	2900      	cmp	r1, #0
   1a7ba:	bf18      	it	ne
   1a7bc:	2300      	movne	r3, #0
}
   1a7be:	4618      	mov	r0, r3
   1a7c0:	4770      	bx	lr

0001a7c2 <strlen>:
 * @return number of bytes in string <s>
 */

size_t strlen(const char *s)
{
	size_t n = 0;
   1a7c2:	2300      	movs	r3, #0

	while (*s != '\0') {
   1a7c4:	5cc2      	ldrb	r2, [r0, r3]
   1a7c6:	b90a      	cbnz	r2, 1a7cc <strlen+0xa>
		s++;
		n++;
	}

	return n;
}
   1a7c8:	4618      	mov	r0, r3
   1a7ca:	4770      	bx	lr
		n++;
   1a7cc:	3301      	adds	r3, #1
   1a7ce:	e7f9      	b.n	1a7c4 <strlen+0x2>

0001a7d0 <strcmp>:
 * @return negative # if <s1> < <s2>, 0 if <s1> == <s2>, else positive #
 */

int strcmp(const char *s1, const char *s2)
{
	while ((*s1 == *s2) && (*s1 != '\0')) {
   1a7d0:	3801      	subs	r0, #1
   1a7d2:	3901      	subs	r1, #1
   1a7d4:	f810 3f01 	ldrb.w	r3, [r0, #1]!
   1a7d8:	f811 2f01 	ldrb.w	r2, [r1, #1]!
   1a7dc:	4293      	cmp	r3, r2
   1a7de:	d101      	bne.n	1a7e4 <strcmp+0x14>
   1a7e0:	2b00      	cmp	r3, #0
   1a7e2:	d1f7      	bne.n	1a7d4 <strcmp+0x4>
		s1++;
		s2++;
	}

	return *s1 - *s2;
}
   1a7e4:	1a98      	subs	r0, r3, r2
   1a7e6:	4770      	bx	lr

0001a7e8 <strncmp>:
 *
 * @return negative # if <s1> < <s2>, 0 if <s1> == <s2>, else positive #
 */

int strncmp(const char *s1, const char *s2, size_t n)
{
   1a7e8:	b530      	push	{r4, r5, lr}
	while ((n > 0) && (*s1 == *s2) && (*s1 != '\0')) {
   1a7ea:	2400      	movs	r4, #0
   1a7ec:	42a2      	cmp	r2, r4
   1a7ee:	d008      	beq.n	1a802 <strncmp+0x1a>
   1a7f0:	5d03      	ldrb	r3, [r0, r4]
   1a7f2:	5d0d      	ldrb	r5, [r1, r4]
   1a7f4:	42ab      	cmp	r3, r5
   1a7f6:	d102      	bne.n	1a7fe <strncmp+0x16>
   1a7f8:	3401      	adds	r4, #1
   1a7fa:	2b00      	cmp	r3, #0
   1a7fc:	d1f6      	bne.n	1a7ec <strncmp+0x4>
		s1++;
		s2++;
		n--;
	}

	return (n == 0) ? 0 : (*s1 - *s2);
   1a7fe:	1b58      	subs	r0, r3, r5
   1a800:	e000      	b.n	1a804 <strncmp+0x1c>
   1a802:	2000      	movs	r0, #0
}
   1a804:	bd30      	pop	{r4, r5, pc}

0001a806 <memcmp>:
 * @brief Compare two memory areas
 *
 * @return negative # if <m1> < <m2>, 0 if <m1> == <m2>, else positive #
 */
int memcmp(const void *m1, const void *m2, size_t n)
{
   1a806:	b510      	push	{r4, lr}
	const char *c1 = m1;
	const char *c2 = m2;

	if (!n) {
   1a808:	b15a      	cbz	r2, 1a822 <memcmp+0x1c>
   1a80a:	3901      	subs	r1, #1
   1a80c:	1884      	adds	r4, r0, r2
   1a80e:	f810 2b01 	ldrb.w	r2, [r0], #1
   1a812:	f811 3f01 	ldrb.w	r3, [r1, #1]!
		return 0;
	}

	while ((--n > 0) && (*c1 == *c2)) {
   1a816:	42a0      	cmp	r0, r4
   1a818:	d001      	beq.n	1a81e <memcmp+0x18>
   1a81a:	429a      	cmp	r2, r3
   1a81c:	d0f7      	beq.n	1a80e <memcmp+0x8>
		c1++;
		c2++;
	}

	return *c1 - *c2;
   1a81e:	1ad0      	subs	r0, r2, r3
}
   1a820:	bd10      	pop	{r4, pc}
		return 0;
   1a822:	4610      	mov	r0, r2
   1a824:	e7fc      	b.n	1a820 <memcmp+0x1a>

0001a826 <memcpy>:
 *
 * @return pointer to start of destination buffer
 */

void *memcpy(void *_MLIBC_RESTRICT d, const void *_MLIBC_RESTRICT s, size_t n)
{
   1a826:	b5f0      	push	{r4, r5, r6, r7, lr}

	unsigned char *d_byte = (unsigned char *)d;
	const unsigned char *s_byte = (const unsigned char *)s;
	const uintptr_t mask = sizeof(mem_word_t) - 1;

	if ((((uintptr_t)d ^ (uintptr_t)s_byte) & mask) == 0) {
   1a828:	ea81 0400 	eor.w	r4, r1, r0
   1a82c:	07a5      	lsls	r5, r4, #30
   1a82e:	4603      	mov	r3, r0
   1a830:	d00b      	beq.n	1a84a <memcpy+0x24>
   1a832:	3b01      	subs	r3, #1
   1a834:	440a      	add	r2, r1
		s_byte = (unsigned char *)s_word;
	}

	/* do byte-sized copying until finished */

	while (n > 0) {
   1a836:	4291      	cmp	r1, r2
   1a838:	d11a      	bne.n	1a870 <memcpy+0x4a>
		*(d_byte++) = *(s_byte++);
		n--;
	}

	return d;
}
   1a83a:	bdf0      	pop	{r4, r5, r6, r7, pc}
			if (n == 0) {
   1a83c:	2a00      	cmp	r2, #0
   1a83e:	d0fc      	beq.n	1a83a <memcpy+0x14>
			*(d_byte++) = *(s_byte++);
   1a840:	f811 4b01 	ldrb.w	r4, [r1], #1
			n--;
   1a844:	3a01      	subs	r2, #1
			*(d_byte++) = *(s_byte++);
   1a846:	f803 4b01 	strb.w	r4, [r3], #1
		while (((uintptr_t)d_byte) & mask) {
   1a84a:	079c      	lsls	r4, r3, #30
   1a84c:	d1f6      	bne.n	1a83c <memcpy+0x16>
   1a84e:	0895      	lsrs	r5, r2, #2
   1a850:	00ac      	lsls	r4, r5, #2
   1a852:	1f1e      	subs	r6, r3, #4
   1a854:	190f      	adds	r7, r1, r4
		while (n >= sizeof(mem_word_t)) {
   1a856:	42b9      	cmp	r1, r7
   1a858:	d105      	bne.n	1a866 <memcpy+0x40>
   1a85a:	f06f 0603 	mvn.w	r6, #3
   1a85e:	4423      	add	r3, r4
   1a860:	fb06 2205 	mla	r2, r6, r5, r2
   1a864:	e7e5      	b.n	1a832 <memcpy+0xc>
			*(d_word++) = *(s_word++);
   1a866:	f851 cb04 	ldr.w	ip, [r1], #4
   1a86a:	f846 cf04 	str.w	ip, [r6, #4]!
			n -= sizeof(mem_word_t);
   1a86e:	e7f2      	b.n	1a856 <memcpy+0x30>
		*(d_byte++) = *(s_byte++);
   1a870:	f811 4b01 	ldrb.w	r4, [r1], #1
   1a874:	f803 4f01 	strb.w	r4, [r3, #1]!
		n--;
   1a878:	e7dd      	b.n	1a836 <memcpy+0x10>

0001a87a <memset>:

void *memset(void *buf, int c, size_t n)
{
	/* do byte-sized initialization until word-aligned or finished */

	unsigned char *d_byte = (unsigned char *)buf;
   1a87a:	4603      	mov	r3, r0
{
   1a87c:	b570      	push	{r4, r5, r6, lr}
	unsigned char c_byte = (unsigned char)c;
   1a87e:	b2c9      	uxtb	r1, r1

	while (((uintptr_t)d_byte) & (sizeof(mem_word_t) - 1)) {
   1a880:	079c      	lsls	r4, r3, #30
   1a882:	d110      	bne.n	1a8a6 <memset+0x2c>
	/* do word-sized initialization as long as possible */

	mem_word_t *d_word = (mem_word_t *)d_byte;
	mem_word_t c_word = (mem_word_t)c_byte;

	c_word |= c_word << 8;
   1a884:	ea41 2401 	orr.w	r4, r1, r1, lsl #8
	c_word |= c_word << 16;
   1a888:	ea44 4504 	orr.w	r5, r4, r4, lsl #16
#if Z_MEM_WORD_T_WIDTH > 32
	c_word |= c_word << 32;
#endif

	while (n >= sizeof(mem_word_t)) {
   1a88c:	0894      	lsrs	r4, r2, #2
   1a88e:	eb03 0684 	add.w	r6, r3, r4, lsl #2
   1a892:	42b3      	cmp	r3, r6
   1a894:	d10d      	bne.n	1a8b2 <memset+0x38>
   1a896:	f06f 0503 	mvn.w	r5, #3
   1a89a:	fb05 2404 	mla	r4, r5, r4, r2
   1a89e:	441c      	add	r4, r3

	/* do byte-sized initialization until finished */

	d_byte = (unsigned char *)d_word;

	while (n > 0) {
   1a8a0:	42a3      	cmp	r3, r4
   1a8a2:	d109      	bne.n	1a8b8 <memset+0x3e>
		*(d_byte++) = c_byte;
		n--;
	}

	return buf;
}
   1a8a4:	bd70      	pop	{r4, r5, r6, pc}
		if (n == 0) {
   1a8a6:	2a00      	cmp	r2, #0
   1a8a8:	d0fc      	beq.n	1a8a4 <memset+0x2a>
		*(d_byte++) = c_byte;
   1a8aa:	f803 1b01 	strb.w	r1, [r3], #1
		n--;
   1a8ae:	3a01      	subs	r2, #1
   1a8b0:	e7e6      	b.n	1a880 <memset+0x6>
		*(d_word++) = c_word;
   1a8b2:	f843 5b04 	str.w	r5, [r3], #4
		n -= sizeof(mem_word_t);
   1a8b6:	e7ec      	b.n	1a892 <memset+0x18>
		*(d_byte++) = c_byte;
   1a8b8:	f803 1b01 	strb.w	r1, [r3], #1
		n--;
   1a8bc:	e7f0      	b.n	1a8a0 <memset+0x26>

0001a8be <_to_x>:
{
   1a8be:	4603      	mov	r3, r0
   1a8c0:	b5f0      	push	{r4, r5, r6, r7, lr}
		unsigned int d = n % base;
   1a8c2:	fbb1 f7f2 	udiv	r7, r1, r2
   1a8c6:	fb02 1517 	mls	r5, r2, r7, r1
		*buf++ = '0' + d + (d > 9 ? ('a' - '0' - 10) : 0);
   1a8ca:	2d09      	cmp	r5, #9
   1a8cc:	bf8c      	ite	hi
   1a8ce:	2627      	movhi	r6, #39	; 0x27
   1a8d0:	2600      	movls	r6, #0
   1a8d2:	461c      	mov	r4, r3
   1a8d4:	3530      	adds	r5, #48	; 0x30
   1a8d6:	4435      	add	r5, r6
	} while (n);
   1a8d8:	4291      	cmp	r1, r2
		*buf++ = '0' + d + (d > 9 ? ('a' - '0' - 10) : 0);
   1a8da:	f804 5b01 	strb.w	r5, [r4], #1
	} while (n);
   1a8de:	d206      	bcs.n	1a8ee <_to_x+0x30>
	*buf = 0;
   1a8e0:	2200      	movs	r2, #0
   1a8e2:	7022      	strb	r2, [r4, #0]
	len = buf - start;
   1a8e4:	1a24      	subs	r4, r4, r0
	for (buf--; buf > start; buf--, start++) {
   1a8e6:	4283      	cmp	r3, r0
   1a8e8:	d804      	bhi.n	1a8f4 <_to_x+0x36>
}
   1a8ea:	4620      	mov	r0, r4
   1a8ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
		n /= base;
   1a8ee:	4639      	mov	r1, r7
   1a8f0:	4623      	mov	r3, r4
   1a8f2:	e7e6      	b.n	1a8c2 <_to_x+0x4>
		char tmp = *buf;
   1a8f4:	781a      	ldrb	r2, [r3, #0]
		*buf = *start;
   1a8f6:	7801      	ldrb	r1, [r0, #0]
   1a8f8:	f803 1901 	strb.w	r1, [r3], #-1
		*start = tmp;
   1a8fc:	f800 2b01 	strb.w	r2, [r0], #1
   1a900:	e7f1      	b.n	1a8e6 <_to_x+0x28>

0001a902 <_rlrshift>:
	*v = (*v & 1) + (*v >> 1);
   1a902:	2100      	movs	r1, #0
{
   1a904:	b570      	push	{r4, r5, r6, lr}
	*v = (*v & 1) + (*v >> 1);
   1a906:	e9d0 6500 	ldrd	r6, r5, [r0]
   1a90a:	0872      	lsrs	r2, r6, #1
   1a90c:	f006 0301 	and.w	r3, r6, #1
   1a910:	ea42 72c5 	orr.w	r2, r2, r5, lsl #31
   1a914:	189b      	adds	r3, r3, r2
   1a916:	ea4f 0455 	mov.w	r4, r5, lsr #1
   1a91a:	eb44 0101 	adc.w	r1, r4, r1
   1a91e:	e9c0 3100 	strd	r3, r1, [r0]
}
   1a922:	bd70      	pop	{r4, r5, r6, pc}

0001a924 <_ldiv5>:
{
   1a924:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	uint64_t rem = *v, quot = 0U, q;
   1a928:	e9d0 3200 	ldrd	r3, r2, [r0]
		q = (uint64_t)(hi / 5U) << shifts[i];
   1a92c:	2705      	movs	r7, #5
	rem += 2U;
   1a92e:	3302      	adds	r3, #2
   1a930:	f142 0200 	adc.w	r2, r2, #0
		q = (uint64_t)(hi / 5U) << shifts[i];
   1a934:	fbb2 fef7 	udiv	lr, r2, r7
   1a938:	f04f 0c00 	mov.w	ip, #0
		rem -= q * 5U;
   1a93c:	fb07 f10e 	mul.w	r1, r7, lr
   1a940:	ebb3 060c 	subs.w	r6, r3, ip
   1a944:	eb62 0101 	sbc.w	r1, r2, r1
		hi = rem >> shifts[i];
   1a948:	08f2      	lsrs	r2, r6, #3
   1a94a:	ea42 7241 	orr.w	r2, r2, r1, lsl #29
		q = (uint64_t)(hi / 5U) << shifts[i];
   1a94e:	fbb2 f1f7 	udiv	r1, r2, r7
   1a952:	00ca      	lsls	r2, r1, #3
		quot += q;
   1a954:	eb1c 0802 	adds.w	r8, ip, r2
		q = (uint64_t)(hi / 5U) << shifts[i];
   1a958:	ea4f 7351 	mov.w	r3, r1, lsr #29
		quot += q;
   1a95c:	eb4e 0903 	adc.w	r9, lr, r3
		rem -= q * 5U;
   1a960:	fba2 2307 	umull	r2, r3, r2, r7
   1a964:	1ab3      	subs	r3, r6, r2
		q = (uint64_t)(hi / 5U) << shifts[i];
   1a966:	fbb3 f3f7 	udiv	r3, r3, r7
		quot += q;
   1a96a:	eb18 0403 	adds.w	r4, r8, r3
   1a96e:	f149 0500 	adc.w	r5, r9, #0
	*v = quot;
   1a972:	e9c0 4500 	strd	r4, r5, [r0]
}
   1a976:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0001a97a <_get_digit>:
	if (*digit_count > 0) {
   1a97a:	680b      	ldr	r3, [r1, #0]
{
   1a97c:	b570      	push	{r4, r5, r6, lr}
	if (*digit_count > 0) {
   1a97e:	2b00      	cmp	r3, #0
   1a980:	dd10      	ble.n	1a9a4 <_get_digit+0x2a>
		*digit_count -= 1;
   1a982:	3b01      	subs	r3, #1
   1a984:	600b      	str	r3, [r1, #0]
		*fr = *fr * 10U;
   1a986:	210a      	movs	r1, #10
   1a988:	6802      	ldr	r2, [r0, #0]
   1a98a:	6844      	ldr	r4, [r0, #4]
   1a98c:	fba2 5601 	umull	r5, r6, r2, r1
   1a990:	fb01 6604 	mla	r6, r1, r4, r6
		*fr &= 0x0FFFFFFFFFFFFFFFull;
   1a994:	f026 4370 	bic.w	r3, r6, #4026531840	; 0xf0000000
   1a998:	e9c0 5300 	strd	r5, r3, [r0]
		rval = ((*fr >> 60) & 0xF) + '0';
   1a99c:	0f31      	lsrs	r1, r6, #28
   1a99e:	3130      	adds	r1, #48	; 0x30
}
   1a9a0:	4608      	mov	r0, r1
   1a9a2:	bd70      	pop	{r4, r5, r6, pc}
		rval = '0';
   1a9a4:	2130      	movs	r1, #48	; 0x30
   1a9a6:	e7fb      	b.n	1a9a0 <_get_digit+0x26>

0001a9a8 <sprintf_out>:
	if (p->len > 1) { /* need to reserve a byte for EOS */
   1a9a8:	684b      	ldr	r3, [r1, #4]
   1a9aa:	2b01      	cmp	r3, #1
   1a9ac:	dd07      	ble.n	1a9be <sprintf_out+0x16>
		*(p->ptr) = c;
   1a9ae:	680b      	ldr	r3, [r1, #0]
   1a9b0:	7018      	strb	r0, [r3, #0]
		p->ptr += 1;
   1a9b2:	680b      	ldr	r3, [r1, #0]
   1a9b4:	3301      	adds	r3, #1
   1a9b6:	600b      	str	r3, [r1, #0]
		p->len -= 1;
   1a9b8:	684b      	ldr	r3, [r1, #4]
   1a9ba:	3b01      	subs	r3, #1
   1a9bc:	604b      	str	r3, [r1, #4]
}
   1a9be:	2000      	movs	r0, #0
   1a9c0:	4770      	bx	lr

0001a9c2 <fixed_data_unref>:

static void fixed_data_unref(struct net_buf *buf, u8_t *data)
{
	/* Nothing needed for fixed-size data pools */
}
   1a9c2:	4770      	bx	lr

0001a9c4 <net_init>:

	return status;
}

static int net_init(struct device *unused)
{
   1a9c4:	b508      	push	{r3, lr}
	net_if_init();
   1a9c6:	f7f4 fa87 	bl	eed8 <net_if_init>
	net_if_post_init();
   1a9ca:	f7f4 fa99 	bl	ef00 <net_if_post_init>
	dns_init_resolver();
   1a9ce:	f000 f84b 	bl	1aa68 <dns_init_resolver>
	net_mgmt_event_init();

	init_rx_queues();

	return services_init();
}
   1a9d2:	2000      	movs	r0, #0
   1a9d4:	bd08      	pop	{r3, pc}

0001a9d6 <net_if_l2>:
	if (!iface || !iface->if_dev) {
   1a9d6:	b110      	cbz	r0, 1a9de <net_if_l2+0x8>
   1a9d8:	6800      	ldr	r0, [r0, #0]
   1a9da:	b100      	cbz	r0, 1a9de <net_if_l2+0x8>
	return iface->if_dev->l2;
   1a9dc:	6840      	ldr	r0, [r0, #4]
}
   1a9de:	4770      	bx	lr

0001a9e0 <l2_flags_get>:
{
   1a9e0:	b510      	push	{r4, lr}
   1a9e2:	4602      	mov	r2, r0
	if (net_if_l2(iface) && net_if_l2(iface)->get_flags) {
   1a9e4:	f7ff fff7 	bl	1a9d6 <net_if_l2>
   1a9e8:	b128      	cbz	r0, 1a9f6 <l2_flags_get+0x16>
   1a9ea:	68c3      	ldr	r3, [r0, #12]
   1a9ec:	b11b      	cbz	r3, 1a9f6 <l2_flags_get+0x16>
}
   1a9ee:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		flags = net_if_l2(iface)->get_flags(iface);
   1a9f2:	4610      	mov	r0, r2
   1a9f4:	4718      	bx	r3
}
   1a9f6:	2000      	movs	r0, #0
   1a9f8:	bd10      	pop	{r4, pc}

0001a9fa <atomic_test_bit>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1a9fa:	e8d0 0faf 	lda	r0, [r0]
 */
static inline bool atomic_test_bit(const atomic_t *target, int bit)
{
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));

	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
   1a9fe:	4108      	asrs	r0, r1
}
   1aa00:	f000 0001 	and.w	r0, r0, #1
   1aa04:	4770      	bx	lr

0001aa06 <net_if_up>:
{
   1aa06:	b510      	push	{r4, lr}
   1aa08:	4604      	mov	r4, r0
	return atomic_test_bit(iface->if_dev->flags, value);
   1aa0a:	6800      	ldr	r0, [r0, #0]
   1aa0c:	2100      	movs	r1, #0
   1aa0e:	300c      	adds	r0, #12
   1aa10:	f7ff fff3 	bl	1a9fa <atomic_test_bit>
	if (net_if_flag_is_set(iface, NET_IF_UP)) {
   1aa14:	b9e8      	cbnz	r0, 1aa52 <net_if_up+0x4c>
	     net_if_is_socket_offloaded(iface))) {
   1aa16:	6823      	ldr	r3, [r4, #0]
	if ((IS_ENABLED(CONFIG_NET_OFFLOAD) &&
   1aa18:	7e9a      	ldrb	r2, [r3, #26]
   1aa1a:	b14a      	cbz	r2, 1aa30 <net_if_up+0x2a>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   1aa1c:	330c      	adds	r3, #12
   1aa1e:	e8d3 2fef 	ldaex	r2, [r3]
   1aa22:	f042 0201 	orr.w	r2, r2, #1
   1aa26:	e8c3 2fe1 	stlex	r1, r2, [r3]
   1aa2a:	2900      	cmp	r1, #0
   1aa2c:	d1f7      	bne.n	1aa1e <net_if_up+0x18>
}
   1aa2e:	bd10      	pop	{r4, pc}
	if (!net_if_l2(iface) || !net_if_l2(iface)->enable) {
   1aa30:	4620      	mov	r0, r4
   1aa32:	f7ff ffd0 	bl	1a9d6 <net_if_l2>
   1aa36:	b970      	cbnz	r0, 1aa56 <net_if_up+0x50>
   1aa38:	6823      	ldr	r3, [r4, #0]
   1aa3a:	330c      	adds	r3, #12
   1aa3c:	e8d3 2fef 	ldaex	r2, [r3]
   1aa40:	f042 0201 	orr.w	r2, r2, #1
   1aa44:	e8c3 2fe1 	stlex	r1, r2, [r3]
   1aa48:	2900      	cmp	r1, #0
   1aa4a:	d1f7      	bne.n	1aa3c <net_if_up+0x36>
	if (!(l2_flags_get(iface) & NET_L2_POINT_TO_POINT)) {
   1aa4c:	4620      	mov	r0, r4
   1aa4e:	f7ff ffc7 	bl	1a9e0 <l2_flags_get>
		return 0;
   1aa52:	2000      	movs	r0, #0
   1aa54:	e7eb      	b.n	1aa2e <net_if_up+0x28>
	if (!net_if_l2(iface) || !net_if_l2(iface)->enable) {
   1aa56:	6883      	ldr	r3, [r0, #8]
   1aa58:	2b00      	cmp	r3, #0
   1aa5a:	d0ed      	beq.n	1aa38 <net_if_up+0x32>
	status = net_if_l2(iface)->enable(iface, true);
   1aa5c:	2101      	movs	r1, #1
   1aa5e:	4620      	mov	r0, r4
   1aa60:	4798      	blx	r3
	if (status < 0) {
   1aa62:	2800      	cmp	r0, #0
   1aa64:	dae8      	bge.n	1aa38 <net_if_up+0x32>
   1aa66:	e7e2      	b.n	1aa2e <net_if_up+0x28>

0001aa68 <dns_init_resolver>:
	ret = dns_resolve_init(dns_resolve_get_default(), dns_servers, NULL);
	if (ret < 0) {
		NET_WARN("Cannot initialize DNS resolver (%d)", ret);
	}
#endif
}
   1aa68:	4770      	bx	lr

0001aa6a <gpio_nrfx_write>:
{
   1aa6a:	b510      	push	{r4, lr}
	return port->config->config_info;
   1aa6c:	6804      	ldr	r4, [r0, #0]
   1aa6e:	6880      	ldr	r0, [r0, #8]
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   1aa70:	6924      	ldr	r4, [r4, #16]
	if (access_op == GPIO_ACCESS_BY_PORT) {
   1aa72:	2901      	cmp	r1, #1
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   1aa74:	6824      	ldr	r4, [r4, #0]
	if (access_op == GPIO_ACCESS_BY_PORT) {
   1aa76:	69c0      	ldr	r0, [r0, #28]
   1aa78:	d103      	bne.n	1aa82 <gpio_nrfx_write+0x18>
		nrf_gpio_port_out_write(reg, value ^ data->inverted);
   1aa7a:	4058      	eors	r0, r3
    p_reg->OUT = value;
   1aa7c:	6060      	str	r0, [r4, #4]
}
   1aa7e:	2000      	movs	r0, #0
   1aa80:	bd10      	pop	{r4, pc}
		if ((value > 0) ^ ((BIT(pin) & data->inverted) != 0)) {
   1aa82:	3300      	adds	r3, #0
   1aa84:	f04f 0101 	mov.w	r1, #1
   1aa88:	bf18      	it	ne
   1aa8a:	2301      	movne	r3, #1
   1aa8c:	40d0      	lsrs	r0, r2
   1aa8e:	f000 0001 	and.w	r0, r0, #1
   1aa92:	4091      	lsls	r1, r2
   1aa94:	4283      	cmp	r3, r0
    p_reg->OUTSET = set_mask;
   1aa96:	bf14      	ite	ne
   1aa98:	60a1      	strne	r1, [r4, #8]
}


NRF_STATIC_INLINE void nrf_gpio_port_out_clear(NRF_GPIO_Type * p_reg, uint32_t clr_mask)
{
    p_reg->OUTCLR = clr_mask;
   1aa9a:	60e1      	streq	r1, [r4, #12]
   1aa9c:	e7ef      	b.n	1aa7e <gpio_nrfx_write+0x14>

0001aa9e <gpio_nrfx_read>:
{
   1aa9e:	b570      	push	{r4, r5, r6, lr}
	return port->config->config_info;
   1aaa0:	6804      	ldr	r4, [r0, #0]
	u32_t port_val = (port_in | port_out) ^ data->inverted;
   1aaa2:	6880      	ldr	r0, [r0, #8]
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   1aaa4:	6924      	ldr	r4, [r4, #16]
	u32_t port_val = (port_in | port_out) ^ data->inverted;
   1aaa6:	69c0      	ldr	r0, [r0, #28]
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   1aaa8:	6825      	ldr	r5, [r4, #0]
	if (access_op == GPIO_ACCESS_BY_PORT) {
   1aaaa:	2901      	cmp	r1, #1
    return p_reg->DIR;
   1aaac:	696e      	ldr	r6, [r5, #20]
    return p_reg->IN;
   1aaae:	692c      	ldr	r4, [r5, #16]
    return p_reg->OUT;
   1aab0:	686d      	ldr	r5, [r5, #4]
	u32_t port_val = (port_in | port_out) ^ data->inverted;
   1aab2:	ea80 0004 	eor.w	r0, r0, r4
   1aab6:	ea84 0405 	eor.w	r4, r4, r5
   1aaba:	ea04 0406 	and.w	r4, r4, r6
   1aabe:	ea80 0004 	eor.w	r0, r0, r4
		*value = (port_val & BIT(pin)) ? 1 : 0;
   1aac2:	bf1c      	itt	ne
   1aac4:	40d0      	lsrne	r0, r2
   1aac6:	f000 0001 	andne.w	r0, r0, #1
   1aaca:	6018      	str	r0, [r3, #0]
}
   1aacc:	2000      	movs	r0, #0
   1aace:	bd70      	pop	{r4, r5, r6, pc}

0001aad0 <gpio_nrfx_manage_callback>:
	return gpio_manage_callback(&get_port_data(port)->callbacks,
   1aad0:	6883      	ldr	r3, [r0, #8]
{
   1aad2:	b530      	push	{r4, r5, lr}
Z_GENLIST_IS_EMPTY(slist)
   1aad4:	6818      	ldr	r0, [r3, #0]
					bool set)
{
	__ASSERT(callback, "No callback!");
	__ASSERT(callback->handler, "No callback handler!");

	if (!sys_slist_is_empty(callbacks)) {
   1aad6:	b158      	cbz	r0, 1aaf0 <gpio_nrfx_manage_callback+0x20>
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   1aad8:	2400      	movs	r4, #0
   1aada:	4281      	cmp	r1, r0
   1aadc:	d113      	bne.n	1ab06 <gpio_nrfx_manage_callback+0x36>
Z_GENLIST_REMOVE(slist, snode)
   1aade:	6808      	ldr	r0, [r1, #0]
   1aae0:	b95c      	cbnz	r4, 1aafa <gpio_nrfx_manage_callback+0x2a>
   1aae2:	685c      	ldr	r4, [r3, #4]
	list->head = node;
   1aae4:	6018      	str	r0, [r3, #0]
Z_GENLIST_REMOVE(slist, snode)
   1aae6:	42a1      	cmp	r1, r4
   1aae8:	d100      	bne.n	1aaec <gpio_nrfx_manage_callback+0x1c>
	list->tail = node;
   1aaea:	6058      	str	r0, [r3, #4]
	parent->next = child;
   1aaec:	2000      	movs	r0, #0
   1aaee:	6008      	str	r0, [r1, #0]
				return -EINVAL;
			}
		}
	}

	if (set) {
   1aaf0:	b972      	cbnz	r2, 1ab10 <gpio_nrfx_manage_callback+0x40>
		sys_slist_prepend(callbacks, &callback->node);
	}

	return 0;
   1aaf2:	2000      	movs	r0, #0
}
   1aaf4:	bd30      	pop	{r4, r5, pc}
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   1aaf6:	4628      	mov	r0, r5
   1aaf8:	e7ef      	b.n	1aada <gpio_nrfx_manage_callback+0xa>
	parent->next = child;
   1aafa:	6020      	str	r0, [r4, #0]
Z_GENLIST_REMOVE(slist, snode)
   1aafc:	6858      	ldr	r0, [r3, #4]
   1aafe:	4281      	cmp	r1, r0
	list->tail = node;
   1ab00:	bf08      	it	eq
   1ab02:	605c      	streq	r4, [r3, #4]
   1ab04:	e7f2      	b.n	1aaec <gpio_nrfx_manage_callback+0x1c>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   1ab06:	6805      	ldr	r5, [r0, #0]
	return node->next;
   1ab08:	4604      	mov	r4, r0
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   1ab0a:	2d00      	cmp	r5, #0
   1ab0c:	d1f3      	bne.n	1aaf6 <gpio_nrfx_manage_callback+0x26>
			if (!set) {
   1ab0e:	b13a      	cbz	r2, 1ab20 <gpio_nrfx_manage_callback+0x50>
Z_GENLIST_PREPEND(slist, snode)
   1ab10:	681a      	ldr	r2, [r3, #0]
	parent->next = child;
   1ab12:	600a      	str	r2, [r1, #0]
Z_GENLIST_PREPEND(slist, snode)
   1ab14:	6858      	ldr	r0, [r3, #4]
	list->head = node;
   1ab16:	6019      	str	r1, [r3, #0]
Z_GENLIST_PREPEND(slist, snode)
   1ab18:	2800      	cmp	r0, #0
   1ab1a:	d1ea      	bne.n	1aaf2 <gpio_nrfx_manage_callback+0x22>
	list->tail = node;
   1ab1c:	6059      	str	r1, [r3, #4]
   1ab1e:	e7e9      	b.n	1aaf4 <gpio_nrfx_manage_callback+0x24>
				return -EINVAL;
   1ab20:	f06f 0015 	mvn.w	r0, #21
	return gpio_manage_callback(&get_port_data(port)->callbacks,
   1ab24:	e7e6      	b.n	1aaf4 <gpio_nrfx_manage_callback+0x24>

0001ab26 <gpio_nrfx_pin_disable_callback>:
	if (access_op == GPIO_ACCESS_BY_PORT) {
   1ab26:	2901      	cmp	r1, #1
{
   1ab28:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
		from_pin = pin;
   1ab2c:	bf18      	it	ne
   1ab2e:	b2d4      	uxtbne	r4, r2
{
   1ab30:	4606      	mov	r6, r0
		to_pin   = pin;
   1ab32:	bf12      	itee	ne
   1ab34:	4625      	movne	r5, r4
		to_pin   = 31U;
   1ab36:	251f      	moveq	r5, #31
		from_pin = 0U;
   1ab38:	2400      	moveq	r4, #0
		WRITE_BIT(data->int_en, curr_pin, enable);
   1ab3a:	f04f 0801 	mov.w	r8, #1
	struct gpio_nrfx_data *data = get_port_data(port);
   1ab3e:	6887      	ldr	r7, [r0, #8]
	for (u8_t curr_pin = from_pin; curr_pin <= to_pin; ++curr_pin) {
   1ab40:	42ac      	cmp	r4, r5
   1ab42:	d902      	bls.n	1ab4a <gpio_nrfx_pin_disable_callback+0x24>
	return res;
   1ab44:	2000      	movs	r0, #0
}
   1ab46:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		WRITE_BIT(data->int_en, curr_pin, enable);
   1ab4a:	68fb      	ldr	r3, [r7, #12]
   1ab4c:	fa08 f204 	lsl.w	r2, r8, r4
   1ab50:	ea23 0302 	bic.w	r3, r3, r2
   1ab54:	60fb      	str	r3, [r7, #12]
		res = gpiote_pin_int_cfg(port, curr_pin);
   1ab56:	4621      	mov	r1, r4
   1ab58:	4630      	mov	r0, r6
   1ab5a:	f7f4 f9ff 	bl	ef5c <gpiote_pin_int_cfg>
		if (res != 0) {
   1ab5e:	2800      	cmp	r0, #0
   1ab60:	d1f1      	bne.n	1ab46 <gpio_nrfx_pin_disable_callback+0x20>
	for (u8_t curr_pin = from_pin; curr_pin <= to_pin; ++curr_pin) {
   1ab62:	3401      	adds	r4, #1
   1ab64:	b2e4      	uxtb	r4, r4
   1ab66:	e7eb      	b.n	1ab40 <gpio_nrfx_pin_disable_callback+0x1a>

0001ab68 <gpio_nrfx_pin_enable_callback>:
	if (access_op == GPIO_ACCESS_BY_PORT) {
   1ab68:	2901      	cmp	r1, #1
{
   1ab6a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
		from_pin = pin;
   1ab6e:	bf18      	it	ne
   1ab70:	b2d4      	uxtbne	r4, r2
{
   1ab72:	4606      	mov	r6, r0
		to_pin   = pin;
   1ab74:	bf12      	itee	ne
   1ab76:	4625      	movne	r5, r4
		to_pin   = 31U;
   1ab78:	251f      	moveq	r5, #31
		from_pin = 0U;
   1ab7a:	2400      	moveq	r4, #0
		WRITE_BIT(data->int_en, curr_pin, enable);
   1ab7c:	f04f 0801 	mov.w	r8, #1
	struct gpio_nrfx_data *data = get_port_data(port);
   1ab80:	6887      	ldr	r7, [r0, #8]
	for (u8_t curr_pin = from_pin; curr_pin <= to_pin; ++curr_pin) {
   1ab82:	42ac      	cmp	r4, r5
   1ab84:	d902      	bls.n	1ab8c <gpio_nrfx_pin_enable_callback+0x24>
	return res;
   1ab86:	2000      	movs	r0, #0
}
   1ab88:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		WRITE_BIT(data->int_en, curr_pin, enable);
   1ab8c:	68fb      	ldr	r3, [r7, #12]
   1ab8e:	fa08 f204 	lsl.w	r2, r8, r4
   1ab92:	4313      	orrs	r3, r2
   1ab94:	60fb      	str	r3, [r7, #12]
		res = gpiote_pin_int_cfg(port, curr_pin);
   1ab96:	4621      	mov	r1, r4
   1ab98:	4630      	mov	r0, r6
   1ab9a:	f7f4 f9df 	bl	ef5c <gpiote_pin_int_cfg>
		if (res != 0) {
   1ab9e:	2800      	cmp	r0, #0
   1aba0:	d1f2      	bne.n	1ab88 <gpio_nrfx_pin_enable_callback+0x20>
	for (u8_t curr_pin = from_pin; curr_pin <= to_pin; ++curr_pin) {
   1aba2:	3401      	adds	r4, #1
   1aba4:	b2e4      	uxtb	r4, r4
   1aba6:	e7ec      	b.n	1ab82 <gpio_nrfx_pin_enable_callback+0x1a>

0001aba8 <uarte_nrfx_isr_int>:
	if (data->int_driven->disable_tx_irq &&
   1aba8:	6882      	ldr	r2, [r0, #8]
	return dev->config->config_info;
   1abaa:	6803      	ldr	r3, [r0, #0]
	if (data->int_driven->disable_tx_irq &&
   1abac:	6892      	ldr	r2, [r2, #8]
	return config->uarte_regs;
   1abae:	691b      	ldr	r3, [r3, #16]
	if (data->int_driven->disable_tx_irq &&
   1abb0:	7b91      	ldrb	r1, [r2, #14]
	return config->uarte_regs;
   1abb2:	681b      	ldr	r3, [r3, #0]
	if (data->int_driven->disable_tx_irq &&
   1abb4:	b159      	cbz	r1, 1abce <uarte_nrfx_isr_int+0x26>
   1abb6:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
   1abba:	b141      	cbz	r1, 1abce <uarte_nrfx_isr_int+0x26>
    p_reg->INTENCLR = mask;
   1abbc:	f44f 7180 	mov.w	r1, #256	; 0x100
   1abc0:	f8c3 1308 	str.w	r1, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1abc4:	2101      	movs	r1, #1
   1abc6:	60d9      	str	r1, [r3, #12]
		data->int_driven->disable_tx_irq = false;
   1abc8:	2300      	movs	r3, #0
   1abca:	7393      	strb	r3, [r2, #14]
		return;
   1abcc:	4770      	bx	lr
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1abce:	f8d3 1124 	ldr.w	r1, [r3, #292]	; 0x124
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ERROR)) {
   1abd2:	b111      	cbz	r1, 1abda <uarte_nrfx_isr_int+0x32>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1abd4:	2100      	movs	r1, #0
   1abd6:	f8c3 1124 	str.w	r1, [r3, #292]	; 0x124
	if (data->int_driven->cb) {
   1abda:	6813      	ldr	r3, [r2, #0]
   1abdc:	b10b      	cbz	r3, 1abe2 <uarte_nrfx_isr_int+0x3a>
		data->int_driven->cb(data->int_driven->cb_data);
   1abde:	6850      	ldr	r0, [r2, #4]
   1abe0:	4718      	bx	r3
}
   1abe2:	4770      	bx	lr

0001abe4 <uarte_nrfx_config_get>:
{
   1abe4:	460b      	mov	r3, r1
	*cfg = get_dev_data(dev)->uart_config;
   1abe6:	6882      	ldr	r2, [r0, #8]
   1abe8:	e892 0003 	ldmia.w	r2, {r0, r1}
   1abec:	e883 0003 	stmia.w	r3, {r0, r1}
}
   1abf0:	2000      	movs	r0, #0
   1abf2:	4770      	bx	lr

0001abf4 <uarte_nrfx_err_check>:
	return dev->config->config_info;
   1abf4:	6803      	ldr	r3, [r0, #0]
	return config->uarte_regs;
   1abf6:	691b      	ldr	r3, [r3, #16]
   1abf8:	681b      	ldr	r3, [r3, #0]
    uint32_t errsrc_mask = p_reg->ERRORSRC;
   1abfa:	f8d3 0480 	ldr.w	r0, [r3, #1152]	; 0x480
    p_reg->ERRORSRC = errsrc_mask;
   1abfe:	f8c3 0480 	str.w	r0, [r3, #1152]	; 0x480
}
   1ac02:	4770      	bx	lr

0001ac04 <uarte_nrfx_poll_in>:
	return dev->config->config_info;
   1ac04:	6803      	ldr	r3, [r0, #0]
	const struct uarte_nrfx_data *data = get_dev_data(dev);
   1ac06:	6882      	ldr	r2, [r0, #8]
	return config->uarte_regs;
   1ac08:	691b      	ldr	r3, [r3, #16]
   1ac0a:	681b      	ldr	r3, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1ac0c:	f8d3 0110 	ldr.w	r0, [r3, #272]	; 0x110
	if (!nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
   1ac10:	b138      	cbz	r0, 1ac22 <uarte_nrfx_poll_in+0x1e>
	*c = data->rx_data;
   1ac12:	7c12      	ldrb	r2, [r2, #16]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1ac14:	2000      	movs	r0, #0
   1ac16:	700a      	strb	r2, [r1, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1ac18:	2201      	movs	r2, #1
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1ac1a:	f8c3 0110 	str.w	r0, [r3, #272]	; 0x110
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1ac1e:	601a      	str	r2, [r3, #0]
	return 0;
   1ac20:	4770      	bx	lr
		return -1;
   1ac22:	f04f 30ff 	mov.w	r0, #4294967295
}
   1ac26:	4770      	bx	lr

0001ac28 <uarte_nrfx_poll_out>:
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1ac28:	2200      	movs	r2, #0
	return dev->config->config_info;
   1ac2a:	6803      	ldr	r3, [r0, #0]
{
   1ac2c:	b082      	sub	sp, #8
	return config->uarte_regs;
   1ac2e:	691b      	ldr	r3, [r3, #16]
{
   1ac30:	f88d 1007 	strb.w	r1, [sp, #7]
	return config->uarte_regs;
   1ac34:	681b      	ldr	r3, [r3, #0]
   1ac36:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   1ac3a:	f10d 0207 	add.w	r2, sp, #7
   1ac3e:	f8c3 2544 	str.w	r2, [r3, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
   1ac42:	2201      	movs	r2, #1
   1ac44:	f8c3 2548 	str.w	r2, [r3, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1ac48:	609a      	str	r2, [r3, #8]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1ac4a:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
	while (!nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDTX)) {
   1ac4e:	2900      	cmp	r1, #0
   1ac50:	d0fb      	beq.n	1ac4a <uarte_nrfx_poll_out+0x22>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1ac52:	60da      	str	r2, [r3, #12]
}
   1ac54:	b002      	add	sp, #8
   1ac56:	4770      	bx	lr

0001ac58 <uarte_nrfx_fifo_fill>:
	return dev->config->config_info;
   1ac58:	6803      	ldr	r3, [r0, #0]
{
   1ac5a:	b570      	push	{r4, r5, r6, lr}
	return config->uarte_regs;
   1ac5c:	691b      	ldr	r3, [r3, #16]
   1ac5e:	681c      	ldr	r4, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1ac60:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
	if (!nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDTX)) {
   1ac64:	b1bb      	cbz	r3, 1ac96 <uarte_nrfx_fifo_fill+0x3e>
	struct uarte_nrfx_data *data = get_dev_data(dev);
   1ac66:	6885      	ldr	r5, [r0, #8]
	if (len > data->int_driven->tx_buff_size) {
   1ac68:	68ab      	ldr	r3, [r5, #8]
   1ac6a:	8998      	ldrh	r0, [r3, #12]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1ac6c:	2300      	movs	r3, #0
   1ac6e:	4290      	cmp	r0, r2
   1ac70:	bfa8      	it	ge
   1ac72:	4610      	movge	r0, r2
   1ac74:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
	for (int i = 0; i < len; i++) {
   1ac78:	68aa      	ldr	r2, [r5, #8]
   1ac7a:	4283      	cmp	r3, r0
   1ac7c:	6892      	ldr	r2, [r2, #8]
   1ac7e:	db06      	blt.n	1ac8e <uarte_nrfx_fifo_fill+0x36>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1ac80:	2301      	movs	r3, #1
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   1ac82:	f8c4 2544 	str.w	r2, [r4, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
   1ac86:	f8c4 0548 	str.w	r0, [r4, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1ac8a:	60a3      	str	r3, [r4, #8]
}
   1ac8c:	bd70      	pop	{r4, r5, r6, pc}
		data->int_driven->tx_buffer[i] = tx_data[i];
   1ac8e:	5cce      	ldrb	r6, [r1, r3]
   1ac90:	54d6      	strb	r6, [r2, r3]
	for (int i = 0; i < len; i++) {
   1ac92:	3301      	adds	r3, #1
   1ac94:	e7f0      	b.n	1ac78 <uarte_nrfx_fifo_fill+0x20>
		return 0;
   1ac96:	4618      	mov	r0, r3
   1ac98:	e7f8      	b.n	1ac8c <uarte_nrfx_fifo_fill+0x34>

0001ac9a <uarte_nrfx_fifo_read>:
	return dev->config->config_info;
   1ac9a:	6803      	ldr	r3, [r0, #0]
	return config->uarte_regs;
   1ac9c:	691b      	ldr	r3, [r3, #16]
   1ac9e:	681a      	ldr	r2, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1aca0:	f8d2 3110 	ldr.w	r3, [r2, #272]	; 0x110
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
   1aca4:	b143      	cbz	r3, 1acb8 <uarte_nrfx_fifo_read+0x1e>
	const struct uarte_nrfx_data *data = get_dev_data(dev);
   1aca6:	6883      	ldr	r3, [r0, #8]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1aca8:	2000      	movs	r0, #0
   1acaa:	f8c2 0110 	str.w	r0, [r2, #272]	; 0x110
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1acae:	2001      	movs	r0, #1
		rx_data[num_rx++] = (u8_t)data->rx_data;
   1acb0:	7c1b      	ldrb	r3, [r3, #16]
   1acb2:	700b      	strb	r3, [r1, #0]
   1acb4:	6010      	str	r0, [r2, #0]
   1acb6:	4770      	bx	lr
	int num_rx = 0;
   1acb8:	4618      	mov	r0, r3
}
   1acba:	4770      	bx	lr

0001acbc <uarte_nrfx_irq_tx_enable>:
	data->int_driven->disable_tx_irq = false;
   1acbc:	2100      	movs	r1, #0
	return dev->config->config_info;
   1acbe:	6803      	ldr	r3, [r0, #0]
	data->int_driven->disable_tx_irq = false;
   1acc0:	6882      	ldr	r2, [r0, #8]
	return config->uarte_regs;
   1acc2:	691b      	ldr	r3, [r3, #16]
	data->int_driven->disable_tx_irq = false;
   1acc4:	6892      	ldr	r2, [r2, #8]
	return config->uarte_regs;
   1acc6:	681b      	ldr	r3, [r3, #0]
	data->int_driven->disable_tx_irq = false;
   1acc8:	7391      	strb	r1, [r2, #14]
    p_reg->INTENSET = mask;
   1acca:	f44f 7280 	mov.w	r2, #256	; 0x100
   1acce:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
   1acd2:	4770      	bx	lr

0001acd4 <uarte_nrfx_irq_tx_disable>:
	data->int_driven->disable_tx_irq = true;
   1acd4:	2201      	movs	r2, #1
   1acd6:	6883      	ldr	r3, [r0, #8]
   1acd8:	689b      	ldr	r3, [r3, #8]
   1acda:	739a      	strb	r2, [r3, #14]
}
   1acdc:	4770      	bx	lr

0001acde <uarte_nrfx_irq_tx_ready_complete>:
	return dev->config->config_info;
   1acde:	6803      	ldr	r3, [r0, #0]
	return config->uarte_regs;
   1ace0:	691b      	ldr	r3, [r3, #16]
   1ace2:	681b      	ldr	r3, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1ace4:	f8d3 0120 	ldr.w	r0, [r3, #288]	; 0x120
	return nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDTX) &&
   1ace8:	b118      	cbz	r0, 1acf2 <uarte_nrfx_irq_tx_ready_complete+0x14>
    return p_reg->INTENSET & mask;
   1acea:	f8d3 0304 	ldr.w	r0, [r3, #772]	; 0x304
   1acee:	f3c0 2000 	ubfx	r0, r0, #8, #1
}
   1acf2:	4770      	bx	lr

0001acf4 <uarte_nrfx_irq_rx_ready>:
	return dev->config->config_info;
   1acf4:	6803      	ldr	r3, [r0, #0]
	return config->uarte_regs;
   1acf6:	691b      	ldr	r3, [r3, #16]
   1acf8:	681b      	ldr	r3, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1acfa:	f8d3 0110 	ldr.w	r0, [r3, #272]	; 0x110
}
   1acfe:	3000      	adds	r0, #0
   1ad00:	bf18      	it	ne
   1ad02:	2001      	movne	r0, #1
   1ad04:	4770      	bx	lr

0001ad06 <uarte_nrfx_irq_rx_enable>:
    p_reg->INTENSET = mask;
   1ad06:	2210      	movs	r2, #16
	return dev->config->config_info;
   1ad08:	6803      	ldr	r3, [r0, #0]
	return config->uarte_regs;
   1ad0a:	691b      	ldr	r3, [r3, #16]
   1ad0c:	681b      	ldr	r3, [r3, #0]
   1ad0e:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
   1ad12:	4770      	bx	lr

0001ad14 <uarte_nrfx_irq_rx_disable>:
    p_reg->INTENCLR = mask;
   1ad14:	2210      	movs	r2, #16
	return dev->config->config_info;
   1ad16:	6803      	ldr	r3, [r0, #0]
	return config->uarte_regs;
   1ad18:	691b      	ldr	r3, [r3, #16]
   1ad1a:	681b      	ldr	r3, [r3, #0]
   1ad1c:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
}
   1ad20:	4770      	bx	lr

0001ad22 <uarte_nrfx_irq_err_enable>:
    p_reg->INTENSET = mask;
   1ad22:	f44f 7200 	mov.w	r2, #512	; 0x200
	return dev->config->config_info;
   1ad26:	6803      	ldr	r3, [r0, #0]
	return config->uarte_regs;
   1ad28:	691b      	ldr	r3, [r3, #16]
   1ad2a:	681b      	ldr	r3, [r3, #0]
   1ad2c:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
   1ad30:	4770      	bx	lr

0001ad32 <uarte_nrfx_irq_err_disable>:
    p_reg->INTENCLR = mask;
   1ad32:	f44f 7200 	mov.w	r2, #512	; 0x200
	return dev->config->config_info;
   1ad36:	6803      	ldr	r3, [r0, #0]
	return config->uarte_regs;
   1ad38:	691b      	ldr	r3, [r3, #16]
   1ad3a:	681b      	ldr	r3, [r3, #0]
   1ad3c:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
}
   1ad40:	4770      	bx	lr

0001ad42 <uarte_nrfx_irq_update>:
}
   1ad42:	2001      	movs	r0, #1
   1ad44:	4770      	bx	lr

0001ad46 <uarte_nrfx_irq_callback_set>:
	data->int_driven->cb = cb;
   1ad46:	6883      	ldr	r3, [r0, #8]
   1ad48:	689b      	ldr	r3, [r3, #8]
	data->int_driven->cb_data = cb_data;
   1ad4a:	e9c3 1200 	strd	r1, r2, [r3]
}
   1ad4e:	4770      	bx	lr

0001ad50 <uarte_nrfx_irq_is_pending>:
{
   1ad50:	b508      	push	{r3, lr}
	return dev->config->config_info;
   1ad52:	6803      	ldr	r3, [r0, #0]
{
   1ad54:	4602      	mov	r2, r0
	return config->uarte_regs;
   1ad56:	691b      	ldr	r3, [r3, #16]
   1ad58:	6819      	ldr	r1, [r3, #0]
    return p_reg->INTENSET & mask;
   1ad5a:	f8d1 3304 	ldr.w	r3, [r1, #772]	; 0x304
		||
   1ad5e:	05db      	lsls	r3, r3, #23
   1ad60:	d405      	bmi.n	1ad6e <uarte_nrfx_irq_is_pending+0x1e>
   1ad62:	f8d1 0304 	ldr.w	r0, [r1, #772]	; 0x304
   1ad66:	f010 0010 	ands.w	r0, r0, #16
   1ad6a:	d106      	bne.n	1ad7a <uarte_nrfx_irq_is_pending+0x2a>
}
   1ad6c:	bd08      	pop	{r3, pc}
		 uarte_nrfx_irq_tx_ready_complete(dev))
   1ad6e:	f7ff ffb6 	bl	1acde <uarte_nrfx_irq_tx_ready_complete>
					    NRF_UARTE_INT_ENDTX_MASK) &&
   1ad72:	2800      	cmp	r0, #0
   1ad74:	d0f5      	beq.n	1ad62 <uarte_nrfx_irq_is_pending+0x12>
		||
   1ad76:	2001      	movs	r0, #1
   1ad78:	e7f8      	b.n	1ad6c <uarte_nrfx_irq_is_pending+0x1c>
		 uarte_nrfx_irq_rx_ready(dev)));
   1ad7a:	4610      	mov	r0, r2
   1ad7c:	f7ff ffba 	bl	1acf4 <uarte_nrfx_irq_rx_ready>
					    NRF_UARTE_INT_ENDRX_MASK) &&
   1ad80:	3000      	adds	r0, #0
   1ad82:	bf18      	it	ne
   1ad84:	2001      	movne	r0, #1
   1ad86:	e7f1      	b.n	1ad6c <uarte_nrfx_irq_is_pending+0x1c>

0001ad88 <entropy_cc310_rng_init>:
{
	/* No initialization is required */
	(void)dev;

	return 0;
}
   1ad88:	2000      	movs	r0, #0
   1ad8a:	4770      	bx	lr

0001ad8c <entropy_cc310_rng_get_entropy>:
{
   1ad8c:	b513      	push	{r0, r1, r4, lr}
   1ad8e:	4614      	mov	r4, r2
   1ad90:	4608      	mov	r0, r1
	res = spm_request_random_number(buffer, length, &olen);
   1ad92:	aa01      	add	r2, sp, #4
   1ad94:	4621      	mov	r1, r4
   1ad96:	f7ed f92b 	bl	7ff0 <spm_request_random_number>
	if (olen != length) {
   1ad9a:	9b01      	ldr	r3, [sp, #4]
   1ad9c:	429c      	cmp	r4, r3
}
   1ad9e:	bf18      	it	ne
   1ada0:	f06f 0015 	mvnne.w	r0, #21
   1ada4:	b002      	add	sp, #8
   1ada6:	bd10      	pop	{r4, pc}

0001ada8 <z_errno>:
   1ada8:	f7fd bb36 	b.w	18418 <z_impl_z_errno>

0001adac <trace_proxy_irq_handler>:
ISR_DIRECT_DECLARE(trace_proxy_irq_handler)
   1adac:	4668      	mov	r0, sp
   1adae:	f020 0107 	bic.w	r1, r0, #7
   1adb2:	468d      	mov	sp, r1
   1adb4:	b501      	push	{r0, lr}
	bsd_os_trace_irq_handler();
   1adb6:	f7f7 fa87 	bl	122c8 <bsd_os_trace_irq_handler>
	ISR_DIRECT_PM(); /* PM done after servicing interrupt for best latency
   1adba:	f7f2 fd8b 	bl	d8d4 <_arch_isr_direct_pm>
   1adbe:	f7f2 fc97 	bl	d6f0 <z_arm_exc_exit>
ISR_DIRECT_DECLARE(trace_proxy_irq_handler)
   1adc2:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
   1adc6:	4685      	mov	sp, r0
   1adc8:	4770      	bx	lr

0001adca <ipc_proxy_irq_handler>:
ISR_DIRECT_DECLARE(ipc_proxy_irq_handler)
   1adca:	4668      	mov	r0, sp
   1adcc:	f020 0107 	bic.w	r1, r0, #7
   1add0:	468d      	mov	sp, r1
   1add2:	b501      	push	{r0, lr}
	IPC_IRQHandler();
   1add4:	f7f7 fe70 	bl	12ab8 <IPC_IRQHandler>
	ISR_DIRECT_PM(); /* PM done after servicing interrupt for best latency
   1add8:	f7f2 fd7c 	bl	d8d4 <_arch_isr_direct_pm>
   1addc:	f7f2 fc88 	bl	d6f0 <z_arm_exc_exit>
ISR_DIRECT_DECLARE(ipc_proxy_irq_handler)
   1ade0:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
   1ade4:	4685      	mov	sp, r0
   1ade6:	4770      	bx	lr

0001ade8 <trace_task_create>:
{
   1ade8:	b508      	push	{r3, lr}
	IRQ_DIRECT_CONNECT(TRACE_IRQ, TRACE_IRQ_PRIORITY,
   1adea:	201d      	movs	r0, #29
   1adec:	2200      	movs	r2, #0
   1adee:	2106      	movs	r1, #6
   1adf0:	f7f2 fd58 	bl	d8a4 <z_arm_irq_priority_set>
}
   1adf4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	irq_enable(TRACE_IRQ);
   1adf8:	201d      	movs	r0, #29
   1adfa:	f7f2 bd43 	b.w	d884 <arch_irq_enable>

0001adfe <read_task_create>:
{
   1adfe:	b508      	push	{r3, lr}
	IRQ_DIRECT_CONNECT(BSD_APPLICATION_IRQ, BSD_APPLICATION_IRQ_PRIORITY,
   1ae00:	201c      	movs	r0, #28
   1ae02:	2200      	movs	r2, #0
   1ae04:	2106      	movs	r1, #6
   1ae06:	f7f2 fd4d 	bl	d8a4 <z_arm_irq_priority_set>
}
   1ae0a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	irq_enable(BSD_APPLICATION_IRQ);
   1ae0e:	201c      	movs	r0, #28
   1ae10:	f7f2 bd38 	b.w	d884 <arch_irq_enable>

0001ae14 <z_to_nrf_flags>:
		nrf_flags |= NRF_MSG_DONTWAIT;
   1ae14:	f010 0340 	ands.w	r3, r0, #64	; 0x40
   1ae18:	bf18      	it	ne
   1ae1a:	2302      	movne	r3, #2
	if (z_flags & MSG_PEEK) {
   1ae1c:	0782      	lsls	r2, r0, #30
		nrf_flags |= NRF_MSG_PEEK;
   1ae1e:	bf48      	it	mi
   1ae20:	f043 0308 	orrmi.w	r3, r3, #8
}
   1ae24:	4618      	mov	r0, r3
   1ae26:	4770      	bx	lr

0001ae28 <z_to_nrf_family>:
	switch (z_family) {
   1ae28:	2803      	cmp	r0, #3
   1ae2a:	d00f      	beq.n	1ae4c <z_to_nrf_family+0x24>
   1ae2c:	d808      	bhi.n	1ae40 <z_to_nrf_family+0x18>
   1ae2e:	2801      	cmp	r0, #1
   1ae30:	d00e      	beq.n	1ae50 <z_to_nrf_family+0x28>
   1ae32:	2802      	cmp	r0, #2
		return -EAFNOSUPPORT;
   1ae34:	bf08      	it	eq
   1ae36:	200a      	moveq	r0, #10
   1ae38:	bf18      	it	ne
   1ae3a:	f06f 002e 	mvnne.w	r0, #46	; 0x2e
   1ae3e:	4770      	bx	lr
	switch (z_family) {
   1ae40:	2866      	cmp	r0, #102	; 0x66
   1ae42:	d006      	beq.n	1ae52 <z_to_nrf_family+0x2a>
   1ae44:	2867      	cmp	r0, #103	; 0x67
		return -EAFNOSUPPORT;
   1ae46:	bf08      	it	eq
   1ae48:	2001      	moveq	r0, #1
   1ae4a:	e7f5      	b.n	1ae38 <z_to_nrf_family+0x10>
		return NRF_AF_PACKET;
   1ae4c:	2005      	movs	r0, #5
   1ae4e:	4770      	bx	lr
		return NRF_AF_INET;
   1ae50:	2002      	movs	r0, #2
}
   1ae52:	4770      	bx	lr

0001ae54 <z_to_nrf_protocol>:
	switch (proto) {
   1ae54:	f5b0 7f81 	cmp.w	r0, #258	; 0x102
   1ae58:	d01d      	beq.n	1ae96 <z_to_nrf_protocol+0x42>
   1ae5a:	dc08      	bgt.n	1ae6e <z_to_nrf_protocol+0x1a>
   1ae5c:	2806      	cmp	r0, #6
   1ae5e:	d01d      	beq.n	1ae9c <z_to_nrf_protocol+0x48>
   1ae60:	2811      	cmp	r0, #17
   1ae62:	d01d      	beq.n	1aea0 <z_to_nrf_protocol+0x4c>
   1ae64:	2800      	cmp	r0, #0
		return -EPROTONOSUPPORT;
   1ae66:	bf18      	it	ne
   1ae68:	f06f 002a 	mvnne.w	r0, #42	; 0x2a
   1ae6c:	4770      	bx	lr
	switch (proto) {
   1ae6e:	f240 2301 	movw	r3, #513	; 0x201
   1ae72:	4298      	cmp	r0, r3
   1ae74:	d015      	beq.n	1aea2 <z_to_nrf_protocol+0x4e>
   1ae76:	dc06      	bgt.n	1ae86 <z_to_nrf_protocol+0x32>
   1ae78:	f240 1311 	movw	r3, #273	; 0x111
   1ae7c:	4298      	cmp	r0, r3
		return -EPROTONOSUPPORT;
   1ae7e:	bf08      	it	eq
   1ae80:	f44f 7087 	moveq.w	r0, #270	; 0x10e
   1ae84:	e7ef      	b.n	1ae66 <z_to_nrf_protocol+0x12>
	switch (proto) {
   1ae86:	f240 2302 	movw	r3, #514	; 0x202
   1ae8a:	4298      	cmp	r0, r3
   1ae8c:	d009      	beq.n	1aea2 <z_to_nrf_protocol+0x4e>
   1ae8e:	f240 2303 	movw	r3, #515	; 0x203
   1ae92:	4298      	cmp	r0, r3
   1ae94:	e7e7      	b.n	1ae66 <z_to_nrf_protocol+0x12>
		return NRF_SPROTO_TLS1v2;
   1ae96:	f44f 7082 	mov.w	r0, #260	; 0x104
   1ae9a:	4770      	bx	lr
		return NRF_IPPROTO_TCP;
   1ae9c:	2001      	movs	r0, #1
   1ae9e:	4770      	bx	lr
		return NRF_IPPROTO_UDP;
   1aea0:	2002      	movs	r0, #2
}
   1aea2:	4770      	bx	lr

0001aea4 <nrf91_bsdlib_socket_offload_init>:
}
   1aea4:	2000      	movs	r0, #0
   1aea6:	4770      	bx	lr

0001aea8 <z_errno>:
   1aea8:	f7fd bab6 	b.w	18418 <z_impl_z_errno>

0001aeac <nrf91_socket_offload_freeaddrinfo>:
{
   1aeac:	b538      	push	{r3, r4, r5, lr}
   1aeae:	4604      	mov	r4, r0
	while (next != NULL) {
   1aeb0:	b904      	cbnz	r4, 1aeb4 <nrf91_socket_offload_freeaddrinfo+0x8>
}
   1aeb2:	bd38      	pop	{r3, r4, r5, pc}
		k_free(this->ai_addr);
   1aeb4:	6960      	ldr	r0, [r4, #20]
		next = next->ai_next;
   1aeb6:	69e5      	ldr	r5, [r4, #28]
		k_free(this->ai_addr);
   1aeb8:	f000 fbd3 	bl	1b662 <k_free>
		k_free(this);
   1aebc:	4620      	mov	r0, r4
   1aebe:	f000 fbd0 	bl	1b662 <k_free>
		next = next->ai_next;
   1aec2:	462c      	mov	r4, r5
   1aec4:	e7f4      	b.n	1aeb0 <nrf91_socket_offload_freeaddrinfo+0x4>

0001aec6 <z_to_nrf_addrinfo_hints>:
{
   1aec6:	b538      	push	{r3, r4, r5, lr}
   1aec8:	460c      	mov	r4, r1
   1aeca:	4605      	mov	r5, r0
	memset(nrf_out, 0, sizeof(struct nrf_addrinfo));
   1aecc:	2220      	movs	r2, #32
   1aece:	2100      	movs	r1, #0
   1aed0:	4620      	mov	r0, r4
   1aed2:	f7ff fcd2 	bl	1a87a <memset>
	nrf_out->ai_flags = z_to_nrf_addrinfo_flags(z_in->ai_flags);
   1aed6:	2300      	movs	r3, #0
   1aed8:	6023      	str	r3, [r4, #0]
	nrf_out->ai_socktype = z_to_nrf_socktype(z_in->ai_socktype);
   1aeda:	68ab      	ldr	r3, [r5, #8]
	switch (socktype) {
   1aedc:	2b03      	cmp	r3, #3
   1aede:	d003      	beq.n	1aee8 <z_to_nrf_addrinfo_hints+0x22>
		return NRF_SOCK_MGMT;
   1aee0:	2b04      	cmp	r3, #4
   1aee2:	bf08      	it	eq
   1aee4:	f44f 7300 	moveq.w	r3, #512	; 0x200
	nrf_out->ai_socktype = z_to_nrf_socktype(z_in->ai_socktype);
   1aee8:	60a3      	str	r3, [r4, #8]
	family = z_to_nrf_family(z_in->ai_family);
   1aeea:	88a8      	ldrh	r0, [r5, #4]
   1aeec:	f7ff ff9c 	bl	1ae28 <z_to_nrf_family>
	if (family == -EAFNOSUPPORT) {
   1aef0:	f110 0f2f 	cmn.w	r0, #47	; 0x2f
   1aef4:	d00b      	beq.n	1af0e <z_to_nrf_addrinfo_hints+0x48>
	nrf_out->ai_family = family;
   1aef6:	6060      	str	r0, [r4, #4]
	nrf_out->ai_protocol = z_to_nrf_protocol(z_in->ai_protocol);
   1aef8:	68e8      	ldr	r0, [r5, #12]
   1aefa:	f7ff ffab 	bl	1ae54 <z_to_nrf_protocol>
	if (nrf_out->ai_protocol == -EPROTONOSUPPORT) {
   1aefe:	f110 0f2b 	cmn.w	r0, #43	; 0x2b
	nrf_out->ai_protocol = z_to_nrf_protocol(z_in->ai_protocol);
   1af02:	60e0      	str	r0, [r4, #12]
	if (nrf_out->ai_protocol == -EPROTONOSUPPORT) {
   1af04:	d003      	beq.n	1af0e <z_to_nrf_addrinfo_hints+0x48>
	if (z_in->ai_canonname != NULL) {
   1af06:	69a8      	ldr	r0, [r5, #24]
   1af08:	b108      	cbz	r0, 1af0e <z_to_nrf_addrinfo_hints+0x48>
		nrf_out->ai_canonname = z_in->ai_canonname;
   1af0a:	61a0      	str	r0, [r4, #24]
	return 0;
   1af0c:	2000      	movs	r0, #0
}
   1af0e:	bd38      	pop	{r3, r4, r5, pc}

0001af10 <nrf91_socket_offload_send>:
{
   1af10:	b570      	push	{r4, r5, r6, lr}
   1af12:	4604      	mov	r4, r0
	return nrf_send(sd, buf, len, z_to_nrf_flags(flags));
   1af14:	4618      	mov	r0, r3
{
   1af16:	4615      	mov	r5, r2
	return nrf_send(sd, buf, len, z_to_nrf_flags(flags));
   1af18:	f7ff ff7c 	bl	1ae14 <z_to_nrf_flags>
   1af1c:	462a      	mov	r2, r5
   1af1e:	4603      	mov	r3, r0
   1af20:	4620      	mov	r0, r4
}
   1af22:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return nrf_send(sd, buf, len, z_to_nrf_flags(flags));
   1af26:	f7f9 bb0f 	b.w	14548 <nrf_send>

0001af2a <nrf91_socket_offload_recv>:
{
   1af2a:	b570      	push	{r4, r5, r6, lr}
   1af2c:	4604      	mov	r4, r0
	return nrf_recv(sd, buf, max_len, z_to_nrf_flags(flags));
   1af2e:	4618      	mov	r0, r3
{
   1af30:	4615      	mov	r5, r2
	return nrf_recv(sd, buf, max_len, z_to_nrf_flags(flags));
   1af32:	f7ff ff6f 	bl	1ae14 <z_to_nrf_flags>
   1af36:	462a      	mov	r2, r5
   1af38:	4603      	mov	r3, r0
   1af3a:	4620      	mov	r0, r4
}
   1af3c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return nrf_recv(sd, buf, max_len, z_to_nrf_flags(flags));
   1af40:	f7f9 bb38 	b.w	145b4 <nrf_recv>

0001af44 <nrf91_socket_offload_getsockopt>:
{
   1af44:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1af48:	461d      	mov	r5, r3
	struct nrf_timeval nrf_rcvtimeo = {0, 0};
   1af4a:	2300      	movs	r3, #0
{
   1af4c:	b086      	sub	sp, #24
   1af4e:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
	struct nrf_timeval nrf_rcvtimeo = {0, 0};
   1af52:	e9cd 3304 	strd	r3, r3, [sp, #16]
	nrf_socklen_t nrf_optlen = (nrf_socklen_t)*optlen;
   1af56:	f8d8 3000 	ldr.w	r3, [r8]
	switch (z_in_level) {
   1af5a:	f5b1 7f8d 	cmp.w	r1, #282	; 0x11a
{
   1af5e:	4607      	mov	r7, r0
   1af60:	460c      	mov	r4, r1
   1af62:	4616      	mov	r6, r2
	nrf_socklen_t nrf_optlen = (nrf_socklen_t)*optlen;
   1af64:	9303      	str	r3, [sp, #12]
	switch (z_in_level) {
   1af66:	d002      	beq.n	1af6e <nrf91_socket_offload_getsockopt+0x2a>
   1af68:	dc2b      	bgt.n	1afc2 <nrf91_socket_offload_getsockopt+0x7e>
   1af6a:	2901      	cmp	r1, #1
   1af6c:	d13d      	bne.n	1afea <nrf91_socket_offload_getsockopt+0xa6>
	if (z_to_nrf_optname(level, optname, &nrf_optname) < 0)
   1af6e:	aa02      	add	r2, sp, #8
   1af70:	4631      	mov	r1, r6
   1af72:	4620      	mov	r0, r4
   1af74:	f7f4 fd5c 	bl	fa30 <z_to_nrf_optname>
   1af78:	2800      	cmp	r0, #0
   1af7a:	db36      	blt.n	1afea <nrf91_socket_offload_getsockopt+0xa6>
	if ((level == SOL_SOCKET) && (optname == SO_RCVTIMEO)) {
   1af7c:	2c01      	cmp	r4, #1
   1af7e:	d128      	bne.n	1afd2 <nrf91_socket_offload_getsockopt+0x8e>
   1af80:	2e14      	cmp	r6, #20
   1af82:	d126      	bne.n	1afd2 <nrf91_socket_offload_getsockopt+0x8e>
		nrf_optlen = sizeof(struct nrf_timeval);
   1af84:	2308      	movs	r3, #8
   1af86:	9303      	str	r3, [sp, #12]
		nrf_optval = &nrf_rcvtimeo;
   1af88:	ab04      	add	r3, sp, #16
	retval = nrf_getsockopt(sd, nrf_level, nrf_optname, nrf_optval,
   1af8a:	aa03      	add	r2, sp, #12
   1af8c:	9200      	str	r2, [sp, #0]
   1af8e:	4638      	mov	r0, r7
   1af90:	9a02      	ldr	r2, [sp, #8]
   1af92:	4621      	mov	r1, r4
   1af94:	f7f9 fb8e 	bl	146b4 <nrf_getsockopt>
	if ((retval == 0) && (optval != NULL)) {
   1af98:	4607      	mov	r7, r0
   1af9a:	b970      	cbnz	r0, 1afba <nrf91_socket_offload_getsockopt+0x76>
   1af9c:	b16d      	cbz	r5, 1afba <nrf91_socket_offload_getsockopt+0x76>
		*optlen = nrf_optlen;
   1af9e:	9b03      	ldr	r3, [sp, #12]
		if (level == SOL_SOCKET) {
   1afa0:	2c01      	cmp	r4, #1
		*optlen = nrf_optlen;
   1afa2:	f8c8 3000 	str.w	r3, [r8]
		if (level == SOL_SOCKET) {
   1afa6:	d108      	bne.n	1afba <nrf91_socket_offload_getsockopt+0x76>
			if (optname == SO_ERROR) {
   1afa8:	2e04      	cmp	r6, #4
   1afaa:	d114      	bne.n	1afd6 <nrf91_socket_offload_getsockopt+0x92>
				bsd_os_errno_set(*(int *)optval);
   1afac:	6828      	ldr	r0, [r5, #0]
   1afae:	f7f4 fc19 	bl	f7e4 <bsd_os_errno_set>
				*(int *)optval = errno;
   1afb2:	f7ff ff79 	bl	1aea8 <z_errno>
   1afb6:	6803      	ldr	r3, [r0, #0]
   1afb8:	602b      	str	r3, [r5, #0]
}
   1afba:	4638      	mov	r0, r7
   1afbc:	b006      	add	sp, #24
   1afbe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	switch (z_in_level) {
   1afc2:	f240 2302 	movw	r3, #514	; 0x202
   1afc6:	4299      	cmp	r1, r3
   1afc8:	d0d1      	beq.n	1af6e <nrf91_socket_offload_getsockopt+0x2a>
   1afca:	f240 2303 	movw	r3, #515	; 0x203
   1afce:	4299      	cmp	r1, r3
   1afd0:	e7cc      	b.n	1af6c <nrf91_socket_offload_getsockopt+0x28>
   1afd2:	462b      	mov	r3, r5
   1afd4:	e7d9      	b.n	1af8a <nrf91_socket_offload_getsockopt+0x46>
			} else if (optname == SO_RCVTIMEO) {
   1afd6:	2e14      	cmp	r6, #20
   1afd8:	d1ef      	bne.n	1afba <nrf91_socket_offload_getsockopt+0x76>
				((struct timeval *)optval)->tv_sec =
   1afda:	9b04      	ldr	r3, [sp, #16]
   1afdc:	602b      	str	r3, [r5, #0]
				((struct timeval *)optval)->tv_usec =
   1afde:	9b05      	ldr	r3, [sp, #20]
   1afe0:	606b      	str	r3, [r5, #4]
				*optlen = sizeof(struct timeval);
   1afe2:	2308      	movs	r3, #8
   1afe4:	f8c8 3000 	str.w	r3, [r8]
   1afe8:	e7e7      	b.n	1afba <nrf91_socket_offload_getsockopt+0x76>
	errno = ENOPROTOOPT;
   1afea:	f7ff ff5d 	bl	1aea8 <z_errno>
   1afee:	232a      	movs	r3, #42	; 0x2a
	return retval;
   1aff0:	f04f 37ff 	mov.w	r7, #4294967295
	errno = ENOPROTOOPT;
   1aff4:	6003      	str	r3, [r0, #0]
	return retval;
   1aff6:	e7e0      	b.n	1afba <nrf91_socket_offload_getsockopt+0x76>

0001aff8 <nrf91_socket_offload_poll>:
{
   1aff8:	b5f0      	push	{r4, r5, r6, r7, lr}
   1affa:	b091      	sub	sp, #68	; 0x44
   1affc:	4605      	mov	r5, r0
   1affe:	460c      	mov	r4, r1
   1b000:	4616      	mov	r6, r2
	struct nrf_pollfd tmp[BSD_MAX_SOCKET_COUNT] = {0};
   1b002:	2100      	movs	r1, #0
   1b004:	2240      	movs	r2, #64	; 0x40
   1b006:	4668      	mov	r0, sp
   1b008:	f7ff fc37 	bl	1a87a <memset>
	for (int i = 0; i < nfds; i++) {
   1b00c:	466a      	mov	r2, sp
   1b00e:	2100      	movs	r1, #0
		if (fds[i].events & POLLIN) {
   1b010:	1d2f      	adds	r7, r5, #4
	for (int i = 0; i < nfds; i++) {
   1b012:	42a1      	cmp	r1, r4
   1b014:	db0c      	blt.n	1b030 <nrf91_socket_offload_poll+0x38>
	retval = nrf_poll((struct nrf_pollfd *)&tmp, nfds, timeout);
   1b016:	4632      	mov	r2, r6
   1b018:	4621      	mov	r1, r4
   1b01a:	4668      	mov	r0, sp
   1b01c:	f7f9 fb6a 	bl	146f4 <nrf_poll>
	for (int i = 0; i < nfds; i++) {
   1b020:	2200      	movs	r2, #0
   1b022:	462b      	mov	r3, r5
		fds[i].revents = 0;
   1b024:	4616      	mov	r6, r2
			fds[i].revents |= POLLIN;
   1b026:	2701      	movs	r7, #1
	for (int i = 0; i < nfds; i++) {
   1b028:	42a2      	cmp	r2, r4
   1b02a:	db1a      	blt.n	1b062 <nrf91_socket_offload_poll+0x6a>
}
   1b02c:	b011      	add	sp, #68	; 0x44
   1b02e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		tmp[i].handle = fds[i].fd;
   1b030:	f855 3031 	ldr.w	r3, [r5, r1, lsl #3]
		if (fds[i].events & POLLIN) {
   1b034:	f837 0031 	ldrh.w	r0, [r7, r1, lsl #3]
		tmp[i].handle = fds[i].fd;
   1b038:	6013      	str	r3, [r2, #0]
		if (fds[i].events & POLLIN) {
   1b03a:	07c3      	lsls	r3, r0, #31
			tmp[i].requested |= NRF_POLLIN;
   1b03c:	bf48      	it	mi
   1b03e:	8893      	ldrhmi	r3, [r2, #4]
	for (int i = 0; i < nfds; i++) {
   1b040:	f101 0101 	add.w	r1, r1, #1
			tmp[i].requested |= NRF_POLLIN;
   1b044:	bf44      	itt	mi
   1b046:	f043 0301 	orrmi.w	r3, r3, #1
   1b04a:	8093      	strhmi	r3, [r2, #4]
		if (fds[i].events & POLLOUT) {
   1b04c:	0743      	lsls	r3, r0, #29
			tmp[i].requested |= NRF_POLLOUT;
   1b04e:	bf48      	it	mi
   1b050:	8893      	ldrhmi	r3, [r2, #4]
   1b052:	f102 0208 	add.w	r2, r2, #8
   1b056:	bf44      	itt	mi
   1b058:	f043 0302 	orrmi.w	r3, r3, #2
   1b05c:	f822 3c04 	strhmi.w	r3, [r2, #-4]
   1b060:	e7d7      	b.n	1b012 <nrf91_socket_offload_poll+0x1a>
		if (tmp[i].returned & NRF_POLLIN) {
   1b062:	eb0d 01c2 	add.w	r1, sp, r2, lsl #3
   1b066:	88c9      	ldrh	r1, [r1, #6]
		fds[i].revents = 0;
   1b068:	80de      	strh	r6, [r3, #6]
		if (tmp[i].returned & NRF_POLLIN) {
   1b06a:	07cd      	lsls	r5, r1, #31
			fds[i].revents |= POLLIN;
   1b06c:	bf48      	it	mi
   1b06e:	80df      	strhmi	r7, [r3, #6]
		if (tmp[i].returned & NRF_POLLOUT) {
   1b070:	078d      	lsls	r5, r1, #30
			fds[i].revents |= POLLOUT;
   1b072:	bf48      	it	mi
   1b074:	88dd      	ldrhmi	r5, [r3, #6]
	for (int i = 0; i < nfds; i++) {
   1b076:	f102 0201 	add.w	r2, r2, #1
			fds[i].revents |= POLLOUT;
   1b07a:	bf44      	itt	mi
   1b07c:	f045 0504 	orrmi.w	r5, r5, #4
   1b080:	80dd      	strhmi	r5, [r3, #6]
		if (tmp[i].returned & NRF_POLLERR) {
   1b082:	074d      	lsls	r5, r1, #29
			fds[i].revents |= POLLERR;
   1b084:	bf48      	it	mi
   1b086:	88dd      	ldrhmi	r5, [r3, #6]
   1b088:	f103 0308 	add.w	r3, r3, #8
   1b08c:	bf44      	itt	mi
   1b08e:	f045 0508 	orrmi.w	r5, r5, #8
   1b092:	f823 5c02 	strhmi.w	r5, [r3, #-2]
		if (tmp[i].returned & NRF_POLLNVAL) {
   1b096:	06cd      	lsls	r5, r1, #27
			fds[i].revents |= POLLNVAL;
   1b098:	bf42      	ittt	mi
   1b09a:	f833 5c02 	ldrhmi.w	r5, [r3, #-2]
   1b09e:	f045 0520 	orrmi.w	r5, r5, #32
   1b0a2:	f823 5c02 	strhmi.w	r5, [r3, #-2]
		if (tmp[i].returned & NRF_POLLHUP) {
   1b0a6:	0709      	lsls	r1, r1, #28
			fds[i].revents |= POLLHUP;
   1b0a8:	bf42      	ittt	mi
   1b0aa:	f833 1c02 	ldrhmi.w	r1, [r3, #-2]
   1b0ae:	f041 0110 	orrmi.w	r1, r1, #16
   1b0b2:	f823 1c02 	strhmi.w	r1, [r3, #-2]
   1b0b6:	e7b7      	b.n	1b028 <nrf91_socket_offload_poll+0x30>

0001b0b8 <nrf91_socket_offload_listen>:
	return nrf_listen(sd, backlog);
   1b0b8:	f7f9 baa8 	b.w	1460c <nrf_listen>

0001b0bc <nrf91_socket_offload_close>:
	return nrf_close(sd);
   1b0bc:	f7f9 ba1a 	b.w	144f4 <nrf_close>

0001b0c0 <nrf91_socket_offload_fcntl>:
	switch (cmd) {
   1b0c0:	2903      	cmp	r1, #3
{
   1b0c2:	b508      	push	{r3, lr}
	switch (cmd) {
   1b0c4:	d00b      	beq.n	1b0de <nrf91_socket_offload_fcntl+0x1e>
   1b0c6:	2904      	cmp	r1, #4
   1b0c8:	d111      	bne.n	1b0ee <nrf91_socket_offload_fcntl+0x2e>
		flags = va_arg(args, int);
   1b0ca:	6812      	ldr	r2, [r2, #0]
		if (flags != 0 && flags != O_NONBLOCK)
   1b0cc:	f432 4380 	bics.w	r3, r2, #16384	; 0x4000
   1b0d0:	d10d      	bne.n	1b0ee <nrf91_socket_offload_fcntl+0x2e>
}
   1b0d2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		retval = nrf_fcntl(fd, NRF_F_SETFL, flags);
   1b0d6:	1392      	asrs	r2, r2, #14
   1b0d8:	2101      	movs	r1, #1
   1b0da:	f7f9 bb0d 	b.w	146f8 <nrf_fcntl>
		flags = nrf_fcntl(fd, NRF_F_GETFL, 0);
   1b0de:	2200      	movs	r2, #0
   1b0e0:	2102      	movs	r1, #2
   1b0e2:	f7f9 fb09 	bl	146f8 <nrf_fcntl>
		retval = (flags & NRF_O_NONBLOCK) ? O_NONBLOCK : 0;
   1b0e6:	0380      	lsls	r0, r0, #14
   1b0e8:	f400 4080 	and.w	r0, r0, #16384	; 0x4000
}
   1b0ec:	bd08      	pop	{r3, pc}
	errno = EINVAL;
   1b0ee:	f7ff fedb 	bl	1aea8 <z_errno>
   1b0f2:	2316      	movs	r3, #22
   1b0f4:	6003      	str	r3, [r0, #0]
	return retval;
   1b0f6:	f04f 30ff 	mov.w	r0, #4294967295
   1b0fa:	e7f7      	b.n	1b0ec <nrf91_socket_offload_fcntl+0x2c>

0001b0fc <nrf91_socket_offload_recvfrom>:
{
   1b0fc:	b5f0      	push	{r4, r5, r6, r7, lr}
   1b0fe:	4605      	mov	r5, r0
   1b100:	b08d      	sub	sp, #52	; 0x34
   1b102:	4618      	mov	r0, r3
   1b104:	e9dd 4612 	ldrd	r4, r6, [sp, #72]	; 0x48
   1b108:	4617      	mov	r7, r2
	if (from == NULL) {
   1b10a:	f7ff fe83 	bl	1ae14 <z_to_nrf_flags>
   1b10e:	4603      	mov	r3, r0
   1b110:	b94c      	cbnz	r4, 1b126 <nrf91_socket_offload_recvfrom+0x2a>
		retval = nrf_recvfrom(sd, buf, len, z_to_nrf_flags(flags), NULL,
   1b112:	4628      	mov	r0, r5
   1b114:	e9cd 4400 	strd	r4, r4, [sp]
   1b118:	463a      	mov	r2, r7
   1b11a:	f7f9 fa2f 	bl	1457c <nrf_recvfrom>
   1b11e:	4605      	mov	r5, r0
}
   1b120:	4628      	mov	r0, r5
   1b122:	b00d      	add	sp, #52	; 0x34
   1b124:	bdf0      	pop	{r4, r5, r6, r7, pc}
		nrf_socklen_t sock_len = sizeof(struct nrf_sockaddr_in6);
   1b126:	2224      	movs	r2, #36	; 0x24
   1b128:	9202      	str	r2, [sp, #8]
		retval = nrf_recvfrom(sd, buf, len, z_to_nrf_flags(flags),
   1b12a:	aa02      	add	r2, sp, #8
   1b12c:	9201      	str	r2, [sp, #4]
   1b12e:	aa03      	add	r2, sp, #12
   1b130:	9200      	str	r2, [sp, #0]
   1b132:	4628      	mov	r0, r5
   1b134:	463a      	mov	r2, r7
   1b136:	f7f9 fa21 	bl	1457c <nrf_recvfrom>
		if (cliaddr->sa_family == NRF_AF_INET) {
   1b13a:	9b04      	ldr	r3, [sp, #16]
		retval = nrf_recvfrom(sd, buf, len, z_to_nrf_flags(flags),
   1b13c:	4605      	mov	r5, r0
		if (cliaddr->sa_family == NRF_AF_INET) {
   1b13e:	2b02      	cmp	r3, #2
   1b140:	d109      	bne.n	1b156 <nrf91_socket_offload_recvfrom+0x5a>
	ptr->sin_port = nrf_in->sin_port;
   1b142:	f8bd 3014 	ldrh.w	r3, [sp, #20]
   1b146:	8063      	strh	r3, [r4, #2]
	ptr->sin_family = AF_INET;
   1b148:	2301      	movs	r3, #1
   1b14a:	8023      	strh	r3, [r4, #0]
	ptr->sin_addr.s_addr = nrf_in->sin_addr.s_addr;
   1b14c:	9b06      	ldr	r3, [sp, #24]
   1b14e:	6063      	str	r3, [r4, #4]
			*fromlen = sizeof(struct sockaddr_in);
   1b150:	2308      	movs	r3, #8
			*fromlen = sizeof(struct sockaddr_in6);
   1b152:	6033      	str	r3, [r6, #0]
	return retval;
   1b154:	e7e4      	b.n	1b120 <nrf91_socket_offload_recvfrom+0x24>
		} else if (cliaddr->sa_family == NRF_AF_INET6) {
   1b156:	2b0a      	cmp	r3, #10
   1b158:	d1e2      	bne.n	1b120 <nrf91_socket_offload_recvfrom+0x24>
	ptr->sin6_port = nrf_in->sin6_port;
   1b15a:	f8bd 3014 	ldrh.w	r3, [sp, #20]
	ptr->sin6_family = AF_INET6;
   1b15e:	4620      	mov	r0, r4
	ptr->sin6_port = nrf_in->sin6_port;
   1b160:	8063      	strh	r3, [r4, #2]
	ptr->sin6_family = AF_INET6;
   1b162:	2302      	movs	r3, #2
	memcpy(ptr->sin6_addr.s6_addr, nrf_in->sin6_addr.s6_addr,
   1b164:	2210      	movs	r2, #16
	ptr->sin6_family = AF_INET6;
   1b166:	f820 3b04 	strh.w	r3, [r0], #4
	memcpy(ptr->sin6_addr.s6_addr, nrf_in->sin6_addr.s6_addr,
   1b16a:	a907      	add	r1, sp, #28
   1b16c:	f7ff fb5b 	bl	1a826 <memcpy>
	ptr->sin6_scope_id = (u8_t)nrf_in->sin6_scope_id;
   1b170:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   1b172:	7523      	strb	r3, [r4, #20]
			*fromlen = sizeof(struct sockaddr_in6);
   1b174:	2318      	movs	r3, #24
   1b176:	e7ec      	b.n	1b152 <nrf91_socket_offload_recvfrom+0x56>

0001b178 <nrf91_socket_offload_connect>:
{
   1b178:	b570      	push	{r4, r5, r6, lr}
	if (addr->sa_family == AF_INET) {
   1b17a:	880b      	ldrh	r3, [r1, #0]
{
   1b17c:	b08a      	sub	sp, #40	; 0x28
	if (addr->sa_family == AF_INET) {
   1b17e:	2b01      	cmp	r3, #1
{
   1b180:	4606      	mov	r6, r0
   1b182:	460c      	mov	r4, r1
	if (addr->sa_family == AF_INET) {
   1b184:	d10e      	bne.n	1b1a4 <nrf91_socket_offload_connect+0x2c>
	nrf_out->sin_port = ptr->sin_port;
   1b186:	884b      	ldrh	r3, [r1, #2]
	nrf_out->sin_len = sizeof(struct nrf_sockaddr_in);
   1b188:	2210      	movs	r2, #16
	nrf_out->sin_port = ptr->sin_port;
   1b18a:	f8ad 300c 	strh.w	r3, [sp, #12]
	nrf_out->sin_family = NRF_AF_INET;
   1b18e:	2302      	movs	r3, #2
   1b190:	9302      	str	r3, [sp, #8]
	nrf_out->sin_addr.s_addr = ptr->sin_addr.s_addr;
   1b192:	684b      	ldr	r3, [r1, #4]
	nrf_out->sin_len = sizeof(struct nrf_sockaddr_in);
   1b194:	f88d 2004 	strb.w	r2, [sp, #4]
	nrf_out->sin_addr.s_addr = ptr->sin_addr.s_addr;
   1b198:	9304      	str	r3, [sp, #16]
		retval = nrf_connect(sd, (const struct nrf_sockaddr_in *)&ipv4,
   1b19a:	a901      	add	r1, sp, #4
		retval = nrf_connect(sd, (const struct nrf_sockaddr *)&ipv6,
   1b19c:	f7f9 fa24 	bl	145e8 <nrf_connect>
}
   1b1a0:	b00a      	add	sp, #40	; 0x28
   1b1a2:	bd70      	pop	{r4, r5, r6, pc}
	} else if (addr->sa_family == AF_INET6) {
   1b1a4:	2b02      	cmp	r3, #2
   1b1a6:	d112      	bne.n	1b1ce <nrf91_socket_offload_connect+0x56>
	nrf_out->sin6_port = ptr->sin6_port;
   1b1a8:	884b      	ldrh	r3, [r1, #2]
	nrf_out->sin6_len = sizeof(struct nrf_sockaddr_in6);
   1b1aa:	2524      	movs	r5, #36	; 0x24
	nrf_out->sin6_port = ptr->sin6_port;
   1b1ac:	f8ad 300c 	strh.w	r3, [sp, #12]
	nrf_out->sin6_family = NRF_AF_INET6;
   1b1b0:	230a      	movs	r3, #10
	memcpy(nrf_out->sin6_addr.s6_addr, ptr->sin6_addr.s6_addr,
   1b1b2:	2210      	movs	r2, #16
   1b1b4:	3104      	adds	r1, #4
   1b1b6:	a805      	add	r0, sp, #20
	nrf_out->sin6_family = NRF_AF_INET6;
   1b1b8:	9302      	str	r3, [sp, #8]
	nrf_out->sin6_len = sizeof(struct nrf_sockaddr_in6);
   1b1ba:	f88d 5004 	strb.w	r5, [sp, #4]
	memcpy(nrf_out->sin6_addr.s6_addr, ptr->sin6_addr.s6_addr,
   1b1be:	f7ff fb32 	bl	1a826 <memcpy>
	nrf_out->sin6_scope_id = (u32_t)ptr->sin6_scope_id;
   1b1c2:	7d23      	ldrb	r3, [r4, #20]
		retval = nrf_connect(sd, (const struct nrf_sockaddr *)&ipv6,
   1b1c4:	462a      	mov	r2, r5
	nrf_out->sin6_scope_id = (u32_t)ptr->sin6_scope_id;
   1b1c6:	9309      	str	r3, [sp, #36]	; 0x24
		retval = nrf_connect(sd, (const struct nrf_sockaddr *)&ipv6,
   1b1c8:	a901      	add	r1, sp, #4
   1b1ca:	4630      	mov	r0, r6
   1b1cc:	e7e6      	b.n	1b19c <nrf91_socket_offload_connect+0x24>
		retval = nrf_connect(sd, (void *)addr, addrlen);
   1b1ce:	f7f9 fa0b 	bl	145e8 <nrf_connect>
		if (retval < 0) {
   1b1d2:	2800      	cmp	r0, #0
   1b1d4:	dae4      	bge.n	1b1a0 <nrf91_socket_offload_connect+0x28>
	errno = ENOTSUP;
   1b1d6:	f7ff fe67 	bl	1aea8 <z_errno>
   1b1da:	2323      	movs	r3, #35	; 0x23
   1b1dc:	6003      	str	r3, [r0, #0]
   1b1de:	f04f 30ff 	mov.w	r0, #4294967295
   1b1e2:	e7dd      	b.n	1b1a0 <nrf91_socket_offload_connect+0x28>

0001b1e4 <nrf91_socket_offload_socket>:
{
   1b1e4:	b510      	push	{r4, lr}
	family = z_to_nrf_family(family);
   1b1e6:	b280      	uxth	r0, r0
   1b1e8:	f7ff fe1e 	bl	1ae28 <z_to_nrf_family>
	if (family == -EAFNOSUPPORT) {
   1b1ec:	f110 0f2f 	cmn.w	r0, #47	; 0x2f
	family = z_to_nrf_family(family);
   1b1f0:	4604      	mov	r4, r0
	if (family == -EAFNOSUPPORT) {
   1b1f2:	d106      	bne.n	1b202 <nrf91_socket_offload_socket+0x1e>
		errno = EAFNOSUPPORT;
   1b1f4:	f7ff fe58 	bl	1aea8 <z_errno>
   1b1f8:	232f      	movs	r3, #47	; 0x2f
		errno = EPROTONOSUPPORT;
   1b1fa:	6003      	str	r3, [r0, #0]
}
   1b1fc:	f04f 30ff 	mov.w	r0, #4294967295
   1b200:	bd10      	pop	{r4, pc}
	switch (socktype) {
   1b202:	2903      	cmp	r1, #3
   1b204:	d003      	beq.n	1b20e <nrf91_socket_offload_socket+0x2a>
		return NRF_SOCK_MGMT;
   1b206:	2904      	cmp	r1, #4
   1b208:	bf08      	it	eq
   1b20a:	f44f 7100 	moveq.w	r1, #512	; 0x200
	proto = z_to_nrf_protocol(proto);
   1b20e:	4610      	mov	r0, r2
   1b210:	f7ff fe20 	bl	1ae54 <z_to_nrf_protocol>
	if (proto == -EPROTONOSUPPORT) {
   1b214:	f110 0f2b 	cmn.w	r0, #43	; 0x2b
	proto = z_to_nrf_protocol(proto);
   1b218:	4602      	mov	r2, r0
	if (proto == -EPROTONOSUPPORT) {
   1b21a:	d103      	bne.n	1b224 <nrf91_socket_offload_socket+0x40>
		errno = EPROTONOSUPPORT;
   1b21c:	f7ff fe44 	bl	1aea8 <z_errno>
   1b220:	232b      	movs	r3, #43	; 0x2b
   1b222:	e7ea      	b.n	1b1fa <nrf91_socket_offload_socket+0x16>
	retval = nrf_socket(family, type, proto);
   1b224:	4620      	mov	r0, r4
}
   1b226:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	retval = nrf_socket(family, type, proto);
   1b22a:	f7f9 b951 	b.w	144d0 <nrf_socket>

0001b22e <nrf91_socket_offload_getaddrinfo>:
{
   1b22e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1b232:	4614      	mov	r4, r2
   1b234:	460e      	mov	r6, r1
	struct nrf_addrinfo *nrf_res = NULL;
   1b236:	2100      	movs	r1, #0
{
   1b238:	b093      	sub	sp, #76	; 0x4c
   1b23a:	4605      	mov	r5, r0
	memset(&nrf_hints, 0, sizeof(struct nrf_addrinfo));
   1b23c:	2220      	movs	r2, #32
   1b23e:	a802      	add	r0, sp, #8
{
   1b240:	461f      	mov	r7, r3
	struct nrf_addrinfo *nrf_res = NULL;
   1b242:	9101      	str	r1, [sp, #4]
	memset(&nrf_hints, 0, sizeof(struct nrf_addrinfo));
   1b244:	f7ff fb19 	bl	1a87a <memset>
	if (hints != NULL) {
   1b248:	b194      	cbz	r4, 1b270 <nrf91_socket_offload_getaddrinfo+0x42>
		error = z_to_nrf_addrinfo_hints(hints, &nrf_hints);
   1b24a:	a902      	add	r1, sp, #8
   1b24c:	4620      	mov	r0, r4
   1b24e:	f7ff fe3a 	bl	1aec6 <z_to_nrf_addrinfo_hints>
		if (error == -EPROTONOSUPPORT) {
   1b252:	f110 0f2b 	cmn.w	r0, #43	; 0x2b
   1b256:	f000 80cf 	beq.w	1b3f8 <nrf91_socket_offload_getaddrinfo+0x1ca>
		} else if (error == -EAFNOSUPPORT) {
   1b25a:	302f      	adds	r0, #47	; 0x2f
   1b25c:	f000 80cf 	beq.w	1b3fe <nrf91_socket_offload_getaddrinfo+0x1d0>
		if (hints->ai_next != NULL) {
   1b260:	69e0      	ldr	r0, [r4, #28]
   1b262:	b120      	cbz	r0, 1b26e <nrf91_socket_offload_getaddrinfo+0x40>
			z_to_nrf_addrinfo_hints(hints->ai_next, &nrf_hints_pdn);
   1b264:	ac0a      	add	r4, sp, #40	; 0x28
   1b266:	4621      	mov	r1, r4
   1b268:	f7ff fe2d 	bl	1aec6 <z_to_nrf_addrinfo_hints>
			nrf_hints.ai_next = &nrf_hints_pdn;
   1b26c:	9409      	str	r4, [sp, #36]	; 0x24
		nrf_hints_ptr = &nrf_hints;
   1b26e:	ac02      	add	r4, sp, #8
	int retval = nrf_getaddrinfo(node, service, nrf_hints_ptr, &nrf_res);
   1b270:	4628      	mov	r0, r5
   1b272:	ab01      	add	r3, sp, #4
   1b274:	4622      	mov	r2, r4
   1b276:	4631      	mov	r1, r6
   1b278:	f7f9 fa38 	bl	146ec <nrf_getaddrinfo>
	if (retval != 0) {
   1b27c:	4605      	mov	r5, r0
   1b27e:	b1b0      	cbz	r0, 1b2ae <nrf91_socket_offload_getaddrinfo+0x80>
	switch (nrf_error) {
   1b280:	2823      	cmp	r0, #35	; 0x23
   1b282:	f000 80bf 	beq.w	1b404 <nrf91_socket_offload_getaddrinfo+0x1d6>
   1b286:	dc0a      	bgt.n	1b29e <nrf91_socket_offload_getaddrinfo+0x70>
		return DNS_EAI_SYSTEM;
   1b288:	280c      	cmp	r0, #12
   1b28a:	bf08      	it	eq
   1b28c:	f06f 0509 	mvneq.w	r5, #9
   1b290:	bf18      	it	ne
   1b292:	f06f 050a 	mvnne.w	r5, #10
}
   1b296:	4628      	mov	r0, r5
   1b298:	b013      	add	sp, #76	; 0x4c
   1b29a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	switch (nrf_error) {
   1b29e:	282f      	cmp	r0, #47	; 0x2f
   1b2a0:	f000 80b3 	beq.w	1b40a <nrf91_socket_offload_getaddrinfo+0x1dc>
		return DNS_EAI_SYSTEM;
   1b2a4:	2873      	cmp	r0, #115	; 0x73
   1b2a6:	bf08      	it	eq
   1b2a8:	f06f 0563 	mvneq.w	r5, #99	; 0x63
   1b2ac:	e7f0      	b.n	1b290 <nrf91_socket_offload_getaddrinfo+0x62>
	struct addrinfo *latest_z_res = NULL;
   1b2ae:	4680      	mov	r8, r0
	z_out->ai_next = NULL;
   1b2b0:	4681      	mov	r9, r0
	struct nrf_addrinfo *next_nrf_res = nrf_res;
   1b2b2:	9e01      	ldr	r6, [sp, #4]
	*res = NULL;
   1b2b4:	6038      	str	r0, [r7, #0]
	while ((retval == 0) && (next_nrf_res != NULL)) {
   1b2b6:	b91e      	cbnz	r6, 1b2c0 <nrf91_socket_offload_getaddrinfo+0x92>
	nrf_freeaddrinfo(nrf_res);
   1b2b8:	9801      	ldr	r0, [sp, #4]
   1b2ba:	f7f9 fa19 	bl	146f0 <nrf_freeaddrinfo>
	return retval;
   1b2be:	e7ea      	b.n	1b296 <nrf91_socket_offload_getaddrinfo+0x68>
		struct addrinfo *next_z_res = k_malloc(sizeof(struct addrinfo));
   1b2c0:	2020      	movs	r0, #32
   1b2c2:	f7fd faf9 	bl	188b8 <k_malloc>
		if (next_z_res == NULL) {
   1b2c6:	4604      	mov	r4, r0
   1b2c8:	2800      	cmp	r0, #0
   1b2ca:	f000 808a 	beq.w	1b3e2 <nrf91_socket_offload_getaddrinfo+0x1b4>
	family = nrf_to_z_family(nrf_in->ai_family);
   1b2ce:	6872      	ldr	r2, [r6, #4]
	z_out->ai_socktype = nrf_in->ai_socktype;
   1b2d0:	68b3      	ldr	r3, [r6, #8]
	switch (nrf_family) {
   1b2d2:	2a05      	cmp	r2, #5
	z_out->ai_canonname = NULL; /* TODO Do proper content copy. */
   1b2d4:	e9c0 9906 	strd	r9, r9, [r0, #24]
	z_out->ai_flags = nrf_to_z_addrinfo_flags(nrf_in->ai_flags);
   1b2d8:	f8c0 9000 	str.w	r9, [r0]
	z_out->ai_socktype = nrf_in->ai_socktype;
   1b2dc:	6083      	str	r3, [r0, #8]
	switch (nrf_family) {
   1b2de:	d033      	beq.n	1b348 <nrf91_socket_offload_getaddrinfo+0x11a>
   1b2e0:	dc09      	bgt.n	1b2f6 <nrf91_socket_offload_getaddrinfo+0xc8>
   1b2e2:	2a01      	cmp	r2, #1
   1b2e4:	d032      	beq.n	1b34c <nrf91_socket_offload_getaddrinfo+0x11e>
   1b2e6:	2a02      	cmp	r2, #2
   1b2e8:	d032      	beq.n	1b350 <nrf91_socket_offload_getaddrinfo+0x122>
			k_free(next_z_res);
   1b2ea:	4620      	mov	r0, r4
   1b2ec:	f000 f9b9 	bl	1b662 <k_free>
			retval = DNS_EAI_ADDRFAMILY;
   1b2f0:	f06f 0508 	mvn.w	r5, #8
   1b2f4:	e077      	b.n	1b3e6 <nrf91_socket_offload_getaddrinfo+0x1b8>
	switch (nrf_family) {
   1b2f6:	2a0a      	cmp	r2, #10
   1b2f8:	d02c      	beq.n	1b354 <nrf91_socket_offload_getaddrinfo+0x126>
   1b2fa:	2a66      	cmp	r2, #102	; 0x66
   1b2fc:	d1f5      	bne.n	1b2ea <nrf91_socket_offload_getaddrinfo+0xbc>
		return AF_LTE;
   1b2fe:	4613      	mov	r3, r2
	z_out->ai_family = family;
   1b300:	6063      	str	r3, [r4, #4]
	z_out->ai_protocol = nrf_to_z_protocol(nrf_in->ai_protocol);
   1b302:	68f3      	ldr	r3, [r6, #12]
	switch (proto) {
   1b304:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
   1b308:	d045      	beq.n	1b396 <nrf91_socket_offload_getaddrinfo+0x168>
   1b30a:	dc25      	bgt.n	1b358 <nrf91_socket_offload_getaddrinfo+0x12a>
   1b30c:	2b01      	cmp	r3, #1
   1b30e:	d047      	beq.n	1b3a0 <nrf91_socket_offload_getaddrinfo+0x172>
   1b310:	2b02      	cmp	r3, #2
   1b312:	d043      	beq.n	1b39c <nrf91_socket_offload_getaddrinfo+0x16e>
   1b314:	bb43      	cbnz	r3, 1b368 <nrf91_socket_offload_getaddrinfo+0x13a>
	if (nrf_in->ai_family == NRF_AF_INET) {
   1b316:	2a02      	cmp	r2, #2
	z_out->ai_protocol = nrf_to_z_protocol(nrf_in->ai_protocol);
   1b318:	60e3      	str	r3, [r4, #12]
	if (nrf_in->ai_family == NRF_AF_INET) {
   1b31a:	d143      	bne.n	1b3a4 <nrf91_socket_offload_getaddrinfo+0x176>
		z_out->ai_addr = k_malloc(sizeof(struct sockaddr_in));
   1b31c:	2008      	movs	r0, #8
   1b31e:	f7fd facb 	bl	188b8 <k_malloc>
   1b322:	6160      	str	r0, [r4, #20]
		if (z_out->ai_addr == NULL) {
   1b324:	2800      	cmp	r0, #0
   1b326:	d059      	beq.n	1b3dc <nrf91_socket_offload_getaddrinfo+0x1ae>
		z_out->ai_addrlen  = sizeof(struct sockaddr_in);
   1b328:	2308      	movs	r3, #8
   1b32a:	6123      	str	r3, [r4, #16]
			(const struct nrf_sockaddr_in *)nrf_in->ai_addr);
   1b32c:	6973      	ldr	r3, [r6, #20]
	ptr->sin_port = nrf_in->sin_port;
   1b32e:	891a      	ldrh	r2, [r3, #8]
	ptr->sin_addr.s_addr = nrf_in->sin_addr.s_addr;
   1b330:	68db      	ldr	r3, [r3, #12]
	ptr->sin_port = nrf_in->sin_port;
   1b332:	8042      	strh	r2, [r0, #2]
	ptr->sin_family = AF_INET;
   1b334:	2201      	movs	r2, #1
	ptr->sin_addr.s_addr = nrf_in->sin_addr.s_addr;
   1b336:	6043      	str	r3, [r0, #4]
	ptr->sin_family = AF_INET;
   1b338:	8002      	strh	r2, [r0, #0]
		if (latest_z_res == NULL) {
   1b33a:	f1b8 0f00 	cmp.w	r8, #0
   1b33e:	d158      	bne.n	1b3f2 <nrf91_socket_offload_getaddrinfo+0x1c4>
			*res = next_z_res;
   1b340:	603c      	str	r4, [r7, #0]
		next_nrf_res = next_nrf_res->ai_next;
   1b342:	69f6      	ldr	r6, [r6, #28]
   1b344:	46a0      	mov	r8, r4
   1b346:	e7b6      	b.n	1b2b6 <nrf91_socket_offload_getaddrinfo+0x88>
		return AF_PACKET;
   1b348:	2303      	movs	r3, #3
   1b34a:	e7d9      	b.n	1b300 <nrf91_socket_offload_getaddrinfo+0xd2>
		return AF_LOCAL;
   1b34c:	2367      	movs	r3, #103	; 0x67
   1b34e:	e7d7      	b.n	1b300 <nrf91_socket_offload_getaddrinfo+0xd2>
		return AF_INET;
   1b350:	2301      	movs	r3, #1
   1b352:	e7d5      	b.n	1b300 <nrf91_socket_offload_getaddrinfo+0xd2>
		return AF_INET6;
   1b354:	2302      	movs	r3, #2
   1b356:	e7d3      	b.n	1b300 <nrf91_socket_offload_getaddrinfo+0xd2>
	switch (proto) {
   1b358:	f240 2101 	movw	r1, #513	; 0x201
   1b35c:	428b      	cmp	r3, r1
   1b35e:	d0da      	beq.n	1b316 <nrf91_socket_offload_getaddrinfo+0xe8>
   1b360:	dc0d      	bgt.n	1b37e <nrf91_socket_offload_getaddrinfo+0x150>
   1b362:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
   1b366:	d013      	beq.n	1b390 <nrf91_socket_offload_getaddrinfo+0x162>
	z_out->ai_protocol = nrf_to_z_protocol(nrf_in->ai_protocol);
   1b368:	f06f 032a 	mvn.w	r3, #42	; 0x2a
   1b36c:	60e3      	str	r3, [r4, #12]
		z_out->ai_addr = NULL;
   1b36e:	2300      	movs	r3, #0
   1b370:	6163      	str	r3, [r4, #20]
			k_free(next_z_res);
   1b372:	4620      	mov	r0, r4
   1b374:	f000 f975 	bl	1b662 <k_free>
			retval = DNS_EAI_SOCKTYPE;
   1b378:	f06f 0506 	mvn.w	r5, #6
   1b37c:	e033      	b.n	1b3e6 <nrf91_socket_offload_getaddrinfo+0x1b8>
	switch (proto) {
   1b37e:	f240 2102 	movw	r1, #514	; 0x202
   1b382:	428b      	cmp	r3, r1
   1b384:	d0c7      	beq.n	1b316 <nrf91_socket_offload_getaddrinfo+0xe8>
   1b386:	f240 2103 	movw	r1, #515	; 0x203
   1b38a:	428b      	cmp	r3, r1
   1b38c:	d0c3      	beq.n	1b316 <nrf91_socket_offload_getaddrinfo+0xe8>
   1b38e:	e7eb      	b.n	1b368 <nrf91_socket_offload_getaddrinfo+0x13a>
	z_out->ai_protocol = nrf_to_z_protocol(nrf_in->ai_protocol);
   1b390:	f240 1311 	movw	r3, #273	; 0x111
   1b394:	e7bf      	b.n	1b316 <nrf91_socket_offload_getaddrinfo+0xe8>
   1b396:	f44f 7381 	mov.w	r3, #258	; 0x102
   1b39a:	e7bc      	b.n	1b316 <nrf91_socket_offload_getaddrinfo+0xe8>
   1b39c:	2311      	movs	r3, #17
   1b39e:	e7ba      	b.n	1b316 <nrf91_socket_offload_getaddrinfo+0xe8>
   1b3a0:	2306      	movs	r3, #6
   1b3a2:	e7b8      	b.n	1b316 <nrf91_socket_offload_getaddrinfo+0xe8>
	} else if (nrf_in->ai_family == NRF_AF_INET6) {
   1b3a4:	2a0a      	cmp	r2, #10
   1b3a6:	d1e4      	bne.n	1b372 <nrf91_socket_offload_getaddrinfo+0x144>
		z_out->ai_addr = k_malloc(sizeof(struct sockaddr_in6));
   1b3a8:	2018      	movs	r0, #24
   1b3aa:	f7fd fa85 	bl	188b8 <k_malloc>
   1b3ae:	4682      	mov	sl, r0
   1b3b0:	6160      	str	r0, [r4, #20]
		if (z_out->ai_addr == NULL) {
   1b3b2:	b198      	cbz	r0, 1b3dc <nrf91_socket_offload_getaddrinfo+0x1ae>
		z_out->ai_addrlen  = sizeof(struct sockaddr_in6);
   1b3b4:	2318      	movs	r3, #24
			(const struct nrf_sockaddr_in6 *)nrf_in->ai_addr);
   1b3b6:	f8d6 b014 	ldr.w	fp, [r6, #20]
		z_out->ai_addrlen  = sizeof(struct sockaddr_in6);
   1b3ba:	6123      	str	r3, [r4, #16]
	ptr->sin6_port = nrf_in->sin6_port;
   1b3bc:	f8bb 3008 	ldrh.w	r3, [fp, #8]
	memcpy(ptr->sin6_addr.s6_addr, nrf_in->sin6_addr.s6_addr,
   1b3c0:	2210      	movs	r2, #16
	ptr->sin6_port = nrf_in->sin6_port;
   1b3c2:	8043      	strh	r3, [r0, #2]
	ptr->sin6_family = AF_INET6;
   1b3c4:	2302      	movs	r3, #2
	memcpy(ptr->sin6_addr.s6_addr, nrf_in->sin6_addr.s6_addr,
   1b3c6:	eb0b 0102 	add.w	r1, fp, r2
	ptr->sin6_family = AF_INET6;
   1b3ca:	f820 3b04 	strh.w	r3, [r0], #4
	memcpy(ptr->sin6_addr.s6_addr, nrf_in->sin6_addr.s6_addr,
   1b3ce:	f7ff fa2a 	bl	1a826 <memcpy>
	ptr->sin6_scope_id = (u8_t)nrf_in->sin6_scope_id;
   1b3d2:	f8db 3020 	ldr.w	r3, [fp, #32]
   1b3d6:	f88a 3014 	strb.w	r3, [sl, #20]
		} else if (error == -EAFNOSUPPORT) {
   1b3da:	e7ae      	b.n	1b33a <nrf91_socket_offload_getaddrinfo+0x10c>
			k_free(next_z_res);
   1b3dc:	4620      	mov	r0, r4
   1b3de:	f000 f940 	bl	1b662 <k_free>
			retval = DNS_EAI_MEMORY;
   1b3e2:	f06f 0509 	mvn.w	r5, #9
		nrf91_socket_offload_freeaddrinfo(*res);
   1b3e6:	6838      	ldr	r0, [r7, #0]
   1b3e8:	f7ff fd60 	bl	1aeac <nrf91_socket_offload_freeaddrinfo>
		*res = NULL;
   1b3ec:	2300      	movs	r3, #0
   1b3ee:	603b      	str	r3, [r7, #0]
   1b3f0:	e762      	b.n	1b2b8 <nrf91_socket_offload_getaddrinfo+0x8a>
			latest_z_res->ai_next = next_z_res;
   1b3f2:	f8c8 401c 	str.w	r4, [r8, #28]
   1b3f6:	e7a4      	b.n	1b342 <nrf91_socket_offload_getaddrinfo+0x114>
			return DNS_EAI_SOCKTYPE;
   1b3f8:	f06f 0506 	mvn.w	r5, #6
   1b3fc:	e74b      	b.n	1b296 <nrf91_socket_offload_getaddrinfo+0x68>
			return DNS_EAI_ADDRFAMILY;
   1b3fe:	f06f 0508 	mvn.w	r5, #8
   1b402:	e748      	b.n	1b296 <nrf91_socket_offload_getaddrinfo+0x68>
		return DNS_EAI_AGAIN;
   1b404:	f06f 0502 	mvn.w	r5, #2
   1b408:	e745      	b.n	1b296 <nrf91_socket_offload_getaddrinfo+0x68>
		return DNS_EAI_NONAME;
   1b40a:	f06f 0501 	mvn.w	r5, #1
   1b40e:	e742      	b.n	1b296 <nrf91_socket_offload_getaddrinfo+0x68>

0001b410 <nrf91_socket_offload_setsockopt>:
{
   1b410:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	switch (z_in_level) {
   1b414:	f5b1 7f8d 	cmp.w	r1, #282	; 0x11a
{
   1b418:	b086      	sub	sp, #24
   1b41a:	4680      	mov	r8, r0
   1b41c:	460c      	mov	r4, r1
   1b41e:	4617      	mov	r7, r2
   1b420:	461d      	mov	r5, r3
   1b422:	9e0c      	ldr	r6, [sp, #48]	; 0x30
	switch (z_in_level) {
   1b424:	d002      	beq.n	1b42c <nrf91_socket_offload_setsockopt+0x1c>
   1b426:	dc1c      	bgt.n	1b462 <nrf91_socket_offload_setsockopt+0x52>
   1b428:	2901      	cmp	r1, #1
   1b42a:	d122      	bne.n	1b472 <nrf91_socket_offload_setsockopt+0x62>
	if (z_to_nrf_optname(level, optname, &nrf_optname) < 0)
   1b42c:	aa03      	add	r2, sp, #12
   1b42e:	4639      	mov	r1, r7
   1b430:	4620      	mov	r0, r4
   1b432:	f7f4 fafd 	bl	fa30 <z_to_nrf_optname>
   1b436:	2800      	cmp	r0, #0
   1b438:	db1b      	blt.n	1b472 <nrf91_socket_offload_setsockopt+0x62>
	if ((level == SOL_SOCKET) && (optname == SO_RCVTIMEO)) {
   1b43a:	2c01      	cmp	r4, #1
   1b43c:	d107      	bne.n	1b44e <nrf91_socket_offload_setsockopt+0x3e>
   1b43e:	2f14      	cmp	r7, #20
   1b440:	d105      	bne.n	1b44e <nrf91_socket_offload_setsockopt+0x3e>
		nrf_optlen = sizeof(struct nrf_timeval);
   1b442:	2608      	movs	r6, #8
		nrf_rcvtimeo.tv_sec = ((struct timeval *)optval)->tv_sec;
   1b444:	682b      	ldr	r3, [r5, #0]
   1b446:	9304      	str	r3, [sp, #16]
		nrf_rcvtimeo.tv_usec = ((struct timeval *)optval)->tv_usec;
   1b448:	686b      	ldr	r3, [r5, #4]
		nrf_optval = &nrf_rcvtimeo;
   1b44a:	ad04      	add	r5, sp, #16
		nrf_rcvtimeo.tv_usec = ((struct timeval *)optval)->tv_usec;
   1b44c:	9305      	str	r3, [sp, #20]
	retval = nrf_setsockopt(sd, nrf_level, nrf_optname, nrf_optval,
   1b44e:	9600      	str	r6, [sp, #0]
   1b450:	462b      	mov	r3, r5
   1b452:	9a03      	ldr	r2, [sp, #12]
   1b454:	4621      	mov	r1, r4
   1b456:	4640      	mov	r0, r8
   1b458:	f7f9 f910 	bl	1467c <nrf_setsockopt>
}
   1b45c:	b006      	add	sp, #24
   1b45e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	switch (z_in_level) {
   1b462:	f240 2302 	movw	r3, #514	; 0x202
   1b466:	4299      	cmp	r1, r3
   1b468:	d0e0      	beq.n	1b42c <nrf91_socket_offload_setsockopt+0x1c>
   1b46a:	f240 2303 	movw	r3, #515	; 0x203
   1b46e:	4299      	cmp	r1, r3
   1b470:	e7db      	b.n	1b42a <nrf91_socket_offload_setsockopt+0x1a>
	errno = ENOPROTOOPT;
   1b472:	f7ff fd19 	bl	1aea8 <z_errno>
   1b476:	232a      	movs	r3, #42	; 0x2a
   1b478:	6003      	str	r3, [r0, #0]
   1b47a:	f04f 30ff 	mov.w	r0, #4294967295
   1b47e:	e7ed      	b.n	1b45c <nrf91_socket_offload_setsockopt+0x4c>

0001b480 <nrf91_socket_offload_sendto>:
{
   1b480:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1b484:	b08d      	sub	sp, #52	; 0x34
   1b486:	9c14      	ldr	r4, [sp, #80]	; 0x50
   1b488:	4605      	mov	r5, r0
   1b48a:	460e      	mov	r6, r1
   1b48c:	4617      	mov	r7, r2
   1b48e:	4698      	mov	r8, r3
	if (to == NULL) {
   1b490:	b96c      	cbnz	r4, 1b4ae <nrf91_socket_offload_sendto+0x2e>
		retval = nrf_sendto(sd, buf, len, z_to_nrf_flags(flags), NULL,
   1b492:	4618      	mov	r0, r3
   1b494:	f7ff fcbe 	bl	1ae14 <z_to_nrf_flags>
   1b498:	e9cd 4400 	strd	r4, r4, [sp]
		retval = nrf_sendto(sd, buf, len, z_to_nrf_flags(flags), &ipv6,
   1b49c:	4603      	mov	r3, r0
   1b49e:	463a      	mov	r2, r7
   1b4a0:	4631      	mov	r1, r6
   1b4a2:	4628      	mov	r0, r5
   1b4a4:	f7f9 f834 	bl	14510 <nrf_sendto>
}
   1b4a8:	b00d      	add	sp, #52	; 0x34
   1b4aa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	} else if (to->sa_family == AF_INET) {
   1b4ae:	8823      	ldrh	r3, [r4, #0]
   1b4b0:	2b01      	cmp	r3, #1
   1b4b2:	d110      	bne.n	1b4d6 <nrf91_socket_offload_sendto+0x56>
	nrf_out->sin_port = ptr->sin_port;
   1b4b4:	8863      	ldrh	r3, [r4, #2]
	nrf_out->sin_len = sizeof(struct nrf_sockaddr_in);
   1b4b6:	2110      	movs	r1, #16
	nrf_out->sin_port = ptr->sin_port;
   1b4b8:	f8ad 3014 	strh.w	r3, [sp, #20]
	nrf_out->sin_family = NRF_AF_INET;
   1b4bc:	2302      	movs	r3, #2
   1b4be:	9304      	str	r3, [sp, #16]
	nrf_out->sin_addr.s_addr = ptr->sin_addr.s_addr;
   1b4c0:	6863      	ldr	r3, [r4, #4]
		retval = nrf_sendto(sd, buf, len, z_to_nrf_flags(flags), &ipv4,
   1b4c2:	4640      	mov	r0, r8
	nrf_out->sin_len = sizeof(struct nrf_sockaddr_in);
   1b4c4:	f88d 100c 	strb.w	r1, [sp, #12]
	nrf_out->sin_addr.s_addr = ptr->sin_addr.s_addr;
   1b4c8:	9306      	str	r3, [sp, #24]
		retval = nrf_sendto(sd, buf, len, z_to_nrf_flags(flags), &ipv4,
   1b4ca:	f7ff fca3 	bl	1ae14 <z_to_nrf_flags>
   1b4ce:	9101      	str	r1, [sp, #4]
		retval = nrf_sendto(sd, buf, len, z_to_nrf_flags(flags), &ipv6,
   1b4d0:	ab03      	add	r3, sp, #12
   1b4d2:	9300      	str	r3, [sp, #0]
   1b4d4:	e7e2      	b.n	1b49c <nrf91_socket_offload_sendto+0x1c>
	} else if (to->sa_family == AF_INET6) {
   1b4d6:	2b02      	cmp	r3, #2
   1b4d8:	d115      	bne.n	1b506 <nrf91_socket_offload_sendto+0x86>
	nrf_out->sin6_port = ptr->sin6_port;
   1b4da:	8863      	ldrh	r3, [r4, #2]
	nrf_out->sin6_len = sizeof(struct nrf_sockaddr_in6);
   1b4dc:	f04f 0924 	mov.w	r9, #36	; 0x24
	nrf_out->sin6_port = ptr->sin6_port;
   1b4e0:	f8ad 3014 	strh.w	r3, [sp, #20]
	nrf_out->sin6_family = NRF_AF_INET6;
   1b4e4:	230a      	movs	r3, #10
	memcpy(nrf_out->sin6_addr.s6_addr, ptr->sin6_addr.s6_addr,
   1b4e6:	2210      	movs	r2, #16
   1b4e8:	1d21      	adds	r1, r4, #4
   1b4ea:	a807      	add	r0, sp, #28
	nrf_out->sin6_family = NRF_AF_INET6;
   1b4ec:	9304      	str	r3, [sp, #16]
	nrf_out->sin6_len = sizeof(struct nrf_sockaddr_in6);
   1b4ee:	f88d 900c 	strb.w	r9, [sp, #12]
	memcpy(nrf_out->sin6_addr.s6_addr, ptr->sin6_addr.s6_addr,
   1b4f2:	f7ff f998 	bl	1a826 <memcpy>
	nrf_out->sin6_scope_id = (u32_t)ptr->sin6_scope_id;
   1b4f6:	7d23      	ldrb	r3, [r4, #20]
		retval = nrf_sendto(sd, buf, len, z_to_nrf_flags(flags), &ipv6,
   1b4f8:	4640      	mov	r0, r8
	nrf_out->sin6_scope_id = (u32_t)ptr->sin6_scope_id;
   1b4fa:	930b      	str	r3, [sp, #44]	; 0x2c
		retval = nrf_sendto(sd, buf, len, z_to_nrf_flags(flags), &ipv6,
   1b4fc:	f7ff fc8a 	bl	1ae14 <z_to_nrf_flags>
   1b500:	f8cd 9004 	str.w	r9, [sp, #4]
   1b504:	e7e4      	b.n	1b4d0 <nrf91_socket_offload_sendto+0x50>
	errno = ENOTSUP;
   1b506:	f7ff fccf 	bl	1aea8 <z_errno>
   1b50a:	2323      	movs	r3, #35	; 0x23
   1b50c:	6003      	str	r3, [r0, #0]
	return retval;
   1b50e:	f04f 30ff 	mov.w	r0, #4294967295
   1b512:	e7c9      	b.n	1b4a8 <nrf91_socket_offload_sendto+0x28>

0001b514 <nrf91_socket_offload_accept>:
{
   1b514:	b5f0      	push	{r4, r5, r6, r7, lr}
   1b516:	4616      	mov	r6, r2
   1b518:	b08b      	sub	sp, #44	; 0x2c
	if ((addr != NULL) && (addrlen != NULL)) {
   1b51a:	460c      	mov	r4, r1
   1b51c:	b1f1      	cbz	r1, 1b55c <nrf91_socket_offload_accept+0x48>
   1b51e:	b302      	cbz	r2, 1b562 <nrf91_socket_offload_accept+0x4e>
		if (*addrlen == sizeof(struct sockaddr_in)) {
   1b520:	6813      	ldr	r3, [r2, #0]
		nrf_addrlen_ptr = &nrf_addrlen;
   1b522:	466a      	mov	r2, sp
		if (*addrlen == sizeof(struct sockaddr_in)) {
   1b524:	2b08      	cmp	r3, #8
			nrf_addrlen = sizeof(struct nrf_sockaddr_in);
   1b526:	bf0c      	ite	eq
   1b528:	2310      	moveq	r3, #16
			nrf_addrlen = sizeof(struct nrf_sockaddr_in6);
   1b52a:	2324      	movne	r3, #36	; 0x24
		nrf_addr_ptr = (struct nrf_sockaddr *)&nrf_addr;
   1b52c:	ad01      	add	r5, sp, #4
			nrf_addrlen = sizeof(struct nrf_sockaddr_in6);
   1b52e:	9300      	str	r3, [sp, #0]
	retval = nrf_accept(sd, nrf_addr_ptr, nrf_addrlen_ptr);
   1b530:	4629      	mov	r1, r5
   1b532:	f7f9 f87b 	bl	1462c <nrf_accept>
	if (retval < 0) {
   1b536:	1e07      	subs	r7, r0, #0
   1b538:	db2b      	blt.n	1b592 <nrf91_socket_offload_accept+0x7e>
	if ((addr != NULL) && (addrlen != NULL)) {
   1b53a:	b164      	cbz	r4, 1b556 <nrf91_socket_offload_accept+0x42>
   1b53c:	b15e      	cbz	r6, 1b556 <nrf91_socket_offload_accept+0x42>
		if (nrf_addr_ptr->sa_family == NRF_AF_INET) {
   1b53e:	686b      	ldr	r3, [r5, #4]
   1b540:	2b02      	cmp	r3, #2
   1b542:	d110      	bne.n	1b566 <nrf91_socket_offload_accept+0x52>
			*addrlen = sizeof(struct sockaddr_in);
   1b544:	2308      	movs	r3, #8
   1b546:	6033      	str	r3, [r6, #0]
	ptr->sin_port = nrf_in->sin_port;
   1b548:	f8bd 300c 	ldrh.w	r3, [sp, #12]
   1b54c:	8063      	strh	r3, [r4, #2]
	ptr->sin_family = AF_INET;
   1b54e:	2301      	movs	r3, #1
   1b550:	8023      	strh	r3, [r4, #0]
	ptr->sin_addr.s_addr = nrf_in->sin_addr.s_addr;
   1b552:	9b04      	ldr	r3, [sp, #16]
   1b554:	6063      	str	r3, [r4, #4]
}
   1b556:	4638      	mov	r0, r7
   1b558:	b00b      	add	sp, #44	; 0x2c
   1b55a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	nrf_socklen_t *nrf_addrlen_ptr = NULL;
   1b55c:	460a      	mov	r2, r1
	struct nrf_sockaddr *nrf_addr_ptr = NULL;
   1b55e:	460d      	mov	r5, r1
   1b560:	e7e6      	b.n	1b530 <nrf91_socket_offload_accept+0x1c>
   1b562:	4615      	mov	r5, r2
   1b564:	e7e4      	b.n	1b530 <nrf91_socket_offload_accept+0x1c>
		} else if (nrf_addr_ptr->sa_family == NRF_AF_INET6) {
   1b566:	2b0a      	cmp	r3, #10
   1b568:	d10f      	bne.n	1b58a <nrf91_socket_offload_accept+0x76>
			*addrlen = sizeof(struct sockaddr_in6);
   1b56a:	2318      	movs	r3, #24
   1b56c:	6033      	str	r3, [r6, #0]
	ptr->sin6_port = nrf_in->sin6_port;
   1b56e:	f8bd 300c 	ldrh.w	r3, [sp, #12]
	ptr->sin6_family = AF_INET6;
   1b572:	4620      	mov	r0, r4
	ptr->sin6_port = nrf_in->sin6_port;
   1b574:	8063      	strh	r3, [r4, #2]
	ptr->sin6_family = AF_INET6;
   1b576:	2302      	movs	r3, #2
	memcpy(ptr->sin6_addr.s6_addr, nrf_in->sin6_addr.s6_addr,
   1b578:	2210      	movs	r2, #16
	ptr->sin6_family = AF_INET6;
   1b57a:	f820 3b04 	strh.w	r3, [r0], #4
	memcpy(ptr->sin6_addr.s6_addr, nrf_in->sin6_addr.s6_addr,
   1b57e:	a905      	add	r1, sp, #20
   1b580:	f7ff f951 	bl	1a826 <memcpy>
	ptr->sin6_scope_id = (u8_t)nrf_in->sin6_scope_id;
   1b584:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1b586:	7523      	strb	r3, [r4, #20]
   1b588:	e7e5      	b.n	1b556 <nrf91_socket_offload_accept+0x42>
	errno = ENOTSUP;
   1b58a:	f7ff fc8d 	bl	1aea8 <z_errno>
   1b58e:	2323      	movs	r3, #35	; 0x23
   1b590:	6003      	str	r3, [r0, #0]
		return -1;
   1b592:	f04f 37ff 	mov.w	r7, #4294967295
   1b596:	e7de      	b.n	1b556 <nrf91_socket_offload_accept+0x42>

0001b598 <nrf91_socket_offload_bind>:
{
   1b598:	b570      	push	{r4, r5, r6, lr}
	if (addr->sa_family == AF_INET) {
   1b59a:	880b      	ldrh	r3, [r1, #0]
{
   1b59c:	b08a      	sub	sp, #40	; 0x28
	if (addr->sa_family == AF_INET) {
   1b59e:	2b01      	cmp	r3, #1
{
   1b5a0:	4606      	mov	r6, r0
   1b5a2:	460c      	mov	r4, r1
	if (addr->sa_family == AF_INET) {
   1b5a4:	d10e      	bne.n	1b5c4 <nrf91_socket_offload_bind+0x2c>
	nrf_out->sin_port = ptr->sin_port;
   1b5a6:	884b      	ldrh	r3, [r1, #2]
	nrf_out->sin_len = sizeof(struct nrf_sockaddr_in);
   1b5a8:	2210      	movs	r2, #16
	nrf_out->sin_port = ptr->sin_port;
   1b5aa:	f8ad 300c 	strh.w	r3, [sp, #12]
	nrf_out->sin_family = NRF_AF_INET;
   1b5ae:	2302      	movs	r3, #2
   1b5b0:	9302      	str	r3, [sp, #8]
	nrf_out->sin_addr.s_addr = ptr->sin_addr.s_addr;
   1b5b2:	684b      	ldr	r3, [r1, #4]
	nrf_out->sin_len = sizeof(struct nrf_sockaddr_in);
   1b5b4:	f88d 2004 	strb.w	r2, [sp, #4]
	nrf_out->sin_addr.s_addr = ptr->sin_addr.s_addr;
   1b5b8:	9304      	str	r3, [sp, #16]
		retval = nrf_bind(sd, (const struct nrf_sockaddr *)&ipv4,
   1b5ba:	a901      	add	r1, sp, #4
		retval = nrf_bind(sd, (const struct nrf_sockaddr *)&ipv6,
   1b5bc:	f7f9 f84c 	bl	14658 <nrf_bind>
}
   1b5c0:	b00a      	add	sp, #40	; 0x28
   1b5c2:	bd70      	pop	{r4, r5, r6, pc}
	} else if (addr->sa_family == AF_INET6) {
   1b5c4:	2b02      	cmp	r3, #2
   1b5c6:	d112      	bne.n	1b5ee <nrf91_socket_offload_bind+0x56>
	nrf_out->sin6_port = ptr->sin6_port;
   1b5c8:	884b      	ldrh	r3, [r1, #2]
	nrf_out->sin6_len = sizeof(struct nrf_sockaddr_in6);
   1b5ca:	2524      	movs	r5, #36	; 0x24
	nrf_out->sin6_port = ptr->sin6_port;
   1b5cc:	f8ad 300c 	strh.w	r3, [sp, #12]
	nrf_out->sin6_family = NRF_AF_INET6;
   1b5d0:	230a      	movs	r3, #10
	memcpy(nrf_out->sin6_addr.s6_addr, ptr->sin6_addr.s6_addr,
   1b5d2:	2210      	movs	r2, #16
   1b5d4:	3104      	adds	r1, #4
   1b5d6:	a805      	add	r0, sp, #20
	nrf_out->sin6_family = NRF_AF_INET6;
   1b5d8:	9302      	str	r3, [sp, #8]
	nrf_out->sin6_len = sizeof(struct nrf_sockaddr_in6);
   1b5da:	f88d 5004 	strb.w	r5, [sp, #4]
	memcpy(nrf_out->sin6_addr.s6_addr, ptr->sin6_addr.s6_addr,
   1b5de:	f7ff f922 	bl	1a826 <memcpy>
	nrf_out->sin6_scope_id = (u32_t)ptr->sin6_scope_id;
   1b5e2:	7d23      	ldrb	r3, [r4, #20]
		retval = nrf_bind(sd, (const struct nrf_sockaddr *)&ipv6,
   1b5e4:	462a      	mov	r2, r5
	nrf_out->sin6_scope_id = (u32_t)ptr->sin6_scope_id;
   1b5e6:	9309      	str	r3, [sp, #36]	; 0x24
		retval = nrf_bind(sd, (const struct nrf_sockaddr *)&ipv6,
   1b5e8:	a901      	add	r1, sp, #4
   1b5ea:	4630      	mov	r0, r6
   1b5ec:	e7e6      	b.n	1b5bc <nrf91_socket_offload_bind+0x24>
	errno = ENOTSUP;
   1b5ee:	f7ff fc5b 	bl	1aea8 <z_errno>
   1b5f2:	2323      	movs	r3, #35	; 0x23
   1b5f4:	6003      	str	r3, [r0, #0]
   1b5f6:	f04f 30ff 	mov.w	r0, #4294967295
   1b5fa:	e7e1      	b.n	1b5c0 <nrf91_socket_offload_bind+0x28>

0001b5fc <device_pm_control_nop>:
}
   1b5fc:	2000      	movs	r0, #0
   1b5fe:	4770      	bx	lr

0001b600 <z_sys_power_save_idle_exit>:
	z_clock_idle_exit();
   1b600:	f7fe bfb2 	b.w	1a568 <z_clock_idle_exit>

0001b604 <k_mem_slab_init>:
{
   1b604:	b530      	push	{r4, r5, lr}
	slab->num_used = 0U;
   1b606:	2400      	movs	r4, #0
   1b608:	6184      	str	r4, [r0, #24]
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
   1b60a:	ea41 0402 	orr.w	r4, r1, r2
   1b60e:	f014 0403 	ands.w	r4, r4, #3
	slab->block_size = block_size;
   1b612:	e9c0 3202 	strd	r3, r2, [r0, #8]
	slab->buffer = buffer;
   1b616:	6101      	str	r1, [r0, #16]
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
   1b618:	d10c      	bne.n	1b634 <k_mem_slab_init+0x30>
	slab->free_list = NULL;
   1b61a:	6144      	str	r4, [r0, #20]
	for (j = 0U; j < slab->num_blocks; j++) {
   1b61c:	42a3      	cmp	r3, r4
   1b61e:	d103      	bne.n	1b628 <k_mem_slab_init+0x24>
	list->tail = (sys_dnode_t *)list;
   1b620:	e9c0 0000 	strd	r0, r0, [r0]
   1b624:	2000      	movs	r0, #0
}
   1b626:	bd30      	pop	{r4, r5, pc}
		*(char **)p = slab->free_list;
   1b628:	6945      	ldr	r5, [r0, #20]
	for (j = 0U; j < slab->num_blocks; j++) {
   1b62a:	3401      	adds	r4, #1
		*(char **)p = slab->free_list;
   1b62c:	600d      	str	r5, [r1, #0]
		slab->free_list = p;
   1b62e:	6141      	str	r1, [r0, #20]
		p += slab->block_size;
   1b630:	4411      	add	r1, r2
   1b632:	e7f3      	b.n	1b61c <k_mem_slab_init+0x18>
		return -EINVAL;
   1b634:	f06f 0015 	mvn.w	r0, #21
	return rc;
   1b638:	e7f5      	b.n	1b626 <k_mem_slab_init+0x22>

0001b63a <k_mem_pool_malloc>:
{
   1b63a:	b513      	push	{r0, r1, r4, lr}
	return __builtin_add_overflow(a, b, result);
}

static inline bool size_add_overflow(size_t a, size_t b, size_t *result)
{
	return __builtin_add_overflow(a, b, result);
   1b63c:	2404      	movs	r4, #4
   1b63e:	190a      	adds	r2, r1, r4
   1b640:	d204      	bcs.n	1b64c <k_mem_pool_malloc+0x12>
	if (k_mem_pool_alloc(pool, &block, size, K_NO_WAIT) != 0) {
   1b642:	2300      	movs	r3, #0
   1b644:	4669      	mov	r1, sp
   1b646:	f7fd f8bf 	bl	187c8 <k_mem_pool_alloc>
   1b64a:	b110      	cbz	r0, 1b652 <k_mem_pool_malloc+0x18>
		return NULL;
   1b64c:	2000      	movs	r0, #0
}
   1b64e:	b002      	add	sp, #8
   1b650:	bd10      	pop	{r4, pc}
	(void)memcpy(block.data, &block.id, sizeof(struct k_mem_block_id));
   1b652:	4622      	mov	r2, r4
   1b654:	a901      	add	r1, sp, #4
   1b656:	9800      	ldr	r0, [sp, #0]
   1b658:	f7ff f8e5 	bl	1a826 <memcpy>
	return (char *)block.data + WB_UP(sizeof(struct k_mem_block_id));
   1b65c:	9800      	ldr	r0, [sp, #0]
   1b65e:	3004      	adds	r0, #4
   1b660:	e7f5      	b.n	1b64e <k_mem_pool_malloc+0x14>

0001b662 <k_free>:
	if (ptr != NULL) {
   1b662:	b110      	cbz	r0, 1b66a <k_free+0x8>
		k_mem_pool_free_id(ptr);
   1b664:	3804      	subs	r0, #4
   1b666:	f7fd b8fb 	b.w	18860 <k_mem_pool_free_id>
}
   1b66a:	4770      	bx	lr

0001b66c <z_queue_node_peek>:
	sys_sfnode_t node;
	void *data;
};

void *z_queue_node_peek(sys_sfnode_t *node, bool needs_free)
{
   1b66c:	b510      	push	{r4, lr}
	void *ret;

	if ((node != NULL) && (sys_sfnode_flags_get(node) != (u8_t)0)) {
   1b66e:	4604      	mov	r4, r0
   1b670:	b130      	cbz	r0, 1b680 <z_queue_node_peek+0x14>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   1b672:	6802      	ldr	r2, [r0, #0]
   1b674:	0793      	lsls	r3, r2, #30
   1b676:	d003      	beq.n	1b680 <z_queue_node_peek+0x14>
		 * back the data pointer.
		 */
		struct alloc_node *anode;

		anode = CONTAINER_OF(node, struct alloc_node, node);
		ret = anode->data;
   1b678:	6844      	ldr	r4, [r0, #4]
		if (needs_free) {
   1b67a:	b109      	cbz	r1, 1b680 <z_queue_node_peek+0x14>
			k_free(anode);
   1b67c:	f7ff fff1 	bl	1b662 <k_free>
		 */
		ret = (void *)node;
	}

	return ret;
}
   1b680:	4620      	mov	r0, r4
   1b682:	bd10      	pop	{r4, pc}

0001b684 <z_impl_k_queue_init>:
	list->head = NULL;
   1b684:	2300      	movs	r3, #0
	list->tail = NULL;
   1b686:	e9c0 3300 	strd	r3, r3, [r0]
{
	sys_sflist_init(&queue->data_q);
	queue->lock = (struct k_spinlock) {};
	z_waitq_init(&queue->wait_q);
#if defined(CONFIG_POLL)
	sys_dlist_init(&queue->poll_events);
   1b68a:	f100 0308 	add.w	r3, r0, #8
   1b68e:	e9c0 3302 	strd	r3, r3, [r0, #8]
#endif

	SYS_TRACING_OBJ_INIT(k_queue, queue);
	z_object_init(queue);
}
   1b692:	4770      	bx	lr

0001b694 <z_impl_k_queue_get>:
	return val;
}
#endif /* CONFIG_POLL */

void *z_impl_k_queue_get(struct k_queue *queue, s32_t timeout)
{
   1b694:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1b698:	4604      	mov	r4, r0
   1b69a:	b086      	sub	sp, #24
   1b69c:	460d      	mov	r5, r1
	__asm__ volatile(
   1b69e:	f04f 0320 	mov.w	r3, #32
   1b6a2:	f3ef 8711 	mrs	r7, BASEPRI
   1b6a6:	f383 8811 	msr	BASEPRI, r3
   1b6aa:	f3bf 8f6f 	isb	sy
Z_GENLIST_IS_EMPTY(sflist)
   1b6ae:	6800      	ldr	r0, [r0, #0]
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
	void *data;

	if (likely(!sys_sflist_is_empty(&queue->data_q))) {
   1b6b0:	b188      	cbz	r0, 1b6d6 <z_impl_k_queue_get+0x42>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   1b6b2:	6803      	ldr	r3, [r0, #0]
 *
 * @return A pointer to the first node of the list
 */
static inline sys_sfnode_t *sys_sflist_get_not_empty(sys_sflist_t *list);

Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode)
   1b6b4:	6862      	ldr	r2, [r4, #4]
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   1b6b6:	f023 0303 	bic.w	r3, r3, #3
Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode)
   1b6ba:	4290      	cmp	r0, r2
	list->head = node;
   1b6bc:	6023      	str	r3, [r4, #0]
	list->tail = node;
   1b6be:	bf08      	it	eq
   1b6c0:	6063      	streq	r3, [r4, #4]
		sys_sfnode_t *node;

		node = sys_sflist_get_not_empty(&queue->data_q);
		data = z_queue_node_peek(node, true);
   1b6c2:	2101      	movs	r1, #1
   1b6c4:	f7ff ffd2 	bl	1b66c <z_queue_node_peek>
	__asm__ volatile(
   1b6c8:	f387 8811 	msr	BASEPRI, r7
   1b6cc:	f3bf 8f6f 	isb	sy
#else
	int ret = z_pend_curr(&queue->lock, key, &queue->wait_q, timeout);

	return (ret != 0) ? NULL : _current->base.swap_data;
#endif /* CONFIG_POLL */
}
   1b6d0:	b006      	add	sp, #24
   1b6d2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (timeout == K_NO_WAIT) {
   1b6d6:	2900      	cmp	r1, #0
   1b6d8:	d0f6      	beq.n	1b6c8 <z_impl_k_queue_get+0x34>
   1b6da:	f387 8811 	msr	BASEPRI, r7
   1b6de:	f3bf 8f6f 	isb	sy
	k_poll_event_init(&event, K_POLL_TYPE_FIFO_DATA_AVAILABLE,
   1b6e2:	2104      	movs	r1, #4
   1b6e4:	4602      	mov	r2, r0
   1b6e6:	4623      	mov	r3, r4
   1b6e8:	eb0d 0001 	add.w	r0, sp, r1
   1b6ec:	f7fd ffc4 	bl	19678 <k_poll_event_init>
	if (timeout != K_FOREVER) {
   1b6f0:	1c6a      	adds	r2, r5, #1
   1b6f2:	d002      	beq.n	1b6fa <z_impl_k_queue_get+0x66>
	return z_impl_k_uptime_get();
   1b6f4:	f000 f991 	bl	1ba1a <z_impl_k_uptime_get>
   1b6f8:	4606      	mov	r6, r0
{
   1b6fa:	2700      	movs	r7, #0
		event.state = K_POLL_STATE_NOT_READY;
   1b6fc:	9b04      	ldr	r3, [sp, #16]
   1b6fe:	f36f 3310 	bfc	r3, #12, #5
   1b702:	9304      	str	r3, [sp, #16]
	if (z_syscall_trap()) {
		return (int) arch_syscall_invoke3(*(uintptr_t *)&events, *(uintptr_t *)&num_events, *(uintptr_t *)&timeout, K_SYSCALL_K_POLL);
	}
#endif
	compiler_barrier();
	return z_impl_k_poll(events, num_events, timeout);
   1b704:	2101      	movs	r1, #1
   1b706:	1bea      	subs	r2, r5, r7
   1b708:	a801      	add	r0, sp, #4
   1b70a:	f7fd ffc9 	bl	196a0 <z_impl_k_poll>
		if (err && err != -EAGAIN) {
   1b70e:	b118      	cbz	r0, 1b718 <z_impl_k_queue_get+0x84>
   1b710:	300b      	adds	r0, #11
   1b712:	d001      	beq.n	1b718 <z_impl_k_queue_get+0x84>
			return NULL;
   1b714:	2000      	movs	r0, #0
   1b716:	e7db      	b.n	1b6d0 <z_impl_k_queue_get+0x3c>
	__asm__ volatile(
   1b718:	f04f 0320 	mov.w	r3, #32
   1b71c:	f3ef 8811 	mrs	r8, BASEPRI
   1b720:	f383 8811 	msr	BASEPRI, r3
   1b724:	f3bf 8f6f 	isb	sy
Z_GENLIST_IS_EMPTY(sflist)
   1b728:	6820      	ldr	r0, [r4, #0]
 *
 * @return A pointer to the first node of the list (or NULL if empty)
 */
static inline sys_sfnode_t *sys_sflist_get(sys_sflist_t *list);

Z_GENLIST_GET(sflist, sfnode)
   1b72a:	b138      	cbz	r0, 1b73c <z_impl_k_queue_get+0xa8>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   1b72c:	6803      	ldr	r3, [r0, #0]
Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode)
   1b72e:	6862      	ldr	r2, [r4, #4]
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   1b730:	f023 0303 	bic.w	r3, r3, #3
Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode)
   1b734:	4290      	cmp	r0, r2
	list->head = node;
   1b736:	6023      	str	r3, [r4, #0]
	list->tail = node;
   1b738:	bf08      	it	eq
   1b73a:	6063      	streq	r3, [r4, #4]
		val = z_queue_node_peek(sys_sflist_get(&queue->data_q), true);
   1b73c:	2101      	movs	r1, #1
   1b73e:	f7ff ff95 	bl	1b66c <z_queue_node_peek>
	__asm__ volatile(
   1b742:	f388 8811 	msr	BASEPRI, r8
   1b746:	f3bf 8f6f 	isb	sy
		if ((val == NULL) && (timeout != K_FOREVER)) {
   1b74a:	2800      	cmp	r0, #0
   1b74c:	d1c0      	bne.n	1b6d0 <z_impl_k_queue_get+0x3c>
   1b74e:	1c6b      	adds	r3, r5, #1
   1b750:	d0d4      	beq.n	1b6fc <z_impl_k_queue_get+0x68>
	return z_impl_k_uptime_get();
   1b752:	f000 f962 	bl	1ba1a <z_impl_k_uptime_get>
			elapsed = k_uptime_get_32() - start;
   1b756:	1b87      	subs	r7, r0, r6
	} while (!val && !done);
   1b758:	42bd      	cmp	r5, r7
   1b75a:	dacf      	bge.n	1b6fc <z_impl_k_queue_get+0x68>
   1b75c:	e7da      	b.n	1b714 <z_impl_k_queue_get+0x80>

0001b75e <z_is_thread_ready>:
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
   1b75e:	7b43      	ldrb	r3, [r0, #13]
   1b760:	06db      	lsls	r3, r3, #27
   1b762:	bf03      	ittte	eq
   1b764:	6980      	ldreq	r0, [r0, #24]
   1b766:	fab0 f080 	clzeq	r0, r0
   1b76a:	0940      	lsreq	r0, r0, #5
   1b76c:	2000      	movne	r0, #0
}
   1b76e:	4770      	bx	lr

0001b770 <z_is_t1_higher_prio_than_t2>:
	if (thread_1->base.prio < thread_2->base.prio) {
   1b770:	f990 000e 	ldrsb.w	r0, [r0, #14]
   1b774:	f991 300e 	ldrsb.w	r3, [r1, #14]
}
   1b778:	4298      	cmp	r0, r3
   1b77a:	bfac      	ite	ge
   1b77c:	2000      	movge	r0, #0
   1b77e:	2001      	movlt	r0, #1
   1b780:	4770      	bx	lr

0001b782 <z_find_first_thread_to_unpend>:
{
   1b782:	b510      	push	{r4, lr}
	__asm__ volatile(
   1b784:	f04f 0320 	mov.w	r3, #32
   1b788:	f3ef 8411 	mrs	r4, BASEPRI
   1b78c:	f383 8811 	msr	BASEPRI, r3
   1b790:	f3bf 8f6f 	isb	sy
		ret = _priq_wait_best(&wait_q->waitq);
   1b794:	f000 f85d 	bl	1b852 <z_priq_dumb_best>
	__asm__ volatile(
   1b798:	f384 8811 	msr	BASEPRI, r4
   1b79c:	f3bf 8f6f 	isb	sy
}
   1b7a0:	bd10      	pop	{r4, pc}

0001b7a2 <z_unpend_thread_no_timeout>:
{
   1b7a2:	b538      	push	{r3, r4, r5, lr}
   1b7a4:	4604      	mov	r4, r0
	__asm__ volatile(
   1b7a6:	f04f 0320 	mov.w	r3, #32
   1b7aa:	f3ef 8511 	mrs	r5, BASEPRI
   1b7ae:	f383 8811 	msr	BASEPRI, r3
   1b7b2:	f3bf 8f6f 	isb	sy
		_priq_wait_remove(&pended_on(thread)->waitq, thread);
   1b7b6:	4601      	mov	r1, r0
   1b7b8:	6880      	ldr	r0, [r0, #8]
   1b7ba:	f7fd f997 	bl	18aec <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
   1b7be:	7b63      	ldrb	r3, [r4, #13]
   1b7c0:	f023 0302 	bic.w	r3, r3, #2
   1b7c4:	7363      	strb	r3, [r4, #13]
	__asm__ volatile(
   1b7c6:	f385 8811 	msr	BASEPRI, r5
   1b7ca:	f3bf 8f6f 	isb	sy
	thread->base.pended_on = NULL;
   1b7ce:	2300      	movs	r3, #0
   1b7d0:	60a3      	str	r3, [r4, #8]
}
   1b7d2:	bd38      	pop	{r3, r4, r5, pc}

0001b7d4 <z_reschedule>:
	return arch_irq_unlocked(key) && !arch_is_in_isr();
   1b7d4:	b921      	cbnz	r1, 1b7e0 <z_reschedule+0xc>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   1b7d6:	f3ef 8005 	mrs	r0, IPSR
   1b7da:	b908      	cbnz	r0, 1b7e0 <z_reschedule+0xc>
   1b7dc:	f7f2 b838 	b.w	d850 <arch_swap>
   1b7e0:	f381 8811 	msr	BASEPRI, r1
   1b7e4:	f3bf 8f6f 	isb	sy
}
   1b7e8:	4770      	bx	lr

0001b7ea <z_reschedule_irqlock>:
	return arch_irq_unlocked(key) && !arch_is_in_isr();
   1b7ea:	4603      	mov	r3, r0
   1b7ec:	b920      	cbnz	r0, 1b7f8 <z_reschedule_irqlock+0xe>
   1b7ee:	f3ef 8205 	mrs	r2, IPSR
   1b7f2:	b90a      	cbnz	r2, 1b7f8 <z_reschedule_irqlock+0xe>
   1b7f4:	f7f2 b82c 	b.w	d850 <arch_swap>
   1b7f8:	f383 8811 	msr	BASEPRI, r3
   1b7fc:	f3bf 8f6f 	isb	sy
}
   1b800:	4770      	bx	lr

0001b802 <z_reschedule_unlocked>:
	__asm__ volatile(
   1b802:	f04f 0320 	mov.w	r3, #32
   1b806:	f3ef 8011 	mrs	r0, BASEPRI
   1b80a:	f383 8811 	msr	BASEPRI, r3
   1b80e:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
   1b812:	f7ff bfea 	b.w	1b7ea <z_reschedule_irqlock>

0001b816 <z_unpend_thread>:
{
   1b816:	b538      	push	{r3, r4, r5, lr}
   1b818:	4604      	mov	r4, r0
   1b81a:	f04f 0320 	mov.w	r3, #32
   1b81e:	f3ef 8511 	mrs	r5, BASEPRI
   1b822:	f383 8811 	msr	BASEPRI, r3
   1b826:	f3bf 8f6f 	isb	sy
		_priq_wait_remove(&pended_on(thread)->waitq, thread);
   1b82a:	4601      	mov	r1, r0
   1b82c:	6880      	ldr	r0, [r0, #8]
   1b82e:	f7fd f95d 	bl	18aec <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
   1b832:	7b63      	ldrb	r3, [r4, #13]
   1b834:	f023 0302 	bic.w	r3, r3, #2
   1b838:	7363      	strb	r3, [r4, #13]
	__asm__ volatile(
   1b83a:	f385 8811 	msr	BASEPRI, r5
   1b83e:	f3bf 8f6f 	isb	sy
	thread->base.pended_on = NULL;
   1b842:	2300      	movs	r3, #0
	return z_abort_timeout(&thread->base.timeout);
   1b844:	f104 0018 	add.w	r0, r4, #24
   1b848:	60a3      	str	r3, [r4, #8]
}
   1b84a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   1b84e:	f000 b8a0 	b.w	1b992 <z_abort_timeout>

0001b852 <z_priq_dumb_best>:
	return list->head == list;
   1b852:	6803      	ldr	r3, [r0, #0]
}
   1b854:	4298      	cmp	r0, r3
   1b856:	bf14      	ite	ne
   1b858:	4618      	movne	r0, r3
   1b85a:	2000      	moveq	r0, #0
   1b85c:	4770      	bx	lr

0001b85e <z_thread_timeout>:
	if (thread->base.pended_on != NULL) {
   1b85e:	f850 3c10 	ldr.w	r3, [r0, #-16]
{
   1b862:	b570      	push	{r4, r5, r6, lr}
   1b864:	4604      	mov	r4, r0
	struct k_thread *thread = CONTAINER_OF(timeout,
   1b866:	f1a0 0518 	sub.w	r5, r0, #24
	if (thread->base.pended_on != NULL) {
   1b86a:	b1cb      	cbz	r3, 1b8a0 <z_thread_timeout+0x42>
	__asm__ volatile(
   1b86c:	f04f 0320 	mov.w	r3, #32
   1b870:	f3ef 8611 	mrs	r6, BASEPRI
   1b874:	f383 8811 	msr	BASEPRI, r3
   1b878:	f3bf 8f6f 	isb	sy
		_priq_wait_remove(&pended_on(thread)->waitq, thread);
   1b87c:	4629      	mov	r1, r5
   1b87e:	f850 0c10 	ldr.w	r0, [r0, #-16]
   1b882:	f7fd f933 	bl	18aec <z_priq_dumb_remove>
   1b886:	f814 3c0b 	ldrb.w	r3, [r4, #-11]
   1b88a:	f023 0302 	bic.w	r3, r3, #2
   1b88e:	f804 3c0b 	strb.w	r3, [r4, #-11]
	__asm__ volatile(
   1b892:	f386 8811 	msr	BASEPRI, r6
   1b896:	f3bf 8f6f 	isb	sy
	thread->base.pended_on = NULL;
   1b89a:	2300      	movs	r3, #0
   1b89c:	f844 3c10 	str.w	r3, [r4, #-16]
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
   1b8a0:	f814 3c0b 	ldrb.w	r3, [r4, #-11]
	if (z_is_thread_ready(thread)) {
   1b8a4:	4628      	mov	r0, r5
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
   1b8a6:	f023 0314 	bic.w	r3, r3, #20
   1b8aa:	f804 3c0b 	strb.w	r3, [r4, #-11]
	if (z_is_thread_ready(thread)) {
   1b8ae:	f7ff ff56 	bl	1b75e <z_is_thread_ready>
   1b8b2:	b120      	cbz	r0, 1b8be <z_thread_timeout+0x60>
		z_add_thread_to_ready_q(thread);
   1b8b4:	4628      	mov	r0, r5
}
   1b8b6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   1b8ba:	f7fd b967 	b.w	18b8c <z_add_thread_to_ready_q>
   1b8be:	bd70      	pop	{r4, r5, r6, pc}

0001b8c0 <z_unpend_first_thread>:
{
   1b8c0:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
   1b8c2:	f04f 0320 	mov.w	r3, #32
   1b8c6:	f3ef 8211 	mrs	r2, BASEPRI
   1b8ca:	f383 8811 	msr	BASEPRI, r3
   1b8ce:	f3bf 8f6f 	isb	sy
		ret = _priq_wait_best(&wait_q->waitq);
   1b8d2:	f7ff ffbe 	bl	1b852 <z_priq_dumb_best>
   1b8d6:	4604      	mov	r4, r0
	__asm__ volatile(
   1b8d8:	f382 8811 	msr	BASEPRI, r2
   1b8dc:	f3bf 8f6f 	isb	sy

static inline struct k_thread *z_unpend1_no_timeout(_wait_q_t *wait_q)
{
	struct k_thread *thread = z_find_first_thread_to_unpend(wait_q, NULL);

	if (thread != NULL) {
   1b8e0:	b1c8      	cbz	r0, 1b916 <z_unpend_first_thread+0x56>
	__asm__ volatile(
   1b8e2:	f04f 0320 	mov.w	r3, #32
   1b8e6:	f3ef 8511 	mrs	r5, BASEPRI
   1b8ea:	f383 8811 	msr	BASEPRI, r3
   1b8ee:	f3bf 8f6f 	isb	sy
		_priq_wait_remove(&pended_on(thread)->waitq, thread);
   1b8f2:	4601      	mov	r1, r0
   1b8f4:	6880      	ldr	r0, [r0, #8]
   1b8f6:	f7fd f8f9 	bl	18aec <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
   1b8fa:	7b63      	ldrb	r3, [r4, #13]
   1b8fc:	f023 0302 	bic.w	r3, r3, #2
   1b900:	7363      	strb	r3, [r4, #13]
	__asm__ volatile(
   1b902:	f385 8811 	msr	BASEPRI, r5
   1b906:	f3bf 8f6f 	isb	sy
	thread->base.pended_on = NULL;
   1b90a:	2300      	movs	r3, #0
   1b90c:	f104 0018 	add.w	r0, r4, #24
   1b910:	60a3      	str	r3, [r4, #8]
   1b912:	f000 f83e 	bl	1b992 <z_abort_timeout>
}
   1b916:	4620      	mov	r0, r4
   1b918:	bd38      	pop	{r3, r4, r5, pc}

0001b91a <z_unpend_all>:
{
   1b91a:	b570      	push	{r4, r5, r6, lr}
   1b91c:	4606      	mov	r6, r0
	int need_sched = 0;
   1b91e:	2500      	movs	r5, #0
   1b920:	6834      	ldr	r4, [r6, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1b922:	42a6      	cmp	r6, r4
   1b924:	d000      	beq.n	1b928 <z_unpend_all+0xe>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
   1b926:	b90c      	cbnz	r4, 1b92c <z_unpend_all+0x12>
}
   1b928:	4628      	mov	r0, r5
   1b92a:	bd70      	pop	{r4, r5, r6, pc}
		z_unpend_thread(thread);
   1b92c:	4620      	mov	r0, r4
   1b92e:	f7ff ff72 	bl	1b816 <z_unpend_thread>
	if (z_is_thread_ready(thread)) {
   1b932:	4620      	mov	r0, r4
   1b934:	f7ff ff13 	bl	1b75e <z_is_thread_ready>
		need_sched = 1;
   1b938:	2501      	movs	r5, #1
   1b93a:	2800      	cmp	r0, #0
   1b93c:	d0f0      	beq.n	1b920 <z_unpend_all+0x6>
		z_add_thread_to_ready_q(thread);
   1b93e:	4620      	mov	r0, r4
   1b940:	f7fd f924 	bl	18b8c <z_add_thread_to_ready_q>
   1b944:	e7ec      	b.n	1b920 <z_unpend_all+0x6>

0001b946 <z_impl_k_sem_init>:
	CHECKIF(limit == 0U || initial_count > limit) {
   1b946:	b15a      	cbz	r2, 1b960 <z_impl_k_sem_init+0x1a>
   1b948:	428a      	cmp	r2, r1
   1b94a:	d309      	bcc.n	1b960 <z_impl_k_sem_init+0x1a>
	sys_dlist_init(&sem->poll_events);
   1b94c:	f100 0310 	add.w	r3, r0, #16
	sem->limit = limit;
   1b950:	e9c0 1202 	strd	r1, r2, [r0, #8]
	list->tail = (sys_dnode_t *)list;
   1b954:	e9c0 0000 	strd	r0, r0, [r0]
   1b958:	e9c0 3304 	strd	r3, r3, [r0, #16]
	return 0;
   1b95c:	2000      	movs	r0, #0
   1b95e:	4770      	bx	lr
		return -EINVAL;
   1b960:	f06f 0015 	mvn.w	r0, #21
}
   1b964:	4770      	bx	lr

0001b966 <z_impl_k_busy_wait>:
	arch_busy_wait(usec_to_wait);
   1b966:	f7f0 bf17 	b.w	c798 <arch_busy_wait>

0001b96a <z_impl_k_thread_name_set>:
}
   1b96a:	f06f 0046 	mvn.w	r0, #70	; 0x46
   1b96e:	4770      	bx	lr

0001b970 <k_thread_name_get>:
}
   1b970:	2000      	movs	r0, #0
   1b972:	4770      	bx	lr

0001b974 <z_new_thread_init>:
{
   1b974:	b510      	push	{r4, lr}
void z_init_thread_base(struct _thread_base *thread_base, int priority,
		       u32_t initial_state, unsigned int options)
{
	/* k_q_node is initialized upon first insertion in a list */

	thread_base->user_options = (u8_t)options;
   1b976:	9c02      	ldr	r4, [sp, #8]
	thread_base->thread_state = (u8_t)initial_state;

	thread_base->prio = priority;
   1b978:	7383      	strb	r3, [r0, #14]
	thread_base->user_options = (u8_t)options;
   1b97a:	7304      	strb	r4, [r0, #12]

	thread_base->sched_locked = 0U;
   1b97c:	2300      	movs	r3, #0
	thread_base->thread_state = (u8_t)initial_state;
   1b97e:	2404      	movs	r4, #4
	thread_base->sched_locked = 0U;
   1b980:	73c3      	strb	r3, [r0, #15]
	thread_base->thread_state = (u8_t)initial_state;
   1b982:	7344      	strb	r4, [r0, #13]
	node->prev = NULL;
   1b984:	e9c0 3306 	strd	r3, r3, [r0, #24]
	thread->fn_abort = NULL;
   1b988:	e9c0 3313 	strd	r3, r3, [r0, #76]	; 0x4c
	thread->stack_info.size = (u32_t)stackSize;
   1b98c:	e9c0 1216 	strd	r1, r2, [r0, #88]	; 0x58
}
   1b990:	bd10      	pop	{r4, pc}

0001b992 <z_abort_timeout>:
{
   1b992:	b510      	push	{r4, lr}
	__asm__ volatile(
   1b994:	f04f 0220 	mov.w	r2, #32
   1b998:	f3ef 8411 	mrs	r4, BASEPRI
   1b99c:	f382 8811 	msr	BASEPRI, r2
   1b9a0:	f3bf 8f6f 	isb	sy
		if (sys_dnode_is_linked(&to->node)) {
   1b9a4:	6803      	ldr	r3, [r0, #0]
   1b9a6:	b13b      	cbz	r3, 1b9b8 <z_abort_timeout+0x26>
			remove_timeout(to);
   1b9a8:	f7fd fd2e 	bl	19408 <remove_timeout>
			ret = 0;
   1b9ac:	2000      	movs	r0, #0
	__asm__ volatile(
   1b9ae:	f384 8811 	msr	BASEPRI, r4
   1b9b2:	f3bf 8f6f 	isb	sy
}
   1b9b6:	bd10      	pop	{r4, pc}
	int ret = -EINVAL;
   1b9b8:	f06f 0015 	mvn.w	r0, #21
   1b9bc:	e7f7      	b.n	1b9ae <z_abort_timeout+0x1c>

0001b9be <z_get_next_timeout_expiry>:
{
   1b9be:	b510      	push	{r4, lr}
	__asm__ volatile(
   1b9c0:	f04f 0320 	mov.w	r3, #32
   1b9c4:	f3ef 8411 	mrs	r4, BASEPRI
   1b9c8:	f383 8811 	msr	BASEPRI, r3
   1b9cc:	f3bf 8f6f 	isb	sy
		ret = next_timeout();
   1b9d0:	f7fd fd2e 	bl	19430 <next_timeout>
	__asm__ volatile(
   1b9d4:	f384 8811 	msr	BASEPRI, r4
   1b9d8:	f3bf 8f6f 	isb	sy
}
   1b9dc:	bd10      	pop	{r4, pc}

0001b9de <z_set_timeout_expiry>:
{
   1b9de:	b570      	push	{r4, r5, r6, lr}
   1b9e0:	4604      	mov	r4, r0
   1b9e2:	460e      	mov	r6, r1
	__asm__ volatile(
   1b9e4:	f04f 0320 	mov.w	r3, #32
   1b9e8:	f3ef 8511 	mrs	r5, BASEPRI
   1b9ec:	f383 8811 	msr	BASEPRI, r3
   1b9f0:	f3bf 8f6f 	isb	sy
		int next = next_timeout();
   1b9f4:	f7fd fd1c 	bl	19430 <next_timeout>
		if (!imminent && (sooner || IS_ENABLED(CONFIG_SMP))) {
   1b9f8:	2801      	cmp	r0, #1
   1b9fa:	dd05      	ble.n	1ba08 <z_set_timeout_expiry+0x2a>
   1b9fc:	42a0      	cmp	r0, r4
   1b9fe:	dd03      	ble.n	1ba08 <z_set_timeout_expiry+0x2a>
			z_clock_set_timeout(ticks, idle);
   1ba00:	4631      	mov	r1, r6
   1ba02:	4620      	mov	r0, r4
   1ba04:	f7f1 fd64 	bl	d4d0 <z_clock_set_timeout>
	__asm__ volatile(
   1ba08:	f385 8811 	msr	BASEPRI, r5
   1ba0c:	f3bf 8f6f 	isb	sy
}
   1ba10:	bd70      	pop	{r4, r5, r6, pc}

0001ba12 <z_tick_get_32>:

u32_t z_tick_get_32(void)
{
   1ba12:	b508      	push	{r3, lr}
#ifdef CONFIG_TICKLESS_KERNEL
	return (u32_t)z_tick_get();
   1ba14:	f7fd fdc0 	bl	19598 <z_tick_get>
#else
	return (u32_t)curr_tick;
#endif
}
   1ba18:	bd08      	pop	{r3, pc}

0001ba1a <z_impl_k_uptime_get>:

s64_t z_impl_k_uptime_get(void)
{
   1ba1a:	b510      	push	{r4, lr}
	return k_ticks_to_ms_floor64(z_tick_get());
   1ba1c:	f7fd fdbc 	bl	19598 <z_tick_get>
			return (t * to_hz + off) / from_hz;
   1ba20:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
   1ba24:	fba0 2304 	umull	r2, r3, r0, r4
   1ba28:	fb04 3301 	mla	r3, r4, r1, r3
   1ba2c:	0bd0      	lsrs	r0, r2, #15
}
   1ba2e:	ea40 4043 	orr.w	r0, r0, r3, lsl #17
   1ba32:	0bd9      	lsrs	r1, r3, #15
   1ba34:	bd10      	pop	{r4, pc}

0001ba36 <k_timer_init>:
	timer->status = 0U;
   1ba36:	2300      	movs	r3, #0
	timer->stop_fn = stop_fn;
   1ba38:	e9c0 1206 	strd	r1, r2, [r0, #24]
   1ba3c:	f100 0210 	add.w	r2, r0, #16
	timer->status = 0U;
   1ba40:	6243      	str	r3, [r0, #36]	; 0x24
	list->tail = (sys_dnode_t *)list;
   1ba42:	e9c0 2204 	strd	r2, r2, [r0, #16]
	node->prev = NULL;
   1ba46:	e9c0 3300 	strd	r3, r3, [r0]
	timer->user_data = NULL;
   1ba4a:	6283      	str	r3, [r0, #40]	; 0x28
}
   1ba4c:	4770      	bx	lr

0001ba4e <z_impl_k_timer_stop>:
}
#include <syscalls/k_timer_start_mrsh.c>
#endif

void z_impl_k_timer_stop(struct k_timer *timer)
{
   1ba4e:	b510      	push	{r4, lr}
   1ba50:	4604      	mov	r4, r0
	int inactive = z_abort_timeout(&timer->timeout) != 0;
   1ba52:	f7ff ff9e 	bl	1b992 <z_abort_timeout>

	if (inactive) {
   1ba56:	bb00      	cbnz	r0, 1ba9a <z_impl_k_timer_stop+0x4c>
		return;
	}

	if (timer->stop_fn != NULL) {
   1ba58:	69e3      	ldr	r3, [r4, #28]
   1ba5a:	b10b      	cbz	r3, 1ba60 <z_impl_k_timer_stop+0x12>
		timer->stop_fn(timer);
   1ba5c:	4620      	mov	r0, r4
   1ba5e:	4798      	blx	r3
	struct k_thread *thread = z_find_first_thread_to_unpend(wait_q, NULL);
   1ba60:	f104 0010 	add.w	r0, r4, #16
   1ba64:	2100      	movs	r1, #0
   1ba66:	f7ff fe8c 	bl	1b782 <z_find_first_thread_to_unpend>
	if (thread != NULL) {
   1ba6a:	4604      	mov	r4, r0
   1ba6c:	b1a8      	cbz	r0, 1ba9a <z_impl_k_timer_stop+0x4c>
		z_unpend_thread_no_timeout(thread);
   1ba6e:	f7ff fe98 	bl	1b7a2 <z_unpend_thread_no_timeout>
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
   1ba72:	7b63      	ldrb	r3, [r4, #13]
   1ba74:	06db      	lsls	r3, r3, #27
   1ba76:	d104      	bne.n	1ba82 <z_impl_k_timer_stop+0x34>
	if (z_is_thread_ready(thread)) {
   1ba78:	69a3      	ldr	r3, [r4, #24]
   1ba7a:	b913      	cbnz	r3, 1ba82 <z_impl_k_timer_stop+0x34>
		z_add_thread_to_ready_q(thread);
   1ba7c:	4620      	mov	r0, r4
   1ba7e:	f7fd f885 	bl	18b8c <z_add_thread_to_ready_q>
	__asm__ volatile(
   1ba82:	f04f 0320 	mov.w	r3, #32
   1ba86:	f3ef 8011 	mrs	r0, BASEPRI
   1ba8a:	f383 8811 	msr	BASEPRI, r3
   1ba8e:	f3bf 8f6f 	isb	sy

	if (pending_thread != NULL) {
		z_ready_thread(pending_thread);
		z_reschedule_unlocked();
	}
}
   1ba92:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	(void) z_reschedule_irqlock(arch_irq_lock());
   1ba96:	f7ff bea8 	b.w	1b7ea <z_reschedule_irqlock>
   1ba9a:	bd10      	pop	{r4, pc}

0001ba9c <clear_event_registrations>:
	while (num_events--) {
   1ba9c:	2314      	movs	r3, #20
{
   1ba9e:	b570      	push	{r4, r5, r6, lr}
	event->poller = NULL;
   1baa0:	2400      	movs	r4, #0
   1baa2:	2601      	movs	r6, #1
   1baa4:	fb03 0101 	mla	r1, r3, r1, r0
	while (num_events--) {
   1baa8:	4281      	cmp	r1, r0
   1baaa:	d100      	bne.n	1baae <clear_event_registrations+0x12>
}
   1baac:	bd70      	pop	{r4, r5, r6, pc}
	switch (event->type) {
   1baae:	f811 3c07 	ldrb.w	r3, [r1, #-7]
	event->poller = NULL;
   1bab2:	f841 4c0c 	str.w	r4, [r1, #-12]
	switch (event->type) {
   1bab6:	f003 030f 	and.w	r3, r3, #15
   1baba:	2b04      	cmp	r3, #4
   1babc:	d80d      	bhi.n	1bada <clear_event_registrations+0x3e>
   1babe:	fa06 f303 	lsl.w	r3, r6, r3
   1bac2:	f013 0f16 	tst.w	r3, #22
   1bac6:	d008      	beq.n	1bada <clear_event_registrations+0x3e>
	if (remove && sys_dnode_is_linked(&event->_node)) {
   1bac8:	f851 3c14 	ldr.w	r3, [r1, #-20]
   1bacc:	b12b      	cbz	r3, 1bada <clear_event_registrations+0x3e>
	node->prev->next = node->next;
   1bace:	f851 5c10 	ldr.w	r5, [r1, #-16]
   1bad2:	602b      	str	r3, [r5, #0]
	node->next->prev = node->prev;
   1bad4:	605d      	str	r5, [r3, #4]
	node->prev = NULL;
   1bad6:	e941 4405 	strd	r4, r4, [r1, #-20]
	__asm__ volatile(
   1bada:	f382 8811 	msr	BASEPRI, r2
   1bade:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
   1bae2:	f04f 0320 	mov.w	r3, #32
   1bae6:	f3ef 8211 	mrs	r2, BASEPRI
   1baea:	f383 8811 	msr	BASEPRI, r3
   1baee:	f3bf 8f6f 	isb	sy
   1baf2:	3914      	subs	r1, #20
   1baf4:	e7d8      	b.n	1baa8 <clear_event_registrations+0xc>

0001baf6 <signal_poll_event>:
#include <syscalls/k_poll_mrsh.c>
#endif

/* must be called with interrupts locked */
static int signal_poll_event(struct k_poll_event *event, u32_t state)
{
   1baf6:	b570      	push	{r4, r5, r6, lr}
	struct _poller *poller = event->poller;
   1baf8:	6884      	ldr	r4, [r0, #8]
{
   1bafa:	4605      	mov	r5, r0
   1bafc:	460e      	mov	r6, r1
	int retcode = 0;

	if (poller) {
   1bafe:	b19c      	cbz	r4, 1bb28 <signal_poll_event+0x32>
		if (poller->cb != NULL) {
   1bb00:	68a3      	ldr	r3, [r4, #8]
   1bb02:	b95b      	cbnz	r3, 1bb1c <signal_poll_event+0x26>
	int retcode = 0;
   1bb04:	4618      	mov	r0, r3
			retcode = poller->cb(event, state);
		}

		poller->is_polling = false;
   1bb06:	7023      	strb	r3, [r4, #0]
	event->poller = NULL;
   1bb08:	2300      	movs	r3, #0
   1bb0a:	60ab      	str	r3, [r5, #8]
	event->state |= state;
   1bb0c:	68eb      	ldr	r3, [r5, #12]
   1bb0e:	f3c3 3204 	ubfx	r2, r3, #12, #5
   1bb12:	4316      	orrs	r6, r2
   1bb14:	f366 3310 	bfi	r3, r6, #12, #5
   1bb18:	60eb      	str	r3, [r5, #12]
			return retcode;
		}
	}

	set_event_ready(event, state);
	return retcode;
   1bb1a:	e004      	b.n	1bb26 <signal_poll_event+0x30>
			retcode = poller->cb(event, state);
   1bb1c:	4798      	blx	r3
		poller->is_polling = false;
   1bb1e:	2300      	movs	r3, #0
		if (retcode < 0) {
   1bb20:	2800      	cmp	r0, #0
		poller->is_polling = false;
   1bb22:	7023      	strb	r3, [r4, #0]
		if (retcode < 0) {
   1bb24:	daf0      	bge.n	1bb08 <signal_poll_event+0x12>
}
   1bb26:	bd70      	pop	{r4, r5, r6, pc}
	int retcode = 0;
   1bb28:	4620      	mov	r0, r4
   1bb2a:	e7ed      	b.n	1bb08 <signal_poll_event+0x12>

0001bb2c <k_poll_poller_cb>:
{
   1bb2c:	b538      	push	{r3, r4, r5, lr}
	struct k_thread *thread = event->poller->thread;
   1bb2e:	6883      	ldr	r3, [r0, #8]
{
   1bb30:	460d      	mov	r5, r1
	struct k_thread *thread = event->poller->thread;
   1bb32:	685c      	ldr	r4, [r3, #4]
	if (!z_is_thread_pending(thread)) {
   1bb34:	7b63      	ldrb	r3, [r4, #13]
   1bb36:	079a      	lsls	r2, r3, #30
   1bb38:	d401      	bmi.n	1bb3e <k_poll_poller_cb+0x12>
		return 0;
   1bb3a:	2000      	movs	r0, #0
}
   1bb3c:	bd38      	pop	{r3, r4, r5, pc}
	if (z_is_thread_timeout_expired(thread)) {
   1bb3e:	6a23      	ldr	r3, [r4, #32]
   1bb40:	3302      	adds	r3, #2
   1bb42:	d012      	beq.n	1bb6a <k_poll_poller_cb+0x3e>
	z_unpend_thread(thread);
   1bb44:	4620      	mov	r0, r4
   1bb46:	f7ff fe66 	bl	1b816 <z_unpend_thread>
	arch_thread_return_value_set(thread,
   1bb4a:	2d08      	cmp	r5, #8
   1bb4c:	bf0c      	ite	eq
   1bb4e:	f06f 0303 	mvneq.w	r3, #3
   1bb52:	2300      	movne	r3, #0
   1bb54:	66a3      	str	r3, [r4, #104]	; 0x68
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
   1bb56:	7b63      	ldrb	r3, [r4, #13]
   1bb58:	06db      	lsls	r3, r3, #27
   1bb5a:	d1ee      	bne.n	1bb3a <k_poll_poller_cb+0xe>
	if (!z_is_thread_ready(thread)) {
   1bb5c:	69a5      	ldr	r5, [r4, #24]
   1bb5e:	2d00      	cmp	r5, #0
   1bb60:	d1eb      	bne.n	1bb3a <k_poll_poller_cb+0xe>
		z_add_thread_to_ready_q(thread);
   1bb62:	4620      	mov	r0, r4
   1bb64:	f7fd f812 	bl	18b8c <z_add_thread_to_ready_q>
	return 0;
   1bb68:	e7e7      	b.n	1bb3a <k_poll_poller_cb+0xe>
		return -EAGAIN;
   1bb6a:	f06f 000a 	mvn.w	r0, #10
   1bb6e:	e7e5      	b.n	1bb3c <k_poll_poller_cb+0x10>

0001bb70 <add_event>:
{
   1bb70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1bb72:	4617      	mov	r7, r2
	return sys_dlist_is_empty(list) ? NULL : list->tail;
   1bb74:	e9d0 2300 	ldrd	r2, r3, [r0]
   1bb78:	4290      	cmp	r0, r2
   1bb7a:	4604      	mov	r4, r0
   1bb7c:	460d      	mov	r5, r1
   1bb7e:	d106      	bne.n	1bb8e <add_event+0x1e>
	node->prev = list->tail;
   1bb80:	6863      	ldr	r3, [r4, #4]
	node->next = list;
   1bb82:	602c      	str	r4, [r5, #0]
	node->prev = list->tail;
   1bb84:	606b      	str	r3, [r5, #4]
	list->tail->next = node;
   1bb86:	6863      	ldr	r3, [r4, #4]
   1bb88:	601d      	str	r5, [r3, #0]
	list->tail = node;
   1bb8a:	6065      	str	r5, [r4, #4]
}
   1bb8c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if ((pending == NULL) ||
   1bb8e:	2b00      	cmp	r3, #0
   1bb90:	d0f6      	beq.n	1bb80 <add_event+0x10>
		z_is_t1_higher_prio_than_t2(pending->poller->thread,
   1bb92:	689b      	ldr	r3, [r3, #8]
   1bb94:	6879      	ldr	r1, [r7, #4]
   1bb96:	6858      	ldr	r0, [r3, #4]
   1bb98:	f7ff fdea 	bl	1b770 <z_is_t1_higher_prio_than_t2>
	if ((pending == NULL) ||
   1bb9c:	2800      	cmp	r0, #0
   1bb9e:	d1ef      	bne.n	1bb80 <add_event+0x10>
	return list->head == list;
   1bba0:	6826      	ldr	r6, [r4, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1bba2:	42b4      	cmp	r4, r6
   1bba4:	d0ec      	beq.n	1bb80 <add_event+0x10>
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
   1bba6:	2e00      	cmp	r6, #0
   1bba8:	d0ea      	beq.n	1bb80 <add_event+0x10>
		if (z_is_t1_higher_prio_than_t2(poller->thread,
   1bbaa:	68b3      	ldr	r3, [r6, #8]
   1bbac:	6878      	ldr	r0, [r7, #4]
   1bbae:	6859      	ldr	r1, [r3, #4]
   1bbb0:	f7ff fdde 	bl	1b770 <z_is_t1_higher_prio_than_t2>
   1bbb4:	b128      	cbz	r0, 1bbc2 <add_event+0x52>
	node->prev = successor->prev;
   1bbb6:	6873      	ldr	r3, [r6, #4]
	node->next = successor;
   1bbb8:	e9c5 6300 	strd	r6, r3, [r5]
	successor->prev->next = node;
   1bbbc:	601d      	str	r5, [r3, #0]
	successor->prev = node;
   1bbbe:	6075      	str	r5, [r6, #4]
			return;
   1bbc0:	e7e4      	b.n	1bb8c <add_event+0x1c>
	return (node == list->tail) ? NULL : node->next;
   1bbc2:	6863      	ldr	r3, [r4, #4]
   1bbc4:	429e      	cmp	r6, r3
   1bbc6:	d0db      	beq.n	1bb80 <add_event+0x10>
   1bbc8:	6836      	ldr	r6, [r6, #0]
   1bbca:	e7ec      	b.n	1bba6 <add_event+0x36>

0001bbcc <register_events>:
{
   1bbcc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	for (int ii = 0; ii < num_events; ii++) {
   1bbd0:	f04f 0b00 	mov.w	fp, #0
{
   1bbd4:	4688      	mov	r8, r1
   1bbd6:	4615      	mov	r5, r2
   1bbd8:	4699      	mov	r9, r3
   1bbda:	4604      	mov	r4, r0
	int events_registered = 0;
   1bbdc:	465e      	mov	r6, fp
	event->poller = NULL;
   1bbde:	465f      	mov	r7, fp
	for (int ii = 0; ii < num_events; ii++) {
   1bbe0:	45c3      	cmp	fp, r8
   1bbe2:	db02      	blt.n	1bbea <register_events+0x1e>
}
   1bbe4:	4630      	mov	r0, r6
   1bbe6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1bbea:	f04f 0320 	mov.w	r3, #32
   1bbee:	f3ef 8a11 	mrs	sl, BASEPRI
   1bbf2:	f383 8811 	msr	BASEPRI, r3
   1bbf6:	f3bf 8f6f 	isb	sy
	switch (event->type) {
   1bbfa:	7b63      	ldrb	r3, [r4, #13]
   1bbfc:	f003 030f 	and.w	r3, r3, #15
   1bc00:	2b02      	cmp	r3, #2
   1bc02:	d005      	beq.n	1bc10 <register_events+0x44>
   1bc04:	2b04      	cmp	r3, #4
   1bc06:	d006      	beq.n	1bc16 <register_events+0x4a>
   1bc08:	2b01      	cmp	r3, #1
   1bc0a:	d118      	bne.n	1bc3e <register_events+0x72>
		if (event->signal->signaled != 0U) {
   1bc0c:	6922      	ldr	r2, [r4, #16]
   1bc0e:	e000      	b.n	1bc12 <register_events+0x46>
		if (k_sem_count_get(event->sem) > 0) {
   1bc10:	6922      	ldr	r2, [r4, #16]
		if (event->signal->signaled != 0U) {
   1bc12:	6892      	ldr	r2, [r2, #8]
   1bc14:	e001      	b.n	1bc1a <register_events+0x4e>
		if (!k_queue_is_empty(event->queue)) {
   1bc16:	6922      	ldr	r2, [r4, #16]
   1bc18:	6812      	ldr	r2, [r2, #0]
		if (event->signal->signaled != 0U) {
   1bc1a:	b182      	cbz	r2, 1bc3e <register_events+0x72>
	event->state |= state;
   1bc1c:	68e2      	ldr	r2, [r4, #12]
	event->poller = NULL;
   1bc1e:	60a7      	str	r7, [r4, #8]
	event->state |= state;
   1bc20:	f3c2 3104 	ubfx	r1, r2, #12, #5
   1bc24:	430b      	orrs	r3, r1
   1bc26:	f363 3210 	bfi	r2, r3, #12, #5
   1bc2a:	60e2      	str	r2, [r4, #12]
			poller->is_polling = false;
   1bc2c:	702f      	strb	r7, [r5, #0]
	__asm__ volatile(
   1bc2e:	f38a 8811 	msr	BASEPRI, sl
   1bc32:	f3bf 8f6f 	isb	sy
	for (int ii = 0; ii < num_events; ii++) {
   1bc36:	f10b 0b01 	add.w	fp, fp, #1
   1bc3a:	3414      	adds	r4, #20
   1bc3c:	e7d0      	b.n	1bbe0 <register_events+0x14>
		} else if (!just_check && poller->is_polling) {
   1bc3e:	f1b9 0f00 	cmp.w	r9, #0
   1bc42:	d1f4      	bne.n	1bc2e <register_events+0x62>
   1bc44:	782b      	ldrb	r3, [r5, #0]
   1bc46:	2b00      	cmp	r3, #0
   1bc48:	d0f1      	beq.n	1bc2e <register_events+0x62>
	switch (event->type) {
   1bc4a:	7b63      	ldrb	r3, [r4, #13]
   1bc4c:	f003 030f 	and.w	r3, r3, #15
   1bc50:	2b02      	cmp	r3, #2
   1bc52:	d007      	beq.n	1bc64 <register_events+0x98>
   1bc54:	2b04      	cmp	r3, #4
   1bc56:	d00e      	beq.n	1bc76 <register_events+0xaa>
   1bc58:	2b01      	cmp	r3, #1
   1bc5a:	d109      	bne.n	1bc70 <register_events+0xa4>
		add_event(&event->signal->poll_events, event, poller);
   1bc5c:	462a      	mov	r2, r5
   1bc5e:	4621      	mov	r1, r4
   1bc60:	6920      	ldr	r0, [r4, #16]
   1bc62:	e003      	b.n	1bc6c <register_events+0xa0>
		add_event(&event->sem->poll_events, event, poller);
   1bc64:	462a      	mov	r2, r5
   1bc66:	4621      	mov	r1, r4
   1bc68:	6920      	ldr	r0, [r4, #16]
   1bc6a:	3010      	adds	r0, #16
		add_event(&event->signal->poll_events, event, poller);
   1bc6c:	f7ff ff80 	bl	1bb70 <add_event>
	event->poller = poller;
   1bc70:	60a5      	str	r5, [r4, #8]
				events_registered += 1;
   1bc72:	3601      	adds	r6, #1
   1bc74:	e7db      	b.n	1bc2e <register_events+0x62>
		add_event(&event->queue->poll_events, event, poller);
   1bc76:	6920      	ldr	r0, [r4, #16]
   1bc78:	462a      	mov	r2, r5
   1bc7a:	4621      	mov	r1, r4
   1bc7c:	3008      	adds	r0, #8
   1bc7e:	e7f5      	b.n	1bc6c <register_events+0xa0>

0001bc80 <z_handle_obj_poll_events>:
	return list->head == list;
   1bc80:	6803      	ldr	r3, [r0, #0]
	if (!sys_dlist_is_empty(list)) {
   1bc82:	4298      	cmp	r0, r3
   1bc84:	d009      	beq.n	1bc9a <z_handle_obj_poll_events+0x1a>
	node->prev->next = node->next;
   1bc86:	e9d3 2000 	ldrd	r2, r0, [r3]
   1bc8a:	6002      	str	r2, [r0, #0]
	node->next->prev = node->prev;
   1bc8c:	6050      	str	r0, [r2, #4]
	node->next = NULL;
   1bc8e:	2200      	movs	r2, #0
{
	struct k_poll_event *poll_event;

	poll_event = (struct k_poll_event *)sys_dlist_get(events);
	if (poll_event != NULL) {
		(void) signal_poll_event(poll_event, state);
   1bc90:	4618      	mov	r0, r3
	node->prev = NULL;
   1bc92:	e9c3 2200 	strd	r2, r2, [r3]
   1bc96:	f7ff bf2e 	b.w	1baf6 <signal_poll_event>
	}
}
   1bc9a:	4770      	bx	lr

0001bc9c <_OffsetAbsSyms>:
					    sizeof(struct _preempt_float));
#else
GEN_ABSOLUTE_SYM(_K_THREAD_NO_FLOAT_SIZEOF, sizeof(struct k_thread));
#endif

GEN_ABS_SYM_END
   1bc9c:	4770      	bx	lr
